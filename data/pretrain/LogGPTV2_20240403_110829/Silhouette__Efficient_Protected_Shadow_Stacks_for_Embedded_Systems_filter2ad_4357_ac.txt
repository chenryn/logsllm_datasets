mark. Section 8.3 presents detailed data of our experiments.
Comparison with uXOM’s Store Transformation There
are two major differences between Silhouette’s implemen-
tation of store hardening and the corresponding store
transformation of uXOM [44]. First, Silhouette performs
store hardening near the end of LLVM’s backend pass
pipeline (after register allocation and right before the
ARMConstantIslandPass [48]). We made this choice to
avoid situations wherein later compiler passes (potentially
added by other developers) either generate new privileged
stores or transform instructions inserted by Silhouette’s
shadow stack, store hardening, and CFI passes. As mentioned
above, Silhouette avoids register spilling by utilizing LLVM’s
LivePhysRegs class to ﬁnd free registers. In contrast, uXOM
transforms store instructions prior to register allocation to
avoid searching for scratch registers. As a consequence, sub-
sequent passes, such as prologue/epilogue insertion or passes
added by future developers, must ensure that they do not
add any new privileged store instructions. Second, our store
hardening pass transforms all privileged stores (sans Store-
Exclusives) while uXOM optimizes its transformation by
eliding transformation of certain stores (such as those whose
base register is sp) when it is safe to do so. The uXOM opti-
mization is safe when used with uXOM’s security policy but
may not be safe if store hardening is used to enforce a new
security policy that does not protect the integrity of the stack
pointer register. Implementing store hardening and optimiza-
tion in a single pass makes the compiler efﬁcient. However,
by adhering to the Separation of Concerns principle in com-
piler implementation [15], our code is more easily reused:
to use store hardening for a new security policy, one simply
changes the compiler to run our store hardening pass and then
implements any optimization passes that are speciﬁc to that
security policy.
6.3 Forward Branch Control-Flow Integrity
Indirect Function Calls With link-time optimization en-
abled, Silhouette inserts a CFI label at the beginning of every
address-taken function. Silhouette also inserts a check before
each indirect call to ensure that the control ﬂow transfers to a
target with a valid label.
Our prototype uses coarse-grained CFI checks, i.e., the
prototype uses a single label for all address-taken functions.
We picked 0x4600 for the CFI label as it encodes the Thumb
instruction mov r0, r0 and therefore has no side effect when
executed. With the addition of static call graph analysis [46],
it is possible to extend the Silhouette prototype to use multiple
labels with no increase in runtime overhead.
Forward Indirect Jumps Table 1 summarizes the three
types of constructs of C that may cause a compiler to gen-
erate a forward indirect jump and how they are handled by
Silhouette. The compiler may insert indirect jumps to imple-
ment large switch statements. LLVM lowers large switch
USENIX Association
29th USENIX Security Symposium    1225
Code Pattern
How Silhouette Handles Them
Large switch statement
Indirect tail function call
Computed goto statement
Compiled to bounds-checked TBB or TBH
Restricted by CFI
Transformed to switch statement
Table 1: C Code That May Be Compiled to Indirect Jumps
statements into PC-relative jump-table jumps using TBB or
TBH instructions [12]; for each such instruction, LLVM places
the jump table immediately after the instruction and inserts
a bounds check on the register holding the jump-table index
to ensure that it is within the bounds of the jump table. As
jump-table entries are immutable and point to basic blocks
that are valid targets, such indirect jumps are safe. Tail-call
optimization transforms a function call preceding a return
into a jump to the target function. Silhouette’s CFI checks
ensure that tail-call optimized indirect calls jump only to
the beginning of a function. The last construct that can gen-
erate indirect jumps is the computed goto statement. For-
tunately, LLVM compiles computed goto statements into
indirectbr IR instructions [50]. Silhouette uses LLVM’s
existing IndirectBrExpandPass [49] to turn indirectbr
instructions into switch instructions. We can then rely upon
LLVM’s existing checks on switch instructions, described
above, to ensure that indirect jumps generated from switch
instructions are safe. In summary, Silhouette guarantees that
no indirect jumps can jump to the middle of another function.
6.4 MPU Conﬁguration
Our prototype also includes code that conﬁgures the MPU
before an application starts. Figure 2 shows the address space
and the MPU conﬁguration for each memory region of a
Silhouette-protected system on our STM32F469 Discovery
board [64,66]. Silhouette uses ﬁve MPU regions to prevent un-
privileged stores from corrupting the shadow stack, program
code, and hardware conﬁguration. First, Silhouette sets the
code region to be readable, executable, and non-writable for
both privileged and unprivileged accesses. No other regions
are conﬁgured executable; this effectively enforces W⊕X.
Second, Silhouette conﬁgures the shadow stack region to be
writable only by privileged code. All other regions of RAM
are set to be readable and writable by both privileged and
unprivileged instructions. Our prototype restricts the stack
size to 2 MB; this should sufﬁce for programs on embedded
devices.4 Note that Silhouette swaps the normal positions
of the stack and the heap to detect shadow stack overﬂow:
a stack overﬂow will decrement the stack pointer to point
to the inaccessible region near the top of the address space;
a trap will occur when the prologue attempts to save the
4The default stack size of Android applications, including both Java code
and native code, is only around 1 MB [6].
return address there. An alternative to preventing the over-
ﬂow is to put an inaccessible guard region between the stack
and the heap; however, it costs extra memory and an extra
MPU conﬁguration region. Finally, Silhouette enables the
default background region which disallows any unprivileged
reads and writes to address ranges not covered by the above
MPU regions, preventing unprivileged stores from writing the
MPU conﬁguration registers and the Peripheral, Device,
and System regions.
6.5 Silhouette-Invert
Our Silhouette-Invert prototype assumes that the hardware
supports the hypothetical inverted-design described in Sec-
tion 5.5, i.e., the MPU can be conﬁgured so that the shadow
stack is only writable in unprivileged mode. We brieﬂy pro-
pose two designs to change the hardware to support the mem-
ory access permissions required by Silhouette-Invert.
One option is to use a reserved bit in the Application Pro-
gram Status Register (APSR) [12] to support the PAN state
mentioned in Section 5.5. In ARMv8-A processors, PAN is
controlled by the PAN bit in the Current Program Status Reg-
ister (CPSR) [14]. Currently, 24 bits of APSR are reserved [12]
and could be used for PAN on ARMv7-M.
The second option is to add support to the MPU. In
ARMv7-M, the permission conﬁguration of each MPU re-
gion is deﬁned using three Access Permission (AP) bits in the
MPU Region Attribute and Size Register (MPU_RASR) [12].
Currently, binary value 0b100 is reserved, so one could map
this reserved value to read and write in unprivileged mode
and no access in privileged mode, providing support to the
permissions required by Silhouette-Invert without changing
the size of AP or the structure of MPU_RASR.
In the Silhouette-Invert prototype, the function prologue
writes the return address to the shadow stack using an unprivi-
leged store instruction, and CFI uses regular store instructions
to save registers to the stack during label checks; all other
store instructions remain unchanged. The MPU is also conﬁg-
ured so that the shadow stack memory region is writable in
unprivileged mode, and other regions of RAM are accessible
only in privileged mode. As conﬁguring memory regions to be
writable in unprivileged mode only would require a hardware
change, the Silhouette-Invert prototype instead conﬁgures the
shadow stack region to be writable by both unprivileged and
privileged stores. We believe both of the potential hardware
changes proposed above would add negligible performance
overhead. Section 8 shows that Silhouette-Invert reduces over-
head considerably.
Implementation Limitations
6.6
Our Silhouette and Silhouette-Invert prototypes share a few
limitations. First, they currently do not transform inline as-
sembly code. The LLVM code generator represents inline
1226    29th USENIX Security Symposium
USENIX Association
Figure 2: Address Space and MPU Conﬁgurations of Silhouette on STM32F469 Discovery Board
assembly code within a C source ﬁle as a special “inline
asm” instruction with a string containing the assembly code.
Consequently, inline assembly code is fed directly into the
assembler without being transformed by MachineFunction
passes. Fortunately, hand-written inline assembly code in ap-
plications is rare; our benchmarks contain no inline assembly
code. Future implementations could implement store harden-
ing within the assembler which would harden stores in both
compiler-generated and hand-written assembly code. Second,
our current prototypes do not instrument the startup code or
the newlib library [56]. These libraries are provided with our
development board as pre-compiled native code. In principle,
a developer can recompile the startup ﬁles and newlib from
source code to add Silhouette and Silhouette-Invert protec-
tions. Third, we have not implemented the “stack-to-heap”
promotion (discussed in Section 5) for dynamically-sized
stack data. Only one of our benchmarks allocates a variable-
length local array; we manually rewrote the code to allocate
the variable on the heap. Lastly, we opted not to implement Sil-
houette’s setjmp/longjmp support, described in Appendix A,
as none of our benchmarks use setjmp and longjmp.
7 Security Analysis
This section explains how Silhouette hinders control-ﬂow
hijacking attacks. We ﬁrst discuss how Silhouette’s protected
shadow stack, combined with the defenses on forward control-
ﬂow, ensure that each return instruction transfers control back
to its dynamic caller. We then explain why these security
mechanisms provide strong protection against control-ﬂow
hijacking attacks.
7.1
Integrity of Return Addresses
Silhouette ensures that functions return control ﬂow to their
dynamic callers when executing a return instruction by en-
forcing three invariants at run-time:
Invariant 1 (I1). A function stores the caller’s return address
on the shadow stack, or never spills the return address in
register lr to memory.
Invariant 2 (I2). Return addresses stored on the shadow
stack cannot be corrupted.
Invariant 3 (I3). If a function stores the return address on
the shadow stack, its epilogue will always retrieve the return
address from the correct memory location in the shadow
stack, i.e., the location into which its prologue stored the
return address.
As the prologue and epilogue code use the stack pointer to
compute the shadow stack pointer, maintaining all the invari-
ants requires maintaining the integrity of the stack pointer. In-
variants I1 and I3 require the function prologue and epilogue
to keep the stack pointer within the stack region. Additionally,
for I3, Silhouette must ensure that the stack pointer is restored
to the correct location on the stack to ensure that the shadow
stack pointer is pointing to the correct return address. For
I2, besides being inside the stack region, any function call’s
stack pointer must be guaranteed to stay lower than its frame
pointer; otherwise, the valid return addresses on the shadow
stack may be corrupted.
To maintain the invariants, Silhouette prevents programs
from loading corrupted values into the stack pointer by en-
suring that application code never spills and reloads the stack
pointer to/from memory. In particular, functions that have
dynamically-sized stack allocations or that allocate stack
memory within a loop may trigger the code generator to spill
and reload the stack pointer. As Section 5 explains, Silhouette
promotes such problematic alloca instructions into heap al-
locations, ensuring that all functions have constant-sized stack
frames and therefore have no need to spill the stack pointer.
The next issue is ensuring that the remaining ﬁxed-size
stack memory allocations and deallocations cannot be used
to violate the invariants. To prevent stack overﬂow, Silhouette
positions the regular stack at the bottom of the address space
as Figure 2 shows. If a stack overﬂow occurs, the stack pointer
will point to a location near the top of the address space; if any
function prologue subsequently executes, it will attempt to
write the return address into an inaccessible location, causing
a trap that will allow the TCB to respond to the overﬂow.
To ensure that stack deallocation does not cause stack un-
derﬂow, Silhouette ensures that deallocation frees the same
amount of stack memory that was allocated in the function
prologue. Several Silhouette features ensure this. First, the
checks on forward control ﬂow ensure that control is never
transferred into the middle of a function (as Section 6.3 de-
scribes). Second, if I1, I2, and I3 hold prior to the under-
ﬂow, then the shadow stack ensures that a function returns
USENIX Association
29th USENIX Security Symposium    1227
U: RWP: RWU: RP: RWU: RXP: RXU: NoneP: RWU: RWP: RWU: RP: RWU: RXP: RXU: NoneP: RW←Stack2 MB←Shadow Stack2 MBSDRAMCode2 MBFlashUnused64 KBGlobal320 KBRAM 1RAM 20232-1→Heap12 MB0x80000000x100000000x20000000←Stack2 MB←Shadow Stack2 MBSDRAMCode2 MBFlashUnused64 KBGlobal320 KBRAM 1RAM 20232-1→Heap12 MB0x80000000x100000000x20000000U: RWP: RWU: RP: RWU: RXP: RXU: NoneP: RW←Stack2 MB←Shadow Stack2 MBSDRAMCode2 MBFlashUnused64 KBGlobal320 KBRAM 1RAM 20232-1→Heap12 MB0x80000000x100000000x20000000to the correct caller, preventing mismatched prologues and
epilogues. Finally, since the function prologue dominates all
code in the function, and since the function epilogue post-
dominates all code in the function, the epilogue will always
deallocate the memory allocated in the prologue.
In summary, Silhouette maintains I1 and I3 by ensuring
that the stack pointer stays within the stack region during the
function prologue and epilogue and that the epilogue will
always deallocate stack memory correctly. Silhouette also
ensures that the stack pointer will always be lower than the
frame pointer, maintaining I2.
7.2 Reduced Attack Surface
Recent work has shown the importance of protecting return
addresses to increase the precision, and thus strength, of CFI-
based defenses [19, 20, 25, 29, 37]. In particular, without a
protected shadow stack or other mechanisms to ensure the
integrity of return addresses, CFI with static labels cannot
ensure that a function returns to the correct caller at runtime;
instead, a function is typically allowed to return to a set of
possible callers. Attacks against CFI exploit this imprecision.
Most attacks against CFI target programs running on
general-purpose systems. Some attacks exploit features spe-
ciﬁc to certain platforms, and it is not clear if they can be
ported to attack embedded devices. For example, Conti et
al. [25] showed how to corrupt return addresses saved by
unprotected context switches on Windows on 32-bit x86
processors. However, many attacks involve generic code
patterns that can likely be adapted to attack CFI-protected
programs on embedded systems. We now discuss generic
control-ﬂow hijacking code patterns discovered by recent
work [19, 20, 29, 37]. As we discuss below, Silhouette is ro-
bust against these attacks.
Göktas et al. [37] evaluated the effectiveness of coarse-
grained CFI that allows two types of gadgets: Call-site (CS)
gadgets that start after a function call and end with a return,
and Entry-point (EP) gadgets that start at the beginning of
a function and end with any indirect control transfer. CS
gadgets are a result of corrupted return addresses, and EP
gadgets stem from corrupted function pointers or indirect
jumps if the CFI policy does not distinguish indirect calls and
jumps. The authors proposed four methods of chaining the
gadgets: CS to CS (i.e., return-oriented programming), EP
to EP (call-oriented programming), EP to CS, and CS to EP.
Three of these four methods require a corrupted return address.
Their proof-of-concept exploit uses both types of the gadgets.
Similarly, Carlini et al. [20] and Davi et al. [29] showed how
to chain call-preceded gadgets (instruction sequences starting
right after a call instruction) to launch code-reuse attacks
against CFI. As Silhouette prevents return address corruption,
only attacks that chain EP gadgets are possible.
Carlini et al. [19] also demonstrated the weaknesses of
CFI and emphasized the importance of a shadow stack. They
proposed a Basic Exploitation Test (BET)—i.e., a minimal
program for demonstrating vulnerabilities—to quickly test the
effectiveness of a CFI policy. Their work identiﬁes ﬁve dan-
gerous gadgets that allow arbitrary reads, writes, and function
calls in the BET under a coarse-grained CFI policy. How-
ever, all of these are call-preceded gadgets, and Silhouette’s
protected shadow stack stymies call-preceded gadgets.
Additionally, Carlini et al. [19] demonstrated a fundamen-
tal limitation of CFI defenses when used without another
mechanism to provide return address integrity. Speciﬁcally,
they showed that even fully-precise static CFI cannot com-
pletely prevent control-ﬂow hijacking attacks, concluding that,
regardless of the precision of the computed call graph, protec-
tion for return addresses is needed.
In summary, with the protection of Silhouette, control-ﬂow
hijacking attacks are restricted to only call-oriented program-
ming. Although there are still potential dangers [35], Silhou-
ette signiﬁcantly reduces the control-ﬂow hijacking attack
surface for embedded programs.
8 Experimental Results
Below, we evaluate the performance and code size overhead
of our Silhouette and Silhouette-Invert prototypes. We also
compare Silhouette to an orthogonal approach, SSFI, which
uses Software Fault Isolation (SFI), instead of store hardening,
to isolate the shadow stack from application code. In sum-
mary, we ﬁnd that Silhouette and Silhouette-Invert incur low