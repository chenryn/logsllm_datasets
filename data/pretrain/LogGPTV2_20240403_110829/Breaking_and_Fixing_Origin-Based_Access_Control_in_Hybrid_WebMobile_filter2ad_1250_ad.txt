ﬁed in the whitelist ﬁle, but not HTTP/HTTPS schemes. This
prevents the app creator from specifying that certain domains
should be loaded only over HTTPS, which is a very important
property (see Section VIII-A), and opens the door to HTTPS
downgrade attacks.
Windows Phone 7 and 8. PhoneGap installs a handler for
the browser’s navigation event and checks the whitelist before
allowing navigation. This event is not triggered for iframe
fetches and XMLHttpRequests. Therefore, this defense fails
to guarantee NoLoad.
D. Inadequacy of NoLoad
In addition to the fact that virtually all implementations of
NoLoad are incorrect, the property itself is too coarse. It does
not allow the hybrid app to include content from third parties
whose domains are not known at the time of compilation.
Of course, the entire business model of free, ad-supported
hybrid apps relies on their ability to load content, such as
9
Web advertising, from origins that are determined at runtime.
The ad broker’s origin may be known statically, but only the
script creating the iframe comes from that origin. The actual
content inside the iframe comes from an advertiser and its
origin is often determined dynamically, e.g., via a real-time
auction conducted by the ad broker. Even if implemented
correctly, the NoLoad defense is incompatible with the
business model of most free apps.
Suppressing foreign-origin content may also have a nega-
tive effect on the app’s look-and-feel, creating unsightly white
spots where ads and other foreign-origin content would have
been loaded (see Fig. 10).
In practice, this defense requires the app creator to make a
binary decision whether to whitelist all foreign origins—and
thus expose the app to fracking attacks—or not use foreign-
origin content at all and thus give up on any revenues from Web
advertising and, in the case of PhoneGap on iOS and Android
(after version 2.6), even analytics and revenue optimization
services. Not surprisingly, out of 7,167 hybrid PhoneGap apps
in our study, 2,124 whitelist all domains and would have been
vulnerable to fracking even if PhoneGap’s implementation of
whitelisting had been correct.
Fig. 10: NY Times with only nytimes.com whitelisted
(NoLoad policy)
Fig. 11: NY Times with only nytimes.com whitelisted
(NoBridge policy)
E. Enforcing NoBridge
Unlike NoLoad, NoBridge allows the app to load foreign-
origin content, but ensures that only the content
from
whitelisted domains can access the bridge. NoBridge is com-
patible with the advertising-supported business model of free
apps and allows them to preserve their look-and-feel (Fig. 11).
Implementing NoBridge critically depends on the ability of
the framework’s local half to correctly determine the origin of
10
the content that invoked the bridge, in order to match it against
the whitelist. Unfortunately, many embedded browsers do not
support this. For example, if an interface is added to WebView
via ‘addJavascriptInterface’, the local half cannot determine the
origin of the script that called this interface [17].
NOFRAK, our capability-based defense described in Sec-
tion VIII, enforces NoBridge without relying on the embedded
browser to transmit correct origin information to the frame-
work’s local half.
Android (event-based bridges). For event-based bridges only,
PhoneGap on Android attempts to enforce the NoBridge prop-
erty. This is possible because, unlike interface-based bridges,
event-based bridges preserve the origin of the request. For
example, when the bridge is called via the prompt() method
(Section IV-A), PhoneGap applies Conﬁg.isUrlWhiteListed()
to the origin of the script that triggered the prompt.
Unfortunately,
the actual check is incorrect because of
the anchoring bug described in Section VII-C. If foo.com is
whitelisted, malicious JavaScript hosted at any domain starting
with foo.com, such as foo.com.evil.com, is permitted to access
the bridge.
BlackBerry WebWorks. BlackBerry WebWorks incorporates
a custom, WebKit-based embedded browser, which correctly
intercepts URLs of HTML elements and XMLHttpRequests.
WebWorks is unique in that it can restrict access to speciﬁc
resources on a domain-by-domain basis.11 For example, an app
creator can use the following whitelist to allow any domain to
be loaded within the browser, but only permit ‘mydomain.com’
to access the user’s contact information:
... />
... />
... />
... />
Unfortunately, PhoneGap on BlackBerry does not
take
advantage of this facility and enforces NoLoad rather than
NoBridge [22].
Because the enforcement of NoBridge in WebWorks relies
on a customized browser, it is not portable. In contrast, our
defense, NOFRAK, is platform-independent and compatible
with any common embedded browser, including WebView and
UIWebView.
F. Relying on local privilege separation
Privilege separation has been proposed in the research
literature as a solution to the problem of protecting device
resources from untrusted Web content (see Section IX). Priv-
ilege separation is straightforward to apply to “pure” mobile
apps that incorporate ads via local libraries such as AdMob.
The library and its ads are conﬁned into a separate browser
instance, while resources are exposed only to a different
instance containing the app’s own code [26].
11https://developer.blackberry.com/html5/documentation/Access element
834677 11.html
Local process separation is non-trivial for hybrid apps.
Unlike mobile apps that display their content and foreign-
origin ads in separate browser instances, hybrid apps “mash
up” content from multiple origins and render it within a single
browser instance created by the hybrid framework. Because
the entire app acts as a single local process on the device,
there is no natural way to extract foreign-origin content and
display it in a separate browser.
PhoneGap’s loading of non-whitelisted domains in the de-
fault system browser is a form of privilege separation since the
default browser does not have the bridges added by PhoneGap.
It is applied only to main frames, however. Applying this
defense to HTML elements like iframes would have required
the framework to correctly compose multiple browser instances
in order to keep the app’s user interface intact. To the best of
our knowledge, this complex functionality is not supported by
any hybrid framework.
Applying privilege separation along the lines of [24, 26]
requires either re-factoring the entire application, or signiﬁcant
modiﬁcations to the existing browsers so that they spawn a
separate browser instance for each occurrence of foreign-origin
content. The latter is not feasible. The former is incompatible
with the raison d’ˆetre of hybrid development frameworks.
They are popular precisely because they allow developers to
easily convert Web apps into mobile apps and to add native
access to Web apps with minimal modiﬁcations to the app’s
code and without requiring the creator to completely re-factor
her app.
VIII. NOFRAK
A. Design
NOFRAK is a generic defense against fracking attacks. Its
main design principle is to extend origin-based access control
to local resources outside the Web browser. To achieve this,
NOFRAK enforces the NoBridge property (Section VII-E): a
hybrid app can freely include Web content from any origin, but
unauthorized origins cannot access device resources available
to the app. This is the exact security property that hybrid
frameworks promise to app developers and that all existing
hybrid apps already expect and rely upon. Furthermore, it is
compatible with the business model of advertising-supported
hybrid apps. It permits them to show foreign-origin ads, yet
ensures that these ads cannot get unauthorized access to the
device.
The key idea behind NOFRAK is that all accesses to bridges
from the Web side must be authenticated by unforgeable
capability tokens. Each token is unique to a particular Web
origin and kept in this origin’s localStorage. NOFRAK thus
leverages the browser’s same origin policy to ensure that
content from other origins cannot read the token and thus
cannot access the bridge.
NOFRAK does not change the JavaScript API that hybrid
apps use for resource access. Therefore, it is fully transparent
to all existing hybrid apps, requiring no changes to their code.
On the Web side of the hybrid framework, NOFRAK makes
a minor modiﬁcation to the framework’s JavaScript library to
(1) read the capability token from localStorage, and (2) pass
it as an extra argument to every bridge call. This modiﬁcation
is invisible to the apps. Because the extra argument is added
before the arguments are marshalled for the bridge call, the
implementation of NOFRAK does not depend on the speciﬁcs
of the bridge architecture, which resources are accessed via
the bridge, etc. On the local side of the hybrid framework,
NOFRAK makes a minor modiﬁcation to check the capability
token before permitting resource access.
The design of NOFRAK is compatible with every existing
platform, hybrid framework, and bridge architecture. As men-
tioned above, NOFRAK does not require any changes to apps’
code, but apps must be recompiled because NOFRAK changes
the local half of the framework, which serves as the local side
of each hybrid app.
Whitelist policies.
For transparent compatibility with the
existing hybrid frameworks such as PhoneGap, NOFRAK uses
the same interface for specifying which origins are authorized
to access local resources: a domain whitelist provided by the
app developer.
In PhoneGap, these whitelists are coarse-grained. For ex-
ample, there is no way for a PhoneGap app to say that content
from a particular domain is allowed to access geolocation
only. This is a limitation of all hybrid frameworks except
BlackBerry WebWorks (see Section VII-E) and has nothing
to do with NOFRAK per se. If needed, NOFRAK can also
support ﬁner-grained policies and grant access to speciﬁc
resources on a domain-by-domain basis, as opposed to the
blanket authorization for all whitelisted domains to access
any resource available to the app. For example, all domains
can be authorized to access geolocation, but only the app’s
own domain is authorized to access the camera. This requires
changes to PhoneGap’s whitelisting language. Since thousands
of apps already rely on the current language, this is not a
backward-compatible modiﬁcation.
Unlike PhoneGap, NOFRAK by default does not allow
“*” whitelists, but, in contrast to PhoneGap, this does not
prevent
the app from displaying content from any origin.
Most hybrid apps in our survey access device resources only
from their local HTML ﬁles (those shipped with the app), not
from dynamically loaded Web content. This policy change is
transparent to them.
Some app developers may wish to express policies like
“ads are allowed to access geolocation, but not any other
local resource” without explicitly enumerating all domains
that may host advertising. Such policies cannot be enforced
by any existing Web browser. All access-control decisions for
Web content are based on its origin, deﬁned by the protocol,
domain, and port number (Section III-A). Because the purpose
of NOFRAK is to extend origin-based access control to local
resources, any policy enforced by NOFRAK must be based
on the origin of the Web content that attempts to access the
resource. Without a fundamental re-engineering of the entire
Web security model, it is not possible to restrict the access
rights of Web content based on what it does (e.g., advertising)
vs. where it comes from (i.e., its origin).
Preventing network attacks. The same origin policy cannot
protect a hybrid app from network attacks. If any content
from a whitelisted origin is retrieved over HTTP, a man-in-
the-middle attacker—for example, a malicious Wi-Fi access
11
Fig. 12: NOFRAK: Invoking a bridge
point—can inject an attack script into it. This script will be
treated by the browser as if it came from the whitelisted origin
and can thus read this origin’s localStorage and obtain the
capability token.
To prevent network attacks, the app must whitelist only
HTTPS origins. NOFRAK then inserts the corresponding to-
kens into localStorage, and the browser enforces that these
tokens can be read only by scripts fetched over HTTPS from
the correct origin.
B. Implementation
As a proof of concept, we added NOFRAK to PhoneGap
on Android. We chose PhoneGap because it is open source
and by far the most popular hybrid framework. Our prototype
implementation is available for download at https://github.com/
georgiev-martin/NoFrak
Our prototype adds 393 lines of code to PhoneGap’s Java
code and modiﬁes 6 lines of code in PhoneGap’s JavaScript
library. Any other hybrid framework can be modiﬁed in the
same way.
Initialization. Like stock PhoneGap, NOFRAK accepts a
whitelist of authorized domains from the app’s developer. The
capability for each whitelisted domain is a 9-digit pseudoran-
dom token, generated by calling SecureRandom when the app’s
local half is initialized. It is kept in the NOFRAK Store on the
local side. Before the embedded browser instance is created,
each token is injected into the browser’s localStorage for the
corresponding domain.
Web-to-local bridges. The architecture of NOFRAK Web-
to-local bridges is shown in Fig. 12. Just like with stock
PhoneGap, the app’s Web code has to include the NOFRAK
JavaScript library. The API of this library is the same as
PhoneGap, thus the app’s own code need not be modiﬁed.
Internally, the library uses the capability token when ac-
cessing any of the available bridges. First, it reads the token via
window.localStorage.getItem(‘‘SecureToken’’). Scripts
from
other origins cannot read it because of the same origin policy.
To access any bridge, the library calls exec(service, action,
callbackId, args, localStorage.getItem("SecureToken"));. The
local half of NOFRAK receives the call, matches the token
against the NOFRAK Store, and, if found, executes the request
12
Fig. 13: NOFRAK: Retrieving the result
(e.g., accesses a device resource). The NOFRAK Store does not
have a JavaScript interface and cannot be written to from the
Web side, thus NOFRAK is immune to localStorage poisoning.
Preventing reﬂection attacks. As mentioned in Section IV-A,
prior to Android API level 17 all bridges based on ‘add-
JavascriptInterface’ were vulnerable to reﬂection attackss [1,
18, 23]. Our prototype implementation of NOFRAK is built as
a patch to PhoneGap 2.9, which is designed for Android API
level 17 and thus immune to reﬂection attacks.
To enable NOFRAK-based apps to run on earlier versions
of Android, NOFRAK makes two small changes to the local
PhoneGap code. First, it sets the default bridge mechanism to
events rather than interfaces. Second, it modiﬁes the existing
code in PhoneGap’s exposeJsInterface() so that it does not
add JavaScript interfaces to WebView if the API level is less
than 17 (PhoneGap’s current code does not add JavaScript
interfaces if the API level is less than 9 or equal to 11). This
change is backward-compatible and transparent to all benign
apps because they only access bridges through the PhoneGap
JavaScript API, which remains unchanged. The framework’s
JavaScript library simply “re-routes” the calls to a different,
secure bridge.
To prevent malicious JavaScript from crashing the lo-
cal side of the app by switching to a non-existing inter-
face bridge, NOFRAK also modiﬁes the setNativeToJsBridge-
Mode() method in the local half to deny the request if the API
level is less than 17.
Local-to-Web bridge. The local-to-Web bridge can be syn-
chronous or asynchronous. Synchronous bridges are used for
local accesses that can be answered immediately, for example,
device or network info. These can reuse the already authenti-
cated Web-to-local bridge, with the response passed to the Web
side simply as the return value of the call. Local accesses that
require more work, such as camera and media, need to be
asynchronous to avoid freezing the app’s Web content while
the device is being accessed.
Because of the bugs in embedded browsers, events and
scripts injected by the local code into the browser can execute
in the wrong origin (see Section IV-B). Instead, both asyn-
chronous local-to-Web mechanisms supported by NOFRAK re-
use the Web-to-local bridge for retrieving the results of bridge
invocation.
The ﬁrst mechanism is a modiﬁcation to pending message
notiﬁcation used by PhoneGap. When the response is ready, the
local half of NOFRAK sends an unauthenticated notiﬁcation to
JavaScript on the Web side. The message does not contain any
data and is safe even if the browser mistakenly delivers it to
the wrong origin. Upon receiving the notiﬁcation, the NOFRAK
JavaScript library retrieves the data via a Web-to-local bridge
authenticated by the token.
The other mechanism is active polling. After submitting
a local request, the NOFRAK JavaScript library keeps polling
the local half for a response. Each query is authenticated by