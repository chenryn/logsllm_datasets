title:Automated Proofs of Pairing-Based Cryptography
author:Gilles Barthe and
Benjamin Gr&apos;egoire and
Benedikt Schmidt
Automated Proofs of Pairing-Based Cryptography
Gilles Barthe
IMDEA Software Institute
Madrid, Spain
PI:EMAIL
Benjamin Grégoire
INRIA
Benedikt Schmidt
IMDEA Software Institute
Madrid, Spain
Sophia-Antipolis, France
PI:EMAIL
PI:EMAIL
ABSTRACT
Analyzing cryptographic constructions in the computational
model, or simply verifying the correctness of security proofs,
are complex and error-prone tasks. Although computer tools
have signiﬁcant potential to increase conﬁdence in security
proofs and to reduce the time for building these proofs, ex-
isting tools are either limited in scope, or can only be used
by formal methods experts, and have a signiﬁcant overhead.
In eﬀect, it has remained a challenge to design usable and in-
tuitive tools for building and verifying cryptographic proofs,
especially for more advanced ﬁelds such as pairing-based or
lattice-based cryptography.
This paper introduces a formal logic which captures some
key reasoning principles in provable security, and more im-
portantly, operates at a level of abstraction that closely
matches cryptographic practice. Automatization of the logic
is supported by an eﬀective proof search procedure, which
in turn embeds (extended and customized) techniques from
automated reasoning, symbolic cryptography and program
veriﬁcation. Although the logic is general, some of the tech-
niques for automating proofs are speciﬁc to ﬁxed algebraic
settings. Therefore, in order to illustrate the strengths of our
logic, we implement a new tool, called AutoG&P, which sup-
ports extremely compact, and often fully automated, proofs
of cryptographic constructions based on (bilinear or multi-
linear) Diﬃe-Hellman assumptions. For instance, we pro-
vide a 100-line proof of Waters’ Dual System Encryption
(CRYPTO’09), and fully automatic proofs of Boneh-Boyen
Identity-Based Encryption (CRYPTO’04). Finally, we pro-
vide an automated tool that generates independently veriﬁ-
able EasyCrypt proofs from AutoG&P proofs.
Categories and Subject Descriptors
F.3 [Reasoning about Programs]: Logics of programs
Keywords
automated proofs; provable security; public-key encryption
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813697.
1.
INTRODUCTION
Formal veriﬁcation tools have the ability to deliver high-
integrity artefacts; they can also increase productivity of
artefact designers, provided they can achieve reasonable trade-
oﬀs between beneﬁts and costs of formal veriﬁcation. Al-
though there is a lack of data and metrics to measure gains
in productivity, general-purpose software is one area where
appropriate trade-oﬀs have been identiﬁed and where formal
veriﬁcation has achieved signiﬁcant beneﬁts. In contrast, it
has proved more challenging to leverage the potential bene-
ﬁts of formal veriﬁcation in security-related areas, partly be-
cause formalizing properties of interest and adequate mod-
els to reason about them is hard. One notable exception
where formal veriﬁcation has been used very successfully is
the security of cryptographic protocols in the Dolev-Yao or
symbolic model, for which numerous automated tools have
been developed [12, 21, 35]. However, proofs in the symbolic
model are restricted to cryptographic protocols (rather than
primitives) and deliver weaker guarantees than proofs in the
computational model. The question then arises whether one
can design veriﬁcation tools for analyzing the security of
cryptographic protocols and primitives in the computational
model. Signiﬁcant progress has been made over the last ten
years, and tools like CertiCrypt [9], CryptoVerif [13], Easy-
Crypt [8], and more recently FCF [34], have been used to
verify emblematic case studies. However, automated proofs
of cryptographic primitives remain out of scope, and it is
also a challenge to support proofs which follow the same
structure and level of abstraction as pen-and-paper proofs
from the literature. As a consequence, the scopus of for-
mally veriﬁed proofs (almost) completely elides some of the
most important developments in the ﬁeld, such as pairing-
based or lattice-based cryptography (the only exception is a
formal proof of chosen-plaintext security of Boneh-Franklin
Identity Based Encryption in the random oracle model [10])
and adoption of formal proofs by the cryptographic commu-
nity has been limited.
Contributions. The main contribution of this paper is a
formal logic to reason about the concrete security of crypto-
graphic constructions directly in the computational model.
The distinguishing characteristics of our logic is its ability
to adhere to a level of abstraction that is close to the one
used in pen-and-paper proofs from the cryptography liter-
ature and to deliver compact and intuitive formal proofs,
using a core set of rules for bridging steps, failure events, re-
ductions, or hybrid arguments. The logic is similar in spirit
to CIL [6], but is instantiated to a functional programming
1156Type types of expressions
t
::= B
|
BSl
| Gi
|
Fq
|
t × . . . × t
boolean value
bitstring of length l ∈ Len
cyclic group with i ∈ GName
prime ﬁeld of order q
tuple
Figure 1: Grammar for types.
language. Moreover, the logic is supported by an eﬀective
proof search procedure which applies high-level rules built
on top of the core rules and exploits (often extended and
customized) techniques from automated reasoning (e.g. al-
gorithms for equational reasoning), symbolic cryptography
(e.g. algorithms for deducibility), and program veriﬁcation
(e.g.
strongest post-condition calculus) for automatically
discharging proof obligations. The proof search procedure
is proof-producing, in the sense that the proofs it constructs
are elaborated into elementary proofs in which all inferences
are performed using the core rules of the logic. Such ele-
mentary proofs are then translated into EasyCrypt, to obtain
foundational proofs in which all inference steps are explained
in terms of relational program logics.
Although the logic is general, some of the techniques used
for automating proofs, in particular those related to equa-
tional reasoning, are speciﬁc to an algebraic setting. Be-
cause of its importance in modern cryptography, we focus
on pairing-based cryptography, and implement a new tool,
called AutoG&P, able to analyze the security of pairing-
based constructions. Using AutoG&P, we provide the ﬁrst
formal proofs of pairing-based constructions in the standard
model, including a fully automated proof of Boneh-Boyen
Identity Based Encryption [14] and a short (<100 lines)
proof of Waters’ Dual System Encryption [36]. Our proofs
show the feasibility of formal proofs for pairing-based cryp-
tography. Moreover, and quite interestingly, our proofs also
suggest that AutoG&P provides an adequate level of abstrac-
tion for transforming automatically proofs of security from
Type I to Type III settings, as investigated in [4, 3], as the
same high-level proof can be used to prove the security of
the Boneh-Boyen IBE scheme in the two settings.
2. NOTATION
In this paper, we consider expressions, programs, and se-
curity experiments as terms and make use of the following
operations on terms. We use t|p to refer to the subterm
of the term t at position p and t{t(cid:48)}p to refer to the result
of replacing the term at position p with t(cid:48).
If p is a po-
sition in a sequence, we abuse notation and write t{}p to
remove the element in the sequence at position p. We write
t{x1 (cid:55)→ t1, . . . , xk (cid:55)→ tk} to denote the result of substituting
xi by ti in t. A context C is a term with a distinguished
variable 2 which denotes a hole that can be ﬁlled in by an
arbitrary term. We use C{t} to denote the term obtained
by plugging t into C(cid:48)s hole.
3. LANGUAGE
In this section, we deﬁne the syntax and semantics of ex-
pressions, games, security experiments, and judgments.
3.1 Types and expressions
The set Type of types is deﬁned by the grammar given
in Figure 1 where Len denotes a ﬁnite set of length vari-
ables and GName denotes a ﬁnite set of group names. We
assume given disjoint inﬁnite sets Vart of typed variables
and deﬁne Var as the union of these sets. We also assume
given sets Fsym of function symbols and Emap ⊆ GName ×
GName × GName and Isom ⊆ GName × GName deﬁning the
types of modeled bilinear maps and isomorphisms between
the groups. Given these sets, we deﬁne the corresponding
signature Sig in Figure 2. The set Expr of expressions con-
sists of all terms built over Sig. We say an expression is
eﬃcient if it does not contain log.
A group setting G = (q,{Gi}i∈GName,{ˆej}j∈Emap,{φj}j∈Isom)
consists of a prime q, an indexed set of cyclic groups Gi of or-
der q, an indexed set of bilinear maps ˆer,s,t : Gr × Gs → Gt,
and an indexed set of isomorphisms φr,s : Gr → Gs. We as-
sume that the structure deﬁned by Emap and Isom does not
contain cycles that would allow for an unbounded number
of multiplications in the exponent. Our formalism can be
used to model bilinear groups of Type I, Type II, Type III,
and (leveled) k-linear groups [15, 17, 28]. An interpreta-
tion I consists of a group setting G, a mapping from length
variables to natural numbers, and a mapping from function
symbols to functions. We write I(l) to denote the length
assigned to l and I(h) to denote the function assigned to h.
3.2 Equivalence of expressions
We deﬁne an equivalence relation on expressions based on
satisfaction in ﬁrst-order logic. The expressions e and e(cid:48)
are equivalent modulo E, written e =E e(cid:48), if E |= e = e(cid:48).
Here, E denotes the axioms for our signature consisting of
the ﬁeld axioms for Fq, the (bilinear) group axioms for Gi,
and the usual axioms for congruence, the logical operators
and the bitstring operators. We consider inversion in Fq as
underspeciﬁed, i.e., 0−1 is some arbitrary ﬁxed value in Fq
and we can only simplify x∗ x−1 to 1 if x (cid:54)= 0 holds. We use
Γ |= e =E e(cid:48) to denote (Γ,E) |= e = e(cid:48), i.e., E is extended
with additional axioms Γ. We assume the set of axioms Γ
consists of (in)equalities on expressions.
We use contexts to express algorithms that can be deﬁned
using the signature Sig. We say a context C is ground if C
does not contain any variables except 2. We write e (cid:96)CE e(cid:48)
if C{e} =E e(cid:48) for a ground context C. We write e (cid:96)E e(cid:48) if
there exists a context C such that e (cid:96)CE e(cid:48). Similarly, we
write Γ |= e (cid:96)CE e(cid:48) if Γ |= C{e} =E e(cid:48) and Γ |= e (cid:96)E e(cid:48) if
there exists such a context C. For example, it does not hold
that a ∗ b (cid:96)E b, but a (cid:54)= 0 |= a ∗ b (cid:96)E b holds as witnessed by
the context C = 2/a.
3.3 Games
A game is a sequence of game commands. A game com-
mand is a let binding, a random sampling, an assertion, or
an adversary call. For each adversary call, the provided ora-
cles are deﬁned inline. An oracle deﬁnition consists of the or-
acle symbol, the parameters, a sequence of oracle commands,
and the return value. An oracle command is a let binding, a
random sampling, or a guard that ensures that ⊥ is returned
unless the given test succeeds. The grammars O for oracle
deﬁnitions and gc for game commands are given in Figure 3.
In the grammars, we use typed oracle symbols o ∈ Osym
and typed adversary symbols A ∈ Asym. The scope of vari-
ables bound in the body of games extends to succeeding or-
1157Sig Signature for expressions
x : t
h( ) : t1 → t2
( , . . . , ) : t1 × . . . × tk → (t1 × . . . × tk), πi : t1 × . . . × tk → ti
gi : Gi
/ : Gi × Gi → Gi
∗
: Gi × Gi → Gi,
( )( ) : Gi × Fq → Gi,
log : Gi → Fq
ˆei : Gi1 × Gi2 → Gi3 , φj : Gj1 → Gj2
0 : Fq,
1 : Fq,
0l : BSl,
= : t × t → B,
¬ : B → B,
+ : Fq × Fq → Fq, −( ) : Fq → Fq
( )−1 : Fq → Fq
∗
: Fq × Fq → Fq,
⊕ : BSl × BSl → BSl
) : B × t × t → t
( ?
:
∧ : B × B → B
variables for x ∈ Vart
function symbols h ∈ Fsym
tuple construction and projection
generator of Gi
multiplication and division in Gi
exponentiation and discrete log in Gi
bilinear map (i ∈ Emap), isomorphism (j ∈ Isom)
additive group operations for Fq
multiplicative group operations for Fq
operations on bitstrings BSl
equality and if-then-else
negation and conjunction