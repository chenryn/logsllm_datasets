are usually related with developers’ website. Hence, we
reverse them as ﬁrst-party URLs. Please also note that
the reversed class and package names should not be re-
lated to third-party URLs (e.g., [3]). 2) We also check the
app information that is provided by developers in Google
Play. This information includes the links of developers’
home page, email and “privacy policy”. Finally, these links
are also treated as ﬁrst-party URLs, since they are likely
trusted by developers.
• URL links: DCV-Hunter handles URL links, based on their
formats. If a URL is a network link, we build a crawler
based on Selenium [7] to automatically collect the web-
pages (the mobile version) that can be navigated to from
the URL within three depth levels. For each collected web
page, its sub-frame is checked based on our threat model
(Section 2.3).
If URL is a local ﬁle link (e.g., “ﬁle://...”), DCV-Hunter
ﬁrst dumps the corresponding local ﬁle from the target
app, and then handles it like above regular HTML code.
This is mainly because the ﬁle scheme link is similar with
the null origin and does not provide any ﬁrst-party domain
information.
• Intent: Our empirical study on a set of popular hybrid
apps shows that the values of the links saved in an intent
message may be arbitrary. Hence, to avoid potential false
negatives, DCV-Hunter assumes that this format of web
content contains untrusted iframes/popups.
4.3.2 URL Approval Analysis
To determine whether an extracted untrusted URL is approved
by the event handler “shouldOverrideUrlLoading()” or not, we
perform a path-sensitive constraint analysis on the event han-
dler code. The key observation behind the idea is that based
on the speciﬁcation of the event handler [9], when untrusted
iframes/popups are opened or created, the event handler is
triggered, and should return false (Please note returning true
is usually used for denying the link or other purposes [53]).
Below is our solution. We construct the conditions (con-
straints over strings) of the paths to “returning false”, and
check whether the extracted URL can satisfy the conditions.
More speciﬁcally, based on the CG and control-ﬂow graph of
the event handler, we ﬁrst ﬁnd all the possible paths to the key
instruction “returning false”. Then, starting from each key in-
struction, we perform a fast backward slicing along each path
to construct the path constraints. The unknown variables in
the constraints are all over the string parameters (i.e., URL or
request) of “shouldOverrideUrlLoading()”. After that, based
on our threat model and the content of extracted URLs, we
add more constraints to the collected constraints, including
1) .scheme == "HTTP"
2)
.domain == .domain.
or
The ﬁrst constraint is aimed to check if attackers can freely
inject code into the sub-frame through MITM attacks. The sec-
ond constraint is used to verify if the domain of the extracted
URL is approved. Finally, we use an SMT solver (i.e., z3 [19])
to solve all constraints. If path constraints can be satisﬁed, it
indicates that the extracted URL should be approved.
Our path constraint analysis is implemented by embedding
and extending the symbolic execution module of our previous
work “EOEDroid” [53]. Please also note we model several fre-
quently used Java classes (e.g., WebResourceRequest, URL,
and String) to support the related operations.
4.4 Vulnerability Analysis
To determine each vulnerability, DCV-Hunter checks its con-
ditions respectively:
• Origin-hiding: DCV-Hunter ﬁrst veriﬁes whether the ori-
gin of the main frame is “null”. This is done by checking
the corresponding WebView content loading APIs and
their associated parameters. Then, for convenience, the
valuable attack targets are also checked, such as web mes-
saging or web-mobile bridges.
• WUI redressing: DCV-Hunter ﬁrst veriﬁes WebView’s
settings and event handlers to check whether WUI cre-
ation and closure are enabled. Then, DCV-Hunter checks
whether the corresponding event handlers onCreateWin-
dow() or onCloseWindow() are vulnerable or not. This is
done by checking the existence of the sensitive APIs listed
in Table 4. Based on the analysis of the design ﬂaws of
these event handlers (Section 3.6), which have to blindly
approve or deny all requests, these simple checks can ob-
tain high accuracy.
• Main-frame navigation: For the traditional navigation
based problem, iframe sandbox is checked. If iframe sand-
box is used, DCV-Hunter then veriﬁes if the navigation
capability is disabled. For the privileged navigation attack,
986    28th USENIX Security Symposium
USENIX Association
DCV-Hunter checks whether multiple window mode is
disabled, which is done by directly checking associated
settings.
5 Security Impact Assessment
To assess DCVs’s security impacts on real-world popular
apps, we collected 17K most popular free apps from Google
Play. They are gathered from 32 categories, and each category
contains 540 most popular apps. By applying DCV-Hunter on
these collected apps, we found 11,341 apps contained at least
one path from their entry points to WebView content loading
APIs. Among them, 4,358 apps (38.4%) were potentially
vulnerable, including 13,384 potentially vulnerable WebView
instances and 27,754 potential vulnerabilities (Table 5). This
indicates DCVs widely impact real-world apps.
We evaluated the accuracy of DCV-Hunter by measuring
its false positives. We randomly selected 400 apps from the
apps ﬂagged as “potentially vulnerable” by DCV-Hunter, and
manually checked them (see more details in Section 5.1). We
ﬁnd 6 of them (1.5%) are false positives. Our further inspec-
tion revealed in four of these apps, during the reconstruction
of the URL loaded by WebView (Section 4.2), some unrelated
URLs were accounted, due to the imprecise taint analysis (i.e.,
overtaint). For the remaining two apps, “URL Approval Anal-
ysis” (Section 4.3.2) on untrusted iframe/popup links faced
difﬁculty in handling constraints that contained string regular
expressions. We leave addressing these weaknesses as our
future work.
All experiments were run on a high-performance computer.
We ran DCV-Hunter with 100 processes in parallel and each
process was assigned with limited resources (two regular
computing cores and 8GB memory). Our time cost showed
each process needed 144 seconds for each app.
5.1 Manual Veriﬁcation
To manually verify target apps, we ﬁrstly modify Android
source code (version 6) to let it print necessary WebView
related information. Next, we install the modiﬁed Android
system in a real device (Nexus 5). Then, we test target apps.
For each app, when internal WebView instances are started,
we inject attack code to target iframes/popups. Last, based on
the web content shown in WebView and the logs printed by
Android, we determine if the attack code works and the app
is vulnerable.
Please note that different from prior work, we do not use
proxy for code injection. We ﬁnd proxy has several short-
comings. For example, it is time consuming and inefﬁcient to
locate the target iframes/popups for code injection. Instead,
we leverage Chrome’s USB debug interfaces to ease our test.
Since we run test in a real device, we connect the device with
PC using USB. Then, we open Chrome in PC to inject code
to target WebView instances. For example, we select a We-
bView instance and then open console (in Chrome) to run
extra attack code for code injection. But please always keep in
mind that before executing any code, we must select a (target)
Table 5: Potential Vulnerability Details
Potential
Attacks
Impacted
WebView
Impacted
Origin-Hiding
WUI Overlap
WUI Closure
Traditional Navigation
Privileged Navigation
Total
1,737
138
5
13,384
12,490
13,384
Apps
1,238
89
5
4,358
4,161
4,358
App Downloads
3.5 Billion
8 Billion
13 Million
19.5 Billion
17.8 Billion
19.5 Billion
sub-frame as the code execution environment in console.
5.2 Findings
Many high-proﬁle apps are impacted by DCVs. DCVs
widely exist in hybrid apps. Up to now, the potentially vul-
nerable apps have been downloaded more than 19.5 Billion
times (the fourth column of Table 5). Furthermore, these also
include many manually veriﬁed popular apps (some examples
are shown in Table 6) such as Facebook, Instagram, Facebook
Messenger, Google News, Skype, Uber, Yelp, U.S. Bank.
Almost all categories of apps are affected. Figure 10 shows
the related distribution data. The light blue line and the bars
respectively represent the distribution of potentially vulner-
able apps and each potential vulnerability in each category.
Almost all categories of apps are impacted, including several
sensitive categories (e.g., password management and banking
apps). This indicates DCVs are common.
We observe some categories are more subject to DCV at-
tacks than others, such as news, dating, and food-drink. We
manually analyze a set of apps in these categories, and ﬁnd
these categories of apps use WebView more often to load
third-party untrusted content in iframes/popups. For example,
the Google News app (one billion+ downloads) provides the
news collections to users. It allows any website to be loaded in
its WebView. We manually check several news links and ﬁnd
it is common for these news web pages to embed third-party
content, especially ads and tracking services.
We also ﬁnd in some apps, their loaded web pages are safe,
and do not include any untrusted content. However, after the
web pages are fully loaded, these apps run extra JavaScript
code through the API “WebView.evaluateJavascript()” to cre-
ated and embedded new iframes/popups for loading ads con-
tent, which introduces security risks.
Furthermore, we ﬁnd the events and news apps are more
likely to suffer from WUI redressing attacks. This is mainly
because these apps tend to manage WUIs by themselves. For
example, in some news apps, when a user scrolls down to
the bottom of the web page, the apps will directly append
and show more content, without letting the user click a “next
page” button. When the user clicks a concrete news link, a
new WUI is created and placed in the front of current WUI
to show that link. When the user ﬁnishes that web page, de-
velopers can close current WUI and show previous WUI. In
this way, the state of previous WUI is not changed, and the
dynamically appended content is also kept. This rendering
USENIX Association
28th USENIX Security Symposium    987
(* can be any domain, while OH, WO, WC, TN, PN, and BA respectively mean Origin-Hiding, WUI Overlap, WUI Closure,
Table 6: Summary of Example (Manually Veriﬁed) Vulnerable Apps/Libraries
Main-Frame
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Possible Attack Scenarios
Untrusted Sub-frame OH WO WC
Traditional Navigation, Privileged Navigation, and Blended attacks.)
Vulnerabilities
TN













third-party tracking
third-party tracking
third-party tracking
uber.com
espn.com







mcdonalds.com
*
*
*
*
*
*
*
*
huntington.com
third-party tracking
*
*
*
*
*
*









Apps/Libraries
Facebook
Instagram
Facebook Messenger
Kakao Talk
Google News
Skype
WeChat
Yelp
Kayak
Uber
ESPN
McDonald’s
Samsung Mobile Print
lastpass
dashlane
1password
U.S. bank
Huntington bank
Chime mobile bank
Facebook Mobile Browser Library
Facebook React Native Library
Downloads
1 Billion+
1 Billion+
1 Billion+
1 Billion+
1 Billion+
1 Billion+
100 Million+
10 Million+
10 Million+