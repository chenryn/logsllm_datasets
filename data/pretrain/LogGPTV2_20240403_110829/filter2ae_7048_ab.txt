传统的内核态Rootkit使用可加载内核模块（LKM）技术进入内核层后，在内核层进行“hook”。从执行在用户态的程序调用“int
0x80”陷入内核开始，整个系统调用流程中的任何一个位置，都可能成为内核态Rootkit进行hook的目标，
**围绕“hook什么”，“如何hook”这两个问题，出现了近十种内核态Rootkit技术。**
与用户态Rootkit不同，由于内核态Rootkit直接对Linux内核源代码进行操纵，所以对Rootkit有 **极高的定制化要求。**
这是因为经过多年的发展，Linux的内核版本众多，每个版本的内核代码都有或多或少的修改，攻击者开发的某个内核态Rootkit可以在A版本上正常运行，很可能在B版本上完全失效，这就可能出现文章开头提到的那一幕。
前文提到的TeamTNT挖矿家族除了在用户态替换系统命令文件外，还使用内核态Rootkit技术，将恶意内核模块diamorphine.ko加载进内核，实现进程、模块、文件目录的隐藏以及用户权限的提升。该挖矿家族以云主机为目标，Rootkit
**只能在2.6.x、3.x、4.x内核版本上正常运行，** 具体实现如图：
除了黑产，APT组织发起的定向攻击中也用到了内核态Rootkit。APT组织对隐蔽性有更高的要求，这也给信息收集环节提出了更大的挑战，APT组织需要清楚的知道某次定向攻击的目标所使用Linux服务器的内核版本号。在必要条件下，APT组织可以拿到与目标服务器完全相同的实体，并直接在其上进行Rootkit开发。例如震网病毒事件中，攻击者对目标设备了如指掌，而后在恶意代码中加入了严苛的环境判断。再例如2020年曝光，据称由APT28开发的内核态Rootkit
Drovorub，它针对 **3.7以下版本** 的Linux内核，特别是Red Hat发行版进行攻击。
## 内核态攻防进入深水区
Rootkit **最关键的要点是隐藏** ，而
**隐藏意味着攻击者清楚的知道为什么某个文件（夹）会显示，为什么某个网络连接可被观测，然后对这些显示的机制进行绕过，以达到隐藏的效果。**
攻击者知道的这些机制，防御方当然也知道，并且对其开展检测，而攻击者进一步进行绕过，随后便产生了攻防双方的猫鼠游戏。
**Linux内核态Rootkit攻防的本质，是双方谁对操作系统底层技术更加了解**
。继续深入Linux内核，有没有更加底层的Rootkit技术？答案当然是有，而且近年来越来越多。
2015年，Ryan利用Linux内核中的 **kprobe机制**
实现了Rootkit。Kprobe是Linux内核开发者用于内核函数跟踪的一种轻量级内核调试技术，这个Rootkit展示了利用基于kprobe机制进行hook，实现Rootkit功能的可行性。
2016年，Michael在Blackhat上提出了一种 **基于命名空间** 的新型Linux Rootkit——Horse
Pill，它在操作系统启动过程中劫持虚拟根文件系统initrd（boot loader initialized RAM
disk），使受攻击的服务器进入另一个由攻击者创建的“楚门的世界”（即一个子命名空间）。在这个子命名空间中，用户所有的操作都能正常执行，但完全意识不到还存在另一个并行运行的，由攻击者所控制的“真实世界”。
在kprobe的基础上，Linux 4.0以上版本增加了 **eBPF技术**
，该技术可以在不加载内核模块的前提下，在Linux内核中运行用户编写的程序。Guillaume在2021年Blackhat上公开了基于eBPF的Rootkit。
## 总结
虽然kprobe、Horse Pill、eBPF在内核更加底层的位置完成了Rootkit的隐藏功能，但是
**痕迹是否真的隐藏，会根据观测的视角而大不相同。** 理论上 **不存在没有任何痕迹的Rootkit**
，总有某些角度可以观测到系统出现了异常，因为如果一个程序在所有视角都隐藏，那么攻击者也无法对它进行控制。上述这些技术可以被攻击者所利用，而防御方同样可以利用它们。
**现在各安全公司已利用它们设计功能更强大的安全软件，对系统进行监控。**
我们已经深入Linux内核深处，是否还存在更加底层的Rootkit？2021年12月28日，海外某安全公司给出了突破操作系统的答案。他们发现了固件Rootkit“iLOBleed”，其隐藏在惠普固件HP
iLO 上，同时可以以最高权限访问和修改设备上所有的软硬件资源。
事实上，对于现有的高级Rootkit，安全软件已经非常难以检测，通常需要安全专家人工介入分析，
**可以想象某些由APT组织定向投递的Rootkit正在受害机器中潜伏。** 对Rootkit技术进行研究，
**不是去解决想象中的问题，而是回应真实的ring0世界。**
## 参考
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
* * *