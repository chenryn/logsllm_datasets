用stegsolve进行LSB检测
发现在 0 通道有异常
用StegSolve的Data Extract功能将隐写信息提取出来
Preview 发现存在一个压缩包点击save bin
在压缩包中的文件找到了flag
**杂项签到**
    from Crypto import Random
    from Crypto.Cipher import AES
    import sys
    import base64
    def decrypt(encrypted, passphrase):
      IV = encrypted[:16]
      aes = AES.new(passphrase, AES.MODE_CBC, IV)
      return aes.decrypt(encrypted[16:])
    def encrypt(message, passphrase):
      IV = message[:16]
      length = 16
      count = len(message)
      padding = length - (count % length)
      message = message + '' * padding
      aes = AES.new(passphrase, AES.MODE_CBC, IV)
      return aes.encrypt(message)
    IV = 'YUFHJKVWEASDGQDH'
    message = IV + 'flag is hctf{xxxxxxxxxxxxxxx}'
    print len(message)
    example = encrypt(message, 'Qq4wdrhhyEWe4qBF')
    print example
    example = decrypt(example, 'Qq4wdrhhyEWe4qBF')
    print example
    fl="mbZoEMrhAO0WWeugNjqNw3U6Tt2C+rwpgpbdWRZgfQI3MAh0sZ9qjnziUKkV90XhAOkIs/OXoYVw5uQDjVvgNA=="
    print decrypt(fl.decode("base64"), 'Qq4wdrhhyEWe4qBF')
**Re 50**
题目的逻辑是这样的
字符串一共20位，前面的奇数和后面的倒数的技术互换，前面一半的的偶数和后面一半的偶数为下一个偶数位+2，
字符串变换后 出来是与0xcc进行异或
用下表来表示的话，那么应该是
    0 19
    2 17
    4 15
    6 13
    8 11
进行交换
    7  9
    5  7
    3  5
    1  3
右边的+2赋值给左边的
我们逆向怎么做呢，先比较的字符串异或，得到操作后的正确的字符串，再反操作字串，
最后比较的key是：
    003CFDAC B1 00 00 00 A4 00 00 00 B5 00 00 00 87 00 00 00
    003CFDBC AD 00 00 00 AD 00 00 00 93 00 00 00 B9 00 00 00
    003CFDCC BF 00 00 00 BF 00 00 00 93 00 00 00 FD 00 00 00
    003CFDDC FC 00 00 00 BB 00 00 00 FF 00 00 00 B7 00 00 00
    003CFDEC F9 00 00 00 B8 00 00 00 ED 00 00 00 A4 00 00 00
在IDA中也能看出来这些
V4是输入后变换的
变换后异或 再与key比较
所以题目应该是 正确的flag hctf{It_1s_s0_3a5y!} 输入之后，进行上述的位变换，然后与0xcc异或，最后与上图中的key比较。
将上述的key 与0xcc异或转字符串得到}hyKaa_uss_10t3{5t!h
然后进行位变换
    str='}hyKaa_uss_10t3{5t!h'
    s=list(str)
    leng=len(str)
    for i in range(0,leng/2,2):
      temp = s[i]
      s[i]=s[leng-i-1]
      s[leng-i-1]=temp
    print ''.join(s)
    for i in range(9,1,-2):
      s[i] = chr(ord(s[i-2])-2)
    print ''.join(s)
由于是栈操作得到的flag 第二位被覆盖了。
我们根据格式修改一下就好了所以flag是
hctf{It_1s_s0_3a5y!}
>>>
**level1-2099年的flag**
题目提示需要ios99系统
找一个ios系统的useragent
    Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1
修改为
    Mozilla/5.0 (iPhone; CPU iPhone OS 99_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1
再发送请求
在返回包中找到包含flag的请求头
**level2-RESTFUL**
打开网页，chrome查看到xhr请求，
于是对index.php尝试put请求并加上参数money（用restful的格式）得到flag
**level2-giligili**
分析方法相同，但是遇到一个坑，按照xor的结果第二段字符串为b?H¹，放到网页里提示成功却不是正确的flag，猜一下，发现用y0ur代替b?H¹
也是正确的解。
**level2-兵者多诡**
找到上面这篇writeup后学习各种姿势后，照着拿到了flag
**level3-必须比香港记者跑得快**
# 跑得比谁都快
## ChangeLog 的故事
## 这里是加了.git之后忘删的README.md XD by Aklis
## ChangeLog
– 2016.11.11
完成登陆功能，登陆之后在session将用户名和用户等级放到会话信息里面。
判断sessioin['level']是否能在index.php查看管理员才能看到的**东西**。
XD
– 2016.11.10
老板说注册成功的用户不能是管理员，我再写多一句把权限降为普通用户好啰。
– 2016.10
我把注册功能写好了
可以看到注册的过程中包含
添加一个用户初始level > 0，降级该用户
登陆的时候将level放入session
于是判断存在条件竞争。在注册操作中降级用户之前登陆。Session中保存的用户level就不为0
**level3-guestbook**
验证码只需要爆破1-99999的数字的MD5，会有一个MD5的前四4位与网页中的相同。
然后观察到返回的请求头
    Content-Security-Policy:default-src 'self'; script-src 'self' 'unsafe-inline'; font-src 'self' fonts.gstatic.com; style-src 'self' 'unsafe-inline'; img-src 'self'
CSP策略中script可以执行inline。
于是直接在message中写js代码通过location.href跳转或者xhr的方式把cookie和当前网址发送到自己的服务器上。
然后观察到script 和 on 被置换为空，双写绕过即可。
最后伪造cookie登陆后拿到flag
**level4-大图书馆的牧羊人**
扫描到.git/config 下载源码后发现登录后会将用户名加密存储在cookie中，而如果cookie解密后是admin，就能访问到后台。
用comm.php里的密钥加密admin登陆上后台，有一个上传功能
    $files = isset($_FILES['file']) ? $_FILES['file'] : exit();
    if($files['type']!=="application/epub+zip") {
      exit("Not Allow type!");
    }
    //extract
    $file = new ZipArchive;
    $epub_name = $files['tmp_name'];
    $extracted_path = 'uploads/'.basename($files['name'],".epub")."/";
    if ($file->open($epub_name) === TRUE){
      $file->extractTo($extracted_path);
      $file->close();
阅读上传源码,只需要修改content-type让代码继续执行，去解压zip到uploads目录。于是直接上传一个有php
shell的zip就拿到了shell
**level4-secret area**
和guestbook比较类似，也有防御xss的csp策略而且并不支持script 的
inline执行。注册登录后发现修改个人资料处提供一个上传头像的功能，然而在测试一番后发现上传处并没有什么缺陷，但是在html中发现有个功能提供302跳转
而http://sguestbook.hctf.io/static/ 目录是在csp策略里script标签白名单里的，于是在头像文件里写上xss
payload，上传后得到http://sguestbook.hctf.io/
/upload/e8ea98429c80cfd74e000cce900612a3。
然后就只需要构造 这个标签即可绕过csp策略。script on 被过滤，也是双写绕过即可。
**level4-web选手的自我修养**
下载docker镜像misc.tar后执行命令
    docker load 利用opcache隐藏后门
于是去/tmp/opcache/5c8fa39e1df122a51d720c5716df71e4/home/wwwro
ot/default/ 查找发现一堆bin文件。就又去home目录翻到了wwwlogs/access.log
发现有多条记录直接访问/wp-includes/class-wp.php，这个文件一般来说会用包含的方式使用，猜测后门就在这里。
编辑器打开/tmp/opcache/5c8fa39e1df122a51d720c5716df71e4/home/wwwroot/default/wp-includes/class-wp.php.bin 有一堆不可见字符，用strings命令提取后最后两行
Base64解码后得到flag
**level4-AT Field_1**
ssrf 漏洞，限制了内网ip。通过302跳转可以绕过，
在网址处输入
源码中有一串base64 解码即可得到flag
**level5-魔法禁书目录**
和前面那道题一样，只是不再有明文的密钥，而是通过cbc翻转攻击构造管理员的cookie
类似于
然而注册的时候用户名控制在6-20之间。构造admin的密文需要得到同样为5位长度或者5+16长度的明文加密后的密文。恰好在这个范围之外。查看代码发现
    function decrypt( $string ) {
      $密钥 = "233333";
    $algorithm =  'rijndael-128';
    $key = md5($密钥, true );
    $iv_length = mcrypt_get_iv_size( $algorithm, MCRYPT_MODE_CBC );
    $string = urlsafe_b64decode( $string );
    $iv = substr( $string, 0, $iv_length );
    $encrypted = substr( $string, $iv_length );
    $result = mcrypt_decrypt( $algorithm, $key, $encrypted, MCRYPT_MODE_CBC, $iv );
    $result = rtrim($result, "");
    return $result;
    }
在解密的最后清除掉了
所以构造admin的密文即可
注册一个adminx的用户，得到密文 oPR4gZAqfHYnOhWw1GcX-zIEvN_1OCaamhmDLxRigpA
    <?php
    function urlsafe_b64encode($string) {
       $data = base64_encode($string);
       $data = str_replace(array('+','/','='),array('-','_',''),$data);
       return $data;
    }
    function urlsafe_b64decode($string) {
       $data = str_replace(array('-','_'),array('+','/'),$string);
       $mod4 = strlen($data) % 4;
       if ($mod4) {
           $data .= substr('====', $mod4);