---
## Page 533
代理模式
e.printStackTrace ();
);
retrievalThread.start () ;
package headfirst.proxy.virtualproxy;
import java,awt.*;
import javax.swing.*;
class ImageComponent extends JComponent {
private Icon icon;
public ImageComponent(Icon icon){
this.icon = icon;
public void setIcon (Icon icon) {
this.icon = icon;
public void paintComponent(Graphics g)(
super.paintComponent (g) ;
int w = icon.getIconWidth() ;
int h = icon.getIconHeight ();
int x=(800 -w)/2;
int y - (600 - h)/2;
icon.paintIcon(this，g，x, y);
你现在的位置
497
---
## Page 534
PDG
---
## Page 535
12复合模式
模式的模式
谁料得到模式居然可以携手合作？你已经见识过围炉夜话的火爆场面（幸
好，出版社事先请我们删除“死神来访”模式的篇章，好让本书不需附上“12岁以下读
者必须家长陪同阅读”的警告标语，所以你没见识到闹出人命的那一集围炉夜话★），
谁料得到模式居然可以携手合作？这实在是太意外了。信不信由你，有一些威力强大的
00设计同时使用多个设计模式。准备让你的模式技巧进入下一个层次，现在是复合模式
的时间。
★如果你想要一份，来E-mail索取。
这是新的一章
499
---
## Page 536
模式可以携手合作
携手合作
使用模式最棒的方式，就是把它们从家里找出来同其他模式展开交互。
你越多地使用模式就越容易发现它们一同现身在你的设计中。对于这些
在设计中携手合作征服许多问题的模式，我们给它一个特别的名字：复
合模式（CompoundPattern）。没错！我们说的正是一种由模式所构成的
模式。
你将在真实的世界中发现许多复合模式。现在你的大脑中已经有许多模
式了，对于复合模式，你会发现它们其实只是携手合作的许多模式，这
样就会很容易理解了。
本章，我们将重访SimUDuck鸭子模拟器中那些熟悉的鸭子。当我们介绍
复合模式时，使用鸭子的例子是适当的，毕竞，在整本书中，鸭子一直
与我们同在，而且模拟鸭子也使用了许多模式。通过鸭子的帮助，你将
学习到模式如何携手合作来解决同一件事。但是我们将某些模式结合使
用，并不代表这些模式就够资格称为复合模式。复合模式必须够一般性，
适合解决许多问题才行。因此，在本章的后半段，我们会拜访一个真正
的复合模式，没错，就是鼎鼎大名的MVC（Model-View-Controller）。
如果你没听过MVC，我保证这会是你的设计工具箱内最有威力的模式之
模式通常被一起使用，并被组合在同
一个设计解决方案中。
复合模式在一个解决方案中结合两个
或多个模式，以解决一般或重复发生
的问题。
PDG
500
0第12章
---
## Page 537
复合模式
与鸭子重聚
正如你所知道的，我们会再度与鸭子共同合作。而这次鸭子将在同一个解决方案中展示
模式是如何共存甚至携手合作的。
我们将从头重建我们的鸭子模拟器，并通过使用一堆模式来赋予它一些有趣的能力。动
工了......
①
首先，我们将创建一个Quackable接口。
刚刚说过，我们将从头开始。而这一次，鸭子将实现Quackable接口。这样，我
们就知道这个模拟器中，有哪些东西可以呱呱叫，像是绿头鸭、红头鸭，甚至可
能还会看到橡皮鸭偷偷溜回来。
public interface Quackable {
public void quack ();
Quackable只需做码一件事：
Quach（或叫）！
2
现在，某些鸭子实现了Quackable接口。
如果没有类实现某个接口，那么此接口的存在就没有意义。现在我们就来设计一
些具体鸭子（不是那种“玩偶鸭”，你知道我们指的是什么）。
K
标准的绿头鸭。
public class MallardDuck implements Quackable {
public void quack()(
System.out.println ("Quack") ;
public class RedheadDuck implements Quackable {
public void quack()(
System.out.println("Quack");
如果我们希望这个模拟器活流有趣
就要一些物种变体。
你现在的位置
501
---
## Page 538
加入更多鸭子
如果我们没有加入了别的种类的鸭子，就不太好玩。
还记得上次吧？我们曾经加人了鸭鸣器（猎人使用的那种东西，它们肯定会呱呱
叫）和橡皮鸭。
public class DuckCall implements Quackable {
public void quack(){
System.out.println("Kwak") ;
7
DuckCall（喻器）金呱呱叫.但听起来
并不十分像真的跨叫声。
public class RubberDuck implements Quackable{
public void quack()(
System.out.println("Squeak");
省Ru66erDack（橡皮鸭）呱呱叫时.
其实声音是喊喊叫。
好了，我们有了鸭子，还需要一个模拟器。
让我们来制造一个会产生一些鸭子，还要确认鸭子会呱呱叫的模拟器·
我们的main（）方法将让所有的
事情动起来。
public class DuckSimulator (
public static void main(String[] args){
DuckSimulator simulator = new DuckSimulator();
我们创建一个模拟器，然后
simulator.simulate () ;
调用算simulate(）方法。
[
void simulate(){
Quackable mallardDuck = new MallardDuck() ;
我们需要一些略子，所以在这置
Quackable rcdheadDuck = new RedheadDuck();
把每一种会或呱叫的点西都产生一
Quackable duckCal1 = new DuckCall();
Quackable rubberDuck = new RubberDuck();
份实例……
System.out.println("\nDuck Simulator");
simulate (mallardDuck) ;
simulate (redheadDuck) ;
….然后开始模城
simulate(duckCal1);
每种鸭子。
simulate (rubberDuck) ;
我们在这里重载了simalate（）
方法来模拟一只鸭子。
void simulate (Quackable duck) (
duck.quack() ;
刺下的事，我们就让多态发挥它的魔法
个
不管传入的是哪一种吸喊叫对象，多态都可
以调用到正确的方法。
502
第12章
---
## Page 539
复合模式
不要大兴奋，我们还没加上模
式呢！
File
java DuckSimulator
Duck Simulator
Quack
Quack
Kwak
Squeak
大家都实现同一个Qxackable接口，只是
各自的实现元许不同的呱呱叫方式。
似乎到目前为止一切顺利。
4
当鸭子出现在这里时，鹅也应该在附近。
只要有水塘的地方，就大概会有鸭子和鹅。我们为这个模拟器设计了一个
Goose（鹅）类。
public class Goose {
public void honk(){
System.out.println("Honk");
瓣的叫声是咯咯，而不是吸呱。
OBRAIN
VPOWER
假设我们想要在所有使用鸭子的地方使用鹅，毕竞鹅会叫、会飞、会游，和鸭子差不多。为
什么我们不能在这个模拟器中使用鹅呢？
什么模式可以让我们轻易地将鸭子和鹅掺杂在一起呢？
你现在的位置
503
---
## Page 540
鹅适配器
?
我们需要鹅适配器
我们的模拟器期望看到Quackable接口。既然鹅不会呱呱叫，那么我们
可以利用适配器将鹅适配成鸭子。
请牢记，遥配器会宾现目标基口.
也就是Qaackable。
public class GooseAdapter implements Quackable {
Goose goose;
public GooseAdapter(Goose goose){
this.goose = goose;
构造器需要传人要道配的端
}
对象。
public void quack(){
goose.honk();
当调用gμack（）时，全被善托到鹅的
honk(）方法。
6
现在，模拟器中也应该可以使用鹅了。
接着，我们需要做的就是创建Goose对象，将它包装进适配器，以
便实现Quackable。这样，我们就可以继续了。
public class DuckSimulator (
public static void main(String[] args) {
DuckSimulator simulator = new DuckSimulator();
simulator.simulate();
void simulate(){
通过把Goose包装进
Quackable mallardDuck = new MallardDuck ();
GooseAdapter，我们就
Quackable redheadDuck = new RedheadDuck();
Quackable duckCal1 - new DuckCall();
可以让转像鸭子一样，
Quackable rubberDuck = new RubberDuck();
Quackable gooseDuck = new GooseAdapter(new Goose());
System.out.println("\nDuck Simulator: With Goose Adapter");
simulate (mallardDuck) ;
simulate(redheadDuck) ;
simulate (duckCall) ;
一旦鳞被包装起来，我们就
simulate (rubberDuck);
可以把它当做其他够子的
simulate(gooseDuck);
Quackable对象。
void simulate (Quackable duck) (
duck.quack() ;
504
第12章
---
## Page 541
复合模式
7
现在，让我们测试看看
这次测试时，simulate（会调用许多对象的quackO方法，其中包括适
配器的quackO方法。结果应该会出现略略叫（honk）才对。
Fie Edit WindowHelp GoldenEggs
java DuckSimulator
Duck Simulator:With Goose Adapter
Quack
有端了：现在端含和其他鸭
Quack
Kwak
子一起叫出声。
Squeak
>
Honk
呱呱叫学家为所有拥有可呱呱叫行为的事物着迷。其中一件他们经
常研究的事是：在一群鸭子中，会有多少呱呱叫声？
我们要如何在不变化鸭子类的情况下，计算呱呱叫的次数呢？
有没有什么模式可以帮上忙？
1.Brewet，公图
还游者和呱呱叫
学家
你现在的位置
505
---
## Page 542
鸭子装饰者
8
我们会让这些呱呱叫学家满意，让他们知道叫声的次数。
怎样才能办到呢？让我们创建一个装饰者，通过把鸭子包装进装饰者对
象，给鸭子一些新行为（计算次数的行为）。我们不必修改鸭子的代码。
QuackCounter是一个装饰者。
像递配器一样，我们需要实现
目标接口。
我们用一个实例变量来记录被
装饰的吸吸叫者。
public class QuackCounter implements Quackable {
我们用静态变量跟踪所有
Quackable duck;
static int numberOfQuacks;
2
>
呱呱叫次数。
public QuackCounter (Quackable duck)(
this.duck = duck
将Quackable它效参数传入构造
器，并记录在实例变量中。
public void quack(){
duck.quack () ;
当4uack（）被诺用时，我们就把调用毒托给正在
numberOfQuacks++;
装饰的Quackable对....
public static int getQuacks()
….然后把叫声的次数加
return numberOfQuacks;
给装饰者加入一个赖态方法。
以便返回在所有Quackable中发
生的叫声次数。
506
第12章
---
## Page 543
复合模式
我们需要更新此模拟器，以便创建被装饰的鸭子。
现在，我们必须包装在QuackCounter装饰者中被实例化的每个
Quackable对象。如果不这么做，鸭子就会到处乱跑而使得我们无法
统计其叫声次数。
public class DuckSimulator {
public static void main (String[] args)(
每次我们创建一个
DuckSimulator simulator = new DuckSimulator ();
Qxackable，就用一个新的
simulator,simulate ();
装饰老色装它。
void simulate()(
Quackable mallardDuck=new QuackCounter(new MallardDuck());
Quackable redheadDuck=new QuackCounter(new RedheadDuck());
Quackable duckCall =new QuackCounter(new DuckCal1());
Quackable rubberDuck =new QuackCounter(new RubberDuck());
Quackable gooseDuck = new GooseAdapter(new Goose());
System.out.println("\nDuck Simulator: With Decorator");
simulate (mallardDuck) ;
公因遇还员告诉我们，他不想
simulate (redheadDuck);
计入鳞的叫声，所以我们不去装
simulate (duckCall) ;
饰鹅。
simulate (rubberDuck);
simulate (gooseDuck) ;
就是在这里，我们
System.out.println("The ducks quacked "+
为项呱叫学家收集
QuackCounter.getQuacks()+
times");
呱呱叫行为。
void simulate (Quackable duck){
duck.quack () ;
这里没有任何的变动，被装饰的对
象还是Quackable。
java DuckSimulator
-09
输出在
Duck Simulator:With Decorator
这里！
Quack
Quack
Kwak
Squeak
Honk
别忘了，端的叫声
The ducks quacks 4times
不计在内。