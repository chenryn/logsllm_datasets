4.3.2.1 Token验证
Token翻译中文为“标志”，在计算机认证领域叫令牌。利用验证Token的方式是目前使用的最多的一种，也是效果最好的一种，可以简单理解成在页面或者cookie里面加一个不可预测的字符串，服务器在接收操作请求的时候只要验证下这个字符串是不是上次访问留下的即可判断是不是可信请求，因为如果没有访问上一个页面，是无法得到这个Token的，除非结合XSS漏洞或者有其他手段能获得通信数据。
图4-9 （引用自乌云网）
Token实现测试代码如下：
    ">
运行结果，如果请求里面的Token值跟服务器端的一致，则输出“success”，否则输出“failed”。
4.3.2.2 验证码验证
验证码验证没有Token那么实用，考虑到用户体验，不可能让用户每个页面都去输入一次验证码，这估计用户得疯掉，所以一般这种方式只用在敏感操作的页面，比如像登录页面，实现方式跟Token差不多，这里就不再详细给出代码。
第5章 漏洞挖掘与防范（进阶篇）
在本章我们会介绍文件操作、系统命令执行以及代码执行有关的漏洞，会从应用接触到更多系统以及中间件特性有关的东西，所以会相当有意思，进入到本书的进阶篇，是不是更兴奋呢？
5.1 文件操作漏洞
文件操作包括文件包含、文件读取、文件删除、文件修改以及文件上传，这几种文件操作的漏洞有部分的相似点，但是每种漏洞都有各自的漏洞函数以及利用方式，下面我们来具体分析下它们的形成原因、挖掘方式以及修复方案。
5.1.1 文件包含漏洞
PHP的文件包含可以直接执行包含文件的代码，包含的文件格式是不受限制的，只要能正常执行即可。文件包含又分为本地文件包含（local file include）和远程文件包含（remote file include），顾名思义就能理解它们的差别在哪，而不管哪种都是非常高危的，渗透过程中文件包含漏洞大多可以直接利用获取webshell。文件包含函数有include（）、include_once（）、require（）和require_once（），它们之间的区别在于：include（）和include_once（）在包含文件时即使遇到错误，下面的代码依然会继续执行；而require（）和require_once（）则会直接报错退出程序。
5.1.1.1 挖掘经验
文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方，比如传入的模块名参数，实际上是直接把这个拼接到了包含文件的路径中，比如像espcms的代码：
$archive = indexget
（
'archive'
，
'R'
）；
$archive = empty
（
$archive
）
？
'adminuser'
：
$archive
；
$action = indexget
（
'action'
，
'R'
）；
$action = empty
（
$action
）
？
'login'
：
$action
；
include admin_ROOT . adminfile . "/control/$archive.php"
；
传入的archive参数就是被包含的文件名，所以我们在挖掘文件包含漏洞的时候可以先跟踪一下程序运行流程，看看里面模块加载时包含的文件是否可控，另外就是直接搜索include（）、include_once（）、require（）和require_once（）这四个函数来回溯看看有没有可控的变量，它们的写法可以在括号里面写要包含的路径，也可以直接用空格再跟路径。一般这类都是本地文件包含，大多是需要截断的，截断的方法下面我们再细说。
5.1.1.2 本地文件包含
本地文件包含（local file include，LFI）是指只能包含本机文件的文件包含漏洞，大多出现在模块加载、模板加载和cache调用这些地方，渗透的时候利用起来并不鸡肋，本地文件包含有多种利用方式，比如上传一个允许上传的文件格式的文件再包含来执行代码，包含PHP上传的临时文件，在请求URL或者ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。
测试代码1.php如下所示：
我们在同目录下2.php写入如下代码：
请求/1.php？mod=2执行结果如图5-1所示。
图 5-1
1.远程文件包含
远程文件包含（remote file include，RFI）是指可以包含远程文件的包含漏洞，远程文件包含需要设置allow_url_include=On，PHP5.2之后这个选项的可修改范围是PHP_INI_ALL。四个文件包含的函数都支持HTTP、FTP等协议，相对于本地文件包含，它更容易利用，不过出现的频率没有本地文件包含多，偶尔能挖到，下面我们来看看基于HTTP协议测试代码：
利用则在GET请求url参数里面传入"http://remotehost/2.txt"，其中远程机器上的2.txt是一个内容为。访问后返回本机的phpinfo信息。
远程文件包含还有一种PHP输入输出流的利用方式，可以直接执行POST代码，这里我们仍然用上面这个代码测试，只要执行POST请求1.php？a=php：//input，POST内容为PHP代码""即可打印出phpinfo信息，如图5-2所示。
2.文件包含截断
大多数的文件包含漏洞都是需要截断的，因为正常程序里面包含的文件代码一般是像include（BASEPATH.$mod.'.php'）或者include（$mod.'.php'）这样的方式，如果我们不能写入以.php为扩展名的文件，那我们是需要截断来利用的。
图 5-2
下面我们就来详细说一下各种截断方式。
第一种方式，利用%00来截断，这是最古老的一种方法，不过在笔者做渗透测试的过程中，发现目前还是有很多企业的线上环境可以这么利用。%00截断受限于GPC和addslashes等函数的过滤，也就是说，在开启GPC的情况下是不可用的，另外在PHP5.3之后的版本全面修复了文件名%00截断的问题，所以在5.3之后的版本也是不能用这个方法截断的。下面我们来演示一下%00截断，测试代码1.php：
测试代码2.txt内容为phpinfo。
请求http://localhost/test/1.php？a=2.txt%00即可执行phpinfo的代码如图5-3所示。
图 5-3
第二种方式，利用多个英文句号（.）和反斜杠（/）来截断，这种方式不受GPC限制，不过同样在PHP 5.3版本之后被修复。下面让我们来演示一下：
测试代码如下：
我在Windows下测试是240个连接的点（.）能够截断，同样的点（.）加斜杠（/）也是240个能够截断，Linux下测试的是2038个/.组合才能截断。
第三种方式，远程文件包含时利用问号（？）来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数，它就能执行，在HTTP协议里面访问
http://remotehost/1.txt
 和访问
http://remotehost/1.txt?.php
 返回的结果是一样的，因为这时候WebServer把问号（？）之后的内容当成是请求参数，而txt不在WebServer里面解析，参数对访问1.txt返回的内容不影响，所以就实现了伪截断。
测试代码如下：
move_uploaded_file函数直接把上传的临时文件copy到了新文件。
2.黑名单扩展名过滤
黑名单扩展名是前几年用得比较多的验证方式，后来因为绕过多了，就慢慢改用了白名单。
黑名单的缺点有以下几个。
1）限制的扩展名不够全，上传文件格式不可预测的性质导致了可能会有漏网之鱼。PHP能够在大多数的WebServer上配置解析，不同的WebServer默认有不同的可以解析的扩展名，典型的IIS默认是支持解析ASP语言的，不过在IIS下执行ASP的代码可不止.asp这个扩展名，还有cdx、asa、cer等，如果代码里面没有把这些写全，一旦漏掉一个就相当于没做限制。我们来看看PHPCMSv9里面限制的：
$savefile = preg_replace
（
"/
（
php|phtml|php3|php4|jsp|exe|dll|asp|cer|asa|shtml|shtm |aspx|asax|cgi|fcgi|pl
）（
\.|$
）
/i"
，
"_\\1\\2"
，
$savefile
）；
很明显我们上面说的cdx不在这个列表里面。
2）验证扩展名的方式存在问题可以直接绕过，另外是结合PHP和系统的特性，导致了可以截断文件名来绕过黑名单限制。下面先看一段代码：
<
？
php
function getExt
（
$filename
）
{    
      return substr
（
$filename
，
strripos
（
$filename
，
'.'
）
+1
）；
}
$disallowed_types = array
（
"php"
，
"asp"
，
"aspx"
）；
//
获取文件扩展名
$FilenameExt = strtolower
（
getExt
（