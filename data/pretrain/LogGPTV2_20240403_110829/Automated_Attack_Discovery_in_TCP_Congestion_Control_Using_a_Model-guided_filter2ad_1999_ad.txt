must inﬂuence in order to either increase or decrease the
throughput of his target ﬂow. We connect the virtual machines
together with Linux tap devices and bridges. We artiﬁcially
cap the bandwidth on the bottleneck link and introduce a
10ms delay, using Linux trafﬁc control. This gives us a virtual
network based on the widely used Linux networking stack that
supports throughput in excess of 800Mbits/sec.
One of the servers runs the target TCP implementation
under test. The other hosts run a standard TCP stack and serve
simply to complete the test harness and generate necessary
trafﬁc. To generate trafﬁc, our tests use ﬁle transfers over
HTTP. This simpliﬁes setting up the target implementation,
as HTTP servers are available for a wide variety of operating
systems and implementations.
The Attack Injector is implemented as a proxy placed in
the middle of the bottleneck link. It intercepts all packets in
the target connection and applies any on-path basic actions.
It can also inject new packets into the network to emulate an
9
Client 1TCPAttackInjectorClient 2TCPServer 1TCPServer 2TCPStateTrackerControllerLog resultsConcrete StrategiesTargetImplementation- victim's flow- background flowoff-path attacker. The proxy also measures connection length
and amount of data transferred for attack detection and is
implemented in C++.
The State Tracker component is also implemented as a
proxy and is placed in our testing environment as near to the
target sender as possible. This proxy observes the packets sent
and received by the sender over small timeslices to automat-
ically infer the current state of the sender’s TCP congestion
control state machine. This proxy is also implemented in C++.
This whole environment is controlled and coordinated by
a Controller script that takes a concrete strategy from our
strategy generator, orchestrates the virtual machines, applica-
tions, Attack Injector, and State Tracker components to test that
strategy, collects the results, and returns them for analysis.
B. Attack Detection
The goal of an attacker targeting congestion control is to
impact throughput. We distinguish between four cases for a
target connection that are the observable outcome of an attack:
•
•
•
•
Benign: no attack occurs.
Faster: the sender sends at a faster rate than it should;
throughput is larger than the benign case; this corre-
sponds to a sender bypassing congestion control to
send faster.
Slower: the sender is made to send at a slower rate than
what the network conditions will allow, the throughput
is smaller than a benign connection.
Stall: the connection has stalled and will never com-
plete; corresponds to the case where the attacker made
the connection to stall.
Measuring the time it takes to transfer a ﬁle at the appli-
cation layer is not sufﬁcient because it does not allow us to
distinguish between two cases: sending faster or connection
stalled. Both appear, in some cases, as stalled because the
TCP receiver has blocked reassembling data, while all data
has already been sent. Thus, the ﬁrst metric we use is the time
it takes to transfer and acknowledge all data packets at the
TCP level, referred to simply as T ime below.
The time needed to transfer the data at the TCP level is
not sufﬁcient to accurately classify attacks because it does
not capture the case when the connection stalls out part way
through due to an attack and the ﬁle has actually not been
transferred in its entirety. To detect this case, we use a second
metric, the amount of data transferred in the connection at the
TCP-level, referred to as SentData below.
We perform 20 tests transferring a ﬁle of size F ileSize
without any attacks being injected to create baseline average
and standard deviation values of T imeBenign and stddev.
Then, using the T ime and SentData metrics deﬁned above,
our detection works as follows:
if Time is > (TimeBenign + 2*stddev):
Attack: Slower
else if Time is = (0.8*FileSize):
Attack: Faster
else:
TABLE I.
SUMMARY OF TCPWN RESULTS
Implementation
Ubuntu 16.10 (Linux 4.8)
Ubuntu 14.04 (Linux 3.13)
Ubuntu 11.10 (Linux 3.0)
Debian 2 (Linux 2.0)
Windows 8.1
Ubuntu 16.10 (Linux 4.8)
Ubuntu 14.04 (Linux 3.13)
Ubuntu 11.10 (Linux 3.0)
Debian 2 (Linux 2.0)
Windows 8.1
Total
Attacker
On-path
On-path
On-path
On-path
On-path
Off-path
Off-path
Off-path
Off-path
Off-path
Tested Marked
564
564
564
564
564
753
753
753
753
753
6585
38
37
16
3
9
466
448
564
425
471
2477
FP
3
1
6
0
1
8
9
10
0
3
41
Attacks
35
36
10
3
8
458
439
554
425
468
2436
Attack: Stall
else:
Benign
VI. RESULTS
We tested ﬁve different implementations of TCP in ﬁve
operating systems: Ubuntu 16.10, Ubuntu 14.04, Ubuntu 11.10,
Debian 2, and Windows 8.1. The tests were run on a hy-
perthreaded 20 core Intel R(cid:13) Xeon R(cid:13) 2.4GHz system with
125GB of RAM. We conﬁgured the bottleneck link to be
100Mbits/sec, with a 20ms RTT, and generated trafﬁc for both
the target and competing TCP connections with a 100MB
HTTP ﬁle download for all implementations except Debian
2. Due to limitations with the virtualized NIC, Debian 2 was
limited to 10Mbits/sec, so we also limited the bottleneck link
to that same rate with a 20ms RTT while trafﬁc generation
used a 10MB ﬁle. We used the Apache webserver for Linux
and IIS on Windows.
Testing each implementation took about 13 hours for the
on-path testing and 21 hours for the off-path testing, using
only 6 cores. Testing each strategy is independent and takes
between 15 and 60 seconds. With 48 cores running eight
testing environments (each needs 6 cores), the on-path testing
could have been completed in 1.6 hours and the off-path testing
in 2.6 hours.
Over all the tested systems, we tested 6,585 strategies and
found 2,436 attacks, which we classiﬁed into 11 classes. 8 of
these classes were previously unknown in the literature. We
summarize the attacks in Tables I and II. For lack of space,
below we discuss only the new attacks and we present the rest
in Appendix C.
While this analysis was performed manually, we observe
that it is amenable to automation. In our results, three classes
of attacks—Optimistic Ack, Desync, and Ack Lost Data—
make up the majority of marked strategies. An automated
classiﬁcation of these three categories leaves only 281 (11%)
strategies to manually examine.
A. On-path Attacks
We only consider attacks resulting in increased throughput
for some target connection to be of interest to this attacker.
Our model-guided strategy generation produced 564 strategies
based on the basic actions described in section IV-C. As
shown in Table I, our system marked between 3 and 38 of
these strategies (depending on implementation). A few of these
marked attacks were false positives, due to the imprecision
of testing with a real network and real implementations. In
10
Num
1
2
3
4
5
6
7
8
9
10
11
Attack
Optimistic Ack
On-path Repeated
Slow Start
Ampliﬁed Bursts
Desync Attack
Ack Storm Attack
Ack Lost Data
Slow Injected Acks
Sawtooth Ack
Dup Ack Injection
Ack Ampliﬁcation
Off-path Repeated
Slow Start
TABLE II.
CLASSES OF ATTACKS DISCOVERED BY TCPWN
Attacker
On-path
On-path
On-path
Off-path
Off-path
Off-path
Off-path
Off-path
Off-path
Off-path
Off-path
Description
Acking data that has not been received
Repeated cycle of Slow Start, RTO, Slow Start due to ﬁxed
ack number during Fast Recovery
Send acks in bursts, amplifying the bursty nature of TCP
Inject data to desynchronize sequence numbers and stall
connection
Inject data into both sides of connection, creating ack loop
Acknowledge lost data during Fast Recovery or Slow Start
Inject acks for little data slowly during Congestion Avoid-
ance
Send incrementing acks in Congestion Avoidance/Fast Re-
covery, but reset on entry
Inject >= 3 duplicate acks repeatedly
Inject acks for lots of new data very rapidly during Conges-
tion Avoidance or Slow Start
Repeated cycle of Slow Start, RTO, Slow Start due to
increased duplicate ack threshold
Impact
Increased Throughput
Increased Throughput
Increased Throughput
Connection Stall
Connection Stall
Connection Stall
Decreased Throughput
Decreased Throughput
Decreased Throughput
Increased Throughput
Increased Throughput
Impl
ALL
U(buntu)16.10,
U11.10
U11.10
ALL
D(ebian)2,
W(indows)8.1
ALL
U11.10
U16.10,U14.04,
U11.10, W8.1
D2, W8.1
U16.10,U14.04,
U11.10, W8.1
U11.10
New
No [37]
Yes
Yes
No [22]
No [2]
Yes
Yes
Yes
Yes
Yes
Yes
it gets a loss,
particular, while our target connection typically incurs its ﬁrst
loss within 0.5 seconds of starting, due to competing with
the background connection, in these false positive tests the
ﬁrst loss in the target connection does not occur until after at
least 1.5 seconds. Since TCP continues to increase its sending
rate until
this results in an unusually high
sending rate. This longer time to loss is not attributable to
any basic action applied, but is simply a result of variations in
packet arrival and departure times, packet processing delays,
operating system scheduling, and other random variations. The
remaining marked strategies are real attacks against a TCP
implementation. We identiﬁed between 3 and 36 of these,
depending on the implementation. Through manual analysis,
we grouped these into 3 classes (Table II), two of which are
previously unknown in the literature.
On-path Repeated Slow Start (new). These attacks op-
erate by repeatedly inducing an RTO followed by Slow Start.
Thanks to Linux’s choice to use a short RTO timer, the rapid
increase in sending rate during Slow Start balances out the
idle period needed to cause an RTO and in many tests actually
provides a higher average sending rate. This is partly due to
the signiﬁcant impact this attack has on competing connections
because of the repeated, rapid sending periods that end in
a loss for both connections. These repeated losses cause the