口
一扫查看文章详情
口
24
---
## Page 49
、用户权限安全管理。
通过默认的admin用户名密码，登陆进去后，可以做很多系统管理配置，最主要的是仓库管理
可以看到，它支持的包格式，还是比较丰富的（该领域开源软件里最丰富的）。
启动后，浏览器访问8081端口，即可访问dashboard：
部署很简单：
Nexus是用Java开发，开源版本叫Nexus Repository Manager OSS，当前的版本是3.6.1,
私有仓库的软件系统。
背景
INEXUS 初探
 较新的Nexus 3算是一次重构，底层实现和功能都有很多变化。
JFrog公司的产品叫Artifactory，Sonatype公司的叫Nexus，Nexus又有2、3两个主要版本
| Dec. 1st 2017 BY 王浩宇
44Nexus初探－微服务
 3、运行启动，比如：/data/nexus-3.6.1-02/bin/nexus start。
nexus-3.6.1-02、sonatype-work，前者是代码，后者是数据、存储目录；
2、下载Nexus的最新版，在一个磁盘空间较大的目录解压，解压出2个目录：
 这个领域有2家主要的公司，JFrog和Sonatype，都主要卖商业软件，同时也提供开源版
1、安装JDK,
简单说就是：能cover很多主流语言，能代理central maven、PyPI、npm等，还能提供
代码包管理（package repository manager）是啥?
最近在考虑我们容器服务的上游CI方案，在代码包管理这个环节，顺便把玩了下nexUS。
，最好是从oracle网站下载的，比如jdk-8u151-linux-x64.rpm;
---
## Page 50
maven，转而去请求你的“私服”：
如果是maven，如下，稍加设置settings.xml，就可以指示maven，不再去请求官方的central
很简单，把各种构建工具、依赖管理工具的仓库地址，指到这个“私服”就可以了。
最后，如何使用这个“私服”呢？
Repositories中，默认存在7个，如下图，maven格式的4个，涉及三种类型：
还可以创建其他的，但是开源版仅支持File类型，商业版支持S3等其他类型的存储媒介;
以通过“Blob Stores”管理其后端存储媒介，默认存在一个“default”，类型是“File”：
“Repository”是我们测试的主要目标，
·group，“组”，
·hosted,
● proxy，
 maven-public即是，它包含了另外3个
leases、maven-snapshots即是
“代理”类型，代理请求官方仓库，并缓存在本地，图中maven-central即是
“私有”仓库，公司组织内部自由仓库，比如存储自己的jar包等，maven-re-
oSs
gggi
，逻辑上的，可以把几个仓库划归到某个组，对外统一的地址访问，
H
Blob
“仓库”是需要存储的，Nexus以Blob格式存储，可
微服务－Nexus 初探
45
---
## Page 51
也很简单，项目的pom.xml，添加一段distributionManagement的配置即可：
那自有项目的一些包，如何上传到“私服”呢？
46Nexus初探－微服务
---
## Page 52
本文链接：https://opsdev.cn/post/a-bite-of-nexus.html
A：对，开源软件里，只有nexus功能较完善，但是我们还需要做一些二次开发，比如后端存储类型
Q：你们打算用开源版本吗？
A：主要是解决依赖管理的问题，缓存maven、npm、pypi等官方仓库;
面对面：
demo-snapshots的仓库中，供后续测试，或者其他人安装使用；
如上命令，在项目代码编译、打包、上传后，即可存储于“私服”的demo-releases、
其实，给开发提供自有仓库，可以管理自己的项目代码包；
Q：你们用Nexus主要在什么场景
snapsh
cat
mvn clean deploy
snapsnot
V
/your.nexus.host:8081/repository/demo
t
itory>
ent>
V
Id>
tId>
微服务－Nexus 初探
■
口
扫查
查看文章详
41
47
---
## Page 53
数据类型
Prometheus的特点
态度，开始尝试使用Prometheus 做为几个项目的监控解决方案。
或push打点的粒度和纬度以及查询不够灵活等。
但仍然有一些问题在使用上不太舒服，如在大规模请求下日志采集和分析的效率比较难控制
数据采集后，通过监控系统客户端push到监控系统中进行打点。基本上我们需要的都能覆盖，
节点在线情况、偏移量等。
控，如服务端API的请求次数、响应时间、到达率、接口错误率、分布式存储中的集群IOPS、
初衷
主题简介
IPROMETHEUS落地实践
·Gauge
·支持多种统计数据模型，图形化友好(Grafana)。
·采用 HTTP协议，使用Pul模式采集数据。
·灵活强大的查询语句（PromQL）。
·多维数据模型（时序数据由metric名和一组K/V标签构成）。
·3.Prometheus高可用和服务发现经验
· Counter
·监控目标，可以采用服务发现或静态配置的方式。
·2.Prometheus打点及查询技巧
·1.Prometheus基础介绍
| Aug. 30th 2017 BY 赵鹏 
48Prometheus 落地实践－微服务
Counter表示收集的数据是按照某个趋势（增加／减少）一直变化的。
）不依赖存储，支持local和remote(OpenTSDB、InfluxDB等)不同模型。
后来在同事对《Google SRE》这本书中的一些运维思想进行一番安利后，抱着试一试的
比较常见的方式是写日志，将日志采集到远端进行分析和绘图，或写好本地监控脚本进行
最近参与的几个项目，无一例外对监控都有极强的要求，需要对项目中各组件进行详细监
Gauge表示搜集的数据是瞬时的，可以任意变高变低。
---
## Page 54
service 表示该指标所属的服务，method表示该指标所属的方法，最后的数字代表监控值。
这是一组用于统计RPC接口处理次数的监控数据。
例如：
标准格式为 {=,..}
float64的值组成的。
时序数据一打点-查询
果的返回耗时会有十分直观的感受。
另外针对Historgram，不论是打点还是查询，对服务器的CPU消耗比较高，通过查询时查询结
律变化的数据，而且两次采集之间可能会丢失某些数值变化的情况。随着时间周期的粒度变大
间隔中间丢失信息。
量、重试操作次数等。比较推荐多使用Counter类型采集，
，丢失关键变化的情况也会增多。
·Summary 
●Histogram
其中rpc_invoke_cnt_c 为指标名称，每条监控数据包含三个标签：code 表示错误码，
我们知道每条时序数据都是由metric（指标名称），一个或一组label（标签），以及
还有一小部分使用Histogram和Summary，用于统计平均延迟、请求延迟占比和分布率。
一小部分使用Gauge，如在线人数、协议流量、包大小等。Gauge模式比较适合记录无规
在我们的使用场景中，大部分监控使用Counter来记录，例如接口请求次数、消息队列数
出来的。
常是请求持续时间或响应大小），它直接存储了quantile 数据，而不是根据统计区间计算
Summary和Histogram十分相似，主要用于表示一段时间范围内对数据进行采样，（通
请求持续时间或响应大小），并能够对其指定区间以及总数进行统计。
Histogram可以理解为直方图，主要用于表示一段时间范围内对数据进行采样，（通常是
rpc_
rpc_invoke_cnt_
rpc_invoke_cnt_c{code="0",method="Session.GenToken",job="Ce
pc
_invoke_cnt_c{code="
_invoke_cnt_
c{code=
{code=
0"
,method="
meth
,method="
hod="
Message.
Message.s
，因为Counter类型不会在两次采集
.SendGroupMsg",
微服务－Prometheus 落地实践
SendGroupMsg"
49
---
## Page 55
或者基于方法和错误码统计Center的整体RPC请求错误频率：
我们想统计Center组件Router.Logout的频率，可使用如下Query语句：
数据的各种维度进行查询。
言，语言表现力非常丰富，支持条件查询、操作符，并且内建了大量内置函，供我们针对监控
PromQL
Prometheus强大的查询语言PromQL进行极为复杂的查询。
50Prometheus 落地实践－微服务
 PromQL(Prometheus Query Language) 是 Prometheus 自己开发的数据查询 DSL 语
针对这个例子，我们共有四个维度（一个指标名称、三个标签），这样我们便可以利用
rate(rpc_invoke_cnt_c(method="Relation.GetUserInfo",job="Ce
Graph
rate(rpc_invoke_cnt.cfjob
Jserinfo-
General
invoke
Metrics
cnt_
Legend
RPC请求数
{job=
00r
Display
Alert
,code!="0"}[1m]))
Time
1/1
range
---
## Page 56
比如在我们的项目中：
如果我们想统计Center各方法的接口耗时，使用如下Query语句即可：
 https://prometheus.io/docs/querying/functions/
另外，配合查询，在打点时metric和labal名称的定义也有一定技巧。
更多的内建函数这里不展开介绍了。函数使用方法和介绍可以详细参见官方文档中的介绍
invol
xe
Legend
Display
er
微服务－Prometheus落地实践
上
5
---
## Page 57
照官方文档中的标准配置来操作。机器数量少的时候维护简单，增删机器之后简单reload一下
服务发现
https://prometheus.io/docs/practices/naming/
更多的metric和label相关的技巧可以参考官方文档：
Grafana中是可以直接作为变量进行更复杂的模版组合。
code=0l114l1004l..来区分接口返回值，使查询的分类和结果展示更加方便直观，并且label在
如method=GroupJoinlGetUserlnfolPreSignGetl...来区分调用的函数方法，
metric进行针对性的定制绘图也是一个十分痛苦的过程。
给多个相同业务，只需简单修改template匹配一下label选择即可。不然针对各个业务不同的
差很多。
metric名，查询语句是这样的：
这三个metric相当于三个不同的监控项。
RPC调用统计的metric相应的命名成了三个：
_name_=~"*rpc_invoke_cnt_c"}的方式来规避这个问题，但在实际使用和操作时体验会
· gateway_rpc_invoke_cnt_c
● center_rpc_invoke_cnt_C
·msg_queue_cnt_c 表示队列长度统计 
·api_req_num_cv 表示 HTTP API 调用统计
· rpc_invoke_cnt_c 表示 RPC 调用统计
 52 Prometheus 落地实践－微服务
● message_rpc_invoke_cnt_c
在使用初期，参与的几个项目的Prometheus都是各自独立部署和维护的。其配置也是按
同时通过前面的各类查询例子也会发现，我们在使用label时也针对不同的含义进行了区分
例如在Grafana中，如果合理命名相对通用的metric名称，同样一个Dashboard可以套用
例如我们查询基于method统计所有组件RPC请求错误频率，如果我们使用通用名称定义
但如果我们各个组件各自定义名称的话，这条查询需要写多条。虽然我们可以通过
这种命名方式，对于各组件的开发同学可能读起来会比较直观，但是在实际查询过程中，
最开始我们的命名方式是这样的，比如我们有三个组件center、gateway、message。
尽可能使用各服务或者组件通用的名称定义metric然后通过各种lable进行区分。