User: 请解答这个和日志有关的问题Web site accepting authentication via GET There is a sign-in form on the website, which submits login/password via POST method.
Problem is, that code, which accepts login/password and authenticate user also accepts it via GET method (also, if
user was logged in previously - user logged out and logged in as new user).

Question 1: Is that considered secure? Looks like no. Logged-in user could do some important operation in the account (fill a
form with personal data, change password, upload some private data), during that an attacker could load hidden GET image on attacker'
site and this image with re-login victim to attacker's account. So victim will upload private data into attacker's account.

However I cannot find evidences that it's considered unsecure or that it's a known forgery type.

Question 2: How this attack called? Where can I find info about it?

ATTENTION: In my question form submited via POST, but attacker construct a GET link (with attackers' password in GET). So it's not about designing application which submits password via GET.

Assistant: Question 1: this is not considered secure for a number of reasons:


The password can be seen on the URL
The password can be seen on browser history
All the passwords will be on server logs
If the user logs on the site, and there's a link pointing to an external site, and the user clicks it, the password is leaked
Spyware with URL monitoring will be able to get the password


I think the problem #3 is the most troubling. If someone gains access to the webserver, he will have all the passwords for every logged user, in plain text. I would fire the person designing this login scheme.

Even if the site employs SSL, those attacks can be done and get the passwords.

Question 2: This is not an attack, is a design error. It opens way to some attacks. Search for CSRF (or XSRF) for the easiest way to attack this design error.

EDIT: The above is true IF the authentication form sends data via GET, and it isn't the case.

If the attacker can create a form convincing the user to supply his login and password, it does not matter how secure the server-side is. Does not matter if the form is using GET or POST, HTTPS or HTTP, Javascript or Flash or Java applet or virtual machine running Linux over asm.js.