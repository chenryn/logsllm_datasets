exit (EXIT_FAILURE);
}
}
的单程程 errno 。然
程程程自的 errno程的。
1.5 开始系统编程
 Linux 程的展示程的 Linux 。
将文件 I/O。然读写文件然 Linux 实
文件相的文件 I/O文件的。
然的上的时进真
的程。们。
– 22 –
 2 
文件 I/O
第 2 章
文件 I/O
文件读写的。操作 Unix 的。
将 C 的 I/O更的 I/O
。以文件操作文件 I/O 的。
对文件进读写操作文件。内进程
文件的文件 (file table)。文件
(file descriptors)（写作 fds的进。的
文件的文件备 inode 内存的
(文件式)。空间内空间文件作进
程的 cookies。文件文件的操作（读写
文件作。
子进程进程的文件。文件、
式文件的。进程文件的 (子进程文
件进程的文件。然将的以
子进程进程的文件（程。
文件 C 的 int 示。 fd t 示
然上实上 Unix 的。 Linux 进程
文件的上。文件 0 上小 1。的上
1,024以将设 1,048,576。的文件以
-1 示能文件的。
进程的文件 0 1  2进程
式的们。文件 0 （stdin文件 1 
出（stdout文件 2 （stderr。 C 提处理
 STDIN FILENO STDOUT FILENO  STDERR FILENO 以对以上
的。
的文件文件的设备
文件、、以及空间、 FIFOs 。文件的理
何能读写的东以文件。
– 23 –
 2 
文件 I/O
2.1 打开文件
的文件的方 read()  write() 调。文件能
 open() 或 creat() 调。毕
 close() 调文件。
2.1.1 open() 系统调用
 open() 调文件文件。
#include 
#include 
#include 
int open (const char *name, int flags);
int open (const char *name, int flags, mode_t
mode);
open() 调将 name 给出的文件的文件相
文件设零文件 flags 给出的
2.1.1.1 open() 的 flags 参数
flags 以 O RDONLY O WRONLY 或 O RDWR。
自读写读写式文件。
的以读方式文件 /home/kidd/madagascar 。
int fd;
fd = open (‘‘/home/kidd/madagascar’’, O_RDONLY);
if (fd==-1)
/* error */
以写式的文件能读然。进程的能
调 open() 调对文件进。
flags 以以或进或以文件
的。
– 24 –
 2 
文件 I/O
O APPEND
文件将以式。写操作文件
将文件。即进程写操作
文件进程写操作
。（的式)
O ASYNC
文件写或读时（ SIGIO。
能文件。
O CREAT
 name 的文件存时将内。文件存
效给出 O EXCL 。
O DIRECT
文件 I/O（的 I/O。
O DIRECTORY  name  open() 调将。
 opendir() 内。
O EXCL
 O CREAT 给出的时 name 给的文件存
 open() 调。文件时出。
O LARGEFILE 给文件时将 64  2G 的文件能
。 64 文件的。
O NOCTTY
给出的 name 设备（ /dev/tty), 
将进程的即进程
。。
O NOFOLLOW   name        open() 调    。 
           文 件。  给 出   的    
   调    。     name  /etc/ship/-
plank.txt  plank.txt          调   。然
 etc 或 ship  plank.txt 
调。
O NONBLOCK 以文件将式。 open() 调
何操作进程 I/O  (sleep)。能
 FIFO。
O SYNC
文件同步 I/O。写写操作
  的 读 操 作   同 步 的 以     对 读 操 作 
。 POSIX  O DSYNC  O RSYNC Linux
上 O SYNC 同。（的O SYNC 
。
– 25 –
 2 
文件 I/O
O TRUNC
文件存文件写将文件的
 0。对 FIFO 或设备。文件
上。文件写以 O TRUNC 
O RDONLY 同时的。∗
int fd;
fd = open (”/home/teach/pearl”, O_WRONLY |
O_TRUNC);
if (fd == -1)
/* error */
2.1.2 新文件所有者
新文件单的文件的 id 
文件的进程的效 id。。将文
件的进程的 id 文件。 System V 的（Linux 以
System V  Linux 的处理方。
然的 BSD 自的: 文件的上的
 id。 Linux 上实∗文件上设
设 ID  (setgid) Linux 的将。 Linux 
 V 的（新文件进程的 ID BSD （新文件
上 id真的 chown() 调
设。
文件的。
2.1.3 新文件权限
给出的 open() 调方式的。新文件
 mode  O CREAT 给出时。 O CREAT
时提 mode 的以
∗ O TRUNC | O RDONLY 的 Linux （2.6 内 +GCC4.2)将同
 O TRUNC。
∗对 bsdgroups 或 sysvgroups。
– 26 –
 2 
文件 I/O
文件时 mode 提新文件的。文件
时以以进相的操作设文件读
文件进写操作。
mode 的 Unix 集进 0644（以读
写能读。 POSIX 对实的
同的 Unix 设何自的。上的
性 POSIX 以进或操作的以满对 mode 的
。
S IRWXU 读写。
S IRUSR
读。
S IWUSR 写。
S IXUSR
。
S IRWXG 读写。
S IRGRP
读。
S IWGRP 写。
S IXGRP
。
S IRWXO 何读写。
S IROTH 何读。
S IWOTH 何写。
S IXOTH 何。
实上写的 mode 文件的
(即 umask) 操作。的 umask 的 open() 给出的
mode 操作时。的 umask 022 将 mode  0666 
0644(0666 & ∼022)。对程设时 umask
umask 对的程对新文件时的。
   子  的   对 文 件 file 进  写 操 作。  文 件  存 
 umask  022将 0644 的文件（即 mode 
0664。存的 0
int fd;
– 27 –
 2 
文件 I/O
fd = open (file, O_WRONLY | O_CREAT | O_TRUNC,
S_IWUSR | S_IRUSR | S_IWGRP| S_IRGRP |
S_IROTH);
if (fd == -1)
/* error */
2.1.4 creat() 函数
O WRONLY | O CREAT | O TRUNC 以
调实。
#include 
#include 
#include 
int creat (const char *name, mode_t mode);
的的 e。 Ken Thompson Unix 的
设 Unix 的。
的 creat() 调
int fd;
fd = creat (file, 0644);
if (fd == -1)
/* error */
int fd;
fd = open (file, O_WRONLY | O_CREAT | O_TRUNC,
0644);
if (fd == -1)
/* error */
– 28 –
 2 
文件 I/O
即以空间上单 creat() 的能 Linux 上∗
creat() 调
int creat (const char *name, int mode)
{
return open (name, O_WRONLY | O_CREAT |
O_TRUNC, mode);
}
 open() 以
的。 creat() 调性。新以 glibc
实 creat()。
2.1.5 返回值和错误码
open()  creat() 调时文件。时 -1
将 errno 设的（ errno出能的
。处理文件的的文件操作
处理, 的方式提示文件或程。
2.2 用 read() 读取文件
何文件我们何读。的
我们将写操作。
、的读文件的 read() 调。调
 POSIX.1 
#include 
ssize_t read (int fd, void *buf, size_t len);
调 fd 的文件的读 len  buf 。
时将写 buf 的。出时 -1设 errno。 fd 文
∗调上的。 i386  creat() 调
Alpha 。以上 creat()然能调
。
– 29 –
 2 
文件 I/O
件将的读的。
文件（设备文件文件读操作
。
单。的子 fd 的文件读存 word
。读 unsigned long 的小 32  Linux 上 4 
 64  8 。时 nr 存读出 nr
 -1
unsigned long word;
ssize_t nr;
/* read a couple bytes into ’word’ from ’fd’ */
nr = read (fd, &word, sizeof (unsigned long));
if (nr == -1)
/* error */
的实: 调能读 len 能
段处理的。的的
。我们何进。
2.2.1 返回值
 len 小的零对 read() 的。出
能的原读的 len 
调能能（ fd 。
的调 read() 时 0 的。文件时
read() 调 0, 文件 (EOF)然
读。 EOF （ -1示文件
文件效何读。然
调读 len 读调将（
以读（设文件式
读。 EOF 时同。
读同的。 EOF 的文件。的
读操作更的或设备文件读的时
。
– 30 –
 2 
文件 I/O
以的。 read() 调读何
 -1（ 0能 EOF 设 errno 
EINTR。以新提读。
对 read() 的调实能的
• 调 len 的。 len 读存 buf 。
。
• 调零小 len 的。读的存 buf 。
出读程或读效
零 len 时或读 len  EOF。进读
（更新 buf  len 的将读 buf 的空间或出
的原。
• 调 0。 EOF。以读的。
• 调的读的。式
。
• 调 -1 errno 设 EINTR。示读
。以新进调。
• 调 -1 errno 设 EAGAIN。示读的
读。式。
• 调 -1 errno 设同 EINTR 或 EAGAIN 的。示
更的。
2.2.2 读入所有的字节
     处 理   的    读    len   （  读 
EOF单的 read() 的。的
件。
ssize_t ret;
while (len != 0 && (ret = read (fd, buf, len)) !=
0) {
if (ret == -1) {
if (errno == EINTR)
– 31 –
 2 
文件 I/O
continue;
perror (”read”);
break;
}
len -= ret;
buf += ret;
}
段处理。 fd 的文件读 len 
 buf 读读 len 或 EOF 。读
零 len  len 读 buf 相的
新调 read()。调 -1 errno  EINTR将新
调更新。调 -1 errno 设将调 perror()
。
读的的。 bug 程
处理读的。
2.2.3 非阻塞读
时程读时 read() 调。相们
读时调即。 I/O
的进 I/O 操作操作文件时
文件的。
以 errno 的:EAGAIN。的给
出的文件（open() 给 O NONBLOCK; open()
的 flags 读 read() 调 -1设 errno 
EAGAIN 。进 I/O 时 EAGAIN将
能的。能的
char buf[BUFSIZ];
ssize_t nr;
start:
nr = read (fd, buf, BUFSIZ);
if (nr == -1) {
– 32 –
 2 
文件 I/O
if (errno == EINTR)
goto start; /* oh shush */
if (errno == EAGAIN)
/* resubmit later */
else
/* error */
}
处理 EAGAIN 时 goto start 能实上
 —  I/O 即。能
时间相更的的。
2.2.4 其他错误码
的示程或（对 EIO 。 read() 
能的 errno 
[EBADF] 给出的文件或读方式的。
buf 调进程的空间内。
EFAULT
EINVAL 文件对的对读。
EIO  I/O 。
2.2.5 read() 大小限制
size t  ssize t  POSIX 。 size t 存小
的。 ssize t 的 size t （示。 32 
上对的 C  unsigned int  int。
ssize t 的小给 size t 的作出。
size t 的 SIZE MAX ssize t 的 SSIZE MAX。 len
 SSIZE MAX  read() 调的的。 Linux 上
SSIZE MAX  LONG MAX 32 上即 0x7fffffff。对读
。的读作
的读方式能
– 33 –
 2 
文件 I/O
if (len > SSIZE_MAX)
len = SSIZE_MAX;
 len 零的 read() 调的即 0。
2.3 用 write() 来写
   的 写 文 件 的   调   write()。 write()  read() 相 对  
POSIX.1 。
#include 
ssize_t write (int fd, const void *buf, size_t
count);
 write() 调文件 fd 文件的将 buf 
 count 写文件。的文件（设备
写。
时写更新文件。时 -1将 errno
设相的。 write() 以 0何
示写零。
 read() 的单
const char *buf = ”My ship is solid!”;
ssize_t nr;
/* write the string in ’buf’ to ’fd’ */
nr = write (fd, buf, strlen (buf));
if (nr == -1)
/* error */
 read() 然相的单。调出
写的能。
unsigned long word = 1720;
size_t count;
– 34 –
 2 
文件 I/O
ssize_t nr;
count = sizeof (word);
nr = write (fd, &word, count);
if (nr == -1)
/* error, check errno */
else if (nr != count)
/* possible error, but ’errno’ not set */
2.3.1 部分写
相对 read() 的读的 write() 能写的
。对 write() 调 EOF 。对文件
 write() 将写的。
 对    文 件     进    写 。然  对    