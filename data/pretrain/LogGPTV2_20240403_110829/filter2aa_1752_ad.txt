### 优化后的文本

#### 1.5 开始系统编程
在 Linux 系统编程中，文件 I/O 是一个重要的主题。本节将介绍如何在 Linux 中进行文件读写操作。我们将讨论 C 语言中的 I/O 函数，并展示如何使用这些函数来操作文件。

#### 第 2 章 文件 I/O
本章将详细讨论文件的读写操作。我们将从 Unix 和 Linux 的角度来探讨 C 语言中的 I/O 操作，并介绍如何通过文件描述符（file descriptors, 简称 fds）来操作文件。每个进程都有一个文件表，用于管理打开的文件。文件描述符是整数，通常从 0 开始编号。标准输入（stdin）、标准输出（stdout）和标准错误（stderr）分别对应文件描述符 0、1 和 2。C 语言提供了宏定义 `STDIN_FILENO`、`STDOUT_FILENO` 和 `STDERR_FILENO` 来引用这些文件描述符。

文件可以是普通文件、设备文件、目录、符号链接以及 FIFOs。任何可读写的内容都可以被视为文件。

#### 2.1 打开文件
要对文件进行读写操作，首先需要使用 `open()` 或 `creat()` 函数打开文件。完成后，使用 `close()` 函数关闭文件。

##### 2.1.1 `open()` 系统调用
`open()` 函数用于打开或创建一个文件。

```c
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

int open(const char *name, int flags);
int open(const char *name, int flags, mode_t mode);
```

`open()` 函数根据 `name` 参数指定的路径打开文件，并返回一个文件描述符。`flags` 参数指定了文件的打开方式，如只读、只写或读写。如果指定了 `O_CREAT` 标志并且文件不存在，则会创建该文件。

###### 2.1.1.1 `open()` 的 `flags` 参数
- `O_RDONLY`：只读方式打开。
- `O_WRONLY`：只写方式打开。
- `O_RDWR`：读写方式打开。
- `O_APPEND`：追加模式，写操作将在文件末尾进行。
- `O_ASYNC`：当文件有新的 I/O 操作时，发送 `SIGIO` 信号。
- `O_CREAT`：如果文件不存在，则创建该文件。
- `O_DIRECT`：直接 I/O，绕过缓存。
- `O_DIRECTORY`：如果 `name` 不是目录，则 `open()` 调用失败。
- `O_EXCL`：与 `O_CREAT` 一起使用时，如果文件已存在，则 `open()` 谂用失败。
- `O_LARGEFILE`：支持大于 2GB 的文件。
- `O_NOCTTY`：即使 `name` 是终端设备，也不将其作为控制终端。
- `O_NOFOLLOW`：如果 `name` 是符号链接，则 `open()` 调用失败。
- `O_NONBLOCK`：以非阻塞模式打开文件。
- `O_SYNC`：同步 I/O，写操作会等待数据写入磁盘。
- `O_TRUNC`：如果文件存在且以写模式打开，则清空文件内容。

示例代码：
```c
int fd;
fd = open("/home/kidd/madagascar", O_RDONLY);
if (fd == -1) {
    /* 错误处理 */
}
```

##### 2.1.2 新文件的所有者
新文件的所有者 ID 通常是创建该文件的进程的有效用户 ID。组 ID 也类似。Linux 在这方面遵循 System V 的规则，但也可以配置为 BSD 规则。可以通过 `chown()` 函数更改文件的所有者。

##### 2.1.3 新文件的权限
`open()` 函数中的 `mode` 参数用于设置新文件的权限。默认情况下，权限会被 `umask` 掩码影响。例如，`umask` 为 022 时，`mode` 为 0666 的文件最终权限将是 0644。

示例代码：
```c
int fd;
fd = open(file, O_WRONLY | O_CREAT | O_TRUNC,
          S_IWUSR | S_IRUSR | S_IWGRP | S_IRGRP | S_IROTH);
if (fd == -1) {
    /* 错误处理 */
}
```

##### 2.1.4 `creat()` 函数
`creat()` 函数等价于 `open()` 函数的 `O_WRONLY | O_CREAT | O_TRUNC` 组合。

```c
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

int creat(const char *name, mode_t mode);
```

示例代码：
```c
int fd;
fd = creat(file, 0644);
if (fd == -1) {
    /* 错误处理 */
}
```

##### 2.1.5 返回值和错误码
`open()` 和 `creat()` 函数成功时返回文件描述符，失败时返回 -1 并设置 `errno`。常见的错误码包括 `EINTR`、`EAGAIN`、`EBADF`、`EFAULT`、`EINVAL` 和 `EIO`。

#### 2.2 使用 `read()` 读取文件
`read()` 函数用于从文件中读取数据。

```c
#include <unistd.h>

ssize_t read(int fd, void *buf, size_t len);
```

`read()` 函数从文件描述符 `fd` 对应的文件中读取最多 `len` 个字节的数据，并存储到 `buf` 中。成功时返回实际读取的字节数，失败时返回 -1 并设置 `errno`。

示例代码：
```c
unsigned long word;
ssize_t nr;
nr = read(fd, &word, sizeof(unsigned long));
if (nr == -1) {
    /* 错误处理 */
}
```

##### 2.2.1 返回值
- 如果 `len` 小于 0，`read()` 调用将失败。
- 如果 `read()` 返回 0，表示已到达文件末尾（EOF）。
- 如果 `read()` 返回 -1，`errno` 可能是 `EINTR` 或 `EAGAIN`，表示需要重新调用 `read()`。

##### 2.2.2 读取所有字节
为了确保读取到所有请求的字节，可以使用循环：

```c
ssize_t ret;
while (len != 0 && (ret = read(fd, buf, len)) != 0) {
    if (ret == -1) {
        if (errno == EINTR)
            continue;
        perror("read");
        break;
    }
    len -= ret;
    buf += ret;
}
```

##### 2.2.3 非阻塞读
对于非阻塞 I/O，`read()` 可能立即返回 -1 并设置 `errno` 为 `EAGAIN`。示例代码：

```c
char buf[BUFSIZ];
ssize_t nr;
start:
nr = read(fd, buf, BUFSIZ);
if (nr == -1) {
    if (errno == EINTR)
        goto start;
    if (errno == EAGAIN)
        /* 重新提交读取操作 */
    else
        /* 错误处理 */
}
```

##### 2.2.4 其他错误码
其他可能的错误码包括 `EBADF`、`EFAULT`、`EINVAL` 和 `EIO`。

##### 2.2.5 `read()` 大小限制
`size_t` 和 `ssize_t` 类型在 POSIX 中定义。`size_t` 表示无符号整数，`ssize_t` 表示带符号整数。`read()` 的 `len` 参数不能超过 `SSIZE_MAX`。在 32 位系统上，`SSIZE_MAX` 通常为 0x7fffffff。

#### 2.3 使用 `write()` 写入文件
`write()` 函数用于向文件中写入数据。

```c
#include <unistd.h>

ssize_t write(int fd, const void *buf, size_t count);
```

`write()` 函数将 `buf` 中的 `count` 个字节写入文件描述符 `fd` 对应的文件。成功时返回实际写入的字节数，失败时返回 -1 并设置 `errno`。

示例代码：
```c
const char *buf = "My ship is solid!";
ssize_t nr;
nr = write(fd, buf, strlen(buf));
if (nr == -1) {
    /* 错误处理 */
}
```

##### 2.3.1 部分写
`write()` 可能不会一次性写入所有请求的字节。因此，需要检查返回值以确定实际写入的字节数。

```c
unsigned long word = 1720;
size_t count = sizeof(word);
ssize_t nr = write(fd, &word, count);
if (nr == -1) {
    /* 错误处理 */
} else if (nr != count) {
    /* 可能的错误，但 errno 未设置 */
}
```

希望这些优化后的文本能够帮助你更好地理解和使用文件 I/O 操作。