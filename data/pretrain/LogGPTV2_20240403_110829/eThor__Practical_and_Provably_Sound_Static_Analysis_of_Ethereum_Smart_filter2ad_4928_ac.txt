reentrancies of c∗ ultimately originating from the original execu-
tion (call level 1). This abstraction reflects that given the unknown
blockchain environment, the state of the callstack when reenter-
ing is obscure: it is unknown who initiated the reentering call and
which other internal transactions have been executed before.
3.2 Analysis Definition
In the following we formally specify our analysis by defining the
underlying Horn-clause based abstraction. An abstract configura-
tion is a set of predicate applications representing one or several
concrete configurations. Since we are interested in analyzing exe-
cutions of the contract c∗, we consider EVM configurations repre-
senting such executions, which are call stacks having an execution
state of contract c∗ as a bottom element. We abstract such a call
stack by the set of all its elements that describe executions of c∗,
reflecting the stack structure only by indicating whether a relevant
execution state represents the original execution of c∗ (call level
0) or a reentering execution that hence appears higher on the call
6
δ(c∗) := 
0≤i  1 ∧ ˆx = s[size − 1] ∧ ˆy = s[size − 2]
(cid:76)MLOAD(cid:77)pc := { MStatepc((size, s), m, stor, cℓ) ∧ size > 1 ∧ ˆo = s[size − 1] ∧ ˆv = ( ˆo ∈ N) ? getWord(m, ˆo) : ⊤
(cid:76)CALL(cid:77)pc := { MStatepc((size, s), m, stor, cℓ) ∧ size > 6 =⇒ MStatepc+1((size − 6, s[size − 7 → ⊤]), λx . ⊤, λx . ⊤, cℓ),
MStatepc((size, s), m, stor, cℓ) ∧ size > 6 =⇒ MState0((0, λx . 0), λx . 0, stor, 1),
MStatepc((size, s), m, stor, cℓ) ∧ size > 6 ∧ Halt(storh, 1) =⇒ MState0((0, λx . 0), λx . 0, storh, 1), . . .}
=⇒ MStatepc+1((size, s[size − 1 → ˆv]), m, stor, cℓ), . . . }
(A1)
(A2)
(M1)
(C1)
(C2)
(C3)
word address ((cid:4) p
(cid:5)) and the word at the next higher byte address
(cid:7)) are accessed to combine their relevant parts to a full word.
((cid:6) p
word from the memory starting at this index. In our abstraction
defined by the abstract semantic rule depicted in Figure 6 either
immediately ⊤ is pushed to the stack (in case that the offset ˆo
is not a concrete value and hence the value to be loaded cannot
be determined) or the word from the concrete memory offset is
extracted. The extraction needs to account for the word-indexed
memory abstraction that we chose and is formally defined by the
function getWord(·, ·) depicted in Figure 7. In case that the offset is
a word address (divisible by 32), the corresponding value can be
accessed from the word memory m by converting the byte address
to the word address ( p
32). Otherwise, the word at the next lower
Figure 6: Partial definition of(cid:76)·(cid:77)pc: selection of abstract semantics rules. For MLOAD and CALL the exception rule is omitted.
execution of c∗ on the current call level needs to be approximated,
as well as the reentering executions of c∗ (on a higher call level). For
obtaining an analysis that is precise enough to detect real-world
contracts with reentrancy protection as secure, it is crucial to model
c∗’s persistent storage as accurately as possible in reentering execu-
tions. This makes it necessary to carefully study how the storage at
the point of reentering relates to the one in the previous executions
of c∗, taking into account that (in the absence of DELEGATECALL
and CALLCODE instructions in c∗) only c∗ can manipulate its own
storage. Figure 8 overviews the storage propagation in the case
of a contract call: To this end it shows the sequence diagram of a
concrete execution of c∗ that calls a contract c′ which again trig-
gers several reentrancies of c∗. In this course three ways of storage
propagation between executions of c∗ are exhibited: 1) The storage
is forward propagated from a calling execution to a reentering exe-
cution of c∗ ( A, C) 2) The storage is cross propagated from a finished
reentering execution to another reentering execution of c∗ ( B ) 3)
The storage is back propagated from a finished reentering execution
to a calling execution of c∗ ( D, E ) These three kinds of propagation
are reflected in the three abstract rules for the call instruction given
in Figure 6 and correspondingly visualized in Figure 8.
Rule (C1) describes how the execution of c∗ (original and reenter-
ing alike) resumes after returning from the call, and hence approxi-
mates storage back propagation: For the sake of simplicity, storage
gets over-approximated in this case by λx . ⊤. The same applies to
the local memory and stack top value since those are affected by
the result of the computation of the unknown contract. Rule (C2)
captures the initiation of a reentering execution (at call level 1) with
32
Contract Calls. The abstraction for CALL is the most interesting.
This instruction takes seven arguments from the stack that specify
parameters to the call such as the target of the call or the value
to be transferred along with the memory addresses specifying the
location of the input and the return data. When returning from
a successful contract call, the value 1 is written to the stack and
the return value is written to the specified memory fragment. The
persistent storage after a successful call contains all changes that
were performed during the execution of the called contract. In the
case that the contract call terminated exceptionally instead, the
storage is rolled back to the point of calling and the value 0 is
written to the stack to indicate failure.
Since a contract CALL initiates the execution of another (un-
known) contract, all its effects on the executions of c∗ need to be
modeled. More precisely, these effects are two-fold: the resuming
32
7
Accepted for ACM CCS, 2020
getWord(m, p) :=
(cid:40)m[ p
(m[(cid:4) p
32]
32
(cid:5)][p mod 32,31])||p(m[(cid:6) p
32
(cid:7)][0,(p mod 32)−1]) otherwise
p mod 32 = 0
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
Figure 7: Function extracting the word at byte offset p from word-indexed memory m. Here v[l,r] denotes the value represented by
v’s lth byte till rth byte in big endian byte representation. v||nw is defined as in Figure 5. We assume both operations to be lifted to ˆD.
(including the code of the contracts residing there) at execution
time cannot be statically determined. Still, we could easily accom-
modate the precise analysis of a set of known contracts e.g., library
contracts that are already present on the blockchain. We omitted
this straightforward extension in this work for the sake of clarity
and succinctness in the analysis definition and the soundness claim.
Following this line of argumentation, we assume c∗ not to contain
DELEGATECALL and CALLCODE instructions: these instructions
enable the execution of another contract code in the context of c∗,
allowing for the modification of the persistent storage of c∗ and
even of money transfers on behalf of c∗. Using DELEGATECALL
or CALLCODE to call an unknown contract can therefore poten-
tially result in the reachability of any execution states of contract
c∗. Consequently every property relying on the non-reachability
of certain problematic contract states would be considered vio-
lated. In a setting of multiple known contracts the restriction on
DELEGATECALL and CALLCODE instructions could be relaxed to
allow for such calls that are guaranteed to target known contracts.
We now briefly illustrate the key design choices behind our ab-
straction, which we carefully crafted to find the sweet spot between
accuracy and practicality. The analysis is value sensitive in that
concrete stack, memory, and storage values are tracked until they
get abstracted due to influence of unknown components. For lo-
cal computations, the analysis is partly flow-sensitive (considering
the order of instructions, but merging abstract configurations at
the same program counters) and path-sensitive (being sensitive to
branch conditions). On the level of contract calls, a partial context
sensitivity is given in that the storage at the time of calling influ-
ences the analysis of the subsequent call, but no other inputs to
the call are tracked. In particular (due to the lack of knowledge on
interactions with other contracts) all reentering calls are merged
into a single abstraction, accumulating all possible storage states
at the point of reentering. For this reason, the analysis of calls on
level 1 is less precise than the one of the original execution on call
level 0, where only the restrictions of flow sensitivity apply.
3.4 Soundness Result
We prove, for each contract c∗, that the defined Horn-clause based
abstraction soundly over-approximates the small-step semantics
presented in § 2.2. Formally, this property is stated as follows:
Theorem 3.1 (Soundness). Let c∗ be a contract whose code does
not contain DELEGATECALL or CALLCODE. Let Γ be a transaction
environment and let S and S′ be annotated callstacks such that |S′| >
0. Then for all execution states s that are strongly consistent with c∗
it holds that
Γ ⊨ sc∗ :: S →∗ S′ ++ S =⇒ ∀∆I . αc∗([sc∗]) ≤ ∆I
=⇒ ∃∆. ∆I , δ(c∗) ⊢ ∆ ∧ αc∗(S′) ≤ ∆
Figure 8: Illustration of the different call abstractions.
storage forward propagation: As contract execution always starts
at program counter 0 with empty stack and zeroed-out local mem-
ory, only abstractions (instances of the MState0 predicate) of this
shape are implied. The forward propagation of storage is modeled
by initializing the MState0 predicate with the storage stor at call
time. Rule (C3) models storage cross propagation: Similar to rule
(C2), an abstract reentering execution in a fresh machine state is
triggered. However, the storage is not propagated from the point of
calling, but from another finished reentering execution whose re-
sults are abstracted by the halting predicate Halt at call level 1. This
rule is independent of the callee in that it is only conditioned on
the reachability of some CALL instruction, but it does not depend
on any of the callee’s state. Instead its cyclic structure requires to
extrapolate an invariant on the potential storage modifications that
are computable by c∗: Intuitively, when reentering c∗ it needs to
be considered that priorly the storage was modified by applying
an arbitrary sequence of c∗’s public functions. The significance
of this abstraction is motivated by the example in Figure 2 where
the attack is only enabled by calling Bank’s release function first, to
release the lock before reentering.
3.3 Scope of the analysis
Before presenting the soundness result, we discuss the scope of
the analysis. The analysis targets contracts in a stand-alone setting,
which means that the behavior of all contracts that c∗ might in-
teract with is over-approximated. This abstraction is not merely a
design choice, but rather a necessity as the state of the blockchain
8
⊤⊤RETRETCALLRETCALLRETReentering ExecutionsCall Level 0Call Level 1RETRETCALLCALLCALLCALLInitial ExecutionRETTimeABCDEEDCABC2C2C1C1C3 ∗ ∗ ∗ ∗ ′eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
The theorem states that every execution of contract c∗ (modeled
by a multi-step execution starting in state sc∗ on an arbitrary call
stack S and ending in call stack S′ ++ S, indicating that the original
execution of c∗ yielded the state as modeled by the call stack S′),
can be mimicked by an abstract execution. This means that from
every abstract configuration ∆I that abstracts sc∗ (so that it is more
abstract than α([sc∗])) one can logically derive using the Horn
clauses in δ(c∗) some abstract configuration ∆ abstracting S′. As a
consequence of this theorem we can soundly reason about arbitrary
executions of a contract c∗: if we can show that from an abstract
configuration ∆I , that abstracts a set of initial execution states
of c∗, it is impossible to derive using δ(c∗) some other abstract
configuration ∆, that abstracts a set of problematic execution states
of c∗, then this ensures that all these problematic states are not
reachable with a small-step execution from any of the initial states.
For the proof of Theorem 3.1 we refer the reader to § B.
3.5 Reachability Properties for Contract Safety
As characterized by the soundness result, our abstraction allows
for the sound analysis of reachability properties. We will illustrate
in the following how such a reachability analysis is sufficient to
express relevant smart contract security properties.
Single-entrancy. Some generic security properties of Ethereum
smart contracts can be over-approximated by reachability proper-
ties and hence checked automatically by our static analysis. Con-
sider, the single-entrancy property from § 2.3 which has been
proven to be approximated by the following reachability property
in [24].
Definition 3.2 (Call unreachability [24]). A contract c is call un-
reachable if for all regular execution states(µ, ι, σ , η) that are strongly
consistent with c and satisfy µ = (д, 0, λx . 0, 0, ϵ) for some д ∈ N, it
holds that for all transaction environments Γ and all callstacks S
¬∃s, S . Γ ⊨ (µ, ι, σ, η)c :: S →∗ sc :: S′ ++ S
∧ |S′| > 0 ∧ code(c)[s .µ .pc] ∈ Instcall
Where the set Instcall of call instructions is defined as
Instcall = {CALL, CALLCODE, DELEGATECALL, CREATE}
Intuitively, call reachability is a valid over-approximation of
single-entrancy as an internal transaction can only be initiated by
the execution of a call instruction. Consequently, for excluding
that an internal transaction was initiated after reentering, it is
sufficient to ensure that no call instruction is reachable at this point.
In addition, as all contracts start their executions in a fresh machine