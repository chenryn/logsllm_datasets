The cardinality of the outer join is estimated just like the one of the inner join,
exceptthatthecalculatedestimationiscomparedwiththecardinalityoftheouter
setofrows,andthebiggervalueistakenasthefinalresult.1 Inotherwords,the
outerjoinneverreducesthenumberofrows(butcanincreaseit).
Thecostestimationissimilartothatoftheinnerjoin.
Wemustalsokeepinmindthattheplannercanselectdifferentplansforinnerand
outerjoins.EventhissimpleexamplewillhaveadifferentJoinFilteriftheplanner
isforcedtouseanestedloopjoin:
1 backend/optimizer/path/costsize.c,calc_joinrel_size_estimatefunction
411
Chapter21 NestedLoop
=> SET enable_mergejoin = off;
=> EXPLAIN SELECT *
FROM ticket_flights tf
JOIN boarding_passes bp ON bp.ticket_no = tf.ticket_no
AND bp.flight_id = tf.flight_id
WHERE tf.ticket_no = '0005434026720';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=1.12..33.33 rows=3 width=57)
Join Filter: (tf.flight_id = bp.flight_id)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = '0005434026720'::bpchar)
−> Materialize (cost=0.56..16.62 rows=3 width=25)
−> Index Scan using boarding_passes_pkey on boarding_passe...
(cost=0.56..16.61 rows=3 width=25)
Index Cond: (ticket_no = '0005434026720'::bpchar)
(9 rows)
=> RESET enable_mergejoin;
Aslightdifferenceinthetotalcostiscausedbythefactthattheouterjoinmust
alsocheckticketnumberstogetthecorrectresultifthereisnomatchintheouter
setofrows.
Rightjoins arenotsupported,1 asthenestedloopalgorithmtreatstheinnerand
outersetsdifferently.Theoutersetisscannedinfull;asfortheinnerset,theindex
accessallowsreadingonlythoserowsthatsatisfythejoincondition,sosomeofits
rowsmaybeskippedaltogether.
Afulljoinisnotsupportedforthesamereason.
Anti-and Semi-joins
Anti-joins and semi-joins are similar in the sense that for each row of the first
(outer)setitisenoughtofindonlyonematchingrowinthesecond(inner)set.
Ananti-joinreturnstherowsofthefirstsetonlyiftheyhavenomatchinthesecond
set: assoonastheexecutorfindsthefirstmatchingrowinthesecondset,itcan
1 backend/optimizer/path/joinpath.c,match_unsorted_outerfunction
412
21.2 NestedLoopJoins
exitthecurrentloop: thecorrespondingrowofthefirstsetmustbeexcludedfrom
theresult.
Anti-joinscanbeusedtocomputethepredicate.
For example, let’s find aircraft models with undefined cabin configuration. The
correspondingplancontainstheNestedLoopAntiJoinnode:
=> EXPLAIN SELECT *
FROM aircrafts a
WHERE NOT EXISTS (
SELECT * FROM seats s WHERE s.aircraft_code = a.aircraft_code
);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop Anti Join (cost=0.28..4.65 rows=1 width=40)
−> Seq Scan on aircrafts_data ml (cost=0.00..1.09 rows=9 widt...
−> Index Only Scan using seats_pkey on seats s
(cost=0.28..5.55 rows=149 width=4)
Index Cond: (aircraft_code = ml.aircraft_code)
(5 rows)
Analternativequerywithoutthepredicatewillhavethesameplan:
=> EXPLAIN SELECT a.*
FROM aircrafts a
LEFT JOIN seats s ON a.aircraft_code = s.aircraft_code
WHERE s.aircraft_code IS NULL;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop Anti Join (cost=0.28..4.65 rows=1 width=40)
−> Seq Scan on aircrafts_data ml (cost=0.00..1.09 rows=9 widt...
−> Index Only Scan using seats_pkey on seats s
(cost=0.28..5.55 rows=149 width=4)
Index Cond: (aircraft_code = ml.aircraft_code)
(5 rows)
Asemi-joinreturnsthoserowsofthefirstsetthathaveatleastonematchinthe
secondset(again,thereisnoneedtocheckthesetforothermatches—theresult
isalreadyknown).
A semi-join can be used to compute the  predicate. Let’s find the aircraft
modelswithseatsinstalledinthecabin:
413
Chapter21 NestedLoop
=> EXPLAIN SELECT *
FROM aircrafts a
WHERE EXISTS (
SELECT * FROM seats s
WHERE s.aircraft_code = a.aircraft_code
);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop Semi Join (cost=0.28..6.67 rows=9 width=40)
−> Seq Scan on aircrafts_data ml (cost=0.00..1.09 rows=9 widt...
−> Index Only Scan using seats_pkey on seats s
(cost=0.28..5.55 rows=149 width=4)
Index Cond: (aircraft_code = ml.aircraft_code)
(5 rows)
TheNestedLoopSemiJoinnoderepresentsthesame-namejoinmethod.Thisplan
(just like the anti-join plans above) provides the basic estimation of the number
ofrowsintheseatstable(rows=149),althoughitisenoughtoretrieveonlyoneof
them.Theactualqueryexecutionstopsafterfetchingthefirstrow,ofcourse:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM aircrafts a
WHERE EXISTS (
SELECT * FROM seats s
WHERE s.aircraft_code = a.aircraft_code
);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop Semi Join (actual rows=9 loops=1)
−> Seq Scan on aircrafts_data ml (actual rows=9 loops=1)
−> Index Only Scan using seats_pkey on seats s
(actual rows=1 loops=9)
Index Cond: (aircraft_code = ml.aircraft_code)
Heap Fetches: 0
(6 rows)
Cardinality estimation. The selectivity of a semi-join is estimated in the usual
manner,exceptthatthecardinalityoftheinnersetistakenasone.Foranti-joins,
theestimatedselectivityissubtractedfromone,justlikefornegation.1
1 backend/optimizer/path/costsize.c,calc_joinrel_size_estimatefunction
414
21.2 NestedLoopJoins
Costestimation. Foranti-andsemi-joins,thecostestimationreflectsthefactthat
thescanofthesecondsetstopsassoonasthefirstmatchingrowisfound.1
Non-Equi-joins
Thenestedloopalgorithmallowsjoiningsetsofrowsbasedonanyjoincondition.
Obviously,iftheinnersetisabasetablewithanindexcreatedonit,andthejoin
conditionusesanoperatorthatbelongstoanoperatorclassofthisindex,theac- p.
cesstotheinnersetcanbequiteefficient.Butitisalwayspossibletoperformthe
joinbycalculatingaCartesianproductofrowsfilteredbysomecondition—which
canbeabsolutelyarbitraryinthiscase. Likeinthefollowingquery,whichselects
pairsofairportsthatarelocatedclosetoeachother:
=> CREATE EXTENSION earthdistance CASCADE;
=> EXPLAIN (costs off) SELECT *
FROM airports a1
JOIN airports a2 ON a1.airport_code != a2.airport_code
AND a1.coordinates  a2.coordinates  ml_1.airport_code) AND
((ml.coordinates  ml_1.coordinates)  Seq Scan on airports_data ml
−> Materialize
−> Seq Scan on airports_data ml_1
(6 rows)
Parallel Mode v..
Anestedloopjoincanparticipateinparallelplanexecution.2 p.
It is only the outer set that can be processed in parallel,as it can be scanned by
several workers simultaneously. Having fetched an outer row, each worker then
hastosearchforthematchingrowsintheinnerset,whichisdonesequentially.
1 backend/optimizer/path/costsize.c,final_cost_nestloopfunction
2 backend/optimizer/path/joinpath.c,consider_parallel_nestloopfunction
415
Chapter21 NestedLoop
Thequeryshownbelowincludesseveraljoins;itsearchesforpassengersthathave
ticketsforaparticularflight:
=> EXPLAIN (costs off) SELECT t.passenger_name
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
JOIN flights f ON f.flight_id = tf.flight_id
WHERE f.flight_id = 12345;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop
−> Index Only Scan using flights_flight_id_status_idx on fligh...
Index Cond: (flight_id = 12345)
−> Gather
Workers Planned: 2
−> Nested Loop
−> Parallel Seq Scan on ticket_flights tf
Filter: (flight_id = 12345)
−> Index Scan using tickets_pkey on tickets t
Index Cond: (ticket_no = tf.ticket_no)
(10 rows)
At the upper level,the nested loop join is performed sequentially. The outer set
consistsofasinglerowoftheflightstablefetchedbyauniquekey,sotheuseofa
nestedloopisjustifiedevenforalargenumberofinnerrows.
p. Theinnersetisretrievedusingaparallelplan. Eachoftheworkersscansitsown
shareofrowsoftheticket_flightstableandjoinsthemwithticketsusingthenested
loopalgorithm.
416
22
Hashing
22.1 Hash Joins
One-Pass Hash Joins
A hash join searches for matching rows using a pre-built hash table. Here is an
exampleofaplanwithsuchajoin:
=> EXPLAIN (costs off) SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Hash Join
Hash Cond: (tf.ticket_no = t.ticket_no)
−> Seq Scan on ticket_flights tf
−> Hash
−> Seq Scan on tickets t
(5 rows)
Atthefirststage,theHashJoinnode1callstheHashnode,2whichpullsthewhole
innersetofrowsfromitschildnodeandplacesitintoahashtable.
Storingpairsofhashkeysandvalues,thehashtableenablesfastaccesstoavalue
byitskey;thesearchtimedoesnotdependonthesizeofthehashtable,ashash
keysaredistributedmoreorlessuniformlybetweenalimitednumberofbuckets.
Thebuckettowhichagivenkeygoesisdeterminedbythehashfunctionofthehash
key;sincethenumberofbucketsisalwaysapoweroftwo,itisenoughtotakethe
requirednumberofbitsofthecomputedvalue.
1 backend/executor/nodeHashjoin.c
2 backend/executor/nodeHash.c
417
Chapter22 Hashing
p. Justlikethebuffercache,thisimplementationusesadynamicallyextendiblehash
tablethatresolveshashcollisionsbychaining.1
Atthefirststageofajoinoperation,theinnersetisscanned,andthehashfunction
is computed for each of its rows. The columns referenced in the join condition
(HashCond)serveasthehashkey,whilethehashtableitselfstoresallthequeried
fieldsoftheinnerset.
v. Ahashjoinismostefficientifthewholehashtablecanbeaccommodatedin,
as the executor manages to process the data in one batch in this case. The size
4MB of the memory chunk allocated for this purpose is limited by the work_mem×
1.0 ×hash_mem_multipliervalue.
work_mem×hash_mem_multiplier
inner
set
outer
set
Let’sruntotakealookatstatisticsonmemoryusageofaquery:
=> SET work_mem = '256MB';
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM bookings b
JOIN tickets t ON b.book_ref = t.book_ref;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Hash Join (actual rows=2949857 loops=1)
Hash Cond: (t.book_ref = b.book_ref)
−> Seq Scan on tickets t (actual rows=2949857 loops=1)
−> Hash (actual rows=2111110 loops=1)
Buckets: 4194304 Batches: 1 Memory Usage: 145986kB
−> Seq Scan on bookings b (actual rows=2111110 loops=1)
(6 rows)
1 backend/utils/hash/dynahash.c
418
22.1 HashJoins
Unlikeanestedloopjoin,whichtreatsinnerandoutersetsdifferently,ahashjoin
canswapthemaround.Thesmallersetisusuallyusedastheinnerone,asitresults
inasmallerhashtable.
Inthisexample,thewholetablefitsintotheallocatedcache: ittakesabout
(MemoryUsage)andcontains =  buckets. Sothejoinisperformedinone
pass(Batches).
Butifthequeryreferredtoonlyonecolumn,thehashtablewouldfit:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT b.book_ref
FROM bookings b
JOIN tickets t ON b.book_ref = t.book_ref;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Hash Join (actual rows=2949857 loops=1)
Hash Cond: (t.book_ref = b.book_ref)
−> Index Only Scan using tickets_book_ref_idx on tickets t
(actual rows=2949857 loops=1)
Heap Fetches: 0
−> Hash (actual rows=2111110 loops=1)
Buckets: 4194304 Batches: 1 Memory Usage: 113172kB
−> Seq Scan on bookings b (actual rows=2111110 loops=1)
(8 rows)
=> RESET work_mem;
Itisyetanotherreasontoavoidreferringtosuperfluousfieldsinaquery(which
canhappenifyouareusinganasterisk,togiveoneexample).
Thechosennumberofbucketsshouldguaranteethateachbucketholdsonlyone
rowonaveragewhenthehashtableiscompletelyfilledwithdata. Higherdensity
wouldincreasetherateofhashcollisions,makingthesearchlessefficient,whilea
lesscompacthashtablewouldtakeuptoomuchmemory. Theestimatednumber
ofbucketsisincreaseduptothenearestpoweroftwo.1
(If the estimated hash table sizeexceeds the memory limit based on the average
widthofasinglerow,two-passhashingwillbeapplied.)
Ahashjoincannotstartreturningresultsuntilthehashtableisfullybuilt.
1 backend/executor/nodeHash.c,ExecChooseHashTableSizefunction
419
Chapter22 Hashing
At the second stage (the hash table is already built by this time), the Hash Join
nodecallsonitssecondchildnodetogettheoutersetofrows. Foreachscanned
row,thehashtableissearchedforamatch.Itrequirescalculatingthehashkeyfor
thecolumnsoftheoutersetthatareincludedintothejoincondition.
outer
set
Thefoundmatchesarereturnedtotheparentnode.
p. Costestimation. Wehavealreadycoveredcardinalityestimation;sinceitdoesnot
dependonthejoinmethod,Iwillnowfocusoncostestimation.
ThecostoftheHashnodeisrepresentedbythetotalcostofitschildnode. Itisa
dummynumberthatsimplyfillstheslotintheplan.1 Alltheactualestimations
areincludedintothecostoftheHashJoinnode.2
Hereisanexample:
=> EXPLAIN (analyze, timing off, summary off)
SELECT * FROM flights f
JOIN seats s ON s.aircraft_code = f.aircraft_code;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Hash Join (cost=38.13..278507.28 rows=16518865 width=78)
(actual rows=16518865 loops=1)