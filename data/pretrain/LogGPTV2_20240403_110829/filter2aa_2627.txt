# PowerPwning: Post-Exploitation with PowerShell

## Joe Bialek
- **Role:** Security Engineer
- **Twitter:** [@JosephBialek](https://twitter.com/JosephBialek)
- **Blog:** [clymb3r.wordpress.com](http://clymb3r.wordpress.com)
- **GitHub:** [clymb3r](https://github.com/clymb3r)

### Why PowerShell is Awesome
- **Access to the Win32 API:** Provides extensive capabilities for system interaction.
- **No Disk Writes in Remote Execution:** Scripts executed on remote computers do not write to disk, reducing the risk of detection.
- **Execution Context:** Scripts run within `PowerShell.exe` or `WsmProvHost.exe` when executed remotely, avoiding the need for suspicious or unsigned processes.

### Objectives with PowerShell
- **Leverage Existing Tools:** Run existing tools within PowerShell without rewriting them, while benefiting from PowerShell's forensic advantages.
- **Solution:** Develop a PowerShell script to reflectively load and execute PE (EXE/DLL) files directly within the PowerShell process.

### How to Load a PE File
1. **Allocate Memory:** Allocate memory for the PE file.
2. **Copy Headers:** Copy the PE headers into the allocated memory.
3. **Copy Sections:** Copy the sections (e.g., `.text`, `.data`) into the allocated memory.
4. **Base Relocations:** Perform base relocations on the loaded sections.
5. **Load Dependencies:** Load any required DLLs.
6. **Adjust Permissions:** Adjust memory permissions as needed.
7. **Call Entry Function:**
   - For **DLLs**: Call `DllMain` to notify the DLL that it has been loaded.
   - For **EXEs**: Call the entry function to set up the process, retrieve command-line arguments, and call `int main()`.

### Handling DLLs
- **Function Calls:** After loading a DLL, you can call its exported functions.
- **Output Capture:** Remote PowerShell cannot capture `stdout`, so use a return type like `char*` or `wchar_t*` to capture output. PowerShell can then marshal this pointer to a managed string and print the output.

### Preventing PowerShell from Exiting
- **Problem:** When an EXE exits, it calls `ExitProcess`, which terminates the PowerShell process.
- **Solution:**
  - **Thread Isolation:** Call the EXE entry function in a separate thread.
  - **Overwrite `ExitProcess`:** Replace `ExitProcess` with a call to `ExitThread` to ensure only the EXE thread exits.

#### Assembly Code to Overwrite `ExitProcess`
```assembly
; Set a variable to 1 to signal PowerShell that the EXE is exiting
mov rbx, 0x4141414141414141
mov [rbx], byte 0x01

; Call ExitThread instead of ExitProcess
sub rsp, 0xc0
and sp, 0xFFF0 ; Align stack
mov rbx, 0x4141414141414141
call rbx
```

### Passing Command-Line Arguments
- **Problem:** The EXE entry function retrieves command-line arguments and passes them to `int main(argc, argv)`.
- **Functions Used:**
  - `GetCommandLine()`
  - `__getcmdln()`
- **Solutions:**
  - **Patch `GetCommandLine()`:** Overwrite `GetCommandLineA()` and `GetCommandLineW()` with shellcode to return a custom string.
  - **Patch `__getcmdln()`:** Replace the `__acmdln` and `__wcmdln` variables with custom strings.

#### Assembly Code to Patch `GetCommandLine`
```assembly
; X64 code
mov rax, 0x4141414141414141
ret

; X86 code
mov eax, 0x41414141
ret
```

### Remote Reflective DLL Injection
- **Stephen Fewer Method:**
  - Write DLL bytes and a reflective DLL loader to the remote process memory.
  - Use `CreateRemoteThread` to load the actual DLL.
- **My Method:**
  - **Memory Allocation:** Allocate memory in the remote process.
  - **Library Loading:** Load necessary libraries in the remote process.
  - **Staging DLL:** Stage the DLL in the PowerShell process, perform relocations, and then write the bytes to the remote process.
  - **Thread Creation:** Create a thread to begin DLL execution.

#### Remote LoadLibrary (x64)
```assembly
; Save rsp and setup stack for function call
push rbx
mov rbx, rsp
sub rsp, 0x20
and sp, 0xffc0

; Call LoadLibraryA
mov rcx, 0x4141414141414141 ; Pointer to library string, set by PS
mov rdx, 0x4141414141414141 ; Address of LoadLibrary, set by PS
call rdx
mov rdx, 0x4141414141414141 ; Pointer to save result, set by PS
mov [rdx], rax

; Fix stack
mov rsp, rbx
pop rbx
ret
```

#### Remote GetProcAddress (x64)
```assembly
; Save state of rbx and stack
push rbx
mov rbx, rsp
sub rsp, 0x20
and sp, 0xffc0

; Call GetProcAddress
mov rcx, 0x4141414141414141 ; DllHandle, set by PS
mov rdx, 0x4141414141414141 ; Pointer to FuncName string, set by PS
mov rax, 0x4141414141414141 ; GetProcAddress address, set by PS
call rax

; Store the result
mov rcx, 0x4141414141414141 ; Pointer to buffer to save result, set by PS
mov [rcx], rax

; Restore stack
mov rsp, rbx
pop rbx
ret
```

### Detection and Prevention
- **Administrator Access:** PowerShell remoting requires administrator access.
- **Pipeline Logging:** PowerShell pipeline logging can help detect malicious activities.
- **Constrained Runspaces:** Limit the power of PowerShell by using constrained runspaces.
- **Standard Security Measures:** Firewalls, limiting powerful accounts, and machine-wide profiles to log actions can help prevent remote attacks.

### Closing Thoughts
- **Not a Vulnerability:** PowerShell is a Turing-complete programming language designed to be powerful and flexible. Any programming language can be used to create similar functionality.
- **Security and Management:** PowerShell is a great tool for managing Windows systems and has robust security features.
- **Don't Be Scared:** This talk should not discourage the use of PowerShell; it is a powerful and secure tool when used correctly.

### Links
- **Invoke-ReflectivePEInjection:** [GitHub](https://github.com/clymb3r/powershell) (Also part of PowerSploit)
- **Blog:** [clymb3r.wordpress.com](http://clymb3r.wordpress.com)

### References
- **MSDN Documentation:**
  - [PE Files and DLL Loading](http://msdn.microsoft.com/en-us/magazine/bb985992.aspx)
  - [Loading a DLL from Memory](http://msdn.microsoft.com/en-us/magazine/cc301808.aspx)
  - [Windows Hardware Dev Center](http://msdn.microsoft.com/library/windows/hardware/gg463125)
- **Other Reflective Loaders:**
  - [ReflectiveDLLInjection](https://github.com/stephenfewer/ReflectiveDLLInjection)
  - [Loading a DLL from Memory Tutorial](http://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/)
- **PowerShell Blogs:**
  - [Exploit Monday](http://www.exploit-monday.com/)
  - [Lee Holmes' Blog](http://www.leeholmes.com/blog/)