# 父进程欺骗技术概述与检测

## 译文声明
本文为翻译文章，原作者为countercept，来源：countercept.com。具体内容及含义请以原文为准。

## 一、前言
安全团队通常通过分析父子进程间的关系来判断是否存在异常行为。然而，许多攻击者利用Parent PID (PPID) Spoofing技术绕过这种检测，允许从任意父进程执行恶意进程。此技术在Cobalt Strike和Didier Stevens的研究中都有所提及。本文将深入探讨这一技术的工作原理，以及防御者如何使用Windows事件跟踪（ETW）进行检测。此外，我们还将展示如何通过PowerShell脚本实现PPID Spoofing和DLL注入，并提供一个基于pywintrace库的Python检测脚本。

## 二、技术分析

### PPID Spoofing
过去，攻击者能够在未被发现的情况下在网络中活动。但随着终端检测和响应（EDR）系统的普及和威胁检测能力的提升，这种情况发生了变化。尤其是对父子进程关联关系的分析，已成为检测攻击链的常用方法。例如：
1. 宏负载传递 - WinWord生成子进程
2. JS/VBS C#负载传递 - cscript生成csc
3. 横向移动 - services/wmiprvse生成新进程

这促使攻击者采用如PPID Spoofing等技术来绕过这些防御措施。

### 通过CreateProcessA进行欺骗
欺骗父进程的方法有很多种，本文重点介绍通过调用`CreateProcessA`函数实现的方法，这是最简单且最常用的方式之一。

`CreateProcessA`函数允许用户创建新进程，默认情况下会继承其父进程。该函数有一个名为`lpStartupInfo`的参数，允许用户自定义要使用的父进程。最初，这个功能用于Windows Vista中的UAC设置。

`lpStartupInfo`参数指向一个名为`STARTUPINFOEX`的结构体，其中包含`lpAttributeList`变量。在初始化时，可以通过`UpdateProcThreadAttribute`回调函数添加属性，特别是`PROC_THREAD_ATTRIBUTE_PARENT_PROCESS`属性，从而设置父进程。

这种方法也可以用于权限提升。Adam Chester在其博客中展示了如何利用此方法获取Windows系统权限：[Alternative methods of becoming SYSTEM](https://blog.xpnsec.com/becoming-system/)。

### 开始欺骗
最常见的传播方式是利用带有恶意宏的文档。当宏触发后，通常会启动新的进程，如cmd, PowerShell, regsvr32 和 certutil等。这种行为通常很容易被检测到。

攻击者可以通过`CreateProcessA`函数，以预期的父进程（如Explorer或cmd）启动有效负载。为了进一步避免使用常见的应用程序，可以使用DLL文件或内存注入来加载想要运行的有效负载。

为此，我们创建了一个基于Didier Stevens代码的PowerShell脚本，该脚本可以进行父进程欺骗并在其中注入一个DLL。如下图所示，可以看到正常进程`svchost.exe`启动了`RuntimeBroker.exe`。运行我们的PowerShell脚本后，同样从`svchost.exe`生成合法的`RuntimeBroker.exe`进程，然后注入并执行DLL有效载荷。

### 如何发现欺骗行为
上一节中，我们演示了通过`CreateProcessA`函数进行父进程欺骗的方法。虽然任务管理器或Process Explorer可以显示正在运行的进程及其欺骗的进程，但无法找出真正的进程ID。

Windows事件跟踪（ETW）是Windows中最好的取证工具之一，提供了系统上的实时数据流。特别是Microsoft-Windows-Kernel-Process模式提供了一些信息，可以帮助我们检测进程欺骗。如下图所示，可以看到从`winword.exe`（PID 9224）生成`rundll32.exe`（PID 5180）的过程：

在另一个示例中，我们执行了恶意的PowerShell脚本，并从`svchost.exe`（PID 4652）生成了`RuntimeBroker.exe`（PID 4976）。通过ETW观察，可以看到EventHeader ProcessId和ParentProcessID不匹配，实际的父ID为`winword.exe`（PID 9224）。

然而，大规模检测可能会出现误报情况，例如用户账户控制（UAC）和WerFault崩溃处理。为此，我们创建了一个Python脚本，使用pywintrace记录来自ETW的事件，并通过比较PID过滤一些事件以消除误报。

PowerShell脚本和检测脚本可以在[Github](https://github.com/countercept/ppid-spoofing)找到。

## 三、总结
本文演示了攻击者如何利用合法的Windows功能进行欺骗，绕过父子进程关系相关的检测。从防御的角度，我们也展示了如何通过ETW事件分析检测真正的父进程。这项研究表明，防御者必须突破当前界限，始终领先于攻击者一步。