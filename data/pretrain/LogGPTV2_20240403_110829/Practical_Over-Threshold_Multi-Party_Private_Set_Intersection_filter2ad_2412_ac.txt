note that previous applications of Cuckoo hashing to PSI [PSZ14, PSSZ15] have used a variant of Cuckoo
hashing that involves an additional stash (a place to put items when insertion fails). However, a stash renders
our scheme much less eﬃcient (every item in one party’s stash must be compared to every item of another
party). Instead, we propose a variant of Cuckoo hashing that avoids a stash by using 3 “primary” Cuckoo
hash functions, and then falling back to 2 “supplementary” Cuckoo hash functions when the ﬁrst 3 fail. We
empirically determine the parameters used in our hashing scheme to ensure that the hashing succeeds except
with the probability less than 2−λ. The details are in Appendix B.
9
Probability
Bin scale &
Max Bin Size
2−30
2−40
ζ1
ζ2
β1
β2
ζ1
ζ2
β1
β2
set size n
212
1.15
0.14
28
63
1.17
0.15
27
63
214
1.13
0.14
28
63
1.15
0.16
28
63
216
1.13
0.14
29
63
1.14
0.16
29
63
220
1.13
0.15
30
63
1.13
0.17
30
63
224
1.12
0.16
31
63
1.12
0.17
31
63
Table 2: Required number of bins m1 = nζ1, m2 = nζ2 to mapping n items using Cuckoo hashing, and
required bin size β1, β2 to mapping n items into m1 and m2 bins using Simple hashing.
Simple hashing. Using the same set of hash functions, the sender then maps his points {x1, . . . , xn}
into bins, with each item being mapped under all of the Cuckoo hash functions (i.e., each of the sender’s
items appears k times in the hash table). Using standard balls-and-bins calculations based on n, k, and m,
one can deduce an upper bound β such that no bin contains more than β items except with probability 1/2λ.
Denote by m1, m2 the number of bins used in 3-way “primary” Cuckoo hashing and 2-way “supplemen-
tary” Cuckoo hashing, respectively. Let β1, β2 denote the maximum bin size when using Simple hashing
to map n items to m1 and m2 bins with no overﬂow, respectively. The parameters m = m1 + m2 and
β ∈ {β1, β2} presented in Table 2. The details of how we obtained these numbers are given in Appendix B.
Now within each bin, the receiver has at most one item q and the sender has at most β, call them
{(x1, y1), . . . , (xβ, yβ)}. They can therefore run the basic OPPRF protocol on these inputs. Note that each
of the sender’s points (x, y) is mapped to several bins. The OPPRF in each of those bins will be programmed
with the same (x, y). That way, if the receiver does have some qi = x, then no matter which of the possible
bins it is mapped to in Cuckoo hashing, the receiver will receive the correct output y.
The formal description of this protocol is given in Figure 7. The protocol requires m invocations of a
single-query OPPRF, where m = O(n) is the number of Cuckoo hash bins.
In sum, we are able to evaluate OPPRF for large number of programmed points n and large number
of queries simply by having players hash their inputs into bins, and evaluate OPPRF per bin on small-size
instances.
Caveats. One subtlety in analyzing our construction has to do with the security deﬁnition for a pro-
grammable PRF. Recall that in that deﬁnition (Section 3.1), the programmed output (y values) are chosen
randomly. Yet in our protocol the sender programs diﬀerent bins with correlated outputs. In particular,
when an xi is mapped to several bins, the OPPRF in each bin is programmed with the same (xi, yi) point.
To deal with this, we must use the fact that the receiver is guaranteed to never query two bins on the same
q (corresponding to the fact that his Cuckoo hashing assigns each q to a unique bin).
5 Multi-Party PSI
(cid:84)
We now present our main result, an application of OPPRF to multi-party PSI. We use the following notation
in this section. We denote the n parties by P1, . . . , Pn, and use subscripts i and j to refer to individual
parties. Let Xi ⊆ {0, 1}∗ denote the input set of party Pi. The goal is to securely compute the intersection
m}. We use subscript
i Xi. For sake of simplicity, we assume each set has m items and write Xi = {xi
k to refer to a particular item xi
k.
1, . . . , xi
As discussed at the Introduction (cf. Section 1.3), our PSI protocol proceeds in two consecutive phases,
conditional zero-sharing and conditional reconstruction of secrets. Importantly, OPPRF is eﬃcient
even when run on large input sets, thanks to our use of Cuckoo hash as discussed in Section 4.
10
Input of S: n points P = {(x1, y1), . . . , (xn, yn)}, where xi ∈ {0, 1}∗, xi (cid:54)= xj and yi ∈ {0, 1}r
Input of R: Q = (q1, . . . , qt) ∈ ({0, 1}∗)t.
Parameters:
• Hash function h1, . . . , h5, number of bins m ∈ {m1, m2}, and max bin size β ∈ {β1, β2}, suitable
for our hashing scheme (Table 2)
Protocol:
1. R hashes items Q into m bins using the Cuckoo hashing scheme deﬁned in Section 4. Let BR[b]
denote the item in the receiver’s bth bin (or a dummy item if this bin is empty).
2. S hashes items {x1, . . . , xn} into m1 bins under 3 hash functions h1, h2, h3, and hashes items
{x1, . . . , xn} into m2 bins under 2 hash functions h4, h5. Let BS [b] denote the set of items in the
sender’s bth bin.
3. For c ∈ [1, 2], for each bin b ∈ [mc]:
to the maximum bin size βc
(a) S computes Pb = {(xi, yi) | (xi, yi) ∈ P and xi ∈ BS [b]}, then pads Pb with dummy pairs
opprf with inputs Pb for the sender and BR[b] for the receiver.
(b) Parties invoke an instance of F F,1,βc
(c) S receives output (kb, hintb), and R receives output (hintb, F (kb, hintb, BR[b])).
4. For each item qi ∈ Q, let zi = F (kb, hintb, qi) where b is the bin to which R has hashed qi. The
receiver outputs (hint1, . . . , hintm), (z1, . . . , zt)
Figure 7: Hashing-based OPPRF protocol
5.1 Conditional Zero-Sharing
if x ∈(cid:84)
k ∈ Xi with an additive secret share Si(xi
To achieve this, ﬁrst consider the case of two parties P1 and P2. For each item x1
We will ﬁrst describe the end goal of conditional zero-sharing and then discuss how we use multi-query OPPRF
of Section 4 to achieve it. At the end of this phase, each party Pi will have a mapping Si : Xi → {0, 1}∗ that
associates each of its items xi
k). We require the following property:
i Xi (i.e., x is in the intersection), then the corresponding shares {Si(x) | i ∈ [n]} will XOR to zero.
k ∈ X1, party P1 will
choose a random string sk and record the mapping S1(x1
k) = sk. Then the parties can use an instance of
k, sk) | k ∈ [m]}, and P2 acts
multi-query OPPRF as follows. P1 programs the OPPRF using points {(x1
k ∈ X2 a corresponding OPPRF
as receiver with input queries X2. As a result, P2 will obtain for every x2
output, which we will denote S2(x2
k). From the properties of an OPPRF, the mappings S1 and S2 have the
desired property. If the parties share an item x1
k) = sk, corresponding
to an XOR-additive sharing of 0. The properties of the OPPRF ensure that P2 does not know whether he is
receiving real shares or random values for any item.
k ∈ Xi, generating
k = 0. Then each pair of parties Pi and Pj use an instance of
k ) | k ∈ [m]}, and Pj acts as receiver with
is the share that is conditionally sent from party Pi to Pj pertaining
k ∈ Xj, the party has an
OPPRF output from every sender Pi, along with their own share sj,j
k) the XOR of all of
these values. It is easy to see that these Sj mappings satisfy the desired property. If some x is shared by all
parties, then all pairs of parties will exchange shares corresponding to that item. All shares generated by a
single party XOR to zero, so all of the Sj(x) values XOR to zero as desired.
a random additive sharing of zero: si,1
OPPRF as follows. Pi programs the OPPRF using points {(xi
input queries Xj. In other words, si,j
k
to item xi
k.
Now each Pj has acted as OPPRF receiver for all other parties. For each item xj
The case of n parties is similar. Each party Pi will act as dealer for each of their items xi
k ⊕···⊕ si,n
k, si,j
k then both will have S1(x1
k) = S2(x1
k . Denote by Sj(xj
11
Parameters: n parties P1, . . . , Pn.
Input: Party Pi has input Xi = {xi
Protocol:
1, . . . , xi
m} ⊆ {0, 1}∗
(cid:76)
j si,j
k = 0.
1. For all i ∈ [n] and all k ∈ [m], party Pi chooses random {si,j
| j ∈ [n]} values subject to
k
2. For all i, j ∈ [n], parties Pi and Pj invoke an instance of F F,m,m
opprf where:
• Pi is sender with input {(xi
• Pj is receiver with input Xj.
k ∈ Xj, let(cid:98)si,j
For xj
k ) | k ∈ [m]}.
k, si,j
k denote the corresponding output of Fopprf obtained by Pj.
3. For all i ∈ [n] and k ∈ [m], party Pi sets Si(xi
4. For i = 2 to n, parties Pi and P1 invoke an instance of F F,m,m
k) = si,i
opprf where:
k ⊕(cid:76)
j(cid:54)=i(cid:98)sj,i
k .
• Pi is sender with input {(xi
• P1 is receiver with input X1.
k, Si(xi
k) | k ∈ [m]}.
For x1
k ∈ X1, let yi
k denote the corresponding output for x1
k of Fopprf involving Pi.
5. Party P1 announces {x1
k ∈ X1 | S1(x1
k}.
i(cid:54)=1 yi
k) =(cid:76)
Figure 8: Multi-Party PSI Protocol
5.2 Conditional Reconstruction
The second phase of the protocol is a conditional reconstruction of secrets. In this phase party P1 acts
as a centralized “dealer.” For each item x ∈ X1 belonging to the dealer, he would like to determine whether
x is in the intersection. It suﬃces for him to obtain all Si(x) values from all the parties. However, since
some parties may not hold item x, they may not have a well-deﬁned Si(x) value.
This problem can again be solved with an OPPRF. Each party Pi programs an OPPRF instance on points
{(x, Si(x)) | x ∈ Xi}, and P1 acts as receiver with PRF queries X1. Hence, for each item x ∈ X1, dealer P1
learns an associated value yi from the OPPRF with party i. If x is indeed in the intersection, then we expect
i(cid:54)=1 yi = S1(x). Otherwise the left-hand-side will be a random value.
(cid:76)
5.3 Details and Discussion
A formal description of the protocol is in Figure 8.
k) = (cid:76)
Correctness. From the preceding high-level description, it is clear that the protocol is correct except
k ∈ X1 not in the intersection. Let Pi
k in their input set. That party will not program their OPPRF in Step 4
k is pseudorandom. Hence the probability that of a false positive
k is 2−(cid:96). By setting (cid:96) = λ + log2(m), a union bound shows that the probability of any item being
in the event of a false positive — i.e., S1(x1
be a party who did not have x1
on the point x1
involving x1
erroneously included in the intersection is 2−λ.
k. As a result, the term yi
k for some x1
i yi
Theorem 1. The protocol of Figure 8 is secure in the semi-honest model, against any number of corrupt,
colluding, semi-honest parties.
Proof. Let C and H be a coalition of corrupt and honest parties, respectively. To show how to simulate C’s