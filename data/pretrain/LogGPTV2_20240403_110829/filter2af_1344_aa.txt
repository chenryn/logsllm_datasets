# PHP下的RCE总结
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
为啥加了PHP的前缀，因为Java和PHP从运行机制上讲就不是有任何相同点的东西；无论是从编程还是免杀还是代码审计….
更何况Java安全近期才兴起，资料也极度匮乏
扯远了，本笔记就综合一下各大佬的笔记再加上自己的干货~梳理一下PHP命令执行的相关知识
记得区分一下：
  1. **通过代码执行漏洞来调用能执行系统命令的函数。**
  2. **通过命令执行漏洞直接执行命令。**
## Apache安装（如果你不用PHPStudy的话）
官网去[下载](https://www.apachehaus.com/cgi-bin/download.plx)，我下的时候是最新版的2.4
然后记得去`主目录/conf/httpd.conf`修改下配置文件，修改为你的Apache主目录
可以到`主目录/bin`下执行httpd命令，测试配置文件是否合法
    httpd -t
没问题的话就可以开始安装Apache服务了；n参数后面代表你自定义的服务名称，你随意
这种安装服务类基本都需要管理员权限；嫌弃麻烦可以自己建一个，用管理员权限执行cmd命令`net user administrator
/active:yes`
然后再登陆就发现多了个管理员用户啦
    httpd -k install -n Apache2.4
安装成功后，再开启Apache服务，访问`http://localhost`出现下图就OK啦
    httpd -k start  #启动
    httpd -k stop   #停止
    sc delete Apache2.4 #卸载
然而后面基本都采用PHPStudy 2018的集成环境，方便（新版的设置功能差了很多，不用）
## 安全狗与D盾安装
安全狗Apache版 V4.0.28330，[下载地址](https://www.downzaiba.com/rjxz/22272.html)
安全狗安装稍微特殊一点；首先PHPstudy的网络服务都关掉，然后到PHPstudy的Apache目录下，把Apache服务安装到系统：
    httpd -k install -n Apache2.4
    httpd -k start
和下图一样就好啦！服务里面有Apache2.4，且开启服务没问题，PHPstudy2018里面也是绿点就OK:smile:
然后就可以一路顺畅安装啦~安装完记得有几个选项要关掉：
自动更新
云安全计划
D盾V2.1.5.4，下载[地址](https://patch.ali213.net/showpatch/154705.html)；没啥特别的，EXE就能用
## 系统命令执行函数
### **exec()**
    string exec ( string $command [, array &$output [, int &$return_var ]] )
**$command** 是要执行的命令
**`$output`** 是获得执行命令输出的每一行字符串， **`$return_var`** 用来保存命令执行的状态码（检测成功或失败）
**执行无回显，默认返回最后一行结果**
### **system()**
    string system ( string $command [, int &$return_var ] )
**$command** 为执行的命令， **& return_var**可选，用来存放命令执行后的状态码
**执行有回显，将执行结果输出到页面上**
### **passthru()**
    void passthru ( string $command [, int &$return_var ] )
和 **system函数** 类似， **$command** 为执行的命令， **& return_var**可选，用来存放命令执行后的状态码
**执行有回显，将执行结果输出到页面上**
### **shell_exec()**
    string shell_exec( string &command)
**& command**是要执行的命令
**函数默认无回显，通过 echo 可将执行结果输出到页面**
###  **反引号** `
**shell_exec() 函数实际上是反引号的变体，当禁用shell_exec时，也不可执行**
在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回
###  popen()
    resource popen ( string $command , string $mode )
函数需要两个参数，一个是执行的命令 **`command`** ，另外一个是指针文件的连接模式 **`mode`** ，有`r`和`w`代表读和写。
函数不会直接返回执行结果，而是返回一个文件指针，但是命令已经执行。
**popen()打开一个指向进程的管道，该进程由派生给定的`$command`命令执行而产生。返回一个和`fopen()`函数所返回的类似文件指针，只不过它是单向的（只能用于读或写）并且必须用`pclose()`来关闭。此指针可以用于`fgets()`，`fgetss()`和`fwrite()`**
    > 1.txt', 'r' ); ?>
###  proc_open()
定义如下
    resource proc_open ( 
    string $cmd , 
    array $descriptorspec , 
    array &$pipes [, string $cwd [, array $env [, array $other_options ]]] 
    )
一个例子
###  pcntl_exec
    void pcntl_exec( string $path[, array $args[, array $envs]] )
pcntl是php的多进程处理扩展，在处理大量任务的情况下会使用到，pcntl需要额外安装。
\$path为可执行程序路径 (/bin/bash)
\$args表示传递给$path程序的参数； 例如pcntl_exec(“/bin/bash” , array(“whoami”));
###  ob_start
    bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )
此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用
ob_end_flush() 函数。
可选参数 $output_callback如果被指定。当输出缓冲区被( ob_flush(), ob_clean()
或者相似的函数)送出、清洗的时候；或者在请求结束之际该回调函数将会被调用。
当调用时，输出缓冲区的内容会被当做参数去执行，并返回一个新的输出缓冲区作为结果，并被送到浏览器。
安全狗 | D盾  
---|---  
1 个安全风险 assert 变量函数 | 级别 5 变量函数后门  
此时我们使用 substr() 函数稍微截断一下：
安全狗 | D盾  
---|---  
0 个安全风险 | 级别 4变量函数后门(assert)  
**strtr()**
    strtr(string,from,to)
strtr() 函数转换字符串中特定的字符。
参数 | 描述  
---|---  
_string_ | 必需。规定要转换的字符串。  
_from_ | 必需（除非使用数组）。规定要改变的字符。  
_to_ | 必需（除非使用数组）。规定要改变为的字符。  
_array_ | 必需（除非使用 _from_ 和 _to_ ）。数组，其中的键名是更改的原始字符，键值是更改的目标字符。  
依然对字符串进行简单地处理一下：
此时就已经过掉安全狗了，D 盾检测级别降到了 1 级，检测结果如下：
安全狗 | D盾  
---|---  
0 个安全风险 | 级别 1 可疑变量函数  
**substr_replace()**
    substr_replace(string,replacement,start,length)
substr_replace() 函数把字符串 string 的一部分替换为另一个字符串 replacement。
参数 | 描述  
---|---  
_string_ | 必需。规定要检查的字符串。  
_replacement_ | 必需。规定要插入的字符串。  
_start_ | 必需。规定在字符串的何处开始替换。 **正数** – 在字符串中的指定位置开始替换; **负数** –
在从字符串结尾的指定位置开始替换; **0** – 在字符串中的第一个字符处开始替换  
_length_ | 可选。规定要替换多少个字符。默认是与字符串长度相同。 **正数** – 被替换的字符串长度; **负数** –
表示待替换的子字符串结尾处距离 _string_ 末端的字符个数。 **0** – 插入而非替换  
安全狗 | D盾  
---|---  
0 个安全风险 | 级别 1 (可疑)变量函数  
**trim()**
    trim(string,charlist)
trim() 函数移除字符串两侧的空白字符或其他预定义字符。
参数 | 描述  
---|---  
_string_ | 必需。规定要检查的字符串。  
_charlist_ | 可选。规定从字符串中删除哪些字符。如果被省略，则移除以下所有字符 `\0` – NULL; `\t` – 制表符; `\n` –
换行; `\x0B` – 垂直制表符; `\r` – 回车; **空格**  
安全狗 | D盾  
---|---  
0 个安全风险 | 级别 4 变量函数后门  
###  函数绕过
函数可以把敏感关键词当做参数传递。
安全狗 | D盾  
---|---  
1 个安全风险 assert变量函数 | 级别 2 变量函数后门  