# PHP下的RCE总结

## 译文声明
本文为翻译文章，具体内容和含义请以原文为准。

## 前言
本文专注于PHP环境下的远程代码执行（RCE）漏洞。Java和PHP在运行机制上存在显著差异，因此在编程、免杀及代码审计等方面也有所不同。此外，关于Java安全的资料相对较少。本文综合了多位专家的笔记，并结合个人经验，梳理了与PHP命令执行相关的知识。请注意区分以下两种情况：
1. **通过代码执行漏洞调用能够执行系统命令的函数。**
2. **通过命令执行漏洞直接执行命令。**

## Apache安装（如果你不用PHPStudy的话）
1. 从[官网](https://www.apachehaus.com/cgi-bin/download.plx)下载最新版本的Apache（例如2.4）。
2. 修改`主目录/conf/httpd.conf`文件中的配置，使其指向你的Apache主目录。
3. 在`主目录/bin`下执行`httpd -t`命令，检查配置文件是否合法。
4. 如果没有问题，可以开始安装Apache服务。使用管理员权限执行以下命令：
   ```sh
   httpd -k install -n Apache2.4
   ```
5. 安装成功后，启动Apache服务：
   ```sh
   httpd -k start
   ```
6. 访问`http://localhost`，如果出现预期页面则表示安装成功。
7. 停止和卸载Apache服务的命令分别为：
   ```sh
   httpd -k stop
   sc delete Apache2.4
   ```

为了方便起见，后续部分将使用PHPStudy 2018集成环境。

## 安全狗与D盾安装
### 安全狗
- 下载地址：[安全狗Apache版 V4.0.28330](https://www.downzaiba.com/rjxz/22272.html)
- 关闭PHPstudy的所有网络服务。
- 到PHPstudy的Apache目录下，将Apache服务安装到系统：
  ```sh
  httpd -k install -n Apache2.4
  httpd -k start
  ```
- 确认服务中包含Apache2.4且服务已正常启动。
- 安装过程中关闭自动更新和云安全计划选项。

### D盾
- 下载地址：[D盾V2.1.5.4](https://patch.ali213.net/showpatch/154705.html)
- 直接使用EXE文件进行安装。

## 系统命令执行函数
### `exec()`
```php
string exec ( string $command [, array &$output [, int &$return_var ]] )
```
- **$command**：要执行的命令。
- **$output**：存储命令输出结果的每一行字符串。
- **$return_var**：保存命令执行的状态码（检测成功或失败）。
- **特点**：默认无回显，返回最后一行结果。

### `system()`
```php
string system ( string $command [, int &$return_var ] )
```
- **$command**：要执行的命令。
- **& return_var**：可选，用于存放命令执行后的状态码。
- **特点**：有回显，将执行结果输出到页面。

### `passthru()`
```php
void passthru ( string $command [, int &$return_var ] )
```
- 类似于`system()`函数。
- **特点**：有回显，将执行结果输出到页面。

### `shell_exec()`
```php
string shell_exec( string &command)
```
- **& command**：要执行的命令。
- **特点**：默认无回显，可通过`echo`将执行结果输出到页面。

### 反引号 ``
- `shell_exec()`函数实际上是反引号的变体。
- 当禁用`shell_exec()`时，反引号也无法执行。
- PHP会尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回。

### `popen()`
```php
resource popen ( string $command , string $mode )
```
- **$command**：要执行的命令。
- **$mode**：文件指针的连接模式（`r`表示读，`w`表示写）。
- **特点**：打开一个指向进程的管道，返回一个类似`fopen()`函数的文件指针，必须用`pclose()`关闭。

### `proc_open()`
```php
resource proc_open ( 
    string $cmd , 
    array $descriptorspec , 
    array &$pipes [, string $cwd [, array $env [, array $other_options ]]] 
)
```
- **$cmd**：要执行的命令。
- **$descriptorspec**：描述符规范数组。
- **$pipes**：管道数组。
- **$cwd**：工作目录。
- **$env**：环境变量数组。
- **$other_options**：其他选项。

### `pcntl_exec()`
```php
void pcntl_exec( string $path[, array $args[, array $envs]] )
```
- **$path**：可执行程序路径。
- **$args**：传递给程序的参数。
- **$envs**：环境变量数组。
- **特点**：处理大量任务时使用的多进程扩展，需要额外安装。

### `ob_start()`
```php
bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )
```
- **$output_callback**：可选，当输出缓冲区被送出或清洗时调用的回调函数。
- **$chunk_size**：可选，缓冲区大小。
- **$erase**：可选，是否擦除缓冲区。
- **特点**：打开输出缓冲，脚本不会立即输出内容，而是存储在内部缓冲区中。使用`ob_end_flush()`函数输出缓冲区内容。

## 函数绕过
可以通过将敏感关键词作为参数传递来绕过某些安全检测。例如：

| 工具 | 检测结果 |
| --- | --- |
| 安全狗 | 1 个安全风险 assert 变量函数 |
| D盾 | 级别 5 变量函数后门 |

使用`substr()`函数稍微截断一下：
| 工具 | 检测结果 |
| --- | --- |
| 安全狗 | 0 个安全风险 |
| D盾 | 级别 4 变量函数后门 (assert) |

### `strtr()`
```php
strtr(string, from, to)
```
- **$string**：要转换的字符串。
- **$from**：要改变的字符。
- **$to**：要改变为目标的字符。
- **特点**：转换字符串中特定的字符。

### `substr_replace()`
```php
substr_replace(string, replacement, start, length)
```
- **$string**：要检查的字符串。
- **$replacement**：要插入的字符串。
- **$start**：替换的起始位置。
- **$length**：要替换的字符长度。
- **特点**：替换字符串的一部分。

### `trim()`
```php
trim(string, charlist)
```
- **$string**：要检查的字符串。
- **$charlist**：要删除的字符列表。
- **特点**：移除字符串两侧的空白字符或其他预定义字符。

通过这些方法，可以有效绕过一些常见的安全检测工具。