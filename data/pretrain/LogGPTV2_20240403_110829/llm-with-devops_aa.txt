探索软件开发新⼯序 
LLM 赋能研发效能提升
Thoughtworks / 谢保⻰ & ⻩峰达（Phodal）
谢保⻰
● Thoughtworks 专家级咨询师，Thoughtworks 中国区的⼯程效能/DevOps解决⽅案的负责⼈，CAC(China Agile Coach) 专业敏捷教练，Exin DevOps Master 认 证讲师。
● 拥有 15+ 年软件⼯程从业经验，⽬前主要聚焦于国内⾦融客户的敏捷、DevOps 转型⼯作以及研发效能相关咨 询⼯作。对敏捷项⽬管理、研发效能度量与提升、⼤型 	⻩峰达（Phodal）
• 开坑，开到填不完的知名开源挖坑选⼿： 
	• AI 相关开源项⽬：ClickPrompt、ChatFlow、Unit Mesh、AutoDev• AI 相关⽂章：《理解 Prompt》、《Prompt 编写模式》、《Prompt 即代码》、《AI 研发 	提效的正确姿势：开源 LLM + LoRA》、《上下⽂⼯程：基于 Github Copilot 的实时能⼒分 	析与思考》、《⼤语⾔模型友好的 API》等。
• 开源架构治理⼯具 ArchGuard 核⼼开发 & 架构师
• Thoughtworks 技术专家，开源有 Java 重构分析⼯具 Coca、Mooa 微前端框 	架、Ledge 平台等
企业组织转型等有丰富经验。
| 企业 AIGC 投资策略 | 从头开始构建 | ⻔ |
|---|---|---|
| 不同 LLM 协作⽅式的成本 |从头开始构建 |槛 |
较
重新训练模型	⾼
微调开源模型
微调现有模型
Multimodal Prompting
| Zero-shot Prompting | Dynamic Prompting | ⻔ ||---|---|---|
| Zero-shot Prompting |Dynamic Prompting |槛 |
较
| Few-shot Prompting | Langchain  | 微调 | 重新训练或从头开始构建 | 低 |
|---|---|---|---|---|
| Prompting ⼯程 |Langchain  |微调 |重新训练或从头开始构建 |Credit: Zichuan Xiong |
⽬录
应⽤ 1. 研发效能提升遇到的挑战
| 端到端应⽤（不包含专有模型） | 端到端应⽤（不包含专有模型） | 专有模型 | 微调模型 | 2. | ○ | LLM 在研发效能带来的新机遇 |
|---|---|---|---|---|---|---|
| 端到端应⽤ |端到端应⽤ |专有模型 |微调模型 |2. |○ |LLM 在研发效能带来的新机遇 || 端到端应⽤ |端到端应⽤ |专有模型 |微调模型 |2. |○ |梳理研发流程寻找突破点 |
| ⾯向最终⽤户的应⽤ |⾯向最终⽤户的应⽤ |专有模型 |微调模型 |2. |○ |梳理研发流程寻找突破点 |
| （含专有模型） |闭源基础模型 |专有模型 |微调模型 |2. |○ |新机遇带来的新挑战 |
| 提供 API 的 |提供 API 的 |构建全新的专有模型 |⾯向特定领域微调的模型 |2. |○ |新机遇带来的新挑战 |
| 提供 API 的 |提供 API 的 |开源基础模型 |开源基础模型 |3. |○ |LLM  + ⼯序：探索与构建路径 |
| ⼤规模预训练模型 |⼤规模预训练模型 |开源基础模型 |开源基础模型 |3. |○ |LLM  + ⼯序：探索与构建路径 |
| ⼤规模预训练模型 |⼤规模预训练模型 |开源基础模型 |开源基础模型 |3. |○ |Discover 阶段：流程⼯程与 “语⾔” ⼯程 || 云平台 |云平台 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |Discover 阶段：流程⼯程与 “语⾔” ⼯程 |
| 云平台 |云平台 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |Define     阶段：数据⼯程与 Prompt ⼯程 |
| 云平台 |云平台 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |Delivery  阶段：上下⽂⼯程与平台⼯程 |
| 在云部署模型中向开发⼈员公开的计算硬件 |在云部署模型中向开发⼈员公开的计算硬件 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |总结与展望 |
| 专⽤硬件 |专⽤硬件 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |LLM 重塑⼯具平台 |
| 专⽤硬件 |专⽤硬件 |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |LLM 对⼈才和组织结构的影响 || 针对模型训练和推理⼯作负载优化的加速器芯⽚ |针对模型训练和推理⼯作负载优化的加速器芯⽚ |带训练权重发布的模型 |带训练权重发布的模型 |4. |○ |LLM 对⼈才和组织结构的影响 |
修改⾃：
研发效能提升遇到的挑战
5
从极限编程到研发效能 
什么变了？什么没有变？——⼯具变的成熟，思想与内核的实践没有变
| 1996  | 2009~2010  | 2020  |
|---|---|---|
| 极限编程 |2009~2010  |研发效能 |
| 极限编程 |DevOps 和持续交付 |研发效能 |
《Adapting Agile and DevOps Principles for Business Agility》
6
容器化
经典⽅法
局限性
传统的⼯程实践依赖于⼈能⼒和意愿，提升
个⼈能⼒是⼀个漫⻓的过程且难以标准化。
如果重写⽐重构快？
Martin Folwer如果重写⽐重构快？
Martin Folwer
Thoughtworks ⾸席科学家，著有《重 
构：改善既有代码的设计》《分析模 
式：可复⽤的对象模型》《领域特定 
语⾔》《企业应⽤架构模式》等经典 
著作
8
LLM 在研发效能
带来的新机遇
9
SDLC Co-piloting with AI 
基础模型与⼈⼯智能⽣产⼒⼯具正在重塑技术⼈员 	基础模型 的⼯作⽅式。
| 现在，类似于 ChatGPT 和 Microsoft Copilot 这样的⼈⼯ | 运 | Research | 开源 |
|---|---|---|---|
| 智能突破正在彻底改变软件⾏业。 |运 |Marketing |开源 |
| 基于⼈⼯智能的⼯具与基础⼤语⾔模型可以增强软件开发 |营 |Customer  |开源 |
| 基于⼈⼯智能的⼯具与基础⼤语⾔模型可以增强软件开发 |营 |Support |开源 || 在设计、需求、测试、发布和运维等各个环节中的能⼒， |营 |Support |开源 |
提⾼质量和效率。
Operations
| 产 | Ideation | 交 | Observability  | 闭源 |
|---|---|---|---|---|
| 产 |Ideation |付 |Observability  |闭源 |
| 品 |Prototype |付 |Host |闭源 |
| 品 |Prototype |和 |Host |闭源 |
| 设 |Prototype |和 |Host |闭源 |
| 设 |Prototype |运 |Host |闭源 |
| 计 |Research |运 |CI/CD |闭源 |
| 计 |Research |维 |CI/CD |闭源 |
Design
| 需 | Facilitation | 开 | IDE |
|---|---|---|---||---|---|---|---|
| 求 |Facilitation |开 |Commit |
| 分 |Documentation |发 |Commit |
| 析 |Documentation |发 |Copilots |
Collaboration
Documentation
梳理研发流程寻找突破点 
需要拆到⾜够⼩的⼯序，才能看到明显的效果
| 产品设计 | 产品设计 | 开发计划 | 建模 | 架构设计 | API 设计 | 详细设计 | 开发 | 编码后 |
|---|---|---|---|---|---|---|---|---|
| 产品设计 |特性设计 |开发计划 |建模 |架构设计 |API 设计 |详细设计 |编码 |编码后 |
| ⽤户调研 | 功能细分 | 验收条件 | 事件⻛暴 | 时序图设计 | API 定义 | 代码设计 | 代码⽣成 | 代码检视 ||---|---|---|---|---|---|---|---|---|
| ⽤户调研 |功能细分 |验收条件 |事件⻛暴 |组件图设计 |API 定义 |代码设计 |单元测试⽣成 |提交信息 |
| 产品创新 |UX Design |优化级 |领域模式 |组件图设计 |API 定义 |代码设计 |单元测试⽣成 |提交信息 |
| 产品定义 |⾮功能需求 |迭代计划 |限界上下⽂ |设计模式 |API 定义 |代码设计 |单元测试⽣成 |提交信息 |
| 原型 |⾮功能需求 |发布计划 |限界上下⽂ |⽂档 |API 定义 |代码设计 |单元测试⽣成 |提交信息 |