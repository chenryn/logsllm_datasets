参与者就对应到每条线程（本书没有出现TSObjectSet 参与者）。java.lang.ThreadLocal
扩展思考方向的提示
线程本米就有其特有的区域，就是存放方法局部变量的堆栈。在方法里分配的
one:client
而[POSA2]中,TSObjectProxy 参与者拥有多个 TSObjectSet 参与者，TSObjectSet 
two:client
（多个Client 参与者会访间自己的TSObject 参与者）
图11-10Thread-Specific Storage Pattern 的川顺序图
request
.1SObiect
one:TSObject
rwo:TSObyect
getTSOhject
getTSObject
collection
1el9051:
reque
one:TSObject
5
two:TSObject
---
## Page 301
将特有信息效在线程南(thread-internal)
易阅读的危险性。囚为只阅读线程的原始程序代码，并无法得知其他类中也存放有
2 中是ClientThread类），所以可以适用丁任何线程。相对地，也可能会有线程类不
使用将线程特有的信息放外面的方式时，不需要修改表示线程的现有类（范例程序
线程不会带着保管箱到处跑。
java.lang.ThreadLocal 的实例里。
有 TSLog 的实例。范例程序 2中，所有 TSLog 的实例都存放在 Log 类所拥有的
放置线程特有信息的地方
补充说明：局部变量
会消失。而 ThreadLocal 则是与方法调用无关，为线程分配特有空间的类。
线程的信息。
将特有信惠效在线程外（thread-external）
例，我们曾经在Immutable Patern（第2章）的练习问题 2-4讨论过了。
但是，varl 所存放的 givenobj就有可能被其他线程所访问了：像这种情况的范
是以方法参数的形式，从外面传进来的：
问，但局部变量所存放的实例，就可能由其他线程访问了。因为这个实例可能
像这样，将线程特有的信总放在线程外的方式，称为线程外（thread-extermal)。
请注意上述的说明是单纯化之后的结论：虽然局部变量无法由其他线程访
假设现在建立一个 Thread类的子类MyThtead。我们声明的 MyThread 的字段，就
范例程序2中所出现的线程特有信息，就是 TSLog 的实例。范例程序2中，所
放置线程特有信息的“地方”，有两种：
这时，局部变量varl、var2，都不可能被调用 method方法以外的线程访问.
1(qouaate ioa[qo)poyneu pton
下面依次解说：
（2）线程内（thread-intermnal）
（1）线程外（thread-extcrmal）
cbject. var2 = new Object;
Objecr. varl = givenobj;
Thread-Specific Storage-
一每个线程的保管箱
---
## Page 302
JavA务线程质街模武
的 throughput 会比起使用 Single Threaded Execution Patterm（第1章）时来得高。但
throughput的提升取决于实现
不该被共享的 TSObject 参与者。
将 TSObject 参与者分配给线程以后进行。也就是使用 TSObjectProxy 参与者来分配
Storage Pattern中，多个线程所共享的是TSObjectProxy参与者，实际的工作则是在
TSObjectCollection 参与者）分配 TSObject 参与者给每个线程。Thread-Specific
访问的，是TSObjectProxy参与者。而这个TSObjectProxy参与者会（使用
西。Thread-Specific Storage Patern 里没有出现共享互斥，是因为没有共享的东西
288
(SharedResource 参者）。
ExecutionPatterm（第1章）中，我们以SharedResource参与者来表示这个共享的东
存在有“共享的东西”，因为共享互斥为了保护共享的东西。在Single Threaded
这是非常方便的架构。
执行性能偏低，所以要力求将共享互斥的范围尽可能缩小。
书中，学过对线程进行共享互斥，使共享的实例不会损坏，但又知道共亨互斥会使
序设计中，共享互斥是很重要的，但要确实现到共享互斥并不容易。我们在这一本
再换个说法，可说是不用担心被其他线程擅自乱动的。
好像文的，其实也可以说成是“线程自己的”、“线程每个人各自专属的”。意即，
不必担心被其他线程访问
有信息存放在线程内的方式，就像是拿在自己手上一样。
TSObjectCollection 参与者里)。
是线程特有的信息。这时，我们说是将线程特有的信息放在线程内（tharead-intemal)。
而且绝对会被其他线程碰到。但是，Thread-Specific Storage Pattern 出现的参与者，
Thread-Specific Storage Patterm 并没有进行共享互斥。可能会有人认为这样程序
请再看一次 Thread-Specific Storage Pattern 的类图（见图 11-8）。会被多个线程
在这里我们更进--步思考。仔细－-想，需要对线程进行共享互斥，绝对是因为
请仔细思考这·点，“其他线程无法擅自乱动”是很重要的性质。虽说多线程程
将特有信息存放在线程外的方式，就像是自己所有，
thread-specific storage是“线程独有的内存空间”的意思。“线程独有”说起来
我们使用“拥有”这个词，可能表示“所有”，也可能表示“带着”。我们说我
这个对象（具体来说是范例程序2的TSLog的实例）会为每个线程分别分配，
Thread-Specific Storage Patterm 提供了以线程为键值，访问线程独有对象的机
，但没有带在身上；而将特
---
## Page 303
Singleton Pattern (参考附录 E [GoF]IYuki01])
会使 context 出现异常，而是造成现在的 bug 的真正原因，
但是，如果使用了context，解决起来就困难多了。因为程序以前的行为，也有可能
给方法的数据是否正确时，就会尝试将参数的值进行合法性判断并输出显示出来。
的危险性，跟全局变量的危险性差不多。
单化。可是相对的，可能带来识别程序使用到的信息变得暖味模糊的危险性。context
接库指示“现在调用的方法，都请在这个context来处理”。context 可使程序结构简
坐标值、坐标系、单位、颜色、线段粗细、面笔类型等，非常多的信息。为了设法
供的方法，通常自变量都有数量较多的倾向。这是因为就光要画出一条线，就需要
这会使处理时需要的信息躲过程序员的眼睛，
线程。也就是说，线程相关的信息，不需要以白变量传入。这是在程序小加入context
（前后文：配置；前后关系）的概念，context虽然很方便，但也具有危险性，因为
隐藏context的危险性
等。可避免程序出现死锁的危险性。
synchronized，或是实现Guarded Suspension Patterm（第3章）时，写错警成条件等
体悟了。而（2）则是避免白实现 Single Threaded Execution Patterm 时忘记加
的是程序的复用性：
TSObjectCollection参者取得 TSObject 参与者，也要花一些时间。
与者里，另外，通过TSObjectProxy参与者调用方法时，每次都要从
是，
相关Pattern
context 的概念，在计算机绘图处理时常常用到。与计算机绘图有关的链接库提
当我们I要寻找bug 发生的原因时，会紧盯信息的流程追踪。例如为了检查传递
这并不是绝对的。就像前面所说，互斥控制可能会隐藏 TSObjectCollection 参
Singleton Patterm 可以川来保证只建立出1个实例。
关于（1），相信读者看过范例程序1改成范例程序2所需要作的操作，就有所
（2）具享直斥不在表而上出现，可避免犯错。
（1）不需要改变程序的结构：
Thread-Specific Storage
一每个线程的保管箱
11载
---
## Page 304
主体与客体
式。这一章的进阶说明，就要解释这两者的差异，
理者的部分，使用了 Proxy参与者。
Thread-Specific Storage Pattern 中，TSObjectProxy 参与者担任 TSObject 参与者的代
Proxy Pattern（参考附录E[GoF][Yuki01]）
这个空间的，只有--个线程，所以不需要使用 Single Threaded Execution Patterm 进
Single Threaded Execution Pattern （第 1 章)
行共享五斥。
是存放在保管箱里的信息，能够打开保管箱的，也只有线程本身。
Worker Thread Pattern（第8章）
线程为单位的 Singleton（附录E[Lea]的说法）。
进阶说明：Actor-based 与 Task-based
Proxy Patterm 可以不更改对象的接口（API），但更改对象的访问方式。
纠装模型玩具时，下列两者都是必要的：
线程与线程之间使用信息的关系，可分为 Actor-based 与 Task-based 两种思考模
Thread-Specific Storage Patterm 给每个线程自己独自拥有的空间。因为能够访问
●进行工作所需的信息
●用来进行工作的线程
那么，现在想要使用线程进行某些工作时：
·“套模型（说明书和零件）
●组装模型的人
  as s  n    
WorkerThreadPattem 中，每个工人线程做完--件工作后就重复使用于下一件工作.
只有组装模型的人，或是只有一套模型，都无法组装出模型。
O Using ThrcadLocal to implerment a per-thread Singleton
下列的网页也有相关数据：
http://www-106.ibm.com/developerworks/java/library/j-threads3.html
---
## Page 305
进行。这个开发方式，可使巨大的任务能在轻巧的线程之间往来。
里我们又称它为task（任务）。任务内含有足够的信息，所以任务可以由任何线程来
信息放在线程之间所传递的实例里。并不是只有数据，包括用来执行工作的方法，
Task-based 的思维
段中。这就是在建立“小型的actor”。
来的信息进行处理：改变白己的内部状态。这种线程通常称为 actor（操作者）。
状态）。这样-·来，可降低线程之间需要传递的信息。每个线程会使用其他线程所传
Actor-based 的思维
两种开发方式：
我们可建立.Thread类的子类，并定义自已的字段，将.I.作相关的信息都放入字
这种开发方式最典型的就是Worker Thread Pattern（第8章）。
第 12章所要学的 Active Object Pattem，就是一种操作者。
Actor-based开发方式中，代表线程的实例，会拥有进行工作所需的信息（context、
●Task-based注重客体
●Actor-based 注重主体
我们可以将工作时需要的信息，定义在implerments Runnable 的类里，再定义 run
Task-based 的开发方式，就是不将信息（context、状态）放到线程里。而是把
Task-based，用一句话说，就是“偏重于I.作”的开发方式。
class Actor extends Thread {
Actor 长得大概像这样：
所谓Actor-based，用一句话说，就是“偏重于线程”的开发方式。
设计使用到线程的程序时，会因为重点放在“主体”与“客体”的不同，出现
两者兼具才行。
·进行某件事所需的“客体”
·进行某件事所需的“主体”
无论是拼装玩具模型，或是线程进行工作，都需要
两者都是必要的。
public void run() {
操作者的内部状态
.
从外部取得任务，改变自己内部状态的循环
 Thread-Specific Storage-
每个线程的保管箱
11章
---
## Page 306
TSObjecy参与者一定会由特定的线程调用，这个部分也不需要互斥控制，关于多线
292
取得现在的线程所对应的TSObject 参与者。而将工作委托给这个TSObject 参与者
TSObjectCollection参与者。TSObjectProxy 参与者会使用 TSObjectCollection参与者
外，为了管理“Client参与者→TSObject参与者”的对照表，又加上
使对象丧失安全性，或是发生死锁、使线程丧失生命性。
程环境下执行。这时，我们又不想修改使用端的线程，也不能改变对象的接口（API)。
的[Lea]。
之间传递”的状况，
是在一个程序里，两者也可能各占一定比例，--般来说，会是“task 在一群 actor
实际上两个开发方式是混用的
补充说明：java.util.Timer 类与 java.util.TimerTask 类
给线程后，
像这样，不需要修改使用端的线程，也不需要修改对象的接口（API)。而目，
重点回顾
问后要作的事，或是定期要执行的操作。
接口，可由 java.util.Timer 类调用。java.util.TimerTask 类中可以记载在一定时
但是，要对线程进行共享上斥，以支持多线程，是很困难的。一不小心就可能
另外，
java.util.TimerTask 就是一个 Task-based 的类。这个类实现了 java.lang.Rumnable
并建立与TSObject 参与者具有相同接口（API）的TSObjectProxy 参与者。
这时就使用Thread-Specific Storage Pattermn。在此将目的对象当作TSObject 参与
手边有一个假定单线程作为执行环境的对象。现在我们想将这个对象放在多线
这一章我们学习了 Thread-Specific Storage Patterm;
Class Task impiements Runnable {
Actor-based 与 Task-based 的分类，是 Doug Lea 所提出的。详见附录 E
，工作就能够被执行了。任务长得大概像这样：
public void run() {
执行任务所需的信息
执行任务所需的处理内容
---
## Page 307
[我们希望把构造器被调用的操作记录在 log 文件里，故将范例程序 2 的
回请修改范例程序 2，使线程在结束前可以不需要关闭 log。也就是说，在
关于范例程序2、请回答下列问题：
可能对程序带来不易阅读的危险。
程的部分，则隐藏在TSObjectCollection参与者里。
作。
练习问题
Java 语言中，java.lang.ThreadLocal类就扭任：了 TSObjectCollection 参与者的工
这就足 Thrcad-Specific Storage Patterm,
问题11-3（线程的终止处理）
不过，使用 Thread-Specific Slorage Pattem，等于是对程序引进 context 概念，
然而，实际执行时却发现 Alice-log.txt、Bobby-log.txt、Chris-log.txt 的内容都没
ClicntThread类（List 11-5）修改成List 11-7的样予。
问题11-4（构造器）
线程在结束时，就会白己关闭掉 log文件。
ClientThread类单，可以不需要明确地执行
问题11-2（不需要synchronized的理由）
问题11-1（基础知识的确认）
Lcg.close{);
请回答×。
解答靖见附录A
那么，就进入练习间题吧，
（1）请说明TSLog 类的 println 方泓与 close 方法不需要 synchronized 的理由。
（6）产生3个 Log 的实例。
（5）产牛3个TSLog的实例，
（4）ThreadLocal的get方法会被调川3次。
（3）ThreadLocal的 set方法被调用出来3次。
（2）p/3个PrintWriter的实例。
（1）产生3个ThreadLocal的实例。
Thread-Specific Storage--每个线程的保管箱
293
---
## Page 308
Java移线程政研情式
请举例说明 java.lang.Thread 类在线程内（thread-internal）所拥有的线程特有的
信息。
问题11-5（thread-internal 信息的范例）
public class ClientThread extends Thread f
. List 11-7 .
public Clientrhread(String name) f
System.out-println(getName() + " END") ;
Log.clcse();
for (int i = 0; i < 10; i++)
 System.out.println(getName() + " BEGIN") ;
Log.println("constructor is called.");
 super(name);
)catch (interruptedException e) [
修改后的 ClientThread 类（ClientThread.java）
Thread.sleep(l00) ;
---
## Page 309
Active Object
主动对象
接受异步消息的
第12章
---
## Page 310
字符串（displayString)”两个功能（可处理两种异步消息）的“上动对象”。
DispiayClientThread、ActiveObjectFactory 等类。顺序图则如图12-2 所示。
public的类与接口可以从activeobject包的外面参考，
activeobject 包里。凡是 activeobject 包里public的类与接口，在表格里以粗体字表示
Object Pattem（参考附录 E[POSA2])。
读此章前，强烈建议读者先阅读上面说的这几章。
Thrcad-Per-Message Pattern（第7章）、Future Patterm（第9章）等Patterm。故在阅
Pattem，就可以组织出能够处理异步消息的“主动对象”。
构成法人－样。虽然使用没有提供异步消息的 Java 语言，但是使用 Active Object
29
线程”而已。它还具有可从外部接收异步消息，片能配合需要返回处理结果的特征。
的”一般是指“白己拥有独立的线程”的意思。所以 Iava 的 java tang.Thread 类的
起，彷佛是有·个人的人格——所以叫做“法人”。
贵产品发送、搬运的人员等，各种人员互相协调，组成一个公司。公司整体联在
匿名
展名
匿名
类与接口一览如表12-1所示，与“主动对象”相关的类与接口，都定义在
范例程序
例，也是…-种主动对象。
Active Object Pattern
类图如图12-1所示。因为图表实在太复杂，
Active Objcct Pattern，义称为 Actor Pattetm（参考附录 E [Lea]）或 Concurrent
不过，Active Object Patterm 里出现的”主动对象”，并不只是“自已拥有独立的
公司里有很多人在工作。柜台人员、营业人员、生产线的人员、管理人员、负
在这里的范例程序所要建立的是一个具有“建立字符串（makeString)”、“显示
active是“主动的”的意思，所以 active object是“主动对象”的意思。“上动
这·章要学习的是Aetive Object Patterm：
包
表 12-1类与接口一览表（粗体字是activeobject 包里pubic 的东西）
DisplayClientThread
MakerClientThread
Main
名
称
请求显示学符串的线程
请求建立宁符出的线程
操作测试用的线程
说
图12-1中省略了Main，
明
---
## Page 311
 activeobject
acliveobject
activeobject
activeobject
activeobject
activeobject
activeobject
activeobject
activeobycct
activeobject
activeobject
activeobject
包
MLe]
Cala
Servant
RealResult
FutureResult
DisplayStringRequest
MakeStringRequesl
MethodRequcst
ActivationQueue
SchedulerThread
Proxy
AetiveObjectFactory
AetiveObjeet