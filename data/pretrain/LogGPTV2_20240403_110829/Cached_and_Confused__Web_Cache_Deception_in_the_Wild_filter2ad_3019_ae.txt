15,109 / 49 / 11
Encoded ;
1,010 / 5 / 4
206 / 5 / 3
-
4,036 / 13 / 3
12,749 / 33 / 5
Encoded #
5,691 / 11 / 3
3,676 / 5 / 3
4,881 / 9 / 2
-
8,821 / 22 / 5
Encoded ?
5,673 / 12 / 3
3,668 / 5 / 3
4,863 / 8 / 0
90 / 1 / 1
-
All Encoded
13,456 / 45 / 11
16,472 / 58 / 12
12,917 / 39 / 9
13,762 / 35 / 8
5,031 / 14 / 4
s/sites that were not vulnerable to other techniques, attesting
to the fact that utilizing a variety of techniques increases the
chances of successful exploitation. In fact, of the 25 vulnera-
ble sites, 11 were only exploitable using one of the variations
we presented here, but not the Path Parameter technique.
All in all, the results we present in this section conﬁrm
our hypothesis that launching WCD attacks with variations
on path confusion, as opposed to only using the originally
proposed Path Parameter technique, results in an increased
possibility of successful exploitation. Moreover, two of the
explored variations elicit signiﬁcantly more 200 OK server
responses in the process, increasing the likelihood of the web
server returning valid private information.
We stress that the experiment we present in this section
is necessarily limited in scale and scope. Still, we believe
the ﬁndings sufﬁciently demonstrate that WCD can be eas-
ily modiﬁed to render the attack more damaging, exploiting
unique characteristics of web servers and caching proxies in
parsing URLs. An important implication is that defending
against WCD through conﬁguration adjustments is difﬁcult
and error prone. Attackers are likely to have the upper hand
in devising new and creative path confusion techniques that
site operators may not anticipate.
6 Empirical Experiments
Practical exploitation of WCD vulnerabilities depends on
many factors such as the caching technology used and caching
rules conﬁgured. In this section, we present two empirical
experiments we performed to demonstrate the impact of dif-
ferent cache setups on WCD, and discuss our exploration of
the default settings for popular CDN providers.
6.1 Cache Location
While centralized server-side web caches can be trivially ex-
ploited from any location in the world, exploiting a distributed
set of CDN cache servers is more difﬁcult. A successful WCD
attack may require attackers to correctly target the same edge
server that their victim connects to, where the cached sensitive
information is stored. As extensively documented in existing
WCD literature, attackers often achieve that by connecting to
the server of interest directly using its IP address and a valid
HTTP Host header corresponding to the vulnerable site.
We tested the impact of this practical constraint by per-
forming the victim interactions of our methodology from a
machine located in Boston, MA, US, and launching the attack
from another server in Trento, Italy. We repeated this test for
each of the 25 sites conﬁrmed to be vulnerable in our second
measurement described in Section 5.
The results showed that our attack failed for 19 sites as we
predicted, requiring tweaks to target the correct cache server.
Surprisingly, the remaining 6 sites were still exploitable even
though headers indicated that they were served over CDNs
(3 Akamai, 1 Cloudﬂare, 1 CloudFront, and 1 Fastly).
Upon closer inspection of the trafﬁc, we found headers in
our Fastly example indicating that a cache miss was recorded
in their Italy region, followed by a retry in the Boston region
that resulted in the cache hit, which led to a successful attack.
We were not able to explore the remaining cases with the data
servers exposed to us.
Many CDN providers are known to use a tiered cache
model, where content may be available from a parent cache
even when evicted from a child [3, 20]. The Fastly example
above demonstrates this situation, and is also a plausible expla-
nation for the remaining cases. Another possibility is that the
vulnerable sites were using a separate centralized server-side
cache fronted by their CDN provider. Unfortunately, with-
out a clear understanding of proprietary CDN internals and
visibility into site owners’ infrastructure, it is not feasible to
determine the exact cache interactions.
Our experiment conﬁrms that cache location is a practical
constraint for a successful WCD attack where a distributed set
of cache servers is involved, but also shows that attacks are
viable in certain scenarios without necessitating additional
trafﬁc manipulation.
6.2 Cache Expiration
Web caches typically store objects for a short amount of time,
and then evict them once they expire. Eviction may also take
place prematurely when web caches are under heavy load.
Consequently, an attacker may have a limited window of
opportunity to launch a successful WCD attack until the web
cache drops the cached sensitive information.
USENIX Association
29th USENIX Security Symposium    677
Table 10: Default caching behavior for popular CDNs, and cache control headers honored by default to prevent caching.
CDN
Default Cached Objects
Akamai
Cloudﬂare
Objects with a predeﬁned list of static ﬁle extensions only.
Objects with a predeﬁned list of static ﬁle extensions, AND
all objects with cache control headers public or max-age > 0.
CloudFront
All objects.
Fastly
All objects.
Honored Headers
no-store
no-cache
private












In order to measure the impact of cache expiration on WCD,
we repeated the attacker interactions of our methodology with
1 hour, 6 hour, and 1 day delays. 3 We found that 16, 10, and
9 sites were exploitable in each case, respectively.
These results demonstrate that exploitation is viable in re-
alistic attack scenarios, where there are delays between the
victim’s and attacker’s interactions with web caches. That be-
ing said, caches will eventually evict sensitive data, meaning
that attacks with shorter delays are more likely to be success-
ful. We also note that we performed this test with a randomly
chosen vulnerable page for each site as that was sufﬁcient for
our purposes. In practice, different resources on a given site
may have varying cache expiration times, imposing additional
constraints on what attacks are possible.
6.3 CDN Conﬁgurations
Although any web cache technology can be affected by WCD,
we established in Section 4.2 that CDNs play a large role
in cache use on the Internet. Therefore, we conducted an ex-
ploratory experiment to understand the customization features
CDN vendors offer and, in particular, to observe their default
caching behavior. To that end, we created free or trial accounts
with four major CDN providers: Akamai, Cloudﬂare, Cloud-
Front, and Fastly. We only tested the basic content delivery
solutions offered by each vendor and did not enable add-on
features such as web application ﬁrewalls.
We stress that major CDN providers offer rich conﬁguration
options, including mechanisms for site owners to programmat-
ically interact with their trafﬁc. A systematic and exhaustive
analysis of CDN features and corresponding WCD vectors is
an extremely ambitious task beyond the scope of this paper.
The results we present in this section are only intended to give
high-level insights into how much effort must be invested in
setting up a secure and safe CDN environment, and how the
defaults behave.
Conﬁguration. All four CDN providers we experimented
with offer a graphical interface and APIs for users to set up
their origin servers, apply caching rules, and conﬁgure how
3We only tested 19 sites out of 25, as the remaining 6 had ﬁxed their
vulnerabilities by the time we performed this experiment.
HTTP headers are processed. In particular, all vendors provide
ways to honor or ignore Cache-Control headers, and users can
choose whether to strip headers or forward them downstream
to clients. Users can apply caching decisions and time-to-live
values for cached objects based on expressions that match the
requested URLs.
Akamai and Fastly conﬁgurations are translated to and
backed by domain-speciﬁc conﬁguration languages, while
Cloudﬂare and CloudFront do not expose their back-end to
users. Fastly internally uses Varnish caches, and gives users
full control over the Varnish Conﬁguration Language (VCL)
that governs their setup. In contrast, Akamai appears to sup-
port more powerful HTTP processing features than Varnish,
but does not expose all features to users directly. Quoting
an Akamai blog post: “Metadata [Akamai’s conﬁguration
language] can do almost anything, good and bad, which is
why WRITE access to metadata is restricted, and only Aka-
mai employees can add metadata to a property conﬁguration
directly.” [4]
In addition to static conﬁgurations, both Akamai and Cloud-
ﬂare offer mechanisms for users to write programs that exe-
cute on the edge server, and dynamically manipulate trafﬁc
and caches [2, 16].
In general, while Cloudﬂare, CloudFront, and Fastly offer
free accounts suitable for personal use, they also have paid
tiers that lift restrictions (e.g., Cloudﬂare only supports 3
cache rules in the free tier) and provide professional services
support for advanced customization. Akamai strictly operates
in the business-to-business market where conﬁguration is
driven by a professional services team, as described above.
Cacheability. Next, we tested the caching behavior of CDN
providers with a default conﬁguration. Our observations here
are limited to 200 OK responses pertaining to WCD; for an in-
depth exploration of caching decisions involving 4xx or 5xx
error responses, we refer readers to Nguyen et al. [47]. We
summarize our observations in Table 10, which lists the con-
ditions for caching objects in HTTP responses, and whether
including the relevant Cache-Control headers prevent caching.
These results show that both Akamai and Cloudﬂare rely
on a predeﬁned list of static ﬁle extensions (e.g., .jpg, .css,
.pdf, .exe) when making cacheability decisions. While Cloud-
678    29th USENIX Security Symposium
USENIX Association
ﬂare allows origin servers to override the decision in both
directions via Cache-Control headers, either to cache non-
static ﬁles or prevent caching static ﬁles, Akamai’s default
rule applies unconditionally.
CloudFront and Fastly adopt a more aggressive caching
strategy: in the absence of Cache-Control headers all objects
are cached with a default time-to-live value. Servers behind
CloudFront can prevent caching via Cache-Control headers as
expected. However, Fastly only honors the private header
value.
6.4 Lessons Learned
The empirical evidence we presented in this section suggests
that conﬁguring web caches correctly is not a trivial task.
Moreover, the complexity of detecting and ﬁxing a WCD vul-
nerability is disproportionately high compared to launching
an attack.
As we have seen above, many major CDN vendors do not
make RFC-compliant caching decisions in their default con-
ﬁgurations [21]. Even the more restrictive default caching
rules based on ﬁle extensions are prone to security problems;
for example, both Akamai and Cloudﬂare could cache dy-
namically generated PDF ﬁles containing tax statements if
conﬁgured incorrectly. On the other hand, we do not believe
that these observations implicate CDN vendors in any way,
but instead emphasize that CDNs are not intended to be plug
& play solutions for business applications handling sensitive
data. All CDNs provide ﬁne-grained mechanisms for caching
and trafﬁc manipulation, and site owners must carefully con-
ﬁgure and test these services to meet their needs.
We reiterate that, while CDNs may be a prominent com-
ponent of the Internet infrastructure, WCD attacks impact
all web cache technologies. The complexity of conﬁguring
CDNs correctly, the possibility of multi-CDN arrangements,
and other centralized caches that may be involved all imply
that defending against WCD requires site owners to adopt a
holistic view of their environment. Traditional security prac-
tices such as asset, conﬁguration, and vulnerability manage-
ment must be adapted to take into consideration the entire
communication infrastructure as a system.
From an external security researcher’s perspective the chal-
lenge is even greater. As we have also discussed in the cache
location and expiration experiments, reasoning about a web
cache system’s internals in a black box fashion is a challeng-
ing task, which in turn makes it difﬁcult to pinpoint issues
before they can be exploited. In contrast, attackers are largely
immune to this complexity; they often do not need to disen-
tangle the cache structure for a successful attack. Developing
techniques and tools for reliable detection of WCD—and sim-
ilar web cache attacks—is an open research problem. We be-
lieve a combination of systems security and safety approaches
would be a promising research direction, which we discuss
next as we conclude this paper.
7 Discussion & Conclusion
In this paper, we presented the ﬁrst large-scale investigation
of WCD vulnerabilities in the wild, and showed that many
sites among the Alexa Top 5K are impacted. We demonstrated
that the vulnerable sites not only leak user PII but also secrets
that, once stolen by an attacker, can be used to bypass existing
authentication and authorization mechanisms to enable even
more damaging web application attack scenarios.
Alarmingly, despite the severity of the potential damage,
these vulnerabilities still persist more than two years after the
public introduction of the attack in February 2017. Similarly,
our second experiment showed that in the fourteen months
between our two measurements, only 12 out of 16 sites were
able to mitigate their WCD vulnerabilities, while the total
number of vulnerabilities rose to 25.
One reason for this slow adoption of necessary mitigations
could be a lack of user awareness. However, the attention
WCD garnered from security news outlets, research com-
munities, ofﬁcial web cache vendor press releases, and even
mainstream media also suggests that there may be other con-
tributing factors. In fact, it is interesting to note that there
exists no technology or tool proposed to date that allows site
operators to reliably determine if any part of their online ar-
chitecture is vulnerable to WCD, or to close their security
gaps. Similarly, there does not exist a mechanism for end-
users and web browsers to detect a WCD attack and protect
themselves. Instead, countermeasures are largely limited to
general guidance by web cache vendors and CDN providers
for their users to conﬁgure their services in consideration of
WCD vectors, and the tools available offer limited manual
penetration-testing capabilities for site operators with domain-
speciﬁc knowledge.
We assert that the above is a direct and natural consequence
of the fact that WCD vulnerabilities are a system safety prob-
lem. In an environment with WCD vulnerabilities, there are
no isolated faulty components; that is, web servers, load bal-
ancers, proxies, and caches all individually perform the func-
tionality they are designed for. Similarly, determining whether
there is human error involved and, if so, identifying where
that lies are both non-trivial tasks. In fact, site operators often
have legitimate needs to conﬁgure their systems in seemingly
hazardous ways. For example, a global corporation operating
hundreds to thousands of machines may ﬁnd it technically or
commercially infeasible to revise the Cache-Control header
settings of their individual web servers, and may be forced to
instruct their CDN provider to perform caching based purely
on ﬁle names.
These are all strong indicators that the growing ecosystem
of web caches, in particular CDN-fronted web applications,
and more generally highly-distributed Internet-based archi-
tectures, should be analyzed in a manner that captures their
security and safety properties as a system. As aforementioned,
venerable yet still widely-used root cause analysis techniques
USENIX Association
29th USENIX Security Symposium    679
are likely to fall short in these efforts, because there is no
individual system component to blame for the failure. In-
stead, security researchers should adopt a systems-centric
security analysis, examining not only individual system com-
ponents but also their interactions, expected outcomes, haz-
ardous states, and accidents that may result. Modeling and an-
alyzing WCD attacks in this way, drawing from the rich safety
engineering literature [41] is a promising future research di-
rection that will help the security community understand and
address similar systems-level attacks effectively.
Acknowledgments
We thank our shepherd Ben Stock and the anonymous re-