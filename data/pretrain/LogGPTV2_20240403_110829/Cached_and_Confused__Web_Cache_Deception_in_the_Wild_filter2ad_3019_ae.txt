### Summary of Encoded Data

- **Encoded ;**
  - 1,010 / 5 / 4
  - 206 / 5 / 3
  - 4,036 / 13 / 3
  - 12,749 / 33 / 5

- **Encoded #**
  - 5,691 / 11 / 3
  - 3,676 / 5 / 3
  - 4,881 / 9 / 2
  - 8,821 / 22 / 5

- **Encoded ?**
  - 5,673 / 12 / 3
  - 3,668 / 5 / 3
  - 4,863 / 8 / 0
  - 90 / 1 / 1

- **All Encoded**
  - 13,456 / 45 / 11
  - 16,472 / 58 / 12
  - 12,917 / 39 / 9
  - 13,762 / 35 / 8
  - 5,031 / 14 / 4

### Analysis of Vulnerable Sites

The results indicate that several sites were not vulnerable to other techniques, highlighting the importance of using a variety of techniques to increase the chances of successful exploitation. Of the 25 vulnerable sites, 11 were only exploitable using one of the variations presented, but not the Path Parameter technique.

### Hypothesis Confirmation

Our hypothesis that launching WCD attacks with variations on path confusion, rather than relying solely on the originally proposed Path Parameter technique, increases the likelihood of successful exploitation is confirmed. Additionally, two of the explored variations elicited significantly more 220 OK server responses, increasing the likelihood of the web server returning valid private information.

### Experiment Limitations

While the experiment is limited in scale and scope, the findings sufficiently demonstrate that WCD can be easily modified to render the attack more damaging by exploiting unique characteristics of web servers and caching proxies in parsing URLs. This implies that defending against WCD through configuration adjustments is difficult and error-prone. Attackers are likely to have the upper hand in devising new and creative path confusion techniques that site operators may not anticipate.

### Empirical Experiments

#### 6.1 Cache Location

Exploiting distributed CDN cache servers is more challenging due to the need to target the correct edge server. We tested this by performing victim interactions from a machine in Boston, MA, US, and launching the attack from another server in Trento, Italy. The results showed that the attack failed for 19 sites, requiring tweaks to target the correct cache server. Surprisingly, 6 sites remained exploitable, even though headers indicated they were served over CDNs (3 Akamai, 1 Cloudflare, 1 CloudFront, and 1 Fastly). Upon closer inspection, we found that a cache miss in the Italy region was followed by a retry in the Boston region, leading to a successful attack. This suggests that many CDN providers use a tiered cache model, where content may be available from a parent cache even when evicted from a child.

#### 6.2 Cache Expiration

Web caches typically store objects for a short time before eviction. To measure the impact of cache expiration on WCD, we repeated the attacker interactions with 1 hour, 6 hour, and 1 day delays. We found that 16, 10, and 9 sites were exploitable in each case, respectively. These results show that exploitation is viable in realistic attack scenarios, but shorter delays increase the likelihood of success.

#### 6.3 CDN Configurations

We conducted an exploratory experiment to understand the customization features offered by major CDN providers (Akamai, Cloudflare, CloudFront, and Fastly). All four providers offer graphical interfaces and APIs for setting up origin servers, applying caching rules, and configuring HTTP header processing. Akamai and Fastly use domain-specific configuration languages, while Cloudflare and CloudFront do not expose their back-end to users. Both Akamai and Cloudflare offer mechanisms for users to write programs that execute on the edge server and dynamically manipulate traffic and caches.

#### 6.4 Lessons Learned

Configuring web caches correctly is not trivial, and the complexity of detecting and fixing a WCD vulnerability is high compared to launching an attack. Many major CDN vendors do not make RFC-compliant caching decisions in their default configurations. Even restrictive default caching rules based on file extensions are prone to security problems. Site owners must carefully configure and test these services to meet their needs. Defending against WCD requires a holistic view of the entire communication infrastructure.

### Discussion and Conclusion

This paper presents the first large-scale investigation of WCD vulnerabilities in the wild, showing that many sites among the Alexa Top 5K are impacted. Despite the severity, these vulnerabilities persist more than two years after the public introduction of the attack. The slow adoption of necessary mitigations could be due to a lack of user awareness, but there are no reliable tools or technologies for site operators to determine if their online architecture is vulnerable to WCD. Addressing WCD vulnerabilities requires a systems-centric security analysis, examining not only individual system components but also their interactions and expected outcomes.

### Acknowledgments

We thank our shepherd Ben Stock and the anonymous reviewers for their valuable feedback.