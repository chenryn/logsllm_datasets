### 3.3.3 Binder IPC & Native Code Taint Propagation

The Binder mechanism is a common method for inter-app communication in Android. Given the stability of the Binder implementation within the Android framework, we adopt a previously established methodology to track taint tag propagation at the message level, ensuring performance efficiency. To facilitate this, we introduce an additional field in the binder parcel to indicate the taint status of the message. When a binder message is sent, the TaintART runtime appends the taint status to the parcel, and when a message is received, it unpacks the taint status. Since TaintART primarily focuses on tracking information flows within the ART (Android Runtime) environment, we can leverage existing work such as NDroid [42], which specializes in tracing information flow through JNI (Java Native Interface).

### 4. Implementation

In this section, we delve into the implementation details of taint sources and sinks, the taint interface library, and deployment specifics of TaintART.

#### 4.1 Taint Sources and Sinks

Taint analysis is a widely used methodology in vulnerability detection, privacy tracking, and malware analysis. Based on our design, TaintART tracks multi-level information flows, aiding users in monitoring sensitive information and assisting analysts in dissecting malware behaviors. Additionally, TaintART can enforce policies on sensitive data leakage.

Our implementation tracks four types of data from fifteen different sources, as listed in Table 2. These data types are categorized as device identity, sensor data, sensitive content, and location data. The taint source logic is embedded in corresponding classes to track these data. For example, device identity, such as the IMEI number, can be obtained from the `TelephonyManager` class, which is one of many system services in the system server process. Apps can acquire telephony data by sending request messages to the `TelephonyManager` via Binder IPC. Therefore, our taint source logic is placed in the `TelephonyManager` class to handle requests for device identity and attach a taint tag to the binder parcel.

For sink placements, we consider potential data leaks to the network and external storage. If tainted data is passed to sink functions, TaintART records this event as a data leak. We provide interfaces for placing sources and sinks, allowing analysts to focus on specific data of interest.

In Section 3, we used a single bit for the taint tag to explain our system design. For scenarios requiring the tracking of multiple data sources, we use more bits to represent multiple taint tag states. For multi-level sensitive data tracking, we use two bits to store one taint tag. Data leakage is categorized into four levels: Level 0 indicates no leakage, Level 1 includes less sensitive data like device identity, Level 2 includes sensor data, and Level 3 includes highly sensitive data such as location and sensitive content.

#### 4.2 Taint Analysis Interface

TaintART is designed for general data flow analysis, enabling analysts to develop new tools or services. We provide two basic interfaces: `addTaint()` and `getTaint()`. Developers can use `addTaint()` to update the taint tag of a specific local variable or object and inspect the taint tag later. For better performance, these interfaces are implemented as intrinsic functions, allowing the TaintART compiler to inline them during compilation.

#### 4.3 Implementation & Deployment Details

We have prototyped TaintART based on the latest Android version (Android 6.0.1 Marshmallow AOSP tag android-6.0.1_r1) for the Nexus 5 (target aosp_hammerhead). We customized the ART compiler and runtime sources to implement taint tag propagation and added source tracking logic in the Android framework sources. To support taint propagation through JNI, we also customized binder-related sources in the Android framework.

In summary, we provide customized binaries and libraries such as `dex2oat`, `libart.so`, and `libart-compiler.so`. We reuse peer-reviewed code from AOSP to ensure the stability and security of TaintART. Our implementation is generic for Android 5.0 and 6.0 versions.

To deploy TaintART on devices, analysts with root privileges can overwrite our customized binaries and libraries without needing to reinstall the entire system. Since we modified the Android framework code to place taint sources, TaintART requires recompilation of the framework code to enable taint tag propagation.

### 5. Case Study

In this section, we analyze several popular apps to study the potential for privacy leakage using TaintART.

#### Experimental Setup

We downloaded and compiled the latest TaintDroid targeting `aosp_arm-eng`, based on Android 4.3 (android-4.3_r1), and ran our TaintART system on Android 6.0.1 (android-6.0.1_r1). The apps in our dataset were downloaded from the Google Play Store in May 2016.

#### Privacy Tracking

We tested popular apps in various categories, including shopping, payment, social, and entertainment, to study potential privacy leakage. We executed and manually interacted with each app in both TaintDroid and TaintART, recording privacy leakage reports. Table 3 illustrates the details of our analysis. By default, TaintDroid denies loading all external native libraries, causing some apps to crash at launch. We commented out those codes and allowed JNI invocations for TaintDroid. However, some functions in Taobao and Alipay were broken due to compatibility issues, such as the use of the MultiDex class, which is not supported in Android 4.3.

For privacy tracking, we found that shopping apps like Taobao and JD.COM access device identity and sensor data. By inspecting outbound packets, we found that some packets sent to remote servers contain tainted identity and sensor data. For example, all HTTP requests from JD.COM include a device ID field: `client.action?functionId=jshopUrlAdapter&body=%7B%7D&uuid=[IMEI]&clientVersion=5.1.0`. Taobao includes device orientation information in the "User-Agent" field for all requests. Both TaintDroid and TaintART can capture these leakage events.

It is worth noting that the latest Facebook app no longer supports Android versions below 5.0, making TaintDroid unable to analyze it. This highlights the versatility of TaintART.

#### Policy Enforcement

TaintART supports the latest Android runtime and provides an efficient, extensible, and easy-to-deploy methodology, making it suitable for policy enforcement. Unlike systems that enforce sensitive API invocations, TaintART knows the sensitivity of data passing to enforced functions. We prototyped a privacy policy enforcement function where users can pre-define multi-level policy rules. Table 4 shows the policies for the four levels. For Level 1, we only record data leakage in a log. For Level 2, we alert users with a notification and replace sensitive information with random values. Figure 7 depicts a screenshot of a Level 2 privacy leakage event. For Level 3, TaintART blocks any access to the data. We also provide interfaces for developers to customize actions for different policies.

### 6. Evaluation

In this section, we perform macrobenchmarks for common apps, microbenchmarks for the compiler and Java environment, and investigate the memory usage of TaintART. We also evaluate the compatibility of TaintART against the Android official compatibility test suite. The device used in our evaluation is a Nexus 5 with a Quadcore 2.3 GHz CPU, 2 GB memory, and 16 GB internal storage, running the Google official Android firmware (Marshmallow 6.0.1, build number MMB29K, Linux kernel version 3.4.0).

Table 3: Privacy Leakage Analysis on Popular Apps
| App Name | Version | Min/Target SDK | TaintDroid Result (Error Message) | TaintART Result |
|----------|---------|----------------|-----------------------------------|-----------------|
| Taobao   | 5.7.2   | 14/23          | Some functions are broken: "cannot find method" in config error | 2: device identity, sensor data, location data |
| Alipay   | 9.6.6.051201 | 15/23 | Cannot login: "It is crowded" error | 2: device identity, sensor data, location data |
| JD.COM   | 5.1.0   | 14/14          | Device identity and accelerometer leakage | 2: device identity, sensor data, location data |
| Facebook | 77.0.0.20.66 | 21/23 | Cannot install: the minimum SDK is Android 5.0 | 1: device identity |
| Skype    | 6.34.0.715 | 15/23 | Device identity leakage | 1: device identity |
| Instagram | 8.1.0 | 16/23 | No leakage | 0: no leakage |
| Spotify  | 5.3.0.995 | 15/23 | No leakage | 0: no leakage |
| Amazon Shopping | 6.6.0.100 | 11/23 | No leakage | 0: no leakage |

Table 4: Privacy Enforcement Policy
| Level | Description of Enforcement Policy |
|-------|----------------------------------|
| 0     | N/A                              |
| 1     | Record events                     |
| 2     | Record events, alert users, and rewrite sensitive information |
| 3     | Record events, alert users, and prevent accesses |

Table 5: Macrobenchmark Results
| Macrobenchmark Name | (ms) Original (with Optimizing Backend) |