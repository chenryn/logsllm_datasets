Using Shared Preferences
When you use the SharedPreferences.Editor to read or write int/boolean/long values, you cannot check whether the
data is overridden or not. However: it can hardly be used for actual attacks other than chaining the values (e.g. no
additional exploits can be packed which will take over the control flow). In the case of a String or a StringSet you
should be careful with how the data is interpreted. Using reflection based persistence? Check the section on "Testing
Object Persistence" for Android to see how it should be validated. Using the SharedPreferences.Editor to store and
read certificates or keys? Make sure you have patched your security provider given vulnerabilities such as found in
Bouncy Castle.
In all cases, having the content HMACed can help to ensure that no additions and/or changes have been applied.
Using Other Storage Mechanisms
In case other public storage mechanisms (than the SharedPreferences.Editor ) are used, the data needs to be
validated the moment it is read from the storage mechanism.
Testing Logs for Sensitive Data (MSTG-STORAGE-3)
Overview
There are many legitimate reasons to create log files on a mobile device, such as keeping track of crashes, errors,
and usage statistics. Log files can be stored locally when the app is offline and sent to the endpoint once the app is
online. However, logging sensitive data may expose the data to attackers or malicious applications, and it violates
user confidentiality. You can create log files in several ways. The following list includes two classes that are available
for Android:
Log Class
Logger Class
Use a centralized logging class and mechanism and remove logging statements from the production release because
other applications may be able to read them.
Static Analysis
You should check the apps' source code for logging mechanisms by searching for the following keywords:
Functions and classes, such as:
android.util.Log
Log.d | Log.e | Log.i | Log.v | Log.w | Log.wtf
Logger
Keywords and system output:
System.out.print | System.err.print
logfile
logging
157
Data Storage on Android
logs
While preparing the production release, you can use tools like ProGuard (included in Android Studio). ProGuard is a
free Java class file shrinker, optimizer, obfuscator, and preverifier. It detects and removes unused classes, fields,
methods, and attributes and can also be used to delete logging-related code.
To determine whether all the android.util.Log class' logging functions have been removed, check the ProGuard
configuration file (proguard-project.txt) for the following options:
-assumenosideeffects class android.util.Log
{
public static boolean isLoggable(java.lang.String, int);
public static int v(...);
public static int i(...);
public static int w(...);
public static int d(...);
public static int e(...);
public static int wtf(...);
}
Note that the example above only ensures that calls to the Log class' methods will be removed. If the string that will be
logged is dynamically constructed, the code that constructs the string may remain in the bytecode. For example, the
following code issues an implicit StringBuilder to construct the log statement:
Log.v("Private key [byte format]: " + key);
The compiled bytecode, however, is equivalent to the bytecode of the following log statement, which constructs the
string explicitly:
Log.v(new StringBuilder("Private key [byte format]: ").append(key.toString()).toString());
ProGuard guarantees removal of the Log.v method call. Whether the rest of the code ( new StringBuilder ... ) will
be removed depends on the complexity of the code and the ProGuard version.
This is a security risk because the (unused) string leaks plain text data into memory, which can be accessed via a
debugger or memory dumping.
Unfortunately, no silver bullet exists for this issue, but one option would be to implement a custom logging facility that
takes simple arguments and constructs the log statements internally.
SecureLog.v("Private key [byte format]: ", key);
Then configure ProGuard to strip its calls.
Dynamic Analysis
Use all the mobile app functions at least once, then identify the application's data directory and look for log files
( /data/data/ ). Check the application logs to determine whether log data has been generated; some
mobile applications create and store their own logs in the data directory.
Many application developers still use System.out.println or printStackTrace instead of a proper logging class.
Therefore, your testing strategy must include all output generated while the application is starting, running and closing.
To determine what data is directly printed by System.out.println or printStackTrace , you can use Logcat as
explained in the chapter "Basic Security Testing", section "Monitoring System Logs".
Remember that you can target a specific app by filtering the Logcat output as follows:
158
Data Storage on Android
$ adb logcat | grep "$(adb shell ps | grep  | awk '{print $2}')"
If you already know the app PID you may give it directly using --pid flag.
You may also want to apply further filters or regular expressions (using logcat 's regex flags -e , --regex=
 for example) if you expect certain strings or patterns to come up in the logs.
Determining Whether Sensitive Data is Sent to Third Parties (MSTG-
STORAGE-4)
Overview
You can embed third-party services in apps. These services can implement tracker services, monitor user behavior,
sell banner advertisements, improve the user experience, and more.
The downside is a lack of visibility: you can't know exactly what code third-party libraries execute. Consequently, you
should make sure that only necessary, non-sensitive information will be sent to the service.
Most third-party services are implemented in one of two ways:
With a standalone library, such as an Android project Jar that is included in the APK
With a full SDK
Static Analysis
You can automatically integrate third-party libraries into apps by using an IDE wizard or manually adding a library or
SDK. In either case, review the permissions in the AndroidManifest.xml . In particular, you should determine whether
permissions for accessing SMS (READ_SMS) , contacts ( READ_CONTACTS ), and location ( ACCESS_FINE_LOCATION ) are really
necessary (see Testing App Permissions ). Developers should check the source code for changes after the library has
been added to the project.
Check the source code for API calls and third-party library functions or SDKs. Review code changes for security best
practices.
Review loaded libraries to determine whether they are necessary and whether they are out of date or contain known
vulnerabilities.
All data sent to third-party services should be anonymized. Data (such as application IDs) that can be traced to a user
account or session should not be sent to a third party.
Dynamic Analysis
Check all requests to external services for embedded sensitive information. To intercept traffic between the client and
server, you can perform dynamic analysis by launching a man-in-the-middle (MITM) attack with Burp Suite
Professional or OWASP ZAP. Once you route the traffic through the interception proxy, you can try to sniff the traffic
that passes between the app and server. All app requests that aren't sent directly to the server on which the main
function is hosted should be checked for sensitive information, such as PII in a tracker or ad service.
Determining Whether the Keyboard Cache Is Disabled for Text Input Fields
(MSTG-STORAGE-5)
Overview
159
Data Storage on Android
When users type in input fields, the software automatically suggests data. This feature can be very useful for
messaging apps. However, the keyboard cache may disclose sensitive information when the user selects an input
field that takes this type of information.
Static Analysis
In the layout definition of an activity, you can define TextViews that have XML attributes. If the XML attribute
android:inputType is given the value textNoSuggestions , the keyboard cache will not be shown when the input field
is selected. The user will have to type everything manually.
The code for all input fields that take sensitive information should include this XML attribute to disable the keyboard
suggestions:
Dynamic Analysis
Start the app and click in the input fields that take sensitive data. If strings are suggested, the keyboard cache has not
been disabled for these fields.
Determining Whether Sensitive Stored Data Has Been Exposed via IPC
Mechanisms (MSTG-STORAGE-6)
Overview
As part of Android's IPC mechanisms, content providers allow an app's stored data to be accessed and modified by
other apps. If not properly configured, these mechanisms may leak sensitive data.
Static Analysis
The first step is to look at AndroidManifest.xml to detect content providers exposed by the app. You can identify
content providers by the  element. Complete the following steps:
Determine whether the value of the export tag ( android:exported ) is "true" . Even if it is not, the tag will be set
to "true" automatically if an  has been defined for the tag. If the content is meant to be
accessed only by the app itself, set android:exported to "false" . If not, set the flag to "true" and define
proper read/write permissions.
Determine whether the data is being protected by a permission tag ( android:permission ). Permission tags limit
exposure to other apps.
Determine whether the android:protectionLevel attribute has the value signature . This setting indicates that
the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To
make the data accessible to other apps, apply a security policy with the  element and set a proper
android:protectionLevel . If you use android:permission , other applications must declare corresponding  elements in their manifests to interact with your content provider. You can use the
android:grantUriPermissions attribute to grant more specific access to other apps; you can limit access with the
 element.
Inspect the source code to understand how the content provider is meant to be used. Search for the following
keywords:
android.content.ContentProvider
160
Data Storage on Android
android.database.Cursor
android.database.sqlite
.query
.update
.delete
To avoid SQL injection attacks within the app, use parameterized query methods, such as query , update ,
and delete . Be sure to properly sanitize all method arguments; for example, the selection argument could
lead to SQL injection if it is made up of concatenated user input.
If you expose a content provider, determine whether parameterized query methods ( query , update , and delete )
are being used to prevent SQL injection. If so, make sure all their arguments are properly sanitized.
We will use the vulnerable password manager app Sieve as an example of a vulnerable content provider.
Inspect the Android Manifest
Identify all defined  elements:
As shown in the AndroidManifest.xml above, the application exports two content providers. Note that one path
("/Keys") is protected by read and write permissions.
Inspect the source code
Inspect the query function in the DBContentProvider.java file to determine whether any sensitive information is being
leaked:
public Cursor query(final Uri uri, final String[] array, final String s, final String[] array2, final String s2)
{
final int match = this.sUriMatcher.match(uri);
final SQLiteQueryBuilder sqLiteQueryBuilder = new SQLiteQueryBuilder();
if (match >= 100 && match = 200) {
sqLiteQueryBuilder.setTables("Key");
}
return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, (String)null, (String)nu
ll, s2);
}
Here we see that there are actually two paths, "/Keys" and "/Passwords", and the latter is not being protected in the
manifest and is therefore vulnerable.
When accessing a URI, the query statement returns all passwords and the path Passwords/ . We will address this in
the "Dynamic Analysis" section and show the exact URI that is required.
Dynamic Analysis
Testing Content Providers
161
Data Storage on Android
To dynamically analyze an application's content providers, first enumerate the attack surface: pass the app's package
name to the Drozer module app.provider.info :
dz> run app.provider.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
Authority: com.mwr.example.sieve.DBContentProvider
Read Permission: null
Write Permission: null
Content Provider: com.mwr.example.sieve.DBContentProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Path Permissions:
Path: /Keys
Type: PATTERN_LITERAL
Read Permission: com.mwr.example.sieve.READ_KEYS
Write Permission: com.mwr.example.sieve.WRITE_KEYS
Authority: com.mwr.example.sieve.FileBackupProvider
Read Permission: null
Write Permission: null
Content Provider: com.mwr.example.sieve.FileBackupProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
In this example, two content providers are exported. Both can be accessed without permission, except for the /Keys
path in the DBContentProvider . With this information, you can reconstruct part of the content URIs to access the
DBContentProvider (the URIs begin with content:// ).
To identify content provider URIs within the application, use Drozer's scanner.provider.finduris module. This module
guesses paths and determines accessible content URIs in several ways:
dz> run scanner.provider.finduris -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Unable to Query content://com.mwr.example.sieve.DBContentProvider/
...
Unable to Query content://com.mwr.example.sieve.DBContentProvider/Keys
Accessible content URIs:
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Passwords/
Once you have a list of accessible content providers, try to extract data from each provider with the
app.provider.query module:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical
_id: 1
service: Email
username: incognitoguy50
password: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 - encoded)
email: PI:EMAIL
You can also use Drozer to insert, update, and delete records from a vulnerable content provider:
Insert record
dz> run app.provider.insert content://com.vulnerable.im/messages
--string date 1331763850325
--string type 0
--integer _id 7
Update record
162
Data Storage on Android
dz> run app.provider.update content://settings/secure
--selection "name=?"
--selection-args assisted_gps_enabled
--integer value 0
Delete record
dz> run app.provider.delete content://settings/secure
--selection "name=?"
--selection-args my_setting
SQL Injection in Content Providers
The Android platform promotes SQLite databases for storing user data. Because these databases are based on SQL,
they may be vulnerable to SQL injection. You can use the Drozer module app.provider.query to test for SQL injection
by manipulating the projection and selection fields that are passed to the content provider:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "'"
unrecognized token: "' FROM Passwords" (code 1): , while compiling: SELECT ' FROM Passwords
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'"
unrecognized token: "')" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')
If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may
be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module
app.provider.query is used to list all the database tables:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "*
FROM SQLITE_MASTER WHERE type='table';--"
| type | name | tbl_name | rootpage | sql |
| table | android_metadata | android_metadata | 3 | CREATE TABLE ... |
| table | Passwords | Passwords | 4 | CREATE TABLE ... |
| table | Key | Key | 5 | CREATE TABLE ... |
SQL Injection may also be used to retrieve data from otherwise protected tables:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM Ke
y;--"
| Password | pin |
| thisismypassword | 9876 |
You can automate these steps with the scanner.provider.injection module, which automatically finds vulnerable
content providers within an app:
dz> run scanner.provider.injection -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Injection in Projection: