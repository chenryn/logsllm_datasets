title:Enabling Internet-Wide Deployment of Explicit Congestion Notification
author:Brian Trammell and
Mirja K&quot;uhlewind and
Damiano Boppart and
Iain Learmonth and
Gorry Fairhurst and
Richard Scheffenegger
Enabling Internet-Wide Deployment
of Explicit Congestion Notiﬁcation
Brian Trammell1(B), Mirja K¨uhlewind1, Damiano Boppart1,
Iain Learmonth2, Gorry Fairhurst2, and Richard Scheﬀenegger3
1 Communication Systems Group, ETH Zurich, Zurich, Switzerland
PI:EMAIL
2 University of Aberdeen, Aberdeen, Scotland, UK
3 NetApp, Inc., Vienna, Austria
Abstract. Explicit Congestion Notiﬁcation (ECN) is an TCP/IP exten-
sion to signal network congestion without packet loss, which has barely
seen deployment though it was standardized and implemented more than
a decade ago. On-going activities in research and standardization aim to
make the usage of ECN more beneﬁcial. This measurement study pro-
vides an update on deployment status and newly assesses the marginal
risk of enabling ECN negotiation by default on client end-systems. Addi-
tionally, we dig deeper into causes of connectivity and negotiation issues
linked to ECN. We ﬁnd that about ﬁve websites per thousand suﬀer
additional connection setup latency when fallback per RFC 3168 is cor-
rectly implemented; we provide a patch for Linux to properly perform
this fallback. Moreover, we detect and explore a number of cases in which
ECN brokenness is clearly path-dependent, i.e. on middleboxes beyond
the access or content provider network. Further analysis of these cases
can guide their elimination, further reducing the risk of enabling ECN
by default.
1 Introduction
Explicit Congestion Notiﬁcation (ECN) [1] is a TCP/IP extension that allows
congestion signaling without packet loss. Even though ECN was standardized in
2001, and it is widely implemented in end-systems, it is barely deployed. This
is due to a history of problems with severely broken middleboxes shortly after
standardization, which led to connectivity failure and guidance to leave ECN
disabled. The authors revisited this question in [2], ﬁnding an increase in the
number of servers which successfully negotiate and use ECN, but with nearly no
use of ECN within a national-scale access network.
In this paper we show that server-side support for ECN negotiation has
further increased. Unfortunately, server-side support is only the ﬁrst step. Since
TCP clients initiate ECN negotiation, it is client-side support and negotiation by
default that is necessary to complete deployment on end-systems. While ECN
must also be enabled on routers together with an Active Queue Management
(AQM) scheme in order to be useful, the lack of deployment on end-systems
reduces the incentive to deploy on routers and vice-versa. In the past two years,
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 193–205, 2015.
DOI: 10.1007/978-3-319-15509-8 15
194
B. Trammell et al.
there has been increasing deployment of AQM [3] in the Internet; we expect this
trend to continue and to drive router support for ECN. We therefore choose to
focus on end-system deployment to break this loop, in the context of supporting
on-going research in this area [4] to deﬁne more beneﬁcial signaling. Speciﬁcally,
this work aims to answer the following questions:
– What is the marginal risk of enabling ECN by default at the client-side?
– How can we detect and localize connectivity/signaling issues related to ECN?
To do so, we performed the following active measurements on nearly 600,000
popular web servers1 taken from the Alexa top million list:
– Connectivity dependency: can ECN negotiation cause connectivity issues?
– ECN readiness: how many webservers will negotiate ECN if asked?
– ECN signaling anomalies: is ECN signaling viable to use end-to-end?
Speciﬁcally, the key focus of this work is on connectivity issues caused by
ECN, in order to provide operational guidance and an answer to our most impor-
tant question: is it now safe to use ECN-by-default on the client side to drive
ECN deployment in the Internet? On this point we conclude that enabling ECN
by default on client devices carries with it a low marginal risk of increased
connection latency when fallback as recommended in RFC 3168 [1] is properly
implemented; more measurement is necessary to localize the rare devices within
the Internet that may lead to path-dependent failure of ECN-enabled connec-
tions. We provide a patch for Linux at http://ecn.ethz.ch/ecn-fallback; work to
incorporate fallback into the Linux kernel mainline is ongoing.
All tools used in this study are available as open-source software, as are
the raw data and intermediate results listing servers by ECN support status,
from http://ecn.ethz.ch. We intend this work to introduce an ongoing ECN and
middlebox impairment observatory which will support an eﬀort to deploy ECN
on an Internet-wide scale.
1.1 Overview of Explicit Congestion Notiﬁcation (ECN)
ECN uses two bits in the IP header to mark traﬃc as ECN-capable or as having
experienced congestion along the path, and when used with TCP it uses two
ﬂags, ece and cwr, to negotiate the use of ECN in the TCP handshake and
subsequently to echo congestion marking back to the sender during the connec-
tion. To review, a client sends an initial syn ece cwr to the server to negotiate
ECN; to conﬁrm negotiation, the server responds syn ack ece, or to deny,
simply syn ack. Section 6.1.1.1 of RFC 3168 [1] recommends falling back to
non-ECN support if the initial syn ack ece connection attempt fails.
After successful negotiation, data packets from each side can be marked
using one of the ECN-Capable Transport codepoints (ect(0)/ect(1)) in the
1 We examine HTTP in this study for comparison with related work, and because
large-scale probing of HTTP is less likely to be regarded as abuse than other services.
Enabling Internet-Wide Deployment of Explicit Congestion Notiﬁcation
195
IP header, which is replaced with the ce codepoint if a router’s AQM along
the path determines the link is congested. This congestion signal is echoed back
to the sender marking all acknowledgments with the ece ﬂag until the sender
acknowledges the receipt of the congestion signal with the cwr ﬂag.
This describes the case where everything goes well. The negotiation and
signaling in ECN can however go badly for various reasons. First, the two bits
in the IPv4 and IPv6 header used for ECN were previously part of the Type of
Service (ToS) byte, and there are still middleboxes and ﬁrewalls deployed in the
Internet that use the old deﬁnition of these bits, interfering with ECN signaling.
Second, ﬁrewalls may be conﬁgured to strip the ECN bits in the IP or TCP
header, leading to negotiation and signaling errors; or to drop syn ack ece,
speciﬁcally to disable ECN, leading to connection failure. Third, end hosts and
TCP proxies may have design or implementation faults in their handling of the
semantics of the ECN bits.
1.2 Related Work
This work follows directly our previous work [2] and from [5], which sought to
measure the state of ECN deployment as of August 2014 and September 2011,
respectively. Our numbers for ECN capability and non-capability of webservers,
being taken from the Alexa top million and using a comparable methodology, are
therefore directly comparable to those in [2,5]. We show that ECN support in
webservers continues to increase, and reached the majority of the top million
by the middle of 2014. Methodologies for packet mangling and marking are also
comparable to those in [5]. More generally, this work follows from the continuing
history of measurements of the Internet to estimate the ability to deploy new
featues at the endpoints (e.g. Honda et al [6], Medina et al [7]), and contributes
a data point to the continuing eﬀort to improve the situation (e.g. the IAB Stack
Evolution program2 [8], or middlebox cooperation schemes such as [9]).
2 Methodology
2.1 Measurement Setup and Data Set
All measurements in this paper were performed from vantage-points running
Ubuntu 14.04 (kernel 3.13.0 without syn retry fallback as in RFC3168 [1]),
run by commercial hosting provider Digital Ocean, in London, New York, and
Singapore. Initial investigation showed that all ECN signaling works properly
on this provider’s networks, and all sites have native dual-stack connectivity.
We ran trials on three seperate occasions, on 27 August, 4 September, and 9
September 2014.
As with previous work on testing ECN readiness of webservers [2,5], we select
our targets from Alexa’s publicly available top million websites list. We then
resolve these to at most one IPv4 and one IPv6 address per site. Duplicate IP
2 http://www.iab.org/activities/programs/ip-stack-evolution-program.
196
B. Trammell et al.
addresses are eliminated, taking the highest-ranked website for each address.
Name resolution was performed on 27 August 2014 from the London vantage
point using Google’s public DNS server (8.8.8.8), resulting in 581,737 unique
IPv4 addresses and 17,029 unique IPv6 addresses.
2.2 ECN-Spider and QoF
We built an active measurement tool atop the operating system’s ECN imple-
mentation, to test ECN negotiation and negotiation-linked connectivity. This
tool, called ECN Spider, is implemented in Python 3. ECN Spider takes as input
a list of IP addresses along with the associated domain name and a number as
a label to be used in later analysis; in this work, we use the Alexa rank. For
each unique address, the tool then simultaneously opens one connection without
attempting to negotiate ECN and one connection attempting to negotiate ECN,
and reports the connection status for each, along with timing and HTTP status
information.
ECN Spider’s design is based on utilizing Linux’s system-level conﬁguration
of ECN negotiation using the sysctl facility, using the implemented TCP stack
instead of packet injection. For each site, we must therefore:
1. disable ECN using sysctl
2. open a socket to the target (attempts a syn 3whs)
3. enable ECN using sysctl
4. open a socket to the target (attempts a syn ece cwr 3whs)
5. perform HTTP requests via both sockets.
To make it possible to test a half million websites in a reasonable amount
of time, the sysctl calls are performed in their own thread, which synchro-
nizes with several hundred worker threads, amortizing the cost (about 10ms) of
changing the system-wide setting. Each connection attempt is given 4 seconds
to succeed, which can lead to transient connection failures on slower websites,
but is necessary to keep slow and disconnected sites from delaying testing.
ECN Spider always tests connectivity without ECN ﬁrst, in order to eliminate
the possibility that sending an ECN negotiation packet down a path changes the
result of the non-ECN syn. When performing HTTP requests, ECN Spider does
not follow redirects or otherwise crawl resources on the retrieved page.
While ECN Spider can detect whether or not a connection failed in the
presence or absence of ECN negotiation, it cannot detect whether or not ECN
was actually negotiated or observe negotiation anomalies, since this information
is not available in userland. Therefore, we simultaneously observe the traﬃc
with the QoF [10] ﬂow meter to evaluate the traﬃc generated by ECN Spider
providing TCP ﬂags and ECN signaling information on a per-ﬂow basis.
2.3
IPtables Packet Mangling
We also combined ECN Spider with the Linux iptables connection tracking and
packet-mangling facilities in order to test the three following cases:
Enabling Internet-Wide Deployment of Explicit Congestion Notiﬁcation
197
1. ece response: mark all outgoing packets with ce to verify that we see ece
2. cwr response: mark all incoming packets with ce to verify that we see cwr in
response to ece-marked ACKs
3. ce and ect blackhole testing: mark syn with ce/ect(0)/ect(1) to verify
that marked packets are not dropped on path.
In all cases the TCP MSS was set to 300 bytes, in order to split HTTP
requests into multiple packets. For the ece and cwr response testing, we used
QoF for data analysis; for the ce and ect blackhole testing, we analyzed ECN
Spider’s connectivity logs assuming that a path that drops marked syns would
also drop other marked packets.
3 The Marginal Risk of Enabling ECN by Default
In our previous work [2], we found a multiple order-of-magnitude diﬀerence
between the proportion of webservers supporting ECN negotiation and marking,
and passively-measured ﬂows on a university network actually negotiating and
using ECN. Since webserver support is largely driven by the default conﬁgu-
ration of the server operating system, the question naturally arises of whether
client-side support could be driven by the same mechanism.
This is not a viable strategy if there still exist many paths through the Inter-
net where attempting to negotiate ECN causes connectivity issues. Note that
even with RFC3168 fallback, ECN-dependent connectivity can lead to addi-
tional connection setup latency, which depends on the client operating system.
So we turn our attention to the question of marginal risk: how many additional
connectivity issues can we expect if we turn ECN on by default?
3.1 Connectivity Dependency and Anomalies
Table 1 shows that for the vast majority of sites we probed, connectivity is clearly
independent of whether ECN is requested or not. 578,433 (99.43 %) of IPv4 and
16945 (99.50 %) of IPv63 exhibit no ECN-dependent connectivity.
In 2443 cases for IPv4 and 16 cases for IPv6, connectivity apparently depends
on ECN not being requested.The vast majority of these (2193 IPv4 and 13 IPv6
hosts) exhibit stable connectivity dependency at or near the host itself: every
attempt to connect to the host with ECN failed, and every attempt to connect
without succeeded.
This leaves us with the anomalous cases. We observe stable ECN dependency
on the path in 15 cases for IPv4. Here, every connection attempt requesting
ECN fails from one vantage point but succeeds from another. 6 of these sites
are within a single AS (26496, GoDaddy.com LLC), and occur on servers used
to park domain names. The remaining 9 may be more problematic, as they