We categorize the flow as being limited by wireless loss. At this stage, the remaining flows are likely experiencing high delays in the wireless network. We further classify these transactions based on whether they are limited by queuing delays (dq, such as background traffic, self-frames, or frames to other users), power-saving mode (dps), or MAC delay (dmac). For transactions that are limited by high MAC delays, we investigate further. If more than half of the delay is due to exponential backoffs, we label the transaction as contention/backoff-limited. Although high wireless losses typically cause numerous exponential backoffs due to local retransmissions, we have already filtered out these cases. Transactions that are limited by backoffs often experience many local 802.11 retransmissions but do not suffer from TCP layer losses. For instance, some vendors may retry up to 15 times. The frame exchange might eventually succeed, but the exponential backoffs can take over 220 ms.

If an 802.11g client is connected to an over-protected Access Point (AP) using 802.11g protection mode [7], we label the transaction as over-protection limited. Over-protection occurs when an idle, slow 802.11b client causes all fast 802.11g clients to take up to twice as long to transmit data compared to normal 802.11g. If none of these conditions apply, we label the transactions as limited by an unknown factor. Such transactions are unlikely to benefit significantly from addressing the potential issues we have considered.

We applied this analysis to bulk flows in a trace of typical wireless activity in our network (Section 3). We identified 2,605 bulk transactions in 1,375 TCP flows from 864 users, with 85% of the flows being HTTP or SCP downloads. We filtered out 28% of the transactions because the modeled throughput was not within 10% of the measured throughput. For example, the analytic model tends to over-predict throughput for low-bandwidth flows, and we are continuing to refine our approach for these cases.

Figure 7 shows the breakdown of root causes across the remaining, properly-modeled transactions. The graph reveals four key findings:
1. Flows can be limited by a wide range of different causes. To diagnose a particular user's poor TCP throughput, we must model and check all such causes.
2. Over 20% of the transactions are limited by wireless loss, primarily due to a faulty 802.11g link-level retry policy used by the APs in our building. At 802.11g rates, the APs only perform one link-level retry before giving up when in protection mode, which limits TCP performance.
3. Over 22% of the transactions are limited by overly conservative use of 802.11g protection mode by our APs. Both the retry and over-protection problems can be resolved by revising the AP software. The vendor has acknowledged the issue and is investigating solutions.
4. Nearly 27% of the transactions are limited by the receiver window size, indicating that, although wireless conditions may initially be suspect, throughput can be limited by the client’s TCP stack configuration. Any diagnosis must consider causes outside of wireless conditions as well.

### 6. Mobility

The second class of overhead in the 802.11 environment is the cost of various types of mobility management, including scanning for access points, association, ARP, DHCP, authentication, etc. Mobility management overhead can cause delays, such as waiting for an IP address when joining a network for the first time, or interruptions in normal network activity due to scanning for alternate APs. In this section, we describe how we model delays due to mobility management overhead and apply the model to traffic in our trace to illustrate how these delays impact network use under typical wireless conditions.

#### 6.1 Overhead Analysis

We categorize mobility management packets into one of eight categories: scanning, Power Save Mode (PSM) sleep, association (including authorization, association, reauthorization, and reassociation requests), DHCP, DNS, ARP, TCP, and "misc". In our environment, "misc" includes WEP/WPA (although none of our APs support encryption, clients may occasionally send such packets), IPv6, mDNS, Windows networking, and miscellaneous other IP traffic. We then organize the categorized packets into contiguous spans, considering only outgoing packets and ignoring inbound packets (except for deauthorization packets sent by the base station, which terminate the current span).

How much time do clients spend performing mobility management tasks? Figure 8 presents a time series of the average fraction of time an active client spends in each type of span. The graph plots five-second bins, averaged over one-minute intervals. For clarity, we show only the categories that take a significant part of a client’s time: TCP, power save mode, and scanning. The "Other" category includes association, DHCP, DNS, ARP, and "misc" spans. Within each five-second bin, we calculate the fraction of time each active client spends in each type of span, normalized for the number of clients active in that bin. If a client sends no packets in a five-second interval, it is not counted. While the absolute fraction of active time in any interval depends on the bin size (clients are bursty; the longer the sample period, the less dense the activity), the relative length of each type of span remains relatively constant. From the graph, we can conclude that roughly one-third of a client's active time is spent scanning or in other maintenance activities (ARP, DHCP, association, etc.)—overhead directly due to mobility maintenance.

#### 6.2 Impact of Scanning

Figure 8 shows that 802.11 clients are constantly scanning for other APs that may offer better associations. If the station is otherwise idle at the time, scanning is inconsequential—at least from the client's perspective. However, if the interface is busy, this behavior results in observable delay.

To quantify the delay observed by active 802.11 clients due to scanning, we refine our model to isolate scan events that occur while the client was otherwise occupied. Because we do not know precisely what a given client is doing at any point in time, we make a conservative estimate. We label a TCP span "active" if the throughput exceeds 100 bps in a five-second bin. Otherwise, we label it "idle."

To what extent does mobility management interrupt client activity, thereby imposing undesirable delays? Returning to our trace, about 40% of stations have no interruptions at all, either because our criteria are too strict, the cards are smart enough to avoid interrupting, or the stations are not active enough during our monitoring period. Figure 9 shows the CDF of interruption durations for the remaining 60% of the stations. The average interruption lasts for roughly 250 ms, and over 20% of interruptions last longer than one second. Most interruptions are caused by scanning behavior, but we also observe a substantial number of occasions where the station goes into power-save mode (i.e., sends a NULL packet with power save on, followed eventually by a NULL packet with power save off). The "PSM Sleep" line in Figure 9 shows that, while PSM interruptions can be much shorter than scans, the average duration is roughly comparable and is unlikely to take longer than a second.

Short interruptions might be tolerable if they occurred infrequently, but Figure 10 shows that, for hosts that experience interruptions, they occur with wildly varying frequency. The average interrupted host is interrupted only once every 10 seconds or so. Such interruptions would not significantly affect throughput, hence they fall into the "misc" category in our previous TCP analysis in Figure 7. However, 10% of the interrupted hosts are interrupted more than once a second, which is more likely to frustrate users using interactive applications like SSH.

In addition to delaying traffic at the scanning station itself, probes also tend to exacerbate the hidden terminal problem. Recall that the hidden terminal problem occurs when two stations transmit to the same third station simultaneously. A scan probe might be received by multiple nearby APs that are unable to hear each other. These "hidden" APs will attempt to respond simultaneously and may cause interference at the client. We detect overlapping transmissions by comparing the start timestamp of every packet destined for an AP with the end timestamps of previous packets directed to the same AP. If they overlap, we mark both packets as having collided due to hidden terminals. We observe that over half of the stations sent probes that collided with another station's packets, and, for the worst offenders, over 10% of their probes collided with other stations' packets. As a result, hosts have to scan frequently to get responses from the available APs.

#### 6.3 Startup

Next, we describe how we model startup delays for when clients first connect to a wireless network. When a client first appears on the 802.11 network, it must initiate a sequence of steps to effectively join the network before it can communicate at the IP level. The standard behavior of a host is as follows:

- **Scan**: Determine a candidate AP to associate with.
- **Associate**: Attempt to associate with the chosen AP.
- **DHCP**: Once the host has successfully joined the 802.11 network, it must obtain an IP address to begin communicating. In our environment, hosts obtain a dynamic IP address through DHCP.
- **ARP**: Equipped with an IP address, the host must determine the MAC address of the next-hop router to route IP packets towards their destination. Hence, the host will issue an ARP "who has" for the IP address of the next-hop router indicated by the DHCP server.
- **DNS**: Finally, once IP routing is established, the host can begin communicating with a non-link-local IP address.