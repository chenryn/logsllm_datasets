we label the ﬂow as wireless-loss limited. At this point, the re-
maining ﬂows are likely victims of the high delays in the wireless
network. We label the transactions as being either limited by queu-
ing delays (dq, i.e., background trafﬁc, frames to self, or frames to
other user), power-save (dps), or MAC delay (dmac) accordingly.
We further investigate transactions limited by high MAC delays.
If over half of the delay is contributed by exponential backoffs,
we label the transaction as contention/backoff limited. Note while
high wireless losses normally cause many exponential backoffs due
to local retransmissions, we have already ﬁltered out these cases.
Typically transactions that are limited by backoffs have many lo-
cal 802.11 retransmissions but do not suffer from TCP layer losses.
For example, some vendors retry up to 15 times. The frame ex-
change might eventually go through but the exponential backoffs
could take over 220 ms.
Finally, if an 802.11g client is connected to an over-protected
AP using 802.11g protection mode [7], we label the transaction
as over-protection limited. Over-protection happens when an idle
slow 802.11b client causes all fast 802.11g clients to take up to
two times longer to transmit data than in normal 802.11g. If none
of these cases apply, we label the transactions as limited by some
unknown factor. Such transactions likely would not beneﬁt signiﬁ-
cantly by addressing any of the potential issues we considered.
We apply the above analysis to the bulk ﬂows in a trace of typi-
cal wireless activity in our network (Section 3). we identify 2,605
bulk transactions in 1,375 TCP ﬂows from 864 users. 85% of the
ﬂows are HTTP or SCP downloads. We ﬁltered out 28% of the
transactions because the modeled throughput is not within 10% of
the measured throughput; we ﬁnd, for example, that the analytic
model over-predicts throughput for low-bandwidth ﬂows, and we
are continuing to reﬁne our approach for these cases.
Figure 7 shows the breakdown of root causes across the remain-
ing, properly-modeled transactions. The graph shows four interest-
ing results. First, ﬂows can be limited by a wide range of different
causes; for a particular user experiencing poor TCP throughput, we
must model and check all such causes to diagnose their particular
problem. Second, over 20% of the transactions are limited by wire-
less loss. This is mainly caused by a faulty 802.11g link-level retry
policy used by the APs in our building. At 802.11g rates, the APs
only perform one link-level retry before giving up when the AP is
in protection mode; not surprisingly, this policy limits TCP perfor-
mance when using those rates. Third, over 22% of the transactions
are limited because our APs are too conservative in using 802.11g
protection mode. Thus, both the retry and over-protection problems
can be easily solved by simply revising the AP software. Indeed,
the vendor has acknowledged the problem we reported and started
to investigate the solutions. Finally, nearly 27% of the transactions
turn out to be limited by the receiver window size — indicating that,
although wireless conditions may initially be suspect, throughput
can be limited simply by the client’s TCP stack conﬁguration. Any
diagnosis must suspect causes outside of wireless as well.
6. MOBILITY
The second class of overhead in the 802.11 environment is the
expense of the various types of mobility management, including
scanning for access points, association, ARP, DHCP, authentica-
tion, etc. Mobility management overhead can cause delays, for
example, while waiting for an IP address when joining a network
for the ﬁrst time, or because of interruptions of normal network ac-
tivity due to scanning for alternate APs. In this section we describe
how we model delays due to mobility management overhead, and
we apply the model to trafﬁc in our trace to illustrate how these
delays can impact network use under typical wireless conditions.
6.1 Overhead analysis
We categorize mobility management packets into one of eight
categories: scanning, PSM sleep, association (including authoriza-
tion, association, reauthorization, and reassociation requests), DHCP,
DNS, ARP, TCP, and “misc”. In our environment, “misc” includes
WEP/WPA (while none of our APs support encryption, clients may
occasionally send such packets), IPv6, mDNS, Windows network-
ing, and miscellaneous other IP trafﬁc. We then organize the cate-
gorized packets into contiguous spans; we consider outgoing pack-
ets only and ignore packets in-bound to the client (with the ex-
ception of deauthorization packets sent by the base-station, which
terminate the current span).
How much time do clients spend performing mobility manage-
ment tasks? Figure 8 presents a time series of the average fraction
of time an active client spends in each type of span. The graph
plots ﬁve-second bins, averaged over one-minute intervals. For
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
e
m
i
t
t
n
e
i
l
c
f
o
n
o
i
t
c
a
r
F
TCP
Power Saving
Scan
Other
Scan
PSM Sleep
100%
80%
60%
40%
20%
s
n
o
i
t
a
t
s
f
o
n
o
i
t
c
a
r
F
0%
11:00
11:10
11:20
11:30
11:40
11:50
12:00
0%
 1e-04  0.001
 0.01
 0.1
 1
 10
 100
Time, seconds
Figure 8: Time series of different types of spans.
Figure 9: CDF of duration for scans and sleep periods.
clarity, we show only the categories that take the signiﬁcant part of
a client’s time: TCP, power save mode, and scanning; the “Other”
category includes association, DHCP, DNS, ARP, and “misc” spans.
Within each ﬁve-second bin, we calculate the fraction time each ac-
tive client spends in each type of span, and normalize for the num-
ber of clients active in that bin. If a client sends no packets in a
ﬁve-second interval, it is not counted. While the absolute fraction
of active time in any interval depends on the bin size (clients are
bursty; the longer the sample period the less dense the activity),
the relative length of each type of span remains relatively constant.
From the graph we can conclude that roughly one third of a clients
active time is spent scanning or in some other maintenance activity
(ARP, DHCP, association, etc.) — overhead directly due to mobil-
ity maintenance.
6.2 Impact of scanning
Figure 8 shows that 802.11 clients are constantly scanning for
other APs that may offer better associations. If the station is other-
wise idle at the time, scanning is inconsequential — at least from
the point of view of the client. If the interface is busy, on the other
hand, this behavior results in observable delay.
We therefore further reﬁne our model so that we can quantify the
delay observed by active 802.11 clients due to scanning. Our goal
is to isolate those scan events that occur while the client was oth-
erwise occupied. Because we do not know precisely what a given
client is doing at any point in time, we have to make a conservative
estimate. To do this, we label a TCP span “active” if the throughput
is over 100 bps in a ﬁve-second bin. Otherwise we label it “idle”.
To what extent does mobility management interrupt client activ-
ity, thereby imposing undesirable delays? Going back to our trace,
about 40% of stations have no interruptions at all, either because
our criteria is too strict, the cards are smart enough to avoid inter-
rupting, or the stations are just not active enough during our moni-
toring period. Figure 9 shows the CDF of interruption durations for
the remaining 60% of the stations. The average interruption lasts
for roughly 250 ms, and over 20% of interruptions last longer than
one second. Most interruptions are caused by scanning behavior,
but we also observe a substantial number of occasions where the
station goes into power-save mode (i.e., sends a NULL packet with
power save on, followed eventually by NULL packet with power
save off). The “PSM Sleep” line in Figure 9 shows that, while PSM
interruptions can be much shorter than scans, the average duration
is roughly comparable and is unlikely to take longer than a second.
Short interruptions might be tolerable if they occurred infrequently,
100%
80%
60%
40%
20%
s
n
o
i
t
a
t
s
f
o
n
o
i
t
c
a
r
F
0%
 0.01
 0.1
 1
 10
 100
 1000  10000
Time, seconds
Figure 10: CDF of intervals between scans.
but Figure 10 shows that, for hosts that experience interruptions,
they occur with wildly varying frequency. The average interrupted
host is interrupted only once every 10 seconds or so. Such inter-
ruptions would not signiﬁcantly affect the throughput, hence they
fall in the “misc” category in our previous TCP analysis in Fig-
ure 7. However, 10% of the interrupted hosts are interrupted more
than once a second, interruptions which are more likely to frustrate
users using interactive applications like SSH.
In addition to delaying trafﬁc at the scanning station itself, probes
also tend to exacerbate the hidden terminal problem. Recall that
the hidden terminal problem occurs when two stations transmit to
the same third station simultaneously. A scan probe might be re-
ceived by multiple nearby APs which are unable to hear each other.
These “hidden” APs will attempt to respond simultaneously and
may cause interference at the client. We are able to detect over-
lapping transmissions by comparing the start timestamp of every
packet destined for an AP with the end timestamps of previous
packets directed to the same AP. If they overlap, we mark both
packets as having collided due to hidden terminals. We observe
that over half of the stations sent probes that collided with another
station’s packets, and, for the worst offenders, over 10% of their
probes collided with other stations’ packets. As a result, hosts have
to scan frequently to get responses from the available APs.
100%
80%
60%
40%
20%
s
n
o
i
t
a
t
s
f
o
#
0%
 0.1
Good only
First to TCP
Without OS delay
 1
 10
 100
 1000  10000  100000
Time, seconds
100%
80%
60%
40%
20%
s
n
o
i
t
a
t
s
f
o
#
0%
 1e-04  0.001  0.01
Scan
Associate
ARP
DHCP
DNS
 0.1
 1
 10
 100  1000
Total time (seconds)
Figure 11: CDF of the delay experienced on startup by 802.11
clients in our network.
Figure 12: CDF of time spent in each successful phase of
startup.
6.3 Startup
Next we describe how we model startup delays for when clients
ﬁrst connect to a wireless network. When a client ﬁrst appears on
the 802.11 network it must initiate a sequence of steps to effectively
join the network before it can communicate at the IP level. The
standard behavior of a host is as follows:
• Scan. Determine a candidate AP to associate with.
• Associate. Attempt to associate with the chosen AP.
• DHCP. Once the host has successfully joined the 802.11 net-
work, it must obtain an IP address to begin communicat-
ing. In our environment, hosts obtain a dynamic IP address
through DHCP.
• ARP. Equipped with an IP address, the ﬁrst thing a host must
do is determine the MAC address of the next-hop router to
route IP packets towards their destination. Hence, the host
will issue an ARP “who has” for the IP address of the next-
hop router indicated by the DHCP server.
• DNS. Finally, once IP routing is established, the host can
begin communicating with a non link-local IP address. Typ-