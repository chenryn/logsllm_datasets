### Notation and Definitions
- **M**: The number of inputs (or outputs) per loop iteration.
- **C**: The size of the circuit representing the loop body.

### Figure 6: Comparison of Cost for Verifier in Each Instance
| Method | Non-Amortized Cost | Amortized Cost |
|---------|---------------------|-----------------|
| **Task Computing** | | |
| **P: Construct Proof** | | |
| Zaatar | 1:10h | 164:3h |
| Pinocchio | 9:9ms | 0:29s + 696:67s |
| Our Algorithm | 1281s + 7:70s | 160s + 111:34h |
| **P: Issue Responses** | | |
| Zaatar | 96:76h | 445:56h |
| Pinocchio | 160s | 160s |
| Our Algorithm | 38:6ms + 381s | 124:38h |
| **Map** | 0:9ms | N/A |
| **Div** | 3μs, 220-bit | N/A |
| **Rand** | 260ns, 220-bit | N/A |
| **Oper** | 130μs, 220-bit | N/A |
| **β**: 8 | N/A | N/A |
| **Dec** | 170μs, 220 bits | N/A |
| **Exp** | 118:3μs, fixed base, optimized for twist curve | N/A |
| **Mult** | 320ns, 220-bit | N/A |
| **Muex** | 401:0μs, 254-bit, optimized for twist curve | N/A |
| **βlin**: 20 | N/A | N/A |
| **Enc** | 88μs, 220 bits | N/A |

**Note**: The costs for both the first and second layers in our design are listed, connected by “+”.

### Figure 7: An Example Loop and Its Cost
- **K**: Number of executions = 500.
- **M**: Width of inputs/outputs = 1000.
- **Q**: Width of extra inputs for each execution = M².
- **C**: Circuit size of the loop body = M².
- **D**: Degree of the polynomial computed by the circuit = 2.

Using published models ([24, 23]), the costs are instantiated as shown in Figure 7. All basic operation costs are borrowed from Zaatar [24] and Pinocchio [23]. Our protocol outperforms the others in terms of amortized and prover's costs, indicating that a smaller batching size is sufficient to ensure that the average verification cost per instance is less than re-computing.

### 6.3 Further Discussion
Upon careful examination of our protocol, a natural question arises: why can't the block size be K'·C where K' ≠ 1? If we group K' successive loop iterations into larger blocks (K' < K), we can further group several sequential large blocks into an even larger block. This results in a multi-layered circuit structure.

- **First Layer Block**: Viewed as one big block, denoted by \(\phi^{(1)}: F^M + K \cdot Q \rightarrow F^M\).
- **Second Layer Block**: Consists of K' smaller blocks, denoted by \(\phi^{(2)}: F^M + K \cdot Q / K' \rightarrow F^M\).

In the l-th layer, the block is denoted by \(\phi^{(l)}: F^M + K \cdot Q / (K')^{l-1} \rightarrow F^M\). The l-th layer block is composed of K' lower-layer blocks, i.e., (l+1)-th layer blocks. At the L-th layer, each block corresponds to one loop iteration.

The reduction of verification can be recursively applied in this multi-layer view. According to our current protocol, the correctness of computing \(\phi^{(1)}\) is reduced to the correctness of computing \(\phi^{(2)}\), and so on, until the last layer.

At first glance, this recursive protocol seems promising. However, the first layer dominates the cost, leading to high overall costs due to recursion. Specifically, if we have multiple-layer blocks, the degree of the polynomial computed by a block increases exponentially. Simple analysis shows that the cost of the first layer dominates, making the total cost proportional to \(O(D^{K'})\), which is much higher than our current protocol. In our current protocol, the block is one loop iteration, and the degree of the polynomial is D. This is also why sequential circuits, where the output of each gate is an input to the next gate, are the worst-case scenario for our protocol. Such circuits are better handled by Zaatar, Pinocchio, etc.

### 7. Related Work
Extensive research has been motivated by the problem of verifying computation, aiming to verify the result of general computation. This can be seen as originating from more abstract problems in computational theory, such as interactive proof (IP) systems [18] and probabilistically checkable proof (PCP) systems [1, 2]. Recently, the security community has been extending and refining classical proof systems to make theoretical cryptographic protocols practical.

#### Categories of Verifiable Computation Schemes
1. **IKO Argument System**: Based on the IKO argument system proposed by Ishai et al. [19], these systems [25, 26, 24, 31] formulate the proof for result correctness into a linear PCP with a commitment constructed in the pre-processing phase. These approaches are efficient when batching over a large number of computation instances and require only standard cryptographic assumptions.
2. **QSPs/QAPs**: Parno et al. [24, 23, 7] introduced a new characterization of the NP complexity class using QSPs/QAPs, such as Pinocchio, which supports public verifiability and zero-knowledge. Ben-Sasson et al. [6, 7, 8] provide another publicly verifiable and zero-knowledge scheme, BCGTV. Our work inherits the linear-PCP style designs but does not support zero-knowledge. XAG [31] is the only known work built on linear-PCP that supports zero-knowledge proofs.
3. **Delegation of Computation (GKR)**: Motivated by GKR [17], IP systems [12, 14] assure clients that an untrusted prover has performed the correct computation. Thaler [28] found that specific circuits can have lower pre-processing costs, but they must satisfy regular wiring patterns or data-parallel structures. GKR-style systems typically require more interaction, increasing bandwidth costs.

#### Hybrid Protocols
- **Allspice [29]**: Integrates both Zaatar and CMT, automatically determining which is more efficient for verification.
- **Argument Systems Without Pre-Processing**: Some studies [5] aim to avoid the pre-processing phase for the verifier, based on short PCPs, but these are still theoretical.

#### Compilers
Since state-of-the-art verification protocols are based on arithmetic circuits, compilers that transform high-level programs (e.g., C) into circuit representations are crucial. Zaatar’s and Pinocchio’s compilers map a wide range of computations into corresponding arithmetic circuits. TinyRAM [7] and vnTinyRAM [8] use innovative techniques to compile C programs with the same number of executions into a single circuit, performing well for programs with many memory accesses and control flows. Walﬁsh et al. [30] evaluate these compilers and find that TinyRAM’s circuit representation is orders of magnitude larger than those in Pinocchio and Zaatar.

### 8. Conclusions
This paper addresses two fundamental problems in verifiable computation:
1. Whether and what computations can have lower amortized and proof generation costs.
2. How to handle loops concisely after circuit generation.

We show that for computations with loops, Block Programs can reduce the verifier's amortized cost to the sum of two parts: one for verifying one loop iteration (which does not scale with the number of repetitions) and the other linear in the degree of the loop body circuit and the number of iterations. From the theory of arithmetic circuit complexity, the degree of most circuits is far less than their size, making our design more efficient. We also improve the prover's cost from quasilinear in the size of the loop body circuit to quasilinear in the degree of the loop body, plus the cost of generating a proof for one loop iteration.

For applications requiring many loop executions, such as compute-intensive and data-intensive computations, our approach is expected to perform better than existing protocols. However, for "deep" loop bodies, where the output of each gate is an input to the next gate, standard algorithms like Zaatar and Pinocchio may be more suitable.

### 9. Acknowledgments
We appreciate anonymous reviewers for valuable suggestions and comments. This material is supported in part by the National Science Foundation under Grant No. 1320351.

### 10. References
[1] S. Arora and S. Safra. Probabilistic checking of proofs; a new characterization of np. In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, SFCS ’92, pages 2–13, Washington, DC, USA, 1992.

[2] L. Babai, L. Fortnow, L. A. Levin, and M. Szegedy. Checking computations in polylogarithmic time. In Proceedings of the twenty-third annual ACM symposium on Theory of computing, STOC ’91, pages 21–32, New York, NY, USA, 1991.

[3] M. Bellare, S. Goldwasser, C. Lund, and A. Russell. Efficient probabilistically checkable proofs and applications to approximations. In Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing, STOC ’93, pages 294–304, New York, NY, USA, 1993. ACM.

[4] M. Bellare, M. Kiwi, and M. Sudan. Linearity testing in characteristic two. IEEE Transactions on Information Theory, 1996.

[5] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. On the concrete-efficiency threshold of probabilistically-checkable proofs. Electronic Colloquium on Computational Complexity (ECCC), 19:45, 2012.

[6] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. Fast reductions from RAMs to delegatable succinct constraint satisfaction problems: extended abstract. In ITCS, pages 401–414, 2013.

[7] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza. SNARKs for C: Verifying program executions succinctly and in zero knowledge. In Proceedings of the 33rd Annual International Cryptology Conference, CRYPTO ’13, pages 90–108, 2013.

[8] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct non-interactive zero knowledge for a von neumann architecture. In Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, USA, August 20-22, 2014., pages 781–796, 2014.

[9] N. Bitansky, A. Chiesa, Y. Ishai, O. Paneth, and R. Ostrovsky. Succinct non-interactive arguments via linear interactive proofs. In Proceedings of the 10th Theory of Cryptography Conference on Theory of Cryptography, TCC’13, pages 315–333, Berlin, Heidelberg, 2013. Springer-Verlag.

[10] G. Brassard, D. Chaum, and C. Cr´epeau. Minimum disclosure proofs of knowledge. J. Comput. Syst. Sci., 37(2):156–189, 1988.

[11] B. Braun, A. J. Feldman, Z. A. Ren, S. Setty, A. J. Blumberg, and M. Walﬁsh. Verifying computations with state. In SOSP, 2013.

[12] R. Canetti, B. Riva, and G. N. Rothblum. Two 1-round protocols for delegation of computation. Cryptology ePrint Archive, Report 2011/518, 2011. http://eprint.iacr.org/.

[13] X. Chen, N. Kayal, and A. Wigderson. Partial Derivatives in Arithmetic Complexity and Beyond (Foundations and Trends(R) in Theoretical Computer Science). Now Publishers Inc., Hanover, MA, USA, 2011.

[14] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical verified computation with streaming interactive proofs. In Proceedings of the 3rd Innovations in Theoretical Computer Science Conference, ITCS ’12, pages 90–112, New York, NY, USA, 2012. ACM.

[15] R. Gennaro, C. Gentry, and B. Parno. Non-interactive verifiable computing: outsourcing computation to untrusted workers. In Proceedings of the 30th annual conference on Advances in cryptology, CRYPTO’10, pages 465–482, Berlin, Heidelberg, 2010. Springer-Verlag.

[16] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic span programs and succinct nizks without pcps. In Proceedings of the IACR Eurocrypt Conference, Eurocrypt 13, 2013.

[17] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating computation: interactive proofs for muggles. In Proceedings of the 40th annual ACM symposium on Theory of computing, STOC ’08, pages 113–122, New York, NY, USA, 2008. ACM.

[18] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge complexity of interactive proof systems. SIAM J. Comput., 18(1):186–208, Feb. 1989.

[19] Y. Ishai, E. Kushilevitz, and R. Ostrovsky. Efficient arguments without short pcps. In Proceedings of the Twenty-Second Annual IEEE Conference on Computational Complexity, CCC ’07, pages 278–291, Washington, DC, USA, 2007.

[20] M. Karchmer and A. Wigderson. On span programs. In In Proc. of the 8th IEEE Structure in Complexity Theory, pages 102–111. IEEE Computer Society Press, 1993.

[21] J. Kilian. A note on efficient zero-knowledge proofs and arguments (extended abstract). In Proceedings of the twenty-fourth annual ACM symposium on Theory of computing, STOC ’92, pages 723–732, New York, NY, USA.

[22] J. Kilian. Improved efficient arguments (preliminary version). In Proceedings of the 15th Annual International Cryptology Conference on Advances in Cryptology, CRYPTO ’95, pages 311–324, London, UK, UK, 1995. Springer-Verlag.

[23] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio: nearly practical verifiable computation. In the IEEE Symposium on Security and Privacy, IEEE S&P 13, 2013.

[24] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Walﬁsh. Resolving the conflict between generality and plausibility in verified computation. EuroSys ’13, 2013.

[25] S. Setty, R. McPherson, A. J. Blumberg, and M. Walﬁsh. Making argument systems for outsourced computation practical (sometimes). In NDSS, 2012.

[26] S. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and M. Walﬁsh. Taking proof-based verified computation a few steps closer to practicality. In USENIX Security, 2012.

[27] A. Shpilka and A. Yehudayoff. Arithmetic circuits: A survey of recent results and open questions. Found. Trends Theor. Comput. Sci., 5:207–388, Mar. 2010.

[28] J. Thaler. Time-optimal interactive proofs for circuit evaluation. In CRYPTO (2), pages 71–89, 2013.

[29] V. Vu, S. Setty, A. J. Blumberg, and M. Walﬁsh. A hybrid architecture for interactive verifiable computation. In the IEEE Symposium on Security and Privacy, IEEE S&P 13, 2013.

[30] M. Walﬁsh and A. J. Blumberg. Verifying computations without reexecuting them: from theoretical possibility to near-practicality. Electronic Colloquium on Computational Complexity (ECCC), 20:165, 2013.

[31] G. Xu, G. Amariucai, and Y. Guan. Delegation of computation with verification outsourcing: Curious verifiers. In Proceedings