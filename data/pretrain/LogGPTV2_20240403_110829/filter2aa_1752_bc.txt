### 时间与进程时间管理

#### 1. 绝对时间与相对时间
- **绝对时间**：表示自1970年1月1日00:00:00 UTC以来的秒数，通常称为Unix时间戳。
- **相对时间**：表示相对于某个特定时间点的时间差。

#### 2. 时间单位
- **jiffy**：Linux内核中的基本时间单位。在x86架构上，HZ（时钟频率）通常是100、250或1000，对应的jiffy分别为0.01秒、0.004秒和0.001秒。

#### 3. 获取当前时间
- **time()**：获取自1970年1月1日以来的秒数。
  ```c
  #include <time.h>
  time_t t;
  time(&t);
  printf("Current time: %ld\n", (long) t);
  ```
- **gettimeofday()**：获取更精确的时间，包括微秒部分。
  ```c
  #include <sys/time.h>
  struct timeval tv;
  gettimeofday(&tv, NULL);
  printf("Seconds: %ld, Microseconds: %ld\n", (long) tv.tv_sec, (long) tv.tv_usec);
  ```

#### 4. 高精度时间
- **clock_gettime()**：获取高精度时间，支持多种时钟类型。
  ```c
  #include <time.h>
  struct timespec ts;
  clock_gettime(CLOCK_REALTIME, &ts);
  printf("Seconds: %ld, Nanoseconds: %ld\n", ts.tv_sec, ts.tv_nsec);
  ```

#### 5. 进程时间
- **times()**：获取进程及其子进程的用户时间和系统时间。
  ```c
  #include <sys/times.h>
  struct tms buf;
  clock_t t = times(&buf);
  printf("User time: %ld, System time: %ld\n", (long) buf.tms_utime, (long) buf.tms_stime);
  ```

#### 6. 设置当前时间
- **stime()**：设置系统时间（需要root权限）。
  ```c
  #include <time.h>
  #define _SVID_SOURCE
  time_t t = 1; // Set time to one second after the epoch
  stime(&t);
  ```
- **settimeofday()**：设置系统时间和时区。
  ```c
  #include <sys/time.h>
  struct timeval tv = { .tv_sec = 31415926, .tv_usec = 27182818 };
  settimeofday(&tv, NULL);
  ```

#### 7. 时间格式化
- **asctime()**：将`struct tm`转换为可读的ASCII字符串。
  ```c
  #include <time.h>
  struct tm *tm_ptr;
  char *time_str = asctime(tm_ptr);
  printf("%s", time_str);
  ```
- **mktime()**：将`struct tm`转换为`time_t`。
  ```c
  #include <time.h>
  struct tm tm = { .tm_year = 123, .tm_mon = 1, .tm_mday = 1, .tm_hour = 0, .tm_min = 0, .tm_sec = 0, .tm_isdst = -1 };
  time_t t = mktime(&tm);
  printf("Time: %ld\n", (long) t);
  ```

通过这些函数和数据结构，可以有效地管理和操作时间及进程时间。希望这些信息对你有所帮助！