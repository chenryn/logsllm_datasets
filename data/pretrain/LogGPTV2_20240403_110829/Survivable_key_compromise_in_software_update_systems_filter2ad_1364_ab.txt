vate key in the process’s memory will not be safe even when
access control mechanisms such as SELinux are used. Even
without obtaining the private key, an attacker who has com-
promised such a system can impersonate the repository and
reply to requests from software update clients. The com-
promise of web servers is not uncommon. There have been
many remotely exploitable vulnerabilities in web server soft-
ware [3, 26] as well as in SSL communication libraries used
by web servers [35, 43].
Even though signing keys are generally maintained more
securely than transport keys, they can still be compromised
if an attacker gains access to an internal server through
vulnerabilities or compromised accounts. Two recent high-
pro(cid:12)le compromises of software signing systems are those of
the popular Linux distributions Fedora and Red Hat.
In August 2008, the server that was used to sign o(cid:14)cial
Fedora software was compromised [23]. This server had on
it a passphrase-protected key. Fedora sta(cid:11) would type the
passphrase on the system when software needed to be signed.
If the attacker was able to obtain the key’s passphrase either
directly (for example, though keystroke logging) or through
brute force, they would have been able to gain control of
any Fedora client that performed an update or new software
installation. Fedora distributed a new key to clients through
an insecure means (using the potentially compromised key
to sign a package to replace the key). Fedora’s website cur-
rently states that they intend to consider better methods for
key migration in the future [21].
Around the same time as the Fedora signing key compro-
mise, Red Hat had one of its systems used for package sign-
ing compromised. The attacker was able to sign multiple
malicious versions of the OpenSSH software with the Red
Hat signing key [46]. Red Hat believes the key itself was not
compromised because they use custom hardware requiring
physical access to the machine in order to obtain the private
key. However, once the malicious software was signed, there
was no secure way to revoke the key or the client’s trust of
the malicious, signed packages.
4.3 Crypto and Implementation Weaknesses
In addition to theft of keys, cryptographic weaknesses also
pose a danger to software update systems. There can be a
degree of control over some of these threats. For example,
implementers of software update systems can choose widely
trusted cryptographic algorithms to lessen the likelihood of
algorithmic weaknesses. Similarly, the ability for an attacker
to derive a private key through brute force methods can be
hampered by using large key sizes.
However, there are areas of cryptographic weaknesses
that these systems have much less control over. One major
problem is that implementation (cid:13)aws in crypto libraries
can render cryptographic algorithms insecure. Such (cid:13)aws
even include the vulnerability of SSL keys to side-channel
attacks [9]. Additionally, the discovery of implementation
problems resulting in weak key generation has occurred
multiple times and has a(cid:11)ected thousands of actively used
keys [12, 28, 58]. In these situations, it is often the case that
the private key can be quickly recovered.
5. ANALYSIS OF CURRENT SYSTEMS
In this section, we look at how software update systems
in use today secure the classes of information identi(cid:12)ed in
Section 3.2. There is a large amount of similarity in the
security properties of these systems, which we summarize in
Table 2. Therefore, we will focus on the general properties
and discuss in more detail the notable di(cid:11)erences.
Current systems authenticate the content of updates in
three primary ways: using SSL, signed (cid:12)les, and with Au-
thenticode. Though Authenticode, Microsoft’s form of code
signing, uses signed (cid:12)les, we make a distinction because Au-
thenticode has the security problems of PKI. Whether the
key that signs (cid:12)les is known directly to the client or authen-
ticated via a PKI, all of these systems use a single key’s
signature on signed (cid:12)les. From the standpoint of immediate
danger due to key compromise, Authenticode and SSL are
strictly worse than direct key trust because, as discussed in
Section 4, there are more keys that can be compromised as
well as other equivalent attacks.
Update availability information is generally either authen-
ticated using SSL or not at all. No update systems provide
or encourage methods of ensuring reasonable timeliness of
update information using signed (cid:12)les.
The correctness of the repository state seen by clients af-
fects package managers and library managers more than ap-
plication updaters. Repositories for application updaters
often contain only a small number of (cid:12)les (and sometimes a
single metadata (cid:12)le), whereas package and library managers
typically need to handle hundreds or thousands of packages
at a time. Some package managers do provide repository
state information through SSL or signed metadata. How-
ever, many package managers do not. Also unfortunate is
that none of the programming language library managers we
looked at [16, 20, 44, 48] authenticate repository state infor-
mation or any other aspects of their updates. Some library
managers, however, do have incomplete proposed schemes
for signed packages [49].
Google’s update system for Windows software, Omaha, of-
fers an alternative to SSL for providing timely update avail-
ability information. This alternative cryptographic protocol
is the Client Update Protocol (CUP) [14]. CUP provides
authenticity and freshness for software updates with a sin-
gle request and response over an insecure connection. CUP
is not a replacement for SSL as it does not provide pri-
vacy, client authentication, or prevention of replay of client
requests (it does prevent replay of server responses). The
64Update Content
Update Timeliness Repository State
yum (Fedora 10)
yum (Fedora 11)
yum (CentOS)
yum (Red Hat)
APT (Ubuntu)
YaST (OpenSUSE)
YaST (SUSE Ent.)
slackpkg (Slackware)
Sparkle
Update Engine (Google)
Omaha (Google Update)
Omaha with CUP
Adobe AIR applications
Firefox (Windows)
Firefox (Mac/Linux)
Firefox extensions
unprotected
signed
SSL
SSL + signed
unprotected
signed
SSL
SSL + signed
unprotected
signed
SSL
SSL + signed
SSL
SSL + signed
unprotected
signed
SSL or none
SSL and/or signed
SSL
SSL
SSL + Authenticode
SSL
CUP + Authenticode CUP
SSL + signed
SSL
SSL
SSL + Authenticode
SSL
SSL
SSL or signed
SSL or none
unprotected
SSL
unprotected
SSL + signed
signed
SSL
SSL
unprotected
SSL and/or signed
SSL
SSL
CUP
SSL + signed
SSL
SSL
SSL or none
Table 2: Software update systems and the authenticated information they provide.
CUP speci(cid:12)cation [14] does not address revocation of the
public key that clients trust.
6. DESIGN PRINCIPLES
The software update systems discussed in Section 5 share
many of the same weaknesses. These weaknesses stem from
common design decisions that largely ignore the potential
for key compromise. In this section, we describe methods
by which software update systems can resist and recover
from key compromise. These concepts are not new but their
importance and applicability to software update systems has
not been generally understood. They will guide the design
of our framework in Section 7.
6.1 Responsibility Separation
A software update system can have di(cid:11)erent roles that are
trusted for di(cid:11)erent responsibilities. These responsibilities
may or may not overlap. By carefully dividing these respon-
sibilities, we can achieve a higher level of security by limiting
which attacks are enabled when the key for a single role is
compromised. A simple example of responsibility separation
can be seen in the two-role designs that use SSL in conjunc-
tion with a single signing key. In these designs, the signed
data does not provide timeliness information; that is solely
the responsibility of SSL.
In addition to clients trusting completely unrelated roles
for di(cid:11)erent responsibilities, another way to achieve sepa-
ration of responsibilities is through delegation. That is, a
role can delegate some of its responsibilities to other roles.
Delegation can be performed by providing the client with a
certi(cid:12)cate signed by the delegating role that describes which
responsibilities are delegated and to whom.
The division of responsibilities between roles does not by
itself improve key compromise survivability. For example,
if the same keys are used for all roles, there is no bene(cid:12)t.
However, this separation is valuable when di(cid:11)erent keys are
used as well as when combined with other design principles.
6.2 Multi-signature Trust
One of the most obvious ways to prevent software up-
date systems from being at risk due to key compromise is
to require the signatures of multiple keys. Multi-signature
trust can be achieved in two ways: threshold signatures and
responsibilities shared between roles with separate keys.
A single role can have its resilience to key compromise
increased by using a (t; n) threshold signature scheme. That
is, the signatures of at least t signers are required out of a set
of n potential signers. An attacker who compromises t (cid:0) 1
keys cannot successfully attack any clients.
Distinct from threshold signatures, which use multiple
keys within the same role, another approach is to require
the signatures of multiple roles. The roles involved in multi-
role trust share a responsibility between them. Sharing a
responsibility is di(cid:11)erent from delegating a responsibility.
When one role delegates a responsibility to another, there is
no multi-role trust that results, as either role is trusted for
the responsibility without the other role’s signature.
These two multiple-signature approaches, threshold sig-
nature schemes and responsibilities shared between roles,
can be used together. For example, if role A uses thresh-
old (tA; nA), role B uses threshold (tB; nB), and there are
no keys in common between nA and nB, then an attacker
would need to compromise at least (tA; nA) and (tB; nB)
keys in order to compromise any responsibilities that these
roles share.
6.3 Explicit and Implicit Revocation
There are multiple reasons for revoking keys in software
update systems. These range from lost keys, suspected or
known weak keys, suspected or known compromised keys,
and rotation of project members. We divide revocation into
two types: implicit revocation and explicit revocation.
Implicit revocation occurs when trust is revoked automat-
ically when some criteria is met. For example, the signatures
on a (cid:12)le may be considered to be expired after a speci(cid:12)c date
or a key may only be trusted to sign information a set num-
ber of times before clients stop trusting the key.
Explicit revocation, on the other hand, requires clients to
be told that they should stop trusting keys they currently
trust. Explicit revocation can be performed by having the
trust-delegating role sign a message indicating that trust
should be removed. Explicit revocation is always useful to
indicate that speci(cid:12)c keys should no longer be trusted. It
is important to ensure that explicit revocation mechanisms
65framework based on whether updates are installed after be-
ing retrieved. TUF, being a framework, performs the secure
retrieval of updates but leaves installation to the software
update system it is integrated with.
For space reasons, some details of TUF’s design have been
omitted. TUF is the second generation design of Thandy,
the updater originally developed for Tor [54]. Detailed de-
scriptions of both are available in the Thandy spec [32] and
the TUF spec [56].
7.1 Design Overview
We use the following terminology to describe the design
of TUF:
Target (cid:12)les. Target (cid:12)les are the (cid:12)les (updates) that a
software update system ultimately wants to download and
install.
Metadata (cid:12)les. Metadata (cid:12)les are signed (cid:12)les that de-
scribe roles, other metadata (cid:12)les, and target (cid:12)les.
Repositories and mirrors. A repository is a conceptual
source of named metadata and target (cid:12)les. Each repository
has one or more mirrors. These mirrors are the actual hosts
providing the repository’s content.
Roles. There is one root role per repository. There are
multiple roles whose responsibilities are delegated to them
directly or indirectly by the root role. The term top-level
role refers to the root role and any role delegated by the
root role. Each role has a single metadata (cid:12)le that it is
trusted to provide.
7.1.1 Repository Contents
metabase/
root.txt
timestamp.txt
release.txt
targets.txt
targets/foo.txt
targets/foo/bar.txt
targetbase/
a.rpm
x/y.dll
(optional)
(optional)
(example target)
(example target)
Table 3: Layout of a repository.
The repository contents consist of metadata (cid:12)les and tar-
get (cid:12)les. Table 3 shows a sample repository layout. The
names of the directories \metabase" and \targetbase" can
vary on each mirror. The content and layout of (cid:12)les under
those directories, however, is the same on all mirrors of a
given repository.
The required metadata (cid:12)les are:
(cid:0) root.txt: Speci(cid:12)es keys of top-level roles.
(cid:0) timestamp.txt: Speci(cid:12)es the latest release.txt.
(cid:0) release.txt: Speci(cid:12)es the latest versions of all meta-
(cid:0) targets.txt: Speci(cid:12)es available target (cid:12)les.
data (cid:12)les other than timestamp.txt.
Figure 1: Overview of roles and (cid:12)les in TUF when
used with a software update system that does not
perform targets delegation. The value of the release
role increases when there are delegated targets roles
and thus more metadata on the repository.
are not vulnerable to freeze attacks that may prevent clients
from being aware of the revocation.
By combining multiple signatures with reliable revocation
and replacement of keys, the result is a system that is proac-
tive. Such a design o(cid:11)ers resistance to long-term attacks
where di(cid:11)erent keys are compromised over time.
6.4 Minimizing Risk
Key risk is the product of the probability of the key’s com-
promise and the impact of its compromise. When threshold
schemes are used, risk can also be considered in terms of role
risk, the product of the probability of at least (t; n) keys be-
ing compromised and the impact of the role’s compromise.
The same concept of risk extends to responsibilities shared
by multiple roles.
Unfortunately, risk in this context cannot be clearly quan-
ti(cid:12)ed. The probability of a key’s compromise is di(cid:14)cult to
determine and it is similarly di(cid:14)cult to quantify the im-
pact of various responsibilities under the control of an at-
tacker. What is clear is that we should decrease overall risk
as much as possible. When a responsibility would be very
dangerous in the hands of an attacker, the relevant keys
should be used and stored in a way that reduces the chance
of their compromise. Keys that are stored on systems that
are not network-connected are generally much safer than
those stored on network-connected systems. Similarly, keys
on network-connected systems that are not public-facing
are generally much safer than those stored on public-facing
servers.
7. DESIGN AND ANALYSIS
The security concepts discussed in Section 6 provide ways
to understand and increase key compromise survivability in
updaters. This section describes our application of these
concepts in The Update Framework (TUF). We distinguish
between a full software update system and a software update
These (cid:12)les are discussed in more detail in Section 7.3.
7.1.2 Client Workﬂow
Here we outline the work(cid:13)ow of a software update system
using TUF to check for and obtain updates. This work(cid:13)ow
66shows the steps involved when only the required metadata
(cid:12)les are in use. Whenever an unresolvable problem is en-
countered, the software update system using the framework
must decide how to proceed. The updater may want to show
information about the problem in a GUI, log the problem,
or email an administrator.
Note that all metadata is veri(cid:12)ed by ensuring the required
threshold of trusted signatures, a valid creation time, a fu-
ture expiration time, and that the (cid:12)le is not older than the
last seen version of the same metadata (cid:12)le. With all (cid:12)les
except timestamp.txt, the client knows and veri(cid:12)es the ex-
pected hashes and length of each (cid:12)le.
1. The software update system instructs TUF to check
for updates.
2. TUF downloads and veri(cid:12)es timestamp.txt.