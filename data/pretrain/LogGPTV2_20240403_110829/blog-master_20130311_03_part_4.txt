修改pg_hba.conf, 允许连接, 并执行deal_sync_err_rec修复数据.  
SESSION A :   
```  
local=> begin;  
BEGIN  
local=> select * from deal_sync_err_rec(10);  
 deal_sync_err_rec   
-------------------  
 t  
(1 row)  
--不结束事务,暂不释放锁  
```  
SESSION B :   
```  
local=> insert into loc_test values (13,'abc','digoal',now(),now());  
NOTICE:  00000: sync_err_rec in syncing, this sql will insert into sync_err_rec but not replica to remote now.  
LOCATION:  exec_stmt_raise, pl_exec.c:2840  
INSERT 0 1  
Time: 12.985 ms  
local=> select * from sync_err_rec;  
 id | nsp_name | table_name | dst_server |                                                              dst_query                     
                                           |        create_time           
----+----------+------------+------------+------------------------------------------------------------------------------------------  
-------------------------------------------+----------------------------  
  7 | local    | loc_test   | dst        | INSERT INTO remote.rmt_test(pk1,pk2,info,crt_time,mod_time) VALUES('11','abc','digoal','2  
013-03-13 09:31:20','2013-03-13 09:31:20') | 2013-03-13 09:31:20.394119  
  8 | local    | loc_test   | dst        | INSERT INTO remote.rmt_test(pk1,pk2,info,crt_time,mod_time) VALUES('12','abc','digoal','2  
013-03-13 09:32:18','2013-03-13 09:32:18') | 2013-03-13 09:32:18.486967  
  9 | local    | loc_test   | dst        | INSERT INTO remote.rmt_test(pk1,pk2,info,crt_time,mod_time) VALUES('13','abc','digoal','2  
013-03-13 09:34:32','2013-03-13 09:34:32') | 2013-03-13 09:34:31.6283  
(3 rows)  
Time: 0.439 ms  
```  
SESSION A :   
所有异常SQL处理完  
```  
local=> end;  
COMMIT  
local=> select * from deal_sync_err_rec(10);  
 deal_sync_err_rec   
-------------------  
 t  
(1 row)  
local=> select * from sync_err_rec;  
 id | nsp_name | table_name | dst_server | dst_query | create_time   
----+----------+------------+------------+-----------+-------------  
(0 rows)  
```  
SESSION B :   
后, 远程SQL正常复制  
```  
local=> insert into loc_test values (14,'abc','digoal',now(),now());  
INSERT 0 1  
Time: 14.380 ms  
```  
对比远程和本地的HASH值一致 :   
```  
local=> select sum(hashtext(t.*::text)) from loc_test t;  
    sum      
-----------  
 306096063  
(1 row)  
Time: 0.865 ms  
local=> \c remote remote  
You are now connected to database "remote" as user "remote".  
remote=> select sum(hashtext(t.*::text)) from rmt_test t;  
    sum      
-----------  
 306096063  
(1 row)  
Time: 1.991 ms  
```  
## 注意事项  
1\. application_name被用于防止无限循环的触发, 所以foreign server的option中设置的application_name必须与远程表上创建的触发器的传入值一致.  
    例如rmt_test表的触发器条件中设置了aaa_bbb_digoal.  
    那么在local库上创建的foreign server的option中application_name必须也是aaa_bbb_digoal;  
2\. 注意dblink_build_sql_insert, dblink_build_sql_delete, dblink_build_sql_update这几个函数的参数int2vector primary_key_attnums;  
    PostgreSQL 9.0以及以上版本, 指的是PK在逻辑上的输出顺序, 如select * from loc_test的逻辑输出顺序.  
    PostgreSQL 9.0以下的版本, 指的是PK列在pg_attribute.attnum的值.   
    所以当PK的前面删除了列以后, PK的逻辑顺序会发生变化, 对于9.0以上版本的话需要注意这个变化.  
    因此在触发器函数中需要体现这个变化.  
原文如下 :   
```  
As of PostgreSQL 9.0, the attribute numbers in primary_key_attnums are interpreted as logical column numbers, corresponding to the column's position in SELECT * FROM relname.   
Previous versions interpreted the numbers as physical column positions. There is a difference if any column(s) to the left of the indicated column have been dropped during the lifetime of the table.  
```  
3\. 异步复制的sync_err_rec可以使用crontab定期调用deal_sync_err_rec函数来处理.  
4\. 值注意用quote_literal来解析, 否则可能造成字符逃逸问题.  
例如上一个版本的SQL封装中使用的$Q$, 如果出现在PK中就会有逃逸问题, 如下 :   
```  
when 'INSERT' then  
    -- 生成远程要执行的insert语句, id是这个表的主键. 如果是多列值的则需要得到按v_pk_vector顺序的text[], 考虑到兼容性不使用array的for  
each循环  
    for i in select * from unnest(v_pk_attname_array) AS t(attname) loop  
      if y = 0 then  
        execute 'select array[($Q$'||NEW||'$Q$::'||v_nsp_name||'.'||v_table_name||').'||i.attname||']::text[]' into v_pk_att_vals_ar  
ray;  
      else  
        tmp_v_pk_att_vals_array := v_pk_att_vals_array;  
execute 'select array_append($1, ($Q$'||NEW||'$Q$::'||v_nsp_name||'.'||v_table_name||').'||i.attname||'::text)' into v_pk_att_vals_a  
rray using tmp_v_pk_att_vals_array;  
      end if;  
      y := y+1;  
    end loop;  
    select * into v_query from dblink_build_sql_insert(v_nsp_name||'.'||v_table_name, v_pk_vector, v_pk_cnt, v_pk_att_vals_array, v_  
pk_att_vals_array);  
```  
异常数据 :   
```  
local=> insert into loc_test values(1,'$Q$','$Q$',now(),now());  
ERROR:  syntax error at or near "."  
LINE 1: ...:01:09","2013-03-14 08:01:09")$Q$::local.loc_test).pk1]::tex...  
                                                             ^  
QUERY:  select array[($Q$(1,$Q$,$Q$,"2013-03-14 08:01:09","2013-03-14 08:01:09")$Q$::local.loc_test).pk1]::text[]  
CONTEXT:  PL/pgSQL function f_sync_test() line 77 at EXECUTE statement  
```  
修改为quote_literal后正常 :   
```  
remote=> insert into rmt_test values(100,'$Q$','$Q$',now(),now());  
INSERT 0 1  
Time: 4.086 ms  
remote=> select * from rmt_test ;  
 pk1 |  pk2  |  info  |      crt_time       |      mod_time         
-----+-------+--------+---------------------+---------------------  
   1 | $Q1$  | $Q1$   | 2013-03-14 08:02:50 | 2013-03-14 08:02:50  
   1 | $Q$   | $Q$    | 2013-03-14 08:08:49 | 2013-03-14 08:08:49  
   1 | $Q'$  | $'Q$   | 2013-03-14 08:09:16 | 2013-03-14 08:09:16  
   1 | $Q$'$ | $Q$'Q$ | 2013-03-14 08:09:43 | 2013-03-14 08:09:43  
   2 | $Q$'  | $Q$'Q$ | 2013-03-14 08:13:45 | 2013-03-14 08:13:45  
(5 rows)  
```  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/1638770402013283547959/  
2\. http://blog.163.com/digoal@126/blog/static/1638770402013211102130526/  
3\. http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
4\. http://blog.163.com/digoal@126/blog/static/1638770402012731203716/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")