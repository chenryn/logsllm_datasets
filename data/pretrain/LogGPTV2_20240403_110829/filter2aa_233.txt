1
OLONLXOL-Resin解析漏洞
初学JAVA有问题请指正
受影响版本：全版本
之前测试resin⾥的权限绕过时提到过可以采⽤下⾯的⽅式
后来在北京玩的时候突然想到，那我可不可以和 iis解析漏洞 ⼀样创建⼀个⽂件夹为
test.jsp 下⾯存放⼀个⾮ jsp 后缀⽂件，但是 Resin 能解析呢。
回来测试了⼀下发现可以
Plain Text
复制代码
/test.jsp
/test.jsp/1.css
1
2
2
得到如下结论
看⼀下问题出在哪⾥，⾸先查看 Resin 的配置⽂件
Plain Text
复制代码
/test.jsp/test.jpg
test.jsp ⽂件夹下的⽂件都会解析成jsp
1
2
3
注意到三个 servlet-mapping 分别是 *.jsp *.jspx *.jspf 对应的 servlet-class
都为 com.caucho.jsp.JspServlet
那代表还存在另外两种利⽤⽅式
配置 Resin 远程调试查看⼀下原因
Plain Text
复制代码
/test.jspx/test.jpg
/test.jspf/test.jpg
test.jspf test.jspx⽂件夹下的⽂件都会解析成jsp
1
2
3
4
D:\tomcat\resin-4.0.65\conf\resin.xml 在 Resin 的配置⽂件⾥添加下⾯的内容
IDEA配置好远程JVM调试，因为我们不知道具体处理流程在哪⾥，所以断点下在
\com\caucho\server\http\HttpRequest.class#handleRequest
慢慢跟⼀直到
\com\caucho\server\dispatch\ServletMapper.class#mapServlet
跟进去然后跟到
5
这⾥先从我们配置⽂件取 servlet-mapping 的值然后正则匹配我们请求的 uri ，可以注意
到这个正则
^.*\.jsp(?=/)|^.*\.jsp\z
此时会匹配到 /test1.jsp 会返回 ServletMapping[url-pattern=*.jsp, 
name=resin-jsp]
从⽽进⼊jsp处理逻辑
^.*\.jsp(?=/)|^.*\.jsp\z 这个正则在
\com\caucho\server\dispatch\UrlMap.class#addMap 被添加
6
Java
复制代码
    public void addMap(String pattern, String flags, E value, boolean 
isIgnore, boolean ifAbsent) throws PatternSyntaxException {
        if (pattern.length() == 0) {
            this.addRegexp(-1, "^/$", flags, value, true, isIgnore, 
ifAbsent);
        } else {
            boolean startsWithSlash = pattern.charAt(0) == '/';
            if (pattern.length() == 1 && startsWithSlash) {
                this.addRegexp(-1, "", flags, value, true, isIgnore, 
ifAbsent);
            } else if (pattern.equals("/*")) {
                this.addRegexp(1, "/*", flags, value, true, isIgnore, 
ifAbsent);
            } else {
                int length = pattern.length();
                boolean isExact = true;
                if (!startsWithSlash && pattern.charAt(0) != '*') {
                    pattern = "/" + pattern;
                    ++length;
                }
                int prefixLength = -1;
                boolean isShort = false;
                boolean hasWildcard = false;
                CharBuffer cb = new CharBuffer();
                cb.append("^");
                for(int i = 0; i  0) {
                        hasWildcard = true;
                        isExact = false;
                        if (pattern.charAt(i - 1) == '/') {
                            cb.setLength(cb.length() - 1);
                            if (prefixLength  0 && cb.charAt(0) == '/') {
                    cb.insert(0, '^');
                }
                this.addRegexp(prefixLength, pattern, cb.close(), flags, 
value, isShort, isIgnore, ifAbsent, !hasWildcard);
            }
        }
    }
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
8
但是显然这样还是⼀样可以利⽤。