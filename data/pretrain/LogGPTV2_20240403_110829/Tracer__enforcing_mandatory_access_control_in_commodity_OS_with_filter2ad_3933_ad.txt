IP
IP
Ie
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
D
Vista,  it  is  enough  for  verifying  the  Tracer  model  since  both 
versions  of  OS  have  very  similar  system  calls  and  Win32  API 
functions based on which Tracer works. Moreover, if developing 
the  prototype  on  Vista,  the  MIC  might  interfere  with  Tracer  as 
both schemes attempt to complete MAC tasks. 
4.1 Implementation 
Tracer  implementation  consists  of  two  parts:  Interception 
and  Decision.  Most  of  the  implementations  are  located  in  the 
kernel so that they are difficult to be bypassed. The Interception 
part monitors Native Windows API functions (i.e. system call) at 
the  kernel  level  and  Win32  API  functions  (i.e.  system  library 
functions) at the application level, then issues behavior requests 
to the Decision part, and allows or disallows a behavior according 
to  the  result  returned  from  the  Decision  part.  The  intercepted 
behaviors are listed in Table 1. 
consists 
Most  behaviors  can  be  intercepted  by  monitoring  only  one 
essential  system  call  function  or  a  Win32  API  function,  for 
example,  monitoring  NtDeviceIoControlFile()  for  “Communicate 
with  a  remote  host”,  monitoring  NtCreateFile()  for  “Create 
executable”,  monitoring  NtOpenFile()  for  “Steal  confidential 
information”.  Some  behaviors  consist  of  more  than  one  system 
call or Win32 function, for instance, the behavior “Inject into other 
processes” 
of  OpenProcess(),  VirtualAllocEx(), 
WriteProcessMemory(),  CreateRemoteThread(),  etc.  Considering 
the  performance  impact,  we  only  intercept  the  first  essential 
function, i.e. OpenProcess(), and  block it if a suspicious process 
tries  to  perform  an  execution,  such  that  the  subsequent  calls, 
i.e.WriteProcessMemory()  and  CreateRemoteThread(),  which 
would  cause  damages  are  not  executed  any  more.  Moreover,  to 
prevent intended bypassing, Tracer always intercepts a function at 
the kernel level rather than the application level if possible. Thus, 
for  the  behavior  “Inject  into  other  processes”,  Tracer  actually 
intercepts  NtOpenProcess()  at  the  kernel  level  rather  than 
OpenProcess() at the application level. However, the file-copying 
like behaviors in Figure 1 can not be identified by intercepting a 
single system call as they consist of two essential system calls for 
reading  and  writing  files  respectively.  Thus,  we  devised  an 
algorithm to correlate the two system calls by exploiting related 
file names and buffers. 
The  Decision  part  residing  in  the  kernel  handles  behavior 
requests from the Interception part. When making a decision, it first 
reads  the  Tracer  attributes  of  processes  and  files,  e.g.,  suspicious 
flags and DAC information, and then decides whether to permit the 
behaviors and whether to modify the Tracer attributes according to 
the  Tracer  actions  presented  in  Section  3.  Table  1  shows  the 
decision logic implemented in the Decision part. 
the  process 
To  be  permanent,  the  suspicious  flag  of  an  executable  is 
stored in a specially created file stream of the executable file. The 
suspicious flag of a process, however, is stored in a data structure 
associated  with 
the  memory.  The  whole 
implementation is encapsulated in a kernel driver and a DLL. The 
kernel  driver  is  responsible  for  intercepting  system  calls  via 
modifying  the  system  call  entry  point  in  the  System  Service 
Dispatch  Table  (SSDT),  and  implementing  the  Decision  part 
within the kernel. The DLL is responsible for intercepting Win32 
API  functions  via  modifying  the  library  function  entry  point  in 
the  Import  Address  Table  (IAT)  of  application  processes.  Note 
that,  our  Tracer  implementation  does  not  need  to  impose  any 
modifications  on  the  Windows  or  application  codes,  thus  it  is 
highly compatible with existing software. 
4.2 Evaluation 
We  evaluate  Tracer  performance  from  three  important 
perspectives: its effectiveness in ensuing security, its compatibility 
with application software, and the overhead added after enabling 
Tracer on OS. 
in 
Security.  To  verify  the  capability  of  Tracer  on  restricting 
malware behaviors, we collected 93 real-world malware samples, 
most of which are obtained from a publicly available website [20]. 
32 of the samples are unknown to Tracer, because they can not be 
found  with  the  same  or  different  names  in  Symantec  Threat 
Explorer from which the critical malware behaviors are extracted. 
We also prepared 54 benign samples mostly from two reputable 
websites, i.e. technet.microsoft.com and www.download.com. To 
further facilitate the experiments, we prepare a set of monitoring 
tools 
include 
and  Win32  API, 
ApiMonitor 
to  help  check  experimental  results,  which 
system 
record 
call 
to 
ProcessExplorer  to  analyze  processes,  Regmon  to  trace  registry 
activities, and Filemon to monitor file operations. Meanwhile, we 
set  up  a  local  network  which  consists  of  two  servers  and  two 
hosts  as  a  testing  environment  [25].  One  server  machine,  on 
which the samples to be tested are intentionally placed, runs an 
IIS  web  server,  a  ftp  server  and  an  EZ-IRC  server.  The  other 
server  machine,  on  which  only benign  samples are  placed, runs 
an  IIS  web  server  to  act  as  a  trusted  site  for  testing  trusted 
communications.  Note  that,  in  reality  the  trusted  sites  can  be 
easily  recognized  by  general  users  because  a  host  only  has  to 
connect to several well-known websites to upgrade its important 
software. The host machines installed with Windows XP run the 
client programs that are often the attacking vectors for malware 
samples, including mIRC, MSN Messenger, MS Outlook, eMule, 
KaZaA,  IE  and  ftp  client,  etc.  To  emulate  the  real-world  usage 
scenarios, we login the hosts and perform various types of tasks, 
such as browsing the malicious website and ftp server in the local 
network  and  downloading  samples,  sending  and  receiving 
malicious  instant  messages  and  emails,  accessing  P2P  shared 
folders  or  removable  drives  that  contain  samples.  Thus,  the 
samples are introduced into a host through various channels. With 
this testing environment, the capability of Tracer to detect, trace 
and restrict malware behaviors can be thoroughly evaluated. 
For every sample, we perform a two-step experiment. First 
we run a sample on a host without turning on Tracer and record 
what happens using the monitoring tools above. Then, we enable 
Tracer protection, run the same sample, and record what happens 
again.  We  can  determine  whether  a  sample  is  indeed  disabled 
from  two  perspectives.  First,  we  deduce  whether  malware 
behaviors  are  successfully  executed  by  comparing  the  two 
versions of logs produced by ApiMonitor, Regmon and Filemon 
without or with protection. Second, we manually check whether 
the  files,  registry  entries  and  processes  that  are  created  by  the 
sample and recorded in the former logs are exactly present or not 
in the logs after turning on the Tracer. Moreover, we restart the 
computer to see if the sample can be enabled automatically. 
The testing results are reported in Table 2. For each type of 
samples, after turning on Tracer, we record the number of false 
negatives,  i.e.,  FNs,  and  the  number  of  FPs.  We  can  see  that 
Tracer  was  able  to  correctly  disable  all  malware  samples 
including known and unknown ones, as well as block or cancel 
all their malware behaviors. However, it falsely stopped 3 benign 
samples  by  blocking  their  behaviors.  The  FPs  were  a  personal 
firewall  program,  a  file  system  tool  and  a  process  tool, 
downloaded from the IRC and web server with which we did not 
set  up  a  trusted  communication.  By  analyzing  the  logs,  we 
observed  that  some  behaviors  of  these  benign  programs  closely 
resemble  those  of  malware,  for  example,  “Create  or  modify 
Windows services”, “Modify system configuration files”, “Install 
or modify drivers”, “Modify registry for startup”, etc. As Tracer 
relies  on  the  source  and  behaviors  of  a  program  to  identify  a 
malware program, the benign programs that come from a remote 
host  through  an  untrusted  communication  are  tracked  and 
restricted  as  suspicious  ones.  However,  one  still  can  make  the 
programs work by manually removing the suspicious flags from 
the program files before running them. 
To compare with other anti-malware techniques on Windows, 
we  performed  an  experiment  to  test  three  popular  commercial 
tools:  Kaspersky  [27],  VIPRE  [28]  and  MIC.  The  former  two 
running  on  XP  are  well  known  anti-malware  tools  and  have 
modules blocking suspicious behaviors to defend against unknown 
malware.  The  anti-malware  tools  relying  only  on  signatures  can 
not  detect  unknown  malware  [1]  and  thus  are  inappropriate  to 
Table 2. Security test results. FP Rate is 5.6% and FN Rate is 0%.
Samples 
Known 
malware
Worm
Trojan 
Backdoor 
Script Virus 
Macro Virus 
Unknown malware 
Benign 
program
Security utilities 
System utilities 
Games 
Multi-media 
Web Pages 
Sum 
Programs 
FNs 
0 
0 
0 
0 
0 
0 
- 
- 
- 
- 
- 
0 
Total
20
19 
17 
2 
3 
32 
11 
10 
7 
10 
16 
147 
FPs 
- 
- 
- 
- 
- 
- 
1 
2 
0 
0 
0 
3 
Behaviors 
FNs
0
0 
0 
0 
0 
0 
- 
- 
- 
- 
- 
0 
Total
274
155 
152 
65 
49 
491 
103 
83 
82 
36 
99 
1589
FPs 
-
- 
- 
- 
- 
8 
15 
0 
0 
0 
23 
compare  with  Tracer  especially  on  FP  rate.  MIC  is  a  partial 
enforcement  of  BIBA  model  in  Vista  kernel  [16],  which  is  the 
only  MAC  mechanism  in  Windows  OS  family.  For  every 
anti-malware technique, we tested all of the samples in Table 2. 
We  count  a  program  as  a  FP  if  the  anti-malware  technique 
abnormally  refuses  or  alarms  at  least  one  of  its  access  requests, 
since this will affect the running of the testing program or annoy 
the user. We do not count a program as a FP if it fails on Vista but 
the failure is not caused by MIC. Figure 3 shows the FP rates (FPR) 
obtained.  MIC  and  the  anti-malware  tools  have  FP  rates  above 
34%,  whereas, Tracer  has  FP  rate  of  merely  5.6%.  The  high  FP 
rate of MIC comes from the no-write-up rule of BIBA model. The 
modules that block suspicious behaviors contribute to most of FPs 
of  the  anti-malware  tools.  The  fundamental  reason  is  that  the 