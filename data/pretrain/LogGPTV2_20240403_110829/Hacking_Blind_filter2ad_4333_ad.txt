Find all pop x; ret gadgets.
Find a syscall gadget.
Identify the pop gadgets previously found.
The attacker starts by ﬁnding a stop gadget and all pop
x; ret instructions. The difﬁculty is now in identifying the
pop instructions and ﬁnding a syscall gadget. The idea is
to identify the pop instructions based on system call behavior
after tweaking system call arguments, in a similar way as to
how strcmp was found in the optimized attack. There is a
bootstrap problem, however, because to ﬁnd syscall one
must control the system call number (rax), so one must have
a priori identiﬁed pop rax; ret.
The solution is to chain all pop instructions found by the
attacker, popping the desired system call number, and one of
them will likely be rax. The system call to use is pause()
which takes no arguments and so ignores all other registers. It
also stops program execution until a signal is raised and so it
acts as a stop gadget, making it identiﬁable. The attacker can
now append the probe address for syscall to the pop chain
to ﬁnd a system call gadget. Once an address that makes the
program pause is found, the attacker can eliminate the pops
one by one to ﬁnd which one controls rax.
At this point the attacker has the address of a syscall
gadget and a pop rax; ret gadget. The attacker also holds
a list of unidentiﬁed pops. These are identiﬁed by using the
following system calls:
1)
2)
3)
First argument
(pop rdi): nanosleep(len,
rem). This will cause a sleep of len nanoseconds
(no crash). rem is populated if the sleep is inter-
rupted, and it can be an invalid address as it
is
checked only after the sleep.
Second argument (pop rsi): kill(pid, sig).
If sig is zero, no signal is sent, otherwise one is sent
(causing a crash). The pid need not be known: it can
be zero which sends the signal to all the processes
in the process group. To verify whether the signal
is sent, the attacker can open multiple connections
(going to different worker processes) to see if those
connections are killed or not.
Third
clock_nano-
sleep(clock, flags, len, rem). Similar
to nanosleep but takes two additional arguments,
making the third argument control the sleep length.
(pop rdx):
argument
One can now call write and continue the attack by
dumping the .text segment and ﬁnding more gadgets. While
this attack is more general, it is more complex to perform
because it requires two scans of the .text segment: one to ﬁnd
a list of pop gadgets, and one to ﬁnd a syscall gadget.
A signiﬁcant optimization is that all pop rax; ret gad-
gets we found were misaligned parses of add rsp, 0x58;
ret. This information can be used to classify pop rax
gadgets independently of syscall gadgets and signiﬁcantly
speed up the attack—one no longer needs to scan the entire
.text segment twice. One can scan for the add rsp, 0x58
gadget by setting up the stack with 11 traps followed by the
stop gadget. To verify the gadget, the attacker jumps to the
misaligned parse that yields pop rax, verifying that only one
word is popped, which can be done by setting up the stack with
a single trap followed by the stop gadget.
J. Other low-level details
In this section we list a number of not so obvious low-level
attack details, many of which added to the attack’s stability.
a) Stack reading with zeros: We found that an effective
way to stack read is placing zeros in words like the saved
frame pointer. It is likely to ﬁnd an instruction pointer that
does not crash the program regardless of the frame pointer. It
also makes stack reading more robust when different worker
processes are being used, each with a slightly different frame
pointer. It may be impossible to ﬁnish reading a partially read
frame pointer when being sent to a different worker process
since all values will cause a crash. Forcing a zero word in this
case will eliminate this problem.
b) Further strcmp veriﬁcation: To further verify
strcmp, we run it against the last byte of the vsyscall page,
which is mapped at a static location. strcmp will terminate
prior to reaching the end of vsyscall, not causing a crash. Most
other functions instead will attempt to read past the vsyscall
page causing a crash. This will prune functions that do not
normally crash when supplied two readable arguments.
c) Dealing with small buffers: Sometimes attackers
must minimize the length of ROP chains and be able to exploit
small buffers. This situation occurs, for example, due to short
reads or having to keep some memory intact (e.g., not touching
a canary), which limits the length of the overﬂow and the
buffer space available. The yaSSL+MySQL exploit requires
this optimization in order to avoid corrupting a canary. This is
a checklist for conducting BROP with short ROP chains of at
most 8 words (64 bytes):
•
•
•
Find actual PLT entries based on their address, not
based on their push number and slow path. This will
make PLT invocation a shorter ROP chain.
Dump the binary with a minimal ROP chain: strcmp
address to dump, do not set rsi again (already set
for strcmp), and call write. If zero is read, the dumped
address contained a zero. Otherwise a small amount
of the binary (up to a zero) will be read. Continue this
until a pop rdx is found. After that use pop rdx
to control the length rather than strcmp (shorter ROP
chain).
Create the shellcode environment in multiple stages:
one connection to dup the attacker’s socket, one to
read “/bin/sh” into memory, and one to execve.
All
these connections (apart from execve) must
terminate the ROP chain with a stop gadget to prevent
a crash since the worker process is being prepared
incrementally.
d) Dealing with few event-based workers: There are sit-
uations where an application is conﬁgured with very few event-
based workers which can all become unresponsive during the
235
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
BROP attack, as they are all running the stop gadget (e.g.,
an inﬁnite loop) making it impossible to continue the attack.
nginx is such an example and is conﬁgured with four workers
by default. This is not a problem with applications that fork per
connection or multi-threaded workers. In the latter case, one
can connect and be handled by a new thread, and then send
an exploit that causes a crash to kill any stuck threads in that
process. Our general solution however is to try and use a stop
gadget that returns to a higher call frame (stack-based stop
gadget) rather than an inﬁnite-loop-based one when possible.
Our implementation uses the following algorithm, which works
when at least three worker processes exist:
def try_exp(data)
s
= TCPSocket.new($victim, 80)
req = "GET / HTTP/1.1\r\n"
req  CRASH, NO_CRASH, INF
The driver needs to implement the try_exp() function and
guarantee that when given enough “data” bytes it will end up
overwriting a saved return address on the stack. The function
returns CRASH if the socket closes after sending the data,
NO CRASH if the application appears to behave normally,
or INF if the socket stays open for longer than a timeout.
The timeout is automatically determined by the framework
based on how quickly a crash is detected. The NO CRASH
if s.read() == nil
return RC_CRASH
else
return RC_NOCRASH
end
end
Figure 12. nginx exploit driver code. It merely wraps the input string provided
by Braille into an HTTP chunked request and returns a CRASH signal if the
connection closes.
return code is useful for probing the length of the buffer
being overﬂowed or when stack reading. This return code is
expected when no overﬂow occurs or when the same value
was overwritten on the stack. The INF return code is expected
when looking for gadgets as it indicates that the stop gadget
ran (“inﬁnite loop”). In later phases of the attack where data is
expected from the socket, for example after write has been
found and the binary is being dumped, a raw ﬂag can be passed
to return the actual socket instead of the CRASH / INF result
code.
The driver code can be as simple as opening a socket to
the server, and sending the data over the socket, raw. Often
however, services expect data to be in a certain format. For
example, HTTP headers may need to be present. The driver is
responsible for this formatting. We wrote three drivers, all of
which were under 100 lines of code. One passed data raw, one
constructed an SSL packet and another one a chunked HTTP
request. Figure 12 shows the code of a basic version of the
nginx driver.
We also implemented a generic IP fragmentation router
which is useful in cases where a single large TCP read
is needed to overﬂow a buffer. For example overﬂowing a
4096-byte buffer with a single non-blocking read may be
impossible with an MTU of 1500, as there may not be enough
data queued, making the exploit unreliable. Our router instead
sends large TCP segments as multiple IP fragments so that
read is guaranteed to return a large packet, triggering the
overﬂow reliably. We implemented it in 300 lines of C code.
It creates a virtual tun interface where no TCP segmentation
occurs—a single write is sent as multiple IP fragments and
as a single TCP packet. This router was needed for nginx, for
example.
Sending TCP segments out of order would be an alternative
approach which may work and be more robust to ﬁrewalls.
236
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
ClientHello ch;
for (uint16 i = 0; i headers_in.content_length_n,
NGX_HTTP_DISCARD_BUFFER_SIZE);
n = r->connection->recv(r->connection, buffer, size);
Vulnerable
code
in
14.
Figure
controls
content_length_n (signed) and can supply a negative value. size
will be unsigned, resulting in a large number if content_length_n is
negative. buffer is 4096 bytes long, on the stack.
nginx. The
attacker
TABLE II.
CUMULATIVE NUMBER OF REQUESTS PER BROP ATTACK
PHASE.
Attack phase
Stack reading
ﬁnd PLT
ﬁnd BROP gadget
ﬁnd strcmp
ﬁnd write
dump bin & exploit
Time (min)
Proprietary server
1028
1394
1565
1614
1624
1950
yaSSL + MySQL
406
1454
1481
1545
1602
3851
5
20
nginx
846
1548
2017
2079
2179
2401
1