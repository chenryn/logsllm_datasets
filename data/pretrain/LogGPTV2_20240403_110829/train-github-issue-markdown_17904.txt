by **plnordahl** :
    Running Mavericks 10.9.2 and using the patch from
    https://groups.google.com/forum/#!msg/golang-codereviews/it4yhth9fWM/TxcE1Yx6AUMJ (issue
    7510) on release-branch.go1.2, I'm not seeing the variable names of int, string, float,
    or map variables in a simple program. I do however see names for slices, arrays, and
    struct/struct members in the output. Below is some code to reproduce the behavior.
    One program, which will be loaded for it's DWARF data:
    package main
    import "fmt"
    func main() {
        myInt := 42
        mySecondInt := 41
            fmt.Println(myInt, mySecondInt)
        myArray := [2]string{"hello", "world"}
        fmt.Println(myArray)
        myString := "foo"
        fmt.Println(myString)
        mySlice := []int{1, 2, 3}
        fmt.Println(mySlice)
        myFloat := 42.424242
        fmt.Println(myFloat)
        myMap := make(map[string]string)
        fmt.Println(myMap)
        myStruct := myStructType{"bleh", 999, "hm"}
        fmt.Println(myStruct)
    }
    type myStructType struct {
        Bleh string
        Blerg int
        Foo  string
    }
    ...and the second, which just loads the Mach-O binary and prints each entry's offset,
    tag, children, and fields (pipe the output of this program into grep to see the behavior
    I describe).
    package main
    import (
        "debug/macho"
        "fmt"
        "log"
    )
    func main() {
        m, err := macho.Open("")
        if err != nil {
            log.Fatalf("Couldn't open MACH-O file: %s\n", err)
        }
        d, err := m.DWARF()
        if err != nil {
            log.Fatalf("Couldn't read DWARF info: %s\n", err)
        }
        r := d.Reader()
        for {
            entry, err := r.Next()
            if err != nil {
                log.Fatalf("Current offset is invalid or undecodable. %s", err)
            }
            if entry == nil {
                fmt.Println("Reached the end of the entry stream.")
                return
            }
            fmt.Println("Entry --- offset: ", entry.Offset,
                " tag: ", entry.Tag, " children: ", entry.Children,
                " field: ", entry.Field)
        }
        return  
    }