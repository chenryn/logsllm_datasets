# 6.4 Case 4: Humanoid Attack by Disguising as an Auto-play Video Assist Function

Some fraudulent activities go beyond simply clicking on static ads. They can also masquerade as accessibility services to automatically play videos at the code level, but their real purpose is to click on ad videos. The "com.iB***" SDK is a typical example of this type of humanoid attack. This SDK initializes a `VideoWebView` class within the `VideoAdActivity` function and predefines an `onReadyPlay` callback function. In this callback, it checks if the ad video is playing and, if not, automatically clicks on the ad video. By forcing users who are uninterested in the ad to watch the video, the "com.iB***" SDK increases ad revenue. The apps affected by this SDK have been downloaded over 476 million times across various app markets [23].

# 7. Discussion

## Scalability of ClickScanner

In this work, we proposed a new, time-saving, and efficient framework for click fraud detection. To foster broader impact, we implemented an efficient backward program slicing framework in ClickScanner, which can detect the assignment process of any variable or parameters of any API. This makes our framework easily extendable for targeted and efficient security vetting of modern Android apps. In the future, we plan to enhance ClickScanner to search over native code and extend it to address other problems.

## Analysis of Misclassification Cases

Manual analysis revealed the following reasons for misclassifications:

1. **False Positives**: Some apps simulate human clicks to obtain window focus. Although Android provides a standardized API for this, using inappropriate methods is rare.
2. **False Negatives**: Some views, although containing ad content, are not recognized as ad views by ClickScanner.

For the 9 false positives in the basic dataset:
- 4 simulate a human click to obtain window focus.
- 3 simulate a human click to automatically play non-ad videos.
- 2 are game apps that achieve the desired effect by intercepting and generating new click events in the game webview.

To address these issues, we can improve the accuracy of ad view detection and check whether the click event target is an input box or a non-ad video player in the webview.

## Limitations

### 1. Fraud Codes and Instructions from Remote Servers

One major limitation of ClickScanner is its inability to detect complex JavaScript or encrypted instructions that do not reside in the original fraudulent app but come from a command and control server. These instructions are almost impossible to detect at the code level. ClickScanner can, however, detect click coordinates from JSON data returned from a configuration URL to construct a `MotionEvent` object and implement the humanoid attack. This allows the app to automatically execute a fake click on a random point in the ad view, making the traffic identical to what would be generated by a real person, thus avoiding detection.

### 2. Other Types of Ad Views

Although we used one of the most popular and obfuscation-resilient tools, LibRadar, with several constraints to identify ad views, our taxonomy may still be incomplete. This is a primary cause of false positives and negatives. We can adjust the threshold to balance the results or use more tools to identify ad libraries and ad views. Additionally, ClickScanner's scalability allows it to be extended to support the detection of click frauds on potential new types of ad views.

### 3. Obfuscation

ClickScanner's ability is constrained by its employed static analysis tool, FlowDroid. While it can handle lightweight obfuscation, it cannot manage advanced obfuscations or packing techniques. To address this, ClickScanner could integrate with other techniques like deobfuscation, unpacking, and binary analysis to recover protected bytecode.

# 8. Related Work

Recent research in click fraud detection has primarily focused on dynamic analysis. Some approaches analyze ad network traffic to summarize patterns of click-fraud traffic, while others rely on installing additional patches or SDKs on users' devices to check the click pattern of touch events.

### Traffic Patterns Associated with Ad Network Traffic

Some previous works claim that fraudulent clicks have different traffic patterns from benign ones. For example, FraudDroid builds UI state transition graphs and collects associated runtime network traffics to identify ad fraudulent behaviors. MAdFraud automatically runs apps in emulators and detects ad click traffic without user interaction. Clicktok detects clickspam by searching for reflections of click traffic encountered by an ad network in the past. These methods depend heavily on the gathered network traffic set.

### Local Patterns Associated with Click Events

Other works suggest that fraudulent clicks have different performance on users' devices compared to benign ones. FraudDetective computes a full stack trace from observed ad fraud activity to user events and generates causal relationships. AdSherlock injects an online detector into the app executable archive and marks touch events as click fraud if the Android kernel does not generate a `MotionEvent` object or if its properties remain unchanged. DECAF performs dynamic checking in an emulator and marks ad frauds if the layout or page context violates specific rules. ClickGuard uses motion sensor signals from mobile devices, as the pattern of motion signals differs under real and fraudulent click events. However, ClickGuard raises concerns about data collection.

These tools have played a crucial role in revealing mobile click fraud. However, if fraudulent apps simulate real human click patterns, hide their fraudulent behaviors, or only trigger clicks at certain times, these models may fail. Moreover, most previous strategies cannot pinpoint which app class conducts click fraud.

# 9. Conclusion

In this paper, we explored a new and sophisticated click fraud, named humanoid attack, and successfully revealed its attack patterns through static analysis. We designed and implemented ClickScanner to uncover humanoid attacks. By applying ClickScanner to 120,000 real-world market apps, we identified 157 fraudulent apps from the top 20,000 apps in Google Play and Huawei AppGallery. Our work also highlights the impact of ad SDKs on click fraud and the distribution of fraudulent apps among different categories and popularity. In conclusion, our work suggests that humanoid attacks are widespread in current app markets, and we hope that the detection tool ClickScanner can effectively combat emerging humanoid attacks.

# Acknowledgements

We thank the shepherd, Merve Sahin, and other anonymous reviewers for their insightful comments. We also thank Jian Zhang and Zhushou Tang from PWNZEN InfoTech Co., LTD, for their valuable assistance in analyzing the motivating example. The authors affiliated with Shanghai Jiao Tong University were partially supported by the National Natural Science Foundation of China (Grants 61972453 and 62132013). Minhui Xue was partially supported by the Australian Research Council (ARC) Discovery Project (DP210102670) and the Research Center for Cyber Security at Tel Aviv University. Xiaokuan Zhang was supported in part by the NortonLifeLock Research Group Graduate Fellowship.

# References

[References listed as provided in the original text]