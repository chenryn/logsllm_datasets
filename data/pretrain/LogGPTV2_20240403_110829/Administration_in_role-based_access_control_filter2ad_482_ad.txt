(p1, r1) (cid:54)∈ PA
(p1, r1) ∈ PA
PA(cid:48) = PA ∪ {([c, o1, a1], r)}
PA(cid:48) = PA \ {([c, o1, a1], r1)}
PA(cid:48) = PA ∪ {(p1, r1)}
PA(cid:48) = PA \ {(p1, r1)}
Figure 3: The primitive administrative operations in UARBAC. For each operation, we give the permission(s) the subject that
initiates this operation needs to have, the conditions on the RBAC state for the operation succeed, and the effects of each operation
by describing which state components are changed. Note that when we say a permission about a speciﬁc object is required, the
operation will also succeed if the initiator has the corresponding class permission. For example, if [role, r1, grant] is required, the
operation will also succeed if the initiator has the class permission [role, grant].
ships about o1 are also removed. Note that if o1 is a role, then the
initiator of the deletion, who has the permission [role, o1, admin],
is authorized to revoke all the permissions and roles that are granted
to o1 and all the users and roles that o1 is granted to. Similarly, if
o1 is a user, then the initiator is authorized to revoke all the roles
that are granted to o1.
The class permissions can be granted only by the sso role. A
class permission implies the object permissions over all the objects
of that class. For example, the class permission [role, grant] en-
ables one to grant any role, i.e., it implies the object permission
[role, r, grant] for any role r. This is similar to the system privilege
“grant any role” in Oracle.
We now highlight some of the salient features of our model:
• The RBAC objects, namely users and roles, are treated in the
same way as other objects. This is driven by the economy
of mechanism principle and the “using RBAC to administer
RBAC” requirement.
• The granting operations (namely, grating a permission to a
role, granting a role to a role, and granting a role to a user) are
all handled in a uniform way, reﬂecting considerations based
on the economy of mechanism principle and the psychologi-
cal acceptability principle. Granting x to y requires the grant
permission over x and the empower permission over y. This
is different from many existing approaches, which require
only one of the two permissions to perform the operation.
Granting x to y naturally requires certain permission over x.
UARBAC also requires permission over y for at least two
reasons. First, this makes the denial of service attack de-
scribed in Section 3.3 more difﬁcult to carry out. Even if one
can create new roles, one can grant these roles only to those
roles over which one holds the empower permission. Sec-
ond, in a large-scale system, it is natural to restrict the set of
users and roles that an administrator can grant permissions
to. For example, administrators of one department may be
allowed only to grant to users and roles in that department.
Note that a system in which one needs only grant permis-
sion over x to be able to grant x to y (such as Oracle) can
be implemented in our model by granting the class permis-
sions [role, empower] and [user, empower] to all users in the
system.
• The grant permission controls both granting and revoking.
We made this choice for simplicity, and for supporting re-
versibility. If a user makes a mistake in granting, the user
has the permission to perform the corresponding revocation,
cancel the effects of the mistake.
• Here we provide only the most primitive operations. More
complex operations can be built from these primitive opera-
tions. For example, creating a role with a set of parents and a
set of children can be performed by ﬁrst using createObject
to create the role, and then using multiple grantRoleToRole
operations.
• In our model, the role hierarchy is not maintained as a partial
order among roles. RH is an irreﬂexive and acyclic rela-
tion over roles, which contains only the role-role relation-
ships that explicitly added by an administrative operation.
This design provides reversibility to the role hierarchy op-
erations, i.e. grantRoleToRole and revokeRoleFromRole are
mutually reverse. (See the discussions for Requirement 4 in
Section 4.2for more explanations.)
• In UARBAC the permissions are assigned only to roles; they
are not directly assigned to users. In some situations, one
may want to have a hybrid system where permissions can
also be assigned to users, (e.g., Oracle). To model such a sys-
tem, one can extend our model to include a user-permission
assignment relation. Granting permissions to users can be
administering in the same way was granting permissions to
roles.
• In the basic model, administrative domains are deﬁned by
explicitly enumerating the objects in the domains. While be-
ing ﬂexible, this does not scale well to large RBAC systems;
this is addressed in UARBACP , which is presented in Sec-
tion 5.3.
5.3 UARBACP: Adding Parameters and Units
Each administrative permission in the basic model is about a sin-
gle object; in other words, to deﬁne an administrative domain, one
has to explicitly list all objects in the domain. This does not scale to
large RBAC systems. To be able to scale well, we need to be able
to deﬁne administrative domains based on concepts such as organi-
zational units. The basic idea of the UARBACP extension is to as-
sign one or more attributes (called parameters) to each object in the
RBAC system, and then deﬁne administrative domains using con-
straints on these parameters. One can view the basic model as a spe-
cial case in which each object has one parameter, i.e., name, which
uniquely identiﬁes the object, and the only kind of constraints is
name = o, which o denotes an object name.
Schema of Parameterized RBAC: In Parameterized RBAC, an
RBAC schema is given by the tuple (cid:104)D, T, PD, AM(cid:105), which are
described below.
1. D is a set of types that are used in the system. Each type
deﬁnes a set of values, as well as a constraint language for
deﬁning sets of values for this type.
For example, one may deﬁne a type for organizational units,
which form a tree structure. For instance, in a banking sys-
tem, the root of the organizational structure is the bank, and
children of the root are regions, and each region have some
children for branches. A constraint may denote all children
under a node, a node plus its children and descendants, and
so on. Similarly, one may deﬁne a type for ﬁles and directo-
ries, which are also hierarchical.
2. C is a set of object classes, as in the basic model. However,
we allow multiple classes for roles and users. That is, C has
two subsets: Cr, which gives the set of all role classes, and
Cu, which gives the set of all user classes. This enables us
to allow different kinds of roles (e.g., enterprise roles and
functional roles) that have different parameters.
3. PD is a function that maps each class
in C to
the
form
takes
parameter
declaration, which
a
((pname 1, ptype 1), (pname 2, ptype 2), ..., (pname k, ptype k)).
Each pair (pname i, ptype i) denotes a parameter, where
pname 1 is the name and ptype i ∈ D is the type of the
parameter.
For example, a role class business role in Cr may have
a parameter declaration PD(business role) = (name :
ROLE NAME, unit : ORGAN UNIT), which means that
it has two parameters, one is the name of the role, and the
other is the organizational unit. Both ROLE NAME and
ORGAN UNIT are types in D. Suppose that manager is a
value in the type ROLE NAME and ‘Branch Hamburg’ is a
value of type ORGAN UNIT, then “business role(name =
manager, unit = ‘Branch Hamburg’)” identiﬁes a role.
Suppose that PD(c) = ((pname 1, ptype 1), (pname 2,
An object of class
ptype 2), ..., (pname k, ptype k)).
c is
identiﬁed by c(pname 1 = s1, pname 2 =
s2, ..., pname k = sk), where si is a value of type ptype i,
for each i in 1..k. In the following we use c((cid:126)s) to represent
such an object.
4. AM is a function that maps each class to a set of access
modes, and the access modes for a user class or a role class
are ﬁxed by the model, as in the basic model.
Using the notion of administrative domains, both object permis-
sions and class permissions become special cases of the following
more general parameterized permissions: A parameterized per-
mission takes the form [c, ϕ, a], in which c is an object class, ϕ
is a constraint, and a ∈ AM (c) ∪ {create}. The constraint ϕ
deﬁnes a set of objects of class c, whose parameter values sat-
isfy the constraint. The permission [c, ϕ, a] allows one to access
all the objects in the set deﬁned by ϕ using the access mode a.
For example, the parameterized permission [business role, unit ≤
‘Branch Hamburg’, create] allows one to create a business role
with the parameter unit having a value that is a descendant of
‘Branch Hamburg’.
In UARBACP ,
the ﬁve operations deleteObject, grantRole-
ToUser, revokeRoleFromUser, grantRoleToRole and revokeRole-
FromRole are similar to those in the basic model. One can treat
a parameterized permission [c, ϕ, a] as implying all object permis-
sions [c, (cid:126)s, a] where (cid:126)s satisﬁes ϕ. To create a new object, the creator
should specify the parameter values of the object. The operations
about object permissions and class permissions in the basic model
are replaced by two operations about parameterized permissions.
In UARBACP , PA is extended with a third parameter, id; that is,
when a permission is granted to a role, one also speciﬁes an id
value, which needs to be unique among all permissions granted to
that role. When one revokes a permission from a role, one speciﬁes
the id value of the permission to be revoked. To grant a parameter-
ized permission [c, ϕ1, a1] to a role, besides the empower permis-
sion over the role, one should have the admin permission over the
set of objects deﬁned by ϕ1. In other words, one should have the
permission [c, ϕ2, admin] such that ϕ1 logically implies ϕ2, which
means that every object that satisﬁes ϕ1 also satisﬁes ϕ2 and thus
ϕ2 describes a larger set. A new operation changeParameters is in-
troduced to change the parameter values of an existing object. In
order to do so, the initiator should have the admin permission over
the object with the old parameter values and the create permission
over the object with the new parameter values. These changed and
newly added operations are described in Figure 4.
In summary, in UARBACP , administrative domains are deﬁned
using constraints on parameter values of objects. This is ﬂexible
as well as policy neutral, as it enables one to deﬁne administrative
domains based on the organizational structure as well as other cri-
teria. Furthermore, parameterized administrative permissions can
be further delegated, which further improves scalability.
5.4 Comparisons with existing models
We now review how UARBACP meets the requirements stated
in Section 4 and then present a comparison of the three approaches
described in Section 3 with it.
Operation
createObject(c((cid:126)s1), role((cid:126)s2))
changeParameters
(c((cid:126)s1), c((cid:126)s2))
grantPermToRole
([c, ϕ1, a1], role((cid:126)s1), id1 )
revokePermFromRole
(role((cid:126)s1), id1 )
Required Permissions
[c, ϕ1, create] : (cid:126)s1 satisﬁes ϕ1
[role, ϕ2, empower] : (cid:126)s2 satisﬁes ϕ2
[c, ϕ1, admin] : (cid:126)s1 satisﬁes ϕ1
[c, ϕ2, create] : (cid:126)s2 satisﬁes ϕ2
[c, ϕ2, admin] : ϕ1 logically implies ϕ2
[role, ϕ3, empower] : (cid:126)s1 satisﬁes ϕ3
[c, ϕ2, admin] : ϕ1 logically implies ϕ2,
where ([c, ϕ1, a1], role((cid:126)s1), id1 ) ∈ PA, or
[role, ϕ3, admin] : (cid:126)s1 satisﬁes ϕ3
Effects
OB(cid:48)(c) = OB (c) ∪ {c((cid:126)s1)},
PA(cid:48) = PA ∪ {([c, (cid:126)s1, admin], role((cid:126)s2))}
Replace all the occurrences of c((cid:126)s1) in the
state with c((cid:126)s2).
PA(cid:48) = PA ∪ {([c, ϕ1, a1), role((cid:126)s1), id1 )}
PA(cid:48) = PA \ {([c, ϕ1, a1), role((cid:126)s1), id1 )}
Figure 4: The changed primitive administrative operations for parameterized extension.
• Requirement 1. Support decentralized administration and
scale well to large RBAC systems.
UARBACP supports decentralized administration by allow-
ing multiple administrators to have control over their own
administrative domains. As the administrative domains in
UARBACP are deﬁned based on attributes of objects and are
independent of the role hierarchy, it is ﬂexible to support all
forms of role hierarchies. UARBACP does not introduce any
additional administrative relations that require central admin-
istration. The parameterized administrative permissions can
be further delegated. These features make UARBACP more
ﬂexible and scalable than existing models.
• Requirement 2. Be policy neutral in deﬁning administrative
domains.
In UARBACP , the administrative domains are deﬁned using
constraints on parameters of objects. Because the parameter
declarations and constraints are deﬁned by administrators,
UARBACP provides a mechanism for deﬁning administra-
tive domains based on application-level attributes. There-
fore, in UARBACP how to deﬁne administrative domains is
a policy decision according to applications.
• Requirement 3. Apparently equivalent sequences of opera-
tions should have the same effect.
Observe that the speciﬁcation of administrative operations
of UARBACP includes only the most primitive operations.
These primitive operations are carefully designed so that
more complex operations can be built from them. This en-
sures that when one operation can be conceptually viewed as
a sequence of more primitive operations, then the effect of
that one operation will be equivalent to carrying out the se-
quence of the primitive operations. For example, deleting an
object can be viewed as ﬁrst removing all relationships that
involve the object and then removing the object.
support
• Requirement 4. Support reversibility
In UARBACP , most operations
reversibility.
Each grant operation has a corresponding revoke oper-
ation so that one can use the same permissions to go
back after making a mistake. The operation createOb-
ject has deleteObject as the reversing operation.
The