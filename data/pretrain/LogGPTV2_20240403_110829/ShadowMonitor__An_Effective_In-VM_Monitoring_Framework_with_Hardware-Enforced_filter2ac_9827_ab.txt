R WR W
R
R
X
X
GVA
GPA
HPA
Fig. 2. Isolation between address space of two compartments.
3 System Design
In this section, we will present how to tackle the challenges above, mainly includ-
ing memory isolation, low-cost compartment switching, security of monitoring
execution ﬂow, and monitoring integrity.
3.1 Isolation of Compartments
In ShadowMonitor, compartment isolation is achieved by the multi-page-
mapping mechanism. Generally, in a hardware-assisted memory virtualization
environment, the guest OS can only touch the ﬁrst-level memory mapping which
maps guest virtual address (GVA) to guest physical address (GPA), while the
hypervisor manages the second-level mapping (known as extended page table
(EPT)) for each guest which maps GPA to host physical address (HPA).
Unlike previous work that conﬁgures only one EPT for each guest, the recent
advance in Intel CPU allows up to 512 EPTs for one guest. Exploiting this
feature, ShadowMonitor provides two EPTs for each guest, one is the native
EPT (EPT-N) for the guest (or the main compartment within the paper), and
another one is shadow EPT (EPT-S) used for the shadow compartment. In this
way, the mapping from GPA to HPA is divided into two steps, as shown in Fig. 2.
The GPA belonging to the address space of the main compartment is translated
to HPA by EPT-N (the left part), and the GPA from the shadow compartment is
676
B. Shi et al.
translated to HPA by EPT-S (the right part). Through address translation with
diﬀerent EPTs, memory access will be forwarded automatically using hardware
instead of software emulation, thereby achieving native speed.
Figure 2 describes the details of memory mappings in ShadowMonitor. As
can be seen, the entire GVA is divided into three regions: Monitor Code, Mon-
itor Data, and Guest Ordinary Memory. The Guest Ordinary Memory is used
for guest OS and user applications, while the Monitor Code and Monitor Data
are used for monitoring and recording events of the guest. To achieve isolation
between the regions, ShodowMonitor only maps the address space of Guest Ordi-
nary Memory into the main compartment with EPT-N, and maps all the three
regions into the shadow compartment. In this way, the operations of guest can-
not touch the address of Monitor Code and Monitor Data. Although the Guest
Ordinary Memory is shared between the two compartments, it can only be read
in the shadow compartment to extract run-time information. For each memory
region, the permission ﬂags are set in associated EPT entries by the hypervisor.
By dividing the address space and conﬁguring associated EPT entries sep-
arately, ShadowMonitor provides strong isolation between diﬀerent compart-
ments. Since the Monitor Code and Monitor Data are placed in the shadow com-
partment which takes a separated address space, they are invisible to the main
compartment. Thus, they cannot be touched by the instructions executed in the
main compartment, thereby preventing the compromised guest from breaking
the monitor components. On the other hand, since the Guest Ordinary Memory
region is mapped into the shadow compartment with read and write permission,
with the support of hardware EPT, the Monitor Code is able to directly access
the information of guest OS and user applications in native speed. This helps
improve the monitoring performance a lot.
3.2 Eﬃcient Compartment Switching
To provide eﬃcient switching between two compartments, ShadowMonitor lever-
ages the VM Function (VMFUNC) feature which is provided by Intel hardware
virtualization extension. With VMFUNC, the guest can directly invoke virtual
machine functions without triggering VM-exit, which avoids imposing heavy
performance loss. Speciﬁcally, in ShadowMonitor, we load the page directory
addresses of both shadow compartment and main compartment into EPTP list
(EPT base pointers list). Then, by calling VMFUNC, ShadowMonitor can switch
to the EPT mapping of the speciﬁed compartment. We use 2 EPTPs for the
shadow compartment and the main compartment respectively (Intel supports
up to 512 EPTPs), to switch between the address space of the two.
Since the Switch Gate determines the switching between the two compart-
ments, it has to share execution permissions between the main and shadow
compartments. In ShadowMonitor, we put the Switch Gate in the interrupt
descriptor table (IDT) with vector id 20. To prevent the Switch Gate from being
tampered by a compromised guest, we write-protect the IDT by setting per-
mission ﬂags of corresponding EPT-N entries. One problem is that attacks may
still arise even if the IDT is write-protected. To solve this, we defend them by
ShadowMonitor: An Eﬀective In-VM Monitoring Framework
677
trapping LIDT instructions which modify the IDT pointer register (details are
presented in Sect. 5). In this way, the Switch Gate can be protected in untrusted
guest OS. On the other hand, the INT 20 will invoke the entry of Switch Gate
in ShadowMonitor. The execution of INT 20 is triggered by two issues. The ﬁrst
one is the instruction ‘INT 20’ directly invoked by the monitor point for actively
switching to a speciﬁed compartment. The other one is issued by virtualization
exception (#VE, a new feature provided by Intel) which implies that the system
may be operated maliciously (details are presented in Sect. 5: VMFUNC Fake
Attack). By conﬁguring the Virtual Machine Control Structure (VMCS), the
EPT violations, which reﬂects the page table change, will lead to virtualization
exceptions instead of VM-exit and ﬁnally trigger the entry of Switch Gate. This
will help ShadowMonitor defend against malicious attacks issued from the guest.
To conclude, upon ‘INT 20’ instruction or EPT violation, the Switch Gate
will be invoked by IDT vector 20. Then, the EPTP placed in the gate will be
triggered and operate the switching between the two compartments.
3.3 Work-Flow of Event Monitoring
In this subsection, we will describe the execution ﬂow of ShadowMonitor. The
key concern of the design is to eﬀectively execute the trapped instruction in
single-step without introducing signiﬁcant performance loss. Considering the
performance issue, we will not use Monitor Trap Flag (MTF) that introduces
frequent VM-exit, nor use the in-guest single-step via debug register [27] which
introduces heavy overhead.
R
W
X
R
X
Main view
Instruction1
Instruction2
Instruction3
INT 20 handler
CLI
VMFUNC
STI
Return
Meaningless 
mapping
Shadow view
R
W
Instruction1
Instruction2
Instruction3
INT 20 handler
CLI
VMFUNC
R
X
Monitor code
Return
R
X
R
X
Main view
INT 20
Instruction2
Instruction3
INT 20 handler
CLI
VMFUNC
STI
Return
Meaningless 
mapping
R
W
X
R
X
Shadow view
Instruction1
INT 20
INT 20
INT 20 handler
CLI
VMFUNC
Monitor code
Return
a) No event interception
b) Event interception on instruction1
Fig. 3. Comparison between program without interceptor and program enabling inter-
ceptor
Figure 3 compares the program without event interception and that with
event interception. As shown in Fig. 3a, if no event interceptor is registered, the
678
B. Shi et al.
code executes as normal in the main compartment. Meanwhile, the Switch Gate
(i.e., INT 20 handler) will not be invoked and thus will not switch the compart-
ments. On the contrary, Fig. 3b depicts the execution ﬂow when an event has
been registered. To intercept the events for monitoring applications running in
the main compartment, ShadowMonitor replaces the instruction1 with INT 20,
which will introduce interrupt and invoke the Switch Gate (i.e., INT 20 handler).
Note that the INT 20 handler ﬁrstly executes the instruction CLI to disable
other interrupts, ensuring that the interception of the execution ﬂow will not be
diverted. Then, ShadowMonitor calls the switching instruction (i.e., VMFUNC )
to switch to the shadow compartment. After that, the Monitor Code executing
in the shadow compartment will access the state of guest and record the infor-
mation into the Monitor Data. After monitoring is completed, the execution
returns to the address of instruction1. Since the instruction after instruction1
has been modiﬁed to INT 20, the INT 20 handler will be invoked again immedi-
ately after instruction1. In this way, ShadowMonitor switches back to the main
compartment. Then, we execute STI instruction to enable interrupts and return
to execute instruction2 for resuming the original process. After that, one cycle
of event interception and monitoring is completed.
The main advantage of the design is that it allows users to register (or cancel)
an event interceptor at run-time, which is not yet supported in existing in-
VM monitoring approaches (e.g., SIM). In addition, we provide several APIs to
facilitate the registration (or cancellation) of the event interceptor. The user can
easily conﬁgure interception as the following steps. (1) Replace the instruction
which needs to be intercepted (interception point) with INT 20 (0xcd14) in the
main compartment. (2) Set the page of interception point to be executable in
EPT-S. (3) Replace all the instructions neighbor to the interception point with
INT 20 in the shadow compartment. (4) Set the page of the interception point to
be write-protected in EPT-N. Note that this step is essential because it ensures
that the interception points will be safe in a compromised guest.
It’s worth noting that there exist two special cases upon the monitoring
of ShadowMonitor. One case is that instruction2 would be overwritten if the
machine code of instruction1 is shorter than INT 20. For this reason, our method
cannot intercept one-byte instructions, e.g. STI. Another is that instruction1 is
a jump instruction. Generally, the normal programs executing in the main com-
partment are not supposed to jump to the address of Monitor Code. Once this
case is detected upon the registration of interceptors, ShadowMonitor will block
the registration and report this exception since it probably indicates that the
guest has been attacked. In addition, the program may jump to an address that
has no execution permission. If so, EPT violation will occur and cause a virtu-
alization exception. The exception will trigger the execution of INT 20, which
switches back to the main compartment, as mentioned in Sect. 3.1. Finally, the
program returns to the jump destination as instruction1 is conducted. Instruc-
tion1 may also jump to the address that is neighbor to the interception point.
Similarly, since we have replaced all instructions neighbor to the interception
ShadowMonitor: An Eﬀective In-VM Monitoring Framework
679
point with INT 20, the Switch Gate will be invoked and execute following the
procedure above.
3.4 Exploiting EPT Violation
Malicious programs may attempt to attack ShadowMonitor by modifying the
interceptor points, touching the Monitor Code or Switch Gate. To prevent these,
we leverage the hardware features, i.e., EPT violation, to cause either virtualiza-
tion exception or VM-exit upon an unauthorized access. In speciﬁc, we set the
pages of Monitor Code, Monitor Data, and Switch Gate to be write-protected in
both EPT-N and EPT-S. If a malicious program tries to write these pages, EPT
violation will occur and trigger the page fault handler through virtualization
exception (#VE) or VM-exit. As stated before, ShadowMonitor prefers #VE
since it introduces insigniﬁcant performance overhead compared to VM-exit. To
achieve this, we assign 0 to the bit 63 of EPT paging-structure entries with
respect to the Guest Ordinary Memory.
3.5 Functionality of Monitor Code
In ShadowMonitor, the Monitor Code is independent of untrusted regions to
guarantee security. Thus, the Monitor Code should be self-contained. To achieve
this, we link a copy of necessary libraries within the Monitor Code. In Monitor
Code, we extract necessary information (including register content, parameter,
current process information, and etc.) from the guest and then save them to
Monitor Data. Generally, to verify the security state of the VM, some kernel
structures should be analyzed. One feasible method is to extend existing out-of-
VM approaches for parsing and identifying data structures. Moreover, if neces-
sary, we can dump the call trace of an event in Monitor Code by extracting data
from the stack. Consider that this operation is heavyweight, the user can decide
to enable or disable it.
The Monitor Data will be ﬁnally saved in the persistent storage. However,
saving them to the guest disk is risky because the malware may tamper the
data. Therefore, we take a diﬀerent method in ShadowMonitor. Speciﬁcally, the
hypervisor will access the Monitor Data memory region and fetch the monitor
log periodically, and then save them to the persistent storage.
Another important aspect of ShadowMonitor is that the execution of Monitor
Code can be considered as an atomic operation because we execute CLI to
disable interrupts before executing Monitor Code. Although the hypervisor can
receive interrupts on behalf of guests, they will deliver them to the guest since
the interrupts have been disabled. Therefore, the interrupts will not be delivered
to the monitoring process.
4 Implementation
We implement ShadowMonitor on qemu-kvm-2.4.1 with Linux kernel 4.10.2
(Ubuntu 14.04 64-bit LTS). We ﬁrst enable EPTP-switching and virtualization
680
B. Shi et al.