    uint32_t unused;
};
.ee
.in
.ip
the requested operation is to open the node indicated by
.ir header\->nodeid .
the exact semantics of what this means will depend on the
filesystem being implemented.
however, at the very least the
filesystem should validate that the requested
.i flags
are valid for the indicated resource and then send a reply with the
following format:
.ip
.in +4n
.ex
struct fuse_open_out {
    uint64_t fh;
    uint32_t open_flags;
    uint32_t padding;
};
.ee
.in
.ip
the
.i fh
field is an opaque identifier that the kernel will use to refer
to this resource
the
.i open_flags
field is a bit mask of any number of the flags
that indicate properties of this file handle to the kernel:
.rs 7
.tp 18
.br fopen_direct_io
bypass page cache for this open file.
.tp
.br fopen_keep_cache
don't invalidate the data cache on open.
.tp
.br fopen_nonseekable
the file is not seekable.
.re
.tp
.br fuse_read " and " fuse_readdir
.ip
.in +4n
.ex
struct fuse_read_in {
    uint64_t fh;
    uint64_t offset;
    uint32_t size;
    uint32_t read_flags;
    uint64_t lock_owner;
    uint32_t flags;
    uint32_t padding;
};
.ee
.in
.ip
the requested action is to read up to
.i size
bytes of the file or directory, starting at
.ir offset .
the bytes should be returned directly following the usual reply header.
.tp
.br fuse_interrupt
.in +4n
.ex
struct fuse_interrupt_in {
    uint64_t unique;
};
.ee
.in
.ip
the requested action is to cancel the pending operation indicated by
.ir unique .
this request requires no response.
however, receipt of this message does
not by itself cancel the indicated operation.
the kernel will still expect a reply to said operation (e.g., an
.i eintr
error or a short read).
at most one
.b fuse_interrupt
request will be issued for a given operation.
after issuing said operation,
the kernel will wait uninterruptibly for completion of the indicated request.
.tp
.br fuse_lookup
directly following the header is a filename to be looked up in the directory
indicated by
.ir header\->nodeid .
the expected reply is of the form:
.ip
.in +4n
.ex
struct fuse_entry_out {
    uint64_t nodeid;            /* inode id */
    uint64_t generation;        /* inode generation */
    uint64_t entry_valid;
    uint64_t attr_valid;
    uint32_t entry_valid_nsec;
    uint32_t attr_valid_nsec;
    struct fuse_attr attr;
};
.ee
.in
.ip
the combination of
.i nodeid
and
.i generation
must be unique for the filesystem's lifetime.
.ip
the interpretation of timeouts and
.i attr
is as for
.br fuse_getattr .
.tp
.br fuse_flush
.in +4n
.ex
struct fuse_flush_in {
    uint64_t fh;
    uint32_t unused;
    uint32_t padding;
    uint64_t lock_owner;
};
.ee
.in
.ip
the requested action is to flush any pending changes to the indicated
file handle.
no reply data is expected.
however, an empty reply message
still needs to be issued once the flush operation is complete.
.tp
.br fuse_release " and " fuse_releasedir
.in +4n
.ex
struct fuse_release_in {
    uint64_t fh;
    uint32_t flags;
    uint32_t release_flags;
    uint64_t lock_owner;
};
.ee
.in
.ip
these are the converse of
.br fuse_open
and
.br fuse_opendir
respectively.
the daemon may now free any resources associated with the
file handle
.i fh
as the kernel will no longer refer to it.
there is no reply data associated with this request,
but a reply still needs to be issued once the request has
been completely processed.
.tp
.br fuse_statfs
this operation implements
.br statfs (2)
for this filesystem.
there is no input data associated with this request.
the expected reply data has the following structure:
.ip
.in +4n
.ex
struct fuse_kstatfs {
    uint64_t blocks;
    uint64_t bfree;
    uint64_t bavail;
    uint64_t files;
    uint64_t ffree;
    uint32_t bsize;
    uint32_t namelen;
    uint32_t frsize;
    uint32_t padding;
    uint32_t spare[6];
};
struct fuse_statfs_out {
    struct fuse_kstatfs st;
};
.ee
.in
.ip
for the interpretation of these fields, see
.br statfs (2).
.sh errors
.tp
.b e2big
returned from
.br read (2)
operations when the kernel's request is too large for the provided buffer
and the request was
.br fuse_setxattr .
.tp
.b einval
returned from
.br write (2)
if validation of the reply failed.
not all mistakes in replies will be caught by this validation.
however, basic mistakes, such as short replies or an incorrect
.i unique
value, are detected.
.tp
.b eio
returned from
.br read (2)
operations when the kernel's request is too large for the provided buffer.
.ip
.ir note :
there are various ways in which incorrect use of these interfaces can cause
operations on the provided filesystem's files and directories to fail with
.br eio .
among the possible incorrect uses are:
.rs
.ip * 3
changing
.i mode & s_ifmt
for an inode that has previously been reported to the kernel; or
.ip *
giving replies to the kernel that are shorter than what the kernel expected.
.re
.tp
.b enodev
returned from
.br read (2)
and
.br write (2)
if the fuse filesystem was unmounted.
.tp
.b eperm
returned from operations on a
.i /dev/fuse
file descriptor that has not been mounted.
.sh conforming to
the fuse filesystem is linux-specific.
.sh notes
the following messages are not yet documented in this manual page:
.pp
.\" fixme: document the following.
.in +4n
.ex
.br fuse_batch_forget
.br fuse_bmap
.br fuse_create
.br fuse_destroy
.br fuse_fallocate
.br fuse_forget
.br fuse_fsync
.br fuse_fsyncdir
.br fuse_getlk
.br fuse_getxattr
.br fuse_ioctl
.br fuse_link
.br fuse_listxattr
.br fuse_lseek
.br fuse_mkdir
.br fuse_mknod
.br fuse_notify_reply
.br fuse_poll
.br fuse_readdirplus
.br fuse_readlink
.br fuse_removexattr
.br fuse_rename
.br fuse_rename2
.br fuse_rmdir
.br fuse_setattr
.br fuse_setlk
.br fuse_setlkw
.br fuse_symlink
.br fuse_unlink
.br fuse_write
.ee
.in
.sh see also
.br fusermount (1),
.br mount.fuse (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/fputwc.3
.so man3/lgamma.3
.so man3/xcrypt.3
.so man2/mmap.2
.so man3/remainder.3
.so man3/pthread_tryjoin_np.3
.\"  copyright 2002 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.\"  based on glibc infopages
.\" polished - aeb
.\"
.th setnetgrent 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
setnetgrent, endnetgrent, getnetgrent, getnetgrent_r, innetgr \-
handle network group entries
.sh synopsis
.nf
.b #include 
.pp
.bi "int setnetgrent(const char *" netgroup );
.b "void endnetgrent(void);"
.pp
.bi "int getnetgrent(char **restrict " host ,
.bi "            char **restrict " user ", char **restrict " domain );
.bi "int getnetgrent_r(char **restrict " host ,
.bi "            char **restrict " user ", char **restrict " domain ,
.bi "            char *restrict " buf ", size_t " buflen );
.pp
.bi "int innetgr(const char *" netgroup ", const char *" host ,
.bi "            const char *" user ", const char *" domain );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.ad l
.pp
.nh
.br setnetgrent (),
.br endnetgrent (),
.br getnetgrent (),
.br getnetgrent_r (),
.br innetgr ():
.hy
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.ad
.sh description
the
.i netgroup
is a sunos invention.
a netgroup database is a list of string triples
.ri ( hostname ", " username ", " domainname )
or other netgroup names.
any of the elements in a triple can be empty,
which means that anything matches.
the functions described here allow access to the netgroup databases.
the file
.i /etc/nsswitch.conf
defines what database is searched.
.pp
the
.br setnetgrent ()
call defines the netgroup that will be searched by subsequent
.br getnetgrent ()
calls.
the
.br getnetgrent ()
function retrieves the next netgroup entry, and returns pointers in
.ir host ,
.ir user ,
.ir domain .
a null pointer means that the corresponding entry matches any string.
the pointers are valid only as long as there is no call to other
netgroup-related functions.
to avoid this problem you can use the gnu function
.br getnetgrent_r ()
that stores the strings in the supplied buffer.
to free all allocated buffers use
.br endnetgrent ().
.pp
in most cases you want to check only if the triplet
.ri ( hostname ", " username ", " domainname )
is a member of a netgroup.
the function
.br innetgr ()
can be used for this without calling the above three functions.
again, a null pointer is a wildcard and matches any string.
the function is thread-safe.
.sh return value
these functions return 1 on success and 0 for failure.
.sh files
.i /etc/netgroup
.br
.i /etc/nsswitch.conf
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br setnetgrent (),
.br getnetgrent_r (),
.br innetgr ()
t}	thread safety	t{
mt-unsafe race:netgrent
locale
t}
t{
.br endnetgrent ()
t}	thread safety	t{
mt-unsafe race:netgrent
t}
t{
.br getnetgrent ()
t}	thread safety	t{
mt-unsafe race:netgrent
race:netgrentbuf locale
t}
.te
.hy
.ad
.sp 1
in the above table,
.i netgrent
in
.i race:netgrent
signifies that if any of the functions
.br setnetgrent (),
.br getnetgrent_r (),
.br innetgr (),
.br getnetgrent (),
or
.br endnetgrent ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
these functions are not in posix.1, but
.br setnetgrent (),
.br endnetgrent (),
.br getnetgrent (),
and
.br innetgr ()
are available on most unix systems.
.br getnetgrent_r ()
is not widely available on other systems.
.\" getnetgrent_r() is on solaris 8 and aix 5.1, but not the bsds.
.sh notes
in the bsd implementation,
.br setnetgrent ()
returns void.
.sh see also
.br sethostent (3),
.br setprotoent (3),
.br setservent (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2006 andrew morton 
.\" and copyright 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2006-07-05 initial creation, michael kerrisk based on
.\"     andrew morton's comments in fs/sync.c
.\" 2010-10-09, mtk, document sync_file_range2()
.\"
.th sync_file_range 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sync_file_range \- sync a file segment with disk
.sh synopsis
.nf
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int sync_file_range(int " fd ", off64_t " offset ", off64_t " nbytes ,
.bi "                    unsigned int " flags );
.fi
.sh description
.br sync_file_range ()
permits fine control when synchronizing the open file referred to by the
file descriptor
.i fd
with disk.
.pp
.i offset
is the starting byte of the file range to be synchronized.
.i nbytes
specifies the length of the range to be synchronized, in bytes; if
.i nbytes
is zero, then all bytes from
.i offset
through to the end of file are synchronized.
synchronization is in units of the system page size:
.i offset
is rounded down to a page boundary;
.i (offset+nbytes\-1)
is rounded up to a page boundary.
.pp
the
.i flags
bit-mask argument can include any of the following values:
.tp
.b sync_file_range_wait_before
wait upon write-out of all pages in the specified range
that have already been submitted to the device driver for write-out
before performing any write.
.tp
.b sync_file_range_write
initiate write-out of all dirty pages in the specified
range which are not presently submitted write-out.
note that even this may block if you attempt to
write more than request queue size.