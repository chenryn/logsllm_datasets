## 调试器的实现原理
要想进行调试，调试器是必不可少的，首先需要了解一下我们常用的Linux下的调试器如GDB，是如何实现的
GDB 基于ptrace编写而成的调试器，ptrace是一个Linux提供的用于调试的系统调用
函数原型如下
    NAME 
        ptrace - process trace
    SYNOPSIS
           #include 
           long ptrace(enum __ptrace_request request, pid_t pid,
                       void *addr, void *data);
简单来说， **ptrace系统调用提供了一种方法来让父进程可以观察和控制其它进程的执行，检查和改变其核心映像以及寄存器。
主要用来实现断点调试和系统调用跟踪**
这个函数根据 request 参数来表示想要请求执行的行为 ，并且根据不同的request决定后续的pid、addr、data参数是否有意义。
下面是几个常见的 request 参数的可选项：
  * PTRACE_TRACEME ：表示本进程将被其父进程跟踪，此时剩下的pid、addr、data参数都没有实际意义可以全部为0
这个选项只能用在被调试的进程中，也是被调试的子进程唯一能用的request选项，其他的都只能用父进程调试器使用
  * PTRACE_ATTACH：attach到一个指定的进程，使其成为当前进程跟踪的子进程，而子进程的行为等同于它进行了一次PTRACE_TRACEME操作，可想而知，gdb的attach命令使用这个参数选项实现的
~~变成其他进程的爹，你就可以调试它~~
  * PTRACE_CONT：继续运行之前停止的子进程，也可以向子进程发送指定的信号，这个其实就相当于gdb中的continue命令
除了上面的几个，还有很多操作子进程内存数据寄存器数据的request选项，详见man手册，这里不一一展开，
如上图所示，gdb调试的本质实际上就是父进程使用ptrace函数对子进程进行一系列的命令操作
这里举一个例子
    #include 
    #include 
    #include    /* For constants ORIG_EAX etc */
    #include 
    #include  /* SYS_write */
    #include 
    int main() {
        pid_t child;
        long orig_rax;
        int status;
        int iscalling = 0;
        struct user_regs_struct regs;
        child = fork();
        if(child == 0) 
        {
            ptrace(PTRACE_TRACEME, 0, 0);//发送信号给父进程表示已做好准备被调试
            execl("/bin/ls", "ls", "-l", "-h", 0);
        }
        else
        {
            while(1)
            {
                wait(&status);//等待子进程发来信号或者子进程退出
                if(WIFEXITED(status))
                //WIFEXITED函数(宏)用来检查子进程是被ptrace暂停的还是准备退出
                {
                    break;
                }
                orig_rax = ptrace(PTRACE_PEEKUSER, child, 8 * ORIG_RAX, 0);
                //获取rax值从而判断将要执行的系统调用号
                if(orig_rax == SYS_write)
                {//如果系统调用是write
                    ptrace(PTRACE_GETREGS, child, 0, &regs);
                    if(!iscalling)
                    {
                        iscalling = 1;
                        //打印出系统调用write的各个参数内容
                        printf("SYS_write call with %p, %p, %p\n",
                                regs.rdi, regs.rsi, regs.rdx);
                    }
                    else
                    {
                        printf("SYS_write call return %p\n", regs.rax);
                        iscalling = 0;
                    }
                }
                ptrace(PTRACE_SYSCALL, child, 0, 0);
                //PTRACE_SYSCALL,其作用是使内核在子进程进入和退出系统调用时都将其暂停
                //得到处于本次调用之后下次调用之前的状态
            }
        }
        return 0;
    }
编译运行后，会输出如下
    $ gcc ./ptrace1.c -o ptrace1 && ./ptrace1 
    SYS_write call with 0x1, 0x9e1020, 0xf
    总用量 940K
    SYS_write call return 0xf
    SYS_write call with 0x1, 0x9e1020, 0x35
    -rwxrwxr-x 1 zeref zeref 8.7K 11月 16 03:10 ptrace1
    SYS_write call return 0x35
    SYS_write call with 0x1, 0x9e1020, 0x37
    -rw-rw-r-- 1 zeref zeref  601 11月 16 03:10 ptrace1.c
    SYS_write call return 0x37
    SYS_write call with 0x1, 0x9e1020, 0x35
    -rwxrwxr-x 1 zeref zeref 8.7K 11月 16 03:16 ptrace2
    SYS_write call return 0x35
    SYS_write call with 0x1, 0x9e1020, 0x37
    -rw-rw-r-- 1 zeref zeref 1.3K 11月 16 03:16 ptrace2.c
    SYS_write call return 0x37
    SYS_write call with 0x1, 0x9e1020, 0x32
    -rwxrwxr-x 1 zeref zeref 892K 11月 15 22:57 test
    SYS_write call return 0x32
    SYS_write call with 0x1, 0x9e1020, 0x33
    -rwxrwxr-x 1 zeref zeref 8.4K 11月 15 22:51 test1
    SYS_write call return 0x33
    SYS_write call with 0x1, 0x9e1020, 0x35
    -rw-rw-r-- 1 zeref zeref  174 11月 15 22:51 test1.c
    SYS_write call return 0x35
可以看到，每一次进行系统调用前以及调用后的寄存器内容都发生的变化，并且输出了`ls -l -h`的内容
这只是ptrace的部分功能，ptrace能做到的事情还有更多，比如还能修改内存，修改寄存器的值，插入字节码实现下断点的功能，这里仅仅简单介绍一下gdb调试器的大概实现原理
如果对编写调试器感兴趣的话，可以康康这个大佬的博客：
[veritas501](https://veritas501.space/2017/10/16/%E7%BF%BB%E8%AF%91_%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AALinux%E8%B0%83%E8%AF%95%E5%99%A8/)
## 反调试
介绍完调试的原理，就需要思考下一个问题，如果防止别人调试我们写好的程序？
最简单的办法如下
    #include 
    #include 
    int main()
    {
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) ==-1 )
        {
            printf("don't trace me:(\n");
            return 1;
        }
        printf("no one trace me:)\n");
        return 0;
    }
根据前面说的，只要能当其他进程的爹，就能调试他，但ptrace有个规定是，每个进程只能被`PTRACE_TRACEME`一次，因此只要程序的开头就先执行一次`ptrace(PTRACE_TRACEME,
0, 0, 0)`，当gdb再想attach的时候就会发现已经执行了一次不能再执行了从而返回-1
~~这大概就是我先当了我自己的爹，别人就不能当我爹吧~~
运行情况如下
    $ ./anti1 
    no one trace me:)
    ----    $ gdb ./anti1
    $pwndbg> r
    Starting program: /home/zeref/桌面/debug&anti/anti1 
    don't trace me:(
    [Inferior 1 (process 21216) exited with code 01]
那如果遇到这种反调试该如何绕过呢？
一般有以下几种操作：
  1. 打patch，把有关ptrace函数的部分nop掉
  2. 利用hook技术，把ptrace函数给替换成自定义的ptrace函数，从而可以任意指定它的返回值
  3. 充分利用gdb的catch命令，`catch syscall ptrace`会在发生ptrace调用的时候停下，因此在第二次停住的时候`set $rax=0`，从而绕过程序中`ptrace(PTRACE_TRACEME, 0, 0, 0) ==-1`的判断
效果如下
        $ gdb ./anti1
     $pwndbg> catch syscall ptrace
     Catchpoint 1 (syscall 'ptrace' [101])
     $pwndbg> r
     Starting program: /home/zeref/桌面/debug&anti/anti1 
     Catchpoint 1 (call to syscall ptrace), 0x00007ffff7b0ae2e in ptrace (request=PTRACE_TRACEME) at ../sysdeps/unix/sysv/linux/ptrace.c:45
     $pwndbg> c
     Continuing.
     Catchpoint 1 (returned from syscall ptrace), 0x00007ffff7b0ae2e in ptrace (request=PTRACE_TRACEME) at ../sysdeps/unix/sysv/linux/ptrace.c:45
     在连续si到即将执行ret时
     $pwndbg> set $rax=0
     $pwndbg> c
     Continuing.
     no one trace me:)
     [Inferior 1 (process 21279) exited normally]
**那么问题又来了，如何防止我们的程序被这种骚操作绕过反调试呢？**
分析一下上面的绕过方法，发现本质上都是为了使得`ptrace(PTRACE_TRACEME, 0, 0,
0)`无效，因为使之无效化又不影响主程序的逻辑，那便可以完美绕过
所以这里一种方法是这样，想办法生成一个子进程，并且ptrace跟踪它，并且使他与父进程的运行逻辑密不可分，这样一来单纯的干掉一个ptrace函数调用就不能绕过反调试
比如，可以通过自己定义syscall的方式来实现父子进程之间的身份认证，确保子进程是与父进程在通讯，而不是与gdb在通讯
例子如下
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define SYS_CALL_myread 12345
    #define SYS_CALL_mywrite 67890
    void myread(char *str,int len)
    {
        syscall(SYS_CALL_myread, str,len,0);
    }
    void mywrite(char *str)
    {
        syscall(SYS_CALL_mywrite, str,strlen(str),1);
    }
    void tracee() 
    {
        ptrace(PTRACE_TRACEME, 0, 0, 0);