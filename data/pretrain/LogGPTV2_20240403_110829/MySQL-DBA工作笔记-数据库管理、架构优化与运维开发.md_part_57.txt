### 第9章 MySQL性能测试

#### 一、提高吞吐量测试

在进行吞吐量测试时，我们遇到了一些问题。部分问题可能与压力测试无关。

1. **测试结果**
   - 285秒
   - 310秒
   - 图9-4
   - 3355语句（当前值：16382）

2. **性能压测目标**
   - 尽管取得了一些进展，但距离我们的性能压测目标还有一定差距。

3. **错误日志**
   - `lua:282:SQL API error`
   - `FATAL: 'thread_init' function failed: /usr/local/share/sysbench/oltp_`

4. **参数调整**
   - `max_prepared_stmt_count` 设置为16382（默认值）。
   - `set global max_prepared_stmt_count=30000;`
   - `set global max_allowed_packet=33554432;`

5. **测试连接数**
   - 在运行200个线程时没有问题。
   - 当尝试运行300个线程时，出现了错误：
     - `FATAL: mysql_stmt_prepare() failed`
     - `FATAL: unable to connect to MySQL server on socket'/home/mysql/sl/sl.sock'`

6. **TPS测试结果**
   - 图9-5显示了不同线程数（50、300、500）下的TPS测试结果。
   - QPS基本是TPS的20倍。

7. **资源限制**
   - 修改 `/etc/security/limits.d/90-nproc.conf` 文件以增加用户进程数和打开文件数限制。
   - 重启MySQL服务后，测试结果有所改善。

8. **InnoDB状态**
   - 抓取 InnoDB 状态信息：
     ```sql
     mysql -e "show engine innodb status\G" | grep -A12 "Log sequence"
     ```
   - 日志缓冲区大小设置为16M（5.7版本默认值）。

9. **redo日志大小调整**
   - 建议在压力测试中将 redo 日志文件设置为1G或2G，最大可设置为4G。
   - 通过删除默认的两个 redo 文件并重新启动 MySQL 来调整 redo 大小。

10. **进一步测试**
    - 使用 TCP/IP 方式连接进行测试，以突破 socket 数的限制。
    - 测试脚本示例：
      ```sh
      sysbench --test=/home/sysbench/sysbench-1.0.3/src/lua/oltp_read_write.lua --mysql-host=localhost --mysql-port=3306 --mysql-user=root --mysql-db=sysbenchtest --threads=1500 --time=10 run
      ```

11. **系统配置**
    - 调整内核资源设置 `nofile` 以支持更多连接。
    - 修改 `/etc/security/limits.d/90-nproc.conf` 文件：
      ```sh
      * soft nofile 65535
      * hard nofile 65535
      ```

通过以上步骤，我们逐步优化了MySQL的性能，并解决了多个瓶颈问题。未来的工作将继续关注IO吞吐率和其他潜在的优化点。