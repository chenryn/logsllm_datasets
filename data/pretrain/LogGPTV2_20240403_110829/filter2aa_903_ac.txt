ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Stack
return address 3
value2
value1
return address 2
return address 1
Register
RSI
value1
RDI
value2
Program code
asm instruction
ret
Gadget 1
...
pop rsi
pop rdi
ret
Gadget 2
...
syscall
IP →
ret
Gadget 3
...
19
Claudio Canella (@cc0x1f)
Return-oriented programming
Gadgets are often unintended
• Consider the byte sequence 05 5a 5e 5f c3
20
Claudio Canella (@cc0x1f)
Return-oriented programming
Gadgets are often unintended
• Consider the byte sequence 05 5a 5e 5f c3
• It disassembles to
add eax , 0xc35f5e5a
20
Claudio Canella (@cc0x1f)
Return-oriented programming
Gadgets are often unintended
• Consider the byte sequence 05 5a 5e 5f c3
• It disassembles to
add eax , 0xc35f5e5a
• However, if we skip the ﬁrst byte, it disassembles to
pop rdx
pop rsi
pop rdi
ret
20
Claudio Canella (@cc0x1f)
Return-oriented programming
Gadgets are often unintended
• Consider the byte sequence 05 5a 5e 5f c3
• It disassembles to
add eax , 0xc35f5e5a
• However, if we skip the ﬁrst byte, it disassembles to
pop rdx
pop rsi
pop rdi
ret
• This property is due to non-aligned, variable-width opcodes
20
Claudio Canella (@cc0x1f)
Return-oriented programming
Syscall instruction has byte sequence 0f 05
→ easy to ﬁnd unaligned syscall instructions
21
Claudio Canella (@cc0x1f)
Return-oriented programming
Syscall instruction has byte sequence 0f 05
→ easy to ﬁnd unaligned syscall instructions
SFIP restricts ROP chains via
21
Claudio Canella (@cc0x1f)
Return-oriented programming
Syscall instruction has byte sequence 0f 05
→ easy to ﬁnd unaligned syscall instructions
SFIP restricts ROP chains via
• syscall origins → unaligned instructions not possible
21
Claudio Canella (@cc0x1f)
Return-oriented programming
Syscall instruction has byte sequence 0f 05
→ easy to ﬁnd unaligned syscall instructions
SFIP restricts ROP chains via
• syscall origins → unaligned instructions not possible
• syscall transitions → not every sequence is possible
21
Claudio Canella (@cc0x1f)
Return-oriented programming
Syscall instruction has byte sequence 0f 05
→ easy to ﬁnd unaligned syscall instructions
SFIP restricts ROP chains via
• syscall origins → unaligned instructions not possible
• syscall transitions → not every sequence is possible
Conclusion
SFIP imposes signiﬁcant constraints on control-ﬂow-hijacking
attacks
21
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
no-op1
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
no-op1
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
write
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
write
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
write
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
write
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
Mimicry Attacks
Detection Policy
open
fstat
write
Mimicry Attack
open
fstat
write
no-op1
no-op2
22
Claudio Canella (@cc0x1f)
In the near future...
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
SFIP
t r a n s i t i o n s :
{
”open” :
[ read , s t a t ]
}
o r i g i n s
:
{
”open” :
[0 x02 ,
0xb2 ] ,
” read ” :
[0 x12 ] ,
” s t a t ” :
[0 xa2 ]
}
23
Claudio Canella (@cc0x1f)
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
SFIP
t r a n s i t i o n s :
{
”open” :
[ read , s t a t ]
}
o r i g i n s
:
{
”open” :
[0 x02 ,
0xb2 ] ,
” read ” :
[0 x12 ] ,
” s t a t ” :
[0 xa2 ]
}
23
Claudio Canella (@cc0x1f)
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
Coarse-grained SFIP
t r a n s i t i o n s :
{
”open” :
[ read , s t a t ]
}
o r i g i n s
:
{
”open” :
[0 x02 ,
0xb2 ] ,
” read ” :
[0 x12 ] ,
” s t a t ” :
[0 xa2 ]
}
23
Claudio Canella (@cc0x1f)
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
Fine-grained SFIP
t r a n s i t i o n s :
{
”open@0x02” :
[ read@0x12 ] ,
”open@0xb2” :
[ stat@0xa2 ] ,
}
23
Claudio Canella (@cc0x1f)
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
Fine-grained SFIP
t r a n s i t i o n s :
{
”open@0x02” :
[ read@0x12 ] ,
”open@0xb2” :
[ stat@0xa2 ] ,
}
23
Claudio Canella (@cc0x1f)
Coarse- to Fine-Grained SFIP
Location A
Location B
Function foo1
0x01 :
. . .
0x02 :
s y s c a l l ( open ,
. . . ) ;
0x03 :
bar1 () ;
0x04 :
. . .
Function foo2
0xb1 :
. . .
0xb2 :
s y s c a l l ( open ,
. . . ) ;
0xb3 :
bar2 () ;
0xb4 :
. . .
Function bar1
0x11 :
. . .
0x12 :
s y s c a l l ( read ,
. . . ) ;
0x13 :
return ;
Function bar2
0xa1 :
. . .
0xa2 :
s y s c a l l ( stat ,
. . . ) ;
0xa3 :
return ;
Fine-grained SFIP
t r a n s i t i o n s :
{
”open@0x02” :
[ read@0x12 ] ,
”open@0xb2” :
[ stat@0xa2 ] ,
}
23
Claudio Canella (@cc0x1f)
Proof-of-Concept
You can ﬁnd our proof-of-concept implementation of SysFlow on:
• https://github.com/SFIP/SFIP
24
Claudio Canella (@cc0x1f)
More Details
More details in the paper
• More implementation details
• More extensive security discussion
• . . .
[Can+22]
Claudio Canella, Sebastian Dorn, Daniel Gruss, Michael Schwarz.
SFIP: Coarse-Grained Syscall-Flow-Integrity Protection in Modern Systems.
25
Claudio Canella (@cc0x1f)
Recap
SFIP provides
• integrity to user-kernel transitions
26
Claudio Canella (@cc0x1f)
Recap
SFIP provides
• integrity to user-kernel transitions
• security via syscall transition and origin checks
26
Claudio Canella (@cc0x1f)
Recap
SFIP provides
• integrity to user-kernel transitions
• security via syscall transition and origin checks
and
• is fully automatized
26
Claudio Canella (@cc0x1f)
Recap
SFIP provides
• integrity to user-kernel transitions
• security via syscall transition and origin checks
and
• is fully automatized
• has minimal runtime overhead
26
Claudio Canella (@cc0x1f)
Go With the Flow
Enforcing Program Behavior Through Syscall Sequences and Origins
Claudio Canella (@cc0x1f)
August 11, 2022
Graz University of Technology
References
[Can+22]
C. Canella, S. Dorn, D. Gruss, and M. Schwarz. SFIP: Coarse-Grained
Syscall-Flow-Integrity Protection in Modern Systems. In: arXiv:2202.13716 (2022).
27
Claudio Canella (@cc0x1f)