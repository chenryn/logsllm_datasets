✓
✓
✓
✓
✓
✓
✓
✓
n.a.
✗
✗
✗
✗
n.a.
✓
vtblptr in reconstructed class hierarchy (fallback PathArmor [45]).
Memory allocator uses class hierarchy as type.
Call target resides in at least one vtable at correct offset.
vtblptr and random vtable entry must point to read-only memory.
Verifies vtable ID, vtable must be in read-only memory.
vtblptr must be statically found, in class hierarchy, or vfGuard-allowed.
Overwrites vtblptr when object freed.
Check at vcall if object was created at a legitimate object creation site.
emits the following structure:
mov RDI, thisptr
call [vtblptr + offset]
The thisptr is an implicit call argument, so it is moved into the
first argument register, which is RDI on Linux x86-64 systems. Next,
the call instruction uses the vtblptr to fetch the target function
address from the object’s vtable. The offset added to the vtblptr
selects the correct vtable entry. Note that the offset is a constant,
so that corresponding virtual function entries must be at the same
offset in all vtables of classes that inherit from the same base class.
The same code structure holds for cases that use multiple in-
heritance. Depending on which (sub-)vtable the virtual function
entry resides in, the vtblptr either points to the base vtable or one
of the sub-vtables. However, if the vtblptr points to a sub-vtable,
thisptr does not point to the beginning of the object, but rather to
the offset in the object where the used vtblptr lies. Consider the
example from Figure 1: when a function in the sub-vtable of class
C is called, the call uses the vtblptr to its sub-vtable, and the thisptr
points to offset 0x10 of the object. Because the code structure is
the same, the program treats calls through sub-vtables and base
vtables as analogous.
2.4 Threat Model: VTable Hijacking Attacks
As we explained in Section 2.3, virtual callsites use the vtblptr to
extract the pointer to the called virtual function. Since the object
that stores the vtblptr is dynamically created during runtime and
resides in writable memory, an attacker can overwrite it and hijack
the control flow at a virtual callsite.
The attacker has two options to hijack an object, depending on
the available vulnerabilities: leveraging a vulnerability to overwrite
the object directly in memory, or using a dangling pointer to an
already-deleted object by allocating attacker-controlled memory
at the same position (e.g., via a use-after-free vulnerability). In the
first case, the attacker can directly overwrite the object’s vtblptr
and use it to hijack the control flow at a vcall. In the second case,
the attacker does not need to overwrite any memory; instead, the
vulnerability causes a virtual callsite to use a still existing pointer
to a deleted memory object. The attacker can control the vtblptr by
allocating new memory at the same address previously occupied
by the deleted object.
We assume the attacker has an arbitrary memory read/write
primitive, and that the W ⊕ X defense is in place as well as the
vtables reside in read-only memory. These are standard assumptions
in related work [2, 14, 43, 48]. The attacker’s goal is to hijack the
control flow at a virtual callsite (forward control-flow transfer).
Attacks targeting the backward control-flow transfer (e.g., return
address overwrites) can be secured, for example, by shadow stacks
which are orthogonal to vps and thus out of scope. Furthermore,
data-only attacks are also out of scope.
2.5 Related Work on Binary-only Defenses
Here, we briefly compare our design against binary-only related
work as shown in Table 1. A detailed discussion including source-
level approaches is provided in Section 9.
Most existing vtable hijacking defenses assign a set of allowed
target functions to each virtual callsite (e.g., Marx VTable Protec-
tion [33], vfGuard [35], T-VIP [17], VTint [48] and VCI [14]). The
inaccuracy of binary analysis forces them to overestimate the target
set, leaving room for attacks [38]. In contrast, vps enforces that
vtable pointers remain unmodified after object construction, ensur-
ing that only validly created objects can be used at virtual callsites
and reducing the attack surface even compared to a hypothetical
defense with a perfect set of allowed targets. Marx Type-safe Object
Reuse and VTPin [37] protect against the reuse of dangling pointers
by modifying the memory allocator. vps protects against dangling
pointers without any further modification.
As the comparison in Table 1 shows, vps combines the protection
targets given by related work and additionally protects the type
integrity of the object itself.
3 VTABLE POINTER SEPARATION
Our approach is based on the observation that the vtblptr is only
written during object initialization and destruction and cannot
legitimately change in between. Therefore, only the vtblptr that
is written by the constructor (or destructor) is a valid value. If a
vtblptr changes between the object was created and destroyed, a
vtable hijacking attack is in progress. Since these attacks target
virtual callsites, it is sufficient to check at each virtual callsite if the
vtblptr written originally into the object still resides there.
Figure 2 depicts the differences between a traditional application
and a vps-protected application. The traditional application initial-
izes an object and uses a vcall and the created object to call a virtual
function. As explained in Section 2.3, the application uses the vtable
to decide which virtual function to execute. If an attacker is able to
corrupt the object between the initialization and vcall, she can place
her own vtable in memory and hijack the control flow. In contrast,
the vps-protected application adds two additional functionalities to
100Figure 2: High-level overview of the object instantiation and virtual callsite of a traditional application (left side) and a vps
protected application (right side). For both applications the memory state is given while the instruction pointer executes the
function call.
the executed code. While the object is initialized, it stores the vtblptr
in a safe memory region. Before a vcall, it checks if the vtblptr in
the object is still the same as the one stored for the object in the
safe memory region. The vcall is only executed when the check
succeeds. As a result, the same attacker that is able to corrupt the
object in between can no longer hijack the control flow. The same
concept holds for vtblptrs written in the destructors. The vtblptr is
written into the object and used for vcalls during its destruction (if
it is used at all). Since a vps-protected application stores the written
vtblptr into the safe memory region and checks the integrity of the
one in the object if it is used at a vcall, the approach does not need
to differentiate between object initialization and destruction.
In contrast to other binary-only defenses for virtual callsites
[14, 17, 33, 35, 48] that allow a specific overestimated set of classes
at a virtual function dispatch, vps has a direct mapping between an
object initialization site and the reachable vcalls.
Even though vps looks conceptually similar to CFIXX, adding
this protection at the binary level encounters multiple hurdles.
Performing accurate analysis at the binary level is a challenging
problem, especially with regards to object creation sites, where
false negatives would break the protected application. Our analysis
has to take direct and indirect vtable accesses into account, which
do not exist on the source level. The virtual callsite identification
has to be as precise as possible in order to provide a high level of
security and it has to be performed without type information. Any
false positive in this result breaks the application, which makes an
instrumentation capable of handling these necessary (a problem
that other binary-only approaches do not consider).
4 ANALYSIS APPROACH
vps protects binary C++ applications against control-flow hijacking
attacks at virtual callsites. To this end, we first analyze the binary
to identify C++-specific properties and then apply instrumenta-
tion to harden it. We divide the analysis into three phases: Vtable
Identification, Vtable Pointer Write Operations, and Virtual Callsite
Identification. At a high-level, our analysis first identifies all vtables
in the target binary in the Vtable Identification phase. Subsequently,
the identified vtables are used to find all locations in the binary
that write vtblptrs. Eventually, the identified vtables are also used
to identify and verify vcalls in the Virtual Callsite Identification
phase. While the Vtable Identification static analysis is an improved
and more exact version of Pawlowski et al. [33] (finding vtables
in .bss and GOT, considering indirect referencing of vtables), the
other analyses are novel to vps. In the remainder of this section, we
explain the details of our analysis approach. Note that we focus on
Linux x86-64 binaries that use the Itanium C++ ABI [16]. However,
our analysis approach is conceptually mostly generic and with ad-
ditional engineering effort can be applied to other architectures
and ABIs as well. For architecture-specific steps in our analysis, we
describe what to modify to port the step to other architectures.
4.1 Vtable Identification
To protect vtblptrs in objects, we need to know the location of all
vtables in the binary. To find these, our static analysis searches
through the binary and uses a set of rules to identify vtables. When-
ever all rules are satisfied, the algorithm identifies a vtable. As
explained earlier, Figure 1 shows a typical vtable structure. The
smallest possible vtable in the Itanium C++ ABI [16] consists of
three consecutive words (Offset-to-Top, RTTI, and Function-Entry).
We use the following five rules to determine the beginning of a
vtable:
R-1. In principle, our algorithm searches for vtables in read-only
sections such as .rodata and .data.rel.ro. However, there are
exceptions to this. If a class has a base class that resides in another
module and the compiler uses copy relocation, the loader will copy
the vtable into the .bss section [18]. Additionally, vtables from
other modules can be referenced through the Global Offset Table
(GOT), e.g., in position-independent code [1]. To handle these cases
where the vtable data lies outside the main binary, we parse the
binary’s dynamic symbol table and search for vtables that are either
copied to the .bss section or referenced through the GOT. Note
that we do not rely on debugging symbols, only on symbols that
the loader uses, which cannot be stripped.
R-2. Recall that the vtblptr points to the first function entry in a
class’s vtable, and is written into the object at initialization time.
Therefore, our algorithm looks for code patterns that reference this
first function entry. Again, there are special cases to handle. The
compiler sometimes emits code that does not reference the first
function entry of the vtable, but rather the first metadata field at
offset -0x10 (or -0x18 if virtual inheritance is used). This happens
for example in position-independent code. To handle these cases,
[...]new Object AFunction X[...]A­>funcA1()[...]RIPCode0x00: vtblptrA0x08: varAObject A­0x10: 0­0x08: &RTTI_AVtable A 0x00: &A::funcA1thisptr 0x08: &A::funcA2Memory State[...]new Object AFunction X[...]A­>funcA1()[...]RIPCode0x00: vtblptrA0x08: varAObject A­0x10: 0­0x08: &RTTI_AVtable A 0x00: &A::funcA1thisptr 0x08: &A::funcA2Memory Statewrite safe memorycheck safe memory[...]Object A ­> vtblptrASafe Memory[...]12a2b34a4b512345Traditional ApplicationVPS Application101we additionally look for code patterns that add 0x10 (or 0x18) to
the reference before writing the vtblptr into the object, which is
necessary to comply with the Itanium C++ ABI [16]. Our algorithm
also checks for the special case where vtables are referenced through
the GOT instead of directly.
R-3. As depicted in Figure 1, the Offset-to-Top is stored in the
first metadata field of the vtable at offset -0x10. In most cases this
field is 0, but when multiple inheritance is used, this field gives the
distance between the base vtblptr and the sub-vtblptr in the object
(see Section 2.1). Our algorithm checks the sanity of this value by
allowing a range between -0xFFFFFF and 0xFFFFFF, as proposed
by Prakash et al. [35].
R-4. The RTTI field at offset -0x8 in the vtable, which can hold
a pointer to RTTI metadata, is optional and usually omitted by the
compiler. If omitted, this field holds 0; otherwise, it holds a pointer
into the data section or a relocation entry if the class inherits from
another class in a shared object.
R-5. Most of the vtable consists of function entries that hold
pointers to virtual functions. Our algorithm deems them valid if
they point into any of the .text, .plt, or .extern sections of the
binary, or are relocation entries.
Abstract classes are an edge case. For each virtual function with-
out implementation, the vtable points to a special function called
pure_virtual. Because abstract classes are not meant to be instan-
tiated, calling pure_virtual throws an exception. Additionally, the
first function entries in a vtable can be 0 if the compiler did not
emit the code of the corresponding functions (e.g., for destructor
functions). To cope with this, Pawlowski et al. [33] allow 0 entries
in the beginning of a vtable. We omit this rule because our approach
can safely ignore the instantiation of abstract classes, given that
vtblptrs for abstract classes are overwritten shortly after object
initialization.
In case of multiple inheritance, we do not distinguish between
vtables and sub-vtables. That is, in the example in Figure 1, our
approach identifies Vtable C and Sub-Vtable C as separate vtables. As
discussed later, this does not pose any limitations for our approach
given our focus on vtblptr write operations (as opposed to methods
that couple class hierarchies to virtual call sites).
The combination of multiple inheritance and copy relocation
poses another edge case. In copy relocation, the loader copies data
residing at the position given by a relocation symbol into the .bss
section without regards to the type of the data. For classes that use
multiple inheritance, the copied data contains a base vtable and
sub-vtable(s), but the corresponding relocation symbol holds only
information on the beginning and length of the data, not the vtable
locations. To ensure that we do not miss any, we identify every
8-byte aligned address of the copied data as a vtable. For example, if
the loader copies a data chunk of 0x40 bytes to the address 0x100,
we identify the addresses 0x100, 0x108, 0x110, ... up to 0x138 as
vtables. While this overestimates the set of vtables, only the correct
vtables and sub-vtables are referenced during object initialization.
Note that on other architectures, the assumed size of 8-byte per
vtable entry as used by our rules may have to be adjusted. For
example, Linux on x86 (32-bit) and ARM would use 4-byte entries,
with no conceptual changes.
4.2 Vtable Pointer Write Operations
The next phase of our static analysis is based on the observation
that to create a new object, its vtblptr has to be written into the
corresponding memory object during the initialization. This is done
in the constructor of the class which can be either an explicit func-
tion or inlined code. The same holds for object destruction by the
corresponding destructor function. Hence, the goal of this analysis
step is to identify the exact instruction that writes the vtblptr into
the memory object. This step is Linux-specific but architecture-
agnostic.
First, we search for all references from code to the vtables identi-
fied in the previous step. Because vtables are not always referenced
directly, the analysis searches for the following different reference
methods:
(1) A direct reference to the start of the function entries in the
vtable. This is the most common case.
(2) A reference to the beginning of the metadata fields in the
vtable. This is mostly used by applications compiled with
position-independent code (e.g., MySQL server which addi-
tionally uses virtual inheritance).
(3) An indirect reference through the GOT. Here, the address to
the vtable is loaded from the GOT.
Starting from the identified references, we track the data flow
through the code (using Static Single Assignment (SSA) form [12])
to the instructions that write the vtblptrs during object initialization
or destruction. We later instrument these instructions, adding code
that stores the vtblptr in a safe memory region. Our approach is
agnostic to the location the C++ object resides in (i.e., heap, stack,
or global memory). Furthermore, since we focus on references from
code to the vtables, our approach can handle explicit constructor
functions as well as inlined constructors and destructors.
During our research, we encountered functions with inlined
constructors where the compiler emits code that stores the vtblptr
temporarily in a stack variable to use it at multiple places in the
same function. Therefore, to ensure that we do not miss any vtblptr
write instructions, our algorithm continues to track the data flow
even after a vtblptr is written into a stack variable. Because we
cannot easily distinguish between a temporary stack variable and
an object residing on the stack, our algorithm also assumes that the
temporary stack variable is a C++ object. While this overestimates
the set of C++ objects, it ensures that we instrument all vtblptr
write instructions, making this overapproximation comprehensive.
4.3 Virtual Callsite Identification
Because vps specifically protects vcalls against control-flow hijack-
ing, we first have to locate them in the target binary. Hence, we have
to differentiate between vcalls and normal C-style indirect call in-
structions. We follow a two-stage approach to make this distinction:
we first locate all possible vcall candidates and subsequently verify
them. The verification step consists of a static analysis component
and a dynamic one. In the following, we explain this analysis in
detail.
4.3.1 Virtual Callsite Candidates. To find virtual callsite candidates,
we use a similar technique as previous work [14, 17, 35, 48]. We
search for the vcall pattern described in Section 2.3, where the
102thisptr is the first argument (stored in the RDI register on Linux
x86-64) to the called function and the vcall uses the vtblptr to
retrieve the call target from the vtable. Note that the thisptr is also
used to extract the vtblptr for the call instruction. A typical vcall
looks as follows:
mov RDI, thisptr
mov vtblptr, [thisptr]
call [vtblptr + offset]
Note that these instructions do not have to be consecutive in
the application, but can be interspersed with other instructions.
Two patterns can be derived from this sequence: the first argument
register always holds the thisptr, and the call instruction target can
be denoted as [[thisptr] + offset], where offset can be 0 and
therefore omitted. This specific dependency between call target
and first argument register is rare for non-C++ indirect calls. With
the help of the SSA form, our algorithm traces the data flow of the
function. If the previously described dependency is satisfied, we
consider the indirect call instruction a vcall candidate.
Note that the same pattern holds for classes with multiple in-
heritance. As described in Section 2.3, when a virtual function of a
sub-vtable is called, the thisptr is moved to the position in the object
where the sub-vtable resides. Therefore, the first argument holds
thisptr + distance, and the call target [[thisptr + distance]
+ offset]. This still satisfies the aforementioned dependency be-
tween first argument and call target. Furthermore, the pattern also
applies to Linux ARM, Linux x86, and Windows x86-64 binaries,
requiring only a minor modification to account for the specific
register or memory location used for the first argument on the
platform (R0 for ARM, the first stack argument for Linux x86, and
RCX for Windows x86-64).
To effectively protect vcalls, it is crucial to prevent false positive
vcall identifications, as these may break the application during
instrumentation. This is also required for related work [14, 17, 35,
48]. While the authors of prior approaches report no false positives
with the above vcall identification approach, our research shows
that most larger binary programs do indeed contain patterns that
result in indirect calls being wrongly classified as virtual callsites.
A possible explanation for the lack of false positives in previous
work is that most prior work focuses on Windows x86 [17, 35, 48],
where the calling conventions for vcalls and other call instructions
differ. That is, on Windows x86, the thisptr is passed to the virtual
function via the ECX register (thiscall calling convention), while