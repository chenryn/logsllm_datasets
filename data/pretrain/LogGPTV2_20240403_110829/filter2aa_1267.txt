FAIRPLAY
DRM和混淆实现
0 1
DRM
Fairplay - DRM
0 1
介绍
数字版权保护
应用于电子书籍/音乐/视频
App DRM自2013年引入
私有代码，高度混淆
Fairplay - DRM
0 1
Load Command
$ otool -l target
| grep -i crypt
cmd LC_ENCRYPTION_INFO_64
cryptoff 16384
cryptsize 4177920
cryptid 1
Fairplay - DRM
0 1
Fairplay Open - From Kernel
Fairplay - DRM
0 1
Fairplay Open - MIG
#include 
#include 
subsystem KernelUser unfreed 502;
type unk1_t = struct[136] of char;
type unk2_t = struct[84] of char;
routine fairplay_open(
fairplay_port   : mach_port_t;
executable_path : pointer_t;
cpu_type        : uint32_t;
cpu_subtype     : uint32_t;
out supf        : pointer_t;
out unk_ool2    : pointer_t;
out unk1        : unk1_t;
out unk2        : unk2_t;
out supf_size   : uint32_t;
out ool2_size   : uint32_t;
out ukn3        : uint32_t);
FairplayIOKit
fairplayd
Fairplay - DRM
0 1
Fairplay Open - fairplayd
$ tree
.
├── SC_Info
│   ├── target.sinf
│   └── target.supf
└── target
Fairplay - DRM
0 1
Fairplay Open - SINF
$ sinf_view.py SC_Info/target.sinf
sinf.frma: game
sinf.schm: itun
sinf.schi.user: 0xdeadbeef
sinf.schi.key : 0x00000002
sinf.schi.iviv: 
sinf.schi.righ.veID: 0x00012345
sinf.schi.righ.plat: 0x00000000
sinf.schi.righ.aver: 0x11223344
sinf.schi.righ.tran: 0x11223344
sinf.schi.righ.sing: 0x00000000
sinf.schi.righ.song: 0x11223344
sinf.schi.righ.tool: P550
sinf.schi.righ.medi: 0x00000080
sinf.schi.righ.mode: 0x00000000
sinf.schi.righ.hi32: 0x00000002
sinf.schi.name:
sinf.schi.priv: 
sinf.sign: 
Fairplay - DRM
0 1
Fairplay Open - SUPF
$ supf_view.py SC_Info/target.supf
KeyPair Segments:
Segment 0x0: arm_v7, Keys: 0x3d0/4k, sha1sum = 
Segment 0x1: arm64, Keys: 0x3fc/4k, sha1sum = 
Fairplay Certificate: 
RSA Signature: 
Fairplay - DRM
0 1
Fairplay Open - QA时间
1. 使用了不安全的RSA密钥长度, 没有校验RSA证书的有效期
3. SINF中明文存储了用户身份标识信息(但是沙盒内无法读取)
4. 可以通过调用MIG + Hook来稳定获取Fairplayd运行中间过程
5. 可通过回归测试确定最终和DRM相关/无关的字段
6. SINF文件中sinf.sign字段不校验（仅在安装时通过installd校验）
Fairplay - DRM
0 1
Fairplay Decrypt - Kernel
Fairplay - DRM
0 1
Fairplay Decrypt - 一些细节
1. Fairplay 以page为单位解密，尺寸是4096 bytes
2. aes-128-cbc解密，密钥通过Fairplay Open的结果计算得出
3. 至少解密过程中没有涉及到HW AES(S8000)
Fairplay - DRM
0 1
Fairplay Decrypt - Demo
0 1
混淆
Fairplay – 混淆
0 1
编译优化 vs makeOpaque
编译优化：Constant Folding, Common 
Subexpression Elimination, Dead Code 
Elimination....
makeOpaque: 绕过编译优化
Expression* makeOpaque(Expression* in)
Fairplay – 混淆
0 1
makeOpaque: 不透明谓词
makeOpaque(true) 
=>
uint32_t x = random();
( (x * x % 4) == 0  ||  (x * x % 4) ==1)  
Fairplay – 混淆
0 1
makeOpaque: 不透明谓词之
BogusCFG
if(makeOpaque(true)){
real_block();
}else{
fake_block();
}
Fairplay – 混淆
0 1
makeOpaque: 不透明常量之可逆变换
//对于互为模反元素的a: 4872655123和ra: 3980501275， 取
uint32_t x = random();
uint32_t c = 0xbeefbeef;
//则 -ra * c = 0x57f38dcb, 满足
((x * 4872655123) + 0xbeefbeef ) * 3980501275 + 0x57f38dcb == x
Fairplay – 混淆
0 1
makeOpaque:不透明常量之MBA表达
式
//OperationSet(+, - , * , & , | , ~)
makeOpauqe(x – c) => (x ^ ~c)  + ( (2 * x) & ~(2 * c + 1) ) + 1;
Fairplay – 混淆
0 1
makeOpaque:不透明常量应用-
IndirectBranch
//OperationSet(+, - , * , & , | , ~)
jmp branch;
=>
jmp global_branch_lut[index];
=>
jmp global_branch_lut[makeOpauqe(index)];
Fairplay – 混淆
0 1
静态恢复实战 – Call Graph 恢复
Indirect Branch + Call Convention混
淆的同时对参数进行了混淆（父
函数加密，子函数解密，利用
LLVM不进行Inter-procedure分析的
特性）
Fairplay – 混淆
0 1
静态恢复实战 – Call Graph 恢复
参数混淆恰巧在父子
函数中引入相同随机
数，让我们得以根据
这一特性恢复出调用
关系
Fairplay – 混淆
0 1
静态恢复实战 – 尝试恢复CFG
1. 使用了Indirect Branch混淆机制
2. 同一个函数的每个基本快具有相
同的PAC Modifier
3. 全局跳转表中DYLD Chained Fixup
中含有Modifier信息
4. 但基本快之前目前仍然是孤立的，
需要动态恢复
Fairplay – 混淆
0 1
静态恢复实战 – 尝试恢复CFG
1. 使用了Indirect Branch混淆机制
2. 同一个函数的每个基本快具有相
同的PAC Modifier
3. 全局跳转表中DYLD Chained Fixup
中含有Modifier信息
4. 但基本快之前目前仍然是孤立的，
需要动态恢复
Fairplay – 混淆
0 1
静态恢复实战 – 其他未解决的
1. 基于不透明常量的数据流混淆, 目前
未找到其生成规则
Fairplay – 混淆
0 1
动态调试工具-穷人的”内核驱动”调试器
1. 把FairplayIOKit内核驱动加载到用户态
2. 通过dyld的机制通知调试器新加载的内
核扩展
3. 开始调试
Fairplay – 混淆
0 1
动态调试工具-执行流跟踪
可以记录自己的执行路径(trapfuzz类似)
可以记录很多次非直接跳转的结果(trapfuzz不
支持)
不能single-step自身
从DTrace中获取灵感: exception-emulation-
recover
Fairplay – 混淆
0 1
动态调试工具-Demo
Fairplay – 混淆
0 1
动态调试工具-更多可能
WIP 反射式macho注入
WIP 无源代码的macho二进制Profiler工具
Update @ https://github.com/pwn0rz/fairplay_research
M        A        N        O        E        U        V        R        E
感谢观看！
KCon 汇聚黑客的智慧