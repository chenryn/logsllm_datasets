# FAIRPLAY DRM 和混淆实现

## 1. 介绍
### 数字版权管理 (DRM)
- **应用领域**：电子书籍、音乐、视频等。
- **App DRM**：自2013年起引入。
- **特点**：私有代码，高度混淆。

## 2. Fairplay - DRM
### Load Command
```bash
$ otool -l target | grep -i crypt
cmd LC_ENCRYPTION_INFO_64
cryptoff 16384
cryptsize 4177920
cryptid 1
```

### Fairplay Open - 从内核入手
#### MIG 接口
```c
#include <mach/mach_types.h>
#include <mach/mach_traps.h>

subsystem KernelUser unfreed 502;
type unk1_t = struct[136] of char;
type unk2_t = struct[84] of char;

routine fairplay_open(
    mach_port_t fairplay_port,
    pointer_t executable_path,
    uint32_t cpu_type,
    uint32_t cpu_subtype,
    pointer_t *out_supf,
    pointer_t *out_unk_ool2,
    unk1_t out_unk1,
    unk2_t out_unk2,
    uint32_t *out_supf_size,
    uint32_t *out_ool2_size,
    uint32_t *out_ukn3
);
```

### Fairplay Open - 文件结构
```bash
$ tree
.
├── SC_Info
│   ├── target.sinf
│   └── target.supf
└── target
```

### Fairplay Open - SINF 文件解析
```bash
$ sinf_view.py SC_Info/target.sinf
sinf.frma: game
sinf.schm: itun
sinf.schi.user: 0xdeadbeef
sinf.schi.key : 0x00000002
sinf.schi.iviv: 
sinf.schi.righ.veID: 0x00012345
sinf.schi.righ.plat: 0x00000000
sinf.schi.righ.aver: 0x11223344
sinf.schi.righ.tran: 0x11223344
sinf.schi.righ.sing: 0x00000000
sinf.schi.righ.song: 0x11223344
sinf.schi.righ.tool: P550
sinf.schi.righ.medi: 0x00000080
sinf.schi.righ.mode: 0x00000000
sinf.schi.righ.hi32: 0x00000002
sinf.schi.name:
sinf.schi.priv: 
sinf.sign: 
```

### Fairplay Open - SUPF 文件解析
```bash
$ supf_view.py SC_Info/target.supf
KeyPair Segments:
Segment 0x0: arm_v7, Keys: 0x3d0/4k, sha1sum = 
Segment 0x1: arm64, Keys: 0x3fc/4k, sha1sum = 
Fairplay Certificate: 
RSA Signature: 
```

### QA 时间
1. 使用了不安全的RSA密钥长度，没有校验RSA证书的有效期。
2. SINF中明文存储了用户身份标识信息（但沙盒内无法读取）。
3. 可以通过调用MIG + Hook来稳定获取Fairplayd运行中间过程。
4. 可通过回归测试确定最终和DRM相关/无关的字段。
5. SINF文件中sinf.sign字段不校验（仅在安装时通过installd校验）。

## 3. Fairplay 解密
### 一些细节
1. **解密单位**：以page为单位解密，尺寸是4096 bytes。
2. **解密算法**：aes-128-cbc解密，密钥通过Fairplay Open的结果计算得出。
3. **硬件支持**：至少解密过程中没有涉及到HW AES(S8000)。

### Demo
（此处可以插入具体的解密演示）

## 4. 混淆
### 编译优化 vs makeOpaque
- **编译优化**：常量折叠、公共子表达式消除、死代码消除等。
- **makeOpaque**：绕过编译优化。

#### 不透明谓词
```c
Expression* makeOpaque(Expression* in);

makeOpaque(true) 
=>
uint32_t x = random();
( (x * x % 4) == 0  ||  (x * x % 4) == 1)  
```

#### BogusCFG
```c
if(makeOpaque(true)){
    real_block();
} else {
    fake_block();
}
```

#### 不透明常量之可逆变换
```c
// 对于互为模反元素的a: 4872655123和ra: 3980501275，取
uint32_t x = random();
uint32_t c = 0xbeefbeef;
// 则 -ra * c = 0x57f38dcb, 满足
((x * 4872655123) + 0xbeefbeef ) * 3980501275 + 0x57f38dcb == x
```

#### MBA 表达式
```c
// OperationSet(+, -, *, &, |, ~)
makeOpauqe(x – c) => (x ^ ~c)  + ( (2 * x) & ~(2 * c + 1) ) + 1;
```

#### IndirectBranch
```c
jmp branch;
=>
jmp global_branch_lut[index];
=>
jmp global_branch_lut[makeOpauqe(index)];
```

### 静态恢复实战 - Call Graph 恢复
- **参数混淆**：父函数加密，子函数解密，利用LLVM不进行Inter-procedure分析的特性。
- **调用关系恢复**：父子函数中引入相同随机数，根据这一特性恢复出调用关系。

### 尝试恢复 CFG
1. **Indirect Branch 混淆机制**。
2. **PAC Modifier**：同一个函数的每个基本块具有相同的PAC Modifier。
3. **DYLD Chained Fixup**：全局跳转表中含有Modifier信息。
4. **动态恢复**：基本块之间目前仍然是孤立的，需要动态恢复。

### 其他未解决的问题
1. 基于不透明常量的数据流混淆，目前未找到其生成规则。

## 5. 动态调试工具
### 穷人的“内核驱动”调试器
1. **加载内核驱动**：将FairplayIOKit内核驱动加载到用户态。
2. **调试器通知**：通过dyld的机制通知调试器新加载的内核扩展。
3. **开始调试**。

### 执行流跟踪
- **记录执行路径**：可以记录自己的执行路径（类似于trapfuzz）。
- **非直接跳转结果**：可以记录很多次非直接跳转的结果（trapfuzz不支持）。
- **单步调试**：不能single-step自身。
- **灵感来源**：从DTrace中获取灵感，使用exception-emulation-recover。

### 更多可能
- **WIP**：反射式macho注入、无源代码的macho二进制Profiler工具。
- **更新**：请访问 [GitHub](https://github.com/pwn0rz/fairplay_research) 获取最新进展。

---

感谢观看！

KCon 汇聚黑客的智慧