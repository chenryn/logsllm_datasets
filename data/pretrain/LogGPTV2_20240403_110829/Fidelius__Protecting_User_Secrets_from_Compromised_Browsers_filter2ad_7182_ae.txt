

	





	
The Raspberry Pi Zero simulated two input devices to the
Nuc, one standard keyboard and one secure keyboard, with
only one device active at any time based on the state of the
application being run. The RPI 3 uses a B101 rev. 4 HMDI
to CSI-2 bridge and the Picamera Python library [31] to treat
the HDMI output from the Nuc as a camera input on which it
overlays trusted content before rendering to the real display.
Trusted content is sent over a separate bluetooth channel.
The bluetooth channel exists as a matter of convenience for
implementation, as HDMI does allow for sending auxiliary
data, but we were unable to programmatically access this
channel through existing drivers.
When an encrypted overlay packet reaches the RPI3 display
device from the Nuc, it is Ô¨Årst decrypted and decoded from a
Ô¨Çat black and white encoding used to transfer data back to a
full RBG color representation. Next, the image is transferred
from the decryption/decoding program to the rendering code,
which places it on the screen. We introduce a refresh delay
between sending frames to give the Picamera library adequate
time to render each frame before receiving the next one.
Although we have built a working Fidelius prototype, a
number of improvements could make for a more powerful
and complete product. These changes include miniaturization
of dongle hardware, faster transfer protocols, e.g. USB 3.0
instead of Bluetooth, and custom drivers to reduce latency
between the dongles and the keyboard/display. We leave the
engineering task of optimizing Fidelius to future work.


	

	
Fig. 7. Trusted display dongle built from Raspberry Pi 3. Frames arrive on the
RPI3 over HDMI in, which connects through a board that treats the frames to
be displayed as camera inputs. Overlays are transmitted over Bluetooth and
decrypted on the RPI3. The combined frame and overlay go to the display
through the HDMI out cable.
B. Browser and Web Enclave
On the Intel Nuc device, Fidelius is implemented as
a Chrome browser extension running on Chrome version
67.0.3396 communicating with a native program via Chrome‚Äôs
Native Messaging API3 for web enclave management. The
extension activates on page load and checks whether the page
contains components that need to be protected, e.g., secure
HTML forms and JavaScript. If it does,
it communicates
with the native program to initiate the web enclave and
perform remote attestation with the server. Once this process
3See https://developer.chrome.com/apps/nativeMessaging
(cid:19)(cid:24)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
completes, the user can interact with secure components on the
page, and secure JavaScript code can be run in the enclave.
Since the page setup process occurs independently of the page
loading in the browser, only the secure components of a page
are delayed by the attestation process ‚Äì non-secure elements of
a page have no loading penalty as a result of running Fidelius.
The majority of the work of enclave management is han-
dled by the native code. For symmetric encryption of forms,
bitmaps, and keystrokes we use AES-GCM encryption and for
signing forms we use ECDSA signatures. JavaScript inside the
enclave is run on a version of the tiny-js [32] interpreter
that we ported to run inside the enclave.
X. EVALUATION
We evaluate Fidelius in order to determine whether the
overheads introduced by the trusted I/O path and web enclave
are acceptable for common use cases and Ô¨Ånd that Fidelius
outperforms display latency on some recent commercial de-
vices by as much as 2.8√ó and prior work by 13.3√ó. Moreover,
communication between the browser and enclave introduces a
delay of less than 40ms to page load time for a login page. We
also identify which components of the system contribute the
most overhead, how they could be improved for a production
deployment, and how performance scales for larger and more
complex trusted page components.
1) TCB Size: The trusted code base for Fidelius consists
of 8,450 lines of C++ code, of which about 3200 are libraries
for handling form rendering and another 3800 are our enclave
port of tiny-js. This does not include native code running
outside the enclave or in the browser extension because our
security guarantees hold even if an attacker could compromise
those untrusted components of the system. It also excludes
dongle code which runs on the Raspberry Pi devices and
not the computer running the web browser. Compared to the
18,800,000 lines of the Chrome project4, Fidelius supports
many of the important functionalities one may wish to secure
in a web browser while exposing an attack surface orders of
magnitude smaller than a naive port of a browser into a trusted
execution environment.
2) Comparison to Commercial Devices: For a standard
login form with username and password Ô¨Åelds, Fidelius‚Äôs key
press to display latency is 201.8 ms. We exclude the time it
takes to transfer the encrypted key press from the keyboard
to the enclave over USB 2.0 (480 Mbps) and the encrypted
bitmap from the enclave to the display over bluetooth (3 Mbps)
from these Ô¨Ågures. This is a reasonable omission because the
size of the data being transferred is small compared to the
transfer speed of these two protocols. Figure 8 compares the
latency between a key press and display update in Fidelius to
measurements of the display latency on several commercial
mobile devices [33]. Although not competitive with high-
performance devices, Fidelius performs comparably or even
faster than some popular commercial devices, running 2.8√ó
faster than the latency on the most recent Kindle. Fidelius‚Äôs
4https://www.openhub.net/p/chrome/analyses/latest/languages summary
efÔ¨Åciency arises from leaving the majority of a page unmodi-
Ô¨Åed and only using encrypted overlays for trusted components.
3) Comparison to Prior Work: We also compared Fidelius
to Bumpy [28], which provides a trusted input functionality but
no corresponding display. For this comparison, we compared
Bumpy to Fidelius‚Äôs trusted path without the display com-
ponent, which accounts for the vast majority of the latency.
Bumpy‚Äôs source code is not available, so we compare to the
reported performance values measured on an HP dc5750 with
an AMD Athlon64 X2 Processor at 2.2 GHz and a Broadcom
v1.2 TPM. Fidelius outperforms Bumpy‚Äôs reported perfor-
mance by 13√ó, running with a latency of 10.59ms compared
to Bumpy‚Äôs 141ms. We believe this more than compensates
for differences in the computing power used to evaluate the
two systems. Although SGX-USB [29], whose source code is
also unavailable, was developed on more recent hardware, we
cannot compare directly to their reported performance results
because they report generic USB data transfer rates into an
enclave whereas we care about the latency of reading and
processing key presses.
4) Page Load Overhead: Figure 9 shows the page load
overhead incurred by Fidelius, not including remote attesta-
tion. Fidelius‚Äôs overhead includes the time for the browser to
inform the enclave of secure components and for the enclave
to verify signatures on them, totaling 35.3ms. We do not report
time for remote attestation, which depends on the latency to
the attestation service. Fortunately, waiting for the attestation
server to respond can occur in parallel with other page load
operations because notifying the enclave of the existence of
trusted components and verifying signatures do not involve
sensitive user data. Moreover, attestation time is independent
of page content, so our measurements fully capture Fidelius‚Äôs
page load time increase as trusted components are added. As
seen in Figure 9, adding components does not signiÔ¨Åcantly
increase page load time.
5) Performance Factors: Figure 10 shows the cost of
various components of our trusted display pipeline, described
in Section IX-A, which makes up almost all of Fidelius‚Äôs
performance overhead. The two most expensive operations
that take place on the display are rendering the overlay using
the Picamera module and the refresh delay we introduce
in order to allow the Picamera module to process frames
without forming a queue of undisplayed frames. The Picamera
module and associated hardware on the Raspberry Pi 3 is not
optimized to add a dynamic overlay to the camera feed. A
better approach would involve directly manipulating the data
from the Nuc computer‚Äôs HDMI output instead of using it to
simulate a camera and placing overlays on top of the camera
feed. This could easily be achieved in a production deployment
of Fidelius and would dramatically reduce display latency.
We also considered how performance varies as the size of
the trusted components on a page increase. Figure 11 shows
that latency increases linearly with the size of the trusted
component. This happens because as the size of the overlay
increases, it takes longer to decrypt, decode and transfer the
overlays. Taking steps to optimize the display pipeline would
(cid:19)(cid:24)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
Display Response Latency
Additional Page Load Time
Fidelius Display Pipeline Costs
)
s
m
(
y
c
n
e
t
a
L
600
400
200
0
iPhone
6s
Galaxy
S7
Fidelius HTC
Rezound
Kindle
Oasis 2
)
s
m
(
y
c
n
e
t
a
L
60
40
20
0
Scripts
Forms
5
10
Number of Trusted Components
)
s
m
(
y
c
n
e
t
a
L
100
80
60
40
20
0
Refresh Decrypt Decode Transfer Render
Fig. 8.
Fidelius key press to display latency
compared with the screen response time on various
commercial devices.
Fig. 9.
Fidelius‚Äôs impact on page load time as
the number of trusted components varies. Adding
components does not signiÔ¨Åcantly affect load time.
Fig. 10. Breakdown of display costs by compo-
nent. Render/refresh delays are an artifact of our
hardware and could be dramatically reduced.
Field size(s) W H W√óH px Time (ms)
50
171
195.83
1 Small
50
342
199.20
1 Medium
1 Large
209.65
50
683
214.74
1 Extra large 911
50
2 Extra large 911 100
227.02
8,550
17,100
34,150
45,550
91,100
Incr. (ms)
-
3.38
10.45
-
12.28
Fig. 11. Key press to display latency when rendering forms. Widths are
fractions of the most popular screen width (w = 1366px): S= 1
w,
8
L= 1
2
w. Increments calculated from the previous row.
w, XL= 2
3
w, M= 1
4
further mitigate latency increase. However, even under our
current implementation, for two full-page width input Ô¨Åelds
(See the two extra large input Ô¨Åeld experiments in Figure 11),
Fidelius has a display latency of only 227ms. Also, a tenfold
increase in pixels (from one small Ô¨Åeld to two extra large
Ô¨Åelds) results in only a 31ms latency increase.
XI. DISCUSSION AND EXTENSIONS
Fidelius opens the door to a new class of secure web appli-
cations supported by the widespread availability of hardware
enclaves in modern computers. The fundamental problems
solved by Fidelius ‚Äì reliably establishing a path from I/O
devices to an enclave residing in an otherwise untrusted system