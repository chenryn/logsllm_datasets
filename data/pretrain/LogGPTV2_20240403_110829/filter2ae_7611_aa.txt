**作者：Hcamael@知道创宇404实验室**  
**英文版本：**
最近在搞IoT的时候，因为没有设备，模拟跑固件经常会缺`/dev/xxx`，所以我就开始想，我能不能自己写一个驱动，让固件能跑起来？因此，又给自己挖了一个很大坑，不管最后能不能达到我的初衷，能学到怎么开发Linux驱动，也算是有很大的收获了。
### 前言
我写的这个系列以实践为主，不怎么谈理论，理论可以自己去看书，我是通过《Linux Device
Drivers》这本书学的驱动开发，Github上有这本书中讲解的实例的代码[[1]](https://github.com/jesstess/ldd4
"\[1\]")。
虽然我不想谈太多理论，但是关于驱动的基本概念还是要有的。Linux系统分为内核态和用户态，只有在内核态才能访问到硬件设备，而驱动可以算是内核态中提供出的API，供用户态的代码访问到硬件设备。
有了基本概念以后，我就产生了一系列的问题，而我就是通过我的这一系列的问题进行学习的驱动开发：
  1. 一切代码的学习都是从Hello World开始的，怎么写一个Hello World的程序？
  2. 驱动是如何在/dev下生成设备文件的？
  3. 驱动怎么访问实际的硬件？
  4. 因为我毕竟是搞安全的，我会在想，怎么获取系统驱动的代码？或者没有代码那能逆向驱动吗？驱动的二进制文件储存在哪？以后有机会可能还可以试试搞驱动安全。
### Everything start from Hello World
提供我的Hello
World代码[[2]](https://raw.githubusercontent.com/Hcamael/Linux_Driver_Study/master/hello.c
"\[2\]")：
    #include 
    #include 
    MODULE_LICENSE("Dual BSD/GPL");
    MODULE_AUTHOR("Hcamal");
    int hello_init(void)
    {
        printk(KERN_INFO "Hello World\n");
        return 0;
    }
    void hello_exit(void)
    {
        printk(KERN_INFO "Goodbye World\n");
    }
    module_init(hello_init);
    module_exit(hello_exit);
Linux下的驱动是使用C语言进行开发的，但是和我们平常写的C语言也有不同，因为我们平常写的C语言使用的是Libc库，但是驱动是跑在内核中的程序，内核中却不存在libc库，所以要使用内核中的库函数。
比如`printk`可以类比为libc中的`printf`，这是在内核中定义的一个输出函数，但是我觉得更像Python里面logger函数，因为`printk`的输出结果是打印在内核的日志中，可以使用`dmesg`命令进行查看
驱动代码只有一个入口点和一个出口点，把驱动加载到内核中，会执行`module_init`函数定义的函数，在上面代码中就是`hello_init`函数。当驱动从内核被卸载时，会调用`module_exit`函数定义的函数，在上面代码中就是`hello_exit`函数。
上面的代码就很清晰了，当加载驱动时，输出`Hello World`，当卸载驱动时，输出`Goodbye World`
PS：`MODULE_LICENSE`和`MODULE_AUTHOR`这两个不是很重要，我又不是专业开发驱动的，所以不用关注这两个
PSS: `printk`输出的结果要加一个换行，要不然不会刷新缓冲区
#### 编译驱动
驱动需要通过make命令进行编译，`Makefile`如下所示:
    ifneq ($(KERNELRELEASE),)
        obj-m := hello.o
    else
        KERN_DIR ?= /usr/src/linux-headers-$(shell uname -r)/
        PWD := $(shell pwd)
    default:
        $(MAKE) -C $(KERN_DIR) M=$(PWD) modules
    endif
    clean:
        rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions
一般情况下，内核的源码都存在与`/usr/src/linux-headers-$(shell uname -r)/`目录下
比如：
    $ uname -r
    4.4.0-135-generic
    /usr/src/linux-headers-4.4.0-135/  --> 该内核源码目录
    /usr/src/linux-headers-4.4.0-135-generic/    --> 该内核编译好的源码目录
而我们需要的是编译好后的源码的目录，也就是`/usr/src/linux-headers-4.4.0-135-generic/`
驱动代码的头文件都需要从该目录下进行搜索
`M=$(PWD)`该参数表示，驱动编译的结果输出在当前目录下
最后通过命令`obj-m := hello.o`，表示把`hello.o`编译出`hello.ko`, 这个ko文件就是内核模块文件
#### 加载驱动到内核
需要使用到的一些系统命令：
  * `lsmod`: 查看当前已经被加载的内核模块
  * `insmod`: 加载内核模块，需要root权限
  * `rmmod`: 移除模块
比如:
    # insmod hello.ko        // 把hello.ko模块加载到内核中
    # rmmod hello            // 把hello模块从内核中移除
旧版的内核就是使用上面这样的方法进行内核的加载与移除，但是新版的Linux内核增加了对模块的验证，当前实际的情况如下:
    # insmod hello.ko
    insmod: ERROR: could not insert module hello.ko: Required key not available
从安全的角度考虑，现在的内核都是假设模块为不可信的，需要使用可信的证书对模块进行签名，才能加载模块
解决方法用两种:
  1. 进入BIOS，关闭UEFI的Secure Boot
  2. 向内核添加一个自签名证书，然后使用证书对驱动模块进行签名，参考[[3]](https://jin-yang.github.io/post/kernel-modules.html "\[3\]")
#### 查看结果
![
](https://images.seebug.org/content/images/2019/01/aba5c16b-6a1e-46fe-8cc7-7de03bd1aa97.png-w331s)
### 在/dev下增加设备文件
同样先提供一份代码，然后讲解这份实例代码[[4]](https://raw.githubusercontent.com/Hcamael/Linux_Driver_Study/master/scull.c
"\[4\]")
    #include 
    #include 
    #include    /* printk() */
    #include      /* kmalloc() */
    #include        /* everything... */
    #include     /* error codes */
    #include     /* size_t */
    #include     /* O_ACCMODE */
    #include 
    #include     /* copy_*_user */
    MODULE_LICENSE("Dual BSD/GPL");
    MODULE_AUTHOR("Hcamael");
    int scull_major =   0;
    int scull_minor =   0;
    int scull_nr_devs = 4;
    int scull_quantum = 4000;
    int scull_qset = 1000;
    struct scull_qset {
        void **data;
        struct scull_qset *next;
    };
    struct scull_dev {
        struct scull_qset *data;  /* Pointer to first quantum set. */
        int quantum;              /* The current quantum size. */
        int qset;                 /* The current array size. */
        unsigned long size;       /* Amount of data stored here. */
        unsigned int access_key;  /* Used by sculluid and scullpriv. */
        struct mutex mutex;       /* Mutual exclusion semaphore. */
        struct cdev cdev;     /* Char device structure. */
    };
    struct scull_dev *scull_devices;    /* allocated in scull_init_module */
    /*
     * Follow the list.
     */
    struct scull_qset *scull_follow(struct scull_dev *dev, int n)
    {
        struct scull_qset *qs = dev->data;
            /* Allocate the first qset explicitly if need be. */
        if (! qs) {
            qs = dev->data = kmalloc(sizeof(struct scull_qset), GFP_KERNEL);
            if (qs == NULL)
                return NULL;
            memset(qs, 0, sizeof(struct scull_qset));
        }
        /* Then follow the list. */
        while (n--) {
            if (!qs->next) {
                qs->next = kmalloc(sizeof(struct scull_qset), GFP_KERNEL);
                if (qs->next == NULL)
                    return NULL;
                memset(qs->next, 0, sizeof(struct scull_qset));
            }
            qs = qs->next;
            continue;
        }
        return qs;
    }
    /*
     * Data management: read and write.
     */
    ssize_t scull_read(struct file *filp, char __user *buf, size_t count,
                    loff_t *f_pos)
    {
        struct scull_dev *dev = filp->private_data;
        struct scull_qset *dptr; /* the first listitem */
        int quantum = dev->quantum, qset = dev->qset;
        int itemsize = quantum * qset; /* how many bytes in the listitem */
        int item, s_pos, q_pos, rest;
        ssize_t retval = 0;
        if (mutex_lock_interruptible(&dev->mutex))
            return -ERESTARTSYS;
        if (*f_pos >= dev->size)
            goto out;
        if (*f_pos + count > dev->size)
            count = dev->size - *f_pos;
        /* Find listitem, qset index, and offset in the quantum */
        item = (long)*f_pos / itemsize;
        rest = (long)*f_pos % itemsize;
        s_pos = rest / quantum; q_pos = rest % quantum;
        /* follow the list up to the right position (defined elsewhere) */
        dptr = scull_follow(dev, item);
        if (dptr == NULL || !dptr->data || ! dptr->data[s_pos])
            goto out; /* don't fill holes */
        /* read only up to the end of this quantum */
        if (count > quantum - q_pos)
            count = quantum - q_pos;
        if (raw_copy_to_user(buf, dptr->data[s_pos] + q_pos, count)) {
            retval = -EFAULT;
            goto out;
        }
        *f_pos += count;
        retval = count;
      out:
        mutex_unlock(&dev->mutex);
        return retval;
    }
    ssize_t scull_write(struct file *filp, const char __user *buf, size_t count,
                    loff_t *f_pos)
    {
        struct scull_dev *dev = filp->private_data;
        struct scull_qset *dptr;
        int quantum = dev->quantum, qset = dev->qset;
        int itemsize = quantum * qset;
        int item, s_pos, q_pos, rest;
        ssize_t retval = -ENOMEM; /* Value used in "goto out" statements. */
        if (mutex_lock_interruptible(&dev->mutex))
            return -ERESTARTSYS;
        /* Find the list item, qset index, and offset in the quantum. */
        item = (long)*f_pos / itemsize;
        rest = (long)*f_pos % itemsize;
        s_pos = rest / quantum;
        q_pos = rest % quantum;
        /* Follow the list up to the right position. */
        dptr = scull_follow(dev, item);
        if (dptr == NULL)
            goto out;
        if (!dptr->data) {
            dptr->data = kmalloc(qset * sizeof(char *), GFP_KERNEL);
            if (!dptr->data)
                goto out;
            memset(dptr->data, 0, qset * sizeof(char *));
        }
        if (!dptr->data[s_pos]) {
            dptr->data[s_pos] = kmalloc(quantum, GFP_KERNEL);
            if (!dptr->data[s_pos])
                goto out;
        }
        /* Write only up to the end of this quantum. */
        if (count > quantum - q_pos)
            count = quantum - q_pos;
        if (raw_copy_from_user(dptr->data[s_pos]+q_pos, buf, count)) {
            retval = -EFAULT;
            goto out;
        }
        *f_pos += count;
        retval = count;