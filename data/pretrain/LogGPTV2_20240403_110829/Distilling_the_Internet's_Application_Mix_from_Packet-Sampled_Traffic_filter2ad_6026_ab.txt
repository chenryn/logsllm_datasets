applicable to our datasets.
Host behavior-based approach: This class of approaches classiﬁes traﬃc by
proﬁling the detailed network interaction of hosts (e.g., which destinations are
contacted on which ports [19] or the network-wide interactions of hosts [17]). The
various approaches in this class have been shown the be particularly eﬀective for
characterizing P2P applications [18]. While we are not able to perform ﬁne-
grained proﬁling of hosts due to the sampled nature of our data, we do make
use of properties inferred from the social behavior of hosts to uncover parts of
Peer-to-Peer traﬃc.
3.2 Building Blocks
The foundation of our classiﬁcation approach outlined below is the ability to
attribute some of the sampled packets to their respective applications by mainly
using payload signatures and partly relying on port numbers. In particular, we
rely on signatures which we derived from the L7-ﬁlter [3] and the libprotoident
library [8] for well-known protocols such as HTTP, SMTP, POP3, IMAP, NNTP
and SSH. We also make use of application signatures derived from protocol spec-
iﬁcations [1,6] for BitTorrent. We also used available signatures to detect other
P2P protocols (e.g., eDonkey) but their contributions in terms of classifying
packets were insigniﬁcant. We veriﬁed all application signatures using manually
generated traﬃc traces. For SSL-based protocols (we focus on HTTPS, NNTPS,
184
P. Richter et al.
POP3S, and IMAPS), we use signatures indicating an SSL handshake and con-
sider SSL handshake packets on the well-known port number of the respective
application (e.g., 443 for HTTPS) as belonging to that application.
To ensure the accuracy of our application signatures (i.e., keeping the false
positives low by limiting the number of signatures), we restrict our set of applica-
tion signatures and port numbers and only consider applications that (i) gener-
ate signiﬁcant traﬃc and (ii) are reliably detectable using application signatures
and, if needed, port numbers. For example, we do not try to classify Skype
traﬃc because its detection remains unreliable unless specialized approaches are
used [9].
3.3 Classiﬁcation Method
Figure 2 illustrates our classiﬁcation pipeline. In particular, our classiﬁcation
approach requires that the given traﬃc trace be processed twice, ﬁrst in a pre-
classiﬁcation phase and then in a classiﬁcation phase. The purpose of the ﬁrst
phase is to derive state, which will then be leveraged in the classiﬁcation phase
to attribute packets to their respective endpoints, revealing the corresponding
application.
I. Pre-classiﬁcation phase
The goal of the pre-classiﬁcation step is to extract server endpoints and IP
addresses of clients, which will be used as state in the subsequent classiﬁca-
tion phase. In this phase, we rely solely on payload-based classiﬁcation using
our validated signatures (as well as SSL signatures on well-known ports). For
each packet that belongs to a client-server application, we save the server end-
point, i.e., its (IP, port) tuple. To identify the server-side of a packet, we rely on
directed signatures (e.g., HTTP request vs. HTTP reply). For packets matching
a BitTorrent signature, we save the SRC and DST IPs but not the port num-
bers. Since most BitTorrent traﬃc that matches our signatures is UDP-based
which, due to its connectionless nature, is more susceptible to spooﬁng as well
as other phenomena such as BitTorrent DHT poisoning for control traﬃc (e.g.,
[30]), we only count an IP address as BitTorrent speaker if we sample at least 2
packets that originate from/are sent to that IP address matching our signatures.
Additionally, we save IP addresses of HTTP clients. In this pre-classiﬁcation, we
identify more than 2.7 M HTTP server endpoints (1.43 M unique IP addresses),
and 210 K HTTPS endpoints. On the client side, we identify 37.7 M HTTP client
IPs, as well as 38.9 M BitTorrent speakers, where the overlap between HTTP
client IPs and BitTorrent speakers is 12.4 M IP addresses.
II. Classiﬁcation phase
We next process that same trace again and ensure that each packet proceeds
through the classiﬁcation pipeline shown in Fig. 2. Once a packet can be attribu-
ted to an application, no further processing will be done for that packet.
Step 1: Payload signature matching. We match our previously extracted
application signatures on each packet. Just by matching application signatures,
Distilling the Internet’s Application Mix from Packet-Sampled Traﬃc
185
Fig. 2. Classiﬁcation pipeline.
we are able to classify 11.7 % of the bytes exchanged at our IXP. This unexpected
high number (recall that application signatures typically occur only in the ﬁrst
packets of a ﬂow) is mainly the result of a proliferation of UDP-based BitTorrent
data transfers, i.e., µTP [6]. µTP is a transport protocol based on UDP and
includes its own header in every single packet. Thus, its classiﬁcation is robust
to sampling – in stark contrast to TCP traﬃc. The proliferation of µTP has
also been reported in earlier studies [14,22], as well as the rise of UDP-based
applications using own headers in every packet [15]. In total, 11.3 % of the packets
matched a signature, of which 84.5 % matched the BitTorrent UDP signature,
another 11.7 % matched an HTTP signature, 2.4 % an SSL handshake on port
443, 0.94 % a BitTorrent TCP signature, and 0.46 % other signatures.
Step 2: Server endpoint matching. If a packet does not contain a valid
application signature, we then check if the source or the destination (IP, port)
tuple of the respective packet is a known server endpoint, as identiﬁed in our
pre-classiﬁcation step. If so, we classify the packet as belonging to the speciﬁc
application. In this step, we classify 66.5 % of bytes! This result highlights the
eﬃciency of using a stateful application characterization approach. While we
cannot sample application signatures on a per-ﬂow basis, aggregating the infor-
mation on a per (IP, port) endpoint basis largely overcomes the challenge posed
by packet sampling. At the same time, we achieve a high conﬁdence by rely-
ing on strong payload-based classiﬁcation. This method works particularly well
for popular client-server based applications, most prominently HTTP, where a
large number of connections is destined to a comparably small number of server
endpoints. To assess the impact of possibly stale endpoints (e.g., hosts that do
not run the classiﬁed application on their server endpoint after some time), we
repeated the classiﬁcation by only using server endpoints that were identiﬁed
within a time frame of 24 (12) h, which reduced our completeness by only 1 %
(2 %) of the bytes.
Step 3: Port-based classiﬁcation. We next use a short list of 15 known port
numbers (mapping to 13 applications) to classify respective packets as belonging
to the corresponding application. In this step, we classify another 4.5 % of all bytes.
186
P. Richter et al.
The largest contributor to this third step is RTMP (1.7 %), for which no reliable
signature is available. Interestingly, a signiﬁcant fraction of traﬃc on port 1935
(RTMP) is HTTP traﬃc (and was thus already classiﬁed in the previous step),
likely RTMP-inside-HTTP. Generally, we note that port-based classiﬁcation can
still be used reliably (but is not necessarily complete) when used in a conservative
fashion, conﬁrming prior studies [23]. For example, we observe that only less than
0.3 % of the TCP traﬃc on port 80 did not match an endpoint which was detected
using HTTP signatures (in the pre-classiﬁcation). However, we ﬁnd that more
than 10 % of the total HTTP traﬃc is not seen on port 80, and the most popular
encountered non-standard ports are 8080 (3.8 % of HTTP traﬃc), 1935 (2.9 %
of HTTP traﬃc) and 8000 (0.6 % of HTTP traﬃc).
Step 4: Packet exchanged between BitTorrent speakers. In this step,
we consider packets that were not classiﬁed in a prior step and classify them
as “BT/P2P likely” if they are exchanged between two previously identiﬁed
BitTorrent speakers. This step enables us to classify an additional 10.2 % of the
IXP’s traﬃc. Depending on the individual client’s conﬁguration and capabilities,
BitTorrent relies on TCP and UDP as transport protocol for data exchange
as well as for exchanging control messages (e.g., DHT queries). While we are
able to classify the bulk of BitTorrent UDP traﬃc (recall that we classiﬁed
more than 11 % of the traﬃc just using signatures), we are not able to classify
the bulk of TCP traﬃc exchanged between BitTorrent speakers. In this step
we account for this portion of the traﬃc. To provide further empirical support
for this approach, we inspected partly sampled TCP messages of the peer-wire
protocol [1] which corresponds to the transfer of chunks. By extrapolating the
number of piece messages of the BitTorrent peer-wire protocol and multiplying
it with the observed chunk size (16 K in 99 % of all cases), we can estimate that
the pure content volume (excluding headers and control traﬃc) exchanged via
BitTorrent TCP peer-wire connections is around 8 %. Thus, we are convinced
that the majority of the traﬃc classiﬁed in this step is indeed BitTorrent traﬃc.
To acknowledge the lowered conﬁdence and the possibility of other protocols
contributing to this class, we classify these packets as “BT/P2P likely”.
Step 5: Packet exchanged between Web clients or BitTorrent speakers.
As a tie-breaking criteria, we classify all packets that are exchanged between
either Web clients or BT speakers as “P2P likely”. We only classify another 1.3 %
of the IXP’s total traﬃc by using this heuristic. This small number suggests that
most P2P likely traﬃc is indeed exchanged between BitTorrent speakers and was
already classiﬁed in the previous step.
Using this classiﬁcation approach, we are able to attribute 82.7 % of the IXP’s
overall traﬃc directly to its corresponding application (Steps 1–3). More than
78 % of the traﬃc can be classiﬁed either directly using payload signatures or by
matching the packet to server endpoints identiﬁed using payload signatures – we
only fall back to port-based classiﬁcation for 4.5 % of the traﬃc. Another 11.5 %
of the traﬃc is classiﬁed as “BT/P2P likely” using our heuristics based on the
social behavior of hosts.
Distilling the Internet’s Application Mix from Packet-Sampled Traﬃc
187
4 The Internet’s Application Mix Seen at an IXP
In this section, we discuss properties of the observed application mix. Figure 3
shows the result of our classiﬁcation method when applied to the IXP’s traf-
ﬁc, both in terms of packets and bytes (ﬂow statistics are not obtainable from
our packet-sampled traces). We observe that HTTP(S) clearly dominates the
application mix with a share of more than 65 % of the bytes. While the increas-
ing dominance of HTTP for a multitude of applications has been reported in
prior studies (e.g., [26]), the other signiﬁcant share of traﬃc is composed of
the BitTorrent UDP and BT/P2P likely class, accounting for some 20 % of the
exchanged bytes. Other protocols such as email, newsgroups, RTMP etc. account
for roughly 6 % of the bytes exchanged at the IXP.
Figure 4(a) shows a timeseries of the contributions of the various applications
for the 09-2013 trace. While we see that HTTP(S) always dominates (its share
never drops below 55 %), we observe a typical diurnal pattern indicating more
pronounced HTTP(S) usage in the busy hour in the late afternoon. The share of
BitTorrent/P2P peaks in the oﬀ-hours. Interestingly, we observe a second peak
of BT/P2P activity each day, which is likely due to BitTorrent users in various
time zones. Also the protocols in the “other known” category dominate in the
oﬀ-hours. NNTP(S) is the largest contributor to this category and is reportedly
used for ﬁle-sharing [23].
Next, we use ﬁve snapshots to infer the application mix as observed at this
IXP during the last 2.5 years. The results for the exchanged bytes are shown in
Fig. 4(b). We observe that while the IXP’s aggregate application mix is relatively
stable, there is a signiﬁcant increase of HTTPS traﬃc during these 2.5 years, from
1.9 % in April 2011 to 11.1 % in September 2013. Note that while in the snapshots
from November 2011 to December 2012, both the share of HTTPS and HTTP
traﬃc increased, there is a simultaneous decrease in HTTP and steep increase
in HTTPS in 2013, suggesting a widespread switchover from HTTP to HTTPS
in 2013.
P
T
T
H
S
P
T
T
H
0.0
0.2
0.4
0.6
fraction of bytes
P
T
T
H
S
P
T
T
H
P
D
U
T
B
l
y
e
k
i
l
P
2
P
T
B
/
P
D
U
T
B
0.8
l
y
e
k
i
l
P
2
P
T
B
/
I
I
D
E
F
S
S
A
L
C
N
U
1.0
I
I
D
E
F
S
S
A
L
C
N
U
0.0
0.2
0.4
0.6
0.8
1.0
fraction of packets
Protocol % bytes % pkts
47.52
HTTP
HTTPS
11.08
1.48
RTMP
0.87
NNTP
0.38
NNTPS
0.91
SMTP
0.87
DNS
SSH
0.61
0.74
9.57
12.31
2.10
11.56
57.39
9.53
1.72
1.41
0.63
0.53