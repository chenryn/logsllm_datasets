DH. In the former, receiver can verify correctness of sender’s
computation by checking H(x) = (μ(cid:3)/r)e mod N, assum-
ing that N is generated correctly. Whereas, to achieve the
same in Blind-DH, sender needs to attach a Zero-Knowledge
Proof of Knowledge (ZKPK) of the discrete log. Also, usage
of Chinese Remainder Theorem (CRT) in signing yields
lower computational complexity for Blind-RSA.
III. DEFINING PRIVACY IN MICRO-BLOGGING OSNS
Deﬁning privacy in a Twitter-like system is a challenging
task. Our deﬁnition revolves around the server (i.e., Twitter
itself) that needs to match tweets to followers while learning
as little as possible about both. This would be trivial if
tweeters and followers shared secrets [52]. It becomes more
difﬁcult when they have no common secrets and do not trust
each other.
A. Built-in Limitations
From the outset, we acknowledge that privacy attainable
in Twitter-like systems is far from perfect. Ideal privacy in
micro-blogging OSNs can be achieved only if no central
server exists: all followers receive all tweets and decide,
in real-time, which are of interest. Clearly, this would be
unscalable and impractical in many respects. Thus, a third-
party server becomes necessary.
The main reason for the server’s existence is the matching
function: it matches incoming tweets to subscriptions and
forwards them to corresponding followers. Although we
want the server to learn no more information than an ad-
versary observing a secure channel, the very same matching
function precludes it.
Similarly, the server learns whenever multiple subscrip-
tions match the same hashtag in a tweet. Preventing this is
not practical, considering that a a tweeter’s single hashtag
might have a very large number of followers. It appears that
the only way to conceal the fact that multiple followers are
interested in the same hashtag (and tweet) is for the tweeter
to generate a distinct encrypted (tweet, hashtag) pair for
each follower. This would result in a linear expansion (in
the number of followers of a hashtag) for each tweet. Also,
considering that all such pairs would have to be uploaded at
roughly the same time, even this unscalable approach would
still let the server learn that – with high probability – the
same tweet is of interest to a particular set of followers.
Note that the above is distinct from server’s ability to learn
whether a given subscription matches the same hashtag in
multiple tweets. As we discuss later in the paper (Section
VII-C), one could prevent the server from learning this infor-
mation, while incurring reasonable extra overhead. However,
it remains somewhat unclear whether the privacy gain would
be worthwhile.
B. Privacy Goals and Security Assumptions
Our privacy goals are commensurate with aforementioned
limitations.
• Server: learns minimal information beyond that ob-
tained from performing the matching function. We
allow it
to learn which, and how many, subscrip-
tions match a hashtag (even if the hashtag is crypto-
graphically transformed). Also, it learns whether two
subscriptions for the same tweeter refer to the same
hashtag. Furthermore, it learns whenever two tweets
by the same tweeter carry the same hashtag. However,
as mentioned above, this can be easily remedied; see
Section VII-C.
• Tweeter: learns who subscribes to its hashtags but not
which hashtags have been subscribed to.
• Follower: learns nothing beyond its own subscriptions.
Speciﬁcally, it learns no information about any other
subscribers or any tweets that do not match its sub-
scriptions.
Our privacy goals, coupled with the key desired features
of a Twitter-like system, prompt an important assumption
the server must adhere to the Honest-but-Curious
that
(HbC) adversarial model. Speciﬁcally, although the server
faithfully follows all protocol speciﬁcations, it may attempt
to passively violate our privacy goals. According to our
interpretation, the HbC model precludes the server from
creating “phantom” users. In other words, the server does
not create spurious accounts in order to obtain subscriptions
and test whether they match other followers’ interests. The
justiﬁcation for this assertion is as follows:
Suppose that the server creates a phantom user
for the purpose of violating privacy of genuine
followers. The act of creation itself does not vi-
olate the HbC model. However, when a phantom
user engages a genuine tweeter in order to obtain
a subscription, a protocol transcript results. This
transcript testiﬁes to the existence of a spurious
user (since the tweeter can keep a copy) and can
be later used to demonstrate server misbehavior.
We view this assumption as unavoidable in any Twitter-
like OSN. The server provides the most central and the
most valuable service to large numbers of users. It thus
has a valuable reputation to maintain and any evidence, or
even suspicion, of active misbehavior (i.e., anything beyond
Honest-but-Curious conduct) would result in a signiﬁcant
loss of trust and a mass exodus of users.
Finally, we emphasize that side-channels (e.g., timing and
correlation) attacks are beyond the scope of this paper.
288
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:17 UTC from IEEE Xplore.  Restrictions apply. 
C. Deﬁnitions
To quantify privacy loss at the server we deﬁne a generic
function ζ(·,·) over an arbitrary set of tweets and subscrip-
tions. We then model the probability that the server, given
access to cryptographically transformed tweets and subscrip-
tions, can compute such a function vis-a-vis probability of
computing ζ(·,·) in an ideal world where it interacts with an
oracle doing the matching. In particular, let a tweet T be a
triple (id∗, M, ht∗) where id is the unique ID of the tweeter,
M is the message and ht is the hashtag included in the
tweet. (In real-world Twitter, a message can have multiple
hashtags; however, we assume a single hashtag in order to
simplify the discussion, with no loss of generality). Let a
subscription R be a pair (id, ht) where id is the unique ID
of the tweeter and ht is the hashtag the tweet should contain
in order for a match to occur.
= R.ht
= T (cid:3).ht∗
= R.id ∧ T.ht∗
= T (cid:3).id∗ ∧ T.ht∗
We deﬁne the following functions:
match(T, R) = 1 ⇔ T.id∗
) = 1 ⇔ T.id∗
) = 1 ⇔ R.id = R(cid:3).id ∧ R.ht = R(cid:3).ht
matchtw(T, T (cid:3)
matchreq(R, R(cid:3)
Let T = {T1, . . . , Tn} and R = {R1, . . . , Rm} be the set
of tweets and subscriptions up to a given time and let ˆT , ˆR
be their cryptographically transformed versions, respectively.
Let O be an oracle that has access to T ,R, and implements
functions match, matchtw and matchreq.
Informally, we want the view of the server (that has access
to ˆT , ˆR) to be the same as that of a server that asks O to
implement aforementioned functions over T and R. That is,
the following probability:
|P r[ζ(T ,R) ← A ˆT , ˆR
] − P r[ζ(T ,R) ← AO(T ,R)]|
should be negligible, for any ζ(·,·) deﬁned over T ,R.
the server learns whenever multiple followers are subscribed
to the same hashtag of a given tweeter.
Matching Privacy. The server can compute only functions
that can be also computed by interacting with the oracle that
implements the match functions.
IV. PRIVATE TWEETING IN Hummingbird
In this section, we present the Hummingbird architecture
and protocols.
A. Architecture
Hummingbird architecture mirrors Twitter’s,
involving
one central server and an arbitrary number of registered
users, that can publish and retrieve short text-based mes-
sages. Publication and retrieval is based on a set of hashtags
(i.e., arbitrary keywords) that are appended to the message
or speciﬁed in the search criteria. Similar to Twitter, Hum-
mingbird involves three types of entities:
1) Tweeters post messages accompanied by a set of hash-
tags that are used by other users to search for those
messages. For example, Bob posts a message: “I care
about #privacy” where “#privacy” is the associated
hashtag.
2) Followers issue “follow requests” to any tweeter for
any hashtag of interest, and, if a request is approved,
receive all tweets that match their interest. For instance,
Alice who wants to follow Bob’s tweets with hashtag
“#privacy” would receive the tweet: “I care about
#privacy” and all other Bob’s tweets that contain the
same hashtag.
3) Hummingbird Server (HS) handles user registration
and operates the Hummingbird web site. It is respon-
sible for matching tweets with follow requests and
delivering tweets of interest to users.
that
We now provide some deﬁnitions that
try to capture
the privacy loss that Hummingbird must bear in order to
efﬁciently match tweets to subscriptions. Within a tweet, we
distinguish between the message (i.e., conveyed information)
and its hashtags (i.e., the keywords that the system uses to
identify messages).
Tweeter Privacy. An encrypted tweet
includes a
hashtag ht should leak no information to any party that has
not been authorized by the tweeter to follow it on ht. In other
words, only users that have been authorized to follow the
tweeter on the hashtag can decrypt the associated message.
For its part, the server learns whenever multiple tweets from
a given tweeter contain the same hashtag.
Follower Privacy. A request to follow a tweeter on hashtag
ht should disclose no information about
the hashtag to
any party other than the follower. That is, a follower can
subscribe to hashtags such that tweeters, the server or any
other party learns nothing about follower interests. However,
B. Design Overview
In contrast to Twitter, access to tweets in Hummingbird
is restricted to authorized followers, i.e., they are hidden
from HS and all non-followers. Also, all follow requests
should be subject to approval. Whereas, in Twitter, users
can decide to approve all requests automatically. In addition,
Hummingbird introduces the concept of follow-by-topic, i.e.,
followers decide to follow tweeters and specify hashtags
of interest. This feature is particularly geared for following
high-volume tweeters, as it ﬁlters out “background noise”
and avoids saddling users with potentially large quantities
of unwanted content. For example, a user might decide
to follow the New York Times on #politics,
thus, not
receiving NYT’s tweets on, e.g., #cooking, #gossip, etc.
Furthermore, follow-by-topic might allow tweeters to charge
followers a subscription fee, in order to access premium
content. For example, Financial Times could post tweets
about stock market trends with hashtag #stockMarket and
289
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:17 UTC from IEEE Xplore.  Restrictions apply. 




	



	







Figure 1: Hummingbird protocols overview.































only authorized followers who pay a subscription fee would
receive them.
Key design elements are as follows:
1) Tweeters encrypt their tweets and hashtags.
2) Followers can privately follow tweeters on one or more
hashtags.
3) HS can obliviously match tweets to follow requests.
4) Only authorized (previously subscribed) followers can
decrypt tweets of interest.
At the same time, we need to minimize overhead at HS.
Ideally, privacy-preserving matching should be as scalable
as its non-private counterpart.
Intuition. At the core of Hummingbird architecture is a
simple OPRF-based technique. Suppose Bob wants to tweet
a message M with a hashtag ht. The idea is to derive an
encryption key for a semantically secure cipher (e.g., AES)
from fs(ht) and use it to encrypt M. (Recall that s is Bob’s
secret.) That is, Bob computes k = H1(fs(ht)), encrypts
Enck(M) and sends it to HS. Here, H1 : {0, 1}∗ → {0, 1}τ1
is a cryptographic hash function modeled as a random oracle.
To follow Bob’s tweets with hashtag ht, another user
(Alice) must ﬁrst engage Bob in an OPRF protocol where
she plays the role of the receiver, on input ht, and Bob is the
sender. As a result, Alice obtains fs(ht) and derives k that
allows her to decrypt all Bob’s tweets containing ht. Based
on OPRF security properties, besides guaranteeing tweets’
conﬁdentiality, this protocol also prevents Bob from learning
Alice’s interests, i.e., he only learns that Alice is among his
followers but does not learn which hashtags are of interest to
her. As described in Section IV-C (protocol Follow) below,
Alice and Bob do not run the OPRF protocol directly or
in real time. Instead, they use HS as a conduit for OPRF
protocol messages.
290
Once Alice establishes a follower relationship with Bob,
HS must also efﬁciently and obliviously match Bob’s tweets
to Alice’s interests. For this reason, we need a secure tweet
labeling mechanism.
To label a tweet, Bob uses a PRF, on input an arbitrary
hashtag ht, to compute a cryptographic token t, i.e., t =
H2(fs(ht)) where H2 is another cryptographic hash func-
tion, modeled as a random oracle: H2 : {0, 1}∗ → {0, 1}τ3,
with τ3 polynomial function of the security parameter τ.
This token is communicated to HS along with the encrypted
tweet.
As discussed above, on the follower side, Alice must
obtain fs(ht) beforehand, as a result of an OPRF proto-
col with Bob. She then computes the same token t, and
uploads it to HS. Due to OPRF security properties, t reveals
no information about the corresponding hashtag. HS only
learns that Alice is one of Bob’s followers. From this point
on, HS obviously and efﬁciently matches Bob’s tweets to
Alice’s interests. Upon receiving an encrypted tweet and an
accompanying token from Bob, HS searches for the latter
among all tokens previously deposited by Bob’s followers.
As a result, HS only learns that a tweet by Bob matches a
follow request by Alice.
OPRF choice. Although Hummingbird does not restrict
the underlying OPRF instantiation, we selected the OPRF
construct based on Blind-RSA signatures (in ROM) since it
offers lowest computation and communication complexities.
One side-beneﬁt of using the Blind-RSA-based OPRF is that
it allows us to use standard RSA public key certiﬁcates.
At
the Hummingbird architecture is not
dependent on Blind-RSA based OPRF; it can be seamlessly
replaced with any other OPRF construction, e.g., see Sec-
tion VII-H.
C. Protocols
the same time,
Figure 1 overviews protocols involved in a simple scenario
with only two users (tweeter Bob and follower Alice). The
actual protocols are described below.
User Registration. To join Hummingbird, a user registers,
and creates an account, with HS. This involves obtaining
username/password credentials and creating a public Hum-
mingbird proﬁle. Also, at this phase, each user creates an