# Cryptographic Protocol Analysis and Transformation

## 1. Introduction
This document describes an analysis for checking the confidentiality of secret messages in cryptographic protocols. The analysis involves transforming the protocol into one or more new protocols, and then verifying the security of these transformed protocols.

## 2. Example Protocol: Third Iteration
### 2.1. Introducing Case-Statements
**Figure 15: Example Protocol with Case-Statements**

```plaintext
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)

the program for S
...

the program for A
A := random(3)
send (A, B, N_A)
m_A2 := receive(4)
wait(s1)
check(m_A2 = f_a)
dm_A2 := df_a
check(N_A)
send π4(dm_A2)
K_A
aM := encr K_A(Z)
send aM
AB := π4(dm_A2)
A = π4(AB)
N_S
K_AB := gen key(7)
df_b := (K_AB, A)
f_b := encr K_BS(Z)
signal (s2)
df_a := (N_S, A)
f_a := encr K_AS(Z)
signal (s1)
send f_a
(A, B, K_AB, f_b)

the program for B
m3 := receive(10)
wait(s2)
check(m3 = f_b)
dm3 := df_b
AB := π2
K_B
m4 := receive(11)
bM := case m4 of
  1(m3) -> M
  aM -> M
```

### 2.2. Replacing Encryptions
**Figure 16: Example Protocol with Replaced Encryptions**

```plaintext
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)

the program for S
...

the program for A
A := random(3)
send (A, B, N_A)
m_A2 := receive(4)
wait(s1)
check(m_A2 = f_a)
dm_A2 := df_a
check(N_A)
send π4(dm_A2)
K_A
aM := encr K_A(Z)
signal (s3)
send aM
AB := π4(dm_A2)
A = π4(AB)
N_S
K_AB := gen key(7)
df_b := (K_AB, A)
f_b := encr K_BS(Z)
signal (s2)
df_a := (N_S, A)
f_a := encr K_AS(Z)
signal (s1)
send f_a
(A, B, K_AB, f_b)

the program for B
m3 := receive(10)
wait(s2)
check(m3 = f_b)
dm3 := df_b
AB := π2
K_B
m4 := receive(11)
wait(s3)
check(m4 = aM)
bM := M
```

### 2.3. Removing Case-Statements
**Figure 17: Example Protocol without Case-Statements**

```plaintext
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)

the program for S
...

the program for A
A := random(3)
send (A, B, N_A)
m_A2 := receive(4)
wait(s1)
check(m_A2 = f_a)
dm_A2 := df_a
check(N_A)
send π4(dm_A2)
K_A
aM := encr K_A(Z)
signal (s3)
send aM
AB := π4(dm_A2)
A = π4(AB)
N_S
K_AB := gen key(7)
df_b := (K_AB, A)
f_b := encr K_BS(Z)
signal (s2)
df_a := (N_S, A)
f_a := encr K_AS(Z)
signal (s1)
send f_a
(A, B, K_AB, f_b)

the program for B
m3 := receive(10)
wait(s2)
check(m3 = f_b)
dm3 := df_b
AB := π2
K_B
m4 := receive(11)
wait(s3)
check(m4 = aM)
bM := M
```

## 3. Analysis
The set of variables that occur in projection statements is {dmA_2, m1, m3}. Among these variables, the abstract value of dmA_2 is tuple4, which allows us to statically determine whether some projection succeeds or fails. We can replace the decryptions with key(7) using case-statements and the encryptions with key(7) using the encryptions of Z. The final protocol (Figure 17) is considered secure because the variable M is used only in defining bM and is not sent over the network, nor does the termination of execution depend on its value.

## 4. Conclusion
We have presented an analysis for checking the confidentiality of secret messages in cryptographic protocols. The analysis transforms the original protocol into one or more new protocols and verifies their security. The original protocol is deemed secure if all transformed protocols are secure. Future work could include considering richer program languages, integrity properties, and additional cryptographic primitives.

## 5. Acknowledgements
We thank the anonymous referees of the 2004 IEEE Security and Privacy conference and Birgit Pfitzmann for their valuable comments.

## 6. References
[1] Abadi, M., & Jürjens, J. (2001). Formal Eavesdropping and Its Computational Interpretation. In TACS 2001.
...
[35] Yao, A. C. (1982). Theory and applications of trapdoor functions (extended abstract). In FOCS 1982.

---

This optimized version provides a clear and structured presentation of the cryptographic protocol analysis and transformation, making it easier to understand and follow.