nent) or process. We think controlling information ﬂows after
data has been released is a very valuable complement to an
access control system like Binder capabilities that governs if
data should be released or accessed, and it might be interesting
13
(mobile) systems is highly amenable to capability based access
control and that capabilities can support defensive mobile app
development better than the current permission model.
To make capabilities and app compartmentalization more
accessible to app developers, future work should investigate
how developers can be supported (e.g., tools and frameworks),
in particular in light of the inherently modular design of mobile
systems. Furthermore, our current design makes a trade-off
between pure object-capabilities and backwards compatibility
to Android’s permissions, and moving Android to a pure
object-capability system might be worthwhile.
Acknowledgements. We like to thank our anonymous review-
ers for their valuable comments and Lucas Davi for shep-
herding this paper. This work was partially supported by the
German Federal Ministry of Education and Research (BMBF)
through funding for the Center for IT-Security, Privacy, and
Accountability (CISPA) (VFIT/FKZ: 16KIS0345).
REFERENCES
https://android.
(android-8.1.0 r23),”
“Android manifest ﬁle: Service,” https://developer.android.com/guide/
topics/manifest/service-element, last visisted: 05/03/2018.
“AndroidManifest.xml
googlesource.com/platform/frameworks/base/+/android-8.1.0 r23/
core/res/AndroidManifest.xml, last visited: 05/03/2018.
“Capsicum userspace library,” https://github.com/google/capsicum-test/
tree/dev/libcaprights, last visisted: 07/07/18.
“Security
versions/pie/android-9.0-changes-all, last visisted: 06/08/2018.
“Storage - Android Open Source Project,” https://source.android.com/
devices/storage/, last visisted: 06/08/2018.
“platform.xml,” https://android.googlesource.com/platform/frameworks/
base/+/master/data/etc/platform.xml, 2017, last visisted: 05/03/2018.
https://developer.android.com/about/
behavior
changes,”
to explore in the future to which extent Binder capabilities
can further enhance IFC solutions. Moreover, supporting inter-
component IFC within an app can also motivate developers
to consider least-privilege data dissemination between their
apps’ components and add to the encouragement for app
compartmentalization by DROIDCAP.
App virtualization: App virtualization solutions like Box-
ify [9] put a reference monitor between a sandboxed app
and the system. The primary goal of app virtualization is to
provide app sandboxing without modifying the app or the
system. App virtualization differs ﬁrst of all in its declared
purpose from DROIDCAP, since it does not encourage app
compartmentalization by app developers but declares app de-
velopers as the opponent whose apps have to be constrained.
Further, while Boxify allows enforcement of powerful policies
on the app’s interaction with other apps, system services, or the
ﬁle system, its design comes also with inherent performance
issues for which object-capabilities could be an easy way out.
For instance, Boxify has to proxy all ﬁle-system access by a
sandboxed app, since sandboxed apps are isolated processes,
which adds a complete IPC round-trip time to the syscall.
Using capabilities, access to the app’s private directory—a
subdirectory of the Boxify app’s private directory—can be
simply delegated to the sandboxed process. Similarly, if Boxify
does not need to enforce policies on an app’s access to system
services, it can simply delegate a Binder capability to the sand-
boxed app to allow it to access the system service without the
additional round-trip via the Boxify app. Furthermore, Boxify’s
highly-privileged Broker by-design violates the principle of
least privilege to be able to mediate any potential app.
General attacker model: Lastly, it should be emphasized
that DROIDCAP currently primarily targets app developers
that want
to design their apps more defensively by com-
partmentalizing them or privilege-separating untrusted code.
But, like other compartmentalization solutions like [18], [29],
[52], [59], [71] our attacker model does not include malicious
developers. DROIDCAP by itself cannot prevent malicious or
colluding [40], [13] apps, although it prevents unauthorized
delegation of capabilities between apps.
VII. CONCLUSIONS
We presented DROIDCAP, a retroﬁtting of Android’s
Binder IPC mechanism to establish Binder capabilities that
associate each IPC handle with the access rights to the refer-
enced remote process. We integrated Binder capabilities into
Androids’ app management, such as requesting Binder han-
dles to application framework services/apps, and permission
enforcement, i.e., using the Binder capabilities for enforcing
permissions. Additionally, we complemented DROIDCAP with
a prototypical integration of Capsicum providing the founda-
tion for ﬁle-system permissions as capabilities. We presented
our approach for putting apps into capability mode, a non-
trivial task that required integration with Android’s zygote and
SELinux. As a result, we created a permission enforcement that
allows per-process permissions that can be easily delegated to
create new protection domains, and hence opened a path to
efﬁciently adopt app compartmentalization and least-privilege
operation. In particular, our solution removes the UID-based
ambient authority of Android’s stock design. The key observa-
tion that our DROIDCAP conveys is that the design of modern
[1]
[2]
[3]
[4]
[5]
[6]
[7] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith,
“SoK: Lessons Learned From Android Security Research For Appiﬁed
Software Platforms,” in IEEE S&P, 2016.
[8] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisger-
ber, “On demystifying the android application framework: Re-visiting
android permission speciﬁcation analysis,” in USENIX Security, 2016.
[9] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-
Rekowsky, “Boxify: Full-ﬂedged app sandboxing for stock android,”
in USENIX Security, 2015.
[10] M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von Styp-
Rekowsky, “Appguard - enforcing user requirements on Android apps,”
in TACAS’13, 2013.
[11] A. Bianchi, Y. Fratantonio, C. Kruegel, and G. Vigna, “Njas: Sand-
boxing unmodiﬁed applications in non-rooted devices running stock
android,” in ACM SPSM, 2015.
[12] T. Book, A. Pridgen, and D. S. Wallach, “Longitudinal analysis of
android ad library permissions,” in IEE MoST, 2013.
[13] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and
B. Shastry, “Towards taming privilege-escalation attacks on Android,”
in NDSS, 2012.
[14] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry, “Practical and lightweight domain isolation on Android,”
in ACM SPSM, 2011.
[15] S. Bugiel, S. Heuser, and A.-R. Sadeghi, “Flexible and ﬁne-grained
mandatory access control on Android for diverse security and privacy
policies,” in USENIX Security, 2013.
[16] E. Chin and D. Wagner, “Bifocals: Analyzing webview vulnerabilities
in android applications,” in WISA, 2014.
[17] M. Conti, V. T. N. Nguyen, and B. Crispo, “CRePE: Context-related
policy enforcement for Android,” in ISC. Springer, 2010.
14
[18] D. Davidson, Y. Chen, F. George, L. Lu, and S. Jha, “Secure integra-
tion of web content and applications on commodity mobile operating
systems,” in ASIACCS, 2017.
J. B. Dennis and E. C. Van Horn, “Programming semantics for multi-
programmed computations,” Commun. ACM, vol. 9, no. 3, pp. 143–155,
Mar. 1966.
[19]
[20] D. Drysdale, “Capsicum object-capabilities on linux,” https://github.
com/google/capsicum-linux, last visisted: 07/07/18.
[21] W. Enck, D. Octeau, P. McDaniel, and C. Swarat, “A study of android
application security,” in USENIX Security, 2011.
[22] W. Enck, M. Ongtang, and P. McDaniel, “Understanding android
security,” IEEE SP, vol. 7, no. 1, pp. 50–57, 2009.
[23] R. S. Fabry, “Capability-based addressing,” Commun. ACM, vol. 17,
no. 7, pp. 403–412, Jul. 1974.
[24] Google, “Fuchsia is not linux: A modular, capability-based operat-
ing system,” https://fuchsia.googlesource.com/docs/+/master/the-book/,
2018, last visited: 04/23/2018.
[25] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in WiSec, 2012.
[26] K. Gudka, R. N. Watson, J. Anderson, D. Chisnall, B. Davis, B. Laurie,
I. Marinos, P. G. Neumann, and A. Richardson, “Clean application
compartmentalization with soaap,” in ACM CCS, 2015.
[27] H. Hao, V. Singh, and W. Du, “On the effectiveness of api-level access
control using bytecode rewriting in android,” in ASIACCS, 2013.
[28] M. E. Houdek, F. G. Soltis, and R. L. Hoffman, “Ibm system/38 support
[29]
[30]
for capability-based addressing,” in IEEE ISCA, 1981.
J. Huang, O. Schranz, S. Bugiel, and M. Backes, “The ART of App
Compartmentalization: Compiler-based Library Privilege Separation on
Stock Android,” in ACM CCS, 2017.
J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster,
and T. Millstein, “Dr. Android and Mr. Hide: Fine-grained security
policies on unmodiﬁed Android,” in ACM SPSM, 2012.
[31] L.
Jia,
J. Aljuraidan, E. Fragkaki, L. Bauer, M. Stroucken,
K. Fukushima, S. Kiyomoto, and Y. Miyake, “Run-time enforcement
of information-ﬂow properties on android,” in ESORICS, 2013.
[32] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection
attacks on html5-based mobile apps: Characterization, detection and
mitigation,” in ACM CCS, 2014.
[33] K. C. Kahn, W. M. Corwin, T. D. Dennis, H. D’Hooge, D. E.
Hubka, L. A. Hutchins, J. T. Montague, and F. J. Pollack, “imax: A
multiprocessor operating system for an object-based computer,” in ACM
SOSP, 1981.
[34] P. A. Karger, “Improving security and performance for capability
systems,” Ph.D. dissertation, University of Cambridge, Oct. 1988.
[35] D. Kilpatrick, “Privman: A library for partitioning applications,” in
USENIX Annual Technical Conference, FREENIX Track, 2003.
[36] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell,
H. Tuch, and S. Winwood, “sel4: Formal veriﬁcation of an os kernel,”
in ACM SOSP, 2009.
[37] B. W. Lampson and H. E. Sturgis, “Reﬂections on an operating system
design,” Commun. ACM, vol. 19, no. 5, pp. 251–265, May 1976.
[38] T. A. Linden, “Operating system structures to support security and
reliable software,” ACM Comput. Surv., vol. 8, no. 4, pp. 409–445,
Dec. 1976.
[39] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView
in the Android system,” in ACSAC, 2011.
[40] C. Marforio, H. Ritzdorf, A. Francillon, and S. Capkun, “Analysis of
the communication between colluding applications on modern smart-
phones,” in ACSAC, 2012.
[41] V. S. Martin Georgiev, Suman Jana, “Breaking and ﬁxing origin-based
access control in hybrid web/mobile application frameworks,” in NDSS,
2014.
J. H. Morris, Jr., “Protection in programming languages,” Commun.
ACM, vol. 16, no. 1, pp. 15–21, Jan. 1973.
[42]
[43] S. J. Mullender, G. van Rossum, A. S. Tanenbaum, R. van Renesse,
and H. van Staveren, “Amoeba: A distributed operating system for the
1990s,” Computer, vol. 23, no. 5, pp. 44–53, May 1990.
15
[44] P. Mutchler, A. Doup´e, J. Mitchell, C. Kruegel, and G. Vigna, “A Large-
Scale Study of Mobile Web App Security,” in IEE MoST, 2015.
[45] A. Nadkarni, B. Andow, W. Enck, and S. Jha, “Practical DIFC enforce-
ment on android,” in USENIX Security, 2016.
[46] A. Nadkarni and W. Enck, “Preventing accidental data disclosure in
modern operating systems,” in ACM CCS, 2013.
[47] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending Android per-
mission model and enforcement with user-deﬁned runtime constraints,”
in ASIACCS, 2010.
[48] R. M. Needham and R. D. Walker, “The cambridge cap computer and
its protection system,” in ACM SOSP, 1977.
[49] P. G. Neumann, R. S. Boyer, R. J. Feiertag, K. N. Levitt, and L. Robin-
son, “A provably secure operating system: The system, its applications,
and proofs,” Computer Science Laboratory Report CSL-116, Second
Edition, SRI International, 1980.
[50] M. Ongtang, K. R. B. Butler, and P. D. McDaniel, “Porscha: policy
oriented secure content handling in android,” in ACSAC, 2010.
[51] M. Ongtang, S. E. McLaughlin, W. Enck, and P. McDaniel, “Semanti-
cally rich application-centric security in Android,” in ACSAC, 2009.
[52] P. Pearce, A. Porter Felt, G. Nunez, and D. Wagner, “AdDroid: Privilege
separation for applications and advertisers in Android,” in ASIACCS,
2012.
[53] N. Provos, “Improving host security with system call policies,” in
USENIX Security, 2003.
[54] N. Provos, M. Friedl, and P. Honeyman, “Preventing privilege escala-
tion,” in USENIX Security, 2003.
[55] D. Redell and R. Fabry, “Selective revocation of capabilities,” in Proc.
International Workshop on Protection in Operating Systems, 1974.
[56] F. Roesner and T. Kohno, “Securing embedded user interfaces: Android
[57]
[58]
and beyond,” in USENIX Security, 2013.
J. Seo, D. Kim, D. Cho, I. Shin, and T. Kim, “FLEXDROID: enforcing
in-app privilege separation in android,” in NDSS, 2016.
J. S. Shapiro, J. M. Smith, and D. J. Farber, “EROS: a fast capability
system,” in ACM SOSP, 1999.
[59] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating smart-
phone advertising from applications,” in USENIX Security, 2012.
[60] S. Smalley and R. Craig, “Security Enhanced (SE) Android: Bringing
Flexible MAC to Android,” in NDSS, 2013.
[61] S. Son, G. Daehyeok, K. Kaist, and V. Shmatikov, “What mobile ads
know about mobile users,” in NDSS, 2015.
[62] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Investi-
gating user privacy in android ad libraries,” in IEE MoST, 2012.
[63] Trustworthy Systems Team (Data61), “seL4 reference manual v. 7.0.0,”
https://sel4.systems/Info/Docs/seL4-manual-7.0.0.pdf, Sep. 2017.
[64] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du, “Compac: Enforce
component-level access control in Android,” in ACM CODASPY, 2014.
[65] R. N. M. Watson, J. Anderson, B. Laurie, and K. Kennaway, “Capsicum:
practical capabilities for unix,” in USENIX Security, 2010.
[66] R. N. M. Watson, J. Woodruff, P. G. Neumann, S. W. Moore, J. An-
derson, D. Chisnall, N. Dave, B. Davis, K. Gudka, B. Laurie, S. J.
Murdoch, R. Norton, M. Roe, S. Son, and M. Vadera, “Cheri: A hybrid
capability-system architecture for scalable software compartmentaliza-
tion,” in IEEE S&P, 2015.
[67] M. V. Wilkes, The Cambridge CAP Computer and Its Operating System
Amsterdam, The
(Operating and Programming Systems Series).
Netherlands, The Netherlands: North-Holland Publishing Co., 1979.
[68] W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and
F. Pollack, “Hydra: The kernel of a multiprocessor operating system,”
Commun. ACM, vol. 17, no. 6, pp. 337–345, Jun. 1974.
[69] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical policy enforce-
ment for Android applications,” in USENIX Security, 2012.
[70] Y. Xu and E. Witchel, “Maxoid: Transparently conﬁning mobile appli-
cations with custom views of state,” in EuroSys, 2015.
[71] X. Zhang, A. Ahlawat, and W. Du, “Aframe: Isolating advertisements
from mobile applications in android,” in ACSAC, 2013.
[72] Y. Zhou, X. Zhang, X. Jiang, and V. Freeh, “Taming information-
stealing smartphone applications (on Android),” in TRUST, 2011.