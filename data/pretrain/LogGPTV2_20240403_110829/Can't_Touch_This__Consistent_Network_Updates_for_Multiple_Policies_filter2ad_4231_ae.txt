### Feedback Vertex Set and Network Update Scheduling

**Introduction:**
In the context of Directed Feedback Vertex Set (DFVS), each feedback vertex set must contain at least one vertex from any cycle in the graph. The reduction idea is as follows: Given an input graph \( G = (V, E) \) for DFVS, for each edge \((u, v)\), we create a policy enforcing an order \( u \prec v \). This results in \( |E| \) policies in total. We will demonstrate that nodes in a feedback set need to be updated twice to ensure that any order of nodes \( u \) and \( v \) can be maintained. Nodes not in the feedback set can be ordered and updated once, as they do not form loops. Minimizing the cardinality of the feedback set will minimize the number of updates.

**Theorem 1:**
The problem of finding a consistent update schedule that minimizes the number of touches is NP-hard.

**Proof:**
Given a DFVS graph \( G = (V, E) \), for each edge \( e = (u, v) \in E \), we create a policy enforcing an order \( u \prec v \). We construct a network update instance using \( |V| + k \) touches, where each node and edge is considered. We prove the following: There is a directed feedback vertex set in \( G \) of size \( k \) if and only if there is a joint schedule for the network update with \( |V| + k \) touches.

**Case Analysis:**
1. **Both \( u \) and \( v \) are in the feedback set \( S \):**
   - \( u \) is updated the first time when nodes in \( S \) are updated, and \( v \) is updated when nodes in \( S \) are updated the second time.
   - They cannot both be updated in the first round due to the policy \( u \prec v \).

2. **One of \( u \) or \( v \) is in \( S \), and the other is in \( V \setminus S \):**
   - If \( u \) is in \( S \), it is updated when nodes in \( S \) are updated the first time, and thus before \( v \).
   - If \( v \) is in \( S \), it is updated when nodes in \( S \) are updated the second time, and thus after \( u \).

3. **Both \( u \) and \( v \) are in \( V \setminus S \):**
   - \( u \) is updated before \( v \) because the vertices in \( V \setminus S \) are topologically ordered.

This proves that we have created a correct joint schedule. Now, let \( \sigma \) be a joint schedule for a network update problem that uses \( |V| + k \) touches. Let \( S \) be the set of nodes updated at least twice. Since each node must be updated at least once, the size of \( S \) is at most \( k \). We claim that \( S \) is a directed feedback vertex set of \( G \). For contradiction, assume \( S \) is not a directed feedback vertex set. Then, there is a cycle \( (v_1, v_2, \ldots, v_\ell) \) in \( G \setminus S \). For each \( i \in \{1, \ldots, \ell-1\} \), we created a policy with order \( v_i \prec v_{i+1} \). In \( \sigma \), each \( v_i \) appears only once, so by transitivity, \( v_1 \) must be updated before \( v_\ell \). However, since there is an edge \( (v_\ell, v_1) \), \( v_\ell \) must be updated before \( v_1 \). This contradiction shows that \( \sigma \) is not a correct schedule.

### Related Work
The problem of updating, synthesizing, and checking SDN policies and routes has been extensively studied [5], [20], [23], [25], [37], [43]. Reitblatt et al. [37] introduced the study of network updates with strong per-packet consistency guarantees, presenting a two-phase commit protocol. Mahajan and Wattenhofer [25] investigated weaker transient consistency properties, including loop-freedom, for single policy updates. Our work extends the study of loop-free network updates to multiple concurrent policy updates, aiming to minimize the number of switch interactions. Recent research has also explored consistent updates for networks with middleboxes and network functions [11].

### Conclusion
Over the past years, major companies have faced significant network issues due to misconfigurations and loops. SDN promises formally verifiable network operations but still poses fundamental challenges. Correctly operating a network from a logically centralized perspective is non-trivial due to asynchronous and unreliable communication between switches and controllers. Our paper is a step towards more efficient and consistent multi-policy SDN updates, opening many interesting questions for future research.

### Acknowledgments
We thank Anja Feldmann for her inputs and the anonymous reviewers for their feedback. Our research was supported by the EU project UNIFY (FP7-IP-619609) and a German BMBF Software Campus grant (01IS12056).

### References
[References listed as provided in the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.