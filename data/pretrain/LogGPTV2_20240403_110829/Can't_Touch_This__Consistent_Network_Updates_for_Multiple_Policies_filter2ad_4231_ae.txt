without cycles: each feedback vertex set contains at least one
vertex of any cycle in the graph. In a nutshell, the idea of the
reduction is the following: Given the input graph G=(V, E)
to DFVS, for each edge (u, v), we create a policy enforcing
an order u≺ v, i.e., ∣E∣ policies in total. We will show that the
nodes in a feedback set need to be touched twice, to guarantee
that any order of nodes u, v can be updated. Any nodes not
in the feedback set can be ordered, since they will not form
a loop, and thus, updated one by one with a single touch.
Minimizing the cardinality of the feedback set will therefore
minimize the number of touches.
Theorem 1. The problem of ﬁnding a consistent update
schedule minimizing the number of touches is NP-hard in
Proof: Given the DFVS graph G=(V, E), we create for
each edge e = (u, v) ∈ E a policy enforcing an order u ≺ v,
a network update instance using ∣V∣+ k touches: each node
and prove the following: There is a directed feedback vertex
set in G of size k, if and only if there is a joint schedule for
general.
in the feedback set needs to be touched exactly twice, and all
other nodes once.
Firstly let us assume that there is a directed feedback vertex
set S of size k in G. Given the directed and loop-free resulting
graph, the vertices in V ∖ S can be ordered topologically. Let
141
We claim that σ is a correct solution for the network update
us consider a schedule σ in which we ﬁrst update nodes in S,
then those in V ∖ S in the topological order, and ﬁnally those
in S again. Obviously σ has length ∣V∣+ k.
problem. Having created one policy for each edge (u, v), we
subsequence u ≺ v in the correct schedule. There are 3 sub-
If u, v ∈ S then u is updated the ﬁrst time when nodes
need to show that for each edge there is a corresponding
cases:
1)
in S are updated, and v when nodes in S are updated
for the second time. They cannot be updated both in
the ﬁrst round, since we created a policy which forces
an order u≺ v.
One of u, v is in S, and the other one in V ∖ S.
If u is in S, then it is updated when nodes in S are
updated for the ﬁrst time, and therefore it is updated
before v. If v is in S, then it is updated when nodes
in S are updated for the second time, and therefore
it is updated after u.
If u, v ∈ V ∖ S, then u is updated before v, because
we ordered the vertices of V ∖ S topologically.
2)
3)
This proves that we created a correct joint schedule. Now
let σ be a joint schedule for a network update problem
that uses ∣V∣ + k touches. Then, let S be the set of those
nodes, which are updated at least twice. As each node has
to be updated at least once, the size of S is at most k. We
claim that S is a directed feedback vertex set of G. For the
sake of contradiction, let us assume that S is not a directed
feedback vertex set of G. Then there is a cycle (v1, v2, . . . , v(cid:2))
in G∖ S. For each i∈{1, . . . , (cid:3)− 1}, we created a policy with
order vi, vi+1. In σ each of them appears only once (since every
node which is touched more than once, is part of S), therefore,
by transitivity, v1 must be updated before v(cid:2). But in G there
is an edge (v(cid:2), v1) (since there is a cycle), so in σ, vk must
be updated before v1. Therefore σ is not a correct schedule.
V. RELATED WORK
The problem of updating [5], [20], [23], [25], [37], [43],
synthesizing [12] and checking [34] SDN policies [30] as
well as routes [24] has also been studied intensively. In their
seminal work, Reitblatt et al. [37] initiated the study of network
updates providing strong, per-packet consistency guarantees,
and the authors also presented a 2-phase commit protocol. This
protocol also forms the basis of the distributed control plane
implementation in [5]. Per-packet consistency is a relatively
strong requirement that fulﬁlls many other properties (includ-
ing loop-freedom), but it comes at the cost of requiring a two-
phase update mechanism that incurs substantial delay between
the two phases and doubles ﬂow entries temporarily [42]. Ma-
hajan and Wattenhofer [25] started investigating a hierarchy of
weaker transient consistency properties, in particular also loop-
freedom, for a single policy update. In their paper, Mahajan
and Wattenhofer proposed an algorithm to “greedily” select a
maximum number of edges which can be used early during
the policy installation process. There also exist ﬁrst results on
consistent update schedules minimizing the number of update
rounds [22]. The measurement studies in [18] and [43] provide
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
empirical evidence for the non-negligible time and high vari-
ance of node updates, motivating their and our work. Our work
builds upon [25], in the sense that we extend the study of loop-
free network updates to multiple concurrent policy updates.
The goal of minimizing the number of switch interactions
renders the underlying algorithmic problem different in nature.
To the best of our knowledge, we are the ﬁrst to consider
this extension. More recently, researchers have also started
investigating consistent updates for networks which include
middleboxes and network functions [11]. Ludwig et al. [21]
presented update protocols which maintain security critical
properties such as waypointing, via a ﬁrewall, in a transiently
consistent manner. Ghorbani and Godfrey [8] argue that in the
context of network function virtualization, stronger consistency
properties are required, and Zhou et al. [42] presented a general
approach to enforce customizable consistency properties in
SDNs.
Finally, we note that from a technical perspective, our
work is also related to Middendorfs “supersequence runs” [28]:
However,
if in each input sequence each letter from the
alphabet appears at most once (and that is the only case we are
interested in in this paper), the minimal run supersesequence
is equivalent to shortest common supersequence, and hence
the model does not provide us with additional insights. Also
the polynomial-time algorithms presented in [28] for scenarios
where the alphabet size is 2, does not have relevant implica-
tions for our work as it would concern networks of size two.
VI. CONCLUSION
Over the last years, even tech-savvy companies such as
GitHub, Amazon, GoDaddy, etc. have reported major issues
with their network, due to misconﬁgurations and including
loops [9], [13], [29], [41]. Given the increasing importance
computer networks play today, this is worrying.
While software-deﬁned networking promises a formally
veriﬁable network operation, the paradigm still poses funda-
mental challenges. In particular, as we have argued in this
paper, correctly operating a network from a logically central-
ized perspective is non-trivial, because of the asynchronous and
unreliable communication between switches and controller.
Indeed, today, we do not have a good understanding how to
design dependable software-deﬁned networks. Given that these
networks are currently moving into production (in data centers,
but also in the wide-area Internet), this is problematic.
We understand our paper as a ﬁrst step toward more
efﬁcient yet consistent multi-policy SDN updates, and believe
that our work opens many interesting questions for future
research. In particular, further work is required to fully chart
the computational complexity landscape of loop-free network
updates. More generally, it will be interesting to extend our
work toward more sophisticated dependability properties, such
as blackhole freedom or waypoint enforcement.
Acknowledgments. We thank Anja Feldmann for useful in-
puts. We also thank the anonymous reviewers for their feed-
back. Our research was supported by the EU project UNIFY
(FP7-IP-619609) and a German BMBF Software Campus grant
(01IS12056).
REFERENCES
[1] A. Gupta et al. Sdx: A software deﬁned internet exchange. In Proc.
ACM SIGCOMM, 2014.
[2] A. R. Curtis et al. Devoﬂow: Scaling ﬂow management for high-
performance networks. SIGCOMM Comput. Commun. Rev., 41(4):254–
265, 2011.
[3] Thomas Anderson, Larry Peterson, Scott Shenker, and Jonathan Turner.
Overcoming the internet impasse through virtualization. Computer,
38(4):34–41, April 2005.
[4] Tian Bu, Lixin Gao, and Don Towsley. On characterizing bgp routing
table growth. Comput. Netw., 2004.
[5] Marco Canini, Petr Kuznetsov, Dan Levin, and Stefan Schmid. A
distributed and robust sdn control plane for transactional network
updates. In Proc. INFOCOM, 2015.
[6] Dmitry Drutskoy, Eric Keller, and Jennifer Rexford. Scalable network
virtualization in software-deﬁned networks. Internet Computing, IEEE,
17(2):20–27, 2013.
[7] Pierre Francois and Olivier Bonaventure. Avoiding transient loops
In Proc. IEEE INFOCOM,
during igp convergence in ip networks.
2005.
[8] Soudeh Ghorbani and Brighten Godfrey. Towards correct network
virtualization. In Proc. ACM HotSDN, 2014.
[9] GitHub.
https://github.com/blog/1346networkproblemslastfriday.
In
[10]
[11]
[12]
[13]
[14]
Website, 2016.
I. Poese et al. Improving content delivery with padis. IEEE Internet
Computing, 2012.
J. Martins et al. Clickos and the art of network function virtualization.
In Proc. USENIX NSDI, pages 459–473, 2014.
J. McClurg et al. Efﬁcient synthesis of network updates. In Proc. ACM
PLDI, 2015.
J. Jackson. Godaddy blames outage on corrupted router tables. In PC
World, 2011.
Jain et al. B4: Experience with a globally-deployed software deﬁned
wan. In Proc. ACM SIGCOMM, pages 3–14, 2013.
[15] Tao Jiang and Ming Li. On the approximation of shortest common
supersequences and longest common subsequences. SIAM Journal on
Computing, 24(5):1122–1139, 1995.
[16] Koponen et al. Network virtualization in multi-tenant datacenters. In
Proc. USENIX NSDI, 2014.
[17] Maciej Kuzniar, Peter Peres´ıni, and Dejan Kostic. Providing reliable
FIB update acknowledgments in SDN. In Proc. 10th ACM CoNEXT,
pages 415–422, 2014.
[18] Maciej Kuzniar, Peter Peresini, and Dejan Kostic. What you need to
know about sdn ﬂow tables. In Proc. PAM, 2015.
[19] Michael Lewin, Dror Livnat, and Uri Zwick.
Improved rounding
techniques for the max 2-sat and max di-cut problems.
In Integer
Programming and Combinatorial Optimization, pages 67–82. Springer,
2002.
[20] Hongqiang Harry Liu, Xin Wu, Ming Zhang, Lihua Yuan, Roger
zUpdate: Updating Data Center
Wattenhofer, and David A. Maltz.
Networks with Zero Loss. In ACM SIGCOMM, August 2013.
[21] Arne Ludwig, Szymon Dudycz, Matthias Rost, and Stefan Schmid.
Transiently secure network updates. In Proc. ACM SIGMETRICS, 2016.
[22] Arne Ludwig, Jan Marcinkowski, and Stefan Schmid. Scheduling loop-
free network updates: It’s good to relax! In Proc. ACM PODC, 2015.
[23] Arne Ludwig, Matthias Rost, Damien Foucard, and Stefan Schmid.
Good network updates for bad packets: Waypoint enforcement beyond
destination-based routing policies. In Proc. ACM HotNets, 2014.
[24] M. Casado et al. Ethane: Taking control of the enterprise.
ACM SIGCOMM, 2007.
In Proc.
[25] Ratul Mahajan and Roger Wattenhofer. On Consistent Updates in
Software Deﬁned Networks. In Proc. ACM HotNets, 2013.
[26] David Maier. The complexity of some problems on subsequences and
supersequences. J. ACM, 1978.
[27] Deepankar Medhi and Karthikeyan Ramasamy. Network Routing:
Algorithms, Protocols, and Architectures. Morgan Kaufmann Publishers
Inc., San Francisco, CA, USA, 2007.
142
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
[28] Martin Middendorf. Supersequences, runs, and cd grammar systems.
Developments in Theoretical Computer Science, 6:101–114, 1994.
[29] R. Mohan. Storms in the cloud: Lessons from the amazon cloud outage.
In Security Week, 2011.
[30] Christopher Monsanto, Joshua Reich, Nate Foster, Jennifer Rexford,
and David Walker. Composing Software Deﬁned Networks. In Proc.
NSDI, 2013.
[31] O. Padon et al. Decentralizing sdn policies. In Proc. ACM POPL, 2015.
[32] Yoshihiro Ohba. Issues on loop prevention in mpls networks. Commu-
nications Magazine, IEEE, 37(12):64–68, 1999.
[33] P. Kazemian et al. Header space analysis: Static checking for networks.
In Proc. USENIX NSDI, 2012.
[34] P. Kazemian et al. Real time network policy checking using header
space analysis. In Proc. USENIX NSDI, 2013.
[35] Peter Peres´ıni, Maciej Kuzniar, Marco Canini, and Dejan Kostic.
ESPRES: transparent SDN update scheduling. In Proc. ACM HotSDN,
pages 73–78, 2014.
[36] Radia J Perlman and G Paul Koning. Bridge-like internet protocol
router, May 3 1994. US Patent 5,309,437.
[37] Mark Reitblatt, Nate Foster, Jennifer Rexford, Cole Schlesinger, and
In Proc. ACM
David Walker. Abstractions for network update.
SIGCOMM, pages 323–334, 2012.
[38] Stefan Schmid and Jukka Suomela. Exploiting locality in distributed
sdn control. In Proc. ACM HotSDN, 2013.
[39] M. Shand and S. Bryant. Internet engineering task force (ietf). In RFC
5715, 2010.
[40] V.G. Timkovskii. Complexity of common subsequence and superse-
quence problems and related problems. Cybernetics, 25(5):565–580,
1989.
[41] United.
http://newsroom.united.com/newsreleases?item=124170.
Website, 2011.
In
[42] W. Zhou et al.
Enforcing customizable consistency properties in
software-deﬁned networks. In Proc. USENIX NSDI, 2015.
[43] X. Jin et al. Dionysus: Dynamic scheduling of network updates.
Proc. ACM SIGCOMM, 2014.
In
[44] Z. Qazi et al. Simple-fying middlebox policy enforcement using sdn.
In Proc. ACM SIGCOMM, 2013.
143
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply.