    42.    pipeline_.Serialize();
    43.    if (!data_.broker()->is_concurrent_inlining()) {
    44.      if (!pipeline_.CreateGraph()) {
    45.        CHECK(!isolate->has_pending_exception());
    46.        return AbortOptimization(BailoutReason::kGraphBuildingFailed);
    47.      }
    48.    }
    49.    return SUCCEEDED;
    50.  }
上述代码中，第 4-7 行检查 BytecodeArray 的长度是否超过最大长度限制；  
第 8-10 行检查 always_optimization 使能标记，它的作用是 always try to optimize functions；  
第 11-25 行检测 loop_peeling、inling、allocation_folding 使能标记，详细说明参见 flag-definitions.h 文件；  
第 26-37 行设置 context、OSR、源码信息；  
第 38 行创建编译需要的 link 信息；  
第 44 行创建 V8.TFGraph，这之后不再需要 `T`了；
## 4 编译 ExecuteJob
ExecuteJob() 中调用 ExecuteJobImpl() 来完成优化编译的主体工作，其源码如下：
    1.  PipelineCompilationJob::Status PipelineCompilationJob::ExecuteJobImpl(
    2.    RuntimeCallStats* stats) {
    3.  PipelineJobScope scope(&data_, stats);
    4.  if (data_.broker()->is_concurrent_inlining()) {
    5.  //省略.....
    6.  }
    7.  bool success;
    8.   if (FLAG_turboprop) {
    9.     success = pipeline_.OptimizeGraphForMidTier(linkage_);
    10.   } else {
    11.     success = pipeline_.OptimizeGraph(linkage_);
    12.   }
    13.   if (!success) return FAILED;
    14.   pipeline_.AssembleCode(linkage_);
    15.   return SUCCEEDED;
上述代码的核心功能就两个，一个基于图的优化功能（OptimizeGraphForMidTier 和
OptimizeGraph），另一个汇编生成器（AssembleCode）。优化功能的源码如下：
    bool PipelineImpl::OptimizeGraphForMidTier(Linkage* linkage) {
     Run(data->CreateTyper());
     RunPrintAndVerify(TyperPhase::phase_name());
     Run();
     RunPrintAndVerify(TypedLoweringPhase::phase_name());
     Run();
     //省略..............
    }
    //分隔线....................
    bool PipelineImpl::OptimizeGraph(Linkage* linkage) {
      PipelineData* data = this->data_;
      data->BeginPhaseKind("V8.TFLowering");
      Run(data->CreateTyper());
      RunPrintAndVerify(TyperPhase::phase_name());
      Run();
      RunPrintAndVerify(TypedLoweringPhase::phase_name());
      //省略..............
    }
上述代码中，每一个 Run 方法代表过了一种优化技术，每种优化技术的实现都有对应的数据结构，本文不做讲解。  
汇编生成器（AssembleCode）的源码如下：
    1.  void PipelineImpl::AssembleCode(Linkage* linkage,
    2.                                  std::unique_ptr buffer) {
    3.    PipelineData* data = this->data_;
    4.    data->BeginPhaseKind("V8.TFCodeGeneration");
    5.    data->InitializeCodeGenerator(linkage, std::move(buffer));
    6.    Run();
    7.  //省略.....
    8.  }
    9.  //分隔.................
    10.  CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
    11.      Instruction* instr) {
    12.    switch (arch_opcode) {
    13.      case kArchCallCodeObject: {
    14.        if (HasImmediateInput(instr, 0)) {
    15.  //省略.......................
    16.        } else {
    17.          Register reg = i.InputRegister(0);
    18.          DCHECK_IMPLIES(
    19.              HasCallDescriptorFlag(instr, CallDescriptor::kFixedTargetRegister),
    20.              reg == kJavaScriptCallCodeStartRegister);
    21.          __ LoadCodeObjectEntry(reg, reg);
    22.          if (HasCallDescriptorFlag(instr, CallDescriptor::kRetpoline)) {
    23.            __ RetpolineCall(reg);
    24.          } else {
    25.            __ call(reg);
    26.          }  }
    27.        RecordCallPosition(instr);
    28.        frame_access_state()->ClearSPDelta();
    29.        break;
    30.      }
    31.      case kArchCallBuiltinPointer: {
    32.  //省略.......................
    33.        break;
    34.      }}
    35.  }
上述第 5 行代码初始 CodeGenerator，第 6 行代码 Run() 方法最终会调用第 10 行
AssembleArchInstruction() 方法以完成汇编码的生成。第 12-34 行代码采用 switch-case
为每条操作码（OPCODE）编写不同的汇编码生成规则。每条操作码对应一个 case，这个 case 描绘了把操作码转换为汇编码的规则。图 1 给出了
AssembleArchInstruction 的调用堆栈。
V8 中 OPCODE
分为两类，一类是体系结构通用的操作码（COMMON_ARCH_OPCODE_LIST），另一类是体系结构专用的操作码（TARGET_ARCH_OPCODE_LIST），具体参见宏模板。
## 5 收尾 FinalizeJob
收尾工作由 FinalizeJobImpl() 负责，源码如下：
    1.  PipelineCompilationJob::Status PipelineCompilationJob::FinalizeJobImpl(
    2.      Isolate* isolate) {
    3.  //省略.................
    4.    MaybeHandle maybe_code = pipeline_.FinalizeCode();
    5.    Handle code;
    6.    if (!maybe_code.ToHandle(&code)) {
    7.  //省略.................
    8.    }
    9.    if (!pipeline_.CommitDependencies(code)) {
    10.  //省略.................
    11.    }
    12.    compilation_info()->SetCode(code);
    13.    compilation_info()->native_context().AddOptimizedCode(*code);
    14.    RegisterWeakObjectsInOptimizedCode(code, isolate);
    15.    return SUCCEEDED;
    16.  }
上述第 4 行代码接收优化编译的结果；第 6-8 行代码优化编译失败并返回 false；第 9-11 行代码重试优化编译；第 12
行代码将优化编译结果存储进 Cache，下次再优化该 SharedFunction 时将直接使用 Cache 结果。  
 **技术总结**  
 **（1）** —Trace-XXX 用于打印编译状态和结果，参见 d8 —help 或 flag-definitions.h；  
 **（2）** 优化编译的使能标记的定义在 flag-definitions.h 中；  
 **（3）** On-Stack Replacement（OSR）是一种运行时替换函数的栈帧的方法。
## 新文章介绍
**《Chrome V8 Bug》** 系列文章即将上线。  
《Chrome V8 Bug》系列文章的目的是解释漏洞的产生原因，并向你展示这些漏洞如何影响 V8
的正确性。其他的漏洞文章大多从安全研究的角度分析，讲述如何设计与使用 PoC。而本系列文章是从源码研究的角度来写的，分析 PoC 在 V8
中的执行细节，讲解为什么 Poc 要这样设计。当然，学习 Poc 的设计与使用，是 V8 安全研究的很好的出发点，所以，对于希望深入学习 V8 源码和
PoC 原理的人来说，本系列文章也是很有价值的介绍性读物。  
本系列文章主要讲解  的内容，每篇文章讲解一个 issue。如果你有想学习的
issue 也可以告诉我，我会优先讲解。
好了，今天到这里，下次见。  
 **个人能力有限，有不足与纰漏，欢迎批评指正**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**