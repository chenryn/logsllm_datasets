```
// The main function of our controller
function main() {
  // While loop which runs forever
  while() {
     // fetch the full list of delayed job objects from the cluster
	var currentDelayedJobs = kubeAPIConnector.list("delayedjobs");
     // Call the Analysis step function on the list
     var jobsToSchedule = analyzeDelayedJobs(currentDelayedJobs);
     // Schedule our Jobs with added delay
     scheduleDelayedJobs(jobsToSchedule);
     wait(5000);
  }
}
```
如您所见，我们的`main`函数中的循环调用 Kubernetes API 来查找存储在`etcd`中的`delayedjobs`CRD 列表。这是`measure`步。然后它调用分析步骤，并根据结果调用更新步骤来调度任何需要调度的`DelayedJobs`。
重要说明
请记住，在本例中，Kubernetes 调度程序仍将执行实际的容器调度——但是我们需要首先将我们的`DelayedJob`归结为官方的 Kubernetes 资源。
在更新步骤之后，我们的循环会等待整整 5 秒钟，然后再次执行循环。这设定了控制循环的节奏。接下来，让我们进入分析步骤。
### 第二步:分析
接下来，让我们回顾一下我们的运算符的**分析**步骤，这是我们的控制器伪代码中的`analyzeDelayedJobs`函数:
分析函数
```
// The analysis function
function analyzeDelayedJobs(listOfDelayedJobs) {
  var listOfJobsToSchedule = [];
  foreach(dj in listOfDelayedJobs) {
    // Check if dj has been scheduled, if not, add a Job object with
    // added delay command to the to schedule array
    if(dj.annotations["is-scheduled"] != "true") {
      listOfJobsToSchedule.push({
        Image: dj.image,
        Command: "sleep " + dj.delaySeconds + "s",
        originalDjName: dj.name
      });
    }
  }
  return listOfJobsToSchedule;  
}
```
如您所见，前面的功能循环通过从**测量**循环传递的集群中的`DelayedJob`对象列表。然后，它通过检查对象注释之一的值来检查`DelayedJob`是否已经被调度。如果它还没有被调度，它将一个对象添加到一个名为`listOfJobsToSchedule`的数组中，该数组包含在`DelayedJob`对象中指定的映像、`DelayedJob`对象中指定的睡眠秒数命令以及`DelayedJob`的原始名称，我们将使用该名称在**更新**步骤中标记为调度。
最后，在**分析**步骤中，`analyzeDelayedJobs`函数将我们新创建的`listOfJobsToSchedule`数组返回到主函数。让我们用最后的更新步骤来结束我们的操作员设计，这是我们主循环中的`scheduleDelayedJobs`功能。
### 步骤 3:更新
最后，控制回路的**更新**部分将从我们的分析中获取输出，并根据需要更新集群以创建预期状态。伪代码如下:
更新函数
```
// The update function
function scheduleDelayedJobs(listOfJobs) {
  foreach(job in listOfDelayedJobs) {
    // First, go ahead and schedule a regular Kubernetes Job
    // which the Kube scheduler can pick up on.
    // The delay seconds have already been added to the job spec
    // in the analysis step
    kubeAPIConnector.create("job", job.image, job.command);
    // Finally, mark our original DelayedJob with a "scheduled"
    // attribute so our controller doesn't try to schedule it again
    kubeAPIConnector.update("delayedjob", job.originalDjName,
    annotations: {
      "is-scheduled": "true"
    });
  } 
}
```
在这种情况下，我们将从我们的`DelayedJob`对象中派生出我们的常规 Kubernetes 对象，并在 Kubernetes 中创建它，以便`Kube`调度器可以拾取它，创建相关的 Pod，并管理它。一旦我们创建了具有延迟的常规作业对象，我们也用一个注释更新我们的`DelayedJob` CRD 实例，该注释将`is-scheduled`注释设置为`true`，防止它被重新计划。
这就完成了我们的控制循环——从这一点开始，`Kube`调度程序接管了，我们的 CRD 被赋予了生命，成为了一个 Kubernetes Job 对象，它控制着一个 Pod，Pod 最终被分配给一个 Node，一个容器被调度来运行我们的代码！
这个例子当然是高度简化的，但是您会惊讶于有多少 Kubernetes 操作者执行一个简单的控制循环来协调 CRD，并将它们归结为基本的 Kubernetes 资源。操作员可能会变得非常复杂，并执行特定于应用的功能，如备份数据库、清空持久卷等，但该功能通常与被控制的内容紧密耦合。
现在我们已经讨论了 Kubernetes 控制器中的 Operator 模式，我们可以讨论一些针对云特定的 Kubernetes 控制器的开源选项。
# 使用特定于云的 Kubernetes 扩展
通常可用默认情况下，在亚马逊 EKS、Azure AKS 和谷歌云的 GKE 等托管 Kubernetes 服务中，特定于云的 Kubernetes 扩展和控制器可以与所讨论的云平台紧密集成，并可以轻松控制来自 Kubernetes 的其他云资源。
即使没有添加任何额外的第三方组件，许多这种特定于云的功能也可以通过**云控制器管理器** ( **CCM** )组件在上游的 Kubernetes 中获得，该组件包含许多与主要云提供商集成的选项。这是默认情况下在每个公共云的托管 Kubernetes 服务中通常启用的功能，但它们可以与在特定云平台上运行的任何集群集成，无论是否托管。
在本节中，我们将回顾 Kubernetes 的一些更常见的云扩展，包括**云控制器管理器(CCM)** 中的和需要安装其他控制器的功能，如**外部 dns** 和**集群自动缩放器**。让我们从一些大量使用的 CCM 功能开始。
## 了解云控制器管理器组件
正如在 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes 通信*中所述，CCM 是一个官方支持的 Kubernetes 控制器，它提供了几种公共云服务功能的挂钩。为了运行，CCM 组件需要以对所讨论的云服务的访问权限启动——例如，AWS 中的 IAM 角色。
对于官方支持的云，如 AWS、Azure 和 Google Cloud，CCM 可以简单地作为集群内的 DaemonSet 运行。我们使用 DaemonSet，因为 CCM 可以执行任务，例如在云提供商中创建持久存储，并且它需要能够将存储连接到特定的节点。如果您使用的云不受官方支持，您可以为该特定云运行 CCM，并且您应该遵循该项目中的特定说明。这些替代类型的 CCM 通常是开源的，可以在 GitHub 上找到。关于安装 CCM 的细节，让我们进入下一部分。
## 安装云控制器管理器
通常，在创建集群时配置 CCM。如前一节所述，托管服务(如 EKS、AKS 和 GKE)已经启用了该组件，但即使是 Kops 和 Kubeadm 也在安装过程中将 CCM 组件公开为一个标志。
假设您没有以任何其他方式安装 CCM，并且计划使用上游版本的官方支持的公共云之一，则可以将 CCM 安装为 DaemonSet。
首先，你需要一个`ServiceAccount`:
服务帐户. yaml
```
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
```
该`ServiceAccount`将用于对 CCM 进行必要的访问。
接下来，我们需要一个`ClusterRoleBinding`:
群集绑定. yaml
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:cloud-controller-manager
subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
```
如您所见，我们需要让`cluster-admin`角色访问我们的 CCM 服务帐户。除了其他功能之外，CCM 还需要能够编辑节点。
最后，我们可以部署 CCM `DaemonSet`本身。您需要使用特定云提供商的正确设置填写此 YAML 文件，请查看您的云提供商在 Kubernetes 上的文档以获取此信息。
`DaemonSet`规格比较长，我们分两部分来复习。首先，我们有了带有所需标签和名称的`DaemonSet`模板:
daemmonset . YAML
```
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cloud-controller-manager
  name: cloud-controller-manager
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cloud-controller-manager
  template:
    metadata:
      labels:
        k8s-app: cloud-controller-manager
```
如您所见，为了匹配我们的`ServiceAccount`，我们正在`kube-system`名称空间中运行 CCM。我们也给`DaemonSet`贴上了`k8s-app`的标签，以此来区分它是一个 Kubernetes 控制平面组件。