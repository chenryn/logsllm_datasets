...
2499 }
u32 cmd;
if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
return -EFAULT;
switch (cmd) {
case CHELSIO_SET_QSET_PARAMS:{
struct ch_qset_params t;
if (copy_from_user(&t, useraddr, sizeof(t)))
return -EFAULT;
if (t.qset_idx >= SGE_QSETS)
return -EINVAL;
break;
}
case CHELSIO_SET_QSET_NUM:{
struct ch_reg edata;
if (copy_from_user(&edata, useraddr, sizeof(edata)))
return -EFAULT;
if (edata.val  1 && !(...)))
return -EINVAL;
break;
}
case CHELSIO_SETMTUTAB:{
struct ch_mtus m;
if (copy_from_user(&m, useraddr, sizeof(m)))
return -EFAULT;
if (m.nmtus != NMTUS)
return -EINVAL;
if (m.mtus[0] header.Size) + sizeof(...);
if (size header.SenderSize))
size = le16_to_cpu(kfib->header.SenderSize);
if (size > dev->max_fib_size) {
kfib = pci_alloc_consistent(dev->pdev, size, &daddr);
}
if (copy_from_user(kfib, arg, size)) {
retval = -EFAULT;
goto cleanup;
}
if (kfib->header.Command == cpu_to_le16(...)) {
} else {
retval =
61 {
62
...
81
82
83
84
...
90
91
92
93
...
101
...
114
115
116
117
118
119
120
121
...
128
129
130
131
...
139
...
160 }
aac_fib_send(le16_to_cpu(kfib->header.Command),...
le16_to_cpu(kfib->header.Size) , FsaNormal,
1, 1, NULL, NULL);
82
...
86 }
}
55 static int sclp_ctl_ioctl_sccb(void __user *user_area)
56 {
57
58
59
60
61
struct sclp_ctl_sccb ctl_sccb;
struct sccb_header *sccb;
int rc;
if (copy_from_user(&ctl_sccb, user_area,
62
...
65
66
67
68
69
70
71
72
73
74
75
76
77
...
81
return -EFAULT;
sizeof(ctl_sccb)))
sccb = (void *) get_zeroed_page(GFP_KERNEL | GFP_DMA);
if (!sccb)
return -ENOMEM;
if (copy_from_user(sccb, u64_to_uptr(ctl_sccb.sccb),
sizeof(*sccb))) {
rc = -EFAULT;
goto out_free;
}
if (sccb->length > PAGE_SIZE || sccb->length length)) {
rc = -EFAULT;
goto out_free;
}
if (copy_to_user(u64_to_uptr(ctl_sccb.sccb), sccb,
rc = -EFAULT;
sccb->length))
Figure 8: A Double-Fetch Bug in sclp ctl.c (CVE-
2016-6130)
buﬀer in user space (the second buﬀer). A transfer func-
tion only copies the ﬁrst buﬀer (a shallow copy) and the
second buﬀer has to be copied by the second invocation
of a transfer function (to perform a deep copy). Some-
times it is necessary to copy data from user space into
kernel space, act on the data, and copy the data back into
user space. Such data is usually contained in the second
buﬀer in user space and pointed to by a pointer in the
ﬁrst buﬀer in user space containing additional data. The
transfer functions perform shallow copies and therefore
data pointed to in the buﬀer copied by a transfer func-
tion must be explicitly copied as well, so as to perform
a deep copy. Such deep copies will cause multiple in-
vocations of transfer functions which are not necessarily
double fetches as each transfer function is invoked with
a diﬀerent buﬀer to be copied. We observed 31 of such
situations, 19 of them in drivers.
The complexity of performing a deep copy with
transfer functions that only do shallow copies can
cause programmers to introduce bugs, and we found
one such bug in ﬁle sclp_ctl.c of the IBM S/390
SCLP console driver, where the bug is caused by a
shallow copy issue (CVE-2016-6130). The function
sclp_ctl_ioctl_sccb in Figure 8 performs a shallow
copy of a data structure from user space pointed to by
user_area into ctl_sccb (line 61). To do a deep copy,
it then has to copy another data structure from user space
pointed to by ctl_sccb.sccb. However, the size of the
Figure 7: A Double-Fetch Vulnerability in commctrl.c
(CVE-2016-6480)
ﬁrst fetched value is used to calculate a buﬀer size (line
90), to check the validity of the size (line 93), and to al-
locate a buﬀer of the calculated size (line 101), while the
second copy (line 116) fetches the whole message with
the calculated size. Note that the variable kfib pointing
to the kernel buﬀer storing the message is reused in line
101. The header of the message is large and various ele-
ments of the header are used after the message has been
fetched the second time (e.g., kfib->header.Command
in line 121 and 129). The function also uses the size el-
ement of the header a second time in line 130, causing a
double-fetch vulnerability as a malicious user could have
changed the Size ﬁeld of the header between the two
fetches.
We observed 30 occurrences of such size checking
double-fetch situations, 22 of which occur in drivers, and
four of them (all in drivers) are vulnerable.
3.2.3 Shallow Copy
The last special case of double-fetch scenario we identi-
ﬁed is what we call shallow copy issues. A shallow copy
between user and kernel space happens when a buﬀer
(the ﬁrst buﬀer) in the user space is copied to the ker-
nel space, and the buﬀer contains a pointer to another
8    26th USENIX Security Symposium
USENIX Association
transfer functions,
gered when two reads fetch data from the same source
location, we added the following ﬁve additional rules
to improve precision as well as discover corner cases.
The Coccinelle engine applies these rules one by one
when analyzing the source ﬁles. A double-fetch bug
could involve diﬀerent
therefore,
we have to take the four transfer functions that copy
data from user space (get_user(), __get_user(),
copy_from_user(), __copy_from_user()) into con-
sideration. We use trans_func() in Figure 9 to repre-
sent any possible transfer functions in the Linux kernel.
Rule 1: No pointer change. The most critical rule in
detecting double-fetch bugs is keeping the user pointer
unchanged between two fetches. Otherwise, diﬀerent
data is fetched each time instead of the same data being
double-fetched, and false positives can be caused. As
can be seen from Rule 1 in Figure 9, this change might
include cases of self-increment (++), adding an oﬀset, or
assignment of another value, and the corresponding sub-
traction situations.
Rule 2: Pointer aliasing. Pointer aliasing is com-
mon in double-fetch situations. In some cases, the user
pointer is assigned to another pointer, because the origi-
nal pointer might be changed (e.g., processing long mes-
sages section by section within a loop), while using two
pointers is more convenient, one for checking the data,
and the other for using the data. As can be seen from
Rule 2 in Figure 9, this kind of assignment might appear
at the beginning of a function or in the middle between
the two fetches. Missing aliasing situation could cause
false negatives.
Rule 3: Explicit type conversion. Explicit pointer
type conversion is widely used when the kernel is fetch-
ing data from user space. For instance, in the size check-
ing scenario, a message pointer would be converted to a
header pointer to get the header in the ﬁrst fetch, then
used again as a message pointer in the second fetch. As
can be seen from Rule 3 in Figure 9, any of the two
source pointers could involve type conversion. Missing
type conversion situations could cause false negatives.
In addition, explicit pointer type conversions are usually
combined with pointer aliasing, causing the same mem-
ory region to be manipulated by two types of pointers.
Figure 9: Reﬁned Coccinelle-Based Double-Fetch Bug
Detection
data structure is variable, causing a size checking sce-
nario. In order to copy the data, it ﬁrst fetches the header
of the data structure into the newly created kernel space
pointed to by sccb (line 68) to get the data length in
sccb->length which is checked for validity in line 72.
Then, based on sccb->length, it copies the whole con-
tent with a second fetch in line 74. Finally at line 81,
the data is copied back to the user space. While it looks
like both invocations of the transfer functions in lines 74
and 81 use the same length sccb->length, line 81 actu-
ally uses the value as copied in line 74 (the second fetch)
while line 74 uses the value from the ﬁrst fetch.
Again, this is a double-fetch bug as a user may have
changed the value between the two fetches in lines 68
and 74. However, this double-fetch bug is not causing a
vulnerability because neither can the kernel be crashed
by an invalid size given to a transfer function, nor can
information leakage occur when the kernel copies back
data beyond the size that it received earlier because the
copied buﬀer is located in its own memory page. An
attempt to trigger the bug will simply end in termination
of the system call with an error code in line 82. The
double-fetch bug has been eliminated in Linux 4.6.
3.3 Reﬁned Double-Fetch Bug Detection
In this section, we present the second phase of our study
which uses a reﬁned double-fetch bug detection approach
that is again based on the Coccinelle matching engine.
While the ﬁrst phase of our study was to identify and cat-
egorize scenarios in which double fetches occur, the sec-
ond phase exploited the gained knowledge from the ﬁrst
phase to design an improved analysis targeted at speciﬁ-
cally identifying double-fetch bugs and vulnerabilities.
As shown in Figure 9, in addition to the basic double-
fetch pattern matching rule (Rule 0), which is trig-
Rue 4: Combination of element fetch and pointer
fetch.
In some cases, a user pointer is used to both
fetch the whole data structure as well as fetching only
a part by dereferencing the pointer to an element of
the data structure.
in the size check-
ing scenario, a user pointer is ﬁrst used to fetch the
message length by get_user(len, ptr->len), then
to copy the whole message in the second fetch by
copy_from_user(msg, ptr, len), which means the
two fetches are not using exactly the same pointer as
the transfer function arguments, but they cover the same
For instance,
USENIX Association
26th USENIX Security Symposium    9
SourceCodeFilesDouble-FetchBugtrans_func(dst1,src)...trans_func(dst2,src)Rule0Rule2Rule1Rule4Rule3for(i=0;ilen)...trans_func(dst2,ptr)trans_func(dst1,msg.len)...trans_func(dst2,&msg)value semantically. As we can see from Rule 4 in Fig-
ure 9, this situation may use a user pointer or the address
of the data structure as the argument of the transfer func-
tions. This situation usually appears with explicit pointer
type conversion, and false negatives could be caused if
this situation is missed.
Rule 5: Loop involvement. Since Coccinelle is path-
sensitive, when a loop appears in the code, one transfer
function call in a loop will be reported as two calls, which
could cause false positives. Besides, as can be seen from
Rule 5 in Figure 9, when there are two fetches in a loop,
the second fetch of the last iteration and the ﬁrst fetch of
the next iteration will be matched as a double fetch. This
case should be removed as false positive because the user
pointer should have been changed when crossing the iter-
ations and these two fetches are getting diﬀerent values.
Moreover, cases that use an array to copy diﬀerent values
inside a loop also cause false positives.
4 Evaluation
In this section, we present the evaluation of our study,
which includes two parts:
the statistics of the manual
analysis, and the results of the reﬁned approach when
applied to three open source kernels: Linux, Android,
and FreeBSD. We obtained the most up-to-date versions
available at the time of the analysis.
4.1 Statistics and Analysis
In Linux 4.5, there are 52,881 ﬁles in total and 39,906 of
them are source ﬁles (with a ﬁle extension of .c or .h),
which are our analysis targets (other ﬁles are ignored).
17,532 source ﬁles belong to drivers (44%). After the
basic pattern matching of the source ﬁles and the man-
ual inspection to remove false positives, we obtained 90
double-fetch candidate ﬁles for further inspection. We
categorized the candidates into the three double-fetch
scenarios Size Checking, Type Selection and Shallow
Copy. They are the most common cases on how a double
fetch occurs while user space data is copied to the kernel
space and how the data is then used in the kernel. We
have discussed these scenarios in detail with real double-
fetch bug examples in the previous section. As shown
in Table 1, of the 90 candidates we found, 30 were re-
lated to the size checking scenario, 11 were related to the
type selection scenario, and 31 were related to the shal-
low copy scenario, accounting for 33%, 12%, and 34%
respectively. 18 candidates did not ﬁt into one of the
three scenarios.