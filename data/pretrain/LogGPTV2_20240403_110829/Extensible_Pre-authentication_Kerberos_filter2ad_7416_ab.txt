encrypted data.
Many diﬀerent pre-authentication mechanisms may be used, such as smart cards
or public keys. For example, PKINIT [33] sends a timestamp encrypted with the
user’s private key. More padata types are deﬁned in the Kerberos RFC [22].
2.2 Security Features
Kerberos has several important security features. User’s passwords are never
communicated over the network, and session keys are used to communicate securely
between the client and the Kerberos server and between the client and the appli-
cation server. These session keys are always communicated in an encrypted form.
In addition, the session key between the client program and the application server
may be used for secure communication after the protocol has ﬁnished.
Kerberos is also stateless [10]. Session keys are included inside messages, and
do not have to be maintained by Kerberos servers. This statelessness increases
scalability.
Single sign-on (SSO) is another important feature of Kerberos. With SSO, a
user’s password must only be entered once per session. The TGT and session key
obtained in phase 1 are saved, so each time the user wants to gain access to a service,
6
2.3. AUTHENTICATION AND AUTHORIZATION
only phases 2 and 3 are performed. This feature provides convenience, eﬃciency,
and added security.
Some authentication systems enable SSO via automation in their implementa-
tion. For example, a user’s password may be remembered and provided automat-
ically during authentication. That technique adds convenience, but not eﬃciency.
Such a system can still beneﬁt from the SSO aﬀorded by incorporation into Ker-
beros.
2.3 Authentication and Authorization
Although Kerberos is often described as an authentication and authorization
protocol, it “does not, by itself, provide authorization” [22].
It does provide a
mechanism whereby authorization information can be embedded into a Kerberos
ticket in an authorization-data ﬁeld [22], but not all implementations support this
ﬁeld.
In addition, since the authorization-data ﬁeld contains data “speciﬁc to the end
service” [22], a lack of interoperability may arise between Kerberos authentica-
tion servers and application servers that do not understand the same authorization
data. The Windows 2000 implementation of Kerberos suﬀers from this incompati-
bility [16].
Although this paper deals primarily with authentication, the authorization mech-
anisms commonly built around Kerberos aﬀect how we must design the authenti-
cation protocol so that the overall system remains usable. Our goal is to pursue a
design that will not obligate changes to authorization mechanisms.
2.4 Cross-Realm Authentication
Kerberos currently provides a mechanism for cross-realm authentication that
enables an authenticated user in one realm to obtain services in another realm, but
7
CHAPTER 2. KERBEROS
cross-realm authentication does not scale well. It requires each realm to mutually
trust each other, and to share a secret key. For N realms, there must be N (N − 1)/2
shared keys [26](p. 94).
Public key extensions to Kerberos such as PKDA [25] improve scalability by
eliminating the need to establish such a large number of shared secrets [10]. Un-
fortunately, even with public-key-enabled Kerberos, a user in one realm must be
provisioned explicitly in another realm to gain access to certain services. The au-
thorization systems built around Kerberos usually require known principals for any
level of access.
2.5 Limitations
Conventional Kerberos fails to operate as an open system because every user
must be known a priori. A shared secret between the AS and the user (a password-
derived key) must be maintained by the AS, and each user has a 1-to-1 mapping
with a principal name.
Most Kerberos extensions are not designed to make Kerberos operate as an
open system. Extensions such as PKINIT [33] and other public-key extensions (see
Chapter 7) extend credential management to third parties (trusted CAs), but the
third parties usually cooperate directly with the Kerberos administrator in creating
certiﬁcates with principal names that exist in the Kerberos database.
Our goal is to extend Kerberos to be an open authentication system, but modi-
fying Kerberos for each new authentication type is burdensome. Traditionally, new
authentication types go through an approval process by the standardizing commit-
tee. Once deﬁned, extensions are often rigid and cannot be updated without being
re-approved and assigned new pre-auth type numbers. PKINIT has undergone this
process.
8
2.5. LIMITATIONS
One might wish to incorporate a proprietary extension into Kerberos without
involving the standardization process, but this can be diﬃcult or even impossible
when the source code is not available (e.g., Microsoft’s implementation). Even when
the source code is available, continual resources must be expended to maintain a
patch against the latest version of the Kerberos source code.
9
CHAPTER 2. KERBEROS
10
Chapter 3 — EPAK Design
Extensible Pre-Authentication in Kerberos (EPAK) serves as a model for extending
Kerberos to support a variety of authentication schemes. If large security providers
such as Microsoft were to adopt EPAK, many businesses would beneﬁt by having
the ability to plug in diﬀerent authentication protocols, including those that would
enable Kerberos to operate as an open system.
EPAK extends the initial authentication phase of Kerberos, just like many pre-
vious Kerberos extensions. Since only the initial authentication phase is changed,
the security infrastructure built up around Kerberos can remain unchanged.
Unlike existing Kerberos extensions, EPAK enables the integration of many au-
thentication schemes into Kerberos without further modiﬁcation to Kerberos imple-
mentations.
3.1 Goals
The design goals for EPAK are to:
• Allow extensible integration of authentication systems
• Enable attribute-based authentication in Kerberos
• Preserve the existing security properties of Kerberos
• Improve eﬃciency and usability
• Provide scalable account provisioning for outsiders
• Maintain backwards compatibility with Kerberos
11
CHAPTER 3. EPAK DESIGN
Figure 3.1: The EPAK protocol adds a preliminary phase to Kerberos, phase 0,
where the client requests and obtains an authentication-granting ticket (AGT) and
a session key Kc,as from the Pre-Authentication Server (PAS). The AGT is then
supplied as padata to the AS in step 1a. Step 1b contains a normal AS-REP
with the exception that the session key Kc,tgs is encrypted with Kc,as instead of a
password-derived key. Phases 2 and 3 are left unchanged.
3.2 Architecture
EPAK naturally extends Kerberos by adding a single phase similar to the existing
phases (see Figure 3.1). The EPAK framework enables phase 1 of Kerberos to suc-
ceed after a Pre-Authentication Client (PAC) authenticates to a Pre-Authentication
Server (PAS) using the desired authentication scheme. The PAS determines which
users can authenticate to which principals. If authentication succeeds, the PAS re-
turns an authentication-granting ticket (AGT) used as padata in the AS request,
and a randomly-generated session key for decrypting the AS reply.
Since an AGT only needs to remain valid long enough to perform an AS request
12
KDCASTGSClientAppl. ServerPASto obtain a TGT, the AGT is, by default, non-renewable and short-lived.
3.2. ARCHITECTURE
PAS Realms Kepak is a randomly-generated key known only to the PAS and AS.
By encrypting the AGT with Kepak the PAS ensures that only the AS can decrypt it.
To provide load balancing and fault tolerance, the PAS may be distributed among
multiple machines.
A Kerberos administrator can also outsource pre-authentication by allowing
trusted parties to host their own PAS. In this setup, each PAS has its own shared
key with the AS, similar to cross-realm authentication. Each party controlling a
PAS is known as a PAS realm (see Figure 3.2).
To prevent name conﬂicts and maintain an arms-length trust relationship with
each PAS realm, the Kerberos administrator speciﬁes an ACL for each PAS realm,
indicating all principals the PAS realm is permitted to authenticate. The AS de-
termines in phase 1 which PAS issued the AGT and enforces the corresponding
ACL.
Outsourcing the PAS oﬄoads principal management in addition to computa-
tional work and network traﬃc. It also allows heterogeneous PAS’s supporting dif-
ferent authentication mechanisms within the same Kerberos realm. These features
increase scalability, but similar to cross-realm authentication, the tight relationship
and shared keys limit scalability.
Principal Mapping As mentioned earlier, the PAS is responsible for mapping
users to Kerberos principals.
In other words, it must implement a strategy for
determining which users are allowed to authenticate as which principals.
A straightforward strategy is a 1-1 mapping from users to principals. For ex-
ample, if users are identiﬁed by an email address, a formula can be used to convert
13
CHAPTER 3. EPAK DESIGN
Figure 3.2: Pre-authentication can be distributed to multiple PAS’s, where each
PAS constitutes a PAS realm. Within a single Kerberos realm, a client may perform
pre-authentication with any trusted PAS to obtain an AGT.
email addresses into corresponding principals, e.g., PI:EMAIL can authenti-
cate as john gmail com@REALM. The PAS may utilize an ACL for valid users, or
simply rely on the AS to reject principals that do not exist.
Although this approach is more open than traditional Kerberos, which requires
a shared secret (user password) to be maintained by the Kerberos server, it remains
a closed system since the AS maintains a tight relationship with the PAS in pro-
visioning a principal for each valid user. Even when the PAS is distributed among
many trusted parties, this limitation still remains.
A rule-based approach like 1-1 mapping is not dynamic enough to allow Kerberos
to scale to a large number of outsiders because users are still provisioned individually.
A more scalable alternative that transitions Kerberos to an open system is to map
a group of users to a Kerberos principal without requiring that each individual user
be provisioned in the local Kerberos realm in advance. Two such strategies are
described below.
14
ASClientPAS1PAS2Client3.3. PROTOCOL
The ﬁrst strategy, an m-1 mapping, provides a coarse-grained approach to map
users to a single principal. For instance, all users at partner companies can be
mapped to a guest principal, e.g., guest@REALM. This dynamic arrangement pro-
vides increased scalability because the local Kerberos administrator manages only
a single principal and is shielded from all changes to the user population at partner
companies. However, mapping users to a single principal is not ﬂexible because all
outsiders are treated uniformly.
The second strategy, an m-n mapping, is a ﬁne-grained approach that provides
a balance of ﬂexibility and scalability. An attribute-based ACL, policy ﬁle, or other
technique speciﬁes which groups of users can authenticate as which principals. Prin-
cipals can be deﬁned to represent large groups (e.g., companyC@REALM, part-
ner@REALM).
Combining this m-n mapping technique with multiple PAS realms produces an
even ﬁner-grained, adaptable solution for user management. Consider the scenario
presented in Chapter 1. Company A avoids having to manage accounts for each
employee of Company B by grouping them all together (e.g., *@companyB.com).
Although dynamic and scalable, this conﬁguration may be too coarse-grained for
Company A’s needs. To enable a more ﬁne-grained setup, Company A could entrust
Company B to run a PAS that authenticates users to speciﬁc principals, such as
developerB, customerB, and salesB. This does not preclude Company A from
continuing to use a coarse-grained approach with Company C.
3.3 Protocol
The EPAK protocol consists of four messages, deﬁned in Table 3.1, where the
AGT is referred to as the epakticket. The EPAK protocol is divided into two
authentication phases: pre-authentication and AS authentication.
15
CHAPTER 3. EPAK DESIGN
EPAK Messages
EPAK-REQ
EPAK-REP
EPAK-AS-REQ
epakvno k epakdata
epakvno k epakdata k pasrealm k Kc,as k EKepak[epakticket]
AS-REQ with padata=PA-EPAK-AS-REQ
EPAK-AS-REP
AS-REP with padata=PA-EPAK-AS-REP
and Kc,tgs encrypted with Kc,as instead of Kc
PA-EPAK-AS-REQ epakvno k pasrealm k EKepak[epakticket] k EKc,as[epakauth]
PA-EPAK-AS-REP epakvno k result
EPAK Message Elements
epakvno EPAK version = 1
epakdata cname k crealm k starttime k endtime
epakticket Kc,as k epakdata
epakauth cname k crealm k cksum k cusec k ctime
Kc,as Random session key generated by PAS
Kepak PAS’s key for encrypting epakticket
pasrealm PAS’s realm
cname Client name (principal name)
crealm Client realm (principal realm)
starttime Starting time of epakticket
endtime Expiration time of epakticket
cksum Checksum of AS request (excl. padata)
cusec, ctime Timestamp [22]
result Authentication error/success code
Table 3.1: EPAK Message Deﬁnitions
16
3.3. PROTOCOL
Figure 3.3: The EPAK Protocol. Pre-authentication is performed in phase 0. As
the ﬁnal step the AGT (epakticket) and session key Kc,as are stored in the client’s
credential cache. In the ﬁrst step of phase 1, the credential is read from the cache
to be used as padata for AS authentication. Since the PAC and AC are separate
programs that communicate through the client’s credential cache, phase 0 can be
customized by EPAK-based protocols without further modiﬁcation to phase 1.
Pre-Authentication Phase During pre-authentication, a valid client obtains an
EPAK-REP from the PAS. The pre-authentication protocol is shown in Figure 3.3,
phase 0:
a) The PAC sends an EPAK-REQ to the PAS to indicate the principal requesting
authentication. Additional messages may be exchanged in order for the client
to complete the authentication
b) The PAS responds with an EPAK-REP
c) The epakticket and session key Kc,as of the EPAK-REP are stored in the
17
AS1b  1cAC0a PASPAC(Credential Cache)0c 1a  0bCHAPTER 3. EPAK DESIGN
client’s credential cache under the server name epakt/REALM@pasrealm
The epakdata identiﬁes the client, and speciﬁes requested ticket start/end times.
The times are then restricted by the PAS in the EPAK-REP to enforce the maximum
lifetime.
The EPAK-REP must be communicated securely to protect the session key Kc,as
from eavesdroppers, and to prevent replay. TLS or another suitable mechanism may
be used to transmit the EPAK-REP securely.
The PAS veriﬁes the EPAK version number and then performs any other steps
the particular authentication algorithm might require. The PAS must only return
an EPAK-REP if the user proves authenticity and is allowed to authenticate to the
desired principal.
The following rules for setting the ticket start/end times in the EPAK-REP given
the requested start/end time in the EPAK-REQ must be enforced by the PAS:
1. @(starttimereq) ⇒ (starttimereply ← now)
2. (starttimereq  now + maxlif e) ⇒ (endtimereply ← now + maxlif e)
If endtime is less than starttime, it could be treated as an error, but returning
the ticket is safe because such a ticket is invalid and would be useless when presented
to the AS.
AS Authentication Phase The protocol for AS authentication with EPAK pre-
authentication data is shown in Figure 3.3, phase 1:
a) The encrypted epakticket, pasrealm, and session key Kc,as are retrieved from
the client’s credential cache
18
3.3. PROTOCOL
b) The client generates epakauth and sends an AS request with PA-EPAK-AS-
REQ as the padata
c) The server responds with an AS response with PA-EPAK-AS-REP as the
padata. The session key Kc,tgs is encrypted with the session key Kc,as
The epakauth included in the PA-EPAK-AS-REQ shows that the client has
recent knowledge of the session key in the epakticket. It serves the same purpose
as the Authenticator used in phase 2 and 3 [22].
If authentication fails, the PA-EPAK-AS-REP contains an error result value and
the encrypted part of the AS reply is set to unusable random data. Alternatively, a
Kerberos error message may be returned.
The pasrealm indicates which PAS issued the epakticket, and is used to look
up the appropriate EPAK key needed to decrypt the ticket. It is also used when
multiple PAS realms are involved to look up a corresponding ACL.
The following rules of veriﬁcation of the PA-EPAK-AS-REQ must be enforced