X , [λX ]2)
X ]4).
Outputs: P1 receive (mX ,λ(cid:48)
P3 receive (m(cid:48)
X ]3), P4 (m(cid:48)
X ,λX , [λ(cid:48)
X ,λX , [λ(cid:48)
Figure 3: Ideal Functionality to convert additive secret-shares
to masked values
3.3 Mask-Share Conversion
At the end of the Apply phase, the result of the 4-party com-
putation is masked values that need to be converted back to
additive shares, before updating the edges. This conversion
step is very simple. Each party locally converts their masked
values to additive shares, without any interaction: given x +λx
and [λx], simply output [x] = x + λx − [λx].
3.4 Four-Party Evaluation With Truncation
This section presents the small sub-components that are uti-
lized in the Apply operation.
Fixed point arithmetic A ﬁxed point number is represented
by an element of the ring Z2k. The d least signiﬁcant bits are
Inputs: P1 and P2: [β], [X], [Y ] ≡ [βX].
P3 and P4: β.
[λ(cid:48)
X ], [Y(cid:48)] ← [Y ] + [β]λ(cid:48)
Functionality:
1. P1, P2, and P3 make calls to Fcoin to sample [λ(cid:48)
X ]1
2. P1, P2, and P4 make calls to Fcoin to sample [λ(cid:48)
X ]2
3. P1, P3, and P4 make calls to Fcoin to sample [λX ]1
4. P2, P3, and P4 make calls to Fcoin to sample [λX ]2
5. P1 and P2 compute [mX ] = [X] + [λX ], [m(cid:48)
X ] = [X] +
X ]1 + [λ(cid:48)
X = [λ(cid:48)
X ]2).
6. P1 and P2 reconstruct mX ← open([mX ]).
7. P1 sends his shares [m(cid:48)
X ], [Y(cid:48)] to P4.
X ], [Y(cid:48)] to P3. P2 sends his
X ]− [Y(cid:48)] and make a
call to FCheckZero([Z]). If the functionality outputs
b = false, they call abort. Else, if b = true, they open
m(cid:48)
X ← open([m(cid:48)
8. P3 and P4 computes [Z] = β[m(cid:48)
X (where λ(cid:48)
shares [m(cid:48)
X ]).
9. All parties compute dX = mX + λX = m(cid:48)
X , P1
and P3 compare h1 = H(dX ) with each other, while
P2 and P4 compare h2 = H(dX ) with each other. If
any group sees a mismatch, they call abort.
X + λ(cid:48)
Outputs: P1, P2 output mX , [λX ], λ(cid:48)
X .
X ], λX .
P3, P4 output m(cid:48)
X , [λ(cid:48)
Figure 4: Real-world protocol to convert additive shares to
masked values
x + λ(cid:48)
x = x +λ(cid:48)
y, [λy]) = (mx +
x, [λx]) + (my,λ(cid:48)
x, [λx]) and the other has (m(cid:48)
used for the fractional part of the number. We provide a way
to perform multiplication with masked values on ﬁxed point
numbers.
Masked value: In our protocol, we use masked values for
the computation. Instead of holding shares [x], one group has
(mx = x +λx, λ(cid:48)
x, λx, [λ(cid:48)
x]).
Addition: Addition is performed locally by adding the
masked values together.
For P1 and P2: (mx,λ(cid:48)
my,λ(cid:48)
y, [λx] + [λy]).
For P3 and P4: (m(cid:48)
y,λx + λy, [λ(cid:48)
m(cid:48)
y]).
Multiplication Without Truncation: Assume that P1 and
P2 want to perform a secure multiplication on the mask
values (x + λx) and (y + λy), and the desired output is
(xy + λz,λ(cid:48)
z, [λz]). P1 and P2 hold secret shares [λx], [λy], and
[λxλy + λz]. These shares are provided by P3 and P4.
Locally P1 and P2 compute
P1: [mz]1 = mxmy − [λx]my − [λy]mx + [λz + λxλy].
P2: [mz]2 = −[λx]my − [λy]mx + [λz + λxλy].
and exchange the shares to reconstruct mz = xy + λz. They
z,λz, [λ(cid:48)
z]).
z, [λz]). Similarly, P3 and P4 output (m(cid:48)
output (mz,λ(cid:48)
y]) = (m(cid:48)
x]) + (m(cid:48)
x,λx, [λ(cid:48)
y,λy, [λ(cid:48)
x] + [λ(cid:48)
x +
2492    29th USENIX Security Symposium
USENIX Association
Multiplication With Truncation: In our setting, x and y are
ﬁxed-point numbers with d bits for the fraction. The result of
the multiplication is a number that has its least 2d signiﬁcant
bits in the fractional portion. A truncation is needed to throw
away the d least signiﬁcant bits: the output of the multiplica-
tion is the masked value of the truncation of xy in stead of
that of xy. We provide a method to handle the truncation for
our four-party mask evaluation.
the following holds:
(cid:99) = (cid:98) z+λz
2d (cid:99) + (cid:98) λ(cid:48)
First, we have a simple observation: if z,λz,λ(cid:48)
(cid:98) z+λz+λ(cid:48)
2d (cid:99) + (cid:98) λz
if 0 ≤ z ≤ 2t
For z ∈ Z2k, trun(z) =
if 2k − 2t ≤ z < 2k
Assume that −2t ≤ xy < 2t is the domain where xy lies in.
2d (cid:99) + (cid:98) λ(cid:48)
(cid:40)(cid:98) z
2d (cid:99) + ε1 + ε2, where εi ∈ {0,1}.
2d (cid:99),
2k −(cid:98) 2k−z
2d (cid:99),
z are integers,
2d (cid:99) + ε1
= (cid:98) z
2d
z
z
z
We have two different cases.
z
z
z
z
2d
2d
(cid:99).
2d (cid:99) + ε) + (cid:98) λz
2d (cid:99) + ε, where ε ∈ {0,2}
First, we consider the case of a non-negative xy, which
is represented by a ring element z = xy in the range [0;2t ].
The above equation works without any modiﬁcations when
(z + λz) and (z + λ(cid:48)
z) are both less than 2k. This happens with
probability of at least 1− 2t−k+1 (we note that 2t (cid:28) 2k).
Second, we consider the case of a negative xy. A negative
xy is represented by a ring element z = 2k −|xy| in the range
[2k−2t;2k−1]. With probability of at least 1−2t−k+1, both λz
z) ≥ 2k,
and λ(cid:48)
causing modular reduction in our computation. Speciﬁcally,
for group 1, P1 and P2 hold z + λz − 2k = z + λz mod 2k,λ(cid:48)
z
and can compute the following in the integer domain:
(cid:99) = (cid:98) (z−2k)+λz+λ(cid:48)
z
z will be chosen such that (z+λz) ≥ 2k and (z+λ(cid:48)
(cid:98) (z+λz mod 2k)+λ(cid:48)
(cid:99) = (cid:98) (z+λz−2k)+λ(cid:48)
2d
2d (cid:99) + (cid:98) λ(cid:48)
= −(cid:98) 2k−z
2d (cid:99) + (cid:98) λz
Let mz = (2k − (cid:98) 2k−z
2d (cid:99) mod 2k and m(cid:48)
(cid:99) - (cid:98) λz
z mod 2k)+λz
2d (cid:99) = (cid:98) (z+λz mod 2k)+λ(cid:48)
(cid:99)
- (cid:98) λ(cid:48)
2d (cid:99) =
z = (2k − (cid:98) 2k−z
(cid:98) (z+λ(cid:48)
2d (cid:99) mod 2k. They are the masked
value of the truncation of xy for group 1 and 2 respectively.
P1 and P2 can compute mz and (cid:98) λ(cid:48)
2d (cid:99) themselves without any
interaction as they know xy +λz and λ(cid:48)
z. P3 and P4 can provide
2d (cid:99)]. At the end, P1 and P2 obtain the
P1 and P2 with shares [(cid:98) λz
output of the truncated mask evaluation: (mz,(cid:98) λ(cid:48)
2d (cid:99)]).
2d (cid:99), [(cid:98) λ(cid:48)
z,(cid:98) λz
2d (cid:99)]). The error of the
Similarly, P3 and P4 obtain (m(cid:48)
1
truncated multiplication is at most
2d−1 . Importantly, the error
does not impact proper cross-checking of the two parallel
evaluations.
Vectorization for dot products A naive way to perform a dot
product between two vectors u = {u1, ...,un},v = {v1, ...,vn}
is to perform n multiplications then add the shares up. We use
the vectorization technique to bring this down to the cost of
one multiplication. The details are shown in Figure 6.
Communication cost Each multiplication with truncation
requires the four parties to communicate only 6 rings in total
2d (cid:99) + ε) + (cid:98) λ(cid:48)
2d (cid:99), [(cid:98) λz
2d
2d
z
z
z
z
z
when done in batch. For each gate, Ftriple costs 2 rings (one
ring sent from P3 to P2, and the other from P1 to P4) and the
opening of mc and m(cid:48)
c each costs 2 rings. Fcoin is free when
common random seeds are used, and two hashes are needed
to be sent for the whole batch. We note that the cost is the
same for dot product gate.
FUNCTIONALITY Feval
Inputs: For each input wire w:
w = xw + λ(cid:48)
P1, P2: mw = xw + λw, [λw], λ(cid:48)
w;
P3, P4: m(cid:48)
w], λw.
w, [λ(cid:48)
Functionality:
• Reconstruct λ received from P1, P2, and verify if it
is equal to λ received from P3, P4. Reconstruct λ(cid:48)
received from P3, P4, and verify if it is equal to λ(cid:48)
received from P1, P2. If any of these veriﬁcation fails,
send abort to all parties.
• Compute
w , λ(cid:48)(1)
w , λ(1)
– (m(1)
– (m(cid:48)(1)
w , [λ(1)
w , [λ(cid:48)(1)
Outputs: P1, P2 receive (m(1)
P3, P4 receive (m(cid:48)(1)
w ]) ← f unc (mw,λ(cid:48)
w ]) ← f unc (m(cid:48)
w , λ(cid:48)(1)
w , [λ(1)
w ]).
w , [λ(cid:48)(1)
w , λ(1)
w ]).
w, [λw])
w,λw, [λ(cid:48)
w])
Figure 5: Ideal Functionality to handle Masked Evaluation
With Truncation
Theorem 3 The protocol Πeval (Figure 6) securely realizes
the ideal functionality Feval (Figure 5) with abort, under a
single malicious corruption.
4 Differentially Private Graph Parallel Com-
putation in Maliciously Secure Four-Party
Settings
Our construction follows the graph-parallel computation
model in which the computation is done using three main
operations; Gather, Apply and Scatter. We partition the play-
ers into two groups, and in each group, there are two players.
For ease of explanation, we name the parties in the ﬁrst group
Alice and Bob (P1, P2), and parties in the second group, Char-
lotte and David (P3, P4). These parties collaboratively com-
pute a functionality, for example Matrix Factorization. During
the computation, each group is responsible for performing
an operation that its results then will be veriﬁed by the other
group. For example, one group securely shufﬂes the data,
and the other group veriﬁes that the data is not maliciously
tampered, then the latter group performs the operations that
access the data (e.g., gather), and then the former group veri-
ﬁes the correctness of that operation. As described previously,
each data access operation, Gather or Scatter, is always fol-
lowed by a Shuﬄe operation, in order to hide the graph edge
USENIX Association
29th USENIX Security Symposium    2493
πeval
w, [λw]; P3, P4: m(cid:48)