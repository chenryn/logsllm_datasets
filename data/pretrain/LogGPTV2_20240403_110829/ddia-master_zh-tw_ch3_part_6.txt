正如 “[用 SSTables 制作 LSM 树](#用SSTables制作LSM树)” 中所提到的，Lucene 为其词典使用了一个类似于 SSTable 的结构。这个结构需要一个小的记忆体索引，告诉查询需要在排序档案中哪个偏移量查询键。在 LevelDB 中，这个记忆体中的索引是一些键的稀疏集合，但在 Lucene 中，记忆体中的索引是键中字元的有限状态自动机，类似于 trie 【38】。这个自动机可以转换成 Levenshtein 自动机，它支援在给定的编辑距离内有效地搜寻单词【39】。
其他的模糊搜寻技术正朝著文件分类和机器学习的方向发展。更多详细资讯请参阅资讯检索教科书，例如【40】。
#### 在记忆体中储存一切
本章到目前为止讨论的资料结构都是对硬碟限制的应对。与主记忆体相比，硬碟处理起来很麻烦。对于磁性硬碟和固态硬碟，如果要在读取和写入时获得良好效能，则需要仔细地布置硬碟上的资料。但是，我们能容忍这种麻烦，因为硬碟有两个显著的优点：它们是持久的（它们的内容在电源关闭时不会丢失），并且每 GB 的成本比 RAM 低。
随著 RAM 变得更便宜，每 GB 成本的论据被侵蚀了。许多资料集不是那么大，所以将它们全部储存在记忆体中是非常可行的，包括可能分布在多个机器上。这导致了记忆体资料库的发展。
某些记忆体中的键值储存（如 Memcached）仅用于快取，在重新启动计算机时丢失的资料是可以接受的。但其他记忆体资料库的目标是永续性，可以透过特殊的硬体（例如电池供电的 RAM）来实现，也可以将更改日志写入硬碟，还可以将定时快照写入硬碟或者将记忆体中的状态复制到其他机器上。
记忆体资料库重新启动时，需要从硬碟或透过网路从副本重新载入其状态（除非使用特殊的硬体）。尽管写入硬碟，它仍然是一个记忆体资料库，因为硬碟仅出于永续性目的进行日志追加，读取请求完全由记忆体来处理。写入硬碟同时还有运维上的好处：硬碟上的档案可以很容易地由外部程式进行备份、检查和分析。
诸如 VoltDB、MemSQL 和 Oracle TimesTen 等产品是具有关系模型的记忆体资料库，供应商声称，透过消除与管理硬碟上的资料结构相关的所有开销，他们可以提供巨大的效能改进【41,42】。RAM Cloud 是一个开源的记忆体键值储存器，具有永续性（对记忆体和硬碟上的资料都使用日志结构化方法）【43】。Redis 和 Couchbase 透过非同步写入硬碟提供了较弱的永续性。
反直觉的是，记忆体资料库的效能优势并不是因为它们不需要从硬碟读取的事实。只要有足够的记忆体即使是基于硬碟的储存引擎也可能永远不需要从硬碟读取，因为作业系统在记忆体中快取了最近使用的硬碟块。相反，它们更快的原因在于省去了将记忆体资料结构编码为硬碟资料结构的开销【44】。
除了效能，记忆体资料库的另一个有趣的地方是提供了难以用基于硬碟的索引实现的资料模型。例如，Redis 为各种资料结构（如优先顺序伫列和集合）提供了类似资料库的介面。因为它将所有资料储存在记忆体中，所以它的实现相对简单。
最近的研究表明，记忆体资料库体系结构可以扩充套件到支援比可用记忆体更大的资料集，而不必重新采用以硬碟为中心的体系结构【45】。所谓的 **反快取（anti-caching）** 方法透过在记忆体不足的情况下将最近最少使用的资料从记忆体转移到硬碟，并在将来再次访问时将其重新载入到记忆体中。这与作业系统对虚拟记忆体和交换档案的操作类似，但资料库可以比作业系统更有效地管理记忆体，因为它可以按单个记录的粒度工作，而不是整个记忆体页面。尽管如此，这种方法仍然需要索引能完全放入记忆体中（就像本章开头的 Bitcask 例子）。
如果 **非易失性储存器（non-volatile memory, NVM）** 技术得到更广泛的应用，可能还需要进一步改变储存引擎设计【46】。目前这是一个新的研究领域，值得关注。
## 事务处理还是分析？
在早期的业务资料处理过程中，一次典型的资料库写入通常与一笔 *商业交易（commercial transaction）* 相对应：卖个货、向供应商下订单、支付员工工资等等。但随著资料库开始应用到那些不涉及到钱的领域，术语 **交易 / 事务（transaction）** 仍留了下来，用于指代一组读写操作构成的逻辑单元。
> 事务不一定具有 ACID（原子性，一致性，隔离性和永续性）属性。事务处理只是意味著允许客户端进行低延迟的读取和写入 —— 而不是只能定期执行（例如每天一次）的批处理作业。我们在 [第七章](ch7.md) 中讨论 ACID 属性，在 [第十章](ch10.md) 中讨论批处理。
即使资料库开始被用于许多不同型别的资料，比如部落格文章的评论、游戏中的动作、地址簿中的联络人等等，基本的访问模式仍然类似于处理商业交易。应用程式通常使用索引透过某个键找少量记录。根据使用者的输入来插入或更新记录。由于这些应用程式是互动式的，这种访问模式被称为 **线上事务处理（OLTP, OnLine Transaction Processing）**。
但是，资料库也开始越来越多地用于资料分析，这些资料分析具有非常不同的访问模式。通常，分析查询需要扫描大量记录，每个记录只读取几列，并计算汇总统计资讯（如计数、总和或平均值），而不是将原始资料返回给使用者。例如，如果你的资料是一个销售交易表，那么分析查询可能是：
* 一月份每个商店的总收入是多少？
* 在最近的推广活动中多卖了多少香蕉？
* 哪个牌子的婴儿食品最常与 X 品牌的尿布同时购买？
这些查询通常由业务分析师编写，并提供报告以帮助公司管理层做出更好的决策（商业智慧）。为了将这种使用资料库的模式和事务处理区分开，它被称为 **线上分析处理（OLAP, OnLine Analytic Processing）**【47】[^iv]。OLTP 和 OLAP 之间的区别并不总是清晰的，但是一些典型的特征在 [表 3-1]() 中列出。
**表 3-1 比较事务处理和分析系统的特点**
|     属性     |      事务处理系统 OLTP       |      分析系统 OLAP       |
| :----------: | :--------------------------: | :----------------------: |
| 主要读取模式 |    查询少量记录，按键读取    |    在大批次记录上聚合    |
| 主要写入模式 |   随机访问，写入要求低延时   | 批次汇入（ETL）或者事件流  |
|   主要使用者   |    终端使用者，透过 Web 应用     | 内部资料分析师，用于决策支援 |
|  处理的资料  | 资料的最新状态（当前时间点） |   随时间推移的历史事件   |
|  资料集尺寸  |           GB ~ TB            |         TB ~ PB          |
[^iv]: OLAP 中的首字母 O（online）的含义并不明确，它可能是指查询并不是用来生成预定义好的报告的事实，也可能是指分析师通常是互动式地使用 OLAP 系统来进行探索式的查询。
起初，事务处理和分析查询使用了相同的资料库。SQL 在这方面已证明是非常灵活的：对于 OLTP 型别的查询以及 OLAP 型别的查询来说效果都很好。尽管如此，在二十世纪八十年代末和九十年代初期，企业有停止使用 OLTP 系统进行分析的趋势，转而在单独的资料库上执行分析。这个单独的资料库被称为 **资料仓库（data warehouse）**。
### 资料仓库
一个企业可能有几十个不同的交易处理系统：面向终端客户的网站、控制实体商店的收银系统、仓库库存跟踪、车辆路线规划、供应链管理、员工管理等。这些系统中每一个都很复杂，需要专人维护，所以最终这些系统互相之间都是独立执行的。
这些 OLTP 系统往往对业务运作至关重要，因而通常会要求 **高可用** 与 **低延迟**。所以 DBA 会密切关注他们的 OLTP 资料库，他们通常不愿意让业务分析人员在 OLTP 资料库上执行临时的分析查询，因为这些查询通常开销巨大，会扫描大部分资料集，这会损害同时在执行的事务的效能。
相比之下，资料仓库是一个独立的资料库，分析人员可以查询他们想要的内容而不影响 OLTP 操作【48】。资料仓库包含公司各种 OLTP 系统中所有的只读资料副本。从 OLTP 资料库中提取资料（使用定期的资料转储或连续的更新流），转换成适合分析的模式，清理并载入到资料仓库中。将资料存入仓库的过程称为 “**抽取 - 转换 - 载入（ETL）**”，如 [图 3-8](../img/fig3-8.png) 所示。
![](../img/fig3-8.png)
**图 3-8 ETL 至资料仓库的简化提纲**