### 轮值与系统可靠性

轮值是理解复杂服务如何失败并掌握系统构建特性的一个有效手段。然而，这种做法应当适度进行，通常每季度一到两次为宜，避免每周频繁执行。此外，不应因团队规模小而导致个别成员长时间连续值班。

每个班次的事故频率需保持在较低水平，以免影响员工的工作、睡眠及家庭生活等重要方面。当某位工程师在轮期内工作超过了一周十几个小时后，应立即安排其他同事接替，并给予相应的补偿，帮助其恢复正常的作息模式。

我们不鼓励单打独斗式的故障处理方式，而应该质疑为何没有适时调换更多人手，并思考现有架构是否足够简单、可靠且具备自我恢复能力。

作为SRE（站点可靠性工程）职能的领导者，你需要在整个组织内推广一种文化，强调可持续性工作和事件响应的重要性，同时表彰那些致力于提升系统可扩展性、韧性和效率的工程项目。切勿推崇那种以牺牲个人福祉为代价来填补漏洞的做法。

### 反模式7：警报可靠性工程

监控的主要目标在于确保业务数据流稳定运行，而非生成大量警报。警报可靠性工程往往会导致运维人员收到源源不断的警告信息，这通常是由于针对每个独立组件或历史故障点设置过多警报规则所引起的。

随着系统的增长，警报数量也应相应增加，但必须控制在一个合理范围内。如果在一小时内未收到任何低级别或非紧急性质的提醒，无需感到焦虑；只有当系统异常安静时才需进一步调查是否存在潜在问题。

除了用户界面中出现的错误外，其他情况不应触发对SRE团队的警报。对于那些可能造成单点故障的设计缺陷以及无法被客户直接察觉的关键问题，则可以考虑启用警报机制。例如，在处理能力迅速下降、集群副本数减少或检测到数据损坏等情况下，及时发出警报是非常必要的。但是，请避免对每一次小故障都发送警报。

采用混合成熟度模型逐步改进现有系统是一种可行策略。始终致力于优化系统性能，而不是依赖于人工干预，同时也要防止过度警报干扰工程师的工作节奏，这样才能实现长期收益。

主机级别的警报往往比完全缺乏警报更糟糕，因此建议关注全局性指标的变化。否则，可能会导致警觉疲劳或者关键任务被不断打断。记住，提高工作效率才是SRE的核心理念之一。

合理的警报系统仅会在真正发生故障时触发。那些无法自动解决但又不必急于处理的问题可以放入支持队列等待后续跟进。所有值得注意的信息都应该记录下来。电子邮件只应用于传递高价值且具有行动指导意义的数据，而非垃圾邮件。感谢我的老朋友Jonah Horowitz提供了这个有意义的例子，他也为此书做出了贡献。

不要接受现状，无论是警报过多还是完全没有警报都是不可取的。可以通过消息聚合与趋势分析技术来改善这一状况。

### 反模式8：雇佣他人来遛狗

配置管理是一项非常有用的技术，但在某些情况下也可能成为阻碍。比如，有人会使用Puppet或Chef这样的高级工具将可变基础设施和多样化的服务器扩展至数千节点，而不尝试迁移到更加稳定的“不可变”架构。

真正的SRE应当利用配置管理作为过渡工具，最终目标是整合并迁移至不可变基础架构。成功地做到这一点意味着你已经能够有效地应对规模扩张带来的挑战。平滑扩展不仅是SRE的宗旨，还适用于人员、流程等多个层面。

从物理服务器到虚拟化再到容器化的发展路径体现了技术进步的趋势。尽可能在少数平台上标准化你的计算资源，并实施幂等推送。对于这些术语的具体含义，我建议读者参考乔纳·霍洛维茨关于不可变基础设施的相关章节。

### 反模式9：减速带工程

试图预防所有错误既不可能也不经济。减速带工程指的是那些延长从开发到生产部署周期的过程，却没有显著提升质量或提供有价值的反馈。

我们的职责是加速而不是拖慢项目进度。一个可靠的系统不仅能够提高速度，还能通过快速迭代和实时反馈增强自身的稳定性。

考虑引入错误预算来管理发布优先级。O'Reilly出版的第一本SRE手册对此进行了详细介绍。即使暂时无法实施错误预算，也应该明确界定相关标准及其如何有助于控制技术债务，从而避免运维与开发团队之间的冲突。

研究表明，基于同行评审的轻量级发布控制机制能带来更好的软件交付表现，而外部强加的额外检查则可能降低效率。发布审批有其合理性，但应仅限于与内容无关的因素，如容量规划等。定期审查以确保这些规定仅适用于最少必要的情况，并根据实际情况适时调整。

在设置任何障碍之前，请谨慎行事。确保每次发布都能带来实际价值，并定期重新评估它们的有效性，以防因系统变更而变得不再适用。

### 反模式10：设计阻塞点

构建更好的工具和框架可以帮助简化新服务上线过程。设计阻塞点是指当组织内的每个服务或产品都需要经过繁琐流程才能符合当前最佳实践时的现象。

虽然SRE团队需要参与产品设计讨论，但如果他们必须对每一个细节都进行干涉，则很难实现规模化运作。许多团队采取嵌入式咨询模式或将SRE专家融入产品开发团队中，以此促进知识共享和技术交流。

尽管直接参与模式有许多优点，但它并不总是能够很好地扩展。为了最大化SRE的影响范围并提高整体开发效率，创建和维护一套包含生产标准的开发框架至关重要。这样不仅可以减少认知负担，还能加快新产品和服务的推出速度。