轮值是了解复杂服务如何失败，并了解系统构建特性的好方法。但是，它应该最多每季度一两次，而不是每周一次或两次，且不应该因为团队太小（无人可以交接）而导致某些人长时间连轴转。
每个班次的事故频率应该足够低，以工作、睡眠、家庭或其他日常生活中关键部分的时间被挤压。而当有人在轮值上花的时间超过了一周十几个小时后，理应让其他工程师来代替他们，并且给与额外的补偿，从而使他有可能重新回到正常的生活节奏。
我们不应表扬独立承担整个故障恢复的人员，而应质疑为何不根据需要轮换额外的人员，并考虑系统设计是否尽可能简单、可靠、有弹性且有自主恢复的可能。
如果你是负责 SRE
职能的领导者，需要尽一切可能在整个公司或机构中推广一种文化，为可持续工作和事件响应提供模型，并为提高规模伸缩、服务韧性、稳健性和执行效率的工程工作表达感谢。而不要提升大家为公司需要而牺牲自己，忙于补漏的那种不良的热情。
# 反模式7：警报可靠性工程
> *监控是为了确保业务数据的稳定流动，而不是为了产生稳定的警报流。*
>
> 警报可靠性工程：创建监控和记录的基础架构，导致向系统运维人员发送源源不断的通知。这通常是为每个独立系统（或每个历史上发生过的故障）添加新警报或阈值的结果。
>
>  
警报需要随着系统规模和活跃度而缓缓增长，就像 SRE
所做的其他事情一样。在最近一小时，如果你没有收到任何低级、非紧急、类似垃圾邮件的系统警报，不应该感到不安。除非最近一直过于安静，你才有必要四处看看，看看有没有什么人在恶搞。
用户界面可见的错误，这以外的任何内容都不应该给 SRE
发警报。那些即将发生的故障，也就是设计上可能的单点故障也可以通过警报来通知。对于无法立即被客户观察到的关键故障，或者速度低于阈值的情况，这类警告非常有用。如果正在以失控的速度丢失系统处理能力，或者集群从五个副本下降到三个副本，或者如果数据存储检测到损坏，需要在系统复制覆盖掉干净的副本之前将其关闭，那么报警是必要的。但不要在每一个失败或任何麻烦出现时不加选择的发警报。
必要时，采用混合成熟度模型来构造兼容系统也还是可行的。可以从你目前的系统开始，逐渐把不合适的东西改掉。但是，无论如何你只有尝试改进系统，避免依靠人力来推动工作，同时也要避免不断地警报打扰工程师的工作，这样才能获得丰厚的回报。
但是，除此之外，主机警报比没有警报更糟糕。专注于对系统或至少是全站范围的指标发出警报。否则，要么最终你会陷入警觉疲劳，错过关键问题，要么急待完成的至关重要的项目工作，因为无法集中优质时间处理，会被一次次打断而推迟。并且这样的警报会导致你永远无法进入生产力的良性循环，要知道效率是
SRE 的核心理念。
在合理的系统中，故障才会产生警报。无法自动解决且不着急的问题会进入支持队列系统。任何你觉得需要注意的东西都会进入日志。电子邮件里面没有垃圾邮件。电子邮件只适用于同事之间分享高价值、可操作的数据，但是，人工智能不算是同事。如会议邀请和社保缴费通知。感谢我的老朋友
Jonah Horowitz 提出这个有意义的例子，他也为这本书做出了贡献。
不要接受现状，警报太多或没有警报都是不妥的。可以通过消息聚合和趋势分析来解决此问题。
# 反模式8：雇用他人来遛狗
> *配置管理不应用作拐杖。*
>
> 雇用遛狗人：使用高级配置管理工具（如 Puppet 或
> Chef）将可变基础架构和各不相同的服务器扩展到大量节点，而不是帮助迁移到"不可改变"的基础架构。
>
>  
配置管理很棒。这是进行真正可靠性工程的先决条件，但我们看到有人在介绍他们如何扩展它以支持数千台主机的数百种配置。
这是一个陷阱。配置管理只能用作整合和迁移到不可变基础架构的工具，才算是物尽其用。只有成功的避免工作量随规模而飞涨，你才能算是合格的
SRE。平滑扩展是 SRE
的座右铭，这适用于人员、流程、系统等所有内容。当然个人的奖金最好能跟上扩展规模。
宠物 \； 服务器 \>； 虚拟化 \>；
容器化的演进算是很平滑的，下次的革新可能就在一眨眼之间就会发生。让你的计算资源在尽可能少的平台上标准化，运行密封构建和配置配对的幂等推送。看到这里不必担心这些学院派的术语，我要告诉你读乔纳·霍洛维茨关于不可改变的基础架构的章节，就在这本书的（[#immutable_infrastructure_and_sre](#immutable_infrastructure_and_sre)）。
# 反模式 9：减速带工程
> *预防所有错误，这对于任何试图把事情做完的人来说都是不可能的，因为代价高昂，而且很烦人。*
>
> 减速带工程：任何过程，延长从创建更改到生产发布之间的时间长度，但并不增加更改对生产影响的价值或提供明确反馈。
>
>  
不要成为项目的减速带。我们的工作是启用和提高速度，而不是推迟它。可靠的系统提高了速度，并且通过快速的生产通道和系统变化和问题的准确实时反馈引入的系统提高了可靠性。
请考虑使用错误预算来控制发布优先级和批准。在 O\'Reilly 的第一本 SRE
手册中，以及在过多的会议讲座中，错误预算得到了广泛的报道（抱歉其中一定的比例是我的讲座）。如果你还没有看过的话，找到这本书或随便找一个视频看看吧。如果不能立即启用错误预算，也请明确定义使用的标准，以及这些标准如何为控制技术负债提供有效的机制，从而避免生产运维和产品工程团队之间的政治冲突。
无论采用什么方法管理，都需要是非主观的，且不应要求每个人在使用中对服务中的每个组成部分的每个方面都有周密的技术理解。变更控制板在这两个测试中都失败了，而且通常也未能达到可靠性、速度和工程上的时间效率。
研究表明，轻量级的、基于对等评审的发布控件（无论是对编码，还是提交前或提交后的代码评审）可实现更高的软件交付性能，而创建更改的工程师外部的其他控件是与故障时的功能提前期、部署频率和系统还原时间呈负相关。它们与变化引起的失败率也没有相关性。Forsgren,
Nicole, Jez Humble, and Gene Kim（2018）。*加速：精益软件和 DevOps
的科学。*波特兰，俄勒冈州：IT革命出版社。
发布审批有合理的理由，但它们应该只围绕与发布本身的内容无关的考量，例如容量规划等。还应定期进行严格的截流和分析，以确保它们只适用于可能的最少情况（例如，全新的产品发布，而不是现有产品的功能发布，或容量规划在总系统容量的一定百分比以上启动服务的要求），并且只要需要这些要求的限制情况适用（只包括公司正在构建自己的数据中心/群集，而不是与第三方云计算服务商签订合同：因为那些提供商可以按需提供容量。或者只有创建标准化框架不能自动正确处理新隐私法案的影响的情况下）。
在工程师和发布变更之间设置任何障碍时，请非常小心。确保每个发布都是关键更新且增加应用价值，并经常重新访问它们，以确保它们仍然提供该值，并且没有因系统中的其他更改而变得无关紧要。
# 反模式10：设计阻塞点
>  ；*构建更好的工具和框架，以减少服务启动的辛劳。*
>
> 设计阻塞点：当组织中每个服务、产品等适应当前生产最佳实践的唯一方法是通过非轻量级流程，涉及与有限数量的生产环境的工程人员的直接协商。
>
>  
你的 SRE 团队应咨询每个产品设计。但是，如果 SRE
团队真的要对每个产品的设计进行干涉，他们就无法进行平滑升级。如何解决此问题？
许多团队使用直接咨询模式，要么将从事生产工具和现场可靠性工作的工程师嵌入产品开发组织，要么保留办公时间进行自愿
SRE 咨询，并在发布前进行强制性咨询生产审查。
直接参与或嵌入式参与有许多值得尝试的地方，我仍然使用它与产品团队或大型、复杂和关键项目建立新的关系。但是，最终，我们到达了一个点，即使临时直接参与（如技术讲座、开发人员生产轮换/训练营、生产准备审查和日常办公任务）也无法平滑扩展。
这不是拒绝参与的理由，因为这对于合作、教育和招聘方面非常有益。但是我们还需要更多的东西。
如果不打算为组织创建和维护包含要维护的生产标准的开发框架，那么算是错失了扩展
SRE
影响、提高开发效率和推出新服务速度的绝佳机会，也无法有效减少认知负荷、避免辛劳和人为错误。
框架可以确保监测与现有的生产系统兼容；数据层调用是安全的；分布式部署在维护区域之间保持平衡；全局和本地负载平衡遵循适当、熟悉和标准化的模式；没有人会忘记检查该三级同步服务群集上的网络服务类别，或者从生产评审中得知，他们有三周的监视配置需要编写，等待一个月在