Clients
19
1
3
2
solution is therefore: (a) ranking candidate cases based on
their uncertainty, and (b) manually examining the set of most
uncertain cases. Figure 11 shows that the number of false
negative cases is reduced quickly as we examine candidate
cases according to their uncertainty order. For example, after
checking around 550 cases, the number of false negative cases
was already below 10.
We manually investigated the 50 top-ranked destinations
classiﬁed as malicious. This included a comprehensive search
for any indications on security intelligence platforms or threat
reports, e.g., public portals such as VirusTotal, McAfee Site
Advisor, CleanMX, or IBM X-Force Exchange. For 48 out
of the 50 (96%) top-ranked destinations, we found clear
evidence of using the domains for malicious activity. Most of
them were reported for distributing malware or adware (e.g.,
Trojan-Downloader.Win32.Genome, Trojan.Semnager, etc.) or
Android APK ﬁles exploiting vulnerabilities. For some of the
destinations, 20 or more unique source identiﬁers (i.e., MAC
addresses) were observed—amounting to 93 distinct clients in
the conﬁrmed top 50. Beaconing periods detected in the top 50
varied greatly and ranged between 30 seconds and 929 seconds
(cf. Table V).
While further investigating the top-100 destinations re-
ported as malicious, we found a few false positives: One
destination (api.echoenabled.com) had dozens of clients; ac-
cording to our ﬁndings this destination relates to “HTTPS
Everywhere,” a browser plugin from the Electronic Frontier
Foundation (EFF). Some other destinations were related to ad
networks. In addition, we have found some truly legitimate
cases such as sports, news, and music streaming websites (e.g.,
2015.ausopen.com, kdfc.web-playlist.org), which presumably
updated contents on a regular basis and were used by users
over longer time periods—and were not ﬁltered by our initial
whitelisting mechanisms.
TABLE VI.
TOP 5 CASES REPORTED IN 10-DAY TRACE
Rank
1
2
3
4
5
Domain name
setup.poiio[..]rew.com
setup.ghwr8[..]vsh.com
cuoxxscrhhv[..]igp.com
akkixiodzmf[..]asp.com
vzsjfnjwchf[..]hxa.com
Smallest period
Clients
180 seconds
180 seconds
63 seconds
63 seconds
1242 seconds
1
1
3
1
1
3) Results: Daily analysis (10-day trace): The same pa-
rameters as in Section VIII-B2 were applied to the 10-day
trace collected in October 2013. In this trace, we were aware
of several conﬁrmed positives (related to botnet
infection
due to the ZeuS.Zbot malware [22]). For a total of 828
communication pairs the trafﬁc conditions indicated suspicious
beaconing behavior: they can be broken down into 412 unique
destinations and 696 unique clients. Among the cases, we
manually investigated the 5 top-ranked destinations. Using
public threat intelligence portals, we were able to conﬁrm that
the domains (cf. Table VI) were related to malware activity:
beaconing of Zeus.Zbot (top 1 and 2), and beaconing of
ZeroAccess (top 3, 4, and 5).
IX. RELATED WORK
Botnets and recent advanced threats are often orchestrated
through C&C infrastructures. Many approaches have been
proposed to detect botnets through network trafﬁc analysis. For
example, BotHunter [11] identiﬁed a typical bot infection life-
cycle by monitoring network trafﬁc, such as scanning, exploit
download. BotSniffer [12] leveraged the temporal and spatial
correlation, and similarity between multiple infected hosts to
detect botnet activities. JackStraws [14] took advantage of
host-based information to augment network behavior graphs
to provide more complete picture, and captured potential C&C
trafﬁc. A similar idea was leveraged in [26] for botnet detec-
tion. Similar to our work, Giroire et al. [10] proposed to use
temporal persistence to detect covert botnet trafﬁc. Tegeler et
al. [24] developed BotFinder which applied machine learning
algorithm on various temporal features (e.g., interval list, FFT),
and built models on known botnet samples. AsSadhan and
Moura [3] analyzed control plane trafﬁc looking for periodic
behavior that might indicate the presence of botnet. Despite
the similarity of using temporal features to detect suspicious
network activities, the major difference is that our work does
not require known training data set or the models of botnet
behavior. Moreover, our focus is on reducing false positives
and ensuring the practicality of the system, e.g., daily operation
in a large enterprise network. Many of our design choices (e.g.,
ﬁltering, ranking, and investigation) are derived by analysts’
feedbacks.
Periodicity detection has also become a popular topic in the
data mining and database research communities because it can
be used to capture the evolution of data over time. Earlier work
focused on mining frequent patterns in the time series such
as [13]. The goal of the work was to ﬁnd patterns that appeared
at least min sup times. Later research addressed the problem
of automatic periodicity detection. For example, Elfeky et
al. [8] proposed an efﬁcient convolution method to detect
periodicity. More recently, Rasheed et al. [19] proposed a
periodicity mining method in time series databases using sufﬁx
tree. The algorithm was noise-resilient and ran in quadratic
time in the worst case. Elfeky et al. [9] used time warping
techniques to accommodate insertion or delete noises in the
time series data, and achieved O(n2) complexity. Vlachos et
al. [25] combined two complementary approaches, such as
frequency analysis and autocorrelation, and designed a non-
parametric method for accurate periodicity detection. Due to its
lower computational cost, i.e., O(n log n), BAYWATCH adapted
Vlachos’ approach and scaled it to be practical for a massive
amount of network trafﬁc.
X. DISCUSSION
In addition to web proxy logs, BAYWATCH is applicable to
other data sources such as DNS, Netﬂow, or ﬁrewall logs. The
core of the methodology, the time series analysis, relies on the
activity summary of a communication pair, including a source,
a destination, and request time intervals. In our preliminary
experiments on Netﬂow and DNS, we identiﬁed numerous
suspicious beaconing behaviors; however, we omit the results
here due to the space limit. In DNS, challenges with detecting
489
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply. 
beaconing are that regional DNS servers may see aggregated
behaviors of local DNS servers rather than end hosts, and
may not see every DNS query due to caching. Netﬂow only
provides connection level information, i.e., no domain names
or additional content information.
We operate BAYWATCH iteratively in intervals at three
time scales (daily, weekly, monthly). This allows BAYWATCH
to detect less-frequent beaconing (e.g., 24-hour periodicity)
as well as highly-frequent beaconing (e.g., minute-level peri-
odicity). Even though BAYWATCH is designed to be greatly
robust against nosies in data sources, adversaries may still
be able to evade detection by employing purely random
behavior. However, this may be impractical since it imposes
substantial maintenance cost on adversaries. For example, it is
unpredictable for adversaries when infected hosts will call back
(soldier without discipline), and there is no guarantee when
their commands or updates will be conveyed to the botnets.
We systematically evaluated the noise tolerance of our bea-
coning detection algorithm with synthetic data sets by injecting
various noises. However, it is not typically straightforward to
measure the detection accuracy (distinction between legitimate
and malicious beaconing) at a large scale on real-world data
due to the lack of ground truth. Since security analysts face the
same challenge, our ﬁltering approach to reduce the workload,
and to output a prioritization list proved to be beneﬁcial.
XI. CONCLUSIONS
In this paper we proposed a robust and scalable methodol-
ogy, BAYWATCH, to identify stealthy beaconing behavior from
passive network trafﬁc monitoring. Our experimental results
with both synthetic data and 35TB of real-world logs demon-
strated robustness against real-world perturbations, scalability
to millions of connections per day, and accuracy in detecting
malicious beaconing.
ACKNOWLEDGMENTS
We would like to thank the anonymous referees and
Doug Kimelman for their valuable suggestions and helpful
comments.
REFERENCES
[1] Alexa Internet, Inc. Does Alexa have a list of its top-ranked web-
https://support.alexa.com/hc/en-us/articles/200449834-
sites?
Does-Alexa-have-a-list-of-its-top-ranked-websites-.
[2] Arbor Networks. Twitter-based botnet command channel, Au-
gust 2009. https://asert.arbornetworks.com/twitter-based-botnet-
command-channel/.
[3] B. AsSadhan and J. M. Moura. An efﬁcient method to detect
periodic behavior in botnet trafﬁc by analyzing control plane
trafﬁc. Journal of Advanced Research, 5(4):435 – 448, 2014.
[4] B. Bencs´ath, G. P´ek, L. Butty´an, and M. F´elegyh´azi. Duqu:
A Stuxnet-like malware found in the wild, October 2011. http:
//www.crysys.hu/publications/ﬁles/bencsathPBF11duqu.pdf.
[5] L. Breiman. Random forests. Mach. Learn., 45(1):5–32, Oct.
2001.
[6] K. Burton. The Conﬁcker Worm, 2010. https://www.sans.org/
security-resources/malwarefaq/conﬁcker-worm.php.
[7] J. Dean and S. Ghemawat. MapReduce: Simpliﬁed Data
Processing on Large Clusters. Commun. ACM, 51(1):107–113,
Jan. 2008.
[8] M. G. Elfeky, W. G. Aref, and A. K. Elmagarmid. Periodicity
detection in time series databases. Knowledge and Data Engi-
neering, IEEE Transactions on, 17(7):875–887, 2005.
[9] M. G. Elfeky, W. G. Aref, and A. K. Elmagarmid. Warp: time
warping for periodicity detection. In Data Mining, Fifth IEEE
International Conference on, pages 8–pp. IEEE, 2005.
[10] F. Giroire, J. Chandrashekar, N. Taft, E. M. Schooler, and
D. Papagiannaki. Exploiting temporal persistence to detect
covert botnet channels. In Proceedings of Recent Advances in
Intrusion Detection (RAID), 2009.
[11] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee.
Bothunter: Detecting malware infection through ids-driven di-
alog correlation.
In Proceedings of 16th USENIX Security
Symposium, 2007.
[12] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet com-
mand and control channels in network trafﬁc. In Proceedings
of the 15th Annual Network and Distributed System Security
Symposium (NDSS’08), February 2008.
[13] J. Han, G. Dong, and Y. Yin. Efﬁcient mining of partial periodic
patterns in time series database.
In Data Engineering, 1999.
Proceedings., 15th International Conference on, pages 106–115.
IEEE, 1999.
[14] G. Jacob, R. Hund, C. Kruegel, and T. Holz. JACKSTRAWS:
Picking Command and Control Connections from Bot Trafﬁc. In
Proceedings of the 20th USENIX Conference on Security (SEC
’11), 2011.
[15] Kaspersky Lab Global Research and Analysis Team.
The
the mysteries of
Epic Turla Operation: Solving some of
Snake/Uroboros, August 2014. https://securelist.com/ﬁles/2014/
08/KL Epic Turla Technical Appendix 20140806.pdf.
[16] Kaspersky Labs. The Epic Snake: Unraveling the mysteries
campaign, August 2014.
of
http://www.kaspersky.com/about/news/virus/2014/Unraveling-
mysteries-of-Turla-cyber-espionage-campaign.
cyber-espionage
the Turla
[17] B. Krebs. Sources: Target Investigating Data Breach. Krebs on
Security, December 2013. http://krebsonsecurity.com/2013/12/
sources-target-investigating-data-breach/.
[18] Mandiant. APT1 – Exposing One of China’s Cyber Espi-
onage Units, February 2013. http://intelreport.mandiant.com/
Mandiant APT1 Report.pdf.
[19] F. Rasheed, M. Alshalalfa, and R. Alhajj. Efﬁcient periodicity
mining in time series databases using sufﬁx trees. Knowledge
and Data Engineering, IEEE Transactions on, 23(1):79–94,
2011.
[20] A. Rassokhin and D. Oleksyuk. TDSS botnet: full disclosure,
March 2012. http://nobunkum.ru/analytics/en-tdss-botnet.
[21] RSA FraudAction Research Labs. Anatomy of an Attack, April
2011. https://blogs.rsa.com/anatomy-of-an-attack/.
[22] Symantec. Trojan.Zbot, January 2010. http://www.symantec.
com/security response/writeup.jsp?docid=2010-011016-3514-
99&tabid=2.
[23] Symantec Security Response.
enables
tool
http://www.symantec.com/content/en/us/enterprise/media/
security response/whitepapers/regin-analysis.pdf.
surveillance, November
stealthy
Regin: Top-tier espionage
2014.
[24] F. Tegeler, X. Fu, G. Vigna, and C. Kruegel. Botﬁnder: Finding
bots in network trafﬁc without deep packet
In
Proceedings of the 8th International Conference on Emerging
Networking Experiments and Technologies (CoNEXT), 2012.
inspection.
[25] M. Vlachos, S. Y. Philip, and V. Castelli. On periodicity
detection and structural periodic similarity. In Proceedings of
SIAM International Conference on Data Mining (SDM), 2005.
[26] Y. Zeng, X. Hu, and K. G. Shin. Detection of botnets using
combined host- and network-level information.
In IEEE/IFIP
International Conference on Dependable Systems and Networks
(DSN), 2010.
[27] K. Zetter. Sony Got Hacked Hard: What We Know and Don’t
Know So Far. Wired, December 2014. http://www.wired.com/
2014/12/sony-hack-what-we-know/.
490
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply.