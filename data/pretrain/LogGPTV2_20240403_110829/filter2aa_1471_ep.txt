hypervisor.
hyper
visorr
ootpr
ocper
node
Integ
er
HYPERVI
SOR_RO
OT_PROC
_PER_NO
DE
Specifies the total number of root virtual 
processors per node.
hyper
visorr
ootpr
oc
Integ
er
HYPERVI
SOR_RO
OT_PROC
Specifies the maximum number of 
virtual processors in the root partition.
hyper
visorb
audrat
e
Baud 
rate 
in 
bps
HYPERVI
SOR_DEB
UGGER_
BAUDRA
TE
If using serial hypervisor debugging, 
specifies the baud rate to use.
hyper
visorc
hanne
l
Chan
nel 
num
ber 
from 
0 to 
62
HYPERVI
SOR_DEB
UGGER_1
394_CHA
NNEL
If using FireWire (IEEE 1394) 
hypervisor debugging, specifies the 
channel number to use.
hyper
visord
ebugp
ort
CO
M 
port 
num
ber
HYPERVI
SOR_DEB
UGGER_P
ORT_NU
MBER
If using serial hypervisor debugging, 
specifies the COM port to use.
hyper
visoru
selarg
evtlb
Bool
ean
HYPERVI
SOR_USE
_LARGE_
VTLB
Enables the hypervisor to use a larger 
number of virtual TLB entries.
hyper
visorh
ostip
IP 
addr
ess 
(bina
ry 
form
at)
HYPERVI
SOR_DEB
UGGER_
NET_HOS
T_IP
Specifies the IP address of the target 
machine (the debugger) used in 
hypervisor network debugging.
hyper
visorh
ostpor
t
Integ
er
HYPERVI
SOR_DEB
UGGER_
NET_HOS
T_PORT
Specifies the network port used in 
hypervisor network debugging.
hyper
visoru
sekey
Strin
g
HYPERVI
SOR_DEB
UGGER_
NET_KEY
Specifies the encryption key used for 
encrypting the debug packets sent 
through the wire.
hyper
visorb
uspar
ams
Strin
g
HYPERVI
SOR_DEB
UGGER_
BUSPAR
Specifies the bus, device, and function 
numbers of the network adapter used for 
hypervisor debugging.
AMS
hyper
visord
hcp
Bool
ean
HYPERVI
SOR_DEB
UGGER_
NET_DH
CP
Specifies whether the Hypervisor 
Debugger should use DHCP for getting 
the network interface IP address.
4 All the BCD elements codes for the Windows Hypervisor Loader start with
BCDE_OSLOADER_TYPE, but this has been omitted due to limited space.
All the entries in the BCD store play a key role in the startup sequence.
Inside each boot entry (a boot entry is a BCD object), there are listed all the
boot options, which are stored into the hive as registry subkeys (as shown in
Figure 12-5). These options are called BCD elements. The Windows Boot
Manager is able to add or remove any boot option, either in the physical hive
or only in memory. This is important because, as we describe later in the
section “The boot menu,” not all the BCD options need to reside in the
physical hive.
Figure 12-5 An example screenshot of the Windows Boot Manager’s BCD
objects and their associated boot options (BCD elements).
If the Boot Configuration Data hive is corrupt, or if some error has
occurred while parsing its boot entries, the Boot Manager retries the
operation using the Recovery BCD hive. The Recovery BCD hive is
normally stored in \EFI\Microsoft\Recovery\BCD. The system could be
configured for direct use of this store, skipping the normal one, via the
recoverybcd parameter (stored in the UEFI boot variable) or via the
Bootstat.log file.
The system is ready to load the Secure Boot policies, show the boot menu
(if needed), and launch the boot application. The list of boot certificates that
the firmware can or cannot trust is located in the db and dbx UEFI
authenticated variables. The code integrity boot library reads and parses the
UEFI variables, but these control only whether a particular boot manager
module can be loaded. Once the Windows Boot Manager is launched, it
enables you to further customize or extend the UEFI-supplied Secure Boot
configuration with a Microsoft-provided certificates list. The Secure Boot
policy file (stored in \EFI\Microsoft\Boot\SecureBootPolicy.p7b), the
platform manifest polices files (.pm files), and the supplemental policies (.pol
files) are parsed and merged with the policies stored in the UEFI variables.
Because the kernel code integrity engine ultimately takes over, the additional
policies contain OS-specific information and certificates. In this way, a
secure edition of Windows (like the S version) could verify multiple
certificates without consuming precious UEFI resources. This creates the root
of trust because the files that specify new customized certificates lists are
signed by a digital certificate contained in the UEFI allowed signatures
database.
If not disabled by boot options (nointegritycheck or testsigning) or by a
Secure Boot policy, the Boot Manager performs a self-verification of its own
integrity: it opens its own file from the hard disk and validates its digital
signature. If Secure Boot is on, the signing chain is validated against the
Secure Boot signing policies.
The Boot Manager initializes the Boot Debugger and checks whether it
needs to display an OEM bitmap (through the BGRT system ACPI table). If
so, it clears the screen and shows the logo. If Windows has enabled the BCD
setting to inform Bootmgr of a hibernation resume (or of a hybrid boot), this
shortcuts the boot process by launching the Windows Resume Application,
Winresume.efi, which will read the contents of the hibernation file into
memory and transfer control to code in the kernel that resumes a hibernated
system. That code is responsible for restarting drivers that were active when
the system was shut down. Hiberfil.sys is valid only if the last computer
shutdown was a hibernation or a hybrid boot. This is because the hibernation
file is invalidated after a resume to avoid multiple resumes from the same
point. The Windows Resume Application BCD object is linked to the Boot
Manager descriptor through a specific BCD element (called resumeobject,
which is described in the “Hibernation and Fast Startup” section later in this
chapter).
Bootmgr detects whether OEM custom boot actions are registered through
the relative BCD element, and, if so, processes them. At the time of this
writing, the only custom boot action supported is the launch of an OEM boot
sequence. In this way the OEM vendors can register a customized recovery
sequence invoked through a particular key pressed by the user at startup.
The boot menu
In Windows 8 and later, in the standard boot configurations, the classical
(legacy) boot menu is never shown because a new technology, modern boot,
has been introduced. Modern boot provides Windows with a rich graphical
boot experience while maintaining the ability to dive more deeply into boot-
related settings. In this configuration, the final user is able to select the OS
that they want to execute, even with touch-enabled systems that don’t have a
proper keyboard and mouse. The new boot menu is drawn on top of the
Win32 subsystem; we describe its architecture later in this chapter in the
”Smss, Csrss, and Wininit” section.
The bootmenupolicy boot option controls whether the Boot Loader should
use the old or new technology to show the boot menu. If there are no OEM
boot sequences, Bootmgr enumerates the system boot entry GUIDs that are
linked into the displayorder boot option of the Boot Manager. (If this value is
empty, Bootmgr relies on the default entry.) For each GUID found, Bootmgr
opens the relative BCD object and queries the type of boot application, its
startup device, and the readable description. All three attributes must exist;
otherwise, the Boot entry is considered invalid and will be skipped. If
Bootmgr doesn’t find a valid boot application, it shows an error message to
the user and the entire Boot process is aborted. The boot menu display
algorithm begins here. One of the key functions, BmpProcessBootEntry, is
used to decide whether to show the Legacy Boot menu:
■    If the boot menu policy of the default boot application (and not of the
Bootmgr entry) is explicitly set to the Modern type, the algorithm
exits immediately and launches the default entry through the
BmpLaunchBootEntry function. Noteworthy is that in this case no
user keys are checked, so it is not possible to force the boot process to
stop. If the system has multiple boot entries, a special BCD option5 is
added to the in-memory boot option list of the default boot
application. In this way, in the later stages of the System Startup,
Winlogon can recognize the option and show the Modern menu.
■    Otherwise, if the boot policy for the default boot application is legacy
(or is not set at all) and there is only an entry, BmpProcessBootEntry
checks whether the user has pressed the F8 or F10 key. These are
described in the bootmgr.xsl resource file as the Advanced Options
and Boot Options 800keys. If Bootmgr detects that one of the keys is
pressed at startup time, it adds the relative BCD element to the in-
memory boot options list of the default boot application (the BCD
element is not written to the disk). The two boot options are processed
later in the Windows Loader. Finally, BmpProcessBootEntry checks
whether the system is forced to display the boot menu even in case of
only one entry (through the relative “displaybootmenu” BCD option).
■    In case of multiple boot entries, the timeout value (stored as a BCD
option) is checked and, if it is set to 0, the default application is
immediately launched; otherwise, the Legacy Boot menu is shown
with the BmDisplayBootMenu function.
5 The multi-boot “special option” has no name. Its element code is
BCDE_LIBRARY_TYPE_MULTI_BOOT_SYSTEM (that corresponds to 0x16000071 in hexadecimal
value).
While displaying the Legacy Boot menu, Bootmgr enumerates the
installed boot tools that are listed in the toolsdisplayorder boot option of the
Boot Manager.
Launching a boot application
The last goal of the Windows Boot Manager is to correctly launch a boot
application, even if it resides on a BitLocker-encrypted drive, and manage the
recovery sequence in case something goes wrong. BmpLaunchBootEntry
receives a GUID and the boot options list of the application that needs to be
executed. One of the first things that the function does is check whether the
specified entry is a Windows Recovery (WinRE) entry (through a BCD
element). These kinds of boot applications are used when dealing with the
recovery sequence. If the entry is a WinRE type, the system needs to
determine the boot application that WinRE is trying to recover. In this case,
the startup device of the boot application that needs to be recovered is
identified and then later unlocked (in case it is encrypted).
The BmTransferExecution routine uses the services provided by the boot
library to open the device of the boot application, identify whether the device
is encrypted, and, if so, decrypt it and read the target OS loader file. If the
target device is encrypted, the Windows Boot Manager tries first to get the
master key from the TPM. In this case, the TPM unseals the master key only
if certain conditions are satisfied (see the next paragraph for more details). In
this way, if some startup configuration has changed (like the enablement of
Secure Boot, for example), the TPM won’t be able to release the key. If the
key extraction from the TPM has failed, the Windows Boot Manager displays
a screen similar to the one shown in Figure 12-6, asking the user to enter an
unlock key (even if the boot menu policy is set to Modern, because at this
stage the system has no way to launch the Modern Boot user interface). At
the time of this writing, Bootmgr supports four different unlock methods:
PIN, passphrase, external media, and recovery key. If the user is unable to
provide a key, the startup process is interrupted and the Windows recovery
sequence starts.
Figure 12-6 The BitLocker recovery procedure, which has been raised
because something in the boot configuration has changed.
The firmware is used to read and verify the target OS loader. The
verification is done through the Code Integrity library, which applies the
secure boot policies (both the systems and all the customized ones) on the
file’s digital signature. Before actually passing the execution to the target
boot application, the Windows Boot Manager needs to notify the registered
components (ETW and Measured Boot in particular) that the boot application
is starting. Furthermore, it needs to make sure that the TPM can’t be used to
unseal anything else.
Finally, the code execution is transferred to the Windows Loader through
BlImgStartBootApplication. This routine returns only in case of certain
errors. As before, the Boot Manager manages the latter situation by
launching the Windows Recovery Sequence.
Measured Boot
In late 2006, Intel introduced the Trusted Execution Technology (TXT),
which ensures that an authentic operating system is started in a trusted
environment and not modified or altered by an external agent (like malware).
The TXT uses a TPM and cryptographic techniques to provide measurements
of software and platform (UEFI) components. Windows 8.1 and later support
a new feature called Measured Boot, which measures each component, from
firmware up through the boot start drivers, stores those measurements in the
TPM of the machine, and then makes available a log that can be tested
remotely to verify the boot state of the client. This technology would not
exist without the TPM. The term measurement refers to a process of
calculating a cryptographic hash of a particular entity, like code, data
structures, configuration, or anything that can be loaded in memory. The
measurements are used for various purposes. Measured Boot provides
antimalware software with a trusted (resistant to spoofing and tampering) log
of all boot components that started before Windows. The antimalware
software uses the log to determine whether components that ran before it are
trustworthy or are infected with malware. The software on the local machine
sends the log to a remote server for evaluation. Working with the TPM and
non-Microsoft software, Measured Boot allows a trusted server on the
network to verify the integrity of the Windows startup process.
The main rules of the TPM are the following:
■    Provide a secure nonvolatile storage for protecting secrets
■    Provide platform configuration registers (PCRs) for storing
measurements
■    Provide hardware cryptographic engines and a true random number
generator
The TPM stores the Measured Boot measurements in PCRs. Each PCR
provides a storage area that allows an unlimited number of measurements in
a fixed amount of space. This feature is provided by a property of
cryptographic hashes. The Windows Boot Manager (or the Windows Loader
in later stages) never writes directly into a PCR register; it “extends” the PCR
content. The “extend” operation takes the current value of the PCR, appends
the new measured value, and calculates a cryptographic hash (SHA-1 or
SHA-256 usually) of the combined value. The hash result is the new PCR
value. The “extend” method assures the order-dependency of the
measurements. One of the properties of the cryptographic hashes is that they
are order-dependent. This means that hashing two values A and B produces
two different results from hashing B and A. Because PCRs are extended (not
written), even if malicious software is able to extend a PCR, the only effect is
that the PCR would carry an invalid measurement. Another property of the
cryptographic hashes is that it’s impossible to create a block of data that
produces a given hash. Thus, it’s impossible to extend a PCR to get a given
result, except by measuring the same objects in exactly the same order.
At the early stages of the boot process, the System Integrity module of the
boot library registers different callback functions. Each callback will be
called later at different points in the startup sequence with the goal of
managing measured-boot events, like Test Signing enabling, Boot Debugger