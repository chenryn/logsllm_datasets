[*Blob*]{.emphasis} 格式的密钥。
受信任的密钥需要硬件组件：受信任的平台模块 (TPM)
芯片，它用于创建和加密密钥。TPM 使用名为[*存储根密钥*]{.emphasis} (SRK)
的 2048 位 RSA 密钥密封密钥。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要使用 TPM 1.2 规范，请通过机器固件中的设置或使用 `tpm-tools`{.literal}
软件包中的 `tpm_setactive`{.literal} 命令启用并激活它。此外，还需要安装
`TrouSers`{.literal} 软件堆栈，并且需要运行 `tcsd`{.literal}
守护进程才能与 TPM（专用硬件）通信。`tcsd`{.literal} 守护进程是
`TrouSers`{.literal} 套件的一部分，该套件可通过 `trousers`{.literal}
软件包获得。TPM 2.0 较新近且向后不兼容，使用不同的软件堆栈，其中
`tpm2-tools`{.literal} 或 `ibm-tss`{.literal}
实用程序提供对专用硬件的访问。
:::
此外，用户可以使用特定的 TPM [*平台配置寄存器*]{.emphasis} (PCR)
值集密封可信密钥。PCR
包含一组完整性管理值，它们反映了固件、引导装载程序和操作系统。这意味着
PCR 密封的密钥只能被加密的同一系统上的 TPM 解密。但是，一旦加载了 PCR
密封的可信密钥（添加至密钥环），并且验证其关联的 PCR
值后，就可以使用新的（或将来）PCR
值进行更新，以便可以引导新的内核。单个密钥也可以保存为多个
Blob，每个密钥都有不同的 PCR 值。
加密密钥不需要 TPM，因为它们使用内核高级加密标准
(AES)，这使其比可信密钥快。加密的密钥是使用内核生成的随机数字创建的，并在导入到用户空间
Blob
时由[*主密钥*]{.emphasis}加密。主密钥可以是可信密钥或用户密钥。如果主密钥不被信任，加密的密钥的安全性仅与用于加密它的用户密钥一样安全。
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#working-with-trusted-keys_enhancing-security-with-the-kernel-integrity-subsystem}使用可信密钥 {.title}
:::
下面的部分论述了如何使用 `keyctl`{.literal}
实用程序创建、导出、加载或更新可信密钥来提高系统安全性。
::: itemizedlist
**先决条件**
-   对于 64 位 ARM 架构和 IBM
    Z，需要载入`可信`{.literal}内核模块。有关如何载入内核模块的更多信息，请参阅[管理内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html "第 3 章 管理内核模块"){.link}。
-   需要启用并激活受信任的平台模块 (TPM)。有关 TPM
    的更多信息，请参阅[内核完整性子系统](#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#the-kernel-integrity-subsystem_enhancing-security-with-the-kernel-integrity-subsystem "内核完整性子系统"){.link}以及[受信任的和加密的密钥](#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#trusted-and-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem "可信和加密的密钥"){.link}。
:::
::: orderedlist
**流程**
1.  要使用 TPM 创建可信密钥，请执行：
    ``` literallayout
    # keyctl add trusted  "new  [options]" 
    ```
    ::: itemizedlist
    -   根据语法，构建如下示例命令：
        ``` literallayout
        # keyctl add trusted kmk "new 32" @u
        642500861
        ```
        命令创建一个名为 `kmk`{.literal} 的可信密钥，长度为 32 字节（256
        位），并将其放置在用户密钥环 (`@u`{.literal}) 中。密钥长度为 32
        到 128 字节（256 到 1024 位）。
    :::
2.  列出内核 keyring 的当前结构：
    ``` screen
    # keyctl show
    Session Keyring
           -3 --alswrv    500   500  keyring: _ses
     97833714 --alswrv    500    -1   \_ keyring: _uid.1000
    642500861 --alswrv    500   500       \_ trusted: kmk
    ```
3.  要将密钥导出到用户空间 blob，请执行：
    ``` literallayout
    # keyctl pipe 642500861 > kmk.blob
    ```
    命令使用 `pipe`{.literal} 子命令和 `kmk`{.literal} 的序列号。
4.  要从 user-space blob 加载可信密钥，请使用 `add`{.literal} 子命令并将
    blob 用作参数：
    ``` literallayout
    # keyctl add trusted kmk "load `cat kmk.blob`" @u
    268728824
    ```
5.  根据 TPMsealed 可信密钥创建安全加密密钥：
    ``` literallayout
    # keyctl add encrypted  "new [format] : " 
    ```
    ::: itemizedlist
    -   根据语法，使用已创建的可信密钥生成加密密钥：
        ``` literallayout
        # keyctl add encrypted encr-key "new trusted:kmk 32" @u
        159771175
        ```
        命令使用上一步中生成的 TPM 密封可信密钥
        (`kmk`{.literal})，作为生成加密密钥的[*主密钥*]{.emphasis}。
    :::
:::
::: itemizedlist
**其它资源**
-   `keyctl(1)`{.literal} 手册页
-   [可信和加密的密钥](#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#trusted-and-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem "可信和加密的密钥"){.link}
-   [内核密钥保留服务](https://www.kernel.org/doc/html/v4.18/security/keys/core.html#){.link}
-   [内核完整性子系统](#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#the-kernel-integrity-subsystem_enhancing-security-with-the-kernel-integrity-subsystem "内核完整性子系统"){.link}
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#working-with-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem}使用加密密钥 {.title}
:::
下面的部分论述了在无法使用受信任的平台模块 (TPM)
的系统中管理加密密钥以提高系统安全性。
::: itemizedlist
**先决条件**
-   对于 64 位 ARM 架构和 IBM Z，需要载入 `encrypted-keys`{.literal}
    内核模块。有关如何载入内核模块的更多信息，请参阅[管理内核模块](#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html "第 3 章 管理内核模块"){.link}。
:::
::: orderedlist
**流程**
1.  使用随机数字序列来生成用户密钥：
    ``` literallayout
    # keyctl add user kmk-user "$(dd if=/dev/urandom bs=1 count=32 2>/dev/null)" @u
    427069434
    ```
    命令生成名为 `kmk-user`{.literal} 的用户密钥，该密钥充当
    [*主密钥*]{.emphasis}，用于密封实际加密的密钥。
2.  使用上一步中的主密钥生成加密密钥：
    ``` literallayout
    # keyctl add encrypted encr-key "new user:kmk-user 32" @u
    1012412758
    ```
3.  另外，还可列出指定用户密钥环中的所有密钥：
    ``` literallayout
    # keyctl list @u
    2 keys in keyring:
    427069434: --alswrv  1000  1000 user: kmk-user
    1012412758: --alswrv  1000  1000 encrypted: encr-key
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
请记住，未通过可信主密钥密封的加密密钥仅作为用于加密它们的用户主密钥（随机数字密钥）安全。因此，主用户密钥应该尽可能安全地加载，最好是在引导过程早期加载。
:::
::: itemizedlist
**其它资源**
-   `keyctl(1)`{.literal} 手册页
-   [内核密钥保留服务](https://www.kernel.org/doc/html/v4.18/security/keys/core.html#){.link}
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#enabling-integrity-measurement-architecture-and-extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem}启用完整性测量架构和扩展验证模块 {.title}
:::
完整性测量架构 (IMA) 和扩展验证模块 (EVM)
属于内核完整性子系统，以各种方式增强系统安全性。下面的部分论述了如何启用和配置
IMA 和 EVM 来提高操作系统的安全性。
::: itemizedlist
**先决条件**
-   验证 `securityfs`{.literal} 文件系统是否已挂载到
    `/sys/kernel/security/`{.literal} 目录，并且存在
    `/sys/kernel/security/integrity/ima/`{.literal} 目录。
    ``` literallayout
    # mount
    …​
    securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
    …​
    ```
-   验证 `systemd`{.literal} 服务管理器是否已在引导时支持 IMA 和 EVM：
    ``` literallayout
    # dmesg | grep -i -e EVM -e IMA
    [    0.000000] Command line: BOOT_IMAGE=(hd0,msdos1)/vmlinuz-4.18.0-167.el8.x86_64 root=/dev/mapper/rhel-root ro crashkernel=auto resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet
    [    0.000000] kvm-clock: cpu 0, msr 23601001, primary cpu clock
    [    0.000000] Using crashkernel=auto, the size chosen is a best effort estimation.
    [    0.000000] Kernel command line: BOOT_IMAGE=(hd0,msdos1)/vmlinuz-4.18.0-167.el8.x86_64 root=/dev/mapper/rhel-root ro crashkernel=auto resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet
    [    0.911527] ima: No TPM chip found, activating TPM-bypass!
    [    0.911538] ima: Allocated hash algorithm: sha1
    [    0.911580] evm: Initialising EVM extended attributes:
    [    0.911581] evm: security.selinux
    [    0.911581] evm: security.ima
    [    0.911582] evm: security.capability
    [    0.911582] evm: HMAC attrs: 0x1
    [    1.715151] systemd[1]: systemd 239 running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=legacy)
    [    3.824198] fbcon: qxldrmfb (fb0) is primary device
    [    4.673457] PM: Image not found (code -22)
    [    6.549966] systemd[1]: systemd 239 running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=legacy)
    ```
:::
::: orderedlist
**流程**
1.  添加以下内核命令行参数：
    ``` literallayout
    # grubby --update-kernel=/boot/vmlinuz-$(uname -r) --args="ima_policy=appraise_tcb ima_appraise=fix evm=fix"
    ```
    该命令在 [*fix*]{.emphasis} 模式下为当前引导条目启用 IMA 和
    EVM，并允许用户收集和更新 IMA 测量。
    `ima_policy=appraise_tcb`{.literal}
    内核命令行参数确保内核使用默认的可信计算基础 (TCB)
    测量策略和实例步骤。禁止访问文件，因为之前和当前测量结果不匹配。
2.  重启以使更改生效。
3.  （可选）验证参数是否已添加到内核命令行中：
    ``` literallayout
    # cat /proc/cmdline
    BOOT_IMAGE=(hd0,msdos1)/vmlinuz-4.18.0-167.el8.x86_64 root=/dev/mapper/rhel-root ro crashkernel=auto resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet ima_policy=appraise_tcb ima_appraise=fix evm=fix
    ```
4.  创建一个内核主密钥来保护 EVM 密钥：
    ``` literallayout
    # keyctl add user kmk "$(dd if=/dev/urandom bs=1 count=32 2> /dev/null)" @u
    748544121
    ```
    内核主密钥 (`kmk`{.literal}) 完全保留在内核空间内存中。内核主密钥
    `kmk`{.literal} 的 32 字节长值是从 `/dev/urandom`{.literal}
    文件中随机字节生成的，并放置在用户 (`@u`{.literal})
    密钥环中。密钥序列号是位于前面输出的第二行。
5.  根据 `kmk`{.literal} 密钥创建一个加密的 EVM 密钥：
    ``` literallayout
    # keyctl add encrypted evm-key "new user:kmk 64" @u
    641780271
    ```
    命令使用 `kmk`{.literal} 生成并加密 64 字节长用户密钥（名为
    `evm-key`{.literal}）并将其放置在用户 (`@u`{.literal})
    密钥环中。密钥序列号是位于前面输出的第二行。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    用户密钥必须命名为 [**evm-key**]{.strong}，因为它是 EVM
    子系统预期使用的且正在使用的名称。
    :::
6.  为导出的密钥创建一个目录：
    ``` literallayout
    # mkdir -p /etc/keys/
    ```
7.  搜索 `kmk`{.literal} 键并将其值导出到文件中：
    ``` literallayout
    # keyctl pipe keyctl search @u user kmk > /etc/keys/kmk*
    ```
    命令将内核主密钥 (`kmk`{.literal}) 的未加密值放在之前定义的位置
    (`/etc/keys/`{.literal}) 的文件中。
8.  搜索 `evm-key`{.literal} 用户密钥并将其值导出到文件中：
    ``` literallayout
    # keyctl pipe keyctl search @u encrypted evm-key > /etc/keys/evm-key
    ```
    命令将用户 `evm-key`{.literal}
    密钥的加密值放在任意位置的文件中。`evm-key`{.literal}
    已在早期由内核主密钥加密。
9.  另外，还可查看新创建的密钥：
    ``` screen
    # keyctl show
    Session Keyring
    974575405   --alswrv     0        0      keyring: _ses
    299489774   --alswrv     0    65534       \_ keyring: _uid.0
    748544121   --alswrv     0        0           \_ user: kmk
    641780271   --alswrv     0        0           \_ encrypted: evm-key
    ```
    您应该可以看到类似的输出。
10. 激活 EVM:
    ``` literallayout
    # echo 1 > /sys/kernel/security/evm
    ```
11. （可选）验证 EVM 是否已初始化：
    ``` literallayout
    # dmesg | tail -1
    […​] evm: key initialized
    ```
:::