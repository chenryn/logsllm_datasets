    }
同上面示例一样的代码逻辑（为了方便，做了略微调整，有些代码无意义也没有删除），只是，不同的是，这里在`math`方法中调用了`urlRequest`方法。
那么如下情况又会输出什么呢？
同样的， **请读者不看下文的分析，先思考当变量值为以下情况时，这段代码会输出什么？**
  * 当`a=1,b=0`，url地址是`[www.cnpanda.net](https://www.cnpanda.net)`时
  * 当`a=1,b=0`，url地址是`[test.cnpanda.net](https://test.cnpanda.net)`时
  * 当`a=1,b=2`，url地址是`[www.cnpanda.net](https://www.cnpanda.net)`时
  * 当`a=1,b=2`，url地址是`[test.cnpanda.net](https://test.cnpanda.net)`时
**当`a=1,b=0`，url地址是`https://www.cnpanda.net`时**
这种情况下，`url`为`https://www.cnpanda.net`，因此会在内层向该地址发起http请求，并且打印状态码为200，内层执行完毕后，继续执行外层剩余代码逻辑，`b=0`使得`a/b`中的分母为0，导致外层出错，因此会进入`catch`块并打印出`外层层出错了`字符串，最后打印`all
end`结束代码逻辑。
**当`a=1,b=0`，url地址是`https://test.cnpanda.net`时**
这种情况下，`url`为`https://test.cnpanda.net`，因此会在内层向该地址发起http请求，但是由于无法解析导致出错，进入`catch`块，在`catch`块中打印`内层出错了`字符串，由于内层出错，导致外层也出错，直接进入外层的`catch`块并打印出`外层层出错了`字符串，最后打印`all
end`结束代码逻辑。
**当`a=1,b=2`，url地址是`https://www.cnpanda.net`时**
这种情况下，`url`为`https://www.cnpanda.net`，因此会在内层向该地址发起http请求，并且打印状态码为200，内层执行完毕后，继续执行外层剩余代码逻辑，`b!=0`使得`a/b`中的分母不为0，外层不会出错，因此执行完外层的逻辑，最后打印`all
end`结束整个代码逻辑。
**当`a=1,b=2`，url地址是`https://test.cnpanda.net`时**
这种情况下，`url`为`https://test.cnpanda.net`，因此会在内层向该地址发起http请求，因此会在内层向该地址发起http请求，但是由于无法解析导致出错，进入`catch`块，在`catch`块中打印`内层出错了`字符串，由于内层出错，导致外层也出错，直接进入外层的`catch`块并打印出`外层层出错了`字符串，最后打印`all
end`结束代码逻辑。
从上面的示例可以得出一个结论， **在一个存在`try ... catch`块的方法（无异常抛出）中去调用另一个存在`try ...
catch`块的方法（有异常抛出），如果被调用的方法（有异常抛出）出错，那么会导致`调用方法`出错且不会继续执行完`调用方法`的代码逻辑，但是`不会`终止代码运行的进程**
### 2、序列化数据的结构
序列化数据的结构可以参考：
《Object Serialization Stream Protocol/对象序列化流协议》总结
或者直接阅读官方文档：
使用[SerializationDumper](https://github.com/NickstaDB/SerializationDumper)工具可以查看一段序列化数据的结构，如下图所示：
可以看到，序列化结构的骨架是由`TC_*`和各种字段描述符构成，各个`TC_*`及描述符的意思已经在《Object Serialization Stream
Protocol/对象序列化流协议》一文中介绍了，想深入阅读的读者可以去看看。
### 3、序列化中的两个机制
#### 引用机制
在序列化流程中，对象所属类、对象成员属性等数据都会被使用固定的语法写入到序列化数据，并且会被特定的方法读取；在序列化数据中，存在的对象有null、new
objects、classes、arrays、strings、back
references等，这些对象在序列化结构中都有对应的描述信息，并且每一个写入字节流的对象都会被赋予引用`Handle`，并且这个引用`Handle`可以反向引用该对象（使用`TC_REFERENCE`结构，引用前面handle的值），引用`Handle`会从`0x7E0000`开始进行顺序赋值并且自动自增，一旦字节流发生了重置则该引用Handle会重新从`0x7E0000`开始。
#### 成员抛弃
在反序列化中，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，
**如果这个值出现在字节流中，但是并不属于对象，则抛弃该值，但是如果这个值是一个对象的话，那么会为这个值分配一个 Handle。**
### 4、了解jdk7u21漏洞
这个是毋庸置疑要理解的，因为jdk8u20是对jdk7u21漏洞修复的绕过。
可以参考我之前写的文章：JDK7u21反序列化漏洞分析笔记：
## 0x04 从一个case说起
由于`jdk8u20`真的比较复杂，因此为了方便理解，我写了一个简单的case，用于帮助读者理解下文。
假设存在两个类`AnnotationInvocationHandler`和`BeanContextSupport`，具体内容如下：
`AnnotationInvocationHandler.java`
    package com.panda.sec;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.Serializable;
    public class AnnotationInvocationHandler implements Serializable {
        private static final long serialVersionUID = 10L;
        private int zero;
        public AnnotationInvocationHandler(int zero) {
            this.zero = zero;
        }
        public void exec(String cmd) throws IOException {
            Process shell = Runtime.getRuntime().exec(cmd);
        }
        private void readObject(ObjectInputStream input) throws Exception {
            input.defaultReadObject();
            if(this.zero==0){
                try{
                    double result = 1/this.zero;
                }catch (Exception e) {
                    throw new Exception("Hack !!!");
                }
            }else{
                throw new Exception("your number is error!!!");
            }
        }
    }
`BeanContextSupport.java`
    package com.panda.sec;
    import java.io.ObjectInputStream;
    import java.io.Serializable;
    public class BeanContextSupport implements Serializable {
        private static final long serialVersionUID = 20L;
        private void readObject(ObjectInputStream input) throws Exception {
            input.defaultReadObject();
            try {
                input.readObject();
            } catch (Exception e) {
                return;
            }
        }
    }
**Question：当传入`AnnotationInvocationHandler`方法中的`zero`等于`0`的时候，如何能在序列化结束时调用`AnnotationInvocationHandler.exec()`方法达到`RCE`？**
我们首先令`zero`等于0，然后尝试调用`AnnotationInvocationHandler.exec()`方法看看：
    import java.io.*;
    public class Main {
        public static void payload() throws IOException, ClassNotFoundException {
            AnnotationInvocationHandler annotationInvocationHandler = new AnnotationInvocationHandler(0);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("payload1"));
            out.writeObject(annotationInvocationHandler);
            out.close();
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("payload1"));
            AnnotationInvocationHandler str = (AnnotationInvocationHandler)in.readObject();
            str.exec("open /System/Applications/Calculator.app");
        }
        public static void main(String[] args) throws IOException, ClassNotFoundException {
            payload();
        }
    }
不出意外，由于`zero`的值为0，所以使得`result`的分母为0，导致出现异常，抛出`Exception("Hack !!!")`错误。
由于在代码中我们生成了序列化文件`payload1`，所以现在可以利用`SerializationDumper`工具来看看其数据结构：
    STREAM_MAGIC - 0xac ed
    STREAM_VERSION - 0x00 05
    Contents
      TC_OBJECT - 0x73
        TC_CLASSDESC - 0x72
          className
            Length - 41 - 0x00 29
            Value - com.panda.sec.AnnotationInvocationHandler - 0x636f6d2e70616e64612e7365632e416e6e6f746174696f6e496e766f636174696f6e48616e646c6572
          serialVersionUID - 0x00 00 00 00 00 00 00 0a
          newHandle 0x00 7e 00 00
          classDescFlags - 0x02 - SC_SERIALIZABLE
          fieldCount - 1 - 0x00 01
          Fields
            0:
              Int - I - 0x49
              fieldName
                Length - 4 - 0x00 04
                Value - zero - 0x7a65726f
          classAnnotations
            TC_ENDBLOCKDATA - 0x78
          superClassDesc
            TC_NULL - 0x70
        newHandle 0x00 7e 00 01
        classdata
          com.panda.sec.AnnotationInvocationHandler
            values
              zero
                (int)0 - 0x00 00 00 00
由于该数据结构比较短，可以来具体介绍一下。
`STREAM_MAGIC - 0xac ed`是魔数，代表了序列化的格式；
`STREAM_VERSION - 0x00 05`表示序列化的版本；
`Contents`表示最终生成的序列的内容；
`TC_OBJECT - 0x73`表示序列化一个新对象的开始标记；
`TC_CLASSDESC - 0x72`表示一个新类的描述信息开始标记；
`className`表示当前对象的类全名信息，下面紧跟着的内容也是`className`的描述信息；
`Length - 41 - 0x00 29`表示当前对象的类的长度为`41`；
`Value - com.panda.sec.AnnotationInvocationHandler -0x636f6d2e70616e64612e7365632e416e6e6f746174696f6e496e766f636174696f6e48616e646c6572`表示当前对象的类的名称为`com.panda.sec.AnnotationInvocationHandler`，后面的字符串是其十六进制表示；
`serialVersionUID - 0x00 00 00 00 00 00 00 0a`定义了`serialVersionUID`的值为`20`；
`newHandle 0x00 7e 00 00`
表示为对象分配一个值为`007e0000`的`handle`（因为引用`Handle`会从`0x7E0000`开始进行顺序赋值并且自动自增），值得注意的是这里的`handle`实际上没有被真正的写入文件，如果我们把这里的`007e0000`加入到序列化数据中，会发生异常，从而终止反序列化进程，之所以会在这里显示出来，是因为`serializationDumper`的作者为了方便使用者分析序列化数据的结构；
`classDescFlags - 0x02 -SC_SERIALIZABLE`表示类描述信息标记为`SC_SERIALIZABLE`，代表在序列化的时候使用的是`java.io.Serializable`（如果使用的是`java.io.Externalizable`，这里的标记就会变成`classDescFlags
- 0x04 - SC_EXTERNALIZABLE`）；
`fieldCount - 1 - 0x00
01`表示成员属性的数量为1，值得注意的是这里的`fieldCount`同样是`serializationDumper`的作者为了方便使用者分析序列化数据的结构而新设置的描述符，在官方序列化规范中是没有`fieldCount`的；
`Fields`表示接下来的内容是类中所有字段的描述信息，`Fields`成员属性保存了当前分析的类对应的所有成员属性的元数据信息，它是一个数组结构，每一个元素都对应了成员属性的元数据描述信息，且不会重复；
`0`表示接下来的内容是第一个字段的描述信息；
`Int - I - 0x49`表示该字段的类型是`int`型；
`fieldName`表示当前字段的字段名信息，下面紧跟着的内容也是`fieldName`的描述信息；
`Length - 4 - 0x00 04`表示当前字段名的长度为`4`；
`Value - zero - 0x7a65726f`表示当前字段名为`zero`；
`classAnnotations`表示和类相关的`Annotation`的描述信息，这里的数据值一般是由`ObjectOutputStream`的`annotateClass()`方法写入的，但由于`annotateClass()`方法默认为空，所以`classAnnotations`后一般会设置`TC_ENDBLOCKDATA`标识；（关于`annotateClass`具体可以看我写的[序列化流程分析总结](https://www.cnpanda.net/sec/893.html)一文）
`TC_ENDBLOCKDATA - 0x78`数据块的结束标记，表示这个对象类型的描述符已经结束了；
`superClassDesc`表示父类的描述符信息，这里为空；
`TC_NULL - 0x70`表示当前对象是一个空引用；
`newHandle 0x00 7e 00
01`表示为对象分配一个值为`007e0001`的`handle`，同上面的`newHandle`一样，这里的`handle`实际上没有被真正的写入文件；
`classdata`表示下面紧跟着的是类数据中的所有内容；
`com.panda.sec.AnnotationInvocationHandler values zero (int)0 - 0x00 00 00
00`表示类数据中的所有内容
以上就是所有的序列化数据的结构，当进行反序列化的时候，会依次从上到下读取序列化内容进行还原数据。
**现在思考一个问题：如果在上面的序列化数据中插入一部分源代码中没有的数据，那么在反序列化的时候会发生什么？**
在解决这个问题前，首先再来深入理解一下我们之前提到的引用机制，举个例子
比如以下代码进行一次序列化的序列化数据结构：
    package com.panda.sec;
    import java.io.*;
    public class test implements Serializable {
        private static final long serialVersionUID = 100L;
        public static int num = 0;
        private void readObject(ObjectInputStream input) throws Exception {
            input.defaultReadObject();
            System.out.println("hello!");
        }
        public static void main(String[] args) throws IOException {
            test t = new test();
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("testcase"));
            out.writeObject(t);
            out.close();
        }
    }
如果上述代码进行两次序列化，那么这个数据结构会变成什么？
可以来看看：
    package com.panda.sec;
    import java.io.*;
    public class test implements Serializable {
        private static final long serialVersionUID = 100L;
        public static int num = 0;
        private void readObject(ObjectInputStream input) throws Exception {
            input.defaultReadObject();
            System.out.println("hello!");