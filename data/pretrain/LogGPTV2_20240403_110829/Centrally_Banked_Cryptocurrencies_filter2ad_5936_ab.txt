of outputs. When we use these address identiﬁers later on, we
occasionally omit information (e.g., the value v) if it is already
implicit or unnecessary.
IV. AN OVERVIEW OF RSCOIN
In this section, we provide a brief overview of RSCoin,
which will be useful for understanding both its underlying con-
sensus algorithm (presented in Section V) and the composition
of the system as a whole (presented in Section VI).
At a high level, RSCoin introduces a degree of central-
ization into the two typically decentralized components of a
blockchain-based ledger: the generation of the monetary supply
and the constitution of the transaction ledger. In its simplest
form, the RSCoin system assumes two structural entities: the
central bank, a centralized entity that ultimately has complete
control over the generation of the monetary supply, and a
distributed set of mintettes (following Laurie [19]) that are
responsible for the maintenance of the transaction ledger. The
interplay between these entities — and an overview of RSCoin
as a whole — can be seen in Figure 1.
Brieﬂy, mintettes collect transactions from users and collate
them into blocks, much as is done with traditional cryptocur-
rencies. These mintettes differ from traditional cryptocurrency
miners, however, in a crucial way: rather than performing
some computationally difﬁcult task, each mintette is simply
authorized by the central bank to collect transactions. In
RSCoin, this authorization is accomplished by a PKI-type
functionality, meaning the central bank signs the public key of
4Or, as in Bitcoin, it may be some hashed version of the public key.
3
Fig. 2: The proposed protocol for validating transactions; each
mintette mi is an owner of address i. In (1), a user learns
the owners of each of the addresses in its transaction. In (2),
the user collects approval from a majority of the owners of
the input addresses. In (3), the user sends the transaction and
these approvals to the owners of the transaction identiﬁer. In
(4), some subset of these mintettes add the transaction to their
blocks.
leave a comprehensive exploration of how privacy-enhancing
and other techniques can be combined with RSCoin as an
interesting avenue for future work.
V. ACHIEVING CONSENSUS
In the previous section, we described how mintettes send
so-called “lower-level blocks” to the central bank at the end
of a period. In this section, we describe a consensus protocol
by which these blocks can already be made consistent when
they are sent to the central bank, thus ensuring that the overall
system remains scalable by allowing the central bank to do the
minimal work necessary.
As described in the introduction, one of the major beneﬁts of
centralization is that, although the generation of the transaction
ledger is still distributed, consensus on valid transactions
can be reached in a way that avoids the wasteful proofs-
of-work required by existing cryptocurrencies. In traditional
cryptocurrencies, the set of miners is neither known nor trusted,
meaning one has no choice but to broadcast a transaction
to the entire network and rely on proof-of-work to defend
against Sybil attacks. Since our mintettes are in fact authorized
by the central bank, and thus both known and — because of
their accountability — trusted to some extent, we can avoid the
heavyweight consensus requirement of more fully decentralized
cryptocurrencies and instead use an adapted version of Two-
Phase Commit (2PC), as presented in Figure 2. A generic
consensus protocol, ensuring total ordering of transactions,
is not necessary for double-spending prevention; instead, a
weaker property — namely that any transaction output features
as a transaction input in at most one other transaction — is
sufﬁcient. RSCoin builds its consensus protocol for double-
spending prevention based on this insight.
We begin by describing a threat model for the consensus
protocol before going on to present a basic protocol that
achieves consensus on transactions (Section V-B), an augmented
protocol that allows for auditability of both the mintettes and
the central bank (Section V-C), and a performance evaluation
(Section V-D).
Fig. 1: The overall structure of RSCoin. Each mintettes main-
tains a set of lower-level blocks, and (possibly) communicates
with other mintettes (either directly or indirectly). At some
point, the mintettes send these blocks to the central bank, which
produces a higher-level block. It is these higher-level blocks
that form a chain and that are visible to external users.
the mintette, and each lower-level block must contain one of
these signatures in order to be considered valid. We refer to the
time interval in which blocks are produced by mintettes as an
epoch, where the length of an epoch varies depending on the
mintette. Because these blocks are not ultimately incorporated
into the main blockchain, we refer to them as lower-level blocks.
Mintettes are collectively responsible for producing a consistent
ledger, and thus to facilitate this process they communicate
internally throughout the course of an epoch — in an indirect
manner described in Section V — and ultimately reference not
only their own previous blocks but also the previous blocks of
each other. This means that these lower-level blocks form a
(potentially) cross-referenced chain.
At the end of some longer pre-deﬁned time interval called
a period, the mintettes present their blocks to the central bank,
which merges these lower-level blocks to form a consistent
history in the form of a new block. This higher-level block
is what is ultimately incorporated into the main blockchain,
meaning a user of RSCoin need only keep track of higher-
level blocks. (Special users wishing to audit the behavior of
the mintettes and the central bank, however, may keep track
of lower-level blocks, and we describe in Section V-C ways to
augment lower-level blocks to improve auditability.)
Interaction with RSCoin can thus be quite similar to
interaction with existing cryptocurrencies, as the structure of
its blockchain is nearly identical, and users can create new
pseudonyms and transactions in the same way as before. In fact,
we stress that RSCoin is intended as a framework rather than a
stand-alone cryptocurrency, so one could imagine incorporated
techniques from various existing cryptocurrencies in order
to achieve various goals. For example, to ensure privacy for
transactions, one could adapt existing cryptographic techniques
such as those employed by Zerocoin [23], Zerocash [4],
Pinocchio Coin [7], or Groth and Kohlweiss [12]. As these
goals are somewhat orthogonal to the goals of this paper, we
4
mintettemintettemintettemintettebankmintette1mintette1user12tx:✓34servicemintette1✓121mintette2mintette2mintette21tx    ✓✓2txtxA. Threat model and security properties
We always assume that
the central bank is honest —
although we describe in Section VI-B1 ways to detect certain
types of misbehavior on the part of the bank — and that the
underlying cryptography is secure; i.e., no parties may violate
the standard properties offered by the hash function and digital
signature. Honest mintettes follow the protocols as speciﬁed,
whereas dishonest mintettes may behave arbitrarily; i.e., they
may deviate from the prescribed protocols, and selectively
or broadly ignore requests from users. Finally, honest users
create only valid transactions (i.e., ones in which they own the
input addresses and have not yet spent their contents), whereas
dishonest users may try to double-spend or otherwise subvert
the integrity of RSCoin.
We consider two threat models. Our ﬁrst threat model
assumes that each transaction is processed by a set of mintettes
with an honest majority; this is different from assuming that a
majority of all mintettes are honest, as we will see in our
description of transaction processing in Section V-B. Our
second threat model assumes that no mintette is honest, and
that mintettes may further collude to violate the integrity of
RSCoin. This is a very hostile setting, but we show that some
security properties still hold for honest users. Additionally, we
show that mintettes that misbehave in certain ways can be
detected and ultimately held accountable, which may serve as
an incentive to follow the protocols correctly.
In the face of these different adversarial settings, we try to
satisfy at least some of the following key integrity properties:
O No double-spending: Each output address of a
valid transaction will only ever be associated with
the input of at most one other valid transaction.
O Non-repudiable sealing: The conﬁrmation that a
user receives from a mintette — which promises
that a transaction will be included in the ledger —
can be used to implicate that mintette if the
transaction does not appear in the next block.
O Timed personal audits: A user can, given access
to the lower-level blocks produced within a period,
ensure that the implied behavior of a mintette
matches the behavior observed at the time of any
previous interactions with that mintette.
O Universal audits: Anyone with access to the
lower-level blocks produced within a period can
audit all transactions processed by all mintettes. In
particular, mintettes cannot retroactively modify,
omit, or insert transactions in the ledger.
O Exposed inactivity: Anyone with access to the
lower-level blocks produced within a period can
observe any mintette’s substantial absence from
participation in the 2PC protocol. (In particular,
then, a mintette cannot retroactively act to claim
transaction fees for services not provided in a
timely manner.)
and that exposure may disincentive mintettes from violating
those that we cannot capture directly.
B. A basic consensus protocol
To begin, the space of possible transaction identiﬁers is
divided so that each mintette m is responsible for some subset,
or “shard.” For reliability and security, each shard is covered
by (potentially) multiple mintettes, and everyone is aware of
the owner(s) of each.
We use owners(addrid) to denote the set of mintettes
responsible for addrid. Recall that addrid = (tx, i, v), where
tx speciﬁes the transaction in which addr, at sequential output
i, received value v. We map each addrid to a shard using tx
by hashing a canonical representation of the transaction. As
a result, all input addrid in a transaction may have different
owners (because the addresses may have appeared as an output
in different transactions), but all output addrid have the same
owner (because they are all appearing as an output in the
same transaction). For simplicity, we therefore use the notation
owners(Sout) below (where Sout is the list of output addresses
for a transaction).
In each period, each mintette m is responsible for main-
taining two lists concerning only the addrid (and indirectly the
transactions tx) it owns: a list of unspent transaction outputs,
denoted utxo, and two lists of transactions seen thus far in
the period, denoted pset and txset respectively (the former
is used to detect double-spending, and the latter is used to
seal transactions into the ledger). The utxo list is of the form
addrid (cid:55)→ (addr, v), where (addrid (cid:55)→ (addr, v)) ∈ utxo
indicates that addrid had not acted as an input address at
the start of the period but has since sent value v to addr and
(addrid (cid:55)→ (⊥,⊥)) ∈ utxo indicates that addrid has not yet
spent its contents. The pset list is of the form addrid (cid:55)→ tx,
where (addrid (cid:55)→ tx) ∈ pset indicates that addrid has acted
as an input address in transaction tx. We assume that each
mintette starts the period with an accurate utxo list (i.e., all
transactions within the mintette’s shard in which the outputs
have not yet been spent) and with an empty pset.
At some point in the period, a user creates a transaction.
The user5 can now run Algorithm V.1.6
In the ﬁrst phase, the user asks the relevant mintettes to
“vote” on the transaction; i.e., to decide if its input addresses
have not already been used, and thus certify that no double-
spending is taking place. To do this, the user determines
the owners for each input address, and sends the transaction
information to these mintettes, who each run Algorithm V.2.
We omit for simplicity the formal description of an algorithm
CheckTx that, on input a transaction, checks that the basic
structure of the transaction is valid; i.e., that the collective
input value is at least equal to the collective output value, that
the input address identiﬁers point to valid previous transactions,
and that the signatures authorizing previous transaction outputs
to be spent are valid.
To see how to satisfy these security properties, we ﬁrst
present our basic consensus protocol in Section V-B, and then
present in Section V-C ways to augment this protocol to achieve
auditability. We then prove that at least some subset of these
security properties can be captured in both our threat models,
5We refer to the user here and in the sequel, but in practice this can all be
done by the underlying client, without any need for input from the (human)
user.
6All algorithms are assumed to be executed atomically and sequentially by
each party, although as we demonstrate in Section V-D2, implementing them
using optimistic locking is possible to increase parallelism and efﬁciency.
5
Algorithm V.1: Validating a transaction, run by a user
Algorithm V.3: CommitTx, run by a mintette
n−→ Sout) and period identiﬁer
j
Input: a transaction tx(Sin
1 bundle ← ∅
//first phase: collect votes
2 forall the addrid ∈ Sin do
M ← owners(addrid)
forall the m ∈ M do
(pkm, σ) ←
CheckNotDoubleSpent(tx, addrid, m)
if (pkm, σ) = ⊥ then
else
return ⊥
bundle ← bundle ∪ {((m, addrid) (cid:55)→
(pkm, σ))}
//second phase: commit
10 M ← owners(Sout)
11 forall the m ∈ M do
12
(pkm, σ) ← CommitTx(tx, j, bundle, m)
Algorithm V.2: CheckNotDoubleSpent, run by a mintette
Input: a transaction txc, an address identiﬁer
addrid = (tx, i) and a mintette identiﬁer m
1 if CheckTx(txc) = 0 or m /∈ owners(addrid) then
2
3 else
4
return ⊥
if (addrid ∈ utxom) or ((addrid (cid:55)→ txc) ∈ psetm)
then
utxom ← utxom \ {addrid}
psetm ← psetm ∪ {(addrid (cid:55)→ txc)}
return (pkm, Sig.Sign(skm, (txc, addrid)))
return ⊥
else
3
4
5
6
7
8
9
5
6
7
8
9
Input: a transaction tx(Sin
n−→ Sout), a period identiﬁer
j, a bundle of evidence
bundle = {((mi, addridi) (cid:55)→ (pki, σi))}i, and a
mintette identiﬁer m
return ⊥
d ← 1
forall the addrid ∈ Sin do
1 if CheckTx(tx) = 0 or m /∈ owners(Sout) then
2
3 else
4
5
6
7
8
9
forall the m(cid:48) ∈ owners(addrid) do
if (m(cid:48), addrid) ∈ bundle then
(pk, σ) ← bundle[(m(cid:48), addrid)]
d(cid:48) ← d ∧ H(pk) ∈ DPKj
∧ Sig.Verify(pk, (tx, addrid), σ)
10
11
12
13
14
15
16
17
else
d ← 0
else
if d = 0 then
return ⊥
utxom ← utxom ∪ Sout
txsetm ← txsetm ∪ {tx}
return (pkm, Sig.Sign(skm, tx))
These mintettes then run Algorithm V.3.
In Algorithm V.3, a mintette ﬁrst checks the transaction
and whether it falls within its remit. The mintette then checks
the bundle of evidence by verifying that all — or, in practice,
at least a majority — of mintettes associated with each input
are all included, that the input mintettes were authorized to
act as mintettes in the current period, and that their signatures
verify. If these checks pass and the transaction has not been
seen before, then the mintette adds all the output addresses
for the transaction to its utxo list and adds the transaction to
txset. The mintette then sends to the user evidence that the
transaction will be included in the higher-level block (which a
user may later use to implicate the mintette if this is not the