continue
try:
c1std = win32api.RegQueryValueEx(skey,. None)[0]
except win32api.error:
print “Cou1dn’t get CLSID value...skippfng*
skey_index+=1
continue
c1sid_1ist.append((progid, c1sid))
skey_index += 1
这些代码片段组合起来生成了描述系统中所有可用COM对象的一个元组列表。对COM对
象的安全测试通常局限于那些可以访问InternetExplorer的控件。这是缘于这样一个事实，即到
目前为止最主流的AeriveX开发技术就是一个攻击者可LI控制一个要意的Web站点，并强追用户
使用含有漏洞的构件来访问Web页。由于只有其中的某些控件可以在InternetExplorer中访问，
所以我们的第二个任务就是将那些不能访问的构件从我们的列表中别除出去。InternetExplorer
在加载一个ActiveX控件时并不会提示是否满足下面三个准则中的任何一个9：
·控件在Windows注册表中被标记为“脚本安全”。
·控件在Windows注册表中被标记为“初始化安全”
·控件实现了IObjectSafetyCOM接口。
Windows注册表包含一个构件类别键，该健为已安装构件所实现的每个类别列出了子键。
我们所寻找的两个子键是CATID_SafeForScripting和CATID_SafeForlntializing。下面的程序将
确定一个给定的CLSID是否在注册表中被标记为在InternetExplorer中可访问。
def is_safe_for_scripting (c1sid):
try:
key - win32ap1.RegOpenKey(win32con.HKEY_CLASSES_R00T,\
“CLSID\\xs\\Implemented Categories%c1s1d)
except win32ap1.error:
return Fa1se
skey_index = 0
http://msdn.microsoft.com/workshop/components/artivex/safety.asp
---
## Page 217
202
第二部分目标和自动化
skey - win32api.RegEnumKey(key. skey_index)
except:
break
CATID_SafeForScripting
if skey -“(70095801-9882-11CF-9FA9-00AA006C42C4)
return True
skey_index += 1
return False
def is_safe_for_init (clsid):
try:
key= win32ap1.RegOpenKey(win32con.HKEY_CLASSES_R00T,\
“CLSID\\xs\\Inpemented Categorles”%c1sid)
except win32api.error:
return False
FIRETD
skey_index=0
whi1e True:
try:
skey-win32ap1,RegEnunikey（key.skey_index)
daxa
外
break
全支，
CATID_SafeForInitializing
最士员：
if skey*=“(70095802-9882-11CF-9FA9-00AA006C42C4):
return True
skey_index += 1
return False
1
除了在注册表中进行标记之外，一个ActiveX控件还可以通过实现IObjectSafety接口来在
InternetExplorer中将其自身标记为安全的。为了确定一个给定的ActiveX控件是否实现了
IObjectSafety接口，首先必须要将其实例化然后进行查询。下面的程序将确定一个给定的控件
是否实现了IObjectSafety接口，以及是否可以访问InternetExplorer：
def is_iobject_safety (c1sid):
try:
unknown -pythoncom.CoCreateInstance(c1sid,\
pythoncom.CLSCTX_INPROC_SERVER,
None,
except:
return False
try:
objsafe - unknown.QueryInterface(axscript.IID_IobjectSafety)
except:
---
## Page 218
第18章Web浏览器的模测试：自动化
203
return False
return True
为了使可加载ActiveX控件的列表更加完整，我们必须要考虑最后一个方面。微软提供了
这样一种机制，即通过注册表键HKLM\Software\Microsoft\InternetExplorer\ActiveX
Compatibility来销毁位或者阻止在Internet Explorer中加载单个
的CLSID。每个包含位于此注册表位置的一个条目的CLSID，都必须从列表中别除出去。可以
使用下面的函数来确定一个给定的CLSID是否以这种方式被禁用：
def is_ki11_bitted (c1sfd) :
try:
key = win3Zap1 .RegOpenKey(win32con,HKEY_LOCAL_MACHINE, \
"SOFTwARE\\Microsoft\\Internet Explorer
except win32api.error:
"\\ActiveX Compatibi1ity\\%s" % c1sid)
return False
try:
（compat_flags，typ）-win32api.RegQueryvalueEx（key，\
“Compatib111ty Flags")
except win32apf.error:
return Fa1se
if typ 1= win32con.REC_DwoRD:
return Fa1se
1f compat_flags & 0x400:
return Trut
else:
return Fa1se
return Fa1se
对我们所创建的ActiveX控件列表进行两遍检查，以确定哪个控件可能是不恰当的，接下
来我们必须要研究控件所暴露的属性和方法。
18.2.2属性、方法、参数和类型
具备系统的生成目标控件的一个列表的能力是非常方便的，这也正是我们的ActiveX模糊
测试发挥优势之处。对一个COM对象所暴露的所有属性和方法的描述直接嵌入到其中。另外，
属性和方法参数的类型也被加以了描述。这个COM特性对作为模糊器开发者的我们来说是很令
人兴奋的，就像是第一次听说该特性的软件开发者那样兴奋。可以通过编程来枚举出一个
ActiveX控件的攻击界面的这种能力允许我们创建更加智能化的模糊器，它可以知道一个特定
的方法可能会期望何种类型的数据。这样，当期望一个整数时，我们就不会浪费时间来提供一
个字符串了。
bttp://support.microsoft.com/kb/240797
---
## Page 219
204
第二部分目标和自动化
在COM领域，数据是通过一个被称为VARIANT的结构来传递的。VARIANT数据结构支持
许多数据类型，包括整数，浮点数，字符串，日期型，布尔型，其他的COM对象以及这些类型
的任意数组。PythonCOM提供了一个抽象层以为我们隐藏许多的细节信息。表18-1显示了一些
内部Python类型以及它们的等价VARIANT类型之间的映射。
表18-1PythonCOMVARIANT转换
Python对象类型
VARIANT类型
整数
VT_14
字将串
浮点数
VT_NLL
真/假
VT_BOOL
库。我们所需要了解的关于一个COM对象属性和方法的所有信息都可以通过被加载的类型库来
获得。作为一个例子，让我们来研究一下图18-2中所示的针对AdobeAcrobatPDF控件的类型
库。ActiveX控件同Adobe的AcrobatReader绑定在一起并且可以访问lnternetExplorer，因为它
被同时标记为脚本安全以及初始化安全。下面的代码片段说明了如何针对该代码来加载类型库，
同时它还应用了一些Python编程技巧创建了一个VARIANT名字的映射：
adobe =r°C:Progran Fi1es\Common Fi1es*\
r"\Adobe\Acrobat\ActiveX\AcroPDF.d11"
t1b = pythoncom.LoadTypeLib(adobe)
for vt 1n [x for × fn pythoncon._dict..keysO if x.count("VT_")]:
{}=SLA
VTS[eva1（"pythoncom.%s"%vt）]-vt
所生成的VARIANT名字映射只是用于说明的目的，我们在后面将会看到这一点，一个类
型库可以定义多种类型，并且循环的次数可以通过调用GetTypeInfoCount（）来重新得到。在
我们的例子中，有三种类型被显示在图18-2的第一列中。下面的例子说明了如何循环不同的类
型并输出它们的名字：
for pos 1n xrange(tTb.GetTypeInfoCount()）:
name-t1b.GetDocumentation(pos）[0]
print. nane
在Acrobat控件中定义了三种类型。下面对图18-2中高亮显示的IAcroAXDocShim类型进行
仔细研究。同大多数编程中的计算方法一样，计数的位置是从0开始的，这意味着我们所期望
类型的索引是2面不是3。在下面的代码块中，类型信息和属性从前面定义的类型库中被抽取出
来，并被用于枚举此特定类型所包含的属性：
---
## Page 220
第18章Web浏览器的模测试：自动化
attr -info.GetTypeAttrO)
info = t1b.GetTypeInfo(2)
print *properties:"
for 1in xrange(attr.cVars):
id-info.GetVarDesc(1）[0]
names = info.GetNanes(id)
print "\t”, names[0]
cVars属性变量指定了在该类型下所定义的属性（或变量）的数量，该数量用于执行循环
井输出每个属性的名字，将方法、参数和参数类型进行枚举非常简单，如下面的代码片段所示：
for 1in xrange(attr.cFuncs）:
print “methods:"
desc -info.GetFuncDesc（1)
if desc.wFuncFlags:
continue
1d
=desc.nemid
nanes = info.GetNames(id)
print "\txs()° % names[0]
=0
for name in names[1:]:
print “\t%s, %s" % (name, VTS[desc.args[1][0]])
↑ += 1
在这个例子中，cFuncs属性变量指定了在该类型下所定义的方法的数量。这些方法被枚举
出来，但忽略了那些被设置了wfuncFlags标志的方法。该标志指明了这个方法是受限制的（不
可访问的），因此不适合于进行模糊测试。GetNames（）函数返回方法的名字，以及方法中每个
参数的名字。方法的名字被输出，然后列表的剩余部分names[1：]被传递以访问参数。该函数
的描述最初是通过调用GetFuncDesc（）来返回的，并且包含针对每个参数的VARIANT类型的一