bilinear groups. In EUROCRYPT. Springer, 415–432.
[44] Helene Haagh, Aleksandr Karbyshev, Sabine Oechsner, Bas Spitters, and Pierre-
Yves Strub. 2018. Computer-Aided Proofs for Multiparty Computation with
Active Security. In IEEE Computer Security Foundations Symposium, CSF 2018.
[45] Viet Tung Hoang, Jonathan Katz, and Alex J. Malozemoff. 2015. Automated
Analysis and Synthesis of Authenticated Encryption Schemes. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications Security.
ACM, 84–95.
[46] Susan Hohenberger and Satyanarayana Vusirikala. 2019. Are These Pairing
Elements Correct? Automated Verification and Applications. In ACM Conference
on Computer and Communications Security.
[47] Susan Hohenberger, Satyanarayana Vusirikala, and Brent Waters. 2020. PPE Cir-
cuits: Formal Definition to Software Automation. In ACM Conference on Computer
and Communications Security.
[48] Tibor Jager. 2015. Verifiable Random Functions from Weaker Assumptions. In
Theory of Cryptography - 12th Theory of Cryptography Conference, TCC. Springer,
121–143.
[49] Duc-Phong Le and Alban Gabillon. 2007. A New Multisignature Scheme based
on Strong Diffie-Hellman Assumption. In Conference on security in network ar-
chitecture and information systems.
[50] Anna Lysyanskaya. 2002. Unique Signatures and Verifiable Random Functions
from the DH-DDH Separation. In Advances in Cryptology - CRYPTO. Springer,
597–612.
[51] Alex J. Malozemoff, Jonathan Katz, and Matthew D. Green. 2014. Automated Anal-
ysis and Synthesis of Block-Cipher Modes of Operation. In IEEE 27th Computer
Security Foundations Symposium. IEEE Computer Society, 140–152.
[52] Roberto Metere and Changyu Dong. 2017. Automated Cryptographic Analysis
of the Pedersen Commitment Scheme. In MMM-ACNS 2017.
[53] David Naccache. 2005. Secure and Practical Identity-Based Encryption. IACR
Cryptology ePrint Archive (2005). http://eprint.iacr.org/2005/369
[54] Yannis Rouselakis and Brent Waters. 2013. Practical constructions and new proof
methods for large universe attribute-based encryption. In 2013 ACM SIGSAC
Conference on Computer and Communications Security, CCS. ACM, 463–474.
[55] Eftychios Theodorakis and John C. Mitchell. 2018. Semantic Security Invariance
under Variant Computational Assumptions.
IACR Cryptol. ePrint Arch. 2018
(2018), 51. http://eprint.iacr.org/2018/051
[56] Brent Waters. 2005. Efficient Identity-Based Encryption Without Random Oracles.
[57] Brent Waters. 2009. Dual System Encryption: Realizing Fully Secure IBE and
In EUROCRYPT. Springer, 114–127.
HIBE under Simple Assumptions. In CRYPTO. Springer, 619–636.
A PRELIMINARIES
We define the algebraic setting and notation used throughout this
work.
A.1 Pairings
Let G1, G2 and GT be groups of prime order p. A map e : G1×G2 →
GT is an admissible pairing (also called a bilinear map) if it satisfies
the following three properties:
(1) Bilinearity: for all д1 ∈ G1, д2 ∈ G2, and a, b ∈ Zp, it holds
(2) Non-degeneracy: if д1 and д2 are generators of G1 and G2,
that e (дa, hb ) = e (дb , ha ) = e (д, h)ab.
resp., then e (д1, д2) is a generator of GT .
д1 ∈ G1 and д2 ∈ G2, computes e (д1, д2).
(3) Efficiency: there exists an efficient method that given any
A pairing generator PGen is an algorithm that on input a se-
curity parameter 1λ, outputs the parameters for a pairing group
(p, д1, д2, дT , G1, G2, GT , e) such that G1, G2 and GT are groups of
prime order p ∈ Θ(2λ ) where д1 generates G1, д2 generates G2 and
e : G1 × G2 → GT is an admissible pairing. The above pairing is
called an asymmetric or Type-III pairing. In Type-II pairings, there
exists an efficient isomorphism ψ from G1 to G2 or such an iso-
morphism ϕ from G2 to G1 but not both. In symmetric or Type-I
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2751pairings, efficient isomorphisms ψ and ϕ both exist, and thus we
can consider it as though G1 = G2. In this work, we support any of
these types of pairings. We will typically refer to Type III pairings
in our text, since they are general and typically the most efficient
choice for implementation, but our software tool in Section 4 can
handle any type. We represent identity elements of the groups
G1, G2, GT by I1, I2 and IT respectively.
Given pairing parameters (p, д1,д2, дT ,G1, G2,GT , e), we extend
prior definitions [43, 46] to define a pairing product equation over
variables Z , {Xi}m
i =1 e (Ai , Yi ) ·(cid:81)m
(cid:81)n
i =1 as an equation of the form
i =1 e (Xi , Bi ) ·(cid:81)m
j=1 e (Xi , Yj )γi j
= 1, where Ai , Xi ∈ G1, Bi , Yi ∈ G2, Z ∈ GT , γij ∈ Zp. (This
is the traditional definition.)
i =1, {Yi}n
i =1
γi
i =1 X
i
γi
i =1 Y
i
= 1, where A, Xi ∈ G1, γi ∈ Zp.
= 1, where A, Yi ∈ G2, γi ∈ Zp.
• Z ·(cid:81)n
• A ·(cid:81)m
• A ·(cid:81)n
The second two PPE formats do not enable any additional func-
tionality over the traditional definition. However, they will later
help obtain more efficient identity tests. We sometimes rearrange
the terms of a PPE to improve readability. We observe that under
the above definition, one can employ a PPE to perform an identity
test in groups G1, G2 or GT , either for a single element or according
to any of the above combinations of products and exponents.
A.2 Notation
We let [1, n] be shorthand for the set {1, . . . , n}. We use v to denote
a vector and vi to denote the i-th element. For a vector v of length
n and a subset U ⊆ [1, n], we denote vU as the set of elements vi
for i = 1, . . . , n where i ∈ U . Similarly vU denotes the subset of
elements vi for i = 1, . . . , n where i (cid:60) U . Let us denote the set of
pairing group identifiers {1, 2,T} by I. Let x, y be polynomials over
variables in (u1, . . . , un ), then by x ≡ y, we mean that x and y are
equivalent polynomials.
B SHORTHAND NOTATIONS FOR CIRCUITS
For completeness, we include the shorthand notations for PPE
circuits due to [47] which we also use in our presentation.
• MakeCircuit(G, m, α , P ): Given group structure G, number
of inputs m, group identifiers α, and a PPE P, the function
outputs a PPE circuit C = (G, m, α , N , Gates, out, GateType,
A, B), where N = 1, Gates = {m + 1}, out = m + 1,
GateType(m + 1) = (PPE, P ), A = ∅, B = ∅.
• Cacc: We use the notation Cacc to denote the circuit
MakeCircuit(G, m, α , P ), where P is an always accepting
PPE (for example, д1 = д1).
• Shift(C, k ) : Given circuit C = (G, m, α , N , Gates, out,
GateType, A, B) and integer k ≥ 1, function Shift(C, k ) out-
puts a circuit C′ obtained by shifting the gate names Gates by
an offset k i.e., C′ = (G, m, α , N , Gates′, out′, GateType′, A′,
B′), where Gates′ = {д + k : д ∈ Gates}, out′ = out + k,
GateType′(д + k ) = GateType(д), A′(д + k ) = A(д) and
B′(д + k ) = B(д), whenever A(д), B(д) are defined. Note:
Shift(C, k ) still has {1, 2,· · · , m} as the input wires.
• C1 OP C2 (where OP ∈ {AND, OR}): Given circuits C1 =
(G, m, α , N1, Gates1, out1, GateType1, A1, B1) and C2 = (G,
2, out′
m, α , N2, Gates2, out2, GateType2, A2, B2), let k be the small-
est integer not in Gates1. Let C′
2 = Shift(C2, k ) = (G, m, α ,
N2, Gates′
2, A′
2, B′
2). The circuit C1 OP C2
is given by (G, m, α , N1 +N2 +1, Gates, out, GateType, A, B),
where out is the smallest integer not in Gates1 ∪ Gates′
2, the
set Gates = Gates1 ∪ Gates′
2, GateType′
GateType(д) =
A(д) =
B(д) =
2 ∪ {out}, the functions
if д ∈ Gates1
if д ∈ Gates′
2
if д = out
2(д)
if д ∈ Gates1
if д ∈ Gates′
2
if д = out
if д ∈ Gates1
if д ∈ Gates′
2
if д = out
A′
2 (д)
out1
GateType′
OP
GateType1(д)
A1 (д)
B1 (д)
GateType(д)
A(д)
B′
2 (д)
out′
2
NOT
• NOT C : Given circuit C = (G, m, α , N , Gates, out, GateType, A, B),
we let NOT C denote the circuit (G, m, α , N +1, Gates′, out′,
GateType′, A′, B′), where out′ is the smallest integer not in
Gates, the set Gates′ = Gates ∪ {out′}, functions
if д ∈ Gates
if д = out′
GateType′
(д) =
A(д) =
out
and B′ is the same as B.
if д ∈ Gates
if д = out′
C PROOFS OF CORRECTNESS
C.1 Proof of Correctness for Rule 1
Proof. We observe that every PPE challenge for Π is also a
challenge for Π′, as they all share the same group structure, the
number of elements of m, and the group indicator vector α. Consider
any testing circuit C′ for Π′. We now argue by contradiction that
if C ∧ C′ is not a testing circuit for Π, then C′ cannot be a testing
circuit for Π′. Since C ∧ C′ is not testing set for Π, then either:
• Case 1: There exists a YES challenge R for Π such that C ∧C′
is not satisfied, or
• Case 2: There exists a NO challenge R for Π such that C ∧C′
is satisfied.
We now analyze each of these cases.
Case 1: We know that C∧C′ is not satisfied by the YES challenge
R. By the definition of being a YES challenge, there exists a variable
assignment u s.t. Ri = д
for all i. We take this in two
fi (u)/hi (u)
αi
subcases.
Case 1(a): Suppose that R satisfies PPE circuit C but not the
circuit C′. We know that R is also a YES challenge for Π′ (it can
use the same settings u for the variables), but for which C′ is not
satisfied. This contradicts the starting assumption that C′ was a
testing circuit for Π′.
Case 1(b): Suppose that R does not satisfy the PPE circuit C. As
all the elements in R are well-formed, we know that hj (u) (cid:44) 0 for
all j. As a result, u satisfies eqs. (3) and (4) iff u satisfies eqs. (1)
and (2). We know that eqs. (3) and (4) are satisfied for all the variable
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2752assignments. This means, the variable assignment u and thereby
the PPE challenge R satisfies eqs. (1) and (2). This means R does
satisfy the circuit C.
Case 2: Here R is a NO challenge for Π but C ∧C′ is satisfied. By
Definition 2.2 of a NO challenge for Π, there exists an assignment
to uInTrusted such that for all i ∈ Trusted, Ri = д
. R is
fi (u)/hi (u)
αi
either a NO challenge or an INVALID challenge for Π′. We argue
that R is also a NO challenge for Π′, by showing that uInTrusted also
satisfies Rk = д
fk (u)/hk (u)
αk
This follows from the fact that PPE C is satisfied by this challenge
with respect to an equivalent polynomial for fk /hk ≡ (cid:80)|sT |
and that C explicitly tests that Rk is computed this way, possibly
j=1 aj ·
sT [j] and hk (cid:44) 0. Now since R is NO challenge for Π′, it remains
to see how it performs with respect to the circuit C′. However,
since C ∧ C′ is satisfied by this challenge R, then C′ is satisfied as
well. This contradicts the original assumption that C′ was a testing
circuit for Π′.
.
C.2 Proof of Correctness for Rule 2
Proof. Consider any PPE challenge R = (R1, R2,· · · Rm ) for
problem Π, and any testing circuits C′, C′′ for Π′, Π′′ respectively.
We first observe that R is also a valid PPE challenge for Π′ and Π′′.
This is because both share the same group structure, the number
of elements m, and the group indicator vector α. We prove that if R
is a YES challenge for Π, then it satisfies circuit Z defined above,
and if R is a NO challenge for Π, it does not satisfy the circuit Z.
We organize the proof into four cases.
Case 1 (R is a YES challenge for Π & IsIdentity unsatisfied):
In this case, by definition, there exists an assignment of variables
for all ℓ ∈ [m]. As each Rℓ is a well
v such that Rℓ = д
fℓ (v)/hℓ (v)
αℓ
defined group element, this means hℓ (v) (cid:44) 0. This means v satis-
fies eqs. (5) and (6) iff v satisfies eqs. (7) and (8). We choose (a, b, c)
such that eqs. (7) and (8) are satisfied for all variable assignments.
for all ℓ ∈
Therefore, v satisfies eqs. (5) and (6). As Rℓ = д
fℓ (v)/hℓ (v)
αℓ
[m], the PPE challenge R also satsifies the circuit C. We also observe
that R is a YES challenge for Π′. This is because Π and Π′ have the
same set of polynomials { fj /hj}j∈[m] and only differ in the Trusted
set. As a result, R satisfies the circuit (NOT IsIdentity) ∧ C ∧ C′,