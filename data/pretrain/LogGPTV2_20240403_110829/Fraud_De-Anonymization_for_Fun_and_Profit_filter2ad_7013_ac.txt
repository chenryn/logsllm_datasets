= 0
for i ∈ [m] (5)
We can also write (5) as the m × m non-homogeneous system of
linear equations:
[Pi (1 − qi )]ri − qi
Pdrd = qi
for i ∈ [m]
(6)
(cid:88)
d(cid:44)i
(cid:42)(cid:44)1 − m(cid:88)
i =1
(cid:43)(cid:45)
Pi
To solve the system of equations (6), we introduce the following
lemma, whose proof is in Appendix A.
(cid:88)
Lemma 4.2. The system of linear equations
[Pi (1 − qi )]ri − qi
(cid:42)(cid:44)1 − m(cid:88)
has solutions given by rt = qt (1−(cid:80)m
Pt (1−(cid:80)m
Pdrd = qi
i =1 Pi )
i =1 qi )
d(cid:44)i
i =1
This enables us to write c as:
i =1
m(cid:88)
Pi (ri − 1) + 1
(1 −(cid:80)m
(cid:33)
(cid:32)
m(cid:88)
(1 −(cid:80)m
i =1 Pi ) + (1 −(cid:80)m
i =1 qi (1 −(cid:80)m
(cid:80)m
1 −(cid:80)m
1 −(cid:80)m
1 −(cid:80)m
i =1 Pi )
i =1 qi )
i =1 qi
− 1
i =1 Pi
i =1 qi
qi
Pi
i =1
Pi
c =
=
=
=
(cid:43)(cid:45)
Pi
for i ∈ [m]
+ 1
i =1 qi )(1 −(cid:80)m
i =1 Pi )
Thus, the value of r at which ln L(FW, r) reaches its maximum
must also maximize the function L(FW, r) defined as:
(cid:18) pk
c
(cid:19)(cid:43)(cid:47)(cid:45)
L(FW, r) =
=
=
qi ln(ri ) − ln(c)
(cid:32) 1 −(cid:80)m
1 −(cid:80)m
−(cid:42)(cid:44)1 − m(cid:88)
i =1
qi
(cid:33)
(cid:43)(cid:45) ln
i =1 Pi
i =1 qi
qi ln(ri ) − ln
(cid:33)
(cid:32)
qi ln
qi
Pi
(cid:33)
(cid:32) 1 −(cid:80)m
1 −(cid:80)m
i =1 Pi
i =1 qi
□
i =1
m(cid:88)
m(cid:88)
m(cid:88)
i =1
i =1
In Section 11.2 we instantiate UODA for two features that define
the Ω sets.
5 CO-OWNERSHIP PREDICTOR
We develop a co-ownership predictor function cowPred : U ×U (cid:55)→
{0, 1} that determines if two user accounts are controlled by the
same fraud worker. Specifically, given two user accounts ui and
uj, cowPred (ui , uj ) = 1 if ui and uj are controlled by the same
fraudster. cowPred uses several features, that model similarity of
behaviors between the input accounts. One such feature is extracted
by DeepCluster, a semi supervised learning approach that we pro-
pose to cluster user accounts.
The first-order necessary conditions are:
Algorithm 1: DeepCluster identifies communities of fraudulent
accounts who targeted input subjects s1, .., sk, based on the simi-
larity of their DeepWalk features extracted from the union fraud
graph of the subjects.
Input
:CoR[1 . . . k]; # Co-review graphs of reviewers of
subjects s1, . . . , sk;
DW Params; # Best DeepWalk parameters;
U FG; # Union Fraud Graph over CoR[];
Output:clusters[1 . . . k][ ]; # Best clusters for s1, . . . , sk
1 U Features[ ][ ] = U FG.DW Features (DW Params)
2 for i = 1 to k do
3
4
5
6 end
7 return clusters[ ][ ]
candidates[ ][ ] = CoR[i].V ⋉ U Features
candidates[ ][ ] = FilterHonest (candidates[ ][ ])
clusters[i] = дetBestClusters (candidates)
5.1 DeepCluster
DeepCluster leverages DeepWalk features [54] extracted from co-
review graphs. Given a subject s and its reviewer set Us ⊂ U (i.e.,
accounts who reviewed it), we define its co-review graph to be a
weighted graph Gs = (Vs , Es ), where Vs = Us and (ui , uj ) ∈ Es iff
users ui , uj have reviewed the same w (ui , uj ) subjects other than s
itself. Further, given a set of co-review graphs G = {G1, . . . , Gk}, Gi =
(Vi , Ei ), we define their union fraud graph to be the union of all
the individual co-review graphs, viz., V = ∪Vi and E = ∪Ei for
1 ≤ i ≤ m.
DeepCluster, see Algorithm 1, clusters co-review graph nodes
(user accounts) based on their DeepWalk features [54], that go be-
yond their 1-hop neighbors and are based on random walks in the
union fraud graph. DeepCluster precomputes the DeepWalk fea-
tures of each account in the union fraud graph (line 1). We discuss
the choice of DeepWalk parameters in § 11. For each subject si,
i ∈ [k], DeepCluster extracts all its users’ features (line 3), and uses
any fraud account detection algorithm, e.g. [12, 57] to filter out the
subject’s honest reviewers and their accounts (line 4). DeepClus-
ter then uses a clustering algorithm (e.g., K-means) to group the
fraudulent candidate accounts of subject si, i ∈ [k] (line 5).
5.2 Features
DeepCluster returns k cluster sets, one set for each of the k subjects
si (line 7). We use these clusters to extract cowPred’s first feature,
Co-cluster weight: The number of times that ui and uj have ap-
peared in the same cluster identified by DeepCluster. We further
introduce several other features:
• Co-review weight. The co-review weight of two accounts is
computed over their commonly reviewed subjects. Specifically, if
Sk is the set of subjects reviewed by uk, we define the co-review
weight of ui and uj as |Si ∩ Sj|.
• Inter-review times. We define the date difference attribute for
a subject sk ∈ Si ∩ Sj , i (cid:44) j as ∆T ij (sk ) = |dt (ui , sk ) − dt (uj , sk )|,
where dt (u, s) denotes the date on which user u performed an
activity on subject s. Let the multiset Lij = {∆T ij (sk )}|Si ∩ Sj |
. Lij
is a multiset, thus can contain duplicate elements. We compute the
k =1
k =1
minimum, mean, median, maximum, mode, and standard deviation
over Lij, and obtain a vector of review-time related features in R6.
Further, we define the unique lockstep feature, uL ∈ N, to be the
number of unique ways (with respect to review-posting time) in
which two accounts were used across subjects, i.e., the number of
unique elements in the multiset Lij.
• Rating difference. We define the rating difference predic-
tor as ∆Rij (sk ) = |R(ui , sk ) − R(uj , sk )|, where R(u, s) is the rat-
ing assigned by user u to subject s. We use the multiset LRij =
{∆Rij (sk )}|Si ∩ Sj |
to derive minimum, mean, median, maximum,
mode, and standard deviation for this feature over all the subjects in
the intersection and obtain a vector of rating features in R6. Further,
we also extract its number of unique elements uR ∈ N.
Intuition. Accounts with high co-review and co-cluster weights
are more likely to be controlled by the same fraudster. They have
not only reviewed many subjects in common, but they also have
similar neighbors (as identified by DeepWalk and DeepCluster) in
the individual co-review graphs of those subjects.
For the inter-review features, the statistics computed over Lij
leverage the observation that fraudsters synchronize the activities
of the accounts that they control, e.g., in a “lockstep” behavior [18,
67, 71]. Since fraudsters need to meet tight deadlines [64], we expect
∆T ij (sk ) to be lower for user accounts controlled by the same
worker (fake review “burstiness” assumption [17, 27, 31, 32, 44, 47]).
Further, we expect the unique lockstep uL to be lower for pair of
accounts governed by the same fraudster.
For the rating difference features, we expect uR to be lower for
pair of accounts controlled by the same worker, which would imply
that both accounts tend to post the same rating for their common
subjects. In Section 11.4 we use regularized logistic regression to
provide further insights into the impact of these features.
We train the co-ownership predictor on the 16 features above.
In Section 6 we use cowPred to devise a fraud de-anonymization
algorithm, while in Section 7 we use it to propose a pseudonymous
fraudster discovery algorithm.
6 DDA: DISCRIMINATIVE
DE-ANONYMIZATION
We introduce a discriminative de-anonymization solution (DDA), a
classifier that approximates the function F DA: U ∗ \ ∪f
l =1Ul (cid:55)→ W ∗
defined in Section 3. We exploit the intuition that in DeepCluster,
accounts in a union fraud graph that are controlled by the same
fraudster, form a densely connected subgraph, or cluster. Knowledge
that some accounts in such a cluster are controlled by a fraud
worker, would allow one to attribute the other accounts in that
cluster, to the same worker. However, our experiments revealed that
clusters often contain accounts controlled by different fraudsters,
as fraudsters tend to collaborate in search rank fraud jobs.
To disambiguate this fraud attribution problem, we leverage the
co-ownership predictor, of Section 5. Specifically, DDA analyzes
the clusters returned by DeepCluster (see Section 5.1). Some of
the clusters may consist of both un-attributed accounts and user
accounts known to be controlled by a fraud worker profile in W ∗.
DDA separately processes each un-attributed account u in such
clusters. First, it creates links (u, uw ), for each account uw con-
trolled by a worker w in u’s cluster. Then, it uses cowPred (u, uw )
:W ∗[ ][ ]; # seed worker profiles
Algorithm 2: Detego system iteratively attributes new fraud to
known fraudsters and discovers new fraudsters.
Input
Output:W ∗[ ][ ]; # extended worker profiles
1 S = W ∗.дetProducts (); f = W ∗.size ();
2 while (S.notEmpty()) do
3
4
5
6
7 end
8 return
U = S.дetReviewerAccounts ();
= F DA.(U , S,W ∗);
W ∗[f + 1, ..f + k] = PF D(UN );
S = W ∗.дetFreshProducts (); f = W ∗.size ();
to determine if u and uw share the same owner. Note that u may
appear in multiple clusters, computed by DeepCluster for multiple
subjects. DDA extracts |W ∗| features for u: for each fraudster profile
in W ∗, the feature consists of the number of nodes controlled by
that fraudster, to whom u has a link according to cowPred (u, uw ).
DDA uses these features to train a supervised learning algorithm.
7 PFD: PSEUDONYMOUS FRAUDSTER
DISCOVERY
Following the fraud attribution process (e.g., UODA or DDA), we
are left with suspected fraudulent user accounts that have not been
attributed to any of the known fraudsters. We introduce now the
pseudonymous fraudster discovery (PFD) algorithm that groups
these un-attributed accounts into communities likely controlled by
the same, albeit not yet discovered, fraudster.
PFD uses the co-ownership predictor of Section 5 to build a
co-ownership graph Gc = (Vc , Ec ) over the unknown accounts.
Nodes Vc are fraudster-controlled but un-attributed user accounts,
while an edge in Ec exists between two nodes if the accounts are
controlled by the same worker as predicted by cowPred. PFD then
recursively applies a Karger [38], weighted min-cut inspired al-
gorithm to partition the co-ownership graph into two subgraphs.
These subgraphs are more densely connected than the original
graph and connected through links of minimal total weight. We use
triangle density ρ (G) = t (V )
for an un-weighted graph G = (V , E),
|V |
3 )
where t (V ) is the number of triangles formed by the edges in E.
8 PUTTING IT ALL TOGETHER
We introduce Detego, a fraud attribution and fraudster discovery
system (see Algorithm 2). Detego takes as input a seed set W ∗ of
f known fraudster profiles, which include user accounts known
to be controlled by each fraudster. Detego expands this seed data,
iteratively attributing more accounts to the known fraudsters, and
identifying new fraudsters.
Detego identifies the subjects S reviewed by the accounts con-
trolled by the seed fraudsters (Algorithm 2, line 1), then retrieves
all the user accounts U who reviewed these subjects (line 3). The
accounts in U include accounts controlled by the f fraudster pro-
files in W ∗, as well as accounts controlled by other, not yet iden-