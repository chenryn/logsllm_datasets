much better user experience since it requires significantly less
user interaction. More importantly, OTAuth scheme allows app
2 National Computer Network Emergency Response Technical
the national CERT of China and
Team/Coordination Center of China,
responsible for handling severe cyber-security incidents [12].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
535
and the Security Mode Control procedure (SMC procedure) for
authentication. The instances of such procedures may vary in
different networks [17]–[19]. After this, the user’s smartphone
and the MNO Core Network System have established a secure
connection based on a shared root key [20].
the MNO’s server can generate a token that
The OTAuth procedure begins right after the secure con-
nection is established. First, the app on user’s smartphone
sends app-specific data to the MNO server through cellular
network. Since MNO has the capability of recognizing phone
number,
is
associated with this phone number, and transfer it back to the
user’s smartphone. Then, to perform authentication, the user’s
smartphone needs to send this token to the app server. The app
server will forward this token to the MNO server in order to
get the phone number related with this token. In this way, the
app server can know the phone number of user’s smartphone,
and decide whether to allow its login or sign-up request.
B. OTAuth Scheme Details
Figure 3 shows the protocol flow of the OTAuth scheme
step-by-step. The whole process can be divided into three
phases:
(1) Initialize. In this phase, the app first detects whether the
runtime environment supports OTAuth. If this statement is
true, it then tries to obtain the masked local phone number
(not the full local phone number), in order to display it on the
user interface (see Figure 1).
Specifically, the user starts the OTAuth flow by tapping on
the login (or sign-up) button (step 1.1), which actually sends an
OTAuth request to the app. After receiving the user’s request,
the app calls a specific API of the MNO SDK (e.g, the API
loginAuth in the SDK of China Mobile), together with appId
and appKey as the parameters (step 1.2). Here, both appId and
appKey are exclusive to a specific app, which is pre-assigned to
Fig. 2: Key design of the OTAuth Scheme.
developers to pay less fee for user authentication [4], [15],
[16], which provides a strong motivation for developers to
integrate this service.
Key design. The most unique part in this OTAuth scheme
is that the local phone number is obtained neither through
user input nor by requiring any system permissions (i.e.,
READ PHONE STATE or READ PHONE NUMBERS). In-
the local phone number here is obtained based on
stead,
the MNO’s capability of recognizing phone number. The
only requirement for this OTAuth scheme is (1) the app has
introduced MNO’s service, and (2) the smartphone has access
to the cellular network.
Figure 2 presents the high-level design of OTAuth services.
Before the OTAuth procedure actually starts, the user’s smart-
phone needs to interact with the MNO Core Network System
to perform the Key Agreement procedure (AKA procedure)
Fig. 3: The protocol flow of OTAuth based on MNO’s SDK.
536
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
User Smartphone with Mobile AppMNO Core  Network SystemShared Root Key (Pre-stored in  the SIM Card) Shared Root Key Secure Connection EstablishedAKA Procedure ①App-Specific Data App ServerToken Generation SMC Procedure ③Token ②Token ④Token ⑤PhoneNum ⑥Auth Result Temp  Equipment IDUserSmartphoneApp MNO SDKApp ServerMNO ServerRequest token2.1 Give authorizationappId, appKey1.2 Ask for initialization1.3 Request Masked PhoneNumappId, appKey, appPkgSig1.4 Responsemasked phoneNum, operatorType1.5 Ask for authorizationInterface with masked phoneNum2.2 Request TokenappId, appKey, appPkgSig2.3 Responsetoken2.4 Responsetoken3.1 Ask for login/signuptoken3.2 Ask for PhoneNumappId, token3.3 ResponsephoneNumapproval/rejection to login/signup3.4 Response1.1 Request login/signupInitialize Obtain phone number TABLE I: Cellular network based mobile OTAuth services worldwide (ranked by MNO’s total number of subscriptions)
Product / Service∗
Number Identification [21]
unPassword Identification [22]
Number Identification [23]
Operator Attribute Service [24]
Mobile Connect [25]
Mobile Connect [1]
ZenKey [26]
Fast Login [27]
Mobile Connect [28]
MNO
China Mobile
China Telecom
China Unicom
Vodafone, O2, Three
Am´erica M´ovil
Telef´onica Spain
AT&T, T-Mobile, Verizon
Turkcell
Mobilink
Country / Region
Mainland China
Mainland China
Mainland China
UK
Mexico
Spain
America
Turkey
Pakistan
PASS [29], [30]
SKT, KT, LG Uplus
South Korea
T-Authorization [31]
Ipification-HK [32]
Ipification-Cambodia [33]
SKT
3 Hong Kong
Metfone
South Korea
Hongkong China
Cambodia
Business Scenario
Login, Registration
Login, Registration
Login, Registration
Identity verification
Login, Registration
Login, Registration
Login, Registration
Login
Login, Registration
Payment
Identity verification
Login, Registration
Login, Registration
Login, Registration
Money transfer / Payment verification
∗ This table demonstrates the prevalence of mobile OTAuth services worldwide but does not imply all of them are vulnerable. In our research, we only
confirmed the first three services [21]–[23] in mainland China are vulnerable for the SIMULATION attack. As of Mar 2022, we have got confirmation
from the ZenKey experts, who told us that ZenKey for AT&T is not subject to this vulnerability as its authentication flow is different.
app developers by the MNO SDK vendor. The MNO SDK then
collects the fingerprint of the signing certificate [34] inside its
hosted app (i.e., appPkgSig), through the API getPackageInfo
and sends it to the MNO server, together with the appId and
appKey (step 1.3).
Since MNO has the capability of recognizing phone number,
the MNO server already knows the phone number (i.e., pho-
neNum) after receiving the request data. Thus, after confirming
that the appId, appKey and appPkgSig are legitimate, the MNO
server returns the user’s masked phoneNum to the MNO SDK,
together with the operatorType (e.g., CM for China Mobile,
CU for China Unicom, CT for China Telecom) to facilitate
the app’s display (step 1.4). Lastly, the MNO SDK pulls up
an interface (like the ones shown in Figure 1) and asks for
user’s authorization (step 1.5). Here, the authorization refers
to whether the user allows the app to obtain the phoneNum.
(2) Request token. In this phase,
the app client obtains
a token, which is associated with the appId, appKey and
the phoneNum. With this token,
the app server can learn
the phoneNum in the next phase. If the user approves the
obtainment of local phone number (step 2.1), MNO’s SDK
will send the appId, appKey and appPkgSig to the MNO server
through cellular network again, in request for the token (step
2.2). After the appId, appKey and appPkgSig get verified, the
MNO server will generate a token and send it back in response
(step 2.3 and 2.4).
(3) Obtain phone number. In this phase, the app server will
obtain the user’s phoneNum and decide whether to approve
the user’s login or sign-up request based on this. First, the
app client will send the token to the app server in request
for login or sign-up (step 3.1). After receiving the token,
the app server will send it
to MNO server in exchange
for the phoneNum (step 3.2). After confirming that the app
server’s IP is legitimate (i.e., has been filed) and that the token
and appId are corresponding, the MNO server will respond
the phoneNum to the app server (step 3.3). Based on the
phoneNum, the app server can decide whether to approve or
reject the app client’s request (step 3.4).
C. OTAuth Ecosystem in Mobile Apps
Given the huge convenience of OTAuth schemes, many
popular mobile apps have fully integrated this service. Some
of them even set OTAuth login as the default login option.
Based on a recent report from China Mobile (the largest MNO
in China) [35], as of October 2021, its OTAuth service has
been called more than 1.69 trillion times.
There are two ways for an app to introduce MNO’s service.
The app can either integrate the SDK developed by MNO,
or integrate a third-party SDK that includes functions of all
MNOs’ SDKs. In mainland China, there are three MNOs:
China Mobile, China Unicom, and China Telecom. Note that
SDKs of all the three MNOs support authenticating through an
arbitrary operator. For example, an app could utilize the SDK
developed by China Mobile to seamlessly supports OTAuth
services of the other two MNOs (e.g., China Unicom) as well.
Other than the official SDKs made by MNOs, there are
various third-party SDKs that support OTAuth as well. These
SDKs typically integrate MNO’s SDKs and provide easier-
to-use APIs for app developers to integrate. Such SDKs also
include other authentication functions as a syndicator, such as
authentication based on SMS One-Time-Password.
D. Scope of Our Study
In this paper, we focus on the OTAuth scheme. Particularly,
as instances of this authentication scheme, our research looked
into the OTAuth services provided by all the three MNOs in
mainland China. Table I presents a list of OTAuth services
we have found in different countries and regions. While there
are similar OTAuth services in other countries and regions,
they are not
included in this study, due to the following
reasons. Firstly, due to locality constrain, it is difficult for us to
obtain the real SIM cards and perform the testing for OTAuth
services in other regions. Secondly, unlike the OTAuth services
deployed in mainland China, the OTAuth services provided in
some other countries have not yet been widely deployed by
app developers [3]. We envisioned our analysis and findings
could bring insights for securing similar OTAuth services in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
537
other countries and regions. For example, our preliminary
investigation showed that the Fast Login [27] developed by
Turkcell (the largest MNO in Turkey) is similar to the OTAuth
schemes of three MNOs in mainland China.
In addition, previous works [36] have discussed related
issues under quite different assumptions (e.g., assuming the
attacker has physical access to the victim’s SIM card and
can perform side-channel power analysis) and these problems
do not belong to the scope of the SIMULATION attack we
proposed.
III. EXPLOITING OTAUTH SCHEMES
In this section, we show how to perform a SIMULATION
attack by exploiting a critical design flaw in such OTAuth
schemes. We first illustrate our attack model. Then, we present
the core idea of the attack as well as its implementation details.
A. Attack Model
We assume the adversary can perform the attack under
either of the following two scenarios (shown in Figure 5).
In the first scenario, we assume the attacker can install an
innocent looking malicious app to the victim device. Here, the
malicious app does not need to require any sensitive permis-
sions other than the INTERNET permission. Note that since
the INTERNET permission is widely used by a large portion
of normal apps for app-server communication nowadays, this
permission can be easily obtained from the victim user. This
assumption is aligned with many previous works that perform
attacks on mobile platforms [7], [8]. In the second scenario, we
assume the attacker is within the same network as the victim’s
device. This typically happens when the adversary connects
to the hotspot shared by the victim’s device. We consider this
scenario is more likely to happen in an attack that targets a
specific individual. For example, the adversary is a colleague
of the target victim in the same company, and the adversary
aims at logging in to the victim’s account and stealing sensitive
information.
The key point here for the above two scenarios is that we
assume the adversary can perform her actions under the same
cellular network IP address as the victim, for communicating
with the MNO server (see section III-D for more details).
In the meantime, we assume that the victim is under the
legitimate usage scenario of OTAuth provided by MNOs.
Specifically, there is a SIM card on the victim’s smartphone
and the Mobile Data switch has been turned on. Note that
since the OTAuth scheme only takes the cellar network as the
authentication channel, our attack can succeed regardless of
whether the victim phone’s WLAN switch has been turned
on.
B. Attack Overview
Our research identified that, due to a fundamental design
flaw in the OTAuth scheme, the MNO server cannot effectively
validate whether the authentication request is sent from a
legitimate client or a malicious one. Therefore, under certain
scenarios, an attacker can easily obtain the authentication
token that is associated with the victim’s phone number. With
this token, the attacker can log in to the victim’s account on
the attacker’s own smartphone.
Root cause. The root cause of the flaw is the app’s incapa-
bility of securely using mobile device identity. The operating
system does not participate in the design architecture of
OTAuth. Such a flawed design makes the MNO server unable
to distinguish different apps on the same device, which makes
the SIMULATION attack possible.
As mentioned earlier in Section II-B,
the MNO server
verifies the app client via three factors, namely, the appId,
appKey and appPkgSig. Unfortunately, all such information
are not confidential and can be easily obtained by an attacker.
there is no way to
From the MNO server’s perspective,
effectively identify whether the one requesting token is indeed
a legitimate one. More specifically, if the attacker makes the
authentication request under the same network environment
(i.e., via a malicious app on the victim device, or connecting
to the victim’s hotspot), the MNO server will always return
the valid token since the authentication factors it received are
indeed correct.
Impacts. Exploiting this design flaw, the attacker can bypass
the app’s authentication and log in to the victim’s account.
In other words,
the attacker can remotely log in to the
victim’s account through an app client (on her own device)
and continue to perform malicious actions. When the victim’s
phone number is not bound to any account, the attacker can
register new accounts on behalf of the victim. In addition, the
attacker can also easily obtain the victim’s phone number (e.g.,
log in a specific app that displays the phone number on the
app’s user-profile page).
C. Attack Details
We divide the whole attack process into three phases, as de-
scribed in Figure 4. Here, the appId, appKey and appP kgSig
are specific to the affected victim app; phoneN umA and
phoneN umV refer to the attacker’s local phone number and
the victim’s local phone number, respectively; tokenA and
tokenV refer to the valid token distributed to the attacker and
the victim by the MNO server, respectively.
(1) Token stealing phase. In this phase, the attacker launches
the malicious app to obtain a tokenV . Specifically, the attacker
“simulates” the behavior of the MNO SDK and sends the
appId, appKey, and appP kgSig to the MNO server (step
1.1 and 1.3). As mentioned earlier, these three pieces of data
are not confidential and can be obtained through various ways
in advance. For example, many app developers hard-code the
appId and appKey in the source code of their distributed
apps, which can be trivially recovered via reverse engineering.
The appP kgSig can be obtained by Keytool [37] when the
app (i.e., the APK file) is given. In addition, the attacker can
also intercept the network traffic of the legitimate OTAuth
scheme (e.g., on her own device) and obtain these information.
(2) Legitimate initialization phase. In this phase, the attacker
performs the normal OTAuth process of the victim app on her
own smartphone (step 2.1 to 2.7). This is because the attacker
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:34 UTC from IEEE Xplore.  Restrictions apply. 
538
Fig. 4: The attack model against OTAuth scheme.
needs to launch a legitimate app client to communicate with
the victim app’s back-end server for her (future) unautho-
rized login. Note that, since the operations in this stage are
performed entirely on the attacker’s smartphone, the attacker
has complete control over the entire process. Therefore, the
attacker has the ability to initialize the authentication, and in
the meantime, prevent the app client from sending tokenA
to the app’s back-end server. More specifically, the attacker
can use the hooking technique [38] to intercept and block the
legitimate authentication process. The tokenA will be further
replaced by tokenV for the upcoming authentication scheme.
(3) Token replacement phase.
In this phase, the attacker
bypasses the authentication of the app’s backend server by re-
placing the tokenA with the previously obtained tokenV (step
3.1 and 3.2). Since the tokenV is a valid token associated with
the appId (exclusive to victim app) and the phoneN umV , the
app’s back-end server will get the phoneN umV when it tries
to exchange the received tokenV for a phone number (step
3.3 and 3.4). In this case, the app’s backend server mistakenly
treats the attacker as the holder of the phoneN umV and
approves the login (sign-up) request on the attacker’s device.
D. Attack Implementation
Attack via a malicious app. The overall process of this
type of attack is shown in Figure 5(a). In this attack, with the
installed malicious app, the attacker can obtain the victim’s
token by sending app-specific data through the victim’s mobile
network. As an instance of this attack, we take Kuaishou [39],
Chinese version of Kwai [40] and one of the most pop-
ular short video apps with more than 400 million active
users [41], as the target app for exploitation. We implemented
the malicious app and hard-coded the appId, appKey and
appPkgSig of Kuaishou in it. We uploaded the malicious app
to VirusTotal [42] on April 6 in 2022 and VirusTotal reported
that “No security vendors flagged this file as malicious”. To
perform the attack, we installed the malicious app on a non-
rooted Nokia X5 phone (as the victim’s device) with Android 9
OS. The app installation process does not trigger any security
(a) Attack via a malicious app.
(b) Attack by connecting to victim’s hotspot.