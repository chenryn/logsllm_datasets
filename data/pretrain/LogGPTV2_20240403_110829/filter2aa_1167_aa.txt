# A Bridge Too Far: Defeating Wired 802.1X with a Transparent Bridge Using Linux

## Author
Alva Lease ‘Skip’ Duckwall IV  
Exorcyst at gmail d0t com

## About the Author
- **Experience**: Over 25 years of experience with Linux, starting from the pre-1.0 kernel era (circa 1993).
- **Professional Background**: Transitioned from Unix administration to IT security.
- **Certifications**: CISSP, CISA, GCIH, GCIA, GCFW, GPEN, GWAPT, GCUX, GSEC, GCFA, RHCE, SCSA (missing 12 letters). Currently preparing for the GSE written exam in mid-August.
- **Current Role**: Works for Northrop Grumman on a team that performs full-scope penetration tests.

## The Basics

### Objective
To introduce a device onto a wired 802.1X secured network with the following properties:
1. **Transparency**: Undetectable by network administrators.
2. **Remote Communication and Interaction**.
3. **Traffic Injection**: Ability to inject traffic into the network.

### Requirements
- **Linux Box**: With 2 network ports.
- **Extra Ethernet Cable**.
- **Workstation**: Authenticating to the local network using wired 802.1X.
- **Callback Device**: Another box to handle remote callbacks.

#### Device Options
1. **Laptop/Netbook with an Additional USB Network Device Running Linux**
   - **Pros**: Powerful x86 CPU, memory, and hard drive.
   - **Cons**: Difficult to hide, best for in-person demonstrations.
2. **Small x86 Computer (Industrial/Mini PC)**
   - **Pros**: Fanless, built-in dual Gigabit Ethernet, compact (approx. 4”x4.5”x1”).
   - **Cons**: Limited storage, typically uses flash or laptop hard drives.
3. **Plug Computer**
   - **Pros**: Embedded Marvell CPU (ARM), fanless, built-in Ethernet/USB port, small form factor.
   - **Cons**: Limited RAM and storage, may require SD cards for additional storage.

### Choice of Linux Distribution
- **Backtrack 4r2 for x86 CPUs**: Quiet by default, well-tested, and includes many built-in tools.
- **Ubuntu 9.04 for Plug Computers**: Newer hardware might not support it; future plans include switching to Debian or creating a custom distribution.

## Quick Review: Networking Fundamentals

### Ethernet Frame
For TCP/IP (without 802.1q VLANs), an Ethernet frame consists of:
- **Preamble**: 8 bytes
- **Destination Address**: 6 bytes (MAC address)
- **Source Address**: 6 bytes (MAC address)
- **Length/Ethertype**: 2 bytes
- **Data**: Variable (46-1500 bytes)
- **Frame Check Sequence (FCS)**: 4 bytes

### Address Resolution Protocol (ARP)
- **Function**: Maps 32-bit IP addresses to 48-bit physical (MAC) addresses.
- **Protocol**: Question/reply protocol where questions are broadcast, and replies are cached locally.
- **Cache Timeouts**:
  - Windows XP: Up to 10 minutes
  - Vista/2008: Random interval between 15-45 seconds
  - Linux: 60 seconds (tunable)

### Internet Protocol (IP)
- **Function**: Encapsulates higher-level protocols like TCP and UDP.
- **Routing**: Devices use a routing table to decide the next hop for packets. Local networks are usually the only known routes, with a default gateway for external traffic.

### Extensible Authentication Protocol (EAP)
- **Framework**: Guidelines for authentication, supporting multiple methods such as EAP-TLS and EAP-MD5.
- **EAP over LAN (EAPOL)**: Used by 802.1X for network access control.

### 802.1X Overview
- **Standard**: IEEE standard for port-based network access control.
- **Components**:
  1. **Supplicant**: Client authenticating.
  2. **Authenticator**: Device to which the client connects.
  3. **Authentication Server**: Validates the credentials.

### 802.1X Process
1. **Supplicant** sends authentication information in an EAPOL packet to the switch.
2. **Switch** repackages the EAPOL traffic into a RADIUS request and forwards it to the RADIUS server.
3. **RADIUS Server** approves or denies the request, allowing or blocking network access.

### 802.1X Policy Enforcement
- **Supplicant Policies**: Can enforce policies such as AV/patch status, domain membership, and load balancing to the least populated VLAN.

### Common 802.1X Problems
- **Equipment/Overhead**: Requires authentication servers, supported equipment, and can be complicated to set up.
- **Exceptions**: Devices that cannot conform (e.g., printers, copiers) may require sticky MAC or MAC Auth Bypass (MAB).
- **Client-Side Issues**: Link disruptions due to kicked cables, power fluctuations, and reboots.

### Classic Attack on 802.1X
- **2004 Attack**: Inserting a hub to piggyback on an authenticated connection, causing race conditions with TCP.
- **Update to the Attack**: Use a transparent bridge to maintain invisibility and allow both TCP and UDP traffic.

## Proof of Concept

### Network Bridge
- **Definition**: Connects multiple network segments at the Data Link Layer (Layer 2 OSI).
- **Standards**: Defined by IEEE 802.1D.
- **Linux Implementation**: Kernel module and user-land utilities like `bridge-utils`.

### Configuring a Transparent Bridge in Linux
```bash
#!/bin/bash
BRINT=br0
SWINT=eth0
COMPINT=eth3

# Enable IP forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward

# Create the bridge
brctl addbr $BRINT
brctl addif $BRINT $COMPINT
brctl addif $BRINT $SWINT

# Bring up the interfaces
ifconfig $COMPINT 0.0.0.0 up promisc
ifconfig $SWINT 0.0.0.0 up promisc
ifconfig $BRINT 0.0.0.0 up promisc

# Reset auto-negotiation
mii-tool -r $SWINT
mii-tool -r $COMPINT
```

### Towards Interaction
- **Current State**: The bridge is transparent and undetectable.
- **Next Steps**: Enable remote interaction without triggering additional security measures.
- **Requirements**:
  - Maintain transparency.
  - Mimic the original computer's traffic to avoid detection.

This document provides a comprehensive guide to introducing a transparent bridge on a wired 802.1X secured network, including the necessary setup, configuration, and potential enhancements for remote interaction.