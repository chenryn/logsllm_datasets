title:CyberProbe: Towards Internet-Scale Active Detection of Malicious Servers
author:Antonio Nappa and
Zhaoyan Xu and
M. Zubair Rafique and
Juan Caballero and
Guofei Gu
CyberProbe: Towards Internet-Scale Active
Detection of Malicious Servers
Antonio Nappa⇤‡, Zhaoyan Xu†, M. Zubair Raﬁque⇤, Juan Caballero⇤, Guofei Gu†
⇤IMDEA Software Institute
‡Universidad Polit´ecnica de Madrid
{antonio.nappa, zubair.raﬁque, juan.caballero}@imdea.org
†SUCCESS Lab, Texas A&M University
{z0x0427, guofei}@cse.tamu.edu
Abstract—Cybercriminals use different types of geographi-
cally distributed servers to run their operations such as C&C
servers for managing their malware, exploit servers to distribute
the malware, payment servers for monetization, and redirectors
for anonymity. Identifying the server infrastructure used by a
cybercrime operation is fundamental for defenders, as it enables
take-downs that can disrupt the operation and is a critical step
towards identifying the criminals behind it.
In this paper, we propose a novel active probing approach for
detecting malicious servers and compromised hosts that listen
for (and react to) incoming network requests. Our approach
sends probes to remote hosts and examines their responses,
determining whether the remote hosts are malicious or not. It
identiﬁes different malicious server types as well as malware that
listens for incoming trafﬁc such as P2P bots. Compared with
existing defenses, our active probing approach is fast, cheap, easy
to deploy, and achieves Internet scale.
We have implemented our active probing approach in a
tool called CyberProbe. We have used CyberProbe to identify
151 malicious servers and 7,881 P2P bots through 24 localized
and Internet-wide scans. Of those servers 75% are unknown
to publicly available databases of malicious servers, indicating
that CyberProbe can achieve up to 4 times better coverage than
existing techniques. Our results reveal an important provider
locality property: operations hosts an average of 3.2 servers on
the same hosting provider to amortize the cost of setting up a
relationship with the provider.
I.
INTRODUCTION
Cybercrime is one of the largest threats to the Internet.
At its core is the use of malware by miscreants to monetize
infected computers through illicit activities such as spam,
clickfraud, ransomware, and information theft. To distribute
the malware, control it, and monetize it, miscreants leverage
remotely-accessible servers distributed throughout the Internet.
Such malicious servers include, among many others, exploit
servers to distribute the malware through drive-by downloads,
C&C servers to control the malware, web servers to monitor
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:18)(cid:25)
the operation, and redirectors for leading fake clicks to ad-
vertisements. Even P2P botnets require “server-like” remotely
accessible peers for newly infected hosts to join the botnet.
Identifying the server infrastructure used by an operation
is fundamental in the ﬁght against cybercrime. It enables take-
downs that can disrupt the operation [12], sinking C&C servers
to identify the infected hosts controlled by the operation [52],
and is a critical step to identify the miscreants running the
operation, by following their money-trail [59].
Most current defenses identify malicious servers by pas-
sively monitoring for attacks launched against protected com-
puters, either at the host (e.g., AV installations, HIDS) or
at
the network (e.g., NIDS, spamtraps, honeypots), or by
running malware in a contained environment monitoring their
network communication [22], [27]. These passive approaches
achieve limited coverage, as they only observe servers involved
in the attacks suffered by the protected hosts, or contacted
by the malware samples run. To increase coverage, security
companies aggregate information from multiple distributed
sensors or execute more malware samples, but this requires
a large investment or a large user base, and still does not
achieve Internet-scale coverage. These approaches are also
slow; malicious servers are detected asynchronously, when
attacks happen to target the protected hosts. This is prob-
lematic because miscreants often use dynamic infrastructures,
frequently moving their servers to make detection difﬁcult, as
well as in reaction to individual server takedowns [36]. By the
time a new server is detected, a previously known one may
already be dead.
A prevalent active approach for
identifying malicious
servers is using honeyclient farms, which visit URLs, typ-
ically found through crawling,
looking for exploit servers
performing drive-by downloads [42], [61]. Such farms are
at
the core of widely deployed browser defenses such as
Google’s SafeBrowsing and Microsoft’s Forefront. However,
honeyclients focus on exploit servers and do not cover other
malicious server types. In addition, achieving coverage is
expensive, requiring large investments in server farms to run
the crawlers and honeyclients. Thus, they are often deployed
only by large corporations.
In this paper, we propose a novel active probing approach
for detecting malicious servers and compromised hosts that
listen for (and react
to) incoming network requests. Our
approach sends probes to remote hosts and examines their
responses, determining whether the remote hosts are malicious
or not. The probes are sent from a small set of scanner hosts
to a large set of target hosts. The targets may belong to
the same network (e.g., a hosting facility), different networks
across the Internet (e.g., all hosting facilities of the same
provider), or correspond to all remotely accessible Internet
hosts. Our approach is general and can identify different
malicious server types including C&C servers, exploit servers,
web front-ends, and redirect servers; as well as malware that
listens for incoming trafﬁc such as P2P bots.
Compared with existing defenses, our active probing ap-
proach is fast, cheap, easy to deploy, and achieves Internet
scale. It does not require a sensor to be hosted in every
network. Using 3 scanners, it can probe the Internet in 24
hours searching for a speciﬁc family of malicious servers, e.g.,
C&C servers of the same malware family or exploit servers
of a speciﬁc operation. The scanners can be geographically
distributed and rate-limited to respect bandwidth constraints
on the networks hosting them. To reduce the probing time
we can simply add more scanners. Given its speed, it can be
used to understand the size of the server infrastructure used
by an operation at a small window of time. Furthermore, it
enables tracking (dynamic) malicious infrastructures over time,
by periodically scanning for the servers of the same operation.
We have implemented our approach in a tool called Cyber-
Probe, which comprises two components: adversarial ﬁnger-
print generation and scanning. CyberProbe implements a novel
adversarial ﬁngerprint generation technique, which assumes
that the servers to be ﬁngerprinted belong to an adversary who
does not want them to be ﬁngerprinted. Adversarial ﬁngerprint
generation takes as input network traces capturing dialogs
with servers of a malicious family of interest, and builds a
ﬁngerprint, which captures what probes to send and how to
determine from a target’s response if it is malicious. The
ﬁngerprint generation process is designed to minimize the
trafﬁc sent to malicious servers and to produce inconspicuous
probes to minimize the chance of detection by the adversary.
The scanning component takes as input a ﬁngerprint and a
set of target ranges and probes those targets to check if they
belong to the family of interest.
We have used CyberProbe to build 23 ﬁngerprints for 13
malicious families (10 malware families and 3 drive-by down-
load operations). Using CyberProbe and those ﬁngerprints,
we perform 24 scans (12 of them Internet-wide). The scans
identify 7,881 P2P bots and 151 distinct malicious servers
including C&C servers, exploit servers, payment servers, and
click redirectors. Of those servers, 75% are unknown to 4
public databases of malicious infrastructure: VirusTotal [56],
URLQuery [54], Malware Domain List [35], and VxVault [58].
This demonstrates that for some families CyberProbe can
achieve up to 4 times better coverage than existing techniques.
CyberProbe is also fast; in some cases it can even identify ma-
licious servers before they start being used by the miscreants,
when they are simply on stand-by.
Our results uncover an important provider locality property.
A malicious operation hosts an average of 3.2 servers on the
same provider to amortize the cost of setting up a relationship
with the provider. As malicious servers are often hosted in
cloud hosting providers [36], these providers need to be aware
of provider locality. When they receive an abuse report for a
malicious server, chances are more servers of the same family
are being hosted on their networks.
This work makes the following contributions:
• We propose a novel active probing approach for
Internet-scale detection of malicious servers. Our ap-
proach sends probes to remote target hosts and classi-
ﬁes those targets as belonging to a malicious family or
not. Compared to current solutions our active probing
approach is fast, scalable, easy to deploy, and achieves
large coverage.
• We implement our approach into CyberProbe, a tool
that implements a novel adversarial ﬁngerprint gener-
ation technique, and three network scanners. Cyber-
Probe builds ﬁngerprints from a set of network traces
for a malicious family, under the assumption that the
adversary does not want its servers to be ﬁngerprinted,
and probes target networks or the Internet using those
ﬁngerprints.
• We use CyberProbe to conduct 24 localized and
Internet-wide scans for malicious servers. CyberProbe
identiﬁes 151 malicious servers, 75% of them un-
known to existing databases of malicious activity. It
also uncovers an important provider locality property
of the malicious servers hosting infrastructure.
II. OVERVIEW AND PROBLEM DEFINITION
CyberProbe uses an active probing (or network ﬁngerprint-
ing) approach that sends probes to a set of remote hosts and ex-
amines their responses, determining whether each remote host
belongs to a malicious family or not. Network ﬁngerprinting
has been a popular security tool for nearly two decades [9]. A
ﬁngerprint identiﬁes the type, version, or conﬁguration of some
networking software installed on a remote host. It captures the
differences in the responses to the same probes sent by hosts
that have the target software installed and those that have not.
A ﬁngerprint can identify software at different layers of the
networking stack. Tools like Nmap [39] use it to identify the
OS version of remote hosts, and other tools like fpdns [16]
or Nessus [37] use it for identifying application-layer software
such as DNS or Web servers.
Our ﬁngerprints target application-layer software and its
conﬁguration. Each ﬁngerprint
targets a speciﬁc malicious
family. For C&C servers and P2P bots, a ﬁngerprint identiﬁes
the C&C software used by a malware family. For exploit
servers, a ﬁngerprint can identify the exploit kit software or
a speciﬁc conﬁguration of the exploit kit. For example, a
ﬁngerprint could be used to identify all BlackHole exploit
servers on the Internet, and a different ﬁngerprint could be
used to identify only BlackHole exploit servers belonging to a
speciﬁc operation. For the latter, we leverage the intuition that
exploit servers belonging to the same operation are managed
by the same individuals, and therefore have similarities in their
(exploit kit) conﬁguration [36]. Since an exploit kit is typically
a set of web pages and PHP scripts installed on an off-the-shelf
web server (e.g., Apache or Nginx), the ﬁngerprint needs to
capture characteristics of the exploit kit independent of the
underlying web server.
A malicious family may have multiple ﬁngerprints. For
example, a malware family may use different C&C protocols,
or different messages in the same C&C protocol. A different
ﬁngerprint can be generated for each of those protocols or
message types, but all of them identify the same family.
2
Fig. 2. Example ﬁngerprints.
Our adversarial ﬁngerprint generation approach follows
that framework, but has two important differences. First, we
consider an adversarial scenario where the set of training
hosts from the family of interest are malicious servers. We
do not control them and they may be tightly monitored by
their owners. In this scenario, it is critical to minimize the
amount of trafﬁc sent to those malicious seed servers and
to produce probes that look inconspicuous, i.e. that resemble
valid messages. As FiG generates random candidate probes,
a huge number of such candidates needs to be sent before
ﬁnding a distinctive response, as most random probes do not
have proper protocol structure and will be ignored or incite a
generic error response. Instead, CyberProbe replays previously
observed requests to the seed servers. These requests come
from valid interactions with the malicious servers and thus are
well-formed and inconspicuous. We obtain such requests by
executing malware in a contained environment (Section II-D),
by monitoring a honeyclient as it is exploited in a drive-by
download, or from external analysis [10].
Second, our approach differs in the process used to build
the classiﬁcation function. FiG’s classiﬁcation functions have
two main problems: they operate on the raw response, ignoring
any protocol structure, and they need a speciﬁc matching
engine. Instead, a key intuition in this work is that
the
classiﬁcation function can be implemented by using a network
signature on the responses from the targets. Network signatures
typically capture requests sent by malware infected hosts,
but can similarly capture responses from remote endpoints.
This relationship between ﬁngerprint generation and signature
generation enables prior and future advances on either ﬁeld
to be applied to the other. CyberProbe generates protocol-
aware network signatures compatible with Snort [50] and
Suricata [53], two efﬁcient signature-matching open source
IDSes. Figure 2 shows example ﬁngerprints for a clickfraud
operation and a drive-by download operation.
Figure 1a shows the adversarial ﬁngerprint generation
architecture. It takes as input a set of network traces capturing
interactions with servers from the family of interest. First,
it extracts the unique request-response pairs (RRPs) in the
traces. Then, it replays the requests to the servers in the traces,
keeping only replayed RRPs with distinctive responses. Next,
it clusters similar requests. Finally, it generates signatures for
the responses in a cluster. It outputs one or more ﬁngerprints
for the family of interest, each comprising a probe construction
function and a signature.
C. Scanning Overview
We use two types of scans based on the target ranges:
Internet-wide and localized. Internet-wide scans probe the
entire IPv4 address space while localized scans probe selected
ranges. Our localized scans explore the provider locality of the
Fig. 1. Architecture overview.
Similarly, an exploit kit stores a number of ﬁles on a web
server (e.g., PHP, PDF, JAR), and a ﬁngerprint could capture
a probe (and its corresponding response) for each of those ﬁles.
Our active probing approach takes as input network traces
capturing trafﬁc involving a few seed servers that belong to the
family of interest, often only one. The ﬁngerprints CyberProbe
generates enable ﬁnding not only the seed servers, but also
other previously unknown servers from the same family. Thus,
active probing provides a way of amplifying the number of
servers known to be part of the infrastructure of a malicious
operation.
A. Problem Deﬁnition
The problem of active probing is to classify each host h in
a set of remote target hosts H as belonging to a target family
x or not. Active probing comprises two phases: ﬁngerprint
generation and scanning. The goal of ﬁngerprint generation
is to produce one or more ﬁngerprints for a family of interest
x, where each ﬁngerprint F Gx = hP, fPi comprises a probe
construction function P and a classiﬁcation function fP . The
probe construction function returns, for a given target host h 2
H, the sequence of probes to be sent to the target host. The
classiﬁcation function is a boolean function such that when
we send the probes P (h) to host h and collect the responses
RP from h, fP (RP ) outputs true if h belongs to the family
of interest and false otherwise. The goal of scanning is given
a ﬁngerprint, a port number, and a set of target hosts, to send
the probes, collect the responses, and determine whether each
target host belongs to the family of interest (i.e., matches the
ﬁngerprint).
B. Adversarial Fingerprint Generation Overview
In this work we introduce the concept of adversarial
ﬁngerprint generation, i.e., how to generate ﬁngerprints for
servers owned by an adversary who may not want
them
to be ﬁngerprinted. The challenge in traditional ﬁngerprint
generation is to ﬁnd probes that trigger distinctive responses
from servers in the family of interest, i.e., responses that can
be differentiated from those by servers not in the family. A
general framework for ﬁngerprint generation is proposed in
FiG [7]. It generates candidate probes, sends them to a set of
training hosts comprising hosts in the family of interest and
outside of it, and applies learning algorithms on the responses
to capture what makes the responses from hosts in the family
of interest distinctive.
3
malicious servers. That is, whether the managers of a malicious
family select a small number of hosting and ISP providers and
install multiple servers in each, to amortize the cost of setting
up a relationship with the provider (e.g., registering with a fake
identity, setting up working VMs). Using the seed servers as a
starting point, a localized scan probes only the set of IP ranges
belonging to the same providers that host the seed servers.
Localized scans do not allow identifying the full infrastructure
of a malicious family. However, they require sending only a
very small number of probes, and quite frequently they still
identify previously unknown servers.
We envision two different application scenarios for our
active probing approach. Some entities like antivirus vendors,
police, or national security agencies may want to use Internet-
wide scans to identify all malicious servers of a family on
the Internet. However, other entities like hosting providers or
ISPs may want to simply scan their own IP ranges to identify
malicious servers installed by their clients.
Scanners. Figure 1b shows the architecture of CyberProbe’s
scanning component. It comprises three scanners: a horizontal
TCP scanner, a UDP scanner, and an application-layer TCP
scanner (app-TCP). The horizontal TCP scanner performs
a SYN scan on a given port, and outputs a list of hosts
listening on that port. The UDP and app-TCP scanners send
the ﬁngerprint probes and collect or analyze the responses. For
TCP ﬁngerprints, CyberProbe ﬁrst runs the horizontal scanner
and then the app-TCP scanner on the live hosts found by
the horizontal scanner. This allows reusing the results of the
horizontal scanner for multiple scans on the same port. All
3 scanners can be distributed across multiple scanner hosts.
The receiver component of the UDP and appTCP scanners can
output a network trace containing all responses or run Snort
on the received trafﬁc to output the set of hosts matching
the ﬁngerprint. Saving the network trace requires signiﬁcant
disk space (e.g., 50 GB for an Internet-wide HTTP scan), but
enables further analysis of the responses.
Scan scope. Currently, our UDP and appTCP scanners probe
one ﬁngerprint at a time since different ﬁngerprints, even if
for the same family, may use different transport protocols and
require scanning on different ports. The scanners can be easily
modiﬁed to scan with multiple ﬁngerprints if the target port
and target hosts are the same and the ﬁngerprints use the same
transport protocol. However, an important goal of the scanning
is to spread the trafﬁc received by a target over time and each
additional ﬁngerprint makes the scan more noisy.
D. Malware Execution
Executing malware in a contained environment is a widely
studied problem [22], [27], [57]. For active probing,
the
main goals are acquiring the malicious endpoints known to
the malware sample (e.g., C&C servers and P2P peers) and
collecting instances of the network trafﬁc between the sample
and the malicious endpoints. Since C&C servers are highly
dynamic it is important to run the malware soon after collection
to maximize the probability that at least one of the C&C
servers is alive.
We use two containment policies for running the malware:
endpoint failure and restricted access. The endpoint failure