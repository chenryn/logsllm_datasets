        [上游文档](https://fedoraproject.org/w/index.php?title=Packaging:AutoProvidesAndRequiresFiltering&oldid=530706){.link}
        中描述的依赖项自动过滤。
    :::
4.  要禁用自动依赖项生成器，请在主软件包的 `%description`{.literal}
    声明中包含 `%{?python_disable_dependency_generator}`{.literal} 宏。
:::
::: itemizedlist
**其他资源**
-   [自动生成的依赖项](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python_201x/#_automatically_generated_dependencies){.link}
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#assembly_handling-interpreter-directives-in-python-scripts_advanced-topics}在 Python 脚本中处理解释器指令 {.title}
:::
在 Red Hat Enterprise Linux 9 中，可执行 Python
脚本应该使用解析程序指令（也称为 hashbangs 或 shebangs），至少指定主要
Python 版本。例如：
``` literallayout
#!/usr/bin/python3
#!/usr/bin/python3.9
```
在构建任何 RPM
软件包时，`/usr/lib/rpm/redhat/brp-mangle-shebangs`{.literal} buildroot
策略(BRP)脚本会自动运行，并尝试在所有可执行文件中更正解释器指令。
当遇到带有模糊的解释解释器指令的 Python 脚本时，BRP
脚本会生成错误，例如：
``` literallayout
#!/usr/bin/python
```
或者
``` literallayout
#!/usr/bin/env python
```
::: section
::: titlepage
## []{#advanced-topics.html#proc_modifying-interpreter-directives-in-python-scripts_assembly_handling-interpreter-directives-in-python-scripts}修改 Python 脚本中的解释器指令 {.title}
:::
使用以下步骤修改 Python 脚本中的解释器指令，以便在 RPM 构建时出现错误。
::: itemizedlist
**先决条件**
-   Python 脚本中的一些解释器指令会导致构建错误。
:::
::: itemizedlist
**步骤**
-   要修改解释器指令，请完成以下任务之一：
    ::: itemizedlist
    -   在您的 SPEC 文件的 `%prep`{.literal} 部分中使用以下宏：
        ``` literallayout
        # %py3_shebang_fix SCRIPTNAME …​
        ```
        [*SCRIPTNAME*]{.emphasis} 可以是任何文件、目录或文件和目录列表。
        因此，列出的所有文件以及列出目录中所有 `.py`{.literal}
        文件都会修改其解释器指令以指向
        `%{python3}`{.literal}。将保留原始解释器指令的现有标记，并将添加
        `%{py3_shebang_flags}`{.literal} 宏中定义的其他标志。您可以在
        SPEC 文件中重新定义 `%{py3_shebang_flags}`{.literal}
        宏，以更改将要添加的标志。
    -   从 `python3-devel`{.literal} 软件包应用 `pathfix.py`{.literal}
        脚本：
        ``` literallayout
        # pathfix.py -pn -i %{python3} PATH …​
        ```
        您可以指定多个路径。如果 `PATH`{.literal} 是一个目录，则
        `pathfix.py`{.literal} 会递归扫描与模式
        `^[a-zA-Z0-9_]+\.py$`{.literal} 匹配的 Python
        脚本，而不仅仅是具有模糊的解释器指令。将上述命令添加到
        `%prep`{.literal} 部分，或者在 `%install`{.literal} 部分的末尾。
    -   修改打包的 Python 脚本，以便它们符合预期格式。为此，您也可以使用
        RPM 构建进程之外的 `pathfix.py`{.literal} 脚本。在 RPM
        构建之外运行 `pathfix.py`{.literal} 时，将上面的示例中的
        `%{python3}`{.literal} 替换为解释器指令的路径，如
        `/usr/bin/python3`{.literal}。
    :::
:::
::: itemizedlist
**其他资源**
-   [解释器调用](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python/#_interpreter_invocation){.link}
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#ruby-gem-packages_advanced-topics}RubyGems 软件包 {.title}
:::
本节介绍 RubyGems 软件包是什么，以及如何将它们打包到 RPM 中。
::: section
::: titlepage
## []{#advanced-topics.html#what-rubygems-are_ruby-gem-packages}RubyGems 是什么 {.title}
:::
Ruby 是一个动态、解释、反射、面向对象的通用编程语言。
使用 Ruby 编写的程序通常使用 RubyGems 项目打包，该项目提供了特定的 Ruby
打包格式。
RubyGems 创建的软件包名为 gems，也可以将其重新打包到 RPM 中。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本文档指的是与 `gem`{.literal} 前缀相关的 RubyGems 概念，如 .gemspec
用于 `gem 规范`{.literal}，且与 RPM 相关的术语无效。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#ruby-gem-rpm-relation_ruby-gem-packages}RubyGems 与 RPM 的关系 {.title}
:::
RubyGems 代表 Ruby 自己的打包格式。但是，RubyGems 包含 RPM
所需的元数据，它启用了从 RubyGems 转换到 RPM。
根据 [Ruby
打包指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/Ruby/#_rubygems){.link}，可以以这种方式将
RubyGems 软件包重新打包到 RPM 中：
::: itemizedlist
-   这些 RPM 适合其余发行版。
-   最终用户可以通过安装适当的 RPM 软件包 gem 来满足 gem 的依赖项。
:::
RubyGems 使用类似 RPM 的术语，如 SPEC
文件、软件包名称、依赖项和其他项目。
要适应 RHEL RPM 的其他发行版本，由 RubyGems
创建的软件包必须遵循以下列出的约定：
::: itemizedlist
-   gems 的名称必须遵循此模式：
    ``` literallayout
    rubygem-%{gem_name}
    ```
-   要实现 shebang 行，必须使用以下字符串：
    ``` literallayout
    #!/usr/bin/ruby
    ```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#assembly_creating-rpm-packages-from-rubygems-packages_ruby-gem-packages}从 RubyGems 软件包创建 RPM 软件包 {.title}
:::
要为 RubyGems 软件包创建源 RPM，需要以下文件：
::: itemizedlist
-   gem 文件
-   RPM SPEC 文件
:::
下面的部分描述了如何从 RubyGems 创建软件包中创建 RPM 软件包。
::: section
::: titlepage
### []{#advanced-topics.html#con_rubygems-spec-file-conventions_assembly_creating-rpm-packages-from-rubygems-packages}RubyGems SPEC 文件惯例 {.title}
:::
RubyGems SPEC 文件必须满足以下条件：
::: itemizedlist
-   包含 `%{gem_name}`{.literal} 的定义，这是 gem 规范中的名称。
-   软件包的来源必须是发布的 gem 归档的完整 URL；软件包的版本必须是 gem
    的版本。
-   包含 `BuildRequires：`{.literal}
    一个定义的指令，可以拉取(pull)构建所需的宏。
    ``` literallayout
    BuildRequires:rubygems-devel
    ```
-   不包含任何 RubyGems `Requires`{.literal} 或
    `Provides`{.literal}，因为它们是自动生成的。
-   除非要明确指定 Ruby 版本兼容性，否则请不要包含如下定义的
    `BuildRequires:`{.literal} 指令：
    ``` literallayout
    Requires: ruby(release)
    ```
    自动生成的对 RubyGems
    的依赖关系（`Requires: ruby(rubygems)`{.literal}）就足够了。
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#ref_rubygems-macros_assembly_creating-rpm-packages-from-rubygems-packages}RubyGems macros {.title}
:::
下表列出了对于 RubyGems 创建的软件包有用的宏。这些宏由
`rubygems-devel`{.literal} 软件包提供。
::: table
[]{#advanced-topics.html#idm140428043544640}
**表 4.4. RubyGems 的宏**
::: table-contents
  宏名称              扩展路径                                                   使用
  ------------------- ---------------------------------------------------------- -----------------------------
  %{gem_dir}          /usr/share/gems                                            gem 结构的顶级目录。
  %{gem_instdir}      %{gem_dir}/gems/%{gem_name}-%{version}                     包含 gem 的实际内容的目录。
  %{gem_libdir}       %{gem_instdir}/lib                                         gem 的库目录。
  %{gem_cache}        %{gem_dir}/cache/%{gem_name}-%{version}.gem                缓存的 gem。
  %{gem_spec}         %{gem_dir}/specifications/%{gem_name}-%{version}.gemspec   gem 规范文件。
  %{gem_docdir}       %{gem_dir}/doc/%{gem_name}-%{version}                      gem 的 RDoc 文档。
  %{gem_extdir_mri}   %{\_libdir}/gems/ruby/%{gem_name}-%{version}               gem 扩展的目录。
:::
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#ref_rubygems-spec-file-example_assembly_creating-rpm-packages-from-rubygems-packages}RubyGems SPEC 文件示例 {.title}
:::
这部分提供了将 gem 一起构建 gem 的示例，以及其特定部分的内容。
::: title
**RubyGems SPEC 文件示例**
:::
``` literallayout
%prep
%setup -q -n  %{gem_name}-%{version}
# Modify the gemspec if necessary
# Also apply patches to code if necessary
%patch0 -p1
%build
# Create the gem as gem install only works on a gem file
gem build ../%{gem_name}-%{version}.gemspec
# %%gem_install compiles any C extensions and installs the gem into ./%%gem_dir
# by default, so that we can move it into the buildroot in %%install
%gem_install
%install
mkdir -p %{buildroot}%{gem_dir}
cp -a ./%{gem_dir}/* %{buildroot}%{gem_dir}/
# If there were programs installed:
mkdir -p %{buildroot}%{_bindir}
cp -a ./%{_bindir}/* %{buildroot}%{_bindir}
# If there are C extensions, copy them to the extdir.
mkdir -p %{buildroot}%{gem_extdir_mri}
cp -a .%{gem_extdir_mri}/{gem.build_complete,*.so} %{buildroot}%{gem_extdir_mri}/
```
下表解释 RubyGems SPEC 文件中特定项的具体内容：
::: table
[]{#advanced-topics.html#idm140428015249680}
**表 4.5. 特定于 RubyGems 的 SPEC 指令**
::: table-contents
+-----------+---------------------------------------------------------+
| SPEC 指令 | RubyGems 特定                                           |
+:==========+:========================================================+
| %prep     | RPM 可以直接解包 gem 归档，以便您可以运行               |
|           | `gem unpack`{.literal} 命令来从 gem                     |
|           | 中提取源。`%setup -n %{gem_name}-%{version}`{.literal}  |
|           | 宏提供 gem 已解压缩的目录。在同一目录级别，会自动创建   |
|           | `%{gem_name}-%{version}.gemspec`{.literal}              |
|           | 文件，该文件可用于重新构建 gem，以修改                  |
|           | `.gemspec`{.literal} 或将补丁应用到代码。               |
+-----------+---------------------------------------------------------+
| %build    | 此指令包括将软件构建                                    |
|           | 到机器代码的命令或一系列命令。`%gem_install`{.literal}  |
|           | 宏只在 gem 归档上运行，而 gem 可使用下一个 gem          |
|           | 构建重新创建。然后，`%gem_install`{.literal} 创建的 gem |
|           | 文件会被用于构建代码并安装到临时目录中，默认为          |
|           | `./%{gem_dir}`{.literal}。`%gem_install`{.literal}      |
|           | 宏构建并安装代                                          |
|           | 码。在安装之前，构建的源会被放入自动创建的临时目录中。  |
|           |                                                         |
|           | `%gem_install`{.literal} 宏接受两个附加选项：           |
|           | `-n `{.literal}，它可以覆盖用于安装的         |
|           | gem，`-d `{.literal}，它可能会覆盖 gem     |
|           | 安装目的地；不建议使用这个选项。                        |
|           |                                                         |
|           | `%gem_install`{.literal} 宏不能用于安装到               |
|           | `%{buildroot}`{.literal} 中。                           |
+-----------+---------------------------------------------------------+
| %install  | 安装将在 `%{buildroot}`{.literal}                       |
|           | 层次结构中执行。                                        |
|           | 您可以创建需要的目录，然后将临时目录中安装的内容复制到  |
|           | `%{buildroot}`{.literal} 层次结构中。如果这个 gem       |
|           | 创建共享对象，则会移到特定于构架的                      |
|           | `%{gem_extdir_mri}`{.literal} 路径中。                  |
+-----------+---------------------------------------------------------+