Consider initially the case of a 2-word conjunction obfus-
cation pattern, where we use R1, R2, and R3 to denote the
encoding matrices and A0, A1, A2, and A3 to denote the
public keys. The Encode operation for the ﬁrst level can then
be expressed as
A0R1 = r1A1 + e1 ∈ R1×m
q
,
where r1 is a product of two uniform ring elements sampled
over {−1, 0, 1}n
, and R1 ∈ Rm×m
, A0 ∈ R1×m
.
q
q
A0R1R2R3 = (r1A1 + e1) R2R3 =
(r1 (r2A2 + e2) + e1R2) R3 =
(r1 (r2 (r3A3 + e3) + e2R3) + e1R2R3) .
Switching to inﬁnity norms, we get the following expression
for the noise norm:
(cid:13)A0R1R2R3 − r1r2r3A3(cid:13)∞ =
(cid:13)e1R2R3 + r1e2R3 + r1r2e3(cid:13)∞ .
For the subtrahend in Evaluate, i.e., A0RΠS3, we can use
the same estimate as an upper bound for the noise. The term
(cid:5)√
(cid:6)
function SAMPLEFZ(f, c )
f , c
(cid:14) Extract even
and odd componets of f (x)
if dim(f ) = 1 then return SAMPLEZ
else
let f (x) = f0(x2) + x · f1(x2)
(cid:8)
c
(q0, q1) ← SAMPLE2Z (f0, f1, f0, c
let q(x) = q0(x2) + x · q1(x2)
return q
:= Pstride(c)
(cid:8)
)
(cid:14) Pstride permutes coefﬁcients
(a0, a1, . . . , an−1) to (a0, a2, . . . , an−2, a1, a3, . . . , an−1)
end if
end function
369
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
r1r2r3A3 is present in both terms in Evaluate by the deﬁni-
tion of conjunction obfuscator (r1r2r3A3 gets eliminated by
the subtraction in Evaluate). The actual norm of noise terms
will be signiﬁcantly smaller in this case because Gaussian
polynomials are sampled using the distribution parameter σ
rather than a much larger σ
(cid:8).
Hence, the norm for a 2-word obfuscated conjunction pat-
tern can be bounded as
(cid:7)
Δ  32
mnBe
mnB2
R = 32Be
mnBR
2
.
Using the 2-word conjunction correctness constraint as the
base case, we can derive by induction the following expression
for an L-word conjunction:
(cid:5)√
(cid:6)L
q > 32Be
mnBR
for L ≥ 2.
(5)
COMPARISON OF INTEGER GAUSSIAN SAMPLERS
APPENDIX C
Table VII shows the comparison of sampling rates for
generic integer Gaussian samplers in the desktop computing
environment for the case of single-threaded execution. The
distribution parameter σ was varied from 217 to 227 to cover
the range of distribution parameters used by the subroutines
of the G-sampling and perturbation generation procedures
TABLE VII: Sampliing rates in 106 per second for generic
integer Gaussian samplers
σ
217
222
227
Rejection sampling [65]
Karney [45]
Constant-time [46]
0.929
0.932
0.900
3.810
3.811
3.798
1.587
1.502
1.507
in trapdoor sampling for the conjunction obfuscator. These
results were used to select the generic sampler for our main
obfuscation experiments. The rejection sampling method [65]
is included only for reference. Up to 20 MB of memory was
allowed for the generic constant-time sampler [46]. The other
two methods do not have any signiﬁcant memory require-
ments.
Table VII suggests that Karney’s method [45] has the
highest sampling rate for the distribution parameter range of
interest and was thus chosen for our main obfuscation experi-
ments. The sampling rates shown in Table VII are within 20%
of the corresponding rates reported in [46], which suggests
that our conclusions are not speciﬁc to our implementation
but reﬂect the computational complexity at the algorithmtic
level.
It should be noted that both constant-time sampler [46]
and Karney’s method [45] can be separated into ofﬂine and
online subroutines. The analysis presented in [46] suggests
that
the constant-time sampler [46] may be faster in this
case. Since the generic integer sampling method is used only
in the obfuscation procedure, which is executed ofﬂine, this
additional complexity is not needed for our application.
Despite a higher runtime, a constant-time sampler, such as
[46], could be preferred in practice over a rejection sampler,
like [45], because it reduces the opportunities for timing
attacks.
PSEUDOCODE FOR CONJUNCTION OBFUSCATION
APPENDIX D
ALGORITHMS
When the ring instantiation of directed encoding (described
in section III-B) is applied to the conjunction obfuscator, the
encodings Ri,b, Si,b, RL+1, SL+1 get represented as matrices
of m × m ring elements over Rq.
The key generation algorithm for the ring instantiation of
conjunction obfuscator is listed in Algorithm 5. Parameter L
is the effective length of conjunction pattern.
function KEYGEN(1λ)
Algorithm 5 Key generation
for i = 0..L+1 do
(cid:7)
Ti}i∈{0,..,L+1}
(cid:12)
{Ai,
Ti := TRAPGEN(1λ)
Ai,
end for
(cid:7)
return KL+1 :=
end function
(cid:13)
The conjunction obfuscator relies on the Encode algorithm
of directed-encoding ring instantiation (deﬁned in Section
370
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 7 Obfuscation
function OBFUSCATE(v ∈ {0, 1,∗}L, KL+1, σ, σ
(cid:8))
{ri,b}i∈[L],b∈{0,...,2w−1} ← T
for i = 1..L do
Build binary wildcard mask M(cid:8)
for b = 0..2w-1 do
if (b ∧ M ) = 0 then
else
si,b ← T
j := b ∧ ¬M
si,b := si,j
end if
end for
end for
for i = 1..L do
for b = 0..2w-1 do
Si,b := EncodeAi−1→Ai (
Ri,b := EncodeAi−1→Ai (
(cid:7)
(cid:7)
Ti−1, si,b · ri,b, σ
Ti−1, ri,b, σ)
(cid:8)
)
end for
(cid:4)L
end for
rL+1 ← T ∈ R
s× := rL+1
SL+1 := EncodeAL→AL+1 (
RL+1 := EncodeAL→AL+1 (
Πv :=
return Πv
end function
(cid:7)
(cid:7)
i=1 si,v[1+(i−1)w : iw]
(cid:12)
A0,{Si,b, Ri,b}i∈[L],b∈{0,...,2w−1} , RL+1, SL+1
TL, s×, σ)
TL, rL+1, σ
)
(cid:8)
(cid:13)
Algorithm 8 Optimized Evaluation
function EVALUATE(x ∈ {0, 1}L, Πv)
SΠ := A0 ∈ Rq
1×m
RΠ := A0 ∈ Rq
1×m
for i = 1..L do
SΠ := SΠSi,x[1+(i−1)w : iw]
RΠ := RΠRi,x[1+(i−1)w : iw]
end for
Δ := (cid:13)SΠRL+1 − RΠSL+1(cid:13)∞
∈ Rq
∈ Rq
1×m
1×m
return Δ ≤ q/8
end function
the result of Fv is 1. Otherwise,
value,
is 0.
The inﬁnity norm computation ﬁnds a coefﬁcient with the
maximum absolute value in the row vector of ring elements
1×m. The inequality Δ ≤
A0 (SΠRL+1 − RΠSL+1) ∈ Rq
q/8 comes directly from EqualTest in the ring instantiation
of directed encoding (Section III-B).
the result
III-B) to encode each part of the conjunction pattern. The
Encode algorithm is depicted in Algorithm 6.
Algorithm 6 Directed encoding
1×m.
function EncodeAi→Ai+1(Ti, r, σ)
ei+1 ← DR,σ ∈ Rq
bi+1 := rAi+1 + ei+1 ∈ R1×m
Ri+1 := GaussSamp(Ai, Ti, bi+1, σt, s) ∈ Rm×m
q
q
return Ri+1
end function
Algorithm 7 lists the pseudocode for the main obfuscation
function. In contrast to the obfuscated program deﬁned in
Section III-A, we encode words of conjunction pattern v ∈
{0, 1, (cid:2)}L. Each word is w bits long, and 2w is the number of
encoding matrices for each encoded word of the pattern. The
actual pattern length L gets replaced with the effective length
L = (cid:8)L/w(cid:9) to reduce the number of encoding levels (multl-
inearity degree). The word encoding is a major optimization
proposed in this work, and is discussed in detail in Section
III-C.
The si,b, ri,b elements are ternary uniformly random ring
elements, i.e., sampled over {−1, 0, 1}n, for i ∈ [L] and b ∈
{0, . . . , 2w − 1}. We set si,b = ··· = si,j for indices b,··· , j
corresponding to the same wildcard subpattern. To implement
these wildcard subpatterns, we rely on binary masks, where
the subpattern with all zeros in the wildcard characters is used
to generate a uniformly random ring element, which is then
reused for all subpatterns with non-zero bits in the wildcard
characters.
(cid:12)
A0,{Si,b, Ri,b}i∈[L],b∈{0,...,2w−1} , RL+1, SL+1
The obfuscated program then transforms to
Πv :=
(cid:13)
.
Algorithm 7 operates with two variants of Encode dis-
tinguished by the distribution parameter used. To encode
ring elements ri,b and s×, we sample using σ. To encode
ring elements si,b · ri,b and rL+1, we use σ
nσ.
We need to use a larger value of distribution parameter in
order to apply the Ring-LWE assumption to “secret” ring
elements si,b · ri,b in the security proof for the ring variant
of directed encoding speciﬁc to conjunction obfuscator, which
is presented in section 4.3 of [1].
= k
√
(cid:8)
Note that the security proof presented in Section 4.3 of [1]
has typos in expression (1) and Hybrid 1 distribution. The
1 should be sampled from DRm,σ(cid:3) rather than
(cid:8)
(cid:8)
vectors e
0 and e
DRm,σ (here, we use the notation of [1]). This typo does not
affect the rest of Hybrid distributions and the correctness of
the proof itself.
The use of ternary distribution T implies that we rely on a
small-secret variant of the Ring-LWE assumption to minimize
the noise growth.
The pseudocode for the optimized evaluation procedure
is presented in Algorithm 8 (optimization is described in
VI-A). Just like in the abstract algorithm described in section
III-A, if both SΠ and RΠ are the encodings of the same
371
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply.