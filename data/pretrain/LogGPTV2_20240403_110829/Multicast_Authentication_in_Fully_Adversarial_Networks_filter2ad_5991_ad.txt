string c and a signature (cid:190) such that VerifyP K(GID – c; (cid:190)) =
1. Since the signature oracle was never queried for this GID
and n, (cid:190) is a successful forgery.
So, suppose that 2 holds. Then this is exactly the same
situation as Case 1 of the proof of Claim 4.2, and we ob-
tain either a successful forgery or a hash function collision
in the same manner.
5. Analysis
We now analyze our scheme in terms of the various cost
parameters. Recall that: ﬁ (0  0) is the tolerance parameter of the list-decoder, and
‰ + 1
n is the rate of the encoder, where
‰ =
ﬁ2
(1 + †)ﬂ
 1 (e.g., (cid:176) = 10), consider each substring
as a ﬁeld element in Fq, with q = 2‘, encode with a
[(cid:176)n; (cid:176)‰n+1]q Reed-Solomon code, and split the augmented
authentication information into n pieces (each of (cid:176) ﬁeld ele-
ments). In this way, the communication cost stays the same,
but ﬁeld operations become faster. The number of ﬁeld op-
erations at the encoder or decoder is increased by only a
constant factor. Depending on the hardware architecture,
this modiﬁcation may be useful. A drawback here is that
one injected packet by the adversary is now affecting the
decoding algorithm by a factor (cid:176).
5.2. Comparison with other schemes
We compare our schemes against various classes of pro-
posed multicast authentication schemes.
Sign-All and Merkle Tree Schemes. The sign-all and
Merkle-tree [28] authentication schemes are resilient to
fully adversarial networks. The sign-all scheme involves
one signature (resp. veriﬁcation) operation per packet
and a communication overhead that is equal to the sig-
nature size. Depending on the speciﬁc signature scheme
in use,
the parameters of our scheme or the architec-
ture, both communication and computational costs of our
scheme are comparable to the corresponding costs of the
sign-all scheme.
Very short signature schemes have recently been pro-
posed [3]. While the length of a signature can be as low
as 160 bits, the security of this signature scheme is only
proven in the random oracle model, and only under a strong
assumption (Difﬁe-Hellman assumption in gap-DH groups,
see Boneh and Franklin [2] for more on these groups).
Signing every packet with this short signature, therefore,
has a communication advantage over our construction, but
loses in provable security. On the other hand, signing ev-
ery packet with a provably secure signature, such as the the
Cramer-Shoup [6] signature or its modiﬁcation due to Fis-
chlin [9], will add about 500 bytes to each packet — which
is more than what we have for reasonable ﬁ and ﬂ.
ﬁ
0.33
0.5
0.75
0.33
0.5
0.75
ﬂ
1.5
1.5
1.5
1.5
1.5
1.5
†
0.1
0.1
0.1
0.5
0.5
0.5
1=‰
15.15
6.6
2.93
20.66
9
4
cost c (bytes)
303
132
59
414
180
80
ﬁ
0.5
0.5
0.5
0.5
0.5
0.5
ﬂ
1
2
3
1
2
3
†
0.01
0.01
0.01
0.1
0.1
0.1
1=‰
4.04
8.08
12.12
4.4
8.8
13.2
cost c (bytes)
81
162
243
88
176
264
Table 1. Communication cost c per packet for various values of the survival rate ﬁ, ﬂood rate ﬂ and
tolerance parameter †. We assume the use of the SHA-1 hashing algorithm, that is, h = 20 bytes.
The communication cost should be compared with the size s of the signature in use (e.g., an RSA
signature with s = 256 bytes). Recall that ‰ = ﬁ2
‰ =
hﬂ(1+†)
(1+†)ﬂ is the rate of the code in use and that c = h
.
ﬁ2
Additionally, signing every packet is undesirable in prac-
tice. Indeed, by signing every packet separately we lose
both in efﬁciency and in architecture design since the se-
cret key operations are computationally expensive and re-
quire extra need of security. Invoking a signature operation
involves fetching the private key and temporarily storing it
in the main memory of the system. When secret key opera-
tions are performed at high rates, the secret key resides al-
most exclusively in the memory of the system increasing the
danger of the key being compromised to other running pro-
cesses in the system. Special-purpose hardware can be used
to overcome this problem, but of course at a higher cost. In
terms of secure architecture design costs, and also for prov-
able security or efﬁciency reasons, the sign-all approach is
inferior to ours.
Finally, since one signature veriﬁcation must be per-
formed for each received packet, valid or not, the sign-all
solution suffers by the following denial-of-service attack at
the receiver: by injecting invalid packets an adversary can
increase the computation resources spent at the receiver for
signature veriﬁcations. In our scheme, where signature dis-
persal is used, no such attack is possible.
On the other hand, the Merkle-tree scheme has better
time complexity than our scheme. For a group of pack-
ets of size n, only 2n hash computations and one signa-
ture computation (resp. veriﬁcation) are performed at the
sender (resp. receiver5). However, the Merkle-tree scheme
has communication cost that grows with the number of
packets, thus, this scheme is not scalable. Our scheme is
efﬁcient in terms of communication cost: packets have con-
stant authentication overhead.
5 Note that at the receiver, by appropriately caching hash values, only
one signature veriﬁcation is needed: once the ﬁrst valid packet is veri-