   //...continues
在前面的代码中，mem2base
 函数是一个新函数，用于将已经加载到内存中的内容传送到数据库中。
最后，load_pcap_file
 在数据库中任何可能的地方应用结构体模板。我们必须在创建段后应用结构体模板，否则，创建段的操作将删除所有已应用的结构体模板，使我们的所有辛苦劳动白白浪费。这个函数的第三部分（也是最后一部分）如下所示：
   //...continuation of load_pcap_file  
   //apply headers structs for each packet in the database  
   for (uint32 ea = s->startEA; ea &lt pos;) {  
      uint32 pcap = ea;       //start of packet  
      //apply pcap packet header struct  
      doStruct(pcap, sizeof(pcap_pkthdr), pkthdr_struct);  
      uint32 eth = pcap + sizeof(pcap_pkthdr);  
      //apply Ethernet header struct  
      doStruct(eth, sizeof(ether_header), ether_struct);  
      //Test Ethernet type field  
      uint16 etype = get_word(eth + 12);  
      etype = (etype >> 8) | (etype  8);  //htons  
      if (etype == ETHER_TYPE_IP) {  
         uint32 ip = eth + sizeof(ether_header);  
         //Apply IP header struct  
         doStruct(ip, sizeof(iphdr), ip_struct);  
         //Test IP protocol  
         uint8 proto = get_byte(ip + 9);  
         //compute IP header length  
            uint32 iphl = (get_byte(ip) & 0xF) * 4;  
            if (proto == IP_PROTO_TCP) {  
               doStruct(ip + iphl, sizeof(tcphdr), tcp_struct);  
            }  
            else if (proto == IP_PROTO_UDP) {  
               doStruct(ip + iphl, sizeof(udphdr), udp_struct);  
            }  
         }  
         //point to start of next pcak_pkthdr  
         ea += get_long(pcap + 8) + sizeof(pcap_pkthdr);  
      }  
   }
前面的代码只是以一次一个数据包的方式简单浏览了数据库，并分析每个数据包头部中的几个字段，以确定需要应用的结构体的类型，以及应用该结构体的起始位置。下面的输出是一个已经使用pcap 加载器加载到数据库中的 pcap 文件的前几行：
.file_header:0000 _file_header    segment byte public 'DATA' use16  
.file_header:0000         assume cs:_file_header  
.file_header:0000         pcap_file_header &lt0A1B2C3D4h, 2, 4, 0, 0, 0FFFFh, 1>  
.file_header:0000 _file_header    ends  
.file_header:0000  
.packets:00000018 ; =========================================================  
.packets:00000018  
.packets:00000018 ; Segment type: Pure data  
.packets:00000018 _packets  segment byte public 'DATA' use32  
.packets:00000018            assume cs:_packets  
.packets:00000018            ;org 18h  
.packets:00000018            pcap_pkthdr &lt&lt47DF275Fh, 1218Ah>, 19Ch, 19Ch>  
.packets:00000028            db 0, 18h, 0E7h, 1, 32h, 0F5h; ether_dhost  
.packets:00000028            db 0, 50h, 0BAh, 0B8h, 8Bh, 0BDh; ether_shost  
.packets:00000028            dw 8                    ; ether_type  
.packets:00000036            iphdr &lt45h, 0, 8E01h, 0EE4h, 40h, 80h, 6, 9E93h,  
                                    200A8C0h, 6A00A8C0h>  
.packets:0000004A            tcphdr &lt901Fh, 2505h, 0C201E522h, 6CE04CCBh, 50h,  
                                     18h, 0E01Ah, 3D83h, 0>  
.packets:0000005E            db  48h ; H  
.packets:0000005F            db  54h ; T  
.packets:00000060            db  54h ; T  
.packets:00000061            db  50h ; P  
.packets:00000062            db  2Fh ; /  
.packets:00000063            db  31h ; 1  
.packets:00000064            db  2Eh ; .  
.packets:00000065            db  30h ; 0
以这种方式应用结构体模板，可以展开和折叠任何头部，显示或隐藏它的每一个成员字段。如上所示，我们可以轻易确定，地址 0000005E
 处的字节是一个 HTTP响应数据包的第一个字节。
了解了基本的 pcap 文件加载功能，就为我们开发执行更加复杂的任务（如 TCP 流重组和其他各种形式的数据提取）的插件打下基础。另外，在格式化各种与网络有关的结构体时，我们还可以使用对用户更加友好的方式，如显示一个 IP 地址的可读版本，为每个头部中的其他字段提供按字节排序的显示。这些改进将作为挑战留给读者来解决。
18.5 其他加载器策略
如果花一些时间浏览 SDK 中的示例加载器，你将发现各种不同风格的加载器。Java 加载器（/ldr/javaldr）值得注意。对于某些文件格式来说，加载器与处理器模板之间的耦合非常松散。一旦加载器发现进入代码的入口点，处理器模块不需要其他信息，就能够正确反汇编这些代码。一些处理器模块可能需要大量与最初的源文件有关的信息，并且必须执行之前已经由加载器完成的许多解析任务。为了避免这种重复工作，加载器和处理器可能会以一种更加紧密耦合的方式配对。实际上，Java 加载器所采取的方法就是使用以下代码，将所有加载任务（那些通常由加载器的 load_file
 函数完成的任务）交给处理器模块：
static void load_file(linput_t *li, ushort neflag, const char *) {  
  if (ph.id != PLFM_JAVA) {  
    set_processor_type("java", SETPROC_ALL | SETPROC_FATAL);  
  }  
  if (ph.notify(ph.loader, li, (bool)(neflag & NEF_LOPT))) {  
    error("Internal error in loadermodule link");  
  }  
}
Java 加载器所做的唯一一件工作是确定处理器类型已被设置为 Java 处理器，之后，加载器将向处理器模块发送一条 ph.loader
 （在idp.hpp中定义）通知消息，告诉处理器加载阶段已经启动。收到通知后，Java 处理器将接管加载任务，并在这个过程中获得大量内部状态信息。在执行反汇编任务时，处理器将重用这些信息。
这种策略是否对你有用，完全取决于你是否正开发加载器及相关的处理器模块，以及你是否认为处理器能够得益于访问传统上由加载器获取的信息（分段、文件头字段、调试信息等）。
由加载器向处理器模块传递状态信息的另一种方法是使用数据库网络节点。在加载阶段，加载器可能会在特定的网络节点中填入一些信息，供处理器模块在随后的反汇编阶段检索使用。需要注意的是，频繁访问数据库，以检索以这种方式存储的信息，其速度要比利用可用的C++ 数据类型慢一些。
18.6 编写脚本化加载器
在IDA 5.6 中，Hex-Rays 引入了使用 Python 或IDC 脚本实现加载器的功能。在宣布此项新功能的Hex 博客文章中1，Hex-Rays 的Elias Bachaalany描述了一个加载器，该加载器以 Python实现，用于加载一个包含 shellcode 的特定类型的恶意.pdf 文件。虽然该加载器不会将.pdf 文件的恶意本质类推到所有的.pdf 文件，但该加载器是如何在 IDA 中加载不受支持的文件格式的范例。
1. 参见：http://www.hexblog.com/?P=110
 。
脚本化加载器能够以 IDC 或Python 实现，并且至少需要 accept_file
 和load_file
 这两个函数，它们的功能与我们前面讨论基于 SDK 的加载器时提及的函数的功能类似。simpleton 文件格式的IDC 加载器如下所示：
#include   
#define SIMPLETON_MAGIC 0x1DAB00C  
//Verify the input file format  
//   li - loader_input_t object. See IDA help file for more information  
//   n  - How many times we have been called  
//Returns:  
//   0 - file unrecognized  
//   Name of file type - if file is recognized  
static accept_file(li, n) {  
   auto magic;  
   if (n) return 0;  
   li.readbytes(&magic, 4, 0);  
   if (magic != SIMPLETON_MAGIC) {  
      return 0;  
   }  
   return "IDC Simpleton Loader";  
}  
//Load the file  
//   li - loader_input_t object  
//   neflags - refer to loader.hpp for valid flags  
//   format  - The file format selected nby the user  
//Returns:  
//   1 – success  
//   0 – failure  
static load_file(li, neflags, format) {  
   auto magic, size, base;  
   li.seek(0, 0);  
   li.readbytes(&magic, 4, 0);  
   li.readbytes(&size, 4, 0);  
   li.readbytes(&base, 4, 0);  
   // copy bytes to the database  
   loadfile(li, 12, base, size);  
   // create a segment  
   AddSeg(base, base + size, 0, 1, saRelPara, scPub);  
   // add the initial entry point  
   AddEntryPoint(base, base, "_start", 1);  
   return 1;  
}
除了用IDC 函数替代 SDK 函数外，IDC 版本的simpleton 加载器与C++ 版本的加载器之间的相似性（如前所述）应相当明显。要安装加载器脚本，只需将它们复制到/loaders 目录中即可。
Python 也可用于开发加载器并实现更加稳健的开发流程，因为它可以在更大程度上访问IDA的基本SDK 。以Python 实现的simpleton 加载器如下所示：
#Verify the input file format  
#   li - loader_input_t object. See IDA help file for more information  
#   n  - How many times we have been called  
#Returns:  
#   0 - file unrecognized  
#   Name of file type - if file is recognized  
def accept_file(li, n):  
   if (n):  
      return 0  
   li.seek(0)  