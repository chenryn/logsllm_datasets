**Ramnivas Laddad** opened **SPR-4306** and commented
Currently, the base aspect for domain object dependency injection --
AbstractBeanConfigurerAspect -- is not really capable of doing many
interesting things that its subaspect AnnotationBeanConfigurerAspect does.
Especially important capability is injecting dependencies after
deserialization. This precludes users from creating useful subaspect of
AbstractBeanConfigurerAspect unless they duplicate the functionality in
AnnotationBeanConfigurerAspect. This, in turn, precludes some interesting
possibilities such as:
  * Injecting dependencies based on user-specific annotations.
  * Injecting based on user-specified interfaces (e.g. Injecting MailServer for objects implementing MailClient).
  * User specified configuration strategy (that can bypass Spring's reflection based strategy).
While making backwards compatible changes is ideal in some respect, it is
probably going to end up making the design too complex (already we have some
complexities such as non-abstract pointcut that must be overriden). So perhaps
a better choice is to:
  1. Create a new aspect, say, AbstractDependencyInjectionAspect with consideration for all things mentioned above.
  2. Deprecate AbstractBeanConfigurerAspect.  
This shouldn't be a real issue for any existing users as their subaspects of
AbstractDependencyInjectionAspect, if any, will continue to work the same way.
  3. Refactor AnnotationBeanConfigurerAspect to extend AbstractDependencyInjectionAspect.  
Since AnnotationBeanConfigurerAspect is a concrete aspect (which cannot be
extended further), there is no issue with user extensions to it. Further, most
(all?) Spring users use this aspect to aop:spring-configured/ or
context:spring-configured/ anyway, making internal details umimportant to
them.
* * *
**Issue Links:**
  * #8980 Deserialization not reinjecting for `@Configurable` with preConstruction
  * #8981 Repeated configuration for `@Configurable` with preConstruction