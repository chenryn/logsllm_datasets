links
control constraints
r
ln ::= r1 → r2
cc
as well as tests that match a particular preﬁx (or group of
preﬁxes) and tests for route advertisements with a particular
community value attached (i.e., an integer value associated
with a path).
Propane also supports constraints on the control-plane be-
havior of BGP. For example, preﬁx aggregation is an impor-
tant optimization to reduce routing table size. A constraint
of the form agg(x, ln) tells the compiler to perform aggre-
gation for preﬁx x across all links described by ln. It is also
often useful to be able to add community tags to exported
routes in BGP (e.g., to communicate non-standard informa-
tion to peers). A constraint of the form tag(d, t, ln) adds
community tag d for any preﬁxes matching t across links
ln. We list only the route aggregation and community tag-
ging constraints in Figure 4, but Propane also supports other
constraints such as limiting the maximum number of routes
allowed between ASes, or enabling BGP multipath.
Semantics. We give a semantics to RIR programs using sets
of ranked paths. Each path constraint r1» . . . »rj denotes a
set of ranked network paths. A network path is a topologi-
cally valid string of abstract locations l1l2 . . . lk. We use the
notation |p| to denote the length of the path p. A regular ex-
pression r matches path p, if p ∈ L(r), that is, the path is
in the language of the regular expression. Paths are ranked
lexicographically according to (1) the most preferred regular
expression matched, and (2) as a tie breaker, the path length.
Lower ranks indicate more preferred paths. More formally,
a path p has rank:
{p ∈ L(ri)},|p|)
(min
i
The set of ranked paths depends on which paths are valid
in the topology, and thus when failures occur, the most pre-
ferred routes change. For any source s and destination d,
Propane will send trafﬁc along the highest ranked available
path from s to d.
From FE to RIR. The ﬁrst stage in Propane compilation
reduces the FE to the simpler RIR from Figure 4. The main
differences between the FE and RIR are: i) FE allows the
programmer to specify constraints using a series of (mod-
ular) deﬁnitions, and combine them later, ii) FE provides
high-level names that abstract sets of routes and groups of
preﬁxes/neighbors, and iii) FE allows the preference opera-
tor to be used more ﬂexibly.
A key constraint when translating FE to RIR is ensuring
that all speciﬁed routes are well-formed. In particular, each
regular path constraint r must satisfy r ⊆ out∗ · in+ · out∗.
It ensures that users only control trafﬁc that goes through
their network at some point, and that such trafﬁc does not
loop back multiple times through their network.
The translation from FE to RIR is based on a set of rewrit-
ing rules. The ﬁrst step merges separate constraints. It takes
the cross product of per-preﬁx constraints, where logical con-
junction (r1 & r2) is replaced by intersection on regular con-
straints (r1 ∩ r2), logical disjunction is replaced by union,
and logical negation (!r) is replaced by path negation (any∩
!(r)). The additional constraint any ensures the routes are
well-formed by restricting the paths to only those that go
through the user’s network. For example, in the datacen-
ter FE conﬁguration from §4, combining the Locality and
Ownership policies results in the following RIR:
PG1 => end(A)
PG2 => end(B)
PL1 => only(in) ∩ end(E)
PL2 => only(in) ∩ end(F)
true => exit(out)
The next step rewrites the high-level constraints such as
exit according to the equivalences in Figure 4. Since pref-
erences can only occur at the outermost level for an RIR
expression, the ﬁnal step is to “lift" occurrences of the pref-
erence operator in each regular expression. For example, the
regular expression r· (s » t)· u is lifted to (r· s· u)»(r· t· u)
333
by distributing the preference over the sequence operator.
In general, we employ the following distributivity equiva-
lences:
r (cid:12) (s1» . . . »sn) = (r (cid:12) s1)» . . . »(r (cid:12) sn)
(s1» . . . »sn) (cid:12) r = (s1 (cid:12) r)» . . . »(sn (cid:12) r)
where (cid:12) stands for an arbitrary regular binary operator, and
r is a policy with a single preference. In cases where r does
not contain a single preference, such as (s » t) · (u » v),
it is not clear which of the paths s · v or t · u is preferred.
Propane rejects such ambiguous policies, requiring instead
that operators explicitly specify which paths to prefer — for
example as (s · u) » (s · v) » (t · u) » (t · v). Policies that
contain preferences nested under a unary operator (i.e., star
or negation) are also rejected by Propane as invalid.
5.2 Product graph IR
Now that the user policy exists in a simpliﬁed form, we
must consider the topology. In particular, we want a compact
representation that describes all the possible ways BGP route
announcements can ﬂow through the network subject to the
policy and topology constraints. The PGIR captures these
constraints by “intersecting" each of the regular automata
corresponding to the RIR path preferences with the topology.
Paths through the PGIR correspond to real paths through the
topology that satisfy the user constraints.
Formal deﬁnition. While paths in an RIR policy describe
the direction trafﬁc ﬂows through the network, to imple-
ment the policy with BGP we are concerned about the way
control-plane information is disseminated — route announce-
ments ﬂowing in the opposite direction. To capture this idea,
for each regular expression ri in an RIR policy, we construct
a deterministic ﬁnite state machine for the reversed regular
expression. An automata for regular expression ri is deﬁned
as a tuple (Σ, Qi, Fi, q0i, σi). The alphabet Σ consists of
all abstract locations (i.e., routers or ASes), Qi is the set of
states for automaton i, Fi is the set of ﬁnal states, q0i is the
initial state, and σi : Qi×Σ → Qi is the state transition func-
tion. The topology is represented as a graph (V, E), which
consists of a set of vertices V and a set of directed edges
E : V × V . The combined PGIR is a tuple (V (cid:48), E(cid:48), s, e, P )
with vertices V (cid:48) : V × Q1 × ··· × Qj, edges E(cid:48) : V (cid:48) × V (cid:48),
a unique starting vertex s, a unique ending vertex e, and a
preference function P : V (cid:48) → 2{1,...,j} , which maps nodes
in the product graph to a set of path ranks.
For a PGIR vertex n = (l, . . . ) ∈ V (cid:48), we say that n is
a shadow of topology location l. We also write ˜n = l to
indicate that the topology location for node n is l. When two
PGIR nodes m and n shadow the same topology location
(i.e., ˜m = ˜n), we write m ≈ n.
Throughout the remainder of the paper, we will use the
convention that metavariables m and n stand for PGIR nodes
and l stands for a topology location. Capital letters like X re-
fer to concrete topology locations, while capital letters with
subscripts such as X1 and X2 refer to concrete PGIR nodes
that share a topology location (i.e., ˜X1 = ˜X2 = X).
From RIR To PGIR. Let ai and bi denote states in the reg-
ular policy automata. The PGIR is constructed by adding
an edge from m = (lm, a1, . . . , ak) to n = (ln, b1, . . . , bk)
whenever σi(ai, ln) = bi for each i and (lm, ln) ∈ E is a
valid topology link. Additionally, we add edges from the
start node s to any n = (l, a1, . . . , ak) when σi(q0i, l) = ai
for each i. The preference function P is deﬁned as P (n) =
{i | ai ∈ Fi}. That is, it records the path rank of each au-
tomaton that has reached a ﬁnal state. Finally, there is an
edge from each node in the PGIR such that P (n) (cid:54)= ∅ to
the special end node e. We write (m ≤rank n) if either
P (m) = P (n) = ∅ or min P (m) ≤ min P (n), which
means that paths ending at PGIR node m are better (lower
rank) than paths ending at n.
Intuitively, the PGIR tracks the policy states of each au-
tomaton as route announcements move between locations.
Consider the topology in Figure 5. Suppose we want a pri-
mary route from neighbor W that allows trafﬁc to enter the
network at A and utilize the C–D link before leaving the net-
work (through X or Y ). As a backup, we also want to allow
trafﬁc to enter the network from B, in which case the trafﬁc
can also utilize the C–E link before leaving the network. For
simplicity, we assume that the route ends in either X, Y , or
Z. The RIR for the policy could be written as:
(W · A · C · D · out)»(W · B · in+ · out)
Figure 5 shows the policy automata for each regular expres-
sion preference. Since we are interested in the ﬂow of con-
trol messages, the automata match backwards. The ﬁgure
also shows the PGIR after intersecting the topology and pol-
icy automata. Every path in the PGIR corresponds to a con-
crete path in the topology. In particular, every path through
the PGIR that ends at a node n such that the preference func-
tion P (n) = {i1, . . . , ik} is non-empty, is a valid topolog-
ical path that satisﬁes the policy constraints and results in a
particular path with preferences i1 through ik. For example,
the path X · D · C · A· W is a valid path in the topology that
BGP route announcements might take, which would lead to
obtaining a path with the lowest (best) rank of 1. BGP con-
trol messages can start from peer X, which would match the
out transition from both automata, leading to state 1 in the
ﬁrst automaton, and state 1 in the second automaton. This
possibility is reﬂected in the product graph by the node with
state (X, 1, 1). From here, if X were to advertise this route to
D, it would result in the path D·X, which would lead to state
2 in the ﬁrst automaton, and state 2 in the second automaton,
and so on. The “–" state indicates the corresponding au-
tomaton cannot accept the current path or any extension of
it. Since node (W, 5,−) is in an accepting state for the ﬁrst
automaton, it indicates that this path has rank 1.
Minimization. After building the PGIR as described above,
we minimize it in order to improve the precision of the sub-
sequent analysis that checks if the policies captured by it are
safe under failures. The minimization is based on the ob-
servation that, although every path in the PGIR is a valid
path in the topology, we do not want to consider paths that
form loops.
In particular, BGP’s loop prevention mecha-
334
Topology
Product Graph IR
Policy Automata
D
out
C
A
W
0
1
2
3
4
5
A,C,D,E
out
1
0
in
2
B
A,C,D,E
B
3
W
4
Figure 5: Product graph construction for policy (W · A · C · D · out)»(W · B · in+ · out).
nism forces an AS to reject any route that is already in the
AS path. For example, in Figure 5, the path W · A· C · B· W
is a valid topological path, leading to a path that satisﬁes the
preference 2 policy, but which contains a loop.
We use graph dominators [21] as a relatively cheap ap-
proximation for removing many nodes and edges in the PGIR
that are never on any simple (loop free) path between the
start and end nodes.
In the PGIR, a node m dominates a
node n if m appears on every path leading from the start
node to n. Similarly, a node m post-dominates a node n in
the PGIR if m appears on every path from n to the end node.
We can safely remove nodes and edges in the PGIR when
any of the following conditions hold, where we have m, m(cid:48)
and n, n(cid:48) such that m ≈ m(cid:48) and n ≈ n(cid:48).
• Remove m if it is not reachable from the start node
• Remove m if it can not reach the end node
• Remove m if it is (post-)dominated by some m(cid:48)
• Remove edge (m, n) if some m(cid:48) post-dominates n
• Remove edge (m, n) if some n(cid:48) dominates m
For example, node (W, 1, 1) in Figure 5 is removed because
every path to the end node must always go through node
(W,−, 4). That is, node (W, 1, 1) is post-dominated by node
(W,−, 4) and both are shadows of topology location W .
We repeatedly apply the minimizations above until no fur-
ther minimization is possible. In the example from Figure 5,
colored nodes and dashed edges show edges and nodes re-
moved after minimization.
5.3 Failure-safety analysis
To implement path preferences in routing, BGP uses lo-
cal preferences on a per-device basis. However, the dis-
tributed nature of BGP makes setting preferences locally to
achieve a network-wide routing policy difﬁcult. This task
becomes even more challenging in the presence of failures
since routers running BGP lack a global view of the network.
An illustrative example. To demonstrate the difﬁculty of
generating device-local preferences, consider the simple pol-
icy for the topology in Figure 6, which says to prefer the top
path over the bottom path: (A · B · D · E · G)»(A · C · D · F · G).
How could such a policy be implemented in BGP? Suppose
we set the local preferences to have D prefer E over F , and
have A prefer B over C. This works as expected under nor-
mal conditions, however, if the A–B link fails, then suddenly
D has made the wrong decision by preferring E. Trafﬁc will
now follow the A · C · D · E · G path, even though this path
was not allowed by the policy. Thus, the distributed imple-
mentation has used a route that is not allowed by the policy.
To make matters worse, the second preference for the path
A · C · D · F · G is available in the network but not being
used. Thus, a path for the best possible route available af-
ter the A–B failure exists in the network, but the distributed
implementation will not ﬁnd it. The ﬁrst problem could be
ﬁxed by tagging and ﬁltering route advertisements appropri-
ately so that C rejects routes that go through E, however the
second problem cannot be ﬁxed. In fact, this policy cannot
be implemented in BGP in a way that is policy compliant
under all failures since D cannot safely choose between E
and F without knowing whether the A–B link is available.
Problem formulation. The problem of determining local
preferences for each router is reﬂected in the structure of the
PGIR. Whenever a given router appears as multiple shadow
nodes in the PGIR, the compiler must decide which shadow
to prefer. In the example from Figure 5, the topology node
C can receive an advertisement from E in shadow (C,−, 2)
or from D in shadow (C, 3, 2). The compiler must deter-
mine a total ordering of shadow nodes for each router, which
reﬂects the relative preference of advertisements received
in each shadow and should be consistent with path ranks.
For example, if C’s shadow (C, 3, 2) can be preferred to
(C,−, 2), written as (C, 3, 2) ≤lp (C,−, 2), C can prefer
advertisements from (D, 2, 2) over (E,−, 2). D and E tag
335
if N1 (cid:54)≈ N2 then return false
q ← Queue()
q.Enqueue(N1, N2)
while !q.Empty() do
Algorithm 1 Inferring regret-free preferences
1: procedure REGRET-FREE(G, N1, N2)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: