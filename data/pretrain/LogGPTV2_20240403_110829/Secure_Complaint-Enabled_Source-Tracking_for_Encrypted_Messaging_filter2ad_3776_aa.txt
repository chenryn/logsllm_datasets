title:Secure Complaint-Enabled Source-Tracking for Encrypted Messaging
author:Charlotte Peale and
Saba Eskandarian and
Dan Boneh
Secure Complaint-Enabled Source-Tracking
for Encrypted Messaging
Charlotte Peale
Stanford University
Saba Eskandarian
UNC Chapel Hill
Dan Boneh
Stanford University
ABSTRACT
While the end-to-end encryption properties of popular messag-
ing schemes such as Whatsapp, Messenger, and Signal guarantee
privacy for users, these properties also make it very difficult for
messaging platforms to enforce any sort of content moderation.
This can lead to the unchecked spread of malicious content such as
misinformation on such platforms. In 2019, Tyagi et al. developed
message traceback, which addresses this issue by allowing a messag-
ing platform to recover the path of a forwarded message after a user
reports it for malicious content. This paper presents an alternative
to message traceback that offers more privacy to users and requires
less platform-side storage. We term this approach source-tracking
for encrypted messaging schemes. Source-tracking enables mes-
saging platforms to provide the privacy guarantees expected from
standard end-to-end encryption, but also helps hold the sources of
malicious messages accountable: if malicious content is reported
by a user, the source can be identified. We formalize security goals
for source-tracking schemes and design and implement two source-
tracking schemes with different security and performance tradeoffs.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography; Security services;
Privacy-preserving protocols; Pseudonymity, anonymity and
untraceability;
KEYWORDS
tracing; abuse reporting; message franking; end-to-end encrypted
messaging; source-tracking;
ACM Reference Format:
Charlotte Peale, Saba Eskandarian, and Dan Boneh. 2021. Secure Complaint-
Enabled Source-Tracking for Encrypted Messaging. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ‚Äô21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 23 pages. https://doi.org/10.1145/3460120.3484539
1 INTRODUCTION
End-to-end encrypted messaging apps like WhatsApp and Signal
provide users with strong privacy guarantees and deliver billions of
messages a day [29]. Concerns about abuse and misinformation on
such platforms have led to work on technical solutions for verifiable
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea.
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484539
reporting of messages with no impact on the privacy guarantees
for messages that are not reported [12, 14, 31, 32]. Techniques
for enabling some degree of moderation with minimal impact on
privacy are all the more important as Brazil and India consider laws
that would require messaging providers to be able to identify the
sources of misinformation [26‚Äì28, 30]. In the absence of strong
privacy-preserving tools to minimize the impact of such policies,
these requirements would cripple the hard-won privacy victories
of end-to-end encrypted messaging.
The majority of work on verifiably reporting abusive messages
has been in the context of message franking [12, 14, 31], which
focuses on reporting the immediate sender of a message and not on
identifying the sources of viral misinformation campaigns. While
message franking techniques are important for reporting abusive
messages, they do not help find the origin of a message that may be
forwarded many times before someone reports it. Although it would
be possible to find the source of a message by combining a message
franking scheme with extensive metadata collection and retention,
e.g., a graph of all message sources and destinations with forwarded
messages labeled, this approach requires a great deal of storage
and forces the platform to collect and keep lots of metadata, which
may compromise user privacy in its own right. Solutions relying
on having users sign their messages are also unsatisfactory, as this
damages deniability and may reveal the identity of the original
sender of a message even before it is reported.
To our knowledge, the only work to consider tracing the source
of a reported message is the traceback scheme of Tyagi et al. [32].
Traceback boasts extremely low client-side costs and reveals the set
of users who have received a reported message without revealing
any additional information about a message‚Äôs source before it is
reported. Unfortunately, revealing all the recipients of a message
may be leaking too much if the goal of reporting is only to find
the source of the message. Moreover, tracing a message back to its
source takes time linear in the length of the forwarding chain and
requires a 32 Byte token to be stored by the server for each message
sent, regardless of whether that message is ever reported. The token
must be kept for as long as the message can be traced. For a high-
volume messaging platform like WhatsApp, this translates into
terabytes of additional long-term storage each day. Thus traceback
removes the need for a platform to collect message metadata, but it
does not reduce the large quantity of data the platform must store.
This paper introduces the notion of source-tracking for end-to-
end encrypted messaging schemes. Like traceback schemes, source-
tracking schemes reveal the source of a reported message, but they
do not reveal the identities of users who received a message between
when it was first sent and when it was reported. Moreover, our
schemes do not require the server to store any data for each message
sent, and the time to trace the source of a reported message does
not depend on the length of the forwarding chain.
Session 5C: Messaging and Privacy CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1484We begin by formalizing the notion of a source-tracking scheme
and providing security definitions that capture and exceed the
privacy requirements of prior message franking and traceback
schemes. We consider confidentiality of an unreported message‚Äôs
origin from both the platform and other users who may be for-
warded the message. In particular, we offer two notions of con-
fidentiality, tree-linkable and tree-unlinkable confidentiality. In a
tree-linkable scheme, the recipient of two messages with identical
plaintexts can tell if the two messages have the same origin. A
tree-unlinkable scheme hides even this information.
Our definitions also require accountability, unforgeability, and
deniability. These properties require that every successfully deliv-
ered message must be able to be traced to its source, that nobody
can be framed for originating a message, and that only the platform
can verify the origin of a reported message.
Next, we provide two constructions of secure source-tracking
schemes, one with tree-linkable security and one with tree-unlinkable
security. We implement and evaluate our schemes, comparing per-
formance both to the traceback scheme of Tyagi et al. [32] and
an implementation of end-to-end encryption based on the double
ratchet protocol [25, 38] without any additional functionality for
finding the source of a reported message.
In exchange for its slightly weaker security guarantee, the tree-
linkable scheme offers exceptional performance, introducing very
reasonable overheads compared to an end-to-end encrypted mes-
saging service with no source-tracking capability. For example, it
takes under 60ùúás to find the source of a reported message. The
additional server-side overhead of using our tree-linkable scheme
is only 20ùúás of cryptographic operations per message delivered.
The scheme only relies on standard cryptographic primitives such
as signatures and commitments, re-using the security of the under-
lying end-to-end encrypted messaging service to provide additional
security properties at low cost.
Our tree-unlinkable construction, while slower than our first
construction, requires only milliseconds to send and receive mes-
sages. At a high level, we unlinkably hide the source of a message
using a heavily modified version of the algebraic MAC and anony-
mous credential techniques used in the new Signal group messaging
system [4, 5].
In summary, this paper makes the following contributions:
Our implementation and raw evaluation data are free and open
source and can be accessed at https://github.com/cpeale/srctracking.
‚Ä¢ Introduces the notion of source-tracking for end-to-end encrypted
messaging systems and defines strong security requirements for
source-tracking schemes.
‚Ä¢ Constructs a tree-linkable source-tracking scheme with excep-
tional performance that can easily be deployed on top of existing
end-to-end encrypted messaging services.
‚Ä¢ Constructs a tree-unlinkable source-tracking scheme which re-
‚Ä¢ Implements and evaluates both schemes, including comparisons
to both prior work and a baseline messaging implementation
without source-tracking functionality.
quires milliseconds to process and deliver messages.
2 DESIGN GOALS
A source-tracking scheme builds on top of an end-to-end encrypted
messaging system and allows a user who receives an abusive mes-
sage to report that message to the messaging platform. This is
achieved by augmenting the usual protocol for sending and receiv-
ing messages as well as by adding a new Report feature. Given
the contents of a report, the messaging platform should be able to
uncover the true author of the message, regardless of how many
times the message has been forwarded. Source-tracking schemes
do not identify objectionable content on their own (as in, e.g., [16]),
they only deal with the process of identifying the source of content
that a user has reported.
Security goals. Informally, we require the following security prop-
erties from a secure source-tracking scheme. We formalize these
properties in Section 3.
‚Ä¢ Confidentiality: Neither the platform nor any user not involved
in sending or receiving a given message should learn anything
about that message‚Äôs forwarding history or contents. The scheme
should also preserve unlinkability: a user who receives two dif-
ferent forwarded messages should not be able to tell if they were
authored by the same user. After a report, the messaging plat-
form should not learn anything new about the reported message‚Äôs
forwarding history other than the identity of the source.
‚Ä¢ Accountability: No malicious user should be able to send a
‚Ä¢ Unforgeability: No malicious user should be able to frame an-
‚Ä¢ Deniability: Only the platform can verify a report, so if the
contents of a report are leaked, it would be impossible for a third
party to verify that the report implicated a particular user.
message which cannot later be traced back to them.
other user for sending a message it did not send.
Tree-linkable and unlinkable confidentiality. We consider two
levels of confidentiality: tree-linkable and tree-unlinkable. When a
message is authored and then forwarded, a forwarding tree is cre-
ated consisting of all the users who have received and forwarded
that message, rooted at the author of the message. In the strictest
form of user confidentiality, a recipient shouldn‚Äôt be able to tell
which forwarding tree a message came from. If a user receives a
forward consisting of plaintext ùëö, and then later receives another
forward of the same plaintext ùëö, the user shouldn‚Äôt be able to tell
whether the two messages are from the same forwarding tree or
from different trees whose messages happen to have the same plain-
text. If a scheme satisfies this form of confidentiality, we will say it
has tree-unlinkable confidentiality.
In some situations, this notion of confidentiality may be unnec-
essarily strong, as whether or not two identical messages are on
the same forwarding tree may not be sensitive information. Addi-
tionally, depending on the exact implementation of a messaging
scheme, other metadata associated with the message (such as a
timestamp) would mean that no two forwarding trees could ever
correspond to the same message plaintext. If a scheme is such that
a recipient can determine whether two forwards came from the
same tree, but can still learn nothing about the tree structure or
other messaging activity, we say that it satisfies tree-linkable user
confidentiality.
It is worth noting, however, that there are circumstances where
a stronger tree-unlinkable security guarantee may be preferable.
Session 5C: Messaging and Privacy CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1485For example, a malicious insider working for a messaging platform
can send the same message to multiple recipients. Later, if one of
those recipients sends the message to someone who reports it, the
sender will know, from tree-linkability, which person‚Äôs version of
the message was reported. Although we believe tree-linkability
suffices for most scenarios, we design and evaluate constructions
of both tree-linkable and tree-unlinkable schemes.
Accommodating report metadata. In order to properly handle
a report, a messaging platform may wish to receive additional
information about a reported message beyond the identity of its
original author, e.g., an exact or approximate timestamp of when
the message was written. Our schemes support this functionality by
allowing messaging platforms to optionally add report metadata to
messages such that the metadata associated with a message when
it is originally authored will be revealed if and only if that message
is reported. We note that this feature is intended for including