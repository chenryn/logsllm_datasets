我喜爱这一连续剧，尤其是其中关于小型机与大型机的部分。计算机认知计划背后的制作方旨在帮助英国人找准定位：计算身处何处又去向何方？计算机现在能做什么，未来又能做什么？学习一些 BASIC 语言是回答这些问题的一个部分，但是仅仅理解 BASIC 语言似乎不足以使人们认知计算机。
### 如今的计算机认知
如果你现在搜索“学习编码”，你看到的排在第一的是指向 Codecademy 网站的链接。如果要说存在一个“计算机认知计划”的现代替代品 —— 具有相同的影响与目标，那就是 Codecademy。
“ 学习编码   learn to code ” 是 Codecademy 的口号。我认为我不是第一个指出这一点的人 —— 事实上我可能在某个地方读过这句话，只是现在拿来用而已。但是这里使用的是 “ 编码   code ” 而非 “ 编程   program ”，这说明了一些问题。这表明你学习的重要内容是如何读懂代码，如何阅读满屏的 Python 代码的意思，而不是目光呆滞、不知所云。我能够理解为什么对于普通人而言，这似乎是成为专业程序员的主要障碍。专业程序员整日盯着布满编程术语的计算机屏幕，如果我想要成为一个专业程序员，我最好确保我能够理解这些天书一样的字符。但是理解语法并不是成为程序员的最大的挑战。在更大的障碍面前，它很快将变成微不足道。仅仅以掌握一门编程语言的语法为目标，你可能能够 *阅读* 代码，但是无法做到 *编写* 代码以解决全新的问题。
我最近学习了 Codecademy 的 《编程基础》 课程。如果你对编程感兴趣（而不是对网页开发或者数据科学），并且没有任何编程经验，这是 Codecademy 推荐你学习的课程。里面有几节关于计算机科学史的课时，不过都是流于表面而没有深入研究。（感谢上帝，[一位高尚的互联网秩序义务维护者](https://twitter.com/TwoBitHistory/status/1111305774939234304) 指出了其中存在的一个特别恶劣的错误）。该课程的主要目的是教授你编程语言的通用结构要素：变量、函数、控制流、循环等。换句话说，该课程聚焦于为了让你理解天书般的代码中的模式，而所需要知道的内容。
公平地看，Codecademy 也提供了其他内容深入的课程。但是即使是如 《计算机科学之路》 这样的课程也几乎只仅仅专注于编程以及程序中表达的概念。有人可能会反驳说这才是重点 —— Codecademy 的主要特点就是提供给你一些交互式的、带有自动反馈的编程课程。在有限的自动化课程中能够灌输给学员的内容只有这么多，因此学员的脑海里也没有更多的空间容纳更多其他的内容。但是负责启动计算机认知计划的 BBC 的制作人也面临同样的问题。他们意识到受限于他们的传播媒介，“通过电视节目所能获得的学习内容的容量也是受限的”   [8] 。虽然在他们所能传达的信息总量上存在相似的限制，但是 BBC 的制作人选择强调在学习 BASIC 语言上的一般原则。难道 Codecademy 就不能将其中一两节交互式可视化的课时替换为编织经线与纬线的 Jacquard 织机的案例吗？
我一直在大声鼓吹 “一般原则”，因此让我再解释下我认为的一般原则是什么，以及为什么它们如此重要。J. Clark Scott 出了一本有关计算机的书，书名为 《 但是它怎么知道？   But How Do It Know? 》。这个书名来自书的序言里的一则笑话：一个店员向人群推销保温瓶，说保温瓶可以让热食始终是热的，冷食始终是冷的。一名听众对这个新发明感到惊讶，问道，但是它怎么知道（根据你给它的食物类型的不同选择做相应的事情呢）？笑点在于保温瓶当然不能感知食物的温度然后据此做出决定 —— 保温瓶仅仅制作成保证冷食必然保持冷的，热食必然保持热的就可以了。人们也以（笑话中的那个听众）一样的方式看待计算机，相信计算机就是数字大脑，能够基于提供给它们的代码 “选择” 做一件事或者另一件事。但是了解一些有关计算机如何工作的知识，哪怕是很初级水平的理解，也能让（人们理解中的）计算机摆脱（做判断的）侏儒。这就是为什么 Jacquard 织机是一个很好的有助理解的例子。一开始它似乎是一种难以置信的设备，它读取打孔卡片，然后以某种方式“知道”编织正确的样式。现实是显而易见的：每一行孔都对应一根线，而一行中有孔的地方对应着提起的线。理解了这些虽然不会有助于你用计算机完成新的事情，但是将使你自信于你不是在跟某些神秘事物打交道。我们应当尽快将这种自信的感受传授给初学者。
唉，可能真正的问题是没有人想要了解 Jacquard 织机。根据 Codecademy 如何强调他们教授的专业应用来判断，很多人开始使用 Codecademy 可能是因为他们相信这有助于 “提升” 他们的职业水平。他们没有来由地相信，首要的问题是理解编程的专业术语，因此他们才想要 “学习编码”。他们想要在他们所拥用的。每天晚上晚餐与就寝之间的一两个小时里尽快完成这件事。Codecademy 毕竟只是一门投其所好的生意，而非一些有关 18 世纪就发明了的机器的间接说明。
另一方面，计算机认知计划是供职于 BBC 的一群制作人与公务员所认为的，将计算机的使用教给国民的最好的方式。我承认，因为这一群人教会大众他们无法以己之力所能求得的事物，而赞美这一群人的建议多少有点精英主义。但我情不自禁认为他们做对了。许多人使用 BBC Micro 第一次学会了使用计算机，他们中的很多人进而成为了成功的软件开发者或游戏设计师。[正如我曾经所说的](https://twobithistory.org/2018/09/02/learning-basic.html)，我怀疑在计算机已经变得相对简单的时代里，学习使用计算机是一个巨大的优势。不过或许这群人所拥有的另一个优势在于有像 《计算机程序》 这样的尽己所能不仅仅教授编程，而且教授计算机是为什么又是如何运行程序的节目。在看完 《计算机程序》 之后，你可能并不能理解计算机屏幕上的所有天书般的编程术语，但是实际上你也并不需要，因为你知道无论 “代码” 是什么样子，计算机总是在重复做基础的事情。在完成了 Codecademy 上的一到两个课程之后，你可能能够感受一些天书般的编程术语，但是对你来说，一台计算机仍然只是一台能够以某种方式将天书般的字符转化为运行的软件的魔法机器。但这并不是计算机认知。
---
1. Robert Albury and David Allen, Microelectronics, report (1979). [↩︎](#fnref1)
2. Gregg Williams, “Microcomputing, British Style”, Byte Magazine, 40, January 1983, accessed on March 31, 2019, . [↩︎](#fnref2)
3. John Radcliffe, “Toward Computer Literacy,” Computer Literacy Project Achive, 42, accessed March 31, 2019, [https://computer-literacy-project.pilots.bbcconnectedstudio.co.uk/media/Towards Computer Literacy.pdf](https://computer-literacy-project.pilots.bbcconnectedstudio.co.uk/media/Towards%20Computer%20Literacy.pdf). [↩︎](#fnref3)
4. David Allen, “About the Computer Literacy Project,” Computer Literacy Project Archive, accessed March 31, 2019, . [↩︎](#fnref4)
5. ibid. [↩︎](#fnref5)
6. Williams, 51. [↩︎](#fnref6)
7. Radcliffe, 11. [↩︎](#fnref7)
8. Radcliffe, 5. [↩︎](#fnref8)
---
via: 
作者：[Two-Bit History](https://twobithistory.org) 选题：[lujun9972](https://github.com/lujun9972) 译者：[CanYellow](https://github.com/CanYellow) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出