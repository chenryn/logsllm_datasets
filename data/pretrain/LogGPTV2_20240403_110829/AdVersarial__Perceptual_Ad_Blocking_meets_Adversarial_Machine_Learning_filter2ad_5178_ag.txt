### Symposium on Usable Privacy and Security. ACM, 4.

#### References
1. Ennèl van Eeden and Wilson Chow. 2018. Perspectives from the Global Entertainment & Media Outlook 2018–2022. https://www.statista.com/topics/1176/online-advertising/
2. Antoine Vastel, Peter Snyder, and Benjamin Livshits. 2018. Who Filters the Filters: Understanding the Growth, Usefulness and Efficiency of Crowdsourced Ad Blocking. arXiv preprint arXiv:1810.09160 (2018).
3. Craig E Wills and Doruk C Uzunoglu. 2016. What ad blockers are (and are not) doing. In IEEE Workshop on Hot Topics in Web Systems and Technologies. IEEE.
4. Xinyu Xing, Wei Meng, Byoungyoung Lee, Udi Weinsberg, Anmol Sheth, Roberto Perdisci, and Wenke Lee. 2015. Understanding Malvertising Through Ad-Injecting Browser Extensions. In International Conference on World Wide Web.
5. Guixin Ye, Zhanyong Tang, Dingyi Fang, Zhanxing Zhu, Yansong Feng, Pengfei Xu, Xiaojiang Chen, and Zheng Wang. 2018. Yet Another Text Captcha Solver: A Generative Adversarial Network Based Approach. In ACM SIGSAC Conference on Computer and Communications Security. ACM.
6. Shitong Zhu, Xunchao Hu, Zhiyun Qian, Zubair Shafiq, and Heng Yin. 2018. Measuring and Disrupting Anti-Adblockers Using Differential Execution Analysis. In Network and Distributed System Security Symposium (NDSS).

### The Ad-Block Detection Arms Race

Many publishers actively detect the presence of ad-blockers [42, 58, 60] and take actions ranging from user warnings to service disabling for ad-block users. Ad-block detection operates along three main axes [81]:
1. Detecting the absence of known ads.
2. Injecting "honeypots" and detecting that they are mistakenly blocked.
3. Detecting ad-blocking code through side-channels (e.g., timing).

Perceptual ad-blockers cannot be detected server-side as they do not alter any web requests. To remain stealthy, a perceptual ad-blocker must fool publisher JavaScript code into observing an unmodified DOM [81]. This challenge is surmountable for native in-browser ad-blockers, which can modify the user’s view without affecting the DOM. However, most modern ad-blockers are browser extensions with limited privileges, sharing the same JavaScript API as client scripts. Storey et al. [81] outline the following arms race for a stealthy ad-blocker:
1. The ad-blocker modifies the DOM to block or mask detected ads and honeypots, then overwrites the JavaScript DOM traversal API (e.g., with JavaScript proxies) so that the publisher's code sees the original DOM.
2. The publisher inspects changes to global APIs using the `toString()` method to unveil changes on the function.
3. The ad-blocker overwrites the universal `toString()` method used by all JavaScript functions, ensuring it always returns the same value as for a non-blocked website.

We argue that this is not the end of the arms race. Three strategies to detect or reverse the above ad-blocker modifications are:
1. **Borrowing Native Functions**: A publisher creates an iframe, which gets a new JavaScript environment, and extracts a "fresh" native function (e.g., `toString`) from it to unveil changes. The ad-blocker must intercept all iframe creations and re-apply the same changes.
2. **Detecting Non-Native Functions**: The `toString` method is native (implemented by the browser). Some properties differ between native and non-native functions and are not easily mockable (e.g., setting a native function’s arguments property raises an error, whereas this property can be set for JavaScript functions).
3. **Timing**: If the above attacks are solved by emulating large portions of native JavaScript, the performance overhead may lead to a strong timing side-channel.

### Training a Page-Based Ad-Blocker

Since the trained neural network of Sentinel [10] is not available for evaluation, we trained one for the analysis in Section 4, using the same architecture as Sentinel, i.e., YOLO (v3) [70–72].

#### B.1 Data Collection

YOLO is an object detection network. Given an image, it returns a set of bounding boxes for each detected object. To train and evaluate YOLO, we created a dataset of labeled web page screenshots where each label encodes the coordinates and dimensions of an ad on the page. The dataset was created with an ad-hoc automated system that operates in two steps:
1. **Ad Identification**: Given a URL, the system retrieves the web page and identifies the position of ads using filter lists of traditional ad-blockers. It then generates a web page template where ads are replaced with placeholder boxes.
2. **Image Generation**: From each web page template, we derive multiple images by placing ads on the template.

**Web Pages**: We acquired web pages by retrieving the URLs of the top 30 news websites of each G20 nation listed in allyoucanread.com. For each news site, we searched for the RSS feed URLs and discarded sites with no RSS feeds. The total number of RSS feed URLs is 143. We visited each RSS feed URL daily and fetched the URLs to the daily news.

**Template Generation**: Given a URL of a news article, we generate a page template using a modified HTTP proxy that matches incoming HTTP requests against traditional ad-blocker filter lists (Easylist [3] and Ghostery [5]). The proxy replaces ad contents with monochrome boxes using a unique color for each ad. These boxes are placeholders for inserting new ads. We manually inspected all templates to remove pages with broken layouts or visible ads due to false positives or negatives in the filter lists.

**Image Generation**: From each page template, we generate multiple images by replacing placeholder boxes with ads. We selected ads from the dataset of Hussain et al. [40], which contains about 64K images of ads of variable sizes and ratios, complemented by 136 ads retrieved online. To insert pictures inside a template, we follow four strategies:
1. Directly replace the placeholder with an ad.
2. Replace the placeholder with an ad and include an AdChoices logo in the top right corner.
3. Augment templates without placeholders by adding a large ad popup, darkening the page to highlight the ad.
4. Insert ads as the background of the website, fully covering the left- and right-hand margins.

When inserting an ad, we select an image with a similar aspect ratio. If an exact match is not found, we resize the image using Seam Carving [13], a content-aware image resizing algorithm. To avoid overfitting, each ad image is used no more than 20 times.

#### B.2 Evaluation and Results

**Datasets**:
- **Training Set**: 2,901 images, of which 2,600 have ads. 1,600 images with ads were obtained with placeholder replacement, 800 with placeholder replacements with AdChoices logos, 100 with background ads, and 100 with interstitials.
- **Evaluation Set**: 2,684 images—2,585 with ads and 99 without ads. 1,595 images with placeholder replacement, 790 images with placeholder replacement with AdChoices logos, 100 images with background ads, and 100 images with interstitials. We also compiled a second evaluation set from 10 domains not used for training, resulting in 50 screenshots overall with a total of 75 advertisements.

**Model Training**: We trained using the default configuration of YOLOv3 [72], adapted for a unary classification task.

**Accuracy and Performance**:
- **First Evaluation Set**: Mean average precision of 90.88%, average intersection over union of 84.23%, and F1-score of 0.96.
- **Second Evaluation Set**: Mean average precision of 87.28%, average intersection over union of 77.37%, and F1-score of 0.85.

A video demonstrating our model detecting ads on five never-seen websites is available at https://github.com/ftramer/ad-versarial/blob/master/videos.

**Performance**: On an Intel Core i7-6700 CPU, the prediction for a single image took 650ms.

**Inspecting Our Model**: We conducted a preliminary study of the inner workings of our neural network. By inspecting the model’s activation map on different inputs, we found that the model mainly focuses on the layout of ads in a page rather than their visual content. This shows that our ad-blocker detects ads using very different visual signals than humans. This raises an intriguing question about the Sentinel model of Adblock Plus [10], which was trained solely on Facebook data, where ads are visually close to the website’s native content. Thus, it seems less likely that Sentinel would have learned to detect ads using layout information.

To generate the map in Figure 12, we computed the absolute value of the gradient of the network’s output with respect to every input pixel, applied a smoothing Gaussian kernel over the resulting image, and overlaid the gradient map on the original input.

### Extra Tables and Figures

**Table 3: Evaluation Data for Adversarial Examples**
| Website          | Images | Iframes | Visible Ads | Total Ads | AdChoices |
|------------------|--------|---------|-------------|-----------|-----------|
| reddit.com       | 2      | 2       | 2           | 30        | 2         |
| cnn.com          | 3      | 7       | 3           | 865       | 7         |
| nytimes.com      | 2      | 4       | 3           | 70        | 3         |
| theguardian.com  | 3      | 8       | 3           | 89        | 8         |
| indiatimes.com   | 3      | 5       | 3           | 75        | 5         |
| weather.com      | 3      | 7       | 3           | 125       | 7         |
| news.yahoo.com   | 3      | 11      | 3           | 144       | 11        |
| washingtonpost.com | 3     | 5       | 3           | 100       | 5         |
| foxnews.com      | 4      | 6       | 4           | 40        | 6         |
| huffingtonpost.com | 4    | 9       | 4           | 96        | 9         |

**Figure 12: Activation Maps of our Ad Detection Model**
The most salient features appear to be the surroundings of ads rather than their visual content.

**Figure 13: Attack on the Percival Browser from [84]**
- **(a) Original Page**: The ad banner is correctly detected.
- **(b) Page displayed in Chromium**: A dummy web page is displayed in the standard Chromium browser with two ads (top), an adversarially perturbed ad (middle), and two adversarial opaque boxes (bottom).
- **(c) Page displayed in Percival**: The same page is displayed in the Percival browser. The two unperturbed ads on top are correctly blocked, but the adversarial ad evades detection, and the adversarial opaque boxes are mistakenly blocked.

**Figure 14: Universal Adversarial Examples for Page-Based Ad-Blockers on BBC.com**
- **(a) Attack C3-C4**: The publisher perturbs the white background beneath the ad to evade ad-blocking (C4). Alternatively, an ad network adds a universal mask on the ad (C3, not displayed here for brevity). In both cases, the perturbation is invisible to the user.
- **(b) Attack C1**: The publisher adds a honeypot element to the page header (top-right) to detect an ad-blocker.

This comprehensive and structured approach ensures clarity, coherence, and professionalism in the text.