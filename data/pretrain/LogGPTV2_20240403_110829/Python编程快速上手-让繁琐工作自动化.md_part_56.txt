690 860
690 1075
> >> catCopyTwo.save('tiled.png')
这里，我们将catIm的高度的宽度保存在catImWidth和catImHeight中。在，我
们得到了catIm的副本，并保存在catCopyTwo。既然有了一个副本可以粘贴，我们就
开始循环，将faceIm粘贴到catCopyTwo。外层for循环的left变量从0开始，增量
是faceImWidth（即230）。内层for循环的top变量从0开始，增量是faceImHeight（即
215）。这些嵌套的for循环生成了left和top的值，将faceIm图像按照网格粘贴
到 Image 对象 catCopyTwo，如图17-6 所示。为了看到嵌套循环的工作，我们打印
了left和top。粘贴完成后，我们将修改后的catCopyTwo保存到tiled.png。
图17-6 嵌套的for循环与paste()，用于复制猫脸（可以称之为dupli-cat）
17.2.4 调整图像大小
resize()方法在Image对象上调用，返回指定宽度和高度的一个新Image对象。
它接受两个整数的元组作为参数，表示返回图像的新高度和宽度。在交互式环境中
输入以下代码：
 >>> width, height = catIm.size
 >>> quartersizedIm = catIm.resize((int(width / 2), int(height / 2)))
>>> quartersizedIm.save('quartersized.png')
 >>> svelteIm = catIm.resize((width, height + 300))
>>> svelteIm.save('svelte.png')
这里，我们将catIm.size元组中的两个值赋给变量width和height。使用width
第17章 操作图像 335
和height，而不是catIm.size[0]和catIm.size[1]，让接下来的代码更易读。
第一个resize()调用传入int(width / 2)作为新宽度，int(height / 2)作为新高度，
所以resize()返回的Image对象具有原始图像的一半长度和宽度，是原始图像大小的
四分之一。resize()方法的元组参数中只允许整数，这就是为什么需要用int()调用对
两个除以2的值取整。
这个大小调整保持了相同比例的宽度和高度。但传入resize()的新宽度和高度不
必与原始图像成比例。svelteIm变量保存了一个Image对象，宽度与原始图像相同，
但高度增加了300像素，让Zophie显得更苗条。
请注意，resize()方法不会在原图上修改Image对象，而是返回一个新的Image对象。
粘贴透明像素
通常透明像素像白色像素一样粘贴。如果要粘贴图像有透明像素，就将该图
像作为第三个参数传入，这样就不会粘贴一个不透明的矩形。这个第三参数是“遮
罩”Image 对象。遮罩是一个 Image 对象，其中 alpha 值是有效的，但红、绿、
蓝值将被忽略。遮罩告诉paste()函数哪些像素应该复制，哪些应该保持透明。遮
罩的高级用法超出了本书的范围，但如果你想粘贴有透明像素的图像，就再传入
该Image对象作为第三个参数。
17.2.5 旋转和翻转图像
图像可以用rotate()方法旋转，该方法返回旋转后的新Image对象，并保持原始
Image对象不变。rotate()的参数是一个整数或浮点数，表示图像逆时针旋转的度数。
在交互式环境中输入以下代码：
>>> catIm.rotate(90).save('rotated90.png')
>>> catIm.rotate(180).save('rotated180.png')
>>> catIm.rotate(270).save('rotated270.png')
注意，可以连续调用方法，对rotate()返回的Image对象直接调用save()。第一
个rotate()和save()调用得到一个逆时针旋转90度的新Image对象，并将旋转后的图
像存入rotated90.png。第二和第三个调用做的事情一样，但旋转了180度和270度。
结果如图17-7所示。
图17-7 原始图像（左）和逆时针旋转90度、180度和270度的图像
336 Python编程快速上手——让繁琐工作自动化
注意，当图像旋转90度或270度时，宽度和高度会变化。如果旋转其他角度，
图像的原始尺寸会保持。在Windows上，使用黑色的背景来填补旋转造成的缝隙，
如图17-8所示。在OS X上，使用透明的像素来填补缝隙。rotate()方法有一个可选
的 expand 关键字参数，如果设置为 True，就会放大图像的尺寸，以适应整个旋转
后的新图像。例如，在交互式环境中输入以下代码：
>>> catIm.rotate(6).save('rotated6.png')
>>> catIm.rotate(6, expand=True).save('rotated6_expanded.png')
第一次调用将图像旋转6度，并存入rotate.png（参见图17-8的左边的图像）。第
二次调用将图像旋转6度，expand设置为True，并存入 rotate6_expanded.png（参见
图17-8的右侧的图像）。
图17-8 图像普通旋转6度（左），以及使用expand=True（右）
利用transpose()方法，还可以得到图像的“镜像翻转”。必须向transpose()方法
传入Image.FLIP_LEFT_RIGHT或Image.FLIP_TOP_BOTTOM。在交互式环境中输
入以下代码：
>>> catIm.transpose(Image.FLIP_LEFT_RIGHT).save('horizontal_flip.png')
>>> catIm.transpose(Image.FLIP_TOP_BOTTOM).save('vertical_flip.png')
像 rotate()一样，transpose()会创建一个新 Image 对象。这里我们传入 Image.FLIP_
LEFT_RIGHT，让图像水平翻转，然后存入 horizontal_flip.png。要垂直翻转图像，传
入Image.FLIP_TOP_BOTTOM，并存入vertical_flip.png。结果如图17-9所示。
第17章 操作图像 337
图17-9 原始图像（左），水平翻转（中），垂直翻转（右）
17.2.6 更改单个像素
单个像素的颜色可以通过getpixel()和putpixel()方法取得和设置。它们都接受一个元
组，表示像素的x和y坐标。putpixel()方法还接受一个元组，作为该像素的颜色。这个
颜色参数是四整数RGBA元组或三整数RGB元组。在交互式环境中输入以下代码：
 >>> im = Image.new('RGBA', (100, 100))
 >>> im.getpixel((0, 0))
(0, 0, 0, 0)
 >>> for x in range(100):
for y in range(50):
 im.putpixel((x, y), (210, 210, 210))
>>> from PIL import ImageColor
 >>> for x in range(100):
for y in range(50, 100):
 im.putpixel((x, y), ImageColor.getcolor('darkgray', 'RGBA'))
>>> im.getpixel((0, 0))
(210, 210, 210, 255)
>>> im.getpixel((0, 50))
(169, 169, 169, 255)
> >> im.save('putPixel.png')
在，我们得到一个新图像，这是一个100×100的透明正方形。对一些坐标调
用getPixel()将返回（0，0，0，0），因为图像是透明的。要给图像中的像素上色，
我们可以使用嵌套的 for 循环，遍历图像上半部分的所有像素，用 putpixel()设置每
个像素的颜色。这里我们向putpixel()传入RGB元组（210，210，210），即浅灰色。
假定我们希望图像下半部分是暗灰色，但不知道深灰色的 RGB 元组。putpixel()方
法不接受'darkgray'这样的标准颜色名称，所以必须使用 ImageColor.getcolor()来获得
'darkgray'的颜色元组。循环遍历图像的下半部分像素，向putpixel()传入ImageColor.
getcolor()的返回值，你现在应该得到一个图像，上半部分是浅灰色，下半部分是
深灰色，如图17-10所示。可以对一些坐标调用getPixel()，确认指定像素的颜色符
合你的期望。最后，将图像存入putPixel.png。
338 Python编程快速上手——让繁琐工作自动化
图17-10 putPixel.png中的图像
当然，在图像上一次绘制一个像素不是很方便。如果需要绘制形状，就使用本
章稍后介绍的ImageDraw函数。
17.3 项目：添加徽标
假设你有一项无聊的工作，要调整数千张图片的大小，并在每张图片的角上增
加一个小徽标水印。使用基本的图形程序，如Paintbrush或Paint，完成这项工作需
要很长时间。像 Photoshop 这样神奇的应用程序可以批量处理，但这个软件要花几
百美元。让我们写一个脚本来完成工作。
假定图 17-11 是要添加到每个图像右下角的标识：带有白色边框的黑猫图标，
图像的其余部分是透明的。
图17-11 添加到图像中的徽标
总的来说，程序应该完成下面的事：
• 载入徽标图像。
• 循环遍历工作目标中的所有.png和.jpg文件。
• 检查图片是否宽于或高于300像素。
• 如果是，将宽度或高度中较大的一个减小为300像素，并按比例缩小的另一维度。
• 在角上粘贴徽标图像。
• 将改变的图像存入另一个文件夹。
第17章 操作图像 339
这意味着代码需要做到以下几点：
• 打开catlogo.png文件作为Image对象。
• 循环遍历os.listdir('.')返回的字符串。
• 通过size属性取得图像的宽度和高度。
• 计算调整后图像的新高度和宽度。
• 调用resize()方法来调整图像大小。
• 调用paste()方法来粘贴徽标。
• 调用save()方法保存更改，使用原来的文件名。
第1步：打开徽标图像
针对这个项目，打开一个新的文件编辑器窗口，输入以下代码，并保存为
resizeAndAddLogo.py：
#! python3
# resizeAndAddLogo.py - Resizes all images in current working directory to fit
# in a 300x300 square, and adds catlogo.png to the lower-right corner.
import os
from PIL import Image
 SQUARE_FIT_SIZE = 300
 LOGO_FILENAME = 'catlogo.png'
 logoIm = Image.open(LOGO_FILENAME)
 logoWidth, logoHeight = logoIm.size
# TODO: Loop over all files in the working directory.
# TODO: Check if image needs to be resized.
# TODO: Calculate the new width and height to resize to.
# TODO: Resize the image.
# TODO: Add the logo.
# TODO: Save changes.
在程序开始时设置 SQUARE_FIT_SIZE和 LOGO_FILENAME常量，这让程
序以后更容易修改。假定你要添加的徽标不是猫图标，或者假定将输出图像的最大
大小要减少的值不是300像素。有了程序开始时定义的这些常量，你可以打开代码，
修改一下这些值，就大功告成了（或者你可以让这些常量的值从命令行参数获得）。
没有这些常数，就要在代码中寻找所有的300和'catlogo.png'，将它们替换新项目的
值。总之，使用常量使程序更加通用。
徽标Image对象从Image.open()返回。为了增强可读性，logoWidth和logoHeight
被赋予logoIm.size中的值。
该程序的其余部分目前是TODO注释，说明了程序的骨架。
340 Python编程快速上手——让繁琐工作自动化
第2步：遍历所有文件并打开图像
现在，需要找到当前工作目录中的每个PNG文件和.jpg文件。请注意，你不希
望将徽标图像添加到徽标图像本身，所以程序应该跳过所有像 LOGO_FILENAME
这样的图像文件名。在程序中添加以下代码：
#! python3
# resizeAndAddLogo.py - Resizes all images in current working directory to fit
# in a 300x300 square, and adds catlogo.png to the lower-right corner.
import os
from PIL import Image
--snip--
os.makedirs('withLogo', exist_ok=True)
# Loop over all files in the working directory.
 for filename in os.listdir('.'):
 if not (filename.endswith('.png') or filename.endswith('.jpg')) \
or filename == LOGO_FILENAME:
 continue # skip non-image files and the logo file itself
 im = Image.open(filename)
width, height = im.size
- -snip--
首先，os.makedirs()调用创建了一个文件夹withLogo，用于保存完成的、带有徽标
的图像，而不是覆盖原始图像文件。关键字参数 exist_ok=True 将防止 os.makedirs()在
withLogo已存在时抛出异常。在用os.listdir('.')遍历工作目录中的所有文件时，较
长的if语句检查每个filename是否以.png或.jpg结束。如果不是，或者该文件是
徽标图像本身，循环就跳过它，使用 continue去处理下一个文件。如果 filename
确实以'.png'或'.jpg'结束（而且不是徽标文件），可以将它打开为一个Image对象，
并设置width和height。
第3步：调整图像的大小
只在有宽或高超过 SQUARE_FIT_SIZE 时（在这个例子中，是 300 像素），该
程序才应该调整图像的大小，所以将所有大小调整的代码放在一个检查 width 和
height变量的if语句内。在程序中添加以下代码：
#! python3
# resizeAndAddLogo.py - Resizes all images in current working directory to fit
# in a 300x300 square, and adds catlogo.png to the lower-right corner.
import os
from PIL import Image
--snip--
# Check if image needs to be resized.
第17章 操作图像 341
if width > SQUARE_FIT_SIZE and height > SQUARE_FIT_SIZE:
# Calculate the new width and height to resize to.
if width > height:
 height = int((SQUARE_FIT_SIZE / width) * height)
width = SQUARE_FIT_SIZE
else:
 width = int((SQUARE_FIT_SIZE / height) * width)
height = SQUARE_FIT_SIZE
# Resize the image.
print('Resizing %s...' % (filename))
 im = im.resize((width, height))
- -snip--
如果图像确实需要调整大小，就需要弄清楚它是太宽还是太高。如果 width 大
于height，则高度应该根据宽度同比例减小。这个比例是当前宽度除以SQUARE_
FIT_SIZE的值。新的高度值是这个比例乘以当前高度值。由于除法运算符返回一个