```    
GROUPING SETS (    
    ( a, b, c, d ),    
    ( a, b       ),    
    (       c, d ),    
    (            )    
)    
```    
同时cube,rollup,grouping sets还可以混合使用：    
```    
GROUP BY a, CUBE(b,c), GROUPING SETS ((d), (e))    
```    
相当于：    
```    
GROUP BY GROUPING SETS (    
  (a,b,c,d), (a,b,c,e),    
  (a,b,d),   (a,b,e),    
  (a,c,d),   (a,c,e),    
  (a,d),     (a,e)    
)    
```    
既然分组聚合相当于多个group by 的union all，那么我们如何区分当前输出的记录是哪个分组group by的输出呢？    
用grouping(cols)可以表示未参与聚合的表达式的比特位，并转换为INT输出。    
例如：    
```    
=> SELECT * FROM items_sold;    
 make  | model | sales    
-------+-------+-------    
 Foo   | GT    |  10    
 Foo   | Tour  |  20    
 Bar   | City  |  15    
 Bar   | Sport |  5    
(4 rows)    
```    
grouping()中必须包含group by后面的任意或所有列。    
```    
=> SELECT make, model, GROUPING(make,model), sum(sales) FROM items_sold GROUP BY ROLLUP(make,model);    
 make  | model | grouping | sum    
-------+-------+----------+-----    
 Foo   | GT    |        0 | 10    
 Foo   | Tour  |        0 | 20    
 Bar   | City  |        0 | 15    
 Bar   | Sport |        0 | 5    
 Foo   |       |        1 | 30    
 Bar   |       |        1 | 20    
       |       |        3 | 50    
(7 rows)    
```    
grouping()中必须包含group by后面的任意或所有列，不能包含未参与聚合的列。    
grouping()中的每个表达式用1个比特位表示。    
```    
postgres=# create table tbl(c1 int,c2 int,c3 int, c4 int, c5 int);    
CREATE TABLE    
postgres=# select c1,count(*),grouping(c1,c2,c3) from tbl group by cube(c1,c2,c3);    
 c1 | count | grouping     
----+-------+----------    
    |     0 |        7   -- b'111'::int = 7    
(1 row)    
postgres=# select c1,count(*),grouping(c1,c2) from tbl group by cube(c1,c2,c3);    
 c1 | count | grouping     
----+-------+----------    
    |     0 |        3  b'11'::int = 3    
(1 row)    
postgres=# select c1,count(*),grouping(c2) from tbl group by cube(c1,c2,c3);    
 c1 | count | grouping     
----+-------+----------    
    |     0 |        1  b'1'::int = 1    
(1 row)    
postgres=# insert into tbl values (1,2,3,4,5);    
INSERT 0 1    
postgres=# insert into tbl values (1,2,3,4,6);    
INSERT 0 1    
postgres=# insert into tbl values (2,3,4,5,6);    
INSERT 0 1    
postgres=# select c1,count(*),grouping(c2) from tbl group by cube(c1,c2,c3);    
 c1 | count | grouping     
----+-------+----------    
  1 |     2 |        0    
  1 |     2 |        0    
  1 |     2 |        1    
  2 |     1 |        0    
  2 |     1 |        0    
  2 |     1 |        1    
    |     3 |        1    
  1 |     2 |        1    
    |     2 |        1    
  2 |     1 |        1    
    |     1 |        1    
    |     2 |        0    
    |     2 |        0    
    |     1 |        0    
    |     1 |        0    
(15 rows)    
```    
grouping中包含未参与聚合的列将报错：    
```    
postgres=# select c1,count(*),grouping(c4) from tbl group by cube(c1,c2,c3);    
ERROR:  arguments to GROUPING must be grouping expressions of the associated query level    
LINE 1: select c1,count(*),grouping(c4) from tbl group by cube(c1,c2...    
                                    ^    
postgres=# select c1,count(*),grouping(c1,c2,c3,c4) from tbl group by cube(c1,c2,c3);    
ERROR:  arguments to GROUPING must be grouping expressions of the associated query level    
LINE 1: select c1,count(*),grouping(c1,c2,c3,c4) from tbl group by c...    
                                             ^    
postgres=# select c1,count(*),grouping(c1,c2,c3) from tbl group by cube(c1,c2,c3);    
 c1 | count | grouping     
----+-------+----------    
  1 |     2 |        0    
  1 |     2 |        1    
  1 |     2 |        3    
  2 |     1 |        0    
  2 |     1 |        1    
  2 |     1 |        3    
    |     3 |        7    
  1 |     2 |        2    
    |     2 |        6    
  2 |     1 |        2    
    |     1 |        6    
    |     2 |        4    
    |     2 |        5    
    |     1 |        4    
    |     1 |        5    
(15 rows)    
```   
### 2. 子查询  
select子查询只能返回一列    
```  
postgres=# select (select * from (values (1,2),(2,3)) as t(c1,c2)) , relname, relkind from pg_class;    
ERROR:  subquery must return only one column    
LINE 1: select (select * from (values (1,2),(2,3)) as t(c1,c2)) , re...    
               ^    
```  
select子查询只能返回一条记录    
```  
postgres=# select (select * from (values (1),(2)) as t(c1)) , relname, relkind from pg_class;    
ERROR:  more than one row returned by a subquery used as an expression    
```  
子查询可以用在select子句也可以用在源中，还可以用在with, update from语句  
```  
postgres=# select (select * from (values (1),(2)) as t(c1) limit 1) , relname, relkind from pg_class;    
 c1 |                    relname                    | relkind     
----+-----------------------------------------------+---------    
  1 | pg_type                                       | r    
  1 | pg_toast_187550                               | t    
  1 | new_type                                      | c    
  1 | pg_toast_187550_index                         | i    
  1 | test                                          | r    
  1 | pg_toast_187556                               | t    
postgres=# select t.relname from (select * from pg_class limit 1) t , pg_class where t.relname=pg_class.relname;    
 relname     
---------    
 pg_type    
(1 row)    
```   
### 3. union\union all\except\intersect  
两条或者多条查询结果的合并、去重合并、相交、求差。  
union all(不去重)  
```  
postgres=# select * from (values (1),(1)) t(id) union all select * from (values (2),(2)) t(id);  
 id   
----  
  1  
  1  
  2  
  2  
(4 rows)  
```  
union(去重)  
```  
postgres=# select * from (values (1),(1)) t(id) union select * from (values (2),(2)) t(id);  
 id   
----  
  1  
  2  
(2 rows)  
```  
except(去重)  
```  
postgres=# select * from (values (1),(1),(2)) t(id) except select * from (values (2),(2)) t(id);  
 id   
----  
  1  
(1 row)  
```  
intersect(去重)  
```  
postgres=# select * from (values (1),(1),(2)) t(id) intersect select * from (values (2),(2)) t(id);  
 id   
----  
  2  
(1 row)  
```  
### 4. 自连接  
当某个表或者子句的A字段要和B字段进行关联时，可以使用自关联。  
```  
postgres=# create table tbl8(c1 int, c2 int, info text);  
CREATE TABLE  
postgres=# insert into tbl8 select generate_series(1,100), generate_series(2,101),md5(random()::text) ;  
INSERT 0 100  
postgres=# select t1.* from tbl8 t1, tbl8 t2 where t1.c1=t2.c2 and t2.c2  Nested Loop  (cost=2.29..22.93 rows=1 width=69)  
         ->  Nested Loop  (cost=1.86..19.87 rows=1 width=69)  
               ->  Nested Loop  (cost=1.43..16.82 rows=1 width=69)  
                     ->  Nested Loop  (cost=1.00..13.76 rows=1 width=69)  
                           ->  Nested Loop  (cost=0.71..10.84 rows=1 width=36)  
                                 ->  Nested Loop  (cost=0.43..7.93 rows=1 width=36)  
                                       ->  Nested Loop  (cost=0.15..5.03 rows=1 width=36)  
                                             ->  Index Scan using tbl_join_1_pkey on tbl_join_1 t1  (cost=0.15..2.77 rows=1 width=36)  
                                                   Index Cond: (id = 10000)  
                                             ->  Seq Scan on tbl_join_2 t2  (cost=0.00..2.25 rows=1 width=4)  
                                                   Filter: (id = 10000)  
                                       ->  Index Only Scan using tbl_join_3_pkey on tbl_join_3 t3  (cost=0.28..2.89 rows=1 width=4)  
                                             Index Cond: (id = 10000)  
                                 ->  Index Only Scan using tbl_join_4_pkey on tbl_join_4 t4  (cost=0.29..2.90 rows=1 width=4)  
                                       Index Cond: (id = 10000)  
                           ->  Index Scan using tbl_join_5_pkey on tbl_join_5 t5  (cost=0.29..2.91 rows=1 width=37)  
                                 Index Cond: (id = 10000)  
                     ->  Index Only Scan using tbl_join_6_pkey on tbl_join_6 t6  (cost=0.42..3.04 rows=1 width=4)  
                           Index Cond: (id = 10000)  
               ->  Index Only Scan using tbl_join_7_pkey on tbl_join_7 t7  (cost=0.43..3.04 rows=1 width=4)  
                     Index Cond: (id = 10000)  
         ->  Index Only Scan using tbl_join_8_pkey on tbl_join_8 t8  (cost=0.43..3.05 rows=1 width=4)  
               Index Cond: (id = 10000)  
   ->  Index Only Scan using tbl_join_9_pkey on tbl_join_9 t9  (cost=0.43..3.05 rows=1 width=4)  
         Index Cond: (id = 10000)  
(26 rows)  
Time: 8.398 ms  
```  
以下写法显示关联，可以强制JOIN顺序  