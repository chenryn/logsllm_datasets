    [    0xe9] | DUP4                 | None
    [    0xea] | DUP3                 | None
    [    0xeb] | DUP1                 | None
    [    0xec] | DUP3                 | None
    [    0xed] | DUP5                 | None
    [    0xee] | CALLDATACOPY         | None
    [    0xef] | POP                  | None
    [    0xf0] | SWAP5                | None
    [    0xf1] | SWAP8                | None
    [    0xf2] | POP                  | None
    [    0xf3] | PUSH2                | ['0x166']
    [    0xf6] | SWAP7                | None
    [    0xf7] | POP                  | None
    [    0xf8] | POP                  | None
    [    0xf9] | POP                  | None
    [    0xfa] | POP                  | None
    [    0xfb] | POP                  | None
    [    0xfc] | POP                  | None
    [    0xfd] | POP                  | None
    [    0xfe] | JUMP                 | None
传入的变长参数是一个结构体:
    struct string_arg {
        uint offset;
        uint length;
        string data;
    }
`offset+4`表示的是当前参数的`length`的偏移，length为data的长度，data就是用户输入的字符串数据
当有多个变长参数时: `function test3(string a, string b) public {}`
`calldata`的格式如下: `sha3(func)[:4] + a.offset + b.offset + a.length + a.data +
b.length + b.data`
翻译成py代码如下:
    def test3():
        offset = data[4:0x24]
        length = data[offset+4:offset+4+0x20]
        a = data[offset+4+0x20:length]
        offset = data[0x24:0x24+0x20]
        length = data[offset+4:offset+4+0x20]
        b = data[offset+4+0x20:length]
因为参数有固定的模型，因此就算没有从hash表中匹配到函数名，也可以判断出函数参数的个数，但是要想知道变量类型，只能区分出定长、变长变量，具体是`uint`还是`address`，则需要从函数代码，变量的使用中进行判断
##### 变量类型的分辨
在智能合约的OPCDOE中，变量也是有特征的
比如一个`address`变量总会 `& 0xffffffffffffffffffffffffffffffffffffffff`:
    PUSH1                | ['0x0']
    SLOAD                | None
    PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    AND                  | None
上一篇说的mapping和array的储存模型，可以根据SHA3的计算方式知道是映射变量还是数组变量
再比如，`uint`变量因为等同于`uint256`，所以使用`SLOAD`获取以后不会再进行`AND`计算，但是`uint8`却会计算`& 0xff`
所以我们可以`SLOAD`指令的参数和后面紧跟的计算，来判断出变量类型
#### 智能合约代码结构
##### 部署合约
在区块链上，要同步/发布任何信息，都是通过发送交易来进行的，用之前的测试合约来举例，合约地址为:
`0xc9fbe313dc1d6a1c542edca21d1104c338676ffd`, 创建合约的交易地址为:
`0x6cf9d5fe298c7e1b84f4805adddba43e7ffc8d8ffe658b4c3708f42ed94d90ed`
查看下该交易的相关信息:
    > eth.getTransaction("0x6cf9d5fe298c7e1b84f4805adddba43e7ffc8d8ffe658b4c3708f42ed94d90ed")
    {
      blockHash: "0x7f684a294f39e16ba1e82a3b6d2fc3a1e82ef023b5fb52261f9a89d831a24ed5",
      blockNumber: 3607048,
      from: "0x0109dea8b64d87a26e7fe9af6400375099c78fdd",
      gas: 171331,
      gasPrice: 1000000000,
      hash: "0x6cf9d5fe298c7e1b84f4805adddba43e7ffc8d8ffe658b4c3708f42ed94d90ed",
      input: "0x608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561016f806100326000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636b59084d81146100665780638da5cb5b146100a4578063caf44683146100b9578063e3ac5d26146100d3575b600080fd5b34801561007257600080fd5b5061007b6100fa565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100b057600080fd5b5061007b610116565b3480156100c557600080fd5b506100d1600435610132565b005b3480156100df57600080fd5b506100e861013d565b60408051918252519081900360200190f35b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600180549091019055565b600154815600a165627a7a7230582040d052fef9322403cb3c1de27683a42a845e091972de4c264134dd575b14ee4e0029",
      nonce: 228,
      r: "0xa08f0cd907207af4de54f9f63f3c9a959c3e960ef56f7900d205648edbd848c6",
      s: "0x5bb99e4ab9fe76371e4d67a30208aeac558b2989a6c783d08b979239c8221a88",
      to: null,
      transactionIndex: 4,
      v: "0x2a",
      value: 0
    }
我们可以看出来，想一个空目标发送`OPCODE`的交易就是创建合约的交易，但是在交易信息中，却不包含合约地址，那么合约地址是怎么得到的呢?
    function addressFrom(address _origin, uint _nonce) public pure returns (address) {
            if(_nonce == 0x00)     return address(keccak256(byte(0xd6), byte(0x94), _origin, byte(0x80)));
            if(_nonce  0x7f >> sha3.keccak_256(binascii.unhexlify("d7" + "94" + "0109dea8b64d87a26e7fe9af6400375099c78fdd" + "81e4")).hexdigest()[-40:]
    'c9fbe313dc1d6a1c542edca21d1104c338676ffd'
##### 创建合约代码
一个智能合约的OPCODE分为两种，一个是编译器编译好后的创建合约代码，还是合约部署好以后runtime代码，之前我们看的，研究的都是runtime代码，现在来看看创建合约代码，创建合约代码可以在创建合约交易的`input`数据总获取，上面已经把数据粘贴出来了，反汇编出指令如下:
    ; 0x0: main
    [     0x0] | PUSH1                | ['0x80']
    [     0x2] | PUSH1                | ['0x40']
    [     0x4] | MSTORE               | None
    [     0x5] | CALLVALUE            | None
    [     0x6] | DUP1                 | None
    [     0x7] | ISZERO               | None
    [     0x8] | PUSH2                | ['0x10']
    [     0xb] | JUMPI                | None
    [     0xc] | PUSH1                | ['0x0']
    [     0xe] | DUP1                 | None
    [     0xf] | REVERT               | None
    ----------------------------------------------------------------    ; 0x10: loc_10
    [    0x10] | JUMPDEST             | None
    [    0x11] | POP                  | None
    [    0x12] | PUSH1                | ['0x0']
    [    0x14] | DUP1                 | None
    [    0x15] | SLOAD                | None
    [    0x16] | PUSH1                | ['0x1']
    [    0x18] | PUSH1                | ['0xa0']
    [    0x1a] | PUSH1                | ['0x2']
    [    0x1c] | EXP                  | None
    [    0x1d] | SUB                  | None
    [    0x1e] | NOT                  | None
    [    0x1f] | AND                  | None
    [    0x20] | CALLER               | None
    [    0x21] | OR                   | None
    [    0x22] | SWAP1                | None
    [    0x23] | SSTORE               | None
    [    0x24] | PUSH2                | ['0x24f']
    [    0x27] | DUP1                 | None
    [    0x28] | PUSH2                | ['0x32']
    [    0x2b] | PUSH1                | ['0x0']
    [    0x2d] | CODECOPY             | None
    [    0x2e] | PUSH1                | ['0x0']
    [    0x30] | RETURN               | None
代码逻辑很简单，就是执行了合约的构造函数，并且返回了合约的runtime代码，该合约的构造函数为:
    function Test() {
        owner = msg.sender;
    }
因为没有`payable`关键字，所以开头是一个check代码`assert msg.value == 0`
然后就是对`owner`变量的赋值，当执行完构造函数后，就是把runtime代码复制到内存中:
    CODECOPY(0, 0x32, 0x24f)  # mem[0:0+0x24f] = CODE[0x32:0x32+0x24f]
最后在把runtime代码返回: `return mem[0:0x24f]`
在完全了解合约是如何部署的之后，也许可以写一个OPCODE混淆的CTF逆向题
#### 总结
通过了解EVM的数据结构模型，不仅可以加快对OPCODE的逆向速度，对于编写反编译脚本也有非常大的帮助，可以对反编译出来的代码进行优化，使得更加接近源码。
在对智能合约的OPCODE有了一定的了解后，后续准备先写一个EVM的调试器，虽然Remix已经有了一个非常优秀的调试器了，但是却需要有`Solidity`源代码，这无法满足我测试无源码的OPCODE的工作需求。所以请期待下篇《以太坊智能合约OPCODE逆向之调试器篇》
* * *
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队：   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
#### 引用
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
* * *