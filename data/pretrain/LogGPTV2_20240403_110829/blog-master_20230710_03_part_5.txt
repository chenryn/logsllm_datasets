# bug : ERROR:  extension "pg_net" has no installation script nor update path for version "0.7.3" 
# cd $TEMP_DIR/pg_net/sql
# cp -f -n ./pg_net.sql ./pg_net--0.7.3.sql /usr/share/postgresql/14/extension/
cd $TEMP_DIR
wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2 | tar jxf -
cd $TEMP_DIR/scws-1.2.3 
./configure 
make install 
cd $TEMP_DIR
git clone --depth 1 https://github.com/amutu/zhparser.git
cd $TEMP_DIR/zhparser 
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config make && make install
cd $TEMP_DIR
git clone --depth 1 https://github.com/pramsey/pgsql-http
cd $TEMP_DIR/pgsql-http
USE_PGXS=1 make install
cd $TEMP_DIR
git clone --depth 1 https://github.com/pgsentinel/pgsentinel
cd $TEMP_DIR/pgsentinel/src
USE_PGXS=1 make install
cd $TEMP_DIR
git clone --depth 1 https://github.com/postgrespro/zson
cd $TEMP_DIR/zson
USE_PGXS=1 make install
cd $TEMP_DIR
cp pg_tiktoken--0.0.1.sql /usr/share/postgresql/14/extension/
cp pg_tiktoken.control /usr/share/postgresql/14/extension/
cp pg_tiktoken.so /usr/lib/postgresql/14/lib/
cd $TEMP_DIR 
git clone --depth 1 --recursive https://github.com/lanterndata/lantern.git
cd $TEMP_DIR/lantern
mkdir build
cd $TEMP_DIR/lantern/build
cmake ..
make install
cd $TEMP_DIR
cp lantern_extras--0.0.3.sql /usr/share/postgresql/14/extension/
cp lantern_extras.control /usr/share/postgresql/14/extension/
cp lantern_extras.so /usr/lib/postgresql/14/lib/
cp lantern-cli /var/lib/postgresql/
chown postgres:postgres /var/lib/postgresql/lantern-cli
cd $TEMP_DIR
git clone --depth 1 -b v1.1.0 https://github.com/hydradatabase/hydra
cd $TEMP_DIR/hydra/columnar
./configure
USE_PGXS=1 make install
cd $TEMP_DIR
mkdir -p /usr/local/onnxruntime
tar vzxf onnxruntime-linux-x64-1.15.1.tgz -C /usr/local/onnxruntime --strip-components=1
echo "/usr/local/onnxruntime/lib" > /etc/ld.so.conf.d/onnxruntime.conf
ldconfig
cd $TEMP_DIR
git clone --depth 1 https://github.com/kibae/onnxruntime-server
cd $TEMP_DIR/onnxruntime-server
cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
cmake --build build --parallel 4
cmake --install build --prefix /usr/local/onnxruntime-server
cd $TEMP_DIR
git clone --depth 1 -b v1.15.1 https://github.com/microsoft/onnxruntime
cp /tmp/onnxruntime/include/onnxruntime/core/session/* /usr/local/onnxruntime/
cd $TEMP_DIR
git clone --depth 1 --recursive https://github.com/kibae/pg_onnx.git
cd $TEMP_DIR/pg_onnx
cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
cmake --build build --target pg_onnx --parallel 4 
cmake --install build/pg_onnx
cd $TEMP_DIR
# curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
# apt-get install -y git-lfs
for ((i=1;i>=0;i=1))
do
  curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
  if [ $? -eq 0 ]; then
    break 
  fi
done
for ((i=1;i>=0;i=1))
do
  apt-get install -y git-lfs
  if [ $? -eq 0 ]; then
    break 
  fi
done
cd $TEMP_DIR
GIT_LFS_SKIP_SMUDGE=1 git clone --depth 1 https://github.com/onnx/models
cd $TEMP_DIR/models
git lfs install
cd $TEMP_DIR
git clone --depth 1 https://github.com/fboulnois/pg_uuidv7
cd $TEMP_DIR/pg_uuidv7
USE_PGXS=1 make install
# apt-get install -y libcurl4-openssl-dev uuid-dev libpulse-dev 
#  cd $TEMP_DIR
# # git clone --depth 1 -b apache-arrow-12.0.1 https://github.com/apache/arrow.git
# git clone --depth 1 -b apache-arrow-14.0.2 https://github.com/apache/arrow.git 
# cd $TEMP_DIR/arrow/cpp  
# mkdir build-release  
# cd $TEMP_DIR/arrow/cpp/build-release  
# 
# # build选项: https://arrow.apache.org/docs/developers/cpp/building.html 
# for ((i=1;i>=0;i=1))
# do
#   # cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED -DARROW_PARQUET=ON -DARROW_ORC=ON -DARROW_S3=ON -DARROW_WITH_LZ4=ON -DARROW_WITH_SNAPPY=ON -DARROW_WITH_ZLIB=ON -DARROW_WITH_ZSTD=ON -DPARQUET_REQUIRE_ENCRYPTION=ON  ..
#   cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED -DARROW_PARQUET=ON .. 
#   if [ $? -eq 0 ]; then
#     break 
#   fi
# done
# 
# for ((i=1;i>=0;i=1))
# do
#   make -j4  
#   if [ $? -eq 0 ]; then
#     break 
#   fi
# done
# 
# make install  
# ldconfig 
# https://arrow.apache.org/install/
cd $TEMP_DIR
apt-get install -y libcurl4-openssl-dev uuid-dev libpulse-dev 
for ((i=1;i>=0;i=1))
do
  apt-get update
  if [ $? -eq 0 ]; then
    break 
  fi
done
apt-get install -y -V ca-certificates lsb-release 
for ((i=1;i>=0;i=1))
do
  wget -T 36000 -t 0 --waitretry=5 https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
  if [ $? -eq 0 ]; then
    break 
  fi
done
apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
for ((i=1;i>=0;i=1))
do
  apt-get update
  if [ $? -eq 0 ]; then
    break 
  fi
done
apt-get install -y -V libarrow-dev # For C++
apt-get install -y -V libarrow-glib-dev # For GLib (C)
apt-get install -y -V libarrow-dataset-dev # For Apache Arrow Dataset C++
apt-get install -y -V libarrow-dataset-glib-dev # For Apache Arrow Dataset GLib (C)
apt-get install -y -V libarrow-acero-dev # For Apache Arrow Acero
apt-get install -y -V libarrow-flight-dev # For Apache Arrow Flight C++
apt-get install -y -V libarrow-flight-glib-dev # For Apache Arrow Flight GLib (C)
apt-get install -y -V libarrow-flight-sql-dev # For Apache Arrow Flight SQL C++
apt-get install -y -V libarrow-flight-sql-glib-dev # For Apache Arrow Flight SQL GLib (C)
apt-get install -y -V libgandiva-dev # For Gandiva C++
apt-get install -y -V libgandiva-glib-dev # For Gandiva GLib (C)
apt-get install -y -V libparquet-dev # For Apache Parquet C++
apt-get install -y -V libparquet-glib-dev # For Apache Parquet GLib (C)
cd $TEMP_DIR
git clone --depth 1 https://github.com/adjust/parquet_fdw 
cd $TEMP_DIR/parquet_fdw
make install 
cd $TEMP_DIR  
git clone --depth 1 https://github.com/pgspider/sqlite_fdw
cd $TEMP_DIR/sqlite_fdw
USE_PGXS=1 make  
USE_PGXS=1 make install
cd $TEMP_DIR
cp pg_bm25--0.5.3.sql /usr/share/postgresql/14/extension/
cp pg_bm25.control /usr/share/postgresql/14/extension/
cp pg_bm25.so /usr/lib/postgresql/14/lib/
cd $TEMP_DIR
cp pg_analytics--0.5.3.sql /usr/share/postgresql/14/extension/
cp pg_analytics.control /usr/share/postgresql/14/extension/
cp pg_analytics.so /usr/lib/postgresql/14/lib/
cd $TEMP_DIR
cp pg_search--0.0.0.sql /usr/share/postgresql/14/extension/
cp pg_search.control /usr/share/postgresql/14/extension/
cp pg_search.so /usr/lib/postgresql/14/lib/
cd $TEMP_DIR
cp pg_sparse--0.0.0.sql /usr/share/postgresql/14/extension/
cp pg_sparse.control /usr/share/postgresql/14/extension/
cp pg_sparse.so /usr/lib/postgresql/14/lib/
cd $TEMP_DIR  
git clone --depth 1 -b 14.3 https://github.com/ossc-db/pg_statsinfo  
cd $TEMP_DIR/pg_statsinfo  
PG_LDFLAGS=-L/usr/lib/postgresql/14/lib make  
PG_LDFLAGS=-L/usr/lib/postgresql/14/lib make install  
cd /usr/lib/postgresql/14  
git clone --depth 1 -b 14.0 https://github.com/ossc-db/pg_stats_reporter
cd $TEMP_DIR/
git clone --depth 1 https://gitlab.com/pg_proctab/pg_proctab
cd $TEMP_DIR/pg_proctab
USE_PGXS=1 make install
apt-get install -y libelf-dev
cd $TEMP_DIR/
git clone --depth 1 https://gitlab.com/pg_top/pg_top
cd $TEMP_DIR/pg_top
cmake CMakeLists.txt
USE_PGXS=1 make install
cd $TEMP_DIR/
wget https://golang.org/dl/go1.17.linux-amd64.tar.gz
tar -zxvf go1.17.linux-amd64.tar.gz -C /usr/local/
export PATH=/usr/local/go/bin:${PATH}
echo "export PATH=/usr/local/go/bin:${PATH}" >>/root/.bashrc 
echo "export PATH=/usr/local/go/bin:${PATH}" >>/var/lib/postgresql/.bash_profile  
cd $TEMP_DIR/
git clone --depth 1 https://github.com/lesovsky/pgcenter
cd $TEMP_DIR/pgcenter
make dep
make build
make install
# pgadmin4 apt 安装目前仅支持x86. arm需要源码安装
cd $TEMP_DIR/
curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg
sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list'
for ((i=1;i>=0;i=1))
do
  apt-get update
  if [ $? -eq 0 ]; then
    break 
  fi
done
for ((i=1;i>=0;i=1))
do
  apt-get install -y pgadmin4-web
  if [ $? -eq 0 ]; then
    break 
  fi
done
# apt-get install -y pgadmin4
# apt-get install -y pgadmin4-web
# docker内不支持systemctl, 需要修改 /usr/pgadmin4/bin/setup-web.sh systemctl 控制的apache2服务全部改成如下: 
#     /etc/init.d/apache2 start 
#     /etc/init.d/apache2 restart
# #COMMAND="systemctl restart ${APACHE}"
# /etc/init.d/apache2 restart
# #if ! systemctl enable ${APACHE}; then
# if ! /etc/init.d/apache2 start; then
# if ! systemctl start ${APACHE}; then
# if ! /etc/init.d/apache2 start; then
# 启动pgadmin4 web: 