in Section 2. We lazily destroy unused sandboxes once
we exceed a ﬁxed threshold. We determine this threshold
experimentally. Most webpages have a large number of
compressed media ﬁles as compared to the number of images
(§7.1). Since we can only reasonably scale to 250 sandboxes
(§7.5.3), we conservatively use a threshold 10 sandboxes
for JPEG and PNG image decoding, and 50 sandboxes for
webpage decompression. Browsers do not typically play mul-
tiple audio or video content simultaneously—we thus simply
create a fresh sandbox for each audio and video ﬁle that must
be decoded and destroy the sandbox immediately after.
Switching synchronization modes. For the Process sand-
box, we switch between spinlocks and conditional variables
according to two policies. First, we use spinlocks when the
renderer performs a latency sensitive task, such as decoding
an image using a series of synchronous libjpeg function
calls and callbacks. But, when the renderer requests more
input data, we switch to the condition variables; spinlocks
would create needless CPU contention while waiting for
this data (often from the network). Second, for large media
decoding such as 4K images, we use condition variables:
each function call to the sandbox process takes a large
amount of time (relative to the context switch) to perform
part of the decoding. Though we can use more complex
policies (e.g., that take load into effect), we ﬁnd these two
simple policies to perform relatively well (§7).
Leveraging multiple cores. Since 95% of devices that run
Firefox have more than 1 core, we can use multiple cores to
optimize our sandbox performance.7 In particular, our pro-
cess sandbox implementation pins the sandboxed process on
a separate CPU core from the renderer process to avoid unnec-
essary context switches between the renderer and sandboxed
process. This is particularly important when using spinlocks
since the sandbox process’s spinlock takes CPU cycles even
when “not in use”; pinning this process to a separate core en-
sures that the sandbox process does not degrade the renderer
performance. In our evaluation (§7), we reserve one of the sys-
tem’s cores exclusively for the processes created by our sand-
boxing mechanism, when comparing against the stock and SFI
builds (which use all cores for the renderer process’ threads).
7 Evaluation
We present the following results:
(cid:73) Cross origin resources that could compromise the renderer
are pervasive, and could even be used to compromise web-
sites like Gmail. We present measurements of their preva-
lence in the Alexa top 500 websites in section 7.1.
(cid:73) Library sandboxing overheads are modest: section 7.2
breaks down the individual sources of sandboxing over-
head, section 7.4, shows end-to-end page latencies and
memory overheads for popular websites are modest with
both isolation mechanisms(§6.2)–even on media heavy
websites, section 7.5, shows that the CPU overhead of web
page decompression and image decoding in the renderer
process are modest, and that CPU and memory overheads
scale well up to our current maximum of 250 concurrent
sandboxes.
(cid:73) Migrating a library into RLBox typically takes a few days
with modest effort, as shown in Section 7.3.
(cid:73) RLBox is broadly useful for library sandboxing beyond
Firefox, as demonstrated in 7.6, where we discuss our
experience apply RLBox to sandboxing native libraries in
Apache and Node.js modules.
Machine Setup. All benchmarks run on an Intel i7-6700K
(4 GHz) machine with 64 GB of RAM, and hyperthreading
disabled, running 64-bit Ubuntu 18.04.1. Firefox builds run
pinned on two isolated CPU cores (i.e., no other process is
allowed to run on these CPUs), to reduce noise. As discussed
in Section 6.3, with the process sandbox build, the renderer
7See https://data.firefox.com/dashboard/hardware, last visited
May 15, 2019.
USENIX Association
29th USENIX Security Symposium    709
7.2 Baseline RLBox overhead
To understand the overhead of different parts of the
RLBox framework in isolation we perform several
micro-benchmarks.
Sandbox creation overhead. The overhead of sandbox
creation is ≈1ms for SFI sandboxes and ≈2ms for process
sandboxes. These overheads do not affect page latency for
any realistic website, and can be hidden by pre-allocating
sandboxes in a pool. For this reason, we don’t include
sandbox creation time in the remaining measurements.
Control transfer overhead. To understand the overhead
of a control transfer, we measure the elapsed time for an
empty function call with different isolation mechanisms. For
reference, an empty function call without sandboxing takes
about 0.02µs in our setup. With sandboxing, we measured
this to be 0.22µs for SFI sandboxes, 0.47µs for Process
sandboxes using spinlocks, and 7.4µs for Process sandboxes
using conditional variables. SFI and Process sandboxes using
spinlocks are an order of magnitude slower than a normal
function call, but over 10× faster than Processes using
condition variables, and are thus better suited for workloads
with frequent control transfers.
Overhead of RLBox dynamic checks. The RLBox API in-
troduces small overheads with its safety checks (e.g., pointer
bounds checks, swizzling, and data validation functions). To
measure these, we compare the overhead of rendering .jpeg
and .png images on Firefox with sandboxed libraries with
and without RLBox enabled. We ﬁnd the difference to be neg-
ligible ( granularity can
signiﬁcantly reduce the renderer attack surface. Although not
all cross-origin content is necessarily untrusted, the origin
is nevertheless an important trust boundary in practice—and
many websites do consider cross-origin media untrusted.
For instance, Google allows users to freely upload content
to sites.google.com, but serves such media content from
googleusercontent.com. Google even re-encodes images,
another sign that such images are untrusted.
Unfortunately, they do not re-encode video or audio ﬁles.
To test this, we created a page on sites.google.com in
which we embedded both the VPX video proof of concept
exploit of CVE-2015-4506 [10] and the OGG audio proof
of concept exploit of CVE-2018-5148 [11]. In both cases the
ﬁles were unmodiﬁed. For VPX, we modiﬁed Firefox and
Chrome (with Site Isolation) to re-introduce the VPX bug
and visited our malicious website: in both browsers the video
successfully triggered the bug.
We found we could include such malicious content as part
of an email to a Gmail address. Gmail re-encodes images,
but does not re-encode the video and audio ﬁles. The Gmail
preview feature even allows us to play the audio track—which
surprisingly, we found was hosted on mail.google.com.
710    29th USENIX Security Symposium
USENIX Association
0100200300400500Alexa Top-500 Sites (sorted by total cross-origin resources)0200400# cross-origin resourcesjpeggifpngother image (e.g. svg, webp)other (font, video, audio)Effort saved by
RLBox automation
Manual effort
Task
Generated marshaling code
Automatic pointer swizzles for function calls
Automatic nested pointer swizzles
Automatic pointer bounds checks
Number of validator sites found
Number of person-days porting to RLBox
Application LOC before/after port
Number of unique validators needed
Average LOC of validators
30
17
28
–
11
96
5
51
–
14
5
6
10
1 day
649 / 757
3
2 LOC
36
8
5
3
720 / 1058
847 / 1317
3 days
220 / 297
3 days
286 / 368
2 days
328 / 395
3 LOC
4 LOC
3 LOC
2 LOC
2 LOC
46
9
2
2
34
5
4
2
JPEG
Decoder
133 LOC
PNG
Decoder
278 LOC
GZIP
Decompress
38 LOC
Theora
Decoder
39 LOC
VPX
Decoder
60 LOC
OGG-Vorbis
Decoder
59 LOC
64 checks
25 checks
8 checks
12 checks
15 checks
14 checks
Figure 3: Manual effort required to retroﬁt Firefox with ﬁne grain isolation, including the effort saved by RLBox’s automation. We do not
report the number of days it took to port the JPEG and PNG decoders since we ported them in sync with building RLBox.
Figure 4: Impact of sandboxing on page load latencies and peak memory usage overheads. Firefox with SFI sandboxes incurs a 3% page
latency and 25% memory overhead while Firefox with process isolation incurs a 13% page latency and a 18% memory overhead.
C++ templates and meta-programming. Second, RLBox auto-
matically swizzles pointers. This is necessary for any sandbox
functions or callbacks that accept pointers; it’s also necessary
when handling data-structures with nested pointers that are
shared between the application and the sandbox. This is a par-
ticularly challenging task without RLBox, as manually iden-
tifying the 297 locations where the application interacts with
such pointers would have been tedious and error-prone. Third,
RLBox automatically performs bounds checks (§4.2); the
number of required pointer bounds checks that were automat-
ically performed by RLBox are again in the hundreds (138).
Finally, RLBox identiﬁes the (100) sites where we
must validate tainted data (§4.3). Though RLBox cannot
automate the validators, we ﬁnd that we only need 35 unique
validators—all less than 4 lines of code. In practice, we
found this to be the hardest part of migration since it requires
understanding the domain-speciﬁc invariants.
7.4 RLBox overhead in Firefox
We report the end-to-end overheads of Firefox with library
sandboxing by measuring page latencies of webpages, mem-
ory overheads in Firefox as well as audio video playback rates.
Experimental setup. We evaluate end-to-end performance
with six sandboxed libraries: libjpeg-turbo 1.4.3, libpng 1.6.3,
zlib 1.2.11, libvpx 1.6.1, libtheora 1.2, and libvorbis as used
in Firefox 57.0.4. We report performance for two Firefox
builds that use libraries sandboxed with SFI and Process
mechanisms respectively. Both builds create fresh sandboxes
for each 
combination as described in §2. We measure impact on page
load times for both these builds.
7.4.1 End-to-end impact on real-world websites
Benchmark. We report the overhead of page load latency
and memory overheads in Firefox with the six sandboxed
libraries by measuring latencies of the 11 websites used
to measure the overhead of Site Isolation [41]. These
websites are a representative sample of both popular and
slightly-less-popular websites, and many of them make
heavy use of media resources. We measure page load latency
using Firefox’s Talos test harness [32]. We measure memory
overheads with cgmemtime [46]—in particular, the peak
resident memory and cache usage during a run of Firefox.
We run the test 10 times and report the median values of page
latency and memory overheads.
Results. As shown in Figure 4, the page latency and CPU
utilization overheads are modest. Our SFI build incurs a 3%
overhead in page latency while the Process sandbox incurs