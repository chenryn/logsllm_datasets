by the attacker, we have tie = aWin in the new state if
Hashnew is smaller than the previous Hashc or tie = aLose
if Hashnew is equal to or bigger than the previous Hashc.
if la = lc − 1 and Hashc = 3 in the
As an example,
post-publishing state, the probability that the next state is
(la+1, lc, tienew = aWin) is α×3/10, as the attacker can only
win the tie with Hashnew = 0, 1, or 2; the probability that the
next state is (la + 1, lc, tienew = aLose) is α × (10 − 3)/10.
The same rule is followed for updating tie when the public
chain is catching up from behind the attacker chain.
= Hash1
APPENDIX B
UDTB MDP DESIGN
A. State Space
As the probability of winning a tie is ﬁxed to 50%, there is
no need to encode the hashes of the latest blocks. Therefore,
we can simplify the state representation of the previous MDP
as follows. (1) When la  0, a state is a 3-tuple (la, lc, tie).
B. Actions
The action set is the same with the previous MDP. Ac-
cording to the action set completeness proof in Appendix
A of [4], this set covers all rational actions. Note that the
proof is not applicable to SHTB as blocks in SHTB are not
interchangeable: a block with smaller hash is more likely to
win a tie.
α/2 and the same to (la + 1, lc, aLose). Second, when la > lc
in the post-publishing state and the new block is mined by
the compliant miners, the transition probability to the new
state (la, lc + 1, aW in) is (1− α)/2 and the same to (la, lc +
1, aLose). At last, when la = lc in the post-publishing state
and the new block is mined by the compliant miners, tie is
cleared and the transition probability to the new state (la, lc +
1) is 1 − α. In all other situations, tie remains unchanged.
APPENDIX C
THE FRUITCHAINS MDP DESIGN
Unlike in previous MDPs where a block is found at the end
of each step, in the Fruitchains MDP, each step ends with the
discovery of a unit, which might be a fruit or a block.
A. State Space
Encoding each fruit’s pointer block in a state is compu-
tationally infeasible due to the potentially large number of
fruits. Therefore, we split all fruits into three groups and
deal with them separately: (1) attacker fruits mined before
the To-th attacker block; (2) attacker fruits mined after the
To-th attacker block; (3) honest fruits. As the attacker knows
which block is the consensus block, it is rational that fruits
in group (1) point to the consensus block, so that they can
be published before expiration and embedded in both chains.
As these fruits always receive rewards, we can issue their
rewards the moment they are found, and forget them in the
next state. Fruits in group (2) gain rewards if and only if the
attacker wins the block race, because otherwise the pointer
blocks of these fruits are invalidated. Fruits in group (3) lose
the rewards when the attacker wins the block race with at least
To blocks, either because their pointer blocks are invalidated or
because their gaps exceed To. For all other scenarios, either the
attacker loses or wins with less than To blocks, we assume all
honest fruits receive rewards. This setting favors the compliant
miners, as the attacker may still invalidate some honest fruits
when winning with less than To blocks: either the honest fruits
expire after the current block race, as their pointers are before
the consensus block; or the attacker wins the following block
races and obtains To consecutive main chain blocks eventually,
causing the honest fruits mined in the ﬁrst block race to expire.
A state is represented as a 4-tuple (la, lc, fc, isLastHB)
, isLastHB)
when la  h2 the
substring is empty. We do not need to encode blocks at height
hcon−To +1 and lower, as their rewards are settled along with
the current consensus block. Neither do we need to encode
whether a leading zero is an attacker block without an honest
competitor or a block race won by the compliant miners, as
in both cases the rewards are settled already, which will be
further explained when describing the reward allocation. The
number of 1s in the substring is denoted as(cid:80) history[h1 : h2].
A state is represented as a 4-tuple (la, lc, fork, history),
where fork has three possible values. If there is an ongoing
tie, namely the attacker chain is published until the lc-th block
and this block is published along with the latest honest block,
fork = active. Otherwise if the latest block is mined by the
compliant miners, fork = cLast; fork = aLast if the attacker
ﬁnds the last block.
B. Actions
There are To + 2 possible optimal actions:
Adopt. Give up the attacker chain. Same as previous MDPs.
Wait. Keep mining on the attacker chain. Same as previous
MDPs.
Match. Publish until the lc-th attacker block to cause a tie,
then keep mining on the attacker chain. Feasible when la ≥ lc
and fork = cLast, namely the attacker has enough blocks to
match the newly-mined honest block.
Overridek. Publish until the (lc + k)-th attacker block to
orphan the public chain, then keep mining on the attacker
chain, where 1 ≤ k ≤ To − 1. Feasible when the attacker has
enough blocks.
This action set covers all optimal actions. It is never optimal
to publish the (lc + To)-th attacker block, as the attacker can
invalidate one more honest block without risking any block
reward by deferring this attacker block’s publication until the
next honest block is mined.
C. Reward Allocation and State Transition
An attacker block is certain to receive the full reward if it
has no competing honest block when published. Therefore, we
issue block rewards to these “no competitor” attacker blocks
the moment they are published. Consequently, the rewards of
all 0s in history are settled before they enter history.
When choosing Adopt, the compliant miners receive lc −
la full rewards for honest blocks without a competitor, and
((cid:80) history + la)/2 for honest blocks with a competitor. The
attacker receives ((cid:80) history + la)/2 for the attacker blocks.
We assume la ≤ lc here, as otherwise Override1 is clearly
more proﬁtable than Adopt. After Adopt, historynew is empty.
When choosing Overridek, the attacker receives two kinds
of rewards. The ﬁrst kind are for attacker blocks that have
competitors but the competitors are pushed out of history after
this action. We ﬁrst append 1lc||0k, a string denotes the current
block race, to the end of history, then truncate the resulted
string to To − 1 least signiﬁcant bits. When To − 1 ≥ lc + k,
historynew = history[hcon−To +2+lc +k : hcon]||1lc||0k. The
for all 1s in the discarded history bits. Otherwise when To −
all 1s in history and the ﬁrst lc + k − (To − 1) attacker blocks
in the current block race, as their competitors are invalidated,
and historynew = 1To−1−k||0k. The second kind of rewards
are for the last k published attacker blocks, as they have no
honest competitor.
No reward is allocated after Wait if fork (cid:54)= active. There
are two possible states after Wait if fork (cid:54)= active, Adopt and
attacker receives(cid:80) history[hcon−To+2 : hcon−To+1+lc+k]
1  3, lead only encodes
the last three attacker units.
Override. When diffu = 1, 2 or 3, publish until the published
attacker chain is one unit longer than the public chain; when
diffu > 3, publish all attacker units except the last three.
This limited action set favors the compliant miners.
C. Reward Allocation and State Transition
We issue each block Ratiow2b units of rewards, so that
on average each block or weak block receives one unit of
reward. As both weak blocks and blocks contribute to the
transaction conﬁrmation, this “one reward per conﬁrmation”
rule is consistent with the reward allocation mechanisms of
NC, Fruitchains and RS.
The compliant miners get Rc = bc × Ratiow2b only after
Adopt. After Override, the attacker gets rewards for all pub-
when diffu > 3 or diffu ≤ 3 and the highest order bit of
diffu ≤ 3 and the highest order bit of lead is 1. If the
next unit is mined by the compliant miner on the attacker
chain after Wait when fork = active or Match, the attacker
lished attacker blocks, which is Ra = (ba −(cid:80) lead)Ratiow2b
lead is zero, or Ra = (ba −(cid:80) lead + 1)Ratiow2b when
gets Ra = (ba − (cid:80) lead)Ratiow2b. After each of these
actions, information regarding blocks and weak blocks that
are permanently abandoned or accepted by both miners will
be cleared in the new temporary state. No reward is allocated
after Wait when fork (cid:54)= active.
There are four outcome states after Wait when fork (cid:54)=
active, Adopt or Override, depending on the next unit. The
new mining product can be an attacker block, an attacker weak
block, an honest block or an honest weak block, with probabil-
ity α/Ratiow2b, α·(Ratiow2b−1)/Ratiow2b, (1−α)/Ratiow2b,
(1 − α) · (Ratiow2b − 1)/Ratiow2b, respectively. Meanwhile,
after Wait when fork = active or Match, the new honest unit
might be mined on either chains, resulting in six outcome
states. For example, the probability of an honest block mined
on the attacker chain is (1 − α)γ/Ratiow2b.
We now describe how to get
the new state from the
temporary state after publication and the new unit. The rule
for updating fork is identical to that of RS. If the next unit is
honest, diffu decreases by one, otherwise it increases by one.
If the next unit is a block, ba or bc increases by one according
to the miner.
Overridek: either the next block is mined by the attacker on the
attacker chain with probability α, or the next block is mined
by the compliant miners on the public chain with probability
1− α. In the former case, forknew = aLast; in the latter case,
forknew = cLast.
Unlike the previous actions, there are three possible states
after Wait if fork = active or Match. First, the attacker mines
a block on the attacker chain with probability α. This is the
only transition in the entire MDP where forknew = active.
Second, the compliant miners mine on the public chain with
probability (1 − α)(1 − γ), forknew = cLast. In the ﬁrst
two cases, no reward is allocated and historynew = history.
Third, the compliant miners mine on the attacker chain with
probability (1− α)γ. In this case, history is appended with 1lc
and truncated until at most To − 1 bits. The attacker receives
rewards for all 1s in the discarded history bits. The new state
is (la − lc, 1, cLast, historynew).
APPENDIX E
SUBCHAINS MDP DESIGN
A. State Space
Similar to Fruitchains MDP, in Subchains MDP, each step
ends with the discovery of a unit—either a block or a weak
block. Based on our key observation in Sect. V-C, of the
two mining sequences, only the leading unit sequence of the
attacker chain, i.e., the units whose heights are larger than the
public chain tip, needs to be encoded, as other bits are either
adopted or abandoned as a whole. Therefore, we introduce
two extra ﬁelds to facilitate state representation compression.
First, lead denotes the attacker chain’s leading unit sequence.
Each bit in a string indicates whether the unit is a block or a
weak block: 0 means a weak block, 1 means a block. The most
signiﬁcant bit represents the oldest unit in the chain, while the
least signiﬁcant bit presents the latest. Second, we encode the
length difference between two chains as diffu.
The state representation differs according to the length
difference of the chains. (1) When diffu  0, a state is a 5-tuple (ba, bc, diffu, lead, fork). For
example, (1, 3, 2, “01”, aLast) means: the attacker chain and
the public chain have one and three blocks, respectively; the
attacker chain is two units longer than the public chain, of
which the penultimate unit is a weak block, the last unit is a
block mined in the last round.
B. Actions
The attacker can choose from four actions: Adopt, Override,
Match and Wait. Adopt and Wait are the same with previous
MDPs.
192
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply.