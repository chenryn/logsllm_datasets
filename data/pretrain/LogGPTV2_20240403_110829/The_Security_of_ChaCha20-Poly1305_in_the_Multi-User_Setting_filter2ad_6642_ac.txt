𝑟 ∥𝑠 ← Poly1305_Key_Gen(𝐾, 𝑁)
1 :
2 : 𝑇′ ← Poly1305_Mac((𝑟, 𝑠), 𝐴𝐷, 𝐶)
3 :
4 :
procedure ChaCha20(𝐾, 𝑁 , 𝑀)
1 : 𝑀1∥ · · · ∥𝑀ℓ ← 𝑀
for 𝑖 = 1 to ℓ − 1 do
2 :
3 :
4 : 𝑍ℓ ← 𝑀ℓ ⊕ trunc(CC_block(𝐾, 𝑁 , ℓ), |𝑀ℓ |)
5 :
procedure Poly1305_Key_Gen(𝐾, 𝑁)
return trunc(CC_block(𝐾, 𝑁 , 0), 2𝑡)
1 :
procedure Poly1305_Mac((𝑟, 𝑠), 𝐴𝐷, 𝐶)
1 :
𝑍𝑖 ← 𝑀𝑖 ⊕ CC_block(𝐾, 𝑁 , 𝑖)
return 𝑍1∥ · · · ∥𝑍ℓ
return 𝐻𝑟 (𝐴𝐷, 𝐶) (𝑡)+ 𝑠
Figure 3: Pseudocode description of ChaCha20-Poly1305.
is outlined in Definition 3.1 and its security is stated in Theorem
3.2, reproduced here from [5] for completeness.
Definition 3.1 (The Hash Function 𝐻 in Poly1305). Let 𝑡 be a
positive integer multiple of 8, let 𝑝 ≥ 2𝑡+1 be a prime, let 𝑟 be a 𝑡-bit
string and let 𝑀 be any byte string. Parse 𝑀 as 𝑀 = 𝑀1∥ · · · ∥𝑀ℓ
where |𝑀𝑖| = 𝑡 for 𝑖  0 and 𝑡 > 1
(2) 𝑚 =(cid:6)log𝑡 (𝐵−1) +(cid:101)𝑚(cid:7) and 𝑄 ≤ log𝑡 (𝐵−1)+(cid:101)𝑚
(3) 𝑚 = ⌈𝑄𝐵𝑡e⌉ and 𝑄 ≥ log𝑡 (𝐵−1)+(cid:101)𝑚
(cid:109)
most 𝑡−(cid:101)𝑚.
(cid:108) log𝑡 (𝐵−1)+(cid:101)𝑚
(cid:108) max(𝑄𝐵𝑡e,log𝑡 (𝐵−1)+(cid:101)𝑚)
the probability that the heaviest bin contains 𝑚 balls or more is at
max(1,log𝑡 ((𝑄𝐵)−1))
and 𝑄 ≤ 1
𝐵 ,
log𝑡 ((𝑄𝐵)−1)
(4) 𝑚 =
(1) 𝑚 =
𝐵𝑡e
,
𝐵𝑡e
,
,
The proof can be found in Appendix A. Compared to prior re-
sults, the first advantage of this theorem is its generality as it allows
more freedom in selecting parameters. Case 4 yields the best bound,
giving the smallest maximum load 𝑚 for a fixed maximum proba-
of balls 𝑄. Moreover, Cases 1, 2 and 3 can be derived as subcases of
Case 4.
bility bound 𝑡−(cid:101)𝑚, and has no restrictions on the maximum number
troducing a trade-off parameter(cid:101)𝑚 between the maximum load and
In comparison to the biased balls-into-bins lemmas of Bose,
Hoang, and Tessaro, Case 1 improves over [10, Lemma 10] by in-
the probability bound instead of a fixed probability bound. This is
essentially what allows us to lift the restrictive term of 2−48 in the
bound for nonce-randomized GCM (cf. Sections 7.2 and 7.3).
In combination, Cases 2 and 3 are roughly equivalent to [10,
Lemma 11]. While the latter allows for an unrestricted number
of balls, it yields a looser bound than [10, Lemma 10] when the
number of balls is small. Thus, when applying the lemmas of [10],
one has to choose between a good bound over a restricted range of
𝑄, or a suboptimal bound extending over a larger range of 𝑄. Case 4
improves over both lemmas in [10] by combining their advantages
in a single expression while additionally retaining the improvement
from Case 1. We employ this improved bound in our multi-user
security proof, though Lemma B.1, when bounding the probabilities
of bad transcripts in Appendix B.2.
6 THE MULTI-USER SECURITY OF
CHACHA20-POLY1305
The following theorem bounds the multi-user security of ChaCha20
-Poly1305 in the ideal permutation model, i.e., when the ChaCha20
permutation is assumed to be a random permutation. This allows
us to capture the local computation of the adversary expressed
as the number of offline queries that it makes to the ChaCha20
permutation.
Theorem 6.1 (Multi-user Security of ChaCha20-Poly1305).
Let ChaCha20-Poly1305[𝜋] be the AEAD scheme described in Fig-
ure 3 having parameters 𝑛, 𝑘, 𝑡, 𝑐 with its underlying permutation 𝜋
modelled as a random permutation. Let A be a 𝑑-repeating adversary
making at most 𝑝 ideal permutation queries, 𝑞𝑒 encryption queries to-
taling at most 𝜎𝑒 encrypted blocks, and 𝑞𝑣 verification queries. Further,
let ℓ𝑚 denote the maximum size in 𝑡-bit blocks (including associated
data) that it is allowed to query to its encryption and verification
oracles. Then:
Adv
muAE
+ 𝑑(𝑝 + 𝑞𝑒)
ChaCha20-Poly1305[𝜋](A) ≤ 𝑞𝑣(𝑐ℓ𝑚 + 3)
2𝑡
2𝑘
+ 2𝑝 · (𝑛 − 𝑘)
+ (𝜎𝑒 + 𝑞𝑒)2
1
22𝑡−2 +
+
2𝑛+1
· 2𝑛−𝑘(cid:17)
𝑞𝑣 ≤ 2𝑛−2, 𝑝 ≤ min(cid:16) 2𝑡−1
In the above we further require that: 𝑛 − 𝑘 ≤ 2𝑘−2, 𝜎𝑒 ≤ 𝑛−𝑘
6
, and 𝑑 ≤ 2𝑡
3 · 22𝑡 .
+ 2𝑞𝑣 · (𝑛 − 𝑘 + 4𝑡)
· 22𝑡 , 𝑛−𝑘−1
2𝑘
2𝑘
1
6
6
2𝑛−𝑘−2 .