### Pseudocode Description of ChaCha20-Poly1305

1. **Key Generation:**
   \[
   (r, s) \leftarrow \text{Poly1305\_Key\_Gen}(K, N)
   \]

2. **Tag Verification:**
   \[
   T' \leftarrow \text{Poly1305\_Mac}((r, s), AD, C)
   \]

3. **ChaCha20 Encryption:**
   \[
   \text{procedure ChaCha20}(K, N, M)
   \]
   1. Parse \( M \) into blocks: \( M_1 \| \cdots \| M_\ell \)
   2. For \( i = 1 \) to \( \ell - 1 \):
      \[
      Z_i \leftarrow M_i \oplus \text{CC\_block}(K, N, i)
      \]
   3. Encrypt the last block:
      \[
      Z_\ell \leftarrow M_\ell \oplus \text{trunc}(\text{CC\_block}(K, N, \ell), |M_\ell|)
      \]
   4. Return the encrypted blocks: \( Z_1 \| \cdots \| Z_\ell \)

4. **Poly1305 Key Generation:**
   \[
   \text{procedure Poly1305\_Key\_Gen}(K, N)
   \]
   \[
   \text{return trunc}(\text{CC\_block}(K, N, 0), 2t)
   \]

5. **Poly1305 MAC Computation:**
   \[
   \text{procedure Poly1305\_Mac}((r, s), AD, C)
   \]
   1. For each block \( M_i \) in \( C \):
      \[
      Z_i \leftarrow M_i \oplus \text{CC\_block}(K, N, i)
      \]
   2. Compute the tag:
      \[
      \text{return } H_r(AD, C) + s
      \]

### Definition and Theorem

**Definition 3.1 (The Hash Function \( H \) in Poly1305):**
- Let \( t \) be a positive integer multiple of 8.
- Let \( p \geq 2^{t+1} \) be a prime.
- Let \( r \) be a \( t \)-bit string.
- Let \( M \) be any byte string parsed as \( M = M_1 \| \cdots \| M_\ell \) where \( |M_i| = t \) for all \( i \).

**Theorem 3.2 (Security of Poly1305):**
- The security of Poly1305 is stated in [5].

### Improved Bound for Multi-User Security

**Theorem (Improved Bound for Biased Balls-into-Bins):**
- The theorem provides a more general bound with flexibility in parameter selection.
- Case 4 yields the best bound, giving the smallest maximum load \( m \) for a fixed maximum probability bound \( t^{-\tilde{m}} \).
- Cases 1, 2, and 3 can be derived as subcases of Case 4.

**Comparison with Prior Results:**
- Case 1 improves over [10, Lemma 10] by introducing a trade-off parameter \( \tilde{m} \) between the maximum load and the probability bound.
- Cases 2 and 3 are roughly equivalent to [10, Lemma 11].
- Case 4 combines the advantages of both lemmas while retaining the improvement from Case 1.

### Multi-User Security of ChaCha20-Poly1305

**Theorem 6.1 (Multi-User Security of ChaCha20-Poly1305):**
- Let \( \text{ChaCha20-Poly1305}[\pi] \) be the AEAD scheme with parameters \( n, k, t, c \) and underlying permutation \( \pi \) modeled as a random permutation.
- Let \( A \) be a \( d \)-repeating adversary making at most \( p \) ideal permutation queries, \( q_e \) encryption queries totaling at most \( \sigma_e \) encrypted blocks, and \( q_v \) verification queries.
- Let \( \ell_m \) denote the maximum size in \( t \)-bit blocks (including associated data) that it is allowed to query to its encryption and verification oracles.

Then:
\[
\text{Adv}_{\text{muAE}}^{\text{ChaCha20-Poly1305}[\pi]}(A) \leq q_v(c\ell_m + 3) \cdot \frac{d(p + q_e)}{2^t} + \frac{2p \cdot (n - k)}{2^k} + \frac{(\sigma_e + q_e)^2}{2^{2t-2}} + \frac{2^{n+1} \cdot 2^{n-k}}{2^n}
\]

Further requirements:
- \( n - k \leq 2^{k-2} \)
- \( \sigma_e \leq \frac{n-k}{6} \)
- \( d \leq \frac{2^t}{3 \cdot 2^{2t}} \)
- \( q_v \leq 2^{n-2} \)
- \( p \leq \min\left( \frac{2^{t-1}}{2^k}, \frac{2^{n-k-1}}{2^k} \right) \)

This improved bound is used in our multi-user security proof, specifically in bounding the probabilities of bad transcripts in Appendix B.2.