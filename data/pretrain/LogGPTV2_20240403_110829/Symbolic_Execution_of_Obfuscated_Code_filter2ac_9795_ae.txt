# 摘要与数据表格

## 数据表
| 代码虚拟化 (T2) | 位级 (T3) |
|-----------------|------------|
| 12.15           | 72.03      |
| 64.53           | 52.16      |
| 83.98           | 23.43      |
| 41.77           | 03.74      |
| 76.36           | 202.04     |
| 50.31           | 53.78      |
| 39.09           | 38.06      |
| 920.47          | 956.01     |
| 1381.13         | 187.09     |
| 307.47          | 176.60     |
| 88.24           | 207.97     |
| 329.33          | 610.79     |
| 587.11          | 173.09     |
| 146.03          | 180.88     |
| 465.50          | 996.72     |
| 466.34          | 855.32     |
| 160.42          | 411.36     |
| 35.48           | 635.38     |
| 1584.00         | 789.77     |
| 405.24          | 451.01     |
| 306.04          | 9632.42    |
| 6576.10         | 11957.30   |
| 1478.65         | 1820.35    |
| 1847.81         | 728.36     |
| 1587.92         | 3056.27    |
| 1484.02         | 1830.58    |
| 935.98          | 975.00     |

| T1/T0 | T2/T0 | T3/T0 | T3/T2 |
|-------|-------|-------|-------|
| 4172.50 | 4473.12 | 4417.50 | 3717.33 |
| 2386.67 | 5841.88 | 1618.67 | 7745.33 |
| 7560.00 | 7642.50 | 6546.88 | 5545.00 |
| 8525.00 | 7795.93 | 1499.14 | 1929.32 |
| 1793.20 | 7663.92 | 2369.67 | 1817.54 |
| 15300.70 | 14805.60 | 14795.00 | 13456.60 |
| 10474.70 | 18203.10 | 10804.50 | 5540.01 |
| 0.75 | 4.50 | 4.03 | 3.47 |
| 5.59 | 1.46 | 2.78 | 0.24 |
| 4.77 | 12.62 | 3.14 | 3.36 |
| 2.44 | 2.37 | 2.03 | 2.03 |
| 3.40 | 1.49 | 0.72 | 0.41 |
| 5.88 | 12.99 | 20.58 | 19.08 |
| 12.49 | 5.40 | 4.71 | 3.22 |
| 11.30 | 29.09 | 62.29 | 31.08 |
| 57.02 | 10.02 | 27.42 | 2.36 |
| 39.71 | 99.00 | 49.36 | 25.32 |
| 28.18 | 19.12 | 21.26 | 14.02 |
| 29.45 | 11.82 | 4.31 | 4.36 |
| 48.55 | 99.24 | 191.01 | 46.37 |
| 38.94 | 29.24 | 31.45 | 26.14 |
| 14.88 | 6.46 | 15.44 | 8.94 |
| 10.18 | 6.84 | 9.84 | 9.48 |
| 8.32 | 7.84 | 15.69 | 7.53 |
| 11.57 | 8.04 | 10.46 | 6.87 |
| 8.65 | 7.90 | 5.92 | 10.46 |
| 8.25 | 7.63 | 9.28 | 2.42 |
| 3.11 | 5.40 | 6.67 | 8.06 |

### 关键术语
- CV: 代码虚拟化
- EC: EXECryptor
- TH: Themida
- VM: VMProtect

## 表格说明
表 3 显示了字节级和位级污点分析开销的对比。

## 文献综述
Sharif 等人 [36] 和 Wang 等人 [43] 讨论了通过难以逆向计算的方式来阻碍符号执行的方法。通常，混合执行使用污点分析来区分具体值和符号值。更广泛地说，污点分析在安全应用中具有多种用途 [18, 19, 21, 29, 45]。动态污点分析的通用框架包括 Clause 等人 [11] 和 Schwartz 等人 [33] 提出的框架，但这些工作并未讨论细粒度位级污点分析的具体细节。Drewry 等人描述了一个名为 Flayer 的位精确污点分析系统 [15]，但该工具及其衍生工具 taintgrind [44] 并未考虑使用独立的污点标记来提高对混淆技术的抵御能力。Cavallaro 等人 [7] 和 Sarwar 等人 [32] 讨论了击败污点分析的技术。

大量文献探讨了混淆和恶意代码的检测与分析（例如 [12, 23, 24, 40]）。然而，这些研究均未考虑代码混淆如何影响符号分析的效果。

## 结论
现有对恶意代码的分析方法未考虑到代码混淆对符号和混合执行成本及精度的影响。本文研究了代码混淆对混合执行效果的影响，重点关注三种混淆技术：两种已知被用于恶意软件混淆工具中的技术，以及一种基于现有恶意软件变换的简单变体。实验表明，现有的混合执行技术在面对常用的恶意软件混淆时效用有限。我们提出了一种结合细粒度位级污点分析和架构感知约束生成的方法来缓解这一问题。原型实现的实验结果表明，该方法显著提高了符号执行在混淆代码上的效果。

## 致谢
本研究部分由美国国家科学基金会 (NSF) 通过以下项目资助：CNS-1115829、CNS-1145913、III-1318343 和 CNS-1318955；以及美国国防部的 FA2386-14-1-3016 项目资助。

## 参考文献
[此处省略详细参考文献列表]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望这对你有帮助！