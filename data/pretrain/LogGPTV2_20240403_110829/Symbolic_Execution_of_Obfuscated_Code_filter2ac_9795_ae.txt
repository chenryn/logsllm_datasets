430,615
492,316
582,506
334,940
Byte-level (T2) Bit-level (T3)
12.15
72.03
64.53
52.16
83.98
23.43
41.77
03.74
76.36
202.04
50.31
53.78
39.09
38.06
920.47
956.01
1381.13
187.09
307.47
176.60
88.24
207.97
329.33
610.79
587.11
173.09
146.03
180.88
465.50
996.72
466.34
855.32
160.42
411.36
35.48
635.38
1584.00
789.77
405.24
451.01
306.04
9632.42
6576.10
11957.30
1478.65
1820.35
1847.81
728.36
1587.92
3056.27
1484.02
1830.58
935.98
975.00
T1/T0
T2/T0
T3/T0
T3/T2
4172.50
4473.12
4417.50
3717.33
2386.67
5841.88
1618.67
7745.33
7560.00
7642.50
6546.88
5545.00
8525.00
7795.93
1499.14
1929.32
1793.20
7663.92
2369.67
1817.54
15300.70
14805.60
14795.00
13456.60
10474.70
18203.10
10804.50
5540.01
0.75
4.50
4.03
3.47
5.59
1.46
2.78
0.24
4.77
12.62
3.14
3.36
2.44
2.37
2.03
2.03
3.40
1.49
0.72
0.41
5.88
12.99
20.58
19.08
12.49
5.40
4.71
3.22
11.30
29.09
62.29
31.08
57.02
10.02
27.42
2.36
39.71
99.00
49.36
25.32
28.18
19.12
21.26
14.02
29.45
11.82
4.31
4.36
48.55
99.24
191.01
46.37
38.94
29.24
31.45
26.14
14.88
6.46
15.44
8.94
10.18
6.84
9.84
9.48
8.32
7.84
15.69
7.53
11.57
8.04
10.46
6.87
8.65
7.90
5.92
10.46
8.25
7.63
9.28
2.42
3.11
5.40
6.67
8.06
Key: CV: Code Virtualizer; EC: EXECryptor; TH: Themida; VM: VMProtect;
Table 3: Cost of analysis with comparison of byte-level and bit-level taint analysis overheads.
Sharif et al. [36] and Wang et al. [43] discuss ways to ham-
per symbolic execution via computations that are diﬃcult
to invert.
Concolic analyses typically use taint analysis to distin-
guish between concrete and symbolic values. More gener-
ally, taint analysis ﬁnds a variety of uses in security appli-
cations [18, 19, 21, 29, 45]. General frameworks for dynamic
taint analysis include those by Clause et al [11] and Schwartz
et al. [33], but these works do not discuss the speciﬁcs of ﬁne-
grained bit-level taint analysis. Drewry et al. describe a
bit-precise taint analysis system named ﬂayer [15], but this
tool—and taintgrind [44], which is based on it—does not
consider using separate taint markings to improve resilience
against obfuscations. Cavallarro et al. [7] and Sarwar et
al. [32] discuss techniques to defeat taint analyses.
There is a large body of literature on detection and analy-
sis of obfuscated and malicious code (see, e.g., [12,23,24,40]).
None of these works consider ways in which code obfusca-
tions can hamper symbolic analysis.
7. CONCLUSIONS
sis of malicious code does not consider the impact of code
obfuscation on the cost and precision of symbolic and con-
colic program analysis. This paper investigates the eﬀect of
code obfuscation on the eﬃcacy of concolic analysis, focus-
ing on three such obfuscations: two that are known to be
used in obfuscation tools that are used by malware, and a
third that is a straightforward variation of a transformation
used in existing malware. Our experiments suggest that
existing concolic analysis techniques are of limited utility
against code obfuscations commonly used in malware. We
propose a way to mitigate the problem using a combination
of ﬁne-grained bit-level taint analysis and architecture-aware
constraint generation. Experiments using a prototype imple-
mentation indicate that this approach signiﬁcantly improves
the eﬃcacy of symbolic execution on obfuscated code.
Acknowledgments
This research was supported in part by the National Science
Foundation (NSF) under grants CNS-1115829, CNS-1145913, III-
1318343, and CNS-1318955; and the US Department of Defense
under grant no. FA2386-14-1-3016.
Although analysis of potentially malicious code is an im-
portant application of symbolic and concolic analysis, and
malware codes are usually obfuscated to avoid detection and
hamper analysis, most of the research on symbolic analy-
8. REFERENCES
[1] U. Bayer, P. Milani, C. Hlauschek, C. Kruegel, and
E. Kirda. Scalable, behavior-based malware clustering.
742In Proc. 16th Annual Network and Distributed System
Security Symposium (NDSS 2009), Feb. 2009.
[2] U. Bayer, A. Moser, C. Kruegel, and E. Kirda.
Dynamic analysis of malicious code. Journal in
Computer Virology, 2(1), Aug. 2006.
[3] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. X.
Song, and H. Yin. Automatically identifying
trigger-based behavior in malware. In Botnet
Detection: Countering the Largest Security Threat,
volume 36, pages 65–88. 2008.
[4] C. Cadar and D. Engler. Execution generated test
cases: How to make systems code crash itself. In
Model Checking Software, pages 2–23. Springer, 2005.
[5] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill,
and D. R. Engler. Exe: automatically generating
inputs of death. ACM Transactions on Information
and System Security (TISSEC), 12(2):10, 2008.
[16] N. Falliere. Inside the jaws of Trojan.Clampi.
Technical report, Symantec Corp., Nov. 2009.
[17] P. Godefroid, N. Klarlund, and K. Sen. DART:
directed automated random testing. In Proceedings of
the ACM SIGPLAN 2005 Conference on Programming
Language Design and Implementation (PLDI), pages
213–223. ACM, June 2005.
[18] C. Hauser, F. Tronel, L. M´e, and C. J. Fidge.
Intrusion detection in distributed systems, an
approach based on taint marking. In Proc. 2013 IEEE
International Conference on Communications (ICC),
pages 1962–1967, 2013.
[19] C. Hauser, F. Tronel, J. F. Reid, and C. J. Fidge. A
taint marking approach to conﬁdentiality violation
detection. In Proc. 10th Australasian Information
Security Conference (AISC 2012), Jan. 30 2012.
[20] Intel. Intel ˆA˝o 64 and ia-32 architectures software
[6] C. Cadar, P. Godefroid, S. Khurshid, C. S. P˘as˘areanu,
developer’s manual. 2015.
K. Sen, N. Tillmann, and W. Visser. Symbolic
execution for software testing in practice: preliminary
assessment. In Proceedings of the 33rd International
Conference on Software Engineering, pages 1066–1071.
ACM, 2011.
[7] L. Cavallaro, P. Saxena, and R. Sekar.
Anti-taint-analysis: Practical evasion techniques
against information ﬂow based malware defense. Stony
Brook University, Stony Brook, New York, 2007.
[8] L. Cavallaro, P. Saxena, and R. Sekar. On the limits of
information ﬂow techniques for malware analysis and
containment. In Detection of Intrusions, Malware and
Vulnerability Analysis (DIMVA), July 2008.
[9] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley.
Unleashing mayhem on binary code. In Security and
Privacy (SP), 2012 IEEE Symposium on, pages
380–394. IEEE, 2012.
[10] V. Chipounov, V. Kuznetsov, and G. Candea. S2e: A
platform for in-vivo multi-path analysis of software
systems. In Proceedings of the 16th International
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), Mar.
2011.
[11] J. Clause, W. Li, and A. Orso. Dytan: a generic
dynamic taint analysis framework. In Proceedings of
the 2007 international symposium on Software testing
and analysis, pages 196–206. ACM, 2007.
[12] K. Coogan, G. Lu, and S. Debray. Deobfuscating
virtualization-obfuscated software: A semantics-based
approach. In Proc. ACM Conference on Computer and
Communications Security (CCS), pages 275–284, Oct.
2011.
[13] J. R. Crandall, G. Wassermann, D. A. S. de Oliveira,
Z. Su, S. F. Wu, and F. T. Chong. Temporal search:
detecting hidden malware timebombs with virtual
machines. In ASPLOS-XII: Proceedings of the 12th
international conference on Architectural support for
programming languages and operating systems, pages
25–36, Oct. 2006.
[14] A. Decker, D. Sancho, M. Goncharov, and
R. McArdle. Ilomo: A study of the ilomo/clampi
botnet. Technical report, Trend Micro, Aug. 2009.
[15] W. Drewry and T. Ormandy. Flayer: Exposing
application internals. WOOT, 7:1–9, 2007.
[21] M. G. Kang, S. McCamant, P. Poosankam, and
D. Song. Dta++: Dynamic taint analysis with
targeted control-ﬂow propagation. In NDSS, 2011.
[22] J. C. King. Symbolic execution and program testing.
Communications of the ACM, 19(7):385–394, 1976.
[23] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna.
Static disassembly of obfuscated binaries. In Proc.
13th USENIX Security Symposium, Aug. 2004.
[24] A. Lakhotia, E. U. Kumar, and M. Venable. A method
for detecting obfuscated calls in malicious binaries.
IEEE Transactions on Software Engineering,
31(11):955–968, 2005.
[25] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and
K. Hazelwood. Pin: Building customized program
analysis tools with dynamic instrumentation. In Proc.
ACM Conference on Programming Language Design
and Implementation (PLDI), pages 190–200, Chicago,
IL, June 2005.
[26] A. Moser, C. Kruegel, and E. Kirda. Exploring
multiple execution paths for malware analysis. In
Security and Privacy, 2007. SP’07. IEEE Symposium
on, pages 231–245. IEEE, 2007.
[27] A. Moser, C. Kruegel, and E. Kirda. Exploring
multiple execution paths for malware analysis. In
Proc. IEEE Symposium on Security and Privacy,
pages 231–245, 2007.
[28] S. Nanda, W. Li, L. Lam, and T. Chiueh. BIRD:
Binary interpretation using runtime disassembly. In
Proc. International Symposium on Code Generation
and Optimization (CGO), 2006.
[29] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In
NDSS, 2005.
[30] Oreans Technologies. Code virtualizer: Total
obfuscation against reverse engineering.
www.oreans.com/codevirtualizer.php.
[31] Oreans Technologies. Themida: Advanced windows
software protection system.
www.oreans.com/themida.php.
[32] G. Sarwar, O. Mehani, R. Boreli, and D. Kaafar. On
the eﬀectiveness of dynamic taint analysis for
743protecting against private information leaks on
android-based devices. In 10th International
Conference on Security and Cryptography
(SECRYPT), 2013.
[33] E. J. Schwartz, T. Avgerinos, and D. Brumley. All you
ever wanted to know about dynamic taint analysis and
forward symbolic execution (but might have been
afraid to ask). In IEEE Symposium on Security and
Privacy, pages 317–331, 2010.
[34] K. Sen, D. Marinov, and G. Agha. Cute: a concolic
unit testing engine for c. In Proceedings of the 10th
European Software Engineering Conference Held
Jointly with 13th ACM SIGSOFT International
Symposium on Foundations of Software Engineering,
pages 263–272, Sept. 2005.
[35] M. Sharif, A. Lanzi, J. Giﬃn, and W. Lee. Automatic
reverse engineering of malware emulators. In Proc.
2009 IEEE Symposium on Security and Privacy, May
2009.
[36] M. I. Sharif, A. Lanzi, J. T. Giﬃn, and W. Lee.
Impeding malware analysis using conditional code
obfuscation. In Proc. 15th Network and Distributed
System Security Symposium (NDSS), Feb. 2008.
[37] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager,
M. G. Kang, Z. Liang, J. Newsome, P. Poosankam,
and P. Saxena. BitBlaze: A new approach to
computer security via binary analysis. In Proc. of the
4th International Conference on Information Systems
Security, Dec. 2008.
[38] StrongBit Technology. EXECryptor – bulletproof
software protection.
www.strongbit.com/execryptor.asp.
[39] Tora. Devirtualizing FinSpy. http://linuxch.org/
poc2012/Tora,DevirtualizingFinSpy.pdf.
[40] S. K. Udupa, S. K. Debray, and M. Madou.
Deobfuscation: Reverse engineering obfuscated code.
In Proc. 12th IEEE Working Conference on Reverse
Engineering, pages 45–54, Nov. 2005.
[41] VMProtect Software. VMProtect – New-generation
software protection. www.vmprotect.ru/.
[42] VX Heavens. Vx heavens, 2011.
http://vx.netlux.org/.
[43] Z. Wang, J. Ming, C. Jia, and D. Gao. Linear
obfuscation to combat symbolic execution. In
Computer Security–ESORICS 2011, pages 210–226.
Springer, 2011.
[44] Wei Ming Khoo. Taintgrind: a Valgrind taint analysis
tool. https://github.com/wmkhoo/taintgrind.
[45] W. Xu, S. Bhatkar, and R. Sekar. Practical dynamic
taint analysis for countering input validation attacks
on web applications. Technical report, Technical
Report SECLAB-05-04, Department of Computer
Science, Stony Brook University, 2005.
[46] B. Yadegari, B. Johannesmeyer, B. Whitely, and
S. Debray. A generic approach to automatic
deobfuscation of executable code. In IEEE Symposium
on Security and Privacy (S&P). IEEE, 2015.
[47] H. Yin and D. Song. Analysis of trigger conditions and
hidden behaviors. In Automatic Malware Analysis,
SpringerBriefs in Computer Science, pages 59–67.
2013.
744