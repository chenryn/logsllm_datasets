        configApp.Run(async context =>
        {
          if (remaining.StartsWithSegments("/appsettings"))
          {
            await ConfigSample.AppSettings(context, Configuration);
          }
          else if (remaining.StartsWithSegments("/database"))
          {
            await ConfigSample.ReadDatabaseConnection(context, Configuration);
          }
          else if (remaining.StartsWithSegments("/secret"))
          {
            await ConfigSample.UserSecret(context, Configuration);
          }
        });
        });
现在使用IConfigurationRoot对象的索引器可以读取配置。使用冒号可以访问JSON树
的层次元素（代码文件WebSampleApp/ConfigSample.cs）：
    public static async Task AppSettings(HttpContext context,
      IConfigurationRoot config)
    {
      string settings = config["AppSettings:SiteName"];
      await context.Response.WriteAsync(settings.Div());
    }
这类似于访问数据库连接字符串：
    public static async Task ReadDatabaseConnection(HttpContext context,
      IConfigurationRoot config)
    {
      string connectionString = config["Data:DefaultConnection:ConnectionString"]
;
      await context.Response.WriteAsync(connectionString.Div());
    }
运行Web应用程序，访问相应的/configuration URL，返回配置文件中的值。
40.11.2 基于环境的不同配置
使用不同的环境变量运行Web应用程序（例如在开发、测试和生产过程中）时，也可
能要使用分阶段的服务器，因为可能要使用不同的配置。测试数据不应添加到生产数据库
中。
ASP.NET 
4为XML文件创建转换，来定义从一个配置到另一个配置的差异。在
ASP.NET Core 1.0中，这可以通过更简单的方式实现。对于不同的配置值，可以使用不同
的配置文件。
下面的代码段添加JSON配置文件与环境名，例如appsettings.development.json或
appsettings. production.json（代码文件WebSampleApp/Startup.cs）：
    var builder = new ConfigurationBuilder()
      .AddJsonFile("appsettings.json")
      .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);
在项目属性中设置环境变量或应用程序参数可以配置环境，如图40-18所示。
图40-18
为了通过编程验证托管环境，可为IHostingEnvironment定义扩展方法，例如
IsDevelopment、IsStaging和IsProduction。为了测试任何环境名，可以传递验证字符串给
IsEnvironment：
    if (env.IsDevelopment())
    {
      // etc.
    }
40.11.3 用户密钥
只要使用了Windows身份验证，在配置文件中包含连接字符串就不是一个大问题。通
过连接字符串存储用户名和密码时，把连接字符串添加到配置文件中并存储配置文件和源
代码库就是一个大问题。使用一个公共存储库并存储Amazon密钥和配置可能会导致很快
丢失数千美元。黑客的后台任务会梳理公共GitHub库，找出Amazon密钥来劫持账户，并
创建虚拟机以制作比特币。这种情况可参见http://readwrite.com/2014/04/15/amazon-web-
services-hack-bitcoin-miners-github。
ASP.NET Core 1.0有一些缓解措施：用户密钥。使用用户密钥，配置就不存储在项目
的配置文件中，而存储在与账户相关联的配置文件中。在安装Visual 
Studio时，会把
SecretManager安装在系统上。在其他系统中，需要安装NuGet包
Microsoft.Extensions.SecretManager。
安装SecretManager并用应用程序定义密钥后，可以使用命令行工具user-secret设置、
删除和列出应用程序中的用户密钥。
密钥存储在这个特定于用户的位置：
    %AppData%\Microsoft\UserSecrets
管理用户密钥的一个简单方法是使用Visual Studio的Solution Explorer。选择项目节
点，打开上下文菜单，选择Manage 
User 
Secrets。第一次在项目中选择它时，会给
project.json增加一个密钥标识符（代码文件WebSampleApp/project.json）：
    "userSecretsId": "aspnet5-WebSampleApp-20151215011720"
这个标识符代表将在特定于用户的UserSecrets文件夹中发现的相同的子目录。Manage
User Secrets命令还会打开文件secrets.json，在其中可以添加JSON配置信息：
    {
      "secret1":  "this is a user secret"
    }
现在，只有在托管环境是开发环境时，才添加用户密钥（代码文件
WebSampleApp/Startup.cs）：
    if (env.IsDevelopment())
    {
      builder.AddUserSecrets();
    }
这样，密钥并不存储在代码库中，只有黑客攻击系统，它们才可能被盗。
40.12 小结
本章探讨了ASP.NET和Web应用程序的基础，介绍了工具npm、gulp和Bower，以及
它们如何与Visual Studio集成。这一章讨论了如何处理来自客户端的请求，并通过响应来
应答。我们学习了ASP.NET依赖注射和服务的基础知识，以及使用依赖注入的具体实
现，如会话状态。此外还了解了如何用不同的方式存储配置信息，例如用于不同环境（如
开发和生产环境）的JSON配置，以及如何存储密钥（如云服务的键）。
第41章展示了ASP.NET MVC 6如何使用本章讨论的基础知识创建Web应用程序。
第41章
ASP.NET MVC
本章要点
● ASP.NET MVC 6的特性
● 路由
● 创建控制器
● 创建视图
● 验证用户输入
● 使用过滤器
● 使用HTML和标记辅助程序
● 创建数据驱动的Web应用程序
● 实现身份验证和授权
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章的代码分为以下几个主要的示例文件：
● MVC Sample App
● Menu Planner
41.1 为ASP.NET MVC 6建立服务
第40章展示了ASP.NET MVC的基础：ASP.NET Core 1.0。该章介绍中间件以及依赖
注入如何与ASP.NET一起使用。本章通过注入ASP.NET MVC服务使用依赖注入。
ASP.NET MVC基于MVC（模型-视图-控制器）模式。如图41-1所示，这个标准模式
（四人组编著的书Design Patterns: Elements of Reusable Object-Oriented Software
（Addison-Wesley 
Professional,1994）中记录的模式）定义了一个实现了数据实体和数据
访问的模型、一个表示显示给用户的信息的视图和一个利用模型并将数据发送给视图的控
制器。控制器接收来自浏览器的请求并返回一个响应。为了建立响应，控制器可以利用模
型提供一些数据，用视图定义返回的HTML。
图41-1
在ASP.NET MVC中，控制器和模型通常用服务器端运行的C#和.NET代码创建。视图
是带有JavaScript的HTML代码，另外还有一些C#代码用来访问服务器端信息。
这种分离在MVC模式中的最大好处是，可以使用单元测试方便地测试功能。控制器
只包含方法，其参数和返回值可以轻松地在单元测试中覆盖。
下面开始建立ASP.NET MVC 6服务。在ASP.NET Core 1.0中，如第40章所述，已经
深度集成了依赖注入。选择ASP.NET Core 1.0 Template Web Application可以创建一个
ASP.NET MVC 6项目。这个模板包括ASP.NET MVC 6所需的NuGet包，以及有助于组织
应用程序的目录结构。然而，这里从使用Empty模板开始（类似于40章），所以可以看到
建立ASP.NET MVC 6项目都需要什么，没有项目不需要的多余东西。
创建的第一个项目名叫MVCSampleApp。要使用ASP.NET 
MVC和Web应用程序
MVCSam-pleApp，需要添加NuGet包Microsoft.AspNet.Mvc。有了这个包，就可在
ConfigureServices方法中调用AddMvc扩展方法，添加MVC服务（代码文件
MVCSampleApp/Startup.cs）：
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    // etc.
    namespace MVCSampleApp
    {
      public class Startup
      {
        // etc.
        public void ConfigureServices(IServiceCollection services)
        {
        services.AddMvc();
        // etc.
        }
        // etc.
        public static void Main(string[] args)
        {
        var host = new WebHostBuilder()
          .UseDefaultConfiguration(args)
          .UseStartup()
          .Build();
        host.Run();
     }
      }
    }
AddMvc扩展方法添加和配置几个ASP.NET 
MVC核心服务，如配置特性（带有
MvcOptions和RouteOptions的IConfigureOptions）；控制器工厂和控制器激活程序
（IControllerFactory、IController-Activator）；动作方法选择器、调用器和约束提供程序
（IActionSelector、IActionInvokerFactory、IActionConstraintProvider）；参数绑定器和模
型验证器（IControllerActionArgumentBinder、IObjectModel-Validator）以及过滤器提供程
序（IFilterProvider）。
除了添加的核心服务之外，AddMvc方法还增加了ASP.NET 
MVC服务来支持授权、
CORS、数据注解、视图、Razor视图引擎等。
41.2 定义路由
第40章提到，IApplicationBuilder的Map扩展方法定义了一个简单的路由。本章将说明
ASP.NET MVC路由基于该映射提供了一个灵活的路由机制，把URL映射到控制器和动作
方法上。
控制器根据路由来选择。创建默认路由的一个简单方式是调用Startup类中的方法
UseMvcWith-DefaultRoute（代码文件MVCSampleApp/Startup.cs）：
    public void Configure(IApplicationBuilder app)
    {
      // etc.
      app.UseIISPlatformHandler();
      app.UseStaticFiles();
      app.UseMvcWithDefaultRoute();
      // etc.
    }
 注意： 
扩展方法UseStaticFiles参见第40章。这个方法需要添加NuGet包
Microsoft.AspNet.StaticFiles。
在这个默认路由中，控制器类型的名称（没有Controller后缀）和方法名构成了路
由，如http://server 
[:port]/controller/action。也可以使用一个可选参数id，例如
http://server[:port]/controller/ 
action/id。控制器的默认名称是Home；动作方法的默认名称
是Index。
下面的代码段显示了用另一种方法来指定相同的默认路由。UseMvc方法可以接收一
个Action类型的参数。这个IRouteBuilder接口包含一个映射的路由列表。
使用MapRoute扩展方法定义路由：
    app.UseMvc(routes = routes.MapRoute(
        name: "default",
        template: "{controller}/{action}/{id? }",
        defaults: new {controller = "Home", action = "Index"}
      ));
这个路由定义与默认路由是一样的。template参数定义了URL;？与id一起指定这个参
数是可选的；defaults参数定义URL中controller和action部分的默认值。
看看下面的这个网址：
    http://localhost:[port]/UseAService/GetSampleStrings
在这个URL中，UseAService映射到控制器的名称，因为Controller后缀是自动添加
的；类型名是UseAServiceController; GetSampleStrings是动作，代表UseAServiceController
类型的一个方法。
41.2.1 添加路由
添加或修改路由的原因有几种。例如，修改路由以便使用带链接的动作、将Home定
义为默认控制器、向链接添加额外的项或者使用多个参数。
如果要定义一个路由，让用户通过类似于http:///About的链接来使用Home控
制器中的About动作方法，而不传递控制器名称，那么可以使用如下所示的代码。URL中
省略了控制器。路由中的controller关键字是必须有的，但是可以定义为默认值：
    app.UseMvc(routes => routes.MapRoute(
        name: "default",
        template: "{action}/{id? }",
        defaults: new {controller = "Home", action = "Index"}
      ));
下面显示了修改路由的另一种场景。这段代码在路由中添加了一个变量language。该
变量放在URL中的服务器名之后、控制器之前，如http://server/en/Home/About。可以使用
这种方法指定语言：
    app.UseMvc(routes => routes.MapRoute(
        name: "default",
        template: "{controller}/{action}/{id? }",
        defaults: new {controller = "Home", action = "Index"}
      ).MapRoute(
        name: "language",
        template: "{language}/{controller}/{action}/{id? }",
        defaults: new {controller = "Home", action = "Index"}
    );
如果一个路由匹配并找到控制器和动作方法，就使用该路由，否则选择下一个路由，
直到找到匹配的路由为止。
41.2.2 使用路由约束
在映射路由时，可以指定约束。这样一来，就只能使用约束定义的URL。下面的约束
通过使用正则表达式（en）|（de），定义了language参数只能是en或de。类似于
http:///en/Home/About或http:///de/Home/About的URL是合法的：
    app.UseMvc(routes => routes.MapRoute(
      name: "language",
      template: "{language}/{controller}/{action}/{id? }",
      defaults: new {controller = "Home", action = "Index"},
      constraints: new {language = @"(en)|(de)"}
    ));
如果某个链接只允许使用数字（例如，通过产品编号访问产品），那么可以使用正则
表达式\d+来匹配多个数位构成的数字，但是至少要有一个数字：
    app.UseMvc(routes => routes.MapRoute(
      name: "products",
      template: "{controller}/{action}/{productId? }",
      defaults: new {controller = "Home", action = "Index"},
    constraints: new {productId = @"\d+"}
    ));
路由指定了使用的控制器和控制器的动作。因此，接下来就讨论控制器。
41.3 创建控制器
控制器对用户请求作出反应，然后发回一个响应。如本节所述，视图并不是必要的。
ASP.NET MVC中存在一些约定，优先使用约定而不是配置。对于控制器，也有一些
约定。控制器位于目录Controllers中，控制器类的名称必须带有Controller后缀。
创建第一个控制器之前，先创建Controllers目录。然后在Solution Explorer中选择该目
录创建一个控制器，在上下文菜单中选择Add | New Item命令，再选择MVC Controller
Class项模板。对于所指定的路由，创建HomeController。
生成的代码中包含了派生自基类Controller的HomeController类。该类中包含对应于
Index动作的Index方法。请求路由定义的动作时，会调用控制器中的一个方法（代码文件
MVCSampleApp/Controllers/HomeController.cs）：
      public class HomeController : Controller
      {
        public IActionResult Index() => View();
      }
41.3.1 理解动作方法
控制器中包含动作方法。下面的代码段中的Hello方法就是一个简单的动作方法（代
码文件MVCSampleApp/Controllers/HomeController.cs）：
    public string Hello() => "Hello, ASP.NET MVC 6";
使用链接http://localhost:5000/Home/Hello可调用Home控制器中的Hello动作。当然，
端口号取决于自己的设置，可以通过项目设置中的Web属性进行配置。在浏览器中打开此
链接后，控制器仅仅返回字符串Hello, ASP.NET MVC 6。没有HTML，而只是一个字符
串。浏览器显示出了该字符串。
动作可以返回任何东西，例如图像的字节、视频、XML或JSON数据，当然也可以返
回HTML。视图对于返回HTML很有帮助。
41.3.2 使用参数
如下面的代码段所示，动作方法可以声明为带有参数（代码文件
MVCSampleApp/Controllers/HomeController.cs）：
    public string Greeting(string name) =>
      HtmlEncoder.Default.Encode($"Hello, {name}");
  注意： HtmlEncoder需要NuGet包System.Text.Encodings.Web。