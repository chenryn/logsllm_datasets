关于沙箱逃避的一些 Tips:
https://research.checkpoint.com/2022/invisible-cuckoo-cape-sandbox-evasion/
 @Check Point 发布了关于沙箱逃避的一些分析，这个公司听起来有点陌生，知名项目 Evasion 
techniques就是它们出品。
常见的一些规避沙箱技巧：
汇编指令检测（比如使用 cpuid 指令来获取处理器信息来区分沙箱）
检测注册表项（正常环境中没有，但是特定的虚拟环境中存在）
文件系统检测（正常环境中没有，但是特定的虚拟环境中存在）
@Check Point 发现的一些新的规避沙箱的技巧：
Windows API 函数调用中的漏网之鱼
沙箱为了检测关键的系统调用，通常会将 ntdll.dll 中的 Native 函数进行 Hook ，但是这些 Hook 并不是
完美的 Hook 。
比如 NtLoadKeyEx 函数 在 Windows Server 2003 中引入，只有 4 个参数；但是在Windows Vista 到
最新版本的 Windows 10中，这个函数有着 8 个参数，沙箱（文中是 CAPE沙箱）的 Hook 函数原型 仍
然按照 4 个参数进行处理。
如果在沙箱中使用最新的系统，则该函数一定会出现异常，由于参数数量不对，会导致堆栈不平衡。
具体到代码中：
沙箱没有对 Hook 函数的参数进行足够的检查。
__try
{
    _asm mov old_esp, esp
    NtLoadKeyEx(&TargetKey, &SourceFile, 0, 0, 0, KEY_ALL_ACCESS, &hKey, 
&ioStatus);
    _asm mov new_esp, esp
    _asm mov esp, old_esp
    if (old_esp != new_esp)
        printf("Sandbox detected!"); //堆栈不平衡，可以确认在沙箱中
}
__except (EXCEPTION_EXECUTE_HANDLER)
{
    printf("Sandbox detected!");
}
1
2
3
4
5
6
7
8
9
10
11
12
13
__declspec(align(4)) BYTE aligned_bytes[sizeof(LARGE_INTEGER) * 2];
DWORD Timeout = 10000; //10 seconds
PLARGE_INTEGER DelayInterval = (PLARGE_INTEGER)(aligned_bytes + 1); 
//unaligned
                                                                    //地址未对
齐
DelayInterval->QuadPart = Timeout * (-10000LL);
if (NtDelayExecution(TRUE, DelayInterval) != STATUS_DATATYPE_MISALIGNMENT)//
沙箱仅保存了DelayInterval，未返回正确的值
    printf("Sandbox detected");
1
2
3
4
5
6
7
8
if (NtDelayExecution(FALSE, (PLARGE_INTEGER)0) != STATUS_ACCESS_VIOLATION) //
指针值故意给出无效的地址，沙箱不会返回错误值
    printf("Sandbox detected");
1
2