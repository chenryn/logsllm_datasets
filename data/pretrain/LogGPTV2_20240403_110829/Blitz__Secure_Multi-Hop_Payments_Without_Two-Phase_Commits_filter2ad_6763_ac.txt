i
txer
...
ε
...
+tc + ∆
pkUi
txstate
i
αi
xUi − αi
xUi+1
Ui
Ui+1
pkUi
pkUi+1
txr
i
αi + ε
txp
i
αi
Ui
pkUi
Ui+1
pkUi+1
+∆
pkUi, pkUi+1
≥ T
pkUi+1
Figure 4: Payment setup in the channel γi of two neighboring
users Ui and Ui+1 with the new state txstate. xUi and xUi+1 are
the amounts that Ui and Ui+1 own in the state prior to txstate.
4048    30th USENIX Security Symposium
USENIX Association
Figure 4. This relative time delay is an upper bound on the
time it takes to (i) forcefully close the channel and (ii) wait for
the time delay needed to publish txr
i. With this, we ensure that
no user gains an advantage by closing its channel in advance,
since this can be entirely done in this relative timelock on
txer’s outputs. Honest intermediaries can easily check that
this relative timelock is present in txer’s outputs and every
user on the payment path has the same time.
A timeline of when the transactions have to appear on the
ledger is given in Appendix E. Note that for the payment to
be refunded, txer has to be posted to the ledger at the latest
at time T −tc − 3∆. Still, for better readability we sometimes
refer to this case simply as txer being published before time T .
Improving anonymity of the path Until this point, we have
shown a design of the pay-or-revoke paradigm, that, while
ensuring that honest users do not lose coins, has an obvious
drawback in terms of anonymity. In particular, the transac-
tion outputs of txer contain the addresses of every user on
the path in the clear (except for the receiver who does not
need to refund and therefore needs no such output). This
means that every intermediary (or any other user that sees
txer) learns about the identity of every user on the payment
path as soon as it sees txer. To prevent this leak, we use stealth
addresses [29]. We overview our use of stealth addresses here
and refer to Section 4.2 for technical details. On a high level,
instead of spending to existing addresses, the sender uses
fresh addresses for the outputs of txer. These addresses were
never used before, but are under the control of the respective
users. With this approach, if txer is leaked, the identities of
all users on the path, especially the identity of the sender and
the receiver, remain hidden. Note that we assume the input of
txer to be an unused and unlinkable input of the sender.
Fast track payments The design considered so far has
still a practical drawback compared to MHPs in the LN. In
the LN, if every user is honest, the payment is carried out
almost instantaneously, i.e. the channels are updated as soon
as the HTLCs are opened. Obviously, users of a payment
do not want to wait until some time T until the payment is
carried out, even if all users are honest. To enable the same
fast payments in Blitz, we extend the protocol design with an
optional second communication round, called the fast track
(we compare this second round to the one adopted in the LN
below). Speciﬁcally, the users on the path can honestly update
their channels from the sender to the receiver to a state where
the α coins move from left to right.
For this, the sender does not go idle upon receiving the
conﬁrmation in time from the receiver. Instead, U0 starts up-
dating the channel γ0 with its neighbor U1 to a state where
the α coins are paid to U1. Since U0 is the only one able to
publish txer, U0 is safe when performing this update. After
this update, U1 does the same with U2. All users on the path
repeat this step until the receiver is reached. If everyone is
honest, the payment will be carried out as quick as in the LN
honest case. If someone stops the update or some honest users
are skipped by colluding malicious users, honest users simply
wait until time T , and claim their money (and fees) either
by cooperatively updating the channel with their neighbor or
forcefully on-chain. Intuitively, since intermediary users only
update their right channel after updating their left channel,
they cannot lose any money, even if txer is published.
Using the fast track seems to be a better choice for normal
payments. However, there are applications, where the non
fast track is more suitable, e.g., a service with a trial period
or a subscription model, where a user might want to set up
a payment, that gets conﬁrmed after some time. Should the
user decide against it, he/she can cancel the payment. The
choice of fast track is up to the user. Having this second
round is completely optional and for efﬁciency reasons only.
A payment that is carried out in one round has the same
security properties as one carried out in two rounds.
Fast revoke In the case that an intermediary is ofﬂine and
the payment is unsuccessful, the refund can happen without
necessarily publishing txer, saving the cost to put a transaction
on-chain. Say Ui+1 is ofﬂine and Ui has already set up the
construction with Ui−1. As soon as an honest Ui notices that
Ui+1 is unresponsive, it can start asking Ui−1 to update their
channel to the state before the payment was set up. After doing
this, Ui−1 asks its left neighbor to do the same and so on until
the sender is reached and the payment is reverted without
txer being published. Should some intermediary refuse to
honestly revoke, then txer can still be published. Apart from
funds being locked for a shorter time, one could add additional
incentives to the fast revocation (or fast track) by giving a
small fee to the users that are willing to participate in it. Of
course, users need a mechanism to ﬁnd out whether others are
ofﬂine. For that, we note that the LN protocol mandates users
to periodically broadcast a heartbeat message. We consider
such default messages orthogonal to payment protocols and
do not count them in round complexity.
Honest update The transactions in Figure 4 between users
are exchanged off-chain and used to guarantee that honest
users do not lose any coins. However, should one of the users
in a channel be able to convince the other that it is able to
enforce either txr
i on-chain (that is if txer is on-chain
before time T or time T has already passed, respectively), two
collaborating users can simply perform an honest update. For
this, they update their channel to a state where both have their
corresponding balance, with the beneﬁt that no transaction
has to be put on-chain and their channel remains open.
Blitz vs. ILP/LN/AMHL We claim that Blitz is a solution
for the issues presented in Section 1 and allows for PCNs that
have higher throughput, less communication complexity, addi-
tional security against certain attacks, and are implementable
in cryptocurrencies without scripting capabilities. We high-
light the differences between Blitz and other state-of-the-art
payment methods such as Interledger Payments (ILP), the LN
and the wormhole secure construction Anonymous Multi-Hop
Locks (AMHL) [20] in Table 1.
i or txp
USENIX Association
30th USENIX Security Symposium    4049
Table 1: Features of different payment methods: Interledger
(ILP), Lightning Network (LN), Anonymous Multi-Hop
Locks (AMHL), Blitz and Blitz using the fast track payment
(FT). We abbreviate timelocks as TL and signature function-
ality as σ. * The requirement of HTLC can be dropped from
the LN using scriptless scripts when feasible.
ILP
Bal. Security No
Rounds
Atomicity
Scripting
Collateral
1
No
σ
n/a
LN
Yes
2
No (Wormhole) Yes
σ, TL, HTLCs*
linear
AMHL Blitz
Yes
Yes
1
2
Yes
σ, TL
constant
σ, TL
linear
Blitz FT
Yes
2
Yes
σ, TL
constant
Table 2: Collateral time for the LN, AMHL and Blitz for
unsuccessful (refund) and successful payments (pay) as well
as different threat models. We say instant when noone on the
path stops the payment in either round. ξ denotes the time
users need to claim their funds (e.g., in the LN 144 blocks).
anyone malicious
sender honest
everyone honest
LN / AMHL
pay
refund
n· ξ
n· ξ
n· ξ
n· ξ
instant
instant
Blitz
refund
ξ
∆
instant
pay
ξ
ξ
instant
First, Blitz offers balance security with only one round
of communication, while ILP does not provide that and the
LN requires two rounds. While the fast track optimization
does involve a second round (from left to right, as opposed to
right to left as in the LN), it is optional and affects only the
efﬁciency (in the case everyone is honest) and not security: a
payment that had a successful ﬁrst round will be successful
regardless of any network faults in the second round.
Indeed, the same holds true for the wormhole attack: Once
a user has successfully set up a Blitz payment, it cannot be
skipped anymore in the second round, even with the fast track.
The payment is successful for everyone or no one, achieving
thus the atomicity property missing in ILP and the LN, and
honest intermediaries are not cheated out of their fees.
Secondly, Blitz reduces the collateral from linear (in the
size of the path) to constant in the case some of the parties are
malicious, while offering comparable performance in the opti-
mistic case, as shown in Section 6. For a corner case where the
sender is honest, the collateral can even be unlocked almost
instantaneously. We show in which cases Blitz outperforms
the LN in Table 2. Finally, in terms of interoperability, we
require only signatures and timelocks from the underlying
blockchain, with the LN additionally requiring HTLCs and
ILP only signatures.
Concurrent payments In Blitz, multiple payments can be
carried out in parallel, analogous to concurrent HTLC-based
payments in the LN (see Appendix A for further discussion
and an illustrative example).
4 Our construction
4.1 Security and privacy goals
intermediaries do not
We informally review the security and privacy goals of a
PCN, deferring the formal deﬁnitions to the full version [6].
Balance security Honest
lose
money [19].
Sender/Receiver privacy In the case of a successful pay-
ment, malicious intermediaries cannot determine if the left
neighbor along the path is the actual sender or just an hon-
est user connected to the sender through a path of non-
compromised users. Similarly, malicious intermediaries can-
not determine if the right neighbor is the actual receiver or
an honest user connected to the receiver through a path of
non-compromised users.
Path privacy In the case of a successful payment, malicious
intermediaries cannot determine which users participated in
the payment aside from their direct neighbors.
4.2 Assumptions and building blocks
System assumptions We assume that every party has a pub-
licly known pair of public keys (A,B) as required for stealth
address creation (see below). We further assume that hon-
est parties are required to stay online for the duration of the
protocol. Finally, we consider the route ﬁnding algorithm
an orthogonal problem and assume that every user (U0) has
access to a function pathList ← GenPath(U0,Un), which gen-
erates a valid path from U0 to Un over some intermediaries.
We refer the reader to [24, 25] for more details on recent rout-
ing algorithms for PCNs. We now introduce the cryptographic
building blocks that we require in our protocol.
Ledger and payment channels We rely, as a blackbox, on
a public ledger to keep track of all balances and transactions
and a PCN that supports the creation, update, and closure of
channels (see Section 2). We further assume that payment
channels between users that want to conduct payments are
already opened. We denote the standard operations to interact
with the blockchain and the channels as follows:
i
updateChannel(γi, txstate
will be accepted on the ledger after at most time ∆.
publishTx(tx) : If tx is a valid transaction (Section 2), it
) : When called by a user ∈
γi.users, initiates an update in γi to the state txstate
. If the
update is successful, (update−ok) is returned to both users
of the channel, else (update−fail) is returned to them. We
deﬁne tu as an upper bound on the time it takes for a channel
update after this procedure is called.
closeChannel(γi) : When called by a user ∈ γi.users, closes
the channel, such that the latest state transaction txstate
will
appear on the ledger. We deﬁne tc as an upper bound on
the time it takes for txstate
to appear on the ledger after this
procedure is called.
Digital signatures A digital signature scheme is a tuple of
algorithms Σ := (KeyGen, Sign, Vrfy) deﬁned as follows:
(pk, sk) ← KeyGen(λ) is a PPT algorithm that on input
i
i
i
4050    30th USENIX Security Symposium
USENIX Association
vate key sk and a message m outputs a signature σ.
the security parameter λ, outputs a pair of public and private
keys (pk, sk).
σ ← Sign(sk,m) is a PPT algorithm that on input the pri-
{0,1} ← Vrfy(pk,σ,m) is a DPT algorithm that on input
the public key pk, an authentication tag σ and a message m,
outputs 1 if σ is a valid authentication for m.
We require that the digital signature scheme is cor-
rect, that is, ∀(pk, sk) ← KeyGen(λ) it must hold that 1 ←
Vrfy(pk, Sign(sk,m),m). We additionally require a digital sig-
nature scheme that is strongly unforgeable against message-
chosen attacks (EUF-CMA) [14].
Stealth addresses [29] On a high level, this scheme allows a
user (say Alice) to derive a fresh public key in a digital signa-
ture scheme Σ controlled by another user (say Bob) on input
two of Bob’s public keys. In a bit more detail, a stealth ad-
dresses scheme is a tuple of algorithms Φ := (GenPk, GenSk)
deﬁned as follows:
(P,R) ← GenPk(A,B) is a PPT algorithm that on input
two public keys A, B controlled by some user U, creates a
new public key P under U’s control. This is done by ﬁrst
sampling some randomness r ←$ [0,l − 1], where l is the
prime order of the group used in the underlying signature
scheme Σ, and computing P := gH (Ar) · B, where H is a hash
function modelled as a random oracle. Then, the value R := gr
is calculated. P is the public key under U’s control and R is
the information required to construct the private key.
p ← GenSk(a,b,P,R) is a DPT algorithm that on input
two secret keys a, b corresponding to the two public keys A,
B and a pair (P,R) that was generated as P ← GenPk(A,B),
creates the secret key p corresponding to P. This is done by
computing p := H (Ra) + b.
We see that correctness follows directly: gp = gH (Ra)+b =
gH (gr·a) · gb = gH (Ar) · B = P. In [29] it is argued that this
new one-time public key P is unlinkable for a spectator even
when observing R, meaning on a high level that P for some