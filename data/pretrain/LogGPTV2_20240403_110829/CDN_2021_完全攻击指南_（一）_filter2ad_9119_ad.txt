IP 正确，子域正确：
IP 错误，子域正确：
自动化的过程可以使用 virtual-host-discovery
工具，项目地址：
克隆到本地
    $ git clone https://github.com/jobertabma/virtual-host-discovery
使用方法：
    $ ruby scan.rb --ip=x.x.x.x --host=domain  --wordlist=
其中wordlsit 参数可以省略，默认有一个字典加载，使用该参数则是指定我们自己想要跑的子域列表。
执行后，即可快速找出命中 IP 的子域
另外可以通过 find-virtual-hosts （[https://pentest-tools.com/information-gathering/find-virtual-hosts#）工具来在线快速针对全网数据扫描比对得出结果：](https://pentest-tools.com/information-gathering/find-virtual-hosts#%EF%BC%89%E5%B7%A5%E5%85%B7%E6%9D%A5%E5%9C%A8%E7%BA%BF%E5%BF%AB%E9%80%9F%E9%92%88%E5%AF%B9%E5%85%A8%E7%BD%91%E6%95%B0%E6%8D%AE%E6%89%AB%E6%8F%8F%E6%AF%94%E5%AF%B9%E5%BE%97%E5%87%BA%E7%BB%93%E6%9E%9C%EF%BC%9A)
###  十七、通过 favicon.ico 哈希特征
  * favicon.ico 是现代浏览器在网页标题的左侧显示的一个小图标。
  * 该图标数据通常是从  处获取的，浏览器会在浏览任何网站时自动请求它。
  * 因为可以通过计算 favicon.ico 的指纹哈希，然后去 shodan 等搜索引擎搜索与之相同的主机结果，从而进一步探测是否能挖掘出目标网站的真实 IP 地址。
计算 favicon.ico 哈希的小脚本：
python 2
    import mmh3
    import requests
    response = requests.get('https://domain.com/favicon.ico')
    favicon = response.content.encode('base64')
    hash = mmh3.hash(favicon)
    print hash
python 3
    import mmh3
    import requests
    import codecs
    response = requests.get('https://domain.com/favicon.ico')
    favicon = codecs.encode(response.content,"base64")
    hash = mmh3.hash(favicon)
    print(hash)
安装好环境依赖后执行脚本，计算得到目标网站的 favicon.ico 哈希值：
    $ apt-get install build-essential
    $ apt-get install gcc
    $ apt-get install g++
    $ python 3.py
然后用 shodan 搜索引擎搜索哈希，去命中 IP：
    $ proxychains shodan search http.favicon.hash:1730752770 --fields ip_str,port --separator " " | awk '{print $1":
另外值得一提的是，渗透过程中同样可以根据 favicon 哈希、子域、IP
的命中，做好指纹排序并整理，另外做一张常见的中间件或者组件指纹哈希表，分类进行资产快速命中：
###  十八、通过网页源码特征值
  * 在服务器源 IP 地址允许访问并且返回的也是类似的网站内容情况下，可以通过侦察页面源码中 JS 、CSS 、HTML 等一系列静态特征值，然后用 Shodan 、Zoomeye 、Censys 等搜索引擎进行匹配搜索，从而定位 IP 。
例如源码中找到一段 Google Analytics 的 JS 特征：
然后 shodan 搜索这些代码特征：
    http.html:UA-XXXXX-X
    http.html:GTM-XXXXXX
定位到了服务器源 IP ：
###  十九、通过网站远程资源业务
  * 多找一下目标网站上支持远程图片、远程文件等被动连接的业务地方，通过注入我们自己服务器的资源文件，然后查看 HTTP 日志来定位目标服务器的连接。
  * 常见的比如加载远程头像处。
###  二十、通过 CDN 机器
  * 有些网站是自搭建 CDN 机器做负载均衡的，很难保证每一台 CDN 机器都做到 100% 安全。没有办法的情况下，可以尝试针对这些 CDN 机器进行渗透测试，如果能拿下一台，就什么都有了，目标主站的安全性好并不代表所有的生产边路都不存在缺陷，安全不在于真正强的地方有多强，而在于薄弱的地方有多弱。
###  二十一、通过流量耗尽、流量放大攻击
  * CDN 是收费的，那么其流量一定是有限的，对一些不是超大型目标网站在进行测试时，注意，一定要在项目方授权允许的情况下，可以尝试进行 ddos 流量测试。
  * CDN 流量耗尽了，就不存在内容分发了，直接就可以拿到源 IP 。
  * 但是，CDN 是流量穿透的，别流量耗尽前，目标网站先 gg 了。
  * 另一种比较古老的做法是通过 CDN 设置中的自身缺陷，将要保护的源站 IP 设置成为 CDN 节点的地址，致使 CDN 流量进入死循环，一层层放大后，最终自己打死自己。不过大多数的 CDN 厂商早已限制禁止将 CDN 节点设置成 CDN 节点 IP ，并且启用了自动丢包保护机制。
###  二十二、通过域名备案信息广域探测
  * 针对目标域名，目标二级域名，如果都做了 CDN 的情况下，是不是就思路中断了呢？
  * 肯定不是。这里分享一个很少有人去关注的独门秘技。
  * 网站需要服务器，但是再土豪的公司，也不可能一个域名一台服务器，大多数情况下，都是多个域名业务，共用一台服务器。
  * 那么如果目标网站存在备案，可以查询其备案信息，收集该单位或者个人备案的其他网站域名以及其他子域，然后再进行一轮广域的探测，很有可能其中的某个边缘子域，没有做 CDN，就直接暴露了真实服务器的 IP 地址，然后再进一步验证该 IP 是否也是目标网站的真实 IP 。
  * 特别提一哈，此方法成功率特别的高，而且找到的速度非常的快，所以写在后面，有毅力坚持读下来的同学可以看到。
###  二十三、利用 CDN 服务商默认配置
  * 不同的 CDN 服务商，产品默认配置不同。
  * 例如 CloudFlare ，默认配置 direct.domain.com 二级子域指向服务器源 IP。但是很多公司或者个人使用 CDN 保护的时候并没有修改默认配置，导致 IP 泄露风险。
  * 其他一些高风险的子域如 ftp、mail、cpanel、direct-connect 等也可以重点关注，方便快速定位，毕竟众测里时间就是金钱。
###  二十四、通过 SSH 指纹
  * 跑题了，SSH 指纹一般应用于匿名 Tor 网络追踪
###  二十五、使用 CloudFair 工具
  * 如果你的目标是 CloudFlare 保护的，建议先上这款工具跑。
  * CloudFail 是一种战术侦察工具，旨在收集有关受 Cloudflare 保护的目标的足够信息，以期发现服务器的 IP 位置。
该工具目前探测经过3个不同的攻击阶段：
1.使用 DNSDumpster.com 扫描 DNS 配置错误。  
2.扫描和比对 Crimeflare.com 数据库。  
3.内置字典暴力扫描超过11000个子域名。
安装和使用：
    $ git  clone https://github.com/m0rtem/CloudFail
    $ pip install -r requirements.txt
    $ python cloudfail.py -t domain.com
       ____ _                 _ _____     _ _
      / ___| | ___  _   _  __| |  ___|_ _(_) |
     | |   | |/ _ \| | | |/ _` | |_ / _` | | |
     | |___| | (_) | |_| | (_| |  _| (_| | | |
      \____|_|\___/ \__,_|\__,_|_|  \__,_|_|_|
        v1.0.2                      by m0rtem
    [16:12:31] Initializing CloudFail - the date is: 07/01/2021  
    [16:12:31] Fetching initial information from: domain.com...  
    [16:12:31] Server IP: 104.xx.x.76  
    [16:12:31] Testing if domain.com is on the Cloudflare network...  
    [16:12:31] domain.com is part of the Cloudflare network!  
    [16:12:31] Testing for misconfigured DNS using dnsdumpster...  
    [16:12:35] [FOUND:HOST] domain.com HTTP: cloudflare TCP8080: cloudflare 172.xx.xx.62 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] freelance.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] www.freelance.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] ctf.domain.com HTTP: nginx/1.10.3 HTTPS: nginx/1.10.3 SSH: SSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u7 185.231.245.55 TEAM-HOST AS Russia  
    [16:12:35] [FOUND:HOST] www.ctf.domain.com HTTP: nginx/1.10.3 HTTPS: nginx/1.10.3 SSH: SSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u7 185.231.245.55 TEAM-HOST AS Russia  
    [16:12:35] [FOUND:HOST] mail.domain.com 62.213.11.246 ROSTELECOM-ASRussia Russia  
    [16:12:35] [FOUND:HOST] school.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] www.school.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] pentest.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] www.pentest.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] w.domain.com HTTP: nginx/1.6.2 HTTPS: nginx/1.6.2 SSH: SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u8 185.xx.xx.136 TEAM-HOST AS Russia  
    [16:12:35] [FOUND:HOST] www.w.domain.com HTTP: nginx/1.6.2 HTTPS: nginx/1.6.2 SSH: SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u8 185.xx.xx.136 TEAM-HOST AS Russia  
    [16:12:35] [FOUND:HOST] www.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] pay.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:HOST] www.pay.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:DNS] tim.ns.cloudflare.com. 173.xx.xx.145 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:DNS] tina.ns.cloudflare.com. 173.xx.xx.230 CLOUDFLARENETUnited States United States  
    [16:12:35] [FOUND:MX] 62.xx.xx.246 ROSTELECOM-ASRussia 10 mail.domain.com.   
    [16:12:35] [FOUND:MX] 62.xx.xx.246 ROSTELECOM-ASRussia 20 mail.domain.com.   
    [16:12:35] Scanning crimeflare database...  
    [16:12:36] [FOUND:IP] 62.xx.xx.230  
    [16:12:36] [FOUND:IP] 62.xx.xx.246  
    [16:12:36] Scanning 11219 subdomains (subdomains.txt), please wait...  
    [16:15:52] [FOUND:SUBDOMAIN] mail.domain.com IP: 62.xx.xx.246 HTTP: 200  
    [16:16:13] [FOUND:SUBDOMAIN] pay.domain.com ON CLOUDFLARE NETWORK!  
    [16:16:35] [FOUND:SUBDOMAIN] school.domain.com ON CLOUDFLARE NETWORK!  
    [16:17:03] [FOUND:SUBDOMAIN] w.domain.com IP: 185.xx.xx.136 HTTP: 200  
    [16:17:10] [FOUND:SUBDOMAIN] www.domain.com ON CLOUDFLARE NETWORK!  
    [16:17:14] Scanning finished...
闭眼休息一会，一会就跑出来了：
喜欢偷懒的同学可以使用在线查询：`https://suip.biz/?act=cloudfail` 已经将此工具集成到了后台，并做了前端 UI
页面供安全信息从业人员在线查询：
脚本执行的结果前端直接可以看到，另外提供 PDF 报告下载，这里我用的是 baidu.com 测试，因为 baidu.com 并没有使用
CloudFlare CDN ，所以速度很快。
如果是查询使用了 CloudFlare CDN 的域名，速度会比较慢，页面会置空，什么都不显示：
稍等一段时间就可以了，这里也给大家截个图，防止有同学误会工具不可以使用：
## 0x04 找到真实 IP 后如何使用
  * 通过修改 hosts 文件，将域名和 IP 绑定。（要是不会，不建议阅读此文。）
  * 如使用 burpsuite 测试，可以在 Project options ——> Connections ——> Hostname Resolution 中增加域名和 IP 记录。
## 0x05 来自高纬度的对抗
  * 协议层的管制 / 动静态表 / 出口阻断 / 并发机制转换 / 编码放大 …… 等等高纬度对抗的内容，将在（二）中细细道来。（未完待续）