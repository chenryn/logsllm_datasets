{"faas.trigger.request_id": {"dashed_name": "faas-trigger-request-id", "description": "The ID of the trigger request , message, event, etc.", "example": 123456789, "flat_name": "faas.trigger.request_id", "ignore_above": 1024, "level": "extended", "name": "trigger.request_id", "normalize": [], "short": "The ID of the trigger request , message, event, etc."}}
{"faas.trigger.type": {"dashed_name": "faas-trigger-type", "description": "The trigger for the function execution.", "example": "http", "expected_values": ["http", "pubsub", "datasource", "timer", "other"], "flat_name": "faas.trigger.type", "ignore_above": 1024, "level": "extended", "name": "trigger.type", "normalize": [], "short": "The trigger for the function execution."}}
{"faas.version": {"dashed_name": "faas-version", "description": "The version of a serverless function.", "example": "123", "flat_name": "faas.version", "ignore_above": 1024, "level": "extended", "name": "version", "normalize": [], "short": "The version of a serverless function."}}
{"file.accessed": {"dashed_name": "file-accessed", "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.", "flat_name": "file.accessed", "level": "extended", "name": "accessed", "normalize": [], "short": "Last time the file was accessed.", "type": "date"}}
{"file.attributes": {"dashed_name": "file-attributes", "description": "Array of file attributes.\nAttributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.", "example": "[\"readonly\", \"system\"]", "flat_name": "file.attributes", "ignore_above": 1024, "level": "extended", "name": "attributes", "normalize": ["array"], "short": "Array of file attributes."}}
{"file.code_signature.digest_algorithm": {"dashed_name": "file-code-signature-digest-algorithm", "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.", "example": "sha256", "flat_name": "file.code_signature.digest_algorithm", "ignore_above": 1024, "level": "extended", "name": "digest_algorithm", "normalize": [], "original_fieldset": "code_signature", "short": "Hashing algorithm used to sign the process."}}
{"file.code_signature.exists": {"dashed_name": "file-code-signature-exists", "description": "Boolean to capture if a signature is present.", "example": "true", "flat_name": "file.code_signature.exists", "level": "core", "name": "exists", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if a signature is present.", "type": "boolean"}}
{"file.code_signature.signing_id": {"dashed_name": "file-code-signature-signing-id", "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.", "example": "com.apple.xpc.proxy", "flat_name": "file.code_signature.signing_id", "ignore_above": 1024, "level": "extended", "name": "signing_id", "normalize": [], "original_fieldset": "code_signature", "short": "The identifier used to sign the process."}}
{"file.code_signature.status": {"dashed_name": "file-code-signature-status", "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.", "example": "ERROR_UNTRUSTED_ROOT", "flat_name": "file.code_signature.status", "ignore_above": 1024, "level": "extended", "name": "status", "normalize": [], "original_fieldset": "code_signature", "short": "Additional information about the certificate status."}}
{"file.code_signature.subject_name": {"dashed_name": "file-code-signature-subject-name", "description": "Subject name of the code signer", "example": "Microsoft Corporation", "flat_name": "file.code_signature.subject_name", "ignore_above": 1024, "level": "core", "name": "subject_name", "normalize": [], "original_fieldset": "code_signature", "short": "Subject name of the code signer"}}
{"file.code_signature.team_id": {"dashed_name": "file-code-signature-team-id", "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.", "example": "EQHXZ8M8AV", "flat_name": "file.code_signature.team_id", "ignore_above": 1024, "level": "extended", "name": "team_id", "normalize": [], "original_fieldset": "code_signature", "short": "The team identifier used to sign the process."}}
{"file.code_signature.timestamp": {"dashed_name": "file-code-signature-timestamp", "description": "Date and time when the code signature was generated and signed.", "example": "2021-01-01T12:10:30Z", "flat_name": "file.code_signature.timestamp", "level": "extended", "name": "timestamp", "normalize": [], "original_fieldset": "code_signature", "short": "When the signature was generated and signed.", "type": "date"}}
{"file.code_signature.trusted": {"dashed_name": "file-code-signature-trusted", "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.", "example": "true", "flat_name": "file.code_signature.trusted", "level": "extended", "name": "trusted", "normalize": [], "original_fieldset": "code_signature", "short": "Stores the trust status of the certificate chain.", "type": "boolean"}}
{"file.code_signature.valid": {"dashed_name": "file-code-signature-valid", "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.", "example": "true", "flat_name": "file.code_signature.valid", "level": "extended", "name": "valid", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if the digital signature is verified against the binary content.", "type": "boolean"}}
{"file.created": {"dashed_name": "file-created", "description": "File creation time.\nNote that not all filesystems store the creation time.", "flat_name": "file.created", "level": "extended", "name": "created", "normalize": [], "short": "File creation time.", "type": "date"}}
{"file.ctime": {"dashed_name": "file-ctime", "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.", "flat_name": "file.ctime", "level": "extended", "name": "ctime", "normalize": [], "short": "Last time the file attributes or metadata changed.", "type": "date"}}
{"file.device": {"dashed_name": "file-device", "description": "Device that is the source of the file.", "example": "sda", "flat_name": "file.device", "ignore_above": 1024, "level": "extended", "name": "device", "normalize": [], "short": "Device that is the source of the file."}}
{"file.directory": {"dashed_name": "file-directory", "description": "Directory where the file is located. It should include the drive letter, when appropriate.", "example": "/home/alice", "flat_name": "file.directory", "ignore_above": 1024, "level": "extended", "name": "directory", "normalize": [], "short": "Directory where the file is located."}}
{"file.drive_letter": {"dashed_name": "file-drive-letter", "description": "Drive letter where the file is located. This field is only relevant on Windows.\nThe value should be uppercase, and not include the colon.", "example": "C", "flat_name": "file.drive_letter", "ignore_above": 1, "level": "extended", "name": "drive_letter", "normalize": [], "short": "Drive letter where the file is located."}}
{"file.elf.architecture": {"dashed_name": "file-elf-architecture", "description": "Machine architecture of the ELF file.", "example": "x86-64", "flat_name": "file.elf.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "original_fieldset": "elf", "short": "Machine architecture of the ELF file."}}
{"file.elf.byte_order": {"dashed_name": "file-elf-byte-order", "description": "Byte sequence of ELF file.", "example": "Little Endian", "flat_name": "file.elf.byte_order", "ignore_above": 1024, "level": "extended", "name": "byte_order", "normalize": [], "original_fieldset": "elf", "short": "Byte sequence of ELF file."}}
{"file.elf.cpu_type": {"dashed_name": "file-elf-cpu-type", "description": "CPU type of the ELF file.", "example": "Intel", "flat_name": "file.elf.cpu_type", "ignore_above": 1024, "level": "extended", "name": "cpu_type", "normalize": [], "original_fieldset": "elf", "short": "CPU type of the ELF file."}}
{"file.elf.creation_date": {"dashed_name": "file-elf-creation-date", "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.", "flat_name": "file.elf.creation_date", "level": "extended", "name": "creation_date", "normalize": [], "original_fieldset": "elf", "short": "Build or compile date.", "type": "date"}}
{"file.elf.exports": {"dashed_name": "file-elf-exports", "description": "List of exported element names and types.", "flat_name": "file.elf.exports", "level": "extended", "name": "exports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of exported element names and types.", "type": "flattened"}}
{"file.elf.go_import_hash": {"dashed_name": "file-elf-go-import-hash", "description": "A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "file.elf.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the Go language imports in an ELF file."}}
{"file.elf.go_imports": {"dashed_name": "file-elf-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "file.elf.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "elf", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"file.elf.go_imports_names_entropy": {"dashed_name": "file-elf-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "file.elf.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"file.elf.go_imports_names_var_entropy": {"dashed_name": "file-elf-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "file.elf.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"file.elf.go_stripped": {"dashed_name": "file-elf-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "file.elf.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "elf", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"file.elf.header.abi_version": {"dashed_name": "file-elf-header-abi-version", "description": "Version of the ELF Application Binary Interface (ABI).", "flat_name": "file.elf.header.abi_version", "ignore_above": 1024, "level": "extended", "name": "header.abi_version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF Application Binary Interface (ABI)."}}
{"file.elf.header.class": {"dashed_name": "file-elf-header-class", "description": "Header class of the ELF file.", "flat_name": "file.elf.header.class", "ignore_above": 1024, "level": "extended", "name": "header.class", "normalize": [], "original_fieldset": "elf", "short": "Header class of the ELF file."}}
{"file.elf.header.data": {"dashed_name": "file-elf-header-data", "description": "Data table of the ELF header.", "flat_name": "file.elf.header.data", "ignore_above": 1024, "level": "extended", "name": "header.data", "normalize": [], "original_fieldset": "elf", "short": "Data table of the ELF header."}}
{"file.elf.header.entrypoint": {"dashed_name": "file-elf-header-entrypoint", "description": "Header entrypoint of the ELF file.", "flat_name": "file.elf.header.entrypoint", "format": "string", "level": "extended", "name": "header.entrypoint", "normalize": [], "original_fieldset": "elf", "short": "Header entrypoint of the ELF file.", "type": "long"}}
{"file.elf.header.object_version": {"dashed_name": "file-elf-header-object-version", "description": "\"0x1\" for original ELF files.", "flat_name": "file.elf.header.object_version", "ignore_above": 1024, "level": "extended", "name": "header.object_version", "normalize": [], "original_fieldset": "elf", "short": "\"0x1\" for original ELF files."}}
{"file.elf.header.os_abi": {"dashed_name": "file-elf-header-os-abi", "description": "Application Binary Interface (ABI) of the Linux OS.", "flat_name": "file.elf.header.os_abi", "ignore_above": 1024, "level": "extended", "name": "header.os_abi", "normalize": [], "original_fieldset": "elf", "short": "Application Binary Interface (ABI) of the Linux OS."}}
{"file.elf.header.type": {"dashed_name": "file-elf-header-type", "description": "Header type of the ELF file.", "flat_name": "file.elf.header.type", "ignore_above": 1024, "level": "extended", "name": "header.type", "normalize": [], "original_fieldset": "elf", "short": "Header type of the ELF file."}}