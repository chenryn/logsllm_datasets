rates of compromise. The overall rate of compromise was
lowered by an order of magnitude, from 0.2 to 0.022.
Figure 5a indicates the amount of communications com-
promised versus the number of nodes compromised, with
and without key reinforcement for the various schemes.
Successfully implementing multipath key reinforcement on
the basic scheme enables it to outperform the q-composite
scheme for q ≥ 2 even when the q-composite scheme is
supplemented by key reinforcement. The intuitive reason
for this is that multipath key reinforcement acts similarly to
the q-composite keys scheme in that it compounds the difﬁ-
culty of compromising a given link by requiring the adver-
sary possess multiple relevant keys to eavesdrop on a given
link. The trade-off for this beneﬁt in the q-composite case
is a smaller key pool size; the trade-off for the multipath
key reinforcement scheme is increased network overhead.
Compounding both the schemes compounds their weak-
nesses - the smaller key pool size of the q-composite keys
scheme undermines the effectiveness of multipath key rein-
forcement by making it easier to build up a critically large
collection of keys.
Figure 5b shows the maximum network size of the basic
scheme with multipath key reinforcement. The graphs show
that multipath key reinforcement gives a signiﬁcant boost to
network size performance when implemented on the basic
scheme, but has little effect with the q-composite scheme.
The cost of the improved security due to multipath key
reinforcement is an added overhead in neighbor discovery
and key establishment trafﬁc. Whether this tradeoff is a
good one will depend on the speciﬁc application as well
as the deployment density characteristics of the sensor net-
work.
While the analysis presented is for using multipath key
reinforcement to secure links that have been formed after
key-setup, the scheme can also be used to reinforce path-
keys that are established between nodes that did not share
keys during key setup. This will further improve the secu-
rity of the system.
7 Random-pairwise keys scheme
In the random key schemes presented thus far, while each
node can verify that some of its neighbors have certain se-
cret keys and are thus legitimate nodes, no node can authen-
ticate the identity of a neighbor that it is communicating
with. For example, suppose node A shares some set of keys
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
K with node B and that they use these keys as the basis
for securing a communications link. Because keys can be
issued multiple times out of the key pool, other nodes, e.g.,
C, could also hold this set of secret keys K in its key ring. A
cannot ascertain that it is really communicating with B and
not C, since it knows nothing more about B than its knowl-
edge of K. We deﬁne the property that we are seeking as
follows:
Node-to-node authentication. A protocol has
the property of node-to-node authentication if any
node can ascertain the identity of the nodes that it
is communicating with.
This property is useful in supporting many security func-
tions. For example, in detecting node misbehavior, it is
essential that a node be certain of the misbehaving node’s
identity before taking any action. Node-to-node authentica-
tion can also allow individual sensor nodes to resist a node
replication attack by keeping track of which node identi-
ties have already been inserted into the network and reject-
ing further connection attempts by that identity. As a ﬁ-
nal example, node-to-node authentication can shift security
functions away from the base station by enabling nodes to
autonomously perform revocations on misbehaving nodes,
thus improving reaction times toward detectable network in-
trusions.
In this section, we propose a new key establishment pro-
tocol called the random pairwise scheme that possesses the
key property of node-to-node authentication. The random
pairwise scheme has the following properties:
• Perfect resilience against node capture. Any node that
is captured reveals no information about links that it is
not directly involved in.
• Node-to-node identity authentication. Nodes are able
to verify the identities of the nodes with whom they
are communicating. An adversary is unable to imper-
sonate the identity of any node B unless B has already
been captured.
• Distributed Node Revocation. With some added over-
head in key storage, misbehaving nodes can be revoked
from the network without involving a base station.
• Resistance to node replication and generation. The
scheme can reduce the opportunity of node replica-
tion at some cost to node memory and communication
setup overhead.
• Comparable scalability. The scheme can support a
maximum number of nodes that is comparable to the
number of nodes supportable by the basic scheme and
q-composite schemes under the limited global payoff
requirement framed in Section 5.2.2.
7.1 Description of the random pairwise scheme
Suppose a sensor network has a maximum of n nodes.
A simple solution to the key-predistribution problem is the
pairwise keys scheme where each node contains n−1 com-
munication keys each being pairwise privately shared with
one other node in the network.
The random pairwise keys scheme is a modiﬁcation of
the pairwise keys scheme based on the observation that not
all n−1 keys need to be stored in the node’s key ring to have
a connected random graph with high probability. Erd¨os and
R´enyi’s formula allows us to calculate the smallest probabil-
ity p of any two nodes being connected such that the entire
graph is connected with high probability c. To achieve this
probability p in a network with n nodes, each node need
only store a random set of np pairwise keys instead of ex-
haustively storing all n − 1. Reversing the calculation, if
a node can store m keys, then the maximum supportable
network size is
n =
m
p
(6)
Depending on the model of connectivity, p may grow
slowly with n when n is large (intuitively, p cannot de-
crease as n goes toward inﬁnity, since it is more likely that
a large graph is disconnected than a smaller graph). Hence,
n should increase with increasing m and decreasing p. The
exact rates will depend on the deployment model.
The use of pairwise keys instead of purely random keys
chosen from a given pool can give us node-to-node authenti-
cation properties if each node which holds some key k, also
stores the identity (ID) of the other node which also holds k.
Hence, if k is used to create a secure link with another node,
both nodes are certain of the identity of each other since no
other nodes can hold k.
7.1.1 Initialization and key-setup in the random pair-
wise keys scheme
Recall that the size of each node’s key rings is m keys, and
the probability of any two nodes being able to communicate
securely is p. The random pairwise keys scheme proceeds
as follows:
1. In the pre-deployment initialization phase, a total of
n = m
p unique node identities are generated. The ac-
tual size of the network may be smaller than n. Un-
used node identities will be used if additional nodes are
added to the network in the future. Each node identity
is matched up with m other randomly selected distinct
node IDs and a pairwise key is generated for each pair
of nodes. The key is stored in both nodes’ key rings,
along with the ID of the other node that also knows the
key.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
2. In the post-deployment key-setup phase, each node
ﬁrst broadcasts its node ID to its immediate neigh-
bors. By searching for each other’s IDs in their key-
rings, the neighboring nodes can tell if they share a
common pairwise key for communication. A crypto-
graphic handshake is then performed between neigh-
bor nodes who wish to mutually verify that they do
indeed have knowledge of the key.
7.1.2 Multi-hop range extension
Since the node ID is just a few bytes, key discovery involves
much less network trafﬁc and computational overhead in the
nodes than standard random-key predistribution. Hence the
effective communication range of nodes for key setup can
be extended beyond physical communication range by hav-
ing neighboring nodes re-broadcast the node ID for a certain
number of hops. Each hop that the node ID is rebroadcast
effectively extends the range by approximately one com-
munication radius, increasing the number of nodes that can
hear the broadcast by a squared factor. The table below
shows some intuition for number of reachable nodes in the
case where the expected number of neighbors within com-
munication range is 60.
local (0 hops)
60
1 hop
240
2 hops
3 hops
540
960
n(cid:1) where n(cid:1)
This has an impact on the maximum supportable network
size n. Recall from Equation 2 that connection probability
p = d
is the number of neighbors and d was
computed via the required probability of graph connectivity.
From Equation 6 we have that maximum network size n =
m
p where m is the key ring size. Hence
mn(cid:1)
d
n =
(7)
By increasing the effective communications radius, we also
increase the number of neighbors n(cid:1)
, hence the maximum
supportable network size n also increases. Multihop range
extension should be used with caution, however, because
the rebroadcast is performed without veriﬁcation or authen-
tication. Hence, during the deployment phase, an adver-
sary can send random node IDs into the network which will
then be rebroadcast x times by the receiving nodes. This
potential denial of service (DoS) attack could stop or slow
the key-setup process since the sensor network is actively
helping to amplify the range of the adversary’s interfering
transmissions. The potential damage due to this DoS attack
can be reduced by limiting the number of hops of the range
extension. If DoS is a serious concern then multihop range
extension could be removed altogether; it is not required for
the operation of the random pairwise scheme.
7.1.3 Support for distributed node revocation
In the random pairwise scheme, node revocation can be
supported via base stations as described by Eschenauer
and Gligor [10]. However, base station initiated revoca-
tion mechanisms may also slow the node revocation pro-
cess due to the potential high latency between the nodes and
the base-station. In revocation, fast response is particularly
crucial since a detected attack must be sealed off from the
network before it can do signiﬁcant harm.
To reduce the disadvantages associated with a base-
station dependent revocation protocol, we present a dis-
tributed node revocation scheme for the random pairwise
scheme. Such a scheme is possible if we assume the ex-
istence of a mechanism in each sensor node that enables
it to detect if neighbor nodes have been compromised. The
scheme works by having neighboring nodes broadcast ‘pub-
lic votes’ against a detected misbehaving node (we use the
term public vote since the identity of the voter in this case
need not be kept secret). If any node B observes more than
some threshold number t of public votes against some node
A, then B breaks off all communications with A. By listen-
ing on the network (like any other sensor node), the base sta-
tion can relay the votes back to a physically secure location
where the undeployed nodes are stored. There, any as-yet
undeployed node identities react appropriately by erasing
any pairwise keys associated with A from the undeployed
nodes’ key rings. This has the effect of permanently sever-
ing node A from the network.
It is a technical challenge to design a compact and efﬁ-
cient distributed public vote counting mechanism for sensor
nodes.
In the following discussion, the set of nodes which can
vote against node A are termed A’s voting members. We
require the voting scheme to have the following properties:
• Compromised nodes cannot revoke arbitrary nodes.
• No voting member of A is able to forge another mem-
ber’s vote against A.
• Each voting member of A must be able to verify the
validity of a broadcast public vote against A.
• Broadcast public votes from one voting member reveal
no information that would allow listeners to generate
additional public votes.
• Broadcast public votes have no replay value.
• The method of propagating the broadcast to cover the
entire network should not be vulnerable to denial of
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
service attack by a malicious node operating within the
network.
As a ﬁrst attempt, a simple scheme is as follows: Con-
sider a node A, which, like every other node in the net-
work, has m keys in its key ring. Since all the keys are
issued to exactly two nodes and no two keys are issued
to the same pair of nodes, we have exactly m nodes that
share a pairwise key with node A. We call this set of
m nodes the set of voting members of A. Each of these
m voting members are assigned a random voting key ki.
Each voting member also knows the respective hashes of
the voting keys of all the m − 1 other voting members, i.e.
hash(kj), j (cid:13)= i, 1 ≤ j ≤ m. To cast a public vote against
A, the node broadcasts ki. All other voting members can
verify the vote by computing hash(ki). Once ki is veriﬁed,
voting members can replace hash(ki) with ki and a ﬂag re-
ﬂecting the fact that this vote has already been heard on the
network.
One problem with this scheme is that each entry on the
key ring now stores not only the pairwise key but also m−1
hash values and a voting key. Hence, if m pairwise keys are
stored on the node, the memory requirement is O(m2).
In our scheme, we propose using a Merkle tree [17] to
efﬁciently authenticate m hash values. Only a single veri-
fying hash value (the root value of the Merkle tree) needs to
be stored, but the voting information is now size O(log m),
since each node now needs to reveal not just its secret vot-
ing key but also the hash values of the log m internal nodes
in the Merkle tree that will allow the other voting members
to authenticate the vote.
One consequence of using a Merkle tree mechanism is
that it is now necessary to remember which nodes have al-
ready been received, in order to remove replay value of the
votes. For each vote, the path to the root of the Merkle tree
is unique and can be described in log m bits. Hence, only
log m bits of storage per received vote is necessary. Also,
a total of at most t log m bits is needed since only t votes
need to be received before revocation occurs. t is generally
chosen to be small, as described below.
Choice of the threshold value t. Let t be the minimum
number of votes needed to revoke a node. t must be cho-
sen low enough such that it is unlikely that any node has a
degree < t in the network, but high enough such that a col-
lection of rogue nodes cannot cause the revocation of many
legitimate nodes. For any of the m keys in a node’s key
ring, the probability that it is used is the probability that
the other node which has this key is within communication
radius. This probability is n(cid:1)
neighbors
out of n total nodes, that will be within communication ra-
dius. The distribution of the degree of a node is hence bino-
mial (m, n(cid:1)
d (from Equation 7, where d is
the expected degree of a node in terms of number of secure
links created during key-setup), n(cid:1)
m . Hence
n since there are n(cid:1)
n ). Since n = mn(cid:1)
n simpliﬁes to d
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
we have that the degree of a node is binomial(m, d
m), the
average is d and the variance is d(1 − d
m). For key ring
sizes sufﬁcient to support a reasonably sized network, d
m
will be small. Hence the variance is close to the average d,
i.e., the distribution is heavily skewed to the left.
The expected degree of a node d should increase slowly
with network size n (from Equation 1, d = O(log n)).
Hence t should remain small (≤ 5) for the range of net-
work sizes we are considering in this paper (1,000 to 10,000
nodes). Since t is small, we note that memorizing previ-
ously cast votes to prevent replay is not a signiﬁcant mem-
ory cost.
One consequence of implementing such a voting scheme
is that no node can have less than t neighbors, otherwise that
node cannot be revoked. Since t was chosen such that it is
unlikely that any node has degree < t in the network, the
scheme can be modiﬁed such that any node that is unable to
form at least kt connections (where k is some small multi-
ple, e.g. 2) on the network after the key-setup phase must
be revoked. Such low-degree nodes can be detected via the
degree-counting mechanism described in Section 7.1.4 be-
low.
Even if this mechanism is in place, if an adversary can
selectively compromise nodes without detection, then it
may be possible to compromise a set of nodes that shield
each other from revocation, e.g. compromise enough nodes
around a misbehaving node such that only t − 1 legitimate
nodes are left to communicate with it. Another method of
attack would be to only present detectable misbehavior to
t − 1 neighbors so as to prevent revocation. In such cases,
proper revocation may still be possible depending on the
sensitivity and accuracy of the detection mechanism. How-
ever, designing a node-level intrusion detection mechanism
that has both high sensitivity and accuracy is an extremely
challenging problem. Hence, base-station issued revoca-
tion mechanisms may still be used to limit the potential
damage that can be caused by these sophisticated attacks.
Distributed node revocation is best used as a fast-reaction
system to respond to perceived node-capture attacks, rather
than as a full counter-measure against a malicious node that
has already entered the network.
Broadcast mechanism. Our public voting scheme relies
on being able to propagate every public vote across the net-
work to all voting members. However, having every node
naively re-broadcast all votes heard on the open network
presents a vulnerability to denial of service attack. In our
scheme, only the voting members will re-broadcast any re-
ceived public votes to each other, while all other nodes ig-
nore the broadcast. This transmission is performed unen-
crypted, since public votes need not be secret once they are
broadcast. Since there is no transmission control in an unen-
crypted broadcast, we require that each voting member that
ﬁrst receives a correctly veriﬁed vote perform a re-broadcast
αn−1 )n(cid:1)
αn )n(cid:1)
of the vote a ﬁxed number of times at varying intervals in
order to maximize the probability of a successful transmis-
sion to a neighboring voting member. We now show that ev-
ery voting member will receive this broadcast with approx-
imately the same very high probability c that the network is
connected (in this analysis, we assume the broadcast trans-
mission is perfect). We assume that αn nodes have been
deployed where 0.5 < α < 1 (i.e. a signiﬁcant fraction of
the nodes have been deployed). Each voting member has
an expected total of n(cid:1)
neighbors within range. There are
about αm voting members that have been deployed. Each
voting member can thus expect to ﬁnd ( αm−1
other vot-
ing members within communications range. Since m and
n are large and α is a large fraction, we can approximate
this with ( αm
n . However, from
Equation 7, this is exactly the degree d that is required to
connect the graph with high probability c. Hence the net-
work of voting members forms a random graph with almost
the same probability of being connected as the original net-
work of secure links (it may be slightly lower due to our ap-
proximation). The reason for this is that the voting members
can perform unencrypted broadcast to every voting member
within range, whereas the communication links established
during key-setup between arbitrary neighbor nodes must be
conditional on the sharing of a pairwise key. For any node
A, the probability of an arbitrary node B being a relevant
voting member is approximately m
n which is exactly the
probability of B sharing a pairwise key with A. Both the
graphs are connected with high probability.
which simpliﬁes to mn(cid:1)