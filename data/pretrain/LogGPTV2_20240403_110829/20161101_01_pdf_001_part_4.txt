 插入触发器函数
 CREATE OR REPLACE FUNCTION p_insert_trigger()
 RETURNS TRIGGER AS $$
 BEGIN
 IF ( NEW.logtime >= DATE '2012-01-01' AND NEW.logtime = DATE '2012-02-01' AND NEW.logtime = DATE '2012-03-01' AND NEW.logtime = DATE '2012-04-01' AND NEW.logtime = DATE '2012-05-01' AND NEW.logtime = DATE '2012-06-01' AND NEW.logtime = DATE '2012-07-01' AND NEW.logtime = DATE '2012-08-01' AND NEW.logtime = DATE '2012-09-01' AND NEW.logtime = DATE '2012-10-01' AND NEW.logtime = DATE '2012-11-01' AND NEW.logtime = DATE '2012-12-01' AND NEW.logtime = DATE '2013-01-01' OR NEW.logtime = DATE '2012-01-01' AND OLD.logtime = DATE '2012-02-01' AND OLD.logtime = DATE '2012-03-01' AND OLD.logtime = DATE '2012-04-01' AND OLD.logtime = DATE '2012-05-01' AND OLD.logtime = DATE '2012-06-01' AND OLD.logtime = DATE '2012-07-01' AND OLD.logtime = DATE '2012-08-01' AND OLD.logtime = DATE '2012-09-01' AND OLD.logtime = DATE '2012-10-01' AND OLD.logtime = DATE '2012-11-01' AND OLD.logtime = DATE '2012-12-01' AND OLD.logtime = DATE '2013-01-01' OR OLD.logtime  Seq Scan on p (cost=0.00..0.00 rows=1 width=26)
 Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Heap Scan on p_default p (cost=2.31..9.78 rows=8 width=26)
 Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Index Scan on p_default_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 UPDATE p SET unitsales=unitsales+1 WHERE logtime=timestamp '2011-12-02 12:59:59';
 relname | city_id | logtime | peaktemp | unitsales
 -----------+---------+---------------------+----------+-----------
 p_default | 14 | 2011-12-02 12:59:59 | 20 | 11
Partition
 删除操作执行计划
 postgres=# EXPLAIN DELETE FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
 QUERY PLAN
 ------------------------------------------------------------------------------------------
 Delete on p (cost=0.00..9.76 rows=9 width=6)
 -> Seq Scan on p (cost=0.00..0.00 rows=1 width=6)
 Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Heap Scan on p_default p (cost=2.31..9.76 rows=8 width=6)
 Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Index Scan on p_default_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 DELETE FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
 DELETE 1
Partition
 查询操作执行计划
 postgres=# EXPLAIN SELECT * FROM p WHERE logtime=timestamp '2011-12-02 12:59:59';
 QUERY PLAN
 ------------------------------------------------------------------------------------------------
 Result (cost=0.00..9.76 rows=9 width=20)
 -> Append (cost=0.00..9.76 rows=9 width=20)
 -> Seq Scan on p (cost=0.00..0.00 rows=1 width=20)
 Filter: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Heap Scan on p_default p (cost=2.31..9.76 rows=8 width=20)
 Recheck Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
 -> Bitmap Index Scan on p_default_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = '2011-12-02 12:59:59'::timestamp without time zone)
Partition
 分区字段作为WHERE条件使用时, 使用函数或常量作为过滤条件的执行计划区别
 postgres=# select proname,provolatile,proargtypes from pg_proc where prorettype in (select oid from
pg_type where typname ~ 'timestamp') order by proargtypes;
 proname | provolatile | proargtypes
 --------------------------------------+-------------+----------------
 transaction_timestamp | s |
 statement_timestamp | s |
 pg_stat_get_bgwriter_stat_reset_time | s |
 pg_conf_load_time | s |
 pg_postmaster_start_time | s |
 pg_last_xact_replay_timestamp | v |
 clock_timestamp | v |
 now | s |
 postgres=# show constraint_exclusion;
 constraint_exclusion
 ----------------------
 partition
Partition
 postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
 QUERY PLAN
 ------------------------------------------------------------------------------------------------
 Result (cost=0.00..127.23 rows=105 width=20)
 -> Append (cost=0.00..127.23 rows=105 width=20)
 -> Seq Scan on p (cost=0.00..0.00 rows=1 width=20)
 Filter: (logtime = now())
 -> Bitmap Heap Scan on p_201201 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201201_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201202 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201202_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201203 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201203_logtime_idx (cost=0.00..2.31 rows=8 width=0)
Partition
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201204 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201204_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201205 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201205_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201206 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201206_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201207 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201207_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201208 p (cost=2.31..9.79 rows=8 width=20)
Partition
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201208_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201209 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201209_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201210 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201210_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201211 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201211_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_201212 p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_201212_logtime_idx (cost=0.00..2.31 rows=8 width=0)
Partition
 Index Cond: (logtime = now())
 -> Bitmap Heap Scan on p_default p (cost=2.31..9.79 rows=8 width=20)
 Recheck Cond: (logtime = now())
 -> Bitmap Index Scan on p_default_logtime_idx (cost=0.00..2.31 rows=8 width=0)
 Index Cond: (logtime = now())
 更改函数稳定性
 postgres=# ALTER FUNCTION now() IMMUTABLE;
 ALTER FUNCTION
 postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
 -- 同上
 postgres=# ALTER FUNCTION now() VOLATILE;
 ALTER FUNCTION
 postgres=# EXPLAIN SELECT * FROM p WHERE logtime=now();
 QUERY PLAN
 -------------------------------------------------------------------------
 Result (cost=0.00..447.85 rows=105 width=20)
Partition
 -> Append (cost=0.00..447.85 rows=105 width=20)
 -> Seq Scan on p (cost=0.00..0.00 rows=1 width=20)
 Filter: (logtime = now())