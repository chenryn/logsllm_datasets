                                         progname, promote_file, strerror(errno));  
                exit(1);  
        }  
        sig = SIGUSR1;  
        if (kill((pid_t) pid, sig) != 0)  
        {  
                write_stderr(_("%s: could not send promote signal (PID: %ld): %s\n"),  
                                         progname, pid, strerror(errno));  
                if (unlink(promote_file) != 0)  
                        write_stderr(_("%s: could not remove promote signal file \"%s\": %s\n"),  
                                                 progname, promote_file, strerror(errno));  
                exit(1);  
        }  
        print_msg(_("server promoting\n"));  
}  
```  
数据恢复时，检查standby是否收到promote请求或是否存在trigger文件。  
如果是promote请求，则检查有没有promote文件，或者fallback_promote文件，如果有promote文件，则是fast_promote请求。如果有fallback_promote文件，则不是fast_promote请求（实际上根本不可能检测到fallback_promote文件，因为没有写这个文件的操作）。所以通过pg_ctl promote来激活，一定是fast promote的，即不需要先做检查点再激活。  
如果检查到trigger文件，同样也是fast promote激活模式。  
src/backend/access/transam/xlog.c  
```  
#define PROMOTE_SIGNAL_FILE             "promote"  
#define FALLBACK_PROMOTE_SIGNAL_FILE "fallback_promote"  
/*  
 * Check to see whether the user-specified trigger file exists and whether a  
 * promote request has arrived.  If either condition holds, return true.  
 */  
static bool  
CheckForStandbyTrigger(void)  
{  
        struct stat stat_buf;  
        static bool triggered = false;  
        if (triggered)  
                return true;  
        if (IsPromoteTriggered())   // 检查是否收到pg_ctl promote信号  
        {  
                /*  
                 * In 9.1 and 9.2 the postmaster unlinked the promote file inside the  
                 * signal handler. It now leaves the file in place and lets the  
                 * Startup process do the unlink. This allows Startup to know whether  
                 * it should create a full checkpoint before starting up (fallback  
                 * mode). Fast promotion takes precedence.  
                 */  
                if (stat(PROMOTE_SIGNAL_FILE, &stat_buf) == 0)    // 先检查promote文件是否存在  
                {  
                        unlink(PROMOTE_SIGNAL_FILE);  
                        unlink(FALLBACK_PROMOTE_SIGNAL_FILE);  
                        fast_promote = true;    //  快速promote  
                }  
                else if (stat(FALLBACK_PROMOTE_SIGNAL_FILE, &stat_buf) == 0)  // 否则再检查fallback_promote文件是否存在  
                {  
                        unlink(FALLBACK_PROMOTE_SIGNAL_FILE);  
                        fast_promote = false;    //  先执行checkpoint再promote  
                }  
                ereport(LOG, (errmsg("received promote request")));  
                ResetPromoteTriggered();  
                triggered = true;      
                return true;  
        }  
        if (TriggerFile == NULL)   //  检查recovery.conf是否配置了trigger_file  
                return false;  
        if (stat(TriggerFile, &stat_buf) == 0)  
        {  
                ereport(LOG,  
                                (errmsg("trigger file found: %s", TriggerFile)));  
                unlink(TriggerFile);  
                triggered = true;      
                fast_promote = true;    //   快速promote  
                return true;  
        }  
        else if (errno != ENOENT)  
                ereport(ERROR,  
                                (errcode_for_file_access(),  
                                 errmsg("could not stat trigger file \"%s\": %m",  
                                                TriggerFile)));  
        return false;  
}  
```  
src/backend/postmaster/startup.c  
```  
        pqsignal(SIGUSR2, StartupProcTriggerHandler);  // 注册SIGUSR2信号处理函数  
/* SIGUSR2: set flag to finish recovery */  
static void  
StartupProcTriggerHandler(SIGNAL_ARGS)  
{  
        int                     save_errno = errno;  
        promote_triggered = true;  
        WakeupRecovery();  
        errno = save_errno;  
}  
bool  
IsPromoteTriggered(void)  
{  
        return promote_triggered;  
}  
```  
postmaster收到sigusr1信号后，检查是否收到promote信号，判断当前的状态是否处于恢复中的任意状态，然后向startup进程发一个SIGUSR2的信号，触发promote。  
src/backend/postmaster/postmaster.c  
```  
        pqsignal(SIGUSR1, sigusr1_handler); /* message from child process */  // 注册SIGUSR1信号处理函数  
/*  
 * sigusr1_handler - handle signal conditions from child processes  
 */  
static void  
sigusr1_handler(SIGNAL_ARGS)  
{  
......  
        if (CheckPromoteSignal() && StartupPID != 0 &&  
                (pmState == PM_STARTUP || pmState == PM_RECOVERY ||  
                 pmState == PM_HOT_STANDBY || pmState == PM_WAIT_READONLY))  
        {  
                /* Tell startup process to finish recovery */  
                signal_child(StartupPID, SIGUSR2);  //  向startup进程发SIGUSR2信号，通知它处理promote  
        }  
......  
```  
src/backend/access/transam/xlog.c  
```  
/*  
 * Check to see if a promote request has arrived. Should be  
 * called by postmaster after receiving SIGUSR1.  
 */  
bool  
CheckPromoteSignal(void)  
{  
        struct stat stat_buf;  
        if (stat(PROMOTE_SIGNAL_FILE, &stat_buf) == 0 ||  
                stat(FALLBACK_PROMOTE_SIGNAL_FILE, &stat_buf) == 0)  
                return true;  
        return false;  
}  
```  
最后提一点， 9.3以前，曾经出现过pg_ctl promote -m 来指定是否需要fast promote或者fallback promote。  
[《PostgreSQL 9.3 add Fast promote mode skips checkpoint at end of recovery》](../201301/20130129_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")