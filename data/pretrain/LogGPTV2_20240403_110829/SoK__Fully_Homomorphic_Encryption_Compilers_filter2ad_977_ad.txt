G#
G#
G#
G#
G#
G#
#
#
#
#
#
#
#
#
#
G#
–
–
#
#
#
#
–
–
#
Last Major
Update
02/2020
11/2019
09/2020
11/2020
10/2018
–
–
08/2019
01/2019
Table II: Overview of existing general-purpose FHE compilers (top) and those specializing on machine learning (bottom). Note
that similar schemes are summarized into families, e.g., BFV/BGV as BFV and CGGI/TFHE/FHEW as GSW.
FHE W
HEA A N
HElib
PALISA DE
SEAL
TFHE
ALCHEMY # # # # # #
Cingulata
# # # # #  
E3
EVA
Marble
# #   #   #
RAMPARTS # # #   # #
  #   #    
# # # #   #
CHET
#   # #   #
nGraph-HE # # # #   #
SEALion
# # # #   #
Table III: Use of existing FHE libraries by FHE compilers.
Note that ALCHEMY implements BGV internally using the
Λ◦λ lattice cryptography library, and Cingulata also includes
a custom implementation of BFV.
metic, leads to excessively long compilation times and makes
ALCHEMY impractical for complex programs. While open-
source, the minimal examples are insufﬁcient to allow non-
Haskell-experts to use the library, and it is therefore excluded
from our experimental evaluation.
B. Cingulata
Cingulata (previously Armadillo) was proposed in 2015
by Carpov et al. [51]. The compiler takes C++ code as
input and generates a corresponding Boolean circuit. Cingulata
implements the BFV scheme directly, using the Flint and
Sage libraries for operations on polynomials. We refer to this
built-in BFV implementation as CinguBFV. Cingulata also
supports the CGGI scheme via the TFHE library, but advanced
optimizations are not supported in this mode. Recent versions
include CinguParam [70], which automatically determines pa-
rameters for BFV. Cingulata inserts relinearization operations
naively but tries to reduce the circuit’s multiplicative depth
using the circuit optimization tool ABC [71], which was
originally designed for hardware synthesis. However, follow-
up work has introduced novel FHE-speciﬁc depth-reduction
heuristics [72]–[74]. Cingulata’s source code is available under
the CeCILL license and includes many examples.
C. Encrypt-Everything-Everywhere
The Encrypt-Everything-Everywhere (E3) framework was
proposed by Chielle et al. [65] in 2018. E3 uses C++ as
its input language and supports both arithmetic and boolean
circuits in BFV, BGV, and CGGI. E3 supports SIMD opera-
tions but does not expose rotation operations, severely limiting
the expressiveness. Users must provide parameters as part
of the conﬁguration, and ciphertext maintenance operations
are inserted naively. It uses the Synopsys Design Compiler,
a proprietary tool for hardware design, to try to reduce the
circuit’s multiplicative depth. Internally, it supports a variety
of libraries, including TFHE, FHEW, HElib, and SEAL. E3’s
source code is available online and includes both examples
and documentation.
D. EVA & CHET
input
The Encrypted Vector Arithmetics Language and Compiler
(EVA) was presented by Dathathri et al. [17] in 2019. It
introduces a novel
language explicitly designed for
vector arithmetic and targets arithmetic circuits in CKKS using
the SEAL library. It is inherently batched and focuses on
automating parameter selection and ciphertext maintenance.
The program is converted into a term graph, and during
multiple passes, graph rewriting rules transform it, e.g., by
inserting relinearization and rescaling operations at the optimal
locations. However, EVA does not consider depth-reducing
transformations. While EVA can be used for any (vectorized)
application, the focus is primarily on neural network inference.
Towards this end, EVA includes and subsumes prior work
in the form of the Compiler and Runtime for Homomorphic
Evaluation of Tensor Programs (CHET) [67], which focuses
on optimizing matrix-vector operations. EVA and its examples
are available under the MIT license. CHET, however, is not.
E. Marble
Marble, presented by Viand et al. in 2018 [50] offers a
high-level interface for FHE in C++ by overloading built-in
operators. For arithmetic circuits, it targets BFV via the SEAL
library, and for binary circuits, BGV as implemented in the
HElib library. Marble exposes a batched version of the API,
allowing relatively efﬁcient implementation, but it requires that
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1099
the developer provides a suitably vectorized program. How-
ever, Marble provides only rudimentary parameter selection,
inserts ciphertext maintenance operations naively, and does not
apply any program optimizations. While a version of Marble
is available online, the available code supports only binary
circuits. Since Marble targets an outdated version of HElib
and focuses on usability over optimizations, we do not include
it in our experimental evaluation.
F. Ramparts
Ramparts was proposed in 2019 by Archer et al. [66]. It uses
Julia, a language for interactive scientiﬁc computing, as its
input language, and targets arithmetic circuits in BFV using the
PALISADE library. Ramparts does not support batching, but
includes noise-growth-estimation based parameter selection.
Ciphertext maintenance operations are inserted naively, but
a symbolic simulator simpliﬁes the circuit by applying sub-
expression elimination, constant folding, and partial evalua-
tion (e.g., loop unrolling, function inlining). Ramparts is not
publicly available. Therefore, we were unable to include it in
our experimental evaluation. However, Rampart’s evaluation
compares it against Cingulata and a baseline using PALISADE
directly. The evaluation showed signiﬁcant performance ben-
eﬁts compared to Cingulata; however, in exchange, Ramparts
is limited to programs that can be expressed as polynomial
functions and the symbolic evaluation approach signiﬁcantly
increases compilation times.
G. nGraph-HE
The nGraph-HE framework, proposed by Boemer et al. [75]
in 2019, is based on Intel’s nGraph ML compiler [76] and
translates standard TensorFlow computations into arithmetic
circuits in BFV or CKKS using the SEAL library. It en-
ables inference on pre-trained models over encrypted inputs,
applying FHE-speciﬁc optimizations (e.g., constant folding,
SIMD-packing, and graph-level optimizations such as lazy
rescaling and depth-aware encoding), and run-time optimiza-
tions (e.g., bypassing special plaintext values). However, it
inserts rescaling operations naively and requires the user to
deﬁne the parameters. In subsequent work [24], nGraph-HE
was extended to support non-polynomial activation functions.
However, these are computed in an interactive protocol with
the client, which introduces signiﬁcant latency and is out of
scope for our study. nGraph-HE is available under the Apache
License v2.0 and includes examples and documentation.
H. SEALion
The framework SEALion, proposed by Van Elsloo [68]
in 2019, exposes a custom Python API for specifying ML
models, which are trained using TensorFlow. SEALion then
enables inference over encrypted data using arithmetic circuits
in BFV using the SEAL library. SEALion supports batching
to increase inference throughput by performing inference
over multiple data simultaneously but does not consider non-
trivial batching optimizations. Further, it features automatic
parameter selection using a heuristic search algorithm to
ﬁnd an optimal parameter set. However, it inserts ciphertext
maintenance operations naively and does not consider depth-
reducing optimizations. SEALion is not currently publicly
available; however, the authors shared their implementation
with us, and the code includes well-commented examples.
VII. EXPERIMENTAL EVALUATION
In the following, we present our experimental evaluation,
where we investigate FHE compilers in more detail. We use
these tools to implement and benchmark selected case study
applications. This allows us to provide an in-depth analysis of
their usability and expressiveness in practice, and to compare
the performance characteristics of current FHE compilers.
Since there are no standardized benchmarks for FHE, com-
paring performance across tools is generally difﬁcult without
implementing a task in a variety of tools. Motivated by that,
we selected three applications that represent different domains
of FHE-based computation. Each is designed to showcase
complex issues arising when working with FHE, yet also
remain simple and easy to reproduce across tools. First, we
present a risk score calculation that requires comparisons and,
therefore, binary circuit emulation. While simple, this repre-
sents a class of heavily branched programs that is common in
traditional programming but hard to express in FHE. Second,
we consider a statistical χ2-test, in a formulation that simpli-
ﬁes it to polynomial functions over integers. This represents
a variety of interesting analysis methods that are ill-suited to
FHE by default but can be reformulated or approximated to
allow efﬁcient implementations. We focus only on the core
computation, however in practical deployments, this would
probably be preceded by a homomorphic aggregation over
user data. Finally, we consider machine learning, speciﬁcally
neural network inference for a range of network architectures.
We evaluate a range of increasingly complex models and show
how commonly used architectures are adapted for FHE.
In our evaluation, we consider three dimensions: usability,
expressiveness, and performance. We start by describing each
application in detail, then report on the process of imple-
menting these applications in the different tools, highlighting
strengths and challenges. Where required, we describe adjust-
ments made to the applications due to limits in expressiveness.
Finally, we present our benchmarking results and highlight the
impact of speciﬁc techniques or optimizations.
A. Applications
1) Cardio: The cardio risk factor assessment (cardio) ap-
plication computes a score representing a patient’s risk of
cardiac disease. The application takes metrics such as age,
gender, weight, drinking habits and smoking behavior where
some are integer-valued and others boolean ﬂags as input. As
illustrated in Listing 1, the computation consists of a series of
simple rules over the inputs that use comparisons and boolean
operators. The algorithm is derived from an implementation
in [77]. Due to its reliance on comparison operations, the
program requires emulation using binary circuits.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1100
Listing 1: The Cardio application.
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
if man && age > 50 years
if woman && age > 60 years
if smoking
if diabetic
if high blood pressure
if HDL cholesterol  height-90
if daily physical activity  3 glasses/day
if !man && alcohol cons. > 2 glasses/day
We encode the inputs as 8 bit numbers and encrypt them
at
the client-side. The server receives the encrypted data,
computes the risk score, and returns the encrypted score
back to the client. While the inputs are obviously sensitive
information, the cardio risk assessment algorithm is public and
could easily be calculated client-side. However, it is easy to
imagine other applications where a service provider might not
want to share the algorithm with a client. For example, similar
algorithms are still widely used for risk assessment or fraud
detection, and knowledge of the criteria considered makes it
easier to circumvent these checks. For simplicity, we omit the
noise ﬂooding required to provide (practical) circuit privacy
in our example.
2) Chi-Squared Test: χ2 or chi-squared tests are common
statistical tests. For our application, we speciﬁcally consider
Pearson’s Goodness-of-Fit test as it can be used to test for
deviation from the Hardy-Weinberg equilibrium in Genome-
Wide Association Studies (GWAS).
1
β3
+ 1
β2
2N ( 1
β1
We split the computation into a polynomial part on the
server and a ﬁnal set of divisions on the client, as proposed
by Lauter et al. [47]. First, the server receives the encrypted
genotype counts N0, N1, N2, then it computes α = (4N0N2−
N 2
1 )2, β1 = 2(2N0+N1)2, β2 = (2N0+N1)(2N2+N1), β3 =
2(2N2 + N1)2 and returns the encrypted results to the client.
Decrypting these, the client can compute the test statistic as
). This transformation introduces some
X 2 = α
slight leakage of intermediate values but in return enables an
application that would otherwise be infeasible. A more realistic
deployment scenario would most likely ﬁrst see the server
calculate the genotype counts over an encrypted genomic
database. While this application is comparatively simple, it
is nevertheless practically relevant as seen by its application
to genomic studies. Additionally, its simplicity allows us to
focus more clearly on the overheads introduced by each tool.
3) NN Inference: The neural-network inference application
demonstrates FHE’s capabilities for privacy-preserving ma-
chine learning. Speciﬁcally, we consider inference (or pre-
diction) on a simple image recognition task, i.e., recognizing
handwritten digits from the MNIST dataset [78]. MNIST is
a common benchmark in machine learning applications and
can be solved effectively by many techniques. In MNIST,
individual inputs are 28× 28 pixel images containing a sin-
gle handwritten digit. First, the network is trained over a
large number of plaintext images. Later, a client submits an
encrypted input and the model owner returns the encrypted
prediction. This guarantees the privacy of the input and gives
strong practical protections for the privacy of the model. When
only the model parameters, but not the general architecture,
need to be protected, formal circuit privacy is not required.
B. Implementation Considerations
In this section, we explain our selection of tools for each
application and brieﬂy discuss implementation challenges we
faced. A more detailed documentation of our implementations
and design choices is available in our online repository3.
1) Cardio: The cardio risk factor assessment requires com-
puting several comparisons between integers, which are hard
to approximate polynomially and therefore require binary
circuit emulation. As a baseline, we implemented the programs
manually in SEAL and TFHE. Since EVA targets CKKS,
which is less well suited to binary emulation, we do not
consider it here. The Cingulata and E3 compilers, on the other
hand, support binary plaintext spaces natively.
In SEAL and TFHE, we needed to manually implement
binary adders and comparators. This is signiﬁcantly eas-
ier in TFHE, where multiplicative depth is not a concern
and a simple ripple-carry-adder is sufﬁcient. Therefore, our