# A Dirty Little History: Bypassing Spectre Hardware Defenses to Leak Kernel Data

## Authors
- **Vrije Universiteit Amsterdam**
  - Enrico Barberis
  - Herbert Bos
  - Cristiano Giuffrida
  - Marius Muench
  - Pietro Frigo

## TL;DR
- **Spectre affects most modern CPUs**: It can leak data across privilege levels (e.g., User-to-Kernel).
- **CPU vendors released hardware defenses** to thwart exploitation.
- **But do they actually work?**

## Outline
1. Spectre-101
2. Bypassing Spectre Hardware Defenses
3. Branch History Injection
4. Exploit + Live Demo

## Spectre-101

### Example Code
```c
if (x < array.size) // size = 128
    y = array[x];
```

### Branch Prediction Unit (BPU)
- The BPU speculatively fetches and executes instructions based on predicted branch outcomes.
- If `x` is out of bounds, the speculative execution still occurs, leading to a potential side-channel attack.

### Spectre & Flush+Reload
- **Code**:
  ```c
  if (x < array.size) // size = 128
      y = array[x];
      z = reload_buff[y];
  ```
- **Explanation**:
  - If `x` is out of bounds, the speculative execution reads from `array[256]`.
  - The value of `y` is then used to access `reload_buff`, which is cached.
  - By timing the access to `reload_buff`, an attacker can infer the value of `array[256]`.

## Indirect Branch Prediction

### Example Code
```java
// Cat
Cat kitten = new Cat();
speak(kitten);

// Dog
Dog puppy = new Dog();
speak(puppy);

void speak(Animal a) {
    a.talk();
}
```

### Explanation
- The method `speak` is called with different types of objects (`kitten` and `puppy`).
- The BPU predicts the target of the indirect call based on previous executions.
- For `kitten`, it predicts `‚Äúmeow‚Äù üê±`.
- For `puppy`, it predicts `‚Äúwoof‚Äù üê∂`.

### Branch Target Buffer (BTB)
- **Structure**:
  - **TAG**: Identifier for the branch.
  - **TARGET**: Predicted target address.
  - **PRIV**: Security domain (e.g., kernel, user).

- **Example**:
  - **TAGcat**: ‚Äúmeow‚Äù üê±
  - **TAGdog**: ‚Äúwoof‚Äù üê∂

- **Spectre-v2**:
  - An attacker can manipulate the BTB to predict a malicious target, such as `leak_secret üòà`.

## Spectre-v2 Defenses

### Software Defenses
- **Intel**: Retpoline
- **AMD**: AMD Retpoline (same concept, different implementation)
- **Arm**: Various techniques (not standardized)

### Hardware Defenses
- **Intel**: eIBRS (Enhanced Indirect Branch Restricted Speculation)
- **Arm**: FEAT_CSV2 (CSV2: Control Stream Validation)

### Predictor-Mode Isolation in Hardware
- **Idea**: Tag BTB entries by security domain.
- **Structure**:
  - **PRIV**: Security domain.
  - **TAG**: Identifier for the branch.
  - **TARGET**: Predicted target address.

- **Example**:
  - **kernel**: TAG_A -> kern_func_a
  - **user**: TAG_B -> user_func
  - **kernel**: TAG_C -> kern_func_b

- **Question**: Is this isolation complete?

## Bypassing Spectre Hardware Defenses

### Indirect Branch Prediction Revisited
- **Example Code**:
  ```java
  // Cat
  Cat kitten = new Cat();
  speak(kitten);

  // Dog
  Dog puppy = new Dog();
  speak(puppy);

  void speak(Animal a) {
      a.talk();
  }
  ```

- **Explanation**:
  - The BPU predicts the target of the indirect call.
  - For `kitten`, it predicts `‚Äúmeow‚Äù üê±`.
  - For `puppy`, it predicts `‚Äúwoof‚Äù üê∂`.

- **Bypassing Defenses**:
  - Techniques to bypass the hardware defenses will be discussed, including live demonstrations.

This revised version aims to provide a clear, coherent, and professional presentation of the content.