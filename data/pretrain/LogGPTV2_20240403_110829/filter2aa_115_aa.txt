A DIRTY LITTLE 
HISTORY
Bypassing Spectre Hardware Defenses to Leak Kernel Data
1
2
Vrije Universiteit Amsterdam
Enrico
Barberis
Herbert
Bos
Cristiano 
Giuffrida
Marius
Muench
Pietro
Frigo
2
TL;DR
•
Spectre affects most modern CPUs
○
You can leak data across privilege levels (e.g., User-to-Kernel)
•
CPU vendors released HW defenses to thwart exploitation
•
But do they actually work?
3
4
Outline
•
Spectre-101
•
Bypassing Spectre Hardware Defenses
•
Branch History Injection
•
Exploit + Live Demo
5
Spectre-101
6
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
array[x]
0
1
2
128
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
0
1
2
128
array[0]
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
0
1
2
128
array[0]
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
0
1
2
128
array[1]
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
0
1
2
128
array[2]
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
0
1
2
128
256
array[256]
...
7
Spectre 101
if (x < array.size) // size = 128
y = array[x];
BPU
Speculative 
OOB read
0
1
2
128
256
array[256]
...
7
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
...
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
...
...
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
Cached
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
Cached
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
Cached
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
Cached
8
Spectre & Flush+Reload
if (x < array.size) // size = 128
y = array[x];
z = reload_buff[y];
BPU
0
1
2
128
256
array[256]
0
1
2
256
reload_buff[y]
3
3
...
...
Cached
8
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
9
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
9
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“meow” 🐱
9
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
9
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“woof” 🐶
9
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
10
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
10
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
10
BPU
🤷
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
10
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
10
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
“meow” 🐱
“woof” 🐶
Spectre-v2
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
11
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
Spectre-v2
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
11
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
Spectre-v2
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
11
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
leak_secret 😈
Spectre-v2
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
11
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
leak_secret 😈
Spectre-v2
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
leak_secret 😈
11
BTB
TAG
TARGET
TAGcat
“meow” 🐱
TAGdog
“woof” 🐶
...
...
BPU
leak_secret 😈
Spectre-v2 capabilities
12
App
App
Kernel
User
Kernel
Guest
Host
●
Software
●
Intel:
Retpoline
Spectre-v2 defenses
13
call call_thunk
capture_spec:
pause
jmp capture_spec
call_thunk:
mov [rsp], rax; 
ret
call rax
●
Software
●
Intel:
Retpoline
●
AMD:  
AMD Retpoline ( = concept, != implementation )
●
Arm:   
Weird things 😢
Spectre-v2 defenses
14
●
Software
●
Intel:
Retpoline
●
AMD:  
AMD Retpoline ( = concept, != implementation )
●
Arm:   
Weird things 😢
●
Hardware
○
Intel:
eIBRS
○
Arm:
FEAT_CSV2
Spectre-v2 defenses
15
●
Software
●
Intel:
Retpoline
●
AMD:  
AMD Retpoline ( = concept, != implementation )
●
Arm:   
Weird things 😢
●
Hardware
○
Intel:
eIBRS
○
Arm:
FEAT_CSV2
Spectre-v2 defenses
15
Predictor-mode 
isola&on in hardware
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
Intel eIBRS & Arm CSV2
Idea: tag BTB entries by security domain
16
BPU
BTB
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
Intel eIBRS & Arm CSV2
Idea: tag BTB entries by security domain
16
kern: jmp rax
BPU
BTB
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
Intel eIBRS & Arm CSV2
Idea: tag BTB entries by security domain
16
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
kern: jmp rax
BPU
BTB
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
Intel eIBRS & Arm CSV2
Idea: tag BTB entries by security domain
16
PRIV
TAG
TARGET
kernel
TAG_A
kern_func_a
user
TAG_B
user_func
kernel
TAG_C
kern_func_b
kern: jmp rax
BPU
BTB
Is this isola*on complete?
Intel eIBRS & Arm CSV2
17
Intel eIBRS & Arm CSV2
17
Bypassing Spectre Hardware 
Defenses
18
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);
void speak(Animal a) {
a.talk();
}
“meow” 🐱
19
Indirect Branch Prediction
// Cat
Cat kitten = new Cat();
speak(kitten);
//Dog
Dog puppy = new Dog();
speak(puppy);