 300
Time (in seconds)
Figure 4: BitBlocker memory usage
tion, the operating system’s disk buﬀer subsystem holds the
request in the buﬀer until a certain write threshold or time-
out is reached.
In Linux, a system daemon called pdﬂush
handles ﬂushing buﬀered writes to disk. To prevent ﬂush-
ing to the disk, BitBlocker reconﬁgures the write threshold
of the disk to inhibit buﬀer ﬂushing, disables pdﬂush and
hooks the sync, sync ﬁle range, fsync, bdﬂush and umount
system calls with a write monitor wrapper. Figure 3 shows
the architectural diagram of the Linux ﬁlesystem layer and
where BitBlocker intercepts disk write operations. Although
BitBlocker inserts hooks into the operating system, it does
not interfere with the operations of Informant and Neutral-
izer because those modules are run before BitBlocker and
they operate on a clean copy of memory. The hooks and
techniques used by BitBlocker are common to Linux 2.6.x
kernels and they are robust to changes in the kernel version.
Similar techniques are possible for other operating systems.
4. RESULTS AND EVALUATION
We evaluate Forenscope as a forensic tool by measuring
ﬁve characteristics: correctness, performance, downtime, ﬁ-
delity and eﬀectiveness against malware.
Hardware and Software Setup: To demonstrate func-
tionality, we tested and evaluated the performance of Foren-
scope on two machines: a Schweitzer 1102 industrial com-
puter and an IBM Intellistation M Pro. The SEL-1102 used
in our experiments is a rugged computer designed for power
system substation use and it is equipped with 512 MB of
DRAM and a 4 GB compact ﬂash card mounted in the ﬁrst
drive slot as the system disk. The SEL-1102 can operate in
temperatures ranging from -40 to +75 degrees Celsius. The
IBM Intellistation M Pro is a standard desktop workstation
equipped with 1 GB of DRAM. For some tests, we opted
to use a QEMU-based virtual machine system to precisely
measure timing and taint. Forenscope and the modules that
we developed were tested on the Linux 2.6 kernel. Although
Forenscope was originally built to target Linux, we plan to
expand this work to other systems.
Correctness: To show that Forenscope is robust, we
tested it against a collection of applications listed in Ta-
ble 3. In each case, after rebooting the machine forcefully,
Forenscope recovered the operating state, took control and
ran successfully without breaking the semantics of the appli-
cation. As a basic sanity test, Forenscope was able to revive
an idle system with no load. We chose a mix of applications
to show that a wide range of hardware, software and net-
work applications are compatible. Running SSH, PPTP and
Netcat showed that network connections persist. Further
0
0
30
60
Time (in seconds)
90
120
150
Figure 5: HTTP data transfer rate comparison
testing using DM-crypt and AES pipe showed that security
programs continue to operate properly. A more thorough
evaluation of the correctness can be found in [11]. To evalu-
ate the correctness of BitBlocker, we ran it on the IBM and
on a QEMU system emulator. Using the emulator allowed
us to verify integrity by checksumming the contents of the
virtual disk. Our test cases include using the dd utility to ﬁll
up the disk, then issuing a sync command and unmounting
the disk. Other cases tested include copying large ﬁles and
compiling programs consisting of hundreds of ﬁles. In each
case, BitBlocker worked correctly and no writes were issued
to the physical disk. After the test completed, we conﬁrmed
that the contents of the disk were unchanged by comparing
hashes of the contents against the original contents.
Performance: In terms of performance, BitBlocker made
disk operations appear to be faster because no data is ﬂushed
to the physical disk from the disk buﬀer. A write of a 128
MB ﬁle took 32.78 s without BitBlocker and 3.71 s with
BitBlocker. The number of dirty disk buﬀers consumed in-
creases proportionately with the size of the ﬁles written.
Since BitBlocker inhibits ﬂushing to disk, running out of ﬁle
buﬀers can create a condition where the ﬁlesystem ﬁlls up
and reports a write error. To measure these eﬀects on the
system, we collected buﬀer cache usage information once a
second in several key applications: creating a compressed
archive with tar-bzip2, downloading a ﬁle using wget and
compiling the software package busybox. Figure 4 shows
the utilization of dirty ﬁle buﬀers over time for the tar-gzip
case. Wget and busybox compilation have similar results. In
the graphs, we report statistics from /proc/meminfo such as
cached, dirty and free. According to the documentation
for /proc, cached in Linux represents the amount of data in
the page cache which includes cached data from read-only
ﬁles as well as write buﬀers. Dirty represents items that
need to be committed to the disk and free represents free
memory. From our observations, dirty is generally very
low in the normal case because the kernel commits write
buﬀers periodically. However, in BitBlocker, dirty grows
steadily because the data cannot be committed back to the
disk. To estimate the amount of memory required to run
BitBlocker, our experiments show that in many scenarios,
even 128 MB of free memory is suﬃcient for BitBlocker to
operate. Our experiments show that BitBlocker is robust
even when the system runs low in memory. At 200 seconds,
the physical memory of the machine ﬁlls up and the tar-bz2
process stops because the disk is ”full.” The system does not
crash and other apps continue to run as long as they do not
write to the disk. On a typical system with 2 GB of memory,
BitBlocker should be able to maintain disk writeability for
a much longer period of time.
312Table 4: Taint measurement (pages)
Description (32,768)
Forenscope
dd
dd to FS mounted with
sync ﬂag
dd with O DIRECT
Conventional
Memory
Extended
Memory
41 (0.125%)
0 (0%)
0 (0%)
0(0%)
7100 (21.66%)
7027 (21.44%)
0 (0%)
480 (1.46%)
Downtime: As discussed earlier, one important metric for
evaluating a forensic tool is the amount of downtime in-
curred during use. To show that Forenscope minimally dis-
rupts the operation of critical systems, we measured the
amount of time required to activate the system. Foren-
scope, without Cloner, executed in 15.1 s using the reboot
method on the SEL-1102 and in 9.8 s on the IBM Intellista-
tion while the watchdog method took 15.2 s to execute on
the SEL-1102. The majority of the downtime is due to the
BIOS bootup sequence and this downtime can be reduced on
some machines. Many network protocols and systems can
handle this brief interruption gracefully without causing sig-
niﬁcant problems. We tested this functionality by verifying
that VPN, SSH and web browser sessions continue to work
without timing out despite the interruption. Many of these
protocols have a timeout tolerance that is suﬃciently long to
avoid disconnections while Forenscope is operating and TCP
is designed to retransmit lost packets during this short inter-
ruption. To measure the disruption to network applications
caused by running Forenscope continuously over a period
of time, we ran a test within a virtualized environment to
mimic the brief reboot cycle used by the analysis process.
The test measures the instantaneous speed of an HTTP ﬁle
transfer between a server and a client machine. While the ﬁle
transfer is in session, we periodically interrupt the transfer
by forcibly restarting the machine and subsequently reviving
it using Forenscope. Each time the system is interrupted,
the server process is suspended while the machine reboots.
The process is then resumed once Forenscope is done run-
ning. As a baseline, we created a control experiment where
the server process is periodically suspended and resumed by
a shell script acting as a governor to limit the rate at which
the server operates. This script sends the SIGSTOP signal to
suspend the server process, waits a few seconds to emulate
the time required for the bootup process and then sends a
SIGCONT signal to resume operation. In each experiment, a
curl client fetches a 1 MB ﬁle from a thttpd server at a
rate of 10 KB/s. We chose these parameters to illustrate
how a streaming application or low-bandwidth application
such as a logger may behave. During this download process,
the server was rebooted once every 20 seconds and we mea-
sured the instantaneous bandwidth with a bootup delay of
5 and 10 seconds to observe the eﬀects of various bootup
times. We observed that the bandwidth drops to zero while
the system boots and the download resumes promptly after
the reboot. No TCP connections were broken during the ex-
periment and the checksum of the downloaded ﬁle matched
that of the original ﬁle on the server. A graph of the in-
stantaneous bandwidth vs time is plotted in Figure 5. We
compared the results of our test against the control experi-
ment and observed that the behavior was very similar. Thus
we believe that running Forenscope can be considered as safe
as suspending and resuming the process. During the exper-
iment we noticed that the bandwidth spiked immediately
after the machine recovered and attribute this behavior to
the internal 2-second periodic timer used by thttpd to adjust
the rate limiting throttle table.
Taint and Blurriness: We evaluated the taint in a snap-
shot saved by Forenscope using a snapshot captured by dd
as the baseline. In an experimental setup running with 128
MB of memory, we collected an accurate snapshot St of the
physical memory using QEMU and compared that with a
snapshot ˆSv obtained from each forensic tool. The number
of altered pages for each of the conﬁgurations is presented
in Table 4. We observe that since Forenscope is loaded in
conventional memory, the only pages which diﬀer are found
in the lower 640 KB of memory. Our experiments show that
Forenscope is far better than dd because we observed no dif-
ference in the extended memory between the snapshot taken
by Forenscope and the baseline snapshot. It should be noted
that as the machine is suspended in the golden state when
running Forenscope, there is no blurriness associated with
the snapshot taken by Forenscope. For dd, we measured
the taint when using a ﬁle system mounted with and with-
out the sync option. The number of pages aﬀected remains
almost the same in both cases and we observed that the
majority of second-order taint was due to the operating sys-
tem ﬁlling the page-cache buﬀer while writing the snapshot.
To evaluate how much taint was induced due to buﬀering,
we ran experiments in which dd was conﬁgured to write di-
rectly to disk, skipping any page-cache buﬀers by using the
O_DIRECT ﬂag. The results show that the taint was much
lower than the earlier experiment, but still greater than the
taint caused by using Forenscope. In order to estimate the
amount of blurriness caused when tools like dd are used, we
measured the natural drift over time of some typical conﬁg-
urations. We collected and compared memory dumps from
Ubuntu 8.04 and Windows Vista with 512 MB of memory in
a virtual machine environment hosted in QEMU. In each case,
we snapshot the physical memory of the virtual machine and
calculate the number of pages that diﬀer from the initial im-
age over a period of time. The snapshots were sampled using
a tilted time frame to capture the steady state behavior of
the system in an attempt to measure δv. The samples were
taken at 10 second intervals for the ﬁrst ﬁve minutes and
at 1 minute intervals for the next two hours. From Figure
6, we observe that the drift remains nearly constant after a
short period of time for our experimental setup and for the
idle Ubuntu and Vista systems, the drift stabilizes within a
few minutes. The drift for a system running Mozilla Firefox
was found to be nearly constant within 10 minutes. Running
tar and gzip for compressing a large folder or dd to dump
the contents of memory into a ﬁle resulted in most of the
memory being changed within a minute due to second-order
taint. To summarize, our tests demonstrated that there is
no taint introduced in the extended memory by using Foren-
scope and that Forenscope can be used for forensic analysis
where taint needs to be minimized.
Eﬀectiveness against anti-forensics tools: Although
forensics techniques can collect signiﬁcant amounts of in-
formation, investigators must be careful to ensure the ve-
racity and ﬁdelity of the evidence collected because anti-
forensic techniques can hide or intentionally obfuscate in-
formation gathered.
In particular, rootkits can be used
by hackers to hide the presence of malicious software such
as bots running in the system. Malware tools such as the
FU rootkit [16] directly manipulate kernel objects and cor-
rupt process lists in ways that many tools cannot detect.
313Table 5: Sizes of Forenscope and modules
Component
Lines of Code Compiled Size
(bytes)
Forenscope (C)
Forenscope (Assembly)
Forenscope (Hardware)
Neutralizer & Forenshell
Other Modules
Total
1690
171
280
34
861
3,036
15,420
327
1,441
8,573
22,457
48,218
s
e
g
a
p
d
e
g
n
a
h
c
f
o
%
 80
 70
 60
 50
 40
 30
 20
 10
 0
firefox
ubuntu-idle
vista-idle
dd
tar-gzip
 0
 200
 400
 600
 800
 1000
Time (in seconds)
Figure 6: Comparison of Memory Blurriness
Malware researchers have also demonstrated techniques to
evade traditional memory analysis through the use of low-
level rootkits [28] which cloak themselves by deceiving OS-
based memory acquisition channels on Linux and Windows.
Hardware [12] and software [20] virtualization-based rootkits
may be tricky to detect or remove by the legitimate oper-
ating system or application software because they operate
one layer below standard anti-malware facilities. We de-
scribe and evaluate how Forenscope reacts to several pub-
licly available rootkits. The set of rootkits was chosen to
cover a gamut of representative threats, but the list is not
meant to be exhaustive due to space constraints.
DR: The DR rootkit uses processor-level hardware de-
bug facilities to intercept system calls rather than modifying
the actual system call table itself. DR reprograms a hard-
ware breakpoint which is reached every time a system call
is made [15]. The breakpoint then intercepts the call and
runs its own handler before passing control to the legitimate
system call handler. Since Forenscope does not restore the
state of debug registers, DR is eﬀectively neutralized across
the reboot, and as a result, hidden processes are revealed.
Informant detects DR in several ways: DR is present in the
module list, DR symbols are exported to the kernel and DR
debug strings are present in memory. If an attacker modiﬁes
DR to make it more stealthy by removing these indicators,
we contend that it is still hard to deceive Forenscope, since
the debug registers are cleared as part of the reboot pro-