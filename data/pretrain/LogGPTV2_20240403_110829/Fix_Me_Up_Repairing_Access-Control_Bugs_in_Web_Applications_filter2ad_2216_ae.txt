phpCommunityCal 4.0.3 12,298
AWCM 2.2
11,877
GRBoard 1.8.6.5
50,491
myBB 1.6.7
107,515
totals
ACT
Role
tag instances LoC
6
4
4
4
8
4
4
5
11
8
8
4
4
4
2
8
admin
admin
normal
admin
admin
admin
normal
admin
normal
admin
admin
normal
admin
normal
admin
normal
2
14
8
9
1
4
1
3
3
5
38
8
14
9
38
31
missing alternative inserted policies
checks
unwanted
partial full warn side effects
policies
1
3
1
2
1
1
0
0
1
12
0
4
2
3
0
0
31
0
0
1
1
0
0
0
0
1
0
0
3
0
1
0
0
7
0
0
1
0
1
1
0
0
2
12
0
6
1
4
0
0
28
0
3
1
3
0
0
0
0
0
0
0
1
1
0
0
0
9
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1
24
65
40
250
367
1221
1742
5133
Table 2: PHP benchmarks, analysis time in seconds, ACT characterization, and repair characterization
to which each policy applies. Six applications have two
policies, admin or normal. The fourth column shows the
total instances of the template in the code, showing that de-
velopers often implement the same access-control logic in
multiple places in the program. For example, the DNscript
application has two roles and thus two role-speciﬁc access-
control policies. Out of the 22 templates in DNscript, only
2 are unique. The “LoC” column shows the size of each
template (in AST statements). The templates are relatively
small, between 2 and 11 statements each.
The “missing checks” and “alternative policies” columns
in Table 2 show that FIXMEUP ﬁnds a total of 38 miss-
ing checks. The “alternative policies” column shows that in
seven cases FIXMEUP inserts an access-control policy, but
that the target code already has a different check. Figure 11
shows a code example of this case, where process.php is
repaired using the policy from AddDn.php. However, it
already contained a different, CAPTCHA-based check.
For the other 7,
The “inserted polices” columns shows that FIXMEUP
made 37 validated repairs with one warning, 30 of which
ﬁxed actual vulnerabilities.
the pro-
gram already contained alternative logic for the same
role (e.g., CAPTCHA vs. login). The case that gen-
erated the warning is shown in Figure 12. FIXMEUP
only inserts statements that are missing from the tar-
get. In minibloggie, the statements session start()
and dbConnect() are both in the template and in
Del.php, thus FIXMEUP does not insert them.
It only
inserts the missing statement if (!verifyuser())
{header (’Location: ./login.php’);}. The
access-control check at line 10, however, now depends on
AddDn.php
s e s s i o n s t a r t ( ) ;
i f
( ! $ SESSION [ ’ member ’ ] ) {
header ( ’ L o c a t i o n :
e x i t ;
l o g i n . php ’ ) ;
1 
Process.php
1 
Figure 11: DNscript: Different access-control checks
within the same user role
the conditional at line 7. This dependence did not exist in
the original ACT and does not pass FIXMEUP validation.
The “partial” and “full” columns shows that, in 28 of
38 attempted repairs, FIXMEUP reused some of the exist-
ing statements in the target when performing the repair, and
only in 9 cases did it insert the entire template. This reuse
demonstrates that repairs performed by FIXMEUP are not
simple clone-and-patch insertions, and adapting the tem-
Attempted repair of Del.php
Correct repair of remove multi ﬁle.php
i n c l u d e ( ’ c l a s s / common . php ’ ) ;
/ /
1 e r r o r ( ’ R e q u i r e admin p r i v i l e d g e ’ , 1 ,
’
CLOSE ’ ) ;
/ /
[ FixMeUp r e p a i r ]
6 }
t o
i d =” .
1 Yes ” ) ;
d e l e t e
$ p o s t
( $ c o n f i r m ==” yes ” ) {
dbConnect ( ) ;
/ /
e x i s t i n g s t a t e m e n t
( ! v e r i f y u s e r ( ) )
/ /
[ FixMeUp r e p a i r ]
header ( ’ L o c a t i o n :
r e p a i r ]
. / l o g i n . php ’ ) ;
/ /
[ FixMeUp
i f
{
}
$ s q l = ”DELETE FROM b l o g d a t a WHERE p o s t
i d =
$ p o s t
i d ” ;
$query = mysql query ( $ s q l ) o r di e ( ” Cannot q ue ry
t h e d a t a b a s e .” . mysql error ( ) ) ;
$ c o n f i r m =” ” ;
n o t i c e ( ” Del P o s t ” , ” Data D e l e t e d ” ) ;
Access-control template of minibloggie
7
8
9
10
11
12
13
14
15
16
17
18
19 }
20 ?>
i f ( ! $ POST [ ’ i d ’ ]
7
| |
8
9 $ POST [ ’ i d ’ ] = s t r
$ POST [ ’ i d ’ ] ) ;
! $ POST [ ’ f i l e n a m e ’ ] )
r e p l a c e ( array ( ’ . . / ’ ,
e x i t ( ) ;
’ . php ’ ) ,
’ ’ ,
10 $ POST [ ’ f i l e n a m e ’ ] = s t r
r e p l a c e ( array ( ’ . . / ’ ,
’ . php ’ )
,
’ ’ , $ POST [ ’ f i l e n a m e ’ ] ) ;
/ / @SSO( ’ admin ’ )
11
12 @unlink ( ’ d a t a / ’ . $ POST [ ’ i d ’ ] . ’ / ’ . $ POST [ ’ f i l e n a m e ’ ] ) ;
. . .
13
14 ?>
Correct repair of swfupload ok.php
1
i f
( i s s e t ( $ POST [ ”PHPSESSID” ] ) )
PHPSESSID” ] ) ;
s e s s i o n i d ( $ POST [ ”
i n c l u d e
2
3
4 $GR = new COMMON( ) ;
5
6
’ c l a s s / common . php ’ ;
e x i s t i n g s t a t e m e n t
( ! $ SESSION [ ’ no ’ ] ) { / /
$GR−>e r r o r ( ’ R e q u i r e l o g i n p r o c e d u r e ’ ) ;
[ FixMeUp r e p a i r ]
/ /
i f
/ /
/ /
e x i s t i n g s t a t e m e n t
[ FixMeUp
7 }
r e p a i r ]
8
9
. . .
i f ( time ( ) > 600+ @filemtime ( $tmp ) ) $tmpFS = @fopen (
e l s e $tmpFS = @fopen ( $tmp ,
’ a ’ ) ;
$tmp ,
’w’ ) ;
/ / @SSO( ’ member ’ )
10
11 @fwrite ( $tmpFS , $ s a v e R e s u l t ) ;
12 @fclose ( $tmpFS ) ;
Figure 13: GRBoard: Same ACT in different contexts
already present alternative policy. Line 13 shows an access-
control check already present in slidesshow.php. Because
the policy implemented by the existing check does not
match the ACT that prescribes additional checks for the ad-
ministrator role, FIXMEUP inserts Line 3-11. However, the
function call on Line 8 has a side effect on $ SESSION
and $ COOKIE which are used in the function call at Line
13. This side effect is easy to detect with standard depen-
dence analysis, but the reason it occurred is a faulty anno-