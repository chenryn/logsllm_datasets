0:01 bash
0:00 bash
0:01bash
0:00 grep bash
0:00 bash
0:00 bash
0:01 bash
0:00 bash
0:01
0:04
0:02
0:01.bash
0:04 bash
0:02bash
LISTEN
LISTEN
State
bash
bash
bash
PDG
---
## Page 61
何变量相同的方式来查看别名映射：
叫做alias_table的属性。这就是实现映射别名到shell命令的地方。可以采用与查看任
介绍了。IPython还提供了一个变量_IP。_IP实际上是一个交互式shell对象，拥有一个
IPython提供了大量运行IPython时可以访问的变量，例如In和Out，这两个变量我们已经
注意：
IPython映射别名到你希望关联的shell命令。别名表就是映射发生的地方。
上讲，它是为shell命令创建一个别名，但实际上并非如此。rehash魔力函数更新了PATH
IPython中还有另一个使用别名或是执行shell命令的方法：重哈希（rehashing）。从技术
rehash
一次，或偶尔用一下，那么最好使用！或！!。
如，如果需要输入的命令时常用到，那么为其创建一个别名或宏比较好。如是仅仅使用
还需要视情况而定，一些情况下应该创建别名，而另一些情况下应该使用!或！。例
在一个shell命令之前使用!或!!，无疑要比创建一个别名更为便捷。但是在使用过程中
！可以替换！，除了使用！!无法保存结果到变量之外，两者完全一致。可以使用_或
后的字符串处理章节中将进一步讨论类列表对象。
了一个类列表（list-like）对象，而之前演示的示例中显示的是命令的原始输出。在之
你或许注意到了，输出结果保存到了变量1中，这与之前示例中的输出不同。变量1包括
'less': (0,
Out[1]:
In [1]: _IP.alias_table
1c': (0,
'cp'：（0,
'clear':(o,
I'cat':(0,
9:
8
3:jmjones101840.00.5
方法，并描述两者的不同。
比重哈希别名表更好的方式是使用rehashx魔力函数而不是rehash。我们将同时说明这两种
jmjones
jmjones
jmjones
fmjones
mjones
'cp -i'),
'less'),
'cat'),
'clear'),
32010
27705
18589
15720
12035
0.0
0.0
0.0
6.0
0.0
0.4
0.4
0.4
0.4
0.4
0.4
21252
22644
www.TopSage.com
21384
21356
21360
21288
21260
4172 pts/6
4312
4260
4268 pts/17
4268pts/5
4168pts/15
5608 pts/3
pts/7
pts/4
Ss+
S
Ss+
Ss+
Ss+
Apr12
Apr12
07:04
02:37
Apr11
Apr15
Apr11
0:00bash
0:01 bash
0:00 bash
0:00 bash
0:01 bash
0:00 bash
0:01 bash
PDG
---
## Page 62
rehash的结果大小相同甚至更小。
别名表里。因此，当打开一个新的IPython shel并执行rehashx时，我们期望别名表与
rehashx与rehash十分相似，只是rehashx在PATH中进行查找，并认为可以将其添加到
注意：当看到一个变量或属性以双下划线（_）开头时，这实际上表示代码的作者不希望你对其
别名表中：
让我们查找一些之前没有，而现在应该存在的记录项，例如transcode工具应该出现在
在执行重哈希之后，映射变得更大：
的确如此。当前，该字典具有16个记录项：
这看起来十分像字典：
48
rehashx
In [6]: _IP.alias_table['transcode']
Out[6]:(o,'transcode')
Out[5]:2314
In [5]: len(_IP.alias_table)
In [4]: rehash
Out[3]:16
In [3]: len(_IP.alias_table)
Out[2]:
In [2]: type(_IP.alias_table)
'rmdir':(0,
rm':（0,
mv':（0,
mkdir':
'lrt':(0,
'11':(0,
'1k': (0,
'1f':（
正式API，应该使用_ip对象，该对象在IPython提示符下可以被访问。
进行修改。我们可以访问变量_IP，但这只能展示它的内部结构。如果想去访问IPython的
第2童
(0)
(0,
'1s-1F),
'1s-F-0--color
{(.xrpw,
'mkdir'),
I grep ^1'),
www.TopSage.com
---
## Page 63
果你有Bash的经验，就知道这样用是可以的。如果没有参数，cd命令会让你回到主目
如果错过，问题将十分严重。
这就是将要介绍的c d。输人cd不是一个创举，做到这一点也毫无困难。但是想象一下,
法，将变得非常重要。
且需要经常访问系统shell，那么找到一种能够更为方便地访问目录并进行目录浏览的方
标准Python shell下的shell命令，这或许不是一个大问题。但是，如果正在使用IPython并
os.getcwd()来获得当前的目录，但也不是非常方便。如果执行的是Python命令而不是
常困难。尽管可以使用os.chdir()来更改自录，但这并不十分方便。也可以使用
如果使用标准的Python shell，你可能注意到妄想判断当前进人的是哪一个目录非
可以看到，rmmod.modutils是insmod.modutils的链接，而insmod.modutils并不存在。
cd
rehash时却确实出现了，可以执行如下操作：
如果想看看为什么运行rehashx时，rmmod.modutils没有出现在别名表中，而在运行
之处：
有趣的是，
 jmjones@dinkgutsy:Music$ slocate rmmod.modutils
Out[7]: Set(['fusermount', 'rmmod.modutils', ‘modprobe.modutils', ‘kallsyms', 'ksyms', /
In [7]: rehash_set - rehashx_set
In [6]: rehash_set = Set(_IP.alias_table.keys())
In [5]: rehash
In [4]: rehashx_set = Set(_IP.alias_table.keys())
In [3]: from sets import Set
Out[2]:2307
In[1]:rehashx
，rehashx产生的别名表内容比rehash的或还要少，
lsmod.modutils',
od.modutils
root 15 2007-12-07 10:34 /sbin/rmmod.modutils -> insmod.modutils
'X11'])
www.TopSage.com
/sbin/
7个。以下是这7个不同
IPython
---
## Page 64
50
目录历史列表：
定的目录来自于由曾经访问过的目录组成的历史列表。下面是一个示例，其中就使用了
IPython的cd命令所提供的最后一个特征选项，是能够切换当前目录到指定的目录，而指
没有bookmark_name目录，则-b标志就是可选的；IPython能够找到你想要进入的用标签
bookmak_name。但是，如果名为“bookmak_name”的标签已被定义，或是在当前目录下
示例中，假设对目录/tmp设置了标签t。切换到标签所示目录的正式语法是cd-b
另一个IPython的cd命令所包含的选项，能够切换当前目录到已定义标签所在的目录。
使用-q会阻止IPython输出曾经进人过的/tmp目录。
标识的目录。
面是一个示例，演示了使用了这一选项的不同：
第一个是“-q”或quiet选项。不使用该选项，IPython会输出你刚刚改变的目录名。下
加的选项，是Bash中的cd所不具备的。
录。如果使用空格加连字符作为参数“cd-”，能够让你回到前一个目录。以下三个附
（之后会解释如何创建一个标签）。以下示例演示了如何改变目录到创建标签的位置：
0:1
(bookmark:t) -> /tmp
In[1]:cd-b t
Out[5]:'/tmp'
9
#
In [5]: pwd
In [4]: cd -q /tmp
In [3]: cd -
Out[2]:'/tmp'
In [2]: pwd
/tmp
In [1]: cd /tmp
/tmp
/home/jmjones
第2章
/home/jmjones
/tmp
/home/jmjones/local/tmp
/home/jmjones/local/Pictures
/home/jmjones
www.TopSage.com
---
## Page 65
建一个标签，随后删除该标签，最后删除全部的标签，执行过程如下：
有两个选项可以删除标签：删除所有标签和一次删除一个标签。在以下示例中，我们创
签：
-1选项可以让IPython显示标签列表。我们已经定义了两个标签。现在看一下全部的标
是标签的名称，第二个参数是标签指向的目录名。
这里创建了一个名为muzak的标签，该标签指向一个本地存放音乐的目录。第一个参数
录。另一种创建标签的方法需要输人更多的参数，例如：
在/tmp目录时，输人“bookmark t”
是第一种方式：
如果退出IPython，之后再次启动，你的标签仍将存在。有两种方式可以创建标签。下面
创建和管理标签。需要格外注意的是，标签在整个IPython会话过程中都是持久有效的。
我们已经展示了如何使用cd选项进入到被标签（bookmark）标识的目录。现在介绍如何
bookmark
成功切换到了/home/jmjones/localltmp。
历史列表中标识为6的目录，即/home/jmjones/local/tmp。最后，我们看到当前目录已经
问过的目录。接下来，传递数字参数-6，该参数告诉IPython我们希望进入的目录是目录
首先，你会看到在目录历史列表中列出的所有目录。使用该功能可以立即进入到以前访
-In [5]: bookmark ulb /usr/local/bin
ulb -> /usr/local/bin
muzak -> /home/jmjones/local/Music 
 In [3]: bookmark muzak /home/jmjones/local/Music
t->/tmp
muzak->/home/jmjones/local/Music
Current bookmarks:
In [4]: bookmark -1
In [1]: cd /tmp
In [2]: bookmark t
/tmp
/home/jmjones/local/tmp
In [2]: cd -6
->/tmp
www.TopSage.com
一个名为t的标签就创建了，且该标签指向/tmp目
Y
IPython | 51
PDG
---
## Page 66
可以看到，上述示例中创建的标签名为ulb，且指向/usr/local/bin目录。之后，使用选项
继续后面的操作：
-1还有一个可替换的选项-b，可以使用“cd-b”
以保存IPython会话过程中使用的目录。下面是不带参数使用dhist命令得到的的结果：
向你演示如何查看该列表。使用的命令为dhist。该命令不仅可以保存会话列表，而且可
在前面有关c d的示例中，用到了一个由曾经访问过的目录所组成的历史目录列表。现在
dhist
“-d bookmark_name”删除了该标签。最后使用-r选项删除了全部标签。
52
一种访问目录历史的快捷方式是使用cd-，如下所示：
t->/tmp
In [7]: bookmark -d ulb
In [10]: bookmark -1
In [9]:bookmark
In [9]: cd -b
muzak -> /home/jmjones/local/Music
muzakt
Current bookmarks:
In [8]:bookmark -1
Directory history (kept in _dh)
In [1]: dhist
Current bookmarks:
-01 [/home/jmjones/local/Videos]
In [1]: cd -
8
?
02
6
/home/jmjones/local/downloads
/home/jmjones/local/Music
/home/jmjones/local/videos