title:You've Changed: Detecting Malicious Browser Extensions through their
Update Deltas
author:Nikolaos Pantelaios and
Nick Nikiforakis and
Alexandros Kapravelos
You’ve Changed: Detecting Malicious Browser Extensions
through their Update Deltas
Nikolaos Pantelaios
PI:EMAIL
North Carolina State University
Nick Nikiforakis
PI:EMAIL
Stony Brook University
Alexandros Kapravelos
PI:EMAIL
North Carolina State University
ABSTRACT
In this paper, we conduct the largest to-date analysis of browser
extensions, by investigating 922,684 different extension versions
collected in the past six years, and using this data to discover mali-
cious versions of extensions. We propose a two-stage system that
first identifies malicious extensions based on anomalous extension
ratings and locates the code that was added to a benign extension in
order to make it malicious. We encode these code deltas according to
the APIs that they abuse and search our historical dataset for other
similar deltas of extensions which have not yet been flagged, neither
by users nor by Chrome’s Web Store. We were able to discover 143
malicious extensions belonging to 21 malicious clusters, exhibiting
a wide range of abuse, from history stealing and ad injection, to the
hijacking of new tabs and search engines. Our results show that
our proposed techniques operate in an abuse-agnostic way and can
identify malicious extensions that are evading detection.
KEYWORDS
web; browser; extensions; machine learning; malicious; security
ACM Reference Format:
Nikolaos Pantelaios, Nick Nikiforakis, and Alexandros Kapravelos. 2020.
You’ve Changed: Detecting Malicious Browser Extensions through their Up-
date Deltas. In Proceedings of the 2020 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’20), November 9–13, 2020, Virtual Event,
USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3372297.
3423343
1 INTRODUCTION
As users satisfy more and more of their computing needs through the
web, modern web browsers need to provide increased functionality
and customizability. An indispensable feature of modern browsers is
the ability to be customized, at the client side, via browser extensions.
Using extensions, users can augment and alter the behavior of their
browsers to match their needs. Among others, extensions are used
to increase the user’s productivity (e.g. by limiting access to time-
wasting websites), block unwanted advertisements and tracking,
sync with cloud-based password managers, and offer new ways to
organize tabs and bookmarks.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423343
Unlike browser plugins, extensions are comprised of JavaScript,
HTML, and CSS, but have access to privileged APIs that enable
them to arbitrarily change webpages and bypass the browser’s Same-
Origin Policy. This power has historically been abused by malicious
browser extensions to hijack session cookies, arbitrarily change the
content of websites, steal user data, and expose users to low-quality
ads. While multiple systems for detecting malicious extensions have
been proposed in past work [14, 20, 23, 41, 45], malicious-extension
authors still manage to bypass existing defenses and infect millions
of users with malicious extensions. In the most recent high-profile
example,Googletookdown49extensionsinApril2020thatwerepre-
tending to be cryptocurrency wallet apps but were instead stealing
users’ private keys and mnemonic phrases [15].
Next to malicious extensions that were always malicious and
were eventually detected (such as the aforementioned cryptowallet-
stealing extensions), there have been cases where previously benign
extensions started behaving maliciously. For example, in 2013, Hov-
erZoom, an extension that magnified images on websites, started
behaving maliciously by stealing user data and changing the affiliate
identifiers on Amazon links [12]. Similarly, in 2018, attackers com-
promised the Chrome developer account of the Mega file-sharing
extension (associated withe the mega.nz website) and pushed a ma-
licious update which stole the private keys of cryptocurrency wallet
services [11]. In addition to getting compromised, there have been
multiple cases where the developers of small extensions, either sold
theirextensionanduserbasetoathirdparty[9,34]ordecidedtomon-
etize their extensions using low quality, advertising-based programs
that have the potential to expose users to malvertising.
Given the increased news of once-benign extensions turning mali-
cious, in this paper, we propose a new method for detecting malicious
browser extensions, by focusing on their update deltas. Given an
extension which turned malicious, our system uses the last benign
version of that extension to identify the code responsible for its
malicious actions. By focusing on APIs that this code-delta abuses,
our system creates an API sequence which it then tries to match
to other updates that happened in unrelated extensions on the of-
ficial extension store. In this way, our system uses known malicious
extensions as “seeds” to identify extensions with similar malicious
updates which have not yet been detected by existing systems or
flagged by users. To identify these seed extensions, we show how we
can use user comments to detect negative anomalies, i.e., extensions
that generally received positive ratings and suddenly start receiv-
ing negative ratings, consistent with users who were exposed to a
malicious extension after an update, and left a review to warn other
users of that same extension. In this way, our system identified 45
malicious extensions via negative-ranking anomalies which it used
to identify an additional 143 extensions, with 44% of them not yet
flagged (neither by users nor by the Chrome Web Store) as malicious.
Figure 1: Data sources collection and workflow of our malicious extensions detection pipeline. Analysis from User Feedback 1 and malicious
JavaScript clustering 2 from seed extensions
Our main contributions are as follows:
.
• We conduct the largest to-date analysis of Chrome browser
extensions, with 922,684 unique extension versions analyzed,
gathered in a period of more than six years.
• We present a novel approach to identify new malicious exten-
sion clusters, utilizing both user feedback from the comments
and ratings on the webstore, as well as JavaScript code clus-
tering based on deltas of code updates.
• We detect 21 clusters of malicious extensions and a total of
143 malicious extensions that exhibit behavior against the
Chrome Web Store policies. Still online at the time of this writ-
ing are 64 (44%) of them, victimizing a total of 2,458,881 users.
2 BACKGROUND
2.1 Threat Model
Our threat model involves attackers who use multiple techniques
to change the nature of an existing benign extension to include
malicious code which will be pushed to that extension’s user base
through the extension-update mechanism. These techniques include
but are not limited to compromising developer accounts, purchasing
accounts from disinterested developers and injecting malicious ob-
fuscated code in exchange for a payment to the extension developer.
2.2 Webstore description
The Google Chrome browser uses the Chrome Web Store [40] as
the official repository for publishing and distributing extensions to
users. A distinction between the extensions available on the web
store is that they can be either listed or unlisted. Listed extensions
are easily accessible from and outside the store to users. However,
unlisted extensions can only be discovered through their identifiers
(i.e. they do not show up during search). Based on our findings, un-
listed extensions are being used to install listed ones and vice versa,
with related malicious behavior, as described in detail in Section 5.5.
Extensions can belong to a variety of categories, like Search tools,
Productivity, and Developer Tools, all of them designed for specific
purposes that extend browser functionality or offer improvements
to user experience. According to our data (described in detail in Sec-
tion 3.1) approximately 450 extensions are updated or added to the
store each day, which currently holds more than 176K extensions.
An issue with updates is that users who once trusted an extension
and installed it will now automatically receive that extension’s up-
dated version. This is desirable for bug fixes and the introduction of
newfeaturesbutithasalsobeenabusedbyattackerstoinfecttheuser-
base of a once-trusted extension [11, 12, 34]. If a new update needs
more permissions compared to the one a user has already installed,
the user will have to accept these new permissions. Note, however,
that extensions can easily request more permissions than necessary
from the very beginning, to avoid prompting users in the future.
2.3 Extension Source Code
Extensions are distributed from the webstore in the form of a .crx file,
which is a ZIP archive with a special header. Inside the CRX archive
reside all extension files that consist of the extension’s source code
(JavaScript/HTML/CSS), local images and a manifest.json file [17].
The manifest is a JSON-formatted metadata file that describes the
name, the version, the description and the permissions asked from
the extension. The two main categories of scripts in extensions are
the background script and content script. The background script is
a script running throughout the extension activity, responsible for
most of the background functionality of the extension. There can
be multiple background scripts in the same extension but most of
the times there is only one background script responsible for all the
background actions. Content scripts are JS files running in the con-
text of the visited webpage and utilizing the Document Object Model
(DOM) to modify the web pages. There could be additional support-
ive JS code in the extension, such as third-party libraries, that can be
loaded from its local resources instead of fetching it from the web.
Malicious behavior can be found in both main categories of the JS
files, that could be request headers changing, history logging or mod-
ifying the DOM, changing the user experience in general. Officially
in the webstore there is no code obfuscation allowed [2, 46], meaning
that all scripts included in the extension must be readable [27]. Only
minification is allowed on the webstore, which is shortening variable
WebstoreCrawlingSourceCodeMalicious KeywordsDetectionRatings AnomalyDetectionVersionComparisonMalicious APIDetectionFilter CombinationCommentsExtractionRatingsExtractionInitial Malicious SeedsInitial Total ClustersFirst Malicious Clusters(red)Further Malicious Clusters(yellow)User Feedback AnalysisJavascript API SimilaritiesSame ExtensionDifferent Clusters12Versions
1
2
[3-5]
[6-10]
[11-50]
[51+]
Total
Extension
IDs
119,082
33,544
29,770
14,675
10,901
1,681
209,653
Average (Versions/Extension)
Percentage (%)
56.8%
16.0%
14.2%
7.0%
5.2%
0.8%
100%
4.4
Table 1: Distribution of extension versions
names and functions in order to reduce the size of the extension,
and potentially hide some of the code functionality for copyright
purposes of the code developer. However, this is often bypassed, as
we came across different extensions with obfuscated code, with a
deeper analysis on this in Section 5.5.5.
2.4 API Types
WhilethemostcommonJSAPIsarewidelyknownandused,intheex-
tension environment, APIs can belong into two different categories.
There is a specific set of JS APIs called common extension APIs [3]
which are APIs bound to the webstore environment, available during
extension production. These come on top of the native JS APIs [4]
that are normally being used in JS code development. In total, there
are 1,266 native APIs and 969 extension APIs. Examples of these is
when an extension developer can inject advertisements using certain
APIs,like tags.executeScript or createElement("script").BoththeseAPI
categories can be used for script injection and they can be used for ei-
ther benign or malicious purposes. Other API usages include cookie
storage(document.cookie.set), or retrieval of user history information
(history.getVisits). The presence of these two categories of APIs can
be combined to cluster the extensions based on which APIs they are
using and to characterize the code added in each extension version.
3 DATA
3.1 Source Code
For the analysis of the Chrome Web Store extensions, we collected
data for the past six years, from January 2014 up until April 2020.
In particular, given the fact that the source code of all active listed
extensions on the store is available, we gather new extensions and
updatedextensionversionsdaily,withaverysmallnumberofmissed
versions due to being immediately taken down from Google, likely
duetopolicyviolations.Thenumberofversionswemissiscalculated
less than 0.5%, based on random sampling 1000 of our extensions
and calculating the versions missing given the versions should be
an incremental sequence.
For every extension we crawl, we check if it is already on our data-
base, through a hash function md5 and then we add it as a new entry
if necessary. We store the .crx file, which contains all the information
regarding the extension, given that it includes the manifest file with
the extension version.
In total, we gathered over the last six years 922,684 extension
versions that have 209,653 unique extension IDs. The distribution of
versions per extension can be seen in Table 1. Around 50% of exten-
sions have only one version uploaded, while 6% have more than ten
versions. Daily, we observe on average around 450 extensions, with
Figure 2: Distribution of the No. Extensions based on User Comments
more than 90% of them being updates of existing extensions and the
rest 10% being new extensions. As of now, the active extensions on
the webstore are 176,609 and the amount of unique extension IDs
we have gathered historically is 209,653, which means around 16%
of the total listed extensions that have been uploaded for the last
six years in the webstore are currently not available, either because
the author decommissioned them, or the company itself took them
down for a number of reasons.
On top of that, we crawled 102 extensions that were unlisted. We
find these unlisted extensions either from browsing the web and
detecting them in advertisements or via listed extensions which
attempt to convince users to install additional unlisted extensions.
We are going to use a subset of the unlisted extensions when we
analyze our malicious clusters in Section 5.5.
3.2 Comments and Ratings
Besides collecting the source code of extensions, we set up a system
to collect other data available from the webstore. For each active
extension on the webstore, we crawl all the information available
on its webstore page, including the total number of ratings, total
average rating, total downloads and the extension’s author. Further-
more, we gather all the comments the users have written for each
extension and for each comment we collect the rating, the exact day
the comment was written and the username of the author.
In total, we collected more than 1.5 million comments with their
ratings belonging to a total of 152,341 unique extensions. The reason
we gathered comments and ratings specifically is that we can run
a double-side analysis with using comments as keyword analysis
for malicious behavior and simultaneously use ratings for anomaly
analysis, as there is 1-1 ratio between comments and ratings. Al-
though the rough numbers would imply an average of 10 comments
per extension, as Figure 2 suggests, a large number of extensions
had zero or near to zero comments and ratings, while around 2,500
extensions had the majority of the comments. In particular, there
were 103,584 extensions with zero comments and another 13,082
extensions with only one comment. That constitutes to a total of 76%
of the extensions having at most one comment.
4 METHODOLOGY
Our extension analysis system consists of two main stages: utilizing
user feedback from the webstore (§4.1) and clustering the extension
source code based on JavaScript APIs (§4.2). The overall architecture
of our system is presented in Figure 1.
100,000102,000104,000103,58413,08213,5106,4721,8691,7132,25601[2-5][6-15][16-25][26-50][50+]Number of Comments05,00010,00015,000103,58413,08213,5106,4721,8691,7132,256Number of ExtensionsFigure 3: Distribution of 1,518,492 user ratings
4.1 Stage 1: Identifying Seed Extensions
through User Feedback
The rationale of our user-feedback-driven approach is that expert
users who observe a previously-benign extension behaving mali-
ciously will not only uninstall it but, at least some of them, will
leave negative feedback through the extension-review system. This
feedback is meant to serve as a warning to other users who may be
considering installing an extension and are consulting the opinions
of existing users. During our pilot experiments, we reviewed known
cases of extensions that had turned malicious and we indeed iden-
tified at least one review on each extension that warned other users.
To this end, we collect user feedback from two different sources of
user data namely, the comments the users leave in every extension in
the webstore and the rating they leave together with their comments.
We use the combination of these two types of data to identify an
initial set of malicious extensions which work as “seeds” for the
second stage of our system.
4.1.1 Ratings. Every comment is coupled with a user rating ranging
between 1 to 5 stars. We focus on the comment ratings (as opposed to
the general ratings that users can provide to extensions) since these
ratings have timestamps that we can leverage for anomaly detection.
The ratings distribution can be observed in Figure 3, where there
is a prevalence of positive ratings (5) due to the known effect that
users go through the effort of leaving a commented rating only in
cases they feel particularly favorable about an extension. In total,
we gathered more than 1.5 million ratings from more than 150K
extensions and focus on the extensions that had a sufficient number
of comments (as explained below).
To identify how many comments are necessary in order to identify
rating anomalies, we ran a series of experiments using the Anomalize
statistical package [29]. Anomalize can be used to identify trends and
seasonal components in time series as well as separate normal data
from anomalous data, by detecting residuals using inner-quartile
ranges and generalized extreme studentized deviation [30]. Like
typical anomaly-detection techniques, this process is comprised of
two phases, the training phase and the testing/detection phase. In the
training phase, we use the initial part of the ratings sequence to set
a ground truth for the typical ratings that a given extension receives.
We then use the rest of the data to find anomalies in the ratings.
An example result of this process can be seen in Figure 4 where the
anomalies are highlighted with red, as a time series of high ratings
follows a short time period of low ratings. The negative-anomaly pat-
tern is a key pattern for our system, indicating an extension that was
Figure 4: Examples of positive and negative anomalies in ratings.
usefultousers(asdemonstratedbytheratingsitreceived)untilsome-
thing happened that caused the extension to start receiving poor
ratings. We only consider negative anomalies because among the
extensions with a significant number of comments, we did not come
across extensions with uniformly negative reviews (i.e. negative
reviews from extension publication until the present) presumably
because these were already removed by the Chrome Webstore.
In order to pinpoint the number of extensions and comments that
we can analyze with the Anomalize pipeline, we used the following