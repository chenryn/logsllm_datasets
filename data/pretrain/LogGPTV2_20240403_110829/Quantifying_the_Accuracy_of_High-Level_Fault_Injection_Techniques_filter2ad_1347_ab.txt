LLFI performs the fault injection (instrumentation) at IR code
level, while PINFI does the injection at the assembly code
level.
To ensure a fair comparison between LLFI and PINFI, we
need to ensure that all injected faults are activated. In the case
and different instruction categories. In this section, we ﬁrst
introduce the benchmarks we use for the evaluation, and then
we describe the experimental procedure.
Benchmarks: We choose six programs to evaluate the
high-level injector, LLFI against the assembly fault injector,
PINFI. Four of the benchmarks are from the SPEC CPU 2006
suite [21], and two are from the SPLASH-2 suite [22]. The
benchmark characteristics are presented in Table II. We choose
these benchmarks to represent a wide range of commodity and
scientiﬁc applications. We run each benchmark to completion
with a test or default input that comes with the benchmark
suite 3.
In both cases, we compile the programs with the LLVM
compiler, with the same standard optimizations enabled, to
enable a fair comparison. We feed the produced IR code to
LLFI, and produce an executable ﬁle. We then compile the
IR ﬁle without passing it to LLFI, and feed the produced
executable ﬁle to PINFI after linking.
TABLE II: Characteristics of Benchmark Programs
Benchmark
Benchmark
Suite
Description
bzip2
libquantum
SPEC
SPEC
ocean
SPLASH-2
hmmer
SPEC
mcf
SPEC
raytrace
SPLASH-2
File compression and de-
compression program
A library for the simula-
tion of a quantum com-
puter
Large-scale ocean move-
ments simulation based
on eddy and boundary
currents
Uses statistical descrip-
tion of a sequence fam-
ily’s consensus to do sen-
sitive database searching
Solves single-depot vehi-
cle scheduling problems
planning transportation
Renders
dimensional
using ray tracing
three-
scene
a
Lines
of
Code
8293
4358
Input
test
test
5329
default
35992
test
2685
test
10861
default
System: The experiments were carried out on a Intel core i7
based machine, with 8 GB of RAM and 400 GB Hard drive.
The machine was running Debian Linux Version 6.0.
Research Questions: To compare the accuracies of LLFI
and PINFI, we are interested both in injecting faults in the
aggregate (i.e., across all instructions), and in speciﬁc instruc-
tion categories (e.g., arithmetic operations). By injecting faults
into speciﬁc instruction categories, we can obtain insights into
which classes of instructions contribute most to the inaccuracy
(if any), and how to mitigate the inaccuracies. Therefore, it
is important to calibrate the accuracy of LLFI both in the
aggregate and for speciﬁc instruction categories.
We attempt to answer the following research questions in
comparing LLFI and PINFI.
• RQ1 How many instructions of each category do LLFI
and PINFI consider as injection targets at the LLVM IR
code and assembly code levels respectively ?
• RQ2 How accurate is LLFI compared to PINFI for
measuring the SDC rate of applications, both in the
aggregate and for speciﬁc instruction categories ?
• RQ3 How accurate is LLFI compared to PINFI in
measuring the crash rate of applications, both in the
aggregate and for speciﬁc instruction categories ?
3We cannot use the SPEC ref inputs as we need to run each benchmark to
completion thousands of times, and the ref inputs take a long time to complete.
4
We do not consider hangs as the percentage of hangs observed
in our experiments was negligible.
Experimental procedure: First, we run LLFI or PINFI on
the program, and select speciﬁc instructions as fault injection
targets. However, the instructions in the LLVM IR (which is
used by LLFI) do not correspond one on one to instructions in
the assembly code used by PIN. To enable a fair comparison
between LLFI and PINFI, we divide both the IR instructions
and assembly language instructions into ﬁve broad categories
based on the types of operation they perform. The ﬁve cat-
egories are described in Table III. We do not consider store
instruction here because we compare LLFI and PINFI through
fault injection into destination registers of instructions, and
store instructions do not have destination registers.
Second, for each category in Table III, LLFI (or PINFI)
proﬁles the number of dynamic instances of the selected
instruction category, say N. For LLFI, N represents the
number of LLVM IR instructions executed under the chosen
category, while for PINFI, it represents the number of assem-
bly instructions executed under the category.
Third, for each program, we perform 1000 fault injections,
into the instruction category chosen for the experiment using
both LLFI and PINFI. As we have a total of ﬁve categories
and two tools, this represents a total of 10, 000 fault injections
per benchmark program.
For each fault injection run, LLFI and PINFI randomly
choose one of the N instructions belonging to a speciﬁc
category, and each inject a single bit-ﬂip into the target register
or memory location of the chosen instruction. We choose
target registers or memory locations as our injection targets
as our fault model considers transient errors in the processor’s
computational elements (Section II-A). In other words, we
assume that any error in the computation/data paths of the
processor shows up in the result of the executed instruction,
and hence we corrupt its target. This is similar to what prior
work has done [12], [23], [2], [11], [5].
TABLE III: Fault injection instruction categories
Description LLFI
all
in-
structions
‘all’ in the con-
ﬁguration
Failure categorization: As mentioned earlier, we consider
only activated faults in the results. For a fault to be activated,
the injected location or register must be read by another
instruction in the program. This is because we are interested
in the behaviour of the program given that a fault has occurred
in it, as our goal is to study error resilience (Section II-B).
Instruction
category
arithmetic
cast
cmp
load
all
arithmetic
and logic
operations
type
cast
operations
branch
condition
instruc-
tions
memory
load
operations
perform
logical
selection
criteria
instructions
that
arithmetic
or
operations
instructions
with
opcode
‘cmp’
tions
‘cast’
instruc-
‘load’
tions
instruc-
PINFI selection cri-
teria
instructions
that
perform arithmetic or
logical operations
instructions
‘convert’ category
with
instructions
next
instruction
conditional branch
whose
is
‘mov’
instructions
with memory as the
source and register as
the destination
‘all’ in the conﬁgura-
tion
We classify the outcome of activated faults based on the
program’s behaviour. If the program is terminated by the OS
due to an exception, it is classiﬁed as a crash. We also obtain
the golden run of the program when no fault is injected to
compare the output with the program’s output after injecting
the fault. Any deviation is classiﬁed as an SDC. Hangs are
detected through a timeout mechanism if the program takes
substantially longer than the golden run.
VI. RESULTS
In this section, we present the fault injection results of
LLFI and PINFI across six benchmarks. We ﬁrst present
the aggregate fault injection results in Section VI-A. Then
Section VI-B to Section VI-D presents results to answer the
three research question in Section V.
A. Aggregate Fault Injection Results
Figure 3 shows the breakdown of the fault injection outcome
(i.e. crash, SDC and benign) for each benchmark, with both
LLFI and PINFI injecting faults to ‘all’ instructions. x axis
represents the benchmark and average value, and y axis
represents the percentages observed in each fault injection
outcome category.
Fig. 3: Aggregated fault injection results with LLFI and PINFI
From Figure 3, we ﬁnd that on average for both tools, the
crash percentage is around 30%, and the SDC percentage is
around 10%, and the remaining are benign faults (i.e. hang
results are negligible). This is consistent with previous fault
injection studies [11], [12]. We also ﬁnd that the difference in
the fault injection results between LLFI and PINFI for SDCs
is very small. This will be analyzed in detail in the following
sections.
B. RQ 1: Number of dynamic instructions
Table IV shows the numbers of executed instructions in each
benchmark, for each category in Table III, that are encountered
by LLFI and PINFI. From Table IV, we ﬁnd that:
• LLFI encounters more runtime instructions for the ‘all’
category than PINFI. This is because assembly code is
often more packed than LLVM IR code. For example,
a memory load from an array usually consists of two
instructions in LLVM IR (getelementptr instruction
for getting the address, and load instruction for load
operation), while it consists of a single instruction at the
5
x86 assembly level (mov instruction with offset memory
access). Thus, LLFI has more instructions to inject than
PINFI.
• For arithmetic operation (‘arithmetic’), LLFI has fewer
instructions to inject
than PINFI for most programs.
The reason is that arithmetic operations are used for
data and address computation at
the assembly level,
while the getelementptr instruction is used for address
computation at the LLVM IR level. This instruction is not
considered as an arithmetic operation in LLVM’s IR code,
and hence LLFI does not inject into it when considering
arithmetic operations.
• The number of type cast instructions (‘cast’) is negligible
for both LLFI and PINFI. LLFI and PINFI have similar
number of compare instructions (‘cmp’) for all bench-
marks.
C. RQ2: SDC results of LLFI and PINFI
Figure 4 shows the percentage of SDCs (among the acti-
vated faults) incurred by the six programs after fault injection
using LLFI and PINFI. Sub-ﬁgures 4(a) to 4(d) correspond
to the results of injecting into each of the ﬁve instruction
categories in Table III. In each graph, the x axis represents
the benchmark, and y axis represents the percentage of SDCs
incurred among all activated faults. The error bars represent
the 95% conﬁdence interval of SDCs for 1000 injections for
either PINFI or LLFI.
From Figure 4 it can be inferred that the difference between
LLFI and PINFI is within the measurement error threshold
for most programs, regardless of whether we consider all
instructions together or only instructions from a particular
category. This means that for injecting errors that cause SDCs,
LLFI is at least as accurate as assembly level fault injection
for most of the programs considered, across all instructions
and instruction categories. We examine individual deviations
from this norm below:
• For arithmetic operation instructions (‘arithmetic’), LLFI
has slightly higher SDCs for bzip2. This is because
bzip2 has a lot of memory address computation, and as
described in Section V, address computation operations
are not classiﬁed as arithmetic operations in LLVM IR.
However, at the assembly code level, address computa-
tion is performed using arithmetic operations, which are
classiﬁed as arithmetic operations by PINFI, and a fault in
these operations is likely to crash the program. Therefore,
PINFI experiences a higher percentage or crashes than
LLFI (Table V), which lowers its SDC rate.
• For type cast instructions (‘cast’), LLFI exhibits a higher
percentage of SDCs for bzip2. This is because bzip2 has
only six type cast instructions, and all six instructions
operate on pointer values. Therefore, any fault in these in-
structions has a high probability of crashing the program
(the crash rate for this program is 96% as is shown in
Table V), which in turn lowers its probability of resulting
in an SDC.
• For compare instructions (‘cmp’), both LLFI and PINFI
exhibit nearly the same SDC rate. This is because both
LLFI and PINFI have similar number of compare in-
structions.
• For load instructions. LLFI exhibits a much higher SDC
rate than PINFI for the libquantum program. This is
because libquantum consists of many data movement
TABLE IV: Runtime instructions of the benchmark programs for LLFI and PINFI
Programs
bzip2
LLFI
487081311
All
PINFI
345535913
mcf
7162446297
3800867922
hmmer
4077115017
2292170072
libquantum 716159246
445866958
ocean
1056629348
566050809
raytrace
13370543488 6229897840
Arithmetic
LLFI
18530760
(4%)
482659382
(7%)
482968327
(12%)
37728075
(5%)
215580829
(20%)
1660765146
(12%)
PINFI
50433646
(14%)
532203970
(14%)
369334397
(16%)
38531240
(9%)
187358712
(33%)
1706697298
(27%)
LLFI
30606431
(6%)
6 (0%)
10506166
(0%)
110944
(0%)
1236605
(0%)
2327664
(0%)
Cast
PINFI
6 (0%)
6 (0%)
17426657
(1%)
110616
(0%)
1238928
(0%)
2870179
(0%)
Cmp
LLFI
38540680
(8%)
836141657