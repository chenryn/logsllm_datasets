# 三、安装你的第一张 Helm 图表
在本书的前面，我们将 Helm 称为“Kubernetes 包管理器”，并将其与操作系统的包管理器进行了比较。包管理器允许用户快速轻松地安装各种复杂的应用，并管理应用可能具有的任何依赖关系。Helm 以类似的方式工作。
用户只需确定他们想要在 Kubernetes 上部署的应用，Helm 为他们完成剩下的工作。Helm 图表(Kubernetes 资源的打包)包含安装应用所需的逻辑和组件，允许用户在不需要知道所需特定资源的情况下执行安装。用户还可以将称为值的参数传递给 Helm 图表，以配置应用的不同方面，而不需要知道正在配置的 Kubernetes 资源的具体细节。通过利用 Helm 作为包管理器将 WordPress 实例部署到 Kubernetes 上，您将在本章中探索这些特性。
我们将在本章中讨论以下主题:
*   在 Helm Hub 上找到一个 WordPress 图表
*   创建 Kubernetes 环境
*   附加安装说明
*   安装 WordPress 图表
*   访问 WordPress 应用
*   升级 WordPress 版本
*   回滚一个 WordPress 发布
*   卸载 WordPress 版本
# 技术要求
本章将使用以下软件技术:
*   `minikube`
*   `kubectl`
*   `helm`
我们将假设这些组件已经安装在您的系统上。有关这些工具的其他信息，包括安装和配置，请参考 [*第 2 章*](02.html#_idTextAnchor098)*准备 Kubernetes 和 Helm 环境*。
# 了解 WordPress 应用
在本章中，您将使用 Helm 在 Kubernetes 上部署 **WordPress** 。WordPress 是一个开源的**内容管理系统** ( **CMS** )用来创建网站和博客。有两种不同的变体可供选择—[WordPress.com](http://WordPress.com)和[WordPress.org](http://WordPress.org)。[WordPress.com](http://WordPress.com)是**软件即服务** ( **SaaS** )版本的 CMS，意思是 WordPress 应用及其组件已经由 WordPress 托管和管理。在这种情况下，用户不需要担心安装自己的 WordPress 实例，因为他们可以简单地访问已经可用的实例。[另一方面，WordPress.org](http://WordPress.org)是自托管选项。它需要用户部署他们自己的 WordPress 实例，并且需要专业知识来维护。
由于[WordPress.com](http://WordPress.com)更容易起步，这听起来可能是更可取的选择。然而，这个 SaaS 版的 WordPress 相对于自托管的[WordPress.org](http://WordPress.org)有很多缺点:
*   它提供的功能没有 WordPress.org 的多。
*   它不能让用户完全控制他们的网站。
*   它要求用户为高级功能付费。
*   它不提供修改网站后端代码的能力。
另一方面，自托管的[WordPress.org](http://WordPress.org)变体让用户可以完全控制他们的网站和 WordPress 实例。它提供了完整的 WordPress 功能集，从安装插件到修改后端代码。
一个自托管的 WordPress 实例需要用户部署一些不同的组件。首先，WordPress 需要一个数据库来保存网站和管理数据。[WordPress.org](http://WordPress.org)声明数据库必须是或者 **MySQL** 或者 **MariaDB** ，后者既是网站的位置，也是管理门户。在 Kubernetes 中，部署这些组件意味着创建各种不同的资源:
*   `secrets`用于数据库和管理控制台身份验证
*   用于外部化数据库配置的`ConfigMap`
*   `services`用于联网
*   一`PersistentVolumeClaim`用于数据库存储
*   用于以有状态方式部署数据库的`StatefulSet`
*   用于部署前端的`Deployment`
创建这些 Kubernetes 资源需要 WordPress 和 Kubernetes 的专业知识。它需要 WordPress 专业知识，因为用户需要知道所需的物理组件以及如何配置它们。需要 Kubernetes 专业知识，因为用户需要知道如何将 WordPress 需求表达为 Kubernetes 资源。考虑到所需资源的复杂性和数量，在 Kubernetes 上部署 WordPress 可能是一项艰巨的任务。
这项任务带来的挑战是 Helm 的一个完美用例。用户可以利用 Helm 作为包管理器，在没有专业知识的情况下在 Kubernetes 上部署和配置 WordPress，而不是专注于创建和配置我们所描述的每一个 Kubernetes 资源。首先，我们将探索一个名为**掌舵中枢**到的平台，首先找到一个 WordPress Helm 图表。之后，我们将使用 Helm 将 WordPress 部署到您的 Kubernetes 集群中，并探索 Helm 的基本特性。
# 找到一个单词按压图表
Helm 图表可以通过发布到图表存储库中来提供消费。图表存储库是可以存储和共享打包图表的位置。存储库只是作为一个 HTTP 服务器托管，可以采取各种实现的形式，包括 GitHub 页面、亚马逊 S3 桶或简单的网络服务器，如 Apache HTTPD。
为了能够使用存储在存储库中的现有图表，Helm 需要首先配置到它可以使用的存储库中。这是通过使用`helm repo add`添加存储库来实现的。添加存储库涉及的一个挑战是有许多不同的图表存储库可供使用；可能很难找到适合您的用例的特定存储库。为了更容易找到图表存储库，Helm 社区创建了一个名为 Helm Hub 的平台。
Helm Hub 是上游图表存储库的集中位置。由一个名为**单眼**的社区项目提供动力，Helm 枢纽旨在聚合所有已知的公共图表库并提供搜索功能。在本章中，我们将使用 Helm Hub 平台搜索 WordPress Helm 图表。一旦找到一个合适的图表，我们将添加这个图表所属的存储库，以便以后可以安装它。
首先，与 Helm Hub 的交互可以通过命令行或网络浏览器来完成。使用命令行搜索 Helm 图表时，返回的结果会提供一个指向 Helm Hub 的 URL，该 URL 可用于查找图表上的其他信息以及如何添加其图表存储库的说明。
让我们按照这个工作流程来添加一个包含 WordPress 图表的图表存储库。
## 从命令行搜索 WordPress 图表
一般来说，Helm 包含两个不同的搜索命令来帮助我们找到 Helm 图表:
*   要在 Helm Hub 或单眼实例中搜索图表，请使用以下命令:
    ```
    helm search hub
    ```
*   要在存储库中搜索图表中的关键字，请使用以下命令:
    ```
    helm search repo
    ```
如果之前没有添加存储库，用户应该运行`helm search hub`命令来定位所有公共图表存储库中可用的 Helm 图表。添加存储库后，用户可以运行`helm search repo`在这些存储库中进行搜索。
让我们在 Helm 枢纽搜索任何现有的 WordPress 图表。Helm Hub 中的每个图表都有一组可以搜索的关键词。执行以下命令定位包含`wordpress`关键字的图表:
```
$ helm search hub wordpress
```
运行此命令后，将显示类似以下内容的输出:
![Figure 3.1 – The output from running helm search hub wordpress ](img/Figure_3.1.jpg)
图 3.1–运行输出`helm search hub wordpress`
该命令返回的每一行输出都是 Helm Hub 的图表。输出将显示每个图表的 Helm 枢纽页面的网址。它还将显示图表版本和应用版本，图表版本是 Helm 图表的最新版本，应用版本是图表默认部署的应用版本。该命令还将打印每个图表的描述，通常会说明图表部署的应用。
您可能已经注意到，一些返回值被截断了。这是因为`helm search hub`的默认输出是一个表格，导致结果以表格格式返回。默认情况下，宽度超过 50 个字符的列将被截断。通过指定`--max-col-width=0`标志可以避免这种截断。
尝试运行以下命令，包括`--max-col-width`标志，以表格格式查看未检查的结果:
```
$ helm search hub wordpress  --max-col-width=0
```
结果，在表格格式，将显示每个字段的全部，包括网址和描述。
网址如下:
*   [https://hub . helm . sh/charts/bitnami/WordPress](https://hub.helm.sh/charts/bitnami/wordpress)
*   [https://hub.helm.sh/charts/presslabs/wordpress-site](https://hub.helm.sh/charts/presslabs/wordpress-site)
*   [https://hub.helm.sh/charts/presslabs/wordpress-operator](https://hub.helm.sh/charts/presslabs/wordpress-operator)
描述如下:
*   `Web publishing platform for building blogs and websites.`
*   `A Helm chart for deploying a WordPress site on Presslabs Stack`
*   `Presslabs WordPress Operator Helm Chart`
或者，用户可以通过`--output`标志并指定一个`yaml`或`json`输出，该输出将完整打印搜索结果。
尝试使用`--output yaml`标志再次运行上一个命令:
```
$ helm search hub wordpress --output yaml
```
结果将是 YAML 格式，类似于这里显示的输出:
![](img/Figure_3.2.jpg)
图 3.2–输出`helm search hub wordpress--output yaml`
对于本例，我们将选择安装前面示例输出中返回的第一个图表。要了解更多关于这个图表以及它是如何建立的，我们可以去 https://hub.helm.sh/charts/bitnami/WordPress，这将帮助我们从 Helm Hub 查看这个图表。
下一节将探讨由此产生的内容。
## 在浏览器中查看 WordPress 图表
使用`helm search hub`是在 Helm Hub 上搜索图表的最快方式。但是，它没有提供安装所需的所有细节。也就是说，用户需要知道图表的存储库网址，以便添加其存储库并安装图表。图表的 Helm Hub 页面可以提供这个 URL，以及其他安装细节。
将 WordPress 图表的网址粘贴到浏览器窗口后，将会显示类似以下内容的页面:
![Figure 3.3 – A WordPress Helm chart from Helm Hub ](img/Figure_3.3.jpg)
图 3.3–来自掌舵中心的 WordPress Helm 图表
来自 Helm Hub 的 WordPress 图表的页面提供了许多细节，包括图表的维护者( **Bitnami** ，这是一家提供可部署到不同环境的软件包的公司)和图表的简要介绍(声明该图表将把 WordPress 实例部署到 Kubernetes，同时还会有一个 Bitnami MariaDB 图表作为依赖项)。该网页还提供了安装详细信息，包括用于配置安装的图表的支持值，以及 Bitnami 的图表存储库网址。这些安装细节使用户能够添加这个存储库并安装 WordPress 图表。
在页面的右侧，您应该会看到一个标记为**添加 bitnami 存储库的部分。**此部分包含可用于添加 Bitnami 图表存储库的命令。让我们看看如何使用它:
1.  在命令行中运行以下命令:
    ```
    $ helm repo add bitnami https://charts.bitnami.com
    ```
2.  Verify that the chart has been added by running `helm repo list`:
    ```
    $ helm repo list
    NAME  	 URL 
    bitnami https://charts.bitnami.com
    ```
    现在我们已经添加了存储库，可以做更多的事情了。
3.  运行以下命令，从包含`bitnami`关键字的本地配置存储库中查看图表:
    ```
    $ helm search repo bitnami --output yaml
    ```
以下输出显示了返回结果的简短列表:
![Figure 3.4 – The output for helm search repo –output yaml ](img/Image86715.jpg)
图 3.4–输出`helm search repo bitnami --output yaml`
类似于`helm search hub`命令，`helm search repo`命令以一个关键字作为参数。使用`bitnami`作为关键字将返回`bitnami`存储库下的所有图表，以及该存储库外也可能包含`bitnami`关键字的图表。
要确保您现在可以访问 WordPress 图表，请使用`wordpress`参数运行以下命令:
```
$ helm search repo wordpress
```
输出将显示您在 Helm Hub 上找到并在浏览器中观察到的 WordPress 图表:
![Figure 3.5 – The output for helm search repo wordpress ](img/Figure_3.5.jpg)
图 3.5–输出`helm search repo wordpress`
斜线(`/`)前的`NAME`字段中的值表示包含返回的 Helm 图表的存储库的名称。在撰写本文时，`bitnami`知识库中最新版本的 WordPress 图表是版本`8.1.0`。这是将用于安装的版本。通过将`--versions`标志传递给`search`命令，可以观察到以前的版本:
```
$ helm search repo wordpress --versions
```
然后，您应该会看到每个版本的可用 WordPress 图表都有一个新的行:
![Figure 3.6 – The version lists for WordPress charts on the bitnami repository ](img/Figure_3.6.jpg)
图 3.6–bitnami 存储库中 WordPress 图表的版本列表
既然已经确定了一个 WordPress 图表，并且已经添加了该图表的存储库，我们将在下一节探讨如何使用命令行来了解更多关于该图表的信息，以便为安装做准备。
## 从命令行显示 WordPress 图表信息
你可以在 Helm 枢纽页面上找到许多关于 Helm 图表的重要细节。一旦图表的存储库被添加到本地，该信息(以及更多信息)也可以从命令行通过下面列表中描述的四个`helm show`子命令来查看:
*   该命令显示图表的元数据(或图表定义):
    ```
    helm show chart
    ```
*   该命令显示图表的`README`文件:
    ```
    helm show readme
    ```
*   该命令显示图表的值:
    ```
    helm show values
    ```
*   该命令显示图表的定义、自述文件和值:
    ```
    helm show all
    ```
让我们将这些命令用于 Bitnami WordPress 图表。在这些命令中的每一个中，图表应该被引用为`bitnami/wordpress`。请注意，我们将通过`--version`标志来检索关于此图表的版本`8.1.0`的信息。如果省略此标志，将返回图表最新版本的信息。
运行`helm show chart`命令检索图表的元数据:
```
$ helm show chart bitnami/wordpress --version 8.1.0
```
这个命令的结果将是成为 WordPress 图表的**图表定义**。图表定义描述了诸如图表版本、其依赖项、关键字和维护者等信息:
![Figure 3.7 – The wordpress chart definition ](img/Figure_3.7.jpg)
图 3.7–WordPress 图表定义
运行`helm show readme`命令从命令行查看图表的自述文件:
```
$ helm show readme bitnami/wordpress --version 8.1.0