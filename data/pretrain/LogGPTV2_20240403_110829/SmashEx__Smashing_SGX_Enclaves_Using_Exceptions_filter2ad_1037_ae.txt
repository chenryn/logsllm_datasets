Listing 4: Emulation of part of the sanitization logic at
enclave entry in the exception handler of Graphene-SGX.
Graphene-SGX. It uses the same stack from the interrupted thread
for exception handling. However, in our investigation, we find that
Graphene-SGX does not blindly load the stack pointer from the
SSA region. Instead, it examines the location of the AEX (the rip
10
Listing 6: Part of
restoration
code. Graphene-SGX emulates its execution instruction by
instruction in the exception handler (see Listing 5).
the enclave context
Besides emulating the sanitization logic and register setup at
the enclave entry point, Graphene-SGX emulates the execution of
the interrupted thread whenever the AEX occurs in other critical
regions where the enclave state is unsafe for exception handling.
Listings 5 and 6 show more examples. After the emulation, the AEX
appears to have occurred outside the critical regions. By doing this,
Graphene-SGX effectively makes the enclave exception handler
safely re-entrant.
This design is significantly more nuanced and complex. We note
that it has been the result of years of patching and revising. The
signal and exception handling design for Graphene-SGX has un-
dergone several iterations in the past three years [18, 22, 23].
Alternative Implementation Strategies. The design adopted by
Graphene-SGX is not the only possible implementation strategy
and can be generalized by addressing two key questions.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea788Q1. How can the enclave identify whether an exception occurred
inside a critical section?
Q2. What should the enclave do when the untrusted OS attempts
to deliver an exception during a critical section to the enclave?
Tracking Critical Sections. The enclave can track its own critical
sections explicitly. Specifically, the enclave runtime software can
maintain the location information (e.g., code address ranges) about
all its critical sections. When required, it can check if the code
address where the exception occurred falls within the range of
known critical sections. This is the option chosen by Graphene-
SGX. Alternatively, the enclave software can maintain a per-thread
1-bit flag in its private memory. It sets the flag whenever the enclave
is about to enter a critical section, and clears it immediately after
exiting a critical section. To check if an exception happened in a
critical section, the enclave exception handler can check this flag.
Handling Exceptions in Critical Sections. If the enclave is in-
terrupted midway in a critical section, one approach is to emulate
the rest of the critical section. More precisely, the enclave exception
handler can identify the point of interruption, look up the critical
section, and emulate the remaining part of the interrupted critical
section. After that, the handler can perform the real (non-emulated)
exception handling. With this mechanism, the enclave gets an il-
lusion that the exception occurred immediately after the critical
section. This design works only in cases where the enclave runtime
has sufficient information about the critical sections to emulate it.
This is the option chosen by Graphene-SGX.
A second way is to postpone the exception handling. Instead of
immediately invoking the exception handler, the enclave runtime
software can choose to execute the current critical section. Once
the section ends, the runtime executes the handler. This mechanism
requires the enclave runtime to maintain the received exceptions
(e.g., via setting a per-thread pending flag) and add logic at the end
of each critical section to handle pending exceptions.
Finally, a straightforward way is to ignore any exceptions that
arrive when a critical section is being executed. However, it is im-
portant to ensure functional correctness when the OS is cooperative.
For instance, an exception should not be lost when a cooperative
OS delivers it while the enclave is in a critical section, unless the
enclave exposes sufficient information (e.g., by setting OS-visible
critical section flags) to allow the OS to avoid delivering exceptions
during critical sections.
Caveats. Although the above design options are conceptually sim-
ple, there are several implementation details that need careful atten-
tion. The first issue arises when an enclave has to maintain a data
structure to track pending exceptions (e.g., a bitmap that records the
postponed exception types). After the critical section, the enclave
needs to read such data structures to process the postponed excep-
tions. Should the code that does this be included as part of the same
critical section? If it is part of the critical section, the data structure
operations must be made re-entrant. This is because, in a critical
section, a delivered exception will trigger write operations to the
data structures. If it is outside the critical section, one must either
ensure the same re-entrancy property or ensure that no exception
handling code contains critical sections, and hence may involve
write operations to the data structures.
The second issue concerns the use of a critical flag. One must
ensure that the flag covers all locations where exceptions should
not be handled. One location particularly prone to negligence is
immediately after an enclave entry (EENTER). As demonstrated by
SmashEx, exceptions immediately after the enclave entry, when
untrusted OS still controls the register values, cannot be handled
directly. If the enclave relies on an instruction to set the flag after
the enclave entry, this leave a window of time between enclave
entry and when the flag is set. To avoid this problem, an enclave
must ensure that the flag is set before an EEXIT.
A third issue stems from the requirement of exception-free han-
dler implementations. Although one can carefully implement han-
dler logic to be free of certain programming-oriented exceptions
(e.g., divide by zero), OS-induced page faults are difficult to avoid.
For instance, if an enclave uses custom page fault handlers on SGX2,
delivery of page faults to the enclave cannot be delayed or ignored,
especially for faults on pages accessed within a critical section of
the exception handler itself.
In summary, while there are software-based strategies for achiev-
ing re-entrant exception handling, they introduce considerable
complexity to ensure desired functionality and security.
9.4 Impact of Other Memory Defenses
A second line of defenses aim at thwarting the code-reuse attack
steps (Steps 5 and 6) of SmashEx.
Bypassing ASLR. The SmashEx attack requires the attacker to
know the exact address of the anchor. Since the OS allocates the
virtual memory range for the enclave and sets the page permissions,
the attacker knows that the enclave stack will be within a certain
range. However, the enclave may randomize the base address of its
stack (e.g., Asylo [29]) to prevent the attacker from predicting the
anchor location accurately. The attacker can adapt SmashEx in the
following ways to overcome this hurdle.
The first strategy follows the observation that Steps 1ś4 are to
overwrite more than one memory location. For example, in our
Google Asylo [29] PoC exploit (elided here), we can overwrite 152
bytes, out of which 64 bytes are freely controllable by the attacker.
The attacker can therefore set all those locations to the desired
value for the anchor in the hope of hitting the actual anchor. Given
that Google Asylo initializes the stack base address by advancing
the stack by a random amount between 1 and 2048, this strategy
has an attack success rate of 3.125% per trial.
One of the issues with using ASLR defenses in our context is
that a failed trial results in an invalid memory access which in
turn creates another exception. This gives the attacker additional
opportunities to reenter the enclave. To concretely illustrate the
issue, we implemented a multi-round proof-of-concept attack vari-
ant of SmashEx specialized for Google Asylo. A multi-round attack
trial has multiple rounds, where each round executes Steps 1ś4
of the SmashEx procedure to corrupt one location. Note that the
attacker-corrupted location is used in Step 5. If we mispredict the
anchor address as the corruption value, the enclave will potentially
crash in the subsequent steps. What remains, therefore, is to keep
iterating Steps 1ś4 while making sure that the enclave does not
progress to Step 5, i.e., to resume the return from ocall. To achieve
11
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea789this, the attacker uses an invalid ecall number6 to enter the en-
clave in Step 1, instead of the one that requests a return from an
ocall. When the enclave resumes execution after AEX at the entry
point, it checks the ecall command. Since the ecall command is
invalid, the enclave forces an EEXIT. As a result, Steps 5ś6 will not
take place and instead Steps 1ś4 repeat. The attacker can then keep
repeating this procedure of using bad ecall numbers and corrupt
one new location each time reliably. Finally, after controlling suffi-
cient locations, the attacker performs an EENTER with the correct
ecall number. In this last iteration, the enclave performs Steps 5ś6
and uses a bad stack value, thus corrupting the anchor reliably even
in the presence of ASLR.
Bypassing Stack Canary. The stack canary is a widely-deployed
defense against buffer overflow exploits [37]. The attacker has to
corrupt unintended stack locations as a side effect of the memory
corruption. While SmashEx does not involve a buffer overflow, it
does corrupt unintended locations beyond the anchor itself. There-
fore, it is conceptually possible to mitigate SmashEx with stack
canaries. However, the stack canary supported in common modern
C compilers (e.g., with -fstack-protector-all in GCC) does not
help protect against SmashEx. Unlike the return address of a func-
tion call, the stack canary automatically generated by the compiler
does not protect the saved ocall context, and hence the anchor,
that SmashEx aims to control. Moreover, even if all code pointers
on the stack have been carefully protected by stack canaries, the
attacker can adapt SmashEx to launch a data-oriented attack [41]
without controlling code pointers. In addition, due to a lack of
checks on the stack pointer, on some SGX runtimes (e.g., Open
Enclave) SmashEx has the option to control non-stack locations,
including where the secret stack canary value is stored. This makes
existing stack canary defenses ineffective against SmashEx.
9.5 Better Hardware Support for Atomicity
While it is possible to implement the enclave software in a safely
re-entrant way, doing this entails a fairly complicated design which
is difficult to reason about. This motivates us to propose strategies
of enabling atomicity support in hardware, which SGX currently
lacks. We start by examining the atomicity support available to the
OS and traditional user applications.
Atomicity in the OS. Since the OS can configure hardware inter-
rupt and exception sources (e.g., interrupt controllers), it can simply
disable interrupts and exceptions whenever it desires atomicity. For
SGX enclave software, however, an untrusted party (i.e., the OS)
can trigger an exception at any time. The enclave has no way of
controlling or predicting when it will be interrupted.
Atomicity in Traditional User Applications. Traditional user
applications rely on the OS to control when they can be interrupted
and re-entered in the midst of their execution (e.g., for signal han-
dling). For example, POSIX-compliant OSes define the set of sce-
narios where they can deliver signals to a user process [20]. User
processes can use the sigprocmask system call to dynamically en-
able or disable the delivery of a certain signal during runtime. For
6The ecall number is an integer that the untrusted software passes to the enclave
upon an ecall to indicate which enclave function to execute.
12
SGX enclaves, the OS or the host process is still in charge of invok-
ing in-enclave exception handlers, but it is not trusted and should
not be relied on to decide when to perform a re-entry.
Enabling Atomicity Primitives in Hardware. We point out that
in both the above cases, the atomicity guarantee is provided by
a different but trusted entity (the hardware or the OS) through
disabling either interrupts or re-entry upon an interrupt. For an
SGX enclave, only the hardware can be such a trusted entity. We
discuss the potential changes in the SGX hardware abstraction to
enable atomicity primitive for enclaves. Following the inspiration
from the atomicity primitives available to the OS and traditional
user applications, we discuss two directions: disabling exceptions
and disabling re-entry.
Direction 1: Temporarily Disabling Interrupts and Exceptions. Intel
SGX can be adapted to allow enclaves to dynamically enable or
disable interrupts and exceptions from hardware, similarly to the
primitives OSes use to achieve atomicity. The SGX hardware can
protect the enclave execution from being interrupted at the request
of the enclave. A naïve design that allows the enclave to use this
primitive without restrictions will enable an enclave to fully occupy
a hardware thread for an arbitrarily long period, thus launching
denial-of-service (DoS) attacks against the OS. To avoid DoS attacks,
the SGX hardware can let the OS decide whether to accept or deny
such requests from enclaves. The hardware relays the decision of the
OS to the enclave, who in turn can make an informed decision about
executing critical code. For example, the OS may base such decisions
on a pre-exchanged quota for interrupt disabling: it may permit the
enclave to run with interrupts disabled for (say) 100 cycles in every
10K cycles executed in the enclave. In such a case, corresponding
support for counting and limiting the enclave execution cycles
will need to be available inside the hardware. Such an enclave-
OS contract facilitated and enforced by the hardware, if designed
carefully, can guarantee atomicity while preventing DoS.
Direction 2: Temporarily Disabling Enclave Re-entry. Instead of
blocking interrupts or exceptions, another option is to allow the
enclave to disable enclave re-entry during runtime. In this design,
the enclave can still be interrupted when it has disabled enclave
re-entry, leaving untrusted software the chance to perform excep-
tion handling and manage resources accordingly. However, the
SGX hardware only allows it to resume the enclave execution via
ERESUME, but disallows re-entry into the enclave via EENTER. Im-
mediately after enclave entry, since the enclave software needs
to perform crucial operations to complete a context switch into
the enclave, the enclave hardware should preferably automatically
mask enclave re-entry by default to ensure its atomicity.
Both directions pose the risk of opening a new side channel.
The attacker may learn whether an enclave is inside a critical code
region simply by attempting to deliver an exception into it. Never-
theless, we believe addressing atomicity on the OS-enclave interface
through a carefully designed hardware abstraction is promising
future work. We hope these directions offer a starting point.
10 RELATED WORK
The SmashEx attack is targeted at Intel SGX enclaves. It stems from
unsafe re-entrancy at the OS-enclave interface. We have demon-
strated that, if exploited, it can lead to code-reuse attacks. In this
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea790section we examine prominent work on securing host-enclave in-
terfaces on Intel SGX, code-reuse attacks targeting SGX enclaves,
and re-entrancy vulnerabilities in non-enclave settings.
Security of Synchronous SGX Interfaces. Since the introduc-
tion of Intel SGX, there has been abundant work on the security of
the synchronous interfaces between untrusted software and SGX
enclaves. Previous work has discovered that an attacker can com-
promise the confidentiality and integrity of an enclave by providing
malicious system call return values, referred to as Iago attacks [34].
Eliminating such threats requires enclave software to carefully scru-
tinize system call return values passed into an enclave [28, 55, 58],
with the aid of formal verification [56] or software testing tech-
niques [38]. In addition, enclave runtimes may forget to clean cer-
tain registers after a context switch into an enclave, thus opening
up the enclave to attacks [27, 59]. The synchronous interface has
been a subject of comprehensive survey and categorization of at-
tacks [42]. Unlike these lines of work, our paper examines the
security of asynchronous OS-enclave interfaces.
Security of Asynchronous SGX Interfaces. Existing attacks have
shown that timer interrupts or page faults can be leveraged to leak
enclave secrets through side channels [32, 60, 63, 64]. Defending
against such side-channel attacks is non-trivial [35, 53, 54]. Previous
work has examined the attack avenue of enclave thread scheduling.
In the SGX threat model, the attacker can control the scheduling
and influence the enclave logic. Such manipulations can compro-
mise enclave confidentiality and integrity if the enclave logic is
influenced by scheduling. For example, the attacker can affect the
enclave behavior by exploiting existing synchronization bugs [2] or
breaking assumptions made by the enclave application regarding
the thread scheduling algorithm [61]. However, the security impli-
cations of the asynchronous interfaces of SGX enclaves have not
been comprehensively studied. Specifically, to our knowledge, our
work is the first to study the security implications at the OS-enclave