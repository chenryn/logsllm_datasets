resistant, and privately collision-resistant. We postpone the
formal deﬁnitions of these properties to Appendix A2. In a
nutshell, indistinguishability requires that an adversary cannot
decide whether randomness was created through hashing or
adaption. Public collision-resistance requires that an outsider
cannot ﬁnd any collisions by itself, while private collision-
resistance enforces that even the holder of the long-term
trapdoor cannot ﬁnd collisions, if the ephemeral secret key
is not known.5
III. POLICY-BASED CHAMELEON-HASHING
In this section, we introduce and deﬁne a novel primitive
which we term policy-based chameleon-hash. In Section III-A,
we formally deﬁne policy-based chameleon-hashes. In Sec-
tion III-B, we show how to generically construct policy-
based chameleon-hashes from a combination of the relatively
recent concept of chameleon-hashes with ephemeral trapdoors
(CHET) and ciphertext-policy attribute-based encryption (CP-
ABE) schemes and rigorously prove the security of this generic
construction. Later in Section IV-D, after having discussed the
selection of the underlying primitives, we present a practically
efﬁcient instantiation of our generic construction for the class
of policies represented by monotone access structures. The
efﬁciency of this concrete instantiation is then conﬁrmed with
a practical implementation in Section IV-E.
5Actually, we require some stronger deﬁnitions, which we also introduce.
5
A. Deﬁnitions
We deﬁne policy-based chameleon-hashes and its security.
Deﬁnition 6 (Policy-Based Chameleon-Hashes). A policy-
based chameleon-hash PCH with message space M consists
of ﬁve algorithms (PPGenPCH, KGenPCH, HashPCH, VerifyPCH,
AdaptPCH) which are deﬁned as follows.
PPGenPCH(1κ) : On input a security parameter κ in unary,
this algorithm outputs
the secret and public key
(skPCH, pkPCH) where pkPCH is implicitly available to all
algorithms and determines M.
KGenPCH(skPCH, S) : On input a secret key skPCH and a set
of attributes S ⊆ U, key generation outputs a secret key
skS.
HashPCH(pkPCH, m, A): On input a public key pkPCH, access
U, and a message m ∈ M, the hash
structure A ⊆ 2
algorithm outputs a hash h and randomness r.
VerifyPCH(pk, m, h, r): On input public key pkPCH, message
m, hash h, and randomness r, the veriﬁcation outputs a
bit b.
AdaptPCH(skS, m, m(cid:48), h, r): On input a secret key skS, mes-
sages m and m(cid:48), hash h, and randomness r, the adapta-
tion algorithm outputs randomness r(cid:48).
Note that we assume that the KGenPCH outputs ⊥ if S is
not contained in U and the AdaptPCH algorithm always veriﬁes
if the hash it is given is valid, and output ⊥ otherwise.
Correctness. For correctness, we require that for all κ ∈ N,
for all A ⊆ 2
U, for all S ∈ A, for all (skPCH, pkPCH) ←
PPGenPCH(1κ), for all skS ← KGenPCH(skPCH, S), for all m ∈
M, for all (h, r) ← HashPCH(pkPCH, m, A), for all m(cid:48) ∈ M,
for all r(cid:48) ← AdaptPCH(skS, m, m(cid:48), h, r), we have that that 1 =
VerifyPCH(pkPCH, m, h, r) = VerifyPCH(pkPCH, m(cid:48), h, r(cid:48)).
Furthermore, we require the following security properties.
Indistinguishability. Informally, indistinguishability requires
that it be intractable to decide whether for a chameleon-hash
its randomness is fresh or was created using the adaption
algorithm even if the secret key is known. While such a
property was not required in the work by Ateniese et al. [6],
we believe that it could be useful in the blockchain context,
because it helps to prevent outsiders (which later become
insiders) from learning whether adaptations of certain objects,
e.g., transactions, in the blockchain have taken place, when
seeing the respective hashes and randomness. The security
experiment grants the adversary access to the secret key and
a left-or-right style HashOrAdapt oracle. It requires that the
randomnesses r does not reveal whether it was obtained
through HashPCH or AdaptPCH. The messages are adaptively
chosen by the adversary.
Deﬁnition 7 (Indistinguishability). We deﬁne the advantage of
an adversary A in the Ind experiment ExpIndA,PCH(κ) as
AdvIndA,PCH(κ) :=
ExpIndA,PCH(κ) = 1
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:12)(cid:12)(cid:12) .
(cid:105) − 1/2
ExpIndA,PCH(κ)
(skPCH, pkPCH) ← PPGenPCH(1κ)
b ← {0, 1}
b∗ ← AHashOrAdaptPCH(sk,·,·,·,·,b)(skPCH, pkPCH)
where HashOrAdaptPCH(sk,·,·,·,·, b) on input m, m(cid:48), S, A:
(h0, r0) ← HashPCH(pkPCH, m(cid:48), A)
(h1, r1) ← HashPCH(pkPCH, m, A)
skS ← KGenPCH(sk, S)
r1 ← AdaptPCH(skS, m, m(cid:48), h1, r1)
return (hb, rb)
return 1, if b = b∗
return 0
Fig. 2: PCH Indistinguishability
Outsider Collision-Resistance. Outsider collision-resistance
essentially addresses, to some extent, the same requirements
as covered by “enhanced collision-resistance” in the work by
Ateniese et al. [6]. That is, it grants the adversary A adaptive
access to an AdaptPCH oracle, and requires that it be intractable
to ﬁnd collisions for messages which were not queried to
AdaptPCH. We note that this deﬁnition, analogous to [16], is
even stronger than key-exposure freeness [5], [19].6
ExpCROutA,PCH(κ)
(skPCH, pkPCH) ← PPGenPCH(1κ)
Q,M ← ∅, i ← 0
(m∗, r∗, m(cid:48)∗, r(cid:48)∗, h∗) ← AKGen(cid:48)
PCH(skPCH,·),Adapt(cid:48)
PCH(·,·,·,·,·)(pkPCH)
where KGen
PCH(skPCH,·) on input S:
(cid:48)
skS ← KGenPCH(sk, S)
Q ← Q ∪ {(i, skS)}
i ← i + 1
PCH(·,·,·,·,·) on input j, m, m(cid:48), h, r :
(cid:48)
and Adapt
return ⊥, if VerifyPCH(pkPCH, m, h, r) (cid:54)= 1 ∨
(j, skS) /∈ Q for some skS
r(cid:48) ← AdaptPCH(pkPCH, skS, m, m(cid:48), h, r)
M ← M ∪ {m, m(cid:48)}
return r(cid:48)
return 1, if
VerifyPCH(pkPCH, m∗, h∗, r∗) = 1 ∧
VerifyPCH(pkPCH, m(cid:48)∗, h∗, r(cid:48)∗) = 1 ∧
m∗ /∈ M ∧ m∗ (cid:54)= m(cid:48)∗
return 0
Fig. 3: PCH Outsider Collision-Resistance
Deﬁnition 8 (Outsider Collision-Resistance). We deﬁne the
advantage of an adversary A in the CRout experiment
ExpSCRout
A,PCH(κ) as
(cid:104)
(cid:105)
AdvSCRout
A,PCH(κ) := Pr
ExpSCRout
A,PCH(κ) = 1
.
We say that a PCH scheme provides outsider collision-
resistance, if AdvSCRout
A,PCH(κ) is a negligible function in κ for
all PPT adversaries A.
Insider Collision-Resistance. Insider collision-resistance ad-
dresses the requirement that not even insiders who possess
secret keys with respect to some attributes can ﬁnd collisions
for hashes which were computed with respect to policies which
We say a PCH scheme is indistinguishable, if AdvIndA,PCH(κ)
is a negligible function in κ for all PPT adversaries A.
6Key-exposure only means that once a collision is made public, anyone can
extract the secret key.
6
(cid:48)
are not satisﬁed by their keys (oracle KGen
PCH). Intuitively,
this notion enforces the attribute-based access-control policies,
even if the adversary sees collisions for arbitrary attributes
(oracles KGen
(cid:48)
(cid:48)(cid:48)
PCH and Adapt
PCH).
ExpCRInsA,PCH(κ)
(skPCH, pkPCH) ← PPGenPCH(1κ)
S,H,Q ← ∅, i ← 0
(m∗, r∗, m(cid:48)∗, r(cid:48)∗, h∗) ← AO(pkPCH)
where O ← {KGen
PCH(skPCH,·), KGen
(cid:48)
PCH(skPCH,·),
(cid:48)(cid:48)
and KGen
and KGen
PCH(skPCH,·) on input S:
(cid:48)
PCH(pkPCH,·,·), Adapt
PCH(pkPCH,·,·,·,·)}
(cid:48)
(cid:48)
Hash
skS ← KGenPCH(sk, S)
S ← S ∪ {S}
return skS
PCH(skPCH,·) on input S:
(cid:48)(cid:48)
skS ← KGenPCH(sk, S)
Q ∪ {(i, skS)}
i ← i + 1
PCH(pkPCH,·,·) on input m, A:
(cid:48)
(h, r) ← HashPCH(pkPCH, m, A)
H ← H ∪ {(h, A, m)}
return (h, r)
return ⊥, if (j, skS) /∈ Q for some skS
r(cid:48) ← AdaptPCH(pkPCH, skS, m, m(cid:48), h, r)
if (h, A, m) ∈ H for some A, let H ← H ∪ {(h, A, m(cid:48))}
return r(cid:48)
PCH(pkPCH,·,·,·,·,·) on input m, m(cid:48), h, r, j:
(cid:48)
and Adapt
and Hash
return 1, if
VerifyPCH(pk, m∗, h∗, r∗) = VerifyPCH(pk, m(cid:48)∗, h∗, r(cid:48)∗) = 1 ∧
(h∗, A,·) ∈ H, for some A ∧ m∗ (cid:54)= m(cid:48)∗ ∧ A ∩ S = ∅ ∧
(h∗,·, m∗) /∈ H
return 0
Fig. 4: PCH Insider Collision-Resistance
Deﬁnition 9 (Insider Collision-Resistance). We deﬁne the
advantage of an adversary A in the SCRin experiment
ExpSCRinA,PCH(κ) as
(cid:104)
(cid:105)
AdvSCRinA,PCH(κ) := Pr
ExpSCRinA,PCH(κ) = 1
.
We say that a PCH scheme is insider collision-resistant, if the
function AdvSCRinA,PCH(κ) is a negligible function in κ for all
PPT adversaries A.
B. Generic Construction
Our PCH construction is based on an IND-CCA2-secure
CP-ABE scheme and a chameleon-hash with ephemeral trap-
doors (CHET). We will sketch the overall idea ﬁrst. The PCH
setup runs the setup and the key generation of the CHET
scheme as well as the key generation of the CP-ABE. Every
participant obtains a secret key of the CHET and a secret key
for the CP-ABE associated to a set of attributes. Hashing a
message m to an access structure A means computing a CHET
to the message m and encrypting the ephemeral trapdoor under
A using the encryption algorithm of the CP-ABE. Collision-
ﬁnding is possible if the AdaptPCH algorithm has access to
the secret key of the CP-ABE for attributes S such that S ∈ A
is satisﬁed. This allows reconstructing the ephemeral trapdoor
which in turn allows computing a collision in the CHET. The
construction is depicted in Scheme 1.
7
PPGenPCH(1κ) : Return skPCH ← (mskABE, skchet) and
pkPCH ← (mpkABE, pkchet), where
PPchet ← PPGenCHET(1κ),
(skchet, pkchet) ← KGenCHET(PPchet), and
(mskABE, mpkABE) ← SetupABE(1κ).
KGenPCH(skPCH, S) : Parse skPCH as (mskABE, skchet) and re-
turn skS ← (skchet, ssk
(cid:48)
), where
(cid:48) ← KGenABE(mskABE, S).
ssk
HashPCH(pkPCH, m, A) : Parse pkPCH as (mpkABE, pkchet) and
return (h, r) ← ((hchet, C), rchet), where
(hchet, rchet, etd) ← HashCHET(pkchet, m(cid:48)), and
and C ← EncABE(etd, A).
VerifyPCH(pkPCH, m, h, r) : Parse pkPCH as (mpkABE, pkchet),
h as (hchet, C), and r as rchet. Return 1 if the following
check holds and 0 otherwise:
(hchet, C),
CHET.Verify(pkchet, m, hchet, rchet) = 1.
(cid:48)
AdaptPCH(skS, m, m(cid:48), h, r) : Parse skS as (skchet, ssk
) and
h as
as rchet. Check whether
VerifyPCH(pk, m, h, r) = 1 and return ⊥ otherwise. Com-
pute etd ← DecABE(ssk
, C) and return ⊥ if etd = ⊥. Let
r(cid:48) ← r(cid:48)
chet, where
chet ← AdaptCHET(skchet, etd, m, m(cid:48), h, rchet).
r(cid:48)
and r
(cid:48)
if VerifyPCH(pkPCH, m(cid:48), h, r(cid:48)) = 0 and r(cid:48)
Return ⊥,
otherwise.
Scheme 1: Black-box construction of a PCH scheme
Remark 1. In Scheme 1, a hash and also its veriﬁcation does
not allow to decide whether decrypting the ABE ciphertext
will actually allow to compute a collision. We believe that
many application scenarios do not require this. For instance,
in the (permissioned) blockchain setting, when a party inserts
a transaction, it is in the parties’ best interest that this happens
correctly and that its transaction could be rewritten if required.
While one could clearly make the construction (as well as the
model of PBCH) stronger, e.g., by requiring a non-interactive
zero-knowledge (NIZK) proof that
the CP-ABE ciphertext
encrypts a valid CHET trapdoor, this would add a signiﬁcant
performance penalty. Obtaining an efﬁcient construction in
such a strong model, is a valuable avenue for future work.
Remark 2. We have based our construction on conven-
tional CP-ABE, but to support multiple attribute authorities
per policy, one could instead use a multi-authority CP-ABE
scheme [17], [35]. We leave this for future work.