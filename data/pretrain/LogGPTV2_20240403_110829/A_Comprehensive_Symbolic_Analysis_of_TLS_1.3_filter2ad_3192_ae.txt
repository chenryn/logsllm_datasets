rules model them. The annotations also show exactly which details
we do not model (and often list the reasons why).
We used these annotations ourselves during the development
of our model to keep track of the parts of the specification that
we had already modelled, and how we modelled them, which also
simplified the task of keeping track of updates to the specification,
something which proved incredibly useful given the rapid pace at
which the draft specification would undergo changes.
Our annotated RFC has a number of desirable features:
• Readers can check which parts we abstracted, and how,
without having to reinvent the mapping between the Tamarin
model and the RFC themselves. In other words, one can
read through our website to see what is covered, and how
it is covered, without having to understand Tamarin’s for-
malism.
• If the specification is updated or changed, we can immedi-
ately track where the model should be changed.
We encourage other analyses of TLS 1.3 to follow a similar trans-
parent approach, which would help the community to better un-
derstand which details from the specification might still need to
be covered. We envision this will enable a faster convergence of
confidence in all the details of the standard.
7 CONCLUSIONS
In this work we modelled the current draft of the TLS 1.3 specifica-
tion within the symbolic analysis framework of the Tamarin prover,
and used the tool to verify the majority of the security guarantees
that TLS 1.3 claims to offer its users.
We focus on ruling out complex interaction attacks by consid-
ering an unbounded number of concurrent connections, and all of
the TLS 1.3 handshake modes. We cover both unilateral and mutual
authentication, as well as session key secrecy in all of the TLS 1.3
handshake modes with respect to a Dolev-Yao attacker. We also
capture more advanced security properties such as perfect forward
secrecy and key compromise impersonation. Our Tamarin model
covers substantially more interactions than previous analyses due
to its modularity.
Besides verifying that draft 21 of the TLS 1.3 specification meets
the claimed security properties in most of the handshake modes and
variants, we also discover an unexpected authentication behaviour
which may have serious security implications for implementations
of TLS 1.3. This unexpected behaviour, at a high level, implies
that TLS 1.3 provides no direct means for a client to determine its
authentication status from the perspective of a given server. As a
server may treat authenticated data differently to unauthenticated
data, the client may end up in position in which its sensitive data
gets processed as non-sensitive data by the server.
During the course of our analysis we also developed a line-by-
line modelling aide that accurately captured which parts of the
specification we were able to model, and which parts were ab-
stracted. This artifact allows us to easily assess the faithfulness and
coverage of our model, and also makes our model highly amenable
to all kinds of extensions, especially with respect to the security
properties and threat model. We expect that this artifact may serve
as a comprehensive informational aide to academic researchers and
well as the TLS Working Group.
Certificate Verify
This message is used to provide explicit proof that an endpoint possesses the
private key corresponding to its certificate and also provides integrity for
the handshake up to this point. Servers MUST send this message when
authenticating via a certificate. Clients MUST send this message whenever
authenticating via a Certificate (i.e., when the Certificate message is
non-empty). When sent, this message MUST appear immediately after the
Certificate message and immediately prior to the Finished message.
Structure of this message:
%%% Authentication Messages
struct {
SignatureScheme algorithm;
opaque signature;
} CertificateVerify;
The algorithm field specifies the signature algorithm used (see
The signature is a
Section 4.2.3 for the definition of this field).
digital signature using that algorithm.
The content that is covered
under the signature is the hash output as described in Section 4.4,
namely:
Transcript-Hash(Handshake Context, Certificate)
---snip---
We compute the (server) signature as:
messages = 
signature = compute_signature(~ltkS, server)
where compute_signature expands to:
sign{}
Since messages contains the handshake transcript up until that point, this is
valid for Handshake Context. We do not attempt to add the padding prefix
specified in the specification since it would have no purpose given our
assumption of perfect crypto.
The CertificateVerify message is simply defined as:
define(, )
We do not currently model using different signing algorithms or their effects
on security.
The peer validates the CertificateVerify message by recomputing the signature
input, and enforcing the action Eq(verify(signature, sig_messages, pk(~ltkS)),
true) which makes the trace invalid if the verification fails (implying the
peer terminates the connection if receiving an invalid signature).
Note that an alternative way to model this in Tamarin would be to provide the
peer with the long-term key ~ltkA and pattern match the signature as an
expected message. While this can (probably) be shown to be equivalent and is
potentially more efficient for Tamarin, we believe using explicit verification
is clearer.
Figure 8: An excerpt of our website, showing how we annotated the specification. The full version can be found at [21].
ACKNOWLEDGMENTS
This work was supported by the Engineering and Physical Sciences
Research Council, grant number EP/K035584/1, the European Re-
search Council, grant number 610150, and the Air Force Office of
Scientific Research, grant number FA9550-17-1-0206.
REFERENCES
[1] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick Gaudry,
Matthew Green, J. Alex Halderman, Nadia Heninger, Drew Springall, Emmanuel
Thomé, Luke Valenta, Benjamin VanderSloot, Eric Wustrow, Santiago Zanella-
Béguelin, and Paul Zimmermann. 2015. Imperfect Forward Secrecy: How Diffie-
Hellman Fails in Practice.
(2015), 13 pages. https://doi.org/10.1145/2810103.
2813707
[2] Nadhem J. AlFardan and Kenneth G. Paterson. 2012. Plaintext-Recovery Attacks
Against Datagram TLS. In 19th Annual Network and Distributed System Security
Symposium, NDSS 2012, San Diego, California, USA, February 5-8, 2012. http:
//www.internetsociety.org/plain-text-recovery-attacks-against-datagram-tls
[3] Nadhem J. AlFardan and Kenneth G. Paterson. 2013. Lucky Thirteen: Breaking
the TLS and DTLS Record Protocols. In 2013 IEEE Symposium on Security and
Privacy, SP 2013, Berkeley, CA, USA, May 19-22, 2013. 526–540. http://dx.doi.org/
10.1109/SP.2013.42
[4] Kenichi Arai and Shin’ichiro Matsuo. 2016. Formal Verification of TLS 1.3 Full
Handshake Protocol Using ProVerif. TLS mailing list post. (February 2016).
https://www.ietf.org/mail-archive/web/tls/current/msg19339.html
[5] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik
Dankel, Jens Steube, Luke Valenta, David Adrian, J. Alex Halderman, Viktor
Dukhovni, Emilia Käsper, Shaanan Cohney, Susanne Engels, Christof Paar, and
Yuval Shavitt. 2016. DROWN: Breaking TLS with SSLv2. In 5th USENIX Security
Symposium. 689–706.
[6] Gregory V. Bard. 2004. The Vulnerability of SSL to Chosen Plaintext Attack.
IACR Cryptology ePrint Archive 2004 (2004), 111. http://eprint.iacr.org/2004/111
[7] Gregory V. Bard. 2006. A Challenging but Feasible Blockwise-Adaptive Chosen-
Plaintext Attack on SSL. In SECRYPT 2006, Proceedings of the International Confer-
ence on Security and Cryptography, Setúbal, Portugal, August 7-10, 2006, SECRYPT
is part of ICETE - The International Joint Conference on e-Business and Telecom-
munications. 99–109.
[8] Mihir Bellare and Phillip Rogaway. 1993. Entity authentication and key distribu-
tion. In Annual International Cryptology Conference. Springer, 232–249.
[9] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric
Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and Jean Karim
Zinzindohoue. 2015. A Messy State of the Union: Taming the Composite State
Machines of TLS. In 2015 IEEE Symposium on Security and Privacy, SP 2015, San
Jose, CA, USA, May 17-21, 2015. 535–552. http://dx.doi.org/10.1109/SP.2015.39
[10] Karthikeyan Bhargavan, Bruno Blanchet, and Nadim Kobeissi. 2017. Verified Mod-
els and Reference Implementations for the TLS 1.3 Standard Candidate. Technical
Report. INRIA.
[11] Karthikeyan Bhargavan, Christina Brzuska, Cédric Fournet, Matthew Green,
Markulf Kohlweiss, and Santiago Zanella-Béguelin. 2016. Downgrade resilience
in key-exchange protocols. In Security and Privacy (SP), 2016 IEEE Symposium on.
IEEE, 506–525.
[12] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Markulf
Kohlweiss, Jianyang Pan, Jonathan Protzenko, Aseem Rastogi, Nikhil Swamy,
Santiago Zanella-Béguelin, and Jean Karim Zinzindohoué. 2016. Implementing
and Proving the TLS 1.3 Record Layer. Technical Report. INRIA. http://eprint.iacr.
org/2016/1178.
[13] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Alfredo
Pironti, and Pierre-Yves Strub. 2014. Triple Handshakes and Cookie Cut-
ters: Breaking and Fixing Authentication over TLS. In 2014 IEEE Symposium
on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014. 98–113.
http://dx.doi.org/10.1109/SP.2014.14
[14] K. Bhargavan, N. Kobeissi, and B. Blanchet. 2016. ProScript TLS: Building a TLS
1.3 Implementation with a Verifiable Protocol Model. (2016). Presented at TRON
1.0, San Diego, CA, USA, February 21.
[15] Karthikeyan Bhargavan and Gaëtan Leurent. 2016. On the Practical (In-)Security
of 64-bit Block Ciphers: Collision Attacks on HTTP over TLS and OpenVPN. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’16). ACM, New York, NY, USA, 456–467. https://doi.org/10.1145/
2976749.2978423
[16] Karthikeyan Bhargavan and Gaëtan Leurent. 2016. Transcript collision attacks:
Breaking authentication in TLS, IKE, and SSH. In Network and Distributed System
Security Symposium–NDSS 2016.
[17] Bruno Blanchet, Ben Smyth, Vincent Cheval, and Marc Sylvestre. 2016. Proverif
1.96: Automatic Cryptographic Protocol Verifier, User Manual and Tutorial List
of Figures. (2016). http://prosecco.gforge.inria.fr/personal/bblanche/proverif/
manual.pdf
[18] Daniel Bleichenbacher. 1998. Chosen Ciphertext Attacks Against Protocols Based
on the RSA Encryption Standard PKCS #1. In Advances in Cryptology - CRYPTO
’98, 18th Annual International Cryptology Conference, Santa Barbara, California,
USA, August 23-27, 1998, Proceedings. 1–12. http://dx.doi.org/10.1007/BFb0055716
[19] Ran Canetti and Hugo Krawczyk. 2001. Analysis of Key-Exchange Protocols and
Their Use for Building Secure Channels. In Advances in Cryptology - EUROCRYPT
2001, International Conference on the Theory and Application of Cryptographic
Techniques, Innsbruck, Austria, May 6-10, 2001, Proceeding. 453–474. http://dx.doi.
org/10.1007/3-540-44987-6_28
[20] Brice Canvel, Alain P. Hiltgen, Serge Vaudenay, and Martin Vuagnoux. 2003. Pass-
word Interception in a SSL/TLS Channel. In Advances in Cryptology - CRYPTO
2003, 23rd Annual International Cryptology Conference, Santa Barbara, Califor-
nia, USA, August 17-21, 2003, Proceedings. 583–599. http://dx.doi.org/10.1007/
978-3-540-45146-4_34
[21] Cas Cremers, Marko Horvat, Jonathan Hoyland, Sam Scott, and Thyla van der
(2017).
Merwe. 2017. Source files and annotated RFC for TLS 1.3 analysis.
https://tls13tamarin.github.io/TLS13Tamarin/.
[22] Cas Cremers, Marko Horvat, Sam Scott, and Thyla van der Merwe. 2016. Au-
tomated analysis and verification of TLS 1.3: 0-RTT, resumption and delayed
authentication. In Security and Privacy (SP), 2016 IEEE Symposium on. IEEE,
470–485.
[23] Danny Dolev and Andrew Yao. 1983. On the security of public key protocols.
IEEE Transactions on information theory 29, 2 (1983), 198–208.
[24] Benjamin Dowling, Marc Fischlin, Felix Günther, and Douglas Stebila. 2015.
A Cryptographic Analysis of the TLS 1.3 Handshake Protocol Candidates.
In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Com-
munications Security, Denver, CO, USA, October 12-6, 2015. 1197–1210. http:
//doi.acm.org/10.1145/2810103.2813653
[25] Benjamin Dowling, Marc Fischlin, Felix Günther, and Douglas Stebila. 2016.
A Cryptographic Analysis of the TLS 1.3 draft-10 Full and Pre-shared Key
Handshake Protocol. Cryptology ePrint Archive, Report 2016/081. (2016).
http://eprint.iacr.org/.
[26] Thai Duong and Juliano Rizzo. 2011. Here Come the ⊕ Ninjas. Unpublished
[27] Thai Duong and Juliano Rizzo. 2012. The CRIME Attack. Ekoparty Security
manuscript. (May 2011).
Conference presentation. (2012).
[28] Marc Fischlin, Felix Günther, Benedikt Schmidt, and Bogdan Warinschi. 2016.
Key Confirmation in Key Exchange: A Formal Treatment and Implications for
TLS 1.3. In 2016 IEEE Symposium on Security and Privacy, SP 2016, San Jose, CA,
USA, May 23-25, 2016.
[29] Christina Garman, Kenneth G Paterson, and Thyla Van der Merwe. 2015. Attacks
Only Get Better: Password Recovery Attacks Against RC4 in TLS.. In USENIX
Security. 113–128.
[30] Marko Horvat. 2016. Formal Analysis of Modern Security Protocols in Current
Standards. Ph.D. Dissertation. University of Oxford.
[31] Tibor Jager, Jörg Schwenk, and Juraj Somorovsky. 2015. On the Security of TLS
1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption. In Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communications Security,
Denver, CO, USA, October 12-6, 2015. 1185–1196. http://doi.acm.org/10.1145/
2810103.2813657
[32] Vlastimil Klíma, Ondrej Pokorný, and Tomás Rosa. 2003. Attacking RSA-Based
Sessions in SSL/TLS. In Cryptographic Hardware and Embedded Systems - CHES
2003, 5th International Workshop, Cologne, Germany, September 8-10, 2003, Pro-
ceedings. 426–440. http://dx.doi.org/10.1007/978-3-540-45238-6_33
[33] Markulf Kohlweiss, Ueli Maurer, Cristina Onete, Björn Tackmann, and Daniele
Venturi. 2014.
(De-)Constructing TLS.
IACR Cryptology ePrint Archive 2014
(2014), 20. http://eprint.iacr.org/2014/020
[34] Hugo Krawczyk. 2010. Cryptographic Extraction and Key Derivation: The HKDF
Scheme. In Advances in Cryptology - CRYPTO 2010, 30th Annual Cryptology
Conference, Santa Barbara, CA, USA, August 15-19, 2010. Proceedings. 631–648.
http://dx.doi.org/10.1007/978-3-642-14623-7_34
[35] Hugo Krawczyk and Hoeteck Wee. 2015. The OPTLS Protocol and TLS 1.3. IACR
Cryptology ePrint Archive 2015 (2015), 978. http://eprint.iacr.org/2015/978
[36] Brian A. LaMacchia, Kristin E. Lauter, and Anton Mityagin. 2007. Stronger
Security of Authenticated Key Exchange. In Provable Security, First International
Conference, ProvSec 2007, Wollongong, Australia, November 1-2, 2007, Proceedings.
1–16. http://dx.doi.org/10.1007/978-3-540-75670-5_1
(June 2013).
[37] A. Langley and W. Chang. 2013. QUIC Crypto.
Avail-
able at https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_
L2f5LTaDUDwvZ5L6g/.
[38] Yong Li, Sven Schäge, Zheng Yang, Florian Kohlar, and Jörg Schwenk. 2014. On
the Security of the Pre-shared Key Ciphersuites of TLS. In Public-Key Cryp-
tography - PKC 2014 - 17th International Conference on Practice and Theory in
Public-Key Cryptography, Buenos Aires, Argentina, March 26-28, 2014. Proceedings.
669–684. http://dx.doi.org/10.1007/978-3-642-54631-0_38
[39] Gavin Lowe. 1997. A Hierarchy of Authentication Specifications. In Proceedings
of the 10th IEEE Workshop on Computer Security Foundations (CSFW ’97). IEEE
Computer Society, Washington, DC, USA, 31–. http://dl.acm.org/citation.cfm?
id=794197.795075
[40] Colm MacCárthaigh. 2017. Security review of TLS1.3 0-RTT. TLS mailing list post.
(May 2017). https://www.ietf.org/mail-archive/web/tls/current/msg23051.html
Available at https://www.ietf.org/mail-archive/web/tls/current/msg23051.html.
Itsik Mantin. 2015. Attacking SSL when using RC4. White Paper. (March 2015).
https://www.imperva.com/docs/HII_Attacking_SSL_when_using_RC4.pdf
[42] Nikos Mavrogiannopoulos, Frederik Vercauteren, Vesselin Velichkov, and Bart
Preneel. 2012. A cross-protocol attack on the TLS protocol. In the ACM Conference
on Computer and Communications Security, CCS’12, Raleigh, NC, USA, October
16-18, 2012. 62–72. http://doi.acm.org/10.1145/2382196.2382206
[43] Bodo Moeller. 2004. Security of CBC Ciphersuites in SSL/TLS: Problems and
Countermeasures. Unpublished manuscript. (May 2004). http://www.openssl.
org/~bodo/tls-cbc.txt.
[41]
[44] Bodo Möller, Thai Duong, and Krzysztof Kotowicz. 2014. This POODLE bites:
Exploiting The SSL 3.0 Fallback. Security Advisory. (September 2014). https:
//www.openssl.org/~bodo/ssl-poodle.pdf
[45] Kenneth G. Paterson and Thyla van der Merwe. 2016. Reactive and Proactive
Standardisation of TLS. In Security Standardisation Research - Third International
Conference, SSR 2016, Gaithersburg, MD, USA, December 5-6, 2016, Proceedings.
160–186.
[46] E. Rescorla. 2015. The Transport Layer Security (TLS) Protocol Version 1.3 (draft,
revision 10). (October 2015). https://tools.ietf.org/html/draft-ietf-tls-tls13-10
Available at https://tools.ietf.org/html/draft-ietf-tls-tls13-10.
[47] Eric Rescorla and Brian Korver. 2003. Guidelines for writing RFC text on security
considerations. RFC 3552 (Informational). (July 2003). https://tools.ietf.org/html/
rfc3552
[48] Benedikt Schmidt, Simon Meier, Cas Cremers, and David Basin. 2012. Automated
Analysis of Diffie-Hellman Protocols and Advanced Security Properties. In 25th
IEEE Computer Security Foundations Symposium, CSF 2012, Cambridge, MA, USA,
June 25-27, 2012, Stephen Chong (Ed.). IEEE, 78–94.
[49] Serge Vaudenay. 2002. Security Flaws Induced by CBC Padding - Applica-
tions to SSL, IPSEC, WTLS .... In Advances in Cryptology - EUROCRYPT 2002,
International Conference on the Theory and Applications of Cryptographic Tech-
niques, Amsterdam, The Netherlands, April 28 - May 2, 2002, Proceedings. 534–546.
http://dx.doi.org/10.1007/3-540-46035-7_35
Figure 9: Part 1 of the full state diagram for Tamarin model, showing all rules covered in the initial handshake (excluding
rules dealing with record layer).
C0startC1C2aC2bC2cC2dC3C4S0startS1S2aS2bS2cS2dS3S4ClientPSKServerPSKS4C4C4S4C4S4S4C4C4S4S4recvhelloretryrequestclientgenkeysrecvencryptedextensionsrecvcertificaterequestORskiprecvcertificaterequestclientauthORclientauthcertcertreqctxt6=‘0’certreqctxt=‘0’helloretryrequestservergenkeysencryptedextensionscertificaterequestORskipcertificaterequestcertreqctxt6=‘0’recvclientauthORrecvclientauthcertcertreqctxt=‘0’ClientHello+ExtensionsServerHello+ExtensionsEncryptedExtensionsCertiﬁcateRequestCertiﬁcateCertiﬁcateVerifyFinishedCertiﬁcateCertiﬁcateVerifyFinishedFinishedrecvnewsessionticketnewsessionticketNewSessionTicketclienthelloORclienthellopskrecvclienthelloORrecvclienthellopskserverhelloORserverhellopskORserverhellopskdhekemode=h‘pskdheke’,‘pskke’irecvserverhelloORrecvserverhellopskORrecvserverhellopskdhekemode=h‘pskdheke’,‘pskke’irecvserverauthORrecvserverauthpskauthmode=‘pskauth’authmode∈{‘psksignauth’,‘0’}serverauthORserverauthpskauthmode=‘pskauth’FinishedcertificaterequestpostrecvcertificaterequestpostCertiﬁcateRequestclientauthpostrecvclientauthpostCertiﬁcateCertiﬁcateVerifyFinishedupdatereqserverupdaterecvclientKeyUpdateupdatefinserverKeyUpdateFigure 10: Part 2 of the full state diagram for Tamarin model, showing all post-handshake rules covered.
C0startC1C2aC2bC2cC2dC3C4S0startS1S2aS2bS2cS2dS3S4ClientPSKServerPSKS4C4C4S4C4S4S4C4C4S4S4C4C4S4S4C4C4recvhelloretryrequestclientgenkeysrecvencryptedextensionsrecvcertificaterequestORskiprecvcertificaterequestclientauthORclientauthcertcertreqctxt6=‘0’certreqctxt=‘0’helloretryrequestservergenkeysencryptedextensionscertificaterequestORskipcertificaterequestcertreqctxt6=‘0’recvclientauthORrecvclientauthcertcertreqctxt=‘0’ClientHello+ExtensionsServerHello+ExtensionsEncryptedExtensionsCertiﬁcateRequestCertiﬁcateCertiﬁcateVerifyFinishedCertiﬁcateCertiﬁcateVerifyFinishedFinishedrecvnewsessionticketnewsessionticketNewSessionTicketclienthelloORclienthellopskrecvclienthelloORrecvclienthellopskserverhelloORserverhellopskORserverhellopskdhekemode=h‘pskdheke’,‘pskke’irecvserverhelloORrecvserverhellopskORrecvserverhellopskdhekemode=h‘pskdheke’,‘pskke’irecvserverauthORrecvserverauthpskauthmode=‘pskauth’authmode∈{‘psksignauth’,‘0’}serverauthORserverauthpskauthmode=‘pskauth’FinishedcertificaterequestpostrecvcertificaterequestpostCertiﬁcateRequestclientauthpostrecvclientauthpostCertiﬁcateCertiﬁcateVerifyFinishedupdatereqserverupdaterecvclientKeyUpdateupdatefinserverKeyUpdateupdatereqclientupdaterecvserverKeyUpdateupdatefinclientKeyUpdate