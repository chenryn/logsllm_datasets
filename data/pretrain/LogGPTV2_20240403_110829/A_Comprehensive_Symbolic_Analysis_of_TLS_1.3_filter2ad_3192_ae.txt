### Annotated RFC and Model Development

Our annotations serve a dual purpose: they not only model the rules but also explicitly indicate which details we do not model, often providing the reasons for these exclusions. During the development of our model, these annotations were instrumental in tracking the parts of the specification that had already been modeled and how they were modeled. This approach simplified the task of keeping track of updates to the specification, which was particularly useful given the rapid pace at which the draft specification underwent changes.

#### Key Features of Our Annotated RFC

1. **Transparency in Abstraction**:
   - Readers can easily check which parts of the specification we abstracted and how we did so. This eliminates the need for readers to independently map the Tamarin model to the RFC, making it easier to understand what is covered and how it is covered without delving into Tamarin's formalism.
   
2. **Efficient Update Tracking**:
   - If the specification is updated or changed, our annotated RFC allows us to quickly identify and update the corresponding parts of the model. This ensures that our model remains up-to-date and accurate.

We encourage other analyses of TLS 1.3 to adopt a similar transparent approach. This would help the community better understand which details from the specification still need to be covered, thereby facilitating a faster convergence of confidence in all aspects of the standard.

### Conclusions

In this work, we modeled the current draft of the TLS 1.3 specification within the symbolic analysis framework of the Tamarin prover. We used the tool to verify the majority of the security guarantees that TLS 1.3 claims to offer its users. Our focus was on ruling out complex interaction attacks by considering an unbounded number of concurrent connections and all TLS 1.3 handshake modes. We covered both unilateral and mutual authentication, as well as session key secrecy in all TLS 1.3 handshake modes with respect to a Dolev-Yao attacker. Additionally, we captured more advanced security properties such as perfect forward secrecy and key compromise impersonation. Our Tamarin model covers substantially more interactions than previous analyses due to its modularity.

Besides verifying that draft 21 of the TLS 1.3 specification meets the claimed security properties in most handshake modes and variants, we discovered an unexpected authentication behavior. This behavior implies that TLS 1.3 provides no direct means for a client to determine its authentication status from the perspective of a given server. As a server may treat authenticated data differently from unauthenticated data, the client may end up in a position where its sensitive data is processed as non-sensitive data by the server.

During our analysis, we developed a line-by-line modeling aide that accurately captured which parts of the specification we were able to model and which parts were abstracted. This artifact allows us to easily assess the faithfulness and coverage of our model and makes our model highly amenable to various extensions, especially with respect to security properties and threat models. We expect this artifact to serve as a comprehensive informational aid for academic researchers and the TLS Working Group.

### Certificate Verify Message

The `CertificateVerify` message is used to provide explicit proof that an endpoint possesses the private key corresponding to its certificate and to ensure the integrity of the handshake up to that point. Servers must send this message when authenticating via a certificate, and clients must send it whenever authenticating via a certificate (i.e., when the `Certificate` message is non-empty). When sent, this message must appear immediately after the `Certificate` message and immediately prior to the `Finished` message.

#### Structure of the `CertificateVerify` Message

```c
struct {
    SignatureScheme algorithm;
    opaque signature;
} CertificateVerify;
```

- **Algorithm Field**: Specifies the signature algorithm used (see Section 4.2.3 for the definition of this field).
- **Signature**: A digital signature using the specified algorithm.

The content covered under the signature is the hash output as described in Section 4.4:

```plaintext
Transcript-Hash(Handshake Context, Certificate)
```

#### Computation of the (Server) Signature

```plaintext
messages = 
signature = compute_signature(~ltkS, server)
where compute_signature expands to:
sign{}
```

Since `messages` contains the handshake transcript up until that point, this is valid for the Handshake Context. We do not attempt to add the padding prefix specified in the specification, as it would have no purpose given our assumption of perfect crypto.

The `CertificateVerify` message is defined as:

```plaintext
define(, )
```

We do not currently model the use of different signing algorithms or their effects on security.

#### Validation of the `CertificateVerify` Message

The peer validates the `CertificateVerify` message by recomputing the signature input and enforcing the action `Eq(verify(signature, sig_messages, pk(~ltkS)), true)`. This makes the trace invalid if the verification fails, implying that the peer terminates the connection if receiving an invalid signature.

An alternative way to model this in Tamarin would be to provide the peer with the long-term key `~ltkA` and pattern match the signature as an expected message. While this can (probably) be shown to be equivalent and potentially more efficient for Tamarin, we believe using explicit verification is clearer.

### Acknowledgments

This work was supported by the Engineering and Physical Sciences Research Council, grant number EP/K035584/1, the European Research Council, grant number 610150, and the Air Force Office of Scientific Research, grant number FA9550-17-1-0206.

### References

[References are listed as provided in the original text, with proper formatting and links.]

### Figures

- **Figure 8**: An excerpt of our website, showing how we annotated the specification. The full version can be found at [21].
- **Figure 9**: Part 1 of the full state diagram for the Tamarin model, showing all rules covered in the initial handshake (excluding rules dealing with the record layer).
- **Figure 10**: Part 2 of the full state diagram for the Tamarin model, showing all post-handshake rules covered.