119,270
224,351
611,986
273,865
44,983
78,893
Test
142s
153s
82s
196s
183s
123s
333s
283s
31s
493s
Table 4: Execution time of Deemon.
Web Apps.
AbanteCart
Horde
IN
Mautic
MyBB
OpenCart
Oxid
Prestashop
SI
SMF
Total
* descrease % from SC Reqs
Reqs
335
21
103
58
104
117
165
267
92
118
1,380
SC Reqs
335
21
103
21
104
117
165
195
7
118
1,186
Rel. SC Reqs(∗)
8
-98%
3
-86%
11
-89%
8
-62%
21
-80%
11
-91%
10
-94%
16
-92%
7
0%
69
-42%
164
-86%
Table 5: Analysis results for the identi(cid:27)cation of relevant
state-changing (SC) requests.
an SSD disk and 32 GB of RAM. The workstation hosted a Virtu-
alBox hypervisor that Deemon used to deploy Bitnami application
containers. To generate our graph, we used a workstation with an
Intel i7-4600U CPU, an SSD disk and 12 GB RAM. We used a single
instance of Neo4j to handle property graphs of all applications with
a total of three million nodes and four million edges.
Overall, Deemon took about 13 minutes to produce the output
report for a single web application (see Table 4). About 50% of the
execution time is spent to generate traces and testing, which are
largely in(cid:30)uenced by the web application behavior. For example,
the (cid:27)rst time that a Prestashop webpage is requested, it creates a
cache for frequently requested resources. As we reset the virtual
machine to the initial state, Deemon waits for Prestashop to re-create
the local cache. Finally, model generation took in average 7 minutes
per web application. The execution of queries takes less then 60s.
7.6 Detection of aCSRF
Deemon discovered 29 security-relevant state-changing requests.
17 of these tests detected a vulnerability in four web applications:
AbanteCart, Mautic, OpenCart, and Simple Invoices. The remaining
12 requests did not detect vulnerabilities. We present attacks in
Section 8.
aCSRF Candidates—Table 5 shows the number of state-changing
operations (column “SC Reqs”) compared with the total number of
operations (column “Reqs”). Results are aggregated by web appli-
cation. Almost all operations change the state. However, not all of
these operations are necessarily relevant for the security analysis.
For example, some operations may merely log user activities or
be used to manage user sessions. Thus, within a work(cid:30)ow, these
operations most likely reoccur multiple times. Table 5 (column “Rel.
Reqs”) shows the total number of relevant state-changing opera-
tions. The number of relevant operations decreased considerably,
i.e., on average by -86%, from 1,186 to 164. The decrease is more
evident in applications like AbanteCart, where the number of op-
erations decreased by 98% (from 335 to 8), whereas in other cases
like Simple Invoice, the number remained unchanged.
We manually inspected SQL queries that were excluded to as-
sess the accuracy of our heuristic. The total number of abstract
SQL queries of our testbed is 704, of which 285 are considered not
relevant. All these queries are used to perform one of the following
operations: session management (e.g., creating a user session and
refreshing of session token validity), logging URL access, tracking
user activity, and cache management (e.g., MyBB stores entire CSS
(cid:27)les in the DB). As these queries are not relevant for our analysis,
we conclude that our heuristic is accurate.
Security Tokens—Deemon identi(cid:27)ed 356 variables of HTTP re-
quests. 248 of them are discarded as they are cookies (192 variables),
boundary markers of the multi-part form data encoding (29 vari-
ables), and parameter names used with timestamps4 (27 variables).
These parameters cannot successfully protect against aCSRF vul-
nerabilities. The remaining 108 variables may be anti-CSRF tokens
and are used by 53 operations out of 164. The remaining 111 state-
changing operations are not protected.
Security Testing—Table 6 shows the total number of tests that
were generated for each approach. In total, we executed 111 tests
for unprotected operations and 108 for protected ones. Deemon
monitored the test execution by using the sensors installed dur-
ing the instrumentation of the application container. In total, 29
tests were successful and discovered severe vulnerabilities. We dis-
cuss these results in detail in Section 8. The remaining 190 tests
failed. The majority of failed tests among the protected operations
are caused by the presence of an anti-CSRF token. In Section 8,
we present an in-depth discussion of the use of this token.The re-
maining failed tests (including several unprotected operations) are
caused by multi-step work(cid:30)ows in which the tested HTTP request
depends on another request that is not part of the test. We leave
the study of dependencies between requests as a future research
direction.
8 RESULTS
We now detail the vulnerabilities that Deemon discovered in the four
vulnerable web applications. We also discuss tests that discovered
state transitions that cannot be exploited in a aCSRF attack.
8.1 Exploitable Vulnerabilities
Four web applications of our testbed are vulnerable to aCSRF at-
tacks. The severity of this vulnerability ranges from very high, i.e.,
customer account takeover, website takeover, and database deletion,
to low, i.e., adding items into a shopping cart. These vulnerabilities
can potentially a(cid:29)ect millions of websites. For example, according
to Pellegrino et al. [32], OpenCart is used by at least nine million
websites whereas AbanteCart is used by 21 thousand websites. We
4This technique is often used to bypass browser caching mechanisms
Web Apps.
TCs
3
3
12
19
1
2
33
7
-
20
AbanteCart
Horde
IN
Mautic
MyBB
OpenCart
Oxid
Prestashop
SI
SFM
* one TC for each unprotected operation
Protected
Succ.
1
-
-
2
-
1
-
-
-
-
Fail.
2
3
12
17
1
1
33
7
-
20
Expl.
1
-
-
2
-
1
-
-
-
-
TCs(∗)
5
-
-
-
20
9
-
11
7
47
Unprotected
Succ.
Fail.
3
2
-
-
-
-
-
-
11
9
4
5
-
-
-
11
7
-
47
-
Expl.
2
-
-
-
-
4
-
-
7
-
Table 6: Generation and assessment of test cases. TCs=nos.
of testcases, Fail./Succ.=nos. of un/successful tests, and
Expl.=nos. of tests that exploited an aCSRF vulnerability
responsibly disclosed these vulnerabilities to the developers. In this
section, we present a comprehensive overview of our (cid:27)ndings and
a detailed description of the most severe issues.
8.1.1 Overview of all Vulnerabilities. In summary, we dis-
covered the following vulnerable operations:
AbanteCart—An attacker can (i) take over a customer’s user ac-
count and (ii) add or modify the shipping address. Developers have
already (cid:27)xed this vulnerability.
OpenCart—An attacker can (i) take over a customer’s user account,
(ii) add or modify the shipping address, and (iii) add items to a
customer’s shopping cart5.
Mautic—An attacker can (i) delete a marketing campaign (part of
the core logic of the web application), and (ii) delete recipients from
a marketing campaign. Developers of Mautic were unresponsive
and we requested and obtained a CVE entry (CVE-2017-8874).
Simple Invoices—An attacker can (i) create new website admin-
istrators and customers, (ii) enable payment methods, (iii) create
new invoices, and (iv) change taxation parameters. Developers of
Simple Invoices acknowledged the presence of the (cid:30)aw, but they
were not working on a patch yet. Accordingly, to protect SI users,
we requested and obtained a CVE entry (CVE-2017-8930).
8.1.2 Attack #1: Account Takeover with AbanteCart and
OpenCart. The vulnerable state-changing operations of both web
applications are not protected by anti-CSRF tokens.
The attack against OpenCart exploits two aCSRF vulnerabilities
in the operations to (i) change the user email address and (ii) to
update user passwords. When changing this security-sensitive in-
formation, OpenCart neither uses anti-CSRF tokens, nor requires
users to provide their current password. As a result, an attacker can
use aCSRF to reset both email and password to hijack an account.
The attack against AbanteCart exploits the aCSRF vulnerability
in the operation to change user data (e.g., email address, (cid:27)rst and last
name). As opposed to OpenCart, AbanteCart does not use the email
address as username. However, it permits recovering usernames
and resetting user passwords via the “forgot username” and “forgot
password” features. To reset the username, AbanteCart asks for an
5This vulnerability was also found and reported by a third party in independent and
parallel research.
email address and the last name of the customer, then sends the
username in an email. As the attacker can change the email and
last name with an aCSRF attack, she can successfully retrieve the
username. The “forgot password” requires the username and the
email address. As the attacker possesses both, she receives a link to
reset the password via email.
8.1.3 Attack #2: Database Corruption in Mautic. Our tests
discovered two aCSRF vulnerabilities in Mautic which allow an at-
tacker to compromise the core functionalities of the software. Mau-
tic is a marketing automation web application which allows users
to create email marketing campaigns and to manage the contacts of
the campaign. Our tests discovered aCSRF vulnerabilities in these
two operations in which an attacker can delete a speci(cid:27)c campaign
or a contact. The identi(cid:27)er used to refer to both campaigns and
contacts is an incremental integer number. An attacker can either
compromise speci(cid:27)c campaigns by deleting them or by deleting
users, or can delete all existing campaigns and contacts.
8.1.4 Attack #3: Web Application Takeover with Simple
Invoices. Our analysis discovered that seven state-changing opera-
tions in Simple Invoices are not protected by any session-unique or
user-unique data value. In total, six work(cid:30)ows are vulnerable to aC-
SRF vulnerabilities. These work(cid:30)ows are: creation of a new website
administrator, creation of a new customer account, enabling pay-
ment methods (e.g., PayPal), adding a new invoice to the database,
and changing both global and invoice tax rates.
8.2 Non-Exploitable Tests
11 tests caused a change of state in MyBB. The operations under test
were privileged operations performed by the website administrator.
While the tests were successfully executed, they cannot be exploited