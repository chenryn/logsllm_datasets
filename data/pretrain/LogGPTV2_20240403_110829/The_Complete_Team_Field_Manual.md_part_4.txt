19. Wait for user to click on attachment
2.2.2 DETECTION
2.2.2.1Remote Admin Tools
Psexec
Get-WinEvent -FilterHashTable @{ Logname=’System’; ID=’7045’} |
where {$_.Message.contains("PSEXEC")}
WMI (requires Command)
reg add "hklm\software\microsoft\windows\currentversion\policies\system\audit"
/v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1
2.2.2.2Spear Phishing
Zeek is a great behavior analysis network tool, and with it you can create
custom scripts to look for phishing. There are some great examples on
https://github.com/dhoelzer/ShowMeThePackets/tree/master/Zeek
The following example script was written by dhoelzer and is available from
the github above.
global domains_in_emails: set[string];
global addresses_from_links: set[addr];
event mime_entity_data (c: connection, length: count, data: string){ local urls = find_all(data,
/https*:\/\/[^\/]*/);
if(|urls| == 0){ return; }
for(url in urls){
add domains_in_emails[split_string(url, /\//)[2]];}}
event dns_A_reply (c: connection, msg: dns_msg, ans: dns_answer, a: addr){
if(ans$query in domains_in_emails){
add addresses_from_links[a];}}
event connection_SYN_packet (c: connection, pkt: SYN_packet){ if(!(c$id$resp_h in
addresses_from_links)) { return; }
if(c$id$resp_p == 80/tcp) {
print fmt ("Phishing related: HTTP connection from %s to %s", c$id$orig_h, c$id$resp_h);
return; }
if(c$id$resp_p == 443/tcp) {
print fmt ("Phishing related: TLS/SSL connection from %s to %s",
c$id$orig_h, c$id$resp_h);
return; }
print fmt (">>> Phishing related: connection to port %d from %s to %s", c$id$resp_p, c$id$orig_h,
c$id$resp_h);}
2.2.2.3Logs
Targeted log collection allows for the best results in finding intrusions, this
means that you should build a list of adversary tactics, techniques and
procedures (TTPs) and collect the exact logs needed to alert against that TTP.
Below are popular logs that can be used to gain insight into an intrusion:
Account Management
Event ID 624 User Account Created
Event ID 626 User Account Enabled
Event ID 627 Password Change Attempted
Event ID 628 User Account Password Set
Event ID 629 User Account Disabled
Event ID 630 User Account Deleted
Event ID 631 Security Enabled Global Group Created
Event ID 632 Security Enabled Global Group Member Added
Event ID 633 Security Enabled Global Group Member Removed
Event ID 634 Security Enabled Global Group Deleted
Event ID 635 Security Enabled Local Group Created
Event ID 636 Security Enabled Local Group Member Added
Event ID 637 Security Enabled Local Group Member Removed
Security Enabled Local Group
Event ID 638 Deleted
Event ID 639 Security Enabled Local Group Changed
Event ID 641 Security Enabled Global Group Changed
Event ID 642 User Account Changed
Event ID 643 Domain Policy Changed
System Events
Event ID Windows is starting up
512
Event ID Windows is shutting down
513
Internal resources allocated for the queuing of audit messages have been
Event ID
exhausted, leading to the loss of some audits.
516
Event ID The security log was cleared
517
Policy Changes
Event ID
A user right was assigned
608
Event ID
A user right was removed
609
Event ID
A trust relationship with another domain was created
610
Event ID
A trust relationship with another domain was removed
611
Event ID
An audit policy was changed
612
A collision was detected between a namespace element in one forest and a
Event ID
namespace element in another forest
4864
2.3 EXECUTION
The adversary is trying to run malicious code.
Execution consists of techniques that result in adversary- controlled code
running on a local or remote system. Techniques that run malicious code are
often paired with techniques from all other tactics to achieve broader goals,
like exploring a network or stealing data. For example, an adversary might
use a remote access tool to run a PowerShell script that does Remote System
Discovery.
2.3.1 ATTACK
CMSTP Execution
CMSTP can be used to bypass application whitelisting and UAC. Empire
1. Empire Setup:
2. Example .inf file
3. Execution
Metasploit
1. msfvenom dll creation
2. Example .inf file
3. Setup Metasploit
4. Execution
2.3.1.1HTA Execution (mshta.exe)
Service Execution (as admin)
Powershell
Powershell enable script block logging
Compiled HTML
2.3.2 DETECTION
Disallow Specific EXE
List Unsigned DLL’s
2.4 PERSISTENCE
The adversary is trying to maintain their foothold.
Persistence consists of techniques that adversaries use to keep access to
systems across restarts, changed credentials, and other interruptions that
could cut off their access. Techniques used for persistence include any
access, action, or configuration changes that let them maintain their foothold
on systems, such as replacing or hijacking legitimate code or adding startup
code.
----------- Relevant Information -----------
2.4.1 ATTACK
2.4.1.1DLL Search Order Hijacking
Place malicious DLL in a place where it will be executed before the
legitimate DLL. Applications search for DLL’s in the following order:
2.4.1.2Registry Keys
Startup
Login Script
2.4.1.3Task Scheduler
The persistence technique of scheduled tasks allows attackers to setup a
command that will be executed at a scheduled date and time, this is an older
technique, but it is still used as it is an effective method of persistence.
Using “at” command:
Using “schtasks” command:
Local Task
Remote task
2.4.1.4Metasploit/Meterpreter:
2.4.1.5Powershell Empire:
Method 1:
Method 2:
2.4.1.6Web Shell
This is an example webshell written by WhiteWinterWolf that can be
downloaded and copied to web directory, you could alternatively use your
own webshell.
2.4.2 DETECTION
PowerShell gives multiple ways to search through scheduled tasks below are
a few:
Method 1
Method 2
Stop users from being able to add/modify/delete scheduled tasks
Enforce Safe DLL Search Mode (only helps for system DLL’s)
Disable Run Once
Check Run Key Locations
Web Shells
Commands run from web shells are spawned with the parent process as the
webserver, to locate the parent process of a command use the following
command
2.5 PRIVILEGE ESCALATION
The adversary is trying to gain higher-level permissions.
Privilege Escalation consists of techniques that adversaries use to gain
higher-level permissions on a system or network. Adversaries can often enter
and explore a network with unprivileged access but require elevated
permissions to follow through on their objectives. Common approaches are
to take advantage of system weaknesses, misconfigurations, and
vulnerabilities. Examples of elevated access include:
• SYSTEM/root level
• local administrator
• user account with admin-like access
• user accounts with access to specific system or perform specific
function
These techniques often overlap with Persistence techniques, as OS features
that let an adversary persist can execute in an elevated context.
2.5.1 ATTACK
2.5.1.1Powershell Empire:
Empire (bypassuac_env):
Empire (bypassuac_eventvwr):
Empire (bypassuac_fodhelper):
Empire (bypassuac_wscript):
Empire (bypassuac):
2.5.1.2Meterpreter
Method 1:
Method 2:
2.5.1.3Unquoted Service Paths
Vulnerability if service executable path name is not in quotes
1. If executable path exists, check permissions for every
directory in the path;
2. Add .exe to path.
2.5.1.4Bypass UAC via event viewer
2.5.1.5Bypass UAC Windows 10 fodhelper.exe
cmd.exe
Powershell
2.5.2 DETECTION
Many techniques to bypass UAC and elevate privileges requires the ability
the write to the registry one mitigation is to restrict access to registry editor.
Query eventvwr.exe registry key
Query fodhelper.exe registry key
2.6 DEFENSE EVASION
The adversary is trying to avoid being detected.
Defense Evasion consists of techniques that adversaries use to avoid
detection throughout their compromise. Techniques used for defense
evasion include
uninstalling/disabling security software or
obfuscating/encrypting data and scripts. Adversaries also leverage and abuse
trusted processes to hide and masquerade their malware. Other tactics’
techniques are cross-listed here when those techniques include the added
benefit of subverting defenses.
2.6.1 ATTACK
2.6.1.1Clearing Event Logs
1. PowerShell
2. CMD
2.6.1.2Bypassing Anti-Virus
2.6.1.3Obfuscate files
2.6.1.4Alternate Data Stream
Rootkits
As an example of rootkits for windows you can download hxdef100 or
puppetstrings. Puppetstrings can be downloaded from
https://github.com/zerosum0x0/puppetstrings and visual studio from
https://visualstudio.microsoft.com/thank-you- downloading-visual-studio/?
sku=Community&rel=16
Once you have installed visual studio get the project from github, compile
and run project this will create puppetstrings.exe
hxdef is another rootkit that is openly available, but mostly works on older
versions of windows, it is comprised of three files hxdef100.exe,
hxdef100.ini and dccli100.exe. Configure the way that you want hxdef100 to
run by editing hxdef100.ini, below is an example of default config. To hide a
process add the process to hidden table and to give it root access put it under
root processes.
2.6.2 DETECTION
2.6.2.1Detect Alternate Data Stream
2.6.2.2Detect Rootkits
Rootkits can run in either User mode or Kernel mode, with Kernel mode
being the most dangerous. Rootkits can be difficult to detect as they control
the way that the operating system behaves or interacts with the user.
2.6.2.3Memory Dump
Obtain memory dump using dumpit or another utility, you can get dumpit
here: https://github.com/thimbleweed/All-In-
USB/raw/master/utilities/DumpIt/DumpIt.exe
2.6.2.4Windows Security
Performing an offline scan with windows security is another method of
detecting rootkits on your window operating system.
2.6.2.5GMER
You can download GMER here: http://www2.gmer.net/download.php
Once downloaded run and select Scan. GMER will then attempt to find any
rootkits by scanning files, registry entries, drives and processes.
2.7 CREDENTIAL ACCESS
The adversary is trying to steal account names and passwords.
Credential Access consists of techniques for stealing credentials like account
names and passwords. Techniques used to get credentials include keylogging
or credential dumping. Using legitimate credentials can give adversaries
access to systems, make them harder to detect, and provide the opportunity to
create more accounts to help achieve their goals.
2.7.1 ATTACK
2.7.1.1Cleartext Passwords
Users will occasionally store cleartext passwords in files on their computers,
perform a basic search for these files.
#Find all those strings in config files.
# Find all passwords in all files.
There are configuration files and various other files that may contain user
passwords, here are a few common files to find user passwords, these
passwords may be Base 64 encoded.
The registry could also store credentials used by 3rd party programs or
services, simple search to find passwords in the registry
2.7.1.2Credential Dumping
A memory dump of the lsass process combined with the use of mimikatz
offline this can be done with procdump or powershell.
Procdump
windows credential editor
powershell
1. use script from
https://github.com/PowerShellMafia/PowerSploit/blob/master/Ex
Minidump.ps1 to generate dump file
2. mimikatz.exe log "sekurlsa::minidump lsass.dmp"
sekurlsa::logonPasswords exit
Remote powershell
NTDS.dit
Group Policy Preference
Empire:
2.7.1.3Brute Forcing
Use windows cmd to brute force
Use responder to capture hashes that are used by victim hosts and use john to
crack the hashfile
2.7.2 DETECTION
2.7.2.1Detect lsass dump using sysmon
Create 
Install configuration file
Forward logs to either Splunk or ELK and parse down search results to look
for
PSEUDO
2.7.2.2Enable Windows Credential Guard
Prevent credential dumping in Windows 10 by enabling windows credential
guard
2.8 DISCOVERY
The adversary is trying to figure out your environment.
Discovery consists of techniques an adversary may use to gain knowledge
about the system and internal network. These techniques help adversaries
observe the environment and orient themselves before deciding how to act.
They also allow adversaries to explore what they can control and what’s
around their entry point in order to discover how it could benefit their current
objective. Native operating system tools are often used toward this post-
compromise information-gathering objective.
2.8.1 ATTACK
2.8.1.1Host Enumeration
Once you have gained access to a host machine it is necessary to investigate
your environment, the following information is standard information to
collect.
There are many prewritten scripts to automate enumeration below are a few
links to potentially helpful scripts.
• https://github.com/threatexpress/red-team-
scripts/blob/master/HostEnum.ps1
• https://github.com/411Hall/JAWS
Meterpreter:
Empire:
2.8.1.2Browser Information
Internet Explorer
Chrome
Firefox
2.8.1.3Virtual Machine Detection
Detect Virtual Servers on Network from powershell:
2.8.1.4Ping Sweep
2.8.1.5Windows Domain Controller
2.8.2 DETECTION
While possible to see these events on individual hosts, it is best to detect
some of these behaviors with a network-based intrusion detection system
combined with a SIEM to see all events across the network.
2.8.2.1Detect host enumeration
One possible method is to use PowerShell history to look for commands that
would indicate adversaries trying to run discovery scripts. Many of the
commands could be ran by administrators, so part of the script is going to set
a threshold for how often the commands should appear in proximity to each
other, as well as a threshold of how many commands must be in a group.
2.8.2.2Detect nmap with Snort
2.8.2.3Detect host to host communication with Snort
2.9 LATERAL MOVEMENT
The adversary is trying to move through your environment.
Lateral Movement consists of techniques that adversaries use to enter and
control remote systems on a network. Following through on their primary
objective often requires exploring the network to find their target and
subsequently gaining access to it. Reaching their objective often involves
pivoting through multiple systems and accounts to gain. Adversaries might
install their own remote access tools to accomplish Lateral Movement or use
legitimate credentials with native network and operating system tools, which
may be stealthier.
2.9.1 ATTACK
2.9.1.1Windows Remote Management (WinRM)
If port 5985 is open then the WinRM service is running, if port 5986 is closed
then WinRM is configured to accept connections over HTTP only and
encryption is not enabled.
To use WinRM use the command:
PS > Invoke-Command -ComputerName TARGET -ScriptBlock { dir c:\}
To enable WinRM use the command:
PS > EnablePSRemoting -Force
2.9.1.2Admin Shares
Windows by default has administrative shares that are hidden to allow access
by administrators these share names are C$, IPC$, Admin$
cmd.exe /c "net use \\ \  /u:"