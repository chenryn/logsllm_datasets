## 优化后的文本

### 2011-11-27 20:56:3
**图8.13 队列详情**

---

## 第8章 从Web端管理RabbitMQ

### Page 190
Management插件不仅提供了一个Web界面，还为系统管理员提供了命令行工具。这些工具使得那些没有图形界面的机器（如大多数*nix服务器）也能访问其功能。此外，Management插件还引入了新的命令行接口，以增加管理过程的灵活性，并减轻系统管理员的日常负担。

#### 8.5 回到命令行
如果能够将当前看到的所有操作自动化，那将非常有用。例如，编写一个脚本来获取队列详情（如内存中等待确认的消息总数），并将其发布到诸如Ganglia或Graphite这样的图形工具上。通过Management插件的Web界面来实现这一点需要进行屏幕抓取，这会导致在新版本插件中界面更改时脚本失效。因此，使用新的命令行工具RabbitMQ Management CLI是更好的选择。在本节中，我们将讨论为什么需要另一个命令行工具，然后安装并使用rabbitmqadmin脚本来自动化任务，如清空队列和创建交换器。

##### 8.5.1 为什么需要另一个CLI工具
虽然默认的rabbitmqctl脚本可以管理RabbitMQ，但它存在一些不足，例如处理Erlang cookie的问题以及与其他编程语言和工具集成的困难。相比之下，通过JSON格式输出并与编程语言库集成的功能使学习CLI API变得有价值。让我们看看它是如何工作的。

访问`http://localhost:55672/`，你会看到以下三个选项：
- Management: Web UI
- Management: HTTP API
- Management: Command Line Tool

我们已经尝试过第一个选项，现在来看看其他两个选项的功能。单击HTTP API会跳转到一个关于REST接口的文档页面。所有通过Management插件（Management Web UI）完成的操作都可以通过调用API命令来实现。例如，要列出服务器上的vhost，可以在终端执行以下命令：

```bash
$ curl -i -u guest:guest http://localhost:55672/api/vhosts
```

你将得到如下输出：

```
HTTP/1.1 200 OK
Server: MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date: Wed, 23 Mar 2011 20:07:22 GMT
Content-Type: application/json
Content-Length: 30
Cache-Control: no-cache

[{"name":"/"},{"name":"book"}]
```

你也可以在这里添加新的vhost：

```bash
$ curl -X PUT -u guest:guest http://localhost:55672/api/vhosts/rmqinaction
```

然后回到vhost列表，查看刚刚添加的vhost：

```bash
$ curl -i -u guest:guest http://localhost:55672/api/vhosts
```

当然，如果不再需要的话，你可以删除它：

```bash
$ curl -X DELETE -u guest:guest http://localhost:55672/api/vhosts/rmqinaction
```

通过使用REST API，你可以轻松地自动化那些原本只能通过图形化界面完成的任务。如果你想了解更多关于REST API提供的功能，可以通过浏览器访问随Management插件一起发布的文档：`http://localhost:55672/api`。响应头中的`application/json`意味着你需要使用你喜欢的编程语言的JSON库来解析结果。

##### 8.5.2 CLI管理：一种更简单的方式
尽管上述方法既方便又灵活，但仍然有更简单的方法来管理服务器：即command-line tool。该命令行工具是一个Python脚本，可以从RabbitMQ Management插件安装目录直接下载并执行。相比基于REST的API，rabbitmqadmin脚本的优势在于无需手动编写请求。例如，取代以下命令（列出服务器上的队列）：

```bash
$ curl -i -u guest:guest http://localhost:55672/api/queues
```

你可以这样做：

```bash
./rabbitmqadmin list queues
```

看起来不错吧？现在让我们来安装它。

##### 8.5.3 安装rabbitmqadmin脚本
安装rabbitmqadmin管理脚本非常简单，唯一的要求是安装好Python。假设你已经安装了Python，接下来需要从Management插件中获取该脚本，并设置为可执行文件。通过以下两个命令来完成：

```bash
$ wget http://localhost:55672/cli/rabbitmqadmin
$ chmod +x rabbitmqadmin
```

这会将rabbitmqadmin脚本放置在当前目录下，可以通过终端轻松调用。通过使用该脚本，你可以避免学习curl的所有复杂性。让我们看看实际操作：

```bash
./rabbitmqadmin -V"/" list exchanges
```

输出内容将被格式化，展示“/” vhost内的交换器信息。拆解刚才调用的命令：rabbitmgadmin是可执行文件的名称，也就是刚刚下载的Python脚本；-V"/"用于确定要使用的vhost；最后，listexchanges是你想要执行的命令。

##### 8.5.4 清空队列、创建交换器等
假设某个消费者表现异常，无法消费消息也无法向订阅的队列确认消息。当注意到这个问题时，队列已经填满了无意义的消息。你可以写一段简单的脚本使用AMQP来清空队列，或者简单地调用以下命令：

```bash
$ ./rabbitmqadmin purge queue name=test
queue purged
```

再来看一个创建新交换器的例子。假设你要以用户名guest和密码guest认证后，声明一个名为cli_test的交换器：

```bash
$ ./rabbitmqadmin -u guest -p guest declare exchange name=cli_test type=direct
exchange declared
```

另一个有趣的命令是关闭连接。假设消费者由于行为异常无法确认消息，扰乱了消息流。首先，你可以获取连接列表，其中只有一个connectionname属性：

```bash
$ ./rabbitmqadmin list connections name
```

如果想要关闭该消费者，可以通过调用close connection命令来完成：

```bash
$ ./rabbitmqadmin close connection name="127.0.0.1:64659"
connection closed
```

虽然这里没有详细描述每个命令，但展示了rabbitmgadmin脚本的基本使用方法。以此为基础，你可以开始执行其他任务。

### 8.6 总结
在系统管理方面，有些人偏好命令行工具，而另一些人则倾向于GUI程序。管理RabbitMQ服务器有许多选择。幸运的是，本章中展示的所有工具都是由RabbitMQ开发人员编写并维护的。根据个人喜好，你可能会更倾向于使用Web UI，这对于日常开发非常方便，可以直观查看服务器状态。Web UI也使得团队合作更加简单，甚至市场部门的同事也可以看到有多少营销活动电子邮件正在发往客户。如果你想要自动化这些任务，则可以求助于REST API，并通过curl来调用。由于你得到的应答是JSON对象，很容易将其集成到当前的工具和语言中。最后，如果你想要导出服务器信息但不想手动构造HTTP请求并通过curl发送，可以使用rabbitmgadmin脚本来获得更友好的格式化输出，帮助你管理和监控RabbitMQ。

在下一章中，我们将更深入地介绍REST API，讲解如何自动化多个管理任务（如用户和vhost配置）。先做个热身吧，因为我们马上就要开始编写Python代码了。

---

## 第9章 使用REST API控制Rabbit

### 本章要点
- Rabbit REST API的限制和功能
- 用代码来管理Rabbit权限
- 访问消息通信数据统计和计数器
- 自动化创建用户和虚拟主机

到目前为止，你一直受限于应用程序或脚本来配置RabbitMQ服务器。当然，你可以编写代码运行rabbitmqctl，然后尝试解析输出结果。但这不是一个稳定的解决方案，因为一旦Rabbit团队修改了rabbitmqctl的输出，你的代码就可能无法运行。实际上，rabbitmqctl和Management Web UI都是为与人交互设计的。那么，当你想使用像Chef、Puppet甚至CFEngine这样的工具来自动化RabbitMQ服务器的配置时，该怎么办呢？同时，如何满足监控RabbitMQ的基本需求？你应该如何编写健康检测脚本来监控Rabbit，而不是依赖内嵌在RabbitMQ内部机制中的可编程窗口？

如果你是从头到尾顺序阅读本书，就已经对RabbitMQ Management插件非常熟悉了（参见第8章的安装说明）。它提供了一个基于Web的访问页面，允许你通过浏览器管理和控制RabbitMQ服务器。通过内置的Web UI，管理员可以完成各种任务，包括创建用户和vhost、查看队列数据统计和总体配置等。当你安装了Management插件后，不仅获得了Web UI，同时还免费拥有了REST化的Web API。该API为应用程序和脚本提供了与Web UI或rabbitmqctl完全相同的功能。

当Rabbit总部发布Management插件时，这不仅给了开发人员人性化的Web界面，还提供了一种独立于Erlang的方式来配置和监控运行中的Rabbit节点。“独立于Erlang”这一点尤其重要。虽然Erlang为RabbitMQ的分布式、可扩展性和稳定性提供了支持，但你可能希望从没有安装Erlang的系统上来控制Rabbit。幸运的是，RabbitMQ的Management API使用HTTP协议进行通信，因此任何具有HTTP客户端库的编程语言或脚本语言都能与其通信。

**注意**：对于不熟悉REST这个术语的读者，REST表示Representational State Transfer（表述性状态转移）。它描述了基于HTTP API的约定，将你正在修改的项目及其动作状态编码为URL。例如，你可以用一个非REST化的API，如`http://my-api.com/calls`，然后将需要修改的项目和动作等详情置于请求正文中。但是，如果你想要对API服务器日志进行数据挖掘，就会看到日志文件里全是`/calls`的请求列表，这对分析没有任何帮助。当你按照REST约定组织API时，URL会像这样：`http://my-api.com/item`，然后使用标准的HTTP动作（如POST、PUT和DELETE）来创建、修改或删除项目。现在日志中充满了有用的信息，显示了操作的项目及其上的动作。更多关于REST的信息，请参阅[维基百科](http://en.wikipedia.org/wiki/Representational_State_Transfer)。

在我们使用Management API编写程序之前，需要先了解API允许（以及禁止）你做什么。掌握这些知识后，你就可以为API客户端创建访问凭证，然后使用该凭证访问RabbitMQ内部数据统计，并在Rabbit服务器上添加用户和虚拟主机。让我们马上看看Management API能做些什么吧！