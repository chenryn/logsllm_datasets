2011-11-2720:56:3
图8.13队列详情
---
## Page 190
168
第8章从Web端管理RabbitMQ
Management插件不仅仅是Web界面。为了真正成为系统管理员的好帮手，它
需要提供一些命令行工具，帮助那些缺少视窗系统的机器也可以访问其功能，例如
大多数*nix服务器。Management插件也自带新的命令行接口，为管理过程增添了
灵活性，将系统管理员从日常琐事中解放出来。
8.5回到命令行
如果你可以将目前看到的一切全部自动化的话，那就非常了不得了—假
设写一段脚本获得队列详情，譬如内存中等待确认的消息总数，并将其发布到诸
如Ganglia或Graphite这样的图形工具上去。如果你想要通过Management插件的
Web界面来完成上述工作的话，就不得不通过屏幕抓取的方式来做到这一点。这
意味着如果新插件版本中的Web界面更改的话，你的脚本就失效了。一定有更好
的实现方法。新的命令行工具RabbitMQManagementCLI让我们不用再受更多的
折磨。在本节中，我们将讨论使用另一个命令行工具的原因。然后你将安装新的
rabbitmqadmin 脚本，并使用它来自动化任务，例如清空队列、创建交换器等。
8.5.1为什么需要另一个CL
工具了啊。”我们理解你的这些疑惑。就如我们在本章开头提到的那样，虽然
rabbitmqctl脚本是默认管理RabbitMQ的方式，但是它有自己的不足，譬如处理
Erlang cookie。除此以外，它也很难与其他编程语言和工具进行集成，因为你不得
不解析它生成的自有格式输出。举个例子，如果你能获取队列列表的JSON格式并
让JSON库来解析结果转换回Python 哈希表的话，这样就好多了。正是这样的功能
证明了学习CLIAPI是有价值的。让我们看看它是如何工作的。
用浏览器访问http://localhost:55672/。你会看到下列三个选项：
·Management: Web UI
·Management: HTTP API
·Management: Command Line Tool
我们已经尝试过第一个了，所以让我们看看其他几个选项的功能。如果你单击
HTTPAPI，就会得到一个关于REST接口的文档页面。所有你能通过Managemen
---
## Page 191
8.5回到命令行
169
插件（ManagementWebUI）完成的功能，都可以通过使用curl”并调用API命令
来完成。举个例子，如果想要列出服务器上的vhost的话，在终端执行下列代码：
$ curl -i -u guest:guest http://localhost:55672/api/vhosts
你会得到如下输出：
HTTP/1.1200OK
Server: MochiWeb/l.1 WebMachine/1.7 (participate in the frantic)
Date: Wed, 23 Mar 2011 20:07:22 GMT
Content-Type:application/json
Content-Length: 30
Cache-Control: no-cache
[{"name":"/"},{"name":"book"}]
你也可以在这里添加新的vhost：
-XPUT http://localhost:55672/api/vhosts/rmqinaction
HTTP/1.1 204 NoContent
Server: MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date:Wed, 23 Mar 2011 20:12:28 GMT
Content-Type:application/json
Content-Length:0
然后回到vhost列表，看看你刚刚添加的那个vhost：
curl -i -u guest:guest\
http://1ocalhost:55672/api/vhostsHTTP/1.1 200OK
Server:MochiWeb/1.1 WebMachine/1.7 (participate in the frantic)
Date:Wed, 23 Mar 2011 20:12:57GMT
Content-Type: application/json
Content-Length: 53
Cache-Control: no-cache
[{"name”:"/"},{"name":"book"},{"name":"rmqinaction"}]
当然，如果不再需要的话，你可以删除它：
-XDELETEhttp://localhost:55672/api/vhosts/rmqinaction
HTTP/1.1 204No Content
Server: MochiWeb/1.1 WebMachine/1.7(participate in the frantic)
Date:Wed, 23 Mar 2011 20:14:05 GMT
3命令行工具cur1用URL语法来转移数据。它支持众多格式，如HTTP、RTMP、IMAP等。如果你需
要在本机安装的话，可以从网站http://curl.haxx.se/上进行下载。
---
## Page 192
170
第8章从Web端管理RabbitMQ
Content-Type: application/json
Content-Length:0
通过使用RESTAPI，你可以轻松自动化那些到目前为止只能通过图形化界面
完成的任务。毫无疑问，系统管理员会非常满意这个工具。如果你想学习REST
API提供的功能的话，就可以通过浏览器访问随Management插件一起发布的文档。
http://localhost:55672/api有你想要的内容。你可能注意到了响应头里有一些有趣的
东西：应答是以application/json的方式发送的，这意味着需要用你拿手的编
程语言的JSON库来解析结果（很可能你已经会厂）
8.5.2CLI管理：一种更简单的方式
之前提到的那个方法既方便又具灵活性，不过仍然有更简单的方法来管理服
务器：那就是command-line tool。该命令行工具是一段Python脚本，你可以从
RabbitMQManagement插件安装目录直接下载并执行。该脚本相比基于REST的
API的好处是，你不再需要手工编写请求了。rabbitmqadmin会包装RESTAPl，
让你使用干净的接口与其交互，所以取代下列命令（列出服务器上的队列），
$ curl -i -u guest:guest http://localhost:55672/api/queues
你可以这样做：
./rabbitmqadmin list queues
看起来不错吧？现在就让我们来安装它吧。
8.5.3安装rabbitmqadmin脚本
安装rabbitmqadmin管理脚本简单得要命：唯一的需求是安装好Python即可。
假设你已经安装好了Python，接下去需要做的是从Management插件中获取该脚本，
并设置成可执行文件。通过下列两个命令来完成：
$ wget http://localhost:55672/cli/rabbitmqadmin
$ chmod +x rabbitmqadmin
这会将rabbitmqadmin脚本放置在当前目录下，可以通过终端轻松调用。通
过使用该脚本你可以避免学习curl所有复杂的东西。让我们看看实际操作：
---
## Page 193
8.5回到命令行
171
./rabbitmqadmin-V"/"listexchanges
vhost|
name
Itype
lauto
|durable|internal
|delete |
direct
False
True
|False
I amq.direct
direct
|False
|True
!False
Iamq.fanout
fanout
False
True
|False
/
/
I amq.headers
headers
False
True
|False
Iamq.match
headers
False
ITrue
1False
/
I amq.rabbitmq.log l topic
False
True
|False
Iamq.topic
|topic
False
True
IFalse
Itest
direct
False
True
1False
就像你看到的那样，输出的内容是格式化过的，展现在你眼前的是"/”vhost
内交换器的相关信息。让我们拆解你刚才调用的命令：rabbitmgadmin是可执行
文件的名称，也就是那个刚刚下载的Python脚本；-V"/”是用来确定想要使用的
vhost的选项；最后，listexchanges是你想要执行的命令。
8.5.4清空队列、创建交换器等
假设出于某种原因，有个消费者表现得不太正常，无法消费消息，也无法向订
阅的队列确认消息。你注意到了这个问题时，该队列已经填满了无意义的消息。你
可以写一段简单的脚本使用AMQP来清空队列，或者可以简单地调用下列命令：
$./rabbitmqadmin purge queue name=test
queuepurged
让我们回到创建新交换器的例子当中。让我们看看你在以用户名guest和密码
guest认证之后，如何声明一个名为cli_test 的交换器：
guest:
$./rabbitmqadmin -u guest -p guest declare exchange
name=cli_test type=direct
exchange declared
另一个有趣的命令是关闭连接。假设消费者由于行为异常无法确认消息，因而
扰乱了消息流。首先你可以获取连接列表，里面只有一个connectionname属性：
---
## Page 194
172
第8章从Web端管理RabbitMQ
$./rabbitmqadmin list connections name
+
name
1127.0.0.1:646591
如果想要关闭该消费者的话，你可以通过调用closeconnection命令来完成：
$ ./rabbitmqadmin close connection name="127.0.0.1:64659"
connectionclosed
虽然没有详细描述每一个命令，但是这里展现了rabbitmgadmin脚本的基本
使用方法。以此为基础，你可以开始执行其他任务。
8.6总结
当提到系统管理的时候，一些人会选择命令行工具，而另一些则会偏向GUI程
序。管理RabbitMQ服务器有一大堆选择。好在本章中我们展示的所有工具都是由
RabbitMQ开发人员编写并维护的。根据个人爱好，你会更倾向于使用WebUl。对
于日常开发来说非常方便，你可以用视图查看服务器状态。WebUI使得团队合作更
加简单，甚至做市场的同事也可以看到有多少营销活动电子邮件正在发往客户。如
果你想要自动化这些任务的话，则可以求助于RESTAPI，并通过cur1来调用。由
于你得到的应答是JSON对象，因而很容易将它集成到当前的工具和语言中。最后，
如果你想要导出服务器信息，但又不想手工构造HTTP请求之后通过cur1发送的话，
就可以求助于rabbitmgadmin脚本来获得更友好的格式化输出，帮助你管理和监
控RabbitMQ。
在下一章中，我们会更深入介绍RESTAPI，将讲解如何自动化多个管理任务（例
如用户和vhost配置）。先做个热身吧，因为我们马上就要开始编写Python代码了。
---
## Page 195
使用RESTAPI控制Rabbit
本章要点
■RabbitRESTAPI的限制和功能
■用代码来管理Rabbit权限
■访问消息通信数据统计和计数器
■自动化创建用户和虚拟主机
到目前为止，你一直受限于应用程序或者脚本来配置RabbitMQ服务器。当然
你可以编写代码运行rabbitmqctl，然后尝试“倒腾”输出的结果。但是这是个
脆弱的解决方案，一旦Rabbit团队决定修改rabbitmqctl的输出，那么它就无法
运行了。事实上，rabbitmqctl 和 Management Web UI两者都是为与人交互而设
计的。所以，当你想使用像Chef、Puppet，甚至CFEngine这样的工具，来自动化
RabbitMQ服务器的开发时，该怎么做呢？同时，如何满足监控RabbitMQ的基本需
求呢？你应该如何编写健康检测脚本来监控Rabbit，而非内嵌到RabbitMQ内部机
制中的可编程窗口呢？
如果你是从头到尾顺序阅读本书的话，就已经对RabbitMQManagement插件
非常熟悉了（参见第8章的安装说明）。它提供了一个基于Web的访问页面，允许
---
## Page 196
174
第9章使用RESTAPI控制Rabbit
你通过浏览器来管理和控制RabbitMQ服务器。通过内置的WebUI，管理员可以完
成各种任务，包括创建用户和vhost、查看队列数据统计和总体配置等。当你安装
了Management插件后，则不仅获得了WebUI，同时还免费拥有了REST化的Web
API。该API为应用程序和脚本提供了与WebUI或rabbitmqctl完全相同的功能。
当Rabbit总部发布Management插件时，这不仅给了开发人员人性化的Web
立的、Erlang无关的方式来配置和监控运行中的Rabbit节点。“Erlang无关”这一
点尤其重要。虽然Erlang为RabbitMQ 的分布式、可扩展性和稳定性提供支持，但
是你可能想要从没有安装Erlang的系统上来控制Rabbit。幸运的是，RabbitMQ的
ManagementAPI使用HTTP协议进行通信，因此任何编程语言或者脚本语言只要有
HTTP客户端库的，都能进行通信。
注意：以下内容针对的是那些不熟悉REST这个术语的读者。REST表
示的是RepresentationalStateTransfer（表述性状态转移）。它描述了基于
HTTPAPI的约定，将你正在修改的项目以及该项目上的动作状态编码为
URL。举例来说，你可以用一个非REST化的API，像http：//my-api.
com/calls这样，然后将需要修改的项目和动作等详情置于请求正文之
中。但是如果你想要对API服务器日志做任何类似数据挖掘的话，就会看
到日志文件里全部都是/calls的请求列表。这一点用处都没有。当你按
照REST约定的方式来组织API时，那么URL会像这样：http：//my-
api.cOm/item，然后使用像POST、PUT和DELETE这样标准的HTTP
动作来创建、修改或者删除项目。现在日志中填满了有用的信息，显示了
用于操作的项目，以及该项目之上的动作。更多关于REST的信息，请参
阅http://en.wikipedia.org/wiki/Representational_State_Transfer。
在我们使用ManagementAPI编写程序之前，需要先介绍API允许（以及禁止）
你做什么。一旦掌握了这些之后，你就能为API客户端创建访问凭证，然后使用该
凭证访问RabbitMQ内部数据统计，并在Rabbit服务器上添加用户和虚拟主机。让
我们马上看看ManagementAPI能做些什么吧！