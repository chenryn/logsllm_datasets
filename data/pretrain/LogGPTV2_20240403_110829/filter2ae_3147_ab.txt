            self.mode = int(self.config_ini['Masscan'].split('|')[0])
            self.icmp = int(self.config_ini['Port_list'].split('|')[0])
            self.white_list = self.config_ini.get('White_list', '').split('\n')
然后回来额外设置了`masscan_ac`和`statistics`两个引用标识符（因为要与其他线程共享对它的修改，相当于全局变量
然后启动`s.run()`开始扫描
    def run(self):
        # 在start.py中定义的全局变量，端口列表
        global AC_PORT_LIST
        all_ip_list = []
        for ip in self.scan_list:
            # 处理CIDR格式的ip, eg:192.168.0.1/24
            # 就不具体跟进看了，大约40行左右，涉及一些位运算格式转换啥的
            if "/" in ip: ip = cidr.CIDR(ip)
            if not ip:continue
            # 处理 192.168.0.1-192.168.0.255 这类范围ip
            ip_list = self.get_ip_list(ip)
            # 对于白名单ip进行移除
            for white_ip in self.white_list:
                if white_ip in ip_list:
                    ip_list.remove(white_ip)
           # 是否开始了masscan扫描，开启了mode置为1，否则为0             
           if self.mode == 1: # 使用masscan扫描
                # 获取文件路径
                self.masscan_path = self.config_ini['Masscan'].split('|')[2]
                # 获取扫描速率
                self.masscan_rate = self.config_ini['Masscan'].split('|')[1]
                # 获取存活的ip
                ip_list = self.get_ac_ip(ip_list)
                self.masscan_ac[0] = 1
                AC_PORT_LIST = self.masscan(ip_list)  # 如果安装了Masscan即使用Masscan进行全端口扫描
                if not AC_PORT_LIST: continue
                self.masscan_ac[0] = 0
                for ip_str in AC_PORT_LIST.keys(): self.queue.put(ip_str)  # 加入队列
                self.scan_start()  # 开始扫描
            else:
                all_ip_list.extend(ip_list)
        if self.mode == 0: # 不使用masscan扫描
            if self.icmp: all_ip_list = self.get_ac_ip(all_ip_list)
            for ip_str in all_ip_list: self.queue.put(ip_str)  # 加入队列
            self.scan_start()  # TCP探测模式开始扫描
### 探测存活ip
`self.get_ac_ip()`是通过ping请求来探测主机存活，后期只对存活主机进行扫描
    def get_ac_ip(self, ip_list):
        try:
            s = icmp.Nscan()
            ipPool = set(ip_list)
            return s.mPing(ipPool)
        except Exception, e:
            print 'The current user permissions unable to send icmp packets'
            return ip_list
跟到`s.mPing()`中
    def mPing(self, ipPool):
        # 获得icmp的socket
        Sock = self.__icmpSocket
        Sock.settimeout(self.timeout)
        # 设置icmp数据报
        packet = self.__icmpPacket
        recvFroms = set()
        # 初始化一个多线程的icmp请求类
        sendThr = SendPingThr(ipPool, packet, Sock, self.timeout)
        # 启动多线程icmp扫描
        sendThr.start()
        while True:
            try:
                # 获取返回的ip地址
                ac_ip = Sock.recvfrom(1024)[1][0]
                if ac_ip not in recvFroms:
                    log.write("active", ac_ip, 0, None)
                    # 添加存活ip到`recvForms`
                    recvFroms.add(ac_ip)
            except Exception:
                pass
            finally:
                if not sendThr.isAlive():
                    break
        # 返回两个集合的交集
        return recvFroms & ipPool
`SendPingThr`类
    class SendPingThr(threading.Thread):
        def __init__(self, ipPool, icmpPacket, icmpSocket, timeout=3):
            threading.Thread.__init__(self)
            self.Sock = icmpSocket
            self.ipPool = ipPool
            self.packet = icmpPacket
            self.timeout = timeout
            self.Sock.settimeout(timeout + 1)
        def run(self):
            for ip in self.ipPool:
                try:
                    self.Sock.sendto(self.packet, (ip, 0))
                except socket.timeout:
                    break
                except:
                    pass
            time.sleep(self.timeout)
### masscan扫描全端口
这样就依次将存活的ip返回到了`start.py`中的`run()`中
    # 获取到返回的存活ip
    ip_list = self.get_ac_ip(ip_list)
    # 将masscan_ac[0]置1，表示masscan正在使用
    self.masscan_ac[0] = 1
    # 利用masscan进行全端口扫描
    AC_PORT_LIST = self.masscan(ip_list) 
    if not AC_PORT_LIST: continue
    # 将masscan_ac[0]置0
    self.masscan_ac[0] = 0
    for ip_str in AC_PORT_LIST.keys(): self.queue.put(ip_str)  # 加入队列
    self.scan_start()  # 开始扫描
跟进`self.masscan()`函数
    def masscan(self, ip):
        try:
            if len(ip) == 0: return
            sys.path.append(sys.path[0] + "/plugin")
            m_scan = __import__("masscan")
            result = m_scan.run(ip, self.masscan_path, self.masscan_rate)
            return result
        except Exception, e:
            print e
            print 'No masscan plugin detected'
跟进`m_scan.run()`
    import os
    def run(ip_list,path,rate):
        try:
            ip_file = open('target.log','w')
            # 将存活的ip列表写到target.log中
            ip_file.write("\n".join(ip_list))
            ip_file.close()
            # 进行过滤一些危险字符
            #（issue中也有提到，并不能完全保证后台的安全，主要还是保证对密钥的管理
            path = str(path).translate(None, ';|&`\n')
            rate = str(rate).translate(None, ';|&`\n')
            if not os.path.exists(path):return
            # 用系统命令进行masscan全端口扫描
            os.system("%s -p1-65535 -iL target.log -oL tmp.log --randomize-hosts --rate=%s"%(path,rate))
            # 读取扫描结果
            result_file = open('tmp.log', 'r')
            result_json = result_file.readlines()
            result_file.close()
            del result_json[0]
            del result_json[-1]
            open_list = {}
            # 对扫描结果进行格式化处理
            for res in result_json:
                try:
                    ip = res.split()[3]
                    port = res.split()[2]
                    if ip in open_list:
                        open_list[ip].append(port)
                    else:
                        open_list[ip] = [port]
                except:pass
            os.remove('target.log')
            os.remove('tmp.log')
            # 返回扫描结果
            return open_list
        except:
            pass
这样，再次回到`start.py`的`run()`中
    # 用masscan进行全端口扫描
    AC_PORT_LIST = self.masscan(ip_list)
    if not AC_PORT_LIST: continue
    # 将self.masscan_ac[0]置0，表示结束使用
    self.masscan_ac[0] = 0
    # 将扫描结果存入队列中
    for ip_str in AC_PORT_LIST.keys(): self.queue.put(ip_str)
    # 开始扫描
    self.scan_start()
### scan.py
#### 前期准备
`self.scan_start()`
    def scan_start(self):
        for i in range(self.thread):  # 开始扫描
            t = ThreadNum(self.queue)
            t.setDaemon(True)
            t.mode = self.mode
            t.config_ini = self.config_ini
            t.statistics = self.statistics
            t.start()
        self.queue.join()
跟进`ThreadNum`类
    class ThreadNum(threading.Thread):
        def __init__(self, queue):
            # 赋值扫描队列
            threading.Thread.__init__(self)
            self.queue = queue
        def run(self):
            while True:
                try:
                    # 非阻塞模式
                    task_host = self.queue.get(block=False)
                except:
                    break
                try:
                    if self.mode:
                        # 开启masscan扫描则使用扫描出的存活端口
                        port_list = AC_PORT_LIST[task_host]
                    else:
                        # 否则扫描特定的端口
                        port_list = self.config_ini['Port_list'].split('|')[1].split('\n')
                    _s = scan.scan(task_host, port_list) # 初始化scan
                    _s.config_ini = self.config_ini  # 提供配置信息
                    _s.statistics = self.statistics  # 提供统计信息
                    _s.run() # 启动
                except Exception, e:
                    print e
                finally:
                    self.queue.task_done()
跟到`scan`类的`run()`方法中
    def run(self):
        self.timeout = int(self.config_ini['Timeout']) # 获取timeout
        for _port in self.port_list:
            self.server = ''
            self.banner = ''
            self.port = int(_port)
            self.scan_port()  # 端口扫描
            if not self.banner:continue #无banner则跳过（`NULL`表示暂未检测出，不会continue
            self.server_discern()  # 服务识别
            if self.server == '':
                web_info = self.try_web()  # 尝试web访问
                if web_info:
                    # log记录
                    log.write('web', self.ip, self.port, web_info)
                    time_ = datetime.datetime.now()
                    # 将扫描结果存入mongodb
                    mongo.NA_INFO.update({'ip': self.ip, 'port': self.port},
                                         {"$set": {'banner': self.banner, 'server': 'web', 'webinfo': web_info,
                                                   'time': time_}})
#### 端口扫描
先是进行了`self.scan_port()`端口扫描
    def scan_port(self):
        try:
            # 进行socket连接
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.connect((self.ip, self.port))
            time.sleep(0.2)
        except Exception, e:
            return
        try:
            # 获取banner信息
            self.banner = sock.recv(1024)
            sock.close()
            # 小于等于2则置为'NULL'
            if len(self.banner) <= 2:
                self.banner = 'NULL'
        except Exception, e:
            # 异常情况也置为'NULL'
            self.banner = 'NULL'
        # 日志记录
        log.write('portscan', self.ip, self.port, None)
        banner = ''
        hostname = self.ip2hostname(self.ip)
        time_ = datetime.datetime.now()
        date_ = time_.strftime('%Y-%m-%d')
        try:
            # 进行unicode转换
            banner = unicode(self.banner, errors='replace')
            if self.banner == 'NULL': banner = ''
            # 添加一条info信息
            mongo.NA_INFO.insert({"ip": self.ip, "port": self.port, "hostname": hostname, "banner": banner, "time": time_})
            # 统计信息+1
            self.statistics[date_]['add'] += 1
        except:
            if banner:
                # 原子操作，删除已存在的记录
                history_info = mongo.NA_INFO.find_and_modify(
                    query={"ip": self.ip, "port": self.port, "banner": {"$ne": banner}}, remove=True)
                if history_info:
                    # 新增info记录
                    mongo.NA_INFO.insert(
                        {"ip": self.ip, "port": self.port, "hostname": hostname, "banner": banner, "time": time_})
                    # 统计信息+1
                    self.statistics[date_]['update'] += 1
                    # 删除原先的_id
                    del history_info["_id"]
                    history_info['del_time'] = time_
                    history_info['type'] = 'update'