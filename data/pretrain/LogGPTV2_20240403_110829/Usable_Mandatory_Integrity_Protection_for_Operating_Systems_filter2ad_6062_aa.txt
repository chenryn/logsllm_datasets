title:Usable Mandatory Integrity Protection for Operating Systems
author:Ninghui Li and
Ziqing Mao and
Hong Chen
Usable Mandatory Integrity Protection for Operating Systems
Ninghui Li
Ziqing Mao
Hong Chen
Center for Education and Research in Information Assurance and Security (CERIAS)
and Department of Computer Science
Purdue University
{ninghui, zmao, chen131}@cs.purdue.edu
Abstract
Existing mandatory access control systems for operat-
ing systems are difﬁcult to use. We identify several prin-
ciples for designing usable access control systems and in-
troduce the Usable Mandatory Integrity Protection (UMIP)
model that adds usable mandatory access control to oper-
ating systems. The UMIP model is designed to preserve
system integrity in the face of network-based attacks. The
usability goals for UMIP are twofold. First, conﬁguring a
UMIP system should not be more difﬁcult than installing
and conﬁguring an operating system. Second, existing ap-
plications and common usage practices can still be used
under UMIP. UMIP has several novel features to achieve
these goals. For example, it introduces several concepts
for expressing partial trust in programs. Furthermore, it
leverages information in the existing discretionary access
control mechanism to derive ﬁle labels for mandatory in-
tegrity protection. We also discuss our implementation of
the UMIP model for Linux using the Linux Security Mod-
ules framework, and show that it is simple to conﬁgure, has
low overhead, and effectively defends against a number of
network-based attacks.
1 Introduction
Host compromise is one of the most serious computer
security problems today. Computer worms propagate by
ﬁrst compromising vulnerable hosts and then propagate to
other hosts. Compromised hosts may be organized under a
common command and control infrastructure, forming bot-
nets. Botnets can then be used for carrying out attacks such
as phishing, spamming, and distributed denial of service.
These threats can be partially dealt with at the network level
using valuable technologies such as ﬁrewalls and network
intrusion detection systems. However, to effectively solve
the problem, one has to also address the root cause of these
threats, namely, the vulnerability of end hosts. Two key rea-
sons why hosts can be easily compromised are: (1) software
are buggy, and (2) the discretionary access control mecha-
nism in today’s operating systems is insufﬁcient for defend-
ing against network-based attacks.
There are a lot of research efforts on making computer
systems more secure by adding mandatory access con-
trol (MAC)1 to operating systems, e.g., Janus [12], DTE
Unix [3, 2], Linux Intrusion Detection System (LIDS) [13],
LOMAC [10], systrace [17], AppArmor [8, 1], and Security
Enhanced Linux (SELinux) [16]. Several of these systems
are ﬂexible and powerful. Through proper conﬁguration,
they could result in highly-secure systems. However, they
are also complex and intimidating to conﬁgure. For exam-
ple, SELinux has 29 different classes of objects, hundreds
of possible operations, and thousands of policy rules for a
typical system. The SELinux policy interface is daunting
even for security experts. While SELinux makes sense in a
setting where the systems run similar applications, and so-
phisticated security expertise is available, its applicability
to a more general setting is unclear.
In this paper, we tackle the problem of designing and im-
plementing a usable MAC system to protect end hosts. We
start by identifying several principles for designing usable
access control mechanisms in general. We then introduce
the Usable Mandatory Integrity Protection (UMIP) model,
which was designed following these principles.
The security goal of the UMIP model is to preserve sys-
tem integrity in the face of network-based attacks. We as-
sume that programs contain bugs and can be exploited if
the attacker is able to feed malicious inputs to them. We as-
sume that users may make careless mistakes in their actions,
e.g., downloading a malicious program from the Internet
and running it. However, we assume that the attacker does
not have physical access to the host to be protected. UMIP
aims at narrowing the channels through which a network-
1In this paper, we use MAC to refer to the approach where a system-
wide security policy restricts the access rights of processes. This is a wider
interpretation of MAC than that in the TCSEC [9], which focuses on multi-
level security.
based attacker can take over a host. The usability goals for
UMIP are twofold. First, conﬁguring a UMIP should not be
more difﬁcult than installing and conﬁguring an operating
system. Second, existing application programs and com-
mon practices for using and administering the system can
still be used under UMIP.
The basic UMIP policy is as follows: Each process has
an integrity level, which is either high or low. When a pro-
cess is created, it inherits the integrity level of the parent
process. When a process performs an operation that makes
it potentially contaminated, it drops its integrity. Such oper-
ations include communicating with the network, receiving
data from a low-integrity process through an interprocess
communication channel, and reading or executing a ﬁle that
is potentially contaminated. A low-integrity process by de-
fault cannot perform sensitive operations.
One novel feature of UMIP is that, unlike previous MAC
systems, UMIP uses existing DAC information to identify
which ﬁles are to be protected.
In UMIP, a ﬁle is write-
protected if its DAC permission is not world-writable, and
a ﬁle is read-protected if it is owned by a system account
(e.g., root, bin, etc.) and is not world-readable. A low-
integrity process (even if running as root) by default is for-
bidden from writing any write-protected ﬁle, reading any
read-protected ﬁle, or changing the DAC permission of any
(read- or write-) protected ﬁle.
While the basic UMIP policy achieves the security goal,
many existing applications will not be able to run and many
common practices for using and administering the system
will become impossible. We thus need to extend the basic
UMIP policy to balance the functional requirements, the se-
curity goal, and the simplicity of the design (for usability).
UMIP introduces several concepts to model programs that
are partially trusted; these programs can violate the default
integrity policy in certain limited, well-deﬁned ways. For
example, a program can be declared to be a remote admin-
istration point, so that a process running the program does
not drop integrity upon receiving network trafﬁc. This en-
ables remote system administration through, e.g., the ssh
daemon. Such a program is only partially trusted in that a
process running it still drops integrity when reading a low-
integrity ﬁle or receiving data from another low-integrity
process. For another example, exception policies can be
speciﬁed for some programs so that even when they are run-
ning in low-integrity processes, they can access some pro-
tected resources.
We have implemented UMIP for Linux using the Linux
Security Modules (LSM) framework [24], and have been
using evolving prototypes of the UMIP system within our
group for a few months. We have found that only a small
number of exceptions and settings need to be speciﬁed for
our environment.
The contributions of this paper are three-fold.
1. We identify several design principles for designing us-
able access control mechanisms. Not all of these prin-
ciples are new. Several of them have appeared before
in the literature. However, we believe that putting these
principles together and illustrating them through the
design of an actual system would be useful for other
researchers and developers designing and implement-
ing usable access control systems.
2. We introduce the UMIP model, a simple, practical
MAC model that preserves system integrity in the face
of network-based attacks. It has several novel features
compared with existing integrity protection models.
3. We report our design and implementation of UMIP un-
der Linux, and show that it is simple to conﬁgure, has
low overhead, and effectively defends against a num-
ber of network-based attacks.
The rest of this paper is organized as follows. We dis-
cuss design principles in Section 2. The UMIP model is
described in Section 3. Our implementation of UMIP and
its evaluation are described in Section 4. We then discuss
related work in Section 5 and conclude in Section 6.
2 Design Principles for Usable Access
Control Systems
While it is widely agreed that usability is very important
for security technologies, how to design an access control
system that has a high level of usability has not been ex-
plored much in the literature.
In this section we present
six principles for designing usable access control systems.
Some of these principles challenge established common
wisdom in the ﬁeld, because we place an unusually high
premium on usability. These principles will be illustrated
by our design of UMIP in Section 3.
Principle 1 Provide “good enough” security with a high
level of usability, rather than “better” security with a low
level of usability.
Our philosophy is that rather than providing a protection
system that can theoretically provide very strong security
guarantees but requires huge effort and expertise to con-
ﬁgure correctly, we aim at providing a system that is easy
to conﬁgure and that can greatly increase the level of se-
curity by reducing the attack surfaces. Sandhu [21] made
a case for good-enough security, observing that “cumber-
some technology will be deployed and operated incorrectly
and insecurely, or perhaps not at all.” Sandhu also identi-
ﬁed three principles that guide information security, the sec-
ond of which is “Good enough always beat perfect”2. He
2The ﬁrst one is “Good enough is good enough” and the third one is
“The really hard part is determining what is good enough.”
2
observed that the applicability of this principle to the com-
puter security ﬁeld is further ampliﬁed because there is no
such thing as “perfect” in security, and restate the principle
as “Good enough always beats ‘better but imperfect’.”
There may be situations that one would want stronger
security guarantees, even though the cost of administration
is much more expensive. However, to defend against threats
such as botnets, one needs to protect the most vulnerable
computers on the Internet, i.e., computers that are managed
by users with little expertise in system security. One thus
needs a protection system with a high level of usability.
One corollary following from this principle is that some-
times one needs to tradeoff security for simplicity of the de-
sign. Below we discuss ﬁve other principles, which further
help achieve the goal of usable access control. The follow-
ing ﬁve principles can be viewed as “minor” principles for
achieving the overarching goal set by the ﬁrst principle.
Principle 2 Provide policy, not just mechanism.
Raymond discussed in his book [19] the topic of “what
UNIX gets wrong” in terms of philosophy, and wrote “per-
haps the most enduring objections to Unix are conse-
quences of a feature of its philosophy ﬁrst made explicit
by the designers of the X windowing system. X strives to
provide ‘mechanism, not policy’. [...] But the cost of the
mechanism-not-policy approach is that when the user can
set policy, the user must set policy. Nontechnical end-users
frequently ﬁnd Unix’s profusion of options and interface
styles overwhelming.”
The mechanism-not-policy approach is especially prob-
lematic for security. A security mechanism that is very
ﬂexible and can be extensively conﬁgured is not just over-
whelming for end users, it is also highly error-prone. While
there are right ways to conﬁgure the mechanism to enforce
some desirable security policies, there are often many more
incorrect ways to conﬁgure a system. And the complexity
often overwhelms users so that the mechanism is simply not
enabled.
This mechanism-not-policy philosophy is implicitly
used in the design of many MAC systems for operating
systems. For example, systems such LIDS, systrace, and
SELinux all aim at providing a mechanism that can be used
to implement a wide range of policies. While a mechanism
is absolutely necessary for implementing a protection sys-
tem, having only a low-level mechanism is not enough.
Principle 3 Have a well-deﬁned security objective.
The ﬁrst step of designing a policy is to identify a secu-
rity objective, because only then can one make meaningful
tradeoffs between security and usability. To make trade-
offs, one must ask and answer the question: if the policy
model is simpliﬁed in this way, can we still achieve the se-
curity objective? A security objective should identify two
3
things: what kind of adversaries the system is designed to
protect against, i.e., what abilities does one assume the ad-
versaries have, and what security properties one wants to
achieve even in the presence of such adversaries. Often
times, MAC systems do not clearly identify the security ob-
jective. For example, achieving multi-level security is often
identiﬁed together with defending against network attacks.
They are very different kinds of security objectives. History
has taught us that designing usable multi-level secure sys-
tems is extremely difﬁcult, and it seems unlikely that one
can build a usable access control system that can achieve
both objectives.
Principle 4 Carefully design ways to support exceptions in
the policy model.
Given the complexity of modern operating systems and
the diverse scenarios in which computers are used, no sim-
ple policy model can capture all accesses that need to be
allowed, and, at the same time, forbid all illegal accesses.
It is thus necessary to have ways to specify exceptions in
the policy model. The challenges lie in designing the policy
model and the exception mechanisms so that the number of
exceptions is small, the exceptions are easy and intuitive to
specify, the exceptions provide the desired ﬂexibility, and
the attack surface exposed by the exceptions is limited. Lit-
tle research has focused on studying how to support excep-
tions in an MAC model. As we will see, much effort in
designing UMIP goes to designing mechanisms to support
exceptions.
Principle 5 Rather than trying to achieve “strict least priv-
ilege”, aim for “good-enough least privilege”.
It is widely recognized that one problem with existing
DAC mechanisms is that it does not support the least privi-
lege principle [20]. For example, in traditional UNIX access
control, many operations can be performed only by the root
user. If a program needs to perform any of these operations,
it needs to be given the root privilege. As a result, an at-
tacker can exploit vulnerabilities in the program and abuse
these privileges. Many propose to remedy the problem by
using very-ﬁne-grained access control and to achieve strict
least privilege. For example, the guiding principles for de-
signing policies for systems such as SELinux, systrace, and
AppArmor is to identify all objects a program needs to ac-
cess when it is not under attack and grants access only to
those objects. This approach results in a large number of
policy rules. We believe that it is sufﬁcient to restrict privi-
leges just enough to achieve the security objective; and this
enables one to design more usable access control systems.
This principle can be viewed as a corollary of Principle 1.
We state it as a separate principle because of the popularity
of the least privilege principle.
Principle 6 Use familiar abstractions in policy speciﬁca-
tion interface.
Psychological acceptability is one of the eight principles
for designing security mechanisms identiﬁed by Salzer and
Schroeder [20]. They wrote “It is essential that the human
interface be designed for ease of use, so that users rou-
tinely and automatically apply the protection mechanisms
correctly. Also, to the extent that the user’s mental image of
his protection goals matches the mechanisms he must use,
mistakes will be minimized. If he must translate his image of
his protection needs into a radically different speciﬁcation
language, he will make errors.” This entails that the policy
speciﬁcation interface should use concepts and abstractions
that administrators are familiar with. This principle is vio-
lated by systems such as systrace and SELinux.
3 The UMIP Model
We now introduce the Usable Mandatory Integrity Pro-
tection (UMIP) model, which was guided by the principles
identiﬁed in Section 2. While the description of the UMIP
model in this section is based on our design for Linux, we
believe that the model can be applied to other UNIX vari-
ants with minor changes. While some (but not all) ideas
would be applicable also to non-Unix operating systems