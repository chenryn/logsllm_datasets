Summary of method: Users efﬁciently verify short proofs
that the certiﬁcate prover is honest in respect of the data
of concern to the user (her own certiﬁcates and those of
her associates). An auditor monitors larger proofs that the
certiﬁcate prover is maintaining data structures consistently.
4 Application to email
The ideas of the preceding sections imply a way to manage
email encryption key certiﬁcates which yields a system for
end-to-end email encryption enjoying high degrees of security
and the promise of user friendliness.
The core idea is that the email provider can at once be the
certiﬁcate authority for its users, the maintainer of the CA log,
and also the provider of storage for encrypted email. By using
(our extension of) certiﬁcate transparency, the provider acting
in this way is not required to be trusted by users.
Although our provider is not required to be trusted, we
assume it is not totally malicious either. Service providers
today are large corporations, such as Google, Amazon, and
Microsoft; they should not be trusted, although of course they
do make great efforts to protect users’ data from third-party
attackers, and they have much to lose if those users take
their custom elsewhere. The email system we detail below
uses certiﬁcate transparency to ensure that the service provider
cannot cheat without leaving evidence of its having cheated;
moreover, that evidence is
•
•
•
Persistent: the service provider cannot avoid leaving
it, and cannot erase it;
Readily veriﬁable: one can see that the evidence is
indeed evidence that the service provider has cheated;
Transferable: the evidence is meaningful to arbitrary
observers, not just to the victim.
More precisely, the provider could, if it wished, certify a
bogus key for a user, and then decrypt subsequent mail for
the user. However, because this would be quickly detected,
the provider will not launch such an attack. If the provider is
a large organisation with a reputation to protect, it will not
launch any attacks that could lead to evidence of its cheating.
4.1 The protocol
A user is assumed to have a mail provider (MP) that
provides an email address and sending/receiving services (such
as SMTP and IMAP), as well as email storage. The user
also subscribes to a certiﬁcate prover service (CP). CP is a
CA which maintains an certiﬁcate issuance and revocation
transparency (CIRT) log of its certiﬁcates. In practice (as
indicated above), we expect MP and CP to be the same
provider. However, a user wishing to preserve an existing
email address with an existing MP could use the services of a
separate CP.
In brief, the protocol works as follows:
•
Users have private/public keys, which are created and
managed by the client email browser application.
CP certiﬁes the users’ public keys, and maintains a
database relating each public keys and email address4.
It uses CIRT to maintain an append-only log of the
certiﬁcates it issues and revokes.
•
Users’ software automatically requests the log hashes and
requests and validates proofs of extension and certiﬁcate
currency, as detailed in the following sections.
4.1.1 Sign-up, sending, and receiving mail:
Alice signs up: Assume that Alice has downloaded an ap-
propriate application, or installed an extension in her Out-
look/Thunderbird, or is using an appropriately conﬁgured web
app. For simplicity, we refer to Alice’s client program as the
application. At sign-up time, Alice’s client software registers
with CP her new or existing email address that she has with
MP; then it creates her secret and public keys, and stores them
in encrypted form with CP. The key for this encryption is noted
k below. In more detail:
1)
The application fetches current h(db) from CP, and
stores it.
4Storing email addresses in the clear may be undesirable, for privacy and
anti-spam reasons. To avoid this, the database and the logs and accompanying
proofs can have hashes of addresses instead of real addresses.
9
2)
3)
4)
5)
6)
Alice enters user-name, say “PI:EMAIL”,
and chooses a new password pw. The software
chooses an encryption key k, which is stored securely
on Alice’s device. (Alternatively, to avoid storing k on
the device, the authentication password pw and key
k could be derived from a strong passphrase chosen
by the user.)
CP creates an account for Alice, with user name
“PI:EMAIL” and password pw.
The
pk Alice, sk Alice.
The
(Alice, pk Alice,{h(db), sk Alice, . . .}k ) with CP.
The application makes a random check of log con-
sistency, as detailed in §3.1.
application
application
creates
public
stores
key
pair
In these steps, Alice’s application stores her encrypted secret
keys with CP, along with the current snapshot of the hash of
the log which is also in the encrypted package. This is used
later to verify that the log is correctly operated “append-only”,
and to prevent roll-back attacks in which CP sends Alice old
versions of her cached information.
Alice sends email message to Bob:
1)
2)
3)
4)
5)
6)
7)
8)
and
requests
Prior to authenticating Alice to CP, Alice’s applica-
tion fetches current h(db0) from CP.
The application retrieves its locally stored h(dbs).
Optionally, it requests proof that h(dbs) v h(db0),
and veriﬁes the proof. (This veriﬁcation is not neces-
sary, since if it fails then a later veriﬁcation will fail
too; but if we do it now we detect any misbehaviour
by CP slightly earlier.)
Alice
veriﬁes
cert(Alice, pk Alice) is current in db0.
The application authenticates Alice and fetches
(Alice,{h(db), pk Alice, sk Alice, . . .}k ) from CP.
The application requests and veriﬁes proof
that
h(dbs) v h(db) and h(db) v h(db0). The application
replaces its locally stored h(dbs) with h(db0).
The application ﬁnds pk Bob in db0 and requests and
veriﬁes currency proof.
The application encrypts message for Bob with pk Bob
and sends it to him.
The application makes a random check of log con-
sistency, as detailed in §3.1.
proof
that
Step 1 and 2 ensure that CP is still maintaining the log in
append-only fashion. In step 3, Alice’s application veriﬁes that
CP is correctly maintaining her certiﬁcate. Step 5 ensures that
the locally stored snapshot dbs is not later than the db stored
in the user’s account (db may in fact be later than dbs if the
user has checked her email on a different device, and thereby
updated db); and that the db stored in the account is prior to
the current db0. These two checks prevent roll-back attacks,
and attacks based on improper maintainance by CP of the log.
Bob receives mail from Alice: This process is similar. Bob’s
application retrieves his versions of h(dbs), h(db), and h(db0),
and:
10
•
•
•
•
checks h(dbs) v h(db) v h(db0).
checks (Bob, pk Bob) is correct in db0.
gets pk Alice from db0, and requests currency proof.
decrypts Alice’s message and checks Alice’s signa-
ture5, if present.
4.2 Usability considerations
The system we describe here appears to have good usability
properties. Just as a web user is in practice shielded from the
requirement to have any real understanding of public keys and
certiﬁcates, with these ideas an encrypted-email user can avoid
having to understand the complexities of S/MIME and PGP.
To use end-to-end encrypted mail that follows these ideas,
users will download and install the application (or browser
extension). As with any software, the user must download it
from a trusted source. The user launches the software, and
conﬁgure it to access their existing mail account (or set up a
new account). This step is the same as conﬁguring any mail
software.
When the user starts her email browser, it optionally shows
one or more icons (or perhaps “lights”; see Figure 8) indicating
the result of a consistency check of the service provider. Each
icon corresponds to the result of a check made by an auditor
that the user has subscribed to. The icon will display a visual
representation (for example, the light is coloured green or red)
indicating “healthy” or “problem”. The user can sign up to
whatever auditor he likes, by appropriately conﬁguring the
browser. The user can be his own auditor.
To send a message, the user enters the email address as
usual, assisted by a contacts manager and autocompletion in
the usual way. It’s vital to be sure to send the mail to the
intended address, since the address determines the encryption
key that the application will select (and verify the proofs
about). This is the counterpart in PGP of being sure to have
the right public key in her keychain with the right trust level in
its signers, except here it is something the user can understand.
It is natural to users that if they send a message to the wrong
recipient, then conﬁdentiality of the message may be lost.
The application handles recipients for whom there are no
public keys (in this case the log produces a proof of absence
of any certiﬁcate for that user6). The application displays by
means of a visual indicator (e.g., by colouring the address)
whether the message to that recipient will be encrypted or
not.
In the envisioned GUI, it is anticipated that there will be
no encrypt button and no decrypt button. Messages will be
encrypted or decrypted automatically in the cases in which the
CIRT infrastructure reports an appropriate key. There will be
no user dialogues or messages that refer to keys or certiﬁcates.
These design decisions will have to be considered carefully
and evaluated through user trials, since research shows that
automatic encryption may be confusing to users [45].
5We didn’t detail how the mail system supports digital signatures, but of
course they’re readily implemented too.
6Note that a downgrading attack is impossible: absence is not failure to
prove presence, but is a proof of absence.
Fig. 8. Email user interface. Visual symbols and/or colours show whether the email will be encrypted for the recipient. On the right, some auditor reports are
available showing the correctness status of CP’s log.
malicious
but
malicious
cautious
but
semi-honest
honest
curious;
honest
Fig. 9. A malicious provider is assumed to be willing to use any available
strategy to attack, no matter what the consequence. A malicious but cautious
provider is assumed to launch no attacks that would leave readily veriﬁable
evidence of the attack. An honest but curious provider is assumed to launch
no attacks that would leave any trace (whether veriﬁable or not); he conﬁnes
himself to passive attacks. An honest provider is assumed to launch no attacks.
4.3 Key and password management
As mentioned in the signing-up section of §4.1.1, there are
two options for arranging user authentication.
•
•
Users’ passwords are high-entropy. In this option, the
user’s password pw is a high-entropy password, and
not disclosed to the server. The user authenticates to
server with kdf (pw, 1) for a suitable key derivation
function kdf, and uses k = kdf (pw, 2) as the key
purse encryption key. The password has to be high-
entropy to prevent the server (or anyone else) perform-
ing guessing attacks to obtain k.
Users’ passwords are known to the server. In this
option, the key purse encryption key k is stored on the
user’s device. The password need not be high-entropy
because the server can prevent on-line guessing at-
tacks.
These two alternatives are fundemantal to any cloud com-
puting application in which users have encryption keys which
are conﬁdential from the cloud provider; Wuala [46] and
ConﬁChair [47] are examples, and their designers have the
same two options.
4.3.1 High entropy password: This option is the most
ﬂexible, since the user can access the services from any device
without needing to provision it with the key purse encryption
key k. The main disadvantage, however, is that the server can
try ofﬂine guessing attack on pw in order to derive k.
If users want to change their password, this can be done
easily: the client application need only decrypt and re-encrypt
key purse, using the keys derived from the old and new
passwords respectively.
If a user loses her password, the system can’t offer any
recovery mechanism (as in Wuala [46]). At best, the user can
prove ownership of the account by out-of-band means; this
will allow her to revoke her public key and re-initialise the
account, but she won’t have access to her existing email store.
4.3.2 Device key: This option is more secure, but it requires a
means to migrate k to new devices. We detail such a protocol
in Figure 10, based on SPEKE [48].
Requests from a user to change her password are handled
by the usual means; requests to change the k are handled by
decrypting the key purse with the old k, and encrypting with
the new one. In the case of a lost password, the usual kind of
recovery mechanisms can be used.
If the key k is lost, then the user loses access to their
historic data, but can use knowledge of their password to
prove ownership of the account; as above, this will allow her
to revoke her public key and re-initialise the account. Note,
however, that since the user will typically have k on multiple
devices, it is unlikely that she loses it completely.
5 Conclusions