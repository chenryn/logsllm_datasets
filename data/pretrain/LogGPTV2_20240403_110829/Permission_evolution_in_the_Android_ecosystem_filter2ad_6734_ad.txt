added back, though these instances are much less frequent.
Micro patterns. Some Dangerous permissions appear to be
confusing developers. For example, the location permissions
ACCESS_COARSE_LOCATION and ACCESS_FINE_LOCATION, pro-
vide diﬀerent levels of location accuracy, on GSM/WiFi po-
sition and GPS location, respectively. Location tracking has
been heavily debated because it could possibly be used to
violate the user’s privacy. We found that app developers
handled the adding and deleting of these Dangerous loca-
tion permission in an interesting way; to reveal the under-
lying evolution patterns of used by the Dangerous location
permissions, we have done a case study of micro-patterns on
two widely used location permissions, ACCESS_COARSE_LOCA-
TION and ACCESS_FINE_LOCATION. We found that, although
the most frequent macro evolution pattern of location per-
mission is 0→1, the micro evolution patterns of the location
permissions are quite diverse.
for the location permission alone. For instance, 0→Both→Fine
In Table 10, we tabulate the micro-patterns we observed
38
Micro pattern
Both
Fine→Both
Fine→Coarse
Coarse→Both
0→Both
0→Fine
0→Coarse
0→Fine→Both
0→Both→Fine
0→Both→Coarse
0→Fine→0→Fine
Frequency
6.67%
10.00%
3.33%
10.00%
20.00%
10.00%
26.70%
3.33%
3.33%
3.33%
3.31%
Table 10: Micro evolution patterns for the location
permissions; Fine represents the ACCESS_FINE_LOCA-
TION permission, Coarse represents the ACCESS_COARSE_
LOCATION permission, and Both means both Fine and
Coarse are used.
(cid:3)(cid:4)
(cid:19)
(cid:16)
(cid:17)
(cid:13)
(cid:19)
(cid:19)
(cid:13)
(cid:15)
(cid:18)
(cid:10)
(cid:7)
(cid:3)(cid:2)
(cid:1)
(cid:14)
(cid:8)
(cid:15)
(cid:18)
(cid:17)
(cid:6)
(cid:1)
(cid:11)
(cid:17)
(cid:1)
(cid:18)
(cid:10)
(cid:9)
(cid:15)
(cid:20)
(cid:6)
(cid:4)
(cid:2)
(cid:2)
(cid:3)(cid:9)(cid:15)(cid:4)(cid:10)(cid:13)
(cid:2)(cid:6)(cid:11)(cid:6)(cid:14)(cid:5)(cid:6)(cid:12)(cid:11)
(cid:1)(cid:6)(cid:8)(cid:9)(cid:7)(cid:14)(cid:14)(cid:11)
(cid:4)
(cid:3)(cid:2)
(cid:3)(cid:4)
(cid:6)(cid:20)(cid:15)(cid:9)(cid:10)(cid:18)(cid:1)(cid:17)(cid:11)(cid:1)(cid:5)(cid:8)(cid:16)(cid:12)(cid:10)(cid:18)(cid:17)(cid:20)(cid:19)(cid:1)(cid:7)(cid:10)(cid:18)(cid:15)(cid:13)(cid:19)(cid:19)(cid:13)(cid:17)(cid:16)(cid:19)
Figure 5: Permission trajectories for popular apps.
means both location permissions are used at ﬁrst, then the
ACCESS_COARSE_LOCATION permission is deleted in a later
version of the app. 0→Fine→0→Fine shows the app added
ACCESS_FINE_LOCATION at ﬁrst, dropped it in a subsequent
version, and ﬁnally, added back again. Though the table in-
dicates several micro-patterns, note that using both location
permissions dominates, with 50% of the total, which shows
that more and more apps tend to include both location per-
missions for location tracking. We are able to make two
observations. First, evolution patterns requesting Danger-
ous permissions clearly show the struggling balance between
app usability and user privacy during the evolution of apps.
Second, the patterns reveal that developers of third-party
apps may be unclear with the correct usages of the Danger-
ous location permissions, which highlights the importance
for the platform to be more clear on how to properly handle
Dangerous permissions.
Permission trajectories. Due to the observed diverse per-
mission evolution patterns, we plot the number of Normal
against Dangerous permissions to visualize trajectories as
apps evolve. We found many interesting trajectories, and
highlight three, e.g., Facebook (red), KakaoTalk (black) and
NetQin (blue), in Figure 5. Facebook added Dangerous per-
missions in great numbers early on, but recently they have
removed many and instead added more slowly. Both NetQin
and KakaoTalk continue to add permissions from either one
permission level or both permission levels with each new ver-
sion that is released. These diverse trajectories of popular
apps again highlight the need for the the platform to provide
Micro pattern
Legitimate →Over
Over→Legitimate
Over→Legitimate→Over
Over→Legitimate→Over→Legitimate
Over→Legitimate→Over→Legitimate→Over
Frequency
58.57%
32.14%
7.86%
0.71%
0.71%
Table 11: Evolution patterns of the privilege levels
of the stable dataset, where Legitimate represents le-
gitimate privilege and Over represents overprivilege.
Permission
GET TASKS
MODIFY AUDIO SETTINGS
WAKE LOCK
NFC
GET ACCOUNTS
Protection level
Dangerous
Dangerous
Dangerous
Dangerous
Normal
Table 12: Most added permissions
Legitimate→Over (58.57%) subset of apps.
from the
better references of Android permissions to developers.
5.4 Apps Are Becoming Overprivileged
Extra permission usage may lead to overprivilege, a situa-
tion in which an app requests the permission, but never uses
the resource granted. This could increase vulnerabilities in
the app and raise concern of security risks. In this section,
we investigate the privilege patterns to determine whether
Android apps became overprivileged during their evolution.
To detect overprivilege, we ran the Stowaway [8] tool on
the stable dataset (1,703 app versions). As shown in Figure
7, we found that 19.6% of the newer versions of apps be-
came overprivileged as they added permissions, and 25.2%
of apps were initially overprivileged and stayed that way
during their evolution. Although the overall tendency is to-
wards overprivilege, we could not ignore the fact that 11.6%
of apps decreased from overprivileged to legitimate privilege,
a positive eﬀort to balance usability and privacy concerns.
In addition, similar to the evolution patterns of permis-
sion usage, we also study the evolution patterns of over-
privilege status for each app; we present the results in Ta-
ble 11. We found that the patterns Legitimate→Over and
Over→Legitimate dominate at 58.57% and 32.14%, respec-
tively. However, like in the patterns of permission usage,
we also found other diverse patterns during the evolution
of apps, which again shows that there may be confusion for
third-party developers when deciding on what permissions
to use for their app.
In Table 12 and 13, we further reﬁne the observations to
show the kinds of permissions involved in the dominating
patterns: we observe that Dangerous permissions are the
major source that causes an app to be overprivileged, which
again emphasizes that developers should exercise more care
when requesting Dangerous permissions.
6. PRE-INSTALLED APPS
Pre-installed apps have access to a richer set of higher-
privileged permissions, e.g., at the Signature and signa-
tureOrSystem levels, compared to third-party apps, which
gives pre-installed apps access to more personal information
on the device [11]. Thus, we should investigate how An-
droid permissions are used in pre-installed apps. We con-
ducted a permission-change analysis for pre-installed apps
Permission
Protection level
READ PHONE STATE
ACCESS COARSE LOCATION
WRITE EXTERNAL STORAGE
ACCESS MOCK LOCATION
VIBRATE
Dangerous
Dangerous
Dangerous
Dangerous
Normal
Table 13: Most dropped permissions from the
Over→Legitimate (32.14%) subset of apps.
p
p
A
r
e
P
s
n
o
s
s
m
r
e
P
i
i
f
o
#
e
g
a
r
e
v
A
5
4
3
2
1
0
Stable
Preinstalled
Sig or Sys
Normal Dangerous
Sig
Protection Level
Figure 6: Average number of permissions per app,
for each protection level,
from stable and pre-
installed datasets.
in a manner similar to the stable dataset. We present the
results in Figure 4. Figures 4(a) and 4(b) indicate that
permission usage is relatively constant, e.g., 62.61% of pre-
installed apps do not change their permissions at all, which
is signiﬁcant when compared to our third-party apps with
only 15.68%. Further, from Figure 4(c) and 6, pre-installed
apps request many more Signature and signatureOrSystem
level permissions than third-party apps, while at the same
time requesting nearly just as many Normal and Dangerous
level permissions. This shows that pre-installed apps have
a much higher capability to penetrate the smartphone. In-
terestingly, the vendors also have the ability to deﬁne their
own permissions inside the platform when they customize
the Android platform for their devices. For example, HTC
deﬁnes its own app update permission, HTC_APP_UPDATE.
The power of pre-installed apps requires great responsibil-
ity by vendors to ensure that this power is not abused. On
one hand, vendors are able to customize pre-installed apps
to take full advantage of all the hardware capabilities of the
device, as well as create a brand-personalized look-and-feel
to enhance user experience. On the other hand, users can-
not opt out of pre-installed apps, and in most cases, cannot
uninstall the pre-installed apps, which raises the question:
why should users be forced to trust pre-installed apps? Hin-
dering that trust is our ﬁnding that, despite being developed
by vendors, 66.1% of pre-installed apps were overprivileged.
What if the power of pre-installed apps is used against the
user with malicious intent? For example, the marred pre-
installed app HTCLogger and other reported security compro-
mised apps have already indicated such security risks do ex-
ist and can signiﬁcantly damage the smartphone and/or the
user data [5, 11]. The vendors’ Signature and signature-
OrSystem level permissions can be exploited by malicious
apps to do an array of damaging actions, such as wiping
out user data, sending out SMS messages to premium num-
bers, recording user conversations, or obtaining the device
location data of the device [11].
As we analyzed the evolution of Android platform permis-
39
 Legitimate to
Overprivileged
      19.6%
   Unchanged
(Overprivileged)
         25.2%
Overprivileged
 to Legitimate
      11.6%
Unchanged
(Legitimate)
     43.6%
Figure 7: Overprivilege status and evolution in the
stable dataset.
sions, it was interesting to see the evolution trends beneﬁt
vendors, rather than users. With the power vendors have in
pre-installed apps, developers of pre-installed apps should
be more careful in their development as they represent the
trusted computing base (TCB) of the Android ecosystem.
Up until now, there has not been any clear regulations or
boundary deﬁnitions that protect the user from pre-installed
apps. We argue that, since pre-installed apps have more
power and privilege over Android devices, vendors need to
realize their responsibility to protect the end-user.
7. RELATED WORK
None of the prior works on Android permissions has fo-
cused on understanding how Android permissions and their
use evolve in the Android ecosystem.
Android permission characterization and eﬀective-
ness. Barrera et al. [9] introduced a self-organizing method
to visualize permissions usage in diﬀerent app categories. A
comprehensive usability study of Android permissions was
conducted through surveys in order to investigate Android
permissions’ eﬀectiveness at warning users, which showed
that current Android permission warnings do not help most
users make correct security decisions [6]. Chia et al. [13]
focused on the eﬀectiveness of user-consent permission sys-
tems in Facebook, Chrome, and Android apps; they have
shown that app ratings were not a reliable indicator of pri-
vacy risks.
Permission-related Android security. Enck et al. [17]
presented a framework that read the declared permissions
of an application at install time and compared it against a
set of security rules to detect potentially malicious appli-
cations. Ongtang et al. [12] described a ﬁne-grained An-
droid permission model for protecting applications by ex-
pressing permission statements in more detail. Felt et al. [8]
examined the mapping between Android API’s and permis-
sions and proposed Stowaway, a static analysis tool to detect
over-privilege in Android apps. Permission re-delegation at-
tacks were shown to perform privileged tasks with the help
of an app with permissions [7]. Grace et al. [11] used Wood-
pecker to examined how the Android permission-based secu-
rity model is enforced in pre-installed apps and stock smart-
phones. Capability leaks were found that could be exploited
by malicious activities. DroidRanger was proposed to detect
malicious apps in oﬃcial and alternative markets [19]. Zhou
et al. characterized a large set of Android malwares, e.g.,
accumulating fees on the devices by subscribing to premium
services by abusing SMS related Android permissions [18].
An eﬀective framework was developed to defend against
privilege-escalation attacks on devices [15].
8. CONCLUSION
We have investigated how Android permission and their
use evolve in the Android ecosystem via a rigorous study
on the evolution of the platform, third-party apps, and pre-
installed apps. We found that the ecosystem is becoming
less secure and oﬀer our recommendations on how to remedy
this situation. We believe that our study is beneﬁcial to
researchers, developers, and users, and that our results have
the potential to improve the state of practice in Android
security.
Acknowledgements
This work was supported in part by National Science Foundation
award CNS-1064646, by a Google Research Award, by ARL CTA
W911NF-09-2-0053, and by DARPA SMISC Program W911NF-
12-C-0028.
9. REFERENCES
[1] Freewarelovers, May 2012.
http://www.freewarelovers.com/android.
[2] Google Play. https://play.google.com/store, May 2012.
[3] Android. Android-deﬁned Permission Category.
http://developer.android.com/reference/android/Manifest.
permission group.html, May 2012.
[4] Android Developer. Android API.
http://developer.android.com/guide/appendix/api-levels.html,
May 2012.
[5] Android Police. Massive Security Vulnerability In HTC
Android Devices.
http://www.androidpolice.com/2011/10/01/massive-security-
vulnerability-in-htc-android-devices, October 2011.
[6] A.P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin and D.
Wagner. Android Permissions: User Attention,
Comprehension, and Behavior . In SOUPS, 2012.
[7] A.P. Felt, H. Wang, A. Moshchuk, S. Hanna and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In
USENIX Security Symposium, 2011.
[8] A.P.Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android Permissions Demystiﬁed. In ACM CCS, 2011.
[9] D. Barrera, H.G. Kayacik, P.C. van Oorschot and A.
Somayaji. A Methodology for Empirical Analysis of
Permission-based Security Models and its Application to
Android. In ACM CCS, 2010.
[10] Google. Android Open Source Project, May 2012.
http://source.android.com/.
[11] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
Detection of Capability Leaks in Stock Android
Smartphones . In NDSS, 2012.
[12] M. Ongtang, S. McLaughlin, W. Enck and P. McDaniel.
Semantically Rich Application-Centric Security in Android.
In ACSAC, 2009.
[13] P. H. Chia, Y. Yamamoto, and N. Asokan. Is this App
Safe? A Large Scale Study on Application Permissions and
Risk Signals . In WWW, 2012.
[14] P. Pearce, A.P. Felt, G. Nunez and D. Wagner. AdDroid:
Privilege Separation for Applications and Advertisers in
Android . In ACM AsiaCCS, 2012.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A. Sadeghi,
and B.Shastry. Towards Taming Privilege-Escalation
Attacks on Android . In NDSS, 2012.
[16] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A
Study of Android Application Security. In USENIX
Security Symposium, 2011.
[17] W. Enck, M. Ongtang and P. McDaniel. On Lightweight
Mobile Phone Application Certiﬁcation. In ACM CCS,
2009.
[18] Y. Zhou and X. Jiang. Dissecting Android Malware:
Characterization and Evolution. In IEEE S &P, 2012.
[19] Y. Zhou, Z. Wang, Wu Zhou and X. Jiang. Hey, You, Get
oﬀ of My Market: Detecting Malicious Apps in Oﬃcial and
Alternative Android Markets . In NDSS, 2012.
40