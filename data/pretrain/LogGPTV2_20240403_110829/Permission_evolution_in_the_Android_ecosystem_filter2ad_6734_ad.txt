### Micro Patterns and Permission Evolution

**Micro Patterns:**
Certain dangerous permissions, such as `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION`, have been found to be confusing for developers. These permissions provide different levels of location accuracy—`ACCESS_COARSE_LOCATION` uses GSM/WiFi positioning, while `ACCESS_FINE_LOCATION` uses GPS. Location tracking has been a contentious issue due to potential privacy violations.

In our study, we observed that app developers handle the addition and deletion of these dangerous location permissions in various ways. To understand the underlying evolution patterns, we conducted a case study on two widely used location permissions: `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION`. Although the most common macro evolution pattern is 0→1 (adding one permission), the micro evolution patterns are more diverse.

For example, the pattern 0→Both→Fine indicates that both location permissions were initially added, but later, only `ACCESS_FINE_LOCATION` was retained. Table 10 summarizes the observed micro-patterns and their frequencies.

| Micro Pattern | Frequency |
|---------------|-----------|
| Both          | 6.67%     |
| Fine→Both     | 10.00%    |
| Fine→Coarse   | 3.33%     |
| Coarse→Both   | 10.00%    |
| 0→Both        | 20.00%    |
| 0→Fine        | 10.00%    |
| 0→Coarse      | 26.70%    |
| 0→Fine→Both   | 3.33%     |
| 0→Both→Fine   | 3.33%     |
| 0→Both→Coarse | 3.33%     |
| 0→Fine→0→Fine | 3.31%     |

**Table 10: Micro Evolution Patterns for Location Permissions**

- **Fine**: Represents `ACCESS_FINE_LOCATION`
- **Coarse**: Represents `ACCESS_COARSE_LOCATION`
- **Both**: Indicates both `ACCESS_FINE_LOCATION` and `ACCESS_COARSE_LOCATION` are used

**Permission Trajectories:**
Given the diverse permission evolution patterns, we visualized the trajectories of Normal and Dangerous permissions over time. Figure 5 highlights the trajectories of popular apps like Facebook, KakaoTalk, and NetQin. For instance, Facebook initially added many Dangerous permissions but recently removed several, opting for a slower rate of addition. In contrast, NetQin and KakaoTalk consistently add permissions with each new version.

**Figure 5: Permission Trajectories for Popular Apps**

These diverse trajectories underscore the need for better guidance from the platform on how to properly manage Dangerous permissions. The data suggests that developers often struggle to balance app functionality with user privacy, highlighting the importance of clear guidelines.

### Overprivileged Apps

**Overprivilege:**
Extra permission usage can lead to overprivilege, where an app requests permissions but never uses the granted resources. This can increase vulnerabilities and raise security concerns. We investigated the privilege patterns of Android apps to determine if they became overprivileged during their evolution.

Using the Stowaway tool, we analyzed 1,703 app versions and found that 19.6% of newer versions became overprivileged, while 25.2% were initially overprivileged and remained so. However, 11.6% of apps transitioned from overprivileged to legitimate, indicating efforts to balance usability and privacy.

**Table 11: Evolution Patterns of Privilege Levels**

| Pattern | Frequency |
|---------|-----------|
| Legitimate → Over | 58.57% |
| Over → Legitimate | 32.14% |
| Over → Legitimate → Over | 7.86% |
| Over → Legitimate → Over → Legitimate | 0.71% |
| Over → Legitimate → Over → Legitimate → Over | 0.71% |

**Table 12: Most Added Permissions (Legitimate → Over Subset)**

| Permission | Protection Level |
|------------|------------------|
| GET TASKS | Dangerous |
| MODIFY AUDIO SETTINGS | Dangerous |
| WAKE LOCK | Dangerous |
| NFC | Dangerous |
| GET ACCOUNTS | Normal |

**Table 13: Most Dropped Permissions (Over → Legitimate Subset)**

| Permission | Protection Level |
|------------|------------------|
| READ PHONE STATE | Dangerous |
| ACCESS COARSE LOCATION | Dangerous |
| WRITE EXTERNAL STORAGE | Dangerous |
| ACCESS MOCK LOCATION | Dangerous |
| VIBRATE | Normal |

**Figure 7: Overprivilege Status and Evolution in the Stable Dataset**

- **Legitimate to Overprivileged**: 19.6%
- **Unchanged (Overprivileged)**: 25.2%
- **Overprivileged to Legitimate**: 11.6%
- **Unchanged (Legitimate)**: 43.6%

### Pre-Installed Apps

**Pre-Installed App Permissions:**
Pre-installed apps have access to higher-privileged permissions, such as Signature and signatureOrSystem, compared to third-party apps. This gives them greater access to personal information. We analyzed the permission changes in pre-installed apps and found that 62.61% of pre-installed apps do not change their permissions, which is significantly higher than the 15.68% for third-party apps.

**Figure 6: Average Number of Permissions per App by Protection Level**

- **Stable Dataset**
- **Pre-Installed Dataset**

Pre-installed apps request more Signature and signatureOrSystem level permissions, indicating a higher capability to penetrate the smartphone. Vendors also have the ability to define custom permissions, such as HTC's `HTC_APP_UPDATE`.

However, 66.1% of pre-installed apps were found to be overprivileged, raising concerns about trust and security. Malicious pre-installed apps, such as HTCLogger, have already demonstrated the potential for significant damage to user data and device integrity.

**Conclusion:**
Our study reveals that the Android ecosystem is becoming less secure, and we offer recommendations to address this. Our findings are valuable for researchers, developers, and users, and have the potential to improve Android security practices.

**Acknowledgements:**
This work was supported in part by the National Science Foundation, Google Research, ARL CTA, and DARPA SMISC Program.

**References:**
[1] Freewarelovers, May 2012.
[2] Google Play, May 2012.
[3] Android, May 2012.
[4] Android Developer, May 2012.
[5] Android Police, October 2011.
[6] Felt et al., SOUPS, 2012.
[7] Felt et al., USENIX Security Symposium, 2011.
[8] Felt et al., ACM CCS, 2011.
[9] Barrera et al., ACM CCS, 2010.
[10] Google, May 2012.
[11] Grace et al., NDSS, 2012.
[12] Ongtang et al., ACSAC, 2009.
[13] Chia et al., WWW, 2012.
[14] Pearce et al., ACM AsiaCCS, 2012.
[15] Bugiel et al., NDSS, 2012.
[16] Enck et al., USENIX Security Symposium, 2011.
[17] Enck et al., ACM CCS, 2009.
[18] Zhou and Jiang, IEEE S &P, 2012.
[19] Zhou et al., NDSS, 2012.