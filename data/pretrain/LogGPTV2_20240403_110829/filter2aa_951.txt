#BHUSA @BlackHatEvents
## Backdooring and Hijacking Azure AD Accounts by Abusing External Identities

### Speaker: Dirk-jan Mollema / @_dirkjan
- **Location**: The Netherlands
- **Role**: Hacker, Researcher, Founder at Outsider Security
- **Notable Tools**:
  - mitm6
  - ldapdomaindump
  - BloodHound.py
  - aclpwn.py
  - Co-author of ntlmrelayx
  - ROADtools
- **Blog**: dirkjanm.io
- **Twitter**: @_dirkjan

---

### Information Classification: General

#### Overview of Azure AD
- **Azure AD**: Identity platform for Office 365, Azure Resource Manager, and other Azure services.
- **Integration**: Can be used with any first/third-party application.
- **Scope**: This presentation does not cover Azure infrastructure/VMs.

---

### Terminology
- **Tenant**: A separate instance of Azure AD for an organization.
  - Most organizations have one primary tenant.
  - Identified by a GUID and a `tenantname.onmicrosoft.com` domain.
  - Often identified by custom domains.
- **External Identity**: Any identity not managed by your tenant, such as another Azure AD tenant, Microsoft account, Google account, or just an email address.

---

### External Collaboration
- **Tenant A (Resource Tenant)**: Hosts resources.
- **Tenant B (Home Tenant)**: Home of the guest user.
- **Guest Account**: Linked to a home tenant account.

---

### Research Questions
- **Invite Flow**: How does the invite process work?
- **Account Linking**: How are accounts linked to different tenants?
- **Abuse Potential**: What are the possibilities for abusing this system?

---

### Test Setup
- **Tenants**:
  - **Primary**: Iminyour.cloud (iminyourcloud.onmicrosoft.com)
  - **External**: Crosstenantdev (crosstenantdev.onmicrosoft.com)
- **Configuration**: No specific B2B trust configured, all Azure AD defaults.

---

### Azure AD Information Resources
- **Microsoft Graph**: Official API for everything Microsoft 365 (including Azure AD).
- **Azure AD Graph**: Lower-level API for Azure AD only.
- **Internal Versions**: Possibility to use internal versions to gather more information.
- **Azure AD Portal**: May use MS Graph or AAD Graph, including internal versions.
- **In This Talk**: Mix of AAD Graph and MS Graph, using ROADrecon (part of ROADtools) as a front-end for AAD Graph.

---

### Invite Acceptance and Audit Log
- **Guest Account**: After acceptance, the link is based on the "netid" property in the home tenant.
- **Linking Guest Accounts**: Uses the `alternativeSecurityIds` and `netid` properties.

---

### Inviting Users Using AAD Graph
- **API Reference**: [AAD Invite User APIs](https://github.com/projectKudu/ARMClient/wiki/AAD-Invite-User-Apis)
- **Requirements**:
  - Needs external users' `netid`.
  - Can be queried using AAD Graph.
  - Can be extracted from access token (`puid` claim).
  - Needs an invite ticket, which can be queried using AAD Graph or ROADrecon.

---

### Redeeming Invites via AAD Graph
- **Redeem Invite via API**.
- **Issues**:
  - Any user in the tenant can redeem invites.
  - None of the information is verified.
  - Can use any "accepted as" email.
  - Can link it to any external account in any directory.
  - Invite tickets can be queried by any user in the tenant.

---

### Hijacking Invites
- **Query Using AAD Graph**:
  ```http
  https://graph.windows.net/myorganization/users?api-version=1.61-internal&$filter=userState eq 'PendingAcceptance'&$select=userPrincipalName,inviteTicket,userType,invitedAsMail
  ```
- **Query NetID from Rogue Account**:
  ```http
  https://graph.windows.net/myorganization/users/PI:EMAIL/?api-version=1.61-internal&$select=userPrincipalName,netId
  ```

---

### Impact Scenarios
- **External Identities**: Used for managing Azure subscriptions in other tenants and for external suppliers/MSP accounts.
- **Leaving Employee**: Could add a guest account to retain access.
- **UI Flow**: Directly assign roles to invited accounts, potentially leading to privilege escalation.
- **Bypasses**: Allowlist of external collaboration domains.

---

### Hunting for Abuse
- **Audit Logs Query**:
  ```kql
  AuditLogs
  | where OperationName =~ "Update user"
  | where Result =~ "success"
  | mv-expand target = TargetResources
  | where tostring(InitiatedBy.user.userPrincipalName) has "@" or tostring(InitiatedBy.app.displayName) has "@"
  | extend targetUPN = tostring(TargetResources[0].userPrincipalName)
  | extend targetId = tostring(TargetResources[0].id)
  | extend targetType = tostring(TargetResources[0].type)
  | extend modifiedProps = TargetResources[0].modifiedProperties
  | extend initiatedUser = tostring(InitiatedBy.user.userPrincipalName)
  | mv-expand modifiedProps
  | where modifiedProps.displayName =~ "UserState"
  | mv-expand AdditionalDetails
  | where AdditionalDetails.key =~ "UserType" and AdditionalDetails.value =~ "Guest"
  | extend new_value_set = parse_json(tostring(modifiedProps.newValue))
  | extend old_value_set = parse_json(tostring(modifiedProps.oldValue))
  | where new_value_set[0] =~ "Accepted" and old_value_set[0] =~ "PendingAcceptance"
  | project-away old_value_set, new_value_set, modifiedProps
  ```
- **Copy/Paste Version**: [Gist](https://gist.github.com/dirkjanm/)

---

### External Identities in MS Graph
- **MS Graph vs. AAD Graph**: MS Graph shows less information than AAD Graph.
- **Modifying Identities**: The "identities" property can be modified with the correct privileges.

---

### Who Can Modify the Identities Attribute?
- **Global Admins**
- **User Administrators**
- **Apps with User.ManageIdentities.All privileges**
- **Users**: Can modify their own identities.

---

### Attack Scenarios
- **Temporary Account Access**: Limited scope access, for example, through device code phishing.
- **Application Takeover or URL Hijack**: With the appropriate scope.
- **Backdoor Account**: Add a new identity to backdoor an account.
- **Switching Tenants**: Sign in as the victim user and return the account to its original state.

---

### Extra Technique: Elevation of Privilege
- **Convert Existing User to B2B (Guest)**: User Administrator to Global Admin with a few clicks.
- **Caveat**: MFA will still kick in for the original account.

---

### Observations
- **MFA Caching**: In a fresh sign-in session where MFA was performed, MFA is not prompted every time we switch apps, suggesting caching in the login session.
- **Account Rebinding**: Invite an attacker as a guest, register MFA information, delete the guest account, and rebind the victim account to the attacker's identity.

---

### Attack Summary
- **MFA Information**: Cached in the session based on home tenant identity + target tenant combination.
- **Steps**:
  - Invite a guest account on the attacker's email address.
  - Register MFA information (cached in session).
  - Delete the guest account by leaving the organization.
  - Link the victim account to the attacker's account (either B2B link or via Email OTP).
  - Attacker logs in as the victim, including MFA claim, and adds their own MFA app.

---

### Actions for Defenders
- **Remove Guest Accounts**: Regularly remove guest accounts with unredeemed invites.
- **Lock Down Guest Invite Rights**: Lock down guest invite rights and guest access settings in Azure AD.
- **Hunt in Audit Logs**: Look for possible abuse of guest accounts.
- **Enforce MFA**: Enforce MFA across all apps instead of selectively.

---

### Fix Status
- **TBD**

---

### Questions
- **Contact**: PI:EMAIL

---

Thank you for attending #BHUSA @BlackHatEvents!