# Termination of Workflows

## Authors
Gloria Cravo, Jorge Cardoso  
Department of Mathematics and Engineering,  
University of Madeira, 9000-390 Funchal, Portugal.  
{gcravo, jcardoso}@uma.pt

## Abstract
A workflow is a set of activities typically organized using a graph structure with a single start and end point. It involves human participants and software applications responsible for carrying out the activities. Workflows are formal definitions of processes used to manage business processes such as sales order processing, article reviewing, and member registration. In this paper, we describe and analyze the behavior of workflows using graph theory to verify an important property: their termination. It is essential to formally verify if a workflow, such as a sales order processing, will eventually terminate and be completed. We verify the termination of workflows using a new approach based on what we call snapshot-based theory.

## 1. Introduction
In this paper, we describe and analyze the behavior of workflows using graph theory. A workflow is an abstraction of a business process consisting of one or more activities that need to be executed to complete the process (e.g., sales order processing, article reviewing, member registration). Activities are represented by vertices, and the partial ordering of activities is modeled by arcs, known as transitions. Each task in a workflow represents a unit of work to be executed by a computer program or a person. Workflows allow organizations to streamline and automate business processes, reengineer their structure, and increase efficiency while reducing costs.

In the last decade, significant advancements have been made in the development of theoretical foundations for workflow modeling, verification, and analysis. Several formal modeling methods have been proposed, including graph theory [8], State and Activity Charts [9], Event-Condition-Action rules [4,5], Petri Nets [1], Temporal Logic [2], Markov chains [7], and Process and Event Algebras [6,10].

Despite the existence of various formal methods, many well-known commercial workflow systems, such as TIBCO Workflow (www.tibco.com) and METEOR-S [8], have chosen to use graphs to model their workflows. While significant progress has been made in the theoretical foundations of workflow modeling, verification, and analysis (especially in the context of Petri Nets [1]), more research is needed, particularly in the modeling and analysis of workflows using graphs.

Therefore, in this paper, we present a formal framework based on graph theory to check the termination of workflows. Termination is a critical property because it is essential to know if a business process, such as a loan application or insurance claim, will eventually be completed. In our approach, we model workflows with tri-logic acyclic directed graphs and develop a formalism to verify the logical termination of workflows. Our formalism uses a snapshot-based methodology that captures the different behaviors a workflow may exhibit.

## 2. Logical Termination

### Definition 1
A workflow is a tri-logic acyclic directed graph \( WG = (T, A) \), where \( T = \{t_1, t_2, \ldots, t_n\} \) is a finite nonempty set of vertices representing workflow tasks. Each task \( t_i \) (i.e., a vertex) has an input logic operator (represented by \( \preceq t_i \)) and an output logic operator (represented by \( t_i \prec \)). An input/output logic operator can be the logical AND (•), OR (⊗), or XOR (⊕). The set \( A = \{a_1, a_2, \ldots, a_m\} \) is a finite nonempty set of arcs representing workflow transitions. Each transition \( a_i \), \( i \in \{1, \ldots, m\} \), is a tuple \( (t_k, t_l) \) where \( t_k, t_l \in T \). The transitions \( a_1 \) and \( a_n \) are tuples of the form \( (\epsilon, t_1) \) and \( (t_n, \epsilon) \), respectively. The symbols \( \epsilon \) and \( \epsilon \) represent abstract tasks indicating the entry and ending points of the workflow. We use the symbol \( a_i \) to reference the label of a transition, i.e., a transition \( a_i \in A \). The elements \( a_i \) are called Boolean terms and form the set \( A \).

An example of a workflow is presented in Figure 1. For more details and practical examples, see [3].

### Definition 2
The incoming transitions for task \( t_i \in T \) are the tuples of the form \( a_j = (x, t_i) \), \( x \in T \), \( a_j \in A \), and the outgoing transitions for task \( t_i \) are the tuples of the form \( a_l = (t_i, y) \), \( y \in T \), \( a_l \in A \).

### Definition 3
The incoming condition for task \( t_i \in T \) is a Boolean expression with terms \( a \in A \), where \( a \) is an incoming transition of task \( t_i \). The terms \( a \) are connected with the logical operator \( \preceq t_i \). If the task has only one incoming transition, then the condition does not have a logical operator.

### Definition 4
The outgoing condition for task \( t_i \in T \) is a Boolean expression with terms \( a \in A \), where \( a \) is an outgoing transition of task \( t_i \). The terms \( a \) are connected with the logical operator \( t_i \prec \). If the task has only one outgoing transition, then the condition does not have a logical operator.

### Definition 5
Given a workflow \( WG = (T, A) \), an Event-Action (EA) model for a task \( t_i \in T \) is an implication of the form \( t_i : f_E \Rightarrow f_C \), where \( f_E \) and \( f_C \) are the incoming and outgoing conditions of task \( t_i \), respectively. For any EA model \( t_i : f_E \Rightarrow f_C \), \( f_E \) and \( f_C \) always have the same Boolean value.

### Definition 6
Let \( WG \) be a workflow. The behavior of \( WG \) is described by its EA models according to the following rules:
1. The workflow starts its execution by asserting \( a_1 \) to true.
2. Let \( t_1 : a_1 \Rightarrow f_{C1} \). Then \( f_{C1} \) has the Boolean value of \( a_1 \), i.e., since the workflow starts its execution, \( f_{C1} \) is always true.
3. The workflow correctly terminates when \( a_n \) is asserted to true.

Since the behavior of a workflow is determined by its EA models, a natural concern is the exhaustive study of the EA models. We start by defining three different types of EA models.

### Definition 7
An EA model \( f_E \Rightarrow f_C \) is said to be simple if \( f_E = a_i \) and \( f_C = a_j \), \( i, j \in \{1, \ldots, m\} \), with \( i \neq j \).

### Definition 8
An EA model \( f_E \Rightarrow f_C \) is said to be complex if \( f_E = a_i \) and \( f_C = a_{j1} \phi a_{j2} \phi \ldots \phi a_{jk} \), or \( f_E = a_{i1} \phi a_{i2} \phi \ldots \phi a_{il} \) and \( f_C = a_j \), where \( \phi \in \{\otimes, •, \oplus\} \).

### Definition 9
An EA model \( f_E \Rightarrow f_C \) is said to be hybrid if \( f_E = a_{i1} \phi a_{i2} \phi \ldots \phi a_{il} \) and \( f_C = a_{j1} \psi a_{j2} \psi \ldots \psi a_{jk} \), where \( \phi, \psi \in \{\otimes, •, \oplus\} \).

### Theorem 10
A hybrid EA model \( f_E \Rightarrow f_C \) can be split into two derived equivalent complex EA models \( f_E \Rightarrow a^* \) and \( a^* \Rightarrow f_C \).

**Proof:**
Suppose that \( t_i : f_E \Rightarrow f_C \) is a hybrid EA model (Figure 2.a). Both \( f_E \) and \( f_C \) are Boolean terms with an AND (•), OR (⊗), or XOR (⊕). Let us create two auxiliary tasks \( t_i' \) and \( t_i'' \) and an auxiliary transition \( a_i' = (t_i', t_i'') \). Let \( a^* \) be the Boolean term associated with the auxiliary transition \( a_i' \), such that \( a^* \) has the same Boolean value as \( f_E \). Let \( t_i' : f_E \Rightarrow a^* \) and \( t_i'' : a^* \Rightarrow f_C \) be new EA models. Since \( a^* \) has the same Boolean value as \( f_E \), and consequently, \( f_C \) has its Boolean value depending on the Boolean value of \( a^* \), when we consider these new EA models instead of the initial hybrid EA model, the behavior of the workflow is not modified (Figure 2.b). Clearly, the new EA models \( f_E \Rightarrow a^* \) and \( a^* \Rightarrow f_C \) are complex, and thus the result is satisfied.

### Definition 11
A hybrid workflow is a workflow that contains hybrid EA models. A workflow is said to be non-hybrid if it contains only simple and complex EA models, i.e., no hybrid EA models exist.

### Example 12
The workflow from Figure 1 is non-hybrid.

### Definition 13
A hybrid workflow \( WG \) is said to be equivalent to a non-hybrid workflow \( WG' \) if \( WG' \) is obtained from \( WG \) by decomposing all hybrid EA models of \( WG \) into equivalent derived complex EA models.

### Theorem 14
A hybrid workflow can be transformed into an equivalent non-hybrid workflow.

**Proof:**
Follows immediately from Theorem 10 and Definition 13.

Since a hybrid workflow can be transformed into a non-hybrid workflow, in this paper, we will address only the study of non-hybrid workflows. When no ambiguity can arise, we will refer to non-hybrid workflows simply as workflows. As we will consider only non-hybrid workflows, the behavior of a workflow will depend on its complex and simple EA models.

A non-hybrid workflow can contain seven different EA model structures: AND-join, AND-split, XOR-join, XOR-split, OR-join, OR-split, and Sequence. Table 1 illustrates the structure of these seven different EA models.

These EA models can be classified as deterministic and non-deterministic. The AND-join, AND-split, XOR-join, OR-join, and Sequence models are deterministic, while XOR-split and OR-split are non-deterministic.

For any deterministic model \( t_u : f_E \Rightarrow f_C \), knowing that the Boolean value of the incoming condition \( f_E \) is true allows us to infer that all its outgoing transitions will be set to true. Consequently, in these cases, we know which task(s) will be executed after \( t_u \) (i.e., connected to \( t_u \)).

For any non-deterministic model \( t_u : f_E \Rightarrow f_C \), knowing that the Boolean value of the only incoming transition of \( f_E \) is true does not allow us to infer which outgoing transition(s) will be set to true. Nevertheless, we know that if \( f_E \) is true, then \( f_C \) is also true. Let us analyze each case individually.

1. **XOR-split:** In this case, if \( f_E \) is true, we just know that only one of the outgoing transitions \( a_{jr} \), \( r \in \{1, \ldots, l\} \), is true.
2. **OR-split:** In this case, if \( f_E \) is true, we only know that a non-empty subset of the outgoing transitions \( a_{jr} \), \( r \in \{1, \ldots, l\} \), are true.

In these two cases, knowing that \( f_E \) is true does not allow us to infer which task(s) will be executed after \( t_u \) (i.e., connected to \( t_u \)). Therefore, we call these models non-deterministic.

### Definition 15
A non-deterministic task is a task associated with a XOR-split or OR-split model (see Table 1).

### Definition 16
All transitions have a Boolean label \( a_i \) that references the transitions (Definition 1). Additionally, each outgoing transition of a task associated with a XOR-split or OR-split model has a snapshot Boolean variable denoted by \( a_i \), which is related to the non-determinism of the task.

### Definition 17
The non-deterministic task behavior \( tND(t_i) \) of a non-deterministic task \( t_i \) is the set of all snapshot Boolean variables associated with its outgoing transitions, i.e., \( tND(t_i) = \{a_{j1}, a_{j2}, \ldots, a_{jl}\} \mid t_i : f_E \Rightarrow f_C, f_E = a_i \) and \( f_C = a_{j1} \phi a_{j2} \phi \ldots \phi a_{jl} \), \( \phi \in \{\otimes, \oplus\} \).

### Definition 18
The non-deterministic workflow behavior, denoted by \( wND(WG) \), of a workflow \( WG \) is the set of all non-deterministic task behaviors of the workflow, i.e., \( wND(WG) = \{tND(t_{i1}), tND(t_{i2}), \ldots, tND(t_{ik})\} \), where \( t_{i1}, t_{i2}, \ldots, t_{ik} \in T \) are the non-deterministic tasks.

### Definition 19
Let \( t_i \) be a non-deterministic task. Let \( P \cup N \) be a partition of \( tND(t_i) \) such that \( P = \{a \in tND(t_i) \mid a \) is a snapshot Boolean variable asserted to true\} and \( N = \{a \in tND(t_i) \mid a \) is a snapshot Boolean variable asserted to false\}.