TERMINATIONOFWORKFLOWS
Glo´riaCravo,JorgeCardoso
DepartamentodeMatema´ticaeEngenharias,
UniversidadedaMadeira,9000-390Funchal,Portugal.
{gcravo,jcardoso}@uma.pt
ABSTRACT
Aworkflowisasetofactivitiesusuallyorganizedusingagraphstructurethathas
one beginning and one end. A workflow includes human participants and software
applicationsthathavetheresponsibilitytocarryoutactivities. Aworkflowisknown
to be the formal definition of the process used to manage business processes (e.g.,
sales order processing, article reviewing, member registration, etc). In this paper
we describe and analyze the behavior of workflows using graph theory to verify an
importantproperty: theirtermination. Itisessentialtoformallyverifyifaworkflow,
such as a sales order processing, will eventually terminate and be completed. We
verify the termination of workflows using a new approach based on what we call
snapshot-basedtheory.
1 Introduction
Inthispaperwedescribeandanalyzethebehaviorofworkflowsusinggraphtheory.
A workflow is an abstraction of a business process that consists of one or more ac-
tivities that need to be executed to complete a business process (for example, sales
order processing, article reviewing, member registration, etc). Activities are repre-
sentedwithverticesandthepartialorderingofactivitiesismodeledwitharcs,known
astransitions. Eachtaskofaworkflowrepresentsaunitofworktobeexecutedbya
computerprogramoraperson. Workflowsalloworganizationstostreamlineandau-
tomate business processes, reengineer their structure, as well as, increase efficiency
andreducecosts.
In the last decade, important advancements have been accomplished in the de-
velopment of theoretical foundations to allow workflow modeling, verification, and
analysis. Severalformalmodelingmethodshavebeenproposedtomodelworkflows,
suchasgraphtheory[8],StateandActivityCharts[9],Event-Condition-Actionrules
[4,5],PetriNets[1],TemporalLogic[2],Markovchains[7]andProcessandEvent
Algebras[6,10].
Despitetheexistenceofseveralformalmethodstomodelworkflows,avastnum-
berofwidelywell-knowncommercialworkflowsystems,suchasTIBCOWorkflow
(www.tibco.com) and METEOR-S [8], have decided to use graphs to model their
workflows.
While important advancements have been accomplished in the development of
theoreticalfoundationsforworkflowmodeling,verification,andanalysis(especially
in the context of Petri Nets [1]) more research is required especially with respect to
themodelingandanalysisofworkflowsusinggraphs.
Therefore,inthispaperwepresentaformalframework,basedongraphstheory,
to check the termination of workflows. Termination is an important property for
workflows because it is indispensable to know if a business process, such as a loan
application or insurance claim, will eventually be completed. In our approach we
model workflows with tri-logic acyclic directed graphs and develop a formalism to
verify the logical termination of workflows. Our formalism uses a snapshot-based
methodologywhichcapturesthedifferentbehaviorsthataworkflowmayhave.
2 Logical Termination
Definition1 Aworkflowisatri-logicacyclicdirectgraphWG=(T,A),whereT =
{t ,t ,...,t } is a finite nonempty set of vertices representing workflow tasks. Each
1 2 n
task t (i.e., a vertex) has an input logic operator (represented by  t) and an
i i
output logic operator (represented by t ≺). An input/output logic operator can be
i
the logical AND (•), the OR (⊗), or the XOR - exclusive-or - (⊕). The set A =
{a ,a ,a ,a ,...,a } is a finite nonempty set of arcs representing workflow transi-
  1 2 m
tions. Each transition a,i∈{1,...,m}, is a tuple (t ,t ) wheret ,t ∈T. The tran-
i k l k l
sitiona isatupleoftheform(,t )andtransitiona isatupleoftheform(t ,).
 1  n
The symbols  and  represent abstract tasks which indicate the entry and ending
point of the workflow, respectively. We use the symbol  to reference the label of a
transition,i.e.,a referencestransitiona,a ∈A.Theelementsa arecalledBoolean
i i i i
termsandformthesetA.
AnexampleofaworkflowispresentedinFigure1. Formoredetailsandpractical
examplessee[3].
Definition2 Theincomingtransitionsfortaskt ∈T arethetuplesoftheforma =
i j
(x,t),x∈T,a ∈A,andtheoutgoingtransitionsfortaskt arethetuplesoftheform
i j i
a =(t,y),y∈T,a ∈A.
l i l
Definition3 The incoming condition for task t ∈ T is a Boolean expression with
i
termsa∈A,whereaisanincomingtransitionoftaskt.Thetermsaareconnected
i
with the logical operator t. If the task has only one incoming transition then the
i
conditiondoesnothavealogicaloperator.
Figure1: Exampleofatri-logicacyclicdirectgraph(i.e.,aworkflow)
Definition4 The outgoing condition for task t ∈ T is a Boolean expression with
i
termsa∈A,whereaisanoutgoingtransitionoftaskt.Thetermsa areconnected
i
with the logical operatort ≺. If the task has only one outgoing transition then the
i
conditiondoesnothavealogicaloperator.
Definition5 GivenaworkflowWG=(T,A),anEvent-Action(EA)modelforatask
t ∈T is an implication of the formt : f  f , where f and f are the incoming
i i E C E C
and outgoing conditions of task t, respectively. For any EA model t : f  f , f
i i E C E
and f havealwaysthesameBooleanvalue.
C
Examplesoftheabovedefinitionscanbefoundin[3].
Definition6 Let WG be a workflow. The behavior of WG is described by its EA
models,accordingtothefollowingrules:
(1)Theworkflowstartsitsexecutionbyassertinga totrue.
(2)Lett :a  f .Then f hastheBooleanvalueofa ,i.e.,sincethework-
1  C1 C1 
flowstartsitsexecution, f isalwaystrue.
C1
(3)Theworkflowcorrectlyterminateswhena isassertedtotrue.
Since the behavior of a workflow is determined by itsEA models a natural con-
cern is the exhaustive study of the EA models. We start by defining three different
typesofEAmodels.
Definition7 An EA model f  f is said to be simple if f = a and f = a,
E C E i C j
i,j∈{,,1,...,m},withi= j.
Definition8 An EA model f  f is said to be complex if f = a and f =
E C E i C
a ϕa ϕ...ϕa ,or f =a ϕa ϕ...ϕa and f =a,whereϕ∈{⊗,•,⊕}.
j1 j2 jk E j1 j2 jk C i
Figure2: SplittingahybridEAmodelintotwoequivalentcomplexEAmodels
Definition9 AnEAmodel f  f is saidtobehybridif f =a ϕa ϕ...ϕa and
E C E i1 i2 il
f =a ψa ψ...ψa ,whereϕ,ψ∈{⊗,•,⊕}.
C j1 j2 jk
The study of simple EA models is very easy. Our concern is to study complex
and hybrid EA models. In the following result we establish a connection between
hybridandcomplexEAmodels.
Theorem10 A hybrid EA model f  f can be split into two derived equivalent
E C
complexEAmodels f a∗ anda∗ f .
E i i C
Proof. Supposethatt : f  f isahybridEAmodel(Figure2.a). Thenboth f and
i E C E
f areBooleantermswithanAND(•),anOR(⊗),oraXOR (⊕).Letuscreatetwo
C
auxiliary tasks t, t and an auxiliary transition a =(t, t). Let a∗ be the Boolean
i i i i i i
term associated with the auxiliary transition a, such that a∗ has the same Boolean
i i
value of f . Lett : f a∗ andt : a∗  f be new EA models. Since a∗ has the
E i E i i i C i
sameBooleanvalueof f and,asaconsequence, f hasitsBooleanvaluedepending
E C
on the Boolean value of a∗, when we consider these new EA models instead of the
i
initial hybrid EA model, the behavior of the workflow is not modified (Figure 2.b).
Clearly the new EA models f a∗ and a∗  f are complex and so the result is
E i i C
satisfied.
Definition11 A hybrid workflow is a workflow that contains hybrid EA models. A
workflowissaidtobenon-hybridifitcontainsonlysimpleandcomplexEAmodels,
i.e.,nohybridEAmodelsexist.
Example12 TheworkflowfromFigure1isnon-hybrid.
Definition13 AhybridworkflowWGissaidtobeequivalenttoanon-hybridwork-
flowWG ifWG isobtainedfromWGbydecomposingallhybridEAmodelsofWG
intoequivalentderivedcomplexEAmodels.
Theorem14 A hybrid workflow can be transformed into an equivalent non-hybrid
workflow.
Table1: EAModelsstructures
EAmodelstructure EAmodelname EAmodeltype
t :a •a •···•a a AND-join Complex
u i1 i2 ik l
t :aa •a •···•a AND-split Complex
u i j1 j2 jl
t :a ⊕a ⊕···⊕a a XOR-join Complex
u i1 i2 ik l
t :aa ⊕a ⊕···⊕a XOR-split Complex
u i j1 j2 jl
t :a ⊗a ⊗···⊗a a OR-join Complex
u i1 i2 ik l
t :aa ⊗a ⊗···⊗a OR-split Complex
u i j1 j2 jl
t :aa Sequence Simple
u i l
Proof. FollowsimmediatelyfromTheorem10andDefinition13.
Since a hybrid workflow can be transformed into a non-hybrid workflow, in this
paper we will address only the study of non-hybrid workflows. When no ambiguity
can arise we will refer to non-hybrid workflows simply as workflows. As we will
consider only non-hybrid workflows, the behavior of a workflow will depend on its
complexandsimpleEAmodels.
Anon-hybridworkflowcancontainsevendifferentEAmodelstructures: AND-
join, AND-split, XOR-join, XOR-split, OR-join, OR-split and Sequence. Table 1
illustratesthestructureofthesesevendifferentEAmodels.
These EA models can be classified as deterministic and non-deterministic. The
AND-join, AND-split, XOR-join, OR-join and Sequence models are deterministic,
whileXOR-splitandOR-splitarenon-deterministic.
Foranydeterministicmodelt : f  f knowingthattheBooleanvalueofthe
u E C
incoming condition f istrue allows us to infer that all its outgoing transitions will
E
besettotrue. Consequently,inthesecasesweknowwhichtask(s)willbeexecuted
aftert (i.e.,connectedtot ).
u u
For any non-deterministic modelt : f  f knowing that the Boolean value
u E C
oftheonlyincomingtransitionof f istruedoesnotallowustoinferwhichoutgoing
E
transition(s) will be set to true. Nevertheless, we know that if f is true then f is
E C
alsotrue. Letusanalyzeeachcaseindividually.
(1) XOR-split. In this case, if f is true, we just know that only one of the
E
outgoingtransitionsa ,r∈{1,...,l},istrue.
jr
(2)OR-split. Inthiscase,if f istrue,weonlyknowthatanonemptysubsetof
E
theoutgoingtransitionsa ,r∈{1,...,l},aretrue.
jr
Inthesetwocases,knowingthat f istruedoesnotallowustoinferwhichtask(s)
E
willbeexecutedaftert (i.e.,connectedtot ). Therefore,wecallthesemodelsnon-
u u
deterministic.
Definition15 Anon-deterministictaskisataskassociatedwithaXOR-splitorOR-
splitmodel(seeTable1).
Definition16 All transitions have a Boolean labela that references the transitions
i
a (definition 1). Additionally, each outgoing transition of a task associated with a
i
XOR-splitorOR-splitmodelshasasnapshotBooleanvariabledenotedbya,which
i
isrelatedtothenon-determinismofthetask.
Definition17 The non-deterministic task behavior (tND(t)) of a non-deterministic
i
taskt isthesetofallsnapshotBooleanvariablesassociatedwithitsoutgoingtransi-
i
tions,i.e.,tND(t)={{a ,a ,...,a }|t : f  f ,f =a and f =a ϕa ϕ...ϕa ,
i j1 j2 jl i E C E i C j1 j2 jl
ϕ∈{⊗,⊕}}.
Definition18 The non-deterministic workflow behavior, denoted by wND(WG), of
a workflow WG is the set of all non-deterministic task behaviors of the workflow,
i.e., wND(WG) = {tND(t ), tND(t ), ..., tND(t )}, where t ,t ,...,t ∈T, are the
i1 i2 ik i1 i2 ik
non-deterministictasks.
·
Definition19 Lett be a non-deterministic task. Let P∪N be a partition oftND(t)
i i
such that P={a∈tND(t)|a is a snapshot Boolean variable asserted to true} and
i