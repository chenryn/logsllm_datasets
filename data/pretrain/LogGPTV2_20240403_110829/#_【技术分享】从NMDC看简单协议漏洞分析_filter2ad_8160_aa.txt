# 【技术分享】从NMDC看简单协议漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[ **k0pwn_ko**](http://bobao.360.cn/member/contribute?uid=1353169030)
稿费：500RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
协议漏洞一直是一个比较有趣的话题，比如之前二哥在乌云提交的QQ游戏客户端的伪协议漏洞，比如GeekPwn上的TCP协议栈漏洞，比如后来NSA泄露的思科SNMP的远程代码执行，都是各种不同类型的协议漏洞，其实很多著名的协议都存在漏洞而且网上都有对应的漏洞分析。其实无论是对于协议漏洞的挖掘，分析，利用，都需要对协议数据包的构成，处理协议的客户端/服务端等等有所了解。
当然今天我做的这个分享是最近我看到的一个比较偏门的协议—-NMDC协议的远程代码执行，之所以会选择这个协议，是在我调试这个协议漏洞的过程中，发现这个协议从数据包构造，漏洞成因，服务端分析来看都相对简化易懂，非常适合和我一样对协议漏洞感兴趣或者刚刚入门的小伙伴一起学习，因此分享出来和大家一起交流！有不当之处还望多多包含，多多指正！
**先看看SNMP协议**
在分析这个NMDC协议之前，想先和大家一起来看看前端时间泄露的思科SNMP协议漏洞，其实在安全客有一篇文章[[揭开思科ASA防火墙网络军火的面纱]](http://bobao.360.cn/learning/detail/3053.html)对于这个协议漏洞已经进行了详细的分析，这里再次提到这个漏洞，是因为想和大家再次回顾一下这个漏洞的数据包构造，因为实际上对于一个协议服务端漏洞，是需要了解协议数据包的结构，才能针对具体的结构构造特殊的参数来挖掘，复现漏洞场景。
首先搭建一个简单的思科防火墙环境，然后利用Exploit完成利用。
通过wireshark抓包，观察这个SNMP协议包。
可以看到，在SNMP协议包里包含了getBulkRequest字段，这个字段是SNMPv2之后加入的新的PDU，该PDU是用来有效检索块中数据，加快交互效率用的。问题就出现在这个PDU中。
仔细分析SNMP协议，可以看到其中包括了版本号，应答方ID等信息，其中variable-bindings的value值中包含了溢出的payload，在思科防火墙的lina中处理这个数据包时，会引发一个缓冲区溢出。
其实看完这篇分析的文章，可以想到在进行协议分析的时候，对协议数据包的构造，每个指令包含的内容是对协议漏洞分析一个必不可少的环节，接下来通过相对复杂的SNMP协议，来看一下文章的主角NMDC协议。
**NMDC简单协议**
NMDC协议主要负责的是P2P客户端服务器交互的一种文件共享协议，用于实现Client和Hub之间的交互，其中，NMDC提供了很多交互的指令，在服务端会识别这些指令做出相应的回应。这里列举一些交互的指令功能。
**Hub端：**
$Lock
指令格式：$Lock  Pk=|
主要用于刚刚建立连接的时候，确认当前客户端连接当前的服务端，可以理解为确认连接的唯一性。
$GetPass
指令格式：$GetPass|
主要用于向客户端发送消息，要求客户端提供密码。
$LogedIn
指令格式：$LogedIn |
主要用于登陆成功后告知客户端，同时发送的内容有该客户端的用户名。
**Client端：**
$Supports：
指令格式：$Supports   … |
主要用于声明NMDC支持的协议扩展。
$ValidateNick ：
指令格式：$ValidateNick |
主要用于确认当前可使用的用户名。
$MyPass：
指令格式：$MyPass |
主要用于在接收到服务端的请求指令后，向服务端发送密码。
$GetNickList：
指令格式：$GetNickList|
主要用于向服务端请求当前的用户名列表。
$MyINFO ：
指令格式：$MyINFO $ALL  $
$$$$|
用于向服务端提供当前客户端的信息，而问题就出现在这里面。
来看一下一个简单的Client和Hub交互的图解：
这次的协议漏洞的问题就出现在$MyINFO中，通过构造特殊的$MyINFO的指令发送给Hub端，在Hub端处理$MyINFO指令参数的时候，会引发一个简单的栈溢出，文章的主角LamaHub就是这样一个处理NMDC协议的Hub端，它在解析MyINFO的指令的时候，会由于memcpy函数没有对长度进行限制，导致栈溢出。在阅读了NMDC指令格式之后可以来看一下NMDC发送的数据包。首先是TCP握手：
紧接着会进入之前提到的交互部分，会实现NMDC协议握手的过程，来看一下完整的交互包。
可以看到实际上在NMDC握手的时候，就包含了交互需要的一些指令，通过“ | ”连接，那么实际上可以猜测LamaHub在处理NMDC协议的时候的一个处理流程。
了解了指令格式，以及Client和Hub的交互过程，在下一节的漏洞分析的过程中，可以很清晰的看到这个交互过程LamaHub都做了些什么工作，以及最后为什么会引发缓冲区溢出。
**从NMDC到LamaHub漏洞**
LamaHub是NMDC协议的一个服务端，在LamaHub服务器处理客户端请求的时候，通过构造特殊的NMDC协议数据包，可以导致LamaHub在处理$MyINFO指令请求的时候产生缓冲区溢出，从而远程执行任意代码，下面对此漏洞进行分析。
首先部署LamaHub，用gdb attach，运行PoC，服务端崩溃，可以查看崩溃时的信息。
    gdb-peda$ run
    Starting program: /root/Desktop/0.0.6.2/server 
    > ERROR -> Plugin -> File plugins.conf dont found
    > init () -> OK
    > started on port -> 4111
    > new client -> 127.0.0.1 -> 4
    Program received signal SIGSEGV, Segmentation fault.
    [----------------------------------registers-----------------------------------]
    EAX: 0x1 
    EBX: 0x2c2c2c2c (',,,,')
    ECX: 0x0 
    EDX: 0x5 
    ESI: 0x2c2c2c2c (',,,,')
    EDI: 0x2c2c2c2c (',,,,')
    EBP: 0x2c2c2c2c (',,,,')
    ESP: 0xbffff2c0 --> 0x80626d6 --> 0x0 
    EIP: 0x8066a2a ("idateNick Pierre|$Ven 1,0091|$G01")
    EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8066a27 :push   esi
       0x8066a28 :popa   
       0x8066a29 :ins    BYTE PTR es:[edi],dx
    => 0x8066a2a :imul   esp,DWORD PTR [ecx+eiz*2+0x74],0x63694e65
       0x8066a32 :imul   esp,DWORD PTR [eax],0x50
       0x8066a35 :imul   esp,DWORD PTR [ebp+0x72],0x247c6572
       0x8066a3c :push   esi
       0x8066a3d :outs   dx,BYTE PTR gs:[esi]
    [------------------------------------stack-------------------------------------]
    0000| 0xbffff2c0 --> 0x80626d6 --> 0x0 
    0004| 0xbffff2c4 --> 0xb1b1b1b1 
    0008| 0xbffff2c8 --> 0xb1b1b1b1 
    0012| 0xbffff2cc --> 0xb1b1b1b1 
    0016| 0xbffff2d0 ("770,INFO$312312312312 ZPe0 |b363377277")
    0020| 0xbffff2d4 ("INFO$312312312312 ZPe0 |b363377277")
    0024| 0xbffff2d8 --> 0xcacaca24 
    0028| 0xbffff2dc --> 0x505a20ca 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Stopped reason: SIGSEGV
    0x08066a2a in buf ()
可以看到，此时程序处于08066a2a地址位置，通过PoC，此时是处于返回地址eip部署的恶意地址，这个是PoC给出的，根据系统可以修改eip地址使其跳转到shellcode，通过bt查看一下堆栈回溯。
    gdb-peda$ bt
    #0  0x08066a2a in buf ()
    #1  0x080626d6 in buf ()
    #2  0xb1b1b1b1 in ?? ()
    #3  0xb1b1b1b1 in ?? ()
    Backtrace stopped: previous frame inner to this frame (corrupt stack?)
由于NMDC数据包构造的原因，后续堆栈已经被畸形payload覆盖，导致回溯失败，通过正向分析可以找到这个漏洞的成因。
通过IDA pro分析可以找到两处recv，在LamaHub接收数据的时候势必会调用recv函数，在这两处recv下断点。
    gdb-peda$ b *0x08052ef7
    Breakpoint 1 at 0x8052ef7
    gdb-peda$ r
    Starting program: /root/Desktop/0.0.6.2/server 
    > init () -> OK
    > started on port -> 4111
    > new client -> 127.0.0.1 -> 4
    [----------------------------------registers-----------------------------------]
    EAX: 0x4 
    EBX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ECX: 0x4 
    EDX: 0x10 
    ESI: 0x0 
    EDI: 0x0 
    EBP: 0xbffff438 --> 0x0 
    ESP: 0xbffff3f0 --> 0x4 
    EIP: 0x8052ef7 (:call   0x8049210 )
    EFLAGS: 0x203 (CARRY parity adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8052eea :push   0x8066a00
       0x8052eef :push   ecx
       0x8052ef0 :mov    BYTE PTR ds:0x8066a00,0x0
    => 0x8052ef7 :call   0x8049210 
       0x8052efc :add    esp,0x10
       0x8052eff :test   eax,eax
       0x8052f01 :mov    ds:0x8062b04,eax
       0x8052f06 :je     0x8052f40 
    Guessed arguments:
    arg[0]: 0x4 
    arg[1]: 0x8066a00 --> 0x0 
    arg[2]: 0x3ff 
    arg[3]: 0x0
发送payload后，程序命中了一处断点，之后单步步过。
    gdb-peda$ n
    [----------------------------------registers-----------------------------------]
    EAX: 0x1b1 
    EBX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ECX: 0xbffff3f0 --> 0x4 
    EDX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ESI: 0x0 
    EDI: 0x0 
    EBP: 0xbffff438 --> 0x0 
    ESP: 0xbffff3f0 --> 0x4 
    EIP: 0x8052efc (:add    esp,0x10)
    EFLAGS: 0x217 (CARRY PARITY ADJUST zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8052eef :push   ecx
       0x8052ef0 :mov    BYTE PTR ds:0x8066a00,0x0
       0x8052ef7 :call   0x8049210 
    => 0x8052efc :add    esp,0x10
       0x8052eff :test   eax,eax
       0x8052f01 :mov    ds:0x8062b04,eax
       0x8052f06 :je     0x8052f40 
       0x8052f08 :mov    BYTE PTR [eax+0x8066a00],0x0