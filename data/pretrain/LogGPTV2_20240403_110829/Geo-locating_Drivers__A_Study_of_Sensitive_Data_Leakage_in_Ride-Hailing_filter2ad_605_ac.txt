included in Nearby Cars API responses
User Authentication. 14 services restrict the Nearby Cars
API to authenticated users only. The remaining services, i.e.,
GroundLink, myTaxi, Easy, Jeeny, RideLA, and eCab do not
require any form of user authentications. This allows any pub-
lic attacker to retrieve nearby cars without user authentication.
It is worth to mention the case of GoCatch. Every time
a user wants to log in at GoCatch, the service requires the
submission of a token sent via SMS. While this approach may
affect the service usability, it can raise the cost of the attacker
operations.
Session Lifespan. Since the beginning of the experiments, all
services—except for three—have not required us to obtain a
fresh user session. For Uber, Lyft, Heetch, Gett, and Flywheel,
the experiments last in total 28 days. During this period, only
Lyft and Flywheel require us to refresh the session ID after 24
hours and every 30 minutes, respectively. For the other services
the experiment lasted 15 days (eCab and Taxify only 7 days).
Among these, only Ztrip requires to refreshen the session ID
every 30 minutes.
Anti-GPS Spooﬁng. Our analysis did not reveal the presence
of any anti-GPS spooﬁng behavior among all of tested RHSes.
Identiﬁer Lifespan. Overall, 17 services do not use short-lived
identiﬁers. The maximum time interval is the same as that of
session lifespan. Only three services shufﬂe identiﬁers every
20 minutes. Among these, it is worth mentioning the behavior
of Flywheel that refreshes identiﬁers about every 10 minutes.
Personally Identiﬁable Information. Our analysis revealed
that in total six services share Personally Identiﬁable Infor-
mation (PII). Among them, we discovered full names, phone
numbers, as well as sensitive information such as social
security numbers and bank account data. The complete list
of PII per service is in Table III.
C. Takeaway
For the remaining RHSes, we did not identify rate limits.
As we elaborate more in §V, we requested on average about
four requests per second based on the insight gained with Uber,
Taxify, and eCab. Higher rate limits may be present, but we
did not verify their presence for ethical reasons. Finally, none
of the services enforce a same-origin network policy for user
requests.
In short, our ﬁrst analysis did not observe any particular
countermeasures hampering attackers. Instead, our analysis
revealed behaviors that can facilitate attackers, e.g., long-lived
tokens. Also, our tests identiﬁed two types of vulnerabilities
in 11 RHSes: six services do not require user authentication
to reveal the position of nearby drivers, and other six services
directly return a variety of personally identiﬁable information
7
Rider App
City/Area
Req/s
Days
Cov/M
Uber
Easy
Gett
Lyft
myTaxi
Taxify
BiTaksi
Heetch
Jeeny
Flywheel
GoCatch
miCab
RideAustin
Ztrip
eCab
GroundLink
HelloCabs
Ride LA
Bounce
DC Taxi Rider Washington DC, US
O’ahu Island, Hawai’i
Sao Paulo, Brazil
Eilat, Israel
O’ahu Island, Hawai’i
Hamburg, Germany
Paris, France
Istanbul, Turkey
Stockholm, Sweden
Riyadh, Saudi Arabia
Seattle, US
Sydney, Australia
Cebu, Philippines
Austin, US
Houston, US
Paris, France
Dallas, US
Yangon, Myanmar
Los Angeles, US
San Diego, US
1
4
4
5
4
2
4
4
4
4
4
4
4
4
2
4
4
4
4
4
28
15
28
28
15
7
15
28
15
28
15
15
15
15
7
15
15
15
15
15
19
0.3
0.3
19
20
12
20
12
0.3
7
20
0.8
7
12
7
20
7
20
20
3
Table IV: An overview of the parameters of our experiments.
Cov/M for the estimate coverage area (mi2) of one monitor.
(RideLA contains both vulnerabilities), which even includes
sensitive and conﬁdential
information (e.g., social security
numbers and bank account numbers).
V. ATTACKS
The results of the web API analysis indicate that the Nearby
Cars API may be poorly protected. Attackers may be able to
collect a large volume of data containing drivers’ identiﬁable
information and their positions, which can uncover drivers’
sensitive information indirectly. To demonstrate the threats,
in this section, we present
the
current implementations of Nearby Cars API not only seriously
threaten drivers’ safety and privacy, but also allow attackers to
spy on RHS business performances.
three attacks to show that
In this section, we present
the details of our attacks.
First, we present the data collection and processing in §V-A.
Then, three attacks are presented in §V-B,§V-C, and §V-D,
respectively.
A. Design
Our attacks consist of three components: data acquisition,
data aggregation, and data analysis.
Data Acquisition. Data acquisition is performed with moni-
tors. A monitor is a bot that controls a rider account. In this
study, all monitors for a particular RHS use only one account.
A monitor is placed in an appropriate location in a city to
collect data by continuously performing API calls with spoofed
GPS coordinates and store collected data in a local database.
Moreover, monitors are responsible for determining when the
authorization token needs to be refreshed.
The exact locations of our monitors are determined as
follows. First,
if the RHS operates in multiple cities, we
select a city which is relatively isolated from neighboring
cities (e.g., in an island). Second, we calculate the average
size that a monitor could cover (up to 20 mi2 for ethical
concerns). Then, we place monitors in a grid based on the size
of the area covered by each monitor, which varies considerably
across services; however, as cities have irregular shapes, we
adjusted monitors to better adapt to the shapes manually. Also,
as monitors may cover the same area, we further reﬁned
the positions of monitors to reduce overlaps. The locations,
coverage size of each monitor, and other parameters of our
experiments are reported in Table IV.
After being placed, each monitor starts to acquire data
at a constant request rate, which has been determined by
considering ethical aspects. Speciﬁcally, our experiments must
not interfere with the normal business operations of RHSes and
not to trigger the active rate-limiting mechanism, if there is any.
Accordingly, we ﬁrst tried to acquire data from Lyft with a rate
of 10 requests per second, the documented rate limits. After
two hours, we reached the Lyft’s rate limit, and we reduced
monitors’ rate by half, i.e., ﬁve requests per second. Then, we
used the new rate for Uber. However, we reached the rate limit
of Uber as well and further reduced to one request per second.
For the other RHSes, we set the initial rate four requests per
second and never changed it. Only for Taxify and eCab, we
further reduced the request rate to two requests per second.
In fact, we acquired data incrementally. First, we started
the acquisition for Lyft, Uber, Heetch, Gett, and Flywheel
on April 13th, 2018. The responses data are collected over
four consecutive weeks (28 days), i.e., between April 13th
and May 10th. Then we extended the acquisition of data to
the remaining 15 RHSes from May 11th. In total, except for
Taxify and eCab, we acquired data for 15 days. Because of
a power outage, our monitors were ofﬂine or gathered partial
date between May 12th and 14th, and May 19th and 21th.
We excluded these days in the following study. For Taxify
and eCab, we acquired only seven days because the network
providers ﬂagged our machines as infected. Accordingly, we
suspended the acquisition of data.
Data Aggregation. Responses of Nearby Cars API return car
paths. Each path is a list of timestamped GPS coordinates with
an identiﬁer, which is used to link paths to cars or drivers and
does not change over time. One of these RHSes, i.e., Lyft,
requires additional attention. Lyft’s Nearby Cars API responses
include the URL of driver’s avatar, a driver-chosen picture
(selﬁe in most cases). Avatars do not change very often, and
this makes them reliable identiﬁers for drivers. However, each
response contains only the URL of the closest driver. To gather
the URLs of other drivers, we deploy a mobile monitor for
each newly-discovered “driver” to perform an additional API
call closer to the most recent GPS coordinate.
Data Analysis. The ﬁnal step is to remove noises from our
dataset. First, we observe that drivers work as full-time or part-
time. We categorize drivers as full-time if they appear more
than half of the total number of days. Compared to the part-
time drivers, full-time drivers have a tendency to exhibit more
regular daily patterns. Thus, we focus on full-time drivers only.
Second, drivers have various activities through a day if they
are absent in our dataset, giving a ride or logged out of the
platform (e.g., to sleep or eat). As none web API we used to
collect data can distinguish a speciﬁc activity, we rely on the
inter-path interval to distinguish the two cases. In particular,
we observe that the average ride in the cities that we are
monitoring could last up to 45 minutes. Accordingly, if the
8
essary PII to riders is inevitable. However, improper imple-
mentation logic may provide the PII to the one who should
not receive. For example, a driver’s avatar should be provided
to the rider who has successfully scheduled a ride, not any
other users. Therefore, we consider an appropriate practice is
to provide PII after a successful scheduled ride, which can
protect drivers’ PII from unexpected leakages.
C. Ethical Considerations and Responsible Disclosure
The analysis presented in this paper involved the analysis
of remote servers and handling sensitive data of drivers.
We addressed the ethics concerns of our study as follows.
First, we designed experiments to avoid interfering the normal
operations of RHSes. Our experiments (i) used a low request
rate, and we adapted it based on the feedback received by
the remote servers and (ii) we did not request, cancel or
did any other operations that could change drivers behavior.
Second, even though the data we collected is accessible to the
public and has not been encrypted, our monitors have been
implemented to remove sensitive response ﬁelds before storing
data in our database. In doing so, we are not storing any private
data item, such as full names, dates of birth, and social security
numbers.
Our analysis identiﬁed security issues that need to be
addressed by RHSes’ developers. We have notiﬁed our ﬁndings
as follows. First, for these RHSes with clear vulnerabilities,
e.g., the SSN returned by Bounce and unauthenticated access
to the Nearby Cars API, we have followed the notiﬁcation
procedure presented by Stock et al. [35]. After the initial noti-
ﬁcation, we regularly verify the presence of the vulnerability.
If the vulnerability is present, then we send a reminder after
two weeks of the initial notiﬁcation. Second, to adequately
address our ﬁndings, RHSes developers may need to redesign
the web API and the rider app as well. In this case, we have
reached out to the developers, and are discussing the details
of our ﬁndings.
D. Feedbacks After Disclosure
We notiﬁed the developers of all 20 RHSes about our
results. Eight services shared with us the details of the
patch and asked for our feedback. For example, Bounce
removed sensitive PII including social security number and
bank account number from their response messages, Lyft’s
Nearby Cars API has stopped providing avatar informations,
and Heetch is considering to harden the web API usage by
introducing further restrictions such as shorter the lifespan of
drivers’ IDs. Furthermore, as a result of our notiﬁcation efforts,
Lyft and Uber each awarded us a bug bounty.
E. Lessons Learned
The Unlearned Lesson Despite Media Attention. The mas-
sive sensitive data leakage of drivers [30] and the Hell pro-
gram [11] have received extensive media attentions covering
both legal and ﬁnancial impacts. However, despite all these
attentions, changes in the platforms, if any, are not perceptible
making it possible for an attacker to spy on drivers.
From Security to Safety. Second, most of the attention
has been devoted to the industrial espionage between two
competitors and a little has been paid to the possible safety
issues of drivers. Unfortunately, the issues presented in this
paper goes beyond the mere computer security issue and
touches drivers’ safety. As shown in this paper, Nearby Cars
APIs can be used to determine driver’s home address.
A Market Segment Problem. Finally, a more concerning
outcome of our ﬁndings is that Uber and Lyft are not two
isolated cases. On the contrary, our results show a problem
of an entire sector: for all services, it is possible to mount
the same set of attacks of inferring driver’s home addresses;
also, all of these ride-hailing services suffer from at least one
vulnerability. Meanwhile, in one case, i.e., Gett, the attacker
can directly query a web API to obtain the position of a speciﬁc
driver, without the need of harvesting API responses.
VII. RELATED WORK
Privacy-Preserving Location-Based Services (LBS). Privacy
in LBSes is a long-lasting concern. Many privacy-preserving
architecture have been proposed and attempted to address
privacy issues in the broader category of LBSes, e.g., location-
based Trust for Mobile User-generated Content [23], location-
based social networks [17], privacy-preserving location proof
updating system [38], privacy-aware location proof architec-
ture [26]. Most recently, Pham et. al. also proposed two privacy
preserving LBS systems particularly for ride-hailing services:
ORide [29] and PrivateRide [30]. Our work complements these
efforts by demonstrating the possible attacks current ride-
hailing services still face.
Leakage of Privacy Sensitive Data in Mobile Applications.
The detection of data leakage in mobile applications is a chal-
lenging problem that has been addressed from different angles
using different techniques. For example, Enck et al. [13], Yang
et al. [37] and Egele et al. [12] focused on the problem of
identifying mobile apps that transmit sensitive data such as
GPS position and contact lists without device users awareness.
Data leakage can also occur when transmitting user-provided