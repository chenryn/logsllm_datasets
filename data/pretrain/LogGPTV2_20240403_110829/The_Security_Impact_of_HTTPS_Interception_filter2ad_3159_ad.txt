Chrome accounts for 40.3% of TLS trafﬁc, of which 8.6%
was intercepted, the highest interception rate of any browser. On
the other extreme, only 0.9% of Mobile Safari connections were
intercepted. Interception is far more prominent on Windows,
where we see 8.3%–9.6% interception compared to 2.1% on
Mac OS. This is likely because most corporate users use
Windows in the workplace, and many antivirus products that
perform interception are Windows-based. We summarize these
results in Figure 13.
Fig. 8: Temporal Variation in Firefox Interception—We
observe the highest amount of raw interception during times of
peak trafﬁc, but the highest interception rates during periods
of low total trafﬁc. This is likely because the two largest
ﬁngerprints are associated with mobile carriers and will update
at night when desktop computers are powered off. Excluding
these two ﬁngerprints, interception remains relatively stable.
Fig. 9: ASes with Highest Firefox Interception—We ﬁnd
that 8 ASes have signiﬁcantly higher interception rates within
the top 500 ASes. All but one are mobile providers.
Bouncy Castle ﬁngerprints, the total percentage of intercepted
connections decreases by 47% and no longer peaks during these
off hours. We suspect that the interception peaks are the result
of mobile devices remaining on at night when other desktop
computers are powered off. Weekend interception rates level
out around 2% and increase during the weekdays, suggesting
the presence of corporate TLS proxies.
Geographic Disparities
Interception is more prevalent in
several countries (Figure 10). For example, 15% of TLS
connections from Guatemala were intercepted, a rate 3–4
times higher than the global average. This is primarily due
to COMCEL, a mobile provider responsible for 34.6% of all
Guatemalan update server trafﬁc, having a 32.9% interception
rate. Greenland has the second highest interception rate (9.9%),
which is caused by a single AS: TELE Greenland. Nearly
half of the interception is performed by a Fortigate middlebox.
The third most commonly intercepted country, South Korea,
is one of the most highly mobile-connected countries in
the world [55]. In general, large ASes with above average
interception belong to mobile providers and ﬂuctuate between
20% to 55% interception depending on the time of day, as
seen in Figure 9. The single exception is Marubeni OKI
Network Solutions, which maintains a consistent interception
7
200K400K600K800K1.0M1.2M1.4M1.6MSat 02-20Sun 02-21Mon 02-22Tue 02-23Wed 02-24 0.01 0.02 0.03 0.04 0.05 0.06 0.07MITM DetectedMITM rateDateMITM DetectedMITM rateAdj. MITM rate 0.1 0.2 0.3 0.4 0.5 0.6Sat 02-20Sun 02-21Mon 02-22Tue 02-23Wed 02-24MITM rateDateSprintMarubeniNTT DocomoAT&T MobileT-MobileVerizonFree MobileMCITop 500Falsiﬁed User-Agents
It is possible that some connections in
the e-commerce dataset have falsiﬁed User-Agents headers,
which would artiﬁcially inﬂate the interception rate. We
intuitively expect that handshakes belonging to interception
products will have a larger number of associated User-Agents
than a custom crawler with a falsiﬁed User-Agent. All but
a handful of the TLS products we investigated have at least
50 associated User-Agents, and at the extreme, Avast Antivirus
and Blue Coat’s corporate proxy had 1.8K and 5.2K associated
User-Agents, respectively. When we excluded interception
ﬁngerprints associated with less than 50 User-Agents, the global
interception rate dropped from 6.8% to 6.2%. Given this modest
decrease, we suspect that the mismatches we detect are due to
interception instead of spoofed User-Agents. However, we take
a conservative route and restrict our analysis to the 6.2%.
During our analysis, we noted two irregularities. First,
nearly 3 million connections (approximately 75% of which
had a Blue Coat header) used the generic User-Agent string
“Mozilla/4.0 (compatible;)”). Cisco has documented that
Blue Coat devices will frequently mask browser User-Agents
with this generic agent string [31]. Despite knowing Blue Coat
devices intercept these TLS connections, we take the most
conservative approach and exclude these connections from our
analysis because we do not know what percentage of devices
behind the proxy would have been identiﬁable. However, we
note that if we assume the same proportion of identiﬁable
browsers as the general population (95.6%), Blue Coat would
be the second largest ﬁngerprint and the total percentage of
connections intercepted would rise from 6.2% to 7.0%. Second,
we ﬁnd that over 90% of Internet Explorer connections on
Windows XP appear intercepted because they include modern
ciphers and extensions that were not previously documented on
XP, nor that we could reproduce. We exclude these connections.
C. Cloudﬂare
The Cloudﬂare network provides perhaps the most represen-
tative view of global HTTPS trafﬁc, but also the messiest. We
initially observe a 31% interception rate, which is 3–7 times
higher than the other vantage points. This elevated interception
rate is likely due to abuse (e.g., login attempts or content
scraping) and falsiﬁed User-Agent headers—some of the very
types of requests that Cloudﬂare protects against. The Firefox
server relied on only Firefox browsers accessing an obscure
update server and the e-commerce websites required JavaScript
execution in order to record a TLS connection. In contrast, the
Cloudﬂare data reﬂects all TLS connections across a broad
range of websites, so even simple command line utilities such
as wget and curl can appear in the Cloudﬂare dataset with
falsiﬁed User-Agent headers.
We take several steps to account for this abuse. First, we
removed ﬁngerprints associated with fewer than 50 unique User-
Agent headers. Next, we limited our analysis to the 50 largest
ASes that are not cloud or hosting providers. Unfortunately,
even after this ﬁlter, we still observe an artiﬁcially high
interception rate ranging from 11% in the Americas to 42%
in Asia. We ﬁnd that while large ASes in the U.S. have clear
purposes, the majority of networks in Europe and Asia do
not. In Asia, numbers varied widely and most ASes had little
description. In Europe, ASes would frequently span multiple
countries and contain requests that appeared to from both home
Fig. 11: Temporal Variation in Cloudﬂare Interception—
We observe the highest amount of raw interception during times
of peak trafﬁc, but the highest interception rates during periods
of low total trafﬁc. This is likely due to higher percentages of
automated bot trafﬁc where the User-Agent header is spoofed.
Network Type
Residential/Business
Cell Provider
No Interception
86.0%
94.1%
Likely Conﬁrmed
0.4%
13.6%
5.8%
0.1%
Fig. 12: U.S. Network Breakdown—We show the Cloudﬂare
interception rates for types of U.S. networks.
users and hosting providers. We limit our analysis to the ASes
from the top 50 that were located in the United States and
primarily serve end users. While this reduces the scope of the
dataset, there are lower interception rates in the U.S. compared
to any other region, providing a conservative lower bound.
In the U.S., we observe a 10.9% interception rate, with
a stark contrast between mobile ASes (5.2–6.5%) and res-
idential/enterprise ASes 10.3–16.9%), per Figure 12. Four
of the top ﬁve handshake ﬁngerprints belong to antivirus
providers: Avast, AVG, Kaspersky, and BitDefender, which
are also prominent on the e-commerce sites. The remaining
unidentiﬁed ﬁngerprint primarily occurs for Chrome 47 on
Windows 10. Despite the alignment with a speciﬁc browser
version and OS —which might indicate an incorrect heuristic—
we conﬁrm that this handshake cannot be produced by Chrome
and advertises 80 cipher suites including IDEA/CAMELLIA,
diverging signiﬁcantly from the Chrome family. The ﬁngerprint
also occurs consistently across non-mobile ASes and peaks
usage during evening hours, suggesting malware or antivirus
software. These ﬁve ﬁngerprints account for 31% of intercepted
trafﬁc (Table 5).
Similar to Firefox updates, the total amount of HTTPS
interception correlates with total HTTPS trafﬁc, peaking in the
middle of the day and declining during evening hours, but with
the highest interception rates at night (Figure 11). This might
be due to mobile trafﬁc as we saw for Firefox but could also
indicate the presence of bot trafﬁc.
D. Results Summary and Validation
We can partially validate our methodology by checking
whether we failed to detect any connections that included
proxy-related HTTP headers as intercepted. We ﬁnd that 1.6%
of the e-commerce connections included proxy headers, but
8
 0 1000 2000 3000 4000 5000 6000 7000 8000Wed 05-18Thu 05-19Fri 05-20 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18MITM DetectedMITM rateDateMITM detectedMITM rateBrowser
Chrome
Explorer
Firefox
Safari
Chromium
Mobile Safari
Other
OS
Windows 7
Windows 10
iOS
Mac OS
Android
Windows 8.1
Other
8.6%
7.4%
8.4%
2.1%
0.1%
0.9%
4.0%
E-commerce Sites
All Trafﬁc
40.3%
16.8%
13.5%
10.2%
7.6%
7.6%
4.0%
All Trafﬁc
23.3%
22.5%
17.3%
15.8%
9.4%
6.9%
4.8%
Intercepted Of Intercepted
56.2%
19.6%
18.2%
3.4%
0.1%
1.1%
2.4%
Intercepted Of Intercepted
56.6%
14.3%
1.1%
6.5%
0.5%
15.8%
15.2%
9.6%
9.3%
0.1%
2.1%
1.0%
8.3%
21.4%
Cloudﬂare
Browser
Chrome
Mobile Safari
Explorer
Safari
Firefox
Mobile Chrome
Other
OS
Windows 7
Windows 10
iOS
Mac OS
Android
Windows 8.1
Other
All Trafﬁc
36.2%
17.5%
14.9%
8.9%
8.5%
8.4%
5.6%
All Trafﬁc
23.9%
22.9%
17.5%
16.0%
9.5%
4.9%
5.3%
14.7%
1.9%
15.6%
6.5%
18.2%
4.7%
7.0%
Intercepted Of Intercepted
48.8%
3.3%
21.2%
5.3%
14.2%
3.6%
3.6%
Intercepted Of Intercepted
29.2%
27.4%
3.2%
9.6%
4.2%
11.0%
15.4%
13.4%
13.1%
2.0%
6.6%
4.8%
24.4%
31.7%
Fig. 13: OS and Browser Breakdown—We show the breakdown of all trafﬁc, the amount of trafﬁc intercepted, and percentage
of all interception that each browser and operating system accounts for across both the e-commerce and Cloudﬂare vantage points.
did not have evidence of interception in their TLS handshakes.
This suggests that the methodology catches the vast majority
of interception, but it does miss some edge cases.
To verify that our heuristics aren’t incorrectly classifying
valid handshakes, we investigated why our heuristics marked
connections as intercepted. We detected more than 85% of
intercepted connections based on the presence of known
unsupported ciphers or extensions, rather than a missing
extension or invalid ordering. More than 98% of intercepted
connections in the Firefox dataset were found based on the
inclusion of ciphers that have never been implemented in NSS,
and 82% of all intercepted connections indicated support for
the heartbeat extension —an immediate giveaway given that no
browsers support the extension. This suggests that our heuristics
are ﬁnding handshakes produced by other libraries rather than
misclassifying browser edge cases.
However, while the methodology appears sound, the three
perspectives we studied provide differing numbers on the total
amount of interception. All three perspectives ﬁnd more than an
order of magnitude more interception than previously estimated,
and we estimate that 5–10% of connections are intercepted.
However, we offer a word of caution on the exact numbers,
particularly for the Cloudﬂare dataset, where abuse may inﬂate
the interception rate we observe.
V I .
I M PA C T O N S E C U R I T Y
In this section, we investigate the security impact of
HTTPS interception. First, we introduce a grading scale for
quantifying TLS client security. Then, we investigate common
interception products, evaluating the security of their TLS
implementations. Based on these ratings and the features
advertised in Client Hello messages, we quantify the change
in security for intercepted connections.
A. Client Security Grading Scale
There does not exist a standardized rubric for rating
TLS client security. We deﬁne and use the following scale
to consistently rate browsers, interception products, and the
connections we observe in the wild:
A: Optimal. The TLS connection is equivalent to a modern
web browser in terms of both security and performance. When
grading cipher suites, we speciﬁcally use Chrome’s deﬁnition
of “secure TLS” [11].
B: Suboptimal. The connection uses non-ideal settings (e.g.,
non-PFS ciphers), but is not vulnerable to known attacks.
C: Known Attack. The connection is vulnerable to known
TLS attacks (e.g., BEAST, FREAK, and Logjam), accepts
768-bit Difﬁe-Hellman parameters, or advertises RC4 support.
F: Severely Broken. The connection is severely broken such
that an active man-in-the-middle attacker could intercept and
decrypt the session. For example, the product does not validate
certiﬁcates, or offers known-broken cipher suites (e.g., DES).
Our grading scale focuses on the security of the TLS
handshake and does not account for the additional HTTPS
validation checks present in many browsers, such as HSTS,