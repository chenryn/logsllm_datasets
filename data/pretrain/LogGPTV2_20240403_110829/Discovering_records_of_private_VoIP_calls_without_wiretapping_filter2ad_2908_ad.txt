3.  Pick  up  the  callee  phone  after  10  seconds  (before 
ring), or after it rings, if the call setup requires more 
than 10 seconds. 
4.  Hang up the caller phone. 
Table 4 shows the results. For the detection rate, there was an 
outstanding  case  when  the  PAP2  received  the  call  setup  request.  
The  detection  rate  was  53%,  instead  of  either  0%  or  100%.  The 
reason  is  that  the  PAP2  phone  has  a  non-negligible  disabled 
period.  In  that  case,  whether  the  adversary  could  detect  the  call 
setup  depended  on  the  time  when  the  call  setup  was  performed. 
We performed 17 experiments, varying the call setup; i.e., the call 
setup  was  performed  at  5  seconds  increments  (60,  65,…,  140) 
after the Voice Pulser started monitoring.  The timing spread over 
two Voice Pulser monitoring intervals (2×34 seconds). 
The  7940G  and  BT-100  phones  achieved  a  100%  detection 
rate  in  all  four  roles.  This  means  that  if  the  adversary  monitors 
7940G  or  BT-100  phones,  she  will detect  all VoIP  calls  between 
them via the continuity test. In contrast, the adversary will not be 
able  to  detect  calls  if  a  PAP2  phone  is  busy  when  it  initiates  or 
terminates  a  call.  However,  this  finding  does  not  imply  that  the 
PAP2  is  invulnerable  to  our  attack.  If  the  adversary  monitors  a 
PAP2 phone and a 7940G (or BT-100) phone, she can still detect 
the  VoIP  calls  between  them,  except  in  the  case  when  the  PAP2 
calls the 7940G (or BT-100) and the PAP2 terminates the call.  
A  phone  has  four  possible  roles.  For  call  setup,  a  phone  can 
either  send  the  setup  request  (call-setup  initiator)  or  receive  it 
(call-setup recipient). Similarly, for call termination, a phone can 
either  send  the  termination  request  (call-termination  initiator)  or 
receive it (call-termination recipient). 
Table  4  also  shows  that  the  false  alarm  rate  was  extremely 
low.  To  estimate  the  false  alarm  rates,  we  probed  the  phones 
continuously  for  over  13  hours  (1459  probes).  The  PAP2  phone 
only had a 0.2% false alarm rate  whereas the 7940G and BT-100 
had a rate of 0%. 
First,  we  used  the  following  steps  to  demonstrate  a  scenario 
for call correlation in Figure 10. The 7940G called the PAP2 after 
Voice  Pulser  had  started,  at  360  seconds,  and  the  7940G 
terminated  the  call  at  700sec.  For  the  7940G  phone  (call-setup 
initiator and call-termination initiator), the phone revealed its busy 
status  during  the  entire  call.  In  contrast,  the  PAP2  phone  (call-
setup recipient and call-termination recipient) only showed that it 
was  busy  when  the  call  setup  and  call  termination  steps  were 
performed.  
We  then  performed  experiments  where  the  three  phones  had 
different roles. The experimental steps are as follows:  
We  present  the  detection  rates  of  call  correlation  for  the 
7940G  and  PAP2  in  Table  5.  Since  the  7940G  and  BT-100  had 
the same detection rates in all roles, they are identical in deriving 
the  detection  rates  of  call  correlation.  In  general,  the  detection 
rates of the 7940G (and the equivalent BT-100) are better than the 
detection  rates  of  PAP2.  If  the  two  targeted  phones  are  both  a 
7940G (or BT-100), as in case 6 of Table 5, then the detection rate 
is  100%.  In  contrast,  if  the  two  targeted  phones  are  both  PAP2 
models  (case  5  of  Table  5),  then  the  detection  rate  is  0%.  If  the 
two  targeted  phones  are  7940G  (or  BT-100)  and  PAP2  phones, 
the  detection  rates  depend  on  phones’  type  and  their  roles  in  a 
call.  
02004006008001000time (sec)Cisco 7940G (caller)02004006008001000Linksys PAP2 (callee)time (sec)Table 4. Performance of busy-status detection 
Type 
Role 
Detection rate 
Call-setup initiator(caller); sending INVITE request 
Call-termination initiator; sending BYE request 
PAP2 
7940G  BT-100 
0% 
0% 
100% 
100% 
100% 
100% 
Call-setup recipient(callee); receiving INVITE request 
53%* 
100% 
100% 
Call-termination recipient; receiving BYE request 
100% 
100% 
100% 
False alarm rate 
No actions 
0.2% 
0% 
0% 
*: Tested by 17 samples 
Table 5. Detection rate of call correlation derived from Table 4 
Call setup 
Call termination 
Detection 
(continuity test) 
rate 
Detection rate (weak 
test) 
Detection 
(strong test) 
rate 
Case 1 
initiator 
PAP2 
recipient 
7940G* 
Initiator 
recipient 
PAP2 
7940G 
N/A 
0% 
PAP2 
7940G 
7940G 
PAP2 
7940G 
Case 2 
Case 3 
Case 4 
Case 5 
Case 6 
100% 
*: 7940G in this table can be replaced by BT-100 since they have same detection rate as shown in Table 4 
7940G 
PAP2 
PAP2 
PAP2 
7940G 
N/A 
N/A 
N/A 
N/A 
100% 
7940G 
PAP2 
7940G 
PAP2 
7940G 
PAP2 
7940G 
PAP2 
PAP2 
7940G 
100% 
53% 
100% 
0% 
0% 
0% 
0% 
53% 
0% 
100% 
4.  COUNTERMEASURES 
Busy-status  detection  relies  on  the  protocol-buffer  contention 
and  undetectability  of  probing  requests  by  a  callee.  Therefore, 
mechanisms  that  could  prevent  or  neutralize  protocol-buffer 
contention  or  enable  probe  detection  by  a  callee  would  serve  as 
effective defenses. 
Protocol-buffer  randomization.  Randomization  is  a  classic,  if 
somewhat  impractical,  technique  for  defending  against  both 
covert- and side-channel attacks. In our case, phone firmware can 
be modified to provide randomization in the available size of the 
protocol  buffer  or  the  transaction  life.  A  limitation  of  this 
technique  is  that  it  may  be  incompatible  with  the  manufacture’s 
firmware  updates.  A  simpler  countermeasure,  though  not  a 
permanent  solution,  is  for  the  VoIP  administrator  to  use  Voice 
Pulser to send “attack” packets at random intervals to the phones. 
This would introduce “noise” and reduce the adversary’s ability to 
estimate  the  number  of  available  protocol  buffer  slots.  To 
maintain  the  phones’  operability,  the  “attack”  packets  should  be 
sent  slowly  enough  that  they  would  not  fill  the  protocol  buffer. 
This  approach  is  scalable  in  the  sense  that  one  installation  could 
protect  many  phones.  One  limitation  of  this  approach  is  the 
availability  of  the  server  hosting  Voice  Pulser.  If  the  server  is 
unavailable, call privacy protection will also be unavailable.  
Firewall.  An  application-layer  firewall  could  filter  packets 
that exhibit probing patterns and limit the maximum probing rate. 
For  example,  the  INVITE-require  attack  could  be  avoided  by 
filtering  INVITE  requests  with  unsupported  extensions.  Such  an 
application-layer firewall has an inherent disadvantage: it can only 
recognize  busy-status  detection  attacks  with  known  patterns. 
Another drawback is that application-level firewalls cannot handle 
encrypted communications such as the S/MIME used for SIP end-
to-end  encryption.  Furthermore,  the  state  maintained  in  the 
application-level  firewall  may  become  another  side-channel. 
Another  approach  is  to  monitor  and  block  suspicious  periodic 
network traffic. Although it can be easily done, false detection is 
an issue.  
Full protocol-buffer alert. Alerting the user when the protocol 
buffer  is  full  is  a  simple  way  to  “unblind”  the  previously 
undetectable  busy-status  detection  probes.  The  SIP  phone  or  the 
server could simply display a message on the screen, leave a voice 
message, or send an email to alert the user of a potential attack.  
5.  RELATED WORK 
largely 
Current VoIP  privacy  attacks  against  low-latency  anonymous 
network  differ  from  our  attack  since  they  require  much  stronger, 
and 
impractical,  adversary  capabilities;  e.g.  global 
eavesdropping,  full  control  of  end-points,  and  malware  insertion 
capabilities.  Wright  et  al.  showed  that  the  text  can  be  extracted 
from  encrypted  VoIP  traffic  by  probabilistic  methods  [31]. 
Srivasta et al. confirmed the existence of VoIP calls by correlating 
flows, and required a global adversary who knows the number of 
flows  between  nodes  (including  VoIP  nodes)  of  an  anonymous 
network  [26].  In  Wang,  Chen  and  Jajodia’s  watermarking  attack, 
the adversary perturbs and monitors the timing of the VoIP flows 
between  a  VoIP  node  and  a  corresponding  anonymous  network 
end-point  [30].  Their  attacks  require  the  control  of  anonymous 
network end-points. In other attacks, the adversary has to resort to 
installing  malware  in  the  targeted  phones  [18].  However,  such 
attacks could be defeated by firmware integrity checks (e.g. use of 
Trusted  Platform  Modules  in  phones)  and  would  not  scalable  to 
more than very few targets. More interestingly, privacy attacks in 
anonymous networks cannot, and are not intended to, be used for 
call detection since they require longer data acquisition times than 
an entire phone call, which may  only last for seconds or minutes 
[2, 22].  
The idea of correlating the busy status of SIP phones with call 
records  is  also  similar  to  that  of  associating  users’  online/offline 
status in Instant Messaging to infer friendship relations, as shown 
in  the  work  of  Resig  et  al.  [25].  They  hypothesized  that  if  two 
users  go  online  and  go  offline  at  about  the  same  time,  the  two 
users  may  be  friends.  In  contrast  with  our  work,  Resig  et  al. 
assume that the user status (online/offline) was explicitly provided 
to the adversary by the users, while we must find the phone status 
(busy/not  busy)  in  a  manner  that  is  undetectable  by  the  targeted 
phone users.  
different 
The  idea  of  obtaining  remote  host  information  by  sending 
packets and analyzing responses has been used in the past, but in 
different  ways  with 
goals.  Operating-system 
fingerprinting can identify the operating-system versions based on 
how  TCP/IP  subsystem  responds  to  attack  packets  [23].  For 
example, the widely-used tool nmap [6] sends out packets in TCP, 
UDP,  and  ICMP  and  analyzes  the  types  of  responses  it  gets,  but 
not  their  timing.  While  some  of  these  techniques  do not  alert the 
remote  hosts  in  standard  TCP/IP  subsystems,  they  have  very 
different  goals  than  ours.  Our  attacks  discover  the  internal  state 
(busy  status)  of  a  network  node,  whereas  operating  system 
fingerprinting only distinguishes different types of network nodes.  
In  another  form  of  fingerprinting,  Gong,  Kiyavash,  and 
Borisov analyze the round-trip time to extract private information 
from  remote  hosts  [8].  They  sent  ICMP  packets  to  a  DSL  router 
and  used  the  time  series  of  response  times  to  fingerprint  the 
websites  accessed  through  that  router.  Our  attack  also  obtains 
remote  private  information  through  active  probing,  but  differs 
from the technique of Gong et al., in three ways. First, the goal of 
our  attacks  is  to  obtain  the  call-records  for  targeted  phones, 
whereas their goal was to identify the website accessed by a host 
behind  a  DSL  router.  Second,  our  attacks  can  penetrate 
application-level  proxies  while  their  ICMP  packets  cannot;  i.e., 