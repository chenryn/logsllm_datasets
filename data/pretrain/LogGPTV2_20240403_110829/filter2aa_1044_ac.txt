forward EAPOL packets over the bridge, presumably for security reasons [4]. Existing tools for performing bridge-
based 802.1x bypasses deal with this problem in one of two ways: patching the Linux kernel, or using high-level 
libraries such as Scapy [4][6]. Relying on kernel patches can be unwieldy, and relying on high level scripting languages 
such as  Python can slow the bridge under heavy loads. To make matters worse, none of the publicly available kernel 
patches work with the latest versions of Linux [17][18]. 
Figure 14 – 802.1x forwarding can be enabled using the proc filesystem 
Fortunately, the situation has dramatically improved since Duckwall’s script was released: as of 2012, the Linux 
kernel no longer must be patched in order to bridge EAPOL packets [11]. Instead, users can enable this feature using 
the proc filesystem [11]. We updated our implementation of Duckwall’s classical 802.1x bypass to reflect this, 
ensuring long-lasting reliability regardless of the kernel version in use.  
Bypassing Sticky MAC 
A second minor improvement that we made was to ensure that our classical 802.1x bypass accounted for the 
widespread use of Sticky MAC by modern authenticators. Most 802.1x capable switches created in recent years 
support a feature known as Stick MAC, which dynamically associates the MAC address of the supplicant to the switch 
port once the supplicant has successfully authenticated [28][29]. If another MAC address is detected on the switch 
port, a port security violation occurs and the port is blocked [28][29]. To keep this from occurring, our 
implementation sets the bridge and PHY interfaces to the MAC address of the authenticator and sets the upstream 
interface to the MAC address of the supplicant (see Figure 15). 
Page 21 of 37 
Figure 15 – bypassing Sticky MAC 
Support For Side Channel Interaction 
Perhaps the most significant improvement we made to the classical 802.1x bypass was to add support for remote 
access via a side channel, as described in III.4 Establishing a Side Channel. In Duckwall’s classical 802.1x bypass, all 
outbound ARP and IP traffic is initially blocked while the transparent bridge is being initialized. 
Figure 16 – The original 802.1x bypass by Duckwall, shown above, blocks all outbound ARP and IP traffic while the bridge is 
being initialized (script hosted by Mubix on Github.com) [18] 
Although these restrictions are eventually lifted when the transparent bridge setup is complete, they are still enough 
to cut off access through the side channel device, consequently causing loss of access to the rogue device. In order 
to maintain access to the device while the bridge is being initialized, we added a firewall exception that allows 
outbound traffic from our sidechannel interface only. 
Page 22 of 37 
Figure 17 – creating an exception for side channel traffic 
By default, our implementation allows outbound traffic to port 22 from the sidechannel interface, although we also 
provided users with the ability to specify an alternative port using a command line flag. 
Figure 18 – specifying an alternative egress port 
Conclusion 
Our improved classical bypass worked as expected when used against 802.1x-2004, as shown in the screenshot 
below. The attack can be performed with both Rogue Device A (basic implementation) and with Rogue Device B 
(mechanical splitters). The addition of mechanical splitters only enhance this technique, and is not an essential 
component of the attack itself. 
Figure 19 – performing a bridge-based 802.1x bypass 
Page 23 of 37 
Reproduction Command: 
./silentbridge --create-bridge --upstream UPSTREAM_IFACE_ --phy PHY_IFACE_ --client-mac SUPPLICANT_MAC_ADDRESS --switch-mac SWITCH_MAC_ADDRESS 
V. Bate n Switch Attack: An Alternative To Packet Injection 
Traditional 802.1x bypass techniques tend to focus on ways of interacting with a protected wired network without 
actually authenticating. Although this can be accomplished using packet injection when the protected network uses 
802.1x-2004 or earlier, a simpler approach is sometimes better. One situation in which this is particularly true is 
when 802.1.x-2010 is used to protect the wired network, as MACsec effectively denies us the opportunity to use 
packet injection. 
The Bait N Switch attack is a means of using stolen credentials to authenticate directly to a protected wired network 
without tripping port security. This allows the attacker to interact with the network without relying on packet 
injection. 
V.1 Bridge-Based Approach 
In the first variation of the Bait n Switch attack, we use the Rogue Device A configuration described in III.2 Rogue 
Device A: Pure Bridge-based Design. We begin the attack by performing the Classical Bridge-based 802.1x bypass 
described in IV. Improvements to Classical Bridge-based 802.1x Bypass, using the rogue device to establish a 
transparent bridge between the supplicant and authenticator as shown in Figure 20 below. 
Figure 20 – establishing a bridge-based 802.1x bypass in preparation for a Bait n Switch attack 
We then disconnect the supplicant from the network by bringing our PHY and bridge interfaces down. Next, we set 
the MAC address of our upstream interface to the MAC address of the supplicant and use the upstream interface to 
authenticate with the authenticator using stolen RADIUS credentials. Finally, we give our upstream interface a static 
IP address that matches the one previously assigned to the client device.  
Page 24 of 37 
Figure 21 – performing a Bait n Switch attack 
In essence, the Bait n Switch attack silently swaps the authorized device with the attacker’s rogue device. The attack 
is simple, can be used to achieve full network interaction, and is reasonably stealthy so long as performed during 
off-hours when the affected supplicant is unlikely to be in use. 
V.2 Using Mechanical A/B Splitters 
Using the Rogue Device B configuration described in III.3 Rogue Device B: Mechanically Assisted Bypass, we can use 
the Bait n Switch attack to authenticate with networks protected by 802.1x-2010 and MACsec. When combined with 
the Rogue Gateway Attack described in VI. Defeating MACsec Using Rogue Gateway Attacks, this technique can 
bypass 802.1x-2010 in cases where weak EAP implementations are used. 
To begin the attack, we first introduce our rogue device to the network as shown in Figure 22 below. As we do this, 
we make sure that both A/B splitters are in position A, which preserves the direct physical link between the 
authenticator and supplicant.  
Page 25 of 37 
Figure 22 – preparing to perform Bait n Switch using Rogue Device B configuration 
We then disconnect the supplicant from the network by bringing our PHY and bridge interfaces down and placing 
the splitters in the B position, which reroutes the physical link to the rogue device. Next, we set the MAC address of 
our upstream interface to the MAC address of the supplicant and use it to authenticate with the authenticator using 
stolen RADIUS credentials. Finally, we give our upstream interface a static IP address that matches the one previously 
assigned to the supplicant.  
Figure 23 – performing the Bait n Switch using Rogue Device B configuration 
VI. Defeating MACsec Using Rogue Gateway Attacks 
The 802.1x bypass techniques pioneered by Riley, “Abb,” Duckwall, and later improved upon by Legrand all take 
advantage of the same fundamental security issues that affect 802.1x-2004: the standard does not provide 
encryption or the ability to perform authentication on a packet-by-packet basis [3][4][6][7]. 
Page 26 of 37 
To address these issues, the IEEE developed a new standard, 802.1x-2010, which uses MACsec to provide Layer 2 
encryption and packet-by-packet integrity checks [7]. MACsec provides encryption on a hop-by-hop basis, which 
successfully mitigates the bridge-based attacks that we discussed in II. Background and Prior Work and IV. 
Improvements to Classical Bridge-based 802.1x Bypass while also providing network administrators with a means to 
inspect data in transit [7][8]. 
MACsec and 802.1x-2010 work in three phases: authentication and master key distribution, session key agreement, 
and session secure [7][8][9]. Authentication is intended to be performed using EAP, although 802.1x-2010 allows for 
a Pre-Shared Key (PSK) to be used as well, either as a fallback or as a direct replacement for EAP. 
Figure 24 
When EAP is used as the authentication mechanism, the entire process is reminiscent of WPA2-EAP, in that it 
involves a supplicant (client device), authenticator (switch), and authentication server. When a device is first 
connected to a protected switch port, the authenticator initiates the EAP authentication process by sending an EAP-
Request-Identity frame to the supplicant [7][8][9]. The supplicant then responds with its identity, which is forwarded 
by the authenticator to the authentication server as a RADIUS Access-Request message.  
Figure 25 
At this point, the supplicant and authentication server negotiate an EAP type that supports Master Session Key (MSK) 
derivation, and the supplicant attempts to authenticate using the agreed-upon EAP type [7][8][9]. If authentication 
Page 27 of 37 
succeeds, the supplicant and switch perform the session key agreement and then enter the Session Secure state, 
where MACsec’s Layer 2 encryption becomes active. 
Figure 26 
With a couple of exceptions, which we will examine shortly, the hop-by-hop encryption provided by MACsec 
prevents attackers from bypassing 802.1x-2010 by bridging two network interfaces together as is possible with 
802.1x-2004 [10]. Possible exceptions are provider bridges (PBs) and backbone bridges (PBBs), which warrant further 
investigation despite being outside the scope of this discussion [10]. However, it is possible for an attacker to 
introduce a rogue device to a network protected by 802.1x-2010 using more rudimentary methods. 
Page 28 of 37 
VI.1 Defeating MACsec Using Rogue Gateway Attacks 
Significantly, 802.1x-2010 still uses EAP to authenticate new devices to the network [7]. As we described briefly in II. 
Background and Prior Work, there are many ways of implementing EAP, and most of them suffer from some sort of 
security issue. The 802.1x-2010 standard allows any EAP method so long as it meets the following mandatory 
requirements: 
§ 
Supports mutual authentication between client and server 
§ 
Supports derivation of keys that are at least 128 bits in length 
§ 
Generates an MSK of at least 64 octets 
Most of the commonly seen weak EAP methods, including EAP-PEAP and EAP-TTLS, meet these requirements. It is 
up to individual vendors to decide whether or not these methods should be supported, and up to system 
administrators to choose EAP methods that can withstand man-in-the-middle attacks. 
The implication of support for weak EAP methods is that security of 802.1x-2010 deployments are still only strong 
as the EAP methods used. Unless the target deploys strong forms of EAP such as EAP-TLS or EAP-PEAP with globally 
enforced rejection of invalid certificates, an attacker can simply repurpose existing principles for attacking these 
authentication protocols as a means of bypassing port security. 
Consider a scenario in which EAP-TTLS provides authentication to a network secured using 802.1x-2010. The attacker 
could introduce a Rogue Device B between the supplicant and authenticator as shown in Figure 27 below. 
Figure 27 
As described in III.3 Rogue Device B: Mechanically Assisted Bypass, this rogue device configuration makes use of two 
mechanically controlled A/B ethernet splitters: when the splitters are in the “A” position, the supplicant is allowed 
to communicate directly with the authenticator as shown in Figure 27 above. To initiate the attack, the attacker 
brings the upstream interface down and flips the splitters to the “B” position as shown in Figure 28 below. This 
provides direct connectivity between the rogue device and the supplicant. The attacker then starts hostapd as a 
rogue RADIUS server, configuring it to listen on the rogue device’s PHY interface. 
Page 29 of 37 
Figure 28 
The attacker then sends a spoofed EAPOL-Start frame to hostapd, causing hostapd to send an EAP-Request-Identity 
frame to the supplicant. In response, the supplicant attempts to authenticate with the rogue device. As long as the 
supplicant accepts the rogue device’s x.509 certificate, the attacker will capture an MS-CHAPv2 challenge and 
response from the supplicant which can be cracked to obtain plaintext credentials [13]. 
Once the attacker cracks the captured hashes, a Bait n Switch attack connects the rogue device to the network as 
shown in Figure 29 below. 
Figure 29 
Page 30 of 37 
VII. Dealing with Improvements to Peripheral Device Security  
Previously, we described how improved 802.1x support by peripheral devices such as multifunction printers has 
made it increasingly difficult to bypass wired port security by looking for policy exceptions. While improved adoption 
of 802.1x is a step in the right direction, it does not necessarily translate to strong port security for peripheral devices. 
802.1x authentication relies upon EAP, and most forms of EAP have known security issues that have existed for over 
a decade [13]. 
Adoption rates for secure forms of EAP, such as EAP-TLS or EAP-PEAP with forced rejection of untrusted certificates, 
are relatively poor due to the complexity involved with deploying these technologies at scale [12]. For peripheral 
devices such as printers, the adoption of secure EAP is even worse, considering that very few cost-effective 
peripheral devices can be configured using Group Policy. 
Thus, while port-security exceptions for peripheral devices may not be as prevalent as they used to be, peripheral 
devices themselves are still highly viable entry points because they are less likely to be configured using strong forms 
of EAP. What is missing are techniques for attacking weak forms of EAP within a wired network.  
In this section, we introduce two attacks against EAP-MD5 and EAP-PEAP on wired networks, since these are the two 
forms of weak EAP most commonly used by peripheral devices and even some workstations. These attacks allow us 
to continue to use peripheral devices as entry points to networks protected by 802.1x-2004. 
VII.1 EAP-MD5 Forced Reauthentication Attack 
EAP-MD5 is one of the most widely used forms of EAP used to protect peripheral devices such as multifunction 
printers and cheap IP phones. Despite its many flaws, it is one of the easiest forms of EAP to setup and configure, 
which makes it particularly well suited for this purpose. 
VII.1.A Passive Attack Against EAP-MD5 
Consider how we can use the existing attacks against EAP-MD5 described in II.4.A EAP-MD5 in conjunction with the 
classical 802.1x bypass described in II. Background and Prior Work and IV. Improvements to Classical Bridge-based 
802.1x Bypass to attack peripheral devices. We can use bridges and MAC spoofing to place a rogue device between 