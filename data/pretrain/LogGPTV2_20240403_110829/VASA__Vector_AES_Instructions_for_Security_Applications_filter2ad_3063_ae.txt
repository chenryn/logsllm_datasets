5.3 EMP-OT
For oblivious transfers, we evaluated EMP-OT [90] (cf. § 4.3.2). We
ran it single-threaded with 100 million OT operations computed on
localhost. For the one-time base OT operations, that use public-key
crypto, the default number of OT operations was used, and times
were excluded from the throughput results. As base OT protocols,
we use the protocol of Naor and Pinkas [74] for passive security
assumptions and SimplestOT [23] for active security, except for
FERRET OT [93] which uses its own base OT protocol. The library
uses fixed-key AES for its PRG [13], the optimized version of [8] of
the protocol by Ishai et al. [57] for passive security, and the variant
by Asharov et al. [9] for active security.
In addition, we also measured the performance of FERRET-
OT [93] as it is a protocol with very little communication after the
initial base OTs. EMP-OT was compiled with Clang. The results are
shown in Table 5. We note the range of performance improvements
of 14.8 - 30.1% from the use of VAES. We also observe that the
performance increase is particularly high for random OTs (R-OTs)
which can be attributed to a lower amount of system interaction
due to the reduced amount of communication for R-OTs.
Table 4: Geometric means of the run-times in milliseconds
of ABY [25] for the evaluation of AES, SHA-1, SCS-PSI,
and Phasing-PSI with the detailed parameters as described
in § 5.2. “Ref” indicates the reference ABY implementation,
AES-NI and VAES indicate batched implementations. Gar-
bling scheme names are as introduced in § 4.3. Improv%
shows the performance improvement of VAES over AES-NI.
Discussion. From the OT performance data in Table 5, we see that
AVX512 and VAES notably improve performance, by 20 - 30% for
the EMP libraries’ traditional OT implementation, which use VAES
for the PRG and AVX512 for bit transposition. Additionally, we
observe mild performance improvements of 16.6% for the FERRET
protocols, mainly using AES to generate the random matrices in
the core matrix-vector multiplication.
ACSAC’21,December6–10,2021,VirtualEvent,USAJean-PierreMünch,ThomasSchneider,andHosseinYalame5.1EvaluationPlatformForallmeasurements,weuseanAppleMacbookProwithanIntelCorei7-1068NG7,2x16GBofdualrankSamsungLPDDR4-3733RAM(K4UCE3Q4AA-MGCL).ItrunsArchLinuxusingtheLinux5.9.13.arch1-1kernelalongwithGCC10.2.0andClang11.0.0whichwereusedforcompilingthecode.ForcomparativeAES-NImea-surementsweusethesamemachine.5.2ABYForABY(cf.§4.3.1),weranthebenchmarkswithbothpartieslocallyusingasinglesamplepertripleofcircuit,schemeandimplementationbackend(reference,AES-NI,andVAES).Foreachmeasurement,thegarblingtimesaretakenfromthelogsofthepartyrunningthegarblingoperationandthedata-input-dependentonlinetimefromtheotherpartyrunningtheevaluationwhichareexecutedaftereachotherinABY.Thisisdonetocapturethepurecomputationtimeforgarblingandevaluation.Fortheevaluation,weusecircuitsofAES(with65×parallelSIMD),SHA-1(with512-bitinputand63×parallelSIMD),andforcircuit-basedprivatesetintersection(PSI)thesort-compare-shuffle(SCS)circuit(1024elementsof32-bits)[49],andcircuitphasing(1024elementspersideof32-bit,3hashfunctions,ε=1.2,stashofsize1)[80].ForthesummaryinTable4,wecomputedthegeometricmeanovertheperformanceresultsofthefourabovecircuits.ThedetailedmeasurementsaregiveninTable8inAppendixB.ThebinarieswereproducedbyGCC.Wenotearangeofperformanceimprovementsfromtheuseofbatchedexecutionof67-161%andanadditional17-171%fromtheuseofVAES.Inparticular,weobservebetterperformanceimprovementsfromVAESforgarblingschemesneedingmorecryptographicoperationspergate,e.g.,circularlysecurecomputation(CIRC)benefitsmorethanpublic-randompermutationbasedcomputation(PRP)(cf.§4.3.1).Discussion.WemaketwokeyobservationsfortheABYbench-marksinTable4:First,usingbatchsizeslargerthanoneincreasesthethroughput,ascanbeseenfromtheruntimedecreaseofthebaselinereference(by80-130%).Second,theuseofVAESdoesin-creaseperformancefurther,moresoinscenarioswheremoreAESoperationsaredonepergate,i.e.,withtheschemesnotusingfixedAESkeyswithHalfGates[13,97].Additionally,aninvestigationusingaprofilershowedahighmiss-speculationratefortheAES-NIcodeusingregular"if"brancheswiththeconditiondependingonanunpredictablelabelbit.Therefore,theuseofmaskingfacili-tatedbyAVX512isasecondaryfactorcontributingtoperformanceasitdoesnotinvokespeculativeexecutionmiss-predictingthebranchwith50%probability.Finally,wenotetheoddbehaviorthatmulti-instancesecurecomputation(MI)issignificantlyslowerthancircular-securecomputation(CIRC)forAES-NIduringtheevalua-tioneventhoughtheyshouldbetiedgiventhattheyperformsimilarAESoperations.ConcerningtheimpactofVAESbeyondimprov-ingspeculativeexecutionbehavior,weseeperformanceincreasesof27%(garbling)and36%(evaluation)forfixed-keyAESbecausetheAESprocessingmakesuponlyasomewhatsmallamountofprocessingtime.TheHalfGatesvariable-keyedschemesseea47%(MIgarbling),43%(CIRCevaluation),and57%(CIRCgarbling)per-formanceincrease.PRF-basedgarblingschemesseethelargestincreasewith51%(garbling)and75%(evaluation)duetoalargeamountofAESoperationsnecessary,giventhateachANDgategarblingrequires8AESoperations,eachANDevaluation2,eachXORgarbling3,andeachXORevaluationatleast1.5.3EMP-OTForoblivioustransfers,weevaluatedEMP-OT[90](cf.§4.3.2).Weranitsingle-threadedwith100millionOToperationscomputedonlocalhost.Fortheone-timebaseOToperations,thatusepublic-keycrypto,thedefaultnumberofOToperationswasused,andtimeswereexcludedfromthethroughputresults.AsbaseOTprotocols,weusetheprotocolofNaorandPinkas[74]forpassivesecurityassumptionsandSimplestOT[23]foractivesecurity,exceptforFERRETOT[93]whichusesitsownbaseOTprotocol.Thelibraryusesfixed-keyAESforitsPRG[13],theoptimizedversionof[8]oftheprotocolbyIshaietal.[57]forpassivesecurity,andthevariantbyAsharovetal.[9]foractivesecurity.Inaddition,wealsomeasuredtheperformanceofFERRET-OT[93]asitisaprotocolwithverylittlecommunicationaftertheinitialbaseOTs.EMP-OTwascompiledwithClang.TheresultsareshowninTable5.Wenotetherangeofperformanceimprovementsof14.8-30.1%fromtheuseofVAES.WealsoobservethattheperformanceincreaseisparticularlyhighforrandomOTs(R-OTs)whichcanbeattributedtoaloweramountofsysteminteractionduetothereducedamountofcommunicationforR-OTs.Table4:Geometricmeansoftherun-timesinmillisecondsofABY[25]fortheevaluationofAES,SHA-1,SCS-PSI,andPhasing-PSIwiththedetailedparametersasdescribedin§5.2.“Ref”indicatesthereferenceABYimplementation,AES-NIandVAESindicatebatchedimplementations.Gar-blingschemenamesareasintroducedin§4.3.Improv%showstheperformanceimprovementofVAESoverAES-NI.GarblingSchemeOperationImpl.PRPMICIRCPRFRef[25]110.6———AES-NI47.161.072.1197.4VAES37.041.346.0130.3GarblingImprov%27.2%47.5%56.7%51.5%Ref[25]56.5———AES-NI31.159.841.3103.3VAES22.929.428.959.0EvaluationImprov%36.1%103.5%43.0%75.0%Discussion.FromtheOTperformancedatainTable5,weseethatAVX512andVAESnotablyimproveperformance,by20-30%fortheEMPlibraries’traditionalOTimplementation,whichuseVAESforthePRGandAVX512forbittransposition.Additionally,weobservemildperformanceimprovementsof16.6%fortheFERRETprotocols,mainlyusingAEStogeneratetherandommatricesinthecorematrix-vectormultiplication.138VASA: Vector AES Instructions for Security Applications
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 5: Run-times in seconds of 10 million OTs for EMP-OT [90] before "Ref" and after implementation of VAES support.
The functionalities are general OT (OT), Correlated OT (C-OT), and Random OT (R-OT). Improv% shows the performance
improvement of VAES over AES-NI. Higher throughput is better.
Table 6: Run-times in milliseconds for the evaluation of various parts of SHA256 in EMP-AGMPC [90, 92] (§ 5.4). The compu-
tation backend (“Comp. Backend”) indicates the implementation strategy used. The evaluated parts are the one-time setup,
the function-independent preprocessing, the function-dependent preprocessing, and the input-dependent online phase. The
values in parenthesis show the performance improvement in percent over the reference. Lower run-times are better.
Table 7: Geometric mean of run-times in seconds for CrypTFlow2 [82] inference (§ 5.5) using the SqueezeNetImgNet,
SqueezeNetCIFAR, ResNet50, and DenseNet121 networks. Ring32-OT denotes the 32-bit ring-based implementation using OT.
"Ref" indicates the reference implementation using AES-NI and VAES indicates our version using VAES. Improv% shows the
performance improvement of VAES over AES-NI. Lower run-times are better.
5.4 EMP-AGMPC
For EMP-AGMPC [90, 92] (cf. § 4.3.3), we ran SHA256 with three par-
ties on localhost with binaries compiled with Clang. The runs were
performed 11 times and then averaged. After the initial measure-
ments, we decided to benchmark with batching applied and while
using only a VAES-enabled library implementation of AES-ECB, the
PRG, and the OT functionalities. The resulting performance num-
bers are shown in Table 6. In this table, the computation backend
indicates the implementation strategy used, with the numbers in
parenthesis being the performance improvements over the previous
row.
VASA:VectorAESInstructionsforSecurityApplicationsACSAC’21,December6–10,2021,VirtualEvent,USATable5:Run-timesinsecondsof10millionOTsforEMP-OT[90]before"Ref"andafterimplementationofVAESsupport.ThefunctionalitiesaregeneralOT(OT),CorrelatedOT(C-OT),andRandomOT(R-OT).Improv%showstheperformanceimprovementofVAESoverAES-NI.Higherthroughputisbetter.OTFunctionalitySecurityLibraryImplOTC-OTR-OTEMP-OTIKNP[8,57]Ref[8,57,90]0.350.200.33VAES0.280.160.25Improv%20.0%20.0%24.2%EMP-OTFERRET[93]Ref[90,93]1.331.141.32VAES1.130.991.09PassiveImprov%15.0%10.4%17.4%EMP-OTALSZ[9]Ref[9,90]0.390.240.38VAES0.320.190.29Improv%17.9%20.8%23.7%EMP-OTFERRET[93]Ref[90,93]1.381.21.37VAES1.211.041.16Improv%12.3%13.3%15.3%+RandomChoiceRef[90,93]—0.94—VAES—0.80—ActiveImprov%—14.8%—Table6:Run-timesinmillisecondsfortheevaluationofvariouspartsofSHA256inEMP-AGMPC[90,92](§5.4).Thecompu-tationbackend(“Comp.Backend”)indicatestheimplementationstrategyused.Theevaluatedpartsaretheone-timesetup,thefunction-independentpreprocessing,thefunction-dependentpreprocessing,andtheinput-dependentonlinephase.Thevaluesinparenthesisshowtheperformanceimprovementinpercentoverthereference.Lowerrun-timesarebetter.OperationComp.BackendSetupFunction-IndependentFunction-DependentOnlineRef[90,92]45.0564.5247.07.0VAES45.9(−2.1%)580.7(−2.8%)250.6(−1.4%)6.7(5.0%)Batched+VAES45.4(−0.9%)453.0(24.6%)250.7(−1.5%)7.0(0.7%)Table7:Geometricmeanofrun-timesinsecondsforCrypTFlow2[82]inference(§5.5)usingtheSqueezeNetImgNet,SqueezeNetCIFAR,ResNet50,andDenseNet121networks.Ring32-OTdenotesthe32-bitring-basedimplementationusingOT."Ref"indicatesthereferenceimplementationusingAES-NIandVAESindicatesourversionusingVAES.Improv%showstheperformanceimprovementofVAESoverAES-NI.Lowerrun-timesarebetter.Sub-OperationTypeImplConvolutionTruncationReLUMatrixMultiplicationBatchNormalizationMaxPoolTotalRef[82]96.530.79.694.015.63.7126.8VAES97.021.06.894.513.52.5119.1Ring32-OTImprov%−0.5%46.5%40.4%−0.5%15.9%47.1%6.5%5.4EMP-AGMPCForEMP-AGMPC[90,92](cf.§4.3.3),weranSHA256withthreepar-tiesonlocalhostwithbinariescompiledwithClang.Therunswereperformed11timesandthenaveraged.Aftertheinitialmeasure-ments,wedecidedtobenchmarkwithbatchingappliedandwhileusingonlyaVAES-enabledlibraryimplementationofAES-ECB,thePRG,andtheOTfunctionalities.Theresultingperformancenum-bersareshowninTable6.Inthistable,thecomputationbackendindicatestheimplementationstrategyused,withthenumbersinparenthesisbeingtheperformanceimprovementsoverthepreviousrow.VASA:VectorAESInstructionsforSecurityApplicationsACSAC’21,December6–10,2021,VirtualEvent,USATable5:Run-timesinsecondsof10millionOTsforEMP-OT[90]before"Ref"andafterimplementationofVAESsupport.ThefunctionalitiesaregeneralOT(OT),CorrelatedOT(C-OT),andRandomOT(R-OT).Improv%showstheperformanceimprovementofVAESoverAES-NI.Higherthroughputisbetter.OTFunctionalitySecurityLibraryImplOTC-OTR-OTEMP-OTIKNP[8,57]Ref[8,57,90]0.350.200.33VAES0.280.160.25Improv%20.0%20.0%24.2%EMP-OTFERRET[93]Ref[90,93]1.331.141.32VAES1.130.991.09PassiveImprov%15.0%10.4%17.4%EMP-OTALSZ[9]Ref[9,90]0.390.240.38VAES0.320.190.29Improv%17.9%20.8%23.7%EMP-OTFERRET[93]Ref[90,93]1.381.21.37VAES1.211.041.16Improv%12.3%13.3%15.3%+RandomChoiceRef[90,93]—0.94—VAES—0.80—ActiveImprov%—14.8%—Table6:Run-timesinmillisecondsfortheevaluationofvariouspartsofSHA256inEMP-AGMPC[90,92](§5.4).Thecompu-tationbackend(“Comp.Backend”)indicatestheimplementationstrategyused.Theevaluatedpartsaretheone-timesetup,thefunction-independentpreprocessing,thefunction-dependentpreprocessing,andtheinput-dependentonlinephase.Thevaluesinparenthesisshowtheperformanceimprovementinpercentoverthereference.Lowerrun-timesarebetter.OperationComp.BackendSetupFunction-IndependentFunction-DependentOnlineRef[90,92]45.0564.5247.07.0VAES45.9(−2.1%)580.7(−2.8%)250.6(−1.4%)6.7(5.0%)Batched+VAES45.4(−0.9%)453.0(24.6%)250.7(−1.5%)7.0(0.7%)Table7:Geometricmeanofrun-timesinsecondsforCrypTFlow2[82]inference(§5.5)usingtheSqueezeNetImgNet,SqueezeNetCIFAR,ResNet50,andDenseNet121networks.Ring32-OTdenotesthe32-bitring-basedimplementationusingOT."Ref"indicatesthereferenceimplementationusingAES-NIandVAESindicatesourversionusingVAES.Improv%showstheperformanceimprovementofVAESoverAES-NI.Lowerrun-timesarebetter.Sub-OperationTypeImplConvolutionTruncationReLUMatrixMultiplicationBatchNormalizationMaxPoolTotalRef[82]96.530.79.694.015.63.7126.8VAES97.021.06.894.513.52.5119.1Ring32-OTImprov%−0.5%46.5%40.4%−0.5%15.9%47.1%6.5%5.4EMP-AGMPCForEMP-AGMPC[90,92](cf.§4.3.3),weranSHA256withthreepar-tiesonlocalhostwithbinariescompiledwithClang.Therunswereperformed11timesandthenaveraged.Aftertheinitialmeasure-ments,wedecidedtobenchmarkwithbatchingappliedandwhileusingonlyaVAES-enabledlibraryimplementationofAES-ECB,thePRG,andtheOTfunctionalities.Theresultingperformancenum-bersareshowninTable6.Inthistable,thecomputationbackendindicatestheimplementationstrategyused,withthenumbersinparenthesisbeingtheperformanceimprovementsoverthepreviousrow.VASA:VectorAESInstructionsforSecurityApplicationsACSAC’21,December6–10,2021,VirtualEvent,USATable5:Run-timesinsecondsof10millionOTsforEMP-OT[90]before"Ref"andafterimplementationofVAESsupport.ThefunctionalitiesaregeneralOT(OT),CorrelatedOT(C-OT),andRandomOT(R-OT).Improv%showstheperformanceimprovementofVAESoverAES-NI.Higherthroughputisbetter.OTFunctionalitySecurityLibraryImplOTC-OTR-OTEMP-OTIKNP[8,57]Ref[8,57,90]0.350.200.33VAES0.280.160.25Improv%20.0%20.0%24.2%EMP-OTFERRET[93]Ref[90,93]1.331.141.32VAES1.130.991.09PassiveImprov%15.0%10.4%17.4%EMP-OTALSZ[9]Ref[9,90]0.390.240.38VAES0.320.190.29Improv%17.9%20.8%23.7%EMP-OTFERRET[93]Ref[90,93]1.381.21.37VAES1.211.041.16Improv%12.3%13.3%15.3%+RandomChoiceRef[90,93]—0.94—VAES—0.80—ActiveImprov%—14.8%—Table6:Run-timesinmillisecondsfortheevaluationofvariouspartsofSHA256inEMP-AGMPC[90,92](§5.4).Thecompu-tationbackend(“Comp.Backend”)indicatestheimplementationstrategyused.Theevaluatedpartsaretheone-timesetup,thefunction-independentpreprocessing,thefunction-dependentpreprocessing,andtheinput-dependentonlinephase.Thevaluesinparenthesisshowtheperformanceimprovementinpercentoverthereference.Lowerrun-timesarebetter.OperationComp.BackendSetupFunction-IndependentFunction-DependentOnlineRef[90,92]45.0564.5247.07.0VAES45.9(−2.1%)580.7(−2.8%)250.6(−1.4%)6.7(5.0%)Batched+VAES45.4(−0.9%)453.0(24.6%)250.7(−1.5%)7.0(0.7%)Table7:Geometricmeanofrun-timesinsecondsforCrypTFlow2[82]inference(§5.5)usingtheSqueezeNetImgNet,SqueezeNetCIFAR,ResNet50,andDenseNet121networks.Ring32-OTdenotesthe32-bitring-basedimplementationusingOT."Ref"indicatesthereferenceimplementationusingAES-NIandVAESindicatesourversionusingVAES.Improv%showstheperformanceimprovementofVAESoverAES-NI.Lowerrun-timesarebetter.Sub-OperationTypeImplConvolutionTruncationReLUMatrixMultiplicationBatchNormalizationMaxPoolTotalRef[82]96.530.79.694.015.63.7126.8VAES97.021.06.894.513.52.5119.1Ring32-OTImprov%−0.5%46.5%40.4%−0.5%15.9%47.1%6.5%5.4EMP-AGMPCForEMP-AGMPC[90,92](cf.§4.3.3),weranSHA256withthreepar-tiesonlocalhostwithbinariescompiledwithClang.Therunswereperformed11timesandthenaveraged.Aftertheinitialmeasure-ments,wedecidedtobenchmarkwithbatchingappliedandwhileusingonlyaVAES-enabledlibraryimplementationofAES-ECB,thePRG,andtheOTfunctionalities.Theresultingperformancenum-bersareshowninTable6.Inthistable,thecomputationbackendindicatestheimplementationstrategyused,withthenumbersinparenthesisbeingtheperformanceimprovementsoverthepreviousrow.139ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame
Here, VAES allow to improve performance by up to 28%. The
most substantial performance improvement is in the function-
independent pre-processing phase. During that phase, the code
uses additional garbling and evaluation techniques to prepare for
the following phases based on the number of gates of the MPC
function to be computed.
Discussion. The AGMPC performance data (in Table 6) shows sub-
stantial performance differences. The performance increase from
VAES in the online phase stems from the OT used with the ex-
tra batching moving values out of registers again due to the gap
between successive accesses. The most notable improvement is
the 25% performance increase through batching in the function-
independent preprocessing phase combined with VAES. This is be-
cause the garbling operations used in that phase benefit sufficiently
from the batching, and there are not too many XORs sparsing out
the AND gates and their memory.
5.5 CrypTFlow2
As CrypTFlow2 [82] (cf. § 4.3.4) uses EMP-OT internally, it is a
natural target to investigate how the internal improvements ben-
efit the overall performance of a more end-to-end application. As
benchmarks we run inference for the SqueezeCIFAR, ResNet50,
DenseNet121, and SqueezeNetImgNet networks. Each of these net-
works has its dedicated driver executable as usual for this appli-
cation, was compiled using GCC and run via localhost with both
parties on the same machine, to focus on the computational. The
default settings used did utilize multiple load-intensive threads for
both the client and the server, but had no noticeable impact on
performance consistency.
A summary of the results using the geometric mean is given in
Table 7 and the details are shown in Table 9 in Appendix B. Times
below 1 second were omitted from the table.
Discussion. Table 7 shows that the VAES-based speed-up for the
OT-based Ring32 implementation is 6.5% in total. The non-linear
layers have particularly contributed to this improvement, with both
the ReLU and MaxPool layers improving by over 40%. In particular,
we observe no performance changes for the linear convolution and
matrix multiplication steps for the Ring32 implementation. This is
because these are primarily bound by the speed of the operating
system interaction. We can also conceive that the performance
improvement for the Ring32 implementation does stem from the
relatively short focus on VAES during the operations.
6 CONCLUSION AND FUTURE WORK
In this work, we have shown how AES-NI and VAES can be used
to speed up MPC protocols and applications, in particular for the
case where operations are not known a priori.
Summary. We started with discussing how dynamic batching
and its extensions and optimizations use deferred execution to
provide better batches of AES calls to the hardware units. Next,
we have discussed how more explicit measures in the code like
SIMD gates and layering find batches of tasks with more invasive
code modifications. Furthermore, we have discussed how to
compute the batched calls using abstract pre- and post-processing
and platform-specific AES computation in our memory-oriented
computation strategy. Our alternative register-oriented strategy
accepted code duplication for a low-level register value oriented
code description that the compiler and the processor can execute
well more easily. Following that, we applied these techniques
to ABY [13, 25, 97], EMP-OT [90], EMP-AGMPC [90, 92], and
Microsoft CrypTFlow2 [82]. For ABY we implemented additional
garbled circuit variants [40, 41, 97] for comparison. We then
evaluated the performance impact of the use of VAES and batching
techniques. In ABY, these batching techniques have significantly
increased performance without changing the hardware require-
ments. The use of VAES has yielded further significant performance
improvements in ABY, EMP-OT, Microsoft CrypTFlow2, and some
parts of EMP-AGMPC.
Future Work. Our research can be extended in multiple directions.
Improved Modelization. The techniques presented in § 4.1 and
§ 4.2 could be further improved. A more theoretical modelization
and a more detailed analysis of the interaction with cache effects
could yield valuable insights for future implementations.
Merging Register- and Memory-oriented Computation. Our
computation techniques from § 4.2 require to make a manual
choice between low code duplication, high performance, and
clarity to the compiler. Further research could find techniques to
automatically achieve low code duplication, high performance
and clarity. For this, techniques from programming language and
compiler research might be useful.
Further Applications in MPC. VAES and the other AVX512 exten-
sions can be used to improve performance in further applications
in MPC such as the most recent garbling schemes [10, 43, 85] that
reduce communication (which is the main bottleneck in MPC) at
the cost of more computation.
AVAILABILITY
The open source code of our changed VAES implementations is
freely available under the permissive Apache license at https://
encrypto.de/code/VASA.
ACKNOWLEDGMENTS
We sincerely thank Nir Drucker as well as Shay Gueron for con-
tacting us with very helpful comments and pointers to the history
of VAES which helped us to substantially improve our paper. Shay
Gueron was the inventor of the concept, perceived usages and mo-
tivation, architecture, and microarchitectural implementation for
vectorized AES in Intel processors when he was with Intel.
This project received funding from the European Research Coun-
cil (ERC) under the European Union’s Horizon 2020 research and
innovation program (grant agreement No. 850990 PSOTI). It was co-
funded by the Deutsche Forschungsgemeinschaft (DFG) — SFB 1119
CROSSING/236615297 and GRK 2050 Privacy & Trust/251805230,
and by the German Federal Ministry of Education and Research
and the Hessen State Ministry for Higher Education, Research and
the Arts within ATHENE.
140VASA: Vector AES Instructions for Security Applications
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
REFERENCES
[1] Nitin Agrawal, Ali Shahin Shamsabadi, Matt J. Kusner, and Adrià Gascón. 2019.
QUOTIENT: Two-Party Secure Neural Network Training and Prediction. In CCS.
[2] Kahraman Akdemir, Martin Dixon, Wajdi Feghali, Patrick Fay, Vinodh Gopal,
Jim Guilford, Erdinc Ozturk, Gil Wolrich, and Ronen Zohar. 2010. Break-
through AES performance with intel AES new instructions. White paper
(2010). https://www.intel.ua/content/dam/www/public/us/en/documents/white-
papers/aes-breakthrough-performance-paper.pdf.
[3] Martin R. Albrecht, Christian Rechberger, Thomas Schneider, Tyge Tiessen, and
Michael Zohner. 2015. Ciphers for MPC and FHE. In EUROCRYPT.
[4] MPC Alliance. 2020. MPC Alliance. https://www.mpcalliance.org/
[5] AMD. 2021. AMD64 Architecture Programmer’s Manual: Volumes 1-5. Advanced
Micro Devices, Inc. https://www.amd.com/system/files/TechDocs/40332.pdf.
[6] Nicolas Aragon, Paulo Barreto, Slim Bettaieb, Loïc Bidoux, Olivier Blazy, Jean-
Christophe Deneuville, Philippe Gaborit, Shay Gueron, Tim Guneysu, and Car-
los Aguilar Melchor. 2017. BIKE: Bit Flipping Key Encapsulation. (2017).
[7] Arm. 2021. Arm Architecture Reference Manual. Arm Limited.
//documentation-service.arm.com/static/60119835773bb020e3de6fee?token=.