### Technologies Used by Top-Ranked Websites Over Time

The technologies we observed in the top-ranked websites over time include JavaScript, Flash, Java, and Silverlight. Figure 2 illustrates the prevalence of these technologies from 1997 to 2016.

**JavaScript:**
- **Initial Deployment (1997):** JavaScript was widely deployed from the beginning of our study.
- **Usage Trends:** 
  - From 1997 to 2003, JavaScript usage increased from about 60% to 85%.
  - By 2009, 98.3% of the top sites were using JavaScript, a peak that remained stable until 2016.
  - Some sites do not appear to use JavaScript due to two factors:
    1. Content Distribution Networks (CDNs) often have static HTML front pages without JavaScript.
    2. The Archive crawler sometimes failed to store included JavaScript, leading to an undercounting of JavaScript usage.

**Flash:**
- **Initial Usage (2002):** Flash usage began to increase starting from 2002.
- **Peak Usage (2009):** Flash reached its peak usage at 48% in 2009.
- **Decline (2016):** By 2016, only about 20% of the sites used Flash, attributed to modern browsers disabling Flash by default and the adoption of HTML5 for interactive content.

**jQuery:**
- **Introduction (2006):** jQuery, a key driver for powerful JavaScript applications, was introduced in 2006.
- **Adoption Rate:** 
  - By 2011, over 65% of the major sites were using jQuery.
  - In 2016, nearly 75% of the top sites had adopted jQuery.

### JavaScript as the Powerhouse of Web 2.0

From 2003 onwards, JavaScript became omnipresent on the web. To understand its impact, we analyzed the external scripts included in the top sites. We focused on external scripts rather than inline scripts because they typically contain the major functionality of web applications.

**Script Complexity:**
- **Number of Statements:** Figure 3 shows the average number of statements per external script. In 2016, each external file contained more than 900 statements, indicating a steady increase in complexity.
- **Cyclomatic Complexity:** Figure 4 displays the cyclomatic complexity, which measures the number of potential paths through the code. By 2016, each external script had more than 300 paths, highlighting the increasing complexity of modern applications.

### Third-Party Script Inclusions

Third-party script inclusions add complexity and potential security risks. Figure 5 shows the evolution of remote inclusions, with the number of distinct remote origins per domain increasing from 2000 to almost 12 by 2016.

### Cross-Domain Data Access

Modern web applications often require cross-domain communication, which is restricted by the Same-Origin Policy (SOP). Techniques like JSONP and CORS are used to bypass these restrictions.

**JSONP:**
- **Usage:** JSONP allows data access by including scripts from remote origins. Figure 6 shows that up to 17% of sites used JSONP during our study, with a slight decrease since 2014.
- **Security Issues:** JSONP can lead to cross-domain data leakage and other security vulnerabilities.

**CORS:**
- **Deployment:** CORS, a more secure alternative, has overtaken JSONP since 2014, with 20% of sites deploying it by 2016.

**postMessage:**
- **Usage:** postMessage is used for cross-domain message exchange. By 2016, over 65% of sites either received or sent postMessages.
- **Security Concerns:** Many sites (over 50% in 2016) did not implement origin checks, potentially leading to security vulnerabilities.

### Discovered Security Issues

**Client-Side XSS Vulnerabilities:**
- **History:** Client-Side XSS vulnerabilities were first identified in 2000 and have been a persistent issue.
- **Trends:** Figure 7 shows that the percentage of vulnerable sites increased from 1997, peaking around 12-14% from 2007 to 2012, and slightly decreasing to about 8% by 2016.

**Insecure postMessage Handling:**
- **Origin Checks:** Many sites did not perform origin checks for postMessages, leaving them vulnerable to potential attacks.

**Flash Cross-Domain Policies:**
- **Policy Files:** Flash uses policy files (crossdomain.xml) to control cross-domain data access. Missing or insecure policy files can lead to data leakage.

### Summary

Over time, JavaScript has remained the dominant scripting language on the web, with increasing complexity and the addition of new APIs. While this has enabled more powerful applications, it has also introduced significant security challenges. Legacy technologies like Flash still persist, and the use of third-party scripts and cross-domain communication techniques adds further layers of complexity and risk.