# 六、Docker 网络简介
概观
本章的目标是向您简要概述容器联网是如何工作的，它与 Docker 主机级别的联网有何不同，以及容器如何利用 Docker 联网来提供与其他容器化服务的直接网络连接。到本章结束时，您将知道如何使用网络配置部署容器，如`bridge`、`overlay`、`macvlan`和`host`。您将了解不同网络驱动程序的优势，以及在什么情况下您应该选择特定的网络驱动程序。最后，我们将研究部署在 Docker 集群中的主机之间的容器化网络。
# 简介
在整个研讨会中，我们已经研究了与 Docker 相关的容器化和微服务架构的许多方面。我们已经了解了如何将应用封装到执行离散功能的微服务中，从而创建一个难以置信的灵活架构，实现快速部署和强大的水平扩展。也许与容器化相关的一个更有趣和复杂的话题是网络。毕竟，为了开发灵活敏捷的微服务架构，需要进行适当的网络考虑，以确保容器实例之间的可靠连接。
在提到**容器联网**时，请始终记住容器主机上的联网(底层联网)和同一主机上或不同集群内的容器之间的联网(`overlay`联网)之间的区别。Docker 支持许多不同类型的现成网络配置，可以根据您的基础架构和部署策略的需求进行定制。
例如，一个容器可能有一个该容器实例唯一的 IP 地址，该地址存在于容器主机之间的虚拟子网中。这种类型的网络是典型的 Docker 群集配置，其中网络流量被加密并通过主机的网络接口传递，只在不同的主机上解密，然后传递给接收微服务。这种类型的网络配置通常涉及 Docker 维护容器和服务名称到容器 IP 地址的映射。这提供了强大的服务发现机制，即使容器在不同的集群主机上终止和重新启动，也允许容器联网。
或者，容器可以以更简单的主机网络模式运行。在这种情况下，在集群或独立主机中运行的容器会公开主机网络接口上的端口，以发送和接收网络流量。容器本身可能仍然有它们的 IP 地址，这些地址被 Docker 映射到主机上的物理网络接口。当您的微服务需要主要与容器化基础设施之外的服务进行通信时，这种类型的网络配置非常有用。
默认情况下，Docker 以**桥接网络模式**运行。一个`bridge`网络在主机上创建一个单一的网络接口，作为连接主机上配置的另一个子网的桥梁。所有输入(输入)和输出(输出)网络流量都使用`bridge`网络接口在容器子网和主机之间传输。
在 Linux 环境中安装 Docker Engine 后，如果运行`ifconfig`命令，Docker 将创建一个名为`docker0`的新虚拟桥接网络接口。该接口将默认创建的 Docker 专用子网(通常是`172.16.0.0/16`)连接到主机的网络栈。如果一个容器运行在默认的 Docker 网络中，其 IP 地址为`172.17.8.1`，并且您试图联系该 IP 地址，则内部路由表将通过`docker0` `bridge`接口引导该流量，并将该流量传递到专用子网中该容器的 IP 地址。除非通过 Docker 发布端口，否则外部世界无法访问该容器的 IP 地址。在本章中，我们将深入探讨 Docker 提供的各种网络驱动程序和配置选项。
在下一个练习中，我们将研究在默认 Docker `bridge`网络中创建 Docker 容器，以及如何向外界公开容器端口。
## 练习 6.01:动手操作 Docker 网络
默认情况下，当您在 Docker 中运行容器时，您创建的容器实例将存在于 Docker 网络中。Docker 网络是子网、规则和元数据的集合，Docker 使用这些集合将网络资源分配给直接在 Docker 服务器中运行或在 Docker 集群中跨服务器运行的容器。网络将为容器提供对同一子网中其他容器的访问，甚至是对其他外部网络(包括互联网)的出站(出口)访问。每个 Docker 网络都与一个网络驱动程序相关联，该网络驱动程序决定了网络在运行容器的系统环境中的运行方式。
在本练习中，您将运行 Docker 容器，并使用基本网络来运行两个简单的 web 服务器(Apache2 和 NGINX)，这两个服务器将在几个不同的基本网络场景中公开端口。然后，您将访问容器的公开端口，以了解更多关于 Docker 网络在最基本的层面上是如何工作的。当首先从容器化基础设施开始时，启动容器并公开服务端口以使它们可用是最常见的网络场景之一:
1.  List the networks that are currently configured in your Docker environment using the `docker network ls` command:
    ```
    $ docker network ls
    ```
    显示的输出将显示系统上可用的所有配置的 Docker 网络。它应该类似于以下内容:
    ```
    NETWORK ID      NAME      DRIVER     SCOPE
    0774bdf6228d    bridge    bridge     local
    f52b4a5440ad    host      host       local
    9bed60b88784    none      null       local
    ```
2.  When creating a container using Docker without specifying a network or networking driver, Docker will create the container using a `bridge` network. This network exists behind a `bridge` network interface configured in your host OS. Use `ifconfig` in a Linux or macOS Bash shell, or `ipconfig` in Windows PowerShell, to see which interface the Docker bridge is configured as. It is generally called `docker0`:
    ```
    $ ifconfig 
    ```
    此命令的输出将列出您的环境中可用的所有网络接口，如下图所示:
    ![Figure 6.1: Listing the available network interfaces ](img/B15021_06_01.jpg)
    图 6.1:列出了可用的网络接口
    从上图可以观察到，Docker `bridge`接口名为`docker0`，IP 地址为`172.17.0.1`。
3.  Use the `docker run` command to create a simple NGINX web server container, using the `latest` image tag. Set the container to start in the background using the `-d` flag and give it a human-readable name of `webserver1` using the `--name` flag:
    ```
    $ docker run -d –-name webserver1 nginx:latest 
    ```
    如果命令成功，在终端会话中将不会返回任何输出。
4.  Execute the `docker ps` command to check whether the container is up and running:
    ```
    $ docker ps
    ```
    如您所见，`webserver1`容器已按预期启动并运行:
    ```
    CONTAINER ID  IMAGE         COMMAND                 CREATED
      STATUS                   PORTS               NAMES
    0774bdf6228d  nginx:latest  "nginx -g 'daemon of…"  4 seconds ago
      Up 3 seconds             80/tcp              webserver1
    ```
5.  Execute the `docker inspect` command to check what networking configuration this container has by default:
    ```
    $ docker inspect webserver1
    ```
    Docker 将以 JSON 格式返回运行容器的详细信息。本练习的重点是`NetworkSettings`块。特别注意`Gateway`、`IPAddress`、`Ports`和`NetworkID`子块下面的参数:
    ![Figure 6.2: Output of the docker inspect command ](img/B15021_06_02.jpg)
    图 6.2:Docker 检查命令的输出
    从这个输出可以得出结论，这个容器生活在默认的 Docker `bridge`网络中。查看`NetworkID`的前 12 个字符，您会发现它与在*步骤 1* 中执行的`docker network ls`命令的输出中使用的标识符相同。还需要注意的是`Gateway`这个容器配置使用的是`docker0` `bridge`接口的 IP 地址。Docker 将使用此接口作为出口点来访问其外部其他子网中的网络，并将流量从我们的环境转发到子网中的容器。还可以观察到，该容器在 Docker 桥网络中具有唯一的 IP 地址，在本例中为`172.17.0.2`。我们的本地机器能够路由到这个子网，因为我们有`docker0` `bridge`接口可以转发流量。最后，可以观察到 NGINX 容器默认公开 TCP 端口`80`用于传入流量。
6.  In a web browser, access the `webserver1` container by IP address over port `80`. Enter the IP address of the `webserver1` container in your favorite web browser:
    ![Figure 6.3: Accessing an NGINX web server container by IP address through  the default Docker bridge network ](img/B15021_06_03.jpg)
    图 6.3:通过默认的 Docker 桥网络通过 IP 地址访问 NGINX 网络服务器容器
7.  Alternatively, use the `curl` command to see similar output, albeit in text format:
    ```
    $ curl 172.17.0.2:80
    ```
    以下 HTML 响应表明您已经收到了来自正在运行的 NGINX 容器的响应:
    ```
    Welcome to nginx!
    Welcome to nginx!
    If you see this page, the nginx web server is successfully 
    installed and working. Further configuration is required.
    For online documentation and support please refer to
    nginx.org.
    Commercial support is available at
    nginx.com.
    Thank you for using nginx.
    ```
8.  Accessing the IP address of a container in the local `bridge` subnet works well for testing containers locally. To expose your service on the network to other users or servers, use the `-p` flag in the `docker run` command. This will allow you to map a port on the host to an exposed port on the container. This is similar to port forwarding on a router or other network device. To expose a container by the port to the outside world, use the `docker run` command followed by the `-d` flag to start the container in the background. The `-p` flag will enable you to specify a port on the host, separated by a colon and the port on the container that you wish to expose. Also, give this container a unique name, `webserver2`:
    ```
    $ docker run -d -p 8080:80 –-name webserver2 nginx:latest
    ```
    容器成功启动后，您的 shell 不会返回任何内容。但是，Docker 的某些版本可能会显示完整的容器标识。
9.  Run the `docker ps` command to check whether you have two NGINX containers up and running:
    ```
    $ docker ps
    ```
    将显示两个运行容器`webserver1`和`webserver2`:
    ```
    CONTAINER ID IMAGE         COMMAND                 CREATED
      STATUS              PORTS                  NAMES
    b945fa75b59a nginx:latest  "nginx -g 'daemon of…"  1 minute ago
      Up About a minute   0.0.0.0:8080->80/tcp   webserver2
    3267bf4322ed nginx:latest  "nginx -g 'daemon of…"  2 minutes ago
      Up 2 minutes        80/tcp                 webserver1
    ```
    在`PORTS`栏中，您将看到 Docker 正在将`webserver`容器上的端口`80`转发到主机上的端口`8080`。这是从`0.0.0.0:8080->80/tcp`部分的输出中推导出来的。
    注意
    重要的是要记住，当用`-p`标志指定端口时，主机端口总是在冒号的左边，而容器端口在右边。
10.  In your web browser, navigate to `http://localhost:8080` to see the running container instance you just spawned:
    ![Figure 6.4: NGINX default page indicating that you have successfully forwarded  a port to your web server container  ](img/B15021_06_04.jpg)
    图 6.4: NGINX 默认页面，表示您已经成功地将一个端口转发到您的 web 服务器容器
11.  Now, you have two NGINX instances running in the same Docker environment with slightly different networking configurations. The `webserver1` instance is running solely on the Docker network without any ports exposed. Inspect the configuration of the `webserver2` instance using the `docker inspect` command followed by the container name or ID:
    ```
    $ docker inspect webserver2
    ```
    JSON 输出底部的`NetworkSettings`部分如下所示。密切关注`networks`子块下面的参数(`Gateway`、`IPAddress`、`Ports`和`NetworkID`):
    ![Figure 6.5: Output from the docker inspect command  ](img/B15021_06_05.jpg)
    图 6.5:Docker 检查命令的输出
    当`docker inspect`输出显示时，`webserver2`容器的 IP 地址为`172.17.0.3`，而您的`webserver1`容器的 IP 地址为`172.17.0.1`。根据 Docker 如何为容器分配 IP 地址，您的本地环境中的 IP 地址可能略有不同。两个容器都位于同一个 Docker 网络(`bridge`)上，并且具有相同的默认网关，即主机上的`docker0` `bridge`接口。
12.  Since both of these containers live on the same subnet, you can test communication between the containers within the Docker `bridge` network. Run the `docker exec` command to gain access to a shell on the `webserver1` container:
    ```
    docker exec -it webserver1 /bin/bash
    ```
    该提示应明显变为根提示，表明您现在处于`webserver1`容器上的 Bash shell 中:
    ```
    root@3267bf4322ed:/#
    ```
13.  At the root shell prompt, use the `apt` package manager to install the `ping` utility in this container:
    ```
    root@3267bf4322ed:/# apt-get update && apt-get install -y inetutils-ping
    ```
    智能包管理器将在`webserver1`容器中安装`ping`实用程序。请注意，`apt`包管理器将安装`ping`以及运行`ping`命令所需的其他依赖项:
    ![Figure 6.6: Installing the ping command inside a Docker container ](img/B15021_06_06.jpg)
    图 6.6:在 Docker 容器中安装 ping 命令
14.  Once the `ping` utility has successfully installed, use it to ping the IP address of the other container:
    ```
    root@3267bf4322ed:/# ping 172.17.0.3
    ```
    输出应该显示 ICMP 响应数据包，表明容器可以通过 Docker `bridge`网络成功地相互 ping 通:
    ```
    PING 172.17.0.1 (172.17.0.3): 56 data bytes
    64 bytes from 172.17.0.3: icmp_seq=0 ttl=64 time=0.221 ms
    64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.207 ms
    ```
15.  You can also access the NGINX default web interface using the `curl` command. Install `curl` using the `apt` package manager:
    ```
    root@3267bf4322ed:/# apt-get install -y curl
    ```
    应显示以下输出，表明正在安装`curl`实用程序和所有必需的依赖项:
    ![Figure 6.7: Installing the curl utility ](img/B15021_06_07.jpg)
    图 6.7:安装 curl 实用程序
16.  After installing `curl`, use it to curl the IP address of `webserver2`:
    ```
    root@3267bf4322ed:/# curl 172.17.0.3
    ```
    您应该会看到以 HTML 格式显示的`Welcome to nginx!`页面，表明您能够通过 Docker `bridge`网络成功联系到`webserver2`容器的 IP 地址: