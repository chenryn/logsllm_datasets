Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
bal ← initial stake; avk ← initial aggregate key
seen ← ∅; pool ← 0; pfs mtrs ← ∅; pfs used ← ∅
for tx ∈ (cid:9)tx do
if type(tx) = sc cert then
(m, σ) ← tx
if ¬AVer(m, avk, σ) then
) ← m
end if
(txs root, avk(cid:5)
avk ← avk(cid:5)
pfs mtrs[txs root] ← true
(txid, lid, (send, sAcc), (rec, rAcc), v, σ) ← tx
m ← (txid, lid, (send, sAcc), (rec, rAcc), v)
if ¬Ver(m, sAcc, σ) ∨ seen[txid] (cid:9)= 0 then
if bal[sAcc] − v < 0 then
else if send (cid:9)= rec then
end if
bal[sAcc] −= v
π ← tx.π
(mtr, inclusion pf) ← π
if π ∈ pfs used ∨ mtr (cid:9)∈ pfs mtrs∨
¬MTR-VER(mtr, inclusion pf)
continue
end if
continue
Algorithm 8 The MC veriﬁer.
1: function VERIFYTXMC((cid:9)tx)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
continue
continue
else
end if
if lid = send then
if lid = send then
else
end if
end if
pool += v
end if
if lid = rec then
bal[rAcc] += v
end if
if send (cid:9)= rec then
pool −= v
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45: end function
46: function VERIFIERMC(Cmc)
47:
48:
49:
50:
51:
52:
53:
54: end function
(cid:9)tx ← ∅
for B ∈ Cmc do
for tx ∈ B do
(cid:9)tx ← (cid:9)tx(cid:11) tx
end if
seen ← seen(cid:11) tx
end for
return seen
end for
end for
return (cid:9)tx (cid:9)= VERIFYTXMC((cid:9)tx)
(cid:9)tx
(cid:5) (cid:11) tx
end for
(cid:9)tx ← ∅
for each time slot t do
(cid:5) ← 
(cid:9)tx
if Csc has a block generated at slot t then
B ← the block in Csc generated at t
for tx ∈ B do
(cid:5) ← (cid:9)tx
Algorithm 9 The SC transaction annotation.
1: function ANNOTATETXSC(Csc, Cmc)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
end for
22:
return (cid:9)tx
23:
24: end function
end for
end if
(cid:5)
for tx ∈ (cid:9)tx
(cid:10) Mark the time of each tx in (cid:9)tx
tx.t ← t
end for
(cid:9)tx ← (cid:9)tx(cid:11) (cid:9)tx
end if
if Cmc has a block generated at slot t then
B ← the block in Cmc generated at t
for tx ∈ B do
(cid:5) ← (cid:9)tx
(cid:5) (cid:11) tx
do
(cid:5)
(cid:9)tx
(cid:5)
then
j is derived as a hash of additional VRF-values included
into blocks from the ﬁrst two thirds of epoch j − 1 for this
purpose by the respective slot leaders. Finally, the protocols
use key-evolving signatures for block signing, and in each slot
the honest parties are mandated to update their private key,
contributing to their resilience to adaptive corruptions.
Ouroboros Praos was shown [11] to achieve persistence and
liveness under weaker assumptions than Ouroboros, namely:
(1) Δ-semi-synchronous communication (where Δ affects
the security bounds but
is unknown to the protocol); (2)
majority of the stake is always controlled by honest parties. In
particular, Ouroboros Praos is secure in face of fully adaptive
corruptions without any corruption delay. Ouroboros Genesis
provides the same guarantees as Praos, as well as several other
features that will not be relevant for our present discusion.
Construction of Pegged Ledgers. The main difference com-
pared to our treatment of Ouroboros would be in the con-
struction of the sidechain certiﬁcate (cf. Section IV-C7). The
need for a modiﬁcation is caused by the private, local leader
selection using VRFs in these protocols, which makes it
impossible to identify the set of slot leaders for the sufﬁx of an
epoch at the beginning of this epoch, as done for Ouroboros.
The sidechain certiﬁcate included in MC at the beginning
of epoch j would hence contain the following, for parameters
Q and T speciﬁed below:
1) the epoch index;
2) a Merkle commitment to the list of withdrawals as in the
case of Ouroboros;
155
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
continue
end if
if lid = send then
if bal[send][sAcc] − v < 0 then
bal[MC] ← Initial MC stake
bal[SC] ← Initial SC stake
mc outgoing tx ← ∅; seen ← ∅
for tx ∈ (cid:9)tx do
(txid, lid, (send, sAcc), (rec, rAcc), v, σ, t) ← tx
m ← (txid, lid, (send, sAcc), (rec, rAcc), v)
if ¬Ver(sAcc, m, σ) ∨ seen[txid] (cid:9)= 0 then
Algorithm 10 The SC veriﬁer and its respective transaction
veriﬁer.
1: function VERIFIERSC(Csc, Cmc)
(cid:9)tx ← ANNOTATETXSC(Csc, Cmc)
2:
return (cid:9)tx (cid:9)= VERIFYTXSC((cid:9)tx)
3:
4: end function
5: function VERIFYTXSC((cid:9)tx)
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38: end function
end if
if lid = MC ∧ send (cid:9)= rec then
mc outgoing tx[txid] ← t + 2k
(cid:10) Effect pre-image tx immature
if t < mc outgoing tx[txid] then
end if
if lid = rec then
if send (cid:9)= rec then
end if
if lid = send then
bal[send][sAcc] −= v
end if
bal[rec][rAcc] += v
end if
seen ← seen(cid:11) tx
continue
end if
continue
end if
end for
return seen
3) a Merkle commitment to the SC stake distribution SDj;
4) a list of Q public keys;
5) Q inclusion proofs (with respect to SDj−1 contained in
the previous certiﬁcate) and Q VRF-proofs certifying that
these Q keys belong to slot leaders of Q out of the last
T slots in epoch j − 1;
6) Q signatures from the above Q public keys on the above;
these can be replaced by a single aggregate signature to
save space on MC.
The parameters Q and T have to be chosen in such a
way that with overwhelming probability, there will be a chain
growth of at least Q blocks during the last T slots of epoch
j−1, but the adversary controls Q slots in this period only with
negligible probability (and hence at least one of the signatures
will have to come from an honest slot leader). The existence
of such constants for T = Θ(k) was shown in [2].
While the above sidechain certiﬁcate is larger (and hence
takes more space on MC) than the one we propose for
Ouroboros, a switch to Ouroboros Praos or Genesis would
also bring several advantages. First off, both constructions
would give us security in the semi-synchronous model with
fully adaptive corruptions (as shown in [2], [11]), and the use
of Ouroboros Genesis would allow newly joining players to
bootstrap from the mainchain genesis block only—without the
need for a trusted checkpoint—as discussed extensively in [2].
2) Snow White: The high-level structure of Snow White
execution is similar to the protocols we have already discussed:
it contains epochs, committees that are sampled for each epoch
based on the stake distribution recorded in the blockchain prior
to that epoch, and randomness used for this sampling produced
by hashing special nonce values included in previous blocks.
Hence, our construction can be adapted to work with Snow
White-based blockchains in a straightforward manner.
3) Algorand: Algorand does not aim for the so-called
eventual consensus. Instead it runs a full Byzantine Agreement
protocol for each block before moving to the next block,
hence blocks are immediately ﬁnalized. Consider a setting with
MC and SC both running Algorand. The main difﬁculty to
address when constructing pegged ledgers is the continuous
authentication of the sidechain certiﬁcate constructed by SC-
maintainers for MC (other aspects, such as deposits from MC
to SC work analogously to what we described above). As
Algorand does not have epochs, and creating and processing
a sidechain certiﬁcate for each block is overly demanding, a
natural choice is to introduce a parameter R and execute this
process only once every R blocks. Namely, every R blocks, the
SC-maintainers produce a certiﬁcate that the MC-maintainers
insert into the mainchain. This certiﬁcate most importantly
contains:
1) a Merkle commitment to the list of withdrawals in the
most recent R-block period;
2) a Merkle commitment
distribution SDj on SC;
to the full, most recent stake
3) a sufﬁcient number of signatures from a separate commit-
tee certifying the above information, together with proofs
justifying the membership of the signature’s creators in
the committee.
This additional committee is sampled from SDj−1 (the stake
distribution committed to in the previous sidechain certiﬁcate)
via Algorand’s private sortition mechanism such that the ex-
pected size of the committee is large enough to ensure honest
supermajority (required for Algorand’s security) translates into
a strong honest majority within the committee. Note that
the sortition mechanism also allows for a succinct proof of
membership in the committee. The members of the committee
then insert their individual signatures (signing the ﬁrst two
items in the certiﬁcate above) into the SC blockchain during
the period of R blocks preceding the construction of the
certiﬁcate. All the remaining mechanics of the pegged ledgers
are a direct analogy of our construction above.
156
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply.