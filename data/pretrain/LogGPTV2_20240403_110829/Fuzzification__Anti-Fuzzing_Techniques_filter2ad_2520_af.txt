functions. However, neither of them considered performance
overhead as an evaluation metric. SymPro [7] presented sym-
bolic profiling, a method to identify and diagnose bottlenecks
of the application under symbolic execution. Cavallaro et
al. [8] showed a comprehensive collection of evading tech-
niques on dynamic-taint-analysis.
Software obfuscation and diversity. Software obfuscation
transforms the program code into obscure formats that are
difficult to analyze so as to prevent unexpected reverse en-
gineering [12, 13]. Various tools have been developed to
obfuscate binaries [15, 60, 33, 46]. However, obfuscation
is not effective to impede unexpected fuzzing because it fo-
cuses on evading static analysis and the original program
logic is still revealed at runtime. Software diversity instead
provides different implementations of the same program for
different execution environments, aiming to either limit at-
tacks on a specific version (usually a small set of all distri-
butions), or significantly increase the effort to build generic
exploits [35, 3, 53, 50]. Fuzzing one of many diversified ver-
sions could be less effective if the identified bug is specific to
one version (which is likely caused by an implementation er-
ror of the diversity mechanism). However, for bugs stemming
from a programming mistake, diversity cannot help hinder
attackers finding them.
9 Conclusion
We propose a new attack mitigation system, called
FUZZIFICATION,
for developers to prevent adversarial
fuzzing. We develop three principled ways to hinder fuzzing:
injecting delays to slow fuzzed executions; inserting fabri-
cated branches to confuse coverage feedback; transforming
data-flows to prevent taint analysis and utilizing complicated
constraints to cripple symbolic execution. We design robust
anti-fuzzing primitives to hinder attackers from bypassing
FUZZIFICATION. Our evaluation shows that FUZZIFICATION
can reduce paths exploration by 70.3% and reduce bug dis-
covery by 93.0% for real-world binaries, and reduce bug
discovery by 67.5% for LAVA-M dataset.
10 Acknowledgment
We thank the anonymous reviewers, and our shepherd,
Stephen McCamant, for their helpful feedback. This research
was supported, in part, by the NSF award CNS-1563848,
CNS-1704701, CRI-1629851 and CNS-1749711 ONR under
grant N00014-18-1-2662, N00014-15-1-2162, N00014-17-
1-2895, DARPA TC (No. DARPA FA8650-15-C-7556), and
ETRI IITP/KEIT[B0101-17-0644], and gifts from Facebook,
Mozilla and Intel.
References
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. Control-
flow Integrity. In Proceedings of the 12th ACM Conference on Com-
puter and Communications Security, 2005.
[2] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gaw-
lik, and Thorsten Holz. REDQUEEN: Fuzzing with Input-to-State
Correspondence. In Proceedings of the 2019 Annual Network and Dis-
tributed System Security Symposium (NDSS), San Diego, CA, February
2019.
[3] Algirdas Avizienis and Liming Chen. On the Implementation of N-
version Programming for Software Fault Tolerance during Execution.
Proceedings of the IEEE COMPSAC, pages 149–155, 1977.
[4] Fabrice Bellard. QEMU, a Fast and Portable Dynamic Translator. In
Proceedings of the 2005 USENIX Annual Technical Conference (ATC),
Anaheim, CA, April 2005.
[5] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik
Roychoudhury. Directed Greybox Fuzzing. In Proceedings of the 24th
ACM Conference on Computer and Communications Security (CCS),
Dallas, TX, October–November 2017.
USENIX Association
28th USENIX Security Symposium    1927
[6] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-
based Greybox Fuzzing as Markov Chain. In Proceedings of the 23rd
ACM Conference on Computer and Communications Security (CCS),
Vienna, Austria, October 2016.
[7] James Bornholt and Emina Torlak. Finding Code that Explodes un-
der Symbolic Evaluation. Proceedings of the ACM on Programming
Languages, 2(OOPSLA), 2018.
[8] Lorenzo Cavallaro, Prateek Saxena, and R Sekar. Anti-taint-analysis:
Practical Evasion Techniques against Information Flow based Malware
Defense. Technical report, Stony Brook University, 2007.
[9] CENSUS. Choronzon - An Evolutionary Knowledge-based Fuzzer,
2015. ZeroNights Conference.
[10] Oliver Chang, Abhishek Arya,
Five Months Later,
Fuzz:
https://security.googleblog.com/2017/05/oss-fuzz-
five-months-later-and.html.
and Josh Armour.
OSS-
and Rewarding Projects, 2018.
[11] Peng Chen and Hao Chen. Angora: Efficient Fuzzing by Principled
Search. In Proceedings of the 39th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2018.
[12] Christian Collberg, Clark Thomborson, and Douglas Low. A Taxonomy
of Obfuscating Transformations. Technical report, Department of
Computer Science, University of Auckland, New Zealand, 1997.
[13] Christian Collberg, Clark Thomborson, and Douglas Low. Manufactur-
ing Cheap, Resilient, and Stealthy Opaque Constructs. In Proceedings
of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Pro-
gramming Languages, 1998.
[14] Timothy Garnett Derek Bruening, Vladimir Kiriansky. Dynamic In-
strumentation Tool Platform. http://www.dynamorio.org/, 2009.
[15] Theo Detristan, Tyll Ulenspiegel, Mynheer Superbus Von Underduk,
and Yann Malcom. Polymorphic Shellcode Engine using Spectrum
Analysis, 2003. http://phrack.org/issues/61/9.html.
[16] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim,
and Wenke Lee. Efficient Protection of Path-Sensitive Control Security.
In Proceedings of the 26th USENIX Security Symposium (Security),
Vancouver, BC, Canada, August 2017.
[17] Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda, Tim Leek, Andrea
Mambretti, Wil Robertson, Frederick Ulrich, and Ryan Whelan. LAVA:
Large-scale Automated Vulnerability Addition. In Proceedings of the
37th IEEE Symposium on Security and Privacy (Oakland), San Jose,
CA, May 2016.
[18] Michael Eddington. Peach Fuzzing Platform. Peach Fuzzer, page 34,
2011.
[19] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu
Pei, and Zuoning Chen. CollAFL: Path Sensitive Fuzzing. In Proceed-
ings of the 39th IEEE Symposium on Security and Privacy (Oakland),
San Jose, CA, May 2018.
[20] GNU Project. GNU Binutils Collection. https://www.gnu.org/
software/binutils, 1996.
[21] Patrice Godefroid, Michael Y. Levin, and David Molnar. Automated
Whitebox Fuzz Testing. In Proceedings of the 15th Annual Network
and Distributed System Security Symposium (NDSS), San Diego, CA,
February 2008.
[22] Google. Fuzzing for Security, 2012. https://blog.chromium.org/
2012/04/fuzzing-for-security.html.
[23] Google.
Honggfuzz, 2016.
honggfuzz/.
https://google.github.io/
[24] Google. OSS-Fuzz - Continuous Fuzzing for Open Source Software,
2016. https://github.com/google/oss-fuzz.
[25] Google. Syzkaller - Linux Syscall Fuzzer, 2016. https://github.
com/google/syzkaller.
[26] Google. Honggfuzz Found Bugs, 2018. https://github.com/
google/honggfuzz#trophies.
[27] David Göransson and Emil Edholm. Escaping the Fuzz. Master’s thesis,
Chalmers University of Technology, Gothenburg, Sweden, 2016.
[28] Munawar Hafiz and Ming Fang. Game of Detections: How Are Se-
curity Vulnerabilities Discovered in the Wild? Empirical Software
Engineering, 21(5):1920–1959, October 2016.
[29] Christian Holler, Kim Herzig, and Andreas Zeller. Fuzzing with Code
Fragments. In Proceedings of the 21st USENIX Security Symposium
(Security), Bellevue, WA, August 2012.
[30] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung,
William R. Harris, Taesoo Kim, and Wenke Lee. Enforcing Unique
Code Target Property for Control-Flow Integrity. In Proceedings of
the 25th ACM Conference on Computer and Communications Security
(CCS), Toronto, Canada, October 2018.
[31] Zhenghao Hu, Yu Hu, and Brendan Dolan-Gavitt. Chaff Bugs: Deter-
ring Attackers by Making Software Buggier. CoRR, abs/1808.00659,
2018.
[32] Trevor Jim, J. Greg Morrisett, Dan Grossman, Michael W. Hicks,
James Cheney, and Yanling Wang. Cyclone: A Safe Dialect of C. In
Proceedings of the USENIX Annual Technical Conference, 2002.
[33] Pascal Junod, Julien Rinaldini, Johan Wehrli, and Julie Michielin.
Obfuscator-LLVM – Software Protection for the Masses. In Brecht
Wyseur, editor, Proceedings of the IEEE/ACM 1st International Work-
shop on Software Protection. IEEE, 2015.
[34] Su Yong Kim, Sangho Lee, Insu Yun, Wen Xu, Byoungyoung Lee,
Youngtae Yun, and Taesoo Kim. CAB-Fuzz: Practical Concolic Testing
Techniques for COTS Operating Systems. In Proceedings of the 2017
USENIX Annual Technical Conference (ATC), Santa Clara, CA, July
2017.
[35] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz.
SoK: Automated Software Diversity. In Proceedings of the 35th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA, May
2014.
[36] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei
Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state Based Binary
Fuzzing. In Proceedings of the 11th Joint Meeting on Foundations of
Software Engineering, 2017.
[37] LLVM. LibFuzzer - A Library for Coverage-guided Fuzz Testing, 2017.
http://llvm.org/docs/LibFuzzer.html.
[38] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim
Hazelwood. Pin: Building Customized Program Analysis Tools with
Dynamic Instrumentation. In Proceedings of the 2005 ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI), Chicago, IL, June 2005.
[39] Microsoft. Microsoft Previews Project Springfield, a Cloud-based Bug
https://blogs.microsoft.com/next/2016/
Detector, 2016.
09/26/microsoft-previews-project-springfield-cloud-
based-bug-detector.
[40] Barton P. Miller, Louis Fredriksen, and Bryan So. An Empirical Study
of the Reliability of UNIX Utilities. Commun. ACM, 33(12):32–44,
December 1990.
[41] Charlie Miller.
https://www.scribd.com/
Anti-Fuzzing.
document/316851783/anti-fuzzing-pdf, 2010.
[42] WinAFL Crashes with Testing Code.
ivanfratric/winafl/issues/62, 2017.
https://github.com/
[43] Unexplained Crashes
in WinAFL.
https://github.com/
DynamoRIO/dynamorio/issues/2904, 2018.
[44] George C. Necula, Scott McPeak, and Westley Weimer. CCured:
Type-safe Retrofitting of Legacy Code. In Proceedings of the 29th
ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, 2002.
1928    28th USENIX Security Symposium
USENIX Association
[45] CSO online. Seven of the Biggest Recent Hacks on Crypto Ex-
https://www.ccn.com/japans-16-licensed-
changes, 2018.
cryptocurrency-exchanges-launch-self-regulatory-
body/.
[62] Zhi Wang, Jiang Ming, Chunfu Jia, and Debin Gao. Linear Obfuscation
to Combat Symbolic Execution. In Proceedings of the 16th European
Symposium on Research in Computer Security (ESORICS), Leuven,
Belgium, September 2011.
[63] Ollie Whitehouse. Introduction to Anti-Fuzzing: A Defence in Depth
Aid. https://www.nccgroup.trust/uk/about-us/newsroom-
and-events/blogs/2014/january/introduction-to-anti-
fuzzing-a-defence-in-depth-aid/, 2014.
[64] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim. De-
signing New Operating Primitives to Improve Fuzzing Performance.
In Proceedings of the 24th ACM Conference on Computer and Com-
munications Security (CCS), Dallas, TX, October–November 2017.
[65] Zhou Xu. PTfuzzer, 2018. https://github.com/hunter-ht-
2018/ptfuzzer.
[66] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. Finding and
In ACM SIGPLAN Notices,
Understanding Bugs in C Compilers.
volume 46, pages 283–294. ACM, 2011.
[67] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim.
QSYM: A Practical Concolic Execution Engine Tailored for Hybrid
Fuzzing. In Proceedings of the 27th USENIX Security Symposium
(Security), Baltimore, MD, August 2018.
[68] Michal Zalewski.
Fuzzing Random Programs without execve(),
https://lcamtuf.blogspot.com/2014/10/fuzzing-
2014.
binaries-without-execve.html.
[69] Michal Zalewski.
New in AFL: Persistent Mode, 2015.
https://lcamtuf.blogspot.com/2015/06/new-in-afl-
persistent-mode.html.
[70] Michal Zalewski. High-performance Binary-only Instrumentation
for AFL-fuzz, 2016. https://github.com/mirrorer/afl/tree/
master/qemu_mode.
[71] Michal Zalewski.
Technical Whitepaper for AFL-fuzz, 2017.
https://github.com/mirrorer/afl/blob/master/docs/
technical_details.txt.
[72] Michal Zalewski. American Fuzzy Lop (2.52b), 2018.
//lcamtuf.coredump.cx/afl/.
http:
[46] Oreans Technologies. Themida, 2017. https://www.oreans.com/
themida.php.
[47] Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. DeepXplore:
Automated Whitebox Testing of Deep Learning Systems. In Proceed-
ings of the 26th ACM Symposium on Operating Systems Principles
(SOSP), Shanghai, China, October 2017.
[48] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-Fuzz: Fuzzing by
Program Transformation. In Proceedings of the 39th IEEE Symposium
on Security and Privacy (Oakland), San Jose, CA, May 2018.
[49] Theofilos Petsios, Jason Zhao, Angelos D. Keromytis, and Suman Jana.
SlowFuzz: Automated Domain-Independent Detection of Algorithmic
Complexity Vulnerabilities. In Proceedings of the 24th ACM Confer-
ence on Computer and Communications Security (CCS), Dallas, TX,
October–November 2017.
[50] Brian Randell. System Structure for Software Fault Tolerance. IEEE
Transactions on Software Engineering, (2):220–232, 1975.
[51] Michael Rash. A Collection of Vulnerabilities Discovered by the AFL
Fuzzer, 2017. https://github.com/mrash/afl-cve.
[52] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano
Giuffrida, and Herbert Bos. VUzzer: Application-aware Evolutionary
Fuzzing. In Proceedings of the 2017 Annual Network and Distributed
System Security Symposium (NDSS), San Diego, CA, February–March
2017.
[53] Ina Schaefer, Rick Rabiser, Dave Clarke, Lorenzo Bettini, David Be-
navides, Goetz Botterweck, Animesh Pathak, Salvador Trujillo, and
Karina Villela. Software Diversity: State of the Art and Perspec-
tives. International Journal on Software Tools for Technology Transfer
(STTT), 14(5):477–495, October 2012.
[54] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian
Schinzel, and Thorsten Holz. kAFL: Hardware-Assisted Feedback
Fuzzing for OS Kernels. In Proceedings of the 26th USENIX Security
Symposium (Security), Vancouver, BC, Canada, August 2017.
[55] Hovav Shacham. The Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86). In Proceedings of the
14th ACM Conference on Computer and Communications Security
(CCS), Alexandria, VA, October–November 2007.
[56] Monirul I Sharif, Andrea Lanzi, Jonathon T Giffin, and Wenke Lee.
Impeding Malware Analysis Using Conditional Code Obfuscation.
In Proceedings of the 15th Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, February 2008.
[57] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher,
Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. Driller: Augmenting Fuzzing through
Selective Symbolic Execution. In Proceedings of the 2016 Annual Net-
work and Distributed System Security Symposium (NDSS), San Diego,
CA, February 2016.
[58] Synopsys. Where the Zero-days are, 2017. https://www.synopsys.
com/content/dam/synopsys/sig-assets/reports/state-of-
fuzzing-2017.pdf.
[59] Syzkaller.
Syzkaller Found Bugs
- Linux Kernel, 2018.
https://github.com/google/syzkaller/blob/master/
docs/linux/found_bugs.md.
[60] UPX Team. The Ultimate Packer for eXecutables, 2017. https:
//upx.github.io.
[61] Daniel Votipka, Rock Stevens, Elissa M. Redmiles, Jeremy Hu, and
Michelle L. Mazurek. Hackers vs. Testers A Comparison of Software
Vulnerability Discovery Processes. In Proceedings of the 39th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA, May
2018.
USENIX Association
28th USENIX Security Symposium    1929
Appendix
A HonggFuzz Intel-PT-mode Result
All
(b) libpng
BranchTrap
SpeedBump
10k
8k
6k
4k
2k
0k
12k
9k
6k
3k
0k
10k
8k
6k
4k
2k
0k
50k
40k
30k
20k
10k
0k
15k
12k
9k
6k
3k
0k
Original
AntiHybrid
(a) libjpeg
8 16 24 32 40 48 56 64 72
(c) libtiff
8 16 24 32 40 48 56 64 72
(e) readelf
8 16 24 32 40 48 56 64 72
(g) nm
8 16 24 32 40 48 56 64 72
Time (hours)
20k
15k
10k
5k
0k
35k
30k
25k
20k
15k
10k
5k
0k
20k
15k
10k
5k
0k
8 16 24 32 40 48 56 64 72
(d) pcre2
8 16 24 32 40 48 56 64 72
(f) objdump
8 16 24 32 40 48 56 64 72
(h) objcopy
8 16 24 32 40 48 56 64 72
Time (hours)
Figure 14: Paths discovered by HonggFuzz Intel-PT mode from
real-world programs. Each program is compiled with five settings:
original (no protection), SpeedBump, BranchTrap, AntiHybrid and
all protections. We fuzz them for three days.
1930    28th USENIX Security Symposium
USENIX Association