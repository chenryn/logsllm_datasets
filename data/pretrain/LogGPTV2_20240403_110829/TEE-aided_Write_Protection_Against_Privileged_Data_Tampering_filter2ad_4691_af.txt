(e.g., 5 ﬁles out of 1000) unless the total number is also small.
In general, if auto-deletion with aging is enabled, we sug-
gest the duration should be long, e.g., a year or two, depending
on the size of the protected partition. Note that, delayed attacks
risk being discovered and mitigated by anti-malware vendors,
and thus we do not consider them a serious threat.
(g) Attacking auto-deletion with aging. If older ﬁle versions
are automatically deleted after a preset threshold (e.g., 365
days), a straightforward threat is clock source manipulation.
Rootkit ransomware can adjust the system time (to a far future
date) to fool Inuksuk to believe the versions are already too
old to be kept. To address this, Inuksuk can be conﬁgured to
only trust a signed NTP time from a remote server, absence
of which will stop auto-deletion (see Section IV-B).
VII. RELATED WORK
There are many solutions dealing with user-level mal-
ware/ransomware for data protection; only FlashGuard [24]
targets rootkit-level ransomware. However, some solutions
against data manipulation by rootkit malware (not speciﬁc to
rootkit-level ransomware) are close to Inuksuk in spirit. We
discuss several examples from each category.
Reverse-engineered keys. Early-day ransomware had the
(symmetric) ﬁle encryption keys embedded in their obfuscated
binaries, or stored in a C&C server. Keys could be recovered
by reverse-engineering their code or intercepting C&C trafﬁc.
Ransomware now generally uses a public key to encrypt a
random ﬁle encryption key, and the private key remains only at
the attacker’s machine (cf. [78]), and thus much more resilient
than before; however, implementation ﬂaws [74] may still be
leveraged to recover encryption keys. An exemplary umbrella
solution is NoMoreRansom [5], clustering ﬁle recovery efforts
from several public and industry partners. However, relying on
ransomware authors’ mistakes is a non-solution, and ﬁnding
such exploits may be too late for early victims.
Ofﬂine and online backups. An obvious recovery-based
countermeasure against malware/ransomware is to make of-
ﬂine backup of important data regularly (on media discon-
nected from the computer or with device-enforced write
protection, as ransomware also attempts to erase accessible
backups). Although simple in theory, effective deploymen-
t/use of backup tools could be non-trivial, e.g., determining
frequency of backups, checking integrity of backups regu-
larly (see Laszka et al. [35] for an economic analysis of
paying ransom vs. backup strategies). More problematically,
the disconnected/write-protected media must be connected/un-
locked (online) during backup, at which point, malware/ran-
somware can encrypt/delete the ﬁles (see [24], [41]). For
cloud-based backup systems, such as Dropbox (centralized)
and Syncthing.net (P2P), a potential issue is the size of their
TCB (includes a full OS with multiple network-facing servers),
which may lead to large-scale data loss, if compromised.
Rootkit-level solutions. S4 [60] is proposed as a self-securing
storage entity behind a security perimeter, which records all
ﬁle operations (like journaling or auditing) and retains old
versions of user ﬁles. It is implemented as a network service
(similar to NFS), and assumed to be resistant to compromise
by a remote party (due to S4’s limited outward interface). The
usage scenario is focused on intrusion survival and forensics
collection, in the case of an admin account compromise in a
client machine. As S4 promptly stores all changes made to the
client machine, as soon as possible, its storage overhead can be
signiﬁcant. To address this challenge, S4 makes use of novel
compression and differential versioning techniques, which can
beneﬁt Inuksuk as well. Also, without any TEE to ensure
execution integrity and secrecy, it involves the whole server
infrastructure as the TCB, exposing many attack vectors. More
likely than a full system compromise, if the admin account of
S4 (or any similar backup system) is hacked, large volumes of
data may be lost at once.
FlashGuard [24] proposes to modify the garbage collection
mechanism of SSD ﬁrmware (assuming vendor support), so
that for suspicious overwrites (i.e., ﬁrst read and then written in
a quick succession), a copy of the original data block is kept for
12
a preset amount of time (e.g., 20 days). FlashGuard leverages a
unique out-of-place write feature of modern SSDs (in contrast
to regular hard drives), which provides an implicit backup
of recently overwritten data blocks. The user is expected to
detect any attack before the preset time elapses and perform
the recovery from a separate machine; otherwise the data will
be lost. The detection of suspicious overwrites can be an issue;
e.g., ransomware can read and encrypt the ﬁle, and at some
later point (i.e., not immediately to avoid being ﬂagged), delete
the ﬁle. However, this can be solved by retaining all deleted
data blocks, at the expense of increased storage overhead.
FlashGuard authors also do not specify the clock source to
measure the preset time; SSDs do not offer any trusted clock,
and relying on OS/BIOS could be fatal.
Rootkit-resistant disks (RRD [12]) are designed to resist
rootkit
infection of system binaries, which are labelled at
installation time, and write operations to protected binaries are
mediated by the disk controller. System binaries are updated
by booting into a safe state in the presence of a security token.
While effective against rootkit infection, RRD is infeasible
against ransomware that targets regular user ﬁles (adding/up-
dating will require reboot). Inuksuk’s goals are complementary
to RRD’s and exclude protecting system binaries.
User-level solutions. Defenses are usually implemented as sys-
tem services, kernel drivers (unprivileged adversary), or even
user-land applications. For instance, Redemption [30] explic-
itly mentions that their TCB includes the display module, OS
kernel, and underlying software. Redemption claims to provide
real-time ransomware protection, by inspecting system-wide
I/O request patterns. Its detection approach involves a com-
prehensive list of features, with both content-based (entropy,
overwriting and deletion) and behavior-based (e.g., directory
traversal). In the end, a malice score is calculated to facilitate
decisions. Redemption creates a protected area, called reﬂected
ﬁle, which caches the write requests during inspection; the ﬁle
is periodically ﬂushed to disk (if no anomaly is identiﬁed).
This ensures data consistency in case of false positives, i.e., if
the suspicious operations is conﬁrmed by the user to be benign,
there is still the chance to restore the discarded data.
In an effort
to achieve better universality and robust-
ness, some proposals are purely data-centric (i.e., agnostic to
program execution, checking just the outcome). E.g., Cryp-
toDrop [55] focuses on ﬁle transformation information for
individual ﬁles, regardless of where those transformations
come from. It also claims to achieve early detection. It employs
three novel indicators to detect suspicious ﬁle operations. Low
ﬁle similarity before and after may indicate encryption but
legitimate operations can also cause it (e.g., a blurred JPG
ﬁle). Shannon entropy can be used in detecting encryption
although compression also leads to high entropy. Last, ﬁle type
changes (through content parsing) might not be robust enough
with format-preserving encryption [59].
Although most ransomware mitigation techniques aim to
detect/prevent ransomware as the primary goal, very few also
focus on recovery, e.g., PayBreak [32]. Symmetric keys used
by ransomware to encrypt user data are captured through
crypto function hooking before they are encrypted with the
adversary’s public key, and then stored in a secure key vault.
When infection is detected or a ransom is demanded, the user
can retrieve the keys for decryption without paying the ransom.
PayBreak’s crypto function hooking works for both statically
and dynamically linked binaries, but only if the ransomware
uses known third-party crypto libraries. Also, it is subject to
evasion by obfuscation for statically linked ransomware. The
key vault, even though encrypted with the user’s public key
and protected by the admin privilege, can still be easily erased
by rootkit ransomware.
ShieldFS [14] is a copy-on-write shadowing ﬁlesystem
reactive to ransomware detection, which is also based on
I/O requests (I/O Request Packets - IRPs). Its methodology
ﬁts in the intersection of recovery-based solutions and data
loss prevention, and thus is similar to Inuksuk in positioning.
The detection portion also makes use of numerous behavioral
features reﬂected from the IRPs. Speciﬁcally, ShieldFS’s
cryptographic primitives detection, different from PayBreak’s,
does not rely on hooking known crypto libraries, but captures
inevitable properties of crypto primitives, such as the key
schedule pre-computation of block ciphers. To achieve the
claimed self-healing, on the ﬁrst write attempt, ShieldFS
keeps a copy of the original ﬁle in a protected location (only
from userland processes); once an anomaly is detected, the
changes made can be reverted with this copy, or otherwise it
can be deleted at any time.
Microsoft BitLocker [77] is a widely-used (enterprise) data
protection tool integrated with the Windows OS. BitLocker
provides strong conﬁdentiality guarantees through TPM-bound
encryption. However, when a BitLocker-protected partition is
unlocked after a successful boot (i.e., accessible to the OS and
applications), there is no way to distinguish a malicious write
attempt from legitimate ones, and thus making the protected
data vulnerable to even user-level ransomware attacks.
For advanced data protection in iOS, Apple’s secure en-
clave co-processor (SEP [40]) is also a form of hardware
security feature, enabling memory encryption and credentials
management (among other functions). The SEP communicates
with the application processors (APs) via a mechanism called
Secure Mailbox. From the limited public documentation, it
appears that per-application access control is possible with
SEP, therefore, decryption (and thus updates) can be only
exposed to the right application.
Closest to Inuksuk in design components is Pesos by Krahn
et al. [33] but with different goals and threat model; they use
Intel SGX as TEEHost and Kinetic Open Storage as TEEDisk.
The high-level similarity is that TEEHost, enforcing certain
storage protection rules, connects to and is authenticated by
TEEDisk, and the Disk is capable of executing operations
assigned by TEEHost. The major contribution is the ﬂattened ab-
straction layers and a rich set of storage policies exposed. Pe-
sos assumes that only remote servers (the Host) are potentially
malicious and the client machine is trusted, hence excluding
(rootkit) ransomware/malware on the client machine. There-
fore, trusted UI is no longer a problem, so the user can perform
administrative operations (if needed) from the client, such as
specifying which ﬁles to delete through encrypted network to
TEEHost. Since the kinetic storage supports secure communi-
cation (TLS), WAN network as an insecure Interface can be
used. In addition, if placed in Inuksuk’s setting, it suffers from
the same issue of untrusted data source, i.e., there is no way to
distinguish malicious writes from benign ones, unless all ap-
plications can be ported and contained in SGX or TXT/SVM.
13
VIII. CONCLUSIONS
In summary, we propose to focus on data loss prevention, in
an effort to address rootkit-level data alteration as exempliﬁed
by ransomware, a signiﬁcant threat that remains largely unad-
dressed in current state-of-the-art solutions. We leverage the
trusted execution environments (TEEs) available with modern
computing devices and reason along various TEE placements
between the host and the storage device. Intel TXT and AMD
SVM in conjunction with TCG Opal SED are chosen for
Inuksuk as our current prototype. Inuksuk leaves original user
ﬁles in use with applications and exposes the protected copies
as read-only all the time, and silently accepts creation/modiﬁ-
cation of the ﬁles by preserving previous versions. Users are
only involved in ﬁle deletion occasionally in the trusted envi-
ronment (e.g., for regular ﬁle deletion or in case the protected
partition becomes full). Although our current prototypes are
less than ideal (e.g., ﬁle transfer performance), we believe
Inuksuk is a solid step towards countering rootkit ransomware.
The source code of our prototypes will be made available
through: https://madiba.encs.concordia.ca/software.html.
ACKNOWLEDGMENT
We are grateful to our shepherd Jonathan M. McCune
for guiding us in the ﬁnal version of this paper. We also
thank the anonymous NDSS2019 reviewers for their insightful
suggestions and comments. We also appreciate the help we
received from the members of Concordia’s Madiba Security
Research Group. The second author is supported in part by an
NSERC Discovery Grant.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
“FAT16/32 ﬁle system library,” http://ultra-embedded.com/releases/fat_
io_lib.zip.
“The history of Cryptowall: a large scale cryptographic ransomware
threat,” https://www.cryptowalltracker.org/.
“Library and utilities for manipulating TCG Opal compliant self-
encrypting hard drives,” https://github.com/tparys/topaz-alpha.
“List of USB ﬂash drives with hardware write protection,”
https://www.fencepost.net/2010/03/usb-ﬂash-drives-with-hardware-
write-protection/.
“The no more ransom project,” https://www.nomoreransom.org/en/
index.html.
“Programmed I/O (PIO) modes,” http://www.pcguide.com/ref/hdd/if/
ide/modes_PIO.htm.
[7] D. Abramson, J. Jackson, S. Muthrasanallur, G. Neiger, G. Regnier,
R. Sankaran, I. Schoinas, R. Uhlig, B. Vembu, and J. Wiegert, “Intel
virtualization technology for directed I/O,” Intel technology journal,
vol. 10, no. 3, 2006.
[8] G. Alendal, C. Kison, and modg, “got HW crypto? on the (in) security
of a Self-Encrypting Drive series,” techreport (2015), https://eprint.iacr.
org/2015/1002.pdf.
[9] AMD.com, “AMD64 architecture programmer’s manual volume 2:
System programming,” Dec. 2017. http://support.amd.com/TechDocs/
24593.pdf.
[10] ArsTechnica,
improved
“New and
CryptXXX ransomware
in $45,000 in 3 weeks,” news article (June 27, 2016).
rakes
https://arstechnica.com/information-technology/2016/06/new-and-
improved-cryptxxx-ransomware-rakes-in-45000-in-3-weeks/.
J. V. Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow:
Extracting the keys to the intel SGX kingdom with transient out-of-order
execution,” in USENIX Security Symposium. USENIX Association,
2018, pp. 991–1008.