print ".r&\nl 1 n n n n n.*
97
如果把form4的输出输送给tbl，就可以得到下面这张表格：
Report No. 3
POPULATION,AREA,POPULATION DENSITY
January 1, 1988
CONTINENT
COUNTRY
POPULATION
AREA
POP DEN.
Millions
Pct. of
Thousands
Pct. of
People per
of People
Total
of Sq. Mi.
Total
Sq. Mi.
Asia
Japan
120
4.3
144
0.6
833.3
India
746
26.5
1267
4.9
588.8
China
1032
36.6
3705
14.4
278.5
USSR
275
9.8
8649
33.7
31.8
TOTAL for Asia
2173
77.1
13765
53.6
Europe
Germany
61
2.2
2.0
96
0
635.4
England
56
94
0.4
595.7
France
55
2.0
211
0.8
260.7
TOTAL for Europe
172
6.1
401
1.6
North America
Mexico
78
2.8
762
3.0
102.4
USA
237
8.4
3615
14.1
65.6
Canada
25
6′0
3852
15.0
6.5
TOTAL for North America
340
12.1
8229
32.0
South America
Brazil
134
4.8
3286
12.8
40.8
TOTAL for South America
134
4.8
3286
12.8
GRAND TOTAL
2819
100.0
19957
100.0
如果可能的话，我们建议构造一个程序来格式化表格，实现一个像tb1这样复杂的程序的确很有野
心，但不妨让我们从一个小程序开始：这个程序以左对齐的方式在列中打印文本条目，其列宽度为所在列
---
## Page 100
第四章
报表与数据库
92
的最大值；如果是数值则右对齐，但是数值所占的域相对于本列最宽的项居中，如果给定头部与输入文件
countries，程序的输出是：
COUNTRY
AREA
POPULATION
CONTINENT
USSR
8649
275
Asia
Canada
3852
25
North America
China
3705
1032
Asia
USA
3615
237
North America
Brazi1
3286
134
South America
India
1267
746
Asia
Mexico
762
78
North America
France
211
55
Europe
Japan
144
120
Asia
Germany
96
61
Europe
England
94
56
Europe
程序的实现代码非常紧凑：
98
#table - simple table formatter
BEGIN{
001）uxds=sxuq4=S
number = "~[+- ]?([09]+[ - ]?[ 09 ]*|[ - ][ 09]+)$"
row[NR] = $0
for (i = 1; i y) ?x :y }
function numjust(n, s) ( # position s in field n
return S substr(blanks, 1, int((wid[n]-nwid[n])/2))
）
第一次遍历记录数据与每列的最大宽度，第二次遍历（位于END）在适当的位置打印每一项，对字母项进
行左对齐比较容易：我们使用wid[i]（第i列的最大宽度）为printf构造格式字符串，比如说，如果
列的最大宽度是10，则第i列的格式字符串就是名-10s（假设该列是字母项）.
如果是数字项，则要多做点工作：第i列的条目V需要右对齐，就像这样：
[T]pT
nwid[i]
1
v左边的空格数是（wid[i]-nwid[i])/2,所以numjust会在v的末尾拼接这么多的空格，然后再
按照810s的格式输出（假设该列的最大宽度是10).
99
Exercise 4.1够改form3与form4：从别处获取日期，而不是将日期硬编码到代码中.
Exercise4.2由于四舍五入，由form3与form4打印的项并不总是等于对应列的小计，你会如何修正
这个问题？
Exercise4.3表格格式化程序假定所有数字的小数部分的位数都是相同的，修改它，使得即使这个假定
不成立，程序也可以正确地工作，
Exercise 4.4增强table的功能，增强后的table允许输入数据中出现一个格式说明行序列，这个序
列说明了每一列如何格式化随后的数据。（tb1就是这样控制输出格式的）
4.2打包的查询与报表
如果某个查询经常被访问，比较方便的做法是把它打包到一个命令中，这样在下次执行的时候，就可
以少打点字.假设我们想要查询某个国家的人口，面积，以及人口密度，比如说Canada，则可以键入（
定用的是类Unix的shell):
awk '
BEGIN ( FS = "\t")
28 文为 Enhance tab1e to permit a
column
---
## Page 102
第四章报表与数据库
6
$1-/Canada/{
printf ("&s:\n", $1)
printf("\t&.3f mi1lion sq. mi.\n", $2/1000)
printf("\t&.1f people per sq. mi.\n", 1000*$3/$2)
'countries
输出是
Canada:
25 million people
3.852 million sq. mi.
6.5 people per sq. mi.
现在，如果我们想要查询其他国家的信息，在执行每次查询前都需要修改国家的名称，但是更方便的做法
是把程序放入一个可执行文件中，比如就叫info，查询时只要输入
info Canada
info USA
...
我们可以利用2.6节的技术，把一个国家的名称传递给程序，或者，我们也可以利用shell，把国家的名称
放到适当的位置上：
100
awk '
info - print information about country
#
usage: info country-name
BEGIN { FS = "\t" }
$1-/'$1/{
printf("&s:\n", $1)
printf("\t&.3f million sq. mi.\n", $2/1000)
printf("\t&.1f people per sq. mi.\n", 1000*$3/$2)
'countries
程序开头的第二行
$1-/'$1*/
第一个$1指的是当前输入行的第一个字段，而第二个S1（被单引号包围着的）指的是国家名称参数，也
就是执行shell命令info时的第一个参数，第二个S1只对shell可见，当命令被执行时，它被info后
面的字符串所替代，具体过程是：shell通过拼接三个字符串来组合成awk程序，这三个字符串其中两个
是被一对单引号包围起来的多行文本，另外一个是S1，即info的参数，需要注意的是，可以把任意一个
---
## Page 103
第四章报表与数据库
95
正则表达式传递给info，尤其是，我们可以只给出国家名称的一部分，或者一次指定多个国家，也可以
查询到相关的国家信息，比如
info 'Can|uSA'
Exercise 4.5修改info:参数通过ARGV传递进来，而不是由shell进行替换.
格式信函
Awk也可以用于生成格式信函，生成时只需要用参数替换掉格式信函中的文本即可：
letter.text
参数值一
form.gen
格式信函
格式信函的文本内容存放在文件1etter，text中，文本中包含了许多参数，只需要通过参数替换，就可
以生成不同内容的信函，例如，下面的文本使用了参数#1到#4，这些参数分别表示国家名称，人口，面
积，以及人口密度：
101
Subject: Demographic Information About #1
From: AWK Demographics, Inc.
In response to your request for information about #1,
our latest research has revealed that its population is #2
million people and its area is #3 million square miles.
This gives #1 a population density of #4 people per
square mile.
如果输入参数是
Canada : 25 : 3 . 852: 6 . 5
输出的的格式信函是：
Subject: Demographic Information About Canada