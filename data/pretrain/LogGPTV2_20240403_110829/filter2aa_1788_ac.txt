 } 
 return FAIL; 
} 
 7.5  Second Example 
As presented there is four important changes in this version: the process pool now is implemented as a 
circular buffer,the process is now represented as a struct, composed of the process id and the process function 
pointer and all functions return an error/success code. 
The last change is that now the process can inform the kernel that it wants to be rescheduled. The kernel 
then re-adds the process to the process pool 
//return code 
#define SUCCESS   0 
#define FAIL      1 
#define REPEAT    2 
//kernel information 
#define POOL_SIZE 4 
process pool[SLOT_SIZE]; 
char start; 
char end; 
//kernel functions 
char kernelInit(void); 
char kernelAddProc(process newProc); 
void KernelLoop(void); 
The biggest change in kernel usage is that now we need to pass an process struct to AddProc function 
instead of only the function pointer. Note that each process function returns if they are successfully finished or 
if it wants to be rescheduled. 
17 
char tst1(void){ 
 printf("Process 1\n"); 
 return REPEAT; 
} 
char tst2(void){ 
 printf("Process 2\n"); 
 return SUCCESS; 
} 
char tst3(void){ 
 printf("Process 3\n"); 
 return REPEAT; 
} 
void main(void){ 
 //declaring the processes 
 process p1 = {tst1}; 
 process p2 = {tst2}; 
 process p3 = {tst3}; 
 kernelInit(); 
 //now is possible to test if the process was added successfully 
 if (kernelAddProc(p1) == SUCCESS){ 
printf("1st process added\n"); 
 } 
 if (kernelAddProc(p2) == SUCCESS){ 
printf("2nd process added\n"); 
 } 
 if (kernelAddProc(p3) == SUCCESS){ 
printf("3rd process added\n"); 
 } 
 kernelLoop(); 
} 
The kernel function Execute are the one with most changes. Now it needs to check if the executed 
function wants to be rescheduled and act as specified. 
18 
void kernelLoop(void){ 
 int i=0; 
 for(;;){ 
//Do we have any process to execute? 
if (start != end){ 
printf("Ite. %d, Slot. %d: ", i, start); 
//execute the first function and 
//check if there is need to reschedule 
if ( (*(pool[start].Func))() == REPEAT){ 
//rescheduling 
kernelAddProc(pool[start]); 
} 
//prepare to get the next process 
start = (start+1)%POOL_SIZE; 
//just for debug 
i++; 
} 
 } 
} 
The AddProc() function have to check if there is at least two slots available in the buffer (remember that 
the last position is required to be free all times) and insert the process. 
char kernelAddProc(process newProc){ 
 //checking for free space 
 if ( ((end+1)%SLOT_SIZE) != start){ 
pool[end] = newProc; 
end = (end+1)%POOL_SIZE; 
return SUCCESS; 
 } 
 return FAIL; 
} 
The initialization routine only set start and end variables to the first position 
char kernelInit(void){ 
 start = 0; 
 end = 0; 
 return SUCCESS; 
} 
Here is presented the output of the main program for the first 10 iterations. 
----------------------------- 
1st process added 
2nd process added 
3rd process added 
Ite. 0, Slot. 0: Process 1 
Ite. 1, Slot. 1: Process 2 
Ite. 2, Slot. 2: Process 3 
Ite. 3, Slot. 3: Process 1 
Ite. 4, Slot. 0: Process 3 
Ite. 5, Slot. 1: Process 1 
Ite. 6, Slot. 2: Process 3 
Ite. 7, Slot. 3: Process 1 
Ite. 8, Slot. 0: Process 3 
Ite. 9, Slot. 1: Process 1 
... 
----------------------------- 
Note that only process 1 and 3 are repeating, as expected. Note also that the pool is cycling through slots 
19 
0, 1, 2 and 3 naturally. For the user the process pool seems “infinite” as long as there is no more functions than 
slots. 
 7.6  Temporal conditions 
In the majority part of embedded systems, we need to guarantee that a function will be executed in a 
certain frequency. Some systems may even fail if these deadlines are not met. 
There are at least 3 conditions that need to be satisfied in order to implement temporal conditions on the 
kernel: 
1. There must be a tick event that occurs with a precise frequency 
2. The kernel must be informed of the execution frequency needed for each process. 
3. The sum of process duration must “fit” within the processor available time. 
The first condition can be easily satisfied if there is an available internal timer that can generate an 
interrupt. This is true for the overwhelming majority of microcontrollers. There is no need for a dedicate 
interrupt routine. 
For the second condition we just need to add the desired information in the process struct. We added two 
integers, the first indicate the period which the frequency should be recalled (if it returns REPEAT code). The 
second is an internal variable, in which the kernel store the remaining time before call function. 
//process struct 
typedef struct { 
 ptrFunc function; 
 int period; 
 int start; 
} process; 
The third condition depends entirely on the system itself. Suppose a system which the function 
UpdateDisplays() need to be called in 5ms interval. If this function execution time is greater than 5ms it is 
impossible to guarantee its execution interval. Another point worth consideration is about the type of context 
switcher, if it is preemptive or cooperative. On a cooperative system, the process must finish its execution 
before another one can run on CPU. On a preemptive system, the kernel can stop one process execution 
anywhere to execute another process. If a system does not “fit” on the available time, there are three options: 
switch to a faster processor, optimize the execution time of the processes or to redesign the processes 
frequency needs. 
When implementing the time conditions a problem may arrise. Suppose two process P1 and P2. The first 
is scheduled to happen 10 seconds from now and the second at 50 seconds from now. The timer we are using is 
16 bits unsigned (values from 0 to 65.535)  counting in miliseconds and now it is marking 45,5 seconds 
(now_ms =45.535). 
We can see from the picture that the process P2 was correctly scheduled as P2.start = now_ms + 50.000 = 
30.000; The now_ms variable will be incremented until 55.535 when the process P1 will started (with the 
20 
correct delay of 10 seconds). The variable now_ms will continue until 65.535 and then return to zero. 
When the overflow happen, exactly 20 seconds has passed from the start (65.535 - 45.535 = 20.000ms). 
P2 required 50 seconds of delay. Its necessary to wait for more 30 seconds before it can be called, which is 
exactly what will happen when now_ms get to 30.000. 
The problem to use an finite number to measure time may arise when two processes should be called 
withing a small space of time or even simultaneous.  
Suppose that now P1 and P2 are scheduled to happen exactly at now_ms = 30.000. If P1 is called first and 
takes 10 seconds to be executed we will have the following time-line: 
The question now is: From the time-line above (that is the only information that the kernel has), the 
process P2 should have already been executed and wasn't or it was scheduled to happen 50.535 ms from now? 
In order to solve this problem there are two options: 
1. Create a flag for each process indicating when it has already being passed by the timer counter. This 
way we can know if a process behind the counter is late or if it has been scheduled to happen ahead. 
2. Create a counter that will be decrement at each kernel clock. It will be executed when it arrives at zero. 
The second option introduces more overhead as we need to decrement all processes counters. On the 
other hand if we allow the counter to assume negative numbers (as it is decremented) we can see for how 
many time the process is waiting. With this information we can do something to avoid starvation. One option is 
to create a priority system and promote the process if it stays too much time without being executed. 
 7.7  Third Example 
This time we're adding the time component to the kernel. Each process has a field called start which is 
decremented as time pass by. When it became zero (or negative) we call the function. 
The ExecuteKernel() function will be responsible to find the process that is closer to be executed based on 
its start counter. It is necessary to go through the whole pool to make this search. When the next process to be 
executed is found we swap its position with the first one on the pool. After it we just spend time waiting for the 
process be ready to execute. 
This apparent useless time is needed to synchronize all the events and is a good opportunity to put the 
system on the low power mode. 
21 
void ExecutaKernel(void){ 
 unsigned char j; 
 unsigned char next; 
 process tempProc; 
 for(;;){ 
if (start != end){ 
//Findind the process with the smallest start 
j = (start+1)%SLOT_SIZE; 
next = start; 
while(j!=end){ 
//does the next has a smaller time? 
if (pool[j].start 0){ 
//great place to use low power mode 
} 
//checking if need to be repeated 
if ( (*(pool[ini].function))() == REPEAT ){ 
AddProc(&(vetProc[ini])); 
} 
//next process 
ini = (ini+1)%SLOT_SIZE; 
} 
 } 
 } 
Now the interrupt routine. It must decrement the start field of all of the processes. 
void interrupt_service_routine(void) interrupt 1{ 
unsigned char i; 
 i = ini; 
 while(i!=fim){ 
if((pool[i].start)>(MIN_INT)){ 
pool[i].start--; 
} 
i = (i+1)%SLOT_SIZE; 
 } 
} 
The AddProc() function will be the responsible to initialize the process with an adequate value on the 
struct fields. 
22 
char AddProc(process newProc){ 
 //checking for free space 
 if ( ((end+1)%SLOT_SIZE) != start){ 
pool[end] = newProc; 
//increment start timer with period 
pool[end].start += newProc.period; 
end = (end+1)%SLOT_SIZE; 
return SUCCESS; 
 } 
 return FAIL; 
} 
Instead of resetting the start counter we add the period to it. This was done because when the function 
starts, its counter keeps decrementing. If a function needs to be executed at a 5ms interval and it spends 1ms 
executing, when it finishes we want to reschedule it to execute 4ms ahead (5ms of period + -1ms negative start 
counter) and not 5ms ahead. 
Void pointers 
When designing the device driver controller we should build an “call distribution center”. This center will 
receive an order from the application, via kernel, and redirect it to right device driver. The problem arises when 
we think on how many parameters the function should receive: one representing which driver is required, 
another one indicates which function of that driver should be called and an unknown amount of parameters 
that need to be passed to the driver. How to build such function? 
It can be done with a pointer to void. 
char * name = “Paulo”; 
double weight = 87.5; 
unsigned int children = 3; 
void print(int option; void *parameter){ 
 switch(option){ 
case 0: 
printf("%s",*((char*)parameter)); 
break; 
case 1: 
printf("%f",*((double*)parameter)); 
break; 
case 2: 
printf("%d",*((unsigned int*)parameter)); 
break; 
 } 
} 
void main (void){ 
 print(0, &name); 
 print(1, &weight); 
 print(2, &children); 
} 
From the above example we can see how to receive different types using the same function. 
23 
 8  The Kernel 
This is the full kernel presented in the earlier steps. In order to make it run on the development board we 
are counting on auxiliary libraries: one to work with interrupts (int.c and int.h), one to operate the timer 
(timer.c and timer.h), one to configure the microcontroler fuses (config.h) and another one with the special 
registers information (basico.h). 
//CONFIG.H 
//microcontroler fuses configuration 
code char at 0x300000 CONFIG1L = 0x01;  // No prescaler used 
code char at 0x300001 CONFIG1H = 0x0C;  // HS: High Speed Cristal 
code char at 0x300003 CONFIG2H = 0x00;  // Disabled-Controlled by SWDTEN bit  
code char at 0x300006 CONFIG4L = 0x00;  // Disabled low voltage programming 
//INT.H 
void InicializaInterrupt(void); 
//TIMER.H 
char FimTimer(void); 
void AguardaTimer(void); 
void ResetaTimer(unsigned int tempo); 
void InicializaTimer(void); 
//BASICO.H (only part of it) 
#define SUCCESS  0 
#define FAIL     1 
#define REPEAT   2 
//bit functions 
#define BitFlp(arg,bit) ((arg) ^= (1<<bit))  
//special register information 
#define PORTD   (*(volatile __near unsigned char*)0xF83) 