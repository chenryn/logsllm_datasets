(cid:3)
= EncryptK(A, U, tagresponse, M ), h
(cid:3)
= MACK
(cid:3)
(cid:2) (ct
)]
Nodes use security data requests to obtain both certiﬁcates
and ABE encryption and decryption attributes from the
respective authorities. The security properties of PKE and
MAC guarantee that nobody can issue requests on behalf of
another user or receive the credentials of another user. They
also ensure that tampering with the request and response
messages will be detected.
35
5.3 Building Trust
To avoid attacks where malicious nodes masquerade as
other nodes in the system, we need to establish cryptographic
identities for the nodes in the network and then build trust in
those. We use certiﬁcates as a means for node identiﬁcation,
where a node certiﬁcate contains a signature veriﬁcation
key that can be used to bind particular content to that
node. There are two diﬀerent types of certiﬁcates: self-
signed certiﬁcates and certiﬁcates signed by a certiﬁcate
authority (CA). The basic trust premise in our system is
that a node trusts another node if and only if there is at
least one authority that has certiﬁed both of them.
We do not assume that nodes in the system have received
their certiﬁcates from trusted authorities in advance. When a
node U joins the network, it has only a self-signed certiﬁcate
Φ(U, U). It sends to any trusted authority A, a security
data request SDReq(M) with message:
M = {CertiﬁcateSigningRequest, Φ(U, U)}
The authority sends back a signed certiﬁcate for the user
Φ(U, A) in a security data response SDRes(M) with message:
M = {SignedCertiﬁcate, Φ(U, A), Φ(A, A)}
When two nodes encounter each other for the ﬁrst time,
they establish a connection and exchange their certiﬁcates.
A remote user U
is added to the set of nodes trusted by
node U if and only if it presents certiﬁcates that pass the
following veriﬁcation check:
(cid:3)
Verify(Φ(U
(cid:3)
(cid:3)
, U
), Φ(U
(cid:3)
, A)) ∧ Verify(Φ(U
(cid:3)
, A), Φ(A, A))
P ublisher
{M etaData}[Content]σ(cid:5)c0(cid:6)
{M etaData}[Content]σ
(cid:3)(cid:5)c0, c1(cid:6)
Subscriber
Broker
Figure 2: Signature chaining serves two purposes.
First, it ensures that content ﬂows through trusted
paths from the publisher to the subscriber. Second,
it provides subscribers with certiﬁed provenance.
5.4 Attribute Provisioning
We use MA-ABE to enforce access control over the content
and metadata of data objects. Nodes obtain MA-ABE en-
cryption and decryption credentials from the authorities that
are responsible for the respective attributes. An authority
A can issue credentials for attributes of the form A · α. A
node requests an attribute credential for A · α by sending a
security data request SDReq(M ) with message:
M = {AttributeRequest, A · α}
If the authority grants the request, it publishes a security
(cid:3)
where A is an authority trusted by the node U.
A node trusts the content of a data object that it receives
only if it is signed by a node that it trusts.
6.
data response SDRes(M
) with message:
(cid:3)
= {Attribute, A · α, KeyGenMA−ABE(A, A · α)}
M
IMPLEMENTATION
Content Re-signing.
When a node Ui forwards data objects:
{ctMetaData}[ctContent]σUi−1 =
Sign(SKsign,Ui−1 , ctMetaData||ctContent)
that are signed by another user Ui−1 that is trusted by Ui,
it re-signs the data object with its own signature σ:
{ctMetaData}[ctContent]σUi = Sign(SKsign,Ui , ctMetaData||ctContent)
This allows published data objects to transition across diﬀer-
ent trust domains.
Signature Chaining.
As a data object moves across the network, its lineage is
recorded in its metadata. This can be used later to verify
the source and the forwarding path of a particular data ob-
ject. For this purpose we create signature chains (cid:5)c0,··· , cn(cid:6)
which are computed as follows:
c0 = Sign(SKsign,U0 , ctMetaData||ctContent)
for 1 ≤ i ≤ n
ci = Sign(SKsign,Ui , ci−1)
where U0 is the publisher of the data object and U1, . . . , Un
are the nodes that forward the data object. Thus, the data
object forwarded from Ui to Ui+1 is of the form:
{ctMetaData}[ctContent]σUi(cid:5)c0,··· , ci(cid:6)
36
The functionality of the security framework is designed to
compose with the other features of the underlying ICN [25,
26]. Since content encryption occurs at ﬁle granularity, it
is transparent to the routing, caching, and network coding
components (that operate on data objects corresponding
to encrypted ﬁles instead of the original ones). Control
metadata is not encrypted, allowing delay-tolerant routing,
utility-based caching, and context-aware network coding to
operate unchanged. Since the hashing of tags and interests
supports equality checks, threshold matching of content to
interests continues unmodiﬁed at nodes authorized to serve
as brokers. The inability of unauthorized nodes to broker
matches results in the only change in system behavior – that
is, since content must ﬂow through a subset of all possible
connections, routing robustness may be sacriﬁced.
We implemented our solution by extending the Haggle
framework, as shown in Figure 3. The Haggle framework
consists of two codebases – the Haggle kernel and a library
libhaggle that ICN applications use. Each node on the
network runs an instance of the Haggle kernel. Applications
can publish data objects and express their interests by com-
municating with the local Haggle kernel. This is done via the
shared library that communicates with the kernel through
a socket. The kernel is responsible for transferring content
between nodes, matching application interests to available
content, and delivering content to applications.
The kernel on each node is conﬁgured with default security
parameters (such as shared secrets, authority details, and
access control lists) in its conﬁguration ﬁle. The kernel is
responsible for handling key management and distribution of
MA-ABE attributes, as well as handling trust management
and veriﬁcation of certiﬁcates and signatures. All of the
security operations are transparent to applications. To allow
publishers to restrict access to content, the kernel checks for
Access metadata attached to data objects being published.
This metadata is known as a content attribute in Haggle
parlance, and diﬀer from the MA-ABE attributes that serve
as credentials. If the Access attribute is present, its value is
used as the access policy for the data object. The content will
then be encrypted with the access policy speciﬁed. At each
receiving node, the kernel will check the encryption status of
each data object, perform decryption if required, and deliver
the plaintext data object to any local subscribing applica-
tions. Thus, access control is transparent to applications
and publishers only need to add an access policy tag (using
existing calls already present in libhaggle). Subscribers will
receive decrypted content with no application modiﬁcations.
The Haggle kernel is an event-based architecture with
multiple managers cooperating to provide various pieces of
functionality. Each manager runs in its own thread and com-
municates with other managers by sending events through
a shared queue. Each manager can also instantiate its own
background worker threads for computationally-intensive op-
erations. The ApplicationManager handles communication
with local publishing and subscribing applications. The Data-
Manager is responsible for data object storage, caching, and
purging. The NodeManager manages remote node interests
and matching. The ForwardingManager is responsible for
routing decisions. The ProtocolManager handles low-level
protocol communications between nodes. The SecurityMan-
ager is responsible for security. The layer-less architecture
allowed us to make most of our changes in the SecurityMan-
ager, with minor modiﬁcations in other managers.
Access Control. Using access control is transparent to
end-user applications. Publishers only need to add an access
policy tag. Subscribers receive decrypted content without
any changes to applications.
Figure 3 illustrates the ﬂow of a data object during pub-
lication.
In step 1, a local application publishes a data
object with an access policy using libhaggle. The Appli-
cationManager receives this, and notiﬁes the DataManager
(2). It is then inserted into the DataStore (3) and other
managers are notiﬁed about this through the Event Queue
(4). The SecurityManager checks for the presence of an
access policy (5). If one is present, and the node has all the
MA-ABE attributes needed to perform the encryption, an
asynchronous task is created to Encrypt the content. Other-
wise, a SecurityDataRequest is issued, and the encryption is
performed upon receipt of the necessary attributes. During
this encryption task, a symmetric encryption key is gener-
ated, and the content is encrypted with this key. This key
is encrypted using MA-ABE and referred to as a capability.
A new data object is created with the same metadata, the
capability, and the encrypted content. This is then inserted
in the Event Queue (6), where the NodeManager looks for
remote nodes that are interested in this content (7). If any
remote nodes are interested (8), ForwardingManager then
makes routing decisions and asks the ProtocolManager to
send the data using a link layer protocol (9). The Protocol
Manager checks if the data object is destined for an applica-
tion, in which case a plaintext version of the content is sent.
If the data object is going to a remote node, the ciphertext
Figure 3: Haggle provides an event-based ICN ker-
nel. Each feature is implemented in a manager run-
ning in a separate thread. Applications can scope
access to published content simply by tagging it
with an Access attribute (with π denoting the pol-
icy here).
version of the content is used.
A similar process happens at the receiving end.
If an
encrypted data object arrives and an application is inter-
ested in it, the SecurityManager enqueues the data object
for decryption. A check is performed to see whether all
the necessary MA-ABE decryption attributes are present.
If not, a SecurityDataRequest is issued. After the relevant
SecurityDataResponse is received, the symmetric encryption
key is recovered from the capability via a Decrypt operation.
The key is then used to symmetrically decrypt the content. A
new data object is created with the same metadata, but with
the decrypted content and without the capability tag. This
plaintext is then made available to the interested application.
Integrity. The SecurityManager intercepts incoming node
descriptions and extracts certiﬁcates present during the ex-
change of routing metadata. These certiﬁcates are veriﬁed
using the mechanisms described in Section 5.3. When data
objects are received from applications, the SecurityManager
automatically signs them and updates the signature chain.
When data objects are received from remote nodes, the Secu-
rityManager performs signature veriﬁcation and drops them
if veriﬁcation fails.
When a data object is to be sent, the SecurityManager
checks whether a signature is present.
If no signature is
present, the sending is blocked, and it is enqueued for signing.
The SecurityHelper will compute a signature and re-queue
the data object for sending. When a data object is received,
37
Overhead
No security
Signatures
Encryption with Cached Access Policies
Encryption with Uncached Access Policies
Time (s)
Space (KB)
Linux Android
0.107
0.107
0.145
0.422
0.793
0.888
0.924
2.391
51,794
51,873
52,194
52,194
Table 1: Time and space overhead of encryption and signing.
L
A1
P1
P2
P3
P4
R
30m
M1(1.4m/s)
M2(1.4m/s)
M3(1.4m/s)
100m
P5
P6
P7
A2
Figure 4: There are two groups of nodes arranged in a grid formation. Three data mules move back and forth
to transfer data, staying for 60 seconds each time.
the SecurityManager looks up the relevant node certiﬁcate
in a store of veriﬁed certiﬁcates. If one is present, then a
signature veriﬁcation task is enqueued. The SecurityHelper
will perform the signature veriﬁcation and pass the data
object on to other managers.
If no veriﬁed certiﬁcate is
present, or the veriﬁcation fails, the data object is dropped.
7. EVALUATION
Our security design uses the computationally expensive
MA-ABE primitive. Consequently, the result of transfor-
mations that use it are cached. We expect that this will
ameliorate the impact on system performance with typical
workloads. This was conﬁrmed through empirical studies.
We evaluated the implementation in two environments.
The ﬁrst was a testbed of 30 Samsung Nexus S devices run-
ning Android Gingerbread (2.3). The second environment
consisted of Linux containers, spawned by the network emu-
lation framework, NRL’s CORE 4.3 and EMANE 0.7.3 [2].
Micro-Benchmark. We ran micro-benchmarks to mea-
sure the speed of cryptographic primitives used. On Linux,
we also ran a version of the tests with the CPU limited to
mimic the resource constraints of mobile Android devices.
We used a simple two node test, with the user node publish-
ing data objects, and the authority node subscribing to data
objects. 512 KB ﬁles, 2048-bit RSA signatures, and access
policies with eight MA-ABE attributes were used. 101 data