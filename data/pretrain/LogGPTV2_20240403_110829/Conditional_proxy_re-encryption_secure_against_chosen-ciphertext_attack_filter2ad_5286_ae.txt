Secure Proxy Re-Encryption without Pairings. To appear
in CANS’08. Springer-Verlag, 2008.
[16] T. ElGamal. A Public-Key Cryptosystem and a Signature
Scheme Based on Discrete Logarithms. In Advances in
Cryptology-Crypto’84, LNCS 196, pp.10-18,
Springer-Verlag, 1984.
[17] E. Fujisaki and T. Okamoto. Secure Integration of
Asymmetric and Symmetric Encryption Schemes, In
Advances in Cryptology-Crypto’99, LNCS 1666, pp.
537-554, Springer-Verlag, 1999.
[18] M. Green and G. Ateniese. Identity-Based Proxy
Re-Encryption. In Proc. of ACNS’07, LNCS 4521, pp.
288-306, Springer-Verlag, 2007.
[19] P. Golle, M. Jakobsson, A. Juels, and P. F. Syverson.
Universal Re-Encryption for Mixnets. In Proc. of
CT-RSA’04, LNCS 2964, pp. 163-178, Springer-Verlag,
2004.
[20] P. Golle, J. Staddon, and B. Waters. Secure Conjunctive
Keyword Search over Encrypted Data. In Proc. of
ACNS’04. LNCS 3089, pp. 31-45, Springer-Verlag, 2004.
[21] M. Jakobsson. On Quorum Controlled Asummetric Proxy
Re-Encryption. In Proc. of PKC’99, LNCS 1560, pp.
112-121, Springer-Verlag, 1999.
[22] J. Katz, A. Sahai, and B. Waters: Predicate Encryption
Supporting Disjunctions, Polynomial Equations, and Inner
Products. In advances in Cryptology-Eurocrypt’08, LNCS
4965, pp. 146-162, Springer-Verlag, 2008.
[23] B. Libert and D. Vergnaud. Unidirectional
Chosen-Ciphertext Secure Proxy Re-encryption. In Proc. of
PKC’08, LNCS 4929, pp. 360-379, Springer-Verlag, 2008.
[24] B. Libert and D. Vergnaud. Tracing Malicious Proxies in
Proxy Re-Encryption. In Proc. of Pairing’08, LNCS 5209,
pp. 332-353, Springer-Verlag, 2008.
[25] T. Matsuo. Proxy Re-Encryption Systems for
Identity-Based Encryption. In Proc. of Paring’07, LNCS
4575, PP. 247-267, Springer-Verlag, 2007.
[26] Masahiro Mambo and Eiji Okamoto. Proxy Cryptosystems:
Delegation of the Power to Decrypt Ciphertexts. IEICE
Trans. Fund. Electronics Communications and Computer
Science, E80-A/1:54-63, 1997.
[27] E. Shi, B. Waters: Delegating Capabilities in Predicate Encryp-
tion Systems. In Proc. of ICALP (2) 2008, LNCS 5126, pp. 560-
578, Springer-Verlag, 2008.
Appendix
A Proof of Lemma 2
Proof. Suppose B is given as input a 2-QBDH challenge
tuple (g, g1/a, ga, gb) with unknown a, b $← Z∗
q . Algorithm
B’s goal is to output e(g, g)b/a2
. Algorithm B ﬁrst picks
q , deﬁnes g1 = gu, f = (ga)α1 , f1 = (ga)α2 ,
u, α1, α2
and gives (g, g1, f, f1) to A. Next, B acts as a challenger and
plays the Type II IND-CPRE-CCA game with adversary A
in the following way:
$← Z∗
Hash Oracle Queries. B maintains ﬁve hash lists H list
with i ∈ {1,··· , 5}, and responds in the same way as in the
proof of Lemma 1, except that H3 queries are conducted in
the following way:
i
• H3 queries: On receipt of an H3 query (w, pki), if this
in a tuple (w, pki, s, S, coin),
3
query already appears on the H list
return the predeﬁned value S. Otherwise, pick s $← Z∗
and ﬂip a random biased coin coin ∈ {0, 1} that yields
0 with probability θ and 1 with probability 1 − θ. If
coin = 0 then the hash value H3(w, pki) is deﬁned as
S = gs, else S = gbs. Finally, S is returned to A and
(w, pki, s, S, coin) is added to the H list
.
q
3
1
a )
1
axi
1
q , and deﬁnes pki = (Pi, Qi) = (gaxi , g
Phase 1. In this phase, A issues a series of queries subject
to the restrictions of the Type II IND-CPRE-CCA game. B
maintains a list K list, and answers these queries as follows:
• Uncorrupted key generation query (cid:104)i(cid:105): B ﬁrst picks
$← Z∗
) =
xi
u
((ga)xi , (g
xi ). Next, it deﬁnes ci = 0, adds the tuple
(pki, xi, ci) to the K list, and returns pki to adversary
A. Here the bit ci is used to denote whether the se-
cret key with respect to pki is corrupted, i.e., ci = 0
indicates uncorrupted and ci = 1 means corrupted.
• Corrupted key generation query (cid:104)j(cid:105): B ﬁrst picks xj
$←
Z∗
u
q and deﬁnes pkj = (Pj, Qj) = (gxj , g
xj ), cj = 1.
Next, it adds the tuple (pkj, xj, cj) to the K list and
returns (pkj, xj) to A.
• Partial re-encryption key query (cid:104)pki, pkj(cid:105): B recovers
tuples (pki, xi, ci) and (pkj, xj, cj) from the K list, and
constructs the partial re-encryption key rki,j for A ac-
cording to the following cases:
– If ci = cj. Respond with rki,j = gxj /xi .
– If ci = 1 ∧ cj = 0. Respond with rki,j = (ga)xj /xi .
– If ci = 0∧cj = 1. Respond with rki,j =
“
g1/a”xj /xi
.
3
• Condition key query (cid:104)pki, w(cid:105): B ﬁrst recovers the tuple
(pki, xi, ci) from the K list and the tuple (w, pki, s, S, coin)
from the H list
. Next, it constructs the condition key
cki,w for adversary A according to the following cases:
– If ci = 1, it means that ski = xi. Algorithm B
responds with cki,w = S1/xi .
– If ci = 0 ∧ coin = 0, it means that ski = axi
and H3(w, pki) = gsi . Algorithm B responds with
cki,w =
– If ci = 0 ∧ coin = 1, it means that ski = axi and
H3(w, pki) = gbsi . Algorithm B outputs “failure”
and aborts.
• Re-encryption query (cid:104)pki, pkj, (w(cid:48), CTi)(cid:105): B parses pki =
(Pi, Qi), pkj = (Pj, Qj) and CTi = (A, B, C, D). If Eq.
(2) does not hold, it outputs ⊥; otherwise, it acts as
follows:
g1/a”si/xi
“
.
1. Recover tuples (pki, xi, ci) and (pkj, xj, cj) from
the K list.
3
the partial re-encryption key rki,j.
2. Issue a partial re-encryption key query to obtain
3. Recover the tuple (w(cid:48), pki, s, S, coin) from the H list
,
and produce the re-encrypted ciphertext according
to the following two cases:
– ci = 0∧ coin = 1: Search whether there exists a
tuple (m, r(cid:48), w, r) ∈ H list
such that gr
1 = A and
j ), C(cid:48) =
w = w(cid:48). If yes, compute B(cid:48) = e(g, P r
C ⊕ H4(e(Qi, Sr)), and return CTj = (B(cid:48), C(cid:48))
as the re-encrypted ciphertext to A; otherwise
return ⊥.
– Otherwise: Algorithm B ﬁrst constructs the
condition key cki,w(cid:48) as in the condition key
queries, and then returns ReEncrypt(CTi, rki,j, cki,w(cid:48) )
to A.
1
4. Pick δ $← {0, 1} and r(cid:48)
H1(mδ, r(cid:48), w∗) = y∗
(mδ(cid:107)r(cid:48))⊕H2(e(g, g
neither y∗
phertext to adversary A.
a nor e(g, g)
$← {0, 1}l1 .
a and H4(e(g, g)
a )y∗
1
Implicitly deﬁne
ubs∗ y∗
a2x∗ ) = C∗ ⊕
) (note that algorithm B knows
ubs∗ y∗
a2x∗ ).
5. Return CT∗ = (A∗, B∗, C∗, D∗) as the challenged ci-
Note that by the construction given above, if let r∗ (cid:44) y∗
a ,
we can see that the challenged ciphertext CT∗ has the same
distribution as the real one, since H2 and H4 act as random
oracles, and
= `g1/a´uy∗
=`gu´y∗/a = gr∗
=`gax∗´y∗/a = P r∗
1 ,
(cid:48)
(cid:48)
) ⊕`C
= gx∗y∗
i∗ ,
) ⊕ H2(e(g, g1/a)y∗
= (mδ(cid:107)r
y∗
= (mδ(cid:107)r
) ⊕ H2(e(g, g)
a ) ⊕ H4(e(g, g)
y∗
a ) ⊕ H4(e((gu)
= (mδ(cid:107)r
) ⊕ H2(e(g, g)
) ⊕ H2(e(g, g)r∗
= (mδ(cid:107)r
) ⊕ H4(e(Qi∗ , H3(w
= g(α1H5(A∗,B∗,C∗)+α2)y∗
∗ ⊕ (mδ(cid:107)r
(cid:48)
ubs∗ y∗
a2x∗ )
ax∗ , gbs∗
1
(cid:48)
(cid:48)
∗
A
∗
B
∗
C
∗
D
)
y∗
a )
, pki∗ )r∗
Phase 2. Adversary A continues to issue the rest of queries
as in Phase 1, with the restrictions described in the Type II
IND-CPRE-CCA game. B responds to these queries as in
Phase 1.
Guees. Eventually, adversary A outputs a guess δ(cid:48) ∈ {0, 1}.
Algorithm B randomly picks a tuple (V, γ) from the list H list
,
x∗
us∗ y∗ as the solution to the given 2-QBDH
and outputs V
instance.
4
• Decryption query (cid:104)pki, (w(cid:48), CT)(cid:105) or (cid:104)pki, CT(cid:105): Algo-
rithm B responds as follows:
1. Parse pki as (Pi, Qi). Recover the tuple (pki, xi, ci)
from the K list. If ci = 1 (i.e., ski = xi), decrypt
CT using xi and return the resulting plaintext to
A.
2. Parse CT as CT = (A, B, C, D) or CT = (B, C).
When CT = (A, B, C, D), return ⊥ if Eq. (2) does
not hold.
exist tuples (m, r(cid:48), w, r) ∈ H list
such that
to see whether there
and (U, β) ∈ H list
3. Search lists H list
 β ⊕ (m(cid:107)r(cid:48)) = C,
i = B, U = e(g, g)r, w = w(cid:48),
P r
β ⊕ (m(cid:107)r(cid:48)) ⊕ H4(e(Qi, H3(w, pki))r) = C,
and
If yes, return m to A. Otherwise, return ⊥.
and H list
2
1
2
1
Challenge. When A decides that Phase 1 is over, it outputs
a target public key pki∗ = (Pi∗ , Qi∗ ), a condition w∗ and
two equal-length messages m0, m1 ∈ {0, 1}l0 . Algorithm B
responds as follows:
1. Recover the tuple (w∗, pki∗ , s∗, S∗, coin∗) from the H list
.
If coin∗ = 0, output “failure” and abort. Otherwise
(meaning that H3(w∗, pki∗ ) = gbs∗
), continue to exe-
cute the rest steps.
2. Recover the tuple (pki∗ , x∗, c∗) from the K list.
3. Pick y∗
$← {0, 1}l0+l1 . Deﬁne A∗ =
q and C∗
3
“
g1/a”uy∗
$← Z∗
, B = gx∗y∗
, D∗ = g(α1H5(A∗,B∗,C∗)+α2)y∗
.
) ⊕ H2(e(g, g1/a)y∗
)´
=`ga(α1H5(A∗,B∗,C∗)+α2)´y∗/a =`f H5(A∗,B∗,C∗)f1
),
∗
“

(cid:48) ≥ 1
qH4
Analysis. Similarly to the analysis in Lemma 1, it can be
seen that B’s advantage against the 2-QBDH problem is at
least

− qH1 (1 + qd)
− qre + qd
e(1 + qck)
2l0+l1
and B’s running time is bounded by
(cid:48) ≤ t + (qH1 + qH2 + qH3 + qH4 + qH5 + qu + qc + qrk + qck + qre + qd)O(1)
t
q
”
,
+ (2qu + 2qc + qrk + qck + 2qre + qH1 qre + 2qH1 qd + 3)te + (6qre + 4qd + qH1 qd + 1)tp.
If CT=(A, B, C, D);
If CT=(B, C).
This completes the proof of Lemma 2.