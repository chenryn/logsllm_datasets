| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = (imm > h; advance_pc (4);                                |
| Syntax:      | sra $d, $t, h                                                |
| Encoding:    | `0000 00-- ---t tttt dddd dhhh hh00 0011`                    |
### MIPS指令**SRL -- Shift right logical**
| Description: | Shifts a register value right by the shift amount (shamt) and places the value in the destination register. Zeroes are shifted in. |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $d = $t >> h; advance_pc (4);                                |
| Syntax:      | srl $d, $t, h                                                |
| Encoding:    | `0000 00-- ---t tttt dddd dhhh hh00 0010`                    |
### MIPS指令**SRLV -- Shift right logical variable**
| Description: | Shifts a register value right by the amount specified in $s and places the value in the destination register. Zeroes are shifted in. |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $d = $t >> $s; advance_pc (4);                               |
| Syntax:      | srlv $d, $t, $s                                              |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0000 0110`                    |
### MIPS指令**SUB -- Subtract**
| Description: | Subtracts two registers and stores the result in a register |
| ------------ | ----------------------------------------------------------- |
| Operation:   | $d = $s - $t; advance_pc (4);                               |
| Syntax:      | sub $d, $s, $t                                              |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0010 0010`                   |
### MIPS指令**SUBU -- Subtract unsigned**
| Description: | Subtracts two registers and stores the result in a register |
| ------------ | ----------------------------------------------------------- |
| Operation:   | $d = $s - $t; advance_pc (4);                               |
| Syntax:      | subu $d, $s, $t                                             |
| Encoding:    | `0000 00ss ssst tttt dddd d000 0010 0011`                   |
### MIPS指令**SW -- Store word**
| Description: | The contents of $t is stored at the specified address. |
| ------------ | ------------------------------------------------------ |
| Operation:   | MEM[$s + offset] = $t; advance_pc (4);                 |
| Syntax:      | sw $t, offset($s)                                      |
| Encoding:    | `1010 11ss ssst tttt iiii iiii iiii iiii`              |
### MIPS指令**SYSCALL -- System call**
| Description: | Generates a software interrupt.           |
| ------------ | ----------------------------------------- |
| Operation:   | advance_pc (4);                           |
| Syntax:      | syscall                                   |
| Encoding:    | `0000 00-- ---- ---- ---- ---- --00 1100` |
### MIPS指令**XOR -- Bitwise exclusive or**
| Description: | Exclusive ors two registers and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $d = $s ^ $t; advance_pc (4);                                |
| Syntax:      | xor $d, $s, $t                                               |
| Encoding:    | `0000 00ss ssst tttt dddd d--- --10 0110`                    |
### MIPS指令**XORI -- Bitwise exclusive or immediate**
| Description: | Bitwise exclusive ors a register and an immediate value and stores the result in a register |
| ------------ | ------------------------------------------------------------ |
| Operation:   | $t = $s ^ imm; advance_pc (4);                               |
| Syntax:      | xori $t, $s, imm                                             |
| Encoding:    | `0011 10ss ssst tttt iiii iiii iiii iiii`                    |