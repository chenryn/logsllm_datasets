                  addu     $v1, $a3, $a1 ; sum up low parts 
                  addu     $a0, $a2, $a0 ; sum up high parts 
; will carry generated while summing up low parts? 
; if yes, set $v0 to 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
366 
逆向工程权威指南（上册） 
                  sltu     $v0, $v1, $a3 
                  jr        $ra 
; add 1 to high part of result if carry should be generated: 
                  addu     $v0, $a0 ; branch delay slot 
; $v0 - high part of result 
; $v1 - low part of result 
f_sub: 
; $a0 - high part of a 
; $a1 - low part of a 
; $a2 - high part of b 
; $a3 - low part of b 
                   subu    $v1, $a1, $a3 ; subtract low parts 
                   subu    $v0, $a0, $a2 ; subtract high parts 
; will carry generated while subtracting low parts? 
; if yes, set $a0 to 1 
                   sltu    $a1, $v1 
                   jr       $ra 
; subtract 1 from high part of result if carry should be generated: 
                   subu    $v0, $a1 ; branch delay slot 
; $v0 - high part of result 
; $v1 - low part of result 
f_add_test: 
var_10            = -0x10 
var_4              = -4 
                   lui      $gp, (__gnu_local_gp >> 16) 
                   addiu   $sp, -0x20 
                   la       $gp, (__gnu_local_gp & 0xFFFF) 
                   sw       $ra, 0x20+var_4($sp) 
                   sw       $gp, 0x20+var_10($sp) 
                   lui      $a1, 0x73CE 
                   lui      $a3, 0x7593 
                   li       $a0, 0xB3A 
                   li       $a3, 0x75939F79 
                   li       $a2, 0x1555 
                   jal      f_add 
                   li       $a1, 0x73CE2FF2 
                   lw       $gp, 0x20+var_10($sp) 
                   lui      $a0, ($LC0 >> 16)  # "%lld\n" 
                   lw       $t9, (printf & 0xFFFF)($gp) 
                   lw       $ra, 0x20+var_4($sp) 
                   la       $a0, ($LC0 & 0xFFFF)  # "%lld\n" 
                   move    $a3, $v1 
                   move    $a2, $v0 
                   jr       $t9 
                   addiu   $sp, 0x20 
$LC0:             .ascii "%lld\n" 
MIPS 处理器没有标识位寄存器。这种平台的加减运算完全不会存储借/进位信息。它的指令集里也没
有 x86 指令集里的那种 ADC 或 SBB 指令。当需要存储借/进位信息时，编译器通常使用 SLTU 指令把有关
信息（也就是 0 或 1）存储在既定寄存器里，继而在下一步的高数权位运算中纳入借进位信息。 
24.3  乘法和除法运算 
#include  
uint64_t f_mul (uint64_t a, uint64_t b) 
{ 
        return a*b; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 24 章 32 位系统处理 64 位数据 
367 
}; 
uint64_t f_div (uint64_t a, uint64_t b) 
{ 
        return a/b; 
}; 
uint64_t f_rem (uint64_t a, uint64_t b) 
{ 
        return a % b; 
}; 
24.3.1  x86 
使用 MSVC 2012（启用选项/Ox/Ob1）编译上述程序，可得到如下所示的代码。 
指令清单 24.9  Optimizing MSVC 2012 /Ob1 
_a$ = 8 ; size = 8 
_b$ = 16 ; size = 8 
_f_mul  PROC 
        push    ebp 
        mov     ebp, esp 
        mov   
eax, DWORD PTR _b$[ebp+4] 
        push  
eax 
        mov  
ecx, DWORD PTR _b$[ebp] 
        push  
ecx 
        mov  
edx, DWORD PTR _a$[ebp+4] 
        push  
edx 
        mov  
eax, DWORD PTR _a$[ebp] 
        push  
eax 
        call  
__allmul ; long long multiplication 
        pop  
ebp 
        ret  
0 
_f_mul  ENDP 
_a$ = 8 ; size = 8 
_b$ = 16 ; size = 8 
_f_div  PROC 
        push  
ebp 
        mov  
ebp, esp 
        mov  
eax, DWORD PTR _b$[ebp+4] 
        push  
eax 
        mov  
ecx, DWORD PTR _b$[ebp] 
        push  
ecx 
        mov  
edx, DWORD PTR _a$[ebp+4] 
        push  
edx 
        mov  
eax, DWORD PTR _a$[ebp] 
        push  
eax 
        call  
__aulldiv ; unsigned long long division 
        pop  
ebp 
        ret  
0 
_f_div ENDP 
_a$ = 8 ; size = 8 
_b$ = 16 ; size = 8 
_f_rem  PROC 
        push  
ebp 
        mov  
ebp, esp 
        mov  
eax, DWORD PTR _b$[ebp+4] 
        push  
eax 
        mov  
ecx, DWORD PTR _b$[ebp] 
        push  
ecx 
        mov  
edx, DWORD PTR _a$[ebp+4] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
368 
逆向工程权威指南（上册） 
        push  
edx 
        mov  
eax, DWORD PTR _a$[ebp] 
        push  
eax 
        call  
__aullrem ; unsigned long long remainder 
        pop  
ebp 
        ret  
0 
_f_rem   ENDP 
乘除运算复杂很多。所以编译器通常借助标准库函数来处理乘除运算。 
如需了解库函数的各种详细信息，请参见附录 E。 
使用 GCC 4.8.1（启用选项-O3-fno-inline）编译上述程序，可得到如下所示的代码。 
指令清单 24.10  Optimizing GCC 4.8.1 -fno-inline 
_f_mul: 
        push    ebx 
        mov     edx, DWORD PTR [esp+8] 
        mov     eax, DWORD PTR [esp+16] 
        mov     ebx, DWORD PTR [esp+12] 
        mov     ecx, DWORD PTR [esp+20] 
        imul    ebx, eax 
        imul    ecx, edx 
        mul     edx 
        add     ecx, ebx 
        add     edx, ecx 
        pop     ebx 
        ret 
_f_div: 
        sub     esp, 28 
        mov     eax, DWORD PTR [esp+40] 
        mov     edx, DWORD PTR [esp+44] 
        mov     DWORD PTR [esp+8], eax 
        mov     eax, DWORD PTR [esp+32] 
        mov     DWORD PTR [esp+12], edx 
        mov     edx, DWORD PTR [esp+36] 
        mov     DWORD PTR [esp], eax 
        mov     DWORD PTR [esp+4], edx 
        call    ___udivdi3 ; unsigned division 
        add     esp, 28 
        ret 
_f_rem: 
        sub     esp, 28 
        mov     eax, DWORD PTR [esp+40] 
        mov     edx, DWORD PTR [esp+44] 
        mov     DWORD PTR [esp+8], eax 
        mov     eax, DWORD PTR [esp+32] 
        mov     DWORD PTR [esp+12], edx 
        mov     edx, DWORD PTR [esp+36] 
        mov     DWORD PTR [esp], eax 
        mov     DWORD PTR [esp+4], edx 
        call    ___umoddi3 ; unsigned modulo 
        add     esp, 28 
        ret 
GCC 把乘法运算进行内部展开处理，大概是它认为这样的效率更高一些。另外它所调用的库函数
的名称也和 MSVC 不同（参见附录 D）。除此之外，这段汇编指令和 MSVC 的编译结果之间几乎没有
区别。 
24.3.2  ARM 
在编译 Thumb 模式的程序时，Keil 调用库函数进行仿真运算。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 24 章 32 位系统处理 64 位数据 
369 
指令清单 24.11  Optimizing Keil 6/2013 (Thumb mode) 
||f_mul|| PROC 
         PUSH     {r4,lr} 
         BL        __aeabi_lmul 
         POP      {r4,pc} 
         ENDP 
||f_div|| PROC 
         PUSH     {r4,lr} 
         BL        __aeabi_uldivmod 
         POP      {r4,pc} 
         ENDP 
||f_rem|| PROC 
         PUSH     {r4,lr} 
         BL        __aeabi_uldivmod 
         MOVS     r0,r2 
         MOVS     r1,r3 
         POP      {r4,pc} 
         ENDP 
相比之下，在编译 ARM 模式的程序时，Keil 能够直接进行 64 位乘法运算。 
指令清单 24.12  Optimizing Keil 6/2013 (ARM mode) 
||f_mul|| PROC 
         PUSH     {r4,lr} 
         UMULL    r12,r4,r0,r2 
         MLA       r1,r2,r1,r4 
         MLA       r1,r0,r3,r1 
         MOV       r0,r12 
         POP      {r4,pc} 
         ENDP 
||f_div|| PROC 
         PUSH     {r4,lr} 
         BL        __aeabi_uldivmod 
         POP      {r4,pc} 
         ENDP 
||f_rem|| PROC 
         PUSH     {r4,lr} 
         BL        __aeabi_uldivmod 
         MOV      r0,r2 
         MOV      r1,r3 
         POP      {r4,pc} 
         ENDP 
24.3.3  MIPS 
在启用优化选项的情况下编译 MIPS 程序时，GCC 能够直接使用汇编指令进行 64 位乘法运算。但是
在进行 64 位除法运算时，编译器还是会用库函数进行处理。 
指令清单 24.13  Optimizing GCC 4.4.5 (IDA) 
f_mul: 
mult     $a2, $a1 
mflo     $v0 
or     $at, $zero  ; NOP 
or     $at, $zero  ; NOP 
mult     $a0, $a3 
mflo     $a0 
addu     $v0, $a0 
or      $at, $zero  ; NOP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
370 
逆向工程权威指南（上册） 
multu    $a3, $a1 
mfhi     $a2 
mflo     $v1 
jr      $ra 
addu     $v0, $a2 
f_div: 
var_10  
= -0x10 
var_4  
=-4 
lui      $gp, (__gnu_local_gp >> 16) 
addiu    $sp, -0x20 
la     $gp, (__gnu_local_gp & 0xFFFF) 
sw      $ra, 0x20+var_4($sp) 
sw      $gp, 0x20+var_10($sp) 
lw      $t9, (__udivdi3 & 0xFFFF)($gp) 
or      $at, $zero 
jalr     $t9 
or      $at, $zero 
lw       $ra, 0x20+var_4($sp) 
or       $at, $zero 
jr       $ra 
addiu    $sp, 0x20 
f_rem: 
var_10  
= -0x10 
var_4   
=-4 
lui     $gp, (__gnu_local_gp >> 16) 
addiu    $sp, -0x20 
la      $gp, (__gnu_local_gp & 0xFFFF) 
sw       $ra, 0x20+var_4($sp) 
sw       $gp, 0x20+var_10($sp) 
lw       $t9, (__umoddi3 & 0xFFFF)($gp) 
or       $at, $zero 
jalr     $t9 
or       $at, $zero 
lw       $ra, 0x20+var_4($sp) 
or       $at, $zero 
jr       $ra 
addiu    $sp, 0x20 
上述程序中夹杂着大量的 NOP 指令。或许这是因为乘法运算的时间较长，且运算之后需要较长等待时
间的缘故；不过这一观点尚无法证实。 
24.4  右移 
#include  