s
(
l
a
v
e
i
r
t
e
r
k
c
o
b
l
r
o
f
e
m
T
i
160
140
120
100
80
60
40
20
0
1400
1200
1000
800
600
400
200
0
256 Kbit/s
downstream
500 Mbit/s
downstream
Figure 2: Hourly traﬃc distribution of a Bitcoin
node, up and downstream, over 24 hours, w.r.t. to
diﬀerent Bitcoin messages. Here, ‘tx’ denotes trans-
actions.
Figure 3: Block transmission times with respect to
the connection speed. Here, we evaluate the time
to download 400 consecutive Bitcoin blocks on a
500 Mbps and 256 Kbps connection.
of 24 hours6. We observe that, indeed, the transmission of
blocks consumes a signiﬁcant part of the bandwidth of our
client. Requesting the same object from multiple peers en-
tails downloading the same data several times, and therefore
can only increase the bandwidth consumption of the system.
node, 0.5% of the generated blocks exceeded the 20 minute
timeout adopted by current clients. This shows that the
current timeouts adopted in Bitcoin when sending/receiving
blocks are indeed necessary for the correct delivery of blocks
in the network.
Measure 3. Bitcoin relies on static timeouts in order to
prevent blocking while tolerating network outages, conges-
tion, and slow connections.
Given that Bitcoin runs atop an overlay network, com-
munication latency and reliability pose a major challenge to
the correct operation of the system. Currently, Bitcoin re-
lies on timeouts in order to tolerate network delays—while
preventing blocking. Blocking can occur e.g., when a node
stops responding during communication.
For example, in Bitcoin version 0.10, the Bitcoin develop-
ers introduced a block timeout download of 20 minutes7.
Similarly, for transactions, the Bitcoin developers intro-
duced a 2-minute timeout. Notice that the choice of the
timeout is a non-trivial task and depends on a number of
parameters such as bandwidth, object size, latency, process-
ing power, and the Bitcoin version of each node. On the one
hand, overly long timeouts might deteriorate the quality of
service of the whole network and can be abused to conduct
e.g., double-spending attacks [8]. On the other hand, short
timeouts might hinder eﬀective communication under vary-
ing network conditions, or when communicating with slow
peers.
In an experiment that we conducted, we measured the
block transmission times in Bitcoin with respect to the nodes’
bandwidths. Our results (cf. Figure 3) show that block re-
trieval times signiﬁcantly vary depending on the connection
of the node. For instance, fast nodes with 500 Mbps down-
stream take an average of 1.55 seconds to download a block,
while slow nodes equipped with a 256 Kbps connection take
an average of 71.70 seconds to download blocks. It is inter-
esting to note that, during our measurements on the slow
6During our measurements, the client was connected to ap-
proximately 30 neighbors.
7Available from https://github.com/bitcoin/bitcoin/
pull/5608
Measure 4. Bitcoin clients keep track of the order of
the received transaction advertisements. If a request for a
given transaction is not delivered, the next peer in the list is
queried.
When a transaction T is advertised via an inv message
to a given node, the latter keeps track of the order of an-
nouncements with a ﬁrst-in ﬁrst-out (FIFO) buﬀer. Each
time a peer advertises T , the peer is inserted in the buﬀer.
Transaction T is only requested from one peer at a time. For
each entry in the buﬀer, Bitcoin clients maintain a 2-minute
timeout, after which, the next entry in the buﬀer is queried
for T .
3. DELAYING INFORMATION DELIVERY
In this section, we show how an adversary can exploit
the scalability measures of Bitcoin’s request management in
order to delay the delivery of message advertisements.
For the purpose of our analysis, we assume that the ad-
versary A is a full Bitcoin node, and has access to the entire
blockchain. Here, the objective of A is to deny the delivery
of an object O for a short period of time from a speciﬁc node
denoted by V. In Section 4, we extend this analysis and show
how an adversary can arbitrarily prolong the prevention of
message delivery.
3.1 Necessary Requirements
We start by outlining the necessary conditions which need
to be satisﬁed for A to successfully prevent the delivery of
object information from a given Bitcoin node V.
Requirement 1: A must be the ﬁrst peer to send a mes-
sage advertisement of object O to V.
If V requests
an object O from a node which is not under the con-
trol of A, then little can be done by A to prevent
the node from sending O to V. However, if A is able
695to ﬁrst advertise O via an inv message to V, then V
will temporarily abstain from requesting O from any
other node in the network. As explained earlier, Bit-
coin nodes only request the same data element from a
single peer in order to minimize bandwidth consump-
tion (cf. Measure 2). In order to be the ﬁrst to ad-
vertise an object O to V, A needs to be an immediate
neighbor of V in the Bitcoin overlay network (i.e., there
is a direct TCP connection between A and V).
Requirement 2: V should wait suﬃciently long after a get-
data message before requesting the data from another
peer [22]. The longer V waits for A to send O, the
more damaging is the misbehavior of A (cf. Section 5).
As mentioned earlier, current Bitcoin implementations
inﬂict a timeout of 20 minutes on V for blocks, and 2
minutes for transactions; after the timeout, V can re-
quest O from another node (cf. Measure 3).
In what follows, we show how these requirements can be
satisﬁed.
Satisfying Requirement 1.
As mentioned earlier, Bitcoin nodes verify the correct-
ness of every received object before they re-broadcast it in
the network. Notice that this process requires considerable
time; for example, when receiving transactions, nodes verify
the transactions’ signatures, and check that the input coins
have not been spent previously. Similarly, for blocks, nodes
check the correctness of the PoW in relation with the cur-
rent diﬃculty in the network, and verify the correctness of
every transaction that is conﬁrmed in the block.
This oﬀers a clear advantage for an adversary in order
to satisfy Requirement 1.
Indeed, an adversary can sim-
ply forward a given object of choice O immediately after it
receives it—without verifying its correctness. Since all re-
maining nodes in the system will have to perform a series of
veriﬁcation steps to verify O, the adversary is likely to be
the ﬁrst node to advertise O to its neighbors. As explained
in Measure 2, this ensures that A’s neighbors will not re-
quest the object from any other node in the network until
the timeout expires. Notice, that if A is interested in deny-
ing the delivery of O to a speciﬁc node V, then the adversary
can advertise O solely to V. Here, in the case where O is
created by A (e.g., O is a transaction), A can satisfy Re-
quirement 1 by ﬁrst advertising O to V, before broadcasting
it in the network.
We stress here that A should be directly connected to
V. This is a reasonable assumption, since most full Bitcoin
nodes do not exhaust their maximum 125 connections; in
typical cases, nodes are therefore likely to accept connection
request originating from A. Notice that if V does not accept
incoming connections (e.g., is located behind a NAT or ﬁre-
wall), Requirement 1 can also be satisﬁed if V connects to A
(i.e., by requesting an outbound connection). Alternatively,
A can try to compromise a neighbor of V.
Satisfying Requirement 2.
To optimize bandwidth, recall that objects are only re-
quested from one peer at a time (cf. Measure 2). This
means that if A is the ﬁrst node to advertise O to V, V will
simply wait for A to send O and will not request the same
object from any other peer. During this period, A simply
has to respond to the active ping messages of V. Notice that
Adversary
inv
Proxy
inv
inv
Victim
Victim
inv
inv
i n v
Bitcoin network
Figure 4: Satisfying Requirement 1. The adversary
can use a simple relay proxy to forward inv mes-
sages without validating the correctness of the cor-
responding object.
if A does not actively respond to ping messages from V in
this period, then V disconnects eventually before the object
transmission timeout.
For blocks, the default timeout for V is set to 20 minutes;
transactions, however, have a waiting timeout of 2 minutes.
Given Measure 4, it is easy for A to increase the timeout
for transactions simply by sending x back to back inv mes-
sages for the same transaction. By doing so, A eﬀectively
increases the timeout speciﬁc to the advertised transaction
by 2x minutes. We validate this analysis experimentally in
Section 3.2.
3.2 Experimental Validation
In what follows, we empirically assess the probability that
A succeeds in relaying ﬁrst an inv message of an object O
to a given node V (cf. Requirement 1). For this purpose,
we implement a proxy which relays speciﬁc inv messages
directly before passing them to the Bitcoin software. Based
on this proxy, we evaluate how likely A can be the ﬁrst node
to advertise an inv message to V.
Our experimental setup is sketched in Figure 4. Here, we
assume that A is located in Europe and operates an Intel
i7 CPU (3.40GHz) with 32 GB RAM and a 500/400 Mbps
Internet connection. In our setup, A connects to V through
a direct TCP connection.
To remove any bias that might occur from a given net-
work topology, we consider 10 diﬀerent nodes emulating V
geographically dispersed around the globe. We also vary
the connectivity of A and V during our measurements (i.e.,
between 40 and 800 TCP connections to diﬀerent full Bit-
coin nodes for A and between 40 and 200 for V). Because
only full Bitcoin nodes forward blocks and transactions, only
connections to full Bitcoin nodes are relevant for this exper-
iment. We, therefore, modify the Bitcoin client, such that
only connections to full Bitcoin clients are established and
such that the maximum connection limit is kept constantly.
N , that A satisﬁes
Requirement 1 as follows. We relay N advertisements for
objects to V, and we compute the number of getdata and
getheaders replies r originating from V received within the
subsequent 30 seconds; recall that these messages provide
suﬃcient evidence that A is the ﬁrst relayer of an object to
V, and as such V will not request this object from elsewhere.
We measure the probability Pr = r
Denying the Delivery of Blocks.
We start by investigating the success probability of A in
denying the delivery of blocks. Here, for diﬀerent combina-
tions of the number of connections of A and V (cf. Table 1),
696we forward N = 100 blocks generated after block height
350,000 and compute Pr.
Recall that to prevent the delivery of a block object O, A
needs to directly relay the inv corresponding to O, without
validating it. By doing so, A is faster in relaying the inv mes-
sage than any other node in the system. To better assess the
advantage of A in this case, we measured the time required
to validate 100 blocks (from block height 353,000 onwards).
Our results show that a single block requires on average 174
milliseconds to validate on an Amazon EC2 dual-core in-
stance; notice that most of the overhead is spent in verifying
the correctness of the transactions. In addition to the net-
work latency for retrieving a Bitcoin block (cf. Measure 3),
this gives 174 milliseconds advantage on average for A to
succeed in denying the delivery of a block object.
In Table 1, we measure Pr with respect to (i) the location
of V, (ii) A’s number of connections and (iii) V’s number
of connections (cf. Requirement 1). By gradually increasing
the number of connections of A from 40 to 800, we observe,
that A’s success increases with more connections. Namely,
our results show that Pr ≈ 0.89 when A has 800 connec-
tions. The more connections A maintains, the bigger is A’s
likelihood to receive a new block inv message before V. Sim-
ilarly, by gradually increasing the number of connections of
V from 40 to 200, we observe, that the adversary’s success
decreases when V maintains more connections. We do not
observe a strong correlation between the physical location,
and the resulting network latency from A to V. This implies,
that it is crucial for A to be connected to nodes advertising
blocks ﬁrst.
In summary, our results clearly indicate that an adversary
can successfully prevent the delivery of blocks to a particular
node with considerable probability.
In another experiment, we measured the amount of time
that a particular Bitcoin block can be denied to V (cf. Re-
quirement 2). Here, when A forwards a block B successfully
as a ﬁrst node to V, A actively responds to V’s ping requests,
but refrains from answering with a block message. We re-
peated this experiment for a number of times and observed
that in all cases, V actively disconnects from A after exactly
20 minutes.
Notice that the costs borne by A to deny V a given block
are modest. Namely, A needs to maintain an active TCP
connection with V and to frequently reply to V’s ping re-
quests. Moreover, A needs to simply transmit 101 bytes
comprising the inv message (i.e., 40 bytes for IP and TCP
header, and 61 bytes for an inv message advertising one
block object).
Denying the Delivery of Transactions.
In the following, we investigate the probability of A in
successfully denying the delivery of a transaction. In our ex-
periments, we assume that the transaction T is created by A
(for the reasoning why, refer to Section 5.2), and therefore, A
is guaranteed to be the ﬁrst node to relay the corresponding
inv message.
Our evaluation is conducted as follows. We connect only
two nodes to V; one node corresponds to a machine con-
troller by A, while the other node C emulates an honest
machine in the Bitcoin network. In our experiments, A cre-
ates an inv message for transaction T and forwards the inv
to V and C. Upon reception of the inv message, C also for-
wards the message to V. This captures a realistic transaction
announcement in the Bitcoin network. We repeated this ex-
periment 100 times during which A was able to successfully
deny the delivery of T each time for 2 minutes. Namely,
for all 100 experiments, V was always requesting T with a
getdata message from A, which was not responding to the
request. After 120 seconds, V issued a getdata request for T
to the other node C.
We then extended this attack such that A sends T ’s inv
message 10 times to V, even before C issues T ’s inv message.
We repeated this experiment 100 times during which V did
not request T from any other peer for a period of 20 min-
utes. This is consistent with our observations in Section 2.
Namely, every node which advertises a transaction object T
is inserted in a FIFO buﬀer and allocated a 2-minute time-
out to deliver T . After 2 minutes, T is requested from the
next node in the FIFO buﬀer. By advertising T x-times,
the adversary can therefore deny the delivery of T for 2x
minutes and arbitrarily extend the denial time.
We point out that the communication overhead of this
attack basically consists of 101 bytes for each 2 minutes of
delay8.
4. EXTENDING THE BLOCK DELIVERY
TIME
We explained in Section 3.2 how A can deny the delivery
of a block object to V for at least 20 minutes. In this sec-
tion, we build on our ﬁndings and study the possibility of
extending the time a block is denied from V. The necessary
requirements are that (i) V accepts at least one connection
from A, and (ii) A is capable of ﬁlling V’s remaining open
connection slots. For example, if V maintains 50 connec-
tions, A initiates one connection for advertising block inv
messages, and ﬁlls the remaining 125 − 51 = 74 open con-
nection slots with default Bitcoin connections. Note that
V’s existing 50 connections do not prevent the attack.
In Bitcoin, blocks are transmitted by performing a header-
ﬁrst synchronization. Given the header of a block, any node
can ﬁnd the longest chain and verify the proof of work. Once
the headers have been synchronized, Bitcoin nodes can se-
lectively request the corresponding blocks from their peers.
Headers are typically synchronized on two diﬀerent occa-
sions:
1. If V receives a new, previously unknown block inv ad-
vertisement from a peer A, V actively requests the
block headers from A with a getheaders message.
2. Once a node A connects to V, both nodes exchange a
Bitcoin version message. Each version message con-
tains a counter for the most recent block height the
respective node is aware of. If A has a higher block
height than V, V actively requests the block headers
from A with a getheaders message.
The header-ﬁrst synchronization is especially important
for the purpose of our analysis, since it allows V to actively
request a block from its peers as soon as it learns about new
headers. More speciﬁcally, if A prevents the delivery of block
B to V and V receives B’s header from another peer, then A
can prevent the delivery of B for at most 20 minutes. That
is, because after 20 minutes, V actively disconnects from A
and requests the block B from another peer. Clearly, if the
latter peer is not under A’s control, then V is likely to syn-
8Note that multiple inv messages could be embedded into
one inv message in order to lower the TCP overhead.
697Connections of A
Connections of V
Victim node
Zurich
Frankfurt
Ireland
N.Virginia
Oregon
N.California
Tokyo
Singapore
Sydney
S˜ao Paulo
Average Pr
40
40