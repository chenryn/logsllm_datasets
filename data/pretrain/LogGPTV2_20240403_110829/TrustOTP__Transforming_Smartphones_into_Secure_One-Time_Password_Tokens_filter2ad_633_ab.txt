4. TrustOTP DESIGN
4.1 System Overview
We design a secure OTP framework called TrustOTP that
uses ARM TrustZone hardware security extension to trans-
form smartphones into secure one-time password tokens.
The framework of TrustOTP is shown in Figure 1. A mo-
bile operating system called Rich OS runs in the normal
domain to execute normal mobile apps. TrustOTP is in-
stalled in the secure domain and consists of three major
components: OTP generator, secure display controller, and
secure touchscreen driver. The OTP generator is responsi-
ble for continuously generating one-time passwords even if
the Rich OS is malicious or crashes. Since TrustOTP and
the Rich OS share the same set of physical display device,
TrustOTP requires a secure display controller to guarantee
that the one-time passwords can be and only be seen by the
user, but not the Rich OS. A secure framebuﬀer is reserved
to save the data to be displayed by the touchscreen. In order
to support multiple OTP instances, TrustOTP must provide
a trusted touchscreen driver for users to choose the OTPs
they need.
4.2 Secure OTP Generator
The OTP Generator is responsible for supporting various
OTP algorithms to compute OTPs. It supports two most
popular categories of OTP: the time-based OTP (TOTP)
and the event-based OTP (HOTP). The TOTP generator
reads the current clock time from a secure clock when gener-
ating a time-based OTP, and the HOTP generator maintains
one growing counter to calculate the OTP. Thus, a clock and
a counter are indispensable to the OTP generator.
4.2.1 OTP Generation Code
TrustOTP is ﬂexible to accommodate various OTP algo-
rithms. Since TrustOTP and the authentication server share
the same OTP generation algorithm and the same secret key,
the two parties will generate the same OTP when the gen-
eration code and the keying materials are well protected.
The static code and data of the OTP generator should be
stored and protected on a secure non-volatile storage, which
cannot be accessed or ﬂushed by the Rich OS. The keying
materials used in the OTP algorithms are also stored in the
secure permanent storage. Otherwise, if the static code can
be manipulated by the Rich OS, it may disclose the keying
material and the OTPs to the Rich OS. Moreover, the Rich
OS can compromise the availability of the OTP by ﬂushing
978Figure 1: TrustOTP Framework.
the code from the storage. Thus it requires to store the im-
age of the Rich OS in a separate non-volatile storage, which
also serves as the ﬁlesystem of the Rich OS. When the sys-
tem boots up, the code and data of the OTP generator will
be loaded into a secure memory region that can only be ac-
cessed in the secure domain. Therefore, the Rich OS cannot
access the sensitive information directly from the memory.
4.2.2 Secure Clock and Counters
Besides protecting the OTP code integrity and the seed
secrecy, we also need to protect the timer and the counter
that are used as input to TOTP and HOTP, respectively.
Since the secure clock serves as the time source of TOTP,
its value should not be modiﬁed by the untrusted Rich OS.
Moreover, the clock should keep ticking even if the smart-
phone runs out of power. Typically, a secure clock is powered
by an independent power source such as a dedicated cell bat-
tery. Each event-based HOTP has a corresponding counter,
which increments as the HOTP is updated. Since only the
secure domain has the privilege to access the counters, the
normal domain cannot modify these counters. Moreover,
the counter value is well maintained after the smartphone
is powered down. The secure counters can be real physical
modules that run on independent power source and incre-
ment by one on demand or just numbers stored on the secure
non-volatile storage that are updated each time the corre-
sponding HOTPs are updated.
4.3 Secure OTP Display
TrustOTP requires a trusted graphical user interface (GUI)
to display the continuously changing OTPs to the user im-
mediately, while the Rich OS cannot compromise the GUI
itself and the data that the interface processes. We inte-
grate a secure Display Controller in TrustOTP to securely
copy the image from a secure framebuﬀer to the display de-
vice, where the framebuﬀer stores the image of the OTP
to be displayed. To prevent potential OTP leakage, the se-
cure framebuﬀer is diﬀerent from the framebuﬀer used by
the Rich OS and reserved in the secure domain. Since one
smartphone usually has only one video card and one display
screen, those peripheral devices are shared between the Rich
OS and TrustOTP. We must ensure a reliable OTP display
controller to program the video card and the display de-
vice, so that they can work correctly no matter what states
they are before the system switching. Moreover, TrustOTP
should save the states of the video card and the display de-
vice for the Rich OS before resetting them to display the
OTPs. Afterwards, TrustOTP cleans up its states and re-
stores the Rich OS’s states before switching back to the nor-
mal domain.
4.4 Secure Touchscreen for OTP Registration
TrustOTP can support multiple OTP instances that use
the same OTP algorithm but diﬀerent seeds. To dynami-
cally add a new OTP instance, the user ﬁrst registers in the
corresponding authentication system and obtains a shared
secret key for TOTP or a counter plus a key for HOTP.
Next, the user needs to input the shared keying information
to the mobile devices. Since the Rich OS cannot be trusted,
we must provide a trusted input interface in the secure do-
main to initiate the OTP. Thus, we include a self-contained
secure touchscreen driver in the secure domain for the user
to input into the secure domain. Moreover, TrustOTP can
be dynamically extended to accommodate new OTP algo-
rithms or upgraded to a new version.
It also requires a
trusted input interface that can authenticate the user be-
fore the installation.
4.5 Secure Booting and Reliable Switch
TrustOTP is loaded into the secure domain when the sys-
tem boots up and remains in the secure memory unless the
system restarts or powers down. The boot sequence is de-
picted in Figure 2. The code on the ROM runs ﬁrst after
the smartphone powers on. It loads the secure bootloader
from the secure permanent storage to the memory of the
secure domain. Then the secure bootloader gains control
and initializes the secure domain. Next it loads TrustOTP
from the secure permanent storage to the memory of the
secure domain, and also loads the non-secure bootloader
into the memory of the normal domain. Finally, the secure
bootloader changes the CPU from the secure state to the
non-secure state and jumps to the non-secure bootloader.
FramebufferDriverDisplay with TouchscreenNon-secure Permanent StorageSecure Permanent StorageRich OSTrustOTPNormal DomainSecure DomainTOTPHOTPOTPGeneratorSecure ClockSecure CountersNon-secure FramebufferSecure FramebufferSecure Touchscreen DriverReliable SwitchSecure DisplayControllerTouchscreenDriverUser Input ofTrustOTPUser Input ofthe Rich OS979The non-secure bootloader initializes the normal domain and
boots the Rich OS. After that, the Rich OS is running in the
normal domain. Since TrustOTP is loaded before the Rich
OS, it will stay in the memory no matter what the status of
the Rich OS is.
Figure 2: Booting Sequence of TrustOTP.
The OTP is usually demanded when the user performs
an online transaction or logins an authentication system.
Therefore, when this happens, the Rich OS should be sus-
pended for a short time to allow the system switch into the
secure domain to generate and display the OTPs. A reliable
switch ensures that TrustOTP can be triggered on demand
even if the Rich OS is malicious or crashes. In other words,
the interrupt triggering the switch cannot be disabled or
intercepted by the Rich OS. We cannot use any switching
instruction or a software interrupt in the Rich OS to initiate
the switching, since they can be easily disabled or inter-
cepted by the Rich OS. Instead, we can use a non-maskable
interrupt (NMI) that is triggered by a hardware interrupt
to initiate the switching. Since the secure domain is non-
reentrant, after the system enters the secure domain, the
system will switch back to the Rich OS only when TrustOTP
initiates the switching back to the normal domain.
4.6 Security Analysis
Our design can protect the conﬁdentiality, integrity, and
availability of TrustOTP even if the Rich OS is malicious
or crashes. We manage to achieve the same security level
of hardware tokens by using the smartphones, while keeping
the ﬂexible usage of software tokens.
Information Leakage. Since the OTPs are generated in
the secure domain, the Rich OS in the normal domain has no
rights to access any resources of the OTPs. The keying ma-
terials used in the OTP algorithms are stored on the secure
non-volatile storage. When the system boots up, they are
loaded into the secure memory region of the secure domain
by the secure bootloader. Thus, the Rich OS cannot access
the keys from either the permanent storage or the RAM
memory. Moreover, before the system switches back to the
Rich OS, the TrustOTP cleans up its footprint including
CPU registers that may contain sensitive data for the OTPs.
The Rich OS may target at tampering with the control ﬂow
of TrustOTP; however, since the code of TrustOTP runs in
the secure domain, the Rich OS cannot modify TrustOTP’s
code. Moreover, since all the secure interrupts triggered by
TrustOTP are handled in the secure domain, the Rich OS
cannot intercept the execution of TrustOTP through inter-
rupts.
Though TrustOTP shares the same display device with
the Rich OS, TrustOTP has its own independent display
controller to guarantee that the OTPs displayed on the screen
cannot be accessed by the Rich OS. We allocate a dedi-
cated framebuﬀer for TrustOTP in the secure memory re-
gion, which is not accessible to the normal domain. More-
over, a dedicated display controller maintains a secure con-
text switching on the display device, so that the Rich OS’s
display states are saved and stored during the system switch-
ing and TrustOTP’s display states are ﬂushed before return-
ing to the Rich OS.
Denial-of-Service Attacks. Since we attempt to use
smartphones as physical hardware OTP tokens and the mo-
bile OS may have been compromised, denial-of-service (DoS)
attacks are the largest threat on the usability of our solu-
tion. First, when the user needs to trigger TrustOTP and
get the OTP, the Rich OS may intercept and discard the re-
quests. Our reliable switching mechanism can prevent this
type of DoS attack by using a hardware-based non-maskable
interrupt, which cannot be bypassed by the Rich OS. The
interrupt handler of the NMI is in the secure domain, so the
Rich OS cannot manipulate the handler either. Therefore,
we can guarantee that the system will switch into the secure
domain as soon as the NMI is triggered.
Second, a malicious Rich OS may delete the binary code
of TrustOTP from the permanent storage. We solve this
problem by saving the TrustOTP code in an isolated storage
medium that can only be accessed by the secure domain.
Note we cannot use the solution that saves the encrypted
TrustOTP code on the same storage medium as the Rich OS
and decrypts/veriﬁes the TrustOTP code during the system
booting, since the Rich OS has the privilege to delete the
TrustOTP ﬁles so that TrustOTP cannot be loaded after
the system reboots. Similarly, since the TrustOTP code in
the memory is protected by TrustZone, the Rich OS cannot
tamper with it. Moreover, the inputs of the OTP algorithms
including the clock and counters cannot be manipulated by
the Rich OS either, since we use a dedicated secure clock
only accessible in the secure domain and store the counters
in the secure storage, respectively.
Third, the Rich OS may prevent the OTP results from
being displayed to the user. When the Rich OS is running,
it may disable the display device, misconﬁgure the video
card, or even powering down the display device. However,
since TrustOTP includes a self-contained display controller,
we can guarantee that the OTP will be shown on the display
device even if the Rich OS is malicious.
5.
IMPLEMENTATION
We implement a TrustOTP prototype using Freescale
i.MX53 QSB, a TrustZone-enabled mobile System on Chip
(SoC) [31]. i.MX53 QSB has an ARM Cortex-A8 1 GHz ap-
plication processor with 1 GB DDR3 RAM memory. i.MX53
QSB is inserted a SanDisk 4GB MicroSD memory card and
a Kingston DTSE9 32GB USB 2.0 Flash Drive. We use a
4.3 inch seiko touchscreen LCD. We deploy an Android 2.3.4
source code from Adeneo Embedded [14] in the normal do-
main. We use a Thinkpad T430 laptop with Ubuntu 12.04
LTS installed to debug and test the developing board.
5.1 Secure Non-volatile Storage
It is a key feature for TrustZone to protect a secure perma-
nent storage from the non-secure domain; however, Trust-
Power OnROMSecure BootloaderRich OSNormal DomainSecure DomainNon-secure BootloaderTrustOTP980Zone leaves it to the SoC vendors to decide which storage pe-
ripherals are subject to this mechanism. Thus, each vendor
may have diﬀerent designs on assigning or partitioning stor-
age resources for the access of either world. In cases when
the vendor does not provide a dedicated secure permanent
storage, we can convert one available permanent storage to
secure storage.
It is common for a smartphone to have more than one
type of permanent storage. For instance, a smartphone usu-
ally uses a NAND ﬂash as its primary permanent storage
and has a MicroSD card as an extended permanent storage.
Thus, we can dedicate one storage medium for the secure
domain and another one for the normal domain. However,
on our development board i.MX53 QSB, it has no NAND
ﬂash memory, but equipped with a MicroSD card port and a
USB port. Therefore, we build a prototype by assigning the
MicroSD card to the secure domain and the USB ﬂash drive
to the normal domain. On the secure MicroSD card, we
store the static images of the secure bootloader, TrustOTP,
the non-secure bootloader, and the kernel of the Rich OS.
On the non-secure USB ﬂash, we only store the ﬁlesystem of
the Rich OS. By saving the static images of the non-secure
bootloader and the Rich OS kernel on the MicroSD card, we
can guarantee that even if the Rich OS is compromised when
running in the normal domain, its static kernel image is still
protected, so the system can be recovered after rebooting.
The privilege of peripherals are set in the Conﬁgure Slave
Level (CSL) Registers of CSU [30]. Each peripheral has
four access modes: non-secure user, non-secure supervisor,
secure user and secure supervisor. The secure mode only
allows the access from the secure domain, and the supervisor
mode only allows the access from the privileged mode of
CPU. Therefore, in our prototype, the MicroSD port is set
to secure user mode while the USB port is set to non-secure
user mode. We set the Rich OS to mount the USB ﬂash
drive as the ﬁlesystem in the init.rc ﬁle of Android.
5.2 Memory Isolation
i.MX53 QSB provides a watermark mechanism to isolate
secure memory regions from non-secure memory ones. This
mechanism is managed by Multi Master Multi Memory In-
terface (M4IF) [30]. There are two banks of RAM on i.MX53
QSB, and each bank is 512 M B. M4IF can watermark one
continuous region of up to 256 M B on each bank. The start
and end address of one watermark are stored in the Water-
mark Start Address Register and Watermark End Address
Register, respectively. The watermark region cannot be ac-
cessed by the normal domain. The watermark controller
inside M4IF is not accessible to the normal domain, either.
In our prototype, we reserve the highest 1 M B RAM as the
secure memory.
In the 1 M B secure memory, 750 KB is
reserved as the secure framebuﬀer.
The framebuﬀer contains 800*480 pixels, and each pixel is
expressed by a 2-byte RGB565 value. To display the OTP,
we save the pictures of number from 0 to 9 that occupy
156.25 KB memory. Each number picture has 100*80 pixels.
The number pictures are preloaded into memory when the
system boots. Since there’s no need to copy the picture data