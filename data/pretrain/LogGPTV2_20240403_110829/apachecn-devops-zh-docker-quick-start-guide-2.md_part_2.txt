```
现在当我们列出所有的容器时，我们可以看到我们的容器有名称`hi-earl`。当然，您可能希望使用更好的容器名称，也许是描述容器执行的功能的名称，例如`db-for-earls-app`。
Note: Like the container IDs, the container names must be unique on a host. You cannot have two containers (even if one has exited) that have the same name. If you will have more than one container running the same image, such as web server image, name them uniquely, for example, web01 and web02.
![](img/9d9bae7d-2569-4d62-b104-0f77cef7e52c.png)
通过在命令行上为每个容器提供唯一的标识符，可以同时删除多个容器:
```
# removing more than one docker container rm hi-earl hi-earl2
```
通常，只有在容器退出后，您才会移除它们，例如我们一直在使用的 hello-world 容器。但是，有时即使容器当前正在运行，您也会想要删除它。您可以使用`--force`参数来处理这种情况。下面是一个使用 force 参数移除正在运行的容器的示例:
```
# removing even if it is running docker container rm --force web-server
```
这就是它的样子:
![](img/e6d64ba5-07f6-4495-a2d1-b8e9b6964384.png)
请注意，在第一个`container ls`命令中，我们没有使用`--all`参数。这提醒我们 web 服务器容器正在运行。当我们试图移除它时，我们被告知容器仍在运行，不会被移除。这是一个很好的保护措施，有助于防止移动正在运行的容器。接下来，我们使用 force 命令，在没有任何警告的情况下移除了正在运行的容器。最后，我们执行了另一个`container ls`命令，包括`--all`参数，以显示这次我们的容器的读/写数据实际上被移除了。
If you have set up Docker command completion, you can type in the command up to where you need to enter the unique identifier for the container(s) and then use the *Tab *key to get a list of containers, tabbing to the one you want to delete. Once you've highlighted the container to delete, use the space or *Enter* key to select it. You can hit *Tab* again to select another container to delete more than one at a time. Once you have all the containers selected, press *Enter* to execute the command. Remember that you will only see stopped containers when you tab for the `rm` command unless you include the force parameter, `rm -f`.
有时，您可能想要移除系统上所有的容器，无论是否正在运行。有一个有用的方法来处理这种情况。您可以结合`container ls`命令和容器移除命令来完成工作。您将在`container ls`命令中使用一个新的参数来完成这个操作，即`--quiet`参数。该命令指示 Docker 只返回容器标识，而不是带有标题的完整列表。下面是命令:
```
# list just the container IDs docker container ls --all --quiet
```
现在我们可以将*命令返回的值作为输入参数输入到*容器移除命令中。它看起来像这样:
```
# using full parameter names
docker container rm --force $(docker container ls --all --quiet)
# using short parameter names
docker container rm -f $(docker container ls -aq)
# using the old syntax
docker rm -f $(docker ps -aq)
```
这将从您的系统中移除所有运行和退出的容器*的*和*，所以要小心！*
You will probably use this shortcut often, so creating a system alias for it is pretty handy.
You can add something like the following to your `~/.bash_profile` or `~/zshrc` file: `alias RMAC='docker container rm --force $(docker container ls --all --quiet)'`.
许多容器被设计为立即运行和退出，比如我们已经使用过几次的 hello-world 示例。创建其他容器的映像是为了当您使用它运行一个容器时，该容器将继续运行，提供一些持续有用的功能，例如服务网页。当您运行一个持久化的容器时，它将保留前台进程，直到退出，并附加到进程:标准输入、标准输出和标准错误。这对于一些测试和开发用例来说是可以的，但是通常情况下，这对于生产容器来说是不希望的。相反，最好将`container run`作为后台进程，一旦终端会话启动，就让您重新控制终端会话。当然，这是有参数的。它是`--detach`参数。下面是使用该参数的情况:
```
# using the full form of the parameter
docker container run --detach --name web-server --rm nginx
# using the short form of the parameter
docker container run -d --name web-server --rm nginx
```
使用此参数会将进程从前台会话中分离出来，并在容器启动后立即将控制权返回给您。你的下一个问题可能是，如何停止分离的容器？很高兴你问了。您使用`container stop`命令。
# 停止容器命令
停止命令很容易使用。以下是命令的语法和示例:
```
# Usage: docker container stop [OPTIONS] CONTAINER [CONTAINER...]
docker container stop web-server
```
在我们的例子中，我们在运行容器时使用了`--rm`参数，所以容器一停止，读/写层就会被自动删除。像许多 Docker 命令一样，您可以提供多个唯一的容器标识符作为参数，用一个命令停止多个容器。
现在你可能想知道如果我使用`--detach`参数，我如何看到容器发生了什么？有几种方法可以从容器中获取信息。在我们继续我们的运行参数探索之前，让我们看一下其中的一些。
# 容器日志命令
当您在前台运行容器时，容器发送到标准输出的所有输出和标准错误都会显示在运行该容器的会话的控制台中。但是，当您使用`--detach`参数时，容器一启动，会话的控制权就返回，因此您看不到发送到`stdout`和`stderr`的数据。如果您想查看该数据，请使用`container logs`命令。该命令如下所示:
```
# the long form of the command
# Usage: docker container logs [OPTIONS] CONTAINER
docker container logs --follow --timestamps web-server
# the short form of the command
docker container logs -f -t web-server
# get just the last 5 lines (there is no short form for the "--tail" parameter)
docker container logs --tail 5 web-server
# the old syntax
docker logs web-server
```
`--details`、`--follow`、`--timestamps`、`--tail`参数都是可选的，但我在这里收录了，供大家参考。当您使用没有可选参数的`container logs`命令时，它会将容器日志的所有内容转储到控制台。您可以使用带有数字的`--tail`参数来转储最后的行数。可以组合参数(除`--tail`和`--follow`外)得到想要的结果。`--follow`参数就像在查看持续写入的日志时使用`tail -f`命令一样，在写入日志时会显示每一行。您可以使用 *Ctrl* + *C* 退出正在跟踪的日志。`--timestamps`参数对于评估将行写入容器日志的频率非常有用。
# 容器顶部命令
您可能不总是想简单地查看容器的日志；有时您想知道容器中运行的是什么进程。这就是`container top`命令的作用。理想情况下，每个容器运行一个进程，但世界并不总是理想的，因此您可以使用这样的命令来查看目标容器中运行的所有进程:
```
# using the new syntax
# Usage: docker container top CONTAINER [ps OPTIONS]
docker container top web-server
# using the old syntax
docker top web-server
```
如您所料，`container top`命令一次仅用于查看单个容器的进程。
# 容器检查命令
当您运行一个容器时，有很多元数据与该容器相关联。很多时候，您会想要查看该元数据。这样做的命令是:
```
# using the new syntax
# Usage: docker container inspect [OPTIONS] CONTAINER [CONTAINER...]
docker container inspect web-server
# using the old syntax
docker inspect web-server
```
如上所述，该命令返回大量数据。您可能只对元数据的一个子集感兴趣。可以使用`--format`参数缩小返回的数据。看看这些例子:
*   获取一些状态数据:
```
# if you want to see the state of a container you can use this command
docker container inspect --format '{{json .State}}' web-server1 | jq
# if you want to narrow the state data to just when the container started, use this command
docker container inspect --format '{{json .State}}' web-server1 | jq '.StartedAt'
```
*   获取一些`NetworkSettings`数据:
```
# if you are interested in the container's network settings, use this command
docker container inspect --format '{{json .NetworkSettings}}' web-server1 | jq
# or maybe you just want to see the ports used by the container, here is a command for that
docker container inspect --format '{{json .NetworkSettings}}' web-server1 | jq '.Ports'
# maybe you just want the IP address used by the container, this is the command you could use.
docker container inspect -f '{{json .NetworkSettings}}' web-server1 | jq '.IPAddress'
```
*   使用一个命令获取多个容器的数据:
```
# maybe you want the IP Addresses for a couple containers
docker container inspect -f '{{json .NetworkSettings}}' web-server1 web-server2 | jq '.IPAddress'
# since the output for each container is a single line, this one can be done without using jq
docker container inspect -f '{{ .NetworkSettings.IPAddress }}' web-server1 web-server2 web-server3
```
这些例子大多使用 json 处理器`jq`。如果您还没有在系统上安装它，现在是安装的好时机。以下是在我们在本书中使用的每个操作系统上安装`jq`的命令:
```
# install jq on Mac OS
brew install jq
# install jq on ubuntu
sudo apt-get install jq
# install jq on RHEL/CentOS
yum install -y epel-release
yum install -y jq
# install jq on Windows using Chocolatey NuGet package manager
chocolatey install jq