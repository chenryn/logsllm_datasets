Source in Logs
Local Policy Enforcement
on External Storage
ANet(Sni)
KEA
(Sect. 4.8)
yes
ANet(Mod)
PBA
(Sect. 4.7)
yes
PBA
(Sect. 4.6)
yes
ANet(TLSInt)
KEA
(Sect. 4.5)
yes
Raw Encryption
Key in Memory
no
Authorization Relies Only on
States on Internal Storage
no
Direct Content
Source on
no
Raw Encryption
Key on Internal
no
Internal Storage
Storage
CEA
(Sect. 4.4)
yes
Raw Content
on Internal
Storage
no
KEA
(Sect. 4.3)
yes
no
Raw Encryption
Key on External
no
Storage
CEA
(Sect. 4.2)
yes
Raw
Contents on
External
Storage
AMem+BinIns
AInS(R+W)
AInS(R)
AExS(R)
§ KEA = Key Extraction Attacks; PBA = Purchase Bypass Attacks; CEA = Content Extraction Attacks; EVA = Eavesdropping Attacks.
In this paper, KEA and EVA both imply CEA.
ANet(Mod) (Active Modication of Network Trac). The ad-
versary can modify and selectively block both incoming and outgo-
ing network trac, in order to change what the target apps receive.
For plaintext protocols without strong integrity and authenticity
guarantees, such adversary is also able to modify the content of pro-
tocol messages undetected. This is easily attainable by deploying a
proxy server.
ANet(TLSInt) (Interception of TLS Trac). This is an upgrade
to ANet(Mod) with the added capability of intercepting encrypted
TLS trac, as done quite frequently by anti-virus and parental
control software [18], as well as middle-boxes in enterprise settings
[21]. On top of a proxy setup, exactly how to attain this capability
depends on the actual implementation. For target apps that trust
the system CA store, it could be as simple as importing a new CA
certicate into the trusted CA store as an unprivileged user. For
apps that trust only their own CA stores or use key pinning, one
might need the help of AInS(R+W) or even AMem+BinIns, both of
which are discussed below.
2.3.2 Local Adversaries.
AExS(R) (External Storage Read Any). This adversary capability
can be achieved by a device user who has the minimum technical so-
phistication necessary for accessing and transferring les available
on external storage of an Android device, which is “world-readable”
[5] without any special modications to the device. Storing large
downloaded les on the external storage is a common practice in
order to cope with devices that have internal storage of very limited
size. On a side note, the two storage areas of Android are named
internal and external due to historical reasons, and even on a device
without actual physically removable media, the external storage
area would still exist [5].
AInS(R) (Internal Storage Read Any). Such an adversary has the
privilege to read arbitrary les on the internal storage of the device.
A mobile OS such as Android 4 usually provides isolation so that
an app can only read its own internal storage, and a normal user is
4 Given that the user who did the installation get to choose the administrator/sudo
password, conventional desktop operating systems like Windows and Linux don’t have
such a separation of storage space. In general, administrator/sudo privilege allows one
to perform memory inspection and binary instrumentation.
239
by default not given direct access to the system’s internal storage.
Consequently, this capability is usually attained by “rooting” the
device.
AInS(R+W) (Internal Storage Read Write Any). We consider this
adversary to have the capability of reading and writing any les
to any location of the internal storage. Though rooting the device
would typically grant permissions to both read and write access
to the internal storage, we make this ne-grained dierentiation
for the sake of generality, as each of these capabilities can enable
dierent attacks.
AMem+BinIns (Memory Inspection and Binary Instrumenta-
tion). The nal adversary we consider is the most powerful one in
the software domain without tampering hardware. This capability
not only allows the inspection of the target app’s internal execution
state in memory but also the modication of the execution (control
ow) of the app through binary instrumentation.
2.4 App Selection
Our evaluations start with manual analysis of some representative
apps. Then, with the initial ndings, we try to automate our attacks,
and collect more apps that follow similar designs, and automatically
test whether they are also vulnerable.
We chose the Amazon Music app because it is well-known and
popular in the streaming business. At the time of writing, it has
more than one hundred million installs and was one of the top 10
“Music & Audio’’ apps on the Google Play store. After successfully
devising an attack, we then recreated it against the Audible app,
which is another highly popular app also owned by Amazon, and
the 2 apps happened to be using a very similar implementation.
We then focus on the publishing industry. We picked the Forbes
Magazine and Bloomberg Businessweek+ apps, as they are both
well-known and popular business publications, which were coin-
cidentally made by the same developer using 2 dierent designs.
Having studied apps of US-based magazines, we then switched to
look at their counterparts from the UK. We chose Cosmopolitan and
ELLE as they are well-known magazines. We then collected many
other publication apps that follow similar designs, to show that the
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
weaknesses we found are indeed aecting a wide range of publish-
ers and their publications. Finally we found a few publication apps
that exhibit dierent weakness patterns on the lower-end of the
spectrum, completing the study.
We give the full list of apps studied in this paper in Table 1
in Appendix. A vendor might use several dierent designs for its
content distribution apps. In the rest of the paper, apps that are
using similar designs (and hence susceptible to the same attacks)
are grouped and discussed together.
3 APP WEAKNESSES & NETWORK ATTACKS
Here we present the weaknesses we found in the studied apps, as
well as concrete network attacks that exploit them. We note that
some weaknesses in this section also pose threats to the app users’
security and privacy.
As an eort to systematize our ndings, for most known weak-
ness patterns, we map them to the relevant Common Weakness
Enumerations (CWEs) in our analysis. A list of CWEs discussed in
this paper can be found in Table 2 in Appendix.
3.1 Raw Content Transfer In Clear
If a content delivery app receives its contents in clear, an attacker
with ANet(Sni) capability who can passively observe trac ex-
changed between the device and the content distribution back-end
server would be able to eavesdrop, extract and duplicate contents
for free. We found that the The MagPi, Business Money, Artists &
Illustrators, My MS-UK, Popshot Magazine apps (group-1 of Table 1)
fall into this category. These are apps of magazines from dierent
publishers, all made by a vendor called Apazine.
Eavesdropping Aacks. We note that in Apazine’s design, con-
tents are distributed based on PDFs, with each issue of the magazines
and journals encapsulated in a single PDF le. Issues of publications
can be purchased individually inside the apps, which would trigger a
PDF download. However, because the apps and the back-end servers
exchange data including the unencrypted content PDFs through
HTTP (instead of HTTPS) [CWE-319], it is trivial for ANet(Sni),
the weakest remote adversary we consider, to extract and dupli-
cate the PDF les through the observed trac. This is an attack
against (AS3). We have conrmed the feasibility of this attack in
the aforementioned apps.
3.2 Bootstrap Information Transfer in Clear
It is often necessary for publication apps to communicate with the
back-end servers to get bootstrapped with information regarding
what issues and subscription tiers are available at what price. We
note that many apps we studied receive their bootstrap information
in clear through HTTP, which is another instance of [CWE-319].
This leads to 2 dierent attacks on (AS1), given varying levels of
adversary capabilities.
Purchase Bypass Aacks with ANet(Sni). The 5 group-1 apps
discussed in Section 3.1 can again serve as examples, as they are
all susceptible to this attack. From Apazine’s back-end server they
receive bootstrap information in JSON format, which contains de-
tails of each issue. Specically the URLs for downloading the un-
encrypted content PDF les of each issue can be found there as
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Base64 encoded ASCII strings. Since given those URLs, the back-
end content distribution server does not enforce further authenti-
cation and authorization before serving the PDF les [CWE-425],
an ANet(Sni) adversary can observe and parse the JSON, decode
the URLs, and get unrestricted direct access to the unencrypted
content PDFs. We veried the feasibility of this attack by observing
the trac generated by the 5 aforementioned apps.
Purchase Bypass Aacks with ANet(Mod). There exist other pos-
sibilities for exploits even if the bootstrap information does not
contain direct content sources. For concrete examples, we turn to
the 70 publication apps (group-3 of Table 1, e.g., Forbes Magazine)
made by a developer called Maz Systems, which is reported to have
an annual revenue of several million US dollars [22]. The design for
these apps seems to rely on the apps to construct the content source
URLs, based on the bootstrap information received in XML format
and the unique IDs of each issue. The back-end server hosted on
Amazon S3 requires some level of API key authentication before
serving the contents. However, since the price of each issue is di-
rectly given by the bootstrapping XML received through plain HTTP
without much integrity and authenticity guarantees [CWE-354],
we found that an ANet(Mod) adversary can rewrite the price of all
the issues into zero, and the 70 apps we tested all trusted their
corresponding altered XML, and oered magazine issues for free.
The adversary can then use the apps to download the publications
without paying. Additionally, some publishers oer subscriptions
to their publications in the apps (e.g., $29.99 per year for Forbes
Magazine), the price of which was also received from the same
bootstrapping XML. We have conrmed that an ANet(Mod) adver-
sary can also rewrite the prices of subscription plans into zero, then
subscribe (for free) and get access to all the issues available within
the subscription period.
These ndings suggest that the price of purchase is enforced by
the apps locally on client-side [CWE-603] without involving the
back-end servers after the initial bootstrap.
3.3 Raw Content Transfer over TLS
Also for those 70 group-3 apps, after a purchase has been conrmed,
it receives the contents, in the form of a ZIP le, from some back-end
server hosted on Amazon S3 through TLS. Despite using encrypted
connections, it does not mean one cannot attack (AS3).
Eavesdropping Aacks. Specically, we found that for establish-
ing a TLS session, those apps trust the system CA store for signing
certicates and do not seem to be using any forms of key/certicate
pinning. As the result of which, it was trivial to attain ANet(TLSInt),
without the need to leverage other advanced local capabilities. To-
gether with the fact that the ZIP les were not passphrase-protected,
an ANet(TLSInt) adversary can extract contents out of the passively
observed ZIP les with ease.
3.4 Bootstrap Information Transfer over TLS
Even if apps receive bootstrap information over encrypted TLS
connections, without additional integrity and authenticity guaran-
tees, an ANet(TLSInt) adversary can still abuse such information for
his/her own gains. As concrete examples, we look at a) the 34 pub-
lication apps (group-4–6 of Table 1) exemplied by the Bloomberg
Businessweek+, Entrepreneur Magazine and Men’s Health Magazine
240
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
S. Chau et al.
apps, which were coincidentally also developed by Maz Systems,
under designs dierent from the group-3 apps; and b) the 30 pub-
lication apps (group-7–8 of Table 1) exemplied by ELLE UK and
The Independent, developed by a vendor called Pugpig.
Purchase Bypass Aacks. Similar to the apps discussed in Sec-
tion 3.3, these 34 group-4–6 apps all trust the system CA store, so
attaining the ANet(TLSInt) capability was straightforward. For the
group-5–6 apps that oer periodicals, they receive detailed informa-
tion regarding what issues are available at what price through some
bootstrapping JSON over TLS. The description of each issue comes
with a boolean indicating whether it is locked (require payment) or
not. We have found that using the ANet(TLSInt) capability, one can
rewrite all instances of  locked : true into  locked : false in
the bootstrapping JSON, and have all the issues unlocked for free.
On the other hand, the group-4 apps employ a dierent, article-
centric subscription-based business model, which allows its users
to read k number of articles for free every j days as trial. Likewise,
the value of both k and j are retrieved from some bootstrapping
JSON transferred over TLS. We have conrmed that an ANet(TLSInt)
adversary can rewrite the value of k and j in the bootstrapping
JSON, as shown in Figure 2, to trick the apps into granting everyday
a number of free articles so large that it is virtually like having a
paid subscription.
Figure 2: Rewrite bootstrapping JSON with ANet(TLSInt) to
gain free articles in the Bloomberg Businessweek+ app
Original JSON Snippet
Snippet After Rewrite
... ... ,
  metering  : {
... ... ,
  metering  : {
  freeViews  : 4,
  resetAfter  : 28 ,
  registerAfter  : 2,
  registerRequired  : false
  freeViews  : 400 ,
  resetAfter  : 1,
  registerAfter  : 300 ,
  registerRequired  : false
}, ... ...
}, ... ...
Additionally, the 30 group-7–8 apps receive from their back-end
server a series of XML les describing available issues and their
pages. With ANet(TLSInt), we found that one can parse the XML les,
stitch various metadata components into the actual content source
URLs and download magazine pages directly without paying.
All these ndings suggest that the access control enforcement
(e.g., locked contents and free trial previews) are done locally on
the client-side without involving the back-end servers [CWE-603].
3.5 Threats to User Security and Privacy
For the 75 group-1 and group-3 apps discussed in Sections 3.1
and 3.2, since their bootstrap information are sent in clear without
strong integrity guarantees [CWE-354], any Man-In-The-Middle
(MITM) can easily tamper with what is being transferred. This not
only allows one to bypass purchase and extract contents, but also
poses threats to the app users. For example, one might be able to
increase the price of each issue to induce nancial losses on the user.
One can also remove specic issues in the bootstrap information
to implement censorship. Rewriting URLs can also trick the users
to visit some potentially malicious websites. Additionally, given
known vulnerabilities about the libraries that the apps uses (e.g.,
MuPDF [39], Zip [51]), one can potentially change the URLs in the
bootstrap information to point to some maliciously crafted input
les to attack the user’s device.
Furthermore, for many of the 70 group-3 apps discussed in Sec-
tions 3.2 and 3.3, we have observed that during and after the boot-
strap, some tracking data are being sent to the back-end over HTTP
in clear. The exchanged data contains the device unique identier
and model name, along with some session ID and publication ID.
A passive eavesdropper might try to extrapolate who is reading
what magazines, which could be quite revealing given that some
publications are related to medical conditions, musical instruments
and specic industries, posing threats to the app users’ privacy.
4 APP WEAKNESSES & LOCAL ATTACKS
Here we present more weaknesses of the studied apps, with a focus
on local attacks. Similar to the previous section, we map our ndings
to the relevant CWEs whenever possible.
4.1 Log File Leakage
Another possible weakness is leakage of secrets through log les,
similar to what had previously been observed in some Android
mobile banking apps [43].
Purchase Bypass Aacks. As discussed previously in Section 3.1,
those 5 group-1 apps use direct content source URLs for fetching
contents. Our inspection revealed that those same apps leave some
debugging log les on the external storage which contain both
the direct URLs of publication PDF les hosted on their back-end
servers and the identiers of each of the issues available for pur-
chase [CWE-532]. This allows an AExS(R) adversary to retrieve
those URLs, and by replacing the appropriate portion of the URLs
with the issue identiers, one can enumerate the dierent published
issues and download their corresponding unencrypted PDF les di-
rectly [CWE-425], eectively getting unlimited unauthorized access
without having to purchase, mounting an attack against (AS2).
4.2 Raw Content on External Storage
If the apps leave their contents on the External Storage, it would
allow for an easy attack on (AS3) that both the apps and the pub-
lishers would lose control of the contents.
Content Extraction Aacks. We have found that the 9 group-6
apps serve contents in the form of PDF and put their PDF les on
the device’s external storage. Given the AExS(R) capability, one
can easily get those les and make copies of them. This can be
applied to the various free trial issues oered in the apps, as a user
is allowed only several minutes of free preview before needing
to pay to continue reading, but one can simply workaround this
restriction by copying the full PDFs from the external storage and
open them using a dierent reader.
4.3 Raw Encryption Key on External Storage
Even if an app employs encryption as the means for content pro-
tection, if the secret key is left in a place that is accessible by an
adversary, one can attack (AS2) and strip the encryption.
Key Extraction Aacks. As examples, we again look at the 5
group-1 magazine apps discussed in Section 3.1. After purchasing a
specic issue, those apps would download the content le and put
it in the external storage of the device. With the AExS(R) capability,
we can see that the content les retain the .pdf extension but the
241
Why Johnny Can’t Make Money With His Contents:
Pitfalls of Designing and Implementing Content Delivery Apps
contents are actually scrambled. Since not even the PDF metadata
are comprehensible, we deduce that this is most likely due to the
use of a whole le encryption. Together with the ndings from
Sections 3.1 and 3.2, this suggests that the content encryption was
done locally on the client device after download.
While navigating through the les created by the apps on exter-
nal storage with the AExS(R) capability, we found that there exists
a serialized Java object outside the directory that contains the en-
crypted PDF les, adjacent to the log les discussed in Section 4.1.
A quick inspection revealed that this serialized object is of the class
javax.crypto.spec.SecretKeySpec, which turns out to contain
the secret key used to encrypt the PDF les. That object also re-
vealed that the encryption algorithm used was AES, though the
exact block cipher mode remains unclear. This is tantamount to
leaving one’s house key under the doormat outside the house, a
known weakness pattern described by [CWE-313] and [CWE-921].
After identifying the key, decrypting the content PDF les was