# Source in Logs and Local Policy Enforcement on External Storage

## Table of Adversary Capabilities and Attacks
| Attack Type | Adversary Capability | Section Reference | Feasibility |
|-------------|----------------------|-------------------|-------------|
| ANet(Sni)   | KEA                  | 4.8               | Yes         |
| ANet(Mod)   | PBA                  | 4.7               | Yes         |
| PBA         |                      | 4.6               | Yes         |
| ANet(TLSInt)| KEA                  | 4.5               | Yes         |
| Raw Encryption Key in Memory |        |                     | No          |
| Authorization Relies Only on States on Internal Storage | | | No          |
| Direct Content Source on | | | No          |
| Raw Encryption Key on Internal Storage | | | No          |
| Internal Storage | CEA                  | 4.4               | Yes         |
| Raw Content on Internal Storage | | | No          |
| KEA         |                      | 4.3               | Yes         |
|             |                      |                   | No          |
| Raw Encryption Key on External Storage | | | No          |
| CEA         |                      | 4.2               | Yes         |
| Raw Contents on External Storage | | | No          |

**Key:**
- **KEA**: Key Extraction Attacks
- **PBA**: Purchase Bypass Attacks
- **CEA**: Content Extraction Attacks
- **EVA**: Eavesdropping Attacks
- In this paper, KEA and EVA both imply CEA.

## Adversary Capabilities

### Network Adversaries
1. **ANet(Mod) (Active Modification of Network Traffic)**:
   - The adversary can modify and selectively block both incoming and outgoing network traffic to change what the target apps receive.
   - For plaintext protocols without strong integrity and authenticity guarantees, the adversary can also modify the content of protocol messages undetected.
   - This is easily attainable by deploying a proxy server.

2. **ANet(TLSInt) (Interception of TLS Traffic)**:
   - An upgrade to ANet(Mod) with the added capability of intercepting encrypted TLS traffic, as done frequently by anti-virus and parental control software, and middle-boxes in enterprise settings.
   - On top of a proxy setup, the method to attain this capability depends on the implementation. For target apps that trust the system CA store, it could be as simple as importing a new CA certificate into the trusted CA store as an unprivileged user. For apps that trust only their own CA stores or use key pinning, one might need the help of AInS(R+W) or even AMem+BinIns.

### Local Adversaries
1. **AExS(R) (External Storage Read Any)**:
   - This adversary capability can be achieved by a device user with minimal technical sophistication to access and transfer files available on external storage of an Android device, which is "world-readable" without any special modifications.
   - Storing large downloaded files on the external storage is common to cope with devices that have limited internal storage.

2. **AInS(R) (Internal Storage Read Any)**:
   - Such an adversary has the privilege to read arbitrary files on the internal storage of the device.
   - Mobile OSs like Android provide isolation so that an app can only read its own internal storage, and a normal user is not given direct access to the system’s internal storage.
   - This capability is usually attained by "rooting" the device.

3. **AInS(R+W) (Internal Storage Read Write Any)**:
   - This adversary has the capability of reading and writing any files to any location of the internal storage.
   - Rooting the device typically grants permissions for both read and write access to the internal storage.

4. **AMem+BinIns (Memory Inspection and Binary Instrumentation)**:
   - The most powerful adversary in the software domain without tampering hardware.
   - This capability allows the inspection of the target app’s internal execution state in memory and the modification of the execution (control flow) of the app through binary instrumentation.

## App Selection
Our evaluations start with manual analysis of some representative apps. We then automate our attacks and collect more apps that follow similar designs to test their vulnerabilities.

- **Amazon Music**: Chosen because it is well-known and popular in the streaming business, with over one hundred million installs and a top 10 "Music & Audio" app on the Google Play store.
- **Audible**: Another highly popular app owned by Amazon, using a similar implementation to Amazon Music.
- **Forbes Magazine and Bloomberg Businessweek+**: Well-known and popular business publications made by the same developer using different designs.
- **Cosmopolitan and ELLE**: Well-known UK-based magazines.
- **Other Publication Apps**: Collected to show that the weaknesses found are affecting a wide range of publishers and their publications.

The full list of apps studied is provided in Table 1 in the Appendix. Apps using similar designs (and hence susceptible to the same attacks) are grouped and discussed together.

## App Weaknesses and Network Attacks

### 3.1 Raw Content Transfer in Clear
- **Description**: If a content delivery app receives its contents in clear, an attacker with ANet(Sni) capability can eavesdrop, extract, and duplicate contents for free.
- **Affected Apps**: The MagPi, Business Money, Artists & Illustrators, My MS-UK, Popshot Magazine (group-1 of Table 1).
- **Attack**: Eavesdropping Attacks. The apps and back-end servers exchange data including unencrypted content PDFs through HTTP, allowing ANet(Sni) to extract and duplicate the PDF files.

### 3.2 Bootstrap Information Transfer in Clear
- **Description**: Many apps receive bootstrap information in clear through HTTP, leading to two different attacks on (AS1).
- **Purchase Bypass Attacks with ANet(Sni)**: The 5 group-1 apps receive bootstrap information in JSON format, containing URLs for downloading unencrypted content PDFs. Since the back-end server does not enforce further authentication and authorization, an ANet(Sni) adversary can get unrestricted access to the PDFs.
- **Purchase Bypass Attacks with ANet(Mod)**: The 70 publication apps (group-3 of Table 1) made by Maz Systems rely on the apps to construct content source URLs based on bootstrap information received in XML format. An ANet(Mod) adversary can rewrite the price of all issues into zero, allowing free downloads.

### 3.3 Raw Content Transfer over TLS
- **Description**: Despite using encrypted connections, it does not mean one cannot attack (AS3).
- **Eavesdropping Attacks**: The 70 group-3 apps trust the system CA store for signing certificates and do not use key/certificate pinning. An ANet(TLSInt) adversary can extract contents from passively observed ZIP files.

### 3.4 Bootstrap Information Transfer over TLS
- **Description**: Even if apps receive bootstrap information over encrypted TLS connections, without additional integrity and authenticity guarantees, an ANet(TLSInt) adversary can still abuse such information.
- **Purchase Bypass Attacks**: The 34 publication apps (group-4–6 of Table 1) and the 30 publication apps (group-7–8 of Table 1) allow an ANet(TLSInt) adversary to rewrite bootstrapping JSON and XML to bypass purchase and access content for free.

### 3.5 Threats to User Security and Privacy
- **Description**: For the 75 group-1 and group-3 apps, since their bootstrap information is sent in clear without strong integrity guarantees, a Man-In-The-Middle (MITM) can tamper with the transferred data, posing threats to the app users.
- **Examples**: Increasing the price of each issue, implementing censorship, and tricking users to visit malicious websites. Additionally, tracking data sent in clear over HTTP can reveal sensitive information about the user.

## App Weaknesses and Local Attacks

### 4.1 Log File Leakage
- **Description**: Similar to previously observed in some Android mobile banking apps, log files can leak secrets.
- **Purchase Bypass Attacks**: The 5 group-1 apps leave debugging log files on the external storage containing direct URLs of publication PDFs and issue identifiers, allowing an AExS(R) adversary to download unencrypted PDFs without purchasing.

### 4.2 Raw Content on External Storage
- **Description**: If the apps leave their contents on the external storage, it would allow for an easy attack on (AS3).
- **Content Extraction Attacks**: The 9 group-6 apps serve contents in the form of PDF and put their PDF files on the device’s external storage. An AExS(R) adversary can easily get those files and make copies, bypassing free preview restrictions.

### 4.3 Raw Encryption Key on External Storage
- **Description**: Even if an app employs encryption, if the secret key is left in a place accessible by an adversary, one can strip the encryption.
- **Key Extraction Attacks**: The 5 group-1 magazine apps download content files and put them in the external storage. An AExS(R) adversary can find a serialized Java object containing the secret key used to encrypt the PDF files, allowing decryption.

This structured and detailed approach provides a clear and professional overview of the various attacks and weaknesses in the apps, making it easier to understand and address the issues.