    发布在[http://nmap.org/book/idlescan.html](http://nmap.org/book/idlescan.html){target="_top"}。
    除了极端隐蔽(由于它不从真实IP地址发送任何报文)，
    该扫描类型可以建立机器间的基于IP的信任关系。 端口列表*从zombie
    主机的角度。*显示开放的端口。
    因此您可以尝试用您认为(通过路由器/包过滤规则)可能被信任的
    zombies扫描目标。
    如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie
    主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。
-sO (IP协议扫描)
:   IP 协议扫描可以让您确定目标机支持哪些IP协议
    (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描
    ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用
    -p选项选择要扫描的协议号，
    用正常的端口表格式报告结果，甚至用和真正的端口扫描一样
    的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。
    除了本身很有用，协议扫描还显示了开源软件的力量。
    尽管基本想法非常简单，我过去从没想过增加这一功能也没收到任何对它的请求。
    在2000年夏天，Gerhard
    Rieger孕育了这个想法，写了一个很棒的补丁程序，发送到nmap-hackers邮件列表。
    我把那个补丁加入了Nmap，第二天发布了新版本。
    几乎没有商业软件会有用户有足够的热情设计并贡献他们的改进。
    协议扫描以和UDP扫描类似的方式工作。它不是在UDP报文的端口域上循环，
    而是在IP协议域的8位上循环，发送IP报文头。
    报文头通常是空的，不包含数据，甚至不包含所申明的协议的正确报文头
    TCP，UDP，和ICMP是三个例外。它们三个会使用正常的协议头，因为否则某些系
    统拒绝发送，而且Nmap有函数创建它们。协议扫描不是注意ICMP端口不可到达消息，
    而是ICMP *协议*不可到达消息。如果Nmap从目标主机收到
    任何协议的任何响应，Nmap就把那个协议标记为open。 ICMP协议不可到达
    错误(类型 3，代号 2) 导致协议被标记为
    closed。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13)
    导致协议被标记为 filtered (虽然同时他们证明ICMP是 open
    )。如果重试之后仍没有收到响应， 该协议就被标记为open\|filtered
-b \ (FTP弹跳扫描)
:   FTP协议的一个有趣特征([RFC
    959](http://www.rfc-editor.org/rfc/rfc959.txt){target="_top"})
    是支持所谓代理ftp连接。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。
    这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。
    只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。
    错误消息会描述端口是开放还是关闭的。
    这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。
    Nmap用-b选项支持ftp弹跳扫描。参数格式是
    *\*:*\*@*\*:*\*。 *\*
    是某个脆弱的FTP服务器的名字或者IP地址。
    您也许可以省略*\*:*\*，
    如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。
    端口号(以及前面的冒号)
    也可以省略，如果*\*使用默认的FTP端口(21)。
    当Nmap1997年发布时，这个弱点被广泛利用，但现在大部分已经被fix了。
    脆弱的服务器仍然存在，所以如果其它都失败了，这也值得一试。
    如果您的目标是绕过防火墙，扫描目标网络上的开放的21端口(或者
    甚至任何ftp服务，如果您用版本探测扫描所有端口)，
    然后对每个尝试弹跳扫描。Nmap会告诉您该主机脆弱与否。
    如果您只是试着玩Nmap，您不必(事实上，不应该)限制您自己。
    在您随机地在互联网上寻找脆弱的FTP服务器时，考虑一下系统管理员不太喜欢您这样滥用他们的服务器。
[]{#7}
## 端口说明和扫描顺序
除了所有前面讨论的扫描方法，
Nmap提供选项说明那些端口被扫描以及扫描是随机还是顺序进行。
默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services
文件中列出的更高的端口在扫描。
-p \ (只扫描指定的端口)
:   该选项指明您想扫描的端口，覆盖默认值。
    单个端口和用连字符表示的端口范围(如 1-1023)都可以。
    范围的开始以及/或者结束值可以被省略，
    分别导致Nmap使用1和65535。所以您可以指定 -p-从端口1扫描到65535。
    如果您特别指定，也可以扫描端口0。
    对于IP协议扫描(-sO)，该选项指定您希望扫描的协议号 (0-255)。
    当既扫描TCP端口又扫描UDP端口时，您可以通过在端口号前加上T:
    或者U:指定协议。 协议限定符一直有效您直到指定另一个。 例如，参数 -p
    U:53，111，137，T:21-25，80，139，8080 将扫描UDP
    端口53，111，和137，同时扫描列出的TCP端口。注意，要既扫描
    UDP又扫描TCP，您必须指定 -sU ，以及至少一个TCP扫描类型(如
    -sS，-sF，或者 -sT)。如果没有给定协议限定符，
    端口号会被加到所有协议列表。
-F (快速 (有限的端口) 扫描)
:   在nmap的nmap-services
    文件中(对于-sO，是协议文件)指定您想要扫描的端口。
    这比扫描所有65535个端口快得多。
    因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan
    (大约1600个端口)速度差别不是很大。如果您用\--datadir选项指定您自己的
    小小的nmap-services文件 ，差别会很惊人。
-r (不要按随机顺序扫描端口)
:   默认情况下，Nmap按随机顺序扫描端口
    (除了出于效率的考虑，常用的端口前移)。这种随机化通常都是受欢迎的，
    但您也可以指定-r来顺序端口扫描。
[]{#8}
## 服务和版本探测
把Nmap指向一个远程机器，它可能告诉您
端口25/tcp，80/tcp，和53/udp是开放的。使用包含大约2,200个著名的服务的
nmap-services数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器
(SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 这种查询通常是正确的 \--
事实上，绝大多数在TCP端口25监听的守护进程是邮件
服务器。然而，您不应该把赌注押在这上面!
人们完全可以在一些奇怪的端口上运行服务。
即使Nmap是对的，假设运行服务的确实是
SMTP，HTTP和DNS，那也不是特别多的信息。
当为您的公司或者客户作安全评估(或者甚至简单的网络明细清单)时，
您确实想知道正在运行什么邮件和域名服务器以及它们的版本。
有一个精确的版本号对了解服务器有什么漏洞有巨大帮助。
版本探测可以帮您获得该信息。
在用某种其它类型的扫描方法发现TCP 和/或者UDP端口后，
版本探测会询问这些端口，确定到底什么服务正在运行。 nmap-service-probes
数据库包含查询不同服务的探测报文 和解析识别响应的匹配表达式。
Nmap试图确定服务协议 (如 ftp，ssh，telnet，http)，应用程序名(如ISC
Bind，Apache httpd，Solaris telnetd)，版本号， 主机名，设备类型(如
打印机，路由器)，操作系统家族 (如Windows，Linux)以及其它的细节，如
如是否可以连接X server，SSH协议版本
，或者KaZaA用户名)。当然，并非所有服务都提供所有这些信息。
如果Nmap被编译成支持OpenSSL，
它将连接到SSL服务器，推测什么服务在加密层后面监听。 当发现RPC服务时，
Nmap RPC grinder (-sR)会自动被用于确定RPC程序和它的版本号。
如果在扫描某个UDP端口后仍然无法确定该端口是开放的还是被过滤的，那么该端口状态就
被标记为open\|filtered。
版本探测将试图从这些端口引发一个响应(就像它对开放端口做的一样)，
如果成功，就把状态改为开放。 open\|filtered TCP端口用同样的方法对待。
注意Nmap -A选项在其它情况下打开版本探测。
有一篇关于版本探测的原理，使用和定制的文章在
[http://www.insecure.org/nmap/vscan/](http://www.insecure.org/nmap/vscan/){target="_top"}。
当Nmap从某个服务收到响应，但不能在数据库中找到匹配时，
它就打印一个特殊的fingerprint和一个URL给您提交，如果您确实知道什么服务运行在端口。
请花两分钟提交您的发现，让每个人受益。由于这些提交，
Nmap有350种以上协议如smtp，ftp，http等的大约3，000条模式匹配。
用下列的选项打开和控制版本探测。
-sV (版本探测)
:   打开版本探测。 您也可以用-A同时打开操作系统探测和版本探测。
\--allports (不为版本探测排除任何端口)
:   默认情况下，Nmap版本探测会跳过9100
    TCP端口，因为一些打印机简单地打印送到该端口的
    任何数据，这回导致数十页HTTP get请求，二进制
    SSL会话请求等等被打印出来。这一行为可以通过修改或删除nmap-service-probes
    中的Exclude指示符改变，
    您也可以不理会任何Exclude指示符，指定\--allports扫描所有端口
\--version-intensity \ (设置 版本扫描强度)
:   当进行版本扫描(-sV)时，nmap发送一系列探测报文
    ，每个报文都被赋予一个1到9之间的值。
    被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文
    一般没什么用。强度水平说明了应该使用哪些探测报文。数值越高，
    服务越有可能被正确识别。
    然而，高强度扫描花更多时间。强度值必须在0和9之间。
    默认是7。当探测报文通过nmap-service-probes ports指示符
    注册到目标端口时，无论什么强度水平，探测报文都会被尝试。这保证了DNS
    探测将永远在任何开放的53端口尝试， SSL探测将在443端口尝试，等等。
\--version-light (打开轻量级模式)
:   这是 \--version-intensity 2的方便的别名。轻量级模式使
    版本扫描快许多，但它识别服务的可能性也略微小一点。