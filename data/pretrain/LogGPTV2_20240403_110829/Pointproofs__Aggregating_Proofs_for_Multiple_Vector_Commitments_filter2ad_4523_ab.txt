i
T
coe(cid:129)cient of gαN +1
A standard argument tells us that for any {mi : i ∈ S} (cid:54)= {m(cid:48)
m(cid:48)
it(cid:48)
(cid:104)(cid:88)
(cid:88)
miti =
Pr
i
(cid:105)
i : i ∈ S}, we have
= 1/p
i∈S
i∈S
where the probability is over random ti ← Zp. (cid:145)erefore, if the ti’s are indeed random, then the adversary
is also bound to {mi : i ∈ S}.
To formalize this intuition, we (cid:128)rst need to model the hash function H as a random oracle [BR93] so
that we can carry out the above probabilistic argument. Furthermore, we need to restrict the adversary to
the so-called algebraic group model [FKL18] (see Section 2 for details), so that we can express adversarially
generated commitments C in terms of public parameters.
Handling cross-commitment aggregation. Now, suppose we have a collection of commitments Cj to
mj = (mj,1, . . . , mj,N ), along with proofs ˆπj for mj[Sj], each satisfying
αN +1(cid:80)
i∈Sj
 · g
We can again multiply these equations together to obtain:
(cid:89)
= e(ˆπj, g2) · g
αN +1(cid:80)
αN +1−itj,i
αN +1−itj,i
(cid:89)
Cj, g
2
(cid:18)
(cid:19)
(cid:19)
(cid:18)
ˆπj, g2
(cid:80)
(cid:80)
(cid:80)
mj,itj,i
mj,itj,i
i∈Sj
i∈Sj
e
Cj, g
2
i∈Sj
= e
e
T
j
T
j
j
6
For the same reason as before, this approach alone does not yield a secure scheme. Instead, we will
need to introduce additional random scalars t(cid:48)
and use the following aggregate veri(cid:128)cation equation:
(cid:18)
(cid:89)
(cid:80)
where the aggregated proof π :=(cid:81)
Cj, g
2
i∈Sj
e
j
t(cid:48)
j
j
.
j ˆπ
j
(cid:19)t(cid:48)
αN +1−itj,i
αN +1(cid:80)
j
(cid:80)
mj,itj,it(cid:48)
j
i∈Sj
j ?= e(π, g2) · g
T
2 Preliminaries
Notation Given a (column) vector v = (v1, . . . , vN ), we use v[S] := (vi, i ∈ S) to denote the subvector
indexed by S, and v[−i] to denote v[[N ] \ {i}], i.e., v with vi deleted. For a positive integer N, we denote
the set {1, . . . , N} by [N ].
(cid:135)e Algebraic Group Model (AGM) (cid:145)e algebraic group model [FKL18] lies between the standard model
and the widely-used generic group model. In AGM, we consider only so-called algebraic adversaries. Such
adversaries have direct access to group elements and, in particular, can use their bit representation, like
in the standard model. However, these adversaries are assumed to output new group elements only
by applying the group operation to received group elements (like in the generic group model). (cid:145)is
requirement is formalized as follows. Suppose an adversary is given group elements X1, . . . , XN ∈ G1.
(cid:145)en, for every group element Z ∈ G1 that the adversary outputs, it must also output z1, . . . , zN ∈ Zp
such that Z =(cid:81)N
i=1 X zi
i
.
Security Assumption Let G1, G2, GT be multiplicative groups of prime order p with a nondegenerate
bilinear pairing e : G1 × G2 → GT . Fix generators g1, g2, and gT := e(g1, g2) for the three groups.
We assume that the following variant of weak bilinear Di(cid:129)e-Hellman exponent problem (cid:96)-wBDHE∗ (see
[BBG05, BGW05, CKS09] for similar problems for symmetric pairings) is hard:
Input: gα
, . . . , g(α(cid:96))
1
, . . . , g(α3(cid:96))
,
, . . . , g(α(cid:96))
1
1 , g(α2)
1
g(α(cid:96)+2)
1
2 , g(α2)
gα
for α $← Zp
2
2
,
,
Compute: g(α(cid:96)+1)
1
(cid:145)e advantage Adv(cid:96)-wBDHE∗
(A) of an adversary A is de(cid:128)ned as its probability in solving this problem.
As shown in [BBG05] (for a slight variant), the assumption holds in the generic bilinear group model.
Concretely, for the BLS12-381 pairing-friendly curve with (cid:96) = 32, the best a(cid:139)ack has complexity 2112
[Che06] (more generally, roughly(cid:112)p/(cid:96)).
G1×G2
(cid:135)e Random Oracle Model (ROM) Our security proofs are in the random oracle model, formalized in
[BR93]: we model a cryptographic hash function as a truly random function, accessible to all parties only
via oracle queries. We will use two random oracles H and H(cid:48), both with output space Zp.
7
3 De(cid:128)ning Vector Commitments with Aggregation
We de(cid:128)ne aggregatable vector commitments in two steps: (cid:128)rst, we consider aggregation of proofs for a
single commitment; then, we discuss aggregating such same-commitment aggregated proofs into a single
cross-commitment proof.
3.1 Same-Commitment Aggregation
A vector commitment with same-commitment aggregation for message space M consists of the following
polynomial-time algorithms Setup, Commit, UpdateCommit, Aggregate, Verify:
• pp ← Setup(1λ, 1N ). Outputs public parameters that will be used by all parties to commit to
message vectors of length N (inputs are given in unary to allow for running time polynomial in
λ and N). (cid:145)e public parameters will be provided as an implicit input to the remaining algorithms,
including the adversary in the security de(cid:128)nition. Even though the parameters are public, their
generation may involve secret randomness that should not be known to the adversary. How
to generate parameters in a trustworthy manner (which is crucial for security) depends on the
application.
• C ← Commit(m; r). Takes as input a vector m ∈ MN along with randomness r and outputs a
commitment C.
• C(cid:48) ← UpdateCommit(C, S, m[S], m(cid:48)[S]). Takes as input a commitment C and updates the
positions in S from m[S] to m(cid:48)[S] to produce a new commitment C(cid:48).
• πi ← Prove(i, m, r). Takes as input an index i ∈ [N ] and (m, r) used in Commit and outputs a
proof πi.
• ˆπ ← Aggregate(C, S, m[S],{πi : i ∈ S}). Takes as input a commitment C, a set of indices S ⊆ [N ]
with the corresponding proofs {πi : i ∈ S} (computed using Prove) and outputs an aggregated
proof ˆπ.
• b ← Verify(C, S, m[S], ˆπ). Takes as input a commitment C, a set of indices S ⊆ [N ] along with an
aggregated proof ˆπ, and outputs whether C is a commitment to a message vector consistent with
m[S].
For simplicity of presentation and without loss of generality, we assume that Verify always operates
on aggregated proofs, even for a set of size 1. It should be noted that there may be more e(cid:129)cient ways to
compute an aggregated proof than via several invocations of Prove followed by a single Aggregate; these
e(cid:129)ciency improvements, while helpful for performance, do not a(cid:130)ect our de(cid:128)nitions. Similarly, there may
be more e(cid:129)cient ways than invoking Prove to update existing proofs when commitments are updated; we
do not formally de(cid:128)ne proof updates as a separate algorithm here.
Correctness of opening. For all λ, N, m ∈ MN , S ⊆ [N ], we have
 = 1
Pr
pp ← Setup(1λ, 1N )
C ← Commit(m; r)
πi ← Prove(i, m, r),∀i ∈ S
π ← Aggregate(C, S, m[S],{πi : i ∈ S})
Verify(C, S, m[S], ˆπ) = 1
8
Correctness of updates. For all λ, N, m, m(cid:48) ∈ MN , S ⊆ [N ], r such that m[[N ] \ S] = m(cid:48)[[N ] \ S(cid:48)],
we have:
UpdateCommit(Commit(m; r), S, m[S], m(cid:48)[S]) = Commit(m(cid:48); r)
Note that in our de(cid:128)nition, updates are deterministic. Other de(cid:128)nitions are also possible. See
Section 3.3 for further discussion.
Binding. For every N and every adversary running in time polynomial in λ, the probability of (cid:128)nding
C, (ˆπ0, S0, m0[S0]), (ˆπ1, S1, m1[S1])
such that
• Verify(C, Sb, mb[Sb], ˆπb) = 1 for both b = 0 and b = 1;
• m0[S0 ∩ S1] (cid:54)= m1[S0 ∩ S1]
(assuming parameters generated by Setup(1λ, 1N )) is negligible in λ.
One can also consider a weaker notion of binding, in which the commitment C must be honestly
computed by Commit (on some, possibly adversarially chosen, messages) rather than chosen arbitrarily
by the adversary. (cid:145)is notion o(cid:137)en su(cid:129)ces in blockchain applications. See Appendix B for details.
3.2 Cross-commitment aggregation
Cross-commitment aggregation adds two algorithms to aggregate proofs across (cid:96) commitments :
• π ← AggregateAcross({ Cj, Sj, mj[Sj], ˆπj }j∈[(cid:96)]) Takes as input a collection ({ Cj, Sj, mj[Sj]}j∈[(cid:96)])
along with the corresponding same-commitment-aggregated proofs { ˆπj }j∈[(cid:96)] (computed using
Aggregate) and outputs an aggregated proof π.
• b ← VerifyAcross({ Cj, Sj, mj[Sj]}j∈[(cid:96)], π). Takes as input a collection ({ Cj, Sj, mj[Sj]}j∈[(cid:96)])
along with a cross-commitment-aggregated proof π, and checks that Cj is a commitment to a
message vector consistent with mj[Sj] for all j ∈ [(cid:96)].
We require the same correctness of opening as before, extended to cross-commitment aggregation in
a natural way.
(cid:145)e binding property also extends naturally: to win, the adversary now needs to (cid:128)nd
{ Cb
j }j∈[(cid:96)b]
such that
and (πb,{ Sb
j , mb[Sb
j ]}j∈[(cid:96)b]) for b = 0 and b = 1
j , Sb
1. VerifyAcross({ Cb
j , mb
2. ∃j0 ∈ [(cid:96)0], j1 ∈ [(cid:96)1] : m0
As a sanity check, observe that for the special case (cid:96)0 = (cid:96)1 = 1, the winning condition stipulates that
, matching same-commitment binding, except with VerifyAcross in place of
j ]}j∈[(cid:96)b], πb) = 1 for both b = 0 and b = 1
j0 ∩ S1
j1.
j0 = C1
j1] and C0
j1] (cid:54)= m1
j[Sb
j0[S0
j0 ∩ S1
j1[S0
j0 = j1 = 1 and C0
Verify.
1 = C1
1
As part of binding, we also need to make sure that a cross-commitment aggregated proof cannot be
used to prove an opening that is inconsistent with a same-commitment opening. Formally, this means this
that for the case of (cid:96)0 = 1, we allow the adversary to win also if Verify(C0
1 ], π0) = 1, even if
VerifyAcross({C0
1 , m0
1 , S0
1[S0
1 ]}, π0) = 0.
1 , m0
1 , S0
1[S0
9
3.3 Hiding
Vector commitments optionally include the hiding property, which we now de(cid:128)ne. For this paper, we
consider simulation-based statistical security, which stipulates that there exists an e(cid:129)cient randomized
simulator (Setup∗, Commit∗, Prove∗) with the following properties. Setup∗ outputs pp and a trapdoor
td. Commit∗(; r) takes no inputs except randomness, and outputs a random fake commitment C. Prove∗,
given the trapdoor, an r used to produce a fake C, an index i, and a value mi, produces a fake proof π. (cid:145)e
main idea of the de(cid:128)nition is that fake proofs are statistically indistinguishable from real ones, even given
the commitments, and even if the commi(cid:139)ed messages are chosen adversarially. (cid:145)is indistinguishability is
de(cid:128)ned below. (cid:145)e intuition is that since fake commi(cid:139)ing and fake proving doesn’t involve any messages
but the one being proven, it follows that fake commitments and proofs leak no information about other
messages, and therefore, by indistinguishability, neither do real ones. (cid:145)is intuition is formalized below
via a standard oracle-based de(cid:128)nition.
Let a stateful real oracle O-real(pp) take two types of queries: a query mj chooses a random rj
and returns Commit(m;rj), while a query (j, i) returns Prove(i, mj, rj). Let a stateful simulated oracle
O-sim(pp, td) respond to the same types of queries as follows: a query mj chooses a random rj and runs
Commit∗(; rj) to get a random fake commitment, while a query (j, i) returns Prove∗(td, rj, i, (mj)i).
Crucially for the hiding property, Commit∗ gets no information about mj, while Prove∗ gets (mj)i but no
information about mj[−i].
(cid:145)e hiding property states that for every stateful computationally unbounded adversary A, the
following two distributions are at most negligibly far:
(cid:34)
pp ← Setup(1λ, 1N );
output AO-real(pp)
(cid:35)
(cid:20) (pp, td) ← Setup∗(1λ, 1N );
output AO-sim(pp,td)
,
(cid:21)
Note that even though the hiding de(cid:128)nition does not explicitly refer to aggregated proofs as computed
using Aggregate, it does imply a meaningful security guarantee for aggregated proofs, because they are
results of public computations on existing proofs. For example, an adversary who sees m2, m3 along with
an aggregated proof π{2,3} learns nothing about m1, m4, because the inputs to the aggregation algorithm
include only π2, π3, m2, and m3.
Our updates are de(cid:128)ned to be deterministic, and thus reveal the relationship between the pre- and post-
update commi(cid:139)ed vectors. One can additionally de(cid:128)ne a rerandomization algorithm that, when performed
a(cid:137)er a deterministic update, will hide this relationship. Our scheme supports such rerandomization (see
Section 4.5). We do not formally address this hiding property.
4 Our Construction
Understanding intuition behind our scheme, described in Section 1.3, will help make sense of the formal
details presented in this section. We use the notation (including pairing groups of order p and random
oracles H, H(cid:48)) from Section 2.
Our message space M is Zp; we can handle general message spaces {0, 1}∗ by hashing to Zp using a
collision-resistant hash function.
10
4.1 Same-Commitment Aggregation
Here, both Commit and Prove are deterministic.
• Setup(1λ, 1N ). Samples α ← Zp and outputs
1
ga
1 = (gα
gαN a[−1]
1
ga
2 = (gα
1 , . . . , gαN
),
= (gαN +2
, . . . , gα2N
2 , . . . , gαN
)
1
1
2
),
where
a := (α, α2, . . . , αN )
1 , gαN a[−1]
and for the veri(cid:128)er to hold ga
2 , gαN +1
T
=
).
1 , gαN
In fact, it is su(cid:129)cient for the prover to hold ga
e(gα
Note that α must never be known to the adversary.
• Commit(m), for m ∈ ZN
. Outputs
1
2
p
(cid:80)
C := gm(cid:62)a
1