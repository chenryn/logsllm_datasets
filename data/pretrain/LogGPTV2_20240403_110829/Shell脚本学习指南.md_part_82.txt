访问时间是通过数个系统调用而被更新，包括那些读取与写入文件的操作。
注20：epoch，epok，名词，用以编号之后年度的一个因定时间点。
注21：经委员会一致通过：UTC为不受语言影响的字母端略字，法文的展开为Temps Universel
Coordonne,  hrrp://www.spl.co.ak/time/time_scales.ktml, hup://aa.usno.navy.mil/fog/
docs/UT.html,  http://www.boulder.nist.gov/timefreg/general/misc.htm,T解变多  时
间标准有关的信息。
www.TopSage.com
---
## Page 484
472
修改时间的变更是在文件块被更改，而非metadata（文件名、用户、组、连接计数或权
限）变更时。
touch命令，或utime（）系统调用，可用于改变文件访问与修改时间，但不会改变inode
变更时间，近期的GNUtouch版本提供选项，可针对文件标明时间。1s-1命令显示
的是修改时间，但加上-c选项，则可显示inode变更时间：加上-u选项，会显示访问
时间。
这些时间数都不够完美。inode变更时间表示两种完全不同的目的，应该已经个别分开
地被记录下来。因此，它并不能告诉你这个文件首度出现在UNIX文件系统里的确切时
间。
访问时间在以read（）系统调用读取文件时被更新，而不是在使用mmap（）对应文件到
内存以及以该方式读取文件时。
修改时间可能稍具可靠性，不过文件复制命令通常都会重设输出文件的修改时间为当前
时间：即便它的内容完全没有变更，这并非我们所希望的，所以，复制命令cP提供-D
选项，让你可以保留文件的修改时间。
最后备份的时间不会被记录：即备份系统必须保留补助性的数据，以追踪自最后一次备
份至今已进行修改的文件。
注意：文件系统备份软件，在保留文件时间藏这部分都相当谨慎处理。否则在每次备份之后，所
有文件都看起来像刚被读取，使用打包工具，例如tar，作备份的系统，都必须更新inode
变更时间，使得该时间藏无法再用于其他用途。
基于某些目的，有人希望能将读取、写入、更名、改变metadata的时间戳分开记录，这
样的分隔方式在UNIX里是不可能的。
文件连接
尽管我们在本附录之前的文件系统实现概况”讨论过，硬连接与软连接（符号连接）
的工具非常多。但它们其实遭到一些非难，意见无非是同一个东西，给它多个名称只会
混淆用户，因为连接是让两个已隔离的文件树接在一起，移动了含有连接的子树就会切
断连接，让文件系统产生不一致的情况。图B-4展现的是因删除而切断了软连接的情况，
而图B-5则是告诉你如何保留这样的连接，这完全是看你在建立连接时，是以相对还是
绝对路径而定。
www.TopSage.com
---
## Page 485
文件与文件系统
473
mv /old/fco /new/gaa
图B-4：移动切断了软连接
ffnk
mv /old/foo /new/gaa
图B-5：移动可以保留绝对符号连接
以下为硬连接与软连接会出现的其他问题：
当连接的文件更新时，不管它是被文件复制命令或是程序（例如，文本编辑程序）
所替换，硬连接是否仍被保留根据更新的方式而定。如果是打开已存在的文件供输
出及重写人，其inode编号保留不变，则硬连接仍会保留。然后，如果系统崩溃或
磁盘溢满产生错误，则在更新期间可能导致进失整个文件。比较小心的程序员可能
就会在临时名称下编写新的版本，而且只有确定复制完成时，才副除原始的那个
（因此连接计数减1）并更改副本的名字，剩下的隐匿性很快，所以针对失误的窗口
是较小的。替换文件会产生一个新的inode编号及连接计数1，并切断硬连接。
我们湖试了许多文本编辑器，发现似乎都是使用第一种方式，保留硬连接。emacs
编辑器则允许在两种方式择一（注22）。相对地，如果你编辑或重写的文件是软连
接，那么你编修的就是原始数据：且只要它的路径名称仍未改变，则所有指向它的
其他软连接，都会反映此更新过的内容。
注 22：将变量backup-by-copying-when-1inked设为非-ni1（non-ni1)，及backup-by-
copying设考ni1，即可保留硬速接。可参考emacs手册里的Copying verswsRenaming。
www.TopSage.com
---
## Page 486
474
附录B
以硬连接而言，两种更新方式都可能导致薪文件的所有者与组改变：更新位置
（update-in-place）会保留所有者与组，但复制与更名（copy-and-rename）则会将
值重设为执行此操作的用户，因此，两种连接的行为模式在文件修改之后时常是不
一致的。
再来看看目录的符号连接：如果你有一个从subdir到/home/jones/somedir的
下时，连接便会被截断。
在连接里通常使用相对路径比较好，而且是只有在目录位于同级或更低级的情况
下：所以从subdir到../anotherdir的符号连接，只有在文件树至少比被移动
的文件树高一层目录处开始才会被保留，否则，连接会被切断。
切断的符号连接无法在切断当时被发现，只有在之后你引用此连接时才会知道：这
已经为时已晚。你的电话薄也可能出现类似间题：期友操了家没通知你，自此断了
联系。使用find命令可以找出被切断的连接，请参考第10章的说明，
符号连接到目录，也可能对相对性目录更动产生问题：当你改变符号连接的父目录
时，会移到被指向的目录的父目录，而非连接本身的父目录。
在建立文件打包时，符号连接会有问题：有时连接应被保留，但有时，打包文件应
只是包括文件本身的副本而不是连接。
文件大小与时间戳的变化
每个文件包括的inode实体记录包含了它的字节大小，如果文件为空时它可以是零。1s
输出的冗长模式，将大小显示在第5栏：
$.1s -1 /bin/ksh
列出元长模式的文件信息
-rMxr-xr-x
1 root
rgot
172316 2001-06-24 21:12 /bin/ksh
GNU版本的1s提供-S选项，以文件大小递减排序列出；
$ 1s -1s /bin 1 head -n 8
显示8个最大文件，并由大到小排列
total 7120
-rWXr-xr=x
1 rpm
rpm
1737960 2002-0215 08:31 rpm
-rMXI-XY-X
1 root
root
519964 2001-0709 06:56 bash
-TWX-xr-x
1 root
root
404604 2001-0730 12:46 zsh
472492 2001-0624 20:08 ash.8tat1c
-TWXr-Xr=x
2 root
2 root
root
-rWXr-Xr-x
root
404604 2001-07-30 12:46 zsh-4.0.2
ZWXT=Xr=x
1 root
root
288604 2001-06-24 21:45 tcsh
387820 2002-0128 04:10 vi
-rWKT-xT-x
1 root
root
当文件系统使用空闻已满，想要找出罪魁祸首时，-S选项就派得上用场了，当然，如果
你的ls不提供此选项，你也只要使用1s-1filesBcrt-k5rr便能得到相同的结果。
www.TopSage.com
---
## Page 487
文件与文件系统
475
注意：如果你怀疑某个正在执行的进程爆了文件系统，在SunSolaris下，可以使用下列方式找COIm
到这个打开中的大文件（如果你想看到的不只是属于你的文件，请以root的身份执行）：
///x/s-
列出所有打开的文件
-r--r--r-- 1 smith amith946643 Dec2 03:25/proe/15993/.fd/16
-r--r=-z-- 1 smith smith.835284 Dec 2 03:32 /proc/15993/fd/9
 + +
本例中，副除2965可能就能副除这个大文件一至少你知道是jones引1用它的了，
GNU/Linux也有/proc这样的工具机制，不过上面这个Solaris的解决方案在GNU/Linux
下并不适用，因为它所报告的文件大小在GNU/Linax上是不正确的。
磁盘可用空间（disk-free）命令df用来报告当前磁盘的使用情况，或者你可加上-i选
项了解inode的使用情况。磁盘使用情况命令du则可报告个别目录内容下的总使用空
间，或辅以-s选项输出简洁的摘要。这些例子在第10章里都有。find命令搭配-mtime
与-812e选项，可以找出最近建立的或大小不寻常的文件，同样请参考第10章的说明。
在1s命令下使用-s选项可显示额外的开头栏位，其提供文件的块（block）大小：
$1s -1ge/1ib/1ib*1 bead -n 4
2220-r-xr-xr-t1 sys 2270300 Nov 4 1999 /1ib/1ibc.so.1
以元长模式列出前4个匹配文件的信息
60 -r----r--
1 8ys
59348 Mov 41999/1ib/libcpr.so
108 -r--r--r--
1 sys
107676NoV4
27832 Nov 4 1999 /1ib/1ibmal1oc.s0
1999 /1ib/1ibdisk.so
--.-2--1-8Z
1 sys
块大小与操作系统及文件系统息息相关：为了找到一个块的大小，可以字节为单位的文
件大小除以用块为单位的文件大小，然后进制成2的次方，即可得知。以上述为例，我
们发现2270300/2220=1022.6，所以其块大小为2=1024字节。随着存储设备的技
术越来越精进，我们以块大小算出来的值可能与它所呈现在设备上的值有所不同。且厂
商与某些GNU的1s版本也不一致，因此有时以此法取得的块大小不见得可靠一除非是
在同系统下使用同一个1s命令作对照。
注意：有时，你可能会遇到块小到有点奇怪的文件：像这样的文件多半有洞（hole），这是因为使
用直接访问的方式写人字节在指定的位置，数据库程序就常这么做，因为它们是以松散式
的表格存储在文件系统里。文件系统下的inode架构，处理有bole的文件时不会有问题，
但对于读取这样文件的程序而言，它看到的可能是（想像的）碰盘块所对应至hole的一连
本多申
复制如此的文件会以实体的零碰盘块填满hole，这可能会增加文件的大小。虽然建立原始
文件的软件不会感觉到它，但它是提供功能齐备的备份工具所需要处理的一个文件系统功
能，GNU的tar提供--sparse选项以请求检查这类文件，不过其他的tar实例则不提
供。另外，GNU的cp也支持--sparse选项，以处理这类带有hole的文件。
www.TopSage.com
---
## Page 488
476
附录B
使用管理的输出/恢复（dump/restore）工具，可能是在复制文件树时，唯一可避免填满hole
的方法了，各系统里的此类工具都有很大的差异，所以我们在本书中不做讨论。
你可能还会发现在最后两个范例的输出上有个地方不同：时间戳的表示方式。为尽量缩
减行宽度，1s通常是以Mmmddhh：mm表示最近6个月内的时间戳，而以Mmmddyyyy
表示6个月前的时间。有些人会觉得这样很麻烦，而现行许多窗口系统都已经没有旧式
ASCII终端那种80个字符的行限制了，因此这种做法已经不是那么必要。不过大部分的
人仍认为太长的行会很难阅读，且近期的GNU1s版本也致力于将显示的结果保持在简
短的样式。
GNU的1s会依locale的设置，显示近似yyyy-mm-ddhh：mm:ss这样的格式，以符合ISO
8601:2000:Data elements andinterchange formats-Information interchange-
Representalionefdatesandrimes的定义，不过就像先前的例子会去除秒数部分。
GNU的ls里，选项--ful1-time可用来揭露文件系统里完整的时间数记录，如第10
章所述，
其他的文件metadata
剩下还有一些文件的属性记录在inode条目里，是我们还未提及的。不过在1s-1的输
出里，还看到的部分就只有文件类型（filetype）了，它记录在每行的第一个字符，就
在权限的前面。-（连字号）指的是一般文件、d为目录，而1为符号连接。
这三种是我们在一般目录下常看到的，但在/dev下，你还会遇到至少这两种：b指块
设备，c为字符设备。它们都与本书无关。
两种其他较少见的文件类型，例如p指的是命名的管道（namedpipe），s指的是Socket
（一种特殊的网络连接）。Socket为较高级的范畴，本书不作介绍。命名的管道则在程序
与Shell脚本里偶尔用到：它们可以允许用户端和服务器端通过文件系统命名空间来沟
通，并提供将一个进程的输出导向两个或两个以上不相关进程的方式。它们广义化一般
的管道，后者只有一个写人与一个读取。
GNU coreutils包里的stat命令会显示stat（）系统调用的结果，回传文件的inode信
息。下面为SGIIRIX里的使用范例：
S otat /bdn/true
报告文件的inpde信息
Pile:*/bin/true'
Size: 312
Blocks: 8
I0 Block: 65536regular fi1e
Devlce: eeh/238d
Access：（0755/rwxr-xx-x）.Uid：0root）Gid：（0/
Inode: 380
Links: 1
sAs
Acce6s: 2003-12-09 09:02:56.572619600 0700
www.TopSage.com
---
## Page 489
文件与文件系统
Change: 1999-11-04 12:07:38.888253600 -0700
Nodify: 1999-11-04 12:07:38.887783200 -0700
这里显示的stat子集信息，比ls更细微。
GNU的stat也支持设计更精细的报告，让你选择其中的子集输出。例如，软件安装包
可使用它们，以找出文件系统是否仍有足够的空间可执行安装。详见stat手册页。
只有少数的UNIX版本（FreeBSD、GNU/Linux、NetBSD与SGIIRIX）支持原始的stat
命令。这里举三个例子如下：
$/uar/bln/atab/uar/bin/EruereeBsD5.0（较长的输出，已缩减长度以符合解脱页面）
1027 1366263 -r-xr-xr-x 1 root whee1 5464488 3120 *Dec  2 18:48:36 2003*
S stat -t/bin/true
/bin/troe 312 8 81ed 0 0 ee 380 1 0 0 1070985776 941742456 941742458 65536
GNU/Linux简洁的inode 信息
$/abin/atat/bin/true
SGIIEIX系德工具程序
/bin/true1
inode 380; dev 238; 1inks 1; size 312
regular; mode is rwxr-xr-x; u1d 0 (root): g1d 0 (eys)
projid 0
change time - Thu Nov4 12:07:38 1999
st_fstype:, xfs
nodify time - Thu Nov  4 12:07:38 1999 
UNIX文件的所有权与隐私权议题
我们已提及太多与文件权限相关的议题，让你了解如何控制文件与目录的读取、写人与
执行的访问。你可以，也应该注意文件权限的选择，以掌控能访问你文件的有哪些人。
访问控制中最重要的工具就是umask命令了，因为它可以针对接下来建立的所有文件限
制指定的权限，通常你会使用歇认值，而它是设置在你Shell启动时所读取的文件里，以
类似sh的Shell而言为$HOME/.profile文件，见14.7节。如Shell有支持，系统管理
员通常会在对应的系统面起始文件内放置umask的设置。在协力合作的研究环境下，你
应选择022掩码值，副除组与其他人的写人权限。以学生使用的环境来看，077的掩码