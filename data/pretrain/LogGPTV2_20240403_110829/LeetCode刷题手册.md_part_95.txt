return []int{}
if j=
j--
carry 
carry
--
综合起来就是（-2)^k，所以最终k 位上有一个 1
当k 为偶数的时候，2＊（-2)k + 2＊（-2)^(k－1）= 2^(k + 1）－ 2k = 2k*
当k 为奇数的时候，2 ＊（-2)∧k + 2 *（-2)^(k－1）=-2Λ(k+1）+ 2∧k=
所以加起来的和是2＊（-2)∧k+2＊
证明：由于进位是由－ 1 位进过来的，所以k－ 1 位是 2 个 1。现在 位是 2 个 
所以加起来的和是（-2)∧k+2＊（-2)^(k－1)。
证明：由于进位是由 ㎏－ 1 位进过来的，所以k－ 1 位是 2 个 1。现在k 位是 1 个 0 
综
当
当
综合起来就是（-2)^k，所以最终k 位上有一个 1
宗
当
所以加起来的和是2＊（-2)^(k－1)。
证明：由于进位是由k－ 1 位进过来的，所以k－1 位是 2 个 1。现在㎏ 位是 2 个
2^k
合起来就是 〇，所以最终 k 位上有一个 0 
k 为偶数的时候,
k 为奇数的时候,
k为偶数的时候，2＊（-2)^(k－
k 为奇数的时候，2
/ += arr2[j]
0
+= arrl[i]
0
(-2)k + 2 *(-2)^(k 
（-2)^k + 2 *（-2)^(k - 1) = -2^k + 2^k = 0
 len(arr2)-1; i >= 0 ll j >= 0 ll carry != 0; {
*(-2)^(k -
-1) = (-1)^(k - 1)* 2 * 2^(k - 1) = -2^k
-1) =（-1)(k - 1)* 2 * 2^(k - 1) = 2^k
(-2)^(k -
- 1) = 2^k - 2^k = 0
1)。
而
---
## Page 1009
func intToNegabinary(num int) []int {
func negabinaryToInt(arr []int) int {
func addNegabinaryl(arrl []int, arr2 []int) []int { 
//解法二标准的模拟，但是这个方法不能 AC，因为测试数据超过了64位，普通数据类型无法存储
if len(arr) == 0 { 
 t o  
return res
for num != 0 {
res := []int{}
return res + 1*arr[len(arr)-1]
for i := O; i > 1) 
ans = append([lint{carry & 1}, ans...)
num = num / (-2) 
res +=（-2) * arr[i]
return ans[idx:]
num++ 
remainder +=
res += (-2) * arr[i]
res = res * (-2)
0
---
## Page 1010
提示：
矩阵也不同。
如果(x1,y1,x2,y2)和(x1,y1,x2,y2")两个子矩阵中部分坐标不同(如：×1 !=x1)），那么这两个子
子矩阵 ×1, y1, x2,y2 是满足 ×1    =:  o
for j := i; j { 
[] [mou]xiuzew =+ wns 
sum += matrix[row][j] - matrix[row][i-1]
 if sumsubmatrix(matrix, startx, starty, endx, endy) == target {
 sum += matrix[row][j]
 res++
 //fmt.Printf("startx = %v, starty = %v, endx = %v, endy = %v\n",
1
---
## Page 1013
题目大意
Note:
Example 2: 
Example 1:
For each such occurrence, add "third " to the answer, and return the answer.
after second.
second third", where second comes immediately after first, and third comes immediately
Given words first and second, consider occurrences in some text of the form "first
题目
1078. Occurrences After Bigram
4. first and second consist of lowercase English letters.
3. 1 <= first.length, second.length <= 10
 2. text consists of space separated words, where each word consists of lowercase English 
1. 1 <= text.length <= 1000
 Output: ["we","rock"] 
Input: text = "we will we will rock you", first = "we", second = "will""
Output: ["girl","student"]
second = "good"
'. = asu ‘.uapns poob e s! ays luib poo e s! ae. = axa :andu1
func sumsubmatrix(matrix [][]int, startx, starty, endx, endy int) int {
letters.
return sum
for i := startx; i <= endx; i++ {
0 =: uns
return res
for j := starty; j
 sum += matrix[i][j] 
<= endy; j++
---
## Page 1014
Example 1:
number of possible non-empty sequences of letters you can make.
You have a set of tiles, where each tile has one letter tiles[i] printed on it. Return the
题目
1079. Letter Tile Possibilities
代码
解题思路
"third"添加到答案中，并返回答案。
的情况，其中 second 紧随 first 出现，third 紧随 second 出现。对于每种这样的情况，将第三个词
给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以"first second third" 形式出现
·简单题。给出一个 text，要求找出紧接在 first 和 second 后面的那个字符串，有多个就输出多
"ABA"，"BAA"
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB",
output:8
Input: "AAB"
func findocurrences(text string, first string, second string) []string {
import "strings"
package leetcode
return res
for i := 2; i< len(words); i++ { 
if len(words)<3{
var res []string 
 second 以后，输出之后的那个字符串。
个。解法很简单，先分解出 words 每个字符串，然后依次遍历进行字符串匹配。匹配到first 和
if words[i-2] == first && words[i-1] == second { 
 return []string{}
res = append(res, words[i]) 
---
## Page 1015
代码
解题思路
目。提示：
你有一套活字字模 tiles，
题目大意
Note:
 Example 2:
·题目要求输出所有非空字母序列的数目。
·tiles 由大写英文字母组成
●1 <= tiles.length <= 7
 2. tiles consists of uppercase English letters.
1. 1 <= tiles.length <= 7
Output: 188
func numTilePossibilities(tiles string) int {
//解法－DFS 
package leetcode
Input: "AAABBC"
return numTileDFS(arr)
for i := range tiles {
m := make(map[byte]int) 
for -, v := range m {
arr := make([]int, 0)
递归到到第 3轮了，A用完了，这个时候只能取频次还不为0的字母拼上去。
写字母中的一个。这里需要注意的是，增加的只能是 26 个字母里面还能取出"机会"的字母，例如
符串了(见解法二)。简单的做法是每次递归按照频次累加。因为每次增加一个字母一定是 26 个大
这道题目由于不需要输出所有解，所以解法可以优化，例如我们在递归计算解的时候，不需要真的
母，二个字母，..个字母。每个组合内是排列问题。比如选择2个字母，字母之间相互排序不
 arr = append(arr, v)
m[tiles[i]]++
遍历原字符串，只需要累加一些字母的频次就可以。当然如果要输出所有解，就需要真实遍历原字
同是影响最终结果的，不同的排列顺序是不同的解。
，其中每个字模上都刻有一个字母 tiesi]。返回你可以印出的非空字母序列的数
。这一题是排列和组合的结合题目。组合是可以选择一个字
---
## Page 1016
string(tmp))
map[string]string] {
make([]bool， len(tiles)) 
func numTilePossibilitiesl(tiles string) int {
//解法二 DFS 暴力解法 