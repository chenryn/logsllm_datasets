**作者：启明星辰ADLab  
公众号：**
### **漏洞介绍**
2019年1月11日，ThinkPHP团队发布了一个补丁更新，修复了一处由于不安全的动态函数调用导致的远程代码执行漏洞。该漏洞危害程度非常高，默认条件下即可执行远程代码。启明星辰ADLab安全研究员对ThinkPHP的多个版本进行源码分析和验证后，确认具体受影响的版本为ThinkPHP5.0-5.0.23完整版。
### **漏洞复现**
本地环境采用ThinkPHP 5.0.22完整版+PHP5.5.38+Apache进行复现。安装环境后执行POC即可执行系统命令，如图：
### **漏洞分析**
以官网下载的5.0.22完整版进行分析， **首先定位到漏洞关键点：**
thinkphp/library/think/Request.php:518
      public function method($method = false)
        {
            if (true === $method) {
                // 获取原始请求类型
                return $this->server('REQUEST_METHOD') ?: 'GET';
            } elseif (!$this->method) {
                if (isset($_POST[Config::get('var_method')])) {
                    $this->method = strtoupper($_POST[Config::get('var_method')]);
                    $this->{$this->method}($_POST);
                } elseif (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
                    $this->method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);
                } else {
                    $this->method = $this->server('REQUEST_METHOD') ?: 'GET';
                }
            }
            return $this->method;
        }
在method函数的第二个if分支中，引入了一个外部可控的数据`$_POST[Config::get[‘var_method’]`。而`var_method`的值为`_method`。
取得`$_POST[‘_method’]`的值并将其赋值给`$this->method`，然后动态调用`$this->{$this->method}($_POST)`。这意味着攻击者可以调用该类任意函数并以`$_POST`作为第一个参数。如果动态调用`__construct`函数，则会导致代码执行。
Request类的`__construct`函数如下：
     protected function __construct($options = [])
        {
            foreach ($options as $name => $item) {
                if (property_exists($this, $name)) {
                    $this->$name = $item;
                }
            }
            if (is_null($this->filter)) {
                $this->filter = Config::get('default_filter');
            }
            // 保存 php://input
            $this->input = file_get_contents('php://input');
        }
由于`$options`参数可控，攻击者可以覆盖该类的filter属性、method属性以及get属性的值。而在Request类的param函数中：
    public function param($name = '', $default =  null, $filter = '')
        {
             if (empty($this->mergeParam)) {
                 $method = $this->method(true);
                 // 自动获取请求变量
                 switch ($method) {
                    case 'POST':
                        $vars =  $this->post(false);
                        break;
                    case 'PUT':
                    case 'DELETE':
                    case 'PATCH':
                        $vars =  $this->put(false);
                        break;
                    default:
                        $vars = [];
                 }
                 // 当前请求参数和URL地址中的参数合并
                 $this->param      = array_merge($this->param,  $this->get(false), $vars, $this->route(false));
                 $this->mergeParam = true;
             }
             if (true === $name) {
                 // 获取包含文件上传信息的数组
                 $file = $this->file();
                 $data = is_array($file) ? array_merge($this->param, $file) :  $this->param;
                 return $this->input($data, '', $default, $filter);
             }
             return $this->input($this->param, $name, $default, $filter);
        }
当`$this->mergeParam`为空时，这里会调用`$this->get(false)`。跟踪`$this->get`函数：
     public  function get($name = '', $default = null, $filter = null)
        {
             if (empty($this->get)) {
                 $this->get = $_GET;
             }
             if (is_array($name)) {
                 $this->param      = [];
                 return $this->get = array_merge($this->get, $name);
             }
             return  $this->input($this->get, $name, $default, $filter);
        }
该函数末尾调用了`$this->input`函数，并将`$this->get`传入，而`$this->get`的值是攻击者可控的。跟踪`$this->input`函数：
    public  function input($data = [], $name = '', $default = null, $filter = '')
        {
             if (false === $name) {
                 // 获取原始数据
                 return $data;
             }
             $name = (string) $name;
            if ('' != $name) {
                 // 解析name
                 if (strpos($name, '/')) {
                    list($name, $type) =  explode('/', $name);
                 } else {
                    $type = 's';
                 }
                 // 按.拆分成多维数组进行判断
                 foreach (explode('.', $name) as $val) {
                    if (isset($data[$val])) {
                        $data = $data[$val];
                    } else {
                        // 无输入数据，返回默认值
                        return $default;
                    }
                 }
                 if (is_object($data)) {
                    return $data;
                 }
             }
             // 解析过滤器
            $filter = $this->getFilter($filter,  $default);
             if (is_array($data)) {
                 array_walk_recursive($data,  [$this, 'filterValue'], $filter);
                 reset($data);
             } else {
                 $this->filterValue($data, $name, $filter);
             }
             if (isset($type) && $data !== $default) {
                 // 强制类型转换
                 $this->typeCast($data, $type);
             }
             return $data;
        }
该函数调用了`$this->getFileter`取得过滤器。函数体如下：
    protected function getFilter($filter,  $default)
        {
             if (is_null($filter)) {
                 $filter = [];
             } else {
                 $filter = $filter ?:  $this->filter;
                 if (is_string($filter) && false === strpos($filter, '/')) {
                    $filter = explode(',',  $filter);
                 } else {
                    $filter = (array) $filter;
                 }
             }
             $filter[] = $default;
             return $filter;
        }
`$this->filter`的值是攻击者通过调用构造函数覆盖控制的，将该值返回后将进入到input函数:
     if  (is_array($data)) {
                 array_walk_recursive($data, [$this, 'filterValue'], $filter);
                 reset($data);
             }
查看filterValue函数如下：
    private function filterValue(&$value,  $key, $filters)
        {
            $default = array_pop($filters);
             foreach ($filters as $filter) {
                 if (is_callable($filter)) {
                    // 调用函数或者方法过滤
                     $value = call_user_func($filter, $value);
                 } elseif (is_scalar($value)) {
                    if (false !== strpos($filter, '/'))  {
                        // 正则过滤
                        if (!preg_match($filter,  $value)) {
                            // 匹配不成功返回默认值
                            $value = $default;
                            break;
                        }
                    } elseif (!empty($filter)) {
                        // filter函数不存在时, 则使用filter_var进行过滤
                        // filter为非整形值时, 调用filter_id取得过滤id
                        $value =  filter_var($value, is_int($filter) ? $filter : filter_id($filter));
                        if (false === $value) {
                            $value = $default;
                            break;
                        }
                    }
                 }
             }
             return $this->filterExp($value);
        }
在`call_user_func`函数的调用中，`$filter`可控，`$value`可控。因此，可致代码执行。
#### **漏洞触发流程：**
从ThinkPHP5的入口点开始分析：
thinkphp/library/think/App.php:77
      public static function run(Request $request = null)
        {
            $request = is_null($request) ? Request::instance() : $request;
            try {
                $config = self::initCommon();
                // 模块/控制器绑定
                if (defined('BIND_MODULE')) {
                    BIND_MODULE && Route::bind(BIND_MODULE);
                } elseif ($config['auto_bind_module']) {
                    // 入口自动绑定
                    $name = pathinfo($request->baseFile(), PATHINFO_FILENAME);
                    if ($name && 'index' != $name && is_dir(APP_PATH . $name)) {
                        Route::bind($name);
                    }
                }
                $request->filter($config['default_filter']);
                // 默认语言
                Lang::range($config['default_lang']);
                // 开启多语言机制 检测当前语言
                $config['lang_switch_on'] && Lang::detect();
                $request->langset(Lang::range());
                // 加载系统语言包
                Lang::load([
                    THINK_PATH . 'lang' . DS . $request->langset() . EXT,
                    APP_PATH . 'lang' . DS . $request->langset() . EXT,
                ]);
                // 监听 app_dispatch
                Hook::listen('app_dispatch', self::$dispatch);
                // 获取应用调度信息
                $dispatch = self::$dispatch;
                // 未设置调度信息则进行 URL 路由检测
                if (empty($dispatch)) {
                    $dispatch = self::routeCheck($request, $config);