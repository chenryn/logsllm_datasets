### Optimized Text

#### Attack Detection and Data Integrity Estimation
Upon detecting an attack and classifying it into a specific type, a Bayesian network is constructed based on the identified patterns. This network is then used to estimate the integrity of data objects.

#### Detailed Mechanism of the Database Firewall
- **No Attack Detected**: When no attacks are detected, the firewall is bypassed, and incoming transactions are processed by the data processing system as usual.
- **Attack Identified**: Once an attack is identified by the Attack Detector, the Damage Assessor locates the damaged data using stored transaction logs and audit files. The Integrity Estimator then estimates the set of compromised data objects based on the Bayesian network.
- **Damage Repair**: The Damage Repairer uses specific cleaning transactions to repair the damaged data objects reported by the Damage Assessor and Integrity Estimator.
- **Policy Enforcement**: The Policy Enforcement Manager acts as a decision-making proxy for data object access. When the Attack Detector identifies malicious transactions, the Firewalling Manager sets up new access policies to abort active transactions and deny new ones, building firewalls to prevent further damage.

This process may cause some availability loss during the construction of the Bayesian network and at each step of estimation. However, the pattern mining part, which is the most time-consuming, typically does not affect availability. The firewalls update themselves in response to changes in data integrity levels, ensuring that any new transactions comply with the updated policies. The Integrity Estimator continuously predicts the integrity of compromised data until a final solution is reached.

### 4. Damage Spreading Patterns Mining Approach

#### 4.1 Support for Mining Damage Spreading Patterns
In our analysis of attack histories, each history \( H_A^i \) is converted into records of the form \([t_{A_i}, t_{Time}, t_{Itemset_w}]\), where \( t_{Time} \) denotes the transaction time and \( t_{A_i} \) denotes an attribute of an entity. In an attack history, all data objects updated by transactions associated with the same value of \( t_{A_i} \) can be considered as a sequence. For example, in a clinical application, an attack history might be converted using \( t_{A_i} = \text{patient-id} \).

To evaluate the importance of a pattern, we use support as a metric:
- **Definition 1**: The support of a frequent damaged data object \( o_x \) is the ratio of the number of data object sets containing \( o_x \) to the total number of data object sets in an attack history.
- **Definition 2**: The support of a frequent damage spreading pattern \( X \) (both one-hop and multi-hop) is the ratio of the number of attack histories containing \( X \) to the total number of attack histories.

Some data objects are damaged randomly, and scanning the entire set of attack histories to find their support ratio is time-consuming and unhelpful. Therefore, Definition 1 is used to filter out these uninteresting corrupted data objects.

#### 4.2 Finding One-Hop Spreading Patterns
Given a cluster of attack histories \( H_A^i \) caused by the same type of attack, the problem of mining one-hop access patterns involves finding large access sequences that meet a user-specified minimum support. A large access sequence \( a_l^s \) is denoted as \( s_1, s_2, \ldots, s_n \), where each itemset \( s_i \) satisfies the specified minimum support threshold. The support of itemset \( s_i \) is defined similarly to Definition 2.

Each such large access sequence \( a_l^s \) is a one-hop frequent spreading pattern. To extract these sequences, the attack histories are transformed, grouping data objects by an attribute \( t_{A_i} \) and sorting them by transaction time \( t_{Time} \). This reduces redundancy by focusing only on damaged data objects.

**Example**:
- Table 2 shows an attack history grouped by patient-id and sorted by transaction time.
- Table 5 illustrates attack histories expressed as a set of access sequences.
- With a minimum support of 40%, two access sequences are found: \( \{1, 2\} \) and \( \{3, 4\} \).

#### 4.3 Finding Multi-Hop Spreading Patterns
To identify multi-hop spreading patterns, we map one-hop spreading patterns to a set of contiguous integers (Table 3). The attack histories after mapping are sorted by the transaction time of the first data object set in each large access sequence (one-hop) \( a_l^s \). This hides the detailed information of one-hop patterns and focuses on how damage migrates among the "islands."

**Example**:
- Table 4 shows attack histories after mapping.
- With a minimum support of 40%, the large multi-hop spreading patterns found are: \( \{1, 2\} \), \( \{2, 3\} \), \( \{3, 4\} \), and \( \{4, 5\} \).

The Apriori algorithm [15] is used to find one-hop and multi-hop spreading patterns. Given the minimum support, the algorithm for mining one-hop patterns is as follows:

**Algorithm 1: Mining Frequent Damage Spreading Patterns**
- **Input**: Histories \( H_A^i \)
- **Result**: Frequent one-hop damage spreading patterns

```plaintext
begin
    forall as ∈ H_A^i do
        if (as.oi)s ≥ min_support
            add as.oi to C
    end
    Ik = C
    while C ≠ ∅
        generate candidate patterns Ck+1 from Ck
        forall c ∈ Ck+1 do
            if (c)s ≥ min_support
                add c to Ik
    end
```

Similarly, multi-hop patterns can be mined by repeating steps 9 through 16 using the after-mapping histories.