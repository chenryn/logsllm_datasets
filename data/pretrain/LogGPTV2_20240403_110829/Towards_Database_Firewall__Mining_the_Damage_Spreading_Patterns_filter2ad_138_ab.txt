attack is detected and is clustered into a particular type of
attack, the Bayesian network corresponding to that cluster
of attacking is built upon the mined patterns, and then the
integrity of data objects is estimated based on the Bayesian
network.
The detailed mechanism of the database ﬁrewall is as
follows. When there are no attacks detected, the ﬁrewall
is bypassed. The incoming transactions are processed by
the data processing system as usual. As soon as an attack
is identiﬁed by Attack Detector and the damaged data by
malicious transaction T B
is located by Damage Assessor
i
using stored transaction log and audit ﬁles, the Integrity Es-
timator starts to estimate the set of dirty data objects based
on the built Bayesian network. When the Damage Assessor
locates the damage, Damage Repairer repairs the damage
data objects reported by Damage Assessor and Integrity Es-
timator using some speciﬁc cleaning transactions. Policy
Enforcement Manager works as a proxy for decision mak-
ing of data objects access. Firewalling Manager functions
when Attack Detector detects malicious transactions. For
example, upon the time when a malicious transaction T B
is
i
detected, Attack Detector notiﬁes Firewalling Manager to
set up a new access policy to abort every active transaction
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006transactions
Integrity Level 
Estimation
Firewalling
Policy Enforcement 
Managr
Database Firewall
One-Hop Spreading Pattern Mapping
. . .
1
2
. . .
Table 3. One-Hop Spreading Pattern Mapping
Data Processing 
System
Damage Repairer
OLTP Database System
Policy 1
Policy 2
… ...
Policy n
Attack
Histories
Log&Audits
Attack Detection
Damage 
Assessment
Figure 2. Database Firewall Architecture
and deny new coming ones at this time point and to build
up ﬁrewalls to prevent damage from spreading.
This procedure may cause some availability loss at the
stage of building up of Bayesian network and at each step of
estimation, while the time consuming part of our db ﬁrewall
solution, namely the pattern mining part, typically does not
cause any availability loss. At each step of integrity estima-
tion, the ﬁrewalls update themselves in co-response to the
changes of data integrity level. Accordingly, any new trans-
action submitted by a user will comply with the new policy.
Along with scanning the new attack history, Integrity Esti-
mator adaptively predicts the integrity of compromised data
until the ﬁnal solution is reached.
4 The Damage Spreading Patterns Mining
Approach
In previous section, we identiﬁed two types of damage
spreading patterns from the attack histories of a database.
In this section, we present the approach for discovering the
frequent damage spreading patterns.
4.1 Support for Mining Damage Spread-
ing Patterns
In our analysis of the attack histories, each attack
history H A
is converted to records in the form of
i
[tAi, tT ime, tItemsetw], where tT ime denotes the trans-
action time and tAi denotes an attribute of an entity. In an
attack history, all the data objects updated by transactions
associated with the same value of attribute tAi of an en-
tity can be viewed as a sequence together. For instance, as
shown in table 2, in the clinic application, an attack history
is converted by tAi=patient-id. To evaluate the importance
of a pattern, the support is used as a metric parameter. The
deﬁnition of support for a pattern may very from one appli-
cation to another. In this paper, the deﬁnitions of support
Histories
1
H A(cid:1)
H A(cid:1)
H A(cid:1)
H A(cid:1)
H A(cid:1)
...
4
2
3
5
After Mapping
{1} {2} {3}
{3} {4} {5}
{1} {2} {4} {5}
{1} {2} {3} {4}
{1} {4} {5}
...
Table 4. An Example of Attack Histories H A(cid:1)
After Mapping
i
are deﬁned as follows:
Deﬁnition 1 The support of a frequent damaged data object
ox is denoted by the ratio of the number of data object sets having
ox to the total number of data object sets in an attack history.
Deﬁnition 2 The support of a frequent damage spreading pat-
tern X, including both one-hop and multi-hop, is denoted by the
ratio of the number of attack histories containing X to the total
number of attack histories.
In practice, we ﬁnd that some data objects are damaged
in a random manner. Scanning the entire set of attack his-
tories to ﬁnd their support ratio is time consuming and does
not beneﬁt our pattern mining process. Thus, Deﬁnition 1
of the minimum support is deﬁned to ﬁlter out these unin-
teresting corrupted data objects.
4.2 Finding One-Hop Spreading Patterns
Given a cluster of attack histories H A
i
that are caused by
the same (type of) attack, the problem of mining one-hop
access patterns is ﬁnding large access sequences among all
sequences that satisfy a user-speciﬁed minimum support. A
large access sequence is denoted as al
s = ,
where each itemset si satisﬁes the speciﬁed minimum sup-
port threshold. The support of itemset si is similar to the
deﬁnition 2 of support and is deﬁned as the fraction of attack
Access Sequence (sorted by t)
Histories
t1
H A
1
H A
2
H A
3
H A
4
H A
5
...
. . .
. . .
...
t2
. . .
. . .
. . .
. ..
...tk
. . .
. . .
. . .
. . .
. . .
...
SM > 40%
Table 5. An Example of Using Attack Histo-
ries to Mine One-Hop Spreading Patterns
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006histories that contain it. Each such large access sequence
al
s is denoted as a one-hop frequent spreading pattern. To
dig out the large access sequences from attack histories, the
histories are transformed in the form as shown in table 2
in which data objects are grouped by an attribute tAi and
sorted by transaction time tT ime. Note, in transformation,
we assume that access sequence as =  = ,
and similarly as = = , and the large
access sequence al
s =  = . Since
we only consider the damaged data objects, in this way, we
can reduce the redundancy.
Example. Table 2 demonstrates an attack history that is
grouped by patient-id and sorted by transaction time. Table 5
shows the attack histories expressed as a set of access sequences.
Consider the example of histories shown in table 5, in accordance
with the Deﬁnition 2, with the minimum support set to 40% (i.e.,
two histories of total ﬁve histories.), two access sequences are
found: , . A real damage spreading pat-
tern from clinic application is shown as follows: 
The data objects (A) and (B) in damage spreading pat-
tern  are accessed both in histories 1 and 4, and
the data objects (A) and (E G) in damage spreading pat-
tern  are supported by histories 2 and 4.
In
history 2, itemset (C D) will be ﬁrst ﬁltered out due to sup-
port deﬁnition 1. In history 4, since we try to dig out ac-
cess sequences that are not necessarily contiguous, although
another access sequence is in between items (A) and (B),
 still counts as a large access sequence. Obvi-
ously, access sequence  is not a large access
sequence because only history H3 supports it. Although ac-
cess sequences , ,  and 
have satisﬁed the minimum support, they are not counted as
a pattern because they are not the large access sequences.
4.3 Finding Multi-Hop Spreading Pat-
terns
In this section, we will present the idea of identifying
multi-hop spreading patterns. Without loss of any gener-
ality, we assume that the one-hop spreading patterns are
mapped to a set of contiguous integers as shown in table 3.
Table 4 illustrates an example of attack histories after map-
ping. H A(cid:1)
denotes an attack history i after mapping and
is sorted by the transaction time of the ﬁrst data object set
sm of each large access sequence (one-hop) al
s. By doing
this, the detailed information of one-hop spreading patterns
is hidden and the focus is moved to ﬁnding out how the
damage migrates among the islands.
i
Example. Consider the attack histories shown in table 4.
The large one-hop spreading patterns found have been replaced
by the set of integers. The minimum support is speciﬁed to be
40%. Applying the same steps used in mining one-hop pat-
terns, the large multi-hop spreading patterns would be follow-
ing: , ,  and
.
To ﬁnd the one-hop and multi-hop spreading patterns,
the Apriori algorithm [15] is adopted. Given the minimum
support, the algorithm of mining the one-hop is shown as
below, where (as.oi)s is the support ratio of a data object
oi in the access sequence as against the minimum support
(deﬁnition 1), and (as)s is the support ratio of an access
sequence against the minimum support (deﬁnition 2). The
set of candidate patterns is denoted as C, and Ik denotes
the ﬁnal list of large access sequences (one-hop spreading
pattern). Similarly, the multi-hop can be mined by repeating
steps 9 through 16 using the after-mapping histories.
Algorithm 1: Mining Frequent Damage Spreading
Patterns
Input: Histories H A
i
Result: Frequent one-hop damage spreading patterns
/* for each attack history, grouped by tAi and
sorted by time t */
begin
forall as ∈ H A
i do
if (as.oi)s ,
{1}
G          B
0.6
0.4
{2}
{1}
G
B
G          B
0.4
0.6
0.25
0.75
{5}
{4}
G
B
G          B
0.5
0.5
0.2  
0.8
1
2
4
5
{3}
{2}
G
B
G          B
0.2
0.8
0.1
0.9
3
{2}