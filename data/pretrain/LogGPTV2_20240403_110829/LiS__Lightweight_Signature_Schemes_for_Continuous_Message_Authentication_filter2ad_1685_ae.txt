### Lightweight Signature Schemes for Resource-Constrained Devices

#### Introduction
For resource-constrained devices, designing efficient and lightweight cryptographic protocols is essential. This paper focuses on developing a lightweight signature scheme with an optimized signing procedure. For a broader overview of broadcast authentication (BA) protocols, we refer the reader to [37].

#### Online/Offline Signatures
To enable digital signatures on resource-constrained devices, online/offline signature schemes were introduced [10]. These schemes pre-compute expensive public-key cryptographic operations, such as exponentiation, in an offline phase. The intermediate private data is then stored on the device, allowing the signer to sign messages quickly in the online phase using only a few cheap arithmetic operations. This makes online/offline signatures suitable for applications where the signer (e.g., sensors or RFID tags) has limited computational resources.

In 2013, Yao and Zhao proposed a variant of the Fiat-Shamir paradigm called Γ-transformation [38], which can transform Fiat-Shamir style signature schemes (such as Schnorr [9]) into efficient online/offline signature schemes. The security of their scheme was further studied in [39]. Variants of these schemes have also been proposed in identity-based settings [40–42]. However, a significant drawback of online/offline signatures is the requirement to pre-store a non-trivial amount of intermediate private data, which needs to be replenished when exhausted. This makes them unsuitable for cyber-physical systems (CPS) that require continuous message authentication without interruptions.

In contrast, our focus is on lightweight signature schemes that have a small, constant-sized storage cost for the signer, with no need for replenishment.

#### SEMECS: A Lightweight Signature Scheme
In 2019, Yavuz and Ozmen [13] proposed a lightweight signature scheme called SEMECS, adapted from the Schnorr signature. To facilitate signature generation, SEMECS chains up the exponents of verification keys, such that \( r_j := H(r_{j-1}) \). The \( j \)-th verification key is computed as \( g^{r_j} \), where \( g \) is the generator of a cyclic abelian group. This allows all verification keys to be pre-computed. To sign a message \( m_j \), the signer computes the randomness of the Schnorr signature using one multiplication and one subtraction: \( s_j := r_j - m_j \cdot sk \), where \( sk \) is the signing key.

However, SEMECS does not address the verification key replenishment problem, making it unsuitable for continuous message authentication. Additionally, outsourcing the verification key replenishment to a third party or the verifier by handing over the seed \( r_{j-1} \) is not secure, as attackers could trivially extract the signing key if they obtain \( r_j \) and \( r_{j-1} \) along with the corresponding messages \( (m_{j-1}, m_j) \). Our scheme avoids this issue by chaining up only the randomness.

#### Chameleon Hash Functions
Chameleon hash functions (CHF) [15] are probabilistic and collision-resistant, and they can generate hash collisions efficiently with a trapdoor. CHFs are widely used in various cryptographic primitives and protocols. In 2010, Mohassel [43] proposed a general construction to transform any chameleon hash function into a strongly unforgeable one-time signature scheme. Unlike our work, Mohassel's scheme did not build a regular (multiple-times) signature scheme for continuous message authentication in CPS.

CHFs are also used in real-world applications such as vehicular communications [44], verifiable data streaming [45], and rewritable blockchains [46]. However, these constructions typically require the sender to compute the hash value of the CHF, involving two expensive exponentiation operations. In contrast, our approach leverages the collision generation function to generate signatures, making the signing procedure much more efficient.

#### Conclusions
In this work, we proposed a signature framework called LiS, consisting of two concrete signature schemes based on chameleon hash functions. These schemes have very fast signing algorithms and require a small, constant storage cost on the signing device, making them suitable for CPS with continuous message authentication services. We implemented our schemes on embedded devices to demonstrate their practicality.

Compared to prior work, especially online/offline signatures, our schemes have significantly smaller storage costs, and the signing key does not need to be replenished during its lifespan. We also discussed potential applications of our signature schemes in specific types of CPS.

An open problem is how to modify LiS to provide public verifiability without using stateful authenticated resolution (SAR). One possible approach is to use indistinguishability obfuscators (IO) [47, 48] to obfuscate our modified verification algorithms and hide the dummy randomness \( r' \).

#### Acknowledgments
We thank the anonymous reviewers for their helpful comments. This research is supported by A*STAR under its RIE2020 Advanced Manufacturing and Engineering (AME) Industry Alignment Fund - Pre Positioning (IAF-PP) Award A19D6a0053. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not reflect the views of A*STAR. This work was partially supported by the Natural Science Foundation of China under Grant No. 61872051 and 61402085. Chenglu Jin's work was done while he was with the University of Connecticut and was supported by AFOSR MURI under award number FA9550-14-1-0351.

#### References
[References listed as in the original text]

#### Appendix
**A. Discrete Logarithm Based Chameleon Hash Function**
- **CHKGen(1κ)**: The key generation algorithm samples a random group generator \( g \in G \) and a secret key \( sk_{CH} \in Z_q \), and computes the public key \( pk_{CH} := g^{sk_{CH}} \mod p \).
- **CHF(pkCH, m, r)**: The evaluation algorithm takes as input a public key \( pk_{CH} \in Z_q^* \) and a randomness \( r \in Z_q^* \), and outputs a hash value \( y := g^{mr} \mod p \).
- **CHColl(skCH, r', m, m')**: An efficient deterministic collision algorithm \( CHColl \) takes as input the secret key \( sk_{CH} \), and \( (r', m', m) \in Z_q^* \), and outputs a value \( r' := m + r \cdot sk_{CH} - m' \mod q \).

**B. Proof of Theorem 4.1**
- **Game 0**: This game corresponds to the real SEUF-wCMA security experiment of the digital signature scheme. All queries are answered honestly according to the specification of LiS1.
- **Game 1**: This game uses uniformly distributed dummy randomness to generate the verification key without using the universal hash function (UHF). The distribution of the dummy randomness remains unchanged.
- **Game 2**: This game changes the randomness \( x_i \) for each message \( m_i \) submitted by the adversary, ensuring statistical closeness to uniform randomness.
- **Game 3**: This game adds an abort rule if the adversary submits a tuple leading to a collision in the Bloom filter (BF). The security of the chameleon hash function ensures that the probability of this event is negligible.
- **Game 4**: This game aborts if the adversary finds a false positive error in the BF. The final advantage of the adversary is zero in this game.

By combining the probabilities from the above games, we conclude that the advantage of the adversary in the real game is bounded by the security of the chameleon hash function and the false positive probability of the BF, as stated in Theorem 4.1.