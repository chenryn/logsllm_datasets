        1020DE9C : MSVCRTD!_heap_alloc_base+0000013C
…
UST最大的特征是直接记录函数的返回地址，而不是它的符号。将
函数地址转换为符号的工作留给UMDH这样的工具来做，这样便大大节
约了查找和记录符号所需的时间和空间。UST机制主要是由
NTDLL.DLL中的以下函数实现的。
RtlInitializeStackTraceDataBase，负责初始化UST数据库。
RtlLogStackBackTrace，负责发起记录栈回溯信息，它会调用
RtlCaptureStack BackTrace收集栈信息，然后将其写到由全局变量
RtlpStackTraceDataBase所标识的UST数据库中。
RtlCaptureStackBackTrace负责调用RtlWalkFrameChain来执行真正
的信息采集工作。
尽管以上函数没有公开文档化，但因为NTDLL.DLL输出了以上所
有函数，所以还是可以调用它们的。利用这些函数，应用程序也可以使
用UST机制来记录重要操作的函数调用记录。为了演示其用法，在D4D
程序中设计了一个CFastTracer类，完整代码位于code\chap16\D4D目录
中。
RtlWalkFrameChain用于获取栈帧中的函数返回地址，它的原型如
下。
ULONG RtlWalkFrameChain (PVOID *pReturnAddresses, DWORD dwCount, DWORD dwF
lags);
其中，参数pReturnAddresses指向一个指针数组，用来存放每个栈
帧中的函数返回地址；第二个参数是这个数组的大小；第三个参数用于
指定标志值，可以为0。根据函数原型可以定义如下函数指针类型。
typedef ULONG (WINAPI *PFN_RTLWALKFRAMECHAIN)(PVOID *pReturnAddresses,
    DWORD dwCount, DWORD dwFlags);
然后使用GetProcAddress API取得RtlWalkFrameChain函数的地址。
hNtDll=LoadLibrary("NTDLL.DLL");
m_pfnWalkFrameChain=(PFN_RTLWALKFRAMECHAIN)
    GetProcAddress(hNtDll,"RtlWalkFrameChain");
接下来就可以通过这个函数指针来调用RtlWalkFrameChain函数
了，在D4dTest程序中调用CFastTracer的GetFrameChain方法得到的结果
如下。
Return Address[0]: 0x1000326f
Return Address[1]: 0x004024a2
…
Return Address[37]: 0x7c816fd7
使用DbgHelp函数加载了符号后，便可以得到这些地址所属的函数
和模块名称。
得到了函数返回地址信息后，接下来要解决的问题是如何记录这些
信息。根据具体情况，可以记录在应用程序自己维护的文件中，也可以
复用UST数据库。如果使用UST数据库，那么应该先调用
RtlInitializeStackTraceDataBase函数初始化UST数据库。每次需要添加记
录时，可以调用RtlLogStackBackTrace函数，这个函数会将当时的函数
调用记录记在UST数据库中。使用UMDH这样的工具便可以从UST数据
库中读取记录。
16.4 数据的可追溯性
在调试时，我们经常诧异某个变量的值怎么变成这个样子，想知道
哪个函数在何时将其修改成出乎预料的值。有时我们也希望知道一个变
量取值的变化过程，它曾经取过哪些值，或者在过去的某个时间，它的
取值是什么。要解决这些问题，就要提高数据的可追溯性，也就是记录
数据的修改经过和变化过程，使其可以查询和追溯。
因为在调用函数时栈上记录了被调用函数的返回地址，这为实现代
码的可追溯性提供了一个很好的基础。但对于数据的可追溯性，目前的
计算机架构所提供的支持还很有限。CPU的数据断点功能可以算是其中
一个。第4章介绍过，在软件调试时，可以对感兴趣的数据设置硬件断
点。此后，当再次访问这个数据时，CPU便会发出异常而中断到调试
器。那么能否在非调试情况下利用CPU的数据断点功能来监视变量呢？
答案是肯定的。下面就介绍这种依赖于CPU的数据断点功能来监视数据
并记录其访问经过的方法。
16.4.1 基于数据断点的方法
简单来说，这种方法的原理就是将要监视的变量的地址以断点的形
式设置到CPU的调试寄存器中，这样，当访问这个变量时，CPU便会报
告异常，而后应该在程序中捕捉这个异常并做必要的分析记录。记录可
以包含被访问的变量名称、访问时间、访问代码的地址（即触发断点的
代码地址）等简要信息，还可以根据异常中的上下文结构进行栈回溯从
而得到访问这个变量的函数调用过程，最后把得到的信息记录下来。
以上过程的一个难点就是如何捕捉异常。如果程序正在被调试，那
么数据断点导致的异常会先发给调试器，调试器会处理这个异常，因此
应用程序自己的代码是察觉不到这个异常的。当没有调试器时，数据断
点异常会发给应用程序，如果没有得到处理，那么就会导致应用程序崩
溃而结束。那么应用程序应该如何处理数据断点异常呢？使用结构化异
常处理程序或者C++的异常处理程序显然有很多问题，因为不知道什么
代码会访问被监视的变量而触发异常，连哪个线程都不确定，所以难以
选择这些异常处理程序的设置位置。幸运的是，可以通过Windows XP
引入的向量化异常处理程序（VEH）来解决这个问题。因为一旦注册了
VEH，那么进程内所有线程导致的异常都会发给VEH，VEH不处理时才
会交给结构化异常处理程序或者C++异常处理程序。这样，只要注册了
一个VEH，当它调用后，先判断是否是数据断点异常。如果不是，那么
便返回EXCEPTION_CONTINUE_SEARCH交给结构化异常处理程序
（SHE）去处理；如果是，那么说明有人访问了被监视的变量。清单
16-4给出了实现这一逻辑的VEH的简单代码。
清单16-4 接收数据断点异常的VEH
LONG WINAPI DataTracerVectoredHandler( struct _EXCEPTION_POINTERS *Excepti
onInfo )
{
    if(ExceptionInfo->ExceptionRecord->ExceptionCode==0x40010006L) 
        return EXCEPTION_CONTINUE_SEARCH;        //参见本书后续分卷
    if(ExceptionInfo->ExceptionRecord->ExceptionCode
        ==STATUS_SINGLE_STEP         //0x80000004L
        && g_pDataTracer!=NULL)
    {
        g_pDataTracer->HandleEvent(ExceptionInfo);
        return EXCEPTION_CONTINUE_EXECUTION;    //继续执行触发断点的代码
    }
    return EXCEPTION_CONTINUE_SEARCH;
}
数据断点的异常代码与单步执行是一样的，即0x80000004L。如果
希望严格判断是否是数据断点，那么应该判断上下文结构中的DR6寄存
器，即ExceptionInfo-> ContextRecord->Dr6。清单16-4中，pDataTracer是
CDataTracer类的实例。这个类封装了设置断点和处理断点事件等功能，
清单16-5给出了它的定义。
清单16-5 演示数据追溯功能的CDataTracer类
class D4D_API CDataTracer  
{
public:
   HRESULT HandleEvent(struct _EXCEPTION_POINTERS * ExceptionInfo);
   ULONG GetDR7(int nDbgRegNo, int nLen, BOOL bReadWrite);
   HRESULT StartTrace();                      //启动监视功能
   BOOL IsVarExisted(ULONG ulVarAddress);     //判断指定的变量是否正在被监视
   HRESULT RemoveVar(ULONG ulAddress);        //移除一个变量
   HRESULT AddVar(ULONG ulVarAddress,int nLen, int nReadWrite);//增加要监视
的变量
   CDataTracer();
   virtual ~CDataTracer();
   void ShowString(LPCTSTR szMsg);
   HRESULT ClearAllDR();         //清除所有调试寄存器，停止监视
   void SetListener(HWND hListBox);
protected:
   HRESULT RegVeh();             //注册VEH
   HRESULT UnRegVeh();           //注销VEH
   ULONG m_VarAddress[DBG_REG_COUNT];       //记录被监视的变量地址
   ULONG m_VarLength[DBG_REG_COUNT];        //记录被监视的长度
   ULONG m_VarReadWrite[DBG_REG_COUNT];     //记录监视的访问方式
   PVOID m_pVehHandler;                     //VEH句柄
   HWND m_hListBox;                         //接收提示信息的列表框句柄
};
其中，m_VarAddress用来记录要监视的变量地址，m_VarLength用
来记录要监视变量的长度，可以为0（1字节）、1（2字节）、3（4字
节）这三个值之一，m_VarReadWrite用来记录触发断点的访问方式，可
以等于1（只有写时触发）或者3（读写时都触发）。
成员m_hListBox用来存放显示列表用的列表框窗口句柄。出于演示
目的，我们只是将访问记录输出到一个列表框中。SetListener方法用来
设置m_hListBox的值。
AddVar方法用来添加要监视的变量，x86架构支持最多监视4个变
量。StartTrace方法用来启动监视，也就是将记录在成员变量m_VarXXX
中的变量信息设置到CPU的调试器中，其源代码如清单16-6所示。
清单16-6 设置数据断点的源代码
1    HRESULT CDataTracer::StartTrace()
2    {
3        CONTEXT cxt;
4        HANDLE hThread=GetCurrentThread();
5    
6        cxt.ContextFlags=CONTEXT_DEBUG_REGISTERS;//|CONTEXT_FULL;
7        if(!GetThreadContext(hThread,&cxt))
8        {
9            OutputDebugString("Failed to get thread context.\n");
10           return E_FAIL;
11       }
12       cxt.Dr0=m_VarAddress[0];
13       cxt.Dr1=m_VarAddress[1];
14       cxt.Dr2=m_VarAddress[2];
15       cxt.Dr3=m_VarAddress[3];
16    
17       cxt.Dr7=0;
18       if(m_VarAddress[0]!=0)
19           cxt.Dr7|=GetDR7(0,m_VarLength[0],m_VarReadWrite[0]);
20       if(m_VarAddress[1]!=0)
21           cxt.Dr7|=GetDR7(0,m_VarLength[1],m_VarReadWrite[1]);
22       if(m_VarAddress[2]!=0)
23           cxt.Dr7|=GetDR7(0,m_VarLength[2],m_VarReadWrite[2]);
24       if(m_VarAddress[3]!=0)
25           cxt.Dr7|=GetDR7(0,m_VarLength[3],m_VarReadWrite[3]);
26    
27       if(!SetThreadContext(hThread,&cxt))
28       {
29           OutputDebugString("Failed to set thread context.\n");
30           return E_FAIL;
31       }
32    
33       if(m_pVehHandler==NULL && RegVeh()!=S_OK)
34           return E_FAIL;
35    
36       return S_OK;
37   }
38   ULONG CDataTracer::GetDR7(int nDbgRegNo, int nLen, BOOL bReadWrite)
39   {
40       ULONG ulDR7=0;
41   
42       ulDR7|= (BIT_LOCAL_ENABLE<<(nDbgRegNo*2));
43       // bit 0, 2, 4, 6 are for local breakpoint enable 
44       //
45    
46       // read write bits 
47       if(bReadWrite)
48           ulDR7|=BIT_RW_RW<<(16+nDbgRegNo*4);
49       else
50           ulDR7|=BIT_RW_WO<<(16+nDbgRegNo*4);
51   
52       ulDR7|=nLen<<(16+nDbgRegNo*4+2);
53   
54       return ulDR7;
55   }
其中，第7行通过GetThreadContext API取得线程的上下文
（CONTEXT）结构，第12～25行设置CONTEXT结构中调试寄存器的
值，第27行通过SetThread Context API将CONTEXT结构设置到硬件中。
GetDR7方法用来计算某个断点所需的DR7寄存器值，因为多个断点共
用DR7寄存器，所以多个断点的设置通过“或”（OR）操作集成在一起。
关于DR7寄存器的细节，第4章做过详细的介绍。