    }
代码的意思：当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。
3.使用Apache服务器的，在相应目录下放一个 .htaccess 文件，内容为：
        Deny from all
4.不提供上传的原文件访问，对文件输出经过程序处理。
5.图片单独放一个服务器上，与业务代码数据进行隔离。
###  2、空字节代码执行漏洞
**漏洞描述** ：
Ngnix在遇到%00空字节时与后端FastCGI处理不一致，导致可以在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码
**影响版本** :
Nginx 0.5.x
Nginx 0.6.x
Nginx 0.7-0.7.65
Nginx 0.8-0.8.37
**测试环境** ：
[nginx官网](https://nginx.org/en/download.html)
由于环境比较旧，不太容易搭建，这里只阐述一下大致过程：
1.上传一个qwzf.jpg图片文件
2.访问`http://x.x.x.x/qwzf.jpg％00.php`
3.就会将qwzf.jpg作为PHP文件进行解析
**修复方法** ：
1.升级nginx
2.禁止在上传文件目录下执行php文件
3.在nginx配置或者fcgi.conf配置添加下面内容：
    if ($request_filename ~* (.*)\.php) {
        set $php_url $1;
    }
    if (!-e $php_url.php) {
        return 403;
    }
####  3、nginx文件名逻辑漏洞(CVE-2013-4547)
**漏洞描述** ：
1.漏洞产生原因：
错误地解析了请求的URL,错误地获取到用户请求的文件名,导致出现权限绕过、代码执行的连带影响。
2.漏洞原理：
Nginx匹配到`.php`结尾的请求，就发送给fastcgi进行解析，常见写法：
    location ~ \.php$ {
        include        fastcgi_params;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;
        fastcgi_param  DOCUMENT_ROOT /var/www/html;
    }
（1）在关闭fix_pathinfo的情况下(即`cgi.fix_pathinfo=0`)，只有.php后缀的文件才会被发送给fastcgi解析
（2）存在CVE-2013-4547时，请求`qwzf.jpg[0x20][0x00].php`，这个URI可匹配到正则`\.php$`，进入到Location块；
（3）进入后，Nginx错误地认为请求的文件是`qwzf.jpg[0x20]`，然后设置其为SCRIPT_FILENAME的值发送给fastcgi。
（4）fastcgi根据SCRIPT_FILENAME的值，将`qwzf.jpg[0x20]`以php文件的形式进行解析，从而造成了解析漏洞。
也就是说，我们只需要上传一个空格结尾的文件，即可用PHP进行解析。
**影响版本** :
Nginx 0.8.41-1.4.3
Nginx 1.5 -1.5.7
**测试环境** ：
vulhub靶场的漏洞环境
环境位置：`vulhub/nginx/CVE-2013-4547`
nginx版本：`nginx/1.4.2`
**开始测试** ：
上传一个jpg文件，文件名为`qwzf.jpg`，文件内容为(或者上传图片马)：
    GIF89a
使用burp添加空格
发包，成功上传文件
访问`/uploadfiles/qwzf.jpg/.php`，burp抓包，添加两个空格
使用burp的hex功能，将第二个空格的0x20改为0x00
发包，成功解析。
## 0x04 IIS
IIS(Internet Information Services)是微软出品的灵活、安全、易于管理的Web服务器。
###  1、IIS 5.x和IIS 6.x解析漏洞
使用iis5.x-6.x版本的服务器，大多为windows server
2003，网站比较古老，开发语言一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。
**测试环境** ：
因为找不到相关环境，并且不想搭建，所以这里只阐述相关原理和相关知识。
**1.目录解析(6.0)**
**形式** ：`http://www.xxx.com/xx.asp/xx.jpg`  
 **原理** : 服务器默认会把`.asp`，`.asa`目录下的文件都解析成asp文件。
**2.文件解析(6.0)**
**形式** ：`http://www.xxx.com/xx.asp;.jpg`  
 **原理** ：服务器默认不解析`;`号后面的内容，因此`xx.asp;.jpg`便被解析成asp文件。
**3.解析文件类型(默认解析后缀)**
有的网站会设置黑名单上传限制 ,IIS6.0 默认的可执行文件除了asp还包含这三种 :
    /xx.asa
    /xx.cer
    /xx.cdx
iis把asa，cdx，cer解析成asp文件的原因：这四种扩展名都是用的同一个asp.dll文件来执行。
**修复方法** ：
1.阻止创建`.asp`和`.asa`类型的文件夹
2.阻止上传`xx.asp;.jpg`类型的文件名
3.阻止上传`.asa`、`.cer`和`.cdx`后缀的文件
4.设置权限，限制用户创建文件夹
###  2、IIS 7.0/7.5 CGI解析漏洞
**漏洞描述** ：
IIS7/7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了`cgi.fix_pathinfo`，而这并不是nginx或者iis7/7.5本身的漏洞。
**漏洞产生的条件** ：
php.ini里的`cgi.cgi_pathinfo=1`
IIS7在Fast-CGI运行模式下
**测试环境** ：
windows server 2008 R2（x64）
IIS7
phpStudy 2018版本
**开始测试** ：
首先在VMware安装windows server 2008 R2虚拟机(比较简单，百度搜教程即可)，然后安装IIS7和phpStudy
2018。可参考：[IIS7.0解析漏洞](https://blog.csdn.net/nzjdsds/article/details/96989492)
写一个index.php文件测试环境是否能正常工作。
正常工作。接下来，正式开始测试
1.在站点根目录创建一个qwzf.jpg文件，文件内容为：
2.配置CGI 模式
（1）在php.ini文件里将cgi.fix_pathinfo 取消注释并把值改为1
（2）更改网站的处理程序映射
管理工具 –> IIS -> WIN-5RQ4P819403 -> 处理程序映射
3.访问`http://192.168.201.149/qwzf.jpg/.php`
发现`qwzf.jpg`成功解析。
**常用利用方法** ：上传图片马
## 0x05 .user.ini
**.user.ini 作用和配置**
`.htaccess`是伪静态环境配置文件，用于lamp。
`.user.ini`是lnmp文件，里面放的是你网站的文件夹路径地址。目的是防止跨目录访问和文件跨目录读取.
为了防止跨站，可将 `.user.ini`放在网站根目录下，内容为：
`open_basedir=/项目路径/:/tmp/:/proc/`
如：`open_basedir=/var/www/html/:/tmp/:/proc/`
**测试代码** ：
    ";
    print_r($dir);
    //读取根目录文件夹vim
    $file = scandir('/');
    //显示
    echo " ";
    print_r($file);
    ?>
没加`.user.ini`的时候可以直接读到根目录的文件
加上`.user.ini`之后，就读不到根目录的文件了
**.user.ini文件利用**
> 利用条件：  
>  1.服务器脚本语言为PHP  
>  2.服务器使用CGI／FastCGI模式  
>  3.上传目录下要有可执行的php文件
参考：[user.ini文件构成的PHP后门](https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html)
大师傅博客里对`.user.ini`的解释具体可以怎样理解呢？
我的对其总结如下：
>
> 1.`php.ini`作为php的默认的配置文件，包括很多php配置，可分为：`PHP_INI_SYSTEM`、`PHP_INI_PERDIR`、`PHP_INI_ALL`、`PHP_INI_USER`。
>
> 2.模式为`PHP_INI_USER`的配置项，可在`ini_set()`函数中设置、`注册表`中设置和`.user.ini`中设置
>
> 3.PHP会在每个目录下扫描 INI 文件，从被执行PHP 文件所在目录一直上升到 web
> 根目录(`$_SERVER['DOCUMENT_ROOT']`所指定的)。若被执行PHP 文件在 web 根目录之外，则只扫描该目录。
>
> 4.`.user.ini`简单来说，就是一个可以由用户“自定义”的`php.ini`，可以自定义的设置是模式为`PHP_INI_PERDIR` 、
> `PHP_INI_USER`的设置(实际上，除`PHP_INI_SYSTEM`外的模式都可以通过`.user.ini`来设置)。
>
>
> 5.`.user.ini`是一个能被动态加载的ini文件。也就是修改`.user.ini`后，不需要重启服务器中间件，只需要等待`user_ini.cache_ttl`所设置的时间(默认为300秒)，即可被重新加载。
>
>
> 6.php配置项`auto_prepend_file`(`auto_append_file`)，指定一个文件，自动包含在要执行的文件前(后)，类似于在文件前(后)调用了require()函数。即借助`.user.ini`文件，可让所有php文件都“自动”包含某个文件  
>  (当文件调用的有exit()时该设置无效）
可直接在`.user.ini`中设置要包含的文件(如webshell、图片马等)：
    auto_prepend_file=qwzf.jpg
`qwzf.jpg`即是可执行php文件要包含的文件。
**开始测试** ：
直接使用vulhub靶场`vulhub/nginx/CVE-2013-4547`环境，在uploadfiles目录下创建一个可执行的php文件index.php
（1）上传`.user.ini`文件，内容如下：
    GIF89a
    auto_prepend_file=qwzf.jpg
（2）上传图片马`qwzf.jpg`，内容如下：
    GIF89a
访问`/uploadfiles/index.php`，发现qwzf.jpg被成功包含到index.php之前进行解析
## 0x06 Windows操作系统文件命名规则
Windows操作系统中，文件名不能以空格或`.`开头，也不能以空格或`.`结尾。当把一个文件命名为以空格或`.`开头或结尾时，会自动地去掉开头和结尾处的空格和`.`。利用此特性，也可能造成
**文件解析漏洞** 。
## 0x07 后记
根据上面所述，可见解析漏洞的危害。所以要注意解析漏洞的防范。  
本人小白一枚，如有错误，敬请大佬批评指正！
参考博客：  
[文件解析漏洞总结](https://www.smi1e.top/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/)  
[CTF考点总结-文件上传/文件包含](https://www.cnblogs.com/kagari/p/12638765.html)  
[利用最新Apache解析漏洞（CVE-2017-15715）绕过上传黑名单](https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html)  
[文件上传漏洞，解析漏洞总结](https://www.cnblogs.com/imbrave99/p/13369549.html)  
[解析漏洞整理](https://blog.csdn.net/u011781521/article/details/58630742)  
[典型漏洞归纳之解析漏洞](https://www.cnblogs.com/shellr00t/p/6426856.html)  
[服务器解析漏洞总结](https://www.cnblogs.com/zlgxzswjy/p/6561229.html)  
[文件解析漏洞总结-Nginx](https://blog.csdn.net/wn314/article/details/77388289/)  
[Nginx错误配置引发的解析漏洞复现](https://zgao.top/nginx%E9%94%99%E8%AF%AF%E9%85%8D%E7%BD%AE%E5%BC%95%E5%8F%91%E7%9A%84%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/)  
[nginx文件名逻辑漏洞_CVE-2013-4547漏洞复现](https://www.cnblogs.com/yuzly/p/11221564.html)  
[nginx+php使用open_basedir限制站点目录防止跨站](https://blog.csdn.net/u013372487/article/details/51909766?utm_source=blogxgwz1)