**Dave Thomas**: 我认为这就像黄金法则。如果你打算做一些邪恶或恶毒的事情，你会想：“如果别人对我这样做，我会喜欢吗？”这种情况下，黄金法则同样适用。
敏捷宣言也是如此。它并没有明确规定你该做什么或不该做什么，而是引导你反思你的行为是否符合其价值观。

**Saron Yitbarek**: 是的。回到敏捷软件开发宣言的核心，“敏捷”这个词尤为突出且持久。那么，现在使用“敏捷”这个词又存在什么问题呢？

**Dave Thomas**: 问题在于，“敏捷”最初只是一个描述软件开发方式的形容词。但随后人们开始问：“我该如何实施敏捷？”
突然间，许多咨询顾问看到了极限编程（XP）和宣言的成功，认为这是一个商机。他们开始告诉人们如何“做敏捷”，而这实际上是个误区，因为敏捷并不是一种具体的行为，而是一种工作方式。
有些公司甚至会出售所谓的“敏捷套装”。这是一种讽刺。这些顾问进入一家财富1000强企业，帮助他们实现“敏捷”，然后收取巨额费用。然而，真正的敏捷是无法通过一套规则来实现的。
就好比试图教一只老虎如何变得敏捷，你可能会说：“先走七步，然后左脚迈出来，再走两步，然后迈出右脚。”但实际上，只有瞪羚需要这样做。而且，没有人会去教瞪羚这样做。当你试图规定团队如何变得敏捷时，也会遇到同样的问题。如果你给他们一堆必须遵守的规则和流程，他们只会机械地执行，而不是真正地发挥创造性。

**Saron Yitbarek**: 那么，在宣言发布前后，开发者角色是如何变化的？

**Dave Thomas**: 大多数程序员都能理解并接受敏捷宣言的核心理念。我认为，敏捷给了许多开发人员按照自己想法工作的授权，这是他们在过去可能没有的权利。例如，进行测试、收集反馈、缩短迭代周期等。因此，在很多方面，工作变得更加有趣和充实。
同时，这也给程序员带来了更多的责任。以前，他们只需要遵循命令。而现在，他们对自己的工作负有更大的责任。

**Saron Yitbarek**: 敏捷不仅改变了软件开发领域的工作流程和态度，还影响了其他行业。我们不禁要问，如今成为敏捷开发人员意味着什么？最初的敏捷精神是否依然存在？如果发生了变化，这是好事还是坏事？
对于谷歌多元化业务合作伙伴Ruha Devanesan来说，敏捷思维已经发展到了影响公平性和工作场所平等性的程度。

**Ruha Devanesan**: 团队包容性的一部分原因在于，他们能够在基础工作中进行自我评估和反思。大多数团队通常没有足够的时间停下来思考他们的团队目标，以及每个人是否都有机会发言。在考虑包容性时，我认为敏捷团队使用的工具在创建更具包容性的框架方面非常有用。多样性包括性别、种族和功能多样性，这些都为团队带来了复杂性。

**Saron Yitbarek**: Ruha并不是说敏捷等于多样性，而是说“敏捷加多样性等于更好的团队”。她的这一观点在其文章《论通过敏捷方法解锁多样性》中得到了体现。这篇文章强调了多样性不仅仅是一个模糊的概念，而是一个强有力的商业案例。利用敏捷工具可以创建一个更加包容的工作环境，并提高创新效率。多样性与敏捷相辅相成。

**Ruha Devanesan**: 这篇文章最终目的是让大家从不同的角度看待结果或产品。当我们说增加团队多样性可以带来更好的结果、更多的创新和创造力时，我们的观点是一致的。因为当从多个角度协作解决问题时，更有可能得出一个更好的结果。

**Saron Yitbarek**: 即使是在日常会议这样的简单事情上，团队中的每个人都可以提供反馈，让内向的人或其他不爱说话的人也能发表意见。

**Ruha Devanesan**: 我非常喜欢敏捷的原因之一是它有一些内置机制，帮助团队停下来进行思考。这对于团队的包容性非常重要，因为它让每个人都能提出反馈并不断改进。

**Saron Yitbarek**: 在讨论包容性的同时，值得注意的是，敏捷宣言的17位创始人都是白人。

**Dave Thomas**: 实际上，那个房间里确实缺乏多样性。这是我们组织受到的一种普遍批评，我也对此深表同情。

**Saron Yitbarek**: 如果敏捷宣言的创始人能够应用这些原则，他们可能会意识到没有邀请女性或有色人种参加这次会议的问题。

**Ruha Devanesan**: 如果第一个考虑敏捷宣言的人是白人，他邀请到桌上的人也大多是白人，这并不奇怪。但我们有机会做得更好，我们可以退后一步，扩大视野，寻找关系网络之外的人，带来不同的视角，帮助我们更好地改进开发方式。

**Saron Yitbarek**: 敏捷的应用和发展是不断变化和扩展的。如果我们忘记这一点，硬性规定就会成为敏捷的敌人。如果一个敏捷团队告诉你必须每两周发布一个新版本，或者必须做什么事，那这就不再是真正的敏捷了。

**Saron Yitbarek**: 2008年的会议上，比利时开发人员Patrick Debois发明了一种全新的软件开发实践——DevOps。这让我思考，敏捷的兴起与DevOps的发明之间有多少关联？一个突破是否孕育了另一个突破？我们将在下一集中探讨这个问题。

**结束语**: 《代码英雄》是红帽的原创播客。有关更多信息，请访问[Redhat.com/commandlineheroes](https://www.redhat.com/commandlineheroes)。在那里，您还可以订阅我们的节目，以便第一时间获得内容更新。
我是Saron Yitbarek，感谢收听，请继续编程。

---

**什么是LCTT SIG和LCTT LCRH SIG**

LCTT SIG是LCTT特别兴趣小组（Special Interest Group），专注于特定领域和内容的翻译小组。LCRH SIG是由LCTT和红帽（Red Hat）联合发起的SIG，目前专注于《代码英雄》系列播客的脚本汉化。欢迎加入LCRH SIG一同参与贡献，并领取红帽和我们联合颁发的专属贡献者证书。

**关于重制版**

本系列第一季的前三篇我们已经发布过，这次根据新的SIG规范重新修订发布。

---
via: 
作者：[RedHat](https://www.redhat.com/en/command-line-heroes) 选题：[bestony](https://github.com/bestony) 译者：[redhat](file:///Users/xingyuwang/develop/LCRH-wxy/translated/www.redhat.com) 校对：[acyanbird](https://github.com/acyanbird)
本文由 [LCRH](https://github.com/LCTT/LCRH) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出