e
p
o
r
P
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
NI
SNI
Veriﬁcation time
IronMask
maskVerif
matverif
7sec
8sec
4min 6sec
5min 15sec
2h 22min
3h 7min
2sec
3sec
3min 41sec
6min
8h 52min
14h 46min
1sec
5sec
2min50sec
6h 28min
1sec
46sec
24min
24h
1sec
24sec
1sec
16min
1sec
1sec
-
7h 50min
1min30sec
3min56sec
2h 10min
6h 30min
-
-
3sec
10sec
1min 50sec
8min 16sec
2h 2min
10h 4min
1min50sec
2h 10min
-
-
6min
6h 26min
-
-
10h
>10h
8sec
20sec
7min
14min
>10h
>10h
As mentioned earlier, SILVER, while being the only tool
mentioned here that is complete on any gadget, suffers from
severe performance limitations. This is illustrated in Table VII,
which shows that SILVER is several orders of magnitude
slower than IronMask on the ISW multiplication and the
n log n refresh.
b) Random Probing Model: Table VIII shows the time
needed by VRAPS and IronMask to compute the maximum
tolerated leakage probability of the ISW multiplications when
setting cmax to 4 (which is the maximum that is computable
by VRAPS in reasonable time). IronMask was not multi-
threaded in this benchmark, and we recall that VRAPS does
not support multi-threading. IronMask is several orders of
magnitude faster than VRAPS in addition to being more
precise (since VRAPS can incorrectly classify tuples as fail-
ures). The performance gains are explained by several factors.
First, IronMask is written in C, whereas VRAPS is written
in SageMath. Second, IronMask uses a complete technique
based on Gaussian elimination to determine if tuples are fail-
ures, whereas VRAPS uses SageMath’s symbolic calculus to
iteratively apply simpliﬁcation rules inspired from maskVerif.
IronMask allocates less memory, and performs its
Third,
Gaussian elimination on the ﬂy (see Section IV-D), whereas
VRAPS allocates chunks of memory to store batches of tuples,
and restarts the simpliﬁcations from scratch for each tuple.
TABLE VIII: Performance of t-RPE veriﬁcation of IronMask
and VRAPS on ISW multiplication gadgets at orders 4 to 6
Veriﬁcation time
Shares
cmax
#wires
180
267
371
log2 maximum
tolerated proba
[-11.00,-10.67]
-13
[-12.00,-7.83]
IronMask
3sec
17sec
24sec
VRAPS
1h 15min
24h
24h
t
2
2
3
4
4
4
5
6
7
The performance gains of IronMask over VRAPS have
two main beneﬁts. First, IronMask can be more useful for
prototyping, since for small cmax it can provide approximate
results within a few seconds. Second, IronMask can compute
exact and more precise results by increasing cmax, as shown
in Table IV.
VI. RELATED WORK
Many tools have been implemented in the past few years to
verify software and hardware masked implementations. While
we do not intend to provide an exhaustive list, we brieﬂy recall
the main lines of works for the veriﬁcation of probing-like and
random-probing like properties.
In 2012, Moss et al. [33] design the ﬁrst automatic type-
based masking compiler to provide ﬁrst-order security against
DPA. Following this seminal work, Bayrak et al. [10] inves-
tigate SMT-based method to evaluate the statistical indepen-