title:G-Free: defeating return-oriented programming through gadget-less
binaries
author:Kaan Onarlioglu and
Leyla Bilge and
Andrea Lanzi and
Davide Balzarotti and
Engin Kirda
G-Free: Defeating Return-Oriented Programming
through Gadget-less Binaries
Kaan Onarlioglu
Bilkent University, Ankara
PI:EMAIL
Leyla Bilge
Eurecom, Sophia Antipolis
PI:EMAIL
Andrea Lanzi
Eurecom, Sophia Antipolis
PI:EMAIL
Davide Balzarotti
Eurecom, Sophia Antipolis
PI:EMAIL
ABSTRACT
Despite the numerous prevention and protection mechanisms that
have been introduced into modern operating systems, the exploita-
tion of memory corruption vulnerabilities still represents a serious
threat to the security of software systems and networks. A re-
cent exploitation technique, called Return-Oriented Programming
(ROP), has lately attracted a considerable attention from academia.
Past research on the topic has mostly focused on reﬁning the orig-
inal attack technique, or on proposing partial solutions that target
only particular variants of the attack.
In this paper, we present G-Free, a compiler-based approach that
represents the ﬁrst practical solution against any possible form of
ROP. Our solution is able to eliminate all unaligned free-branch
instructions inside a binary executable, and to protect the aligned
free-branch instructions to prevent them from being misused by an
attacker. We developed a prototype based on our approach, and
evaluated it by compiling GNU libc and a number of real-world
applications. The results of the experiments show that our solution
is able to prevent any form of return-oriented programming.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protection
General Terms
Security
Keywords
Return-oriented programming, ROP, return-to-libc
1.
INTRODUCTION
As the popularity of the Internet increases, so does the number of
attacks against vulnerable services [3]. A common way to compro-
mise an application is by exploiting memory corruption vulnerabil-
ities to transfer the program execution to a location under the con-
trol of the attacker. In these kinds of attacks, the ﬁrst step requires
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
Engin Kirda
Eurecom, Sophia Antipolis
PI:EMAIL
to ﬁnd a technique to overwrite a pointer in memory. Overﬂowing
a buffer on the stack [5] or exploiting a format string vulnerabil-
ity [26] are well-known examples of such techniques. Once the
attacker is able to hijack the control ﬂow of the application, the
next step is to take control of the program execution to perform
some malicious activity. This is typically done by injecting in the
process memory a small payload that contains the machine code to
perform the desired task.
A wide range of solutions have been proposed to defend against
memory corruption attacks, and to increase the complexity of per-
forming these two attack steps [10, 11, 12, 18, 35]. In particular,
all modern operating systems support some form of memory pro-
tection mechanism to prevent programs from executing code that
resides in certain memory regions [33]. The goal of this technique
is to protect against code injection attacks by setting the permis-
sions of the memory pages that contain data (such as the stack and
the heap of the process) as non-executable.
One of the techniques to bypass non-executable memory without
relying on injected code involves reusing the functionality provided
by the exploited application. Using this technique, which was orig-
inally called return-to-lib(c) [31], an attacker can prepare a fake
frame on the stack and then transfer the program execution to the
beginning of a library function. Since some popular libraries (such
as the libc) contain a wide range of functionality, this technique
is sufﬁcient to take control of the program (e.g., by exploiting the
system function to execute /bin/sh).
In 2007, Shacham [29] introduced an evolution of return-to-lib(c)
techniques [23, 27, 31] called Return-Oriented Programming (ROP).
The main contribution of ROP is to show that it is possible for an
attacker to execute arbitrary algorithms and achieve Turing com-
pleteness without injecting any new code inside the application.
The idea behind ROP is simple: Instead of jumping to the be-
ginning of a library function, the attacker chains together existing
sequences of instructions (called Gadgets) that have been previ-
ously identiﬁed inside existing code. The large availability of gad-
gets in common libraries allows the attacker to implement the same
functionality in many different ways. Thus, removing potentially
dangerous functions (e.g., system) from common libraries is in-
effective against ROP, and does not provide any additional security.
ROP is particularly appealing for rootkit development since it
can defeat traditional defense techniques based on kernel data in-
tegrity [36] or code veriﬁcation [24, 28]. Another interesting do-
main is related to exploiting architectures with immutable mem-
ory protection (e.g., to compromise electronic voting machines as
shown in [7]). ROP was also recently adopted by real attacks ob-
served in the wild as a way to bypass Windows’ Data Execution
Prevention (DEP) technology [2].
49The great interest around ROP quickly evolved into an arms race
between researchers. On the one side, the basic attack technique
was extended to various processor architectures [6, 7, 14, 15, 34]
and the feasibility of mounting this attack at the kernel level was
demonstrated [19]. On the other side, ad-hoc detection and protec-
tion mechanisms to mitigate the attack were proposed [9, 13, 16,
22]. To date, existing solutions have focused only on the basic at-
tack, by detecting, for instance, the anomalous frequency of return
instructions executed [9, 16], or by removing the ret opcode to
prevent the gadget creation [21]. Unfortunately, a recent advance-
ment in ROP [8] has already raised the bar by adopting different
instructions to chain the gadgets together, thus making all existing
protection techniques ineffective.
In this paper, we generalize from all the details that are speciﬁc
to a particular exploitation technique to undermine the foundation
on top of which return-oriented programming is built: the avail-
ability of instruction sequences that can be reused by an attacker.
We present a general approach for the IA-32 instruction set that
combines different techniques to eliminate all possible sources of
reusable instructions. More precisely, we use code rewriting tech-
niques to remove all unaligned instructions that can be used to link
the gadgets. Moreover, we introduce a novel protection technique
to prevent the attacker from misusing existing return or indirect
jump/call instructions.
We implemented our solution under Linux as a pre-processor
for the popular GNU Assembler. We then evaluated our tool on
different real-world applications, with a special focus on the GNU
libc (glibc) library. Our experiments show that our solution
can be applied to complex programs, and it is able to remove all
possible gadgets independently from the mechanism used to con-
nect them together. A program compiled with our system is, on
average, 26% larger and 3% slower (when all the linked libraries
are also compiled with our solution). This is a reasonable overhead
that is in line with existing stack protection mechanisms such as
StackGuard [11].
This paper makes the following contributions:
• We present a novel approach to prevent an attacker from
reusing fragments of existing code as basic blocks to com-
pose malicious functionality.
• To the best of our knowledge, we are the ﬁrst to propose
a general solution to defeat all forms of ROP. That is, our
solution can defend against both known variations and future
evolutions of the attack.
• We developed G-Free, a proof-of-concept implementation to
generate programs that are hardened against return-oriented
programming. Our solution requires no modiﬁcation to the
application source code, and can also be applied to system
applications that contain large sections of assembly code.
• We evaluated our technique by compiling gadget-free ver-
sions of glibc and other real-world applications.
The rest of the paper is structured as follows: In Section 2, we
analyze the key concepts of return-oriented programming.In Sec-
tion 3, we summarize proposed defense techniques against memory
corruption attacks and ROP. In Section 4, we present our approach
for compiling gadget-free applications. In Section 5, we describe
our prototype implementation. In Section 6, we show the results of
the experiments we conducted for evaluating the impact and per-
formance of our system. Finally, in Section 7, we brieﬂy conclude
the paper.
2. GADGETS
Before presenting the details of our approach, we establish a
more precise and general model for the class of attacks we wish
to prevent. Therefore, we generalize the concept of return-oriented
programming by abstracting away from all the details that are spe-
ciﬁc to a particular attack technique.
2.1 Programming with Gadgets
The core idea of return-oriented programming is to “borrow” se-
quences of instructions from existing code (either inside the ap-
plication or in the linked libraries) and chaining them together in
an order chosen by the attacker. Therefore, in order to use this
technique, the attacker has to ﬁrst identify a collection of useful
instruction sequences that she can later reuse as basic blocks to
compose the code to be executed. A crucial factor that differenti-
ates return-oriented programming from simpler forms of code reuse
(such as traditional return-to-lib(c) attacks) is that the collection of
code snippets must provide a comprehensive set of functionalities
that allows the attacker to achieve Turing completeness without in-
jecting any code [29]. The second step of ROP involves devising
a mechanism to manipulate the control ﬂow in order to chain these
code snippets together, and build meaningful algorithms.
Note that these two requirements are not independent: To allow
the manipulation of the control ﬂow, the instruction sequences must
exhibit certain characteristics that impose constraints on the way
they are chosen. For example, sequences may have to terminate
with a return instruction, or they may have to preserve the content
of a certain CPU register. In this paper, we use the term Gadget to
refer to any valid sequence of instructions that satisﬁes the control
ﬂow requirements.
In a traditional ROP attack, the desired control ﬂow is achieved
by placing the addresses of the gadgets on the stack and then ex-
ploiting ret instructions to fetch and copy them to the instruction
pointer.
In other words, if we consider each gadget as a mono-
lithic instruction, the stack pointer plays the role of the instruction
pointer in a normal program, transferring the control ﬂow from one
gadget to the next. Consequently, gadgets are initially deﬁned by
Shacham as useful snippets of code that terminate with a ret in-
struction [29].
However, the use of ret instructions is just one possible way
of chaining gadgets together. In a recent reﬁnement of the tech-
nique [8], Checkoway and Shacham propose a variant of ROP in
which return-like instructions are employed to fetch the addresses
from the stack. Because these sequences are quite rare in regular
binaries, indirect jumps (e.g., jmp *%eax) are used as gadget ter-
minators to jump to a previously identiﬁed return-like sequence. In
theory, it is even possible to design control ﬂow manipulation tech-
niques that are not stack-based, but that store values in other mem-
ory areas accessible at runtime by an attacker (e.g., on the heap or
in global variables).
As a result, in order to ﬁnd a general solution to the ROP threat,
we need to identify a property that all possible variants of return-
oriented programming have in common. Kornau [34] identiﬁed
such a property in the fact that every gadget, in order to be reusable,
has to end with a “free-branch” instruction, i.e., an instruction that
can change the program control ﬂow to a destination that is (or that
can be under certain circumstances) controlled by the attacker. Ac-
cording to this deﬁnition, in each gadget, we can recognize two
parts: the code section that implements the gadget’s functionality
and the linking section that contains the instructions used to trans-
fer the control to the next gadget. The linking section needs to end
with a free branch, but it can also contain additional instructions.
For instance, a possible linking section could be the following se-
50Figure 1: Examples of different gadgets that can be extracted from a real byte sequence
quence: pop %ebx; call *%ebx.
2.2 Gadget Construction
In the x86 architecture, gadgets are not limited to sequences of
existing instructions. In fact, since the IA-32 instruction set does
not have ﬁxed length instructions, the opcode that will be executed
depends on the starting point of the execution in memory. There-
fore, the attacker can build different gadgets by jumping inside ex-
isting instructions.
Figure 1 shows how, depending on the alignment of the ﬁrst and
last instruction, it is possible to construct three different kinds of
gadgets. Gadget1 is an aligned gadget that only uses “intended”
instructions already present in the function code. Gadget2 is a
gadget that contains only “unaligned” instructions ending with the
unintended call *%eax. Finally, Gadget3 starts by using an
unintended add instruction, then re-synchronizes with the normal
execution ﬂow, and ends by reaching the function return. This ex-
ample demonstrates how a short sequence of 14 bytes can be used
for constructing many possible gadgets. Considering that a com-
mon library such as libc contains almost 18K free branch in-
structions and that each of them can be used to construct multiple
gadgets, it is not difﬁcult for an attacker to ﬁnd the functionality he
needs to execute arbitrary code.
If we can prevent the attacker from ﬁnding useful instruction
sequences that terminate with a free branch, we can prevent any
return-oriented programming technique. We present our approach
to reach this goal in Section 4.
3. RELATED WORK
Several defense mechanisms attempt to detect memory exploits
which represent a fundamental basic block for mounting return-to-
lib(c) attacks. StackGuard [11] and ProPolice [18] are compile-
time solutions that aim at detecting stack overﬂows. PointGuard
encrypts pointers stored in memory to prevent them from being cor-
rupted [10]. StackShield [35] and StackGhost [17] use a shadow re-
turn address stack to save the return addresses and to check whether
they have been tampered with at function exits. A complete survey
of traditional mitigation techniques together with their drawbacks
is presented in [12]. Our solution, in order to avert ROP attacks,
prevents tampering with the return address as well; but it does not
target other memory corruption attacks.
One of the most effective techniques that hamper return-to-lib(c)
attacks is Address Space Layout Randomization (ASLR) [32]. In
its general form, this technique randomizes positions of stack, heap,
and code segments together with the base addresses of dynamic li-
braries inside the address space of a process. Consequently, an
attacker is forced to correctly guess the positions where these data
structures are located to be able to mount a successful attack. De-
spite the better protection offered by this mechanism, researchers
showed that the limited entropy provided by known ASLR imple-
mentations can be evaded either by performing a brute-force attack
on 32-bit architectures [30] or by exploiting Global Address Table
and de-randomizing the addresses of target functions [25].
Various approaches proposed by the research community aim
at impeding ROP attacks by ensuring the integrity of saved return
addresses. Frantsen et al. [17] presented a shadow return address
stack implemented in hardware for the Atmel AVR microcontroller,
which can only be manipulated by ret and call instructions.
ROPdefender [22] uses runtime binary instrumentation to imple-
ment a shadow return address stack where saved return addresses
are duplicated and later compared with the value in the original
stack at function exits. Even though ROPdefender is suitable for
impeding basic ROP attacks, it suffers from performance issues
due to the fact that the system checks every machine instruction
executed by a process.
Another method, called program shepherding [20], can prevent
basic forms of ROP as well as code injection by monitoring control
ﬂow transfers and ensuring library code is entered from exported
interfaces.
Other approaches [9, 13] aim to detect ROP-based attacks rely-
ing on the observation that running gadgets results in execution of
short instruction sequences that end with frequent ret instructions.
They proposed to use dynamic binary instrumentation to count the
number of instructions executed between two ret opcodes. An
alert is raised if there are at least three consecutive sequences of
ﬁve or fewer instructions ending with a ret.
The most similar approach to ours is a compiler-based solution
developed in parallel to our work by Li et al. [21]. This system
eliminates unintended ret instructions through code transforma-
tions, and instruments all call and ret instructions to imple-
ment return address indirection. Speciﬁcally, each call instruction
is modiﬁed to push onto the stack an index value that points to a re-
turn address table entry, instead of the return address itself. Then,
when a ret instruction is executed, the saved index is used for
looking up the return address from the table. Although this system
is more efﬁcient compared to the previous defenses, it is presented
as a solution speciﬁcally tailored for gadgetless kernel compilation,
and it exploits characteristics of kernel code for gadget elimination
and increased performance. Moreover, the implementation requires
manual modiﬁcations to all the assembly routines.
It is important to note that none of the defenses proposed so far
can address more advanced ROP attacks that utilize free-branch
instructions different from ret. The solution we present in this
paper is the ﬁrst to address all free-branch instructions, and the ﬁrst
that can be applied at compile-time to protect any program from
ROP attacks.
4. CODE WITHOUT GADGETS
Our goal is to provide a proactive solution to build gadget-free
executables that cannot be targeted by any possible ROP attack. In
particular, we strive to achieve a comprehensive, transparent, and
safe solution. By comprehensive, we mean that we would like our
solution to eliminate all possible gadgets by removing the linking
51mechanisms that are necessary to chain instruction sequences to-
gether. Transparent means that this process must require no inter-
vention from the user, such as manual modiﬁcations to the source
code. Finally, we would like to present a solution that is safe: That
is, it should preserve the semantics of the program, be compatible
with compiler optimizations, and support applications that contain
routines written in assembly language.
In order to reach our goals, we devise a compiler-based approach
that ﬁrst eliminates all unaligned free-branch instructions inside
a binary executable, and then protects the aligned free-branch in-
structions to prevent them from being misused by an attacker.
We achieve the ﬁrst point through a set of code transformation