SQL VALUES(1,reverse('1 断，由于服务端和
id |a|b|c
_ UTF 2 3ＡＡ 客户端的字符集
1 是 --+--+--+--
ASC 8 78'),reverse('123Ａ 不一致，字符 A
1 | 87| 87| 87
II Ａ 在客户端由多个
78'),reverse('123Ａ 字节表示，结果产
Ａ 78')); 生异常。
gbase=# INSERT
INTO table1
SQL id |a|b|c 字符串翻转后，又
VALUES(2,reverse('1
_ UTF --+--+--+-- 进行了自动截断，
2 是 2 3Ａ
ASC 8 2 所以产生了非预
78'),reverse('123
II |873|873|873 期的效果。
Ａ78'),reverse('123
Ａ 78'));
字符串类型的字
SQL gbase=# INSERT INTO id | a | b| c
段长度是客户端
_ UTF table1 VALUES(3,'87 --+--+--+---
3 是 字符编码长度的
ASC 8 Ａ 123','87Ａ 3 | 87Ａ1 | 87
整数倍，所以截断
II 123','87Ａ 123'); Ａ1 | 87Ａ1
后产生结果正常。
gbase=# INSERT
INTO table2
VALUES(1,reverse('1
2 3ＡＡ
78'),reverse('123Ａ
id |a|b|c
Ａ
SQL ---+-+--+-- 与示例1类似，多
78'),reverse('123Ａ
_ UTF 1 |87|321| 87 字节字符翻转之
4 否 Ａ 78'));
ASC 8 321 | 87 321 后不再表示原来
gbase=# INSERT INTO
II 2 | 87321| 的字符。
table2
87321| 87321
VALUES(2,reverse('1
2 3Ａ
78'),reverse('123
Ａ78'),reverse('123
Ａ 78'));
操作步骤
南大通用数据技术股份有限公司
25
GBase 8s V8.8开发者手册
向表中插入数据前，意味着表已创建成功。创建表的步骤请参考3.6 创建和管理表。
步骤1 向表customer_t1中插入一行：数据值是按照这些字段在表中出现的顺序列出的，并
且用逗号分隔。通常数据值是文本（常量），但也允许使用标量表达式。
gbase=# INSERT INTO customer_t1(c_customer_sk, c_customer_id, c_first_name)
VALUES (3769, 'hello', 'Grace');
如果用户已经知道表中字段的顺序，也可无需列出表中的字段。例如以下命令上面的命
令效果相同。
gbase=# INSERT INTO customer_t1 VALUES (3769, 'hello', 'Grace');
如果用户不知道所有字段的数值，可以忽略其中的一些。没有数值的字段将被填充为字
段的缺省值。例如：
gbase=# INSERT INTO customer_t1 (c_customer_sk, c_first_name) VALUES (3769,
'Grace');
gbase=# INSERT INTO customer_t1 VALUES (3769, 'hello');
用户也可以对独立的字段或者整个行明确缺省值：
gbase=# INSERT INTO customer_t1 (c_customer_sk, c_customer_id, c_first_name)
VALUES (3769, 'hello', DEFAULT);
gbase=# INSERT INTO customer_t1 DEFAULT VALUES;
步骤2 如果需要在表中插入多行，请使用以下命令：
gbase=# INSERT INTO customer_t1 (c_customer_sk, c_customer_id, c_first_name)
VALUES(6885,'maps','Joes'),(4321,'tpcds','Lily'),(9527,'world','James');
如果需要向表中插入多条数据，除此命令外，也可以多次执行插入一行数据命令实现。
但是建议使用此命令可以提升效率。
步骤3 如果从指定表插入数据到当前表，例如在数据库中创建了一个表customer_t1的备份
表customer_t2，现在需要将表customer_t1中的数据插入到表customer_t2中，则可以执行
如下命令。
gbase=# CREATE TABLE customer_t2 (
c_customer_sk integer,
c_customer_id char(5),
c_first_name char(6),
c_last_name char(8)
);
gbase=# INSERT INTO customer_t2 SELECT * FROM customer_t1;
南大通用数据技术股份有限公司
26
GBase 8s V8.8开发者手册
从指定表插入数据到当前表时，若指定表与当前表对应的字段数据类型之间不存在隐式
转换，则这两种数据类型必须相同。
步骤4 删除备份表。
gbase=# DROP TABLE customer_t2 CASCADE;
在删除表的时候，若当前需删除的表与其他表有依赖关系，需先删除关联的表，然后再
删除当前表。
3.6.3 更新表中数据
修改已经存储在数据库中数据的行为叫做更新。用户可以更新单独一行、所有行或者指
定的部分行。还可以独立更新每个字段，而其他字段则不受影响。
使用UPDATE命令更新现有行，需要提供以下三种信息：
 表的名称和要更新的字段名
 字段的新值
 要更新哪些行
SQL通常不会为数据行提供唯一标识，因此无法直接声明需要更新哪一行。但是可以
通过声明一个被更新的行必须满足的条件。只有在表里存在主键的时候，才可以通过主键指
定一个独立的行。
建立表和插入数据的步骤请参考3.6.1 创建表和3.6.2 向表中插入数据。
需要将表customer_t1中c_customer_sk为9527的地域重新定义为9876：
gbase=# UPDATE customer_t1 SET c_customer_sk = 9876 WHERE c_customer_sk = 9527;
这里的表名称也可以使用模式名修饰，否则会从默认的模式路径找到这个表。SET后面
紧跟字段和新的字段值。新的字段值不仅可以是常量，也可以是变量表达式。
比如，把所有c_customer_sk的值增加100：
gbase=# UPDATE customer_t1 SET c_customer_sk = c_customer_sk + 100;
在这里省略了WHERE子句，表示表中的所有行都要被更新。如果出现了WHERE子
句，那么只有匹配其条件的行才会被更新。
在SET子句中的等号是一个赋值，而在WHERE子句中的等号是比较。WHERE条件
不一定是相等测试，许多其他的操作符也可以使用。
南大通用数据技术股份有限公司
27
GBase 8s V8.8开发者手册
用户可以在一个UPDATE命令中更新更多的字段，方法是在SET子句中列出更多赋值，
比如：
gbase=# UPDATE customer_t1 SET c_customer_id = 'Admin', c_first_name = 'Local'
WHERE c_customer_sk = 4421;
批量更新或删除数据后，会在数据文件中产生大量的删除标记，查询过程中标记删除的
数据也是需要扫描的。故多次批量更新/删除后，标记删除的数据量过大会严重影响查询的
性能。建议在批量更新/删除业务会反复执行的场景下，定期执行VACUUMFULL以保持查
询性能。
3.6.4 查看数据
 使用系统表pg_tables查询数据库所有表的信息。
gbase=# SELECT * FROM pg_tables;
 使用gsql的\d+命令查询表的属性。
gbase=# \d+ customer_t1;
 执行如下命令查询表customer_t1的数据量。
gbase=# SELECT count(*) FROM customer_t1;
 执行如下命令查询表customer_t1的所有数据。
gbase=# SELECT * FROM customer_t1;
 执行如下命令只查询字段c_customer_sk的数据。
gbase=# SELECT c_customer_sk FROM customer_t1;
 执行如下命令过滤字段c_customer_sk的重复数据。
gbase=# SELECT DISTINCT( c_customer_sk ) FROM customer_t1;
 执行如下命令查询字段c_customer_sk为3869的所有数据。
gbase=# SELECT * FROM customer_t1 WHERE c_customer_sk = 3869;
 执行如下命令按照字段c_customer_sk进行排序。
gbase=# SELECT * FROM customer_t1 ORDER BY c_customer_sk;
3.6.5 删除表中数据
在使用表的过程中，可能会需要删除已过期的数据，删除数据必须从表中整行的删除。
南大通用数据技术股份有限公司
28
GBase 8s V8.8开发者手册
SQL不能直接访问独立的行，只能通过声明被删除行匹配的条件进行。如果表中有一
个主键，用户可以指定准确行。用户可以删除匹配条件的一组行，或一次删除表中的所有行。
 使用DELETE命令删除行。如删除表customer_t1中所有c_customer_sk为3869的记录：
gbase=# DELETE FROM customer_t1 WHERE c_customer_sk = 3869;
如果执行如下命令之一，会删除表中所有的行。
gbase=# DELETE FROM customer_t1;
或
gbase=# TRUNCATE TABLE customer_t1;
全表删除的场景下，建议使用TRUNCATE，不建议使用DELETE。
 删除创建的表：
gbase=# DROP TABLE customer_t1;
3.7 查看系统表
除了创建的表以外，数据库还包含很多系统表。这些系统表包含GBase8s安装信息以
及运行的各种查询和进程的信息。可以通过查询系统表来收集有关数据库的信息。
必须以初始化用户身份登录，才能查询只对初始化用户可见的表。
GBase8s提供了以下类型的系统表和视图：
 继承自PG的系统表和视图。这类系统表和视图具有PG前缀。
 新增的系统表和视图。这类系统表和视图具有GS前缀。
3.7.1 查看数据库中包含的表
例如，在PG_TABLES系统表中查看publicschema中包含的所有表。
gbase=# SELECT distinct(tablename) FROM pg_tables WHERE SCHEMANAME = 'public';
结果类似如下这样：
tablename
-------------------
err_hr_staffs
test
南大通用数据技术股份有限公司
29
GBase 8s V8.8开发者手册
err_hr_staffs_ft3
web_returns_p1
mig_seq_table
films4
(6 rows)
3.7.2 查看数据库用户
通过PG_USER可以查看数据库中所有用户的列表，还可以查看用户ID（USESYSID）
和用户权限。
gbase=# SELECT * FROM pg_user;
usename | usesysid | usecreatedb | usesuper | usecatupd | userepl | passwd |
valbegin | valuntil | respool | parent | spacelimit | useconfig | nodegroup
| tempspacelimit | spillspacelimit | usemonitoradmin | useoperatoradmin | usepo
licyadmin
---------+----------+-------------+----------+-----------+---------+---------
-+-
---------+----------+--------------+--------+------------+-----------+-------
---
-+----------------+-----------------+-----------------+------------------+---
---
----------
gbase | 10 | t | t | t | t | ******** |
| | default_pool | 0 | | |
| | | t | t | t
jack | 16549 | f | f | f | f | ******** |
| | default_pool | 0 | | |
| | | f | f | f
(2 rows)
3.7.3 查看和停止正在运行的查询语句
通过视图20.3.72PG_STAT_ACTIVITY可以查看正在运行的查询语句。方法如下：
步骤1 设置参数track_activities为on。
SET track_activities = on;
当此参数为on时，数据库系统才会收集当前活动查询的运行信息。
步骤2 查看正在运行的查询语句。以查看正在运行的查询语句所连接的数据库名、执行
查询的用户、查询状态及查询对应的PID为例：
SELECT datname, usename, state,pid FROM pg_stat_activity;
南大通用数据技术股份有限公司
30
GBase 8s V8.8开发者手册
datname | usename | state | pid
----------+---------+--------+-----------------
postgres | Ruby | active | 140298793514752
postgres | Ruby | active | 140298718004992
postgres | Ruby | idle | 140298650908416
postgres | Ruby | idle | 140298625742592
postgres | gbase | active | 140298575406848
(5 rows)
如果state字段显示为idle，则表明此连接处于空闲，等待用户输入命令。 如果仅需
要查看非空闲的查询语句，则使用如下命令查看：
SELECT datname, usename, state FROM pg_stat_activity WHERE state != 'idle';
步骤3 若需要取消运行时间过长的查询，通过PG_TERMINATE_BACKEND函数，根据线
程ID 结束会话。
SELECT PG_TERMINATE_BACKEND(139834759993104);
显示类似如下信息，表示结束会话成功。
PG_TERMINATE_BACKEND
----------------------
t
(1 row)
显示类似如下信息，表示用户执行了结束当前会话的操作。
FATAL: terminating connection due to administrator command FATAL: terminating
connection due to administrator command
gsql客户端使用PG_TERMINATE_BACKEND 函数结束当前会话后台线程时，客户端
不会退出而是自动重连。即还会返回“Theconnectionto theserver was lost.Attempting
reset:Succeeded.”
FATAL: terminating connection due to administrator command FATAL: terminating
connection due to administrator command
The connection to the server was lost. Attempting reset: Succeeded.
----结束
南大通用数据技术股份有限公司
31
GBase 8s V8.8开发者手册
3.8 其他操作
3.8.1 创建和管理 schema
背景信息
schema又称作模式。通过管理schema，允许多个用户使用同一数据库而不相互干 扰，
可以将数据库对象组织成易于管理的逻辑组，同时便于将第三方应用添加到相应的schema
下而不引起冲突。管理schema包括：创建schema、使用schema、删除schema、设置schema
的搜索路径以及schema的权限控制。
注意事项
 GBase8s包含一个或多个已命名数据库。用户和用户组在GBase8s范围内是共享的，
但是其数据并不共享。任何与服务器连接的用户都只能访问连接请求里声明的那个数据
库。
 一个数据库可以包含一个或多个已命名的schema，schema又包含表及其他数据库对象，
包括数据类型、函数、操作符等。同一对象名可以在不同的schema中使用而不会引起
冲突。例如，schema1和schema2都可以包含一个名为mytable的 表。
 和数据库不同，schema不是严格分离的。用户根据其对schema的权限，可以访问所连
接数据库的schema中的对象。进行schema权限管理首先需要对数据库的权限控制进行
了解。
 不能创建以PG_为前缀的schema名，该类schema为数据库系统预留的。
 在每次创建新用户时，系统会在当前登录的数据库中为新用户创建一个同名Schema。
对于其他数据库，若需要同名Schema，则需要用户手动创建。
 通过未修饰的表名（名称中只含有表名，没有“schema 名”）引用表时，系统会通过
search_path（搜索路径）来判断该表是哪个schema下的表。pg_temp和pg_catalog始终
会作为搜索路径顺序中的前两位，无论二者是否出现在search_path 中，或者出现在
search_path中的任何位置。search_path（搜索路 径）是一个schema名列表，在其中找