title:Bind your phone number with caution: automated user profiling through
address book matching on smartphone
author:Yao Cheng and
Lingyun Ying and
Sibei Jiao and
Purui Su and
Dengguo Feng
Bind Your Phone Number with Caution: Automated User
Proﬁling Through Address Book Matching on Smartphone
Yao Cheng
Institute of Software
Lingyun Ying
Institute of Software
Chinese Academy of Sciences
Chinese Academy of Sciences
Beijing 100190, China
PI:EMAIL
Beijing 100190, China
PI:EMAIL
Sibei Jiao
Institute of Software
Chinese Academy of Sciences
Beijing 100190, China
PI:EMAIL
Purui Su
Institute of Software
Chinese Academy of Sciences
Beijing 100190, China
PI:EMAIL
Dengguo Feng
Institute of Software
Chinese Academy of Sciences
Beijing 100190, China
PI:EMAIL
ABSTRACT
Due to the cost-eﬃcient communicating manner and attrac-
tive user experience, messenger applications have dominated
every smartphone in recent years. Nowadays, Address Book
Matching, a new feature that helps people keep in touch
with real world contacts, has been loaded in many popular
messenger applications, which unfortunately as well brings
severe privacy issues to users. In this paper, we propose a
novel method to abuse such feature to automatically collect
user proﬁles. This method can be applied to any application
equipped with Address Book Matching independent of mo-
bile platforms. We also build a prototype on Android to ver-
ify the eﬀectiveness of our method. Moreover, we integrate
proﬁles gathered from diﬀerent messenger applications and
provide insights by performing a consistency and authentic-
ity analysis on user proﬁle ﬁelds. As our experiments show,
the abuse of Address Book Matching can cause severe user
privacy leakage. Finally, we provide some countermeasures
for developers to avoid this issue when designing messenger
applications.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software; K.4.1
[Public Policy Issues]: Privacy
General Terms
Experimentation, Security
Keywords
Smartphone Applications, Privacy, User Proﬁling, Address
Book Matching
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
1.
INTRODUCTION
Messenger applications (e.g., WeChat [2] and Kik Mes-
senger), which provide instant messaging service for mobile
users, have become killer applications in mobile application
markets (e.g., App Store and Google Play). It is reported
that WeChat, a wildly popular instant messaging applica-
tion for mobile devices, has doubled its users base in only
6 months, from 100 million in March 2012 to 200 million
in September 2012. Messenger applications are popular for
their ﬂexible multimedia communication experience and e-
conomic boon. Before enjoying such convenience, users are
asked to register an application account by uploading their
personal information. For easily being discovered by friend-
s, users prone to register with genuine personal information
which is supposed to be visible to friends, however, in the
real world this situation is not exactly as expected. Besides,
messenger applications often recommend a list of other user-
s by exploring contact lists in smartphones, which highs up
the probability of exposing users’ privacy to the wild.
Our work is motivated by the fact that an increasing num-
ber of messenger applications start to add Address Book
Matching to their features. This new feature allows user to
upload his contact list to the application server from which
returns basic personal information of a list of other users
who exist in the contact list, for further identiﬁcation.
Our study shows that the abuse of Address Book Match-
ing, equipped by most popular messenger applications, will
bring about severe leak of user privacy in a large scale.
Speciﬁcally, we make the following contributions: 1) We
propose a novel approach to automatically collect user pro-
ﬁles via messenger applications on mobile platform for the
ﬁrst time in this area. Our method discovers a connec-
tion explicitly set up between user’s virtual account and his
real-world phone number, both of which would be revealed
to strangers; 2) We implement a prototype to verify our
approach. Through single-application analysis and cross-
application integration, the experiments show the eﬀective-
ness of our method. Moreover, we conduct a consistency and
authenticity analysis, which discloses wider genuine informa-
tion of victimized users; 3) After analyzing main factors that
make this attack possible, we provide some suggestions for
335mobile application developers to evade user privacy leakage
caused by abusing Address Book Matching feature.
2. PROBLEM FORMULATION
The basic idea of our method is presented in this section.
Address Book Matching will ﬁrst be introduced, along with
the discussion of its potential security risk.
2.1 Abusing Address Book Matching
From a mobile application designer view, Address Book
Matching is essentially introduced to set up connections
between user’s application account and his phone number
which can be regarded as user’s unique ID. It allows user to
upload address books (mainly including names and phone
numbers) to the application server end from which returns
a list of user accounts that are bound with phone numbers
in those address books. It is mandatory for a user to bind
his own phone number with his application account before
using Address Book Matching.
It assumes that each user
behaves regularly and the contacts truly reﬂect his real so-
cial relations. However, in reality attackers are not fabled.
The exposure of the aforementioned binding exhibits high
potential risk if is abused by attackers.
We propose an approach to reveal the danger of abusing
Address Book Matching in terms of user privacy leakage.
Our method is applicable to any messenger application fea-
tured with Address Book Matching. Speciﬁcally, we achieve
this goal by uploading a forged address book which consist-
s of contact information of a large number of recommend-
ed individuals and randomly chosen phone number owners.
Thus we can obtain all the phone numbers along with corre-
sponding account proﬁles in the response from the applica-
tion server end. Practically, some applications store users’
phone numbers via hashing. However, such protection does
little impact on our method, since Address Book Match-
ing completes the phone number match process in the view
of regular users; phone numbers are stored as plain text in
address book. Our approach totally abuses Address Book
Matching, rather than reading hash values by our eﬀort.
2.2 Information Integration and Analysis
The content and scheme of user proﬁles vary from ap-
plications to applications. The information returned from
one application can give us a set of user proﬁles, while in-
tegration across diﬀerent applications would give us a more
comprehensive user proﬁles.
2.2.1 Horizontal Collaboration
Horizontal collaboration contains two parts: broad union
and deep intersection. Broad union integrates all distinct ac-
counts corresponding to diﬀerent phone numbers, producing
a large set of user proﬁles. Deep intersection aims at digging
more comprehensive information of one single real identity.
The key point behind deep intersection is that phone num-
bers, as globally unique identiﬁers for real identities, might
connect with multiple accounts in diﬀerent applications.
2.2.2 Vertical Penetration
Many large online service providers like Facebook and
Tencent who also produce mobile applications open ID lo-
gin services to other entities. As a result, some applications
(e.g., instant messaging and social networking) share the
same set of login IDs and many of them are also support-
ed by the same vendor. Penetrating applications using the
same login ID is called vertical penetration which can pro-
vides us with more detailed personal information of that ID
than horizontal collaboration, yet at the expense of more
manual work. A case of this will be analyzed and demon-
strated later in Section 4.5.
2.2.3 Consistency and Authenticity Analysis
Applications aim at meeting users’ diﬀerent social need-
s, such as meeting new friends or contacting old friends.
Diﬀerent needs determine users’ diverse proﬁle ﬁlling pat-
terns. Our analysis of the consistency and authenticity tar-
gets at multiple user proﬁles collected from diﬀerent appli-
cations simultaneously.
In terms of consistency, we trust
the ﬁeld value as long as it is consistent across all appli-
cations. For inconsistent ones, a winner-take-all scheme is
employed. For authenticity analysis, particularly in terms
of user name, we use Bai Jia Xing, a database containing
hundreds of most commonly used Chinese surnames with
coverage over 90%, and regular patterns to search for users’
possible oﬃcial names.
2.3 Malicious Usage
In online environment, people tend to trust accounts with
detailed and reasonable-looking proﬁles. However, this com-
mon sense will lead to potential misjudgment if attackers col-
lect a larger number of user proﬁles in an automated way.
Generally, attackers may perform the following operations
by abusing Address Book Matching:
(cid:15) Attackers may obtain users’ proﬁles and the associ-
ated phone numbers. In other words, a link between
real identity and virtual account has been established.
Deeper understanding about the phone number owners
can assist greatly to performing further attacks, such
as cracking user accounts and social engineering.
(cid:15) Attackers, especially spammers, may determine whether
particular phone numbers are in use or not by querying
the server with a list of unidentiﬁed phone numbers.
Meanwhile, with collected information (e.g., gender,
region and hobby), they may also perform contextual-
ly targeted advertising.
(cid:15) Through information integration, comprehensive per-
sonal data can be retrieved, such as school, depart-
ment, working company and etc., with which virtual
network fraud can be carried out readily. In this case,
the more applications users register, the more personal
information will be given away.
(cid:15) Attackers may clone identities leveraging the proﬁles
they obtained. Clone means duplicating identities on
particular applications. The more comprehensive pro-
ﬁles gathered by attackers, the closer the clones are to
real identities.
3. SYSTEM OVERVIEW
In this section, we present the overall system architecture
of abusing Address Book Matching as shown in Figure 1,
then we elaborate the abusing method and implementation
details.
336tions, meaning that we do not need to make modiﬁcations for
various applications. Instead, we just need to monitor each
Android API the application invokes. Therefore, we monitor
the APIs called by target applications which are responsible
for handling user proﬁles. The monitor logs down user pro-
ﬁle related data in real-time and in raw format, which will be
post-processed for further analysis. Besides, for scalability
purpose, we leverage ADB shell commands to automatical-
ly process the activity change by recording the motion and
replaying it till the collection is done.
4. EXPERIMENT AND DATA ANALYSIS
In this section, we show our experiments and data analysis
results. We ﬁrst make some ethical considerations to prevent
our method from being misused as best as we can.
4.1 Ethical Considerations
Our experiments randomly forge an address book and col-
lect corresponding user proﬁles from messenger application-
s, which may bring about ethical and legal issues, similar
with the cases in [9, 3]. However, this is the most eﬃcient
and eﬀective way to conduct our experiments since 1) other
methods like survey always suﬀer from inﬂating user con-
cerns about privacy [6], by directly asking questions about
privacy; 2) Comparatively, empirical experiments are more
reliable. The collected data could reﬂect situations in the re-
al world which are more convincing; 3) We carefully design
experiments to avoid privacy issues, insuring the following
principles fulﬁlled: a) The collected user data will never ﬂow
out of our experiment devices or be provided to any other
irrelevant individual or organization; b) We will never per-
form any further penetration attempt to any account, except
for proving our idea in this paper.
4.2 Single Application Analysis
We choose WeChat (Version 4.2 for Android), an afore-
mentioned popular mobile messenger application with Ad-
dress Book Matching, as our object to conduct the experi-
ments.
Phone numbers in mainland China consist of 11 digits, not
including two digits Mainland China Country Code (+86).
We forge a list of 100,000 contacts of two separate continu-
ous phone number segments, i.e., +861521063 - +861521070
and +861521098 - +861521099. After binding our test phone
number to a newly applied WeChat account, Address Book
Figure 2: The Distribution of Active Phone Num-
bers Across all the Segments
Figure 1: System Architecture
3.1 Method
Our method performs in three phases, i.e., address gen-
eration, information collection and data analysis which re-
spectively achieve for forging address book, collecting infor-
mation from the return list and correlating data for analysis.
Address Generation. This phase is to automatically
generate lists of target phone numbers. Attackers typically
enumerate all the interested phone numbers. The output
of this phase will be used as input for querying target ap-
plication servers; thus it should be formatted as a standard
contact for compatibility.
Information Collection. We feed above mentioned con-
tact lists to target applications via Address Book Matching.
Applications then return a list of users within the contact
lists, each of which has already registered an account and
bound phone number with this account. Information Col-
lector handles all user data returned from the applications.
The implementation details are discussed in Section 3.2.
Data Analysis. This phase focuses on understanding
the data obtained by previous phases more deeply. Our
analysis includes two parts, i.e., single-application analysis
and cross-application integration (see Section 4).
3.2 Implementation
This section elaborates the implementation of our system,
particularly Information Collector. Diﬀerent from crawl-
ing webpages, collecting user proﬁles from mobile devices
is more complicated. The access to application data is of-
ten protected by mobile systems from other applications or
processes for security purpose. We choose Android as the
platform to build our prototype. At kernel level, each ap-
plication has a low-privilege user ID and runs in its own
process. At Android system level, when runs, each Android
application is isolated by the Dalvik VM. The permission
policies provided by Android system prevent application-
s from abusing each other’s components, which makes our
collection more complicated as the components of target ap-
plication are not directly accessible.
To tackle this issue, we ﬁnally decide to monitor the An-
droid APIs because: 1) local application database is often
encrypted as well as the network traﬃc, however, decryption
itself is an already hard problem with high cost; 2) hijack-
ing the Intent is unworkable as the huge Intent messages are
hard to target. Also, using Intent to deliver user informa-
tion is not always the best choice for application developers;
3) modifying target applications to log down user data can
avoid the decryption. However, this approach is subject to
scalable problem since we need to rewrite speciﬁc modules
for diﬀerent applications, which is tedious and pleonastic.
In fact, the Android framework wraps Linux system calls as
specialized APIs for easily creating rich and novel applica-
ApplicationsAndroid FrameworkLibrariesLinux KernelDalvik VMInformation CollectorUser InformationTarget AppAddress BookAddress Book ForgerList of Phone NumbersList of Phone NumbersData Analyzer153114691390146316031449148601936185205001000150020002500#(cid:3)distinct(cid:3)phone(cid:3)numbersPhone(cid:3)number(cid:3)segments337Matching component of WeChat is activated. Upon upload-
ing the forged address book to the server, WeChat begins to
recommend all the accounts that already have been bound
with phone numbers in the address book. As mentioned
in Section 3.2, we modiﬁed Android system to monitor and
record all the APIs speciﬁed to text and image display, thus
we send a sequence of ADB shell “sendevent” commands to
the simulator to start an ADB motion simulation which im-
itates a sequence of user behaviors of browsing the contacts
proﬁle. Finally, we succeed to obtain all ﬁelds of WeChat us-
er proﬁles via Address Book Matching, they are WeChat ID,
display name, phone number, gender, region, and “what’s
up”. Generally, display name is close to the user’s real name,
as the display name is meant for identiﬁcation by real world
friends.
In the following step, we conduct a statistic analysis. A-
mong 100,000 phone numbers, overall 14,179 registered user-
s are matched (denoted as W ), thus the user penetration