tocols to issue, revoke, prove possession of credentials, etc. One
key feature for ensuring anonymity is that users can selectively
reveal certain identity attributes without disclosing anything else.
In the Idemix system [21] this goal is realized using Camenisch-
Lysyanskana (CL) signatures [18]. Informally, such a signature on
two messages m1, m2 consists of integers e, v and A ∈ Z∗
n satisfy-
ing Z = Rm1
2 SvAe, where R1, R2, S, Z are public quadratic
residues modulo n, and n is a strong RSA modulus (i.e., n = pq
where p, q, (p − 1)/2 and (q − 1)/2 are all prime).
1 Rm2
Assume now that a user holds a signature on his name m1 and his
birthdate m2. Now, when authenticating to a server, the user may
be willing to reveal his name but not his birthdate. On the other
hand, he is required to show that he was born after some date b to
get student discount. To achieve authentication agreeably to both
parties, the user will reveal m1 and A, and then give a ZK-PoK
that he knows m2, e, v such that (e, v, A) is a valid CL-signature
on (m1, m2). Using the standard notation for ZK-PoK [20], this
goal G is formally stated as:
ZPKh (m2, v, e) :
Z
Rm1
1
= Rm2
2 SvAe ∧ m2 ≥ bi
(1)
The convention in the formulation above is that knowledge of all
values before the colon has to be proved, while all other values are
assumed to be publicly known. Note that the ﬁrst conjunct shows
possession of a valid CL-signature on m1, m2, and the second con-
junct shows that m2 ≥ b, as required by the server policy.
ZKCrypt generates an optimized implementation of a ZK-PoK
and machine-checkable proofs that it satisﬁes the relevant security
properties. We give below an overview of the compilation process.
Resolution. ZKCrypt resolves the above proof goal G to the fol-
lowing goal Gres:
ZPKh (e, m2, v, r∆, u1, u2, u3, u4, r1, r2, r3, r4, α) :
2 ∧ T∆Z b = Zm2 Sr∆ ∧
= AeSvRm2
Z
Rm1
1
4
^i=1
Ti = Z ui Sri ∧ T∆ = T u1
1 T u2
2 T u3
3 T u4
4 Sαi
The ﬁrst conjunct is obtained by unfolding the deﬁnition of the CL
predicate, making explicit the groups elements Z and S used in
the signature. The remaining conjuncts are obtained by applying
Lipmaa’s technique [40] to resolve the goal m2 ≥ b into equalities
between exponentiations of Z and S. This compilation step and
the formal veriﬁcation of its correctness are described in detail in
§4. In short, we formalize the sufﬁcient conditions for correctness
based on a procedure Translate for turning a witness for G into a
witness for Gres and a procedure Recover for computing a witness
for Gres from a witness for G.
Veriﬁed compilation This phase outputs a reference implementa-
tion Iref in the embedded language of CertiCrypt. This is done in
two steps: ﬁrst, ZKCrypt extends the base language of CertiCrypt
by specifying and deﬁning the necessary algebraic constructions,
e.g., the underlying group with its operations and generators. Sec-
ond, the compiler instantiates a CertiCrypt module for Σ-protocols
with the resolved goal Gres expressed using a single homomorphism
490Φ. In the use case we present, Φ is deﬁned as:
Φ (e, m2, v, r∆, u1, u2, u3, u4, r1, r2, r3, r4, α)
.
=
i=1 T ui
(cid:0)AeSvRm2
2
i (cid:1)
, Zm2 Sr∆ , Z u1 Sr1 , . . . , Z u4 Sr4 , Sα Q4
This instantiation yields a reference implementation Iref of a ZK-
PoK protocol, comprising four procedures that represent the com-
putations performed by each party during a run of a Σ-protocol.
Each procedure consists of either a random assignment followed
by a deterministic assignment, or just a deterministic assignment.
The completeness, proof of knowledge, and honest veriﬁer zero-
knowledge (HVZK) properties of Iref are a direct consequence of
generic proofs in CertiCrypt.
Interestingly, statistical HVZK is
established using an approximate version of the Probabilistic Rela-
tional Hoare Logic of CertiCrypt, which has been recently devel-
oped for different purposes [9].
Implementation This phase outputs a representation Iopt that can
be used for code generation. Contrary to the reference implemen-
tation, Iopt does not adhere to a constrained shape; in particular,
it uses long sequences of instructions and branching statements.
Also, algebraic expressions are re-arranged in order to enable opti-
mizations during code generation. The equivalence of Iopt and Iref
is proved in two steps. First, ZKCrypt builds a representation of
Iopt in the embedded language of CertiCrypt. It then generates a
proof that Iopt satisﬁes the relevant security properties, by establish-
ing that each algorithm in the protocol is observationally equivalent
to the matching algorithm in the reference implementation.
By glueing together the correctness proofs of the different
phases, one obtains the end-to-end guarantee that Iopt is a correct
implementation of a ZK-PoK for G.
3. ZERO-KNOWLEDGE PROOFS
In the remainder, we denote deterministic assignments by y ←
f (x), and uniformly random assignments by x $← A, where A may
be a set or a randomized algorithm.
All ZK proofs generated by ZKCrypt are Σ-protocols:
DEFINITION 1
(Σ-PROTOCOL). Let R denote a binary rela-
tion, (x, w) ∈ R, and let P1, P2, and V denote arbitrary algo-
.
= P(x, w) and a prob-
rithms. A protocol between a prover P
.
= V(x) is called a Σ-
abilistic polynomial-time (PPT) veriﬁer V
protocol with challenge set C = {0, . . . , c+–1}, if it satisﬁes the
following conditions.
3-move form. The protocol is of the following form:
• P sets (r, st) $← P1(x, w) and sends r to V;
• V sends a random challenge c $← C to P. We refer to the
algorithm that samples the challenge as Vc;
• P sends s ← P2(x, w, st, c) to the veriﬁer;
• V accepts if V(x, r, c, s) = true, otherwise V rejects.
Completeness. For an honest prover P, the veriﬁer V accepts on
common input x, whenever (x, w) ∈ R.
Every triple (r, c, s) for which V(x, r, c, s) = true is called an
accepting conversation.
Informally, a two-party protocol is a proof of knowledge if from
every successful (potentially malicious) prover P ∗, a witness can
be extracted within a certain time bound by a knowledge extractor
algorithm. For all practically relevant Σ-protocols, the knowledge
extractor works in two phases. First, using rewinding black-box
access to P ∗, two accepting conversations (r, c, s) and (r, c′, s′)
are extracted. Then, in a second step, a witness is computed from
these conversations. The ﬁrst part of the knowledge extractor is
well-known to work for arbitrary Σ-protocols [26]. ZKCrypt does
not include a formalization of the proof of this part of the knowl-
edge extractor, as this would imply formalizing rewinding argu-
ments and reasoning about expected polynomial time executions,
which are currently out of reach of formal veriﬁcation tools such as
CertiCrypt. The second phase of extraction only works only under
certain conditions, which are formalized next:
DEFINITION 2
(GENERALIZED SPECIAL SOUNDNESS).
A Σ-protocol satisﬁes generalized special soundness for a relation
R′, if there is a PPT extractor that, on input a relation R $← R(1λ),
a value x in the language deﬁned by R, and any two accepting con-
versations, (r, c, s) and (r, c′, s′) satisfying R′, computes a witness
w satisfying R(x, w) with overwhelming probability.
Observe that a Σ-protocol satisfying this deﬁnition is a proof of
knowledge for R if the conversations extracted by the ﬁrst phase of
the knowledge extractor satisfy R′.
Deﬁnition 2 is a generalization of the classical notion of special
soundness found in the literature, e.g., Cramer [24], and enables a
uniform formalization of the proof of knowledge property for all
Σ-protocols supported by ZKCrypt. Following this approach we
extend the modularization of the proof of knowledge property that
is well-known for other Σ-protocols, so that we can treat ΣGSP-
protocols in a similar way.
Roughly, the special extractor algorithm can only recover a valid
witness if the accepting conversations display speciﬁc properties
captured by relation R′. Furthermore, in some cases, the existence
of an algorithm that is able to extract these conversations relies on a
computational assumption. To account for this, following Damgård
and Fujisaki [27], we allow relation R to be sampled using an efﬁ-
cient algorithm R. We will detail R and R′ for each concrete in-
stance of a Σ-protocol later2. The implication for our formalization
approach is that the soundness of the protocols veriﬁed by ZKCrypt
is guaranteed, provided that the relations are sampled from the dis-
tribution generated by the prescribed algorithm R.
The proof of knowledge property ensures a veriﬁer that a con-
vincing prover indeed knows the secret. On the other hand, the
veriﬁer should not be able to deduce any information about this
witness. This is captured by the zero-knowledge property. In the
following, we denote by viewP
V (x) the random variable describing
the content of the random tape of V and the messages V receives
from P during a successful protocol run on common input x.
DEFINITION 3
(HONEST VERIFIER ZERO KNOWLEDGE).
A protocol (P, V) is perfectly (resp. statistically) honest-veriﬁer
zero-knowledge (HVZK), if there exists a PPT simulator S such
that the distribution ensembles {S(x)}x and {viewP
V (x)}x are
perfectly (resp. statistically) indistinguishable, for all inputs x in
the language of R.
Note that this deﬁnition only gives guarantees against veriﬁers
that do not deviate from the protocol speciﬁcation. Security against
arbitrarily behaving veriﬁers can be realized using the Fiat-Shamir
heuristic [29] to make the protocol non-interactive, which is also
supported by our compiler (although, as we will explain later, this
is currently outside of the scope of the veriﬁcation back-end).
The ΣGSP-protocol. Most practical applications of ZK-PoKs are
proofs for pre-images under a group homomorphism φ : G → H.
Depending on whether G is ﬁnite or G ≃ Z, (typically) either the
Σφ-, the Σexp-, or the ΣGSP-protocol is used [2]. In the following
2For the completeness and zero-knowledge properties, we quantify
over all relations R in the range of R.
491we recapitulate the ΣGSP-protocol, which is central for understand-
ing the remainder, as it is used for the running example. All the
mentioned techniques are also incorporated in ZKCrypt.
The so called Generalized Schnorr Protocol (ΣGSP-protocol) can
be used to prove knowledge of pre-images under arbitrary exponen-
tiation homomorphisms, in particular including such with a hidden-
order co-domain. That is, it can be used for mappings of the form:
φ : Zm → H : (w1, . . . , wm) 7→  m
Yi=1
gwi
1i , . . . ,
gwi
ui! .
m
Yi=1
In the protocol, an upper bound Ti on the absolute value of each
wi needs to be known. These values can be chosen arbitrarily
large, and required to assert that the protocol is (statistically) zero-
knowledge for wi ∈ [−Ti, Ti]. The protocol ﬂow and the parties’
algorithms are given in Figure 2, where ℓ is a security parameter.
P(x, (w1, . . . , wm))
V(x)
$←[−2Tic+2ℓ, 2Tic+2ℓ], 1 ≤ i ≤ m
ki
r ← φ(k1, . . . , km)
-
r
c

c $← C = {0, . . . , c+ − 1}
si ← ki + c(wi + Ti), 1 ≤ i ≤ m
s1, . . . , sm
-
= φ(s1 − cT1, . . . , sm − cTm)
?
∈ [−2Tic+2ℓ, 2Tic+2ℓ + 2Ti(c+ − 1)], 1 ≤ i ≤ m
rxc ?
si
Figure 2: Protocol ﬂow of the ΣGSP-protocol.
The ΣGSP-protocol is statistically HVZK for arbitrary values of
c+ (the simulation error is upper-bounded by m/2ℓ).
Concerning generalized special soundness, the relation genera-
tor R picks a group H in which the generalized strong RSA as-
sumption [30] holds (i.e., given x $← H, it is hard to ﬁnd (w, e) ∈
H × Z \ {−1, 0, 1} such that x = we), and deﬁnes:
R(x, (µ, w))
.
= x = µφ(w) ∧ µd = 1,
Here, φ is as before, the gij are generators of a large subgroup of
H with hidden order such that all relative discrete logarithms (i.e.,
all loggij
guv) are unknown to P, and d is the product of all primes
smaller than c+ dividing ord H.
The relation R′ is deﬁned as follows:
R′((r, c, s), (r, c′, s′))
.
= (c − c′)|(s − s′) .
It can be shown [27] that the conversations extracted in the ﬁrst step
of the knowledge extractor satisfy R′ with overwhelming probabil-
ity, given that H satisﬁes the generalized RSA assumption and φ
is deﬁned as above. Thus, the ΣGSP-protocol satisﬁes Deﬁnition 2
and is a ZK-PoK for R′.
For instance, if n = pq is sampled as a strong RSA modulus,
H = Z∗
n and the gij all generate the quadratic residues modulo
n, we get d = 4 and knowledge of a pre-image is proved up to a
fourth root of unity.
In practice one often has to prove
Combination of proof goals.
knowledge of multiple, or one out of a set of secret values in one
step. This can be achieved by so-called And- and Or-compositions
[25]. To support our description of the Idemix example in the rest
of the paper we only require And-compositions of ΣGSP-protocols
for homomorphisms φ1, . . . , φn. This can be realized by running a
single ΣGSP-protocol for the homomorphism φ = φ1 × · · · × φn.
4. GOAL RESOLUTION
ZKCrypt generates implementations for arbitrary Boolean And-
and Or-compositions of pre-image proofs under homomorphisms
and claims on the size of secrets. That is, besides claims on the
knowledge of pre-images also terms of the form w ∈ [L, R] for
secret w and public L, R ∈ Z are supported natively.
The ﬁrst compilation step consists of rewriting all semantic ex-
pressions to pre-image proofs, i.e., every term w ∈ [L, R] is rewrit-
ten to a proof speciﬁcation of the following form [38, 40]:
ZPKh(w, r, w1, . . . , w8, r1, . . . , r8, rw, rL, rR) :
8
xw = gwhrw ∧
xi = gwi hri ∧
^i=1
8
Yi=5
xwi
i hrwi .
(2)
xwg−L =
i hrL ∧ gRx−1
xwi
w =
4
Yi=1
Here, g and h are both random generators of a group of hidden
order (e.g., the quadratic residues modulo a strong RSA modulus
n). Further, logg h and logh g must be hard to compute. If such a
group is already used in the original proof goal, it may be reused.
4.1 A Cryptographic Perspective
We next describe how ZKCrypt deals with the formal veriﬁca-
tion of the goal translation stage.
The starting point in the goal resolution procedure is a (high-