for all the attack labels assigned by TARDIS. Recall
that the assignment of these labels is described in
Table III. Columns 2 through 8 show the number of
websites marked as compromised by TARDIS for each
CMS. A reading from Row 4 of Table VII can be
interpreted as follows: After running TARDIS on a total
of 295,774 WordPress websites in our dataset, it found
13,317 compromised websites with code generation
capability. Lastly, Row 9 in Table VII presents the total
number of compromises from each CMS for comparison.
From Table VII, it is evident that the code generation
capability is the most common tactic, seen in more 70%
of all attacks, regardless of the underlying CMS. From
Row 1 of this table, we see that it is not common to
identify the establish foothold label in all CMSs, mainly
due to the nature of our dataset. However, when
identiﬁed,
conﬁrms a
multi-stage attack. It is also interesting to note that
more than 20% of all such attacks attempt to clean up
their
traces after accomplishing the attack motive.
However, not all multi-stage attacks actively hide their
presence. As seen from Row 5 of Table VII, more than
60% of compromised WordPress websites try to evade
defenses by following the popular hidden ﬁle/directory or
the disguised ﬁle approaches. Conversely, the popular
defense evasion techniques are not widely seen in
compromised websites belonging to other CMSs. This
could be attributed to the less-technical nature of the
website owner due to which the adversaries do not spend
resources on active hiding during the attack.
these attacks
(8%) use
obfuscation techniques to make it harder for the website
owners to reverse engineer the injected code. Since the
hosted websites cannot be taken down immediately upon
detecting any traces of suspicious activity, by the time
A signiﬁcant portion of
is a robust metric
it
that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1165
TABLE VII: Attack Phase Distribution Across the 306, 830 Websites.
Phases
Establish Foothold
Obf. Code Injection
Malware Dropped
Code Gen. Capability
Defense Evasion
Escalate Privileges
Maintain Presence
Attack Cleanup
Total Number of
Compromised Websites
WordPress Drupal
3
19
141
188
79
72
27
53
215
339
1,629
7,223
13,317
12,491
12,078
1,704
3,795
19,260
Joomla PivotX Prestashop TYPO3
CMS
0
0
0
4
0
4
0
0
4
34
29
528
510
63
55
45
123
563
0
1
11
27
0
17
1
6
27
1
0
80
86
0
6
0
6
86
Contenido Contao
0
0
0
0
0
0
0
0
0
22
39
265
420
181
176
37
84
436
incident response can understand the obfuscated code,
the adversary would have completed reconnaissance in
the websites (as presented in Figure 4), achieved their
goals, and moved towards attack cleanup.
C. Compromise Window
The most important ﬁnding from this dataset was the
length of compromise in CMS-based websites. Once
attacked, multi-stage attacks persist in the websites for
long periods of time. Figure 4 shows the compromise
window distribution from the TARDIS output for each
of the compromised CMSs. Note that this is a truncated
version of the box plot to improve readability. Not shown
in this ﬁgure: More than 20% of attacks on WordPress
websites persist between 300 to 1694 days. As seen from
Figure 4, most attacks in WordPress websites persist for
around 40 days, as is evident from the median of the
box-plot
the median
length of the attacks is longer in Joomla and PivotX in
the range of 75 to 85 days. In more than 4000 WordPress
these attacks persist anywhere between 3
websites,
months and 4.5 years.
It is the multi-stage attacks
belonging to this quartile (top 25%) that pose the most
signiﬁcant threat to website visitors: The dropped ﬁles
simply lurk in the websites, many of which aim to
exploit website visitors.
for WordPress.
In comparison,
Among all CMSs, an average multi-stage attack
for 3 months on an
for websites that use more popular
persists the longest in Joomla,
average. Further,
Fig. 4: Compromise window distribution in CMSs
(truncated to 300 days).
7
4
7
0
0
0
1
0
19
17
4
7
0
0
0
1
0
29
AV
Alerts2 Rollbacks3 Reinfects4
52
9
28
0
0
0
2
0
91
TABLE VIII: Eﬀectiveness of the Current Industry Attack
Mitigation Framework.
Infected
Websites1
19,260
215
563
27
86
4
436
0
20,591
CMS
WordPress
Drupal
Joomla
PivotX
Pretashop
TYPO3
Contenido
Contao
Total
1: # of websites compromised for each CMS, 2: # of websites
with AV alerts, 3: # of websites with attempted rollbacks,
4: # of websites with reinfections after the rollbacks.
CMSs such as WordPress, Joomla, and Drupal, the
attacks likely persist longer since the adversaries see a
wider opportunity base and get a better return on the
investment of
less
popular CMSs, TYPO3 CMS and Prestashop, are not
only targeted less by persistent attacks, but those attacks
also do not persist for as long. This can be attributed to
the higher opportunity cost and lower
for
targeting an attack toward less popular CMSs.
D. Existing Attack Mitigation Framework
resources. Conversely,
returns
their
the
Recall,
the current
record the number
industry standard is a naive
“backup and restore” model
in conjunction with an
integrated AV. Once a compromise is detected by the
AV, the website owners are prompted to rollback to a
previous clean snapshot. We extracted the AV reports for
the dataset of 306, 830 websites and instrumented
TARDIS to
of user-initiated
rollbacks and reinfections post rollback. The results are
presented in Table VIII. Note that TARDIS has no
knowledge of the AV reports and relies only on its attack
models for timeline reconstruction. Table VIII shows
that AVs are ineﬀective in identifying almost all infected
websites thus reaﬃrming our claim that AV signatures
only catch well-known malware, and they fail to detect
stealthy multi-stage attacks.
Columns 1 and 2 present the CMS platforms and the
from each CMS.
compromised websites
number of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1166
Column 3 shows the number of infected websites from
each CMS that triggered AV alerts. Column 4 presents
the number of websites with AV alerts that attempted to
rollback to a previous version in order to mitigate the
threat identiﬁed by the AV. Column 5 presents the
number of websites
that attempted rollbacks and
remained infected or were reinfected. As expected, the
distribution of the AV alerts and the rollbacks reﬂect the
market share of the CMSs in CodeGuard’s production
set, which we consider representative of CMSs at large.
Rollbacks. As presented in Table VIII, we ﬁnd it
extremely concerning that among the 20,591 websites
identiﬁed as compromised with long-lived multi-stage
attacks by TARDIS, only 91 websites see AV alerts.
More so, because the website owners are alerted to
rollback to a clean snapshot only when an AV alerts the
website owner about a suspicious activity. This low
number of AV alerts (i.e.
less than 1% of the total
number of compromises) is the reason why the “backup
and restore” model is proving to be ineﬀective and these
attacks persist for a signiﬁcant time period.
to recover
the website
Among the 91 websites that trigger AV alerts, not all
of them take action. As seen in Table VIII, only 29 of
these 91 websites attempt a rollback to a pre-AV-alert
snapshot
from the attack.
Moreover, AVs are infamous for generating false alerts
causing threat alert fatigue [24] — another reason why
true AV alerts are ignored, perhaps explaining why only
29 of the 91 websites attempted rollbacks.
Reinfections. As seen from Table VIII, of the 29
websites that attempted rollbacks to recover from an
attack, TARDIS found reinfections in more than 65% of
these websites. We imagine this was quite confusing to
the attacker to ﬁnd the website ﬁles rolled back but their
original backdoors persisted. This conﬁrms the long-held
belief that AVs are unreliable. Not only are they missing
a vast majority of the attacks, but a strong dependence
on AVs is making the existing “backup and restore”
technique largely ineﬀective. These numbers reaﬃrm the
motivation behind TARDIS’s design — the need for a
systematic provenance inference technique in the space of
nightly backups. We hand-veriﬁed the websites with
rollbacks and found that our intuition was correct: In
every case of reinfection, the rollback snapshot was inside
the compromise window (identiﬁed by TARDIS) causing
a reinfection. Of all the compromised websites, only 10
websites managed to rollback outside of the compromise
window, thus remediating the infections. This conﬁrms
that TARDIS’s provenance inference is essential
for
compromised website investigation.
E. Performance
Figure 5 shows the time taken by TARDIS to measure
all the attributes for 306, 830 websites versus the size of
the websites in terms of the number of ﬁles. TARDIS
linearly assesses each temporal snapshot to provide a
Fig. 5: Time to process a CMS backup (seconds) versus
total number of ﬁles in the CMS.
timeline of events and event labels for the entire website
with acceptable overhead. While this overhead scales
with the number of ﬁles in the website (regardless of the
size of these ﬁles), the increase is minimal as is seen from
the gradual slope of the plot in Figure 5. The worst-case
for TARDIS,
i.e., the maximum time taken, was to
process 1859 snapshots (an average of 100,000 spatial
elements)
is close to 3500s. As an oﬄine forensics
technique, we consider this to be quite reasonable.
VI. Case Study
A. Case Study 1: A Global View of Attack Movement
Beyond the
investigation of
found identical provenance
individual websites,
deploying TARDIS within commercial website backup
platforms [19]–[23] can provide a global view of the
evolution of attack campaigns. During our experiments,
we
evolution across 5
diﬀerent WordPress websites between September and
November 2018. In all of these websites, the adversary
uses similar tactics of disguised obfuscated code injection
( O ) in 28 PHP ﬁles in diﬀerent locations over 5 days,
followed by 83 instances of malware dropped ( M ) to
inject
then maintaining
presence ( P ) for about 2 months, and eventually
attempting attack cleanup ( C ) to remove all traces of
those steps. In each of these cases, the dropped malware
disables all error
logging functionalities and fetches
payloads from a remote server (active at the time of
investigation) which it executes on the victim web server.
It also collects the output buﬀers, sends them back to
the remote server, and ﬁnally re-enables error logging.
These actions were programmed to run every 48 hours.
functionalities,
backdoor
Fig. 6: Global attack movement in WordPress websites.
Interestingly, as shown in Figure 6, each of these
websites exhibited the same attack phase evolution and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:22 UTC from IEEE Xplore.  Restrictions apply. 
1167
(W0697120),
(W1413857) was
in three websites
persistence for the same duration. All of these websites
belong to diﬀerent unique small businesses that just
happen to build their website upon WordPress. Once the
attacked,
ﬁrst WordPress website
another WordPress website
completely
unrelated to the initial website, exhibits the exact same
injection 6 days later. This is followed by 3 other
infections
(W1438887, W1467224,
W1532897) within the next 10 days. In all ﬁve of these
websites, the obfuscated code injection phase lasts for 5
days, malware dropped phase for 1 day, maintain
presence 51 to 56 days, and ﬁnally, the attack is cleaned
up by deleting all the injected ﬁles. Since this attack was
not known to the AV, none of the attacks were ﬂagged
and the website owners did not attempt rollback.
Future Deployment. We are currently working with
CodeGuard to deploy TARDIS at a global level in their
backup framework to detect and track large scale attack
trends. This has required expanding TARDIS to enable
cross-website modeling and correlation.
B. Case Study 2: “User-Friendly” Remote Control
In a Drupal-based website, investigation of the backups
for a 3 month period (Feb 2019 - Apr 2019) revealed the
existence of the following phases.
23 Feb
24 Feb - 3 Mar
4 Mar
6 Mar
7 Mar - 12 Apr
13 Apr
Obfuscated Code Injection
Maintain Presence
Malware Dropped & Defense evasion
Escalate Privileges
Maintain Presence
Attack Cleanup
the attackers
interface
The integrated AV at the backup site never triggered
an alert, keeping the website owner in the dark about the
attack. The compromise window identiﬁed by TARDIS
showed that the adversary injected obfuscated PHP code
starting 23 February 2019 and maintained presence for
the next few days until 3 March 2019. Starting 4 March
2019, the attacker dropped malware and used defense
evasion methods: They disguised a PHP ﬁle as an icon
ﬁle and uploaded a backdoor shell