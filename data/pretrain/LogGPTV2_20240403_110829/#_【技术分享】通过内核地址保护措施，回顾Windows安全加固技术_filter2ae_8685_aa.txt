# 【技术分享】通过内核地址保护措施，回顾Windows安全加固技术
|
##### 译文声明
本文是翻译文章，文章来源：samdb.xyz
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**翻译：shan66**
**预估稿费：200RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投**
**前言**
在2011年的时候，Windows 7 Service Pack
1如日中天，那时我才开始接触编程，而j00ru则发布了一个介绍在用户模式下通过各种方式访问Windows内核指针的白皮书：Windows Security
Hardening Through Kernel Address Protection。
我决定重新回味一下这篇白皮书中讨论的各种技术，搜罗可用于Windows 7上的相应版本，然后调查它们能否在Windows 8 / 8.1 /
10上奏效。遇到无法在Windows 8 / 8.1 /
10上工作的时候，我会进一步研究相应的函数在新版本的Windows中发生了怎样的变化。这方面的工作，虽然很多都被别人做过了，但通过动手实践，我还是学到了很多东西；同时，作为一个有趣的逆向工程的练习，或许对大家也会有所帮助。
对于每个例子，我都会提供一个可用于Windows 7 32位的实现，然后将其移植到64位Windows，如果发现无法用于新版本的Windows
的话，则说明原来用到的某些特性在新版本操作系统中已经发生了变化。
本文中讨论的每一种技术，在Github上都可以下载到相应的Visual Studio项目。
**Windows System Information classes**
****
NtQuerySystemInformation是一个经典的和众所周知的未公开函数，利用逆向工程的获得的各种细节，人们发现它可以用来收集关Windows内核的状态信息。
它在MSDN上的定义如下：
    NTSTATUS WINAPI NtQuerySystemInformation(
      _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,
      _Inout_   PVOID                    SystemInformation,
      _In_      ULONG                    SystemInformationLength,
      _Out_opt_ PULONG                   ReturnLength
    );
第一个参数是SYSTEM_INFORMATION_CLASS的值，这个值决定返回什么信息。
这些值可以在winternl.h中找到，其他的值也被人通过逆向工程找到了（例如在wine项目实现中就可以找到这些值）。
在j00ru的论文中，他考察了4个枚举值，我们将在后文中单独加以解释。
第二个参数是指向输出数据的结构的指针，它会随着SystemInformationClass值的不同而变化，第三个参数是其长度。
最后一个参数用于返回写入输出结构的数据量。
为了避免为各个SystemInformationClass值重复编码，我将在这里给出实际定义和调用NtQuerySystemInformation的代码。
首先，我们将包含标准的Visual
Studio项目头文件，同时要完整导入Windows.h文件，因为它定义了我们需要用到的许多Windows特有的结构和函数。
    #include "stdafx.h"
    #include 
我们还需要定义NyQuerySystemInformation函数，以便让一个指针指向它，从而便于调用。
    typedef NTSTATUS(WINAPI *PNtQuerySystemInformation)(
        __in SYSTEM_INFORMATION_CLASS SystemInformationClass,
        __inout PVOID SystemInformation,
        __in ULONG SystemInformationLength,
        __out_opt PULONG ReturnLength
    );
最后，我们还需要在ntdll中找到NtQuerySystemInformation函数，方法是获取一个ntdll的HANDLE，然后再其中寻找该函数的地址，然后快速检查它是否已成功找到。
    HMODULE ntdll = GetModuleHandle(TEXT("ntdll"));
    PNtQuerySystemInformation query = (PNtQuerySystemInformation)GetProcAddress(ntdll, "NtQuerySystemInformation");
    if (query == NULL) {
        printf("GetProcAddress() failed.n");
        return 1;
    }
上述代码一旦运行，我们就可以像调用函数一样来查询变量了。
**  
**
**Windows 7 32 bit SystemModuleInformation**
这里介绍的第一个SystemInformationClass值是SystemModuleInformation，当使用此值时，返回当前已经加载到内核空间的地址的所有驱动程序的相关数据，包括它们的名称和大小。
首先，我们需要定义枚举值SYSTEM_INFORMATION_CLASS，稍后我们将其传递给NtQuerySystemInformation，这里其值为11，如下所示。
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemModuleInformation = 11
    } SYSTEM_INFORMATION_CLASS;
接下来，我们需要定义引用SystemModuleInformation时NtQuerySystemInformation会将信息加载到其中的结构。
    #define MAXIMUM_FILENAME_LENGTH 255
    typedef struct SYSTEM_MODULE {
        ULONG                Reserved1;
        ULONG                Reserved2;
        PVOID                ImageBaseAddress;
        ULONG                ImageSize;
        ULONG                Flags;
        WORD                 Id;
        WORD                 Rank;
        WORD                 w018;
        WORD                 NameOffset;
        BYTE                 Name[MAXIMUM_FILENAME_LENGTH];
    }SYSTEM_MODULE, *PSYSTEM_MODULE;
    typedef struct SYSTEM_MODULE_INFORMATION {
        ULONG                ModulesCount;
        SYSTEM_MODULE        Modules[1];
    } SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;
如您所见，SYSTEM_MODULE结构包括ImageBaseAddress、ImageSize和Name字段，这些正是我们感兴趣的东西。为了弄清楚我们需要分配多少内存，我们必须调用NtQuerySystemInformation
SystemModuleInformation枚举值和一个NULL输出指针，这样的话，它就会加载所需的字节数到ReturnLength参数。
     ULONG len = 0;
    query(SystemModuleInformation, NULL, 0, &len);
现在我们知道了需要多少内存，那么就可以分配一个适当大小的SYSTEM_MODULE_INFORMATION结构了，然后，再次调用NtQuerySystemInformation。
     PSYSTEM_MODULE_INFORMATION pModuleInfo = (PSYSTEM_MODULE_INFORMATION)GlobalAlloc(GMEM_ZEROINIT, len);
    if (pModuleInfo == NULL) {
        printf("Could not allocate memory for module info.n");
        return 1;
    }
    query(SystemModuleInformation, pModuleInfo, len, &len);
    if (len == 0) {
        printf("Failed to retrieve system module information.rn");
        return 1;
    }
在检查一切都返回都没有任何错误后，我们就可以使用ModulesCount字段来遍历SYSTEM_MODULE数组，从而打印每个模块的关键细节信息了。
    for (int i = 0; i ModulesCount; i++) {
        PVOID kernelImageBase = pModuleInfo->Modules[i].ImageBaseAddress;
        PCHAR kernelImage = (PCHAR)pModuleInfo->Modules[i].Name;
        printf("Module name %st", kernelImage);
        printf("Base Address 0x%Xrn", kernelImageBase);
    }
构建并运行上述代码，我们将得到以下输出结果。
这个例子的完整代码（包括后面讨论的在64位Windows上运行的版本）可以从Github上面下载。
**SystemHandleInformation**
在j00ru的论文中提到的第二个SystemInformationClass值是SystemHandleInformation，它给出了内核内存中所有进程的每个对象的HANDLE和指针，其中包括所有Token对象。在这里，我们将使用SystemHandleInformation的扩展版本，因为原始版本只给出16位的HANDLE值，这在某些情况下可能是不够的。
首先，我们需要再次定义正确的SYSTEM_INFORMATION_CLASS值。
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemExtendedHandleInformation = 64
    } SYSTEM_INFORMATION_CLASS;
接下来，我们需要定义输出结构（取自Process Hacker，从第1595行开始）。
    typedef struct _SYSTEM_HANDLE
    {
        PVOID Object;
        HANDLE UniqueProcessId;
        HANDLE HandleValue;
        ULONG GrantedAccess;
        USHORT CreatorBackTraceIndex;
        USHORT ObjectTypeIndex;
        ULONG HandleAttributes;
        ULONG Reserved;
    } SYSTEM_HANDLE, *PSYSTEM_HANDLE;
    typedef struct _SYSTEM_HANDLE_INFORMATION_EX
    {
        ULONG_PTR HandleCount;
        ULONG_PTR Reserved;
        SYSTEM_HANDLE Handles[1];
    } SYSTEM_HANDLE_INFORMATION_EX, *PSYSTEM_HANDLE_INFORMATION_EX;
正如您看到的，输出结构包含每个对象的HandleValue和Object字段，它是一个指向对象在内存中的位置的指针。
    typedef struct _SYSTEM_HANDLE
    {
        PVOID Object;
        HANDLE UniqueProcessId;
        HANDLE HandleValue;
        ULONG GrantedAccess;
        USHORT CreatorBackTraceIndex;
        USHORT ObjectTypeIndex;
        ULONG HandleAttributes;
        ULONG Reserved;
    } SYSTEM_HANDLE, *PSYSTEM_HANDLE;
    typedef struct _SYSTEM_HANDLE_INFORMATION_EX
    {
        ULONG_PTR HandleCount;
        ULONG_PTR Reserved;
        SYSTEM_HANDLE Handles[1];
    } SYSTEM_HANDLE_INFORMATION_EX, *PSYSTEM_HANDLE_INFORMATION_EX;
为了使用这个SystemInformationClass值，NtQuerySystemInformation提供了一个奇怪的API，当使用NULL指针调用它时，它不是返回所需的内存，而只是返回NTSTATUS代码0xC0000004。
这是STATUS_INFO_LENGTH_MISMATCH的代码，当为待写入的输出分配的内存不足时，就会返回该代码。为了处理这个问题，我为输出分配了很少的内存，然后不断调用NtQuerySystemInformation，每次将内存量加倍，直到它返回一个不同的状态代码为止。
    ULONG len = 20;
    NTSTATUS status = (NTSTATUS)0xc0000004;
    PSYSTEM_HANDLE_INFORMATION_EX pHandleInfo = NULL;
    do {
        len *= 2;
        pHandleInfo = (PSYSTEM_HANDLE_INFORMATION_EX)GlobalAlloc(GMEM_ZEROINIT, len);
        status = query(SystemExtendedHandleInformation, pHandleInfo, len, &len);
    } while (status == (NTSTATUS) 0xc0000004);
一旦分配了足够的内存，该函数就会成功返回，然后我们就可以像前面介绍的那样来遍历输出，并打印我们感兴趣的值了。
    for (int i = 0; i HandleCount; i++) {
        PVOID object = pHandleInfo->Handles[i].Object;
        HANDLE handle = pHandleInfo->Handles[i].HandleValue;
        HANDLE pid = pHandleInfo->Handles[i].UniqueProcessId;
        printf("PID: %dt", pid);
        printf("Object 0x%Xt", object);
        printf("Handle 0x%Xrn", handle);
    }
构建并运行上述代码，我们将得到以下输出结果。
这个例子的完整代码（包括后面在64位Windows上运行的相应版本）可以从Github上面下载。
**  
**
**SystemLockInformation**
在j00ru的论文中考察的第三个SystemInformationClass值是SystemLockInformation，它返回当前存在于内核内存中的每个Lock对象的详细信息和地址。
同样的，我们首先要定义正确的SYSTEM_INFORMATION_CLASS值。