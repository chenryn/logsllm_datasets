xscode >(1 launchjson > 
Launch Bult-in web server
//使用Intellisense了解相关属性。
Mndo le
是停以查看现有属性的描述。
添加配置...
//敏了解更多信息：请访间：https://go.microsoft.com
"version": "0.2.0",
"configurations*:[
"name": “Listen for Xdebug",
10
"type": “php",
11
"request": "launch",
12
'port": 8777
13
14
16
"type": "php",
17
"request":
"launch",
1819
"progran": "${file}"”,
"cwd": "s{fileDirnane}",
20
"port": 0,
21
22
"runtimeArgs":[
23
修改为之前的端口
添加断点（快捷键F9）后开始调试
运行eDisten for Xdebug
C1
1 launch.json 
8763.php
302.php
# 12321.php X
12321.php html >body
ich Bult-in web server
18
19
if (isset(s_FTLEs[“file]))
Nodejs..
20
添加配置
21
22
echo"上传文作名："，S_FILEs[file"]["name"]，“;
echo
“文件类型：”.sFIues["file]["type"]，“"；
25
26
27
echo
“文件大小不能超过2@M；die；
访问目标调试页面
左侧出现变量即为成功调试
（注意PHPSTUDYApache环境默认有超时限制超时返回HTTP500-IntermalServerError服务器内部
错误）
28
---
## Page 29
运行和调试Listen for Xdebug
C1.c
1 launchjson
8763.php
12321.php >html >  body
11
e=”submit"value="提
> $descriptorspec: array(3)
12
$pipes: uninitialized
13
 array("pipe",
"r"),
$return_value: uninitialized
16
1=>
array("pipe",
"w"),
>Superglobals
17
2 => array("pipe", "w"),
）User defined constants
18
19
if
(isset($_FILEs["file"]))
监视
20
21
22
23
echo“上传文件名：”
echo
“文件类型：”
D
25
echo
“文件大小：
（$ FILES["file"]r"size"]
26
27
echo"文件大小不能超过2eM"；die;
调用堆栈
BREAKPOINT 已暂停
28
{main}
12321.php25:1
29
echo“文件临时存储的位置："。$_FILEs["file"][
30
move_uploaded_file($_FILEs["file"]["tmp_name
31
echo“文件存储在：”
"upload/", explode('.
Apache超时配置
(TODO)
X:\phpstudy_pro\Extensions\Apache*\conf\original\extra\httpddefault.conf
29
---
## Page 30
将用户输入拼接到命令行中执行导致的任意命令执行问题
例子
PHP
复制代码
1
这是一段简单的php代码专门执行ping命令并输出内容
正常输入: /xxx.php?ip=114.114.114.114
执行命令ping -c 1 114.114.114.114
由于ip参数没有任何过滤限制
所以攻击者可以这样输入：/xxx.php?ip=114.114.114.114;whoami
执行命令ping -c 1 114.114.114.114;whoami
这样就可以执行攻击者定义的命令whoami
实际审计时输入常常不会非常简单都有复杂的处理慢慢追踪参数来源
遇到不会的函数可以在PHP手册查找对应的功能
30
---
## Page 31
在审计时遇到输入可控时要检查是否存在escapeshellargescapeshellcmd函数转义或者是其他的处
理方法（如强制类型转换替换字符等）
常见bashshell语法
符号
描述
示例
输入输出重定向
echo abc >1.txt
分号
按照从左到右顺序执行命令
id;whoami;ls
|管道符
将左侧命令的输出作为右侧命
ps =auxlgrep root
令的输入
&&
按照从左到右顺序执行命令只
有执行成功才执行后面的语句
按照从左到右顺序执行命令只
有执行失败才执行后面的语句
一些常见的可以执行系统命令的函数/语法
函数/语法
描述
例子
system
执行命令井输出结果
system(id');
exec
执行命令只可获取最后一行结
exec(id',$a); print_r($a);
果
passthru
同system
passthru(id’);
shell_exec（反引号）
执行命令井返回结果
$a=shell_exec(*id');print_r($a);
$a=’id’;print_r($a);
popen
执行命令井建立管道返回一个
$a=popen("id", "r"); echo
指针使用fread等函数操作指针
fread($a, 2096);
进行读写
proc_open
同popen（进程控制功能更强
见PHP手册
大)
pcntl_exec
执行命令只返回是否发生错误
pcntl_exec('id’);
31
---
## Page 32
将用户输入拼接到PHP代码中执行导致的任意代码执行问题
例子
有些特殊业务使用了eval等代码执行函数
PHP
复制代码
正常输入：？a=9*9
服务器执行echo（9*9）
输出：81
攻击者输入?a=System（whoami)
服务器执行echo（system（whoami');
成功调用system函数执行命令
实际业务中要尽量避免使用eval这种动态执行代码方法必要使用时做好过滤
32
---
## Page 33
函数/语法结构
描述
例子
eval
将传入的参数内容作为PHP代
eval('phpinfo(););
码执行eval不是函数是一种语
法结构不能当做函数动态调用
assert
将传入的参数内容作为PHP代
assert('phpinfo(););
码执行版本在PHP7以下是函
数PHP7及以上为语法结构
preg_replace
当preg_replace使用/e修饰符
echo preg_replace("/e","
且原字符串可控时时有可能执
{${PHPINFO()}","123");
行php代码
call_user_func
把第一个参数作为回调函数调
call_user_func('assert',
用需要两个参数都完全可控才
'phpinfo(););
可利用只能传入一个参数调用
call_user_func_array
同call_user_func可传入一个
call_user_func_array
数组带入多个参数调用函数
('file_put_contents',
['1.txt',6666′]);
 create_function
根据传递的参数创建匿名函
Sf =
数，并为其返回唯一名称利用
create_function(",'system($_
需要第二个参数可控且创建的
GET[123]);); $f();
函数被执行
33
---
## Page 34
将远程/本地文件包含入当前页面的PHP代码并执行详细加载执行原理见PHP7内核剖析
例子
开发人员希望自己写的页面实现更加灵活的加载
PHP|
复制代码
正常输入?page=login.php
PHP 
复制代码
服务器包含并执行pages目录下的login.php
攻击者输入?page=./image/123.jpg
服务器包含并执行pages的上层目录image目录下的123.jpg
该漏洞通常需要参数后半部分可控或者参数完全可控才存在
34
---
## Page 35
注意：当代码运行环境php版本小于5.3.4且php的magic_quotes_gpc为OFF状态时参数在中间拼接也可
利用（CVE-2006-7243）（这是个PHP本身的问题不是代码的问题解决方法：升级PHP）
参数在中间拼接时如果用户仍可向拼接出的文件进行写入则可以利用
如 include(“pages/Sfile.tpl");
假设用户不能上传php文件但可上传tpl文件
可以上传一个tpl文件构造路径包含tpl文件执行php代码
文件包含利用方法
包含上传文件（上传头像图片等）
包含data://php://filter或php://input伪协议（php.iniallow_url_include设置为on）
白响
包含/proc/self/environ（必须是有proc伪文件系统的操作系统比如LINUX）当前进程的环境变量（PHP
会将HTTP头请求URI等信息写入当前进程环境变量）
包含session文件（通常在临时目录下（linux/tmp/）sess_会话iD文件）
PHP间接或直接创建的其他文件比如数据库文件缓存文件应用日志等
35
---
## Page 36
函数/语法结构
描述
例子
include
包含并运行指定文件执行出错
includevars.php'；(括号可有可
会抛出错误
无）
require
同include执行出错会抛出警告
require('somefile.php'); (括号
可有可无）
require_once
同require但会检查之前是否已
经包含该文件确保不重复包含
include_once
同include但会检查之前是否已
经包含该文件确保不重复包含
白帽
36
---
## Page 37
将用户输入拼接到数据库将要执行的SQL语句中导致攻击者可以修改原有执行的SQL语句
例子
PHP
复制代码
1
2
query($sql) ;
if ($result>num_rows > 0){
while($row = Sresult=>fetch_assoc()) {
8
echo "id:"
.$row["id"]."-Name: “
.$row["name"];
9
10 
}else {
11
echo“没有查询到结果"；
12
13
?>
正常请求？id=123
执行SQL
SQL
复制代码
SELECT id, name FR0M uSers WHERE id=123;
攻击者构造请求：?id=123UNIONSELECTname,passwordFROMusers；
执行SQL
37
---
## Page 38
SQL
复制代码
SELECT id, name FROM users WHERE id=123 UNION SELECT name,password FROM
users;
攻击者改变了原有的SQL语句逻辑
常见过滤/防护
addslashes在单引/号（）、双引/号（）、反斜线（）与NUL前加上反斜线可用于防止SQL注入
mysqli:real_escape_string mysqli:escape_string mysqli_real_escape_string
mysql_real_escape_string SQLite3:escapeString
以上函数会在\x0o(NULL），\n，r，，，"和\x1a（CTRL-Z)前加上反斜线并考虑了当前数据库连接字符
集进行处理
注意：经过以上函数处理后的字符串不可直接用于sql查询拼接需要使用引号包裹后拼接到sql语句中否
则仍可导致sql注入
例如上文中的例子攻击者输入并没有使用到引号反斜线逗号可使用其他方法绕过仍可构成SQL注入
防护方法
38
---
## Page 39
PHP
复制代码
1
个
quote($_GET['name*]);
7
/*预处理语句*/
8
$stmt =$pdo->prepare("SELECT id, name FROM users WHERE id=?;");
9
$stmt->execute（[$_GET[id']]）;//简单的预处理完整使用方法见PHP手册
10
?>
PDO:quote转义特殊字符并添加引l号
PDO:prepare预处理SQL语句有效防止SQL注入（推荐）
intval($input) floatval() floatval() floor() (int)$input num+0
将输入强制转换为整数/浮点用于整数/浮点类型的输入参数处理可防止SQL注入
一些执行SQL语句的函数
39
---
## Page 40
函数/方法
备注
mysql_query
odbc_exec
mysqli_query
mysql_db_query
mysql_unbuffered_query
mysqli:query
用法
$mysqli = new mysqli"localhost", “my_user",
(Ppμom, .puomssedAu
$mysqli>query();
pg_query
pg_query_params
pg_send_query
pg_send_query_params
sqlsrv_query
pdo:query
PDO
$pdo=new
PDO("mysql:host=localhost;dbname=phpdem
o","root","1234"); $pdo=>query($sql);
SQLite3::query
SQLite3:exec
$db = new SQLite3('mysqlitedb.db'); $db
>query('SELECT bar FROM foo'); $db-
>exec('CREATE TABLE bar (bar STRING)’);
40
---