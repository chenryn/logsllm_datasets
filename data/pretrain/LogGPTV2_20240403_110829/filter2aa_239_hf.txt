      }
      // PUT api/bookchapters/guid
      [HttpPut("{id}")]
      public async Task PutBookChapterAsync(
        string id, [FromBody]BookChapter chapter)
      {
        if (chapter == null || id ! = chapter.Id)
        {
    return BadRequest();
        }
        if (await _repository.FindAsync(id) == null)
        {
    return NotFound();
        }
        await _repository.UpdateAsync(chapter);
        return new NoContentResult();
      }
      // DELETE api/bookchapters/guid
      [HttpDelete("{id}")]
      public async Task DeleteAsync(Guid id)
      {
      await _repository.RemoveAsync(id);
    }
  }
对于客户端来说，控制器实现为同步还是异步并不重要。客户端会为这两种情形创建
相同的HTTP请求。
42.4 创建.NET客户端
使用浏览器调用服务是处理测试的一种简单方法。客户端常常使用JavaScript（这是
JSON的优点）和.NET客户端。本书创建一个控制台应用程序（包）项目来调用服务。
BookServiceClientApp的示例代码使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Newtonsoft.Json
    System.Net.Http
    System.Xml.XDocument
名称空间
    Newtonsoft.Json
    System
    System.Collections.Generic
    System.Linq
    System.Linq.Xml
    System.Net.Http
    System.Net.Http.Headers
    System.Text
    System.Threading.Tasks
    static System.Console
42.4.1 发送GET请求
要发送GET请求，应使用HttpClient类。这个类在第25章有介绍。在本章中，这个类
用来发送不同的HTTP请求。要使用HttpClient类，需要添加NuGet包System.Net.Http，打
开名称空间System. 
Net.Http。要将JSON数据转换为.NET类型，应添加NuGet包
Newtonsoft.Json。
  注意： JSON序列化和使用JSON.NET的内容参见第27章。
在示例项目中，泛型类HttpClientHelper创建为对于不同的数据类型只有一种实现方
式。构造函数需要服务的基地址（代码文件BookServiceClientApp/HttpClientHelper.cs）：
    public abstract class HttpClientHelper
    where T: class
    {
    private Uri _baseAddress;
    public HttpClientHelper(string baseAddress)
    {
      if (baseAddress == null)
        throw new ArgumentNullException(nameof(baseAddress));
      _baseAddress = new Uri(baseAddress);
    }
    // etc.
    }
方法GetInternalAsync发出一个GET请求来接收一组项。该方法调用HttpClient的
GetAsync方法来发送GET请求。HttpResponseMessage包含收到的信息。响应的状态码写
入控制台来显示结果。如果服务器返回一个错误，则GetAsync方法不抛出异常。异常在方
法EnsureSuccessStatusCode中抛出，该方法在返回的HttpResponseMessage实例上调用。如
果HTTP状态码是错误类型，该方法就抛出一个异常。响应体包含返回的JSON数据。这个
JSON信息读取为字符串并返回（代码文件BookServiceClientApp/HttpClientHelper.cs）：
    private async Task GetInternalAsync(string requestUri)
    {
      using (var client = new HttpClient())
      {
        client.BaseAddress = _baseAddress;
        HttpResponseMessage resp = await client.GetAsync(requestUri);
        WriteLine($"status from GET {resp.StatusCode}");
        resp.EnsureSuccessStatusCode();
        return await resp.Content.ReadAsStringAsync();
      }
    }
服务器控制器用GET请求定义了两个方法：一个方法返回所有章，另一个方法只返回
一个章，但是需要章的标识符与URI。方法GetAllAsync调用GetInternalAsync方法，把返
回的JSON信息转换为一个集合，而方法GetAsync将结果转换成单个项。这些方法声明为
虚拟的，允许在派生类中重写它们（代码文件
BookServiceClientApp/HttpClientHelper.cs）：
    public async virtual Task GetAllAsync(string requestUri)
    {
      string json = await GetInternalAsync(requestUri);
      return JsonConvert.DeserializeObject>(json);
    }
    public async virtual Task GetAsync(string requestUri)
    {
      string json = await GetInternalAsync(requestUri);
      return JsonConvert.DeserializeObject(json);
    }
在客户端代码中不使用泛型类HttpClientHelper，而用BookChapterClient类进行专门的
处理。这个类派生于HttpClientHelper，为泛型参数传递BookChapter。这个类还重写了基
类中的GetAllAsync方法，按章号给返回的章排序（代码文件
BookServiceClientApp/BookChapterClient.cs）：
    public class BookChapterClient: HttpClientHelper
    {
      public BookChapterClient(string baseAddress)
      : base(baseAddress) { }
      public override async Task> GetAllAsync(
        string requestUri)
      {
        IEnumerable chapters = await base.GetAllAsync(requestUri);
        return chapters.OrderBy(c => c.Number);
      }
    }
BookChapter类包含的属性是用JSON内容得到的（代码文件
BookServiceClientApp/BookChapter.cs）：
    public class BookChapter
    {
      public Guid Id { get; set; }
      public int Number { get; set; }
      public string Title { get; set; }
      public int Pages { get; set; }
    }
客户端应用程序的Main方法调用不同的方法来显示GET、POST、PUT和DELETE请
求（代码文件BookServiceClientApp/Program.cs）：
    static void Main()
    {
      WriteLine("Client app, wait for service");
      ReadLine();
      ReadChaptersAsync().Wait();
      ReadChapterAsync().Wait();
      ReadNotExistingChapterAsync().Wait();
      ReadXmlAsync().Wait();
      AddChapterAsync().Wait();
      UpdateChapterAsync().Wait();
      RemoveChapterAsync().Wait();
      ReadLine();
    }
ReadChaptersAsync方法从BookChapterClient中调用GetAllAsync方法来检索所有章，
并在控制台显示章的标题（代码文件BookServiceClientApp/Program.cs）：
    private static async Task ReadChaptersAsync()
    {
      WriteLine(nameof(ReadChaptersAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      IEnumerable chapters =
        await client.GetAllAsync(Addresses.BooksApi);
      foreach (BookChapter chapter in chapters)
      {
      WriteLine(chapter.Title);
    }
    WriteLine();
  }
运行应用程序（启动服务和客户端应用程序）, 
ReadChaptersAsync方法显示了OK状
态码和章的标题：
    ReadChaptersAsync
    status from GET OK
    Application Architectures
    Core C#
    Objects and Types
    Inheritance
    Managed and Unmanaged Resources
    Generics
ReadChapterAsync方法显示了GET请求来检索单章。这样，这一章的标识符就被添加
到URI字符串中（代码文件BookServiceClientApp/Program.cs）：
    private static async Task ReadChapterAsync()
    {
      WriteLine(nameof(ReadChapterAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      var chapters = await client.GetAllAsync(Addresses.BooksApi);
      Guid id = chapters.First().Id;
      BookChapter chapter = await client.GetAsync(Addresses.BooksApi + id);
      WriteLine($"{chapter.Number} {chapter.Title}");
      WriteLine();
    }
ReadChapterAsync方法的结果如下所示。它显示了两次OK状态，因为第一次是这个
方法检索所有的章，之后发送对一章的请求：
    ReadChapterAsync
    status from GET OK
    status from GET OK
    1 Application Architectures
如果用不存在的章标识符发送GET请求，该怎么办？具体的处理如
ReadNotExistingChapterAsync方法所示。调用GetAsync方法类似于前面的代码段，但会把
不存在的标识符添加到URI。在HttpClientHelper类的实现中，HttpClient类的GetAsync方法
不会抛出异常。然而，EnsureSuccessStatusCode会抛出异常。这个异常用
HttpRequestException类型的catch块捕获。在这里，使用了一个只处理异常码404（未找
到）的异常过滤器（代码文件BookServiceClientApp/Program.cs）：
    private static async Task ReadNotExistingChapterAsync()
    {
      WriteLine(nameof(ReadNotExistingChapterAsync));
      string requestedIdentifier = Guid.NewGuid().ToString();
      try
      {
      var client = new BookChapterClient(Addresses.BaseAddress);
      BookChapter chapter = await client.GetAsync(
        Addresses.BooksApi + requestedIdentifier.ToString());
      WriteLine($"{chapter.Number} {chapter.Title}");
    }
    catch (HttpRequestException ex) when (ex.Message.Contains("404"))
    {
      WriteLine($"book chapter with the identifier {requestedIdentifier} " +
        "not found");
    }
    WriteLine();
  }
  注意： 处理异常和使用异常过滤器的内容参见第14章。
方法的结果显示了从服务返回的NotFound结果：
    ReadNotExistingChapterAsync
    status from GET NotFound
    book chapter with the identifier d38ea0c5-64c9-4251-90f1-e21c07d6937a not fou
nd
42.4.2 从服务中接收XML
在42.2.4节中，XML格式被添加到服务中。服务设置为返回XML和JSON，添加
Accept标题值来接受application/xml内容，就可以显式地请求XML内容。
具体操作如下面的代码段所示。其中，指定application/xml的
MediaTypeWithQualityHeaderValue被添加到Accept标题集合中。然后，结果使用XElement
类解析为XML（代码文件BookService-ClientApp/BookChapterClient.cs）：
    public async Task GetAllXmlAsync(string requestUri)
    {
      using (var client = new HttpClient())
      {
        client.BaseAddress = _baseAddress;
        client.DefaultRequestHeaders.Accept.Add(
        new MediaTypeWithQualityHeaderValue("application/xml"));
        HttpResponseMessage resp = await client.GetAsync(requestUri);
        WriteLine($"status from GET {resp.StatusCode}");
        resp.EnsureSuccessStatusCode();
        string xml = await resp.Content.ReadAsStringAsync();
        XElement chapters = XElement.Parse(xml);
        return chapters;
      }
    }
  注意： XElement类和XML序列化参见第27章。
在Program类中，调用GetAllXmlAsync方法直接把XML结果写到控制台（代码文件
BookService-ClientApp/Program.cs）：
    private static async Task ReadXmlAsync()
    {
      WriteLine(nameof(ReadXmlAsync));
      var client = new BookChapterClient(Addresses.BaseAddress);
      XElement chapters = await client.GetAllXmlAsync(Addresses.BooksApi);
      WriteLine(chapters);
      WriteLine();
    }
运行这个方法，可以看到现在服务返回了XML：
    ReadXmlAsync
    status from GET OK
        1439c261-2722-4e73-a328-010e82866511
        4
        Inheritance
        18
        d1a53440-94f2-404c-b2e5-7ce29ad91ef6
        3
        Objects and Types
        30
        ce1a5203-5b77-43e9-b6a2-62b6a18fac44
        38
        Windows Store Apps
        45
42.4.3 发送POST请求
下面使用HTTP POST请求向服务发送新对象。HTTP POST请求的工作方式与GET请
求类似。这个请求会创建一个新的服务器端对象。HttpClient类的PostAsync方法需要用第
二个参数添加的对象。使用Json.NET的JsonConvert类把对象序列化为JSON。成功返回
后，Headers.Location属性包含一个链接，其中，对象可以再次从服务中检索。响应还包
含一个带有返回对象的响应体。在服务中修改对象时，Id属性在创建对象时在服务代码中
填充。反序列化JSON代码后，这个新信息由PostAsync方法返回（代码文件
BookServiceClientApp/HttpClientHelper.cs）：
    public async Task PostAsync(string uri, T item)
    {
      using (var client = new HttpClient())
      {
        client.BaseAddress = _baseAddress;
        string json = JsonConvert.SerializeObject(item);
        HttpContent content = new StringContent(json, Encoding.UTF8,
        "application/json");
        HttpResponseMessage resp = await client.PostAsync(uri, content);
        WriteLine($"status from POST {resp.StatusCode}");
        resp.EnsureSuccessStatusCode();
        WriteLine($"added resource at {resp.Headers.Location}");