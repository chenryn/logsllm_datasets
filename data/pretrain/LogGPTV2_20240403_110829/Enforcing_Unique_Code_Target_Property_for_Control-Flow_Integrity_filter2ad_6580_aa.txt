title:Enforcing Unique Code Target Property for Control-Flow Integrity
author:Hong Hu and
Chenxiong Qian and
Carter Yagemann and
Simon Pak Ho Chung and
William R. Harris and
Taesoo Kim and
Wenke Lee
Enforcing Unique Code Target Property
for Control-Flow Integrity
Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung,
William R. Harris†∗, Taesoo Kim and Wenke Lee
Georgia Institute of Technology
†Galois Inc.
ABSTRACT
The goal of control-flow integrity (CFI) is to stop control-hijacking
attacks by ensuring that each indirect control-flow transfer (ICT)
jumps to its legitimate target. However, existing implementations
of CFI have fallen short of this goal because their approaches are
inaccurate and as a result, the set of allowable targets for an ICT
instruction is too large, making illegal jumps possible.
In this paper, we propose the Unique Code Target (UCT) prop-
erty for CFI. Namely, for each invocation of an ICT instruction,
there should be one and only one valid target. We develop a proto-
type called µCFI to enforce this new property. During compilation,
µCFI identifies the sensitive instructions that influence ICT and
instruments the program to record necessary execution context.
At runtime, µCFI monitors the program execution in a different
process, and performs points-to analysis by interpreting sensitive
instructions using the recorded execution context in a memory safe
manner. It checks runtime ICT targets against the analysis results
to detect CFI violations. We apply µCFI to SPEC benchmarks and
2 servers (nginx and vsftpd) to evaluate its efficacy of enforcing
UCT and its overhead. We also test µCFI against control-hijacking
attacks, including 5 real-world exploits, 1 proof of concept COOP
attack, and 2 synthesized attacks that bypass existing defenses. The
results show that µCFI strictly enforces the UCT property for pro-
tected programs, successfully detects all attacks, and introduces
less than 10% performance overhead.
CCS CONCEPTS
• Security and privacy → Systems security; Software and ap-
plication security;
KEYWORDS
Control-flow integrity; Unique code target; Performance; Intel PT
ACM Reference Format:
Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William
∗ This article contains work performed in part while Harris was supported by the
Georgia Institute of Technology.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243797
R. Harris, Taesoo Kim and Wenke Lee. 2018. Enforcing Unique Code Tar-
get Property for Control-Flow Integrity. In 2018 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’18), October 15–19, 2018,
Toronto, ON, Canada. ACM, New York, NY, USA, 17 pages. https://doi.org/
10.1145/3243734.3243797
1 INTRODUCTION
Control-flow integrity (CFI) [1] is a principled solution to detect
control-hijacking attacks, in which attackers corrupt control data,
like a function pointer, to divert the control flow. It compares the
runtime target of each indirect control-flow transfer (ICT) instruc-
tion (i.e., indirect call/jmp or ret) against a set of allowed targets,
and reports any discrepancy as control-hijacking attacks.
The strength of a CFI system hinges on its model of secure be-
havior, expressed via its set of allowed targets for ICT instructions.
An overly strict model breaks system functionality due to false
alarms, while a permissive model can be evaded by attackers, like
in [10, 25, 55]. These attacks highlight an inherent mismatch be-
tween current CFI models that rely on static analysis and the ideal
model: static analysis identifies benign targets for each ICT instruc-
tion from all possible runs, while the ideal model defines the valid
targets for each ICT instruction for only the currently observed exe-
cution. Recent approaches use runtime information to reduce the
number of allowed targets [21, 48, 61]. However, these methods
still permit hundreds of targets for some ICT instructions. Consider
a code pointer retrieved from an array via a variable index. With-
out knowing the index value, CFI solutions have to treat all array
elements as allowed targets.
In this paper, we propose a necessary feature of a precise CFI —
the Unique Code Target (UCT) property. This property requires that
at each step of a protected execution, a program may only transition
to one unique valid target. For an execution without any attack,
the allowed target for each invocation of an ICT instruction is the
same as the one used in the execution to avoid false alarms. When
control data is corrupted to hijack the execution path, the model
should detect the deviation and conclude a control-hijacking attack.
Similar to existing CFI work, we focus on control-data attacks and
consider non-control data attacks [14, 32] out of scope.
The key to achieving the UCT property is collecting the neces-
sary runtime information and using it to augment the points-to
analysis on control data. As such information helps constrain the
set of allowed targets, we call it constraining data. However, it is
not trivial to design a CFI system that satisfies the UCT property.
Specifically, we have to address the following three challenges, 1)
how to accurately identify the constraining data, 2) how to collect
this data efficiently, and 3) how to perform the points-to analysis
efficiently and accurately.
FP arr[3] = {&A, &B, &C};
FP fpt = &D;
FP fun = NULL;
char buf[20];
if (uid  2) return;
if (uid == 0) {
fun = arr[0];
1 typedef void (*FP)(char *);
2 void A(char *); void B(char *); void C(char *);
3 void D(char *); void E(char *);
4 // uid can be 0, 1, 2
5 void handleReq(int uid, char * input) {
6
7
8
9
10
11
12
13
14
15
16
17
18 }
Figure 1: Code snippet vulnerable to control-flow hijacking attacks.
Attackers can exploit the stack buffer overflow at line 16 to corrupt the
function pointer fun.
} else { // uid can be 1, 2
}
strcpy(buf, input); // stack buffer overflow
(*fun)(buf);
// fun is corrupted
fun = arr[uid];
We propose a system, µCFI, to address the aforementioned chal-
lenges and enforce the UCT property. µCFI performs static data-flow
analysis to accurately identify constraining data from the program
source code. The analysis starts from code pointers, and recur-
sively identifies variables that are involved in calculating known
constraining data. We also develop a novel arbitrary data collec-
tion technique to record all constraining data at runtime efficiently.
Specifically, we encode the constraining data as indirect control-
flow transfers, and rely on a hardware feature, Intel Processor Trace
(PT) for efficient recording. µCFI runs a monitor in parallel with
the program execution to parse recorded constraining data and
uses it to argument points-to analysis. To support efficient analysis,
we construct partial execution paths to avoid wasting effort on
security-unrelated operations. For each invocation of each ICT in-
struction, the monitor compares the real target against the points-to
analysis result, and reports inconsistencies as attacks.
We implement our design as a compiler and an execution moni-
tor. The monitor performs CFI checks in a different process after
each ICT instruction. To ensure security, it interacts with the kernel
to block the program execution at any security-sensitive system
call until all prior CFI checks succeed. This is similar to existing
CFI enforcement approaches [15, 21, 23, 61] and aims to prevent
attackers from inflicting damage on the system. Our prototype
focuses on forward-edge CFI (i.e., protecting call and jmp), and
leaves backward-edge CFI (i.e., protecting ret) to existing solu-
tions [17, 33, 54]. We integrate a shadow stack [17] into µCFI to
demonstrate its compatibility with backward-edge CFI solutions.
To measure the effectiveness and efficiency of our solution, we
use µCFI to protect several benchmarks and real-world programs,
including 14 SPEC CPU 2006 benchmarks, nginx web server, and vs-
ftpd FTP server, from 5 real-world exploits, 1 proof of concept COOP
attack, and 2 synthesized attacks that bypass existing defenses. µCFI
successfully enforces the UCT property at each invocation of each
ICT instruction for all tested programs. Attacks are successfully
detected and blocked by µCFI, as they trigger CFI violations at
runtime. µCFI introduces around 10% overhead to the protected
programs. Heavy techniques like memory safety [35, 42–44] or
data-flow integrity [12, 58] provide stronger security than the UCT
property, but lead to unacceptable performance overhead (116%
Table 1: Allowed target sets for various CFI solutions. The functions
listed are allowed targets for fun at line 17 of Figure 1, when uid=1. Our
solution µCFI allows the unique target.
line
no
CFI
type
CFI
static
CFI
0
6
*
7
14
17
# ∞
A
B
C
D
E
5
A
B
C
3
π CFI
-
A,B,C
A,B,C,D
A,B,C,D
A,B,C,D
4
Pitty-
Pat
-
arr[0]:A
arr[1]:B
arr[2]:C
fpt:D
fun:B,C
fun:B,C
2
µCFI
-
arr[0]:A
arr[1]:B
arr[2]:C
fpt:D
fun:B
fun:B
1
for SoftBound+CETS, and 104% for data-flow integrity). Thus, our
method to enforce the UCT property is a more practical solution.
We make the following contributions in this paper:
• Unique code target property. We propose the UCT prop-
erty as the ultimate goal of control-flow integrity. A CFI
system that enforces the UCT property has exactly one al-
lowed target for each invocation of each indirect control-flow
transfer.
• Enforcement of UCT property. We design and imple-
ment an end-to-end system to enforce the UCT property.
To achieve this goal, we develop novel solutions to record ar-
bitrary execution information to support complete dynamic
program analysis. At the same time, we develop several tech-
niques to enable efficient UCT enforcement.
• Empirical evaluation. We evaluate our system on common
benchmarks, real-world servers, and attacks. The results
show that µCFI successfully enforces the UCT property on
all tested programs with around 10% overhead.
The rest of the paper is organized as follows. §2 illustrates the
problem we address. We describe our design in §3 and present
implementation details in §4. §5 describes an empirical evaluation of
our approach and §6 discusses implications of our system. We cover
the related work in §7, and conclude in §8. Appendix A formally
states and proves the correctness of our approach.
2 PROBLEM
In this section, we demonstrate the weakness of existing CFI im-
plementations with a motivating example and present our idea for
enforcing the UCT property.
2.1 Motivating example
Figure 1 shows a vulnerable code snippet that allows attackers
to hijack the control-flow. Function handleReq contains a stack-
based buffer overflow vulnerability at line 16, where the user input
(pointed to by input) is copied into a fixed-size buffer buf without
proper boundary checking. Attackers can craft inputs to corrupt
local variables on the stack, like the function pointer fun. When
fun is used at line 17 for the indirect function call, attackers can
hijack the execution to perform a malicious action.
Control-flow integrity aims to prevent such attacks. The idea is
to find the expected target(s) for each indirect control-flow transfer
and compare it with the real target at runtime to detect inconsis-
tencies. In this example, CFI will try to validate the value of fun
at line 17. Ideally, the check only permits one target for each run,
which is function A if uid is 0, function B if uid is 1, or function C
if uid is 2. If fun is corrupted to any other value, CFI will detect
that the ICT target is inconsistent and terminate the execution to
prevent any possible damage.
2.2 Incomplete protection by existing CFIs
Here we demonstrate the weakness of existing CFI solutions in
preventing attacks against this code. Table 1 shows the allowed
target sets enforced by different CFI solutions at line 17 of Figure 1
when uid is 1. If the vulnerable code is not protected (“no CFI”),
attackers can divert the control flow to any executable location (* in
the table). The type-based CFI solutions allow all functions whose
types match with the callsite [46, 59, 62], and thus permit 5 targets
(A, B, C, D, E) for the function pointer fun. Static CFI solutions have
to permit all possible targets for all possible benign inputs. Assum-
ing there is an oracle that can enumerate all possible execution
paths1, static CFI will enforce 3 targets: A, B and C. As such oracle
is still unavailable, real-world static CFI over-approximates the set
of allowed targets. Since it does not consider runtime information,
this set is the same across all invocations of the code.
We also consider two dynamic CFI solutions, πCFI and PittyPat,
and conclude that neither successfully enforces the ideal CFI policy
for this vulnerable code. πCFI starts with an empty set and adds
functions at runtime as the function addresses are referenced. The
code at line 6 uses the addresses of functions A, B, and C, so πCFI
adds them to the allowed targets set. Similarly, it adds function
D to the set at line 7 for variable fpt. Therefore, πCFI allows 4
targets at line 17. PittyPat provides the best security guarantee
among the existing solutions in Table 1 by utilizing the dynamic
execution path to perform points-to analysis. For example, at line
6, PittyPat updates the points-to relationship for each variable,
e.g., arr[1] points to B. PittyPat works well when it can infer the
points-to relationship from the execution path, but has to make
approximations when it cannot. For example, at line 14 fun is either
assigned the value of arr[1] or arr[2] depending on the value of
uid. Since PittyPat cannot obtain this value from the execution
path, it has to allow both targets at line 17. Attackers can choose
between calling functions B or C.
2.3 Enforcing UCT with full context
We propose to use the full execution context to perform online
points-to analysis on control data to enforce the UCT property.
Unlike previous solutions, we collect both the control-flow and the
necessary non-control data needed to produce a unique target for
each ICT. We refer to such non-control data as constraining data,
which we define by its property as follows:
Constraining data plays an important role in the calculation of
the indirect control-flow transfer target. However, it is neither a con-
trol data that directly represents a code address, nor a pointer that
will be dereferenced during the code pointer retrieval. The value of
1Currently, no efficient implementation of such an oracle exists so it is approximated
using fuzzing or symbolic execution.
a constraining data cannot be inferred from even the accurate exe-
cution path until the affected indirect control-flow transfer happens.
Once its value is known, the analysis can accurately deduce the
unique ICT target for any execution path. Any data satisfying such
properties is an instance of constraining data. In the motivating
example in Figure 1, the function argument uid is constraining data
since it is used to determine the function pointer fun during the
array access at line 14, without which any analysis has to overap-
proximate the access result. There are three challenges to collect
constraining data and perform full-context-based points-to analysis
in real-world programs:
• Constraining data identification. We need to accurately
identify constraining data from a tremendous number of
program variables. Collecting superfluous data burdens both
the collection and analysis.
• Arbitrary data collection. No method can efficiently pass
arbitrary data from the execution to the analyzer. For ex-
ample, hardware features like Intel PT only capture change
of flow information [21]. Naive solutions with shared files
or memory have adverse effects on the cache, leading to