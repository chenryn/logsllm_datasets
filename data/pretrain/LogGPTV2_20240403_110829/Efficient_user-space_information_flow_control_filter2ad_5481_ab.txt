rule, where the additional antecedent k (cid:118) label(σ2(a))
performs the required no-sensitive-upgrade check. Here, the
function label extracts the label from a value, and is deﬁned
by label(rk) def= k.
σ, θ, e1 ⇓pc σ1, ak
σ1, θ, e2 ⇓pc σ2, v
k (cid:118) label(σ2(a))
σ, θ, (e1:= e2) ⇓pc σ2[a := (v (cid:116) k)], v
[U-ASSIGN]
If this no-sensitive-upgrade check fails, then program evalu-
ation terminates with an error. (As usual, program termina-
tion may leak one bit of data.)
Under this rule, the problematic programs (f true H) and
(f false H) can no longer be evaluated with the program
counter label L. These programs are instead considered erro-
neous because they attempt to update a public reference cell
def= λx. let y = ref true in
let z = ref true in
x then y := false else skip;
y := (cid:104)H(cid:105)!y;
if
z := (cid:104)H(cid:105)!z;
if !y then z := false else skip;
!z
This revised function fok then permits the executions:
∅,∅, (fok true H) ⇓L [ay := false H , az := true H], true H
∅,∅, (fok false H) ⇓L [ay := true H , az := false H], false H
where the conﬁdential result is now appropriately labeled.
This approach of preemptively upgrading certain refer-
ence cells requires the programmer (or possibly a static anal-
ysis tool) to display some foresight about when code with a
conﬁdential program counter may update public reference
cells. This foresight then avoids the traditional problem with
dynamic information ﬂow–trying to reason about what lo-
cations might have been assigned on the branch-not-taken
in a conditional statement. Thus, the no-sensitive-upgrade
mechanism enables precise information ﬂow analysis with-
out needing an expensive and conservative static analysis of
every conditional branch.
In fact, the static analysis can be seen simply as a special
case of our approach, one that automatically and preemp-
tively upgrades appropriate variables. Interestingly, we can
drop the strict requirement that the static analysis be con-
servative, and use a heuristic analysis instead. If the static
analysis preemptively upgrades too few variables, the no-
sensitive-upgrade check will still prevent secret information
from being leaked.
From the evaluation rules for the core language, we can
derive corresponding evaluation rules for the encoded con-
structs: see Figure 3. Reassuringly, these derived rules match
our expected intuition.
3.1 Correctness of Universal Labeling
We now show that the universal-labeling evaluation strategy
guarantees non-interference. In particular, if two program
states differ only in H-labeled data, then these differences
cannot propagate into L-labeled data.
(written v1 ∼H v2) if either:
1. v1 = v2, or
2. both v1 and v2 have the label at least H, or
3. v1 = (λx.e, θ1)k and v2 = (λx.e, θ2)k and θ1 ∼H θ2.
To formalize this idea, we say two values are H-equivalent
Figure 3: Universal Labeling for Encodings
Abbreviations:
(v1, v2)k def= (λb. b v1 v2, θ)k
Derived Evaluation Rules:
σ, θ, e1 ⇓pc σ1, (true, θ)k
σ1, θ, e2 ⇓pc(cid:116)k σ(cid:48), v
σ, θ, (if e1 then e2 else e3) ⇓pc σ(cid:48), v
σ, θ, e1 ⇓pc σ1, (false, θ)k
σ1, θ, e3 ⇓pc(cid:116)k σ(cid:48), v
σ, θ, (if e1 then e2 else e3) ⇓pc σ(cid:48), v
σ, θ, e1 ⇓pc σ1, v1
σ1, θ, e2 ⇓pc σ2, v2
σ, θ, (pair e1 e2) ⇓pc σ2, (v1, v2)pc
σ, θ, e ⇓pc σ(cid:48), (v1, v2)k
σ, θ, (fst e) ⇓pc σ(cid:48), (v1 (cid:116) k)
σ, θ, e ⇓pc σ(cid:48), (v1, v2)k
σ, θ, (snd e) ⇓pc σ(cid:48), (v2 (cid:116) k)
σ, θ, e1 ⇓pc σ1, v1
σ1, θ[x := v1], e2 ⇓pc σ(cid:48), v
σ, θ, (let x = e1 in e2) ⇓pc σ(cid:48), v
σ, θ, e1 ⇓pc σ1, v1
σ1, θ, e2 ⇓pc σ(cid:48), v
σ, θ, (e1; e2) ⇓pc σ(cid:48), v
[U-THEN]
[U-ELSE]
[U-PAIR]
[U-FST]
[U-SND]
[U-LET]
[U-SEQ]
Similarly, two substitutions are H-equivalent (written θ1 ∼H
θ2) if they have the same domain and
∀x ∈ dom(θ1). θ1(x) ∼H θ2(x)
LEMMA 1 (Equivalence). The two ∼H relations on values
and substitutions are equivalence relations.
We deﬁne an analogous notion of H-compatible stores:
two stores σ1 and σ2 are H-compatible (written σ1 ≈H σ2)
if they are H-equivalent at all common addresses, i.e.,
def= ∀a∈(dom(σ1)∩dom(σ2)). σ1(a) ∼H σ2(a)
σ1 ≈H σ2
Note that the H-compatible relation on stores is not tran-
sitive, i.e., σ1 ≈H σ2 and σ2 ≈H σ3 does not imply
σ1 ≈H σ3, since σ1 and σ3 could have a common address
that is not in σ2.
The evaluation rules enforce a key invariant, namely that
the label on the result of an evaluation always includes at
least the program counter label:
LEMMA 2. If σ, θ, e ⇓pc σ(cid:48), rk then pc (cid:118) k.
The following lemma formalizes that evaluation with a
H-labeled program counter cannot inﬂuence L-labeled data
in the store.
LEMMA 3 (Evaluation Peserves Compatibility).
If σ, θ, e ⇓H σ(cid:48), v then σ ≈H σ(cid:48).
PROOF By induction on the derivation of σ, e ⇓H σ(cid:48), v and
case analysis on the ﬁnal rule in the derivation.
Finally, we prove non-interference: if an expression e is
executed twice from H-compatible stores and H-equivalent
substitutions, then both executions will yield H-compatible
resulting stores and H-equivalent resulting values. Thus, H-
labeled data never leaks into L-labeled data.
THEOREM 1 (Non-Interference for Universal Labeling).
If
σ1 ≈H σ2
θ1 ∼H θ2
σ1, θ1, e ⇓pc σ(cid:48)
σ2, θ2, e ⇓pc σ(cid:48)
1 ≈H σ(cid:48)
σ(cid:48)
v1 ∼H v2
2
1, v1
2, v2
then
PROOF By induction on the derivation σ1, θ1, e ⇓pc σ(cid:48)
1, v1
and case analysis on the ﬁnal rule. This proof is similar to
the proof of Theorem 2, shown in the appendix.
Although non-interference is an important correctness
property, it does not address certain sources of information
leaks, such as those caused by divergence, abrupt termi-
nation, timing channels, or input-output operations, as dis-
cussed in [Askarov et al. 2008]. Addressing these informa-
tion leaks remains an important topic for future work.
4. Sparse Labeling Semantics for λinfo
The universal labeling strategy incurs a signiﬁcant overhead
to allocate, track, and manipulate the labels attached to each
value. Moreover, programs typically exhibit a signiﬁcant
amount of label locality, where most or all items in a data
structure will likely have identical labels. For example, in
a browser setting, most values will likely be created and
manipulated within a single information ﬂow domain.
We exploit this label locality property to avoid introduc-
ing an explicit label on every data item. Instead, we leave
labels implicit (i.e., determined by context) whenever pos-
sible, and introduce explicit labels only for values that mi-
grate between information ﬂow domains. This strategy of
sparse labeling eliminates a signiﬁcant fraction of the over-
head usually associated with dynamic information ﬂow. At
the same time, sparse labeling has no effect on program se-
mantics and is observably equivalent to universal labeling.
Figure 4 revises our earlier operational semantics to in-
corporate sparse labeling. A value v now combines a raw
value r with an optional label k; if this label is omitted, it
is interpreted as being ⊥. In addition, each value is implic-
itly labeled with the current program counter label pc. The
following function label pc extracts the true label of a value
with respect to a program counter label pc:
label pc(r)
label pc(rk)
def= pc
def= pc (cid:116) k
The revised sparse labeling evaluation relation:
σ, θ, e ↓pc σ(cid:48), v
is deﬁned via the evaluation rules shown in Figure 4. The
label pc is implicitly applied to all values in both θ and
v. Thus, many rules (e.g., [S-CONST], [S-FUN], and [S-VAR])
can ignore labeling issues entirely and incur no information
labeling overhead.
For the other constructs, we provide two rules: a fast path
for unlabeled values, and a slower rule that deals with explic-
itly labeled values.1 For function applications, the fast path
rule [S-APP] handles applications of an unlabeled closure in
a straightforward manner with no labeling overhead. If the
closure has label k, then the second rule [S-APP-SLOW] adds
that label to the program counter before invoking the callee,
and also adds k to the result of the function application. This
rule uses the operation (cid:104)k(cid:105)pc v, which applies the label k to
a value v, unless k is subsumed by the implicit label pc.
(cid:26) r
rk
(cid:104)k(cid:105)pc r
def=
if k (cid:118) pc
otherwise
(cid:104)k(cid:105)pc (rl)
def= rk(cid:116)l
The rule [S-REF] allocates a reference cell at address a to
hold a value v. To avoid making the implicit label pc on v ex-
plicit, each address a has an associated label label(a), which
is implicitly applied to the value at that address. Hence, by
allocating an address a where label(a) = pc, we avoid ex-
plicitly labeling v.2
The fast path assignment rule [S-ASSIGN] checks that the
target address a came from the current domain pc via the
antecedent pc = label(a). If this fast-path check passes, then
the no-sensitive-upgrade rule holds, and also the implicit pc
label on the assigned value v can be left implicit.
1 A dynamically-typed language such as JavaScript already has slow paths
to deal with various exceptional situations (such as attempting to apply a
non-function) so handling explicitly-labeled value might naturally ﬁt within
these existing slow paths.
2 An implementation might represent the label on addresses by associating
an entire page of addresses with a particular label.
The slow path rule [S-ASSIGN-SLOW] handles the more
general case. This rule extracts k as the label on the target
address (where k = ⊥ if that address has no explicit label);
identiﬁes the implicit label m for values at address a; checks
that (pc (cid:116) k) is not more secret than the label on the value
at address a; and appropriately labels the new value before
storing it at address a.
Figure 5 shows how this sparse-labeling evaluation strat-
egy extends to the various encoded constructs; these derived
rules again match our expectations.
4.1 Correctness for Sparse Labeling
As before, our non-interference argument is based on the
notion of H-equivalent values, but we now parameterize that
equivalence relation over the implicit label pc. Thus, the new
H-equivalence relation v1 ∼pc
1. v1 = v2
2. H (cid:118) label pc(v1) and H (cid:118) label pc(v2).
3. v1 = (λx.e, θ1)k and v2 = (λx.e, θ2)k and θ1 ∼pc
Similarly, two substitutions are H-equivalent with respect to
an implicit label pc (written θ1 ∼pc
H θ2) if they have the same
domain and
H v2 holds if either:
H θ2.
∀x ∈ dom(θ1). θ1(x) ∼pc
H θ2(x)
We begin by noting some straightforward properties of la-
beling and H-equivalence.
LEMMA 4. pc (cid:118) label pc(v).
LEMMA 5. If H (cid:118) k then v1 ∼k
LEMMA 6 (H-Equivalence). The relations ∼pc
substitutions are equivalence relations.
H values and
H v2.
H ⊆ ∼l
H.
LEMMA 7 (Monotonicity of H-Equivalence).
If k (cid:118) l then ∼k
LEMMA 8 (Labeling Equivalence).
If v1 ∼k
H v2 then (cid:104)k(cid:105)pc v1 ∼pc
H (cid:104)k(cid:105)pc v2.
Two stores σ1 and σ2 are H-compatible (written σ1 ≈H
σ2) if they are H-equivalent at all common addresses, i.e.,
∀a ∈ (dom(σ1) ∩ dom(σ2)). σ1(a) ∼label(a)
H
σ2(a)
Note that since every address a has an implicit label label(a),
the H-compatible relation is not parameterized by pc.
If an evaluation returns an address a, then the label on
that address is at least label(a).
LEMMA 9. If σ, θ, e ⇓pc σ(cid:48), ak then label(a) (cid:118) (pc (cid:116) k).
The following lemma proves that evaluation with a H-
labeled program counter cannot inﬂuence L-labeled data.
LEMMA 10 (Evaluation Preserves Compatibility).
If σ, θ, e ↓H σ(cid:48), v then σ ≈H σ(cid:48).
Figure 4: Sparse Labeling Semantics for λinfo
Runtime Syntax
r ∈ RawValue s
v ∈ Value s
θ ∈ Subst s
σ ∈ Store s
::= c | a | (λx.e, θ)
::= r | rk
= Var →p Value s
= Address →p Value s
Big-Step Evaluation Rules:
σ, θ, e ↓pc σ(cid:48), v
σ, θ, c ↓pc σ, c
[S-CONST]
σ, θ, (λx.e) ↓pc σ, (λx.e, θ)
σ, θ, x ↓pc σ, θ(x)
σ, θ, e1 ↓pc σ1, (λx.e, θ(cid:48))
σ2, θ(cid:48)[x := v2], e ↓pc σ(cid:48), v
σ1, θ, e2 ↓pc σ2, v2
σ, θ, (e1 e2) ↓pc σ(cid:48), v
σ, θ, e1 ↓pc σ1, c
σ1, θ, e2 ↓pc σ2, d
σ, θ, (e1 e2) ↓pc σ2, r
r = [[c]](d)
σ, θ, e ↓pc σ(cid:48), v
σ, θ,(cid:104)k(cid:105)e ↓pc σ(cid:48),(cid:104)k(cid:105)pc v
σ, θ, e ↓pc σ(cid:48), v
a (cid:54)∈ dom(σ(cid:48))
label (a) = pc
σ, θ, (ref e) ↓pc σ(cid:48)[a := v], a
σ, θ, e ↓pc σ(cid:48), a
σ, θ, !e ↓pc σ(cid:48), σ(cid:48)(a)
σ, θ, e1 ↓pc σ1, a
σ1, θ, e2 ↓pc σ2, v
pc = label (a)
σ, θ, (e1:= e2) ↓pc σ2[a := v], v
[S-FUN]
[S-VAR]
[S-APP]
[S-PRIM]
[S-LABEL]
[S-REF]
[S-DEREF]
[S-ASSIGN]
σ1, θ, e2 ↓pc σ2, v2
σ, θ, e1 ↓pc σ1, (λx.e, θ(cid:48))k
σ2, θ(cid:48)[x := v2], e ↓pc(cid:116)k σ(cid:48), v
σ, θ, (e1 e2) ↓pc σ(cid:48),(cid:104)k(cid:105)pc v
σ, θ, e1 ↓pc σ1, ck
σ1, θ, e2 ↓pc σ2, dl
[S-APP-SLOW]
r = [[c]](d)
σ, θ, (e1 e2) ↓pc σ2,(cid:104)k (cid:116) l(cid:105)pc r
[S-PRIM-SLOW]
σ, θ, e ↓pc σ(cid:48), ak
σ, θ, !e ↓pc σ(cid:48),(cid:104)k(cid:105)pc σ(cid:48)(a)
[S-DEREF-SLOW]
σ, θ, e1 ↓pc σ1, ak
σ1, θ, e2 ↓pc σ2, v
m = label (a)
v(cid:48) = (cid:104)pc (cid:116) k(cid:105)m v
(pc (cid:116) k) (cid:118) label m(σ2(a)))
σ, θ, (e1:= e2) ↓pc σ2[a := v(cid:48)], v
[S-ASSIGN-SLOW]