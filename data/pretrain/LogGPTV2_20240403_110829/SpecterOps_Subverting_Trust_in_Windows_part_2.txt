ADUI
189A3842-3041-11D1-85E1-00C04FC295EE WINTRUST_ACTION_GENERIC_CERT_VERIFY
FC451C16-AC75-11D1-B4B8-00C04FB66EA0 WINTRUST_ACTION_GENERIC_CHAIN_VERIFY
00AAC56B-CD44-11D0-8CC2-00C04FC295EE WINTRUST_ACTION_GENERIC_VERIFY_V2
573E31F8-DDBA-11D0-8CCB-00C04FC295EE WINTRUST_ACTION_TRUSTPROVIDER_TEST
The purpose of some of these trust providers is documented in MSDN and SoftPub.h in the Windows
SDK, but their respective implementations are not documented, requiring a leap of faith from
developers that trust verification of certificates, signatures, chains, revocation, and time-stamping are
performed correctly. One of the more common trust providers used by a developer calling
WinVerifyTrust will be WINTRUST_ACTION_GENERIC_VERIFY_V2 for generic Authenticode signature
trust validation. If the trust of a driver needs to be validated in user mode, DRIVER_ACTION_VERIFY should
be used.
Like SIPs, trust providers are registered in the registry as well in the following key:
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Providers\Trust
Within the “Trust” key is a list of subkeys corresponding to each step of trust provider validation that
can occur: Initialization, Message, Signature, Certificate, CertCheck, FinalPolicy, DiagnosticPolicy, and
Cleanup. Within each of these keys are the trust provider GUIDs that implement each of those steps (not
all of which are required. e.g. CertCheck, DiagnosticPolicy, and Cleanup). Within each respective GUID
subkey are the DLLs and export functions that implement the trust provider steps: $DLL and
$Function.
- 10 -
Example of a trust provider registration in the registry
The purpose of each trust provider step can be broken down roughly as follows:
1. Initialization:
a. Initializes the CRYPT_PROVIDER_DATA structure based on the WINTRUST_DATA
structure passed to WinVerifyTrust. CRYPT_PROVIDER_DATA is a structure that is passed
between all of the trust provider functions and serves to maintain state across all the
calls including and error codes that could have occurred each step along the way (see
TRUSTERROR_STEP values in wintrust.h).
b. Opens a read file handle to the file to be validated.
2. Message:
a. Obtains signer information from the subject interface package. This is the only step in
the verification process that calls into the respective SIP to obtain the correct signature.
Note that some trust verification utilities will first check the catalog store for a signature
before attempting to obtain a signature from an embedded Authenticode signature.
b. Both the “initialization” and “message” steps are referred as “object providers.”
3. Signature:
a. In this step, the digital signature is built out and counter-signers and timestamps are
validated.
b. This step is referred to as a “signature provider.”
4. Certificate:
a. In this step, the full certificate chain is built out.
b. This step is referred to as a “certificate provider.”
5. CertCheck:
a. If this optional step is implemented, this function is called for each index within the
certificate chain and is used to indicate to the trust provider that the certificate chain
should continue to be built out.
6. FinalPolicy:
a. This is the function where the majority of trust decisions are made. At this point, the
signature and certificate chain has been decoded, parsed and supplied to this
implementing function.
b. What components of the signature, certificate chain, and certificate store are validated
vary depending upon the trust provider. Here is small list of some of the checks that
- 11 -
occur when the WINTRUST_ACTION_GENERIC_VERIFY_V2 trust provider is used
(implemented as wintrust!SoftPubAuthenticode):
i. Verify that the file was signed with a certificate designated for code signing as
indicated by an enhanced key usage (EKU) of “1.3.6.1.5.5.7.3.3”
ii. Check if the certificate is expired and hasn’t been timestamped.
iii. Check if the certificate has been revoked.
iv. Validate that the file was not signed using a hash algorithm that has been
designated as “weak.”
v. If the file was signed with a certificate designated for “Windows System
Component Verification” (EKU - 1.3.6.1.4.1.311.10.3.6), validate that the signing
certificate chains to a fixed set of trusted Microsoft root certificates.
7. DiagnosticPolicy:
a. This optional step is designed to aid debugging for trust provider developers. It is
intended to allow for a Microsoft developer to dump out structure contents prior to
returning to WinVerifyTrust.
b. WINTRUST_ACTION_TRUSTPROVIDER_TEST is the only trust provider that implements
this step. WINTRUST_ACTION_TRUSTPROVIDER_TEST is identical to
WINTRUST_ACTION_GENERIC_VERIFY_V2 but it just implements this extra step
implemented as wintrust!SoftpubDumpStructure. SoftpubDumpStructure dumps out
the populated CRYPT_DATA_PROVIDER structure to C:\TRUSTPOL.TXT. This step
can be easily tested with signtool.exe (available in the Windows SDK) from an elevated
prompt (required to write a file to C:\) by specifying the
WINTRUST_ACTION_TRUSTPROVIDER_TEST (Authenticode Test) trust provider
GUID:
i. signtool verify /pg {573E31F8-DDBA-11D0-8CCB-
00C04FC295EE} filename.exe
8. Cleanup:
a. In this optional step, a trust provider can cleanup any CRYPT_PROVIDER_PRIVDATA that
was populated to pass policy-specific data across trust provider steps.
Trust Provider and SIP Registration
It is important to know the legitimate means by which trust providers and SIPs are registered in the
registry in order to understand how an attacker might take advantage of the registration process (or
subvert it entirely).
SIP Registration
Subject interface packages are formally registered by calling the wintrust!CryptSIPAddProvider function
within a DllRegisterServer export function. This enables the SIP to be formally registered by calling
“regsvr32.exe SIPfilename.dll”. CryptSIPAddProvider requires a SIP_ADD_NEWPROVIDER
- 12 -
structure consisting of the export functions exported in the SIP DLL that implement signing functionality.
The following SIP_ADD_NEWPROVIDER fields are required:
1. pwszDLLFileName:
The name of the SIP DLL. This can be just the file name but it should be a full path.
2. pwszGetFuncName:
Export function name of implemented CryptSIPGetSignedDataMsg
3. pwszPutFuncName:
Export function name of implemented CryptSIPPutSignedDataMsg
4. pwszCreateFuncName:
Export function name of implemented CryptSIPCreateIndirectData
5. pwszVerifyFuncName:
Export function name of implemented CryptSIPVerifyIndirectData
6. pwszRemoveFuncName:
Export function name of implemented CryptSIPRemoveSignedDataMsg
The following SIP_ADD_NEWPROVIDER fields are optional:
1. pwszIsFunctionNameFmt2:
Export function name of implemented pfnIsFileSupportedName
2. pwszGetCapFuncName:
Export function name of implemented pCryptSIPGetCaps
3. pwszIsFunctionName:
Export function name of implemented pfnIsFileSupported
Upon calling CryptSIPAddProvider, wintrust.dll adds the respective export function names and
implementing DLL to the
“HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingType 0”
subkeys.
SIP DLLs should also implement a DllUnregisterServer deregistration function that calls
CryptSIPRemoveProvider to remove all relevant SIP registry entries.
Trust Provider Registration
Trust providers are formally registered by calling the wintrust!WintrustAddActionID function within a
DllRegisterServer export function. This enables the trust provider to be formally registered by calling
“regsvr32.exe TrustProviderfilename.dll”. WintrustAddActionID requires a
CRYPT_REGISTER_ACTIONID structure consisting of the export functions exported in the trust provider
DLL that perform all the trust validation steps. Trust provider registration functionality can either be
shared with that of a SIP registration or it can be separate in its own, dedicated DLL.
- 13 -
Upon calling WintrustAddActionID, wintrust.dll adds the respective export function names and
implementing DLL to the
“HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Providers\Trust”
subkeys.
Trust providers are formally deregistered by calling wintrust!WintrustRemoveActionID within a
DllUnregisterServer export function .
Trust Provider and SIP Registration Example
The most significant trust provider registration resides in wintrust!DllRegisterServer which performs the
following registration steps:
1. Calls WintrustDllRegisterServer
a. Registers ASN.1 encoding/decoding routines used by CryptEncodeObject and
CryptDecodeObject by calling wintrust!CryptRegisterOIDFunction. Many of these
functions are called upon creation of a digital signature. Their decoding counterpart
functions will often be called when parsing digital signatures for verification purposes.
Like with SIP and trust provider registrations, these implementing functions are also
stored in the registry:
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID
\EncodingType
1\[CryptDllDecodeObject|CryptDllEncodeObject]
All of these encoding functions take on the following function signature:
● BOOL WINAPI EncoderDecoderFunction(DWORD
dwCertEncodingType, LPCSTR lpszStructType,
PSPC_PE_IMAGE_DATA pInfo, BYTE *pbEncoded, DWORD
*pcbEncoded);
WintrustDllRegisterServer registers the following encoding/decoding routines:
i. 1.3.6.1.4.1.311.2.1.15 (SPC_PE_IMAGE_DATA_OBJID)
Function: wintrust!WVTAsn1SpcPeImageDataEncode
ii. 1.3.6.1.4.1.311.2.1.25 (SPC_CAB_DATA_OBJID)
Function: wintrust!WVTAsn1SpcLinkEncode
iii. 1.3.6.1.4.1.311.2.1.20 (SPC_JAVA_CLASS_DATA_OBJID)
Function: wintrust!WVTAsn1SpcLinkEncode
iv. 1.3.6.1.4.1.311.2.1.28 (SPC_LINK_OBJID)
Function: wintrust!WVTAsn1SpcLinkEncode
v. 1.3.6.1.4.1.311.2.1.30 (SPC_SIGINFO_OBJID)
Function: wintrust!WVTAsn1SpcSigInfoEncode
vi. 1.3.6.1.4.1.311.2.1.4 (SPC_INDIRECT_DATA_OBJID)
Function: wintrust!WVTAsn1SpcIndirectDataContentEncode
vii. 1.3.6.1.4.1.311.2.1.10 (SPC_SP_AGENCY_INFO_OBJID)
- 14 -
Function: wintrust!WVTAsn1SpcSpAgencyInfoEncode
viii. 1.3.6.1.4.1.311.2.1.26 (SPC_MINIMAL_CRITERIA_OBJID)
Function: wintrust!WVTAsn1SpcMinimalCriteriaInfoEncode
ix. 1.3.6.1.4.1.311.2.1.27 (SPC_FINANCIAL_CRITERIA_OBJID)
Function: wintrust!WVTAsn1SpcFinancialCriteriaInfoEncode
x. 1.3.6.1.4.1.311.2.1.11 (SPC_STATEMENT_TYPE_OBJID)
Function: wintrust!WVTAsn1SpcStatementTypeEncode
xi. 1.3.6.1.4.1.311.12.2.1 (CAT_NAMEVALUE_OBJID)
Function: wintrust!WVTAsn1CatNameValueEncode
xii. 1.3.6.1.4.1.311.12.2.2 (CAT_MEMBERINFO_OBJID)
Function: wintrust!WVTAsn1CatMemberInfoEncode
xiii. 1.3.6.1.4.1.311.12.2.3 (CAT_MEMBERINFO2_OBJID)
Function: wintrust!WVTAsn1CatMemberInfo2Encode
xiv. 1.3.6.1.4.1.311.2.1.12 (SPC_SP_OPUS_INFO_OBJID)
Function: wintrust!WVTAsn1SpcSpOpusInfoEncode
xv. 1.3.6.1.4.1.311.2.4.2 (szOID_INTENT_TO_SEAL)
Function: wintrust!WVTAsn1IntentToSealAttributeEncode
xvi. 1.3.6.1.4.1.311.2.4.3 (szOID_SEALING_SIGNATURE)
Function: wintrust!WVTAsn1SealingSignatureAttributeEncode
xvii. 1.3.6.1.4.1.311.2.4.4 (szOID_SEALING_TIMESTAMP)
Function: wintrust!WVTAsn1SealingTimestampAttributeEncode
2. Next, SoftpubDllRegisterServer is called where it calls WintrustAddActionID to register the
following trust providers:
a. WINTRUST_ACTION_GENERIC_VERIFY_V2
b. WIN_SPUB_ACTION_PUBLISHED_SOFTWARE
c. WIN_SPUB_ACTION_PUBLISHED_SOFTWARE_NOBADUI
d. WINTRUST_ACTION_GENERIC_CERT_VERIFY
e. WINTRUST_ACTION_TRUSTPROVIDER_TEST
f. HTTPSPROV_ACTION. The following related default “usages” are also registered (all
stored in
HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Provider
s\Trust\Usages):
i. 1.3.6.1.4.1.311.10.3.3 (szOID_SERVER_GATED_CRYPTO)
Alloc/dealloc function: wintrust!SoftpubLoadDefUsageCallData
ii. 1.3.6.1.5.5.7.3.1 (szOID_PKIX_KP_SERVER_AUTH)
Alloc/dealloc function: wintrust!SoftpubLoadDefUsageCallData
iii. 1.3.6.1.5.5.7.3.2 (szOID_PKIX_KP_CLIENT_AUTH)
Alloc/dealloc function: wintrust!SoftpubLoadDefUsageCallData
iv. 2.16.840.1.113730.4.1 (szOID_SGC_NETSCAPE)
Alloc/dealloc function: wintrust!SoftpubLoadDefUsageCallData
g. DRIVER_ACTION_VERIFY
h. WINTRUST_ACTION_GENERIC_CHAIN_VERIFY
- 15 -
3. Finally, mssip32DllRegisterServer is called to register SIPs. Specifically, CryptSIPAddProvider is
called to register the following SIPs:
a. DE351A42-8E59-11D0-8C47-00C04FC295EE
CRYPT_SUBJTYPE_FLAT_IMAGE
b. C689AABA-8E78-11d0-8C47-00C04FC295EE
CRYPT_SUBJTYPE_CABINET_IMAGE
c. C689AAB8-8E78-11D0-8C47-00C04FC295EE
CRYPT_SUBJTYPE_PE_IMAGE
d. DE351A43-8E59-11D0-8C47-00C04FC295EE
CRYPT_SUBJTYPE_CATALOG_IMAGE
e. 9BA61D3F-E73A-11D0-8CD2-00C04FC295EE
CRYPT_SUBJTYPE_CTL_IMAGE
4. mssip32DllRegisterServer also explicitly deregisters the following SIPs (in reality, the Java SIP
artifacts remain in the registry in a default built of Windows):
a. C689AAB9-8E78-11D0-8C47-00C04FC295EE
CRYPT_SUBJTYPE_JAVACLASS_IMAGE
b. 941C2937-1292-11D1-85BE-00C04FC295EE
CRYPT_SUBJTYPE_SS_IMAGE
While it is certainly not recommended, all wintrust trust provider and SIP registrations can be formally
deregistered with the following command (from an elevated prompt):
● regsvr32.exe /u C:\Windows\System32\wintrust.dll
Running the above command would strip Windows of the ability to perform most digital signature
retrieval and trust validation in user mode.
Trust Provider and SIP Interaction
While the interaction between a SIP and a trust provider was mentioned in the “Message” trust provider
step previously, a diagram illustrating all the steps in order should be helpful.
- 16 -
Illustration of the interplay between WinVerifyTrust, trust providers, and subject interface packages
Hopefully by now, there is a basic level of understanding about the role of trust providers and subject
interface packages and the extent to which their architecture is designed to be modular through
registration in the registry. In the next section, attacks on the modularity of the Windows trust
architecture will be discussed.
- 17 -
Windows Trust Architecture Attacks
Armed with a basic understanding of the Windows user mode trust architecture and an elevated
privilege level, an attacker has what he/she needs to subvert trust. What might an attacker wish to
achieve by subverting trust?
1. Have the OS believe that attacker-supplied code was signed with and validated as a “trusted”
code signing certificate - e.g. one used to sign Microsoft code. The motivation behind such an
attack would be any of the following:
a. To influence a security product to classify attacker supplied code as benign.
b. To hide from security/diagnostic tools that perform signature validation.
c. To generally remain under the radar. Incident responders may be more likely to
overlook code that is “signed using a legitimate certificate”.
d. To load malicious code in the context of any process that performs user mode trust
validation.
2. Subvert application whitelisting publisher rules that enforce policy based on trusted signing
authorities. Publisher enforcement is one of the most common whitelisting rule scenarios as it
allows code signed by trusted publishers to execute even across updates versus hash rules that
don’t permit software updates and are more difficult to maintain and audit.
SIP Hijack #1: CryptSIPDllGetSignedDataMsg
As was explained earlier, the CryptSIPDllGetSignedDataMsg component of a SIP is what enables the
retrieval of an encoded digital certificate from a signed file. As a reminder, the implemented export
function for a SIP’s CryptSIPDllGetSignedDataMsg component is present in the following registry key:
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingTy
pe 0\CryptSIPDllGetSignedDataMsg\{SIP Guid}
○ Dll - Path to the DLL that implements the digital signature
retrieval function
○ FuncName - The name of the exported function that
implements the digital signature retrieval function
Additionally, as was discussed previously, CryptSIPDllGetSignedDataMsg functions have the following
documented function prototype:
BOOL WINAPI CryptSIPGetSignedDataMsg(
IN SIP_SUBJECTINFO *pSubjectInfo,
OUT DWORD *pdwEncodingType,
IN DWORD dwIndex,
IN OUT DWORD *pcbSignedDataMsg,
OUT BYTE *pbSignedDataMsg);
- 18 -
Any attacker familiar with C/C++ will be able to easily implement such a function and replace the
existing SIP entry with that of their malicious function. First, it is important to understand the meaning