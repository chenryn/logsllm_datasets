It naturally handles
dynamic rule updates. We then resolve the secondary graph
using loopy belief propagation [40] which, in general, starts
with arbitrary initial values and iteratively updates messages
till convergence. Note that we adapt loopy belief propagation
by pre-calculating suitable initial values, which does not
compromise the original algorithm’s correctness. Figure 19 in
Appendix presents the statistics of the subgraphs in evaluation.
VI. EVALUATION
To assess the effectiveness of OSPREY, we perform two
sets of experiments, using the benchmarks from TIE [12]
and Howard [14]. The ﬁrst set
is performed on Core-
utils [42], a standard benchmark widely used in binary anal-
ysis projects [14], [12], [43], [11], [29], consisting of 101
programs. We compare OSPREY with other state-of-the-art
binary analysis tools, including Ghidra (version 9.2), Angr
(version 8.20) and IDA Pro (version 7.2). We cannot compare
with TIE as the system is not available. And we conﬁrmed
with the BAP [43] team that BAP does not have TIE as part
of it. Another set is performed on the benchmark provided
by the Howard project [14], consisting of 5 programs. All
experiments were conducted on a server equipped with 48-
cores CPU (Intel® XeonTM Silver 4214 CPU @ 2.20GHz)
and 256G main memory. To follow a similar setup in TIE and
Howard, we use GCC 4.4 to compile the programs into two
versions: a version with debugging information used as the
ground truth and a stripped version used for evaluation. Our
assumption of proper disassembly is guaranteed because GCC
does not interleave code and data on Linux [44].
A. Evaluation on Coreutils
Similar to the standard in the literature [12], [14], we
inspect individual variables on the stacks and heaps (including
structure types). If it is a pointer type, we inspect the structure
that is being pointed to. For example, if a (Socket *)
variable is recovered as (void*), we consider it incorrect.
We say it is correct only if the variable is recovered as a pointer
pointing to a structure homomorphic to Socket. We only
consider the functions covered by BDA . The overall recall and
precision are shown in Figure 9 and Figure 10, respectively. As
we can see, OSPREY achieves more than 88% recall, and more
than 90% precision, outperforming the best of other tools (i.e.,
Ghidra with around 77% recall and 70% precision). Figures
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
823
30.00%100.00%Overall VariableRecovery (Recall)ProgramsOSPREYGhidraIDA Pro 7.2Angr88.62%76.29%59.27%76.73%0.00%50.00%100.00%Overall Variable Recovery (Precision)ProgramsOSPREYGhidraIDA Pro 7.2Angr90.18%66.88%33.40%69.77%30.00%100.00%Overall VariableRecovery (Recall)ProgramsOSPREYGhidraIDA Pro 7.2Angr88.62%76.29%59.27%76.73%30.00%100.00%Overall VariableRecovery (Precision)ProgramsOSPREYGhidraIDA Pro 7.2Angr90.18%66.88%33.40%69.77%Fig. 11: Recall for complex variables
Fig. 12: Precision for complex variables
11 and 12 present the recall and precision of complex types
recovery. Complex types include structures, unions, arrays and
pointers to structures and unions. Note that Angr could not
recover complex data types, hence we do not list its results
on the ﬁgures. Observe that the recall of OSPREY is around
74%, more than 2 times higher than Ghidra and IDA Pro. The
precision of OSPREY also outperforms Ghidra and IDA Pro.
One may mention that IDA Pro has a comparable precision
rate with OSPREY. The reason is that IDA Pro performs a very
conservative type analysis to ensure high precision, leading to
a low recall. In Appendix D, we provide insights about why
in some cases the deterministic approaches perform better.
To better quantify our results on complex variables, we
construct a syntax tree for each complex type (with ﬁelds
being the child nodes). Nesting structures and unions are
precisely modeled, and any inner nesting structure or union
type without outer references are ignored. Cycles are removed
using a leaf node with a special type tag. We then compare
the edit distance of the recovered trees and the ground-truth
trees. We compute tree difference that is deﬁned as the ratio of
the tree edit distance (i.e., the minimum number of tree edits
that transform a tree into another) and the whole tree size.
The smaller the tree difference, the better the recovery result.
Figure 20 in Appendix shows the results. Overall, OSPREY
has the minimal tree difference, which is 2.50 and 2.18 times
smaller than Ghidra and IDA Pro. Details can be found in our
supplementary material [45].
B. Evaluation on Howard Benchmark
improvement
Table II in Appendix shows the results for the Howard
benchmark. Overall, OSPREY substantially outperforms
Ghidra, IDA Pro and Angr, especially for complex variables,
in all metrics (recall, precision and tree difference) For all
variables, the precision improvement over Ghidra, IDA Pro,
and Angr is 28.38%, 38.85%, and 65.51%, respectively, and
the recall
is 22.98%, 34.78%, and 48.49%,
respectively. For complex variables, the precision improvement
over Ghidra and IDA Pro is 40.73% and 25.18%, respectively,
and the recall improvement is 50.64% and 62.22%, respec-
tively. Our tree differences are 5.21 and 2.64 times smaller than
Ghidra and IDA Pro. Compared to Coreutil programs, these
programs are more complex, providing more hints to OSPREY.
Especially in the complex variable recovery for lighttpd,
OSPREY has 84% recall and 86% precision, while Ghidra
has 5.5% recall and 27% precision, IDA Pro 6.8% and 50%.
Manual inspection discloses that lighthttp has a large number
of structures on heap, providing ample hints for OSPREY. We
also perform side-by-side comparison with Howard. Details
can be found in our supplementary material [45].
C. Sensitivity Analysis
We analyze the sensitivity of OSPREY’s accuracy on the
prior probabilities p ↑ and p ↓. Table I shows the average F1
scores [46] for the programs in the Howard benchmark set,
with p ↑ varying from 0.7 to 0.9 and p ↓ from 0.1 to 0.3. We
elide other metrics as they reveal similar trendings. Note that
the F1 scores vary within a limited range, less than 2%, with
different prior probabilities. It supports that OSPREY is robust
against the prior probability changes.
D. Performance Evaluation and Ablation Study
We evaluate the execution time (Appendix G) and scala-
bility (Appendix H). We also study the impact of aggressive
optimization (Appendix I) and compilers (Appendix J), as well
as the contribution breakdown of different components, by re-
placing BDA with a dynamic execution based behavior proﬁler
and replacing probabilistic inference with deterministic infer-
ence (Appendix K). The results show that OSPREY substantial
outperforms other techniques in terms of precision and recall
with various compilers and optimization settings, and with
complex programs such as Nginx and Apache, although it is
the most heavy-weight. The contribution breakdown of BDA
and probabilistic inference shows that both are critical.
VII. APPLICATIONS
A. Improving IDA Decompilation
Decompilation transforms low level binary code to human-
readable high-level program. The readability of decompiled
code hinges on the recovery of variables and data structures.
To investigate how OSPREY improves decompilation in IDA,
we implement an IDA plugin to feed the decompiler of
IDA with the recovered information provided by OSPREY. In
Figure 13 and 14, we show a case study on the decompilation
of lighttpd’s function network_register_fdevents.
The ground truth, the decompilation results of the vanilla IDA,
and of the enhanced IDA are presented in the three columns,
respectively. IDA can precisely recover some primitive vari-
ables (e.g., result at line 4 and v3 at line 5), but fails
to recover the complex data structures (e.g., v4 at line 6,
which is a pointer to a server_socket structure). OSPREY
can successfully recover the server_socket structure. In
fact as shown in Figure 13d and 13d, OSPREY can precisely
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
824
20.00%100.00%Complex VariableRecovery (Recall)ProgramsOSPREYGhidraIDA Pro 7.274.02%22.50%27.57%30.00%100.00%Complex VariableRecovery (Precision)ProgramsOSPREYGhidraIDA Pro 7.289.05%82.09%43.81%20.00%100.00%Complex VariableRecovery (Recall)ProgramsOSPREYGhidraIDA Pro 7.274.02%22.50%27.57%30.00%100.00%Complex VariableRecovery (Precision)ProgramsOSPREYGhidraIDA Pro 7.289.05%82.09%43.81%TABLE I: Average F1 scores for OSPREY
with different prior probabilities
p ↑= 0.8
0.907
0.912
0.908
p ↑= 0.7
0.894
0.909
0.898
p ↑= 0.9
0.901
0.902
0.903
p ↓= 0.1
p ↓= 0.2
p ↓= 0.3
(a) Ground truth
(c) IDA Pro 7.2 w/ OSPREY
Fig. 13: Decompiled results for lighttpd’s function network register fdevents
(b) Vanilla IDA Pro 7.2
(d) Ground truth
(e) By OSPREY
Fig. 14: Reconstructed Symbols
recover the multiple layers of structure nesting and all the
pointer ﬁelds. Note that server_socket_array is an
inner structure type without any outer reference. The recovery
of the structure can substantially improve the readability of the
decompiled code. See lines 19-20 in Figure 13a. Without the
recovered information, we can only learn there are a memory
access with complex addressing. With the recovered ﬁeld and
array accesses, we have much more semantic information.
B. Harden Stripped Binary
In the second application, we enhance a recent binary
address sanitizer (ASAN) [47] tool RetroWrite [48]) that can-
not detect out-of-bound accesses within stack frames or data
structures (e.g., overﬂow of an array ﬁeld inside a structure).
The extended tool can take our recovered structure information
to provide protection within data structures. It successfully
detects CVE-2019-12802 [49] which cannot be detected by
the vanilla RetroWrite. Details can be found in Appendix F.
Probabilistic Program Analysis. In recent years, probabilistic
techniques have been increasingly used in program analysis
applications, including symbolic execution [69], [70], model
checking [71], [72], [73], binary disassembling [74], and
Python type inference [75]. To the best of our knowledge, OS-
PREY is the ﬁrst approach that enforces probabilistic variable
recovery on stripped binaries.
IX. CONCLUSION
We develop a novel probabilistic variable and data structure
recovery technique for stripped binaries. It features using
random variables to denote the likelihood of recovery results
such that a large number of various kinds of hints can be
organically integrated with the inherent uncertainty considered.
A customized and optimized probabilistic constraint solving
technique is developed to resolve these constraints. Our ex-
periments show that our technique substantially outperforms
the state-of-the-art and improves two downstream analysis.
VIII. RELATED WORK
ACKNOWLEDGMENT
Binary Analysis. Binary analysis could be static [50], [51],
[52], dynamic [1], [53], [54] or hybrid [55], [56]. It has a wide
range of applications, such as IoT ﬁrmware security [57], [58],
[59], [60], [61], [62], memory forensics [63], [64], malware
analysis [65], and auto-exploit [66], [67]. A large body of
works focus on function entry identiﬁcation [68], which is the
fundamental but challenging tasks of binary analysis. Most
related to OSPREY are the studies that focus on binary variable
recovery and type inference [12], [1], [53], [11]. Speciﬁcally,
TIE [12] and REWARD [1] perform static and dynamic
analysis to recover type information, respectively. Howard [53]
improves REWARDS using heuristics to resolve conﬂicts.
Angr [11] leverages symbolic execution to recover variables.
Our work is also related to decompilation [9]. Since it focuses
on control-ﬂow recovery, OSPREY is complementary.
The authors would like to thank the anonymous reviewers
and Anders Fogh (the PC contact) for their constructive
comments.
The Purdue authors were supported in part by NSF 1901242
and 1910300, ONR N000141712045, N000141410468 and
N000141712947, and IARPA TrojAI W911NF-19-S-0012.
The RUC author was supported in part by National Natural
Science Foundation of China (NSFC) under grants 62002361
and U1836209, and the Fundamental Research Funds for
the Central Universities and the Research Funds of Renmin
University of China under grant 20XNLG03. The UVA author
was supported in part by NSF 1850392 and 1916499. Any
opinions, ﬁndings, and conclusions in this paper are those of
the authors only and do not necessarily reﬂect the views of
our sponsors.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
825
1234567891011121314151617181920212223242526272829intnetwork_rxxx(server *srv){server*v1; //rbxintresult; //raxsize_tv3; //rbpserver_socket*v4; //r12fdnode*v5; //raxfdevents*v6; //rdiv1 = srv;result = fdevent_sxxx(srv->ev);if ( result != -1 ){v3 = 0LL;if ( !srv->sockets_disabled){while ( v1->srv_sockets.used > v3 ){v4 = v1->srv_sockets.ptr[v3++];v5 =fdevent_gxxx(v1->ev, v4->fd,network_sxxx, v4);v6 = v1->ev;v4->fdn= v5;fdevent_fxxx(v6, v5, 1);}}result = 0LL;}return result;}1234567891011121314151617181920212223242526272829__int32 __fastcallsub_D840(__int64 a1){_QWORD *v1; //rbx__int32 result;//raxunsigned __int64 v3; //rbp__int64 v4; //r12__int64 v5; //rax__int64 v6; //rdiv1 =(_QWORD *)a1;result =sub_12B7A(*(_QWORD *)(a1+ 24));if ( (_DWORD)result != -1 ){v3 = 0LL;if ( !*(_DWORD *)(a1 + 100) ){while (v1[2] > v3 ){v4 = *(_QWORD*)(*v1 + 8 * v3++);v5 =sub_21860(v1[3], *(unsigned int*)(v4 + 112),sub_18F30, v4);v6 = v1[3];*(_QWORD *)(v4 + 120) = v5;sub_219C0(v6, v5, 1);}}result = 0;}returnresult;}__int32 __fastcallsub_D840(struct_C264 *a1){struct_C264 *v1; //rbx__int32 result; //raxunsigned __int64 v3; //rbpstruct_CF4A *v4; //r12struct_12A42 *v5; //raxstruct_12A0E *v6; //rdiv1 = a1;result = sub_12B7A(a1->ptr_field_28);if ( result != -1 ){v3 = 0LL;if ( !a1->dat_field_74 ){while ( v1->dat_field_10 > v3 ){v4 = v1->ptr_ptr_field_0[v3++];v5 =sub_21860(v1->ptr_field_28, v4->dat_field_10,sub_18F30, v4);v6 = v1->ptr_field_28;v4->ptr_field_18 = v5;sub_219C0(v6, v5, 1);}}result = 0;}return result;}1234567891011121314151617181920212223242526272829struct server {struct server_socket_array{struct server_socket{sockaddraddr;intfd;unsigned short is_ssl;unsigned short sidx;fdnode*fdn;buffer *srv_token;} **ptr;size_tsize;size_tused;} srv_sockets;fdevents*ev;...intsockets_disabled;...} struct struct_C264 {struct struct_CF4A {sockaddrdat_field_0;__int32 dat_field_10;unsigned __int16 field_14;unsigned __int16 field_16;struct_12A42 *ptr_field_18;struct_1B1A9 *ptr_field_20;} **ptr_ptr_field_0;unsigned __int64 dat_field_8;unsigned __int64 dat_field_10;struct_12A0E *ptr_filed_28;... __int32 dat_field_74;...} REFERENCES
[1] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the 11th Annual
Information Security Symposium, 2010, pp. 1–1.
[2] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-
ﬂow bending: On the effectiveness of control-ﬂow integrity,” in 24th
{USENIX} Security Symposium ({USENIX} Security 15), 2015, pp.
161–176.
[3] J.-P. Martin, M. Hicks, M. Costa, P. Akritidis, and M. Castro, “Dynami-
cally checking ownership policies in concurrent c/c++ programs,” ACM
Sigplan Notices, vol. 45, no. 1, pp. 457–470, 2010.
[4] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang, “Mapping
kernel objects to enable systematic integrity checking,” in Proceedings
of the 16th ACM conference on Computer and communications security,
2009, pp. 555–565.
[5] K. Fawaz, H. Feng, and K. G. Shin, “Anatomization and protection
of mobile apps’ location privacy threats,” in 24th {USENIX} Security
Symposium ({USENIX} Security 15), 2015, pp. 753–768.
[6] E. Bauman, Z. Lin, K. W. Hamlen et al., “Superset disassembly:
Statically rewriting x86 binaries without heuristics.” in NDSS, 2018.
[7] “About ida,” https://www.hex-rays.com/products/ida/, 2019.
[8] “Ghidra,” https://ghidra-sre.org/, 2019.
[9] D. Brumley, J. Lee, E. J. Schwartz, and M. Woo, “Native x86 decompila-
tion using semantics-preserving structural analysis and iterative control-
ﬂow structuring,” in Presented as part of the 22nd USENIX Security
Symposium (USENIX Security 13), 2013, pp. 353–368.
[10] C. Qian, H. Hu, M. Alharthi, P. H. Chung, T. Kim, and W. Lee,
“{RAZOR}: A framework for post-deployment software debloating,”
in 28th {USENIX} Security Symposium ({USENIX} Security 19), 2019,
pp. 1733–1750.
[11] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel et al., “Sok:(state
of) the art of war: Offensive techniques in binary analysis,” in 2016 IEEE
Symposium on Security and Privacy (SP).
IEEE, 2016, pp. 138–157.
[12] J. Lee, T. Avgerinos, and D. Brumley, “Tie: Principled reverse engineer-
ing of types in binary programs,” 2011.
[13] G. Balakrishnan and T. Reps, “Analyzing memory accesses in x86
executables,” in International conference on compiler construction.
Springer, 2004, pp. 5–23.
[14] A. Slowinska, T. Stancescu, and H. Bos, “Howard: A dynamic excavator
for reverse engineering data structures.” in NDSS, 2011.
[15] Z. Zhang, W. You, G. Tao, G. Wei, Y. Kwon, and X. Zhang, “Bda:
practical dependence analysis for binary executables by unbiased whole-
program path sampling and per-path abstract interpretation,” Proceed-