### Dynamic Rule Updates and Loopy Belief Propagation

Our system naturally handles dynamic rule updates. We then resolve the secondary graph using loopy belief propagation [40], which, in general, starts with arbitrary initial values and iteratively updates messages until convergence. We adapt loopy belief propagation by pre-calculating suitable initial values, which does not compromise the original algorithm’s correctness. The statistics of the subgraphs in the evaluation are presented in Figure 19 in the Appendix.

### Evaluation

To assess the effectiveness of OSPREY, we conducted two sets of experiments using benchmarks from TIE [12] and Howard [14].

#### Evaluation on Coreutils

The first set of experiments was performed on Coreutils [42], a standard benchmark widely used in binary analysis projects [14, 12, 43, 11, 29], consisting of 101 programs. We compared OSPREY with other state-of-the-art binary analysis tools, including Ghidra (version 9.2), Angr (version 8.20), and IDA Pro (version 7.2). We were unable to compare with TIE as the system is not available. Additionally, we confirmed with the BAP [43] team that BAP does not include TIE.

All experiments were conducted on a server equipped with a 48-core CPU (Intel® XeonTM Silver 4214 CPU @ 2.20GHz) and 256GB of main memory. To follow a similar setup as in TIE and Howard, we used GCC 4.4 to compile the programs into two versions: one with debugging information (used as the ground truth) and one stripped version (used for evaluation). Our assumption of proper disassembly is guaranteed because GCC does not interleave code and data on Linux [44].

**Variable Recovery**

We inspected individual variables on the stacks and heaps, including structure types. If a variable is a pointer type, we inspected the structure it points to. For example, if a `(Socket *)` variable is recovered as `(void*)`, we consider it incorrect. It is only considered correct if the variable is recovered as a pointer pointing to a structure homomorphic to `Socket`. We only considered functions covered by BDA. The overall recall and precision are shown in Figures 9 and 10, respectively. OSPREY achieved more than 88% recall and more than 90% precision, outperforming the best of the other tools (Ghidra with around 77% recall and 70% precision).

**Complex Types Recovery**

Figures 11 and 12 present the recall and precision for complex types recovery, which include structures, unions, arrays, and pointers to structures and unions. Note that Angr could not recover complex data types, so its results are not listed. OSPREY's recall is around 74%, more than twice that of Ghidra and IDA Pro. OSPREY also outperformed Ghidra and IDA Pro in precision. IDA Pro has a comparable precision rate with OSPREY, but this is due to its very conservative type analysis, leading to a low recall. In Appendix D, we provide insights into why deterministic approaches sometimes perform better.

To better quantify our results on complex variables, we constructed a syntax tree for each complex type, with fields as child nodes. Nesting structures and unions are precisely modeled, and any inner nesting structure or union type without outer references are ignored. Cycles are removed using a leaf node with a special type tag. We then compared the edit distance of the recovered trees and the ground-truth trees. The tree difference is defined as the ratio of the tree edit distance (i.e., the minimum number of tree edits that transform one tree into another) to the whole tree size. The smaller the tree difference, the better the recovery result. Figure 20 in the Appendix shows the results. Overall, OSPREY has the minimal tree difference, which is 2.50 and 2.18 times smaller than Ghidra and IDA Pro, respectively. Details can be found in our supplementary material [45].

#### Evaluation on Howard Benchmark

Table II in the Appendix shows the results for the Howard benchmark. OSPREY substantially outperformed Ghidra, IDA Pro, and Angr, especially for complex variables, in all metrics (recall, precision, and tree difference). For all variables, the precision improvement over Ghidra, IDA Pro, and Angr is 28.38%, 38.85%, and 65.51%, respectively, and the recall improvement is 22.98%, 34.78%, and 48.49%, respectively. For complex variables, the precision improvement over Ghidra and IDA Pro is 40.73% and 25.18%, respectively, and the recall improvement is 50.64% and 62.22%, respectively. Our tree differences are 5.21 and 2.64 times smaller than Ghidra and IDA Pro, respectively. Compared to Coreutils programs, these programs are more complex, providing more hints to OSPREY. Specifically, in the complex variable recovery for lighttpd, OSPREY achieved 84% recall and 86% precision, while Ghidra had 5.5% recall and 27% precision, and IDA Pro had 6.8% recall and 50% precision. Manual inspection revealed that lighttpd has a large number of structures on the heap, providing ample hints for OSPREY. We also performed a side-by-side comparison with Howard. Details can be found in our supplementary material [45].

### Sensitivity Analysis

We analyzed the sensitivity of OSPREY's accuracy to the prior probabilities \( p_{\uparrow} \) and \( p_{\downarrow} \). Table I shows the average F1 scores [46] for the programs in the Howard benchmark set, with \( p_{\uparrow} \) varying from 0.7 to 0.9 and \( p_{\downarrow} \) from 0.1 to 0.3. The F1 scores vary within a limited range, less than 2%, with different prior probabilities, supporting that OSPREY is robust against changes in prior probabilities.

### Performance Evaluation and Ablation Study

We evaluated the execution time (Appendix G) and scalability (Appendix H). We also studied the impact of aggressive optimization (Appendix I) and compilers (Appendix J), as well as the contribution breakdown of different components, by replacing BDA with a dynamic execution-based behavior profiler and replacing probabilistic inference with deterministic inference (Appendix K). The results show that OSPREY substantially outperforms other techniques in terms of precision and recall with various compilers and optimization settings, and with complex programs such as Nginx and Apache, although it is the most resource-intensive. The contribution breakdown of BDA and probabilistic inference shows that both are critical.

### Applications

#### Improving IDA Decompilation

Decompilation transforms low-level binary code into human-readable high-level code. The readability of decompiled code depends on the recovery of variables and data structures. To investigate how OSPREY improves decompilation in IDA, we implemented an IDA plugin to feed the decompiler with the recovered information provided by OSPREY. Figures 13 and 14 show a case study on the decompilation of lighttpd’s function `network_register_fdevents`. The ground truth, the decompilation results of the vanilla IDA, and the enhanced IDA are presented in the three columns, respectively. IDA can precisely recover some primitive variables (e.g., `result` at line 4 and `v3` at line 5) but fails to recover complex data structures (e.g., `v4` at line 6, which is a pointer to a `server_socket` structure). OSPREY can successfully recover the `server_socket` structure, including multiple layers of structure nesting and all pointer fields. This recovery significantly improves the readability of the decompiled code. See lines 19-20 in Figure 13a. Without the recovered information, we can only see a memory access with complex addressing. With the recovered field and array accesses, we have much more semantic information.

#### Hardening Stripped Binaries

In the second application, we enhanced a recent binary address sanitizer (ASAN) tool, RetroWrite [48], which cannot detect out-of-bound accesses within stack frames or data structures (e.g., overflow of an array field inside a structure). The extended tool can use our recovered structure information to provide protection within data structures. It successfully detected CVE-2019-12802 [49], which cannot be detected by the vanilla RetroWrite. Details can be found in Appendix F.

### Conclusion

We developed a novel probabilistic variable and data structure recovery technique for stripped binaries. This technique uses random variables to denote the likelihood of recovery results, allowing a large number of various kinds of hints to be integrated with inherent uncertainty. A customized and optimized probabilistic constraint solving technique was developed to resolve these constraints. Our experiments show that our technique substantially outperforms the state-of-the-art and improves two downstream analyses.

### Related Work

**Binary Analysis**

Binary analysis can be static [50, 51, 52], dynamic [1, 53, 54], or hybrid [55, 56]. It has a wide range of applications, such as IoT firmware security [57, 58, 59, 60, 61, 62], memory forensics [63, 64], malware analysis [65], and auto-exploit [66, 67]. A large body of work focuses on function entry identification [68], which is a fundamental but challenging task in binary analysis. Most related to OSPREY are studies that focus on binary variable recovery and type inference [12, 1, 53, 11]. Specifically, TIE [12] and REWARD [1] perform static and dynamic analysis to recover type information, respectively. Howard [53] improves REWARDS using heuristics to resolve conflicts. Angr [11] leverages symbolic execution to recover variables. Our work is also related to decompilation [9], as it focuses on control-flow recovery, making OSPREY complementary.

### Acknowledgment

The authors would like to thank the anonymous reviewers and Anders Fogh (the PC contact) for their constructive comments. The Purdue authors were supported in part by NSF 1901242 and 1910300, ONR N000141712045, N000141410468, and N000141712947, and IARPA TrojAI W911NF-19-S-0012. The RUC author was supported in part by the National Natural Science Foundation of China (NSFC) under grants 62002361 and U1836209, and the Fundamental Research Funds for the Central Universities and the Research Funds of Renmin University of China under grant 20XNLG03. The UVA author was supported in part by NSF 1850392 and 1916499. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of our sponsors.