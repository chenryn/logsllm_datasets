软
0x7FFDD000: TEB2
0x7FFDD000: TEB2
0x7FFDD000:TEB2
件
0x7FFDC000: TEB3
0x7FFDC000: TEB3
0x7FFDC000: TEB3
漏
Dx7FFDB000: TEB4
N
3pco  pxL
0X7FFDB000:TEB9
洞分折
0x7FFDA000: TEB5
0x7FFDA000: TEB5
0x7FFDA000: TEB5
Ox7FFD9000: TEB6
Ox7FFD9000:TEB6
0x7FFD9000: TEB6
析
Ox7FFD8000: TEB7
1p L pL
0X7FFD8000:TEB10
技
Ox7FFD7000: TEB8
术
Ox7FFD7000:TEB8
0x7FFD7000: TEB8
（第
0X7FFD6000: TEB11
初始状态依次启动了
4、7号线程结束，相应
依次启动9、10、11号线
2
8个线程
的TEB位置空闲出来
程，其中，9、10号线程重
版
用先前4、7号线程的TEB
空间
图6.1.15线程环境块位置的预测
当遇到多线程的程序（尤其是服务器程序）时，我们将很难判断当前的线程是哪一个，以
及对应的TEB在什么位置。因此，攻击TEB中S.E.H头节点的方法一般用于单线程的程序。
题外话：尽管HalvarFlake给出了若干在多线程情况下攻击TEB的思路，例如，通过
创建很多线程或关闭大重线程去试图控制TEB排列等，但以我个人的观点，我并不
认为在多线程状态下仍然执著地去利用TEB是一种明智的做法一因为还有许多比
利用TEB更加容易的备选方案。
3.攻击U.E.F
U.E.F（UnhandledExceptionFilterO）即系统默认的异常处理函数，是系统处理异常的最
后一个环节。如果能够利用堆溢出产生的DWORDSHOOT把这个“终极异常处理函数”的
调用句柄覆盖为shellcode的入口地址，再制造一个其他异常处理都无法解决的异常，那么
当系统使用U.E.F作为最后一根救命稻草来解决异常时，shellcode就可以堂而皇之地得到
执行。
这种方法最早也是由HalvarFlake提出的。由于U.E.F句柄在不同操作系统和补丁版本下
可能不同，HalvarFlake在“ThirdGenerationExploitation”中同时还给出了确定U.E.F句柄的
具体方法，那就是反汇编kernel32.dil中的导出函数SetUnhandledExceptionFilterO。
以Windows2000为例，将kernel32.dll拖进IDA，稍等片刻，待自动分析结束，单击
“Functions”选项卡，会列出文件内所有的函数名，键入SetUnhandledExceptionFilter会自动定
位到这个函数，并显示出这个函数的入口地址等信息，如图6.1.16所示。
双击这个函数，IDA会自动跳转到这个函数的反汇编代码处，如图6.1.17所示。
194
---
## Page 220
第
ratorDesktoplchspter_o8vpfwrin20ookernel3..I
6
Opbons
Windoms Hep
日的给T
章
+X
品
NXSK
形
形
色
IDAVAHeVea EpotanotNNae
色
Furcion nane
SegmertStat
Lengh
RFLSBT-
的
OponflMappingw
77E676F9
00000092
77E67786
R
B
内
Vak
000000CA
R
1
F1:
存
let
let
77E67914
77E67A07
20000000
GerStingTyoew
0000011D
攻
sub_77E67824
let
7767824
ted
00000024
H
击
77E67877
0000001C
TECNTA
日
技
术
vers1on 0.9.0P1na1（ser1a10）1nie1a112ed
图6.1.16定位U.E.F
.text:77E678A7
SetunhandledExceptionFilter proc near
public SetunhandledExceptionFilter
.text:77E678A7
.text:77E678A7
.text:77E678A7
1pTopLevelExceptionFilter= dword ptr
.text:77E678A7
.text:77E678A7
ROU
ecx,[esp+1pToplevelExceptionFi1ter]
.text:77E678AB
ROU
eax,dword_77EcB44C
.text:77E678B0
ROU
.text:77E678B6
SetunhandledExceptionFilter endp
retn
.text:77E678B6
.text：77E6789：明明明明明明呢明明明明明明即明确哪购明即可明明聊即哪哪哪调那明可
.text:77E678B6
图6.1.17定位U.E.F
其中，0x77EC044C就是存放系统默认异常处理函数入口地址的地方。
题外话：通过类似的方法，可以发现U.E.F句柄在WindowsXPSP1上存放的位置。
尽管DavidLitchfield给出的WindowsXPSP1的U.E.F位工是0x77ED73B4，在我
的WindowsXPSP1实验环境中，U.E.F位于0x77EB73B4。这种差异其实并不奇怪，
因为HalvarFake在提出这种利用方式的时候就告诉了我们U.E.F的位至可能因为
操作系统版本和补丁情况而有所差异。此外，如果您直接反汇编WindowsXPSP2，
将会发现SetUnhandledExceptionFilterO函数与Windows2000和WindowsXPSP1有
很大不同。
DavidLitchfield在谈到U.E.F利用时补充到结合使用跳板技术能够使exploit成功率更高。
如果您不熟悉利用跳板定位shellcode的原理，请复习3.2节的内容。
David指出在异常发生时，EDI往往仍然指向堆中离shellcode不远的地方，把U.E.F的句
195
---
## Page 221
day
柄覆盖成一条calldwordptr[edi+Ox78]的指令地址往往就能让程序跳到shellcode中，除此以
安
外，指令
全
calldword ptr[ESI+0x4C]
软
cal1dwordptr[EBP+0x74]
件
有时也能起到同样的定位shellcode的作用。
漏
依以往的调试经验，EBX、EAX等寄存器有时也会指向堆中；另外，堆溢出中跳板的选择
洞
不像栈溢出中有jmpesp作为“保留曲目”，利用EDI的跳转并不能保证百分之百的成功。
分
析
总之，堆溢出的跳板选择依赖于调试时的具体情况，没有定法，有时还需要一点灵感。
技
4.攻击PEB中的函数指针
术
（第
还记得第5章堆溢出中我们所做的最后一个实验吗？当U.E.F被使用后，将最终调用
ExitProcessO来结束程序。ExitProcessO在清理现场的时候需要进入临界区以同步线程，因此会
2
调用RtlEnterCriticalSectionO和RtlLeaveCriticalSectionO。
版
ExitProcessO是通过存放在PEB中的一对指针来调用这两个函数的，如果能够在DWORD
SHOOT时把PEB中的这对指针修改成shellcode的入口地址，那么，在程序最终结束时，
ExitProcessO将启动shellcode。
这种方法也是DavidLitchfield在“Windowsheapoverflows”中首次提出的。比起位置不固
定的TEB，PEB的位置永远不变，因此，DavidLitchfield提出的这种方法比HalvarFlake所说
的淹没TEB中S.E.H链头节点的方法更加稳定可靠。
关于这种利用方式的详细信息请参看5.4节中的实验部分。
6.2“offbyone”的利用
HalvarFlake在“ThirdGenerationExploitation”中，按照攻击的难度把漏洞利用技术分成3
个层次。
（1）第一类是基础的栈溢出利用。攻击者可以利用返回地址等轻松劫持进程，植入
shellcode，例如，对strcpy、strcat等函数的攻击等。
（2）第二类是高级的栈溢出利用。这时，栈中有诸多的限制因素，溢出数据往往只能淹
没部分的EBP，而无法抵达返回地址的位置。因此，直接淹没返回地址获得EIP的控制权是
利用。
（3）第三类攻击则是堆溢出利用及格式化串漏洞的利用。格式化串漏洞的利用将在第8章
中介绍。
思路。
思考如下的代码片段。
196
---
## Page 222
第
voidoff_by_one(char*input)
6
章
char buf[200];
inti=0,len=0;
形
len=sizeof（buf);
形色色的内存攻击技术
for（i=0;input[i]&&（itest();
对这段程序需要说明如下。
（1）虚表指针位于成员变量charbuf[200]之前，程序中通过p_vtable=overflow.buf-4定位到
这个指针。
（2）修改虚表指针指向缓冲区的0x004088CC处。
（3）程序执行到p->testO时，将按照伪造的虚函数指针去0x004088CC寻找虚表，这里正
好是缓冲区里shellcode的末尾。在这里填上shellcode的起始位置0x0040881C作为伪造的虚函