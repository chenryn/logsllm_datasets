title:Security of Streaming Encryption in Google's Tink Library
author:Viet Tung Hoang and
Yaobin Shen
Security of Streaming Encryption in Google’s Tink Library
Viet Tung Hoang1 and Yaobin Shen2
1 Dept. of Computer Science, Florida State University
2 Dept. of Computer Science & Engineering, Shanghai Jiao Tong University, China
August 23, 2020
Abstract. We analyze the multi-user security of the streaming encryption in Google’s Tink library
via an extended version of the framework of nonce-based online authenticated encryption of Hoang et
al. (CRYPTO’15) to support random-access decryption. We show that Tink’s design choice of using
random nonces and a nonce-based key-derivation function indeed improves the concrete security bound.
We then give two better alternatives that are more robust against randomness failure. In addition, we
show how to efficiently instantiate the key-derivation function via AES, instead of relying on HMAC-
SHA256 like the current design in Tink. To accomplish this we give a multi-user analysis of the XOR-
of-permutation construction of Bellare, Krovetz, and Rogaway (EUROCRYPT’98).
1 Introduction
This paper reconsiders the problem of building nonce-based online authenticated encryption (nOAE)
schemes [15]. Under this problem, one needs to encrypt potentially huge messages as soon as they
arrive using constant-sized states. This kind of situation arises when Netflix sends its movie streams
to users. This is what troubles memory-constrained devices when they have to deal with data that
they cannnot load entirely. This also happens when interactive applications, such as SSH, need to
send immediately each character they receive from the keyboard.
Specifically, we need to encrypt a message 𝑀 that is represented as a tuple (𝑀1, . . . , 𝑀𝑚) of
segments, with an associated data (AD) 𝐴 = (𝐴1, . . . , 𝐴𝑚). Each time one is given a pair (𝑀𝑖, 𝐴𝑖)
to encrypt, and can only keep a small state at the end. The size of each segment can range from a
character (for SSH) to a few MB (for Netflix), or even bigger. Directly encrypting each (𝑀𝑖, 𝐴𝑖) via a
conventional AE scheme such as OCB [21,29] or GCM [24] is problematic, because an adversary can
drop some of the ciphertext segments or reorder the ciphertext segments without being detected.
A gap between theory and practice. The nOAE problem already receives a formal treatment
by Hoang et al. [15], with a practical construction STREAM that is built on top of the OCB
authenticated-encryption scheme [21,29]. The idea is simple. Assume that at the beginning we are
given a nonce 𝑁 for each message 𝑀. Assume further that we have a conventional AE scheme
𝛱 = (K, E, D), for example one can instantiate 𝛱 as OCB. To encrypt (𝑀𝑖, 𝐴𝑖) under key 𝐾 and
the base nonce 𝑁, we run E𝐾(𝑁*, 𝐴𝑖, 𝑀𝑖), where the derived nonce 𝑁* is an encoding of (𝑁, 𝑖, 𝑎),
and the flag 𝑎 indicates whether 𝑀𝑖 is the last segment, meaning that 𝑎 = 1 if 𝑖 = 𝑚, and 𝑎 = 0
otherwise. See Fig. 6 for the code and an illustration of STREAM.
At the first glance, the problem seems solved. However, underneath the elegant design of STREAM
lies a troubling usability issue, which comes to light when Google developers try to include a
streaming encryption scheme in the Tink library [12]. Under their design, 𝛱 is instantiated via
GCM [24], the most popular conventional AE scheme. For a triple (𝑁, 𝑖, 𝑎) that will be encoded
as a 12-byte GCM nonce, Tink uses four bytes to encode 𝑖, and one byte to encode 𝑎. This means
that nonces of STREAM[GCM] will be only 7-byte long, and thus the only viable option is to
implement them as counters. Yet there are situations when random nonces are desirable:
– Routers are booted frequently, and its counters will therefore be reset often. Implementing
nonces as counters in this environment will result in lots of nonce repetition.
– Synchronizing counters among busy distributed servers might be impractical.
Google developers therefore deviate from the STREAM design. Tink’s streaming encryption does
not take nonces from users. Instead, it picks a 16-byte random salt 𝑅 and a 7-byte random nonce
prefix 𝑃, and derive a subkey 𝐿 ← KD(𝐾, 𝑅), where KD is a key-derivation function that will be
instantiated via HMAC-SHA256. It then runs STREAM[GCM] with key 𝐿 and “nonce” 𝑃. Such
short nonces will repeat, but under different subkeys, and thus will cause no harm to security.
Given that Tink’s streaming encryption deviates from the original STREAM design, it does not
benefit from the security proof in [15]. On the other hand, Tink’s choice of random nonces and
a nonce-based key-derivation may actually increase security, as in the case of the AES-GCM-SIV
scheme [6, 13]. The goal of our paper is to analyze the security of Tink’s streaming encryption,
and find ways to improve its security and efficiency, subject to the constraints that (i) 𝛱 is still
instantiated via GCM, and (ii) the scheme should support flexible choices of nonce generation,
including random nonces.
Security of Tink’s streaming encryption. One can view Tink’s streaming encryption as an
online AE scheme SE1[KD, 𝛱] where a nonce is a pair (𝑅, 𝑃), and Tink chooses to pick nonces at
random. See Fig. 8 for the code and an illustration of SE1.
We analyze security of SE1 under a strengthened notion of nOAE, where an adversary can attack en
masse instead of targeting a specific victim. In other words, security is now in the multi-user setting.
There is a growing recognition that cryptographic primitives should be analyzed in the multi-
user setting [4, 16], and it is therefore natural to put nOAE under the multi-user lens. Moreover,
our notion allows random-access decryption, whereas the treatment of Hoang et al. assumes that
decryption is in order. Random-access decryption is needed for situations where one encrypts a
huge file and later want to read just a portion of the file.
Our work confirms that SE1 is indeed secure, provided that 𝛱 is a good conventional AE scheme
and KD is a good PRF. This is true for any proper choice of nonce generation. When 𝛱 is instan-
tiated as GCM, using the recent GCM analysis of Hoang, Tessaro, and Thiruvengadam [18], picking
nonces at random does indeed improve the concrete security bound. However, this is not the only
good way of generating nonces for SE1. One can, for example, implement the salt 𝑅 as a counter,
but the nonce prefix 𝑃 should still be picked at random.
Still, the story here is not entirely satisfactory. First, SE1 is not robust against randomness failure,
which happens frequently [11,14,22]. In particular, its security would degrade if 𝑅 is still random,
but 𝑃 is a constant string. In this work, we identify two alternative constructions SE2 and SE3
that offer the same concrete security bound as SE1, but are robust to randomness failure, meaning
that they only need nonces to be unique. Next, Tink’s streaming encryption uses AES for GCM,
and HMAC-SHA256 for KD. It is desirable to find an AES-based instantiation of KD (for both
AES-128 and AES-256) to reduce the code complexity, and improve the speed of KD.
2
An AES-based KD. Let 𝐸 : {0, 1}𝑘 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher with 𝑘 ∈ {𝑛, 2𝑛} (which
we would instantiate directly via AES). Our goal is to give a construction of KD on top of 𝐸 that
offers 𝑛-bit multi-user PRF security. To achieve this concrete security bound, KD should have 2𝑛-
bit key length to resist attacks like Biham’s key-collision attack on DES [5]. We now elaborate on
how to build KD, step by step.
Step 1: Our first step is to build a blockcipher 𝐺 : {0, 1}2𝑛 × {0, 1}𝑛 → {0, 1}𝑛. If 𝑘 = 2𝑛 then we
can directly use 𝐸 as our 𝐺. If 𝑘 = 𝑛 then we extend the key length of 𝐸. In particular, for a key
𝐾 = 𝐽 ‖ 𝐿, with |𝐽| = |𝐿| = 𝑛, let
𝐺𝐾(𝑋) = 𝐸𝐽(𝑋 ⊕ 𝐿) ⊕ 𝐿 .
This is a variant of Rivest’s classic DESX construction. The design of DESX uses different keys
in pre-whitening and post-whitening 𝐸, whereas the variant above, which we call DESX1, uses
the same key. This is now folklore knowledge that DESX1 offers 𝑛-bit multi-user PRP security.
However, to the best of our knowledge, there is no explicit proof in the literature. In fact, Kilian
and Rogaway [20] are the first to study the security of DESX and DESX1, but they only consider the
single-user setting. Hoang and Tessaro [16] investigate the security of the xor-cascade construction,
a multi-round generalization of DESX. They give a tight multi-user security bound for the xor-
cascade, and claim that their technique can be recast to work for the multi-round generalization of
DESX1, but there is no explicitly proof in their paper. Bellare and Tackmann [4] directly consider
the multi-user security of DESX1, but they can only show that DESX1 has 2𝑛/3-bit security.
For the sake of completeness, in this work, we give a proof in the ideal-cipher model to confirm
that DESX1 indeed has 𝑛-bit multi-user PRP security.
Step 2: Our next step is to build a PRF 𝐹 : 𝒦 × {0, 1}𝑛−1 → {0, 1}𝑛. In particular,
𝐹𝐾(𝑋) = 𝐺𝐾(𝑋 ‖ 0) ⊕ 𝐺𝐾(𝑋 ‖ 1) .
This is the XOR-or-permutation construction of Bellare, Krovetz, and Rogaway [2], which has a
long line of work for just the single-user security. Lucks [23] proves that it can withstand to nearly
𝑞 = 22𝑛/3 queries. Bellare and Impagliazzo [1] give an asymptotic bound 𝑂(𝑛)·𝑞/2𝑛, but they provide
only a proof sketch. Patarin [28] claims the optimal bound 𝑞/2𝑛 via an approach that he refers to
as “mirror theory”, but his proof is extremely complex with several unverifiable gaps [10,19]. Dai,
Hoang, and Tessaro [10] finally find a relatively simple proof for a bound 𝑞/2𝑛 + 3𝑞1.5/21.5𝑛 via
their Chi-Squared method.
In the multi-user setting, a recent paper by Cogliati [9] claims the optimal bound 𝑞/2𝑛, but his proof
relies on Patarin’s (unverifiable) mirror theory. Here we use the Chi-Squared method and Azuma’s
√
𝑛 · 𝑞/2𝑛. It is a theoretically interesting open question to improve our
inequality for a bound 8
bound to 𝑞/2𝑛 (with a simple, verifiable proof).
Step 3: Our KD only takes 15-byte inputs, namely the salt length of Tink’s streaming encryption
has to be shortened a bit, but this does not affect its concrete security bound. For a string 𝑥, let
𝑥‖ 0* denote the string obtained by padding 0’s to 𝑥 until the total bit length is 𝑛− 1. If KD needs
to output an 𝑛-bit key then
KD(𝐾, 𝑋) = 𝐹𝐾(𝑋 ‖ 0*) .
If KD needs to output a 2𝑛-bit key then
KD(𝐾, 𝑋) = 𝐹𝐾(𝑋 ‖ 0 ‖ 0*) ‖ 𝐹𝐾(𝑋 ‖ 1 ‖ 0*) .
3
Thus our instantiation for KD needs 2–4 parallelizable AES calls, which is much faster than HMAC-
SHA256.
A better nOAE scheme: SE2. To resist randomness failure in nonce generation, the most
natural approach is to feed the entire nonce 𝑁 to KD to generate a subkey 𝐿 and a nonce prefix 𝑃.
Note that here 𝑃 is a part of KD’s output, instead of a part of the nonce. See Fig. 11 for the code
and an illustration of SE2. We show that SE2 with any proper nonce-generation mechanism has
the same security as SE1 with random nonces.
For applications that can tolerate 15-byte nonces, one can instantiate KD via the XOR construction.
Depending on the subkey size, it will need 2 or 3 calls to the XOR construction, meaning 4–6
parallelizable AES calls. This is on par with the key-derivation function of AES-GCM-SIV [13].
For applications that demand long nonces, it is unclear how to find a good AES-based instantiation
of KD, which we leave as an open problem. We instead propose another nOAE scheme SE3 that
has the best of both worlds: (i) its nOAE security is as good as SE2, and (ii) it supports long
nonces, say 22 bytes, and (iii) its key-derivation can be built via the XOR construction.
An even better nOAE scheme: SE3. In SE3, we treat a nonce 𝑁 as a pair (𝑅, 𝑃) as in SE1.
We then run KD(𝐾, 𝑅) to derive a subkey 𝐿 and a mask 𝑋 to whiten 𝑃, obtaining an effective
nonce prefix 𝑃 * ← 𝑃 ⊕ 𝑋. Nonces for GCM are based on 𝑃 * instead.
We show that SE3 enjoys the same security as SE2. Moreover, it is possible to instantiate KD
via the XOR construction, provided that the salt length is 15 bytes, and the nonce prefix length
is still 7 bytes. Depending on the subkey size, KD will need 2 or 3 calls to the XOR construction,
getting the same speed as the key-derivation function of AES-GCM-SIV.
Recommendations. Based on the analysis above, we recommend Tink developers to use SE3
with 256-bit key length and instantiate KD via the XOR construction. Note that using 256-bit key
still allows one to use AES-128 for both KD (via the DESX1 paradigm) and GCM (by deriving a
128-bit subkey 𝐿).
from 1, and thus 𝑋 = (︀𝑋[1], . . . , 𝑋[𝑚])︀, where 𝑚 = |𝑋|. If 𝐴 is a probabilistic algorithm, we
2 Preliminaries
Notation. For a finite set 𝑆, we let 𝑥 ←$ 𝑆 denote the uniform sampling from 𝑆 and assigning
the value to 𝑥. Let |𝑥| denote the length of the string 𝑥, and for 1 ≤ 𝑖 < 𝑗 ≤ |𝑥|, let 𝑥[𝑖 : 𝑗]
denote the substring from the 𝑖th bit to the 𝑗th bit (inclusive) of 𝑥. For a vector 𝑋 of strings,
we let |𝑋| denote the number of components, and 𝑋[𝑖] be the 𝑖-th component. Indexing starts
let 𝑦 ←$ 𝐴(𝑥1, . . .) denote running 𝐴 on inputs 𝑥1, . . . with truly random coins and assigning the
output to 𝑦. For a domain Dom and a range Rng, we let Func(Dom, Rng) denote the set of all
functions 𝑓 : Dom → Rng. Let Perm(𝑛) denote the set of all permutations on {0, 1}𝑛.
Games. We use the game-playing framework of [3]. (See Fig. 1 for an example.) A game begins
with a procedure Initialize, ends with a procedure Finalize, and has named oracles. When the
adversary terminates with an output, we will feed this output to Finalize. We write 𝐺(𝒜) ⇒ 𝑏 to
denote the event of running game 𝐺 with an adversary 𝒜 that results in 𝑏 by Finalize. We also
write 𝐺(𝒜) to abbreviate 𝐺(𝒜) ⇒ true.
4
procedure Initialize
𝐾1, 𝐾2, . . . , ←$ 𝒦; 𝑏 ←$ {0, 1}