2. C → R: Choose random values r1, . . . , rn ∈ Zq. This
q where zi = (ri, m). C
deﬁnes vectors z1, . . . , zn ∈ Z(cid:96)
sends commitments to every coordinate of the zi.
3. R → C: Send random challenge vectors {vi}i=1,...,n
where each vi ∈ Vi ⊂ Z(cid:96)
q.
4. C → R: Send evaluations {wi}, where each
wi = (cid:104)zi, vi(cid:105) ∈ Zq.
5. C ←→ R Consistency proof: Parties engage in a
zero-knowledge argument protocol where C proves to
R that
∃(cid:0)(m1, s1), . . . , (m(cid:96)−1, s(cid:96)−1), (r1, s(cid:48)
n)(cid:1)
• Com =(cid:0)Comσ(m1; s1), . . . , Comσ(m(cid:96)−1; s(cid:96)−1),
1), . . . , (rn, s(cid:48)
such that:
n)(cid:1); and
Comσ(r1; s(cid:48)
1), . . . , Comσ(rn; s(cid:48)
• wi = (cid:104)zi, vi(cid:105) ∀ i = 1, . . . , n.
Figure 1: Non-malleable commitment scheme (cid:104)C, R(cid:105)BASIC.
the statistical binding property of the underlying commit-
ment scheme Com.
Theorem 2. The commitment scheme (cid:104)C, R(cid:105)BASIC is non-
malleable.
3.1 Discussion of the Proof of Non-Malleability
We now mention some of the key points from the proof of
non-malleability. See the full version for more details. We
ﬁrst deﬁne the notion of ε−dependence.
Definition 4. Fix a commitment message Com. We
say that vi(cid:48) ∈ Vi(cid:48) is ε−dependent on ˜vi ∈ ˜Vi if
i(cid:48) ∈ Span{vi(cid:48)}(cid:12)(cid:12)˜v
(cid:48)
i ∈ Span{˜vi}(cid:1) ≥ ε.
(cid:48)
i}(cid:0)v
Pr{˜v(cid:48)
Deﬁnition 4 implicitly assumes we are given a completed
transcript with ﬁrst message Com and right (resp.
left)
challenges {˜vi} (resp. {vi}). Then M is rewound to the
beginning of the second message and given new challenges
{˜v(cid:48)
i ∈ Span{˜vi}, and we are interested in the prob-
i} with ˜v(cid:48)
ability that the resulting left challenges {v(cid:48)
i} are such that
i(cid:48) ∈ Span{vi(cid:48)}. Intuitively, vi(cid:48) being dependent on ˜vi is
v(cid:48)
a result of M performing a mauling attack. Suppose that
M mauls Com(zi(cid:48) ) in order to obtain Com(˜zi). Then M
does not know ˜zi and so cannot hope to answer ˜vi except
by mauling C’s answer to vi(cid:48) . Therefore, if M is rewound to
the beginning of the right session’s query phase and asked a
diﬀerent query {˜v(cid:48)
i ∈ Span{˜vi}, M will have
i} such that ˜v(cid:48)
i} such that v(cid:48)
i(cid:48) ∈ Span{vi(cid:48)} if he wants to answer
to ask {v(cid:48)
successfully. The proof of non-malleability proceeds in cases,
depending on how the right queries can depend on the left
queries. This is exactly the same high-level structure of the
proof of non-malleability in [GRRV14], though some of the
speciﬁcs diﬀer.
Consider the bipartite graph G = (V, E) with vertex set
V = [n] × [n] and an edge (i(cid:48), i) ∈ E exactly when vi(cid:48) is
ε−dependent on ˜vi. We consider four cases:
• IND: There exists i such that (i(cid:48), i) /∈ E for all i(cid:48).
• L  R: There exist i(cid:48) > i such that (i(cid:48), i) ∈ E.
• L = R: E =(cid:8)(i, i) : i = 1, . . . , n(cid:9).
We think of IND, L  R, L = R as events whose prob-
ability of occuring depends on M. Notice however that re-
gardless of M’s behavior,
Pr(cid:0)IND or L  R or L = R(cid:1) = 1.
Pr(cid:0)M mauls (cid:104)C, R(cid:105)BASIC & E(cid:1) =
1
poly
Therefore, it suﬃces to prove that if there exists a PPT M
such that
for any E ∈ {IND, L  R, L = R}, then M breaks the
hiding of Com. This is the same approach taken in [GRRV14]
and many supporting lemmas carry over directly to our set-
ting. In particular, the case of E = IND is handled in Claim 9
of [GRRV14]. Additionally, Claims 5 through 7 of [GRRV14]
show that the cases for the other values of E follow from
the same lemma which we state below and prove in Ap-
pendix 3.1. Our main technical lemma is much the same
as Claim 8 from [GRRV14]. We prove it formally, how-
ever, as it is the point in which the diﬀerences between our
high-dimensional setting and their linear setting are most
apparent.
Note that once Com is ﬁxed, M deﬁnes a map from right
challenges {˜vi} to left challenges {vi}. Fix (as a function of
λ), ω = ω(1). Given a transcript with left challenges {vi},
say that the event SUPER−POLY occurs if the preimage of
{vi} has superpolynomial size: (cid:12)(cid:12)M−1(cid:0){vi}(cid:1)(cid:12)(cid:12) ≥ λω.
Pr(cid:0)M mauls (cid:104)C, R(cid:105)BASIC & SUPER−POLY(cid:1) ≥ σ
Lemma 1. Fix non-negligible σ. If
then there exists a PPT algorithm A who breaks the hiding
of (cid:104)C, R(cid:105)BASIC.
Proof. We give a reduction from a MIM who mauls
(cid:104)C, R(cid:105)BASIC given that the event SUPER−POLY occurs, to
a PPT A who breaks the hiding of Com. Our A proceeds
as follows.
• A chooses random m0, m1 ∈ Z(cid:96)−1
q
and begins the hid-
ing game, sending (m0, m1) to the challenger C. Then
A instantiates M and runs two sessions of (cid:104)C, R(cid:105)BASIC
forwarding the messages it receives as C to C.
In
the left interaction, C commits to mu for unknown
u ∈ {0, 1}. Let the resulting transcript be T, and let
{vi} and {wi} be the query and response messages in
the left interaction. Similarly {˜vi} and { ˜wi} are the
query and response messages in the right.
1053• A chooses random u(cid:48) ∈ {0, 1} and sets vectors zi ∈ Z(cid:96)
q
to be the unique such vectors which correspond to mu(cid:48)
and so that (cid:104)zi, vi(cid:105) = wi for all i.
i}, {˜v(cid:48)(cid:48)
i } such that {˜vi, ˜v(cid:48)
• A chooses random {˜v(cid:48)
i }
i, ˜v(cid:48)(cid:48)
are collinear for all i. He rewinds M twice back to
the beginning of the right execution’s second message
i }, receiving left queries {v(cid:48)
asking {˜v(cid:48)
i} and
{v(cid:48)(cid:48)
i} and {w(cid:48)(cid:48)
i }
i(cid:105) for all i (and similarly for w(cid:48)(cid:48)
where w(cid:48)
i ),
receiving right responses { ˜w(cid:48)
i }. A responds to M’s queries with {w(cid:48)
i} and { ˜w(cid:48)(cid:48)
i }.
i), (˜v(cid:48)(cid:48)
i , ˜w(cid:48)(cid:48)
• A checks whether(cid:8)(˜vi, ˜wi), (˜v(cid:48)
i} and {˜v(cid:48)(cid:48)
i = (cid:104)zi, v(cid:48)
are collinear for all i. A outputs u(cid:48) if so, 1 − u(cid:48) if not.
i )(cid:9)
i, ˜w(cid:48)
The following is Fact 1 from [GRRV14].
Fact 1. Let E be an event such that
• Pr(E) ≥ ξ;
• Pr(cid:0)(cid:8)(˜vi, ˜wi), (˜v(cid:48)
• Pr(cid:0)(cid:8)(˜vi, ˜wi), (˜v(cid:48)
ξ(cid:48);
ξ(cid:48)(cid:48),
i )(cid:9) col. ∀ i(cid:12)(cid:12)u(cid:48) = u & E(cid:1) ≥
i )(cid:9) col. ∀ i(cid:12)(cid:12)u(cid:48) (cid:54)= u & E(cid:1) ≤
i, ˜w(cid:48)
i), (˜v(cid:48)(cid:48)
i , ˜w(cid:48)(cid:48)
i, ˜w(cid:48)
i), (˜v(cid:48)(cid:48)
i , ˜w(cid:48)(cid:48)
for non-negligible values ξ, ξ(cid:48), ξ(cid:48)(cid:48) satisfying ξ(cid:48)(cid:48) = O(ξξ(cid:48)).
Then A breaks the hiding of (cid:104)C, R(cid:105)BASIC.
So it suﬃces to construct such an E. We have already deﬁned
the event SUPER−POLY. We additionally deﬁne the events
HONEST and EXT as follows:
• HONEST occurs if {˜vi} is such that M gives correct
answers { ˜wi} provided his queries {vi} are answered
correctly;
• EXT occurs if {˜vi} is such that M gives correct an-
swers with non-negligible probability even he receives
random answers to his queries {vi}.
Note that HONEST, EXT and SUPER−POLY are all deter-
mined by Com and {˜vi}. Since A ﬁxes Com and rewinds M
asking three challenges, we will think of these events as de-
pending only on {˜vi}. We may assume Pr(cid:0)HONEST(cid:1) = 1
Pr(cid:0)M mauls & EXT(cid:1) = negl. This is because if M answers
poly
because otherwise M is not completing the protocol success-
fully (and so cannot be mauling) except with negligible prob-
ability. It can also be shown (Claim 2 in [GRRV14]) that
{˜vi} correctly with non-negligible probability given random
answers to his queries {vi} then he knows his message ˜m (it
can be extracted in polynomial time). It therefore cannot
depend on C’s commitment m, which is computationally
hidden from M.
We use the event
E = HONEST & (¬EXT) & SUPER−POLY.
It remains to prove
(cid:48)
i), (˜v
Pr(cid:0)(cid:8)(˜vi, ˜wi), (˜v
Pr(cid:0)(cid:8)(˜vi, ˜wi), (˜v
(cid:48)
i), (˜v
(cid:48)
i, ˜w
(cid:48)
i, ˜w
(cid:48)(cid:48)
i , ˜w
(cid:48)(cid:48)
i , ˜w
(cid:48)(cid:48)
i )(cid:9) col. ∀ i(cid:12)(cid:12)u
i )(cid:9) col. ∀ i(cid:12)(cid:12)u
(cid:48)(cid:48)
(cid:48)
= u & E(cid:1) =
(cid:48) (cid:54)= u & E(cid:1) = negl.
poly
1
To prove the ﬁrst, note that if u(cid:48) = u then M receives correct
answers to his queries {˜vi}, {˜v(cid:48)
i }, so by deﬁnition
i}, and {˜v(cid:48)(cid:48)
correct answers then certainly(cid:8)(˜vi, ˜wi), (˜v(cid:48)
of HONEST he will provide correct answers { ˜wi}, { ˜w(cid:48)
{ ˜w(cid:48)(cid:48)
i), (˜v(cid:48)(cid:48)
i}, and
i } with non-negligible probability. However, if M gives
i , ˜w(cid:48)(cid:48)
i )(cid:9)
i, ˜w(cid:48)
i
are collinear for all i.
i )(cid:9)
i} to his queries {v(cid:48)
i} to {˜v(cid:48)
i , ˜w(cid:48)(cid:48)
i), (˜v(cid:48)(cid:48)
by the points(cid:8)(˜v(cid:48)
(cid:96)−planes (cid:8)(˜v,(cid:104)˜v, ˜zi(cid:105))(cid:9) to which the points (cid:8)(˜vi, ˜wi)(cid:9)
To prove the second, note that if u(cid:48) (cid:54)= u then M receives
random answers {w(cid:48)
i}, so by deﬁnition of
EXT, his responses { ˜w(cid:48)
i} on the right will be incorrect
with high probability. This means that the lines spanned
i, ˜w(cid:48)
are not contained in the
be-
long.
It follows that the intersections of these lines and
these (cid:96)−planes is at most a single point. By deﬁnition of
SUPER−POLY, the probability that this {˜vi} in the in-
tersection is chosen out of all the superpolynomially many
preimages of {vi} is negligible.
i
i
4. AMORTIZING NMC
We now show that the scheme from the previous section
(cid:104)C, R(cid:105)BASIC can be amortized as eﬃciently as the trivial con-
struction mentioned in the introduction, while still preserv-
ing any fast proofs available to the original scheme. Our
protocol (cid:104)C, R(cid:105)AMOR is shown in Figure 2.
The proof that (cid:104)C, R(cid:105)AMOR is non-malleable is almost ex-
actly the same as the proof of non-malleability for (cid:104)C, R(cid:105)BASIC.
Recall that most of the proof for (cid:104)C, R(cid:105)BASIC involved view-
ing M as a map from right challenges {˜vi} to left challenges
{vi} and proving that in all cases, M cannot be mauling.
The challenge space for (cid:104)C, R(cid:105)AMOR is the same as the chal-
lenge space for (cid:104)C, R(cid:105)BASIC and so the same analysis for M
as a function from right to left challenge spaces carries over.
The only thing that must be changed is that the extractor
must be modiﬁed in order to extract all of the ˜mi. This,
however, is a minor change which we omit.
Note that when k is large, the communication complexity
of (cid:104)C, R(cid:105)AMOR is dominated by the second message when C
sends commitments to the ˜mi. If Com has constant rate,
then so does (cid:104)C, R(cid:105)AMOR. Finally, if Com is homomorphic
then so is (cid:104)C, R(cid:105)AMOR, and similarly, any fast Σ−protocols
available to Com for proving knowledge of committed values
or that these values satisfy a linear relation will likewise be
available to (cid:104)C, R(cid:105)AMOR.
5.
IMPLEMENTATION
We now discuss some of the speciﬁcs of our prototype im-
plementation. The two cryptographic building blocks needed
for our protocol are statistically binding homomorphic com-
mitment and zero-knowledge proof of knowledge. Any sta-
tistically binding commitment can be used, but for the sake
of eﬃciency, we instantiate our protocol using ElGamal com-
mitments [EG85]. Zero-knowledge is instantiated with Schnorr
protocol [Sch91] as follows: a receiver proves knowledge
of a trapdoor followed by a schnorr based Σ-OR proto-
col [CDS94], where the committer proves knowledge of either
the committed message or receiver’s trapdoor.
Optimized performance is achieved by aggregating many
of the operations of the atomic protocols together. Our
main most valuable tool is the modular exponentiation with
1054Public Parameters: A large prime q = λω(1), integers
(cid:96), k and vector spaces V1, . . . , Vn ⊂ Z(cid:96)
q obtained from C’s
identity.
Commiter’s Private Input: Messages
m1, . . . , mk ∈ Z(cid:96)−1
to be committed to.
q
Commit Phase:
1. R → C: Send the ﬁrst message σ of the Naor
commitment scheme.
2. C → R: Choose random values r1, . . . , rn ∈ Zk
deﬁnes vectors zi,j ∈ Z(cid:96)