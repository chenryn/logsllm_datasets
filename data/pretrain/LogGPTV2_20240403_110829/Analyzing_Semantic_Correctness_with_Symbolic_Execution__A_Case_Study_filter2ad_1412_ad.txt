Section II, in both TH1 and TH2, we provide linear constraints
and |PB|.
that describe the relations between w, x, y, z,
As such, during symbolic execution, many different possible
concolic test input buffers would be packed with respect to the
given constraints in TH1 and TH2, which effectively expand
the two test harnesses automatically into many meaningful test
cases, without the need to manually craft a large number of
test harnesses, one for each test case. This is essentially a form
model counting. Including effort of studying the PKCS#1 v1.5
speciﬁcation, developing the meta-level search code for {TH1,
TH2} took a few days. This is however a one-time effort, as the
code is generic and was reused across all implementations that
we tested. Finally, TH3 covers the extra cases where w, x, y, z
are not constrained in terms of each other and |n|
8 .
2) Memory Operations with Symbolic Sizes: We note,
however, performing memory allocation and copy (e.g.,
malloc() and memcpy()) with symbolic lengths would
result in a concretization error where KLEE would try to
concretize the length and continue the execution with one
feasible concrete length value, hence missing out on some
possible execution paths.
Explicit loop introduction. To avoid such concretization
errors, when implementing the meta-level search in TH1 and
TH2, we use some simple counting for-loops, as shown
below, to guide KLEE into trying different possible values of
the symbolic lengths. What happens is that for each feasible
value (with respect to known constraints that are imposed on
those symbolic variables), KLEE would assign it to k and fork
the execution before the memory allocation and copy, hence
being able to try different lengths and not cutting through the
search space due to concretization.
size_t k; for (k = 0; i < sym_var; k++){}
6
/** execution forks with possible values of k **/
dest = malloc(k);
// k already concretized
memcpy(src, dest, k); // k already concretized
Bounding parameter length. Since explicit loop intro-
duction is essentially trading time and space for coverage,
it will not work practically if the range of possible values
is very large. Fortunately, in PKCS#1 v1.5, the size of O
is bounded by |n|. We leverage this observation to make
our symbolic analysis practical, by focusing on a small |n|.
Speciﬁcally, in our test harnesses, we assume the SHA-1 hash
algorithm, as it is widely available in implementations, unlike
some other older/newer hash functions, and that |n| is 48-
byte long (except for MatrixSSL, explained later), so that even
after the minimum of 8-byte of PB there would still be at
least 2 bytes that can be moved around during testing. Though
in practice a 384-bit modulus is rarely used, and SHA-1 is
now considered weak and under deprecation, since |n| and the
hash algorithm of choice are just parameters to the PKCS#1
v1.5 signature veriﬁcation discussed in Section IV-A, assuming
uniform implementations, our ﬁndings should be extensible to
signatures made of a larger |n| and other hash algorithms.
3) Accessing relevant
functions for analysis: Finally,
in order to make the implementation amenable to symbolic
execution, one would need a customary, minuscule amount of
modiﬁcations to the source tree. In this case, the modiﬁcations
are made mainly to (1) change the visibility of certain internal
functions; (2) inject the test buffer into the implementation’s
veriﬁcation code. Test buffer injection is typically added to
the underlying functions that implement the RSA public key
operation which compute O := Se mod n, easily identiﬁable
with an initial test harness executed in an instrumented man-
ner. Writing the test harnesses and adding the modiﬁcations
generally take a few hours. In the case of unit tests (and stub
functions) for signature veriﬁcation are readily available (e.g.
in Openswan), we can simply adapt and reuse their code.
C. Identifying semantic deviations
Path constraints extracted by symbolic execution can be
analyzed in the following two ways to identify implementation
ﬂaws. When testing recent implementations, we would use
both. Recall that PKCS#1 v1.5 is a deterministic padding
scheme and we focus on the explicit NULL parameter case.
For each test harness, if more than one accepting paths can
be found by symbolic execution, then the implementation is
highly likely to be deviant. (1) With CPT, one can inspect
the path constraints and the origins of their clauses, as well
as the generated test cases, to identify the faulty code. (2) To
help highlight subtle weaknesses, we adopt the principle of
differential testing [19] by cross-validating path constraints of
different implementations, similar to previous work [15].
D. Feasibility Study
To validate the efﬁcacy of our approach, we ﬁrst apply
it to test historic versions of OpenSSL and GnuTLS that are
known to exhibit weaknesses in their signature veriﬁcation,
without using differential cross-validation for fairness reasons.
The summary of results can be found in Table III.
TABLE III.
RESULT SUMMARY OF TESTING KNOWN VULNERABLE
PKCS#1 V1.5 IMPLEMENTATIONS WITH SYMBOLIC EXECUTION
Implementation
(version)
Test
Harness
Lines
Changed
GnuTLS
(1.4.2)
OpenSSL
(0.9.7h)
TH1
TH2
TH3
TH1
TH2
TH3
6
8
4
6
Execution
Time ‡
00:01:32
01:03:12
00:07:35
00:07:23
00:00:46
00:33:24
Total Path
(Accepting)
2073 (3)
127608 (21)
1582 (1)
4008 (3)
1432 (3)
3005 (4)
‡ Execution Time measured on a commodity laptop with an Intel i7-3740QM CPU
and 32GB DDR3 RAM running Ubuntu 16.04.
both of them also perform some memory allocations based on
parsed length variables that are made symbolic in TH3, they
both needed explicit loop introduction as discussed before.
For OpenSSL 0.9.7h, the numerous accepting paths in TH1,
TH2 can be attributed to the fact that it accepts signatures
containing trailing bytes after AS, which is exactly the original
vulnerability that enables a signature forgery when e = 3 [4],
[20]. On top of that, with TH3, we found that in addition to the
one correct accepting path, there exists other erroneous ones.
Speciﬁcally, we found that for the ASN.1 length variables y
and z, besides the benign values of y = 0 and z = 20, it
would also accept y = 128 and z = 128, which explains
why there are four accepting paths. This is due to the leniency
of the ASN.1 parser in OpenSSL 0.9.7h, which when given
certain absurd length values, it would in some cases just use
the actual number of remaining bytes as the length, yielding
overly permissive acceptances during veriﬁcation. Though not
directly exploitable, this is nonetheless an interesting ﬁnding
highlighting the power of symbolic analysis, and we are not
aware of prior reports regarding this weakness.
For GnuTLS 1.4.2, the multiple accepting paths induced
by TH1 are due to the possibility of gaining extra free bytes
with an incorrectly short padding and hiding them inside the
algorithm parameter part of AS, which will then be ignored
and not checked. This is the known ﬂaw that enabled a low-
exponent signature forgery [25], [27]. Additionally, with TH3,
we found that there exist an opportunity to induce the parser
into reading from illegal addresses, by giving u a special value.
Speciﬁcally, assuming SHA-1, after the parser has reached but
not consumed u, there are still 30 bytes remaining in AS.
Despite the several sanity checks in place to make sure that
the parsed length cannot be larger than what is remaining, by
making u exactly 30, it does not violate the sanity checks, but
at a later point when the parser attempts to read the actual
OID value bytes, it would still be tricked into reading beyond
AS, which resulted in a memory error caught by KLEE.
The 21 accepting paths (1 correct and 20 erroneous)
induced by TH2 in GnuTLS 1.4.2 can be attributed to how
the parser leniently handles and accepts malformed algorithm
OIDs. This over-permissiveness in signature veriﬁcation does
not seem to have been reported before.
By both recreating known vulnerabilities and ﬁnding new
weaknesses in the old versions of GnuTLS and OpenSSL, we
have demonstrated the efﬁcacy of our proposed approach.
V. FINDINGS ON RECENT IMPLEMENTATIONS
As expected, both OpenSSL 0.9.7h and GnuTLS 1.4.2 use
the parsing-based approach for veriﬁcation. In fact, because
Here we present our ﬁndings of testing 15 recent open-
source implementations of PKCS#1 v1.5 signature veriﬁcation.
7
TABLE IV.
RESULT SUMMARY OF TESTING VARIOUS NEW PKCS#1
V1.5 IMPLEMENTATIONS WITH SYMBOLIC EXECUTION
Implementation
(version)
Test
Harness
Lines
Changed
axTLS
(2.1.3)
BearSSL
(0.4)
BoringSSL
(3112)
Dropbear SSH
(2017.75)
GnuTLS
(3.5.12)
LibreSSL
(2.5.4)
libtomcrypt
(1.16)
MatrixSSL
(3.9.1)
Certiﬁcate
MatrixSSL
(3.9.1)
CRL
mbedTLS
(2.4.2)
OpenSSH
(7.7)
OpenSSL
(1.0.2l)
Openswan
(2.6.50) *
PuTTY
(0.7)
strongSwan
(5.6.3) *
wolfSSL
(3.11.0)
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
TH1
TH2
TH3
7
9
3
3
4
4
4
6
5
16
5
8
4
7
6
4
6
4
12
6
10
Execution
Time †
01:42:14
00:00:05
00:00:10
00:01:55
00:00:06
00:00:00
00:06:09
00:00:08
00:00:00
00:46:10
00:00:11
00:00:15
00:01:35
00:00:06
00:00:01
00:10:27
00:01:40
00:25:45
00:01:13
00:00:11
00:04:49
00:01:54
00:00:04
00:00:22
00:01:55
00:00:04
00:00:07
00:14:56
00:00:03
00:00:00
00:07:00
00:00:08
00:00:00
00:06:31
00:00:56
00:16:16
00:01:07
00:00:04
00:00:00
00:03:22
00:00:07
00:00:00
00:01:32
00:16:36
00:00:24
00:04:05