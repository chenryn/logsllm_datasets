，如果`fuzz（）`发现了crash则会提前返回 ； `minimizeInput()` 应用一系列最小化转换， 确保每个最小化仍然会导致错误
，或保持覆盖率；ping() 方法，coordinator调用这个方法来保证worker进程 能够调用F.Fuzz并保持通信等。
  * **workerClint**
​ `workerClient` 是一个极简的 RPC 客户端 ，coordinator进程使用其调用worker进程的方法。其结构体定义如下：
    type workerClient struct {
        workerComm
        m *mutator
        mu sync.Mutex
    }
其中`mu`为保护workerCommd管道的互斥锁。在workerClint的方法中，与workerServer大都有一个同名的方法，用来告诉worker调用指定方法，如
`workClient.fuzz() 、workClient.minimize()`等
## 覆盖率&最小化
gofuzz采用覆盖率反馈的方式引导fuzzing， Dmitry在[“Fuzzing support for
Go”](https://docs.google.com/document/u/1/d/1zXR-TFL3BfnceEAWytV8bnzB2Tfp6EPFinWVJ5V4QC8/pub)一文中曾经对coverage-guided
fuzzing的引擎的工作逻辑做过如下描述：
    start with some (potentially empty) corpus of inputs
            for {
                    choose a random input from the corpus
                    mutate the input
                    execute the mutated input and collect code coverage
                    if the input gives new coverage, add it to the corpus
            }
Go 编译器已经对[libFuzzer](https://llvm.org/docs/LibFuzzer.html)提供了检测支持
，所以在gofuzz中重用了该部分。 编译器为每个基本块添加一个 8 位计数器用来统计覆盖率。
当`coordinator`接收到产生新覆盖范围的输入时，它会将该worker进程的覆盖范围与当前组合的覆盖范围数组进行比较：如果另一个worker进程已经发现了提供相同覆盖范围的输入，则把该输入丢弃。如果新的输入确实提供了新的覆盖，则`coordinator`将其发送回worker进程（可能是不同的worker）以进行最小化处理。输入越小，执行的速度往往就越快，
coordinator会将最小化的输入添加到缓存语料库中，之后发送给`worker`以进行进一步的模糊测试 。
当`coordinator`收到导致错误的输入时，它会再次将输入发送回`worker`进程以进行最小化。在这种情况下，工作人员尝试找到仍然会导致错误的较小输入，尽管不一定是相同的错误。输入最小化后，coordinator将其保存到`testdata/corpus/$FuzzTarget`，然后关闭工作进程，以非零状态退出。
gofuzz实现输入最小化主要通过四个循环：
  1. 尝试通过2分法剪去尾巴字节
  2. 尝试删除每个单独的字节 
  3. 尝试删除每个可能的字节子集 
  4. 尝试替换每个字节为可打印的简单可读字节
最小化的相关代码在[go](https://github.com/golang/go)/[src](https://github.com/golang/go/tree/master/src)/[internal](https://github.com/golang/go/tree/master/src/internal)/[fuzz](https://github.com/golang/go/tree/master/src/internal/fuzz)/
**minimize.go** 中.
## 变异
[go](https://github.com/golang/go)/[src](https://github.com/golang/go/tree/master/src)/[internal](https://github.com/golang/go/tree/master/src/internal)/[fuzz](https://github.com/golang/go/tree/master/src/internal/fuzz)/
**mutator.go** 实现了对初始文件的变异功能，其核心代码如下：
    func (m *mutator) mutate(vals []any, maxBytes int) {
        maxPerVal := maxBytes/len(vals) - 100
        i := m.rand(len(vals))
        switch v := vals[i].(type) {
        case int:
            vals[i] = int(m.mutateInt(int64(v), maxInt))
        case int8:
            vals[i] = int8(m.mutateInt(int64(v), math.MaxInt8))
        case int16:
            vals[i] = int16(m.mutateInt(int64(v), math.MaxInt16))
        case int64:
            vals[i] = m.mutateInt(v, maxInt)
        case uint:
            vals[i] = uint(m.mutateUInt(uint64(v), maxUint))
        case uint16:
            vals[i] = uint16(m.mutateUInt(uint64(v), math.MaxUint16))
        case uint32:
            vals[i] = uint32(m.mutateUInt(uint64(v), math.MaxUint32))
        case uint64:
            vals[i] = m.mutateUInt(uint64(v), maxUint)
        case float32:
            vals[i] = float32(m.mutateFloat(float64(v), math.MaxFloat32))
        case float64:
            vals[i] = m.mutateFloat(v, math.MaxFloat64)
        case bool:
            if m.rand(2) == 1 {
                vals[i] = !v // 50% chance of flipping the bool
            }
        case rune: // int32
            vals[i] = rune(m.mutateInt(int64(v), math.MaxInt32))
        case byte: // uint8
            vals[i] = byte(m.mutateUInt(uint64(v), math.MaxUint8))
        case string:
            ...
        case []byte:
            ...
        default:
            panic(fmt.Sprintf("type not supported for mutating: %T", vals[i]))
        }
    }
gofuzz 目前支持的类型有：`string`, `[]byte`、`int`, `int8`, `int16`, `int32`/`rune`,
`int64`、`uint`, `uint8`/`byte`, `uint16`, `uint32`, `uint64`、`float32`,
`float64`、`bool`。以int型为例，可以看到go-native-fuzz对该型的变异方式还比较单一，加上或减去一个随机数，并判断其变异后的返回值不能超高int支持的最大范围。
    func (m *mutator) mutateInt(v, maxValue int64) int64 {
        var max int64
        for {
            max = 100
            switch m.rand(2) {
            case 0:
                // Add a random number
                if v >= maxValue {
                    continue
                }
                if v > 0 && maxValue-v 
该项目是作为 [juju](https://juju.ubuntu.com/) 项目的一部分在
[Canonical](https://www.canonical.com/) 中开发的，基于著名的
[libyaml](http://pyyaml.org/wiki/LibYAML) C 库的纯 Go 端口，可以快速可靠地解析和生成 YAML 数据 ，使
Go 程序能够轻松地编码和解码 YAML 值 。
`yaml.Unmarshal()`函数解码在字节切片中找到的第一个文档，并将解码后的值赋给输出值，十分适合作为我们测试的对象。
首先将项目下载的本地，然后`git checkout` 切换到分支 `v3`，之后编写fuzzing函数，创建文件`fuzz_test.go`。
    package yaml_test
    import (
        "testing"
        "gopkg.in/yaml.v3"
    )
    func FuzzUnmarshal(f *testing.F){
        f.Add( []byte{1})
        f.Fuzz(func(t *testing.T,num []byte){
            var v interface{}
            _ = yaml.Unmarshal([]byte(num),&v)
        })
    }
`go test -fuzz =Fuzz` 开始fuzz
    null@ubuntu:~/gowork/src/github.com/yaml$ go test -fuzz=Fuzz
    OK: 45 passed
    fuzz: elapsed: 0s, gathering baseline coverage: 0/1 completed
    fuzz: elapsed: 0s, gathering baseline coverage: 1/1 completed, now fuzzing with 2 workers
    fuzz: elapsed: 3s, execs: 61041 (20341/sec), new interesting: 129 (total: 130)
    fuzz: elapsed: 6s, execs: 142873 (27284/sec), new interesting: 199 (total: 200)
    fuzz: elapsed: 9s, execs: 212708 (23280/sec), new interesting: 239 (total: 240)
    fuzz: elapsed: 12s, execs: 274044 (20439/sec), new interesting: 271 (total: 272)
    fuzz: elapsed: 15s, execs: 320924 (15631/sec), new interesting: 298 (total: 299)
    fuzz: elapsed: 18s, execs: 389403 (22820/sec), new interesting: 317 (total: 318)
    fuzz: elapsed: 21s, execs: 423864 (11490/sec), new interesting: 334 (total: 335)
    fuzz: elapsed: 24s, execs: 444293 (6809/sec), new interesting: 344 (total: 345)