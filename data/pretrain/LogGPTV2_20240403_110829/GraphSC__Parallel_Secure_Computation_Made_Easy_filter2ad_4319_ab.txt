else
∀e(u,v)∈E
e.data
e.data
∀e(v,u)∈E
)
Fig. 1: GraphSC semantics.
|V|+|E|. We use the notation v.data ∈ {0, 1}∗
D ∈ ({0, 1}∗
and e.data ∈ {0, 1}∗ to denote the data associated with a
vertex v ∈ V and an edge e ∈ E respectively.
Programming
abstractions. GraphSC
the
allowing
Pregel/GraphLab
computations
i.e.,
each vertex performs computations on its own data as well
as data collected from its neighbors. In broad terms, this is
achieved through the following three primitives, which can be
thought of as interfaces exposed by the GraphSC abstraction:
programming
are
“graph-parallel”
in nature,
paradigm,
follows
that
1.Scatter: A vertex propagates data to its neighboring edges
and updates the edge’s data. More speciﬁcally, Scatter takes a
user-deﬁned function fS : {0, 1}∗ × {0, 1}∗ → {0, 1}∗, and a
bit b ∈ {“in”, “out”}, and updates each directed edge e(u, v)
as follows:
(cid:3)
II. GRAPHSC
e.data :=
fS(e.data, v.data)
fS(e.data, u.data)
if b = “in”,
if b = “out”.
In this section, we formally describe GraphSC, our frame-
work for parallel computation. GraphSC is inspired by the
scatter-gather operations in GraphLab and Pregel. Several im-
portant parallel data mining and machine learning algorithms
can be cast in this framework (some of these are discussed
in Section V-A); a brief example (namely,
the PageRank
algorithm) can also be found below. We conclude this section
by highlighting the challenges behind implementing GraphSC
in a secure fashion.
A. Programming Abstraction
Data-augmented graphs. The GraphSC framework operates
on data-augmented directed graphs. A data-augmented directed
graph G(V, E, D) consists of a directed graph G(V, E), as well
as user-deﬁned data on each vertex and each edge denoted
2For secure computation, a program is translated into a sequence of circuits
whose inputs can be oblivious memory accesses. Note that this is different
from transforming a program into a single circuit – for the latter, the best
known asymptotical result incurs quadratic overhead [57].
380380
Note that the bit b indicates whether the update operation is
to occur over incoming or outgoing edges of each vertex.
2.Gather: Through this operation, a vertex aggregates the
data from nearby edges and updates its own data. More
speciﬁcally, Gather takes as input a binary aggregation operator
⊕ : {0, 1}∗ × {0, 1}∗ → {0, 1}∗ and a bit b ∈ { “in”, “out” }
and updates the data on each vertex v ∈ V as follows:
if b = “in”,
e.data
⎧⎪⎨
⎪⎩
v.data || (cid:2)
v.data || (cid:2)
∀e(u,v)∈E
∀e(v,u)∈E
if b = “out”,
e.data
(cid:2)
where || indicates concatenation, and
is the iterated binary
operation deﬁned by ⊕. Hence, at
the conclusion of the
operation, the vertex stores both its previous value, as well
as the output of the aggregation through ⊕.
3.Apply: Vertices perform some local computation on their
data. More speciﬁcally, Apply takes a user-deﬁned function
fA : {0, 1}∗ × {0, 1}∗ → {0, 1}∗, and updates every vertex’s
v.data :=
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:55 UTC from IEEE Xplore.  Restrictions apply. 
data as follows:
v.data := fA(v.data).
A program abiding by the GraphSC abstraction can thus
make arbitrary calls to such Scatter, Gather and Apply oper-
ations. Beyond determining this sequence, each invocation of
Scatter, Gather, and Apply must also supply the corresponding
user-deﬁned functions fS, fA, and aggregation operator ⊕.
Note that the graph structure G does not change during the
execution of any of the three GraphSC primitives.
Throughout our analysis, we assume the time complexity
of fS, fA, and the binary operator ⊕ (applied to only 2
arguments) is constant, i.e., it does not depend on the size
of G. This is true when, e.g., both vertex and edge data take
values in a ﬁnite subset of {0, 1}∗, which is the case for all
applications we consider3.
Requirements for the aggregation operator ⊕. During the
Gather operation, a vertex aggregates data from multiple adja-
cent edges through a binary aggregation operator ⊕. GraphSC
requires that this aggregation operator is commutative and
associative, i.e.,
• Commutative: For any a, b ∈ D, a ⊕ b = b ⊕ a.
• Associative: For any a, b, c ∈ D, (a ⊕ b) ⊕ c = a ⊕ (b ⊕ c).
Roughly speaking, commutativity and associativity guarantee
that the result of the aggregation is insensitive to the ordering
of the edges.
B. Expressiveness
At a high level, GraphSC borrows its structure from
Pregel/GraphLab [8], [9], [12], which is also deﬁned by the
three conceptual primitives called Gather, Apply and Scatter.
There are however a few differences that are not included in
GraphSC, as they break obliviousness. For instance, Pregel
allows arbitrary message exchanges between vertices, which is
not supported by GraphSC. Pregel also supports modiﬁcation
of the graph structure during computation, whereas GraphSC
does not allow such modiﬁcations. Finally, GraphLab sup-
ports an asynchronous parallel computation of the primitives,
whereas GraphSC, and its data oblivious implementation we
describe in Section III, are both synchronous.
Despite these differences that are necessary to maintain
obliviousness, the expressiveness of GraphSC is the same as
that of Pregel/GraphLab. GraphSC encompasses classic graph
algorithms like Bellman-Ford, bipartite matching, connected
component
identiﬁcation, graph coloring, etc., as well as
several important data mining and machine learning operations
including PageRank [60], matrix factorization using gradient
descent and alternating least squares [61],
training neural
networks through back propagation [62] or parallel empirical
risk minimization through the alternating direction method of
multipliers (ADMM) [63]. We review some of these examples
in more detail in Section V-A.
3Note that, due to the concatenation operation ||, the memory size of the data
at a vertex can in theory increase after repeated consecutive Gather operations.
However, in the Pregel/GraphLab paradigm, a Gather is always followed by
an Apply, that merges the aggregated edge data with the vertex data through
an appropriate user-deﬁned merge operation fA. Thus, after each iteration
completes the vertex memory footprint remains constant.
Algorithm 1 PageRank example
1: function computePageRank(G(V, E, D))
fS(e.data, u.data) : e.data := u.data.PR
2:
⊕(e1.data, e2.data) : e1.data + e2.data
u.data.L
3:
fA(v.data) : v.data.PR := 0.15|V| + 0.85 × v.data.agg
4:
for i := 1 to K do
5:
6:
7:
8:
9:
Scatter(G, fS, “out”)
Gather(G,⊕, “in”)
Apply(G, fA)
// Every vertex v stores its PageRank PR
C. Example: PageRank
Let us try to understand these primitives using the PageR-
ank algorithm [60] as an example. Recall
that PageRank
computes a ranking score PR for each vertex u of a graph
G through a repeated iteration of the following assignment:
PR(u) =
0.15|V| + 0.85 ×
,∀u ∈ V,
PR(v)
L(v)
(cid:8)
e(v,u)∈E
where L(v) is the number of outgoing edges. Initially, all
vertices are assigned a PageRank of
1|V| .
PageRank can be expressed in GraphSC as shown in
Algorithm 1. The data of every vertex v comprises two real
values, one for the PageRank (PR) of the vertex and the other
for the number of its outgoing edges (L(v)). The data of every
edge e(u, v) comprises a single real value corresponding to the
weighted contribution of PageRank of the outgoing vertex u.
For simplicity, we assume that each vertex v has pre-
computed and stored L(v) at the beginning of the algorithm’s
execution. The algorithm then consists of several iterations,
each evoking a Scatter, Gather and Apply operation. The
Scatter operation updates the edge data e(u, v) by the weighted
PageRank of the outgoing vertex u, i.e., b = “out” and
fS(e.data, u.data) : e.data :=
u.data.PR
u.data.L
.
In the Gather operation, every vertex v adds up the
weighted PageRank over incoming edges e(u, v) and concate-
nates the result with the existing vertex data, by storing it in
the variable v.data.agg. That is, b = “in”, and ⊕ is given by
⊕(e1.data, e2.data) : e1.data + e2.data.
The Apply operation computes the new PageRank of vertex
v using v.data.agg.
fA(v.data) : v.data.PR :=
0.15|V| + 0.85 × v.data.agg.
An example iteration is shown in Figure 2.
D. Parallelization and Challenges in Secure Implementation
Under our standing assumption that fS, fA, and ⊕ have
O(1) time complexity, all three primitives are linear in the
input, i.e., can be computed in O(|V| + |E|) time. Moreover,
like Pregel/GraphLab operations, Scatter, Gather and Apply
can be easily parallelized, by assigning each vertex in graph
381381
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:55 UTC from IEEE Xplore.  Restrictions apply. 
0.25
Scatter
0.08
0.08
0.25
0.08
0.25
0.25
0.25
0.25
0.25
Gather
0.25
0.25
0.25
0.08
0.08
0.25||0
0.08
0.25||0.08
0.25
0.25||0.58
0.25
0.25||0.08
Apply
0.08
0.04
0.08
0.08
0.11
0.25
0.53
0.25
0.11
Fig. 2: One iteration of PageRank computation. 1. Every page starts with PR = 0.25. 2. During Scatter, outgoing edges are
updated with the weighted PageRank of vertices. 3. Vertices then aggregate the data on incoming edges in a Gather operation
and store it along with their own data. 4. Finally, vertices update their PageRank in an Apply operation.
G to a different processor. Each vertex also maintains a list
of all incoming edges and outgoing edges, along with their
associated data. Scatter operations involve transmissions: e.g.,
in a Scatter “out” operation, a vertex sends its data to all its
outgoing neighbors, who update their corresponding incoming
edges. Gather operations on the other hand are local: e.g., in a
Gather “in”, a vertex simply aggregates the data in its incoming
edges and appends it to its own data. Both Scatter and Gather
operations can thus be executed in parallel across different
processors storing the vertices. Finally, in such a conﬁgura-
tion, Apply operations are also trivially parallelizable across
vertices. Note that, in the presence of P  1, the
the runtime would be at most (cid:8)c × T(cid:9). Therefore, we can use
the parallel runtime metric without sacriﬁcing generality.
C. Single-Processor Oblivious Algorithm
Before presenting our fully-parallel solution, we describe
how to implement each of the three primitives deﬁned in
Figure 1 in a data-oblivious way on a single processor (i.e.,