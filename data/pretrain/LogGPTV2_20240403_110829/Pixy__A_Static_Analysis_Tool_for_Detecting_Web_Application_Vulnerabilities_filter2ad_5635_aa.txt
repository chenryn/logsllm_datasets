# Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities
(Short Paper)

## Authors
Nenad Jovanovic, Christopher Kruegel, and Engin Kirda  
Technical University of Vienna  
Secure Systems Lab  
{enji, chris, ek}@seclab.tuwien.ac.at

## Abstract
The number and importance of web applications have grown significantly in recent years. Concurrently, the quantity and impact of security vulnerabilities in these applications have also increased. Given that manual code reviews are time-consuming, error-prone, and costly, the need for automated solutions has become evident.

In this paper, we address the problem of vulnerable web applications through static source code analysis. Specifically, we use flow-sensitive, interprocedural, and context-sensitive data flow analysis to identify vulnerable points in a program. Additionally, alias and literal analysis are employed to enhance the correctness and precision of the results. Our approach targets taint-style vulnerabilities, such as SQL injection, cross-site scripting (XSS), and command injection.

Pixy, our open-source prototype, is designed to detect XSS vulnerabilities in PHP scripts. Using Pixy, we discovered and reported 15 previously unknown vulnerabilities in three web applications and reconstructed 36 known vulnerabilities in three other web applications. The observed false positive rate is around 50%, which is low enough to permit effective security audits.

## 1. Introduction
Web applications have become one of the most important communication channels between service providers and clients. As their importance has grown, so has the negative impact of security flaws. Vulnerabilities that can lead to the compromise of sensitive information are frequently reported, and the costs of resulting damages are increasing. The main reasons for this phenomenon include time and financial constraints, limited programming skills, and a lack of security awareness among developers.

Existing approaches for mitigating threats to web applications can be divided into client-side and server-side solutions. Noxes [14] is an example of a client-side tool, offering protection against suspected XSS attacks. Server-side solutions, on the other hand, can detect a wider range of vulnerabilities, and fixes implemented by the service provider benefit all clients. These server-side techniques can be further classified into dynamic and static approaches. Dynamic tools (e.g., [9, 18, 21], and Perlâ€™s taint mode) detect attacks during program execution, while static analyzers (e.g., [10, 11, 15, 16]) scan the source code for vulnerabilities.

In this paper, we present Pixy, the first open-source tool for statically detecting XSS vulnerabilities in PHP 4 [20] code using data flow analysis. We chose PHP because it is widely used for web application development [23], and a significant number of security advisories refer to PHP programs [3]. Although our prototype focuses on XSS, it can be adapted to detect other taint-style vulnerabilities such as SQL injection or command injection (see Section 2). The main contributions of this paper are:

- A flow-sensitive, interprocedural, and context-sensitive data flow analysis for PHP, targeted at detecting taint-style vulnerabilities.
- Additional literal and alias analysis steps that provide more comprehensive and precise results than previous approaches.
- Pixy, a system implementing our proposed analysis technique, written in Java and licensed under the GPL.
- Experimental validation of Pixy's ability to detect unknown vulnerabilities with a low false positive rate.

## 2. Taint-Style Vulnerabilities
Our work focuses on detecting taint-style vulnerabilities. Tainted data refers to data originating from potentially malicious users that can cause security issues at vulnerable points in the program (sensitive sinks). Tainted data can enter the program at specific points and spread via assignments and similar constructs. Using suitable operations, tainted data can be sanitized, removing its harmful properties. Many important types of vulnerabilities, such as XSS and SQL injection, fall into this category. An overview of these vulnerabilities is provided in [15].

### 2.1. Cross-Site Scripting (XSS)
XSS attacks aim to steal the credentials (e.g., cookies) of authenticated users through malicious JavaScript code. JavaScript, due to the sandbox model, can only access cookies from the site where the script originated. XSS attacks bypass this model by injecting malicious JavaScript into the output of vulnerable applications. More details on XSS can be found in [4]. In terms of taint-style vulnerabilities, XSS can be described as follows:
- **Entry Points:** GET, POST, and COOKIE arrays.
- **Sanitation Routines:** `htmlentities()`, `htmlspecialchars()`, and type casts that neutralize potentially malicious characters.
- **Sensitive Sinks:** Functions that return data to the browser, such as `echo()`, `print()`, and `printf()`.

### 2.2. Other Vulnerabilities
Although our current prototype focuses on XSS, other taint-style vulnerabilities like SQL injection and command injection can be detected using similar principles. The presented concepts are designed to target the general characteristics of these vulnerabilities, and adapting Pixy to detect other instances requires minimal engineering effort.

## 3. Data Flow Analysis
Our goal is to determine whether tainted data can reach sensitive sinks without being properly sanitized. We achieve this through data flow analysis, a well-established technique in computer science used for compiler optimizations. Data flow analysis computes certain information for each program point, such as the literal values that variables may hold.

We first construct a parse tree of the PHP input file using the Java lexical analyzer JFlex [12] and the Java parser Cup [5]. The parse tree is then transformed into a linearized form resembling three-address code [1] and kept as a control flow graph (CFG) for each function.

A straightforward approach would be to conduct a taint analysis on the intermediate three-address code. This analysis would identify entry points for tainted data, propagate taint values along assignments, and report sensitive sinks that receive tainted input. However, to produce correct and precise results, significant preparatory work is required. For instance, when a variable is assigned a tainted value, the taint must also be propagated to all its aliases. Therefore, we perform an alias analysis to provide information about alias relationships. Additionally, literal analysis helps evaluate branch conditions and ignore infeasible paths (path pruning).

One of the key features of our analysis is its high precision, as it is flow-sensitive, interprocedural, and context-sensitive. We are the first to perform alias analysis for an untyped, reference-based scripting language like PHP. While there is extensive literature on C pointer analysis, these techniques may not directly apply to PHP. Static analysis of scripting languages is challenging, as noted in [25].

### 3.1. Limitations
Currently, Pixy does not support object-oriented features of PHP. Object member variables and methods are treated optimistically, meaning they are assumed to never introduce malicious data. Additionally, files included with "include" and similar keywords are not automatically scanned. Manual inclusion was necessary in our experiments, but automating this process is complex due to the dynamic nature of PHP file inclusions.

## 4. Empirical Results
We conducted experiments with our prototype to demonstrate its ability to detect both known and new XSS vulnerabilities. Pixy was run on six popular, open-source PHP programs. The program files and our prototype are available on our website [13]. Since Pixy does not automatically analyze included files, we manually resolved include relationships, which took less than an hour per application. We are working on an extension to automate this process.

Each file was analyzed in less than a minute using a 3.0 GHz Pentium 4 processor with 1GB RAM. Tables 1 and 2 summarize the results. In three applications, we reconstructed 36 known vulnerabilities with 27 false positives (FPs). In three other applications, we discovered 15 previously unknown vulnerabilities with 16 FPs. We informed the authors and posted security advisories to the BugTraq mailing list [3]. Pixy also reported some non-security-related programming bugs, which were not counted as vulnerabilities or FPs.

### 4.1. Case Studies
Detailed descriptions of the discovered vulnerabilities can be found in the corresponding BugTraq postings. Here, we highlight two interesting vulnerabilities:

#### PhpNuke Reviews Module
The Reviews Module of PhpNuke contains a flaw related to the use of a seemingly harmless built-in function. Our analyzer treats all built-in functions as returning tainted values by default. Explicit modeling of functions that return untainted values is done through a configuration file. False positives from unmodeled functions can be eliminated by providing a specification of the function's true behavior. Figure 1 shows a simplified version of the vulnerable code, where the second parameter of `postcomment` is echoed. The warning was initially issued because `urldecode` was unmodeled. However, `urldecode` can transform benign sequences into dangerous ones, making explicit sanitization insufficient.

```php
function postcomment($id, $title) {
    $title = urldecode($title);
    echo $title;
}
```

#### Simple PHP Blog
Figure 2 shows a simplified version of the file `preview_static_cgi.php` in Simple PHP Blog. The sensitive sink on Line 7 receives the variable `$temp_file_name`, which is initialized with a tainted value in both branches of the "if" construct. If the condition is true, `$temp_file_name` is initialized with `$entry` (tainted from the GET array). In the else branch, `$temp_file_name` is tainted by a POST variable via `stripslashes`. Pixy correctly detects the vulnerability even if `$temp_file_name` is assigned an untainted value in one branch.

```php
if (...) {
    $entry = $_GET['entry'];
    $temp_file_name = $entry;
} else {
    $temp_file_name = stripslashes($_POST['file_name']);
}
echo($temp_file_name);
```

### 4.2. False Positives
Of the 47 false positives reported by Pixy, 14 were caused by global variables initialized dynamically in included files. Since we only considered static initializations during preprocessing, uninitialized globals were conservatively treated as tainted. We believe these false positives will be eliminated once include files are automatically processed.

---

Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&Pâ€™06)  
1081-6011/06 $20.00 Â© 2006 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 02:50:23 UTC from IEEE Xplore. Restrictions apply.