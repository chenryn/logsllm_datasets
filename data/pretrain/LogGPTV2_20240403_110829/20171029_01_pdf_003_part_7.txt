• libxml2-devel
• xz-devel
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 74
Example 81 xmltable function
postgres=> SELECT xmltable.*
postgres-> FROM xmldata,
postgres-> XMLTABLE('//ROWS/ROW'
postgres(> PASSING data
postgres(> COLUMNS id int PATH '@id',
postgres(> ordinality FOR ORDINALITY,
postgres(> "COUNTRY_NAME" text,
postgres(> country_id text PATH 'COUNTRY_ID',
postgres(> size_sq_km float PATH 'SIZE[@unit = "sq_km"]',
postgres(> size_other text PATH
postgres(> 'concat(SIZE[@unit!="sq_km"], " ", SIZE[@unit!="sq_km"]/@unit)',
postgres(> premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified') ;
id | ordinality | COUNTRY_NAME | country_id | size_sq_km | size_other | premier_name
----+------------+--------------+------------+------------+--------------+---------------
1 | 1 | Australia | AU | | | not specified
5 | 2 | Thailand | TH | | | Prayuth Chan
6 | 3 | Singapore | SG | 697 | | not specified
(3 rows)
□ regexp_match
The regexp_match function to perform pattern matching has been added. Unlike conventional
regexp_matches, it returns an array of text type. The citext Contrib module also has a regexp_match
function corresponding to the citext type.
Example 82 regexp_match function
postgres=> \dfS regexp_match
List of functions
Schema | Name | Result data type | Argument data types | Type
------------+--------------+------------------+---------------------+--------
pg_catalog | regexp_match | text[] | text, text | normal
pg_catalog | regexp_match | text[] | text, text, text | normal
(2 rows)
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 75
□ pg_ls_logdir / pg_ls_waldir
These functions return the name, size, update date and time of the log file list and WAL file list.
Execution of these functions requires SUPERUSER privilege.
Example 83 pg_ls_logdir / pg_ls_waldir functions
postgres=# SELECT * FROM pg_ls_logdir() ;
name | size | modification
----------------------------------+------+------------------------
postgresql-2017-05-20_092939.log | 5220 | 2017-05-20 21:44:21+09
(1 row)
postgres=# SELECT * FROM pg_ls_waldir() ;
name | size | modification
--------------------------+----------+------------------------
00000001000000000000002E | 16777216 | 2017-05-19 22:55:33+09
(1 row)
□ txid_status
The txid_status function has been added to check the status of transactions. By specifying the
transaction ID, the status of the corresponding transaction is returned.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 76
Example 84 txid_status function
postgres=> BEGIN ;
BEGIN
postgres=> SELECT txid_current() ;
txid_current
--------------
578
(1 row)
postgres=> SELECT txid_status(578) ;
txid_status
-------------
in progress
(1 row)
postgres=> COMMIT ;
COMMIT
postgres=> SELECT txid_status(578) ;
txid_status
-------------
committed
(1 row)
postgres=> SELECT txid_status(1000) ;
ERROR: transaction ID 1000 is in the future
□ JSON / JSONB type
The following functions correspond to JSON type and JSONB type.
• to_tsvector
• ts_headline
□ pg_stop_backup
The pg_stop_backup function has added a parameter wait_for_archive, which specifies to wait for
WAL's archive. By default (true), it waits for WAL archive as before.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 77
□ pg_import_system_collations
The pg_import_system_collations function imports information into the PostgreSQL instance when
a new Collation is installed in the OS. SUPERUSER privilege is required to execute this function.
Syntax 22 pg_import_system_collations
pg_import_system_collations(if_not_exists boolean, schema regnamespace)
□ to_date / to_timestamp
The to_date function and to_timestamp functions are now strictly checked for the input values of
each field. For PostgreSQL 10, the value automatically calculated in the conventional version is an
error.
Example 85 to_date (PostgreSQL 9.6)
postgres=> SELECT to_date('2017-04-40', 'YYYY-MM-DD') ;
to_date
------------
2017-05-10
(1 row)
Example 86 to_date (PostgreSQL 10)
postgres=> SELECT to_date('2017-04-40', 'YYYY-MM-DD') ;
ERROR: date/time field value out of range: "2017-04-40"
□ make_date
Negative values (BC) can now be specified for parameters specifying years.
Example 87 make_date (PostgreSQL 9.6)
postgres=> SELECT make_date(-2000, 4, 30) ;
ERROR: date field value out of range: -2000-04-30
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 78
Example 88 make_date (PostgreSQL 10)
postgres=> SELECT make_date(-2000, 4, 30) ;
make_date
---------------
2000-04-30 BC
(1 row)
3.9.14 Procedural language
This section explains the enhancement of procedural language.
□ PL/Python
Plan.execute and plan.cursor statements have been added.
Example 89 execute method / cursor method
# plan.execute
plan = plpy.prepare("SELECT val FROM data1 WHERE key=$1", [ "NUMERIC" ])
result = plan.execute(key)
# plan.cursor
plan = plpy.prepare("SELECT val FROM data1 WHERE key=$1", [ "NUMERIC" ])
rows = plan.cursor([2])
□ PL/Tcl
Transactions with "subtransaction" syntax can now be executed.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 79
Example 90 subtransaction syntax
CREATE FUNCTION transfer_funds2() RETURNS void AS $$
if [catch {
subtransaction {
spi_exec "UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'"
spi_exec "UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'"
}
} errormsg] {
set result [format "error transferring funds: %s" $errormsg]
} else {
set result "funds transferred correctly"
}
set plan [spi_prepare "INSERT INTO operations (result) VALUES ($1)"]
spi_execp $plan, [list $result]
$$ LANGUAGE pltclu;
Pltcl.start_proc and pltclu.start_proc which are GUC which specifies initialization procedure name
have been added.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 80
3.10 Change of configuration parameters
In PostgreSQL 10 the following parameters have been changed.
3.10.1 Added parameters
The following parameters have been added.
Table 26 Added parameters
Parameter name Description (context) Default
enable_gathermerge Enable execution plan Gather Merge (user) on
max_parallel_workers Maximum number of parallel worker process 8
(user)
max_sync_workers_per_subscript Maximum number of synchronous workers for 2
ion SUBSCRIPTION (sighup)
wal_consistency_checking Check the consistency of WAL on the standby -
instance (superuser)
max_logical_replication_workers Maximum number of Logical Replication worker 4
process (postmaster)
max_pred_locks_per_relation Maximum number of pages that can be Predicate- -2
Lock before locking the entire relation (sighup)
max_pred_locks_per_page Maximum number of records that can be 2
Predicate-Lock before locking the entire page
(sighup)
min_parallel_table_scan_size Minimum table size at which Parallel table scan 8MB
are considered (user)
min_parallel_index_scan_size Minimum table size at which Parallel index scan 512kB
are considered (user)
□ Parameter max_parallel_workers
Specifies the maximum number of parallel query worker processes that can run concurrently in the
instances. The default value is 8. In the old version, the max_worker_processes parameter was the
upper limit. If this value is set to 0, the parallel query is invalidated.
□ Parameter max_logical_replication_workers
Specifies the maximum value of the Logical Replication Worker processes to be started for each
SUBSCRIPTION. Even if the value of this parameter is less than the required value, CREATE
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 81
SUBSCRIPTION statement will not fail. The following logs are periodically output when replication
starts.
Example 91 Lack max_logical_replication_workers parameters
WARNING: out of logical replication worker slots
HINT: You might need to increase max_logical_replication_workers.
□ Parameter wal_consistency_checking
This parameter is used for bug checking of the WAL re-execution program in the replication
environment. For the parameter, specify the object type to be checked with a comma (,) delimiter.
The following values are available: all, hash, heap, heap 2, btree, gin, gist, sequence, spgist, brin,
generic.
□ Parameter max_pred_locks_per_page
Specifies the maximum number of tuple locks to transition to page lock.
□ Parameter max_pred_locks_per_relation
Specifies the maximum number of page locks to transition to relation lock.
3.10.2 Changed parameters
The setting range and options were changed for the following configuration parameters.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 82
Table 27 Changed configuration parameters (from pg_settings catalog)
Parameter name Changes
ssl The value of the context column has been changed to sighup
ssl_ca_file The value of the context column has been changed to sighup
ssl_cert_file The value of the context column has been changed to sighup
ssl_ciphers The value of the context column has been changed to sighup
ssl_crl_file The value of the context column has been changed to sighup
ssl_ecdh_curve The value of the context column has been changed to sighup
ssl_key_file The value of the context column has been changed to sighup
ssl_prefer_server_ciphers The value of the context column has been changed to sighup
bgwriter_lru_maxpages The value of max_val column was changed to INT_MAX / 2
archive_timeout The value of the short_desc column has changed
server_version_num The value of max_val / min_val column was changed to 100000
password_encryption The value of the vartype was changed to enum. "md5" or "scram-sha-
256" can specified. "on" is a alias for "md5"
max_wal_size The value of the unit column has been changed to 1MB
min_wal_size The value of the unit column has been changed to 1MB
3.10.3 Parameters with default values changed
The default values of the following configuration parameters have been changed.
Table 28 Parameters with default values changed
Parameter name PostgreSQL 9.6 PostgreSQL 10
hot_standby off on
log_line_prefix '' %m [%p]
max_parallel_workers_per_gather 0 2
max_replication_slots 0 10
max_wal_senders 0 10
password_encryption on md5
server_version 9.6.3 10beta1
server_version_num 90603 100000
wal_level minimal replica
log_directory pg_log log
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 83
□ Parameter log_line_prefix
The parameter default value has been changed.
Example 92 Parameter log_line_prefix default
postgres=# SHOW log_line_prefix ;
log_line_prefix
-----------------
%m [%p]
(1 row)
$ tail -1 data/log/postgresql-2017-05-20_093448.log
2017-05-20 09:34:48.617 JST [12187] LOG: autovacuum launcher started
3.10.4 Deprecated parameters
The following parameters are deprecated.
Table 29 Deprecated parameters
Parameter name Alternative value
min_parallel_relation_size Changed to min_parallel_table_scan_size
sql_inheritance None (same as 'on')
3.10.5 New function of authentication method
The following changes were made to the pg_hba.conf file.
□ Specify the RADIUS server
The specification of the RADIUS server necessary for RADIUS authentication changed from
"radiusserver" to "radiusservers". Multiple servers separated by commas can be specified.
□ Added SCRAM authentication
Scram-sha-256 can be specified for the authentication method in pg_hba.conf. This is an
implementation of SCRAM-SHA-256 as specified in RFC 5802 and 7677. Scram-sha-256 can also be
specified for configuration parameter password_encryption.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 84
3.10.6 Default value of authentication setting
The replication related default value contained in the pg_hba.conf file has been changed. By default,
the local connection is set to the "trust" setting.
Example 93 Default setting of pg_hba.conf file
# Allow replication connections from localhost, by a user with the
# replication privilege.
local replication all trust
host replication all 127.0.0.1/32 trust
host replication all ::1/128 trust
3.10.7 Other parameter change
The parameter recovery_target_lsn related to "Point In Time Recovery" has been added to the
recovery.conf file. For this parameter, specify the recovery complete LSN.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 85
3.11 Change of utility
This section explain the major function enhancement points of utility commands.
3.11.1 psql
The following functions have been added to the psql command.
□ \d command
The format of table information outputted by \d command has been changed. "Modifier" column that
was conventionally used has been divided into Collation, Nullable, and Default.
Example 94 Display table information (PostgreSQL 9.6)
postgres=> \d data1
Table "public.data1"
Column | Type | Modifiers
--------+-----------------------+-----------
c1 | numeric | default 1
c2 | character varying(10) | not null
Example 95 Display table information (PostgreSQL 10)
postgres=> \d data1
Table "public.data1"
Column | Type | Collation | Nullable | Default
--------+-----------------------+-----------+----------+---------
c1 | numeric | | | 1
c2 | character varying(10) | | not null |
□ Additional information of the \timing command
The \timing command controls the output of the execution time of the SQL statement. In the new
version, time format that is easy to understand has been added to the execution time output. When
the SQL execution time is less than 1 second, it is outputted in the same format as the old version.
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 86
Example 96 Added output of \timing command
postgres=> \timing
Timing is on.
postgres=> INSERT INTO data1 values (generate_series(1, 10000000)) ;
INSERT 0 10000000
Time: 61086.012 ms (01:01.086)
□ \gx command
The \gx command reruns the most recently executed SQL statement in the extended format.
Example 97 \gx command
postgres=> SELECT * FROM data1 ;
c1 | c2
----+------
1 | data
(1 row)
postgres=> \gx
-[ RECORD 1 ]
c1 | 1
c2 | data
□ \set command
More parameters have been displayed by the \set command.
Example 98 \set command
postgres=> \set
AUTOCOMMIT = 'on'
COMP_KEYWORD_CASE = 'preserve-upper'
DBNAME = 'demodb'
ECHO = 'none'
…
© 2016-2017 Hewlett-Packard Enterprise Japan Co, Ltd. 87