As someone relatively new to the Python ecosystem, I have a question about modifying third-party modules. I frequently use several third-party modules available on PyPi, and coming from a C and Java background, I appreciate the simplicity of using `easy_install` for module installation. However, I've encountered some challenges when trying to edit these installed modules:

1. **File Location**: The egg files may be stored in non-standard or hard-to-locate directories on the file system.
2. **Version Control Integration**: Using an egg seems to prevent me from directly interacting with the version control system (VCS) of the original project, similar to how using a Debian package precludes development from the originating VCS repository.

### Best Practices for Installing Modules from VCS Repositories

What is the recommended approach for installing modules from an arbitrary VCS repository while still being able to import them in my scripts? Additionally, if I make changes to the module's source code, what additional steps do I need to take?

### Solution

Packages installed via `easy_install` are typically based on snapshots of the developer's VCS, usually created at the time of an official release. This means you must choose between the convenience of automatic downloads via `easy_install` and the ability to get the latest updates directly from the VCS. If you opt for the latter, you can follow these steps:

1. **Clone the Repository**:
   - Clone the repository to your local machine using the appropriate VCS command (e.g., `git clone <repository_url>`).

2. **Install the Package**:
   - Navigate to the cloned repository directory.
   - Run `python setup.py install` to build and install the package.

3. **Custom Installation Directory**:
   - If you prefer to install the package in a custom directory, you can specify it using the `--prefix` option:
     ```sh
     python setup.py install --prefix=/path/to/custom/directory
     ```
   - Ensure that the custom directory is included in your `PYTHONPATH` environment variable. You can set this in your shell configuration file (e.g., `.bashrc` or `.zshrc`):
     ```sh
     export PYTHONPATH=$PYTHONPATH:/path/to/custom/directory
     ```

4. **Modifying the Module**:
   - After making changes to the module's source code, you can re-run `python setup.py install` to update the installed package.
   - Alternatively, you can use `python setup.py develop` to create a symbolic link to the source code, allowing you to modify the code in place without needing to reinstall the package each time.

By following these steps, you can effectively manage and modify third-party modules while still benefiting from the version control system of the original project.