MySQL高交互反制蜜罐实践
0x00 背景
     MySQL客户端任意文件读取“漏洞”由来已久，近年来由于护网的兴起，基于该漏洞的MySQL反制蜜罐
也频繁出现。然而很多商业蜜罐都是基于一些开源的验证性脚本进行开发（见参考链接），以这个完成
度来钓红队简直是在侮辱红队的智商。那么MySQL反制蜜罐从PoC到工程化实践中要解决哪些坑呢？咱
们今天来一一介绍。
0x01 PoC的局限
  MySQL读文件漏洞的原理网上有一大把分析文章，这里就不再赘述了。先来简单看一个典型的PoC
的执行流程，如下图。客户端登录后向服务端发送查询请求之后，服务端返回了读文件的响应，客户端
乖乖就范，把文件发给了服务端。此时一般情况下服务端应该返回一个 OK_PACKET 作为响应，当然客户
端收到 OK_PACKET 之后会打印一串类似 Query OK, 0 rows affected (0.00 sec) 的文本出来。我一
个select语句，你给我返回 0 rows affected 无论如何是说不过去的，所以这里直接断开连接，假装成一
个服务不太稳定的MySQL。
  看到这里相信你已经看出来了，这个PoC每次查询只能读取一个文件，而且读完之后会断开连接，
犹如掩耳盗铃。这两个限制导致很多MySQL反制蜜罐沦为红队智商检测器，在实战中几乎发挥不出作
用。那么我们如何解除这两个限制呢？答案还得从MySQL协议说起。
0x02 一次读多个文件
    MySQL协议中详细描述了一次查询请求（ COM_QUERY ，增删改查等都属于查询请求）的执行流程，
如下图：
 对于 COM_QUERY ，服务端可能有四种响应
表格数据；
ERR_PACKET( 0xFF ，客户端收到后会打印 ERROR 1064 (42000): blabla.... )；
OK_PACKET( 0x00 , 客户端收到后会打印 Query OK, 0 rows affected (0.00 sec) 
blabla... )；
需要本地文件( 0xFB ，客户端收到后会发送对应的文件)。
  对于 0xFB 响应，客户端发送完本地数据之后，服务端需要响应 ERR_PACKET 或者 OK_PACKET 来
表明数据处理成功或者处理出错。这里协议没有写清楚的是，如果此时服务端发送的不是 OK/ERR 而是
一个表格数据响应甚至是 0xFB 读文件响应，客户端要如何处理呢？简单验证一下可以看到，客户端仍
然把它当作一个正常的响应，进行数据展示或者发送文件。这样的话事情一下子就有意思了起来，我们
稍微优化一下前面的PoC执行流程，如下图：
服务端在接收到文件之后可以立即再发送一个 0xFB 读文件响应，如此反复一次查询就可以读完所有所
需文件，最后再发送一个表格数据的响应作为结束，让客户端展示，以此来掩盖中间的执行流程。
0x02 高交互
 前面提到服务端在接收到文件以后可以返回一个表格数据响应，客户端会展示这个表格。那么如何构
造这个表格才能伪装地更像一个真实地MySQL服务呢？答案就是把SQL查询代理到真正的MySQL服务！
参考HTTP 代理的思路，我们可以实现这样一个MySQL代理：
非查询请求（握手、登录等），直接转发到服务器处理；
拦截查询请求，并发送读文件响应（可循环多次读取）；
文件读取结束后，再转发对应的请求到真正的MySQL服务处理。
这样一个高交互、高隐匿、可反制的MySQL蜜罐基本架构就出来了
0x04 其他小细节与最终demo
当然实际写代码肯定不会跟画图一样简单，实现过程中还有很多小问题要考虑：
1. 拦截请求时MySQL协议中请求编号的处理；
2. SSL加密请求的处理，MySQL高版本默认开启了SSL加密，可以手动关闭或者在代理上替换掉证
书；
3. 可以在MySQL握手阶段修改一些标志位，让客户端发送客户端版本、操作系统、本机用户名之类的
信息；
4. 读文件时如果读到不存在的文件，客户端不会继续处理接下来的 OK_PACKET 和表格数据，而且会
打印一个文件不存在的报错，但是可以用一个 ERR_PACKET ，配合一个合适的报错信息（比如错误
代码1040, Too many connections）来掩盖这个报错。
最后，综合以上所有要素，我用GoLang写了一个简单的demo出来，执行效果如图，源码可以私信我获
取~
0x05 红队如何防范
 经过不同版本MySQL客户端与链接库的测试对比，最后发现：JDBC在很古老的版本就已经解决这个问
题了，MySQL和MariaDB在新版本（MySQL 8.0、Mariadb 10.3.1x）也解决了这个问题。然而Navicat
最新版现在仍然在使用libmariadb 10.1.46.0，受该问题影响。所以，不要用Navicat！它会让你变得不
幸。
0xFF 参考链接
[1] MysqlHoneypot
[2] Rogue MySql Server
[3] Hfish 中的 MySQL 蜜罐
[4] MySQL蜜罐获取攻击者微信ID
[5] CSS-T | Mysql Client 任意文件读取攻击链拓展
[6] MySQL 协议（COM_QUERY）
[7] MySQL 协议 （MySQL Packet）
[8] MySQL协议（Error Codes）