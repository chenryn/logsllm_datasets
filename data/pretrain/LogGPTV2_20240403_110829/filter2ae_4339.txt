# 思路分享：配置Windows域以动态分析混淆的横向移动工具

#### 译文声明
本文为翻译文章，原文作者为Matthew Haigh和Trevor Haskell，发布于fireeye.com。具体表达及含义请参考原文。
  
我们最近遇到一个高度混淆的恶意软件样本，它带来了许多有趣的分析挑战。该样本使用虚拟化技术来阻止静态分析生成完全去混淆的内存转储。如果采用传统方法进行静态分析，可能需要几天到几周的时间。为了减少分析时间，FLARE逆向工程团队与Mandiant合作，最终将逆向时间缩短到了几个小时。

我们怀疑该样本是一个横向移动工具，因此我们需要适当的环境进行分析。事实证明，配置域环境是必不可少的步骤。我们希望本文能够为其他遇到类似样本的分析师提供帮助。在本文中，我们将解释如何利用虚拟的Windows域来分析此恶意软件，并介绍用于确认某些恶意软件功能的分析技术。

## 初步分析
在开始分析新的恶意样本时，通常从静态分析入手。通过静态分析，我们可以了解样本的类型和功能。对于可执行文件，可以使用CFF Explorer等工具进行结构分析。本例中的样本大小为6.64MB，表明其中包含了静态链接库（如Boost或OpenSSL），这使得分析变得更加复杂。

此外，导入表显示了八个动态链接DLL，每个DLL只有一个导入函数，这是打包器和混淆器常用的导入DLL的方法，旨在避免在静态分析阶段暴露恶意软件使用的API。

通过字符串分析，我们发现该样本难以静态分析。由于文件过大，提取出的字符串数量超过了75000个。我们使用StringSifter对这些字符串进行了排序，但没有获得有用的信息。下图显示了根据StringSifter分析得到的相关字符串：

当我们遇到此类问题时，通常可以通过动态分析来捕获恶意样本的行为。我们尝试使用动态分析工具evil.exe进行分析。关于evil.exe的使用方法如下：
```plaintext
Usage: evil.exe [/P:str] [/S[:str]] [/B:str] [/F:str] [/C] [/L:str] [/H:str] [/T:int] [/E:int] [/R]
   /P:str -- path to payload file.
   /S[:str] -- share for reverse copy.
   /B:str -- path to file to load settings from.
   /F:str -- write log to specified file.
   /C -- write log to console.
   /L:str -- path to file with host list.
   /H:str -- host name to process.
   /T:int -- maximum number of concurrent threads.
   /E:int -- number of seconds to delay before payload deletion (set to 0 to avoid removal).
   /R -- remove payload from hosts (/P and /S will be ignored).
If /S is specified without a value, a random name will be used.
/L and /H can be combined and specified more than once. At least one must be present.
/B will be processed after all other flags and will override any specified values (if any).
All parameters are case-sensitive.
```

我们尝试通过挂起进程并进行内存转储来获取payload，但经过试验发现这是非常困难的，因为恶意软件几乎立即退出并删除自身。最终，我们通过以下命令成功转储了部分数据：
```plaintext
sleep 2 && evil.exe /P:"C:\Windows\System32\calc.exe" /E:1000 /F:log.txt /H:some_host
```
我们选择了一个自删除时间间隔稍长的payload文件，并提供了日志文件名和主机名等参数，以便在进程终止之前挂起它。

两秒后，我们使用Process Dump生成了内存快照，但不幸的是，虚拟化仍然阻碍了我们的分析。尽管如此，我们还是成功地从这部分数据中提取了一些新的字符串，为我们后续的分析打开了突破口。

下图显示了我们新提取的字符串，这些字符串在原始样本中未被提取出来：
```plaintext
dumpedswaqp.exe
psxexesvc
schtasks.exe /create /tn "%s" /tr "%s" /s "%s" /sc onstart /ru system /f
schtasks.exe /run /tn "%s" /s "%s"
schtasks.exe /delete /tn "%s" /s "%s" /f
ServicesActive
Payload direct-copied
Payload reverse-copied
Payload removed
Task created
Task executed
Task deleted
SM opened
Service created
Service started
Service stopped
Service removed
Total hosts: %d, Threads: %d
SHARE_%c%c%c%c
Share "%s" created, path "%s"
Share "%s" removed
Error at hooking API "%S"
Dumping first %d bytes:
DllRegisterServer
DllInstall
register
install
```

根据已有的信息，我们推测该样本是一个远控木马。但是，如果不给样本提供横向移动的环境，就无法证实我们的猜想。为了加快分析速度，我们创建了一个虚拟的Windows域。

创建虚拟的Windows域需要一些复杂的配置，我们在本文中详细记录了这一过程，希望能帮助其他分析师通过该方法进行样本分析。

## 建立测试环境
在测试环境中，请确保已经安装了干净的Windows 10和Windows Server 2016虚拟机。建议创建两台Windows Server 2016计算机，以便将域控制器与其他测试系统分开。

在主机系统的VMware Virtual Network Editor中，使用以下设置创建自定义网络：
1. 在“VMNet信息”下，选择“仅主机”按钮。
2. 确保禁用“连接主机虚拟适配器”以防止连接到外部世界。
3. 如果使用静态IP地址，请确保禁用“使用本地DHCP服务”选项。

具体配置如下所示：
- 为虚拟机配置主机名和静态IP地址。
- 选择域控IP作为所有Guest的默认网关和DNS服务器。

完成所有配置后，首先将Active Directory域服务和DNS服务器角色安装到指定的域控制器服务器上。这可以通过Windows Server Manager应用程序来完成。

一旦角色成功安装，运行升级操作。添加具有完全限定的根域名的新林域（例如testdomain.local）。其他选项可以保留为默认选项。升级过程完成后，重新启动系统。

升级域控制器后，通过域控制器上的Active Directory用户和计算机创建测试用户帐户。创建测试帐户后，继续将虚拟网络上的其他系统加入域。这可以通过高级系统设置来完成，使用测试帐户凭据将系统加入域。

将所有系统都加入域后，请验证每个系统是否可以ping通其他系统。建议在测试环境中禁用Windows防火墙，以确保每个系统都可以访问测试环境中另一个系统的所有可用服务。

授予测试帐户对所有测试系统的权限。可以通过手动修改每个系统上的本地管理员组来完成，也可以通过组策略对象（GPO）自动修改。
```plaintext
net localgroup administrators sa_jdoe /ADD
```

## 域动态分析
至此，我们准备开始进行动态分析。我们通过安装并启动Wireshark和Process Monitor来准备测试环境。我们为三个Guest系统创建了快照，并在客户端上的测试域帐户的上下文中运行了恶意软件，如下所示：
```plaintext
evil.exe /P:"C:\Windows\System32\calc.exe" /L:hostnames.txt /F:log.txt /S /C
```

我们使用以下以行分隔的主机名填充hostnames.txt文件：
```plaintext
DBPROD.testdomain.local
client.testdomain.local
DC.testdomain.local
```

## 数据包分析
在分析捕获到的流量包后，我们确定了到主机列表中每个系统的SMB连接。在SMB握手完成之前，请求了Kerberos凭证。为用户请求一个Ticket Granting Ticket（TGT），并为每个服务器请求服务凭证。要了解更多关于Kerberos身份验证协议的信息，请参阅[我们最近的博客文章](https://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html)，其中介绍了该协议以及一个新的Mandiant Red Team工具。

恶意软件通过SMB访问C$共享并写入文件C:\Windows\swaqp.exe。然后它使用RPC启动SVCCTL，SVCCTL用于注册和启动服务。SVCCTL创建了swaqpd服务。该服务用于payload，随后被删除。最后，文件被删除，没有观察到其他活动。流量如下图所示：

这与我们使用Process Monitor分析到的行为基本符合。接着，我们继续使用不同的命令行选项和环境运行恶意软件。结合我们的静态分析，我们可以自信地确定恶意软件的功能，其中包括将有效负载复制到远程主机，安装和运行服务以及事后删除证据。

## 结论
大量混淆的样本静态分析可能需要数十个小时。动态分析技术为此提供了较好的解决方案，但它需要分析人员对样本的预测和提供模拟的环境。在这种情况下，我们可以将静态分析结果与虚拟化的Windows域结合起来进行分析。通过FLARE团队的逆向技术和Mandiant团队的红队技术，我们充分利用了FireEye的各种技能。这种组合将分析时间减少到几个小时。我们通过从受感染主机中快速提取必要的IOC来支持主动的事件响应调查。我们希望分享这种经验可以帮助其他人建立自己的横向运动分析环境。