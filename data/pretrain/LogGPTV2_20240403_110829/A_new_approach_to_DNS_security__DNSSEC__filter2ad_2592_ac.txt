Create RSA signature
Verify RSA signature
key len. Ops per sec.
52083.3
98039.2
33444.8
84033.6
349.5
286.2
198.8
1990.0
234.5
192.7
114.4
1355.6
128
128
128
128
768
768
768
768
1024
1024
1024
1024
Table 2: Ops per sec. over a 500-byte message on a
fast Pentium III
Remark 2. The system described so far considers only it-
erative queries. A resolver, however, may send a recursive
query to a name server for information about a particular
domain name. The queried server is then forced to interact
with other name servers in order to ﬁnd the answer and re-
spond with the requested data. (Stub resolvers always send
recursive queries.) Recent versions of BIND allow conﬁg-
uration of servers to ignore or refuse recursive queries. In
particular, root and top-level name servers generally do not
accept recursive queries given the burden associated with
them.
Handling authenticated recursive requests in SK-DNSSEC
is natural since we assume the existence of master keys
shared between child nodes and their parent domains.
It
is suﬃcient to employ the existing transaction signatures
(TSIGs) [25] to secure the exchange of information between
a child node and its parent4.
Remark 3. A queried name server may return several
servers authoritative for the same zone. Resolvers based
on BIND use the roundtrip time, or RTT, to choose be-
tween the name servers authoritative for the same zone.
The RTT, which measures the time necessary to a name
server to respond to queries, ensures that the resolver will,
most likely, query the closest authoritative name server. In
SK-DNSSEC, we have currently adopted a single strategy:
Name servers, authoritative for the same zone, store the
same secrets. Only one symmetric certiﬁcate needs to be
generated and the resolver would just select the name server
with the lowest RTT.
4. ANALYSIS
We believe SK-DNSSEC addresses some interesting issues:
Performance. In PK-DNSSEC, it is possible to reuse digi-
tal signatures in order to save time. However, signatures still
have to be veriﬁed each time a response is received from DNS
servers. Even when using RSA, which is faster in veriﬁca-
tion than DSA, the veriﬁcation of many digital signatures
would require substantial computational resources. In con-
trast, symmetric signatures can be veriﬁed very eﬃciently.
4For instance, the master key may be stored in both servers
via the TSIG key statement. The TSIG server statement
may be extended so that each server is instructed to sign
recursive queries and answers sent to a direct child or parent
domain.
91A fast Pentium machine, for instance, can verify more than
98, 000 symmetric signatures per second. On the other hand,
SK-DNSSEC requires queried servers to sign each response.
However, as shown in Table 2, computing SK-DNSSEC au-
thenticated authoritative answers and referrals can be ex-
tremely rapid. Table 2 reports the number of SK-DNSSEC
(which is abbreviated to the shorter “SK”) operations that
can be computed per second on a Pentium III (800Mhz)
machine. In particular, creating a SK authoritative answer
requires the name server to ﬁrst open and verify the symmet-
ric certiﬁcate sent by the resolver and then compute a MAC
over the answer. To verify an authoritative answer, the re-
solver simply checks the MAC. Computing a SK referral is
more complicated. It requires the name server to open and
verify the certiﬁcate, sign the answer and create a symmet-
ric certiﬁcate for its child node. Verifying such an answer
requires decrypting a session key and checking the MAC.
Details on these operations can be found in Section 6.3. On
reading these numbers, it should be taken into account that
the F.root-servers.net, often the busiest root server on the
Internet according to [8], receives about 3, 150 requests per
second (more than 272 million requests per day).
Table 2 also reports similar estimates for public-key sig-
natures, computed over the hash of a 500-byte message,
with comparable level of security (consider that applying
a brute-force attack against a 128-bit-key symmetric cipher
is roughly as diﬃcult as factoring a public-key modulus of
approximately 2, 300 bits).
Network traﬃc. DNS usually runs over UDP. One of
the major problems of PK-DNSSEC is that authenticated
queries and responses do not ﬁt into a 512-byte UDP data-
gram [13]. Moreover, if a name server based on PK-DNSSEC
with SIG RR is queried for n diﬀerent types of RRs, it
would return n public-key signatures (one for each RRset).
SK-DNSSEC does not require to sign entire RRsets and, as
shown in Section 6.2, the ﬁnal authenticated DNS message is
very short and may well ﬁt into a 512-byte UDP datagram.
Storage. SK-DNSSEC uses very short certiﬁcates. With
the same amount of cache it is possible to store more sym-
metric certiﬁcates which, in principle, should improve the
delay performance and reduce the number of DNS messages
in the network. In addition, there is no need for NXT RRs
which authenticatably deny the nonexistence of requested
records. This fact makes the zone data ﬁle more manage-
able and smaller.
Replay Attacks. SK-DNSSEC provides protection against
replay attacks since signatures cannot be reused. Signatures
in PK-DNSSEC may be exposed to replay attacks unless the
inception and expiration dates are very close. The expira-
tion date is usually set to be 4 or 16 times the TTL [20].
Finally, as mentioned earlier, there is no need for NXT RRs
which were introduced to avoid to release an authenticated
general statement of nonexistence which, clearly, can be re-
played.
Mutual Authentication. When necessary, mutual au-
thentication can be achieved very eﬃciently in SK-DNSSEC
as it requires only an additional MAC computation. Indeed,
once a DNS server receives a request, it must compute a
MAC function in order to determine whether the request
comes from an authorized name server.
Access control lists implemented in BIND version 8 and
9 5 demand mutual authentication to prevent IP spooﬁng
attacks. In particular, in BIND 8 and 9, it is possible to cre-
ate IP address-based access control lists to queries via the
named address match list acl and the allow-query substate-
ment or the more versatile BIND 9 view mechanism. Access
control lists specify the IP addresses of the resolvers that are
allowed to query the server. Similarly, allow-recursion can
be used to specify which resolver is allowed to send recursive
queries.
Without any mutual authentication mechanism in place,
access control lists are practically useless 6.
Conﬁdentiality. SK-DNSEC can provide conﬁdentiality
for queries or answers, if needed, by including the ﬁelds
DNS Req and DNS Ans directly into the symmetric encryp-
tion. DNS is a public service, therefore conﬁdentiality is not
required. However, DNS can be used for purposes other than
DNS. For instance, DNS can be used to exchange private
host keys among authorized users or a DNS-based system
can be used to manage large private domain spaces of corpo-
rations which may have the legitimate need to hide certain
parts of their name space.
Finally, a note about the threat model. Observe that, SK-
DNSSEC requires DNS servers to store locally secret keys
which may be esposed in case the servers are fully compro-
mised, whereas PK-DNSSEC is secure as long as the oﬀ-line
signing authority is honest.
The threat scenario outlined in [5] requires that the at-
tacker has complete control of a DNS machine and that the
changes to the corresponding portions of the name tree, re-
sulting from the attack, are accepted as correct by other
machines. Once the attacker is able to impersonate a DNS
server (e.g., secret keys may have been exposed), nothing
can be done to preclude malicious changes to the portion of
the DNS system where the compromised server is authori-
tative.
5. SK-DNSSEC AS PKI
The infrastructure provided by secure DNS is very well
suited to be used as a public-key distribution system. The
properties of DNSSEC make this obvious, as observed in [7]:
• Global real time availability: Any machine connected
to the Internet has easy access to DNS.
• Scalability: The hierarchical organization of DNS al-
lows easy scaling.
• Globally unique names: The hierarchical naming sys-
tem of DNS builds a logical structure for names which
are globally unique.
• Cryptographic binding of name and key: KEY re-
source records facilitate the binding of DNS names to
keys.
In PK-DNSSEC, the association of a domain name with
a public key is done via KEY RRs. The KEY record can
store diﬀerent kinds of cryptographic keys which can be used
5BIND 4.9 has similar access control mechanisms provided
by secure zone and xfrnets.
6To prevent unauthorized dynamic updates or zone trans-
fers, a TSIG-based mechanism is, in most cases, well ade-
quate.
92for several applications other than DNS. In addition, certiﬁ-
cates and related certiﬁcate revocation lists can be stored
in CERT RRs [23]. Analogously, SK-DNSSEC could use
KEY RRs or CERT RRs to store public keys and certiﬁ-
cates. Authoritative servers will certify the authenticity of
these public keys by including them into an appropriate ﬁeld
in DNS Ans.
6. EFFICIENCY
In the following subsections we compare more in detail
a DNS system based on SK-DNSSEC with one based on
PK-DNSSEC in the following scenarios:
1. PK-DNSSEC with SIG RR. For each RRset in the
answer, a pre-calculated SIG RR is included. This
method provides authentication and integrity only for
each RRset since DNS messages are not signed as a
whole.
2. PK-DNSSEC with SIG(0). DNS messages do not con-
tain SIG RRs, but are rather signed as a whole by
SIG(0)-type signatures. The entire message is there-
fore authenticated and its integrity is guaranteed by
public-key cryptographic signatures.
3. SK-DNSSEC. DNS messages are secured by symmet-
ric signatures and encryption which create an authen-
ticated (and, optionally, private) channel between re-
solver and name servers.
It is important to point out that diﬀerent zones have very
diﬀerent requirements. The root zone, for example, has a
relatively small number of entries but the root server receives
a huge number of requests per day. Zones such as .com have
many entries and serve a reasonably big number of requests.
Some entries in a zone might be queried very often and some
almost never.
6.1 Size of Stored Information
The amount of data stored in a zone ﬁle is directly propor-
tional to the number of delegation points and hosts served
by the authoritative name server. Due to the variable length
of domain names and number of children of each zone, it is
not possible to talk about exact numbers of bytes. In Ta-
ble 3 we show what additional content needs to be stored in
a DNSSEC server compared with a traditional DNS server
and analyze the impact on the zone ﬁle. According to [1],
signing a zone ﬁle under PK-DNSSEC with SIG RRs in-
creases its size by a factor of seven. In SK-DNSSEC, the
zone ﬁle remains substantially unchanged and NXT records
are not needed. A secret key of approximately 128 bits has
to be stored for the parent and for each child node in the
zone ﬁle.
6.2 Message Size
The size of DNS messages is an important parameter to
consider when comparing DNSSEC proposals. As the Ta-
ble 4 shows, there might be signiﬁcant diﬀerences.
This is mainly due to the fact that a name server based
on PK-DNSSEC with SIG RR (as currently implemented
in BIND version 9), when queried for a particular resource
record, would return the public-key signature computed over
an entire RRset along with the RRset itself which is needed
to verify the signature. Querying for n diﬀerent types of RRs
would force a name server to return n public-key signatures
as well as n corresponding RRsets. The message size may
increase notably.
SK-DNSSEC employs very small signatures and only one
signature has to be sent for each query. For instance, when
using a block cipher with 128-bit keys as encryption algo-
rithm and HMAC-MD5 with 128-bit keys as MAC function,
a signature in SK-DNSSEC is only 384 bits long (author-
itative answer). On the other hand, each referral includes
two signatures (one for the symmetric certiﬁcate and one
for the actual signature), thus the total space required to
authenticate the message is actually 768 bits.
Assuming that a typical DNS message is 100 bytes (800
bits) long [1], it can be deduced that SK-DNSSEC authorita-
tive answers and referrals would perfectly ﬁt into a 512-byte
UDP datagram!
6.3 Computational Time
In order to measure the time that is needed to perform
cryptographic operations employed by the DNSSEC propos-
als, we have selected the crypto library OpenSSL 0.9.6b 7.
This library is very popular, well written, and free of charge.
In addition, it is available for almost any operating system.
Most importantly, OpenSSL is the standard library used in
BIND starting from the version 9.1. We ran our actual time
measurement experiments on a Redhat 7.0 Linux system us-
ing the gettimeofday() function from the GNU C Library
2.2. The performance tests were run on a Intel Pentium III
800MHz machine with 256MB of RAM.
In Table 5 we show the average time that is needed to per-
form the cryptographic operations used by DNSSEC. The
ﬁrst column contains the name of the operation, the sec-
ond the key length in bits and the third the length of the
data input in bytes. The forth column contains the aver-
age computational time in microseconds. We took the mean
value of 10, 000 random inputs for each operation. Finally
we normalized each time measurement by the time needed
to compute a HMAC-MD5 on a 500-byte message in the last
column.
It is necessary to assign speciﬁc algorithms and make as-
sumptions concerning the message size if we want to com-
pare the time needed for a speciﬁc operation. A typical DNS
message is about 100 bytes long (according to [1]) but we
used messages of 500 bytes for our measurements to make
sure we are considering worst-case scenarios.
SK-DNSSEC uses HMAC-MD5 with a 128-bit key as sym-
metric signature algorithm and Blowﬁsh in CBC mode with
128-bit keys.
(The implementation of Blowﬁsh is almost
three times faster than the current implementation of AES.)
Therefore, to sign a message or to generate a symmetric
certiﬁcate, 3 × 128 bits = 48 bytes need to be encrypted.
Public-key signatures are computed over the hash of the in-
put.
SK-DNSSEC Name Server.
- Authoritative Answers. From the normalized values of
Table 5, it can be deduced that generating authorita-
tive answers in SK-DNSSEC would cost the equivalent
of 1.88 times a single computation of HMAC-MD5 over
a 500-byte message with a key of 128 bits.
Indeed,
to generate an authoritative answer, the name server
7For AES, we actually used the OpenSSL developer version.
93PK-DNSSEC with SIG RRs
PK-DNSSEC with SIG(0)
SK-DNSSEC
additional content
types
KEY RRs, NXT RRs,
SIG RRs
KEY RRs
shared secrets
additional content
at least one SIG RR for every
RRset; one NXT RR for every
domain; at least one public key
for each child domain.
at least one KEY RR for each
child.