SumOfSegments（）方法提取一组ArraySegment元素，计算该数组段定义的所有
整数之和，并返回整数和（代码文件ArraySegmentSample/Program.cs）：
    static int SumOfSegments(ArraySegment[] segments)
    {
      int sum = 0;
      foreach (var segment in segments)
      {
        for (int i = segment.Offset; i [2]
    {
      new ArraySegment(ar1, 0, 3),
      new ArraySegment(ar2, 3, 3)
    };
    var sum = SumOfSegments(segments);
  注意： 数组段不复制原数组的元素，但原数组可以通过ArraySegment访
问。如果数组段中的元素改变了，这些变化就会反映到原数组中。
7.7 枚举
在foreach语句中使用枚举，可以迭代集合中的元素，且无须知道集合中的元素个数。
foreach语句使用了一个枚举器。图7-7显示了调用foreach方法的客户端和集合之间的关
系。数组或集合实现带GetEumerator（）方法的IEumerable接口。GetEumerator（）方法返
回一个实现IEumerator接口的枚举。接着，foreach语句就可以使用IEumerable接口迭代集
合了。
图7-7
  注意： GetEnumerator（）方法用IEnumerable接口定义。foreach语句并不真
的需要在集合类中实现这个接口。有一个名为GetEnumerator（）的方法，它返回实现
了IEnumerator接口的对象就足够了。
7.7.1 IEnumerator接口
foreach语句使用IEnumerator接口的方法和属性，迭代集合中的所有元素。为此，
IEnumerator定义了Current属性，来返回光标所在的元素，该接口的MoveNext（）方法移
动到集合的下一个元素上，如果有这个元素，该方法就返回true。如果集合不再有更多的
元素，该方法就返回false。
这个接口的泛型版本IEnumerator派生自接口IDisposable，因此定义了Dispose（）
方法，来清理给枚举器分配的资源。
  注意： IEnumerator接口还定义了Reset（）方法，以与COM交互操作。许
多.NET枚举器通过抛出NotSupportedException类型的异常，来实现这个方法。
7.7.2 foreach语句
C#的foreach语句不会解析为IL代码中的foreach语句。C#编译器会把foreach语句转换
为IEnumerator接口的方法和属性。下面是一条简单的foreach语句，它迭代persons数组中
的所有元素，并逐个显示它们：
    foreach (var p in persons)
    {
      WriteLine(p);
    }
foreach语句会解析为下面的代码段。首先，调用GetEnumerator（）方法，获得数组
的一个枚举器。在while循环中——只要MoveNext（）返回true——就用Current属性访问
数组中的元素：
    IEnumerator enumerator = persons.GetEnumerator();
    while (enumerator.MoveNext())
    {
      Person p = enumerator.Current;
      WriteLine(p);
    }
7.7.3 yield语句
自C#的第1个版本以来，使用foreach语句可以轻松地迭代集合。在C# 1.0中，创建枚
举器仍需要做大量的工作。C# 2.0添加了yield语句，以便于创建枚举器。yield return语句
返回集合的一个元素，并移动到下一个元素上。yield break可停止迭代。
下一个例子是用yield 
return语句实现一个简单集合的代码。HelloCollection类包含
GetEnumerator（）方法。该方法的实现代码包含两条yield return语句，它们分别返回字符
串Hello和World（代码文件YieldSample/Program.cs）。
    using System;
    using System.Collections;
    namespace Wrox.ProCSharp.Arrays
    {
      public class HelloCollection
      {
        public IEnumerator GetEnumerator()
        {
          yield return "Hello";
          yield return "World";
        }
      }
  注意： 包含yield语句的方法或属性也称为迭代块。迭代块必须声明为返回
IEnumerator或IEnumerable接口，或者这些接口的泛型版本。这个块可以包含多条yield
return语句或yield break语句，但不能包含return语句。
现在可以用foreach语句迭代集合了：
    public void HelloWorld()
      {
        var helloCollection = new HelloCollection();
        foreach (var s in helloCollection)
        {
          WriteLine(s);
        }
      }
    }
使用迭代块，编译器会生成一个yield类型，其中包含一个状态机，如下面的代码段所
示。yield类型实现IEnumerator和IDisposable接口的属性和方法。在下面的例子中，可以把
yield类型看作内部类Enumerator。外部类的GetEnumerator（）方法实例化并返回一个新的
yield类型。在yield类型中，变量state定义了迭代的当前位置，每次调用MoveNext（）
时，当前位置都会改变。MoveNext（）封装了迭代块的代码，并设置了current变量的
值，从而使Current属性根据位置返回一个对象。
    public class HelloCollection
    {
      public IEnumerator GetEnumerator() => new Enumerator(0);
      public class Enumerator: IEnumerator, IEnumerator, IDisposable
      {
        private int _state;
        private string _current;
        public Enumerator(int state)
        {
          _state = state;
        }
        bool System.Collections.IEnumerator.MoveNext()
        {
          switch (state)
          {
            case 0:
              _current = "Hello";
              _state = 1;
              return true;
            case 1:
              _current = "World";
              _state = 2;
              return true;
            case 2:
              break;
          }
          return false;
        }
        void System.Collections.IEnumerator.Reset()
        {
          throw new NotSupportedException();
        }
        string System.Collections.Generic.IEnumerator.Current => current;
        object System.Collections.IEnumerator.Current => current;
        void IDisposable.Dispose()
        {
        }
      }
    }
  注意： yield语句会生成一个枚举器，而不仅仅生成一个包含的项的列表。这
个枚举器通过foreach语句调用。从foreach中依次访问每一项时，就会访问枚举器。这
样就可以迭代大量的数据，而无须一次把所有的数据都读入内存。
1．迭代集合的不同方式
在下面这个比Hello World示例略大但比较真实的示例中，可以使用yield return语句，
以不同方式迭代集合的类。类MusicTitles可以用默认方式通过GetEnumerator（）方法迭代
标题，用Reverse（）方法逆序迭代标题，用Subset（）方法迭代子集（代码文件
YieldSample/MusicTitles.cs）：
    public class MusicTitles
    {
      string[] names = { "Tubular Bells", "Hergest Ridge", "Ommadawn", "Platinum"
 };
      public IEnumerator GetEnumerator()
      {
        for (int i = 0; i  Reverse()
      {
        for (int i = 3; i >= 0; i-)
        {
          yield return names[i];
        }
      }
      public IEnumerable Subset(int index, int length)
      {
        for (int i = index; i = MaxMoves)
          {
            yield break;
          }
          yield return _circle;
        }
      }
      public IEnumerator Circle()
      {
        while (true)
        {
          WriteLine($"Circle, move {move}");
          if (++_move >= MaxMoves)
          {
            yield break;
          }
          yield return _cross;
        }
      }
    }
在客户端程序中，可以以如下方式使用GameMoves类。将枚举器设置为由
game.Cross（）返回的枚举器类型，以设置第一次移动。在while循环中，调用
enumerator.MoveNext（）。第一次调用enumerator.MoveNext（）时，会调用Cross（）方
法，Cross（）方法使用yield语句返回另一个枚举器。返回的值可以用Current属性访问，
并设置为enumerator变量，用于下一次循环：
    var game = new GameMoves();
    IEnumerator enumerator = game.Cross();
    while (enumerator.MoveNext())
    {
      enumerator = enumerator.Current as IEnumerator;
    }
这个程序的输出会显示交替移动的情况，直到最后一次移动：
    Cross, move 0
    Circle, move 1
    Cross, move 2
    Circle, move 3
    Cross, move 4
    Circle, move 5
    Cross, move 6
    Circle, move 7
    Cross, move 8
7.8 元组
数组合并了相同类型的对象，而元组合并了不同类型的对象。元组起源于函数编程语
言（如F#），在这些语言中频繁使用元组。在.NET 
Framework中，元组可用于所有
的.NET语言。
.NET Framework定义了8个泛型Tuple类和一个静态Tuple类，它们用作元组的工厂。
不同的泛型Tuple类支持不同数量的元素。例如，Tuple包含一个元素，Tuple包含两个元素，依此类推。
方法Divide（）返回包含两个成员的元组Tuple。泛型类的参数定义了成员的
类型，它们都是整数。元组用静态Tuple类的静态Create（）方法创建。Create（）方法的
泛型参数定义了要实例化的元组类型。新建的元组用result和remainder变量初始化，返回
这两个变量相除的结果（代码文件TupleSample/Program.cs）：
    public static Tuple Divide(int dividend, int divisor)
    {
      int result = dividend / divisor;
      int remainder = dividend % divisor;
      return Tuple.Create(result, remainder);
    }
下面的代码说明了Divide（）方法的调用。可以用属性Item1和Item2访问元组的项：
    var result = Divide(5, 2);
    WriteLine($"result of division: {result.Item1}, remainder: {result.Item2}");
如果元组包含的项超过8个，就可以使用带8个参数的Tuple类定义。最后一个模板参
数是TRest，表示必须给它传递一个元组。这样，就可以创建带任意个参数的元组了。