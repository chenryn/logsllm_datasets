title:Active Certificates: A Framework for Delegation
author:Nikita Borisov and
Eric A. Brewer
Active Certiﬁcates: A Framework for Delegation
Nikita Borisov
Eric Brewer
University of California, Berkeley
E-mail: nikitab,brewer @cs.berkeley.edu
Abstract
including expressivity,
In this paper, we present a novel approach to delegation
in computer systems. We exploit mobile code capabilities
of today’s systems to build active certiﬁcates: crypto-
graphically signed mobile agents that implement delegation
policy. Active certiﬁcates arrive at a new combination
of properties,
transparency, and
ofﬂine operation, that is not available in existing systems.
These properties make active certiﬁcates powerful tools to
express delegation. Active certiﬁcates can also be used
as a mechanism to implement complex policy systems,
such as public key infrastructures; systems built in this
way are easily extensible and interoperable. A prototype
implementation of active certiﬁcates has been built as part
of the Ninja [17] project.
1 Introduction
Delegation is an essential tool of cooperation. In com-
puter systems, components frequently need to delegate
rights to other components in order for cooperation to
succeed. Delegation of rights always carries with it a risk
of misuse; therefore, it is important to minimize exposure
by delegating the precise set of rights necessary for the
task at hand. This security concern is especially relevant in
view of the current trends, as cooperating components are
distributed widely over the Internet among many mutually
untrusting systems [26, 27].
The issue of delegation has been addressed in several
public key infrastructures by introducing the concept of a
delegation certiﬁcate. A principal that wishes to delegate
rights to another principal issues a delegation certiﬁcate,
which acts as a signed statement of policy describing what
rights should be delegated and to whom. When access
is required,
the certiﬁcate is interpreted by the access
monitor, which combines the delegation policy contained
in the certiﬁcate with internal policies, as well as any
other certiﬁcates available, and produces an authorization
decision. A challenge in designing such systems is the
choice of policy language — it must be simple enough to
be uniformly interpreted by all access monitors, and rich
enough to specify a highly restrictive delegation policy.
Consequently, such systems often encounter long delays in
standardization and deployment, differing implementations
interpret standards in incompatible ways [19], and resulting
systems are frequently less ﬂexible than many users would
desire.
Another mechanism to perform delegation is a proxy. A
proxy is a daemon, endowed with sufﬁcient credentials to
perform access as the original rights owner. The proxy
performs delegation by accepting requests from others and
then carrying them out on the owner’s behalf. This approach
is highly general, since the proxy completely mediates
access and can therefore enforce a wide range of policies.
Proxies can also be readily deployed and upgraded without
any changes to the infrastructure. However, the lack of
infrastructure support means that the proxy must have its
own internal mechanisms to authenticate the requesters, and
that the owner must ﬁnd a way to keep the proxy available
for use. Furthermore, lending important credentials to a
daemon introduces security concerns.
Active certiﬁcates are a new approach to delegation that
arrives at a combination of these two solutions. An active
certiﬁcate is a special type of delegation certiﬁcate that
contains the program code implementing a mobile agent.
This mobile agent acts as a delegation proxy, mediating
requests and responses. However, the agent is instantiated
by the access monitor whenever use of rights is requested.
Because the certiﬁcate is signed, requests coming from
the agent are implicitly authenticated as coming from the
signer; thus, the agent can successfully proxy the original
owner’s rights.
Active certiﬁcates use mobile code to bring much of the
generality of proxies to a certiﬁcate-based system. The only
restrictions on the possible types of policy result from any
limitations of the mobile execution platform. On the other
hand, since the certiﬁcate is run at the access monitor, it
is able to avoid the availability requirements and security
concerns of proxy-based solutions. Active certiﬁcates enjoy
several properties of certiﬁcate systems that have been
responsible for their popularity, such as ofﬂine operation
and ease of certiﬁcate distribution.
Bob: Request
Bob
Response
TCB of Resource
Alice: Request
Active
Cert
Resource
Response
KAlice
Figure 1. Active certiﬁcate in operation.
The programmatic nature of active certiﬁcates allows
them to express concepts such as composition and modu-
larity. They can therefore be a useful policy tool even in
circumstances where delegation is not required. They are
complex enough to build systems such as a hierarchical
public key infrastructure. The use of a general purpose
language coupled with the interposition architecture make
systems built with active certiﬁcates easily extensible and
interoperable.
The rest of the paper is organized as follows: the next
section describes active certiﬁcates and their properties.
Section 3 explains how to use active certiﬁcates to build
complex systems. Section 4 formally examines the security
of active certiﬁcates. Section 5 describes our implementa-
tion of active certiﬁcates. Sections 6 and 7 discuss related
and future work. Finally, Section 8 concludes.
2 Active Certiﬁcates
2.1 Operation
In this paper, we will discuss delegation in terms of Alice,
who has some rights to access a Resource, and wishes to
delegate a portion of those rights to Bob. We will ﬁrst
describe the case when Alice accesses the Resource without
delegation. It will be convenient to model her interactions
with the Resource as a ﬂow of requests and responses; this
abstraction is sufﬁciently general to represent most kinds
of access. In our model, requests from Alice arrive at the
Resource over some sort of authenticated channel, and are
labeled with the authenticated sender. We will write “Alice:
Request” to represent this. The Resource applies a local
policy decision to decide whether Alice is authorized to
perform the speciﬁed request and sends back an appropriate
response.
When Alice wants to delegate some of her rights to Bob,
she needs to create a proxy that will interact with Bob and
the Resource. The proxy receives Bob’s requests to use the
Resource and applies Alice’s delegation policy to decide
whether to forward the requests onto the Resource. How-
ever, instead of running the proxy herself, Alice implements
the proxy in the form of a mobile agent. She signs the
code for the mobile agent with her private key, producing
an active certiﬁcate. This certiﬁcate is then distributed to
Bob.
When Bob needs to use the Resource, he must present it
with the active certiﬁcate. The Resource veriﬁes the signa-
ture and then creates an instance of the mobile agent, setting
it up to proxy requests from Bob. The signature on the agent
certiﬁes its right to act on Alice’s behalf; therefore, the
runtime system of the Resource implicitly authenticates all
requests coming from the proxy as coming from Alice. The
operation of active certiﬁcates is summarized in Figure 1.
To illustrate the operation of active certiﬁcates, consider
an example where Alice wishes to delegate some of her
right to read the ﬁle "foo" on the ﬁle system to Bob.
She ﬁrst creates an agent program, which looks something
like the code in Figure 2. She then signs the code for the
agent program, creating an active certiﬁcate, and hands the
certiﬁcate to Bob. When Bob wishes to access "foo",
he presents the certiﬁcate to the ﬁle system, which veriﬁes
Alice’s signature and instantiates the agent program. Bob’s
requests to access the ﬁle are sent to the certiﬁcate, which
veriﬁes all the necessary conditions and forwards the them
onto the ﬁle system. Since the forwarded requests are iden-
tiﬁed as coming from Alice, the ﬁle system policy allows
exactly those actions that Alice is authorized to perform.
However, the checks performed by Alice’s program restrict
Bob’s actions further, enforcing Alice’s delegation policy.
2.2 Properties
Active certiﬁcates share similarities with both proxy-
based and certiﬁcate-based approaches to delegation. This
allows them to combine important properties of both sys-
tems. Active certiﬁcates inherit much of the expressivity
and transparency of proxies. On the other hand, they can be
created and distributed ofﬂine with the ease of conventional
certiﬁcates. We shall discuss these properties in detail in
processRequest(request):
IF getCurrentDate() < "Dec 31, 2001" AND
request.requester = "Bob" AND
request.type = READ AND
request.filename = "/some/pathname/foo"
return FileSystem.processRequest(request)
THEN
ELSE
return Error
Figure 2. Example Active Certiﬁcate.
this section.
Expressivity. Expressivity is of paramount importance
in a delegation system. Delegation of rights involves
weakening access control restrictions that would normally
be in place; a speciﬁc, ﬁne-grained delegation policy is
needed to avoid weakening these restrictions more than
necessary. Delegation proxies are highly general in the
collection of policies that theyare able to express, since they
are interposed between Bob and the Resource and they can
employ a powerful implementation language. The former
allows proxies to affect the entirety of communication
between Bob and the Resource; the latter allows for higher
complexity of policies.
Active certiﬁcates inherit much of this expressivity. Like
proxies, they are interposed on the request and response
path; however, the (potentially deliberate) limitations of the
mobile execution platform may restrict the types of policies
that are possible. Nonetheless, there exist mobile platforms
that support powerful languages (e.g. Java [16]), allowing
for a wide range of policies.
For example, Java and similar languages are clearly
sufﬁciently general to understand the application semantics
of requests and responses. The certiﬁcate in the above
example is able to understand requests for the ﬁle system
well enough to identify both the ﬁle name and the operation
that is being performed. In conventional certiﬁcate systems,
the notion of a ﬁle name would need to be integrated with
the policy language before certiﬁcates could reason about
them. Active certiﬁcates, on the other hand, can easily
support new kinds of applications and new kinds of policies
without modifying the runtime system that interprets them.
Transparency. Active certiﬁcates retain much of the
transparency of proxy-based delegation. Although the
Resource does need to be aware of and process active
certiﬁcates,
this function can be restricted to a small
component of the runtime system. An authentication
library can process active certiﬁcates and mark requests as
if they were coming from Alice; the rest of the system need
not know that delegation is taking place.
This is important because it means that delegation can
proceed without explicit support from an application run-
ning at the Resource. Since applications are frequently
used in ways that are not originally intended, interfaces
provided by the application are likely to eventually become
insufﬁcient for users’ evolving needs, and upgrading such
interfaces can be a slow and difﬁcult process. Notice that in
the case of delegation, the policy is chosen by Alice and not
the owner of the Resource, as is the case with authorization.
Therefore, Alice may have a hard time convincing the
owner to invest the effort required to adapt the application in
order to support her policy. Active certiﬁcates allow Alice
to implement her delegation policy without changing the
application.
Of course, help from the application can greatly simplify
the task of implementing security policies. To support this,
active certiﬁcates deﬁne a mechanism to let the application
communicate with the certiﬁcate program; see Section 3.3.
Ofﬂine Delegation. The ability to perform delegation
ofﬂinegives Alice more ﬂexibility, since otherwise she must
either remain online and participate in every transaction,
or leave an agent with her private key to do the same.
The former option limits the scope of delegation, and the
latter introduces resource constraints and security concerns.
Active certiﬁcates allow delegation to occur without Alice
being online; indeed, Alice can create the certiﬁcates ofﬂine
without ever storing her private key on a network-connected
computer.
An active certiﬁcate can be seen as an ofﬂine expression
of Alice’s intentions; i.e. what she would have done had
she been an online participant. To allow Alice to change
her policy at a later time, it is important to associate with
each certiﬁcate an expiration date, after which it is no longer
valid. If more immediate revocation is desired, certiﬁcate
revocation schemes (e.g. [25, 24, 28]) can be used; however,
they add the requirement that either the Resource or Bob
must have (at least intermittent) access to an online server.
3 Composition and Abstraction
Because active certiﬁcates are interposed on the
there is a natural way to
request/response stream,
compose them.
Such composition enables further re-
delegation of rights with additional restrictions. More
importantly, it allows decomposition of a complex policy
into smaller policy modules. The use of a general purpose
language makes it possible for active certiﬁcates to deﬁne
abstractions. Using these two techniques, it is possible to
build complex policy systems based on active certiﬁcates.
Carol: Request
Carol
Response
TCB of Resource
Bob: Request