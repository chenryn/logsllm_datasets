j
h2(H(M )||i) := gρi ·
umij
j
.
(14)
(cid:33)−1
(cid:32) s(cid:89)
j=1
This implies that the signature is equal to (ga)ρi which can
be computed since ρi is known and ga part of the given
CDH triple.
A further change affects how the values uj are com-
it holds that uj = h1(H(M )||j).
puted. By deﬁnition,
Again, the simulator exploits that he simulates the random
oracle and sets h1(H(M )||j) := gαj·hβj for some randomly
chosen values αj, βj.
j}) denotes the response given by the
Now, if (σ(cid:48),{µ(cid:48)
adversary and (σ,{µj}) the correctly-built response, then
one can deduce from that fact that σ (cid:54)= σ(cid:48) that there exists
j − µj
at least one index j such that µ(cid:48)
, g), which
for each j. We obtain e(σ(cid:48) · σ−1, g) = e((cid:81)
j (cid:54)= µj. Let ∆j := µ(cid:48)
j u∆j
j
can be rewritten to:
ha =
−(cid:80)
j βj · ∆j
e(σ(cid:48) · σ−1 · (ga)
j αj·∆j , g) = e(h, ga+b+rU)
Note that (cid:80)
(cid:16)
(cid:80)
j βj·∆j ,
(15)
where ga+b+rU represents the current combined public key.
(cid:54)= 0 with high probability as the
coefﬁcients βj have been chosen uniformly at random and
j αj·∆j(cid:17)((cid:80)
independently. It follows that:
−(cid:80)
−1 · h−b−rU
is a solution to the given CDH instance. Recall that rU has
been chosen by the simulator and b is given to the simulator
due to the change in Game 1.
σ(cid:48) · σ−1 · (ga)
j βj·∆j)
As an additional step in our scheme, the proof of pos-
session pop for the public key pkU = ga+rU needs to be
provided. As the exponent a is unknown, this cannot be
directly computed by the simulator. However, recall that
pop = h0((cid:104)pkU(cid:105))skU where skU = a + rU. Therefore, the
simulator chooses a random integer ρ ∈ Zp and computes
gρ and pkρ
U. Obviously, the second value is a valid signature
of the ﬁrst. Hence, we re-use the trick of reprogramming the
hash and simply set h0((cid:104)pkU(cid:105)) to gρ and pop to pkρ
U.
The ﬁnal Game 3 is the same as Game 2 with a sin-
gle difference. Similar to before, the environment tracks
correctly generated, i.e., are equal to (cid:80)
all messages and observes all POR-instances. We know
already with overwhelming probability, that for all responses
(σ,{µi}) which are accepted, it holds that σ is correctly
computed. Now, the environment checks for all accepted
responses whether the aggregated messages µi are equal to
(i,νi)∈Q νimij ∈
1 ≤ j ≤ s (see also Equation 11). If this is not
Zp,
the case, the environment aborts the security game. Similar
to [33] and the explanations given for Game 2, one can
show that this can be used to solve the discrete logarithm
problem in G—which would contradict the assumption that
this problem is hard in G.
The core idea is the following. Given g, h ∈ G, the
simulator honestly generates all values with the exception of
the values uj that are again set to gαj·hβj . Now, assume that
the adversary succeeds with a response (σ(cid:48),{µ(cid:48)
i}) instead of
the correct response (σ,{µi}). We know already that σ = σ(cid:48)
needs to hold with high probability. Assume that ∆j :=
j − µj for all j. From the fact that both responses are
µ(cid:48)
j , which implies
accepted, it follows that (cid:81)
(cid:89)
(cid:80)
Again, it holds that (cid:80)
j βj · ∆j (cid:54)= 0 with high probability.
(cid:16)
In such case, we solve the discrete logarithm problem by
(cid:80)
j uµj
(cid:80)
j αj·∆j · h
the following:
j =(cid:81)
µ(cid:48)
j
(cid:17)((cid:80)
j βj·∆j)
−1
u∆j
j = g
j βj·∆j .
1 =
j
(16)
j u
h =
g
j αj·∆j
.
(17)
Thus, we conclude that the existence of such an attacker
would contradict the hardness assumption with respect to
the discrete logarithm problem.
Summing up, a prover can only present responses that
are accepted by the veriﬁer if all values are correctly built,
i.e., as displayed in Equations 10 and 11—thus concluding
the proof of Theorem 1.
4. Implementation & Evaluation
In this section, we evaluate an implementation of SPORT
within a realistic cloud setting and we compare the perfor-
mance of SPORT to the RSA-based and BLS-based POR
schemes due to [32]. Note that all three POR schemes are
publicly-veriﬁable.
4.1. Implementation Setup
We implemented a prototype of SPORT in Java. In
our implementation, we relied on the Backblaze library [3]
for constructing the erasure codes (instantiated using Reed-
Solomon coding). For a baseline comparison, we also im-
plemented the public POR (with its two BLS and RSA
variants) schemes (see Appendix A for a description of
these POR schemes). Here, we relied on SHA-256, the
Java built-in random number generator, HMAC based on
SHA-256, 2048-bit RSA modulus, and the JPBC library [2]
(based on the PBC cryptographic library [1]) to implement
Parameter
File size
Group size |p|
RSA modulus size
Elliptic Curve (BLS)
Challenge size (cid:96)
Default Value
64 MB
224 bits
2048 bits
100
PBC Library Curve F
TABLE 1. DEFAULT PARAMETERS USED IN EVALUATION.
(a) Latency in store of SPORT w.r.t. to the block size.
(b) User veriﬁcation latency in the Proof Veriﬁcation procedure of
SPORT w.r.t. to the block size.
(c) Server proof generation latency in SPORT w.r.t. to the block size.
Figure 2. Performance of SPORT with respect to the block size.
BLS signatures. Table 1 summarizes the default parameters
assumed in our setup.
We deployed our implementations on a private network
consisting of two 24-core Intel Xeon E5-2640 with 32GB
of RAM. In our network, the communication between var-
ious machines was bridged using a 100 Mbps switch. The
storage server was running on one of the 24-core Xeon E5-
2640 machine, whereas the clients were co-located on the
second 24-core Xeon E5-2640 machine; this ensures a fair
comparison between the overhead incurred on the users and
on the server for the different schemes.
To emulate a realistic Wide Area Network (WAN), we
shape all trafﬁc exchanged on the networking interfaces with
a Pareto distribution with a mean of 20 ms and a variance of
4 ms [19]. In our setup, each client invokes an operation in
a closed loop, i.e., a client may have at most one pending
 24 26 28 30 32248163264Latency [min]Block Size [KB] 0 4 8 12 16248163264Latency [s]Block Size [KB] 0.4 0.5 0.6 0.7 0.8248163264Latency [s]Block Size [KB](a) Latency incurred in the veriﬁcation of POR
by the users w.r.t. the ﬁle Size.
(b) Latency incurred in updating users’ private
veriﬁcation keys in SPORT with respect to the
number of tenants deduplicating the same ﬁle.
(c) Latency incurred in Store∗ and Store on the
provider w.r.t. the ﬁle Size.
Figure 3. Performance evaluation of SPORT in comparison to the POR-SW schemes of [32]. Each data point in our plots is averaged over 10 independent
runs. Notice that, due to their small size, 95% conﬁdence intervals are omitted from these plots.
operation. Prior to the setup phase, each client disperses
his ﬁles with a (9,12) code. Similar to [5], [8], we assume
that clients query for the availability of (cid:96) = 100 randomly
selected blocks in the POR challenge phase.
When implementing SPORT, we spawned multiple
threads on the cloud machine, each thread corresponding
to a unique audit performed on behalf of a client. Each data
point in our plots is averaged over 10 independent mea-
surements; where appropriate, we include the corresponding
95% conﬁdence intervals.
4.2. Evaluation Results
Before evaluating the performance of SPORT, we start
by analyzing the impact of the block size on the latencies
incurred in the veriﬁcation of POR in the BLS POR scheme
of [32]. Our results (cf. Figure 2) show that modest block
sizes of 8 KB yield the most balanced performance, on
average, across all procedures. Throughout the rest of our
evaluation, we therefore set the block size to 8 KB.
POR protocol performance: In Figure 3(a), we evaluate the
time required by the user to verify a single POR in SPORT,
when compared to the public SW schemes. As expected,
our ﬁndings show that users in SPORT and the BLS SW
scheme witness comparable performance since the (core)
POR veriﬁcation process in both these schemes are similar.
One major difference between SPORT and the BLS SW
scheme of [32] is that users need to seldomly update the
private key in order to be able to verify the POR responses
issued by the provider. This only occurs whenever a new
tenant deduplicates the same ﬁle of interest in between two
consecutive POR performed by users storing the same ﬁle
(cf. Section 3.2). As shown in Figure 3(b), this process
incurs negligible overhead on users; for example, users can
update their private keys based on the contributions of 10
additional tenants in around 3 seconds.
Figure 3(a) also shows that the latency witnessed in
the POR veriﬁcation process in SPORT and the BLS-SW
scheme is almost double when compared to that of the
RSA-SW scheme. This is the case due to the fact that (i)
pairing operations (to verify tags) are considerably more
expensive than RSA exponentiations, and (ii) BLS-based
schemes result in a larger number of sectors per block,
which incurs additional computations in the store, verify,
and prove procedures.
That said, the fact that SPORT/BLS-SW exhibits more
sectors per block allows the cloud provider to efﬁciently
parallelize the computations required to answer a given POR
challenge. In Figure 4, we evaluate the latency with respect
to throughout exhibited by the provider in SPORT when
issuing POR responses (i.e., when computing Equation 11).
We measure throughput as follows: we require that each
client performs back to back POR veriﬁcation operations;
we then increase the number of clients in the system until
the aggregated throughput attained by all clients is saturated.
The peak throughput is then computed as the maximum
aggregated number of POR responses that can be issued by
the storage server within a period of time. Our results show
that the provider can perform up to 3700 POR responses per
SPORT within 50 seconds, resulting in a peak throughput
74 operations (POR responses) per second. In the RSA-
SW scheme, a maximum of 500 POR responses can be
performed within the same time lapse, resulting in a modest
peak throughout of 10 operations per second. In other words,
the provider can scale more than 7 times better in SPORT
when compared to the RSA-SW scheme of [32].
Recall that RSA-based tags are considerably larger in
size when compared to their BLS counterparts (almost 5
times larger). Moreover, RSA does not exhibit key homo-
morphism and therefore does not allow tag sharing. As
shown in Figure 1, this incurs considerable storage overhead
on the provider when multiple tenants deduplicate the same
ﬁle. For example, assuming a ﬁle size of 64 MB, storing
the tags pertaining to 5 tenants in RSA-SW results in an
additional overhead of 10 MB; this overhead reduces to only
0.2 MB in SPORT.
Update protocol performance: In Figure 3(c), we evaluate
the time incurred on the provider when verifying the ten-
 0 2 4 6 8 10 12 148163264128Latency [s]File Size [MB]BLS SW / SPORTRSA SW 0 2 4 6 8 10 12 14 5 10 15 20 25 30 35 40Latency [sec]Number of signatures to verify 0 10 20 30 40 50 608163264128Latency [min]File Size [MB]Server StoreServer UpdateClient Store/Updatetags—thus reducing the total costs borne on users.
Store protocol performance: In Figure 5, we measure the
latency incurred in the store procedure in SPORT compared
to the RSA-SW and BLS-SW schemes of [32]. As expected,
the latency incurred in store increases almost linearly with
the ﬁle size in all POR schemes. Our results show that the
store latency incurred in SPORT is the same as that incurred
in the BLS SW of [32]. Indeed, both schemes involve the
same procedure for creating tags based on BLS signatures;
in this respect, SPORT does not incur any additional over-
head on the user when compared to the basic BLS SW store
procedure. On the other hand, although BLS signatures are
faster to generate by the user when compared to their RSA
counterpart, BLS-based tags result in considerably smaller
sector sizes than the RSA-based scheme, which results in a
larger number of sectors per block, and thus in additional
computations to create each block tag. This explains the
reason why the store latency exhibited by the users of
SPORT is almost twice as much larger than that of the
RSA-SW protocol. We, however, point out that the store
procedure is only performed once per user—after which
users simply execute the POR protocol to verify the integrity
of their outsourced data.
5. Related Work
In what follows, we brieﬂy overview related work in the
area.
Single-tenant POR: Juels and Kaliski [26] introduce a
single-tenant POR scheme, which relies on indistinguishable
blocks, hidden among regular ﬁle blocks in order to detect
data modiﬁcation by the server. This proposal only supports
a bounded number of POR queries, after which the storage
server can learn all the embedded sentinels. The authors also
propose a Merkle-tree construction for constructing public
POR, which can be veriﬁed by any external party without
the need of a secret key. Bowers et al. [15] propose various
improvements to the original single-tenant POR in [26],
which tolerates a Byzantine adversarial model. Shacham and
Waters [32] propose private-key-based and public-key-based
(single-tenant) POR schemes which utilize homomorphic
authenticators to yield compact proofs.
In [8], Ateniese et al. introduce a variant of POR called
proofs of data possession (PDP). It supports an unbounded
number of challenge queries and enables public veriﬁability
of the PDP. Unlike other POR schemes, this instantiation