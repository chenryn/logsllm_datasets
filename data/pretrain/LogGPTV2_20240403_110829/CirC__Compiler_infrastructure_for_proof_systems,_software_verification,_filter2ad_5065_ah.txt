### References

1. DARPA SIEVE Program Proposers Day Slides. (2019). Retrieved from: <//www.darpa.mil/attachments/SIEVEProposersDaySlidesv4.pdf>. Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022, at 12:58:36 UTC from IEEE Xplore. Restrictions apply.

2. “Researchers demonstrate potential for zero-knowledge proofs in vulnerability disclosure.” (2021). DARPA Press Release. Retrieved from: <https://www.darpa.mil/news-events/2021-04-22>.

3. Tramèr, F., Zhang, F., Lin, H., Hubaux, J.-P., Juels, A., & Shi, E. (2017). “Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge.” In IEEE S&P.

4. Breidenbach, L., Daian, P., Tramèr, F., & Juels, A. (2019). “The Hydra framework for principled, automated bug bounties.” *IEEE Security & Privacy Magazine*, 17, pp. 53–61.

5. Breidenbach, L., Daian, P., Tramèr, F., & Juels, A. (2018). “Enter the Hydra: Towards principled bug bounties and exploit-resistant smart contracts.” In USENIX Security.

6. Heath, D., & Kolesnikov, V. (2021). “Stacked garbling with O(b log b) computation.” In EUROCRYPT.

7. Heath, D., & Kolesnikov, V. (2020). “Stacked garbling for disjunctive zero-knowledge proofs.” In EUROCRYPT.

8. Baum, C., Malozemoff, A. J., Rosen, M. B., & Scholl, P. (2021). “Mac’n’cheese: Zero-knowledge proofs for boolean and arithmetic circuits with nested disjunctions.” In CRYPTO.

9. Heath, D., Yang, Y., Devecsery, D., & Kolesnikov, V. (2021). “Zero knowledge for everything and everyone: Fast ZK processor with cached ORAM for ANSI C programs.” In IEEE S&P.

10. Leino, K. R. M., & Pit-Claudel, C. (2016). “Trigger selection strategies to stabilize program verifiers.” In CAV, Springer.

11. Andrysco, M., Nötzli, A., Brown, F., Jhala, R., & Stefan, D. (2018). “Towards verified, constant-time floating point operations.” In CCS.

12. Kaggle. (n.d.). “Competitions.” Retrieved from: <https://www.kaggle.com/docs/competitions>.

13. ARPA-E. (n.d.). “Grid optimization competition.” Retrieved from: <https://gocompetition.energy.gov/>.

14. Yao, A. C. (1982). “Protocols for secure computations.” In FOCS.

15. Goldreich, O., Micali, S., & Wigderson, A. (1987). “How to play any mental game or A completeness theorem for protocols with honest majority.” In STOC.

16. Ben-Or, M., Goldwasser, S., & Wigderson, A. (1988). “Completeness theorems for non-cryptographic fault-tolerant distributed computation (extended abstract).” In STOC.

17. Beaver, D. (1991). “Efficient multiparty protocols using circuit randomization.” In CRYPTO.

18. Ishai, Y., Kushilevitz, E., Ostrovsky, R., & Sahai, A. (2007). “Zero-knowledge from secure multiparty computation.” In STOC.

19. Vu, V., Setty, S., Blumberg, A. J., & Walfish, M. (2013). “A hybrid architecture for interactive verifiable computation.” In IEEE S&P.

20. Filliâtre, J.-C., & Conchon, S. (2006). “Type-safe modular hash-consing.” In ML.

21. Ershov, A. P. (1958). “On programming of arithmetic operations.” *CACM*, 1(8), pp. 3–6.

### Appendix A: Full Benchmarks

In this section, we compare CirC v1.0 against ZoKrates, Circom, and Pequin compilers on a full set of benchmarks. We use the same testbed described in Section 5.1.

#### ZoKrates-to-R1CS
We benchmark every circuit in the ZoKrates standard library (v0.6.1), reporting compile time and constraint count for CirC and the ZoKrates reference compiler (v0.6.1). The results are shown in Figure 22. Generally, CirC produces slightly fewer constraints. For the elliptic curve module (ecc), CirC produces many fewer constraints, but it produces slightly more for bit-intensive hashing (sha256). In almost all cases, the ZoKrates compiler is faster; this is likely due to the term representation in CirC’s v1.0 implementation. Terms are recursive Haskell GADTs, and maps from them are either (a) hash maps on a hash that traverses the full term or (b) tree maps on the term’s full string representation. CirC v2.0 represents terms with hash-consing [20, 21], which yields better performance.

| File | CirC Constraints | CirC Time (s) | ZoKrates Constraints | ZoKrates Time (s) |
|------|------------------|---------------|---------------------|-------------------|
| ecc/babyjubjubParams | 10 | 0.08 | 10 | 0.01 |
| ecc/edwardsAdd | 11 | 0.07 | 19 | 0.01 |
| ecc/edwardsCompress | 763 | 3.66 | 766 | 0.13 |
| ecc/edwardsNegate | 2 | 0.06 | 2 | 0.02 |
| ecc/edwardsOnCurve | 6 | 0.12 | 9 | 0.01 |
| ecc/edwardsOrderCheck | 40 | 0.09 | 60 | 0.03 |
| ecc/edwardsScalarMult | 6394 | 6.04 | 9994 | 0.46 |
| ecc/proofOfOwnership | 6350 | 7.92 | 9989 | 0.85 |
| mimc7/mimc7R10 | 40 | 0.48 | 42 | 0.02 |
| mimc7/mimc7R20 | 80 | 0.84 | 82 | 0.03 |
| mimc7/mimc7R50 | 200 | 1.31 | 202 | 0.19 |
| mimc7/mimc7R90 | 360 | 1.96 | 362 | 0.88 |
| mimcSponge/mimcFeistel | 661 | 7.29 | 662 | 11.10 |
| mimcSponge/mimcSponge | 2632 | 46.46 | 2643 | 89.39 |
| pedersen/512bit | 3062 | 9.38 | 3940 | 1.90 |
| sha256/1024bitPadded | 84237 | 193.11 | 79575 | 18.13 |
| sha256/1024bit | 57098 | 122.31 | 56674 | 8.82 |
| sha256/1536bit | 85791 | 182.48 | 87345 | 16.38 |
| sha256/256bitPadded | 27547 | 61.72 | 26587 | 3.80 |
| sha256/512bitPacked | 55544 | 141.51 | 50398 | 10.70 |
| sha256/512bitPadded | 55544 | 125.13 | 48904 | 8.74 |
| sha256/512bit | 28405 | 60.45 | 27470 | 3.18 |
| sha256/shaRound | 28949 | 56.42 | 28070 | 2.49 |
| utils/256bitsDirectionHelper | 529 | 0.10 | 1105 | 0.02 |
| signatures/verifyEddsa | 96765 | 205.78 | 99359 | 22.20 |
| casts/1024to256array | 2048 | 7.80 | 2048 | 0.19 |
| casts/bool 128 to u32 4 | 132 | 0.37 | 132 | 0.01 |
| casts/bool 256 to u32 8 | 264 | 0.65 | 264 | 0.05 |
| casts/u32 4 to bool 128 | 256 | 0.42 | 260 | 0.01 |
| casts/u32 8 to bool 256 | 512 | 0.64 | 520 | 0.02 |
| multiplexer/lookup1bit | 2 | 0.06 | 4 | 0.02 |
| multiplexer/lookup2bit | 5 | 0.08 | 6 | 0.02 |
| multiplexer/lookup3bitSigned | 7 | 0.07 | 8 | 0.01 |
| bool/nonStrictUnpack256 | 508 | 1.49 | 511 | 0.02 |
| bool/pack128 | 128 | 0.42 | 129 | 0.05 |
| bool/pack256 | 256 | 1.10 | 257 | 0.05 |
| bool/unpack128 | 382 | 1.30 | 635 | 0.06 |
| u32/nonStrictUnpack256 | 254 | 2.05 | 263 | 0.02 |
| u32/pack128 | 128 | 0.54 | 133 | 0.11 |
| u32/pack256 | 256 | 0.96 | 265 | 0.05 |
| u32/unpack128 | 254 | 0.08 | 511 | 0.08 |

**Figure 22.** CirC vs. the ZoKrates 0.6.1 reference compiler on the ZoKrates standard library.

#### Circom-to-R1CS
We evaluate on every test circuit in the test suite of the Circom standard library (v0.20). We omit circuits that the Circom compiler (v0.30) could not compile (either because the test was invalid or because our testbed did not have enough memory).

Figure 23 shows the results. The compilers give identical constraint counts in nearly every case. Recall (§5.1) that Circom is essentially a hardware description language for R1CS, and both compilers perform the same R1CS optimizations. The runtime of CirC is typically better than the reference compiler, which is written in JavaScript.

#### C-to-R1CS
We evaluate on all C-language benchmarks from [11]. We obtain these benchmarks from the Pequin source distribution (<https://github.com/pepper-project/pequin>). In [11], these benchmarks are parameterized; we use the default parameters from the source distribution.

We apply two transforms to the benchmarks before evaluation:
1. Since CirC’s C front-end does not support Pequin’s (bespoke) I/O conventions for multi-dimensional input arrays, we flatten the inputs to the matrix-multiplication benchmark. (Note that CirC’s C front-end does support standard C-language multi-dimensional arrays.)
2. Since CirC’s C front-end does not evaluate C constant expressions before type checking, we evaluate constant expressions in array lengths.

Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022, at 12:58:36 UTC from IEEE Xplore. Restrictions apply.