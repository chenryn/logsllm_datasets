The deﬁnition of the read and write sets for a table
may involve nested queries or joins with other tables.
For example, suppose there are two additional tables in
the database: carts and cart info. The carts table maps a
customer id to a cart id (cart id), while the cart info ta-
ble contains the items in each cart. Since cart info only
contains cart id, a join with carts is necessary to retrieve
the cid. Listing 3 shows the cart info table’s read set for
different customers.
DEFINE READSET ON ROLE c u s t o m e r USER $i
ON TABLE c a r t _ i n f o
AS SELECT * FROM c a r t _ i n f o x ,
carts y
WHERE x . cart_id = y . cart_id
AND y . cid = $i ;
Listing 3: The read set for cart info involving a join.
Next, we deﬁne read and write sets formally.
In
our discussion, an operation can be a SELECT, INSERT,
DELETE, or UPDATE statement. (We use query and oper-
ation interchangeably.) We denote the set S as the tuple
space, representing the (inﬁnite) universe of all possible
tuples. A relational database consists of a collection of
tables. A table T is a ﬁnite subset of S. Since each ele-
ment of a set is unique, we allow for duplicate entries by
taking the Cartesian product of S with the natural num-
bers, N × S, and use that as our new tuple space. Du-
plicate entries will have a unique number in S. We also
denote the number of tuples in a table T as |T|. Further-
more, given any subset s ⊆ S, we denote its complement
as sc = S\ s.
Given a set of users U, we deﬁne a security policy
as a pair of two functions (pr, pw), where pr is the read
policy and pw is the write policy, deﬁned below.
Deﬁnition 1 (Read/Write Policy). Given a user u, the
read policy pr(u) is the subset of S that u is allowed to
read. Likewise, the write policy pw(u) is the subset of S
that u is allowed to add or modify.
A modiﬁcation can be addition, removal, or update of
a tuple. Based on the deﬁnition of a security policy, we
now deﬁne the read set and write set for a user u.
Deﬁnition 2. (Read/Write Set) Given a user u ∈ U and a
table T ⊆ S,
• The read set of T , Vr(T,u) = T ∩ pr(u), represents
the set of tuples in T that user u can read.
4Currently, we assume the mapping of the current user to their role
and identifying attribute is performed by the application.
1450    26th USENIX Security Symposium
USENIX Association
• The write set of T , Vw(T,u) = T ∩ pw(u), represents
the set of tuples in T that user u can modify5.
Note that the READSET and WRITESET statements in-
troduced earlier correspond to these formal notions of
read and write sets, given a table and user information,
by simply instantiating the user identiﬁer and applying
their SELECT statements to T .
We also deﬁne the negated read set of T as NVr(T,u) =
T \ Vr(T,u), which is the set of all tuples in T the
user cannot read. Similarly, negated write set of T
NVw(T,u) = T \ Vw(T,u), which is the set of all tu-
ples in T the user cannot modify.
It is trivial to show
NVr(T,u) = T \ pr(u) and NVw(T,u) = T \ pw(u).
5.2 Safe Reads and Safe Writes
Now that we have formally deﬁned a security policy and
the read/write sets, we can formally deﬁne safe opera-
tions. We ﬁrst consider read queries, which correspond
to SELECT queries in SQL, and then write queries,
which correspond to UPDATE, INSERT, and DELETE
queries in SQL.
Deﬁnition 3 (Read-safety). A query R by a user u with
read policy pr is read-safe if the query would return
the same result when executed on the subset of tuples in
the accessed tables that are readable to the user, namely
pr(u).
In other words, a read-safe SELECT query should re-
turn the same result whether executed on the original ta-
bles or on the read sets of those tables. Note that pr(u)
can, in general, be a set of tuples from multiple tables for
queries with joins.
Corollary 1. A query that only accesses tables whose
tuples are all in pr(u) is read-safe.
i where T(cid:48)
The above corollary implies the following:
if in a
query R, each table Ti of the database accessed in
the FROM clause is replaced by a table T(cid:48)
i =
T ∩ pr(u), then the resulting query R(cid:48) will be read-
safe. Such an approach has been proposed by previous
systems [43, 46], and is also taken by SafeD. (As we
will discuss shortly, enforcing safety for write queries is
more challenging.) SafeD automatically transforms any
SELECT queries (including those nested within other
queries) by appending additional tables and conditions
to the operation’s FROM and WHERE clauses, respectively,
that are implied by the READSET policy rules. We refer
to this process as read policy intersection. Also, note
that checking whether a query is read-safe can be more
expensive than transforming it to be safe, since checking
may require executing the query twice.
5Since an INSERT query adds tuples not in T , the write set is eval-
uated after the new tuples are added (See Section 5.2)
We next deﬁne the notion of read-safety and write-
safety for a write query. As in SQL, we assume that a
write query can read any set of tables (via nested SE-
LECT statements), but modify only a single table and re-
turn, as its result, the modiﬁed table. Intuitively, a write
query by a user u that updates a table T is write-safe if
1) it does not modify anything outside table T ’s write set,
and 2) any nested SELECTs within it are also read-safe
(so that it does not leak data via the writes). Formally,
Deﬁnition 4. A write query W by a user u that modiﬁes
table T is read-safe if all of its nested queries (which
must be SELECTs) are read-safe. Furthermore, it is
write-safe if it does not modify the set of tuples that
are outside its write set for table T , i.e., NVw(T,u) =
NVw(W (T ),u), where W (T ) represents the tuples in ta-
ble T after executing W .
Let A = W (T ) \ T represent the new entries added
by W to T , and let D = T \ W (T ) represent the en-
tries removed from T . It trivially follows that W (T ) =
(T ∪ A)\ D. For INSERT queries, D will be an empty set
and for DELETE queries, A will be an empty set. For
UPDATE queries, both A and D could be non-empty.
We denote (cid:104)W (T )(cid:105) to be the sum of the cardinality
of A and the cardinality of D for tuples added or deleted
from T as a result of executing W . It can be formally
shown that the deﬁnition of write-safety does not require
comparing W (T ) with T , but only examining cardinality
of changes. In particular, the following theorem can be
shown to hold:
Theorem 1. Given a user u ∈ U, a tuple space S, a set of
tuples s ⊆ S, a table T ⊆ S, a write operation W that is
read-safe, the write policy pw, and the write set Vw(T,u),
the following conditions,
(1) Vw(W (T ),u) = W (Vw(T,u))
(2)
(cid:104)W (T )(cid:105) = (cid:104)W (Vw(T,u))(cid:105)
are necessary and sufﬁcient to ensure W is write-safe,
i.e.,
NVw(T,u) = NVw(W (T ),u).
Intuitively, condition (1) states that the resulting table
from a write-safe write query should be the same whether
the write is done on the original table T or on the write
set Vw(T,u). Condition (2) states that the total count of
tuples added/deleted in T from executing W (T ) should
be identical to the count of tuples added/deleted if W was
instead executed on Vw(T,u). This ensures that W does
not cause any tuples to be moved outside its write set as
a result of changes. We defer the proof of Theorem 1 to
the Appendix.
We now can deﬁne the notion of a query being safe in
terms of read-safety and write-safety for the four types
of queries addressed in this paper.
USENIX Association
26th USENIX Security Symposium    1451
Deﬁnition 5 (Safe Query). Given a policy (pr, pw), we
consider a SELECT query for a user u to be safe if it is
read-safe. We consider an INSERT, DELETE, or UPDATE
query to be safe if it is read-safe and write-safe.
Corollary 2 (Safety of INSERT). INSERT queries: If all
created tuples by an INSERT query are within the write
set of the user, then the query is write-safe.
Proof outline: In this case, the same tuple(s) will be
added, irrespective of whether they are added to T or
Vw(T,u). Thus, conditions (1) and (2) in Theorem 1 hold.
Corollary 3 (Safety of DELETE). DELETE queries: A
DELETE query that only deletes from Vw(T,u) is write-
safe.
Proof outline: The query only deletes tuples in the
write set so tuples in NVw(T ) are not changed. There-
fore, it trivially satisﬁes Deﬁnition 4. of Theorem 1 and
takes advantage of the properties of DELETE.
Corollary 4 (Safety of UPDATE). UPDATE queries: An
UPDATE query W that only updates tuples in Vw(T,u) is
write-safe if W (Vw(T,u))\Vw(T,u) is within the user’s
write set.
Proof outline: An UPDATE can be thought of as a
DELETE of the old tuples followed by an INSERT of the
new tuples. From Corollary 3, we know the DELETE op-
eration of the UPDATE is safe. If W (Vw(T,u))\Vw(T,u)
is in the user’s write set, then the INSERT operation of
the UPDATE is write-safe due to Corollary 2.
The new value of an updated tuple has to be within the
write set. If T is replaced by Vw(T,u) in Theorem 1, it
can be shown that the condition in the corollary implies
both conditions of the theorem.
6 SafeD Design and Algorithms
SafeD operates as a modiﬁed JDBC driver that is trans-
parent to the application. It transforms a submitted query
into a safe query and returns the corresponding result. To
do that, SafeD applies the Truman model [32] semantics
for read queries, in which a query only sees tuples in its
read sets. For write queries, SafeD uses a novel tech-
nique, called phantom extraction, to ensure only the por-
tion of the table within the write set is updated (Section
6.1).
SafeD also provides an experimental (i.e., debugging)
mode in which a read/write operation is carried out only
if it is safe in the ﬁrst place (a.k.a.
“non-Truman”
model [45]). Unfortunately, with the current state of the
art, providing such a semantics is expensive. Consider
a SELECT query. To know whether the query is safe,
one needs to run the query on the original tables as well
as their read sets and compare the results. Truman se-
mantics avoid the need to execute the query twice since
execution of the query on the original tables is not re-
quired. We prototyped this strategy and tested it with the
TPC-C benchmark and found it to thrash at low transac-
tion rates. We thus focus on the strategy of transforming
queries to make them safe in rest of the paper.
6.1 Phantom Extraction
We say that a write query’s phantom is a read-safe copy
of the query, which only updates rows in the write set. In
SafeD, write queries issued by the application are never
executed on the database.
Instead, each query’s phan-
tom is extracted and evaluated for write-safety. Phantom
extraction involves 3 steps. First, transform the original
query into a read-safe query using read policy intersec-
tion (Section 5.2). Then, modify the read-safe query so it
only updates rows in the write set. This modiﬁed query is
the phantom. Finally, determine if the phantom is write-
safe. If the query’s phantom is write-safe, the phantom’s
changes to the database are made permanent. Otherwise
a permission violation error is returned and the changes
are rolled back. In 6.2, we present two algorithms for
phantom extraction.
6.2 Query Transformation Strategy
The transformation module automatically transforms a
query Q into a safe query that is guaranteed to satisfy the
two conditions in Theorem 1 for read-safety and write-
safety, while providing the illusion that the query oper-
ates on the view of tables that are in the user’s read set
and write set. The algorithm we present can, at times, re-
quire issuing multiple queries to the database to check
write-safety. Appendix B provides several illustrating
examples of query transformation using the algorithms
presented in this section.
Algorithm 1 shows the general transformation logic
to transform a query Q issued by a user u. The queries
currently handled by SafeD include SELECT, INSERT,
UPDATE, and DELETE queries, which require row-level
access controls. The transformation algorithm is a two-
step process. First, SafeD must ensure that the trans-
formed query is read-safe, i.e., s ⊆ pr(u) is true, where s
is the set of tuples read by the query and gives the illusion
that the query is running against the read set of accessed
tables in the database (lines 2-5). Given a user u and
a query Q, SafeD uses read policy intersection (Section
5.2) to create a read-safe query rsQ. Read policy inter-
section automatically transforms a SELECT query in Q
into one that is read-safe by appending additional tables
and conditions to each query based on the read policy.
Nested Queries (read-safety) — SELECT queries can
be nested within other queries, including write queries.
SafeD transforms them recursively to make them read-
safe. Starting from the deepest sub-query, SafeD con-
catenates the associated read view predicates to the
1452    26th USENIX Security Symposium
USENIX Association
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
WHERE clause of the sub-query.
Write Queries (write-safety) — Given rsQ, a read-
safe transformation of Q, SafeD next executes the Phan-
tomExtract function that results in a write-safe execution
of the query using the phantom extraction technique (line
8). An input to PhantomExtract is the WRITESET def-
inition that applies to this query (which is essentially a
SELECT statement – see Section 5.1).
Algorithm 1 General Safe Execution Algorithm
1: function SAFEEXECUTE(USER u, QUERY Q)
read policy ← GetReadPolicy(u)
2:
rsQ ← IntersectReadPolicy(Q,readpolicy)
3:
if (Q is a Select query) then
4:
return Execute(rsQ)
5:
T ← GetWriteTable(rsQ)
6:
writesetde f ← GetWriteSetDef(u, T)
7:
8: return PhantomExtract(rsQ, T,writesetdef)
SafeD uses one of two strategies for implementing the