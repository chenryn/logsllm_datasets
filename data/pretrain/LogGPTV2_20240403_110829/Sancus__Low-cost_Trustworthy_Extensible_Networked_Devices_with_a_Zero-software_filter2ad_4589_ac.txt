### 3.2 Memory Protection and Key Generation

The layout information of the module is stored in the protected storage of the processor (see Section 3.1 and Figure 3). Additionally, memory access control is enabled, and a module key \( K_{N,SP,SM} \) is generated using the text section and layout of the loaded module. This key is then stored in the protected storage.

This mechanism ensures that we do not need to trust the operating system that loads the module into memory. If the content of the text section or the layout information is modified before the `protect` instruction is executed, the generated key will be different, and subsequent attestations or authentications performed by the module will fail. Once the `protect` instruction has succeeded, the hardware-implemented memory access control scheme prevents any software on the node from tampering with the module's data.

#### Lifting Memory Access Control

The only way to lift the memory access control is by calling the `unprotect` processor instruction. This instruction lifts the memory protection for the module from which it is called. A module should only call `unprotect` after it has cleared its protected data section.

#### Handling Memory Access Violations

To handle memory access violations, we have opted for a simple design: resetting the processor and clearing memory on every reset. This approach ensures security but may negatively impact the availability of the node, as a software bug could cause the node to reset and clear its memory. Future work could explore less severe methods for handling memory access violations, such as returning default values for invalid reads or redirecting invalid jumps to exception handlers.

### 3.4 Remote Attestation and Secure Communication

The module key \( K_{N,SP,SM} \) is managed by the hardware of the node and can be used by software in two ways. The first way is through the following processor instruction:

```plaintext
MAC-seal start address, length, result address
```

This instruction can only be called from within the text section of a protected module. It computes the MAC of the data in memory starting at the specified `start address` and up to `start address + length` using the module key. The resulting MAC value is written to the `result address`.

Modules can use this instruction to protect the integrity of data they send to their provider. The data plus the corresponding MAC can be sent over an untrusted network using the untrusted operating system. If the MAC verifies correctly upon receipt by the provider \( SP \), it can be assured that the data indeed comes from \( SM \) running on \( N \) on behalf of \( SP \).

To implement remote attestation, we add a freshness guarantee to protect against replay attacks. The provider \( SP \) sends a fresh nonce \( No \) to the node \( N \), and the module \( SM \) returns the MAC of this nonce using the key \( K_{N,SP,SM} \), computed with the `MAC-seal` instruction. This ensures that the correct module is running on the node at that point in time.

Building on this scheme, secure communication can also be implemented. When \( SP \) wants to receive data from \( SM \) on \( N \), it sends a request containing a nonce \( No \) and possibly some input data \( I \) to the node. This request is received by untrusted code, which passes \( No \) and \( I \) as arguments to the function of \( SM \) to be called. After \( SM \) calculates the output \( O \), it asks the processor to compute a MAC of \( No || I || O \) using the `MAC-seal` instruction. This MAC is then sent along with \( O \) to \( SP \). By verifying the MAC with its own copy of the module key, the provider has strong assurance that \( O \) was produced by \( SM \) on node \( N \) given input \( I \).

### 3.5 Secure Linking and Local Communication

In this section, we discuss how to ensure the secure linking property mentioned in Section 2.3. Specifically, we consider the situation where a module \( SM1 \) wants to call another module \( SM2 \) and needs to ensure:
1. The integrity of \( SM2 \) has not been compromised.
2. \( SM2 \) is correctly protected by the processor.

To achieve this, \( SM1 \) is deployed with a MAC of \( SM2 \) created with the module key \( K_{N,SP,SM1} \). The processor provides a special instruction to check the existence and integrity of a module at a specified address:

```plaintext
MAC-verify address, expected MAC
```

This instruction:
- Verifies that a module is loaded (with protection enabled) at the provided address.
- Computes the MAC of the identity of that module using the module key of the module calling the instruction.
- Compares the resulting MAC with the expected MAC parameter.
- Returns the moduleâ€™s ID if the MACs match; otherwise, it returns zero.

This is the second (and final) way in which a module can use its module key, in addition to the `MAC-seal` instruction discussed in Section 3.4.

Using this instruction, a module can securely check for the presence of another expected module and then call that module. Since this authentication process is relatively expensive, our design includes a more efficient mechanism for repeated authentication. The processor assigns sequential IDs to modules and ensures that these IDs are not reused within one boot cycle. The `get-id` instruction checks that a protected module is present at a given address and returns the ID of the module. Once a module has verified the expected module using the initial authentication method, it can remember the ID and use the `get-id` instruction for subsequent authentications.

### 3.6 An End-to-End Example

To illustrate the concepts discussed, consider an example in the context of sensor networks. Figure 4 shows our setup, which includes a single node with a sensor \( S \) attached. Communication with \( S \) is done through memory-mapped I/O. The owner of the sensor network, \( IP \), has deployed a special module \( SMS \) on the processor to manage communication with \( S \). By ensuring that the protected data section of \( SMS \) contains the memory-mapped I/O region of \( S \), \( IP \) ensures that no software outside of \( SMS \) can configure or communicate directly with \( S \); all requests to \( S \) must go through \( SMS \).

Figure 4 also shows several software providers \( SP1, \ldots, SP_n \) who have each deployed a module \( SM1, \ldots, SM_n \). We will walk through the lifecycle of a module in this setup.

1. **Deployment Request**: The first step for a provider \( SP \) is to contact \( IP \) and request permission to run a module on the sensor node. If \( IP \) accepts the request, it provides \( SP \) with its provider key for the node, \( K_{N,SP} \).

2. **Module Creation and Deployment**: \( SP \) creates the module \( SM \) and calculates the associated module key \( K_{N,SP,SM} \). Since \( SM \) will communicate with \( SMS \), \( SP \) requests the identity of \( SMS \) from \( IP \). A MAC of this identity, created with \( K_{N,SP,SM} \), is included in an unprotected section of \( SM \) so that \( SM \) can authenticate \( SMS \). \( SM \) is then sent to the node for deployment.

3. **Loading and Protecting the Module**: Once \( SM \) is received on the node, it is loaded into memory by untrusted software like the operating system. The processor is then requested to protect \( SM \) using the `protect` instruction. The processor enables memory protection, computes the key \( K_{N,SP,SM} \), and stores it in hardware.

4. **Requesting Data**: Now that \( SM \) has been deployed, \( SP \) can start requesting data from it. \( SP \) sends a request containing a nonce \( No \) to the node. Once the request is received, \( SM \) is called, passing \( No \) as an argument.

5. **Verifying Integrity and Calling \( SMS \)**: Before \( SM \) calls \( SMS \), it verifies the integrity of \( SMS \) by executing the `MAC-verify` instruction, passing the address of the known MAC of \( SMS \) and the address of the entry point it is about to call. The ID of \( SMS \) is returned to \( SM \), and if it is non-zero, \( SM \) calls \( SMS \) to receive the sensor data from \( S \). \( SM \) typically stores the returned ID of \( SMS \) in its protected data section for future authentications using the `get-id` instruction.

6. **Processing and Sending Data**: Once the received sensor data has been processed into the output data \( O \), \( SM \) requests the processor to seal \( No || O \) using the `MAC-seal` instruction. \( SM \) then passes this MAC together with \( O \) to the (untrusted) network stack to be sent to \( SP \). When \( SP \) receives the output of \( SM \), it can verify its integrity by recalculating the MAC.

### 4. Implementation

This section discusses the implementation of Sancus, including hardware support for all security features and a compiler for creating deployable software modules.

#### 4.1 The Processor

Our hardware implementation is based on the open-source TI MSP430 architecture, specifically the openMSP430 from the OpenCores project. We chose this architecture because both GCC and LLVM support it, and there is a lot of existing software running natively on the MSP430, such as the Contiki operating system.

**Isolation**: To enforce the access rights shown in Table 1, the processor needs access to the layout of every protected software module. For performance reasons, we store the layout information in special registers inside the processor. This means the total number of protected software modules at any time has a fixed upper bound, \( NSM \), which can be configured when synthesizing the processor.

Figure 5 shows the Memory Access Logic (MAL) circuit used to enforce the access rights of a single software module. This circuit is instantiated \( NSM \) times in the processor. It has four inputs: `pc` and `prev pc` (current and previous program counter values), `mab` (memory address bus), and `mb en` (memory bus enable). The MAL circuit has one output, `violation`, which is asserted when an access rule is violated.

The MAL circuit maintains state in registers: `TS` (start of text section), `TE` (end of text section), `PS` (start of protected section), `PE` (end of protected section), and `EN` (set to 1 if a module is protected). The layout is saved in the registers when the `protect` instruction is called, and `EN` is unset when the `unprotect` instruction is called.

In our prototype, new modules are loaded through a debug interface, and only the debug unit can write to the memory region where text sections are loaded. In a production implementation, additional checks would be added to enforce the read-only nature of text sections.

Since the circuit is purely combinational, no extra cycles are needed for enforcing access rights. This is crucial as these rights need to be checked for every instruction. The critical path of the processor is not significantly affected, and the parallel instantiation of MAL circuits does not influence the critical path length.

**Attestation**: To implement our design, two cryptographic features are needed: the ability to create MACs and a key derivation function. We chose HMAC for its simplicity and efficiency, as it requires only two calls of a hash function. HMAC also serves as the basic building block for HKDF, a key derivation function, allowing for shared hardware between the MAC and key derivation implementations. For the hash function, we use SPONGENT-128/128/8, which has a small hardware footprint and acceptable throughput.