志趣相投的⼈人组成测试⼩小组（Grouplets）
专注在改进闪电战
⽬目标：整个Google采⽤用⾃自动化测试
没有预算或正式授权，也没有明确的约束
Testing on the Toilet
只有线上的宣传不不⾜足够
每周更更新厕所的测试海海报
两个举措显著促进成功
Test Certiﬁed (TC)
提供路路线图，改进⾃自动化测试
克服第⼀一个障碍：不不知道从哪⾥里里或如何开始
Level1~3
Level 1
快速建⽴立基线度量量
Level 2
设定规则，达到⾃自动化覆盖率⽬目标
Level 3
朝⻓长远的覆盖率⽬目标努⼒力力
提供测试认证导师
全职导师，亲⾃自动⼿手，跟团队⼀一起改
进测试实践和代码质量量
应⽤用测试⼩小组的知识、⼯工具、技术到团队的代码
将TC作为指导以及⽬目标使⽤用
全职顾问最终由公司资助
公司级的Fixit改进闪电战
普通⼯工程师有⼀一个想法，可以在全公司内召集⼯工程
师进⾏行行为期⼀一天，密集的代码改良或⼯工具应⽤用冲刺刺
测试⼯工具
其他⼯工具
在关键点及时提供专注的任务，产⽣生兴奋和能量量，
帮助达到最⾼高⽔水平
Part VI： Integrating Information 
Security, Change Management, and 
Compliance
22. 信息安全是每个⼈人每天的任务
开发：运维：信息安全 = 100：10：1
信息安全集成在SDLC的所有阶段
集成安全到开发迭代演示
⽬目标：功能团队尽早保证信息安全
邀请信息安全到开发迭代的产品演示中
Compliance by demonstration
集成安全到缺陷追踪和事后分析
使⽤用与DEV/OPS相同的缺陷追踪系统
如Jira
安全问题的事后分析制度
集成预防的信息安全控制到
共享代码库和共享服务
安全相关的机制和⼯工具
验证和加密的库和服务
配套提供安全培训，检查⼯工具的使⽤用
提供有效的特定安全配置
Code libraries和建议的配置（2FA，
two-factor authentication library)，
bcrypt password hashing, logging
密码管理理（连接设置，加密key）
OS包和构建（NTP时间同步,正确配
置的OpenSSL，syslog配置关键安
全信息到ELK）
与运维团队协作，安全和低⻛风险的⽅方
式创建cookbook和构建镜像
集成安全的部署流⽔水线
流⽔水线静态代码扫描时，运⾏行行安全测试
Gauntlt
确保应⽤用安全
happy path和alternative paths
验证⽤用户旅程
按预期，没有异常或错误
sad path
出问题的时候，特别是安全相关错误
测试类型
静态分析
瑕疵，后⻔门，潜在恶意代码
⾃自内⽽而外
动态分析
内存，功能⾏行行为，响应时间和性能
⾃自外⽽而内
Arachni and OWASP ZAP (Zed 
Attack Proxy)
⾃自动化功能测试阶段、上线后的服务都要进⾏行行
依赖扫描
另外⼀一种的静态扫描
部署流⽔水线构建时进⾏行行
确保依赖⼆二进制和可执⾏行行程序不不会受攻击
Gemnasium and bundler audit for 
Ruby, Maven for Java, and the 
OWASP Dependency-Check.
源代码完整和代码签名
开发有⾃自⼰己的PGP Key
所有提交到代码库的都要签名
所有CI流程产出的包也需要签名
Case：Static Security Testing at 
Twitter (2009)
确保软件供应链安全
选择组件和库时，不不仅是功能性，还要关注漏漏洞洞
确保安全的环境
⾃自动化测试确保适当的安全设置，
Key⻓长度等都被正确应⽤用
使⽤用Nmap确保只有期望的端⼝口开放
Case：18F Automating Compliance for the Federal Government with Compliance Masonry
集成信息安全到⽣生产遥测
集成安全遥测到相同的⼯工具，Dev、QA、OP使⽤用
创建安全遥测到应⽤用
成功和不不成功的⽤用户登录
⽤用户密码重置
⽤用户email重置
⽤用户信⽤用卡变更更
创建安全遥测到环境
OS 变更更
安全组变更更
配置变更更(e.g., OSSEC, Puppet, Chef, Tripwire)
云基础设施变更更(e.g., VPC, security groups, users and privileges)
XSS企图(i.e., “cross-site scripting attacks”)
SQLi企图(i.e., “SQL injection attacks”)
web服务错误(e.g., 4XX and 5XX errors)
还要确认正确配置了了⽇日志，遥测可以发送到正确的地⽅方
Case：Instrumenting the Environment at Etsy (2010)
保护部署流⽔水线
如果部署流⽔水线有写权限，攻击者
可以注⼊入恶意变更更到版本控制库
经常在UT中注⼊入恶意代码
减缓⻛风险的策略略
加固持续构建和持续集成服务器器，确
保可以⾃自动化⽅方式重建，防⽌止被盗⽤用
评审所有注⼊入到版本控制库的变更更，
包括提交时的结对编程或合并回主⼲干
前的code review
让仓库探测到代码包含可疑的API调
⽤用，隔离并⽴立即触发code review
确保每个CI流程运⾏行行在⾃自⼰己隔离的容器器或VM
确保CI系统的版本控制凭证只读
23. 保护部署流⽔水线
集成安全和合规到变更更审批流程
如果部署流⽔水线建设正确，变更更不不需要⼈人⼯工变更更
审批流程，⽽而是依赖⾃自动化测试和主动⽣生产监控
ITIL中的三种变更更
标准变更更
低⻛风险变更更，遵循已建⽴立的和审批过的流程，也可以是预审批的
每个⽉月更更新应⽤用税表或国家代码，⽹网站内
容和⻛风格变更更，确定影响的应⽤用和OS补丁
变更更前不不需审批，变更更⾃自动化完成，有⽇日志可追溯
普通变更更
⾼高⻛风险变更更，需要授权的审批和批准
很多组织中，由变更更咨询委员会（CAB）或紧急
变更更咨询委员会（ECAB）负责，这是不不恰当的
缺乏需要的专业知识和对变更更的整体理理
解，经常导致不不可接受的⻓长前置时间
特别是数百⼈人⼯工作⼏几个⽉月的⼤大量量新代码部署
CAB需要填写定义好的变更更请求（RFC），包括业务
⽬目标，计划的效⽤用（服务做什什么）和保证（服务如何
交付和使⽤用），业务⻛风险，提出时间点
紧急变更更
紧急，潜在的⾼高⻛风险，需要⽴立即投产
紧急的安全补丁，恢复服务
需要⾼高级管理理审批，但⽂文档可以后置
DevOps的⽬目标是普通变更更流程也适⽤用于紧急变更更
将⼤大多数低⻛风险变更更重
新分类为标准变更更
有可靠的流⽔水线，已经实现快速，可靠和⾮非戏剧性的部署
要取得运维和相关变更更权利利⼈人的同意，标准变更更由CAB预批准
仍然需要可视化和记录到变更更管理理系
统（Remedy or ServiceNow）
⾃自动化链接变更更请求记录到计划系统
（Jira, Rally, LeanKit, TW Mingle）
功能缺陷
⽣生产事故
⽤用户故事
链接⽅方式：通过提交代码的时候增加
Comments，包含ticket number
跟踪部署到版本库变更更，
再到计划⼯工具的tickets
链接就可以了了，⽽而不不必每次代码提交都开新的ticket
当变更更分类为普通变更更
正常变更更需要⾄至少⼀一个CAB的⼦子集审批
提交变更更请求需要完整和准确
可以⾃自动化创建RFCs
⽐比如⾃自动化创建ServiceNow变更更单，带有Jira⽤用户故事链接，还
有构建清单和测试输出，并链接到将要运⾏行行的Puppet/Chef脚本
Case：Automated Infrastructure Changes as 
Standard Changes at Salesforce.com (2012)
降低对分离职责的依赖
采⽤用结对编程，代码提交持续审查，code review
Case：PCI Compliance and a 
Cautionary Tale of Separating 
Duties at Etsy (2014)
确保⽂文档和证据为审计员和
合规官员准备好
Case：Proving Compliance in 
Regulated Environments (2015)
Case：Relying on Production 
Telemetry for ATM Systems
Part III：The ﬁrst way，The 
technical practices of ﬂow
9. 创建部署流⽔水线的基础
Case: Australian 
telecommunications company 
2009
10个⼯工作条线在进⾏行行，都采⽤用
瀑布模型，但显著落后于进度
只有⼀一个⼯工作条线成功到达UAT测试，但
花费另外6个⽉月测试，仍达不不到业务预期
以上问题促进部⻔门进⾏行行敏敏捷转型
但是敏敏捷转型⼀一年年，只取得很⼩小的改
进，仍然达不不到业务结果的要求
在发布回顾时提出的问题
缺乏业务的参与