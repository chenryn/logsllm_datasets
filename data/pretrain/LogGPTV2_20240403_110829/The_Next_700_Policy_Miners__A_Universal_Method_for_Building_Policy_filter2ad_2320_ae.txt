Unicorn and the second one using a state-of-the-art miner. Details
on the miners built using Unicorn are given in Sections 8 and 9,
and Appendices B and C. For RBAC, we use for comparison the
miner presented in [30] and, for ABAC, we use for comparison
the miner from [18]. For XACML and spatio-temporal RBAC, there
are no other known miners. For business meaningful RBAC, we
contacted the authors of miners for this RBAC extension [30, 56],
but implementations of their algorithms were not available.
As an objective function we use λ ∥I∥ + L (Auth, I; φ), where
λ is a trade-off hyper-parameter, ∥I∥ is the complexity measure
defined for I in the policy language, and φ is the template formula
for the corresponding policy language. The values for the hyper-
parameters were computed using grid search.
To evaluate miners for RBAC, BM-RBAC, and XACML, we use
5-fold cross-validation [21, 22, 79]. To measure the mined policy’s
generalizability, we measure its true positive rate (TPR) and its false
positive rate (FPR) [59]. To measure a mined policy’s complexity,
we use ∥I∥. To evaluate miners for ABAC and STARBAC, which
receive a log instead of an access control matrix as input, we use
universal cross-validation [18]. We measure the mined policy’s TPR,
FPR, precision, and complexity. We considered only those mined
policies whose FPR was below 5%.
All policy miners, except the one for BM-RBAC, were developed
in Python 3.6 and were executed on machines with 2,8 GHz 8-core
CPUs and 32 GB of RAM. The miner for BM-RBAC was developed
in Pytorch version 0.4 [58] and executed on an NVIDIA GTX Titan X
GPU with 12 GB of RAM. For all policy languages except STARBAC,
our experiments finished within 4 hours. For STARBAC, they took
7 hours. We remark that organizations do not need to mine policies
on a regular basis, so policies need not be mined in real time [18].
10.3 Results
Figures 2–4 compare, respectively, the TPRs, complexities, and
precisions of the policies we mined with those mined by the state
of the art across the different datasets with respect to the different
policy languages. We make the following observations.
Figure 2: Comparison of the TPRs between policies mined
using Unicorn and policies mined by the state of the art
across different policy languages. Policies with higher TPRs
are better at granting permissions to the correct users.
Figure 3: Comparison of the complexities between policies
mined using Unicorn and policies mined using the state of
the art across different policy languages. Policies with lower
complexities are better as they are easier to interpret by hu-
mans. For XACML and STARBAC, there is no known miner,
but we compared the mined policy’s complexity with that of
the original policy.
Figure 4: Comparison of the precision between policies
mined using Unicorn and policies mined by a state of the
art policy miner across different policy languages. Policies
with higher precision are better as they avoid incorrect au-
thorizations. We only compare the precision of mined poli-
cies when mining from logs, as discussed in [18].
• We mine policies whose TPR is within 5% of the state-of-the-
art policies’ TPR. For the XACML and STARBAC scenarios,
where no other miners exist, we mine policies with a TPR
above 75% in all cases.
• In most cases, we mine policies with a complexity lower than
the complexity of policies mined by the state of the art.
• When mining from logs, we mine policies that have a similar
or greater precision than those mined by the state of the art,
sometimes substantially greater.
• In all cases, we mine policies with an FPR ≤ 5% (not shown
in the figures).
RBAC1RBAC2RBAC3ABAC1ABAC2ABAC3ABAC4BM-RBAC1BM-RBAC2BM-RBAC3XACML1XACML2XACML3XACML4XACML5XACML6XACML7STARBAC0.40.60.81TPRUnicornOthersRBAC1RBAC2RBAC3ABAC1ABAC2ABAC3ABAC4BM-RBAC1BM-RBAC2BM-RBAC3XACML1XACML2XACML3XACML4XACML5XACML6XACML7STARBAC101102103ComplexityUnicornOthers/OriginalpolicyABAC1ABAC2ABAC3ABAC4STARBAC10−210−1PrecisionUnicornStateoftheartSession 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom10510.4 Discussion
Our experimental results show that, with the exception of ABAC, all
policies we mined attain a TPR of at least 80% in most of the cases.
The low TPR in ABAC is due to the fact that the logs contain only
7% of all possible requests [18]. But even in that case, the ABAC
miner we built attains a TPR that is within 5% of the TPR attained by
the state of the art [18]. Moreover, our ABAC miner mines policies
with substantially lower complexity and higher precision. These
results support our hypothesis that by using Unicorn we can build
competitive policy miners for a wide variety of policy languages.
These results also suggest that the miners built are well-suited
for practical use. In this regard, note that policy miners are tools
that facilitate the specification and maintenance of policies. They
are not intended to replace human policy administrators, especially
when the miners work on logs. This is because logs contain just an
incomplete view of how permissions should be assigned to users.
Very sparse logs, like those used for the experiments on ABAC,
contain barely 7% of all possible authorization requests. Hence,
we cannot expect policy miners to deduce how all permissions
should be assigned from such logs. The policy administrator must
review the mined policy and specify how it should decide groups
of requests that are not well represented in the log. For this reason,
mined policies must also be simple. The main application of policy
miners is to reduce the cumbersome effort of manually analyzing
logs (or, more generally, permission assignments) and mine policies
that generalize well (see Section 2.2).
Observe that the mined policies correctly authorize at least 40%
of future requests in all cases for ABAC and that in some cases
they correctly authorize 80% of all requests. All this with a false
positive rate below 5%. This means that the mined policy has already
reduced the policy administrator’s work by at least 40% and in most
of the cases by at least 80%. The administrator now only needs to
decide how the policy should decide groups of requests that are
not represented in the log.
11 RELATED WORK
11.1 Policy mining
11.1.1 RBAC mining. Early research on policy mining focused on
RBAC [25, 48, 73]. The approaches developed used combinatorial
algorithms to find, for an assignment of permissions to users, an
approximately minimal set of role assignments, e.g., [51, 63, 72,
74, 80]. A major step forward was the use of machine-learning
techniques like latent Dirichlet allocation [56] and deterministic
annealing [30, 67] to compute models that maximize the likelihood
of the given assignment of permission to users. More recent works
mine RBAC policies with time constraints [53, 54] and role hierar-
chies [35, 66], using combinatorial techniques that are specific to
the RBAC extension.
Despite the plethora of RBAC miners, there are still many RBAC
extensions for which no miner has been developed. A recent survey
in role mining [55], covering over a dozen RBAC miners, reports
not a single RBAC miner that can mine spatio-temporal constraints,
even though there have been several spatio-temporal extensions
of RBAC since 2000, e.g., [1, 13, 15, 20, 49, 60, 69], and additional
extensions are under way [4, 5]. Unicorn offers a practical solu-
tion to mining RBAC policies for these extensions. As illustrated
in Section 9, we can now mine spatio-temporal RBAC policies.
11.1.2 Other miners. Miners have recently been proposed for other
policy languages like ABAC [18, 76] and ReBAC (Relationship-
Based Access Control) [12]. These algorithms use dedicated combi-
natorial and machine-learning methods to mine policies tailored
to the given policy language. Unicorn has the advantage of being
applicable to a much broader class of policy languages.
11.2 Interpretable machine learning
Machine-learning algorithms have been proposed that train an
interpretable model [2, 17, 42, 44, 65] consisting of a set of human-
readable rules that describe how an instance is classified. Such algo-
rithms are attractive for policy mining, as policies must not only cor-
rectly grant and deny access, they should also be easy to understand.
The main limitation of the rules mined by these models is that
they often do not comply with the underlying policy language’s
syntax. State-of-the-art algorithms in this field [2, 17, 65] produce
rules that are simply conjunctions of constraints on the instances’
features. This is insufficient for many policy languages, like XACML,
where policies can consist of nested subpolicies that are composed
with XACML’s policy combination algorithms [34].
The main advantage of Unicorn is that it can mine policies that
not only correctly grant and deny access in most cases, but are
also compliant with a given policy language’s syntax, like XACML.
Moreover, as illustrated in Section 8.2, one can tailor the objective
function so that the policy miner searches for a simple policy.
12 CONCLUSION
The difficulty of specifying and maintaining access control policies
has spawned a large and growing number of policy languages with
associated policy miners. However, developing such miners is chal-
lenging and substantially more difficult than creating a new policy
language. This problem is exacerbated by the fact that existing min-
ing algorithms are inflexible in that they cannot be easily modified
to mine policies for other policy languages with different features.
In this paper, we demonstrated that it is in fact possible to create a
universal method for building policy miners that works very well
for a wide variety of policy languages.
We validated Unicorn’s effectiveness experimentally, including
a comparison against state-of-the-art policy miners for different
policy languages. In all cases, the miners built using Unicorn are
competitive with the state of the art.
As future work, we plan to automate completely the workflow in
Figure 1. We envision a universal policy mining algorithm based on
Algorithm 1 that, given as input the policy language, the permission
assignment, and the objective function, automatically computes
the probabilistic model and the most likely policy constrained by
the given permission assignment.
REFERENCES
[1] Subhendu Aich, Shamik Sural, and Arun K Majumdar. 2007. STARBAC: Spatiotem-
poral Role Based Access Control. In OTM Confederated International Conferences"
On the Move to Meaningful Internet Systems". Springer, 1567–1582.
[2] Elaine Angelino, Nicholas Larus-Stone, Daniel Alabi, Margo Seltzer, and Cynthia
Rudin. 2017. Learning Certifiably Optimal Rule Lists. In Proceedings of the 23rd
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom106ACM SIGKDD International Conference on Knowledge Discovery and Data Mining.
ACM, 35–44.
[3] Konstantine Arkoudas, Ritu Chadha, and Jason Chiang. 2014. Sophisticated Ac-
cess Control via SMT and Logical Frameworks. ACM Transactions on Information
and System Security (TISSEC) 16, 4 (2014), 17.
[4] Ameni Ben Fadhel, Domenico Bianculli, and Lionel Briand. 2016. GemRBAC-
DSL: a High-level Specification Language for Role-based Access Control Policies.
In Proceedings of the 21st ACM on Symposium on Access Control Models and
Technologies. ACM, 179–190.
[5] Ameni Ben Fadhel, Domenico Bianculli, Lionel Briand, and Benjamin Hourte.
2016. A Model-driven Approach to Representing and Checking RBAC Contextual
Policies. In Proceedings of the Sixth ACM Conference on Data and Application
Security and Privacy. ACM, 243–253.
[6] Elisa Bertino, Piero Andrea Bonatti, and Elena Ferrari. 2001. TRBAC: A temporal
Role-based Access Control Model. ACM Transactions on Information and System
Security (TISSEC) 4, 3 (2001), 191–233.
[7] Smriti Bhatt, Farhan Patwa, and Ravi Sandhu. 2017. ABAC with Group Attributes
and Attribute Hierarchies Utilizing the Policy Machine. In Proceedings of the 2nd
ACM Workshop on Attribute-Based Access Control. ACM, 17–28.
[8] Rafae Bhatti, Arif Ghafoor, Elisa Bertino, and James BD Joshi. 2005. X-GTRBAC:
an XML-based Policy Specification Framework and Architecture for Enterprise-
wide Access Control. ACM Transactions on Information and System Security
(TISSEC) 8, 2 (2005), 187–227.
[9] Christopher M Bishop. 2006. Pattern recognition and machine learning. springer.
[10] Prosunjit Biswas, Ravi Sandhu, and Ram Krishnan. 2016. Label-based Access
Control: an ABAC Model with Enumerated Authorization Policy. In Proceedings
of the 2016 ACM International Workshop on Attribute Based Access Control. ACM,
1–12.
[11] David M Blei, Alp Kucukelbir, and Jon D McAuliffe. 2017. Variational Inference:
A Review for Statisticians. J. Amer. Statist. Assoc. 112, 518 (2017), 859–877.
[12] Thang Bui, Scott D Stoller, and Jiajie Li. 2017. Mining Relationship-Based Access
Control Policies. arXiv preprint arXiv:1708.04749 (2017).
[13] Suroop Mohan Chandran and James BD Joshi. 2005. LoT-RBAC: a Location and
Time-based RBAC Model. In International Conference on Web Information Systems
Engineering. Springer, 361–375.
[14] Suresh N Chari and Ian M Molloy. 2016. Generation of Attribute Based Access
Control Policy from Existing Authorization System. US Patent 9,264,451.
[15] Liang Chen and Jason Crampton. 2008. On Spatio-temporal Constraints and
Inheritance in Role-based Access Control. In Proceedings of the 2008 ACM Sympo-
sium on Information, Computer and Communications Security. ACM, 205–216.
[16] Yuan Cheng, Khalid Bijon, and Ravi Sandhu. 2016. Extended ReBAC Administra-
tive Models with Cascading Revocation and Provenance Support. In Proceedings of
the 21st ACM on Symposium on Access Control Models and Technologies (SACMAT
’16). ACM, New York, NY, USA, 161–170. https://doi.org/10.1145/2914642.2914655
[17] Peter Clark and Robin Boswell. 1991. Rule Induction with CN2: Some Recent
Improvements. In European Working Session on Learning. Springer, 151–163.
[18] Carlos Cotrini, Thilo Weghorn, and David Basin. 2018. Mining ABAC Rules from
Sparse Logs. In 2018 IEEE European Symposium on Security and Privacy (EuroS&P).
IEEE.
[19] Carlos Cotrini, Thilo Weghorn, David Basin, and Manuel Clavel. 2015. Analyz-
ing First-order Role Based Access Control. In Computer Security Foundations
Symposium (CSF), 2015 IEEE 28th. IEEE, 3–17.
[20] Xiutao Cui, Yuliang Chen, and Junzhong Gu. 2007. Ex-RBAC: an Extended Role
Based Access Control Model for Location-aware Mobile Collaboration System.
In Internet Monitoring and Protection, 2007. ICIMP 2007. Second International
Conference on. IEEE, 36–36.
[21] Massimiliano de Leoni and Wil MP van der Aalst. 2013. Data-aware Process
Mining: Discovering Decisions in Processes Using Alignments. In Proceedings of
the 28th annual ACM Symposium on Applied Computing. ACM, 1454–1461.
[22] AG D’yakonov. 2015. Solution Methods for Classification Problems with Categor-
ical Attributes. Computational Mathematics and Modeling 26, 3 (2015), 408–428.
[23] H-D Ebbinghaus, Jörg Flum, and Wolfgang Thomas. 2013. Mathematical logic.
Springer Science & Business Media.
[24] Herbert Enderton and Herbert B Enderton. 2001. A mathematical introduction to
logic. Elsevier.
[25] Alina Ene, William Horne, Nikola Milosavljevic, Prasad Rao, Robert Schreiber,
and Robert E Tarjan. 2008. Fast exact and heuristic methods for role minimization
problems. In Proceedings of the 13th ACM symposium on Access control models
and technologies. ACM, 1–10.
[26] David F Ferraiolo, Ravi Sandhu, Serban Gavrila, D Richard Kuhn, and Ramaswamy
Chandramouli. 2001. Proposed NIST standard for role-based access control. ACM
Transactions on Information and System Security (TISSEC) 4, 3 (2001), 224–274.
[27] Kathi Fisler, Shriram Krishnamurthi, Leo A Meyerovich, and Michael Carl
Tschantz. 2005. Verification and change-impact analysis of access-control policies.
In Proceedings of the 27th International Conference on Software Engineering. ACM,
196–205.
[28] Philip WL Fong. 2011. Relationship-based access control: protection model and
policy language. In Proceedings of the first ACM conference on Data and application
security and privacy. ACM, 191–202.
[29] Mario Frank, Joachim M Buhmann, and David Basin. 2010. On the definition of
role mining. In Proceedings of the 15th ACM symposium on Access control models
and technologies. ACM, 35–44.
[30] Mario Frank, Joachim M Buhmann, and David Basin. 2013. Role mining with
probabilistic models. ACM Transactions on Information and System Security
(TISSEC) 15, 4 (2013), 15.
[31] Mario Frank, Andreas P Streich, David Basin, and Joachim M Buhmann. 2009.
A probabilistic approach to hybrid role mining. In Proceedings of the 16th ACM
conference on Computer and communications security. ACM, 101–111.
[32] Jerome Friedman, Trevor Hastie, and Robert Tibshirani. 2001. The elements of
statistical learning. Vol. 1. Springer series in statistics New York, NY, USA:.
[33] Mayank Gautam, Sadhana Jha, Shamik Sural, Jaideep Vaidya, and Vijayalakshmi
Atluri. 2017. Poster: Constrained Policy Mining in Attribute Based Access Control.
In Proceedings of the 22nd ACM on Symposium on Access Control Models and
Technologies. ACM, 121–123.
[34] Simon Godik and Tim Moses. 2002. Oasis extensible access control markup
language (XACML). OASIS Committee Secification CS-XACML-specification-1.0
(2002).
[35] Qi Guo, Jaideep Vaidya, and Vijayalakshmi Atluri. 2008. The role hierarchy
mining problem: Discovery of optimal role hierarchies. In Computer Security
Applications Conference, 2008. ACSAC 2008. Annual. IEEE, 237–246.
[36] Thomas Hofmann and Joachim M Buhmann. 1997. Pairwise data clustering
by deterministic annealing. IEEE transactions on pattern analysis and machine
intelligence 19, 1 (1997), 1–14.
[37] Vincent C Hu, David Ferraiolo, Rick Kuhn, Arthur R Friedman, Alan J Lang,
Margaret M Cogdell, Adam Schnitzer, Kenneth Sandlin, Robert Miller, Karen
Scarfone, et al. 2013. Guide to attribute based access control (ABAC) definition
and considerations (draft). NIST special publication 800, 162 (2013).
[38] IEEE. 2012. 2012 IEEE International workshop on machine learning for signal
processing. Amazon data science competition. http://mlsp2012.conwiz.dk/index.
php?id=43
[39] Edwin T Jaynes. 1957. Information theory and statistical mechanics. Physical
review 106, 4 (1957), 620.
[40] Sadhana Jha, Shamik Sural, Jaideep Vaidya, and Vijayalakshmi Atluri. 2014.
Security analysis of temporal RBAC under an administrative model. Computers
& Security 46 (2014), 154–172.
[41] James BD Joshi. 2004. Access-control language for multidomain environments.
IEEE Internet Computing 8, 6 (2004), 40–50.
[42] Viktor Jovanoski and Nada Lavrač. 2001. Classification rule learning with
APRIORI-C. In Portuguese Conference on Artificial Intelligence. Springer, 44–51.
[43] Kaggle. 2013. Amazon.com – Employee access challenge. http://www.kaggle.
com/c/amazon-employee-access-challenge
[44] Branko Kavšek and Nada Lavrač. 2006. APRIORI-SD: Adapting association
rule learning to subgroup discovery. Applied Artificial Intelligence 20, 7 (2006),
543–583.
[45] HK Kesavan and JN Kapur. 1990. Maximum Entropy and Minimum Cross-Entropy
Principles: Need for a Broader Perspective. In Maximum Entropy and Bayesian
Methods. Springer, 419–432.
[46] Scott Kirkpatrick, C Daniel Gelatt, and Mario P Vecchi. 1983. Optimization by
simulated annealing. science 220, 4598 (1983), 671–680.
[47] Shriram Krishnamurthi. 2003. The CONTINUE server (or, How I administered
PADL 2002 and 2003). In Practical aspects of declarative languages. Springer, 2–16.
[48] Martin Kuhlmann, Dalia Shohat, and Gerhard Schimpf. 2003. Role mining-
revealing business roles for security administration using data mining technol-
ogy. In Proceedings of the eighth ACM symposium on Access control models and
technologies. ACM, 179–186.
[49] Mahendra Kumar and Richard E Newman. 2006. STRBAC–An approach towards
spatio-temporal role-based access control.. In Communication, Network, and
Information Security. 150–155.
[50] M. Lichman. 2013. UCI Machine Learning Repository. Amazon Access Samples
Data Set. http://archive.ics.uci.edu/ml/datasets/Amazon+Access+Samples
[51] Haibing Lu, Jaideep Vaidya, and Vijayalakshmi Atluri. 2008. Optimal boolean
matrix decomposition: Application to role engineering. In Data Engineering, 2008.
ICDE 2008. IEEE 24th International Conference on. IEEE, 297–306.
[52] Barsha Mitra, Shamik Sural, Vijayalakshmi Atluri, and Jaideep Vaidya. 2013.
Towards mining of temporal roles. In IFIP Annual Conference on Data and Appli-
cations Security and Privacy. Springer, 65–80.
[53] Barsha Mitra, Shamik Sural, Vijayalakshmi Atluri, and Jaideep Vaidya. 2015. The
generalized temporal role mining problem. Journal of Computer Security 23, 1
(2015), 31–58.
[54] Barsha Mitra, Shamik Sural, Jaideep Vaidya, and Vijayalakshmi Atluri. 2016.
Mining temporal roles using many-valued concepts. Computers & Security 60
(2016), 79–94.
[55] Barsha Mitra, Shamik Sural, Jaideep Vaidya, and Vijayalakshmi Atluri. 2016. A
survey of role mining. ACM Computing Surveys (CSUR) 48, 4 (2016), 50.
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom107[56] Ian Molloy, Youngja Park, and Suresh Chari. 2012. Generative models for access
control policies: applications to role mining over logs with attribution. In Pro-
ceedings of the 17th ACM symposium on Access Control Models and Technologies.
ACM, 45–56.
[57] Subhojeet Mukherjee, Indrakshi Ray, Indrajit Ray, Hossein Shirazi, Toan Ong, and
Michael G. Kahn. 2017. Attribute Based Access Control for Healthcare Resources.
In Proceedings of the 2Nd ACM Workshop on Attribute-Based Access Control (ABAC
’17). ACM, New York, NY, USA, 29–40. https://doi.org/10.1145/3041048.3041055
[58] Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang,
Zachary DeVito, Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer.
2017. Automatic differentiation in pytorch. (2017).
[59] David Martin Powers. 2011. Evaluation: from precision, recall and F-measure to
ROC, informedness, markedness and correlation. (2011).
[60] Indrakshi Ray and Manachai Toahchoodee. 2007. A spatio-temporal role-based
access control model. In IFIP Annual Conference on Data and Applications Security
and Privacy. Springer, 211–226.
[61] Kenneth Rose. 1998. Deterministic annealing for clustering, compression, classi-
fication, regression, and related optimization problems. Proc. IEEE 86, 11 (1998),
2210–2239.
[62] Kenneth Rose, Eitan Gurewitz, and Geoffrey C Fox. 1992. Vector quantization
by deterministic annealing. IEEE Transactions on Information theory 38, 4 (1992),
1249–1257.
[63] Jürgen Schlegelmilch and Ulrike Steffens. 2005. Role mining with ORCA. In
Proceedings of the tenth ACM symposium on Access control models and technologies.
ACM, 168–176.
[64] Scikit-learn. 2007–2017. Tuning the hyper-parameters of an estimator. http:
//scikit-learn.org/stable/modules/grid_search.html
[65] Dan Steinberg and Phillip Colla. 2009. CART: classification and regression trees.
The top ten algorithms in data mining 9 (2009), 179.
[66] Scott D Stoller and Thang Bui. 2016. Mining hierarchical temporal roles with
multiple metrics. In IFIP Annual Conference on Data and Applications Security and
Privacy. Springer, 79–95.
[67] Andreas P Streich, Mario Frank, David Basin, and Joachim M Buhmann. 2009.
Multi-assignment clustering for Boolean data. In Proceedings of the 26th annual
international conference on machine learning. ACM, 969–976.
[68] Y Tikochinsky, NZ Tishby, and Raphael David Levine. 1984. Alternative approach
to maximum-entropy inference. Physical Review A 30, 5 (1984), 2638.
[69] Manachai Toahchoodee, Indrakshi Ray, Kyriakos Anastasakis, Geri Georg, and
Behzad Bordbar. 2009. Ensuring spatio-temporal access control for real-world
applications. In Proceedings of the 14th ACM symposium on Access control models
and technologies. ACM, 13–22.
[70] Petar Tsankov, Srdjan Marinovic, Mohammad Torabi Dashti, and David Basin.
2014. Decentralized composite access control. In International Conference on
Principles of Security and Trust. Springer, 245–264.
[71] Fatih Turkmen, Jerry den Hartog, Silvio Ranise, and Nicola Zannone. 2015. Anal-
ysis of XACML policies with SMT. In International Conference on Principles of