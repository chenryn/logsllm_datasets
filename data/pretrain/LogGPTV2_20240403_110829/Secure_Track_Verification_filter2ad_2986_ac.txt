− 1
(8)
(cid:11)
n(cid:10)
(cid:9) n−1(cid:10)
1(cid:8)
n
2
i=1
j=i+1
ˆtx
drift
=
From a security perspective, estimating the clock drift in
this way raises the question whether an adversary can take
advantage of pretending certain clock drifts or not. The answer
to that question is no. Since we do not make any assumptions
on clock drifts, a fake clock drift is just as good as a true one,
and both will be equally eliminated by Equation (8). Faking
different clock drifts during one track is even worse, since
the estimation error will be high and, thus, increase the ﬁnal
veriﬁcation result V x
T deﬁned below (which leads to a rejection
of the claimed track). Hence, fake clock drifts do not pose a
threat to our scheme.
The veriﬁcation is ﬁnally done in the second step by
calculating the mean squared error when subtracting the right-
hand side from the corrected left-hand side of Equation (2).
204204
We denote this local veriﬁcation result V x
a track T by
T of Veriﬁer Vx for
(Δi,j + (Δx
j − Δx
i )) · (1 + ˆtx
) − Δx
i,j
drift
(9)
n(cid:10)
(cid:13)
(cid:9) n−1(cid:10)
1(cid:8)
n
2
i=1
j=i+1
V x
T =
(cid:14)2
The results of our security analysis in Section III-A imply
that for honest track claims, V x
T should converge to the average
squared error. For dishonest claims, V x
T must be higher for at
least one veriﬁer due to the deviation caused by its dishonesty.
In our track veriﬁcation scheme, each veriﬁer Vx ∈ V
calculates V x
T and checks whether it is below a predeﬁned
threshold. In case a veriﬁer’s local result is higher than the
threshold, the veriﬁcation fails and the track is considered
to be dishonest. We call this veriﬁcation process local track
veriﬁcation as each veriﬁer calculates its veriﬁcation result
locally. Accordingly, the threshold for the local veriﬁcation
result is denoted by Tlocal.
The threshold for the local veriﬁcation should be chosen
based on the variance σ2 of the measurement error  and the
number of location claims n. As n increases, ˆtx
drift becomes
more accurate and V x
T is supposed to converge to a value close
to zero. An optimal Tlocal must fulﬁll the same properties as
a location veriﬁcation scheme according to [6]:
T < Tlocal
1) Completeness: If T is an honest track claim, V x
must hold for all veriﬁers Vx ∈ V .
T ≥ Tlocal must
2) Security: If T is a false track claim, V x
hold for at least one veriﬁer if one of the constraints given in
Section III-B holds.
If such an optimal threshold exists, the local veriﬁcation
scheme is able to perfectly distinguish between honest and
dishonest track claims. For later analyses and optimizations,
we measure the “optimality” of Tlocal and our system in terms
of false rejection and false acceptance rates. A false rejection
of a track means the detection of an attack, although the prover
is honest. A false acceptance occurs if a false track claim is not
rejected by the system. Both rates can be controlled with Tlocal.
On the one hand, if Tlocal is smaller than the highest possible
V x
T for honest tracks, false rejections can occur. On the other
hand, false acceptances are possible if Tlocal is greater than
the smallest possible V x
C. Global Track Veriﬁcation Scheme
T for false track claims.
As our evaluation below shows, bad hardware accuracy and
veriﬁer placement may result in false rejections and accep-
tances by our local veriﬁcation scheme. The local veriﬁcation
scheme, however, does not take advantage of the total number
of veriﬁers since it only considers local results. Given a higher
number of veriﬁers, a better veriﬁcation decision can be made
by obtaining all
local results instead of considering them
separately. We call this extension global track veriﬁcation.
their veriﬁcation results V x
average veriﬁcation result:
VT =
In our global veriﬁcation scheme, the veriﬁers exchange
T and each veriﬁer calculates the
(cid:10)
V x
(10)
T
1
|V | ·
Vx∈V
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)px
(cid:2)pA
(cid:2)py
(cid:2)pR
A
This attack is possible because our veriﬁcation scheme
implicitly assumes that location claims are always received
by all veriﬁers (in the transmission area of an omnidirectional
prover). To address this problem, we extend our scheme with
the following protocol.
A. Sanity Check Protocol
We assume that each veriﬁer knows its reception area and
can check whether a position (cid:2)p lies within the reception range
using an indicator function Rx((cid:2)p):
(cid:15)
Rx((cid:2)p) =
1 if (cid:2)p lies within Vx’s reception range
0 else
(11)
Fig. 5. Example scenario: three veriﬁers Vx, Vy, and R (located at (cid:2)px,
(cid:2)py, (cid:2)pR) are arranged such that the area of interest for R is covered by the
three veriﬁers reception ranges (dotted circles). The attacker (located at (cid:2)pA)
transmits its signal to R using a directed antenna (dashed area) and avoids
being detected by the other veriﬁers.
Similar to Tlocal, we can deﬁne a threshold Tglobal for VT . A
track T is then accepted by the system if VT < Tglobal and
rejected if VT ≥ Tglobal holds.
The choice, whether to use the local or the global veriﬁca-
tion scheme depends on hardware constraints and infrastruc-
ture. In case it is cheaper to distribute many low-cost veriﬁers
instead of a few high-end devices,
the global veriﬁcation
is preferable. If veriﬁers are equipped with very accurate
hardware, the local check might be the better choice as it is
more sensitive to anomalies. Besides that, the local veriﬁcation
scheme produces less communication overhead and does not
require a fully connected network of veriﬁers.
V. RECEPTION AREA SANITY CHECK
As discussed in Section II-C, we assume that the adversary
uses an omni-directional antenna. In this section, we discuss
a simple extension to our scheme to basically ”catch” an
adversary that does not conform to this assumption. The alert
reader might already have noticed the problem related to
an attacker not using an omni-directional antenna: Assume
receiver R wants to monitor tracks in a certain area of interest
A. To securely verify the claimed tracks in A, there are v ≥ 3
veriﬁers deployed such that their reception ranges cover A. R
itself is one of the veriﬁers.
Remember the practical example from the introduction
where a ground station receives tracks from aircraft and
provides them to air trafﬁc controllers who are responsible
for managing the trafﬁc in A. Now, an adversary wants to
inject false tracks in order to mislead the controllers. It could
transmit its track claim with a directional antenna such that
it is only received by R. As R would be the only receiver,
the attacker could adjust its transmission times as shown in
Section III-A (case |V | = 1) and the attack would not be
detected. This scenario is depicted in Figure 5.
205205
In an obstacle-free line-of-sight communication scenario,
where the communication is only limited by the free-space
path loss, Rx would be
(cid:15)
Rx((cid:2)p) =
1 if (cid:4)(cid:2)px − (cid:2)p(cid:4) ≤ r
0 else
for the maximum reception range r. For more complex recep-
tion areas, an initial sampling phase or a more sophisticated
propagation model can be used to determine Rx.
In principle, the following algorithm simply checks whether
the reception of the location claim Ci is normal or not. If
the location claim was received although the position is not
in its reception range, something is suspicious and an alarm
is raised. In case the reception range covers (cid:2)pi, the location
claim is accepted and the other veriﬁers are notiﬁed about the
reception. For each reception of a location claim Ci = (ti, (cid:2)pi),
veriﬁer Vx performs the following veriﬁcation procedure:
if Rx((cid:2)pi) = 0 then // I shouldn’t have received this claim
else
broadcastAlert(Ci) // alert all veriﬁers
if Ci (cid:2)∈ N then // I received it ﬁrst
end if
T = T ∪ {Ci} // add claim to track
broadcastNotiﬁcation(Ci) // notify all veriﬁers
end if
where N is the set of all received notiﬁcations.
The second part of the protocol checks whether location
claims are always received by all veriﬁers which cover (cid:2)pi.
Assuming that the notiﬁcation was sent by the veriﬁer with
the shortest distance to the prover, all other veriﬁers should
receive the claim at latest after the difference in propagation
delays. Let max be an upper bound for the maximum expected
measurement error. For each received reception notiﬁcation
Ni = (Ci) from Vy, veriﬁer Vx performs the following
procedure:
i − Δy
i + max) // wait for it
if Rx((cid:2)pi) = 1 then // I should also receive this claim
wait(Δx
if Ci (cid:2)∈ T then // I should have received it by now
end if
N = N ∪ {Ci} // save notiﬁcation
broadcastAlert(Ci) // alert all veriﬁers
else
end if
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
The protocol raises an alarm in two cases. First, a veriﬁer
receives a location claim from a position which is under
legitimate conditions not within its reception range. In this
case, the prover must either be at a position other than the
claimed one or use anomalous parameters such as a higher
transmit power. Second, a veriﬁer does not receive a claim it
should receive under normal conditions. Both cases indicate
a false track claim and attacks such as the one above are
detected.
B. Channel Loss
Message loss is a natural phenomenon in wireless channels.
In ADS-B for instance, message loss rates of up to 40% in
peak trafﬁc periods have been reported [4]. However, channel
loss results in alarms not caused by an adversary. Thus, a
single alarm does not necessarily indicate an attack and the
sanity check must tolerate some loss in practice. We propose
a simple statistical scheme here to do so.
Let m = |T| be the number of transmitted messages, v =
|V | the number of veriﬁers, and na the number of alarms due
to channel loss. Under the assumption that loss is a Bernoulli
process1 and the loss probability p is known, the expected
number of alarms due to channel loss is E(na) = v · m · p.
Furthermore, the number of alarms due to channel loss, na,
is binomially distributed and we can easily build a conﬁdence
interval for na. Thus, a track T only passes our sanity check
successfully, if na is within this conﬁdence interval for a given
conﬁdence level α. In other words, if T passes the sanity
check, we can be certain with a conﬁdence of α, that the
alarms are caused by channel loss, otherwise we detect an
attack.
C. Security
Using the conﬁdence interval check has certain advantages.
By choosing an appropriate conﬁdence level, a user can
control the false positive and false negative detection rate. For
instance, higher conﬁdence levels result in wider conﬁdence
intervals. This, on the one hand, offers the adversary a wider
scope for its attacks but, on the other hand, the false rejection
rate for legitimate tracks will be decreased. In practice, a trade-
off has to be found for the concrete application scenario.
For applications where provers report their track over longer
periods, another advantage is the behavior of the conﬁdence
interval if m increases. In particular, the conﬁdence interval
becomes smaller for each additional location claim at an ex-
ponential rate. Figuratively speaking and in terms of security,
the sanity check tightens the noose on the attacker with each
additional location claim.
Most importantly, by employing this sanity check along with
our track veriﬁcation scheme, we force adversaries to send
their location claims to all veriﬁers which cover the spoofed
positions. This requirement issues a big challenge for realistic
attackers. In order to launch an attack, they have to know the
exact reception ranges of all veriﬁers and have to be able to
OVERVIEW ON THE SIMULATION PARAMETERS FOR THE ERROR
PROPAGATION ANALYSIS.
TABLE I
Parameter
r
m
v
σ
σdrift
Constant
c
Description
The radius of the circular area around the veriﬁer
The number of messages per track, i.e. m = |T|
The number of veriﬁers that receive the provers location
claims, i.e. v = |V |
The standard deviation of the measurement error
The standard deviation of the random clock drift coef-
ﬁcient tx
Description/Value
The propagation speed of the signal is ﬁxed to the speed
of light (299792458 m/s)
drift of the veriﬁers
control exactly which veriﬁers receive which location claims.
In addition to that, they have to make sure, that the channel
loss of their claims is similar to that of honest provers.
VI. ERROR PROPAGATION ANALYSIS
This section provides insights on the requirements, perfor-
mance, and security of our approach. We conducted extensive
simulations and analyzed the effect of measurement error,
clock drift, and number of claims on the veriﬁcation result. To
draw conclusions on the security (i.e. on false rejection and
false acceptance rates), we compare the veriﬁcation results of
honest and dishonest track claims.
In order to keep the detection time low, it is desirable to
keep the number of required messages as small as possible.
Therefore we assume that the drift estimator ˆtx
drift is calculated
with the same set of claims as the veriﬁcation value V x
T . As
a result, they are not independent and since ˆtx
drift is used to
calculate V x
T , the error propagation in our scheme is complex
and hard to analyze formally. While we know that the variance
of ˆtx
drift can be estimated with
Var (ˆtx
drift
) =
(cid:16)m−1
(cid:16)m
(cid:8)
i=1
j=i+1
σ2
Δi,j + (Δx
j − Δx
i )
(cid:9)2
(cid:9)2 ·(cid:8)
m
2
and the average estimation error converges to zero with
increasing m, we cannot set up a trivial error model for
V x