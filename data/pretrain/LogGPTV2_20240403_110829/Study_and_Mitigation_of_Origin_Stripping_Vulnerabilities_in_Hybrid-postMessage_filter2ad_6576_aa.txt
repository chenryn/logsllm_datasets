title:Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage
Enabled Mobile Applications
author:Guangliang Yang and
Jeff Huang and
Guofei Gu and
Abner Mendoza
2018 IEEE Symposium on Security and Privacy
Study and Mitigation of Origin Stripping
Vulnerabilities in Hybrid-postMessage Enabled
Mobile Applications
Guangliang Yang, Jeff Huang, Guofei Gu, and Abner Mendoza
Texas A&M University
{ygl, jeffhuang, guofei, abmendoza}@tamu.edu
Abstract—postMessage is popular in HTML5 based web apps
to allow the communication between different origins. With the
increasing popularity of the embedded browser (i.e., WebView) in
mobile apps (i.e., hybrid apps), postMessage has found utility in
these apps. However, different from web apps, hybrid apps have a
unique requirement that their native code (e.g., Java for Android)
also needs to exchange messages with web code loaded in Web-
View. To bridge the gap, developers typically extend postMessage
by treating the native context as a new frame, and allowing
the communication between the new frame and the web frames.
We term such extended postMessage “hybrid postMessage” in
this paper. We ﬁnd that hybrid postMessage introduces new
critical security ﬂaws: all origin information of a message is
not respected or even lost during the message delivery in hybrid
postMessage. If adversaries inject malicious code into WebView,
the malicious code may leverage the ﬂaws to passively monitor
messages that may contain sensitive information, or actively send
messages to arbitrary message receivers and access their internal
functionalities and data. We term the novel security issue caused
by hybrid postMessage “Origin Stripping Vulnerability” (OSV).
In this paper, our contributions are fourfold. First, we con-
duct the ﬁrst systematic study on OSV. Second, we propose a
lightweight detection tool against OSV, called OSV-Hunter. Third,
we evaluate OSV-Hunter using a set of popular apps. We found
that 74 apps implemented hybrid postMessage, and all these apps
suffered from OSV, which might be exploited by adversaries
to perform remote real-time microphone monitoring, data race,
internal data manipulation, denial of service (DoS) attacks and
so on. Several popular development frameworks, libraries (such
as the Facebook React Native framework, and the Google cloud
print library) and apps (such as Adobe Reader and WPS ofﬁce)
are impacted. Lastly, to mitigate OSV from the root, we design
and implement three new postMessage APIs, called OSV-Free.
Our evaluation shows that OSV-Free is secure and fast, and it
is generic and resilient to the notorious Android fragmentation
problem. We also demonstrate that OSV-Free is easy to use,
by applying OSV-Free to harden the complex “Facebook React
Native” framework. OSV-Free is open source, and its source code
and more implementation and evaluation details are available
online.
I. INTRODUCTION
Cross-origin communication using the HTML5 postMessage
facility [1] has been a popular and often necessary technique
on the web platform. It relaxes the restrictions enforced by the
well-known same origin policy (SOP) security model [2] by
allowing bidirectional messaging between mutually distrusting
web frames or windows. With the increasing amalgamation of
the web and mobile platforms, postMessage has also found
tĞďsŝĞǁ
&ƌĂŵĞηϭ
&ƌĂŵĞηϮ
tĞď
ƉŽƐƚDĞƐƐĂŐĞ
tĞď
ZĞŐƵůĂƌ
,ǇďƌŝĚ
ƉŽƐƚDĞƐƐĂŐĞ
tĞďͲDŽďŝůĞƌŝĚŐĞ
^ĞƌǀĞƌ
EĂƚŝǀĞ
EĂƚŝǀĞ&ƌĂŵĞ
ĞŶŝŐŶ,ǇďƌŝĚƉƉ
ŶĚƌŽŝĚĞǀŝĐĞ
Figure 1: Overview of regular and hybrid postMessage
utility on the mobile platform, as exhibited by the popularity
of the embedded browser (i.e., WebView) in mobile apps (i.e.,
hybrid apps) [3].
In addition to cross-origin communication, the hybrid mobile
app model introduces the necessity for cross-platform commu-
nication between the web platform and the mobile platform.
Not only do hybrid apps need to communicate between
different origins loaded in a WebView, they must also facilitate
communication between those origins and the native layer (e.g.,
the Android Java code). While hybrid apps can already utilize
web-mobile bridges (such as the JavaScript Bridge) [4] for
cross-platform execution, cross-platform messaging in the form
of HTML5 postMessage is not available.
Android 6.0 partially addresses this shortcoming by pro-
viding a new cross-platform API called postWebMessage().
However,
this API is plagued by the notorious Android
fragmentation problem [5] and does not scale well. Moreover,
it is limited to unidirectional communication from native to
web but does not support communication from web to native.
In our empirical study on a set of popular hybrid apps, we
found postWebMessage() was rarely used in practice.
As a result, developers have resorted to customizing postMes-
sage in hybrid apps using ad-hoc methods such as web-mobile
bridges (see Figure 1). In general, this customization treats
the native context as a new different-origin frame. This results
in “hybrid postMessage”, which provides both native-to-web
(N→W ) and web-to-native (W→N) messaging.
Security Issue. Unfortunately, while hybrid postMessage
provides easy and convenient cross-platform communication, it
© 2018, Guangliang Yang. Under license to IEEE.
DOI 10.1109/SP.2018.00043
742
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
tĞď
EĂƚŝǀĞ
tĞď
ůŝĐĞ
,ŝŽď͕ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
Žď
ůŝĐĞ ,ŝŽď͕ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
DĂůůŽƌǇ
Žď
DĞƐƐĂŐĞ
dĂƌŐĞƚ͗ďŽď
DĞƐƐĂŐĞ
dĂƌŐĞƚ͗ďŽď
dŽĞ^ĞŶƚ
ŽŶƚĞŶƚ͗ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
dŽĞ^ĞŶƚ
ŽŶƚĞŶƚ͗ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
dŚĞ
dĂƌŐĞƚ
KƌŝŐŝŶŝƐ
;ĂͿZĞŐƵůĂƌƉŽƐƚDĞƐƐĂŐĞ
;ďͿ,ǇďƌŝĚƉŽƐƚDĞƐƐĂŐĞ
ůŽƐƚ͊
Figure 2: Sending Messages Through Regular And Hybrid postMessage
tĞď
tĞď
EĂƚŝǀĞ
ůŝĐĞ
,ŝŽď͕ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
Žď
ůŝĐĞ
,ŝŽď͕ǁŚĂƚŝƐǇŽƵƌƉĂƐƐǁŽƌĚ͍ DĂůůŽƌǇ
Žď
DĞƐƐĂŐĞ
^ŽƵƌĐĞ͗ůŝĐĞ
DĞƐƐĂŐĞ
^ŽƵƌĐĞ͗ůŝĐĞ
dŽĞ^ĞŶƚ
ŽŶƚĞŶƚ͗ŚŽǁĂƌĞǇŽƵĚŽŝŶŐ͍
dŽĞ^ĞŶƚ
ŽŶƚĞŶƚ͗ǁŚĂƚŝƐǇŽƵƌƉĂƐƐǁŽƌĚ͍
;ĂͿZĞŐƵůĂƌƉŽƐƚDĞƐƐĂŐĞ
;ďͿ,ǇďƌŝĚƉŽƐƚDĞƐƐĂŐĞ
Figure 3: Receiving Messages Through Regular And Hybrid postMessage
dŚĞ
^ŽƵƌĐĞ
KƌŝŐŝŶŝƐ
ůŽƐƚ͊
also opens a door for adversaries through code injection attacks
(such as web or network attacks shown in Figure 1) to launch
denial-of-service (DoS) attacks, steal sensitive information,
silently access local hardware (such as the microphone), and
perform other nefarious actions. The security problem is rooted
in the loss of the origin information when messages move
across the web and native layers. More speciﬁcally, the origin
information of the message sender (source) and message
receiver (target) is either not respected or totally lost. There
are two main reasons: 1) Hybrid postMessage may not provide
any interface to allow the message sender to specify the target
origin, which is critical in the regular HTML5 postMessage
to control the message receiver; 2) Hybrid postMessage may
not provide the source origin of a received message, which
means it is impossible for the message receiver to validate the
message. This adds a new layer to the known security problem
of client-side validation (CSV) in the web platform [6] [7] [8].
For convenience, we term the novel security issue caused by
hybrid postMessage “Origin Stripping Vulnerability” (OSV).
Figures 2-3 illustrate that OSV may compromise the con-
ﬁdentiality and integrity of cross-platform communication.
Consider that adversaries inject malicious code into WebView
through web or network attacks. The malicious code may
leverage hybrid postMessage to passively receive and monitor
messages that contain sensitive information, or actively send
messages to arbitrary message receivers to access their internal
functionalities or data.
In Figure 2-a, Alice sends a message to Bob through the
regular postMessage. The message contains the message content
("How are you doing?"), and the target origin (Bob), which
determines that only Bob can receive the message. However,
hybrid postMessage breaks this convention by stripping the
target origin (Figure 2-b). As a result, Mallory, an adversary
who runs malicious code in another web frame can receive and
read the message. If the message carries sensitive information,
Mallory can easily violate the conﬁdentiality of Alice and Bob’s
communication. In Figure 3-a, Bob is receiving a message
from Alice. When the message arrives, Bob can validate that
the source origin of the message is Alice. However, hybrid
postMessage loses the source origin information (Figure 3-
b), which means that it is impossible for Bob to conduct
validation. Therefore, Mallory may send a message ("What’s
your password?") to Bob and access its conﬁdential data.
The Root Cause of OSV. Although the detailed imple-
mentation guideline and security model for postMessage are
established in HTML5 [1], it is challenging for developers to
implement hybrid postMessage conforming to it. The main
obstacle is the gap between the web and native platforms. Web-
mobile bridges may be applied to ﬁll the gap. However, as
shown in prior work [4] [9] [10], these bridges are often the
cause of security vulnerabilities, because any code loaded in
WebView may freely access them.
For example, we found hybrid postMessage was implemented
in the popular “Facebook React Native” framework using
the JavaScript Bridge. As shown in Listing 1, the crucial
JavaScript method window.postMessage() is rewritten to allow
all messages to be sent to the native frame. However, due
to the intrinsic weakness of the JavaScript Bridge, the native
frame cannot distinguish the identity of the message senders,
or even safely obtain the source origin.
"window.originalPostMessage = window.postMessage," +
"window.postMessage = function(data) {" +
// The source origin is lost.
// Only data is transferred through a JavaScript
1 WebView.loadUrl("javascript:"
2
3
4
5
6
7
Bridge.
);" +
"__REACT_WEB_VIEW_BRIDGE.postMessage(String(data)
"}")
Listing 1: Implementing W→N In Facebook React Native
State-Of-The-Art WebView Defense Solutions. Existing
defense solutions, such as NoFrak [4], Draco [9], MobileIFC
[11], WIREframe [12], and HybridGuard [13], were designed
to provide protection for WebView and web-mobile bridges
by either extending SOP to the native layer, or enforcing
security policies to offer access control. However, they are
circumscribed to prevent OSV for several reasons. First, most
743
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
tĞď&ƌĂŵĞƐ
ĞĨĞŶƐĞ
ϯƌĚͲWĂƌƚǇ
ƌĞŐƵůĂƌ
DĂŝŶ
ŚǇďƌŝĚ
&ƌĂŵĞ
ƉŽƐƚDĞƐƐĂŐĞ
&ƌĂŵĞ
ƉŽƐƚDĞƐƐĂŐĞ
EĂƚŝǀĞ
&ƌĂŵĞ
Figure 4: Communication Among Three Frames
existing defense solutions can only protect W→N, but not
N→W . Only WIREframe can offer protection in two directions.
However, unfortunately, its security policies enforced in N→W
may be under the control of adversaries. Second, existing
defense solutions are coarse-grained, and may have high false
negatives. Their provided protection is usually performed based
on the origins of web frames, and thus it is difﬁcult for them
to limit the behaviors of the embedded JavaScript code.
Moreover, existing defense solutions may be hindered by the
blend of OSV and CSV vulnerabilities. Consider a scenario in
Figure 4 which we found in a real-world advertisement library.
In the web platform, a nested third-party iframe can send
messages to the main frame, where a message handler receives
the messages but does not validate their source origins (i.e.,
CSV vulnerability). It then forwards the received messages
to the native frame through hybrid postMessage. After that,
the defense solutions are enforced to protect W→N. They
attempt to obtain the message sender’s origin to apply their
policies. However, they can only obtain is the main frame’s
origin, rather than the real message sender’s origin (i.e., the
third-party frame’s).
CSV detection and defense solutions [6] [7] [8] may be
applied to mitigate the above threat. However, their performance
may also be limited. They rely on the analysis or detection of
source origins of received messages. The messages received
by the message handler of the main frame include not only
messages (“M1”) from the third-party frame, but also messages
(“M2”) from the native frame. They may protect M1, but not
M2, because the source origin of M2 may not be provided in
hybrid postMessage.
Contributions. In this paper, our contributions are four-