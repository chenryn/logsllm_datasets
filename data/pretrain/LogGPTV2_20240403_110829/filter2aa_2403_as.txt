adrp    x0, .LC2 
35  
add     x0, x0, :lo12:.LC2 
36  
bl      printf 
37 ; skip the code, which print the "What you entered? Huh?" string: 
38  
b  
  .L3 
39 .L2: 
40 ; load pointer to the "What you entered? Huh?" string: 
41  
adrp    x0, .LC3 
42  
add     x0, x0, :lo12:.LC3 
43  
bl      puts 
44 .L3: 
45 ; return 0 
46  
mov     w0, 0 
47 ; restore FP and LR: 
48  
ldp     x29, x30, [sp], 32 
49  
ret 
上述程序通过 CMP/BNE 指令对控制分支语句。 
7.3.7 MIPS 
指令清单 7.15  Optimizing GCC 4.4.5 (IDA) 
.text:004006A0 main: 
.text:004006A0 
.text:004006A0 var_18    
= -0x18 
.text:004006A0 var_10    
= -0x10 
.text:004006A0 var_4     
= -4 
.text:004006A0 
.text:004006A0    
lui    
$gp, 0x42 
.text:004006A4    
addiu    
$sp, -0x28 
.text:004006A8    
li       
$gp, 0x418960 
.text:004006AC    
sw       
$ra, 0x28+var_4($sp) 
.text:004006B0    
sw       
$gp, 0x28+var_18($sp) 
.text:004006B4    
la       
$t9, puts 
.text:004006B8    
lui      
$a0, 0x40 
.text:004006BC    
jalr     
$t9 ; puts 
.text:004006C0    
la       
$a0, aEnterX     # "Enter X:" 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
82 
逆向工程权威指南（上册） 
.text:004006C4    
lw       
$gp, 0x28+var_18($sp) 
.text:004006C8    
lui      
$a0, 0x40 
.text:004006CC    
la       
$t9, __isoc99_scanf 
.text:004006D0    
la       
$a0, aD          # "%d" 
.text:004006D4    
jalr     
$t9 ; __isoc99_scanf 
.text:004006D8    
addiu    
$a1, $sp, 0x28+var_10  # branch delay slot 
.text:004006DC    
li       
$v1, 1 
.text:004006E0    
lw       
$gp, 0x28+var_18($sp) 
.text:004006E4    
beq      
$v0, $v1, loc_40070C 
.text:004006E8    
or       
$at, $zero       # branch delay slot, NOP 
.text:004006EC    
la       
$t9, puts 
.text:004006F0    
lui      
$a0, 0x40 
.text:004006F4    
jalr     
$t9 ; puts 
.text:004006F8    
la       
$a0, aWhatYouEntered  # "What you entered? Huh?" 
.text:004006FC    
lw       
$ra, 0x28+var_4($sp) 
.text:00400700    
move     
$v0, $zero 
.text:00400704    
jr       
$ra 
.text:00400708    
addiu    
$sp, 0x28 
.text:0040070C loc_40070C: 
.text:0040070C    
la       
$t9, printf 
.text:00400710    
lw       
$a1, 0x28+var_10($sp) 
.text:00400714    
lui      
$a0, 0x40 
.text:00400718    
jalr     
$t9 ; printf 
.text:0040071C    
la       
$a0, aYouEnteredD___  # "You entered %d...\n" 
.text:00400720    
lw       
$ra, 0x28+var_4($sp) 
.text:00400724    
move     
$v0, $zero 
.text:00400728    
jr       
$ra 
.text:0040072C    
addiu    
$sp, 0x28 
scanf()函数通过$V0 寄存器传递其返回值。地址为 0x004006E4 的指令负责比较$V0 和$V1 的值。其中，
$V1 在 0x004006DC 处被赋值为 1。BEQ 的作用是“Branch Equal”（在相等时进行跳转）。如果两个寄存器
里的值相等，即成功读取了 1 个整数，那么程序将会从 0x0040070C 处继续执行指令。 
7.3.8 练习题 
JNE/JNZ 指令可被修改为 JE/JZ 指令，而且后者也可被修改为前者。BNE 和 BEQ 之间也有这种关系。
不过，在进行这种替代式修改之后，还要对程序的基本模块进行修改。请多进行一些有关练习。 
7.4  练习题 
7.4.1  题目 
这段代码在 Linux x86-64 上用 GCC 编译，运行的时候都崩溃了（段错误）。然而，它在 Windows 环境
下用 Msvc 2010 x86 编译后却能工作，为什么？ 
#include  
#include  
void alter_string(char *s) 
{ 
        strcpy (s, "Goodbye!"); 
        printf ("Result: %s\n", s); 
}; 
int main() 
{ 
        alter_string ("Hello, world!\n"); 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 88 章
章    参
参  数
数  获
获  取
取  
调用方（caller）函数通过栈向被调用方（callee）函数传递参数。本章介绍被调用方函数获取参数的
具体方式。 
指令清单 8.1  范例 
#include  
int f (int a, int b, int c) 
{ 
         return a*b+c; 
}; 
int main()  
{ 
         printf ("%d\n", f(1, 2, 3)); 
         return 0;  
}; 
8.1 x86 
8.1.1 MSVC 
使用 MSVC 2010 Express 编译上述程序，可得到汇编指令如下。 
指令清单 8.2  MSVC 2010 Express 
_TEXT   SEGMENT 
_a$ = 8           
; size = 4 
_b$ = 12          
; size = 4 
_c$ = 16          
; size = 4 
_f      PROC 
        push    ebp 
        mov     ebp, esp 
        mov     eax, DWORD PTR _a$[ebp] 
        imul    eax, DWORD PTR _b$[ebp] 
        add     eax, DWORD PTR _c$[ebp] 
        pop     ebp 
        ret     0 
_f      ENDP 
_main   PROC 
        push    ebp 
        mov     ebp, esp 
        push    3 ; 3rd argument 
        push    2 ; 2nd argument 
        push    1 ; 1st argument 
        call    _f 
        add     esp, 12 
        push    eax 
        push    OFFSET $SG2463 ; '%d', 0aH, 00H 
        call    _printf 
        add     esp, 8 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
84 
逆向工程权威指南（上册） 
       ; return 0 
        xor     eax, eax 
        pop     ebp 
        ret     0 
_main   ENDP 
main()函数把 3 个数字推送入栈，然后调用了 f(int, int, int)。被调用方函数 f()通过_a$=8 一类的汇编宏
访问所需参数以及函数自定义的局部变量。只不过从被调用方函数的数据栈的角度来看，外部参考的偏移
量是正值，而局部变量的偏移量是负值。可见，当需要访问栈帧（stack frame）以外的数据时，被调用方
函数可把汇编宏（例如_a$）与 EBP 寄存器的值相加，从而求得所需地址。 
当变量 a 的值存入 EAX 寄存器之后，f()函数通过各参数的地址依次进行乘法和加法运算，运算结果
一直存储于 EAX 寄存器。此后 EAX 的值就可以直接作为返回值传递给调用方函数。调用方函数 main()再
把 EAX 的值当作参数传递给 printf()函数。 
8.1.2 MSVC+OllyDbg 
本节演示 OllyDbg 的使用方法。当 f()函数读取第一个参数时，EBP 的值指向栈帧，如图 8.1 中的红色
方块所示。栈帧里的第一个值是 EBP 的原始状态，第二个值是返回地址 RA，第三个值开始的三个值依次
为函数的第一个参数、第二个参数和第三个参数。在访问第一个参数（当需要访问第一个参数）时，计算
机需要把 EBP 的值加上 8（2 个 32 位 words）。 
图 8.1  使用 OllyDbg 观察 f()函数 
OllyDbg 能够识别出外部传递的参数。它会对栈里的数据进行标注，添加上诸如“RETURN from”
“Arg1”
之类的标注信息。 
故而，被调用方函数所需的参数并不在自己的栈帧之中，而是在调用方函数的栈帧里。所以，被 OllyDbg
标注为 Arg 的数据都存储于其他函数的栈帧。 
8.1.3  GCC 
我们使用 GCC 4.4.1 编译上述源程序，然后使用 IDA 查看它的汇编指令。 
指令清单 8.3  GCC 4.4.1 
public f 
f          
proc near 
arg_0      = dword ptr  8 
arg_4      = dword ptr  0Ch 
arg_8      = dword ptr  10h 
push    ebp 
mov     ebp, esp 
mov     eax, [ebp+arg_0] ; 1st argument 
imul    eax, [ebp+arg_4] ; 2nd argument 
add     eax, [ebp+arg_8] ; 3rd argument 
pop     ebp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 8 章  参 数 获 取 
85 
retn  
f          
endp 
public main 
main       proc near 
var_10     = dword ptr -10h 
var_C      = dword ptr -0Ch 
var_8      = dword ptr -8 
push    ebp 
mov     ebp, esp 
and     esp, 0FFFFFFF0h 
sub     esp, 10h 
mov     [esp+10h+var_8], 3 ; 3rd argument 
mov     [esp+10h+var_C], 2 ; 2nd argument 
mov     [esp+10h+var_10], 1 ; 1st argument 
call    f 
mov     edx, offset aD  ; "%d\n" 
mov     [esp+10h+var_C], eax 
mov     [esp+10h+var_10], edx 
call    _printf 
mov     eax, 0 
leave 
retn 
main       endp 
GCC 的编译结果和 MSVC 的编译结果十分相似。 
不同之处是两个被调用方函数（f 和 printf）没有还原栈指针 SP。这是因为函数尾声的倒数第二条指令——
LEAVE 指令（参见附录 A.6.2）能够还原栈指针。 
8.2  x64 
x86-64 系统的参数传递过程略有不同。x86-64 系统能够使用寄存器传递（前 4 个或前 6 个）参数。就
这个程序而言，被调用方函数会从寄存器里获取参数，完全不需要访问栈。 
8.2.1  MSVC 
启用优化选项后，MSVC 编译的结果如下。 
指令清单 8.4  Optimizing MSVC 2012 x64 
$SG2997 DB     
'%d', 0aH, 00H 
main    PROC  
         sub    
rsp, 40 
         mov    
edx, 2 
         lea    
r8d, QWORD PTR [rdx+1] ; R8D=3 
         lea    
ecx, QWORD PTR [rdx-1] ; ECX=1 
         call   
f  
         lea    
rcx, OFFSET FLAT:$SG2997 ; '%d' 
         mov    
edx, eax 
         call   