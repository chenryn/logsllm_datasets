    @pytest.fixture()
    def ec2(_aws_credentials: None) -> Any:
        """Configure the boto3 EC2 client."""
        with mock_ec2():
            yield boto3.client("ec2", region_name="us-east-1")
    ```
The `ec2` fixture can then be used in the tests to setup the environment or
assert results.
#### Testing EC2
If you want to add security groups to the tests, you need to create the resource
first.
```python
def test_ec2_with_security_groups(ec2: Any) -> None:
    security_group_id = ec2.create_security_group(
        GroupName="TestSecurityGroup", Description="SG description"
    )["GroupId"]
    instance = ec2.run_instances(
        ImageId="ami-xxxx",
        MinCount=1,
        MaxCount=1,
        SecurityGroupIds=[security_group_id],
    )["Instances"][0]
    # Test your code here
```
To add tags, use:
```python
def test_ec2_with_security_groups(ec2: Any) -> None:
    instance = ec2.run_instances(
        ImageId="ami-xxxx",
        MinCount=1,
        MaxCount=1,
        TagSpecifications=[
            {
                "ResourceType": "instance",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "instance name",
                    },
                ],
            }
        ],
    )["Instances"][0]
    # Test your code here
```
#### Testing RDS
Use the `rds` fixture:
```python
from moto import mock_rds2
@pytest.fixture()
def rds(_aws_credentials: None) -> Any:
    """Configure the boto3 RDS client."""
    with mock_rds2():
        yield boto3.client("rds", region_name="us-east-1")
```
To create an instance use:
```python
instance = rds.create_db_instance(
    DBInstanceIdentifier="db-xxxx",
    DBInstanceClass="db.m3.2xlarge",
    Engine="postgres",
)["DBInstance"]
```
It won't have VPC information, if you need it, [create the subnet group
first](https://github.com/spulec/moto/issues/2183) (you'll need the `ec2`
fixture too):
```python
subnets = [subnet['SubnetId'] for subnet in ec2.describe_subnets()["Subnets"]]
rds.create_db_subnet_group(DBSubnetGroupName="dbsg", SubnetIds=subnets, DBSubnetGroupDescription="Text")
instance = rds.create_db_instance(
    DBInstanceIdentifier="db-xxxx",
    DBInstanceClass="db.m3.2xlarge",
    Engine="postgres",
    DBSubnetGroupName="dbsg",
)["DBInstance"]
```
#### Testing S3
Use the `s3_mock` fixture:
```python
from moto import mock_s3
@pytest.fixture()
def s3_mock(_aws_credentials: None) -> Any:
    """Configure the boto3 S3 client."""
    with mock_s3():
        yield boto3.client("s3")
```
To create an instance use:
```python
s3_mock.create_bucket(Bucket="mybucket")
instance = s3_mock.list_buckets()["Buckets"][0]
```
Check the [official
docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.create_bucket)
to check the `create_bucket` arguments.
#### Testing Route53
Use the `route53` fixture:
```python
from moto import mock_route53
@pytest.fixture(name='route53')
def route53_(_aws_credentials: None) -> Any:
    """Configure the boto3 Route53 client."""
    with mock_route53():
        yield boto3.client("route53")
```
To create an instance use:
```python
hosted_zone = route53.create_hosted_zone(
    Name="example.com", CallerReference="Test"
)["HostedZone"]
hosted_zone_id = re.sub(".hostedzone.", "", hosted_zone["Id"])
route53.change_resource_record_sets(
    ChangeBatch={
        "Changes": [
            {
                "Action": "CREATE",
                "ResourceRecordSet": {
                    "Name": "example.com",
                    "ResourceRecords": [
                        {
                            "Value": "192.0.2.44",
                        },
                    ],
                    "TTL": 60,
                    "Type": "A",
                },
            },
        ],
        "Comment": "Web server for example.com",
    },
    HostedZoneId=hosted_zone_id,
)
```
You need to first create a hosted zone. The `change_resource_record_sets` order
to create the instance doesn't return any data, so if you need to work on it,
use the `list_resource_record_sets` method of the route53 client (you'll need to
set the `HostedZoneId` argument). If you have more than 300 records, the endpoint gives
you a paginated response, so if the `IsTruncated` attribute is `True`, you need
to call the method again setting the `StartRecordName` and `StartRecordType` to
the `NextRecordName` and `NextRecordType` response arguments. Not nice at all.
Pagination [is not yet supported by
moto](https://github.com/spulec/moto/issues/3879), so you won't be able to test
that part of your code.
Check the official docs to check the method arguments:
* [`create_hosted_zone`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html#Route53.Client.create_hosted_zone).
* [`change_resource_record_sets`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html#Route53.Client.change_resource_record_sets).
#### Test VPC
Use the `ec2` fixture defined in the [usage section](#usage).
To create an instance use:
```python
instance = ec2.create_vpc(
    CidrBlock="172.16.0.0/16",
)["Vpc"]
```
Check the official docs to check the method arguments:
* [`create_vpc`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.create_vpc).
* [`create_subnet`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.create_subnet).
#### Testing autoscaling groups
Use the `autoscaling` fixture:
```python
from moto import mock_autoscaling
@pytest.fixture(name='autoscaling')
def autoscaling_(_aws_credentials: None) -> Any:
    """Configure the boto3 Autoscaling Group client."""
    with mock_autoscaling():
        yield boto3.client("autoscaling")
```
They don't [yet support
LaunchTemplates](https://github.com/spulec/moto/issues/2003), so you'll have to
use LaunchConfigurations. To create an instance use:
```python
autoscaling.create_launch_configuration(LaunchConfigurationName='LaunchConfiguration', ImageId='ami-xxxx', InstanceType='t2.medium')
autoscaling.create_auto_scaling_group(AutoScalingGroupName='ASG name', MinSize=1, MaxSize=3, LaunchConfigurationName='LaunchConfiguration', AvailabilityZones=['us-east-1a'])
instance = autoscaling.describe_auto_scaling_groups()["AutoScalingGroups"][0]
```
Check the official docs to check the method arguments:
* [`create_auto_scaling_group`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.create_auto_scaling_group).
* [`create_launch_configuration`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.create_launch_configuration).
* [`describe_auto_scaling_groups`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.describe_auto_scaling_groups).
#### Test Security Groups
Use the `ec2` fixture defined in the [usage section](#usage).
To create an instance use:
```python
instance_id = ec2.create_security_group(
    GroupName="TestSecurityGroup", Description="SG description"
)["GroupId"]
instance = ec2.describe_security_groups(GroupIds=[instance_id])
```
To add permissions to the security group you need to use the
`authorize_security_group_ingress` and `authorize_security_group_egress`
methods.
```python
ec2.authorize_security_group_ingress(
    GroupId=instance_id,
    IpPermissions=[
        {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "IpRanges": [{"CidrIp": "0.0.0.0/0"}],
        },
    ],
)
```
By default, the created security group comes with an egress rule to
allow all traffic. To remove rules use the `revoke_security_group_egress` and
`revoke_security_group_ingress` methods.
```python
ec2.revoke_security_group_egress(
    GroupId=instance_id,
    IpPermissions=[
        {"IpProtocol": "-1", "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
    ],
)
```
Check the official docs to check the method arguments:
* [`create_security_group`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.create_security_group).
* [`describe_security_group`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_security_groups).
* [`authorize_security_group_ingress`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.authorize_security_group_ingress).
* [`authorize_security_group_egress`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.authorize_security_group_egress).
* [`revoke_security_group_ingress`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.revoke_security_group_ingress).
* [`revoke_security_group_egress`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.revoke_security_group_egress).
#### Test IAM users
Use the `iam` fixture:
```python
from moto import mock_iam
@pytest.fixture(name='iam')
def iam_(_aws_credentials: None) -> Any:
    """Configure the boto3 IAM client."""
    with mock_iam():
        yield boto3.client("iam")
```
To create an instance use:
```python
instance = iam.create_user(UserName="User")["User"]
```
Check the official docs to check the method arguments:
* [`create_user`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.create_user)
* [`list_users`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.list_users)
#### Test IAM Groups
Use the `iam` fixture defined in the [test IAM users section](#test-iam-users):
To create an instance use:
```python
user = iam.create_user(UserName="User")["User"]
instance = iam.create_group(GroupName="UserGroup")["Group"]
iam.add_user_to_group(GroupName=instance["GroupName"], UserName=user["UserName"])
```
Check the official docs to check the method arguments:
* [`create_group`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.create_group)
* [`add_user_to_group`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.add_user_to_group)
# Issues
* [Support LaunchTemplates](https://github.com/spulec/moto/issues/2003): Once
    they are, test [clinv](https://github.com/lyz-code/clinv) autoscaling group
    adapter support for launch templates.
* [Support Route53 pagination](https://github.com/spulec/moto/issues/3879): test
    clinv route53 update and update the [test route53](#test-route53) section.
* [`cn-north-1` rds and autoscaling
    errors](https://github.com/spulec/moto/issues/3894): increase the timeout of
    clinv, and test if the coverage has changed.
# References
* [Git](https://github.com/boto/boto3)
* [Docs](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)