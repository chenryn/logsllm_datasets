is tested, the client session label0 may obtain a modiﬁed (and potentially adversarially-known) value gy0
in the ServerHello message. In order to be able to compute the premaster secret PMS of session label0
(and correctly answer to a Reveal query on derived keys) without knowing exponents x or y0, we employ
the PRF-ODH assumption [JKSS12, KPW13] in a slightly stronger variant here (see Appendix B for its
deﬁnition).12 More speciﬁcally, we assume the PRF function satisﬁes the PRF-ODH assumption when
keyed with a group element PMS.
In Game C.2, we then replace the handshake master secret HMS value by a uniformly random string
(cid:93)HMS ←$ {0, 1}λ in the tested and, if it is derived equally there, also in the contributively partnered
session. We bound the introduced advantage diﬀerence for A by the advantage of an algorithm B5 against
the PRF-ODH security of PRF keyed with elements from G as follows. In the beginning, B5 obtains the
PRF-ODH Diﬃe–Hellman shares gx and gy which it encodes in the ClientKeyShare resp. ServerKeyShare
message of the tested and contributively partnered session label and label0. Then, B5 outputs H1 as the
PRF challenge label. It obtains a PRF challenge value which it uses as the handshake master secret HMS
in session label and, if using the same Diﬃe–Hellman shares, session label0. In case label0 is a client session
6= gy, B5 uses its PRF-ODH query to compute HMS ←
and obtains within ServerKeyShare a value gy0
PRF(gxy0
The simulation B5 provides equals Game C.1 in case the PRF challenge value equals HKDF.Extract(0, gxy)
1) for the according hash value H0
1 in this session.
, H0
and Game C.2 if the challenge is a uniformly random value. Thus,
AdvGC.1
draft-05,A ≤ AdvGC.2
draft-05,A + AdvPRF-ODH
PRF,G,B5 .
Game C.3. Next, we substitute the pseudorandom function PRF in all evaluations in the tested and its
partnered session using the (replaced) handshake master secret (cid:93)HMS as key by a (lazy-sampled) random
function. This, among other values, in particular aﬀects the derivation of the handshake traﬃc key tkhs,
values gtkhs,gMS, (cid:93)RMS ←$ {0, 1}λ in the tested session and, potentially, its partner.
the master secret MS, and the resumption premaster secret RMS which are hereby replaced with random
We can turn any adversary A able to distinguish this change with non-negligible probability into an
adversary B6 against the security of the pseudorandom function PRF (keyed with uniformly random bit
strings). We let B6 simulate Game C.2 as the challenger, except that it uses its PRF oracle for PRF
computations keyed with (cid:93)HMS both in the tested and its (contributively) partnered session. Observe that,
12In the proceedings version and an earlier full version of this paper, we claimed this proof step can be reduced to the
DDH assumption and PRF security of the PRF function. An adversary can however, for a tested server session, make the
contributively partnered client session derive PMS with a diﬀerent server-Diﬃe–Hellman share gy0 of its choice and challenge
the simulation by revealing the key tkhs derived from this value. We are not aware of a way to simulate such Reveal query
without the help of an oracle-Diﬃe–Hellman query and hence employ the PRF-ODH assumption here.
25
in case the oracle computes the PRF function, this equals Game C.2, whereas, if it computes a random
function, this equals Game C.3. The simulation is sound because the handshake master secret (cid:93)HMS, by
the change in Game C.2, is an independent and uniformly random bit string.
We can hence can infer that
AdvGC.2
draft-05,A ≤ AdvGC.3
draft-05,A + AdvPRF-sec
PRF,B6 .
Observe that, in Game C.3, all values derived via an evaluation of PRF under the handshake master secret
have now been replaced by independent uniformly distributed values, since each value is derived using a
unique label as input to PRF.
Game C.4. Finally, we replace the application traﬃc key tkapp, derived using the pseudorandom func-
tion PRF keyed with the (random) master secret gMS, with a randomly chosen bit string (cid:93)tkapp ←$ {0, 1}λ
in the tested session as well as in the partnered session (if the latter derives the same master secret gMS in
being uniformly random bit strings). This (similar) reduction B7 is sound because gMS, by the change in
Game C.3).
Analogous to the previous step, we can bound this step by the security of PRF (again deﬁned for keys
Game C.3, is a uniformly random value. We can hence conclude that
AdvGC.3
draft-05,A ≤ AdvGC.4
draft-05,A + AdvPRF-sec
PRF,B7 .
In Game C.4, the session keys gtkhs and (cid:93)tkapp as well as the resumption premaster secret (cid:93)RMS are now
chosen independently and uniformly at random. As the response to its Test query is hence independent
of the test bit btest, the adversary A cannot distinguish whether it is given the real key or (another)
independently chosen random value and thus
AdvGC.4
draft-05,A ≤ 0.
Combining the various bounds implied by the above sequences of game transitions yields the stated
security bound.
6 Security of the draft-dh Handshake
We now analyze the TLS 1.3 handshake variant as speciﬁed in the draft-ietf-tls-tls13-dh-based fork
by Rescorla [Res15c].
Again, we deﬁne the session identiﬁers for the traﬃc key stages to be the unencrypted messages sent and
received excluding the ﬁnished messages, where starred (∗) components are not present in all authentication
modes:
sid1 = (ClientHello, ClientKeyShare, ServerHello, ServerKeyShare)
sid2 = (ClientHello, ClientKeyShare, ServerHello, ServerKeyShare, EncryptedExtensions∗,
and
ServerCertificate∗, CertificateRequest∗, ServerParameters∗,
ClientCertificate∗, ClientCertificateVerify∗).
We capture the further derived resumption master secret RMS and exporter master secret EMS in stages 3
and 4 and deﬁne the session identiﬁer to be sid3 = (sid2, “RMS”) and sid4 = (sid2, “EMS”) which are
uniquely determined by the second-stage identiﬁer sid2. As in Section 5, deﬁning session identiﬁers over
the unencrypted messages is again necessary to obtain key-independent Multi-Stage security.
26
The contributive identiﬁers are deﬁned as for draft-05, i.e., cid1 ﬁrst contains ClientHello and
ClientKeyShare (when they are sent resp. received) and is later augmented with ServerHello and
ServerKeyShare when those messages are sent resp. received, whereas cidi = sidi for stages i ∈ {2, 3, 4},
set by each party on sending its respective ﬁnished message.
The draft-dh version of the TLS 1.3 handshake involves semi-static keys gs on the server side, which
we represent as temporary keys in our model.
In particular, the adversary is given power to generate
arbitray many such keys via the NewTempKey query and can specify which temporary key to use in each
session. We point out that temporary keys are not revealed in Corrupt queries, as we expect them to be
used only in a short time frame.
Theorem 6.1 (Match security of draft-dh). The draft-dh full handshake is Match-secure:
eﬃcient adversary A we have
for any
AdvMatch
draft-dh,A ≤ n2
s · 1/q · 2−|nonce|,
where ns is the maximum number of sessions, q is the group order, and |nonce| = 256 is the bit-length of
the nonces.
As all aspects of the draft-dh handshake relevant for Match security equal those of the draft-05
handshake (aside from ServerCertificateVerify being renamed to ServerParameters and the added
fourth session identiﬁer which is distinct due to its “EMS” label), the proof of Theorem 5.1 applies here,
too.
Theorem 6.2 (Multi-Stage security of draft-dh). The draft-dh full handshake is Multi-Stage-secure in
a key-independent and stage-1-forward-secret manner with concurrent authentication properties AUTH =
{(unauth, unauth, unauth, unauth), (unauth, unilateral, unilateral, unilateral), (unauth, mutual, mutual, mutual)}
(i.e., no authentication, stage-2 unilateral authentication, and stage-2 mutual authentication). Formally,
for any eﬃcient adversary A against the Multi-Stage security there exist eﬃcient algorithms B1, . . . , B10
such that
AdvMulti-Stage,D
draft-dh,A ≤ 4ns·
(cid:18)
+ ns ·(cid:16)AdvCOLL
AdvCOLL
+ AdvCOLL
H,B1 + nu · AdvEUF-CMA
H,B3 + nu · AdvEUF-CMA
Sig,B4
Sig,B6
Sig,B2
H,B5 + nu · AdvEUF-CMA
HKDF.Extract,G,B8 + AdvPRF-sec
+ AdvPRF-ODH
+ AdvPRF-ODH
HKDF.Extract,G,B7
HKDF.Expand,B9 + AdvPRF-sec
HKDF.Expand,B10
(cid:17)(cid:19)
,
where ns is the maximum number of sessions and nu is the maximum number of users.
Proof. First of all, as in the proof of Theorem 5.2 for draft-05, we consider the case that the adversary A
makes a single Test query only. This reduces its advantage, based on an analogous hybrid argument, by a
factor at most 1/4ns as there are four stages in each of the ns sessions. We from now on can speak about
the session label tested at stage i, which we know in advance.
As for the draft-05 proof, our security analysis is in the same three (disjoint) cases that
A. the adversary tests a client session without honest contributive partner in the ﬁrst stage,
B. the adversary tests a server session without honest contributive partner in the ﬁrst stage, and
C. the tested session has an honest contributive partner in stage 1.
27
(cid:18)
AdvMulti-Stage,D
draft-dh,A ≤ 4ns·
We again can split the adversary’s advantage along these three cases:
draft-dh,A
Adv1-Multi-Stage,client without partner
+ Adv1-Multi-Stage,server without partner
+ Adv1-Multi-Stage,test with partner
draft-dh,A
(cid:19)
draft-dh,A
.
The proof cases A and B are virtually identical to the respective cases in the proof for draft-05
(cf. Theorem 5.2), aside from the server’s signature message being called ServerParameters instead of
ServerCertificateVerify. Again, the online signatures on the transcript ensure that no session accepts
an authenticated key without partner in the ﬁrst stage. We can hence focus on the third case.
Case C. Test with Partner
We analyze the case that the tested session (client or server) has an honest contributive partner in the ﬁrst
stage, i.e., we know there exists another label0 such that label.cid1 = label0.cid1. This allows Test queries to
be potentially issued in any of the four stages.
Game C.0. We start with an initial game equal to the Multi-Stage game with a single Test query, but
restricting the adversary to only test a session having an honest contributive partner in the ﬁrst stage in
order to have
AdvGC.0
draft-dh,A = Adv1-Multi-Stage,test with partner
draft-dh,A
.
Game C.1. Our ﬁrst modiﬁcation is to guess a session label0 6= label (among the at most ns sessions in
the game) and abort the game in case this session is not an honest contributive partner (in stage 1) of the
tested session, i.e., we abort if label.cid1 6= label0.cid1. Note that we can, without loss of generality, assume
that A always issues a Test query. This reduces the adversary’s advantage by a factor of at most 1/ns.
AdvGC.0
draft-dh,A ≤ ns · AdvGC.1
draft-dh,A.
From now on, we can speak of the session label0 (contributively) partnered with the tested session label in
stage 1 and know label0 in advance.
Game C.2. Next, we let the challenger abort the game if any two honest sessions compute the same
hash value for diﬀerent inputs in any evaluation of the hash function H.
H,B5 of an adversary B5
We can bound the probability of the game to be aborted by the advantage AdvCOLL
against the collision resistance of the hash function H similar to the Game A.1 in the proof of Theorem 5.2,
where B5 outputs the two distinct input values to H resulting in the same hash value as a collision. It
hence holds that
AdvGC.1
draft-dh,A = AdvGC.2
draft-dh,A + AdvCOLL
H,B5 .
Game C.3.
In this game, we let the challenger abort if the client session amongst the tested and its
(contributively) partnered session (i.e., the one having role = initiator) in a server-authenticated exchange
(label.auth2 ∈ {unilateral, mutual}) receives, within the ServerParameters message, a valid signature under
the public key pkU of some user U ∈ U such that the contained message has not been signed by any of the
honest sessions.
28
Similarly to Game A.2 in the proof of Theorem 5.2, we can bound the probability that Game C.3 aborts
by the advantage of an adversary B6 against the EUF-CMA security of the signature scheme Sig (multiplied
by a factor nu for guessing the right user U) and obtain
AdvGC.2
draft-dh,A ≤ AdvGC.3
draft-dh,A + nu · AdvEUF-CMA
Sig,B6
.
Since according to Game C.2 there is no collision between any two honest evaluations of the hash
function, we can be sure that if the client session (among label and label0) obtains a valid ServerParameters
message, then this message originates from its partnered session (label0 resp. label). Hence, in particular,
both sessions in this case agree on the server-provided semi-static gs value if such a value is sent. Observe
that gs (captured in our model as a temporary public key tpk with tsk = s being the corresponding
temporary secret key) is always chosen honestly by the challenger; the adversary is only allowed to decide
which particular value is used within a session.
Game C.4.
In this game, we replace the handshake master secret HMS derived in the tested and (poten-
tially) its contributive partner session with a uniformly random and independent string (cid:93)HMS ←$ {0, 1}λ.
As in Game C.2 of the proof for draft-05 (cf. Section 5), we employ the PRF-ODH assumption in
order to be able to simulate the computation of HMS (and MS) in a partnered client session for a modi-
ﬁed ServerKeyShare message.13