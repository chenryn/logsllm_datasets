        metallb.universe.tf/allow-shared-ip: "coredns-ext"
    spec:
      selector:
        k8s-app: kube-dns
      ports:
      - name: dns-tcp
        port: 53
        protocol: TCP
        targetPort: 53
      type: LoadBalancer
    ```
    这个文件现在应该很熟悉了，注释中的一个例外是添加了`metallb.universe.tf/allow-shared-ip`值。当我们为 UDP 服务创建下一个清单时，这个值的使用将变得清晰。
    *   Create a file called `coredns-udp.yaml` and add the content from the following example manifest.
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: coredns-udp
      namespace: kube-system
      annotations:
        metallb.universe.tf/allow-shared-ip: "coredns-ext"
    spec:
      selector:
        k8s-app: kube-dns
      ports:
      - name: dns-tcp
        port: 53
        protocol: UDP
        targetPort: 53
      type: LoadBalancer
    ```
    请注意，我们使用了来自 TCP 服务清单`metallb.universe.tf/allow-shared-ip: "coredns-ext"`的相同注释值。这是 MetalLB 将用来创建单个 IP 地址的值，即使正在请求两个独立的服务。
    *   Finally, we can deploy the two services to the cluster using `kubectl apply`:
    **立方申请-f coredns-tcp.yaml 立方申请-f coredns-udp.yaml**
    *   一旦部署完毕，获取`kube-system`名称空间中的服务，以验证我们的服务已经部署:**
 **![Figure 6.12 – Multiple protocols assigned using MetalLB ](img/Fig_6.12_B15514.jpg)
图 6.12–使用 MetalLB 分配的多个协议
您应该看到创建了两个新的服务:`coredns-tcp`和`coredns-udp`服务。在`EXTERNAL-IP`栏下，您可以看到两个服务都被分配了相同的 IP 地址，这允许服务在相同的 IP 地址上接受两个协议。
将 MetalLB 添加到集群中可以让您的用户部署他们可以容器化的任何应用。它使用动态分配服务 IP 地址的 IP 池，以便可以立即访问服务外部请求。
一个问题是 MetalLB 不为服务 IP 提供名称解析。当用户想要访问一项服务时，他们更喜欢以一个容易记住的名字为目标，而不是随机的 IP 地址。Kubernetes 不提供为服务创建外部可访问名称的能力，但是它有一个孵化器项目来启用这个功能。
在下一节中，我们将学习如何使用 CoreDNS，通过一个名为 external-dns 的孵化器项目，在 DNS 中创建服务名条目。
# 使服务名称对外可用
您可能已经想知道为什么我们使用 IP 地址来测试我们创建的 NGINX 服务，而我们使用域名进行入口测试。
虽然 Kubernetes 负载平衡器为服务提供标准的 IP 地址，但它不会为用户创建外部 DNS 名称来连接到服务。使用 IP 地址连接到运行在集群上的应用效率不高，并且在域名系统中为 MetalLB 分配的每个 IP 手动注册名称是一种不可能维护的方法。那么，如何为我们的负载平衡器服务添加名称解析功能，从而提供更像云的体验呢？
与维护 KinD 的团队类似，有一个 Kubernetes SIG 正在为 Kubernetes 开发这个名为`external-dns`的功能。主项目页面位于 https://github.com/kubernetes-sigs/external-dns 的 SIG Github 上。
在撰写本文时，`external-dns`项目支持一长串兼容的 DNS 服务器，包括以下内容:
*   谷歌的云域名系统
*   亚马逊的 53 号公路
*   蔚蓝色
*   云 flare
*   科林斯饭店
*   RFC2136
*   还有更多…
如您所知，我们的 Kubernetes 集群正在运行 CoreDNS 来提供集群 DNS 名称解析。很多人不知道 CoreDNS 并不局限于只提供内部集群 DNS 解析。它还可以提供外部名称解析，解析由 CoreDNS 部署管理的任何 DNS 区域的名称。
## 设置外部域名系统
现在，我们的核心域名系统只是为内部集群名称解析名称，所以我们需要为新的域名系统条目设置一个区域。由于 foowwidgets 希望所有应用都进入`foowidgets.k8s`，我们将把它作为我们的新区域。
## 集成外部域名系统和核心域名系统
向我们的集群提供动态服务注册的最后一步是部署`external-dns`并将其与 CoreDNS 集成。
要将和`external-dns`配置为在集群中工作，我们需要将每个配置为使用 ETCD 作为新的域名系统区域。由于我们的集群运行的是预装 ETCD 的 KinD，我们将部署一个专用于`external-dns`区域的新 ETCD 吊舱。
部署新 ETCD 服务的最快方法是使用官方的 ETCD 运营商 Helm 图表。使用以下单个命令，我们可以安装操作器和一个三节点 ETCD 集群。
首先，我们需要安装 Helm 二进制文件。我们可以使用 Helm 团队提供的脚本快速安装 Helm:
```
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
```
现在，使用 Helm，我们可以创建将与 CoreDNS 集成的 ETCD 集群。以下命令将部署 ETCD 操作员并创建 ETCD 集群:
```
helm install etcd-dns --set customResources.createEtcdClusterCRD=true stable/etcd-operator --namespace kube-system
```
部署运营商和 ETCD 节点需要几分钟时间。您可以通过查看`kube-system`名称空间中的豆荚来检查状态。完全安装后，您将看到三个 ETCD 操作员舱和三个 ETCD 集群舱:
![Figure 6.13 – ETCD operator and nodes ](img/Fig_6.13_B15514.jpg)
图 6.13–ETCD 算子和节点
一旦部署完成，查看`kube-system`名称空间中的服务，以获取名为`etcd-cluster-client`的新 ETCD 服务的 IP 地址:
![Figure 6.14 – ETCD service IP ](img/Fig_6.14_B15514.jpg)
图 6.14–et CD IP 服务
在下一节中，我们将需要分配的 IP 地址来配置`external-dns`和 CoreDNS 区域文件。
## 向核心域名系统添加 ETCD 区
`external-dns`要求核心域名系统区域存储在 ETCD 服务器上。之前，我们为 foowidgets 创建了一个新的区域，但是这只是一个标准区域，需要手动为新服务添加新记录。用户没有时间等待测试他们的部署，使用 IP 地址可能会导致代理服务器或内部策略出现问题。为了帮助用户加快应用的交付和测试，我们需要为他们的服务提供动态名称解析。要为 foowidgets 启用 ETCD 集成区域，请编辑 CoreDNS 配置图，并添加以下粗体行。
您可能需要将**端点**更改为在上一页检索到的新 ETCD 服务的 IP 地址:
```
apiVersion: v1
data:
  Corefile: |
    .:53 {
        errors
        health {
           lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
           ttl 30
        }
        prometheus :9153
        forward . /etc/resolv.conf
 etcd foowidgets.k8s {
 stubzones
 path /skydns
 endpoint http://10.96.181.53:2379
 }
        cache 30
        loop
        reload
        loadbalance
    }
kind: ConfigMap        
```
下一步是将`external-dns`部署到集群。
我们已经在`chapter6`目录的 GitHub 存储库中提供了一个清单，该清单将用您的 ETCD 服务端点修补部署。您可以通过从`chapter6`目录执行以下命令，使用此清单部署`external-dns`。以下命令将查询 ETCD 群集的服务 IP，并使用该 IP 作为端点创建部署文件。
新创建的部署将在您的集群中安装`external-dns`:
```
ETCD_URL=$(kubectl -n kube-system get svc etcd-cluster-client -o go-template='{{ .spec.clusterIP }}')
cat external-dns.yaml | sed -E "s//${ETCD_URL}/" > external-dns-deployment.yaml
kubectl apply -f external-dns-deployment.yaml
```
要将`external-dns`手动部署到您的集群，请使用最后一行中的 ETCD 服务 IP 地址创建一个名为`external-dns-deployment.yaml`的新清单，清单包含以下内容:
```
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups: [""]
  resources: ["services","endpoints","pods"]
  verbs: ["get","watch","list"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get","watch","list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: kube-system
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec: