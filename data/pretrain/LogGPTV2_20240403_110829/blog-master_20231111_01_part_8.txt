db1=*> alter role r1 set default_transaction_read_only =false;  
ALTER ROLE  
db1=*> end;  
COMMIT  
db1=> \q  
postgres@6f60081d4ace:/usr/lib/postgresql/14/bin$ psql  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
db1=> \c db1 r1  
You are now connected to database "db1" as user "r1".  
```  
#### 60 高级SQL:  
[《PostgreSQL SELECT 的高级用法(CTE, LATERAL, ORDINALITY, WINDOW, SKIP LOCKED, DISTINCT, GROUPING SETS, ...) - 珍藏级》](../201802/20180226_05.md)   
##### 60.1 with recursive  
```  
drop table t;  
create table t (  
  id int,     -- 进程ID   
  info text,  -- 进程信息   
  pid int     -- 父进程ID   
);   
insert into t values (1, 'pg-1', null);  
insert into t values (100, 'pg-100', 1);  
insert into t values (99, 'pg-99', 1);  
insert into t values (98, 'pg-98', 1);  
insert into t values (97, 'pg-97', 98);  
insert into t values (96, 'pg-96', 98);  
insert into t values (95, 'pg-95', 97);  
insert into t values (90, 'pg-90', 98);  
insert into t values (80, 'pg-80', 97);  
db1=> select * from t;  
 id  |  info  | pid   
-----+--------+-----  
   1 | pg-1   |      
 100 | pg-100 |   1  
  99 | pg-99  |   1  
  98 | pg-98  |   1  
  97 | pg-97  |  98  
  96 | pg-96  |  98  
  95 | pg-95  |  97  
  90 | pg-90  |  98  
  80 | pg-80  |  97  
(9 rows)  
-- 查询1的所有子进程, 并把进程关联路径补齐  
with recursive tmp as (  
  select id,info,coalesce(pid,'0')::text pid from t where id=1  
  union   
  select t.id, t.info||','||tmp.info, coalesce(tmp.pid,'0')||','||t.pid||','||t.id from t join tmp on (t.pid=tmp.id) where t.* is not null  
)   
select * from tmp;  
 id  |          info          |        pid           
-----+------------------------+--------------------  
   1 | pg-1                   | 0  
 100 | pg-100,pg-1            | 0,1,100  
  99 | pg-99,pg-1             | 0,1,99  
  98 | pg-98,pg-1             | 0,1,98  
  97 | pg-97,pg-98,pg-1       | 0,1,98,98,97  
  96 | pg-96,pg-98,pg-1       | 0,1,98,98,96  
  90 | pg-90,pg-98,pg-1       | 0,1,98,98,90  
  95 | pg-95,pg-97,pg-98,pg-1 | 0,1,98,98,97,97,95  
  80 | pg-80,pg-97,pg-98,pg-1 | 0,1,98,98,97,97,80  
(9 rows)  
```  
##### 60.2 子查询  
```  
db1=> select *,(select t.pid from t where t.id=tmp.pid) from t tmp;  
 id  |  info  | pid | pid   
-----+--------+-----+-----  
   1 | pg-1   |     |      
 100 | pg-100 |   1 |      
  99 | pg-99  |   1 |      
  98 | pg-98  |   1 |      
  97 | pg-97  |  98 |   1  
  96 | pg-96  |  98 |   1  
  95 | pg-95  |  97 |  98  
  90 | pg-90  |  98 |   1  
  80 | pg-80  |  97 |  98  
(9 rows)  
db1=> select array(select random()*10 from generate_series(1,5));  
                                           array                                             
-------------------------------------------------------------------------------------------  
 {8.943357864397399,6.126725114527112,8.67194419003603,5.344871449521413,8.39895334311862}  
(1 row)  
```  
##### 60.3 with ordinality  
```  
digoal=# select * from generate_series(1,4) with ordinality as g(g,o);    
 g | o     
---+---    
 1 | 1    
 2 | 2    
 3 | 3    
 4 | 4    
(4 rows)    
digoal=# select * from generate_series(1,4) with ordinality;    
 generate_series | ordinality     
-----------------+------------    
               1 |          1    
               2 |          2    
               3 |          3    
               4 |          4    
(4 rows)    
digoal=# select * from unnest(array[5,4,3,2,1]);    
 unnest     
--------    
      5    
      4    
      3    
      2    
      1    
(5 rows)    
digoal=# select * from unnest(array[5,4,3,2,1]) with ordinality;    
 unnest | ordinality     
--------+------------    
      5 |          1    
      4 |          2    
      3 |          3    
      2 |          4    
      1 |          5    
(5 rows)   
```  
##### 60.4 distinct on  
```  
drop table t;  
create table t (id int, info text, ts timestamp);  
insert into t values (1,'test1',clock_timestamp()), (1,'test11',clock_timestamp()), (2,'test2',clock_timestamp());  
db1=> select distinct on (id) * from t;  
 id | info  |             ts               
----+-------+----------------------------  
  1 | test1 | 2023-11-10 14:55:30.282262  
  2 | test2 | 2023-11-10 14:55:30.282396  
(2 rows)  
db1=> explain select distinct on (id) * from t;  
                            QUERY PLAN                              
------------------------------------------------------------------  
 Unique  (cost=78.60..84.25 rows=200 width=44)  
   ->  Sort  (cost=78.60..81.43 rows=1130 width=44)  
         Sort Key: id  
         ->  Seq Scan on t  (cost=0.00..21.30 rows=1130 width=44)  
(4 rows)  
```  
##### 60.5 lateral  
lateral可以在FROM ITEM中，也可以在JOIN ITEM中。LATERAL后面可以是子查询、函数名。LATERAL中的子查询可以直接引用LATERAL左边的ITEM进行JOIN（类似exists, not exists子句中的引用用法）。    
```  
create table test (id int, username text, some_ts timestamp);  
insert into test values (1,'a',clock_timestamp()),(2,'a',clock_timestamp()),(3,'b',clock_timestamp()),(4,'c',clock_timestamp());  
select x.* from   
  ( select t.username      
    from test t      
    group by t.username order by username   
  ) as t1,    
  LATERAL (    
    select t.* from test t where    
    t.username = t1.username order by t.some_ts desc limit 5      
  ) as x;    
 id | username |          some_ts             
----+----------+----------------------------  
  2 | a        | 2023-11-10 15:01:05.644149  
  1 | a        | 2023-11-10 15:01:05.644056  
  3 | b        | 2023-11-10 15:01:05.644153  
  4 | c        | 2023-11-10 15:01:05.644155  
(4 rows)  
```  
##### 60.6 函数  
```  
create or replace function get_rand_arr(int,int,int) returns int[] as $$  
  select array(select $2+(random()*($3-$2))::int from generate_series(1,$1));  
$$ language sql strict;  
db1=> select get_rand_arr(10,50,100); -- 10个50-100之间的数值组成的数组  
          get_rand_arr             
---------------------------------  
 {51,80,81,62,71,73,78,96,78,50}  
(1 row)  
db1=> select get_rand_arr(10,50,100);  
          get_rand_arr             
---------------------------------  
 {92,89,53,98,75,85,99,79,86,65}  
(1 row)  
```  
游标  
```  
create table t_cur (id int primary key, info text, ts timestamp);  
insert into t_cur select generate_series(1,10000), md5(random()::text), clock_timestamp();  
db1=> \h declare  
Command:     DECLARE  
Description: define a cursor  
Syntax:  
DECLARE name [ BINARY ] [ ASENSITIVE | INSENSITIVE ] [ [ NO ] SCROLL ]  
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR query  
URL: https://www.postgresql.org/docs/14/sql-declare.html  
db1=> begin;  
BEGIN  
db1=*> declare cur cursor for select * from t_cur order by ts ;  
DECLARE CURSOR  
db1=*> \h fetch  
Command:     FETCH  
Description: retrieve rows from a query using a cursor  
Syntax:  
FETCH [ direction ] [ FROM | IN ] cursor_name  
where direction can be one of:  
    NEXT  
    PRIOR  
    FIRST  
    LAST  
    ABSOLUTE count  
    RELATIVE count  
    count  
    ALL  
    FORWARD  
    FORWARD count  
    FORWARD ALL  
    BACKWARD  
    BACKWARD count  
    BACKWARD ALL  
URL: https://www.postgresql.org/docs/14/sql-fetch.html  
```  
获取游标数据  
```  
db1=*> fetch 5 from cur;  
 id |               info               |             ts               
----+----------------------------------+----------------------------  
  1 | a689102d41cfc60dc17071d807f9310f | 2023-11-11 01:18:23.805523  
  2 | 751520002300819e151c7b064647ecc1 | 2023-11-11 01:18:23.80584  
  3 | d5cd199f2a598741bcec25c1271235ee | 2023-11-11 01:18:23.805849  
  4 | 7e709b940a496a7e47eb04b5362b3309 | 2023-11-11 01:18:23.805852  
  5 | 7d5113b8128ee0150319e2f91a5a2f3b | 2023-11-11 01:18:23.805854  
(5 rows)  
db1=*> fetch 5 from cur;  
 id |               info               |             ts               
----+----------------------------------+----------------------------  
  6 | ae103fb4e628e98a04c37f43b54bc063 | 2023-11-11 01:18:23.805857  
  7 | f62eef852e3bfa7503f550339f1e4e54 | 2023-11-11 01:18:23.80586  
  8 | 729271ad6928ae94b2565a9a1fe3229e | 2023-11-11 01:18:23.805862  
  9 | 693031efdfba7089cf4ac3b42c576409 | 2023-11-11 01:18:23.805865  
 10 | 977f0d7517998b86c007a0fce187173c | 2023-11-11 01:18:23.805867  
(5 rows)  
db1=*> fetch 5 from cur;  
 id |               info               |             ts               
----+----------------------------------+----------------------------  
 11 | e203a9915ea13612e17e11960887289a | 2023-11-11 01:18:23.80587  
 12 | 6e05599eeab7b240053a869bda4df102 | 2023-11-11 01:18:23.805873  
 13 | fc94920b46724360071499301a50a45c | 2023-11-11 01:18:23.805875  
 14 | 255c4cd21cbb4e8107df4f2864c84c8b | 2023-11-11 01:18:23.805878  
 15 | 5c97516faa85805f1fa87d93ec18bae0 | 2023-11-11 01:18:23.80588  
(5 rows)  
db1=*> end;  
COMMIT  
```  
without hold, 事务结束 自动释放游标  
```  
db1=> select * from pg_cursors ;  
 name | statement | is_holdable | is_binary | is_scrollable | creation_time   
------+-----------+-------------+-----------+---------------+---------------  
(0 rows)  
```  
with hold, 事务结束 不会自动释放游标, 需要手工释放, 防止引发无法回收的垃圾导致表和索引膨胀  
```  
db1=> declare cur cursor with hold for select * from t_cur order by ts ;  
DECLARE CURSOR  
db1=> select * from pg_cursors ;  
 name |                             statement                              | is_holdable | is_binary | is_scrollable |         creation_time           
------+--------------------------------------------------------------------+-------------+-----------+---------------+-------------------------------  
 cur  | declare cur cursor with hold for select * from t_cur order by ts ; | t           | f         | t             | 2023-11-11 01:20:31.067027+00  
(1 row)  
db1=> fetch 5 from cur;  
 id |               info               |             ts               
----+----------------------------------+----------------------------  
  1 | a689102d41cfc60dc17071d807f9310f | 2023-11-11 01:18:23.805523  
  2 | 751520002300819e151c7b064647ecc1 | 2023-11-11 01:18:23.80584  
  3 | d5cd199f2a598741bcec25c1271235ee | 2023-11-11 01:18:23.805849  
  4 | 7e709b940a496a7e47eb04b5362b3309 | 2023-11-11 01:18:23.805852  
  5 | 7d5113b8128ee0150319e2f91a5a2f3b | 2023-11-11 01:18:23.805854  
(5 rows)  