1
A
A
BCD
B
CD
G
G
G
E
E
E
T
T
T
Figure 4. Example of microclustering
of the protocol (for which there is a high number of sam-
ples in the sequences) have higher probability of being put
in a separate microcluster. So the emulation will be more
reﬁned for the most common functional parts.
Thus, the Region Analysis process achieves the targeted
goal: it is able to add generality to a complex and speciﬁc
state machine and it identiﬁes the regions carrying a seman-
tic value, that is, regions to be taken into consideration when
determining the future state during simulation.
2.4.3 Dependency handling
Some of the identiﬁed regions play a speciﬁc role in the ex-
change of messages. They are those changing elements sent
by a client that it expects to see sent back by the server. Ses-
sion IDs are one such example. It is thus important to search
for dependencies between regions of subsequent messages.
ScriptGen handles this kind of dependency between
client messages and the future server answers by taking into
consideration what it calls Random Regions. Random Re-
gions are regions having a very high mutation rate, near to
100%. The dependency handler looks at the value of these
regions for each sample sequence, and tries to ﬁnd the same
value in the corresponding server answer. If there is a match
that is common to all the sample sequences traversing that
speciﬁc transition, then the dependency handler stores the
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
link that will be used during the emulation of the state ma-
chine.
Other types of dependencies come to mind that could be
searched for. One can think of counters that are increased,
or sequence numbers to which other values are added, etc.
Not all dependencies can be automatically found and iden-
tifying precisely which ones can or cannot be handled by a
similar approach is left for future research.
2.5 Script Generator
Once the State Machine is simpliﬁed, it is necessary to
store it in such a way that it can be simply and efﬁciently
emulated by a Python script usable by Honeyd. In our ﬁrst
prototype, this has been implemented as a simple service
script: a new instance of the interpreter is created for each
incoming client connection. For each state, the emulator
prints the label (if present) and then fetches the client re-
sponse, using the Region Analysis output to decide the fu-
ture state. This is clearly not satisfactory from a perfor-
mance point of view for a heavy loaded honeypot but is
good enough as a proof of concept to validate the method.
It is important to choose a good algorithm to match in-
coming messages with all possible transitions. Reusing the
same alignment algorithm is not feasible since it requires
a huge amount of resources, much more than what is usu-
ally available in deployed honeypots. A simpler technique
had to be found. The Script Generator focuses on the re-
gions that Region Analysis has identiﬁed as important from
a semantic point of view. They are called Fixed Regions as
opposed to the Mutating Regions which are likely to con-
tain changing parameters. The emulator implements a reg-
ular expression matching algorithm where only the Fixed
Regions are considered with variable intervals of unknown
characters between them. In case of a match, the emula-
tor calculates a similarity score between the incoming mes-
sage and the found message. The transition with the highest
score is then chosen to reach a new state.
3 Expected Quality of the results
3.1 Known limitations
The approach described in the previous Section presents
a series of problems and limitations which we are well
aware of. The emulated protocol won’t behave exactly like
the original protocol since some approximations have been
introduced. It is possible to distinguish between two types
of limitations: deviations due to the approximation intro-
duced by simpliﬁcation, and those that are implicit in the
approach followed.
3.1.1 Deviations due to approximation
ScriptGen has been designed to be completely automated,
without any possibility of helping the simpliﬁcation with
additional information about the protocol behavior. This
can be seen as an advantage, since it allows the emulation
of any protocol of any kind without any knowledge about
it. But this may also lead to challenges in performing a sim-
pliﬁcation which does not degrade too much the emulation
quality.
First of all, the quality of the emulation depends heavily
on the value of the thresholds chosen in the whole process.
These thresholds inﬂuence the growth of the state machine
(maximum fan-out) and its complexity (maximum number
of nodes), and also the strength of the simpliﬁcation (clus-
tering thresholds). It may be difﬁcult to ﬁnd a good com-
bination of these parameters, and it may be interesting to
study their impact in order to ﬁnd out if it is possible to iden-
tify combinations that can be considered good in all cases,
or if the optimal value is protocol-dependent. This question
will be addressed in some more depth in section 3.2.
Also, the sample tcpdump ﬁle has a huge impact on the
ﬁnal result. In fact, the characteristics of the protocol are
uniquely deduced from this sample ﬁle. On the one hand,
the knowledge of the protocol that can be used by the em-
ulator is limited to the sample’s content: the emulator will
not be able to handle an activity that was not enclosed in it.
On the other hand, the simpliﬁcation uses the frequency of
the various activities seen in it to deﬁne the various func-
tional parts, identifying the semantically important regions.
Only good interaction samples, using all the functionality of
the protocol and presenting good diversity will lead to good
results. To better understand this concept, an example may
be useful. Thinking back to the simple protocol exposed in
table 1 on page 4, a bad sample ﬁle may contain only the
following sequences:
GET MSG FROM 
GET MSG FROM 
Those two sequences, when parsed by Region Analysis,
would lead to identifying a transition in the state machine
triggered by all the sequences matching the following regu-
lar expression:
GET MSG FROM 
Of course this would be wrong, and a new user logging as
“dave” would not trigger the transition, probably forcing the
emulation to end prematurely. This is just a simple example,
but highlights the importance that a good sampling has in
the generation of the state machine.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
3.1.2 Implicit limitations
ScriptGen implicitly introduces some limits that prevent it
from being able to emulate all possible protocols. The ﬁrst
limit can be found in the fact that the notion of state in
ScriptGen is local to the TCP session or to the UDP re-
quest/reply tuple. This leads to the fact that handling causal-
ity between different conversations (e.g. FTP control/data
sessions) is not possible. Also, if the server response de-
pends on a deﬁnition of state which is out of the scope of a
TCP session (for instance, time of the day) ScriptGen won’t
be able to handle it and so the results of the simulation may
not be precise.
Also, ScriptGen is obviously not able to cope with en-
crypted channels:
it is able to replay only payloads that
have been already seen in the tcpdump ﬁle. Cryptogra-
phy offers mechanisms, like challenge-based authentica-
tion, especially intended to prevent a malicious user from
re-authenticating by replaying the same payload, as Script-
Gen would do.
3.2 Similarity tests
It can be interesting to study the impact of the simpliﬁca-
tion parameters on the quality of the emulation, deﬁning as
quality the similarity between the behavior of the emulated
server and the behavior of the real one. To investigate this
concept, we have developed a simple tool. This tool is able
to parse a sample tcpdump ﬁle containing pieces of interac-
tion between clients and a real server, and to replay these se-
quences to benchmark the emulated server. The idea is quite
simple: we want to send the client messages to the emulated
server, and to compare its answers with those contained in
the tcpdump ﬁle itself using byte-oriented pairwise similar-
ity. We understand that the next version of TCPopera offers
the same replay feature [10]. TCPopera is a TCP trafﬁc ma-
nipulation tool that extends the capabilities of TCPreplay
[2] to reproduce realistic trafﬁc. We will most likely use it
in the future to conduct more tests but it was unfortunately
not yet publicly available when we needed it.
During this test two parameters have been taken into con-
sideration:
• Macroclustering threshold (W): this threshold controls
the impact of macroclustering, deﬁning the minimum
distance between two sequences that should lead to put
them into two different clusters. If W is small, Region
Analysis will create many small clusters, leading to a
complex and detailed state machine. If W is big, then
Region Analysis will create a few big clusters that will
eventually be split a second time by microclustering.
 40
 35
 30
 25
 20
 15
 10
"nodes.dat"
 40
 35
 30
 25
 20
 15
 10
 0
 0.2
 0.4
macro (W)
 0.6
 0.8
 0.8
 1
 1
 0
 0.2
 0.4
 0.6
micro (w)
Figure 5. Number of nodes
creation of a separate microcluster representing only
that value. So when w is set to small values, microclus-
tering will split macroclusters into many microclusters.
On the other hand, if w is set to high values microclus-
tering will not have any effect.
3.2.1 The testbed
The test environment consists of one honeyd virtual host,
emulating the NETBIOS Session Service (port TCP/139),
and a client host running the sequences against the emu-
lated server. The state machine has been built based on a
sample interaction taken from a VMware honeypot from the
Leurre’com project [4, 5, 6, 7, 8, 9]. The test has been run
in the ideal case, in which the sequences used to evaluate
the emulation are the same than those used to build its State
Machine. The emulator, in this case, will never face un-
known activities.
3.2.2 Results
The results are shown in ﬁgure 5 and 6. Figure 5 shows
the variation of the number of nodes of the simpliﬁed state
machine as a function of the microclustering and macro-
clustering thresholds. As it is possible to see, the shape in
ﬁgure 5 is quite regular and, as expected, leads to the high-
est number of nodes in the following two cases:
• W=0, meaning that every sequence belongs to a differ-
ent macrocluster
• w=0, meaning that for every macrocluster, every se-
quence is assigned to a different microcluster
• Microclustering threshold (w): this threshold controls
the way microclustering behaves, deﬁning the fre-
quency of the value of a region that should lead to the
It is clear that in those two cases the number of nodes cannot
be reduced by Region Analysis. The highest simpliﬁcation
will correspond to the point in which w=1 and W=1, since
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
7
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
A.
C.
 0
 0.2
 0.4
 0.6
 0.8
micro (w)
 0
 0.2
 0.4
 0.6
 0.8
B.
D.
macro (W)
macro (W)
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0
 0.2
 0.4
 0.6
 0.8
micro (w)
 0
 0.2
 0.4
 0.6
 0.8
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
macro (W)
macro (W)
micro (w)
micro (w)
Figure 6. Score for some sequences
in that case sequences are grouped into big macroclusters,
and microclustering effect is null.
Figure 6 represents the behavior of the similarity score
for four different sequences as a function of the microclus-
tering and macroclustering thresholds. The similarity score
is an index of the pairwise similarity between the sequences
generated by the emulated server and those generated by the
real one. Lighter colors correspond to higher scores, darker
colors to lower ones. It needs a bit more interpretation since
the results are not straightforward.
Diagrams A and B correspond to two sequences behav-
ing in the expected way, with a similarity score which fol-
lows the amount of simpliﬁcation. Going towards the point
(1,1) the score degrades: it is interesting to see that the score
does not decrease gradually as the number of nodes of the
state machine, but one can observe abrupt changes for some
distinct values of W and/or w. This can be explained with
the execution of a new collapse in the simpliﬁcation algo-
rithm on the state machine path followed by the sequence,
that leads to putting into the same cluster transitions that
belong to different functional parts.
Diagrams C and D show two sequences having a more
peculiar behavior: with big macroclusters, average values
for the microclustering threshold lead to worse values than
when microclustering is disabled (w=1). This means that
microclustering can lead in some situations to incorrect re-
sults, worse than the results it would be possible to obtain
by disabling it. A possible explanation for this phenomenon
can be found by thinking back to the interaction between
microclustering and multiple alignment. Multiple align-
ment’s objective is to maximize the similarities between the
bytes of the different sequences by inserting gaps in order
to align them. In a certain way, multiple alignment’s ﬁnal
objective is to maximize the impact of microclustering by
focusing exactly on those similarities and by assigning a se-
mantic value to them. This approach is theoretically good,
assuming a set of samples of inﬁnite size. Indeed, in that
case, mutating regions, without any semantic value, will be
interpreted as such and correctly handled by microcluster-
ing. If the set of samples has ﬁnite size, Region Analysis
and more speciﬁcally microclustering are not able to dis-
tinguish between occasional similarities between bytes and
similarities due to a real semantic value of that speciﬁc pro-
tocol region. In the testbed the tcpdump sample is kept as
small as possible for simplicity and for computational rea-
sons, and so this can lead to insufﬁcient sample data for
microclustering to work correctly.
4 Experimental validation
The most interesting question that was left unanswered
so far is if the quality of the ScriptGen-based honeypots is
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
8
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
good enough to fool attack tools in exchanging with them