title:Precise Android API Protection Mapping Derivation and Reasoning
author:Yousra Aafer and
Guanhong Tao and
Jianjun Huang and
Xiangyu Zhang and
Ninghui Li
Precise Android API Protection Mapping
Derivation and Reasoning
Yousra Aafer
Purdue University
PI:EMAIL
Guanhong Tao
Purdue University
PI:EMAIL
Jianjun Huang
Renmin University of China
PI:EMAIL
Xiangyu Zhang
Purdue University
PI:EMAIL
Ninghui Li
Purdue University
PI:EMAIL
ABSTRACT
The Android research community has long focused on building
an Android API permission specification, which can be leveraged
by app developers to determine the optimum set of permissions
necessary for a correct and safe execution of their app. However,
while prominent existing efforts provide a good approximation of
the permission specification, they suffer from a few shortcomings.
Dynamic approaches cannot generate complete results, although
accurate for the particular execution. In contrast, static approaches
provide better coverage, but produce imprecise mappings due to
their lack of path-sensitivity. In fact, in light of Android’s access
control complexity, the approximations hardly abstract the actual
co-relations between enforced protections. To address this, we pro-
pose to precisely derive Android protection specification in a path-
sensitive fashion, using a novel graph abstraction technique. We
further showcase how we can apply the generated maps to tackle
security issues through logical satisfiability reasoning. Our con-
structed maps for 4 Android Open Source Project (AOSP) images
highlight the significance of our approach, as ∼41% of APIs’ protec-
tions cannot be correctly modeled without our technique.
CCS CONCEPTS
• Security and privacy → Mobile platform security;
KEYWORDS
Access Control; Permission Model; Android
ACM Reference Format:
Yousra Aafer, Guanhong Tao, Jianjun Huang, Xiangyu Zhang, and Ninghui
Li. 2018. Precise Android API Protection Mapping Derivation and Reasoning.
In 2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3243734.3243842
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243842
1 INTRODUCTION
One keystone of the Android’s access control model is permis-
sions, which an app must request to access sensitive resources in
the framework. The code that implements a security or privacy
relevant API would enforce corresponding permissions. That is,
the code would check whether the calling app has the required
permissions, and throw an exception if the app does not. When
developing an app, developers need to know what permissions
are required by the API calls that are used in the app, and request
these permissions. Doing so requires an accurate specification of
API to permission mapping. However, in light of the framework’s
codebase size and access control complexity, it is challenging to de-
mystify the permission specification of the Android APIs. This has
naturally led developers to make mistakes causing various security
problems such as component hijacking [25, 37, 39] and permission
over-privilege [11, 37]. To address these issues, the research com-
munity has long focused on developing methods that can create
a permission map for the Android framework APIs. This permis-
sion map, mostly incomplete in the official Android documentation,
can be used by app developers to determine the optimum set of
permissions necessary for a correct and safe execution of their app.
Prominent efforts of providing permission maps include Stow-
away [11], PScout [6] and more recently Axplorer [7]. Stowawy
used feedback-directed API fuzzing and unit testing to observe
the required permissions of framework API calls. PScout statically
performed reachability analysis between API calls and permission
checks to produce a specification that lists the permissions required
by each Android API. Axplorer built on top of new insights to
address important challenges of statically analyzing the Android
framework and retrieved a more precise permission map compared
to the previous approaches. The generated permission maps have
been a valuable input to address various Android security prob-
lems. First, the map can be used to study whether an app follows
the principle of least privilege, that is, the app is not requesting
more permissions than it actually needs. Permission over-privilege
can increase the impact of a bug/vulnerability found in the target
app. Second, the permission map can be used to detect component
hijacking where a malicious app gains access to a security-sensitive
resource without holding the corresponding permission and thus
escalates its privilege.
Clearly, the quality of the generated permission maps can greatly
influence the detection results. In fact, while the existing approaches
provide effective approximations for API permission specifications,
they suffer from a number of shortcomings. Although accurate for a
particular execution, dynamic approaches do not achieve complete
code coverage, and hence generate incomplete mappings. Besides,
this approach involves extensive manual efforts in generating valid
inputs. The static approaches do not have the coverage problem,
but they have the following limitations.
First, due to their lack of path-sensitive analysis, existing static
analyses assume that all permissions ever identified for a particular
API are indeed required. However, this assumption is not necessarily
correct and may lead to inaccurate mappings. Particularly, the
existence of one or more permission enforcements in an API’s
implementation does not imply they are unconditionally required.
Often, the permissions checks are disjoint rather than conjoint, i.e.,
if a specific condition holds, permission A is enforced, otherwise,
permission B is enforced.
Furthermore, existing static approaches overlook an important
aspect of Android access control. The permission enforcements are
often conducted together with other security features: UID checks
and User checks. On one hand, UID privilege checks are leveraged
to verify if the caller is privileged enough or entitled to perform an
operation without holding a permission. On the other hand, User
checks are pertinent to the multi-user feature and aim to enforce
privilege separation between multiple users sharing an Android
device.
In this work, we propose to derive a precise protection speci-
fication for Android APIs. Our proposed solution, called Arcade,
constructs the map in a path-sensitive fashion. Specifically, it first
builds a control flow graph starting from each public Android API.
Since the CFG includes information that is not pertinent to access
control, it transforms the CFG into an Access-control Flow Graph
(AFG) that abstracts all security checks along with the conditions
that determine which checks ought to be performed, and in the
meantime respects the original control flow. It then processes the
constructed AFG to extract the access control conditions enforced
by the API and their correlations (e.g., conjunction and disjunction),
which can be concisely represented as a first-order logic formula,
We further leverage our generated mapping to tackle the widely
studied overprivilege and component hijacking issues. Since our
map is presented in the form of a first-order logic formula, it is
not straightforward to use it for this purpose. To this end, we
propose to translate the detection problems into a logical reasoning
problem. To detect permission overprivilege, we conduct logical
satisfiability reasoning to extract the least privileged permission(s)
the app needs to hold, given its invoked APIs and related contextual
information (e.g., parameter values). We then compare this set
with the requested permissions. Similarly, to detect component
hijacking, we test whether the enforced protection configuration
of a component satisfies our generated map for the invoked APIs.
We have used Arcade to derive protection maps for 4 Android
AOSP codebases. A breakdown of the maps reveals that ∼41% of
APIs apply conditional protection checks, thus highlighting the
significance of our approach. Furthermore, we have employed our
maps to detect permission overprivilege and component hijacking.
Compared with other approaches that rely on the permission maps
produced by Axplorer (considered to be best performing), we
are able to detect on average 43% more unneeded permissions
and reduce false alarms in detecting component hijacking by 11
components on average (per image).
Contributions. We make the following contributions:
• We derive a precise protection specification for Android APIs,
using path-sensitive analysis and a novel graph abstraction
technique.
• We propose a logical reasoning based solution that leverages
our map to detect permission overprivileges and component
hijacking.
To allow other researchers to benefit from our work, we pub-
lish Arcade’s generated protection maps at https://arcade-android.
github.io/arcade
2 MOTIVATION
In this section, we explain the limitations of existing static analyses
based permission map generation techniques and motivate our
method.
2.1 Permissions as a Set Are Imprecise
Existing approaches construct the permission specification for a
given framework API through identifying permission checks in
the implementation of the API. The extracted set of permissions,
which might occur on different program paths, are all treated as
required by the API. In other words, all the identified permissions
are treated as having an AND relation, which might not reflect the
actual requirement. In fact, these permissions are often not a simple
conjunction. They may have other relations such as OR, dictated by
the various program paths. As a result, an app invoking the analyzed
API might not require the full set of extracted permissions.
To illustrate how path-insensitivity could lead to inaccurate per-
mission mapping, consider the following motivating example in Fig-
ure 1. The code snippet depicts an extract of the access control im-
plementation of the public API listen in the TelephonyRegistry
service, retrieved from the AOSP codebase (API level 25).
...
if ((events & LISTEN_CELL_LOCATION) != 0)
1 public void listen(.., PhoneStateListener listener, int events) {
2
3
4
5
6
if(checkCallingPermission(READ_PRIVILEGED_PHONE_STATE) !=
enforceCallingPermission(ACCESS_COARSE_LOCATION) ;
if ((events & LISTEN_DATA_CONNECTION_STATE) != 0)
PERMISSION_GRANTED)
enforceCallingPermission(READ_PHONE_STATE) ;
if ((events & LISTEN_PRECISE_CALL_STATE) != 0)
enforceCallingPermission(READ_PRECISE_PHONE_STATE) ;
if ((events & LISTEN_OEM_HOOK_RAW_EVENT) != 0)
enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE) ;
if ...
// do the actual work ...
7
8
9
10
11
12
13
14 }
Figure 1: Motivating Example for Path-Sensitivity
As illustrated, listen allows registering a listener object to re-
ceive notifications of changes in desired telephony states, specified
by the input events. Depending on the supplied events value(s), the
API enforces different permission checks. An app that wishes to
invoke the API should request a subset of the enforced permis-
sions depending on the supplied events value. For example, if events
= 00010000 (where the bit represents LISTEN_CELL_ LOCATION
state), then the calling app needs the permission ACCESS_COARSE_
LOCATION (lines 3-4 in Figure 1). Similarly, if events = 10010000, i.e.,
it includes the two states (LISTEN_CELL_LOCATION | LISTEN_DATA_
CONNECTION_STATE), then two permissions are required.
Further complicating the situation is the conditional permis-
sion enforcement applied in lines 5 to 7. If one of the bits in events
matches LISTEN_DATA_CONNECTION_STATE, either permission READ
_PRIVILEGED_PHONE_STATE or READ_PHONE _STATE is sufficient.
As such, the precise permission mapping for the API listen(..,
int events) is represented by a first-order logic formula shown
in Figure 2, where ACCESS_COARSE is a shorthand for Android
permission ACCESS_COARSE_LOCATION, READ_PRIV for permission
READ_ PRIVILEGED_PHONE_STATE and READ_PHON for permission
READ_ PHONE_STATE , CELL for the telephony event LISTEN_CELL_
LOCATION and DATA for the event LISTEN_DATA_CONNECTION_STATE.
Please note that we only present the permission mapping for lines
3-7 in Figure 1 for simplicity.
event = 00010000
event = 10000000
{(events&CELL (cid:44) 0) ∧ ¬(events&DAT A (cid:44) 0)
∧Perm = ACCESS_COARSE}
∨
{¬(events&CELL (cid:44) 0) ∧ (events&DAT A (cid:44) 0)∧
(Perm = READ_P RIV ∨ Perm = READ_P HO N)}
∨
{(events&CELL (cid:44) 0) ∧ (events&DAT A (cid:44) 0)
∧Perm = ACCESS_COARSE_∧
(Perm = READ_P RIV ∨ Perm = READ_P HO N)}
∨...
event = 10010000
Figure 2: First-order Logic Representation of Permission
Map for Listen(..); boxes and tags are to facilitate under-
standing
Now, let us consider the permission map for this API provided
by Axplorer [7] 1:
TelephonyRegistry.listen(...)::
[ ACCESS_COARSE_LOCATION, READ_PHONE_STATE ,
READ_PRECISE_PHONE_STATE , READ_PRIVILEGED_PHONE_STATE].
Basically, Axplorer’s map states that the API requires all these
permissions, which is imprecise, leading to the following problems:
Wrong Specifications to Developers. The official site for An-
droid developers [35] provides the Android SDK and documentation
for app developers. However, its permission related information
is incomplete [11]. Under these limitations, developers resort to
other efforts devoted to building a more precise permission map-
ping. However, the lack of accurate mapping (e.g., providing a set
of permissions while only a subset is needed) may cause developer
confusion. Consequently, in an attempt to make their application
work, they will add many unneeded permissions, leading to per-
mission overprivilege.
False Positives in Detecting Component Hijacking. To vet
apps for component hijacking, state-of-art approaches first identify
sensitive resources reachable by an Android component. Once such
resources are found, the solutions compare the corresponding per-
missions (based on the map) to the security protection enforced at
the level of the component’s declaration. The detection results can
be influenced by the existing protection map. Under this scenario,
1retrieved from https://github.com/reddr/axplorer/blob/master/ permissions/api-
25/framework-map-25.txt
treating an OR as an AND relationship can trigger false alarms.
Consider the following app code snippet:
1 public class EmailService extends Service {
2
3
4
5
mBinder = new IRemoteService.Stub() {
// exposed servie method
public string getUniqueId{
return mTelephonyManager.getImei();
1 
Figure 3: False Alarms in Component Hijacking
The above app component EmailService exposes a method
getUniqueId, which retrieves the device’s Imei through invok-
ing the framework API TelephonyManager.getImei. Based on
a mapping generated without path-sensitive analysis, the above
component is not correctly protected, as the mapping wrongly con-
cludes that for getImei, two permissions are needed: READ_PRIVI
LEGED_PHONE_STATE and READ_PHONE_STATE. However, a path- sen-
sitive analysis (on the implementation of getImei, which is omitted
here for brevity) reveals that either one is sufficient, thus, the above
component is actually safe. Our experiment reveals that, using the
existing permission maps, on average 11 instances of component
hijacking are false alarms (per image).
2.2 Additional Access Control Dimension
In addition to (explicit) Android permissions, Android frameworks
also have other access control mechanisms, including UID checks
and User checks. Existing permission map generation approaches
do not account for these additional checks, which may lead to both
false positives and false negatives in security analysis.
if (Binder.getCallingUid() != uid)
1 public void setUidCleartextNetworkPolicy(int uid, int policy) {
2
3
4
5 }
enforceCallingOrSelfPermission(CONNECTIVITY_INTERNAL) ;
// do the actual work ...
Figure 4: Motivating Example For UID checks
UID Checks. UID checks can affect API permission requirements
in two ways. First, some specific UIDs are treated as privileged
such that apps with those UIDs can access certain APIs without the
need to hold corresponding permissions. Second, when the calling
UID is the same as the UID of the process affected by the API call,
then certain permission requirements are waived. The above code
snippet extracted from the NetworkManagementService is an ex-
ample of the latter case. It denotes a disjunction of two checks: if
the caller attempts to invoke setUidCleartextNetworkPolicy on
a UID that does not match his own, it needs to hold the permis-
sion CONNECTIVITY_INTERNAL. The permission map by Axplorer