### Hooking File Objects

When hooking the dispatch function, it is essential to set the original device object used within our hooked dispatch simultaneously with the `DeviceObject` member of the file object. This can be achieved by performing an interlocked exchange between the original device object and the one used by our hook.

**Steps in Our Dispatch Hook:**
1. **Check if the MajorFunction is being called.**
   - If so, call the hook function, passing the original device object and the original dispatch function for that `MajorFunction`.
2. **Restore the original DeviceObject when the MajorFunction is `IRP_MJ_CLEANUP`.**

**Detection Vectors and Usability:**
- **Memory Artifacts:** How many detection vectors are you potentially exposed to?
- **Usability:** The functions we use are at least semi-documented and unlikely to change significantly.
- **Detection Cost:** Expensive. An anti-virus would need to replicate our hooking process and enumerate file objects to determine if the device/driver object was swapped.

### Abusing the Network

Using the file object hook, we can intercept IRPs to the Afd driver, allowing us to:
- Intercept all user-mode networking traffic.
- Send and receive our own data over any socket.

**Plan for Network Communication:**
1. Hook network communication, similar to tools like Wireshark.
2. Place a special indicator in "malicious" packets, a "magic" constant.
3. Send these "malicious" packets to legitimate ports on the victim machine.
4. Search packets for this "magic" constant to pass on data to our malware.

**Retrieving Packet Content:**
- For receive operations, an IOCTL with the code `IOCTL_AFD_RECV` is sent to the Afd driver. The structure sent in the input buffer is as follows:

```c
typedef struct _AFD_RECV_INFO {
    PAFD_WSABUF BufferArray;
    ULONG BufferCount;
    ULONG AfdFlags;
    ULONG TdiFlags;
} AFD_RECV_INFO, *PAFD_RECV_INFO;

typedef struct _AFD_WSABUF {
    UINT len;
    PCHAR buf;
} AFD_WSABUF, *PAFD_WSABUF;
```

### Spectre Rootkit Packet Structure

- **Prepended Data**
- **Magic Constant**
- **Base Packet Structure**
- **Optional Custom Structure**
- **Appended Data**

**Packet Handling:**
- **PingPacketHandler:** Determines if a machine/port is infected. The incoming packet has no actual data, other than indicating its type is a Ping. The handler responds with an empty base packet with the type set to Ping.
- **XorPacketHandler:** Takes an `XOR_PACKET` structure, which does not perform a malicious operation but acts as an encapsulating packet. When the `XorPacketHandler` receives a packet, it:
  1. Uses the `XorKey` to deobfuscate the `XorContent`.
  2. Recursively dispatches the `XorContent` as a new packet.

**Executing Commands:**
- **User-mode Context:** Understand how to execute commands from a user-mode context.
- **Kernel-mode Context:**
  1. Create pipes using `CreatePipe` to obtain output.
  2. Use `ZwCreateUserProcess` to create the process, setting the `PsAttributeImageName` attribute to specify the image file name.
  3. Fill out an `RTL_USER_PROCESS_PARAMETERS` structure, setting window flags, output handles, current directory, command line arguments, process image path, and default desktop name.
  4. Call `ZwCreateUserProcess` to start the process.
  5. After the process exits, call `ZwReadFile` to read the output from the unnamed pipe.

### Hiding a Rootkit

**Mini-Filter Drivers:**
- Mini-filters allow you to attach to volumes and intercept certain file I/O by registering with the Filter Manager driver.
- **Use Case:** Mask the presence of the rootkit on the filesystem by redirecting file access for a specific file to another file, such as redirecting access to our driver file to a legitimate driver.

**Choosing a Method:**
- **Questions to Ask:**
  - How many detection vectors are you potentially exposed to?
  - How "usable" is the method?
  - How expensive would it be to detect the method?

**Becoming a Mini-Filter:**
- **Minimum Requirements:**
  1. Create `[ServiceKey]\Instances`.
  2. Create `[ServiceKey]\Instances\[An instance name]`.
  3. In `[ServiceKey]\Instances`, add a “DefaultInstance” and set it to your instance name.
  4. In `[ServiceKey]\Instances\[An instance name]`, add the “Altitude” and “Flags” values.

**Hooking a Mini-Filter:**
- **Code Hook:** Perform a jmp hook, but with drawbacks similar to those seen in intercepting IRPs.
- **DKOM (Direct Kernel Object Manipulation):** Enumerate filters and instances through documented APIs like `FltEnumerateFilters` and `FltEnumerateInstances`. The function called for a certain operation is specified in the `CallbackNodes` array in the `FLT_INSTANCE` structure.

**Example:**
- Protect a certain file by redirecting access to it.

### Wrap Up

**Thanks to:**
- **Alex Ionescu (@aionescu):** Long-time mentor very experienced with Windows Internals.
- **ReactOS:** A fantastic reference for undocumented functions and structures.
- **Nemanja Mulasmajic (@0xNemi) and Vlad Ionescu (@ucsenoi):** Helped review this presentation.

**Contact / Questions:**
- Twitter: @BillDemirkapi
- Blog: https://billdemirkapi.me
- Spectre Rootkit: https://github.com/D4stiny/spectre

Thank you for attending! Feel free to ask any questions.