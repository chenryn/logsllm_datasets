the original device object we use inside of our hooked dispatch must be 
set at the same time we the DeviceObject member of the file object.
To do this, simply perform an interlocked exchange of the original 
device object and the device object our hook uses.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
37
Hooking File Objects
Now that we’ve hooked the file object, there is not much work left.
In our dispatch hook, we need to…
1. Check if we are hooking the MajorFunction being called.
1.
If we are, call the hook function passing the original device object and 
original dispatch function for that MajorFunction.
2. Make sure to restore the original DeviceObject when the 
MajorFunction is IRP_MJ_CLEANUP.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
38
Hooking File Objects
 How many detection vectors are you potentially exposed to?
 Memory artifacts.
 How “usable” is the method?
 Most of the functions we use are at least semi-documented and unlikely to 
change significantly.
 How expensive would it be to detect the method?
 Expensive, an anti-virus would have to replicate our hooking process and 
enumerate file objects to determine if the device/driver object was swapped.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
39
How the Spectre Rootkit Abuses the 
User-Mode Network Stack
Demystifying Modern Windows Rootkits – Black Hat USA 2020
40
Abusing the Network
Using the File Object hook, we can now intercept Irps to the Afd driver.
This allows us to…
 Intercept all user-mode networking traffic.
 Send and receive our own data over any socket.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
41
Abusing the Network
To review, our existing plan is to…
 Hook network communication, similar to tools like Wireshark.
 Place a special indicator in “malicious” packets, a “magic” constant.
 Send these “malicious” packets to legitimate ports on the victim 
machine.
 Search packets for this “magic” constant to pass on data to our 
malware.
How can we actually retrieve the content of packets that are received?
Demystifying Modern Windows Rootkits – Black Hat USA 2020
42
Abusing the Network
For receive operations, an IOCTL with the code IOCTL_AFD_RECV is 
sent to the Afd driver. Here is the structure sent in the input buffer.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
43
typedef struct
_AFD_RECV_INFO {
PAFD_WSABUF BufferArray;
ULONG BufferCount;
ULONG AfdFlags;
ULONG TdiFlags;
} AFD_RECV_INFO, * PAFD_RECV_INFO;
typedef struct _AFD_WSABUF {
UINT len;
PCHAR buf;
} AFD_WSABUF, * PAFD_WSABUF;
Parsing Packets: Design
Let’s talk about how the Spectre Rootkit was designed.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
44
Spectre Rootkit Packet Structure
Any prepended data
Magic Constant
Base Packet Structure
Optional Custom Structure
Any appended data
Parsing Packets: Pre-Processing
Here is the process used when the Spectre Rootkit receives a packet.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
45
Parsing Packets: Processing
Demystifying Modern Windows Rootkits – Black Hat USA 2020
46
Before dispatching a packet, we need to create a complete packet.
Packet Handlers
Before we go any further, let’s talk about the concept of “Packet 
Handlers” in the Spectre Rootkit.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
47
Packet Handlers
An example of a packet handler included with the Spectre Rootkit is the 
PingPacketHandler. This handler is used to determine if a 
machine/port is infected.
The incoming packet has no actual data, other than indicating its Type
is a Ping. The handler responds to the client with an empty base 
packet with the Type set to Ping.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
48
Parsing Packets: Dispatching
Once a packet is completely populated, the “packet dispatcher” will…
Here’s why the “packet dispatcher” is awesome: by passing a pointer to 
itself to the relevant packet handler, that packet handler can recursively 
dispatch a new packet!
Demystifying Modern Windows Rootkits – Black Hat USA 2020
49
Packet Handlers: XorPacketHandler
The best way to explain the recursive nature of the “packet dispatcher” 
is through an example, such as the XorPacketHandler.
The XorPacketHandler takes a XOR_PACKET structure:
This XOR_PACKET does not actually perform a malicious operation. 
Instead, it acts as an encapsulating packet.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
50
Packet Handlers: XorPacketHandler
When the XorPacketHandler receives a packet, it will…
1. Use the XorKey to deobfuscate the XorContent.
2. Recursively dispatch the XorContent as a new packet.
The model that the Spectre Rootkit uses allows you to create infinite 
layers of encapsulation.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
51
Executing Commands
Let’s take a look at how we can execute commands from our rootkit, a 
common feature seen in a variety of Windows malware.
Before we get into starting a process from a kernel driver, it’s important 
to understand how we would execute commands from a user-mode 
context.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
52
Executing Commands: User-mode
Demystifying Modern Windows Rootkits – Black Hat USA 2020
53
Executing Commands: Kernel-mode
Let’s start by creating the pipes we need to obtain output.
Here is what CreatePipe does in the background…
Demystifying Modern Windows Rootkits – Black Hat USA 2020
54
Executing Commands: Kernel-mode
Now that we have pipes, we need to create the actual process. We’ll 
use ZwCreateUserProcess because that’s what kernelbase.dll
uses itself to create processes.
Let's start with the attribute list for the process.
 The most important attribute we have to set is 
PsAttributeImageName. This will specify the image file name for 
the new process.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
55
Executing Commands: Kernel-mode
Next, we have to fill out a RTL_USER_PROCESS_PARAMETERS
structure for the process.
In this structure, we need to set…
1. The window flags and the output handles to our pipes.
2. The current directory, the command line arguments, the process 
image path, and the default desktop name.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
56
Executing Commands: Kernel-mode
From there, all it takes is a call to ZwCreateUserProcess to start the 
process.
Once the process has exited, similar to what we do in user-mode, we 
can call ZwReadFile to read the output from the unnamed pipe.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
57
Hiding a Rootkit
Demystifying Modern Windows Rootkits – Black Hat USA 2020
58
Introduction to Mini-Filters
Mini-filter drivers allow you to attach to volumes and intercept certain 
file I/O. This is performed by registering with the Filter Manager driver.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
59
Source: Microsoft Docs
Introduction to Mini-Filters
Mini-filters can be useful to mask the presence of our rootkit on the 
filesystem.
For example, a mini-filter can direct all file access for a certain file to 
another file. We can use this functionality to redirect access to our 
driver file to another legitimate driver.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
60
Picking a method
To pick the best method of hooking, here are a few common questions 
you should ask.
 How many detection vectors are you potentially exposed to?
 How "usable" is the method?
 How expensive would it be to detect the method?
Demystifying Modern Windows Rootkits – Black Hat USA 2020
61
Become a Mini-Filter
The easiest way to abuse the functionality of a mini-filter is to become 
one yourself. Here are the minimum requirements for 
FltRegisterFilter:
1. Create [ServiceKey]\Instances
2. Create [ServiceKey]\Instances\[An instance name]
3. In [ServiceKey]\Instances add a “DefaultInstance” and set it to your 
instance name used in step 2.
4. In [ServiceKey]\Instances\[An instance name], add the “Altitude” 
and “Flags” values.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
62
Become a Mini-Filter
 How many detection vectors are you potentially exposed to?
 Registry and memory artifacts.
 How “usable” is the method?
 No concerns from stability or usability, this is how other legitimate drivers 
register as mini-filters.
 How expensive would it be to detect the method?
 Inexpensive. Besides the registry artifacts, drivers that are registered as mini-
filters can easily be enumerated through API such as 
FltEnumerateFilters.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
63
Hook a Mini-Filter
Another method is to simply hook an existing mini-filter. There are a 
couple of routes you could take.
 Code hook the callback for an existing filter.
 Overwrite the FLT_REGISTRATION structure before the victim driver 
uses it to have your own callback.
 DKOM an existing filter instance and replace the original callback with 
yours.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
64
Hook a Mini-Filter: Code Hook
One of the easiest way to intercept callbacks to an existing mini-filter is 
to simply perform a code hook.
This can be as simple as a jmp hook, but it comes with quite a few 
drawbacks, similar to those we saw in an earlier section where we 
discussed intercepting Irps.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
65
Hook a Mini-Filter: Code Hook
 How many detection vectors are you potentially exposed to?
 Memory artifacts.
 How “usable” is the method?
 Unless the function is exported, you will need to find the function yourself.
 Not all drivers are compatible with this method due to PatchGuard.
 HVCI incompatible.
 How expensive would it be to detect the method?
 Potentially inexpensive and several methods to detect hooking.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
66
Hook a Mini-Filter: DKOM
A semi-documented method of hooking an existing mini-filter is 
through DKOM.
You can enumerate filters and instances through the documented APIs 
FltEnumerateFilters and FltEnumerateInstances.
The function that gets called for a certain operation is specified in the 
CallbackNodes array in the FLT_INSTANCE structure.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
67
Hook a Mini-Filter: DKOM
 The CallbackNodes array index is associated with the major 
function you’re hooking.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
68
Hook a Mini-Filter: DKOM
 How many detection vectors are you potentially exposed to?
 Memory artifacts.
 How “usable” is the method?
 For stability, although obtaining a FLT_INSTANCE structure is documented, 
the FLT_INSTANCE structure itself is undocumented.
 How expensive would it be to detect the method?
 Inexpensive, an anti-virus would need to occasionally enumerate registered 
filters and their instances for hooks in the CallbackNodes array.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
69
Example: Abusing a Mini-Filter
Let’s say you want to protect a certain file, what’s an example of 
redirecting access to it?
Demystifying Modern Windows Rootkits – Black Hat USA 2020
70
Wrap Up
Demystifying Modern Windows Rootkits – Black Hat USA 2020
71
Thanks to...
Alex Ionescu (@aionescu)
 Long-time mentor very experienced with Windows Internals.
ReactOS
 A fantastic reference for undocumented functions and structures.
Nemanja Mulasmajic (@0xNemi) and Vlad Ionescu (@ucsenoi)
 Helped review this presentation.
Demystifying Modern Windows Rootkits – Black Hat USA 2020
72
Contact / Questions
Thanks for sticking around! Now is the time for any questions.
Twitter
@BillDemirkapi
Blog
https://billdemirkapi.me
Spectre Rootkit
https://github.com/D4stiny/spectre
Demystifying Modern Windows Rootkits – Black Hat USA 2020
73