protected, then SSO credentials, such as the access token,
authorization code and user proﬁle, could be eavesdropped
in transit.
Transmitting SSO credentials between the browser and
RP server could also make RPs vulnerable to impersonation
and session swapping attacks if the authenticity of SSO cre-
dential is not or cannot be guaranteed by the RP website.
OAuth SSO systems are based on browser redirections in
which the authorization request and response are passed
between the RP and IdP through the browser. This in-
direct communication allows the user to be involved in the
protocol, but it also provides an opportunity for an adver-
sary to launch attacks against the RP from his or victim’s
browser. As the exploits are launched from the end-point
of an SSL channel, impersonation and session swapping at-
tacks are still feasible even when both browser-to-RP and
browser-to-IdP communications are SSL-protected. In ad-
dition, we found some client-ﬂow RPs use the access token
obtained on the browser to retrieve the user’s proﬁle through
graph APIs, and then pass the proﬁle as an SSO credential
385% Vul.
Permissions
66
71
1. email
42
2. user birthday
44
3. publish stream 39
36
31
35
4. oﬄine access
5. user location
27
25
Permissions
6. basic info
7. user likes
8. publish actions
9. user interests
10. user photos
% Vul.
20
20
8
10
9
9
5
8
7
7
Table 4: Top 10 permissions requested by RPs. Column
“Vul” denotes the percentages of RPs that request the per-
mission and are vulnerable to token theft (i.e., A1 or A2
attacks.)
cookie; and the library on the RP login page polls the change
of this cookie every 300 milliseconds to obtain the access to-
ken. Using cookies for cross-frame interactions avoids the
security threats present in CDC channels. However, HTTP
cookies could be eavesdropped in transit or stolen by mali-
cious cross-site scripts.
Google SDK implements a wide range of CDC mecha-
nisms for cross-browser support and performance enhance-
ment. Those mechanisms include fragment identiﬁer mes-
saging, postMessage, Flash, Resizing Message Relay for We-
bKit based browsers (Safari, Chrome), Native IE XDC for
Internet Explorer browsers, and the FrameElement for Gecko
based browsers (Firefox). The SDK is separated into ﬁve
script ﬁles and consists of more than 8,000 lines of code.
Barth et al. [3] systematically analyze the security of postMes-
sage and fragment identiﬁer messaging, and Hanna et al. [20]
empirically examine two JavaScript libraries, Google Friend
Connect and Facebook Connect, that are layered on postMes-
sage API. Nevertheless, the lack of a thorough security anal-
ysis for the rest of CDC mechanisms might lead to severe
security compromises, which is an important research topic
requiring further investigation.
5.4 Security implications of stolen tokens
The scope and duration of an authorized access token
limit the malicious activities that could be carried out when
the token is stolen (e.g., email permission for spam, pub-
lish_stream for distributing phishing or malware messages).
Table 4 shows the top ten permissions requested by RPs.
Note that 35% of RPs request an oﬄine permission, which
allows an attacker to perform authorized API requests on
behalf of the victim at any time until the authorization is
explicitly revoked by the user. Interestingly, 60% of pub-
lish_stream and 45% of publish_actions permissions were
requested with an oﬄine permission.
Using compromised tokens to attack social graph could
be fruitful for adversaries, and hard to detect by IdPs. The
social graph within a social network is a powerful viral plat-
form for the distribution of information. According to the
designers of Facebook Immune System [40], attackers com-
monly target the social graph to harvest user data and prop-
agate spam, malware, and phishing messages. Known at-
tack vectors include compromising existing accounts, creat-
ing fake accounts for inﬁltrations, or through fraudulent ap-
plications. Compromised accounts are typically more valu-
able than fake accounts because they carry established trust;
and phishing and malware are two main ways to compromise
existing accounts. Yet, our work shows that the compro-
mised access tokens can used as another novel way to har-
vest user data and act on behalf of the victim user. Since
this kind of new attack makes use of legitimate web API
requests on behalf of the victim RP, we believe that it is
diﬃcult for an IdP to detect and block the attack, unless it
can be distinguished from a legitimate use of the same APIs.
5.5 Vulnerability Interplays
One vulnerability could lead to several diﬀerent exploits.
For example, a compromised token could be used to imper-
sonate the victim user on the RP, or harvest the victim’s
identity information on the IdP. In addition, it can be used
to inﬁltrate the victim’s social circles to trick other victims
into visiting the vulnerable RP, or bootstrapping a drive-by-
download exploit. Other possible exploits remain.
Interestingly, we found that, a session swapping or force-
login vulnerability could be used to overcome an attack con-
straint where an authenticated session with the RP is re-
quired before launching an XSS token theft attack. More-
over, for the RP in which user proﬁle (e.g., user name) is
not XSS protected, a session swapping or force-login attack
could be leveraged for token theft. To leverage session swap-
ping, the attacker ﬁrst appends a token theft script to the
user name of his account on the RP website. The attacker
then creates a malicious page that uses a hidden iframe or
img element to log the victim into the RP as the attacker,
and hence executes the exploit script when the attacker’s
name is rendered on the page. Our exploit succeeded on
6% of tested RPs. The exploit page could be customized
with attractive content, and delivered to the users through
spam emails, malvertisings [39], inﬂight content modiﬁca-
tions [49], or posting on popular websites. To take advantage
of a force-login vulnerability, the malicious page stealthily
logs the victim into the RP, appends a script to the user’s
name using CSRF attacks, and then redirects the victim to
a page on the RP where the user name is rendered (4%).
5.6 Visualization and analysis of results
We visualized our evaluation results to explore the cor-
relations between the rank of each tested RP and its vul-
nerabilities, requested permissions, and the use of SSL. The
visualization in Figure 4 provides an overall view of the dis-
tributions of these four related data items. In addition, it
allows us to reason about certain security properties of each
individual RP visually. For instance, the ﬁgure shows that
the highest ranked RP on the ﬁrst column was free from any
vulnerability, requested several extended permissions (i.e.,
offline, email, publish_streams), and used SSL on both
traditional and SSO login options. This seems to imply that
this RP’s designers were security-aware (i.e., used SSL) and
made it secure (i.e., no vulnerabilities), but the requested
permissions might raise users’ privacy concerns.
We found no correlation between the rank, vulnerability,
and permission. There was, however, a strong correlation
between the use of SSL on the sign-in endpoint and whether
the RP was resistant to the uncovered vulnerabilities. Com-
parison of the distribution of vulnerable websites (A1 to A5
respectively, and the total number of vulnerabilities) in the
bins of 100 revealed that there was no statistically signiﬁcant
diﬀerence (SSD) from uniform distribution (F-test, p=.56
to .99). Similarly, the request permissions were uniformly
distributed (p=.60 to .84), and there was no SSD between
the number of vulnerabilities found in RPs that used SSL
for traditional login page and those that did not. However,
our analysis found that for an RP that used SSL for SSO
login sessions, there were signiﬁcantly fewer chances (31%,
p=0.00) to be vulnerable to the discovered vulnerabilities,
386Figure 4: The distribution of the rank of each evaluated RP and its corresponding vulnerabilities (A1 to
A5), requested permissions (offline, email, publish_streams, publish_actions), and the use of SSL on tradition
login form (SSL T) and SSL session (SSL S).
Recommendations
for
On IdP
A1
A2
A3
On RP
A4
A5
Threats to User’s Data
C S C S C S C S C S
√
(cid:52) (cid:52)
(cid:52) (cid:52)
(cid:52)
√ √
(cid:52) (cid:52)
(cid:52) (cid:52)
Authorization ﬂow
Redirect URI
Token refresh
Authorization code
Token cookie
User consent
User authentication
Domain separation
SSL
Authenticity
(cid:52) (cid:52)
(cid:52) (cid:52)
√ √
(cid:52) (cid:52)
(cid:52) (cid:52) √ √ √ √
Table 5: Recommendations developed for client-ﬂow (C) or
server-ﬂow (S) RPs. Each cell indicates wether the suggested
recommendation oﬀers no (empty), partial ((cid:52)), or complete
√
(
) mitigation of the identiﬁed attacks (A1—A5).
in comparison with RPs that performed SSO without SSL
protection.
5.7 Limitations
Our work only examined high-proﬁle IdPs and the 96 RPs
in English that we found in the top 1,000 most-visited sites,
and hence the evaluation results might not be generaliz-
able to all IdPs and RPs. However, our statistical analysis
did not reveal any correlation between websites’ popular-
ity rankings and the discovered vulnerabilities. In addition,
due to the inherent limitations of the black-box analysis ap-
proach, we acknowledge that the list of uncovered vulnera-
bilities is not complete, and we believe that other potential
implementation ﬂaws and attack vectors do exist.
6. RECOMMENDATIONS
We suggest recommendations that not only allow to close
down discovered vulnerabilities but also meet the following
requirements:
• Backward compatibility: The protection mechanism
must be compatible with the existing OAuth protocol and
must not require modiﬁcations from the browsers.
• Gradual adoption: IdPs and RPs must be able to adopt
the proposed improvements gradually and separately, with-
out breaking their existing functional implementations.
• Simplicity: The countermeasure must not require cryp-
tographic operations (e.g., HMAC, public/private key en-
cryption) from RPs, because simplicity is the main feature
to make OAuth 2.0 gain widespread acceptance.
Table 5 illustrates the summary of our recommendations
as described below. The recommended improvements were
tested on sample IdP and RP that we have implemented.
6.1 Recommendations for IdPs
IdPs should provide secure-by-default options to reduce
attack surfaces, and include users in the loop to circumvent
request forgeries while improving their privacy perceptions:
• Explicit authorization ﬂow registration: IdPs should
provide a registration option for RPs to explicitly specify
which authorization ﬂow the RP support, and grant ac-
cess tokens only to the ﬂow indicated. This option alone
could completely protect server-ﬂow RPs (42%) from ac-
cess token theft via XSS attacks.
• Whitelist redirect URIs: Domain-based redirect URI
validation signiﬁcantly increases the RP attack surface. In
contrast, whitelisting of redirection endpoints allows RPs
to reduce the attack surface and dedicate their mitigation
eﬀorts to protect only the whitelisted URIs.
• Support token refresh mechanism: Without a stan-
dard token refresh mechanism (as described in Section 6
of the speciﬁcation) oﬀered by the IdP, RPs need to re-
quest an oﬄine permission in order to keep the access
token valid due to the short-lived nature of access tokens
(e.g., one hour). However, this practice violates the prin-
ciple of least privilege, and increases the chances for such
a request being disallowed by users. Another walk-around
solution is to use the “automatic authorization granting”
feature on the client-side to get a new access token period-
ically. However, this could make access tokens vulnerable
to network eavesdropping and XSS attacks.
• Enforce single-use of authorization code: 61% of
tested RPs use an authorization code as an SSO creden-
tial, but they are vulnerable to impersonation attacks,
partially because its single-use is not enforced by Face-
book. The rationale behind this practice is not docu-
mented, but we believe that, due to the lack of a token
refresh mechanism, the authorization code is intended for
RPs to exchange a valid access token when one expires.
387• Avoid saving access token to cookie: At the time
of writing, Microsoft’s SDK still stores access tokens into
cookies. We suggest other IdPs to follow Facebook’s im-
provement by using a signed authorization code and user
identiﬁer for the cookie in place of an access token.
• Explicit user consent: Automatic authorization grant-
ing should be oﬀered only to RPs that explicitly request
it during registration.
In addition to preventing token
theft, explicit user consent could also increase users’ pri-
vacy awareness, and their adoption intentions [43]. To
encourage the practice of the principle of least privilege
by RPs, IdPs could also prompt a user consent for every
authorization request originated from RPs that ask for ex-
tended permissions, such as offline or publish_actions.
• Explicit user authentication: Sun et al. [43] show that
many participants in their usability study of web SSO sys-
tems incorrectly thought that the RP knows their IdP lo-
gin credentials because the login popup window simply
blinked open and then closed when the participants had
already authenticated to their IdP in the same browser
session. The study also shows that prompting users to
authenticate with their IdP for every RP sign-in attempt
could provide users with a more adequate mental model,
and improve user’s security perception. Accordingly, RPs
should be able to specify an additional parameter in the
authorization request indicating whether an explicit user
authentication is required in order to enhance users’ trust
with the RP, and prevent force-login attacks. We acknowl-
edge, however, that the usability implications of this rec-
ommendation on users need to be proper evaluated.
Furthermore, we recommend IdPs to adopt a more secure
type of access token. The “OAuth Threat Model” intro-
duces two types of token: bearer token, which can be used
by any client who has received the token [23], and proof token
(e.g., MAC tokens [18]), which can only be used by a speciﬁc
client. We found that—probably for the sake of simplicity—
all examined IdPs oﬀer bearer tokens as the only option. As
proof tokens can prevent replay attacks when resource ac-
cess requests are eavesdropped, IdPs should provide proof
token as a choice for RPs. Furthermore, we suggest that
JavaScript SDK should support the use of an authorization
code as a response option so that server-ﬂow developers can
use the SDK as well.
6.2 Recommendations for RPs
Besides verifying signatures from the signed authorization
code cookie and the proxy service, and avoiding using the
user’s proﬁle received from the IdP on the client-side as an
SSO credential, RPs can further reduce the risks we’ve dis-
covered by practicing the following recommendations:
• SSO Domain separation: RPs should use a separate
HTTP domain for redirect URIs, in order to prevent at-
tacks that exploit token theft vulnerabilities potentially
present in the RP’s application pages. All endpoints within
this dedicated login domain should be protected with SSL,
and input values should be properly sanitized and vali-
dated to prevent XSS attacks.
• Conﬁdentiality of SSO credentials: For RPs that al-
ready have SSL in place, the SSL should be used to protect