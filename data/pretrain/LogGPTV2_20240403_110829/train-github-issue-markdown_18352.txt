Calling scipy.stats.hypergeom.pmf with a total of 0 Type I objects (and
therefore, having a maximal k value of 0), returns a NaN value instead of 1.0.
From the documentation :  
pmf(k, M, n, N) = choose(n, k) * choose(M - n, N - k) / choose(M, N),
Fixing k = n = 0, we have :  
pmf(0, M, 0, N) = choose(0, 0) * choose(M - 0, N - 0) / choose(M, N),  
= 1 * choose(M, N) / choose(M, N)  
= 1 * 1  
= 1