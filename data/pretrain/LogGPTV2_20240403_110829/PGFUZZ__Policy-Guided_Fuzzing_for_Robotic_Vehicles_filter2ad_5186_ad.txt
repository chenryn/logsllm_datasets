-1
-1
-1
-1
1
p2
-1
-1
-1
-1
-1
-1
p3
-1
-1
-1
-1
-1
-1
off
off
off
off
off
on
on
on
on
on
on
on
-
randomly selects an input from the identified Inputmin ( 4 ).
It chooses WIND_SPEED parameter and assigns a random value
(i.e., 5) to the parameter. When T=2, PGFUZZ calculates actual al-
titude based on the deviation between reference and current altitudes
from 6 . PGFUZZ predicts the actual altitude is 95 meters instead
of 93 meters ( 7 ), eliminating the noise. The mutation engine first
notices that the changed wind speed increases P4 but it decreases P5.
Then, it stores the input-value pair, i.e., (WIND_SPEED,5) which will
be used if the mutation engine randomly selects the WIND_SPEED
parameter again. The mutation engine randomly chooses a user com-
mand (i.e., releasing a parachute command). However, ArduPilot
does not deploy the parachute at T=3 because the current altitude
(i.e., 95 meters) is less than CHUTE_ALT_MIN which is 100 meters
as default. PGFUZZ increases the throttle value, increasing altitude
as the next input at T=3. At T=4, the global distance is the same as
the previous one. However, it increases the P4 propositional distance
due to the increased altitude. Therefore, the mutation engine also
stores the pair of input and value, i.e., (throttle,increase). It
first randomly selects the WIND_SPEED parameter again as the next
input, then, it assigns the stored value 5 to the parameter. At T=5,
PGFUZZ randomly selects releasing a parachute command as the
next input. At T=6, the policy violation checker ( 8 ) detects a
policy violation because the parachute is deployed while the vehicle
is climbing, which violates A.CHUTE1.
C. Bug Post-Processing
PGFUZZ conducts Bug Post-Processing to find the minimized
sequence of inputs that causes a policy violation. The minimized
sequence can be later used to analyze the violation’s root cause.
The Bug Post-Processing consists of the bug pool ( 9 in Figure 2)
and input minimization steps ( 10 in Figure 2).
The bug pool first stores the violated policy (policyV) with an
input sequence that causes the policy violation. The input sequence
consists of each pair of input and mutated value (inputi,valuei)
where inputi∈Inputmin. The input sequence includes all inputs
and values from the start of fuzzing a policy until finding a policy
violation. Therefore, it might contain some inputs which do not
contribute to the policy violation i.e., the same policy violation can
be triggered without executing some of the inputs. For example, the
input sequence {(mode=ACRO),(wind=5),(parachute=on)}
violates A.CHUTE1 policy5. However, (wind=5) does not
contribute to the policy violation.
Second, to find the inputs that contribute to the policy violation,
the input minimization step operates as follows: (1) It creates
a new process to execute a separate simulator. (2) It creates a
new input sequence by excluding an input (inputi) from the
original input sequence that caused the violation (input(1,...,n)). For
instance, it excludes (parachute=on) from the input sequence
{(mode=ACRO),(wind=5),(parachute=on)}. (3) It executes
5(cid:3){(Parachute=on)} → {(Armed = true) ∧ (Modet
(cid:54)=
FLIP/ACRO)∧(ALTt≤ALTt−1)∧(ALTt >CHUTE_ALT_MIN)}
(input(1,...,i−1,i+1,...,n),value(1,...,i−1,i+1,...,n)) on the simulator
(e.g., {(mode=ACRO),(wind=5)}). (4) If the new input sequence
does not lead to the same policy violation, PGFUZZ notices
that the pair of inputi and valuei is mandatory to violate the
policy. For example, the A.CHUTE1 policy cannot be violated
without (parachute=on). We repeat from step (2) to (4) until
the input minimization step finds a minimized input sequence
which still causes the same policy violation. Turning back to
the A.CHUTE1 policy example, the minimized input sequence is
{(mode=ACRO),(parachute=on)}.
Users can easily perform a root cause analysis based on
the minimized input sequence with a violated policy. For
instance, they can identify a missing flight mode check from
{(mode=ACRO),(parachute=on)}. We provide such examples
when we introduce the case studies in Section VII-C1.
VI.
IMPLEMENTATION
We evaluate PGFUZZ on the three most popular flight control
software, ArduPilot, PX4, and Paparazzi as target RV controllers.
Simulator Configuration. All of the three flight control software
use MAVLink [47] as their communication protocol between
the flight control software and Ground Control Stations (GCSs).
However, each flight control software implements the MAVLink
protocol differently. To deploy PGFUZZ on ArduPilot and PX4,
we choose Pymavlink v2.4.9 library [56] and PPRZLINK v2.0
library [51] for Paparazzi. Their libraries allow PGFUZZ to control
vehicles through MAVLink v2.0.
Static Analysis. We choose the Low Level Virtual Machine
(LLVM) 9.0.0 [45] to convert source code of the three flight control
software to bitcode, the intermediate representation (IR) of LLVM.
To obtain data flow graphs (DFG), we use a Static Value-Flow
Analysis tool [62]. We wrote 386 lines of code (LoC) in C to
collect all def-use chains of InputP and correlate each state and
InputP. To map names of variables on source code to names of
states on policies, we manually construct a variable name mapping
table (i.e., synonym table Figure 5) for each flight control software.
Dynamic Analysis. We write 586 LoC in Python using Pymavlink
APIs for ArduPilot. We modify 54 LoC to integrate it into PX4.
We also write 741 LoC in Python for PPRZLINK as Paparazzi
uses a different library than others.
Mutation Engine. We write a total 1,379 LoC in Python for
mutation engine, noise elimination, and policy checking. We
modify 94 LoC of 1,379 LoC for PX4 as they differently implement
MAVLink. We write 1,830 LoC for Paparazzi.
Bug Post-Processing. We use Pymavlink and PPRZLINK APIs to
implement the Bug Post-Processing component. We write 626 LoC
in Python for ArduPilot and PX4, and 794 LoC for Paparazzi.
VII. EVALUATION
We first evaluate how each component of PGFUZZ contributes
to the overall fuzzing effectiveness (Section VII-A). We then
9
268
333
57
209
176
51
1,140
579
82
After static
analysis filtering
After dynamic
analysis filtering
% of reduced
target input space
18.3 %
30.3 %
62.2 %
RV system # of InputP
ArduPilot
PX4
Paparazzi
TABLE III: Reduced fuzzing space for configuration parameters
(InputP).
RV system # of InputC
ArduPilot
PX4
Paparazzi
TABLE IV: Reduced fuzzing space for user commands (InputC)
and environmental factors (InputE).
After dynamic
analysis filtering
target input space
66.4 %
44.8 %
37.1 %
% of reduced
150
43
46
# InputE
168
30
8
58
66
116
(a) Changed altitude values.
(b) Changed yaw angles.
Fig. 7: The changed sensor values under LOITER flight mode with
environment factors.
evaluate PGFUZZ’s effectiveness in finding bugs in real flight
control software, ArduPilot, PX4, and Paparazzi (Section VII-B).
A. Component Evaluation
1) Profiling Engine Evaluation: Table III shows the fuzzing
space reduction generated by the Pre-Processing step, relative to
configuration parameters (InputP). The decreased fuzzing space
on ArduPilot, PX4, and Paparazzi is 18.3%, 30.3%, and 62.2%,
respectively. PGFUZZ achieves the highest reduction rate in
ArduPilot because ArduPilot includes 504 hardware configuration
parameters which are irrelevant for our analysis and 21 read only
parameters. On the other hand, it shows the lowest reduction rate
on Paparazzi because most of its 82 configuration parameters
related to attitude and altitude control algorithm (i.e., KP,Ki, and
Kd of the PID control algorithm Section II) have a direct effect
on the drone’s behavior. Table IV shows reduced fuzzing space
for user commands (InputC) and environmental factors (InputE).
The decreased fuzzing space on ArduPilot, PX4, and Paparazzi
is 66.4%, 44.8%, and 37.1%, respectively.
2) Noise Elimination: Figure 7 shows the results of the noise
elimination component ( 7 in Figure 2) on ArduPilot. We record
the sensor values every 10 ms and use 10 m/s wind speed, the
wind direction of 60 degrees Z-axis, 3 m/s2 acceleration noise,
and LOITER flight mode6. We configure the width of the moving
average window as 4 in the noise elimination component. As
shown in Figure 7, it filters out the changes in attitude due to the
noise and wind. The areas with a red background in the figure
indicate when the wind is enabled.
B. Framework Evaluation
To evaluate the effectiveness of PGFUZZ, we integrate it into
ArduPilot, PX4, and Paparazzi, to find safety and security policy
violations. Table V presents the software version and subject
6In LOITER mode, the flight control software automatically maintains the
current location, heading (i.e., yaw), and altitude.
10
RV system
ArduPilot
PX4
Paparazzi
Version
Subject Vehicle
4.0.3
1.9
5.16
Quadrotor
Simulator
APM SITL [9]
Gazebo [33]
JSBSim [18]
Gazebo
NPS [49]
Gazebo
ID
A.ALT_HOLD2
PP.HOVERZ
A.FLIP1
A.GPS.FS1
A.LOITER1
PX.HOLD1
PP.HOVERC
A.CHUTE1
A.RC.FS1
A.RC.FS2
ALIVE
PX.GPS.FS1
PX.GPS.FS2
TABLE V: Fuzzing target RVs.
Description
If the throttle stick is in the middle (i.e., 1,500) the vehicle must maintain
the current altitude.
If and only if roll is less than 45 degree, throttle is greater or equal to 1,500,
altitude is more than 10 meters, and the current flight mode is one of ACRO
and ALT_HOLD, then the flight mode can be changed to FLIP.
When the number of detected GPS satellites is less than four, the vehicle
must trigger the GPS fail-safe mode.
.
The vehicle must maintain a constant location, heading, and altitude
Parachute can be deployed only when the following conditions are satisfied:
(1) the motors must be armed, (2) the vehicle must not be in the FLIP
or ACRO flight modes, (3) the barometer must show that the vehicle is
not climbing, and (4) the vehicle’s current altitude must be above the
CHUTE_ALT_MIN parameter value.
If and only if the vehicle is armed in ACRO mode and the throttle input
is less than the minimum (FS_THR_VALUE parameter), the vehicle must
immediately disarm.
If the throttle input is less than FS_THR_VALUE parameter, it must change
the current mode to the RC fail-safe mode.
The vehicle must keep sending heartbeat messages to ground control
systems every k seconds (this policy applies to A/PX/PP).
If time exceeds COM_POS_FS_DELAY seconds after GPS loss is detected,
the GPS fail-safe must be triggered.
If the GPS fail-safe is triggered and a remote controller is available, the
flight mode must be changed to ALTITUDE mode.
PX.TAKEOFF1 When the vehicle conducts a taking off command, the target altitude must
be the MIS_TAKEOFF_ALT parameter value.
TABLE VI: Example policies violated by ArduPilot (A), PX4 (PX)
and Paparazzi (PP) (See Appendix E for complete list of policies).
vehicles used in our evaluation. We run PGFUZZ for 48 hours
using Ubuntu 18.04 64-bit running on an Intel Core i7-7700 CPU
@ 3.6 GHz with 32 GB of RAM.
We identify policies based on their documents and represent
them in MTL formulas. Table VI presents example identified
policies. However, we found that each flight control software
has a different level of detail in its documentation. For instance,
ArduPilot provides detailed documentation that explains its correct
operations, including its intended behavior in each flight mode and
fail-safe logic. In contrast, Paparazzi does not provide appropriate
documentation that explains its correct operation. To extract
policies from Paparazzi, we used developer comments in the source
code, which details the correct behavior of vehicles in different
flight modes, and we converted them to MTL formulas.
Our evaluation results are shown in Table VII. PGFUZZ
found a total of 156 bugs. Some policy violations are caused by
multiple bugs. For instance, A.ALT_HOLD2 was violated by either
a broad valid range of parameters or GPS failure (Detailed in
Section VII-C2). Moreover, some bugs cause multiple violations,
e.g., repeatedly activating the FLIP mode makes the vehicle crash
on the ground. This violates both A.FLIP1 and A.ALT_HOLD2
policies. We group found bugs into four categories. (1) “Broad valid
range” bugs mean that valid ranges of configuration parameters are
set incorrectly. For example, ATC_RATE_R_MAX has a valid range
from 0 to 1080. However, when users assign less than 100, the
vehicle leads to unstable attitude control and crashes on the ground.
(2) “Misimplementation” bugs happen when a feature does not
0204060Time (second)43.043.243.443.6Altitude (meter)Measured altitudeFiltered altitude0204060Time (second)132134136138Yaw (degree)Measured yawFiltered yawPolicy
# of
bugs
valid range Misimplementation Unimplemented No checking
Broad
valid range
Root cause
Crash
on the ground