SRE 反模式
Blake Bisset, Dropbox, Inc.
 ； ；人类的大脑是为避免威胁而建立和训练的。我们在衡量相对风险方面可能很糟糕，也许甚至不如植物可靠！请参阅Hagai Shemesh 和 Alex Kacelnik 的相关文章以及随后的风险分析协会文章链接。但我们非常擅长在一堆看起来眼熟的失败模式中找到和自己的相关的。想要阅读关于风险感知的精彩论述，请查看Bruce Schneier 的安全心理学论文。
让我们面对现实吧。失败其实是很有趣的！最好是别人的失误。当然你自己很久以前犯的错误也可以，因为我们觉得承认年轻时的错误很安全，用兔八哥的经典台词来说就是：“好一个大傻瓜！”而且失败是一个好故事。因此，对不应该做的事情进行提示，这不仅仅是应该做的事情，而且往往既简单又有效。所谓“反模式”，不是常见的“很久很久以前”那类的失败故事，而是我们见过的，不只是一、两次，而是一次又一次重现的可怕错误。反模式是有引力的坑，往往只差那么一点点就能彻底成功。也就是那种看似常识的决定，但并不是明智的决定。
在本书的其余部分中，你会看到的东西都是应该做什么。这不是我在本章中讨论的内容。认为这一节是你的"防御'D'哦！艺术"词汇表。或者只是坐下来，享受想象所有的东西，我和很多同事过去和现在不得不搞砸，以便达到我可以与你们分享这个简短的名单。SRE 并非完美。有些错误我甚至不止一次地犯过。这就是为什么他们是反模式。
反模式 1：站点可靠性运维
新的任务不能总是用旧的工具和方法来实现的。
站点可靠性运维：不从根本上改变其解决问题的方法，预期（和授权）完成的工作性质也不变的情况下，将运维团队重新命名为 SRE 的做法。站点可靠性运维并不是一件具体的事。站点可靠性是一门软件、网络和系统工程学的实践。 ；不能指望让一群技术人员坐在网络运营中心（NOC）办公室，并给他们一个 GitHub 帐户和公共云计算资源，然后让他们将一些东西移到容器中，然后他们就会神奇的变成 SRE。嗯，当然也许个别人真的可以这样完成转换，但是最终你的系统并不会比现在的更可靠。当然，虽然我这么说，但仍然无法阻止人们一次又一次地采用这种方法（然后在讲座里大肆吹嘘）。似乎只要改变了团队的名字，一切就都会往好的方向发展，站点可靠性迟早会提升的。
NOC 的出现是源自几个过时的思想。第一，有特定人员的工作是不计成本保持已经构建的系统正常运行。SRE 不会这样做。因为他们构建系统时需要更少的人工干预，失败几率也更低，并且通过修改现有系统以避免应对紧急故障模式。他们不会把系统当孩子来供养，也不用血液、汗水、眼泪、恐龙油脂或任何其他生物制品来给机器上贡。SRE 应花费一半以上的时间构建更好的系统，而不是执行或记录运维任务。总之，它们应该是工程师。好的工程师需要关注流程。在故障环境中是无从谈及流程的。为你的团队提供所需的时间和空间，通过工程技术让团队在解决技术问题之前就有机会消灭问题，这样即使将来要扩大规模、速度和服务范围时，你也能在效率方面保证积极主动。
我们看到很多人来到 SRE 会议，谈论他们为 SRE 构建的 NOC。确实 NOC 办公环境很酷，也能鼓舞人心。最好的地方在于那个氛围让你感觉自己像一个英雄，掌握着世界的命运（或者至少是生意的命运），舍我其谁？但是，英雄文化本身就是一种反模式，SRE 在 NOC 中正襟危坐并不起作用，即使最初构建 NOC 的原因非常合理。
有时，让每个人都在同一物理空间中处理问题会导致更多的麻烦而非效率，要知道他们用于执行完成工作的那些工具不应与某个房间绑定，人员和头衔也不应被绑定。NOC 不利于良好的工程化运作。NOC 应该算是开放式办公环境中最开放的办公室，在同事的海洋中，你会感受到额外的嘈杂和干扰。令人费解的是，我们这个宣扬数据驱动至上的行业，如此故意地无视越来越多的科学证据，不能理解开放式办公室对于工程团队的工作而言是多么低效。生产力下降、幸福指数下降、病假增多...2014 年《纽约客》文学评论、如果我们有自己熟悉的空间，记忆力会更好、中断对工程师工作效率的影响。
不要浪费宝贵的时间和财务来建造那种让人机距离更近的办公室，因为那会导致人与人之间的关系也机械化。
这里的关键是从任何地方进行分布式共享和协作，这样真正应该轮值的工程师可以立即做出远程响应，而不必强迫他离开某处住房、办公室、格子间或任何让他感觉舒适的工作区域。比起没有视觉或听觉隔离的无边无际的办公桌，任何地方都算是办公天堂，哪怕格子间也会感觉很酷。 如果需要共享特定问题的特定时间状况，应能够把相关链接其发布到聊天工具或事件响应工具中，以便对事件感兴趣的人能够通过相同的条件查看相同的问题，确定其开始和结束时间、解决方法等。理想情况下，这些工具应该共享实时数据，而不仅仅是静态图片或屏幕截图，这样人们就可以持续获得一致的理解，并可能发现问题的关键，从而提出解决思路。这些链接对应的数据应该可以批量保存下来，以便事后编写故障检查报告。
哪怕是通过共享的显示器来呈现要讨论的内容，虽然其他人不能以 NOC 或老派的作战室那种方式对你指指点点，也仍然不算足够好。更多的人的参与能够直接推动问题的发现，同时仍然保持协作和共享，让问题的修复也更加干劲利落。将工程师从 NOC 中解救出来，将为他们提供实际进行工程设计的能力。
反模式2：人类盯着屏幕
如果必须等待人类发现错误，你已经落伍了。
人类盯着屏幕：检测问题完全靠工作人员注意到特定数据系列的异常、或多个数据集的组合有问题、或特定条件与已知问题或故障相关，而不是依赖于阈值、相关引擎、速度指标、结构化日志解析器和其他工具来检测这些条件并将其呈现出来，以便供相关人员进行分析。另一个古老的 NOC 模式：让人类查看数据（哪怕是部分聚合或相关的数据），认为这是在潜在问题爆发之前检测并响应它们的好方法。不错，这是一个恰当的方法，但它是不好的。计算机更善于在大型数据集中发现瑕疵，并且应该尽可能使用它们来发现问题。
即使以统计上有效但仍易于理解的方式对海量数据进行建模也很困难，更不用说无限量数据或多年积累的数据了。不要把你的创意和注意力花在感受不断演变的复杂系统上。机器不需要很漂亮的用户界面 （UX） 来分析结构化数据。只要把数据喂给他们，然后只要梳理对人类来说容易理解的输出就好了。
人类查看图表并手动触发警报，然后启动处理流程，这是荒谬的，当你发现这类流程上的问题时（人们为计算机来提供有价值的数据，而非反过来），就意味着应该构建系统，以便由机器来监视数据并检测可能的问题。设计优良的系统可以尝试某种形式的自动响应，如果快速自动响应不能解决这个情况才提醒人类，（机器处理不了的才算有价值的工作），这样就算是整体上防止故障并加快恢复。因为如果没有这样的系统，当服务级别目标 （SLO） 开始接近 99.99% 时，人类无法足够快地处理事件检测和响应。理应构建工具，使工程师能在良好的工程环境中花费时间考虑工程问题（而不是 NOC 或开放式办公环境中做灭火的事情），在需要人类关注时也能获得可靠通知，并能快速找到相关信息、系统、和团队成员。
反模式3：事件响应时一窝蜂
眼睛盯着球，但你的脚要留在自己负责的区域。
全员事件响应：处理事件时候一拥而上，很少考虑对协调工作、资源储备和 OSHT1) Observe 观察情况。2) State 说明问题。3) Hypothesize 假设原因/解决方案。4. Test 测试解决方案。 故障排除、睡眠周期、人类认知限制或项目工程上的有害影响。
将 NOC 模型照搬到 SRE 团队（或者哪怕使用分布式系统，但未仔细限定其产生的警报范围）所产生的另一个问题是，人类的自然倾向是，在警报或警报范围内的每个人会被打扰并开始关注这个潜在的问题。或者至少会分心，并在潜意识中开始被搅扰，直到问题确实得到解决。这不仅对工程师的工作造成干扰，而且如果没有围绕事件响应的极好策略和纪律，实际上可以增加分析和解决问题的时间。当多人开始进行更改以同时测试多个假设，并互相交头接耳，并且可能在私下里完成了问题的处理时（以便遮掩保护问题根源），你就会意识到我说的是什么意思。
即使通过良好的协调来避免此类复杂情况，若问题无法立即解决，可能导致团队中的每个人都感到受挫，因此没有新的人（或新的班次）愿意加入解决问题，因为之前一窝蜂式的过激反应仍然在衰退期。
事故指挥系统（ICS）维基百科关于事故指挥系统的条目。能提供一个良好的程序框架来处理这种情况，并学习和实施类似于pagerduty 故障响应指南的“轮值当班” 和 Paul Newson 编写的“谷歌事件管理 - SRE 世界的冒险”。 无论你的技术路线或工作环境如何，都可以提供帮助。
这就是说，我们都知道，依靠人类在异常情况下始终遵循程序，这并不是避免问题的最佳选择。为什么要把负担放在同事的肩膀上，期待他们每次都做正确的事呢？构建自己的检测、警报和事件管理系统，使必要的人员能够充分参与管理问题，同时珍惜其他人的注意力和精力，直到真的需要他们为止。迟早，你会为这个远见而感到欣慰。
反模式 4：根本原因 = 人为错误
 ；如果一个善意的人都能造成“破坏”，那意味着它就没有正常工作过。
根本原因 = 人为错误：也就是把问题归咎于某人的不当行为，其实在当时的环境下，可能那个行动是对有限的信息来源做出的最好反应。这类行为的特点就是把问题归咎于单个原因。