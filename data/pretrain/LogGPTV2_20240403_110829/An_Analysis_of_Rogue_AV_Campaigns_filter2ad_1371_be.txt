### High-Level Idea and Problem Statement
The discussed approach targets a different problem, lacking both implementation and evaluation to substantiate the effectiveness of the proposed method. More broadly, [3] outlines a set of guidelines for achieving comprehensive network visibility, categorized into three main areas: basic functionality, data handling and storage, and essential capabilities. To our knowledge, no existing work has fully addressed all these guidelines. However, some efforts have been made to address the storage and querying of network visibility data over time and space [34]. Our work aims to progress towards comprehensive network visibility by developing a flexible and efficient unified network visibility system, specifically tailored for CANVuS.

### Motivation
The motivation for this work stems from our collaboration with the University of Michigan's Office of Information and Infrastructure Assurance (IIA) [33]. The IIA is responsible for:
- Facilitating campus-wide incident response activities.
- Providing services such as security assessments, consultations, network scans, education, and training.
- Managing IT security issues at the university level.

As part of their responsibilities, the IIA conducts quarterly scans of seven /16 subnets belonging to the University of Michigan. We assisted the IIA staff in analyzing several of these scans using Nessus [25] and Retina [11]. Key observations from this analysis include:
- Scans typically take one and a half to two weeks to complete.
- To reduce scan duration, many vulnerability signatures are not utilized.
- Except for a few departments, the scans proceed without detailed knowledge of sub-allocations, scanning large blocks of IP space.
- Scans are scheduled during working hours (8 AM to 5 PM, Monday through Friday) to minimize disruption.
- Only 85% of IP addresses are shared between scans, with 15% being unique.
- Only 85% of the total unique vulnerabilities discovered are present in both scans, with 15% unique to each scan.
- Only 56% of the configurations for common IPs remain unchanged between scans.

Despite the dynamic nature of the network and the overhead of scanning, the IIA staff lacked a platform to achieve comprehensive network visibility, relying on temporary measures to manage the impact of the dynamic network context.

### Architecture and Design
In this section, we describe a context-aware architecture designed to provide a uniform view of network states and their changes, supporting security applications. The architecture consists of three primary components:

1. **Network Monitors**: Distributed across various network devices (switches, routers, servers, etc.), these monitors collect data from the network infrastructure.
2. **Context Manager**: Converts the collected data into a uniform representation and stores it in a network state database.
3. **Network State Database**: Provides a uniform model for context-aware vulnerability scanning and other applications.

**Design Principles**:
- The design is guided by principles outlined in Allman et al. [3], focusing on scope, incremental deployability, and operational realities.
- The system is built for individual enterprises, leveraging existing data sources and formats (e.g., syslog, SNMP, NetFlow).
- For data collection, we use common, extensible mechanisms (databases, SQL). When necessary, probe-based mechanisms extract data from network streams if existing hardware is overloaded or does not support data export.
- The CANVuS application prioritizes data breadth over long-term storage, smart storage management, and graceful degradation, though future versions may incorporate these features [34].

### Data Sources
Inferring network states and changes is challenging due to the distributed nature of the required information. We categorize the data sources into three types:

1. **Infrastructure Devices**: Monitors deployed in switches, routers, and access points provide detailed, high-resolution network and host information.
2. **Network Services**: Monitors for DNS, DHCP, and Kerberos services offer additional detailed host states, often requiring access to local syslog.
3. **Passive Probes**: Deployed along with packet taps, these probes analyze real-time network traffic, providing insights into host availability and service usage. They can also perform deep packet inspection (DPI) for application and OS fingerprinting.

While host-based monitors are more accurate, they are beyond the scope of this work due to scalability and administrative challenges. However, as traditional host-based services move to the cloud, new monitoring opportunities may arise.

### Context Manager
The Context Manager infers network context from aggregated data and translates it into a uniform model. It uses existing libraries to read and process data from various sources (syslog, SNMP, NetFlow) and supports a flexible framework for adding new data adapters.

### Network State Database
The network state database provides a uniform model for context-aware applications, which interact with the database via standard triggers and programmable querying interfaces. Table 1 illustrates the types of data represented in the database, uniformly across different network abstraction layers, sources, and data formats.

| Network Layer | Data Source | Data Format | Description |
|---------------|-------------|-------------|-------------|
| Link Layer    | Switch      | SNMP        | Mapping between a MAC address and a physical switch port |
| Network Layer | Router      | SNMP        | Network topology and routing information |
| Transport Layer | Bro       | TCP/IP      | Real-time traffic analysis and application/OS fingerprinting |
| Application Layer | DNS Server | Syslog     | Domain name resolution and related events |
| Application Layer | DHCP Server | Syslog     | IP address allocation and configuration changes |

This structured approach ensures a comprehensive and flexible system for network visibility and vulnerability scanning.