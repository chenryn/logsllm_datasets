the high-level idea, it tries to solve a different problem, and it contains no implemen-
tation or evaluation to demonstrate the effectiveness of their approach. More generally,
to address the problems of comprehensive network visibility, a set of guidelines were
outlined in [3] for three broad categories — basic functionality, handling and stor-
age of data, and crucial capabilities. To our knowledge, no work has fully addressed
all of these guidelines, although some work has been attempted to address the storage
and querying of this ubiquitous visibility over time and space [34]. Our work makes
progress towards comprehensive network visibility with the goal of creating a ﬂexible,
yet efﬁcient uniﬁed network visibility system for CANVuS.
3 Motivation
The motivation for this work derives directly from our interactions with the University
of Michigan’s ofﬁce of Information and Infrastructure Assurance (IIA) [33]. This group
is tasked with: “(i) Facilitating campus-wide incident response activities, (ii) Providing
services such as security assessments and consultation, network scans, education and
training, and (iii) Managing IT security issues at the university level.” As part of these
roles, this ofﬁce engages in quarterly scans of seven /16 subnets belonging to the Uni-
versity of Michigan. As part of an effort to evaluate this process, we assisted the IIA
staff in analyzing several quarterly scans of this space by using both Nessus [25] and
142
Y. Xu et al.
Retina [11]. The results of this analysis were kept private to assist the security operation
staff, but we were struck by several poignant observations from the experience:
– The scans generally take one and a half to two weeks to complete.
– In an effort to reduce the amount of time spent scanning, a signiﬁcant number of
vulnerability signatures present in the tools were not used.
– With the exception of a handful of departments, the scans of the IP space proceeded
without knowledge of sub allocations in each department, scanning large blocks of
space in their entirety.
– Due to the impact of work day availability patterns, the operators schedule the scans
to occur only during working hours (i.e., 8 AM to 5 PM, Monday through Friday).
– Only 85% of the IP addresses in each scan were shared, the other 15% were unique.
– Only 85% of the total unique vulnerabilities discovered were present in both scans,
with 15% of each scan’s vulnerabilities appearing only in that scan.
– Only 56% of the conﬁgurations between two scans were unchanged for those IPs
in common between the scans.
While surprising to us, the IIA staff were keenly aware of the dynamic nature of their
network and the overhead imposed by the scanning activities. Although they deployed
several stop-gap measures to deal with the effect of this dynamic network context (e.g.,
scan during work hours), these operators simply lacked the platform with which to
achieve network-wide visibility.
4 Architecture and Design
In this section, we describe a context-aware architecture that provides a uniform view
of network states and their changes for security applications. The architecture consists
of three major components. The ﬁrst component is a set of network monitors that are
distributed over many network devices. The list of network devices to monitor could
include switches, routers, and servers, but the architecture allows for other similar de-
vices as well. The second major architectural component is a Context Manager, which
converts data from network monitors to a network state database. The third and ﬁnal
component is the network state database that provides a uniform model for context-
aware vulnerability scanning. Other context-aware applications may be built upon this
database as well. A high-level diagram with the major components of the architecture
is illustrated in Figure 1.
The design of this context-aware architecture is informed strongly by the design
principles outlined in Allman et al. [3], especially those basic guidelines of scope, in-
cremental deployability, and operational realities. We aim for a system that built for
an individual enterprise and utilizes existing sources of data collected from infras-
tructure and services already deployed in the network. We utilize the existing com-
mon data formats (e.g., syslog, SNMP, Netﬂow) and store and access this data through
common, extensible mechanisms (e.g., databases, SQL). Where necessary, we support
probe-based mechanisms for extracting similar data from network data streams in the
event that existing hardware is overloaded or does not support data export. With re-
spect to the outlined data-oriented goals, we opt to focus on exploring data breadth over
CANVuS: Context-Aware Network Vulnerability Scanning
143
Active
Scanning
D
e
v
c
e
s
i
I
n
f
r
a
s
t
r
u
c
t
u
r
e
S
e
r
v
c
e
s
i
t
N
e
w
o
r
k
P
r
o
b
e
s
t
N
e
w
o
r
k
Switches
Routers
Access Point
N
e
t
ﬂ
o
w
S
N
M
P
S
y
s
o
g
l
DNS Server
DHCP Server
Kerberos Server
Bro
S
y
s
o
g
l
S
y
s
o
g
l
Context Aware Architecture
C
o
n
e
x
t
t
M
a
n
a
g
e
m
e
n
t
l
i
M
d
d
e
w
a
r
e
t
t
N
e
w
o
r
k
S
a
e
D
a
a
b
a
s
e
t
t
Query
Trigger
Scanning
Subsystem
Vuln.
DB
CANVuS: Context-Aware
Network Vulnerability
Scanning
Other Context Aware
Applications
Fig. 1. Our context-aware network vulnerability scanning (CANVuS) architecture. The enterprise
network is monitored by using data from existing physical infrastructure devices, network service
appliances, and generic network probes. These heterogeneous sources of data are combined into
a uniﬁed view of the network context which can be queried by context-aware applications or
can have triggers automatically executed in response to certain contextual changes. In the case
of CANVuS, contextual changes that indicate possible conﬁguration changes are used to more
efﬁciently scan network devices.
long term storage, smart storage management, graceful degradation, etc. The CANVuS
application does not require extensive historical data, although we acknowledge that
other context-aware applications will indeed require these functionalities and we look
to leverage existing work in this direction for future versions of our architecture [34].
In the next three subsections, we ﬁrst describe categories of monitoring points or
data sources, from which creates a view of network context. Using this understanding,
we then present the design of the Context Manager, which converts data from network
monitors to the network state database in a uniform representation. Finally, we pro-
vide an example of what the network state database would look like for context-aware
applications.
4.1 Sources of Data
Inferring network states and state changes is a challenging problem because the re-
quired information is distributed across many devices, network services, and applica-
tions. Thus, the key to capture the states and changes is to monitor the targets from a
network perspective and approximate the context by aggregating network events from
various data sources, which may lay in different layers of the network stack. To de-
termine what data sources to use for event collection and integration, we ﬁrst need to
understand what types of network activities could be monitored and how they relate to
changes in the network.
144
Y. Xu et al.
In this architecture, the monitors distributed across the network fall into three cate-
gories. The ﬁrst category is monitors deployed in infrastructure devices, such as switches,
routers and wireless access points. The advantage of having these types of monitors is
that they provide detailed knowledge about the entire network, as well as the host infor-
mation, with high resolution. This is a direct result of these devices providing the core
hardware infrastructure for the network. For example, by querying the switches with
SNMP, the system knows exactly when a particular physical machine is plugged into
the network and when it leaves. However, because of the importance of these devices,
tradeoffs are involved between the ﬁdelity of data and the overhead (or difﬁculty) of the
data collection.
The second category of monitors is for network services, which may include DNS,
DHCP and even Kerberos services. The data observed by this second category of mon-
itors provides additional detailed states about the hosts. Services in this class are the
ones that are deployed in almost every enterprise and are critical to the operation of
the network. For example, the data generated for DHCP service helps to distinguish
between conﬁguration changes for the same host and MAC-to-IP binding changes for
different hosts. Depending on the types of the network, monitors in this category may
require access to the syslog that are local to each service.
The ﬁnal category consists of passive probes, which are deployed along with packet
taps. These probes perform realtime analysis of network trafﬁc that can be either generic
TCP/UDP ﬂows or application/OS speciﬁc to generate events. By monitoring TCP/UDP
ﬂows, the system gains the knowledge of which hosts are available and what services
are running and being used by clients. In addition, using Deep Packet Inspecting (DPI)
for an application protocol or OS ﬁngerprint helps inventory the speciﬁc versions of
applications (e.g., HTTP, SSH) or operating systems running in the network. Deviating
version information for the same host directly indicates conﬁguration changes for that
host. For example, one could use Bro’s protocol analysis to do connection reconstruc-
tion and application version ﬁngerprinting [22] (which we used in our implementation
of CANVuS). However, the visibility of passive probes is limited to the network trafﬁc
they have access to. In other words, silent applications/services will be missed, which is
also the limitation of passive vulnerability scanners [26, 8, 17]. Thus, the passive probe
is merely an additional type of monitor for collecting context data for observing a com-
plete view of the network.
We acknowledge that host-based monitors exist for clients, but we decided that they
are beyond the scope of this work. Intuitively, host-based monitors can provide the most
accurate inventory information that effectively renders vulnerability scanning useless.
Unfortunately, they are very difﬁcult, if not impossible, to be enforced in large enter-
prise networks due to scalability and administrative reasons. However, as some tradi-
tional host-based programs, like antivirus software, are moved into the cloud [18], we
may be able to build another type of monitors for potential in-cloud security services.
The key advantage is that the in-cloud version of the services already have the visibil-
ity into the end hosts because they provide functionalities that used to be local to the
hosts. Thus, the system will be able to obtain more ﬁne-grained information about host
activities without unacceptable modiﬁcations or performance penalties to the end hosts.
CANVuS: Context-Aware Network Vulnerability Scanning
145
4.2 Context Manager
The Context Manager, a layer between data monitors and the network state database,
infers network context (states and state changes) from aggregated data collected from
various monitors and translates this to a uniform model. Speciﬁcally, the network states
are a collection of simple facts about the target network, and they keep evolving as
underlying hosts and services change. For example, these facts may include what hosts
are available at the moment, what are the MAC addresses for a set of IPs in a certain
period of time, or when is the ﬁrst time a particular host connected to the network.
Existing libraries are used to read data from syslog, SNMP and Netﬂow that then get
ﬁltered and processed into a uniform representation of the network’s state that is then
inserted into the network state database. These modules can come from a programming
languages standard library (e.g., Python’s syslog module) or from third party libraries
(e.g., PySNMP [12]). Additionally, the Context Manager supports a ﬂexible framework
for adding additional plugins to read input from new data monitoring sources and trans-
late this data into a uniform model. These plugins can be thought of as data adapters
that convert the source inputs canonical data format into a representation used in our
architecture.
4.3 Network State Database
The network state database provides underlying model for which context-aware appli-
cations are written upon. The applications use standard database triggers or the pro-
grammable querying interfaces to interact with the database. The types of data that
may be represented can be found in Table 1. This table shows how for that the data
is uniformly represented across typical network abstraction layers, sources, and their
respective data formats.
Table 1. Example contents of the network state database
Network Layer Data Source Data Format
Description
Link Layer
Network Layer
Transport Layer
Switch
Switch
Bro
Router
Router
Bro
DNS Server
Bro
Application Layer DHCP Server
Bro
Bro
SNMP
SNMP
Ethernet
SNMP
Netﬂow
TCP/IP
Syslog
UDP/IP
Syslog
UDP/IP
TCP/IP
Mapping between a MAC address and a Physical Switch Port