munications; this is particularly important for “static” sites (e.g.,
two branches of the same company). For mobile clients, such as
ERT personnel, the reverse direction’s trafﬁc (from the target site
to the client) can be sent directly over the Internet, or it can also use
the SOS infrastructure.
SOS is a network overlay, composed of nodes that communi-
cate with one another atop the underlying network substrate. Often,
nodes will perform routing functionality to deliver messages (pack-
ets) from one node in the overlay to another. We assume that the
set of nodes that participate in the SOS is known to the public and
hence is also known to any attacker. In effect, no node’s identity
is kept hidden. However, certain roles that an overlay node may
assume in the process of delivering trafﬁc are kept secret from the
public. Keeping participation information of certain nodes hidden
from the public could be a means of providing additional security,
but is not required by the architecture.
Attackers in the network are interested in preventing trafﬁc from
reaching the target. These attackers have the ability to launch DoS
attacks from a variety of points around the wide area network that
we call compromised locations. The number and bandwidth capa-
bilities of these compromised locations determine the intensity with
which the attacker can bombard a node with packets, to effectively
shut down that node’s ability to receive legitimate trafﬁc. Without
an SOS, knowledge of the target’s IP address is all that is needed
in order for a moderately-provisioned attacker to saturate the tar-
get site. We assume attackers are smart enough to exploit features
63of the architecture that are made publicly available, such as the set
of nodes that form the overlay. In this paper, we do not speciﬁ-
cally consider how to protect the architecture against attackers who
can inﬁltrate the security mechanism that distinguishes legitimate
trafﬁc from (illegitimate) attack trafﬁc: we assume that commu-
nications between overlay nodes remain secure so that an attacker
cannot send illegitimate communications, masking them as legiti-
mate. In addition, it is conceivable that more intelligent attackers
could monitor communications between nodes in the overlay and,
based on observed trafﬁc statistics, determine additional informa-
tion about the current conﬁguration. Protecting SOS from such
highly specialized and sophisticated attackers is beyond the scope
of this paper.
Beacon
Beacon
Beacon
overlay
nodes
Source
Point
SOAP
SOAP
Secret
Servlet
Secret
Servlet
Secret
Servlet
Target
Filtered region
Figure 1: Basic SOS architecture.
Figure 1 gives a high-level overview of the SOS architecture
that protects a target node or site so that it only receives legitimate
transmissions. In the discussion that follows, we ﬁrst give a brief
overview of the design process, and then develop the architecture
piece by piece. The reader can refer back to the ﬁgure during the
discussion.
3.1 Design Rationale
Fundamentally, the goal of the SOS infrastructure is to distin-
guish between authorized and unauthorized trafﬁc. The former is
allowed to reach the destination, while the latter (or, more gener-
ally, unveriﬁed trafﬁc) is dropped or is rate-limited. Thus, at a very
basic level, we need the functionality of a ﬁrewall “deep” enough
in the network that the access link to the target is not congested.
This imaginary ﬁrewall would perform access control by using tra-
ditional protocols such as IPsec.
However, traditional ﬁrewalls themselves are susceptible to DoS
attacks. One way to address this problem is to replicate the ﬁrewall
functionality, in a manner similar to that described in [13]. To avoid
the effects of a DoS attack against the ﬁrewall connectivity, we
need to distribute these instances of the ﬁrewall across the network.
In effect, we are “farming out” the expensive processing (such as
cryptographic protocol handling) to a large number of nodes. How-
ever, ﬁrewalls depend on topological restrictions (“pinch points”) in
the network to enforce access control policy. Since our distributed
ﬁrewall has performed the access control step, it would seem obvi-
ous that all we need around the target is a router that is conﬁgured
to only let through trafﬁc forwarded to it by one of the ﬁrewalls.
However, a security system cannot depend upon the identity of
these ﬁrewalls to remain secret. Thus, an attacker can launch a
DoS attack with spoofed trafﬁc purporting to originate from one
of these ﬁrewalls. Notice, however, that given a sufﬁciently large
group of such ﬁrewalls, we can select a very small number of these
as the designated authorized forwarding stations : only trafﬁc for-
warded from these will be allowed through the ﬁltering router, and
we change this set periodically.
3.2 Protecting the Target: Filtering
In the current Internet, knowledge of the network identiﬁer (IP
address) of the target allows an attacker to bombard the target loca-
tion with packets that originate from compromised locations through-
out the Internet. To prevent these attacks, a ﬁlter can be constructed
that drops illegitimate packets at some point in the network, such
that the illegitimate trafﬁc does not overwhelm routing and pro-
cessing resources at or near the target. We assume that the ﬁlter
can be constructed so that attackers do not have access to routers
inside the ﬁltered region (i.e., they cannot observe which source ad-
dresses can proceed through the ﬁlter). Past history indicates that
it is signiﬁcantly more difﬁcult for an attacker to completely take
over a router or link in the middle of an ISP’s network than to at-
tack an end-host; intuitively, this is what we would expect, given
the limited set of services offered by a router (compared to, e.g., a
web server or a desktop computer).
We assume that ﬁltering is done at a set of high-powered routers
such that i) these routers can handle high loads of trafﬁc, making
them difﬁcult to attack, and ii) possibly there are several, disjoint
paths leading to the target, each of which is ﬁltered independently.
This way, if one of these paths is brought down, ﬁltered trafﬁc can
still traverse the others and ultimately reach the target. Essentially,
we assume that the ﬁlter can be constructed locally around the tar-
get to prevent a bombardment of illegitimate trafﬁc, while at the
same time allowing legitimate, ﬁltered trafﬁc to successfully reach
the target. Typically, such ﬁlters need to be established at the ISP’s
Point of Presence (POP) routers that attach to the ISP backbone.
3.3 Reaching a well-ﬁltered Target
Under the ﬁltering mechanism described previously, legitimate
users can reach the target by setting the ﬁlter around the target to
permit only those IP addresses that contain legitimate users. This
straightforward approach has two major shortcomings. First, when-
ever a legitimate user moves, changes IP addresses, or ceases to be
legitimate, the ﬁlter surrounding the target must be notiﬁed and
modiﬁed. Second, the ﬁlter does not protect the target from trafﬁc
sent by an illegitimate user that resides at the same address as a le-
gitimate user, or (more importantly) from an illegitimate user that
has knowledge about the location of a legitimate user and spoofs
the source address of its own transmissions to be that of the known
legitimate user.
A ﬁrst step in our solution is have the target select a subset of
nodes, , that participate in the SOS overlay to act as forwarding
proxies. The ﬁlter is set to only allow packets whose source address
matches the address of some overlay node  2 . Since  is a
willing overlay participant, it is allowed to perform more complex
veriﬁcation procedures than simple address ﬁltering. Thus, it can
use more sophisticated (and heavy-weight) security techniques to
verify whether or not a packet sent to it originated from a legitimate
user of a particular target.
The ﬁltering function that is applied to a packet or ﬂow can have
various levels of complexity. It is, however, sufﬁcient to ﬁlter on the
source address: the router only needs to let through packets from
one of the (few) secret servlets. All other trafﬁc can be dropped,
or rate-limited. Because of the small number of such ﬁlter rules
64(3-4 per interface) and their simple nature (ﬁlter only on source IP
address), router performance will not be impaired[12], even if we
do utilized specialized hardware (e.g., CAMs).
This architecture prevents attackers with knowledge of legiti-
mate users’ IP addresses from attacking the target. However, an
attacker with knowledge of the IP address of the proxy can still
launch two forms of attacks: an attacker can breach the ﬁlter and
attack the target by spooﬁng the source address of the proxy, or
attack the proxy itself. This would prevent legitimate trafﬁc from
even reaching the proxy, cutting off communication through the
overlay to the target.
Our solution to this form of attack is to hide the identities of
the proxies. If attackers do not know the identity of a proxy, they
cannot mount either form of attack mentioned above unless they
successfully guess a proxy’s identity. We refer to these “hidden”
proxies as secret servlets.
3.4 Reaching a Secret Servlet
To activate a secret servlet, the target sends a message to the
overlay node that it chooses to be a secret servlet, informing it of its
task. Hence, if a packet reaches a secret servlet and is subsequently
veriﬁed as coming from a legitimate user, the secret servlet can then
forward the packet through the ﬁlter to the target. The challenge at
this point is constructing a routing mechanism that will route to a
destination (a secret servlet) while utilizing a minimal amount of
information about the identity of that destination.
Here we take advantage of the dynamic nature and the high level
of connectivity that exists when routing atop a network overlay.
The connectivity graph of a network overlay consists of nodes which
are the devices (e.g., end-systems) that participate in the overlay,
and edges which represent IP paths that connect pairs of nodes in
the overlay. Unlike the underlying network substrate whose phys-
ical requirements limit the pairs of nodes that can directly connect
to one another, network overlays have no such limits, such that
an overlay edge is permissible between any pair of overlay nodes.
This added ﬂexibility and increased number of possible routes can
be used to complicate the job of an attacker by making it more
difﬁcult to determine the path taken within the overlay to a secret
servlet. In addition, since a path exists between every pair of nodes,
it is easy to recover from a breach in communication that is the re-
sult of an attack that shuts down a subset of overlay nodes. The
recovery involves simply removing those “shut down” nodes from
the overlay and routing around them.
There exists a straightforward but costly solution to reaching a
secret servlet without revealing the servlet’s ID to the nodes that
wish to reach it. This is to have each overlay node that receives
a packet randomly choose the next hop on the overlay to which
it forwards a packet. Eventually, the packet will arrive at a secret
servlet, which can then deliver the packet to the target.
3.5 Connecting to the Overlay
Legitimate users need not reside at nodes that participate in SOS.
Hence, SOS must support a mechanism that allows legitimate traf-
ﬁc to access the overlay. For this purpose, we deﬁne a secure over-
lay access point (SOAP). A SOAP is a node that will receive packets
that have not yet been veriﬁed as legitimate, and perform this veriﬁ-
cation. For this purpose, off-the-shelf authentication protocols such
as IPsec or TLS can be used. Allowing a large number of overlay
nodes to act as SOAPs increases the bandwidth resources that an
attacker must obtain to prevent legitimate trafﬁc from accessing the
overlay. Effectively, SOS becomes a large distributed ﬁrewall [13]
that discriminates between “good” (authorized) trafﬁc from “bad”
(unauthorized) trafﬁc. By using a large number of topologically-
distributed ﬁrewall instances, we increase the amount of resources
(bandwidth) an attacker has to spend to effectively deny connectiv-
ity to legitimate clients.
Having a large number of SOAPs increases the robustness of
the architecture to attacks, but complicates the job of distributing
the security information that is used to determine the legitimacy of
a transmission toward the target. One can imagine several ways
in which SOAPs can be chosen. For instance, different users (IP
address origins) can be mapped to different subsets of SOAPs. An
investigation into how SOAPs are chosen is part of our future work
plans.
3.6 Routing through the Overlay
Having each overlay participant select the next node at random is
sufﬁcient to eventually reach a secret servlet. However, it is rather
inefﬁcient, with the expected number of intermediate overlay nodes
contacted being = where  is the number of nodes in the
overlay and  is the number of secret servlets for a particular
target. Here, we discuss a possible alternative routing strategy in
which, with only one additional node knowing the identity of the
secret servlet, the route from a SOAP to the secret servlet has an
expected path length that is  g  .
The routing algorithm utilizes the Chord service [26]. For the
purposes of this paper, Chord can be viewed as a routing service
that can be implemented atop the existing IP network structure (i.e.,
in a network overlay). Consistent hashing [14] is used to map, by
using a hash function, an arbitrary identiﬁer to a unique destination
node that is an active member of the overlay. Each overlay node
maintains a list that contains  g   identities of other active
nodes in the overlay.
Given the destination identiﬁer, each node knows how to choose
a member in its list such that, from an arbitrarily chosen starting
node, the destination node to which the identiﬁer hashes is reached
in  g   overlay hops. Multiple destination nodes for a given
identiﬁer can be created by using different hash functions. In addi-
tion, by choosing the right class of hash functions, the sequences of
nodes used to carry a packet from a node to the destination are in-
dependent from one another (uncorrelated). It is simple to produce
multiple mappings (hash functions) that produce different paths to
different sets of destination nodes (i.e., the sets of nodes that form
paths from a given start node to a given sink node are independent).
The Chord service is robust to changes in overlay membership:
each node’s list is adjusted to account for nodes leaving and joining
the overlay such that the above stated properties continue to hold.
In SOS, the identiﬁer used to which the hash function is applied
is the IP address of the target. Thus, Chord can be used to direct a
packet from any node in the overlay to the node that the identiﬁer is
mapped to, by applying the hash function to the target’s IP address.
This node to which Chord delivers the packet is not the target, nor
is it necessarily the secret servlet. It is simply a unique node that
will be eventually be reached (after possibly several overlay hops)
using Chord, regardless of the starting point in the overlay. We
refer to this node as the beacon, since it is to this node that packets
destined for the target are ﬁrst guided. When a packet is approved
by a SOAP for forwarding over the overlay, the hash on the IP
address of the target is used as the key. Chord therefore provides a
robust and reliable while relatively unpredictable means of routing
packets from an access point to one of several beacons.
One last step needed is to provide the mechanism that commu-
nicates the secret servlet’s identity to the beacon node. This can
also be achieved via Chord: as an overlay node, the secret servlet
or the target can reach the beacon by hashing on the target identiﬁer
(which the secret servlet knows), and then using Chord routing in
65the same way that SOAPs do. Hence, the secret servlet or the target
can inform the beacon of the secret servlet’s identity.
By providing only the beacon with the identity of the secret
servlet, the packet can be delivered from any SOAP to the target
by traveling across the overlay to the beacon, then from the beacon
to the secret servlet, and ﬁnally from the secret servlet (through the
ﬁlter) to the target. This allows the overlay to scale for arbitrarily
large numbers of overlay nodes and target sites. If the overlay only
serves a relatively small number of target sites, traditional routing
protocols or RON-like routing[1] may be sufﬁcient.
3.7 Redundancy
Having a single SOAP, beacon, or secret servlet weakens the
SOS architecture, in that a successful attack on any one of these
nodes can prevent legitimate trafﬁc from reaching the target. For-
tunately, each component is easily replicated within the architec-
ture. Furthermore, an attack upon any of these components, once
realized, is easily repaired.
Speciﬁcally, as discussed above, SOAP functionality is easily
replicated. Any overlay node can act as a SOAP as long as it has
the ability to check the legitimacy of a packet transmissions. If a
SOAP is attacked, it can exit the overlay, and the legitimate user
attempting access need only ﬁnd another SOAP that will accept its
transmissions.
Furthermore, the target can choose multiple nodes as secret servlets
and set the ﬁlter to allow packets from only these nodes to pass
through the ﬁlter.
If a secret servlet is attacked, or its identity
breached such that attack trafﬁc with a secret servlet’s source ID
can proceed through the ﬁlter, the target can remove the servlet
whose identity is compromised from its set of servlets and mod-
ify its ﬁlter appropriately. A secret servlet under attack can also
remove itself from the overlay until the attack terminates.
Finally, multiple nodes can act as beacons for a target via apply-
ing several hash functions (or several iterations of the same hash
function) over the target identiﬁer. In addition, if a beacon node
is attacked, the node can remove itself from the overlay, and the
Chord routing mechanism will heal itself such that a new node will
act as a beacon for that hash function. If the former beacon cannot
communicate the secret servlet information to the new beacon, then
the new beacon must wait for the secret servlet to contact it again
(as part of a keep-alive protocol) with its identity.
We note that when there are multiple beacons and secret servlets,
every beacon should know the identity of at least one secret servlet
so that the packets that each beacon receives can be forwarded on-
ward to a secret servlet. Thus, each hash function is used by at least
one secret servlet.
A last word on redundancy: since the secret servlets use tunnel-
ing to reach the target, it is possible to use the backup links of a
multihomed site to carry SOS-routed trafﬁc (effectively using tun-
neling as a source-routing mechanism). Thus, all attack trafﬁc will
use the BGP-advertised “best” route to the target, while trafﬁc from
the SOS infrastructure will use the unused available capacity of the
target site.
3.8 Summary of Architecture