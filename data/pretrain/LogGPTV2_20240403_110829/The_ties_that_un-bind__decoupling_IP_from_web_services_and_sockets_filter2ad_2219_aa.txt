title:The ties that un-bind: decoupling IP from web services and sockets
for robust addressing agility at CDN-scale
author:Marwan Fayed and
Lorenz Bauer and
Vasileios Giotsas and
Sami Kerola and
Marek Majkowski and
Pavel Odintsov and
Jakub Sitnicki and
Taejoong Chung and
Dave Levin and
Alan Mislove and
Christopher A. Wood and
Nick Sullivan
The Ties that un-Bind: Decoupling IP from web services and
sockets for robust addressing agility at CDN-scale
Marwan Fayed†, Lorenz Bauer†, Vasileios Giotsas†, Sami Kerola†,
Marek Majkowski†, Pavel Odinstov†, Jakub Sitnicki†, Taejoong Chung★,
Dave Levin‡, Alan Misloveø, Christopher A. Wood†, Nick Sullivan†
‡ University of Maryland
ø Northeastern University
† Cloudflare, Inc.
★ Virginia Tech
ABSTRACT
The couplings between IP addresses, names of content or services,
and socket interfaces, are too tight. This impedes system manage-
ability, growth, and overall provisioning. In turn, large-scale content
providers are forced to use staggering numbers of addresses, ulti-
mately leading to address exhaustion (IPv4) and inefficiency (IPv6).
In this paper, we revisit IP bindings, entirely. We attempt to evolve
addressing conventions by decoupling IP in DNS and from network
sockets. Alongside technologies such as SNI and ECMP, a new
architecture emerges that “unbinds” IP from services and servers,
thereby returning IP’s role to merely that of reachability. The archi-
tecture is under evaluation at a major CDN in multiple datacenters.
We show that addresses can be generated randomly per-query, for
20M+ domains and services, from as few as ∼4K addresses, 256
addresses, and even one IP address. We explain why this approach
is transparent to routing, L4/L7 load-balancers, distributed caching,
and all surrounding systems – and is highly desirable. Our expe-
rience suggests that many network-oriented systems and services
(e.g., route leak mitigation, denial of service, measurement) could be
improved, and new ones designed, if built with addressing agility.
CCS CONCEPTS
• Networks → Network design principles; Network services;
Network manageability; Naming and addressing.
KEYWORDS
addressing, provisioning, content distribution, programmable sockets
ACM Reference Format:
Marwan Fayed, Lorenz Bauer, Vasileios Giotsas, Sami Kerola, Marek Ma-
jkowski, Pavel Odinstov, Jakub Sitnicki, Taejoong Chung, Dave Levin, Alan
Mislove, Christopher A. Wood, Nick Sullivan. 2021. The Ties that un-Bind:
Decoupling IP from web services and sockets for robust addressing agility at
CDN-scale. In ACM SIGCOMM 2021 Conference (SIGCOMM ’21), August
23–28, 2021, Virtual Event, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3452296.3472922
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8383-7/21/08. . . $15.00
https://doi.org/10.1145/3452296.3472922
Figure 1: Conventional IP bindings to names, interfaces, and
sockets, create transitive relationships between them that are
difficult to track and reason about, which hinders changes to
any binding without risking others.
INTRODUCTION
1
Unlike with most clients and carriers, limitations exist on hosting-
and content-service providers (CDNs) because of decades-old con-
ventions that tie IP addresses to resources. Hostnames and domains
are typically mapped to a set of IP addresses. DNS will lookup
and return any IP in the set to load-balance or to geo-select [9, 56]
services, but the set itself is static and unchanging. Similarly, net-
work interfaces and sockets are mapped to single IP addresses and
address-port pairs, respectively [70]; once assigned to interfaces and
sockets, addresses are also typically static and unchanging.
This legacy of IP-to-name and IP-to-server bindings persist in
IPv6, and have in turn created a perception that possessing a large
number of IP addresses is a necessity to operate large-scale CDN
services. Indeed, large CDNs have acquired a massive number of
IP addresses: At the time of this writing, Cloudflare has 1.7M IPv4
addresses [12], Akamai has 12M [1], and Amazon AWS has over
51M [3]! Corresponding proportions of the IPv6 space arguably
exceed one’s ability to imagine. This trend might lead one to con-
clude that many IP addresses are key to scale worldwide, provide
reachability, implement sophisticated traffic engineering policies,
and ensure consistent server selection across multiple TCP connec-
tions. In the absence of address space, a CDN’s ability to be flexible,
adaptive, and innovative would appear to be inversely proportional
to the growth of its software and hardware resources.
Implicitly, IP address bindings also constrain service provisioning.
For example, different customers have different SLAs or expecta-
tions when it comes to availability and quality of service; client
behaviours and connection patterns may also change over time;
the service operator may change or release new service offerings.
Among the available service provisioning mechanisms, the only rep-
resentation that assuredly connects these dimensions is an IP address.
This makes address changes necessarily slow to plan and costly to
execute. The result is an operational bottleneck since changes in any
433
Interfaces & SocketsIP AddressHostnamesCommunication Binding(requests/responses)Connection BindingSIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Fayed, et al.
dimension may have impact on otherwise independent dimensions,
a relationship that is shown by Figure 1 and explored further in §2.2.
How, then, can a CDN operate, evolve, or even launch, without
ever-growing address space? What is the smallest number of IP ad-
dresses required to operate at scale? Can the bottleneck be broken by
decoupling IP addresses from resources? To do so, must we resort to
clean-slate Internet architectures [23, 29, 35], or are more immediate
deployments possible? What if IP usage could be separated into
control and data planes in keeping with the networks that rely on it?
In this paper we describe efforts at Cloudflare to improve address-
ing agility for scale by decoupling IP from names and sockets. This
has the effect of transforming addresses from a resource constraint
to a resource that can be scheduled, and reduces operational bottle-
necks. We note that the emergence of virtual IP- and name-based
hosting techniques (§2.3) challenges the need for static IP bindings
at all. This observation motivates us to identify and re-architect the
binding mechanisms themselves: DNS for clients and sockets for
services. Our contributions are as follows:
(1) We re-architect authoritative DNS to match on policies in-
stead of names, then select from an address pool assigned to
that policy (§3.1, §3.2).
(2) We design and have open-sourced sk_lookup, a pro-
grammable sockets mechanism to resolve socket inflexibility
– removing limitations on IP+port pair selection, and enabling
IP+port re-assignment to existing listening sockets (§3.3).
(3) We evaluate the architecture at scale on live traffic at multiple
datacenters and random per query address selection for 20M+
hosts and services – more than 15% of all websites [67] –
from a pool of ∼4K, 256, and even a single IP address (§4,
§5).
(4) We state why this works for any service that controls its
authoritative DNS and connection termination (§3.4); ex-
plain why changes are completely transparent to BGP routing,
L4 load-balancing, caching, and other surrounding systems
(§4.3,§5.1); alongside implications for future (§4.4, §5.2).
(5) We begin to explore the power of policy-driven IP selection
by describing fast route leak detection and mitigation for a
global anycast network, and more (§6).
In deployment datacenters, our architecture has been serving all
production traffic that satisfies the given policy since July 2020. In
addition to varying the number of addresses in use (from ∼4K to 1),
the scale of the deployment show that random per-query addressees
can be generated at rates of 1000s per second.
The architecture is designed to be transferable. The only require-
ments are that a service provider controls its own (i) authoritative
DNS, and (ii) connection termination. DNS is necessary to establish
address bindings and communicate changes to clients, while con-
nection termination is needed to ensure that processes can accept
connections as intended. This means that our architecture general-
izes to, for example, university web services as much as it works for
many (but not all) types of CDNs and web services.
Of course, many of the observations we make in designing this
new architecture have been made by others [5, 33, 50, 56, 57] (we
review additional related work in §7), but, to our knowledge, ours
is the first to unbind IP addresses in practice, and to be deployed at
large scale to real-world clients. This work raises no ethical issues.
Figure 2: The client-to-origin path can consist of as many as 3
separate connections, with up to 4 out of 6 IP addresses managed
by a single CDN.
2 HOW DID WE GET HERE?
In this section we describe address use in CDNs at a high-level,
alongside their challenges. We argue that recent advances have pro-
vided the foundations to revisit conventional notions of address use.
2.1 The perceived need for address space
In the CDN space, the server label is delineated from its instantia-
tions, most often ascribed to their function as on the edge or being
the origin. A server is any machine that terminates a connection. Ori-
gin servers hold the ground truth. Finally, edge servers sit on the path
between client and origin, typically inserted as reverse proxies [17].
Figure 2 captures the relationship between devices in different
CDN and hosting architectures. The conventional end-to-end connec-
tion is represented by the top dotted edge, in which client requests
are routed directly to origins whose IP addresses must be advertised
over BGP. The lower dashed connection represents the edge-service
model. Increasingly, edge services are implemented as reverse prox-
ies, i.e., clients connect to an edge service IP address returned by
DNS. If the edge service is unable to satisfy the request, a second
connection is initiated by the edge service to the origin. Finally,
customers of edge services may wish to transit connections to the
origin over the edge service’s private infrastructure, as indicated by
the middle dash-dot line in Figure 2.
In each model represented by Figure 2, origin connections and
edge connections that cross the edge boundary need public IP ad-
dresses. These IP addresses (at origins and at the edge), returned
by DNS, can be dedicated but are most often shared with other ser-
vices. Two observations can be drawn about connections on today’s
Internet: The client-to-origin path often differs from the original
end-to-end model [54]; and that those origin connections consist of
no fewer than three public addresses between two entities.
One obvious way to support additional connections is with addi-
tional IP space. Indeed, from data and methodology described by
Giotsas et al. [26], we find that ASes that self-identify as Enterprise
and Content rely on IP transfers to grow their IP space an order
of magnitude more than traditional broadband ASes. On appear-
ance it seems that more services and more interfaces need more IP
addresses, a notion this paper suggests can be mitigated.
2.2 The IP bindings bottleneck stifles innovation
Address management is a challenge for any large network, and has
long been a subject of research. Among network operators, ISPs,
and other traditional consumers of large address space, addresses
are associated with points on a path.
434
The Ties that un-Bind: Decoupling IP from web services and sockets. . .
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Among large CDNs and hosting services, the conventions of IP
assignment have exposed an implicit yet long-standing resource-
binding architecture, depicted in Figure 1. Its similarity to the semi-
nal ‘narrow waist’ representation of IP is intentional and unavoidable.
Above IP sits a service or website associated with a hostname that
is reachable via a designated address. Below IP are sockets that
manage client connections over network interfaces. In this manner it
is natural to associate an IP address with a software service, or an
IP address with hardware resources, or both. The unintended result
is a transitive relationship: Since hostnames are related to specific
IP addresses and IP addresses are related to specific machines, then
hostnames are specifically related to machines.
At CDN-scale this transitive property makes the bindings difficult
to reason about, and manifests as an operational bottleneck. Changes
are slow and costly because the address bindings impact planning
and provisioning, quality of customer (origin) services, client per-
formance, and more. In the CDN context IP addresses can stifle
innovation, which is the very opposite of their design [52, 59].
2.3 Enabling technologies: Protocol Multiplexing
Recent advancements have disentangled some of the conventional
bindings between IP addresses, the services they represent, and the
physical devices to which they are assigned. The advancements
inexorably link to the development of web hosting services and are