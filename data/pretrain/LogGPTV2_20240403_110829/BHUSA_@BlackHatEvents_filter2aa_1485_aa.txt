#BHUSA @BlackHatEvents
Information Classification: General

## Dive into Apple IO80211Family Vol. II
**Speaker:** Wang Yu  
**Co-founder & CEO at Cyberserval**  
[https://www.cyberserval.com/](https://www.cyberserval.com/)

### Background of This Research Project
This presentation, "Dive into Apple IO80211FamilyV2," was originally presented at Black Hat USA 2020. For more details, visit:  
[https://www.blackhat.com/us-20/briefings/schedule/index.html#dive-into-apple-iofamilyv-20023](https://www.blackhat.com/us-20/briefings/schedule/index.html#dive-into-apple-iofamilyv-20023)

### The Apple 80211 Wi-Fi Subsystem
Starting from iOS 13 and macOS 10.15 Catalina, Apple refactored the architecture of the 80211 Wi-Fi client drivers, renaming the new design to **IO80211FamilyV2**. This subsystem now supports a wide range of functionalities, from basic network communication to trusted privacy sharing between various Apple devices.

### Components of the 80211 Wi-Fi Subsystem
#### Daemons:
- `airportd`
- `sharingd`

#### Frameworks:
- `Apple80211`
- `CoreWifi`
- `CoreWLAN`

#### Family Drivers V2:
- `IO80211FamilyV2`
- `IONetworkingFamily`

#### Family Drivers (Legacy):
- `IO80211Family`
- `IONetworkingFamily`

#### Plugin Drivers V2:
- `AppleBCMWLANCore` (replaces AirPort Brcm series drivers)

#### Plugin Drivers (Legacy):
- `AirPortBrcmNIC`
- `AirPortBrcm4360/4331`
- `AirPortAtheros40`

#### Low-Level Drivers V2:
- `AppleBCMWLANBusInterfacePCIe`

#### Low-Level Drivers (Legacy):
- `IOPCIFamily`

### Vulnerability Classification
1. **Vulnerabilities Affecting Only IO80211FamilyV2:**
   - Introduced during the porting of existing V1 features.
   - Introduced during the implementation of new V2 features.

2. **Vulnerabilities Affecting Both IO80211Family (V1) and IO80211FamilyV2**

3. **Vulnerabilities Affecting Only IO80211Family (V1)**

### Notable Vulnerabilities
- **Family Drivers V2:**
  - `IO80211FamilyV2`, `IONetworkingFamily`
  - CVE-2020-9832

- **Plugin Drivers V2:**
  - `AppleBCMWLANCore`
  - CVE-2020-9834, CVE-2020-9899, CVE-2020-10013

- **Low-Level Drivers V2:**
  - `AppleBCMWLANBusInterfacePCIe`
  - CVE-2020-9833

### Two Years Later
Since the initial presentation, all previously identified vulnerabilities have been fixed, and the overall security of the system has improved. With the release of macOS Big Sur, Monterey, and Ventura, and the introduction of Apple Silicon, several changes have occurred:

1. **Refactoring and Renaming:**
   - `IO80211FamilyV2` has been refactored again and renamed back to `IO80211Family`.
   - What were the reasons behind this change?

2. **Identifying New Attack Surfaces:**
   - How can we identify new attack surfaces in the 80211 Wi-Fi subsystem?

3. **Engineering and Hunting Improvements:**
   - What other areas can be improved in terms of engineering and vulnerability hunting?

4. **Finding High-Quality Kernel Vulnerabilities:**
   - Can we still discover new, high-quality kernel vulnerabilities?

### Never Stop Exploring
1. **Change is Constant:**
   - The only constant in technology is change.
   
2. **New Attack Surfaces:**
   - Continuously accumulate domain knowledge to identify new attack surfaces.

3. **Improvement Areas:**
   - There are many areas that can be improved.

4. **Potential for New Vulnerabilities:**
   - Yes, it is definitely possible to find new high-quality kernel vulnerabilities.

### Dive into Apple IO80211Family (Again)
#### Attack Surface Identification
To explore the 80211 Wi-Fi subsystem, I will:
- Change various network settings while sending and receiving data.
- Use traditional BSD `ioctl`, IOKit `IOConnectCallMethod` series, and `sysctl` interfaces.
- Test various packet sending and receiving interfaces.
- Examine different types of network interfaces.

#### Relevant Interfaces
- `ifioctl()`: [Source Code](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/bsd/net/if.c#L2854)
- `ifioctl_nexus()`: [Source Code](https://github.com/apple-oss-distributions/xnu/blob/main/bsd/net/if.c#L3288)
- `skoid_create()` and `sysctl` registration: [Source Code](https://github.com/apple-oss-distributions/xnu/blob/main/bsd/skywalk/core/skywalk_sysctl.c#L81)

#### Network Interface Examples
- `ap1`: Access Point
- `awdl0`: Apple Wireless Direct Link
- `llw0`: Low-latency WLAN Interface (used by the Skywalk system)
- `utun0`: Tunneling Interface
- `lo0`: Loopback (Localhost)
- `gif0`: Software Network Interface
- `stf0`: 6to4 Tunnel Interface
- `en0`: Physical Wireless
- `enX`: Thunderbolt / iBridge / Apple T2 Controller
- Bluetooth PAN / VM Network Interface
- `bridge0`: Thunderbolt Bridge

### Domain Knowledge Accumulation
- Read the XNU source code and documentation.
- Look for potential attack surfaces from XNU test cases: [GitHub Repository](https://github.com/apple/darwin-xnu/tree/xnu-7195.121.3/tests)

#### Example Test Cases
- Net agent: [Test Case 1](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/netagent_race_infodisc_56244905.c), [Test Case 2](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/netagent_kctl_header_infodisc_56190773.c)
- Net bridge: [Test Case](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/net_bridge.c)
- Net utun: [Test Case](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/net_tun_pr_35136664.c)
- IP6_EXTHDR_CHECK: [Test Case](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/IP6_EXTHDR_CHECK_61873584.c)

### Random, but Not Too Random
- The new generation of the Apple 80211 Wi-Fi fuzzing framework integrates over forty network interfaces and attack surfaces.
- In practice, covering too many attack surfaces in each test is not always beneficial.

### Conclusion One: Network Interfaces and Attack Surfaces
1. **Domain Knowledge:**
   - Accumulate as much domain knowledge as possible by studying XNU source code, documents, and test cases.
2. **Testing Strategy:**
   - Randomly select two or three interface units and test them thoroughly in each round.

### Kernel Debugging
- From source code learning and static analysis to remote kernel debugging.
- Make full use of LLDB and the Kernel Debug Kit (KDK).
  - Panic logs often do not provide enough information to find the root cause.
  - Dynamic analysis is necessary for variable (initial) values and kernel heap corruption.

#### Kernel Panic Example
- Without a kernel debugger, it can be challenging to resolve certain issues.

### Kernel Debug Kit
- **Note:** Apple silicon does not support active kernel debugging. You cannot set breakpoints, continue code execution, step into, step over, or step out of the current instruction.
- **Asahi Linux:** [Website](https://asahilinux.org/)
- **macOS Kernel Debugging Overview:** [Blog Post](https://blog.quarkslab.com/an-overview-of-macos-kernel-debugging.html)
- **LLDBagility: Practical macOS Kernel Debugging:** [Blog Post](https://blog.quarkslab.com/lldbagility-practical-macos-kernel-debugging.html)

### Conclusion Two: Static and Dynamic Analysis Methods
1. **LLDB and KDK:**
   - Utilize the LLDB kernel debugging environment, KDK, and public symbols for reverse engineering.
2. **Third-Party Solutions:**
   - At this stage, third-party solutions are needed for the Apple Silicon platform.

### Kernel Address Sanitizer (KASAN)
- The previous panic is a typical case of corruption, and KASAN can help.
- Sometimes, built-in tools/kernels do not work well, requiring fixes.
- Implementing a KASAN-like solution can dynamically monitor special features of third-party kernel extensions.

#### Obstacle Example
- `console_io_allowed()`: [Source Code](https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/osfmk/console/serial_console.c#L162)

### KASAN and Code Coverage Analysis
- **Kemon:** An open-source pre and post callback-based framework for macOS kernel monitoring.
  - [GitHub Repository](https://github.com/didi/kemon)
  - [Black Hat Arsenal Presentation](https://www.blackhat.com/us-18/arsenal/schedule/index.html#kemon-an-open-source-pre-and-post-callback-based-framework-for-macos-kernel-monitoring-12085)
- I have ported Kemon and the kernel inline engine to the Apple Silicon platform.

### Conclusion Three: Creating Tools
1. **Fixes:**
   - Built-in tools sometimes require fixes.
2. **Dynamic Monitoring:**
   - Implement KASAN-like solutions and code coverage analysis tools to monitor third-party closed-source kernel extensions.

### Apple SDKs and Built-in Tools
- **Apple80211 SDKs:**
  - Available for macOS 10.4 Tiger, 10.5 Leopard, and 10.6 Snow Leopard: [GitHub Release](https://github.com/phracker/MacOSX-SDKs/releases)
- **Built-in Network and Wi-Fi Tools:**

### Giving Back to the Community
- **Definitions:**
  ```c
  #define APPLE80211_IOC_COMPANION_SKYWALK_LINK_STATE             0x162
  #define APPLE80211_IOC_NAN_LLW_PARAMS                           0x163
  #define APPLE80211_IOC_HP2P_CAPS                                0x164
  #define APPLE80211_IOC_RLLW_STATS                               0x165
  ```

For more information, please refer to the provided links and resources.