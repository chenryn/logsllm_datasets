#BHUSA @BlackHatEvents
Dive into 
Apple IO80211Family
Vol. II
wang yu
#BHUSA @BlackHatEvents
Information Classification: General
About me
PI:EMAIL
Co-founder & CEO at Cyberserval
https://www.cyberserval.com/
Background of this research project
Dive into Apple IO80211FamilyV2
https://www.blackhat.com/us-20/briefings/schedule/index.html#dive-into-apple-iofamilyv-20023
#BHUSA @BlackHatEvents
Information Classification: General
The Apple 80211 Wi-Fi Subsystem
#BHUSA @BlackHatEvents
Information Classification: General
Previously on IO80211Family
Starting from iOS 13 and macOS 10.15 Catalina, Apple refactored the 
architecture of the 80211 Wi-Fi client drivers and renamed the new generation 
design to IO80211FamilyV2.
From basic network communication to trusted privacy sharing between all types 
of Apple devices.
#BHUSA @BlackHatEvents
Information Classification: General
Previously on IO80211Family (cont)
Daemon:
airportd, sharingd ...
Framework:
Apple80211, CoreWifi, CoreWLAN ...
-----------------------------
Family drivers V2:
IO80211FamilyV2, IONetworkingFamily
Family drivers:
IO80211Family, IONetworkingFamily
Plugin drivers V2:
AppleBCMWLANCore replaces AirPort Brcm series drivers
Plugin drivers:
AirPortBrcmNIC, AirPortBrcm4360 / 4331, AirPortAtheros40 ...
Low-level drivers V2:
AppleBCMWLANBusInterfacePCIe …
Low-level drivers:
IOPCIFamily …
#BHUSA @BlackHatEvents
Information Classification: General
Previously on IO80211Family (cont)
An early generation fuzzing framework, a simple code coverage analysis tool, and 
a Kemon-based KASAN solution.
Vulnerability classification:
1. Vulnerabilities affecting only IO80211FamilyV2
1.1. Introduced when porting existing V1 features
1.2. Introduced when implementing new V2 features
2. Vulnerabilities affecting both IO80211Family (V1) and IO80211FamilyV2
3. Vulnerabilities affecting only IO80211Family (V1)
#BHUSA @BlackHatEvents
Information Classification: General
Previously on IO80211Family (cont)
Some of the vulnerabilities I've introduced in detail, but others I can't disclose 
because they haven't been fixed before Black Hat USA 2020.
Family drivers V2:
IO80211FamilyV2, IONetworkingFamily
CVE-2020-9832
Plugin drivers V2:
AppleBCMWLANCore replaces AirPort Brcm series drivers
CVE-2020-9834, CVE-2020-9899, CVE-2020-10013
Low-level drivers V2:
AppleBCMWLANBusInterfacePCIe …
CVE-2020-9833
#BHUSA @BlackHatEvents
Information Classification: General
Two years have passed
All the previous vulnerabilities have been fixed, the overall security of the system has 
been improved. The macOS Big Sur/Monterey/Ventura has been released, and the 
era of Apple Silicon has arrived.
1. Apple IO80211FamilyV2 has been refactored again, and its name has been 
changed back to IO80211Family. What happened behind this?
2. How to identify the new attack surfaces of the 80211 Wi-Fi subsystem?
3. What else can be improved in engineering and hunting?
4. Most importantly, can we still find new high-quality kernel vulnerabilities?
#BHUSA @BlackHatEvents
Information Classification: General
Never stop exploring
1. Change is the only constant.
2. There are always new attack surfaces, and we need to constantly accumulate 
domain knowledge.
3. Too many areas can be improved.
4. Yes, definitely.
#BHUSA @BlackHatEvents
Information Classification: General
Dive into Apple IO80211Family (Again)
#BHUSA @BlackHatEvents
Information Classification: General
Attack surface identification
I'd like to change various settings of the network while sending and receiving data.
- Traditional BSD ioctl, IOKit IOConnectCallMethod series and sysctl interfaces
- Various packet sending and receiving interfaces
- Various network setting interfaces
- Various types of network interfaces
Please Make A Dentist Appointment ASAP: Attacking IOBluetoothFamily HCI and 
Vendor-Specific Commands
https://www.blackhat.com/eu-20/briefings/schedule/#please-make-a-dentist-appointment-asap-attacking-
iobluetoothfamily-hci-and-vendor-specific-commands-21155
#BHUSA @BlackHatEvents
Information Classification: General
ifioctl()
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/bsd/net/if.c#L2854
ifioctl_nexus()
https://github.com/apple-oss-distributions/xnu/blob/main/bsd/net/if.c#L3288
skoid_create() and sysctl registration
https://github.com/apple-oss-distributions/xnu/blob/main/bsd/skywalk/core/skywalk_sysctl.c#L81
Some new cases
#BHUSA @BlackHatEvents
Information Classification: General
Interfaces integration
I'd like to switch the state or working mode of the kernel state machine randomly for 
different network interfaces.
#BHUSA @BlackHatEvents
Information Classification: General
ifconfig command
ap1: Access Point
awdl0: Apple Wireless Direct Link
llw0: Low-latency WLAN Interface. (Used by the Skywalk system)
utun0:Tunneling Interface
lo0: Loopback (Localhost)
gif0: Software Network Interface
stf0: 6to4 Tunnel Interface
en0: Physical Wireless
enX: Thunderbolt / iBridge / Apple T2 Controller
Bluetooth PAN / VM Network Interface
bridge0: Thunderbolt Bridge
#BHUSA @BlackHatEvents
Information Classification: General
Domain knowledge accumulation
Read the XNU source code and documents.
Look for potential attack surface from XNU test cases:
https://github.com/apple/darwin-xnu/tree/xnu-7195.121.3/tests
#BHUSA @BlackHatEvents
Information Classification: General
Some examples
net agent:
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/netagent_race_infodisc_56244905.c
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/netagent_kctl_header_infodisc_56190773.c
net bridge:
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/net_bridge.c
net utun:
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/net_tun_pr_35136664.c
IP6_EXTHDR_CHECK:
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/tests/IP6_EXTHDR_CHECK_61873584.c
#BHUSA @BlackHatEvents
Information Classification: General
Random, but not too random
So far, the new generation of Apple 80211 Wi-Fi fuzzing framework integrates 
more than forty network interfaces and attack surfaces.
One more thing. Is the more attack surfaces covered in each test the better?
In practice, I found that this is not the case.
#BHUSA @BlackHatEvents
Information Classification: General
Conclusion one
- About network interfaces and attack surfaces
1. We need to accumulate as much domain knowledge as possible by learning 
XNU source code, documents and test cases.
2. For each round, we should randomly select two or three interface units and test 
them as fully as possible.
#BHUSA @BlackHatEvents
Information Classification: General
Kernel debugging
From source code learning, static analysis to remote kernel debugging.
Make full use of LLDB and KDK:
- The information provided in the panic log is often not helpful in finding the 
root cause
- Variable (initial) value sometimes require dynamic analysis
- Kernel heap corruption requires remote debugging
#BHUSA @BlackHatEvents
Information Classification: General
A kernel panic case
Without the help of the kernel debugger, there is probably no answer.
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
Kernel Debug Kit
"Note: Apple silicon doesn’t support active kernel debugging. … you cannot set 
breakpoints, continue code execution, step into code, step over code, or step out 
of the current instruction."
Asahi Linux
https://asahilinux.org/
An Overview of macOS Kernel Debugging
https://blog.quarkslab.com/an-overview-of-macos-kernel-debugging.html
LLDBagility: Practical macOS Kernel Debugging
https://blog.quarkslab.com/lldbagility-practical-macos-kernel-debugging.html
#BHUSA @BlackHatEvents
Information Classification: General
Conclusion two
- About network interfaces and attack surfaces
- About static and dynamic analysis methods
1. We should make full use of LLDB kernel debugging environment, KDK and public 
symbols for reverse engineering.
2. At this stage, we need the help of third-party solutions for the Apple Silicon platform.
#BHUSA @BlackHatEvents
Information Classification: General
Kernel Address Sanitizer
The previous panic is a typical case of corruption, and we need help from KASAN.
However, we need to do some fixes because sometimes the built-in tools/kernels 
don't work very well.
We even need to implement KASAN-like solution to dynamically monitor special 
features of third-party kernel extensions.
#BHUSA @BlackHatEvents
Information Classification: General
console_io_allowed()
https://github.com/apple/darwin-xnu/blob/xnu-7195.121.3/osfmk/console/serial_console.c#L162
An obstacle case
static inline bool
console_io_allowed(void)
{
if (!allow_printf_from_interrupts_disabled_context &&
!console_suspended &&
startup_phase >= STARTUP_SUB_EARLY_BOOT &&
!ml_get_interrupts_enabled()) {
#if defined(__arm__) || defined(__arm64__) || DEBUG || DEVELOPMENT
panic("Console I/O from interrupt-disabled context");
#else
return false;
#endif
}
return true;
}
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
KASAN and code coverage analysis
Kemon: An Open Source Pre and Post Callback-based Framework for macOS 
Kernel Monitoring
https://github.com/didi/kemon
https://www.blackhat.com/us-18/arsenal/schedule/index.html#kemon-an-open-source-pre-and-post-
callback-based-framework-for-macos-kernel-monitoring-12085
I have ported Kemon and the kernel inline engine to the Apple Silicon platform.
#BHUSA @BlackHatEvents
Information Classification: General
Conclusion three
- About network interfaces and attack surfaces
- About static and dynamic analysis methods
- About creating tools
1. We need to do fixes because sometimes the built-in tools don't work very well.
2. We even need to implement KASAN-like solution, code coverage analysis tool to 
dynamically monitor third-party closed source kernel extensions.
#BHUSA @BlackHatEvents
Information Classification: General
Apple SDKs and build-in tools
Apple80211 SDKs (for 10.4 Tiger, 10.5 Leopard and 10.6 Snow Leopard)
https://github.com/phracker/MacOSX-SDKs/releases
Build-in network and Wi-Fi tools
#BHUSA @BlackHatEvents
Information Classification: General
Giving back to the community
#define APPLE80211_IOC_COMPANION_SKYWALK_LINK_STATE             0x162
#define APPLE80211_IOC_NAN_LLW_PARAMS                           0x163
#define APPLE80211_IOC_HP2P_CAPS                                0x164
#define APPLE80211_IOC_RLLW_STATS                               0x165