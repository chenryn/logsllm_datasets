whileI(c =Egetc(in))1= E0F)
fputc(c,out) ;
exit (0) ;
像前面那样运行这个程序，我们得到的结果是：
time copy_stdio
1.69user 0.78system 0:03.70elapsed 66tCPU
这一次，程序运行了3.7秒种，不如底层系统调用的数据块拷贝程序快，但与那个一次拷贝
一个字符的版本相比可快得太多了。这是因为stdio库在FILE结构里使用了个内部的缓冲区，
只有在缓冲区填满的时候才进行底层系统调用。请读者利用stdio库函数自行编写出实现逐行拷
贝和数据块拷贝两种功能的程序，看它们与我们在这一章里给出的三个程序示例相比性能到底
如何。
3.5.12文件流错误处理
为了表明有一个错误，许多stdio库函数会返回一个超范围的值，比如空指针或EOF常数等。
在这些情况下，错误类型由外部变量crmmo指出。它的语法是：
#include 
extern int errno;
注意：有许多函数可以改变errmo的值。这个变量的值只有在函数操作失败的情况
下才有意义。你必须在函数表明操作失败之后立刻对它进行检查。在使用检查它之前，
永远应该先把它拷贝到另外一个变量里去，因为像fprintf等这样的输出函数自己就会改
交errno的值。
我们也可以通过检查文件流的状态来确定是否发生了错误，是否到达了文件尾。
include
int farror(rlur*streaa))
vold clearezr(rILE *stroun);
ferror库函数对文件流的出错指示器进行测试.如果它被置位，就返回非零值：否则返回零。
feof库函数在一个文件流里对它的文件尾指示器进行测试，如果它被置位，就返回非零值；
否则返回零。我们可以像下面这样使用它：
if (feof(somo_atream))
/* We're at the end */
clearerr库函数的作用是重置由stream指定的文件流的文件尾指示器和出错指示器。它没有返
加入jaVa编程群：524621833
---
## Page 109
90Linux程序设计
回值，也没有定义任何错误。我们可以通过它从文件流上的错误情况中恢复过来。比如说，在
磁盘数据满错误解决之后重新开始写文件流就是一个这样的例子。
3.5.13文件流和文件描述符的关系
每个文件流都和一个底层文件描述符相互关联着。我们完全可以把底层的输人输出操作与
高层的文件流操作混在一起使用，但一般说来这并不是个聪明的办法，因为它会使数据缓冲的
后果滩以预料。
#include
int fileno(FILE*strean);
PILz*fdopen(int fildes,const chax *mode);
我们可以通过调用fileno函数确定文件流使用的是哪个底层文件描述符。它返回的是给定文
件流使用的文件描述符，“-1”表示调用失败。在需要对一个已经打开的文件流进行底层访问操
作的时候（比如说想对它调用fstat的时候）这个函数还是很有用的。
我们还可以通过调用fdopen函数在一个已经打开的文件描述符的基础上创建-个新的文件
流。这个函数的基本作用是为一个已经打开的文件述符提供一个stdio缓冲区，这样对它的读
写操作可能比较容易进行一些。
fdopen函数的执行情况与fopen函数是一样的，只是前者的参数不是一个文件名而是一个底
层的文件描述符。在我们已经通过open系统调用创建了一个文件-一-可能是出于为了更好地控制
其访问权限的目的，但又想通过文件流来对它进行读写操作，这时就用得着这个函数了。fdopen
函数的mode参数与fopen函数使用的完全一样，同时还必须符合该文件在最初创建时所设定的权
限配置情况。fdopen返回一个新的文件流，“NULL”表示调用失败。
3.6文件和子目录的维护
各种标准库和系统调用为文件和子目录的创建与维护提供了全面的控制。
3.6.1chmod系统调用
我们可以通过chmod系统调用对文件或子目录的访问权限进行修改。它构成了shell程序
chmod的基础。
#include
int chmod (conat char *path, mode_t mode )/
path参数指定的文件在函数调用结束后被修改为具有mode参数给出的访问权限。参数mode
的设置类似于open系统调用中的做法，也是对所要求的访问权限进行按位OR操作。如果没有给
这个程序以适当的优先权，就只有文件的属主或超级用户才能修改它的访问权限。
3.6.2chown系统调用
超级用户可以使用chown系统调用改变一个文件的属主。
加入jaVa编程群：524621833
---
## Page 110
第3章如何使用和处理文件91
include 
int chown (const char *path, uid_t owmer, gid_t gzoup }
这个调用要用到用户ID和分组ID（通过getuid和getgid调用获得）的数字值和一个用来限定
谁可以修改文件访问权限的常数。如果已经设置了适当的优先权，文件的属主和所属分组就会
发生变化。
一切“正常的”POSIX系统都不允许这样做，但严格地说，这是它的一个补充规定（FIPS151-2）
里要求的。我们在这本书里讨论的系统其类型都符合XSI（X/OpenSystcemInterface，X/Open系
统操作接口）原则，并且它们都强调遵守文件的所有权规则。
3.6.3unlink、link、symlink系统调用
我们可以用unlink系统调用来删除一个文件。
include 
int unlink(conat char *path);
int syalink(const char *pathl, const char *path2）
const char *path2);
unlink系统调用的作用是通过减少指定文件上的链接计数到达剩除目录数据项的目的。如果
个函数删除子目录中某个文件所对应的目录数据项，就必须拥有这个子目录的写和执行权限。
如果某个文件上的链接计数减少到零，并且没有进程打开并使用着它，这个文件就会被删
除掉。在实际操作中，目录数据项肯定是被删除掉了，但文件占用空间还要等最后一个进程
（如果有的话）关闭它之后才会被系统回收。rm程序使用的就是这个调用。文件上额外的链接表
示这个文件还有其他名字，这通常是由b程序创建的。如果我们想通过编程来创建某个文件的新
链接，可以使用link系统调用。
先用open创建一个文件，然后对它调用unlink是某些程序员用来创建瞬时文件的技巧。这些
地删除掉。
link系统调用将创建一个指向由pathi指定的现有文件的新链接。新目录数据项由path2给出。
我们可以通过symlink系统调用以类似的方式创建新的符号链接。注意：一个文件的符号链接不
会像正常（硬）链接那样能够防止该文件被删除掉。
3.6.4mkdir和rmdir系统调用
我们可以通过mkdir和rmdir系统测用建立和删除子目录。
#include 
Int nkdir (const char *patb, mode_t mode )1
mkdir系统调用的作用是创建一个子目录，它相当子mkdir程序。mkdir调用将使用path做为
新建子月录的名字。子目录的权限由参数mode设定，mode的内容将按open系统调用的，
加入jaVa编程群：524621833
---
## Page 111
92Linux程序设计
O_CREAT选项中的有关定义设置，当然，还要看umask的设置情况是怎样的才行。
#include 
Int rmdir (const cbsr *path 1;
rmdir系统调用的作用是删除子目录，但只有在子目录中没有文件的情况下才行。rmdir程序
就是用这个系统调用来完成工作的。
3.6.5chdir系统调用和getcwd函数
一个程序，它完全可以像一个用户在UNIX文件系统里漫游那样对子目录进行切换。我们在
shell里通过cd命令切换子目录，程序则可以使用chdir系统调用。
include 
int cbdir （const cbar *path ）;
一个程序可以通过调用getcwd函数确定自己的当前工作子日录。
include 
int *getcwd （char *buf,size_t aize )1
getcwd函数的作用是把当前子目录的名字写到给定的缓冲区buf里。如果子月录的名字超出
了参数size给出的缓冲区长度（这是一个ERANGE错误），它就返回“null”。如果操作成功，它
返回指针buf。
如果子目录被测除（出现EINVAL错误）或者在程序运行过程中有关权限发生了变
化（出现EACCESS错误），getcwd也会返回“null”
3.7扫描子目录
在UNIX系统上经常遇到的一个问题就是需要对子目录进行扫描，也就是确定文件被存放在
那个子目录里。在shell程序设计中，这很容易做到-让shel做一次表达式的通配符扩展就可以
搞据。在以前，UNIX操作系统的各种变体版本都曾允许用户通过编程去访问文件系统的底层结
构，我们现在依然可以把子目录当作一个普通文件那样打开并直接读取其目录数据项，可多种
多样的文件系统结构及其实现方法已经使这种办法没什么可移植性了。现在，一整套标准的库
函数被开发出来，把子目录的扫描工作变得简单多了
与子日录操作有关的函数是在一个名为dirent.h的头文件里被声明的。它们使用一个名为
DIR的结构做为子目录处理操作的基础。一个被称之为“子目录流”（directory stream）的指向
这种结构的指针（这是一个“DIR*”类型的数据）被用来完成各种普通的子目录操作，其工作
原理与文件流（“FILE*”指针）差不多。目录数据项本身被返回保存在dirent结构里，该结构
也是在dirent.h文件里定义的。永远不要直接改动DIR结构里的数据域。
我们将学习下面这几个函数：
opendir和closedir。
* readdif。
加入jaVa编程群：524621833
---
## Page 112
第3章如何使用和处理文件
93
 telldir.
* seekdir。
3.7.1opendir函数
opendir函数的作用是打开一个子目录并建立一个子目录流。如果成功，它将返回一个指向
一个DIR结构的指针，目录数据项的读操作就是通过这个指针来完成的。
opendir在失败时会返回一个空指针。需要注意的是，子目录流使用了一个底层的文件描述
符来访问子目录本身，所以如果打开的文件过多，opendir就可能会失败。
3.7.2readdir函数
#include 
#include 
struct dirant *readdir(DIR*dirp)1
readdir函数将返回一个指针，指针指向的结构里保存着子目录流dirp中下一个目录数据项的
有关资料。后续的readdir调用将返回后续的目录数据项。如果发生错误，或者到达子目录尾，
readdir将返回“NULL”值。POSIX兼容系统在到达子目录尾时会返回“NULL"，但不改变
errno的取值：只有在发生错误时才设置errno的取值。
注意，如果在readdir函数扫描子目录的同时还有其他进程在那个子目录里创建或删除着文
件，readdir将不保证能够列出该子目录里的所有文件（和下级子目录）。
dirent结构中包含着的目录数据项内容包括以下数据：
"ou!.
d_ino
文件的inode
·char
d_name[]
文件的名字
要想进一步查明子目录中某个文件的详细资料，还需要再使用一个stat系统调用。
3.7.3telldir函数
long int telldir(Dik *dirp)/
telldir函数的返回值里记录着子目录流里的当前位置。我们可以在随后的seekdir调用里利用
这个值对当前位置再做一次子目录扫描。
3.7.4seekdir函数
#include 
加入jaVa编程群：524621833
---
## Page 113
94
Linux程序设计
void seekdir(DIR *dirp, long int loc)1
seekdir函数的作用是对dirp指定的子目录流中的目录数据项的指针进行设置。loc的值用来设
置指针位置，它应该通过前一个telidir调用获得。
3.7.5closedir函数
#include 
include 
int closedix(DIR *dirp);
closedir函数的作用是关闭一个子目录流并释放与之关联的资源。它在执行成功时返同“0”
如果发生错误就返回“-1”。
在下面那个printdir.c程序里，我们把许多文件处理函数集中在一起使用，目的是得到一个简
单的子目录内容清单。子目录中的每个文件单独列在一行上。如果是一个下级子目录，会在它
的名字后面加上-一个斜线字符“”，下级子日录中的文件在缩进四个空格后依次排列。
程序会逐个切换到每一个下级子目录里，这样使它找到的文件都有一个可用的名字，也就
是说，它们都可以被直接传递到opendir函数里去。如果子目录的嵌套结构太深，程序执行时就
会失败，因为允许打开的子目录流的个数是有一个上限的。
我们当然可以采取一个更通用的做法，让我们的程序能够通过一个命令行参数来指定出发
点。如果读者打算编写一个更具通用性的程序，请查阅有关工具程序（如ls和find等）的Linux源
代码找找灵感。
动手试试：一个子目录扫描程序
1）程序的开始是一些必要的头文件。接下来是一个printdir函数，它的作用是给出当前子目
录的内容清单。它将递归遍历各个下级子目录，depth参数用来控制输出清单中的空格缩进。
#include 
include 
tinciude 
include 
#include 
#include 
void printdir(char *dir. int depth)
struet dirent *entry:
DIR *dp;
if((dp = opendir[dir)} = NULL) {
fprintf(stderr,*cannot open directory:ke\n′, dir):
return;
chdir(dir) :
whilef(entry =readdir（dp}}1 NULL)(
if(S_IsDIR（statbuf.st_node))(
lstat [entry->d_name,kstatbuf);
/Found a directory.but ignore
if(strenp(*.*.entry->d_name)re 01]
pue
strcep(*..*,entry->d_name) s= 0)
printf(*#*ses/\n*,depth,**,entry->d_name);
Contimse:
加入jaVa编程群：524621833
---
## Page 114
第3章如何使用和处理文件
95
/*Recurse at a new indent level
printdir(entry->d_name, depth+4) ;
else printf (*4*sts\n*,depth,**,entry->d_nane);
closedir(dp):
chdir(*..*):
2）现在轮到我们的main函数：
nt main()
printf(*Dizectory scan of /home/neil:\n*);
printdir(*/home/nei1*,0):
printf(*done.\n*}: