### Mach-O Malware Analysis: Combatting Mac OSX/iOS Malware with Data Visualization

#### Defcon 2013
**Mach-O Malware Analysis:**
Combatting Mac OSX/iOS Malware with Data Visualization

**Remy Baumgarten, Security Engineer, ANRC LLC.**

**Draft Date: April 2, 2013**

---

### Introduction

Apple has successfully integrated both its mobile and desktop platforms into our homes, schools, and work environments. With such a dominant presence, it is no surprise that Apple's operating systems, macOS and iOS, have become targets for malware developers and network intruders. Many organizations and enterprises that have implemented BYOD (Bring Your Own Device) policies have often overlooked the security measures needed to protect their network infrastructure from these potential insider threats.

The complexity of analyzing Mach-O (Mach object file format) binaries and the increasing prevalence of Mac-specific malware have created a real need for new tools to assist in the rapid identification of malicious content. In this paper, we introduce Mach-O Viz, an interactive data visualization tool designed to help security engineers quickly and efficiently identify potentially malicious Mach-O files on the network, desktop, and mobile devices of connected users.

---

### Why a New Tool?

At ANRC, we have been addressing the Mach-O malware problem internally through our research and development efforts. We understand the challenges posed by introducing these binaries into networks that are not equipped to process them through standard defense systems. Given the widespread use of Windows-centric security appliances and the complex file specification from Apple, we felt the need to delve deeper into the problem by:

- Examining and evaluating existing tools for deciphering the Mach-O format.
- Finding working examples of security products capable of processing Mach-O malware.
- Identifying a tool that can analyze these files regardless of the underlying architecture.
- Researching better ways to view the internal structure of Mach-O files.

We evaluated various Mach-O tools to aid in the analysis of potentially malicious binaries on i386, x86_64, and ARM architectures. The following chart summarizes our initial research and helped guide the design and development of Mach-O Viz.

| Tool         | Graphic | Multiple Architectures | Network Security Aware | Easy to Understand | Ease of Use |
|--------------|---------|------------------------|------------------------|--------------------|-------------|
| IDA Pro      | Yes     | Yes                    | No                     | No                 | No          |
| otool        | No      | Yes                    | No                     | No                 | No          |
| class-dump   | No      | ObjC Only              | No                     | Yes                | Yes         |
| Machoview    | Yes     | Yes                    | No                     | No                 | Yes         |
| ptool        | No      | Yes (old/no support)   | No                     | No                 | Yes         |
| otool-ng     | No      | Yes (old/no support)   | No                     | No                 | No          |
| Hopper       | Yes     | Yes                    | No                     | No                 | No          |

*Figure 1: Evaluation of existing Mach-O tools (Green = Meets Need, Red = Does Not Meet, Yellow = Some Need Met)*

The design of Mach-O Viz focused on combining the advantages of these tools and adding a focus on network security. The goal is to help network defenders better understand the Mach-O file format and provide an effective and efficient method for analyzing binaries for malicious behavior. A key element in the design was the need for a simple interface with a powerful and accurate data analytics engine, yielding results comparable to an advanced disassembler. Additionally, we wanted to make the tool free to the public to increase security awareness and benefit the reversing community.

---

### Introducing Mach-O Viz

Mach-O Viz was developed to present Mach-O binaries visually, making it easier for anyone to see how the file is constructed—from the header through the load commands and into all corresponding segments. In addition to visualizing the file itself, we wanted a powerful backend graph visualization and analytics system for graphing the binary’s disassembly for the top three platforms: i386, x86_64, and ARM6/7. The fundamental component was to keep the process as visual as possible while maintaining a user-friendly interface.

With data visualization in mind, the next challenge was to make the tool as cross-platform as possible. We aimed for client access to the interface to be simple, regardless of the platform (mobile, desktop, Android, macOS, etc.).

---

### Demonstrating Mach-O Viz’s Features

#### Analysis of CustomInstaller (a.k.a. Yontoo Trojan)

...

#### Analysis of keychain_dumper: iOS Hacker Utility

...

#### Analysis of MacDefender: macOS’s First Malware Threat

...

### Mach-O Viz: Where To Go From Here

...

### Conclusions

...

### About ANRC

...

### Contact

...

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.