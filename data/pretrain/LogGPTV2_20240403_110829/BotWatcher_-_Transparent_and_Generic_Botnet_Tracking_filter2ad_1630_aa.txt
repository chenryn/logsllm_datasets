title:BotWatcher - Transparent and Generic Botnet Tracking
author:Thomas Barabosch and
Adrian Dombeck and
Khaled Yakdan and
Elmar Gerhards-Padilla
BOTWATCHER
Transparent and Generic Botnet Tracking
Thomas Barabosch1(B), Adrian Dombeck1, Khaled Yakdan1,2,
and Elmar Gerhards-Padilla1
1 Fraunhofer FKIE, Bonn, Germany
{thomas.barabosch,adrian.dombeck,
elmar.gerhards-padilla}@fkie.fraunhofer.de
2 University of Bonn, Bonn, Germany
PI:EMAIL
Abstract. Botnets are one of the most serious threats to Internet secu-
rity today. Modern botnets have complex infrastructures consisting of
multiple components, which can be dynamically installed, updated, and
removed at any time during the botnet operation. Tracking botnets is
essential for understanding the current threat landscape. However, state-
of-the-art analysis approaches have several limitations. Many malware
analysis systems like sandboxes have a very limited analysis time-out,
and thus only allow limited insights into the long-time behavior of a
botnet. In contrast, customized tracking systems are botnet-speciﬁc and
need to be adopted to each malware family, which requires tedious man-
ual reverse engineering.
In this paper, we present BotWatcher, a novel approach for trans-
parent and generic botnet tracking. To this end, we leverage dynamic
analysis and memory forensics techniques to execute the initial malware
sample and later installed modules in a controlled environment and reg-
ularly obtain insights into the state of the analysis system. The key idea
behind BotWatcher is that by reasoning about the evolution of system
state over time, we can reconstruct a high-level overview of the botnet
lifecycle, i.e., the sequence of botnet actions that caused this evolution.
Our approach is generic since it relies neither on previous knowledge of
the botnet nor on OS-speciﬁc features. Transparency is achieved by per-
forming outside-OS monitoring and not installing any analysis tools in
the analysis environment. We implemented BotWatcher for Microsoft
Windows and Mac OS X (both 32- and 64-bit architectures), and applied
it to monitor four botnets targeting Microsoft Windows. To the best of
our knowledge, we are the ﬁrst to present a generic, transparent, and
fully automated botnet tracking system.
Keywords: Botnet tracking · Memory forensics · Malware analysis
1 Introduction
Botnets are a major threat to today’s Internet security. They are used for a
wide range of malicious purposes, e.g., launching of denial-of-service attacks on
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 565–587, 2015.
DOI: 10.1007/978-3-319-26362-5 26
566
T. Barabosch et al.
networked computers, committing click-fraud, sending spam, and distributing
malware. Recent studies estimated that some botnets contain in the order of a
million infected systems [25], illustrating the magnitude of the botnet threat.
Modern botnets are increasingly complex and comprise several modules that
can be installed, removed, and updated on the infected system at run time.
This complex and modular structure helps to achieve a high resilience against
takedown attempts by security researchers and law enforcement [25]. Also, it
hampers the time-critical and diﬃcult task of timely botnet analysis.
Tracking botnets is essential for understanding the current threat landscape.
It provides valuable information about the botnet lifecycle, i.e., the botnet
infrastructure, its malicious actions, and the distributed malware. Understand-
ing the botnet lifecycle is an important building block for developing eﬀective
countermeasures and performing successful takedowns. Previous work presented
customized tracking systems for speciﬁc botnets [15,17]. These solutions are
highly manual and require knowledge of the inner workings of the tracked botnet.
For this reason, they cannot cope with the dynamic nature of modern botnets,
which may install new and previously unknown components at any time. More-
over, these solutions must be adopted to each malware family, and thus do not
scale well when analyzing unknown botnets, i.e., botnets whose infrastructure
and lifecycle are not yet known. Existing malware analysis systems like sand-
boxes have a very limited analysis time-out (often ﬁve minutes or less). For this
reason, they can only provide limited insights into the long-time behaviour of
a botnet. Moreover, evasive malware leverages the fact that dynamic analysis
systems monitor execution for a limited amount of time, and employ several
timing attacks to delay execution of suspicious functionality and evade sandbox
analysis [21]. While modern sandboxes can detect several evasion techniques
and patch them to elicit the malicious behavior, they cannot inﬂuence timing
attacks on the server side. A C&C server may delay the delivery of actual botnet
components several hours or days when a new bot joins the botnet, which will
be missed by analysis sandboxes. Rossow et al. [26] presented an approach for
generic and long-term botnet monitoring. They used this system to characterize
several Windows-based malware downloaders concerning their communication
architectures, carrier protocols and encryption schemes. However, this approach
is based on a kernel rootkit and does not follow the transparency goal.
In this paper, we present BotWatcher, a novel approach for generic and
transparent tracking of botnets. The main intuition behind our approach is that
program execution and interaction with the operating system (OS) aﬀect the
system state. By observing the evolution of this state over time, we can recon-
struct a high-level overview about the series of high-level actions that caused this
evolution. To this end, BotWatcher executes an initial malware sample in a
controlled analysis environment (virtual machine) and continuously takes snap-
shots of the system state. We then compare subsequent system states to extract
low-level events that caused the state change (e.g., connection establishment or
thread termination). By reasoning about the evolution of these low-level events
over time, BotWatcher infers the corresponding high-level behaviour such as
BotWatcher: Transparent and Generic Botnet Tracking
567
malware downloads and DDoS attacks. For example, the sequence of establishing
a network connection, downloading a ﬁle from the Internet, and starting a new
process is inferred as a MalwareDownload event. As transparency is a key
requirement to avoid detection from malware, we do not introduce any malware
analysis tools in the analysis environment and perform outside-OS monitoring,
i.e., monitoring the analysis environment from the outside. BotWatcher is
a generic approach. First, no previous knowledge about the botnet is required
and thus it can be used to analyze unknown botnets. Second, BotWatcher
represents the system state using a set of concepts that are shared among most
modern operating systems, e.g., threads, processes, and ﬁles. Therefore, it can
be applied to a wide range of operating systems. We extract system state infor-
mation from two sources: the main memory of the analysis environment and the
network traﬃc. To this end, we leverage memory forensic techniques to extract
state-related information from the main memory. This serves as abstraction layer
and enables us to implement our analyses in an OS-independent way.
In summary, we make the following contributions:
– We present a novel approach – called BotWatcher – for transparent and
generic botnet tracking. Our approach reconstructs the series of botnet actions
by reasoning about the evolution of the system state. To this end, we leverage
dynamic analysis and memory forensics techniques to periodically record the
state of the analysis system.
– We present a set of inference rules to reconstruct high-level malware behaviors
based on the observed diﬀerences between two consequent system states.
– We evaluated a prototype of BotWatcher on Microsoft Windows and Mac
OS X (both 32- and 64-bit architectures). We demonstrate the applicability
and eﬃcacy of BotWatcher by using it to track four current botnets from
the families Upatre, Gamarue, Emotet and Necurs. Our experiments reveal a
trend in modern botnets to move evasion techniques to the server side, which
renders client-side anti-evasion techniques employed by analysis sandboxes
ineﬀective.
2 BotWatcher
In this section, we introduce our design goals and then describe our approach
BotWatcher in detail.
2.1 Objectives
The focal point of this paper is on generic and transparent botnet tracking.
In our context, we aim to gain insights into the behaviour of the botnet under
investigation and identify its life-cycle. We deﬁne the life-cycle of a botnet as the
sequence of its actions over time, such as participating in DDoS attacks, sending
spam, and installing new malware, etc.
The main goal of our work is to design a botnet tracking system that fulﬁls
two key requirements: First, the tracking method must be generic. That is, it
568
T. Barabosch et al.
must not assume any previous knowledge about the botnet under investigation.
This is essential for having a scalable solution that can automatically track new
and previously unknown botnets. Due to the diversiﬁcation of operating systems,
a second important aspect of this requirement is that the tracking logic should
be applicable to many operating systems. This implies that it should not rely
on OS-speciﬁc features.
The second requirement is that the tracking method must be transparent.
That is, it must be impossible (or very diﬃcult) for a malware to detect that it
is running in an analysis environment. Otherwise, a malware can easily refrain
from executing its malicious payload. This requires that (1) no analysis tools
are installed in the analysis environment; and (2) the tracking approach should
operate on a more privileged level than the observed malware.
We strive to ﬁll the gap and address the shortcomings of current approaches.
Customized tracking approaches are too speciﬁc and cannot be easily adapted
to track new botnets. Traditional malware analysis systems only observe the
malware during a very short period of time. We argue that a trade-oﬀ between
both approaches is possible to have a botnet tracking system that fulﬁlls the
above mentioned requirements.
Fig. 1. Architecture of BotWatcher. BotWatcher executes an initial sample in a
controlled environment and then periodically takes a snapshot of the system state of
. By comparing subsequent state snapshots, we identify
the analysis environment
the set of execution events that represent the state transition Eex (e.g., process cre-
. By reasoning about the evolution of these events, BotWatcher infers the
ation)
corresponding high-level behaviour Bh (e.g. MalwareDownload)
. Finally, the
analyst is notiﬁed
.
2.2 General Overview
A high-level overview of BotWatcher is given in Fig. 1. First, we execute an
initial malware sample in a controlled analysis environment (virtual machine [5])
BotWatcher: Transparent and Generic Botnet Tracking
569
with Internet connectivity. The initial malware is typically a dropper that serves
as an entry point to the botnet. Second, BotWatcher takes a snapshot of the
system state at regular intervals (Sect. 2.3). This system state includes infor-
mation such as the list of running processes or active network connections.
Third, we compare the current and last snapshots to infer the set of events
that caused the state transition (Sect. 2.4). We denote these events by execution
events, which include starting a new process and closing a network connection.
Finally, BotWatcher reasons about the execution events to infer more complex
and interesting events related to the botnet life-cycle (Sect. 2.5). For example,
the sequence opening a network connection, downloading a ﬁle, and then starting
a new process is inferred as a MalwareDownload event.
To address the genericity requirement, BotWatcher represents the system
state as a set of concepts that are shared by most modern operating systems
such as processes, threads, and ﬁles. We leverage memory forensic techniques
to extract this information from the main memory of the analysis environment.
Additionally, we extract relevant information from the network traﬃc passing
through the analysis environment. This serves as abstraction layer that allows
to build subsequent analysis steps independently from the target operating sys-
tem. Moreover, the reliance on such generic features enables BotWatcher to
monitor new and unknown botnets since no previous knowledge is needed.
Extracting system state information from the main memory and network
activity of the virtual analysis environment helps to fulﬁll the transparency
requirement since it allows to perform outside-OS monitoring. Moreover, we
do not introduce any analysis tools into the virtual analysis environment. This
makes it diﬃcult for malware to detect that it is being analyzed by ﬁngerprinting
the execution environment. A key motivation for developing our system is that
it is very diﬃcult for malware to hide the artifacts left in memory as a result
of its execution. They are therefore reliable and robust sources of information
about the behavior of the malware.
2.3 Phase I: Feature Extraction
The ﬁrst phase of BotWatcher is to record the system state of the analysis
environment at regular intervals. We deﬁne the system state at given point in
time t, denoted by S (t), as the set of execution features that exist in the system
at that time. Execution features represent system properties that are created,
changed, and removed as a result of program execution, e.g., running processes,
ongoing network connections, or opened ﬁles.
A key property of BotWatcher is that it performs outside-OS monitoring.
That is, it does not extract any information from inside the analysis environment.
It rather observes the analysis environment from the outside so as to remain
transparent to the running malware. To this end, we use two reliable sources
of information to extract execution features; the main memory of the analysis
environment and the network traﬃc it sends or receives. This approach has two
advantages: ﬁrst, no modiﬁcations are introduced into the analysis environment,
making it extremely diﬃcult for the malware to detect that it is running in
570
T. Barabosch et al.
an analysis system. Second, memory and network traﬃc are reliable sources of
information that provide host-based and network-based views into the system
state.
The main memory is the primary source of information used by BotWatcher.
Operating systems maintain several data structures in memory to manage many
aspects of their operation. This provides a wealth of information about the system