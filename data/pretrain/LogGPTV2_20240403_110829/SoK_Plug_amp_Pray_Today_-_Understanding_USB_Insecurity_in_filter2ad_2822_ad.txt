this result
demonstrates that uniform appearance and ordering of control
transfers during USB enumeration will make distinguishing
between operating system families more difﬁcult. Timing
randomization can also potentially defeat timing-based ﬁnger-
printing. As a host/device can arbitrarily speed up or slow
down USB transfers,
it could confuse would-be attackers
by varying its timing characteristics. However, as the USB
spec imposes requirements regarding message ordering and
timing, extreme behavior randomization may break the normal
operation of the device.
2) Secure Channel: To defend against USB bus eaves-
dropping, Cinch [12] considers adapting encryption and au-
thentication schemes to the physical peripheral connections.
A Cinch gateway is used as an encryption and decryption
proxy on the host side, and a small crypto adapter (similar
to a keylogger) to act as the peripheral’s encryption and
decryption proxy. As a result, a malicious USB bus or other
USB devices would only have access to encrypted trafﬁc
and could not produce authenticated messages. Similarly, the
UScramBle [82] system defends against eavesdropping of
downstream trafﬁc by instructing the host to negotiating an
encryption key with the device during USB enumeration.
SECURING USB SUMMARY
Based on this survey, we identify several defensive primi-
tives that are leveraged in USB security solutions. Table II pro-
vides a mapping of notable defenses to the layer and primitive
to which they correspond. Further, we evaluate USB attacks
and defenses using these primitives in Table III. We deﬁne a
complete defense as a solution designed to defend against a
certain attack completely. A partial defense means a solution
works in general but does not provide a complete mitigation.
Reliable detection refers to mechanisms designed to detect a
certain attack with low false positive rate. Partial detection
means mechanisms only work in certain circumstances. Note
that even a complete defense or a reliable detection may not
be 100% perfect, and still works under certain assumptions.
They may also become partial solutions in the future as new
attacks emerge.
For example, on-device host authentication can detect in-
sider attacks, provided the provenance mechanism is able to
record each I/O operation, and is not disabled or bypassed.
This also assumes an enterprise environment where only
IT certiﬁed USB devices, such as ProvUSB, can be used.
Firmware veriﬁcation can help mitigate attacks against the
transport
layer, by detecting malformed packets, and hid-
den/malicious functionalities from within the ﬁrmware. The
host can then deploy corresponding defenses using, e.g.,
USBFILTER. Host-emulating honeypots can also detect code
injection and transport
layer attacks reliably, provided the
malicious USB device is not able to detect such an em-
ulation environment. Note that normal data exﬁltration via
USB storage can also be detected by the honeypots, except
side/covert-channel attacks, such as USBee. Device-emulating
honeypots can detect data exﬁltration by detecting potential
data transfers from malicious processes within the host. From
the above taxonomy of defenses and comparative evaluation,
the following ﬁndings can be drawn.
F3. Trust Anchors represent a Design Tradeoff: The intrin-
sic ﬂaw enabling all offensive primitives covered by our analy-
sis was the misguided trust-by-default property underlying the
USB ecosystem – both the host and the device are assumed
to be benign and expose all functionality to one another after
enumeration. It is therefore not surprising that the majority of
viable defensive primitives require the introduction of a trust
anchor in order to enable their security properties. Smart de-
vice prototypes such as Kells [25] and ProvUSB [117] propose
the use of host-side trusted hardware for authentication, while
commercial solutions like IronKey [59] verify user-presented
credentials. One notable consequence of the trust placement
design tradeoff is that the placement of the trust anchor (host
vs. device) informs the directionality of the defense. Smart
devices seeking to defend themselves from malicious actors on
the host leverage host-side trusted hardware prior to granting
access. Host machines, in turn, anchor trust in the intrinsic
physical properties of USB device ﬁrmware in order to defend
against malicious peripherals. Based on this observation, it
is clear that a complete solution to USB security will likely
require trust anchors on both the host and device sides.
F4. Single-Layer Solutions Are Not Effective: An emerging
trend [12], [118], [62] in the recent literature is that threats
in the USB peripheral space can be understood through the
lens of network security – by presenting peripherals to the
host as untrusted network endpoints, the host will be able
to defend itself from attack. The primary examples of this
primitive are USBFILTER [118] and USBFirewall [62]. As
shown in Table III, this primitive is proven to be the most
powerful solution, covering attacks across different
layers.
Similar to the ﬁrewall primitive, host-emulating honeypots
such as GoodUSB [116] and Cinch [12] also expand their
defense into different layers. The power of these solutions is
rooted in the fact that they are a composition of protection
mechanisms within different layers that provide different op-
erational semantics. Based on our analysis of the USB defense
space, we conclude that a complete solution must be able to
centralize context from all operational layers prior to issuing
security decisions.
F5. Defenses for Signal Injection Are Still Missing: As
shown in Table III, there is still no defense primitives avail-
able to defend against signal injection attacks based on our
analysis. These attacks usually leverage the intrinsic nature
of hardware as side channels to emit analog signal, such as
USBee [49], or require hardware changes for power attacks,
such as USBKiller [127]. It is natural to see why software-
based solutions could not mitigate these attacks. While USB
hardware design improvement is the right direction in the long
run, we still need a mechanism to establish trust with USB
devices before fully enabling them in the short term.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1040
9
Outisder
Threats
Insider
Threats
Injection
Code
Extraction
Data
Masquerading
Protocol
Protocol
Corruption
Signal
Injection
Signal
Eavesdropping
Application Layer
–
–
–
–
–
–
Transport Layer
Security Training
On-Device Data Encryption
On-Device Host Authentication
Host- or Device-Based Auditing
System Hardening
Driver-Layer Access Controls
Device-Emulating Honeypots
Firmware Veriﬁcation
USB Stack Fuzzing
USB Packet Firewall
Host-Emulating Honeypots
Anti Fingerprinting
Secure Channel
Type-C Authentication
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
–
–
–
–
–
–
–
–
–
Human Layer
–
(cid:71)(cid:35)
(cid:50)
(cid:50)
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
(cid:71)(cid:35)
(cid:71)(cid:35)
–
(cid:32)
(cid:4)
–
–
–
–
–
–
–
–
–
–
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:4)
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
Physical Layer
–
–
–
–
–
–
–
–
–
–
–
(cid:71)(cid:35)
(cid:32)
–
(cid:50)
(cid:71)(cid:35)
(cid:50)
(cid:71)(cid:35)
(cid:71)(cid:35)
–
–
–
(cid:71)(cid:35)
(cid:4)
–
–
(cid:50)
(cid:50)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:50)
–
–
(cid:71)(cid:35)
(cid:50)
–
–
–
Table III: Comparative evaluation of defensive primitives for securing the USB stack. Columns represent offensive primitives
as organized by the communications layer. Defensive primitives are marked with (cid:32) if they provide a complete defense, (cid:71)(cid:35) if
they provide a partial defense, (cid:4) if they can reliably detect that an attack has taken place, and (cid:50) if they provide detection
under limited conditions.
Figure 5: The USB Type-C Authentication challenge (request)
and response messages with payloads.
we have learned through the systematization, and show that
TCA is on the right direction to solve USB security in general,
but the design ﬂaws and the ignorance of modern USB attacks
render its efforts in vain.
A. TCA Description
1) USB Certiﬁcate Authorities: The TCA protocol is built
over a certiﬁcate authority (CA) hierarchy, mimicking the
current CA model used by SSL/TLS. The USB-IF owns and
operates a default self-signed root certiﬁcate, and permits
other organizations to use their own root certiﬁcates. The
speciﬁcation places no requirements on third-party roots (e.g.,
organizational vetting or issuance processes). USB device
manufacturers control intermediate certiﬁcates signed by the
USB-IF, and devices are issued their own certiﬁcates by the
manufacturers. The ﬁnal USB product is capable of storing
at most 8 certiﬁcate chains and associated private keys, each
with separate roots.
2) Authentication Protocol: In this protocol, the initiator is
the USB host controller and the responder is the USB device.
The protocol deﬁnes three operations the initiator can perform,
shown in Figure 4:
Digest Query: In this operation, the host controller issues
a GetDigest request to the device. The device responds
with digests for all of its certiﬁcate chains. According to the
speciﬁcation, the intent of this operation is to accelerate the
Figure 4: The USB Type-C Authentication Protocol.
V. IS USB TYPE-C THE ANSWER?
Although the reserach community has proposed many dif-
ferent solutions for addressing weaknesses in USB security,