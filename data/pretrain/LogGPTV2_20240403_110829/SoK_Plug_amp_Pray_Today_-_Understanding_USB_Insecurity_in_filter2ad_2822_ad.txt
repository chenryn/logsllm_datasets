### Uniform Appearance and Timing Randomization

The results demonstrate that a uniform appearance and consistent ordering of control transfers during USB enumeration make it more challenging to distinguish between different operating system families. Additionally, timing randomization can potentially thwart timing-based fingerprinting. By arbitrarily speeding up or slowing down USB transfers, a host or device can confuse potential attackers by varying its timing characteristics. However, the USB specification imposes strict requirements on message ordering and timing, so extreme behavior randomization may disrupt normal device operation.

### Secure Channel

To defend against USB bus eavesdropping, Cinch [12] proposes adapting encryption and authentication schemes to physical peripheral connections. A Cinch gateway acts as an encryption and decryption proxy on the host side, while a small crypto adapter (similar to a keylogger) serves as the peripheralâ€™s encryption and decryption proxy. This setup ensures that malicious USB buses or other devices only have access to encrypted traffic and cannot produce authenticated messages. Similarly, the UScramBle [82] system defends against eavesdropping of downstream traffic by negotiating an encryption key with the device during USB enumeration.

### Summary of USB Security Defenses

Based on our survey, we have identified several defensive primitives used in USB security solutions. Table II maps notable defenses to their corresponding layers and primitives. We also evaluate USB attacks and defenses using these primitives in Table III. A complete defense is defined as a solution designed to fully mitigate a specific attack, while a partial defense generally works but does not provide complete mitigation. Reliable detection refers to mechanisms that detect a certain attack with a low false positive rate, and partial detection means mechanisms that work only under certain circumstances. Even a complete defense or reliable detection may not be 100% perfect and may become partial solutions as new attacks emerge.

For example, on-device host authentication can detect insider attacks if the provenance mechanism records each I/O operation and is not disabled or bypassed. This assumes an enterprise environment where only IT-certified USB devices, such as ProvUSB, are used. Firmware verification can help mitigate transport layer attacks by detecting malformed packets and hidden/malicious functionalities within the firmware. The host can then deploy corresponding defenses using tools like USBFILTER. Host-emulating honeypots can reliably detect code injection and transport layer attacks, provided the malicious USB device does not detect the emulation environment. Normal data exfiltration via USB storage can also be detected by honeypots, except for side/covert-channel attacks like USBee. Device-emulating honeypots can detect data exfiltration by identifying potential data transfers from malicious processes within the host.

### Key Findings

**F3. Trust Anchors Represent a Design Tradeoff:**
The intrinsic flaw enabling all offensive primitives in our analysis is the trust-by-default property underlying the USB ecosystem, where both the host and device are assumed to be benign after enumeration. Consequently, most viable defensive primitives require the introduction of a trust anchor. Smart device prototypes like Kells [25] and ProvUSB [117] propose using host-side trusted hardware for authentication, while commercial solutions like IronKey [59] verify user-presented credentials. The placement of the trust anchor (host vs. device) informs the directionality of the defense. Smart devices use host-side trusted hardware to defend against malicious hosts, while host machines rely on the intrinsic physical properties of USB device firmware to defend against malicious peripherals. A complete solution to USB security will likely require trust anchors on both the host and device sides.

**F4. Single-Layer Solutions Are Not Effective:**
Recent literature [12], [118], [62] suggests that threats in the USB peripheral space can be understood through the lens of network security. By presenting peripherals to the host as untrusted network endpoints, the host can better defend itself from attacks. Examples of this approach include USBFILTER [118] and USBFirewall [62]. These solutions are powerful because they cover attacks across different layers. Host-emulating honeypots like GoodUSB [116] and Cinch [12] also expand their defense into multiple layers. Based on our analysis, a complete solution must centralize context from all operational layers before issuing security decisions.

**F5. Defenses for Signal Injection Are Still Missing:**
There are currently no defensive primitives available to defend against signal injection attacks. These attacks often leverage the intrinsic nature of hardware as side channels to emit analog signals, such as USBee [49], or require hardware changes for power attacks, such as USBKiller [127]. Software-based solutions are ineffective against these attacks. While improving USB hardware design is a long-term solution, a short-term mechanism to establish trust with USB devices is still needed.

### Comparative Evaluation of Defensive Primitives

Table III provides a comparative evaluation of defensive primitives for securing the USB stack. Columns represent offensive primitives organized by communication layers. Defensive primitives are marked with (cid:32) for complete defense, (cid:71)(cid:35) for partial defense, (cid:4) for reliable detection, and (cid:50) for detection under limited conditions.

### USB Type-C Authentication (TCA)

#### TCA Description

1. **USB Certificate Authorities:**
   The TCA protocol is built over a certificate authority (CA) hierarchy, similar to the SSL/TLS model. The USB-IF owns and operates a default self-signed root certificate and allows other organizations to use their own root certificates. There are no requirements for third-party roots (e.g., organizational vetting or issuance processes). USB device manufacturers control intermediate certificates signed by the USB-IF, and devices are issued their own certificates by the manufacturers. Each USB product can store up to 8 certificate chains and associated private keys, each with separate roots.

2. **Authentication Protocol:**
   In this protocol, the initiator is the USB host controller, and the responder is the USB device. The protocol defines three operations the initiator can perform:
   - **Digest Query:** The host controller issues a GetDigest request to the device, which responds with digests for all of its certificate chains. This operation aims to accelerate the authentication process.

### Is USB Type-C the Answer?

Although the research community has proposed many solutions to address weaknesses in USB security, the effectiveness of USB Type-C Authentication (TCA) remains a topic of debate. Our systematization shows that TCA is on the right track for solving USB security, but design flaws and the lack of consideration for modern USB attacks render its efforts insufficient.