Content-Encoding:
gzip。如果一个实体正文采用了编码方式存储，在使用之前就必须进行解码。
Expires：
给出响应过期的日期和时间。通常，代理服务器或浏览器会缓存一些页面。当用户再次访问这些页面时，直接从缓存中加载并显示给用户，这样缩短了响应的时间，减少服务器的负载。为了让代理服务器或浏览器在一段时间后更新页面，我们可以使用Expires实体报头域指定页面过期的时间。当用户又一次访问页面时，如果Expires报头域给出的日期和时间比Date普通报头域给出的日期和时间要早(或相同)，那么代理服务器或浏览器就不会再使用缓存的页面而是从服务器上请求更新的页面。不过要注意，即使页面过期了，也并不意味着服务器上的原始资源在此时间之前或之后发生了改变。
Refresh：表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(\"Refresh\",
\"5; URL=[http://host/path](http://host/path){.pcalibre2 .pcalibre
.calibre7 .pcalibre1 target="_blank"}\")让浏览器读取指定的页面。
注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=\"Refresh\"
CONTENT=\"5;URL=[http://host/path](http://host/path){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}\"＞实现。
Allow：服务器支持哪些请求方法（如GET、POST等）。
Content-Disposition：打开一个网页时，浏览器会首先看是否有Content-Disposition:
attachment这一项，当是"Content-Disposition:
attachment"时是下载，"Content-Disposition:inline"是在线打开文件
下面是一个响应消息
``` calibre13
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
ETag: "34aa387-d-1568eb00"
Accept-Ranges: bytes
Content-Length: 51
Vary: Accept-Encoding
Content-Type: text/plain
```
**HTTP方法:**
**GET**
GET方法请求服务器检索由该HTTP请求中的URL指定的资源并在回复中发给客户端。这是最基本的请求类型，也是占大多数的HTTP数据流。当你输入一个常规URL或点击一个文档中的链接，通常就是提示Web浏览器发送GET请求。
对于GET的处理取决于若干因素。如果URL正确并且服务器能够找到资源，会发送合适的响应给客户端。返回资源需取决于请求对象的特性。如果无法妥当处理请求，则会产生一个错误信息。在使用缓存的情况下，代理服务器甚至客户端自己就可以满足请求。对于某种特定报头如
If-Modified-Since 或 If-Match，
GET请求的含义可能随之而改变，要求服务器仅在满足特定条件时发送资源。这类请求称为条件GET。类似的，客户端可以使用Range头来要求服务器仅发送部分资源。这类请求称为部分GET。
**HEAD**
HEAD方法同GET，但告知服务器不要发送消息实体。客户端通常使用这种方法来检查资源是否存在，状态，或文件大小，再决定是否需要服务器发送整个文件。HEAD请求的处理与GET相同，除了只返回头部而不返回实际的资源之外。
**POST**
POST方法允许客户端发送任意数据的实体到服务器以进行处理。它通常同于客户端提交例如交互式HTML信息给服务器程序，之后服务器作出行动并发回响应。这种方法用于各种在线进程。请求中的URL指定服务器上接受数据的程序名。
**PUT**
这种方法请求服务器将请求中的实体保存在请求中的URL里。PUT中，URI指明请求中的实体，因而PUT能够让文件复制到服务器，在GET请求中文件能够被复制到客户端。与之相反，POST中URI标识的程序处理请求中的实体，因此通常应用于交互式程序。PUT用法很多，如上传内容到网站，这种情况下必须加以认证。但是，在站点上存储文件通常使用其他方式，如FTP。
**TRACE**
客户端通过这种方法接收发至服务器的请求，用于诊断目的。
## 参考 {#21.html#参考 .calibre10}
TCP/IP Guide
部分内容来源于网络
:::
:::
[]{#22.html}
::: page
# 网络基本功（二十三）：Wireshark抓包实例诊断TCP连接问题 {#22.html#calibre_toc_24 .book-chapter}
::: {#22.html#section- .section}
# 网络基本功（二十三）：Wireshark抓包实例诊断TCP连接问题 {#22.html#网络基本功（二十三）：wireshark抓包实例诊断tcp连接问题 .calibre4}
**转载请在文首保留原文出处：EMC中文支持论坛**[https://community.emc.com/go/chinese](https://community.emc.com/go/chinese){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
[![image001.gif](35421fc3.gif){.calibre9}](https://community.emc.com/servlet/JiveServlet/showImage/2-861019-105855/image001.gif){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
## 介绍 {#22.html#介绍 .calibre10}
前文论述了TCP基础知识，从本节开始，通过TCP抓包实例来诊断TCP常见问题。
TCP进程通讯时，双方打开连接，发送数据，最后关闭连接。当TCP打开连接时，从源端口到目的端口发送一个请求。在应用建立或关闭时可能发生一些问题。本文讨论用Wireshark网络抓包的方法来定位及解决这一问题。
## 更多信息 {#22.html#更多信息 .calibre10}
**问题的表现形式:**
问题可能有多种表现类型：
-   尝试运行应用程序但发现应用程序无法工作。尝试浏览网络但无法获得响应。
-   尝试发送邮件但无法连接到邮件服务器。
-   问题可能由简单原因引起，如服务器宕机，服务器上没有运行应用程序，或在客户端到服务器的某一处网络断开。
-   问题也可能由复杂原因引起，如DNS问题，服务器内存不足无法连接（例如某一应用占用高内存空间），重复IP，以及其他原因。
**处理方法:**
下文会介绍解决问题的线索以及如何通过抓包来诊断TCP连接问题。通常，这些问题会导致运行应用程序时无法得到任何结果。
当你在运行一个应用程序时，例如数据库客户端，邮件客户端，观看视频等等，而又无法获得输出，按照以下步骤诊断：
1.  确认服务器和应用程序正在运行。
2.  确认客户端正在运行，IP地址已配置（手动或通过DHCP），并连接至网络。
3.  Ping服务器并确认连接正常。
4.  在某些情况下，ping不通服务器但连接正常。这是由于防火墙拦截了ICMP信息，所以如果无法ping通并不一定表示连接有问题。防火墙可能是网络中的专用设备或Windows/Linux/UNIX终端设备上安装的防火墙。
5\. 抓包文件中，查找以下模式：
-   三重SYN信息而没有响应（见以下截屏）
-   SYN信息带一个reset(RST)响应
**这两种情况下都有可能是防火墙拦截了特定应用程序或应用程序没有在运行。**
以下截屏是一个简单的case：客户端无法连接到web服务器81.218.31.171（报文61,62和63）。可能是由于不被防火墙允许，或服务器发生故障。可以看到另一个站点108.160.163.43（报文65,66和67）的连接正常，因此连接问题仅限于81.218.31.171。
[![image002.jpg](bb90aa8a.jpg){.calibre9}](https://community.emc.com/servlet/JiveServlet/showImage/2-861019-105856/image002.jpg){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
下例是一个这种情况相对复杂的case。该case中，客户想要登录到camera服务器来访问远程站点的camera。camera服务器的IP地址为135.82.12.1，问题在于客户能够看到服务器主页上的登录窗口，但无法登进系统。在下面的截图中可以看到，打开了一个到IP地址135.82.12.1的连接。到HTTP服务器的TCP连接是打开的，一开始看上去没有连接问题：
[![image003.jpg](f7f6c858.jpg){.calibre9}](https://community.emc.com/servlet/JiveServlet/showImage/2-861019-105857/image003.jpg){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
当我们过滤出目的IP地址为135.82.12.1的数据流，也就是camera服务器。这里可以看到，当尝试连接TCP端口6036时，得到了一个RST/ACK响应，有以下可能性：
-   防火墙拦截了端口6036
-   如果配置了端口地址转换（PAT），那么仅转换端口80而非6036
-   用户名和密码验证是在TCP端口6036上完成的，防火墙仅允许端口80，验证被拦截，应用无法工作
[![image004.jpg](28b8923f.jpg){.calibre9}](https://community.emc.com/servlet/JiveServlet/showImage/2-861019-105858/image004.jpg){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
**总之，当无法正常连接服务器时，检查服务器和客户端是否所有TCP/UDP端口都能通过网络转发，以及是否有未知的端口。**
**工作过程：**
TCP连接开始时，发生了以下三步：
[![image005.jpg](23372e62.jpg){.calibre9}](https://community.emc.com/servlet/JiveServlet/showImage/2-861019-105859/image005.jpg){.pcalibre2
.pcalibre .calibre7 .pcalibre1 target="_blank"}
1\.
客户端TCP进程发送了一个SYN报文。该报文中SYN标志位设置为1。这一报文中客户端：
-   指定自己的初始序列号。这是客户端发送给服务器的第一个字节。
-   指明自己的窗口大小。这是客户端分配给进程的缓存大小（位于客户端的RAM）。
-   设置自己将要使用的选项：MSS，Selective ACK，等等。
2\. 当服务器收到建立连接请求，服务器：
-   发送SYN/ACK给客户端，确认接收到SYN请求。
-   指明服务器端的初始序列号。这是服务器发送给客户端的第一个字节。
-   指明服务器的窗口大小。这是服务器分配给进程的缓存大小（位于服务器RAM）。
-   回复请求选项并设置服务器端选项。
3\. 当接收到服务器的SYN/ACK，客户端：
-   发送ACK报文给服务器，确认从服务器接收到SYN/ACK.
-   指明客户端窗口大小。尽管这一参数在第一个报文中定义过了，服务器还是会参考这个值，因为这是最新的窗口大小。
在TCP头部的选项字段中，有以下几个主要选项：
-   Maximum Segment
    Size（MSS）：TCP数据报的最大字节数，即从TCP头部开始直到报文末尾的字节数。
-   Windows Scale Option (WSopt)：这一因子与TCP头部的Window
    Size字段相乘，通知接收方扩大缓存。由于头部最大窗口大小是64KB，乘以因子4也就是256KB窗口大小。
-   SACK：Selective
    ACK，该选项使连接双方能够仅确认指定报文，当单个报文丢失，只有这个报文会被重传。连接建立时，双方都需要同意SACK。
-   Timestamps Option（TSopt）：该参数指客户端和服务器之间的延时。
在这一阶段，双方：
-   同意建立连接
-   知道对方的初始序列号