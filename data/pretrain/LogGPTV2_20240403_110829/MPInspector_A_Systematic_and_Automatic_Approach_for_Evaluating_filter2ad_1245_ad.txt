Related Pr.
Veriﬁed
MS{1-7},
MA{1,3,5,
7,9}
AS{1-5},
AA{1.3,5,
7,9,11,13}
CS{1-11},
CA{1,3,5,7}
CS1,
CA{1,3,5,7}
MS{5,7-9},
MA3
AS{2,4},
AA9
MS{5,7-9},
MA7
CoAP
EMQ X
CS1,CA3
MQTT V5.0
Mosquitto
MQTT V3.1.1
AWS IoT Core
MQTT V5.0
Mosquitto
MS{5,7-9},
MA7
MA{1, 10}
MQTT V5.0
Mosquitto
MA{8, 11}
AMQP V1.0
ActiveMQ
AS1,
AA{1, 3}
side, the attacker can create a fake client to connect with the
server using the identities he created when he has access to
the device. Then, the server would recognize the fake client
as a legitimate one, which allows the attacker to break all the
authentication goals.
In the tenant scenario, MPInspector has identiﬁed that all the
secrecy properties are violated in all the ten implementations.
The reason is that the attacker can impersonate the victim to
connect with the server and accept all the messages from the
server. For authentication properties, MPInspector identiﬁes
that all the ten implementations violate all the properties on
the server side, but meet the properties on the device side.
This is due to the differences of the attacker’s capabilities
to control the device side and the server side. On the device
side, the attacker cannot steal the session key as he may not
be in the same network with the victim. While on the server
5.3 Attacks based on the Property Violations
This section answers the question RQ3. Based on the property
violations, we uncover eleven kinds of attacks on the ten MP
implementations and display the overview in Table 2. We
ﬁnd that the examined MP implementations are all vulnerable
under the two attack scenarios. Each platform is vulnerable to
at least one attack, and on average 2.8 attacks. These attacks
have serious consequences, such as sensitive data leakage and
malicious message injection. We introduce six attacks below
(more attacks are available in [52]).
4214    30th USENIX Security Symposium
USENIX Association
5.3.1 Neighbor Scenario Attacks
Replay attack. This attack is due to the authentication prop-
erty violations, which suggests that the server accepts the
messages that the client has sent before. An attacker only
needs to collect them and replays them to the server. We
identify that CoAP on EMQ X, AMQP on ActiveMQ, and
MQTT on Tuya Smart, AWS IoT Core and Mosquitto are
vulnerable to this attack. We launch this attack on Tuya Smart
and Mosquitto by snifﬁng and collecting the trafﬁc in the
local network and replaying them to the server. As a result,
We successfully replay all the messages, including sending
commands and telemetry data.
AMQP sync. failure. MPInspector ﬁnds that the client and
server in AMQP strictly maintain the message ID called De-
livery ID when sending TRANSFER messages. Utilizing the
authentication property violations on AMQP messages, an
attacker can kick the victim ofﬂine by sending the messages
in wrong orders or forging the TRANSFER messages with
synchronized Delivery ID using the victim’s identity. We
identify the attack on ActiveMQ. We develop an attack script
using Ettercap and have successfully launched the attack on
ActiveMQ.
5.3.2 Tenant Scenario Attacks
Client identity hijacking. MPInspector detects that the se-
crecy properties on the device side are all violated in the
tenant scenario. Additionally, the server side authentication
properties are also violated. This suggests that an attacker can
impersonate the victim device using its identity to connect to
the server. We name this attack as client identity hijacking.
Especially, MPInspector detects that the MQTT implemen-
tations disconnect the existing client when the server receives
a second connection request with the same ClientID. There-
fore, an attacker can use the victim’s identity to connect to
the server and kick the victim ofﬂine. Last, an attacker can
impersonate the device to send messages to the server. We
successfully launch this attack on Google IoT Core, AWS IoT
Core, Aliyun Cloud, Tuya Smart, Mosquitto, and ActiveMQ.
Additionally, we ﬁnd that the attacker once obtains the cre-
dentials of the client, he can perform this attack for a long
time as these IoT platforms hard-code the credentials of the
clients into device SDKs and cannot dynamically revoke or
grant new credentials.
Reﬂection attack. The reﬂection attack is speciﬁc to the
CoAP protocol, which is running over UDP. Utilizing the
secrecy property and authentication property violations on
the MP implementations in the server side, an attacker can
forge messages using the victim’s IP address to send to the
server. The workﬂow is shown in Figure 5. We identify the
attack of CoAP on Aliyun Cloud and EMQ X. As a conse-
quence, an attacker can forge a fake state to deceive the server.
Also, the attacker can forge a message to get a considerable
amount of messages sent to the victim and cause a DoS. To
validate the attack, we use source address spooﬁng to forge
a CoAP message, and the victim successfully receives the
unexpected response message. According to our experiments,
the ampliﬁcation reﬂection rates are 2.25 in Aliyun Cloud
and 0.68 in EMQ X, respectively. The ampliﬁcation reﬂection
rate here is a conservative estimation because we adopt the ba-
sic conﬁguration, where the broker only returns the response
code without the device data.
Figure 5: CoAP reﬂection attack.
Malicious topic subscription. Because of the secrecy prop-
erty violation on the topic name and the authentication prop-
erty violation in the SUBSCRIBE message, an attacker can
subscribe to the victim’s topic using his own identity. Taking
AMQP as an example, as shown in Figure 6, an attacker uses
his own identity ContainerId to subscribe to the victim’s
topic, which is denoted as the target node. When the victim
device sends its secret data, the broker transfers the secret
data to the attacker. We identify this attack on AWS IoT Core
and ActiveMQ and further validate this attack successfully.
Figure 6: AMQP malicious topic subscription on ActiveMQ.
Unauthorized response message. This attack works for the
new request/response mechanism introduced by MQTT V5.0.
This mechanism allows the client to publish a message with
a response topic and the correlation data. The client who
receives this message publishes the correlation data to the
response topic. However, an attacker can publish with an
unauthorized response topic to the victim, as shown in Fig-
ure 7. This attack is based on the secrecy property violation
on the victim’s topic. It is identiﬁed on Mosquitto as it sup-
ports MQTT V5.0. To validate the attack, we use our script
to simulate the victim and accomplish the request/response
mechanism. We successfully launch the attack as the broker
does not check the authenticity of the response topic.
Illegal occupation. An attacker can exploit the violated se-
crecy property on the victim’s ContainerId and the violated
USENIX Association
30th USENIX Security Symposium    4215
Figure 7: MQTT V5.0 unauthorized response topic publish.
Instead, MPInspector is mainly designed for logic ﬂaw analy-
sis on MP implementations. In conclusion, compared with the
previous work [36], MPInspector is an automatic approach,
covers more MPs and reveals four more new attacks.
Table 3: Our results compared with [36] in MQTT
(( =detected, =not detected)).
Types of Attacks
Man in the Middle
[36] MPInspector
Scenario
Neighbor
Scenario
Tenant
Scenario
Replay Attack
Unauthorized Will Message
Malicious Retained Message
Client Identity Hijacking
ClientID identiﬁcation
Malicious Topic Subscription
Malicious Topic Publish
Wildcard-topic Subscription
Unauthorized Response
Topic Publish
Figure 8: AMQP illegal occupation.
authentication property to perform illegal occupation attacks
on AMQP. The server that receives duplicate OPEN messages
with the same ContainerId of the victim closes the con-
nection without updating the session state. When the client
reconnects to the server, the server believes that the client with
ContainerId is online and rejects the victim’s connection
request. We identify this attack on ActiveMQ, and we believe
this attack is severe. As shown in Figure 8, an attacker can
collect victims’s ContainerIds to perform this attack, and
make plenty of victims out of service unless the broker resets.
We use our script to launch this attack successfully, and the
target victim cannot connect to the broker anymore.
5.3.3 Comparisons with Burglars’ IoT Paradise Paper
In [36], Jia et al. performed a manual analysis on MQTT man-
ually. We compare MPInspector with [36], which is shown
in Table 3. Our framework is automatic while [36] only an-
alyzed MQTT manually. In addition, MPInspector covers
four prominent MPs including MQTT V3.1.1, MQTT V5.0,
CoAP and AMQP V1.0 while [36] only analyzed MQTT
V3.1.1. As for MQTT V3.1.1, we ﬁnd four new attacks that
[36] did not cover. We consider the neighbor scenario and the
tenant scenario and [36] only considered the latter. There are
two attacks in [36] that MPInspector does not cover. How-
ever, these two attacks are either not MQTT’s implementation
ﬂaw or related to the understanding of bit wise parameters,
which are out of the current design focus of MPInspector.
5.4 Performance
This section answers question RQ4. We evaluate the perfor-
mance of MPInspector from three perspectives: (1) state
machine modeling, (2) property violation detection, and (3)
performance overhead.
Evaluation on state machine modeling. The state machine
modeling includes message semantics extraction, interaction
logic extraction and formal code translation. We ﬁrst evalu-
ate the performance of MPInspector on message semantics
extraction on the ten tested MP implementations. As MP
implementations are closed-sourced, it is difﬁcult to get the
ground truth of the message semantics for the real MP imple-
mentations. Thus, we invite 45 experts with abundant protocol
and software reverse engineering experiences to manually val-
idate our results. Since recovering the full message semantics
depends on the amount of collected MP trafﬁc and the quality
of IoT platform documents, the experts are instructed to only
focus on checking the correctness of each parameter seman-
tics extracted by MPInspector by checking all the available
trafﬁc and documents. Thus, as a precaution, we only report
the precision. As a result, the precision of message seman-
tics extraction on Aliyun Cloud is 96%, while the precision
on other IoT platforms is all 100%. As the value of param-
eter ClientID from Aliyun Cloud includes some irregular
characters, our method cannot handle them and mistakenly
extracts wrong terms of the parameter. Additionally, to prove
the effectiveness of our NLP-based semantics extraction, we
further collect the documents from 20 popular IoT platforms
[13] for evaluation. Similarly, our invited experts manually
verify the correctness of each extracted parameter semantics
by examining the collected documents. Our method yields
94.87% precision. Our method fails to extract the semantics
of some parameters, because the sentences that contain these
parameter semantics do not belong to the considered sentence
types in Section 4.3 and they need to be extracted from several
4216    30th USENIX Security Symposium
USENIX Association
IoT Platform
MP
Google IoT Core
AWS IoT Core
MQTT V3.1.1
MQTT V3.1.1
AWS IoT Core(will) MQTT V3.1.1
MQTT V3.1.1
MQTT V3.1.1
MQTT V3.1.1
MQTT V3.1.1
MQTT V5.0
MQTT V5.0
MQTT V5.0
Azure IoT Hub
Bosch IoT Hub
Aliyun Cloud
Tuya Smart
Mosquitto
Mosquitto(will)
Mosquitto(retain)
EMQ X
Aliyun Cloud
ActiveMQ
CoAP
CoAP
AMQP V1.0
Table 4: Performance overhead of MPInspector.
Message semantics
Extraction
Interaction Logic
Extraction
# of Input
Message
Types
Time (ms)
Precision
States
Time Delay
115
102
103
107
106
105
110
106
106
106
928
2152
1808
1.00
1.00
1.00
1.00
1.00
0.96
1.00
1.00
1.00
1.00
1.00
1.00
1.00
3
3
8
3
5
3
3
2
6
8
1
2
9
8s
3s
5s
8s
9s
4s
8s
1s
5s
7s
1s
1s
1s
5
5
4
5
5
5
5
5
4
6
4
3
8
# MQs
# EQs
215
155
727
65
184
62
65
65
317
727
24
27
728
373
116
123
393
599
1361
393
393
123
749
420
273
846
Time
(h:mm)
06:32