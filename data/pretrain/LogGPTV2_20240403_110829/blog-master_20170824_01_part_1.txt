## PostgreSQL BRIN索引的pages_per_range选项优化与内核代码优化思考  
### 作者        
digoal        
### 日期         
2017-08-24       
### 标签        
PostgreSQL , BRIN 块级索引 , 扫描方法 , 数据结构 , pages_per_range算法    
----                    
## 背景   
BRIN是PostgreSQL 9.5新增的块级索引接口，存储了被索引字段在块级别的边界值（最大值、最小值）以及其他统计信息。  
当需要对某个字段进行检索时，需要扫描整个BRIN索引（这个是BRIN索引内核层面将来值得优化的点）。然后跳过不符合条件的HEAP PAGE，扫描复合条件的HEAP PAGE。实现数据过滤的目的。  
原理所致，对于建立BRIN索引的字段，相关性越好，BRIN索引的过滤性就越好。  
BRIN同时还支持多种类型、多列字段等。  
1、多列  
2、单列  
3、空间数据类型  
如果你还对BRIN不了解，可以阅读我写过的一些案例文章。  
[《PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_01.md)    
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)    
[《PostgreSQL 并行写入堆表，如何保证时序线性存储 - BRIN索引优化》](../201706/20170611_02.md)    
[《PostgreSQL 10.0 preview 功能增强 - BRIN 索引更新smooth化》](../201704/20170405_01.md)    
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)    
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)    
[《PostgreSQL 9.5 new feature - lets BRIN be used with R-Tree-like indexing strategies For "inclusion" opclasses》](../201505/20150526_01.md)    
[《PostgreSQL 9.5 new feature - BRIN (block range index) index》](../201504/20150419_01.md)    
BRIN索引支持的参数pages_per_range的作用是多少个块统计一次边界值。  
本文将以下面这个场景中的案例为例，讲解一下BRIN索引的pages_per_range参数的设置算法，以及BRIN索引列的优化，BRIN索引的内核优化思路等。  
[《万亿(100TB)级电商广告 - PostgreSQL单机如何实现毫秒级圈人》](../201708/20170823_01.md)    
## brin扫描原理  
BRIN索引的扫描原理很简单，扫描BRIN的元数据，根据元数据和用户输入的条件进行比较，过滤不符合条件的HEAP PAGE，只扫描需要扫描的HEAP PAGE。  
## BRIN索引列的相关性优化  
由于BRIN是块级索引，如果块的边界范围很大，或者说块与块之间的重叠度很高，那么BRIN索引的过滤性就很差。  
因此BRIN仅仅适合存储与值线性相关性很好的列。  
pg_stats.correlation可以观察列的线性相关性。  
当然我们也可以人为的修改它的存储，改变它的线性相关性（排序存储是最简单的方法），甚至可以改变局部的线性相关性。你想知道更深层次原理的话，请参考如下文章。  
[《解密上帝之手 - 阿里云HDB for PostgreSQL数据库metascan特性(存储级、块级、batch级过滤与数据编排)》](../201708/20170809_02.md)    
## 多个条件扫描可以优化的点  
当我们的查询条件是多个查询条件时，PostgreSQL会将多个索引的扫描合并成一个，跳过不符合条件的。这既是bitmapAnd, bitmapOr。  
[《PostgreSQL bitmapAnd, bitmapOr, bitmap index scan, bitmap heap scan》](../201702/20170221_02.md)    
但是由于目前PostgreSQL BRIN索引的扫描需要扫描整个BRIN索引，因此每个条件都需要扫描一次，那么当BRIN本身比较大时，条件一多时间就会成倍增加。  
BRIN索引的扫描方式，是PostgreSQL未来内核层面可以优化的点，比如将BRIN的边界再按树组织一下，不需要每次都全扫（太过暴力）。目前PostgreSQL没有做，也许是没有人有在几百亿的单表上建单块粒度(pages_per_range=1)的BRIN索引。  
实际上我后面会来给大家展示这个问题。大伙就知道我为什么要优化pages_per_range参数了。  
## BRIN索引参数pages_per_range选择推荐算法  
pages_per_range是粒度，默认为128（表示每128个数据块统计一次边界），决定了两件事情。  
1、BRIN索引的精确度。pages_per_range=1，说明边界精确到1个数据块。pages_per_range越小，精度越高，过滤性就越好（注意过滤性越好取决于列的线性相关性很好的情况下，否则就是白瞎）。  
2、BRIN索引本身的大小。pages_per_range越小，BRIN索引本身就越大。BRIN越大，单次走BRIN索引扫描BRIN块的成本就越高。  
那么pages_per_range到底设置为多大合适呢？  
根据我的经验，311GB的表，设置为512是不错的选择。越小的表，pages_per_range设置可以越小。  
311GB的表，如果pages_per_range=1，BRIN索引本身就有1.6GB这么大了。扫一下很费劲。当设置为512时，大概只有几MB。扫一下很快（虽然过滤性可能差了，但是BRIN是每个条件都要扫一次的）。  
### DEMO  
1、pages_per_range=1  
```  
postgres=# \d bi_user_tmall_vis1  
    Unlogged table "public.bi_user_tmall_vis1"  
 Column |  Type   | Collation | Nullable | Default   
--------+---------+-----------+----------+---------  
 uid    | bigint  |           |          |   
 bid    | bigint  |           |          |   
 cnt    | integer |           |          |   
Indexes:  
    "idx_bi_user_tmall_vis1" brin (bid, cnt) WITH (pages_per_range='1')  
 public | idx_bi_user_tmall_vis1 | index | postgres | bi_user_tmall_vis1 | 1644 MB    |   
postgres=# explain (analyze,timing,costs,buffers,verbose) select * from bi_user_tmall_vis1 where bid=1 and cnt between 1 and 100;  
                                                                  QUERY PLAN                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.bi_user_tmall_vis1  (cost=264463.65..274155.70 rows=7351 width=20) (actual time=8213.046..8213.057 rows=4 loops=1)  
   Output: uid, bid, cnt  
   Recheck Cond: ((bi_user_tmall_vis1.bid = 1) AND (bi_user_tmall_vis1.cnt >= 1) AND (bi_user_tmall_vis1.cnt   Bitmap Index Scan on idx_bi_user_tmall_vis1  (cost=0.00..264461.81 rows=7379 width=0) (actual time=8213.023..8213.023 rows=10 loops=1)  
         Index Cond: ((bi_user_tmall_vis1.bid = 1) AND (bi_user_tmall_vis1.cnt >= 1) AND (bi_user_tmall_vis1.cnt = 1) AND (bi_user_tmall_vis1.cnt   Bitmap Index Scan on idx_bi1  (cost=0.00..2069.63 rows=20096 width=0) (actual time=61.100..61.100 rows=1280 loops=1)  
         Index Cond: ((bi_user_tmall_vis1.bid = 1) AND (bi_user_tmall_vis1.cnt >= 1) AND (bi_user_tmall_vis1.cnt = 1) AND (bi_user_tmall_vis1.cnt <= 100)) OR ((bi_user_tmall_vis1.bid = 2000) AND (bi_user_tmall_vis1.cnt < 10000)) OR ((bi_user_tmall_vis1.bid = 12000) AND (bi  
_user_tmall_vis1.cnt < 10000)))  
   Rows Removed by Index Recheck: 60150  