## Greenplum 6已合并到PostgreSQL 9.3版本 - 比上一代GP提升：8倍读，195倍更新、删除 - 另有大量PG新特性  
### 作者                                                           
digoal                                                           
### 日期                                                           
2018-09-26                                                      
### 标签                                                           
PostgreSQL , Greenplum , 6 , gin , 异步事务  
----                                                           
## 背景      
Greenplum 6已合并到PostgreSQL 9.3版本 - 相比5性能提升：读8倍，更新、删除195倍 - 另有大量PG新特性，详见PostgreSQL release notes  
https://www.postgresql.org/docs/11/static/release.html  
例如  
1、GIN、SPGIST 索引接口。在模糊查询、全文检索、向量相似计算方面终于有索引加速了。   
2、异步事务，小事务写入有大幅提升。  
3、物化视图，OLAP中很好用的功能。  
4、事件触发器，基于事件控制细粒度DDL权限。  
5、整体性能增强。  
以上特性都是通过升级PostgreSQL版本加入的。  
其他增强：  
1、增加跨表的分布式死锁检测。  
2、更新、删除由表级排他锁改成行级排他锁，大幅提升DML性能。  
# gpdb 6 部署示例  
与如下同测试环境:   
[《Deepgreen(Greenplum) 多机部署测试 , TPC-H VS citus》](../201809/20180903_02.md)    
## 配置ECS虚拟机OS参数  (all host)    
1、内核参数      
```      
vi /etc/sysctl.conf      
# add by digoal.zhou          
fs.aio-max-nr = 1048576          
fs.file-max = 76724600          
# 可选：kernel.core_pattern = /data01/corefiles/core_%e_%u_%t_%s.%p                   
# /data01/corefiles 事先建好，权限777，如果是软链接，对应的目录修改为777          
kernel.sem = 4096 2147483647 2147483646 512000              
# 信号量, ipcs -l 或 -u 查看，每16个进程一组，每组信号量需要17个信号量。          
kernel.shmall = 107374182                
# 所有共享内存段相加大小限制 (建议内存的80%)，单位为页。          
kernel.shmmax = 274877906944             
# 最大单个共享内存段大小 (建议为内存一半), >9.2的版本已大幅降低共享内存的使用，单位为字节。          
kernel.shmmni = 819200                   
# 一共能生成多少共享内存段，每个PG数据库集群至少2个共享内存段          
net.core.netdev_max_backlog = 10000          
net.core.rmem_default = 262144                 
# The default setting of the socket receive buffer in bytes.          
net.core.rmem_max = 4194304                    
# The maximum receive socket buffer size in bytes          
net.core.wmem_default = 262144                 
# The default setting (in bytes) of the socket send buffer.          
net.core.wmem_max = 4194304                    
# The maximum send socket buffer size in bytes.          
net.core.somaxconn = 4096          
net.ipv4.tcp_max_syn_backlog = 4096          
net.ipv4.tcp_keepalive_intvl = 20          
net.ipv4.tcp_keepalive_probes = 3          
net.ipv4.tcp_keepalive_time = 60          
net.ipv4.tcp_mem = 8388608 12582912 16777216          
net.ipv4.tcp_fin_timeout = 5          
net.ipv4.tcp_synack_retries = 2          
net.ipv4.tcp_syncookies = 1              
# 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookie来处理，可防范少量的SYN攻击          
net.ipv4.tcp_timestamps = 1              
# 减少time_wait          
net.ipv4.tcp_tw_recycle = 0              
# 如果=1则开启TCP连接中TIME-WAIT套接字的快速回收，但是NAT环境可能导致连接失败，建议服务端关闭它          
net.ipv4.tcp_tw_reuse = 1                
# 开启重用。允许将TIME-WAIT套接字重新用于新的TCP连接          
net.ipv4.tcp_max_tw_buckets = 262144          
net.ipv4.tcp_rmem = 8192 87380 16777216          
net.ipv4.tcp_wmem = 8192 65536 16777216          
net.nf_conntrack_max = 1200000          
net.netfilter.nf_conntrack_max = 1200000          
vm.dirty_background_bytes = 409600000                 
#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘          
#  默认为10%，大内存机器建议调整为直接指定多少字节          
vm.dirty_expire_centisecs = 3000                       
#  比这个值老的脏页，将被刷到磁盘。3000表示30秒。          
vm.dirty_ratio = 95                                    
#  如果系统进程刷脏页太慢，使得系统脏页超过内存 95 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。          
#  有效防止用户进程刷脏页，在单机多实例，并且使用CGROUP限制单实例IOPS的情况下非常有效。            
vm.dirty_writeback_centisecs = 100                      
#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 100表示1秒。          
vm.swappiness = 0          
#  不使用交换分区          
vm.mmap_min_addr = 65536          
vm.overcommit_memory = 0               
#  在分配内存时，允许少量over malloc, 如果设置为 1, 则认为总是有足够的内存，内存较少的测试环境可以使用 1 .            
vm.overcommit_ratio = 90               
#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。          
vm.zone_reclaim_mode = 0               
# 禁用 numa, 或者在vmlinux中禁止.           
net.ipv4.ip_local_port_range = 40000 65535              
# 本地自动分配的TCP, UDP端口号范围          
fs.nr_open=20480000          
# 单个进程允许打开的文件句柄上限          
# 以下参数请注意          
# vm.extra_free_kbytes = 4096000          
# vm.min_free_kbytes = 2097152  # vm.min_free_kbytes 建议每32G内存分配1G vm.min_free_kbytes         
# 如果是小内存机器，以上两个值不建议设置          
# vm.nr_hugepages = 66536              
#  建议shared buffer设置超过64GB时 使用大页，页大小 /proc/meminfo Hugepagesize          
# vm.lowmem_reserve_ratio = 1 1 1          
# 对于内存大于64G时，建议设置，否则建议默认值 256 256 32      
```      
2、资源限制      
```      
vi /etc/security/limits.conf      
# nofile超过1048576的话，一定要先将sysctl的fs.nr_open设置为更大的值，并生效后才能继续设置nofile.          
* soft    nofile  1024000          
* hard    nofile  1024000          
* soft    nproc   unlimited          
* hard    nproc   unlimited          
* soft    core    unlimited          
* hard    core    unlimited          
* soft    memlock unlimited          
* hard    memlock unlimited         
```      
3、关闭透明大页，使用精准时钟（可选）      
```      
vi /etc/rc.local      
touch /var/lock/subsys/local      
if test -f /sys/kernel/mm/transparent_hugepage/enabled; then          
   echo never > /sys/kernel/mm/transparent_hugepage/enabled          
fi        
# tsc 时钟    
echo tsc > /sys/devices/system/clocksource/clocksource0/current_clocksource      
```    
```  
chmod +x /etc/rc.d/rc.local  
```  
## 部署gpdb (all host)    
1、部署依赖(root执行)  
```  
rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm     
yum install -y coreutils glib2 lrzsz mpstat dstat sysstat e4fsprogs xfsprogs ntp readline-devel zlib-devel openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc make smartmontools flex bison perl-devel perl-ExtUtils* openldap-devel jadetex  openjade bzip2 curl-devel curl apr-devel apr cmake3 python git iotop perf gcc-c++ dstat bzip2-devel krb5-devel libcurl-devel libevent-devel libkadm5 libyaml-devel libxml2-devel openssl-devel perl-ExtUtils-Embed python-devel sysstat python-pip xerces-c-devel  
pip install --upgrade pip  
pip install paramiko  pycrypto psutil lockfile pidlockfile  
```  
2、部署gpdb(root执行)  
```  
cd ~  
git clone https://github.com/greenplum-db/gpdb  
cd gpdb  
pip install -r python-dependencies.txt  
pip install -r python-developer-dependencies.txt  
./configure --disable-orca --with-perl --with-python --with-libxml --prefix=/opt/gpdb6  
make -j 128  
make install  
```  
3、检查当前GPDB的pg版本  
```  
/opt/gpdb6/bin/psql -V  
psql (PostgreSQL) 9.3beta1  
```  
## 规划存储目录 (all host)  
```  
useradd digoal  
passwd digoal   
mkdir /data01/gpdb6  
chown digoal:digoal /data01/gpdb6  
```  
## 初始化GPDB集群 (master host)  
1、配置文件  
```  
vi /opt/gpdb6/greenplum_path.sh   
# 追加  
export MASTER_DATA_DIRECTORY=/data01/gpdb6/gp-1  
export PGDATA=$MASTER_DATA_DIRECTORY  
export PGHOST=127.0.0.1  
export PGPORT=18000  
export PGUSER=digoal  
export PGPASSWORD=123  
export PGDATABASE=postgres  
```  
2、环境变量  
```  
su - digoal  
vi ~/.bash_profile  
# 追加  
. /opt/gpdb6/greenplum_path.sh  
```  
3、配置集群主机文件，包含所有节点(master, standby, segment, mirror hosts)  
```  
su - digoal  
vi hostfile  
digoal-citus-gpdb-test001  
digoal-citus-gpdb-test002  
digoal-citus-gpdb-test003  
digoal-citus-gpdb-test004  
digoal-citus-gpdb-test005  
digoal-citus-gpdb-test006  
digoal-citus-gpdb-test007  
digoal-citus-gpdb-test008  
digoal-citus-gpdb-test009  
```  
4、配置host认证  
[《Deepgreen(Greenplum) 多机部署测试 , TPC-H VS citus》](../20180903_02.md)    
```  
gpssh-exkeys -f ./hostfile  
```  
5、配置集群初始化文件  
如果master host不想配置segment node，则需要修改一下以上hostfile，把master host去掉。  
本例在所有主机上初始化segment.   
```  
vi cluster.conf  
ARRAY_NAME="mpp1 cluster"  
CLUSTER_NAME="mpp1 cluster"  
MACHINE_LIST_FILE=hostfile  
SEG_PREFIX=gp  
DATABASE_PREFIX=gp  
PORT_BASE=28000  
declare -a DATA_DIRECTORY=(/data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6 /data01/gpdb6)  
MASTER_HOSTNAME=digoal-citus-gpdb-test001  