整体替换。本 hack 说明了通过该方法查看被 Optimized out 的变量值的方法。
使用KAHO 这个 Runtirme Binary Patch（运行时二进制补丁）实现，可以将函数
总结
参考文献
执行上述操作之后，就可以在终端A上显示要确认的变量的值了。
296 1   第 6 章 高手们的调试技术 
 A Runtime Code Modification Method for Application Programs
?
a: 1914513257
[Debug]a0: -1258439661, al: 1520869100, a2: 1652083818
a: 262429437
[激活后在终端A上]
3693,1,"activated"
# kaho -a *pidof calc` 1
3693,1,"loaded"
Debug]a0: -795409887, al: -1135769211, a2: -2101358761
http://blog.miraclelinux.com/yume/files/YLUG-2008-0225update.pdf
开发运行时二进制补丁（KAHO）
http://ols.fedoraproject.org/OLS/Reprints-2008/yamato-reprint.pdf
3693,1,"unloaded"
# kaho -u ^pidof calc 1
3693,1,"deactivated"
# kaho -d *pidof calc` 1
下面的命令可以将替换的函数恢复原状。
www.TopSage.com
-大和一洋
---
## Page 315
本为基础，稍加改动而成。该脚本测量nanosleep（）系统调用实际睡眠了多长时间。
本hack使用的脚本如下所示。这段脚本以systemtap自带的sleeptime.stp示例脚
示例脚本
软件包。
2.6.27.7-53.fc9，systemtap版本为0.8-1.fc9。Fedora9中要用下述命令安装必要的
核模块，因此还要安装内核头文件。笔者使用的是Fedora9，内核版本为
要使用systemtap，需要在编译内核时加上调试信息，而且stap命令会自动构建内
准备
方便的函数，比kprobes要好用得多。
模块。此时会检查代码的安全性，而且被称为tapset的脚本群中事先准备了许多
测器处理程序，用专门的解析程序将侦测器脚本变换为C语言，并自动创建内核
systemtap是用kprobes创建的工具。它使用类似于C语言的特有脚本语言创建侦
开篇
Z5#
HACK
#!/usr/bin/stap-v
#debuginfo-install kernel
#yum intall kernel-devel kernel-headers
globalstart
*130029254757(sleep)nanosleep:13000717
*12846944.2805(NetworkManager) nanosleep:100964
Formatis:
129479242805(NetworkManager) nanosleep:100946
127995383389（xchat)nanosleep:9547
使用systemtap调试运行中的内核（之-pm
本hack以测量时间的程序为例，介绍systemtap的使用方法
www.TopSage.com
12978
305
---
## Page 316
306
298|第6章高手们的调试技术
probe kernel .function("hrtimer_nanosleep_restart") .return {
probe kernel.statement("hrtimer_nanosleepckernel/hrtimer.c:1551") {
probe syscall.nanosleep {
start = gettimeofday_us()
function proc:string() {
function timestamp:long() {
global entry_nanosleep_restart
global entry_nanosleep 
if (uid() != 500) next;
entry_nanosleep_restart[p] = entry_nanosleep[p];
printf("%d %s nanosleep is interrupted.\n", timestamp(), proc();
if (uid() != 500) next;
printf("%d %s nanosleep: &d\n", timestamp(), proc(), elapsed_time)
elapsed_time = t - entry_nanosleep[p]
t = gettimeofday_us(); p = pid()
probe syscall.nanosleep.return {
entry_nanosleep[p] = t 
t = gettimeofday_us(); p = pid()
if (uid() != 500) next;
orobe begin {
return sprintf(“%d (%s)", pid(), execname())
 return gettimeofday_us() - start
t = gettimeofday_us(); p = pid()
p = pid();
delete entry_nanosleep[p] 
if (uid() != 500) next;
www.TopSage.com
---
## Page 317
定义脚本启动、结束时执行的处理程序。用于脚本内的全局变量初始化，或是在
插入侦测器的位置称为侦测点。侦测点的定义方法有很多，这里介绍几种经常使
侦测点定义
函数。
将时间差显示到用户控制台。保存时刻要使用 tapset 提供的 gettimeofday_us()
方法很简单，就是保存执行 nanosleep()的时刻和 nanosleep()返回的时刻，返回时
实际的睡眠时间。
nanosleep()调用返回的时间通常要比要求的睡眠时间长一点。这里我们测量一下
步时间也会受到 nanosleep()的影响，例如给睡眠中的任务发送信号等，这会导致
件，系统负载状况会影响事件的发生时机。此外，除了定时器中断之外，其他异
在定时器中断事件发生时唤醒睡眠状态的进程，而且定时器中断事件是异步事
内核处理中，通过异步事件触发的处理非常多。本 hack 讨论的 nanosleep()就是
销（overhead）与脚本编写方法和机器性能有关，但其影响已经不可忽略。
时间，但是它不适合几毫秒以下的测量。这是因为尽管 systemtap自身的额外开
使用 systemtap 进行实时调试（live debug）的一个方便用法就是测量某项处理的
结束时收集日志、按特定格式显示。
用的定义方法。
测量时间
probe kernel.function("函数名").return
probe kernel.function("函数名")
probe end 
probe begin
 delete entry_nanosleep_restart[p];
printf("%d %s nanosleep_restart: %d\n", timestamp(), proc(), elapsed_time)
elapsed_time = t - entry_nanosleep_restart[p]
HACK#52 使用 systemtap 调试运行中的内核（之一）
www.TopSage.com
1299
307
---
## Page 318
308
被侦测部分的内核源代码如下所示。用这种方法，就能创建脚本，获知函数内的
本 hack 中使用下面这种写法在 nanosleep()的信号中断处理处插入侦测器。
侦测内核模块时同样可以像下面这样写。
令边界，就能按照期望插入。
对应的地址，以确定侦测器的位置。而直接指定地址的话，只要地址是正确的指
分，这种方法就很方便。但是，如果指定行号，那么某些内核代码的写法会导致
这两行用于在函数中插入侦测器。如果只想调试函数中某个f语句的条件匹配部
统调用时，用哪个都没问题。
这是侦测系统调用时的写法。与前面的 kernel.function()的效果相同，在侦测系
只需将前面的 kernel 改成 module("模块名")，剩下的部分完全一样。
在内核模块中定义侦测器时写法如下。
对象。另外，文件名部分也可以使用通配符。
制对象范围，如果不同文件中包含同名函数，那么用这种写法就能确定要侦测的
中定义的所有初始化函数插入侦测器。像这样在函数名后面写上文件名，就能限
第 1个例子向所有的内核初始化函数插入侦测器，第 2个例子给 kernel/sched.c
数名”部分可以使用通配符（*)，如下所示。
300丨第6章高手们的调试技术
probe kernel .statement("hrtimer_nanosleepakernel/hrtimer.c:1551")
侦测器插入的实际位置稍有偏差。这是因为 stap命令要根据内核的调试信息找出
probe module("模块名").statement("函数名@文件名：行号")
probe kernel.statement("函数名@文件名:行号")
probe syscall.系统调用名
probe module("模块名"),function("函数名")
probe kernel.function("*init*@kernel/sched.c")
probe kernel.function("*init*")
probe module("模块名").statement(地址）
probe kernel.statement(地址)
probe syscall.系统调用名.return
probe module("模块名").function("函数名").return
www.TopSage.com
---
## Page 319
否生效了，因此笔者在执行时一定会加上verbose选项（-v)。
执行脚本的命令为 stap。默认情况下几乎不会显示任何信息，很难看出侦测器是
尝试执行
行的 nanosleep()进行测量。
此，可以在各个侦测器处理程序开头加上下述处理，只对测试用户（UID=500）执
最后，只用这种写法，系统上执行的所有 nanosleep()都会被侦测，有点难用。因
if语句的判断结果是真还是假。
if (uid() != 500) next;
13404.c" in 370usr/620sys/988real ms.
320sys/778real ms.
Pass 2: analyzed script: 6 probe(s), 8 function(s), 15 embed(s), 3 global(s) in 450usr/
Pass l: parsed user script and 45 library script(s) in 230usr/10sys/243real ms.
# stap -V sleeptime.stp
1559
1558
5
6
1
1529 {
1527 long hrtimer_nanosleep(struct timespec *rqtp, struct timespec _
[kemel/hrtimer.c]
5
 out:
destroy_hrtimer_on_stack(&t.timer);
if (do_nanosleep(&t, mode))
/*信号中断时该if语句为假*/
ret = -ERESTART_RESTARTBLOCK;
restart->nanosleep.expires = t.timer.expires.tv64;
restart->nanosleep.rmtp = rmtp; 
restart->nanosleep.index = t.timer.base->index;
restart->fn = hrtimer_nanosleep_restart;
restart = &current_thread_info()->restart_block;
 goto out;
const enum hrtimer_mode mode, const clockid_t clockid)
HACK#52 使用 systemtap 调试运行中的内核（之一）1 301 
www.TopSage.com
._user *mtp,
309
---
## Page 320
310
项目页面中的入门教程等文档也十分丰富。
除了man page之外，systemtap 附带的示例脚本和 tapset 都有参考价值。此外，
法。systemtap用到了kprobes，因此kprobes 能实现的功能大都能用 systemtap实现。
本 hack 以测试 nanosleep()系统调用的实际时间为例，介绍了 systemtap 的使用方
确认完成后就可以结束systemtap。按Ctrl-C键，就可以卸载所有已加载的侦测器
输出的信息表明nanosleep（）被中断了。从第2条消息可以看出，nanosleep（）执行
可见，延迟只有8微秒，误差几乎可以忽略，是个优秀的系统。
消息的格式如下所示。显示的经过时间都以微秒为单位。
执行后，执行stap命令的终端上就会显示下面的信息。
nanosleep(），睡眠10秒试试看。
显示上述信息，说明侦测器生效了。接下来在其他终端上用测试账号执行
302|第6章高手们的调试技术
参考
总结
并结束systemtap。
秒。也就是说，笔者数秒比实际的时钟慢2.5秒左右。
后约1.2秒后收到了SIGSTOP。第3条信息表明从nanosleep（）返回大约花费了12.5
是，途中发送SIGSTOP中断nanosleep()的执行，等待大约10秒之后发送SIGCONT。
如果故意用信号中断执行会怎样呢？和刚才一样用usleep命令睡眠10秒钟，但
2324902126702(usleep) nanosleep_restart:12562868
11920140 26702 （usleep)nanosleep is interrupted.
侦测器生效后经过的时间PID（命令名）nanosleep：实际经过的时间
1330458619724（usleep)nanosleep:10000008
$usleep 16800000
1192014826702(usleep) nanosleep:1233996
Pass5:starting run.
900sys/6210realms.
www.TopSage.com
---
## Page 321
我们向 sleeptime.stp 中添加了以下代码，其余部分与[HACK#52]完全相同。
扩展 sleeptime.stp
为 0.8-1.fc9。
中数据的方法。运行环境为Fedora9，内核版本为2.6.27.7-53.fc9，systemtap 版本
阅读内核代码时，经常希望知道某个函数从哪里被调用，某个参数的值是什么。
95#
probe kernel.function("hrtimer_nanosleep_restart") {
function res_expires:long( res:long) %[
#include 
printf("restart->nanosleep.expires = %u\n", res_expires($restart);
print_backtrace();
printf("%d %s Call trace:\n", timestamp(), proc();.
if (uid() != 500) next;
- ya s  =  yr i
SystemTap 项目页面
/usr/share/systemtap/tapset/
systemtap 附带的 tapset
systemtap 附带的示例脚本
http://sourceware.org/systemtap/documentation.html
/usr/share/doc/systemtap-/examples/
使用systemtap调试运行中的内核(之二)
本 hack 介绍使用 systemtap 查看函数 backtrace、结构内容等的方法。
HACK#53使用 systemtap 调试运行中的内核（之二）
www.TopSage.com
安部东洋
| 303
nanosleep.expires
本 hack 用$restart 查看 hrtimer_nanosleep_restart()的参数 restart 的值。
进制代码进行反汇编，自行查找要查看的地址或寄存器。
查看，就只能直接指定地址或直接查看寄存器了。在这种情况下就得对内核的二
的写法或侦测点的位置会导致变量无法查看。如果实在不能用“$变量”的方式
函数内使用的变量可以用“$变量”的写法来查看。但是要注意，某些内核代码
查看内核内部数据
（hrtimer_nanosleep_restart()）写下了这一行。
本 hack 的例子在 nanosleep()被信号中断后，接收 SIGCONT 信号恢复运行的位置
在处理程序中写这样一行即可。
过，使用 systemtap 的话，只需编写侦测器处理程序，而不用这么麻烦了。只需
入 WARN_ON(1)等并重新编译内核，但是重新编译内核也是件相当麻烦的事儿。不
看出调用源，或是需要花费太多时间才能调查出来。此时会想到在内核代码中加
阅读内核代码时，经常会遇到这种情况：关心的函数太复杂，单从源代码上很难
查看调用跟踪
304 1  第6章高手们的调试技术
E
 print_backtrace();
8
1501 {
(esal yaesa aos)eisa dansou au pays-- un s
[kermelhrtimer.c] 
if (do_nanosleep(&t, HRTIMER_MODE_ABS))
t.timer.expires.tv64 = restart->nanosleep.expires;
hrtimer_init_on_stack(&t.timer, restart->nanosleep.index,
int ret = 0;
struct hrtimer_sleeper t;
goto out;
www.TopSage.com
HRTIMER MODE_ABS);
---
## Page 323
的侦测器处理程序。
账号执行 usleep 命令，睡眠10 秒。再发送 SIGSTOP和 SIGCONT，激活本hack 添加
如前所述，我们加上-g选项执行 stap 命令。同[HACK#52]，在其他终端上用测试
尝试执行
此，一般在编写处理程序时，加锁时要使用 trylock，获取失败就返回错误并结束。
注意。设计侦测器处理程序时，必须注意不要陷入等待自旋锁、睡眠等状态。因
访问被锁保护的数据时，用户必须自己处理锁，而且在脚本内编写互斥处理也要
可进入 guru 模式。但是，guru 模式下 systemtap 执行的安全检查功能就会无效。
在guru模式下执行 systemtap
并定义了函数 res_expires(),根据参数中给出的指针返回restart->nanosleep.expires。
本 hack 的示例中包含了 restart_block 结构定义的内核头文件,
用以下格式定义函数。
定义 C语言函数
在 systemtap 脚本中使用C语言有两个要点。
在脚本内使用C语言
function 函数名：返回值类型(参数:参数类型，...）%[C语言编写的处理%}
11000541 27784 (usleep) Call trace:
9144192 27784 (usleep) nanosleep: 1162593
9144183 27784 (usleep) nanosleep is interrupted.
5320usr/870sys/6219real ms.
Pass 4:compiledCinto
13896.c" in 370usr/640sys/1018real ms.
Pass 3: translated to C into "/tmp/stapv0IXZ1/stap_5879bfa558535efa4dced96aladff5e3_