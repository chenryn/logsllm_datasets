.text:0040101C                      or      ax, 33Fh  
.text:00401020                      mov     [ebp+var_2], ax  
.text:00401024                      fldcw   [ebp+var_2]  
.text:00401027                   ➋  mov     [esp+28h+var_28], offset sub_4010B0  
.text:0040102E                   ➊  call    sub_401120
很明显，这段代码与前面的 Linux示例存在一些差异。但是，有一个地方惊人地相似：只有一个函数被调用（➊），且该函数以一个函数指针作为参数（➋）。在这个例子中，sub_401120
 的作用与__libc_start_main
 相同，而 sub_4010B0
 则是程序的main
 函数。
使用gcc/MinGW 构建的Windows 二进制文件可以使用另一种形式的 start
 函数，如下所示：
.text:00401280 start             proc near  
.text:00401280  
.text:00401280 var_8             = dword ptr -8  
.text:00401280    
.text:00401280                   push    ebp  
.text:00401281                   mov     ebp, esp  
.text:00401283                   sub     esp, 8  
.text:00401286                   mov     [esp+8+var_8], 1  
.text:0040128D                   call    ds:__set_app_type  
.text:00401293                ➊  call    sub_401150  
.text:00401293 start             endp
这时，IDA 同样无法识别程序的main
 函数。关于main
 函数的位置，这段代码提供了若干条线索：只有一个非库函数被调用（➊ ，sub_401150
 ），该函数似乎并未使用任何参数（而main
 函数应包含参数）。这时，最好的办法是继续在sub_401150
 中搜索main
 函数。sub_401150
 的一部分代码如下所示：
.text:0040122A                  call    __p__environ  
.text:0040122F                  mov     eax, [eax]  
.text:00401231                ➍ mov     [esp+8], eax  
.text:00401235                  mov     eax, ds:dword_404000  
.text:0040123A                ➌ mov     [esp+4], eax  
.text:0040123E                  mov     eax, ds:dword_404004  
.text:00401243                ➋ mov     [esp], eax  
.text:00401246                ➊ call    sub_401395  
.text:0040124B                   mov     ebx, eax  
.text:0040124D                   call    _cexit  
.text:00401252                   mov     [esp], ebx  
.text:00401255                   call    ExitProcess
结果我们发现，这里的函数与我们前面看到的与FreeBSD 有关的start
 函数有许多相似之处。sub_401395
 可能就是main
 函数，因为它是唯一一个使用 3 个参数（➋、➌和➍）调用的非库函数，而且第三个参数（➍）与库函数__p__enviro
 的返回值有关，这使我们联想到一个事实，即 main函数的第三个参数应该是一个指向环境字符串数组的指针。虽然并未显示，但这段代码在之前还调用了getmainargs
 库函数，以在真正调用 main
 函数之前设置 argc
 和argv
 参数，并进一步强化一个概念：main
 函数即将被调用。
Visual C/C++代码的启动例程简洁明了，如下所示：
.text:0040134B start           proc near  
.text:0040134B                 call    ___security_init_cookie  
.text:00401350                 jmp     ___tmainCRTStartup  
.text:00401350 start           endp
通过应用启动签名，而非因为程序链接到一个包含给定符号的动态库，IDA 识别出两条指令引用的库例程。IDA 的启动签名能够轻松确定最初调用 main
 函数的位置，如下所示：
.text:004012D8                 mov     eax, envp  
.text:004012DD                 mov     dword_40ACF4, eax  
.text:004012E2                 push    eax             ; envp  
.text:004012E3                 push    argv            ; argv  
.text:004012E9                 push    argc            ; argc  
.text:004012EF               ➊ call   _main  
.text:004012F4                 add     esp, 0Ch  
.text:004012F7                 mov     [ebp+var_1C], eax  
.text:004012FA                 cmp     [ebp+var_20], 0  
.text:004012FE                 jnz     short $LN35  
.text:00401300                 push    eax             ; uExitCode  
.text:00401301                 call    $LN27  
.text:00401306 $LN35:                      ; CODE XREF: ___tmainCRTStartup+169↓j
.text:00401306                 call    __cexit  
.text:0040130B                 jmp     short loc_40133B
在tmainCRTStartup
 的整个代码中，_main
 是唯一一个使用 3 个参数调用的函数。通过深入分析我们发现，在调用_main
 函数之前，程序还调用了 GetCommondLine
 库函数，这是另一个迹象，说明程序不久将调用 main
 函数。关于如何使用启动签名的最后一点提示，需要注意的是，在这个例子中，IDA 通过匹配一个启动签名，完全靠它自己生成了_main
 这个名称。而且，ASCII 字符串main
 并未出现在这个例子使用的二进制文件中。因此，即使一个二进制文件已经被去除了符号，只要 IDA 能够匹配一个启动签名，它仍然能够发现并标识 main
 函数。
下面我们将要分析的最后一个C 编译器启动例程由Borland的免费命令行编译器生成2
 。Borland启动例程的最后几行代码如下所示：
2. 参见http://forms.embarcadero.com/forms/BLL32lompilerDownload/
 。
.text:00401041                 ➊  push    offset off_4090B8  
.text:00401046                    push    0               ; lpModuleName  
.text:00401048                    call    GetModuleHandleA  
.text:0040104D                    mov     dword_409117, eax  
.text:00401052                    push    0          ; fake return value  
.text:00401054                    jmp     __startup
压入到栈上的指针值（➊）引用了一个结构体，该结构体又包含一个指向main
 函数的指针。在__startup
 中，调用 main
 的设置如下所示：
.text:00406997                  mov     edx, dword_40BBFC  
.text:0040699D                ➍ push    edx  
.text:0040699E                  mov     ecx, dword_40BBF8  
.text:004069A4                ➌ push    ecx  
.text:004069A5                  mov     eax, dword_40BBF4  
.text:004069AA                ➋ push    eax  
.text:004069AB                ➊ call    dword ptr [esi+18h]  
.text:004069AE                  add     esp, 0Ch  
.text:004069B1                  push    eax             ; status  
.text:004069B2                  call    _exit
同样，这个例子与前面的例子有许多相似之处：调用 main
 函数（➊）时使用了 3 个参数➋、➌ 和➍（__startup
 中唯一一个如此调用的函数），返回值被直接传递给_exit
 ，以终止程序。进一步分析__startup
 后，我们发现，程序还调用了 Windows API 函数GetEnvironmentSrtings
 和GetCommandLine
 ，这通常是调用 main
 函数的先兆。
最后，为了证明跟踪程序的 main函数并不是C 程序特有的问题，我们以下面这个已编译的Visual Basic 6.0 程序的启动代码为例：
.text:004018A4 start:  
.text:004018A4                ➊ push    offset dword_401994  
.text:004018A9                  call    ThunRTMain
ThunRTMain
 库函数的作用与 Linux libc_start_main
 函数的作用类似，它在调用程序的 main
 函数之前执行任何所需的初始化任务。为了将控制权转交给 main
 函数，Visual Basic采用一种与前面例子中的 Borland代码非常类似的机制。ThunRTMain
 仅包含一个参数（➊），它是一个指向结构体的指针，该结构体中包含进行程序初始化所需的其他信息，包括 main
 函数的地址。这个结构体的内容如下所示：
.text:00401994 dword_401994 dd 21354256h, 2A1FF0h, 3 dup(0);DATA XREF:.text:start ↑ o
.text:004019A8              dd 7Eh, 2 dup(0)  
.text:004019B4              dd 0A0000h, 409h, 0  
.text:004019C0         ➊ dd offset sub_4045D0  
.text:004019C4              dd offset dword_401A1C  
.text:004019C8              dd 30F012h, 0FFFFFF00h, 8, 2 dup(1), 0E9h,401944h, 4018ECh
.text:004019C8              dd 4018B0h, 78h, 7Dh, 82h, 83h, 4 dup(0)
在这个数据结构中，只有一项（➊）引用了代码，它就是指向 sub_4045D0
 的指针。事实证明，sub_4045D0
 就是程序的main
 函数。
最后，要学会如何定位 main