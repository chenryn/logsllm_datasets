    using Wrox.ProCSharp.WCF.Data;
    namespace Wrox.ProCSharp.WCF.Service
    {
      [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
      public class RoomReservationService : IRoomService
      {
        public bool ReserveRoom(RoomReservation roomReservation)
        {
        var data = new RoomReservationRepository();
        data.ReserveRoom(roomReservation);
        return true;
        }
        public RoomReservation[] GetRoomReservations(DateTime fromTime,
          DateTime toTime)
        {
        var data = new RoomReservationRepository();
        return data.GetReservations(fromTime, toTime);
        }
      }
    }
图44-2显示了前面创建的程序集及其依赖关系。RoomReservationContracts程序集由
Room-ReservationData和RoomReservationService使用。
图44-2
44.2.4 WCF服务宿主和WCF测试客户端
WCF Service Library项目模板创建了一个应用程序配置文件App.config，它需要适用
于新类名和新接口名。service元素引用了包含名称空间的服务类型
RoomReservationService，协定接口需要用endpoint元素定义（配置文件
RoomReservation/RoomReservationService/app.config）。
  注意： 服务地址http://localhost:8731/Design_Time_Addresses有一个关联的访
问控制列表（ACL），它允许交互式用户创建一个监听端口。默认情况下，非管理员
用户不允许在监听模式下打开端口。使用命令行实用程序netsh http show urlacl可以查看
ACL，用netsh http add urlacl url=http://+:8080/MyURI user=someUser listen=yes添加新
项。
从Visual Studio 2015中启动这个库会启动WCF服务宿主，它显示为任务栏的通知区域
中的一个图标。单击这个图标会打开WCF服务宿主窗口，如图44-3所示。在其中可以查看
服务的状态。WCF库应用程序的项目属性包含WCF选项的选项卡，在其中可以选择运行
同一个解决方案中的项目时是否启动WCF服务宿主。默认打开这个选项。另外在项目属
性的调试配置中，会发现已定义了命令行参数/client:"WcfTestClient.exe"。WCF服务主机
使用这个选项会启动WCF测试客户端，如图44-4所示，该测试客户端可用于测试应用程
序。双击一个操作，输入字段会显示在应用程序的右边，可以在其中填充要发送给服务的
数据。单击XML选项卡，可以看到已收发的SOAP消息。
图44-3
图44-4
44.2.5 自定义服务宿主
使用WCF可以在任意宿主上运行服务。可以为对等服务创建一个WPF应用程序。可
以创建一个Windows服务，或者用Windows 
Activation 
Services（WAS）或Internet
Information 
Services（IIS）存放该服务。控制台应用程序也适合于演示简单的自定义宿
主。
对于服务宿主，必须引用RoomReservationService库和System.ServiceModel程序集。
该服务首先实例化和打开ServiceHost类型的对象。这个类在System.ServiceModel名称空间
中定义。实现该服务的RoomReservationService类在构造函数中定义。调用Open方法会启
动服务的监听器信道，该服务准备用于监听请求。Close方法会停止信道。下面的代码段
还添加了ServiceMetadataBehavior类型的一个操作。添加该操作，就允许使用WSDL创建
一个客户应用程序（代码文件RoomReservation/RoomReservationHost/Program.cs）：
      using System;
      using System.ServiceModel;
      using System.ServiceModel.Description;
      using Wrox.ProCSharp.WCF.Service;
      using static System.Console;
      namespace Wrox.ProCSharp.WCF.Host
      {
        class Program
        {
          internal static ServiceHost s_ServiceHost = null;
          internal static void StartService()
          {
          try
          {
            s_ServiceHost = new ServiceHost(typeof(RoomReservationService),
              new Uri("http://localhost:9000/RoomReservation"));
            s_ServiceHost.Description.Behaviors.Add(
              new ServiceMetadataBehavior
              {
                HttpGetEnabled = true
              });
            myServiceHost.Open();
          }
          catch (AddressAccessDeniedException)
          {
            WriteLine("either start Visual Studio in elevated admin " +
                "mode or register the listener port with netsh.exe");
          }
          }
          internal static void StopService()
          {
          if (s_ServiceHost ! = null &&
              s_ServiceHost.State  == CommunicationState.Opened)
          {
            s_ServiceHost.Close();
          }
          }
          static void Main()
          {
          StartService();
          WriteLine("Server is running. Press return to exit");
          ReadLine();
          StopService();
          }
        }
      }
对于WCF配置，需要把用服务库创建的应用程序配置文件复制到宿主应用程序中。
使用WCF Service Configuration Editor可以编辑这个配置文件，如图44-5所示。
图44-5
除了使用配置文件之外，还可以通过编程方式配置所有内容，并使用几个默认值。宿
主应用程序的示例代码不需要任何配置文件。ServiceHost构造函数的第二个参数定义了服
务的基地址。通过这个基地址的协议来定义默认绑定。HTTP的默认值是
BasicHttpBinding。
使用自定义服务宿主，可以在WCF库的项目设置中取消用来启动WCF服务宿主的
WCF选项。
44.2.6 WCF客户端
对于客户端，WCF可以灵活选择所使用的应用程序类型。客户端可以是一个简单的
控制台应用程序。但是，对于预订会议室，应创建一个包含控件的简单的WPF应用程
序，如图44-6所示。
图44-6
因为服务宿主用ServiceMetadataBehavior配置，所以它提供了一个MEX端点。启动服
务宿主后，就可以在Visual Studio中添加一个服务引用。在添加服务引用后，会弹出如图
44-7所示的对话框。用URL http://localhost:9000/RoomReservation? wsdl输入服务元数据的
链接，把名称空间设置为RoomReservationService。这将为生成的代理类定义名称空间。
图44-7
添加服务引用会添加对System.Runtime.Serialization和System.ServiceModel程序集的引
用，还会添加一个包含绑定信息和服务端点地址的配置文件。
根据数据协定把RoomReservation生成为一个部分类。这个类包含协定的所有
[DataMember]元素。RoomServiceClient类是客户端的代理，该客户端包含由操作协定定义
的方法。使用这个客户端，可以将会议室预订信息发送给正在运行的服务。
在代码文件RoomReservation/RoomReservationClient/MainWindow.xaml.cs中，通过按
钮的Click事件调用OnReserveRoom方法。通过服务代理调用ReserveRoomAsync。
reservation变量通过数据绑定接收UI的数据。
      public partial class MainWindow : Window
      {
        private RoomReservation _reservation;
        public MainWindow()
        {
          InitializeComponent();
          reservation = new RoomReservation
          {
          StartTime = DateTime.Now,
          EndTime = DateTime.Now.AddHours(1)
          };
          this.DataContext = _reservation;
        }
        private async void OnReserveRoom(object sender, RoutedEventArgs e)
        {
          var client = new RoomServiceClient();
          bool reserved = await client.ReserveRoomAsync(reservation);
          client.Close();
          if (reserved)
          {
          MessageBox.Show("reservation ok");
          }
        }
      }
在RoomReservation解决方案的设置中，可以配置多个启动项目，在本例中是
RoomReservation-Client和RoomReservationHost。运行服务和客户端，就可以将会议室预
订信息添加到数据库中。
44.2.7 诊断
运行客户端和服务应用程序时，知道后台发生了什么很有帮助。为此，WCF使用一
个需要配置的跟踪源。可以使用Service Configuration Editor，选择Diagnostics节点，启用
Tracing and Message Logging功能来配置跟踪。把跟踪源的跟踪级别设置为Verbose会生成
非常详细的信息。这个配置更改把跟踪源和监听器添加到应用程序配置文件中，如下所
示：
 注意： 
WCF类的实现使用System.ServiceModel和
System.ServiceModel.MessageLogging跟踪源来写入跟踪消息。跟踪和配置跟踪源及监
听器的更多内容详见第20章。
启动应用程序时，使用verbose跟踪设置的跟踪文件会很快变得很大。为了分析XML
日志文件中的信息，.NET SDK包含了一个Service Trace Viewer工具svctraceviewer.exe。图
44-8显示了输入一些数据的客户应用程序，图44-9显示了这个工具选择跟踪和消息日志文
件后的视图。BasicHttpBinding用传送来的信息突出显示。如果把配置改为使用
WsHttpBinding，就会看到许多消息都与安全性相关。根据安全性需求，可以选择其他配
置选项。
图44-8
图44-9
下面详细介绍WCF的细节和不同的选项。
44.2.8 与客户端共享协定程序集
在前面的WPF客户应用程序中，使用元数据创建了一个代理类，用Visual Studio添加
了一个服务引用。客户端也可以用共享的协定程序集来创建，如下所示。使用协定接口和
ChannelFactory类来实例化连接到服务的通道。
类ChannelFactory的构造函数接受绑定配置和端点地址作为参数。绑定必
须与服务宿主定义的绑定兼容，用EndPointAddress类定义的地址引用了当前运行的服务的
URI。CreateChannel方法创建了一个连接到服务的通道，接着就可以调用服务的方法了
（代码文件
RoomReservation/RoomReservationClientSharedAssembly/MainWindow.xaml.cs）。
    using System;