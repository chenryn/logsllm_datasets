The goal of a key exchange protocol is to establish sessions
between two different parties so that they compute the same
key and agree on the algorithms and authentication setting. We
say that two sessions match when they derive the same session
key [29]. For deﬁning downgrade resilience, we rely on the
weaker notion of partnering, based on unique identiﬁers—at
most two sessions may assign the same value to uid.
(cid:2) are partnered if
(cid:2)
.uid = π.uid.
π
A session π is unpartnered when there is no such π
Deﬁnition 1 (Partnering): Sessions π and π
.role = π.role (they have opposite roles) and π
(cid:2).
(cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
For example, in TLS, a suitable value for uid is the pair of
nonces sent by the client and server in their hello messages. To
guarantee partnering upon completion, a protocol needs to pro-
tect the messages that inﬂuence uid against man-in-the-middle
attacks. As some conﬁgurations—in particular those where
entity authentication is optional—do not protect against man-
in-the-middle attacks, our deﬁnition depends on a predicate PS
that indicates conﬁgurations that provide Partnering Security.
Typically, these conﬁgurations demand peer authentication.
Deﬁnition 2 (Partnering security): The advantage of adver-
sary A against the partnering security of Π, Advpartnering
(A),
is the probability that, when A interacts with protocol Π, there
is an unpartnered session π such that π.complete = true and
PS(π.cfg) holds.
Π, PS
That is, partnering security requires that sessions that com-
plete with a protected conﬁguration have at least one partner
session that assigns the same value to uid.
B. Multi-mode authentication
We now deﬁne authentication for protocols in which long-
term identiﬁers (e.g. public keys or pre-shared key identiﬁers)
of peers are themselves negotiated. This is also known as
the post-speciﬁed peer setting [18] and the type of authen-
tication (e.g. mutual or bilateral) is determined as part of
the negotiation [22]. We incorporate entity identiﬁers eidr
for r ∈ {I, R} and authentication type, together with the
negotiated cryptographic algorithms in the mode variable. We
write eidr as shorthand for mode.eidr. As algorithms can
be weak, keys can be compromised, and authentication can
be unilateral, whether participants get guarantees depends
crucially on the outcome of negotiation.
While the predicate PS for partnering is deﬁned over con-
ﬁgurations ﬁxed upon creation of a session, our authentication
deﬁnition depends on a predicate Auth(mode, r), which holds
when mode is expected to authenticate role r. Authentication
as deﬁned by Lowe [33] guarantees agreement on the variables
of authenticated peers.
(cid:2) on x
.x. For agreement on a set X we require that
(cid:2) on all x ∈ X.
Deﬁnition 3 (Agreement): A session π agrees with π
(cid:2)
when π.x = π
π agrees with π
When deﬁning downgrade resilience, we consider a weaker
notion that guarantees equality once both peers have assigned
a value to x.
Deﬁnition 4 (Pre-agreement): A session π pre-agrees with
(cid:2) on x when π.x = π
We consider authentication with agreement. Authentication
.x = ⊥.
π
(cid:2)
(cid:2)
.x or π
with pre-agreement can be deﬁned analogously.
The advantage Advmm-auth
Deﬁnition 5 (Multi-mode authentication): A session π com-
pletes maliciously for X when π.complete = true but there is
(cid:2) matching π that agrees with π on X.
no partnered session π
Π, Auth, X (A) of an adversary A against
the multi-mode authentication security with agreement on X
of protocol Π is the probability that, when A interacts with
protocol Π, a session π completes maliciously for X and
Auth(π.mode, π.role) holds.
Let r = π.role. Note that Auth(π.mode, r) typically includes
the requirement that the long term key π.eidr of the peer is
honest. If, as in SIGMA-N, the mode is secure against key-
compromise impersonation attacks [26] then π.eidr need not
be honest. In addition, the predicate Auth models concurrent
mixed-mode authentication. A protocol mode provides mutual-
authentication if Auth(π.mode, r) holds regardless of r. It
provides server-only authentication if only Auth(π.mode, I)
holds, i.e., only clients get guarantees.
Observe that the authentication mode is itself negotiated.
The same long-term keys eidr routinely appear in different
modes and protocols may assign the same key in different
modes. Agreement on mode and other variables may be
critical for higher-level protocols; mode may include record
algorithms and using the same keys with different algorithms
may lead to agile security problems. In any case it contains the
entity identiﬁers that should be in agreement to avoid identity
confusion attacks [20]. As we will see, protocols need to have
sufﬁcient downgrade resilience to guarantee that the preferred
authentication mode is negotiated.
C. Key-indistinguishability and user privacy
Classical deﬁnitions of key indistinguishability are param-
eterized by a freshness predicate Fresh that determines the
sessions with uncompromised keys. Key indistinguishability
requires that for fresh sessions, an adversary cannot tell apart
the real session key from a random one.
For SIGMA-N, a suitable Fresh predicate holds for π when
the group in π.mode is strong, A neither queried Reveal(π)
(cid:2), and π.eid¯r is honest.
nor Reveal(π
Identity protection and deniability are other orthogonal
security requirements of key-exchange protocols. Although we
do not formally present them here, we note that many design
decisions in real-world key-exchange protocols are motivated
by user privacy in addition to the more common security goals
of key indistinguishability and entity authentication.
(cid:2)) for a matching session π
D. Instantiating our model for SIGMA-N
Consider the SIGMA-N protocol of Fig. 1. The conﬁg-
urations should include sufﬁcient detail
to determine the
negotiated mode. We thus include the acceptable groups and
a function PK from identities to peer public keys. The latter
would normally be implemented by looking up the public key
of the peer in a certiﬁcate store. We thus have variables
(cid:2)
cfg
uid
mode
(cid:2)
=
(I, A, pkA, PK, groups)
(R, B, pkB, PK, groups)
for initiator I
for responder R
(cid:2)
= (gx, gy)
(cid:2)
= (Gi, pkA, pkB) .
III. DEFINING DOWNGRADE RESILIENCE
Downgrade resilience is motivated by protocols such as
SIGMA-N that despite satisfying the deﬁnitions above remain
vulnerable to practical attacks. We model the desired outcome
of negotiation using a function Nego that maps two conﬁgu-
rations with opposite roles to the protocol mode negotiated (if
509509
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
any) in the absence of active adversaries. Formally, if a session
(cid:2) completes, it must be the
π with role r talking to a session π
(cid:2)
case that π.mode = Negor(π.cfg, π
.cfg), where Negor is an
abbreviation deﬁned by case:
(cid:2)
Negor(cfgr, cfg¯r)
(cid:2)
=
Nego(cfgr, cfg¯r) when r = I
Nego(cfg¯r, cfgr) when r = R .
Deﬁnition 6 (Negotiation correctness): The protocol nego-
tiation is correct if, whenever a session π with role r and
conﬁguration cfgr completes, there exists a peer conﬁguration
cfg¯r such that π.mode = Negor(cfgr, cfg¯r).
This property captures that, if a protocol mode is disabled
by a conﬁguration, then it cannot be negotiated. Although we
expect this basic property to hold unconditionally, implemen-
tation errors may break it. For instance, the FREAK attack
stems from TLS clients that do not offer export ciphersuites
but still accept export-grade RSA keys. An implementation
of SIGMA-N in which an initiator accepts groups it did not
propose would also fail to satisfy negotiation correctness.
Downgrade security complements negotiation correctness.
Informally, a protocol is downgrade secure when two sessions
of opposite roles with the same unique identiﬁer uid always
negotiate the mode prescribed by their conﬁgurations. Hence,
downgrade security concerns situations in which one partic-
ipant can save the other, even if the latter supports broken
cryptography. However, we have to assume that at least some
of the mechanisms of the protocol (e.g., its signature modes)
are strong enough. Conversely,
if both participants enable
(among others) a mode that is entirely insecure, then there
is no cryptographically sound way to prevent an attacker from
downgrading their connection.
Our deﬁnition is parameterized by a Downgrade Protection
(cid:2)
(cid:2)
.cfg).
(cid:2) such that DP(π.cfg, π
(π.cfg, π
predicate DP on pairs of conﬁgurations.
DP(cfgr, cfg¯r) indicates the pairs of conﬁgurations from
which we expect downgrade protection; it is not necessarily
symmetric. By convention, cfgr is the local conﬁguration,
cfg¯r is the peer conﬁguration, and when DP(cfgr, cfg¯r)
holds, we expect that the local session is protected.
Deﬁnition 7 (Downgrade security): A session π is down-
graded when π.complete = true and there is a partnered
.cfg) holds, but π.mode (cid:5)=
session π
Negoπ.role
Π, DP, X (A) of A against downgrade
security with pre-agreement on X is the probability that, when
A terminates after interacting with Π, there is a session π that
either is downgraded or does not pre-agree with a partnered
(A) when X = {}.
session π
Note that only partnered sessions get downgrade protection
guarantees, so our deﬁnition is meaningful only for protocols
for which partnering security holds. Thus, for role r,
if
DP(cfgr, cfg¯r) holds for any peer conﬁguration cfg¯r, we need
that PS(cfgr) holds; we write this concisely as DP ⊆r PS, and
observe that this property holds in our case studies.
(cid:2) on X. We write Advdowngrade
The advantage Advdowngrade
Π, DP
Agreement on mode (or some of its parts) is desirable but
not essential for downgrade protection. A downgrade attack
510510
(cid:2) does not assign a mode,
(cid:2) assign
means that one or both partnered sessions π and π
a mode weaker than the prescribed one. In particular, if the
then it has not been
session π
downgraded. Pre-agreement ensures that if the partner session
(cid:2) of π assigns some mode, then this mode coincides with
π
the mode of π. Conversely, for conﬁgurations cfgr and cfg¯r
for which both DP(cfgr, cfg¯r) and DP(cfg¯r, cfgr) hold, we do
have downgrade protection with pre-agreement on mode.
The DP predicate for downgrade protection plays a role
it depends only
similar to Auth for authentication, except
on static conﬁgurations and on the honesty of long-term
credentials. This reﬂects that downgrade protection should
depend only on the inputs to the negotiation, and not the
negotiation itself, which may be inﬂuenced by an adversary.
Our formal conﬁgurations are session-speciﬁc, and do not
necessarily coincide with concrete conﬁgurations in real-
world protocol deployments. In particular, each conﬁguration
contains credentials only for the intended peer (e.g. cached
certiﬁcates, key ﬁngerprints). As an example, our conﬁgura-
tions for TLS include the authentication settings of the session:
the client’s conﬁguration expresses its intent to communicate
with a particular server, who may support multiple negotiable
certiﬁcates with different long-term keys, for instance, using
the server name indication extension [15].
Ideally, DP(π.cfg,·) would hold regardless of the second
conﬁguration. Anticipating on our results, this is the case for
SSH, where DP is deﬁned as follows: the conﬁguration of π
must require authentication of its peer, all peer keys accepted
by π must be honest, and all signature algorithms must be
.cfg has on the
(agile) strong. In this case the only inﬂuence π
(cid:2)
downgrade protection of π is in the level of agility, i.e. will π
use its long-term keys also in other protocol and cipher modes?
However, this is not the case e.g. for TLS 1.2 clients, which do
not get downgrade protection with servers that support weak
Difﬁe-Hellman groups.
(cid:2)
A. Downgrade resilience of SIGMA-N
Recall that SIGMA-N conﬁgurations are tuples of the form
(r, ID, pkID, PK, groups) where PK is a function mapping
identities to public keys. The negotiation function describes
the correct mode upon completion. Given a function nego
that selects the preferred common group, Nego(cfgI , cfgR) is
deﬁned as
(nego(cfgI .groups, cfgR.groups), cfgI .pkA, cfgR.pkB)
when cfgI .pk A = cfgR.PK(A), and ⊥ otherwise.
For such a Nego function, DP can hold only for pairs of
conﬁgurations with at most one group in common, as shown
by the attack in Fig. 2.
B. Downgrade resilience and multi-mode security
Protocol analysts often consider protocols restricted to spe-
ciﬁc modes and conﬁgurations. For instance it is common
practice to analyze individual protocol modes in isolation.
Similarly we can restrict the universe of conﬁgurations of a
protocol to those that provide downgrade protection. Consider
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
sets of conﬁgurations CI and CR picked by initiators and
responders respectively. We consider restricted protocols in
which sessions abort whenever they are initialized with a
conﬁguration outside of the set CI ∪ CR.
Deﬁnition 8 (Protected conﬁgurations): Let DP be a down-
grade protection predicate. A pair of sets of conﬁgurations
(Cr, C¯r) gives downgrade protection to role r if Cr×C¯r ⊆ DP.
The following theorem expresses that when downgrade se-
curity holds, only the security of modes that can be negotiated
in the absence of an adversary matters. That is, if peers support
insecure modes, but with such a low priority that they never
negotiate them on their own, then these modes do not affect
security in the presence of an adversary.
Theorem 1 (Downgrade resilience and multi-mode security):
Let Π be a protocol, (Cr, C¯r) sets of conﬁgurations, DP a
downgrade protection predicate, and N = {Negor(cfgr, cfg¯r) |
cfgr, cfg¯r ∈ Cr × C¯r} the modes negotiable without adversary
inﬂuence. If DP ⊆r PS and
• (Cr, C¯r) gives downgrade protection to r,
• Π is multi-mode authentication secure for Auth, X,
• Π is partnering secure for PS, and
• Π is downgrade secure for DP,
then the protocol Π restricted to conﬁgurations in Cr ∪ C¯r
(cid:2)
is multi-mode authentication secure for a more lax Auth
predicate that deems all modes outside of N as “good”,
= Auth(m, role)∨(m /∈ N ∧ role = r).
i.e. Auth
Concretely, given an adversary A against authentication for
(cid:2)
Auth
(cid:2)(m, role)
, X, we have