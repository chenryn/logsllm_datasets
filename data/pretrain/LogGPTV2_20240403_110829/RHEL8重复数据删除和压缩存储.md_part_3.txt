    -   如果物理块设备大于 16TiB，请添加 `--vdoSlabSize=32G`{.literal}
        选项，将卷上的 slab 大小增加到 32GiB。
        在大于 16TiB 的块设备中使用默认 2GiB 的 slab 大小会导致 a
        `vdo create`{.literal} 命令失败，并显示以下错误：
        ``` screen
        vdo: ERROR - vdoformat: formatVDO failed on '/dev/device': VDO Status: Exceeds maximum number of slabs supported
        ```
    :::
    ::: example
    []{#deploying-vdo_deduplicating-and-compressing-storage.html#idm139672003428512}
    **例 1.1. 为容器存储创建 VDO**
    ::: example-contents
    例如，要为 1TB 块设备中的容器存储创建 VDO 卷，您可以使用：
    ``` screen
    # vdo create \
          --name=vdo1 \
          --device=/dev/disk/by-id/scsi-3600508b1001c264ad2af21e903ad031f \
          --vdoLogicalSize=10T
    ```
    :::
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果在创建 VDO 卷时发生故障，请删除要清理的卷。详情请查看
    ["删除失败创建的 VDO
    卷"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#removing-an-unsuccessfully-created-vdo-volume_removing-vdo-volumes "删除失败创建的 VDO 卷"){.xref}。
    :::
3.  在 VDO 卷之上创建一个文件系统：
    ::: itemizedlist
    -   对于 XFS 文件系统：
        ``` screen
        # mkfs.xfs -K /dev/mapper/vdo-name
        ```
    -   对于 ext4 文件系统：
        ``` screen
        # mkfs.ext4 -E nodiscard /dev/mapper/vdo-name
        ```
    :::
4.  使用以下命令等待系统注册新设备节点：
    ``` screen
    # udevadm settle
    ```
:::
::: orderedlist
**后续步骤**
1.  挂载文件系统。详情请查看 ["挂载 VDO
    卷"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#mounting-a-vdo-volume_deploying-vdo "挂载 VDO 卷"){.xref}。
2.  为 VDO 设备中的文件系统启用 `丢弃`{.literal} 功能。详情请查看
    ["启用定期块丢弃"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#enabling-periodic-block-discard_deploying-vdo "启用定期块丢弃"){.xref}。
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#deploying-vdo_deduplicating-and-compressing-storage.html#mounting-a-vdo-volume_deploying-vdo}挂载 VDO 卷 {.title}
:::
这个过程会在 VDO 卷中手动挂载文件系统，也可以永久挂载文件系统。
::: itemizedlist
**先决条件**
-   在您的系统上创建了 VDO 卷。具体步骤请查看 ["创建 VDO
    卷"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#proc_creating-a-vdo-volume-deploying-vdo "创建 VDO 卷"){.xref}。
:::
::: itemizedlist
**流程**
-   要手动将文件系统挂载到 VDO 卷中，请使用：
    ``` screen
    # mount /dev/mapper/vdo-name mount-point
    ```
-   要将文件系统配置为在引导时自动挂载，请在 `/etc/fstab`{.literal}
    文件中添加一行：
    ::: itemizedlist
    -   对于 XFS 文件系统：
        ``` screen
        /dev/mapper/vdo-name mount-point xfs defaults,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0
        ```
    -   对于 ext4 文件系统：
        ``` screen
        /dev/mapper/vdo-name mount-point ext4 defaults,x-systemd.device-timeout=0,x-systemd.requires=vdo.service 0 0
        ```
    :::
    如果 VDO 卷位于需要网络的块设备中，如 iSCSI，请添加
    `_netdev`{.literal} 挂载选项。
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} 手册页.
-   有关 iSCSI `挂载选项`{.literal} 的详情，请参考
    `systemd.mount(5)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#deploying-vdo_deduplicating-and-compressing-storage.html#enabling-periodic-block-discard_deploying-vdo}启用定期块丢弃 {.title}
:::
这个过程启用 `systemd`{.literal}
计时器，它会定期丢弃所有支持的文件系统中未使用的块。
::: itemizedlist
**流程**
-   启用并启动 `systemd`{.literal} 计时器：
    ``` screen
    # systemctl enable --now fstrim.timer
    ```
:::
:::
::: section
::: titlepage
# []{#deploying-vdo_deduplicating-and-compressing-storage.html#proc_monitoring-vdo_deploying-vdo}监控 VDO {.title}
:::
此流程描述了如何从 VDO 卷获取使用效率的信息。
::: itemizedlist
**先决条件**
-   安装 VDO 软件。请参阅 ["安装
    VDO"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#proc_installing-vdo-deploying-vdo "安装 VDO"){.xref}。
:::
::: itemizedlist
**流程**
-   使用 `vdostats`{.literal} 工具获取有关 VDO 卷的信息：
    ``` screen
    # vdostats --human-readable
    Device                   1K-blocks    Used     Available    Use%    Space saving%
    /dev/mapper/node1osd1    926.5G       21.0G    905.5G       2%      73%
    /dev/mapper/node1osd2    926.5G       28.2G    898.3G       3%      64%
    ```
:::
::: itemizedlist
**其它资源**
-   The `vdostats(8)`{.literal} 手册页.
:::
:::
:::
[]{#maintaining-vdo_deduplicating-and-compressing-storage.html}
::: chapter
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#maintaining-vdo_deduplicating-and-compressing-storage}第 2 章 维护 VDO {.title}
:::
部署 VDO 卷后，您可以执行某些任务来维护或优化它。以下一些任务是 VDO
卷正常工作所必需的。
::: itemizedlist
**先决条件**
-   安装并部署 VDO。请参阅 [第 1 章 *部署
    VDO*](#deploying-vdo_deduplicating-and-compressing-storage.html "第 1 章 部署 VDO"){.xref}。
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#managing-free-space-on-vdo-volumes_maintaining-vdo}管理 VDO 卷的空闲空间 {.title}
:::
VDO 是一个精简配置的块存储目标。因此，您必须主动监控和管理 VDO
卷中的空间使用情况。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#the-physical-and-logical-size-of-a-vdo-volume_managing-free-space-on-vdo-volumes}VDO 卷的物理和逻辑大小 {.title}
:::
这部分论述了 VDO 可以使用的物理大小、可用物理大小和逻辑大小。
::: variablelist
[物理大小]{.term}
:   这与底层块设备的大小相同。VDO 使用这个存储用于：
    ::: itemizedlist
    -   用户数据，这些数据可能会进行重复数据删除和压缩
    -   VDO 元数据，如 UDS 索引
    :::
[可用物理大小]{.term}
:   这是 VDO 可用于用户数据的物理大小的一部分
    它等同于物理大小减去元数据的大小，再减去将卷根据指定的 slab
    的大小分为 slab 后剩余的值。
[逻辑大小]{.term}
:   这是 VDO
    卷在应用程序中的置备大小。它通常大于可用的物理大小。如果没有指定
    `--vdoLogicalSize`{.literal} 选项，则逻辑卷的调配现在被置备为
    `1:1`{.literal} 比率。例如，如果将 VDO 卷放在 20GB 块设备之上，则为
    UDS 索引保留 2.5 GB（如果使用默认索引大小）。剩余的 17.5 GB 为 VDO
    元数据和用户数据提供。因此，要消耗的可用存储不超过 17.5
    GB，且可能会因为组成实际 VDO 卷的元数据而减少。
    VDO 目前支持任意逻辑卷大小最多为物理卷的 254 倍，但不能超过 4PB。
:::
::: figure
[]{#maintaining-vdo_deduplicating-and-compressing-storage.html#idm139671946299040}
**图 2.1. VDO 磁盘机构**
::: figure-contents
::: mediaobject
![VDO 磁盘机构](images/vdo-disk-organization.png)
:::
:::
:::
在这个图表中，VDO 重复数据删除存储对象完全位于块设备之上，这意味着 VDO
卷的物理大小与基本块设备大小相同。
::: itemizedlist
**其它资源**
-   有关不同大小的块设备中存储 VDO 元数据数量的更多信息，请参阅 ["VDO
    物理大小要求示例"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#examples-of-vdo-requirements-by-physical-size_vdo-requirements "VDO 物理大小要求示例"){.xref}。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#thin-provisioning-in-vdo_managing-free-space-on-vdo-volumes}VDO 中的精简置备 {.title}
:::
VDO 是一个精简配置的块存储目标。VDO
卷使用的物理空间量可能与为存储用户显示的卷大小有所不同。您可以使用它来节约存储成本。
::: title
**没有可用空间条件**
:::
如果写入的数据没有达到预期的性能率，请小心会意外出现存储空间耗尽的问题。
每当逻辑块（虚拟存储）的数量超过物理块（实际存储）的数量时，文件系统和应用程序可能会意外地遇到没有存储空间的问题。因此，使用
VDO 的存储系统必须为您提供一个监控 VDO 卷中可用池大小的方法。
您可以使用 `vdostats`{.literal}
实用程序确定此可用池的大小。这个工具的默认输出列出所有运行 VDO
卷的信息，其格式与 Linux `df`{.literal} 程序类似。例如：
``` screen
Device                1K-blocks   Used        Available   Use%
/dev/mapper/vdo-name  211812352   105906176   105906176   50%
```
当 VDO 卷的物理存储容量接近满时，VDO 在系统日志中报告警告，如下所示：
``` screen
Oct  2 17:13:39 system lvm[13863]: Monitoring VDO pool vdo-name.
Oct  2 17:27:39 system lvm[13863]: WARNING: VDO pool vdo-name is now 80.69% full.
Oct  2 17:28:19 system lvm[13863]: WARNING: VDO pool vdo-name is now 85.25% full.
Oct  2 17:29:39 system lvm[13863]: WARNING: VDO pool vdo-name is now 90.64% full.
Oct  2 17:30:29 system lvm[13863]: WARNING: VDO pool vdo-name is now 96.07% full.
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
这些警告消息只有在 `lvm2-monitor`{.literal}
服务运行时才会出现。它会被默认启用。
:::
::: title
**如何防止没有空间的问题**
:::
如果可用池的大小低于一定级别，可以执行以下操作：
::: itemizedlist
-   删除数据。当删除的数据不再被重复时，可能重新获得可用空间。只有发出了签发后，删除数据才可以释放空间。
-   添加物理存储
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
监控 VDO 卷的物理空间，以防止出现空间不足的情况。物理块不足可能会导致
VDO 卷中最近写入的数据丢失。
:::
::: title
**精简配置以及 TRIM 和 DISCARD 命令**
:::
要从精简配置的存储节约中受益，物理存储层需要知道何时删除数据。使用精简配置存储运行的文件系统会发送
`TRIM`{.literal} 或 `DISCARD`{.literal}
命令，以便在不再需要逻辑块时通知存储系统。
有几种发送 `TRIM 或`{.literal} `DISCARD`{.literal} 命令的方法：
::: itemizedlist
-   通过 `discard`{.literal}
    挂载选项，无论何时删除块，文件系统都可发送这些命令。
-   您可以使用 `fstrim`{.literal}
    等实用程序以受控的方式发送命令。这些实用程序告诉文件系统检测哪些逻辑块未使用，并以
    `TRIM`{.literal} 或 `DISCARD`{.literal}
    命令的形式向存储系统发送信息。
:::