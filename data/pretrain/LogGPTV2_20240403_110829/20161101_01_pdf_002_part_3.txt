Submitting The Patch
Step 7: Submit the patch
Use context diff format: diff -c
Unified diffs are okay for SGML changes
First, review every hunk of the patch
Is this hunk necessary?
Does it needlessly change existing code or whitespace?
Does it have any errors? Does it fail in corner cases? Is there
a more elegant way to do this?
Work with a code reviewer to make any necessary changes
If your patch falls through the cracks, be persistent
The developers are busy and reviewing patches is difficult,
time-consuming, and unglamourous work
Outline
1 Prerequisites
Why Should You Hack On PostgreSQL?
What Skills Will You Need?
What Tools Should You Use?
2 The Architecture of PostgreSQL
System Architecture
Components of the Backend
3 Common Code Conventions
Memory Management
Error Handling
4 Community Processes
5 Sample Patch
6 Conclusion
TODO item: “estimated count(*)”
SELECT count(*) * 10
FROM t TABLESAMPLE SYSTEM (10);
Straightforward to implement, but requires modifying some
interesting parts of the system
http://neilconway.org/talks/hacking/ottawa/tablesample.patch
The TABLESAMPLE Clause
The TABLESAMPLE clause is defined by SQL:2003 and
implemented by SQL Server and DB2
Oracle calls it SAMPLE, slightly different syntax
Example query:
SELECT avg(salary)
FROM emp TABLESAMPLE SYSTEM (50);
Straightforward to implement, but requires modifying some
interesting parts of the system
http://neilconway.org/talks/hacking/ottawa/tablesample.patch
The TABLESAMPLE Clause
The TABLESAMPLE clause is defined by SQL:2003 and
implemented by SQL Server and DB2
Oracle calls it SAMPLE, slightly different syntax
Example query:
SELECT avg(salary)
FROM emp TABLESAMPLE SYSTEM (50);
TODO item: “estimated count(*)”
SELECT count(*) * 10
FROM t TABLESAMPLE SYSTEM (10);
The TABLESAMPLE Clause
The TABLESAMPLE clause is defined by SQL:2003 and
implemented by SQL Server and DB2
Oracle calls it SAMPLE, slightly different syntax
Example query:
SELECT avg(salary)
FROM emp TABLESAMPLE SYSTEM (50);
TODO item: “estimated count(*)”
SELECT count(*) * 10
FROM t TABLESAMPLE SYSTEM (10);
Straightforward to implement, but requires modifying some
interesting parts of the system
http://neilconway.org/talks/hacking/ottawa/tablesample.patch
What Does The Standard Say?
Deciphering the SQL standard is notoriously difficult
I usually start with the index
The BERNOULLI sample method sounds hard to implement
REPEATABLE provides a way to seed the random number
generator
Deficiencies
1 Non-uniform sampling when either
row size is non-uniform
distribution of live tuples is non-uniform
2 Consumes a lot of entropy
3 Could be optimized to reduce random I/O
Implementation Ideas
How Should We Implement Sampling?
Simple approach: sequentially walk the heap, decide whether
to skip a block using random() and the sampling percentage
Therefore, add “sample scan” as a new scan type, analogous
to sequential scan or index scan
Implementation Ideas
How Should We Implement Sampling?
Simple approach: sequentially walk the heap, decide whether
to skip a block using random() and the sampling percentage
Therefore, add “sample scan” as a new scan type, analogous
to sequential scan or index scan
Deficiencies
1 Non-uniform sampling when either
row size is non-uniform
distribution of live tuples is non-uniform
2 Consumes a lot of entropy
3 Could be optimized to reduce random I/O
2 Can we specify TABLESAMPLE for UPDATE or DELETE?
3 Can we sample from the results of an index scan?
4 How does this interact with inheritance? Joins?
Behavioral Questions
1 Can we specify TABLEAMPLE for non-base relation FROM-clause
items? (Subqueries, SRFs, ...)
3 Can we sample from the results of an index scan?
4 How does this interact with inheritance? Joins?
Behavioral Questions
1 Can we specify TABLEAMPLE for non-base relation FROM-clause
items? (Subqueries, SRFs, ...)
2 Can we specify TABLESAMPLE for UPDATE or DELETE?
4 How does this interact with inheritance? Joins?
Behavioral Questions
1 Can we specify TABLEAMPLE for non-base relation FROM-clause
items? (Subqueries, SRFs, ...)
2 Can we specify TABLESAMPLE for UPDATE or DELETE?
3 Can we sample from the results of an index scan?
Behavioral Questions
1 Can we specify TABLEAMPLE for non-base relation FROM-clause
items? (Subqueries, SRFs, ...)
2 Can we specify TABLESAMPLE for UPDATE or DELETE?
3 Can we sample from the results of an index scan?
4 How does this interact with inheritance? Joins?
3 Create a new executor node for sample-based scans of a
relation
4 Modify the planner to choose sample scans when appropriate,
and to estimate the cost of evaluating a sample scan
5 Implement the guts of the SampleScan executor node
6 Add support for REPEATABLE
7 Add support for DELETE and UPDATE
8 Update documentation
Can’t easily add regression tests
Implementation Plan
1 Modify the grammar to add support for parsing the
TABLESAMPLE clause
2 Modify the nodes of the parse tree to allow TABLESAMPLE to
be encoded in the AST
5 Implement the guts of the SampleScan executor node
6 Add support for REPEATABLE
7 Add support for DELETE and UPDATE
8 Update documentation
Can’t easily add regression tests
Implementation Plan
1 Modify the grammar to add support for parsing the
TABLESAMPLE clause
2 Modify the nodes of the parse tree to allow TABLESAMPLE to
be encoded in the AST
3 Create a new executor node for sample-based scans of a
relation
4 Modify the planner to choose sample scans when appropriate,
and to estimate the cost of evaluating a sample scan
6 Add support for REPEATABLE
7 Add support for DELETE and UPDATE
8 Update documentation
Can’t easily add regression tests
Implementation Plan
1 Modify the grammar to add support for parsing the
TABLESAMPLE clause
2 Modify the nodes of the parse tree to allow TABLESAMPLE to
be encoded in the AST
3 Create a new executor node for sample-based scans of a
relation
4 Modify the planner to choose sample scans when appropriate,
and to estimate the cost of evaluating a sample scan
5 Implement the guts of the SampleScan executor node
Implementation Plan
1 Modify the grammar to add support for parsing the
TABLESAMPLE clause
2 Modify the nodes of the parse tree to allow TABLESAMPLE to
be encoded in the AST
3 Create a new executor node for sample-based scans of a
relation
4 Modify the planner to choose sample scans when appropriate,
and to estimate the cost of evaluating a sample scan
5 Implement the guts of the SampleScan executor node
6 Add support for REPEATABLE
7 Add support for DELETE and UPDATE
8 Update documentation
Can’t easily add regression tests
Grammar Modifications
Parsing TABLESAMPLE itself is quite easy
Add some new keywords: TABLESAMPLE and REPEATABLE
must be made semi-reserved to avoid shift-reduce conflicts
Checking SelectStmt reveals that relation expr is the
production for a base relation in the FROM clause with an
optional alias and inheritance spec
Unfortunately, relation expr is also used by DDL
commands, so create a new production and use it in the
places we want to allow TABLESAMPLE
Range Table
The parse-analysis phase constructs a “range table” consisting of
the FROM clause elements
When converting the FROM clause RVs into range table entries
(RTEs), attach the TableSampleInfo
Parse Node Updates
New parse node for the data TABLESAMPLE clause
Need to attach new parse node to the AST somehow
The parser constructs a RangeVar for each FROM clause entry,
so use that
Parse Node Updates
New parse node for the data TABLESAMPLE clause
Need to attach new parse node to the AST somehow
The parser constructs a RangeVar for each FROM clause entry,
so use that
Range Table
The parse-analysis phase constructs a “range table” consisting of
the FROM clause elements
When converting the FROM clause RVs into range table entries
(RTEs), attach the TableSampleInfo
Plan: A “finalized” output path: a node of the plan tree
passed to the executor
Once the planner has decided on the optimal
Path tree, produce a corresponding Plan tree
Optimizer Terminology
RelOptInfo: Per-relation planner state. For each base rel or join,
stores the estimated row count, row width, cheapest
path, ...
Path: Planner state for a particular way accessing a relation
(or join relation); each RelOptInfo has a list of
candidate paths
Optimizer Terminology
RelOptInfo: Per-relation planner state. For each base rel or join,
stores the estimated row count, row width, cheapest
path, ...
Path: Planner state for a particular way accessing a relation
(or join relation); each RelOptInfo has a list of
candidate paths
Plan: A “finalized” output path: a node of the plan tree
passed to the executor
Once the planner has decided on the optimal
Path tree, produce a corresponding Plan tree
Optimizer Modifications
We need only modify stage 1 of the System R algorithm:
finding the cheapest interesting paths for each base relation
Joins between sample scans not fundamentally different than
normal joins
We don’t need a SamplePath node; just use Path
Only consider sample scans when a TABLESAMPLE clause is
specified
Simple cost estimation: assume we need to do a single I/O for
each sampled page
Plan Trees
Review: the planner produces a tree of Plan nodes
Plan nodes are treated as immutable by the executor
The executor constructs a tree of PlanState nodes to
describe the run-time state of a plan-in-execution
Each PlanState is associated with exactly one Plan node
PlanState.plan holds a PlanState’s associated Plan node
Optional
ReScan: Reset a PlanState so that it reproduces its output
MarkPos: Record the current position of a PlanState
RestrPos: Restore the position of a PlanState to last mark
The “Iterator” API
Implemented By Each Executor Node
Mandatory
InitNode: Given a Plan tree, construct a PlanState tree
ProcNode: Given a PlanState tree, return next result tuple
Some plan nodes support bidirectional scans
EndNode: Shutdown a PlanState tree, releasing resources
The “Iterator” API
Implemented By Each Executor Node
Mandatory
InitNode: Given a Plan tree, construct a PlanState tree
ProcNode: Given a PlanState tree, return next result tuple
Some plan nodes support bidirectional scans
EndNode: Shutdown a PlanState tree, releasing resources
Optional
ReScan: Reset a PlanState so that it reproduces its output
MarkPos: Record the current position of a PlanState
RestrPos: Restore the position of a PlanState to last mark
Executor Terminology
Block: A page on disk. Identified by a BlockNumber
Buffer: A page in memory. The buffer manager loads blocks
from disk into buffers (shared buffers)
OffsetNumber: Identifies an item within a page
Datum: An instance of a data type in memory
HeapTuple: A collection of Datums with a certain schema
EState: Run-time state for a single instance of the executor
Projection: The act of applying a target list
The Executor’s TupleTable
Tuples are passed around the executor using TupleTableSlots
Different kinds of tuples:
Pointers into buffer pages
The output of a scan node, no projection
Need to drop pin on buffer when finished with tuple
Pointers into heap-allocated memory
Result of applying an expression: projection, SRFs, ...
Can be “minimal” tuples: no MVCC metadata needed
Need to pfree() tuple when finished
“Virtual” tuples
The TupleTableSlot abstraction papers over all these details
Implementing The Executor Node
Initialization
Most of this is boilerplate code :-(
Initialize executor machinery needed to evaluate quals and do
projection
Read-lock the relation: no DDL changes allowed while we’re
scanning
Wrong: if the execution of multiple sample scans is
interleaved, they will stomp on the other’s PRNG state
Therefore, use initstate() to give each sample scan its own
private PRNG state
Implementing REPEATABLE
Simple implementation: pass the repeat seed to srandom()
Implementing REPEATABLE
Simple implementation: pass the repeat seed to srandom()
Wrong: if the execution of multiple sample scans is
interleaved, they will stomp on the other’s PRNG state
Therefore, use initstate() to give each sample scan its own
private PRNG state
TABLESAMPLE support
Quite easy: basically comes for free!
relation expr is already used by the DELETE and UPDATE
Modify to use relation expr opt sample
Hackup parse-analysis to attach TableSampleInfo
Supporting UPDATE and DELETE
Implementation of UPDATE and DELETE
Run the executor to get “result tuples”
Mark the result tuples as expired (“deleted by my
transaction”) on disk
If UPDATE, insert a new tuple
Supporting UPDATE and DELETE
Implementation of UPDATE and DELETE
Run the executor to get “result tuples”
Mark the result tuples as expired (“deleted by my
transaction”) on disk
If UPDATE, insert a new tuple
TABLESAMPLE support
Quite easy: basically comes for free!
relation expr is already used by the DELETE and UPDATE
Modify to use relation expr opt sample
Hackup parse-analysis to attach TableSampleInfo
2 Support non-integer sample percentage and repeat seed
3 Take advantage of optimizer statistics to produce a more
accurate sample
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
5 Provide information about the degree of confidence in the
sampled results
6 “Page at a time” scan mode
Possible Improvements
1 Implement the BERNOULLI sample method
3 Take advantage of optimizer statistics to produce a more
accurate sample
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
5 Provide information about the degree of confidence in the
sampled results
6 “Page at a time” scan mode
Possible Improvements
1 Implement the BERNOULLI sample method
2 Support non-integer sample percentage and repeat seed
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
5 Provide information about the degree of confidence in the
sampled results
6 “Page at a time” scan mode
Possible Improvements
1 Implement the BERNOULLI sample method
2 Support non-integer sample percentage and repeat seed
3 Take advantage of optimizer statistics to produce a more
accurate sample
5 Provide information about the degree of confidence in the
sampled results
6 “Page at a time” scan mode
Possible Improvements
1 Implement the BERNOULLI sample method
2 Support non-integer sample percentage and repeat seed
3 Take advantage of optimizer statistics to produce a more
accurate sample
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
6 “Page at a time” scan mode
Possible Improvements
1 Implement the BERNOULLI sample method
2 Support non-integer sample percentage and repeat seed
3 Take advantage of optimizer statistics to produce a more
accurate sample
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
5 Provide information about the degree of confidence in the
sampled results
Possible Improvements
1 Implement the BERNOULLI sample method
2 Support non-integer sample percentage and repeat seed
3 Take advantage of optimizer statistics to produce a more
accurate sample
4 Support mark-and-restore; allow a SampleScan to be
re-scanned when possible
5 Provide information about the degree of confidence in the
sampled results
6 “Page at a time” scan mode
Outline
1 Prerequisites
Why Should You Hack On PostgreSQL?
What Skills Will You Need?
What Tools Should You Use?
2 The Architecture of PostgreSQL
System Architecture
Components of the Backend
3 Common Code Conventions
Memory Management
Error Handling
4 Community Processes
5 Sample Patch
6 Conclusion
Next Steps
1 Sign up to the development lists
2 Setup your local development environment
3 Participate in development discussions
Read design proposals, ask questions/give feedback
Try to reproduce (and fix!) reported bugs
Look at proposed patches
Help out with administrativia, contribute to the documentation
4 Read the code!
5 Look for a small project that piques your interest, and get
started!
Q & A
Any questions?