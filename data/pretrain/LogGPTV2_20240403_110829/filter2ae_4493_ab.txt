![
](https://images.seebug.org/content/images/2018/11/d3193e17-842c-4051-9eed-9e0ce7c3b602.png-w331s)
下图为在prepare中准备的字符串：
![
](https://images.seebug.org/content/images/2018/11/e1acb337-eb3a-4e02-b9e5-74fbedc4826b.png-w331s)
##### 构造超长数组
在exp_2中，第二次触发漏洞，将fake_array对应字符串的类型改为0x200c，方法同覆盖字符串长度一致，此处不再重复描述。
![
](https://images.seebug.org/content/images/2018/11/20d41e8a-8f32-4a0d-adff-3788bcf78763.png-w331s)
fake_array是个字符串，它实际为一份伪造的tagSAFEARRAY结构。
![
](https://images.seebug.org/content/images/2018/11/f746967d-12b6-4b0e-9cbe-3791cdeb7de8.png-w331s)
以下为寻找类型混淆后的超长数组，用于后面使用：
![
](https://images.seebug.org/content/images/2018/11/9f8a3170-1346-4fe5-8cdc-438ba895ea53.png-w331s)
##### 任意地址读
随后样本借助前面获得的字符串地址和超长数组封装了一组任意地址读取的功能函数，供后面使用。
##### 构造辅助函数
具备了任意地址读取能力后，利用封装了若干辅助函数：
![
](https://images.seebug.org/content/images/2018/11/0c788e9c-99d9-4d41-9aba-0d046c92395e.png-w331s)
随后通过以下方式泄露CScriptEntryPoint对象的虚表地址
![
](https://images.seebug.org/content/images/2018/11/f1cb10c6-6076-4f0e-948c-1e92e2b5e9e4.png-w331s)
随后借助封装好的辅助函数获取vbscript.dll基地址，再通过遍历vbscript.dll导入表获取msvcrt.dll基地址,
msvcrt.dll又引入了kernelbase.dll、ntdll.dll，最后获取了NtContinue、VirtualProtect等函数地址，整个过程如下：
![
](https://images.seebug.org/content/images/2018/11/2d15db44-1349-4b91-92a3-1f2b49d7a980.png-w331s)
##### 执行shellcode
原利用代码在windows 7和windows 8环境中，执行shellcode的方式与之前CVE-2018-8174相同。在windows
8.1和windows 10环境中所用的方式与低版本系统中略有不同。
#### 动态调试
##### 内存布局
prepare函数中内存布局完成后array2、array3和array_c的pvData分别如下所示。
![
](https://images.seebug.org/content/images/2018/11/9b681830-f82f-4910-a0b0-5740cd1690da.png-w331s)
![
](https://images.seebug.org/content/images/2018/11/4117acc0-0a50-4def-b1e4-6ca064dd8088.png-w331s)
![
](https://images.seebug.org/content/images/2018/11/24a4682e-c44b-46a8-a7fc-8eb0486a31bf.png-w331s)
##### 内存重用
首先是Public Default Property Get回调中str_o字符串对str_h字符串内存的重用。重用后整体内存大小不变，字符串长度发生变化。
![
](https://images.seebug.org/content/images/2018/11/9e4c88f5-0227-4a37-b103-12a88613f8be.png-w331s)
然后是SysAllocStringLen申请0xa000大小内存时对array2中某个被释放的0xa000字符串的重用。从下图中可以看到，第一次触发漏洞前重用的内存是刚被释放的array2(0x81)。随后array2(0x82)对应字符串的长度将被覆写。
![
](https://images.seebug.org/content/images/2018/11/931cdead-3ca5-4cdf-8ebc-b343ee75a4f8.png-w331s)
##### 改写BSTR长度
在exp_1中第一次触发漏洞，改写某个str_left_1字符串的长度域。
![
](https://images.seebug.org/content/images/2018/11/10b29165-84f3-40df-93e3-1dc91f7b13ce.png-w331s)
##### 构造超长数组
在exp_2中再次进行内存重用，此时的SysAllocStringLen申请的0xa000内存重用的是array3(0x81)刚释放的内存(释放方式与array2相同)，随后array3(0x82)相关内存的首部将被改写。
![
](https://images.seebug.org/content/images/2018/11/879c421b-2280-4bf1-aef5-488339a3375b.png-w331s)
第二次触发漏洞，将精心准备的fake_array字符串的type由0008改写为200c，从而得到一个超长一维数组。
![
](https://images.seebug.org/content/images/2018/11/822a4673-deea-4add-99f6-a89137e2da65.png-w331s)
##### 执行shellcode
在windows 7和windows 8下的shellcode执行细节可参考我们之前写的CVE-2018-8174分析文章。 在window
8.1和windows 10环境中，样本用了一些其他技巧来Bypass CFG(在我们的测试中，该方式可以在早期版本的windows 8.1和windows
10中成功)。关于这部分的更多细节，我们会在后面的文章中进行披露。
### 补丁分析
以下是补丁前后Bindiff工具的比对结果。
![
](https://images.seebug.org/content/images/2018/11/795e097f-fc2d-4a41-9179-04a0c8675885.png-w331s)
可以看到，补丁文件中在拷贝每个数组元素到join_list之前，会先通过SysAllocString将字符串数据保存一份，这样即使在后面回调中更改了初始的字符串长度，在执行memcpy进行内存拷贝时也会使用SysAllocString函数拷贝的那份数据，从而使SysAllocStringLen申请的内存大小和memcpy拷贝的数据大小相同，从而修复了漏洞。
### 与APT-C-06的关联分析
我们对四个vbscript漏洞的shellcode进行了关联分析，我们发现cve-2016-0189、本次漏洞和cve-2018-8174所用的shellcode除配置的CC外基本一致，cve-2018-8373的shellcode略有不同，但也非常相似。我们推测本次漏洞也是APT-C-06(又名Darkhotel)武器库中的一个。
### 福利
读者有没有发现rtJoin函数中还存在一处整数溢出点，如下：
![
](https://images.seebug.org/content/images/2018/11/009fe51a-573b-4e08-b431-fb75200cb6b0.png-w331s)
我们查找了vbscript里面join系列函数相关的整数溢出漏洞，发现有一个漏洞是CVE-2017-11869，我们对该漏洞修复前后的vbscript.dll做了一次补丁比对，并且发现了一些有意思的修改点，如下：
![
](https://images.seebug.org/content/images/2018/11/2a287fe6-c701-48bb-96f8-3f3d1d3f8ea9.png-w331s)
有兴趣的读者可以深入研究一下CVE-2017-11869。
### 结论
本文我们分享了本年度发现的第三个vbscript的漏洞细节，其利用手法和之前几个同样精彩。我们相信vbscript里面还有其他类似问题，同时推测相关开发团伙手上还有其他类似的漏洞利用，请广大用户提高警惕。
### 参考链接
* * *