title:Droid-Sec: deep learning in android malware detection
author:Zhenlong Yuan and
Yongqiang Lu and
Zhaoguo Wang and
Yibo Xue
Droid-Sec: Deep Learning in Android Malware Detection
Zhenlong Yuan(cid:2)‡ Yongqiang Lu† Zhaoguo Wang(cid:3) and Yibo Xue‡∗
(cid:2)Department of Automation, Tsinghua University, Beijing, China
†Baidu Inc., Beijing, China
‡Research Institute of Information Technology, Tsinghua University, Beijing, China
∗Tsinghua National Lab for Information Science and Technology, Beijing, China
(cid:3)School of Computer Science and Technology, Harbin Institute of Technology, Harbin, China
PI:EMAIL, PI:EMAIL, {wangzhaoguo, yiboxue}@tsinghua.edu.cn
ABSTRACT
As smartphones and mobile devices are rapidly becoming
indispensable for many network users, mobile malware has
become a serious threat in the network security and pri-
vacy. Especially on the popular Android platform, many
malicious apps are hiding in a large number of normal apps,
which makes the malware detection more challenging.
In
this paper, we propose a ML-based method that utilizes
more than 200 features extracted from both static analy-
sis and dynamic analysis of Android app for malware de-
tection. The comparison of modeling results demonstrates
that the deep learning technique is especially suitable for
Android malware detection and can achieve a high level of
96% accuracy with real-world Android application sets.
Categories and Subject Descriptors
C.2.0 [Computer Communication Networks]: Gener-
al—Security and protection
Keywords
Android malware, deep learning, detection
1.
INTRODUCTION
A recent report from Gartner1 shows that Android tablet
sales grew 127 percent and reached the No.1 position in 2013.
Application market such as Google Play Store is playing
an important role in the popularity of Android devices and
drive the economy of Android applications. However, the
openness of the Android market also makes it a hot target
for malware attacks, which is a serious threat for network
users’ security and privacy. Consequently, there is an urgent
need to pick up the malware from normal apps.
Currently, the main defense mechanism for Android to
ﬁght against malware is a risk communication mechanism,
which will warn users about the permissions an app requires
before the user installs it. This approach is indeed ineﬀective
∗
1
Corresponding author.
http://www.gartner.com/newsroom/id/2674215
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distribut-
ed for proﬁt or commercial advantage, and that copies bear this notice and the full
citation on the ﬁrst page. Copyrights for third-party components of this work must
be honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631434.
as it presents the permissions of an app in a “stand-alone”
fashion and requires too much technical knowledge for a gen-
eral user to distinguish malware. Note that a normal app
and a malicious app may require the same permissions and
thus it is hard for users to make a right decision. In fact,
more users tend to know directly whether it is a malware or
not, without concerning too much on the risk assessment.
Deep learning [1], as a new area of machine learning re-
search, has gained increasing attentions in artiﬁcial intelli-
gence (AI) and motivated a great number of successful ap-
plications in speech and image recognition. In this paper, we
ﬁrst extract more than 200 features2 from both static anal-
ysis and dynamic analysis of each Android app, and then
apply the deep learning technique to classify the malware
from normal apps. In addition, our comparison of modeling
results demonstrates that the deep learning technique is far
more suitable than some other machine learning techniques,
includes Na¨ıve Bayes, SVM, C4.5, Logistic Regression (LR)
and Multi-layer Perceptron (MLP).
2. STATIC AND DYNAMIC ANALYSIS
In order to systematically characterize Andorid apps (i.e.
normal and malicious apps), we employ both static and dy-
namic analysis to extract 202 features from each app.
In
particular, these features will fall into three types: required
permission, sensitive API and dynamic behavior. Among
them, required permission and sensitive API are extracted
through static analysis while dynamic behavior is extract-
ed through dynamic analysis, as shown in Table 1. Note
that some other types of features can also be added in our
model to make it better for characterizing Android apps [3].
Here our main goal is to demonstrate that deep learning can
achieve a high level of accuracy with a set of key features.
In the case of static analysis, all we need is the .apk
ﬁle of an Android app. After uncompressing the apk ﬁle
with the ‘7-Zip’ tool, we mainly focus on parsing the t-
wo ﬁles ‘AndroidManifest.xml’ and ‘classes.dex’ respective-
ly. By parsing the ‘AndroidManifest.xml’ ﬁle with the tool
‘AXMLPrinter2’ and the parser ‘TinyXml’, we can know what
permissions an app indeed requires, e.g. permission ‘android
.permission.call_phone’ stands for permitting an app to
make a phone call. Actually, we totally search for 120 per-
missions in this part. Besides, by parsing ‘classes.dex’ ﬁle
with the disassembler ‘baksmali’, we can know what sensi-
tive API will be called, e.g.
function ‘ContentResolver;-
>delete’ stands for a sensitive API and might be used for
2More details can be found at http://www.droid-sec.com.
371Required Permission
ACCESS FINE LOCATION
Table 1: Features from Analysis
Static Analysis
Sensitive API
Dynamic Analysis
Dynamic Behavior
IActivityManagerStubProxy;->shutdown
ACTION DEXCLASS LOAD
ACCESS COARSE LOCATION ActivityManager;->killBackgroundProcesses
ACCESS MOCK LOCATION
ActivityManagerNative;->restartPackage
ACTION RECVNET
ACTION SERVICESTART
. . . . . .
......
......
deleting users’ messages or contacts. Totally, we search for
64 sensitive APIs in this part.
In the case of dynamic analysis, we run the .apk ﬁle of
an app in the ‘DroidBox3’. DroidBox is a kind of sandbox
that is developed based on TaintDroid [2]. After running
an app for a ﬁxed period of time, DroidBox can generate
some information log which includes the dynamic behav-
iors that happened from the app, such as ‘action_sendnet’
which stands for an action that sends data over the network.
Totally, we search for 18 dynamic behaviors in the part.
3. DEEP LEARNING MODEL
Traditional machine learning models, such as SVM etc.
that has less than three layers of computation units, are
considered to have shallow architectures. Fortunately, deep
learning with a deep architecture changed that. In reality,
deep learning model actually can be trained in various ways
with diﬀerent approaches or algorithms. In this paper, due
to the space limitation, we mainly present our framework on
building model for Android malware detection as shown in
Figure 1.
Unlabeled Application Samples Labeled Application Samples
N
B
D
d
e
n
i
a
r
T
-
e
r
P
M
B
R
n
o
i
t
a
z
i
l
a
i
t
i
n
I
y
d
e
e
r
G
e
m
e
h
c
s
M
B
R
n
o
i
t
a
z
i
l
a
i
t
i
n
I
Training
k
-
D
C
g
n
i
l
p
m
a
S
…
Generate
Iterative 
Operation
Training
Generate
k
-
D
C
g
n
i
l
p
m
a
S
g
n
i
t
a
d
p
U
s
r
e
t
e
m
a
r
a
P
g
n
i
t
a
d
p
U
s
r
e
t
e
m
a
r
a
P
Error
Error
M
B
R
t
n
e
m
s
s
e
s
s
A
M
B
R
t
n
e
m
s
s
e
s
s
A
n
o
i
t
a
g
a
p
o
r
P
k
c
a
B
g
n
i
n
u
T
-
e
n
i
F
r
o
f
Figure 1: Framework of Deep Learning Model
As a semi-supervised training algorithm, deep learning
consists of two phases, the ‘unsupervised pre-training phase’
and the ‘supervised back-propagation phase’.
In the pre-
training phase, we adopt the deep belief network (DBN) [1]
for pre-training. The DBN is hierarchically built by stacking
a number of restricted Boltzmann machines (RBM) with re-
garding the deep neural network as a latent variable model,
which is beneﬁcial for better characterizing Android apps.
In the back-propagation phase, the pre-trained neural net-
work is to be ﬁne-tuned with labeled value in a supervised
manner. After that, the whole deep learning model is built
completely. Besides, more details will be presented in Sec-
tion 4.
4. EVALUATION
To validate our deep learning model in Android malware
detection, we experiment on public application sets (mixed
3
https://code.google.com/p/droidbox
with malware apps and normal apps). The malware set (250
samples) is downloaded from the famous contagio mobile 4
and the normal app set is crawled from the top 250 apps in
Google Play Store. Note that the number of malware and
the number of normal apps are always mixed equally in the
training or test sets.
Table 2: Accuracy with Diﬀerent Constructions
Num of Layers
Num of Neurons
Accuracy
6
5
4
3
3
3
2
[150,150,150,150,150,150]
[150,150,150,150,150]
[150,150,150,150]
[170,170,170]
[150,150,150]
[130,130,130]
[150,150]
94.0%
95.0%
94.5%
93.0%
96.5%
95.0%
89.5%
Signiﬁcantly, there are two key parameters while building
the deep learning model, one is the number of layers in DBN
and the other is the number of neurons in each layer. Table 2
shows the accuracy changes with diﬀerent model construc-
tions.
In addition, we conduct a comparison between the
deep learning model and other ﬁve typical machine learn-
ing models as shown in Table 3. The ﬁve machine learning
models are all optimized for the best accuracy by using the
grid search technique.
Table 3: The Comparison of Modeling Results
Model
SVM
C4.5
Na¨ıve Bayes
LR
MLP
Deep Learning
Training Set Test Set Accuracy
300
300
300
300
300
300
200
200
200
200
200
200
80.0%
77.5%
79.0%
78.0%
79.5%
96.5%
To better mitigate mobile malware threats, we plan to
automate the deep learning based tool for online Android
malware detection in our future work, you can follow up our
ongoing project at http://www.droid-sec.com.
5. ACKNOWLEDGEMENT
This work was supported by the National Key Technology
R&D Program of China under Grant No.2012BAH46B04.
6. REFERENCES
[1] Y. Bengio. Learning deep architectures for ai. Foundations
and trends in Machine Learning, 2(1):1–127, 2009.
[2] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. Sheth. Taintdroid: An information-ﬂow
tracking system for realtime privacy monitoring on
smartphones. In OSDI’10, volume 10, pages 1–6, 2010.
[3] Y. Zhou and X. Jiang. Dissecting android malware:
characterization and evolution. In IEEE S&P’12, pages
95–109, 2012.
4
http://contagiominidump.blogspot.com
372