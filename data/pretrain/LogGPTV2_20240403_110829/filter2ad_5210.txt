# Droid-Sec: Deep Learning in Android Malware Detection

## Authors
- Zhenlong Yuan<sup>‡</sup>
- Yongqiang Lu<sup>†</sup>
- Zhaoguo Wang<sup>§</sup>
- Yibo Xue<sup>‡∗</sup>

### Affiliations
- <sup>‡</sup>Research Institute of Information Technology, Tsinghua University, Beijing, China
- <sup>†</sup>Baidu Inc., Beijing, China
- <sup>§</sup>School of Computer Science and Technology, Harbin Institute of Technology, Harbin, China
- <sup>∗</sup>Tsinghua National Lab for Information Science and Technology, Beijing, China

### Contact
- PI: EMAIL, EMAIL
- {wangzhaoguo, yiboxue}@tsinghua.edu.cn

## Abstract
As smartphones and mobile devices become indispensable for many network users, mobile malware has emerged as a significant threat to network security and privacy. Particularly on the popular Android platform, malicious apps often hide among numerous benign apps, making malware detection increasingly challenging.

In this paper, we propose a machine learning (ML)-based method that leverages over 200 features extracted from both static and dynamic analyses of Android apps for malware detection. Our results demonstrate that deep learning techniques are particularly well-suited for Android malware detection, achieving an accuracy of 96% with real-world Android application sets.

## Categories and Subject Descriptors
C.2.0 [Computer Communication Networks]: General—Security and protection

## Keywords
Android malware, deep learning, detection

## 1. Introduction
A recent report from Gartner shows that Android tablet sales grew by 127% and reached the top position in 2013. The Google Play Store plays a crucial role in the popularity of Android devices and drives the Android app economy. However, the openness of the Android market also makes it a prime target for malware attacks, posing a serious threat to network users' security and privacy. Therefore, there is an urgent need to identify and isolate malware from normal apps.

Currently, the primary defense mechanism for Android against malware is a risk communication system that warns users about the permissions an app requires before installation. This approach is ineffective because it presents permissions in isolation and requires technical knowledge that most users lack. A normal app and a malicious app may require the same permissions, making it difficult for users to distinguish between them. Users generally prefer a direct indication of whether an app is malware, without needing to assess the risks.

Deep learning, a new area of machine learning research, has gained significant attention in artificial intelligence (AI) and has been successfully applied in speech and image recognition. In this paper, we first extract over 200 features from both static and dynamic analyses of each Android app, and then apply deep learning techniques to classify malware. Our comparison of modeling results demonstrates that deep learning outperforms other machine learning techniques such as Naïve Bayes, SVM, C4.5, Logistic Regression (LR), and Multi-layer Perceptron (MLP).

## 2. Static and Dynamic Analysis
To systematically characterize Android apps (both normal and malicious), we employ both static and dynamic analysis to extract 202 features from each app. These features fall into three categories: required permissions, sensitive APIs, and dynamic behaviors. Required permissions and sensitive APIs are extracted through static analysis, while dynamic behaviors are extracted through dynamic analysis, as shown in Table 1.

### Table 1: Features from Analysis
| Static Analysis | Sensitive API | Dynamic Analysis | Dynamic Behavior |
|-----------------|---------------|------------------|-------------------|
| ACCESS FINE LOCATION | ContentResolver;->delete | ACTION DEXCLASS LOAD | IActivityManagerStubProxy;->shutdown |
| ACCESS COARSE LOCATION | ActivityManager;->killBackgroundProcesses | ACCESS MOCK LOCATION | ActivityManagerNative;->restartPackage |
| ... | ... | ... | ... |

For static analysis, we use the .apk file of an Android app. After uncompressing the .apk file with the '7-Zip' tool, we parse the 'AndroidManifest.xml' and 'classes.dex' files. Parsing 'AndroidManifest.xml' with 'AXMLPrinter2' and 'TinyXml' reveals the permissions an app requires, such as 'android.permission.call_phone'. We search for 120 permissions in this part. Parsing 'classes.dex' with the disassembler 'baksmali' identifies sensitive APIs, such as 'ContentResolver;->delete', which might be used for deleting users' messages or contacts. We search for 64 sensitive APIs in this part.

For dynamic analysis, we run the .apk file in 'DroidBox', a sandbox developed based on TaintDroid. After running an app for a fixed period, DroidBox generates a log containing dynamic behaviors, such as 'action_sendnet', which indicates data being sent over the network. We search for 18 dynamic behaviors in this part.

## 3. Deep Learning Model
Traditional machine learning models, such as SVM, have shallow architectures with fewer than three layers of computation units. Deep learning, with its deep architecture, changes this. In this paper, we present our framework for building a deep learning model for Android malware detection, as shown in Figure 1.

### Figure 1: Framework of Deep Learning Model
[Insert Figure 1 here]

Our deep learning model consists of two phases: the 'unsupervised pre-training phase' and the 'supervised back-propagation phase'. In the pre-training phase, we use a deep belief network (DBN) for pre-training. The DBN is built hierarchically by stacking restricted Boltzmann machines (RBM), which is beneficial for better characterizing Android apps. In the back-propagation phase, the pre-trained neural network is fine-tuned with labeled data in a supervised manner. More details are provided in Section 4.

## 4. Evaluation
To validate our deep learning model for Android malware detection, we conducted experiments on public application sets, including both malware and normal apps. The malware set (250 samples) was downloaded from Contagio Mobile, and the normal app set was crawled from the top 250 apps in the Google Play Store. The number of malware and normal apps was kept equal in the training and test sets.

### Table 2: Accuracy with Different Constructions
| Number of Layers | Number of Neurons | Accuracy |
|------------------|-------------------|----------|
| 6                | [150,150,150,150,150,150] | 94.0% |
| 5                | [150,150,150,150,150] | 95.0% |
| 4                | [150,150,150,150] | 94.5% |
| 3                | [170,170,170] | 93.0% |
| 3                | [150,150,150] | 96.5% |
| 3                | [130,130,130] | 95.0% |
| 2                | [150,150] | 89.5% |

Two key parameters in building the deep learning model are the number of layers in the DBN and the number of neurons in each layer. Table 2 shows the accuracy changes with different model constructions.

We also compared our deep learning model with five other typical machine learning models, all optimized using grid search for the best accuracy, as shown in Table 3.

### Table 3: The Comparison of Modeling Results
| Model | Training Set | Test Set | Accuracy |
|-------|--------------|----------|----------|
| SVM   | 300          | 200      | 80.0%    |
| C4.5  | 300          | 200      | 77.5%    |
| Naïve Bayes | 300 | 200 | 79.0% |
| LR    | 300          | 200      | 78.0%    |
| MLP   | 300          | 200      | 79.5%    |
| Deep Learning | 300 | 200 | 96.5% |

To better mitigate mobile malware threats, we plan to automate the deep learning-based tool for online Android malware detection in future work. You can follow our ongoing project at http://www.droid-sec.com.

## 5. Acknowledgement
This work was supported by the National Key Technology R&D Program of China under Grant No. 2012BAH46B04.

## 6. References
1. Bengio, Y. (2009). Learning deep architectures for AI. Foundations and Trends in Machine Learning, 2(1), 1–127.
2. Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., & Sheth, A. (2010). Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In OSDI’10, volume 10, pages 1–6.
3. Zhou, Y., & Jiang, X. (2012). Dissecting Android malware: Characterization and evolution. In IEEE S&P’12, pages 95–109.