satisfying
Proof. Address a is refreshed to main area whenever the current
time i′ is in the range [s, e) in the for loop; namely, when
mod M ≤ a <
mod M.
Because this is an inequality modulo M on both sides, there exists
some i′ ∈ {i, i + 1, . . . , i + M − 1} which satisfies it.
■
The consequence of this lemma is that, for any time i, the data
which is placed in the holding area at address N + (i mod M) will
be refreshed to the main area before time i + M, which is the next
time holding address N +(i mod M) will be overwritten. Therefore
no data is overwritten before it is refreshed to the main area, and
no stash is needed.
(cid:22) i′N
(cid:23)
M
i ≤ i
′
(cid:23)
< i + M.
(cid:22)(i′ + 1)N
(cid:23)
(cid:22) Ma
M
mod M.
N
This happens as soon as
′ mod M ≥
i
3.3 Incorporating the Position Map
In this section, we consider methods for implementing a position
map for DetWoORAM, and crucially, modifying the procedure so
that only a single position map update per write is needed.
We first describe how to modify our algorithm so that we can
store the position map recursively within successively smaller Det-
WoORAMs, and then show how to further improve by using a Trie-
based write-only oblivious data structure (WoODS) stored within an
adjacent DetWoORAM to the main, data-storing one.
Recursively stored position map. One possibility for storing the
position map is to pack as many positions as possible into a single
block, and then store an adjacent, smaller WoORAM containing
these position map blocks only. Then that WoORAM’s position
map is stored in a smaller one, and so on, until the size is a constant
and can be stored in memory or refreshed on each write. If at least
two positions can be packed into each block, the number of levels
in such a recursive position map is O(logB N).
If we consider each of the recursive WoORAMs using the same
write procedure as described in Algorithm 2, a problem quickly
emerges. A write requires multiple updates to the position map due
to the de-amortized procedure: one update to store the location
within the holding area of the newly written data, and some number
of updates to store the refreshed main areas. In a recursive setting,
as these position map updates must occur for every recursive level
of the position map, we can get exponential blow up. One write to
the main WoORAM requires O((1 + M/N)R) writes at the smallest
WoORAM, where R ∈ O(logB N) is the number of recursive levels.
In HiVE-WoORAM, this issue is solved using additional state
information of “metadata blocks”, each containing the actual index
of the block as well as the IV used to encrypt that block. These
metadata blocks are stored alongside the primary physical blocks
for the WoORAM. Crucially, by storing the actual index associated
with each block in memory, it is no longer necessary to update the
position map multiple times for each write. While something similar
would work for our system, we solve this problem more efficiently,
avoiding the need for separate storage of metadata blocks entirely.
The difference here is not asymptotic, but helps in practice by
essentially eliminating an extra metadata block read/write on ev-
ery step. It also allows us to take better advantage of the uniform
block setting, where even reading or writing a few bytes in a block
requires transferring O(B) bytes of data. This technique is crucial
to our obtaining optimal 2B physical writes per logical write, as we
show in the next section.
Position map pointers and one-bit diff technique. To improve
the position map and remove exponential blow-up in updating the
position map, we recognize that we have a distinct advantage in
DetWoORAM construction as compared to prior schemes in that for
main area blocks, data is always located at its address. The holding
area is the only portion of the WoORAM that needs a position map.
The position map does not need to be updated for a refresh if we could
determine the freshest block during a read.
To see this, consider a position map that simply stores a holding-
area address. When we perform a read of address a, we need to look
in two locations, both in the holding area at where the position
Algorithm 3 DetWoORAM Operations with a Pointer Based Posi-
tion Map: main area size N , holding area size M, data array D, and
counter i
//Read and return data for address a
function read(a)
(ah, o, q) := getpos(a)
Bm = dec(D[a])
if Bm[o] = q then return Bm
else return dec(D[ah])
end if
end function
//Perform the i-th write of data d to address a
function write(a, d)
ah := N + (i mod M) //Holding address
D[ah] := enc(d) //Write to holding area
(o, q) := diff(d, dec(D[a])) //Offset o and bit diff q
setpos(a, (ah, o, q)) //Update Position Map
//Refresh N/M main area blocks per-write
s := ⌊i · N/M⌋ mod N
e := ⌊(i + 1) · N/M⌋ mod N
for am ∈ [s, e) do
D[am] := enc(read(am))
//No position map update needed
end for
i := i + 1 //increment counter
end function
map says a is and in the main area at a. Given these two blocks,
which is freshest data associated with a?
We can perform a freshness check between two blocks using
the one-bit diff technique. Specifically, the position map gives a
mapping of logical address a ∈ [0, N) to a tuple (ah, o, q), where
ah ∈ [0, M) is an address to the holding area, o ∈ [0, B) is a bit offset
within a block, and q ∈ {0, 1} is the bit value of the freshest block at
the offset o. We define the tuple (ah, o, q) as a position map pointer.
Whenever a write occurs for logical address a to holding area
ah, the offset o is chosen so as to invalidate the old data at address
a in the main area. Specifically, we ensure that the oth bit of the
new, fresh data dec(D[ah]) is different from the oth bit of the old,
stale data dec(D[a]). (If there is no difference between these, then
the old data is not really stale and the offset o can take any valid
index, say 0.)
Given the pointer(ah, o, q), a freshness check between two blocks
dec(D[a]) and dec(D[ah]) is performed as follows:
Check if the oth bit of dec(D[a]) is q. If so, dec(D[a]) is fresh;
otherwise dec(D[ah]) is fresh.
The key observation is that when a block is refreshed to the main
area, there is no need to update the position map with a new pointer,
since the read operation always starts by checking if the block in
the main area is fresh. If the main area block is fresh, then there
is no need to even look up the holding area position (which may
have been rewritten with some newer block for a different logical
address). See Algorithm 3 for details of how this is accomplished.
Figure 3: DetWoORAM Diagram with Trie Position Map
Trie WoODS for Position Map. A more efficient solution for
storing the position map, as compared to the recursively stored
position map, is to use an oblivious data structure (ODS) in the
form of a Trie. Recall that Trie edges are labeled, and looking up a
node with a keyword w1w2 · · · wℓ is performed by starting with a
root node and following the edge labeled with w1, and then with
w2, and all the way through the edge labeled with wℓ one by one,
finally reaching the target node.
As with previous tree-based ODS schemes [24, 33], our ODS
scheme avoids recursive position map lookups by employing a
pointer-based technique. That is, the pointer to a child node in a
Trie node directly points to a physical location instead of a logical
location, and therefore it is no longer necessary to translate a logical
address to a physical address within the Trie itself.
Applying an ODS in a write-only setting (a WoODS or write-
only oblivious data structure) is similar to an idea proposed by
Chakraborti et. al [5]. A major difference in our construction is that
we do not store the data structure within the primary WoORAM. We
also allow changing the branching factor of the Trie independently
of the block size, so we can tune the secondary WoORAM and
flexibly control the number of physical block writes for every logical
write, including position map information stored within the Trie.
As the WoODS Trie is stored in an adjacent DetWoORAM con-
struction, we differentiate between the two WoORAMs by referring
to the data WoORAM as the WoORAM storing data blocks and the
position WoORAM as the WoORAM storing the nodes of the Trie.
The Trie itself acts as the position map, and will map addresses in
the data WoORAMs main area to position map pointers referencing
the data WoORAMs holding area. The main idea is that given an
address a, one can walk the Trie to find a leaf node storing a’s posi-
tion map pointer. The position WoORAM will be strictly smaller
than the data WoORAM, but will be implemented using the same
DetWoORAM framework (i.e., using the notions of main area, the
holding area, and the counter).
Details of the procedure for the position WoORAM is outlined in
Algorithm 4. Observe that the functions for the position WoORAM
call the READ and WRITE functions from Algorithm 3, but with
modified versions of the subroutines for accessing and updating
the position map, as the Trie is its own position map.
As noted, the Trie is stored in an adjacent WoORAM that has a
main area and a holding area. The key difference is that the Trie
nodes are addressed with the position WoORAM’s main area using
heap indexing. For example, with a branching factor of b = 4, the
root node of the Trie has address 0, its children are at address 1, 2,
Algorithm 4 Trie WoODS with Np nodes and branching factor b.
read and write calls are the routines in Algorithm 3 (with modified
subroutines as specified) applied to position WoORAM instantiated
with Np main blocks and Mp holding blocks.
//a ∈ [0, Np + N) is a position WoORAM or data WoORAM address
function path-indices(a)
if a = 0 then return [] //Base case: empty path to root node
else return [path-indices(⌊(a − 1)/b⌋), (a − 1) mod b]
end if
end function
//Retrieve Trie nodes along a path
function path-nodes(a0, a1, . . . , aℓ−1)
B0 := root node //Root node is kept in local state
a := 0
for i = 0, . . . , ℓ − 1 do
ptr := Bi[ai] //The pointer to the ai th child, i.e., ptr = (ap, o, q)
a := (ai + 1) + b · a
Bi +1 := read(a) in Alg. 3 with its subroutine changed as:
▷ getpos(a) returns ptr
end for
return (B0, . . . , Bℓ)
end function
//a is an address; src is either DATA or TRIE
function getpos-trie(a, src)
if src = DATA then a0, a1, . . . , aℓ := path-indices(Np + a)
else a0, a1, . . . , aℓ := path-indices(a)
end if
(B0, . . . , Bℓ) := path-nodes(a0, a1, · · · aℓ−1)
return Bℓ[aℓ]
end function
//a is a data WoORAM index; ptr is a pointer
function setpos(a, ptr)
a0, a1, . . . , aℓ := path-indices(Np + a)
(B0, . . . , Bℓ) := path-nodes(a0, a1 · · · aℓ−1)
Bℓ[aℓ] := ptr //Change the leaf first
for j = ℓ, . . . , 1 do //from leaf to root
WoORAM’s holding area. The root node of the Trie can be stored
as part of the local state, since it is constantly rewritten and read
on every operation. A visual of the Trie is provided in Figure 3.
Reading from the Trie to retrieve a position map pointer for the
data WoORAM is a straightforward process. One only needs to
traverse from the root node to a leaf, following a path dictated by
the address a called via getpos-trie(a, DATA). On each step down
the tree, the current Trie node stores the position map pointer of
the child node; the corresponding sequence of nodes are retrieved
via the path-nodes helper function. The position map pointers for
the data WoORAM can be found at the correct index in the leaf
node along the fetched path.
Updating a pointer in the Trie (by calling setpos(a, ptr)) is a
bit more involved. An update of the position map for the data
WoORAM requires updating a leaf node in the Trie within the
position WoORAM. Writing that leaf node will change its pointer,
which requires updating the parent node, whose pointer will then
also change, and so on up to the root of the Trie. That is, each write
to the main WoORAM requires rewriting an entire path of Trie nodes
within the position WoORAM.
Recall that in DetWoORAM, each write operation not only writes
one block to the holding area, but also performs some refreshes in
the main area. The challenge is, for each refresh, determining where
in the holding area fresher data might be. For the data WoORAM,
this is achieved simply by performing a lookup in the position map.
But for the position WoORAM, there is no position map! Instead, we
use the Trie itself to look up the pointer for fresher data in a position
WoORAM refresh operation, by calling getpos-trie(a, TRIE). This
is possible again because of the heap indexing; from the index of the
Trie node that is being refreshed, we can determine all the indices
of the nodes along the path to that one, and then perform lookups
for the nodes in that path to find the position WoORAM holding
area location of the node being refreshed.
Trie WoODS parameters and analysis. We start by calculating
Np, which is the number of Trie nodes as well as the size of the
position WoORAM main area. This needs to be large enough so
that there is room for N pointers in the leaf nodes, where N is the
number of logical addresses in the data WoORAM. With branching
factor b, the number of Trie nodes is given by
b−1).
(cid:22) N − 2
∈ O( N
Np =
(3.1)
(cid:23)
b − 1
Call write(aj−1, Bj ) in Alg. 3 with its subroutines changed as:
▷ setpos(aj−1, ptr′) assigns ptr′ to Bj−1[aj−1]
▷ getpos(a) returns getpos-trie(a, TRIE)
if ℓ (cid:44)(cid:6)logb(Np)(cid:7) then write a dummy Trie node end if
end for
Root node := B0
end function
3, and 4, and their children are at addresses (5, 6, 7, 8), (9, 10, 11,
12), and so on. By using heap indexing, the structure of the Trie
reveals the position of its nodes, becoming its own position map.
In particular, this indexing avoids the need to store edge labels
explicitly; they can instead be stored implicitly according to the
heap indexing formulas.
It is still possible for a node of the Trie to have been recently
updated and thus the freshest node information to be resident in
the holding area of the position WoORAM. As such, each internal
node of the Trie stores b position map pointers to the position
WoORAM’s holding area, one for each of its child nodes. A leaf
node in the Trie then stores b position map pointers to the data
(cid:109)
(cid:108) N−b
To derive (3.1) above, consider that each Trie node holds b point-
ers, either to children in the Trie or to addresses in the data Wo-
ORAM. We do not count the root node in Np because it changes
on each write in is stored in the O(1) client local memory. The
total number of pointers or addresses stored is therefore Np + N .
This leads to the inequality (Np + 1)b ≥ Np + N , which implies
. The form of (3.1) is a simple rewriting of this floor
Np =