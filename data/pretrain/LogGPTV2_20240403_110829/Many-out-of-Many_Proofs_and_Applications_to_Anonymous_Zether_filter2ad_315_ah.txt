Applied Cryptography and Network Security (R. H. Deng, V. Gauthier-
Uma˜na, M. Ochoa, and M. Yung, eds.), pp. 67–88, Springer International
Publishing, 2019.
[12] B. B¨unz, J. Bootle, D. Boneh, A. Poelstra, P. Wuille, and G. Maxwell,
“Bulletproofs: Short proofs for conﬁdential transactions and more,” in
2018 IEEE Symposium on Security and Privacy, pp. 315–334, 2018.
Full version.
[13] H. Nussbaumer, Fast Fourier Transform and Convolution Algorithms.
Springer-Verlag, 1982.
[14] P. Cohn, Algebra, vol. 1. John Wiley & Sons, 1974.
[15] M. F. Esgin, R. K. Zhao, R. Steinfeld, J. K. Liu, and D. Liu, “Matrict:
Efﬁcient, scalable and post-quantum blockchain conﬁdential transactions
protocol,” in Proceedings of the 2019 ACM SIGSAC Conference on
Computer and Communications Security, CCS ’19, (New York, NY,
USA), pp. 567–584, Association for Computing Machinery, 2019.
[16] J. Jeong and W. J. Williams, “A fast recursive bit-reversal algorithm,” in
International Conference on Acoustics, Speech, and Signal Processing,
vol. 3, pp. 1511–1514, 1990.
[17] R. Tolimieri, M. An, and C. Lu, Algorithms for Discrete Fourier
Transform and Convolution. Springer New York, second ed., 1997.
[18] A. Bender, J. Katz, and R. Morselli, “Ring signatures: Stronger deﬁni-
tions, and constructions without random oracles.,” Journal of Cryptol-
ogy, vol. 22, pp. 114–138, 2009.
[19] J. Katz and Y. Lindell, Introduction to Modern Cryptography. CRC
Press, second ed., 2015.
[20] K. Kurosawa, “Multi-recipient public-key encryption with shortened
ciphertext,” in Public Key Cryptography (D. Naccache and P. Paillier,
eds.), vol. 2274 of Lecture Notes in Computer Science, pp. 48–63, 2002.
[21] M. Bellare, A. Boldyreva, and J. Staddon, “Randomness re-use in multi-
recipient encryption schemes,” in Proceedings of the 6th International
Workshop on Theory and Practice in Public Key Cryptography, pp. 85–
99, 2003. Full version.
[22] I. Miers, C. Garman, M. Green, and A. D. Rubin, “Zerocoin: Anonymous
distributed E-cash from Bitcoin,” in 2013 IEEE Symposium on Security
and Privacy, pp. 397–411, 2013.
[23] A. Jivanyan, “Lelantus: Towards conﬁdentiality and anonymity of
from standard assumptions.” Unpublished
blockchain transactions
whitepaper, June 2019.
[24] J. Bootle, A. Cerulli, P. Chaidos, J. Groth, and C. Petit, “Efﬁcient zero-
knowledge arguments for arithmetic circuits in the discrete log setting,”
in Advances in Cryptology – EUROCRYPT 2016 (M. Fischlin and J.-S.
Coron, eds.), vol. 9666 of Lecture Notes in Computer Science, pp. 327–
357, Springer Berlin Heidelberg, 2016.
[25] J. von zur Gathen and J. Gerhard, Modern Computer Algebra. Cam-
bridge University Press, third ed., 2013.
APPENDIX A
SECURITY DEFINITIONS
We recall a number of miscellaneous security deﬁnitions,
generally following the style of Katz and Lindell [19].
A. Groups
We let G denote a group-generation algorithm, which on
input 1λ outputs a cyclic group G, its prime order q (with
bit-length λ) and a generator g ∈ G. Moreover:
Deﬁnition A.1 (Katz–Lindell [19, Def. 8.62]). The discrete-
logarithm experiment DLogA,G(λ) is deﬁned as:
1) Run G(1λ) to obtain (G, q, g).
2) Choose a uniform h ∈ G.
3) A is given G, q, g, h, and outputs x ∈ Fq.
4) The output of the experiment is deﬁned to be 1 if gx = h,
and 0 otherwise.
We say that the discrete-logarithm problem is hard relative to
G if, for each probabilistic polynomial-time algorithm A, there
exists a negligible function negl for which Pr[DLogA,G(λ) =
1] ≤ negl(λ).
We also have the decisional Difﬁe–Hellman assumption,
which we adapt from [19, Def. 8.63]:
Deﬁnition A.2. The DDH experiment DDHA,G(λ) is deﬁned
as:
1) Run G(1λ) to obtain (G, q, g).
2) Choose uniform x, y, z ∈ Fp and a uniform bit b ∈ {0, 1}.
3) Give (G, q, g, gx, gy) to A, as well as gz if b = 0 and
gxy if b = 1. A outputs a bit b(cid:48).
only if b(cid:48) = b.
4) The output of the experiment is deﬁned to be 1 if and
We say that the DDH problem is hard relative to G if, for
each probabilistic polynomial-time algorithm A, there exists
a negligible function negl for which Pr[DDHA,G(λ) = 1] ≤
2 + negl(λ).
B. Commitment schemes
1
A commitment scheme is a pair of probabilistic algo-
rithms (Gen, Com); given public parameters params ←
Gen(1λ) and a message m, we have a commitment com :=
Com(params, m; r), as well as a decommitment procedure
(effected by sending m and r).
Deﬁnition A.3 (Katz–Lindell [19, Def. 5.13]). The commit-
ment binding experiment BindingA,Com(λ) is deﬁned as:
1) Parameters params ← Gen(1λ) are generated.
2) A is given params and outputs (m0, r0) and (m1, r1).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1814
3) The output of the experiment
is deﬁned to be 1 if
and only if m0 (cid:54)= m1 and Com(params, m0; r0) =
Com(params, m1; r1).
We say that Com is computationally binding if, for each PPT
adversary A, there exists a negligible function negl for which
Pr[BindingA,Com(λ) = 1] ≤ negl(λ). If negl = 0, w say that
Com is perfectly binding.
Deﬁnition A.4 (Katz–Lindell [19, Def. 5.13]). The commit-
ment hiding experiment HidingA,com(λ) is deﬁned as:
1) Parameters params ← Gen(1λ) are generated.
2) The adversary A is given input params, and outputs
3) A uniform bit b ∈ {0, 1} is chosen. The commitment
com := Com(params, mb; r) is computed (i.e., for ran-
dom r) and is given to A.
4) The adversary A outputs a bit b(cid:48). The output of the
experiment is 1 if and only if b(cid:48) = b.
messages m0 and m1.
We say that Com is computationally hiding if, for each PPT
adversary A, there exists a negligible function negl for which
Pr[HidingA,Com(λ) = 1] ≤ 1
2 + negl(λ). If negl = 0, we say
that Com is perfectly hiding.
A commitment scheme is homomorphic if, for each params,
its message, randomness, and commitment spaces are abelian
groups, and the corresponding commitment function is a
group homomorphism. We assume in what follows that all
commitment schemes are homomorphic. We also assume that
each commitment scheme has randomness space given by
Fq, for a λ-bit prime q, as well a q-torsion group for its
commitment space.
C. Zero-knowledge proofs
We present deﬁnitions for zero-knowledge arguments of
knowledge, closely following [9] and [24]. We formulate
our deﬁnitions in the “experiment-based” style of Katz and
Lindell.
We posit a triple of interactive, probabilistic polynomial
time algorithms Π = (Setup,P,V). Given some polynomial-
time-decidable ternary relation R ⊂ ({0, 1}∗)3, each common
reference string σ ← Setup(1λ) yields an NP language
Lσ = {x | ∃w : (σ, x, w) ∈ R}. We denote by tr ←
(cid:104)P(σ, x, w),V(σ, x)(cid:105) the (random) transcript of an interaction
between P and V on auxiliary inputs (σ, x) and (σ, x, w)
(respectively). Abusing notation, we occasionally write b ←
(cid:104)P(σ, x, w),V(σ, x)(cid:105) to indicate the single validity bit of a
random transcript.
We now have:
A.5.
The
completeness
Deﬁnition
CompleteA,Π,R(λ) is deﬁned as:
1) A common reference string σ ← Setup(1λ) is generated.
2) A is given σ and outputs (x, w) for which (σ, x, w) ∈ R.
3) An interaction b ← (cid:104)P(σ, x, w),V(σ, x)(cid:105) is carried out.
4) The output of the experiment is deﬁned to be 1 if and
experiment
We say that Π = (Setup,P,V) is perfectly complete if for
each PPT adversary A, Pr[CompleteA,Π,R(λ)] = 1.
Fixing a 2µ + 1-move, public-coin interactive protocol Π =
(Setup,P,V), we have:
Deﬁnition A.6. The (n1, . . . , nµ)-special soundness experi-
ment Sound(n1,...,nµ)
1) A common reference string σ ← Setup(1λ) is generated.
2) A is given σ and outputs x, as well as an (n1, . . . , nµ)-
tree (say tree) of accepting transcripts whose challenges
are distinct.
A,X ,Π,R (λ) is deﬁned as:
only if (σ, x, w) (cid:54)∈ R.
3) X is given σ, x, and tree and outputs w.
4) The output of the experiment is designed to be 1 if and
We say that Π = (Setup,P,V)
is computationally
(n1, . . . , nµ)-special sound if there exists a PPT extractor
X for which, for each PPT adversary A,
there exists a
negligible function negl for which Pr[Sound(n1,...,nµ)
A,X ,Π,R (λ) =
1] ≤ negl(λ). If negl = 0, we say that Π is perfectly
(n1, . . . , nµ)-special sound.
Deﬁnition A.7. The special honest veriﬁer zero knowledge
experiment SHVZKA,S,Π,R(λ) is deﬁned as:
1) A common reference string σ ← Setup(1λ) is generated.
2) A is given σ and outputs (x, w) for which (σ, x, w) ∈ R,
as well as randomness ρ.
3) A uniform bit b ∈ {0, 1} is chosen.
• If b = 0, tr ← (cid:104)P(σ, x, w),V(σ, x)(cid:105) is assigned.
• If b = 1, tr ← S(σ, x) is assigned.
4) The adversary A is given tr and outputs a bit b(cid:48).
5) The output of the experiment is deﬁned to be 1 if and
We say that Π = (Setup,P,V) is computationally special
honest veriﬁer zero knowledge if there exists a PPT simulator
S for which, for each PPT adversary A,
there exists a
negligible function negl for which Pr[SHVZKA,S,Π,R(λ) =
1] ≤ 1
2 + negl(λ). If negl = 0, we say that Π is perfect special
honest veriﬁer zero knowledge.
only if b(cid:48) = b.
In all of our protocols, Setup(1λ) runs the group-generation
procedure G(1λ) and the commitment scheme setup Gen(1λ),
and then stores σ ← Setup(1λ) = (G, q, g, params).
MANY-OUT-OF-MANY PROOFS: SECURITY PROOFS
APPENDIX B
This appendix contains sketches of security proofs deferred
in Section III. Rigorous proofs are given in the full version of
this paper.
A. Security Proofs
Proof sketch of Theorem III.10. Our extractor X , given an
(s, m + 1)-tree of accepting transcripts, performs a one-out-
of-many extraction as in [10, §B.1] and [9, Thm. 3], for each
v, so as to obtain (for each v) an expression
o−1(cid:89)
(cid:0)cκj (l)
(cid:1)ξj = Com (0; zv) ,
only if b = 1.
j=0
1815
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
for some quantity zv depending on v. By deﬁnition of
[ξ0, . . . , ξo−1], X in turn obtains expressions:
(cid:2) 1
vs−1 (cid:3) ·(cid:2) Ξ (cid:3) ·
v
. . .
Inverting an s × s Vandermonde matrix in the challenges v,
X ﬁnally obtains combinations r0, . . . , rs−1 of the values zv
for which:
 =
cl
cκ(l)
...
cκo−1(l)
 = Com (0; zv) .
 .
Com (0; r0)
Com(0; r1)
...
(cid:2) Ξ (cid:3) ·
cl
cκ(l)
...
cκo−1(l)
Com(0; rs−1)
Proof sketch of Theorem III.11. Our PPT simulator S simu-
lates B ← Com(0, . . . , 0), and runs the simulator of [10, §B.1]
to obtain A, C, D, zA, zC, f0, . . . , fm−1. S randomly selects
z ←$ Fq, and for k ∈ {1, . . . , m−1} assigns to Gk ← Com(0)
a random commitment to 0. Finally, S sets
(cid:32)N−1(cid:89)
o−1(cid:89)
(cid:33)ξj
· m−1(cid:89)
G0 :=
pκ−j (i)
i
c
G−xk
k
· Com(0;−z).
5) A
(R∗, m∗, π∗),
and
outputs
succeeds
if
VrfyR∗ (m∗, π∗) = 1, A never queried ((cid:63), m∗, R∗),
and R∗ ⊂ S \ C, where C is the set of corrupted users.
We say that Π = (Setup, Gen, Sign, Verify) is unforgeable with
respect to insider corruption if, for each PPT adversary A and
polynomial N (·), there exists a negligible function negl for
which Pr[UnforgeICN (·)A,Π (λ) = 1] ≤ negl(λ).
Deﬁnition C.2 (Bender–Katz–Morselli [18, Def. 3]). The
anonymity with respect to adversarially chosen keys experi-
ment AnonACKN (·)A,Π (λ) is deﬁned as:
1) Parameters σ ← Setup(1λ) are generated and given to
2) Keypairs (yi, ski)N (λ)−1
A.
and the list of public keys S := (yi)N (λ)−1
A.
are generated using Gen(1λ),
is given to
3) A is given access to a signing oracle Osign(·,·,·) such
that Osign(i, m, R) returns Signski(m, R), where we re-
quire yi ∈ R.
4) A outputs a message m, distinct indices i0 and i1, and a
ring R for which yi0 , yi1 ∈ R.
5) A random bit b is chosen, and A is given the signature
π ← Signskib
only if b(cid:48) = b.
6) The output of the experiment is deﬁned to be 1 if and
(m, R). The adversary outputs a bit b(cid:48).
i=0
i=0
j=0
i=0
k=1
Transcripts generated in this way differ from honest tran-
scripts only in that the commitments B and C, as well as
G1, . . . , Gm−1, are simulated. The proof follows via a direct
reduction SHVZK of [10, §B.1], as well as to the hiding
property of Com.
We say that Π = (Setup, Gen, Sign, Verify) is anonymous with
respect to adversarially chosen keys if for each PPT adversary
A and polynomial N (·), there exists a negligible function negl
for which Pr[AnonACKN (·)A,Π (λ) = 1] ≤ 1
2 + negl(λ).
B. Security Proofs
RING SIGNATURES: DEFINITIONS AND PROOFS
APPENDIX C
We now sketch proofs of the results of Section IV. Thorough