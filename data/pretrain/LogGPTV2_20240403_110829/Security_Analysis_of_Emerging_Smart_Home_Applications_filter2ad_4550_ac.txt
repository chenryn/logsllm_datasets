related events and device-speciﬁc events.
Event Leakage via Capability-based Access. As noted
above, once a user approves a SmartApp’s request to ac-
cess a SmartDevice for any supported capability, the Smart-
Things framework permits the SmartApp to subscribe to
all the SmartDevice’s events. We found that SmartDevices
extensively use events to communicate sensitive data. For
instance, we found that the SmartThings-provided ZWave lock
SmartDevice transmits codeReport events that include lock
pin-codes. Any SmartApp with any form of access to the
ZWave lock SmartDevice (say, for monitoring the device’s
battery status) also automatically gets an ability to monitor
all its events, and could use that access to log the events
to a remote server and steal lock pin-codes. The SmartApp
can also track lock codes as they are used to enter and exit
the premises, therefore tracking the movement of household
members, possibly causing privacy violations.
Event Leakage via SmartDevice Identiﬁer. As discussed
above, each SmartDevice in a user’s home is assigned
a random 128-bit
is
not hidden from SmartApps. Once a SmartApp is autho-
rized to communicate with a SmartDevice,
it can read
the device.id value to retrieve the 128-bit SmartDe-
vice identiﬁer. A SmartApp normally registers for events
using the call: subscribe(deviceObj, attrString,
handler). In this call, deviceObj is a reference to a de-
vice that the SmartThings Groovy compiler injects when an
input statement executes, attrString speciﬁes the attribute or
property whose change is being subscribed to, and handler
is a method that is invoked when the attribute change event
identiﬁer. This identiﬁer, however,
it can substitute deviceObj
occurs. We found that if a SmartApp learns a SmartDevice’s
device identiﬁer,
in the above
call with the device identiﬁer to register for events related
to that SmartDevice even if it is not authorized to talk to
that SmartDevice. That is, possession of the device identiﬁer
value authorizes its bearer to read any events a device handler
produces, irrespective of any granted capabilities.
Unfortunately, the device identiﬁers are easy to exchange
among SmartApps—it is not an opaque handle, nor speciﬁc
to a single SmartApp. Several SmartApps currently exist on
the SmartThings app store that allow retrieval of the device
identiﬁers in a user’s home remotely over the OAuth protocol.
We discuss an attack that exploits this weakness in §VI.
Event Spooﬁng. The SmartThings framework neither enforces
access control around raising events, nor offers a way for
triggered SmartApps to verify the integrity or the origin of
an event. We discovered that an unprivileged SmartApp can
both, spoof physical device events and spoof location-related
events.
A SmartDevice detects physical changes in a device and
raises the appropriate event. For example, a smoke detector
SmartDevice will raise the “smoke” event when it detects
smoke in its vicinity. The event object contains various state
information plus a location identiﬁer, a hub identiﬁer, and the
128-bit device identiﬁer that is the source of the event. We
found that an attacker can create a legitimate event object with
the correct identiﬁers and place arbitrary state information.
When such an event is raised, SmartThings propagates the
event to all subscribed SmartApps, as if the SmartDevice itself
triggered the event. Obtaining the identiﬁers is easy—the hub
and location ID are automatically available to all SmartApps.
Obtaining a device identiﬁer is also relatively straightforward
(§VI-B). We discuss an attack where an unprivileged Smart-
App escalates its privileges to control an alarm device in
§VI-D.
The SmartThings framework provides a shared location
object that represents the current geo-location such as “Home”
or “Ofﬁce.” SmartApps can read and write the properties of
the location object [26], and can also subscribe to changes
in those properties. For instance, a home occupancy detector
monitors an array of motion sensors and updates the “mode”
property of the location object accordingly. A vacation
mode app uses the “mode” property to determine when to
start occupancy simulation. Since the location object is
accessible to all SmartApps and SmartDevices, SmartThings
enables ﬂexibility in its use.
However, we found that a SmartApp can raise spoofed
location events and falsely trigger all SmartApps that rely
on properties of the location object—§VI discusses an
example attack where, as a result of location spooﬁng, vacation
mode is turned off arbitrarily.
To summarize, we found that the SmartThings event sub-
system design is insecure. SmartDevices extensively use it to
post their status and sensitive data—111 out of 132 device
handlers from our dataset raise events (see Table II).
642642
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
C. Insecurity of Third-Party Integration
SmartApps can provide HTTP endpoints for third-party
apps
to interface with SmartThings. These WebService
SmartApps can respond to HTTP GET, PUT, POST, and
DELETE requests. For example, If-This-Then-That4 can con-
nect to SmartThings and help users setup trigger-action rules.
Android,
to
provide simpliﬁed management and rule setup interfaces. The
endpoints are protected via the OAuth protocol and all remote
parties must attach an OAuth bearer token to each request
while invoking the WebService SmartApp HTTP endpoints.
iOS, and Windows Phone apps can connect
Prior research has demonstrated that many mobile apps in-
correctly implement the OAuth protocol due to developer mis-
understanding, confusing OAuth documentation, and limita-
tions of mobile operating systems that make the OAuth process
insecure [10]. Furthermore, the SmartThings OAuth protocol
is designed in a way that requires smartphone app developers,
in particular, to introduce another layer of authentication, to
use the SmartThings client ID and client secret securely. After
a short search of Android apps that interface with SmartApps,
we found an instance of an Android app on the Google Play
store that does not follow the SmartThings recommendation
and chooses the shorter, but insecure, approach of embedding
the client ID and secret in the bytecode. We found that its
incorrect SmartThings OAuth protocol implementation can be
used to steal an OAuth token and then used to exploit the
related SmartApp remotely. §VI gives one such example attack
that we veriﬁed ourselves.
D. Unsafe Use of Groovy Dynamic Method Invocation
As discussed, WebService SmartApps expose HTTP end-
points that are protected via OAuth. The OAuth token is
scoped to a particular SmartApp. However, the developer is
free to decide the set of endpoints, what kind of data they take
as input, as well as how the endpoint handlers are written.
Groovy provides dynamic method invocation where a
method can be invoked by providing its name as a string
parameter. Consider a method def foo(). If there is a
Groovy string def str = "foo", the method foo can
be invoked by issuing "$str"(). This makes use of JVM
reﬂection internally. Therefore, dynamic methods lend them-
selves conveniently to developing handlers for Web service
endpoints. Often, the string representation of a command is
received over HTTP and that string is executed directly using
dynamic method invocation.
Apps that use this feature could be vulnerable to attacks
that exploit overprivilege and trick apps into performing un-
intended actions. We discuss an example attack that tricks a
WebService SmartApp to perform unsupported actions in §VI.
This unsafe design is prone to command injection attacks,
which is similar to well known SQL-injection attacks.
E. API Access Control: Unrestricted Communication Abilities
Although the SmartThings framework uses OAuth to au-
thenticate incoming Internet requests to SmartApps from ex-
4http://ifttt.com
ternal parties, the framework does not place any restrictions
on outbound Internet communication of SmartApps. Further-
more, SmartApps can send SMSs to arbitrary numbers via a
SmartThings-provided service. Such a design choice allows
malicious SmartApps to abuse this ability to leak sensitive
information from a victim’s home. §VI discusses an example
attack.
V. EMPIRICAL SECURITY ANALYSIS OF SMARTAPPS
To understand how the security issues discussed in §IV
manifest in practice, we downloaded 499 SmartApps from the
SmartThings app store and performed a large-scale analysis.
We ﬁrst present
the number of apps that are potentially
vulnerable and then drill down to determine the extent to
which apps are overprivileged due to design ﬂaws discussed
in §IV-A.
A. Overall Statistics of Our Dataset
SmartApps execute5
in the proprietary cloud backend.
SmartApp binaries are not pushed to the hub for local execu-
tion. Therefore, without circumventing security mechanisms
of the backend, we cannot obtain SmartApps in binary form.
This precludes the possibility of binary-only analysis, as has
been done in the past for smartphone application analysis [13].
However, SmartThings supports a Web IDE where develop-
ers can build apps in the Groovy programming language. The
Web IDE allows programmers to share their source code on
a “source-level market” that other programmers can browse.
If SmartApp developers choose to share their code on this
source-level market, then that code is marked as open source,
and free of cost. Users can also access the source-level market
to download and install apps.6 This source-level market is
accessible through the Web IDE but without any option to
download all apps automatically.
Our network protocol analysis discovered a set of unpub-
lished REST URLs that interact with the backend to retrieve
the source code of SmartApps for display. We downloaded all
499 SmartApps that were available on the market as of July
2015 using the set of unpublished REST URLs, and another
set of URLs that we intercepted via an SSL man-in-the-middle
proxy on the Companion App (we could not download 22
apps, for a total of 521, because these apps were only present
in binary form, with no known REST URL). Similarly, we
downloaded all 132 unique SmartDevices (device handlers).
We note that we could have visited source code pages for
all SmartApps and SmartDevices, and could have manually
downloaded the source code. We opted for our automated
approach described above for convenience purposes.
Table II shows the breakdown of our dataset. Note that
not all of these apps are vulnerable. The table shows the
upperbound. In §VI, we pick a subset of these apps to
show actual vulnerability instances. Next, we examine the
5Recent v2 hubs also support cloud-only execution.
674% of apps on the binary-only market are available on the source-level
market.
643643
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
reﬂection renders existing binary analysis tools like Soot
largely ineffective for our purposes.
Instead, we use the Abstract Syntax Tree (AST) represen-
tation of the SmartApp to compute overprivilege as we have
the source code of each app. Groovy supports compilation
customizers that are used to modify the compilation process.
Just like LLVM proceeds in phases where programmer-written
passes are executed in a phase, the compilation customizers
can be executed at any stage of the compilation process. Our
approach uses a compiler customizer that executes after the se-
mantic analysis phase. We wrote a compilation customizer that
visits all method call and property access sites to determine
all methods and properties accessed in a SmartApp. Then we
ﬁlter this list using our completed capability documentation to
obtain the set of used commands and attributes in a program.
To check the correctness of our tool, we randomly picked
15 SmartApps and manually investigated the source code.
We found that there were two potential sources of analysis
errors—dynamic method invocation and identically named
methods/properties. We modiﬁed our analysis tool
in the
following ways to accommodate the shortcomings.
Our tool ﬂags a SmartApp for manual analysis when
it detects dynamic method invocation. 26 SmartApps were
ﬂagged as such. We found that among them, only 2 are actually
overprivileged. While investigating these 26 SmartApps, we
found that 20 of them used dynamic method invocation within
WebService handlers where the remote party speciﬁes a string
that represents the command to invoke on a device,
thus
possibly leading to command injection attacks.
BREAKDOWN OF OUR SMARTAPP AND SMARTDEVICE DATASET
TABLE II
Total # of SmartDevices
# of device handlers raising events using createEvent
and sendEvent. Such events can be snooped on by
SmartApps.
Total # of SmartApps
# of apps using potentially unsafe Groovy dynamic method
invocation.
# of OAuth-enabled apps, whose security depends on correct
implementation of the OAuth protocol.
# of apps using unrestricted SMS APIs.
# of apps using unrestricted Internet APIs.
132
111
499
26
27
131
36
COMMANDS/ATTRIBUTES OF 64 SMARTTHINGS CAPABILITIES
TABLE III
Documented
Completed
Commands
Attributes
66
60
93
85
capabilities requested by 499 apps to measure the degree of
overprivilege when SmartApps are deployed in the ﬁeld.
B. Overprivilege Measurement
We ﬁrst discuss how we obtained the complete set of
capabilities including constituent commands and attributes.
Then we discuss the static analysis tool we built to compute
overprivilege for 499 Groovy-based SmartApps.
Complete List of Capabilities. As of July 2015, there are
64 capabilities deﬁned for SmartApps. However, we found
that only some of the commands and attributes for those
capabilities were documented. Our overprivilege analysis re-
quires a complete set of capability deﬁnitions. Prior work has
used binary instrumentation coupled with automated testing
to observe the runtime behavior of apps to infer the set
of operations associated with a particular capability [13].
However, this is not an option for us since the runtime is
inside the proprietary backend.
To overcome this challenge, we analyzed the SmartThings
compilation system and determined that it has information
about all capabilities. We discovered a way to query the com-
pilation system—an unpublished REST endpoint that takes a
device handler ID and returns a JSON string that lists the
set of capabilities implemented by the device handler along
with all constituent commands and attributes. Therefore, we
simply auto-created 64 skeleton device handlers (via a Python
script), each implementing a single capability. For each auto-
created device handler, we queried the SmartThings backend
and received the complete list of commands and attributes.
Table III summarizes our dataset.
Static Analysis of Groovy Code. Since SmartApps compile to
Java bytecode, we could have used an analysis framework like
Soot to write a static analysis that computed overprivilege [31].
However, we found that Groovy’s extremely dynamic na-
ture made binary analysis challenging. The Groovy compiler
converts every direct method call into a reﬂective one. This
The second source of error is custom-deﬁned methods and
properties in SmartApps whose names are identical to known
SmartThings commands and attributes. In these cases, our tool
cannot distinguish whether an actual command or attribute
or one of the custom-deﬁned methods or properties is called.
Our tool again raises a manual analysis ﬂag when it detects
such cases. Seven SmartApps were ﬂagged as a result. On
examination, we found that all seven were correctly marked
as overprivileged. In summary, due to the two sources of
false positives discussed above, 24 apps were marked as
overprivileged, representing a false positive rate of 4.8%. Our
software is available at https://iotsecurity.eecs.umich.edu.
Coarse-Grained Capabilities. For each SmartApp, we com-
pute the difference between the set of requested commands and
attributes and the set of used commands and attributes. The
set difference represents the commands and attributes that a
SmartApp could access but does not. Table IV summarizes
our results based on 499 SmartApps. We ﬁnd that at least 276
out of 499 SmartApps are overprivileged due to coarse-grained
capabilities. Note that our analysis is conservative and elects to
mark SmartApps as not overprivileged if it cannot determine
reliably whether overprivilege exists.
Coarse SmartApp-SmartDevice Binding. Recall that coarse
SmartApp-SmartDevice binding overprivilege means that the
SmartApp obtains capabilities that are completely unused.
Consider a SmartApp that only locks and unlocks doors based
on time of a day. Further, consider that the door locks are op-
644644
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV
OVERPRIVILEGE ANALYSIS SUMMARY
Reason for Overprivilege
Coarse-grained capability
Coarse SmartApp-SmartDevice binding
# of Apps
276 (55%)
213 (43%)
erated by a device handler that exposes capability.lock
as well as capability.lockCodes. Therefore, the door
lock/unlock SmartApp also gains access to the lock code
feature of the door lock even though it does not use that
capability. Our aim is to compute the set of SmartApps that
exhibit this kind of overprivilege.
For
the
example,
SmartApp
consider
above. Assume
However, we do not know what device handler would be
associated with a physical device statically, since there could