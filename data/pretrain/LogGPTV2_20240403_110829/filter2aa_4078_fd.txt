### 6. 后续行动

#### 第15章 安全评估和测试

##### 6.1 Fagan检查概述
Fagan检查是一种正式的代码审查方法，其流程如图15.7所示。该过程中的每个阶段都有明确的进入和退出标准，这些标准必须在从一个阶段过渡到下一个阶段时得到满足。

**图15.7**：Fagan检查遵循严格的正式流程，各阶段之间的转换必须满足明确定义的进出标准。

通常，正式的Fagan检验仅在高度受限的环境中实施，例如当代码缺陷可能导致灾难性后果时。大多数组织采用较为宽松的并行代码审查措施，包括：
- 开发人员与其他团队成员会面以审查他们的代码。
- 高级开发人员执行手动代码审查，并在代码投入生产环境前签字确认。
- 在代码投入生产环境之前，使用自动化工具检测常见的应用程序缺陷。

每个组织都应根据自身业务需求和软件开发文化选择合适的代码审查流程。

##### 6.2 静态测试
静态测试是指在不运行软件的情况下，通过分析源代码或编译后的应用程序来评估软件质量。这种类型的测试通常利用自动化工具来检测常见的软件缺陷，如缓冲区溢出。在一个成熟的开发环境中，应用程序开发人员会在设计、开发和测试过程中广泛使用静态分析工具。

##### 6.3 动态测试
动态测试涉及在实际运行环境中评估软件的安全性。对于那些部署第三方编写的应用程序的组织来说，这通常是唯一可行的选择。在这种情况下，测试人员往往无法访问底层源代码。Web应用扫描器是动态软件测试的一个常见示例，用于检测跨站脚本攻击（XSS）、SQL注入等安全漏洞的存在情况。对生产环境进行动态测试时需谨慎协调，以防服务中断。

此外，动态测试还可以包括使用综合事务来验证系统性能。这些事务具有已知预期结果；测试人员将测试代码与之对比，任何偏差都可能表明存在潜在的缺陷，需要进一步调查。

##### 6.4 模糊测试
模糊测试是一种专门针对动态测试的技术，它向软件提供多种类型的输入以揭示其局限性并发现未被发现的错误。模糊测试工具可以生成无效输入，这些输入可能是随机生成的或是特意构造的，旨在触发特定的软件漏洞。然后，测试者监控应用程序的行为，寻找崩溃、缓冲区溢出或其他异常结果。

模糊测试主要分为两大类：
- **变异模糊测试**：基于现有输入数据，对其进行修改（如改变字符、添加字符串等）以创建新的模糊输入。
- **智能模糊测试**：基于对程序所处理的数据类型的理解，构建数据模型并生成新的模糊输入。

zzuf工具能够根据用户定义自动执行变异模糊测试。例如，图15.8展示了一个包含一系列'1'的文件内容。

**图15.8**：预模糊测试前的输入文件

而图15.9则展示了经过zzuf工具处理后的结果。虽然大部分文本仍由'1'组成，但已引入了一些变化，可能会导致依赖原始输入格式的程序出现问题。这一过程被称为“翻转”。

**图15.9**：图15.8所示文件经zzuf变异模糊测试工具处理后的输出

##### 6.5 接口测试
接口测试是复杂软件系统开发中的关键环节。当多个团队分别负责开发大型应用的不同部分时，他们之间需要通过定义良好的接口协作。接口测试确保这些模块按照规范工作，从而保证整个系统在所有开发任务完成后能正常运行。

在软件测试中，有三种主要接口需要考虑：
- **API (Application Programming Interface)**: 为代码模块间的交互提供了标准化方式，并可通过Web服务对外公开。开发者需测试API以确保它们符合所有的安全要求。
- **UI (User Interface)**: 包括图形用户界面(GUI)和命令行接口(CLI)，允许最终用户与软件互动。界面测试应涵盖所有用户界面，以验证其功能是否正常。
- **物理接口**: 存在于某些控制机械设备或逻辑控制器的应用程序中。由于这类接口故障可能导致严重后果，因此也应当受到重视。

接口不仅促进了复杂系统的计划和未来互连，还在Web 2.0时代扮演了重要角色，使得不同软件包之间能够相互作用。然而，在享受接口带来的灵活性的同时，开发者也必须小心避免引入额外的安全风险。对接口进行全面测试有助于提高其满足组织安全需求的信心。

##### 6.6 误用案例测试
在一些应用程序中，存在用户试图滥用软件的具体场景。例如，在银行软件中，用户可能尝试通过操纵输入字符串来访问其他人的账户信息，或者试图从已经透支的账户中取款。为了评估软件对这些已知风险的抵御能力，测试人员会采用所谓的“误用案例测试”或“滥用场景测试”。