(6) 后续行动
第 1 5 章 安全评估和测试
对 Fagan 检查的概述见图 15工 每个步骤都有明确定义的进出标准， 从一个阶段过波到下一个
阶段时必须满足这些标准 。
图 1 5.7 Fagan 检查遵循严格的正式流程， 各阶段之间的转换必须满足明确定义的迸出标准
正式的 Fagan 检验通常只存在于高度受限的环境中 ， 其中代码缺陷可能产生灾难性影响。 大多
数组织都使用那些代码并行审查措施不太严格的流程 ， 包括:
• 开发人员在会见一个或多个其他团 队成 员 时走查他们的代码
• 高级开发人员执行手工代码审查， 在转入生产环境之前签署所有代码
• 在转入生产环境之前 ， 使用 自 动审核工具检测常见的应用 程序缺陷
每个组织都应该采取一种适合 自 身业务需求和 软件开发文化的代码审查流程
2. 静态测试
静态测试在不运行软件的情况下通过分析源代码或编译的应用程序对软件进行评估。 静态分析
通常涉及用来检测常见软件缺陷(如缓冲区溢出)的 自 动化工具。 在成熟的开发环境中 ， 应用程序开
发人员 能够使用静态分析工具 ， 并在设计、 开发和测试过程中使用它们。
3. 动态测试
动态测试是在运行环境中评估软件安全， 对于部署别人写的应用程序的组织来说通常是唯一选
择 。 在这种情况下， 测试人员经常不能访问底层的源代码。 动态软件测试的一个常见例子是使用
Web 应用程序扫描工具来检测 Web 应用程序中的跨站脚本、 SQL 注入或其他缺陷的存在 。 对生产
453
454
CISSP 官方学 习指南(第 7 版)
环境的动态测试应该进行小心协调 ， 以避免意外中断服务。
动态测试可能包括使用综合事务来验证系统的性能。 这些是具有己知预期结果的脚本事务。 测
试人员针对测试代码运行综合事务， 然后将事务输出与预期状态进行比较。 实际结果和预期结果之
间 的任何偏差都代表代码中 可能的缺陷 ， 必须进一步研究 。
4. 模糊测试
模糊测试是一项专门 的动态测试技术， 向 软件提供了 许多不同类型的输入， 来强调其局限性并
发现先前未被发现的缺陷。 模糊测试软件向软件提供无效的输入， 或是随机生成， 或是特别制作，
以触发特殊的软件漏洞 。 然后， 模糊测试监控应用程序的性能， 监视软件崩溃、 缓冲区溢出或其他
不 良和/或不可预知 的结果。
有两个主要类别 的模糊测试:
变异模糊测试 从软件的实际操作中提取之前的输入值， 对其进行处理(或改变)以创建模糊输
入 。 它可能改变内容的字符， 为 内 容的结尾附加字符串或执行其他数据操作技术。
智 能模糊测试 基于对程序所使用数据类型的理解， 开发数据模型并创建新的模糊输入
zzuf工具根据用户规范操纵输入， 将变异模糊测试的过程自动化。 例如， 图 1 5.8 显示了一个包
含一系列 l 的文件。
•
ubuntuS cat ones . txt
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111
ubuntuS I
图 1 5.8 对包含一系列 l 的输入文件进行预模糊测试
l圄
图 1 5.9 显示了应用 于这种输入的 zzuf工具。 产生的被模糊文本几乎与原始文本是相同的。 尽管'
还是主要包含 1 ， 但现在文本有几个变化， 可能会与期望原始输入的程序相混淆。 这个稍微操纵输
入的过程被称为翻转。
第 1 5 章 安全评估和测试
•
ubuntuS 22uf .号 。ne5. txt '.
113111111111111111111311111111111111111111111111111111111111111111111111111111111111111111111111111111111 I
131111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111 I
111111111111111111111111111151111111 1! 1111111111111111111111111101111111111111111111111111111111111111111 1
111111111111111111111111111111111111111111111111111111111111111q1l111111511 111111111111111111111111911111
111111111111111111115 111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111110111111111111q11111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111l1111111111ql1111l11111011111511111l1111110111111111111111q11111111 1111 111111111111111111
11111111111111011111111111111111111111111111111111911111111111111111111111111111 ! 111111111111111110111111
1117111101111111111111111111111111111111 ! 1111111111111111111111111111111111111111111111111111111111 ! 11111
1111111111111111111111111 ! 1111111111111111111111111111111111111111111111111111111111111111111111111191111
111131111111111111?l1111111q1111111111111111111111111111111111111111111111111111111111 ! 111111111111111111
111111 ! 11111111111111111111111111911111111111111111111111111111111111111111111111111111111111111110111111
111111111111111111111911111111111115111111111111111111111111111111111111111111111q1q111113111111111111111
1111111111111111111111111111 ! 1111111111111111111111111111011111111111111111111111111111111111111111111111
111111111111111111111111111111111111111117111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111q111111111111111
1131111111111111111111111111111111111191111111111111111111111111191111115 11111111111111111111111111111111
111111111111111111111111111111111111111111111q111111111111115 111111111111111111111111111111111111111111 11
111111111111311111111111111111111111111111111111111111111111111111110111111111111111911111111111111111111
11 1111011111111111 11111111111111111111111111111111111111111111111311111111111111111111111111111111111q111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111q11111111111111111111111111111111111111111111111111111111011111111111111111115 1111111111111 11
111111111131111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111
111111111111111111111111 ! 11111111111111111111! 111111111111111111111111111111111111111111q111115111111l111
111111111111111111111111111111111111111111111111111111011110111111111111111111111111111111111111111111111
11111111111111111111111111111111111
ubuntuS I
图 1 5.9 图 1 5.8 所示的输入文件经过 zzuf变异模糊测试工具后的结果
1 5.3.2 接口测试
接口测试是开发复杂软件系统的一个重要组成部分。 在许多情况下， 多个团队的开发人员必须
在复杂应用程序的不同部分进行工作， 他们必须相互合作以实现业务 目 标。 这些被分别开发的模块
之间的传递使用定义 良好的接口 ， 以便团队可以独立工作。 接口测试评估模块针对接口 规范的性能，
以确保所有开发工作完成后模块能正常工作。
在软件测试过程中 ， 应对三种接 口 进行测试:
应用编程接口(API) 为代码模块提供一种标准化的方式进行交互， 可以通过 Web 服务向外部
公开。 开发人员必须测 试 API 来确保它们执行所有安全需求。
用户界面(UI) 例子包括图形用户界面(GUI)和命令行接口。UI 为终端用户提供与软件交互的能
力 。 界面测试应包括审查所有的用户 界面来验证它们能否正常运作 。
物理接口 在一些操作机器、 逻辑控制器或物理世界中其他对象的应用程序中存在。 软件测试
人员应该注意物理接口， 因 为如果它们失效， 会带来一些潜在后果。
接口为复杂系统的计划或未来互连提供重要的机制。 Web 2.0世界取决于这些接口 的可用性， 以
方便不同软件包之间的相互作用 。 然而， 开发人员必须小心， 因为接口提供的灵活性不会带来额外
的 安全风险 。 接 口 测试对接 口 满足组织的安全需求提供了 一种更高程度的保证。
1 5.3.3 误用 案例测试
在某些应用程序中， 关于软件用户可能试图滥用应用程序有明确示例。 例如， 银行软件的用户
可能会试图操纵输入字符串来获取其他用户的账户 。 他们也可能试图从一个己经透支的账户取出资
金。 软件测试人员使用称为误用案例测试或滥用周例测试的过程来评估他们的软件对这些己知风险
455
456
CISSP 官方学 习指南(第 7 版)