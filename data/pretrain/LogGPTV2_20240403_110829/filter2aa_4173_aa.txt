原文 by [Web攻防之暴力破解](https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&mid=2247483704&idx=1&sn=8034515a35a30ecc148ac489cf31e976&chksm=ea3f3deadd48b4fc15bc6b18d814856ded1cdc09e01e39dd5c8927b7003e62e2694b319cf1b4&mpshare=1&scene=1&srcid=1128xiKQwQLEHKGT3docayMh#rd)  
## 0x00 序
攻防之初，大多为绕过既有逻辑和认证，以Getshell为节点，不管是SQL注入获得管理员数据还是XSS 获得后台cookie，大多数是为了后台的登录权限，假若我们获得一枚口令，都是柳暗花明。不管口令复杂与否，只要在构造的字典内都是爆破之结晶。  
Web形态及业务之错综，我们暂可将能够自定义字典的请求归类到爆破，以便信息的提炼和知识的逻辑推理。  
本文主要收集了常用的一些爆破相关的零碎点和技巧点。  
## 0x01 账户探测
探测存在与否  
第一梯队：Top500用户名、手机号  
第二梯队：邮箱、员工编号  
## 0x02 指定口令爆破用户名  
1. 指定类123456口令爆破用户名 
2. 正常的top500，top10000帐号；  
3. 单个字母、两个字母、三个字母、四个字母随机组合的帐号；  
a) 小工具pydictor值得推荐
`python pydictor.py -base L --len 2  3`  
b) Burp也可以  
4. 一位数字、二位数字、三位数字、四位数字的随机组合     
```
for n in xrange(10000):
    print str(n).zfill(4)
```
5. 厂商名相关帐号  
a) 如：facebook、fb_steven …  
b) 页面联系邮箱的规则学习及自创建  
## 0x03 密码爆破
1. top500, top3000,top10000，自定义密码  
a) Top 系列，几乎安全从业都有自己的弱口令字典，常规就好，太大的字典跑起来也费劲，关键是定制    
b) 定制字典，pydictor值得推荐：https://github.com/LandGrey/pydictor    
c) 社工库的使用，指定用户的历史密码，是一种尝试    
2. 厂商特色口令生成，如baidu@123  
a) 适用于应用管理员类人员以及主机协议类密码  
b) 更多定制类字典也可以pydicor  
c) 使用简单密码和厂商邮箱后缀组合  
``` python
#coding=utf-8
import sys
key = sys.argv[1]
f = open("%s.txt"%key,"a")
list1 = [123,321,1234,4321,123456,654321,12345678,123456789,1234567890,888,8888,666,6666,163,521,1314,1,11,111,1111,2,222,3,333,5,555,9,999]
list2 = ['#123','#1234','#123456','@123','@1234','@123456','@qq.com','qq.com','@123.com','123.com','@163.com','163.com','126.com','!@#','!@#$','!@#$%^','098']
for j1 in list1:
    pwd1 =  key + str(j1) + '\n'
    f.write(pwd1)
for j2 in list2:
    pwd2 =  key+str(j2)+'\n'
    f.write(pwd2)
for i in range(1980,2016):
    #pwd1 = key + str(i) + '\n'
    pwd3 = '{}{}{}'.format(key,i,'\n')
    f.write(pwd3)
f.close()
print key+' password combination ok!!!'
```
3. 加密密码暴力破解  
a) 普通编码类，如base64  
b) 自定义加密算法（目标系统使用了可猜测的加密算法去加密口令）  
可参考浮萍写的基于RSA算法加密口令后爆破脚本：    
https://github.com/fupinglee/MyPython/blob/master/web/RSADemo.py    
c) Selenium 自动浏览器提交模块（可适用与不明加密算法，模拟正常操作流）    
4. 弱文件后的后台爆破  
a) 弱文件爆破获得后台    
b) 后台密码爆破    
   i. 各大中间件及CMS的口令破解，如weblogic 、tomcat  
   ii. 自定义后台的密码破解  
5. Webshell 密码爆破  
a) Shell 发现（弱文件以及蛛丝马迹）  
b) Shell 爆破（有专用工具，也可用burp完成）  
6. 辅助信息  
a) Web 源码、JS 以及注释信息中是否包含用户名以及口令指定规则  
b) 技术运维人员的桌子上面的便签信息（若能接触到目标内部）…  
## 0x04 登录验证码爆破
1. 验证码绕过  
a) 验证码非必须参数，可省略  
b) 验证码不失效，可多次使用  
c) 验证码问题集合答案有限，可以遍历后破解  
d) 非空逻辑校验，验证码置空 或 去掉校验参数的请求  
e.g. ecshop后台暴力破解验证码绕过    
2. 简单验证码识别  
https://github.com/fupinglee/CrackCaptcahLogin/releases    
类似工具很多，看使用习惯。  
3. 高模糊度验证码识别  
a) 一般的识别流程都是二值化、去干扰、区域选择、OCR识别  
b) 可用云打码平台 （不打广告）  
## 0x05 短信/邮箱验证码爆破
1. 部分登录验证码的分类也可适用于此  
2. 验证码的本身绕过  
a) 返回包回显（包括返回包、输出在cookie等）    
b) JS控制    
c) 返回包控制：True&false控制（0&1），修改返回包可绕过  
3. 4位数字，验证码爆破，很快    
4. 6位数字，验证码爆破；可根据多线程的前提进行多进程处理，0-199999一波；200000-399999一波…（依次类推）；也可以看频率，哪块区间分布的概率较高可重点关注；也可以指定前一位或两位进行爆破。    
5. 弱token  
a) 例：奇虎360任意用户密码修改漏洞，发送给邮箱的验证链接里面的vc值为时间戳的md5加密；作为一种检验参数可被猜测。  
b) 基于密码找回的手机号、UID、邮箱等遍历，结合客户端源码可能的些蛛丝马迹  
c) 不完全属于爆破逻辑，但可互补增值  
## 0x06 数据信息爆破（遍历）
1. 关键参数的的信息遍历(select)  
a) 包括用户名  
b) ID号  
c) 手机号   
d) 邮箱  
e) 身份证号  
f) 订单号  
g) 银行卡  