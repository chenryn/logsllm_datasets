title:Opening Pandora's box through ATFuzzer: dynamic analysis of AT interface
for Android smartphones
author:Imtiaz Karim and
Fabrizio Cicala and
Syed Rafiul Hussain and
Omar Chowdhury and
Elisa Bertino
Opening Pandora’s Box through ATFuzzer:
Dynamic Analysis of AT Interface for Android
Smartphones
Imtiaz Karim
Purdue University
PI:EMAIL
Fabrizio Cicala
Purdue University
PI:EMAIL
Syed Rafiul Hussain
Purdue University
PI:EMAIL
Omar Chowdhury
University of Iowa
PI:EMAIL
Elisa Bertino
Purdue University
PI:EMAIL
ABSTRACT
This paper focuses on checking the correctness and robustness of
the AT command interface exposed by the cellular baseband proces-
sor through Bluetooth and USB. A device’s application processor
uses this interface for issuing high-level commands (or, AT com-
mands) to the baseband processor for performing cellular network
operations (e.g., placing a phone call). Vulnerabilities in this inter-
face can be leveraged by malicious Bluetooth peripherals to launch
pernicious attacks including DoS and privacy attacks. To identify
such vulnerabilities, we propose ATFuzzer that uses a grammar-
guided evolutionary fuzzing approach which mutates production
rules of the AT command grammar instead of concrete AT com-
mands. Empirical evaluation with ATFuzzer on 10 Android smart-
phones from 6 vendors revealed 4 invalid AT command grammars
over Bluetooth and 13 over USB with implications ranging from
DoS, downgrade of cellular protocol version (e.g., from 4G to 3G/2G)
to severe privacy leaks. The vulnerabilities along with the invalid
AT command grammars were responsibly disclosed to affected
vendors and two of the reported vulnerabilities have been already
assigned CVEs (CVE-2019-16400 and CVE-2019-16401).
CCS CONCEPTS
• Security and privacy → Mobile and wireless security; Dis-
tributed systems security; Denial-of-service attacks.
KEYWORDS
Android Smartphone Security and Privacy, Vulnerabilities, Attack
ACM Reference Format:
Imtiaz Karim, Fabrizio Cicala, Syed Rafiul Hussain, Omar Chowdhury,
and Elisa Bertino. 2019. Opening Pandora’s Box through ATFuzzer: Dy-
namic Analysis of AT Interface for Android Smartphones. In 2019 An-
nual Computer Security Applications Conference (ACSAC ’19), December
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359833
9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 15 pages. https:
//doi.org/10.1145/3359789.3359833
1 INTRODUCTION
Modern smartphones operate with two interconnected processing
units—an application processor for general user applications and a
baseband processor (also known as a cellular modem) for cellular
connectivity. The application processor can issue ATtention com-
mands (or, AT commands) [22] through the radio interface layer
(RIL, also called AT interface) to interact with the baseband pro-
cessor for performing different cellular network operations (e.g.,
placing a phone call). Most of the modern smartphones also accept
AT commands once connected via Bluetooth or USB.
Problem and scope. Since the AT interface is an entry point for
accessing the baseband processor, any incorrect behavior in pro-
cessing AT commands may cause unauthorized access to private
information, inconsistent system states, and crashes of the RIL dae-
mon and the telephony stack. This paper thus focuses on the follow-
ing research question: Is it possible to develop a systematic approach
for analyzing the correctness and robustness of the baseband-related
AT command execution process to uncover practically-realizable vul-
nerabilities?
Incorrect execution of AT commands may manifest in one of
the following forms: (1) Syntactic errors: the device accepts and
processes syntactically invalid AT commands; and (2) Semantic vio-
lations: the device processes syntactically correct AT commands,
but does not conform to the prescribed behavior. Successful ex-
ploitations of such invalid commands may enable malicious periph-
eral devices (e.g., a headset), connected to the smartphone over
Bluetooth, to access phones’s sensitive information, such as, IMSI
(International Mobile Subscriber Identity, unique to a subscriber)
and IMEI (International Mobile Equipment Identity, unique to a
device), or to downgrade the cellular protocol version or stop the
cellular Internet, even when the peripheral is only allowed to access
phone’s call and media audio.
Prior efforts. Existing approaches [43, 44, 53] strive to identify the
types of valid AT commands (i.e., commands with valid inputs/ar-
guments conforming to 3GPP reference [1, 9, 11, 12, 52] or vendor-
specific commands [13, 14, 18, 21] added for vendor customization)
exposed through USB interfaces on modern smartphone platforms
and the functionality they enable. Yet these studies have at least
one of the following limitations: (A) The analyses [53] do not test
529the robustness of the AT interface in the face of invalid commands;
(B) The analyses [53] only consider USB interface and thus leave
the Bluetooth interface to the perils of both valid and invalid AT
commands; and (C) The analyses [30, 43, 45, 49] are not general
enough to be applicable to smartphones from different vendors.
Challenges. Conceptually, one can approach our problem using
one of the following two techniques: (1) static analysis; (2) dynamic
analysis. As the source code of firmwares is not always available, a
static analysis-based approach would have to operate on a binary
level. The firmware binaries, when available, are often obfuscated
and encrypted. Making such binaries amenable to static analysis
requires substantial manual reverse engineering effort. To make
matters worse, such manual efforts are often firmware-version spe-
cific and may not apply to other firmwares, even when they are
from the same vendor. Using dynamic analysis-based approaches
also often requires instrumenting the binary to obtain coverage
information for guiding the search. Like static analysis, such instru-
mentation requires reverse engineering effort which again is not
scalable. Also, during dynamic analysis, due to the separation of
the two processors, it is often difficult to programmatically detect
observable RIL crashes from the application processor. Finally, in
many cases, undesired AT commands are blacklisted [2–4] and
hence can induce rate-limiting by completely shutting down the AT
interface. The only way to recover from such a situation is to reboot
the test device which can substantially slow down the analysis.
Our approach. In this paper, we propose ATFuzzer which can test
the correctness and robustness of the AT interface. One of the key
objectives driving the design of ATFuzzer is discovering problematic
input formats instead of just some misbehaving concrete AT com-
mands. Towards this goal, ATFuzzer employs a grammar-guided
evolutionary fuzzing-based approach. Unlike typical mutation-based
[28, 35–37, 46, 59] and generation-based [20, 31, 54] fuzzers, ATFuzzer
follows a different strategy. It mutates the production rules of the AT
command grammars and uses sampled instances of the generated
grammar to fuzz the test programs.
Such an approach has the following two clear benefits. First, a
production rule (resp., grammar) describing a valid AT command
can be viewed as a symbolic representation for a set of concrete AT
commands. Such a symbolic representation enables ATFuzzer to
efficiently navigate the input search space by generating a diverse
set of concrete AT command instances for testing. The diversity
of fuzzed input instances is likely achieved because mutating a
grammar can move the fuzzer to test a different syntactic class
of inputs with high probability. Second, if ATFuzzer can find a
problematic production rule whose sampled instances can regularly
trigger an incorrect behavior, the production rule can then be used
as an evidence which can contribute towards the identification of
the underlying flaw that causes the misbehavior.
ATFuzzer takes grammars of AT commands as the seed. It then
generates the initial population of grammars by mutating the seed
grammars. For each generated grammar, ATFuzzer samples grammar-
compliant random inputs and evaluate the fitness of each grammar
based on our proposed fitness function values of the samples. Since
code-coverage or subtle memory corruptions are not suitable to be
used as the fitness function for such vendor-specific, closed-source
firmwares, we leverage the execution timing information of each AT
command as a loose-indicator of code-coverage information. Based
on the fitness score of each grammar, ATFuzzer selects the parent
grammars for crossover operation. We design a grammar-aware
two-point crossover operation to generate a diverse set of valid and
invalid grammars. After the crossover operations, we incorporate
three proposed mutation strategies to include randomness within
the grammar itself. The intuition behind using both crossover and
mutation operations is for testing the integrity of each command
field as well as the command sequence1.
Findings. To evaluate the generality and effectiveness of our ap-
proach, we evaluated ATFuzzer on 10 Android smartphones (from 6
different vendors) with both Bluetooth and USB interfaces. ATFuzzer
has been able to uncover a total of 4 erroneous AT grammars over
Bluetooth and another 13 AT grammars over USB. Impacts of these
errors range from complete disruption of cellular network con-
nectivity to retrieval of sensitive personal information. We show
practical attacks through Bluetooth that can downgrade or shut-
down Internet connectivity, and also enable illegitimate exposure
of IMSI and IMEI when such impacts are not achievable through
valid AT commands. In addition, the syntactically and semanti-
cally flawed AT commands over USB can cause crashes, compound
actions, and syntactically incorrect commands to get processed.
For instance, an invalid AT command ATDI in LG Nexus 5 induces
the program to execute two valid AT commands— ATD (dial) and
ATI (display IMEI), simultaneously. These anomalies add a new
dimension to the attack surface when blacklisting or access control
mechanisms are put in place to protect the devices from valid yet
menacing AT commands. The vulnerabilities along with the invalid
AT command grammars were responsibly disclosed to the affected
vendors. Among the discovered vulnerabilities, two of them (i.e.,
DoS and privacy leaks attacks) have been assigned CVEs (CVE-
2019-16400 [5] and CVE-2019-16401 [6]).
Contributions. The paper has the following contributions:
(1) We propose ATFuzzer— an automated and systematic frame-
work that leverages grammar-guided, evolutionary fuzzing
for dynamically testing the AT command interface in modern
Android smartphones. We have made our framework open-
source alongside the corpus of AT command grammars we
tested. The tool and its detailed documentation are publicly
available at: https://github.com/Imtiazkarimik23/ATFuzzer
(2) We show the effectiveness of our approach by uncovering 4
problematic AT grammars through Bluetooth and 13 prob-
lematic grammars through USB interface on 10 smartphones
from 6 different vendors.
(3) We demonstrate that all the anomalous behavior of the AT
program exposed through Bluetooth are exploitable in prac-
tice by adversaries whereas the anomalous behavior of AT
programs exposed through USB would be effectively ex-
ploitable even when valid but unsafe AT commands are
blacklisted. The impact of these vulnerabilities ranges from
private information exposure to persistent denial-of-service
attacks.
1Achieving some cellular network operations through the AT interface (e.g., sending
an SMS) may require issuing a sequence of AT commands instead of a single AT
command.
530the Android smartphone. The Bluetooth on a smartphone may have
multiple profiles (services), but only certain profiles (e.g., hands-free
profile, headset profile) support AT commands. Figure 1(b) shows
the flow of AT command execution over Bluetooth.
When a device is paired with the host machine, it establishes and
authorizes a channel for data communication. After receiving an
AT command, the system-level component of the Bluetooth stack
recognizes the AT command with the prefix "AT" and compares
it against a list of permitted commands (based on the connected
Bluetooth profile). When the parsing is completed, the AT command
is sent to the application-level component of the Bluetooth stack
in user space where the Bluetooth API takes the action as per
the AT command issued. Similar to the example through USB, if a
baseband related command is invoked (e.g., ATD ;), the
RILD is triggered to deliver the command to the baseband processor.
Contrary to USB, only a subset of AT commands related to specific
profiles are accepted/processed through Bluetooth.
2.3.2 USB. If a smartphone exposes its USB Abstract Control
Model (ACM) interface [49], it creates a tty device such as /dev/tty-
ACM0 which enables the phone to receive AT commands over the
USB interface. On the other hand, in phones for which the USB
modem interface is not included in the default USB configuration,
switching to alternative USB configuration [49] enables communi-
cation to the modem over USB. The modem interface appears as
/dev/ttyACM* device node in Linux whereas it appears as a COM*
port in Windows. Figure 1(a) shows the execution path of an AT
command over USB.
When the AT command injector running on a host machine sends
a command through /dev/ttyACM* or COM* to a smartphone, the
ttyABC (ABC is a placeholder for actual name of the tty device) de-
vice in the smartphone receives the AT command and relays it to
the native daemon in the Android userspace. The native daemon
takes actions based on the type of command. If the command is re-
lated to baseband, for instance, ATD ;, the RILD (Radio
Interface Layer Daemon) is triggered to deliver the command to
the baseband processor which executes the command — makes a
phone call to the number specified by . On the other
hand, if the command is operating system-specific (e.g., Android,
iOS, or Windows), such as +CKPD for tapping a key, the native
daemon does not invoke RILD.
2.4 AT Commands and Their Grammars
We obtain the list of valid AT commands and their grammars from
the 3GPP standards [1, 8–12, 52]. Note that, not every standard AT
commands are processed/recognized by all smartphones. This is
because different smartphone vendors enforce different whitelist-
ing and blacklisting policies for minimizing potential security risks.
Also, vendors often implement several undocumented AT com-
mands. Any problematic input instances that ATFuzzer finds, we
check to see whether it is one of the vendor-specific, undocumented
AT commands following the approach by Tian et al. [53]. We do
not report the undocumented, vendor-specific AT commands that
ATFuzzer discovers as invalid since they have already been docu-
mented [53]. We aim at finding malformed AT command sets that
are due to the parsing errors in the AT parser itself.
Figure 1: AT Interface for Android Smartphones connected to a host
machine through USB interface
2 BACKGROUND
We now give a brief primer on AT commands. We then discuss how
we obtain the list of a smartphone-supported AT commands and
their respective grammars.
2.1 AT Commands
Along with the AT commands defined by the cellular standards [11],
vendors of cellular baseband processors and operating systems sup-
port vendor-specific AT commands [17, 18, 21] for testing and
debugging purposes. Based on the functionality, different AT com-
mands have different formats; differing in number and types of
parameters. The following are the four primary uses of AT com-
mands: (i) Get/read a parameter value, e.g., AT + CFUN? returns the
current parameter setting of +CFUN which controls cellular function-
alities; (ii) Set/write a parameter, e.g., AT + CFUN = 0 turns off (on)
cellular connectivity (airplane mode); (iii) Execute an action, e.g.,
ATH causes the device to hang up the current phone call; (iv) Test
for allowed parameters, e.g., AT + CFUN =? returns the allowed pa-
rameters for +CFUN command. Note that, +CFUN is a variable which
can be instantiated with different functionality (e.g., +CFUN=1 refers
to setting up the phone with full functionality).
2.2 AT Interfaces for Smartphones
AT commands can be invoked by an application running on the
smartphone, or from another host machine or peripheral device
connected through the smartphone’s USB or Bluetooth interface
(shown in Figure 1). While older generations of Android smart-
phones used to allow running AT commands from an installed
application, recent Android devices have restricted this feature to
prevent arbitrary applications from accessing device’s sensitive
resources illegitimately through AT commands. Contrary to in-
stalled applications, nearly all Android phones allow executing
AT commands over Bluetooth, whereas, for USB, devices require
minimal configuration to set up to activate this feature. Android
smartphones typically have different parsers for executing AT com-
mands over these interfaces. The use of different parsers motivates
the testing of AT interface for both USB and Bluetooth.
2.3 Issuing AT Commands Over Bluetooth and
USB
In this section, we present the details pertaining to issuing AT
commands over Bluetooth and USB.
2.3.1 Bluetooth. For executing AT commands over Bluetooth,
the injecting host machine/peripheral device needs to be paired with
ApplicationsNative	Daemons/dev/ttyABCRILDModemDriverBasebandProcessorUserSpaceKernel SpaceSmartphone/dev/ttyACM*					(Linux)			COM*(Windows)Bluetooth	ApplicationBluetooth	APIBluetoothHalInterfaceBluetoothStackApplicationLevelSystem	LevelSmartphoneATcommandInjectorHost	Machine/Bluetooth										PeripheralsVendorConfigurationCommunication							channelJNIRfcomm	socketRILDModemDriverBasebandProcessor(a)	USB(b)	Bluetooth5313 OVERVIEW OF OUR APPROACH
In this section, we first present the threat model and then for-
mally define our problem statement. Finally, we provide a high-level
overview of our proposed mechanism with a running example.
3.1 Threat Model