Certainly! Here is the optimized and refined version of your text:

---

**Stack Trace Connection in FraudDetective**

FraudDetective can connect multiple stack traces (STs) that are fragmented across different threads sharing a common thread pool. The middle example in Figure 4 illustrates this scenario. In this case, parent ST 3 is linked to ST 4 because the thread is invoked upon receiving a URL via a shared priority queue.

The third case involves the use of the `android.os.Handler` class. Developers typically use this class to schedule runnable threads, which are later invoked when messages are delivered through an `android.os.MessageQueue` instance. Since the ST of the invoked runnable thread is separate from the ST of the parent thread sending the wake-up signal, we modified the AOSP code for `android.os.MessageQueue` and `android.os.Message`. Specifically, we updated `android.os.Message` to store the ST of the thread enqueuing the message. When the message is dequeued, the ST is also delivered to the recipient thread. For this process, we modified the `enqueueMessage` and `next` functions in `android.os.MessageQueue`. The right side of Figure 4 represents this case, linking ST 5 and ST 6 via `android.os.Handler`.

The final case involves a Chromium WebView instance, which is not part of the AOSP. Android apps often instantiate a Chromium WebView via the `android.webkit.WebView` interface to load web pages with various sub-resources, such as JavaScript files, iframes, images, and more. However, the AOSP cannot capture these sub-resource loads within the WebView. To connect the ST of a thread loading a web page to the F C fetching sub-resources in Chromium WebView, we revised the Android Chromium and WebView client source code. We updated the `OnLoadResource` function in both Chromium and Android WebView to collect the URL of each loaded resource. Additionally, we modified the `loadUrl`, `goBack`, `reload`, and `postUrl` methods in `android.webkit.WebView` to capture the ST of the thread loading the web page. To map this ST to sub-resources in Chromium, we created an interface for data exchange between `android.webkit.WebViewClient` in AOSP and `chromium.WebViewContentsClientAdapter` in Chromium. This allows FraudDetective to send the ST for each sub-resource to the AOSP side and connect it to the ST that initiated the web page load via a Chrome API invocation.

**Detection of Ad Fraud Activities**

For a given pair of an F C and its F ST, FraudDetective identifies ad fraud (F). The detector checks whether the F ST originates from a forged interaction or a genuine user interaction, such as a touch or drag. A forged interaction is an artificial interaction via programmatic `dispatchTouchEvent` invocations mimicking a genuine user touch.

We designed the ad fraud detector to identify three types of ad fraud activities, as shown in Figure 5:
1. **Type-1 F**: A click URL transmission triggered by a forged user click on a WebView instance rendering ad impressions.
2. **Type-2 F**: A click URL transmission without any user interaction.
3. **Type-3 F**: An invocation of other mobile apps via a cross-app Intent, bringing them into the foreground without user interaction.

To identify a Type-1 F, FraudDetective checks all methods in the F ST for `dispatchTouchEvent` invocations. If found, it examines the source classes of the method calling this invocation. If any of these classes is not an Android internal class, FraudDetective determines that the F ST was triggered by a mimicked interaction.

For a given pair of an F C and its F ST, FraudDetective classifies the F ST as Type-2 or Type-3 if there is no user interaction event handler in the F ST. This means the F ST does not originate from any user interaction. If the F occurs via sending a click URL request, it is labeled as a Type-2 F. If the F ST sends a cross-app Intent to call other apps, it is labeled as a Type-3 F. FraudDetective collects only the last ST in the F ST when there is no user interaction.

Interestingly, we observed several ad libraries invoking not only mobile browsers (e.g., Chrome and Samsung browsers) but also a mobile app associated with the popular portal Naver. These ad libraries aim to manipulate portal search rankings by causing users to search with specific keywords in the Naver app, exploiting victims' mobile devices (§VII-B).

**Modules Responsible for Detected Ad Fraud**

FraudDetective computes an AF ST for each detected F and classifies whether the app or its embedded third-party module is responsible. It first checks if the app itself invokes the F by computing the longest common prefix between the source class that invoked the F and the app package name. If the namespace nesting of this common prefix is two or deeper (e.g., `com.musicpackage`), FraudDetective classifies the F as originating from the app itself. Otherwise, it deems the F as due to a third-party library. This heuristic can produce false reports if the app or third-party libraries obfuscate their class names via ProGuard [45].

To validate this policy, we manually confirmed whether third-party modules were indeed responsible for the fraud detected by FraudDetective in the 73 apps. However, malicious ad-serving web pages can exploit third-party modules to initiate ad fraud (§VII-A). In such cases, FraudDetective can still attribute the exploited module within the app to the observed ad fraud, aiding auditors in investigating external root causes.

For each AF ST, we extracted three classes that appear before triggering the F and checked if they were from third-party libraries using three methods:
1. Decompiling each identified class and manually checking if it matches open-sourced ad SDKs.
2. Checking if the decompiled code of each identified class appeared across the 74 apps detected by FraudDetective.
3. Confirming that each identified class did not reference any classes belonging to the app itself.

When matching classes, we compute signatures based on the argument and return types of member functions. For a given class, we extract the argument and return value types of all member functions and concatenate these types for its signature. Bakes et al. [19] suggested this signature-based method for identifying third-party libraries and claimed its resilience to common code obfuscations, including ProGuard.

**Task Scheduling and Dynamic Testing**

The Task Scheduler assigns analysis tasks to each worker, which conducts dynamic testing as described by the task. By default, a task specifies five Android APKs to test over 1,500 seconds. To reflect real user usage patterns, workers rotate apps in the foreground every 15 seconds, ensuring one in five applications is always running in the foreground while the others run in the background. Each application has 20 chances to run in the foreground for 300 seconds. This round-robin strategy helps cover realistic usage scenarios, such as background execution and multiple executions of the same app.

Each worker manages an ADB USB connection with each mobile device, monitoring and reconnecting if the connection is lost. The worker also performs dynamic testing using an Android UI Automator [9] for user interactions and ADB commands to trigger device events like battery status changes. The testing process performs six actions in random order:
- Turn off the screen, wait for two seconds, and then turn it on.
- Press the home/back button, wait for one second, and then press the recent button to go back to the application.
- Press the volume down button once, wait for one second, and then press the volume up button once. Repeat this procedure five times.
- Change the battery charging status (charge off and on) and set the value to 50%, 15%, and 5% at two-second intervals.
- Open the Android notification bar and close it in one second.
- Rotate the screen 90 degrees left, 90 degrees right, and to the upside-down landscape position at two-second intervals.

Note that Android malware often checks if the underlying OS is on an emulator and reveals its malicious behavior when it detects real users. Thus, we mimicked normal use cases using real Pixel 2 devices and invoked daily system events like volume changes and battery alerts. Shirazi et al. [68] demonstrated that users often trigger landscape mode, so we included such behaviors in our testing. To increase dynamic testing coverage, FraudDetective automatically passes system/custom consent or full-screen consent panels by pushing buttons with messages like "consent," "yes," "ok," "agree," "confirm," "go," "continue," and "start." This capability stems from FraudDetective's computation of F STs, which carry their user interaction sources, enabling the identification of F.

**Evaluation**

**Experimental Setup**

Experiments were conducted on two host machines running 64-bit Ubuntu 18.04 LTS with Intel i7 8700 (3.2GHz) CPUs and 16GB of main memory. One host implemented the Task Scheduler, distributing analysis tasks, while the other was an analysis worker connected to eight Pixel 2 devices.

**Crawled Mobile Apps**

We collected 48,172 Android apps from the Google Play Store using two crawling methods. The first method used the unofficial Google Play Python API [31] to crawl the top 100 ranked apps from each of the 35 Google Play categories, collecting 10,024 apps from April 2019 to September 2020. To cover less popular apps, we randomly sampled 38,148 additional apps from APK mirror sites [13], [14], [15]. Table II shows the popularity of the crawled mobile apps.

**Ad Fraud Detection**

FraudDetective classified each identified F as one of the three ad fraud types (§V-D). Testing 48,172 apps took approximately 36 days with eight Pixel 2 devices. Table III shows the number of detected mobile apps committing ad fraud and their fraud types. Specifically, FraudDetective found 34,232 Type-2 fraud activities, corresponding to 34,232 click URL requests triggered without user interaction. On average, FraudDetective detected 497 ad fraud requests per app.

Table III also presents the number and percentage of libraries responsible for each type of identified ad fraud. Of the 66 apps committing Type-2 ad fraud, 98.5% of the observed fraud activities stemmed from third-party libraries. Figure 6 shows the distribution of third-party libraries that intentionally or unintentionally committed ad fraud in the 73 apps, including eight apps that committed Type-3 ad fraud and the rest committing Type-2 ad fraud.

FraudDetective reported that Library A generated click URL requests without user interaction in 26 apps. Given Library A's large user base, we analyzed the reported AF STs and found a new fraud case. The web pages included `<a>` tags generating more than 40 ad click URLs, indicating an ad campaign serving ad impressions that generate click requests without user interaction. Section VII-A provides more details.

Libraries B and C intentionally committed ad fraud by creating an invisible WebView instance that loads click URLs, sending click requests to various ad services without user interaction. Libraries D, G, J, and K also intentionally committed ad fraud by generating ad click requests using similar methods. Further details are provided in Section VII-B.

---

This version should be more clear, coherent, and professional.