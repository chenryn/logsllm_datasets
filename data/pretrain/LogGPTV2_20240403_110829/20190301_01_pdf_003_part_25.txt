from file; w - write to file.
max_linesize
Maximum size of a line in characters. In read mode, an exception is thrown if an
attempt is made to read a line exceeding max_linesize. In write and append
modes, an exception is thrown if an attempt is made to write a line exceeding
max_linesize. The end-of-line character(s) are not included in determining if
the maximum line size is exceeded. This behavior is not compatible with Oracle
databases; Oracle does count the end-of-line character(s).
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 276
Database Compatibility for Oracle® Developers
Built-in Package Guide
filetype
Variable of type FILE_TYPE containing the file handle of the opened file.
3.20.7 FREMOVE
The FREMOVE procedure removes a file from the system.
FREMOVE(location VARCHAR2, filename VARCHAR2)
An exception is thrown if the file to be removed does not exist.
Parameters
location
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
containing the file to be removed.
filename
Name of the file to be removed.
Examples
The following removes file empfile.csv.
DECLARE
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
BEGIN
UTL_FILE.FREMOVE(v_directory,v_filename);
DBMS_OUTPUT.PUT_LINE('Removed file: ' || v_filename);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
Removed file: empfile.csv
3.20.8 FRENAME
The FRENAME procedure renames a given file. This effectively moves a file from one
location to another.
FRENAME(location VARCHAR2, filename VARCHAR2,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 277
Database Compatibility for Oracle® Developers
Built-in Package Guide
dest_dir VARCHAR2, dest_file VARCHAR2,
[ overwrite BOOLEAN ])
Parameters
location
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
containing the file to be renamed.
filename
Name of the source file to be renamed.
dest_dir
Directory name, as stored in pg_catalog.edb_dir.dirname, of the directory
to which the renamed file is to exist.
dest_file
New name of the original file.
overwrite
Replaces any existing file named dest_file in dest_dir if set to TRUE,
otherwise an exception is thrown if set to FALSE. This is the default.
Examples
The following renames a file, C:\TEMP\EMPDIR\empfile.csv, containing a comma-
delimited list of employees from the emp table. The renamed file,
C:\TEMP\NEWDIR\newemp.csv, is then listed.
CREATE DIRECTORY "newdir" AS 'C:/TEMP/NEWDIR';
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_src_dir VARCHAR2(50) := 'empdir';
v_src_file VARCHAR2(20) := 'empfile.csv';
v_dest_dir VARCHAR2(50) := 'newdir';
v_dest_file VARCHAR2(50) := 'newemp.csv';
v_replace BOOLEAN := FALSE;
v_emprec VARCHAR2(120);
v_count INTEGER := 0;
BEGIN
UTL_FILE.FRENAME(v_src_dir,v_src_file,v_dest_dir,
v_dest_file,v_replace);
v_empfile := UTL_FILE.FOPEN(v_dest_dir,v_dest_file,'r');
DBMS_OUTPUT.PUT_LINE('The following is the renamed file, ''' ||
v_dest_file || '''');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 278
Database Compatibility for Oracle® Developers
Built-in Package Guide
LOOP
UTL_FILE.GET_LINE(v_empfile,v_emprec);
DBMS_OUTPUT.PUT_LINE(v_emprec);
v_count := v_count + 1;
END LOOP;
EXCEPTION
WHEN NO_DATA_FOUND THEN
UTL_FILE.FCLOSE(v_empfile);
DBMS_OUTPUT.PUT_LINE(v_count || ' records retrieved');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
The following is the renamed file, 'newemp.csv'
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
14 records retrieved
3.20.9 GET_LINE
The GET_LINE procedure reads a line of text from a given file up to, but not including
the end-of-line terminator. A NO_DATA_FOUND exception is thrown when there are no
more lines to read.
GET_LINE(file FILE_TYPE, buffer OUT VARCHAR2)
Parameters
file
Variable of type FILE_TYPE containing the file handle of the opened file.
buffer
Variable to receive a line from the file.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 279
Database Compatibility for Oracle® Developers
Built-in Package Guide
Examples
The following anonymous block reads through and displays the records in file
empfile.csv.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
v_emprec VARCHAR2(120);
v_count INTEGER := 0;
BEGIN
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'r');
LOOP
UTL_FILE.GET_LINE(v_empfile,v_emprec);
DBMS_OUTPUT.PUT_LINE(v_emprec);
v_count := v_count + 1;
END LOOP;
EXCEPTION
WHEN NO_DATA_FOUND THEN
UTL_FILE.FCLOSE(v_empfile);
DBMS_OUTPUT.PUT_LINE('End of file ' || v_filename || ' - ' ||
v_count || ' records retrieved');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
End of file empfile.csv - 14 records retrieved
3.20.10 IS_OPEN
The IS_OPEN function determines whether or not the given file is open.
status BOOLEAN IS_OPEN(file FILE_TYPE)
Parameters
file
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 280
Database Compatibility for Oracle® Developers
Built-in Package Guide
Variable of type FILE_TYPE containing the file handle of the file to be tested.
status
TRUE if the given file is open, FALSE otherwise.
3.20.11 NEW_LINE
The NEW_LINE procedure writes an end-of-line character sequence in the file.
NEW_LINE(file FILE_TYPE [, lines INTEGER ])
Parameters
file
Variable of type FILE_TYPE containing the file handle of the file to which end-
of-line character sequences are to be written.
lines
Number of end-of-line character sequences to be written. The default is one.
Examples
A file containing a double-spaced list of employee records is written.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'w');
FOR i IN emp_cur LOOP
UTL_FILE.PUT(v_empfile,i.empno);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.ename);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.job);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.mgr);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.hiredate);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.sal);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.comm);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.deptno);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 281
Database Compatibility for Oracle® Developers
Built-in Package Guide
UTL_FILE.NEW_LINE(v_empfile,2);
END LOOP;
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_empfile);
END;
Created file: empfile.csv
This file is then displayed:
C:\TEMP\EMPDIR>TYPE empfile.csv
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
3.20.12 PUT
The PUT procedure writes a string to the given file. No end-of-line character sequence is
written at the end of the string. Use the NEW_LINE procedure to add an end-of-line
character sequence.
PUT(file FILE_TYPE, buffer { DATE | NUMBER | TIMESTAMP |
VARCHAR2 })
Parameters
file
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 282
Database Compatibility for Oracle® Developers
Built-in Package Guide
Variable of type FILE_TYPE containing the file handle of the file to which the
given string is to be written.
buffer
Text to be written to the specified file.
Examples
The following example uses the PUT procedure to create a comma-delimited file of
employees from the emp table.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'w');
FOR i IN emp_cur LOOP
UTL_FILE.PUT(v_empfile,i.empno);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.ename);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.job);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.mgr);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.hiredate);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.sal);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.comm);
UTL_FILE.PUT(v_empfile,',');
UTL_FILE.PUT(v_empfile,i.deptno);
UTL_FILE.NEW_LINE(v_empfile);
END LOOP;
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_empfile);
END;
Created file: empfile.csv
The following is the contents of empfile.csv created above:
C:\TEMP\EMPDIR>TYPE empfile.csv
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 283
Database Compatibility for Oracle® Developers
Built-in Package Guide
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
3.20.13 PUT_LINE
The PUT_LINE procedure writes a single line to the given file including an end-of-line
character sequence.
PUT_LINE(file FILE_TYPE,
buffer {DATE|NUMBER|TIMESTAMP|VARCHAR2})
Parameters
file
Variable of type FILE_TYPE containing the file handle of the file to which the
given line is to be written.
buffer
Text to be written to the specified file.
Examples
The following example uses the PUT_LINE procedure to create a comma-delimited file of
employees from the emp table.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
v_emprec VARCHAR2(120);
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'w');
FOR i IN emp_cur LOOP
v_emprec := i.empno || ',' || i.ename || ',' || i.job || ',' ||
NVL(LTRIM(TO_CHAR(i.mgr,'9999')),'') || ',' || i.hiredate ||
',' || i.sal || ',' ||
NVL(LTRIM(TO_CHAR(i.comm,'9990.99')),'') || ',' || i.deptno;
UTL_FILE.PUT_LINE(v_empfile,v_emprec);
END LOOP;
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_empfile);
END;
The following is the contents of empfile.csv created above:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 284
Database Compatibility for Oracle® Developers
Built-in Package Guide
C:\TEMP\EMPDIR>TYPE empfile.csv
7369,SMITH,CLERK,7902,17-DEC-80 00:00:00,800.00,,20
7499,ALLEN,SALESMAN,7698,20-FEB-81 00:00:00,1600.00,300.00,30
7521,WARD,SALESMAN,7698,22-FEB-81 00:00:00,1250.00,500.00,30
7566,JONES,MANAGER,7839,02-APR-81 00:00:00,2975.00,,20
7654,MARTIN,SALESMAN,7698,28-SEP-81 00:00:00,1250.00,1400.00,30
7698,BLAKE,MANAGER,7839,01-MAY-81 00:00:00,2850.00,,30
7782,CLARK,MANAGER,7839,09-JUN-81 00:00:00,2450.00,,10
7788,SCOTT,ANALYST,7566,19-APR-87 00:00:00,3000.00,,20
7839,KING,PRESIDENT,,17-NOV-81 00:00:00,5000.00,,10
7844,TURNER,SALESMAN,7698,08-SEP-81 00:00:00,1500.00,0.00,30
7876,ADAMS,CLERK,7788,23-MAY-87 00:00:00,1100.00,,20
7900,JAMES,CLERK,7698,03-DEC-81 00:00:00,950.00,,30
7902,FORD,ANALYST,7566,03-DEC-81 00:00:00,3000.00,,20
7934,MILLER,CLERK,7782,23-JAN-82 00:00:00,1300.00,,10
3.20.14 PUTF
The PUTF procedure writes a formatted string to the given file.
PUTF(file FILE_TYPE, format VARCHAR2 [, arg1 VARCHAR2]
[, ...])
Parameters
file
Variable of type FILE_TYPE containing the file handle of the file to which the
formatted line is to be written.
format
String to format the text written to the file. The special character sequence, %s, is
substituted by the value of arg. The special character sequence, \n, indicates a
new line. Note, however, in Advanced Server, a new line character must be
specified with two consecutive backslashes instead of one - \\n. This
characteristic is not compatible with Oracle databases.
arg1
Up to five arguments, arg1,...arg5, to be substituted in the format string for each
occurrence of %s. The first arg is substituted for the first occurrence of %s, the
second arg is substituted for the second occurrence of %s, etc.
Examples
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 285
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following anonymous block produces formatted output containing data from the emp
table. Note the use of the E literal syntax and double backslashes for the new line
character sequence in the format string which are not compatible with Oracle databases.
DECLARE
v_empfile UTL_FILE.FILE_TYPE;
v_directory VARCHAR2(50) := 'empdir';
v_filename VARCHAR2(20) := 'empfile.csv';
v_format VARCHAR2(200);
CURSOR emp_cur IS SELECT * FROM emp ORDER BY empno;
BEGIN
v_format := E'%s %s, %s\\nSalary: $%s Commission: $%s\\n\\n';
v_empfile := UTL_FILE.FOPEN(v_directory,v_filename,'w');
FOR i IN emp_cur LOOP
UTL_FILE.PUTF(v_empfile,v_format,i.empno,i.ename,i.job,i.sal,
NVL(i.comm,0));
END LOOP;
DBMS_OUTPUT.PUT_LINE('Created file: ' || v_filename);
UTL_FILE.FCLOSE(v_empfile);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
DBMS_OUTPUT.PUT_LINE('SQLCODE: ' || SQLCODE);
END;
Created file: empfile.csv
The following is the contents of empfile.csv created above:
C:\TEMP\EMPDIR>TYPE empfile.csv
7369 SMITH, CLERK
Salary: $800.00 Commission: $0
7499 ALLEN, SALESMAN
Salary: $1600.00 Commission: $300.00