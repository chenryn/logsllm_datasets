(cid:104)type,payload,rate(cid:105)
(cid:104)CPU, 2M, 10(cid:105)
(cid:104)CPU, 0.15M, 30(cid:105)
(cid:104)CPU, 3M, 0(cid:105)
(cid:104)Mem, 50M, 0(cid:105)
(cid:104)CPU, 0.04M, 30(cid:105)
(cid:104)CPU, 1.5M, 200(cid:105)
(cid:104)CPU, 5M, 10(cid:105)
(cid:104)CPU, 0.04M, 30(cid:105)
(cid:104)CPU, 0.6M, 200(cid:105)
Services
ServiceX1
ServiceX2
ServiceX3
ServiceX5
ServiceX4
ServiceX6
ServiceX7
ServiceX9
ServiceX8
Time
16×
3.8×
30×
10×
4×
5×
15×
2.1×
110×
Gas*
13
0.2
19.5 (50)
5000
0.3
10 (10)
32.5
0.3 (5)
1.5 (1.5)
even if they set a very low Gas limit, like 0.2 block gas
(which by the way is unlikely because of interference with
service usability as will be discussed in § VI), it is still not
enough to defend against DoERS attacks. ServiceX3 can be
effectively attacked at a Gas limit as low as 19.5 block gas,
which is much lower than their current Gas limit (50 block
gas). ServiceX6 can be attacked with their current Gas limit (of
11
0102030405060Timeline (second)0.00.10.20.30.40.5Response time (second)!"#$###%#&#"’$($"$)$!$$!!$!#$!’$!%$!*$#$%$&$"$!$$!#$+,,-./01-,203421052.6789:-;203?!$@’9A25467520,=B203B594-;+.56?+9@4=(;:1(3+#5%A+.57!+9@4=(;:1(3+%A+.75!+9@4No timeoutTimeoutTimeout5305580105130155180205230Payload size (10^6)02468Attack response time (second)Request returned successTimeout thrownof 0.65 block gas, the DoERS attacker can cause synchroniza-
tion slowdown by 91%, at the rate of 150 RPCs per second.
Note that 0.65 block gas is very restrictive and is lower than
any Gas limits we observe on all real RPC services and peers.
In the ﬁgure, each point is labeled by whether a timeout is
triggered during the test. It can be seen the DoERS attack of
parameters (cid:104)CPU, 0.1M, 100(cid:105) does not trigger timeout yet still
causes a 50% synchronization slowdown.
The second experiment shows how timeout can be effec-
tively evaded by exhaustMem on nodes without Gas limits;
recall the attack strategy C1 in § IV-G. In this experiment,
we conduct a series of tests, each of which sends a single
exhaustMem request with increasing payload sizes. We
report the response time of the attack request as in Figure 11b.
When the payload size increases, the response time grows,
ﬁrst without timeout (in the red line) and then with timeout
(in the blue line). It is clear that after timeout occurs, in-
creasing payload sizes still leads to the increase of response
time. This implies that the exhaustMem-based DoERS can
essentially evade the timeout and increases payloads to crash
the machine. The severe damage is applicable to the 348 public
RPC nodes and the ﬁve RPC services that do not conﬁgure
Gas limits. The explanation for this attack is the following:
exhaustMem contains an EVM instruction CODECOPY that
runs a loop inside EVM to allocate memory of arbitrary length.
Executing the instruction is atomic and can not be interrupted
in between by a timeout; throwing a timeout has to wait until
the completion of the instruction.
C. Evaluating DApp Response Time under DoERS
from dappradar.com7, 20 (with combined 201, 500 active
users in 30 days) use metamask. So we focus on the response
time for metamask-based RPC clients.
Speciﬁcally, our experiment is based upon a browser run-
ning a sample DApp that we develop on top of meta-
mask. The sample DApp is a web button to get the latest
block from the Ethereum network, through an RPC query
eth_blockNumber. Here, metamask is conﬁgured to con-
nect to a sample RPC service, namely ServiceX9.
Also, we run a javascript code that issues a metamask query
every X seconds. We ﬁrst set X = 25 seconds, since RPC
results cached by metamask expire every 20 seconds (based
on our experiment results). In the experiment, we measure and
compare the response times of the “getBlock” button with and
without a DoERS attack on the RPC node, as illustrated in
Figure 12a, under the following parameters: 200 requests per
second and a payload of 8∗105. As we can see from the ﬁgure,
the response time perceived by the client becomes signiﬁcantly
longer in the presence of the attack, causing a 10× slowdown.
We present the screenshots of our DApp with/without the
DoERS attack in Figure 13 which are taken from the full
video demo shared on our public website.8
We then vary the interval X between 5 seconds and 50
seconds. We rerun the above experiment for three times,
and report the average response time and their variance in
Figure 12b. The result shows a shorter average response time
can be observed if the internal is below 20 seconds, which
matches the conjectured effect of result caching in metamask.
VI. COUNTERMEASURE
A. Analyzing Known Countermeasures
(a) DApp response time w/wo attacks
(cid:104)CPU, 800K, 200(cid:105) against ServiceX9
(b) DApp response time w/wo attacks
(cid:104)CPU, 800K, 200(cid:105) against ServiceX9
Fig. 12: DoERS attacks on a metamask-based DApp
Our objective is to evaluate the impacts
of DoERS on real-world DApps. Recall
Figure 3; a typical DApp architecture in-
cludes user-facing web pages, wallet clients
running as browser extensions such as
metamask [35],
the RPC service it uses
and a remote blockchain network. It
is
known that most DApp webpages rely on
metamask and third-party RPC services to
communicate with Ethereum [35], which
has also been conﬁrmed in a simple mea-
surement study we conduct: Among the top
26 DApps (in terms of active user number)
1) Effectiveness of Gas Limits: In the Ethereum commu-
nity, Gas limits are provided as the primary defense to denial
of RPC service. Both Geth and Parity provide conﬁguration
knobs to set the Gas limit on a RPC instance. Ideally, the
service provider should set a Gas limit low enough to protect
their nodes from DoS attacks.
In practice, ﬁnding a “meaningful” value for the Gas limit
is non-trivial if not impossible at all. There are two restric-
tions/challenges: 1) Setting a low Gas limit could negatively
affect the service usability. For instance, a benign DApp wants
to send a Google BigQuery-style RPC [3] to the blockchain
service which would be blocked by a low Gas limit. This inten-
tion between a security-concerning service provider who wants
to set a lower Gas limit and a usability-desiring client rooting
for a higher Gas limit is real and has been observed [19]. In the
end, the service provider often puts customer experience over
the service security, by increasing the Gas limit, such as from
2 to 10 block gas in [19]. 2) More fundamentally, blockchain
RPCs supporting Turing-complete programs cause asymmetry
of computing cost between the client side and service side.
That is, in a usable setup, the client-side cost in sending a
Fig. 13: Screen-
shot of DApp
7https://dappradar.com/rankings/protocol/eth
8https://sites.google.com/view/doersdemo/
12
04284126168Timeline (second)0.00.51.01.52.02.5Response time (millisecond)No attackUnder attack05101520253035404550Interval (second)0.00.51.01.52.02.5Response time (second)RPC request is supposed to much lower than the server-side
cost of executing the smart contract. The “perfect” DoERS
security will entail equating the client-side cost and server-
side cost, which will lead to very restrictive loops (e.g., fewer
than ten iterations) and would be detrimental to the service
usability.
Empirically,
the table in Figure I shows mixed results:
On the one hand, some services, notably ServiceX2 and
ServiceX4, can be effectively attacked even if the Gas limits
are set as low as 0.2 and 0.3 block gas. Let alone that a
low Gas limit is unlikely to be deployed in practice due to
the impacts to service usability. Our experiments with local
nodes described in § V-B also suggest there are effective attack
parameters even with low Gas limits as 0.65 block gas. On the
other hand, there are services which could mitigate DoERS
vulnerability by deploying a reasonably low Gas limit. For
instance, if ServiceX5 deploys the Gas limit of 10 block gas
(which is the case after our disclosure of the problem to them
in May, 2020), it would make the DoERS harder to succeed.
We believe setting a Gas limit is necessary but not sufﬁcient;
in other words, complementary defensive measures to Gas
limiting are needed to provide effective DoERS protection.
2) Contract Banning and Zero-Ether DoERS: Recall that
the ﬁrst step in DoERS (in § III) requires the attacker to
deploy a smart contract at her own cost. From our experience
with ServiceX7, a service provider who monitors the RPC
performance can correlate the latency spikes to a malicious
smart contract; they can take measures to ban all subsequent
RPCs accessing the malicious contract. This will force the
attacker to deploy the DoERS-C smart contract to a new
address which could increase her cost in Ether.
We propose a zero-Ether DoERS that incurs zero monetary
cost
to the attacker, as a technique to evade a contract-
banning service provider. The zero-Ether DoERS exploits the
“state override” extension of eth_call in the recent Geth
release [14], [25]. This feature allows a client to upload a
smart contract at the invocation time of eth_call, instead
of using a separate transaction. Speciﬁcally, the eth_call
request carries the bytecode of a smart contract in its “state
override” argument and invoke to run a certain function in the
bytecode on the RPC node.
With this capability, the attacker can mount the DoERS
attack in one step without paying any Ether. The attack works
by the attacker sending a crafted eth_call request that
includes the code of exhaustXX in its “state override” object
and specify the invoked function to be exhaustXX. We have
tested this zero-Ether DoERS attack on our local RPC node
running Geth v1.9.2 [25].
B. Proposed Countermeasures
The root cause of DoERS is an open-membership RPC ser-
vice that allows for free execution of arbitrary smart-contract
programs on its peers shared by different DApps. Intuitively,
“falsifying” any condition in this root cause should harden
the security against DoERS attacks, such as removing open-
membership (e.g., by authenticating DApp clients based on
13
their true identities), charging the contract execution triggered
by eth_call, limiting the computation expressiveness (e.g.,
prohibiting loops) and avoiding any sharing of a RPC node
among DApps. Along these design directions, we encounter
a fundamental trade-off between DoERS security and service
usability. For instance, the service provider can simply refuse
to admit any eth_call triggering to run loops, which,
while eliminating DoERS, comes at the expense of not being
able to serve the benign DApps that do rely on loops; there
are real-world smart contracts like this, such as ﬁnancial
analysis [20]. Also, requiring DApp clients to present real-
world identities would be impractical or against the design of
blockchain information transparency. We believe eliminating
the DoERS vulnerability without affecting service usability is
fundamentally difﬁcult, if not impossible at all. Beyond simply
Gas limiting, we propose a variety of mitigation techniques
without dropping service usability, by performance anomaly
detection, requiring security deposit, secure load balancing,
atomic EVM execution (as will be described next), and other
feasible defenses such as performance isolation. These tech-
niques can be engineered in a RPC service at the layers of
both service frontend and the underlying EVM.
Unpredictable yet consistency-preserving load balanc-
ing: We design a secure and practical RPC load balancer that
serves two purposes. First, it is expected to preserve the order
between dependent transactions, which is important to ensure
the correctness and fairness of the target DApp’s operations.
Speciﬁcally, two transactions issued sequentially from the RPC
client need to keep that order in the blockchain’s ﬁnal trans-
action history. For instance, for an ERC20 token contract, the
call approve needs to be followed by transferFrom, or
otherwise, the execution will fail. Second, the load balancer’s
behavior should be unpredictable in the sense that it inde-
pendently forwards different incoming requests to randomly
selected backend peers. Any determinism in load balancing
can be exploited to direct the DoERS payloads to a few victim
peers, allowing the attacker to overload them at a low cost.
However, preserving cross-request consistency could be
in conﬂict with achieving load-balancing unpredictability.
For instance, independent assignment of the approve and
transferFrom calls could cause the calls to be handled
by different backend peers, which will send them indepen-
dently to miners, rendering the order of their reception on
the miners hard to maintain. Note that since approve and
transferFrom are transactions issued from different sender
accounts, Ethereum’s builtin nonce mechanism does not apply
here. Our research shows that the load balancers in existing
RPC services are designed to favor consistency preservation
(DApp semantics) over unpredictability (§ IV-B).
We believe that this challenge is fundamentally caused by
the use of the a single balancer to process both transactions
(write to a block chain) and RPC queries (read from the
chain). The former requires cross-request consistency while
the latter does not. Since DoERS targets the RPC queries,
we could simply separate them from transaction requests,
through two load balancers, to protect the RPC peers through
unpredictable assignment of the queries. More speciﬁcally, one
balancer handles only transactions while the other forwards
only RPC queries (including the eth_call’s), independently
and randomly selecting a peer from the RPC service for each
query (through a uniform distribution). To this end, the load
balancer can internally maintain a secret true-random number
or the current workload that decides the destination backend
peer a RPC query should be forwarded to. In the meantime,
the transaction-only balancer distributes the requests under the
constraint of preserving consistency, just like what has been
done by ServiceX6 today (transactions with temporal locality
given to the same backend peer).
A limitation of this dual-balancer solution is that it does
not ensure transaction-query consistency: that is, the order be-
tween a transaction and a RPC query related to the transaction
may not be preserved. One way to address this issue could
be simply handing over such a transaction-query pair to the
transaction balancer, so they can be assigned to the same peer
and propagated to the blockchain in the right order.
Performance anomaly detection plus security deposit:
As we analyzed, simple performance monitoring with contract
banning can be evaded by our zero-Ether DoERS. We propose
a countermeasure against the zero-Ether DoERS. The key idea
is for the service provider to require security deposit from any
potential clients, such that a benign client’s deposit will be
refunded and a malicious client’s deposit will be conﬁscated
to discourage any further attacks. In the proposed framework,
1) the service provider only processes RPCs from a client
having made security deposits. 2) The service provider monitor
the performance and detect DoERS requests as performance
anomalies. 3) After identifying attackers, the service provider
conﬁscates deposits from attackers and refunds benign clients.
The success of the countermeasure hinges on whether
the performance monitor can distinguish malicious DoERS
requests from benign RPCs. Here, our assumption is that
a DoERS attacker who wants to keep her cost low and to
evade existing DDoS protections has to make each malicious
eth_call cause a signiﬁcant amount of computations much
more than a benign RPC.
Interruptible EVM instructions: The success of single-
request DoERS can be attributed to atomic EVM instructions
that timeout cannot interrupt. To avoid this attack vector, EVM
should allow the “long-lasting” execution of a single instruc-
tion (e.g., CODECOPY in exhaustMem) to be interrupted
by timeout. This may require engineering to change EVM’s
instruction scheduling algorithm and to enforce the maximal
memory size allocated by a single CODECOPY call.
VII. RELATED WORKS
Blockchain DoS security: Since the advent, public
blockchains have been a target of DoS attacks. A variety