### Optimized Text

A monitoring tool may be an acceptable approach for single experiments, provided that a complete estimation of the uncertainty in the experimental results is available (assuming that the intrusiveness of the monitoring tool has already been evaluated).

**Resolution Estimation:**
Resolution is typically the easiest parameter to estimate. However, it is often overlooked, likely because it is considered less important compared to intrusiveness and uncertainty. For example, PLATO [24] and Neko/NekoStat [15], [16] use Java system calls to collect timestamps. This means the resolution of the system is limited by the granularity of the Java clock, which is usually coarser than the system clock.

**Repeatability:**
Repeatability is another critical aspect. The difficulty in achieving satisfactory repeatability has been acknowledged in the experiments on computer systems described in [22], even though the term "repeatability" is not explicitly used. The authors recognize that, due to the limitations in accurate timestamping, multiple executions of the same run may not yield identical results. This is because the event (e.g., an injected fault) may not occur at the exact intended time. This explains why a second execution of the same run might not reproduce a catastrophic incident that occurred in the first execution. Repeatability issues are also discussed in XCEPTION [7] and MESSALINE [11].

In XCEPTION, it is noted that good results are achieved with spatial fault triggering methods, where a fault is injected when the program accesses a specific memory address. Temporal trigger methods, however, suffer from execution time uncertainties, a common limitation among all tools. In MESSALINE, it is observed that performing repeatable experiments in distributed systems is particularly challenging. The type of architecture significantly impacts the difficulty of setting up a reliable testbed and the repeatability of experiments.

**Java-Based Tools:**
Some Java-based works, such as Neko/NekoStat, GOOFI, and the Java implementation of the PLATO total ordering protocol, are briefly considered. Java's inability to predictably control the temporal execution of applications, primarily due to unpredictable latencies introduced by the garbage collector, limits its effectiveness. Consequently, measurement tools written in Java often face significant intrusiveness problems. In [21], a comparison of the dependability of different real-time Java virtual machines in the context of spacecraft software is made. Although the authors are aware of the challenges in Java and use Real-Time Java [25], no information about measurement properties is provided.

In [20], the behavior of a real-time system running under operating systems subject to soft errors is studied. While real-time issues are recognized, no estimation of the quality and trustworthiness of the results is provided.

**Comparison of Measurement Results:**
Comparing measurement results from different tools or experiments is rarely addressed in terms of compatibility, as introduced in Section 2. While expressing measurement results as intervals of values is common in simulation studies, it is less so in experimental dependability evaluations (with few exceptions like DBENCH). Compatibility comparisons can only be made after evaluating uncertainty.

**Summary:**
This brief survey on tools and experiments developed to assess dependability properties reveals that there is some awareness of metrology properties, but the approaches are often intuitive and incomplete. While intrusiveness is widely recognized, efforts to estimate uncertainty and determine solid bounds on the reliability and trustworthiness of the measures collected with these tools are rare. Experiments pay less attention to these themes, but this does not mean they are poorly designed or that the measurement systems are improperly constructed. More detailed explanations of the measurement systems should be provided to understand the associated uncertainty.

### Conclusion
This paper emphasizes the importance of approaching quantitative evaluations of dependability attributes and metrics from a metrological perspective. The fundamental observation is that experimental quantitative evaluations of dependability attributes are measurements, and the tools used to obtain them are measuring instruments. However, our review of relevant literature shows that these evaluations are not recognized as measurements, and their results are not qualified as they should be. Additionally, the tools are not characterized in the same way as other measurement instruments, i.e., their fundamental metrological properties are not investigated.

Applying rigorous metrological methodologies would enhance the scientific rigor and trustworthiness of the obtained measures and allow for the comparison of dependability measures collected by various tools and experiments according to recognized criteria. After presenting the fundamentals of measurement theory, the paper focuses on the measurement properties of major interest for dependability. It shows that the most relevant properties vary depending on the scenario (e.g., in distributed systems, resolution is often less critical than in centralized systems). The analysis of several works in the literature reveals that while there is some awareness of metrology properties, the approaches are often intuitive and incomplete. Intrusiveness is frequently recognized, but efforts to estimate uncertainty are rare. More detailed explanations of the measurement systems used in experiments are essential for estimating uncertainty and gaining confidence in the dependability measures.

### Recommendations
To improve the measurement of dependability attributes and properties, we recommend the following guidelines:
- Clearly and univocally define the measurand.
- Identify and evaluate all sources of uncertainty.
- Evaluate key attributes such as intrusiveness, resolution, and repeatability.
- Estimate measurement uncertainty according to the Guide to the Expression of Uncertainty in Measurement (GUM).
- Compare measurement results from different tools/experiments in terms of compatibility.

### Acknowledgements
This work was partially supported by the European Community through the projects IST-4-027513 (CRUTIAL - Critical Utility InfrastructurAL Resilience) and IST-FP6-STREP-26979 (HIDENETS - HIghly DEpendable ip-based NETworks and Services).

### References
[References listed here, formatted as in the original text.]