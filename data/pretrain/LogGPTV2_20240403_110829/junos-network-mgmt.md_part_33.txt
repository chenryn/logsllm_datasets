notifications. Informs are supported only on devices that support SNMP version 3 (SNMPv3)
configuration.
Trap Queuing
Junos OS supports trap queuing to ensure that traps are not lost because of the temporary unavailability
of routes. Two types of queues, destination queues and a throttle queue, are formed to ensure the
delivery of traps and control the trap traffic.
375
NOTE: You cannot configure trap queueing in Junos OS. You cannot view information about trap
queues except for what is provided in the system logs.
Junos OS forms a destination queue when a trap to a particular destination is returned because the host
is not reachable, and adds the subsequent traps to the same destination to the queue. Junos OS checks
for the availability of routes every 30 seconds and sends the traps from the destination queue in a
round-robin fashion.
If the trap delivery fails, the trap is added back to the queue, and the delivery attempt counter and the
next delivery attempt timer for the queue are reset. Subsequent attempts occur at progressive intervals
of 1 minute, 2 minutes, 4 minutes, and 8 minutes. The maximum delay between the attempts is 8
minutes, and the maximum number of attempts is 10. After 10 unsuccessful attempts, the destination
queue and all the traps in the queue are deleted.
Junos OS also has a throttle mechanism to control the number of traps (throttle threshold; default value
of 500 traps) sent during a particular time period (throttle interval; default of 5 seconds) and to ensure
consistency in trap traffic, especially when a large number of traps are generated because of interface
status changes. The throttle interval period begins when the first trap arrives at the throttle. All traps
within the trap threshold are processed, and the traps beyond the threshold limit are queued.
The maximum size of trap queues—that is, throttle queue and destination queue put together—is
40,000. However, on EX Series Ethernet Switches, the maximum size of the trap queue is 1,000. The
maximum size of any one queue is 20,000 for devices other than EX Series Switches. On EX Series
Switches, the maximum size of one queue is 500. When a trap is added to the throttle queue, or if the
throttle queue has exceeded the maximum size, the trap is added back on top of the destination queue,
and all subsequent attempts from the destination queue are stopped for a 30-second period, after which
the destination queue restarts sending the traps.
Loading MIB Files to a Network Management System
For your network management system (NMS) to identify and understand the MIB objects used by the
Junos OS, you must first load the MIB files to your NMS using a MIB compiler. A MIB compiler is a
utility that parses the MIB information such as the MIB object name, IDs, and data type for the NMS.
You can download the Junos MIB package from the Junos OS Enterprise MIBs index at https://
www.juniper.net/documentation/en_US/release-independent/junos/mibs/mibs.html . The Junos MIB
package is available in .zip and .tar packages. You can download the appropriate format based on your
requirements.
376
The Junos MIB package contains two folders: StandardMibs and JuniperMibs. The StandardMibs folder
contains the standard MIBs and RFCs that are supported on devices running the Junos OS, whereas the
JuniperMibs folder contains the Juniper Networks enterprise-specific MIBs.
To load MIB files that are required for managing and monitoring devices running the Junos OS:
1. Go to the SNMP MIB Explorer Download page for Juniper Networks SNMP MIB packages (SNMP
MIB Explorer).
2. Click the TAR or ZIP link under the appropriate release heading to download the Junos MIB package
for that release.
3. Decompress the file (.tar or .zip) using an appropriate utility.
4. Load the standard MIB files (from the StandardMibs folder) in the following order:
NOTE: Some of the MIB compilers that are commonly used have the standard MIBs
preloaded on them. If the standard MIBs are already loaded on the MIB compiler that you are
using, skip this step and proceed to Step 7.
a. mib-SNMPv2-SMI.txt
b. mib-SNMPv2-TC.txt
c. mib-IANAifType-MIB.txt
d. mib-IANA-RTPROTO-MIB.txt
e. mib-rfc1907.txt
f. mib-rfc4293.txt
g. mib-rfc2012a.txt
h. mib-rfc2013a.txt
i. mib-rfc2571.txt
j. mib-rfc2863a.txt
k. mib-rfc4001.txt
5. Load the remaining standard MIB files.
NOTE: You must follow the order specified in this procedure. This is to ensure that you load
standard MIBs before the enterprise-specific MIBs. There might be dependencies that require
377
a particular MIB to be present on the compiler before loading some other MIB. You can find
such dependencies listed in the IMPORT section of the MIB file.
6. Load the Juniper Networks enterprise-specific SMI MIB, mib-jnx-smi.txt, and the following optional
SMI MIBs based on your requirements:
• mib-jnx-js-smi.txt—(Optional) For Juniper Security MIB tree objects
• mib-jnx-ex-smi.txt—(Optional) For EX Series Ethernet Switches
• mib-jnx-exp.txt—(Recommended) For Juniper Networks experimental MIB objects
• mib-jnx-cos.txt
• mib-jnx-mimstp.txt
• mib-jnx-l2cp-features.txt
• mib-jnx-mpls-ldp.txt
• mib-jnx-sp.txt
• mib-jnx-ipforward.txt
• mib-jnx-jsysmon.txt
• mib-jnx-vpn.txt
• mib-jnx-pwtdm.txt
• mib-jnx-pwatm.txt
• mib-jnx-mbg-smi.txt
• mib-jnx-vpls-generic.txt
• mib-jnx-vpls-ldp.txt
• mib-jnx-vpls-bgp.txt
• mib-jnx-mobile-gateways.txt
• mib-jnx-optif.txt
• mib-jnx-bl.txt
• mib-jnx-gen-set.txt
• mib-jnx-if-extensions.txt
378
• mib-jnx-if-accounting.txt
• mib-jnx-alarm.txt
• mib-jnx-dot3oam-capability.txt
• mib-jnx-ipmcast-capability.txt
7. Load the remaining enterprise-specific MIBs from the JuniperMibs folder.
TIP: While loading a MIB file, if the compiler returns an error message saying that any of the
objects are undefined, open the MIB file using a text editor and ensure that all the MIB files
listed in the IMPORT section are loaded on the compiler. If any of the MIB files listed in the
IMPORT section are not loaded on the compiler, load that MIB file, and then try to load the MIB
file that failed to load.
For example, the enterprise-specific PING MIB, mib-jnx-ping.txt, has dependencies on RFC
2925, DiSMAN-PING-MIB, mib-rfc2925a.txt. If you try to load mib-jnx-ping.txt before loading
mib-rfc2925a.txt, the compiler returns an error message saying that certain objects in mib-jnx-
ping.txt are undefined. Load mib-rfc2925a.txt, and then try to load mib-jnx-ping.txt. The
enterprise-specific PING MIB, mib-jnx-ping.txt, then loads without any issue.
Understand the Integrated Local Management Interface
The Integrated Local Management Interface (ILMI) provides a mechanism for Asynchronous Transfer
Mode (ATM)-attached devices, such as hosts, routers, and ATM switches, to transfer management
information. ILMI provides a bidirectional exchange of management information between two ATM
interfaces across a physical connection. ILMI information is exchanged over a direct encapsulation of
SNMP version 1 (RFC 1157, A Simple Network Management Protocol) over ATM Adaptation Layer 5
(AAL5) using a virtual path identifier/virtual channel identifier (VPI/VCI) value (VPI=0, VCI=16).
Junos OS supports only two ILMI MIB variables:
• atmfMYIPNmAddress
• atmfPortMyIfname
For ATM1 and ATM2 intelligent queuing (IQ) interfaces, you can configure ILMI to communicate directly
with an attached ATM switch to enable querying of the switch’s IP address and port number.
For more information about the ILMI MIB, see atmfMYIPNmAddress or atmfPortMyIfname in the SNMP MIB
Explorer.
379
SEE ALSO
Understanding Device Management Functions in Junos OS
Configure SNMP in Junos OS
IN THIS SECTION
Configure SNMP | 379
Configure SNMP Details | 388
Configure the Commit Delay Timer | 391
Configure SNMP on a Device Running Junos OS | 392
Example: Configure SNMP on the QFabric System | 394
Configure SNMP
IN THIS SECTION
Configuration Statements at the [edit snmp] Hierarchy Level | 380
Configure Basic Settings for SNMP | 384
You can implement SNMP in the Junos OS Software running on the QFX Series and OCX Series
products. By default, SNMP is not enabled. To enable SNMP, you must include the SNMP configuration
statements at the [edit] hierarchy level.
To configure the minimum requirements for SNMP, include community public statement at the [edit snmp]
hierarchy level.
To configure complete SNMP features, see snmp.
380
Configuration Statements at the [edit snmp] Hierarchy Level
This topic shows all configuration statements at the [edit snmp] hierarchy level and their level in the
configuration hierarchy. When you are configuring Junos OS, your current hierarchy level is shown in the
banner on the line preceding the user@host# prompt.
[edit]
snmp {
alarm-management {
alarm-list-name list-name {
alarm-id id {
alarm-state state {
description alarm-description;
notification-id notification-id-of-alarm;
resource-prefix alarm-resource-prefix;
varbind-index varbind-index-in-alarm-varbind-list;
varbind-subtree alarm-varbind-subtree;
varbind-value alarm-varbind-value;
}
}
}
}
client-list client-list-name {
ip-addresses;
}
community community-name {
authorization authorization;
client-list-name client-list-name;
clients {
address ;
}
logical-system logical-system-name {
routing-instance routing-instance-name;
clients {
address ;
}
}
routing-instance routing-instance-name {
clients {
address ;
}
}
381
view view-name;
}
contact contact;
description description;
engine-id {
(local engine-id | use-default-ip-address | use-mac-address);
}
filter-duplicates;
interface [ interface-names ];
location location;
name name;
nonvolatile {
commit-delay seconds;
}
rmon {
alarm index {
description description;
falling-event-index index;
falling-threshold integer;
falling-threshold-interval seconds;
interval seconds;
request-type (get-next-request | get-request | walk-request);
rising-event-index index;
rising-threshold integer;
sample-type type;
startup-alarm alarm;
syslog-subtag syslog-subtag;
variable oid-variable;
}
event index {
community community-name;
description description;
type type;
}
}
traceoptions {
file filename    ;
flag flag;
memory-trace;
no-remote-trace;
no-default-memory-trace;
}
382
trap-group group-name {
categories {
category;
}
destination-port port-number;
routing-instance instance;
logical-system logical-system-name;
targets {
address;
}
version (all | v1 | v2);
}
trap-options {
agent-address outgoing-interface;
source-address address;
enterprise-oid;
logical-system logical-system-name {
routing-instance routing-instance-name {
source-address address;
}
}
routing-instance routing-instance-name {
source-address address;
}
}
v3 {
notify name {
tag tag-name;
type (trap | inform);
}
notify-filter profile-name {
oid oid (include | exclude);
}
snmp-community community-index {
community-name community-name;
security-name security-name;
tag tag-name;
}
target-address target-address-name {
address address;
address-mask address-mask;
logical-system logical-system;
port port-number;
383
retry-count number;
routing-instance instance;
tag-list tag-list;
target-parameters target-parameters-name;
timeout seconds;
}
target-parameters target-parameters-name {
notify-filter profile-name;
parameters {
message-processing-model (v1 | v2c | v3);
security-level (authentication | none | privacy);
security-model (usm | v1 | v2c);
security-name security-name;
}
}
usm {
local-engine {
user username {
authentication-md5 {
authentication-password authentication-password;
}
authentication-none;
authentication-sha {
authentication-password authentication-password;
}
privacy-3des {
privacy-password privacy-password;
}
privacy-aes128 {
privacy-password privacy-password;
}
privacy-des {
privacy-password privacy-password;
}
privacy-none;
}
}
}
vacm {
access {
group group-name {
(default-context-prefix | context-prefix context-prefiix){
security-model (any | usm | v1 | v2c) {
384
security-level (authentication | none | privacy) {
notify-view view-name;
read-view view-name;
write-view view-name;
}
}
}
}
}
security-to-group {
security-model (usm | v1 | v2c) {
security-name security-name {
group group-name;
}
}
}
}
}
view view-name {
oid object-identifier (include | exclude);
}
}
Configure Basic Settings for SNMP
The following sections contain information about basic SNMP configuration and a few examples of
configuring the basic SNMP operations on devices running Junos OS:
Configure Basic Settings for SNMPv1 and SNMPv2
You cannot enable SNMP on devices running Junos OS by default. To enable SNMP on devices running
Junos OS, include the community public statement at the [edit snmp] hierarchy level.
Enabling SNMPv1 and SNMPv2 Get and GetNext Operations
[edit]
snmp {
community public;
}
A community that is defined as public grants access to all MIB data to any client.
385
To enable SNMPv1 and SNMPv2 Set operations on the device, you must include the following
statements at the [edit snmp] hierarchy level:
Enabling SNMPv1 and SNMPv2 Set Operations
[edit snmp]
view all {
oid .1;
}
community private {
view all;
authorization read-write;
}
The following example shows the basic minimum configuration for SNMPv1 and SNMPv2 traps on a
device:
Configuring SNMPv1 and SNMPv2 Traps
[edit snmp]
trap-group jnpr {
targets {
192.168.69.179;