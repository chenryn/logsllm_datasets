return (void *)status; // perhaps the notification was canceled
if (check == token_fd)
printf("file descriptor: received notification\n");
else
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 121 of 153
printf("file descriptor: spurious notification?\n");
}
return (void *)0;
}
void *
consumer_mach_port(void *arg)
{
int status;
kern_return_t kr;
mach_msg_header_t msg;
mach_port_t notify_port;
status = notify_register_mach_port(NOTIFICATION_BY_MACH_PORT, &notify_port,
0, &token_mach_port);
if (status != NOTIFY_STATUS_OK) {
perror("notify_register_mach_port");
return (void *)status;
}
// to support cancellation of all notifications and exiting, we register
// a second notification here, but reuse the Mach port allocated above
status = notify_register_mach_port(NOTIFICATION_CANCEL, &notify_port,
NOTIFY_REUSE, &token_mach_port_cancel);
if (status != NOTIFY_STATUS_OK) {
perror("notify_register_mach_port");
mach_port_deallocate(mach_task_self(), notify_port);
return (void *)status;
}
while (1) {
kr = mach_msg(&msg, // message buffer
MACH_RCV_MSG, // option
0, // send size
MACH_MSG_SIZE_MAX, // receive limit
notify_port, // receive name
MACH_MSG_TIMEOUT_NONE, // timeout
MACH_PORT_NULL); // cancel/receive notification
if (kr != MACH_MSG_SUCCESS)
mach_error("mach_msg(MACH_RCV_MSG)", kr);
if (msg.msgh_id == token_mach_port)
printf("Mach port: received notification\n");
else if (msg.msgh_id == token_mach_port_cancel) {
cancel_all_notifications();
printf("canceling all notifications and exiting\n");
exit(0);
} else
printf("Mach port: spurious notification?\n");
}
return (void *)0;
}
void
sighandler_USR1(int s)
{
int status, check;
status = notify_check(token_signal, &check);
if ((status == NOTIFY_STATUS_OK) && (check != 0))
printf("signal: received notification\n");
else
printf("signal: spurious signal?\n");
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 122 of 153
void *
consumer_signal(void *arg)
{
int status, check;
// set up signal handler
signal(SIGUSR1, sighandler_USR1);
status = notify_register_signal(NOTIFICATION_BY_SIGNAL, SIGUSR1,
&token_signal);
if (status != NOTIFY_STATUS_OK) {
perror("notify_register_signal");
return (void *)status;
}
// since notify_check() always sets check to 'true' when it is called for
// the first time, we make a dummy call here
(void)notify_check(token_signal, &check);
while (1) {
// just sleep for a day
sleep(86400);
}
return (void *)0;
}
void
cancel_all_notifications(void)
{
if (token_fd != -1)
notify_cancel(token_fd);
if (token_mach_port != -1)
notify_cancel(token_mach_port);
if (token_signal != -1)
notify_cancel(token_signal);
}
int
main(int argc, char **argv)
{
int ret;
pthread_t pthread_fd, pthread_mach_port;
if ((ret = pthread_create(&pthread_fd, (const pthread_attr_t *)0,
consumer_file_descriptor, (void *)0)))
goto out;
if ((ret = pthread_create(&pthread_mach_port, (const pthread_attr_t *)0,
consumer_mach_port, (void *)0)))
goto out;
if (consumer_signal((void *)0) != (void *)0)
goto out;
out:
cancel_all_notifications();
return 0;
}
$ gcc -Wall -o notify_consumer notify_consumer.c
$ gcc -Wall -o notify_producer notify_producer.c
$ ./notification_consumer
# another shell prompt
$ ./notify_producer -f
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 123 of 153
file descriptor: received notification
$ ./notify_producer -p
Mach port: received notification
$ ./notify_producer -s
signal: received notification
$ killall -USR1 notify_consumer
signal: spurious signal?
$ ./notify_producer -c
canceling all notifications and exiting
$
Once you have a token after registering for a notification, you can also use the token to monitor a file
pathname by calling notify_monitor_file(), whose arguments include a token and a pathname.
Thereafter, in addition to notifications explicitly posted through notify_post(), the system will deliver a
notification each time the pathname is modified. Note that the pathname does not have to exist when you
call notify_monitor_file()if it doesn't exist, the first notification will correspond to the file's creation.
We can add the code shown in Figure 960 (the highlighted portion) to the consumer_mach_port()
function in Figure 959 to make the program exit whenever a given pathsay, /tmp/notify.cancelis
modified.
Figure 960. Monitoring a file through notify(3)
void *
consumer_mach_port(void *arg)
{
...
status = notify_register_mach_port(NOTIFICATION_CANCEL, &notify_port,
NOTIFY_REUSE, &token_mach_port_cancel);
if (status != NOTIFY_STATUS_OK) {
perror("notify_register_mach_port");
mach_port_deallocate(mach_task_self(), notify_port);
return (void *)status;
}
status = notify_monitor_file(token_mach_port_cancel, "/tmp/notify.cancel");
if (status != NOTIFY_STATUS_OK) {
perror("notify_monitor_file");
mach_port_deallocate(mach_task_self(), notify_port);
return (void *)status;
}
while (1) {
...
}
...
}
9.16.3. Kernel Event Notification Mechanism (kqueue(2))
Mac OS X provides a FreeBSD-derived mechanism called kqueue for kernel event notification. The
mechanism gets its name from the kqueue data structure (struct kqueue [bsd/sys/eventvar.h]),
which represents a kernel queue of events.
A program uses this mechanism through the kqueue() and kevent() system calls. kqueue() creates a
new kernel event queue and returns a file descriptor. Specific operations performed by kqueue() in the
kernel include the following:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 124 of 153
 Create a new open file structure (struct fileproc [bsd/sys/file_internal.h]) and allocate a
file descriptor, which the calling process uses to refer to the open file.
 Allocate and initialize a kqueue data structure (struct kqueue [bsd/sys/eventvar.h]).
 Set the file structure's f_flag field to (FREAD | FWRITE) to specify that the file is open for both
reading and writing.
 Set the file structure's f_type (descriptor type) field to DTYPE_KQUEUE to specify that the descriptor
references a kqueue.
 Set the file structure's f_ops field (file operations table) to point to the kqueueops global structure
variable [bsd/kern/kern_event.c].
 Set the file structure's f_data field (private data) to point to the newly allocated kqueue structure.
kevent() is used both for registering events with a kernel queue (given the corresponding descriptor) and
for retrieving any pending events. An event is represented by a kevent structure [bsd/sys/event.h].
struct kevent {
uintptr_t ident; // identifier for this event
short filter; // filter for event
u_short flags; // action flags for kqueue
u_int fflags; // filter flag value
intptr_t data; // filter data value
void *udata; // opaque user data identifier
};
Kernel events are generated by various parts of the kernel calling kqueue functions to add kernel notes
(struct knote [bsd/sys/event.h]). The proc structure's p_klist field is a list of attached kernel notes.
A caller can populate a kevent structure and invoke kevent() to request to be notified when that event
occurs. The kevent structure's filter field specifies the kernel filter to be used to process the event. The
ident field is interpreted by the kernel based on the filter. For example, the filter can be EVFILT_PROC,
which means the caller is interested in process-related events, such as the process exiting or forking. In
this case, the ident field specifies a process ID. Table 99 shows the system-defined filters and
corresponding identifier types.
Table 99. Kqueue Filters
Filter Identifier Examples of Events
EVFILT_FS File system being mounted or unmounted,
NFS server not responding, free space falling
below the minimum threshold on an HFS Plus
file system
EVFILT_PROC A process ID Process performing a fork, exec, or exit
operation
EVFILT_READ A file descriptor Data available to read
EVFILT_SIGNAL A signal number Specified signal delivered to the process
EVFILT_TIMER An interval Timer expired
EVFILT_VNODE A file descriptor Vnode operations such as deletion, rename,
content change, attribute change, link count
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 125 of 153
change, and so on
EVFILT_WRITE A file descriptor Possibility of data to be written
The flags field specifies one or more actions to perform, such as adding the specified event to the kqueue
(EV_ADD) or removing the event from the kqueue (EV_DELETE). The fflags field is used to specify one or
more filter-specific events that should be monitored. For example, if the exit and fork operations are to be
monitored for a process using the EVFILT_PROC filter, the fflags field should contain the bitwise OR of
NOTE_EXIT and NOTE_FORK.
The data field contains filter-specific data, if any. For example, for the EVFILT_SIGNAL filter, data will
contain the number of times the signal has occurred since the last call to kevent().
The udata field optionally contains user-defined data that is not interpreted by the kernel.
The EV_SET macro can be used to populate a kevent structure.
Figure 961 shows a program that uses the EVFILT_VNODE filter to watch for events on a given file.
Figure 961. Using the kqueue() and kevent() system calls to watch for file events
// kq_fwatch.c
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "kq_fwatch"
typedef struct {
u_int event;
const char *description;
} VnEventDescriptions_t;
VnEventDescriptions_t VnEventDescriptions[] = {
{ NOTE_ATTRIB, "attributes changed" },
{ NOTE_DELETE, "deleted" },
{ NOTE_EXTEND, "extended" },
{ NOTE_LINK, "link count changed" },
{ NOTE_RENAME, "renamed" },
{ NOTE_REVOKE, "access revoked or file system unmounted" },
{ NOTE_WRITE, "written" },
};
#define N_EVENTS (sizeof(VnEventDescriptions)/sizeof(VnEventDescriptions_t))
int
process_events(struct kevent *kl)
{
int i, ret = 0;
for (i = 0; i fflags)
printf("%s\n", VnEventDescriptions[i].description);
if (kl->fflags & NOTE_DELETE) // stop when the file is gone
ret = -1;
return ret;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 126 of 153
}
int
main(int argc, char **argv)
{
int fd, ret = -1, kqfd = -1;
struct kevent changelist;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
// create a new kernel event queue (not inherited across fork())
if ((kqfd = kqueue()) < 0) {
perror("kqueue");
exit(1);
}
if ((fd = open(argv[1], O_RDONLY)) < 0) {
perror("open");
exit(1);
}
#define NOTE_ALL NOTE_ATTRIB |\
NOTE_DELETE |\
NOTE_EXTEND |\
NOTE_LINK |\
NOTE_RENAME |\
NOTE_REVOKE |\
NOTE_WRITE
EV_SET(&changelist, fd, EVFILT_VNODE, EV_ADD | EV_CLEAR, NOTE_ALL, 0, NULL);
// the following kevent() call is for registering events
ret = kevent(kqfd, // kqueue file descriptor
&changelist, // array of kevent structures
1, // number of entries in the changelist array
NULL, // array of kevent structures (for receiving)
0, // number of entries in the above array
NULL); // timeout
if (ret < 0) {
perror("kqueue");
goto out;
}
do {
// the following kevent() call is for receiving events
// we recycle the changelist from the previous call
if ((ret = kevent(kqfd, NULL, 0, &changelist, 1, NULL)) == -1) {
perror("kevent");