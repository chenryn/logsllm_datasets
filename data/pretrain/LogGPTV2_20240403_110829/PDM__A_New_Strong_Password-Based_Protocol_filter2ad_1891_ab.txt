number generator that will be used in the search for an
appropriate prime.
3.1 PDM for Credentials Download
We begin with just the simplest form of a strong pass-
word-based authentication protocol, that has only the
functionality of the original EKE and SPEKE, and only
the properties necessary for credentials download. On
the surface, the protocol is extremely simple. The server
Bob stores, for user Alice, p. We will always use 2 as the
base. The reasons for using 2:
•
•
•
it makes it easy to recognize small exponent cheat-
ing by someone impersonating the client (see sec-
tion 3.2.2),
to be different from SPEKE, to avoid potential
patent infringement, and
to use the law of quadratic reciprocity to choose
candidate p’s for which 2 is certain to be a generator
(and thus avoid the performance cost of having to
search for a generator, or the possible security loss
as explained in section 3.4.2 of using a base that
isn’t a generator). If p is equal to 3 mod 8 and p is a
safe prime ((p-1)/2 is also prime), 2 will be a gener-
ator.
We chose a target of 10 seconds for a reasonable amount
of computation time for the client to pick a p. Unfortu-
nately, ﬁnding a safe p of a size considered secure for
traditional Difﬁe-Hellman (say 1000 bits) would take
longer (on today’s typical client machines) than our tar-
get of 10 seconds for the user to log in. So as we discuss
in section 3.4, there are various corners we can cut while
maintaining good enough security for practical pur-
poses. Indeed, on a 400 MHz processor, a 500-bit safe
prime can be found within 10 seconds, and we argue
that for our application, Difﬁe-Hellman with a 500-bit
modulus would give adequate security because of the
necessity for an eavesdropper doing a dictionary attack
to break 500-bit Difﬁe-Hellman for each guessed pass-
word. And with the trick suggested in section 3.4.3,
even a 1000-bit safe prime can be generated well within
our budget of 10 seconds at the client. We give timing
estimates for generating safe primes of various sizes in
section 3.5.
For a simple 2-message credentials download protocol,
the server Bob stores p and the credential Y, which is,
for instance, the user’s private RSA key encrypted with
her password. The workstation calculates p from the
user’s password. As observed in [PK99], for credentials
download it is possible to save Bob an exponentiation
by having him always use the same B for Alice, and
storing B and 2B mod p. (Note: the notation “{data}key”
means “data” encrypted with key “key”).
Alice
calculates p from pwd
choose random A
Bob
stores:
p, B, 2B mod p, and
Y={priv}pwd
“Alice”, 2A mod p
2B mod p, {Y}2AB mod p
PDM for credentials download
For mutual authentication, especially if the rest of the
session is not cryptographically protected by the result-
ing Difﬁe-Hellman key, then Bob can still save himself
an exponentiation, but has to additionally furnish a
nonce R in message 2, and Alice should return a func-
tion of both the nonce and 2AB mod p. Without the
nonce an eavesdropper could replay Alice’s messages
and Bob would accept this as Alice having authenti-
cated. So here is a mutual authentication PDM-based
protocol in which Bob need only do one exponentiation.
This scheme stores a password-equivalent at Bob, but in
currently published schemes Bob requires more than 2
exponentiations.
Alice
calculates p from pwd
choose random A
Bob
stores:
p, B, 2B mod p
“Alice”, 2A mod p
chooses nonce R
2B mod p, R, h(2AB mod p)
h(R, 2AB mod p)
Single exponentiation mutual authentication
This trick of saving Bob an exponentiation will not work
if we want the additional feature of not storing a pass-
word-equivalent at Bob. Also, if the protocol is being
used to establish a session key as well as just doing the
initial authentication, perfect forward secrecy would be
lost by having Bob always use the same B.
3.2 Avoiding Leaking Information
As discussed in both [BM92] and [Pat97] protocols such
as these need to be implemented carefully or else infor-
mation will be leaked. For instance, in the most straight-
forward implementation of EKE, one might encrypt gA
mod p with a hash of the password. An eavesdropper
that observed an encrypted gA mod p could do trial
decryptions with various passwords, and eliminate any
passwords in which the result was larger than p. If p was
just a little more than a power of 2, then about half the
passwords could be eliminated each time an eavesdrop-
per observed a Difﬁe-Hellman value encrypted with a
password. This might occur twice per authentication in
variants of EKE that have both sides encrypting their
Difﬁe-Hellman values.
3.2.1  Choosing p from a Small Range
In PDM, care must be taken to avoid allowing an eaves-
dropper to eliminate passwords based on seeing 2A mod
p and 2B mod p. If either transmitted Difﬁe-Hellman
number was greater than the p derived from a candidate
password, an eavesdropper could rule out that password.
We solve this problem by discarding A (or B) in the case
where 2A mod p is greater than the smallest possible p
that could be derived from any password. To make the
probability acceptably low that an A would have to be
discarded (forcing an additional exponentiation) we
choose p’s from a very small range (e.g., if the smallest
p and the largest p differ by less than 0.1%, then a Dif-
ﬁe-Hellman number will need to be rejected less than
one time in 1000). We choose a p from a narrow range
very close to a power of 2. We make it a narrow range
by ﬁxing the top 64 bits of the number at which our
search will take place. Any constant will do, but to make
maximal use out of the bits, the constant might as well
be 63 1’s followed by a 0. With a prime of, say, 700 bits,
that gives a space of 700-64 bits, or 636 bits from which
to choose p’s, obviously large enough that there will be
no shortage of p’s, and yet the fraction of 700-bit space
from which the p’s are chosen is 1/264. With this frac-
tion, the probability of ever getting a 2A mod p larger
than the smallest possible p is 1/264. And if it did occur,
the only consequence is that authentication would take a
little longer since another A would need to be chosen.
3.2.2  User Impersonator Picking Small A
such that 2A  700) so that
the result will need to be reduced by p. Since 2 is a gen-
erator, there cannot be two different exponents that yield
the same value mod p. Therefore, if the number is of the
form 10000...000002, (i.e.,
the binary representation
contains a single 1) then the sender has cheated by using
an exponent sufﬁciently small that it did not need to be
reduced by any modulus.
3.2.3  Timing Attacks
Because calculating p from a password involves search-
ing for a prime at a pseudo-random value and testing
until one is found, different passwords would take sub-
stantially different amounts of time to compute p. If an
eavesdropper knew with some precision how long it
took Alice’s machine to compute p, this information
could be used to eliminate many candidate passwords.
For example, a protocol which would give an eavesdrop-
per timing information is one in which Alice’s machine
does not start computing p until it receives a message
from Bob, perhaps because it needs to receive a salt
value (see section 3.3) from Bob before it can compute
p. The time until Alice’s reply will be approximately the
amount of time required for the machine to calculate p.
So it is best if Alice’s workstation can compute p from
the password before beginning the authentication proto-
col. This is possible if the salt is implicit, e.g. it is a
canonical representation of the user name, since then the
computation is done before messages are sent and an
eavesdropper cannot time how long it took to compute
p. A second choice, if implicit salt is not possible (too
many variations on the name), would be to have Alice’s
typing of the password occur after she types the name of
the server she wishes to contact. Since user typing times
are highly variable, an eavesdropper will not be able to
tell how much of the interval between Bob’s message
(e.g., sending salt), and Alice’s machine’s reply was due
to computation of p and how much was due to Alice typ-
ing the password.
3.3 User Salt
It is highly desirable for user Alice’s machine to be able
to compute p before talking to the server, because:
•
•
•
•
it will take the client machine a long time to com-
pute p, so it would be good to be computing it while
the user is doing other things, for instance, typing
the name of the service she wishes to access.
we don’t want to allow an eavesdropper to tell how
long it takes to compute p.
If p is user/password dependent, but not server
dependent, then a user can use the same p on multi-
ple servers, ensuring that the expensive computa-
tion of p need only be done once per user, even if
the user is using PDM for mutual authentication
with multiple servers.
it would take an extra message to send the salt.
In order to compute p before talking to the server, the
salt value must be intrinsic, i.e., computable from infor-
mation known locally about the user. Since this consists
of the user’s name and password, the logical choice for
salt value is the user’s name. It is important, however, to
have a canonical version of the name. Capitalization or
nicknames must not affect the computation of p.
3.4 Performance
The computation the server must perform to execute the
basic PDM protocol (assuming equal sized moduli) is
comparable to the best of the protocols with similar
functionality even if the same size modulus is used.
(This assumes that a protocol such as EKE or SPEKE is
modiﬁed as suggested in [PK99] to have the server store
B per user to save an exponentiation).
By using a different technique (as described in section
4) to achieve the goal of not storing a password equiva-
lent at the server, PDM has better performance (even
with the same sized modulus) than any of the previous
schemes, though that technique could apply to EKE or
SPEKE to make them equivalent in server performance
(with the same size modulus). Although PDM is more
expensive at the client than any of the prior protocols,
we claim that since the client machine only needs to do
the computation once, the only thing that matters in
practice is for performance at the client to be “good
enough”. During the initial authentication, a human is
waiting, and it is unacceptable for a user to wait for
more than about 10 seconds to log in (and that’s pushing
it). Choosing p to be a 1000 bit safe prime would take
more than a minute (see section 3.5) on today’s typical
desktop machine. Fortunately, there are some shortcuts
we can take that raise performance dramatically. Note
that as machines get faster we can drop more and more
of the shortcuts.
3.4.1  Size of p
Today’s conventional wisdom says that the size of a
prime used in a Difﬁe-Hellman exchange should be on
the order of 1000 bits. But given that this is not an ordi-
nary Difﬁe-Hellman exchange, might a smaller prime be
acceptable? Computation time falls dramatically with
the size of the prime. What is the threat if our prime is
smaller?
It is within the realm of possibility to break Difﬁe-Hell-
man with a size of, say, 500 bits, which at today’s esti-
mates would take on the order of 8,000 MIP-years.
Eavesdropping on any authentication would yield a
quantity with which password guesses could be veriﬁed,
but it requires, for each guessed password, computing p
and breaking Difﬁe-Hellman with that p. So an attacker
would have to break 500-bit Difﬁe-Hellman per pass-
word guess.
Perfect forward secrecy would be endangered using Dif-
ﬁe-Hellman primes that are within the realm of possibil-
ity to crack, because if someone were to record
conversations, and subsequently learn the user’s pass-
word, then he’d be able to compute p, break 500-bit Dif-
ﬁe-Hellman, and then recover the session keys of the
authentications that used that p. In practice, this is a suf-
ﬁciently obscure threat that the size of the Difﬁe-Hell-
man prime is unlikely to be the weakest link in the chain
(on-line password guessing, or using the learned pass-
word to directly impersonate the user in future conversa-
tions would probably be more fruitful), so in practice a
500 bit p might sufﬁce. Alternately, and at some cost in
complexity and server computation, the perfect forward
secrecy attack could be circumvented by supplementing
this protocol with a second anonymous Difﬁe-Hellman
exchange with ﬁxed adequate strength primes. If the
result of that second Difﬁe-Hellman exchange contrib-
utes to the session key, perfect forward secrecy is pre-
served. And since computation with a small p is so
efﬁcient,
the double Difﬁe-Hellman (with one large
ﬁxed p and one small, based-on-the-password p) would
still be of comparable performance at the server to the
best of existing schemes.
3.4.2  Non-Safe Prime