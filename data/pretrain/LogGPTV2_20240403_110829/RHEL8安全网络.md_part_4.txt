    ::: itemizedlist
    -   禁用密码和 `root`{.literal} 用户登录
    -   只对子网 `192.0.2.0/24`{.literal} 启用密码和 `root`{.literal}
        用户登录
    :::
    您可以根据您的偏好修改变量。如需了解更多详细信息，请参阅 [SSHD
    服务器系统角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/some-guide/sshd-system-role-variables_configuring-secure-communication-with-the-sshd-system-role){.link}。
3.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
4.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ...
    PLAY RECAP
    **************************************************
    localhost : ok=12 changed=2 unreachable=0 failed=0
    skipped=10 rescued=0 ignored=0
    ```
:::
::: orderedlist
**验证**
1.  登录到 SSH 服务器：
    ``` screen
    $ ssh user1@10.1.1.1
    ```
    其中：
    ::: itemizedlist
    -   `user1`{.literal} 是 SSH 服务器上的用户。
    -   `10.1.1.1`{.literal} 是 SSH 服务器的 IP 地址。
    :::
2.  检查 SSH 服务器上的 `sshd_config`{.literal} 文件的内容：
    ``` screen
    $ vim /etc/ssh/sshd_config
    # Ansible managed
    HostKey /etc/ssh/ssh_host_rsa_key
    HostKey /etc/ssh/ssh_host_ecdsa_key
    HostKey /etc/ssh/ssh_host_ed25519_key
    AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
    AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
    AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
    AcceptEnv XMODIFIERS
    AuthorizedKeysFile .ssh/authorized_keys
    ChallengeResponseAuthentication no
    GSSAPIAuthentication yes
    GSSAPICleanupCredentials no
    PasswordAuthentication no
    PermitRootLogin no
    PrintMotd no
    Subsystem sftp /usr/libexec/openssh/sftp-server
    SyslogFacility AUTHPRIV
    UsePAM yes
    X11Forwarding yes
    Match Address 192.0.2.0/24
      PasswordAuthentication yes
      PermitRootLogin yes
    ```
3.  检查您是否可以以 root 用户身份从 `192.0.2.0/24`{.literal}
    子网连接到服务器：
    ::: orderedlist
    1.  确定您的 IP 地址：
        ``` screen
        $ hostname -I
        192.0.2.1
        ```
        如果 IP 地址在 `192.0.2.1`{.literal} - `192.0.2.254`{.literal}
        范围内，您可以连接到服务器。
    2.  以 `root`{.literal} 用户身份连接到服务器：
        ``` screen
        $ ssh root@10.1.1.1
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `/usr/share/doc/rhel-system-roles/sshd/README.md`{.literal} 文件。
-   `ansible-playbook(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#ref_ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSH 系统角色变量 {.title}
:::
在 SSH 系统角色 playbook 中，您可以根据您的偏好和限制来为客户端 SSH
配置文件定义参数。
如果没有配置这些变量，系统角色会生成一个与 RHEL 默认值匹配的全局
`ssh_config`{.literal} 文件。
在所有情况下，布尔值在 `ssh`{.literal} 配置中都正确地呈现为
`yes`{.literal} 或 `no`{.literal}。您可以使用 list
来定义多行配置项。例如：
``` screen
LocalForward:
  - 22 localhost:2222
  - 403 localhost:4003
```
呈现为：
``` screen
LocalForward 22 localhost:2222
LocalForward 403 localhost:4003
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
配置选项区分大小写。
:::
::: variablelist
**SSH 系统角色的变量**
[`ssh_user`{.literal}]{.term}
:   您可以定义一个现有用户名，系统角色可以为其修改用户特定的配置。用户特定配置保存在给定用户的
    `~/.ssh/config`{.literal} 中。默认值为
    null，它会修改所有用户的全局配置。
[`ssh_skip_defaults`{.literal}]{.term}
:   默认值为 `auto`{.literal}。如果设置为
    `auto`{.literal}，系统角色将会对系统范围的配置文件
    `/etc/ssh/ssh_config`{.literal} 进行写操作，并保留其中定义的 RHEL
    默认值。例如，通过定义 `ssh_drop_in_name`{.literal} 变量来创建一个
    drop-in 配置文件，将自动禁用 `ssh_skip_defaults`{.literal} 变量。
[`ssh_drop_in_name`{.literal}]{.term}
:   定义 drop-in 配置文件的名称，该文件放在系统范围的 drop-in
    目录中。该名称在模板
    `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal}
    中使用，以引用要修改的配置文件。如果系统不支持 drop-in
    目录，则默认值为 null。如果系统支持 drop-in 目录，则默认值为
    `00-ansible`{.literal}。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    如果系统不支持 drop-in 目录，设置此选项将使 play 失败。
    :::
    建议的格式是 `NN-name`{.literal}，其中 `NN`{.literal}
    是用于订购配置文件的两位数字，`name`{.literal}
    是内容或文件所有者的任何描述性名称。
[`ssh`{.literal}]{.term}
:   包含配置选项和其相应值的字典。
[`ssh_OptionName`{.literal}]{.term}
:   您可以使用由 `ssh_`{.literal}
    前缀和选项名称而不是字典组成的简单变量来定义选项。简单的变量覆盖
    `ssh`{.literal} 字典中的值。
[`ssh_additional_packages`{.literal}]{.term}
:   此角色会自动安装 `openssh`{.literal} 和 `openssh-clients`{.literal}
    软件包，这是最常见用例所需要的。如果您需要安装其他软件包，例如
    `openssh-keysign`{.literal}
    以用于基于主机的身份验证，您可以在此变量中指定它们。
[`ssh_config_file`{.literal}]{.term}
:   角色保存产生的配置文件的路径。默认值：
    ::: itemizedlist
    -   如果系统有一个 drop-in 目录，则默认值通过模板
        `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal}
        来定义。
    -   如果系统没有 drop-in 目录，则默认值为
        `/etc/ssh/ssh_config`{.literal}。
    -   如果定义了 `ssh_user`{.literal} 变量，则默认值为
        `~/.ssh/config`{.literal}。
    :::
[`ssh_config_owner`{.literal},`ssh_config_group`{.literal},`ssh_config_mode`{.literal}]{.term}
:   所创建的配置文件的所有者、组和模式。默认情况下，文件的所有者是
    `root:root`{.literal}，模式是 `0644`{.literal}。如果定义了
    `ssh_user`{.literal}，则模式为 `0600`{.literal}，所有者和组派生自
    `ssh_user`{.literal} 变量中指定的用户名。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#proc_configuring-openssh-clients-using-the-ssh-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSH 系统角色来配置 OpenSSH 客户端 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSH 系统角色来配置多个 SSH
客户端。
::: itemizedlist
**先决条件**
-   可以访问一个或多个 [*受管节点*]{.emphasis}，它们是您要使用 SSH
    系统角色来配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   Red Hat Ansible Engine 已安装。
    -   `rhel-system-roles`{.literal} 软件包已安装。
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  使用以下内容创建新 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - hosts: all
      tasks:
      - name: "Configure ssh clients"
        include_role:
          name: rhel-system-roles.ssh
        vars:
          ssh_user: root
          ssh:
            Compression: true
            GSSAPIAuthentication: no
            ControlMaster: auto
            ControlPath: ~/.ssh/.cm%C
            Host:
              - Condition: example
                Hostname: example.com
                User: user1
          ssh_ForwardX11: no
    ```
    此 playbook 使用以下配置在受管节点上配置 `root`{.literal} 用户的 SSH
    客户端首选项：
    ::: itemizedlist
    -   压缩已启用。
    -   ControlMaster 多路复用设置为 `auto`{.literal}。
    -   连接到 `example.com`{.literal} 主机的`example`{.literal} 别名是
        `user1`{.literal}。
    -   `example`{.literal} 主机别名已创建，它表示使用 `user1`{.literal}
        用户名连接到 `example.com`{.literal} 主机。
    -   X11 转发被禁用。
    :::
    另外，您还可以根据您的偏好修改这些变量。如需了解更多详细信息，请参阅
    [SSH
    客户端角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-role){.link}。
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ```
:::
::: itemizedlist
**验证**
-   通过在文本编辑器中打开 SSH
    配置文件来验证受管节点是否具有正确的配置，例如：
    ``` screen
    # vi ~root/.ssh/config
    ```
    在应用了上述示例 playbook 后，配置文件应具有以下内容：
    ``` screen
    # Ansible managed
    Compression yes
    ControlMaster auto
    ControlPath ~/.ssh/.cm%C
    ForwardX11 no
    GSSAPIAuthentication no
    Host example
      Hostname example.com
      User user1
    ```
:::
:::
:::
[]{#planning-and-implementing-tls_securing-networks.html}
::: chapter
::: titlepage
# []{#planning-and-implementing-tls_securing-networks.html#planning-and-implementing-tls_securing-networks}第 3 章 计划并使用 TLS {.title}
:::
TLS（传输层安全）是用来保护网络通信的加密协议。在通过配置首选密钥交换协议、身份验证方法和加密算法来强化系统安全设置时，需要记住支持的客户端的范围越广，产生的安全性就越低。相反，严格的安全设置会导致与客户端的兼容性受限，这可能导致某些用户被锁定在系统之外。请确保以最严格的可用配置为目标，并且仅在出于兼容性原因需要时才放宽配置。
::: section
::: titlepage
# []{#planning-and-implementing-tls_securing-networks.html#ssl-and-tls-protocols_planning-and-implementing-tls}SSL 和 TLS 协议 {.title}
:::
安全套接字层(SSL)协议最初使由 Netscape
公司开发的，以提供一种在互联网上进行安全通信的机制。因此，该协议被互联网工程任务组(IETF)采纳，并重命名为传输层安全(TLS)。
TLS 协议位于应用协议层和可靠的传输层之间，例如
TCP/IP。它独立于应用程序协议,因此可在很多不同的协议下分层，如
HTTP、FTP、SMTP 等等。
::: informaltable
  协议版本   用法建议
  ---------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SSL v2     不要使用。具有严重的安全漏洞。从 RHEL 7 开始从核心加密库中删除了。
  SSL v3     不要使用。具有严重的安全漏洞。从 RHEL 8 开始从核心加密库中删除了。
  TLS 1.0    不建议使用。已知的无法以保证互操作性方式缓解的问题，且不支持现代密码套件。只在 `LEGACY`{.literal} 系统范围的加密策配置文件中启用。
  TLS 1.1    在需要时用于互操作性.不支持现代加密套件。只在 `LEGACY`{.literal} 策略中启用。
  TLS 1.2    支持现代 AEAD 密码组合。此版本在所有系统范围的加密策略中启用，但此协议的可选部分包含漏洞，TLS 1.2 也允许过时的算法。
  TLS 1.3    推荐的版本。TLS 1.3 删除了已知有问题的选项，通过加密更多协商握手来提供额外的隐私，由于使用了更有效的现代加密算法，所以可以更快。在所有系统范围的加密策略中也启用了 TLS 1.3。
:::
::: itemizedlist
**其它资源**
-   [IETF：传输层安全(TLS)协议版本
    1.3](https://tools.ietf.org/html/rfc8446){.link}。
:::
:::
::: section
::: titlepage
# []{#planning-and-implementing-tls_securing-networks.html#security-considerations-for-tls-in-rhel-8_planning-and-implementing-tls}RHEL 8 中 TLS 的安全注意事项 {.title}
:::
在 RHEL 8
中，由于系统范围的加密策略，与加密相关的注意事项大大简化了。`DEFAULT`{.literal}
加密策略只允许 TLS 1.2 和 1.3。要允许您的系统使用早期版本的 TLS
来协商连接，您需要选择不使用应用程序中的以下加密策略，或使用
`update-crypto-policies`{.literal} 命令切换到 `LEGACY`{.literal}
策略。如需更多信息，请参阅[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。