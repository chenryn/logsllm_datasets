# The Cookie Monster in Your Browsers

## Speaker: @filedescriptor
- **HITCON 2019**
- **From Hong Kong**
- **Pentester for Cure53**
- **Passionate about WebApp and Browser Security**
- **Bug Bounty Hunter (#1 on Twitter's program)**

## Motivation
Understanding the evolution and security implications of cookies is crucial for web application and browser security. This talk will cover the history, mechanisms, and modern attributes of cookies, along with real-world attack scenarios and defenses.

## History of Cookies
### The Dark Age
- **1966**: Early concepts of state management.
- **1994**: Netscape's `cookie_spec` introduces basic cookie functionality.
- **1997**: RFC 2109 standardizes cookie usage.
- **2000**: RFC 2965 updates and expands cookie specifications.

### Modern Age
- **2011**: RFC 6265 consolidates and improves cookie standards.
- **2015-2016**: RFC6265bis introduces new features:
  - **Cookie Prefixes**
  - **Same-site Cookies**
  - **Strict Secure Cookies**

## Basic Syntax and Mechanism
- **Set-Cookie Header**:
  ```http
  Set-Cookie: sid=123; path=/admin
  ```
- **JavaScript API (write)**:
  ```javascript
  document.cookie = 'lang=en';
  ```
- **HTTP Response**:
  ```http
  HTTP/1.1 200 OK
  [...]
  Set-Cookie: sid=123; path=/admin
  ```
- **Subsequent HTTP Request**:
  ```http
  POST /admin HTTP/1.1
  [...]
  Cookie: sid=123; lang=en
  ```

## Key Attributes
- **Expires, Max-Age, Domain, Path, SameSite, Secure, HttpOnly**
- **Domain Attribute**:
  - Widens the scope to all subdomains.
  - Example: `Set-Cookie: foo=bar; domain=.example.com`
  - **Security Implication**: If a subdomain is compromised, all cookies are at risk.

## Attack Scenarios
### Cookie Bomb
- **Description**: Injecting large cookies to exceed server request header limits, causing a DoS.
- **Example**:
  ```http
  GET / HTTP/1.1
  [...]
  Cookie: ev_redir_a=aaa...aaa; ev_redir_b=aaa...aaa; ev_redir_c=aaa...aaa } 8kB+
  ```

### XSS + OAuth
- **Scenario**: Using an XSS vulnerability to steal OAuth tokens.
- **Steps**:
  1. Perform a Cookie Bomb attack via XSS.
  2. Embed an iframe pointing to the OAuth IdP.
  3. Redirect to the target with the authorization code.
  4. Server rejects the request due to a large header.
  5. Use XSS to extract the authorization code from the iframe URL.

### Cookie Tossing
- **Description**: Forcing a cookie with the same name but different key tuple.
- **Example**:
  ```http
  POST /admin HTTP/1.1
  [...]
  Cookie: _twitter_sess=attackers; _twitter_sess=original
  ```

### Overflowing Cookie Jar
- **Description**: Removing old cookies by exceeding the browser's cookie limit.
- **Drawback**: Unpredictable tracking cookies make it difficult to know the exact number of cookies.

### More Cookie Tossing Applications
- **Self-XSS to Full XSS**: Selectively forcing attacker’s session cookie on certain paths.
- **Session Fixation**: Forcing an attacker’s session cookie with a subdomain XSS.

## Defense Mechanisms
### Cookie Prefixes
- **__Host- Prefix**: Prevents subdomains from setting cookies for the main domain.
- **Usage**: 
  ```http
  Set-Cookie: __Host-session=abc123; Path=/; Secure
  ```

### Implementation Discrepancies
- **Multiple Cookies in a Single Set-Cookie Header**:
  - **RFC 2109**: Allows multiple cookies.
  - **RFC 6265**: Only one cookie per Set-Cookie header.
  - **Example**:
    ```http
    Set-Cookie: foo=123; path=/admin; HttpOnly;, bar=456; Secure
    ```

## Conclusion
- **PSA**: CSRF and other vulnerabilities will be mitigated with the adoption of modern cookie standards.
- **Q&A**: Follow me on Twitter @filedescriptor for more insights and discussions.

---

This revised version provides a clear, structured, and professional overview of the topic, making it easier to follow and understand.