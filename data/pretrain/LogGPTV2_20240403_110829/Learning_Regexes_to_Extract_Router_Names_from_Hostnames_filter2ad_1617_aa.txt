# Learning Regexes to Extract Router Names from Hostnames

**Authors:**
- Matthew J. Luckie, University of Waikato, PI:EMAIL
- Bradley Huffaker, CAIDA, UC San Diego, PI:EMAIL
- k claffy, CAIDA, UC San Diego, PI:EMAIL

## Abstract
We present the design, implementation, evaluation, and validation of a system that automatically learns to extract router names (router identifiers) from hostnames stored by network operators in different DNS zones, represented by regular expressions (regexes). Our supervised learning approach evaluates automatically generated candidate regexes against sets of hostnames for IP addresses that other alias resolution techniques have previously inferred to identify interfaces on the same router. Conceptually, if three conditions are met: (1) a regex extracts the same value from a set of hostnames associated with IP addresses on the same router; (2) the value is unique to that router; and (3) the regex extracts names for multiple routers in the suffix, we conclude that the regex accurately represents the naming convention for the suffix.

We trained our system using router aliases inferred from active probing to learn regexes for 2550 different suffixes. We then demonstrated the utility of this system by using the regexes to find 105% additional aliases for these suffixes. Regexes inferred in IPv4 perfectly predict aliases for approximately 85% of suffixes with IPv6 aliases, i.e., IPv4 and IPv6 addresses representing the same underlying router, and find 9.0 times more routers in IPv6 than found by prior techniques.

### CCS Concepts
- Information systems → Clustering and classification
- Networks → Naming and addressing

### Keywords
Regular expression learning, Internet topology, alias resolution

### ACM Reference Format
Matthew Luckie, Bradley Huffaker, and k claffy. 2019. Learning Regexes to Extract Router Names from Hostnames. In IMC ’19: ACM Internet Measurement Conference, October 21–23, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3355369.3355589

## 1 Introduction
Internet (IP) address alias resolution is a critical step in transforming an interface-level graph captured by traceroutes into a router-level graph that reflects the underlying topology. Alias resolution techniques that use packet-probing rely on artifacts of router implementations to infer if a set of interface IP addresses belong to the same router. For example, Mercator [8] infers two addresses as belonging to the same router if the source address of ICMP port unreachable responses is the same, and Ally [27], RadarGun [4], MIDAR [12], and Speedtrap [16] all infer two addresses as belonging to the same router if the IP-ID values in response packets appear to be derived from a central counter. However, because packet-probing techniques depend on specific router behaviors and on operators not configuring their network to block or ignore the packets, the set of aliases that a single technique can infer is limited even within a single network.

Researchers and network operators have used information encoded in the Domain Name System (DNS) to understand network properties for at least 20 years. To aid network management, operators often use DNS hostname strings to encode information about the name of the router, location, role, or interconnection properties of router interfaces—the hardware components that connect to other routers. However, operators have never developed a consensus on a universal naming convention; each networked organization independently selects such conventions for their own suffix (e.g., savvis.net). The resulting diversity in conventions prevents researchers and network operators from systematically using information encoded in these hostnames.

Researchers have traditionally manually derived regular expressions (regexes) from apparent router naming conventions to extract network topology information, such as geographic placement, roles of routers, link speeds, and router names (e.g., [6, 7, 27]). In this paper, we consider the challenge of automatically learning if an operator uses a convention within a suffix that includes a unique router identifier by evaluating automatically generated regexes. Our system supervises the learning process using training data comprising a set of router interface IP addresses inferred to be aliases by another alias resolution technique. Conceptually, if a regex extracts the same name from a set of hostnames associated with the same router in our training data, and a unique name for all routers in the training data within the same suffix, we conclude the regex captures the convention for storing router names in that suffix. Figure 1 provides examples of hostnames containing router names assigned by operators for Savvis, and a regex that captures those router names.

There are three key challenges:
1. We do not know if hostnames within a given suffix have any convention for embedding router names to begin with; if there is a convention, we do not know the specific regular expression components required to extract it, leading to a search space that is infeasible to learn through brute force.
2. Network operators may not keep hostnames in their suffix current or free of errors [29]; in these cases, even if an operator has a convention, stale hostnames could lead to an incorrect regex, or the regex could lead to incorrect inferences.
3. We rely on imperfect router training data, as alias resolution techniques are heuristic-based and only feasible for a subset of the Internet topology, and some aliases are incorrect (false positives), or absent (false negatives).

In light of these challenges, this paper makes the following four contributions:

1. **Scalable Method for Inferring Regexes:** We introduce a scalable method for accurately inferring regexes that extract router names from hostnames. Because it is not feasible to learn conventions with brute force, we built a method that, over the course of eight stages, finds general patterns in hostnames, learns any necessary literals and character classes to embed in the regexes, assembles conventions from regexes, and learns regexes that filter out hostnames with no router name component. The method is implemented in C, builds and evaluates regexes using parallel threads of execution, and uses compilation extensions in regex libraries that reduce runtime.

2. **Validation Using Ground Truth:** We validate our algorithm using ground truth from 10 network operators. We built a public website containing the regexes that form our inferred conventions, as well as a per-suffix demonstration showing the outcome of applying those regexes to router interface hostnames in our training data. We sent a link to the website to the North American Network Operators’ Group (NANOG) mailing list in April 2019. We received validation data covering 11 networks of different classes and scale from 10 operators, from a Tier-1 network and a large U.S. content provider to smaller access networks. The responses show that our inferred conventions capture the operators’ naming intent, though in two cases the conventions could have been improved with better training data. All 10 operators manually maintained their hostnames.

3. **Demonstration of Utility:** We demonstrate the utility of our algorithm by applying it to 16 sets of training data across 9 years. We used the 16 Internet Topology Data Kit (ITDK [5]) snapshots built by CAIDA between July 2010 and April 2019, which include routers inferred using the MIDAR [12] and Mercator techniques [8], and associated hostname strings, to automatically derive naming conventions for 2550 suffixes. The conventions inferred additional aliases for 19,136 routers in 619 suffixes for the 201904 ITDK, a 105% gain. Conventions we inferred for the IPv4 topology perfectly predicted IPv6 clustering for approximately 85% of overlapping suffixes, implying our conventions infer both IPv4 and IPv6 router aliases, a step towards analyzing router-level congruity of IPv4 and IPv6 paths.

4. **Public Release of Source Code and Website:** We publicly release the source code implementation and a website containing the inferred naming conventions. We named our tool Hoiho, for Holistic Orthography of Internet Hostname Observations, after a flightless native New Zealand bird [22]. To promote further validation and use of Hoiho, we publicly release our source code implementation as part of scamper [15]. The website we built for validation, containing the regexes and their application [17], allows researchers to obtain the regexes, understand how they work, and potential limitations given incongruities between the training data and our conventions.

We provide background in §2, discuss challenges in §3, and identify principles that address tensions in the algorithm in §4. §5 describes our algorithm, while §6 presents limitations of the approach.

### Definitions
- **Hostname:** A string stored in a DNS pointer (PTR) record for an IP address.
- **Suffix:** A label sequence at the end of a hostname identifying an administrative domain.
- **Extractor Regex:** A regex that extracts a possible router name from a hostname.
- **Filter Regex:** A regex that matches but does not extract a router name from a hostname.
- **Training Router:** A router where prior alias resolution techniques found aliases.
- **Training Set:** A set of training routers belonging to a suffix we use to infer a naming convention.
- **Application Set:** A set of router interfaces where prior alias resolution techniques did not find aliases.
- **Router Name:** A string common to interfaces of a router, different from other routers in the suffix.
- **Extracted Name:** The string extracted from a hostname by a candidate regex.
- **Naming Convention:** A set of filter and extractor regexes that capture the way operators embed router names in hostnames for a suffix.
- **Candidate Name:** The longest common substring across hostnames for a training router.

Figure 1: A regex that extracts unique router names for Savvis routers. Each router name is used consistently among interfaces on the same router and is not found in hostnames on other Savvis routers. §2.1 summarizes regex syntax.