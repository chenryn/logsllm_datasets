sandboxing (Seatbelt), 29–33 launchd, 19–21
stack protection (propolice), Leopard security. See Leopard
K
27–29 security
kdump command, 8–9 libraries Mach, 4–5
KERN_SUCCESS, 352 containing RTSP parsing code, Mach-O fi le format, 14–17
Kernel Programming Guide, 58–59 Objective-C language, 10–13
Apple, 295 loading, 307–310 tools, 8
kernel programming interface searching QuickTime for, universal binaries, 13–17
(KPI), IP Filter, 352–354 49–52 XNU kernel, 4
kextfi nd tool, 6–7 Library Randomization Mac OS X exploit payloads
kexts (kernel extensions) defi ned, 166 encoders and decoders, 217
building using Xcode, 328–330 Leopard security and, 22–24 executing shell, 216
debugging involving reboots, overcoming, 170 forking new process, 215–216
341–342 overcoming in stack buffer overview of, 214–215
hiding fi les in rootkit, 341 overfl ow exploit, 176–181 payload components, 218
hiding rootkit, 345 restoring privileges, 215
9955336633bbiinnddeexx..iinndddd 336633 11//2255//0099 44::4433::3399 PPMM
364 Index ■ N–O
staged payload execution, XCode project for, 42–44 fi le fuzzing QuickTime Player,
217–218 mDNSResponder, UPnP location 129–132
Mac OS X Finder, 332–336 header overfl ow, 276–287 high-quality fuzzed inputs, 125
Mac OS X Internals: A Systems exploiting on PowerPC, network fuzzing QuickTime
Approach (Addison-Wesley), 283–287 Player, 126–129
4, 186, 293, 295 exploiting vulnerability,
Mac OS X parlance, 35–61 279–283
N
Bonjour. See Bonjour overview of, 276–277
QuickTime Player. See triggering vulnerability, name translation, Bonjour, 37
QuickTime Player 277–279 NASM (Netwide Assembler), 238
Mac OS X Server, 63–68 memory NAT mappings,
Mach allocated from heap, 185–186 mDNSResponder, 277
abstractions, 294–296 automatically allocated stack, Netwide Assembler (NASM),
changing FreeBSD code to 162–163, 185 238
coexist with, 5 executable heap and, 24–26 network fuzzing, 126–129
exceptions, 297–300 freeing and allocating in heap, Network Time Protocol daemon
implementing through GDB, 187–192 (ntpd), 64, 67
86–87 in-memory fuzzing using New Media Playlist, QuickTime,
introduction to, 293–294 PyDbg, 99–102 54
security model, 296–297 as Mach abstraction, 294 NeXTSTEP, 293–294
within XNU kernel, 4, 294 QuickTime for Java real-world nm command, 174
Mach injection, 300–314 exploit, 287–290 No Execute (NX) bit, 24
example: iSight photo capture, remote process, 306–307 non-executable stack
311–314 searching using PyDbg, 98–99 exploiting, 173–181
inject-bundle( ) usage, 311 stack, 162–163 QuickTime RTSP exploit on x86
loading dynamic library or useful instruction sequences and, 275–276
bundle, 307–310 in, 182–183 stack buffer overfl ow exploit
overview of, 300–301 WebKit’s JavaScript, 204–207 and, 176–181
references, 326 memory tracer, DTrace, 95–96 NOP (no-operation) instructions
remote process memory, messages, Mach, 295 heap feng shui and, 201
306–307 metadata, overwriting heap, heap spraying and, 211
remote threads, 301–306 192–201 smashing stack on PowerPC,
mach_inject, 300–301 metadata headers, szone, 188 169–170
mach_inject_bundle( ) function, Metasploit Framework NSDecimal Number class, 153
300–301 QuickTime memory access NSLinkModule( ), 247–253
mach_msg_server( ), 300 exploit, 287–290 NSRunLoopt, 313–314
mach_override( ) function, QuickTime RTSP exploit. See NSString argument type, 322
314–318 QuickTime RTSP Content- nsysent variable, system calls,
mach_thread_trampoline, 302 Type header overfl ow 331–332
Mach-O (Mach object) fi le format UPnP exploit. See ntpd (Network Time Protocol
example, 15–17 mDNSResponder, UPnP daemon), 64, 67
inject_bundle exploit payload, location header overfl ow NULL bytes
244–254, 256–258 using in exploits, 290 avoiding for exploit payloads,
Mac OS X architecture, 14–17 method swizzling, Objective-C 214
mach-regions command, GDB, iChat spy example, 322–326 avoiding in decode_longxor
87 overview of, 318–322 payload, 225–226
magic addresses, 268–269, 281, references, 326 avoiding in execve_binsh
283 methods, possible RTSP, 52–53 payload, 223
magic constants, 188, 221 microkernel-based operating avoiding in local exploit
magic packet pattern,IP Filter system, 294 payloads, 217
rootkit, 353–354 MIG (Mach Interface Generator), executing shell passing, 216
mDNS name resolution, Bonjour, 295 numberHeap, WebKit, 206–207
37 Miller, Charlie, 121, 122, 124 NX (No Execute) bit, 24
mDNSCoreReceive function, MIME types
44–47 Safari support for, 75–76
O
mDNSCoreReceiveQuery safe fi le types, 79–80
function, 47 Morris, Robert, 161 Obj-C (Objective-C)
mDNSCoreReceiveResponse .mov, QuickTime fi le format, in Mac OS X architecture,
function, 47 47–52 10–13
mDNSMacOSXNetwork- Movie Atom, .mov fi les, 48–49 method swizzling, 318–322
Changed( ) function, 280–281 MPEG-4, 47 method swizzling, iChat spy
mDNSResponder MSG_PEEK fl ag, tcp_fi nd, 233 example, 322–326
code for sandboxing, 64–67 multithreaded processes, 215– Obj-C (Objective-C), reversing,
disabling Bonjour, 40 216, 235 140–150
source code for, 41–42 mutation-based approach case study, 150–154
9955336633bbiinnddeexx..iinndddd 336644 11//2255//0099 44::4433::3399 PPMM
Index ■ P–Q 365
cleaning up, 141–145 PLAY method, RTSP, 52–53 RTSP, 52–60
overview of, 140–141 playlists, adding fi le to, 54–55 providers, probes, 89
patching binaries, 154–156 plist (property list) fi les. See also pstalker (Process Stalker)
understanding objc_msgSend Info.plist fi le module, Pai Mei, 103
calls, 145–150 defi ned, 18 PT_DENY_ATTACH ptrace
objc_msgSend calls overview of, 19–21 request, 86, 108–109
cleaning up Obj-C, 144–145 plug-ins, Safari, 76–77 pthread_set_self( ) function,
reversing Obj-C, 140–141 popping stack, 162 Mach injection, 302–304
objc_msgSend calls, reversing ports pthread_trampoline, Mach
Obj-C comparing Multicast DNS injection, 302–303
case study, 150–154 with, 37 PTR records, DNS-SD, 38
understanding, 145–150 Mach, 295–297 ptrace debugging facilities,
object fi le displaying tool (otool), in nonstandard listening 85–86, 294
8 processes, 68–72 pushing stack, 162
object-oriented programming, in remote attacks on iTunes Pwn2Own contest
Objective-C, 10–11 using, 67–68 CanSecWest 2008 bug, 121–122
on_input() function, rootkit IP searching attack surface for source code for, 207–211
fi lter, 353–354 open, 64 vulnerability exploited in, 287
OnDemand key, confi guring POSIX threads, Mach injection, PyDbg, 96–107
launchd, 20 301–302 basics, 97–98
Open command, Xcode, 42 PowerPC binary code coverage with Pai
OpenBSD, W?X in, 24 exploiting mDNSResponder Mei, 102–107
open-source software, Apple UPnP vulnerability on, in-memory fuzzing, 99–102
prelease-vulnerability 283–287 memory searching, 98–99
collection, 124–125 exploiting QuickTime RTSP overview of, 96
updating, 121 Content-Type header Pai Mei built on top of, 103
OPTIONS headers, 52–53, 57 overfl ow on, 263–269 Python, 40–41, 96
otool (object fi le displaying fi nding useful instruction pyzeroconf package, 41
tool), 8 sequences, 181–182
overwriting heap metadata, Mach security model on Tiger
Q
192–201 for, 296–297
with arbitrary 4-byte smashing stack on, 165–170 QTHandleRef.toQTPointer( )
overwrite, 193–195 stack usage on, 163–164 method, 287–288
with large arbitrary memory PowerPC exploit payloads, QTPointerRef objects, 287–289
overwrite, 195–197 219–238 quanta of memory, 187
obtaining code execution, decode_longxor, 225–230 queries, Multicast DNS vs., 37
197–201 dup2_std_fds, 234–235 quicklookd, Seatbelt, 31–32
overview of, 192–193 execve_binsh, 221–223 QuickTime Player, 47–61
overview of, 219–221 fi le types played by, 47
putting together simple Info.plist from, 18–19
P payloads, 237–238 .mov, 47–52
Pai Mei, 95, 102–107 references, 259–260 network fuzzing targeting,
PAIMEIpstalker icon, 105–106 system, 223–224 126–129
patches tcp_connect, 232–233 overview of, 17–19
Apple taking many weeks to tcp_fi nd, 233–234 references, 61
provide, 124 tcp_listen, 231–232 using RTSP protocol, 52–60
binary, 154–156 testing simple components, QuickTime QTJava toQTPointer(
pattern_offset.rb tool, 236–237 ) memory access, 287–290
Metasploit, 265–266, 281, vfork, 235–236 exploiting toQTPointer( ),
285–287 primaryHeap, WebKit, 206 288–290
PAUSE method, RTSP, 53 Printer Sharing option, System obtaining code execution, 290
payload decoder stubs, 217 Preference, 71 overview of, 287–288
payload encoders privileges, exploit payload QuickTime RTSP Content-Type
decode_longxor payload, 226 development, 215 header overfl ow, 262–276
overview of, 217 probes, DTrace, 87–90 exploiting on PowerPC,
testing encoded payloads, process ID (PID), Mach tasks, 263–269
237–238 296 exploiting on x86, 273–276
payloads. See exploit payloads Process Stalker (pstalker) overview of, 262
PCRE code, 121, 122–123 module, Pai Mei, 103 retargeting to Leopard
peek, tcp_fi nd payload, 233 profi les, Seatbelt, 30–31 (PowerPC), 269–273
penetration testing, SSLSpy, Programming Under Mach triggering vulnerability, 262
315–318 (Addison-Wesley), 293 QuickTime Streaming Server,
PID (process ID), Mach tasks, 296 prolog, subroutine, 162–165 RTSP, 54–59
pid_for_task( ) authorization, 297 protocols
PIDA fi les, Pai Mei, 104–105 Bonjour. See Bonjour
9955336633bbiinnddeexx..iinndddd 336655 11//2255//0099 44::4433::3399 PPMM
366 Index ■ R–S
R patching CanSecWest 2008 providing remote access with,
RCDefaultApp, 75, 77–79 bug, 124–125 352–354
Real Time Streaming Protocol. remote access, rootkit providing, references, 358
See RTSP (Real Time 352–354 system calls, 330–332
Streaming Protocol) Remote Apple Events, Sharing RPC (remote procedure call),
real user IDs, 215 pane, 71–72 Mach
Real-Time Control Protocol Remote Login, Sharing pane, 71 controlling rootkit, 349–352
(RTCP), 57–58 remote procedure call. See RPC Mach security model, 298
RealTime Transport Protocol. (remote procedure call), overview of, 295
See RTP (RealTime Transport Mach RTCP (Real-Time Control
Protocol) remote process memory, Mach Protocol), 57–58
real-world exploits, 261–290 injection, 306–307 RTP (RealTime Transport
mDNSResponder UPnP remote threads, Mach injection, Protocol)
overfl ow. See 301–306 packet capture showing
mDNSResponder, UPnP remote_execution_loop transition from RTSP to,
location header overfl ow Intel x86 exploit payloads, 54–56
overview of, 261 241–244 RTSP using, 52
QuickTime memory access, output from testing, 258–259 streaming contents of media
287–290 testing, 254–255 via, 57–58
QuickTime RTSP overfl ow. See Rendezvous. See Bonjour RTSP (Real Time Streaming
QuickTime RTSP Content- ReportCrash (CrashReporter) Protocol)
Type header overfl ow fi le fuzzing of QuickTime defi ned, 35
references, 290 Player, 130–131 fuzzing of QuickTime Player,
reboots smashing stack on PowerPC 126–129
debugging kernel code using, 166–170 overview of, 52–60
involving, 341–342 smashing stack on x86, 172–173 real-world exploit. See
maintaining access across, ret instruction, 275–276 QuickTime RTSP Content-
346–349 return addresses, QuickTime Type header overfl ow
RECORD method, RTSP, 53 RTSP exploit, 266–267 references, 61
red zone, stack usage on return to system( ) function, Ruby scripts
PowerPC, 164 173–176 smashing stack on PowerPC,
REDIRECT method, RTSP, 53 return-to-libc exploits 166–167, 169–170
references executing payload from heap, smashing stack on x86, 172
attack surfaces, 81 176–181 run( ) function
Bonjour, 61 overview of, 173 inject_bundle usage, 311
bundle injection, 326 using return into system( ) iSight photo capture example,
exploit payloads, 259–260 function, 173–176 313
exploiting heap overfl ows, 212 reverse engineering, 135–157 loading dynamic library,
exploiting stack overfl ows, 184 case study, 150–154 309–310
fi nding bugs, 134 EIP-relative data addressing, testing complex components,
function hooking, 326 136 257
Leopard security, 34 identifying missed functions, x86 inject_bundle payload,
Mach injection, 326 138–140 247–254
Mach RPC, 295 messed-up jump tables,
Objective-C method swizzling, 137–138 S
326 .mov fi le format for, 49
QuickTime Player, 61 Pai Mei using, 103–107 Safari, 75–81
real-world exploits, 290 patching binaries, 154–156 exploiting, 80–81
reverse engineering, 157 references, 157 extended features and attack
rootkits, 358 reversing Obj-C. See Obj-C surface of, 75–77
RTSP, 61 (Objective-C), reversing Info.plist, 72–73
tracing and debugging, 112 rights, Mach port, 295–297 other applications spawned
regions, scalable zone allocator, RIP-relative data addressing, 136 by, 77–79
186–187 Robert Morris Internet worm, safe fi le types, 79–80
registers 161 sandboxing limitations of, 33
executing payload from heap, rootkits, 327–358 stack protection and, 28
179 controlling, 349–352 starting using launchd, 21
PowerPC architecture, 219–220 defi ning, 327 safe fi le types, 79–80
smashing stack on PowerPC, hardware-virtualization, sandbox_init( ) function, 30
165–170 354–358 sandboxes
smashing stack on x86, 171–172 hiding, 342–345 caveat to, 67
x86, 239 hiding fi les, 332–342 Leopard security and, 29–33
regular expressions kernel extensions, 327–330 mDNSResponder code for,
compiling, 121 maintaining access across 64–67
feng shui case study, 209, 211 reboots, 346–349 saved-set user IDs, 215
9955336633bbiinnddeexx..iinndddd 336666 11//2255//0099 44::4433::3399 PPMM
Index ■ T–U 367
scalable zone allocator, 187–192 SSL hiding fi les in rootkit, 332
scan_for_upnp_port( ) method, fuzzing from within program, on PowerPC, 220–221
277–279 99 working with, 330–332
Scheme programming language, SSLSpy example of function
Seatbelt, 31 hooking, 315–318
T
Screen Sharing option, Sharing SSLClose( ), hook for, 316–317
pane, 69 SSLHandshake( ), 316 targets, setting with Pai Mei, 106
.sdp playlist fi le, QuickTime stack overfl ows task_for_pid( ) authorizations,
Player, 56 RTSP, 53 Mach, 297–298
searching stack protection (propolice), tasks, Mach
for bugs. See bugs, searching 27–29 loading dynamic library or
for stack overfl ows, exploiting, bundle into, 307–310
memory, using PyDbg, 98–99 161–184 overview of, 294–296
Seatbelt, 29–33 fi nding useful instruction security model, 296–297
security. See also Leopard sequences, 181–184 TCP
security overview of, 161–162 searching attack surface of
Mach model, 296–300 real-world exploit. See Mac OS X Server, 64
perceiving Bonjour as risk QuickTime RTSP Content- transmitting RTSP over, 52
to, 40 Type header overfl ow tcp_connect, 232–233
testing using SSLSpy, 315–318 references, 184 tcp_fi nd, 233–234
segments, Obj-C binary, 141–142 smashing stack on PowerPC, tcp_listen, 231–232
servers, RTSP, 54–59 165–170 TEARDOWN method, RTSP, 53
server-side attacks, 63–72 smashing stack on x86, 170–173 test_component, 236–238
service discovery, Bonjour, 37–39 stack basics, 162–163 testing, complex payload
services, turning on, 68 stack usage on PowerPC, components in x86, 254–259
session identifi ers, RTSP, 52 163–164 thread_set_exception_ports(
SET_PARAMETER method, stack usage on x86, 164–165 ), 300
RTSP, 53 x86 non-executable stack, threads, Mach
seteuid( ) function, 215 173–181 injection, 298–300
setjmp( ) function, 176–178 stack pointer injection using remote, 301–306
setuid( ) function, 215 defi ned, 162 overview of, 294–296
SETUP method, RTSP, 52–53 setting breakpoint after Tiger
shared resources setting, 321 fi rewall used in, 29
constraints on exploit smashing stack on x86, 172 heap blocks on free list,
payloads, 214 stack usage on PowerPC, 188–189
containing in bundles, 17 163–164 introducing launchd, 19
Sharing pane, System stack usage on x86, 164–166 Mach security model on
Preferences, 68–72 stack protection (propolice), PowerPC, 296–297
shellcode 27–29 mDNSResponder running as
defi ned, 213 staged payload execution, root, 276
dynamically injected code 217–218 tiny allocations, szone, 186–191
as, 161 StartCalendarInterval key, 20 toggle_ipfi lter() function, rootkit
executing shell, 216 StartInterval key, 20 IP Filter, 353
The Shellcoder’s Handbook, 241 stateless, HTTP as, 52 tools, Mac OS X, 8
The Shellcoder’s Handbook, 241 static analysis, 114–115 tracing and debugging
SIGABRT signal, stack stmw instruction DTrace. See DTrace
protection, 28 defi ned, 220 GDB, 86–87
size execve_binsh payload, 222 iTunes, 108–111
atom structure of .mov fi le, 48 system payload, 224 ptrace, 85–86
constraints on exploit strcpy( ) function, 172 PyDbg. See PyDbg
payloads, 214 strdup( ) function, 179 references, 112
getting around constraints of subroutines trampolines, 302–305
exploit injection vectors, stack basics, 162–163 try/catch block, 209
217 stack usage on PowerPC,
small allocations, szone, 186–187, 163–164
U
191–192 stack usage on x86, 164–165
smashmystack( ) function, 172 .swf fi les, 76 UDP
source code, 44–47 sy_call fi eld, 331 searching attack surface of
source-code analysis, 115–122 sysent table, 330–331 Mac OS X Server, 64
CanSecWest 2008 bug, 121–122 system, 223–224 streaming media via RTP over,
code coverage, 116–121 system( ) function, return-to-libc 57–58
getting to source, 115–116 exploits, 173–174 transmitting RTSP over, 52
overview of, 115 system calls
using static analysis, 114 executing on x86, 240
9955336633bbiinnddeexx..iinndddd 336677 11//2255//0099 44::4433::3399 PPMM
368 Index ■ V–Z
Universal Plug and Play. See hyperjacking, 355–356 QuickTime RTSP exploit on,
UPnP (Universal Plug and rootkit hypervisor, 356–358 273–276
Play) vm_allocate( ) method, 186 smashing stack on, 170–173
UNIX VMCS (virtual-machine control stack usage on, 164–165
under Mach, 294 structure), 355–356 x86 exploit payloads
Mach security model vs., 296 VM-entry, 355 CISC architecture of, 239
sockets vs. Mach ports, 295 VM-exit events, 355, 356–358 common instructions, 239–240
update.sb, 32 VMM (virtual machine monitor), executing system calls, 240
UPnP (Universal Plug and Play) 355 inject_bundle, 244–254
exploiting on PowerPC, VMX-root mode, 355–357 references, 259–260
283–287 remote_execution_loop,
exploiting vulnerability, 241–244
W
279–283 testing complex components,
mDNSResponder creating WebKit 254–259
NAT mappings using, 277 exploiting JavaScript, 204–207 Xcode
triggering vulnerability, fi nding bugs in, 122 building simple kext using,
277–279 rapidity of Apple fi xes to 328–330
upnp_server( ) method, 277 publicly available, 124 defi ned, 8
URL handlers, 77–79 wide-area Bonjour, 35 in mDNSResponder, 42–44
user IDs, 215 wildcards, DTrace, 88–89 XD (Execute Disable) bit, 24–25
UserName key, launchd, 20 Windows XNU (Mac OS X) kernel
ustack( ) function, D, 95–96 application sandboxing and, 33 defi ned, 294
IDA Pro running only in, FreeBSD code within, 5
103–104 I/O Kit within, 5–7
V write4primitive, 289 Mac OS X architecture, 4
vfork( ) write-back caches, PowerPC, 225 Mach within, 4–5
defi ned, 235–236 W?X, 24 XOR decoding, 225–230
forking new process, 215–216
PowerPC exploit payloads,
235–236 X Z
video on demand, QuickTime x86 Zero Confi guration. See Bonjour
Player, 52–59 calling subroutines in Zero Confi guration Working
virtual machine monitor PowerPC vs., 163 Group, IETF, 36
(VMM), 355 exploiting non-executable 0x80 method, system calls on
virtual-machine control stack, 173–181 x86, 240
structure (VMCS), 355–356 extensive use of stack on, 163 Zeroconf. See Bonjour
Vitriol, hardware-virtualization fi nding useful instruction zones, 186. See also scalable zone
rootkit sequences, 182–184 allocator
defi ned, 354
9955336633bbiinnddeexx..iinndddd 336688 11//2255//0099 44::4433::3399 PPMM