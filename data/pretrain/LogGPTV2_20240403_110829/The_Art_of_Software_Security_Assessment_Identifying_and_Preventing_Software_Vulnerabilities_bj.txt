in Listing 6-28. 
Listing 6-28. Modulus Vulnerability Example 
#define SESSION_SIZE 1024 
struct session { 
    struct session *next; 
    int session_id; 
} 
struct header { 
   int session_id; 
   ... 
}; 
struct session *sessions[SESSION_SIZE]; 
struct session *session_new(int session_id) 
{ 
    struct session *new1, *tmp; 
    new1 = malloc(sizeof(struct session)); 
    if(!new1) 
        die("malloc: %m"); 
    new1->session_id = session_id; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
293 
    new1->next = NULL; 
    if(!sessions[session_id%(SESSION_SIZE-1)]) 
    { 
        sessions[session_id%(SESSION_SIZE-1] = new1; 
        return new1; 
    } 
    for(tmp = sessions[session_id%(SESSION_SIZE-1)]; tmp->next; 
        tmp = tmp->next); 
    tmp->next = new1; 
    return new1; 
} 
int read_packet(int sockfd) 
{ 
    struct session *session; 
    struct header hdr; 
    if(full_read(sockfd, (void *)&hdr, sizeof(hdr)) != 
       sizeof(hdr)) 
    { 
        error("read: %m"); 
        return 1; 
    } 
    if((session = session_find(hdr.session_id)) == NULL) 
    { 
        session = session_new(hdr.sessionid); 
        return 0; 
    } 
    ... validate packet with session ... 
    return 0; 
} 
As you can see, a header is read from the network, and session information is 
retrieved from a hash table based on the header's session identifier field. The sessions 
are stored in the sessions hash table for later retrieval by the program. If the session 
identifier is negative, the result of the modulus operator is negative, and 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
294 
out-of-bounds elements of the sessions array are indexed and possibly written to, 
which would probably be an exploitable condition. 
As with the right-shift operator, unsigned and signed divide and modulus operations 
can be distinguished easily in Intel assembly code. The mnemonic for the unsigned 
division instruction is div and its signed counterpart is idiv. Table 6-10 shows the 
difference between signed and unsigned divide operations. Note that compilers often 
use right-shift operations rather than division when the divisor is a constant. 
Table 6-10. Signed Versus Unsigned Divide Operations in Assembly 
Signed Divide Operations Unsigned Divide Operations 
mov eax, [ebp+8] 
mov eax, [ebp+8] 
mov ecx, [ebp+c] 
mov ecx, [ebp+c] 
cdq 
cdq 
idiv ecx 
div ecx 
ret 
ret 
Auditing Tip: Unexpected Results 
Whenever you encounter a right shift, be sure to check whether the left operand is 
signed. If so, there might be a slight potential for a vulnerability. Similarly, look for 
modulus and division operations that operate with signed operands. If users can 
specify negative values, they might be able to elicit unexpected results. 
7.2.8 Pointer Arithmetic 
Pointers are usually the first major hurdle that beginning C programmers encounter, 
as they can prove quite difficult to understand. The rules involving pointer arithmetic, 
dereferencing and indirection, pass-by-value semantics, pointer operator precedence, 
and pseudo-equivalence with arrays can be challenging to learn. The following 
sections focus on a few aspects of pointer arithmetic that might catch developers by 
surprise and lead to possible security exposures. 
Pointer Overview 
You know that a pointer is essentially a location in memoryan addressso it's a data 
type that's necessarily implementation dependent. You could have strikingly different 
pointer representations on different architectures, and pointers could be 
implemented in different fashions even on the 32-bit Intel architecture. For example, 
you could have 16-bit code, or even a compiler that transparently supported custom 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
295 
virtual memory schemes involving segments. So assume this discussion uses the 
common architecture of GCC or vc++ compilers for userland code on Intel machines. 
You know that pointers probably have to be unsigned integers because valid virtual 
memory addresses can range from 0x0 to 0xffffffff. That said, it seems slightly odd 
when you subtract two pointers. Wouldn't a pointer need to somehow represent 
negative values as well? It turns out that the result of the subtraction isn't a pointer 
at all; instead, it's a signed integer type known as a ptrdiff_t. 
Pointers can be freely converted into integers and into pointers of other types with the 
use of casts. However, the compiler makes no guarantee that the resulting pointer or 
integer is correctly aligned or points to a valid object. Therefore, pointers are one of 
the more implementation-dependent portions of the C language. 
Pointer Arithmetic Overview 
When you do arithmetic with a pointer, what occurs? Here's a simple example of 
adding 1 to a pointer: 
short *j; 
j=(short *)0x1234; 
j = j + 1; 
This code has a pointer to a short named j. It's initialized to an arbitrary fixed address, 
0x1234. This is bad C code, but it serves to get the point across. As mentioned 
previously, you can treat pointers and integers interchangeably as long you use casts, 
but the results depend on the implementation. You might assume that after you add 
1 to j, j is equal to 0x1235. However, as you probably know, this isn't what happens. 
j is actually 0x1236. 
When C does arithmetic involving a pointer, it does the operation relative to the size 
of the pointer's target. So when you add 1 to a pointer to an object, the result is a 
pointer to the next object of that size in memory. In this example, the object is a short 
integer, which takes up 2 bytes (on the 32-bit Intel architecture), so the short 
following 0x1234 in memory is at location 0x1236. If you subtract 1, the result is the 
address of the short before the one at 0x1234, which is 0x1232. If you add 5, you get 
the address 0x123e, which is the fifth short past the one at 0x1234. 
Another way to think of it is that a pointer to an object is treated as an array 
composed of one element of that object. So j, a pointer to a short, is treated like the 
array short j[1], which contains one short. Therefore, j + 2 would be equivalent to 
&j[2]. Table 6-11 shows this concept. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
296 
Table 6-11. Pointer Arithmetic and Memory 
Pointer Expression Array Expression Address 
j - 2 
&j[-2] 
0x1230 
0x1231 
j - 1 
&j[-1] 
0x1232 
0x1233 
j 
j or &j[0] 
0x1234 
0x1235 
j + 1 
&j[1] 
0x1236 
0x1237 
j + 2 
&j[2] 
0x1238 
0x1239 
j + 3 
&j[3] 
0x123a 
0x123b 
j + 4 
&j[4] 
0x123c 
0x123d 
j + 5 
&j[5] 
0x123e 
0x123f 
Now look at the details of the important pointer arithmetic operators, covered in the 
following sections. 
Addition 
The rules for pointer addition are slightly more restrictive than you might expect. You 
can add an integer type to a pointer type or a pointer type to an integer type, but you 
can't add a pointer type to a pointer type. This makes sense when you consider what 
pointer addition actually does; the compiler wouldn't know which pointer to use as the 
base type and which to use as an index. For example, look at the following operation: 
unsigned short *j; 
unsigned long *k; 
x = j+k; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
297 
This operation would be invalid because the compiler wouldn't know how to convert j 
or k into an index for the pointer arithmetic. You could certainly cast j or k into an 
integer, but the result would be unexpected, and it's unlikely someone would do this 
intentionally. 
One interesting rule of C is that the subscript operator falls under the category of 
pointer addition. The C standard states that the subscript operator is equivalent to an 
expression involving addition in the following way: 
E1[E2] is equivalent to (*((E1)+(E2))) 
With this in mind, look at the following example: 
char b[10]; 
b[4]='a'; 
The expression b[4] refers to the fifth object in the b character array. According to the 
rule, here's the equivalent way of writing it: 
(*((b)+(4)))='a'; 
You know from your earlier analysis that b + 4, with b of type pointer to char, is the 
same as saying &b[4]; therefore, the expression would be like saying (*(&b[4])) or 
b[4]. 
Finally, note that the resulting type of the addition between an integer and a pointer 
is the type of the pointer. 
Subtraction 
Subtraction has similar rules to addition, except subtracting one pointer from another 
is permissible. When you subtract a pointer from a pointer of the same type, you're 
asking for the difference in the subscripts of the two elements. In this case, the 
resulting type isn't a pointer but a ptrdiff_t, which is a signed integer type. The C 
standard indicates it should be defined in the stddef.h header file. 
Comparison 
Comparison between pointers works as you might expect. They consider the relative 
locations of the two pointers in the virtual address space. The resulting type is the 
same as with other comparisons: an integer type containing a 1 or 0. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
298 
Conditional Operator 
The conditional operator (?) can have pointers as its last two operands, and it has to 
reconcile their types much as it does when used with arithmetic operands. It does this 
by applying all qualifiers either pointer type has to the resulting type. 
Vulnerabilities 
Few vulnerabilities involving pointer arithmetic have been widely publicized, at least 
in the sense being described here. Plenty of vulnerabilities that involve manipulation 
of character pointers essentially boil down to miscounting buffer sizes, and although 
they technically qualify as pointer arithmetic errors, they aren't as subtle as pointer 
vulnerabilities can get. The more pernicious form of problems are those in which 
developers mistakenly perform arithmetic on pointers without realizing that their 
integer operands are being scaled by the size of the pointer's target. Consider the 
following code: 
int buf[1024]; 
int *b=buf; 
while (havedata() && b = (size  sizeof(wchar_t)) 
    { 
       free(new); 
       die("too much data"); 
    } 
    *sep = '\0'; 
    wcscat(new, string); 
    return new; 
} 
Auditing Tip 
Pointer arithmetic bugs can be hard to spot. Whenever an arithmetic operation is 
performed that involves pointers, look up the type of those pointers and then check 
whether the operation agrees with the implicit arithmetic taking place. In Listing 6-29, 
has sizeof() been used incorrectly with a pointer to a type that's not a byte? Has a 
similar operation happened in which the developer assumed the pointer type won't 
affect how the operation is performed? 
7.2.9 Other C Nuances 
The following sections touch on features and dark corners of the C language where 
security-relevant mistakes could be made. Not many real-world examples of these 
vulnerabilities are available, yet you should still be aware of the potential risks. Some 
examples might seem contrived, but try to imagine them as hidden beneath layers of 
macros and interdependent functions, and they might seem more realistic. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
300 
Order of Evaluation 
For most operators, C doesn't guarantee the order of evaluation of operands or the 
order of assignments from expression "side effects." For example, consider this code: 
printf("%d\n", i++, i++); 
There's no guarantee in which order the two increments are performed, and you'll find 
that the output varies based on the compiler and the architecture on which you 
compile the program. The only operators for which order of evaluation is guaranteed 
are &&, ||, ?:, and ,. Note that the comma doesn't refer to the arguments of a function; 
their evaluation order is implementation defined. So in something as simple as the 
following code, there's no guarantee that a() is called before b(): 
x = a() + b(); 
Ambiguous side effects are slightly different from ambiguous order of evaluation, but 
they have similar consequences. A side effect is an expression that causes the 
modification of a variablean assignment or increment operator, such as ++. The order 
of evaluation of side effects isn't defined within the same expression, so something 
like the following is implementation defined and, therefore, could cause problems: 
a[i] = i++; 
How could these problems have a security impact? In Listing 6-30, the developer uses 
the getstr() call to get the user string and pass string from some external source. 
However, if the system is recompiled and the order of evaluation for the getstr() 
function changes, the code could end up logging the password instead of the 
username. Admittedly, it would be a low-risk issue caught during testing. 
Listing 6-30. Order of Evaluation Logic Vulnerability 
int check_password(char *user, char *pass) 
{ 
    if (strcmp(getpass(user), pass)) 
    { 
        logprintf("bad password for user %s\n", user); 
        return -1; 
    } 
    return 0; 
} 
... 
if (check_password(getstr(), getstr()) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
301 
    exit(1); 
Listing 6-31 has a copy_packet() function that reads a packet from the network. It 
uses the GET32() macro to pull an integer from the packet and advance the pointer. 
There's a provision for optional padding in the protocol, and the presence of the 
padding size field is indicated by a flag in the packet header. So if FLAG_PADDING is set, 
the order of evaluation of the GET32() macros for calculating the datasize could 
possibly be reversed. If the padding option is in a fairly unused part of the protocol, an 
error of this nature could go undetected in production use. 
Listing 6-31. Order of Evaluation Macro Vulnerability 
#define GET32(x) (*((unsigned int *)(x))++) 
u_char *copy_packet(u_char *packet) 
{ 