      has(name: string): boolean;
      set(name: string, value: string): void;
      forEach(
        callbackfn: (value: string, key: string, parent: Headers) => void,
        thisArg?: any
      ): void;
    }
    interface Headers extends DomIterable {
      /** Appends a new value onto an existing header inside a `Headers` object, or
       * adds the header if it does not already exist.
       */
      append(name: string, value: string): void;
      /** Deletes a header from a `Headers` object. */
      delete(name: string): void;
      /** Returns an iterator allowing to go through all key/value pairs
       * contained in this Headers object. The both the key and value of each pairs
       * are ByteString objects.
       */
      entries(): IterableIterator;
      /** Returns a `ByteString` sequence of all the values of a header within a
       * `Headers` object with a given name.
       */
      get(name: string): string | null;
      /** Returns a boolean stating whether a `Headers` object contains a certain
       * header.
       */
      has(name: string): boolean;
      /** Returns an iterator allowing to go through all keys contained in
       * this Headers object. The keys are ByteString objects.
       */
      keys(): IterableIterator;
      /** Sets a new value for an existing header inside a Headers object, or adds
       * the header if it does not already exist.
       */
      set(name: string, value: string): void;
      /** Returns an iterator allowing to go through all values contained in
       * this Headers object. The values are ByteString objects.
       */
      values(): IterableIterator;
      forEach(
        callbackfn: (value: string, key: string, parent: this) => void,
        thisArg?: any
      ): void;
      /** The Symbol.iterator well-known symbol specifies the default
       * iterator for this Headers object
       */
      [Symbol.iterator](): IterableIterator;
    }
    declare const Headers: {
      prototype: Headers;
      new (init?: HeadersInit): Headers;
    };
    type RequestInfo = Request | string;
    type RequestCache =
      | "default"
      | "force-cache"
      | "no-cache"
      | "no-store"
      | "only-if-cached"
      | "reload";
    type RequestCredentials = "include" | "omit" | "same-origin";
    type RequestMode = "cors" | "navigate" | "no-cors" | "same-origin";
    type RequestRedirect = "error" | "follow" | "manual";
    type ReferrerPolicy =
      | ""
      | "no-referrer"
      | "no-referrer-when-downgrade"
      | "origin"
      | "origin-when-cross-origin"
      | "same-origin"
      | "strict-origin"
      | "strict-origin-when-cross-origin"
      | "unsafe-url";
    type BodyInit =
      | Blob
      | BufferSource
      | FormData
      | URLSearchParams
      | ReadableStream
      | string;
    type RequestDestination =
      | ""
      | "audio"
      | "audioworklet"
      | "document"
      | "embed"
      | "font"
      | "image"
      | "manifest"
      | "object"
      | "paintworklet"
      | "report"
      | "script"
      | "sharedworker"
      | "style"
      | "track"
      | "video"
      | "worker"
      | "xslt";
    interface RequestInit {
      /**
       * A BodyInit object or null to set request's body.
       */
      body?: BodyInit | null;
      /**
       * A string indicating how the request will interact with the browser's cache
       * to set request's cache.
       */
      cache?: RequestCache;
      /**
       * A string indicating whether credentials will be sent with the request
       * always, never, or only when sent to a same-origin URL. Sets request's
       * credentials.
       */
      credentials?: RequestCredentials;
      /**
       * A Headers object, an object literal, or an array of two-item arrays to set
       * request's headers.
       */
      headers?: HeadersInit;
      /**
       * A cryptographic hash of the resource to be fetched by request. Sets
       * request's integrity.
       */
      integrity?: string;
      /**
       * A boolean to set request's keepalive.
       */
      keepalive?: boolean;
      /**
       * A string to set request's method.
       */
      method?: string;
      /**
       * A string to indicate whether the request will use CORS, or will be
       * restricted to same-origin URLs. Sets request's mode.
       */
      mode?: RequestMode;
      /**
       * A string indicating whether request follows redirects, results in an error
       * upon encountering a redirect, or returns the redirect (in an opaque
       * fashion). Sets request's redirect.
       */
      redirect?: RequestRedirect;
      /**
       * A string whose value is a same-origin URL, "about:client", or the empty
       * string, to set request's referrer.
       */
      referrer?: string;
      /**
       * A referrer policy to set request's referrerPolicy.
       */
      referrerPolicy?: ReferrerPolicy;
      /**
       * An AbortSignal to set request's signal.
       */
      signal?: AbortSignal | null;
      /**
       * Can only be null. Used to disassociate request from any Window.
       */
      window?: any;
    }
    /** This Fetch API interface represents a resource request. */
    interface Request extends Body {
      /**
       * Returns the cache mode associated with request, which is a string
       * indicating how the request will interact with the browser's cache when
       * fetching.
       */
      readonly cache: RequestCache;
      /**
       * Returns the credentials mode associated with request, which is a string
       * indicating whether credentials will be sent with the request always, never,
       * or only when sent to a same-origin URL.
       */
      readonly credentials: RequestCredentials;
      /**
       * Returns the kind of resource requested by request, e.g., "document" or "script".
       */
      readonly destination: RequestDestination;
      /**
       * Returns a Headers object consisting of the headers associated with request.
       * Note that headers added in the network layer by the user agent will not be
       * accounted for in this object, e.g., the "Host" header.
       */
      readonly headers: Headers;
      /**
       * Returns request's subresource integrity metadata, which is a cryptographic
       * hash of the resource being fetched. Its value consists of multiple hashes
       * separated by whitespace. [SRI]
       */
      readonly integrity: string;
      /**
       * Returns a boolean indicating whether or not request is for a history
       * navigation (a.k.a. back-forward navigation).
       */
      readonly isHistoryNavigation: boolean;
      /**
       * Returns a boolean indicating whether or not request is for a reload
       * navigation.
       */
      readonly isReloadNavigation: boolean;
      /**
       * Returns a boolean indicating whether or not request can outlive the global
       * in which it was created.
       */
      readonly keepalive: boolean;
      /**
       * Returns request's HTTP method, which is "GET" by default.
       */
      readonly method: string;
      /**
       * Returns the mode associated with request, which is a string indicating
       * whether the request will use CORS, or will be restricted to same-origin
       * URLs.
       */
      readonly mode: RequestMode;
      /**
       * Returns the redirect mode associated with request, which is a string
       * indicating how redirects for the request will be handled during fetching. A
       * request will follow redirects by default.
       */
      readonly redirect: RequestRedirect;
      /**
       * Returns the referrer of request. Its value can be a same-origin URL if
       * explicitly set in init, the empty string to indicate no referrer, and
       * "about:client" when defaulting to the global's default. This is used during
       * fetching to determine the value of the `Referer` header of the request
       * being made.
       */
      readonly referrer: string;
      /**
       * Returns the referrer policy associated with request. This is used during
       * fetching to compute the value of the request's referrer.
       */
      readonly referrerPolicy: ReferrerPolicy;
      /**
       * Returns the signal associated with request, which is an AbortSignal object
       * indicating whether or not request has been aborted, and its abort event
       * handler.
       */
      readonly signal: AbortSignal;
      /**
       * Returns the URL of request as a string.
       */
      readonly url: string;
      clone(): Request;
    }
    declare const Request: {
      prototype: Request;
      new (input: RequestInfo, init?: RequestInit): Request;
    };
    type ResponseType =
      | "basic"
      | "cors"
      | "default"
      | "error"
      | "opaque"
      | "opaqueredirect";
    /** This Fetch API interface represents the response to a request. */
    interface Response extends Body {
      readonly headers: Headers;
      readonly ok: boolean;
      readonly redirected: boolean;
      readonly status: number;
      readonly statusText: string;
      readonly trailer: Promise;
      readonly type: ResponseType;
      readonly url: string;
      clone(): Response;
    }
    declare const Response: {
      prototype: Response;
      // TODO(#4667) Response constructor is non-standard.
      // new(body?: BodyInit | null, init?: ResponseInit): Response;
      new (
        url: string,
        status: number,
        statusText: string,
        headersList: Array,
        rid: number,
        redirected_: boolean,
        type_?: null | ResponseType,
        body_?: null | Body
      ): Response;
      error(): Response;
      redirect(url: string, status?: number): Response;
    };
    /** Fetch a resource from the network. */
    declare function fetch(
      input: Request | URL | string,
      init?: RequestInit
    ): Promise;
    declare function atob(s: string): string;
    /** Creates a base-64 ASCII string from the input string. */
    declare function btoa(s: string): string;
    declare class TextDecoder {
      /** Returns encoding's name, lowercased. */
      readonly encoding: string;
      /** Returns `true` if error mode is "fatal", and `false` otherwise. */
      readonly fatal: boolean;
      /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */
      readonly ignoreBOM = false;
      constructor(
        label?: string,
        options?: { fatal?: boolean; ignoreBOM?: boolean }
      );
      /** Returns the result of running encoding's decoder. */
      decode(input?: BufferSource, options?: { stream?: false }): string;
      readonly [Symbol.toStringTag]: string;
    }
    declare class TextEncoder {
      /** Returns "utf-8". */
      readonly encoding = "utf-8";
      /** Returns the result of running UTF-8's encoder. */
      encode(input?: string): Uint8Array;
      encodeInto(
        input: string,
        dest: Uint8Array
      ): { read: number; written: number };
      readonly [Symbol.toStringTag]: string;
    }
    interface URLSearchParams {
      /** Appends a specified key/value pair as a new search parameter.
       *
       * ```ts
       * let searchParams = new URLSearchParams();
       * searchParams.append('name', 'first');
       * searchParams.append('name', 'second');
       * ```
       */
      append(name: string, value: string): void;
      /** Deletes the given search parameter and its associated value,
       * from the list of all search parameters.
       *
       * ```ts
       * let searchParams = new URLSearchParams([['name', 'value']]);
       * searchParams.delete('name');
       * ```
       */
      delete(name: string): void;
      /** Returns all the values associated with a given search parameter
       * as an array.
       *
       * ```ts
       * searchParams.getAll('name');
       * ```
       */
      getAll(name: string): string[];
      /** Returns the first value associated to the given search parameter.
       *
       * ```ts
       * searchParams.get('name');
       * ```
       */
      get(name: string): string | null;
      /** Returns a Boolean that indicates whether a parameter with the
       * specified name exists.
       *
       * ```ts
       * searchParams.has('name');
       * ```
       */
      has(name: string): boolean;
      /** Sets the value associated with a given search parameter to the
       * given value. If there were several matching values, this method
       * deletes the others. If the search parameter doesn't exist, this
       * method creates it.
       *
       * ```ts
       * searchParams.set('name', 'value');
       * ```
       */
      set(name: string, value: string): void;
      /** Sort all key/value pairs contained in this object in place and
       * return undefined. The sort order is according to Unicode code
       * points of the keys.
       *
       * ```ts
       * searchParams.sort();
       * ```
       */
      sort(): void;
      /** Calls a function for each element contained in this object in
       * place and return undefined. Optionally accepts an object to use
       * as this when executing callback as second argument.
       *
       * ```ts
       * const params = new URLSearchParams([["a", "b"], ["c", "d"]]);
       * params.forEach((value, key, parent) => {
       *   console.log(value, key, parent);
       * });
       * ```
       *
       */
      forEach(
        callbackfn: (value: string, key: string, parent: this) => void,
        thisArg?: any
      ): void;
      /** Returns an iterator allowing to go through all keys contained
       * in this object.
       *
       * ```ts
       * const params = new URLSearchParams([["a", "b"], ["c", "d"]]);