Code Hash
Ether
Contracts
TXs
Veriﬁed
Opacity Reduction (number of functions)
375196a08a62ab4ddf550268a2279bf0bd3e7c56 737,021
0fb47c13d3b1cdc3c44e2675009c6d5ed774f4dc 466,648
69d8021055765a22d2c56f67c3ac86bdfa594b69 373,023
a08cfc07745d615af72134e09936fdb9c90886af 84,920
319ee480a443775a00e14cb9ecd73261d4114bee 76,281
a8cc173d9aef2cf752e4bf5b229d224e17838128 67,747
037ca41c00d8e920388445d0d5ce03086e816137 67,317
20f46ba0d13affc396c62af9ee1ff633bc49d8b7 53,961
88ec201907d7ba7cedf115abb92e18c41a4a745d 51,879
c5fbfc4b75ead59e98ff11acbf094830090eeee9 43,418
1
1
1
1
3
3
1
1
1
13
8
3504
225
151
7819
83
20,742
52
75
104










87.5%
100%
–
89.5%
–
–
–
54.2%
–
0%
Table 3: Top Contracts by Balance—We show the top 10 contracts by balance, as well as their transaction volume, whether they
matched exactly to veriﬁed code, and their opacity reduction after applying Erays if they did not match to source code. Of the top
contracts without source code, Erays was able to reduce their function opacity by an average of 66%.
requestWithdrawal method, however, the contract will
not release the funds until the approveWithdrawal func-
tion is invoked twice, with at least one invocation mes-
sage signed by an additional administrator. Thus far, the
approveWithdrawal transactions are initiated from a
different address than the administrators. One administra-
tor address has never been used, indicating that runtime
analysis would not adequately capture all of the aspects
of this contract.
The third Gemini contract contains a more complicated,
time-based access control policy. Withdrawals cannot be
approved immediately, but instead must remain pending
for a short period of time. Through Erays, we ﬁnd that the
requestWithdrawal method in this contract features
a time dependency hazard, which is a known class of
Solidity hazards. When generating a unique identiﬁer
for a new withdrawal, the contract uses the hash of both
a global counter as well as the hash of the previously
mined block. The dependence on the previous block hash
means that if a short “fork” happens in the blockchain,
two different log events for the same withdrawal may be
received by the exchange. The exchange must, as a result,
take special care in responding to such log messages on
the blockchain. We note that in the past, cryptocurrency
exchanges have failed to handle related hazards, resulting
in signiﬁcant losses [21].
Access control policies used internally by ﬁnancial ser-
vices would typically be private, not exposed to users or
the public. However, due to the public nature of Ethereum
bytecode, we have demonstrated the potential to audit
such policies when they are implemented as smart con-
tracts.
6.2 Exchange Accounts
We next investigate the contracts that appear most fre-
quently on the blockchain. We anticipated many of these
contracts would simply be copy-paste contracts based on
publicly accessible code—however, we were surprised
to ﬁnd hundreds of thousands of identical contracts, all
opaque. We ﬁnd that many of these contracts are associ-
ated with large exchanges that create one contract instance
for each user account.
Poloniex Exchange Wallets
The largest cluster of
identical opaque contracts appears a total of 349,612 times
on the Ethereum blockchain. All of these contracts were
created by one address, 0xb42b...579, which is thought
to be associated with the Poloniex exchange.5 We reverse
engineer these contracts and uncover their underlying
structure. We ﬁnd that Poloniex wallets deﬁne a customer
to whom all wallet deposits are ultimately paid. They
directly transfer Ether to the customer whenever Ether is
deposited into them, acting as an intermediary between
the Poloniex exchange and the customer.
Yunbi Token Wallets We found another cluster of con-
tracts that appeared 89,133 times on the blockchain, that
belongs to the Yunbi exchange. Through reverse engineer-
ing, we ﬁnd that the wallets allow any address to deposit
Ether, but restrict withdrawal transactions to a whitelisted
administrator (Yunbi 0x42da...63dc). The administra-
tor can trigger Ether and token transfers from the wallet,
however, the tokens are transferred out of the balance of
the Yunbi exchange—the address of the depositor does
not ever own any tokens.
Exchange Splitting Contract We found several
opaque contracts thought to be gadgets used by the Gem-
ini4 and ShapeShift exchanges [23] to defend against
replay attacks following the hard fork between Ethereum
and Ethereum Classic. The contracts serve as a split-
ter that sits between the exchange and users depositing
to it, checking whether a user is depositing coins to the
Ethereum Classic chain or the Ethereum chain. Depend-
ing on which chain the transaction appears on, the Ether
value of the message is sent to a different address.
Opacity in communications with ﬁnancial institutions
5An Ethereum Developer on Reddit communicated with Poloniex
regarding this address and conﬁrmed it belongs to them.
1380    27th USENIX Security Symposium
USENIX Association
over the Internet is expected practice—we do not see
the code that runs the online banking services we use.
This expectation has seemingly carried over to Ethereum
exchanges, but with unforeseen consequences: publicly
available bytecode for a particular program can be reverse
engineered, and made simpler with tools like Erays. An
expectation for opacity is dangerous, as it may lead to lax
attention to security details.
6.3 Arbitrage Bots on Etherdelta
We next leverage Erays to investigate the role of arbitrage
bots on EtherDelta [2], a popular decentralized exchange.
EtherDelta enables traders to deposit Ether or ERC20
tokens, and then create open offers to exchange their
currency for other currencies. EtherDelta is the largest
smart contract-based exchange by trade volume, with over
$7 million USD daily volume at the time of writing.
On occasion, arbitrage opportunities will appear on
EtherDelta, where simultaneously buying and selling a
token across two currencies can yield an immediate proﬁt.
Such opportunities are short lived, since arbitrageurs com-
pete to take advantage of favorable trades as rapidly as
possible. A successful arbitrage requires making a pair
(or more) of simultaneous trades. In order to reduce risk,
many arbitrageurs have built Ethereum smart contracts
that send batch trades through EtherDelta. We use Erays
to reverse engineer these contracts and investigate their
inner-workings.
To begin, we built a list of 30 suspected arbitrage con-
tracts by scanning transactions within blocks 3,900,000
to block 4,416,600, and selected contracts that both make
internal calls to EtherDelta and generate two trade events
in a single transaction. To prune our list, we ran our simi-
larity metric (described in Section 5) over every pair of
the 30 contracts and found three clusters of highly similar
(> 50% similarity) contracts. We then reverse engineered
one representative contract from each group.
All three clusters of contracts share the same high-level
behavior. The arbitrageur initiates a trade by sending a
message to the contract, which ﬁrst performs an access
control check to ensure that it is only invoked by the
contract’s original creator. Next, the contract queries
the availableVolume method in EtherDelta, to identify
how much of their open offer remains for a given trade.
For example, consider a trader who makes an offer of 10
Ether at a price of $1,000 USD. If 8 Ether were purchased,
availableVolume would return a value of 2.
If the
contract ﬁnds there is sufﬁcient balance on its open offer,
it then calls the trade function in EtherDelta twice, thus
executing the arbitrage trade. If either trade fails, the
entire transaction is aborted using the REVERT opcode.
Several arbitrage contracts we investigated exhibited
Immediately be-
different variations of this behavior.
fore calling the trade function, one group of contracts
executes the testTrade function, presumably in an at-
tempt to reduce risk. However, since testTrade calls
the availableVolume function again, this is redundant
and wastes gas.6 Another group of contracts appears to
obscure the values of their method arguments by perform-
ing an XOR with a hardcoded mask. Such obfuscation is
presumably intended to prevent network nodes and other
arbitrageurs from front-running or interfering with their
transaction. However, this thin veneer becomes transpar-
ent through reverse engineering with Erays.
6.4 De-obfuscating Cryptokitties
Cryptokitties is a popular smart contract based trading
game on Ethereum. The game involves buying, breeding,
and selling virtual pets. As of January 29, 2018, the
top 10 “kitties” are worth more than $2.5 M combined.
During their peak, they were so popular that gas prices
and transaction conﬁrmation times slowed heavily due to
Cryptokitties trafﬁc [1, 28].
Although most of the Cryptokitties source code is pub-
lished, a central component of the game code is deliber-
ately kept opaque in order to alter the gameplay. Cryp-
tokitties contain an opaque function, mixGenes(uint32
matron, uint32):uint32, which creates a new kitty
by splicing together 32-byte genomes from each of two
“parents”. Kitties are assigned certain visual characteris-
tics based on their genome, and rare attributes can yield
very proﬁtable kitties. The gameplay effect of opacity is
to make it challenging for users to “game” the gene splic-
ing contract in order to increase the chances of breeding
a rare cat. Although the high-level code is known to the
developers, the developers have committed to a policy of
not playing the game or utilizing this information. As
a ﬁnal case study, we apply Erays to the Cryptokitties
contract.
With 3 hours of reverse engineering work using Erays,
we were able to create a Solidity contract whose output
exactly matches the output of the mixGenes function on
the blockchain. We ﬁnd that the mixGenes function is
comprised of three main parts. The ﬁrst selects the ran-
domness that will be used: if the hash of the input block
number is 0, it is masked with the current block number.
The new block number and its hash are concatenated with
the parent’s genes as input to the keccak256 hash func-
tion, whose output is used as the source of randomness
for the rest of the execution. Second, the genes of each
parent are split into 5 bit segments and mixed. For each
5-bit gene, one of the parents’ genes is chosen as the
output gene with 50% probability. Finally, a particular
gene is mutated with 25% probability if the larger of the
6See Chen et al [16] for a survey of underoptimization in Ethereum
contracts.
USENIX Association
27th USENIX Security Symposium    1381
two parents’ corresponding gene is less than 23 and with
12.5% probability otherwise.
Concurrent to our work in reverse engineering, at least
three other teams also attempted to reverse engineer the
mixGenes function [22, 27, 48]. Their analysis largely
leverages transaction tracing and blockchain analysis to
reverse engineer the “protocol” of the contract. Erays
does not rely on transaction data—it directly translates
the bytecode to high level pseudocode. As a result, un-
common or unused control paths that do not appear in
transaction traces, such as Cryptokitties mutations, can
be replicated faithfully.
Deliberate opacity does not serve the intended purpose
of black-boxing the gene mixing functionality. Recon-
structing the logic and control ﬂow of the contract using
Erays, we identify two opportunities to exploit the game
with more effective husbandry. First, we can identify
kitties with genes valued 23 or greater which are less
likely to encounter random mutation when breeding. Sec-
ond, since randomness is chosen based on block hashes
at the time giveBirth is called, we can wait to submit
the giveBirth transaction until after a block hash that
results in favorable breeding.
7 Related Work
Program analysis.
Our work is guided by existing
works in program analysis [9, 10, 38], as well as studies
in decompilation [17, 35, 41]. We draw valuable expe-
rience from existing optimization frameworks on JVM.
In particular, our system design is largely inﬂuenced by
Soot [49] and Marmot [25].
Blockchain measurement.
Our work is closely re-
lated to prior efforts in measurement and analysis of
Ethereum and other public blockchains. Much of the
analysis on the Bitcoin blockchain has focused on clus-
tering transactions by usage patterns (e.g., gambling or
trading) [34] and measuring the performance of the un-
derlying peer-to-peer network [19, 20, 36, 37].
Bartoletti and Pompianu provide a taxonomy of the
transparent Ethereum contracts available from the Ether-
scan “veriﬁed source” dataset [13], whereas our work is
the ﬁrst to analyze opaque contracts. Bartoletti et al. pro-
vide a survey of known smart contract vulnerabilities [11].
Comparison with existing Ethereum smart contract
analysis tools. Our reverse engineering tool is comple-
mentary to a wide range of existing tools in the Ethereum
ecosystem:
Symbolic Execution Engines. There are several symbolic
execution engines for Ethereum smart contracts, including
Oyente [31], Manticore [4], and Mythril [5]. These tools
also operate on EVM bytecode, they focus primarily on
detecting known classes of vulnerabilities, rather than
assisting reverse engineering.
Debuggers. Several tools provide debugging utilities, in-
cluding Remix [6] and Geth. Debuggers enable an analyst
to step through a trace of contract execution, which is help-
ful in understanding the contract. Although debugging at
the EVM opcode level is feasible, debugging with the aid
of higher level representations is preferable if available.
Decompilers. Porosity is the only other decompiler we
know of that produces Solidity from EVM bytecode. We
ran Porosity over the 34 K unique contracts in our dataset
to evaluate how well it performs in comparison to Erays.
Porosity produces high-level source code without error
for only 1,818 (5.3%) unique contracts. In contrast, Er-
ays produces aggregated expression for 33,542 (97.7%).
Exploit Generator. TEETHER [29] is a tool that automat-