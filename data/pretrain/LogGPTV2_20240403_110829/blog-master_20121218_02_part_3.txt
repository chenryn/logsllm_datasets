自定义的agg_append :   
```  
create aggregate agg_array (anyelement) (  
sfunc = array_append,  
stype = anyarray);  
create or replace function final_agg_array (i_text text) returns text[] as $$  
declare  
  result text[];  
begin  
  select array_agg(app_id) into result from   
    (select split_part(i,'_',1) as app_id, split_part(i,'_',2) as rating from   
      regexp_split_to_table(i_text,',') t(i) where split_part(i,'_',2) <> ''  
      order by 2 desc) t;  
  return result;  
end;  
$$ language plpgsql strict;  
create aggregate agg_append (text) (  
sfunc = textcat,  
stype = text,  
FINALFUNC = final_agg_array);  
digoal=# truncate recommendation_mpt_new ;  
TRUNCATE TABLE  
digoal=# insert into recommendation_mpt_new   
select user_id, (agg_append(app_id||'_'||rating||','))::numeric[] from recommendation_mpt group by user_id;  
INSERT 0 100000  
Time: 86763.557 ms  
```  
执行计划  
```  
digoal=# explain select user_id, agg_append(app_id||'_'||rating||',') from recommendation_mpt group by user_id;  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 GroupAggregate  (cost=0.00..227158.24 rows=100338 width=24)  
   ->  Index Scan using recommendation_mpt_pkey on recommendation_mpt  (cost=0.00..108820.36 rows=4100000 width=24)  
(2 rows)  
digoal=# select * from recommendation_mpt_new limit 5;  
 user_id |                                                       app_id                                                          
---------+---------------------------------------------------------------------------------------------------------------------  
       1 | {19,3,38,36,2,15,16,31,39,14,6,29,37,8,33,40,25,21,23,34,4,18,10,1,27,13,11,20,9,32,26,17,35,24,12,5,22,30,28,41,7}  
       2 | {9,11,5,4,10,27,22,31,30,33,3,23,32,20,28,14,39,18,35,15,36,13,7,24,1,6,34,8,40,2,19,37,21,38,17,26,12,41,25,29,16}  
       3 | {11,32,25,35,34,21,40,19,24,38,12,37,20,2,31,17,5,1,8,33,28,22,14,10,29,9,23,18,6,41,27,13,16,4,26,36,15,39,3,30,7}  
       4 | {7,8,14,20,27,38,16,11,25,39,13,40,31,9,19,29,24,4,41,10,22,12,34,6,17,18,23,36,33,3,37,35,28,2,21,5,15,32,1,30,26}  
       5 | {2,31,40,20,27,16,30,5,32,26,28,33,41,29,14,7,39,12,1,19,13,22,17,4,10,9,24,3,8,11,15,36,34,23,25,6,38,18,21,37,35}  
(5 rows)  
```  
结果HASH :   
```  
digoal=# select sum(hashtext((t.*)::text)) from recommendation_mpt_new t;  
     sum        
--------------  
 122980440213  
(1 row)  
```  
hash结果一致,  
由此可见, 两者实现了同样的功能但是效率相差了8倍多.  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201211174617734/  
2\. http://www.postgresql.org/docs/9.2/static/xaggr.html  
3\. http://www.postgresql.org/docs/9.2/static/sql-createaggregate.html  
4\. 查看当前所有的aggregate函数  
```  
\da *.*  
digoal=> \da *.*  
                                                                                 List of aggregate functions  
   Schema   |      Name      |      Result data type       |        Argument data types         |                                     
     Description                                           
------------+----------------+-----------------------------+------------------------------------+-----------------------------------  
---------------------------------------------------------  
 digoal     | agg_append     | text                        | text                               |   
 pg_catalog | array_agg      | anyarray                    | anyelement                         | concatenate aggregate input into a  
n array  
 pg_catalog | avg            | numeric                     | bigint                             | the average (arithmetic mean) as n  
umeric of all bigint values  
 pg_catalog | avg            | double precision            | double precision                   | the average (arithmetic mean) as f  
loat8 of all float8 values  
....  
略  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")