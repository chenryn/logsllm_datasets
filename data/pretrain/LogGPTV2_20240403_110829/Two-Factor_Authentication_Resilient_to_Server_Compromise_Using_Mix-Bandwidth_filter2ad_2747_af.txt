MBD and FBD mechanisms 
TFA-SC 
128 bits 
1.3 x 10-5 (cid:80)s 
TFA-PC 
128 bits 
8.7 x 10-4 (cid:80)s  
Same as LBD-QR-PIN 
Same as LBD-QR-PIN 
4.9 x 10-5 (cid:80)s 
1.3 x 10-5 (cid:80)s 
PRF(x) 
N/A 
0.59 ms 
0.48 ms 
a = Enc(r),  
b = MAC(a) 
114 ms  
s xor PRF(Td) 
s xor PRF(x) 
s xor Dec(a)  
s xor PRF(x) 
s xor Dec(a)  
(cid:35) 5 s 
N/A 
N/A 
(cid:35) 870ms 
(cid:35) 870ms 
(cid:35) 8 s 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
N/A 
(cid:35) 553 ms 
(cid:35) 2s 
(cid:35) 239 ms 
(cid:35) 2s 
Reading of QR Code 
by “D”3 
Reading of QR Code 
by “C”4 
WF Auto response5 
BT Auto response 
Execution times were evaluated on a dual-core 1GHz processor smart phone with 8.0 MP Camera and an Intel Core 
Due 2.26 server and client. The values presented represent the average across 10,000 trials for each computation. 
For QR, 20 manual scans were repeated. To time BT/WF auto-response, 100 trials were performed.  
1 PRF is instantiated using an HMAC function. It starts by inputting a random generated 128-bit session “r” and a 128-bit “key” 
to an HMAC-SHA256 function. Output is a truncation of the HMAC starting at an offset defined by the last nibble of the HMAC. 
HMAC output is presented in Hex-String.  
2 In this model, a 3072-bit RSA with OAEP padding is implemented, message is authenticated using HMAC-SHA256. The output 
is presented in Base64 encoding to maximize efficiency when embedding the challenge in a QR Code.  
3 QR size: 350x350, Error correction: M (15% of code words get restored) 
4 The time shows an average cost of scanning and decoding a well posed QR code, user time to align the device is ignored but it 
is estimated to be up to 5 seconds.   
5 Auto-Response denotes the delay between the time browser extension receives a challenge from S and the time it responds back 
to “S”. It includes the entire computation performed on D and the 2-way C-D communication (for both WF and BT). 
EXECUTION TIME FOR THE DIFFERENT TFA MECHANISMS
TABLE I.
trading off the usability aspect of allowing unpaired Bluetooth
communication.
Fig. 8. FBD-BT-BT/FBD-WF-WF (SC)
Fig. 9. FBD-BT-BT/FBD-WF-WF (PC)
2) FBD-WF-WF: The FBD-WF-WF mechanism utilize
WiFi as a bidirectional D-C communication medium. While
Bluetooth has been explored in user authentication domain
in prior work (e.g., [19], [24], [20]), WiFi has received little
attention so far. Ad hoc mode WiFi is a common point-to-point
infrastructureless wireless channel that can be formed between
13
a device and client terminal equipped with WiFi adaptors.
However,
laptops terminals may dedicate wireless adaptor
to the Internet connection, which may render ad hoc WiFi
unavailable for D-to-C communication in our TFA application.
We show that this constraint can be addressed by utilizing a
tool called Virtual WiFi (offered by Microsoft Research), also
known as Wireless Hosted Network [11].
Virtual WiFi features two coexisting functionalities: “virtu-
alizing a physical wireless adapter”, and “running a software-
based wireless access point (SoftAP),” which is appropriate for
use in our TFA application. We used Virtual WiFi to establish
a direct connection between C and D upon a request from S
in order to transfer a challenge to D through C and receive
a response back whenever wireless adaptor is serving other
networks. Therefore, by virtualizing one physical wireless
adapter, we can connect D to C whilst user is surﬁng web on
C. Virtual WiFi is built-into some Microsoft platforms (e.g.,
Windows 7 and 8) and installable on some others, and is easy
to conﬁgure and fairly stable. Still in our implementation,
we had to adapt it to address the constraint that all devices
connected to SoftAP should use the WPA2-PSK/AES cipher
suite. In other words, an insecure connection is not an option
with Virtual WiFi, and therefore we speciﬁed a static key
DeviceUserClientServer        2- (x, DN)    3-  z = s  xor Fk(x)      4- (UN, p, z)[UN,h=H(p,s),K]     [DN,s,K]5- Accept if:H(p, z xor Fk(x)) = h           1- xDeviceUserClientServer        2- (DN, c)  3-  z = s  xor Decsk(a)          4- (p, z)[UN,h=H(p,s),K, pk]  [DN,s,K, sk]5- Accept if:H(p, z xor r) = h1- UN 2- c = (a,b)                             a = Encpk(r)b = MACK(a)and hard-coded it into the application8. After the wireless
connection is established between C and D, applications on
the two sides can communicate back and forth.
We have developed a chrome packaged app, titled “TFA-
WiFi-App”, that is launched on the client browser, and ex-
tended our TFA-App on the device to interact with the client.
TFA-WiFi-App stands between the server and the client to
relay challenges received from the web page to the device,
receive device’s responses and forward it to the web-page.
Chrome provides the chrome.socket API to the packaged apps
to send and receive data over the network using TCP and UDP
connections; we used this API to create a UDP channel be-
tween the client and the device. Furthermore, chrome.runtime
API allows the chrome extensions and apps to listen for and
respond to events; we used this API for message passing
between the web-page and WiFi-App. Every time the user
opens a login web-page the server sends a challenge, which
ﬁres a function in our TFA-WiFi-App to “multicast” the
challenge on the created UDP socket to the device. The device
receives the datagram packet, processes it, creates a response
and sends it back on the UDP socket to the TFA-WiFi-App to
be forwarded to the server.
The authentication process implemented by TFA-WiFi-App
is shown in Figures 8 and 9. The underlying protocol ﬂow is
exactly the one used in the FBD-BT-BT mechanism. In the
resulting FBD-WF-WF mechanism, similar to FBD-BT-BT,
the user is not involved in transferring the challenge to the
device (in contrast to LBD-PIN, LBD-QR-PIN or MBD-QR-
QR). Moreover, device response PIN is automatically passed
to the web page through the applications on the browser and
the device, and it can be easily long (at least 128 bits), as in
FBD-BT-BT. Hence, besides entering username and password,
the user’s role is minimized to simply launching the application
on the terminal browser and the device. This would provide
increased usability and security at the cost of the need for
additional software on the client terminal browser (and the
Virtual WiFi application in case the terminal dedicates WiFi
to an internet connection). Figure 5 shows a snapshot of our
implementation in action.
3) FBD-QR-BT and FBD-QR-WF: Our implementation of
the FBD-QR-BT and FBD-QR-WF mechanisms simply uses
the QR codes for C-to-D communication and BT/WiFi for D-
to-C communication. Since BT/WiFi is only used for receiving
data (not for sending), this might provide better security against
potentially malicious extensions which could leak sensitive
information from the client
terminal over BT/WF without
user’s knowledge. Figures 10 and 11 show these mix-capability
mechanisms.
Fig. 10. FBD-QR-BT/FBD-QR-WF (SC)
8This does not affect the security of our protocols because we do not require
the C-D channel to be secure.
14
Fig. 11. FBD-QR-BT/FBD-QR-WF (PC)
E. Performance Measurements
To estimate the performance of our TFA prototypes, we
measured the execution times corresponding to each operation
(except of manual PIN transfer and password entry) as part of
the prototypes. These average timing measurements are pre-
sented in Table I, along with measurement details, platform and
devices used, and other relevant information. It is clear from
the table that all server side operations in our implementation
are very fast (although we tested these on a personal laptop, not
a real server). As one would expect, the device computation
is more time-consuming compared to server computation but
still not exceeding 114 ms on an average.
Scanning the (C-to-D) QR code takes about 5-8 s de-
pending on whether a public-key challenge (3328 bits) or a
symmetric-key challenge (128 bits) is used. The more the
information embedded within the QR code, the longer it takes
to scan the code. This can be reduced to 3-5 s by using a
lower error correction code at the cost of potential for increased
errors in code scanning. We have also tested the D-to-C QR
channel by trying to interpret 20 to 128-bit long PIN numbers.
Evaluation shows that once the user properly aligns the device,
QR code can be decoded between 820-950 milliseconds. For
a trained user,
takes up to 5 seconds to show the QR
code correctly to the webcam. Good webcam quality, device
brightness and resolution, and correctly aligning device helps
Client ZXing JavaScript to interpret the QR code faster. WiFi
2-way average response time (inclusive of device computation)
is not exceeding 550 ms or so. Bluetooth response time, on
the other hand, is much longer, about 2 s. This seems to imply
that WiFi, when available, is a better communication medium
for our application.
it
In summary,
these measurements show that FBD-WF-
WF mechanism yields the shortest execution times, which
would likely not cause a perceivable delay to the user when
authenticating to a service, except of the time taken to input the
password and launch the app on the device. The LBD-QR-PIN
mechanism may take more than 10 s overall, because the user
has to type in the password and launch the application besides
scanning the QR code. LBD-PIN takes the same amount of
time as the traditional TFA mechanism with bulk of the time
spent in copying the PIN and typing the password.
VI. DISCUSSION
In this section, we summarize, and provide a comparison
of, our different TFA mechanisms in terms of security, usability
and deployability, and contrast them with the traditional TFA
mechanism (called Traditional). Table II depicts this summary.
The primary advantage offered by our new TFA mecha-
nisms over Traditional is improved resilience to ofﬂine dic-
DeviceUserClientServer             2- (x, DN)    3-  z = s  xor Fk(x)     4- (UN, p, z)[UN,h=H(p,s),K]     [DN,s,K]5- Accept if:H(p, z xor Fk(x)) = h          1- xDeviceUserClientServer        2- (DN, c)  3-  z = s  xor Decsk(a)         4-  (p, z)[UN,h=H(p,s),K, pk]  [DN,s,K, sk]5- Accept if:H(p, z xor r) = h1- UN 2- c = (a,b)                             a = Encpk(r)b = MACK(a) 
Time or Challenge 
Response (CR)? 
Traditional 
LBD-PIN 
LBD-QR-PIN 
MBD-QR-QR 
FBD-BT-BT / 
FBD-WF-WF 
FBD-QR-BT / 
FBD-QR-WF 
Time 
Time 
CR 
CR 
CR 
CR 
Protocol 
Traditional 
TFA-T 
Device Type 
|z| 
Online Attack Success 
Probability  
Offline Attack 
Overhead 
Lunch-Time Security? 
Secure against 
Lunch-
Time/Eavesdrop + 
Server Compromise? 
Time-Sync 
Necessary? 
Client Software/   
Special Hardware 
type I 
19 bits 
1/(|D|*219 ) 
(cid:148)(cid:3)(cid:95)(cid:39)(cid:95)(cid:3)(cid:75)(cid:68)(cid:86)(cid:75)(cid:72)(cid:86) 
Yes (but can 
manipulate 
clock) 
type I 
19 bits 
1/(|D|*219 ) 
(cid:148)(cid:3)(cid:21)19*|D| 
hashes 
Yes (but can 
manipulate 
clock) 
No 
Yes 
No 
Yes 
HTML 
Browser/ 
None 
Input user 
name on C 
HTML 
Browser/  
None 
Input user 
name on C 
Launch app 
on D 
Launch app  
on D 
TFA-SC or 
TFA-PC 
type II 
19 bits 
TFA-SC or 
TFA-PC 
type III 
t = 20 - 128 bits 
1/(|D|*219 ) 
1/(|D|*2t ) 
TFA-SC or 
TFA-PC 
type IV 
128 bits (or 
more) 
1/(|D|*2128 ) 
TFA-SC or  
TFA-PC 
type IV 
128 bits (or 
more) 