你现在的位置
507
---
## Page 544
鸭子工厂
这个鸭叫计数器实在太棒了。我们了解
到了很多以前不知道的、关于这些呱呱叫
的小东西的咨料。但是我们发现许多叫声
没被计算进去。你能够提供帮助
你必须装饰对象来获得被装饰过的行
为。
他说的没错，包装对象的问题就是这样：有包
装才有效果，没包装就没有效果。
为什么我们不将创建鸭子的程序集中在一个地
方呢？换句话说，让我们将创建和装饰的部分
包装起来吧。
这看起来像什么模式？
10
我们需要用工厂产生鸭子！
好了！我们需要一些质量控制来确保鸭子一定是被包装起来的。我们要建造一个
工厂，创建装饰过的鸭子。此工厂应该生产各种不同类型的鸭子的产品家族，所
以我们要用抽象工厂模式。
让我们从AbstractDuckFactory的定义开始：
我们定义一个抽象工厂、它
的子类们会创建不同的家
族。
public abstract class AbstractDuckFactory {
public abstract Quackable createMallardDuck();
public abstract Quackable createRedheadDuck();
public abstract Quackable createDuckCall();
public abstract Quackable createRubberDuck();
每个方法创建一种鸭子。
508
第12章
---
## Page 545
复合模式
让我们从创建一个工厂开始，此工厂创建没有装饰者的鸭子：
2
public class DuckFactory extends AbstractDuckFactory {
public Quackable createMallardDuck() {
DuckFactoty扩展抽象工厂。
return new MallardDuck () ;
public Quackable createRedheadDuck(){
每个方法创建一个产品：一种特
return new RedheadDuck();
定种类的Qaackable。模加器并不
知迷实际的产品是什么.只知道
public Quackable createDuckCall() {
它实现了Quackable提口。
return new DuckCall ();
public Quackable createRubberDuck()(
return new RubberDuck();
现在，要创建我们真正需要的工厂，CountingDuckFactory：
CountinsDuckFactory也折
展自抽象工厂。
public class CountingDuckFactory extends AbstractDuckFactory {
public Quackable createMallardDuck() (
每个方法都金先用叫声计
return new QuackCounter(new MallardDuck());
数装饰老将Quackable包装
起来。模拟器并不知道有
public Quackable createRedheadDuck() {
何不同，只知道它实现了
return new QuackCounter(new RedheadDuck());
Quackable接口。但是速逻
员可以因此而放心，所有
public Quackable createDuckCall(){
return new QuackCounter(new DuckCall());
的叫声都金被计算进去
public Quackable createRubberDuck() (
return new QuackCounter(new RubberDuck());
你现在的位置，
509
---
## Page 546
鸭子家族
11
设置模拟器来使用这个工厂。
还记得抽象工厂是怎么工作的吗？我们创建一个多态的方法，此方法需要一个用
来创建对象的工厂。通过传入不同的工厂，我们就会得到不同的产品家族。
我们要修改一下simulateO方法，让它利用传进来的工厂来创建鸭子。
首先，我们创建工
厂.准备把它传入
simalate(）方法。
public class DuckSimulator {
public static void main(String[] args){
DuckSimulator simulator = new DuckSimulator();
AbstractDuckFactory duckFactory-new CountingDuckFactory();
K
simulator.simulate(duckFactory);
simalate(）方法需要一个
void simulate(AbstractDuckFactory duckFactory)(
AbstactDuckFactory参数
Quackable mallardDuck=duckFactory.createMallardDuck()
Quackable redheadDuck-duckFactory.createRedheadDuck();
利用它创建鸭子，而不
Quackable duckCal1=duckFactory.createDuckCall();
是直接实例化略子。
Quackable rubberDuck=duckFactory.createRubberDuck();
Quackable gooseDuck -new GooseAdapter(new Goose());
System.out.println("\nDuck Simulator: With Abstract Factory") ;
simulate (mallardDuck) ;
simulate (redheadDuck) ;
simulate (duckCal1);
simulate (rubberDuck) ;
simulate (gooseDuck) ;
这里究全没变动
System.out.println("The ducks quacked " +
QuackCounter.getQuacks()+
"times");
void simulate(Quackable duck) (
duck.quack () ;
510
第12章
---
## Page 547
复合模式
这是使用工厂的输出
Fie Edt Window Help EggFactory
java DuckSimulator
Duck Simulator:With Abstract Factory
和上一次一样，但是这次
Quack
我们确定所有的鸭子都
Quack
被装饰过，因为我们使用
Kwak
Squeak
CountingDuckFactory。
Honk
The ducks quacks 4times
我们仍然依赖具体类来直接实例化鹅。你能够为鹅写一个抽象工厂吗？创
建“内鹅外鸭”的对象时，你怎么处理？
PDG
你现在的位置
511
---
## Page 548
一群鸭子
要分别管理这些不同的鸭子变得有些
国难了，你能够帮我们作为一个整体
来管理这些鸭子，甚至让我们管理几
个想持续追踪的鸭子家族吗？
啊哈！他想管理一群鸭子。
巡逻员又给咱们出了个好题目：为什么我们要个别管理鸭子呢？
Quackable mallardDuck = duckFactory.createMallardDuck() ;
Quackable redheadDuck = duckFactory.createRedheadDuck();
这还不太好
Quackable duckCall = duckFactory.createDuckCal1();
管理呢！
Quackable rubberDuck = duckFactory.createRubberDuck();
Quackable gooseDuck = new GooseAdapter (new Goose ());
simulate (mallardDuck) ;
simulate(redheadDuck) ;
simulate (duckCal1);
simulate (rubberDuck) ;
simulate (gooseDuck) ;
我们需要将鸭子视为一个集合，甚至是子集合
（subcollection），为了满足巡逻员想管理鸭子
家族的要求）。如果我们下一次命令，就能让
整个集合的鸭子听命行事，那就太好了。
什么模式可以帮我们？
PDG
512
第12章
---
## Page 549
复合模式
让我们创建一群鸭子（噢，实际上是一群Quackable）。
还记得吗，组合模式允许我们像对待单个对象一样对待对象集合。还有什么模式
能比组合模式创建一群Quackable更好呢！
让我们逐步地看这是如何工作的：
别忘了.组合需要和叶节点元素一样实
现相同的接口。这里的“叶节点”就是
Quachable
public class Flock implements Quackable {
在每一个Flock内，我们使用Araylist记
ArrayList quackers = new ArrayList();
录属子这个Flocb的Quachable对象。
public void add(Quackable quacker){
quackers.add(quacker) ;
用add）方法新增
Quackable对象到Flock。
public void quack()(
Iterator iterator =quackers.iterator();
while (iterator.hasNext())(
Quackable quacker =(Quackable)iterator.next();
quacker.quack() ;
毕竞Flock也是Quackable，所以也要具备guack(）方法，此方法金对警群
产生作用，我们遍历Araylist调用每一个元素上的quack(）。
你注意到了吗？我们其实还偷偷用了另一个设计模式，
只是没有告诉你。
public void quack(）(
就是这个：选代器模
Iterator iterator = quackers.iterator():
while (iterator.hasNext())(
式！
Quackable quacker=(Quackable)iterator.next();
quacker.quack();
R
上
你现在的位置
513
---
## Page 550
鸭子组合
13
现在我们需要修改模拟器。
我们的组合已经准备好了，我们需要一些让鸭子能进入组合结构的代码。
public class DuckSimulator {
和之前一样，创建所
//这里是主要方法
有的Quackable对象。
void simulate (AbstractDuckFactory duckFactory){
Quackable redheadDuck = duckFactory.createRedheadDuck();
Quackable duckCall = duckFactory.createDuckCal1();
Quackable rubberDuck = duckFactory.createRubberDuck();
Quackable gooseDuck = new GooseAdapter (new Goose());
System.out.println("\nDuck Simulator: With Composite - Flocks");
Flock flockofDucks=new Flock（);
先创建一个Flock，然后把
许多Quackable塞给它。这个
flockofDucks.add(redheadDuck);
Flock是主群。
flockOfDucks.add(duckCall);
flockOfDucks.add(rubberDuck);
flockofDucks.add(gooseDuck);
然后创建一个新的绿头鸭群。
Flock flockOfMallards=new Flock（）;
创建绿头鸭小
Quackable mallardOne = duckFactory.createMallardDuck() ;
Quackable mallardTwo = duckFactory.createMallardDuck();
家族.….
Quackable mallardThree = duckFactory.createMallardDuck();
Quackable mallardFour = duckFactory.createMallardDuck() ;
flockofMallards.add(mallard0ne);
………将它们加入绿头鸭群。
flockOfMallards.add(mallardTwo);
flockofMallards.add(mallardThree);
flockOfMallards.add（mallardFour);
将绿头鸭群加入主群。
flockOfDucks.add(flockOfMallards);
System.out.println("\nDuck Simulator:Whole Flock Simulation");
simulate(flockOfDucks);
测试一整群！
System.out.println("\nDuck Simulator:Mallard Flock Simulation");
simulate(flockOfMallards);
只测试绿头鸭群。
System.out.println("\nThe ducks quacked " +
QuackCounter.getQuacks ()+
"times");
K
最后，把数据显示给呱
呱叫学家。
void simulate(Quackable duck) (
duck.quack ();
这里不需要修改，因为Flock也是Quackable！
514
第12章
---
## Page 551
复合模式
执行结果
java DuckSimulator
DuckSimulator:With Composite-Flocks
Duck Simulator:Whole Flock Simulation
Quack
Kwak
Squeak
Honk
Quack
Quack
Quack
Quack
Duck Simulator:MallardFlockSimulation
Quack
这是绿头鸭群
Quack
数据悉起来是对
Quack
Quack
是不计数的）
Theducksquacked11times
安全性VS.透明性
你或许还记得，在组合模式章节中，组合（菜单）和叶节点（菜单项）具有一组相同的方
法，其中包括了add()方法。就因为有一组相同的方法，我们才能在菜单项上调用不起作用
的方法（像通过调用add（来在菜单项内加入一些东西）。这么设计的好处是，叶节点和组
合之间是“透明的”。客户根本不用管究竞是组合还是叶节点，客户只是调用两者的同一
个方法。
但是在这里，我们决定把组合维护孩子的方法和叶节点分开，也就是说，我们打算只让
Flock具有add()方法。我们知道给一个Duck添加某些东西是无意义的。这样的设计比较“安
全”，你不会调用无意义的方法，但是透明性比较差。现在，客户如果想调用add()，得先
确定该Quackable对象是Flock才行。
在OO设计的过程中，折衷一直都是免不了的，在创建你自己的组合时，你需要考虑这些。
你现在的位置
515
---
## Page 552
鸭子观察者
组含工作得很顺畅！谢谢你！
现在我们有另一个相反的要求：我们
也需要追踪个别的鸭子。你能够有办
法让我持续追踪个别鸭子的实时呱呱
ha
你会说“观察者”吗？
似乎呱呱叫学家想要观察个别鸭子的行为，这让我们想起有一
个模式可以观察对象的行为：观察者模式。
14
首先，我们需要一个Observable接口。
所谓的Observable就是被观察的对象。Observable需要注册和通知观察者的方法。我
们本来也需要删除观察者的方法，但是在这里为了让实现保持简单，我们就省略这
部分了。
QuackO6serva6le是一个接。
任何想被观察的Quackable都必
须实现QuackObsetvable接口。
public interface QuackObservable {
public void registerobserver (Observer observer);
public void notifyobservers ();
K
它具有注册观察者的方法，任何实
R
现了O6server提口的对象都可以整
听呱呱叫。稍后我们会定义观察者
它也有通知观察者的方法。
接口。
现在我们需要确定所有的Quackable都实现此接口.….
public interface Quackable extends Quackobservable(
public void quack();
所以我们干院让Qaackable来扩展此接
口。
516
第12章
---
## Page 553
复合模式
不要一直盯着我看，
我会紧张的！
15
现在我们必须确定所有实现Quackable的具体类都能够扮演
QuackObservable的角色。
D
我们需要在每一个类中实现注册和通知（同在第2章我们所做的
一样）。但是这次我们要用稍微不一样的做法：我们要在另一个
被称为Observable的类中封装注册和通知的代码，然后将它和
QuackObservable组合在一起。这样，我们只需要一份代码即可，
QuackObservable所有的调用都委托给Observable辅助类。
我们先从Observable辅助类开始下手吧…
QuackObservable
Observable实现了所有必要的功能。我
O6serva6le必须实现QuackO6serva6le，因为它们具有一组
们只要把它持进一个类，就可以让请