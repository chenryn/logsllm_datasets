        print row[0], row[1], row[2]  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
In this script we connect to the database and fetch the rows of the Cars table one by one.  
```  
while True:  
```  
We access the data from the while loop. When we read the last row, the loop is terminated.  
```  
row = cur.fetchone()  
if row == None:  
    break  
```  
The fetchone() method returns the next row from the table. If there is no more data left, it returns None. In this case we break the loop.  
```  
print row[0], row[1], row[2]  
```  
The data is returned in the form of a tuple. Here we select records from the tuple. The first is the Id, the second is the car name and the third is the price of the car.  
```  
$ ./retrieveonebyone.py  
1 Audi 52642  
2 Mercedes 57127  
3 Skoda 9000  
4 Volvo 29000  
5 Bentley 350000  
6 Citroen 21000  
7 Hummer 41400  
8 Volkswagen 21600  
```  
This is the output of the example.  
### The dictionary cursor  
The default cursor returns the data in a tuple of tuples. When we use a dictionary cursor, the data is sent in a form of Python dictionaries. This way we can refer to the data by their column names.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import psycopg2.extras  
import sys  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cursor = con.cursor(cursor_factory=psycopg2.extras.DictCursor)  
    cursor.execute("SELECT * FROM Cars")  
    rows = cursor.fetchall()  
    for row in rows:  
        print "%s %s %s" % (row["id"], row["name"], row["price"])  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
In this example, we print the contents of the Cars table using the dictionary cursor.  
```  
import psycopg2.extras  
```  
The dictionary cursor is located in the extras module.  
```  
cursor = con.cursor(cursor_factory=psycopg2.extras.DictCursor)  
```  
We create a DictCursor.  
```  
for row in rows:  
    print "%s %s %s" % (row["id"], row["name"], row["price"])  
```  
The data is accessed by the column names. The column names are folded to lowercase in PostgreSQL (unless quoted) and are case sensitive. Therefore, we have to provide the column names in lowercase.  
### Parameterized queries  
Now we will concern ourselves with parameterized queries. When we use parameterized queries, we use placeholders instead of directly writing the values into the statements. Parameterized queries increase security and performance.  
The Python psycopg2 module supports two types of placeholders: ANSI C printf format and the Python extended format.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
uId = 1  
uPrice = 62300   
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cur = con.cursor()  
    cur.execute("UPDATE Cars SET Price=%s WHERE Id=%s", (uPrice, uId))          
    con.commit()  
    print "Number of rows updated: %d" % cur.rowcount  
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
We update a price of one car. In this code example, we use the question mark placeholders.  
```  
cur.execute("UPDATE Cars SET Price=%s WHERE Id=%s", (uPrice, uId))  
```  
The characters (%s) are placeholders for values. The values are added to the placeholders.  
```  
print "Number of rows updated: %d" % cur.rowcount  
```  
The rowcount property returns the number of updated rows. In our case one row was updated.  
```  
$ ./parameterized1.py  
Number of rows updated: 1  
testdb=> SELECT * FROM cars WHERE id=1;  
 id | name | price   
----+------+-------  
  1 | Audi | 62300  
(1 row)  
```  
The price of the car was updated. We check the change with the psql tool.  
The second example uses parameterized statements with Python extended format.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
uid = 3  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cur = con.cursor()  
    cur.execute("SELECT * FROM Cars WHERE Id=%(id)s", {'id': uid } )  
    print cur.fetchone()  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
We select a name and a price of a car using pyformat parameterized statement.  
```  
cur.execute("SELECT * FROM Cars WHERE Id=%(id)s", {'id': uid } )  
```  
The named placeholders start with a colon character.  
```  
$ ./parameterized2.py  
(3, 'Skoda', 9000)  
```  
Output of the example.  
### Inserting images  
In this section, we are going to insert an image to the PostgreSQL database. Note that some people argue against putting images into databases. Here we only show how to do it. We do not talk about technical issues of whether to save images in databases or not.  
```  
testdb=> CREATE TABLE Images(Id INT PRIMARY KEY, Data BYTEA);  
```  
For this example, we create a new table called Images. For the images, we use the BYTEA data type. It allows to store binary strings.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
def readImage():  
    try:  
        fin = open("woman.jpg", "rb")  
        img = fin.read()  
        return img  
    except IOError, e:  
        print "Error %d: %s" % (e.args[0],e.args[1])  
        sys.exit(1)  
    finally:  
        if fin:  
            fin.close()  
try:  
    con = psycopg2.connect(database="testdb", user="janbodnar")   
    cur = con.cursor()  
    data = readImage()  
    binary = psycopg2.Binary(data)  
    cur.execute("INSERT INTO Images(Id, Data) VALUES (1, %s)", (binary,) )  
    con.commit()      
except psycopg2.DatabaseError, e:  
    if con:  
        con.rollback()  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()     
```  
In this script, we read an image from the current working directory and write it into the Images table of the PostgreSQL testdb database.  
```  
try:  
    fin = open("woman.jpg", "rb")  
    img = fin.read()  
    return img  
```  
We read binary data from the filesystem. We have a JPG image called woman.jpg.  
```  
binary = psycopg2.Binary(data)  
```  
The data is encoded using the psycopg2 Binary object.  
```  
cur.execute("INSERT INTO Images(Id, Data) VALUES (1, %s)", (binary,) )  
```  
This SQL statement is used to insert the image into the database.  
### Reading images  
In this section, we are going to perform the reverse operation. We will read an image from the database table.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
def writeImage(data):  
    try:  
        fout = open('woman2.jpg','wb')  
        fout.write(data)  
    except IOError, e:      
        print "Error %d: %s" % (e.args[0], e.args[1])  
        sys.exit(1)  
    finally:  
        if fout:  
            fout.close()    
try:  
    con = psycopg2.connect(database="testdb", user="janbodnar")   
    cur = con.cursor()      
    cur.execute("SELECT Data FROM Images LIMIT 1")  
    data = cur.fetchone()[0]  
    writeImage(data)  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()        
```  
We read image data from the images table and write it to another file, which we call woman2.jpg.  
```  
try:  
    fout = open('woman2.jpg','wb')  
    fout.write(data)  
```  
We open a binary file in a writing mode. The data from the database is written to the file.  
```  
cur.execute("SELECT Data FROM Images LIMIT 1")  
data = cur.fetchone()[0]  
```  
These two lines select and fetch data from the Images table. We obtain the binary data from the first row.  
### Metadata  
Metadata is information about the data in the database. Metadata in a PostgreSQL database contains information about the tables and columns, in which we store data. Number of rows affected by an SQL statement is a metadata. Number of rows and columns returned in a result set belong to metadata as well.  
Metadata in PostgreSQL can be obtained using from the description property of the cursor object or from the information_schema table.  
Next we will print all rows from the Cars table with their column names.  
```  
#!/usr/bin/python  
# -*- coding: utf-8 -*-  
import psycopg2  
import sys  
con = None  
try:  
    con = psycopg2.connect("dbname='testdb' user='janbodnar'")   
    cur = con.cursor()  
    cur.execute('SELECT * FROM Cars')  
    col_names = [cn[0] for cn in cur.description]  
    rows = cur.fetchall()  
    print "%s %-10s %s" % (col_names[0], col_names[1], col_names[2])  
    for row in rows:      
        print "%2s %-10s %s" % row  
except psycopg2.DatabaseError, e:  
    print 'Error %s' % e      
    sys.exit(1)  
finally:  
    if con:  
        con.close()  
```  
We print the contents of the Cars table to the console. Now, we include the names of the columns too. The records are aligned with the column names.  
```  
col_names = [cn[0] for cn in cur.description]  
```  
We get the column names from the description property of the cursor object.  
```  
print "%s %-10s %s" % (col_names[0], col_names[1], col_names[2])  
```  
This line prints three column names of the Cars table.  
```  
for row in rows:      
    print "%2s %-10s %s" % row  
```  
We print the rows using the for loop. The data is aligned with the column names.  
```  
$ ./colnames.py   
id name       price  
 2 Mercedes   57127  
 3 Skoda      9000  
 4 Volvo      29000  
 5 Bentley    350000  