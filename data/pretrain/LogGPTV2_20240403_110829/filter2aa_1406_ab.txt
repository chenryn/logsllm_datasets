OR YOU HAVE TO GUESS USING THE ABSOLUTE ADDRESSES TO STRINGS/FUNCTIONS FROM LITERAL
POOL
‚Ä¢ GO CHECK OUT QUARKSLAB BLOG ABOUT IT
Start of code in Bootimg 2
First 0x10 bytes of 
bootimg2
REVERSING THE BOOTLOADER
‚Ä¢ SEARCHING FOR STRINGS
‚Ä¢
THE CONSOLE LOG MENTIONS EEPROM AND /DEV/NULL
‚Ä¢
WE CAN LOOK FOR THESE STRINGS IN THE BOOTLOADER BINARY
‚Ä¢
THEN LOOK FOR CROSS-REFERENCES (XREF) 
INFO ABOUT THE SPI EEPROM
‚Ä¢ EEPROM AND SPI 101
‚Ä¢
ELECTRICALLY ERASABLE PROGRAMMABLE READ-ONLY MEMORY
‚Ä¢
SO, NOT QUITE READ-ONLY‚Ä¶.
‚Ä¢
USUALLY FAIRLY SMALL AND SLOW
‚Ä¢
ONE KIND OF STORAGE AMONG MANY
‚Ä¢
SERIAL PERIPHERAL INTERFACE
‚Ä¢
BUS THAT CAN BE SHARED BY MULTIPLE DEVICES
‚Ä¢
4 WIRES, 3 SHARED (MISO, MOSI, CLOCK) + 1 CHIP SELECT PER SPI SLAVE
‚Ä¢
MASTER SENDS COMMAND, THEN SLAVE SENDS REPLY
https://www.arduino.cc/en/Tutorial/SPIEEPROM
R4 = var_4B
memset(var_4B,0,6)
Read 5 bytes from 0x2B0 to [sp-
0x4B:sp-0x47]
‚Ä¢
LOGGING TELLS US IT‚ÄôS AN EEPROM READ
‚Ä¢
FUNCTION SENDS A ‚Äú3‚Äù COMMAND OVER SPI
‚Ä¢
EEPROM‚ÄôS DATASHEET SAYS IT‚ÄôS A READ COMMAND
‚Ä¢
SPI COMMAND USES DEDICATED MAPPED IO
‚Ä¢
CAN BE IN CPU‚ÄôS DATASHEET
‚Ä¢
OR NEEDS TO BE GUESSED‚Ä¶
HOW DID WE FIND THE READ_FROM_EEPROM FUNCTION?
PATCHING THE EEPROM
‚Ä¢ PLAN OF ACTION
‚Ä¢
ACCORDING TO THE DATASHEET, WE KNOW THE COMMANDS TO READ/WRITE
‚Ä¢
WE NEED TO HAVE A SPI DEVICE TO INTERFACE WITH IT
‚Ä¢
ARDUINO AND RASPBERRY PI ARE GOOD CANDIDATES (BUT THEY USE 5V SPI, PHONE IS 3.3V)
‚Ä¢
BUSPIRATE CAN DO 3.3V
‚Ä¢
WE NEED TO CONNECT TO THE CHIP
‚Ä¢
SUPER TINY SO, SOIC CLIP AND HOOKS WON‚ÄôT DO
‚Ä¢
CAN ORDER HAND-MADE POGO CONNECTOR FOR $70 AND 3 WEEKS LEAD TIME
‚Ä¢
MICRO SOLDERING IS ANOTHER OPTION
WHY AREN‚ÄôT THE INPUTS WORKING? 
‚Ä¢ I WAS HOPING THAT ENABLING THE CONSOLE WOULD FIX THE ISSUE
‚Ä¢ THE RX PIN MIGHT BE SOLDERED TIED TO VCC/GND VIA RESISTOR
‚Ä¢
EVERYTHING POINTS TOWARDS A WORKING CONSOLE, SO WHY?
‚Ä¢ INSTEAD OF GUESSING LET‚ÄôS LOOK AT THE BOARD!
Vias
WHY AREN‚ÄôT THE INPUTS WORKING? 
‚Ä¢ WE CAN TRY TO FOLLOW THE TRACES FROM THE PADS
‚Ä¢
SEE WHERE THEY‚ÄôRE CONNECTED TO
‚Ä¢
MAYBE FIND SOMETHING SUSPICIOUS
‚Ä¢
VIAS CONNECT THE FRONT OF THE BOARD TO THE BACK
‚Ä¢ EVENTUALLY I LOOSE THE TRACES AROUND THE MOD CONNECTOR
‚Ä¢ ‚Ä¶‚Ä¶‚Ä¶. REMEMBER THE RECON PHASE ?
WHY AREN‚ÄôT THE INPUTS WORKING? 
‚Ä¢ WE CAN TRY TO FOLLOW THE TRACES FROM THE PADS
‚Ä¢
SEE WHERE THEY‚ÄôRE CONNECTED TO
‚Ä¢
MAYBE FIND SOMETHING SUSPICIOUS
‚Ä¢
VIAS CONNECT THE FRONT OF THE BOARD TO THE BACK
‚Ä¢ EVENTUALLY I LOOSE THE TRACES AROUND THE MOD CONNECTOR
‚Ä¢ ‚Ä¶‚Ä¶‚Ä¶. REMEMBER THE RECON PHASE ?
‚Ä¢
HOLDING A JUMPER CABLE CONNECTED TO THE TX OF THE FTDI CABLE
‚Ä¢
PRESSING ENTER WHILE POKING AT THE PINS
‚Ä¢
LOOKING AT THE RESULT IN THE SERIAL CONSOLE
‚Ä¢
SECOND PIN WORKED! THE CURSOR MOVE WHEN I PRESS ENTER!
‚Ä¢
SANDED ETHERNET PLUG TO MAKE IT FIT IN THE MOD PORT
‚Ä¢
USE RJ45 TO DB9 (‚ÄúCISCO CONSOLE CABLE‚Äù)
‚Ä¢
JUMPER CABLE CONNECTS DB9 PINS TO FTDI CABLE
THE CLEANER SETUP
ROOT SHELL AND HOUSE KEEPING
‚Ä¢ WE HAVE A ROOT SHELL! WHAT‚ÄôS NEXT ?
‚Ä¢
POKE AROUND THE LIVE SYSTEM
‚Ä¢
GET PRE-COMPILED BINARIES ON THE PHONE (GDB, DOOM, YOU NAME IT‚Ä¶)
‚Ä¢
THE ORIGINAL GOAL WAS TO AUDIT THE MAIN H.323 APPLICATION
‚Ä¢ THE CONSOLE IS FLOODED WITH DEBUG MESSAGES
‚Ä¢
IF WE KILL PROCESSES, THE WATCHDOG KICKS IN AND REBOOTS THE PHONE
‚Ä¢
MAGIC COMMANDS:
‚Ä¢
KILL THE WATCHDOG DEAMON
‚Ä¢
TELL LINUX TO STOP CARING ABOUT WHATCHDOG
‚Ä¢
KILLS THE VERBOSE PROCESSES
‚Ä¢ PIDS ARE SOMETIMES A LITTLE OFF
‚Ä¢ DEPENDS ON WHAT YOU WANT TO DO
IT‚ÄôS VULN RESEARCH TIME!
POKING AROUND
‚Ä¢ IT‚ÄôS NATURAL ONCE WE HAVE ROOT SHELL TO:
‚Ä¢
HAVE A LOOK AT THE RUNNING PROCESSES
‚Ä¢
HAVE A LOOK AT THE OPEN PORTS (AND WHO IS OPENED THEM)
‚Ä¢
HAVE FUN AND EXPLORE ‚ò∫
POKING AT DHCLIENT
‚Ä¢ DHCLIENT IS INTERESTING TO LOOK AT:
‚Ä¢
IT IS ALREADY RUNNING
‚Ä¢
IT IS A NETWORKED PROCESS
‚Ä¢
IT‚ÄôS A CHANGE FROM UDHCPC
‚Ä¢ GIVES US REALLY SURPRISING RESULTS
‚Ä¢
A 2007 COPYRIGHT !
‚Ä¢
SEGFAULT ?!
‚Ä¢
FUNKY ERROR MESSAGE
VERIFYING THIS VERSION IS STILL VULNERABLE
‚Ä¢ WE‚ÄôRE GOING TO COMPARE THE ORIGINAL SOURCE CODE WITH THE FIXED ONE
‚Ä¢ WE HAVE A WORKING EXPLOIT FOR X86 THAT HINTS HOW TO EXPLOIT THE BUG
‚Ä¢
IT‚ÄôS A BASIC STACK OVERFLOW‚Ä¶
‚Ä¢ WE NEED TO CHECK IF MODERN MITIGATIONS ARE IN PLACE ON THE PHONE
‚Ä¢
STACK COOKIE
‚Ä¢
ASLR
‚Ä¢ SET UP A DEBUG ENVIRONMENT
‚Ä¢
LIVE ON THE PHONE (HARD BECAUSE OF DHCLIENT INTEGRATION WITH H.323 STACK)
‚Ä¢
OR EMULATION (MORE TIME CONSUMING TO SETUP, BUT MORE FLEXIBLE)
Patched
Vulnerable
No stack 
canary 
Vulnerable
Found function 
with strings it uses
EXPLOITATION TIME!
GETTING THE BEST ENVIRONMENT
‚Ä¢ MANUALLY RUNNING DHCLIENT ON THE PHONE MAKES IT SEGFAULT
‚Ä¢
MAYBE SOMETHING ON THE PHONE IS INTERFERING
‚Ä¢
OR IT IS DUE TO AVAYA‚ÄôS MODIFICATIONS (REMEMBER THE CURIOUS ERROR MESSAGE)
‚Ä¢ WE SHOULD BE ABLE TO RUN IT IN QEMU
SETTING UP QEMU
‚Ä¢
QEMU CAN EMULATE ARM EITHER FOR USERLAND OR AS A FULL-SYSTEM
‚Ä¢
USERLAND WON‚ÄôT DO HERE BECAUSE CONNECTIVITY COMPLEXITY
‚Ä¢
DHCLIENT WANTS TO CHANGE IP ADDRESSES
‚Ä¢
SOME WEIRD PIPE DETAILS WE WILL COVER IN A SECOND
‚Ä¢
WE CAN BUILD A CUSTOM LINUX KERNEL WITH BUSYBOX AND ADD THE LIBRARIES WE NEED FOR DHCLIENT
‚Ä¢
HTTPS://WWW.ZACHPFEFFER.COM/SINGLE-POST/BUILD-THE-LINUX-KERNEL-AND-BUSYBOX-AND-RUN-ON-QEMU
‚Ä¢
HTTPS://LEARNINGFROMYOUBLOG.WORDPRESS.COM/2016/04/05/131/
‚Ä¢
WE WANT TO BUILD A VEXPRESS-A9 IMAGE
RUNNING QEMU
‚Ä¢ WE HAVE TO RUN QEMU WITH PROPER NETWORK
‚Ä¢
DEFAULT CONFIGURATION WILL PROVIDE A DHCP SERVER, WHICH WE DON‚ÄôT WANT
‚Ä¢
WE NEED TO BE INTENTIONAL WITH OUR NETWORK STACK
‚Ä¢
HTTPS://ALBERAND.GITHUB.IO/HOST-ONLY-NETWORKING-SET-UP-FOR-QEMU-HYPERVISOR.HTML
‚Ä¢ HOW TO EXIT QEMU ‚ò∫
‚Ä¢
CTRL+A, THEN X
DEBUGGING DHCLIENT
‚Ä¢ TO RUN DHCLIENT FROM INSIDE QEMU
‚Ä¢
DHCLIENT -SF /SBIN/DHCLIENT-SCRIPT -V CCP.AVAYA.COM -H AVX2504A4  ETH0
‚Ä¢
STILL SEGFAULT 
‚Ä¢ LOOKING AT WHERE THE SEGFAULT HAPPENS, WE FIND HINTS OF AVAYA‚ÄôS MODIFICATIONS
‚Ä¢
DHCLIENT GOT TWEAKED TO INTERACT WITH AVAYA‚ÄôS H.323 STACK
‚Ä¢
MORE COMMAND LINE OPTIONS
‚Ä¢
‚ÄúWEIRD SOCKET‚Äù
DHCLIENT TWEAKS
‚Ä¢
OPENS A NAMED SOCKET (AF_UNIX)
‚Ä¢
‚ÄúSPARK_DHCPSERVER‚Äù
‚Ä¢ READS FROM IT TO GET CONFIGURATION VALUES
‚Ä¢
EASIER TO HAVE A LOOK AT THE BINARY THAT
LISTENS ON THE SOCKET AND SENDS THE
CONFIGURATION VALUES
‚Ä¢
WE NEED TO HAVE A LOOK AT THE H.323 BINARY
FOR THAT
‚Ä¢ ABSENCE OF THE SOCKET WILL MAKE DHCLIENT
CRASH
dhcp Init
dhcp thread
Store the socket handle
‚Ä¢
CODE FROM THE H.323 STACK
‚Ä¢
‚ÄúDHCPCINTERFACEINIT‚Äù FUNCTION
‚Ä¢
CREATE A NEW NAMED LISTENING SOCKET
‚Ä¢
‚ÄúSPARK_DHCPSERVER‚Äù
‚Ä¢
SEPARATE THREAD WILL READ/WRITE TO IT
‚Ä¢
THE XREF TO THE SOCKET HANDLE POINTS US TO THE DHCP
THREAD FUNCTION
INITIALIZING THE DHCP INTERFACE
Name the socket
dhcp thread
Prepare the 
buffer to send
Send 0x14 bytes
Python re-implementation
DEBUGGING DHCLIENT (FOR REAL THIS TIME)
‚Ä¢
RUN THE PYTHON SCRIPT ON HOST, SOCAT IN QEMU
‚Ä¢
SOCAT IS A FANCY VERSION OF NETCAT, HANDLES AF_UNIX SOCKETS
‚Ä¢
DHCLIENT CAN BE RUN IN GDB AS WELL:
‚Ä¢
GDB /BIN/DHCLIENT -EX "B *0X14DD8" -EX "R -SF /SBIN/DHCLIENT-SCRIPT -V CCP.AVAYA.COM -H AVX2504A4  ETH0"  -EX "B *0X00020AA4‚Äú
‚Ä¢
THE BREAKPOINTS (‚ÄìEX ‚ÄúB *0X‚Ä¶‚Äù) ARE HERE TO BREAK WHEN DHCLIENT MESS WITH OUR IP ADDRESS
‚Ä¢
WHEN WE BREAK, WE RE-CONFIGURE THE IP ADDRESS TO A STATIC ONE SO THAT SOCAT DOESN‚ÄôT GET CONFUSED
‚Ä¢
FINALLY, WE CAN SEND ROGUE DHCP PACKETS AND SEE THE RESULT
‚Ä¢
COULDN‚ÄôT GET THE ORIGINAL POC TO COMPILE ü§£
‚Ä¢
USED A SCAPY-BASED ONE INSTEAD (FROM A DIFFERENT DHCLIENT EXPLOIT)
REACHING THE VULNERABLE CODE PATH
‚Ä¢ THE BUG HAPPENS WHEN SENDING AN INVALID-SIZED SUBNET-MASK OPTION
‚Ä¢
DHCP OPTIONS ARE TLV (TYPE, LENGTH, VALUE)
‚Ä¢
THE SUBNET-MASK OPTION TYPE IS ‚Äú1‚Äù
‚Ä¢
THE LENGTH SHOULD BE 4 (IT‚ÄôS A 4 BYTES MASK) BUT WE CAN SEND 255 BYTES
‚Ä¢ WE CAN USE SCAPY TO CRAFT A DHCP REPLY WITH THE INVALID DATA
‚Ä¢
BEST TO HAVE A PAYLOAD WITH AN EASY TO FIND BYTE-PATTERN
EXPLOITING THE VULNERABLE CODE PATH
‚Ä¢ WE CONTROL THE EXECUTION FLOW ü§ò
‚Ä¢ THE FUNKY BYTE PATTERN WE‚ÄôVE USED TELLS US WHICH REGISTER WE CONTROL AND HOW
‚Ä¢ I SKIPPED ONE DETAIL
‚Ä¢
THERE WERE A COUPLE MORE SEGFAULTS BEFORE THIS ONE
‚Ä¢
INVALID READS TO ADDRESSES WE HAVE OVERWRITTEN WITH OUR PAYLOAD
‚Ä¢
LDR R0, [R1] WITH R1 = 0X41414141 (OR SIMILAR)
‚Ä¢
NEED TO KNOW AN ADDRESS THAT CAN BE READ/WRITTEN TO (SAME AS THE ORIGINAL EXPLOIT)
‚Ä¢
OOPS, THERE‚ÄôS NO ASLR‚Ä¶
‚Ä¢
PICK AN ADDRESS IN A WRITABLE REGION JUST TO BE SAFE
‚Ä¢ CAT /PROC/[PID]/VM_MAP
LET‚ÄôS CRAFT A SHELLCODE?
EXPLOITING THE VULNERABLE CODE PATH
‚Ä¢ WE‚ÄôRE NOT EXACTLY SURE WHERE OUR PAYLOAD IS IN MEMORY
‚Ä¢ AND THAT‚ÄôS THE MEMORY MAP WE HAVE
‚Ä¢ STACK AND HEAP DOESN‚ÄôT APPEAR TO BE EXECUTABLE
‚Ä¢
SHOULD WE ROP THEN? 
EXPLOITING THE VULNERABLE CODE PATH
‚Ä¢ WE‚ÄôRE NOT EXACTLY SURE WHERE OUR PAYLOAD IS IN MEMORY
‚Ä¢ AND THAT‚ÄôS THE MEMORY MAP WE HAVE
‚Ä¢ STACK AND HEAP DOESN‚ÄôT APPEAR TO BE EXECUTABLE
‚Ä¢
SHOULD WE ROP THEN? WE DO CONTROL R4 üòà
‚Ä¢ WE CAN HUNT FOR DATA TO BE COPIED IN A STATIC LOCATION
‚Ä¢
TRY LOTS OF DIFFERENT DHCP OPTIONS, FILL THEM WITH ‚ÄúAAAA‚Ä¶‚Äù
‚Ä¢
THEN LOOK FOR THE STRING IN MEMORY
‚Ä¢ THE ‚ÄúDOMAIN‚Äù OPTION IS A GOOD ONE. 
EXPLOITING THE VULNERABLE CODE PATH
DEMO TIME!
CONCLUSION
‚Ä¢ MITIGATION? 
‚Ä¢
MONITOR YOUR NETWORK
‚Ä¢
SEGREGATE YOUR NETWORK
‚Ä¢
TELL IT TO PATCH!
‚Ä¢ WHY THIS KIND OF BUG CAN HAPPEN?
‚Ä¢
TECHNICAL DEBT IS HARD
‚Ä¢ EMBEDDED DEVICES AREN‚ÄôT BLACK BOXES
‚Ä¢
YOU TOO CAN FIND THESE BUGS NOW!
QUESTIONS? 
FIND ME ON TWITTER @PHLAUL
THANK YOU ALL!
RESSOURCES
TUTORIALS
‚Ä¢
ARM
‚Ä¢
HTTPS://AZERIA-LABS.COM/WRITING-ARM-ASSEMBLY-PART-1/
‚Ä¢
FINDING THE BASE ADDRESS OF A BOOTLOADER
‚Ä¢
HTTPS://BLOG.QUARKSLAB.COM/REVERSE-ENGINEERING-SAMSUNG-S6-SBOOT-PART-I.HTML
‚Ä¢
QEMU:
‚Ä¢
HTTPS://WWW.ZACHPFEFFER.COM/SINGLE-POST/BUILD-THE-LINUX-KERNEL-AND-BUSYBOX-AND-RUN-ON-QEMU
‚Ä¢
HTTPS://LEARNINGFROMYOUBLOG.WORDPRESS.COM/2016/04/05/131/
‚Ä¢
HTTPS://ALBERAND.GITHUB.IO/HOST-ONLY-NETWORKING-SET-UP-FOR-QEMU-HYPERVISOR.HTML
‚Ä¢
FLASH MODIFICATION
‚Ä¢
HTTPS://WWW.BLACKHAT.COM/DOCS/US-14/MATERIALS/US-14-OH-REVERSE-ENGINEERING-FLASH-MEMORY-FOR-FUN-AND-BENEFIT-WP.PDF
‚Ä¢
HTTPS://WWW.FLASHROM.ORG/ISP
‚Ä¢
GENERAL HARDWARE HACKING
‚Ä¢
HTTP://WWW.DEVTTYS0.COM/2012/11/REVERSE-ENGINEERING-SERIAL-PORTS/
‚Ä¢
HTTPS://WWW.DEFCON.ORG/IMAGES/DEFCON-21/DC-21-PRESENTATIONS/PHORKUS-EVILROB/DEFCON-21-PHORKUS-EVILROB-HACKING-EMBEDDED-DEVICES-
BAD-THINGS-TO-GOOD-HARDWARE.PDF
‚Ä¢
HTTPS://WWW.PENTESTPARTNERS.COM/SECURITY-BLOG/HOW-TO-READ-FROM-AN-EEPROM/
‚Ä¢
HTTPS://PUBLISHED-PRD.LANYONEVENTS.COM/PUBLISHED/RSAAP15.6381_AP18/SESSIONSFILES/4419/CMI-R03-EMBEDDED-SYSTEMS-OR-HOW-I-LEARNED-TO-
START-WORRYING-AND-HATE-IOT_FINAL.PDF
‚Ä¢
HTTPS://BLOG.SENR.IO/BLOG/JTAG-EXPLAINED
‚Ä¢
GLITCHING ATTACK
‚Ä¢
HTTPS://WWW.YOUTUBE.COM/WATCH?V=TECQATNCF20 (GLITCHY DESCRIPTOR FIRMWARE GRAB - SCANLIME:015)
PRIOR WORK
‚Ä¢ RED BALLOON SECURITY PRESENTATIONS ON AVAYA
‚Ä¢
HTTPS://WWW.RSACONFERENCE.COM/VIDEOS/STEPPING-P3WNS-ADVENTURES-IN-FULL-SPECTRUM-
EMBEDDED-EXPLOITATION-DEFENSE
‚Ä¢
HTTPS://WWW.RSACONFERENCE.COM/WRITABLE/PRESENTATIONS/FILE_UPLOAD/BR-T08-EMBEDDED-
EXPLOITATION-PARTY-TRICK.PDF
‚Ä¢ DHCLIENT EXPLOITS
‚Ä¢
HTTPS://WWW.EXPLOIT-DB.COM/EXPLOITS/9265
‚Ä¢
HTTPS://WWW.EXPLOIT-DB.COM/EXPLOITS/36933
CAPTURE THE FLAG
‚Ä¢
HTTPS://MICROCORRUPTION.COM/
‚Ä¢
HTTPS://HOLIDAYHACKCHALLENGE.COM/2015/
‚Ä¢
HTTPS://GITHUB.COM/PRAETORIAN-CODE/DVRF