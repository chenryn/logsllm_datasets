particularly eﬃcient when parameter a = −1. After some
straightforward optimizations of the original formulae from
[11], a mixed point addition can be carried out using seven
multiplications (7M), while three multiplications (3M) and
four squarings (4S) are necessary to double a point. Mixed
here means that one of the points to be added is given in
extended projective coordinates, and the other in extended
aﬃne coordinates. We represent a projective point via the
quintuple (X : Y : E : H : Z), whereby EH = T = XY /Z is
the fourth coordinate from [11]. An extended aﬃne point is
a triple (u : v : w) where u = (x + y)/2, v = (y − x)/2, and
w = dxy. Besides eﬃciency, twisted Edwards curves have a
second major advantage, namely that scalar multiplication
can be easily made resistant against Simple Power Analysis
(SPA) thanks to the completeness of the addition law.
Bernstein et al formally proved in [3] that every twisted
Edwards curve ET over a non-binary ﬁeld Fq is birational-
ly equivalent over Fq to a Montgomery curve EM and vice
versa. They also gave a set of formulae for the conversion
of points on ET to points on EM and back.
2.2 Generation of MoTE Curves
A MoTE curve can be described as a Montgomery curve
that is birationally equivalent to a twisted Edwards curve
with a fast and complete addition law [16]. “Fast” in this
context means that we can apply the 7M mixed-addition
formula mentioned above, which is only possible when the
curve parameter a is −1. On the other hand, completeness
of the twisted Edwards addition requires a to be a square
in Fp and d a non-square. Consequently, it is only possible
to have a fast and complete addition law when a = −1 is
a square in the underlying prime ﬁeld Fp, which is the case
if and only if p ≡ 1 mod 4. In other words, a MoTE curve
can only be generated over a prime ﬁeld Fp whose order is
congruent to 1 modulo 4 [6, 16]. The authors of the origi-
nal MoTE-ECC paper [16] used so-called Optimal Prime
Fields (OPFs) as underlying algebraic structure, which are
deﬁned by primes of the form p = u · 2k + 1 where u has a
length of up to 16 bits [15]. While such primes are always
congruent to 1 mod 4, they have the disadvantage that the
computation of square roots mod p is costly, which poses a
problem for application scenarios where point compression
is desirable1. A further drawback of OPFs is that, despite
their excellent arithmetic properties (see e.g. [15]), they are
not (yet) widely supported by other ECC implementations
for WSNs. Therefore, and since we want our software to be
suitable for applications that require point compression, we
eventually decided to not use OPFs.
Our ECC software for 16-bit TI MSP430 microcontrollers
employs pseudo-Mersenne prime ﬁelds in order to facilitate
inter-operability with other implementations and support a
variety of ECC protocols and applications, including ones
that require point compression. Although we focus only on
ECDH key exchange in this paper, the two MoTE curves
we present in this section are not limited to ECDH but can
1It should be noted that point compression is obsolete in
an “x-coordinate-only” ECDH key exchange as described in
the MoTE-ECC paper [16] and earlier in [2]. The ability to
eﬃciently de-compress a point is mainly useful for schemes
that need both the x and y coordinate (e.g. signatures).
be used with any other scheme. A pseudo-Mersenne prime
has the form p = 2k − c where c is small enough to ﬁt into
a single register on the target platform, which means c can
be (at most) 16 bits long in our case. In order to achieve
both a complete addition law and fast square-root compu-
tations, we use primes that are congruent to 5 mod 8. Since
p ≡ 5 mod 8 implies p ≡ 1 mod 4, the parameter a = −1 is
clearly a square modulo p. On the other hand, if a prime
p satisﬁes p ≡ 5 mod 8, it is possible to compute the square
root of an element of Fp in a fairly eﬃcient way using the
method of Atkin [6], which, in essence, costs an exponen-
tiation modulo p. Following the approach of Bernstein from
[2], we adopt primes with a bitlength slightly less than the
“nominal” length, e.g. 159 instead of 160 bits. To be more
concrete, the exponent k of our pseudo-Mersenne primes is
a multiple of 32 minus 1. Using primes that leave one bit
of “headroom” simpliﬁes the implementation of arithmetic
operations modulo p if one aims for both high performance
and some basic resistance against SPA attacks [14]. Once
the exponent k is ﬁxed, a suitable value for c needs to be
determined, which we simply did by choosing the minimal
c so that p = 2k − c is a prime congruent to 5 modulo 8. In
this way, we found the 159-bit prime p = 2159 − 91 and the
191-bit prime p = 2191 − 19.
When generating elliptic curves for cryptographic appli-
cations, one needs to take into account both security and
eﬃciency requirements. The SafeCurves website [4] deﬁnes
a number of criteria a curve has to satisfy to be considered
secure, whereby it distinguishes between ECC security and
ECDLP security. On top of the list of requirements for the
latter is that the group of rational points on a given curve
contains a large subgroup of prime order (cid:96) [4]. SafeCurves
requires (cid:96) to be at least 2200, in which case computing the
ECDLP is infeasible with today’s technology. However, the
requirement to use groups of such large order contradicts
with the common practice of using groups of order between
2160 and 2192 for WSN applications, see e.g. [13]. This is, in
general, due to the fact that sensor nodes are a low-value
target for cryptanalytic attacks, and, consequently, orders
of about 2160 still provide ample protection for applications
in such areas like home automation. Furthermore, it has to
be taken into account that the ECDLP is almost never the
weakest link in the security of WSNs [17]. In practice, the
most serious vulnerability of sensor nodes is their physical
exposure to attackers along with the lack of tamper resis-
tance. A serious attacker would never attempt to break the
ECDLP in a 160-bit group as he can get the secret key in
a much cheaper way via reverse engineering. Therefore, we
decided to use elliptic curves with orders of about 2160 and
2192; both orders are well established and supported in the
WSN research community.
As speciﬁed in [6], the “Montgomery shape” of a MoTE
curve is given by an equation of the form
EM : −(A + 2)y2 = x3 + Ax2 + x,
(3)
which means the parameter B = −(A + 2). This contrasts
with the “conventional” approach of using B = 1 as in the
case of e.g. Curve25519 [2]. Choosing a Montgomery curve
with B = −(A + 2) has the the advantage that such a curve
is “directly” birationally equivalent to a twisted Edwards
curve possessing a fast addition law [11], i.e. to a twisted
Edwards curve with a = −1. Given a Montgomery curve
with parameters A, B as in Equation (1), the parameters
of the birationally-equivalent twisted Edwards curve can be
computed as follows (see [3] for details).
a = (A + 2)/B and d = (A − 2)/B
(4)
Therefore, when B = −(A + 2), the curve parameter a we
obtain is a = (A + 2)/(−(A + 2)) = −1, which simpliﬁes
the conversion of points between the Montgomery and the
twisted Edwards shape (see [6] for additional details). On
the other hand, when B = 1, the conversion of a point on
the Montgomery curve to a point on the birationally-equiv-
alent twisted Edwards curve with a = (A + 2)/B and then
from there to an isomorphic twisted Edwards curve of the
form −x2 + y2 = 1 + (−d/a)x2y2 (which allows one to use
√−a as explained in [11, Section
the fast 7M addition formula) is more complex and requires
the pre-computation of 1/
3.1]. The parameter A of the Montgomery form of a MoTE
curve is chosen such that A − 2 is a square and A + 2 is a
non-square in Fp, in which case d = (A − 2)/(−(A + 2)) is
also a non-square (at least if p ≡ 1 mod 4) and the twisted
Edwards addition law is complete. Last, but not least, the
parameter A is congruent to 2 mod 4 to ensure (A + 2)/4 is
small and a multiplication by (A + 2)/4 can be performed
eﬃciently. Taking all this and some further considerations
(e.g. twist security) into account, we generated the MoTE
curves P159 and P191, which we specify below. The “P” in
the name of these curves stands for pseudo-Mersenne prime
and the subsequent 3-digit number denotes the bitlength.
MoTE Curve P159
P159 is a MoTE curve over the 159-bit prime ﬁeld Fp given
by p = 2159 − 91. The Montgomery shape of curve P159 is
deﬁned through the equation
EM 159 : −3191568y2 = x3 + 3191566x2 + x
(5)
(i.e. A = 3191566 and B = −(A + 2) = −3191568). This
Montgomery curve is birationally equivalent to the twisted
Edwards curve of the form
ET 159 : −x2 + y2 = 1 + dx2y2,
(6)
where d = 837225916393474870456088348941705219765626
63492. Curve P159 has an order of q = 4(cid:96)  p where
(cid:96)’ is a prime slightly larger than 2156. In other words, curve
P159 has a co-factor of 4, whereas its quadratic twist has
a co-factor of 8. Both the curve and its twist have a large
embedding degree of above 2100. Moreover, curve P159 has
a large CM ﬁeld discriminant that fully complies with the
SafeCurves requirements (see [6] for further details).
MoTE Curve P191
P191 is a MoTE curve over the 191-bit prime ﬁeld Fp given
by p = 2191 − 19. The Montgomery shape of curve P191 is
deﬁned through the equation
EM 191 : −2678312y2 = x3 + 2678310x2 + x
(7)
(i.e. A = 2678310 and B = −(A + 2) = −2678312). This
Montgomery curve is birationally equivalent to the twisted
Edwards curve of the form
ET 191 : −x2 + y2 = 1 + dx2y2,
(8)
where d = 103951507655322023199378042616749966478813
474077612237402. Curve P191 has very similar features as
curve P159 with respect to order (resp. co-factor) of curve
and twist, embedding degree of curve and twist, as well as
CM ﬁeld discriminant. A more detailed description of this
curve can be found in [6].
3. FIELD ARITHMETIC
Most practical implementations of ECC adopt some kind
of “special” prime ﬁelds to speed up the modular reduction
operation; well-known examples are ﬁelds whose order is a
Mersenne-like prime, e.g. a generalized or pseudo-Mersenne
prime. In this section, we will focus only on the latter class
of primes. A so-called pseudo-Mersenne prime has the form
p = 2k − c where c is small in relation to 2k; typically, c is
chosen to ﬁt into a register of the target processor. This is
clearly met by the primes p = 2159 − 91 and p = 2191 − 19
from the previous section. The major idea of fast reduction
modulo a pseudo-Mersenne prime p = 2k − c is to utilize
the congruence relation 2k ≡ c mod p repetitively until the
obtained residue has the same bitlength as p. Suppose z is
an integer of a length of l > k bits. At ﬁrst, z needs to be
split up into a lower part zL comprising the k least signiﬁ-
cant bits of z and an upper part zH that comprises all the
other bits, i.e. we can write z = zH 2k + zL. Now, we have
to substitute 2k by c and get
z = zH 2k + zL ≡ zH c + zL
(9)
This new value for z is, of course, in the same residue class
as the original z, but at least k − 1 bits shorter. To obtain
a further reduced result, we simply apply this substitution
repeatedly until z has the same bitlength as p.
The elements of a prime ﬁeld Fp with p = 2k − c are the
integers from 0 to p − 1, which are at most k bits long. As
usual, we represent the ﬁeld elements in the form of arrays
of w-bit words, where w corresponds to the word-size of the
target processor, i.e. w = 16 in our case. A k-bit operand
consists of exactly m = (cid:100)k/w(cid:101) words, which means m = 10
for 159-bit operands and m = 12 for k = 191. We will use
indexed lowercase letters to denote the individual words in
an array, e.g. a ∈ Fp is stored in an m-word array of the
form a = (am−1, . . . , a1, a0) with 0 ≤ ai < 2w where a0 and
am−1 represent the least and most signiﬁcant w-bit word
of a, respectively. Similar to numerous other ECC software
implementations, e.g. [15], we adopt the idea of incomplete
modular reduction, which means all arithmetic operations
modulo p accept operands that are not fully reduced (and
hence not less than p), as long as they ﬁt into m words. In
our case, the operands can be up to n = mw = k + 1 bits
long because the exponent k of the primes we use is not a
multiple of w but one bit shorter. To give a more concrete
example, the operands of the arithmetic operations modulo
our 159-bit prime can be up to n = 160 bits long and also
the results can have a length of up to 160 bits.
3.1 Addition and Subtraction
An addition of two elements of Fp is, basically, a normal
integer addition, yielding a sum that can be (at most) one
bit longer than the operands, followed by a reduction mod
p. Algorithm 1 shows our implementation of the addition
modulo a k-bit pseudo-Mersenne prime p, whereby we use
a similar notation as in Section 2.2.1 of [8]. The word-wise
additions in line 3 and line 9 are add-with-carry operations
with ε representing the carry bit. As explained above, the
operands a, b do not necessarily need to be smaller than
p, but they must ﬁt into m words, i.e. they can be up to
n = k + 1 bits long. The ﬁrst part of Algorithm 1 performs
a conventional multiple-precision addition, yielding a sum
of up to n + 1 bits, of which n bits are stored in the words
of s and the ﬁnal carry bit in ε. In line 5 we combine the
“excess bits” (i.e. ε and the most signiﬁcant bit of sm−1) in
t, which corresponds to zH in Equation (9). Since the sum
s before reduction is (at most) n + 1 bits long, t can have
a length of two bits, i.e. 0 ≤ t ≤ 3. The next step (line 6)
is to clear the most signiﬁcant bit of sm−1, after which the
sum s is at most k bits long. Now we multiply t by c, add
the product to s0, and ﬁnally propagate the carry up to
sm−1. The result is at most k + 1 bits long because it had
a length of k bits before the addition of t· c. Thus, it can be
used as operand in another ﬁeld operation. Note that the
modular addition in Algorithm 1 has a constant execution
time as it does not contain any conditional statements.
Algorithm 1. Addition modulo a pseudo-Mersenne prime
Input: Two m-word operands a = (am−1, . . . , a0) and b =
(bm−1, . . . , b0), and a prime of the form p = 2k − c.
Output: Modular sum s = a + b mod p = (sm−1, . . . , s0).
1: (ε, s0) ← a0 + b0
2: for i = 1 to m − 1 do
(ε, si) ← ai + bi + ε
3:
4: end for
5: t ← (ε (cid:28) 1) + (sm−1 (cid:29) 15)
6: sm−1 ← sm−1 & 0x7fff
7: (ε, s0) ← t · c + s0
8: for i = 1 to m − 1 do
(ε, si) ← si + ε
9:
10: end for
11: return s
{ 0 ≤ t ≤ 3}
{ clear the MSB of sm−1}
{ main step of reduction}
A subtraction in Fp can be performed in a similar way as
the modular addition described above. To prevent negative
results, we execute the subtraction s = a − b mod p via an
operation of the form s = 3p + a − b mod p. Since we use
pseudo-Mersenne primes, the addition of 3p does not cause
much overhead due to the fact that most words of 3p have
the same value, namely 2w − 1, and so they do not need to
be loaded from memory. The reduction step can be done in
exactly the same way as described above.
3.2 Multiplication and Squaring
Multiplication and squaring in Fp are in general the two
most performance-critical ﬁeld operations performed in the
course of a scalar multiplication [8]. When using a pseudo-
Mersenne prime, it is common practice to do the reduction
mod p after the multiplication instead of executing them in
an interleaved fashion as in [15]. Also our implementation
for the MSP430 follows this basic approach. Some MSP430
models feature a memory-mapped hardware multiplier able
to execute (16 × 16)-bit multiply and multiply-accumulate
operations on both signed and unsigned integers [24]. Since