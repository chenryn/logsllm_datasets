ﬁnd a common secret key if they have both picked a common key
space.
Since Ai is an N × (λ + 1) matrix, Ai(j) consists of (λ + 1)
elements. Therefore, each node needs to store (λ + 1)τ elements in
its memory. Because the length of each element is the same as the
length of secret keys, the memory usage of each node is (λ + 1)τ
times the length of the key.
3.2 Key Agreement Phase
After deployment, each node needs to discover whether it shares
any space with its neighbors. To do this, each node broadcasts a
message containing the following information: (1) the node’s id,
(2) the indices of the spaces it carries, 3 and (3) the seed of the
column of G it carries. 4
Assume that nodes i and j are neighbors, and they have received
3If we are concerned about disclosing the indices of the spaces each
node carries, we can use the challenge-response technique to avoid
sending the indices [7].
4We could also let node id be the same as the seed.
the above broadcast messages.
If they ﬁnd out that they have a
common space, e.g. Sc, they can compute their pairwise secret
key using Blom’s scheme: Initially node i has Ac(i) and seed for
G(i), and node j has Ac(j) and seed for G(j). After exchanging
the seeds, node i can regenerate G(j) and node j can regenerate
G(i); then the pairwise secret key between nodes i and j, Kij =
Kji, can be computed in the following manner by these two nodes
independently:
Kij = Kji = Ac(i) · G(j) = Ac(j) · G(i).
After secret keys with neighbors are set up, the entire sensor net-
work forms the following Key-Sharing Graph:
DEFINITION 3.1. (Key-Sharing Graph) Let V represent all the
nodes in the sensor network. A Key-Sharing graph Gks(V, E) is
constructed in the following manner: For any two nodes i and j in
V , there exists an edge between them if and only if (1) nodes i and
j have at least one common key space, and (2) nodes i and j can
reach each other within the wireless transmission range.
We now show how two neighboring nodes, i and j, who do not
share a common key space could still come up with a pairwise se-
cret key between them. The idea is to use the secure channels that
have already been established in the key-sharing graph Gks: as
long as Gks is connected, two neighboring nodes i and j can al-
ways ﬁnd a path in Gks from i to j. Assume that the path is i, v1,
. . ., vt, j. To ﬁnd a common secret key between i and j, i ﬁrst
generates a random key K. Then i sends the key to v1 using the se-
cure link between i and v1; v1 sends the key to v2 using the secure
link between v1 and v2, and so on until j receives the key from vt.
Nodes i and j use this secret key K as their pairwise key. Because
the key is always forwarded over a secure link, no nodes beyond
this path can ﬁnd out the key.
3.3 Computing ω, τ, and Memory Usage
As we have just shown, to make it possible for any pair of nodes
to be able to ﬁnd a secret key between them, the key sharing graph
Gks(V, E) needs to be connected. Given the size and the density
of a network, how can we select the values for ω and τ , s.t., the
graph Gks is connected with high probability? We use the follow-
ing three-step approach, which is adapted from [11].
Step 1: Computing Required Local Connectivity. Let Pc be
the probability that the key-sharing graph is connected. We call it
global connectivity. We use local connectivity to refer to the proba-
bility of two neighboring nodes sharing at least one space (i.e. they
can ﬁnd a common key between them). The global connectivity
and the local connectivity are related: to achieve a desired global
connectivity Pc, the local connectivity must be higher than a certain
value; we call this value the required local connectivity, denoted by
prequired.
Using connectivity theory in a random-graph by Erd˝os and R´enyi
[10], we can obtain the necessary expected node degree d (i.e., the
average number of edges connected to each node) for a network of
size N when N is large in order to achieve a given global connec-
tivity, Pc:
(N − 1)
N
d =
[ln(N ) − ln(− ln(Pc))] .
(1)
For a given density of sensor network deployment, let n be the
expected number of neighbors within wireless communication range
of a node. Since the expected node degree must be at least d as
calculated above, the required local connectivity prequired can be
estimated as:
prequired =
d
n
.
(2)
Step 2: Computing Actual Local Connectivity. After we have
selected values for ω and τ , the actual local connectivity is deter-
mined by these values. We use pactual to represent the actual local
connectivity, namely pactual is the actual probability of any two
neighboring nodes sharing at least one space (i.e. they can ﬁnd a
common key between them). Since pactual = 1 − Pr(two nodes do
not share any space),
(cid:7)
ω
τ
(cid:8)(cid:7)
(cid:7)
(cid:8)
(cid:8)2 = 1 − ((ω − τ )!)2
(ω − 2τ )!ω!
ω−τ
τ
ω
τ
.
(3)
pactual = 1 −
The values of pactual have been plotted in Fig. 2 when ω varies
from τ to 100 and τ = 2, 4, 6, 8. For example, one can see that,
when τ = 4, the largest ω that we can choose while achieving the
local connectivity pactual ≥ 0.5 is 25.
τ=2
τ=4
τ=6
τ=8
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
]
y
e
k
e
n
o
t
s
a
e
l
t
a
g
n
i
r
a
h
s
[
r
P
0
0
10
20
30
40
50
ω
60
70
80
90
100
Figure 2: Probability of sharing at least one key when two
nodes each randomly chooses τ spaces from ω spaces.
(cid:9)
The collection of sets of spaces assigned to each sensor form a
probabilistic quorum system [14]: the desire is that every two sen-
√
sors have a space in common with high probability. Furthermore, it
can be shown that if τ ≥
ω, then the probability
birthday paradox. For example, when τ ≥ √
of intersection is at least pactual; this has the similar property to the
ω, the probabil-
ity of intersection is at least 1/2. This can explain the behavior of
Fig. 2.
1−pactual
ln 2
√
ln
1
Step 3: Computing ω and τ. Knowing the required local con-
nectivity prequired and the actual local connectivity pactual, in or-
der to achieve the desired global connectivity Pc, we should have
pactual ≥ prequired,
1 − ((ω − τ )!)2
(ω − 2τ )!ω!
[ln(N ) − ln(− ln(Pc))] .
≥ (N − 1)
nN
(4)
Therefore, in order to achieve a certain Pc for a network of size
N and the expected number of neighbors for each node being n,
we just need to ﬁnd values of ω and τ , such that Inequality (4) is
satisﬁed.
Step 4: Computing memory usage. According to Blom’s scheme,
a node needs to store a row from an N × (λ + 1) matrix (D · G)T ;
therefore, for each selected space, a node needs to carry λ + 1
elements; Hence the total memory usage m for each node is:
m = (λ + 1)τ.
(5)
4. SECURITY ANALYSIS
We evaluate the multiple-space key pre-distribution scheme in
terms of its resilience against node capture. Our evaluation is based
on two metrics: (1) When x nodes are captured, what is the proba-
bility that at least one key space is broken? As we know, because of
the λ-secure property of our scheme, to break a key space, an adver-
sary needs to capture λ+1 nodes that contain this key space’s infor-
mation; otherwise, the key space is still perfectly secure. This anal-
ysis shows when the network starts to become insecure. (2) When
x nodes are captured, what fraction of the additional communica-
tion (i.e. communication among uncaptured nodes) also becomes
compromised? This analysis shows how much payoff an adversary
can gain after capturing a certain number of nodes.
4.1 Probability of At Least One Space Being
Broken
We deﬁne the unit of memory size as the size of a secret key (e.g.
64 bits). According to Blom’s scheme, if a space is λ-secure, each
node needs to use memory of size λ + 1 to store the space infor-
mation. Therefore, if the memory usage is m and each node needs
(cid:7) − 1. In the
to carry τ spaces, then the value of λ should be (cid:6) m
following analysis, we choose λ = (cid:6) m
Let Si be the event that space Si is broken, where i = 1, . . . , ω,
and Cx be the event that x nodes are compromised in the network.
Furthermore, let Si ∪ Sj be the joint event that either space Si or
space Sj, or both, is broken and θ = τ
Pr(at least one space is broken | Cx) = Pr(S1∪S2∪···∪Sω | Cx).
According to the Union Bound,
ω . Hence, we have
(cid:7) − 1.
τ
τ
Pr(S1 ∪ ··· ∪ Sω | Cx) ≤ ω(cid:10)
ω(cid:10)
i=1
Pr(Si | Cx) = ω Pr(S1 | Cx).
Pr(Si | Cx).
Due to the fact that each key space is broken with equal probability,
i=1
Therefore,
≤ ω(cid:10)
Pr(at least one space is broken | Cx)
Pr(Si | Cx) = ω Pr(S1 | Cx).
(6)
We now need to calculate Pr(S1 | Cx), the probability of space
S1 being compromised when x nodes are compromised. Because
i=1
each node carries information from τ spaces, the probability that
each compromised node carries information about S1 is θ = τ
ω .
Therefore, after x nodes are compromised, the probability that ex-
θj(1−
actly j of these x nodes contain information about S1 is
θ)x−j. Since space S1 can only be broken after at least λ + 1 nodes
are compromised, we have the following result:
(cid:7)
(cid:8)
x
j
Pr(S1 | Cx) =
θj(1 − θ)x−j.
(7)
(cid:11)
(cid:12)
x
j
x(cid:10)
j=λ+1
Combining Inequality (6) and Equation (7), we have the follow-
ing upper bound:
Pr(at least one space is broken | Cx)
x(cid:10)
x(cid:10)
θj(1 − θ)x−j
(cid:14)x−j
(cid:12)
(cid:12)(cid:13) τ
(cid:14)j(cid:13)
(cid:11)
(cid:11)
j=λ+1
x
j
x
j
ω
1 − τ
ω
≤ ω
= ω
.
(8)
j=λ+1
(τ=3, p=0.17), Simulation
(τ=4, p=0.29), Simulation
(τ=5, p=0.42), Simulation
(τ=3, p=0.17), Analysis
(τ=4, p=0.29), Analysis
(τ=5, p=0.42), Analysis
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
n
e
k
o
r
b
s
i
e
c
a
p
s
e
n
o
t
s
a
e
l
t
a
(
r
P
0
0
100
200
300
400
500
600
700
800
900
1000
Number of Compromised Nodes
Figure 3: The probability of at least one key space being com-
promised by the adversary when the adversary has captured x
nodes (m = 200, ω = 50). p in the ﬁgure represents pactual.
We plot both simulation and analytical results in Fig. 3. From the
ﬁgure, the two results match each other closely, meaning that the
union bound works quite well in the scenarios we discuss. Fig. 3
shows, for example, when the memory usage is set to 200, ω is
set to 50, and τ is set to 4, the value of λ for each space is 49 =
(cid:7) − 1, but an adversary needs to capture about 380 nodes in
(cid:6) 200
order to be able to break at least one key space with non-negligible
probability.
4
Authentication Property
Due to the property of Blom’s scheme, all keys generated in a space
are pairwise keys. Therefore, when the space is not yet compro-
mised, keys in this space can be used for authentication purposes.
After the space is broken, adversaries can generate all the pairwise
keys in that space, and keys in that space can no longer be used
for authentication purposes. According to our analysis, adversaries
need to compromise a signiﬁcant number of nodes in order to com-
promise a space.
4.2 The Fraction of Network Communications
that is Compromised
To understand the resilience of our key pre-distribution scheme,
we need to ﬁnd out how the capture of x sensor nodes by an ad-
versary affects the rest of the network. In particular, we want to
ﬁnd out the fraction of additional communications (i.e., commu-
nications among uncaptured nodes) that an adversary can compro-
mise based on the information retrieved from the x captured nodes.
To compute this fraction, we ﬁrst compute the probability that any
one of the additional communication links is compromised after x
nodes are captured. Note that we only consider the links in the
key-sharing graph, and each of these links is secured using a pair-
wise key computed from the common key space shared by the two
nodes of this link. We should also notice that after the key setup
stage, two neighboring nodes can use the established secure links
to agree upon another random key to secure their communication.
Because this key is not generated from any key space, the security
of this new random key does not directly depend on whether the
key spaces are broken. However, if an adversary can record all the
communications during the key setup stage, he/she can still com-
promise this new key after compromising the corresponding links
in the key-sharing graph.
Let c be a link in the key-sharing graph between two nodes that
are not compromised, and K be the communication key used for
this link. Let Bi represent the joint event that K belongs to space
Si and space Si is compromised. We use K ∈ Si to represent that
“K belongs to space Si”. The probability of c being broken given
x nodes are compromised is:
Pr(c is broken | Cx) = Pr(B1 ∪ B2 ∪ ··· ∪ Bω | Cx).
Since c can only use one key, events B1, . . . , Bω are mutually ex-
clusive. Therefore,
Pr(c is broken | Cx) =
because all events Bi are equally likely. Note that
Pr(Bi | Cx) = ω Pr(B1 | Cx),
ω(cid:10)
i=1
.
Pr(Cx)
Pr((K ∈ S1) ∩ (S1 is compromised) ∩ Cx)
Pr(B1 | Cx) =
Since the event (K ∈ S1) is independent of the event Cx or the
event (S1 is compromised),
Pr(K ∈ S1) · Pr(S1 is compromised ∩ Cx)
Pr(B1 | Cx) =
= Pr(K ∈ S1) · Pr(S1 is compromised | Cx).
Pr(S1 is compromised | Cx) can be calculated by Equation (7).
The probability that K belongs to space S1 is the probability that
link c uses a key from space S1. Since the choice of a space from
ω key spaces is equally probable, we have:
Pr(K ∈ S1) = Pr(the link c uses a key from space S1) =
Therefore,
Pr(Cx)
1
ω
.
Pr(c is broken | Cx)