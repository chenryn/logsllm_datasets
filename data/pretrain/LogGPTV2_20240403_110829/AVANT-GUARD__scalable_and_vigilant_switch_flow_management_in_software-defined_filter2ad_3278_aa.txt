title:AVANT-GUARD: scalable and vigilant switch flow management in software-defined
networks
author:Seungwon Shin and
Vinod Yegneswaran and
Phillip A. Porras and
Guofei Gu
AVANT-GUARD: Scalable and Vigilant Switch Flow
Management in Software-Deﬁned Networks
Seungwon Shin† Vinod Yegneswaran‡ Phillip Porras‡ Guofei Gu†
{swshin,guofei}@cse.tamu.edu {vinod, porras}@csl.sri.com
†Texas A&M University
‡SRI International
ABSTRACT
Among the leading reference implementations of the Software De-
ﬁned Networking (SDN) paradigm is the OpenFlow framework,
which decouples the control plane into a centralized application. In
this paper, we consider two aspects of OpenFlow that pose secu-
rity challenges, and we propose two solutions that could address
these concerns. The ﬁrst challenge is the inherent communication
bottleneck that arises between the data plane and the control plane,
which an adversary could exploit by mounting a control plane sat-
uration attack that disrupts network operations. Indeed, even well-
mined adversarial models, such as scanning or denial-of-service
(DoS) activity, can produce more potent impacts on OpenFlow net-
works than traditional networks. To address this challenge, we in-
troduce an extension to the OpenFlow data plane called connec-
tion migration, which dramatically reduces the amount of data-
to-control-plane interactions that arise during such attacks. The
second challenge is that of enabling the control plane to expedite
both detection of, and responses to, the changing ﬂow dynamics
within the data plane. For this, we introduce actuating triggers
over the data plane’s existing statistics collection services. These
triggers are inserted by control layer applications to both register
for asynchronous call backs, and insert conditional ﬂow rules that
are only activated when a trigger condition is detected within the
data plane’s statistics module. We present AVANT-GUARD, an im-
plementation of our two data plane extensions, evaluate the perfor-
mance impact, and examine its use for developing more scalable
and resilient SDN security services.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security and Pro-
tection
Keywords
Software-deﬁned network (SDN); OpenFlow; control plane satura-
tion attack; security and resilience
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516684 .
1.
INTRODUCTION
As enterprise networks and data centers expand in size and com-
plexity, they pose greater administrative challenges and demand
enhanced automation in orchestrating their computer and network
resources. The network research community postulates that one ap-
proach to meeting these challenges lies within the tenet of software-
deﬁned networking (SDN) [19]. By decoupling the control logic
from the closed and proprietary implementations of traditional net-
work devices, SDN enables researchers and practitioners to design
new innovative network functions and protocols in a much easier,
ﬂexible, and more powerful way. The OpenFlow framework [20]
is an embodiment of the SDN concept. In recent years, OpenFlow
(OF) has steadily matured from a research idea explored in aca-
demic milieus [8, 4, 5] to the current SDN standard-bearing refer-
ence implementation with considerable momentum in industry.
We believe that OpenFlow provides new research opportunities
for the network security community [26, 3, 10]. For example, OF
could offer a dramatic simpliﬁcation in the design and integration
of complex network security applications into large networks. Un-
fortunately, the potential for OpenFlow to provide meaningful ad-
vancements to the state of network defense must be tempered by the
recognition that OpenFlow itself introduces serious security chal-
lenges. In this paper, we explore potential solutions to two such
security challenges. First, OpenFlow networks lack scalability be-
tween the data and control planes. This enables targeted attacks by
an external entity who crafts an inbound stream of ﬂow requests
to inundate communications between the controller and switch in
an adversary model that we refer to as the control plane satura-
tion attack. Second, OpenFlow offers very limited support for net-
work monitoring applications that seek a ﬁne-grained tracking of
operations at the data plane, thus making difﬁcult the support of
many security applications that require expeditious access to criti-
cal changes in network-trafﬁc patterns.
Scalability Challenge. The root cause of the ﬁrst challenge, scal-
ability, lies in the operation of the OpenFlow “southbound” proto-
col, which separates the control plane from the data plane to enable
centralized and ﬁne-grained control of network ﬂows. When an
OpenFlow switch receives a packet belonging to a new ﬂow for
which it has no matching handling rules, it forwards the packet to
its OpenFlow controller. The controller responds with one or more
ﬂow rules that indicate how the switch should process this ﬂow and
future ﬂows that satisfy the rule’s match criteria. Here, the central-
ized controller, designed to mediate these ﬂow requests, quickly
becomes a scaling bottleneck, i.e., a potential Achilles heel of the
network during anomalous trafﬁc bursts such as ﬂash crowds and
denial-of-service attacks. Even worse, because an external input
stream ultimately drives the data-to-control plane interactions, an
413adversary can produce a series of unique ﬂow requests (e.g., us-
ing a set of distributed botclients) to quickly saturate the control
plane with new ﬂow requests. At the same time, the data plane
also suffers from saturation attacks because switches have limited
resources to buffer (TCP/UDP) ﬂow-initiation until the controller
issues a ﬂow rule that states how the ﬂow shall be handled. Hence,
control plane saturation also has direct implications for the data
plane’s operational ability. Adversary models such as DDoS and
network scanning, which have been thoroughly dealt with by the
security community, pose potential new threats to the scalability of
the centralized control layer model of OpenFlow (and more broadly
to the general SDN paradigm).
Responsiveness Challenge. The second challenge (i.e., respon-
siveness) stems from the need for expeditious access to critical
data plane activity patterns. Network-monitoring applications of-
ten need to collect network statistics for tasks such as tracking ﬂow-
and network-wide packet statistics or to measure the activity of var-
ious entities communicating through the switch (e.g., to identify
DoS attacks, which impact the data plane). Current SDN tech-
nologies such as OpenFlow only allow applications to explicitly
pull/poll such information from each switch. Unfortunately, such
interfaces are not sufﬁcient for monitoring applications that require
the data plane statistics in order to track and respond to malicious or
degenerate operating conditions. Aggressive polling degrades data
plane performance and may still not provide the latency reduction
desired by security services to react to detected attacks. In addition,
though security applications often require an inspection of packet
contents that match some criteria, OpenFlow offers no mechanism
to facilitate such policies.
We investigate the viability of our security speciﬁc extensions to
OpenFlow in the context of a new system framework that we call
AVANT-GUARD (AG). There are several critical issues that we ad-
dress through the development of this framework. The ﬁrst issue is
determining the type of intelligence to be added to the data plane,
i.e., what sort of statistics should we capture at the switch layer?
Second, we need to develop effective techniques to report network
statistics to the control plane. Third, we need to develop new mech-
anisms that quickly react to identiﬁed attacks. Finally, our im-
plementation should strive to minimize changes to the OpenFlow
protocol and have negligible performance impact. In essence, we
recognize the design objective to keep the OpenFlow data plane as
simple as possible, but the current tradeoff imposed by this design
is a serious adversary model in which remote entities can halt op-
erations of the entire network with relatively minimal trafﬁc ﬂows.
To this end, this paper makes the following contributions:
• We propose a strategic and focused extension to the data
plane called connection migration that we argue yields the
signiﬁcant beneﬁt of halting the threats of the saturation at-
tack. To the best of our knowledge, connection migration is
the ﬁrst attempt in this direction to be embedded into an SDN
network.
• We propose a new technique called an actuating trigger that
addresses the responsiveness challenge by providing condition-
triggered push capability in SDN devices.
• We design and implement AVANT-GUARD to integrate both
connection migration and actuating triggers in a reference
SDN (OpenFlow) software switch. We implement several
exemplar OpenFlow security applications that demonstrate
how AVANT-GUARD enhances the ﬂexibility and robustness
with which these applications can be implemented. Our per-
formance evaluation also indicates that AVANT-GUARD in-
curs a very small overhead.
Figure 1: Conceptual architecture of AVANT-GUARD
2. PROBLEM STATEMENT
In this paper, we plan to investigate and answer the following
research questions:
• Can we add (hopefully minimal) intelligence to the data plane
to increase the resilience of the data-plane-to-control-plane
interaction to anomalous control-plane ﬂoods?
• Is there an alternative to the existing polling strategy that may
enable the control plane to acquire lower-latency knowledge
of the trafﬁc dynamics ﬂowing through the data plane?
• Can OpenFlow applications leverage this information to de-
tect and react more efﬁciently to anomalous trafﬁc patterns?
Speciﬁcally, the key design objectives of our AVANT-GUARD
(AG) framework include the following:
• Scalability and Resilience: AG must improve resilience of
the OF network with minimal impact on overall scalability.
• Transparency: AG must require no changes to software run-
ning on end hosts.
• Incremental Deployment: AG must minimize changes to the
OpenFlow network and enable incremental deployment. Though
AG switches would require an AG-aware controller, both
should be able to interoperate with other OF switches in the
network.
• Minimal Collateral Impact: AG should introduce minimal
additional delay to legitimate connections on the network.
3. SYSTEM DESIGN
To address the problems discussed in the previous section, we
present AVANT-GUARD as a security extension to the OpenFlow
data plane. In this section, we present the AVANT-GUARD design.
3.1 Overall Architecture
AVANT-GUARD extends the existing OpenFlow data plane with
the addition of two new modules: 1) a connection migration module
and 2) an actuating trigger module. AVANT-GUARD also slightly
modiﬁes existing data plane modules to support our target features.
The conceptual diagram for AVANT-GUARD in the data plane is
shown in Figure 1.
Inspired by the SYN proxy, which handles TCP connections in
a middle box, we propose connection migration to sift failed TCP
Connection MigrationActuating TriggerFlow Table (TCAM and SRAM)Control Plane InterfaceFlow Table LookupData PlaneAvant-GuardPacketProcessingControl Plane414sessions at the data plane prior to any notiﬁcation to the control
plane. It collaborates with an access table and maintains TCP ses-
sion information at the data plane to provide session details to the
control plane. The actuating trigger enables collection of network
status information and packet payload information more efﬁciently
than existing data planes. Additionally, it offers conditional ﬂow
rule activation, i.e., the ability to activate ﬂow rules (or actions)
when some events happen.
3.2 Connection Migration
The objective of connection migration is to add intelligence to
the data plane to differentiate those sources that will complete TCP
connections from sources that will not. To do this, we extend the
data plane to proxy the TCP handshake, and we only expose those
ﬂow requests to the control plane that complete the handshake. We
present the operation of connection migrations in a stage diagram
consisting of four stages: (i) classiﬁcation, (ii) report, (iii) migra-
tion, and (iv) relay. Each stage and transitions between them are
shown in Figure 2. When a source initiates a connection, the con-
nection migration (CM) module engages the source in the stateless
TCP handshake using SYN cookies [2]. The connection is assigned
the classiﬁcation stage. On handshake completion, CM notiﬁes the
control plane of the ﬂow request, transitioning the connection to
the report stage. If the control plane allows migration, CM initi-
ates the real target host with the TCP handshake, which transitions