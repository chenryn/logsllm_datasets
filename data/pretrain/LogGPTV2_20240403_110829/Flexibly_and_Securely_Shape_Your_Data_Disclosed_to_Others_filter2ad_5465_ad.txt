the PΩ′ problem of the traditional CP-ABE scheme to the PΠ prob-
lem of our FAPC scheme. The reduction process is in the proof of
Theorem 1.
Theorem 1. If a PPT adversary has a non-negligible advantage
in our security model (Sec. 3.1), then there exists another PPT adver-
sary that can break the indistinguishable multiple encryptions of the
traditional CP-ABE scheme [1] with a non-negligible advantage.
The proof is in Appendix C.1.
Hardness of PΩ′: The remaining work is to prove the hardness
of PΩ′ based on PΩ. Based on the security of the traditional CP-
ABE scheme, we can prove that no PPT adversary could break the
security of the traditional CP-ABE scheme with multiple encryp-
tions, i.e., PΩ′ is hard if PΩ is hard. The corresponding theorem is
as follows.
Theorem 2. If the traditional CP-ABE scheme [1] is CPA-secure,
then it is also CPA-secure for CP-ABE scheme with multiple encryp-
tions.
We refer readers to article [19], Theorem 11.6 for the general
form. Given Theorems 1 and 2, we can conclude that our FAPC
scheme is secure under the security model defined in Sec. 3.1.
3. Collusion Resistance
For the collusion attack launched by multiple unauthorized users,
the traditional CP-ABE scheme has been proven to be collusion-
resistant [18, 30] by introducing random numbers to tie together
different components in an attribute key, making the users not able
to generate a new attribute key through collusion. Thus they fail in
decrypting the corresponding ciphertext. Since our key generation
phase is the same as the counterpart used in CP-ABE, our scheme
is collusion-resistant.
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand166·e (д, д)α ·ˆs∗ under
(20)
(cid:42)(cid:44)mµ
Ti , C
(cid:40)(cid:68)
C
=
Then similarly for each i ∈ [1, N ], C encrypts mµ
τ µ
i
the tree Ti as ETi
· e (д, д)α ·ˆs∗(cid:19)
:
(cid:18) mµ
· e (д, д)α ·ˆs∗(cid:43)(cid:45)
τ µ
i
ETi
=CP − ABE.encrypt (Ti ,
µ
i
τ
· e (д, д)α ·ˆs∗
, pk )
mµ
µ
τ
i
mµ
µ
τ
i
′
i =
= дpy (0), C
· e (д, д)α ·(ˆs∗+ ˙s∗
i ), ˆCi = h
= H (att (y))py (0)(cid:69)(cid:41)
˙s∗
i ,
′y
i
y
i
y∈Yi
 .
C′
i
Cmµ
The ciphertexts are given to the adversary A′. Then for all y ∈ Yi,
i ∈ [1, N ], A′ computes ˜C∗
i
as
i
P
)
i
=
C
C
y
i
, C
∗
k
˜C
) =
(cid:41)
(cid:40)
, C
= C
= C
∗
up
(21)
y∗
i
′y∗
i
∗
i =
(cid:69)(cid:41)
(cid:40)(cid:68)
, ˆC∗
i
′y∗
i
= Cmµ
y∗
i
−α ( ˜s∗−ˆs∗− ˙s∗
i ),
′y
, ETi (Aτ ∗
i
−1 · e (д, д)
µ
= (τ
i )
(cid:28)
(cid:29)
and sets C∗
= ˆCi, C
mµ
Ti , ˜C∗
i , ˆC∗
.
y∈Yi
i ,
up = e (д, д)α ·ˆs∗, and encrypts P∗
In addition, A′ sets P∗
up as
E∗
k (P∗
up ) using a secure symmetric encryption algorithm, such as
(cid:17)(cid:41)
AES, where k is the secret session key from Step 1. Till now A′
(cid:16)
obtains the ciphertexts as shown in Equ. (22):
(22)
, CT Nµ∗ =
i∈[1, N ]
CT mµ
Finally, the challenge ciphertext ET ∗
and CT Nµ∗ are
Phase 2. Phase 1 is repeated under the condition that no set of
attributes can satisfy any access tree in Challenge.
Guess. First, the adversary A outputs a guess µ′ ∈ {0, 1} of µ to
the adversary A′. Then, the adversary A′ outputs µ′ to conclude
its own game.
According to the security model defined in Sec. 3.1, the advantage
of the adversary A′ breaking the security of the traditional CP-ABE
scheme with multiple encryptions, is:
(cid:40)
ETi (Aτ ∗
∀ (k ), CT mµ
returned to A.
∗
mµ , E
′ = µ] − 1/2 = AdvA .
AdvA′ = Pr[µ
(23)
Equ. (23) shows that if AdvA is non-negligible in our security
model, then the adversary A′ also has non-negligible advantage
AdvA′ = AdvA to break the security of the traditional CP-ABE
scheme with multiple encryptions. Theorem 1 is proven.
□
C SECURITY PROOF
C.1 Proof of Theorem 1
, A2
Setup. A′ obtains the public key pk =
Proof. Suppose a PPT adversary A’s advantage in our security
model defined in Sec. 3.1 is AdvA. Then we will show that a PPT
adversary A′ can be constructed based on A, such that A′ is able to
break the indistinguishable multiple encryptions of the traditional
CP-ABE scheme with the same advantage AdvA in the following
security game.
(cid:68)G0, д, h = дβ , e (д, д)α(cid:69)
A. Note that the corresponding master key mk =(cid:10)β, дα(cid:11) is only
of the traditional CP-ABE scheme, and sends pk to the adversary
known to the traditional CP-ABE challenger C.
Phase 1. A submits multiple attribute key queries by sending sets
, . . . , An1 to A′. To generate the corresponding
of attributes A1
(cid:40)
attribute keys, A′ makes an attribute key query to the challenger
C for each attribute set Aj, j ∈ [1, n1]. Then A′ is given the corre-
sponding keys SK∗
D = д(r +α )/β ,∀l ∈ Aj : Dl = дr · H (l )rl ,
j
D′
, j ∈ [1, n1]. All these attribute keys are sent to the adver-
= дrl
sary A.
set(cid:68)T ∗ = {Ti}i∈[1, N ],T∗
(cid:69), and two pieces of plaintext {m0,N0 =
l
Challenge. The adversary A gives A′ a challenge access tree
{τ
i }i∈[1, N ]
0
, where all counterparts
i | = |τ
are of equal length, i.e., |m0| = |m1|, and |τ
i |,∀i ∈ [1, N ].
(cid:69). A′ is expected
Phase 1 satisfies any tree in(cid:68)T ∗ = {Ti}i∈[1, N ],T∗
0
1
, A2
Note that it is required that none of the sets A1
, . . . , An1 from
∀
to return the challenge ciphertext back to the adversary A after
running the following two steps:
Step 1. A′ randomly chooses a secret session key k, and encrypts
k under the corresponding access tree T∗
∀. The corresponding ci-
phertext is shown in Equ. (18).
m1,N1 = {τ
i }i∈[1, N ]
1
and
(cid:41)
(cid:41)
(cid:40)
(cid:41)
∀
=
ET ∗
∀ (k ) = CP − ABE.encrypt (T
∗
∀, k, pk )
(18)
· e (д, д)α ·ˆs∗
· e (д, д)α ·ˆs∗(cid:27)
(cid:26)
lists of plaintexts as
· e (д, д)α ·ˆs∗
Step 2. A′ randomly chooses ˆs∗ ∈ Zq, then transforms the two
(cid:26)
and
, . . . , m0
τ 0
N
. Then A′ sends these
m1, m1
τ 1
1
two lists of messages and the corresponding tree set {Tx ,T1, . . . ,TN }
to the challenger C, where Tx ∈ T ∗ is an arbitrarily selected access
tree from T ∗. The challenger C first randomly flips a binary coin
µ, and uses CP-ABE to encrypt mµ under Tx as ETx (mµ ):
· e (д, д)α ·ˆs∗(cid:27)
m0, m0
τ 0
1
, . . . , m1
τ 1
N
ETx (mµ )
=CP − ABE.encrypt (Tx , mµ , pk )
= mµ · e (д, д)α · ˜s∗
Tx , Cmµ
(cid:40)(cid:68)
C
x = H (att (y))py (0)(cid:69)(cid:41)
, ˆC = h
′y
˜s∗
,
=
x = дpy (0), C
y
 .
y∈Yx
(19)
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand167