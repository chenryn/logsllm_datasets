[...]
This has caught several connections to different remote hosts with the same port, 6001. The
columns are:
●TIME(s): The time of the accept in seconds, counting from the first event seen.
• PID: The process ID that accepted the connection. This is best-effort that matches on the
current process; at the TCP level, these events may not happen in process context. For
reliable PIDs, use socket tracing.
 COMM: The process name that accepted the connection. As with PID, this is best-effort,
and socket tracing should be used for better reliability.
• IP: IP address protocol.
 SADDR: Source address.
• DADDR: Destination address.
• DPORT: Destination port.
Both IPv4 and IPv6 are supported, although IPv6 addresses can be so wide that they can make the
output columns untidy.
This works by tracing events related to creating new TCP sessions, rather than per-packet tracing.
On this production server, the packet rate is around 50,oo0/s, whereas the new TCP session rate
is around 350/s. By tracing session-level events instead of packets, the overhead is reduced by
around a hundred fold, becoming negligible.
The BCC version currently works by tracing the tcp_v4_connect() and tcp_v6_connect() kernel
functions. A future version should switch to using the sock:inet_sock_set_state tracepoint if
available.
---
## Page 476
10.3 BPF Tools
439
BCC
Command line usage.
tcpconnect [options]
Options include:
•-t: Include a timestamp column
suo saooad sp ae :a1a d-
• P FoRr [ , PoRT , - - 1: Trace these destination ports only
bpftrace
The following is the code for tcpconnect-tp(8), a bpftrace version of tcpconnect(8) that uses the
sock:inet_sock_set_state tracepoint:
#1/usx/1ocal/bin/bpCtrace
#include 
include 
BEGIN
printf(*8s 6s 16s 3s *,*IMe*, "pID*, *covM", "IP*)
printf(*415s 15s =5s\n*, *SADDR*, *DADDR*, “DPORT");
tracepointisock:inet_sock_set_state
/args=>o1dstate == TCP_CL0SE s& axgs=>nevstate == TCF_SYB_SENT/
t.ime (*%8:s:S *)
printf(*&=6d -16s =3d ", pid, corm, args=>family == AF_IMET ? 4 : 61
printf (*415s 415s 4=5d’n*, ntop [args=>fanily, axgs=>saddr) ,
ntop (args=>fanily。 args=>dadidr) , args=>dport.)
This matches active opens by the transition from TCP_CLOSE to TCP_SYN_SENT
The bpftrace repository has a tcpconnect(8)2^ version for older Linux kernels that lack the
sock:inet_sock_set_state tracepoint and traces the tcp_connect( kernel function insteadl.
25 Origin: This was created by Dale Hamel on 23-Nov-2018, for which he also added the ntop() builtin to bpftrace
---
## Page 477
440
Chapter 10 Networking
10.3.12
tcpaccept
tcpaccept(8)2 is a BCC and bpftrace tool to trace new TCP passive connections; it's the counter
part to tcpconnect(8). It is named after the socket system call accept(2). These are often termed
inbound connections, although they may also come from localhost. As with tcpconnect(8), this
tool is useful for workload characterization: determining who is connecting to the local system,
and at what rate.
The following shows tcpaccept(8) from BCC, from a 48-CPU production instance, running with
the t option to print a timestamp column:
 topaccept -t
TIME (s)
PID
CONI
IP RADDR
RPORT LADDR
LPORT
0, 000
4218
java
4100,2,231.20
53422 100.1.101.18
6001
0.004
4218
Java
4
100.2.236,45
36400 100.1.101.18
6001
0 , 013
4.218
java
4
100.2,221.222
29836
100,1,101.18
6001
0,014
4218
Java
4
100.2,194,78
40416
100.1.101.18
6001
0,016
4.218
java
4
100.2,239,62
53422
100.1.101.18
6001
0.016
4218
Java
4
100.2,199,236
28790 100.1.101.18
6001
0, 021
4.218
java
4100,2,192.209
35840 100.1.101.18
6001
0.022
4218
java
4
100.2.215,219
21450 100.1.101.18
6001
0,026
4218
Java
4100.2,231.176
47024 100.1.101.18
6001
[..-]
This output shows many new connections to local port 6001 from different remote addresses,
which were accepted by a Java process with PID 4218. The columns are similar to those for
tcpconnect(8), with these differences:
• RADDR: Remote address
• RPORT: Remote port
• LADDR: Local address
• LPORT: Local port
This tool works by tracing the inet_csk_accept() kernel function. This might sound like an
unusual name compared with other high-level TCP functions, and you might wonder why I chose
it. I chose it because it's the accept function from the tcp_prot struct (net/ipv4/tcp_ipv4.c):
struct proto tcp_prot = (
.nane
= *TCP",
, oxner
TNGO"SIHL =
26 0rigin: I crested a similer tcpacceptd tool for the 2011 DTrace book [Greg 11], and earlier versions in 2006
(tcpecceptIL.d and tcpsccept2.d) which counted connections, that I crested while I wss developing the DTrace TCP
provider [106]. I wss vp late finishing them to demo in my first-ever conference talk at CEC2006 in San Francisco
[107] and then overslept and barely made it to the venue in time. 1 created the BCC version on 13-0ct-2015, and the
tcpconnectp(8) version on 7-Apr-201.9.
---
## Page 478
10.3 BPF Tools
441
close
- tcp_elose,
pre_connect
roo"exdpd =
 connect
 =
.disconnect
= tcp_dlsconnect,
accept
.ioct1
= tcp_1oct1,
[...]
IPv6 addresses are also supported, although the output columns can get untidy due to their
widlth. As an example from a different production server:
:tepaccept -t
TIME (s)
PID
COMM
IP RADDR
LADOR
LFORT
0 .000
7013
Java
6
::rfff:100.1.54.. ::fff:100.1.58.46 13562
0,103
7013
java
6
1: ffff :100.1.7.19 ::ffff:100.1.58 . 46 13562
0.202
7013
Java
::[fff:10o.1.58.59 ::[ff:100.1.58,46 13562
[..]
These addresses are IPv4 mapped over IPv6.
BCC
Command line usage:
[euotado]  1deooedoa
tcpaccept(8) has similar options to tcpconnect(8), including:
 -t: Include a timestamp column
Xuo ssaoond sg aoe1 :aId d-
 -P FoRr [, PoRT, -- - 1: Trace these local ports only
bpftrace
The following is the code for tcpaccept-tp(8), a bpftrace version of tcpaccept(8) developed for this
book that uses the sock:inet_sock_set_state tracepoint:
+1/usr/local/bin/bpftrace
include 
#1nclude 
BEGIN
printf (*4=8s 1=3s 14s fanily == AF_INET ? 4 : 6,
ntop (args=>fani1y, azgs=>daddr) , args=>dpoxt.,
ntop (args=>fanily, args=>saddr), args=>sport.)
Since the process ID is not expected to be on-CPU at the time of this TCP state transition, the pid
and comm builtins have been elided from this version. Sample output:
+ tepaccept-tp.bt
Attach.ing 2 pzobes...
TIME
IP
RADDR
RPORT LACOR
LPORT
07:06:46 4
127,0.0.1
639９8 127.0.0.1
28527
07 :06 : 47 4
127,0.0.1
64002 127.0.0.1
28527
07:06: 48 4
127.0.0.1
64004 127.0.0.1
28527
[...]
The bpftrace repository has a version of tcpaccept(8)2 that uses kernel dlynamic tracing of
the inet_csk_accept() function, as used by the BCC version. This function is expected to be
application-process synchronous, so the PID and process name are printed using the pid and
comm built-ins. An excerpt:
[..-]
kretprobe:inet_csk_accept
$sk =(struct sock *)retva1;
$inet_fan1ly = $sk=>_ak_common,skc_fanily
1f ($inet_fanlly == AF_INET 1l $inet_fanily 
AF_INET6)(
(0) dou = xppep$
(n) dosu = xppess
if ($inet_family == AF_IMET)[
$daddz = ntop Ifsk->_sk_cc
, skc_dadde) 
ak_conmon,skc_num
$dport = $sk->_sk_conmon.skc_dport,
$qlen = $ak->sk_ack_backlog
$qmax = $sk->sk_nax_ack_backlog
[ . - - ]
The program fetches the protocol details from the sock struct. It also fetches tcp listen backlog
details, and is an example of extending these tools to provide additional insights. This listen
backlog was added to diagnose a Shopify production issue where Redis was degrading under peak
loadl: it was found to be TCP listen drops.2 Adding a column to tcpaccept.bt made it possible to
see the current length of the listen backlog, useful for characterization and capacity planning.
A future change to bpftrace’s variable scoping may cause variables initialized in if-statement
clauses to be scoped to the clause only, which would cause a problem for this program because
Sdaddr and Ssaddr are then used outside of the clause. To avoid this future constraint, this
program initializes these variables beforehand to ntop(0) (ntop(0) returns type inet, which is
printed as a string.) This initialization is unnecessary in the current version of bpftrace (0.9.1), but
has been included to make this program future-proof.
10.3.13
tcplife
tcplife(8)° is a BCC and bpftrace tool to trace the lifespan of TCP sessions: showing their dura-
tion, address details, throughput, and when possible, the responsible process ID and name.
The following shows tcplife(8) from BCC, from a 48-CPU production instance:
 toplife
PID
COMN
LADDR
LPORT RADDR
RPORT TX_KB RX_KB MS
4169
java
100.1.111,231
32648 100.2.0.48
6001
03.99
4169
java
100.1.111.231
32650 100,2,0.48
6001
04.10
4169
java
100,1.111.231
32644 100.2.0.48
6001
0
8,41
4169
Java
100.1.111.231
40158 100,2,116,192
6001
33
3590.91
4169
java
100.1.111,231
56940 100,5.177,31
6101
02.48
4169
java
100.1.111.231
1009
100.2.176,45
49482
017.94
4169
java
100.1.111,231
18926 100,5.102.250
6101
00.90
4169
Java
100.1.111.231
44530 100,2,31.140
6001
02.64
28 Production example provided by Dale Hamel.
29 O0rigin: This began as a tweet from Julia Evans: °i reslly wish i had 8 com
mand line tool that would give me stats
on TCP connection lengths on a given port* [108]. In response I created tcplife(8) as s BCC tool on 18-0ct-2016, and
I crested the bpftrace version on 17-Apr2019 ater menging a needed bpfrce capabity frm Matheus Marchini that
provides eficient netoork: fiow stasts that can be visuslized as directed graphs.
moming. This is one of the most popular tools Ive developed. It forms the basis of several higher-level GUls, as it
---
## Page 481
444
Chapter 10 Networking
4169java
100.1.111,231
44406 100.2.8.109
6001
11
28 3982.11
34781 shd
100.1.111.231
22
100.2.17,121
41566
5
T2317.30
4169java
100.1.111,231
49726 100.2.9.217
6001
1.1
28 3938.47
4169java
100.1.111,231
58858 100 .2.173,248
1009
9
30 2820.51
[..]
This output shows a series of connections that were either short-lived (less than 20 milliseconds)
or long-lived (over three seconds), as shown in the duration column *MS° for milliseconds). This
is an application server pool that listens on port 6001. Most of the sessions in this screenshot
show connections to port 6001 on remote application servers, with only one connection to the
local port 6001. An ssh session was also seen, owned by sshd and local port 22—an inbound
session.
This works by tracing TCP socket state change events, and prints the summary details when the
state changes to TCP_CLOSE. These state-change events are much less frequent than packets, 
making this approach much less costly in overhead than per-packet sniffers. This has made
tcplife(8) acceptable to run continuously as a TCP flow logger on Netflix production servers.
The original tcplife(8) traced the tcp_set_state() kermel function using kprobes. Since Linux 4.16, a
tracepoint has been added for this purpose: sock:inet_sock_set_state. The tcplife(8) tool uses that
tracepoint if available; otherwise, it defaults to the kprobe. There is a subtle difference between