jonlangemak/web_server_1
93b6be9e83ee2b1eaef26abd2fb4c653a87a75cea4b9cd6bf26376057d77f00f
user@docker3:~$ docker run -d --name=web2 --net=ipvlan_net \
jonlangemak/web_server_2
89b8b453849d12346b9694bb50e8376f30c2befe4db8836a0fd6e3950f57595c
```
您会注意到我们再次不需要处理发布端口。该容器被分配了一个完全可路由的 IP 地址，并且可以在该 IP 上提供它想要的任何服务。分配给容器的 IP 地址将来自指定的子网。在本例中，我们的拓扑如下所示:
![How to do it…](img/5453_09_11.jpg)
一旦运行，您会注意到容器没有任何连接。这是因为网络不知道如何到达每个 IPVLAN 网络。为此，我们需要告诉上游网络设备如何到达每个子网。为此，我们将在多层交换机上添加以下路由:
```
ip route 10.10.20.0 255.255.255.0 10.10.10.101
ip route 10.10.30.0 255.255.255.0 192.168.50.101
```
一旦这个路由到位，我们将能够路由到远程容器并访问它们提供的任何服务:
```
user@docker1:~$ docker exec web1 curl -s http://10.10.30.2
    Web Server #2 - Running on port 80
user@docker1:~$
```
您会注意到，在这种模式下，容器也可以到达主机接口:
```
user@docker1:~$ docker exec -it web1 ping 10.10.10.101 -c 2
PING 10.10.10.101 (10.10.10.101): 48 data bytes
56 bytes from 10.10.10.101: icmp_seq=0 ttl=63 time=0.232 ms
56 bytes from 10.10.10.101: icmp_seq=1 ttl=63 time=0.321 ms
--- 10.10.10.101 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.232/0.277/0.321/0.045 ms
user@docker1:~$
```
虽然这是可行的，但重要的是要知道这是通过遍历父接口到多层交换机，然后再返回来实现的。我们可以看到，如果我们尝试反向 ping，上游交换机(网关)会生成 ICMP 重定向:
```
user@docker1:~$ ping 10.10.20.2 -c 2
PING 10.10.20.2 (10.10.20.2) 56(84) bytes of data.
From 10.10.10.1: icmp_seq=1 Redirect Host(New nexthop: 10.10.10.101)
64 bytes from 10.10.20.2: icmp_seq=1 ttl=64 time=0.270 ms
From 10.10.10.1: icmp_seq=2 Redirect Host(New nexthop: 10.10.10.101)
64 bytes from 10.10.20.2: icmp_seq=2 ttl=64 time=0.368 ms
--- 10.10.20.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.270/0.319/0.368/0.049 ms
user@docker1:~$
```
因此，尽管主机到容器的连接是可行的，但如果您要求主机与容器在本地进行通信，这并不是最好的模式。
# 用 MacVLAN 和 IPVLAN 网络标记 VLAN 标识
MacVLAN 和 IPVLAN Docker 网络类型都具有的一个特性是能够标记特定 VLAN 的容器。这种是可能的，因为两种网络类型都利用一个父接口。在本食谱中，我们将向您展示如何创建 VLAN 标记或 VLAN 感知的 Docker 网络类型。由于这种功能在任一种网络类型的情况下都是一样的，我们将重点介绍如何使用 MacVLAN 类型的网络来配置这种功能。
## 做好准备
在本食谱中，我们将作为一台 Docker 主机来演示 Linux 主机如何向上游网络设备发送 VLAN 标记的帧。我们的实验室拓扑如下:
![Getting ready](img/5453_09_12.jpg)
假设该主机运行的是 1.12 版。主机有两个网络接口，`eth0`的 IP 地址为`10.10.10.101`和`eth1`为 up，但没有配置 IP 地址。
## 怎么做…
【MacVLAN 和 IPVLAN 网络驱动程序附带的有趣功能之一是提供子接口的能力。子接口是物理接口的逻辑分区。划分物理接口的标准方法是利用虚拟局域网。您通常会听到这被称为 dot1q 中继或 VLAN 标记。为此，上游网络接口必须准备好接收标记帧，并能够解释标记。在我们前面的所有示例中，上游网络端口被硬编码到特定的 VLAN。这个服务器的`eth0`接口就是这种情况。它被插入交换机上为 VLAN 10 静态配置的端口。除此之外，交换机在 VLAN 10 上还有一个 IP 接口，在我们这里是`10.10.10.1/24`。它充当服务器的默认网关。从服务器`eth0`接口发送的帧被交换机接收，最终到达 VLAN 10。那件事很简单。
另一个选项是让服务器告诉交换机它希望在哪个 VLAN。为此，我们在服务器上创建一个特定于给定 VLAN 的子接口。离开该接口的流量被标记为 VLAN 号码，并在途中发送到交换机。为此，交换机端口需要配置为**中继**。中继是可以承载多个虚拟局域网的接口，并且支持 VLAN 标签(dot1q)。当交换机收到帧时，它会参考帧中的 VLAN 标签，并根据该标签将流量放入正确的 VLAN。从逻辑上讲，您可以将中继配置描述如下:
![How to do it…](img/5453_09_13.jpg)
我们将`eth1`接口描述为一个宽通道，可以支持与大量虚拟局域网的连接。我们可以看到，中继端口可以根据它收到的标签连接到所有可能的 VLAN 接口。`eth0`接口静态绑定到 VLAN 10 接口。
### 注
在生产环境中，限制中继端口上允许的虚拟局域网是明智的。不这样做将意味着某人可能通过指定正确的 dot1q 标签就可以访问交换机上的任何 VLAN。
这项功能已经存在很长时间了，Linux 系统管理员可能熟悉用于创建 VLAN 标记子接口的手动过程。有趣的是，Docker 现在可以为您管理这个。例如，我们可以创建两个不同的 MacVLAN 网络:
```
user@docker1:~$ docker network create -d macvlan -o parent=eth1.19 \
 --subnet=10.10.90.0/24 --gateway=10.10.90.1 vlan19
8f545359f4ca19ee7349f301e5af2c84d959e936a5b54526b8692d0842a94378
user@docker1:~$ docker network create -d macvlan -o parent=eth1.20 \
--subnet=192.168.20.0/24 --gateway=192.168.20.1 vlan20
df45e517a6f499d589cfedabe7d4a4ef5a80ed9c88693f255f8ceb91fe0bbb0f
user@docker1:~$
```
这些接口的定义与任何其他 MacVLAN 接口非常相似。不同的是，我们在父接口名称上指定了`.19`和`.20`。在接口名称后指定带数字的点是定义子接口的常见语法。如果我们看一下主机的网络接口，我们会发现增加了两个新接口:
```
user@docker1:~$ ip -d link show
……
5: eth1.19@eth1:  mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 00:0c:29:50:b8:d6 brd ff:ff:ff:ff:ff:ff promiscuity 0
 vlan protocol 802.1Q id 19  addrgenmode eui64
6: eth1.20@eth1:  mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 00:0c:29:50:b8:d6 brd ff:ff:ff:ff:ff:ff promiscuity 0
    vlan protocol 802.1Q id 20  addrgenmode eui64
user@docker1:~$
```
从这个输出中我们可以判断出这些要么是 MacVLAN 要么是 IPVLAN 接口，其父接口恰好是物理接口`eth1`。
如果我们在这两个网络上启动容器，我们将看到它们最终会出现在 VLAN 19 或 VLAN 20 中，具体取决于我们指定的网络:
```
user@docker1:~$ docker run --net=vlan19 --name=web1 -d \
jonlangemak/web_server_1
7f54eec28098eb6e589c8d9601784671b9988b767ebec5791540e1a476ea5345
user@docker1:~$
user@docker1:~$ docker run --net=vlan20 --name=web2 -d \
jonlangemak/web_server_2
a895165c46343873fa11bebc355a7826ef02d2f24809727fb4038a14dd5e7d4a
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr show dev eth0
7: eth0@if5:  mtu 1500 qdisc noqueue state UNKNOWN
    link/ether 02:42:0a:0a:5a:02 brd ff:ff:ff:ff:ff:ff
    inet 10.10.90.2/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe0a:5a02/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
user@docker1:~$ docker exec web2 ip addr show dev eth0
8: eth0@if6:  mtu 1500 qdisc noqueue state UNKNOWN
    link/ether 02:42:c0:a8:14:02 brd ff:ff:ff:ff:ff:ff
    inet 192.168.20.2/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:c0ff:fea8:1402/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
如果我们尝试向其中一个网关发送流量，我们会发现这两个网关都是可达的:
```
user@docker1:~$ docker exec -it web1 ping 10.10.90.1 -c 2
PING 10.10.90.1 (10.10.90.1): 48 data bytes
56 bytes from 10.10.90.1: icmp_seq=0 ttl=255 time=0.654 ms
56 bytes from 10.10.90.1: icmp_seq=1 ttl=255 time=0.847 ms
--- 10.10.90.1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.654/0.750/0.847/0.097 ms
user@docker1:~$ docker exec -it web2 ping 192.168.20.1 -c 2
PING 192.168.20.1 (192.168.20.1): 48 data bytes
56 bytes from 192.168.20.1: icmp_seq=0 ttl=255 time=0.703 ms
56 bytes from 192.168.20.1: icmp_seq=1 ttl=255 time=0.814 ms
--- 192.168.20.1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.703/0.758/0.814/0.056 ms
user@docker1:~$
```
如果我们在帧离开服务器时捕获它们，我们甚至可以在第 2 层报头中看到 dot1q (VLAN)标记:
![How to do it…](img/5453_09_14.jpg)
与 Docker 创建的其他网络结构一样，Docker 也会在您删除这些用户定义的网络时负责清理。此外，如果您更喜欢自己构建子接口，Docker 可以使用您已经创建的接口，只要名称与您指定的父接口相同。
能够将 VLAN 标签指定为用户定义网络的一部分是一件大事，这使得向物理网络呈现容器变得更加容易。