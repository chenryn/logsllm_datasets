Always use tabs for indentation.
In your editor, set the tab-size to view as 4 spaces.
You can have multiple code blocks within eachother as well.
Multiple if statements
i = 5
if i > 0:
    print "i is greater than 0."
    if i  5:
            print "i is greater than 5."
Output
i is greater than 0.
i is less than 10.
If-Else Statement
With the if statement comes the else statement. It is called when your if statement's condition is false.
if-else statement
i = 5
if i > 5:
    print "i is greater than 5."
Part 03 - Flow Control - Conditionals
http://boo.codehaus.org/Part+03+-+Flow+Control+-+Conditionals?print=1
2 of 3
5/27/2008 9:13 PM
else:
    print "i is less than or equal to 5."
Output
i is less than or equal to 5.
Quite simple.
If-Elif-Else Statement
Now if you want to check for a condition after your if is false, that is easy as well. This is done through the elif
statement.
if-elif-else statement
i = 5
if i > 5:
    print "i is greater than 5."
elif i == 5:
    print "i is equal to 5."
elif i 
greater than
4 > 2
=
greater than or equal to 7 >= 7 and 7 >= 4
 5:
    print 'i is not greater than 5'
Output
i is not greater than 5
Combining Conditions
To check more than one condition, you would use and or or. Use parentheses ( ) to change the order of operations.
combining conditions
i = 5
if i > 0 and i  7:
    print "i is not between 3 and 7."
if (i > 0 and i  7 and i  5
Output
10
9
8
7
6
5
Part 04 - Flow Control - Loops
http://boo.codehaus.org/Part+04+-+Flow+Control+-+Loops?print=1
3 of 3
5/27/2008 9:14 PM
Normally, this would be a simple while loop.
This is a good method of doing things if you want to accomplish something at least once or have the loop set itself up.
Pass Keyword
The pass keyword is useful if you don't want to accomplish anything when defining a code block.
while-break-unless loop
while true:
    pass //Wait for keyboard interrupt (ctrl-C) to close program.
Exercises
1. print out all the numbers from 10 to 1.
print out all the squares from 1 to 100.
2.
Go on to Part 05 - Containers and Casting
Part 05 - Containers and Casting
http://boo.codehaus.org/Part+05+-+Containers+and+Casting?print=1
1 of 4
5/27/2008 9:19 PM
Part 05 - Containers and Casting
Part 05 - Containers and Casting
Lists
Definition: List
A linked list that can hold a variable amount of objects.
Lists are mutable, which means that the List can be changed, as well as its children.
lists
print([0, 'alpha', 4.5, char('d')])
print List('abcdefghij')
l = List(range(5))
print l
l[2] = 5
print l
l[3] = 'banana'
print l
l.Add(100.1)
print l
l.Remove(1)
print l
for item in l:
    print item
Output
[0, alpha, 4.5, d]
[a, b, c, d, e, f, g, h, i, j]
[0, 1, 2, 3, 4]
[0, 1, 5, 3, 4]
[0, 1, 5, 'banana', 4]
[0, 1, 5, 'banana', 4, 100.1]
[0, 5, 'banana', 4, 100.1]
0
5
'banana'
4
100.1
As you can see, Lists are very flexible, which is very handy.
Lists can be defined two ways:
1. by using brackets []
by creating a new List wrapping an IEnumerator, or an array.
2.
Slicing
Slicing is quite simple, and can be done to strings, Lists, and arrays.
It goes in the form var[start:end]. both start and end are optional, and must be integers, even negative integers.
To just get one child, use the form var[position]. It will return a char for a string, an object for a List, or the specified type for 
an array.
Slicing counts up from the number 0, so 0 would be the 1st value, 1 would be the 2nd, and so on.
slicing
list = List(range(10))
print list
print list[:5] // first 5
print list[2:5] // starting with 2nd, go up to but not including the 5
print list[5:] // everything past the 5th
print list[:-2] // everything up to the 2nd to last
print list[-4:-2] // starting with the 4th to last, go up to 2nd to last
print list[5] // the 6th
print list[-8] // the 8th from last
print '---'
Part 05 - Containers and Casting
http://boo.codehaus.org/Part+05+-+Containers+and+Casting?print=1
2 of 4
5/27/2008 9:19 PM
str = 'abcdefghij'
print str
print str[:5] // first 5
print str[2:5] // starting with 2nd, go up to but not including the 5
print str[5:] // everything past the 5th
print str[:-2] // everything up to the 2nd to last
print str[-4:-2] // starting with the 4th to last, go up to 2nd to last
print str[5] // the 6th
print str[-8] // the 8th from last
Output
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4]
[2, 3, 4]
[5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7]
[6, 7]
5
2
---
abcdefghij
abcde
cde
fghij
abcdefgh
gh
f
c
I hope you get the idea. Slicing is very powerful, as it allows you to express what you need in a minimal amount of space, 
while still being readable.
Arrays
Definition: Array
Arrays are simple objects that hold equally-sized data elements, generally of the same data type.
Arrays, unlike Lists, cannot change their size. They can still be sliced, just not added on to.
Arrays can be defined three ways:
by using parentheses ()
If you have 0 members, it's declared: (,)
If you have 1 member, it's declared: (member,)
If you have 2 or more members, it's declared: (one, two)
1.
2. by creating a new array wrapping an IEnumerator, or an List.
by creating a blank array with a specified size: array(type, size)
3.
arrays
print((0, 'alpha', 4.5, char('d')))
print array('abcdefghij')
l = array(range(5))
print l
l[2] = 5
print l
l[3] = 'banana'
Output
(0, alpha, 4.5, d)
(a, b, c, d, e, f, g, h, i, j)
(0, 1, 2, 3, 4)
(0, 1, 5, 3, 4)
ERROR: Cannot convert 'System.String' to 'System.Int32'.
Arrays, unlike Lists, do not necessarily group objects. They can group any type, in the case of array(range(5)), it made an 
Part 05 - Containers and Casting
http://boo.codehaus.org/Part+05+-+Containers+and+Casting?print=1
3 of 4
5/27/2008 9:19 PM
array of ints.
List to Array Conversion
If you create a List of ints and want to turn it into an array, you have to explicitly state that the List contains ints.
list to array conversion
list = []
for i in range(5):
    list.Add(i)
    print list
a = array(int, list)
print a
a[2] += 5
print a
list[2] += 5
Output
[0]
[0, 1]
[0, 1, 2]
[0, 1, 2, 3]
[0, 1, 2, 3, 4]
(0, 1, 2, 3, 4)
(0, 1, 7, 3, 4)
ERROR: Operator '+' cannot be used with a left-hand side of type 'System.Object' and a right-hand side of type 'System.Int32'
This didn't work, because the List still gives out objects instead of ints, even though it only holds ints.
Casting
Definition: Typecast
The conversion of a variable's data type to another data type to bypass some restrictions imposed on datatypes.
To get around a list storing only objects, you can cast an object individually to what its type really is, then play with it like it 
should be.
Granted, if you cast to something that is improper, say a string to an int, Boo will emit an error.
There are two ways to cast an object as another data type.
1. using var as 
using cast(, var)
2.
casting example
list = List(range(5))
print list
for item in list:
    print cast(int, item) * 5
print '---'
for item as int in list:
    print item * item
Output
0
5
10
15
20
---
0
1
4
9
16
Part 05 - Containers and Casting
http://boo.codehaus.org/Part+05+-+Containers+and+Casting?print=1
4 of 4
5/27/2008 9:19 PM
Recommendation
Try not to cast too much.