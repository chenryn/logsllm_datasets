posting tree 非叶子节点，KEY是堆表行号，VALUE是下层节点的块ID。  
posting tree 叶子节点，是堆表行号list, 即posting list，（PostgreSQL使用了segment进行管理，将posting list中存储的item point(堆表行号)有序分段，压缩存储）。     
暂时无法理解的话，可以继续往下看，有细节介绍。  
#### 3 pending list  
pending list是在fastupdate时，用来临时缓存GIN索引元组的，该链表把索引的插入操作推迟到一定条件时，批量处理。其结构是一个单向链表，如下：  
![pic](20170204_01_pic_004.png)  
从上图可以看出，pending list的meta页面用来指示pending list的头和尾的页面号，没有pending list的数据页面，存放的是新的索引元组。  
```
Index entries that appear in "pending list" pages work a tad differently as
well.  The optional column number, key datum, and null category byte are as
for other GIN index entries.  However, there is always exactly one heap
itempointer associated with a pending entry, and it is stored in the t_tid
header field just as in non-GIN indexes.  There is no posting list.
Furthermore, the code that searches the pending list assumes that all
entries for a given heap tuple appear consecutively in the pending list and
are sorted by the column-number-plus-key-datum.  The GIN_LIST_FULLROW page
flag bit tells whether entries for a given heap tuple are spread across
multiple pending-list pages.  If GIN_LIST_FULLROW is set, the page contains
all the entries for one or more heap tuples.  If GIN_LIST_FULLROW is clear,
the page contains entries for only one heap tuple, *and* they are not all
the entries for that tuple.  (Thus, a heap tuple whose entries do not all
fit on one pending-list page must have those pages to itself, even if this
results in wasting much of the space on the preceding page and the last
page for the tuple.)
```
## 4 GIN索引的页面和元组结构  
### 页面结构  
GIN索引共有6种类型的页面：  
类型 | 说明  
---|---  
GIN_DATA             (1 oneCol)
        {
                datums[0] = key;
                isnull[0] = (category != GIN_CAT_NORM_KEY);
        }
        else
        {
                datums[0] = UInt16GetDatum(attnum);
                isnull[0] = false;
                datums[1] = key;
                isnull[1] = (category != GIN_CAT_NORM_KEY);
        }
```
#### 4 posting tree页面  
src/backend/access/gin/gindatapage.c   
posting tree 是gin的辅助树，用来组织超长的posting list，以加快其查询速度。该树的页面是由GIN_DATA标记。  
```  
/*  
 * Data (posting tree) pages  
 *  
 * Posting tree pages don't store regular tuples. Non-leaf pages contain  
 * PostingItems, which are pairs of ItemPointers and child block numbers.  
 * Leaf pages contain GinPostingLists and an uncompressed array of item  
 * pointers.  
 *  
 * In a leaf page, the compressed posting lists are stored after the regular  
 * page header, one after each other. Although we don't store regular tuples,  
 * pd_lower is used to indicate the end of the posting lists. After that, free  
 * space follows.  This layout is compatible with the "standard" heap and  
 * index page layout described in bufpage.h, so that we can e.g set buffer_std  
 * when writing WAL records.  
 *  
 * In the special space is the GinPageOpaque struct.  
 */  
```  
1\. posting tree 非叶子页面  
非叶子页面只有GIN_DATA标记，其页面结构如下：  
![pic](20170204_01_pic_007.png)  
PageHeader后面紧跟的一个ItemPointer是指该PAGE的right bound，即它所指引的所有下级节点中，最大指向的HEAP tid。      
比如你抓了一手扑克牌，按牌面从小到大顺序分成了若干堆牌，你有指向每一堆牌的方法（PostingItem），同时也知道最大的牌是什么(PageHeader后面紧跟的一个ItemPointer)    
src/backend/access/gin/README  
请仔细阅读  
```  
Posting tree  
------------  
If a posting list is too large to store in-line in a key entry, a posting tree  
is created. A posting tree is a B-tree structure, where the ItemPointer is  
used as the key.  
Internal posting tree pages use the standard PageHeader and the same "opaque"  
struct as other GIN page, but do not contain regular index tuples. Instead,  
the contents of the page is an array of PostingItem structs. Each PostingItem  
consists of the block number of the child page, and the right bound of that  
child page, as an ItemPointer. The right bound of the page is stored right  
after the page header, before the PostingItem array.  
```  
与普通btree的页面类似，不同是其存储的元组是PostingItem，PostingItem格式为：  
```  
/*  
 * Posting item in a non-leaf posting-tree page  
 */  
typedef struct  
{  
        /* We use BlockIdData not BlockNumber to avoid padding space wastage */  
        BlockIdData child_blkno;  
	// 是孩子节点的页面号，用于建立posting tree的层次关系。使用BlockIdData类型而不是BlockNumber的原因是避免空间浪费。  
        ItemPointerData key;  
	// 是posting list中的key，实际上就是该孩子节点的最小?heap tid  
} PostingItem;  
/*  
 * ItemPointer:  // 即tid or ctid  
 *  
 * This is a pointer to an item within a disk page of a known file  
 * (for example, a cross-link from an index to its parent table).  
 * blkid tells us which block, posid tells us which entry in the linp  
 * (ItemIdData) array we want.  
 *  
 * Note: because there is an item pointer in each tuple header and index  