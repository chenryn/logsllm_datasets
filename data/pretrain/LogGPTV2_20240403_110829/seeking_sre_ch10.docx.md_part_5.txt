为了最大化企业中自助服务的价值，复制这种将定义和执行自动化的能力，使组织中任何一个将改进工作流的团队获益。
## 自助服务以多种方式帮助 SRE
 在企业中，有效的自助服务功能推动了 SRE 工作。以下是一些好处的列表：
减少琐事
:   除了少数例外，响应重复的请求是琐碎的。拥有高效的自助服务功能，这样可以通过快速的自动化来减少这些重复性请求，从而帮助
    SRE 减少琐事。重复请求通常不会每次都遵循相同的模式，这可能会损害 SRE
    设置可重用自动化的能力。如果可以设置正确的基础，然后赋予请求者创建自己的自动过程的能力和权限，则可以为更广泛的重复请求集创建自助服务。检查最终构建的自助服务流程，这样做也可以向
    SRE 和开发人员指示他们当前工程工作的重点，注重减少未来干预的需要。
缓解安全性和合规性问题
:    安全和法规遵从是企业中不可避免的事实。无论是有历史的问题的组织，还是对行业恐惧的反应，还是来自审计师的指示，你的
    SRE
    转型都需要在现有的安全性和合规性要求下工作。我不建议尝试引入新的运维模型并质疑现有的安全或合规性策略，这样会没有意义的延长战线。
    自助服务功能既可为运维活动提供记录系统，也可以提供策略实施点。你可以在团队内部和跨团队边界使用相同的自助服务机制。这将使你能够跟踪操作活动以满足合规性要求，并使你能够安全地扩展访问权限的分发。通过这样做，SRE
    可以在比之前允许的更广泛的基础架构范围内工作。这还使传统上非运维的同事能够参与操作活动，而无需让其他人产生工单。
     职责分离是大多数企业的标准要求。无论是遵守特定法规（例如[PCI DSS
    要求
    6.4）](https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2.pdf)还是满足更一般的监管控制，职责分离都可能干扰团队的开发、测试和服务的运维。
    自助服务工具可以通过提供一种机制来提供帮助，通过该机制，在开发角色中的人可以创建一个过程，操作角色中的人可以快速审核和执行该过程。此外，处于特权运维角色的人员可以创建预先批准、有限的自助服务功能，这些功能可以由非特权角色（例如开发或
    QA
    角色）的人员按需执行。通常你可以说服审核员，这种形式的自助服务仍然满足职责分离要求，因为操作角色设置程序、授予特定访问权限并接收其使用的日志和通知。
    安全问题也是当今许多重复性请求的罪魁祸首，这些要求可以被贴上"琐事"的标签。纯粹出于安全原因，人们目前被迫排队，并等待有人为他们做点什么。自助服务正确完成，使请求者能够自己采取行动。你可以通过细粒度访问控制、完全日志记录和自动通知来维护安全状态。
改进事件响应
:   自助服务功能有助于将团队的最佳实践捕获为检查表和自动运维手册。在响应事件时，检查表可以提高个人和团队绩效。将检查表设置为自动运维手册，不仅鼓励一致性，还允许运行检查表（并观察输出）成为一种团队活动。
最大化标准服务和基础架构的价值
:   SRE
    团队使用部分工程时间构建和维护标准基础设施（例如平台和环境）和运维服务（例如部署系统和可观察性）被认为是最佳做法。自助服务功能越好，组织就越能够利用这些标准组件和服务。
## 运维作为服务
 如果你检查那些同时采用 SRE
运维风格并且被同行视为高绩效的公司，会发现它们经常构建自定义工具以实现自助服务功能。例如，看看
Netflix 的 Spinnaker
[*https://www.spinnaker.io*](https://www.spinnaker.io) Winston,Netflix
Technology blog, [\"Introducing Winston --- Event driven Diagnostic and
Remediation
Platform\"](https://medium.com/netflix-techblog/introducing-winston-event-driven-diagnostic-and-remediation-platform-46ce39aa81cc).和
Bolt 的组合。Netflix Technology blog, [\"Introducing Bolt: On Instance
Diagnostic and Remediation
Platform\"](https://medium.com/netflix-techblog/introducing-bolt-on-instance-diagnostic-and-remediation-platform-176651b55505)这些最初是专为
Netflix
的专门构建组织而开发的专用工具。企业可能会发现，他们需要更通用的自助服务功能来消化数十年的收购和积累所带来的异质性。
作为服务的运维（OaaS）是一种通用且看似简单的设计模式，用于创建通用自助服务操作功能。[OaaS](https://www.rundeck.com/oaas-guide)的基本思想是，运维是一个平台，用于安全地分配定义和执行自动过程的能力，如[#overview_of_oaas_design_pattern](#overview_of_oaas_design_pattern)所示。
![OaaS 设计模式概述。](media/rId53.png){width="3.210702099737533in"
height="2.6755850831146106in"}
OaaS 设计模式概述
此设计模式成功的关键是要求平台既轻便又适用于任何流行的脚本语言或工具。鉴于现代企业的异质性，强迫团队对一种语言或自动化框架进行标准化是不现实的。事实上，这不仅仅是不切实际的，它实际上会拖慢组织的速度。团队需要能够使用他们想要的（或继承）的自动化语言和工具，同时允许其他工具跨这些基础框架和语言来协调过程。
访问控制和使用情况统计对于此设计模式的成功也至关重要。任何解决方案要在企业中蓬勃发展，最终控制都需要与被视为具有更高访问权限的用户和团队保持一起。
与监测和可观测性项目相配合，OaaS
的努力最有可能超出预期。实施项目往往主要侧重于自动化。但是，当项目进行时，许多组织发现缺乏对运维执行状况、状态和配置的可见性。好比给了别人车钥匙，但缺少办法跟踪车的去向。为了避免这个问题，从一开始就应该同样强调可视性和可用性。
OaaS
设计模式应与任何运维操作模型兼容。无论你是要转向跨职能团队（[#oaas_design_pattern_with_a\_cross_function](#oaas_design_pattern_with_a_cross_function)），还是与传统的开发和运维组织划分（[#oaas_design_pattern_with_a\_more_tradition](#oaas_design_pattern_with_a_more_tradition)）更紧密地相处，发展组织的自助服务功能总会带来好处。   
![具有跨职能团队组织模型的 OaaS
设计模式。](media/rId54.png){width="4.816053149606299in"
height="3.3979932195975504in"}
具有跨职能团队组织模型的 OaaS 设计模式
![OaaS 设计模式采用更传统的开发和运维/SRE
拆分组织模型。](media/rId55.png){width="4.816053149606299in"
height="3.4247484689413823in"}
OaaS 设计模式采用更传统的开发和运维/SRE 拆分组织模型
# 错误预算、限制琐事和其他增强人类能力的工具
SRE
运动中更强大的贡献是一套管理概念的普及，这些管理概念将围绕组织运维活动的期望形式化。对于那些从一开始就采用
SRE 模型的公司工作的人来说，以下想法可能不言自明。对于那些在传统企业 IT
运维中工作的人，这些想法通常强调 SRE
模型与传统运维理念和做法的背离程度。
## 错误预算
  在组织中，对于特定服务可承受的风险以及在未达到 服务级别目标（SLO）时由谁负责的问题中，通常存在紧张关系。在传统的企业鸿沟中，激励公司的产品端去更快开发，而激励运维端避免停机和其他性能问题。这是鼓励孤岛形成的激励机制不匹配类型。你如何保持双方利益一致？如何保持在速度和可靠性上的投入平衡？
错误预算是衡量和利用适度风险的框架。具体来说，这是理论上完美的可靠性与业务和技术利益相关者商定的可接受的
SLO
之间的差距。错误预算提供了一个框架，用于与业务部门协商有多少故障是可以接受的，并且仍然能够满足业务的需求。
使用预算的比喻并非偶然。预算是可供使用的货币的表示形式。错误预算也是如此。开发人员和
SRE
可以使用此预算来尝试推动业务向前发展。如果服务的错误预算很小，开发人员和
SRE 必须更加保守，以有利于稳定性。如果服务的错误预算较大，开发人员和 SRE
可以更激进，并且更青睐速度和生产实验。与其他类型的预算一样，重点是关于如何最好地用它，在某些情况下，也可以根本不用它（见[#error_budget_is_the_difference_between_pe](#error_budget_is_the_difference_between_pe)）。