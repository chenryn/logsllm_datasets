XP和其他敏捷方法认为未来总是多变的，因此它们把赌注押在过程
上，通过过程来集成易变的方向。而生产成本较高的项目（例如：
建造摩天大楼，视频游戏控制台，或者嵌入式操作系统）则刚好相
反，它们把重点放在计划和设计上。执行时，每个人都要认可计划
中所做出的决定，因为需要控制变化带来的成本，因此此方法是唯
一可取的。
大多数的软件开发项目都是处于中间状态。它们有最初的计划，但
是却用来帮助管理未来需求和客户需要的变化，工作被分成了几个
阶段：分配时间来设计、执行和质量保证。如果出现新的问题，可
以检查现阶段的工作，或者将其置于待完成工作中，在下一个阶段
进行检查和考虑。
对大多数项目而言，起初的设计时间都花在从客户和商业伙伴那里
收集充足的信息，以及确定需要多少个阶段来完成工作，每个阶段
应该重点完成什么（见图2-2）。根据总体计划，每个阶段可能需要
更多的时间去设计或测试。每个阶段可能被分成两个更小的部分
（接近于更敏捷的开发形式），或者把两个阶段合并在一起（接近
于整体并发）。但是在所有情况下，都应该为阶段之间分配时间，
以应对可能出现的变化。其中应该包括对之前阶段出现的问题的应
对时间，在之前阶段可能不能完全解决这些问题。
483
---
## Page 485
初始规划
设计
实现
阶段
谢试
设计
阶段2
实现
测试
设计
阶段3
实现
测试
图2-2：一个大项目应该包含一系列更小的项目
现在，我将谈谈关于高级别进度的制定方法。在第14章和第15章
中，我会讲述如何通过完整的进度表来管理一个项目，但是我强调
管理和领导者的视野一—而不是如何应用某种特殊方法的细节。如
果你能按照以下几段所述开展工作（即使你不完全同意其中的所有
观点），那么不管你是如何组织或者计划项目的，第14章和第15章
的建议对你都是十分相关和有用的。
484
---
## Page 486
总之，我要向那些理解或者不理解这部分的有经验的并发人员说声
抱歉。到现在为止，只讲这么多，我保证这些关于进度表的轻描淡
写的描述已经足够帮助你去理解后面章节所涉及的概念。
进度为什么会失败
项目进度表是任何可能出错事件的替罪羊。如果某人胡乱评估，弄
错需求，或者被公交车撞了，这都是进度表（进度表就是要负责的
那一个）的责任。如果国家电力部门停电十大，或者团队中最好的
程序员染上瘟疫，还是会有人用手指着进度表制定人的脸说：“看
吧，我早就告诉过你，进度表会出问题的。”这是完全不公平的，
但是这样的事情却时常发生。如同厌恶进度表一样，人们也把它抬
举到一个不可完成的标准高度。即使是这世上最完美的进度表，拥
有处理问题最精明的方法和最好的工具，它们也仍试图去预测未来
-而我们人类对此很少预测准。
但是，如果一个团队在开始一个项目的时候，就充分了解进度表可
能出现问题的原因，并且采取措施去减少这些出错的风险，那么这
个进度表就为成为开发过程中更加有用和精确的工具。
从极远处盲目射击
如果在开始计划中制定进度表时，还需要做出数百条可能影响进度
表的决定，那么这样就会带来令人无法预测的问题和挑战，同时，
任何事先预订的计划都无法解决这些问题。直到理解了需求，制定
好概要设计，项目经理还是只能利用有限的信息去做真实的预测。
然而，人们往往就是利用一些虚构的数据和毫无根据的猜想来制定
一份大概的进度表的，并且，这份“稻草人"进度表还被伪装成一份
值得信赖的项目计划交到团队手中。通常，人们会陷入精确与正确
的圈套：一份具有详细的时间和日期（精确）、看上去令人印象深
刻的进度表是根本无需反映现实的（正确）。达到精确很容易，但
是追求正确却十分困难。
然而，现实是所有的项目和进度表都要从某个点上并始启动。在黑
暗中并枪可以激发团队的活力，划出某些范围。启动调查程序来充
实进度表，同时提出和回答某些重要的问题。但是如果把未经证实
和检查的垃圾预测当成进度表的依据——没有进一步的优化——那
么，前面会出现更大的风险。有可靠的证据说明，任何人都很难在
早期估计一个项目所需要的时间。
485
---
## Page 487
BarryBoehm在其1988年编写的软件工程文章中[4l，发现进度表错
误与作进度估算的时刻有多早成比例关系（如图2-3所示）。如果很
早就做整体进度表的估算，那么无论是正负哪个方向，偏差都可高
达400%（我怀疑我们误解了该误差，我更倾向于花掉比预期更多的
时间，虽然他的数据没有显现这一点）。在设计期间，随着决策更
为明确，变化虽然减少了，但仍然很大。只有当项目进入实施阶段
时，进度表估算的范围才会变得比较合理，但即使如此，进度表的
准确估算仍可能有20%的误差。
400
200
100
50
10
-10
OS-
-100
oo-t-
400
项目开始
需求分析
设计
实现
图2-3：项目期间估算误差的范围（摘自Boehm的《Software
EngineeringEconomics》)
这表示项目经理必须知道，进度估算的准确度会随时间进展而增
加。随着项目的进行，必须不断注意进度表，并且随着项目向前推
进，还会对其作调整。
进度是一种几率
在我刚刚大学毕业后，最开始参与的几个大项目（Windows和
InternetExplorer）中，高层次的进度表会由一个比我重要的人交给
我的团队。由于资历尚浅，不能参与整体流程，进度表是以一天来
呈现，我的工作就是控制少数几个程序员和测试员符合主进度表的
计划。
486
---
## Page 488
主进度表和我的团队根据工作项目建立的进度表之间存在不同[51，
为此，我曾协商过，那份高层次的进度表似乎总是不知从何而来。
从上到下、排版仔细、分成漂亮的由日期和数字组成的多列。像是
来自未来的某种工艺品。
无论我们觉得如何讽刺，大致上我们都忠实地按照进度表进行。尽
管不知道其来源，我们还是有很好的理由信赖我们团队的领导者，
而且我们也忙于手边的工作，没时间为他们担心太多（事实上，他
们还是会对那些初期的由上到下列出的进度表做出基本解释，但我
们太忙，也很相信别人，就没怎么去注意）。
后来，当进度安排变成我的职责时，我认识到进度表有着未被说出
的真相。进度表不是来自于未来的礼物。不存在可以创造完美进度
表的神奇的公式或科学。尽管我的看法还很粗浅，但进度安排并非
是孤立的任务，它总是代表且包含了关于项目当前及日后的很多方
面。进度表仅仅是一种预测，无论草拟时多精确或者看起来多有说
服力，进度表只是一堆小估算的汇总而已，而每种小估算都不可避
免地会引发各种无法预见的疏忽及问题。良好的进度表只能来自于
考虑到软件开发的众多不同方面，并进行客观调查以获得好的判断
的领导者或团队。你不能期望只通过做一个狭小领域的专家，就能
把进度安排好。
因此，如果团队的每个人都同意进度表是几率的组合，那么，问题
就不在进度表本身了，而在于该怎么使用进度表。如果在团队会议
时展示了进度表，或者以电子邮件寄出去，一个确凿的问题是：进
度表中所确定的时间线发生几率有多高？如果没有提出几率（例
如，5种最可能的风险是什么以及对其发生几率的推测），或者制
定进度表的人无法对他所做的假设进行说明，那么只能说这样的进
度表是有可能的，但未必会发生。团队应该广并言路，收集各种
建议，看看可以利用哪些事项和信息，对进度表增加或修改，使其
更为可信。
所以，此处的秘密就是进度表无需完美（当然，这是个安慰，因为
没有完美的进度表）。进度表只需好到让团队及领导者相信，它能
提供跟踪及调整的基础，并有个成功的几率，以满足客户、业务或
整个项目的赞助者。
估算是困难的
487
---
## Page 489
设计过程中（将会在第5章和第6章谈到），设计师、程序员以及测
试员的部分工作，是把设计分割成可被独立完成的多个小块工作。
这些小块工作通常称为工作项目或者工作分解结构（WBS，[2]
），由其构成项目主进度表中的明细项目。通过将这些工作项目明
智地（祈祷吧）分配到整个程序设计团队I工，并加以清点后，进度
表就建立了。分配给程序员的每个工作项目都要分派时间量，根据
这些估算基础，进度表就做好了。
通过最简单的定义，良好的工作估算会提高准确度，而不良的工作
估算则降低准确度。我不期望这样的定义能获得好评，但这至少暗
示了一件有用之事：这是为项目制定规则的团队领导者的判断。这
需要不断积极审查估算结果，并推动、领导以及刺激他人尽到应有
的力量。我认为，对测试/QA团队并放估算过程是一种明智的做
法，让他们参与设计的讨论、提出问题或提供意见。至少，这样有
助于他们估算自已的测试工作（测试工作估算不一定和编程工作估
算相关）。通常，QA最容易看出其他人会忽略的设计疏忽和潜在
失败情况。
世界基于估算
使编排进度表如此困难的原因之一，就是很少有人愿意去估算日后
要负责任的复杂事情。对我们的技能进行自夸和打赌，总是很有趣
（“这本书/这部电影/这个网站烂透了，我可以做出比它好得多
的”）。但是，当我们被道站出来要兑现时，需要在详列了我们职
责的合同书上签名时，事情就变了。我们知道，无论我们今天承诺
要做什么，等到交付的那一天，还是有可能做不到或做得不理想。
事情就是会变得比我们想像要更困难。程序员和每个其他人一样，
有估算焦虑是很正常的。他们是在冒着可能犯大错误的风险下，说
出可在特定时间内做好某事。
就我的经验来看，即使是了解整个估算过程而且也相信这个过程的
程序员也不喜欢这么做。部分原因是想像（“我拥有的信息有限，
这样可以吗？”）和时间的精确度（“准确地告诉我完成此事要花多
少小时？”）不能匹配。但此时，同情心应该有所节制：无论是建
摩天大楼、改建厨房还是发射宇宙飞船登陆到其他行星，参与工程
和建造的每个人都有相同的挑战。了解这些人如何估算项目之后，
他们的挑战或技巧与Web并发人员以及软件工程师所面临的困难，
看起来并没有大的差异。主要的不同是他们有多少时间作估算，以
488