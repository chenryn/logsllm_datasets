larger numbers of virtual machines per host.
Copyright © 2008 VMware, Inc. All rights reserved.
13
Timekeeping in VMware Virtual Machines
Alternatively, even on kernels without NO_HZ, software running in the virtual machine can make a hypercall 
to inform the virtual machine that it is tickless. For example, the 64‐bit SUSE Linux Enterprise Server 10 SP2 
kernel does this.
Paravirtual Kernels
With some 32‐bit kernel versions, you can use VMI (see “VMI Paravirtual Timer” on page 10) to obtain tickless 
timekeeping in a virtual machine. The VMI patches developed for kernel 2.6.20 and earlier include changes to 
the timekeeping subsystem that use the VMI paravirtual timer device for tickless timekeeping and stolen‐time 
accounting. Some distribution vendors have shipped kernels that include this version of VMI, so if you run 
one of these distributions in a virtual machine, you get the benefits of these changes. In particular, both Ubuntu 
7.04 (2.6.20) and SUSE Linux Enterprise Server 10 SP2 (2.6.16) ship with VMI enabled in the default kernel.
The VMI patches were accepted into the mainline 32‐bit kernel in version 2.6.21. However, the clocksource 
abstraction was also added to the kernel in this version, making tickless timekeeping available using the 
generic high‐level timekeeping code. Accordingly, the timekeeping portion of the VMI patches was dropped 
at this point, because it was no longer needed. (Stolen time accounting was also dropped, but it might be added 
back in a different way in the future.)
Solaris
Timekeeping in Solaris 10 is tickless. The operating system reads a hardware counter (by default, the TSC) to 
obtain the raw amount of time since the system booted. The wall clock time at boot is read from the CMOS 
time of day clock. In addition, while running, Solaris periodically checks its estimate of wall clock time against 
the CMOS TOD clock and uses this information to correct and refine its boot‐time measurement of the TSC’s 
running rate.
The Solaris timer callback service also does not use a periodic interrupt. Instead, it maintains a one‐shot 
interrupt set to wake the system up in time for the next scheduled callback. This interrupt is rescheduled as 
timer callbacks fire, are added, or are removed.
These characteristics of Solaris are similar to Linux with the clocksource and NO_HZ features and are a good 
match for running in a virtual machine.
Solaris does currently exhibit two minor problems when running in a virtual machine.
First, when running on multiple processors, Solaris attempts to resynchronize the TSCs at boot time by 
measuring how far out of sync they are, computing a TSC offset for each processor, and applying that offset 
in software as a correction to each subsequent reading of the corresponding TSC. Unfortunately, while a 
virtual machine is booting, all virtual processors are not necessarily simultaneously scheduled on physical 
processors when Solaris takes its measurement, causing Solaris to measure the TSCs as being slightly out of 
sync and compute an unwanted offset. This sort of problem is not unique to Solaris, but other operating 
systems that attempt to resynchronize the TSCs do so in hardware, by writing to the TSCs, which gives the 
virtual machine the opportunity to detect the problem and apply a heuristic to correct it. VMware is working 
with Sun to disable TSC resynchronization when Solaris runs in a virtual machine.
A second small issue is that Solaris can occasionally find the CMOS TOD clock to be too far off from the value 
it expects to see and conclude that the CMOS clock is not working properly. This results in a harmless warning 
message printed to the Solaris console log.
Synchronizing Virtual Machines and Hosts with Real Time
As discussed in “Initializing and Correcting Wall‐Clock Time” on page 3, for long‐term accuracy, both 
physical and virtual machines generally need to run software that periodically resynchronizes the wall clock 
time maintained by the operating system to an external clock.
There are two main options available for guest operating system clock synchronization: VMware Tools 
periodic clock synchronization or the native synchronization software that you would use with the guest 
operating system if you were running it directly on physical hardware. Some examples of native 
synchronization software are Microsoft W32Time for Windows and NTP for Linux. Each option has some 
advantages and disadvantages. We discuss each briefly here and then add details in subsequent sections.
Copyright © 2008 VMware, Inc. All rights reserved.
14
Timekeeping in VMware Virtual Machines
VMware Tools periodic clock synchronization has the advantage that it is aware of the virtual machine’s 
built‐in catch‐up and interacts properly with it. If the guest operating system clock is behind real time by more 
than the known backlog that is in the process of being caught up, VMware Tools resets the clock and informs 
the virtual machine to stop catching up, which sets the backlog to zero. An additional advantage of VMware 
Tools clock synchronization is that it does not require networking to be set up in the guest. However, at this 
writing, VMware Tools clock synchronization has a serious limitation: it cannot correct the guest clock if it gets 
ahead of real time (except in the case of NetWare guest operating systems). This limitation applies only to 
periodic clock synchronization. VMware Tools does a one‐shot correction of the virtual machine clock that 
may set it either backward or forward in two cases: when the VMware Tools daemon starts (normally while 
the guest operating system is booting), and when a user toggles the periodic clock synchronization feature 
from off to on.
Native synchronization software has the advantage that it is generally prepared to deal with the virtual 
machine clock being either ahead of or behind real time. It has the disadvantage that it is not aware of the 
virtual machine’s built‐in catch‐up and thus typically does not synchronize time as well in a virtual machine 
as it does when run directly on physical hardware. 
One specific problem occurs if native synchronization software happens to set the guest operating system 
clock forward to the correct time while the virtual machine has an interrupt backlog that it is in the process of 
catching up. Setting the guest operating system clock ahead is a purely software event that the virtual machine 
cannot be aware of, so it does not know that it should stop the catch‐up process. As a result, the guest operating 
system clock continues to run fast until catch‐up is complete, and it ends up ahead of the correct time. 
Fortunately, such events are infrequent, and the native synchronization software generally detects and corrects 
the error the next time it runs. 
Another specific problem is that native synchronization software may employ control algorithms that are 
tuned for the typical rate variation of physical hardware timer devices. Virtual timer devices have a more 
widely variable rate, which can make it difficult for the synchronization software to lock on to the proper 
correction factor to make the guest operating system clock run at precisely the rate of real time. As a result, the 
guest operating system clock tends to oscillate around the correct time to some degree. The native software 
may even determine that the timer device is broken and give up on correcting the clock. 
Despite these potential problems, however, testing has shown that NTP in particular behaves fairly well in a 
virtual machine when appropriately configured (see “Using NTP in Linux and Other Guests” on page 17). 
NTP is prepared for some of its readings to be anomalous because of network delays, scheduling delays on the 
local host, and other factors and is effective at filtering out such readings.
Generally, it is best to use only one clock synchronization service at a time in a given virtual machine to ensure 
that multiple services do not attempt to make conflicting changes to the clock. So if you are using native 
synchronization software, we suggest turning VMware Tools periodic clock synchronization off.
Using VMware Tools Clock Synchronization
VMware Tools includes an optional clock synchronization feature that can check the guest operating system 
clock against the host operating system clock at regular intervals and correct the guest operating system clock. 
VMware Tools periodic clock synchronization works in concert with the built‐in catch‐up feature in VMware 
virtual machines and avoids turning the clock ahead too far. VMware Tools also performs one‐time corrections 
of the guest operating system clock after certain events, even if periodic synchronization is turned off.
Enabling Periodic Synchronization
To enable VMware Tools periodic clock synchronization in a guest, first install VMware Tools in the guest 
operating system. You can then turn on periodic synchronization from the graphical VMware Tools control 
panel within the guest operating system. Alternatively, you can set the .vmx configuration file option 
tools.syncTime = true to turn on periodic synchronization. Synchronization in a Linux guest works even 
if you are not running the VMware Toolbox application. All that is necessary is that the VMware guestd 
process is running in the guest operating system and tools.syncTime is set to TRUE.
Copyright © 2008 VMware, Inc. All rights reserved.
15
Timekeeping in VMware Virtual Machines
By default, the daemon checks the guest operating system clock only once per minute. You can specify a 
different period by setting the .vmx configuration file option tools.syncTime.period to the desired time 
period (value specified in seconds). When the daemon checks the guest operating system clock, if it is much 
farther behind the host time than the virtual machine’s built‐in catch‐up mechanism expects it to be, the 
daemon resets the guest operating system clock to host time and cancels any pending catch‐up. As discussed 
above, this periodic check currently cannot correct the guest operating system time if it is ahead of the host 
time except in NetWare guest operating systems.
Disabling All Synchronization
It is normal for a guest operating system’s clock to be behind real time whenever the virtual machine is stopped 
for a while and then continues running—in particular, after a suspend and resume, snapshot and revert to 
snapshot, disk shrink, or VMotion operation. Therefore, if VMware Tools is installed in a guest operating 
system, the VMware Tools daemon corrects the guest operating system clock after these events occur, even if 
periodic time synchronization is turned off.
Occasionally, you may need to test a guest operating system with its clock set to some value other than real 
time. Some examples include setting a virtual machine’s date to 1999 to work around Y2K problems in legacy 
software or setting a virtual machine to various times to test date printing routines. You may want to have the 
virtual machine show the same time whenever it is powered on, to specify a constant offset from real time, or 
to synchronize a virtual machine with a Microsoft Windows domain controller whose time is out of sync with 
the host machine on which the virtual machine is running.
VMware Tools can synchronize guest operating systems only to the real time as maintained by the host 
operating system, so you need to disable VMware Tools clock synchronization completely if you want to 
maintain a fictitious time in a guest operating system.
VMware Tools automatically updates the guest operating system’s time to match the host operating system’s 
time in a few other cases in which the guest can be expected to have lost a large amount of time, even if periodic 
clock synchronization is turned off. To maintain a fictitious time, you need to set the following options to 
FALSE.
NOTE   In some product versions, you may have to use 0 in place of FALSE.
(cid:132)
(cid:132)