用一个新的PostgreSQL编译一下pgbench，conn_pool版本的pg 11版本可能太老，没有办法融合这个pgbench的patch  
```  
wget https://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2  
tar -jxvf postgresql-snapshot.tar.bz2  
cd postgresql-11devel  
```  
patch pgbench参考 [《PostgreSQL pgbench 支持100万连接》](../201805/20180516_02.md)    
假设我把它编译到了  pgsql11/bin/pgbench  ，可以拷贝到conn_pool版本的bin目录中  
```  
cp pgsql11/bin/pgbench ./pgsql11_pool/bin/  
```  
用pgbench压测，可以校验一下前面提到的，如果session数超过pool的backend process数量，那么多个session 会映射到同一个backend process  
当discard all时，影响的是同一个backend process下的所有session  
测试  
```  
修改配置  
session_pool_size=56  
session_pool_ports=0  
重启数据库  
```  
压测，开启8000个连接。  
```  
pgbench -i -s 20 -U digoal digoal  
pgbench -M prepared -n -r -P 1 -p 4001 -c 8000 -j 8000 -T 12000 -U digoal digoal  
```  
压测过程中，discard all  
SESSION A:  
```  
psql -p 4001 -U digoal digoal  
discard all;  
```  
观察到pgbench 报错的自有一部分连接  
```  
progress: 460.0 s, 53016.7 tps, lat 38.635 ms stddev 4.520  
client 1253 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 929 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 873 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1264 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 369 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 201 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 593 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 152 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 257 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 602 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 295 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 518 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 456 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 761 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 763 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 90 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 817 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 998 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1993 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1624 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 33 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1721 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1988 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1657 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1769 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1752 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1433 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1545 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1152 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1321 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1209 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1713 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1490 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 537 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 1040 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
client 982 aborted in command 4 (SQL) of script 0; ERROR:  prepared statement "P0_4" does not exist  
progress: 461.0 s, 52332.2 tps, lat 38.882 ms stddev 4.794  
```  
## 压测  
注意pgbench的-j参数必须要与-c connection数量一致，否则看不出效果。  
1、测试CASE如下  
```  
TPC-B模型  
数据量200万，1亿。  
scale = 20  
scale = 1000  
连接数  
64,512,2048,8192,19900  
```  
分别测试有POOL，无POOL，对比性能以及PERF  
2、测试脚本  
```  
vi test.sh  
#!/bin/bash  
for DB in digoal postgres  
do  
  for S in 20 1000  
  do  
    for CONN in 64 512 2048 8192 19900  
    do  
      pgbench -i -s $S --unlogged-tables -U $DB $DB  
      pgbench -M prepared -n -r -c $CONN -j $CONN -T 300 -U $DB $DB >>./test.log  
    done  
  done  
done  
chmod 700 test.sh  
nohup ./test.sh >/dev/null 2>&1 &  
```  
3、对比 perf  
连接数越多，越明显的看到，无pool与有pool时的差异  
3\.1、无pool，进程数与连接数一致，瓶颈主要集中在XidInMVCCSnapshot  
```  
Samples: 889K of event 'cpu-clock', Event count (approx.): 183087710747  
Overhead  Shared Object        Symbol                                    
  69.96%  postgres             [.] XidInMVCCSnapshot                     
   9.10%  postgres             [.] TransactionIdIsInProgress             
   4.57%  [kernel]             [k] tg_load_down                          
   2.17%  [kernel]             [k] _raw_spin_unlock_irqrestore           
   1.28%  postgres             [.] TransactionIdPrecedes                 
   0.85%  [kernel]             [k] finish_task_switch              
```  
3\.2、有pool，进程数最多56个。完全没有XidInMVCCSnapshot瓶颈，和pgbouncer连接池看到的效果一样。  
```  
Samples: 1M of event 'cpu-clock', Event count (approx.): 274667629477  
Overhead  Shared Object        Symbol                                  
  29.75%  [kernel]             [k] _raw_spin_unlock_irqrestore         
   3.64%  [kernel]             [k] finish_task_switch                  
   2.55%  postgres             [.] hash_search_with_hash_value         
   1.72%  postgres             [.] GetSnapshotData                     
   0.97%  postgres             [.] LWLockAttemptLock                   
   0.82%  postgres             [.] AllocSetAlloc            
   0.82%  libc-2.17.so         [.] __memcpy_ssse3_back        
```  
4、[测试结果](20180521_03_doc_001.txt)  
4\.1、 200万数据量 TPC-B  
连接数 | 社区版本TPS | postgres buildin_pool版本TPS  
---|---|---  
64 | 54440 |   53765  
512 | 24957 |  52666  
2048 | 3301 | 51451  
8192 | 596 |  49493  
19900 | 427 | 48062  
4\.2、 1亿数据量 TPC-B  
连接数 | 社区版本TPS | postgres buildin_pool版本TPS  
---|---|---  
64 | 81460 |   84356  
512 | 72805 |  81388  
2048 | 10902 | 80029  
8192 | 7729 |  79281  
19900 | 971 | 81247  
5、使用POOL版本，当压测19900个连接时，同一时刻，另外开启一个pgbench，连一个线程，使用同一个POOL，看是否相互有影响？  
同一个pool由于一个backend process要处理多个session的请求，而且当前处于压测状态，每个session都非常繁忙，所以在pool中新建的压测线程，RT有500多毫秒。  
但是整体TPS的吞吐仍然在4万多。  
```  
pgbench -M prepared -n -r -P 1 -c 1 -j 1 -T 120 -U digoal digoal  
progress: 4.0 s, 0.0 tps, lat 0.000 ms stddev 0.000  
progress: 4.0 s, 0.0 tps, lat 0.000 ms stddev 0.000  
progress: 5.0 s, 2.0 tps, lat 2202.781 ms stddev 1719.566  
progress: 6.0 s, 2.0 tps, lat 473.551 ms stddev 7.536  
progress: 7.0 s, 2.0 tps, lat 469.732 ms stddev 3.142  
progress: 8.0 s, 2.0 tps, lat 522.022 ms stddev 20.761  
progress: 9.0 s, 1.0 tps, lat 560.503 ms stddev 0.000  
progress: 10.0 s, 2.0 tps, lat 578.549 ms stddev 2.200  
progress: 11.0 s, 2.0 tps, lat 500.774 ms stddev 17.558  
progress: 12.0 s, 2.0 tps, lat 511.029 ms stddev 14.090  
progress: 13.0 s, 2.0 tps, lat 483.532 ms stddev 10.664  
progress: 14.0 s, 2.0 tps, lat 500.410 ms stddev 6.650  
progress: 15.0 s, 2.0 tps, lat 472.913 ms stddev 34.858  
progress: 16.0 s, 2.0 tps, lat 484.720 ms stddev 12.692  
progress: 17.0 s, 3.0 tps, lat 495.911 ms stddev 5.532  
progress: 18.0 s, 1.0 tps, lat 463.760 ms stddev 0.000  
progress: 19.0 s, 2.0 tps, lat 526.498 ms stddev 23.234  
```  
6、使用POOL版本，当压测19900个连接时，同一时刻，另外开启一个pgbench，连一个线程，使用另一个空闲的POOL，或者使用dedicate server，看是否相互有影响？  
dedicate server，与社区版本风格一致，一个backend process对应一个会话，所以我们看到RT只有0.6毫秒左右。  
```  
pgbench -M prepared -n -r -P 1 -c 1 -j 1 -T 120 -U postgres postgres  
progress: 1.0 s, 1499.9 tps, lat 0.665 ms stddev 0.203  
progress: 2.0 s, 1514.0 tps, lat 0.660 ms stddev 0.187  
progress: 3.0 s, 1612.1 tps, lat 0.620 ms stddev 0.146  
progress: 4.0 s, 1567.0 tps, lat 0.638 ms stddev 0.502  
progress: 5.0 s, 1628.1 tps, lat 0.614 ms stddev 0.235  
progress: 6.0 s, 1644.0 tps, lat 0.608 ms stddev 0.143  
progress: 7.0 s, 1649.9 tps, lat 0.606 ms stddev 0.147  
progress: 8.0 s, 1635.1 tps, lat 0.611 ms stddev 0.165  
progress: 9.0 s, 1485.0 tps, lat 0.674 ms stddev 0.715  
```  
## 小结与BUG 
1\. BUG，postgres pool版本，一个backend process对应多个客户端会话（对应关系固定不变，所以在一个backend变量中可以记住所有的session 变量内容）。  
目前discard会导致释放整个backend的SESSION 变量。需要修订discard, 应该以虚拟session为单位释放，而不是后端为单位释放。  
2\. BUG，postgres pool版本，目前disconnect会导致数据库crash。需要修正disconnect.   
3\. postgres pool版本，目前为事务级 pool。同一个backend process，某个活跃会话的事务执行结束后，对应backend process的资源即可给同一backend process上的其他session利用。   
如果客户端idle in transaction很久，实际上也会占用这个backend process很久，其他会话无法使用到这个backend porocess。  
**阿里云的RDS PostgreSQL 高并发版本设计时避免了以上问题。**  
4\. postgres pool版本，session一定映射到一个backend process后，就不能漂移给其他的backend process，所以以上CASE，即使我们有多个shared backend process，实际上SESSION B也不能用到其他空闲中的backend process，因为它不能漂移到其他的backend process。  
改进建议，一个session 不要映射(绑定)到单一的backend process，所有backend process可以给所有的session 共享。  
5、内置连接池模式，相比pgbouncer这种外部连接池的好处：  
对业务的改造最少，例如支持prepared statement。  
防火墙的配置不变。  
应用到数据库不需要经过额外的连接池，跳数更少，RT更低。  
6、社区版本在高并发时，主要的瓶颈在XidInMVCCSnapshot，POOL很好的规避了这个问题。   
7、pool还解决了一个问题，PAGE TABLE的问题  
[《PostgreSQL Huge Page 使用建议 - 大内存主机、实例注意》](../201803/20180325_02.md)    
## 参考  
https://github.com/postgrespro/postgresql.builtin_pool  
https://github.com/postgrespro/postgresql.builtin_pool/blob/conn_proxy/src/backend/postmaster/proxy.c  
[《阿里云 RDS PostgreSQL 高并发特性 vs 社区版本 (1.6万并发: 3倍吞吐，240倍响应速度)》](../201805/20180505_07.md)    
**postgrespro的pool设计有非常值得借鉴的地方**，阿里云 RDS PostgreSQL 高并发版本还有改进空间，可以实现更高吞吐。     
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")