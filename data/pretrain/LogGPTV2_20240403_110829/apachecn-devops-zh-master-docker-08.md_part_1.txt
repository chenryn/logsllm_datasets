# 八、DockerSwarm
在这一章中，我们将看一下 Docker Swarm。使用 Docker Swarm，您可以创建和管理 Docker 集群。Swarm 可用于跨多个主机分发容器，并且还具有扩展容器的能力。我们将涵盖以下主题:
*   引入 Docker Swarm
*   Docker 集群中的角色
*   创建和管理群
*   Docker Swarm 服务和栈
*   集群负载平衡和调度
# 技术要求
与前几章一样，我们将继续使用本地 Docker 安装。同样，本章的截图将来自我的首选操作系统，macOS。
和以前一样，我们将运行的 Docker 命令将在迄今为止安装了 Docker 的所有三个操作系统上运行。然而，一些支持命令可能只适用于 macOS 和基于 Linux 的操作系统，而且数量很少。
查看以下视频，了解《行为准则》:
[http://bit.ly/2yWA4gl](http://bit.ly/2yWA4gl)
# 引入 Docker Swarm
在我们进一步讨论之前，我应该提到 Docker Swarm 有两个非常不同的版本。有一个独立版本的 Docker Swarm 这在 Docker 1.12 之前一直得到支持，现在不再积极开发；但是，您可能会发现一些旧文档提到了它。不建议安装独立的 Docker Swarm，因为 Docker 在 2017 年第一季度结束了对 1.11.x 版本的支持。
Docker 1.12 版本引入了 Docker Swarm 模式。这将独立 Docker Swarm 中可用的所有功能引入了核心 Docker 引擎，以及大量附加功能。由于我们在本书中涵盖了 Docker 18.06 及更高版本，我们将使用 Docker Swarm 模式，在本章的剩余部分，我们将称之为 Docker Swarm。
由于您已经在运行一个内置了 Docker Swarm 支持的 Docker 版本，所以您不需要做任何事情来安装 Docker Swarm；您可以通过运行以下命令来验证 Docker Swarm 在您的安装中是否可用:
```
$ docker swarm --help
```
运行命令时，您应该会看到类似以下终端输出的内容:
![](img/c12154f3-2fe8-4d38-9ff5-cab971d15d00.png)
如果出现错误，请确保您运行的是 Docker 18.06 或更高版本，我们在[第 1 章](01.html)*【Docker 概述】*中介绍了该版本的安装。既然我们知道我们的 Docker 客户端支持 Docker Swarm，那么 Swarm 是什么意思呢？
A **Swarm** 是主机的集合，所有主机都运行 Docker，它们被设置为在集群配置中相互交互。配置完成后，您将能够使用我们到目前为止针对单个主机运行的所有命令，并让 Docker Swarm 通过使用部署策略来决定在哪个主机上启动您的容器来决定容器的位置。
DockerSwarm 由两种类型的主机组成。现在让我们来看看这些。
# Docker 集群中的角色
Docker Swarm 涉及哪些角色？让我们来看看主机在 Docker Swarm 集群中运行时可以承担的两个角色。
# 群管理器
**群管理器**是一个主机，是所有群主机的中央管理点。群管理器是你发布所有命令来控制这些节点的地方。您可以在节点之间切换、加入节点、移除节点以及操作这些主机。
每个集群可以运行几个 Swarm 管理器。对于生产，建议您至少运行五个 Swarm 管理器:这意味着在您开始遇到任何错误之前，我们的集群最多可以处理两个 Swarm 管理器节点故障。群管理器使用 Raft 共识算法(更多细节参见后续阅读部分)来保持所有管理器节点的一致状态。
# 群体工作者
我们之前看到的被称为 Docker 主机的**群工作人员**是那些运行 Docker 容器的人。群组工作人员由群组管理器管理:
![](img/0dc79ce2-c308-4a06-ac4d-70530101cf4a.png)
这是所有 Docker Swarm 组件的示例。我们看到 Docker Swarm 管理器与每个具有 Docker Swarm 工作人员角色的 Swarm 主机进行对话。工人们确实有某种程度的连通性，我们将很快看到。
# 创建和管理群
现在让我们看看如何使用 Swarm，以及如何执行以下任务:
*   创建集群
*   加入工人
*   正在列出节点
*   管理集群
# 创建集群
让我们从创建一个集群开始，从 Swarm 管理器开始。由于我们将在本地计算机上创建一个多节点集群，因此我们应该使用 Docker Machine 通过运行以下命令来启动主机:
```
$ docker-machine create \
 -d virtualbox \
 swarm-manager 
```
您获得的输出的节略版本如下所示:
```
(swarm-manager) Creating VirtualBox VM...
(swarm-manager) Starting the VM...
(swarm-manager) Check network to re-create if needed...
(swarm-manager) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env swarm-manager
```
Swarm 管理器节点现在已经启动并使用 VirtualBox 运行。我们可以通过运行以下命令来确认这一点:
```
$ docker-machine ls
```
您应该会看到类似于以下输出的内容:
![](img/a2046c70-6991-407c-bef0-cc89a9795b3f.png)
现在，让我们把 Docker Machine 指向新的 Swarm 管理器。从前面创建 Swarm 管理器时的输出中，我们可以看到它告诉我们如何指向节点:
```
$ docker-machine env swarm-manager
```
这将向您展示配置本地 Docker 客户端以与我们新启动的 Docker 主机对话所需的命令。以下代码块显示了我运行该命令时返回的配置:
```
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/russ/.docker/machine/machines/swarm-manager"
export DOCKER_MACHINE_NAME="swarm-manager"
# Run this command to configure your shell:
# eval $(docker-machine env swarm-manager)
```
运行前一个命令后，我们被告知运行以下命令来指向 Swarm 管理器:
```
$ eval $(docker-machine env swarm-manager)
```
现在，如果我们看看主机上有哪些机器，我们可以看到我们有 Swarm 主主机，并且它现在被设置为`ACTIVE`，这意味着我们现在可以在它上面运行命令:
```
$ docker-machine ls
```
它应该向您展示如下内容:
![](img/9bbe1018-54b2-4139-be47-72fe23d7fe3a.png)
现在我们已经启动并运行了第一台主机，我们应该添加两个工作节点。为此，只需运行以下命令来启动另外两台 Docker 主机:
```
$ docker-machine create \
 -d virtualbox \
 swarm-worker01
$ docker-machine create \
 -d virtualbox \
 swarm-worker02
```
启动另外两台主机后，您可以使用以下命令获取主机列表:
```
$ docker-machine ls
```
它应该向您展示如下内容:
![](img/f3dd5f78-b321-4507-b50c-e58a5cc83402.png)
值得指出的是，到目前为止，我们还没有做任何事情来创建我们的 Swarm 集群；我们只启动了它将运行的主机。
You may have noticed that one of the columns when running the `docker-machine ls` command is `SWARM`. This only contains information if you have launched your Docker hosts using the standalone Docker Swarm command, which is built into Docker Machine.
# 向集群添加群管理器
让我们引导我们的 Swarm 管理器。为此，我们将把一些 Docker Machine 命令的结果传递给我们的主机。为了创建我们的管理器，要运行的命令如下:
```
$ docker $(docker-machine config swarm-manager) swarm init \
 --advertise-addr $(docker-machine ip swarm-manager):2377 \
 --listen-addr $(docker-machine ip swarm-manager):2377
```
您应该会收到类似以下的消息:
```
Swarm initialized: current node (uxgvqhw6npr9glhp0zpabn4ha) is now a manager.
To add a worker to this swarm, run the following command:
 docker swarm join --token SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh 192.168.99.100:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
```
从输出中可以看到，一旦您的管理器被初始化，您就会得到一个唯一的令牌。在前面的例子中，完整的令牌是`SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh`。工作节点需要这个令牌来验证自己并加入我们的集群。
# 将群集工作人员加入群集
要将我们的两个工作人员添加到集群中，请运行以下命令。首先，让我们设置一个环境变量来保存令牌，确保您用初始化自己的管理器时收到的令牌替换令牌:
```
$ SWARM_TOKEN=SWMTKN-1-1uulmpx4j4hub2qmd8q2ozxmonzcehxcomt7cw92xarg3yrkx2-dfiqnfisl75bwwh8yk9pv3msh
```
现在我们可以运行以下命令将`swarm-worker01`添加到集群中:
```
$ docker $(docker-machine config swarm-worker01) swarm join \
 --token $SWARM_TOKEN \
 $(docker-machine ip swarm-manager):2377
```
对于`swarm-worker02`，需要运行以下命令:
```
$ docker $(docker-machine config swarm-worker02) swarm join \
 --token $SWARM_TOKEN \
 $(docker-machine ip swarm-manager):2377
```
这两次，您都应该得到节点已加入群集的确认:
```
This node joined a swarm as a worker.
```
# 正在列出节点
您可以通过运行以下命令来检查群:
```
$ docker-machine ls
```
检查本地 Docker 客户端是否仍配置为连接到 Swarm 管理器节点，如果不是，请重新运行以下命令:
```
$ eval $(docker-machine env swarm-manager)
```
现在我们已经连接到了 Swarm 管理器节点，您可以运行以下命令:
```
$ docker node ls
```
这将连接到 Swarm 主节点，并查询组成我们集群的所有节点。您应该看到我们的三个节点都列出来了:
![](img/9b53fe45-f48a-4b9b-93e0-674240551e44.png)
# 管理集群
让我们看看如何对我们正在创建的所有这些集群节点进行管理。