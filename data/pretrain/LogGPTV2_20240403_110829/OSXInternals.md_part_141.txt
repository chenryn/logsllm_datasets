function. As listed in Table 413, the debug boot-time argument can be set to the following values to cause
the kernel to wait for debugger connection on an NMI:
 DB_NMI
 DB_NMI | DB_KERN_DUMP_ON_NMI | DB_DBG_POST_CORE
You can programmatically enter the debugger from a kernel extension by calling the PE_enter_debugger()
function. One approach to performing two-machine debugging of an I/O Kit driver involves calling
PE_enter_debugger() from the driver's start method. The driver is loadedbut not startedby calling
kextload with the -l option. The -s option is specified to generate the symbol files for the driver and its
dependencies. These are then available to the debugging machine. Thereafter, matching can be initiated for
the driver by calling kextload with the -m option, which this will cause the target kernel to wait for a
remote debugger connection. The debugging machine can then attach to it.
Let us modify our DummyDriver example by adding a call to PE_enter_debugger("Entering Debugger")
in its start method. Recall that the OSBundleLibraries key of the driver lists com.apple.kernel.iokit
as a dependency.
$ sudo kextload -s /tmp -vl /tmp/DummyDriver.kext
kextload: extension DummyDriver.kext appears to be valid
kextload: notice: extension DummyDriver.kext has debug properties set
kextload: loading extension DummyDriver.kext
kextload: writing symbol file /tmp/com.apple.kernel.iokit.sym
kextload: writing symbol file /tmp/com.osxbook.driver.DummyDriver.sym
kextload: DummyDriver.kext loaded successfully
The driver is now loaded but not started. After transferring the symbol files to the debugging machine, we
can start the loaded driver:
$ sudo kextload -m DummyDriver.kext
If the panic user interface is disabled, the target machine will display a text message. Let us assume that the
target machine's IP address and Ethernet address are 10.0.0.2 and aa:bb:cc:dd:ee:ff, respectively.
Debugger(DummyDriver: we are entering the debugger)
ethernet MAC address: aa:bb:cc:dd:ee:ff
ip address: 10.0.0.2
Waiting for remote debugger connection.
Now we can prepare and launch the debugger from the debugging machine.
$ sudo arp -s 10.0.0.2 aa:bb:cc:dd:ee:ff
$ gdb /path/to/copy/of/target/machines/mach_kernel
...
(gdb) source /path/to/kgmacros
Loading Kernel GDB Macros Package. Try "help kgm" for more info.
(gdb) add-symbol-file /tmp/com.osxbook.driver.DummyDriver.sym
add symbol table from ...? (y or n) y
Reading symbols from ... done.
...
(gdb) target remote-kdp
(gdb) attach 10.0.0.2
Connected.
[switching to process 3]
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 69 of 79
(gdb) where
...
(gdb) continue
10.8.5. Debugging by Using KDB
As we discussed in Section 6.8.2, the Mac OS X kernel also supports a built-in kernel debugger called KDB,
which is more suitable for low-level kernel debugging. In some cases, KDB may be the only kernel-
debugging optionsay, if you need to debug a kernel component before an Ethernet or FireWire connection
can be operational. KDB requires a native serial portsuch as the one in an Xservethat the kernel can operate
by polling, without requiring additional drivers. In particular, PCI- or USB-based serial port adapters will
not work with KDB.
Unlike the KDP shim for Ethernet debugging, KDB support is not compiled into the default kernel. It is also
not available as a loadable kernel extension as in the case of FireWire-based debugging. To use KDB, the
kernel must be compiled in the debug configuration.
$ cd /path/to/xnu/source
$ make exporthdrs && KERNEL_CONFIGS=DEBUG all
...
$ ls BUILD/obj/DEBUG_PPC/mach_kernel
mach_kernel
...
$ sudo cp BUILD/obj/DEBUG_PPC/mach_kernel /mach_kernel.debug
$ sudo chown root:wheel /mach_kernel.debug
$ sudo chmod 644 /mach_kernel.debug
A convenient way to boot an alternate kernel is to set the boot-file Open Firmware variable appropriately.
$ mount
...
/dev/disk0s3 on / (local, journaled)
$ ls /mach_kernel*
/mach_kernel /mach_kernel.debug
$ nvram boot-file
boot-file
$ sudo nvram boot-file='hd:3,mach_kernel.debug'
Moreover, the DB_KDB (0x10) bit must be set in the debug boot-time argument to use KDB as the default
debugger, for example:
$ sudo nvram boot-args="-v debug=0x11c"
The value 0x11c is the logical OR of DB_NMI, DB_KPRT, DB_KDB, and DB_LOG_PI_SCRN.
Let us look at a sample KDB session to get a flavor of its functionality. Figure 1043 shows how the two
machines involved are connected. The debugging machine has a USB-to-serial adapter, through which it
connects to the native serial port of an Xserve, which is the target machine. We assume that /dev/tty.usb
is the serial terminal device node created by the adapter's driver. We use the minicom serial communications
program, but in general, any such program can be used.
Figure 1043. A KDB setup
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 70 of 79
Tables 102, 103, and 104 list most of the commands available in KDB. Several commands take one or more
arguments, as well as optional modifiers that are specified using the slash character. Assuming that our
DummyDriver kernel extension called PE_enter_debugger("Hello, KDB!"), a KDB session would be
initiated as follows:
...
kmod_create: com.osxbook.driver.DummyDriver (id 100), 2 pages loaded at 0x0
Matching service count = 1
...
init
attach
com_osxbook_driver_DummyDriver::probe(IOResources)
probe
detach
com_osxbook_driver_DummyDriver::start(IOResources) 
attach
start
Debugger(Hello, KDB!)
Stopped at _Debugger+228: tweq r3,r3
db{0}>
Table 102. KDB Commands
Command Description
break Set breakpoint, along with a skip count.
call Call function at the given address.
cm Verify the consistency of virtual-to-real mappings and
the page table entry group (PTEG) hash table.
cond Set condition on breakpoint.
continue, c Continue execution.
cp Verify the consistency of the pmap skip-list data
structures.
cpu Switch to another CPU.
dc Starting at a given address, print 256 bytes as
characters.
delete, d Delete breakpoint.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 71 of 79
dh Given a virtual address and an address space number
(explicitly specified or the last entered space), display
the corresponding page table entry group (PTEG) and
PTEG control area (PCA) data structures.
di Display information about the I/O Kit Device Tree
and Service planes.
dk Display information about loaded kernel extensions.
dl Starting at a given address, display 256 bytes of
information, printing a long at a time.
dm Given a virtual address and an address space number
(explicitly specified or the last entered space), display
the corresponding virtual-to-real translation
information.
dmacro Delete a debugger macro.
dp Display all in-use pmaps in the system.
dr Starting at a given real address, display 256 bytes of
real memory.
ds Iterate over all threads in all tasks, printing the
associated save areas.
dv Starting at a given virtual address, display 256 bytes
of virtual memory in the address space specified by
the given address space number.
dwatch Delete watchpoint.
dx Display the contents of registers other than general-
purpose registers.
gdb Continue execution and switch to GDB.
lt Display the contents of the low-level trace table,
starting either at the given entry address (if any) or at
the most current entry.
macro Define a debugger macro.
match Continue execution until matching return.
print Use for formatted printing.
reboot Reboot the system.
search Search for a given char, short, or long value in
memory, starting at a given address.
set Set the value of a debugger variable.
show Display various types of information (see Tables 103
and 104).
step, s Single-step execution.
trace Display stack traces of one or all threads.
until Trace and print execution until call or return.
watch Set watchpoint.
write, w Write to memory.
x, examine Print data at a given address for examination. Sets the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 72 of 79
"next" and "previous" address values for use by xb
and xf.
xb Examine data in backward direction.
xf Examine data in forward direction.
Table 103. KDB show all Commands
Command Description
show all spaces Print IPC space information for all tasks in the
system.
show all tasks Print information about all tasks, including
information about all threads in each task.
show all zones Print information about all zones being managed by
the Mach zone-based allocator.
show all vmtask Print VM information for all tasks in the system.
Table 104. KDB show Commands
Command Description
show act Display information about the given activation
(tHRead_t) or the current activation.
show breaks List all breakpoints.
show copy Display information about a VM copy object
(vm_map_copy_t).
show ipc_port Display information about all IPC ports in the task
containing the given thread or the current thread.
show kmsg Display information about an IPC message kernel
buffer (ipc_kmsg_t).
show lock Display information about the given read/write lock
(lock_t).
show macro Display the expanded version of the given user macro.
show map Display information about the given VM map
(vm_map_t).
show msg Display information about an IPC message header
(mach_msg_ header_t).
show mutex_lock Display information about the given mutex
(mutex_t).
show object Display information about the given VM object
(vm_object_t).
show page Display information about the given resident page
(vm_page_t).
show port Display information about the given IPC port
(ipc_port_t).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 73 of 79
show pset Display information about the given port set
(ipc_pset_t).
show registers Display contents of registers in a given thread (if one
is specified) or in the default thread (if one is set).
show runq Display run queue information.
show simple_lock Display information about the given simple lock
(simple_lock_t).
show space Display information about the IPC space
(ipc_space_t) associated with the given task or the
current task.
show system Display scheduling and virtual memory statistics.
show task Display information about the given task or the
current task.
show tr Display events in the KDB trace buffer (if available).
show variables Display values of one or more debugger variables.
show vmtask Display VM information about the given task or the
task containing the default thread (if one is set).
show watches List all watchpoints.
show zone Display information about the given Mach zone-based
allocator zone (struct zone).
Thereafter, KDB commands are entered at the db prompt. As shown in Table 102, KDB provides commands
that act on specific kernel objects and addresses, as well as commands that act globallysay, on all tasks.
db{0}> dc 0x5000 # the address 0x5000 (PowerPC) contains the characters "Hagfish "
0000000000005000 Hagf ish .... .... .9.. .... .... .6.$
0000000000005020 .... .... .... .... .... .... .... ....
...
db{0}> search /l 0x5000 0x48616765 # search for "Hage"
no memory is assigned to src address 0000c000
db{0}> search /l 0x5000 0x48616766 # search for "Hagf"
0x5000:
KDB commands are especially suited for examining Mach data structures.
db{0}> show task # show current task
0 (01BCCD58): 41 threads:
0 (003C2638) W N (_vm_pageout_continue) _vm_page_free_wanted
1 (01BD691C) R (_idle_thread)
2 (01BD6588) W N (_sched_tick_continue) _sched_tick_thread
...
39 (0280FACC) W N _clock_delay_until
40 (028941F4) R
db{0}> show vmtask # show VM information for current task
id task map pmap virtual rss pg rss mem wir pg wir mem
0 01bccd58 00e3fe50 003a1000 796236K 14857 59428K 0 0K
db{0}> show map 0xe3fe50 # show details of VM map
task map 00E3FE50
prev = 00F862A8 next = 00F98FD4 start = 0000000000001000 end = 00000000DFF0
nentries = 00000588, !entries_pageable
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 74 of 79
KDB commands are also useful for viewing system-wide information and statistics.
db{0}> show runq # show run queue information
PROCESSOR SET 41b800
PRI TASK.ACTIVATION
63: 41.1 44.4
31: 5.0
db{0}> dk # show information about kernel extensions
info addr start - end name ver
...
2F739E44 2F738000 2F739000 - 2F73A000: com.osxbook.driver.DummyDriver, 11
...
01BC1780 00000000 00000000 - 00000000: com.apple.kpi.bsd, 8.2.0
01BC1890 00000000 00000000 - 00000000: com.apple.kernel, 8.2.0
db{0}> show system # show scheduling and VM statistics
Scheduling Statistics:
Thread invocations: csw 115458 same 7585
Thread block: calls 202781
Idle thread: handoff 146906 block 0 no_dispatch 0
Sched thread blocks: 0
VM Statistics:
pages:
activ 13344 inact 21024 free 210689 wire 17087 gobbl 0
target: min 2569 inact 586 free 3190 resrv 98
pause:
Pageout Statistics:
active 0 inactv 0
nolock 0 avoid 0 busy 0 absent 0
used 0 clean 0 dirty 0
laundry_pages_freed 0
10.8.6. Miscellaneous Debugging Tools
Mac OS X provides several programs such as the following that are useful while analyzing, profiling, or
debugging kernel extensions.
 Shark.app (part of the CHUD package) is a powerful tool for performance understanding and
optimization. It can profile the entire operating systemthat is, the kernel, kernel extensions, and
applicationsto produce detailed profiles of hardware and software performance events. Section
2.13.4.2 enumerates various other tools available in the CHUD package.
A kext's memory usage can be tracked using a combination of kextstat, ioalloccount, and
ioclasscount. As we saw earlier, kextstat shows the amount of memory, including wired memory,
allocated for each loaded kext. ioalloccount displays the total amount of memory allocated through