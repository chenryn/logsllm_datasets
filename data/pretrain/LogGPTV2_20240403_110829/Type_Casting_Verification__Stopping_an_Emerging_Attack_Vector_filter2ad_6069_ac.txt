support alignment-based direct mapping schemes [3, 22].
In this scheme, the metadata can be maintained for a par-
ticular object, and can be retrieved with O(1) complexity
on the pointer pointing to anywhere within the object’s
range.
4.3 Casting Safety Verification
This subsection describes how CAVER uses traced in-
formation to verify the safety of type casting. We first
describe how the instrumentation is done at compile time,
and then describe how the runtime library eventually veri-
fies castings during runtime.
Instrumentation. CAVER instruments static_cast to
invoke a runtime library function, verify_cast(), to ver-
ify the casting. Here, CAVER analyzes a type hierarchy
involving source and destination types in static_cast
and only instruments for downcast cases. When invok-
ing verify_cast(), CAVER passes the following three
pieces of information: beforeAddr, the pointer address
before the casting; afterAddr, the pointer address after
the casting; and TargetTypeHash, the hash value of the
destination class to be casted to (denoted as type_hash(A)
in Example 2).
Runtime library. The casting verification (Appendix 1)
is done in two steps:
(1) locating the correspond-
ing THTable associated with the object pointed to by
beforeAddr; and (2) verifying the casting operation by
checking whether TargetTypeHash is a valid type where
afterAddr points.
To locate the corresponding THTable, we first check
the data storage membership because we do not know
how the object beforeAddr points to is allocated. Checks
USENIX Association  
24th USENIX Security Symposium  87
7
are ordered by their expense, and the order is critical for
good performance. First, a stack object membership is
checked by determinig whether the beforeAddr is in the
range between the stack top and bottom; then, a heap ob-
ject membership is checked by whether the beforeAddr
is in the range of pre-mapped address spaces reserved
for the custom allocator; finally a global object member-
ship is checked with a bit vector array for each loaded
binary module. After identifying the data storage mem-
bership, CAVER retrieves the metadata containing the
allocation base and the reference to the THTable. For
stack and global objects, the corresponding red-black tree
is searched. For heap objects, the metadata is retrieved
from the custom heap.
Next, CAVER verifies the casting operation. Because
the THTable includes all possible types that the given ob-
ject can be casted to (i.e., all types from both inheritances
and compositions), CAVER exhaustively matches whether
TargetTypeHash is a valid type where afterAddr points.
To be more precise, the afterAddr value is adjusted for
each matching type. Moreover, to avoid false positives
due to a phantom class, CAVER tries to match all phantom
classes of the class to be casted to.
4.4 Optimization
Since performance overhead is an important factor for
adoption, CAVER applies several optimization techniques.
These techniques are applied in two stages, as shown
in Figure 2. First, offline optimizations are applied to
remove redundant instrumentations. After that, additional
runtime optimizations are applied to further reduce the
performance overhead.
Safe-allocations. Clearly, not all allocated objects will
be involved in type casting. This implicates that CAVER
does not need to trace type information for objects that
would never be casted. In general, soundly and accurately
determining whether objects allocated at a given alloca-
tion site will be casted is a challenging problem because
it requires sophisticated static points-to analysis. Instead,
CAVER takes a simple, yet effective, optimization ap-
proach inspired from C type safety checks in CCured [33].
The key idea is that the following two properties always
hold for downcasting operations: (1) bad-casting may
happen only if an object is allocated as a child of the
source type or the source type itself; and (2) bad-casting
never happens if an object is allocated as the destina-
tion type itself or a child of the destination type. This is
because static_cast guarantees that the corresponding
object must be a derived type of the source type. Since
CAVER can observe all allocation sites and downcasting
operations during compilation, it can recursively apply
the above properties to identify safe-allocation sites, i.e.,
the allocated objects will never cause bad-casting.
Caching verification results. Because casting verifica-
tion involves loops (over the number of compositions
and the number of bases) and recursive checks (in a
composition case), it can be a performance bottleneck.
A key observation here is that the verification result is
always the same for the same allocation type and the
same target type (i.e., when the type of object pointed by
afterAddr and TargetTypeHash are the same). Thus,
in order to alleviate this potential bottleneck, we main-
tain a cache for verification results, which is inspired by
UBSAN [42]. First, a verification result is represented
as a concatenation of the address of a corresponding
THTable, the offset of the afterAddr within the object,
and the hash value of target type to be casted into (i.e.,
&THTable || offset || TargetTypeHash). Next, this concate-
nated value is checked for existence in the cache before
verify_cast() actually performs verification. If it does,
verify_cast() can conclude that this casting is correct.
Otherwise, verify_cast() performs actual verification
using the THTable, and updates the cache only if the cast-
ing is verified to be correct.
5
We implemented CAVER based on the LLVM Compiler
project [43] (revision 212782, version 3.5.0). The static in-
strumentation module is implemented in Clang’s CodeGen
module and LLVM’s Instrumentation module. The
runtime library is implemented using the compiler-rt
module based on LLVM’s Sanitizer code base. In to-
tal, CAVER is implemented in 3,540 lines of C++ code
(excluding empty lines and comments).
Implementation
CAVER is currently implemented for the Linux x86
platform, and there are a few platform-dependent mech-
anisms. For example, the type and tracing functions for
global objects are placed in the .ctors section of ELF. As
these platform-dependent features can also be found in
other platforms, we believe CAVER can be ported to other
platforms as well. CAVER interposes threading functions
to maintain thread contexts and hold a per-thread red-
black tree for stack objects. CAVER also maintains the
top and bottom addresses of stack segments to efficiently
check pointer membership on the stack. We also modified
the front-end drivers of Clang so that users of CAVER can
easily build and secure their target applications with one
extra compilation flag and linker flag, respectively.
6 Evaluation
We evaluated CAVER with two popular web browsers,
Chromium [40] (revision 295873) and Firefox [44]
(revision 213433), and two benchmarks from SPEC
CPU2006 [39]5. Our evaluation aims to answer the fol-
lowing questions:
5 Although CAVER was able to correctly run all C++ benchmarks in
SPEC CPU2006, only 483.xalancbmk and 450.soplex have downcast
operations.
88  24th USENIX Security Symposium 
USENIX Association
8
(§6.2)
(§6.1)
• How easy is it to deploy CAVER to applications?
• What are the new vulnerabilities CAVER found?
• How precise is CAVER’s approach in detecting bad-
• How good is CAVER’s protection coverage? (§6.4)
• What are the instrumentation overheads that CAVER
imposes and how many type castings are verified by
CAVER? (§6.5)
casting vulnerabilities? (§6.3)
• What are the runtime performance overheads that
CAVER imposes? (§6.6)
Comparison methods. We used UBSAN, the state-of-art
tool for detecting bad-casting bugs, as our comparison tar-
get of CAVER. Also, We used CAVER-NAIVE, which dis-
abled the two optimization techniques described in §4.4,
to show their effectiveness on runtime performance opti-
mization.
Experimental setup. All experiments were run on
Ubuntu 13.10 (Linux Kernel 3.11) with a quad-core 3.40
GHz CPU (Intel Xeon E3-1245), 16 GB RAM, and 1 TB
SSD-based storage.
6.1 Deployments
As the main design goal for CAVER is automatic deploy-
ments, we describe our experience of applying CAVER to
tested programs including SPEC CPU 2006 benchmarks,
the Chromium browser, and the Firefox browser. CAVER
was able to successfully build and run these programs
without any program-specific understanding of the code
base. In particular, we added one line to the build config-
uration file to build SPEC CPU 2006, 21 lines to the .gyp
build configuration to build the Chromium browser, and
10 lines to the .mozconfig build configuration file to build
the Firefox browser. Most of these build configuration
changes were related to replacing gcc with clang.
On the contrary, UBSAN crashed while running
xalancbmk in SPEC CPU 2006 and while running the Fire-
fox browser due to checks on non-polymorphic classes.
UBSAN also crashed the Chromium browser without
blacklists, but was able to run once we applied the black-
lists provided by the Chromium project [9]. In particular,
to run Chromium, the blacklist has 32 different rules that
account for 250 classes, ten functions, and eight whole
source files. Moreover, this blacklist has to be maintained
constantly as newly introduced code causes new crashes
in UBSAN [10]. This is a practical obstacle for adopt-
ing UBSAN in other C++ projects—although UBSAN has
been open sourced for some time, Chromium remains the
only major project that uses UBSAN, because there is a
dedicated team to maintain its blacklist.
6.2 Newly Discovered Bad-casting Vulnerabilities
To evaluate CAVER’s capability of detecting bad-casting
bugs, we ran CAVER-hardened Chromium and Firefox
with their regression tests (mostly checking functional cor-
rectness). During this evaluation, CAVER found eleven
previously unknown bad-casting vulnerabilities in GNU
libstdc++ while evaluating Chromium and Firefox. Ta-
ble 1 summarizes these vulnerabilities including related
class information: allocated type, source, and destina-
tion types in each bad-casting. In addition, we further
analyzed their security impacts: potential compatibility
problems due to the C++ ABI (see §2) or direct mem-
ory corruption, along with security ratings provided by
Mozilla for Firefox.
CAVER found two vulnerabilities in the Firefox
browser. The Firefox team at Mozilla confirmed and
fixed these, and rated both as security-high, meaning that
the vulnerability can be abused to trigger memory cor-
ruption issues. These two bugs were casting the pointer
into a class which is not a base class of the originally
allocated type. More alarmingly, there were type seman-
tic mismatches after the bad-castings—subsequent code
could dereference the incorrectly casted pointer. Thus the
C++ ABI and Memory columns are checked for these two
cases.
CAVER also found nine bugs in GNU libstdc++ while
running the Chromium browser. We reported these bugs
to the upstream maintainers, and they have been con-
firmed and fixed. Most of these bugs were triggered when
libstdc++ converted the type of an object pointing to
its composite objects (e.g., Base_Ptr in libstdc++) into
a more derived class (Rb_Tree_node in libstdc++), but
these derived classes were not base classes of what was
originally allocated (e.g., EncodedDescriptorDatabase
in Chromium). Since these are generic bugs, meaning
that benign C++ applications will encounter these issues
even if they correctly use libstdc++ or related libraries,
it is difficult to directly evaluate their security impacts
without further evaluating the applications themselves.
These vulnerabilities were identified with legitimate
functional test cases. Thus, we believe CAVER has great
potential to find more vulnerabilities once it is utilized
for more applications and test cases, as well as inte-
grated with fuzzing infrastructures like ClusterFuzz [2]
for Chromium.
6.3 Effectiveness of Bad-casting Detection
To evaluate the correctness of detecting bad-casting
vulnerabilities, we tested five bad-casting exploits of
Chromium on the CAVER-hardened Chromium binary
(see Table 2). We backported five bad-casting vulnera-
bilities as unit tests while preserving important features
that may affect CAVER’s detection algorithm, such as
class inheritances and their compositions, and allocation
USENIX Association  
24th USENIX Security Symposium  89
9
Product
Bug ID
Firefox
Firefox
libstdc++
libstdc++
libstdc++
libstdc++
libstdc++
libstdc++
libstdc++
libstdc++
libstdc++
1074280 [4]
1089438 [5]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
63345 [30]
Types
Allocation / Source / Destination
BasicThebesLayer / Layer / BasicContainerLayer
PRCListStr / PRCList / nsSHistory
EncodedDescriptorDatabase / Base_Ptr / Rb_Tree_node
EnumValueOptions / Rb_tree_node_base / Link_type
GeneratorContextImpl / Rb_tree_node_base / Link_type_const
Vulnerable
Function
PaintLayer()
EvictContent()
_M_const_cast()
_M_end()
_M_end() const
_M_insert_unique() WaitableEventKernel / Base_ptr / List_type
operator*()
begin()
begin() const
end()
end() const
BucketRanges / List_node_base / Node
FileOptions / Link_type / Rb_Tree_node
std::map / Link_type / Rb_Tree_node
MessageOptions / Link_type / Rb_Tree_node
Importer / Link_type / Rb_Tree_node
Security Implication
ABI Mem
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
-
-
-
-
-
-
-
-
-
Rating
High (CVE-2014-1594)
High
†
†
†
†
†