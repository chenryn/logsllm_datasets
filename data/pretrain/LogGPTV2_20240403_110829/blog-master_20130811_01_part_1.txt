## PostgreSQL pg_stats used to estimate top N freps values and explain rows  
### 作者                  
digoal                  
### 日期                   
2013-08-11                
### 标签                  
PostgreSQL , 数组 , pg_stats , 统计信息 , TOP N , 词频      
----             
## 背景     
本文要聊的是如何利用统计信息规避一些复杂的精确统计.   
去年写过一篇关于 PostgreSQL 9.2 新增array元素统计收集的相关文章. 本文也会讲到.  
[《PostgreSQL 9.2 add array elements statistics》](../201205/20120518_01.md)    
```  
Release 9.2  
Release Date: 2012-09-10  
     * Move the frequently accessed members of the PGPROC shared memory  
       array to a separate array (Pavan Deolasee, Heikki Linnakangas,  
       Robert Haas)  
```  
在日常的数据库统计中, count(*), 排名这类的统计非常多, 同时这类统计的开销也非常大, 特别是当表的数据量巨大时.  
接下来模拟几个场景.  
1\. 统计某条件下的记录条数.  
```  
digoal=# create table test_1 (id serial4 primary key, info text, appid int, crt_time timestamp);  
CREATE TABLE  
digoal=# insert into test_1 (info,appid,crt_time) select md5(random()::text),round(10000*random())::int,clock_timestamp() from generate_series(1,2000000);  
INSERT 0 2000000  
```  
默认的统计目标值为100  
```  
digoal=# show default_statistics_target ;  
-[ RECORD 1 ]-------------+----  
default_statistics_target | 100  
digoal=# analyze test_1;  
ANALYZE  
```  
为了得到准确的统计信息, 如果没有打开autovacuum, 最好手动收集一次统计信息.  
```  
digoal=# select * from pg_stat_all_tables where relname='test_1';  
-[ RECORD 1 ]-----+------------------------------  
relid             | 91368  
schemaname        | public  
relname           | test_1  
seq_scan          | 1  
seq_tup_read      | 0  
idx_scan          | 0  
idx_tup_fetch     | 0  
n_tup_ins         | 2000000  
n_tup_upd         | 0  
n_tup_del         | 0  
n_tup_hot_upd     | 0  
n_live_tup        | 2000000  
n_dead_tup        | 0  
last_vacuum       |   
last_autovacuum   |   
last_analyze      | 2013-08-11 11:15:04.975523+08  
last_autoanalyze  | 2013-08-11 11:14:53.663951+08  
vacuum_count      | 0  
autovacuum_count  | 0  
analyze_count     | 1  
autoanalyze_count | 1  
```  
查询appid=1的记录数有多少  
```  
digoal=# select count(*) from test_1 where appid=1;  
 count   
-------  
   189  
(1 row)  
```  
使用explain输出appid=1的记录数有多少, 这里显示为197. 和使用count(*)得到的存在一点差异.  
```  
digoal=# explain select * from test_1 where appid=1;  
                         QUERY PLAN                            
-------------------------------------------------------------  
 Seq Scan on test_1  (cost=0.00..45619.00 rows=197 width=49)  
   Filter: (appid = 1)  
(2 rows)  
```  
如果将统计目标调整为10000, 采样行数会大大增加, 消耗的资源加大.   
```  
digoal=# alter table test_1 alter column appid SET STATISTICS 10000;  
ALTER TABLE  
digoal=# analyze verbose test_1;  
INFO:  analyzing "public.test_1"  
INFO:  "test_1": scanned 20619 of 20619 pages, containing 2000000 live rows and 0 dead rows; 2000000 rows in sample, 2000000 estimated total rows  
ANALYZE  
```  
但是统计行数更加准确了, 现在为188. 只相差1行.   
```  
digoal=# explain select * from test_1 where appid=1;  
                         QUERY PLAN                            
-------------------------------------------------------------  
 Seq Scan on test_1  (cost=0.00..45619.00 rows=188 width=49)  
   Filter: (appid = 1)  
(2 rows)  
```  
范围查询看看是否准确呢?  
```  
digoal=# explain select * from test_1 where appid>1000;  
                           QUERY PLAN                              
-----------------------------------------------------------------  
 Seq Scan on test_1  (cost=0.00..45619.00 rows=1800419 width=49)  
   Filter: (appid > 1000)  
(2 rows)  
```  
也非常准确.   
```  
digoal=# select count(*) from test_1 where appid>1000;  
  count    
---------  
 1800263  
(1 row)  
```  
误差为 : 0.00008665  
组合条件的输出行评估 :   
```  
digoal=# explain select * from test_1 where appid>1000 and crt_time>now();  
                         QUERY PLAN                            
-------------------------------------------------------------  
 Seq Scan on test_1  (cost=0.00..55619.00 rows=180 width=49)  
   Filter: ((appid > 1000) AND (crt_time > now()))  
(2 rows)  
digoal=# select * from test_1 where appid>1000 and crt_time>now();  
 id | info | appid | crt_time   
----+------+-------+----------  
(0 rows)  
```  
2\. 分组排行, 例如要查询哪个appid的记录条数最多.  
```  
digoal=# alter table test_1 alter column appid SET STATISTICS 100;  
ALTER TABLE  
digoal=# analyze verbose test_1;  
INFO:  analyzing "public.test_1"  
INFO:  "test_1": scanned 20619 of 20619 pages, containing 2000000 live rows and 0 dead rows; 30000 rows in sample, 2000000 estimated total rows  
ANALYZE  
digoal=# select most_common_vals,most_common_freqs from pg_stats where tablename='test_1' and attname='appid';  

most_common_vals  | {3677,6460,1210,1291,2052,3374,3633,4386,4729,4756,5602,320,383,479,906,1003,1018,1102,1243,2594,2625,2762,3092,3243,3376,3511,4842,5595,5967,6135,6412,6821,6824,6966,7828,7984,8118,8310,8378,8952,9012,9840,9922,22,68,359,632,899,933,1034,1227,1369,1554,1615,1706,1744,1824,1995,2034,2056,2215,2412,2770,2988,3488,3722,3780,3834,3937,4079,4124,4224,4424,4723,4811,4870,5287,5490,5596,5609,5665,5751,5881,6236,6562,6656,6694,6827,6865,6980,6996,7008,7021,7097,7274,7285,7289,7330,7367,7449}  
most_common_freqs | {0.0004,0.000366667,0.000333333,0.000333333,0.000333333,0.000333333,0.000333333,0.000333333,0.000333333,0.000333333,0.000333333,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667,0.000266667}  
```  
值太均匀, 所以这个不准确.  
```  
digoal=# select appid,count(*) from test_1 group by appid order by count(*) desc limit 100;  
 appid | count   
-------+-------  
  9853 |   253  
  6502 |   249  
  1688 |   249  
   464 |   249  
  9974 |   248  
  1540 |   248  
  6622 |   247  
  6669 |   247  
  4643 |   247  
  1046 |   246  
  3051 |   246  
  6359 |   246  
  9103 |   246  
   348 |   246  
  2213 |   244  
   138 |   244  
  8135 |   244  
  3980 |   244  
  5870 |   243  
  9349 |   243  
  6210 |   243  
  4575 |   243  
  3421 |   242  
   207 |   242  
  3224 |   242  
  7056 |   242  
  4561 |   242  
  8770 |   241  
  3011 |   241  
  3731 |   241  
  4951 |   241  
  1066 |   240  
  5501 |   240  
  9354 |   240  
  7430 |   240  
  7621 |   240  
  2058 |   240  
  5460 |   240  
  6578 |   239  
  7431 |   239  
  5473 |   239  
  7305 |   239  