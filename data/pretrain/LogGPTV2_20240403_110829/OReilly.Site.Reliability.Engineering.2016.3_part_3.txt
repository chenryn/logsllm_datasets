profession.) Reading cover-to-cover is, of course, also useful and possible; our chap‐
ters are grouped thematically, into Principles (Part II), Practices (Part III), and Man‐
agement (Part IV). Each has a small introduction that highlights what the individual
pieces are about, and references other articles published by Google SREs, covering
specific topics in more detail. Additionally, the companion website to this book,
https://g.co/SREBook, has a number of helpful resources.
We hope this will be at least as useful and interesting to you as putting it together was
for us.
— The Editors
Conventions Used in This Book
The following typographical conventions are used in this book:
Italic
Indicates new terms, URLs, email addresses, filenames, and file extensions.
Constant width
Used for program listings, as well as within paragraphs to refer to program ele‐
ments such as variable or function names, databases, data types, environment
variables, statements, and keywords.
Constant width bold
Shows commands or other text that should be typed literally by the user.
Constant width italic
Shows text that should be replaced with user-supplied values or by values deter‐
mined by context.
Preface | xix
This element signifies a tip or suggestion.
This element signifies a general note.
This element indicates a warning or caution.
Using Code Examples
Supplemental material is available at https://g.co/SREBook.
This book is here to help you get your job done. In general, if example code is offered
with this book, you may use it in your programs and documentation. You do not
need to contact us for permission unless you’re reproducing a significant portion of
the code. For example, writing a program that uses several chunks of code from this
book does not require permission. Selling or distributing a CD-ROM of examples
from O’Reilly books does require permission. Answering a question by citing this
book and quoting example code does not require permission. Incorporating a signifi‐
cant amount of example code from this book into your product’s documentation does
require permission.
We appreciate, but do not require, attribution. An attribution usually includes the
title, author, publisher, and ISBN. For example: “Site Reliability Engineering, edited by
Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy (O’Reilly). Copy‐
right 2016 Google, Inc., 978-1-491-92912-4.”
If you feel your use of code examples falls outside fair use or the permission given
above, feel free to contact us at permissions@oreilly.com.
Safari® Books Online
Safari Books Online is an on-demand digital library that deliv‐
ers expert content in both book and video form from the
world’s leading authors in technology and business.
xx | Preface
Technology professionals, software developers, web designers, and business and crea‐
tive professionals use Safari Books Online as their primary resource for research,
problem solving, learning, and certification training.
Safari Books Online offers a range of plans and pricing for enterprise, government,
education, and individuals.
Members have access to thousands of books, training videos, and prepublication
manuscripts in one fully searchable database from publishers like O’Reilly Media,
Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que,
Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kauf‐
mann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders,
McGraw-Hill, Jones & Bartlett, Course Technology, and hundreds more. For more
information about Safari Books Online, please visit us online.
How to Contact Us
Please address comments and questions concerning this book to the publisher:
O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (international or local)
707-829-0104 (fax)
We have a web page for this book, where we list errata, examples, and any additional
information. You can access this page at http://bit.ly/site-reliability-engineering.
To comment or ask technical questions about this book, send email to bookques‐
tions@oreilly.com.
For more information about our books, courses, conferences, and news, see our web‐
site at http://www.oreilly.com.
Find us on Facebook: http://facebook.com/oreilly
Follow us on Twitter: http://twitter.com/oreillymedia
Watch us on YouTube: http://www.youtube.com/oreillymedia
Acknowledgments
This book would not have been possible without the tireless efforts of our authors
and technical writers. We’d also like thank the following internal reviewers for provid‐
ing especially valuable feedback: Alex Matey, Dermot Duffy, JC van Winkel, John T.
Preface | xxi
Reese, Michael O’Reilly, Steve Carstensen, and Todd Underwood. Ben Lutch and Ben
Treynor Sloss were this book’s sponsors within Google; their belief in this project and
sharing what we’ve learned about running large-scale services was essential to making
this book happen.
We’d like to send special thanks to Rik Farrow, the editor of ;login:, for partnering
with us on a number of contributions for pre-publication via USENIX.
While the authors are specifically acknowledged in each chapter, we’d like to take time
to recognize those that contributed to each chapter by providing thoughtful input,
discussion, and review.
Chapter 3: Abe Rahey, Ben Treynor Sloss, Brian Stoler, Dave O’Connor, David Besb‐
ris, Jill Alvidrez, Mike Curtis, Nancy Chang, Tammy Capistrant, Tom Limoncelli
Chapter 5: Cody Smith, George Sadlier, Laurence Berland, Marc Alvidrez, Patrick
Stahlberg, Peter Duff, Pim van Pelt, Ryan Anderson, Sabrina Farmer, Seth Hettich
Chapter 6: Mike Curtis, Jamie Wilkinson, Seth Hettich
Chapter 8: David Schnur, JT Goldstone, Marc Alvidrez, Marcus Lara-Reinhold, Noah
Maxwell, Peter Dinges, Sumitran Raghunathan, Yutong Cho
Chapter 9: Ryan Anderson
Chapter 10: Jules Anderson, Max Luebbe, Mikel Mcdaniel, Raul Vera, Seth Hettich
Chapter 11: Andrew Stribblehill, Richard Woodbury
Chapter 12: Charles Stephen Gunn, John Hedditch, Peter Nuttall, Rob Ewaschuk,
Sam Greenfield
Chapter 13: Jelena Oertel, Kripa Krishnan, Sergio Salvi, Tim Craig
Chapter 14: Amy Zhou, Carla Geisser, Grainne Sheerin, Hildo Biersma, Jelena Oertel,
Perry Lorier, Rune Kristian Viken
Chapter 15: Dan Wu, Heather Sherman, Jared Brick, Mike Louer, Štěpán Davidovič,
Tim Craig
Chapter 16: Andrew Stribblehill, Richard Woodbury
Chapter 17: Isaac Clerencia, Marc Alvidrez
Chapter 18: Ulric Longyear
Chapter 19: Debashish Chatterjee, Perry Lorier
Chapters 20 and 21: Adam Fletcher, Christoph Pfisterer, Lukáš Ježek, Manjot Pahwa,
Micha Riser, Noah Fiedel, Pavel Herrmann, Paweł Zuzelski, Perry Lorier, Ralf Wild‐
enhues, Tudor-Ioan Salomie, Witold Baryluk
xxii | Preface
Chapter 22: Mike Curtis, Ryan Anderson
Chapter 23: Ananth Shrinivas, Mike Burrows
Chapter 24: Ben Fried, Derek Jackson, Gabe Krabbe, Laura Nolan, Seth Hettich
Chapter 25: Abdulrahman Salem, Alex Perry, Arnar Mar Hrafnkelsson, Dieter Pear‐
cey, Dylan Curley, Eivind Eklund, Eric Veach, Graham Poulter, Ingvar Mattsson, John
Looney, Ken Grant, Michelle Duffy, Mike Hochberg, Will Robinson
Chapter 26: Corey Vickrey, Dan Ardelean, Disney Luangsisongkham, Gordon Priore‐
schi, Kristina Bennett, Liang Lin, Michael Kelly, Sergey Ivanyuk
Chapter 27: Vivek Rau
Chapter 28: Melissa Binde, Perry Lorier, Preston Yoshioka
Chapter 29: Ben Lutch, Carla Geisser, Dzevad Trumic, John Turek, Matt Brown
Chapter 30: Charles Stephen Gunn, Chris Heiser, Max Luebbe, Sam Greenfield
Chapter 31: Alex Kehlenbeck, Jeromy Carriere, Joel Becker, Sowmya Vijayaraghavan,
Trevor Mattson-Hamilton
Chapter 32: Seth Hettich
Chapter 33: Adrian Hilton, Brad Kratochvil, Charles Ballowe, Dan Sheridan, Eddie
Kennedy, Erik Gross, Gus Hartmann, Jackson Stone, Jeff Stevenson, John Li, Kevin
Greer, Matt Toia, Michael Haynie, Mike Doherty, Peter Dahl, Ron Heiby
We are also grateful to the following contributors, who either provided significant
material, did an excellent job of reviewing, agreed to be interviewed, supplied signifi‐
cant expertise or resources, or had some otherwise excellent effect on this work:
Abe Hassan, Adam Rogoyski, Alex Hidalgo, Amaya Booker, Andrew Fikes, Andrew
Hurst, Ariel Goh, Ashleigh Rentz, Ayman Hourieh, Barclay Osborn, Ben Appleton,
Ben Love, Ben Winslow, Bernhard Beck, Bill Duane, Bill Patry, Blair Zajac, Bob
Gruber, Brian Gustafson, Bruce Murphy, Buck Clay, Cedric Cellier, Chiho Saito, Chris
Carlon, Christopher Hahn, Chris Kennelly, Chris Taylor, Ciara Kamahele-Sanfratello,
Colin Phipps, Colm Buckley, Craig Paterson, Daniel Eisenbud, Daniel V. Klein, Dan‐
iel Spoonhower, Dan Watson, Dave Phillips, David Hixson, Dina Betser, Doron
Meyer, Dmitry Fedoruk, Eric Grosse, Eric Schrock, Filip Zyzniewski, Francis Tang,
Gary Arneson, Georgina Wilcox, Gretta Bartels, Gustavo Franco, Harald Wagener,
Healfdene Goguen, Hugo Santos, Hyrum Wright, Ian Gulliver, Jakub Turski, James
Chivers, James O’Kane, James Youngman, Jan Monsch, Jason Parker-Burlingham,
Jason Petsod, Jeffry McNeil, Jeff Dean, Jeff Peck, Jennifer Mace, Jerry Cen, Jess Frame,
John Brady, John Gunderman, John Kochmar, John Tobin, Jordyn Buchanan, Joseph
Bironas, Julio Merino, Julius Plenz, Kate Ward, Kathy Polizzi, Katrina Sostek, Kenn
Hamm, Kirk Russell, Kripa Krishnan, Larry Greenfield, Lea Oliveira, Luca Cittadini,
Preface | xxiii
Lucas Pereira, Magnus Ringman, Mahesh Palekar, Marco Paganini, Mario Bonilla,
Mathew Mills, Mathew Monroe, Matt D. Brown, Matt Proud, Max Saltonstall, Michal
Jaszczyk, Mihai Bivol, Misha Brukman, Olivier Oansaldi, Patrick Bernier, Pierre Pala‐
tin, Rob Shanley, Robert van Gent, Rory Ward, Rui Zhang-Shen, Salim Virji, Sanjay
Ghemawat, Sarah Coty, Sean Dorward, Sean Quinlan, Sean Sechrest, Shari Trumbo-
McHenry, Shawn Morrissey, Shun-Tak Leung, Stan Jedrus, Stefano Lattarini, Steven
Schirripa, Tanya Reilly, Terry Bolt, Tim Chaplin, Toby Weingartner, Tom Black, Udi
Meiri, Victor Terron, Vlad Grama, Wes Hertlein, and Zoltan Egyed.
We very much appreciate the thoughtful and in-depth feedback that we received from
external reviewers: Andrew Fong, Björn Rabenstein, Charles Border, David Blank-
Edelman, Frossie Economou, James Meickle, Josh Ryder, Mark Burgess, and Russ
Allbery.
We would like to extend special thanks to Cian Synnott, original book team member
and co-conspirator, who left Google before this project was completed but was deeply
influential to it, and Margaret Hamilton, who so graciously allowed us to reference
her story in our preface. Additionally, we would like to extend special thanks to Shy‐
laja Nukala, who generously gave of the time of her technical writers and supported
their necessary and valued efforts wholeheartedly.
The editors would also like to personally thank the following people:
Betsy Beyer: To Grandmother (my personal hero), for supplying endless amounts of
phone pep talks and popcorn, and to Riba, for supplying me with the sweatpants nec‐
essary to fuel several late nights. These, of course, in addition to the cast of SRE all-
stars who were indeed delightful collaborators.
Chris Jones: To Michelle, for saving me from a life of crime on the high seas and for
her uncanny ability to find manzanas in unexpected places, and to those who’ve
taught me about engineering over the years.
Jennifer Petoff: To my husband Scott for being incredibly supportive during the two
year process of writing this book and for keeping the editors supplied with plenty of
sugar on our “Dessert Island.”
Niall Murphy: To Léan, Oisín, and Fiachra, who were considerably more patient than
I had any right to expect with a substantially rantier father and husband than usual,
for years. To Dermot, for the transfer offer.
xxiv | Preface
PART I
Introduction
This section provides some high-level guidance on what SRE is and why it is different
from more conventional IT industry practices.
Ben Treynor Sloss, the senior VP overseeing technical operations at Google—and the
originator of the term “Site Reliability Engineering”—provides his view on what SRE
means, how it works, and how it compares to other ways of doing things in the indus‐
try, in Chapter 1.
We provide a guide to the production environment at Google in Chapter 2 as a way to
help acquaint you with the wealth of new terms and systems you are about to meet in
the rest of the book.
CHAPTER 1
Introduction
Written by Benjamin Treynor Sloss1
Edited by Betsy Beyer
Hope is not a strategy.
—Traditional SRE saying
It is a truth universally acknowledged that systems do not run themselves. How, then,
should a system—particularly a complex computing system that operates at a large
scale—be run?
The Sysadmin Approach to Service Management
Historically, companies have employed systems administrators to run complex com‐
puting systems.
This systems administrator, or sysadmin, approach involves assembling existing soft‐
ware components and deploying them to work together to produce a service.
Sysadmins are then tasked with running the service and responding to events and
updates as they occur. As the system grows in complexity and traffic volume, generat‐
ing a corresponding increase in events and updates, the sysadmin team grows to
absorb the additional work. Because the sysadmin role requires a markedly different
skill set than that required of a product’s developers, developers and sysadmins are
divided into discrete teams: “development” and “operations” or “ops.”
The sysadmin model of service management has several advantages. For companies
deciding how to run and staff a service, this approach is relatively easy to implement:
as a familiar industry paradigm, there are many examples from which to learn and
1 Vice President, Google Engineering, founder of Google SRE
3
emulate. A relevant talent pool is already widely available. An array of existing tools,
software components (off the shelf or otherwise), and integration companies are
available to help run those assembled systems, so a novice sysadmin team doesn’t
have to reinvent the wheel and design a system from scratch.
The sysadmin approach and the accompanying development/ops split has a number
of disadvantages and pitfalls. These fall broadly into two categories: direct costs and
indirect costs.
Direct costs are neither subtle nor ambiguous. Running a service with a team that
relies on manual intervention for both change management and event handling
becomes expensive as the service and/or traffic to the service grows, because the size
of the team necessarily scales with the load generated by the system.
The indirect costs of the development/ops split can be subtle, but are often more
expensive to the organization than the direct costs. These costs arise from the fact
that the two teams are quite different in background, skill set, and incentives. They
use different vocabulary to describe situations; they carry different assumptions about
both risk and possibilities for technical solutions; they have different assumptions
about the target level of product stability. The split between the groups can easily
become one of not just incentives, but also communication, goals, and eventually,
trust and respect. This outcome is a pathology.
Traditional operations teams and their counterparts in product development thus
often end up in conflict, most visibly over how quickly software can be released to
production. At their core, the development teams want to launch new features and
see them adopted by users. At their core, the ops teams want to make sure the service
doesn’t break while they are holding the pager. Because most outages are caused by
some kind of change—a new configuration, a new feature launch, or a new type of
user traffic—the two teams’ goals are fundamentally in tension.
Both groups understand that it is unacceptable to state their interests in the baldest
possible terms (“We want to launch anything, any time, without hindrance” versus
“We won’t want to ever change anything in the system once it works”). And because
their vocabulary and risk assumptions differ, both groups often resort to a familiar
form of trench warfare to advance their interests. The ops team attempts to safeguard
the running system against the risk of change by introducing launch and change
gates. For example, launch reviews may contain an explicit check for every problem
that has ever caused an outage in the past—that could be an arbitrarily long list, with
not all elements providing equal value. The dev team quickly learns how to respond.
They have fewer “launches” and more “flag flips,” “incremental updates,” or “cherry‐
picks.” They adopt tactics such as sharding the product so that fewer features are sub‐
ject to the launch review.
4 | Chapter 1: Introduction
Google’s Approach to Service Management:
Site Reliability Engineering
Conflict isn’t an inevitable part of offering a software service. Google has chosen to
run our systems with a different approach: our Site Reliability Engineering teams
focus on hiring software engineers to run our products and to create systems to
accomplish the work that would otherwise be performed, often manually, by
sysadmins.
What exactly is Site Reliability Engineering, as it has come to be defined at Google?
My explanation is simple: SRE is what happens when you ask a software engineer to