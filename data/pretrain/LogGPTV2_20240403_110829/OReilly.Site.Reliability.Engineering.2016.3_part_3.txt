### Preface

#### Reading and Navigation
This book is designed to be read cover-to-cover, but it is also structured in a way that allows for selective reading. The chapters are grouped thematically into three parts: **Principles** (Part II), **Practices** (Part III), and **Management** (Part IV). Each part begins with a brief introduction that outlines the key topics covered and provides references to additional articles by Google SREs for more in-depth exploration. For further resources, visit the companion website at [https://g.co/SREBook](https://g.co/SREBook).

We hope you find this book as useful and engaging as we did in creating it.

— The Editors

#### Conventions Used in This Book
The following typographical conventions are used throughout the text:

- **Italic**: New terms, URLs, email addresses, filenames, and file extensions.
- **Constant Width**: Program listings, and within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.
- **Constant Width Bold**: Commands or text that should be typed literally by the user.
- **Constant Width Italic**: Text that should be replaced with user-supplied values or context-specific values.

#### Using Code Examples
Supplemental material is available at [https://g.co/SREBook](https://g.co/SREBook).

This book is intended to help you in your work. You are generally free to use the example code provided without seeking permission, except when reproducing a significant portion of the code. For instance, using several code snippets from the book in your own program does not require permission. However, selling or distributing a CD-ROM containing examples from O’Reilly books does require permission. Similarly, incorporating a substantial amount of example code into your product’s documentation requires permission.

While attribution is appreciated, it is not required. A typical attribution includes the title, author, publisher, and ISBN. For example: "Site Reliability Engineering, edited by Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy (O’Reilly). Copyright 2016 Google, Inc., 978-1-491-92912-4."

If you believe your use of the code examples falls outside fair use or the permissions outlined above, please contact us at [permissions@oreilly.com](mailto:permissions@oreilly.com).

#### Safari® Books Online
Safari Books Online is an on-demand digital library offering expert content in both book and video form from leading authors in technology and business. Professionals in various fields, including software development, web design, and business, use Safari Books Online for research, problem-solving, learning, and certification training.

Safari Books Online offers a range of plans and pricing for enterprises, governments, educational institutions, and individuals. Members have access to thousands of books, training videos, and prepublication manuscripts from publishers such as O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, and many more. For more information, visit [Safari Books Online](https://www.safaribooksonline.com/).

#### How to Contact Us
For comments and questions about this book, please contact the publisher:
- **O’Reilly Media, Inc.**
- **Address**: 1005 Gravenstein Highway North, Sebastopol, CA 95472
- **Phone**: 800-998-9938 (in the United States or Canada)
- **Phone**: 707-829-0515 (international or local)
- **Fax**: 707-829-0104

You can also visit the book's web page at [http://bit.ly/site-reliability-engineering](http://bit.ly/site-reliability-engineering) for errata, examples, and additional information. For technical questions, email [bookquestions@oreilly.com](mailto:bookquestions@oreilly.com).

For more information about our books, courses, conferences, and news, visit [http://www.oreilly.com](http://www.oreilly.com). Follow us on social media:
- **Facebook**: [http://facebook.com/oreilly](http://facebook.com/oreilly)
- **Twitter**: [http://twitter.com/oreillymedia](http://twitter.com/oreillymedia)
- **YouTube**: [http://www.youtube.com/oreillymedia](http://www.youtube.com/oreillymedia)

#### Acknowledgments
This book would not have been possible without the tireless efforts of our authors and technical writers. We would like to thank the following internal reviewers for their valuable feedback: Alex Matey, Dermot Duffy, JC van Winkel, John T. Reese, Michael O’Reilly, Steve Carstensen, and Todd Underwood. Special thanks to Ben Lutch and Ben Treynor Sloss, who were the sponsors within Google, for their belief in this project and for sharing Google's experience in running large-scale services.

We also extend our gratitude to Rik Farrow, the editor of ;login:, for partnering with us on several pre-publication contributions via USENIX.

Each chapter acknowledges its specific authors, but we would like to recognize those who contributed by providing thoughtful input, discussion, and review. [List of contributors follows as in the original text.]

#### Part I: Introduction
This section provides high-level guidance on what SRE is and how it differs from conventional IT industry practices.

**Chapter 1: Introduction**
- **Written by**: Benjamin Treynor Sloss
- **Edited by**: Betsy Beyer

**Hope is not a strategy.**
—Traditional SRE saying

It is universally acknowledged that systems do not run themselves. So, how should a complex computing system, especially one operating at a large scale, be managed?

#### The Sysadmin Approach to Service Management
Historically, companies have relied on systems administrators (sysadmins) to manage complex computing systems. This approach involves assembling existing software components and deploying them to work together to provide a service. Sysadmins are responsible for running the service and responding to events and updates as they occur. As the system grows in complexity and traffic volume, the sysadmin team expands to handle the increased workload. Because the skill set required for sysadmins differs from that of developers, these roles are typically divided into separate teams: "development" and "operations" or "ops."

The sysadmin model has several advantages. It is relatively easy to implement, as there are many examples to learn from and a readily available talent pool. There are also numerous tools, software components, and integration companies to assist in running these systems, so a new sysadmin team doesn't need to start from scratch.

However, the sysadmin approach and the development/ops split come with disadvantages and pitfalls, which can be categorized into direct and indirect costs.

- **Direct Costs**: Running a service with a team that relies on manual intervention for change management and event handling becomes expensive as the service and traffic grow, as the team size must increase with the system load.
- **Indirect Costs**: These are often more subtle but can be more costly to the organization. They arise from the differences in background, skill set, and incentives between the two teams. Communication, goals, and eventually trust and respect can suffer, leading to conflict, particularly over the pace of software releases. Development teams want to launch new features, while ops teams focus on maintaining system stability. This tension can lead to a form of "trench warfare" where each team tries to safeguard their interests, often at the expense of the other.

#### Google’s Approach to Service Management: Site Reliability Engineering
Conflict is not inevitable in software service management. Google has adopted a different approach: our Site Reliability Engineering (SRE) teams hire software engineers to run our products and create systems to automate tasks that would otherwise be performed manually by sysadmins.

So, what exactly is Site Reliability Engineering at Google? My explanation is simple: SRE is what happens when you ask a software engineer to...