.text:005410C7  
jg      short second_loop1_begin 
.text:005410C9  
pop     edi 
.text:005410CA  
pop     esi 
.text:005410CB  
pop     ebp 
.text:005410CC  
pop     ebx 
.text:005410CD  
add     esp, 40h 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
755 
.text:005410D0  
retn 
.text:005410D0 rotate1          endp 
.text:005410D0 
.text:005410D1  
align 10h 
.text:005410E0 
.text:005410E0 ; ============ S U B R O U T I N E ========= 
.text:005410E0 
.text:005410E0 
.text:005410E0 rotate2       
proc near              
; CODE XREF: rotate_all_with_password+7A 
.text:005410E0 
.text:005410E0 internal_array_64= byte ptr -40h 
.text:005410E0 arg_0            
= dword ptr  4 
.text:005410E0 
.text:005410E0  
sub      esp, 40h 
.text:005410E3  
push     ebx 
.text:005410E4  
push     ebp 
.text:005410E5  
mov      ebp, [esp+48h+arg_0] 
.text:005410E9  
push     esi 
.text:005410EA  
push     edi 
.text:005410EB  
xor      edi, edi   
; loop1 counter 
.text:005410ED  
lea      ebx, [esp+50h+internal_array_64] 
.text:005410F1 
.text:005410F1 loc_5410F1:  
; CODE XREF: rotate2+2E 
.text:005410F1  
xor     esi, esi   
; loop2 counter 
.text:005410F3 
.text:005410F3 loc_5410F3:  
; CODE XREF: rotate2+25 
.text:005410F3  
push     esi       
; loop2 
.text:005410F4  
push    edi            
; loop1 
.text:005410F5  
push     ebp          
; arg_0 
.text:005410F6  
call     get_bit 
.text:005410FB  
add     esp, 0Ch 
.text:005410FE  
mov      [ebx+esi], al  
; store to internal array 
.text:00541101  
inc     esi       
; increment loop1 counter 
.text:00541102  
cmp     esi, 8 
.text:00541105  
jl     short loc_5410F3 
.text:00541107  
inc     edi       
; increment loop2 counter 
.text:00541108  
add     ebx, 8 
.text:0054110B  
cmp     edi, 8 
.text:0054110E  
jl     short loc_5410F1 
.text:00541110  
lea     ebx, [esp+50h+internal_array_64] 
.text:00541114  
mov     edi, 7      
; loop1 counter is initial state 7 
.text:00541119 
.text:00541119 loc_541119:  
; CODE XREF: rotate2+57 
.text:00541119  
xor     esi, esi  
; loop2 counter 
.text:0054111B 
.text:0054111B loc_54111B:  
; CODE XREF: rotate2+4E 
.text:0054111B  
mov      al, [ebx+esi]  
; get byte from internal array 
.text:0054111E  
push     eax 
.text:0054111F  
push     edi       
; loop1 counter 
.text:00541120  
push     esi       
; loop2 counter 
.text:00541121  
push     ebp       
; arg_0 
.text:00541122  
call     set_bit 
.text:00541127  
add      esp, 10h 
.text:0054112A  
inc      esi       
; increment loop2 counter 
.text:0054112B  
cmp     esi, 8 
.text:0054112E  
jl      short loc_54111B 
.text:00541130  
dec     edi       
; decrement loop2 counter 
.text:00541131  
add     ebx, 8 
.text:00541134  
cmp     edi, 0FFFFFFFFh 
.text:00541137  
jg     short loc_541119 
.text:00541139  
pop     edi 
.text:0054113A  
pop     esi 
.text:0054113B  
pop     ebp 
.text:0054113C  
pop      ebx 
.text:0054113D  
add      esp, 40h 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
756 
逆向工程权威指南（下册） 
.text:00541140  
retn 
.text:00541140 rotate2          endp 
.text:00541140 
.text:00541141  
align 10h 
.text:00541150 
.text:00541150 ; ============ S U B R O U T I N E =========== 
.text:00541150 
.text:00541150 
.text:00541150 rotate3  
proc near          
; CODE XREF: rotate_all_with_password+66 
.text:00541150 
.text:00541150 var_40           
= byte ptr -40h 
.text:00541150 arg_0            
= dword ptr  4 
.text:00541150 
.text:00541150  
sub     esp, 40h 
.text:00541153  
push     ebx 
.text:00541154  
push     ebp 
.text:00541155  
mov     ebp, [esp+48h+arg_0] 
.text:00541159  
push     esi 
.text:0054115A  
push     edi 
.text:0054115B  
xor     edi, edi 
.text:0054115D  
lea     ebx, [esp+50h+var_40] 
.text:00541161 
.text:00541161 loc_541161:  
; CODE XREF: rotate3+2E 
.text:00541161  
xor     esi, esi 
.text:00541163 
.text:00541163 loc_541163:  
; CODE XREF: rotate3+25 
.text:00541163  
push     esi 
.text:00541164  
push     ebp 
.text:00541165  
push     edi 
.text:00541166  
call    get_bit 
.text:0054116B  
add     esp, 0Ch 
.text:0054116E  
mov     [ebx+esi], al 
.text:00541171  
inc     esi 
.text:00541172  
cmp      esi, 8 
.text:00541175  
jl      short loc_541163 
.text:00541177  
inc     edi 
.text:00541178  
add      ebx, 8 
.text:0054117B  
cmp     edi, 8 
.text:0054117E  
jl      short loc_541161 
.text:00541180  
xor     ebx, ebx 
.text:00541182  
lea      edi, [esp+50h+var_40] 
.text:00541186 
.text:00541186 loc_541186:  
; CODE XREF: rotate3+54 
.text:00541186  
mov      esi, 7 
.text:0054118B 
.text:0054118B loc_54118B:  
; CODE XREF: rotate3+4E 
.text:0054118B  
mov      al, [edi] 
.text:0054118D  
push     eax 
.text:0054118E  
push     ebx 
.text:0054118F  
push     ebp 
.text:00541190  
push    esi 
.text:00541191  
call    set_bit 
.text:00541196  
add     esp, 10h 
.text:00541199  
inc     edi 
.text:0054119A  
dec     esi 
.text:0054119B  
cmp     esi, 0FFFFFFFFh 
.text:0054119E  
jg      short loc_54118B 
.text:005411A0  
inc     ebx 
.text:005411A1  
cmp      ebx, 8 
.text:005411A4  
jl      short loc_541186 
.text:005411A6  
pop      edi 
.text:005411A7  
pop     esi 
.text:005411A8  
pop     ebp 
.text:005411A9  
pop     ebx 
.text:005411AA  
add     esp, 40h 
.text:005411AD  
retn 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
757 
.text:005411AD rotate3          endp 
.text:005411AD 
.text:005411AE  
align 10h 
.text:005411B0 
.text:005411B0 ; ============ S U B R O U T I N E =========== 
.text:005411B0 
.text:005411B0 
.text:005411B0 rotate_all_with_password proc near  
; CODE XREF: crypt+1F 
.text:005411B0  
; decrypt+36 
.text:005411B0 
.text:005411B0 arg_0            
= dword ptr  4 
.text:005411B0 arg_4            
= dword ptr  8 
.text:005411B0 
.text:005411B0  
mov     eax, [esp+arg_0] 
.text:005411B4  
push     ebp 
.text:005411B5  
mov     ebp, eax 
.text:005411B7  
cmp      byte ptr [eax], 0 
.text:005411BA  
jz     exit 
.text:005411C0  
push     ebx 
.text:005411C1  
mov     ebx, [esp+8+arg_4] 
.text:005411C5  
push     esi 
.text:005411C6  
push    edi 
.text:005411C7 
.text:005411C7 loop_begin:  
; CODE XREF: rotate_all_with_password+9F 
.text:005411C7  
movsx    eax, byte ptr [ebp+0] 
.text:005411CB  
push     eax           ; C 