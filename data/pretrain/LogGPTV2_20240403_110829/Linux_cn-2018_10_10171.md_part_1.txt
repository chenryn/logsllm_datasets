---
author: Remy Sharp
category: 技术
comments_data:
- date: '2018-12-30 01:59:45'
  message: 超级使用，赞！
  postip: 210.30.193.134
  username: 来自210.30.193.134的 Chrome 71.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 9
  likes: 0
  sharetimes: 1
  viewnum: 11168
date: '2018-10-29 20:46:00'
editorchoice: true
excerpt: 下面就是我现在使用的用于增强原有命令行工具的列表。
fromurl: https://remysharp.com/2018/08/23/cli-improved
id: 10171
islctt: true
largepic: /data/attachment/album/201810/29/204617yz2aaxzfrlyc22nl.jpg
permalink: /article-10171-1.html
pic: /data/attachment/album/201810/29/204617yz2aaxzfrlyc22nl.jpg.thumb.jpg
related: []
reviewer: pityonline, wxy
selector: lujun9972
summary: 下面就是我现在使用的用于增强原有命令行工具的列表。
tags:
- 命令行
- 终端
thumb: false
title: 命令行：增强版
titlepic: true
translator: DavidChenLiang
updated: '2018-10-29 20:46:00'
---
![](/data/attachment/album/201810/29/204617yz2aaxzfrlyc22nl.jpg)
我不确定有多少 Web 开发者能完全避免使用命令行。就我来说，我从 1997 年上大学就开始使用命令行了，那时的 l33t-hacker 让我着迷，同时我也觉得它很难掌握。
过去这些年我的命令行本领在逐步加强，我经常会去搜寻工作中能用的更好的命令行工具。下面就是我现在使用的用于增强原有命令行工具的列表。
### 怎么忽略我所做的命令行增强
通常情况下我会用别名将新的增强的命令行工具覆盖原来的命令（如 `cat` 和 `ping`）。
如果我需要运行原来的命令的话（有时我确实需要这么做），我会像下面这样来运行未加修改的原始命令。（我用的是 Mac，你的用法可能不一样）
```
$ \cat # 忽略叫 "cat" 的别名 - 具体解释: https://stackoverflow.com/a/16506263/22617
$ command cat # 忽略函数和别名
```
### bat > cat
`cat` 用于打印文件的内容，如果你平时用命令行很多的话，例如语法高亮之类的功能会非常有用。我首先发现了 [ccat](https://github.com/jingweno/ccat) 这个有语法高亮功能的工具，然后我发现了 [bat](https://github.com/sharkdp/bat)，它的功能有语法高亮、分页、行号和 git 集成。
`bat` 命令也能让我在（多于一屏的）输出里使用 `/` 搜索（和用 `less` 搜索功能一样）。
![Simple bat output](/data/attachment/album/201810/29/204653xppy14y8y4zu6h7s.gif "Sample bat output")
我将别名 `cat` 指到了 `bat` 命令：
```
alias cat='bat'
```
* [安装指引](https://github.com/sharkdp/bat)
### prettyping > ping
`ping` 非常有用，当我碰到“糟了，是不是 X 挂了？/我的网不通了？”这种情况下我最先想到的工具就是它了。但是 `prettyping`（“prettyping” 可不是指“pre typing”）在 `ping` 的基础上加了友好的输出，这可让我感觉命令行友好了很多呢。
![prettyping](/data/attachment/album/201810/29/204655zcznq3x70xjexzv3.gif "Sample ping output")
我也将 `ping` 用别名链接到了 `prettyping` 命令：
```
alias ping='prettyping --nolegend'
```
* [安装指引](http://denilson.sa.nom.br/prettyping/)
### fzf > ctrl+r
在终端里，使用 `ctrl+r` 将允许你在命令历史里[反向搜索](https://lifehacker.com/278888/ctrl%252Br-to-search-and-other-terminal-history-tricks)使用过的命令，这是个挺好的小技巧，尽管它有点麻烦。
`fzf` 这个工具相比于 `ctrl+r` 有了**巨大的**进步。它能针对命令行历史进行模糊查询，并且提供了对可能的合格结果进行全面交互式预览。
除了搜索命令历史，`fzf` 还能预览和打开文件，我在下面的视频里展示了这些功能。
为了这个预览的效果，我创建了一个叫 `preview` 的别名，它将 `fzf` 和前文提到的 `bat` 组合起来完成预览功能，还给上面绑定了一个定制的热键 `ctrl+o` 来打开 VS Code：
```
alias preview="fzf --preview 'bat --color \"always\" {}'"
# 支持在 VS Code 里用 ctrl+o 来打开选择的文件
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"
```
* [安装指引](https://github.com/junegunn/fzf)
### htop > top
`top` 是当我想快速诊断为什么机器上的 CPU 跑的那么累或者风扇为什么突然呼呼大做的时候首先会想到的工具。我在生产环境也会使用这个工具。讨厌的是 Mac 上的 `top` 和 Linux 上的 `top` 有着极大的不同（恕我直言，应该是差的多）。
不过，`htop` 是对 Linux 上的 `top` 和 Mac 上蹩脚的 `top` 的极大改进。它增加了包括颜色输出，键盘热键绑定以及不同的视图输出，这对理解进程之间的父子关系有极大帮助。
一些很容易上手的热键：
* `P` —— 按 CPU 使用率排序
* `M` —— 按内存使用排序
* `F4` —— 用字符串过滤进程（例如只看包括 node 的进程）
* `space` —— 锚定一个单独进程，这样我能观察它是否有尖峰状态
![htop output](/data/attachment/album/201810/29/204657hnfne1peg857gtdq.jpg "Sample htop output")
在 Mac Sierra 上 htop 有个奇怪的 bug，不过这个 bug 可以通过以 root 运行来绕过（我实在记不清这个 bug 是什么，但是这个别名能搞定它，有点讨厌的是我得每次都输入 root 密码。）：
```
alias top="sudo htop" # 给 top 加上别名并且绕过 Sierra 上的 bug
```
* [安装指引](http://hisham.hm/htop/)
### diff-so-fancy > diff
我非常确定我是几年前从 Paul Irish 那儿学来的这个技巧，尽管我很少直接使用 `diff`，但我的 git 命令行会一直使用 `diff`。`diff-so-fancy` 给了我代码语法颜色和更改字符高亮的功能。
![diff so fancy](/data/attachment/album/201810/29/204658r8zajeo2b98ase4b.jpg "Sample diff output")
在我的 `~/.gitconfig` 文件里我用了下面的选项来打开 `git diff` 和 `git show` 的 `diff-so-fancy` 功能。
```
[pager]
    diff = diff-so-fancy | less --tabs=1,5 -RFX
    show = diff-so-fancy | less --tabs=1,5 -RFX
```
* [安装指引](https://github.com/so-fancy/diff-so-fancy)
### fd > find
尽管我使用 Mac，但我绝不是 Spotlight 的粉丝，我觉得它的性能很差，关键字也难记，加上更新它自己的数据库时会拖慢 CPU，简直一无是处。我经常使用 [Alfred](https://www.alfredapp.com/)，但是它的搜索功能也不是很好。
我倾向于在命令行中搜索文件，但是 `find` 的难用在于很难去记住那些合适的表达式来描述我想要的文件。（而且 Mac 上的 `find` 命令和非 Mac 的 `find` 命令还有些许不同，这更加深了我的失望。）