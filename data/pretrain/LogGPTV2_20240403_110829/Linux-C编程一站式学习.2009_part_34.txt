000034 00002a 00
off
所以是全0。off和size列指
一共0x38个字节，回去番
3 00002800
）00001008
Size
ES Flg
00
共320字
28
程
---
## Page 285
这个文件不大，我们直接用nexdump工具把目标文件的字节全部打印出来看。
0......8100..
0.0.0.100
E8.8.6.000
0x2b0
0x288
0x208
Oxc8
0....900
0....s100
000000f01f 00 ０0
000020
0x98
0....0
00000130'
012..
000100'
.....0
00000080
0........0
_00000000
0
C
·
a
0........
0...P?.
00.....
0.......
0....!!.
0!..!.!!.
0.......
.strtab
Section Header Table
.rel.text
.symtab
2e
.9
。
3
0000０0０000
0000０0０000
0０38００００00
0001
00（
0０00００００00
0000０0０000
002a000000
000100０000
0000０0０000
 2e
2e
74
004b
00
3 f8 00 74 1047
o bf oo o oo
0000０0０000
62
72
01
72
43
c3
：000000
：000000
737300
746162
：000000
000000
eb
65
 6c
eb
2e
 b8
）00000000０0000000
0000000000000000
０〇：０〇０〇０〇０〇０〇０〇：０0
040０0000０00０0000
9８：０００００００００００００0
2b０0００0０0８00００00
03000000０0000000
０40０0０0００8００0０00
bo：02：0000１0:00:00:00
１b：００００００：０9：００：００:０0
00０0００0０00０0００00
06０0００0０00０0０000
0000000000000000
74 65 78 74 00 2e646
00 2e 73 68 73 74 72 7
00 2e 73 79 6d 74 61 62
16：０0０0０00b０0０0０0
0１ ００ ００ ００ cd ８0 ００ ０0
 00 8b 04 bd 00 00 00 00
3600000022000000
22 000000de000000
8b 04 bd 00 00 00 00 39
3400000000002800
9
T
---
## Page 286
.shstrtab和.strtab这两个Section中存放的都是ASCll码：
址0x080490a0~0x080490d7。
:data段将被原封不动地加载到内存中，下一小节会看到.data段被加载到内存地
的字符。中间有一
左边一列是文件地址,
00 00 00 00 00 0......0.00..0
0.
0000060
.08000.0
0.......0
?......?0.0
0.........
......0
0..0.8..0FT000
.......100
0......PT0...
00 00 00 00 00 0...........0
000002c0'
..s.0
00000220
!!...!.....
000001b00100000000000000：01000000：02：0000：00
ta..bss.........!
0300000０43000000
0........
0...0.
61
，中间是每个字节的十六进制表示，
it
002e 72 65 6c 2e 74 65 78 74 00 2e64 61
37472746162002e736873747274
0073
0010000100
0000０0０100
）０００００００１００
）０００００００００
0003
0003
0003
００００００００００（
0000０0００00
0028００００00
0003
0007000000
6746172
3000400
00
3000100
000000
03
00
00 2e 73 79 6d 74 61 62
）１6：0000:00:０b:0000:０0
36００００００2２００００００
）22000000de000000
）1700000001020000
005f 73 74 61 72 74 00
74 5f 6c 6f 6f 70 00 6c
１7:００ ００ ００ ２3００ ００：:００
0c000000０000000
０００００００００００００００0
００：００００００００００００００
00000000０0000000
0400000010000000
０８：０２００００ ８０００００００
00 64 61 74 61 5f 69 74
21 0000000000０000
01０0０0000000０000
00
00000000０0000000
00００00０0０0００00
，右边是把这些字节解释成ASCI码所对应
286
---
## Page 287
反汇编的结果是否跟原来写的汇编代码一模一样呢？我们对比分析一
现在剩下.text段没有分析，
号是GLOBAL的，而其它符号是LOCAL的，GLOBAL符号是在汇编程序中用.glob1指示声明过的符号。
.rel.text告诉链接器指令中的哪些地方需要做重定位，
于.data段的开头，
·symtab是符号表。Ndx列是每个符号所在的Section编号，
中没有用到.bss段，
没有对应的Section，
（也就是.data段)
部分空间保存初始值，
我们知道，
是以结尾的字符串。
Disassembly of section .text:
$ objdump -d max.o
max.o:
No version information found in this file.
Symbol table 
There are no unwind sections in this file.
00000017
00000008
offset 
在加载时它和.data段一样都是可读可写的数据，但是在ELF文件中.data段需要占用一
，C语言的全局变量如果在代码中没有初始化，
 Num:
00000000
00000023
00000000
00000000
00000000
00000000
00000000
所以地址是0，
000000oe
 符号地址都是相对于该符号所在Section的相对地址,
00000201
，在第3节“变量的存储布局"会看到这样的例子。
65
file format elf32-i386
各Section的编号见Section Header Table。Value列是每个符号所代表的地
Value
Info
6d
'.symtab'
'.rel.text' at offset 0x2b0 contains 2 entries:
00 73 74 61 72 74 5f 6c 6f 6f 70 00 6c
 Type
0
C
0
0
0
Q
NOTYPE
 contains 8 entries:
386
NOTYPE
SECTION
SECTION
NOTYPE
SECTION
 GLOBAL DEFAULT
LOCAL
LOCAL
LOCAL
LOCAL
LOCAL
LOCAL
00646174615f6974
 Sym.Value
00000000
00000000
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
DEFAULT
Vis
，在下一小节详细讨论。
，就会在程序加载时用0初始化。
所以地址也是0，
 Sym. Name
 Ndx Name
UND
.data
>
下
_start
但
 这种数据属
---
## Page 288
现在我们按上一节的步骤分析可执行文件max，
5.2.可执行文件 请点评
载时的内存地址，
所有指
分
注意没有加s的数表示内存地址，
左边是机器指令的字节，
旨令中用到的符号地址都是相对地址，
Section Headers:
00000000 :
0
0
Lk
Section header string table
Machine:
Type:
class:
[Nr]
Number 
S
Version:
N
D
Magic:
lags:
５
30
0
 Header:
.data
of
.shstrtab
0
P.8
83
8
bf
这些指令才能正确执行。
this header:
7f 45
c3
04
A
4
10
0
 section 
：bd ０0000００0
右边是反汇编结果。
0
am
 4C460101 01000000０00000０0０0:０0
0
headers:
headers:
 headers:
0000
STRTAB
NULL
PROGBITS
PROGBITS
Type
 index:
T-
显然，
一步链接器要修改这些指令，
看看链接器都做了什么改动。
mov
EXEC (Executable file)
0x0
ELF32
3
40
5
's complement,
2
所有的符号都被替换成地址了,
(current)
e
$0x0,%eax
%eax,%ebx
(874ag)
$0x1
0x0(,%edi,4),%eax
$0x0,%edi
0
0000000000000000000000
Addr
(bytes)
(byessi
x
000000000000d8000027
080490a0 0000a0 000038 
0804807400007400002a00
Q
，写在后面是为了有更好的可读性。目
start_loop>
Off
 little
Size
把其中的地址都改成加
e endian
00
ES
00
比如je 23,
 Flg
888
前
部
---
## Page 289
小。在加载时文件也要按内存页面大小分成若干页，
二个Segment的访问权限是可读可写。最后一
址Ox08048000（注意在x86平台上后面的physAddr列是没有意义的，并不代表实际的物理地址）
组成另一
多出来的Program Header Table描述了两个Segment的信息。
的，
了0x08048074和0x080490a0。:
在Section Header Table中,
个Section Header.
在
图所示。
EELF Header中
做完链接就没用了，
No version information found in this file.
Symbol table 
There are no unwind sections in this file.
There are no relocations in this file.
There 
0x1000
Program Headers:
There are no section groups in this file.
Section to Segment mapping:
specific)
0
5
 Num:
Type
00
(info),
to
0