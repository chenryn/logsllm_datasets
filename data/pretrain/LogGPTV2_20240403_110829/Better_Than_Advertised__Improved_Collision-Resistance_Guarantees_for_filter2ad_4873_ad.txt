2 and |u| may not be divisors of |hu.Out| and that S may not be
“nicely” distributed in Z|hu .Out|, but for any reasonable choice of
hu.Out and S this should not be an issue.
For our theorems we have assumed that we were given a pair
M1, M2 such that Split(M1) ⊒ Split(M2). It is not difficult to come
up with (contrived) splitting functions which are not suffix-free, but
for which we believe it is computationally difficult to find such a pair.
We chose our formalization that M1 and M2 are a priori known
because, for specific, prior splitting functions, either they were
suffix-free, or it was trivially easy to find M1 and M2 violating suffix-
freeness. An alternative way to address this would be to make suffix-
freeness a computational condition, and then say that, given an
adversary returning M1 and M2 violating suffix-freeness with high
probability, we build our compression function and adversary. (Of
course, one might then ask about finding the adversary, analogous
to keyless collision resistance, but the philosophical position would
at least seem on par with prior ones.)
k
((m′, c′)).
k
k
((m, c)) and y′ = hu
Proof. (of Theorem 5.6) The basic structure of this proof closely
follows that of the proof for Proposition 5.5. Throughout this proof
for a string c we will let bc , qc , rc denote the corresponding values
used by hu on input (m, c) for some c.
((m, c)) = hu
To start, we will show that any collision for hu is also a collision
((m′, c′)) it either holds that
for f by proving that if hu
(m, c) = (m′, c′) or that fk((m, c)) = fk((m′, c′)). As such, suppose
k
((m′, c′)).
((m, c)) = hu
hu
k
Note that the first return statement of hu always outputs a tuple
whose first element is 1 while the second always outputs a tuple
whose first element is 0. We will consider these two cases separately.
Let y = hu
Let us first suppose that y[1] = 0. This means that qc = qc′
k
and rc + 1 = rc′ + 1 (mod |u|). The if statement in hu must have
evaluated to true on both inputs so we have bc = 1 = bc′ and
m = u[rc + 1] = u[rc′ + 1] = m′. Putting this all together, we have
shown that (m, c) = (m′, c′).
Now consider the other case when y[1] = 1. Then we have that
fk((m, c)) = fk((m′, c′)).
adversary Ait must hold that Advcr
To prove our statement about the advantage of B we will make
use of Lemma 5.4 and bound the probability that HI(k,s)(u) = s over
the random choice of s (where HI is defined as in the lemma).
Suppose s is of the form (0, q, 0) for some q ∈ Za. Let c be the
vector of values that would have been obtained in the computation
((u[i], c[i])) for
of HI(k,s)(u); that is, let c[1] = s and c[i + 1] = hu
i = 1, . . . , |u|.
Following the code of hu we can see that the if statement will
always return true in this computation, and so c[i] = (0, q, i) for
i = 1, . . . , |u| and then c[|u| + 1] = (0, q, 0) = s. The latter is the
value returned by HI so HI(k,s)(u) = s as desired and the pair M1, M2
is a collision for H.
Then the advantage of B is bounded by the probability that s is
of the form (0, q, 0) which is exactly 1/(2|u|).
□
Because any collision for hu is also a collision for f, for any
h (A) ≤ Advcr
f (A).
k
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA897((m, c))
hs
k
If c[1] = s[1] then return s[1]∥h′
Return s
k
((m, c[2...|c |]))
Adversary Ah′(k, ε)
s ←$ S ; (M1, M2) ← AH((k, s), ε)
((m1, c1), (m2, c2)) ← Bcr((k, s), M1, M2)
Return ((m1, c1[2...|c1|]), (m2, c2[2...|c2|]))
Figure 7: hs
sition 6.3
k for Proposition 6.1, Proposition 6.2, and Propo-
Figure 8: Adversary Ah′ for the proof of Proposition 6.3
6 WEAKENING ASSUMPTIONS ON H
In this section we improve on the classic result that the collision
resistance of h guarantees that H will be collision resistant. In par-
ticular, we will explore the possibility of weakening the assumption
made of h and provide a natural, less stringent variation of collision
resistance from which we are able to assure the collision resistance
of h obtained via the MD transform.
Using a non-CR h. We have shown that the collision resistance
of the compression function h implies the collision resistance of
the hash function H obtained by the MD transform. However, the
collision resistance of H may not always rely on h being collision
resistant. We will show by construction that H can be collision
resistant even when h is not.
: h′.Keys ×
({0, 1}b × {0, 1}c) → {0, 1}c and some s ∈ {0, 1}c +1, we construct
the compression function hs : h′.Keys × ({0, 1}b × {0, 1}c +1) →
{0, 1}c +1 shown in Fig. 7. Let Split be a suffix-free splitting function
with Split.Bl = h.Bl and define the set of starting points by S = {s}.
Let H = MD[hs, Split, S] be the hash function associated to these
components via the MD transform of Fig. 2. We will think of h′
as being a good collision resistant compression function. Then we
will show that while hs is a poor collision resistant compression
function, H nonetheless remains a good collision resistant hash
function.
Let b, c ∈ N. Given a compression function h′
The idea motivating our construction of hs should be clear. Cre-
ating a collision for hs is trivial by making the if statement evaluate
to false. However, when hs is used inside of the MD transform with
s as a starting point, this case will never occur.
Proposition 6.1. Let M1 = (0b , s), M2 = (1b , s), and B be the
adversary shown in Fig. 6. Then Advcr
hs(B) = 1.
Put simply, the above tells us that hs is not collision resistant
because B is clearly efficient.
Proof. (of Proposition 6.1) When we compute hs
k
(M1) = hs
(M1), we see
that s[1] (cid:44) s[1], so s is returned. Similarly, s is returned when we
(M2). Thus,
compute hs
k
hs is not collision resistant.
□
(M2). Notice that M1 (cid:44) M2 yet hs
k
k
The following proposition is a useful stepping stone for showing
that H is collision resistant if h′ is.
Proposition 6.2. Let k ∈ h′.Keys. Then for each iteration of hs
k
in the computation of Hk, hs
k never returns s.
Proof. (of Proposition 6.2) Fix M ∈ Split.Inp and let m, c be the
vectors computed by Hk(M). Suppose, for a contradiction, that for
(m[i], c[i]) = s and let d = s[1]. Note then
some i from 1 to |m|, hs
the first bit of c[i] must be d because the if statement in hs
k must
k
have evaluated to false. Essentially the same reasoning implies the
first bit of c[i − 1] is d.
this contradicts the fact that c[1] = s, so hs
We can continue this argument for each i back to 1. However,
□
k never returns s.
Proposition 6.3. Given an adversary AH, let Ah′ be the adversary
of Fig. 8. Then
Advcr
H(AH) ≤ Advcr
h′(Ah′).
(2)
The time complexity of Ah is the sum of the time complexities of
AH and Bcr. The memory complexity of Ah is the maximum of the
memory complexity of AH and the memory complexity of Bcr.
Notice that Equation (2) tells us that if h′ is collision resistant,
then H is as well. Let AH be a practical adversary against H. Then
Ah′ is also practical because its efficiency is about that of AH. This
means that if h′ is collision resistant, Advcr
h′(Ah′) is low. Equation (2)
h′(Ah′), which means
tells us that Advcr
H is also collision resistant.
H(AH) will be at most Advcr
Proof. (of Proposition 6.3) The facts about the time and memory
of Ah′ are clear from its pseudocode.
Now we claim that if the message pair M1, M2 returned by AH is a
collision for H(k,s) then Ah′ will return a collision for h′
k. Adversary
Ah′ takes input k ∈ h.Keys. It then runs AH on input ε given key
(k, s) to get a pair of messages (M1, M2) in Split.Inp. Then it runs
Bcr to obtain a pair of inputs to h, which we will refer to as (m1, c1)
and (m2, c2). It then returns these (after removing the first bits of
c1 and c2).
Suppose M1, M2 is a collision for H(k,s). Since Split is suffix-
free, Split(M1) (cid:65) Split(M2) and Split(M2) (cid:65) Split(M1). Then by
Lemma 5.2, we know that Bcr will have returned a collision for hs
k .
((m1, c1)) (cid:44) s and
From Proposition 6.2 we also know that hs
((m2, c2)) (cid:44) s. Then it must be the case that they cause the if
k
hs
statement in hs to evaluate to true and so h′
((m1, c1[2...|c1|])) =
k
h′
((m2, c2[2...|c2|])). Furthermore, (m1, c1) (cid:44) (m2, c2) and c1[1] =
c2[1] = s[1], so (m1, c1[2...|c1|]) (cid:44) (m2, c2[2...|c2|]) and thus they
form a collision for h′
k.
k whenever AH
does for H(k,s). This justifies Equation (2), completing the proof. □
Therefore, adversary Ah′ finds a collision in h′
k
k
Defining a new constraint for CR. The previous example es-
tablished that traditional definitions of collision resistance with the
MD transform do not fully capture the security behind the con-
struction. Although the compression function h used to construct
the hash function H was not collision resistant, we were still able
to prove the collision resistance of H.
An obvious question at this point is whether there is a natural,
weaker assumption we could place on h from which we can still
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA898prove H is collision resistant. We answer this in the affirmative
with a new security definition in the RS security framework. For
this, we now define a new relation which is strictly harder for the
adversary to satisfy than Rcr, making it a weaker assumption on
h. Despite this, we can recover our result that the MD transform
is fully collision resistant under the assumption that h is RcrS se-
cure for any suffix-free splitting function. We call our new security
definition constrained collision resistance, or Rccr, and provide the
pseudocode for the relation below. We previously defined Rccr in
Fig. 1.
Relation Rccr(k, s, out)
(x1, x2, a1, a2) ← out ; (m1, c1) ← x1 ; (m2, c2) ← x2
coll ← Rcr(k, ε,((m1, c1),(m2, c2)))
valid ← ((c1 ∈ {s, hk(a1)}) and (c2 ∈ {s, hk(a2)}))
Return (coll and valid)
This relation makes the adversary’s job harder than for collision
resistance by putting further restrictions of the collisions it is al-
lowed to submit. In particular, it requires that for both chaining
variables in the collision submitted by the adversary, this chaining
variable must be s or the adversary must know a pre-image for it.
Now we proceed to proving that the MD transform gives a colli-
sion resistant hash function if the splitting function is suffix-free
and the compression function is constrained-collision resistant.
This result helps provide some theoretical understanding to the
observation that collisions in the compression functions underly-
ing MD-style hash functions tend not to immediately result in the
entire hash function being broken.
Theorem 6.4. Let h be a compression function, let Split be a suffix-
free splitting function with Split.Bl = h.Bl and let S ⊆ h.Out be a
set of possible starting points. Let H = MD[h, Split, S] be the hash
function associated to these components via the MD transform of
Fig. 2. Given an adversary AH, let Ah be the adversary of Fig. 9 using
algorithm Bccr. Then
Advcr
H(AH) ≤ AdvRccrS