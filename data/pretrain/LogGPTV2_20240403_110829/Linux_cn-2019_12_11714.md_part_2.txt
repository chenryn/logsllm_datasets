```
这段代码产出了多余的信息。当循环结束后，下一步就是提取出白痴老板需要的信息。因此，添加一个 `egrep` 命令用来搜索匹配 `^Name` 或 `^Summary` 的行。脱字符（`^`）表示行首，整个命令表示显示所有以 Name 或 Summary 开头的行。
```
[student@studentvm1 testdir]$ for RPM in `rpm -qa | sort | uniq` ; do rpm -qi $RPM ; done | egrep -i "^Name|^Summary"
Name        : a2ps
Summary     : Converts text and other types of files to PostScript
Name        : aajohan-comfortaa-fonts
Summary     : Modern style true type font
Name        : abattis-cantarell-fonts
Summary     : Humanist sans serif font
Name        : abiword
Summary     : Word processing program
Name        : abrt
Summary     : Automatic bug detection and reporting tool
&lt;snip&gt;
```
在上面的命令中你可以试试用 `grep` 代替 `egrep` ，你会发现用 `grep` 不能得到正确的结果。你也可以通过管道把命令结果用 `less` 过滤器来查看。最终命令像这样：
```
[student@studentvm1 testdir]$ for RPM in `rpm -qa | sort | uniq` ; do rpm -qi $RPM ; done | egrep -i "^Name|^Summary" > RPM-summary.txt
```
这个命令行程序用到了管道、重定向和 `for` 循环，这些全都在一行中。它把你的 CLI 程序的结果重定向到了一个文件，这个文件可以在邮件中使用或在其他地方作为输入使用。
这个一次一步构建程序的过程让你能看到每步的结果，以此来确保整个程序以你期望的流程进行且输出你想要的结果。
白痴老板最终收到了超过 1900 个不同的 RPM 包的清单，我严重怀疑根本就没人读过这个列表。我给了他们想要的东西，没有从他们嘴里听到过任何关于 RPM 包的信息。
### 其他循环
Bash 中还有两种其他类型的循环结构：`while` 和 `until` 结构，两者在语法和功能上都类似。这些循环结构的基础语法很简单：
```
while [ expression ] ; do list ; done
```
逻辑解释：表达式（`expression`）结果为 true 时，执行程序语句 `list`。表达式结果为 false 时，退出循环。
```
until [ expression ] ; do list ; done
```
逻辑解释：执行程序语句 `list`，直到表达式的结果为 true。当表达式结果为 true 时，退出循环。
#### While 循环
`while` 循环用于当逻辑表达式结果为 true 时执行一系列程序语句。假设你的 PWD 仍是 `~/testdir`。
最简单的 `while` 循环形式是这个会一直运行下去的循环。下面格式的条件语句永远以 `true` 作为返回。你也可以用简单的 `1` 代替 `true`，结果一样，但是这解释了 true 表达式的用法。
```
[student@studentvm1 testdir]$ X=0 ; while [ true ] ; do echo $X ; X=$((X+1)) ; done | head
0
1
2
3
4
5
6
7
8
9
[student@studentvm1 testdir]$
```
既然你已经学了 CLI 的各部分知识，那就让它变得更有用处。首先，为了防止变量 `$X` 在前面的程序或 CLI 命令执行后有遗留的值，设置 `$X` 的值为 0。然后，因为逻辑表达式 `[ true ]` 的结果永远是 1，即 true，在 `do` 和 `done` 中间的程序指令列表会一直执行 — 或者直到你按下 `Ctrl+C` 抑或发送一个 2 号信号给程序。那些程序指令是算数扩展，用来打印变量 `$X` 当前的值并加 1.
《[系统管理员的 Linux 哲学](https://www.apress.com/us/book/9781484237298)》的信条之一是追求优雅，实现优雅的一种方式就是简化。你可以用操作符 `++` 来简化这个程序。在第一个例子中，变量当前的值被打印出来，然后变量的值增加了。可以在变量后加一个 `++` 来表示这个逻辑：
```
[student@studentvm1 ~]$ X=0 ; while [ true ] ; do echo $((X++)) ; done | head
0
1
2
3
4
5
6
7
8
9
```
现在删掉程序最后的 `| head` 再运行一次。
在下面这个版本中，变量在值被打印之前就自增了。这是通过在变量之前添加 `++` 操作符实现的。你能看出区别吗？
```
[student@studentvm1 ~]$ X=0 ; while [ true ] ; do echo $((++X)) ; done | head
1
2
3
4
5
6
7
8
9
```
你已经把打印变量的值和自增简化到了一条语句。类似 `++` 操作符，也有 `--` 操作符。
你需要一个在循环到某个特定数字时终止循环的方法。把 true 表达式换成一个数字比较表达式来实现它。这里有一个循环到 5 终止的程序。在下面的示例代码中，你可以看到 `-le` 是 “小于或等于” 的数字逻辑操作符。整个语句的意思：只要 `$X` 的值小于或等于 5，循环就一直运行。当 `$X` 增加到 6 时，循环终止。
```
[student@studentvm1 ~]$ X=0 ; while [ $X -le 5 ] ; do echo $((X++)) ; done
0
1
2
3
4
5
[student@studentvm1 ~]$
```
#### Until 循环
`until` 命令非常像 `while` 命令。不同之处是，它直到逻辑表达式的值是 `true` 之前，会一直循环。看一下这种结构最简单的格式：
```
[student@studentvm1 ~]$ X=0 ; until false  ; do echo $((X++)) ; done | head
0
1
2
3
4
5
6
7
8
9
[student@studentvm1 ~]$
```
它用一个逻辑比较表达式来计数到一个特定的值：
```
[student@studentvm1 ~]$ X=0 ; until [ $X -eq 5 ]  ; do echo $((X++)) ; done
0
1
2
3
4
[student@studentvm1 ~]$ X=0 ; until [ $X -eq 5 ]  ; do echo $((++X)) ; done
1
2
3
4
5
[student@studentvm1 ~]$
```
### 总结
本系列探讨了构建 Bash 命令行程序和 shell 脚本的很多强大的工具。但是这仅仅是你能用 Bash 做的很多有意思的事中的冰山一角，接下来就看你的了。
我发现学习 Bash 编程最好的方法就是实践。找一个需要多个 Bash 命令的简单项目然后写一个 CLI 程序。系统管理员们要做很多适合 CLI 编程的工作，因此我确信你很容易能找到自动化的任务。
很多年前，尽管我对其他的 Shell 语言和 Perl 很熟悉，但还是决定用 Bash 做所有系统管理员的自动化任务。我发现，有时稍微搜索一下，我可以用 Bash 实现我需要的所有事情。
---
via: 
作者：[David Both](https://opensource.com/users/dboth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[lxbwolf](https://github.com/lxbwolf) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出