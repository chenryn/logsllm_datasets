---
title: Geospatial data visualizations
description: Learn how to visualize geospatial data.
ms.reviewer: mbrichko
ms.topic: reference
ms.date: 12/18/2022
---
# Geospatial visualizations
Geospatial data can be visualized using the [render operator](render-operator.md) in [Kusto Desktop Explorer](../tools/kusto-explorer-using.md) or the [Azure Data Explorer web UI](../../web-query-data.md). To download Kusto Desktop Explorer, see [Kusto.Explorer installation and user interface](../tools/kusto-explorer.md).
For more information about visualization options, see [Data visualization with Azure Data Explorer](../../viz-overview.md). For more information about geospatial clustering, see [Geospatial clustering](geospatial-grid-systems.md).
## Visualize points on a map
It's possible to visualize points either using [Longitude, Latitude] columns, or GeoJSON column. The use of a series column is optional. Each point is defined by [Longitude, Latitude] pair, in that order.
### Example: Visualize points on a map
```kusto
StormEvents
| take 100
| project BeginLon, BeginLat
| render scatterchart with (kind = map)
```
:::image type="content" source="media/geo-visualizations/storm-events-sample.png" alt-text="Screenshot of sample storm events on a map.":::
### Example: Visualize multiple series of points on a map
To visualize multiple series of points, each point is defined by a [Longitude, Latitude] pair, and the series is defined by a third column. In this example, the series is `EventType`.
```kusto
StormEvents
| take 100
| project BeginLon, BeginLat, EventType
| render scatterchart with (kind = map)
```
:::image type="content" source="media/geo-visualizations/storm-events-series-sample.png" alt-text="Screenshot of sample storm series events on a map.":::
### Example: Visualize series of points on data with multiple columns
If you have multiple columns in the result, you must specify the columns to be used for xcolumn (Longitude), ycolumn (Latitude), and series.
```kusto
StormEvents
| take 100
| render scatterchart with (kind = map, xcolumn = BeginLon, ycolumns = BeginLat, series = EventType)
```
:::image type="content" source="media/geo-visualizations/storm-events-series-sample.png" alt-text="Screenshot of sample storm series events using arguments.":::
### Example: Visualize points on a map defined by GeoJSON dynamic values
In this example, the points are defined by GeoJSON dynamic values.
```kusto
StormEvents
| project BeginLon, BeginLat
| summarize by hash=geo_point_to_s2cell(BeginLon, BeginLat, 5)
| project geo_s2cell_to_central_point(hash)
| render scatterchart with (kind = map)
```
:::image type="content" source="media/geo-visualizations/storm-events-s2cell.png" alt-text="Screenshot of sample storm GeoJSON events.":::
## Visualization of pies or bubbles on a map
You can visualize pies or bubbles either using [Longitude, Latitude] columns or GeoJSON column. These visualizations can be created with color or numeric axes.
### Example: Visualize pie charts by location
The following example shows storm events aggregated by s2 cell. The chart aggregates events in pie charts by location.
```kusto
StormEvents
| project BeginLon, BeginLat, EventType
| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)
| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)
| project geo_s2cell_to_central_point(hash), EventType, count_
| render piechart with (kind = map) // pie map rendering available only in Kusto Explorer desktop
```
:::image type="content" source="media/geo-visualizations/storm-events-pie.png" alt-text="Screenshot of storm events on a pie map.":::
### Example: Visualize bubbles using a color axis
The following example shows storm events aggregated by s2 cell. The chart aggregates events in bubble by location. The color-axis ("count") is the same for all events, and this is why bubbles are generated by the `render` operator.
```kusto
StormEvents
| project BeginLon, BeginLat, EventType
| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)
| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)
| project geo_s2cell_to_central_point(hash), count_
| extend Events = "count"
| render piechart with (kind = map) // pie map rendering available only in Kusto Explorer desktop
```
:::image type="content" source="media/geo-visualizations/storm-events-bubble.png" alt-text="Screenshot of storm events on a bubble map.":::
## Related content
* [Geospatial clustering](geospatial-grid-systems.md)
* [Render operator](render-operator.md)
* See a use case for geospatial clustering: [Data analytics for automotive test fleets](/azure/architecture/industries/automotive/automotive-telemetry-analytics)
* Learn about Azure architecture for [geospatial data processing and analytics](/azure/architecture/example-scenario/data/geospatial-data-processing-analytics-azure)