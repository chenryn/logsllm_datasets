





Figure 2. Tor hidden services Ô¨Ångerprints circular list
directories change periodically. The replica index is used to
create different descriptors identiÔ¨Åers so that the descriptor
is distributed to different parts of the Ô¨Ångerprint range.
After computing the descriptor identiÔ¨Åers, a hidden ser-
vice determines which directory nodes are responsible for
storing the descriptor replicas. To do this the hidden service
arranges the directories using their Ô¨Ångerprints in a closed
Ô¨Ångerprint circle and chooses as hidden service directories
the three closest relays in positive direction (Ô¨Ångerprint value
of them is greater than the Ô¨Ångerprint value of the hidden
service).
According to the current Tor implementation, a hidden
service generates and publishes two replicas of its descriptor
which results in 2 sets of 3 hidden service directories with
consecutive Ô¨Ångerprints.
As an example, consider the circle of Ô¨Ångerprints depicted
in Figure 2 and assume that one of the hidden service
descriptor IDs is between Ô¨Ångerprints of relays HSDirk‚àí1
and HSDirk. In this case the hidden service directories
serving the descriptor are relays with Ô¨Ångerprints HSDirk,
HSDirk+1, and HSDirk+2. The Ô¨Ångerprint of HSDirk is the
Ô¨Årst following the descriptor ID. We call this HSDir relay the
Ô¨Årst responsible hidden service directory for the descriptor
ID.
The list of all Tor relays is distributed by the Tor author-
ities in the consensus document. The consensus is updated
once an hour by the directory authorities and remains valid
for three hours. Every consensus document has a ‚Äúvalid-
after‚Äù (VA) time, a ‚Äúfresh-until‚Äù (FU) time and a ‚Äúvalid-
until‚Äù (VU) time. The ‚Äúvalid-after‚Äù timestamp denotes the
time at which the Tor authorities published the consensus
document. The consensus is considered fresh for one hour
(until ‚Äúfresh-until‚Äù has passed) and valid for two hours
more (until ‚Äúvalid-until‚Äù has passed). According to the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
current implementation clients download the next consensus
document in (FU + 45 mins; VU - 10 mins) interval.
D. Guard nodes
Being a low-latency anonymity network Tor is vulnerable
to the trafÔ¨Åc conÔ¨Årmation attacks:
if an adversary can
monitor the edges of a Tor circuit, she can conÔ¨Årm who is
communicating. This is quite dangerous for hidden services
since by design the attacker always controls one edge of the
connection. If the entry nodes of the circuit were chosen
uniformly from the whole set of Tor relays, the probability
of the attack would approach 1 when the number of circuits
to the hidden service established by the attacker increased.
In order to signiÔ¨Åcantly reduce the probability of the
trafÔ¨Åc conÔ¨Årmation attack Tor developers introduced the
concept of entry guard nodes. Tor initially selects a set of
three guard nodes. Whenever less than two guard nodes from
the set are reachable, new guard nodes are chosen. A guard
node remains in the set for a random duration between 30
and 60 days. Then it is marked as expired and removed from
the set. Whenever a circuit is established, one node from the
set of Guard nodes is used for the Ô¨Årst hop.
IV. FLAGS AND BANDWIDTH INFLATION
According to the current Tor speciÔ¨Åcation, the maximum
number of Tor relays on a single IP address that Tor
authorities include to the Consensus document is 2. This
restriction is enforced by the directory authorities when
they cast their votes for the consensus. If more than two
relays are running on the same IP address, only two relays
with the highest-most measured bandwidth will appear in
the consensus document. This prevents an attacker from
performing the Sybil attack described by Bauer et al. [2],
in which an attacker Ô¨Çoods the network with dummy Tor
relays.
However, by inspecting the Tor source code we noticed
that while only two relays per IP appear in the Consensus,
all running relays are monitored by the authorities; more
importantly, statistics on them is collected, including the
uptime which is used to decide which Ô¨Çags a relay will
be assigned.
We call relays appearing in the consensus active relays
and those which run at the same IP address but do not
appear in the consensus shadow relays. Whenever one of
the active relays becomes unreachable and disappears from
the consensus, one of the shadow relays becomes active, i.e.
appears in the consensus. Interestingly, this new active relay
will have all the Ô¨Çags corresponding to its real run time and
not to the time for which it was in the consensus. We call
this technique shadowing.
The path selection algorithm of Tor selects nodes at
random, with a probability proportional to the bandwidth
advertised for the node in the consensus document. Hence
it
to an attacker to artiÔ¨Åcially inÔ¨Çate the
is of interest
bandwidth of her nodes, in order to increase the chance of
of them being included in the path (note that although some
of the attacks presented in this paper have been made more
efÔ¨Åcient using bandwidth inÔ¨Çation they by no means depend
it).
Originally, directory authorities announced self-reported
bandwidth values of the relays in the consensus document.
The general concept of bandwidth inÔ¨Çation was Ô¨Årst ex-
ploited in [19] to make attacks against hidden services more
efÔ¨Åcient; again the authors of [2] made use of the same
design Ô¨Çaw to make end-to-end trafÔ¨Åc correlation attacks
feasible with a modest amount of resources.
As a reaction to these attacks, bandwidth scanners were
introduced. In the current design, Tor authorities not only
take into account the self-reported bandwidth values but
also actively measure the bandwidth. A subset of directory
authorities operate a set of bandwidth scanners which period-
ically choose two-hop exit circuits and download predeÔ¨Åned
Ô¨Åles from a particular set of IP addresses (according to
the current source code, there are two such IP addresses).
The bandwidth of a relay shown in the consensus depends
on the self-reported bandwidth Brep and the bandwidth
measurement reports Bmeas by the Tor authorities. The weak
point of this approach is the fact that the scanning can be
reliably detected by relays that want to cheat. To inÔ¨Çate our
bandwidth we then provide more bandwidth for authorities‚Äô
measurement streams while throttling bandwidth for all other
streams. This results in a high bandwidth value shown in the
consensus while keeping the trafÔ¨Åc expenses at a low level.
When doing bandwidth measurements, authorities estab-
lish two-hop circuits. Thus it is sufÔ¨Åcient for cheating non-
exit nodes to provide more bandwidth for streams which
originate at IP addresses of authorities and throttle all
other streams. As an improvement the attacker can take
into account that for bandwidth measurements authorities
download Ô¨Åles which are known. Taking this into account,
the attacker can drop circuits which carry a trafÔ¨Åc pattern
inconsistent with these downloads.
We have implemented this method of bandwidth cheating
and were able to inÔ¨Çate the bandwidth of our relays more
than ten fold; while the consensus showed bandwidth val-
ues of approximately 5000 kBytes/sec per relay, they only
provided 400 kBytes/sec of real bandwidth to Tor clients
each.
V. CATCHING AND TRACKING HIDDEN SERVICE
DESCRIPTORS
In this section we study the security of descriptor distribu-
tion procedure for Tor hidden services. We show how an at-
tacker can gain complete control over the distribution of the
descriptors of a particular hidden service. This undermines
their security signiÔ¨Åcantly: before being able to establish a
connection to a hidden service, a client needs to fetch the
hidden service‚Äôs descriptor; unless it has it cached from a
84
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 




































	










































 !"#
$
%!$
%!&
     	  
        	  
     


Figure 3. Distances between HS directories Ô¨Ångerprints, log10 scale.
Figure 4. Hidden service descriptor request rate during one day.
prior connection attempt. Thus, should the attacker be able
to control the access to the descriptors, the hidden service‚Äôs
activity can be monitored or it can be made completely
unavailable to the clients.
A. Controlling hidden service directories
As mentioned in the background section,
the list of
responsible hidden service directories depends on the current
consensus document and the descriptor IDs of the hidden
service. In this subsection, we explain how to inject relays
into the Tor network that become responsible for the descrip-
tors of the hidden service. This immediately translates into
the problem of Ô¨Ånding the right public keys, i.e. the keys
with Ô¨Ångerprints which would be in-between the descriptor
IDs of the hidden service and the Ô¨Ångerprint of the Ô¨Årst
responsible hidden service directory.
Figure 3 shows the distances between consecutive hidden
service directories (in log10 scale) computed for a randomly
picked consensus document in November 2012. The average
value is 44.8 and the minimum value is 42.16. This means
that we need to Ô¨Ånd a key with a Ô¨Ångerprint which would
fall into an interval of size 1044.8 on the average. This takes
just a few minutes on a modern multi-core computer.
Just like any Tor client, an attacker is able to compute the
descriptor IDs of the hidden service for any moment in the
future and Ô¨Ånd the Ô¨Ångerprints of expected responsible HS
directories. After that she can compute the private/public
key pairs so that SHA-1 hash of the public keys would
be in-between the descriptor ID and the Ô¨Ångerprint of the
Ô¨Årst responsible hidden service directory. The attacker then
runs Tor relays with the computed public/private keys pairs
and waits for 25 hours until they obtain the HSDir Ô¨Çag.
When the attacker‚Äôs relays appear in the consensus as hidden
service directories, they will be used by the hidden service
to upload the descriptors and by the clients to download the
descriptors. In this way the attacker can gain control over
all the responsible HS directories for a particular service by
injecting 6 Tor relays with precomputed public keys. This
allows her to censor a hidden service of her choice or gather
its usage statistics.
As a proof of concept we used this approach to control
one of the six hidden service directories of the discovered
Tor botnet, the Silk Road hidden service, and the Duck-
DuckGo hidden service. We tracked these for several days
and obtained the following measurements: (1) The number
of requests for the hidden service descriptor per day (see
Tables I and II) and (2) the rate of requests over the course
of a day, which is shown in Figure 4 (each point corresponds
to the number of hidden service descriptor requests per one
hour).
Column 1 of Table I and columns 2 and 4 of Table II
show the number of requests for a particular hidden service
descriptor per day. Columns ‚ÄúTotal‚Äù show the total number
of descriptors requests (for any hidden services descriptor)
served by the hidden service directory per day. The hidden
service tracked in Table I is the IRC C&C service.
POPULARITY OF THE DISCOVERED BOTNET
Table I
Date
13 Jul
14 Jul
15 Jul
16 Jul
25 Jul
26 Jul
27 Jul
28 Jul
29 Jul
Botnet descriptor
1408
1609
1651
1448
4004
4243
4750
4880
4977
Total
6581
2392
4715
6852
6591
4357
4985
7714
9085
POPULARITY OF SILK ROAD AND DUCKDUCKGO
Table II
Date
09 Nov
10 Nov
11 Nov
12 Nov
Silk Road
19284
15427
15185
15877
Total
27363
16103
15785
16723
DuckDuckGo
502
549
543
549
Total
2491
5621
3899
10910
Descriptors are cached by the Tor process in RAM for
24 hours. Hence, as long as a computer is not restarted,
85
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
we will see at most one descriptor request every 24 hours,
even if the long-lived circuit to the IRC server is repeatedly
dropped; moreover suspending the computer will not cause
the descriptor to be requested again. On the other hand,
multiple power cycles per day lead to overcounting the size
of the botnet. Hence, from Table I one can estimate that the
size of the botnet was in the range 12,000 ‚Äì 30,000 infected
machines.
This is a very rough approximation since bots can request
the descriptor several times per day, each time when the
infected computer is turned on. By looking at the descriptor
request rate against time we can infer that the bulk of the
botnet resides in the European time-zone.
To protect a hidden service from making it unavailable,
Loesing [15] proposes that hidden services periodically
check if their descriptors can be downloaded from the
responsible directories7. If some hidden service directory
consistently refuses the fetch request, the hidden service Ô¨Åles
a complaint to the Tor directory authorities. The complaint
includes the hidden service descriptor.
Having received the complaint, the authorities upload the
descriptor to the directory and try to fetch it. If the fetch
consistently fails again, the authorities remove HSDir Ô¨Çag
from the directory. If the directory demonstrates the same
behaviour for a long period of time, the relays in the IP
range can be banned from obtaining the HSDir Ô¨Çag.
This protection is based on the assumption that
is
hard to acquire fresh IP addresses. The availability of large
computing platforms that can be rented on an hourly basis