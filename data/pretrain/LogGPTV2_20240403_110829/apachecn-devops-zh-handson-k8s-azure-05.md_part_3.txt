    头盔状态 wp
    回应用户名:用户
    echo Password:$(kube CTL get secret-namespace default WP-WordPress-o JSON path = " { . data . WordPress-Password } " | base64-d)
    这将向您显示用户名和密码，如*图 5.22* 所示:
![Using Helm commands to obtain a username and password to login to the WordPress site](img/B17338_05_22.jpg)
图 5.22:获取 WordPress 应用的用户名和密码
您可以通过以下地址登录我们的网站: **http://  /admin** 。使用上一步中的凭据登录此处。然后你可以在你的网站上添加一个帖子。点击【写你的第一篇博文】按钮，然后创建一篇短文，如图*图 5.23* :
![Writing your first blog post on the WordPress website](img/B17338_05_23.jpg)
图 5.23:写你的第一篇博文
现在输入一些文字，点击【发布】按钮，如图*图 5.24* 。文本本身并不重要；您编写此文件是为了验证数据是否确实保存在磁盘上:
![Using the Publish button to publish a post with random text on the WordPress website](img/B17338_05_24.jpg)
图 5.24:发布带有随机文本的帖子
如果你现在在**http://**转到你的网站主页，你会看到你的测试帖子，如图*图 5.25* :
![Using the website’s external IP to navigate to the WordPress website and verify the published post](img/B17338_05_25.jpg)
图 5.25:发布的博文出现在主页上
在本节中，您部署了一个 WordPress 站点，登录到您的 WordPress 站点，并创建了一个帖子。在下一节中，您将验证此帖子是否在节点故障后仍然存在。
### 在聚氯乙烯参与下处理 Pod 故障
你将对 PVCs 做的第一个测试是杀死 PODS，并验证数据是否确实存在。为此，让我们做两件事:
1.  **Watch the pods in your application**: To do this, use the current Cloud Shell and execute the following command:
    忽必烈得到 pods -w
2.  **Kill the two pods that have the PVC mounted**: To do this, create a new Cloud Shell window by clicking on the icon shown in *Figure 5.26*:
    ![Opening a new Cloud Shell instance](img/B17338_05_26.jpg)
    图 5.26:打开一个新的云外壳实例
    打开新的云外壳后，执行以下命令:
    kubectl delete pod --all
    在原始的云壳中，跟随您之前执行的**观察**命令。您应该会看到类似于*图 5.27* 所示的输出:
    ![Kubernetes creates new pods to recover from the pod outage caused due to the deletion of pods](img/B17338_05_27.jpg)
    图 5.27:删除 PODS 后，Kubernetes 会自动重新创建两个 PODS
    如您所见，两个原始的 Pod 进入了终止状态。Kubernetes 很快开始制造新的 Pod ，从 Pod 故障中恢复过来。PODS 经历了与原始 PODS 相似的生命周期，从待定到包含创造再到运行。
3.  如果你去你的网站，你应该看到你的演示文章已经被保存了。这就是 PVC 如何帮助您防止数据丢失，因为它们保存了原本不会保存在 pod 本身中的数据。
在本节中，您已经了解了当在同一个节点上重新创建 pods 时，PVCs 如何提供帮助。在下一节中，您将看到当节点出现故障时如何使用 PVC。
### 处理有聚氯乙烯参与的节点故障
在前面的示例中，您看到了当这些 Pod 连接了光伏时，Kubernetes 如何处理 Pod 故障。在本例中，您将了解 Kubernetes 如何在连接卷时处理节点故障:
1.  Let's first check which node is hosting your application, using the following command:
    kubectl 的 PODS 很宽
    在*图 5.28* 所示的例子中，节点 2 托管的是 MariaDB，节点 0 托管的是 WordPress 站点:
    ![Checking the node that is hosting your application](img/B17338_05_28.jpg)
    图 5.28:检查哪个节点托管 WordPress 站点
2.  Introduce a failure and stop the node that is hosting the WordPress pod using the Azure portal. You can do this in the same way as in the earlier example. First, look for the scale set backing your cluster, as shown in *Figure 5.29*:
    ![Searching for vmss in the azure search bar, and selecting the scale set used by your cluster](img/B17338_05_29.jpg)
    图 5.29:寻找托管集群的规模集
3.  Then shut down the node, by clicking on Instances in the left-hand menu, then selecting the node you need to shut down and clicking the Stop button, as shown in *Figure 5.30*:
    ![Shutting down the desired node through the Instances pane of the scale set used by your cluster](img/B17338_05_30.jpg)
    图 5.30:关闭节点
4.  After this action, once again, watch the pods to see what is happening in the cluster:
    kubectl get pods -o wide -w
    与前面的示例一样，Kubernetes 需要 5 分钟才能开始对故障节点采取措施。你可以在*图 5.31* 中看到这种情况发生:
    ![The status of the pod indicates that it is stuck in a ContainerCreating state](img/B17338_05_31.jpg)
    图 5.31:处于容器创建状态的容器
5.  You are seeing a new issue here. The new pod is stuck in a ContainerCreating state. Let's figure out what is happening here. First, describe that pod:
    kube CTL description pods/WP-WordPress-
    您将获得如图 5.32 所示的输出:
    ![Using the kubectl describe command to understand the issue with the pod stuck in theContainerCreating state](img/B17338_05_32.jpg)
    图 5.32:解释为什么容器处于容器创建状态的输出
    这表明音量有问题。您会看到与该卷相关的两个错误: **FailedAttachVolume** 错误说明该卷已被另一个 pod 使用， **FailedMount** 说明当前 pod 无法挂载该卷。您可以通过手动强制移除卡在**终止**状态的旧 Pod 来解决这个问题。
    #### 注意
    停留在**终止**状态的 Pod 的行为不是 bug。这是默认的 Kubernetes 行为。Kubernetes 文档声明如下:*“Kubernetes(版本 1.5 或更高版本)不会因为节点不可访问而删除 pods。超时后，在不可到达的节点上运行的 Pod 进入终止或未知状态。当用户尝试在不可到达的节点上优雅地删除 pod 时，pod 也可能进入这些状态。”*您可以在[https://kubernetes . io/docs/tasks/run-application/force-delete-state-set-pod/](https://kubernetes.io/docs/tasks/run-application/force-delete-stateful-set-pod/)上了解更多。
6.  To forcefully remove the terminating pod from the cluster, get the full pod name using the following command:
    忽必烈得到 pods
    这将向您显示类似于图 5.33 的输出:
    ![Fetching the name of the pod stuck in the Terminating state](img/B17338_05_33.jpg)
    图 5.33:获取停留在终止状态的容器的名称
7.  Use the pod's name to force the deletion of this pod:
    立方删除 pod wordpress-wp- --force
8.  After the pod has been deleted, it will take a couple of minutes for the other pod to enter a Running state. You can monitor the state of the pod using the following command:
    忽必烈得到 pods -w
    这将返回类似于图 5.34 的输出:
    ![The new WordPress pod returning to a Running state](img/B17338_05_34.jpg)
    图 5.34:新的 WordPress 容器返回到运行状态
9.  As you can see, this brought the new pod to a healthy state. It did take a couple of minutes for the system to pick up the changes and then mount the volume to the new pod. Let's get the details of the pod again using the following command:
    忽必烈描写 pod wp-wordpress-
    这将生成如下输出:
    ![The new pod is now attaching the volume and pulling the container image](img/B17338_05_35.jpg)
    图 5.35:新的 pod 现在正在连接卷并拉出容器映像
10.  This shows you that the new pod successfully got the volume attached and that the container image got pulled. This also made your WordPress website available again, which you can verify by browsing to the public IP. Before continuing to the next chapter, clean up the application using the following command:
    头盔删除 wp
    kubectl 删除 pvc --所有
    kubectl delete pv --all
11.  我们也来启动被关闭的节点:回到 Azure 门户中的比例集窗格，点击左侧菜单中的 Instances，选择需要启动的节点，点击 start 按钮，如图*图 5.36* :
![Using the Instances pane of the selected VMSS to start the node that was shut down](img/B17338_05_36.jpg)
图 5.36:再次启动节点 0
在本节中，您学习了当 PVC 没有安装到新的 pod 时，如何从节点故障中恢复。你所需要做的就是强制删除停留在**终止**状态的 Pod 。
## 总结
在本章中，您了解了常见的 Kubernetes 故障模式以及如何从中恢复。本章首先介绍了 Kubernetes 如何自动检测节点故障，以及它将如何启动新的 pods 来恢复工作负载。之后，您扩展了您的工作负载，并且让您的集群耗尽了资源。通过再次启动故障节点向群集添加新资源，您从这种情况中恢复过来。
接下来，您看到了 PVs 如何在 pod 外部存储数据。您删除了集群上的所有 pods，并看到 PV 如何确保您的应用中没有数据丢失。在本章的最后一个示例中，您看到了如何在连接 PVs 时从节点故障中恢复。您可以通过强制删除终止 pod 来恢复工作负载。这使您的工作量恢复到健康状态。
本章解释了 Kubernetes 中常见的故障模式。在下一章中，我们将向我们的服务介绍 HTTPS 支持，并介绍使用 Azure Active Directory 的身份验证。