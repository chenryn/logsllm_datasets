         throw err;
       }
       // get the extension without the period
       var typ = path.extname(filename).replace('.','');
       res.setHeader("content-type", "image/" + typ);
       res.status(200);
       // send the image back as a response
       res.send(new Buffer(stdout,'binary'));
     });
   });
 });
});
module.exports = router;
```
好了，一切回到了正轨，已经可以在我的本地机器正常工作了。我该去休息了。
但是，在我测试把这个微服务当作一个普通的 Node 应用运行在本地时...
![Containers Hard](/data/attachment/album/201604/27/075121k3swmmbs1pqqrxsb.png)
它工作的很好。现在我要做的就是让它在容器里面工作。
第二天我起床后喝点咖啡，然后创建一个镜像——这次没有忘记那个"."!
```
$ docker build -t thumbnailer:01 .
```
我从缩略图项目的根目录开始构建。构建命令使用了根目录下的 Dockerfile。它是这样工作的：把 Dockerfile 放到你想构建镜像的地方，然后系统就默认使用这个 Dockerfile。
下面是我使用的Dockerfile 的内容：
```
FROM ubuntu:latest
MAINTAINER PI:EMAIL
RUN apt-get update
RUN apt-get install -y nodejs nodejs-legacy npm
RUN apt-get install imagemagick libmagickcore-dev libmagickwand-dev
RUN apt-get clean
COPY ./package.json src/
RUN cd src && npm install
COPY . /src
WORKDIR src/
CMD npm start
```
这怎么可能出错呢？
### 第二个大问题
我运行了 `build` 命令，然后出了这个错：
```
Do you want to continue? [Y/n] Abort.
The command '/bin/sh -c apt-get install imagemagick libmagickcore-dev libmagickwand-dev' returned a non-zero code: 1
```
我猜测微服务出错了。我回到本地机器，从本机启动微服务，然后试着上传文件。
然后我从 NodeJS 获得了这个错误：
```
Error: spawn convert ENOENT
```
怎么回事？之前还是好好的啊！
我搜索了我能想到的所有的错误原因。差不多4个小时后，我想：为什么不重启一下机器呢？
重启了，你猜猜结果？错误消失了！（LCTT 译注：万能的“重启试试”）
继续。
### 将精灵关进瓶子里
跳回正题：我需要完成构建工作。
我使用 [`rm` 命令](https://docs.docker.com/reference/commandline/rm/)删除了虚拟机里所有的容器。
```
$ docker rm -f $(docker ps -a -q)
```
`-f` 在这里的用处是强制删除运行中的镜像。
然后删除了全部 Docker 镜像，用的是[命令 `rmi`](https://docs.docker.com/reference/commandline/rmi/):
```
$ docker rmi if $(docker images | tail -n +2 | awk '{print $3}')
```
我重新执行了重新构建镜像、安装容器、运行微服务的整个过程。然后过了一个充满自我怀疑和沮丧的一个小时，我告诉我自己：这个错误可能不是微服务的原因。
所以我重新看到了这个错误：
```
Do you want to continue? [Y/n] Abort.
The command '/bin/sh -c apt-get install imagemagick libmagickcore-dev libmagickwand-dev' returned a non-zero code: 1
```
这太打击我了：构建脚本好像需要有人从键盘输入 Y！ 但是，这是一个非交互的 Dockerfile 脚本啊。这里并没有键盘。
回到 Dockerfile，脚本原来是这样的：
```
RUN apt-get update
RUN apt-get install -y nodejs nodejs-legacy npm
RUN apt-get install imagemagick libmagickcore-dev libmagickwand-dev
RUN apt-get clean
```
第二个`apt-get` 忘记了`-y` 标志，它用于自动应答提示所需要的“yes”。这才是错误的根本原因。
我在这条命令后面添加了`-y` ：
```
RUN apt-get update
RUN apt-get install -y nodejs nodejs-legacy npm
RUN apt-get install -y imagemagick libmagickcore-dev libmagickwand-dev
RUN apt-get clean
```
猜一猜结果：经过将近两天的尝试和痛苦，容器终于正常工作了！整整两天啊！
我完成了构建工作：
```
$ docker build -t thumbnailer:0.1 .
```
启动了容器：
```
$ docker run -d -p 3001:3000 thumbnailer:0.1
```
获取了虚拟机的IP 地址：
```
$ docker-machine ip default
```
在我的浏览器里面输入  ：
上传页面打开了。
我选择了一个图片，然后得到了这个：
![container-diagram-7](/data/attachment/album/201604/27/075122aq9qq848vja84g69.png)
工作了！
在容器里面工作了，我的第一次啊！
### 这让我学到了什么?
很久以前，我接受了这样一个道理：当你刚开始尝试某项技术时，即使是最简单的事情也会变得很困难。因此，我不会把自己当成最聪明的那个人，然而最近几天尝试容器的过程就是一个充满自我怀疑的旅程。
但是你想知道一些其它的事情吗？这篇文章是我在凌晨2点完成的，而每一个受折磨的时刻都值得了。为什么？因为这段时间你将自己全身心投入了喜欢的工作里。这件事很难，对于所有人来说都不是很容易就获得结果的。但是不要忘记：你在学习技术，运行世界的技术。
P.S. 了解一下Hello World 容器的两段视频，这里会有 [Raziel Tabib’s](http://twitter.com/RazielTabib) 的精彩工作内容。
千万被忘记第二部分...
---
via: 
作者：[Bob Reselman](https://deis.com/blog) 译者：[Ezio](https://github.com/oska874) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出