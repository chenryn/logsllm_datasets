### 文章标题

**授权使用限制：** 清华大学。下载日期：2021年3月20日，UTC时间09:58:33。来自IEEE Xplore。适用条款。

---

### 摘要
本文介绍了一种名为Emμcode的技术，该技术通过软件模拟而不是硬件复制来提高复杂现代微处理器的可靠性。文章详细描述了Emμcode的设计、实现以及优化方法，并评估了其在当代架构中的性能表现。此外，还讨论了相关工作并进行了总结。

---

### 1. 引言
随着工艺尺寸的缩小，整个处理流水线越来越容易受到硬故障的影响。因此，需要对所有类型的指令进行保护。特别是当新的系统指令（如新的硬件虚拟化支持）和专用硬件（如SSE变体）变得普遍时，就需要一种通用的技术来掩盖芯片未受复制机制保护部分的硬故障。Emμcode是一种扩展先前工作的技术，旨在增加复杂现代微处理器的可靠性。

---

### 2. Emμcode
#### 2.1 背景与动机
随着工艺尺寸的缩小，整个处理流水线越来越容易受到硬故障的影响。因此，需要对所有类型的指令进行保护。特别是当新的系统指令（如新的硬件虚拟化支持）和专用硬件（如SSE变体）变得普遍时，就需要一种通用的技术来掩盖芯片未受复制机制保护部分的硬故障。Emμcode是一种扩展先前工作的技术，旨在增加复杂现代微处理器的可靠性。

#### 2.2 设计
Emμcode通过软件模拟而不是硬件复制来提供GPD（Guarded Processing Duplication），从而提高加速指令的可靠性。如图1所示，Emμcode由Emμcode控制器（ECU）、Emμcode Trace Cache（ETC）和Emμcode Destination Register（EDR）组成。一旦检测到故障，Emμcode将被调用，用软件微码跟踪替换硬件加速指令。这样，Emμcode跟踪可以使用受其他技术（如GPD或SD）保护的流水线部分。

![图1](#)
*图1. 显示Emμcode组件的架构框图，包括Emμcode控制单元（ECU）、Emμcode跟踪缓存（ETC）和Emμcode目标寄存器（EDR）。*

---

### 3. 优化
#### 3.1 基线实现
基线实现是通过编译SoftFloat2b[8]并使用gcc -O3 -finline-functions生成的，并将其转换为微操作。这些跟踪对整体性能影响较大。由于这些跟踪在实际运行中具有可预测的动态行为，例如源或目标数不是NaN或非规范数，我们可以针对gcc无法做到的可预测路径进行优化。我们还对微架构进行了小的修改以提高性能。

#### 3.2 寄存器溢出减少
在标准编译中，编译器会在假设非常大的栈的情况下溢出到内存。gcc要求使用局部变量的原因是目标ISA（x86）只有七个寄存器可供gcc使用，外加一个栈寄存器。通过创建新的架构寄存器，我们可以绕过这个限制。这增加了可用寄存器的数量，从而提高了跟踪的优化效果。

#### 3.3 保持ISA语义
许多CISC架构通过使用许多RISC微操作来实现单独的内部ISA。由于gcc针对外部ISA，它无法利用内部RISC ISA的功能。然而，内部RISC ISA不一定有外部可见ISA的相同限制。因此，通过使用RISC微操作，可以允许更多的寄存器，从而进行优化。

#### 3.4 预测分支优化
Emμcode跟踪中存在许多难以预测的分支，这会导致分支误预测问题。例如，在32位浮点乘法中，如果误预测了某个分支，执行时间会从25个周期增加到48个周期。通过使用谓词（predication），可以在计算条件之前获取和解码无关指令，从而改善性能。谓词是指在一个布尔守卫下发出指令的思想。通过这种方式，可以重新安排指令调度，从而显著提高性能。

---

### 4. 评估
本文在当代架构背景下评估了Emμcode的性能。结果显示，经过优化的跟踪比简单的实现快6倍，在平均情况下快3.79倍。

---

### 5. 相关工作
本节概述了相关的研究工作，对比了不同方法的优缺点，并指出了Emμcode的独特之处。

---

### 6. 结论
本文介绍了Emμcode技术，详细描述了其设计、实现和优化方法，并评估了其在当代架构中的性能表现。Emμcode通过软件模拟而不是硬件复制来提高复杂现代微处理器的可靠性，展示了良好的性能改进潜力。

---

### 参考文献
[1] Hsu, W., & Davidson, E. S. (1996). Predicated execution: Improving the performance of conditional branches. *Proceedings of the 23rd Annual International Symposium on Computer Architecture*, 1996, 15-25.
[2] Mahlke, S. A., et al. (1997). Effective compiler support for predicated execution using the hyperblock. *ACM SIGPLAN Notices*, 32(5), 251-262.
[3] SoftFloat2b [Online]. Available: <http://www.jhauser.us/arithmetic/SoftFloat.html>

---

**版权信息**
© 2009 IEEE. 保留所有权利。