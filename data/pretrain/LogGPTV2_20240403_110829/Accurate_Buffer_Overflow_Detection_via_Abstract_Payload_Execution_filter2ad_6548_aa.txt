title:Accurate Buffer Overflow Detection via Abstract Payload Execution
author:Thomas Toth and
Christopher Kr&quot;ugel
Accurate Buﬀer Overﬂow Detection via
Abstract Payload Execution
Thomas Toth and Christopher Kruegel
Distributed Systems Group
Technical University Vienna
Argentinierstrasse 8, A-1040 Vienna, Austria
{ttoth, chris}@infosys.tuwien.ac.at
Abstract. Static buﬀer overﬂow exploits belong to the most feared and
frequently launched attacks on todays Internet. These exploits target
vulnerabilities in daemon processes which provide important network
services. Ever since the buﬀer overﬂow hacking technique has reached a
broader audience due to the Morris Internet worm [21] in 1988 and the
infamous paper by AlephOne in the phrack magazine [1], new weaknesses
in many programs have been discovered and abused.
Current intrusion detection systems (IDS) address this problem in dif-
ferent ways. Misuse based network IDS attempt to detect the signature
of known exploits in the payload of the network packets. This can be
easily evaded by a skilled intruder as the attack code can be changed,
reordered or even partially encrypted. Anomaly based network sensors
neglect the packet payload and only analyze bursts of traﬃc thus missing
buﬀer overﬂows altogether. Host based anomaly detectors that monitor
process behavior can notice a successful exploit but only a-posteriori
when it has already been successful. In addition, both anomaly variants
suﬀer from high false positive rates.
In this paper we present an approach that accurately detects buﬀer over-
ﬂow code in the request’s payload by concentrating on the sledge of the
attack. The sledge is used to increase the chances of a successful intrusion
by providing a long code segment that simply moves the program counter
towards the immediately following exploit code. Although the intruder
has some freedom in shaping the sledge it has to be executable by the
processor. We perform abstract execution of the payload to identify such
sequences of executable code with virtually no false positives.
A prototype implementation of our sensor has been integrated into the
Apache web server. We have evaluated the eﬀectivity of our system on
several exploits as well as the performance impact on services.
Keywords: Intrusion Detecion, Buﬀer Overﬂow Exploit, Network Secu-
rity
This work has been supported by the FWF (Fonds zur F¨orderung der wis-
senschaftlichen Forschung), under contract number P13731-MAT. The views ex-
pressed in this article are those of the authors and do not necessarily reﬂect the
opinions and positions of the FWF.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 274–291, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
275
1 Introduction
The constant increase of attacks against networks and their resources causes
a necessity to protect these valuable assets. Although well-conﬁgured ﬁrewalls
provide good protection against many attacks, some services (like HTTP or DNS)
have to be publicly available. In such cases a ﬁrewall has to allow incoming
traﬃc from the Internet without restrictions. The programs implementing these
services are often complex and old pieces of software. This inevitably leads to the
existence of programming bugs. Skilled intruders exploit such vulnerabilities by
sending packets with carefully crafted content that overﬂow a static buﬀer in the
victim process. This allows the intruder to alter the execution ﬂow of the service
daemon and to execute arbitrary code that he can inject, eventually leading to
a system compromise and elevating the privileges of the attacker to the ones of
the service process. Such an attack is called a buﬀer overﬂow exploit. Recent
studies [19] have indicated that these attacks contribute to a large number of
system compromises as many daemons run with root privileges.
Intrusion detection systems (IDS) are security tools that are used to detect
traces of malicious activities which are targeted against the network and its re-
sources. IDS are traditionally classiﬁed as anomaly or signature based. Signature
based systems like Snort [18] or NetSTAT [23,24] act similar to virus scanners
and look for known, suspicious patterns in their input data. Anomaly based
systems watch for deviations of actual from expected behavior and classify all
‘abnormal’ activities as malicious.
As signature based designs compare their input to known, hostile scenarios
they have the advantage of raising virtually no false alarms (i.e. classifying an
action as malicious when in fact it is not). For the same reason, they have the
signiﬁcant drawback of failing to detect variations of known attacks or entirely
new intrusions.
Because of the ability to detect previously unknown intrusions a number of
diﬀerent anomaly based systems have been proposed. Depending on their source
of input data, they are divided into host based and network based designs.
Host based anomaly detection systems can focus on user or program behav-
ior. User proﬁles are built from login times and accessed resources [6,11,2] (e.g.
ﬁles, programs) or from timing analysis of keystrokes [20]. Unfortunately, user
behavior is hard to predict and can change frequently. Additionally, such sys-
tems cannot react properly when network services get compromised as no single
user proﬁle can be associated to a daemon program.
As a consequence the focus was shifted from user to program behavior. The
execution of a program is modeled as a set of system call sequences [8,7] which
occur during ‘normal’ program execution. When the observed sequences devi-
ate from the expected behavior the program is assumed to perform something
unintended, possibly because of a successful attack (e.g. buﬀer overﬂow). Other
researchers use neural networks [10] and concentrate on the analysis of the in-
put data that is passed to programs. These systems are capable of detecting
buﬀer overﬂows attacks against service daemons but only after they have been
successful and manifest themselves in abnormal behavior. This has the problem
276
T. Toth and C. Kruegel
that damage might have already occurred. Another approach, followed by Stack-
guard [5], modiﬁes compilers to have them insert canary words into the stack
frame of vulnerable processes at runtime. Before a function is allowed to return,
the canary word is checked for alteration, possibly causing a termination of an
exploited process. This mechanism can prevent damage but requires the service
process to be recompiled.
We present a system that analyzes the content of service requests at the
network level and can a-priori prevent malicious code from being executed. This
is similar to network based anomaly detection systems which do not concentrate
on activities at hosts (e.g. users or programs) but focus on the packets that
are sent over the network. Current network based systems [16,17,4,22] however
only model the ﬂow of packets. The source and destination IP addresses and
ports are used to determine parameters like the number of total connection
arrivals in a certain period of time, the inter-arrival time between packets or
the number of packets to/from a certain machine. These parameters can be used
to reliably detect port scans or denial-of-service (DOS) attempts. Unfortunately,
the situation changes when one considers buﬀer overﬂow attacks. In this case the
attacker sends one (or a few) packets including the attack code which is executed
at the remote machine on behalf of the intruder to elevate his privileges. As the
attacker only has to send very few packets (most of the time a single one is
suﬃcient), it is nearly impossible for systems that use traﬃc models to detect
such anomalies.
We propose an approach to do buﬀer overﬂow detection at the applica-
tion level for important Internet services. These services usually operate in a
client/server setup where a client machine sends a request to the server which
returns a reply with the results. Our detection approach distinguishes normal
request data from malicious content (i.e. buﬀer overﬂow code) by performing
abstract execution of payload data contained in client requests. In the case of
detecting long ‘instruction chains’ of executable code (see Section 3) a request
can be dropped before the malicious eﬀects of the exploit code are triggered
within vulnerable functions (and maybe detected by another ID system after-
wards).
The ﬁrst section describes buﬀer overﬂow exploits in general and the pos-
sibilities of an attacker to disguise his malicious payload to evade ID systems.
Then we present our approach of abstract payload execution and explain the
advantages of this design. The following section introduces the results of the
integration of our prototype into the Apache [3] web server. Finally, we brieﬂy
conclude and outline future work.
2 Buﬀer Overﬂow Exploits
Many important Internet services (e.g. HTTP, FTP or DNS) have to be publicly
available. They operate in a client/server setup which means that clients send
request data to the server, which operates on the given input and returns a reply
containing the desired results or an error message. This allows virtually anyone
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
277
(including people with malicious intents) to send data to a remote server daemon
which has to analyze and process the presented data.
The server daemon process usually allocates memory buﬀers where request
data received from the network is copied into. During the handling of the received
data, the input is parsed, transformed and often copied several times. Problems
arise when data is copied into ﬁxed sized buﬀers declared in subroutines that
are statically allocated on the process’ stack. It is possible that the request that
has been sent to the service is longer than the allocated buﬀer. When the length
of the input is not checked, data is copied into the buﬀer by means of an unsafe
C string function. Parts of the stack that are adjacent to the static buﬀer may
be overwritten - a stack overﬂow occurs.
Unsafe C library string functions (see Table 1 for examples) are routines that
are used to copy data between memory areas (buﬀers). Unfortunately, it is not
guaranteed that the amount of data speciﬁed as the source of the copy instruction
will ﬁt into the destination buﬀer. While some functions (like strncpy) at least
force the programmer to specify the number of bytes that should be moved to the
destination, others (like strcpy) copy data until they encounter a terminating
character in the source buﬀer itself. Nevertheless, neither functions check the
size of the destination area.
Table 1. Vulnerable C Library Functions
strcpy
strcat
gets
sprintf
memcpy
wstrcpy
wcscat
getws
swprintf
memmove
strncpy
strncat
fgets
scanf
wstrncpy
wstrncat
fgetws
wscanf
Especially functions that determine the end of the source buﬀer by relying
on data inside that buﬀer carry a risk of overﬂowing the destination memory
area. This risk is especially high when the source buﬀer contains unchecked data
directly received from clients as it allows attackers to force a stack overﬂow by
providing excessive input data.
The fact that C compilers (like gcc [9]) allocate both, memory for local vari-
ables (including static arrays) as well as information which is essential for the
program’s ﬂow (the return address of a subroutine call) on the stack, makes
static buﬀer overﬂows dangerous. Figure 1 below shows the stack layout of a
function compiled by gcc. When an attacker can overﬂow a local buﬀer stored
on the stack and thereby modify the return address of a subroutine call, this
might lead to the execution of arbitrary code on behalf of the intruder.
An adversary that knows that a subroutine in the daemon process utilizes
a vulnerable function (e.g. strcpy) can launch an attack by sending a request
with a length that exceeds the size of the statically allocated buﬀer used as the
destination by this copy instruction. When the server processes his input, a part
278
T. Toth and C. Kruegel
Fig. 1. Stack Layout
of the stack including the subroutine’s return address is overwritten (see Figure
2 below). When the attacker simply sends garbage, a segmentation violation is
very likely to occur as the program continues at a random memory address after
returning from the subroutine.
Fig. 2. Operation of strcpy(char * dst,char * src)
A skillful attacker however could carefully craft his request such that the
return address points back to the request’s payload itself which has been copied
onto the stack into the destination buﬀer. In this case the program counter is set
to the stack address somewhere in the buﬀer that has been overﬂown when the
subroutine returns. The processor then resumes execution of the bytes contained
in the request with the privileges of the server process (often with root rights).
The main problem with this technique is the fact that the attacker does not
know the exact stack address where his payload will be copied to. Although the
intruder can compile and analyze the service program on his machine to get a
rough idea of the correct address, the exact value depends on the environment
variables that the user has set. When a wrong address is selected, the processor
will start to execute instructions at that position. This is likely to result in an
illegal opcode exception because the random value at this memory position does
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
279
not represent a valid processor instruction (thereby killing the process). Even
when the processor can decode the instruction, its parameter may reference
memory addresses which are outside of any previously allocated areas. This
causes a segmentation violation and a termination of the process.
To circumvent this problem, the attacker can put some code in front of the
exploit code itself to increase the chances of having the faked return address
point into the correct stack region. This extra code is called the sledge of the
exploit and is usually formed by many (a few hundreds are common) NOP (no
operation) instructions. The idea is that the return address simply has to point
somewhere into this long sledge that does nothing except having the proces-
sor move the program counter towards the actual exploit code. Now it is not
necessary anymore to hit the exact beginning of the exploit code but merely a
position somewhere in the sledge segment. After the exploit code, the guessed
return address (RA) (which points into the sledge) is replicated several times to
make sure that the subroutine’s real return address on the stack is overwritten.
A typical layout of a buﬀer overﬂow code that includes a sledge is shown in
Figure 3.
Fig. 3. Typical Structure of a Buﬀer Overﬂow Exploit
Some network based misuse IDSs (like Snort [18]) try to identify buﬀer over-
ﬂow exploits by monitoring the network traﬃc and scanning packet payload for
the occurrence of suspicious bytecode sequences. These sequences are drawn from
actual exploits and represent strings like /bin/sh or operating system calls.
This suﬀers from the problem that there are virtually inﬁnite variations of
buﬀer overﬂow exploits that attack diﬀerent vulnerabilities of the same service
or express the same functionality diﬀerently. In addition, code transformation
techniques like reordering or insertion of ﬁlling instructions change the signature
of the exploit and render the misuse based detection useless. Some intruders have
even started to encode the actual exploit with a simple routine (e.g. ROT-13)
while placing the corresponding decode routine in front of the encrypted exploit.
When the buﬀer overﬂow is executed the decode routine ﬁrst decrypts the exploit
segment and then executes it.
The wide variety of diﬀerent exploit signatures shifted the focus of these
systems to the sledge. Every attack includes a long chain of architecture speciﬁc
NOP (no operation) instructions that precedes the actual exploit - NOP has a byte
representation of 0x90 for the Intel IA32 [12], for other architectures refer to
[15].
Unfortunately, the sledge of a buﬀer overﬂow exploit can also use opcodes
diﬀerent from NOP causing the signature detectors to fail when these instructions
are replaced by functionally equivalent ones. According to [13] there are more
280
T. Toth and C. Kruegel
than 50 opcodes for the Intel IA32 architecture which are suitable for replacing
NOP operations (Table 2 below enumerates a few examples).
Table 2. Single-Byte NOP Substitutes for IA32
Mnemonic
Explanation
Opcode
AAA
AAS
CWDE
CLC
CLD
CLI
CMC
. . .
ASCII Adjust After Addition
ASCII Adjust After Subtraction
Convert Word To Doubleword
Clear Carry Flag
Clear Direction Flag
Clear Interrupt Flag