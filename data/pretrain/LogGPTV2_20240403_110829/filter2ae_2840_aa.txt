**作者：fate0  
来源：[小米安全中心](https://mp.weixin.qq.com/s?__biz=MzI2NzI2OTExNA==&mid=2247485901&idx=1&sn=72be486eef0bd2f8cefc1d0a5b6f4e8d&chksm=ea802f58ddf7a64e011c6eba8216c1b4b12c51d9b31c29b91dbbf42e536e7f234f792ba740ae&mpshare=1&scene=1&srcid=0820ptQQlePvaP0azQa6fFFQ&sharer_sharetime=1566292995934&sharer_shareid=bafb2678ed1f77a340809d0b35c3d277&key=6e19136856231602803520cd0275c6ba0d7b158b62518972ab3f6f3b642c4f163a30f1df62e44f961f08282e8253972c11f2cf50d8df73b22de3c1626289b17e07858d0458f8bfa19a52334bb4ca0259&ascene=1&uin=MzM5ODEzOTY3MQ%3D%3D&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=3pfR1NXZ5aVd7MysCM3F1tDkQ1%2FjkIektpYaFX8ZdSulYBbcf7S0xx2siCcsJwCv
"小米安全中心")**
**相关阅读：  
[《爬虫基础篇[Web 漏洞扫描器]》](https://paper.seebug.org/537/ "《爬虫基础篇\[Web 漏洞扫描器\]》")  
[《爬虫 JavaScript 篇[Web 漏洞扫描器]》](https://paper.seebug.org/570/ "《爬虫 JavaScript
篇\[Web 漏洞扫描器\]》")  
[《爬虫调度篇[Web 漏洞扫描器]》](https://paper.seebug.org/730/ "《爬虫调度篇\[Web 漏洞扫描器\]》")**
### 0x00 前言
之前我们简单介绍了一下[扫描器中爬虫](https://mp.weixin.qq.com/s?__biz=MzI2NzI2OTExNA==&mid=2247485012&idx=1&sn=17e2225f85b3e850c34d7a80ccc15086&chksm=ea8020c1ddf7a9d79b148e3c8a084eb7330677d9d1ddedfc580f41d3943a0f08fbf92da42d32&token=1312242520&lang=zh_CN&scene=21#wechat_redirect)的部分，接下来将继续介绍扫描器中一些我们认为比较有趣的技巧。
### 0x01 编码/解码/协议
在很久以前有人提问 AMF 格式的请求怎么进行检测，或者有什么工具可以检测。
既然我们要讲解的是 Web 漏洞扫描器，那么就先假设是 AMF over HTTP (这里并不需要你了解 AMF，你只需要知道 AMF
是一种数据格式类型就行)。
假设我们需要测试一个 AMF 格式数据的 SQL 注入问题，那么按照通常的思路就是在 SQL 注入模块中：
1.先解析 HTTP 中 AMF 格式数据
2.然后在测试参数中填写 payload
3.重新封装 AMF 格式数据
4.发送 HTTP 请求
伪代码如下：
    1req = {"method": "POST", "url": "http://fatezero.org", "body": "encoded data"}
    2data = decode_amf(req["body"])
    3for key, value in data.items():
    4    d = copy.deepcopy(data)
    5    d[key] = generate_payload(value)
    6    body = encode_amf(d)
    7    requests.request(method=req["method"], url=req["url"], body=body)
整个流程下来没什么问题，但是如果又来了一个 X 协议(X over HTTP)，那么我们就得继续修改 SQL 注入模块以便支持这种 X
协议，但是扫描器中可不是只有 SQL 注入检测模块，还有其他同类模块，难道每加一个新协议我还得把所有检测模块都改一遍？
所以我们需要把这些协议解析和封装单独抽出来放在一个模块中。
伪代码如下：
     1# utils.py
     2def decode(data):
     3    if is_amf(data):
     4        data = decode_amf(data)
     5
     6    if is_X(data):
     7        data = decode_X(data)
     8
     9    # 递归 decode
    10    for i in data:
    11        data[i] = decode(data[i])
    12
    13    return data
    14
    15
    16# detect_module.py
    17req = {"method": "POST", "url": "http://fatezero.org", "body": "encoded data"}
    18data = decode(req["body"])
    19for key, value in data.items():
    20    d = copy.deepcopy(data)
    21    d[key] = generate_payload(value)
    22    body = encode(d)
    23    requests.request(method=req["method"], url=req["url"], body=body)
上面的递归 decode 主要是为了解码某种格式的数据里面还有另外一种格式的数据，虽然看起来这种场景比较少见，但是仔细想一下 multipart 带着
json，json 里的字符串是另外一个 json 字符串，是不是又觉得这种情况也并不少见。
那 encode/decode 剥离出来就可以了吗？请注意到上面伪代码使用了 requests. request 发送请求，那如果某天需要我们去测试
websocket 协议，是不是又得在检测模块中多加一套 websocket client 发送请求？
所以我们也需要将具体的网络操作给剥离出来，具体的协议类型直接由上面来处理，检测模块只需要关注具体填写的 payload。
伪代码如下：
    1for key, value in x.items():
    2    data.reset()
    3    x[key] = generate_payload(value)
    4    x.do()  # 负责将数据重新组装成原来的格式，并按照原始协议发送
    5
    6   # check
因为每个检测模块的检测依据大致就几种：
  * 返回内容
  * 消耗时间 (time based)
  * 另外一条信道的数据 (比方说 dnslog)
所以即便是我们将网络操作剥离出来也不会影响检测的效果。
在编写检测模块的时候，编写者可以不用关心基础协议是什么，怎么对数据编码解码，只用关心根据 value 生成 payload 并填写到相对应的 key 中。
假如某天出现了这么一种流行编码格式 http://www.a.com/key1,
value1,key2,value2，那我们所有的检测模块也无需修改，仅仅需要在上一层再添加一套 encode/decode
操作即可。假如某天出现了一种比较流行的协议，我们也仅需要在上一层提供一套 client 即可。检测模块的工作就仅仅剩下生成并填写 payload。
### 0x02 PoC 分类
在 2014 年的时候，我做了大量的竞品分析，包括使用逆向工程逆向商业的 Acunetix WVS, HP Webinspect, IBM AppScan,
Netsparker 扫描逻辑，也包括阅读开源的 w3af, arachni 代码。
如果不谈扫描质量，只关注整体项目设计以及产品中使用到的猥琐技巧，那么其中最让我眼前一亮的当属 AWVS，接下来我将详细介绍一下我从 AWVS 中学习到的
PoC 分类。
PoC 分类：
类型 | 描述  
---|---  