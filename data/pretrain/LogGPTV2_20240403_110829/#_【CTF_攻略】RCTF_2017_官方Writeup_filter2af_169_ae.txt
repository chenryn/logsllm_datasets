    using Windows.UI.Xaml.Media;
    using Windows.UI.Xaml.Navigation;
    using Windows.Security.Cryptography;
    using Windows.Security.Cryptography.DataProtection;
    using Windows.Storage.Streams;
    using System.Threading.Tasks;
    using SQLite.Net.Attributes;
    using SQLite.Net;
    using SQLite.Net.Platform.WinRT;
    using Windows.Security.Cryptography;
    using Windows.Security.Cryptography.Core;
    //“空白页”项模板在 http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409 上有介绍
    namespace RCTF
    {
        /// 
        /// 可用于自身或导航至 Frame 内部的空白页。
        /// 
        public sealed partial class MainPage : Page
        {
            //string path = Path.Combine(Windows.Storage.ApplicationData.Current.LocalFolder.Path, "flag.sqlite");
            string path = Path.Combine(Windows.ApplicationModel.Package.Current.InstalledLocation.Path, @"Assetsflag.sqlite");
            string pfn = Windows.ApplicationModel.Package.Current.Id.FamilyName;
            SQLite.Net.SQLiteConnection conn;
            public MainPage()
            {
                this.InitializeComponent();
                conn = new SQLiteConnection(new SQLitePlatformWinRT(), path);
                conn.CreateTable();
            }
            private void button_Click(object sender, RoutedEventArgs e)
            {
                int id;
                bool b = int.TryParse(textBox.Text, out id);
                if (b)
                {
                    var s = (from p in conn.Table()
                             where p.Id == id
                             select p.flag);
                    foreach (var r in s)
                        textBlock.Text = "flag:" + dfdfdfd(r);
                }
            }
            public static string asdasd(String input)
            {
                IBuffer txtBuffer = CryptographicBuffer.ConvertStringToBinary(input, BinaryStringEncoding.Utf8);
                string PFN = Windows.ApplicationModel.Package.Current.Id.FamilyName.Substring(0, 16);
                string AES_IV = "0000000000000000";
                IBuffer iv = System.Text.Encoding.UTF8.GetBytes(AES_IV).AsBuffer();
                byte[] keyBtArray = System.Text.Encoding.UTF8.GetBytes(PFN);
                SymmetricKeyAlgorithmProvider provider = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesCbcPkcs7);
                CryptographicKey m_key = provider.CreateSymmetricKey(keyBtArray.AsBuffer());
                IBuffer cryptBuffer = CryptographicEngine.Encrypt(m_key, txtBuffer, iv);
                return CryptographicBuffer.EncodeToBase64String(cryptBuffer);
            }
            public static string dfdfdfd(String input)
            {
                IBuffer txtBuffer = Convert.FromBase64String(input).AsBuffer();
                string PFN = Windows.ApplicationModel.Package.Current.Id.FamilyName.Substring(0, 16);
                string AES_IV = "0000000000000000";
                IBuffer iv = System.Text.Encoding.UTF8.GetBytes(AES_IV).AsBuffer();
                byte[] keyBtArray = System.Text.Encoding.UTF8.GetBytes(PFN);
                SymmetricKeyAlgorithmProvider provider = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesCbcPkcs7);
                CryptographicKey m_key = provider.CreateSymmetricKey(keyBtArray.AsBuffer());
                IBuffer cryptBuffer = CryptographicEngine.Decrypt(m_key, txtBuffer, iv);
                return CryptographicBuffer.ConvertBinaryToString(BinaryStringEncoding.Utf8, cryptBuffer);
            }
        }
        public class flag_table
        {
            public int Id { get; set; }
            public string flag { get; set; }
        }
    }
**MISC**
**light**
Category:MISC Score:434
使用一下代码计算出点击的位置，然后保存到到 1.txt
    from libnum import invmod
    import numpy as np
    import struct
    color_num = 2
    with open("data", "rb") as f:
        s = f.read()
    width = struct.unpack("
    #include 
    void click(HWND hwnd, int x, int y)
    {
        SendMessage(hwnd, WM_LBUTTONDOWN, 0, yheight?width:height);
            printf("%dn", size);
            while(fscanf(f,"%d %d",&y,&x)!=EOF)
            {
                click(hwnd, x*size, y*size);
            }
        }
        return 0;
    }
flag 是 Gaussian_elimination_is_awesome!
**RCTF 2017 baby enc writeup**
本题读取 in.txt ，将每两个相邻字符两两异或，得到一个新的字符串，如此循环六次后写出到 out.txt 。
已知 flag 在 in.txt 中，格式为 RCTF{xxxxxx}，则对于 out.txt 中的每个字符都可以假设它为 RCTF{x 经过 enc()
后的结果，进行爆破即可。
    ●●●●●☆ (假设前五个字符为“RCTF{”)
     ○○○○○
      ○○○○
       ○○○
        ○○
         ●  (对于 out.txt 中的每个字符)
**massage**
Category:MISC Score:465
将HEX转BIN后得到一个1679bits的信息
1679=23*73是两个质数之积
然后按73一行进行输入，就可以看到flag。
    flag: RCTF{ArEciBo_mEsSaGe}
**mysql**
Category:MISC Score:238
本题考的是 MySQL 的数据恢复。
恢复 MySQL 被删除的数据使用可以使用工具 [undrop-for-innodb](https://weiyiling.cn/media/blogs/one/quick-uploads/p17/undrop-for-innodb-master.zip)
make编译工具，新建backup文件夹并将所需要的相关文件拷贝到文件夹下。
接着如下图所示，工具一步步恢复即可，flag为数据库ctf中user表中flag用户对应密码。
得到 flag：71e55075163d5c6410c0d9eae499c977
**intoU**
Category:MISC
将bmp格式图片信息写入频谱图，加在歌曲末尾。 （原本是将flag切割成几段，穿插剪辑在电音歌曲中电子部分。但是过程中损失较大，不易恢复）
**CRYPTO**
**RSA_sign1/2**
Category:CRYPTO
当客服期间学到的名词Bleichenbacher’s Attack
签名生成后，为满足长度要求（pubkey.n）需进行填充。
在指数很小时，可以通过构造填充部分伪造签名。使签名满足验证要求
    0001 fff …… ff 00 ASN.1 HASH
    0001 anything 00 ASN.1 HASH
而不被验证的填充部分与私钥生成的签名不同。
对于了解这个漏洞的选手来说是非常简单的题目。
而对于其他选手，RSA_sign1可以算是2的一个hint，通过一个简单的实践了解填充验证方面的问题
**传送门**
* * *
[**RCTF
2017上演安全极客的速度与激情，国际黑马战队motesolo积分榜排名第一！**](http://bobao.360.cn/news/detail/4173.html)