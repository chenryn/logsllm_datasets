Minimal example:
    trait Foo {
        type T;
    }
    #[derive(Copy)]
    struct PairFoo(pub F::T, pub F::T);
    fn main() {}
`rustc -Z unstable-options --pretty=expanded` yields:
    #![feature(no_std)]
    #![no_std]
    #[prelude_import]
    use std::prelude::v1::*;
    #[macro_use]
    extern crate "std" as std;
    trait Foo {
        type
        T;
    }
    struct PairFoo(pub F::T, pub F::T);
    #[automatically_derived]
    impl  ::std::marker::Copy for PairFoo { }
    fn main() { }
This is wrong, because the bound shouldn't be `F: Copy` but `::T:
Copy` instead.