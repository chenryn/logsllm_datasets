– ιr
n(T ′
n(Ti) 6= ιr
n(tuplem(T ′
ιr
argument of P at the left of colon) does not happen.
i ) and l 6∈ X r
1, . . . , T ′
n or ιr
n(tuple m(T1, . . . , Tm)) = ⊥ or
m)) = ⊥. In this case the event described in (9) (the
n(T ′
1, . . . , T ′
– ιr
n(Ti) 6= ιr
n(tuplem(T ′
ιr
equal ιr
in (9) does not happen.
n(tuplem(T ′
i ) and l ∈ X r
n and ιr
m)) 6= ⊥. Then ιr
1, . . . , T ′
m)) by the deﬁnition of ιr
n(tuplem(T1, . . . , Tm)) 6= ⊥ and
n(tuplem(T1, . . . , Tm)) does not
n; the event described
• Rule (dife): if ιr
n(encr (l, T1, T2)) and ιr
n(encr (l′, T3, T4)) were equal with non-
negligible probability (and not equal to ⊥) then we would have a way to make
the encryption return the same ciphertext twice with non-negligible probability
(different labels l and l′ mean that there are two different invocations of the
encryption algorithm).
• Rules (inc∗): clearly, the semantics of the term in the consequent of the rule is
always ⊥.
• Rule (st): by deﬁnition of ιr
n: if ιr
n(T ) = ⊥ for some r, then ιr
n(C(. . . , T, . . .)) =
(cid:3)
⊥, too.
Consider the graph G℘. We can use the rules in Fig. 5 to determine whether the
nodes (i.e. the statements of the protocol) are dead. Fig. 5 has described rules to derive
T1 ≃ T2, T1 6≃ T2 and stuck T . Beside them we may also have some extra axioms,
in general we have different sets of axioms at different nodes. At the “beginning” of
the graph (i.e. at the nodes corresponding to statements that are executed ﬁrst) we have
no extra axioms. Each check-statement adds one axiom to the set of axioms at its
one node, as well as to all nodes that follow that node. The statement check(x = y)
adds the axiom I(x) ≃ I(y). Indeed, if this check-statement is actually executed for
some choice of random coins r ∈ R then ιr
n(I(y)) must be equal. Their
equality is therefore also necessary for the execution of any statements that follow the
statement check(x = y). I.e. I(x) ≃ I(y) is sound at the statement check(x = y) and
all at statements that follow it.
n(I(x)) and ιr
Some of the rules in Fig. 5 can be used to simplify the terms. The rules (cant)
and (cane) can be applied to the subterms of some term from left to right. When we
introduce a special term stuck with ιr
n(stuck) = ⊥ for all r and n then we can also
use rules (inc∗) and (st) for simpliﬁcation (denoting stuck terms with stuck). We have
shown that such simpliﬁcations are sound in certain sense — Theorem 2 still holds for
all but a negligible fraction of possible random choices r ∈ R.
Some other derived relationships T1 ≃ T2 may also be useful for “simpliﬁcation”.
In particular, whenever we ﬁnd that T1 ≃ T2 holds at a statement deﬁning some vari-
able x with I(x) = T1 for a term T1 that contains subterms input (l) and term T2 that
does not contain such subterms, we simplify T1 to T2.
To summarize, the protocol analysis does the following:
1. Deﬁnes I(x) for all x ∈ Var according to Fig. 4. Also simpliﬁes these terms.
2. Annotates each statement S with axioms of the form I(x) ≃ I(y) for all state-
ments check(x = y) that precede S (in the order deﬁned by G℘).
19
3. For all statements S attempts to determine that they are dead. For this the analysis
has to do one of the following:
• Derive (using the rules in Fig. 5) I(x) ≃ I(y) and I(x) 6≃ I(y) for some
x, y ∈ Var such that either the deﬁnition of x or the deﬁnition of y pre-
cedes S.
• Derive stuck I(x) for some x ∈ Var such that the deﬁnition of x precedes
S.
4. Remove all dead statements from the protocol.
7.3 Choosing the key
We have to choose a key that can be replaced by black boxes encrypting and decrypting
with it. I.e.
this key may only be used for encryption and decryption. Choosing a
key means choosing some l ∈ Lab, such that key(l) occurs in the abstract values of
variables.
The adversary becomes information from the protocol through the statements send x,
where x ∈ Varsent, and also through the participants becoming or not becoming stuck.
The abstract values of these variables describe, how the values of these variable are con-
structed. Therefore the rule for a key key(l) to be eligible to be chosen is very simple
— if the value of some variable x in any way affects the adversary’s view, then key(l)
may occur in I(x) only in contexts encr (l′, key(l), T ) and decr (key(l), T ). Such vari-
ables x are
• the elements of Varsent;
• the variables occurring in check-statements;
• the variables occurring as ciphertexts in decryption statements;
• the variables occurring as keys in encryption or decryption statements (excep-
tion: key(l) itself may be the abstract value I(x) of x).
• the variables occurring in the right-hand side of projection statements for which
we do not statically know whether the projection succeeds or not (we know it
if the outermost constructor of I(x) is tuplem, key, random, const, secret or
encr).
If we replace the key key(l) with black boxes encrypting and decrypting with it, and
using a dummy key whenever the key key(l) is used in some other context (i.e.
its
value is used as a plaintext in encryption or as a component in a tuple) then the values
of the variables mentioned above do not change.
Note that having subterms input (l′) occurring in these terms I(x) does not invali-
date the choice of key (l). If the bit-string corresponding to input (l′) were to contain
(the bitstring corresponding to) key(l), then key(l) itself must have been sent out before
and therefore occurs in some other context in some I(y), where y ∈ Varsent. If no term
I(x), where x ∈ Varsent, contained key(l) in contexts other than encr (l′, key(l), T )
and decr (key(l), T ), and the bit-string corresponding to some input (l′) contained the
bit-string corresponding to key(l), then, by combining the adversary and the protocol,
we could obtain an algorithm that ﬁnds the key k from the black boxes E(1n, k, ·) and
D(1n, k, ·). The existence of such algorithm means that the encryption system is not
secure against CCA.
20
The precise meaning of replacing a key with encrypting and decrypting black boxes
is the following. Consider a change to the execution of the protocol we described in
Sec. 5. Namely, when we compute the values vx, we do not use the right hand side
of the statement deﬁning x, but take vx = ιr
n(x) (where r ∈R R). By theorem 2 and
remarks at the description of simplifying terms, there is only a negligible fraction of
random coin-tosses r for which some value vx changes. We see now that all values
through which anything may be communicated to the adversary can now be computed
with only the access to two black boxes respectively encrypting and decrypting with
n(key(l)). Access to the value ιr
ιr
n(key(l)) itself is not necessary.
Obviously we are not going to choose again a key that has already been chosen on
previous iterations of transforming the protocol.
7.4 Protocol transformation
Before we replace the encryptions with key (l) with the encryptions of the ﬁxed bit-
string 0, we have to make sure that we do not decrypt any values with key(l) that
were created by encrypting something with key(l) (recall the deﬁnition of security
against CCA). The key key(l) is never sent out, therefore we know exactly, where in
the protocol it is used. Let x1 := encr k1 (y1), . . . , xn := encr kn (yn) be all such
encryption statements in the protocol, that I(k1) ≃ · · · ≃ I(kn) ≃ key(l). If w :=
decr k′ (z) is a decryption statement in the protocol such that I(k′) ≃ key(l), then we
replace it by
w := case z of
x1 → y1
. . . . . . . . . . . . . . . .
xn → yn
else → decr k′ (z)
Clearly, such replacement does not change the execution of the protocol at all. This
case-statement is somewhat different than (4) — it has an else-clause. But as x1, . . . , xn
were all ciphertexts produced by encrypting with key(l) and as the used encryption
system has ciphertext integrity, the expression decr k′ (z) in the else-clause almost al-
ways fails (i.e. the value of z is not a valid ciphertext). Therefore we may remove the
else-clause and get the case-statement (4).
The key key(l) now occurs in the protocol ℘ only in contexts allowed by the deﬁni-
tion of security against CCA. We can therefore replace the statements xi := encr ki(yi)
(i ∈ {1, . . . , n}), deﬁned as above, with xi := encr ki (Z), where Z is a variable ini-
tialised to constant(0) in the protocol prelude. The resulting protocol is the protocol
℘′.
Remark.
In our security deﬁnitions we have required the encryption scheme to
hide the length of the plaintexts. In real life, the length of plaintexts is typically not
hidden. To model this, we could introduce several variables Z1, Z2, . . . whose values
are sequences of zero bits of varying length. We can mostly statically determine the
length of bit-strings encrypted during the protocol run. If we annotate each receive-
statement with the expected length of the received message then we can always stat-
ically determine the length of encrypted bit-strings. It is reasonable to assume that
such annotations have been done. Nothing can then be leaked through the length of
ciphertexts.
21
7.5 Removing case-statements
If the number of branches in some case-statement is zero then this statement is dead
code. We remove it and everything succeeding it. In the following we assume that each
case-statement has at least one branch.
Let S1, . . . , Sk be the case-statements in the protocol ℘′. Let the statement Si have
2, . . . will be n1 · n2 · · · nk; they are deﬁned in
1, ℘′
ni cases. The number of protocols ℘′
the following way.
For all i ∈ {1, . . . , n} choose ci ∈ {1 . . . , ni}; each of the protocols ℘′
2, . . .
will correspond to one of such possible choices. Let s1, . . . , sn ∈ Sem be semaphores
not occurring in the protocol ℘′. To obtain a new protocol, we change the case-
statement Si (which we assume to be of the form (4)) in the following way:
1, ℘′
• Add signal (si) immediately after the statement deﬁning xci.
• Replace Si with the following fragment:
wait (si)
check(z = xci )
w := yci
Such change is applied to all case-statements. The resulting protocol has no case-
statements. Basically, going from ℘′ to ℘′
2, . . . just means analysing all branches
of the case-statements separately.
1, ℘′
We are analyzing the branches separately, therefore we may wonder whether we are
missing some implicit ﬂows of information here. In other words, is it possible that all
n programs that we get after transforming a case-statement are secure, but the original
program is not secure? Fortunately, this is not possible. In our programming language
we have no means to let the value of the secret M inﬂuence, which of the branches will
be taken. Indeed, there was no case-statement in our original programming language.
Therefore the choice of a branch only depends on the adversary’s actions. If the ad-
versary does not know M before one of the branches is chosen then the chosen branch
does not depend on M and hence gives no information about M to the adversary.
8 A simple information-ﬂow analysis
We could use some program analysis for secure information ﬂow for trying to ﬁnd
out whether the conﬁdentiality of the secret message M is preserved. Such analyses
require specifying two subsets of Var — the sets of private input variables (in our case
{M }) and public output variables (in our case Varsent). The analysis checks that the
ﬁnal values of the public output variables do not depend on the initial values of the
private input variables.
We will now present a very simple information ﬂow analysis, similar to [18, 19]. If
some participant of the protocol contains a statement of the form x := E(x1, . . . , xm),
where E is any expression and x1, . . . , xm are all variables occurring in it, then we say
that there is information ﬂow from the variable xi to the variable x and write xi ⇒ x.
The protocol P is deemed secure if M ∗⇒ y holds for no y satsifying some of the
following conditions:
• y ∈ Varsent;
22
• y occurs in a check-statement;
• y occurs as an argument to a projection (π) statement;
• y occurs as a ciphertext is a decryption statement;
• y occurs as a key in an encryption or decryption statement.
(here ∗⇒ denotes the reﬂexive transitive closure of ⇒). Otherwise the protocol is
deemed potentially insecure.
We use that analysis to analyse the set of protocols that we construct in the next
section from the protocol that is given to us. It is to conservative to give any interesting
results for the original protocol itself. The correctness of the analysis can be easily
proved (similarly to [34]).
We are going to prove the following result about the described analysis, similar in
vein to [34], stating that if a protocol is secure then two instances of that protocol which
differ only in the value of the secret variable M execute in lock-step, giving the same
values to all public parts of the execution context.
Let E1, E2 be two execution states. We say that E1, E2 are similar (denote E1 ∼
E2), if their following components are equal:
• sm, rm, AS , C ;
• P(A) for all A ∈ Parts′;
• The ﬂags rA (for A ∈ Parts′), ix (for x ∈ Var), ps (for s ∈ Sem);
• vx for all x ∈ Var such that ¬(M ∗⇒ x);
• vx for all x ∈ Var such that E1[vx] is tagged with key.
Let m, m′ be two possible values of the secret variable M and let r, r′ ∈ R be two
possible results of random coin-tosses, such that r and r′ are equal on all points except
M ; the results of coin-tosses r(M ) must be such that m is picked as the secret value,
similarly for r′(M ) and m′.
Theorem 4. If E1 ∼ E2 and E1
r−→ E′
1 and E2
2 then E′
1 ∼ E′
2.
′
r
−→ E′
Proof. Consider the substeps of an execution step.
1. E1[P(C)] is the empty sequence of statements iff E2[P(C)] is the empty se-
quence of statements. E1[C] 6= pre iff E2[C] 6= pre. E1[P(pre)] is not the
empty sequence of statements iff E2[P(pre)] is not the empty sequence of state-
ments. Therefore execution of the protocol is stopped in E1 iff it is stopped in
E2.
2. The statement S will be the same for E1 and E2. Also, P(C) will be the same.
3. E1[rC ] = E2[rC ], therefore E1[sm] is set to ⊥ and the 4th substep is skipped iff
E2[sm] is set to ⊥ and the 4th substep is skipped.
4. Consider the statement S. E1[sm] becomes ⊥ iff E2[sm] becomes ⊥. Some
variable is uninitialised in E1 iff it is uninitialised in E2.
23
• If S is k := gen key then the new key is generated using the same ran-
dom coins in both states E1 and E2. Therefore E1[vk] = E2[vk] af-
ter executing S. Similar argument applies when S is x := random or
x := constant(b).
• If S is y := (x1, . . . , xm) then E1[iy] and E2[iy] will be both set to true.
With respect to vy, there are two possibilities:
– M ∗⇒ xi for some i. Then also M ∗⇒ y and the equality of E′
2[vy] is not necessary for E′
1 ∼ E′
2. Note that E′
and E′
tagged with key.
1[vy]
1[vy] cannot be
– ¬(M ∗⇒ xi) for all i. Then E1[vxi] = E2[vxi ] for all i. Therefore also
E1[vy] and E2[vy] will be equal after executing S.
• If S is x := πm
i (y) then E1[vy] = E2[vy]. Therefore also E1 and E2 also
agree in rC, ix and vx after executing S.
• If S is x := encr k(y) then either both or neither of E1[vk] and E2[vk] is
tagged with key, i.e. the encryption succeeds in either both or neither of
E1 and E2. Again, if M ∗⇒ k or M ∗⇒ y then also M ∗⇒ x and the
value vx does not have to be equal in E′
2. Otherwise
E1[vk] = E2[vk], E1[vy] = E2[vy] and therefore E1[vx] = E2[vx] after
executing S because the same random coins are used in E1 and E2. Note
that E′
1[vy] cannot be tagged with key.
1 and E′
2 for E′
1 ∼ E′
• If S is y := decr k(x) then E1[vk] = E2[vk] and E1[vx] = E2[vx]. There-
fore E1 and E2 change in the same way while executing S.
• If S is send x then E1[x] = E2[x]. Therefore E1[sm] = E2[sm] after
executing S.
• If S is x := receive then E1[rm] = E2[rm]. Therefore E1[vx] = E2[vx]
after executing S.
• If S is check(x = y) then E1[vx] = E2[vx] and E1[vy] = E2[vy]. There-
fore rC will become false in both or neither of E1 and E2.
• If S is signal (()s) then both E1[ps] and E2[ps] will become true.
• If S is wait (()s) then E1[ps] = E2[ps] and therefore rC will become false
in both or neither of E1 and E2.
5. E1[rpre] = E2[rpre] therefore the execution of E1 is stopped iff the execution of
E2 is stopped.
6. The arguments to the adversary — sm and AS are equal in E1 and E2. The ad-
1[rm] =
versary also uses the same random coins in both E1 and E2. Therefore E′
E′
2[C] and E′
1[AS ] = E′
1[C] = E′
2[rm], E′
2[AS ].
We have shown that either E1 and E2 both terminate or they make a step to E′
such that E′
2.
1 ∼ E′
1 and E′
2,
The initial execution states are similar for the secret values m and m′. By the last
theorem, the ﬁnal states are similar also, i.e. they agree on the value AS . The ﬁnal
state of the adversary thus does not depend on the secret value.