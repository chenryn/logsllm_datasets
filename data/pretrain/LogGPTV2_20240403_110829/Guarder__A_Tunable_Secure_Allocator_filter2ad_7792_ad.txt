### Optimized Text

**ed-1.14.1: Simple Invalid-Free Bug**
The `ed` utility contains a simple invalid-free bug, caused by a call to `free()` that was forgotten after the developer moved a buffer from dynamic to static memory. GUARDER guarantees the detection of all double/invalid free problems and provides an immediate report of the error, including the current call stack.

**gzip-1.2.4: GNU Compression Utility**
Gzip, obtained from BugBench [25], contains a stack-based buffer overflow. For testing purposes, this bug was moved to the heap. Normally, this would corrupt adjacent metadata, but when tested with each secure allocator, the crash is avoided due to their metadata segregation. Additionally, approximately 10% of GUARDER and FreeGuard tests resulted in halting execution, caused by accessing an adjacent random guard page.

**Libtiff-4.0.1: TIFF Image Library**
A malformed input will cause the affected version of Libtiff's `gif2tiff` converter tool to experience a buffer overflow, typically resulting in a program crash. When verifying this bug with GUARDER, it will always result in (1) an immediate halt due to illegal access on an adjacent random guard page, or (2) a report to the user indicating the discovery of a modified canary value. OpenBSD aborts with a "chunk info corrupted" error, while DieHarder produces no report and exits normally.

**Heartbleed: Cryptographic Library**
The Heartbleed bug exploits a buffer over-read in OpenSSL-1.0.1f. Both GUARDER and FreeGuard provide probabilistic protection against this attack, with the level of protection proportional to the amount of random guard pages installed. By default, this is 10%. Neither OpenBSD nor DieHarder can provide protection against this bug.

**PHP-5.3.6: Scripting Language Interpreter**
A variety of malicious XML data are provided as input, resulting in use-after-free and double-free conditions. GUARDER, FreeGuard, and OpenBSD halt and report each of these bugs, while DieHarder exits normally with no report made.

**polymorph-0.4.0: File Renaming Utility**
The affected version of polymorph suffers from a stack-based buffer overflow that was adapted to the heap for testing purposes, resulting in a program crash due to corrupted object metadata. Due to their segregated metadata, all secure allocators allow the application to exit normally. However, both GUARDER and FreeGuard also provide probabilistic protection proportional to the amount of installed random guard pages.

**Squid-2.3: Caching Internet Proxy Server**
Squid 2.3 contains a heap-based buffer overflow caused by an incorrect buffer size calculation. Normally, this bug will cause the program to crash due to corrupting adjacent metadata. When tested with GUARDER, the overwritten canary value at the site of the overflow is detected, and the program is immediately halted. FreeGuard exhibits similar behavior, while OpenBSD and DieHarder do not detect the overflow at all.

**Summary**
For all evaluated bugs, GUARDER was capable of either probabilistically detecting the attack—such as through the use of random guard pages to thwart buffer overflow—or immediately providing a report to the user when the error condition occurred (e.g., double-free).

**Table 5: Number of Allocations, Deallocations, and Memory Usage of Secure Allocators**

| Application       | Allocations (#) | Deallocations (#) | Memory Usage (MB) |
|-------------------|-----------------|-------------------|-------------------|
| blackscholes      | 18              | 14                | 655               |
| bodytrack         | 424519          | 424515            | 111               |
| canneal           | 30728189        | 30728185          | 1186              |
| dedup             | 4045531         | 1750969           | 1474              |
| facesim           | 4729653         | 4495883           | 491               |
| ferret            | 137968          | 137960            | 132               |
| fluidanimate      | 229992          | 229918            | 477               |
| freqmine          | 456             | 347               | 1885              |
| raytrace          | 45037352        | 45037316          | 1770              |
| streamcluster     | 8908            | 8898              | 149               |
| swaptions         | 48001811        | 48000397          | 383               |
| vips              | 1422138         | 1421738           | 104               |
| x264              | 71120           | 71111             | 604               |
| Apache            | 49              | 24                | 82                |
| Firefox           | 102216          | 101919            | 172               |
| Memcached         | 20874509        | 20290076          | 13                |
| MySQL             | 7601            | 76                | 535               |
| Pbzip2            | 491544          | 491433            | 105               |
| Pfscan            | 67              | 61                | 798               |
| SQLite            | 1458486         | 1458447           | 331               |

**Figure 4: Average Randomization Entropies of Existing Secure Allocators, Grouped by Object Size Class**
GUARDER provides a consistently high entropy that other allocators cannot support.

**Table 6: Effectiveness Evaluation on Known Vulnerabilities**

| Vulnerability     | Application     | Original | DieHarder | FreeGuard | OpenBSD | GUARDER |
|-------------------|-----------------|----------|-----------|-----------|---------|---------|
| Buffer Overwrite  | bc-1.06         | Crash    | No crash  | No crash  | No crash| No crash|
|                   | ed-1.14.1       | Crash    | No crash  | No crash  | No crash| Halt→report|
|                   | gzip-1.2.4      | Crash    | No crash  | No crash  | No crash| Halt→report|
| Buffer Over-read  | Heartbleed      | Data Leak| Data Leak | p-protect | No crash| p-protect|
| Buffer Overwrite  | Libtiff-4.0.1   | Crash    | No crash  | No crash  | Abort   | Halt→report|
| Use-After-Free    | PHP-5.3.6       | Crash    | No crash  | Halt→report| Halt→report| Halt→report|
| Double-Free       |                 | Crash    | No crash  | Halt→report| Halt→report| Halt→report|
| Buffer Overwrite  | polymorph-0.4.0 | Crash    | No crash  | No crash  | No crash| p-protect|
| Buffer Overwrite  | Squid-2.3       | Crash    | No crash  | Halt→report| No crash| Halt→report|

**Discussion**

**6.1 Customization**
(a) **Why is Customization Helpful?**
GUARDER is the first allocator that supports customizable security. Based on our evaluation (see Section 5), higher security comes at the cost of increased performance overhead and memory consumption. Sometimes, this difference could be sufficiently large to affect users' choices. For instance, GUARDER’s memory overhead using 7 bits of entropy is around 0% (not shown due to space limitations), while its memory overhead with 9 bits is around 27%. Therefore, users may choose a level of security that reduces memory consumption when required by resource-constrained environments, such as mobile phones. GUARDER provides this flexibility without the need to change and recompile applications and the allocator.

(b) **How Many Bits of Entropy Could GUARDER Support?**
Currently, GUARDER supports up to 16 bits of entropy on machines with 48 address bits, in theory, although with the potential for higher overhead. In the current design, as shown in Figure 2, the number of supported threads may limit entropy choices, since there are 16 bags in each thread, and every bag has the same size. If there are 128 threads in total, with a heap space of 128 terabytes, every bag will be 64 gigabytes, which can support up to 16 bits of entropy. Since there is room for at most \(2^{17}\) objects of size 512 kilobytes in such a bag, it may only support 16 bits of entropy if over-provisioning and guard pages are also supported. In the future, we plan to allocate each bag on-demand and may use different bag sizes to support even higher levels of entropy.

**6.2 Comparison with FreeGuard**
In this section, we compare GUARDER with the current state-of-the-art secure allocator, FreeGuard. On average, GUARDER imposes around 3% performance overhead and 27% memory overhead, while FreeGuard imposes around 1% performance overhead and 37% memory overhead. However, GUARDER supports more security features and a higher level of entropy due to its unique and novel design, as described in Section 4.