附加题：在因特网上查找 round()和 abs()函数，弄清楚它们的作用。在交互式
环境中尝试使用它们。
Python编程快速上手——让繁琐工作自动化
3
第 章
函 数
2
从前面的章节中，你已经熟悉了 print()、input()和 len()
函数。Python提供了这样一些内建函数，但你也可以编写自
己的函数。“函数”就像一个程序内的小程序。
为了更好地理解函数的工作原理，让我们来创建一
个函数。在文件编辑器中输入下面的程序，保存为
helloFunc.py：
 def hello():
 print('Howdy!')
print('Howdy!!!')
print('Hello there.')
 hello()
hello()
h ello()
第一行是def语句，它定义了一个名为hello()的函数。def语句之后的代码块
是函数体。这段代码在函数调用时执行，而不是在函数第一次定义时执行。
函数之后的 hello()语句行是函数调用。在代码中，函数调用就是函数名后跟
上括号，也许在括号之间有一些参数。如果程序执行遇到这些调用，就会跳到函数
的第一行，开始执行那里的代码。如果执行到达函数的末尾，就回到调用函数的那
行，继续像以前一样向下执行代码。
因为这个程序调用了3次hello()函数，所以函数中的代码就执行了3次。在运
行这个程序时，输出看起来像这样：
Howdy!
Howdy!!!
Hello there.
Howdy!
Howdy!!!
Hello there.
Howdy!
Howdy!!!
Hello there.
函数的一个主要目的就是将需要多次执行的代码放在一起。如果没有函数定
义，你可能每次都需要复制粘贴这些代码，程序看起来可能会像这样：
print('Howdy!')
print('Howdy!!!')
print('Hello there.')
print('Howdy!')
print('Howdy!!!')
print('Hello there.')
print('Howdy!')
print('Howdy!!!')
print('Hello there.')
一般来说，我们总是希望避免复制代码，因为如果一旦决定要更新代码（比如
说，发现了一个缺陷要修复），就必须记住要修改所有复制的代码。
随着你获得更多的编程经验，常常会发现自己在为代码“消除重复”，即去除
一些重复或复制的代码。消除重复能够使程序更短、更易读、更容易更新。
3.1 def 语句和参数
如果调用print()或len()函数，你会传入一些值，放在括号之间，在这里称为“参
数”。也可以自己定义接收参数的函数。在文件编辑器中输入这个例子，将它保存
为helloFunc2.py：
 def hello(name):
 print('Hello ' + name)
 hello('Alice')
h ello('Bob')
如果运行这个程序，输出看起来像这样：
Hello Alice
Hello Bob
在这个程序的hello()函数定义中，有一个名为name的变元。“变元”是一个
变量，当函数被调用时，参数就存放在其中。hello()函数第一次被调用时，使用的
Python编程快速上手——让繁琐工作自动化
参数是'Alice'。程序执行进入该函数，变量 name 自动设为'Alice'，就是被 print()
语句打印出的内容。
关于变元有一件特殊的事情值得注意：保存在变元中的值，在函数返回后就丢
失了。例如前面的程序，如果你在 hello('Bob')之后添加 print(name)，程序会报
NameError，因为没有名为name的变量。在函数调用hello('Bob')返回后，这个变量
被销毁了，所以print(name)会引用一个不存在的变量name。
这类似于程序结束时，程序中的变量会丢弃。在本章稍后，当我们探讨函数的
局部作用域时，我会进一步分析为什么会这样。
3.2 返回值和 return 语句
如果调用len()函数，并向它传入像'Hello'这样的参数，函数调用就求值为整数5。
这是传入的字符串的长度。一般来说，函数调用求值的结果，称为函数的“返回值”。
用def语句创建函数时，可以用return语句指定应该返回什么值。return语句包
含以下部分：
 return关键字；
 函数应该返回的值或表达式。
如果在return语句中使用了表达式，返回值就是该表达式求值的结果。例如，
下面的程序定义了一个函数，它根据传入的数字参数，返回一个不同的字符串。在
文件编辑器中输入以下代码，并保存为magic8Ball.py：
 import random
 def getAnswer(answerNumber):
 if answerNumber == 1:
return 'It is certain'
elif answerNumber == 2:
return 'It is decidedly so'
elif answerNumber == 3:
return 'Yes'
elif answerNumber == 4:
return 'Reply hazy try again'
elif answerNumber == 5:
return 'Ask again later'
elif answerNumber == 6:
return 'Concentrate and ask again'
elif answerNumber == 7:
return 'My reply is no'
elif answerNumber == 8:
return 'Outlook not so good'
elif answerNumber == 9:
return 'Very doubtful'
 r = random.randint(1, 9)
 fortune = getAnswer(r)
 p rint(fortune)
第3章 函数
在这个程序开始时，Python 首先导入 random模块。然后 getAnswer()函数被
定义。因为函数是被定义（而不是被调用），所以执行会跳过其中的代码。接下来，
random.randint()函数被调用，带两个参数，1和9。它求值为1和9之间的一个随
机整数（包括1和9），这个值被存在一个名为r的变量中。
getAnswer()函数被调用，以r作为参数。程序执行转移到getAnswer()函数的
顶部，r 的值被保存到名为 answerNumber 的变元中。然后，根据 answerNumber
中的值，函数返回许多可能字符串中的一个。程序执行返回到程序底部的代码行，
即原来调用 getAnswer()的地方。返回的字符串被赋给一个名为 fortune 变量，然
后它又被传递给print()调用，并被打印在屏幕上。
请注意，因为可以将返回值作为参数传递给另一个函数调用，所以你可以将下
面3行代码
r = random.randint(1, 9)
fortune = getAnswer(r)
print(fortune)
缩写成一行等价的代码：
print(getAnswer(random.randint(1, 9)))
记住，表达式是值和操作符的组合。函数调用可以用在表达式中，因为它求值
为它的返回值。
3.3 None 值
在Python中有一个值称为None，它表示没有值。None是NoneType数据类型
的唯一值（其他编程语言可能称这个值为null、nil或undefined）。就像布尔值True
和False一样，None必须大写首字母N。
如果你希望变量中存储的东西不会与一个真正的值混淆，这个没有值的值就可
能有用。有一个使用None的地方就是print()的返回值。print()函数在屏幕上显示文
本，但它不需要返回任何值，这和len()或input()不同。但既然所有函数调用都需要
求值为一个返回值，那么print()就返回None。要看到这个效果，请在交互式环境中
输入以下代码。
>>> spam = print('Hello!')
Hello!
>>> None == spam
True
在幕后，对于所有没有 return 语句的函数定义，Python 都会在末尾加上 return
None。这类似于 while 或 for 循环隐式地以 continue 语句结尾。而且，如果使用不
带值的return语句（也就是只有return关键字本身），那么就返回None。
Python编程快速上手——让繁琐工作自动化
3.4 关键字参数和 print()
大多数参数是由它们在函数调用中的位置来识别的。例如，random.randint(1, 10)
与random.randint(10, 1)不同。函数调用random.randint(1, 10)将返回1到10之间的
一个随机整数，因为第一个参数是范围的下界，第二个参数是范围的上界（而
random.randint(10, 1)会导致错误）。
但是，“关键字参数”是由函数调用时加在它们前面的关键字来识别的。关键
字参数通常用于可选变元。例如，print()函数有可选的变元end和sep，分别指定在
参数末尾打印什么，以及在参数之间打印什么来隔开它们。
如果运行以下程序：
print('Hello')
print('World')
输出将会是：
Hello
World
这两个字符串出现在独立的两行中，因为 print()函数自动在传入的字符串末尾
添加了换行符。但是，可以设置end关键字参数，将它变成另一个字符串。例如，
如果程序像这样：
print('Hello', end='')
print('World')
输出就会像这样：
HelloWorld
输出被打印在一行中，因为在'Hello'后面不再打印换行，而是打印了一个空
字符串。如果需要禁用加到每一个 print()函数调用末尾的换行，这就很有用。
类似地，如果向 print()传入多个字符串值，该函数就会自动用一个空格分隔它
们。在交互式环境中输入以下代码：
>>> print('cats', 'dogs', 'mice')
cats dogs mice
但是你可以传入 sep关键字参数，替换掉默认的分隔字符串。在交互式环境中
输入以下代码：
>>> print('cats', 'dogs', 'mice', sep=',')
cats,dogs,mice
也可以在你编写的函数中添加关键字参数，但必须先在接下来的两章中学习列
表和字典数据类型。现在只要知道，某些函数有可选的关键字参数，在函数调用时
可以指定。
第3章 函数
3.5 局部和全局作用域
在被调用函数内赋值的变元和变量，处于该函数的“局部作用域”。在所有函
数之外赋值的变量，属于“全局作用域”。处于局部作用域的变量，被称为“局部
变量”。处于全局作用域的变量，被称为“全局变量”。一个变量必是其中一种，不
能既是局部的又是全局的。
可以将“作用域”看成是变量的容器。当作用域被销毁时，所有保存在该作用
域内的变量的值就被丢弃了。只有一个全局作用域，它是在程序开始时创建的。如
果程序终止，全局作用域就被销毁，它的所有变量就被丢弃了。否则，下次你运行
程序的时候，这些变量就会记住它们上次运行时的值。
一个函数被调用时，就创建了一个局部作用域。在这个函数内赋值的所有变量，
存在于该局部作用域内。该函数返回时，这个局部作用域就被销毁了，这些变量就
丢失了。下次调用这个函数，局部变量不会记得该函数上次被调用时它们保存的值。
作用域很重要，理由如下：
 全局作用域中的代码不能使用任何局部变量；
 但是，局部作用域可以访问全局变量；
 一个函数的局部作用域中的代码，不能使用其他局部作用域中的变量。
 如果在不同的作用域中，你可以用相同的名字命名不同的变量。也就是说，可
以有一个名为spam的局部变量，和一个名为spam的全局变量。
Python有不同的作用域，而不是让所有东西都成全局变量，这是有理由的。这
样一来，当特定函数调用中的代码修改变量时，该函数与程序其他部分的交互，只
能通过它的参数和返回值。这缩小了可能导致缺陷的代码作用域。如果程序只包含
全局变量，又有一个变量赋值错误的缺陷，那就很难追踪这个赋值错误发生的位置。
它可能在程序的任何地方赋值，而你的程序可能有几百到几千行！但如果缺陷是因
为局部变量错误赋值，你就会知道，只有那一个函数中的代码可能产生赋值错误。
虽然在小程序中使用全局变量没有太大问题，但当程序变得越来越大时，依赖
全局变量就是一个坏习惯。
3.5.1 局部变量不能在全局作用域内使用
考虑下面的程序，它在运行时会产生错误：
def spam():
eggs = 31337
spam()
print(eggs)
如果运行这个程序，输出将是：