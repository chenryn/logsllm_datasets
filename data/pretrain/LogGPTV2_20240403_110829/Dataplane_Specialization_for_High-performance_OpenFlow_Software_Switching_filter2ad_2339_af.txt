SIGCOMM Computer Communication Review, vol. 38,
no. 2, pp. 69–74, 2008.
[2] The Open Networking Foundation, OpenFlow Switch
Speciﬁcations v.1.4.0, 2013.
[3] P. Costa, M. Migliavacca, P. Pietzuch, and A. L. Wolf,
“NaaS: network-as-a-service in the cloud,” in Hot-ICE,
vol. 12, pp. 1–1, 2012.
[4] J. Mudigonda, P. Yalagandula, J. Mogul, B. Stiekes, and
Y. Pouffary, “NetLord: a scalable multi-tenant network
architecture for virtualized datacenters,” in SIGCOMM,
pp. 62–73, 2011.
[5] A. Sadasivarao, S. Syed, P. Pan, C. Liou, A. Lake, C. Guok,
and I. Monga, “Open Transport Switch: A software deﬁned
networking architecture for transport networks,” in HotSDN,
pp. 115–120, 2013.
[6] S. Vissicchio, O. Tilmans, L. Vanbever, and J. Rexford,
“Central control over distributed routing,” in SIGCOMM,
pp. 43–56, 2015.
[7] D. Han, A. Anand, F. Dogar, B. Li, H. Lim, M. Machado,
A. Mukundan, W. Wu, A. Akella, D. G. Andersen, J. W.
Byers, S. Seshan, and P. Steenkiste, “XIA: Efﬁcient support
for evolvable internetworking,” in NSDI, 2012.
[8] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto,
J. Rexford, A. Story, and D. Walker, “Frenetic: a network
programming language,” in ICFP, pp. 279–291, 2011.
[9] R. Soulé, S. Basu, P. J. Marandi, F. Pedone, R. Kleinberg,
E. G. Sirer, and N. Foster, “Merlin: a language for
provisioning network resources,” in CoNEXT, pp. 213–226,
2014.
[10] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and P. Hudak,
“Maple: Simplifying SDN programming using algorithmic
policies,” in SIGCOMM, pp. 87–98, 2013.
[11] L. Suresh, J. Schulz-Zander, R. Merz, A. Feldmann, and
T. Vazao, “Towards programmable enterprise WLANS with
Odin,” in HotSDN, pp. 115–120, 2012.
[12] C. Chen, C. Liu, P. Liu, B. T. Loo, and L. Ding, “A scalable
multi-datacenter layer-2 network architecture,” in SOSR,
pp. 1–12, 2015.
[13] T. K. et al., “Network virtualization in multi-tenant
datacenters,” in NSDI, pp. 203–216, 2014.
[14] N. Amaya, S. Yan, M. Channegowda, B. Rofoee, Y. Shu,
M. Rashidi, Y. Ou, G. Zervas, R. Nejabati, D. Simeonidou,
et al., “First demonstration of software deﬁned networking
(SDN) over space division multiplexing (SDM) optical
networks,” in ECOC, 2013.
[15] A. Gupta, M. Shahbaz, L. Vanbever, H. Kim, R. Clark,
N. Feamster, J. Rexford, and S. Shenker, “SDX: a software
deﬁned Internet Exchange,” in SIGCOMM, pp. 551–562,
2014.
[16] Netronome, “SDN Gateway: Reference design.”
https://netronome.com/sdn-gateway.
[17] Intel, “Network function virtualization: Virtualized BRAS
with Linux and Intel architecture.” https://networkbuilders.
intel.com/docs/Network_Builders_RA_vBRAS_Final.pdf.
[18] Intel, “Network function virtualization: Quality of Service in
Broadband Remote Access Servers with Linux and Intel
architecture.” https://networkbuilders.intel.com/docs/
Network_Builders_RA_NFV_QoS_Aug2014.pdf.
[19] B. Pfaff, J. Pettit, T. Koponen, E. Jackson, A. Zhou,
J. Rajahalme, J. Gross, A. Wang, J. Stringer, P. Shelar,
K. Amidon, and M. Casado, “The design and implementation
of Open vSwitch,” in NSDI, pp. 117–130, 2015.
[20] P. Gupta and N. McKeown, “Algorithms for packet
classiﬁcation,” Netwrk. Mag. of Global Internetwkg., vol. 15,
no. 2, pp. 24–32, 2001.
[21] P. Gupta and N. McKeown, “Packet classiﬁcation on
multiple ﬁelds,” in SIGCOMM, pp. 147–160, 1999.
[22] A. Feldman and S. Muthukrishnan, “Tradeoffs for packet
classiﬁcation,” in INFOCOM, vol. 3, pp. 1193–1202, 2000.
[23] V. Srinivasan, S. Suri, and G. Varghese, “Packet classiﬁcation
using tuple space search,” in SIGCOMM, pp. 135–146, 1999.
[24] K. Kogan, S. Nikolenko, O. Rottenstreich, W. Culhane, and
P. Eugster, “SAX-PAC: scalable and expressive packet
classiﬁcation,” in SIGCOMM, pp. 15–26, 2014.
[25] S. Shirali-Shahreza and Y. Ganjali, “ReWiFlow: restricted
wildcard OpenFlow rules,” SIGCOMM Comput. Commun.
Rev., vol. 45, no. 5, pp. 29–35, 2015.
[26] M. Casado, T. Koponen, D. Moon, and S. Shenker,
“Rethinking packet forwarding hardware,” in HotNets, 2008.
[27] C. Kim, M. Caesar, A. Gerber, and J. Rexford, “Revisiting
route caching: The world should be ﬂat,” in PAM, pp. 3–12,
2009.
[28] Y. Liu, S. O. Amin, and L. Wang, “Efﬁcient FIB caching
using minimal non-overlapping preﬁxes,” SIGCOMM
Comput. Commun. Rev., vol. 43, no. 1, pp. 14–21, 2013.
[29] N. Shelly, E. J. Jackson, T. Koponen, N. McKeown, and
J. Rajahalme, “Flow caching for high entropy packet ﬁelds,”
SIGCOMM Comput. Commun. Rev., vol. 44, no. 4, 2014.
[30] EANTC, “Validating Cisco’s NFV infrastructure Pt. 1.”
http://www.lightreading.com/nfv/nfv-tests-and-trials/
validating-ciscos-nfv-infrastructure-pt-1/d/d-id/718684.
[31] C. Rotsos, N. Sarrar, S. Uhlig, R. Sherwood, and A. W.
Moore, “OFLOPS: an open framework for OpenFlow switch
evaluation,” in PAM, pp. 85–95, 2012.
[32] D. Y. Huang, K. Yocum, and A. C. Snoeren, “High-ﬁdelity
switch models for software-deﬁned network emulation,” in
HotSDN, pp. 43–48, 2013.
[33] A. Bianco, R. Birke, L. Giraudo, and M. Palacin, “OpenFlow
switching: Data plane performance,” in IEEE ICC, pp. 1–5,
2010.
[34] M. Yu, A. Wundsam, and M. Raju, “NOSIX: a lightweight
portability layer for the SDN OS,” SIGCOMM Comput.
Commun. Rev., vol. 44, no. 2, pp. 28–35, 2014.
[35] J. Leng, Y. Zhou, J. Zhang, and C. Hu, “An inference attack
model for ﬂow table capacity and usage: Exploiting the
vulnerability of ﬂow table overﬂow in software-deﬁned
network.” http://arxiv.org/abs/1504.03095.
[36] D. Zhou, B. Fan, H. Lim, M. Kaminsky, and D. G. Andersen,
“Scalable, high performance Ethernet forwarding with
CuckooSwitch,” in CoNEXT, pp. 97–108, 2013.
[37] G. Rétvári, J. Tapolcai, A. K˝orösi, A. Majdán, and
Z. Heszberger, “Compressing IP forwarding tables: Towards
entropy bounds and beyond,” in SIGCOMM, pp. 111–122,
2013.
[38] H. Asai and Y. Ohara, “Poptrie: a compressed trie with
population count for fast and scalable software IP routing
table lookup,” in SIGCOMM, pp. 57–70, 2015.
[39] E. Gamma, R. Helm, R. Johnon, and J. Vlissides, Design
Patterns, elements of reusable object-oriented software.
Addison Wesley, 1994.
551
[40] Intel, “Data Plane Development Kit.” http://dpdk.org.
[41] A. Császár and G. Pongrácz, “SDN virtual switching
innovation (demo),” 2015. Mobile World Congress, https:
//twitter.com/ericssonhungary/status/573087639080972288.
[42] “Openﬂow reference swtich.”
git://gitosis.stanford.edu/openﬂow.git.
[43] “CPqD OpenFlow repository.”
https://github.com/CPqD/ofsoftswitch13.
[44] “The xDPd project.” http://xdpd.org.
[45] “LINC software repository.”
https://github.com/FlowForwarding/LINC-Switch.
[46] P. Newman, G. Minshall, and T. L. Lyon, “IP switching –
ATM under IP,” IEEE/ACM Trans. Netw., vol. 6, no. 2,
pp. 117–129, 1998.
[47] “6WINDGate virtual switch.” http://www.6wind.com/
6windgate-performance/virtual-switching.
[48] A. Canteaut, C. Lauradoux, and S. A., “Understanding cache
attacks,” 2006.
[49] M. Shahbaz, S. Choi, B. Pfaff, C. Kim, N. Feamster,
N. McKeown, and J. Rexford, “PISCES: a programmable,
protocol-independent software switch,” in SIGCOMM, 2016.
[50] S. Singh, F. Baboescu, G. Varghese, and J. Wang, “Packet
classiﬁcation using multidimensional cutting,” in
SIGCOMM, pp. 213–224, 2003.
[51] M. Ku´zniar, P. Perešíni, and D. Kosti´c, “What you need to
know about SDN ﬂow tables,” in Passive and Active
Measurement, pp. 347–359, 2015.
[52] L. Csikor, M. Szalay, B. Sonkoly, and L. Toka, “NFPA:
Network function performance analyzer,” in IEEE
NFV-SDN, Demo Track, pp. 17–19, 2015.
[53] “Intel Ethernet Controller XL710 10/40 GbE – Product
Brief,” 2014.
[54] P. Emmerich, S. Gallenmüller, D. Raumer, F. Wohlfart, and
G. Carle, “MoonGen: a scriptable high-speed packet
generator,” in IMC, pp. 275–287, 2015.
[55] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown,
J. Rexford, C. Schlesinger, D. Talayco, A. Vahdat,
G. Varghese, and D. Walker, “P4: programming
protocol-independent packet processors,” SIGCOMM
Comput. Commun. Rev., vol. 44, no. 3, pp. 87–95, 2014.
[56] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese, N. McKeown,
M. Izzard, F. Mujica, and M. Horowitz, “Forwarding
metamorphosis: Fast programmable match-action processing
in hardware for SDN,” in SIGCOMM, pp. 99–110, 2013.
[57] I. Marinos, R. N. Watson, and M. Handley, “Network stack
specialization for performance,” in SIGCOMM, pp. 175–186,
2014.
[58] F. Noel, L. Hornof, C. Consel, and J. Lawall, “Automatic,
template-based run-time specialization: implementation and
experimental study,” in ICCL, pp. 132–142, 1998.
[59] F. Smith, D. Grossman, G. Morrisett, L. Hornof, and T. Jim,
“Compiling for template-based run-time code generation,”
Journal of Functional Programming, vol. 13, no. 3,
pp. 677–708, 2003.
[60] M. B. et al., “Impala: A modern, open-source SQL engine
for Hadoop,” in CIDR, 2015.
[61] J. Cheney, S. Lindley, and P. Wadler, “A practical theory of
language-integrated query,” in ICFP, pp. 403–416, 2013.
[62] M. P. Plezbert and R. K. Cytron, “Does "just in time" =
"better late than never"?,” in POPL, pp. 120–131, 1997.
[63] D. Joseph and I. Stoica, “Modeling middleboxes,” Network,
IEEE, vol. 22, no. 5, pp. 20–25, 2008.
[64] A. Sapio, M. Baldi, and G. Pongrácz, “Cross-platform
m(cid:94)
(cid:16)
(cid:17)
estimation of network function performance,” in EWSDN,
pp. 73–78, 2015.
[65] S. Gallenmüller, P. Emmerich, F. Wohlfart, D. Raumer, and
G. Carle, “Comparison of frameworks for high-performance
packet IO,” in ANCS, pp. 29–38, 2015.
[66] M. Bansal, A. Schulman, and S. Katti, “Atomix: a
framework for deploying signal processing applications on
wireless infrastructure,” in NSDI, pp. 173–188, 2015.
Appendix
We are given a ﬂow table T = {(Fi,j : j ∈ [1, n]) →
ai : i ∈ [1, m]}, where each key Fi,j is either constant or a
wildcard. We call a ﬂow table regular if it matches on only a
single ﬁeld that contains no masks/wildcards except the last
catch-all rule. Consider the below problem formulation:
REGDECOMP(T , k): given ﬂow table T and integer k, is
there a semantically equivalent pipeline T so that |T | ≤ k
and each ﬂow table τ ∈ T is regular?
THEOREM 1. REGDECOMP(T , k) is coNP-hard.
SKETCH OF THE PROOF: We show that REGDECOMP(T ,
k) is difﬁcult already for k = 1 by reducing 3SAT to REGDE-
COMP(T , 1).
We are given a 3SAT instance on n variables X1, . . . , Xn
in conjunctive normal form
f (X1, X2, . . . , Xn) =
(¬)Xi1 ∨ (¬)Xi2 ∨ (¬)Xi3
i=1
such that no variable appears in all clauses as an all positive
(un-negated) or all negative (negated) literal.
First, we construct a ﬂow table T = {Fi,j} of n ﬁelds
(one for each variable) and m rows (one for each clause) as
follows: Fi,j = 0 if Xj is positive in the i-th clause, Fi,j = 1
if it is negative, and Fi,j = ∗ if Xj does not appear at all.
We add an extra ﬁeld Y and set it to 1 for all rows. For each
row i ∈ [1, m] we set the action ai = false and we also add
a low-priority catch-all rule with action true.
Then for any choice of variables X and Y = 1, T effec-
tively evaluates f (X); the i-th row matches, yielding action
false, if and only if the i-th clause is not satisﬁed. For the
3SAT example (X1 ∨ ¬X3 ∨ X4) ∧ (¬X1 ∨ X2 ∨ X3) we
get the table:
X1 X2 X3 X4
0
0
1
*
*
*
*
0
*
1
0
*
Y
1
1
*
false
false
true
Then, asking whether the 3SAT instance is not satisﬁable
is equivalent with deciding whether T can be decomposed
into the pipeline with the single regular table:
Y
1
0
false
true
This is because the 3SAT is not satisﬁable if and only if T
returns false for Y = 1 independently of the input X.
552