# [Projects](projects.md)
* Improvement: Explain the updates on the repository-orm project.
    In the latest version `0.2.0`, we added:
    * Support for the [TinyDB repository](https://lyz-code.github.io/repository-orm/tinydb_repository/).
    * Support for regular expressions in the `search` method.
    * Easier repository loading with `load_repository` function.
* Improvement: Add a link to the meilisearch [blog](https://blog.meilisearch.com/).
* New: Create the quantified self project.
    With links to the two starting points [HPI](https://beepb00p.xyz/hpi.html) and [bionic](https://github.com/bionic-dev/bionic).
* New: [Sketch how to automate repetitive tasks prompted by email events.](projects.md#automate-email-management)
    Most of the emails I receive require repetitive actions that can be automated,
    I've stumbled upon [notmuchmail](https://notmuchmail.org/), which looks very
    promising. A friend suggested to use
    [afew](https://afew.readthedocs.io/en/latest/) for tagging, and I'd probably use
    [alot](https://github.com/pazz/alot) to interact with the system (and finally be
    able to use email from the cli).
* Improvement: [Add interesting interface.](projects.md#quantified-self)
    For the interface [adri's memex](https://github.com/adri/memex) looks awesome!
    It's inspired in the Andrew Louis [talk Building
    a Memex](https://www.youtube.com/watch?v=DFWxvQn4cf8&t=1616s) whose [blog
    posts](https://hyfen.net/memex/) seems to be a gold mine.
    Also look at [hpi's compilation](https://github.com/hpi/hpi).
* New: [Sketch how to improve the launching of applications with i3wm.](projects.md#improve-the-way-of-launching-applications-with-i3wm)
    In the past I tried installing [rofi](https://github.com/davatorium/rofi)
    without success, I should try again. If the default features are not enough,
    check [adi1090x's custom resources](https://github.com/adi1090x/rofi).
* Improvement: [Show the changes of repository-orm 0.3.1.](projects.md#repository-orm)
    +* Add `first` and `last` methods to the repositories.
    +* Make entity `id_` definition optional.
    +* add `_model_name` attribute to entities.
* Improvement: [Add woop awesome quantified self resources to the research list.](projects.md#quantified-self)
* New: [Add project to migrate software bug tracker to a vendor free one like `git-bug`.](projects.md#migrate-software-bug-tracker-to-a-vendor-free-one)
* New: [Improve the notification management in Linux.](projects.md#improve-the-notification-management-in-linux)
    Create new seed project to be able to group and silence the notifications under a custom logic.
    For example:
    * If I want to focus on a task, only show the most important ones.
    * Only show alerts once every X minutes. Or define that I want to receive them
        the first 10 minutes of every hour.
    * If I'm not working, silence all work alerts.
* New: [Improve the hard drive monitor system.](projects.md#improve-the-hard-drive-monitor-system)
    Create new seed project to use something like [scrutiny](https://github.com/AnalogJ/scrutiny) (there's a [linuxserver image](https://docs.linuxserver.io/images/docker-scrutiny)) to collect and display the information. For alerts, use one of their [supported providers](https://github.com/AnalogJ/scrutiny#notifications).
* New: [Aggregate all notifications.](projects.md#aggregate-all-notifications)
    Instead of reading the email, github, gitlab, discourse, reddit notifications,
    aggregate all in one place and show them to the user in a nice command line
    interface.
    For the aggregator server, my first choice would be [gotify](https://gotify.net/).
* New: [Add faker-optional to the dormant plant projects.](projects.md#faker-optional)
* New: [Add seedling project to create factoryboy factories from pydantic models automatically.](projects.md#other)
# DevOps
## Continuous Integration
### [Flakehell](flakeheaven.md)
* Correction: Update the git repository.
    The existent repository has been archived in favor of [this one](https://github.com/flakeheaven/flakeheaven)
* New: Explain how to patch the extended_default_ignore error for versions > 3.9.0.
    Add to your your `pyproject.toml`:
    ```ini
    [tool.flakeheaven]
    extended_default_ignore=[]  # add this
    ```
# Coding
## [Python](python.md)
* Improvement: Add aiomultiprocess to the list of libraries to test.
    [aiomultiprocess](https://github.com/omnilib/aiomultiprocess): Presents
    a simple interface, while running a full AsyncIO event loop on each
    child process, enabling levels of concurrency never before seen in
    a Python application. Each child process can execute multiple coroutines
    at once, limited only by the workload and number of cores available.
* New: [Add interesting links on how to write good documentation.](python.md#how-to-write-good-documentation)
    I would like to refactor
    [divio's](https://documentation.divio.com/introduction/) and
    [Vue's](https://v3.vuejs.org/guide/contributing/writing-guide.html#principles)
    guidelines and apply it to my projects.
* Improvement: Add FastAPI docs as a model to study and follow.
* New: Add apprise to the interesting libraries to explore.
    [apprise](https://github.com/caronc/apprise): Allows you to send
    a notification to almost all of the most popular notification services
    available to us today such as: Linux, Telegram, Discord, Slack, Amazon
    SNS, Gotify, etc. Look at [all the supported notifications](https://github.com/caronc/apprise#supported-notifications)
    `(¬º-°)¬`.
* New: Add kivi and kivimd to the interesting libraries to explore.
    [kivi](https://kivy.org/) is used to create android/Linux/iOS/Windows applications with python. Use it with [kivimd](https://github.com/kivymd/KivyMD) to make it beautiful, check [the examples](https://github.com/HeaTTheatR/Articles) and the [docs](https://kivymd.readthedocs.io/en/latest/).
### [Boto3](boto3.md)
* New: Introduce the AWS SDK library and explain how to test it.
    [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) is
    the AWS SDK for Python to create, configure, and manage AWS services,
    such as Amazon Elastic Compute Cloud (Amazon EC2) and Amazon Simple Storage
    Service (Amazon S3). The SDK provides an object-oriented API as well as
    low-level access to AWS services.
    For [testing](boto3.md#testing), try to use [moto](boto3.md#moto), using the [Botocore's stubber](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/stubber.html) as fallback option.
* New: Explain how to test ec2, route53, s3, and rds resources.
* New: Explain how to test vpc and auto scaling group resources.
* Improvement: Explain how to extract the instance when testing autoscaling groups.
    Also track the [issue to add support to launch templates](boto3.md#issues).
* New: [Explain how to test security groups.](boto3.md#test-security-groups)
* Correction: [Add note that pagination is not yet supported when testing route53.](boto3.md#test-route53)
    I've [opened an issue](https://github.com/spulec/moto/issues/3879) to
    solve it.
### [Type Hints](type_hints.md)
* Improvement: Explain how to ignore a linter error and a type error.
    With `# type: ignore # noqa: W0212`
### [Logging](python_logging.md)
* New: Explain how to log python program exceptions better than to a file.
    Using `logging` to write write exceptions and breadcrumbs to a file
    might not be the best solution because unless you look at it directly
    most errors will pass unnoticed.
    To actively monitor and react to code exceptions use an application monitoring
    platform like [sentry](https://sentry.io/welcome/).
    In the article I explain what are the advantages of using this solution
    and do a comparison between Sentry and [GlitchTip](https://glitchtip.com).
### [DeepDiff](deepdiff.md)
* Improvement: Add warning that regular expressions are not yet supported.
    Until [#239](https://github.com/seperman/deepdiff/pull/239) is merged, the
    official library doesn't support searching for regular expressions. You can
    use [my fork](https://github.com/lyz-code/deepdiff) instead.
* Improvement: Remove advice to use my fork instead.
    The original one has already merged my [PR](https://github.com/seperman/deepdiff/pull/239) `＼\ ٩( ᐛ )و /／`. Beware though as the `regexp` are not enabled by default (against my will). You need to use the `use_regexp=True` as an argument to `grep` or `DeepSearch`.
### [FactoryBoy](factoryboy.md)
* New: [Explain how to use `Enum` with factoryboy.](factoryboy.md#word-from-enum-choices)
### [Faker](faker.md)
* New: [Explain how to create `Optional` data.](faker.md#create-optional-data)
    [`faker-optional`](https://lyz-code.github.io/faker-optional/) is
    a custom faker provider that acts as a wrapper over other Faker providers to return their value or `None`. Useful to
    create data of type `Optional[Any]`.
### [FastAPI](python_plugin_system.md)
* New: Add beets system as a first approach.
    When building Python applications, it's good to develop the core of your
    program, and allow extension via plugins.
    I still don't know how to do it, but [Beets plugin system](https://beets.readthedocs.io/en/stable/dev/plugins.html)
    looks awesome for a first start.
* New: Introduce FastAPI the pydantic friendly python framework to build APIs.
    [FastAPI](https://fastapi.tiangolo.com/) is a modern, fast (high-performance),
    web framework for building APIs with Python 3.6+ based on standard Python type