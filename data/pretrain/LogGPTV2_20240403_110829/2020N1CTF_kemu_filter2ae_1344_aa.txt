# 2020N1CTF kemu
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
当时N1CTF kemu没做出来，而且没找到详细的writeup，于是前段时间无聊的时候把它翻出来研究了一下。
## Step1：分析设备
查看题目给的lanch.sh
    #!/bin/bash
    pwd=`pwd`
    #./qemu-system-x86_64 \
    timeout --foreground 600 ${pwd}/qemu-system-x86_64 \
        -initrd ${pwd}/rootfs.img -nographic -kernel ${pwd}/kernel-guest \
        -L ${pwd}/pc-bios -append "priority=low console=ttyS0 loglevel=3 kaslr" \
        -drive file=${pwd}/nvme.raw,format=raw,if=none,id=Dxx -device nvme,drive=Dxx,serial=1234 \
        -monitor /dev/null
设备就是nvme，它是qemu中存在的PCI设备。
在qemu中查看PCI的I/O信息，我第一次在ubuntu16.04上运行，报错为libc.so.6需要libc-2.27.so来运行，因此使用ubuntu18.04运行。`sudo
./lauch.sh`
    /home/pwn # lspci
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 0108: 8086:5845 -> nvme
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
搜索资料知道nvme设备的设备号是设备号是5845
    /home/pwn # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource
    0x00000000febf0000 0x00000000febf1fff 0x0000000000140204
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x00000000febf3000 0x00000000febf3fff 0x0000000000040200
## Step2：分析函数
用IDA打开qemu-system-x86_64，发现程序被去符号化了，很多函数没有识别出来，而且比赛时没给diff，因此很难定位漏洞函数。可以试着从其他带符号的qemu-system-x86_64程序或者源代码进行对比分析，恢复部分函数名便于分析。
从启动脚本中知道设备是nvme，那么先定位region，从nvme_realize函数初始化的region下手。
注册了nvme_ops内存操作空间，但这题的漏洞不在这里。往下看msix_init_exclusive_bar也利用了这个设备
这里也对这个BAR空间进行了初始化，并调用了msix_init对msix中断机制进行初始化。
    __int64 __fastcall msix_init(__int64 a1, unsigned __int16 a2, __int64 table_bar, unsigned __int8 a4, unsigned int table_offset, __int64 pba_bar, unsigned __int8 a7, unsigned int pba_offset, unsigned __int8 a9, __int64 a10)
    {
      ......
      result = sub_4F7A70(a1, 0x11u, a9, 12, a10);
      if ( result >= 0 )
      {
        ......
        sub_4FACA0(a1, a2);
        memory_region_init_io(a1 + 0x820, a1, misx_table_mmio_ops, a1, "msix-table", v11);
        memory_region_add_subregion(table_bar, table_offset, a1 + 0x820);
        memory_region_init_io(a1 + 0x910, a1, msix_pba_mmio_ops, a1, "msix-pba", 0x200LL);
        memory_region_add_subregion(pba_bar, pba_offset, a1 + 0x910);
        result = 0LL;
      }
      return result;
    }
能发现它们分别注册了msix_table_mmio_ops和msix_pba_mmio_ops到table_bar和pba_bar。
###  MSI-X Capability结构的组成方式
MSI-X中断机制中，MSI-X Table structure和PBA
structure存放在设备的BAR空间里，这两个structure可以map到相同BAR，也可以map到不同BAR，但是这个BAR必须是memory
BAR而不能是IO
BAR，也就是说两个structure要map到memory空间。而在这题中`table_bar==pba_bar`，它们同时共享一段mmio内存空间。
现在出现一个问题，它们都映射到同一个BAR空间中，而这段内存大小为0x1000，如何区分两者呢？追溯table_offset和pba_offset可以知道到，table_offset为0，而在msix_init_exclusive_bar函数中可以看到pba_offset>=0x800，在调试中能确定pba_offset就等于0x800。如果环境中的lspci命令支持-v选项应该是可以看到这个参数的，可惜在这题环境中只支持-mk。
    __int64 __fastcall msix_table_mmio_read(PCIDevice *a1)
    {
      int v1; // eax
      v1 = *a1->crypt.statu;
      if ( v1 == 2 )
        return a1->crypt.mode[0];
      if ( v1 != 3 )
        return v1 == 1;
      (*a1->crypt.crypt_func)(&a1->crypt, *a1->crypt.mode, a1->crypt.input, a1->crypt.output);
      return 0LL;
    }
    void __fastcall msix_table_mmio_write(PCIDevice *a1, __int64 a2, char a3, int size)
    {
      char op; // al
      if ( size == 1 )
      {
        *&op = *a1->crypt.statu;
        switch ( *&op )
        {
          case 2:
            *a1->crypt.mode = a3;
            break;
          case 3:
            *a1->crypt.crypt_func = crypt_exe_func;
            break;
          case 1:
            *a1->crypt.statu = a3;
            break;
        }
      }
    }
    __int64 __usercall msix_pba_mmio_read@(int a1@, char a2@, PCIDevice *dev@, size_t addr@)
    {
      void (__fastcall *v6)(PCIDevice *, __int64, size_t); // rax
      size_t v7; // rdx
      __int64 v8; // rsi
      __int64 result; // rax
      int v10; // eax
      v6 = *&dev[1].crypt.input[0x20];
      if ( v6 )
      {
        v7 = addr + (8 * a1);
        v8 = (8 * addr);
        if ( v7 > *&dev->field_0[1156] )
          v7 = *&dev->field_0[1156];
        v6(dev, v8, v7);
      }
      if ( addr == 1 )
      {
        *dev->crypt.statu = 1;
        return a2;
      }
      if ( addr == 2 )
      {
        *dev->crypt.key = 0LL;
        *&dev->crypt.key[120] = 0LL;
        memset((&dev->crypt.key[8] & 0xFFFFFFFFFFFFFFF8LL), 0, 8LL * ((dev - ((dev + 1184) & 0xFFFFFFF8) + 1304) >> 3));
        *dev->crypt.input = 0LL;
        *&dev->crypt.input[120] = 0LL;
        memset((&dev->crypt.input[8] & 0xFFFFFFFFFFFFFFF8LL), 0, 8LL * ((dev - ((dev + 1312) & 0xFFFFFFF8) + 1432) >> 3));
        *dev->crypt.output = 0LL;
        *&dev->crypt.output[120] = 0LL;
        memset((&dev->crypt.output[8] & 0xFFFFFFFFFFFFFFF8LL), 0, 8LL * ((dev - ((dev + 1440) & 0xFFFFFFF8) + 1560) >> 3));
        return a2;
      }
      v10 = *dev->crypt.statu;
      if ( v10 == 1 )
      {
        if ( strlen(dev->crypt.key) + 16 > addr )
          goto LABEL_12;
        result = 0LL;
      }
      else
      {
        if ( v10 != 2 )
        {
          if ( strlen(dev->crypt.output) + 272 field_0[addr + 0x488];
          return 0LL;
        }
        if ( strlen(dev->crypt.input) + 144 > addr )
          goto LABEL_12;
        result = 0LL;
      }
      return result;
    }
    void __fastcall msix_pba_mmio_write(PCIDevice *opaque, unsigned __int64 addr, char val, int size)
    {
      int v4; // eax
      unsigned __int64 v5; // rsi
      if ( size == 1 )
      {
        v4 = *opaque->crypt.statu;
        if ( v4 == 1 )
        {
          if ( addr crypt.key[addr] = val;
        }
        else if ( v4 == 2 )
        {
          v5 = addr - 0x80;
          if ( v5 crypt.input[v5] = val;
        }
      }
    }
官方赛后在github上放出了diff文件，因此可以对着diff文件分析一下漏洞函数。查看pci_patch.diff和msix_patch.diff文件
    --- pci.h    2019-04-24 02:14:46.000000000 +0800
    +++ pci_change.h    2020-06-09 11:20:45.639622000 +0800
    @@ -317,6 +317,16 @@
         /* Space to store MSIX table & pending bit array */
         uint8_t *msix_table;
         uint8_t *msix_pba;
    +
    +    struct CryptState{
    +        char key[0x80];
    +        char input[0x80];
    +        char output[0x80];
    +        void (*crypt_func)(char *key,int mode,char *input,char *output);
    +        int statu;
    +        int mode;
    +    }crypt;
    +    char buf[0x100];
         /* MemoryRegion container for msix exclusive BAR setup */
         MemoryRegion msix_exclusive_bar;
         /* Memory Regions for MSIX table and pending bit entries. */
    --- msix.c    2019-04-24 02:14:45.000000000 +0800
    +++ msix_change.c    2020-10-16 14:20:52.271587000 +0800
    @@ -174,24 +174,96 @@
         }
     }
    +static void crypt_en_func(char *key,char *input,char *output){
    +    int len = strlen(input);
    +    int len_key = strlen(key);
    +    int i=0;
    +    if(len_key == 0 || len == 0){
    +        return;
    +    }
    +    while(len){
    +        output[i] = input[i]^key[i%len_key];
    +    i += 1;
    +    len -= 1;
    +    }
    +}
    +
    +static void crypt_de_func(char *key,char *input,char *output){
    +    int len = strlen(input);
    +    int len_key = strlen(key);
    +    int i=0;
    +    if(len_key == 0 || len == 0){
    +        return;
    +    }
    +    while(len){
    +        output[i] = input[i]^key[i%len_key];
    +    i += 1;
    +    len -= 1;
    +    }
    +}
    +
    +static void crypt_exe_func(char *key,int mode,char *input,char *output){
    +    switch(mode){
    +        case 1:
    +        crypt_en_func(key,input,output);
    +        break;
    +    case 2:
    +        crypt_de_func(key,input,output);
    +        break;
    +    default:
    +        break;
    +    }
    +}
    +
     static uint64_t msix_table_mmio_read(void *opaque, hwaddr addr,
                                          unsigned size)
     {
         PCIDevice *dev = opaque;
    -    return pci_get_long(dev->msix_table + addr);
    +    char value;
    +    switch(dev->crypt.statu){
    +        case 1:
    +        value = dev->crypt.statu;
    +        break;
    +    case 2:
    +        value = dev->crypt.mode;
    +        break;
    +    case 3:
    +        dev->crypt.crypt_func(dev->crypt.key,dev->crypt.mode,dev->crypt.input,dev->crypt.output);
    +        break;
    +    default:
    +        break;
    +    }
    +    return value;
    +    //return pci_get_long(dev->msix_table + addr);
     }
     static void msix_table_mmio_write(void *opaque, hwaddr addr,
                                       uint64_t val, unsigned size)
     {
         PCIDevice *dev = opaque;
    -    int vector = addr / PCI_MSIX_ENTRY_SIZE;
    -    bool was_masked;
    +    //int vector = addr / PCI_MSIX_ENTRY_SIZE;