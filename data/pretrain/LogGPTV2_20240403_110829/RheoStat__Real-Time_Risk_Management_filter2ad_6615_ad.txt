8.2 Design Error
A design error is a ﬂaw that introduces a weakness in the system despite a safe conﬁg-
uration and correct implementation. In our example, the servlet allows a remote node
to upload data to the server. The conﬁguration speciﬁes the maximum size ﬁle that can
be uploaded. The servlet implementation ensures that each ﬁle uploaded is limited to
the size speciﬁed in the conﬁguration. However, the design of the restriction did not ac-
count for the fact that repeated uploads can be performed by the same remote node. This
effectively allows an attacker to launch the very denial-of-service (that results when the
disk is ﬁlled) that was being guarded against when the upload ﬁle size was limited.
When the following sequence of events is detected, an attack that exploits this vul-
nerability is deemed to have occurred. First, the web server accepts a connection to
port 8001. Second, it serves the speciﬁc HTML document which includes the form that
allows uploads. Third, the server receives another connection. Fourth, it executes the
servlet that accepts the upload and limits its size. Fifth, a ﬁle is written to the uploads
directory. If this sequence of events repeats twice again within the pre-match timeout
of the signature, which is 1 minute, an intrusion attempt is deemed to have occurred.
In Figure 6, events 7 − 21 correspond
to this signature. Events 1 − 6 are of
other signatures that cause the risk level
to rise. Event 21 causes the risk thresh-
old to be crossed. The system responds
by enabling a predicate for the permission
that controls whether ﬁles can be writ-
ten to the uploads directory. This is event
22 and reduces the risk. The predicate
checks whether the current time is within
the range of business operating hours. It
allows the permission to be granted only
if it evaluates to true. During operating hours, it is likely that the denial-of-service
attempt will be ﬂagged and seen by an administrator, so the permission continues to
be granted on the assumption that manual response will occur. Outside those hours, it
is likely that no administrator is present, so the permission is denied thereafter, till the
post-match timer expires after one hour and the threat is reset.
Fig. 6. Attack exploiting a design error.
8.3 Environment Error
An environment error is one where an assumption is made about the runtime environ-
ment which does not hold. In our example, the servlet authenticates a user, then stores
RheoStat: Real-Time Risk Management
311
the user’s directory in a cookie that is returned to the client. Subsequent responses uti-
lize the cookie to determine where to serve ﬁles from. The ﬂaw here is that the server
assumes the environment of the cookie is safe, which it is not since it is exposed to
manipulation by the client. An attacker can exploit this by altering the cookie’s value to
reﬂect a directory that they should not have access to.
When the following sequence of
events is detected, an attack that exploits
this vulnerability is deemed to have oc-
curred. First, the web server accepts a
connection to port 8001. Second, it serves
the speciﬁc HTML document which in-
cludes the form that authenticates a user.
Third, the server receives another connec-
tion. Fourth, it executes the servlet that
authenticates the user and maps users to
the directories that they are allowed to ac-
Fig. 7. Attack exploiting an environment error.
cess. It sets a cookie which includes the
directory from which ﬁles will be retrieved for further requests. Fifth, the server re-
ceives another connection. Sixth, it serves the speciﬁc HTML document that includes
the form which accepts the ﬁle request. Seventh, the server receives another connection.
Eighth, the servlet that processes the request, based on the form input as well as the
cookie data, is executed. Ninth, a ﬁle is served from a directory that was not supposed
to be accessible to the user. The events must all occur within the pre-match timeout of
the signature, which is 1 minute.
In Figure 7, event 3, events 8− 14 and event 16 correspond to this signature. Events
1− 2 and 4− 7 are of other signatures. Event 14 causes the risk threshold to be crossed.
The system responds by enabling a predicate for the permission that controls whether
the ﬁle download servlet can be executed. This is event 15 and reduces the risk. The
predicate simply denies the permission. As a result, the attack can not complete since
no more ﬁles can be downloaded till the safeguard is removed when the risk reduces at
a later point in time (when a threat’s timer expires).
8.4 Input Validation Error
An input validation error is one that results from the failure to conduct necessary checks
on the data. A common example of this type of error is the failure to check that the data
passed in is of length no greater than that off the buffer in which it is stored. The result
is a buffer overﬂow which can be exploited in a variety of ways. In our example, the
servlet allows a ﬁle on the server to be updated remotely. The path of the target ﬁle is
parsed and a check is performed to verify that it is in a directory that can be updated.
The ﬁle ’Password.cfg’ is used in each directory to describe which users may access
it. By uploading a ﬁle named ’Password.cfg’, an attacker can overwrite and alter the
access conﬁguration of the directory. As a result, they can gain unlimited access to the
other data in the directory.
When the following sequence of events is detected, an attack that exploits this vul-
nerability is deemed to have occurred. First, the web server accepts a connection to
312
Ashish Gehani and Gershon Kedem
port 8001. Second, it serves the speciﬁc HTML document which includes the form that
allows uploads to selected directories. Third, the server receives another connection.
Fourth, it executes the servlet that checks that the uploaded ﬁle is going to a legal di-
rectory. Fifth, the ’Passwords.cfg’ ﬁle in the uploads directory is written to. The events
must all occur within the pre-match timeout of the signature, which is 1 minute.
In Figure 8, event 1 and events 7 − 10
correspond to this signature. Events 2 − 6
are of other signatures. Event 10 causes
the risk threshold to be crossed. The sys-
tem responds by enabling a predicate for
the permission that controls write access
to the ’Passwords.cfg’ ﬁle in the uploads
directory. This is event 11 and reduces the
risk. The predicate simply denies the per-
mission. As a result, the attack can not
complete since the last step requires this
permission to upload and overwrite the
’Passwords.cfg’ ﬁle. Enabling this safe-
guard does not affect legitimate uploads since they do not need to write to this ﬁle.
Fig. 8. Attack exploiting an input validation er-
ror.
9 Related Work
We describe below the relationship of our work to previous research on intrusion detec-
tors and risk management systems.
9.1 Intrusion Detection
Early systems developed limited ad-hoc responses, such as limiting access to a user’s
home directory or logging the user out [Bauer88], or terminating network connections
[Pooch96]. This has also been the approach of recent commercial systems. For exam-
ple, BlackICE [BlackICE] allows a network connection to be traced, Intruder Alert
[IntruderAlert] allows an account to be locked, NetProwler [NetProwler] can update
ﬁrewall rules, NetRanger [Cisco] can reset TCP connections and RealSecure [ISS] can
terminate user processes.
Frameworks have been proposed for adding response capabilities. DCA [Fisch96]
introduced a taxonomy for response and a tool to demonstrate the utility of the taxon-
omy. EMERALD’s [Porras97] design allows customized responses to be invoked au-
tomatically, but does not deﬁne them by default. AAIR [Carver01] describes an expert
system for response based on an extended taxonomy.
Our approach creates a framework for systematically choosing a response in real-
time, based on the goal of reducing exposure by reconﬁguring the access control sub-
system. This allows an attack to be contained automatically instead of being limited to
raising an alarm, and does not require a new response subsystem to be developed for
each new class of attack discovered.
RheoStat: Real-Time Risk Management
313
9.2 Risk Management
Risk analysis has been utilized to manage the security of systems for several decades
[FIPS31]. However, its use has been limited to ofﬂine risk computation and manual re-
sponse. [SooHoo02] proposes a general model using decision analysis to estimate com-
puter security risk and automatically update input estimates. [Bilar03] uses reliability
modeling to analyze the risk of a distributed system. Risk is calculated as a function
of the probability of faults being present in the system’s constituent components. Risk
management is framed as an integer linear programming problem, aiming to ﬁnd an
alternate system conﬁguration, subject to constraints such as acceptable risk level and
maximum cost for reconﬁguration.
In contrast to previous approaches, we use the risk computation to drive changes in
the operating system’s security mechanisms. This allows risk management to occur in
real-time and reduces the window of exposure.
10 Future Directions
We utilized a simple µ function that assumed independent probabilities for successive
events. However, µ functions can be deﬁned even when pre-conditions are known. By
measuring the frequencies of successive events occurring in typical and attacked work-
loads, conditional probabilities can be derived. A tool to automate the process could be
constructed.
The exposure reduction values, workload frequencies, consequence costs and risk
threshold were all manually calculated in our prototype. All such parameters will need
to be automatically derived for our approach to be practical. The frequencies with which
permissions are utilized can be estimated by instrumenting the system to measure these
with a typical workload.
A similar approach could be used to determine the average inherent risk of a work-
load. An alternative would be the creation of a tool to visualize the effect of varying
the risk threshold on (i) the performance of the system and (ii) the cost of intrusions
that could successfully occur below the risk threshold. Policy would then dictate the
trade-off point chosen.
The problem of labeling data with associated consequence values can be addressed
with a suitable user interface augmentation - for example, it could utilize user input
when new ﬁles are being created by application software. The issue could also be par-
tially mitigated by using pre-conﬁgured values for all system ﬁles.
Finally, some attacks may utilize few or no permission checks. Such scenarios fall
into two classes. In the ﬁrst case, this points to a design shortcoming where new per-
missions need to be introduced to guard certain resources such as critical subroutines
in system code. The other case is when the attack has a very small footprint, in which
case our approach will fail (as it can’t recognize the threat in advance).
11 Conclusion
We have introduced a formal framework for managing the risk posed to a host. The
model calculates the risk based on the threats, exposure to the threats and consequences
314
Ashish Gehani and Gershon Kedem
of the threats. The threat likelihoods are estimated in real-time using output from an
intrusion detector. The risk is managed by altering the the exposure of the system. This
is done by dynamically reconﬁguring the modiﬁed access control subsystem. The utility
of the approach is illustrated with a set of attack scenarios in which the risk is managed
in real-time and results in the attacks being contained. Automated conﬁguration of the
system’s parameters, either analytically or empirically, remains an open research area.
References
[Bauer88]
[Bilar03]
[BlackICE]
[Carver01]
[Cisco]
[FIPS31]
[Fisch96]
[Garey79]
[Gehani03]
[ICAT]
[Ilgun95]
D. S. Bauer and M. E. Koblentz, NIDX - A Real-Time Intrusion Detection Expert
System, Proc. of USENIX Technical Conference, p261-273, 1988.
Daniel Bilar, Quantitative Risk Analysis of Computer Networks, PhD thesis,
Dartmouth College, 2003.
http://documents.iss.net/literature/BlackICE/BISP-UG 36.pdf
Curtis Carver, Adaptive, Agent-based Intrusion Response, PhD thesis, Texas A
and M University, 2001.
http://www.cisco.com/application/pdf/en/us/guest/products/ps2113/c1626/ ccmi-
gration 09186a00800ee98e.pdf
Guidelines for Automatic Data Processing Physical Security and Risk Manage-
ment, National Bureau of Standards, 1974.
Eric Fisch, Intrusive Damage Control and Assessment Techniques, PhD thesis,
Texas A and M University, 1996.
M.R. Garey and D.S. Johnson, Computers and Intractability: A Guide to the The-
ory of NP-Completeness, Freeman, San Francisco, 1979.
Ashish Gehani, Support for Automated Passive Host-based Intrusion Response,
PhD thesis, Duke University, 2003.
http://icat.nist.gov/icat.cfm
Koral Ilgun, Richard A. Kemmerer and Phillip A. Porras, State Transition Analy-
sis: A Rule-Based Intrusion Detection Approach, IEEE Transactions on Software
Engineering, 21(3), p181-199, March 1995.
http://documents.iss.net/literature/RealSecure/RSDP-UG 70.pdf
http://www.w3.org/Jigsaw
[IntruderAlert] http://enterprisesecurity.symantec.com/content/ProductJump.cfm? Product=171
[ISS]
[Jigsaw]
[Kellerer98] H. Kellerer and U. Pferschy, A new fully polynomial approximation scheme for
the knapsack problem, Proceedings of the APPROX 98, Lecture Notes in Com-
puter Science, v1444, p123-134, Springer, 1998.
Larry Koved, Anthony J. Nadalin, Don Neal, and Tim Lawson, The Evolution of
Java Security, IBM Systems Journal 37(3), p349-364, 1998.
[Koved98]
[NetProwler] http://symantec.com
[NIST800-12] Guidelines for Automatic Data Processing Physical Security and Risk Manage-
[Pooch96]
[Porras97]
ment, National Institute of Standards and Technology, 1996.
U. Pooch and G. B. White, Cooperating Security Managers: Distributed Intrusion
Detection System, Computer and Security, (15)5, p441-450, September/October
1996.
P.A. Porras and P.G. Neumann, EMERALD: Event Monitoring Enabling Re-
sponses to Anomalous Live Disturbances, Proceedings of the Nineteenth National
Computer Security Conference, p353-365, Baltimore, MD, October 1997.
[SooHoo02] Kevin Soo Hoo, Guidelines for Automatic Data Processing Physical Security and
Risk Management, PhD Thesis, Stanford University, 2002.
[SPECjvm98] http://www.specbench.org/osg/jvm98/