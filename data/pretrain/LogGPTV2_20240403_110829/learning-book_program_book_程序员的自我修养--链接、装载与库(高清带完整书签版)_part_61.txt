始化函数需要在用户空间中建立 stdin、stdout、stderr及其对应的 FILE结构，使得程序进入
main之后可以直接使用printf、scanf等函数。
11.1.4MSVCCRT的入口函数初始化
系统堆初始化
MSVC的入口函数初始化主要包含两个部分，堆初始化和VO初始化，MSVC的堆初始
化由函数_heap_init完成，这个函数的定义位下 heapini.c，人致的代码如下（删去了 64位
系统的条件编译部分）：
mainCRTstartup -> _heap_init():
HANDLE _crtheap = NULL;
int _heap_init (int mtflag)
if((_crtheap = HeapCreate( mtflag
BYTES_PER_PAGE, 0 ↓) = NULL )
7 O : HEAP_NO_SERIALIZE
return 0;
return 1;
在32位的编译环境下，MSVC的堆初始化过程出奇地简单，它仅仪调用了HeapCreate
程序员的自我修养——链接、装载与库
---
## Page 353
330
第11章运行库
这个API创建了一个系统堆，因此不难想象，MSVC的malloc 函数必然是调用了HeapAlloc
这个AP，将堆管理的过程直接交给了操作系统。
IVO初始化
IO初始化相对于堆的初始化则要复杂很多。首先让我们来看看MSVC中，FILE结构
的定义（FILE结构实际定义在C语言标准中并未指出，因此不同的版本可能有不同的实现）：
struct _iobuf {
char *_ptr;
int
_cnt 
int
int
_file;
_flag;
int
int
_charbuf ;
raueudus", neqo
_bufsiz;
typedef struct _iobuf FILE;
这个FILE结构中最重要的一个字段是_file，_file是一个整数，通过_file可以访问到内
部文件句柄表中的某一项。在Windows 中，用户态使用句柄（Handle）米访问内核文件对
象，句柄本身是一个32位的数据类型，在有些场合使用imt来储存，有些场合使用指针来表
示。
在MSVC的 CRT中，已经打开的文件句柄的信息使用数据结构ioinfo来表示：
typedef struct {
char osfile;
 intptr_t osfhnd;
char pipech;
ioinfo;
在这个结构中，osfhnd字段即为打开文件的句柄，这里使用8字节整数类型intptr_t来
存储。另外osfile的意义为文件的打开属性。而pipech字段则为用于管道的单字符缓冲，这
里可以先忽略。osfile的值可由一系列值用按位或的方式得出：
·FOPEN（0x01)句柄被打开。
·FEOFLAG(0x02)已到达文件末尾。
·FCRLF(0x04)在文本模式中，行缓冲已遇到回车符（见第11.2.2节）。
·FPIPE（0x08）管道文件。
·FNOINHERIT（Ox10)句柄打开时具有属性_O_NOINHERIT（不遗传给子进程），
·FAPPEND(0x20)句柄打开时具有属性O_APPEND（在文件末尾追加数据）。
·FDEV(0x40)设备文件。
程序员的自我修养一链接、装载与库
---
## Page 354
11.1入口函数和程序初始化
331
·FTEXT(0x80)文件以文本模式打开。
在cr/src/ioinite中，有一个数组：
int _nhandle;
ioinfo *pioinfo[64]: // 等 ioinfo pioinfo[64] [32]:
这就是用户态的打开文件表。这个表实际是个二维数组，第二维的人小为32个ioinfo
结构，因此该表总共可以容纳的元系总量为64*32=2048个句柄。此外_nhandle记录该表
的实际元素个数。之所以使用指针数组面不是二维数组的原因是使用指针数组更加节省空
间，面如果使用二维数组，则不论程序里打开了儿个文件都必须始终消耗2048个ioinfo的
空间。
FILE结构中的_file的值，和此表的两个下标直接相关联。当我们要访问文件时，必须
从FILE结构转换到操作系统的句柄。从一个FILE*结构得到文件句柄可以通过一个叫做
_osfhnd的宏，当然这个宏是CRT内部使用的，并不推荐用户使用。_osfhnd的定义为：
define _osfhnd(i) ( _pioinfo (i) ->osfhnd )
其中宏的数_pioinfo的定义是：
define pioinfo(i) ( pioinfo[(i) >> 5] + ((i) & ((1  _ioinit():
if ( (pio = _malloc_crt( 32 * sizeof (ioinfo) 11
== NULL )
return -1;
pioinfo[0] = pio;
for ( : pio osfile = 0;
pio->osfhnd = (intptr_t) INVALID_HANDLE_VALUE;
pio->pipech = 10;
在这里_ioinit初始化了的_pioinfo[0]里的每一个元素为无效值，其中INVALID_
HANDLE_VALUE 是Windows句柄的无效值，值为-1。接下来，_ioinit 的工作是将一些预
定文的打开文件给初始化，这包括两部分：
（1）从父进程继承的打开文件句柄，当一个进程调用API创建新进程的时候，可以选
择继承自己的打开文件句柄，如果继承，子进程可以直接使用父进程的打开文件句柄。
（2）操作系统提供的标准输入输出。
应用程序可以使用API GetStartuplnfo来获取继承的打开文件，GetStartuplnfo的参数如下：
void GetStartupInfo(STARTUPINFO* 1pStartupInfo) :
STARTUPINFO是一个结构，调用GetStartuplnfo之后，该结构就会被写入各种进程启
动相关的数据。在该结构中，有两个保留字段为：
WORD cbReserved2;
LPBYTE 1pReserved2 
} STARTUPINFO;
这两个字段的用途没有正式的文档说明，但实际是用来传递继承的打开文件句柄。当这
两个字段的值都不为0时，说明父进程遗传了一些打开文件句柄。操作系统是如何使用这两
个字段传递句柄的呢？首先lpReserved2字段实际是一个指针，指向一块内存，这块内存的
结构如下：
·字节[0.3]：传递句柄的数量n。
·字节[4,3+n]：每一个句柄的属性（各1字节，表明句柄的属性，同ioinfo结构的_osfile
程序员的自我修养—键接、装载与库
---
## Page 356
11.1入口函数和程序初始化
333
字段）。
字节[4+n之后]：每一个句柄的值（n个intptr_1类型数据，同ioinfo结构的_osfhnd字
段）。
_ioinit函数使用如下代码获取各个句柄的数据：
cfi_len = *(_unaligned int *) (StartupInfo.1pReserved2);
posfile - (char *)(StartupInfo/lpReserved2) ▪ sizeof( int );
posfhnd = (unaligned intptr_t *) (posfile + cfi_len) :
其中_unaligned关键字告诉编译器该指针可能指向一个没有进行数据对齐的地址，编译器
会插入一些代码来避免发生数据未对齐而产生的错误。这段代码执行之后，lpReserved2指
向的数据结构会被两个指针分别指向其中的两个数组，如图11-6所示。
cfi_len = n 
n
句椭属性数组
句柄数组
μsod
posfhnd
图11-6包柄属性数组和句柄数组
接下来_ioinit就要将这些数据填入自己的打开文件表中，当然，首先要判断直接的打开
文件表是否足以容纳所有的句柄：
cfi_1en = _min( cfi_1en, 32 * 64 ):
然后要给打开文件表分配足够的空间以容纳所有的句柄：
for ( i = 1 = _nhandle osfile = 0;
pio->osfhnd - (intptr_t) INVALID_HANDLE_VALUE;
fot = qoaddosfile = *posfi1e;
在这个循环中，fh从0开始递增，每次通过_pioinfo宏来转换为打开文件表中连续的对
应元素，而posfile和posthnd则依次递增以遍历每一个句柄的数据。在复制的过程中，一些
不符合条件的句柄会被过滤掉，例如无效的句柄，或者不属于打开文件及管道的句柄，或者
未知类型的句柄。
这段代码执行完成之后，继承来的句柄就全部复制完毕。接下来还须要初始化标准输入
输出。当继承句柄的时候，有可能标准输入输出（fh=01,2）已经被继承了，因此在初始化
前首先要先检验这一点，代码如下：
for ( fh = 0 ; fh osfhnd == (intptr_t) INVALID_HANDLE_VALUE )
pio->0sfile = (char) (FOPEN 1 FTEXT) ;
if ( ((stdfh = (intptr_t)Get8tdHandle( stdhndl (fh) ))
!=(intptr_t) INVALID_HANDL&_VALUE)
↑= FILE_TYPE_UNKNOWN) 1
&&((htype =GetFileType ( (HANDLE) stdfh 11
if ( (htype & OxFF)== FILE_TYPE_CHAR 1
pio=>osfhnd = stdfh;
else if ( (htype & 0xFF)
pio->osfile 1= PDEV;
pio->08file I= FPIPE:
else {
pio->0sfi1e 1= FDEV;
else(
pio->0Bfi1e 1= FTEXT:
如果序号为0、1、2的句柄是无效的（没有继承自父进程），那么_ioinit会使用
GetStdHandle函数获取默认的标准输入输出句柄。此外，_ioinit还会使用GetFileType来获
程序员的自我修养一链接、装载与库
---
## Page 358
11.2C/C++运行库
335
取该默认句柄的类型，给_osfile设置对应的值。
在处理完标准数据输出的句柄之后，IO初始化工作就完成了。我们可以看到，MSVC
的I/O初始化主要进行了如下几个工作：
·建立打开文件表。
·如果能够继承白父进程，那么从父进程获取继承的句柄。
·初始化标准输入输出。
在IO初始化完成之后，所有的IO函数就都可以自由使用了。在本节中，我们介绍了