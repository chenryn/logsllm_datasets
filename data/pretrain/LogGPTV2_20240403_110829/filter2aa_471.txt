0x01 前言
这种反制也只能钓 "涉世未深" 的攻击方，和一些脚本小子，算是蚁剑插件编写不规范造成的RCE
0x02 DHTMLX
在 \source\app.entry.js : 行28-57 可以看得见蚁剑在新版加载器中设置了替换函数，将对应的特殊
字符替换成实体编码！
它调用了dhtmlx框架，所以只要是UI渲染的页面都可能存在 XSS->RCE
我把目标盯向了其他插件
0x03 AS_Plug-in
从自带的插件实例的代码开始看: phpinfo
在 行14-22 当中，渲染UI框架的时候，调用了 unxss 可以知道这个地方不存在XSS漏洞
noxss: (html = '', wrap = true) => {
    let _html = String(html)
      .replace(/&/g, "&amp;")
      .replace(/'/g, "&apos;")
      .replace(/>/g, "&gt;")
      .replace(/');
    }
    return _html;
  },
  /**
   * unxss
   * @param  {String}  html 转义的字符串
   * @param  {Boolean} wrap 是否反转义换行
   * @return {String}       反转义后的字符串
   */
  unxss: (html = '', wrap = true) => {
    let _html = String(html)
      .replace(/&apos;/g, "'")
      .replace(/&gt;/g, ">")
      .replace(/&lt;/g, "/g, '\n'); // 只替换 noxss 转义过的
    }
    return _html;
  },
https://github.com/AntSword-Store/phpinfo**
https://github.com/AntSword-Store/phpinfo/blob/master/main.js
我们需要用到什么插件？ LiveScan  这个是蚁剑判断WEBSHELL存活的一款插件
可以在蚁剑插件中心下载
我从Github找到了这个项目，从代码审计这方面开始挖掘漏洞进行反制
    core.request({
      _: 'phpinfo()'
    }).then((_ret) => {
      t.safeHTML(antSword.unxss(_ret['text'])).showLoading(false);
      toastr.success('获取成功！', 'Success');
    }).catch((e) => {
      toastr.error(JSON.stringify(e), 'Error');
      t.close();
    });
# 插件市场打不开如何解决
https://mp.weixin.qq.com/s/hF3GgZpIcussc-BjUoJUuQ
https://github.com/AntSword-Store/LiveScan/blob/master/libs/ui.js
          // 开始扫描
          this.win.win.progressOn();
          // 获取 Shell
          let shells = antSword['ipcRenderer'].sendSync('shell-find', {
            "type": {
              "$nin": ["custom"]
            },
行160-192 从开始扫描到渲染UI，每一步他都没有调用JS替换函数: unxss , onxss
于是我构思，如何让他扫描后渲染出来，它扫描时shell不需要存活，于是我们shell地址开始下手
Windows对文件的命名有标准，我们没法使用尖括号
只能在链接的时候修改
            "category": {
              "$nin": [".Trash"]
            }
          });
          // 传递给扫描核心代码
          callback({
              shells: shells
            }).then((ret) => {
              // 解析扫描结果
              let griddata = [];
              this.gridData = ret;
              ret.map((item, i) => {
                // console.debug(i, item);
                if (!item) {
                  return
                };
                griddata.push({
                  id: item.id,
                  data: [i, item.shell, LANG['status'][item.status ? "live" : 
"dead"], item.id]
                });
              });
              // 渲染UI
              this.grid.clearAll();
              this.grid.parse({
                rows: griddata
              }, "json");
XSS:
0x04 RCE && 实战构思
Payload:
例子：
http://192.168.0.108//1.php
处理前:
a="require('child_process').exec('calc.exe')"
b=""
for(i=0;i
例子：
http://192.168.0.108//1.php
构思
其实对于我而言这个是有实战意义的: 钓鱼
就脚本小子以及初出茅庐的攻击方来说，设置钓鱼文件，伪造内容诱导添加shell并存活检测，也可以黑
吃黑，诱导其检测shell存活~
在网站目录下创建txt或者log文件，伪造内容:
总结:在实战当中，有利用的可能！但可操作性非常低，诱导性也低，但是危害大！不算鸡肋，有用武之
地但是条件要求极其苛刻！
漏洞利用扫描器 结果:
指定连接shell管理工具 -- 蚁剑(AntSword)
WebShell:http://192.168.0.108//1.php
密码：cmd
连接后请务必进行存货检测 -- 插件中心下载 && https://github.com/AntSword-Store/LiveScan
# 如遇插件中心存在打不开的情况，解决方法:
https://mp.weixin.qq.com/s/hF3GgZpIcussc-BjUoJUuQ