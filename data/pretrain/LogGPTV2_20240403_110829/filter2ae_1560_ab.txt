             dout.writeUTF(ifaceNames[i]);
         }
     }
  4. 写入非私有静态或瞬态字段信息数据，包括字段名、字段访问权限标识和字段签名，按字段名排序
        Field[] fields = cl.getDeclaredFields();
     MemberSignature[] fieldSigs = new MemberSignature[fields.length];
     for (int i = 0; i () {
         public int compare(MemberSignature ms1, MemberSignature ms2) {
             return ms1.name.compareTo(ms2.name);
         }
     });
     for (int i = 0; i ");
         dout.writeInt(Modifier.STATIC);
         dout.writeUTF("()V");
     }
  6. 写入非私有构造方法信息数据，包括方法名 _（固定为``）_ 、方法访问权限标识和方法签名 _（分隔符`/`会替换成`.`的包名形式）_ ，按方法签名排序
        Constructor[] cons = cl.getDeclaredConstructors();
     MemberSignature[] consSigs = new MemberSignature[cons.length];
     for (int i = 0; i () {
         public int compare(MemberSignature ms1, MemberSignature ms2) {
             return ms1.signature.compareTo(ms2.signature);
         }
     });
     for (int i = 0; i ");
             dout.writeInt(mods);
             dout.writeUTF(sig.signature.replace('/', '.'));
         }
     }
  7. 写入非私有方法，包括方法名、方法访问权限标识和方法签名，按方法名和方法签名排序
        MemberSignature[] methSigs = new MemberSignature[methods.length];
     for (int i = 0; i () {
         public int compare(MemberSignature ms1, MemberSignature ms2) {
             int comp = ms1.name.compareTo(ms2.name);
             if (comp == 0) {
                 comp = ms1.signature.compareTo(ms2.signature);
             }
             return comp;
         }
     });
     for (int i = 0; i .....
    16 28 4c 6a 61 76 61 2e  6c 61 6e 67 2e 53 74 72    .(Ljava. lang.Str
    69 6e 67 3b 49 29 56 00  04 6d 61 69 6e 00 00 00    ing;I)V. .main...
    09 00 16 28 5b 4c 6a 61  76 61 2e 6c 61 6e 67 2e    ...([Lja va.lang.
    53 74 72 69 6e 67 3b 29  56                         String;)V
最后，将二进制数据通过SHA1算法得到摘要，取前8位按BigEndian的字节顺序转换成长整型：
    long hash = 0;
    for (int i = Math.min(hashBytes.length, 8) - 1; i >= 0; i--) {
        hash = (hash << 8) | (hashBytes[i] & 0xFF);
    }
返回的`hash`就是最终的SUID了。
由此可知，当父类或非原始数据类型字段的类内部发生变更时，并不会影响当前类的SUID值，再结合之前的内容我们还可以引申出两个结论：
  1. 若当前类自定义了`readObject()`，在反序列化时会正常执行`readObject()`中所有`ObjectInputStream.defaultReadObject()` _（如果调用了的话）_ 之前的逻辑；否则在处理到变更对象时，仍会抛出`InvalidClassException`
  2. 由于序列化会对类的字段进行排序，并在反序列化时按顺序遍历处理，所以反序列化会正常处理字段名比变更对象类型字段‘小’的其他字段
### 关于`writeReplace()`和`readResolve()`
在前面的执行流程分析中，为了突出主要逻辑，我们主观的忽略了一些内容，其中就包括了序列化的`invokeWriteReplace()`和反序列化的`invokeReadResolve()`。
现在就来看看它们分别有什么作用：
  * `writeReplace()`
返回一个对象，该对象为实际被序列化的对象，在原对象序列化之前被调用，替换原对象成为待序列化对象
  * `readResolve()`
返回一个对象，该对象为实际反序列化的结果对象，在原对象反序列化之后被调用，不影响原对象的反序列化过程，仅替换结果
再从具体示例来体会一下：
    public class SerializationReplacementClass implements Serializable {
        protected String replacementField;
        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            in.defaultReadObject();
        }
        private Object readResolve() {
            return new SerializationReplacementClass("resolve");
        }
        private SerializationReplacementClass(String s) {
            this.replacementField = s;
        }
        public SerializationReplacementClass() {
            this.replacementField = "replace";
        }
    }
    public class SerializationDemo implements Serializable {
        // omit
        private Object writeReplace() {
            return new SerializationReplacementClass();
        }
        // omit
        public static void main(String[] args) throws ClassNotFoundException {
            // omit
            SerializationReplacementClass demo = (SerializationReplacementClass) in.readObject();
        }
    }
从序列化之后得到的二进制串中可以看到目标对象已经被替换成了`SerializationReplacementClass`：
    ac ed 00 05 73 72 00 1d  53 65 72 69 61 6c 69 7a    ....sr.. Serializ
    61 74 69 6f 6e 52 65 70  6c 61 63 65 6d 65 6e 74    ationRep lacement
    43 6c 61 73 73 32 71 ac  e9 c1 d3 0b 7b 02 00 01    Class2q. ....{...
    4c 00 10 72 65 70 6c 61  63 65 6d 65 6e 74 46 69    L..repla cementFi
    65 6c 64 74 00 12 4c 6a  61 76 61 2f 6c 61 6e 67    eldt..Lj ava/lang
    2f 53 74 72 69 6e 67 3b  78 70 74 00 07 72 65 70    /String; xpt..rep
    6c 61 63 65                                         lace
而在反序列化之后得到的对象的`replacementField`字段值则为`resolve`，但在此之前`readObject()`也会被正常调用，当时`replacementField`字段值为`replace`。
### 关于`Externalizable`
`Serializable`接口还有一个比较常见的子类`Externalizable`，它比它爸爸特殊的地方就在于它需要自己实现读写方法
_（`readExternal()`和`writeExternal()`）_ ，同时必须包含一个自己的无参构造方法 _（默认隐式的也可以）_ 。
仍以示例说话：
    public class ExternalizationDemo implements Externalizable {
        private String stringField;
        private int intField;
        @Override
        public void writeExternal(ObjectOutput out) throws IOException {
            out.writeUTF(this.stringField);
            out.writeInt(this.intField);
        }
        @Override
        public void readExternal(ObjectInput in) throws IOException {
            this.stringField = "hello, i'm " + in.readUTF();
            this.intField = in.readInt() + 100000;