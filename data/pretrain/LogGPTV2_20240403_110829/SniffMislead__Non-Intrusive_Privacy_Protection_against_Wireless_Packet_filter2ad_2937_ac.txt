as . SniffMislead utilizes
the features of behaviors to generate decoy device events and sim-
ulate a decoy behavior.
Segmentation of Device Event Streams. A device event stream
5.3.1
is partitioned into a set of segments S = {s1, s2,· · · , si}, where si is
a segment, and denoted as si = {e1, e2,· · · , ej}, and ej is a device
event. The partition is performed based on three factors: 1) the
time interval among device events, 2) the proximity among device
events, and 3) the frequency of device events’ occurrence, all three
of which have proved to be effective for de-multiplexing device
events [33].
Time-Interval-Based Segmentation. The goal of this step is to
separate temporally-distinct behaviors. We introduce two types of
time intervals: inter-event time interval te and inter-segment time
interval ts. We observe that for most behaviors, inter-segment time
intervals are significantly larger than inter-event time intervals.
When applying the segmentation criterion, a non-negative temporal
threshold τ is required. If device events belong to a segment, any
inter-event time interval between them is less than τ, and any
inter-segment time interval is longer than τ:
e) ≤ τ ≤ min(ti
s)
max(ti
e is the inter-event time interval between event ei−1 and ei;
where ti
s is the inter-segment time interval between segment si−1 and si.
ti
Proximity-Based Segmentation. The probability of device events
from a neighboring behavior being wrongly assigned to a segment
is exponentially higher than the probability of events that come
from behaviors further apart in time [33]. If two device event sets
Ei and Ej in neighboring segments belong to the same behavior and
should be re-partitioned into one segment, the following conditions
must be met:
∀Ek ∈ L, max(P
jk
s ) , , ,· · · , }, where bi is a behavior and
ti = is its temporal information including occurrence
time oti and duration time dti. For example, behaviors such as
“7 a.m., 5 minutes for getting up; 11 a.m., 1 hour for cooking; 2 p.m.,
2 hours for working; 7 p.m., 3 hours for watching TV” are part of
one behavior pattern.
A phantom user that has fixed behavior patterns would cause
attackers suspicious. To overcome this, SniffMislead generates
dynamic behaviors for phantom users every day. Based on the
learned three behavior associations (Section 5.4), a behavior bi of
a phantom user, along with its time ti, is determined using the
function A:
= A(Pt , Pb , T , pari , ei),
(6)
where Pt and Pb are probability functions of behavior occurrence
(Equations 3 and 4); T is temporal relationships among behaviors
(Equation 5); pari indicates behaviors of a phantom user that already
happened before moment oti; ei is a random noise, which brings
some randomness.
39RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xuanyu Liu, Qiang Zeng and Xiaojiang Du, et al.
A concern of dynamic behavior generation is the possibility of
overfitting the model; if there is a high similarity between real and
phantom users, attackers may still be able to infer a real user’s
behaviors. Hence, phantom users’ behavior patterns should be dif-
ferent from those of real users. Since the behavior-to-time and
behavior-to-behavior associations of real users (i.e., Pt and Pb) can
be used to predict real users’ behaviors, SniffMislead determines
the occurrence time of a phantom user’s behavior, to ensure that real
and phantom users are doing different things. Based on behavior-to-
behavior associations and temporal relationships among behaviors
(i.e., Pb and T ), the next behavior of a phantom user is determined
according to previous behaviors and their duration. As a result,
assigned behaviors to a phantom user are logically-sound, prob-
abilistic, and unpredictable. Behavior patterns of phantom users
are designed to be as different from each other as possible, to in-
volve more smart devices at any given moment. The function of
generating a behavior pattern BP for a phantom user in a day is
summarized as:
BP = B(A, ),
(7)
where A is the function of generating a behavior bi along with its
time ti (Equation 6); b0 is the first behavior in a day, i.e., waking
up, with time t0 being randomly determined from a time window.
The algorithm of B is shown in Algorithm 1.
Algorithm 1 Daily Behavior Generation for a Phantom User.
Input: Pt , Pb , T , ;
Output: Daily behavior pattern BP = {, 
,· · · , };
initial , add  to BP;
repeat
pari =, ,· · · , ;
= A(Pt , Pb , T , pari , ei);
add  to BP;
until end of the day
SniffMislead does not have a limit of the number of phantom
users to be simulated in a smart home. Intuitively, the accuracy
of attackers inferring user behaviors decreases if the number of
phantom users increases. Nevertheless, on the other hand, it be-
comes unreal to have too many phantom users because each home
realistically has a limited number of residents from the perspective
of a bystander. Therefore, it is better to strike a balance between
the two aspects. After SniffMislead learns the attributes of the
target smart home, it can train a behavior inference model. After
deployment of SniffMislead, it attempts to increase the number of
phantom users (i.e., adding one per every day, up to an upper limit)
and form a dataset (i.e., combining real and decoy events). Then,
SniffMislead uses its inference model on the dataset to measure
the accuracy of inferring real behaviors. We define the accuracy
here as the ratio of correctly-inferred behaviors to all behaviors of
the same type. When the accuracy decreases to any extent less than
the low rate, λ, the current number of phantom users is deemed
appropriate. The value λ is configurable.
Figure 4: Workflow of generating device events based on
behavior pattern BP and its individual behavior-time pairs,
a1,· · · , an. The outputs are sequences of device events,
de1,· · · , den, used for creating packets for injection. Func-
tions S, C, and G are intermediate steps.
6.2 Generating Device Event Sequence
After behavior patterns for phantom users are generated, SniffMis-
lead needs to set the sequence of each behavior’s device events.
As device-event-level features of behaviors have been learned (Sec-
tion 5.3.2), SniffMislead generates device event sequences based
on deterministic attributes first and then non-deterministic ones.
However, behaviors are usually not independent. Previous be-
haviors may influence the latter ones (e.g., a phantom may need to
turn off the light when leaving home if the light has been turned on
in a previous behavior). Therefore, when generating device events
for current behavior, information about previous behaviors needs
consideration as well. This helps create reasonable device events
and enables a more natural transition between two neighboring
behaviors. Finite state machines of smart devices (Section 5.2) are
also used to ensure the correctness of state changes. The generated
behavior pattern of a phantom user is parsed first; for each pair,
an =, the function of generating device event sequence
for the behavior bn and its time tn is summarized below:
in, vn = S(F(bn), tn, vn−1, en),
(8)
where F(bn) is the device-event-level feature of bn (Equation 2);
tn is the time information about bn; vn−1 includes information
about the previous behavior bn−1, and en is a random noise. The
function S has two outputs: in, an initial version of a sequence of
device events, and vn, information about current behavior that may
influence the next behavior.
The contextual information in a smart home should be consis-
tent with each other. Hence, simulated decoy events of a device
should not cause any conflict among the home users (both real and
phantom), in the same smart home setting. E.g., a phantom user
turns off the light while another phantom user is “in” the room.
To this end, SniffMislead needs to continuously maintain the
a1a2a3anb1, t1b2, t2b3, t3bn, tni1i2i3ino1o2o3onde1de2de3de4v0v1v2v3vn-1...c1c0c2...c3cn-1vncnBehavior PatternBehaviorsDevice EventsWireless PacketsDevice Event Sequence GenerationBehavior Pattern GenerationPacket InjectionBPCreating Decoy Packets40SniffMislead: Non-Intrusive Privacy Protection against Wireless Packet Sniffers in Smart Homes
RAID ’21, October 6–8, 2021, San Sebastian, Spain
decoy context of the target smart home, which, from an attacker’s
perspective, includes both real and phantom users. SniffMislead
keeps monitoring real home context (i.e., real states of smart devices
and real user behaviors) by monitoring real wireless traffic from
the target smart home. The decoy home context is generated by