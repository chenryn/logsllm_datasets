Additional count (16 bits) This field specifies the total number of resource 
records returned in the additional section. 
The questions section contains a series of question records, and the other sections 
contain resource records (RRs). The format of a question is shown in Figure 16-20. 
Figure 16-20. DNS question structure 
The fields for a question entry in a query are as follows: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1001 
Query name (variable) The domain name that's the subject of the query 
Type (16 bits) A code indicating the type of resource records the client wants 
to retrieve 
Class (16 bits) The class of resource record (almost always IN) 
The format of a resource record structure is shown in Figure 16-21. The following list 
describes the fields for an RR: 
Owner name (variable) The domain name to which this resource record 
belongs 
Type (16 bits) The type of resource record 
Class (16 bits) The class of resource record (almost always IN) 
Time to live (32 bits) The time in seconds this RR can be cached before it 
should be discarded 
RDATA length (unsigned 16-bit int) Length of the following RDATA field in 
bytes 
RDATA (variable) Variable data in a format that depends on the specified type 
Figure 16-21. DNS resource record data structure 
DNS Names 
Names are communicated in many places in DNS packets. These domain names 
aren't transmitted in a pure text format. Instead, they are transmitted as a series of 
labels. Each label contains a single-byte length value followed by the data bytes that 
make up this part of the name. Going back to the previous example of 
www.google.com, the name would look like Figure 16-22 in the packet. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1002 
Figure 16-22. DNS names 
Each label length byte is followed by the data bytes that make up each domain label. 
The name ends at the root of the tree, which has an empty label with a length byte of 
zero. 
A simple compression scheme using pointers can be used in domain names. If the top 
two bits are set in a label length byte, the remaining bits of the byte are combined 
with the next 8 bits from the packet (the next byte). They are used as an offset inside 
the DNS packet the pointer appears in, beginning at the start of the DNS header. This 
offset points to domain name information for the rest of the domain name. Using this 
simple scheme, multiple resource records using the same owner name (or sharing a 
common suffix) can write the shared name in the packet just one time. They can then 
refer to this shared name for all other subsequent resource records that refer to the 
same name. 
Although this naming scheme is simple and can save valuable space in some places, 
it certainly complicates the DNS name-decoding scheme. Take a look at a simple 
(buggy) implementation of name parsing, and the following sections discuss potential 
problems with it. 
int parse_dns_name(char *msg, char *name, int namelen, 
                   char *dest0, int destlen) 
{ 
    int label_length, offset, bytes_read = 0; 
    char *ptr, *dest = dest0; 
    for(ptr = name; *ptr; ){ 
        label_length = *ptr++; 
        /* check for pointers */ 
            if((label_length & 0xC0) == 0xC0){ 
                offset = ((label_length & 0x3F)  destlen) 
            return 1; 
        memcpy(dest, ptr, label_length); 
        ptr += label_length; 
        dest += label_length; 
        bytes_read += label_length; 
        *dest++ = '.'; 
    } 
    if(dest != dest0) 
        dest--; 
    *dest = '\0'; 
    return 0; 
} 
This simple implementation of the specification has numerous problems, explained in 
the following sections, that demonstrate what can go wrong when parsing DNS 
names. 
Failure to Deal with Invalid Label Lengths 
The maximum size for a label is 63 bytes because setting the top 2 bits indicates that 
the byte is the first in a two-byte pointer, leaving 6 bits to represent a label length. 
That means any label in which one of the top bits is set but the other one isn't is an 
invalid length value. The preceding code doesn't adequately deal with this situation, 
resulting in larger domain labels than the specification allows. In this implementation, 
this problem carries additional consequences. Consider this line: 
label_length = *ptr++; 
Because ptr is signed, you know from Chapter 6(? [????.]) that this assignment 
sign-extends the value, so label_length can have a negative value. Later a size check 
is carried out: 
if(bytes_read + label_length > destlen) 
    return 1; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1004 
Can you see why this check isn't adequate? In this check, label_length is a negative 
value, so bytes_read + label_length can be made a negative value. Hence, this length 
check doesn't catch the problem, and subsequently a large negative memcpy() occurs. 
Insufficient Destination Length Checks 
It's easy to overlook the space required for bytes that are appended manually when 
performing length checks. In the sample code, a period (.) is appended manually 
after each label. These periods simply aren't checked for in the length check; only 
label_length bytes are accounted for. In addition, the trailing NUL byte isn't 
accounted for in much the same way. 
Insufficient Source Length Checks 
Just as pointers aren't correctly verified to be in the packet, the code has no 
verification that source bytes being read are within the packet boundaries. If no NUL 
byte exists in the name section, this code keeps processing data until it runs past the 
end of the packetagain resulting in a potential information leak or denial of service. 
Even when the code does check that source bytes are within bounds, it omits this 
check when reading the second byte of a pointer or the amount of bytes specified in 
the label length. 
Pointer Values Not Verified In Packet 
When pointers are found, the ptr variable is set to point to the new location to 
continue reading the domain name. In this sample code, the new pointer is simply set 
to msg (the beginning of the DNS message) plus the supplied offset. The code never 
verifies that this new location is actually inside the packet, so it begins reading 
random memory from the program. This error might result in an information leak or 
a denial of serviceat any rate, it's not desirable behavior! 
Special Pointer Values 
When pointer compression methods are used, you can find a few more oddities. For 
example, a malicious user might create a loop. Say a pointer is 20 bytes into a DNS 
message and points to offset 20. If the sample code shown previously processes this 
pointer, it gets stuck in an infinite loop. This loop would probably end up causing a 
denial of service by not dealing with other DNS requests (especially if several 
resolutions were taking place in parallel with corrupt DNS pointers, such as this 
example). 
Also, be aware that the code has no real verification that pointers are actually pointing 
to name data in a DNS message. They might be pointing to a TTL field, a length field, 
or a pointer byte (such as having a pointer at offset 20 that points to offset 21 in the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1005 
packet). Generally, this oversight doesn't cause too many security problems, but it 
might serve as part of an evasion technique to bypass IDSs. 
Length Variables 
There are no 32-bit integers to specify data lengths in the DNS protocol; everything 
is 8 or 16 bits. Therefore, this section focuses on the issues with 16-bit length fields 
discussed at the beginning of the chapter. 
The first issue is sign extensions of 16-bit values. You probably won't see this problem 
often, although when you do, it's likely a bug is present. Here's a simple example: 
struct rrecord { 
    char *name; 
    int ttl; 
    short length, type, class; 
    char *data; 
} 
#define ROUNDUP(x) ((x + 7) & 0xFFFFFFF8) 
void *mymalloc(size_t length) 
{ 
    return malloc(ROUNDUP(length)); 
} 
int parse_rrecord(char *data, int length, struct rrecord *rr) 
{ 
    if(length name = parse_name(data, &data); 
    if(!rr->name) 
        return 1; 
    rr->type = get_short(data); 
    data += 2; 
    rr->class = get_short(data); 
    data += 2; 
    rr->ttl = get_long(data); 
    data += 4; 
    rr->length = get_short(data); 
    data += 2; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1006 
    length -= (4 + 2 + 2 + 2); 
    if(rr->length > length) 
        return 1; 
    rr->data = (char *)mymalloc(rr->length); 
    if(!rr->data) 
        return 1; 
    memcpy(rr->data, data, rr->length); 
    ... 
} 
This code shows a typical malloc() implementation that's potentially vulnerable to an 
integer overflow. Because you're dealing with a protocol containing 16-bit length 
fields, allocation functions such as malloc() normally aren't dangerous because you 
can supply only 16-bit lengths, which aren't big enough to cause an integer wrap on 
a 32-bit integer size parameter. However, in this code, the 16-bit length value is 
sign-extended, so if the top bit is set, the high 16 bits of the value passed to mymalloc() 
are also set, allowing users to specify a size big enough to cause an integer wrap. 
Note 
This code wouldn't be vulnerable if the length parameter to parse_rrecord() was 
unsigned because the comparison of rr->length against length would cause 
rr->length to be sign-extended and then converted to unsigned, which is no doubt 
larger than length. 
In addition to sign-extension issues, there are other complications when the program 
decides to make extensive use of 16-bit variables for sizes or holding length values. 
Specifically, if 16-bit values are used carelessly, the risk of integer overflows is 
present (in the same way programs dealing with protocols that have 32-bit lengths 
are vulnerable to integer overflows). In the context of DNS, any addition or 
multiplication on a 16-bit variable presents a potential danger if users can specify 
large 16-bit values. To understand this problem, take a look at a bug that was in 
Microsoft's DNS-parsing code. To understand the bug, you must first examine the 
allocation routine used to allocate records. The following code shows the 
Dns_AllocateRecord() function: 
.text:76F239EC ; __stdcall Dns_AllocateRecord(x) 
.text:76F239EC _Dns_AllocateRecord@4 proc near 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1007 
.text:76F239EC 
.text:76F239EC 
.text:76F239EC arg_4           = word ptr 8 
.text:76F239EC 
.text:76F239EC                 mov    edi, edi 
.text:76F239EE                 push   ebp 
.text:76F239EF                 mov    ebp, esp 
.text:76F239F1                 push   esi 
.text:76F239F2                 mov    si, [ebp+arg_4] 
.text:76F239F6                 movzx  eax, si 
.text:76F239F9                 add    eax, 18h 
.text:76F239FC                 push   eax 
.text:76F239FD                 call   _Dns_AllocZero@4 ; 
Dns_AllocZero(x) 
.text:76F23A02                 mov    edx, eax 
.text:76F23A04                 test   edx, edx 
.text:76F23A06                 jz     loc_76F2DCB5 
.text:76F23A0C                 push   edi 
.text:76F23A0D                 push   6 
.text:76F23A0F                 pop    ecx 
.text:76F23A10                 xor    eax, eax 
.text:76F23A12                 mov    edi, edx 
.text:76F23A14                 rep stosd 
.text:76F23A16                 mov    [edx+0Ah], si 
.text:76F23A1A                 mov    eax, edx 
.text:76F23A1C                 pop    edi 
.text:76F23A1D 
.text:76F23A1D loc_76F23A1D:                         ; 
CODE XREF: 
.text:76F2DCBF 
.text:76F23A1D                 pop    esi 
.text:76F23A1E                 pop    ebp 
.text:76F23A1F                 retn   4 
.text:76F23A1F_Dns_AllocateRecord@4 endp 
This assembly code roughly translates to the following C code: 
/* sizeof DnsRecord structure is 24 (0x18) bytes */ 
struct DnsRecord { 
    unsigned short size;       /* offset 0x0A */ 
    unsigned char data[0];       /* offset 0x18 */ 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1008 
struct DnsRecord *Dns_AllocateRecord(unsigned short size) 
{ 
    struct DnsRecord *record; 
    record = (struct DnsRecord *)Dns_AllocZero(size + sizeof(struct 
DnsRecord)); 
    if(record == NULL){ 
        SetLastError(8); 
        return NULL; 
    } 
    memset((void *)record, 0, sizeof(struct DnsRecord)); 
    record->size = size; 
    return record; 
} 
You might be wondering why a SetLastError() function is in the C code but not in the 
assembly. The assembly output shows that the code tests the return value of 
Dns_AllocZero() and then jumps if it returns zero (which happens at location 
76F23A06). The code it jumps to isn't shown, but it calls SetLastError(). Interested 
readers can refer to this function in dnsapi.dll on Windows XP or dnsrslvr.dll on 
Windows 2000. 
As you can see, this allocation routine could be dangerous. It takes a 16-bit size 
parameter, so if this function can ever be called with an allocation size of more than 
65,535 bytes (the maximum representable 16-bit value), the high 16-bits are ignored, 
and a small data block not large enough to hold all the data will be allocated. It turns 
out that DNS packets are limited elsewhere in the code to a maximum of 16,384 bytes 
for TCP and 1,472 bytes for UDP, so you can't specify a big enough record to trigger 
an overflow under normal circumstances. However, take a closer look at how text 
records are processed. The following code is translated into C from the 
TxTRecordRead() function, which is used to parse records containing text fields. These 
records are composed of multiple text fields, each one consisting of a single-byte 
length field followed by text data. 
struct DnsRecord *TxtRecordRead(int to_unicode, 
            unsigned char *src, unsigned char *end) 
{ 
    unsigned short length; 
    int count, bytes_needed; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1009 
    struct DnsRecord *record; 
    for(count = 0, bytes_needed = 0; src < end; count++){ 
        length = *src++; 
        bytes_needed += ((to_unicode) ? 
                         2*length + 2 : length + 1); 
        src += length; 
    } 
    if(src != end){ 
        SetLastError(0x0D); 
        return NULL; 
    } 
    record = Dns_AllocateRecord( 
                ((count + 1) * sizeof(char *)) + bytes_needed); 
    ... copy data and pointers ... 
} 
For every text field in the record, four bytes are allocated (for a pointer value to point 
to the text field), and two bytes are allocated for every byte appearing in the text data. 
The reason is that the data is converted in the text field from UTF-8 encoding to 
Unicode wide characters. Also, the code adds two bytes for the trailing NUL to appear 
after the text string it copies. When you have a zero-length record, it consists of a 
single byte: the length field, which has the value 0. For every zero-length record 
encountered, six bytes are added to the allocation size passed to 
Dns_AllocateRecord(): four bytes for the pointer, and two bytes for a NUL value. Six 
bytes for every one byte appearing in the record allows reaching the 16-bit boundary 
of 65,535 bytes with a record of around 10,922 bytes, which can be supplied in a TCP 
packet. Therefore, a buffer overflow can be triggered. 
DNS Spoofing 
DNS is a protocol for retrieving information from a large-scale distributed database, 
and it's used by clients of the service and servers that maintain the entire database. 
Because the system requires a large degree of trust, what can happen if attackers 
abuse this trust to feed bad information to those who request DNS information? The 
implications of this attack can be quite severe, depending on how clients use the false 
information. In the past, hostnames were commonly used for verification of a user's 
identity. For example, the UNIX rlogin service consulted a file with combinations of 
usernames and hostnames to authenticate incoming connections, instead of the 