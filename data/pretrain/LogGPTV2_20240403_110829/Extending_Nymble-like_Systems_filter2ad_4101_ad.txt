M, where M is the
exponentiations proportional to
size of the blacklist against which the user generates
a proof. For large blacklists, this method dramatically
outperforms the linear exponentiations approach used
in both BLAC [32]–[34] and EPID [6].
5) Finally, we can use blinded veriﬁcation tokens to let
U prove that she already proved that her SP-speciﬁc
pseudonym is not on a blacklist, thus eliminating much
redundant computation. The largely static nature of
long-term blacklists makes this possible.
Considered together, these ﬁve observations make our ap-
proach highly practical.
A. Construction
We illustrate how the Non-membership Proof Protocol
works for a generic nymble format that satisﬁes the ZK-
pseudonym property; modifying this procedure to work
with any concrete construction satisfying the ZK-pseudonym
property with verinyms that are computed deterministically
is straightforward (only the proof that the nymble is cor-
rectly formed would change), although the exact procedure
depends on the nymble format used by the scheme.
Let (cid:4)ρ be a parameter specifying the desired bit-length of
entries on the blacklist and let (cid:4)P be a bit length for which
computing discrete logarithms modulo an (cid:4)P -bit prime is
infeasible. Choose ρ and qρ prime such that:
1) (cid:4)log2(ρ)(cid:5) = (cid:4)ρ ,
2) (cid:4)log2(qρ)(cid:5) = (cid:4)P − (cid:4)ρ − 1 , and
3) P = 2ρqρ + 1 is prime.
All entries on a blacklist are reduced modulo ρ and ZKPs
are in the order-ρ subgroup modulo P . We suggest (cid:4)ρ = 256
(indeed, ρ = 2256 − 183 is a good choice) and (cid:4)P = 1536.
Let B(SP,L
∗) = {ν1 mod ρ, . . . , νM mod ρ} be the list of
nymbles (reduced modulo ρ) that still appear on SP’s black-
∗. For ease of presentation,
list from linkability window L
∗)| = M is a perfect square and
we will assume that |B(SP,L
M. Also, let αρ, βρ be generators of the order-
let m =
ρ subgroup modulo P ; αρ and βρ are publicly known and
δ = logαρ (βρ) mod P is known only to the NI.
√
Thus, to prove to the NI that she is not subject to a ban
∗, U proves that her pseudonym
∗ (reduced modulo ρ), which
∗). We use
from linkability window L
from linkability window L
we denote by νL
∗, does not appear on B(SP,L
8This observation may also help to reduce the cost of downloading the
blacklist in other schemes.
530
the following technique, due to Brands et al. [4], [5], to
implement this proof.
For 1 ≤ i ≤ m, let j = (i − 1) · m and deﬁne the
polynomial
pi(τ ) = (τ − νj+1)(τ − νj+2)··· (τ − νj+m)
= ai,mτ m + ··· + ai,1τ + ai,0 mod ρ
U does the following:
1. U computes a Pedersen commitment x0 = αx0
ρ βγ1
ρ
to her verinym x0, and uses the Verinym Showing
Protocol to prove that it is valid. She also computes
∗ for linkability window
her SP-speciﬁc pseudonym νL
∗.
L
2. U chooses r1, . . . , rm ∈R Zρ and, for 1 ≤ i ≤ m,
computes
∗ ) mod ρ, the evaluation of pi at νL
a) vi = pi (νL
b) wi = ai,mrm + . . . + ai,1r1 mod ρ;
c) Ci = α
d) Cvi = αvi
ρ mod P , and
βri
ρ mod P .
(νL∗ )i
ρ
ρ βwi
3. U transmits each commitment Ci and Cvi to the NI.
She also transmits Π1, which is a zero-knowledge
proof that C1 commits to the (correctly formed) SP-
speciﬁc pseudonym associated with x0 for L
∗, and
⎞
⎟⎟⎠ :
⎛
⎜⎜⎝
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
νL,
ri,
wi,
vi
i
L
Ci = αν
ρ βri
ρ mod P,
∧ Cvi = αvi
ρ βwi
∧ vi (cid:15)≡ 0 mod ρ,
for all 1 ≤ i ≤ m
ρ mod P,
⎫⎪⎪⎪⎬
⎪⎪⎪⎭ ,
Π2 = P K
(1)
which proves that: 1) the commitments Ci hide con-
secutive powers of νL, and 2) the commitments Cvi
each hide nonzero values. Note that, combined with
is a
Equation 2,
∗ ), and that this evaluation is
commitment to pi(νL
nonzero.
this proves to the NI that Cvi
The NI does the following:
4. The NI veriﬁes that, for each 1 ≤ i ≤ m,
Cvi
?≡ (Cm)ai,m(Cm−1)ai,m−1 ··· (C1)ai,1 αai,0
ρ mod P
(2)
If any of these equivalences fails, then the NI aborts.
5. The NI veriﬁes the ZKPs Π1 and Π2. If either veriﬁ-
cation fails, the VI aborts.
Note Step 5 seems to require m(m + 1) = M + m
modular exponentiations; however, collapsing all m of these
veriﬁcations into a single batch veriﬁcation using techniques
of Bellare et al. [1] reduces this to just 2m + 1 mod-
ular exponentiations. To do this, the NI chooses random
s1, . . . , sm ∈R {1, . . . , κ2}, where κ2 is a security parame-
ter, and checks if
?≡ α
· m(cid:5)
j=1 aj,i·sj
i=1 ai,0·si
mod P.
m(cid:5)
(cid:2)m
ρ
(3)
(cid:2)m
C
C si
vi
i
i=1
i=1
If the veriﬁcation fails, at least one Cvi
is incorrect, and
the NI aborts; otherwise, all of the Cvi are correct with
probability at least 1 − 1/κ2 and the NI accepts the proof.
531
B. Correctness
∗ is not on B(SP,L
Let us brieﬂy examine why this proof convinces the NI
∗). First observe that, by way of
that νL
construction, for 1 ≤ i ≤ m, the zeros of pi(τ ) are exactly
those values appearing on the sublist of B(SP,L
∗) deﬁned by
{νj+1, νj+2,··· , νj+m}, where j = (i − 1) · m, and that
these sublists cover the entire blacklist. Combined with Π1,
the ﬁrst line of Π2 proves that Ci hides the ith power of
∗; thus, if Equation 2 holds then it follows that Cvi is a
νL
commitment to an evaluation of pi(τ ) at the point νL
∗, since
≡ (Cm)ai,m (Cm−1)ai,m−1 ··· (C1)ai,1 αai,0
≡ α
≡ αpi(νL∗ )
(ai,mrm+···+ai,1r1)
ρ
L∗ +···+ai,1νL∗ +ai,0)
(ai,mν
ρ
βwi
ρ mod P.
Cvi
β
m
ρ
ρ
∗;
The remainder of the proof convinces the veriﬁer that no Cvi
∗ is not
hides the value zero, from which it concludes that νL
a root of any pi(τ ) and, consequently, that νL
∗).
∗ /∈ B(SP,L
C. Computational complexity
We now analyze the computational and communication
complexity of the Non-membership Proof Protocol. Let μρ
(resp. μP ) be the cost of multiplication modulo ρ (resp.
let ιρ (resp. ιP ) be the cost of a modular
modulo P ),
inversion modulo ρ (resp. P ), and let χρ (resp. χκ2) be
the cost of exponentiation modulo P with (cid:4)ρ-bit (resp.
(cid:4)log2(κ2)(cid:5)-bit) exponent.
Upon updating the blacklist,
the PE computes each
pi(τ ) mod ρ. Since each of these degree-m polynomials
is monic, there are only m coefﬁcients modulo ρ to send
for each polynomial. Consequently, transmitting these poly-
nomials instead of the blacklist requires zero additional
bandwidth. Thus, we do not consider the computational cost
of this step in our analysis.
∗ requires m ·
Evaluating each polynomial at the point νL
μρ work using Horner’s method; thus, the cost for this step is
m· m· μρ = M · μρ. Similarly, computing wi requires m· μρ
work; thus, the cost for this step is also m· m· μρ = M · μρ.
So far, this is 2M · μρ work for U.
Computing the commitment Ci requires two exponentia-
tions with (cid:4)ρ-bit exponents, plus one multiplication, all mod-
ulo P . The cost of computing all m such commitments is
then 2m(χρ + μP ). The same analysis applies to computing
each Cvi, thus yielding a total of 4m(χρ + μP ) + 2M · μρ
work for U.
The bandwidth cost for U to upload each commitment Ci
and Cvi to the NI is just 2m · (cid:4)P bits. Together with the
cost of U downloading the blacklist from the NI, this yields
a total communications complexity of M · (cid:4)ρ bits download
and 2m · (cid:4)P bits upload for U (and vice-versa for the NI).
The left-hand side of the batch proof, Equation 3, requires
m exponentiations with small exponent and m− 1 multipli-
cations modulo P ; this is m· χκ2 + (m− 1)· μP work. The
right-hand side requires m(m + 1) multiplications modulo ρ
to compute the exponents, followed by m+1 exponentiations
with exponents modulo ρ and m multiplications modulo P ;
this is m · χρ + M · μρ + m · μP work.
The costs of the Verinym Showing Protocol and of
the proof Π1 that the SP-speciﬁc pseudonym is computed
correctly are dependent on the details of the underlying
Nymble-like scheme, but are in any event independent of
the blacklist size M. Therefore, we omit them from our
detailed analysis of the dependence of the protocol’s cost
on M. All that is left to be considered, then, is the cost of
the large zero-knowledge proof, Π2, in Equation 1.
The ﬁrst line of Π2 requires U to compute 4(m − 1)
exponentiations with (cid:4)ρ-bit exponents, 2m multiplications
modulo P and 3m multiplications modulo ρ for a total cost
of 4(m − 1) · χρ + 2m · μP + 3m · μρ. U is also required to
upload 2·(m−1)·(cid:4)P +3(m−1)·(cid:4)ρ bits. Here, U is proving
that each Ci, i > 1, is a commitment to the product of the
values committed to in Ci−1 and C1. Verifying this requires
2m· χρ work by the NI, using knowledge of δ = logαρ (βρ)
to reduce the number of exponentiations.
The second and third lines of Π2 require U to compute m
multiplicative inverses modulo P , m multiplications modulo
P , m multiplicative inverses modulo ρ, 2m multiplications
modulo ρ and two exponentiations with (cid:4)ρ-bit exponents.
Thus the cost for U is m(ιP +μP +ιρ+2μρ)+2χρ. Similarly,
the NI can verify these proofs with mχρ + mιP work. This
is done using Brands’ NOT proof [3, §3]: to prove
ρ mod P ∧ (vi (cid:15)= 0)
(vi, wi) : Cvi = αvi
ρ βwi
P K
(cid:25)
(cid:26)
,
vi βζ
U simply performs a proof of knowledge of a discrete log
representation of αρ with respect to Cvi and βρ. That is, U
proves that she knows γ and ζ such that αρ = C γ
ρ mod
i mod ρ and ζ = −wiγ mod ρ.
−1
P ; in this case, γ = v
This convinces the NI that U knows vi and wi since they are
easily computable from γ and ζ, and that vi is nonzero (since
−1
i would be undeﬁned). U transmits 2m group
otherwise v
elements modulo ρ for a total of 2m·(cid:4)ρ bits communication.
the overall computational cost of this protocol
Thus,
for U is 2(M + 5m) = O(M ) multiplications modulo
ρ, 7m = O(m) multiplications modulo P , m = O(m)
multiplicative inverses modulo ρ, m = O(m) multiplicative
inverses modulo P , and 8m − 2 = O(m) exponentiations
modulo P with (cid:4)ρ-bit exponents. The cost for the NI is
M = O(M ) multiplications modulo ρ, 2m − 1 = O(m)
multiplications modulo P , m = O(m) multiplicative in-
verses modulo P , 4m = O(m) exponentiations modulo
P with (cid:4)ρ-bit exponents, and m = O(m) exponentiations
modulo P with (cid:4)κ2-bit exponents. Communication costs are
M · (cid:4)ρ bits download and ((7m − 3) · (cid:4)ρ + 2(m − 1) · (cid:4)P )
bits upload for U, and vice versa for the NI. As noted in [20],
Wikipedia currently blocks just under 7000 anonymous users
per month; this gives a reasonable estimate for the upper
bound on the size of a long-term blacklist for that site. With
our suggested parameters of (cid:4)ρ = 256 and (cid:4)P = 1536,
this means the blacklist will be 224 KB (assuming all
7000 SP-speciﬁc pseudonyms appear on the same long-term
blacklist), and U will upload less than 50 KB to the NI to
perform the non-membership proof.
As pointed out in [4], [5], much of this cost can be con-
verted to precomputation by using Brands’ error correction
factors technique. We refer the reader to [4] or [3, §5.4.2]
for details.
D. Performance measurements
We implemented key components of the long-term block-
ing construction in order to obtain performance measure-
ments. As with our implementation of the distributed (t, n)-
threshold VI, our long-term blacklisting construction is
written in C++ with NTL. All benchmarks were single-
threaded, and run on the same system described in §II-B.
Table III summarizes performance measurements for the
Non-membership Proof Protocol. We ran both U and the NI
on a single machine; thus, the performance measurements
contained herein represent computational expense only and
do not account for the expected latency due to communica-
tion between U and the NI. Moreover, we omit the necessary
call to the Verinym Showing Protocol in our experiments.
(Thus, these timings correspond precisely to the parts of
the protocol that we analyzed in §III-C.) Note, however,
that our implementation does not take advantage of the
VI’s knowledge of δ = logαρ (βρ) mod P to improve the
efﬁciency of the veriﬁcation equation, nor have we imple-
mented Brands’ error correcting factors technique. Either
of these modiﬁcations could improve on the performance
measurements we report.
We took our performance measurements for BLAC [32]
and PEREA [33],9 found in Figures 4 and 5, directly
from those schemes’ respective papers. Thus, the compar-
ison between our approach to long-term revocation and
the authentication protocols of BLAC and PEREA is only
an approximation. Moreover, the cost of our scheme will
increase (by a constant additive factor) when one considers
the additional cost of the Verinym Showing Protocol (which
needs to be run whether or not the user computes a non-
membership proof). Nonetheless, our measurements indicate
that even our unoptimized implementation dramatically out-
performs the approach taken by BLAC, EPID, and PEREA
for even moderate-sized blacklists. Moreover, we reiterate
that, unlike in those schemes, our non-membership proof
only needs to be executed during the Nymble Acquisition
Protocol, and therefore does not place additional load on the
SP nor affect the observed interaction latency between the
user and the SP. Indeed, our approach is practical even for
extremely large SPs, such as Wikipedia and Slashdot, which
are two oft-cited examples motivating the development of
Nymble-like systems.
E. Improving efﬁciency
1) Hybrid algorithm: Observe that, for small blacklist
sizes, the naive linear-time non-membership proof employed
by BLAC outperforms the more sophisticated square-root-