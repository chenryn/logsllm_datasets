## ðŸš€ Feature
A programmatic means (property) to disambiguate when a `_LRScheduler` should
be stepped.
## Motivation
Currently, there are a variety of `_LRScheduler`s found in
`torch.optim.lr_scheduler`. While the majority should be stepped per epoch
(e.g., `LambdaLR`, `MultiplicativeLR`, `StepLR`, etc), some are designed to be
stepped per training batch (`CyclicLR`, `OneCycleLR`, etc). Unfortunately,
there is no way (programmatically) to identify which category an arbitrary
`_LRScheduler` falls into without either maintaining a hard-coded list (ðŸ˜¢) or
parsing the docstring (ðŸ˜¢ ðŸ˜¢). This makes correctly injecting arbitrary
`_LRScheduler`s difficult to do in an extensible fashion.
## Pitch
Add two boolean properties to every `_LRScheduler`:
  * steps_on_batch
  * steps_on_epoch
Currently, neither symbol is used in `torch.optim.lr_scheduler`, so this
should be a strictly additive change as far as I'm aware.
## Alternatives
Every scheduler that exists in PyTorch today exclusively steps per batch or
per epoch. Therefore, either of the two properties alone would currently
satisfy the aforementioned motivation. However, should a scheduler be created
that is stepped at both stages, this option would fail. Later adding the
second property would be a pseudo-backwards incompatible change as significant
amounts of code would likely include `if not sched.step_epoch: ...` to
determine if the scheduler should be stepped per batch (or vice versa).
Given the minimal cost of adding both, the flexibility it enables, and the
potential to mitigate future challenges, I have opted to propose both
properties.
cc @vincentqb