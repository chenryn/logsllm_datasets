# Bug report
As written on the title I have the issue of having `__webpack_exports__` that
is undefined when loading (later) a second entry point.
I'm using the latest lib versions `webpack@5.35.0` and `webpack-dev-
server@3.11.2` on node `v15.11.0` on Linux.
I have a very simple config:
        entry: {
          index: {
            import: [paths.appIndexJs, ...((isEnvDevelopment && !shouldUseReactRefresh && [webpackDevClientEntry]) || [])],
            runtime: 'runtime'
          },
          app: {
            import: paths.appAppTsx,
            dependOn: 'index'
          }
        },
        output: {
          filename: '/js/[name].js',
          globalObject: 'window',
          library: {
            // name: 'index',
            type: 'window'
          },
          iife: true
        }
        [...]
My `runtime` & `index` are injected in the html and loaded first then I append
to the document a script element with `app.js` file.  
This one executing and failed on the last `if` since `__webpack_exports__` is
undefined  
(By the way I don't really know why id does not crash on the `for` but
whatever)
    /******/ function(__webpack_require__) { // webpackRuntimeModules
    /******/ "use strict";
    /******/ 
    /******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
    /******/ __webpack_require__.O(0, ["vendors-node_modules_ant-design_icons_es_components_Icon_js-node_modules_ant-design_icons_es_-64c2f1","vendors-node_modules_css-loader_dist_runtime_api_js-node_modules_css-loader_dist_runtime_cssW-2d1059","index"], function() { return __webpack_exec__("./src/App.tsx"), __webpack_exec__("./node_modules/webpack/hot/dev-server.js"); });
    /******/ var __webpack_exports__ = __webpack_require__.O();
    /******/ var __webpack_export_target__ = window;
    /******/ for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
    /******/ if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
    /******/ }
I don't have a reproduction case for you but my `index.js` is relatively
simple and my `app.js` is bundling the rest of the app (a react app).  
Basically what we are doing is loading the app only if we support the browser
and if not redirect the user to a warning/faq/tuto page.
    var userAgent = window.navigator.userAgent
    if (
      userAgent.indexOf('MSIE ') >= 0
      || userAgent.indexOf('Trident/') >= 0
      || userAgent.indexOf('Edge/') >= 0
    ) {
      window.location.href = '/non-supported-browser.html'
    } else {
      window._startLoading() // Just styling & animation
      var script = document.createElement('script')
      script.src = '/js/app.js'
      script.defer = true
      document.head.appendChild(script)
    }
I did multiple try and not found yet a proper way to solve this issue so I
really hope you can give me some help :)