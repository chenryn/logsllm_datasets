## PostgreSQL find out session's current query blocked by which transaction use pg_locks & pg_stat_activity    
### 作者                 
digoal                
### 日期                
2015-05-10                                                                                                       
### 标签                               
PostgreSQL , 查询 , 锁等待 , 诊断 , 等谁              
----                   
## 背景               
PostgreSQL和大多数传统RDBMS一样，都设计了大量的锁来保证并发操作的数据一致性。  
同时PG在设计锁等待时，以队列方式存储等待锁。  
参考  
ProcSleep()@src/backend/storage/lmgr/proc.c  
http://blog.163.com/digoal@126/blog/static/163877040201352010122653/  
因此，会出现一种问题。  
例如一个长事务A持有一个表的某条记录的更新锁。  
接下来的一个事务B要TRUNCATE这个表，会把这个锁放到等待队列去。  
在接下来的事务C......如果请求的锁和TRUNCATE表的锁发生冲突，也会放到等待队列去。  
这其实是有利有弊的，  
利是什么呢？  
B在A释放后，可以立即获得锁进行TRUNCATE。  
弊是什么？  
排在B后面的事务会被堵塞，虽然它们可能和A没有锁冲突，也需要等待。  
弊端往往在某些凑巧的情况下起到放大效果。  
例如一个表的操作非常频繁，如果刚好有一个长事务在里面，然后又刚好有事务需要获得一个排他锁，那么接下来的频繁DML请求都会被堵塞。  
一般可以用锁超时来降低弊端带来的这种影响，配置参数lock_timeout，如果锁等待超过这个时间，会强行中断，从等待队列去除。  
另外，如果我们没有设置lock_timeout或者不方便设置lock_timeout的话，一旦发现数据库出现了大量的等待，  
应该如何找到罪魁祸首呢？即处于等待状态的查询，它们到底在等待谁？  
找到之后可以人为的杀掉这些罪魁祸首。  
## 正文  
使用以下SQL查询等待信息  
```  
with t_wait as   
(select a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted),  
t_run as   
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and a.granted)   
select r.locktype,r.mode,r.usename r_user,r.datname r_db,r.relation::regclass,r.pid r_pid,r.xact_start r_xact_start,r.query_start r_query_start,r.query r_query,  
w.usename w_user,w.datname w_db,w.pid w_pid,w.xact_start w_xact_start,w.query_start w_query_start,w.query w_query    
from t_wait w,t_run r where  
  r.locktype is not distinct from w.locktype and  
  r.database is not distinct from w.database and  
  r.relation is not distinct from w.relation and  
  r.page is not distinct from w.page and  
  r.tuple is not distinct from w.tuple and  
  r.classid is not distinct from w.classid and  
  r.objid is not distinct from w.objid and  
  r.objsubid is not distinct from w.objsubid  
  order by r.xact_start;  
```  
例如：  
```  
-[ RECORD 1 ]-+---------------------------------------------------------------------  
locktype      | relation  
mode          | ShareUpdateExclusiveLock  
r_user        | postgres  
r_db          | postgres  
relation      | tbl  
r_pid         | 24579  
r_xact_start  | 2015-05-10 09:43:53.956252+08  
r_query_start | 2015-05-10 09:43:53.956252+08  
r_query       | autovacuum: VACUUM ANALYZE public.tbl (to prevent wraparound)  
w_user        | postgres  
w_db          | postgres  
w_pid         | 24737  
w_xact_start  | 2015-05-10 09:47:15.294562+08  
w_query_start | 2015-05-10 09:47:15.294562+08  
w_query       | insert into tbl(crt_time) select now() from generate_series(1,1000);  
.....  
(1001 rows)  
```  
干掉它：  
```  
postgres=# select pg_terminate_backend(24579);  
-[ RECORD 1 ]--------+--  
pg_terminate_backend | t  
```  
再次查询，等待消失。  
```  
postgres=# with t_wait as                       
(select a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted),  
t_run as   
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and a.granted)   
select r.locktype,r.mode,r.usename r_user,r.datname r_db,r.relation::regclass,r.pid r_pid,r.xact_start r_xact_start,r.query_start r_query_start,r.query r_query,  
w.usename w_user,w.datname w_db,w.pid w_pid,w.xact_start w_xact_start,w.query_start w_query_start,w.query w_query    
from t_wait w,t_run r where  
  r.locktype is not distinct from w.locktype and  
  r.database is not distinct from w.database and  
  r.relation is not distinct from w.relation and  
  r.page is not distinct from w.page and  
  r.tuple is not distinct from w.tuple and  
  r.classid is not distinct from w.classid and  
  r.objid is not distinct from w.objid and  
  r.objsubid is not distinct from w.objsubid  
  order by r.xact_start;  
(No rows)  
```  
实际上，这个查询还不是完美，因为锁等待实际上是一个TRUNCATE TABLE的操作造成的，而因为AUTO VACUUM FREEZE和TRUNCATE操作冲突了，所以这两个会话的锁都会对后面的DML造成影响，实际上，我们要找到的应该是级别最高的锁(TRUNCATE)，干掉这个才是最重要的，普通的vacuum并不会和DML冲突。  
所以我们需要改进一下这个查询语句。  
从pg_locks视图的函数的源码，可以知道mode是怎么来的。  
src/backend/utils/adt/lockfuncs.c  
```  
/*  
 * pg_lock_status - produce a view with one row per held or awaited lock mode  
 */  
Datum  
pg_lock_status(PG_FUNCTION_ARGS)  
{  
......  
                Datum           values[NUM_LOCK_STATUS_COLUMNS];  
......  
                values[12] = CStringGetTextDatum(GetLockmodeName(instance->locktag.locktag_lockmethodid, mode));  
......  
}  
src/backend/storage/lmgr/lock.c  
/*  
 * Fetch the lock method table associated with a given lock  
 */  
LockMethod  
GetLocksMethodTable(const LOCK *lock)  
{  
        LOCKMETHODID lockmethodid = LOCK_LOCKMETHOD(*lock);  
        Assert(0 < lockmethodid && lockmethodid < lengthof(LockMethods));  
        return LockMethods[lockmethodid];  
}  
/* Names of lock modes, for debug printouts */  
static const char *const lock_mode_names[] =  
{  
        "INVALID",  
        "AccessShareLock",  
        "RowShareLock",  
        "RowExclusiveLock",  
        "ShareUpdateExclusiveLock",  
        "ShareLock",  
        "ShareRowExclusiveLock",  
        "ExclusiveLock",  
        "AccessExclusiveLock"  
};  
/*  
 * Data structures defining the semantics of the standard lock methods.  
 *  
 * The conflict table defines the semantics of the various lock modes.  
 */  
static const LOCKMASK LockConflicts[] = {  
        0,  
        /* AccessShareLock */  
        (1 << AccessExclusiveLock),  
        /* RowShareLock */  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* RowExclusiveLock */  
        (1 << ShareLock) | (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* ShareUpdateExclusiveLock */  
        (1 << ShareUpdateExclusiveLock) |  
        (1 << ShareLock) | (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* ShareLock */  
        (1 << RowExclusiveLock) | (1 << ShareUpdateExclusiveLock) |  
        (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* ShareRowExclusiveLock */  
        (1 << RowExclusiveLock) | (1 << ShareUpdateExclusiveLock) |  
        (1 << ShareLock) | (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* ExclusiveLock */  
        (1 << RowShareLock) |  
        (1 << RowExclusiveLock) | (1 << ShareUpdateExclusiveLock) |  
        (1 << ShareLock) | (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock),  
        /* AccessExclusiveLock */  
        (1 << AccessShareLock) | (1 << RowShareLock) |  
        (1 << RowExclusiveLock) | (1 << ShareUpdateExclusiveLock) |  
        (1 << ShareLock) | (1 << ShareRowExclusiveLock) |  
        (1 << ExclusiveLock) | (1 << AccessExclusiveLock)  
};  
static const LockMethodData default_lockmethod = {  
        AccessExclusiveLock,            /* highest valid lock mode number */  
        LockConflicts,  
        lock_mode_names,  
#ifdef LOCK_DEBUG  
        &Trace_locks  
#else  
        &Dummy_trace  
#endif  
};  
static const LockMethodData user_lockmethod = {  
        AccessExclusiveLock,            /* highest valid lock mode number */  
        LockConflicts,  
        lock_mode_names,  
#ifdef LOCK_DEBUG  
        &Trace_userlocks  
#else  
        &Dummy_trace  
#endif  
};  
src/include/storage/lock.h  
/*  
 * These are the valid values of type LOCKMODE for all the standard lock  
 * methods (both DEFAULT and USER).  
 */  
/* NoLock is not a lock mode, but a flag value meaning "don't get a lock" */  
#define NoLock                                  0  
#define AccessShareLock                 1               /* SELECT */  
#define RowShareLock                    2               /* SELECT FOR UPDATE/FOR SHARE */  
#define RowExclusiveLock                3               /* INSERT, UPDATE, DELETE */  
#define ShareUpdateExclusiveLock 4              /* VACUUM (non-FULL),ANALYZE, CREATE  
                                       * INDEX CONCURRENTLY */  
#define ShareLock                               5               /* CREATE INDEX (WITHOUT CONCURRENTLY) */  
#define ShareRowExclusiveLock   6               /* like EXCLUSIVE MODE, but allows ROW  
                                       * SHARE */  
#define ExclusiveLock                   7               /* blocks ROW SHARE/SELECT...FOR  
                                                 * UPDATE */  
#define AccessExclusiveLock             8               /* ALTER TABLE, DROP TABLE, VACUUM  
                                                * FULL, and unqualified LOCK TABLE */  
```  
改进后的查询如下：  
用一个函数来将锁转换为数字，当然，你也可以直接使用case when子句来实现这个转换  
```  
postgres=# create or replace function f_lock_level(i_mode text) returns int as $$  
declare  
begin  
  case i_mode  
    when 'INVALID' then return 0;  
    when 'AccessShareLock' then return 1;  
    when 'RowShareLock' then return 2;  
    when 'RowExclusiveLock' then return 3;  
    when 'ShareUpdateExclusiveLock' then return 4;  
    when 'ShareLock' then return 5;  
    when 'ShareRowExclusiveLock' then return 6;  
    when 'ExclusiveLock' then return 7;  
    when 'AccessExclusiveLock' then return 8;  
    else return 0;  
  end case;  
end;   
$$ language plpgsql strict;  
```  
修改查询语句，按锁级别排序：  
```  
with t_wait as                       
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,  
a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,  
b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted),  
t_run as   
(select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.objid,a.objsubid,  
a.pid,a.virtualtransaction,a.virtualxid,a,transactionid,b.query,b.xact_start,b.query_start,  
b.usename,b.datname from pg_locks a,pg_stat_activity b where a.pid=b.pid and a.granted)   
select r.locktype,r.mode r_mode,r.usename r_user,r.datname r_db,r.relation::regclass,r.pid r_pid,  
r.page r_page,r.tuple r_tuple,r.xact_start r_xact_start,r.query_start r_query_start,  
now()-r.query_start r_locktime,r.query r_query,w.mode w_mode,w.pid w_pid,w.page w_page,  
w.tuple w_tuple,w.xact_start w_xact_start,w.query_start w_query_start,  
now()-w.query_start w_locktime,w.query w_query    
from t_wait w,t_run r where  
  r.locktype is not distinct from w.locktype and  
  r.database is not distinct from w.database and  