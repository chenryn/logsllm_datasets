T-SGX cannot protect libraries without source code because it
is a compiler-based approach. This problem could be solved
when library developers apply T-SGX to their closed-source
libraries. Also, we plan to improve T-SGX to support binary
instrumentation. Another limitation is that T-SGX does not
support page-level swapping between enclave memory and
main memory, as Sanctum [11] does. This limitation would
be problematic, especially when T-SGX runs in the public
cloud while sharing the limited enclave memory with other
processes. One possible solution to this problem is to swap out
the whole memory of an enclave program to the main memory.
We plan to study the effectiveness of this approach in the
future. Lastly, T-SGX cannot support a multithreaded enclave
program that wants use TSX for its original purpose: lock
elision. However, this does not hurt the program’s functionality
because lock elision is just an optional feature. Instead, it can
use a traditional lock for synchronization between different
threads without any problem.
B. Other Side-channel Attacks
Cache timing attack. A cache timing attack by a malicious
OS is a serious threat because the OS manages the virtual
address mapping of every program [10]. To mitigate the threat,
an enclave program needs to flush its private cache whenever
the OS resumes its execution, but, generally, it cannot obtain
such information. Fortunately, with T-SGX, an enclave program
can know exactly when it is resumed by the OS such that it
only needs to flush its private cache at that point. However,
this mitigation is not enough to cope with asynchronous cache
timing attacks that use the last-level cache (LLC) [28, 39].
We plan to study how to secure enclave programs from such
attacks.
13
Memory bus snooping attack. A memory bus snooping attack
is a hardware-level attack. By monitoring memory bus traffic, a
malicious peripheral device can know which memory addresses
are currently accessed by a CPU although the memory contents
are encrypted by SGX. To prevent such an attack, SGX needs to
provide software-level or hardware-level ORAM techniques [12,
38, 40, 49]. Also, we can minimize the number of memory
accesses as much as possible by using cache-based [8, 17, 18,
66] or register-based [15, 45] computations.
X. RELATED WORK
In this section, we discuss a number of important studies
that are related to T-SGX.
Trusted execution environments. Mainstream computing
environments are typically very complex. They provide only
limited assurance for confidentiality and integrity in light
of various attacks such as malware, kernel exploits, and
malicious peripherals. Numerous researchers and companies
have proposed a variety of TEEs to protect critical data
and computations with higher assurance. TEEs typically do
not trust the main OS because it could be compromised.
Thus,
they are implemented in places that even the OS
cannot control, such as a trusted hypervisor or hardware. For
example, Overshadow [7], NOVA [57], TrustVisor [43], Cloud
Terminal [42], InkTag [21], MiniBox [37], and Sego [33] are
TEEs based on trusted hypervisors. The basic idea of these
systems is to provide isolated memory for each trusted process
or module by using nested page tables or the extended page
table feature of hardware-based virtualization. Also, all the
interactions between a trusted process and the OS (i.e., system
calls) have to be managed by the trusted hypervisor. However,
a hypervisor is also software and potentially vulnerable to
various attacks [64]. Flicker [44] and TrustVisor [43] use
trusted hardware (TPM [60]) and attempt to minimize the
complexity of their TEE software. ARM’s TrustZone [1], Intel’s
TXT [16] and SGX [24], and Samsung’s KNOX [50] are widely-
deployed hardware-based TEEs. Numerous researchers have
proposed hardware-based TEE designs, such as TrInc [35],
SICE [3], SecureSwitch [58], OASIS [47], TrustLite [32], and
Sanctum [11].
OS attacks against TEEs. Although TEEs are designed to
protect user processes from a malicious OS, the latter still has
opportunities to attack the processes because they cannot access
system resources (e.g., storage, network) without the help of
the OS. Iago attacks [6] exploit this limitation. For example,
an Iago attack may manipulate the return value (i.e., a virtual
address) of the mmap() system call to make a target application
overwrite a portion of its stack and, thereby, hijack control
flow. Since any system call could potentially be exploited for
this type of attack, the TEE has to carefully validate the return
values of all system calls [21, 29]. The controlled-channel
attacks [54, 65] this paper focuses on also rely on the fact that
the OS manages system memory. Finally, AsyncShock [63]
demonstrates that synchronization bugs that are mostly harmless
in a traditional environment can allow an adversarial OS to
compromise SGX enclaves.
SGX applications. Among the various hardware-based TEEs,
Intel SGX recently has been receiving much attention because
it is widely deployed (all Intel Skylake CPUs support it) and
because it allows developers to use almost the full unprivileged
instruction set of the Intel CPU. For example, Haven [4],
Graphene-SGX [61, 62], and SCONE [2] are SGX-based
platforms to securely run an unmodified application in an
untrusted cloud. VC3 [51], M2R [12], and Ohrimenko et
al. [46] use SGX to perform data analytics, MapReduce com-
putations, and machine learning computations while ensuring
confidentiality and integrity. Also, Kim et al. [31], S-NFV [53],
Pires et al. [48], and SecureKeeper [5] show how we can use
SGX for securing network services, content-based routing, and
distributed computing. Moat [56] and CONFIDENTIAL [55]
design verification methodologies for enclave programs to check
whether they are secure. OpenSGX [29] is an emulator for the
execution of enclave programs for software development and
in-depth debugging and testing. SGX-Shield [52] implements
fine-grained address space layout randomization (ASLR) for
SGX. Ryoan [22] introduces a distributed two-way sandbox to
run untrusted enclave programs with sensitive user data while
preventing possible information leakage.
XI. CONCLUSION
Intel SGX has been considered to be one of the most
promising TEE technologies. However, the controlled-channel
attack [54, 65]—a noise-free side channel—has drawn its
security into question. This paper introduces T-SGX, which is a
secure, efficient, and practical scheme for protecting any enclave
program from controlled-channel attacks. It ensures that no
page fault sequence will be leaked to attackers and is an order of
magnitude faster than the state-of-the-art scheme [54] without
requiring manual developer effort or hardware modifications.
ACKNOWLEDGMENT
We thank Byoungyoung Lee for constructive discussions,
the anonymous reviewers for their helpful feedback, and GTISC
lab members for their proofreading efforts. This research was
supported by the NSF award DGE-1500084, CNS-1563848,
CRI-1629851 ONR under grant N000141512162, DARPA TC
program under contract No. DARPA FA8650-15-C-7556, and
DARPA XD3 program under contract No. DARPA HR0011-
16-C-0059, and ETRI MSIP/IITP[B0101-15-0644].
REFERENCES
[1] ARM, “Building a secure system using TrustZone technology,” Dec.
2008, pRD29-GENC-009492C.
[2] S. Arnautox, B. Tarch, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind,
D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers,
R. Kapitza, P. Pietzuch, and C. Fetzer, “SCONE: Secure Linux containers
with Intel SGX,” in Proceedings of the 12th USENIX Symposium on
Operating Systems Design and Implementation (OSDI), Savannah, GA,
Nov. 2016.
[3] A. M. Azab, P. Ning, and X. Zhang, “SICE: A hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM Conference on Computer and Communications
Security (CCS), Chicago, Illinois, Oct. 2011.
[4] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from
an untrusted cloud with Haven,” in Proceedings of the 11th USENIX
Symposium on Operating Systems Design and Implementation (OSDI),
Broomfield, Colorado, Oct. 2014.
[5] S. Brenner, C. Wulf, M. Lorenz, N. Weichbrodt, D. Goltzsche, C. Fetzer,
P. Pietzuch, and R. Kapitza, “SecureKeeper: Confidential ZooKeeper using
Intel SGX,” in Proceedings of the 16th Annual Middleware Conference
(Middleware), 2016.
[6] S. Checkoway and H. Shacham, “Iago attacks: Why the system call
API is a bad untrusted RPC interface,” in Proceedings of the 18th ACM
14
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), Houston, TX, Mar. 2013.
[7] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger,
D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: A virtualization-
based approach to retrofitting protection in commodity operating systems,”
in Proceedings of the 13th ACM International Conference on Architectural
Support for Programming Languages and Operating Systems (ASPLOS),
Seattle, WA, Mar. 2008.
[8] P. Colpa, J. Zhang, J. Gleeson, S. Suneja, E. de Lara, H. Raj, S. Saroiu, and
A. Wolman, “Protecting data on smartphones and tablets from memory
attacks,” in Proceedings of the 20th ACM International Conference on
Architectural Support for Programming Languages and Operating Systems
(ASPLOS), Istanbul, Turkey, Mar. 2015.
[9] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D. Sutter,
“Practical mitigations for timing-based side-channel attacks on modern
x86 processors,” in Proceedings of the 30th IEEE Symposium on Security
and Privacy (Oakland), Oakland, CA, May 2009.
[10] V. Costan and S. Devadas, “Intel SGX explained,” Cryptology ePrint
Archive, Report 2016/086, 2016, http://eprint.iacr.org/.
[11] V. Costan, I. Lebedev, and S. Devadas, “Sanctum: Minimal hardware
extensions for strong software isolation,” in Proceedings of the 25th
USENIX Security Symposium (Security), Austin, TX, Aug. 2016.
[12] T. T. A. Dinh, P. Saxena, E.-C. Cang, B. C. Ooi, and C. Zhang, “M2R:
Enabling stronger privacy in MapReduce computation,” in Proceedings
of the 24th USENIX Security Symposium (Security), Washington, DC,
Aug. 2015.
[13] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W. Felten, “SPORC:
Group collaboration using untrusted cloud resources,” in Proceedings
of the 9th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[14] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in
Proceedings of the 41st Annual ACM Symposium on Theory of Computing
(STOC), 2009.
[15] J. Götzfried and T. Müller, “Armored: CPU-bound encryption for Android-
driven ARM devices,” in Proceedings of the 8th International Conference
on Availability, Reliability and Security (ARES), 2013.
[16] J. Greene, “Intel trusted execution technology,” Intel Technology White
Paper, 2012.
[17] L. Guan, J. Lin, B. Luo, and J. Jing, “Copker: Computing with private
keys without RAM,” in Proceedings of the 2014 Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA, Feb.
2014.
[18] L. Guan, J. Lin, B. Luo, J. Jing, and J. Wang, “Protecting private keys
against memory disclosure attacks using hardware transactional memory,”
in Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2015.
[19] S. M. Hand, “Self-paging in the Nemesis operating system,” in Proceed-
ings of the 3rd USENIX Symposium on Operating Systems Design and
Implementation (OSDI), New Orleans, LA, Feb. 1999.
[20] M. Herlihy and J. Moss, “Transactional memory: Architectural support
for lock-free data structures,” in Proceedings of the 20th ACM/IEEE
International Symposium on Computer Architecture (ISCA), San Diego,
CA, USA, 1993.
[21] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “InkTag:
Secure applications on an untrusted operating system,” in Proceedings
of the 18th ACM International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), Houston,
TX, Mar. 2013.
[22] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed
sandbox for untrusted computation on secret data,” in Proceedings
of the 12th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), Savannah, GA, Nov. 2016.
[23] Intel, “Intel software guard extensions:
Intel attestation service
API,” https://software.intel.com/sites/default/files/managed/3d/c8/IAS_1_
0_API_spec_1_1_Final.pdf.
[24] ——, “Intel software guard extensions programming reference (rev2),”
[25] ——, “Intel 64 and IA-32 architectures software developer’s manual,”
Oct. 2014, 329298-002US.
Dec. 2015.
[26] Intel, “SGX Tutorial, ISCA 2015,” http://sgxisca.weebly.com/, Jun. 2015.
[27] I. Ion, N. Sachdeva, P. Kumaraguru, and S. ˇCapkun, “Home is safer than
the cloud!: Privacy concerns for consumer cloud storage,” in Proceedings
of the Seventh Symposium on Usable Privacy and Security (SOUPS),
Pittsburgh, Pennsylvania, 2011.
[28] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A shared cache attack
that works across cores and defies VM sandboxing—and its application
to AES,” in Proceedings of the 36th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2015.
[29] P. Jain, S. Desai, S. Kim, M.-W. Shih, J. Lee, C. Choi, Y. Shin, T. Kim,
B. B. Kang, and D. Han, “OpenSGX: An open platform for SGX research,”
in Proceedings of the 2016 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[30] S. Johnson, V. Scarlata, C. Rozas, E. Brickell, and F. Mckeen, “In-
tel software guard extensions: EPID provisioning and attestation ser-
vices,” https://software.intel.com/en-us/blogs/2016/03/09/intel-sgx-epid-
provisioning-and-attestation-services.
[31] S. Kim, Y. Shin, J. Ha, T. Kim, and D. Han, “A first step towards
leveraging commodity trusted execution environments for network
applications,” in Proceedings of the 14th ACM Workshop on Hot Topics
in Networks (HotNets), Philadelphia, PA, Nov. 2015.
[32] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan, “TrustLite: A
security architecture for tiny embedded devices,” in Proceedings of the
9th European Conference on Computer Systems (EuroSys), Amsterdam,
The Netherlands, Apr. 2014.
[33] Y. Kwon, A. M. Dunn, M. Z. Lee, O. S. Hofmann, Y. Xu, and E. Witchel,
“Sego: Pervasive trusted metadata for efficienctly verified untrusted system
services,” in Proceedings of the 21st ACM International Conference on
Architectural Support for Programming Languages and Operating Systems
(ASPLOS), Atlanta, GA, Apr. 2016.
[34] V. Leis, A. Kemper, and T. Neumann, “Exploiting hardware transactional
memory in main-memory databases,” in Proceedings of the 30th IEEE
International Conference on Data Engineering (ICDE), Chicago, IL,
Mar.–Apr. 2014.
[35] D. Levin, J. R. Douceur, J. R. Lorch, and T. Moscibroda, “TrInc: Small
trusted hardware for large distributed systems,” in Proceedings of the 6th
USENIX Symposium on Networked Systems Design and Implementation
(NSDI), Boston, MA, Apr. 2009.
[36] J. Li, M. Krohn, D. Mazières, , and D. Shasha, “Secure untrusted data
repository (SUNDR),” in Proceedings of the 6th USENIX Symposium on
Operating Systems Design and Implementation (OSDI), San Francisco,
CA, Dec. 2004.
[37] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry,
“MiniBox: A two-way sandbox for x86 native code,” in Proceedings of
the 2014 USENIX Annual Technical Conference (ATC), Philadelphia, PA,
Jun. 2014.
[38] C. Liu, A. Harris, M. Maas, M. Hicks, M. Tiwari, and E. Shi, “GhostRider:
A hardware-software system for memory trace oblivious computation,” in
Proceedings of the 20th ACM International Conference on Architectural
Support for Programming Languages and Operating Systems (ASPLOS),
Istanbul, Turkey, Mar. 2015.
[39] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache
side-channel attacks are practical,” in Proceedings of the 36th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[40] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovi´c, J. Ku-
biatowicz, and D. Song, “PHANTOM: Practical oblivious computation
in a secure processor,” in Proceedings of the 20th ACM Conference on
Computer and Communications Security (CCS), Berlin, Germany, Oct.
2013.
[41] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi, M. Dahlin, and
M. Walfish, “Depot: Cloud storage with minimal trust,” in Proceedings
of the 9th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[42] L. Martignoni, P. Poosankam, M. Zaharia, J. Han, S. McCamant, D. Song,
V. Paxson, A. Perrig, S. Shenker, and I. Stoica, “Cloud Terminal: Secure
access to sensitive applications from untrusted systems,” in Proceedings
of the 2012 USENIX Annual Technical Conference (ATC), Boston, MA,
Jun. 2012.
[43] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig,
“TrustVisor: Efficient TCB reduction and attestation,” in Proceedings of
the 31th IEEE Symposium on Security and Privacy (Oakland), Oakland,
CA, May 2010.
[44] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for TCB minimization,” in Proceed-
ings of the 3rd European Conference on Computer Systems (EuroSys),
Glasgow, Scotland, Mar. 2008.
[45] T. Müller, F. C. Freiling, and A. Dewald, “TRESOR runs encryption
securely outside RAM,” in Proceedings of the 20th USENIX Security
Symposium (Security), San Francisco, CA, Aug. 2011.
[46] O. Ohrimenko, C. F. Manuel Costa, S. Nowozin, A. Mehta, F. Schuster,
and K. Vaswani, “SGX-enabled oblivious machine learning,” in Proceed-
15
ings of the 25th USENIX Security Symposium (Security), Austin, TX,
Aug. 2016.
[47] E. Owusu, J. Guajardo, J. McCune, J. Newsome, A. Perrig, and
A. Vasudevan, “OASIS: On achieving a sanctuary for integrity and secrecy
on untrusted platforms,” in Proceedings of the 20th ACM Conference on
Computer and Communications Security (CCS), Berlin, Germany, Oct.
2013.
[48] R. Pires, M. Pasin, P. Felber, and C. Fetzer, “Secure content-based
routing using Intel Software Guard Extensions,” in Proceedings of the
16th Annual Middleware Conference (Middleware), 2016.
[49] A. Rane, C. Lin, and M. Tiwari, “Raccoon: Closing digital side-channels
through obfuscated execution,” in Proceedings of the 24th USENIX
Security Symposium (Security), Washington, DC, Aug. 2015.
[50] Samsung, “White paper: An overview of Samsung KNOX,” 2013,
enterprise Mobility Solutions.
[51] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-
Ruiz, and M. Russinovich, “VC3: Trustworthy data analytics in the cloud
using SGX,” in Proceedings of the 36th IEEE Symposium on Security
and Privacy (Oakland), San Jose, CA, May 2015.
[52] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim, “SGX-
Shield: Enabling address space layout randomization for SGX programs,”
in Proceedings of the 2017 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb.–Mar. 2017.
[53] M.-W. Shih, M. Kumar, T. Kim, and A. Gavrilovska, “S-NFV: Securing
NFV states by using SGX,” in Proceedings of the 1st ACM International
Workshop on Security in SDN and NFV, New Orleans, LA, Mar. 2016.
[54] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing your
faults from telling your secrets,” in Proceedings of the 11th ACM
Symposium on Information, Computer and Communications Security
(ASIACCS), Xi’an, China, May–Jun. 2016.
[55] R. Sinha, M. Costa, A. Lal, N. P. Lopes, S. Rajamani, S. A. Seshia,
and K. Vaswani, “A design and verification methodology for secure
isolated regions,” in Proceedings of the 2016 ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI), Santa
Barbara, CA, Jun. 2016.
[56] R. Sinha, S. Rajamani, S. Seshia, and K. Vaswani, “Moat: Verifying
confidentiality of enclave program,” in Proceedings of the 22nd ACM
Conference on Computer and Communications Security (CCS), Denver,
Colorado, Oct. 2015.
[57] U. Steinberg and B. Kauer, “NOVA: A microhypervisor-based secure vir-
tualization architecture,” in Proceedings of the 5th European Conference
on Computer Systems (EuroSys), Paris, France, Apr. 2010.
[58] K. Sun, J. Wang, F. Zhang, and A. Stavrou, “SecureSwitch: BIOS-assisted
isolation and switch between trusted and untrusted commodity OSes,” in
Proceedings of the 19th Annual Network and Distributed System Security
Symposium (NDSS), San Diego, CA, Feb. 2012.
[59] H. Takabi, J. B. Joshi, and G.-J. Ahn, “Security and privacy challenges in
cloud computing environments,” IEEE Security & Privacy, vol. 8, no. 6,
pp. 24–31, 2010.
[60] Trusted Computing Group, “Trusted platform module (TPM) sum-
mary,” http://www.trustedcomputinggroup.org/trusted-platform-module-
tpm-summary/.
[61] C.-C. Tsai, K. S. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A.
Kalodner, V. Kulkarni, D. Oliveira, and D. E. Porter, “Cooperation
and security isolation of library OSes for multi-process applications,”
in Proceedings of the 9th European Conference on Computer Systems
(EuroSys), Amsterdam, The Netherlands, Apr. 2014.
[62] C.-C. Tsai and D. Porter, “Graphene / Graphene-SGX Library OS - a
library OS for Linux multi-process applications, with Intel SGX support,”
https://github.com/oscarlab/graphene.
[63] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza, “AsyncShock:
Exploiting synchronisation bugs in Intel SGX enclaves,” in Proceedings
of the 21th European Symposium on Research in Computer Security
(ESORICS), Crete, Greece, Sep. 2016.
[64] Xen, “Xen security advisories,” http://xenbits.xen.org/xsa/.
[65] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Determin-
istic side channels for untrusted operating systems,” in Proceedings of
the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose,
CA, May 2015.
[66] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “CaSE: Cache-assisted
secure execution on ARM processors,” in Proceedings of the 37th IEEE
Symposium on Security and Privacy (Oakland), San Jose, CA, May 2016.