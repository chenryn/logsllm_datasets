### Semantics and String-Screen Mapping
These components aid users in comprehending the actions and their respective consequences associated with account deletion. As illustrated in Figure 4, the string-screen mapping graph for the Line App shows that the top-level layout is utilized by a fragment (Frag), which, in turn, is used by an activity (Act). This allows us to map the AD string "If you delete your LINE account..." to the Android activity `SettingsBaseFragmentActivity`.

### Finding Account Deletion Listeners
To reconstruct the link between the AD code and the AD GUI elements, we employ def-use-chain analysis. This method connects the strings displayed on the screen with the GUI actions that users can perform. Traditionally, def-use-chain analysis has been applied to program code to connect variable definitions with their uses. In Android apps, however, many definitions are found in configuration files, such as strings or GUI element IDs, which are outside the scope of conventional def-use-chain analysis.

Figure 5 provides an example from the EyeEm app, where the `settings_delete_account.xml` fragment is represented as a hierarchy. The root node is a `LinearLayout` with ID `0x7f0c0076`, and it contains three descendant `TextView` nodes. The one of interest, with ID `0x7f11037f`, displays the text "Delete Account," satisfying condition (2). Additionally, the button with ID `0x7f090322` and text "Delete" has a listener, as identified in Section 4.3, satisfying condition (1). Therefore, this layout is classified as an ADF layout.

### Retention Period Analyzer
Some applications have a well-defined retention policy, specifying that account information will be retained on the server for a certain period (e.g., 30 days) after a user requests account deletion. We developed an analyzer to check and extract this retention period. In our evaluation (Section 9.1), we confirmed the removal of account information after the retention period by waiting until the end of the period and then checking for LAI.

To automatically extract the retention period, the `RetentionPeriodAnalyzer` identifies text meeting two conditions: 
1. The text must contain phrases related to account deletion or restoration.
2. The text must include a time period string, consisting of a number and a time unit (e.g., "1 month," "3 days," or "30 minutes").

The grammar for identifying retention periods is defined as follows:
- **RetentionPeriodString** ::= `In Nounphrase` | `Nounphrase In` | `To NounPhrase`
- **In** ::= "after" | "in" | "within"
- **Nounphrase** ::= `Cd Nns` | `Cd Jj Nns`
- **Cd** ::= Integer
- **Nns** ::= "minutes" | "hours" | "days" | "weeks" | "months"
- **To** ::= "to"
- **Jj** ::= Adjective

Table 4 provides examples of retention period strings identified by the grammar, demonstrating its effectiveness in recognizing retention periods.

### Leftover Account Analyzer
To determine if an app leaves leftover account data, we use an automated approach enabled by Appium. The `LeftoverAccountAnalyzer` performs several steps: sign-up (account creation), account deletion (if offered), re-sign-up with the same credentials, and LAI verification. For LAI after app uninstallation, the account deletion step is replaced with app uninstall and reinstall.

#### Initial Sign-Up
The `LeftoverAccountAnalyzer` automatically installs the app, navigates to the "Sign-up" screen, creates a new account by providing the required user information, and logs the {GUI element → text input} mappings. Automating this process was challenging due to issues like text embedded in images and multi-page sign-ups. To ensure correct processing, we used a hybrid approach with human oversight.

We manually collected word sets to mark sign-up transitions and used them to seed the automated approach. Apps that deviated from the expected workflow (e.g., using anti-automation techniques) were routed for manual analysis. Specifically, we used three word sets: "sign-up," "next," and "done."

#### Automated Account Deletion
The `LeftoverAccountAnalyzer` invokes the `AccountDeletionAnalyzer` to determine if the app has an AD button. If so, it notes the corresponding screen and performs the following workflow: Login → Finding ADF → Deleting the Account.

- **Login**: The analyzer fills in login information using the sign-up data.
- **Finding ADF**: It navigates to the screen containing ADF widgets (e.g., "Delete Account" buttons).
- **Deleting the Account**: The analyzer completes the deletion process by finding and clicking the deletion widget.

#### Repeating the Sign-Up
The `LeftoverAccountAnalyzer` attempts to repeat the sign-up process by installing the app, extracting the GUI layout, and injecting the same input values. Apps are categorized based on whether they allow a second sign-up or display error messages.

#### Verifying LAI
All fields entered during sign-up are potentially retained on the server. To infer retained fields, we reverse-engineer the app-backend communication and trace AM (Account Manipulation) operations. These operations are implemented via API functions provided by backend SDKs or database requests.

We decompile the APK files into Smali code, identify account manipulation methods, extract AM API calls, and intercept these calls to log their parameters. Table 5 lists the AM API functions and corresponding operations.

User account data can be stored in two locations on the backend: the primary location (controlled by the backend SDK) and a custom location. The formula to determine the retained fields is:
\[ Fr = (Fap + Fac) - (Fdp + Fdc) \]
where \( Fr \) represents the retained fields, \( Fap \) and \( Fac \) are the fields added in the primary and custom locations, and \( Fdp \) and \( Fdc \) are the fields deleted in the primary and custom locations, respectively.

### Example
For the Rent-A-Car app, the primary location stores the user's first name, last name, email, password, and phone number, while the custom location stores the street address. Since no fields are deleted during account deletion, all fields are retained.

For the PiniOn app, the primary location stores the user's name, email, and password, and the custom location adds the birthday and gender. The app does not delete any fields, so all fields are retained.

This comprehensive approach ensures accurate detection and verification of leftover account information.