and unsigned operands for twos complement implementations: It inverts the bits. 
Bitwise Shift Operators 
The bitwise shift operators >> and  300) do_something(); 
In this expression, the + operator causes the usual arithmetic conversions to be 
applied to its operands. This means both jim and bob are promoted to ints, the 
addition takes place, and the resulting type of the expression is an int that holds the 
result of the addition (510). Therefore, do_something() is called, even though it looks 
like the addition could cause a numeric overflow. To summarize: Whenever there's 
arithmetic involving types narrower than an integer, the narrow types are promoted 
to integers behind the scenes. Here's another brief example: 
unsigned short a=1; 
if ((a-5) < 0) do_something(); 
Intuition would suggest that if you have an unsigned short with the value 1, and it's 
subtracted by 5, it underflows around 0 and ends up containing a large value. 
However, if you test this fragment, you see that do_something() is called because both 
operands of the subtraction operator are converted to ints before the comparison. So 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
254 
a is converted from an unsigned short to an int, and then an int with a value of 5 is 
subtracted from it. The resulting value is -4, which is a valid integer value, so the 
comparison is true. Note that if you did the following, do_something() wouldn't be 
called: 
unsigned short a=1; 
a=a-5; 
if (a < 0) do_something(); 
The integer promotion still occurs with the (a-5), but the resulting integer value of -4 
is placed back into the unsigned short a. As you know, this causes a simple conversion 
from signed int to unsigned short, which causes truncation to occur, and a ends up 
with a large positive value. Therefore, the comparison doesn't succeed. 
Rule 3: Same Type After Integer Promotions 
If the two operands are of the same type after integer promotions are applied, you 
don't need any further conversions because the arithmetic should be straightforward 
to carry out at the machine level. This can happen if both operands have been 
promoted to an int by integer promotions, or if they just happen to be of the same 
type and weren't affected by integer promotions. 
Rule 4: Same Sign, Different Types 
If the two operands have different types after integer promotions are applied, but 
they share the same signed-ness, the narrower type is converted to the type of the 
wider type. In other words, if both operands are signed or both operands are 
unsigned, the type with the lesser integer conversion rank is converted to the type of 
the operand with the higher conversion rank. 
Note that this rule has nothing to do with short integers or characters because they 
have already been converted to integers by integer promotions. This rule is more 
applicable to arithmetic involving types of larger sizes, such as long long int or long int. 
Here's a brief example: 
int jim =5; 
long int bob = 6; 
long long int fred; 
fred = (jim + bob) 
Integer promotions don't change any types because they are of equal or higher width 
than the int type. So this rule mandates that the int jim be converted into a long int 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
255 
before the addition occurs. The resulting type, a long int, is converted into a long long 
int by the assignment to fred. 
In the next section, you consider operands of different types, in which one is signed 
and the other is unsigned, which gets interesting from a security perspective. 
Rule 5: Unsigned Type Wider Than or Same Width as Signed Type 
The first rule for this situation is that if the unsigned operand is of greater integer 
conversion rank than the signed operand, or their ranks are equal, you convert the 
signed operand to the type of the unsigned operand. This behavior can be surprising, 
as it leads to situations like this: 
int jim = -5; 
if (jim < sizeof (int)) 
    do_something(); 
The comparison operator < causes the usual arithmetic conversions to be applied to 
both operands. Integer promotions are applied to jim and to sizeof(int), but they 
don't affect them. Then you continue into the usual arithmetic conversions and 
attempt to figure out which type should be the common type for the comparison. In 
this case, jim is a signed integer, and sizeof (int) is a size_t, which is an unsigned 
integer type. Because size_t has a greater integer conversion rank, the unsigned 
type takes precedence by this rule. Therefore, jim is converted to an unsigned integer 
type, the comparison fails, and do_something() isn't called. On a 32-bit system, the 
actual comparison is as follows: 
if (4294967291 < 4) 
    do_something(); 
Rule 6: Signed Type Wider Than Unsigned Type, Value Preservation Possible 
If the signed operand is of greater integer conversion rank than the unsigned operand, 
and a value-preserving conversion can be made from the unsigned integer type to the 
signed integer type, you choose to transform everything to the signed integer type, 
as in this example: 
long long int a=10; 
unsigned int b= 5; 
(a+b); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
256 
The signed argument, a long long int, can represent all the values of the unsigned 
argument, an unsigned int, so the compiler would convert both operands to the 
signed operand's type: long long int. 
Rule 7: Signed Type Wider Than Unsigned Type, Value Preservation Impossible 
There's one more rule: If the signed integer type has a greater integer conversion 
rank than the unsigned integer type, but all values of the unsigned integer type can't 
be held in the signed integer type, you have to do something a little strange. You take 
the type of the signed integer type, convert it to its corresponding unsigned integer 
type, and then convert both operands to use that type. Here's an example: 
unsigned int a = 10; 
long int b=20; 
(a+b); 
For the purpose of this example, assume that on this machine, the long int size has 
the same width as the int size. The addition operator causes the usual arithmetic 
conversions to be applied. Integer promotions are applied, but they don't change the 
types. The signed type (long int) is of higher rank than the unsigned type (unsigned 
int). The signed type (long int) can't hold all the values of the unsigned type 
(unsigned int), so you're left with the last rule. You take the type of the signed 
operand, which is a long int, convert it into its corresponding unsigned equivalent, 
unsigned long int, and then convert both operands to unsigned long int. The addition 
expression, therefore, has a resulting type of unsigned long int and a value of 30. 
Summary of Arithmetic Conversions 
The following is a summary of the usual arithmetic conversions. Table 6-6 
demonstrates some sample applications of the usual arithmetic conversions. 
If either operand is a floating point number, convert all operands to the 
floating point type of the highest precision operand. You're finished. 
Perform integer promotions on both operands. If the two operands are now of 
the same type, you're finished. 
If the two operands share the same signed-ness, convert the operand with the 
lower integer conversion rank to the type of the operand of the higher integer 
conversion rank. You're finished. 
If the unsigned operand is of higher or equal integer conversion rank than the 
signed operand, convert the signed operand to the type of the unsigned 
operand. You're finished. 
If the signed operand is of higher integer conversion rank than the unsigned 
operand, and you can perform a value-preserving conversion, convert the 
unsigned operand to the signed operand's type. You're finished. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
257 
If the signed operand is of higher integer conversion rank than the unsigned 
operand, but you can't perform a value-preserving conversion, convert both 
operands to the unsigned type that corresponds to the type of the signed 
operand. 
Table 6-6. Usual Arithmetic Conversion Examples 
Left 
Operand 
Type 
Right 
Operand 
Type 
Result 
Common 
Type 
int 
float 
1. Left operand converted to 
float 
float 
double 
char 
1. Right operand converted to 
double 
double 
unsigned int 
int 
1. Right operand converted to 
unsigned int 
unsigned int 
unsigned 
short 
int 
1. Left operand converted to 
int 
int 
unsigned char unsigned short 
1. Left operand converted to 
int 
2. Right operand converted to 
int 
int 
unsigned int: 
32 
short 
1. Left operand converted to 
unsigned int 
2. Right operand converted to 
int 
3. Right operand converted to 
unsigned int 
unsigned int 
unsigned int 
long int 
1. Left operand converted to 
unsigned long int 
2. Right operand converted to 
unsigned long int 
unsigned long 
int 
unsigned int 
long long int 
1. Left operand converted to 
long long int 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
258 
Table 6-6. Usual Arithmetic Conversion Examples 
Left 
Operand 
Type 
Right 
Operand 
Type 
Result 
Common 
Type 
long long int 
unsigned int 
unsigned long 
long int 
1. Left operand converted to 
unsigned long long int 
unsigned long 
long int 
Usual Arithmetic Conversion Applications 
Now that you have a grasp of the usual arithmetic conversions, you can look at where 
these conversions are used. 
Addition 
Addition can occur between two arithmetic types as well as between a pointer type 
and an arithmetic type. Pointer arithmetic is explained in "Pointer Arithmetic(? 
[????.])," but for now, you just need to note that when both arguments are an 
arithmetic type, the compiler applies the usual arithmetic conversions to them. 
Subtraction 
There are three types of subtraction: subtraction between two arithmetic types, 
subtraction between a pointer and an arithmetic type, and subtraction between two 
pointer types. In subtraction between two arithmetic types, C applies the usual 
arithmetic conversions to both operands. 
Multiplicative Operators 
The operands to * and / must be an arithmetic type, and the arguments to % must be 
an integer type. The usual arithmetic conversions are applied to both operands of 
these operators. 
Relational and Equality Operators 
When two arithmetic operands are compared, the usual arithmetic conversions are 
applied to both operands. The resulting type is an int, and its value is 1 or 0, 
depending on the result of the test. 
Binary Bitwise Operators 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
259 
The binary bitwise operators &, ^, and | require integer operands. The usual 
arithmetic conversions are applied to both operands. 
Question Mark Operator 
From a type conversion perspective, the conditional operator is one of C's more 
interesting operators. Here's a short example of how it's commonly used: 
int a=1; 
unsigned int b=2; 
int choice=-1; 
... 
result = choice ? a : b ; 
In this example, the first operand, choice, is evaluated as a scalar. If it's set, the 
result of the expression is the evaluation of the second operand, which is a. If it's not 
set, the result is the evaluation of the third operand, b. 
The compiler has to know at compile time the result type of the conditional expression, 
which could be tricky in this situation. What C does is determine which type would be 
the result of running the usual arithmetic conversions against the second and third 
arguments, and it makes that type the resulting type of the expression. So in the 