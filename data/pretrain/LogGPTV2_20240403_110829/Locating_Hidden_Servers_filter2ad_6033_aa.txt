title:Locating Hidden Servers
author:Lasse Øverlier and
Paul F. Syverson
Locating Hidden Servers
Lasse Øverlier
Norwegian Defence Research Establishment
and Gjøvik University College
lasse.overlier@{fﬁ,hig}.no
Paul Syverson
Naval Research Laboratory
PI:EMAIL
Abstract
Hidden services were deployed on the Tor
anonymous communication network in 2004. An-
nounced properties include server resistance to dis-
tributed DoS. Both the EFF and Reporters Without
Borders have issued guides that describe using hid-
den services via Tor to protect the safety of dissi-
dents as well as to resist censorship.
We present fast and cheap attacks that reveal the lo-
cation of a hidden server. Using a single hostile Tor
node we have located deployed hidden servers in
a matter of minutes. Although we examine hidden
services over Tor, our results apply to any client us-
ing a variety of anonymity networks. In fact, these
are the ﬁrst actual intersection attacks on any de-
ployed public network: thus conﬁrming general ex-
pectations from prior theory and simulation.
We recommend changes to route selection design
and implementation for Tor. These changes require
no operational increase in network overhead and
are simple to make; but they prevent the attacks we
have demonstrated. They have been implemented.
1 Introduction
Tor is a distributed low-latency anonymous
communication network developed by the Naval
Research Laboratory and the Free Haven Project.
It is currently the largest anonymity network in ex-
istence, with about 450 server nodes around the
world at the time of writing. It is popular and highly
recommended: it was rated one of the hundred best
products of 2005 by PC World. Since 2004 Tor has
also been used to underly services offered from hid-
den locations. These were introduced [13] as resis-
tant to distributed DoS since they were designed
to require a DDoS attack on the entire Tor net-
work in order to attack a hidden server. Hidden
servers have also been recommended for preserving
the anonymity of the service offerer and to resist
censorship.
Speciﬁcally Undergroundmedia.org
has published a guide to “Torcasting” (anonymity-
preserving and censorship-resistant podcasting).
And both the Electronic Frontier Foundation and
Reporters Without Borders have issued guides that
describe using hidden services via Tor to protect the
safety of dissidents as well as to resist censorship.
There have been several recent cases in the news in
which anonymous bloggers have or have not been
exposed and have or have not lost jobs, etc., as a re-
sult, depending on the policy of their ISP, the inter-
pretation of laws by various courts, and numerous
other factors. Recommendations for a technology
to protect anonymous bloggers and other publish-
ers, regardless of legal protection, would thus seem
to be timely and encouraging.
The Tor developers are careful, however, to warn
against using Tor in critical situations: upon startup
the Tor client announces, “This is experimental
software. Do not rely on it for strong anonymity.”
Nonetheless, with increasing high-proﬁle recom-
mendations to use Tor’s hidden services for appli-
cations such as those above, it is important to assess
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
the protection they afford. In this paper we demon-
strate attacks (not simulations) on the deployed Tor
network that reveal the location of a hidden server.
The attacks are cheap and fast: they use only a sin-
gle hostile Tor node and require from only minutes
to a few hours to locate a hidden server.
Although we examined hidden services on Tor,
our results are not limited in principle to either hid-
den services or to Tor. They should apply to the
hidden service design even if run on another under-
lying anonymity network and should apply to other
clients using an anonymity network, not just to hid-
den servers.
We believe that ours are the ﬁrst attacks that lo-
cate hidden servers, whether on hidden services on
a deployed network or in simulation. Also, while
there have been simulations and analytic results, we
believe ours are the ﬁrst published intersection at-
tacks carried out on a deployed anonymity network.
In Section 2, we review previous related work.
In Section 3, we describe the design of Tor’s hidden
services. In Section 4, we present various attacks
and the experimental results from running them.
In Section 5, we describe various countermeasures
that might be taken to our attacks and the effec-
tiveness of them. We also describe an implementa-
tion feature of Tor that our experiments uncovered
and how to change it to better resist the attacks.
In Section 6, we conclude with recommendations
for simple-to-implement design changes to hidden
services. These also should not add to the number
of hops or otherwise increase overhead to the de-
sign, but they should resist our attacks. We have
discussed both the implementation feature we un-
covered and our recommended design changes with
the Tor developers. As a result, the latest version of
Tor is resistant to the attacks we present herein. Fi-
nally, we discuss open problems and future work.
2 Previous Work on Hiding Services
and Anonymity
The earliest reference we can ﬁnd to a system
that hides the location of a service from those using
it is Ross Anderson’s Eternity Service [2]. Therein
it is suggested that servers hold encrypted ﬁles, and
these ﬁles are to be accessed by anonymous com-
munication to prevent uncovering of the location
of a server from which the ﬁle is being retrieved.
Early presentations of onion routing from the same
era described the use of onion routing to hide the
location of an automated classiﬁcation downgrader
so that users of the service would not be able to at-
tack it. Earlier still, Roger Needham noted the fun-
damental connection between anonymity and the
inability to selectively deny service [19, 20], which
was one of the motivating ideas in the Eternity Ser-
vice. The idea of hiding the location of a docu-
ment (or encrypted fragment of a document) also
underlies many censorship-resistant publishing de-
signs such as Free Haven [11] and Tangler [28].
Anonymous communication networks were in-
troduced by David Chaum [9]. He described a net-
work that distributes trust across multiple nodes
that carry the communication. The design is of
a public-key-based, high-latency anonymous com-
munication network such as might be appropriate
for email.
It is not for use in bidirectional, low-
latency communication, such as web trafﬁc, chat,
remote login, etc. Low-latency communication
anonymity was introduced for ISDN [22], but made
to anonymize within a group of users exchanging
ﬁxed and equal bandwidth with a local telephone
switch rather than anonymizing within an Internet-
wide group with diverse bandwidth needs such as
occur in the just mentioned applications. The oldest
anonymous communication system for web trafﬁc
is probably the Anonymizer [4]. Unlike the Chaum
design, all trafﬁc passes through a single proxy,
making it a single point of failure and/or attack in
many ways. Also unlike Chaum mixes, it does not
actually delay and mix trafﬁc. Trafﬁc is processed
FIFO. The Anonymizer is also probably one of
the most widely used anonymization systems: they
claim to have millions of users.
The ﬁrst published, as well as the ﬁrst deployed,
distributed system for low-latency anonymous In-
ternet communication was onion routing [16] in
1996, followed by the Freedom Network [8] from
1999 to 2001. The current version of onion routing,
Tor [13], was deployed in late 2003, and hidden ser-
vices using Tor were deployed in early 2004.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
All of these low-latency anonymity systems
work by proxying communication through multi-
ple hops; at each hop the communication changes
its appearance by adding or removing a layer of en-
cryption (depending on whether it is traveling from
the circuit originator to responder or vice versa).
They all use public key cryptography to distribute
session keys to the nodes along a route, thus es-
tablishing a circuit. Each session key is shared be-
tween the circuit initiator (client) and the one node
that was given the key in establishing the circuit.
Data that passes along the circuit uses these ses-
sion keys. Both Freedom and Tor have a default
circuit length of three nodes. For more details con-
sult the above cited work. The Java Anon Proxy
(JAP)/Web MIXes [6] is another popular system for
diffused low-latency anonymity. However, unlike
the others mentioned here, it works by mixing and
by diffusing only trust and jurisdiction. It does not
hide where communication enters and leaves the
network. All communication that enters at one lo-
cation leaves together (now mixed) at another loca-
tion. As such it is not directly amenable to the hid-
den service design to be described presently. JAP
has been deployed since 2000.
Hidden services in Tor, as described in the next
section and in [13], rely on a rendezvous server,
which mates anonymous circuits from two princi-
pals so that each relies only on himself to build
a secure circuit. The ﬁrst published design for a
rendezvous service was for anonymous ISDN tele-
phony [22] rather than Internet communication. As
such it had very different assumptions and require-
ments from the rendezvous servers we describe,
some of which we have already noted above. A ren-
dezvous server for IRC chat was mentioned in [16];
however, the ﬁrst detailed design for a rendezvous
server for Internet communication was by Gold-
berg [15]. It differs in many ways from rendezvous
servers as used by Tor’s hidden services, but we
will not discuss Goldberg’s design further here.
There is much literature on attacking anony-
mous communication [3]. Rather than single out
any of it here, we cite the relevant prior literature
at appropriate points below. The current paper is
the ﬁrst to focus speciﬁcally on attacks for locating
hidden services.
3 Location-hidden Services in Tor
One of the major vulnerabilities for a hidden ser-
vice in Tor is the server’s selection of the ﬁrst and
last node in the communication path. To a ﬁrst ap-
proximation, if an adversary can watch the edges of
a Tor circuit, then she can conﬁrm who is commu-
nicating. This is because the low-latency require-
ments make it easy to conﬁrm the timing signature
of trafﬁc ﬂowing (in both directions) over the cir-
cuit. This is true whether the adversary controls
the Tor nodes at the edges of the circuit or is just
observing the links from those nodes to the initia-
tor and responder. Actually, this vulnerability has
always been alleged and assumed but never previ-
ously demonstrated. A byproduct of our analysis of
hidden services is that we experimentally corrobo-
rate this trafﬁc conﬁrmation on Tor circuits. For
hidden services, this means that the service is vul-
nerable in every communication path it sets up with
a client if a member of the path can determine it is
being used by a hidden service and that it is the ﬁrst
node in the path.
In order to see how our attacks that locate hid-
den servers are done we need to describe how the
hidden service communication works. Fig. 1 shows
a normal setup of this communication channel.
In the current implementation of Tor, a con-
nection to a hidden service involves ﬁve important
nodes in addition to the nodes used for basic anony-
mous communication over Tor.
• HS, the Hidden Server offering some kind of
(hidden) service to the users of the Tor net-
work, e.g. web pages, mail accounts, login
service, etc.
• C, the client connecting to the Hidden Server.
• DS, a Directory Server containing information
about the Tor network nodes and used as the
point of contact for information on where to
contact hidden services.
• RP, the Rendezvous Point is the only node in
the data tunnel that is known to both sides.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
pull it down.1 Next, the Hidden Server contacts (2)
the Directory Server and asks it to publish the con-
tact information of its hidden service. The hidden
service is now ready to receive connection requests
from clients.
In order to retrieve data from the service the
Client connects (3) to DS and asks for the contact
information of the identiﬁed service and retrieves
it if it exists (including the addresses of Introduc-
tion Points). There can be multiple Introduction
Points per service. The Client then selects a node
in the network to act as a Rendezvous Point, con-
nects (4) to it and asks it to listen for connections
from a hidden service on C’s behalf. The Client re-
peats this until a Rendezvous Point has accepted,
and then contacts (5) the Introduction Point and
asks it to forward the information about the selected
RP.2 The Introduction Point forwards (6) this mes-
sage to the Hidden Server who determines whether
to connect to the Rendezvous Point or not.3 If OK,
the Hidden Server connects (7) to RP and asks to
be connected to the waiting rendezvous circuit, and
RP then forwards (8) this connection request to the
Client.
Now RP can start passing data between the two
connections and the result is an anonymous data
tunnel (9) from C to HS through RP.
From this we observe the following facts about
the nodes in the network:
• C does not know the location (IP address) of
HS, but knows the location of RP;
• HS does not know the location of C, but knows
the location of RP;
• RP does not know the location of either C or
HS, and he knows neither the service he is
serving nor the content of the messages re-
layed through him;
• there are multiple (currently three) nodes be-
tween HS and RP and two nodes between C
1In Tor, any node in a circuit can initiate a circuit teardown.
2Optionally, this could include authentication information
for the service to determine from whom to accept connections.
3This ﬂow is over the same anonymous circuit as (1), simi-
larly for (4) and (8).
Figure 1. Normal use of hidden ser-
vices and rendezvous servers
• IP, the Introduction Point where the Hidden
Server is listening for connections to the hid-
den service.
A normal setup of communication between a
client and a hidden service is done as shown
in Fig. 1. All the displayed message ﬂows are
anonymized, i.e., they are routed through several
anonymizing nodes on their path towards the other
end, as described in Section 2. Every arrow and
connection in the ﬁgure represents an anonymous
channel consisting of at least two or more interme-
diate nodes. (Hereafter, we use ‘node’ to refer ex-
clusively to nodes of the underlying anonymization
network, sometimes also called ‘server nodes’. Al-
though we are considering the Tor network specif-
ically, the setup would apply as well if some other
anonymizing network were used to underly the
hidden service protocol. The only exceptions are
C and HS, which may be anonymization nodes
or they may be merely clients external to the
anonymization network.)
First the Hidden Server connects (1) to a node
in the Tor network and asks if it is OK for the node
to act as an Introduction Point for his service. If
the node accepts, we keep the circuit open and con-
tinue; otherwise HS tries another node until suc-
cessful. These connections are kept open forever,
i.e., until one of the nodes restarts or decides to
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
matches among all active circuits through the node
she owns. If she ﬁnds a match, then her node has
been made part of the circuit between the Hidden
Server and the Rendezvous Point as Node 1, 2 or 3.
From this she will be able to determine a few facts.
First she will know when she has the node closest to
RP (Node 3) since she knows RP’s IP address, and
she can easily abandon the circuit and attack again.
Second, if her node has an unknown IP address on
both sides of the matching circuit, she knows she is