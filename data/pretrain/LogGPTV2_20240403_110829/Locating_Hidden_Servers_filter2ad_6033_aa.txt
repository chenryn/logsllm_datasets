# Locating Hidden Servers

**Authors:**
- Lasse Øverlier, Norwegian Defence Research Establishment and Gjøvik University College
- Paul F. Syverson, Naval Research Laboratory

## Abstract

Hidden services were introduced on the Tor anonymous communication network in 2004, with claimed properties including server resistance to distributed denial-of-service (DDoS) attacks. Both the Electronic Frontier Foundation (EFF) and Reporters Without Borders have published guides recommending the use of hidden services via Tor to protect dissidents and resist censorship.

In this paper, we present fast and inexpensive attacks that can reveal the location of a hidden server. Using a single hostile Tor node, we have successfully located deployed hidden servers within minutes. While our focus is on hidden services over Tor, our findings are applicable to any client using various anonymity networks. These are the first practical intersection attacks on any deployed public network, confirming theoretical expectations and simulations.

We recommend changes to the route selection design and implementation for Tor. These changes do not increase operational overhead and are straightforward to implement, but they effectively prevent the attacks we have demonstrated. These recommendations have been implemented in the latest version of Tor.

## 1. Introduction

Tor is a distributed, low-latency anonymous communication network developed by the Naval Research Laboratory and the Free Haven Project. It is currently the largest anonymity network, with approximately 450 server nodes worldwide at the time of writing. Tor has been highly recommended and was rated one of the top 100 products of 2005 by PC World. Since 2004, Tor has also supported hidden services, which are designed to be resistant to DDoS attacks and to preserve the anonymity of service providers and resist censorship.

Specifically, Undergroundmedia.org has published a guide to "Torcasting" (anonymity-preserving and censorship-resistant podcasting). The EFF and Reporters Without Borders have also issued guides on using hidden services via Tor to protect dissidents and resist censorship. Recent news cases highlight the importance of technology to protect anonymous bloggers and publishers, regardless of legal protection.

While the Tor developers caution against using Tor in critical situations, the increasing high-profile recommendations for its use make it essential to assess the protection provided by hidden services. In this paper, we demonstrate real-world attacks on the deployed Tor network that reveal the location of hidden servers. These attacks are both cheap and fast, requiring only a single hostile Tor node and taking just minutes to a few hours to locate a hidden server.

Although our focus is on hidden services over Tor, our results are not limited to either hidden services or Tor. They should apply to the hidden service design even if run on another underlying anonymity network and to other clients using an anonymity network.

In Section 2, we review related work. In Section 3, we describe the design of Tor’s hidden services. In Section 4, we present various attacks and the experimental results. In Section 5, we discuss countermeasures and their effectiveness, as well as an implementation feature uncovered during our experiments. In Section 6, we conclude with recommendations for design changes to hidden services, which have been implemented in the latest version of Tor.

## 2. Previous Work on Hiding Services and Anonymity

The concept of hiding the location of a service from its users dates back to Ross Anderson’s Eternity Service [2], which suggested that servers hold encrypted files and access them through anonymous communication. Early onion routing presentations described using onion routing to hide the location of an automated classification downgrader. Roger Needham noted the fundamental connection between anonymity and the inability to selectively deny service [19, 20], a key idea in the Eternity Service. The idea of hiding the location of a document also underlies many censorship-resistant publishing designs such as Free Haven [11] and Tangler [28].

Anonymous communication networks were introduced by David Chaum [9], who described a public-key-based, high-latency network suitable for email. Low-latency communication anonymity was introduced for ISDN [22], but it was designed for a local group rather than an Internet-wide group. The oldest web traffic anonymization system is probably the Anonymizer [4], which processes all traffic through a single proxy, making it a single point of failure. The first distributed system for low-latency anonymous Internet communication was onion routing [16] in 1996, followed by the Freedom Network [8] from 1999 to 2001. The current version of onion routing, Tor [13], was deployed in late 2003, and hidden services using Tor were deployed in early 2004.

All these low-latency anonymity systems work by proxying communication through multiple hops, changing the appearance of the communication at each hop by adding or removing layers of encryption. They use public key cryptography to distribute session keys to the nodes along a route, establishing a circuit. The Java Anon Proxy (JAP)/Web MIXes [6] is another popular system, but it does not hide where communication enters and leaves the network.

Hidden services in Tor rely on a rendezvous server, which mates anonymous circuits from two principals. The first published design for a rendezvous service was for anonymous ISDN telephony [22]. A rendezvous server for IRC chat was mentioned in [16], and the first detailed design for a rendezvous server for Internet communication was by Goldberg [15].

There is extensive literature on attacking anonymous communication [3]. This paper is the first to focus specifically on attacks for locating hidden services.

## 3. Location-Hidden Services in Tor

One of the major vulnerabilities for a hidden service in Tor is the server’s selection of the first and last node in the communication path. If an adversary can watch the edges of a Tor circuit, they can confirm who is communicating due to the low-latency requirements, which make it easy to confirm the timing signature of traffic flowing over the circuit. This vulnerability has always been alleged and assumed but never previously demonstrated. Our analysis of hidden services experimentally corroborates this traffic confirmation on Tor circuits. For hidden services, this means that the service is vulnerable in every communication path it sets up with a client if a member of the path can determine it is being used by a hidden service and that it is the first node in the path.

To understand our attacks that locate hidden servers, we need to describe how hidden service communication works. Figure 1 shows a normal setup of this communication channel.

### Communication Setup

In the current implementation of Tor, a connection to a hidden service involves five important nodes in addition to the nodes used for basic anonymous communication over Tor:

- **HS (Hidden Server):** Offers a hidden service to the users of the Tor network.
- **C (Client):** Connects to the Hidden Server.
- **DS (Directory Server):** Contains information about the Tor network nodes and is used as the point of contact for information on where to contact hidden services.
- **RP (Rendezvous Point):** The only node in the data tunnel known to both sides.
- **IP (Introduction Point):** Where the Hidden Server listens for connections to the hidden service.

#### Normal Communication Flow

1. **Hidden Server Initialization:**
   - The Hidden Server connects to a node in the Tor network and asks if it can act as an Introduction Point for the service.
   - If the node accepts, the circuit is kept open; otherwise, the Hidden Server tries another node until successful.
   - The Hidden Server then contacts the Directory Server and asks it to publish the contact information of its hidden service.

2. **Client Connection:**
   - The Client connects to the Directory Server and retrieves the contact information of the identified service, including the addresses of Introduction Points.
   - The Client selects a node in the network to act as a Rendezvous Point, connects to it, and asks it to listen for connections from the hidden service on the Client's behalf.
   - The Client repeats this until a Rendezvous Point has accepted, then contacts the Introduction Point and asks it to forward the information about the selected Rendezvous Point.
   - The Introduction Point forwards this message to the Hidden Server, who determines whether to connect to the Rendezvous Point.
   - If approved, the Hidden Server connects to the Rendezvous Point and asks to be connected to the waiting rendezvous circuit.
   - The Rendezvous Point then forwards this connection request to the Client.

3. **Data Tunnel:**
   - The Rendezvous Point starts passing data between the two connections, creating an anonymous data tunnel from the Client to the Hidden Server through the Rendezvous Point.

### Observations

- The Client does not know the IP address of the Hidden Server but knows the location of the Rendezvous Point.
- The Hidden Server does not know the location of the Client but knows the location of the Rendezvous Point.
- The Rendezvous Point does not know the location of either the Client or the Hidden Server and has no knowledge of the service or the content of the messages relayed through it.
- There are multiple (currently three) nodes between the Hidden Server and the Rendezvous Point and two nodes between the Client and the Rendezvous Point.

From this setup, we can see that the security of the hidden service depends on the integrity of the nodes in the communication path. If an adversary can control or observe the first or last node in the path, they can potentially identify the Hidden Server.

## 4. Attacks and Experimental Results

### Attack Methodology

Our attacks exploit the vulnerability in the selection of the first and last nodes in the communication path. By controlling a single hostile Tor node, we can monitor the traffic and identify matches among all active circuits through the node. If we find a match, we can determine that our node is part of the circuit between the Hidden Server and the Rendezvous Point. 

### Key Findings

- **Node Identification:** We can identify when our node is closest to the Rendezvous Point (Node 3) because we know the Rendezvous Point's IP address. If our node has an unknown IP address on both sides of the matching circuit, we know we are Node 2.
- **Attack Speed:** Using a single hostile Tor node, we can locate a hidden server within minutes to a few hours.
- **Cost-Effectiveness:** These attacks are inexpensive and do not require significant resources.

### Experimental Results

Our experiments confirm that the attacks are effective and can be carried out quickly. We have successfully located several deployed hidden servers using the methods described.

## 5. Countermeasures and Effectiveness

### Countermeasures

1. **Route Selection Changes:**
   - Modify the route selection algorithm to ensure that the first and last nodes in the communication path are more secure.
   - Implement additional checks to verify the integrity of the nodes in the path.

2. **Implementation Feature:**
   - During our experiments, we uncovered an implementation feature in Tor that can be modified to better resist the attacks. This feature has been addressed in the latest version of Tor.

### Effectiveness

- **Prevention of Attacks:** The recommended changes to the route selection design and implementation effectively prevent the attacks we have demonstrated.
- **Operational Overhead:** These changes do not increase operational overhead and are simple to implement.

## 6. Conclusion and Recommendations

### Design Changes

We recommend the following design changes to hidden services:

1. **Enhanced Route Selection:**
   - Ensure that the first and last nodes in the communication path are selected from a more secure pool of nodes.
   - Implement additional verification mechanisms to ensure the integrity of the nodes in the path.

2. **Implementation Improvements:**
   - Address the implementation feature uncovered during our experiments to better resist the attacks.

These changes have been implemented in the latest version of Tor, making it more resistant to the attacks we have demonstrated.

### Future Work

- **Further Security Analysis:** Conduct further security analysis to identify and mitigate potential new vulnerabilities.
- **Performance Evaluation:** Evaluate the performance impact of the implemented changes to ensure that they do not compromise the low-latency requirements of Tor.
- **User Education:** Provide guidance to users on best practices for using hidden services securely.

By implementing these changes, we can enhance the security and robustness of hidden services in Tor, ensuring that they continue to provide strong anonymity and resistance to attacks.