c, m, p
, r1, I1, O1
σ
=(cid:3)
(cid:6)
(cid:8), m
c
(cid:8)(cid:7)
(cid:8), p
(cid:8)
1
(cid:8)
, I1, O
1
, r
l
,
where σ can denote a signal (cid:10) (i, n), ⊗ (i, n) or no signal at
all.
Suppose that r2 =lg r1, I2 =lg I1 and O1 =lg O2. Then
(cid:6)
(cid:7)
c, m, p
l
(cid:8)
(cid:8)
(cid:8)
=lg r
1 and O
with r
then σin(i) = l ≤ lg.
2
2
, r2, I2, O2
σ
=(cid:3)
=lg O
c
(cid:8)(cid:7)
(cid:8), p
(cid:6)
(cid:8), m
1. In addition, if σ = (cid:10) (i, n),
(cid:8)
(cid:8)
, I2, O
2
, r
(cid:8)
2
,
l
Proof: The steps are executed according to one
of the rules from Figure 6. The result is clear from
examining every rule.
Lemma 3 (Soundness Preservation for Local Semantics
part two). Let lg be a security level and l (cid:2) lg. Suppose
that
σ
=(cid:3)
(cid:6)
c
(cid:8), m
(cid:8), p
(cid:8)(cid:7)
l
(cid:8)
(cid:8), I, O
, r
,
(cid:6)
(cid:7)
c, m, p
, r, I, O
(cid:8) =lg r and O
l
where σ can denote a signal (cid:10) (i, n), ⊗ (i, n) or no signal at
(cid:8) =lg O. In addition, if σ = (cid:10) (i, n),
all. Then r
then σin(i) = l (cid:2) lg.
Proof: The execution step occurs according to one
of the rules from Figure 6. The result is clear from
examining every rule.
Before we continue, we need to deﬁne security-level
limited equality for some additional concepts. We say
(cid:8)
that sets of local execution states L and L
are equal
(cid:8)
) iﬀ for all local
up to security level lg (written L =lg L
∈ L with l ≤ lg, there is
execution states lec =
(cid:8) = lec and
a local execution state lec
such that lec
vice versa. We say that waiting queues wq =lg wq
iﬀ
(i, n) for all n ≥ 0 and input channels i
(cid:8)
wq(i, n) =lg wq
such that σin(i) ≤ lg.
Lemma 4 (Soundness Preservation for Global Seman-
tics). Let lg be a security level. Suppose that
(cid:7)
P, m, p
(cid:8) ∈ L
(cid:8)
l
(cid:6)
(cid:8)
(cid:5)L1, wq1, r1, I1, O1(cid:6) =(cid:3) (cid:5)L
(cid:8)
1
(cid:8)
, wq
1
(cid:8)
, r
1
(cid:8)
, I1, O
1
(cid:6) ,
and that
(cid:5)L2, wq2, r2, I2, O2(cid:6) =(cid:3) (cid:5)L
(cid:8)
2
(cid:8)
, wq
2
(cid:8)
, r
2
, I2, O
(cid:6) ,
(cid:8)
2
with L1 =lg L2, wq1 =lg wq2, r1 =lg r2, I1 =lg I2 and O1 =lg
O2. Suppose that the scheduler function selectlowprio is
being used.
(cid:8)
=lg r
2,
(cid:8)
2.
Then we also have that L
(cid:8)
=lg O
1
(cid:8)
(cid:8)
=lg wq
2, r
1
(cid:8)
(cid:8)
2, wq
1
=lg L
O
(cid:8)
1
(cid:6)
=
P1, m1, p1
(cid:6)
(cid:7)
l1
P2, m2, p2
=
=
(cid:7)
l2
Proof: We deﬁne
lec1
selectlowprio(L1) and we write lec2 =
selectlowprio(L2). We ﬁrst handle the case that l1 ≤ lg.
Because L1 =lg L2, we have that lec1 = lec2. Inspection
of the rules from Figure 7, together with Lemma 2 now
easily yields the result.
(cid:8)
(cid:8)
2, and O
1
=lg r1 =lg r2 =lg r
In the alternate case l1 (cid:2) lg, we know from Lemma 3
(cid:8)
(cid:8)
=lg O1 =lg O2 =lg O
that r
2.
1
In addition, it is clear from inspecting the rules of the
(cid:8)
=lg
global semantics in Figure 7 that L
1
wq
(cid:8)
2.
We are now ready to give the proof of Theorem 1.
Proof of Theorem 1 (Soundness): Take a program P,
any security level l ∈ L and two input channel states I
(cid:8)
. Suppose that (P, I) =(cid:3)n (r, O), or
and I
(cid:8)
=lg L
2 and wq
, such that I =l I
(cid:8)
1
(cid:8)
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)n (cid:5)L, wq, r, I, O(cid:6)
(cid:8), O
(cid:8)
(cid:8)
) =(cid:3)n (r
(cid:5)L0, wq0, r0, I
(cid:8) =l L, wq
), or
(cid:8), O0(cid:6) =(cid:3)n (cid:5)L
(cid:8) =l wq, r
(cid:8), wq
(cid:8), O
(cid:8), r
(cid:8), I
By induction on n, and using Lemma 4, we can easily
prove that L
(cid:8) =l r and O =l O
(cid:8)
.
and (P, I
(cid:8)(cid:6) .
C. Precision
Informally, we call a technique transparent for a
program P with input I if it makes P produce the
same externally observable results for this input. The
precision of a technique is a measure of the set of
pairs (P, I) for which the technique is transparent.
More such pairs means higher precision. The second
of our two main theorems gives a lower bound on
the precision of secure multi-execution. We show that
the technique is transparent for terminating runs of
termination-sensitively noninterferent programs. This
set of programs strictly includes all programs which
are well typed under the type system described by
Volpano and Smith [16].
Theorem 2 (Precision of Secure Multi-Execution). Sup-
pose we have a noninterferent program P. Suppose that
∗ (cid:2)
(cid:3)
(P, I) (cid:2)
p, O
for some I, p and O. Then
(P, I) =(cid:3)∗
(p, O) .
Before we continue, we deﬁne the limitation of an
input I to a security level l ∈ L:
⎧⎪⎪⎨⎪⎪⎩
if σin(i) ≤ l,
I(i)
(cid:3)→ vdefault otherwise.
I|
l (i) =
It is clear that I|
l
=l I.
Lemma 5 (Correspondence between Standard Execu-
tion and Secure Multi-Execution). Let l ∈ L. Let P be a
program. Suppose that
(cid:7)
l
∈ L. Deﬁne Il = I|
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L, wq, r, I, O(cid:6) ,
c, m, p
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)
(cid:8)(cid:6) ,
∗ (cid:5)c, m, p, Il, O
(o) = O(o) for all o such that σout(o) = l.
l, then
(cid:6)
with
(cid:8)
with O
Furthermore, the number of global execution steps using
rules (1), and (3) and involving a local execution step for a
local execution state at security level l in the derivation of
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L, wq, r, I, O(cid:6)
is equal to the number of standard execution steps in the
derivation of
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)
∗ (cid:5)c, m, p, Il, O
(cid:8)(cid:6) .
Proof: We present a proof by induction on the num-
ber of global execution steps used in the derivation of
the statement
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L, wq, r, I, O(cid:6) .
If a global execution step was used with a local
transition on a local execution state at security level
(cid:8) (cid:2) l, then the result is directly clear by inspection of
l
the rules for the global and local semantics in Figure 7
and Figure 6.
For global execution steps from the list in Figure 7
involving a local execution step on a local execution
state at security level l, we prove that we can make
a corresponding step in the standard execution, main-
taining the properties of this lemma.
For global semantic rule (1) from Figure 7 instanti-
ated with one of the local semantic rules (1) through (6)
from Figure 6, it is easy to verify that a corresponding
standard execution step from Figure 5 applies to the
standard execution state.
For both global semantic rule (1) instantiated with
local semantic rule (12) or (9) and global semantic rule
(3) with local semantic rule (10), standard semantic rule
(8) can be applied to the standard execution state, en-
suring the results of this theorem. For global semantic
rule (4), with local semantic rule (11), the result is clear
without an execution step on the standard execution
state.
For global semantic rule (1) instantiated with local
semantic rule (7) or (8), applying standard semantic
rule (7) provides the correct result.
We can now prove Theorem 2.
Proof of Theorem 2 (Precision): We know that
(cid:5)P, m0, p0, I, O0(cid:6) (cid:2)
∗ (cid:5)skip, m f , p, I, O(cid:6) .
117
1) Termination: Let (cid:5)LP,0, wq0, r0, I, O0(cid:6) be the initial
global execution conﬁguration for program P. We ﬁrst
prove that execution of (cid:5)LP,0, wq0, r0, I, O0(cid:6) terminates.
Let’s assume that it doesn’t. Then there is an inﬁnite
list of global execution states
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)(cid:5)L1, wq1, r1, I, O1(cid:6)
=(cid:3)(cid:5)L2, wq2, r2, I, O2(cid:6) =(cid:3)···
∗ (cid:2)
with p
(cid:8)(cid:3)
(cid:8), O
(cid:8) =l p and O
Because the sets of security levels for which there are
local execution states in Li are ﬁnite and descending,
and because each global execution step applies a local
execution step to one element of Li there must be at
least one security level l such that an inﬁnite amount
of global execution steps in this chain apply a local
execution step to a local execution state at security
level l. Clearly, at most one such execution step can
be done using the global semantic rule (2), so because
of Lemma 5, there must be an inﬁnite set of standard
execution states (cid:5)ci, mi, pi, Il, Oi(cid:6) such that
(cid:5)LP,0, wq0, r0, I, O0(cid:6) =(cid:3)∗ (cid:5)L f , wq f , r f , I, O f(cid:6) ,
,
l. However, we know that (P, I) (cid:2)
∗ (cid:2)
p
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)1 (cid:5)c1, m1, p1, l, Il(cid:6)O1
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)2 (cid:5)c2, m2, p2, l, Il(cid:6)O2
···
(cid:3)
with Il = I|
p, O
and that P is noninterferent. Therefore, we also know
(cid:8) =l O, and the
that (P, Il) (cid:2)
standard execution of P with input Il must terminate.
Because standard execution is deterministic for our
model language, this is a contradiction.
Now let (cid:5)L f , wq f , r f , I, O f(cid:6) be the global execution
state such that
and (cid:5)L f , wq f , r f , I, O f(cid:6) is terminated. It is clear that L f
is empty because otherwise one of the global execution
rules would apply.
2) No eternal waiters: We prove by induction on the
security levels l ∈ L, ordered according to the total
order on L, that wq f (i, n) contains no execution states
for security levels ≤ l for any pair (i, n).
Let l be a security level such that the induction
(cid:8) < l. Suppose that wq f (i, n)
hypothesis holds for all l
contains a local execution state
l. Because
(cid:8) < l and that
of Lemma 1, we know that σin(i) = l
pwq(i) = n and cwq (cid:2) skip. Because of Lemma 5, we
then know that
where Il = I|
l. This last state cannot be stuck and
because of noninterference of P, we know that P must
terminate for the input Il, so that
∗ (cid:5)cwq, mwq, pwq, Il, Owq(cid:6) ,
(cid:5)P, m0, p0, Il, O0(cid:6) (cid:2)
(cid:8)
cwq, mwq, pwq
(cid:9)