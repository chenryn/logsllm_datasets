---
author: Adarsh Verma
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 7937
date: '2017-10-21 23:23:00'
editorchoice: true
excerpt: 了解NASA顶级程序员如何编写关键任务代码。为了确保代码更清晰、安全且易于理解，NASA的喷气推进实验室制定了10条编码规则。
fromurl: https://fossbytes.com/nasa-coding-programming-rules-critical/
id: 8984
islctt: true
largepic: /data/attachment/album/201710/21/232332dxjaxwomx2xjmxbt.png
permalink: /article-8984-1.html
pic: /data/attachment/album/201710/21/232332dxjaxwomx2xjmxbt.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 了解NASA顶级程序员如何编写关键任务代码。为了确保代码更清晰、安全且易于理解，NASA的喷气推进实验室制定了10条编码规则。
tags:
- 编程
- NASA
thumb: false
title: 如何像NASA顶级程序员一样编程——10条重要原则
titlepic: true
translator: penghuster
updated: '2017-10-21 23:23:00'
---

![rules of coding nasa](/data/attachment/album/201710/21/232332dxjaxwomx2xjmxbt.png)

**引言：**
你知道NASA顶级程序员是如何编写关键任务代码吗？为了确保代码更清晰、安全且易于理解，NASA的喷气推进实验室（JPL）制定了10条编码规则。

NASA的开发者面临的是编程界最具挑战性的工作之一。他们编写代码并专注于开发安全的关键任务应用程序。在这种情况下，遵守严格的编码规则至关重要。这些规则涵盖了软件开发的多个方面，例如代码应该如何编写以及应该使用哪些语言特性等。

尽管很难就一个好的编码标准达成共识，但NASA的喷气推进实验室（JPL）遵循了一套名为“十次方：开发安全关键代码的规则”的[编码规则](http://pixelscommander.com/wp-content/uploads/2014/12/P10.pdf)。由于JPL长期使用C语言，这些规则主要针对C语言编写，但也可以轻松应用于其他编程语言。

该规则由JPL的首席科学家Gerard J. Holzmann制定，主要关注安全性。以下是NASA编写关键任务代码的10条规则：

1. **控制流结构简单化**：禁止使用`goto`语句、`setjmp`或`longjmp`结构，禁止间接或直接递归调用。
2. **循环上限固定**：所有循环必须有一个固定的上限值，并且可以被静态验证工具证明不会超过该上限。
3. **初始化后不使用动态内存分配**：避免在初始化后使用动态内存分配。
4. **函数长度限制**：每个函数的代码行数不应超过60行（以一页纸为参考）。
5. **断言密度**：每个函数应包含至少两个断言，用于检测不可能发生的情况。断言必须没有副作用，并定义为布尔测试。当断言失败时，应执行明确的恢复动作。任何能被静态工具证实永远不会失败或触发的断言违反此规则。
6. **最小范围声明数据对象**：数据对象应在尽可能小的范围内声明。
7. **检查返回值和参数有效性**：非void函数的返回值在每次调用时都必须检查，并且每个函数内必须检查其参数的有效性。
8. **预处理器使用限制**：仅限于包含头文件和简单的宏定义。禁止符号拼接、可变参数列表（省略号）和递归宏调用。所有宏必须扩展为完整的语法单元。条件编译指令的使用应尽量避免。
9. **指针使用限制**：禁止多级指针解引用和隐含在宏定义或类型声明中的指针操作。不允许使用函数指针。
10. **编译器警告和静态分析**：从第一天起，代码必须在编译器开启最高级别警告选项的情况下进行编译，并且零警告通过。每天至少使用源代码静态分析工具检查一次，且零警告通过。

NASA对这些规则的评价是：
> 这些规则就像汽车中的安全带一样，刚开始可能会感到一些不适，但一段时间后就会养成习惯，你会无法想象不使用它们的日子。

这篇文章对你有帮助吗？请在下方评论区留下你的反馈。

---

**作者简介：**
Adarsh Verma 是 Fossbytes 的联合创始人，是一位受人尊敬的企业家，一直密切关注开源技术、技术创新和完全透明度。可以通过邮件联系他 — [PI:EMAIL](mailto:PI:EMAIL)

**原文链接：**
[Adarsh Verma](https://fossbytes.com/author/adarsh/)  
**译者：**
[penghuster](https://github.com/penghuster)  
**校对：**
[wxy](https://github.com/wxy)  
**本文由 LCTT 原创编译，Linux中国 荣誉推出。**

---