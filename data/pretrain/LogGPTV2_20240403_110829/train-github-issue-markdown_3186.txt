##### System information (version)
  * OpenCV => 4.1.0
  * Operating System / Platform => Windows 64 Bit
  * Compiler => Visual Studio 2017
  * Gpu Model-> RTX 2080 - 2 and 3 Devices tested
##### Detailed description
Running minmax on multiple gpus will cause GPU shared memory allocation to
increase until out of memory error occurs.  
The problem occurs on driver version 441.22, but not on driver version 431.60.  
A number of other methods were tested and only minmax produces a shared memory
leak.
##### Steps to reproduce
    ```.cpp
#include  
#include "opencv2/imgproc.hpp"  
#include "opencv2/cudafilters.hpp"  
#include "opencv2/cudaimgproc.hpp"  
#include "opencv2/cudaarithm.hpp"
using namespace std;  
using namespace cv;
int main()  
{  
double min = 0;  
double max = 0;  
int numDevices = cuda::getCudaEnabledDeviceCount();  
cuda::GpuMat * img = new cuda::GpuMat[numDevices];
for (int i = 0; i < numDevices; i++)  
{  
cuda::setDevice(i);  
img[i] = cuda::GpuMat(500, 500, CV_32F);  
cuda::printShortCudaDeviceInfo(i);  
}
for (int i = 0; ; i++)  
{  
cuda::setDevice(i % numDevices);  
cuda::minMax(img[i%numDevices], &min, &max);  
}  
}
    ```