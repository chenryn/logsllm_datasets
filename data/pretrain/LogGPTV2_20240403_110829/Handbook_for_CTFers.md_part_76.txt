Markdown
Force break at fnt Ine when no path mapping specifed
Node.js and NPM
Force break at frst ne when ascipt is outside the prjet
ReStructured Text
2 Stve Shrets
Zend Debugger
Fig, 10.6 Set the debug
PHP) Debug
> DBGp Proxy
B For new proje
IDE key: PHPSTORM
Host:
127.0.0.1
Port:
9000
Fig, 10.7 Set the debug
---
## Page 668
656
10  Code Auditing
leren
127801
tetor
Fig, 10.8 Set the values according to your runtime setings
1
variables
12
require_once'./libraries/cc
n. ine. php'
14
Fig, 10.9 Click on the left side of the line
Fig, 10.10 Click the “*"
button
Add Configuration....
回Q
take the builtin phpmyadmin as an example, you can select *File → Settings 
Languages&:Frameworks  PHP  Servers" menu, then click on the "+" button to
add a server, and set the values according to your runtime settings, see Fig. 10.8.
You can add or remove a breakpoint on the first line on index.php by opening that
file and click on the left side of the line, see Fig. 10.9. Now click on the “Add
configuration" button on the top right (Fig. 10.10), Then click the “+ button and
select the “PHP Web Application" or “PHP Web Page" option, as shown in
Fig. 10.11.
Set the starting address to “/phpmyadmin" since the phpMyAdmin is in the sub
directory of phpstudy, see Fig. 10.12
Click the Debug button on the upper right comer, see Fig. 10.13. PhpStorm will
automatically launch the browser and redirect to the web page and pause at the
breakpoint set before, you can see there are some debug information such as the
value of different variables, see Fig. 10.14. Then you can debug through the buttons
shown in Fig. 10.15.
But it is still not convenient enough to debug while we can browse the web page.
To solving this problem, an extension named Xdebug Helper is recommended.
---
## Page 669
10.1 PHP Code Auditing
657
Fig, 10.11 Click the “*"
Run/Debug Configurations
button
+
Add New Configuration
Attach to Nodejs/Chrome
Behat
CCodeception
 Compound
Docker
 Firefox Remote
Gruntjs
Gulpjs
HTTP Request
JavaScript Debug
Jest
Mocha
Nodejs
npm
 Nodeunit
NW.js
 PHP Bullt-in Web Server
PHP HTTP Request
PHP Remote Debug
PHPScript
PHP Web Page
First, search for “Xdebug Helper? in Firefox’s extension center, find it and add it,
see Fig. 10.16. Change the configuration in Xdebug Helper, set the value of *IDE
key" as *PHPSTORM'", see Fig. 10.17.
Click the save button and go back to the url http:/127.0.0.1/phpmyadmin, enter
the usermame and password, and set Xdebug Helper to Debug mode, see Fig. 10.18.
Then go back to PhpStorm and click on the phone icon in the upper-right comer to
enable remote debugging, see Fig. 10.19.
Back in your Firefox browser, click on the Login" button, it will automatically
turm back to the breakpoint in phpstorm and display the username and password you
entered, see Fig. 10.20.
At this point, the dynamic debugging environment is up and running.
---
## Page 670
658
10  Code Audiing
Name:
phpmyadmin]
Share  Allow parallel run
Configuration
Server.
127.0.0.1
Start URL:/phpmyadmin
http://127.0.0.1/phpmyadmin
Browser:
Default
 Debug pre-configuration
1. Install Xdebug or Zend Debugger on the Web Server.
Validate debugger configuration on the Web Server.
2. Start *PHP Web Page* run-configuration.
 Before launch: Activate tool window
+
There are no tasks to run before launch
 Show this page  Activate tool window
Fig, 10.12 Set the starting address to */phpmyadmin
Fig, 10.13 Click the Debug
w2u sxddn aq uo uounq
cormer
L
n/m_r/te,elesr0 
// Gets the bort aee
Seerchfor1
if (eaptyCRITTP_BOST)
IF OMH
teew(var_name:*ETTP_BosT"))(
.cOO
SITTP_8OST = RA_geter ( var,
[$_GET = Semay1 []
}else 
>[$,REQUEST = (amay1 [3]
8217,805T - ** :
s,SRVER = [aay/[40]
@>[$GLOBAL5 = (mey)[16]
Fig, 10.14 Result
---
## Page 671
10.1 PHP Code Auditing
659
Fig, 10.15 Debug through
the buttons
三
Variables
↑+
Xdebug Helper for Firefox
This extension is very useful for PHP developers that are using PHP tools with
Xdebug support like PHPStorm, Eclipse with PDT, Netbeans and MacGDBp or any
other Xdebug compatible profiling tool like KCacheGrind, WinCacheGrind or
Webgrind.
★食食业BrianGilbert
Fig, 10.16 Search for *Xdebug Helper" in Firefox’s extension center
Xdebughelper
Easy debugging. profling and tracing
Introduction
First install and conigure Xdebug, hen set your IDE key below. Now tell Xdebug to debug
profle or trace by clicking the itte bug in the addresbar:
Debugging, profing & tacing disabled
Profing enabled
Tracing enabled
Mne）
IDE key
sup 9   30moA 1opg
Plp5torm ·PHPSTORM
Save
Fig. 10.17 Change the 
configurat
t ,Aax EIL, Jo 2ne 3u 1as 1adpH SnqapX u
“PHPSTORM"
10.1.2How to Audit
When getting started with code auditing, many people are often confused about how
to audit the source code, where to start, and how to find vulnerabilities effectively
---
## Page 672
660
10  Code Audiing
=116c4e4f
095e6f78225abfaa2205
0Do
Profle
phpMgAdmin
Irace
Fig, 10.18 Set Xdebug Helper to Debug mode
Fig, 10.20 Display the username and passw
and quickly. The code used in frameworks is quite obscure and difficult to under-
stand, so how to analyze framework routes quickly and effectively. The following is
an example of a quick way to analyze framework routes in ThinkPHP 5.0.24.
Download the source code for the core version of ThinkPHP 5.0.24 from
ThinkPHP website (http:/www.thinkphp.cn/down/1279.html). The source code
structure is shown in Fig. 10.21. Among them, vendor is the directory to place
third-party dependencie, thinkphp is the directory to place the core components of
the framework, runtime is the directory for runtime logs, public is the directory for
the resource used in the webpage such as images, extend is the directory for
extension library, and application directory for the functionality of the website.
When starting an audit, you need to find the entry point of the whole framework.
Usually, the entry point of a program can be found in index.php, so when analyzing
the source code, you can start with index.php. ThinkPHP's index.php is in the public
folder, so open the folder thinkphp_5.0.24 with PhpStorm, then open the public
directory, find index.php and open it, the content is as follows.
---
## Page 673
10.1 PHP Code Auditing
199
Fig, 10.21 The source code
structure (thinkphp)
thinkphp_5.0.24
thinkphp
vendor
runtime
think
 README.md
LICENSE.txt
publie
extend
composer.lock
CHANGELOG.md
composer.json
bulld.php
application
.travis.yml
CONC
Paste Simp
AHO3
Find Usages
CF7
Refactor
Felding
Go To
eg uogeSAen o dwne
XN
Type Declaration
XU
Fig, 10.22 Use the corresponding shortcut
 7php
// Define the application directory
define ( 'APp_PATH', _DIR - /--/application/) ;
/ Load the Eramevork bootloader file.
require __DIR__ . ' / . - /thinkphp/start .php';
The code for the entry point is simple and is well commented. The start.php is
included, so the next step is to track down the contents of start.php (during a PHP
audit, if a file is included, it is usually necessary to track it down).
In PhpStorm, you can automatically open the included file by right-click on the
included file and select “Go To  Decralation" in the pop-up menu (see Fig. 10.22),
or use the corresponding shortcut in Fig. 10.22. Readers can also use the
---
## Page 674
662
10 Code Auditing
corresponding shrotkey showed in Fig. 10.22. The same shrotkey can also be used to
track down to any of the functions, which is pretty convenient.
The code in start.php is as follows.
send () ;
The code here includes the base.php file, which also needs to be tracked down.
The core content is as follows.
dud >
//Some define conatant detinition operation
//load environment variables in env
/ / Register the automatic classloader
\think\Loader : :register () ;
/ / Registration of exception handling mechanism.
\think\Error : :register () ;
\think\,Config : : set (include THINK_PATH. convention′ EXT) ;
/ / Load the convention configuration file.
Here you need to the functionality of \ThinkLoader:registerO function, keep
track down.
public static function register ($autoload = nul1) (
// Reglster System Autoloader
spl_autoload_register (Sautoload 7 : *think\\Loader : :autoload',
/ Add support to autoloading mechanism in composer
true, true) ;
if (is_dir (VENDoR_pATH.*composer'))(
if (PHP_VERSION_ID >= 50600 44 ia_file (VENDOR_PATH. + composer' .
DS. 'autoload_static-php'11{
Sdeclaredclass = get_declared_classes (1 :
require VENDOR_PATH. *composer' .DS. 'autoload_static -php′ ;
ScomposerClass = array_pop ($declaredClass) :
foreach([*prefixLengthsPsr4', 'prefixDirsPsx4',
'fallbackDirsPsr4',
prefixesPsr0', *fallbackDirsPsr0', 'classHap′, 'files′] ag
if (property_exists (ScomposerClass, Sattr)) {
Sattr)(
self : :${Sattr) - ScomposerClass: :S{Sattr) :
A
else
self : :registerComposerLoader () ;
---
## Page 675
10.1 PHP Code Auditing
99
/ Add namespace definitions
self : :addNamespace ( [*think' => LIB_pATH. *think* DS,
'behavioror" => LIB_PATH. *behavioror′ .DS,
'traits' => LIB_PATH.'traits'.DS
 // Load the class mapping file.
([
if (1s_file (RUNrIHE_PATH. classmap′ . EXT) )(
self : :addClassMap (__include_file [RUNTINE_PATH. +classmap′ .EXT) ) ;
self : :loadComposezAutoloadFiles () ;
 // Automatically load code the extend directory.
self: :$fa11backDirsPsr4 [] = rtrin [EXTEND_PATH, DS) ;
The main functions of this function are to register autoloading functions, and
automatically register composer and namespaces for later use.
App:run(->send( ) is called at the end of start.php. Among them, the run( ) is the
core funcotin of the framework during code auditing. Due to the complication of that
function implements, we will introduct the core components inside. The simplified
code is as follows.
public static funetion run (Requeat Srequest = nul11 {
Srequest = is_nul1 ($request) 7 Request ::instance () : Srequest ;
} 人x
Sconfig = se1f : : initCommon () ;
/+* initCommon is the function to initialize the basic
configurations. It calls self: :init () inside to initialize
database information, extensions, and other configuration
The omitted parts are module binding, default filters and language
information . And the values are stored in the Sconfig variable.
settings, which is less useful during code auditing. **/
// Listen to app_diapatch
Hook : :1isten (*app_dispatch' , self: :$dispatch) ;
/ / Get application dispatch information.
Sdispatch = se1f : :$dispatch;
// URL route detection vhen dispatch information is not set
if (empty ($dispatch)) {
Sdispatch = self::routeCheck ($request, Sconfig) :
/ / Save current diapatch infoxnation.
Srequest ->dispatch (Sdispatch) ;
Sdata = self ::exee (Sdispatch, Sconfig) :
/+* debug logging and cache checking part is omitted ** / .
/*+ the process of filtering the response content is omitted *+/
return Sresponse ;
---
## Page 676
664
10 Code Auditing
The run( ) function starts with a call to initCommon( ) to initialize configuration
by calling self:init( ), which is pretty important. In init( ) function, it reads in
database configuration file, behavior extensions, and so on.
The next key function self:routeCheck( ) is used for route dispatching, its code is
public static function routeCheck (Srequest, array Sconfig1 {
Spath
 ()qaed
path(), as seen below.
publie function path() (
if (1s_nu11 ($this->path)) {
Ssuffix = Config: =get (ur1_html_suffix′) ;
Spathinfo = Sthis->pathinfo () ;
if (false == Ssuffix) (
Sthis->path = Spathinfo;
// disable peeudo-static access
else if ($suffix) {
/ Eenove the nornal URL suffix.
$this->path = pzeg_replace (′ /^ . (* .1txim (Ssuffix, *.*) .*) $/1 ',
(oguruaeds *
else 
Sthis->path = pzeg_replace (*/\. *) , Sthia->ext ( . + $/i*, **,
// A1low access wivth any suffix
Spathinfo) ;
return Sthis->path;
This function calls Sthis->pathinfo( ) again in the first if statement.
---
## Page 677