# Markdown
- Force a break at the first line when no path mapping is specified.
- **Node.js and NPM**
  - Force a break at the first line when the script is outside the project.

# ReStructured Text
- 2 Steve Shrets
- **Zend Debugger**
  - **Figure 10.6:** Set the debug
  - **PHP Debug:**
    - **DBGp Proxy**
    - **For new projects:**
      - IDE key: `PHPSTORM`
      - Host: `127.0.0.1`
      - Port: `9000`
  - **Figure 10.7:** Set the debug

## Page 668
### 10. Code Auditing
- **Figure 10.8:** Set the values according to your runtime settings
- **Figure 10.9:** Click on the left side of the line
- **Figure 10.10:** Click the “Add Configuration” button

To set up the built-in phpMyAdmin, follow these steps:
1. Select `File → Settings → Languages & Frameworks → PHP → Servers`.
2. Click on the `+` button to add a server.
3. Set the values according to your runtime settings (see Figure 10.8).
4. Add or remove a breakpoint on the first line of `index.php` by opening the file and clicking on the left side of the line (see Figure 10.9).
5. Click on the “Add Configuration” button in the top right corner (see Figure 10.10).
6. Click the `+` button and select the “PHP Web Application” or “PHP Web Page” option (see Figure 10.11).
7. Set the starting address to `/phpmyadmin` since phpMyAdmin is in the subdirectory of phpstudy (see Figure 10.12).
8. Click the Debug button in the upper right corner (see Figure 10.13). PhpStorm will automatically launch the browser, redirect to the web page, and pause at the breakpoint. You can see debug information such as variable values (see Figure 10.14).
9. Use the buttons shown in Figure 10.15 to debug.

For more convenient debugging while browsing the web page, use the Xdebug Helper extension.

## Page 669
### 10.1 PHP Code Auditing
- **Figure 10.11:** Click the “Add New Configuration” button
- **Run/Debug Configurations:**
  - Add New Configuration
  - Attach to Node.js/Chrome
  - Behat
  - Codeception
  - Compound
  - Docker
  - Firefox Remote
  - Grunt.js
  - Gulp.js
  - HTTP Request
  - JavaScript Debug
  - Jest
  - Mocha
  - Node.js
  - npm
  - Nodeunit
  - NW.js
  - PHP Built-in Web Server
  - PHP HTTP Request
  - PHP Remote Debug
  - PHP Script
  - PHP Web Page

To set up Xdebug Helper:
1. Search for “Xdebug Helper” in Firefox’s extension center and add it (see Figure 10.16).
2. Change the configuration in Xdebug Helper and set the value of "IDE key" to `PHPSTORM` (see Figure 10.17).
3. Click the save button and go back to the URL `http://127.0.0.1/phpmyadmin`.
4. Enter the username and password, and set Xdebug Helper to Debug mode (see Figure 10.18).
5. In PhpStorm, click on the phone icon in the upper-right corner to enable remote debugging (see Figure 10.19).
6. Back in your Firefox browser, click on the “Login” button. It will automatically return to the breakpoint in PhpStorm and display the entered username and password (see Figure 10.20).

At this point, the dynamic debugging environment is up and running.

## Page 670
### 10. Code Auditing
- **Name:** `phpmyadmin`
- **Share:** Allow parallel run
- **Configuration:**
  - Server: `127.0.0.1`
  - Start URL: `/phpmyadmin`
  - Browser: Default
  - Debug pre-configuration
    1. Install Xdebug or Zend Debugger on the Web Server.
    2. Validate debugger configuration on the Web Server.
    3. Start the “PHP Web Page” run-configuration.
    4. Before launch: Activate tool window
- **Figure 10.12:** Set the starting address to `/phpmyadmin`
- **Figure 10.13:** Click the Debug button
- **Figure 10.14:** Result

## Page 671
### 10.1 PHP Code Auditing
- **Figure 10.15:** Debug through the buttons
- **Xdebug Helper for Firefox:**
  - This extension is very useful for PHP developers using tools like PhpStorm, Eclipse with PDT, NetBeans, and MacGDBp, or any other Xdebug-compatible profiling tool like KCacheGrind, WinCacheGrind, or Webgrind.
  - **Figure 10.16:** Search for “Xdebug Helper” in Firefox’s extension center
  - **Figure 10.17:** Change the configuration
  - **Figure 10.18:** Set Xdebug Helper to Debug mode
  - **Figure 10.20:** Display the username and password

### 10.1.2 How to Audit
When getting started with code auditing, many people are often confused about how to audit the source code, where to start, and how to find vulnerabilities effectively and quickly. The code used in frameworks can be quite obscure and difficult to understand, so it's important to know how to analyze framework routes quickly and effectively. Here is an example of a quick way to analyze framework routes in ThinkPHP 5.0.24.

1. Download the source code for the core version of ThinkPHP 5.0.24 from the ThinkPHP website (http://www.thinkphp.cn/down/1279.html).
2. The source code structure is shown in Figure 10.21.
   - `vendor`: Directory for third-party dependencies.
   - `thinkphp`: Directory for core components.
   - `runtime`: Directory for runtime logs.
   - `public`: Directory for resources used in the webpage.
   - `extend`: Directory for extension libraries.
   - `application`: Directory for website functionality.

When starting an audit, you need to find the entry point of the whole framework. Usually, the entry point can be found in `index.php`. For ThinkPHP, `index.php` is located in the `public` folder. Open the `thinkphp_5.0.24` folder with PhpStorm, then open the `public` directory, find `index.php`, and open it. The content is as follows:

```php
// Define the application directory
define('APP_PATH', __DIR__ . '/../application/');

// Load the Framework bootloader file.
require __DIR__ . '/../thinkphp/start.php';
```

The code for the entry point is simple and well-commented. The `start.php` file is included, so the next step is to track down its contents.

In PhpStorm, you can automatically open the included file by right-clicking on the included file and selecting “Go To Declaration” in the pop-up menu (see Figure 10.22), or use the corresponding shortcut.

## Page 673
### 10.1 PHP Code Auditing
- **Figure 10.21:** The source code structure (ThinkPHP)
- **Figure 10.22:** Use the corresponding shortcut

The code in `start.php` includes the `base.php` file, which also needs to be tracked down. The core content is as follows:

```php
send();
```

The code here includes the `base.php` file, which also needs to be tracked down. The core content is as follows:

```php
// Some define constant definition operation
// Load environment variables in env
// Register the automatic class loader
\think\Loader::register();

// Registration of exception handling mechanism.
\think\Error::register();
\think\Config::set(include THINK_PATH . 'convention' . EXT);

// Load the convention configuration file.
```

You need to understand the functionality of the `\think\Loader::register()` function. Track it down further.

```php
public static function register($autoload = null) {
    // Register System Autoloader
    spl_autoload_register([$autoload ?: self::class, 'autoload'], true, true);

    if (is_dir(VENDOR_PATH . 'composer')) {
        if (PHP_VERSION_ID >= 50600 && is_file(VENDOR_PATH . 'composer' . DS . 'autoload_static.php')) {
            $declaredClass = get_declared_classes();
            require VENDOR_PATH . 'composer' . DS . 'autoload_static.php';
            $composerClass = array_pop($declaredClass);
            foreach (['prefixLengthsPsr4', 'prefixDirsPsr4', 'fallbackDirsPsr4', 'prefixesPsr0', 'fallbackDirsPsr0', 'classMap', 'files'] as $attr) {
                if (property_exists($composerClass, $attr)) {
                    self::${$attr} = $composerClass::${$attr};
                }
            }
        } else {
            self::registerComposerLoader();
        }
    }

    // Add namespace definitions
    self::addNamespace([
        'think' => LIB_PATH . 'think' . DS,
        'behavior' => LIB_PATH . 'behavior' . DS,
        'traits' => LIB_PATH . 'traits' . DS,
    ]);

    // Load the class mapping file.
    if (is_file(RUNTIME_PATH . 'classmap' . EXT)) {
        self::addClassMap(include RUNTIME_PATH . 'classmap' . EXT);
    }
    self::loadComposerAutoloadFiles();

    // Automatically load code in the extend directory.
    self::$fallbackDirsPsr4[] = rtrim(EXTEND_PATH, DS);
}
```

The main functions of this function are to register autoloading functions and automatically register composer and namespaces for later use.

The `App::run()->send()` is called at the end of `start.php`. The `run()` function is the core function during code auditing. Due to its complexity, we will introduce the core components inside. The simplified code is as follows:

```php
public static function run(Request $request = null) {
    $request = is_null($request) ? Request::instance() : $request;
    $config = self::initCommon();

    // Listen to app_dispatch
    Hook::listen('app_dispatch', self::$dispatch);

    // Get application dispatch information.
    $dispatch = self::$dispatch;

    // URL route detection when dispatch information is not set
    if (empty($dispatch)) {
        $dispatch = self::routeCheck($request, $config);
    }

    // Save current dispatch information.
    $request->dispatch($dispatch);
    $data = self::exec($dispatch, $config);

    return $response;
}
```

The `run()` function starts with a call to `initCommon()` to initialize configuration by calling `self::init()`, which is important. In the `init()` function, it reads in database configuration files, behavior extensions, and other configurations.

The next key function, `self::routeCheck()`, is used for route dispatching. Its code is as follows:

```php
public static function routeCheck($request, array $config) {
    $path = $this->path();

    public function path() {
        if (is_null($this->path)) {
            $suffix = Config::get('url_html_suffix');
            $pathinfo = $this->pathinfo();

            if (false == $suffix) {
                $this->path = $pathinfo;
            } elseif ($suffix) {
                // Remove the normal URL suffix.
                $this->path = preg_replace('/^.*\.(' . ltrim($suffix, '.') . ')(.*)$/i', '\\2', $pathinfo);
            } else {
                // Allow access with any suffix
                $this->path = preg_replace('/\.(\w+)$/i', '', $pathinfo);
            }
        }
        return $this->path;
    }
}
```

This function calls `$this->pathinfo()` again in the first `if` statement.