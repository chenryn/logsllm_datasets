Protected Data
Page Table
Nested Page Table
Others
Protection Invariants
These pages belong to a VM. They are invisible to the whole hypervisor but can be accessed by their Xen slice, which can change their mapping
and type when the VM wants to exchange pages with the hypervisor.
These pages contain guest VM’s secret data. They are invisible to the whole hypervisor and cannot be accessed by even its own Xen slice.
They are declared by the guest using a special hypercall and cannot be changed by the hypervisor.
These pages contain the code of the hypervisor. They are initialized during booting and will never change. They are the only non-user pages
with execution permission and should always be mapped read-only.
These pages contain the security monitor’s inner data. They are always read-only to internal domains.
These pages contain internal domain’s own data. Their mappings are initialized according to the policies applied to them. They are initialized
during owner’s domain building and will never change.
These pages contain the hypervisor’s page tables. They can be declared and undeclared by the shared service. They are always mapped as
read-only. Their type will not be changed unless explicitly undeclared.
These pages contain nested page tables describing guest physical to host machine memory mapping. They can be declared and undeclared by
owner’s Xen slices. They are always mapped as read-only. The owner’s Xen slice can request to update their content. Rules for this update is
relatively simple: pages of other VMs and the whole hypervisor except for its Xen slice are always invisible.
Other trivial and unused pages are described by this label, which Nexen provides no special protection for.
the monitor could do sanity checking after the instruction and
ﬁx the misuse.
“Hide” is based on “monopolize”. It takes a step further
and unmaps the only presence of the instruction. Only when
the operation is used and the sanity checking is passed will
the page be mapped. After execution,
the instruction will
immediately be unmapped to avoid abuse. If the execution
of the instruction instantly disables isolation without control-
ﬂow going to the monitor, it should be hidden. When hidden,
the attacker must go through the monitor and sanity checking
since she does not have the privilege to “unhide” via mapping
updates. A malicious execution of the instruction will not pass
the sanity check.
We did a binary code scanning to make sure such instruc-
tions, aligned to instruction boundaries or not, do not exist
in unwanted code region. To prevent an attacker generating
new privileged instructions, we must guarantee the integrity
of hypervisor’s code. The invariants in the memory protection
part has already guaranteed that code section is always read-
only and no new kernel mode code mapping is allowed. Instead
of directly modifying the code section, an attacker may want
to generate code using data region or guest VM’s memory
region. To block these two bypasses, we explicitly forbid the
execution of user code in privileged context. Table VIII shows
privileged instructions and invariants.
C. Interposition between VM and Xen
Apart from enforcing isolation inside the hypervisor, the
monitor plays the role of a gate keeper between guest VMs
and the hypervisor. All interpositions between VMs and the
hypervisor are monitored to enhance bidirectional security.
The monitor dispatches the event
to a proper internal
domain when VMs trap to the hypervisor. Once a guest VM is
running and a VMExit occurs, the CPU will trap to the monitor
ﬁrst, which will check the VMExit reason. If the VMExit
is VM related, e.g., instruction emulation or hypercall, the
monitor will transfer control to the corresponding Xen slice
to handle it. For other reasons like timer interrupt, the monitor
will transfer control to a shared service component like the
scheduler. Once the VMExit has been handled, the handler will
transfer control to the monitor, which will eventually resume
the execution of guest VM.
If a VMExit handler needs to access some data of the
guest VM as auxiliary information, e.g., the instruction to be
emulated, it will also call the security monitor module which
will then access VM’s data and check if it is OK to be retrieved
by the handler. A Xen slice can update VMCS arbitrarily.
When returning to a guest VM, the VMCS will be checked
against a list of ﬁelds allowed to be modiﬁed for the certain
VMExit reason. Unnecessary updates are rolled back before
resuming the guest VM.
D. Export Nexen to Other Platforms
Nexen can be exported to any other platform with mem-
ory mapping mechanisms similar to x86’s. Memory related
policies, invariants and design decisions are independent of
platforms. They can mostly be reused. Control instructions and
control registers are speciﬁc to x86 platform. The system in
the new platform must ﬁnd alternatives to following features:
controling memory access permissions of the highest privilege
level, forbidding arbitrary code generation and execution,
capturing all interrupts, exceptions and interpositions between
the hypervisor and VMs. Instructions related to these features,
along with any MMU updating instructions, should be consid-
ered privileged intructions and be protected.
V. SECURITY ANALYSIS
This section presents a security analysis on how Nexen can
ensure security isolation and defend against exploits on each
category of security vulnerabilities.
A. Security Isolation
An attacker gaining control of a Xen slice may try to
undermine the isolation enforced by Nexen in four ways. Yet,
none of them will succeed:
Escalating memory access privilege: Either writing pro-
tected memory region directly or writing page table to gain
access to protected memory will result in a page fault. Nexen
will kill the attacker’s Xen slice and VM in this case. If
an attacker tries to intrude through the secure call gate, she
will either lose execution control or fail to gain the desired
permission due to the sanity checking enforced by the monitor.
Abusing privileged instructions: Since privileged instruc-
tions have been removed from the per-VM slices, the attacker
has to reuse those in the security monitor. If she normally calls
monitor’s interface, the malicious behavior will not pass the
sanity checking. If she forges a malicious context and directly
jumps to the instruction,
lose execution
the attacker will
9
Instruction
MOV CR0
MOV CR3
MOV CR4
MOV IDTR
WRMSR
VMOFF
VMRESUME
TABLE VIII.
INSTRUCTION PROTECTION INVARIANTS.
Protection Invariants
These pages belong to a VM. They are invisible to the whole hypervisor but can be accessed by their Xen slice, which can change their mapping and
type when the VM wants to exchange pages with the hypervisor.
By this instruction, an attacker can change the whole address space and will probably redirect the control ﬂow. Considering that, we hide this instruction
and forbid any use of this instruction except for secure call gates and context switch. The target page table base address must point to a declared root
page table.
SMEP bit in CR4 forbids the execution of user code, which is crucial for code integrity. Considering this instruction will not directly hijack the control
ﬂow, we can protect it with the same method for CR0, by monopolizing and checking loop.
The monitor must control the entry points of all traps. Interrupt descriptor table (IDT) is mapped as read-only to avoid arbitrary modiﬁcation. IDTR
records the base address of IDT, which must be set to a veriﬁed value. Since interrupt is turned off inside the monitor, any modiﬁcation to IDTR will not
take effect before exiting. There is no need to hide this instruction.
The NX (Non-eXecutable) bit controls non-executable memory execution. Similar to CR0 and CR4, a checking loop is enough for this instruction.
This instruction turns off the VMX (VM eXtension) mode of CPU, which is destructive in a virtualization system. This will further allow an attacker to
turn on real mode, which will probably hijack the control ﬂow. Since the consequence is immediate, we hide this instruction.
This instruction immediately returns control ﬂow to guest VM. An attack targeting the guest will work after its execution. An attack targeting the hypervisor
by corrupting the VMCS will take effect on next VMExit. Sanity check is necessary before the instruction. We hide this instruction and only allow Xen
slices to request its execution. Since the control registers will be loaded from the VMCS on next VMExit, we check and enforce the same invariants as
listed above before the resume.
control for a while before exiting the monitor. This is because
instructions that can immediately hijack the control ﬂow are all
hidden from the attacker. The monitor will do sanity checking
and ﬁx the misuse during this period.
Fooling The Monitor: The attacker may try to trick
the monitor into giving her extra privileges. If the attacker
directly requests an operation for which she does not have
immediately discover the
the permission,
the monitor will
violation of invariants and reject
the request. Instead,
the
attacker may pretend to be another iDom. Nexen will not give
her any chance since the only identiﬁcation used by Nexen is
a unique number mapped into the read-only region of each
iDom’s address space.
Fooling Xen: The Nexen architecture largely reused Xen
hypervisor’s code. Since Nexen has more restrictions on each
component’s permissions than the original Xen, such reused
code may assume themselves having more permissions than
those allowed by Nexen. However, since memory and in-
struction invariants and policies are enforced by the security
monitor, which has the highest privilege in the system, these
operations performed by the less privileged Xen slice code
will not succeed, nor will they give the attacker any extra
permission.
B. Effectiveness in Preventing Exploits
In this subsection we analyze how Nexen defends against
different types of vulnerabilities.
In total, there are 144 vulnerabilities related to the Xen
hypervisor. 127 of them are on the Intel x86 platform. We
can directly test the effectiveness over them. Our system can
effectively defend against 96 (75.59%) of them. The other 17
vulnerabilities are speciﬁc to ARM or AMD processors. Given
an equivalent implementation of Nexen in these platforms,
11 (64.71%) of them can be prevented. In total, Nexen can
effectively defend against 107 out of 144 vulnerabilities(74%).
When considering how to prevent attacks, a key observation
is that most attacks have a critical step that is non-bypassable.
Table I, II, and III categorize vulnerabilities by the position of
this key step, attacker’s behavior in this step, and the result of
the attack. If we can assure (1) this key step happens in the
sandbox of Xen slice and (2) any further destructive results
will be stopped or limited within the Xen slice, the attack
will be successfully prevented. In the design section, we have
described how to achieve (1) by moving the most vulnerable
parts into Xen slices. They contain most of vulnerabilities that
can be exploited as the key step. So the attacker has to be in
the context of a Xen slice to do the key step. In this subsection,
we will discuss why Nexen can achieve (2) by giving concrete
data and examples corresponding to each result type.
Target
Attack
Privilege
Escation
Host DoS
Guest DoS
(Non-Iago)
Info Leakage
Iago Attack
(Non-Iago)
Defended
Not Defended
No CVE
Memory Management
7
26
CPU Virtualization
I/O Module
Grant Table
Code Emulation
Domain Control
Event Channel
1
2
1
3
0
1
17
8
5
4
4
2
Shared Service
7
20
6
1
0
0
4
0
0
0
Fig. 5. Effectiveness based on target and result
2
4
5
0
1
2
0
0
1
3
3
0
3
0
0
0
Figure 5 is a summary of Nexen’s effectiveness based on
the key step’s target and result types. In this ﬁgure, we only
consider the ﬁnal results of an attack because Nexen stops
most attacks in the last step. Most attacks can only cause
one result, which are counted with a colored bar representing
whether Nexen prevents them. Exceptions are those attacks
that can potentially achieve privilege escalation, which is an
intermediate state that can lead to all kinds of results. They
should have been counted once in each of the result types.
However, we list their numbers in a separate column to avoid
confusion.
There is a clear boundary between those attacks Nexen can
and can not prevent. Attacks with their key steps happening
in Xen slices can mostly be prevented. This is because Xen
slice is a sandbox that can be sacriﬁced. Exceptions are those
trying to crash or leak information to a guest VM with Iago
attacks. They do not
try to harm the hypervisor or other
VMs so sandboxing does not work for them. The gate keeper
guards interactions between the hypervisor and VMs. Part of
attacks that takes effect in a guest VM can be prevented.
However, verifying data corrupted by an Iago attack requires
recomputing, which the gate keeper is incapable of.
The following includes analysis and experiments about how
10
Nexen prevents each type of attacks. Case studies can be found
in Table IX. For those attacks Nexen can not prevent, reasons
are analyzed in Table X.
original allocator was used, the attacker’s VM was killed,
because Xen slice does not have the permission to touch any
data in the allocator and a page fault was triggered.
Host DoS – False BUG_ON, Page Fault, General Fault
The methods used by these attack types to cause a Host DoS
are almost the same. They directly trigger an exception (a
BUG, e.g., XSA-37/XSA-102/XSA-111/XSA-145/XSA-168, a
page fault, e.g., XSA-26/XSA-84/XSA-92/XSA-96/XSA-173,
or other kinds of fatal fault, e.g., XSA-12/XSA-44, respec-
tively), the handler of which causes the hypervisor to panic. In
an unmodiﬁed Xen, this will directly crash the hypervisor and
lead to host DoS. In Nexen, the handlers for such exceptions
are modiﬁed: when the attack happens in the context of a Xen
slice, the attacker’s VM and Xen slice, instead of the whole
hypervisor, are killed.
We tested Nexen’s effectiveness against this type of attack
by calling a customized hypercall that directly triggered a fatal
exception. Our system successfully survived the attack with
only the attacker’s guest VM killed.
Host DoS – Inﬁnite Loop, Dead Lock, Live Lock
The methods used by these attack types to cause a Host
DoS are almost the same. They trap a CPU in a task that
is non-preemptible for a long time (an extremely long or
inﬁnite loop, e.g., XSA-24/XSA-31/XSA-60/XSA-150/XSA-
158, a dead lock, e.g., XSA-30/XSA-74/XSA-127, or repet-
itive long operations, e.g., XSA-11/XSA-45/XSA-89/XSA-
118/XSA-146, respectively). One CPU or the entire hypervisor
will lose response in this condition. If the watchdog is in use,
an NMI will be sent to the CPU after timeout, the handler of
which will kill the hypervisor. Either way will cause a DoS in
the unmodiﬁed Xen. In Nexen, the watchdog is in use to detect
the trap of the CPU. The NMI will be received normally, but
its handler is modiﬁed in a similar way as fatal exceptions,
that is, only the attacker’s Xen slice and VM are killed. If this
attack occurs in the context of a Xen slice, no critical data
in the hypervisor will be corrupted due to aborting the slice,
because a Xen slice does not have the permission to read/write
data in other parts of the hypervisor.
We tested Nexen’s effectiveness against this type of attack
by calling a customized hypercall that directly traps a CPU
in a task that is non-preemptible, e.g., an inﬁnite loop in the
context of hypervisor. Nexen successfully survived under the
attack while only the attacker’s guest VM was killed.
Host DoS – Run Out of Resource Attacks of this type try
to cause a host DoS by running out speciﬁc resources: memory
(XSA-149), disk (XSA-130), or slots of a data structure (XSA-
34). Eventually, an unmodiﬁed Xen could hang, panic for
violating an ASSERTION, or crash for a memory corruption. In
Nexen, each Xen slice and the VM are assigned with their own
share of memory and data structure pools. Attacks attempting
to exhaust resources will only run out its own shares, resulting
in an error in Xen slice. As described in previous cases, this
error, no matter which type, will kill the attacker’s own VM
and Xen slice.
We tested Nexen’s effectiveness against this type of attack
by calling a customized hypercall that keeps allocating mem-
ory in the context of the hypervisor. When Nexen’s secure
allocator was used, nothing happened, because a running Xen
slice allocating extra memory is not allowed. When Xen’s
Info Leak – Memory Out-of-boundary Access Attacks
of this type could try to read sensitive data from any part
of the system through memory, e.g., XSA-66/XSA-100/XSA-
101/XSA-108/XSA-132. They either begin with a memory
corruption, e.g., reading out of boundary, or begin with an
uninitialized memory mapped or copied to attacker’s VM or
Xen slice. In the unmodiﬁed Xen, a memory corruption could
expose the memory of the whole system to the attacker. Also,
memory pages can be passed freely inside the hypervisor,
leaving a chance for sensitive data to ﬂow to the attacker. In
Nexen, Xen slices are strictly isolated from each other and the
shared service. Sensitive data from other parts of the system
are not visible ( not mapped ) in a Xen slice. In addition to that,
pages recycled and passed to a new Xen slice are monitored by
the security monitor, who will make sure they are completely
cleared during this transition. Thus, all paths from the attacker
to victims’ sensitive data through memory are blocked.
We tested Nexen’s effectiveness against this type of attack
by calling a customized hypercall that directly read another
VM’s state data , to be speciﬁc, the domain data structure, in
the context of hypervisor. The attacker’s guest VM was killed
instantly without any return address from the hypercall.
Info Leak – Misuse Hardware Feature Attacks of this
type try to get sensitive data directly through registers in
the hardware instead of memory, e.g., XSA-52, XSA-62,
XSA-172. They mostly start with the hypervisor’s failure to
completely clear up a register’s value. In unmodiﬁed Xen,
when a register starts to serve another VM, value left in it
will be accessible to the new VM, potentially leaking the
previous user’s information. In Nexen,
important registers’
values are checked and initialized when necessary before
entering into the guest. Although some ﬁelds are too expensive
or semantically too complex to check,
information leaked
through those containing most valuable information, e.g. stack
pointer, PC, EFLAGS, can be avoided.