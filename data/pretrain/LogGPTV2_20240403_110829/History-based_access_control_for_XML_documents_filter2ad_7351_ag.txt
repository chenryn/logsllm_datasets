Our model must be able to deﬁne access depending on the recorded context
information to enable policies based on that information.
Requirement 8: Positive and negative policies.
We have illustrated in Situation 8 that it is comfortable and eﬃcient to have
positive (allow) and negative (deny) rules. This reduces the complexity of
individual rules and makes access control deﬁnition more eﬃcient. Therefore,
we require our model to support positive and negative rules.
Requirement 9: Flexible conﬂict resolution strategy.
To support the deﬁnition of default policies and corresponding exceptions,
we need a ﬂexible conﬂict resolution strategy that deﬁnes an order among all
rules for the case where multiple rules are applicable for an object.
More speciﬁcally, the rules should be ordered in a way that a rule deﬁning
an exception has a higher priority than the corresponding default rule. In
order words, the rules should be ordered depending on how speciﬁc they
are. A too simple conﬂict resolution strategy would not allow to specify
exceptions from a default rule, e.g., the strategy “deny takes precedence
over allow” without further mechanisms does not allow to specify positive
exceptions as we illustrated in Situation 8.
40
CHAPTER 3. SCENARIO AND REQUIREMENTS
Chapter 4
Model
In this chapter, we give an overview of our model and its components, which
are explained in detail in the following sections. We start with an overview
of our model, continue with the operations deﬁned in our model, go on with
a description of the history and ﬁnally present the syntax for access rules.
As part of the access control rules, we extend the function library of XPath.
Therefore, we give details to these extension functions. We conclude this
chapter, with an example of how to use our model. For this purpose, we show
how we can express Chinese Wall policies with our model. In this example, we
show that our model is better suited for real world scenarios than the original
Chinese Wall model, since our model overcomes unnecessary restrictions of
the Chinese Wall model.
4.1 Overview
Our history-based access control model deﬁnes which subjects are allowed
or denied to access certain parts of an XML document. Concerning the
subjects of our model, we design our model for human users. We use roles
(as described in [SCFY96] and Section 2.1.2) to model these subjects. The
objects of our model are diﬀerent parts of an XML document. These parts
can either be entire XML elements (including attributes and text content),
attributes or parts of the text content of an XML element. We deﬁne a set
of operations, which enables the user to view and edit XML documents. The
eﬀects of these operations are recorded in the history. When we record an
operation in the history, we also log the context information of that operation.
Generally speaking, context information can be any information that helps to
specify the situation of the operation more precisely. In our case, we record
the date and time of the operation, the subject that performed the operation
41
42
CHAPTER 4. MODEL
and the role the corresponding subject was active in. If it is required, this
context deﬁnition can be extended. Summing up, the history stores how a
document was created.
Finally, we use access control rules to deﬁne that subjects in a certain
role are allowed or denied to perform a given operation on speciﬁc objects.
These objects are described by a condition, which deﬁnes predicates on the
content of the current document and on the history. When a user tries to
perform an operation on an object, we must check whether there is an access
control role that matches with the the active role of the user, the operation
that he wants to perform and with the object. The ﬁrst two aspects can be
checked directly. In contrast to this, to check whether a rule matches with
an object, we must check whether the object has the properties described by
the condition of the rule. Therefore the condition must be evaluated for the
current object.
4.2 Subjects
The subjects of our system are human users, which view and edit XML
documents. As stated above, we use roles to model the subjects. This
leads to a higher level of abstraction and therefore leads to more ﬂexibility
compared to directly listing individual subjects. There are many variations
of the RBAC model, where each variation adds further enhancements to the
model. Since we focus on how to specify the objects based on their history, we
only use the basic version of RBAC [SCFY96]. We use the role hierarchies to
solve conﬂicts between positive and negative rules. Nevertheless, advanced
versions of the RBAC model can be combined with our model, since the
modeling of subjects and objects is more or less independent of each other.
4.3 Objects
We have three types of objects in our model. The ﬁrst type of model is the
XML element. The second type are attributes and the third type is a text
block, which we use to structure the text content of an XML element. In the
following, we give details to each type of object.
4.3.1 XML elements
XML elements are one of the three types of objects in our model. The
attributes and the text content of an XML element also belong to this type
of object. As a consequence, if access is granted to an XML element, its
4.3. OBJECTS
43
attributes and text content can also be accessed. However, in cases where
ﬁner granularity is needed, our model can address the attributes and the
text content individually. The children elements of an XML element are
not part of this type of object.
In contrast, these are individual object
themselves. Consequently, if access is granted to an element, access to is
children elements is still undeﬁned. But if access to an element is denied,
access to its children elements is also denied, since XML elements require to
be interpreted together with their parent element to determine the intended
semantics.
4.3.2 Attributes
In cases were the granularity of elements is too coarse, our model can also
address attributes as individual objects. For example, if data about persons
and their personal preferences is collected to create statistics, one can grant
access to a person on the level of XML elements and deny access to attributes
of a person that allow to identify the person. Using this method, data can
be censored to avoid loss of privacy. Moreover, by only denying access to
certain attributes the structure of an XML document, which is required to
interpret the elements, is maintained.
4.3.3 Text blocks
Our model splits the text of an element internally into smaller units, which
we refer to as text blocks. These text blocks are used in this model for two
purposes. First, they are one type of object, which allows to deﬁne access for
individual text blocks. Second, text blocks are needed to keep track of text
content, where diﬀerent parts of the content were created in diﬀerent ways.
In other words, we also must internally use text blocks to record details of
the editing process.
We need text blocks because the text content of an XML element can
be composed of several parts, which were created in a diﬀerent way. Their
creation can diﬀer in several aspects. Text can either be created newly or
be copied from a diﬀerent location. Moreover, the text can be created by
diﬀerent subjects or at diﬀerent times. Our model internally uses text blocks
to keep track of these individual parts and how they were created. Every
create operation on the text of an XML element creates a new text block.
In other words, when new text is added, we create a new text block.
In
addition to this, text blocks or parts of their text can also be deleted. If new
text is added in the middle of an existing block, we split the existing block
and create a new block for the added text. We use a rule, which deﬁnes the
44
CHAPTER 4. MODEL
structure of the text content in terms of text blocks. The corresponding rule
is given by Deﬁnition 4.3.1. Our model enforces this rule by splitting existing
text blocks and by creating new text blocks.
Deﬁnition 4.3.1 (text block). Each part of the text content of an XML
element that diﬀers in the way how it was created or to where it was copied
from the remaining text of an element, must be kept as an individual text
block.
4.4 Operations
In this section, we describe the set of operations of our model. This set of
operations must have a level of abstraction that allows to keep track of the
way how a document was created. We must be able to diﬀerentiate whether a
document part was created from scratch or whether it was copied from some-
where else. Moreover, concerning editing, me must diﬀerentiate between the
creation of new data and the deletion of existing data. Consequently, we need
a create operation, a delete operation and a copy operation for elements
and their text content. These operations must be applicable to entire XML
elements or to parts of their text. We also need the create and delete
operation for attributes, because we want to keep track of their creation and
deletion as well. Since we regard attributes as atomic units, we model the
changing of an attribute value with the operation change-attribute.
Finally, we need a view operation that is used when the user wants to
view a document or parts of it. Most of the operations can be applied to
elements, text and attributes. Each operation has an eﬀect on the document
itself as well as on the history. In addition to the operation itself, we also
record the context of each operation. In our case, the context consists of the
date and time of the operation, the subject that performed the operation
and the role the corresponding subject was active in. After introducing the
operations in general, we now give details on each operation.
4.4.1 Create
There are three versions of the create operation. There is one version for each
type of object in our model. As stated above, these types are XML element,
attribute and text. Each operation uses a speciﬁcation of the destination
position as ﬁrst parameter. The second parameter depends on the version of
the operation. All versions of the create operation and their parameters are
summarized in Table 4.1.
4.4. OPERATIONS
45
Parameter 1 Parameter 2
Operation
position
create element
create attribute position
position
create text
element name
attribute name
new text
Parameter 3
initial value
Table 4.1: Versions of the create operation and their parameters
The create element operation creates an element without any attributes
It needs a position, where the element should be created as ﬁrst
or text.
parameter and the name of the new element as second parameter.
The attributes of an element are created with the create attribute
operation. This operation also needs a position, where the attribute should
be created as ﬁrst parameter and the name of the new attribute as second
parameter. The initial value of an attribute is deﬁned by the third parameter.
The create text operation is used to add new text to an element. This
operation has an argument that speciﬁes the position of the new text. This
position can point into an existing text block, before an existing text block
or after an existing block. In the ﬁrst case, in which the position points into
an existing text block, we split the existing block at the position where the
new content should be placed and the new content is placed in-between the
split blocks. This splitting is required according to Deﬁnition 4.3.1. The
second argument of the create text operation is the new text that should
be created.
4.4.2 Delete
In similar fashion to the create operation, there are three versions of the
delete operation. The delete operation is used to delete elements, attri-
butes, text or parts of the text. Since elements and their attributes are
checked in rules, we keep them after deletion in the histories. This approach
enables policies based on the former content of a document as stated as a
requirement (see Requirement 5 in Section 3.2). All versions of the delete
operation are listed together with their parameters in Table 4.2.
Operation
delete element
delete attribute attribute speciﬁcation
delete text
Parameter 1
element speciﬁcation
speciﬁcation of text range
Table 4.2: Versions of the delete operation and their parameters
46
CHAPTER 4. MODEL
The delete element operation deletes an element including its attributes
and text content. Its only parameter is the speciﬁcation of the element that
should be deleted. The operation can only be applied to elements without
any children.
If an element has children elements, these must be deleted
before the element itself can be deleted. The deleted element is stored in the
history.
The delete attribute operation deletes an attribute. Its only parame-
ter is the speciﬁcation of the attribute that should be deleted. The deleted
attribute is kept in the history.
The delete text operation is used to delete a range of text. In a special
case, the complete text of an element can be deleted. This operation has
an argument that speciﬁes the range of text that should be deleted. Since
the text of an element is structured into text blocks and we must respect
Deﬁnition 4.3.1, we delete the text by deleting the corresponding text blocks.
If the start or the end of the range points into a text block, we split the
aﬀected block at the corresponding position. As a result, the deletion of a
range of text can be performed by deleting a range of text blocks.
4.4.3 Copy
The copy operation can be used for elements, text or parts of the text. We
record the copying of elements and text in the history by denoting which
object is a copy of which other object. All versions of the copy operation are
listed together with their parameters in Table 4.3.
Parameter 1
Operation
copy element element speciﬁcation
copy text
Parameter 2
position
speciﬁcation of text range position
Table 4.3: Versions of the copy operation and their parameters
The copy element operation copies an existing element to a new loca-
tion. The new location can be within the same document as the source
element or within another document. The operation has two parameters.
The ﬁrst parameter speciﬁes the existing element that should be copied and
the second parameter speciﬁes the position to where the element should be
copied. The element is copied including its attributes and its text content,
but without its children elements. When a complete tree of elements should
be copied to a new location, the copy operation must be used for each element
individually. If our model is implemented in an editing program for XML
documents, the program can automatically translate the copying of a tree
4.4. OPERATIONS
47
into the corresponding sequence of copy operations for individual elements.
The structure of the text blocks of the source element is recreated at the
destination element. For each pair of text blocks, which are copies of each
other, we denote that they are copies of each other in the history.
The copy text operation copies a range of existing text to a new location.
For this purpose, it uses a speciﬁcation of a text range to denote, which part
of the text of an element should be copied. In a special case, the complete
text of an element can be copied. Since copying text changes to where parts
of the text was copied, we must split the aﬀected blocks before we copy text
to maintain Deﬁnition 4.3.1. As a consequence, we copy text by copying
entire text blocks to the destination.
If the start or the end of the range
points into a text block, we split the aﬀected block at the corresponding
position. As a result, the copying of a range of text can be performed by
copying a range of text blocks. For each pair of text blocks, which are copies
of each other, we denote that they are copies of each other in the history.
4.4.4 Change Attribute
The change attribute operation allows users to change the value of a spe-
ciﬁc attribute. Since former values of an attribute can be checked by rules,
we record the changing of an attribute in the history. The parameters of the
change-attribute operation are shown Table 4.4.
Operation
change-attribute attribute speciﬁcation new value
Parameter 1
Parameter 2
Table 4.4: Parameters of the change-attribute operation
The change-attribute operation has two parameters. The ﬁrst param-
eter speciﬁes the existing attribute that should be changed in its value. The
second parameters is the new value to which the speciﬁed attribute should
be set to.
4.4.5 View
The view operation displays elements, attributes and text content. When a