### Figure 4: Comparison of Two Distributional Properties

**Figure 4.** Comparison of two distributional properties: Inter-connection time and session duration (log-scale).

| Inter-connection Time (seconds) | Session Duration (seconds) |
|---------------------------------|---------------------------|
| 0                               | 0                         |
| 1e−04                           | 1e−04                     |
| 0.001                           | 0.001                     |
| 0.01                            | 0.01                      |
| 0.1                             | 0.1                       |
| 1                               | 1                         |
| 10                              | 10                        |
| 100                             | 100                       |
| 1000                            | 1000                      |

(a) Inter-connection time  
(b) Session duration

### On Interactive Internet Traffic Replay

We observed a significant difference in the number of short-lived HTTP connections during the second replaying hour when we applied packet losses at our BSD firewall. To verify this, we carefully investigated the input trace records and found that a large number of short-lived HTTP connections were replayed and dropped during the second replaying hour. It is reasonable to assume that packet losses can change short-lived TCP connections into long-lived ones due to retransmissions. However, we believe the main reason for the difference was the loss of SYN packets, which caused the failure of TCP connection establishment. A SYN packet loss forces TCPopera to wait until the expiration of the connection-establishment timer (75 seconds). This behavior changes traffic patterns after packet losses, and the effect is more pronounced in areas with a high density of short-lived TCP connections.

The impact of packet losses on TCPopera is more evident when comparing the distributional properties of inter-connection time and session duration, as shown in Figure 4. Both properties showed similar characteristics, with an increase in the number of samples less than 0.1 seconds. When TCPopera experiences delays in the current replaying TCP connections, it reduces inter-packet time to match the original transmission speed of the input trace records. This behavior leads to an increase in the number of short-lived TCP connections and a decrease in inter-connection time.

### Effectiveness Test

To evaluate the effectiveness of TCPopera traffic, we tested Snort 2.3, including the stream4 analysis. We first ran Snort over the input trace records and then used it in our test environment to analyze TCPopera traffic. For the test, we used two datasets: one from the IDEVAL99 dataset and the other from ITRI. Due to space limitations, we only provide the analysis results for the ITRI dataset in Table 2. The ITRI dataset was collected over 20 minutes from a host in the 140.96.114.0/24 segment and includes various TCP applications such as HTTP, FTP, and P2P (eDonkey). The results for the IDEVAL99 dataset are included in the appendix.

**Table 2.** Test results on the ITRI dataset under various test conditions. All Snort rules and stream4 analysis are enabled during the test.

| Signature | Number of Alerts | TCPopera | Input Trace (no loss) | 1% Loss | 3% Loss |
|-----------|------------------|----------|-----------------------|---------|---------|
| ICMP Destination/Port Unreachable | 5 | 5 | 5 | 5 | 5 |
| P2P eDonkey Transfer | 3 | 3 | 3 | 3 | 3 |
| ICMP Destination Unreachable | 1 | 1 | 1 | 1 | 1 |
| Fragmentation needed but DF bit is set | 2 | 2 | 2 | 2 | 2 |
| ICMP Destination/Host Unreachable (stream4) Possible rxmt detection | 38 | 212 | 226 | 200 | 181 |
| (stream4) WINDOW violation detection | 488 | 537 | 537 | 537 | 537 |
| Total | 5 | 5 | 5 | 5 | 5 |

One interesting result was that Snort only showed differences in both stream4 inspections. The "Possible rxmt detection" rule is designed to detect potential packet replaying attacks. As shown in Table 2, Snort issued 5-6 times more alerts for TCPopera traffic than for input trace records. Upon inspection, we found that this difference was due to TCPopera's delayed ACKs, which caused confusion for Snort because of the difference in packet processing time between Snort and TCPopera. Figure 5 illustrates how TCPopera traffic confused Snort with delayed ACKs.

**Figure 5.** TCPdump output showing the difference caused by TCPopera’s delayed ACKs.

(a) Input trace: The second data segment from 140.96.114.97 retransmits the first data segment after repacketization.

```
01:20:49.403876 IP 24.7.116.14.4662 > 140.96.114.97.1134: P 376:431(55) ack 324 win 65212
01:20:49.405044 IP 140.96.114.97.1134 > 24.7.116.14.4662: P 324:326(2) ack 431 win 65105
01:20:50.723002 IP 140.96.114.97.1134 > 24.7.116.14.4662: P 324:364(40) ack 431 win 65105
```

(b) TCPopera (no-loss): TCPopera sends two delayed ACKs for both data segments from 140.96.114.97.

```
17:24:28.866305 IP 24.7.116.14.4662 > 140.96.114.97.1134: P 376:431(55) ack 324 win 65212
17:24:29.389348 IP 140.96.114.97.1134 > 24.7.116.14.4662: P 324:326(2) ack 431 win 65105
17:24:29.789172 IP 24.7.116.14.4662 > 140.96.114.97.1134: . ack 326 win 65212
17:24:30.711409 IP 140.96.114.97.1134 > 24.7.116.14.4662: P 324:364(40) ack 431 win 65105
17:24:30.733341 IP 24.7.116.14.4662 > 140.96.114.97.1134: . ack 364 win 65212
```

In the example, while TCPopera is replaying the trace, it generates two delayed ACKs. Before the TCPopera node (representing 140.96.114.96) processes the first delayed ACK packet, it sends out the second data segment. However, Snort, having already processed the first delayed ACK, interprets the second data segment as a suspicious retransmission of the first data segment. This time difference in processing delayed ACK packets between Snort and TCPopera causes false positives in the "Possible rxmt detection" analysis. Additionally, the number of alerts decreases as the packet loss rate increases, likely due to more TCP connections being dropped due to failed connection establishment.

The "WINDOW violation detection" rule is designed to detect suspicious behavior where data is written outside the receiver's window. This behavior is often seen in the TCP implementation of Microsoft Windows Operating Systems. The stream4 reassembler of Snort issues an alert if the following condition is true:

\[
(\text{seq no} - \text{last ack}) + \text{data length} > \text{receiver's window size}
\]

As shown in Table 2, there is a significant difference in this rule between input trace records and TCPopera traffic. After a deep inspection of the alerts from input trace records, we found that only 18 alerts were legitimate, and the rest were false positives due to incorrect initialization of incomplete TCP connections. Figure 6 shows the TCPdump output that caused false positives in input trace records.

**Figure 6.** TCPdump output where Snort generated false positives for the window violation analysis due to mishandling incomplete TCP connections.

(a) Input trace: The client (140.96.114.97) keeps sending packets without receiving any from the server (220.141.33.182).

```
01:12:13.811379 IP 140.96.114.97.3269 > 220.141.33.182.4662: S 4166059610:4166059610(0) win 65535 
01:12:13.879016 IP 140.96.114.97.3269 > 220.141.33.182.4662: P 1:102(101) ack 3686742391 win 65535
01:12:14.018670 IP 140.96.114.97.3269 > 220.141.33.182.4662: P 102:142(40) ack 3686742471 win 65455
01:12:14.093459 IP 220.141.33.182.4662 > 140.96.114.97.3269: P 3686742471:3686742513(42) ack 142 win 64659
01:12:14.104423 IP 140.96.114.97.3269 > 220.141.33.182.4662: P 142:164(22) ack 3686742513 win 65413
```

(b) TCPopera (no-loss): TCPopera retransmits the first SYN packet three times, and the connection is reset when the connection-establishment timer expires.

```
17:15:53.534364 IP 140.96.114.97.3269 > 220.141.33.182.4662: S 4166059610:4166059610(0) win 65535 
17:16:00.250345 IP 140.96.114.97.3269 > 220.141.33.182.4662: S 4166059610:4166059610(0) win 65535 
17:16:27.310699 IP 140.96.114.97.3269 > 220.141.33.182.4662: S 4166059610:4166059610(0) win 65535 
17:17:08.257095 IP 140.96.114.97.3269 > 220.141.33.182.4662: R 4166059611:4166059611(0) win 65535
```

The problem with Snort in processing the connection in Figure 6(a) is that the variable `last ack` used for checking the window violation condition is not properly initialized. When Snort reads the last packet, it mistakenly changes the listener (220.141.33.182)'s state to ESTABLISHED and thinks the 3-way handshaking is completed. However, since `last ack` has never been initialized, Snort incorrectly flags the last packet as violating the condition. In input trace records, there were many instances of this, causing 470 false positives. In contrast, Snort did not generate these false positives for TCPopera traffic because TCPopera could not complete the 3-way handshaking, as shown in Figure 6(b). TCPopera retransmitted the first SYN packet until the connection-establishment timer expired and then sent the RST packet.

Another issue in the (stream4) WINDOW violation detection analysis is related to RST handling. The stream4 reassembler of Snort updates the window size even for a RST segment. After processing the RST segment in Figure 7, the window size of the client (`ssn->client.win_size`) is set to 1 because the window value of this RST segment is 1. Later, Snort issues an alert on the last TCP segment because the window violation condition is true.

**Figure 7.** TCPdump output from one of the examples of false positives in TCPopera traffic.

```
17:18:18.947066 IP 140.96.114.97.3756 > 200.82.109.224.http: S 4226095698:4226095698(0) win 65535 
17:18:19.142875 IP 200.82.109.224.http > 140.96.114.97.3756: S 597332127:597332127(0) ack 4226095699 win 8000 
17:18:19.143128 IP 200.82.109.224.http > 140.96.114.97.3756: R 597332128:597332128(0) win 1
17:18:19.143891 IP 140.96.114.97.3756 > 200.82.109.224.http: . ack 1 win 65535
17:18:19.144149 IP 140.96.114.97.3756 > 200.82.109.224.http: P 1:102(101) ack 1 win 65535
```

Based on our analysis of the WINDOW violation detection alerts, we identified two implementation errors in Snort's stream4 reassembling feature. First, the stream4 reassembler fails to track the connection state correctly when it encounters an incomplete TCP connection. Second, it has issues with handling RST segments, especially in the scenario shown in Figure 7. Fixing these errors is not straightforward because they are tightly coupled with variables used for various stream4 inspections.

### Conclusion and Future Work

TCPopera is a new traffic replay tool designed to reproduce IP flows based on various flow-level and connection-level traffic parameters extracted from input trace records. These parameters can be reused to reproduce traffic or changed to create new traffic. TCPopera maintains the advantages of trace-based traffic replaying, ensuring reproducibility, accuracy in terms of address mixes, packet loads, and other traffic characteristics. It also overcomes the limitations of conventional traffic replay tools by providing traffic models that can be used to tune trace records during replaying. Unlike conventional tools, TCPopera is designed for live test environments where the accuracy of protocol semantics is crucial.

Through our validation tests, we demonstrated the capabilities of the current TCPopera implementation. We compared TCPopera traffic to input trace records in terms of traffic volume and other distributional properties. In the traffic reproduction test, we found that TCPopera successfully reproduced IP flows without generating ghost packets. We also demonstrated how TCPopera can be deployed in live test environments to evaluate security products like Snort. We observed that Snort generated different results due to its implementation flaws when we changed test conditions using TCPopera.

The TCPopera project consists of multiple development phases, and we have completed the first phase, which focused on implementing core components for interactive traffic replaying. Several issues remain for the next phase:

1. **Extend Traffic Models:** Include UDP traffic models to improve the accuracy of IP flow reproduction.
2. **Inter-Connection Dependencies:** Provide a better model for inter-connection dependencies to enhance TCPopera performance.
3. **Evasive Techniques:** Implement various evasive techniques to provide more methodologies for in-line device testing, such as routers and IPS.
4. **GUI Implementation:** Develop a TCPopera GUI to facilitate configuration and control.

Currently, one commercial vendor uses TCPopera almost daily in their development cycle. Recently, ITRI decided to use TCPopera to test Netscreen IPS boxes. We also plan to perform more in-line device testing, including ITRI's Network Processor Units (NPU)-based IPS prototype.

### References

1. The InterOperability Laboratory (IOL) homepage: <http://www.iol.unh.edu>. Accessed March 12, 2005.
2. The Wisconsin Advanced Internet Laboratory (WAIL) homepage: <http://wail.cs.wisc.edu>. Accessed March 12, 2005.
3. The Network Simulator (NS-2) homepage: <http://www.isi.edu/nsnam/ns>. Accessed March 12, 2005.
4. Scalable Simulation Framework Research Network (SSFNET) homepage: <http://www.ssfnet.org>. Accessed March 12, 2005.
5. Vahdat, A., Yocum, K., Walsh, K., Mahadevan, P., Kosti, D., Chase, J., Becker, D: Scalability and accuracy in a large-scale network emulator. SIGOPS Oper. Syst. Rev. 36 (2002) 271–284.
6. White, B., Lepreau, J., Stoller, L., Ricci, R., Guruprasad, S., Newbold, M., Hibler, M., Barb, C., Joglekar, A.: An Integrated Experimental Environment for Distributed Systems and Networks. OSDIO2, Boston, MA, (2002) 255–270.
7. Peterson, L., Anderson. T., Culler, A., Roscoe, T.: A blueprint for introducing disruptive technology into the Internet. SIGCOMM Comput. Commun. Rev. 33(1) (2003) 59–64.
8. Touch, J.: Dynamic Internet overlay deployment and management using the X-Bone. ICNP '00: Proceedings of the 2000 International Conference on Network Protocols (2000) 59–67.
9. Bajcsy, R., Benzel, T., Bishop, M. Braden, B., Brodley, C., Fahmy, S., Floyd, S., Hardaker, W., Joseph, A., Kesidis, G., Levitt, K., Lindell, B., Liu, P., Miller, D., Mundy, R., Neuman, C., Ostrenga, R., Paxson, V., Porras, P., Rosenberg, C., Tygar, J. D., Sastry, S., Sterne, D., Wu, S. F.: Cyber defense technology networking and evaluation. Commun. ACM 47(3) (2004) 58–61.
10. POSIX Thread tutorial page: <http://www.llnl.gov/computing/tutorials/workshops/workshop/pthreads/MAIN.html>. Accessed March 13, 2005.
11. Rizzo, L.: Dummynet: a simple approach to the evaluation of network protocols. ACM Computer Communication Review 27(1) (1997) 31–41.