**Title: Provably Secure Browser-Based User-Aware Mutual Authentication over TLS**

**Authors: Sebastian Gajek, Mark Manulis, Ahmad-Reza Sadeghi, and Jörg Schwenk**

**Abstract:**
The standard approach for user authentication on the web is to establish a TLS-secured channel in server-authenticated mode, followed by a protocol where the user inputs a password through an HTML form. However, studies have shown that average internet users struggle to identify servers based on X.509 certificates, making impersonation attacks (e.g., phishing) feasible. We address this issue by proposing a protocol that allows users to authenticate servers using human-perceptible authenticators (e.g., images, voice recordings). We refine the game-based security model of Bellare and Rogaway to prove the security of our protocol and provide a proof-of-concept implementation.

**Keywords:** Browser-based security protocols, human-perceptible authentication, TLS, phishing

**1. Introduction**

**1.1 Motivation**
The World Wide Web has become a fundamental technology, with web browsers serving as essential interfaces for accessing web services and providing security tools. This constrains the design of applications and security protocols to TLS, HTTP, and higher-order protocols like AJAX, AFLEX, or SOAP. We refer to protocols that can be implemented within these constraints as browser-based protocols.

A critical need on the web is to authenticate users and grant access to services or private information. The common approach is to use TLS in server-authenticated mode, where the user enters a password via a web form. It is often assumed that users can authenticate the server through X.509 certificates. However, recent studies indicate that average internet users do not understand server certificates or browser security indicators. Users often ignore warnings and rely on non-technical indicators (e.g., brands, logos), leading to a false sense of security. Adversaries can exploit this by creating fake sites to steal passwords (phishing attacks).

Additionally, the X.509 public key infrastructure for server authentication is problematic. Various Certification Authorities (CAs) store their root certificates in browsers, making them inherently trusted. Weak issuing policies can allow adversaries to obtain certificates for rogue servers, causing significant harm. Furthermore, the browser itself is a potential attack vector. Remote parties can control aspects of the browser, altering its internal state or revealing sensitive information, leading to vulnerabilities in browser-based protocols.

**1.2 Our Contribution**
We address these issues by presenting a protocol that explicitly includes the user and the browser as participants, tying the user's authentication to the TLS secure channel. Our protocol relieves the user from the responsibility of verifying the server by mediating the authentication roles between the user, browser, and server.

First, the server identifies the browser using client certificates, ensuring a secure channel to the browser but not authenticating the user. To prove its identity to the user, the server sends a human-perceptible authenticator (HPA), such as a personal image or voice recording. The user must recognize the authenticator, making the verification of server certificates and security indicators irrelevant. Finally, the user authenticates to the server using a password. We call this protocol BBMA (Browser-Based Mutual Authentication).

Advantages of BBMA over previous browser-based protocols include:
1. **User-aware Authentication:** BBMA leverages human skills in recognizing perceptible authenticators, reducing the security burden on users. Unlike TLS in client-authenticated mode, which ensures browser-aware server authentication, BBMA provides user-aware authentication.
2. **Formal Security Analysis:** We prove BBMA secure in a refined version of the Bellare-Rogaway model, which accounts for the partitioning of the client entity into user and browser entities. This is the first browser-based protocol to undergo such formal analysis.
3. **Flexibility:** BBMA fits into the standard TLS specification, exchanging HPAs and passwords as HTML payloads over the secure TLS channel. Our proof-of-concept implementation includes an online registration protocol, allowing users to set up client certificates for different browsers easily. Client certificates can be self-signed, and the server stores the hash value of the public key as a unique identifier.

Using both client certificates and passwords in BBMA may seem redundant, but it addresses the limitations of client certificates in distinguishing multiple users and supports fine-grained access control. Passwords, in addition to client certificates, provide a user-friendly and provably secure solution.

**1.3 Related Work**
Browser-based authentication protocols originated from HTTP Basic Authentication, which was used for static web pages. With dynamic web page generation, delivering passwords via HTML forms became more practical. Another line of development includes password-based authenticated key exchange (PAKE) protocols, proposed by Bellovin and Merritt, Bellare et al., Boyko et al., and McKenzie. These protocols have been enhanced to resist offline dictionary attacks and provide forward secrecy under various assumptions. Later, Abdalla and Pointcheval introduced SPAKE, a simplified PAKE structure offering more flexibility in group choices. Steiner et al. and Abdalla et al. showed that PAKE structures can be integrated into the TLS framework, providing provably secure ciphersuites for password-based authenticated key exchange.

However, these models assume protocol participants are machines that strictly follow the protocol, idealizing the user and browser. In reality, ordinary internet users and browsers naively trust any pre-installed authority. Under these conditions, PAKE protocols are vulnerable to attacks where the adversary mimics the password dialog. BBMA mitigates this by using both passwords and client secret keys, making impersonation without compromising the client secret infeasible.

Few browser-based protocols have undergone rigorous security analysis. Kormann and Rubin showed that Microsoft’s .NET Passport is susceptible to attacks where the adversary steals the ticket-granting ticket cookie. Groß analyzed SAML and found it vulnerable to adaptive attacks where the adversary intercepts the authentication token in the URL. Soghoian and Jakobsson investigated the SiteKey-protocol, showing the feasibility of stealing the shared secret stored in a cookie.

In contrast, BBMA has formal security arguments and is provably secure in a revised version of the Bellare-Rogaway model, accounting for the adversary's control over the network and potential violations of the same-origin policy. BBMA uses cryptographically strong bindings, such as client certificates, which are not affected by these violations.

Groß et al. proved the security of WS-Federation passive Requestor Profile, a browser-based protocol for federated identity management, in the browser model built on the Reactive Simulatability framework. However, there is no soundness proof that TLS is simulatable and realizes such functionality, especially concerning user behavior. BBMA explicitly considers the TLS protocol and is proven secure in the Random Oracle Model when instantiated with the key transport ciphersuite in server-authenticated mode.

**1.4 Organization**
The remaining sections are structured as follows:
- Section 2: Formal security model for browser-based authentication protocols.
- Section 3: High-level description of BBMA, security proof in the context of TLS.
- Section 4: Variants of realizing BBMA.
- Section 5: Conclusion.

**2. Modeling Browser-Based Mutual Authentication (BBMA)**

In this section, we refine the original security model for mutual authentication from [7] to partition the client party into the entities representing the participating user and browser. We consider an active probabilistic polynomial time (PPT) adversary who interacts with involved parties through queries and controls all communication.

**2.1 Communication Model**
Protocol Participants and Long-Lived Keys: We consider the server \( S \), the browser \( B \), and the human user \( U \) as participants in the BBMA protocol \( \Pi \). Additionally, the client \( C \) is represented by the pair \( (U, B) \). Contrary to current cryptographic literature, we explicitly model the user as a stand-alone entity, making the weakest security assumptions to represent a practical setting where the user is security-unaware and the browser supports standard techniques of commodity web browsers.

The human user \( U \) is modeled as a probabilistic machine with very limited computational capabilities. Specifically, we assume that \( U \) holds a long-lived key \( LL_U \in \{0, 1\}^{p_1(\kappa)} \), typically a set of pairs consisting of a memorable password \( pw \in D \) and a human-perceptible authenticator (HPA) \( w \in W \). Here, \( p_i : \mathbb{N} \to \mathbb{N} \) for \( i \in [1, 5] \) are polynomials, \( \kappa \in \mathbb{N} \) is a security parameter, and \( D \) and \( W \) are dictionaries.

The browser \( B \) is modeled as a PPT machine that exchanges protocol messages with \( S \) through physical communication links and interacts with \( U \) using visualization techniques and user input (e.g., via HTML forms). We assume \( B \) holds a high-entropy long-lived secret \( LL_B \in \{0, 1\}^{p_2(\kappa)} \), typically a private key \( sk_B \) with a corresponding public key certificate. The server \( S \) is modeled as a PPT machine with the long-lived key \( LL_S \in \{0, 1\}^{p_2(\kappa)} \), usually consisting of its private key and secrets shared with \( U \) and \( B \).

We model the communication flow from \( B \) to \( U \) through an abstract channel, interfacing the visualization function \( \text{render} \) and the human perception function \( \text{recognize} \). We also assume a channel allowing \( U \) to provide inputs to \( B \) running on the user's device, e.g., through keyboards, mice, touch-screens, etc. The functions \( \text{render} \) and \( \text{recognize} \) enable us to express more complex user behavior. In its simplest form, the user can be modeled as a deterministic Turing machine that waits for a high-entropy input (the authenticator) and outputs a low-entropy secret (the password).

**Modeling Browser Message Processing via render-Function:**
The browser acts as a messenger, processing and visualizing messages to the user. The \( \text{render} \) function converts protocol messages into a human-perceptible form, while the \( \text{recognize} \) function captures the user's response. This abstraction allows us to model the interaction between the browser and the user more accurately, considering the user's limited computational capabilities and the browser's role in facilitating the authentication process.