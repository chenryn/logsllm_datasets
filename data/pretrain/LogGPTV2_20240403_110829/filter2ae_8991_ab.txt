This problem can only be solved by special backtracking for class/dictionary
variables.
If it is said that the first two problems can be solved, there are still many
problems that cannot be solved. Here is a simple example.
This is a typical global filter. And manual audit can easily see that it is
filtered. But if in the process of automated analysis, when the source is
backtracked to `$_GET['a']`, the information flow from Source to sink has been
found. A typical false alarm occurs.
And the automated code audit tool based on AST is also playing a game with
such problems, from the well-known Rips and Cobra in PHP automated code audit
to my own secondary development Cobra-W.
  * 
  * 
  * 
They are all in different ways and methods to optimize the results of the
information flow analysis, and the biggest difference is the two cores of
**high availability and high coverage** that are inseparable.
  * Cobra is a static automated code scanner developed by the Mogujie security team. The low false negative rate is the core of this type of tool, because Party A cannot bear the consequences of undiscovered vulnerabilities, which is why this type of tool focuses on optimization key.
After I found that it was impossible to trace the process of each stream
perfectly, I put the positioning of the tool on the white hat for personal
use. From the initial Cobra-W to the KunLun-M, I focused on the low false
alarm rate.I will only recognize the accurate and reliable flow. Otherwise, I
will mark it as a suspected vulnerability, and customize the custom function
and detailed log in the multi-ring, so that the security researcher can target
the target multiple times during the use process Optimize scanning.
For AST-based code analysis, the biggest challenge is that no one can
guarantee that they can handle all AST structures perfectly. Coupled with the
one-way flow-based analysis method, **they cannot cope with 100% of the
scenes**. It is the problem faced by such tools (or, this is why the reverse
engineering is chosen).
## Code analysis based on IR/CFG
If you have a deep understanding of the principles of AST-based code analysis,
you will find many disadvantages of AST. First of all, AST is the upper layer
of IR/CFG in the compilation principle, and the nodes saved in the ast are
closer to the source code structure.
In other words, analyzing AST is closer to analyzing code. In other words, the
flow based on AST analysis is closer to the flow of code execution in the
mind, ignoring most branches, jumps, and loops that affect execution. The
condition of the process sequence is also a common solution based on AST code
analysis. Of course, it is difficult to distinguish the consequences of
ignoring from the result theory. So **based on IR/CFG solutions with control
flow, it is now a more mainstream code analysis solution. But it is not the
only**.
First of all, we have to know what IR/CFG is. \- IR: It is a linear code
similar to assembly language, in which each instruction is executed in
sequence. Among them, the mainstream IR is a three-address code (quadruple).
\- CFG: (Control flow graph) control flow graph. The simplest control flow
unit in the program is a basic block. In CFG, each node represents a basic
block, and each edge represents a controllable control transfer. CFG
represents the control flow chart of the entire code.
Generally speaking, we need to traverse the IR to generate CFG, which needs to
follow certain rules. But we won't mention it if it is not the main content
here. Of course, you can also use AST to generate CFG. After all, AST is a
higher level.
The advantage of code analysis based on CFG is that for a piece of code, you
first have a control flow diagram (or execution sequence). And then you get to
the vulnerability mining step. **Compared with AST-based code analysis, you
only need to focus on the process from Source to Sink**.
Based on the control flow graph, the subsequent analysis process is not much
different from AST. The core of the challenge is still how to control the
flow, maintain the scope, handle the branching process of the program logic,
and confirm the Source and Sink.
Of course, since there is code analysis based on AST and code analysis based
on CFG, there are naturally other types. For example, the mainstream fortify,
Checkmarx, Coverity and the latest Rips in the market all use an intermediate
part of the language constructed by themselves. For example, fortify and
Coverity need to analyze an intermediate language compiled from source code.
The source umbrella, which was acquired by Ali some time ago, even realized
the generation of a unified IR in multiple languages. So the difficulty of
scanning support for new languages has been greatly reduced.
In fact, whether it is based on AST, CFG, or a self-made intermediate
language, modern code analysis ideas have become clear. And a unified data
structure has become the base of modern code analysis.
## The future - the .QL concept
.QL refers to an object-oriented query language for querying data from
relational databases. Our common SQL is a kind of QL, which is generally used
to query data stored in the database. Of course, what I mean here is more of
the logic used to query the relationship, not related to SQL.
In the field of code analysis, Semmle QL is the first QL language that was
born. It was first applied to LGTM and used for Github's built-in security
scanning to provide free for the public. Immediately afterwards, CodeQL was
also developed as a stable QL framework in the community of github.
  * 
  * 
So what is QL? What does QL have to do with code analysis?
First of all, let's review the biggest feature of code analysis based on AST
and CFG. No matter what kind of middleware is based on the code analysis
process, three concepts are inseparable, flow, Source and Sink. **The
principle of this kind of code analysis, whether it is forward or reverse, is
to find in Source and Sink One stream**. The establishment of this flow
revolves around the flow of code execution, just like a compiler compiling and
running, the program always runs in a stream. This way of analysis is Data
Flow.
QL is to visualize each link of this flow, visualize the operation of each
node as a state change, and store it in the database. In this way, by
constructing the QL language, we can find nodes that meet the conditions and
construct them into streams. Let me give a simple example:
     $_GET.is_filterxss
Here `is_filterxss` is considered to be a mark of input `$_GET`. When
analyzing this kind of vulnerability, we can directly express it in QL.
    select * where {
        Source : $_GET,
        Sink : echo,
        is_filterxss : False,
    }
We can find this vulnerability (the code above is only pseudo-code). From such
an example, it is not difficult to find that QL is actually closer to a
concept. And it encourages the visualization of information flow so that we
can use a more general way Go write rule screening.
It is also on this basis that CodeQL was born. It is more like a basic
platform, so you don’t need to worry about the underlying logic. Whether to
use AST or CFG or a certain platform, you can simplify the automated code
analysis into We need to use what kind of rules to find the characteristics
that satisfy a certain vulnerability. This concept is also the mainstream
realization idea of modern code analysis, which is to transfer the demand to a
higher level.
# talk abort KunLun-M
Like most security researchers, my work involves a lot of code auditing. Every
time I audit a new code or framework, I need to spend a lot of time and cost
to get familiar with debugging. When I first came into contact with automated
code auditing , I just hope to help me save some time.
The first project I came across was Cobra from the Mogujie team.
  * 
This should be the earliest open source automated code audit tool for Party A.
In addition to some basic feature scanning, AST analysis was also introduced
as an auxiliary means to confirm vulnerabilities.
In the process of using it, I found that the first version of Cobra had too
few restrictions on the AST, and did not even support include (then it was
2017). So I corrected Cobra-W and deleted a large number of open source
vulnerabilities. Scanning solutions (such as scanning low-level packages of
java),the needs of Party A that I can’t use...and deeply reconstructed the AST
backtracking part (more than a thousand lines of code), and reconstructed the
underlying logic to make it compatible windows.
In the long-term use process, I encountered a lot of problems and scenarios
(the vulnerability sample I wrote to reproduce the bug has more than a dozen
folders). The simpler ones are the new ones mentioned in the previous
vulnerability sample Function encapsulation. And finally a large recursive
logic is added to create a new scan task to solve it. I also encountered
various problems such as Hook's global input, self-implemented filter
function, branch and loop jump process, among which nearly 40 issues were
created by myself...
  * 
In order to solve these problems, I refactored the corresponding syntax
analysis logic according to the underlying logic of phply. Added the concept
of Tamper to solve self-implemented filter functions. Introduced the
asynchronous logic of python3, optimized the scanning process, etc...
It was during the maintenance process that I gradually learned the current
mainstream CFG-based code analysis process, and also found that I should self-implement a CFG analysis logic based on AST...Until the emergence of Semmle
QL, I realized it again the concept of data flow analysis. These concepts of
code analysis are also constantly affecting me during the maintenance process.
In September 2020, I officially changed the name of Cobra-W to KunLun-M. In
this version, I largely eliminated the logic of regular + AST analysis,
because this logic violates the basis of streaming analysis, and then added I
used Sqlite as a database, added a Console mode for easy use, and also
disclosed some rules about javascript code that I developed before.
  * 
KunLun-M may not be an automated code audit tool with technical advantages,
but it is the only open source code audit tool that is still maintained. In
the course of years of research, I have deeply experienced the information
barriers related to white box auditing. Mature white-box audit vendors include
fortify, Checkmarx, Coverity, rips. And source umbrella scanners are all
commercial closed-source. Many domestic vendors’ white-box teams are still in
their early stages. Many things are crossing the river by feeling the stones
and want to learn. In recent years, I have only seen the "Software Analysis"
of Nanjing University. Many things can only read paper... I also hope that the
open source of KunLun-M and this article can also be brought to the
corresponding practitioners. Some help.
At the same time, KunLun-M is also a member of the Starlink project, adhering
to the principle of open source and long-term maintenance. And it is hoped
that KunLun-M can serve as a star to link every security researcher.
the Starlink project: \- 
* * *