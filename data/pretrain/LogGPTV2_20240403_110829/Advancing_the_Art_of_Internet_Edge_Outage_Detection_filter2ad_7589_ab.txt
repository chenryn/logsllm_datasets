discover and study the notion of baseline activity in our data and
introduce our approach to detect disruptions. We then tune our
parameters for robustness by cross-validating against ICMP-based
disruption detection and compare our results with a state-of-the-art
active outage detection mechanism.
3.1 Dataset
We base this study on (proprietary) server logs of one of the world’s
largest CDNs which operated more than 240,000 servers in more
than 130 countries and over 1,700 networks, serving some 3 trillion
HTTP requests on a daily basis. Each time a client fetches a Web
object from a CDN edge server, a log entry is created, which is then
processed and aggregated through a distributed data collection
framework. Our dataset consists of the number of requests ("hits")
per hour issued by each IP address over an observation period of
54 weeks from March 2017 to March 2018. We note that due to
the hourly binning of our dataset, we can only detect disruptions
that span at least one full calendar hour. Prior work established that
the CDN logs capture activity from the vast majority of the active
address space (some 1.2B active IPv4 addresses over the course of a
year), and we refer the reader to [48] for a more detailed study of
the visibility of the CDN logs.
The CDN’s servers are typically located close to the end-users,
often in the same network, and/or metropolitan area. Also, if there
is a fault in the path between the client device and the server,
or the server goes down, or there is a problem in the datacenter
hosting the server, but the client still has connectivity to the Internet,
then connections to the CDN may be disrupted, but can be re-
established to another server, possibly in a different datacenter. The
CDN continuously revises the DNS forward resolution, and the
DNS TTLs are nominally 20 seconds. Thus, over a period of an
hour, a drop in the number of hits from a given address is due to
either the associated end devices not attempting to connect to the
CDN, or the loss of connectivity at that address, possibly due to
planned operations of the network provider, or an unplanned event.
3.2 Steady CDN Activity as Signal
The hourly snapshots from our logs provide a time series to analyze.
As expected, hourly hit counts (traffic) have both diurnal and day-of-
the-week effects, as well as other effects, such as holidays and other
variations in activity from end devices. There is a large literature
on detecting anomalies in time series (e.g., [9, 20, 31, 57, 60]), and
we tried various methods. However, we soon realized that we then
faced the difficult problem of determining which detected anomalies
in the time series were actually a disruption, i.e., loss of Internet
connectivity of the address blocks.
Instead, we selected a subset of the prefixes for which we can
infer an activity signal that is both largely independent of direct
human-triggered activity and is dependent on a functioning network.
We find that the number of addresses active in a given hour yields
a smoothed signal of the number of requests per hour, and that for
many prefixes, this number of active addresses has a high-enough
baseline (minimum over a week-long interval) to permit observing
a disruption as a significant violation of this minimum. We focus on
this baseline address activity metric and apply our technique only
to those prefixes that have a sustained, sufficiently high baseline.
We next show examples of baseline address activity, how prevalent
a high baseline is, and how stable it is.
Baseline address activity examples: Figure 1a shows the num-
ber of hourly active IPv4 addresses from three selected /24 address
blocks over one month. Although individual address blocks vary
widely in terms of active addresses, note that each shows a baseline
activity, i.e., the number of addresses contacting the CDN has a
relatively stable minimum value. We manually inspected off-hour
request traffic from several address blocks and found that a variety
of Smartphone applications, widgets, and software installations
cause this activity by sending repeated beacons, status updates, and
update requests. Thus, baseline activity persists at any given hour
and does not require action by humans, e.g., by visiting a website
hosted on the CDN’s infrastructure.
Baseline coverage: Baseline activity presents us with a steady
signal to detect potential disruptions in end-user connectivity, since
it reduces the effect of human-triggered action. We next address
hoursactive IPv4 addresses within /2401683365046720128256US residential static (131 IPs BL)DE residential dynamic (72 IPs BL)DE university (13 IPs BL)minimum number of active IPv4 addressesCCDF: Fraction of /24s0501001502002500.00.20.40.60.8within one weekwithin one month●44% /24s: min. 40 IPs every hourweek−to−week baseline change per /24 blockDensity0.00.51.01.52.00246878%: change <= 0.198%: change <= 0.5IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Richter et al.
whether baseline activity is present in sufficiently many address
blocks. Of the set of /24 prefixes that had any activity in any hour,
within a week, or month, Figure 1b shows the CCDF of the fraction
of these prefixes for which the minimum number of active IPv4
addresses in each hour is at least a given value. For example, for 44%
of the /24 prefixes, the minimum number of active addresses over
the course of a week is at least 40.1 Indeed, we observe that baseline
activity is not an isolated phenomenon, but that a large number of
/24 address blocks show a significant minimum number of active
addresses. We note that baseline activity is prevalent across many
networks and addressing mechanisms (see Figure 1a for examples
both of statically as well as dynamically assigned client addresses).
We further study coverage of our approach in § 3.4, and see § 9.1
for discussion of IPv6.
Baseline continuity: To assess how continuous baseline activity
is (and not, e.g., affected by short-term seasonal effects or frequent
network restructurings), we show in Figure 1c the week-to-week
change in the minimum number of active IPv4 addresses. To gener-
ate this plot, we selected all baseline values for each /24 and week
in which the baseline is at least 40. We then calculate the minimum
number active addresses in the subsequent week, where the latter
minimum might be below 40. Figure 1c then shows the ratio of the
latter minimum divided by the former baseline. Baseline activity
on a per-block level is indeed very steady over time; close to 80% of
the /24 address blocks show a change only in the range of +- 10% of
the active addresses, and only 2% of address blocks show changes
that exceed 50% of the active addresses. Note the small peak at 0,
indicating that the baseline activity changed to zero.
3.3 Detecting Activity Disruptions
Having established that active IPv4 address counts per address block
remain steady over periods of time, we next introduce our approach
to detect disruptions in this activity. Note that our approach focuses
on offline detection of disruptions in CDN log files and we discuss
the possibility of real-time analysis in § 9.1.
Figure 2 illustrates our approach for an exemplary /24 address
block. For each /24 IPv4 prefix, we use a sliding window in which
we calculate the minimum number of active addresses in each hour
over the last 168 hours, denoted as b0. We advance the sliding
window each hour, updating the value of b0. If the window reaches
an hour where the number of addresses is below a threshold, α ×b0,
for 0 < α < 1, then we tag this hour as the start of a non-steady-
state period. Upon such an event, we do not advance the sliding
window, and rather introduce a second, new sliding window starting
at the first hour of the non-steady-state period, and calculate the
minimum number of active addresses for the future 168 hours. We
advance the new window until it reaches a new baseline that is at
least β ×b0, meant to be “reasonably” close to b0. The hour at which
this occurs is the end of the non-steady-state period, and the start
of a new steady-state period. We then identify a disruption event
as those contiguous hours in the non-steady-state period where
number of active addresses is lower than b0 × min(α, β )), shown in
red in Figure 2. Typically, there is just one disruption event, though
sometimes, as in Figure 2, there is more than one.
1The exemplary CCDF is for a week in March 2017 and the entire month of March;
other weeks and months show the same behavior.
Figure 2: Disruption detection: If the number of hourly ac-
tive addresses declines below a threshold α × b0, where b0
is the minimum number of active addresses in the last 168
hours, we enter a non-steady-state period. Once the mini-
mum number of active addresses over 168 hours is restored
to at least β × b0, the non-steady-state period ends. Within
non-steady-state periods, disruption events are contiguous
hours with fewer than b0 × min(α, β ) active addresses.
However, there are time series where the criterion for the new
baseline is never met, or not met for a long time, possibly due to
network restructuring or some long-term change. In this work, we
are not interested in such events, and thus we impose a limit of
two weeks for the duration of detected disruptions: If the second
window advances for two weeks without satisfying the criteria
for a new baseline, then we do not identify disruption events for
this non-steady-state period, but continue to advance the window
until the criteria for the new baseline is met, if ever. Note that this
excludes the detection of outages that are longer than two weeks.
The above logic intentionally restricts the set of disruptions to those
with steady baseline activity both before and after the disruption event.
This simplifies, though by no means resolves, the task of inferring
which disruptions are outages, see Section 5.
3.4 Trackable Address Blocks
We chose to require that the baseline activity for a /24 prefix, b0, be
at least 40 active addresses for us to consider it to be in a trackable
state, i.e., we will look for a disruption in the following hour. We
experimented with various values and found that 40 yields a reason-
able trade-off: a lower value would include more prefixes (Figure 1b)
but be more vulnerable to false disruptions, which we will elaborate
on in the next section. This minimum requirement for a trackable
prefix prevents detection of disruptions in address blocks where
the address activity regularly reaches a lower value, for example
enterprise networks with little activity during weekends, or the
German university prefix in Figure 1a with a baseline of 13.
Although baseline activity is often stable over long periods of
time, an address block can be trackable for some weeks but not
others. To assess the overall coverage of our dataset, we now con-
sider the full observation period of one year, and count how many
/24s have a baseline b0 of at least 40 for each hour of the year. We
hourshourly active IPv4 addresses●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●0168336504050100150baseline b0baseline b1α x b0β x b0non-steady-statedisruption eventdisruption eventAdvancing the Art of Internet Edge Outage Detection
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
(a) CDN activity and ICMP responsiveness for Mi-
ami address block during Hurricane Irma.
(b) Percentage of interruptions where CDN and
ICMP disagree.
(c) Fraction of outages and disagreement (beta fixed
to 0.8).
Figure 3: Tuning the robustness of our approach: Detected disruptions in CDN activity vs. ICMP-detected disruptions.
exclude the first week since we need 168 prior hours to establish the
baseline. The median value across all hours is 2.3M trackable /24
address blocks in more than 12.5K ASes. The median absolute
deviation of trackable address blocks across all hours is very low:
2K /24 blocks, or 0.1%. Even during Christmas and New Year’s, the
period with the lowest number of trackable blocks, the number
decreases only minimally by 15K, or 0.7% of the typical 2.3M. These
2.3M trackable /24 address blocks represent 37% of all /24 prefixes
that showed any activity, yet they host 82% of all active IPv4 ad-
dresses that the CDN sees and account for 80% of all requests issued
to the CDN. We can, hence, track those portions of the address
space that host a large majority of clients of the CDN.
3.5 Choosing Robust Parameters
We can adjust the sensitivity of our approach by setting α and β. A
high α value will result in more detected disruptions—a high value
will set the threshold close to the baseline, thus making it more likely
to be crossed—while a low α may miss partial disruptions. The β
value directly affects how sensitive the algorithm is to determining
the end of non-steady-state and contained disruptions—a high value
will require that the prefix activity be restored to near the original
baseline, while a low value may classify long-term baseline changes
(e.g., permanent network restructurings) as disruptions. We have
established that baseline activity (§ 3.2) is rarely affected by users’
schedules. Still, the parameters of our approach must be set so
that detected disruptions are not the result of regular variability in
address activity, i.e., hosts temporarily not contacting the CDN, but
still active with their IP addresses.
CDN vs. ICMP as disruption signal: In order to adjust our pa-
rameters, we calibrate against an orthogonal approach to detect
disruptions, active ICMP echo probing, which should be reasonably
independent of CDN address activity. We will choose parameters
that rarely detect disruptions that are not clearly accompanied by a
drop in ICMP responsiveness. See Figure 3a, which shows the num-
ber of IPv4 addresses in a /24 prefix that contact the CDN per hour,
as well as the number of ICMP responsive addresses in this block.
During the disruption in address activity, we can see a disruption
in ICMP responsiveness at the same time. We manually inspected
hundreds of disruption events showing this behavior and are thus
confident that this example disruption in the CDN logs indicates a
disruption in connectivity to an IP address block. We next apply a
method based on this observation to select α and β.
Actively probing the address space has limitations that make it
impossible to comprehensively evaluate our detected disruptions
against ICMP responsiveness. In particular, recent measurements
show that up to about 40% of the hosts contacting the CDN typically
do not respond to ICMP echo requests [48]. In addition, probing
every routed IP address on a continuous basis requires substan-
tial bandwidth for the probes, operator attention, and a strategy
for reacting to firewall-based filtering of probe traffic. However,
while these limitations prevent a comprehensive evaluation, we
can compare some address blocks and time periods, for which we
have available data, for the purpose of adjusting our parameters.
ICMP survey data: We leverage address space survey datasets
provided by ISI [4–7] (the ICMP data shown in Figure 3a is also
from [7]). ISI address space surveys periodically, every 11 min-
utes, send ICMP echo requests to all IP addresses within ≈ 1% of
the allocated IPv4 /24 address blocks. Surveyed address blocks are
selected using different policies, i.e., the survey population both
contains randomly selected address blocks as well as some address