### Discovering and Analyzing Baseline Activity in Data for Disruption Detection

In this section, we explore the concept of baseline activity in our dataset and introduce our approach to detect disruptions. We then fine-tune our parameters for robustness by cross-validating against ICMP-based disruption detection and compare our results with a state-of-the-art active outage detection mechanism.

#### 3.1 Dataset

Our study is based on proprietary server logs from one of the world's largest Content Delivery Networks (CDNs), which operates over 240,000 servers across more than 130 countries and 1,700 networks, handling approximately 3 trillion HTTP requests daily. Each time a client fetches a web object from a CDN edge server, a log entry is created. These entries are processed and aggregated through a distributed data collection framework. Our dataset includes the number of requests ("hits") per hour issued by each IP address over a 54-week period from March 2017 to March 2018. Due to the hourly binning of our dataset, we can only detect disruptions that span at least one full calendar hour.

Previous research has established that the CDN logs capture activity from the vast majority of the active address space (approximately 1.2 billion active IPv4 addresses annually). For a more detailed analysis of the visibility of the CDN logs, we refer the reader to [48].

The CDN's servers are typically located close to end-users, often within the same network or metropolitan area. If there is a fault in the path between the client device and the server, or if the server goes down, or if there is an issue in the data center hosting the server, but the client still has internet connectivity, connections to the CDN may be disrupted but can be re-established to another server, possibly in a different data center. The CDN continuously updates DNS forward resolution, with DNS TTLs nominally set to 20 seconds. Thus, over an hour, a drop in the number of hits from a given address is due to either the associated end devices not attempting to connect to the CDN, or the loss of connectivity at that address, possibly due to planned operations by the network provider or an unplanned event.

#### 3.2 Steady CDN Activity as Signal

Our logs provide hourly snapshots, forming a time series for analysis. As expected, hourly hit counts (traffic) exhibit diurnal and day-of-the-week effects, as well as other variations such as holidays and changes in end-device activity. There is extensive literature on detecting anomalies in time series (e.g., [9, 20, 31, 57, 60]), and we tested various methods. However, we found it challenging to determine which detected anomalies were actual disruptions, i.e., loss of internet connectivity for address blocks.

Instead, we selected a subset of prefixes where we could infer an activity signal that is largely independent of direct human-triggered activity and dependent on a functioning network. We found that the number of active addresses in a given hour provides a smoothed signal of the number of requests per hour. For many prefixes, this number of active addresses has a high enough baseline (minimum over a week-long interval) to observe a disruption as a significant violation of this minimum. We focus on this baseline address activity metric and apply our technique only to those prefixes with a sustained, sufficiently high baseline.

We next present examples of baseline address activity, its prevalence, and stability.

**Baseline Address Activity Examples:**
Figure 1a shows the number of hourly active IPv4 addresses from three selected /24 address blocks over one month. Although individual address blocks vary widely in terms of active addresses, each shows a baseline activity, i.e., the number of addresses contacting the CDN has a relatively stable minimum value. Manual inspection of off-hour request traffic from several address blocks revealed that a variety of smartphone applications, widgets, and software installations cause this activity by sending repeated beacons, status updates, and update requests. Thus, baseline activity persists at any given hour and does not require human action, such as visiting a website hosted on the CDN’s infrastructure.

**Baseline Coverage:**
Baseline activity provides a steady signal to detect potential disruptions in end-user connectivity, reducing the effect of human-triggered actions. Figure 1b shows the CCDF of the fraction of /24 prefixes with a minimum number of active IPv4 addresses in each hour. For example, 44% of the /24 prefixes have a minimum of 40 active addresses over the course of a week. Baseline activity is prevalent across many networks and addressing mechanisms, as shown in Figure 1a, which includes both statically and dynamically assigned client addresses. We further study the coverage of our approach in § 3.4 and discuss IPv6 in § 9.1.

**Baseline Continuity:**
To assess the continuity of baseline activity, Figure 1c shows the week-to-week change in the minimum number of active IPv4 addresses. We selected all baseline values for each /24 and week where the baseline is at least 40 and calculated the minimum number of active addresses in the subsequent week. Figure 1c then shows the ratio of the latter minimum divided by the former baseline. Baseline activity is very steady over time; close to 80% of the /24 address blocks show a change only in the range of ±10% of the active addresses, and only 2% of address blocks show changes exceeding 50% of the active addresses. The small peak at 0 indicates that the baseline activity changed to zero.

#### 3.3 Detecting Activity Disruptions

Having established that active IPv4 address counts per address block remain steady over periods, we introduce our approach to detect disruptions in this activity. Our approach focuses on offline detection of disruptions in CDN log files, and we discuss the possibility of real-time analysis in § 9.1.

**Disruption Detection Method:**
Figure 2 illustrates our approach for an exemplary /24 address block. For each /24 IPv4 prefix, we use a sliding window to calculate the minimum number of active addresses in each hour over the last 168 hours, denoted as \( b_0 \). We advance the sliding window each hour, updating \( b_0 \). If the window reaches an hour where the number of addresses is below a threshold \( \alpha \times b_0 \) (where \( 0 < \alpha < 1 \)), we tag this hour as the start of a non-steady-state period. Upon such an event, we do not advance the sliding window but introduce a second, new sliding window starting at the first hour of the non-steady-state period, and calculate the minimum number of active addresses for the next 168 hours. We advance the new window until it reaches a new baseline that is at least \( \beta \times b_0 \), meant to be "reasonably" close to \( b_0 \). The hour at which this occurs is the end of the non-steady-state period and the start of a new steady-state period. We identify a disruption event as those contiguous hours in the non-steady-state period where the number of active addresses is lower than \( b_0 \times \min(\alpha, \beta) \), shown in red in Figure 2. Typically, there is just one disruption event, though sometimes, as in Figure 2, there is more than one.

However, there are time series where the criterion for the new baseline is never met or not met for a long time, possibly due to network restructuring or some long-term change. In this work, we are not interested in such events, so we impose a limit of two weeks for the duration of detected disruptions. If the second window advances for two weeks without satisfying the criteria for a new baseline, we do not identify disruption events for this non-steady-state period but continue to advance the window until the criteria for the new baseline are met, if ever. This excludes the detection of outages longer than two weeks.

The above logic restricts the set of disruptions to those with steady baseline activity both before and after the disruption event, simplifying the task of inferring which disruptions are outages, as discussed in Section 5.

#### 3.4 Trackable Address Blocks

We require that the baseline activity for a /24 prefix, \( b_0 \), be at least 40 active addresses to consider it trackable, i.e., we will look for a disruption in the following hour. We experimented with various values and found that 40 yields a reasonable trade-off: a lower value would include more prefixes (Figure 1b) but be more vulnerable to false disruptions, which we will elaborate on in the next section. This minimum requirement for a trackable prefix prevents the detection of disruptions in address blocks where address activity regularly reaches a lower value, such as enterprise networks with little activity during weekends or the German university prefix in Figure 1a with a baseline of 13.

Although baseline activity is often stable over long periods, an address block can be trackable for some weeks but not others. To assess the overall coverage of our dataset, we consider the full observation period of one year and count how many /24s have a baseline \( b_0 \) of at least 40 for each hour of the year. We exclude the first week since we need 168 prior hours to establish the baseline. The median value across all hours is 2.3 million trackable /24 address blocks in more than 12,500 ASes. The median absolute deviation of trackable address blocks across all hours is very low: 2,000 /24 blocks, or 0.1%. Even during Christmas and New Year’s, the period with the lowest number of trackable blocks, the number decreases only minimally by 15,000, or 0.7% of the typical 2.3 million. These 2.3 million trackable /24 address blocks represent 37% of all /24 prefixes that showed any activity, yet they host 82% of all active IPv4 addresses that the CDN sees and account for 80% of all requests issued to the CDN. Therefore, we can track those portions of the address space that host a large majority of the CDN's clients.

#### 3.5 Choosing Robust Parameters

We can adjust the sensitivity of our approach by setting \( \alpha \) and \( \beta \). A high \( \alpha \) value will result in more detected disruptions, as it sets the threshold close to the baseline, making it more likely to be crossed. A low \( \alpha \) may miss partial disruptions. The \( \beta \) value directly affects how sensitive the algorithm is to determining the end of non-steady-state and contained disruptions—a high value requires that the prefix activity be restored to near the original baseline, while a low value may classify long-term baseline changes (e.g., permanent network restructurings) as disruptions. We have established that baseline activity (§ 3.2) is rarely affected by users’ schedules. Still, the parameters of our approach must be set so that detected disruptions are not the result of regular variability in address activity, i.e., hosts temporarily not contacting the CDN but still active with their IP addresses.

**CDN vs. ICMP as Disruption Signal:**
To adjust our parameters, we calibrate against an orthogonal approach to detect disruptions, active ICMP echo probing, which should be reasonably independent of CDN address activity. We choose parameters that rarely detect disruptions not clearly accompanied by a drop in ICMP responsiveness. Figure 3a shows the number of IPv4 addresses in a /24 prefix that contact the CDN per hour and the number of ICMP-responsive addresses in this block. During the disruption in address activity, we can see a disruption in ICMP responsiveness at the same time. We manually inspected hundreds of disruption events showing this behavior and are confident that this example disruption in the CDN logs indicates a disruption in connectivity to an IP address block. We next apply a method based on this observation to select \( \alpha \) and \( \beta \).

Actively probing the address space has limitations that make it impossible to comprehensively evaluate our detected disruptions against ICMP responsiveness. Recent measurements show that up to about 40% of the hosts contacting the CDN typically do not respond to ICMP echo requests [48]. Additionally, probing every routed IP address on a continuous basis requires substantial bandwidth for the probes, operator attention, and a strategy for reacting to firewall-based filtering of probe traffic. While these limitations prevent a comprehensive evaluation, we can compare some address blocks and time periods for which we have available data to adjust our parameters.

**ICMP Survey Data:**
We leverage address space survey datasets provided by ISI [4–7] (the ICMP data shown in Figure 3a is also from [7]). ISI address space surveys periodically, every 11 minutes, send ICMP echo requests to all IP addresses within approximately 1% of the allocated IPv4 /24 address blocks. Surveyed address blocks are selected using different policies, including randomly selected address blocks and some address blocks with specific characteristics.