title:Hiding in the Particles: When Return-Oriented Programming Meets Program
Obfuscation
author:Pietro Borrello and
Emilio Coppa and
Daniele Cono D'Elia
Hiding in the Particles: When Return-Oriented
Programming Meets Program Obfuscation*
Pietro Borrello
Sapienza University of Rome
PI:EMAIL
Emilio Coppa
Sapienza University of Rome
PI:EMAIL
Daniele Cono D’Elia
Sapienza University of Rome
PI:EMAIL
1
2
0
2
r
p
A
6
]
R
C
.
s
c
[
2
v
8
5
6
6
0
.
2
1
0
2
:
v
i
X
r
a
Abstract—Largely known for attack scenarios, code reuse
techniques at a closer look reveal properties that are appealing
also for program obfuscation. We explore the popular return-
oriented programming paradigm under this light, transforming
program functions into ROP chains that coexist seamlessly with
the surrounding software stack. We show how to build chains
that can withstand popular static and dynamic deobfuscation
approaches, evaluating the robustness and overheads of the
design over common programs. The results suggest a signiﬁcant
amount of computational resources would be required to carry a
deobfuscation attack for secret ﬁnding and code coverage goals.
Index Terms—Code obfuscation, program protection, ROP
I. INTRODUCTION
Memory errors are historically among the most abused soft-
ware vulnerabilities for arbitrary code execution exploits [1].
Since the introduction of system defenses against code in-
jection attempts, code reuse techniques earned the spotlight
for their ability in reassembling existing code fragments of a
program to build the execution sequence an attacker desires.
Return-oriented programming (ROP) [2] is the most emi-
nent code reuse technique. Thanks to its rich expressivity, ROP
has also seen several uses besides exploitation. Researchers
have used it constructively, for instance, in code integrity
veriﬁcation [3], or maliciously to embed hidden functionality
in code that undergoes auditing [4], [5]. Security ﬁrms have
reported cases of malware in the wild written in ROP [6].
Some literature considers ROP code bothersome to analyze:
humans may struggle with the exoticism of the representation,
and the vast majority of tools used for code understanding
and reverse engineering have no provisions for code reuse
payloads [7]–[10]. Automatic proposals for analyzing complex
ROP code started to emerge only recently [7], [9], [10].
We believe that
the quirks of the ROP paradigm offer
promising opportunities to realize effective code obfuscation
schemes. In this paper we present a protection mechanism that
builds on ROP to hide implementation details of a program
from motivated attackers that can resort to a plethora of au-
tomated code analyses. We analyze what qualities make ROP
appealing for obfuscation, and address its weak links to make
it robust in the face of an adversary that can symbiotically
combine general and ROP-aware code analysis methods.
* Online extended version for the paper published in the Proceedings of
DSN’21 (51st IEEE/IFIP Int. Conf. on Dependable Systems and Networks).
Code and BibTeX entry available at https://github.com/pietroborrello/raindrop.
1
Motivation: From a code analysis perspective, we observe
that the control ﬂow of a ROP sequence is naturally destruc-
tured. Each ROP gadget ends with a ret instruction that
operates like a dispatcher in a language interpreter: ret reads
from the top of the stack the address of the next gadget and
transfers control to it. The stack pointer RSP becomes a virtual
program counter for the execution, sidelining the standard
instruction pointer RIP, while gadget addresses become the
instructions supported by this custom language.
This level of indirection makes the identiﬁcation of basic
blocks and of control transfers between them not immediate.
This challenges humans and classic disassembly and decompi-
lation approaches, but may not be an issue for dynamic deob-
fuscation approaches that explore the program state space sys-
tematically (e.g., symbolic execution [11]) or try to extricate
the original control ﬂow from the dispatching logic (e.g., [7]),
nor for ROP-aware analyses that dissect RSP and RIP changes.
Protecting transfers is critical for program obfuscations to
withstand advanced deobfuscation methods, and we introduce
three ROP transformations that address this weak link.
Another beneﬁt from using ROP for obfuscation is the code
diversity [12] it can bring. Obfuscations may randomize the
instructions emitted at speciﬁc points, but can incur a limited
transformation space [13]. We can use multiple equivalent
gadgets in the encoding to serve one same purpose in different
program points. But one gadget can also serve different
purposes in different points: the instructions in it that concur to
the program semantics will depend on the surrounding chain
portion, while the others are dynamically dead. This not only
complicates manual analysis, but helps also against pattern
attacks that may try to recognize speciﬁc gadget sequences to
deem the location of ROP branches and blocks in the chain.
Such attacks often complement an attacker’s toolbox [14]:
for instance, an adversary may heuristically look for distinctive
instructions in memory and try to patch away parts that hinder
semantic attacks. We identify a distinctive beneﬁt of ROP:
the adversary only sees bytes that form gadget addresses or
data operands, and because of indirection needs to dereference
addresses to retrieve the actual instructions. With a careful
encoding we can induce gadget confusion that makes it harder
also to locate the position of gadget addresses in the chain.
Contributions: In this work we bring novel ideas to the
software protection realm, presenting a protection mechanism
that signiﬁcantly slows down or deters current automated
deobfuscation attacks. We show how to transform entire pro-
gram functions into ROP chains that interact seamlessly with
standard code components, introducing novel natural encoding
transformations that raise the bar for general classes of attacks.
We evaluate our techniques over synthetic functions for two
common deobfuscation tasks, putting the computational effort
for succeeding into perspective with different conﬁgurations
of the prominent virtualization obfuscation [13]. We also
analyze their slowdowns on performance-sensitive code, and
their coverage on a heterogeneous real-world code base. In
summary, over the next sections we present:
• a rewriter that turns compiled functions into ROP chains;
• an analysis of ROP in the face of three attack surfaces
for general deobufscation, and three encoding predicates
that increase the resistance against such attacks;
• a resistance study for secret ﬁnding and code coverage
goals with symbolic, taint-driven, and ROP-aware tools;
• a coverage study where we transform 95.1% of the unique
functions composing the coreutils Linux suite.
In the hope of fostering further work in program protection,
we make our system available to researchers. Details for access
can be found at https://github.com/pietroborrello/raindrop/.
II. PRELIMINARIES
This section details key concepts from code obfuscation and
ROP research that are relevant to the ideas behind this paper.
A. Code Obfuscation
Software obfuscation protects digital assets [15] from mali-
cious entities that some literature identiﬁes as MATE (man-at-
the-end) attackers [13]. Before a research community was even
born, in the ’80s these entities challenged and subverted anti-
piracy schemes from vendors, and shielded their own malware.
Today it represents an active research area, with hetero-
geneous protection mechanisms challenged by increasingly
powerful program analyses [16]. Data transformations alter the
position and representation of values and variables, while code
transformations affect the selection, orchestration, and arrange-
ment of instructions. Our focus are code transformations that
prevent an adversary from understanding the program logic.
The interpretation capabilities of an attacker can be syn-
tactic, semantic, or both. This distinction makes a great
impact: for instance, instruction substitution or the insertion of
spurious computations get in the way of syntax-driven attacks,
but may hardly affect a semantic interpretation as we discuss
in §III. When facing mixed capabilities, the most resilient
protection schemes are often heavy-duty transformations that
deeply affect the control ﬂow and instructions of a program.
Such transformations commonly operate at the granularity
of individual functions [13]. Control-ﬂow ﬂattening [17], [18]
collapses all the basic blocks of the control-ﬂow graph (CFG)
into a single layer, introducing a dispatcher block that picks
the next block to execute based on an augmented program
state. After the successful deobfuscation attack of [19], present
variants try to complicate the analysis of the dispatcher [20].
2
Fig. 1: ROP chain with non-linear control ﬂow. For readability
pointed-to instructions appear in place of gadget addresses.
Virtualization obfuscation [13] completely removes the orig-
inal layout and instructions: it transforms code into instruc-
tions for a randomly generated architecture and synthesizes
an interpreter for it [21]. The instructions form a bytecode
representation in memory, and the interpreter maintains a
virtual program counter over it:
it reads each instruction
and dispatches an opcode handler function that achieves the
desired semantics for it. As its working resembles a virtual
machine, the transformation is also known as VM obfuscation.
This technique has lately monopolized the agenda of much
deobfuscation research in security conferences (e.g., [8], [22]–
[25]). VM obfuscation tools have three main strengths: com-
plex code used in opcode handlers to conceal their semantics,
obfuscated virtual program counter updates, and scarce reuse
of deobfuscation knowledge as the instruction set and the code
for opcode handlers are generated randomly for each program.
Best practices often use data transformations at strategic
points (e.g., VM dispatcher) in the implementation of a code
transformation. The most common instance are opaque predi-
cates [26]: expressions whose outcome is independent of their
constituents, but hard to determine statically for an attacker.
Opaque predicates can build around mathematical formulas
and conjectures, mixed boolean-arithmetic (MBA) expres-
sions, and instances of other hard problems like aliasing [27].
B. Return-Oriented Programming
ROP is a technique to encode arbitrary behavior in a
program by borrowing and rearranging code fragments, also
called gadgets, that are already in the program [2]. Each gadget
delivers a piece of the desired computation and terminates with
a ret instruction, which gives the name to the technique.
A ROP payload comprises a sequence of gadget addresses
interleaved with immediate data operands. The key to ignition
is a pivoting sequence that hijacks the stack pointer, so that on
a function return event the CPU fetches the instructions from
the ﬁrst gadget. Each gadget eventually transfers execution to
the next using its own ret instruction, realizing a ROP chain.
Figure 1 features a chain that assigns register RDI with 1
when register RAX==0, and with 2 otherwise. The example
showcases exoticisms of the representation with branch en-
coding and path-dependent semantics of chain items. The ﬁrst
gadget writes the immediate value 0x0 to RCX, and RSP
advances by 0x10 bytes for its pop and ret instructions.
The next two gadgets check if RAX is zero with neg rax:
if-then:test rax, raxjne elsemov rdi, 0x1jmp nextelse:mov rdi, 0x2next:rsp0x0and rsi, rcx; retadd rsp, rsi; retneg rax; retpop rcx; retpop rsi; ret0x18adc rcx, rcx; retneg rcx; retpop rdi; retpop rsi; pop rbp; retpop rdi; retnext0x10x2JNEJMPRDI =RA ? 2 : 1(continues)0x18 bytesthe carry ﬂag becomes 0 when RAX==0 and 1 otherwise, then
an addition with carry writes this quantity into RCX.
ROP control-ﬂow branches are variable RSP addends com-
puted over a leaked CPU condition ﬂag. The chain determines
whether to skip over the 0x18 byte-long portion that sets RDI
to 1: it computes in RSI an addend that is equal to 0 when
RAX==0, and to 0x18 otherwise, using a two’s complement
and a bitwise AND on RCX. If the branch is taken, RSP
reaches a pop rdi gadget that reads and assigns 2 to RDI
as desired. When execution falls through, a similar sequence
sets RDI to 1, then unconditionally jumps over the alternative
assignment sequence: this time we ﬁnd no RSP addition, but
a gadget disposes of the alternative 0x10 byte-long segment
by popping two junk immediates to RSI and RBP.
Attackers can ﬁnd Turing-complete sets of gadgets in
mainstream software [2], [28]. While a few works address
automatic generation of ROP payloads [28], publicly avail-
able tools often produce incomplete chains in real-world
scenarios [29] or do not support branches. Reasons for this
failure are side effects from undesired code in found gadgets,
register conﬂicts during chaining [29], and unavailability of
“straightforward” gadgets for some tasks [30]. Albeit improved
tools continue to appear (e.g., [31]), no general solution for
automatic ROP code generation seems available to date.
ROP is the most popular but not the sole realization of code
reuse: jmp-ended gadgets (JOP) [32], counterfeit C++ objects
(COOP) [33], and other elements can be abused as well. But
most importantly, ROP today is no longer only a popular mean
to get around and disable code injection defenses.
Researchers and threat actors used its expressivity to create
userland [6], kernel [34], [35], and enclave [36] malware, and
to fool antivirus engines [5], [37] and application review [4].
The sophistication of these payloads went
in some cases
beyond what a human analyst can manually investigate [9], and
researchers in the meantime explored automated approaches to
untangle ROP chains: we discuss these works in detail in §III.
III. ADVERSARIAL MODEL
This paper considers a motivated and experienced attacker
that can examine a program both statically and dynamically.
The attacker is aware of the design of the used obfuscation, but
not of the obfuscation-time choices made when instantiating
the approach over a speciﬁc program to be protected (e.g. at
which program locations we applied some transformation).
While the ultimate end goal of a reverse engineering attempt
can be disparate, we follow prior deobfuscation literature
(e.g., [14], [38], [39]) in considering two deobfuscation goals
that are sufﬁciently generic and analytically measurable:
G1 Secret ﬁnding. The program performs a complex com-
putation on the input, such as a license key validation,
and the attacker wishes to guess the correct value;
G2 Code coverage. The attacker exercises enough (obfus-
cated) paths to cover all reachable (original) program
code, e.g. to later analyze execution traces.
The attacker has access to state-of-the-art systems suitable
for automated deobfuscation and can attempt to symbiotically
3
combine them, using one to ease another. In the following
we describe the most powerful and promising approaches
available to attackers, and enucleate three attack surfaces for