        switch (res) { // 判断res的值
          case FAULT_NONE:
            if (q == queue) check_map_coverage(); // 如果为头结点，调用check_map_coverage评估覆盖率
            if (crash_mode) FATAL("Test case '%s' does *NOT* crash", fn); // 抛出异常
            break;
          case FAULT_TMOUT:
            if (timeout_given) { // 指定了 -t 选项
              /* The -t nn+ syntax in the command line sets timeout_given to '2' and
                 instructs afl-fuzz to tolerate but skip queue entries that time
                 out. */
              if (timeout_given > 1) {
                WARNF("Test case results in a timeout (skipping)");
                q->cal_failed = CAL_CHANCES;
                cal_failures++;
                break;
              }
              SAYF(... ...);
              FATAL("Test case '%s' results in a timeout", fn);
            } else {
              SAYF(... ...);
              FATAL("Test case '%s' results in a timeout", fn);
            }
          case FAULT_CRASH:  
            if (crash_mode) break; 
            if (skip_crashes) {
              WARNF("Test case results in a crash (skipping)");
              q->cal_failed = CAL_CHANCES;
              cal_failures++;
              break;
            }
            if (mem_limit) { // 建议增加内存
              SAYF(... ...);
            } else {
              SAYF(... ...);
            }
            FATAL("Test case '%s' results in a crash", fn);
          case FAULT_ERROR:
            FATAL("Unable to execute target application ('%s')", argv[0]);
          case FAULT_NOINST: // 测试用例运行没有路径信息
            FATAL("No instrumentation detected");
          case FAULT_NOBITS:  // 没有出现新路径，判定为无效路径
            useless_at_start++;
            if (!in_bitmap && !shuffle_queue)
              WARNF("No new instrumentation output, test case may be useless.");
            break;
        }
        if (q->var_behavior) WARNF("Instrumentation output varies across runs.");
        q = q->next; // 读取下一个queue
      }
      if (cal_failures) {
        if (cal_failures == queued_paths)
          FATAL("All test cases time out%s, giving up!",
                skip_crashes ? " or crash" : "");
        WARNF("Skipped %u test cases (%0.02f%%) due to timeouts%s.", cal_failures,
              ((double)cal_failures) * 100 / queued_paths,
              skip_crashes ? " or crashes" : "");
        if (cal_failures * 5 > queued_paths)
          WARNF(cLRD "High percentage of rejected test cases, check settings!");
      }
      OKF("All test cases processed.");
    }
总结以上流程：
  1. 进入 `while` 循环，遍历 `input` 队列，从队列中取出 `q->fname`，读取文件内容到分配的内存中，然后关闭文件；
  2. 调用 `calibrate_case` 函数校准该测试用例；
  3. 根据校准的返回值 `res` ，判断错误类型；
  4. 打印错误信息，退出。
##### 2.3 calibrate_case 函数
该函数同样为AFL的一个关键函数，用于新测试用例的校准，在处理输入目录时执行，以便在早期就发现有问题的测试用例，并且在发现新路径时，评估新发现的测试用例的是否可变。该函数在
`perform_dry_run`，`save_if_interesting`，`fuzz_one`，`pilot_fuzzing`，`core_fuzzing`函数中均有调用。该函数主要用途是初始化并启动fork
server，多次运行测试用例，并用 `update_bitmap_score` 进行初始的byte排序。
函数控制流程图如下：
结合源码进行解读如下：
    /* Calibrate a new test case. This is done when processing the input directory
       to warn about flaky or otherwise problematic test cases early on; and when
       new paths are discovered to detect variable behavior and so on. */
    static u8 calibrate_case(char** argv, struct queue_entry* q, u8* use_mem,
                             u32 handicap, u8 from_queue) {
      static u8 first_trace[MAP_SIZE]; // 创建 firts_trace[MAP_SIZE]
      u8  fault = 0, new_bits = 0, var_detected = 0, hnb = 0,
          first_run = (q->exec_cksum == 0); // 获取执行追踪结果，判断case是否为第一次运行，若为0则表示第一次运行，来自input文件夹
      u64 start_us, stop_us;
      s32 old_sc = stage_cur, old_sm = stage_max;
      u32 use_tmout = exec_tmout;
      u8* old_sn = stage_name; // 保存原有 stage_cur, stage_max, stage_name
      /* Be a bit more generous about timeouts when resuming sessions, or when
         trying to calibrate already-added finds. This helps avoid trouble due
         to intermittent latency. */
      if (!from_queue || resuming_fuzz) 
        // 如果from_queue为0（表示case不是来自queue）或者resuming_fuzz为1（表示处于resuming sessions）
        use_tmout = MAX(exec_tmout + CAL_TMOUT_ADD,
                        exec_tmout * CAL_TMOUT_PERC / 100); // 提升 use_tmout 的值
      q->cal_failed++;
      stage_name = "calibration"; // 设置 stage_name
      stage_max  = fast_cal ? 3 : CAL_CYCLES; // 设置 stage_max，新测试用例的校准周期数
      /* Make sure the fork server is up before we do anything, and let's not
         count its spin-up time toward binary calibration. */
      if (dumb_mode != 1 && !no_fork server && !forksrv_pid)
        init_fork server(argv); // 没有运行在dumb_mode，没有禁用fork server，切forksrv_pid为0时，启动fork server
      if (q->exec_cksum) { // 判断是否为新case（如果这个queue不是来自input文件夹）
        memcpy(first_trace, trace_bits, MAP_SIZE);
        hnb = has_new_bits(virgin_bits); 
        if (hnb > new_bits) new_bits = hnb;
      }
      start_us = get_cur_time_us();
      for (stage_cur = 0; stage_cur len);
        fault = run_target(argv, use_tmout);
        /* stop_soon is set by the handler for Ctrl+C. When it's pressed,
           we want to bail out quickly. */
        if (stop_soon || fault != crash_mode) goto abort_calibration;
        if (!dumb_mode && !stage_cur && !count_bytes(trace_bits)) {
          // 如果 calibration stage第一次运行，且不在dumb_mode，共享内存中没有任何路径
          fault = FAULT_NOINST;
          goto abort_calibration;
        }
        cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
        if (q->exec_cksum != cksum) {
          hnb = has_new_bits(virgin_bits);
          if (hnb > new_bits) new_bits = hnb;
          if (q->exec_cksum) { // 不等于exec_cksum，表示第一次运行，或在相同参数下，每次执行，cksum不同，表示是一个路径可变的queue
            u32 i;
            for (i = 0; i exec_cksum = cksum; // q->exec_cksum=0，表示第一次执行queue，则设置计算出来的本次执行的cksum
            memcpy(first_trace, trace_bits, MAP_SIZE);
          }
        }
      }
      stop_us = get_cur_time_us();
      total_cal_us     += stop_us - start_us;  // 保存所有轮次的总执行时间
      total_cal_cycles += stage_max; // 保存总轮次
      /* OK, let's collect some stats about the performance of this test case.
         This is used for fuzzing air time calculations in calculate_score(). */
      q->exec_us     = (stop_us - start_us) / stage_max; // 单次执行时间的平均值
      q->bitmap_size = count_bytes(trace_bits); // 最后一次执行所覆盖的路径数
      q->handicap    = handicap;
      q->cal_failed  = 0;
      total_bitmap_size += q->bitmap_size; // 加上queue所覆盖的路径数
      total_bitmap_entries++;
      update_bitmap_score(q);
      /* If this case didn't result in new output from the instrumentation, tell
         parent. This is a non-critical problem, but something to warn the user
         about. */
      if (!dumb_mode && first_run && !fault && !new_bits) fault = FAULT_NOBITS;
    abort_calibration:
      if (new_bits == 2 && !q->has_new_cov) {
        q->has_new_cov = 1;
        queued_with_cov++;
      }
      /* Mark variable paths. */
      if (var_detected) { // queue是可变路径
        var_byte_count = count_bytes(var_bytes);
        if (!q->var_behavior) {
          mark_as_variable(q);
          queued_variable++;
        }
      }
      // 恢复之前的stage值
      stage_name = old_sn;
      stage_cur  = old_sc;
      stage_max  = old_sm;
      if (!first_run) show_stats();
      return fault;
    }
总结以上过程如下：
  1. 进行参数设置，包括当前阶段 `stage_cur`，阶段名称 `stage_name`，新比特 `new_bit 等初始化;
  2. 参数 `from_queue`，判断case是否在队列中，且是否处于resuming session， 以此设置时间延迟。testcase参数 `q->cal_failed` 加1， 是否校准失败参数加1；
  3. 判断是否已经启动fork server ，调用函数 `init_fork server()` ；
  4. 拷贝 `trace_bits` 到 `first_trace` ，调用 `get_cur_time_us()` 获取开始时间 `start_us`；
  5. 进入loop循环，该loop循环多次执行testcase，循环次数为8次或者3次；
  6. 调用 `write_to_testcase` 将修改后的数据写入文件进行测试。如果 `use_stdin` 被清除，取消旧文件链接并创建一个新文件。否则，缩短`prog_in_fd` ；
  7. 调用 `run_target` 通知fork server可以开始fork并fuzz；
  8. 调用 `hash32` 校验此次运行的 `trace_bits`，检查是否出现新的情况；
  9. 将本次运行的出现 `trace_bits` 哈希和本次 testcase的 `q->exec_cksum`对比。如果发现不同，则调用 `has_new_bits`函数和总表`virgin_bits` 对比；
  10. 判断 `q->exec_cksum` 是否为0，不为0说明不是第一次执行。后面运行如果和前面第一次 `trace_bits` 结果不同，则需要多运行几次；
  11. loop循环结束；
  12. 收集一些关于测试用例性能的统计数据。比如执行时间延迟，校准错误，bitmap大小等等；
  13. 调用 `update_bitmap_score()` 函数对测试用例的每个byte进行排序，用一个 `top_rate[]` 维护最佳入口；
  14. 如果没有从检测中得到 `new_bit`，则告诉父进程，这是一个无关紧要的问题，但是需要提醒用户。 总结：calibratecase函数到此为止，该函数主要用途是init_fork server；将testcase运行多次；用update_bitmap_score进行初始的byte排序。
##### 2.4 init_forkserve 函数
AFL的fork server机制避免了多次执行 `execve()`
函数的多次调用，只需要调用一次然后通过管道发送命令即可。该函数主要用于启动APP和它的fork server。函数整体控制流程图如下：
结合源码梳理一下函数流程：
    EXP_ST void init_fork server(char** argv) {
      static struct itimerval it;
      int st_pipe[2], ctl_pipe[2];
      int status;
      s32 rlen;
      ACTF("Spinning up the fork server...");
      if (pipe(st_pipe) || pipe(ctl_pipe)) PFATAL("pipe() failed"); 
      // 检查 st_pipe 和ctl_pipe，在父子进程间进行管道通信，一个用于传递状态，一个用于传递命令
      forksrv_pid = fork(); 
      // fork进程出一个子进程
      // 如果fork成功，则现在有父子两个进程
      // 此时的父进程为fuzzer，子进程则为目标程序进程，也是将来的fork server