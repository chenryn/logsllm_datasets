the device or application, which can be collected from the
device’s or application’s conﬁguration ﬁle. Taking MQTT as
an example, the key communication arguments are broker
address, MQTT version, IoT platform name, raw password,
secret key of the device or the application if exists, and the
certiﬁcations if exist.
4.3 Message Semantics Extraction
The message semantics extraction module aims to extract the
composition semantics of parameters in a message, which
are of two types. First, a parameter can be a composition
of several terms concatenated with delimiters, e.g., param-
eter Username with value light123/dev1 is composed of
ProjectId and DeviceId. Second, a parameter can be the
encryption of several terms by a certain crypto function, e.g., a
Password with the value of a complex character string can be
the encryption of ProjectId and ExpiredTime by the JWT
function [14]. Identifying the semantics of the second type of
parameters is not trivial, as the value in the trafﬁc does not
have any meaning. To extract these two kinds of semantics, we
provide two alternatives in this module. As shown in Figure 2,
the message semantics extraction module mainly consists of
trafﬁc- and NLP-based semantics extraction. As the semantics
extracted from the real MP trafﬁc reﬂect the actual MP imple-
mentation, we prioritize the trafﬁc-based semantics extraction.
For the parameters whose semantics cannot be identiﬁed from
the MP trafﬁc, we resort to the NLP-based semantics extrac-
tion. Both of these methods output a semantics map, which
maps the parameter values to their corresponding semantics.
4208    30th USENIX Security Symposium
USENIX Association
For example, the pair {light123:ProjectId} means the se-
mantics of the parameter light123 is ProjectId. In the last
step, the two returned semantics maps are merged and fed
to the semantics assignment component, which then replace
the values in a message with the matched semantics from the
semantics map. For parameters having no match in the seman-
tics map, we still need to assign each of them a speciﬁc name
for the following modeling task. Thus, we sequentially assign
them a fake semantics, e.g., V0, V1, V2. Taking the parameter
ClientID as an example, its extracted semantics may look
like (V0,aud,V2,V3) where the aud means audience. Be-
low, we detail the trafﬁc- and NLP-based semantics extraction
process.
For the trafﬁc-based semantics extraction, the parameter
parsing component ﬁrst takes MP trafﬁc as input and decodes
the messages from the MP trafﬁc to extract the values of the
parameters. For some parameter values, their semantics can
be directly inferred from the trafﬁc, e,g., the Payload in a
PUBLISH message may contain the format as key:value or
key=value, and we can directly extract the key as the seman-
tics of the value. Besides, there are also encrypted parameters
whose semantics can only be recovered by identifying the
corresponding crypto function. For common crypto functions,
we ﬁnd that the encrypted values have common patterns, e.g.,
the common pattern for JWT is ey[A − Za − z0 − 9_\\/ +
−]∗\\.[A− Za− z0− 9._\\/ +−]∗). In our implementation,
we provide the patterns of nine common crypto functions
(e.g., JWT function and Base64 encoding). The semantics
extracted from the aforementioned process are also added to
the semantics map.
For the parameters whose semantics cannot be extracted
from the MP trafﬁc, e.g., the ones encrypted by unknown cus-
tomized crypto functions, we propose an NLP-based seman-
tics extraction method. Speciﬁcally, it extracts the semantics
from IoT platform documents, which generally specify the
semantics of parameters.
However, IoT platform documents are usually loosely for-
matted with sentences in different formats, posing challenges
to semantics extraction. In our observation, the documents
mainly include three types of sentences as shown in Figure 3:
(1) structured sentence; (2) unstructured sentence in natural
language; and (3) a mixed type sentence that contains both
structured and unstructured parts.
Based on the above observation, we take the following
steps. The parameter searching component takes IoT platform
documents as input and parses sentences from the documents.
For each parameter whose semantics cannot be extracted from
the MP trafﬁc, this component searches the sentences that con-
tain the parameter. Then, the NLP-based semantics extraction
component divides the sentences into the above three types
and analyzes the three types of sentences one by one. This
component ﬁrst tries to extract semantics from the structured
sentences. If not success, it extracts semantics from the mixed
sentences and ﬁnally the unstructured sentences. The identi-
Figure 3: Example sentences of three types, including the
structured, unstructured, mixed sentences.
ﬁed semantics will also be stored into a similar semantics map
that will be used in the ﬁnal semantics assignment component.
In detail, for structured sentences, they have obvious struc-
ture and symbols that indicate the parameter semantics, which
can be extracted by pattern matching. For unstructured sen-
tences, the idea is to ﬁnd a noun or a noun phrase that has an
equivalence or inclusion relation with the target parameter.
Thus, this module applies the Stanford dependency parser
[44] to identify the equivalence relation and Part-of-Speech
tagger [44] to identify the part of speech of each word in
the sentence. For example, for the unstructured example in
Figure 3, we can identify the target parameter password has
the inclusion relation with the SAStoken, indicated by the
word contain. For mixed sentences, the idea is to ﬁnd the
sentences satisfying two conditions: (1) the subject of the un-
structured part is the target parameter, and (2) the structured
and the unstructured parts are connected by equivalence sym-
bols such as : and =, which indicate they have equivalence
relation. Finally, this component performs pattern matching
on the structured part to extract the semantics. For the mixed
sentence example in Figure 3, MPInspector ﬁrst divides the
sentence into a structured part in blue and an unstructured part
in yellow by the delimiter :. Then MPInspector identiﬁes
that the subject of the unstructured part is composed of the
target parameter SAStoken, and ﬁnally applies the pattern
matching to the structured part to identify the semantics of
SAStoken.
Interaction Logic Extraction
4.4
This module aims to extract the raw state machine of the
MP broker, since it is responsible for processing messages
from clients and is closed-source. The state machine includes
transition messages and transition logic. Transition messages
represent the messages that are used to trigger the transition
from one state to another, consisting of the input message to
the broker and the response message from the broker. This
module adopts active model learning, a framework to con-
struct the state machine of a system by providing inputs and
observing outputs. In MPInspector, the inputs are different
permutations of message sequences sent to the MP broker
USENIX Association
30th USENIX Security Symposium    4209
and the outputs are the relevant response message sequences.
The basic model learning procedure is as follows. First, this
approach adopts membership queries (MQs) to collect the
responses to the inputs, and generates a state machine (also
noted as a hypothesis). Then it performs equivalence queries
(EQs) to seek an input that makes the hypothesis state machine
and the real system have different outputs. This input is also
called a counterexample that distinguishes the inferred state
machine and the real system. If there is no counterexample,
the inferred state machine is equivalent to the real system and
is the ﬁnal output of the interaction logic extraction module.
Otherwise, a new round learning with MQs and EQs will be
performed until there is no counterexample.
As shown in Figure 2, we have three components in this
module: adapter, MQ and EQ. The adapter is designed to
generate different input messages, send input messages to the
broker, collect the response messages from the broker, and
decode the response messages to identify their types. When
generating an input message, the adapter directly uses the pa-
rameter values from the semantics map in Section 4.3. How-
ever, some parameters have dynamic values, e.g., a timestamp,
which need to be generated by referring to their semantics
in the semantics map. In addition, there are some dynamic
parameters that are encrypted, for which the adapter follows
the cryptographic algorithm in the their semantics to gener-
ate their values. Speciﬁcally, the adapter invokes the corre-
sponding pre-installed encryption interface in MPInspector.
For example, for mqttPassword introduced in Figure 3 from
Section 4.3, the adapter invokes the HMAC interface and per-
forms encryption of the timestamp and the raw password to
generate the value of the parameter mqttPassword.
We implement the adapter for MQTT, CoAP, and AMQP,
respectively. Based on the inputs and responses, MQs and
EQs can infer the state machine of the broker.
The adapter in existing model learning frameworks usually
only supports the communication of two parties, which is
not applicable in the IoT context where multiple parties are
usually involved. To tackle this, we extend the adapter by the
following steps: (1) extending the adapter to support sending
all types of messages that can be sent to the broker from all
clients, and (2) monitoring the responses of the broker and all
clients. Also, there are implicit responses from the broker. For
example, in MQTT, the broker may accept the input message
but give no response. In addition, the broker may accidentally
close the connection without sending any response message.
Therefore, we further extend the adapter to monitor the con-
nection state of the broker and map the above two situations to
two responses: EMPTY and CONNECTIONCLOSED, respectively.
Considering there may be many types of messages in the
IoT context, the EQ component of existing model learning
frameworks, e.g., Chow’s W-Method [26], needs to send mes-
sage sequences for all the permutations of the message types
to the broker, leading to a high performance overhead. There-
fore, we design a customized EQ component inspired by the
previous work [29] to avoid useless queries to improve the ef-
ﬁciency. Speciﬁcally, we add a check to see if the connection
has been closed when testing a sequence of input messages.
If so, our learning procedure stops seeking counterexamples
with this particular preﬁx of message sequences, as the fol-
lowing message sequences with this preﬁx will receive the
same response, namely CONNECTIONCLOSED. Thus, it does
not make sense to continue searching for counterexamples
with this preﬁx. Our experiments prove that the customized
EQ component reduces the query time by 34% compared to
Chow’s W-Method.
Figure 4: The learning procedure of active model learning.
Another challenge is that existing active learning models
may be trapped into an endless learning procedure and thus
fails to construct the state machine. For instance, when apply-
ing model learning in the real world, the targeted broker may
produce uncertain responses, e.g., EMPTY response caused by
timeout, due to uncontrolled factors such as environment. The
EQ component may mistakenly take the uncertain response as
a counterexample, which may further cause the same hypoth-
esis to be generated repeatedly. To tackle this, we observe that
the same hypothesis is generated if and only if it is equivalent
to the MP broker. Therefore, we limit the maximum amount
of the same hypothesis that is generated repeatedly to help
terminate the learning procedure, which is shown in Figure 4.
Additionally, we set a time delay to wait for the broker’s re-
sponse for a query, which can mitigate the uncertain response
issue when performing MQs and EQs. The thresholds for the
amount of the same hypothesis and the time delay can both
be speciﬁed in the communication conﬁgurations.
After model learning, a raw state machine is generated
whose transition messages only contain message names, e.g.,
CONNECT/CONNACK. Then, MPInspector adds the message
semantics extracted from Section 4.3 to the transition mes-
sages in the raw state machine. In addition, we check if the
MP implementation adopts SSL/TLS. If so, we insert the
state transition with KEYEXCHANGE{sesson_key} after the
initial state to denote the SSL/TLS mechanism, and add the
SSL/TLS encryption semantics on the transition messages.
Apart from the inferred state machine, some unobserv-
able internal protocol states called validity predicates can
not be extracted by the model learning method and need
to be modeled in Section 4.6 for veriﬁcation. In our study,
a validity predicate describes a constraint that a parameter
should satisfy in a transition, e.g., the client’s signature in
a password parameter should be valid, or the current mes-
4210    30th USENIX Security Symposium
USENIX Association
sage ID should be less than the received message ID. Thus,
MPInspector extracts the validity predicates by utilizing the
adapter to send messages with carefully mutated parameters
to the server and observing if they are accepted or not. Par-
ticularly, MPInspector supports extracting the validity pred-
icates with the Equality and LessThan constraints. Below
are the corresponding mutation strategies. For the parame-
ter with numerical type, MPInspector mutates it by adding
or subtracting a random number to it. For other parameters,
MPInspector changes one bit of their value for mutation.
4.5 Property Generation
The property generation module generates the security prop-
erties that should be veriﬁed on the extracted state ma-
chine. It aims to generate two groups of properties, includ-
ing secrecy properties and authentication properties. The
secrecy properties are for the conﬁdential goal of certain
parameters and the authentication properties are used to
check if certain types of messages are authenticated. The
parameters and messages that should be checked are ﬁrst
concluded from the standard MP speciﬁcations. This ini-
tial set of security properties are also called meta proper-
ties, including the secrecy properties (e.g., Meta_Sec_Set
= {ClietnID, Username, Password,...}) and the au-
thentication properties (e.g., Meta_Auth_Set = {CONNECT,
CONNACK, SUBSCRIBE,...}). Second, we ﬁlter meta prop-
erties, whose targeted messages or parameters do not appear
in the inferred state machine, as not all of the messages and
parameters from the standard speciﬁcation are used in IoT im-
plementations. Finally, we add the extended properties based
on the inferred state machine, as messages of the same type
may have different parameter semantics in an MP implemen-
tation. For example, the CoAP implementation on Aliyun
Cloud adopts two different CON messages with different pa-
rameter semantics for connecting and publishing messages to
the broker, respectively. Thus, we add the parameters from
such different messages to the secrecy property set and such
different messages to the authentication property set. In con-
clusion, the only hard-coded part in the property generation
module is the meta properties from the standard MP speciﬁca-
tions. Note that this hard-code effort is required per MP type
not per MP implementation. We demonstrate the generated
detailed security properties for MQTT, CoAP and AMQP in
Appendix A.
4.6 Formal Code Translation
The formal code translation module aims to translate the
inferred state machine and security properties into Tamarin
code, which can be further analyzed by Tamarin Prover. There
are two components in this module including state machine
translation and security property translation.
The inferred state machine is translated into rules in
Tamarin, where a rule deﬁnes a transition in the state ma-
chine. A rule has a name and three parts, each of which is a
sequence of facts: one for the rule’s left-hand side, one for
the rule’s middle part called action fact, and one for the rule’s
right-hand side. Taking the simpliﬁed transition messages
CONNECT/CONNACK that trigger the broker from state A to state
B as an example, the transition indicates the broker receives a
CONNECT message in state A, which is modeled as two facts in-
cluding the fact In(connect) and the fact State_A_broker.
The above two facts are put into the rule’s left-hand side. The
transition indicates the broker turns into state B and sends out
a CONNACK message, which is modeled as two facts including
the fact State_B_broker and the fact Out(connack). The
above two facts are put into the rule’s right-hand side. The
action facts reason about the behaviours in the transition. For
example, we use Commit(broker, connect) to reason one
of the behaviours of the transition CONNECT/CONNACK. The
rule supports let-binding expressions to specify the parame-
ters in the message along with the detailed semantics, e.g.,
connect = . After that, we have a simpliﬁed rule of
the transition as shown in Listing 1.
We translate the transition messages from the perspectives
of both the broker and the client to completely model an MP
implementation. For example, CONNECT/CONNACK depicts the
transition of the broker that it enters a new state and sends
out a CONNACK message after receiving a CONNECT message.
It also depicts the two transitions of the client: one describes
that the client enters state D from a former state C after sending
a CONNECT message to the broker, and another describes that
the client enters state E from state D after receiving a CONNACK
message from the broker.
r u l e b r o k e r _ r e c v _ c o n n e c t _ s n d _ c o n n c a k :
l e t
connack = 
c o n n e c t = 
I n ( c o n n e c t ) , S t a t e _ A _ b r o k e r
i n [
−−[ C r e a t e ( ’ c o n n e c t ’ , b r o k e r ) ,
]
Commit ( b r o k e r , c l i e n t , c o n n e c t ) ,
Running ( b r o k e r , c l i e n t , connack )
−>[ Out ( connack ) , S t a t e _ B _ b r o k e r ]
]
Listing 1: An example rule in Tamarin code.
Additionally, for the validity predicates extracted from
Section 4.4, MPInspector models them as a kind of ac-
tion fact for the related rule’s middle part. Particularly,
MPInspector adopts the kind of action fact called re-
striction, which is offered by Tamarin. Restrictions spec-
ify constraints that a protocol transition should uphold,
e.g., Equal(x,y) and LessThan(x,y). Since some valid-
ity predicates have the encryption semantics, MPInspector
adds the corresponding encryption function to its action
fact, e.g., Equal(verify(sig,m,pubkey),true), where
verify(sig,m,pubkey) is a predeﬁned function in Tamarin
to verify the signature sig on the received message or pa-
rameter m. This action fact indicates that the verify function
USENIX Association
30th USENIX Security Symposium    4211
equals to the constant true.
When translating the state machine, we ﬁrst implement
the initialization rules based on the provided initial state to
set up the initial parameters that the broker and clients own.
The initialization rule has a sequence of facts that describe
the initialization of parameters in its left-hand side and a
sequence of facts that describe the initial state in its right-
hand side. Then, if the state machine considers the session
key negotiation, we hard-code a general rule to model the
transition, which is a simpliﬁed SSL/TLS key negotiation
modeling. Finally, we follow the above translation principle
to translate the transition messages into rules.
After state machine translation, the security properties are
translated into lemmas, which are ﬁrst-order logic formulas
over time points and action facts, based on the standard secu-
rity property templates speciﬁed from Tamarin Prover docu-
mentations [17]. Particularly, for each authentication property,
MPInspector applies four types of authentication lemmas
based on Lowe’s taxonomy of authentication goals [42] to
make a ﬁne-grained analysis. Lowe deﬁned four kinds of
authentication goals including aliveness, weak agreement,
non-injective agreement and injective agreement.
Based on the two threat models from Section 3, the for-
mal code translation generates two Tamarin codes, on which
Tamarin Prover will perform formal veriﬁcation, respectively.
In the neighbor scenario, the attacker sniffs the trafﬁc and
gets to know the session key. Thus, we add a fact to the right-
hand side of the session key negotiation rule to indicate that
the session key is leaked. In the tenant scenario, the attacker
knows the initial parameters that the client owns in the initial
state without snifﬁng the trafﬁc. Thus, we add a fact to the
right-hand side of the initial rules to indicate that the initial
parameters are leaked.
4.7 Formal Veriﬁcation
The formal veriﬁcation module aims to validate the lemmas
translated from the security properties on the rules translated
from the state machine. In this module, we apply Tamarin
Prover, an off-the-shelf tool for property veriﬁcation. How-
ever, in the fully automatic mode of Tamarin, not all lem-