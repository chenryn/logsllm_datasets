Downgrade to Weaker DS Digest
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker DS Digest
bank.ing
DNSKEY: bank.ing
8
A: ns.bank.ing
1.2.3.4
ing
DNSKEY: ing
8
8
DS: bank.ing
1 → 8 2 → 8
Preconditions
➢ two DS records in parent zone
➢ one stronger digest, one weaker
➢ both supported by the resolver
➢ one DNSKEY in victim zone matching both DS digests
Assumption
➢ attacker can break the weaker digest
Note
➢ as outlined in RFC 4509 for SHA-1/SHA-256 (1 and 2)
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker DS Digest
bank.ing
DNSKEY: bank.ing
8
A: ns.bank.ing
6.6.6.6
ing
DNSKEY: ing
8
8
DS: bank.ing
1 → 8 2 → 8
Procedure
➢ attacker forges DNSKEY for the weaker algorithm
➢ replaces authentic DNSKEY and all its signatures
➢ spoofs target data
Observations
➢ stronger digest does not match the DNSKEY
➢ path via DS with stronger digest becomes invalid
Will the resolver fall back to the validation path via the 
weaker DS record?
8
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker DS Digest
Many Vulnerable Resolvers
Lab
➢ only PowerDNS enforces strongest possible DS
➢ BIND9 and Knot Resolver enforce stronger-than-SHA1 DS
Popular Open Resolvers
➢ only Google and CZ.NIC enforce stronger-than-SHA1 DS
Fallback to
Open Resolvers
Lab
Popular
Any weaker DS
93%
8/9
8/8
SHA-1 DS
24%
6/9
6/8
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker Signature
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker Signature
Preconditions
➢ zone signed with two algorithms
➢ one weaker, one stronger
➢ both supported by the resolver
➢ e.g. typical zone migrating to a new algorithm
Assumption
➢ attacker can forge zone data for the weaker one
bank.ing
DNSKEY: bank.ing
5
13
A: ns.bank.ing
1.2.3.4
13
5
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker Signature
Procedure
➢ attacker just places spoofed zone data in the DNS 
response
Observations
➢ Signatures of the stronger key become invalid.
➢ optional attacker measure: strip them off
Will the resolver accept the weaker signatures, even if 
stronger ones should be present and valid?
bank.ing
5
13
A: ns.bank.ing
6.6.6.6
5
DNSKEY: bank.ing
X
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker Signature
RFC 5702 on Algorithm Presence (DS → DNSKEY → RRSIGS on all zone data)
“Since each RRSet MUST be signed with each algorithm present in the
DNSKEY RRSet at the zone apex (see Section 2.2 of [RFC4035]), a
malicious party cannot filter out the RSA/SHA-2 RRSIG and force the
validator to use the RSA/SHA-1 signature if both are present in the
zone.  This should provide resilience against algorithm downgrade
attacks, if the validator supports RSA/SHA-2.”
So… We are secure?
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade to Weaker Signature
Affected Resolvers
➢ Turns out… all investigated resolvers fall back to weaker RRSIGS.
➢ even to SHA-1-based ones
RFC 6840 on Algorithm Presence (DS → DNSKEY → RRSIGS on all zone data)
“This requirement applies to servers, not validators.  Validators
SHOULD accept any single valid path.
They SHOULD NOT insist that all
algorithms signaled in the DS RRset work, and they MUST NOT insist
that all algorithms signaled in the DNSKEY RRset work.”
➢ facilitates algorithm updates of very large zones
➢ but bites us back while we are getting rid of SHA-1. Bad Luck 
#BHUSA @BlackHatEvents
Information Classification: General
Review: Attacks to Weaken DNSSEC
Countermeasures against Downgrading to Weaker DS
➢ require the strongest present DS digest to be used for construction of the validation path
➢ especially if the weaker one is SHA-1
Countermeasures against Downgrading to Weaker Signature
➢ we can essentially just hope zones migrate away fast enough
➢ insisting on RRSIGs of the strongest algorithm from DNSKEY risks disconnecting secure domains
➢ against attacker who cannot strip off records
➢ insist that the strongest present algorithm signatures work
#BHUSA @BlackHatEvents
Information Classification: General
Agenda
➢ DNS(SEC) Refresher
➢ DNSSEC Downgrade Attacks
➢ Attacks to Weaken Security
➢ Attacks to Break Security
➢ Recommendations
#BHUSA @BlackHatEvents
Information Classification: General
Attacks to Break Security
Motivation
➢ breaking a “weaker” algorithm is still quite a bar to jump
➢ even SHA-1 is not quite there, yet
DNSSEC Downgrade Attacks to Break Security
➢ we found ways around breaking crypto
➢ in effect, roughly comparable to Downgrade to NULL / SSL Stripping
➢ exploit the validation logic that assigns security states to DNS data
#BHUSA @BlackHatEvents
Information Classification: General
DNS Record Security States
Secure
➢ The full chain of trust is proven to be authentic.
➢ response to client carries records in question and the RRSIG(s) covering them
➢ AD message flag set, but effectively ignored by most clients
Bogus
➢ no valid chain of trust could be constructed, e.g. because
➢ signatures failed to validate
➢ DNSSEC records missing
➢ SERVFAIL error response to client
#BHUSA @BlackHatEvents
Information Classification: General
DNS Record Security States
Indeterminate
➢ not too relevant here
➢ assigned to infrastructure data during referrals (NS and A of NS)
➢ or in case of missing trust anchors (weird PKI entry)
Insecure
➢ provably not secured in a way the resolver can validate
➢ e.g. by authenticated proof that no DS record exists at some point in the DNS hierarchy
➢ authenticated DS records with unsupported digest types or signature algorithms “do not exist”
➢ response to client carries records in question, without AD flag
The next attacks trick the resolver into marking records Insecure.
#BHUSA @BlackHatEvents
Information Classification: General
Rewriting RRSIG Algorithm Numbers
#BHUSA @BlackHatEvents
Information Classification: General
Rewriting RRSIG Algorithm Numbers
Preconditions
➢ just any properly protected DNSSEC zone
➢ we tested for single-algorithm zones
bank.ing
DNSKEY: bank.ing
13
A: ns.bank.ing
1.2.3.4
13
#BHUSA @BlackHatEvents
Information Classification: General
Rewriting RRSIG Algorithm Numbers
Procedure
➢ attacker rewrites signature algorithm number
➢ to one the resolver does not support
Note
➢ chain of trust broken at the last link
Vulnerable Resolvers
➢ Google Public DNS
➢ reported and fixed
bank.ing
DNSKEY: bank.ing
13
A: ns.bank.ing
6.6.6.6
16
#BHUSA @BlackHatEvents
Information Classification: General
Downgrade via Complex Chain of Trust
➢ Let’s see what can go wrong when things get experimental.
Situation
➢ a zone operator adds a freshly standardized algorithm
➢ which is not supported by many resolvers yet
➢ or uses a private algorithm in addition to a non-private one
#BHUSA @BlackHatEvents
Information Classification: General
Stripping off Supported RRSIGs
#BHUSA @BlackHatEvents
Information Classification: General
Stripping Off Supported RRSIGs
Preconditions
➢ the zone is signed with two different algorithms
➢ one supported by the resolver
➢ one unsupported (here: 15)
➢ DS records at the parent at least for the supported 
one
Note
➢ DNSKEYs of both algorithms and their RRSIGs are 
present
bank.ing
DNSKEY: bank.ing
8
15
A: ns.bank.ing
1.2.3.4
15
8
#BHUSA @BlackHatEvents
Information Classification: General
Stripping Off Supported RRSIGs
bank.ing
DNSKEY: bank.ing
8
15
A: ns.bank.ing
6.6.6.6
15
Procedure
➢ the attacker drops the supported RRSIG records
➢ from DNS messages to the resolver
➢ leaving only unsupported algorithms
Note
➢ The RRSIG of Algorithm 8 should be present.
X
#BHUSA @BlackHatEvents
Information Classification: General
Stripping Off Supported RRSIGs
Vulnerable Resolvers
➢ none of the resolvers in our lab
➢ 2 Popular Resolver Services: Cloudflare and Google
92.14%
7.86%
Vulnerable Open Resolvers
Unsusceptible
Vulnerable
#BHUSA @BlackHatEvents
Information Classification: General
Stripping off Supported DNSKEYs
#BHUSA @BlackHatEvents
Information Classification: General
Stripping off Supported DNSKEYs
bank.ing
8
15
A: ns.bank.ing
1.2.3.4
ing
DNSKEY: ing
8
8
DS: bank.ing
2 → 8 2 → 15
15
8
Preconditions
➢ zone is signed with two different algorithms
➢ one supported by the resolver
➢ one unsupported (here: 15)
➢ (at least) one DNSKEY for each
➢ DS records for both at the parent
Note
➢ DNSKEYs of both algorithms and their RRSIGs are prsent
DNSKEY: bank.ing
#BHUSA @BlackHatEvents
Information Classification: General
Stripping off Supported DNSKEYs
bank.ing
DNSKEY: bank.ing
X
15
A: ns.bank.ing
6.6.6.6
ing
DNSKEY: ing
8
8
DS: bank.ing
2 → 8 2 → 15
15
X
Procedure
➢ the attacker drops the supported DNSKEY
➢ and all its signatures
➢ from any DNS messages to the resolver
➢ leaving only unsupported algorithms
Note
➢ DNSKEY for algorithm 8 should be present
➢ RRSIGs for algorithm 8 should be present
➢ stripping off the signatures not strictly necessary
#BHUSA @BlackHatEvents
Information Classification: General
Stripping off Supported DNSKEYs
Vulnerable Resolvers
➢ 1 Popular Open Resolver (OpenDNS)
➢ Windows Server Recursive DNS (all tested versions)
94.02%
5.58%
Vulnerable Open Resolvers
Unsusceptible
Vulnerable
#BHUSA @BlackHatEvents
Information Classification: General
Review: Attacks to Break Security
Countermeasures
➢ when considering algorithms, resolvers should decide “insecure” solely based on the DS records
➢ insist on presence of a least one supported algorithm according to specification
supported DS → supported DNSKEY → supported RRSIGs on all zone data
#BHUSA @BlackHatEvents
Information Classification: General
Agenda
➢ DNS(SEC) Refresher
➢ DNSSEC Downgrade Attacks
➢ Attacks to Weaken Security
➢ Attacks to Break Security
➢ Recommendations
#BHUSA @BlackHatEvents
Information Classification: General
Recommendations
Resolver Operators and Developers
➢ require strongest present DS digest to work for validation
➢ only consider DS records for deciding to mark data insecure because of unsupported algorithms
Zone Operators
➢ move away from SHA-1 ASAP
➢ adding additional signatures of stronger algorithms does not increase security
➢ can even level security, if those are not supported by vulnerable resolvers
#BHUSA @BlackHatEvents
Information Classification: General
Thank you for your attention!
Contact: PI:EMAIL