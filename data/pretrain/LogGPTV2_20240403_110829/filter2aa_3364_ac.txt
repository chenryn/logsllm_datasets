### Analysis of Malicious and Benign JavaScript Samples

**Sample Data:**
- **Chow #1 (8x)**
- **Chow #2 (8x)**
- **Chow #3 (8x)**
- **Chow #4 (8x)**
- **Websites:**
  - myspace.com
  - fastclick.net
  - evite.com
  - uchmusic.com
  - photofile.ru
  - youtube.com
  - htcatalog.com
  - ore.yahoo.net
  - aryclinton.com

**Function Calls:**
- object_instance
- element_instance
- escape
- eval
- string_instance/50
- document_write

### Comparison of Malicious and Benign JavaScript Samples

There are clear differences between the malicious JavaScript samples and the benign JavaScripts collected during the MySpace crawl. The "monkey chow" statistics were scaled by a factor of 8. We anticipated a difference in the scales of function call counts between the malicious and benign samples. The four malicious samples were short script fragments, while the benign samples tended to be large, feature-rich scripts. Larger scripts naturally have higher function call counts due to their increased lines of code.

Benign scripts make significantly more use of the `document.write()` method, whereas malicious scripts more frequently instantiate strings. Our small sample of malicious scripts also instantiated more objects than the benign samples. Additionally, malicious scripts tended to programmatically create DOM elements more often than benign scripts. The `eval()` function is more common in benign scripts compared to our sample of malicious scripts.

### Caffeine Monkey at Work

To illustrate the utility of the Caffeine Monkey engine, we will analyze a sample of obfuscated JavaScript found in the wild. This sample is not truly destructive but provides a useful overview of the time-consuming, error-prone, and potentially dangerous process of manual human analysis.

#### Example Script Analysis

The following script can appear intimidating at first glance. Considerable manual analysis would be required to determine its functionality. The function `I()` is defined with two arguments, `mk` and `G`. It performs bit-shifting and substitution before assigning the result of a call to `String.fromCharCode()` to the variable `TB`. The entire mess is then passed to the `eval()` function.

```javascript
function I(mK, G) {
    if (!G) {
        G = 'Ba,%7(r_)`m?dPSn=3J/@TUc0f:6uMhk;wyHZEs-^O1N{W#XtKq4F&xV+jbRAi9g';
    }
    var R;
    var TB = '';
    for (var e = 0; e < mK.length; e++) {
        R = G.indexOf(mK.charAt(e));
        if (R == -1) {
            R = 0;
        } else {
            R += 1;
        }
        TB += String.fromCharCode((R & 4278190080) >> 24, (R & 16711680) >> 16, (R & 65280) >> 8, R & 255);
    }
    eval(TB.substring(0, TB.length - (arguments.callee.toString().replace(/\s/g, '').length - 537)));
}
I('friHMU&E6-=#MV`OMr@^`4K/=&``@(=;/7(S3&Ta3F@i)ZOwMs(40V`Ou_=y)(PJ=4Fy:_3Fu%^X?VMVMqjOM_Ob6V=#0xdXuV3j6r@XnV`EfHF-mx3X0VTWfUjF?-`EfsTqusTqmquynHtX`q{-uxPq:caFnyuOSqB;),B;),B;),Bm),B;');
```

This script ultimately boils down to a single function call:

```javascript
eval("document.write('<script src=\"http://example.com/malicious.js\"></script>');");
```

Requesting this URI returns an even more obfuscated piece of JavaScript. Decoding this sample presents a challenge to both novice analysts and experienced ones. Automating the deobfuscation process allows human analysts to examine evasion techniques used by attackers and can be leveraged in heuristic-based detection systems. Low-interaction client honeypots can use the Caffeine Monkey engine to rapidly analyze large collections of JavaScript. Using the GNU toolchain philosophy, the engine can be easily integrated with other utilities to automate the analyst's workflow.

### Caffeine Monkey JavaScript Engine

We developed the Caffeine Monkey engine using the Mozilla SpiderMonkey (JavaScript-C) Engine, an embeddable open-source JavaScript engine implemented in C. The initial code base provided a rudimentary interpreter and was easily extensible. We internally hooked functions likely to be used in obfuscation and added runtime logging output. By hooking into the execution path at the interpreter level, we avoided obfuscation and logged the actual string passed to `eval()` and where in the script's execution the call was made.

We also hooked the string concatenation method, allowing us to log the order and timing of string concatenations during execution. This feature is useful for script fingerprinting, as particular obfuscation tools tend to use similar methods each time they run.

After instrumenting these basic functions, we produced an informative log that reduced the obfuscation example to a few readable lines. For disclosure, the example sets a known spyware cookie in the browser and redirects it to a niche online dating site.

A full implementation of Document Object Model (DOM) logging is in development. Documentation and source code for our tools will be made available. The example demonstrates that an automated analysis tool working at the interpreter level can increase efficiency when analyzing scripts using common obfuscation and evasion techniques.

### Directions for Future Research

There are many areas for improvement and extension of these tools. The core engine could be used in an application proxy setting to remove or flag potentially dangerous JavaScript. With further optimization, Caffeine Monkey and its analytical results could be integrated into Network Intrusion Detection or Prevention Systems. The tool can also be used as a command-line utility by attackers testing their obfuscation schemes or by security analysts working to reverse the efforts of attackers.

### References

- Mozilla SpiderMonkey (JavaScript-C) Engine: [http://www.mozilla.org/js/spidermonkey/](http://www.mozilla.org/js/spidermonkey/)
- Seifert, C., Welch, I., and Komisarczuk, P., “Taxonomy of Honeypots”, Victoria University of Wellington, Wellington, 2006. [http://www.mcs.vuw.ac.nz/comp/Publications/index-byyear-06.html](http://www.mcs.vuw.ac.nz/comp/Publications/index-byyear-06.html)
- Heritrix web crawler: [http://crawler.archive.org/](http://crawler.archive.org/)
- Baker, N., “Archiving Websites”, HOWTO, University of Michigan, School of Information, February 2005. [http://www.si.umich.edu/mirror/how_to/](http://www.si.umich.edu/mirror/how_to/)
- Japanese language site discussing malicious JavaScript samples: [http://bbs.blueidea.com/thread-2740516-1-5.html](http://bbs.blueidea.com/thread-2740516-1-5.html)
- The Strider HoneyMonkey Project: [http://research.microsoft.com/honeymonkey/](http://research.microsoft.com/honeymonkey/)
- MITRE Honeyclient Project: [http://www.honeyclient.org/trac](http://www.honeyclient.org/trac)
- Wang, K., “Using Honeyclients to Detect New Attacks”, ToorCon 2005. [http://www.synacklabs.net/honeyclient/Wang-Honeyclient-ToorCon2005.pdf](http://www.synacklabs.net/honeyclient/Wang-Honeyclient-ToorCon2005.pdf)
- HoneyC – The Low-Interaction Client Honeypot / Honeyclient: [http://honeyc.sourceforge.net/](http://honeyc.sourceforge.net/)
- Caswell, B. and HD Moore, “Thermoptic Camouflage – Total IDS Evasion”, Black Hat USA 2006. [http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Caswell.pdf](http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Caswell.pdf)
- ECMAScript Specification (ECMA-262): [http://www.ecma-international.org/publications/standards/Ecma-262.htm](http://www.ecma-international.org/publications/standards/Ecma-262.htm)
- Month of Browser Bugs: [http://browserfun.blogspot.com/](http://browserfun.blogspot.com/)
- eVade O’ Matic Module for Metasploit: [http://blog.info-pull.com/2007/01/update-17th-october-2006-aviv-posted.html](http://blog.info-pull.com/2007/01/update-17th-october-2006-aviv-posted.html)