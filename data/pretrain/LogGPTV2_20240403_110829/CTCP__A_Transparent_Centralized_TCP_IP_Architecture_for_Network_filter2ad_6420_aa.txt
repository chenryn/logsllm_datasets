title:CTCP: A Transparent Centralized TCP/IP Architecture for Network
Security
author:Fu-Hau Hsu and
Tzi-cker Chiueh
CTCP: A Transparent Centralized TCP/IP Architecture for Network Security
Fu-Hau Hsu
Tzi-cker Chiueh
Computer Science Department
State University of New York at Stony Brook
Stony Brook, NY 11794-4400
Email: (cid:0)fhsu, chiueh(cid:1)@cs.sunysb.edu
Abstract
Many network security problems can be solved in a cen-
tralized TCP (CTCP) architecture, in which an organiza-
tion’s edge router transparently proxies every TCP con-
nection between an internal host and an external host on
the Internet. This paper describes the design, implemen-
tation, and evaluation of a CTCP router prototype that is
built on the Linux kernel. By redirecting all packets target-
ing at non-existent or non-open-to-public ports to a CTCP
socket which pretends to be the original receivers, CTCP
could conﬁrm the real identiﬁcation of the packet sources,
collect suspicious trafﬁc from them, and make an illusion
that the scanned target ports are all open, thus renders
port scanning an useless effort. Under CTCP architecture,
external hosts only interacts with a secure CTCP router;
therefore, any OS ﬁngerprinting attempt and DoS/DDoS
attack targeting at TCP/IP implementation bugs could be
thwarted. Moreover, By further checking trafﬁc originat-
ing from conﬁrmed scanners, the CTCP router can ac-
tually identify buffer overﬂow attack trafﬁc. Finally, the
CTCP router solves the TCP connection hijacking problem
by introducing an additional check on the sequence number
ﬁled of incoming packets. Despite providing a rich variety
of protection, the CTCP architecture does not incur much
overhead. On a 1.1GHz Pentium-3 machine with gigabit
Ethernet interfaces, the throughput of the CTCP router is
420.3 Mbits/sec, whereas the throughput of a generic Linux
router on the same hardware is only 409.1 Mbits/sec.
1. Introduction
Traditionally the TCP/IP stack(cid:0) is implemented at each
This paper advocates a centralized TCP/IP
end host.
(cid:0)We use the term TCP/IP stack to refer to the entire Internet protocol
suite, including UDP and ICMP.
(CTCP) architecture in which an organization’s edge router
transparently splits each TCP connection between an inter-
nal host and an external host into two TCP connections, one
between the internal host and itself, and the other between
itself and the remote host. As a result, the only TCP/IP stack
that remote hosts get to interact with is the one on the edge
router (called CTCP router hereafter) and many network se-
curity problems can be easily solved in this architecture.
Many denial of service attacks [39] exploit implementa-
tion bugs in the TCP/IP stack or weaknesses in the TCP/IP
speciﬁcation. For example, the Ping of Death attack cre-
ates an IP packet that exceeds the maximum IP packet size
allowed according to the IP protocol speciﬁcation (65,536
bytes), and sends it to the victims, which may crash, hang,
or reboot when they receive such a packet. The Teardrop
attack sends a series of IP fragments with overlapped off-
set ﬁelds to the victims, which may crash, hang, or re-
boot when trying to reassemble them. Weaknesses in the
TCP/IP speciﬁcation leave it open to SYN ﬂood attacks.
The Smurf attack is a brute-force attack targeted at a feature
in the IP speciﬁcation known as direct broadcast addressing.
Under the CTCP architecture, as long as the TCP/IP stack
of an organization’s CTCP router is correctly implemented,
none of the above DOS attacks are possible with its internal
hosts. In other words, CTCP greatly simpliﬁes the process
of “patching” TCP/IP stack implementation.
Many network attacks start with OS ﬁngerprinting and
port scanning to ﬁrst identify the OS type and the set of
services in a remote host, and then determine the proper at-
tack strategy. Both OS ﬁngerprinting and port scanning are
typically based on reactions of a sequence of probe pack-
ets. Therefore, if these probe packets can be detected, it
is possible to identify not only the attacking hosts but also
the packets used in the attack. Under the CTCP architec-
ture, it is impossible to ﬁngerprint the OS type of internal
hosts because it is the CTCP router that responds to probe
packets. Moreover, the CTCP router is in a better position
to detect port scanning activities because it examines the
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
source/destination address/port number ﬁelds in TCP pack-
ets. Finally, the CTCP router provides an effective plat-
form for applying honey-pot technique [15] to capture at-
tack packets.
A network intrusion detection system (NIDS) compares
packets against a signature database to identify potential at-
tack packets. There are well known techniques [21, 22] to
invade the detection of such systems. Basically these in-
vasion methods exploit differences in interpreting certain
parts of an incoming packet between the TCP/IP stack on an
NIDS and that on an end host, for example, the TTL ﬁeld
and overlapped IP fragments. Under the CTCP architec-
ture, none of these invasion techniques work because there
is only one TCP/IP stack to the outside world, and the NIDS
is based on its interpretation of the incoming packets.
In addition to security beneﬁts, the CTCP architecture
also offers several performance advantages. First, because
all TCP connections with external hosts terminate at the
CTCP router, it can manage their congestion control win-
dows by taking into account the bandwidth sharing effect
among connections that go to the same remote subnet [10].
One immediate beneﬁt is that a new TCP connection’s con-
gestion window does not have to grow from scratch, but
from some larger value that past history suggests is appro-
priate. Second, because the CTCP router performs connec-
tion splicing for every TCP ﬂow, it provides an additional
level of indirection that is useful in such applications as
server load balancing and fault tolerance.
This paper presents the design,
implementation, and
evaluation of a fully operational CTCP router that is built
on the Linux kernel. To demonstrate the usefulness of this
CTCP router, we show how it can be used to prevent OS ﬁn-
gerprinting, to detect port scanning, to identify buffer over-
ﬂow attack packets, and to stop TCP connection hijacking
attacks. In addition, the throughput of the CTCP router pro-
totype is actually slightly higher than that of a generic Linux
router on the same hardware. This shows that it is feasible
to implement the CTCP architecture on a gigabit/sec router,
which should be more than enough for most enterprises’
connection to the Internet.
This paper is organized as follows. Section 2 describes
the speciﬁc security threats that the CTCP router prototype
addresses in this paper. Section 3 details the system archi-
tecture of the CTCP router, and the functions of its com-
ponents. Section 4 presents the results of testing the ef-
fectiveness and performance of the CTCP router prototype.
Section 5 reviews previous efforts to deal with the secu-
rity issues that the CTCP architecture addresses. Section 6
concludes this paper with a summary of the major contribu-
tions, and a brief outline of on-going work.
2. Motivations
In this section, we discuss the main motivations behind
the CTCP architecture, in particular, prevention of OS ﬁn-
gerprinting and port scanning, centralized implementation
of TCP/IP stack, and buffer overﬂow attack detection.
2.1. Reconnaissance Deterrence
A typical network attack proceeds in the following
stages. First, the attacker scans the Internet to determine
the operating system and the services on each host that re-
sponds to the scan packets. Then, the attacker attempts to
compromise a remote host based on vulnerabilities known
to exist on the host’s associated OS/services combination.
If any of the attacks succeeds, the attacker then installs the
attack program on the victim host to include it in the future
attack. Because the process of “recruiting” new attack hosts
is completely automated, this worm-like network attack can
increase the number of attack hosts exponentially and even-
tually covers most of the vulnerable hosts on Internet within
a few minutes to an hour [26].
TCP and UDP ports are a host’s communication chan-
nels with other hosts. A port is called open when there is a
program listening on it. Through an open port a TCP/UDP-
based application program could exchange data with other
software. To identify the set of open ports on a remote host,
a port scanning program can simply connect to all possible
ports, and determine the set of ports on which the host ac-
tually listens. According to the TCP/IP protocol, an open
port behaves differently than a close port. For example an
open port must reply a SYN packet with a SYN/ACK packet
and a close TCP port must reply a SYN packet with a RST
packet. Hence, by observing a remote host’s responses to
carefully crafted packets, a port scanner can deduce whether
a port is open on the host. Based on this principle, a wide
variety of port scanning tools [1, 2] have been developed.
The TCP/IP protocol speciﬁcation leaves some room for
implementation ﬂexibility, such as the initial sequence num-
ber, the initial window size, the DF bit, the ToS setting, how
two fragments with overlapped offsets should be handled,
etc. The TCP/IP stack implementations of different oper-
ating systems can freely choose how to exploit this ﬂexi-
bility. As a result, it is possible for an OS ﬁngerprinting
tool to identify an operating system based on its responses
to a sequence of probe packets. The collective response of
an operating system to this packet sequence constitutes its
ﬁngerprint. For example, when a TCP/IP stack receives a
packet that is neither SYN nor ACK and is destined to a
non-open port, the correct response according to RFC 793
is not to respond; however, many implementations such as
MS Windows, BSDI, CISCO, HP/UX send back a RESET
packet. Some OS ﬁngerprinting tools are active in that they
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
send probe packets to target machines to collect informa-
tion. Nmap [3] and Xprob [4] are most popular active ﬁn-
gerprinting tools. Others are passive in that they just ob-
serve the trafﬁc associated with the monitored host to col-
lect information. The value of the Time to Live (TTL) ﬁeld,
the initial window size in the TCP header, and the values of
DF bit and TOS ﬁeld in the IP header are the common mon-
itor targets. p0f [5] and siphon [6] fall into this category.
One way to defeat the automated attack scheme used by
worms is to stop them at the reconnaissance phase, i.e., pre-
venting them from knowing the OS type and network ser-
vices on the innocent hosts. The centralized CTCP archi-
tecture effectively hides the OS type information of inter-
nal hosts because OS ﬁngerprinting tools can only see the
TCP/IP stack of an organization’s CTCP router.
2.2. Detection of Buffer Overﬂow Attack
Buffer overﬂow attack [11, 12] is one of the most sig-
niﬁcant security threats to the Internet today. It overwrites
some control-sensitive data structure (a return address or
function pointer) of a victim application so that the appli-
cation’s control is re-directed to an injected code or a libc
function [13] ( return-to-libc attack). Various approaches
have been proposed to solve this problem. However, most
if not all of them involve modiﬁcations to the applications
or operating systems on the end hosts. As a result, their
adoption in practice has been rather limited.
The key to a successful buffer overﬂow attack is to suc-
cessfully overwrite the target control-sensitive data struc-
ture in the victim application. However, the exact address
of the target control-sensitive data structure may vary from
instance to instance even for the same source code for the
following reasons:
(cid:0) Environment variables and command line arguments
(including the name of the command) will inﬂuence
the location of the main() function’s stack frame, hence
the stack frames of all subsequently called functions.
(cid:0) Due to the alignment requirement, a compiler doesn’t
necessarily allocate memory for variables according to
the order they appear in the source code.
(cid:0) For the same code, different compilers used by differ-
ent OSes could create different memory layout for the
same set of variables. In other words, for a C program,
the memory layout of a set of variables created by a
Linux host could be different from the one created by
a Solaris host.
(cid:0) Address obfuscation [14] compilers insert byte strings
into memory areas for variables to further change the
memory layout. The length of the inserted byte string
is randomly generated at compile time or at run time.
Hence, to maximize the success rate of a buffer overﬂow
attack, attackers typically repeat the string used to overwrite
the target control-sensitive data structure multiple times in
the attack packets. In the case of return-into-libc attacks, the
repeating string consists of the entry point of the libc func-
tion, the previous frame pointer, and the input arguments. In
other cases, the repeating string consists of the entry point
of the injected code only. For the 6 exploit strings [8, 9] we
checked (LFTP, ATPHTTPd, in.telnetd, samba, INND, and
TCPdump) the repeating times are all above 10.
2.3. Stopping TCP Connection Hijacking
Sequence number implicitly plays an authentication role
in TCP connections. When a TCP packet whose sequence
number is outside the associated socket’s receiving window
is received, it is dropped and an ACK packet that includes
the expected receiving window information is sent back. On
the other hand, if an incoming TCP packet is accepted by
a socket, then the socket’s receiving window changes ac-
cordingly. Therefore, if an attacker can correctly guess the
sequence number of an on-going TCP connection, she can
both send forged data to and change the receiving window
of an end point of this connection. For a TCP connection
between two hosts,  (cid:0) and  (cid:1), sending forged packets to
 (cid:0) could cause it to ignore data sent by  (cid:1); moreover, if
 (cid:0) sends any reply to the forged packets, both the hijacker
and  (cid:1) will receive it. The above two results will create
abnormal and detectable behavior at  (cid:1) whose most likely
response is to close its socket. The close will not close  (cid:0)’s
socket immediately, because  (cid:1)’s packets will be dropped
by  (cid:0). After  (cid:1)’s close, any packet of the hijacked con-
nection from  (cid:0) will result in  (cid:1)’s sending back a RST
packet which has correct sequence number and will close
 (cid:0)’s socket.
However, if the hijacker changes both hosts’ receiving
windows at the same time and temporarily suppresses their
responses to the forged packets before the hijacking is ﬁn-