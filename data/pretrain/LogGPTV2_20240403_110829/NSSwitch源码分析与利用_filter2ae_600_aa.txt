# NSSwitch源码分析与利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
我们以getwuid()为例子探究glibc中是怎么实现NSS机制的, 其他函数都是同一个模板只是参数不同罢了
看本文之前最好先了解下NSS是什么, 有什么用
## nsswitch.conf文件
  * 格式: `Info: method[[action]] [method[[action]]...]`
  * 该nsswitch.conf文件本质上是一个包含 16 种类型的信息以及getXXbyYY() 例程搜索该信息的来源的列表。16 类信息（不一定按此顺序）如下所示。
> aliases
>
> bootparams
>
> ethers
>
> group
>
> hosts
>
> ipnodes
>
> netgroup
>
> netmasks
>
> networks
>
> passwd (includes shadow information)
>
> protocols
>
> publickey
>
> rpc
>
> services
>
> automount
>
> sendmailvars
  * 下表提供了可在上述信息类型的开关文件中列出的源种类的说明。
> files: 保存在/etc目录下的文件, eg: /etc/passwd
>
> nisplus: 一个NIS+表, 例如host表
>
> nis: 一个NIS映射, 例如host 映射
>
> compat: 兼容可以被password和group信息使用以支持老式的/etc/passwd, /etc/shadow和/etc/group文件
>
> dns: 可用于指定从 DNS 获取主机信息
>
> ldap: 可用于指定从 LDAP 目录中获取的条目
  * 以下面这个为例子 
    * nsswitch.conf每一行可以当做是一个数据库. 例如passwd表示: 所有passwd的查询都要遵循这种查找方式
    * 冒号后面的称为数据来源或者服务, 规定了查找方法的规范. 例如: files ldap表示先通过本地文件搜索, 如狗没有的话就通过ldap这一网络协议搜索
    * 对于每个可用的服务SERVICE, 都必须有对应的模块`/lib/libnss_SERVICE.so.1`
    * 并且每个模块中都有同一个数据查询接口, 只是各自的实现不同.
    * 这样查询时就可以很方便的根据nsswitch.conf中指定的服务加载对应的模块, 然后调用模块中的查询函数处理请求
> # /etc/nsswitch.conf  
>  passwd: files ldap
## 函数简介
  * 作用: 获取password文件条目
    #include 
    #include 
    struct passwd *getpwnam(const char *name);
    struct passwd *getpwuid(uid_t uid);
    int getpwnam_r(const char *name, struct passwd *pwd,
                char *buf, size_t buflen, struct passwd **result);
    int getpwuid_r(uid_t uid, struct passwd *pwd,
                char *buf, size_t buflen, struct passwd **result);
  * getpwnam()函数返回一个指针，指向包含在密码数据库中的记录（例如，本地密码文件的断开的字段的结构/ etc / passwd中，NIS和LDAP）相匹配的用户名的名称。
  * 所述getpwuid（）函数返回一个指针，指向包含在该用户ID相匹配的口令的数据库的记录的断开的字段的结构的UID。
  * 所述的passwd结构定义在如下：
    struct passwd {
        char *pw_name; /* 用户名 */
        char *pw_passwd; /* 用户密码 */
        uid_t pw_uid; /* 用户 ID */
        gid_t pw_gid; /* 组 ID */
        char *pw_gecos; /* 用户信息 */
        char *pw_dir; /* 主目录 */
        char *pw_shell; /* 外壳程序 */
    };
  * 所述getpwnam_r()和getpwuid_r()函数获得与getpwnam()和getpwuid()相同的信息，但存储检索 的passwd在空间结构由指向PWD。passwd结构的成员指向的字符串字段存储在大小为buflen的缓冲区buf中。指向结果（如果成功）或 NULL（如果未找到条目或发生错误）的指针存储在 *result 中。
## getpwuid()
  * 定义在pwd\/getpwuid.c文件中, 与gethostbyname()类似, 都是通过宏定义一些变量, 然后包含一个模板c文件展开为真正的宏定义.
    #include 
    #define LOOKUP_TYPE struct passwd //要查找的数据类型
    #define FUNCTION_NAME getpwuid //函数名
    #define DATABASE_NAME passwd //数据库名
    #define ADD_PARAMS uid_t uid //参数
    #define ADD_VARIABLES uid //变量
    #define BUFLEN NSS_BUFLEN_PASSWD //缓冲区长度
    #include "../nss/getXXbyYY.c"
  * 这个函数模板简化后如下, 其主要功能就是分配缓冲区, 然后调用可重入版本的函数getpwuid_r()
    LOOKUP_TYPE* FUNCTION_NAME(ADD_PARAMS)
    {
        static size_t buffer_size;
        static LOOKUP_TYPE resbuf;
        LOOKUP_TYPE* result;
        /* Get lock.  */
        __libc_lock_lock(lock);
        if (buffer == NULL) //分配缓冲区
        {
            buffer_size = BUFLEN;
            buffer = (char*)malloc(buffer_size);
        }
        //调用可重入函数: getpwuid_r(uid, &resbuf, buffer, buffer_size, &result H_ERRNO_VAR)
        while (buffer != NULL && (INTERNAL(REENTRANT_NAME)(ADD_VARIABLES, &resbuf, buffer, buffer_size, &result H_ERRNO_VAR) == ERANGE)
        ) {
            //如果可重入函数表示缓冲区不够大, 就两倍扩张
            char* new_buf;
            buffer_size *= 2;
            new_buf = (char*)realloc(buffer, buffer_size);
            if (new_buf == NULL) {
                free(buffer);
                __set_errno(ENOMEM);
            }
            buffer = new_buf;
        }
        if (buffer == NULL)
            result = NULL;
        /* Release lock.  */
        __libc_lock_unlock(lock);
        return result;
    }
## 相关结构体
  * `service_library`用于描述一个打开的模块
    typedef struct service_library {
        const char* name; //模块名(`files', `dns', `nis', ...)
        void* lib_handle;   //模块的句柄, 也就是dlopen()返回的指针
        struct service_library* next;   //链表指针
    } service_library;
  * `known_function`用于缓存一个查询, 保存了函数名到函数指针的映射
    typedef struct
    {
        const char* fct_name; //函数名
        void* fct_ptr; //函数指针
    } known_function; //已知的函数
  * 对于`/etc/nsswitch.con`中描述的每种服务都通过`service_user`描述, 同一数据库中的多个服务通过`service_user->next`指针以单链表的形式组织起来
    typedef struct service_user {
        struct service_user* next; //链表指针
        lookup_actions actions[5]; /* Action according to result.  */
        service_library* library; //这个服务对应的模块, 也就是动态链接库libnss_SERVICE.so.1
        void* known; //指向一个搜索的树根, 这个搜索树保存了之前搜索过的函数名, 当做缓存用
        char name[0]; //这个服务的名字 (`files', `dns', `nis', ...)
    } service_user;
  * 每个数据库, 也就是`/etc/nsswitch.con`中的一行, 都通过`name_database_entry`描述, 多个数据库通过`next`指针以单链表的形式组织
    typedef struct name_database_entry {
        struct name_database_entry* next; //链表指针, 指向下一个数据库
        service_user* service; //这个数据库所有服务
        char name[0]; //数据库名, 字符串紧接着上一个字段, 同属于一个chunk
    } name_database_entry;
  * 一个系统中完整的命名数据库用`name_database`表示, `entry`是一个二维链表头指针, 第一个纬度是各个数据库, 第二个纬度是每个数据库的各种服务(数据来源)
    typedef struct name_database {
        name_database_entry* entry; //所有数据库组织的单链表
        service_library* library;   //所有的服务模块组成的单链表
    } name_database;
## getpwuid_r()
  * 这个函数定义在nss\/getpwuid_r.c中, 也是通过包含模板文件展开得到函数定义的
    #include 
    #define LOOKUP_TYPE    struct passwd
    #define FUNCTION_NAME    getpwuid
    #define DATABASE_NAME    passwd
    #define ADD_PARAMS    uid_t uid
    #define ADD_VARIABLES    uid
    #define BUFLEN        NSS_BUFLEN_PASSWD
    #include 
  * 简化后的函数模板如下, 主要就是两步: 先从数据库中找到对应处理函数, 再调用这个处理函数
    int INTERNAL(REENTRANT_NAME)(ADD_PARAMS, LOOKUP_TYPE* resbuf, char* buffer, size_t buflen, LOOKUP_TYPE** result H_ERRNO_PARM EXTRA_PARAMS)
    {
        //每个命名搜索函数都有下面这组静态变量用于缓存上次搜索结果
        static bool startp_initialized;    //是否初始化过
        static service_user* startp;        //本搜索函数对应的服务链表
        static lookup_function start_fct;    //本搜索函数对应的第一个处理函数
        service_user* nip;
        int do_merge = 0;
        LOOKUP_TYPE mergegrp;
        char* mergebuf = NULL;
        char* endptr = NULL;
        union {
            lookup_function l;
            void* ptr;
        } fct;  //查找函数
        int no_more, err;
        enum nss_status status = NSS_STATUS_UNAVAIL;
        //通过守护进程查询缓存
        ...;
        if (!startp_initialized) {  //如果还没有初始化
            /*
                - 宏展开为:__GI___nss_passwd_lookup2()
                - 先根据/etc/nsswitch.conf找到命名数据库, 再根据数据库名找到这个数据库的所有服务
                - nip中存放了所有可查询数据源 fct指向当前数据源的查询函数
            */
            no_more = DB_LOOKUP_FCT(&nip, REENTRANT_NAME_STRING,REENTRANT2_NAME_STRING, &fct.ptr);
            if (no_more) {
                void* tmp_ptr = (service_user*)-1l;
                startp = tmp_ptr;
            } else {
                //写入搜索结果, 这样就不用每次都搜索nsswitch.conf文件了
                void* tmp_ptr = fct.l;
                start_fct = tmp_ptr;
                tmp_ptr = nip;
                startp = tmp_ptr;
            }
            atomic_write_barrier();
            startp_initialized = true;
        } else {    //如果已经初始化过就遍历上次记录了服务链表搜索
            fct.l = start_fct;
            nip = startp;
            no_more = nip == (service_user*)-1l;
        }
        while (no_more == 0) {
            //调用函数查询函数, 宏展开结果会先调用__GI__dl_mcount_wrapper_check(), 然后调用fct里面保存的函数指针, fct.l(...)
            status = DL_CALL_FCT(fct.l, (ADD_VARIABLES, resbuf, buffer, buflen, &errno H_ERRNO_VAR EXTRA_VARIABLES));
            //如果查询返回NSS_STATUS_TRYAGAIN 并且errno为ERANGE, 就说明提供的缓冲区太小了, 直接结束, 让调用者重新分配缓冲区
            if (status == NSS_STATUS_TRYAGAIN
                && errno == ERANGE)
                break;
            //前后结果合并部分
            ...;
            //本数据源中没找到, 切换到下一个数据源, no_more表示还有没有剩下的数据源
            no_more = __nss_next2(&nip, REENTRANT_NAME_STRING, REENTRANT2_NAME_STRING, &fct.ptr, status, 0);
        }
        free(mergebuf);
        mergebuf = NULL;
        //写入返回结果
        *result = status == NSS_STATUS_SUCCESS ? resbuf : NULL;
        //设置返回值
        int res;
        if (status == NSS_STATUS_SUCCESS || status == NSS_STATUS_NOTFOUND)
            res = 0;
        /* Don't pass back ERANGE if this is not for a too-small buffer.  */
        else if (errno == ERANGE && status != NSS_STATUS_TRYAGAIN)
            res = EINVAL;
        else
            return errno;
        __set_errno(res);
        return res;
    }
  * 我们不关注getpwuid()具体是怎么实现的, 我们只是以getpwuid()为例子, 着重于glibc中是怎么通过NSS机制确定处理函数的, 因此下面要研究`DB_LOOKUP_FCT()`的实现
  * `DB_LOOKUP_FCT()`是一个宏, 会展开为`__GI___nss_passwd_lookup2()`, 调用现场如下
## __nss_passwd_lookup2()
  * 函数定义在nss\/pwd-lookup.c中, 是通过DB_LOOKUP_FCT这个宏展开得到函数定义的
    #define DATABASE_NAME passwd    //要查询的数据库名
    #ifdef LINK_OBSOLETE_NSL
    # define DEFAULT_CONFIG "compat [NOTFOUND=return] files"
    #else
    # define DEFAULT_CONFIG "files" //默认配置
    #endif
    #include "XXX-lookup.c"
  * DB_LOOKUP_FCT()定义如下
    /*
        - 在数据库中搜索fct_name对应的函数, 要查找的数据库名通过宏DATABASE_NAME_STRING确定
        - 参数:
            - ni: 结果参数, 数据库对应所有服务
            - fct_name: 在服务中需要查找的函数名
            - fct2_name: 如果fct_name没找到对应函数的话就会用这个去寻找
            - fctp: 结果参数, 存放找到的函数指针