dα(cid:1) |α(cid:1)=α as functions of α for Gentle
−(cid:18) dp
(cid:1)
b
(cid:1)
The estimates for p and dp
(TCP-SACK) ﬂows are shown in Figures 5(a) and (b). We use
126 
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
4
3.5
3
2.5
2
1.5
1
0.5
0
0
20
αE
48
4
3.5
3
2.5
2
1.5
1
0.5
0
0
10
αE
9
α1 = 1 (α1,best = 27)
α2 = 27 (α2,best = 48)
α3 = 48 (α3,best = 48)
80
100
40
60
Increase Parameter (α
n)
Goodput
0.96Mbps
(a)
4.95
Loss Rate
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
4
3.5
3
2.5
2
1.5
1
0.5
0
0.5
0.55
0.6
βE
0.98
β1 = 1 (β
n = 0.98)
β2 = 0.98 (β2,best = 0.98)
0.9
0.95
1
0.65
0.8
0.7
0.75
0.85
Decrease Parameter (β
n)
Goodput
0.99Mbps
(b)
Loss Rate
2.15
Figure 8: Simulation results for Gentle ﬂows with RED buﬀers.
α1 = 1 (α1,best = 9)
α2 = 9 (α2,best = 9)
50
60
30
40
20
Increase Parameter (α
n)
Goodput
0.89Mbps
(a)
1.68
Loss Rate
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
4
3.5
3
2.5
2
1.5
1
0.5
0
0.5
0.55
0.6
βE
0.98
β1 = 1 (β1,best = 0.98)
β2 = 0.98 (β2,best = 0.98)
0.9
0.95
1
0.65
0.8
0.7
0.75
0.85
Decrease Parameter (β
n)
Goodput
0.99Mbps
(b)
Loss Rate
2.07
Figure 9: Simulation results for Hybrid ﬂows with RED buﬀers.
these estimates to obtain Fa as a function of α as shown in Fig-
ure 6(a). Notice that for TCP-SACK, Fa > 0 implying that at
a symmetric Nash equilibrium, αE could be arbitrarily large for
the combination of TCP-SACK and RED buﬀers.
From Figure 6(b), similarly, Fb > 0 throughout. Again, this
implies that at Nash equilibrium, βE → 1.
Simulation of SACK Simulation results for the Nash equilib-
rium of the TCP Game with TCP-SACK ﬂows and RED buﬀers
are shown in Figure 8. When ﬂows are allowed to vary their
increase parameters, αE = 49. At the Nash equilibrium, the per-
ﬂow goodput (0.96Mbps) is reasonable but the loss rate (4.95%)
is somewhat high. Moreover, the parameter setting at the Nash
equilibrium, as predicted by analysis, is highly aggressive. As
such, we conclude that the Nash equilibrium of the TCP Game
with SACK ﬂows varying their increase parameters and buﬀers
employing RED is undesirable.
From Figure 8(b), when ﬂows are allowed to vary their de-
crease parameter, βE = 0.98. At this equilibrium both the per-
ﬂow goodput and loss rate are reasonable and as such this Nash
equilibrium in not undesirable (The Nash equilibrium is unfair,
however).
From our simulations in which we allow TCP-SACK ﬂows to
vary their increase and decrease parameters simultaneously, we
obtain (αE , βE) = (23, 0.98). The average per-ﬂow goodput at
this Nash equilibrium is about 0.97Mbps and the per-ﬂow loss rate
is 5.70%. As argued above, this Nash equilibrium is undesirable.
4.3.3 TCP-Reno/Hybrid Penalty
Analysis of Hybrid Penalty Instead of deriving the expres-
sion of the goodput of Hybrid ﬂows, we use the standard equation
for the goodput of TCP Reno [19, 23] ﬂows:
G =
R 2p(1−β)
α(1+β) + 3T0p(1 + 32p2) p(1−β2)
2α
Again, using Equation 25 in Equations 19 and 23, we get the
1
(25)
following equations for the Nash equilibria with varying α and
varying β respectively:
α
9T0
Fa = Ca(cid:16) pa
−Ca
− Pa(cid:17)
2R (cid:18)(1.5pa + 112p
Fb = Cb(cid:18) 2p
1 − β2
3T0Pb
− Pb(cid:19)
−Cb
R
3
a)Pa − p2
a
2α
(1 + 32p
2
a)(cid:19) = 0
(1 + β)(1.5p + 112p3) +
3T0(p2 + 32p4)β
= 0
R(1 − β)
n(β, pb) 1−β
pb(1+β) , Pa =
where Ca = G2
dα(cid:1) |α(cid:1)=α and Pb = dp
dp
n(α, pa) α
dβ(cid:1) |β(cid:1)=β.
a
(cid:1)
(cid:1)
b
pa , Cb = G2
We plot Fa and Fb as functions of α and β in Figures 6(a) and
(b) respectively, using the estimates from Figure 5 as before. In
either case F > 0 throughout. This implies that at the respective
Nash equilibria, αE can be arbitrarily large and βE → 1.
Simulation of Reno Results from the simulation of the TCP
Game with Reno ﬂows and RED gateways are shown in Figure 6.
When ﬂows vary their increase parameter, αE = 9. At this Nash
equilibrium, both the average goodput (0.90Mbps) and the per-
ﬂow the loss rate (1.68%) are reasonable. While this Nash equi-
librium is not as undesirable as the cases of Severe and Gentle
penalties, it is nevertheless worse than the default parameter set-
ting in terms of the per-ﬂow goodput.
As in the previous situations, when ﬂows vary their decrease
parameter, the resulting Nash equilibrium is not undesirable both
in terms of the per-ﬂow goodput and loss rate. Again, this is in
agreement with the observations in [2] (In fact, as shown in [2],
fairness is also reasonable at this equilibrium).
When ﬂows are allowed to vary both their parameters simulta-
neously, at Nash equilibrium (αE , βE) = (3, 0.98). At this Nash
127equilibrium, the average per-ﬂow loss rate is 2.75% and the per-
ﬂow goodput is about 0.94Mbps. Again, this Nash equilibrium is
somewhat less desirable when compared to the default parame-
ter setting in terms of per-ﬂow goodput, though it is better than
those resulting from using the other forms of penalty.
Finally, we summarize the results for RED buﬀers as follows:
Observation 4. When RED gateways are employed, all the
Nash equilibria resulting from allowing ﬂows to vary their in-
crease parameters are undesirable (irrespective of the loss recov-
ery scheme employed) in comparison with the default parameter
setting since they either result in a low per-ﬂow goodput or a high
per-ﬂow loss rate. However, allowing the ﬂows to vary their de-
crease parameters does not result in undesirable Nash equilibria
(Except when ﬂows implement Severe penalty).
4.4 Discussion
Our goal in this paper was to see if selﬁsh behavior of network
end-points would have an undesirable eﬀect on the eﬃciency of
the network. Intuition suggests that aggressive congestion control
behavior would always increase a ﬂow’s bandwidth share so greed
would always result in overly aggressive ﬂows and ineﬃcient net-
work operation. However, as our analysis in the previous sections
has shown, this intuition is not always right.
Until recently, the most common deployed scenario in the In-
ternet was end-hosts implementing TCP-Reno loss recovery and
FIFO drop-tail buﬀer management. In this situation, selﬁsh be-
havior does not result in ineﬃcient network behavior.7 In fact,
the eﬃciency of the Nash equilibrium in this case is close to the so-
cially optimal (but the bandwidth allocation can be unfair). How-
ever, in our attempts to improve TCP’s loss recovery schemes,
we have increased our vulnerability to aggressive TCP behavior.
TCP-SACK loss recovery, which is being increasingly employed
by the end-hosts of today [12], allows ﬂows to more gracefully re-
cover from losses. This greatly reduces the penalties for aggressive
congestion control and makes the Nash equilibrium of the TCP
Game quite ineﬃcient. In addition, RED active queue manage-
ment is seen as important improvement over drop-tail. However,
by removing drop-tail’s penchant for dropping bursts of packets,
RED is more friendly to aggressive ﬂows. This results in ineﬃ-
cient equilibria of the TCP Game (regardless of what form of loss
recovery the end-points use).
Since we no longer remain in the world consisting mainly of
drop-tail routers and end-hosts employing TCP-Reno loss recov-
ery, we must confront the problem of the aggressive behavior of
greedy TCP ﬂows. One approach is to use diﬀerent queueing and
buﬀer management schemes to prevent greedy users from achiev-
ing more than their share of bandwidth. Approaches such as Fair
Queueing [7] are quite eﬀective in this regard, but require compli-
cated per-ﬂow management. Several recent eﬀorts have resulted
in more scalable and implementable schemes, such as FRED [17],
RED-PD [18] and AFD [20], that preferentially drop packets from
aggressive ﬂows. However, these works focus on fair allocation of
bandwidth for an arbitrary set of sources. In the next section we
explore the issue of how much preferential dropping is required to
ensure that the Nash equilibrium of the TCP Game is desirable.
5. MECHANISMS FOR NASH EQUILIBRIUM
In order to design an preferential dropping mechanism that
encourages an eﬃcient Nash equilibrium, we need a scheme that
assigns a greater loss rate to the more aggressive ﬂows. This
greater loss rate, combined with the particular loss-recovery algo-
rithm, must oﬀset any gain associated with the increased trans-
mission rates. We know that heavyweight mechanisms such as
Fair Queueing can accomplish this goal, but here we are looking
for very simple and easily deployable preferential dropping mech-
anisms that give just enough incentive to produce a desirable
Nash equilibria of the TCP Game, but need not achieve perfectly
fair bandwidth allocations for arbitrary sets of ﬂows (which Fair
Queueing and other such mechanisms have as their goal). We
discuss one such scheme in the next section.
Notice that the technique employed in the previous section, of
using experimentally obtained values of F to evaluate RED is ap-
plicable to any combination of the AQM scheme and the penalty
function implemented by the TCP ﬂows as long as we can obtain
a closed form expression for the goodput of the ﬂow as a function
of the penalty implemented and the AQM’s loss assignment pol-
icy.8 We will reuse this method to evaluate a modiﬁcation to the
CHOKe AQM scheme in the next section.
5.1 CHOKe+: A Simple Stateless Mechanism
CHOKe [21] is an example of a simple preferential dropping
policy. In this section, we explore whether CHOKe or CHOKe
with modiﬁcations could meet our requirements. CHOKe main-
tains a simple FIFO buﬀer. The average occupancy of the buﬀer
is calculated in manner similar to RED. Like RED, a CHOKe
buﬀer is also conﬁgured with two thresholds M inth and M axth.
If the average queue occupancy exceeds M inth, with each arriving
packet P , CHOKe picks k candidate packets, P1, . . . , Pk, at ran-
dom from the buﬀer. For each i = 1, . . . , k, CHOKe then checks
to see if Pi belongs to the same ﬂow as P , and drops both upon
a match. Upon a mismatch with some packet Pj, CHOKe leaves
Pj untouched and drops P with a probability similar to that cal-
culated by a RED buﬀer with equivalent average and exact queue
sizes. However, in this form, CHOKe creates a minimum loss rate
of 1/N , where N is the number of active ﬂows, as soon as the aver-
age queue length exceeds M inth. When there are relatively small
number of ﬂows (< 50), this starting loss rate is excessively high
and results in the severe under-utilization of the available capac-
ity. In this form, CHOKe does ensure that the parameter settings
at Nash equilibrium are very conservative. However, the average
ﬂow loss rate is very high and goodput is very low, making this
Nash equilibrium undesirable.
A few minor changes in the above algorithm are enough to
ensure that the loss rates of a CHOKe queue are not too high. For
each incoming packet P , let m denote the number of packets from
the k chosen candidate packets that belong to the same ﬂow as
the incoming packet. Let 0 ≤ γ2 < γ1 ≤ 1 be positive constants.
If m ≥ γ1k, we drop P along with the m matching candidate
packets. Otherwise, we ﬁrst calculate the drop probability for P
in an equivalent RED queue. Suppose that P is to be dropped
according to RED. Now, if γ2k ≤ m < γ1k, we also drop the
m matching packets along with P . Otherwise, we just drop P .
Henceforth, we will use CHOKe+ to refer to this modiﬁed CHOKe
algorithm.
Figures 10 compares the loss assignment of RED and CHOKe+.
For CHOKe+, we ﬁxed the constants as follows: γ1 = 0.95,
γ2 = 0.80 and k = 5.
In this simulation, there are 10 ﬂows
F1, . . . , F10. Flows F1, . . . , F9 each have congestion control pa-
rameters of (1, 0.5). Figure (a) plots the loss rates of ﬂows F1, . . . , F9
and that of ﬂow F10 as the increase parameter of F10 is varied
in the range [1, 50] keeping the decrease parameter ﬁxed at 0.5.
Similarly, in Figure (b) the decrease parameter of F10 is varied in
the range [0.5, 1) keeping the increase parameter ﬁxed at 1. No-
tice that in either case the loss rates of all the 10 ﬂows increase
gradually under RED. However, under CHOKe+, the loss rate
of ﬂow F10 increases at a rate much higher than that compared
to the increase with RED. The loss rates of ﬂows F1, . . . , F9 are
unaﬀected by the behavior of F10.
A RED buﬀer shares the additional losses resulting from the
increased rate of a single ﬂow among the entire population of