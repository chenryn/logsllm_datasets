title:Identifying and Analyzing High Impact Routing Events with PathMiner
author:Giovanni Comarela and
Mark Crovella
Identifying and Analyzing High Impact
Routing Events with PathMiner
Giovanni Comarela
Boston University
Boston, USA
PI:EMAIL
Mark Crovella
Boston University
Boston, USA
PI:EMAIL
ABSTRACT
1.
INTRODUCTION
Understanding the dynamics of the interdomain routing system is
challenging. One reason is that a single routing or policy change
can have far reaching and complex effects. Connecting observed
behavior with its underlying causes is made even more difÔ¨Åcult by
the amount of noise in the BGP system. In this paper we address
these challenges by presenting PathMiner, a system to extract large
scale routing events from background noise and identify the AS or
link responsible for the event.
PathMiner is distinguished from previous work in its ability to
identify and analyze large-scale events that may re-occur many
times over long timescales. The central idea behind PathMiner is
that although a routing change at one AS may induce large-scale,
complex responses in other ASes, the correlation among those re-
sponses (in space and time) helps to isolate the relevant set of re-
sponses from background noise, and makes the cause much easier
to identify. Hence, PathMiner has two components: an algorithm
for mining large scale coordinated changes from routing tables, and
an algorithm for identifying the network element (AS or link) re-
sponsible for the set of coordinated changes.
We describe the implementation and validation of PathMiner.
We show that it is scalable, being able to extract signiÔ¨Åcant events
from multiple years of routing data at a daily granularity. Finally,
using PathMiner we study interdomain routing over past 9 years
and use it to characterize the presence of large scale routing events
and to identify the responsible network elements.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; C.2.5 [Local
and Wide-Area Networks]: Internet ‚Äì BGP
General Terms
Measurement
Keywords
BGP, Interdomain Routing, Boolean Tensor Factorization
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proÔ¨Åt or commercial advantage, and that copies bear this notice and the full citation
on the Ô¨Årst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
Copyright is held by the author/owner(s).
IMC‚Äô14, November 5‚Äì7, 2014, Vancouver, BC, Canada.
ACM 978-1-4503-3213-2/14/11.
http://dx.doi.org/10.1145/2663716.2663754
The state of the interdomain routing system ‚Äì that can be seen
as the set of next-hops chosen by each AS (Autonomous System)
toward each preÔ¨Åx ‚Äì is driven by constant change, both automated
(by the rules of BGP path selection) and human-mediated (by pol-
icy changes). Each routing change made by an individual AS is in
response to some discrete event, such as a link failure or addition,
a peer‚Äôs route announcement or withdrawal, or a policy change.
However the complexity of the resulting dynamics means that the
causal relationship between routing changes in different parts of the
system is notoriously difÔ¨Åcult to tease out.
In this paper we present PathMiner, a system for identifying
large-scale changes to the state of the routing system that are caused
by individual events, and for narrowing down network elements
(ASes or links) responsible for the set of changes. By ‚Äòlarge-scale‚Äô
we mean routing changes that involve many ASes and preÔ¨Åxes, and
may re-occur at multiple times.
The central idea behind PathMiner is that when a set of ASes
change their next-hop decisions to a set of preÔ¨Åxes in a coordinated
fashion, especially when those same changes are repeated at multi-
ple points in time, then it is very likely that the coordinated activity
is ultimately caused by actions taken by a single AS or link. This
is an application of Occam‚Äôs Razor: when a large set of ASes all
change their next-hop decisions for a large set of preÔ¨Åxes, it is un-
likely to be a coincidence. Rather, the simplest explanation is that
all the changes were ultimately triggered by the action of a sin-
gle ‚Äòactor‚Äô (AS or link). Furthermore, as the size of the AS set
and preÔ¨Åx set involved grows, causation by a single actor becomes
even more likely. Hence, PathMiner looks for signiÔ¨Åcant spatio-
temporal patterns in BGP routing, extracts them from background
noise, and identiÔ¨Åes the network element most likely to be respon-
sible for generating the pattern.
We start by formalizing the concept of high impact routing
events, and showing how to translate the discovery of such events
into the Boolean Tensor Factorization problem. The Ô¨Årst compo-
nent of PathMiner is a new algorithm for Boolean Tensor Factor-
ization that is well suited for the kind of data that is derived from
network routing changes.
The second component of PathMiner identiÔ¨Åes the single actor
that is responsible for each event. This second step crucially de-
pends on the fact that the Ô¨Årst step extracts a set of coordinated
routing changes. The key insight is that over the set of all paths
that participate in the routing changes, the network element having
highest precision and recall as a classiÔ¨Åer for changed paths is most
likely the single actor responsible for the event.
We validate PathMiner by manually inspecting the extracted
events and actors. For this we developed an automated tool for
graphical reconstruction of the event, which depicts the changes
421made to the subgraph that is induced by the set of ASes and preÔ¨Åxes
involved in the event. While manual inspection is time consuming
and imperfect, we know of no alternative, since existing systems
for root-cause analysis are not capable of working with historical
data, nor with sets of large-scale routing changes. Our validation
Ô¨Ånds that the actors identiÔ¨Åed for each event almost always agree
with manual analysis.
Using PathMiner we perform an initial analysis of the last 9 years
of interdomain routing data, sampled at a daily granularity. We
show that PathMiner is capable of extracting large events, some of
which involve over 100,000 coordinated routing changes. Taken to-
gether, these events constitute between 10% and 20% of all visible
routing changes over time in the datasets we analyzed. Individual
events can involve tens to hundreds of ASes and preÔ¨Åxes, and oc-
cur tens to hundreds of times in our data. For most of these events,
PathMiner is able to identify a single actor (or a small set of actors)
that is likely responsible for ultimately causing this coordinated ac-
tivity.
One of the main contributions of our work is to provide evidence
that large-scale events do exist and they also re-occur over long
periods of time. SpeciÔ¨Åcally, PathMiner exposes the existence of
regions of the AS-level Internet that have similar dynamics towards
sets of preÔ¨Åxes. To the best of our knowledge PathMiner is the
Ô¨Årst tool capable of exposing such facets of the Internet at a global
scale. From an engineering point of view, such information may be
valuable for network administrators, when making changes in their
systems, by providing historical view of events related to similar
actions.
A high-level view laying out the main stages in PathMiner is
shown in Figure 1. In the rest of this paper, we describe each of the
stages shown in the Ô¨Ågure. First, Section 2 uses an example to mo-
tivate the development of PathMiner. Section 3 presents a formal
deÔ¨Ånition for our problem. In Section 4 we present and describe
how to process raw BGP data (corresponding to the Ô¨Årst two stages
in Figure 1). In Sections 5 and 6 we describe and present results
of our event detection methodology (the next two stages in Figure
1). Section 7 describes our single actor identiÔ¨Åcation strategy (the
last stage of the Ô¨Ågure). Finally, we discuss related work in Sec-
tion 8 and present concluding remarks and future work directions
in Section 9.
2. AN EXAMPLE
Before diving into the details of PathMiner, it is helpful to ex-
amine a typical example to provide intuition and motivate our ap-
proach.
Figure 2 shows a small subgraph representing the dynamics of a
portion of the network with respect to routing towards two preÔ¨Åxes
(hosted at AS42381 and AS44173, and shown in gray at the bot-
tom). The Ô¨Ågure captures routing dynamics over two consecutive
days (April 30, 2013 and May 1, 2013).
This subgraph is a portion of an event extracted by PathMiner.
The ASes along the top row of the Ô¨Ågure and the preÔ¨Åxes at the
bottom of the Ô¨Ågure constitute the output of the Ô¨Årst step of Path-
Miner. From the Ô¨Årst to the second day, all of the ASes at the top
change their next-hops toward all of the preÔ¨Åxes at the bottom. In
fact, the full event is quite large, involving dozens of ASes that all
change their next-hops; we have extracted these ASes which show
behavior that is typical of all the others.
A directed edge in the graph denotes the fact that the Ô¨Årst AS
uses the second AS as its next-hop for (each of) the two preÔ¨Åxes.
Black (solid) edges refer to edges seen in both days, red (dashed)
edges refer to edges seen just in the Ô¨Årst day and green (dotted)
edges refer to those seen only in the second day. Inside each node,

'
0



 !"#
- !"#
$"%&
&%'"
%"(
)

 
*+,- ."
%%%
/,
"%
Figure 1: Stages of PathMiner.
the negative (positive) number shows the number of paths passing
through the node in the Ô¨Årst (second) day of the event (Note that
the path counts reÔ¨Çect the full event, which involves many ASes
not shown.)
Figure 2 shows that on April 30, most of the paths towards
preÔ¨Åxes 1 and 2 were passing through AS6939 (Hurricane Elec-
tric). In the next day however paths are more dispersed; some pass
through AS3549 (Global Crossing), some through AS3257, some
only through AS174 (Cogent), and some pass only through other
ASes, not in the Ô¨Ågure, which connect directly to AS29632.
In
other words, ASes are switching from AS6939 to other ways to
reach AS29632. We can conclude that either (a) AS6939 made
its routes to the subject preÔ¨Åxes unattractive or unavailable, or (b)
AS29632, as well the others mentioned above, took actions to make
their routes more attractive or available.
This is interesting as a single event, as it shows a large-scale re-
organization of the network with regard to two preÔ¨Åxes hosted by
different ASes. However, it becomes even more interesting when
we note that the same event (or its reverse) happened 28 times dur-
ing 2013. From these 28 days PathMiner identiÔ¨Åed AS6969 and
AS29632 as responsible by the event in 18 and 10 days respec-
tively.
To illustrate how PathMiner Ô¨Ånds such event, consider Figures
3(a) and 3(b). These plots show all points in time during 2013 (on
the x axis) where each AS (on the y axis) changes its next-hop
towards one preÔ¨Åx. We treat each plot as a binary matrix, in which
element (j, k) is 1 if the AS represented by row j changes it next-
hop towards the subject preÔ¨Åx between the days k and k + 1.1 It
is clear that each matrix consists of noise plus a strong signal; that
signal is extracted and shown in Figures 3(c) and 3(d). Because
Figures 3(c) and 3(d) are very similar, they together represent the
fact that a group of many ASes changed their next-hops towards
both preÔ¨Åxes synchronously, multiple times in 2013.
1A change is related to the observed next-hops at two instants of
data collection, the Ô¨Årst on day k, and the second on day k + 1.
Transient changes, between the two data collection points, are not
considered in this work. Details in Sections 3.2 and 4.
422AS8419 -2 +2
AS5385 -2 +2
AS3549 -10 +46
AS3257 -0 +16
AS6939 -220 +3
AS174 -16 +301
AS29632 -236 +312
AS42381 -118 +156
AS44173 -118 +156
Figure 2: Path changes summary in the network towards two
preÔ¨Åxes (hosted at gray nodes) from Apr-30-2013 to May-01-
2013.
This simple example shows the nature of the kinds of events
captured by PathMiner. It also illustrates the key challenges that
PathMiner must overcome: i) how can we extract signal from noise
(e.g., going from Figure 3(a) to 3(c))? ii) next, how can we Ô¨Ånd pre-
Ô¨Åxes with similar signal matrices (e.g., matching Figure 3(c) with
3(d))? and iii) once multi-AS/preÔ¨Åx/time events are extracted, how
can we identify the AS or link most likely to have triggered all of
the routing changes captured in the event (as shown in Figure 2)? In
the following sections we present the solutions taken by PathMiner
to these challenges.
3. NOTATION AND DEFINITIONS
In this section we present the mathematical notation/deÔ¨Ånitions
(Section 3.1) used throughout the paper and a formal deÔ¨Ånition of
the problem we aim at solving (Section 3.2).
3.1 Notation
In this paper scalars will be denoted by lower-case letters (a),
sets by upper-case letters (A), vectors by lower-case bold-face let-
ters (v), and matrices by upper-case bold-face letters (M). We
will also work extensively with 3-dimensional arrays, or tensors,1
which we denote by upper-case calligraphic letters (T ).
A tensor may be seen as a collection of slices (matrices), Ô¨Åbers
(vectors) or elements. More speciÔ¨Åcally, for the n-by-m-by-l ten-
sor X , we use Xi::, X:j: and X::k respectively to denote hori-
zontal, lateral and frontal slices. In the same way, x:jk, xi:k and
xij: denote column, row and tube Ô¨Åbers respectively. Finally, xijk
(and with same meaning xi,j,k, Xijk or Xi,j,k depending on con-
venience) denotes the element (i, j, k) of X . In all cases above,
i = 1, . . . , n, j = 1, . . . , m and k = 1, . . . , l.
Tensor Y is an induced tensor from X if there exist sets A =
{a1, . . . an‚Ä≤ }, B = {b1, . . . , bm‚Ä≤ } and C = {c1, . . . , cl‚Ä≤ } such
that yijk = xai,bj ,ck . In this case we say that sets A, B and C
induce Y in X and we write Y = X (A, B, C). The same meaning
holds if we use vectors instead of sets (with the provision that when
using vectors, the ordering of indices matters, which is not the case
when using sets).
Unless otherwise stated, operations over tensors are deÔ¨Åned anal-
ogously as operations over matrices. SpeciÔ¨Åcally, for a n-by-m-by-
l tensor X , we denote its size as (n, m, l), its volume as vol(X ) =
1The word tensor is in general used to refer to N -dimensional ar-
rays. In this paper we deal only with N = 3. More details about
tensors can be found at [8].
n √ó m √ó l, and its Frobenius norm as ||X || = qPi,j,k x2
ijk. We
will also frequently refer to the density of a tensor, which is the
fraction of its entries that are nonzero.
In the particular case of
binary tensors, this is den(X ) =
.
Pi,j,k xijk
vol(X )
3.2 Problem deÔ¨Ånition
Our starting point is the path-based nature of BGP (Border Gate-
way Protocol), in which ASes keep information about the preferred
paths to each reachable preÔ¨Åx [19]. From a perspective of ASes
and preÔ¨Åxes, at a given time t the global state of the system can be
deÔ¨Åned as: a set of ASes A, a set of preÔ¨Åxes P , and for each a ‚àà A
a set of AS-paths, each of which allows a to reach a preÔ¨Åx in P .
Another representation that we will also use is based on next-hops.
In this representation, the state of the system consists of a set of
tuples (a, b, p) where a ‚àà A uses b ‚àà A as the next-hop to reach
p ‚àà P . The next-hop representation of the system contains less
information than the preferred-paths representation, so they are not
equivalent, but each will be more convenient for certain parts of
PathMiner.
To formalize the next-hop representation, at a given time t let N
be a multivalued n-by-m matrix of next-hops in the network, where
Nij denotes the set of next-hops used by AS j to reach preÔ¨Åx i.
Observing N over a discrete set of l points in time yields a n-by-
m-by-l multivalued tensor N , where Nijk is the set of next-hops
used by AS j to reach preÔ¨Åx i at time k. Tensor N represents the
complete dynamics of the network over the set of measurements.
By comparing (frontal) slices of N , we can identify next-hop
changes in the network. This results in a binary tensor C, which is
the n-by-m-by-(l ‚àí 1) tensor of routing changes, deÔ¨Åned as:
Cijk =(1,
0,
if Ni,j,k 6= Ni,j,k+1,
otherwise.
(1)
Given these deÔ¨Ånitions, we can deÔ¨Åne a high impact event in the
global routing system as: sets I (of preÔ¨Åxes), J (of ASes) and K
(of points in time) such that the sub-tensor C(I, J, K) has large
volume and high density. Because C(I, J, K) has large volume,
it has potential for high impact ‚Äì many routing changes might be
involved. The fact that C(I, J, K) has high density means that it
is likely to be a singular event ‚Äì that is, most ASes are changing
their next-hops toward most preÔ¨Åxes at most timepoints, and as ar-
gued above, such unusually coordinated activity is likely due to the
actions of a single network element.
To make this deÔ¨Ånition concrete, we introduce the concept of a
(Œª, ŒΩ)-event:
DEFINITION 1. ((Œª, ŒΩ)-event) A binary tensor B is a (Œª, ŒΩ)-
event with regard to binary tensor X if there exist sets I, J and K
such that B = X (I, J, K); den(B) ‚â• Œª; and vol(B) ‚â• ŒΩ.
DeÔ¨Ånition 1 still is not enough to fully characterize the events
we are seeking. For instance, two distinct (Œª, ŒΩ)-events B and B‚Ä≤
may be such that B is a sub-tensor of B‚Ä≤ and hence, the former
can be viewed just as redundant information when compared with
the latter. Therefore, it is also necessary to put constraints on the
set of (Œª, ŒΩ)-events we want to Ô¨Ånd. Thus, the Ô¨Ånal description of
our problem, which we call Boolean Tensor (Œª, ŒΩ)-Factorization
(or (Œª, ŒΩ)-BTF) is:
PROBLEM 1. (Boolean Tensor (Œª, ŒΩ)-Factorization) Given a
binary tensor X , integers r and ŒΩ and a real Œª, the Boolean Ten-
sor (Œª, ŒΩ)-Factorization problem consists of Ô¨Ånding r triples of sets
(Ih, Jh, Kh), h = 1, . . . , r such that:
423s
e
S
A
20
40
60
80
100
120
140
160
180
200
s
e
S
A
20
40
60
80
100
120
140
160
180
200
s
e
S
A
20
40
60
80
100
120
140
160
180
200
s
e
S
A
20
40
60
80
100
120
140
160
180
200
50
100
150
200
250
300
350
Day