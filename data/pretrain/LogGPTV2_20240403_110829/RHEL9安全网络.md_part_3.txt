    ``` screen
    # semanage port -a -t ssh_port_t -p tcp port_number
    ```
    另外，更新 `firewalld`{.literal} 配置：
    ``` screen
    # firewall-cmd --add-port port_number/tcp
    # firewall-cmd --runtime-to-permanent
    ```
    在前面的命令中，将 [*port_number*]{.emphasis} 替换为使用
    `Port`{.literal} 指令指定的新端口号。
:::
::: itemizedlist
**root 登录**
-   默认情况下，`PermitRootLogin`{.literal} 设置为
    `prohibit-password`{.literal}。这强制使用基于密钥的身份验证，而不是使用密码以
    root 身份登录，并通过防止暴力攻击来降低风险。
    ::: {.caution style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 小心 {.title}
    以 root
    用户身份启用登录并非安全的做法，因为管理员无法审核哪些用户运行哪些特权命令。对于
    使用管理命令，请改为登录并使用 `sudo`{.literal}。
    :::
:::
::: itemizedlist
**使用 X Security 扩展**
-   Red Hat Enterprise Linux 客户端中的 X 服务器不提供 X
    安全扩展。因此，当连接到带有 X11 转发的不可信 SSH
    服务器时，客户端无法请求另一个安全层。大多数应用程序都无法在启用此扩展时运行。
    默认情况下，`/etc/ssh/ssh_config.d/05-redhat.conf`{.literal}
    文件中的 `ForwardX 11Trusted`{.literal} 选项被设置为
    `yes`{.literal}，且 `ssh -X remote_machine`{.literal}
    （不信任主机）和 `ssh -Y remote_machine`{.literal}
    （可信主机）命令之间没有区别。
    如果您的场景根本不需要 X11 转发功能，请将
    `/etc/ssh/sshd_config`{.literal} 配置文件中的
    `X11Forwarding`{.literal} 指令设置为 `no`{.literal}。
:::
::: itemizedlist
**限制对特定用户、组群或者域的访问**
-   `/etc/ssh/sshd_config`{.literal} 配置文件服务器中的
    `AllowUsers`{.literal} 和 `AllowGroups`{.literal}
    指令可让您只允许某些用户、域或组连接到您的 OpenSSH
    服务器。您可以组合 `AllowUsers`{.literal} 和
    `Allow Groups`{.literal} 来更准确地限制访问，例如：
    ``` screen
    AllowUsers *@192.168.1.*,*@10.0.0.*,!*@192.168.1.2
    AllowGroups example-group
    ```
    以上配置行接受来自 192.168.1.\* 和 10.0.0.\*
    子网中所有用户的连接，但 192.168.1.2
    地址的系统除外。所有用户都必须在 `example-group`{.literal}
    组中。OpenSSH 服务器拒绝所有其他连接。
    请注意，使用允许列表（以 Allow 开头的指令）比使用阻止列表（以 Deny
    开始的选项）更安全，因为允许列表也会阻止新的未授权的用户或组。
:::
::: itemizedlist
**更改系统范围的加密策略**
-   `OpenSSH`{.literal} 使用 RHEL
    系统范围的加密策略，默认的系统范围的加密策略级别为当前威胁模型提供了安全设置。要使您的加密设置更严格，请更改当前的策略级别：
    ``` screen
    # update-crypto-policies --set FUTURE
    Setting system policy to FUTURE
    ```
-   要为您的 `OpenSSH`{.literal}
    服务器选择不使用系统范围内的加密策略，请对
    `/etc/sysconfig/sshd`{.literal} 文件中的 `CRYPTO_POLICY=`{.literal}
    变量这一行取消注释。更改后，您在 `/etc/ssh/sshd_config`{.literal}
    文件中的 `Ciphers`{.literal} 、`MAC`{.literal}
    、`KexAlgoritms`{.literal} 和 `GSSAPIKexAlgorithms`{.literal}
    部分指定的值不会被覆盖。请注意，此任务需要在配置加密选项方面具有深厚的专业知识。
-   如需更多信息，请参阅[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/){.link}中的[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
:::
::: itemizedlist
**其他资源**
-   `sshd_config(5)`{.literal}、`ssh-keygen(1)`{.literal}、
    `crypto-policies(7)`{.literal} 和
    `update-crypto-policies(8)`{.literal} 手册页。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#connecting-to-a-remote-server-using-an-ssh-jump-host_assembly_using-secure-communications-between-two-systems-with-openssh}使用 SSH 跳过主机连接到远程服务器 {.title}
:::
使用这个步骤通过中间服务器（也称为跳过主机）将本地系统连接到远程服务器。
::: itemizedlist
**先决条件**
-   跳过主机接受来自本地系统的 SSH 连接。
-   远程服务器只接受来自跳过主机的 SSH 连接。
:::
::: orderedlist
**步骤**
1.  通过编辑本地系统中的 `~/.ssh/config`{.literal}
    文件来定义跳板主机，例如：
    ``` screen
    Host jump-server1
      HostName jump1.example.com
    ```
    ::: itemizedlist
    -   `Host`{.literal} 参数定义您可以在 `ssh`{.literal}
        命令中使用的主机的名称或别名。该值可以匹配真实的主机名，但也可以是任意字符串。
    -   `HostName`{.literal} 参数设置跳过主机的实际主机名或 IP 地址。
    :::
2.  使用 `ProxyJump`{.literal}
    指令将远程服务器跳板配置添加到本地系统上的 `~/.ssh/config`{.literal}
    文件中，例如：
    ``` screen
    Host remote-server
      HostName remote1.example.com
      ProxyJump jump-server1
    ```
3.  使用您的本地系统通过跳过服务器连接到远程服务器：
    ``` screen
    $ ssh remote-server
    ```
    如果省略了配置步骤 1 和 2，则上一命令等同于
    `ssh -J skip-server1 remote-server`{.literal} 命令。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以指定更多的跳板服务器，您也可以在提供其完整主机名时跳过在配置文件中添加主机定义，例如：
``` screen
$ ssh -J jump1.example.com,jump2.example.com,jump3.example.com remote1.example.com
```
如果跳板服务器上的用户名或 SSH
端口与远程服务器上的用户名和端口不同，请只修改上一命令中的主机名表示法，例如：
``` screen
$ ssh -J PI:EMAIL:75,PI:EMAIL:75,PI:EMAIL:75 PI:EMAIL:220
```
:::
::: itemizedlist
**其他资源**
-   `ssh_config(5)`{.literal} 和 `ssh(1)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#connecting-to-remote-machines-with-ssh-keys-using-ssh-agent_assembly_using-secure-communications-between-two-systems-with-openssh}通过 ssh-agent ，使用 SSH 密钥连接到远程机器 {.title}
:::
为了避免在每次发起 SSH 连接时输入密语，您可以使用 `ssh-agent`{.literal}
工具缓存 SSH 私钥。确保私钥和密语安全。
::: itemizedlist
**先决条件**
-   您有一个运行 SSH 守护进程的远程主机，并且可通过网络访问。
-   您知道登录到远程主机的 IP 地址或者主机名以及凭证。
-   您已用密码生成了 SSH 密钥对，并将公钥传送到远程机器。
:::
::: orderedlist
**步骤**
1.  可选：验证您可以使用密钥向远程主机验证：
    ::: orderedlist
    1.  使用 SSH 连接到远程主机：
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
        ```
    2.  输入您在创建密钥时设定的密码短语以授予对私钥的访问权限。
        ``` screen
        $ ssh example.user1@198.51.100.1 hostname
         host.example.com
        ```
    :::
2.  启动 `ssh-agent`{.literal}。
    ``` screen
    $ eval $(ssh-agent)
    Agent pid 20062
    ```
3.  将密钥添加到 `ssh-agent`{.literal}。
    ``` screen
    $ ssh-add ~/.ssh/id_rsa
    Enter passphrase for ~/.ssh/id_rsa:
    Identity added: ~/.ssh/id_rsa (PI:EMAIL)
    ```
:::
::: itemizedlist
**验证**
-   可选：使用 SSH 登录主机。
    ``` screen
    $ ssh example.user1@198.51.100.1
    Last login: Mon Sep 14 12:56:37 2020
    ```
    请注意您不必输入密码短语。
:::
:::
::: section
::: titlepage
# []{#assembly_using-secure-communications-between-two-systems-with-openssh_securing-networks.html#_additional_resources}其他资源 {.title}
:::
::: itemizedlist
-   `sshd(8)`{.literal}、`ssh(1)`{.literal}、`scp(1)`{.literal}、`sftp(1)`{.literal}、`ssh-keygen(1)`{.literal}、`ssh-copy-id(1)`{.literal}、`ssh_config(5)`{.literal}、`ssh_config(5)`{.literal}、`update-crypto-policies(8)`{.literal}
    和 `crypto-policies(7)`{.literal} 手册页
-   [OpenSSH 主页](http://www.openssh.com/){.link}
-   [为使用非标准配置的应用程序和服务配置
    SELinux](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/using_selinux/configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux){.link}
-   [使用 firewalld
    控制网络流量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_firewalls_and_packet_filters/using-and-configuring-firewalld_firewall-packet-filters#controlling-network-traffic-using-firewalld_using-and-configuring-firewalld){.link}
:::
:::
:::
[]{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html}
::: chapter
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#configuring-secure-communication-with-the-ssh-system-roles_securing-networks}第 2 章 使用 SSH 系统角色配置安全通信 {.title}
:::
作为管理员，您可以使用 SSHD 系统角色配置 SSH 服务器和 SSH 系统角色，使用
Ansible 核心软件包在任意数量的 RHEL 系统上一致地配置 SSH 客户端。
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_securing-networks.html#sshd-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSH 服务器系统角色变量 {.title}
:::
在 SSH Server 系统角色 playbook 中，您可以根据您的首选项和限制定义 SSH
配置文件的参数。
如果您没有配置这些变量，则系统角色会生成与 RHEL 默认值匹配的
`sshd_config`{.literal} 文件。
在所有情况下，布尔值在 `sshd`{.literal} 配置中都正确呈现为
`yes`{.literal} 和 `no`{.literal}。您可以使用 list
来定义多行配置项。例如：
``` screen
sshd_ListenAddress:
  - 0.0.0.0
  - '::'
```
呈现为：
``` screen
ListenAddress 0.0.0.0
ListenAddress ::
```
::: variablelist
**SSH 服务器系统角色的变量**
[`sshd_enable`{.literal}]{.term}
:   如果设置为 `False`{.literal}，则角色将被完全禁用。默认值为
    `True`{.literal}。