图6-7 DDK中的MCA管理工具
遗憾的是，在较新的WDK/DDK（如Windows 7或者Windows 10）
中根本找不到上述两个例子，不知出于什么原因被移除了。
 老雷评点 
DDK中的例子越来越少，估计是在升级时某些例子出现了
兼容或者其他问题，于是最简单的解决方法就是删除。岂不知在
删除一个个经典示例的同时，也会对Windows的未来造成伤害。
当有不可纠正的机器检查错误发生时，Windows会出现蓝屏
（BSOD），并终止系统运行，对应的Bug Check编号是
0x9C（MACHINE_CHECK_EXCEPTION）。对于支持MCA和处理器，
4个参数分别如下。
参数1：发生错误的错误报告寄存器组编号。
参数2：包含MCA异常信息的MCA_EXCEPTION结构体地址。
参数3：发生错误的MCi_STATUS寄存器的高32位。
参数4：发生错误的MCi_STATUS寄存器的低32位。
比如，打开作者搜集的一个9c蓝屏时产生的转储文件，可以看到如
下停止码和参数：
BugCheck 9C, {0, fffff801050b8ba0, 0, 0}
大括号中的第二个参数是MCA_EXCEPTION结构体的地址，可以
这样观察：
0: kd> dt _MCA_EXCEPTION fffff801050b8ba0
nt!_MCA_EXCEPTION
   +0x000 VersionNumber    : 1
   +0x004 ExceptionType    : 0 ( HAL_MCE_RECORD )
   +0x008 TimeStamp        : _LARGE_INTEGER 0x1d1476c`71b7e224
   +0x010 ProcessorNumber  : 0
   +0x014 Reserved1        : 0
   +0x018 u                : 
   +0x038 ExtCnt           : 0
   +0x03c Reserved3        : 0
   +0x040 ExtReg           : [24] 0
Windows Vista操作系统设计了更完善的机制来管理硬件一级的错
误，这一机制称为WHEA（Windows Hardware Error Architecture）。我
们将在第17章中详细介绍操作系统对MCA的支持机制及WHEA。
6.3.4 在Linux系统中的应用
浏览Linux内核的源代码，可以在kernel/cpu/mcheck/目录下找到与
机器检查有关的多个源文件。这些源文件中，mce.c是核心，里面包含
了如下两个重要的初始化函数。
mcheck_cpu_init，用于检测处理器的机器检查特征。这个函数会被
外部的CPU初始化函数（identify_cpu，位
于/arch/x86/kernel/cpu/common.c）所调用。
mcheck_init_device。它会调用subsys_system_register创建一个子系
统，然后调用mce_device_create为每个CPU创建一个设备对象。对
于每个设备对象，会创建多个属性。利用Linux内核虚拟文件系
统，可以观察这些设备对象（子目录）和属性（文件）。
例如，对于作者使用的SENY MINI PC系统，
在/sys/devices/system/machinecheck目录下可以看到4个子目录：
machinecheck0~ machinecheck3。
/sys/devices/system/machinecheck$ ls
machinecheck0  machinecheck1  machinecheck2  machinecheck3  power  uevent
每个子目录对应一个CPU，进入到其中的一个，比如
machinecheck0，可以看到多个属性文件：
/sys/devices/system/machinecheck/machinecheck0$ ls
bank0  bank2  bank4  bank6 cmci_disabled  ignore_ce  power  tolerant ueven
t bank1  bank3  bank5 check_interval  dont_log_ce monarch_timeout  subsyst
em  trigger
在mce.c中定义了一个全局变量mca_cfg，其结构体定义为：
struct mca_config {
   bool dont_log_ce;
   bool cmci_disabled;
   bool lmce_disabled;
   bool ignore_ce;
   bool disabled;
   bool ser;
   bool bios_cmci_threshold;
   u8 banks;
   s8 bootlog;
   int tolerant;
   int monarch_timeout;
   int panic_timeout;
   u32 rip_msr;
};
在使用KGDB调试时，可以使用如下命令来观察这个结构体，了解
MCA有关的配置信息：
(gdb) p mca_cfg
$1 = {dont_log_ce = false, cmci_disabled = false, lmce_disabled = false, i
gnore_ce = false, disabled = false, ser = false, bios_cmci_threshold = fal
se, banks = 7 '\a', bootlog = -1 '\377', tolerant = 1, monarch_timeout = 1
000000, panic_timeout = 30, rip_msr = 0}
在mce.c中，经常可以看到一个名为mce的结构体，其定义如下：
struct mce {
   __u64 status;
   __u64 misc;
   __u64 addr;
   __u64 mcgstatus;
   __u64 ip;
   __u64 tsc;             /* cpu time stamp counter */
   __u64 time;            /* wall time_t when error was detected */
   __u8  cpuvendor;       /* cpu vendor as encoded in system.h */
   __u8  inject_flags;    /* software inject flags */
   __u8  severity;
   __u8  usable_addr;
   __u32 cpuid;          /* CPUID 1 EAX */
   __u8  cs;             /* code segment */
   __u8  bank;           /* machine check bank */
   __u8  cpu;            /* cpu number; obsolete; use extcpu now */
   __u8  finished;       /* entry is valid */
   __u32 extcpu;         /* linux cpu number that detected the error */
   __u32 socketid;       /* CPU socket ID */
   __u32 apicid;         /* CPU initial apic ID */
   __u64 mcgcap;         /* MCGCAP MSR: machine check capabilities of CPU 
*/
};
简单来说，这个结构体是用来机器检查异常的档案，因为机器检查
异常是CPU相关的，所以在mce.c中，使用DEFINE_PER_CPU宏为每个
CPU定义了两个变量：mces_seen和injectm：
static DEFINE_PER_CPU(struct mce, mces_seen);
DEFINE_PER_CPU(struct mce, injectm);
前者用来描述发生在所属CPU的机器检查异常的详细信息，后者用
来实现MCE注入，通常用于测试。注入MCE的简单步骤如下。
① 先执行sudo modprobe mce-inject加载mce-inject驱动。
② 下载和编译mce-inject测试工具。
$ git clone https://github.com/andikleen/mce-inject.git
$ sudo apt-get install flex bison
$ cd mce-inject
$ make
③ 执行mce-inject程序注入错误，比如sudo ./mce-inject
test/corrected，参数是一个文本文件，内容包含着注入错误的详细参
数。
执行cat /proc/interrupts观察系统中的中断信息，可以看到有两行与
MCE有关的信息：
MCE:          0          0          0          0   Machine check exception
s
MCP:         21         21         20         20   Machine check polls
上面一行是MCE异常，与Windows中的KiMcheckAbort作用类似。
下面一行是计时器（timer）性质的，用于定期检查（轮询）是否有机器
检查错误发生。中间的 4 列数字代表对应异常和中断在每个CPU上的发
生次数（系统中共有4个逻辑CPU）。
 老雷评点 
如果读者希望此处看到关于ARM一节，此亦老雷之所望。
不过搜遍ARM ARM（两个ARM含义不同，见第2章），并没有
与MCA类似之设施，或许将来会有，或许已经存在，但秘而不
宣。
6.4 本章小结
本章介绍了IA CPU的机器检查架构（MCA）。MCA既代表了CPU
自身的可调试性，同时也对调试系统级错误及硬件错误提供了支持。
参考资料
[1] Intel 64 and IA-32 Architectures Software Developer’s Manual
Volume 3A. Intel Corporation.
[2] Intel 64 and IA-32 Architectures Software Developer’s Manual
Volume 3B. Intel Corporation.
[3] Tom Shanley. The Unabridged Pentium 4: IA-32 Processor
Genealogy[M]. Boston: Addison Wesley, 2004.
第7章 JTAG调试
大多数软件调试任务是在可以启动的系统上进行的。这些系统上已
经具有了基本的运行环境，可以启动到图形化的操作界面或某种形式的
命令行，可以运行调试器或基本的调试工具。那么，如果在基本的启动
过程中出现故障，比如系统开机后还没有启动到任何可以操作的界面就
停滞不前了，应该如何调试呢？当开发一个新的计算机系统（比如主
板）或基本的启动软件及系统软件时也有类似的问题。针对这些问题的
一种基本解决方案就是使用基于JTAG技术的硬件调试工具。硬件调试
工具的最大优点就是不需要在目标系统上运行任何软件，可以在目标系
统还不具备基本的软件环境时进行调试，因此，JTAG调试非常适合调
试BIOS、操作系统的启动加载程序（boot loader），以及使用软件调试
器难以调试的特殊软件。
本章首先介绍硬件调试工具的简单发展历程（见7.1节），然后介
绍JTAG的工作原理（见7.2节）和典型应用（见7.3节）。7.4节和7.5节
将分别介绍英特尔CPU和ARM CPU的JTAG支持、调试端口和硬件调试
器。
7.1 简介
随着印刷电路板（Print Circuit Board，PCB）和集成电路
（Integrated Circuit，IC）的不断发展和普及，验证和调试PCB及IC的难
度也在不断加大。早期的芯片大多管脚较少且封装工艺简单，例如8086
有40个管脚，使用的是DIP（Dual In-Line Package）封装方式。当这样
的芯片安插在电路板上后，可以很容易地测试到每个管脚的信号。另
外，当时电路板的面积也相对较大，线路比较稀疏，可以比较容易测量
到各个管脚或元器件的电压、波形等信息。
不过，单纯观察某几个管脚的信号通常难以解决比较复杂的问题，
比如某个芯片与其他芯片间的通信问题，于是在20世纪70年代出现了在
线仿真（In-Circuit Emulation，ICE）技术。
7.1.1 ICE
简单来说，ICE调试就是用一个专门的仪器（调试工具）暂时替代
要调试的芯片（通常是微处理器），让其与被调试系统的其他硬件一起
工作，并运行被调试的软件，这个仪器会模拟原来芯片的功能，因此人
们通常将该仪器称为仿真器（emulator）。由于仿真器是针对调试目的
而设计的，因此它集成了各种调试功能，比如单步执行、观察寄存器
等。
典型的ICE调试通常由3大部分组成：被调试的目标系统（又称下位
机）、用于调试的主机（又称上位机）和仿真器。仿真器通过专门设计
的接口接入到目标系统中，并且通过电缆和上位机相连接。
ICE调试技术一出现，很快就被广泛地使用，直到今天，ICE调试
仍然是调试嵌入式系统的一种常用方法。可以进行单机内核调试的著名
软件调试器SoftICE的名称就来源于硬件仿真器，暗指具有类似于
ICE（In-Circuit Emulation）的强大功能。
ICE调试的主要问题是调试不同类型或型号的芯片（微处理器）通
常需要使用不同的仿真器。因为仿真器与目标系统的连接方式是与目标
芯片的封装结构紧密相关的，要使仿真器连入目标系统，通常必须使用
针对目标芯片开发的仿真器。为了缓解这一问题，很多调试工具厂商把
仿真器与目标系统连接的部分（仿真头，header）独立出来，以便增加
仿真器的适用面，但仍没有从根本上解决问题。另外，芯片的升级速度
通常超过仿真器的发展速度，一个新的芯片或者现有芯片的新版本出现
后，能够仿真它的仿真器要过一段时间才能出现，难以及时满足市场的
需要。
7.1.2 JTAG
当传统方式的ICE调试遇到以上问题的同时，最原始的手工测试方
法（直接测量管脚或元器件）也变得越来越困难。一方面，随着集成电
路技术的发展，在芯片功能不断增强的同时，芯片的管脚数量不断增
加，封装方式也不断革新。如采用LGA775封装的奔腾4 CPU有775个管
脚，需要通过专门的插槽固定在主板上，这样不仅从正面看不到管脚，