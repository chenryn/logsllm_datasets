6.82%
0.25%
1.50%
0.85%
3.23%
14.51%
3.43%
0.09%
17.01%
4.35%
4.03%
40.83%
13.55%
54.37%
in segs
0.92%
2.45%
0.36%
1.04%
0.82%
3.30%
8.89%
10.61%
0.11%
19.52%
4.47%
3.04%
44.03%
22.94%
66.97%
Youku
in passwords
0.80%
2.11%
0.30%
0.92%
0.73%
2.91%
7.77%
9.41%
0.09%
17.22%
3.96%
2.65%
38.60%
20.36%
58.94%
in segs
3.21%
8.36%
0.46%
3.54%
2.17%
3.55%
21.29%
0.81%
0.16%
42.92%
7.56%
1.10%
68.34%
6.62%
74.96%
XATO
in passwords
1.16%
3.03%
0.16%
1.30%
0.79%
1.30%
7.74%
0.30%
0.06%
15.79%
2.79%
0.40%
25.04%
2.44%
27.47%
in segs
2.50%
12.20%
0.61%
2.65%
2.33%
3.42%
23.71%
5.35%
0.15%
32.06%
8.70%
1.08%
64.34%
10.56%
74.90%
Rockyou
in passwords
0.74%
3.60%
0.18%
0.79%
0.69%
1.01%
7.01%
1.59%
0.05%
9.50%
2.58%
0.32%
19.02%
3.14%
22.15%
Table 4: Percentages of passwords containing digit segments.
L is the minimum length of digit segments in the password.
Data Sets
Dodonew
Youku
XATO
Rockyou
All
16,234,988
47,607,007
9,997,983
32,584,165
L > 0
88.55%
93.19%
57.65%
54.03%
L > 1
84.40%
90.75%
46.18%
42.47%
L > 2
80.05%
87.84%
36.56%
29.45%
patterns are relatively simple. In contrast, they take less percentage
in Chinese passwords, but still up to 8.89% ∼ 18.16%. As for the
coverage of Information Represented with Digits, the proportion
of Postcode in the English password sets is relatively higher than
that in Chinese password sets. In contrast, Idiom and Phone are
more popular in Chinese passwords than in English passwords.
Date is the tag that accounts for the largest proportion in both
Chinese and English passwords (except in Youku), which shows
that Date plays an important role in the construction of passwords,
especially in English passwords. Finally, it is rather common to
combine several tagged segments in Chinese passwords, whose
proportion is comparable to that of Date.
five types, the full password (POS_ALL), the front of the pass-
word (POS_START), the end of the password (POS_END), the ex-
act middle of the password (POS_MIDDLE), and other positions
(POS_OTHER).
As is shown in Figure 1, the first three positions, POS_ALL,
POS_END, and POS_START describe the location of almost all
tagged segments (94.08% ∼ 98.12%). In both Chinese and English
passwords, POS_END and POS_ALL are the most common posi-
tions, but with a slight difference. In Chinese passwords, tagged
segments often appear at the end of the password, appended af-
ter a string composed of letters or special symbols. In contrast, in
English passwords, tagged segments as full passwords take a larger
proportion. In addition, even though POS_START is much less com-
mon than POS_ALL and POS_END, it still takes a considerable
proportion (around 10%) compared to other types of positions.
Figure 1: Location distribution of all tagged segments.
4.2.2 Distribution of Location. We further analyze the location
distributions of matched segments. We divide the locations into
Figure 2: Length distribution of tagged segments.
4.2.3 Distribution of Length. Figure 2 shows the length distribution
of all tagged segments. The results show that the length of most
tagged segments (over 99.30% tagged segments in all password
sets) is distributed from 3 (determined by the Min_Len) to 12. The
segments with even length are significantly more than those with
odd length, and tagged segments composed of 6 and 8 digits are
most common in both Chinese and English passwords (except for
Rockyou, which is 4 and 6). In addition, for segments matching
Repeat+, we further analyze the length of their repeating units, like
0%10%20%30%40%50%60%70%80%90%100%DodonewYoukuXATORockyouPercentageDataSetPOS_ALLPOS_ENDPOS_STARTPOS_MIDDLEPOS_OTHER0%10%20%30%40%50%60%70%80%90%100%DodonewYoukuXATORockyouPercentageDataSet1234567891011121314≥150%5%10%15%20%25%30%35%LengthPercentDodonewYoukuXATORockyou518Digit Semantics based Optimization for Practical Password Cracking Tools
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
12 in 121212. The results show that most units (over 99.8% of all
matched segments) are of a length less than 9.
4.3 Further Evaluation
4.3.1 Coverage of Tags in Social Media Data. To show the compre-
hensiveness of our digit semantics analysis, we test the coverage of
our tags not only in passwords but also in social media data sets,
where the digit segments tend to have a certain meaning.
We analyze a Weibo data set [51] with about 292 thousand Chi-
nese tweets and a Twitter data set [6] with 16 million tweets. The
results are satisfactory, with over half digit segments are covered.
That is, in Weibo, 59.71% of all digit segments (with length more
than 2) match the first 11 digit semantics tags, with 0.43% more if
including the Combination tag; it is similar in Twitter, with 52.56%
of digit segments match the 11 single tags and 0.27% more if Com-
bination is included. Note that there are many digit strings solely
representing quantity in the data from social networks. We argue
that they could not help to improve the password cracking accord-
ing to our brief study.
4.3.2 Comparison to Random Model. In addition, to distinguish
the impact of random digit strings and passwords on our analysis
of digit semantics, we compare the percentage of tagged segments
(coverage of our tags) extracted from the password sets with that
extracted from the random digit strings (random models). For each
password set, we extract all digit segments with lengths higher
than 2 and generate the corresponding random model with the
same amount and the same length distribution. The results are
all consistent with the fact that the passwords contain rich digit
semantics. That is, the percentages obtained in password sets are
51.72% ∼ 87.05% more than that in random models. Moreover, for
each group, a Chi-squared test is conducted. The test result further
proves the significant difference between the coverage in passwords
and in random models (with P = 0 for each group), showing that the
random number strings have little effect on the results we obtained
in real passwords.
5 DIGIT SEMANTICS BASED OPTIMIZATION:
DESIGN AND ENFORCEMENT
In this section, to enable the cracking tools to utilize the digit
semantics in passwords, we design and enforce new operations in
JtR and Hashcat according to the analysis on the digit semantics
in passwords and the idea of rule-based attack.
5.1 Two New Operations
Based on the analysis results from Section 4 and drawing on the
ideas of deformation and replacement from the built-in operations
of JtR and Hashcat, we design two operations, namely Tag_Trans
and Tag_Replace, to enable the detection, transformation, and re-
placement on the level of digit semantics in those cracking tools. We
refer to these operations collectively as digit semantics operations
and the rules constructed from them as digit semantics rules. Note
that both Tag_Trans and Tag_Replace need to detect the segments
that match the assigned tag. When processing a rule, we use a
parameter to indicate the starting position or the ending position
of the segment before detection. In this case, it costs little time to
conduct a maximum matching. Therefore, instead of conducting the
detection in Section 3.2, which requires the digit segment matches
a tag as a whole string, we use the maximum matching here to
expand the attacks based on our analysis to crack more passwords.
5.1.1 Operation: Tag_Trans. For tags that are highly structured
and easy to deform, including Repeat, Continuation, Leap, Re-
peat+, Palindrome, and Date, we design a new operation, namely
Tag_Trans, to transform matched segments according to the specific
format.
We assign a new operation name, i.e., B, and four parameters,
including tag, pos, p1, and p2. The parameter tag indicates the
tag type with index (shown in Table 1). We use capital letters to
indicate the indexes larger than 9, starting from A which indicates
10. The parameter pos indicates the location of the digit segment
that needs to be checked and transformed. We use 1, 2, and 3 to
refer to POS_ALL, POS_END, and POS_START. Besides, we provide
a more precise representation method by using capital letters to
indicate the offset of the segment (e.g., A refers to the offset of 1)
and using lowercase letters to indicate the offset from the end (e.g.,
a means that the offset from the end of the segment to the end
of the word is 1). The p1 and p2 have different usages in different
rules.
Tag_Trans processes the word differently according to the tag:
For Repeat, Continuation, and Leap, Tag_Trans adjusts the length
of the matched digit segment in the word, like transforming the
word alice123 to alice1234, alice12345, etc. We use p1 (mini-
mum length) and p2 (maximum length, right-hand half-open inter-
val) to indicate the length range of the transformed segment.
For Repeat+ and Palindrome, Tag_Trans transforms the digit seg-
ment within the length limitation to new segments matching the in-
dicated tag, like transforming the word alice123 to alice123123,
etc., or to alice12321 and alice123321. We use p1 and p2 to in-
dicate the maximum length of the segment to be transformed and
the maximum length of the transformed segment, respectively.
For Date, Tag_Trans transforms the matched segment into a
series of new segments that match a specific date format, like trans-
forming the word alice9701 (YYMM) to alice1900, alice1901,
etc. (YYYY). We use p1 to indicate the date format we intend to find
in the word being processed, and p2 to indicate the date format to
which the matched digit segment will be transformed. Note that p1
and p2 can indicate the same date format, which means traversing
the date in the original date format. In addition, for date formats
with a day field (except MMDD and DDMM), like YYMMDD with
the day field DD, we only replace the MM field and YY field since
the number of guesses would be too large if the day field is added.
In other words, the day field in the converted date format should be
determined by the origin date segment. Therefore, the conversion
from a date format that does not contain a day field to one with a
day field and the conversion from a date format with DD to one
with D are both eliminated (D may not fully describe DD).
5.1.2 Operation: Tag_Replace. The second operation is designed
for all tags, with a new operation name F, and four parameters
tag, pos, p1, and p2. Through the operation, we can detect the
segment matching tag at the location indicated by pos and replace
the matched segment with a dictionary. There are 13 dictionaries in
total. Each dictionary includes a list of common segments matching
519ACSAC ’21, December 6–10, 2021, Virtual Event, USA
H. Zhang, C. Wang, W. Ruan, et al.
a corresponding tag (note that we also employ the dictionary of
Subword). All dictionaries can be generated through our extraction
tool, as discussed in Section 3.2.2. We use p1 to indicate which
dictionary we use to replace the matched segment. The parameter
p2 is used in the matching processing of Postcode, Idiom, and
Combination, which we will discuss in Section 5.3.
5.2 Digit Semantics Rules
We can construct a mangling rule with a single digit semantics
operation by setting the four parameters, i.e., tag, pos, p1, and p2.
For example, if we intend to transform a date string matching
YYYY at the end of a word into date strings matching YYMM,
we can construct a mangling rule with Tag_Trans (B) and set the
four parameters to 9 (tag index of Date), 2 (POS_END), 1 (index
of YYYY), and 4 (index of YYMM), respectively. By doing so, we