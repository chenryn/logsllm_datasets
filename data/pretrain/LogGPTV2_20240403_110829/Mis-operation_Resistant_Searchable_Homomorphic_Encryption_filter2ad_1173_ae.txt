(Enc(b1), Enc(b2)), computes b1b2, computes M1M2−b1b2 by
decrypting Enc(M1M2 − b1b2), and ﬁnally computes M1M2.
5.4.2 Employing the Catalano-Fiore Transformation
Let G := e(g, g). For encrypting a plaintext M ∈ Zt,
randomly choose b $← ZT for T ≥ t, compute a = M −
b mod T and C = MR-SHE.Enc(pk, ω, Gb), and the cipher-
text is (a, C). Let (a1 := M1−b1, C1) and (a2 := M2−b2, C2)
be two ciphertexts. The multiplication of these ciphertexts is
(MR-SHE.Enc(pk, ω, GM1M2−b1b2 mod T ), C1, C2), whose ﬁrst
component is computable by MR-SHE.Enc(pk, ω, a1a2)+a1C2+
a2C1. Here “+” means an evaluation by MR-SHE.Eval, and
the multiplication of a scalar a ∈ ZT and a ciphertext C
means a-times evaluations of C. Then we can obtain M1M2
by decrypting each component and computing these discrete
logarithms.
Using the above multiplicative homomorphic operation,
a vector inner product can be computed as follows. Let
x0 := (x0,1, . . . , x0,ℓ) ∈ Zℓ
t and x1 := (x1,1, . . . , x1,ℓ) ∈ Zℓ
t
be two ℓ-dimensional vectors, and each encrypted vectors
are ((ai,1, Ci,1), . . . , (ai,ℓ, Ci,ℓ)) for i = 0, 1. Then the inner
product of the encrypted vectors is (Pℓ
j=1 MR-SHE.Enc(pk, ω,
Gx0,j x1,j −b0,j b1,j mod T ), {C0,j, C1,j}ℓ
j=1), which contains 2ℓ+
1 components. Decrypting 2ℓ + 1 components and com-
puting these discrete logarithms, the desired inner product
Pℓ
j=1 x0,jx1,j can be computed.
As a remark, since the above inner product operation is
over ZT , but we want to compute it over Z, the modulus
T must be larger than the result of inner product. For ℓ-
dimensional vector of plaintext space Zt, the inner product
is at most ℓ(t − 1)2, so we set T = ℓ(t − 1)2 + 1. Then
the maximum value of the discrete logarithm in the inner
product computation is maxdl = 3ℓ(T − 1)2 = 3ℓ3(t − 1)4.
For example, the inner product of 1024-dimensional binary
vectors requires T = 1025 and maxdl ≈ 231.6. We employ
Baby-step Giant-step approach for computing the discrete
logarithm, and limit maxdl to 241 for our experiments.
For preventing that one encrypts non-Zt elements, we can
employ the technique of restrictive PKE [30] which guar-
antees that a plaintext of a ciphertext is in Zt by adding
non-interactive zero-knowledge proofs of membership, as in
the attempt of [31]. In our implementation, simply we as-
sume that x0, x1 ∈ Zℓ
t. Moreover, due to the Catalano-Fiore
transformation, a ciphertext additionally consists of a0,j and
a1,j respectively. So, we need to slightly modify the security
deﬁnition in order to rule out a trivial CCA attacks, where
an adversary is not allowed to issue a decryption query (a, C)
if C ∈ D. To avoid such an undesirable modiﬁcation, fully
or somewhat homomorphic property is required. We leave
these topics as future works of this paper.
5.4.3
Implementation Result: Both Vectors are En-
crypted
We show the implementation result of our scenario given
in Section 1.5 in Fig 3 where two vectors associated with
a disease name are encrypted by a public key of the re-
searcher, and the server computes its inner product.
In
this setting, the hospitals can fully delegate the computa-
tion of ciphertexts of inner products to the server. Here,
we treat the case of binary vectors (t = 2). Let ℓ be the
dimension of vectors (which is the number of total sub-
jects n in the scenario), and the x-axis indicates log2(ℓ).
We show the cases of ℓ = 4, 8, 16, . . . , 8192 = 213, respec-
tively. IP Time means that the running time of computing
a ciphertext of the inner product (Pℓ
j=1 MR-SHE.Enc(pk, ω,
Gx0,j x1,j −b0,j b1,j mod T ), {C0,j, C1,j}ℓ
j=1). We show the ac-
tual IP Time in Fig 3. Dec after IP means that the running
time to decrypt the ciphertext and obtain the inner product
Pℓ
i=1 x0,ix1,i mod T . We omit the actual running times of
Dec after IP. Del ratio means how much a receiver (the re-
searcher) can delegate the computation of inner products to
the server, i.e., IP Time/(IP Time+Dec after IP).
)
c
e
s
m
i
(
e
m
T
g
n
n
n
u
R
i
80000
70000
60000
50000
40000
30000
20000
10000
0
0
IP Time (msec)
Dec after IP (msec)
Del ratio (%)
38.7 
36.6 
35.9 
35911.1 
35.2 
35.0 
34.4 
37.3 
36.1 
35.3 
35.1 
34.8 
33.8 
25.8 
75.3 
276.1 
1101.4 
17857.2 
8882.6 
4424.1 
2204.6 
42.2 
2
4
142.1 
6
552.6 
8
10
12
14
l
D
e
e
g
a
t
i
o
n
R
a
t
i
o
(
%
)
100
90
80
70
60
50
40
30
20
10
0
Log2 (Dimension of Vectors)
Figure 3: Benchmarks (Both Vectors are Encrypted)
A ciphertext of inner products can be eﬃciently computed
by the server even for high-dimensional vectors. For exam-
ple, for 8192-dementional vectors, the server can compute
the ciphertext of the inner product approximately 35 sec-
onds. One drawback of this setting is the decryption costs
since the number of decryptions depends on the vector di-
mension ℓ due to the Catalano-Fiore transformation, and
the delegation ratio is approximately 35%. Nevertheless,
224our scheme seems eﬃcient in practice. For example, for
8192-dementional vectors, the researcher can decrypt the
ciphertext approximately 70 seconds. For relatively small-
dimensional vectors, e.g., ℓ < 26, both computation of an
inner product of ciphertexts and that of a decryption are
within millisecond order.
5.4.4
Implementation Result: One Vector is Encrypted
Next, we give benchmarks of inner products when a vec-
tor x0 is encrypted but the other vector x1 is not encrypted
In this setting6, the hospital 1 has a role of
in Fig 4.
the server. The hospital 2 encrypts a vector with a key-
word, and sends the encrypted vectors to the hospital 1.
The hospital 1 checks whether all components of the en-
crypted vector are associated with the same keyword, runs
the MR-SHE.mEval algorithm, and sends the resultant ci-
phertext to the researcher. Mis-operation resistant property
works for preventing that the hospital 1 performs homomor-
phic operations against ciphertexts associated with diﬀerent
keywords. Though the hospital 1 cannot delegate the com-
putation of ciphertexts of inner products to the server, one
advantage of this setting is that additive homomorphic prop-
erty is enough to compute inner products, and the researcher
needs to run the decryption algorithm only once (which re-
quires approximately 5 msec) regardless of the dimension of
vectors ℓ. So, the delegation ratio becomes higher accord-
ing to increase of ℓ. Moreover, we do not have to modify
the security deﬁnition in contrast to the case of employing
the Catalano-Fiore transformation. So, we can say that the
proposed scheme is practically eﬃcient in this setting.
98.5 
99.6 
99.8 
100
94.8 
91.1 
73.5 
86.1 
81.0 
76.8 
IP Time (msec)
Dec after IP (msec)
Del ratio (%)
97.2 
99.2 
99.7 
5089.9 
2504.0 
6000
5000
4000
3000
2000
1000
)
c
e
s
m
i
(
e
m
T
g
n
n
n
u
R
i
l
D
e
e
g
a
t
i
o
n
R
a
t
i
o
(
%
)
90
80
70
60
50
40
30
20
10
0
13.6 
20.4 
49.1 
1216.7 
164.1 
611.8 
312.6 
0
0
15.9 
2
4
29.7 
6
86.1 
8
10
12
14
Log2 (Dimension of Vectors)
Figure 4: Benchmarks (One Vector is Encrypted)
5.5 Evaluation for Tested Ciphertexts
The MR-SHE.mEval algorithm also can skip the integrity
check procedure if the input ciphertexts have been tested
since then the ciphertexts are guaranteed that these are as-
sociated with the same keyword. In this section, we give the
ratio of the integrity check procedure in the MR-SHE.mEval
algorithm and in the computation of the ciphertext of inner
products in Fig 5, and show that how much computations
can be skipped for tested ciphertexts. For the MR-SHE.mEval
algorithm, the x-axis indicates log2(L) where L is the num-
ber of input ciphertexts, and for other cases, the x-axis in-
6This setting is employed by Shimizu et al. [31] for evaluat-
ing a distance among chemical compounds.
dicates log2(ℓ) where ℓ is the dimension of vectors. P and C
means the computation of inner products when a vector x0
is encrypted but the other vector x1 is not encrypted. C and
C means that the computation of inner products when both
vectors are encrypted. Even for the case that both vectors
are encrypted, the occupancy of the integrity check proce-
dure is more than 50 %. In other cases, almost computa-
tions are subject to occupancy by integrity check procedure.
So, in the actual situation, where ﬁrstly the server searches
ciphertext and secondly the server performs homomorphic
operations against ciphertexts which have been guaranteed
that they are associated with the same keyword, we can skip