```
# whereis [-bmsu] dirname/filename
```
- locate
可以用关键字或者正则表达式进行搜索文件
locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库
```
# locate [-ir] keyword
-r：正则表达式
```
- find
可以使用文件的属性和权限进行搜索
```
# find [basedir] [option]
example: find . -name "shadow*"
```
与时间有关的选项：
```
-mtime  n ：列出在 n 天前的那一天修改过内容的文件
-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件
-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件
-newer file ： 列出比 file 更新的文件
```
![2020359306](/assets/2020359306.png)
与文件拥有者和所属群组有关的选项：
```
-uid n
-gid n
-user name
-group name
-nouser ：搜索拥有者不存在 /etc/passwd 的文件
-nogroup：搜索所属群组不存在于 /etc/group 的文件
```
与文件权限和名称有关的选项：
```
-name filename
-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k
-type TYPE
-perm mode  ：搜索权限等于 mode 的文件
-perm -mode ：搜索权限包含 mode 的文件
-perm /mode ：搜索权限包含任一 mode 的文件
```
## 压缩与打包
### 压缩指令
- gzip
使用 zcat、zmore、zless 来读取压缩文件的内容
```
$ gzip [-cdtv#] filename
-c ：将压缩的数据输出到屏幕上
-d ：解压缩
-t ：检验压缩文件是否出错
-v ：显示压缩比等信息
-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6
```
- bzip2
使用bzcat、bzmore、bzless、bzgrep读取压缩文件的内容
```
$ bzip2 [-cdkzv#] filename
-k ：保留源文件
```
- xz
查看命令：xzcat、xzmore、xzless、xzgrep
### 打包
压缩指令只能对一个文件进行压缩，打包能够将多个文件打包成一个大文件
- tar
```
-z ：使用 zip；
-j ：使用 bzip2；
-J ：使用 xz；
-c ：新建打包文件；
-t ：查看打包文件里面有哪些文件；
-x ：解打包或解压缩的功能；
-v ：在压缩/解压缩的过程中，显示正在处理的文件名；
-f : filename：要处理的文件；
-C 目录 ： 在特定目录解压缩。
```
一些范例
使用方式|	命令
-|-
打包压缩|	tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称
查 看	|tar -jtv -f filename.tar.bz2
解压缩|	tar -jxv -f filename.tar.bz2 -C 要解压缩的目录
## Bash
通过Shell来请求内核提供服务，Bash是Shell的一种
### 特性
- 命令历史
- 命令文件补全
- 命令别名
- shell脚本
- 通配符
### 变量操作
```sh
# 变量赋值
x=abc
# 输出变量
echo $x # 输出 abc
x="环境变量 = $PATH" # 输出 环境变量 = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
x='x$PATH' # 单引号内不会进行变量替换 它会输出 x$PATH
version=$(uname -r) # 将指令执行结果赋值给变量
```
```
$ declare [-aixr] variable
-a ： 定义为数组类型
-i ： 定义为整数类型
-x ： 定义为环境变量
-r ： 定义为 readonly 类型
```
### 指令搜索顺序
- 以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；
- 由别名找到该指令来执行；
- 由 Bash 内置的指令来执行；
- 按 $PATH 变量指定的搜索路径的顺序找到第一个指令来执行。
### 数据流重定向
重定向指的是使用文件代替标准输入、标准输出和标准错误输出
有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向
1	|代码|	运算符
-|-|-
标准输入 (stdin)|	0|	 或 >>
标准错误输出 (stderr)|	2|	2> 或 2>>
```sh
ls &> result # 将ls的所有输出都定向到result文件
```
## 管道指令
将一个命令的标准输出作为另一个命令的标准输入
```shell
ll | cat -n # 将ll的结果作为cat的输入
```
### 提取指令
- cut
```
$ cut
-d ：使用分隔符对每行进行分割
-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间
-c ：以字符为单位取出区间
```
```sh
last | cut -d ' ' -f 1 # 取出登录的用户
```
### 排序指令
- sort
```
$ sort [-fbMnrtuk] [file or stdin]
-f ：忽略大小写
-b ：忽略最前面的空格
-M ：以月份的名字来排序，例如 JAN，DEC
-n ：使用数字
-r ：反向排序
-u ：相当于 unique，重复的内容只出现一次
-t ：分隔符，默认为 tab
-k ：指定排序的区间
```
```sh
last | cut -d ' ' -f 1 | sort # 对登录用户进行排序
```
- uniq
去除重复数据
```
$ uniq [-ic]
-i ：忽略大小写
-c ：进行计数
```
```sh
last | cut -d ' ' -f 1 | sort |uniq -c # 统计用户登录次数
```
### 双向输出重定向
- tee
```sh
cat my.link  |tee result # 同时将输出输出到屏幕和result文件
```
### 字符转换指令
- tr
对字符替换
```sh
last | tr '[0-9]' '*' # 把数字替换成*
```
- col
将tab转换为空格
- expand
将 tab 转换一定数量的空格，默认是 8 个
## 正则表达式
### grep
globally search a regular expression and print，使用正则表示式进行全局查找并打印。
```
$ grep [-acinv] [--color=auto] 搜寻字符串 filename
-c ： 统计匹配到行的个数
-i ： 忽略大小写
-n ： 输出行号
-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行
--color=auto ：找到的关键字加颜色显示
```
```sh
last |grep 'pts/[0-9]' # 找出pts登录的
```
### printf
```sh
printf '%10s \n'  $(last |grep 'pts/[0-9]') # 格式化输出，非管道命令，需要通过$()进行数据传递
```
### awk
awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：$n，n 为字段号，从 1 开始，$0 表示一整行
```sh
last -n 5 | awk '{print $1 "\t" $3}' # 最近5个登录的用户及ip
```
## 进程管理
### 查看进程
- ps
```sh
ps -l # 查看自己的进程
ps aux # 查看系统所有进程
```
- pstree
```sh
pstree -A # 查看所有进程树
```
- top
```sh
top -d 2 # 2秒刷新一次查看进程
```
### 进程状态
状态|	说明
-|-
R|	running or runnable (on run queue) 正在执行或者可执行，此时进程位于执行队列中。
D|	uninterruptible sleep (usually I/O) 不可中断阻塞，表示进程正在跟硬件交互，并且交互过程不允许被其他进程或中断打断
S|	interruptible sleep (waiting for an event to complete) 可中断阻塞，此时进程正在等待某个事件完成。
Z|	zombie (terminated but not reaped by its parent) 僵死，进程已经终止但是父进程还没有回收它的资源（比如进程的描述符、PID 等）
T|	stopped (either by a job control signal or because it is being traced) 结束，进程既可以被作业控制信号结束，也可能是正在被追踪。
I| idle 空闲状态，用在不可中断睡眠的内核线程上，硬件交互导致的不可中断进程用 D 表示，但对某些内核线程来说，它们有可能实际上并没有任何负载，用 Idle 正是为了区分这种情况
```mermaid
stateDiagram-v2
  D --> R: woken
  R --> Z: exit
  R --> T: signal
  T --> R: signal
  R --> S: interruptible sleep
  S --> R: woken/signal
  R --> D: uninterruptible sleep
```
如果系统或硬件发生了故障，进程可能会在不可中断状态保持很久，甚至导致系统中出现大量不可中断进程
一旦父进程没有通过 wait 、waitpid 处理子进程的终止，还一直保持运行状态，那幺子进程就会一直处于僵尸状态。大量的僵尸进程会用尽 PID 进程号，导致新进程不能创建
### SIGCHLD 
子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会发生在父进程中：
- 得到 SIGCHLD 信号；
  - 子进程发送的 SIGCHLD 信号包含了子进程的信息，比如进程 ID、进程状态、进程使用 CPU 的时间等
- waitpid() 或者 wait() 调用会返回
  - 在子进程退出时，它的进程描述符不会立即释放，这是为了让父进程得到子进程信息，父进程通过 wait() 和 waitpid() 来获得一个已经退出的子进程的信息。
#### wait
父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，之后 wait() 函数会销毁子进程并返回
#### waitpid
作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 options。
pid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD 信号。
options 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 waitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行其它任务
### 孤儿进程
父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程
孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作
### 僵尸进程
一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那幺子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程
如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程