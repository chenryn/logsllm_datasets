        unsigned int old_idx = ~0u;
        do
          {
        if (__builtin_expect (old == p, 0))
          {
            errstr = "double free or corruption (fasttop)";
            goto errout;
          }
        if (have_lock && old != NULL)
          old_idx = fastbin_index(chunksize(old));
        p->fd = old2 = old; // 插入 fastbin
          }
        while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);
        if (have_lock && old != NULL && __builtin_expect (old_idx != idx, 0))
          {
        errstr = "invalid fastbin entry (free)";
        goto errout;
          }
      }
如果 `size` 满足 `fastbin` 的条件，则首先判断 `next_chunk->size` 要满足
    next_chunk->size > 2 * SIZE_SZ
    next_chunk->size system_mem
接着就会找对相应的 `fastbin` ，然后插入 该 `bin` 的第一项。插入前有一个检查
    if (__builtin_expect (old == p, 0))
          {
            errstr = "double free or corruption (fasttop)";
            goto errout;
          }
就是 `p->size` 索引到的 `fastbin` 的第一个指针不能和当前的 `p` 相同，否则会被认为是 `double free`
### 进入 Unsorted bin
如果被 `free` 的这个块不是 通过 `mmap` 获得的，就会进入下面的逻辑
    else if (!chunk_is_mmapped(p)) {
        if (! have_lock) {
          (void)mutex_lock(&av->mutex);
          locked = 1;
        }
        // 得到下一个 chunk 的指针
        nextchunk = chunk_at_offset(p, size);
        // 不能 free top chunk
        if (__glibc_unlikely (p == av->top))
          {
            errstr = "double free or corruption (top)";
            goto errout;
          }
       // nextchunk 不能越界，就是限制了 p->size
        if (__builtin_expect (contiguous (av)
                  && (char *) nextchunk
                  >= ((char *) av->top + chunksize(av->top)), 0))
          {
        errstr = "double free or corruption (out)";
        goto errout;
          }
        /*p 要被标识为 inuse 状态 */
        if (__glibc_unlikely (!prev_inuse(nextchunk)))
          {
            errstr = "double free or corruption (!prev)";
            goto errout;
          }
        nextsize = chunksize(nextchunk);
        // nextsize 在  [ 2 * SIZE_SZ, av->system_mem] 之间
        if (__builtin_expect (nextchunk->size = av->system_mem, 0))
          {
            errstr = "free(): invalid next size (normal)";
            goto errout;
          }
        free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);
        /* 如果 p的前一个块是 free 状态，就向前合并，通过 p->pre_inused 判断*/
        if (!prev_inuse(p)) {
          prevsize = p->prev_size;
          size += prevsize;
          p = chunk_at_offset(p, -((long) prevsize));
          unlink(av, p, bck, fwd);
        }
        if (nextchunk != av->top) {
          // 获得 nextchunk 的下一个 chunk, 的 pre_inused位
          nextinuse = inuse_bit_at_offset(nextchunk, nextsize);
          // 如果 nextchunk 也是 free 状态的，合并
          if (!nextinuse) {
            unlink(av, nextchunk, bck, fwd);
            size += nextsize;
          } else
        clear_inuse_bit_at_offset(nextchunk, 0);
          // 合并的结果放置到 unsorted bin
          bck = unsorted_chunks(av);
          fwd = bck->fd;
          // 防止 unsortedbin 被破坏
          if (__glibc_unlikely (fwd->bk != bck))
        {
          errstr = "free(): corrupted unsorted chunks";
          goto errout;
        }
          p->fd = fwd;
          p->bk = bck;
          if (!in_smallbin_range(size))
        {
          p->fd_nextsize = NULL;
          p->bk_nextsize = NULL;
        }
          bck->fd = p;
          fwd->bk = p;
          set_head(p, size | PREV_INUSE);
          set_foot(p, size);
          check_free_chunk(av, p);
        }
        else {
          size += nextsize;
          set_head(p, size | PREV_INUSE);
          av->top = p;
          check_chunk(av, p);
        }
        // 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate
        if ((unsigned long)(size) >= FASTBIN_CONSOLIDATION_THRESHOLD) {
          if (have_fastchunks(av))
        malloc_consolidate(av);
          if (av == &main_arena) {
    #ifndef MORECORE_CANNOT_TRIM
        if ((unsigned long)(chunksize(av->top)) >=
            (unsigned long)(mp_.trim_threshold))
          systrim(mp_.top_pad, av);
    #endif
          } else {
        /* Always try heap_trim(), even if the top chunk is not
           large, because the corresponding heap might go away.  */
        heap_info *heap = heap_for_ptr(top(av));
        assert(heap->ar_ptr == av);
        heap_trim(heap, mp_.top_pad);
          }
        }
        if (! have_lock) {
          assert (locked);
          (void)mutex_unlock(&av->mutex);
        }
      }
      /*
        If the chunk was allocated via mmap, release via munmap().
      */
大概流程
  * 首先做了一些检查， `p != top_chunk`, `p->size` 不能越界， 限制了 `next_chunk->size`, `p`要处于 `inuse`状态（通过 `next_chunk->pre_inused` 判断） 
  * 接着判断 `p` 的前后相邻块是不是 `free` 状态，如果是就合并
  * 根据此次拿到的 `unsorted bin` 的 大小，如果 `size>=FASTBIN_CONSOLIDATION_THRESHOLD` 就会触发 `malloc_consolidate`
如果 `p` 是通过 `mmap` 获得的，就通过
    munmap_chunk (p);
释放掉他
## Check In Glbc
函数名 | 检查 | 报错信息  
---|---|---  
unlink | p->size == nextchunk->pre_size | corrupted size vs prev_size  
unlink | p->fd->bk == p 且 p->bk->fd == p | corrupted double-linked list  
_int_malloc | 当从fastbin分配内存时 ,找到的那个fastbin chunk的size要等于其位于的fastbin
的大小，比如在0x20的 fastbin中其大小就要为0x20 | malloc():memory corruption (fast)  
_int_malloc | 当从 smallbin 分配 chunk( victim) 时， 要求 victim->bk->fd == victim |
malloc(): smallbin double linked list corrupted  
_int_malloc | 当迭代 unsorted bin 时 ，迭代中的 chunk (cur)要满足，cur->size 在 [2*SIZE_SZ,
av->system_mem] 中 | malloc(): memory corruption  
_int_free | 当插入一个 chunk 到 fastbin时，判断fastbin的 head 是不是和 释放的 chunk 相等 | double
free or corruption (fasttop)  
_int_free | 判断 next_chunk->pre_inuse == 1 | double free or corruption (!prev  
**来源**  
[heap-exploitation](https://github.com/DhavalKapil/heap-exploitation)
# 各种漏洞原理及利用
## 通用的信息泄露思路
当 `chunk` 处于 `free` 状态时，会进入 `bin` 里面，其中的 `fd` 和 `bk` 可以用于信息泄露
  * 分配两个 `0x90` 的 `chunk(p0, p1)`
  * 释放掉 `p0`, `p0` 会进入 `unsorted bin`
  * 分配 `0x90` 的 `chunk`,再次拿到 `p0`, 在 `malloc` 的实现中不会对这些指针进行清空，就可以泄露
如果分配后的内存被 `memset` 清空后，就需要利用一些其他的漏洞才能利用。
> `Unsorted bin` 用于泄露 `libc`
>
> `fastbin` 用于 泄露 `heap` 地址
## Unlink 利用
### 原理
在把 `chunk` 从 `bins` 拿下来时 会触发 `unlink` 操作
    /* Take a chunk off a bin list */
    #define unlink(AV, P, BK, FD) {                                            \
        FD = P->fd;                                   \
        BK = P->bk;                                   \
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))             \
          malloc_printerr (check_action, "corrupted double-linked list", P, AV);  \
        else {                                    \
            FD->bk = BK;                                  \
            BK->fd = FD;                                  \
            if (!in_smallbin_range (P->size)                      \
                && __builtin_expect (P->fd_nextsize != NULL, 0)) {            \
            if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)        \
            || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \
              malloc_printerr (check_action,                      \
                       "corrupted double-linked list (not small)",    \
                       P, AV);                        \
                if (FD->fd_nextsize == NULL) {                    \
                    if (P->fd_nextsize == P)                      \
                      FD->fd_nextsize = FD->bk_nextsize = FD;             \
                    else {                                \
                        FD->fd_nextsize = P->fd_nextsize;                 \
                        FD->bk_nextsize = P->bk_nextsize;                 \
                        P->fd_nextsize->bk_nextsize = FD;                 \
                        P->bk_nextsize->fd_nextsize = FD;                 \
                      }                               \
                  } else {                                \
                    P->fd_nextsize->bk_nextsize = P->bk_nextsize;             \
                    P->bk_nextsize->fd_nextsize = P->fd_nextsize;             \