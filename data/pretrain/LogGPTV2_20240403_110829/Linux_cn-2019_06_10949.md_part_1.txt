---
author: Erik O'shaughnessy
category: 软件开发
comments_data:
- date: '2019-06-12 22:16:31'
  message: 良好的编程习惯很重要
  postip: 58.63.147.248
  username: 来自广东广州的 Chrome 72.0|Windows 10 用户
- date: '2019-06-14 11:46:49'
  message: SYSSEGV&nbsp;&nbsp;这个是书写错误吗， SIGSEGV&nbsp;&nbsp;？
  postip: 218.104.234.210
  username: 来自福建福州的 Chrome 74.0|Windows 7 用户
- date: '2019-06-17 19:35:14'
  message: 有可能不是笔误，但是我目前没找到更多资料。
  postip: 36.101.27.225
  username: linux [Chrome 74.0|Mac 10.14]
- date: '2019-06-17 19:47:44'
  message: 据我初步了解，此处是指 SYSSEGV 这种段错误，但是如果是说信号，则叫做&nbsp;&nbsp;SIGSEGV。估计是作者写糊涂了。
  postip: 36.101.27.225
  username: linux [Chrome 74.0|Mac 10.14]
- date: '2019-11-20 14:22:47'
  message: 受教了
  postip: 119.147.213.34
  username: 来自广东深圳的 Microsoft Edge 18.18363|Windows 10 用户
count:
  commentnum: 5
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 9519
date: '2019-06-08 21:15:00'
editorchoice: false
excerpt: 学习如何构造一个 C 文件并编写一个 C main 函数来成功地处理命令行参数。
fromurl: https://opensource.com/article/19/5/how-write-good-c-main-function
id: 10949
islctt: true
largepic: /data/attachment/album/201906/08/211422umrzznnvmapcwuc3.jpg
permalink: /article-10949-1.html
pic: /data/attachment/album/201906/08/211422umrzznnvmapcwuc3.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12000
reviewer: wxy
selector: lujun9972
summary: 学习如何构造一个 C 文件并编写一个 C main 函数来成功地处理命令行参数。
tags:
- C语言
thumb: false
title: 如何写好 C main 函数
titlepic: true
translator: MjSeven
updated: '2019-06-08 21:15:00'
---
> 
> 学习如何构造一个 C 文件并编写一个 C main 函数来成功地处理命令行参数。
> 
> 
> 
![](/data/attachment/album/201906/08/211422umrzznnvmapcwuc3.jpg)
我知道，现在孩子们用 Python 和 JavaScript 编写他们的疯狂“应用程序”。但是不要这么快就否定 C 语言 —— 它能够提供很多东西，并且简洁。如果你需要速度，用 C 语言编写可能就是你的答案。如果你正在寻找稳定的职业或者想学习如何捕获[空指针解引用](https://www.owasp.org/index.php/Null_Dereference)，C 语言也可能是你的答案！在本文中，我将解释如何构造一个 C 文件并编写一个 C main 函数来成功地处理命令行参数。
我：一个顽固的 Unix 系统程序员。
你：一个有编辑器、C 编译器，并有时间打发的人。
让我们开工吧。
### 一个无聊但正确的 C 程序
![Parody O'Reilly book cover, "Hating Other People's Code"](/data/attachment/album/201906/08/211510o46awqki5uwc8rd9.png "Parody O'Reilly book cover, \"Hating Other People's Code\"")
C 程序以 `main()` 函数开头，通常保存在名为 `main.c` 的文件中。
```
/* main.c */
int main(int argc, char *argv[]) {
}
```
这个程序可以*编译*但不*干*任何事。
```
$ gcc main.c
$ ./a.out -o foo -vv
$
```
正确但无聊。
### main 函数是唯一的。
`main()` 函数是开始执行时所执行的程序的第一个函数，但不是第一个执行的函数。*第一个*函数是 `_start()`，它通常由 C 运行库提供，在编译程序时自动链入。此细节高度依赖于操作系统和编译器工具链，所以我假装没有提到它。
`main()` 函数有两个参数，通常称为 `argc` 和 `argv`，并返回一个有符号整数。大多数 Unix 环境都希望程序在成功时返回 `0`（零），失败时返回 `-1`（负一）。
| 参数 | 名称 | 描述 |
| --- | --- | --- |
| `argc` | 参数个数 | 参数向量的个数 |
| `argv` | 参数向量 | 字符指针数组 |
参数向量 `argv` 是调用你的程序的命令行的标记化表示形式。在上面的例子中，`argv` 将是以下字符串的列表：
```
argv = [ "/path/to/a.out", "-o", "foo", "-vv" ];
```
参数向量在其第一个索引 `argv[0]` 中确保至少会有一个字符串，这是执行程序的完整路径。
### main.c 文件的剖析
当我从头开始编写 `main.c` 时，它的结构通常如下：
```
/* main.c */
/* 0 版权/许可证 */
/* 1 包含 */
/* 2 定义 */
/* 3 外部声明 */
/* 4 类型定义 */
/* 5 全局变量声明 */
/* 6 函数原型 */
int main(int argc, char *argv[]) {
/* 7 命令行解析 */
}
/* 8 函数声明 */
```
下面我将讨论这些编号的各个部分，除了编号为 0 的那部分。如果你必须把版权或许可文本放在源代码中，那就放在那里。
另一件我不想讨论的事情是注释。
```
“评论谎言。”
- 一个愤世嫉俗但聪明又好看的程序员。
```
与其使用注释，不如使用有意义的函数名和变量名。
鉴于程序员固有的惰性，一旦添加了注释，维护负担就会增加一倍。如果更改或重构代码，则需要更新或扩充注释。随着时间的推移，代码会变得面目全非，与注释所描述的内容完全不同。
如果你必须写注释，不要写关于代码正在做*什么*，相反，写下代码*为什么*要这样写。写一些你将要在五年后读到的注释，那时你已经将这段代码忘得一干二净。世界的命运取决于你。*不要有压力。*
#### 1、包含
我添加到 `main.c` 文件的第一个东西是包含文件，它们为程序提供大量标准 C 标准库函数和变量。C 标准库做了很多事情。浏览 `/usr/include` 中的头文件，你可以了解到它们可以做些什么。
`#include` 字符串是 [C 预处理程序](https://en.wikipedia.org/wiki/C_preprocessor)（cpp）指令，它会将引用的文件完整地包含在当前文件中。C 中的头文件通常以 `.h` 扩展名命名，且不应包含任何可执行代码。它只有宏、定义、类型定义、外部变量和函数原型。字符串 `` 告诉 cpp 在系统定义的头文件路径中查找名为 `header.h` 的文件，它通常在 `/usr/include` 目录中。
```
/* main.c */
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
```
这是我默认会全局包含的最小包含集合，它将引入：
| #include 文件 | 提供的东西 |
| --- | --- |
| stdio | 提供 `FILE`、`stdin`、`stdout`、`stderr` 和 `fprint()` 函数系列 |
| stdlib | 提供 `malloc()`、`calloc()` 和 `realloc()` |
| unistd | 提供 `EXIT_FAILURE`、`EXIT_SUCCESS` |
| libgen | 提供 `basename()` 函数 |
| errno | 定义外部 `errno` 变量及其可以接受的所有值 |
| string | 提供 `memcpy()`、`memset()` 和 `strlen()` 函数系列 |
| getopt | 提供外部 `optarg`、`opterr`、`optind` 和 `getopt()` 函数 |
| sys/types | 类型定义快捷方式，如 `uint32_t` 和 `uint64_t` |
#### 2、定义
```
/* main.c */
#define OPTSTR "vi:o:f:h"
#define USAGE_FMT  "%s [-v] [-f hexflag] [-i inputfile] [-o outputfile] [-h]"
#define ERR_FOPEN_INPUT  "fopen(input, r)"
#define ERR_FOPEN_OUTPUT "fopen(output, w)"
#define ERR_DO_THE_NEEDFUL "do_the_needful blew up"
#define DEFAULT_PROGNAME "george"
```
这在现在没有多大意义，但 `OPTSTR` 定义我这里会说明一下，它是程序推荐的命令行开关。参考 [getopt(3)](https://linux.die.net/man/3/getopt) man 页面，了解 `OPTSTR` 将如何影响 `getopt()` 的行为。
`USAGE_FMT` 定义了一个 `printf()` 风格的格式字符串，它用在 `usage()` 函数中。
我还喜欢将字符串常量放在文件的 `#define` 这一部分。如果需要，把它们收集在一起可以更容易地修正拼写、重用消息和国际化消息。
最后，在命名 `#define` 时全部使用大写字母，以区别变量和函数名。如果需要，可以将单词放连在一起或使用下划线分隔，只要确保它们都是大写的就行。
#### 3、外部声明
```
/* main.c */
extern int errno;
extern char *optarg;
extern int opterr, optind;
```
`extern` 声明将该名称带入当前编译单元的命名空间（即 “文件”），并允许程序访问该变量。这里我们引入了三个整数变量和一个字符指针的定义。`opt` 前缀的几个变量是由 `getopt()` 函数使用的，C 标准库使用 `errno` 作为带外通信通道来传达函数可能的失败原因。
#### 4、类型定义
```
/* main.c */
typedef struct {
  int           verbose;
  uint32_t      flags;
  FILE         *input;
  FILE         *output;
} options_t;
```
在外部声明之后，我喜欢为结构、联合和枚举声明 `typedef`。命名一个 `typedef` 是一种传统习惯。我非常喜欢使用 `_t` 后缀来表示该名称是一种类型。在这个例子中，我将 `options_t` 声明为一个包含 4 个成员的 `struct`。C 是一种空格无关的编程语言，因此我使用空格将字段名排列在同一列中。我只是喜欢它看起来的样子。对于指针声明，我在名称前面加上星号，以明确它是一个指针。
#### 5、全局变量声明
```
/* main.c */
int dumb_global_variable = -11;
```
全局变量是一个坏主意，你永远不应该使用它们。但如果你必须使用全局变量，请在这里声明，并确保给它们一个默认值。说真的，*不要使用全局变量*。
#### 6、函数原型