= Q ⊕(cid:16)(cid:77)
q ⊕(cid:77)
(cid:1) =(cid:0)q ⊕(cid:76)
Q ⊕(cid:0)(cid:76)
(cid:17)
xjlsb(Rj)(cid:1)∆i ⊕ q∆i
(cid:17)
(cid:17)(cid:16)(cid:77)
(cid:17)
(cid:17)(cid:16)(cid:77)
i /∈A xilsb(Ri)(cid:1)(cid:0)(cid:76)
xilsb(Ri)
xilsb(Ri)
i /∈A xiRi
(cid:1) ,
i /∈A ∆i
xiRi
i∈[n]
j /∈A
i /∈A
i∈A
i /∈A
i /∈A
i /∈A
i /∈A
i /∈A
i /∈A
∆i
∆i
=
.
Therefore,(cid:76)
i∈[n] T (cid:48)
i = 0 if and only if the following holds:
=
=
d(cid:48)
i∈A
i /∈A
i ) is equal to:
(lsb(Ti) ⊕ lsb(Qi))
In the simulation of S, if FLaAND does not abort, for each i /∈ A, T (cid:48)
which implies the same probability of aborting for both two worlds.
i is chosen at random except
for the least signiﬁcant bit. We need to show that if the protocol does not abort, then {T (cid:48)
i}i /∈A simulated
(cid:76)
by S is indistinguishable from the values opened in the real protocol execution. Firstly, we prove that
H queries. From a similar analysis of the proof of Lemma 7, we have that Q = (cid:76)
i ) = 0 with probability at least 1 − q/2κ−1, where q is an upper bound of the number of
i∈[n] lsb(T (cid:48)
(cid:76)
does not abort, lsb(Q) = q and d(cid:48) = d ⊕ q ⊕(cid:76)
i /∈A xiRi and q =
i /∈A xilsb(Ri), except with probability at most q/2κ−1. Thus, with probability at least 1−q/2κ−1, FLaAND
have that(cid:76)
i /∈A xilsb(Ri) = d. From the simulation by simulator S, we
i∈[n] lsb(T (cid:48)
(cid:77)
i ⊕ d(cid:48) · lsb(∆i)(cid:1) ⊕(cid:77)
(cid:0)d(cid:48)
lsb(∆i) ⊕(cid:77)
i ⊕ d(cid:48) ·(cid:77)
(cid:77)
i ⊕ d(cid:48) ·(cid:77)
lsb(∆i) ⊕(cid:77)
(cid:77)
(cid:17)
= d(cid:48) ⊕ d ·(cid:16)(cid:77)
random under the condition that(cid:76)
Below, we prove if the protocol execution does not abort, then T (cid:48)
i ) = d(cid:48)
(di ⊕ d · lsb(∆i)) ⊕(cid:77)
i ⊕ qi) ⊕ d ·(cid:77)
i computed by honest party Pi is uniformly
i⊕d(cid:48)·lsb(∆i) in the real protocol execution.
When only one party is honest, it is obvious that T (cid:48)
i = 0. In
(cid:17)
the following, we focus on the case that there are at least two honest parties. In particular, for each i /∈ A,
we deﬁne
i with i /∈ A is deﬁned by the equation(cid:76)
i = 0 and lsb(T (cid:48)
(cid:16)
(cid:77)
We show that for any proper subset S ⊂ [n]\A,(cid:76)
i∈S Fi is perfectly indistinguishable from a random value
in {0, 1}κ. We use e to denote an honest party such that e /∈ A and e /∈ S. Such e always exists, as S is a
i∈A
lsb(∆i) ⊕ q
Ki[rk] ⊕ Mk[ri]
= d(cid:48) ⊕ d = 0.
i∈[n] T (cid:48)
i∈[n] T (cid:48)
lsb(∆i)
lsb(Qi)
Fi :=
i∈[n]
(d(cid:48)
i /∈A
i∈A
i /∈A
i∈A
i∈A
i /∈A
i /∈A
k(cid:54)=i
d(cid:48)
=
.
42
proper subset of [n]\A. We have the following holds:
(cid:77)
i∈S
Fi =
=
=
=
Ki[rk] ⊕ Mk[ri]
(cid:16)
Ki[rk] ⊕(cid:77)
Ki[rk] ⊕(cid:77)
Ki[rk] ⊕(cid:77)
k∈S
i∈S
i∈S
(cid:77)
(cid:77)
(cid:77)
(cid:77)
i∈S
i∈S
k(cid:54)=i
(cid:77)
(cid:77)
(cid:77)
(cid:77)
k(cid:54)=i
k(cid:54)=i
i∈S
k(cid:54)=i
(cid:17)
(cid:77)
(cid:77)
(cid:77)
k(cid:54)=i
i(cid:54)=k
Mk[ri]
Mi[rk]
Mi[rk].
i∈[n]
k∈S,k(cid:54)=i
From the above equation, we have that for i ∈ S, Ke[ri] is not in the computation, while Me[ri] =
Ke[ri] ⊕ ri∆e is. Since Ke[ri] is uniform at random from FaShare and is kept unknown for A as both
i is
indistinguishable from a random value, except that the least signiﬁcant bit is revealed, where S(cid:48)
i is the value
i is
i, e /∈ A,(cid:76)
i∈S Fi is random and unknown for A. Therefore, for any proper subset S ⊂ [n]\A,(cid:76)
computed by honest party Pi in Step 4a for i ∈ S. Thus, for any proper subset S ⊂ [n]\A,(cid:76)
indistinguishable from a random value except that lsb(cid:0)(cid:76)
i∈[n] yi(cid:1) (cid:54)=(cid:76)
From Lemma 7, if(cid:0)(cid:76)
i∈S T (cid:48)
i∈[n] zi, then the real protocol execution will abort
with probability 1 − q/2κ−1. Therefore, if honest parties do not abort, then protocol ΠLaAND will output a
correct authenticated AND triple with probability 1 − negl(κ), while functionality FLaAND always outputs
a correct AND triple. In conclusion, we complete the proof.
i∈[n] xi(cid:1) ∧(cid:0)(cid:76)
(cid:1) is ﬁxed.
i∈S S(cid:48)
i∈S T (cid:48)
i
D.2 From Leaky Authenticated AND Triples to Authenticated AND Triples
Similar to prior works, we can eliminate the triple leakage based on bucketing. Based on the techniques
in [NNOB12, WRK17b], we present an efﬁcient protocol ΠaAND for authenticated AND triples, which se-
curely computes a functionality FaAND shown in Figure 15. The details of ΠaAND are described in Figure 16.
Our protocol is essentially the same as the one by Wang et al. [WRK17b], except that a) opening authenti-
cated shares in an amortized way rather than directly sending the MACs; b) calling the functionality FLaAND
for leaky AND triples with weak global keys. Given prior works [NNOB12, WRK17b], the security proof
of protocol ΠaAND follows immediately, and thus is omitted. Note that although the adversary may leak a
few bits of global keys via the selective failure attack, this has no impact on the security, by following the
proof in Lemma 1.
According to Theorem 8 in [NNOB12], we have that B = ρ
log (cid:96)+1 +1 such that the success probability of
the adversary is bounded by 2−ρ. We analyze the communication rounds and complexity of protocol ΠaAND
shown in Figure 16 in the FaShare-hybrid model, including the cost of LaAND. Speciﬁcally, this protocol
needs 5 rounds as the executions for FRand and Open in Figure 16 can be merged with the ﬁnal three rounds
of ΠLaAND. Protocol ΠaAND needs to communicate about B(cid:96)(κ + 1)(n− 1) + (B − 1)(cid:96)(n− 1) bits for each
party per execution.
E Security Proof of Our MPC Protocol
In this section, we give a full proof of security to the protocol Πmpc described in Section 4.
E.1 Related Lemmas
Prior to proceeding the main proof, we present four related lemmas. The ﬁrst lemma addresses the correct-
ness of our distributed garbling scheme in the honest case. The second lemma shows that malicious party
P1 can learn only one label generated by an honest party for each wire. The third lemma addresses the cor-
rectness of P1’s output when other parties are corrupted. The fourth lemma addresses the correctness of the
43
Functionality FaAND
Initialize: Upon receiving (init) from all parties, sample ∆i ← {0, 1}κ for i /∈ A and receive ∆i ∈ {0, 1}κ from
the adversary for i ∈ A. Store ∆i for i ∈ [n] and send ∆i to party Pi.
Triples: Upon receiving (aAND, (cid:96)) from all parties, for each k ∈ [(cid:96)], sample xk, yk ← {0, 1}, compute zk :=
xk ∧ yk, and generate a random authenticated triple ((cid:104)xk(cid:105),(cid:104)yk(cid:105),(cid:104)zk(cid:105)) by executing AuthShare(uk) for each
uk ∈ {xk, yk, zk}.
Selective failure leakage: Wait for the adversary to input (leak, i, S,{∆(cid:48)[k]}k∈S). If Pi is honest, this function-
ality executes the macro GKleak(i, S,{∆(cid:48)[k]}k∈S) as deﬁned in Figure 1.
Figure 15: Functionality for authenticated AND triples.
Protocol ΠaAND
Initialize: All parties send (init) to FLaAND, which returns ∆i ∈ {0, 1}κ to Pi for i ∈ [n].
Generate leaky AND triples: All parties set (cid:96)(cid:48) := B · (cid:96) where B is the bucket size, and then call FLaAND (cid:96)(cid:48) times
and obtains (cid:96)(cid:48) leaky authenticated AND triples {((cid:104)xk(cid:105),(cid:104)yk(cid:105),(cid:104)zk(cid:105))}k∈[(cid:96)(cid:48)]. If receiving fail from functionality
FLaAND, the parties abort.
Eliminate the leakage with bucketing: The parties eliminate the possible leakage on x-shares as follows.
1. All parties call FRand to sample a random permutation π on {1, . . . , (cid:96)(cid:48)}. Then the parties randomly partition
all leaky AND triples into (cid:96) buckets of size B accordingly, i.e., for j ∈ {0, 1, . . . , (cid:96) − 1}, the B triples
{((cid:104)xπ(k)(cid:105),(cid:104)yπ(k)(cid:105),(cid:104)zπ(k)(cid:105))}j·B+B
k=j·B+1 are deﬁned to be in the j-th bucket.
2. For each bucket, the parties combine the B leaky AND triples into one non-leaky AND triple. We describe
how to combine two leaky AND triples, calling them ((cid:104)x1(cid:105),(cid:104)y1(cid:105),(cid:104)z1(cid:105)) and ((cid:104)x2(cid:105),(cid:104)y2(cid:105),(cid:104)z2(cid:105)), into one calling
the result ((cid:104)x(cid:105),(cid:104)y(cid:105),(cid:104)z(cid:105)). In particular, the parties execute as follows:
(a) Compute d := Open((cid:104)y1(cid:105) ⊕ (cid:104)y2(cid:105)).
(b) Set (cid:104)x(cid:105) := (cid:104)x1(cid:105) ⊕ (cid:104)x2(cid:105), (cid:104)y(cid:105) := (cid:104)y1(cid:105), and (cid:104)z(cid:105) := (cid:104)z1(cid:105) ⊕ (cid:104)z2(cid:105) ⊕ d(cid:104)x2(cid:105).
To combine all B leaky triples in the same bucket, the parties just iterate by taking the result and combine it
with the next triple in the bucket.
3. All parties output the (cid:96) non-leaky AND triples.
Figure 16: Protocol for authenticated AND triples without leakage of shares.
output of honest party Pi with i (cid:54)= 1, when P1 and other parties are corrupted. We omit the proof of correct-
ness for generating authenticated shares of multiplication of two wire masks by using random authenticated
AND triples (Step 7 of protocol Πmpc), when some parties are corrupted. Recall that this procedure adopts
a standard technique (i.e., authenticated Beaver triples [Bea92, BDOZ11]), and uses a random oracle H to
perform the amortized opening of authenticated shares in which the security is proved in Appendix A.3.
the circuit, evaluator P1 can obtain the correct public value Λw and garbled labels(cid:8)Li
Lemma 8. When all parties follow the protocol description honestly, then after Step 10, for each wire w in
(cid:9)
w,Λw
i(cid:54)=1.
Proof. In the following, we prove this lemma by induction on the gates in the circuit.
Base step. It is easy to verify that this lemma holds for all circuit-input wires after input processing has
been executed (Step 9).
44
Induction step. This lemma trivially holds for XOR gates. Thus, we focus on each AND gate (α, β, γ,∧).
By the induction hypothesis, P1 holds the correct (Λα,{Li
}i(cid:54)=1). Let u = Λα and
v = Λβ, P1 evaluates the circuit as follows:
}i(cid:54)=1) and (Λβ,{Li
α,Λα