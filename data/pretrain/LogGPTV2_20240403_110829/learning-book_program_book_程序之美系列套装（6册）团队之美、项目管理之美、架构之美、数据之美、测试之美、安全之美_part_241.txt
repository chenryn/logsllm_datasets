运多舛的Mars'98任务中的飞行器备用设备，当其飞行器引擎在火星
表面上方几百英尺处不正常终止时，该控制器也结束了其“悲惨的
命运”。但是从每个照相机获取的数据仍然需要处理、压缩，然后
“下行”（向地面传输），而且这些操作并不依赖于物理数据源。图
像数据的每个像素都是12位，这些数据中真正有区别的是儿何信息
（高度和宽度），以及最终需要处理的图像数据量。
虽然太空飞行器集成团队（LckheedMar-tin)期望保持科学设备的任务
数量是最少的，在早期就显而易见，在两个照相机任务中都重复相
同的图片压缩和“下行"功能并没有多大意义。由于程序的存储空间
有限，这种重复操作会浪费资源：因此，对代码做必要的修改，然
1366
---
## Page 1368
后验证这些修改可以达到事半功倍。最后，我们达成的一致意见是
使用三个任务：一个任务处理SSI，另一个任务处理RAC和OM照相
机（这两个任务不能同时执行，因为接口硬件不充许它们同时执
行），第三个任务将作为共享资源，利用由两台照相机的控制任务
所生成的数据，执行图像压缩和“下行”处理，因而它是异步运行
的。因此，虽然SSI和RAC/OM任务通过控制电子设备来获取图像数
据、控制照相机的内部温度、执行运动控制，第三个任务仅仅完成
图像数据处理和"下行”操作。
图像处理任务被称为ICS,ICS代表图像压缩子系统(lageCompression
Sub-System)，虽然该子系统最终不仅仅只是压缩图像数据。图3-4中
显示了三个任务的流程框图以及它们之间的通信。
使用三个任务的决策确实增加了系统的复杂性，但它也减少了需要
的程序存储空间。作为额外的补充，有第三个独立的任务使得改变
一个特定的ICS处理功能变简单得多，然后通过使用真正的照相机
硬件，对从任何一个成像任务获取的数据或者是采用模拟的图像数
据源，对这些功能进行测试。这些测试，对于后期对项目做更多的
扩展压缩测试是极有好处的；当超过15000个的测试图像通过ICS被
连续处理，同时使用自动化测试验证其操作。
ICS也包含两种资源模块，它包含静态内存管理（也称为“槽管
理”）和图像处理（取样、子图定位、像素缺陷纠正等）。这些实
际上并非ICS任务的一部分，而是作为线程安全的伪程序库来支持
两个照相机控制任务以及ICS任务。实际情况是由于该设备软件所
面临的架构约束，把这块代码放在任何其他地方都不合适，因此，
最终把它放在ICS。
1367
---
## Page 1369
命令
图像
SSI
数据
任务
SSI
太空飞行器
飞行软件
任务间
消息
命令
ICS
图像槽
任务
槽管理器
“下行”
处理器
下行”数据
任务间
消息
图像
数据
RAC/OM
RAC
命令
任务
OM
图3-4：图像飞行软件任务
对图像切槽
本章之前提到过，每个设备任务可以分配到的内存数量是有限的，
但究竞有限到什么程度，可能说出来会让有些人大吃一惊，因为现
在对于一台桌面台式机，有500M或者1G的内存已经很普遍了。分
配给SSI和RAC/OM用于图像数据存储任务的初始内存差230K是
10M（确切地说是10255360个字节）。大家讨论过，在太空飞行器
着陆后，可以增加其内存分配。这意味着任何内存管理机制都必须
很灵活，而这也是设计的基本要求。默认的存储机制需要至少处理
四个SSI图片（或者两对，每个“眼晴"包含一个图片），而且至少四
张RAC/OM图片，这些图片都存储在相同的内存空间中。这种零散
的大小分配方式意味着至少在初始阶段，不可能“挤进"超过四张的
全尺寸大小的SSI图像。
在嵌入式系统中，使用动态内存分配通常被认为是一个非常糟糕的
想法。为了避免内存碎片、内存泄露、空指针、莫名其妙的程序崩
溃以及可能完全无法完成任务，飞行软件编码规范禁止使用动态内
存分配（C的malloc函数及其家族）。这意味着不论分配给成像软件
1368
---
## Page 1370
的内存有多小，它都需要自己在该内存范围内管理图像数据，而且
软件必须健壮、可靠。
为了满足以上需求，成像软件的解决方案是在启动时，使用一组函
数作为内存管理器，用来为ICS预分配内存。内存管理器是图像数
据处理的核心组件。为了避免冲突，采用阻塞信号来控制三个成像
任务间的共享访问（实际上，在太空飞行器软件中的任何一个任务
都可能使用共享内存，但实际情况是只有照相机使用共享内存）。
静态内存分配被划分成“槽”，它可能大到足以容纳一个全尺寸大小
的SSI图像，或者是较小的RAC/OM图像。图3-5显示了ICS图像存储
空间的默认组织方式。
1369
---
## Page 1371
10
未分配的
RAC/OM
9
槽
8
SSI
一
7
6
5
内存
SSI
（按字节数）
SSI
一
3
2
SSI
1
0
默认配置：
4个SSI尺寸槽（每个2MB）
4个RAC/OM尺寸槽（每个0.25MB）
图3-5：默认的图像“槽”分配
这只是一种可能的配置方式，每种类型的槽的个数可以通过接收从
地面传输上来的命令而随时改变。
每个图像还包含一个包含头数据的关联结构。图像头数据记录了以
下信息，如定义生成图像的照相机的代码、曝光时间、选择的图像
处理选项、图像维度、可能使用的光学过滤器以及图像如何压缩
（如果采用了压缩方法）。部分的头数据是由生成图像的设备任务
生成的，其余部分是由ICS在把图像数据发送给太空处理器“下行”
的处理程序之前生成的。由于头数据并非图像数据本身，它存储在
1370
---
## Page 1372
一个独立的内存槽，直到需要执行“下行"操作时才使用。每个图像
槽和其关联的头数据需要通过协力的方式进行跟踪和处理。
如图3-6所示，内存管理器实际上只是一组函数集合，这些函数在一
个结构数组上执行操作。内存槽的当前状态是保存在数组中，这些
数组实际上构成了一个物理内存空间及其内容的动态模型。
图像数据
头数据
图像数据
头数据
槽数组
槽数组
图像槽ID
头槽ID
和地址
和地址
图3-6：内存槽管理数组
其中一个数组包含图像数据的结构体，每个图像槽对应一个结构
体。该结构体通过C语言类型定义如下：
1371
---
## Page 1373
typedef struct{
uintl6_t slot_status:
/*★<Owned or unowned*/
intl6_t slot_owner:
/**<-1 if slot is unowned */
intl6_t slot_size:
/**<either RAC/OM or SSI sized*/
uintl6_t*slot_address:
/**<addressof data space of
slot  */
)ics_img_slot_entry_t:
第二个数组包含指向头数据入口的结构体，其定义如下：
typedef struct{
uintl6_t slot_status:
/**<ownedor unowned*/
intl6_t slot_owner:
/**<-1ifunowned*/
intl6_t img_id: /**<associated image data slot number */
uint16_t hdr_data[ICS_HDR_SLOT_Sz]: /**<array for header
data */
)ics_hdr_slot_entry_t:
注意：图像的头结构体包含该图像ID的入口。这一点是很有必要
的，因为槽可以以任意次序进行分配和释放，而且不能保证一个图
像槽入口的索引和它原来关联的头数据槽的索引是同一个索引。我
们采用图像ID把图像和头数据入口绑定在一起，而不是依赖于数组
中的索引偏移来保证图像和头数据入口是同步的。
由于可以动态重新配置图像的槽分配，内存管理器可以适应于特定
的任务。一方面，如果为火星上的某天制定的计划（或者称一个