title:Detection of stealthy malware activities with traffic causality and
scalable triggering relation discovery
author:Hao Zhang and
Danfeng (Daphne) Yao and
Naren Ramakrishnan
Detection of Stealthy Malware Activities with Trafﬁc
Causality and Scalable Triggering Relation Discovery
Hao Zhang, Danfeng (Daphne) Yao, and Naren Ramakrishnan
Department of Computer Science, Virginia Tech
Blacksburg, VA, USA
{haozhang, danfeng, naren}@cs.vt.edu
ABSTRACT
Studies show that a signiﬁcant portion of networked com-
puters are infected with stealthy malware. Infection allows
remote attackers to control, utilize, or spy on victim ma-
chines. Conventional signature-scan or counting-based tech-
niques are limited, as they are unable to stop new zero-day
exploits. We describe a traﬃc analysis method that can
eﬀectively detect malware activities on a host. Our new
approach eﬃciently discovers the underlying triggering re-
lations of a massive amount of network events. We use
these triggering relations to reason the occurrences of net-
work events and to pinpoint stealthy malware activities. We
deﬁne a new problem of triggering relation discovery of net-
work events. Our solution is based on domain-knowledge
guided advanced learning algorithms. Our extensive exper-
imental evaluation involving 6+ GB traﬃc of various types
shows promising results on the accuracy of our triggering
relation discovery.
Keywords
Network Security, Stealthy Malware, Anomaly Detection
1.
INTRODUCTION
Stealthy malicious software poses serious threats to the
security of networked computers and data. A recent study
showed that a signiﬁcant portion (> 25%) of computers
worldwide are infected with malware conducting clandes-
tine activities [33]. Malware may spy on the victim user
(e.g., stealing passwords such as in the newly discovered
Pony botnet [34], tracking the user’s activities, data exﬁl-
tration), abuse the computer for conducting bot activities
(e.g., command-and-control, launching attacks from it).
Determining whether or not networked hosts are infected
with stealthy malware is technically challenging. Virtu-
ally all malware activities require sending outbound network
traﬃc from the infected machine. However, because of the
low traﬃc volume of stealthy malware, frequency-based sta-
tistical anomaly detection is not eﬀective. HTTP and DNS
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590309.
have been widely observed as the protocols for malware and
botnet communications, as they are rarely blocked by ﬁre-
walls.
The initial infection vector of most malware is usually
through exploiting vulnerabilities of common networked
software, e.g., heap overﬂow vulnerability in web browser or
its plug-ins [13]. Once the infection is successful (e.g., zero-
day exploits), network requests from advanced malware may
not exhibit distinct communication patterns. Because of this
lack of signatures, pattern-based scanning is ineﬀective.
Compared to independently inspecting individual network
requests, a more eﬀective network security approach is to
discover characteristic behavioral patterns in network event
attributes, e.g., [14, 18, 24]. For example, BINDER [14] de-
tects anomalous network activities on personal computers
through analyzing the correlation in traﬃc events by the
temporal and process information. BotMiner [18] showed
the eﬀectiveness of correlation analysis across multiple hosts
of a network in detecting similarly infected bots. King et al.
constructed directed graphs from logs to show network con-
nections for dissecting attack sequences [24]. However, none
of these above solutions is designed for detecting general
stealthy malware activities. Thus, they cannot be directly
applied to solve the problem.
Stealthy malware can cause data exﬁltration, spy on vic-
tim machines, and botnet command and control traﬃc on
a host. We refer stealthy malware activities as the network
traﬃc sending out from a host without user’s intention.
We develop a new traﬃc analysis tool that detects network
activities of stealthy malware through reasoning the causal-
ity among network events. Higher-level information such as
the underlying relations or semantics of events is useful for
human experts’ cognition, reasoning, and decision making
in cyber security [17]. Thus, analyzing relations among net-
work events may provide important insights for identifying
network anomalies.
There have not been systematic studies on network-
request-level causal analysis for malware detection. Existing
dependency analysis work (e.g., [9,31,43]) is on network ser-
vice level and is not designed for malware detection. For ex-
ample, Orion [9] and NSDMiner [31] addressed the problem
of network application/service dependency for network sta-
bility and automatic manageability. Rippler [43] is proposed
to actively perturb or delay traﬃc to understand the depen-
dencies between service and devices. We aim to achieve
the request-level causality structure in network traﬃc. This
ﬁner granularity (request vs. ﬂow) requires diﬀerent relation
semantics and more scalable analysis methods. The existing
39binary classiﬁcation solutions designed for JavaScript analy-
sis [29] and malware detection [11] cannot be directly applied
to our triggering relation discovery problem.
Triggering relations of events provide contextual interpre-
tations for the behaviors of systems and networks, illustrat-
ing why sequences of events occur and how they relate to
each other. Because of the transitivity, the problem of dis-
covering triggering relations among a set of events may be
transformed into discovering the triggering relations of pairs
of events, which is deﬁned as the pairwise triggering relation.
In this work, we introduce the problem of triggering rela-
tion discovery in network traﬃc and describe its application
in solving challenging network security problems, such as
stealthy malware detection. We present a scalable learning-
based technique to compute the triggering relations among
network events. We use the discovered triggering relations
to reason about the legitimacy of observed network ac-
tivities. Our analysis method successfully detects several
types of anomalies including spyware activities, and botnet
command-and-control traﬃc, as well as compromised web
servers and web server misconﬁguration. The accuracy and
scalability of our triggering relation discovery method are
evaluated with 6+ GB real-world network traﬃc, includ-
ing HTTP, DNS, and TCP traﬃc. Experimental results
show that our method eﬃciently predicts pairwise trigger-
ing relations with high accuracy in all metrics. With our
tool, we discover and report the detected malicious HTTP
and DNS activities due to various tracking malware and
malware-hosting servers.
Our analysis using machine learning is scalable, capable
of rapidly processing a large amount of traﬃc. We extract
around 10 pairwise features from each type of network re-
quests, based on timestamp, process ID, destination IP, do-
main name, etc.1 Using machine learning algorithms elimi-
nates the need for manually deriving classiﬁcation rules and
thus simpliﬁes the detection. In addition, it achieves very
high classiﬁcation accuracy.
Our work demonstrates that triggering relations among
cyberspace events at all levels can provide structural evi-
dences for system and network assurance. The causality pro-
vides the logical interpretation to the vast amount of other-
wise structureless and contextless network events. Compar-
ing to link prediction problem in social networks [5, 16, 28],
our work on triggering relation discovery has two major dif-
ferences: i) Conceptually, link prediction problems focus on
ﬁnding the similarity among nodes, while our work is on dis-
covering triggering relations among network-related events.
These two problems have diﬀerent setups and requirements.
ii) Our method includes the TRG construction operation
and root-trigger security analysis, which are unique and be-
yond the link prediction type of inference problem.
2. MODEL AND OVERVIEW
In this section, we deﬁne the problem of triggering relation
discovery and present the security applications.
2.1 TRG Deﬁnitions and Properties
Triggering relationship between event ei and event ej de-
scribes the temporal relation and causal relation between
them, speciﬁcally ei precedes ej and ei is one of the reasons
that directly or indirectly causes ej to occur. The speciﬁc
1Examples of features are shown in Table 9 in the Appendix.
semantics of triggering relation depend on the type of events
and environment. An event may be deﬁned at any relevant
type or granularity, including user actions (e.g., keyboard
stroke, mouse click), machine behaviors (e.g., network re-
quest, function call, system call, ﬁle system access), and
higher-level operations and missions (e.g., database access,
obtaining Kerberos authorization, distributing video to se-
lect users).
Triggering relations of events may be represented in a di-
rected graph – referred to by us as triggering relation graph
(TRG), where each event is a node and a directed edge
(ei → ej) from ei and to ej represents the triggering re-
lation. We also refer the triggering relation (ei → ej) as
the parent-child relation, where ei is the parent trigger or
parent and ej is the child. One can construct the TRG by
incrementally inserting new events to the current graph.
Figure 1: Schematic drawings of triggering relation
graphs for outbound traﬃc from a host (a) and traf-
ﬁc between two hosts (b). In (a), the user events
(e.g., U3) such as entering a URL into the browser
address bar are root triggers, which are followed by
DNS queries (e.g., D3) for translating the requested
domain names. Then, one or multiple HTTP re-
quests (e.g., H5) are sent to the servers, and addi-
tional HTTP requests (e.g., H6) may be triggered to
fetch embedded objects. In (b), triggering relations
in a TCP type of sessions are shown.
We illustrate two TRG examples in Figure 1. For speciﬁc
types of network traﬃc, such a TRG may manifest unique
topology and properties. For example, for outbound HTTP
and DNS traﬃc from a host, the TRG forms a forest of trees,
rooted by user inputs. The user input events are root trig-
gers. Because of the temporal property of events, triggering
relation graphs are free of cycles. This acyclic property dif-
fers the TRGs from social network graphs in link prediction
problems. In a valid TRG, a node has at most one parent,
thus, at most one root trigger. As conﬁrmed by our experi-
ments, a network triggering relation graph is usually sparse,
i.e., the number of neighbors of a node compared to the total
numbers of nodes is small. This sparsity is similar to what
is observed in social network graphs [21].
The problem of triggering relation discovery is that given
a set of events, to construct the complete triggering relation
graph corresponding to the events. On the graph mode, the
discovery problem is given a set of event nodes, to determine
the existence of edges between pairs of the nodes and the
directions of the edges. The pairwise triggering relation dis-
covery is a simpler problem, which is to determine whether
a triggering relation exists in two events. Given the pairwise
triggering relations, we construct the complete the trigger-
Host AHost BUser eventsNetwork events(a)(b)B1A2A3A4B2A5B3D1D2H1D3H5H6H9H10H7D4H8H11H2H3H4U1U2U3U4U5A6A140ing relation graph(s). We illustrate the TRG construction
operation in Figure 2. A TRG provides a structural repre-
sentation of triggering relations of observed events.
Figure 2: The triggering relation graph (TRG) on
the right can be constructed from the pairwise trig-
gering relations on the left.
Our deﬁnition of event-level causal relation relates to, but
diﬀers from the service dependency deﬁnition in existing ser-
vice dependency research, such as network service depen-
dency [31] and active delay injection [43]. Service depen-
dency refers to that one service relies on another to func-
tion, e.g., web service depends on DNS name resolution.
Our event-level causal relation refers to that one event trig-
gers or causes the other event, e.g., the transmission of one
network packet triggers the transmission of the other packet.
The TRG is deﬁned diﬀerently from the parental depen-
dency graph (PDG) in WebProphet [27] in terms of graph se-
mantics and security applications. The PDG in WebProphet
predicts the performance impact of webpage objects. There-
fore it contains the timing information only, without captur-
ing the causality among requests or objects. We rely on the
semantic information (such as domain name, request string,
etc.) of each request to build TRG, thus enabling the TRG
to detect anomalous network events.
2.2 Security Applications of TRG
In our security model, network requests on TRG without
valid root triggers are referred to as vagabond requests. They
are anomalous events without legitimate causal relations,
and likely due to stealthy malware activities.
The deﬁnition of root triggers may vary.
For user-
intention based triggering model, root triggers are user-input
actions. The analysis pinpoints network activities that are
not intended by users. Blocking these outbound malware
network activities eﬀectively isolates the malware, including
• websites collecting and reporting sensitive user data,
• spyware exﬁltrating sensitive information through out-
• bots’ command-and-control traﬃc, and attack activ-
ities (e.g., spam or DoS traﬃc) originated from the
monitored host.
bound network traﬃc from the monitored host,
aﬀecting user privacy,
We describe a scenario for using our tool to detect stealthy
outbound malware activities on a host. DNS tunneling has
been abused by botnets for command and control communi-
cations [40]. These abnormal outbound DNS queries are au-
tomatically generated by malware on the host, typically with
botnet-related payload. These surreptitious DNS activities
are diﬃcult to detect, because of their format resemblance
to regular DNS queries. Our analysis tool reasons about the
legitimacy of observed DNS traﬃc on a possibly infected
host. Legitimate DNS queries are usually issued by an ap-
plication (e.g., browser) upon receiving certain user inputs
(e.g., entering a URL into the address bar). The application
then issues additional DNS or other requests (e.g., HTTP,
FTP). Botnet DNS queries lack of any matching user trig-
gers. Our tool detects these vagabond events and reports
them.
Data integrity We consider application-level malicious
events, so the kernel-level system data (e.g., keyboard and
mouse events) are assumed to be trustworthy. To prevent
the forgery of user events, advanced keystroke and system
integrity solutions such as [3, 19, 36, 41] can be incorporated
in our work to further improve system-data assurance.
3. TRIGGERING RELATION DISCOVERY
The methods described in this section infer the triggering
relation among network requests and construct triggering re-
lation graphs. The automatic analysis pinpoints the occur-
rences of anomalous network requests from the voluminous
traﬃc data, through reasoning triggering relations.
Given two network requests P and Q with P occurring
before Q, one needs to decide whether P triggers Q, i.e.,
P → Q. A straightforward approach for triggering relation
discovery is the rule-based classiﬁcation. One can deﬁne
one or more rules summarizing the attribute properties of
two parent-child requests, e.g., as shown in Example 3.1
below. Attribute names used in the example are described
in Table 1.
Example 3.1. If P .time ≤ Q.time ∧ P.PID = Q.PID ∧
P .host = Q.referrer, then P is the parent trigger of Q, i. e.,
P → Q.
However, the rule-based approach has several drawbacks
that hinder its scalability and accuracy.
It requires man-
ual rule speciﬁcation, which is time consuming. The rigid
rule structures are not ﬂexible enough to recognize complex
traﬃc scenarios, resulting in low classiﬁcation accuracy and
false alarms.
Our approach utilizes probabilistic machine learning algo-
rithms and achieves high scalability and detection accuracy.
We introduce a scalable feature extraction method referred
to as Pairing. This operation converts individual network
events into event pairs with comparable pairwise attributes.
We show how binary classiﬁcation algorithms can be used
for triggering relation discovery.
3.1 Overview of Our Approach
The main operations in our analysis are Data Collec-
tion, Pairing, Data Labeling, Training, Classifica-
tion, TRG Construction, and Report. The Data La-
beling, Training and Classification operations are stan-
dard for machine learning based methods. The new opera-
tions are Pairing and TRG Construction.
• Data Collection is to record and store the events to
be analyzed. Each event e has one or more attributes
(A1, . . . , Am) describing its properties.
• Pairing is a new operation that we design for ex-
tracting pairwise comparison results (i.e., features) of
events’ attributes.
Its inputs are two events e =
(A1, . . . , Am) and e(cid:48) = (A(cid:48)
m). The output is
the event pair (e, e(cid:48)) with m pairwise attribute values
(B1, . . . , Bm), where a pairwise attribute Bi(i ∈ [1, m])
represents the comparison result of attributes Ai and
A(cid:48)
i. That is, Bi = fi(Ai, A(cid:48)
i), where fi() is a compar-
ison function for the type of the i-th attribute in the
1, . . . , A(cid:48)