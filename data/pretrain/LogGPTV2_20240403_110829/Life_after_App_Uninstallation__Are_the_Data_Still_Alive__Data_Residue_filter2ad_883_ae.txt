### Moto X (2014)

#### Table II: Impact of Android Data Residue Vulnerability in Practice

**Introduction:**
In this section, we explore the practical implications of data residue vulnerabilities in Android. It is common for developers to submit multiple applications to app stores. According to a 2011 study, the average number of apps submitted per developer in the Android Market was 6.6. The recent auto-update feature on Android has increased the likelihood of these vulnerabilities being exploited.

**V. Evaluation**

In this section, we evaluate the potential real-world impact of data residue attacks. Our evaluation focuses on three main aspects:
1. The impact of the attack on real-world apps.
2. The feasibility of uploading malicious apps to app markets such as Google Play, Amazon Appstore, and Samsung Appstore.
3. The effect of vendor customization on the attack.

Since the damage from mock-location residue and Debug setting residue is minimal, we exclude them from our analysis. The results of our evaluation are summarized in Table II. The following sections provide detailed insights into our findings.

**Analysis of Real-World Apps:**
We conducted a large-scale analysis of 2,373 unique apps (the top 100 free apps in 27 categories) collected from Google Play in March 2015. Our static analysis, based on the AndroGuard framework, involved two steps:
1. **Detection of Vulnerable System Services:** We identified apps that use Android system services vulnerable to data residue attacks by matching specific permission and component declarations from manifest files or decompiled source code. For example, an app with a service component listening to `SpellCheckerService`-typed intent actions and requiring `BIND_TEXT_SERVICE` permission is flagged as a spell checker.
2. **Examination of Triggering Conditions:** We further examined whether the triggering conditions for the vulnerability could be applied to each app. For instance, an app using `DownloadManager.enqueue()` API is flagged as providing download functionality, but it must save downloaded files in the default directory to be exploitable. Apps with APIs that can customize the download directory were excluded.

**Results:**
Table II(I) shows that numerous Android apps are affected by data residue vulnerabilities. With millions of downloads, the potential damage is significant. Specifically:
- **Authenticators and Keystore Usage:** 131 apps act as authenticators, and 63 apps use Android Keystore. If these apps are uninstalled, user credentials can be stolen.
- **Clipboard Attacks:** 92 apps contain a content provider with the `grantUriPermissions` flag set to true, making them vulnerable to data residue attacks. Sensitive data, including cloud files (OneDrive, Box, Dropbox Photos), financial statements (Chase, Walmart, Progressive), and social information (Tango, Contacts+), can be leaked.
- **Settings Impersonation and History Peeking:** 40 apps, including 16 spell checkers and 24 dream providers, are affected by settings impersonation. Additionally, 66 apps, including 17 with download features and 49 with printing features, are affected by history peeking.

**Assessment of App-Store Defense:**
Our analysis of data residue instances revealed that Android's existing protection depends on the uniqueness of several attributes. We mapped out the essential attributes for successful attacks in Table II(II). While our experiments demonstrated the possibility of breaking uniqueness on the device, it is unclear if this uniqueness is preserved when apps are uploaded to app markets. App market defenses can only check static information in the APK file, so dynamically determined attributes (e.g., UID) are beyond their control.

**Findings:**
- **Account Type and Authority:** None of the app stores perform uniqueness checks on account type or authority. We were able to upload apps with duplicated authority names to all three app stores.
- **Package Name Uniqueness:** Individual app stores preserve the uniqueness of package names, but the target package name may exist only in specific app stores, allowing attackers to upload apps with the same package name to other app stores.

**Measurement of Device Customization:**
Our study is based on the official Android Lollipop codebase, which may be customized by various vendors. To measure the impact of vendor customization, we repeated 8 attacks on 10 different devices running different versions of Android. The test results are summarized in Table II(III).

**Results:**
- **Feature Availability:** Not all features are available on every device. For example, `DreamService` was introduced in version 4.2.2, and printer support was added in KitKat. Some vendors remove certain features, such as the spell checker on most Samsung devices.
- **Attack Success Rate:** Out of 65 valid attack attempts, 54 (83%) were successful. The 11 failed attempts were mostly due to fixes introduced in Lollipop (regarding Download and Keystore residues). The only exception was the Clipboard exploit on the Samsung Note 8, where customization reduced the power of URI permissions, causing security exceptions.

**VI. Discussion**

Data residue in the Android system is a challenging and unique problem. Unlike traditional desktop environments, where user deletion is infrequent, in Android, each app acts as a different user. App uninstallation involves deleting an existing "user," which occurs much more frequently. Additionally, mobile apps often depend on other apps for functionalities like spell checking and authentication, leading to user data being stored outside the app's storage space.

**High Frequency of User Deletion and Data Spread:**
The high frequency of "user" deletion and the widespread distribution of "user" data across the system make data cleanup during app uninstallation a very challenging task. Therefore, data residue is more likely to occur in Android than in traditional systems. It is crucial that the design of system services explicitly addresses the data residue problem, specifying whether there is a potential for data residue, whether app data are removed when the app is uninstalled, and the security consequences if the data are inherited by other apps.

**Android's Efforts:**
Android has addressed some data residue concerns, such as in the Download and Keystore services in Lollipop. However, without a systematic study of all residue instances and their fundamental causes, solutions are ad hoc and limited to individual cases. For example, while the Download and Keystore issues were fixed, a new data residue problem was introduced with the TrustAgent service.

**Fundamental Causes:**
There are two conditions for data residue to become vulnerabilities: the existence of data residue and the ability to exploit it. Removing either condition can fix the problem. Better software engineering practices, guidelines, development support, and detection tools can help avoid leaving data residue. Another direction is to identify ways to prevent data residue from being exploited, even if it exists in the system.

**Attribute-Based Access Control:**
Android uses attribute-based access control to protect data, associating each data entry with a corresponding attribute and allowing access only to apps that possess the attribute. This assumes that attributes are unique to individual apps, but there is no guarantee. Uninstallation and device reboot can invalidate these assumptions, leading to re-association of attributes to different apps. Table III summarizes the underlying assumptions, protection effectiveness, and breaking conditions for key attributes.

**Defense Strategies:**
Based on our analysis, defense can be implemented at both the frontend and backend:
- **Frontend Protection:** Prevents unauthorized access to data left in the system after an app is uninstalled. This requires preserving the uniqueness of all essential attributes across device states and cycles. A record of all attribute values from installed apps is needed, and users should be alerted to approve or disapprove attribute conflicts.
- **Backend Protection:** Aims to eliminate all data residue in system designs. Our manual analysis of Android system services may miss sophisticated data residue instances, and existing static and dynamic analysis tools are not sufficient for examining framework-level code. Vendor customization can also complicate the issue, and a more accurate and comprehensive automatic detection system is needed.

**VII. Related Work**

The popularity of Android has attracted significant research interest, focusing on understanding the security landscape, uncovering vulnerabilities, and enhancing the security architecture. In this section, we review related prior studies and compare them with our work.

**Android Security Demystification:**
The Android ecosystem...