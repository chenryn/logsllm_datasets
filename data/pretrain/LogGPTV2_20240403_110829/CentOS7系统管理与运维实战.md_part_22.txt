### MySQL配置文件常用参数说明

#### 1. binlog_cache_size
- **说明**：设置每个事务在提交前用于缓存二进制日志的内存大小。

#### 2. max_connect_errors
- **说明**：允许的最大连接错误次数，超过此值后，MySQL将阻止该主机的进一步连接。

#### 3. InnoDB数据文件的目录
- **说明**：指定InnoDB数据文件存放的目录路径。

#### 4. replicate_wild_do_table
- **说明**：与`replicate_wild_ignore_table`相反，指定在主从同步时需要同步的表。

#### 5. replicate_wild_ignore_table
- **说明**：指定在主从同步时需要忽略的表。

#### 6. expire_logs_days
- **说明**：设置二进制日志文件保留的最长时间（以天为单位）。

#### 7. log_slow_queries
- **说明**：如果SQL语句没有使用索引，则将该SQL语句记录到慢查询日志中。

#### 8. long_query_time
- **说明**：超过此值的查询被认为是慢查询，并被记录到慢查询日志中。

#### 9. slow_query_log
- **说明**：是否开启慢查询日志，设置为1表示开启。

#### 10. server_id
- **说明**：在主从同步时标识唯一的MySQL实例。

#### 11. log_bin
- **说明**：指定MySQL二进制文件binlog的路径和文件名。

#### 12. default_character_set
- **说明**：设置MySQL创建表时默认使用的字符集。

#### 13. max_heap_table_size
- **说明**：设置HEAP表（即内存表）允许的最大值。

#### 14. read_rnd_buffer_size
- **说明**：对数据表进行顺序读取时分配的读入缓冲区大小。

#### 15. net_buffer_length
- **说明**：服务器和客户端之间通信使用的缓冲区长度。

#### 16. tmp_table_size
- **说明**：临时表的最大大小。

#### 17. transaction_isolation
- **说明**：设置MySQL数据库的事务隔离级别。

#### 18. thread_stack
- **说明**：每个连接创建时分配的内存大小。

#### 19. ft_min_word_len
- **说明**：设置加入全文索引的词的最小长度。

#### 20. query_cache_limit
- **说明**：如果查询结果超过此参数设置的大小，则不会进行缓存。

#### 21. query_cache_size
- **说明**：为缓存查询结果分配的内存数量。

#### 22. thread_concurrency
- **说明**：限制了一次有多少线程能进入内核。

#### 23. thread_cache_size
- **说明**：线程缓冲区所能容纳的最大线程个数。

#### 24. join_buffer_size
- **说明**：为两个表之间的每个完全连接分配的连接缓冲区大小。

#### 25. sort_buffer_size
- **说明**：用于排序操作的线程使用的缓冲区大小。

#### 26. binlog_cache_size
- **说明**：在事务过程中容纳二进制日志SQL语句的缓存大小。

#### 27. max_allowed_packet
- **说明**：网络传输中一次消息传输量的最大值。

#### 28. table_open_cache
- **说明**：设置表高速缓存的数量。

#### 29. max_connections
- **说明**：MySQL允许的最大连接数。

#### 30. key_buffer_size
- **说明**：索引缓冲区大小，决定了MyISAM数据库索引处理的速度。

#### 31. character_set_server
- **说明**：设置MySQL的默认字符集。

#### 32. max_connect_errors
- **说明**：客户端连接指定次数后，服务器将屏蔽该主机的连接。

#### 33. skip_external_locking
- **说明**：跳过外部锁定。

#### 34. tmpdir
- **说明**：设置MySQL保存临时文件的路径。

#### 35. datadir
- **说明**：MySQL数据库相关的数据文件主目录。

#### 36. socket
- **说明**：本地socket方式登录MySQL时socket文件的路径。

#### 37. port
- **说明**：MySQL实例启动后监听的端口。

#### 38. bind_address
- **说明**：MySQL实例启动后绑定的IP地址。

---

### MySQL服务启动与停止

#### 通过系统服务启动与停止

MySQL可以通过多种方式启动，常见的方法是利用系统服务脚本。以下是通过systemd管理MySQL服务的示例：

1. **查看系统服务状态**
   ```bash
   [root@Centos ~]# systemctl status mysqld.service
   ```

2. **启动MySQL服务**
   ```bash
   [root@Centos ~]# systemctl start mysqld.service
   ```

3. **停止MySQL服务**
   ```bash
   [root@Centos ~]# systemctl stop mysqld.service
   ```

4. **设置开机自动启动**
   ```bash
   [root@Centos ~]# systemctl enable mysqld.service
   ```

5. **禁用开机自动启动**
   ```bash
   [root@Centos ~]# systemctl disable mysqld.service
   ```

#### 使用mysqld_safe启动与停止

如果需要更灵活地控制MySQL的启动和停止过程，可以使用`mysqld_safe`程序。以下是示例：

1. **创建数据目录并初始化**
   ```bash
   [root@Centos ~]# mkdir -p /data/mysql_data_3307
   [root@Centos ~]# chown -R mysql:mysql /data/mysql_data_3307
   [root@Centos ~]# mysql_install_db --datadir=/data/mysql_data_3307/
   ```

2. **启动MySQL服务**
   ```bash
   [root@Centos ~]# mysqld_safe --datadir=/data/mysql_data_3307 --port=3307 --socket=/data/mysql_data_3307/mysql.sock &
   ```

3. **停止MySQL服务**
   ```bash
   [root@Centos ~]# ps -ef | grep mysqld_safe
   [root@Centos ~]# kill <PID>
   ```

通过以上步骤，您可以灵活地管理和控制MySQL服务的启动和停止。