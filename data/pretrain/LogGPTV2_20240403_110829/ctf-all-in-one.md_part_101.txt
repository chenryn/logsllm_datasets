| ||| 0x00401aad 488b05ac1620. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| ||| 0x00401ab4 4889c7 mov rdi, rax
| ||| 0x00401ab7 e804f3ffff call sym.imp.fflush
; int fflush(FILE *stream)
| ||| 0x00401abc 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401ac3 be04000000 mov esi, 4
| ||| 0x00401ac8 4889c7 mov rdi, rax
| ||| 0x00401acb e8f3f9ffff call sym.readline
; 读入 precision
| ||| 0x00401ad0 488d85f0feff. lea rax, rbp - 0x110
| ||| 0x00401ad7 4889c7 mov rdi, rax
| ||| 0x00401ada e861f3ffff call sym.imp.atoi
; int atoi(const char *str)
| ||| 0x00401adf 89c2 mov edx, eax
| ||| 0x00401ae1 488b85e8feff. mov rax, qword [local
_118h]
| ||| 0x00401ae8 89500c mov dword [rax + 0xc]
, edx ; 将 precision 写入 local_118h + 0xc
| ||| 0x00401aeb 8b85e4feffff mov eax, dword [local
_11ch] ; player 编号
| ||| 0x00401af1 488b95e8feff. mov rdx, qword [local
_118h] ; player 结构体
| ||| 0x00401af8 488914c58031. mov qword [rax*8 + ob
1039
6.1.9 pwn RHme3 Exploitation
j.players], rdx ; [0x603180:8]=0 ; 当前 player 结构体地址写入 rax*8
+ obj.players
| ||| ; JMP XREF from 0x00401996 (sym.add_player)
| ||| ; JMP XREF from 0x004018d6 (sym.add_player)
| ||| ; JMP XREF from 0x00401877 (sym.add_player)
| ```--> 0x00401b00 488b45f8 mov rax, qword [local
_8h]
| 0x00401b04 644833042528. xor rax, qword fs:[0x
28]
| ,= 0x00401b14 c9 leave
\ 0x00401b15 c3 ret
该函数会做一些基本的检查，如球员最大数量等，然后开始添加球员的过程。根据
我们的分析， obj.players 应该是一个全局数组，用于存放所有球员的地址。
[0x00400ec0]> is~players
vaddr=0x00603180 paddr=0x00003180 ord=090 fwd=NONE sz=88 bind=GL
OBAL type=OBJECT name=players
当球员添加完成后，就将其结构体地址添加到这个数组中。球员的选择过程就是通
过这个数组完成的。
下面是选择球员的过程，函数 sym.select_player ：
[0x00400ec0]> pdf @ sym.select_player
/ (fcn) sym.select_player 214
| sym.select_player ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x0040224d (main + 172)
| 0x00401c05 55 push rbp
| 0x00401c06 4889e5 mov rbp, rsp
| 0x00401c09 4883ec20 sub rsp, 0x20
| 0x00401c0d 64488b042528. mov rax, qword fs:[0x
1040
6.1.9 pwn RHme3 Exploitation
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00401c16 488945f8 mov qword [local_8h],
rax
| 0x00401c1a 31c0 xor eax, eax
| 0x00401c1c bf30254000 mov edi, str.Enter_in
dex: ; 0x402530 ; "Enter index: "
| 0x00401c21 b800000000 mov eax, 0
| 0x00401c26 e8d5f0ffff call sym.imp.printf
; int printf(const char *format)
| 0x00401c2b 488b052e1520. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| 0x00401c32 4889c7 mov rdi, rax
| 0x00401c35 e886f1ffff call sym.imp.fflush
; int fflush(FILE *stream)
| 0x00401c3a 488d45f0 lea rax, rbp - 0x10
| 0x00401c3e be04000000 mov esi, 4
| 0x00401c43 4889c7 mov rdi, rax
| 0x00401c46 e878f8ffff call sym.readline
; 读入球员编号
| 0x00401c4b 488d45f0 lea rax, rbp - 0x10
| 0x00401c4f 4889c7 mov rdi, rax
| 0x00401c52 e8e9f1ffff call sym.imp.atoi
; int atoi(const char *str)
| 0x00401c57 8945ec mov dword [local_14h]
, eax ; 编号 eax -> [local_14h]
| 0x00401c5a 837dec0a cmp dword [local_14h]
, 0xa ; [0xa:4]=-1 ; 10
| ,= 0x00401c70 bf3e254000 mov edi, str.Invalid_
index ; 0x40253e ; "Invalid index"
| | 0x00401c75 e806f0ffff call sym.imp.puts
; int puts(const char *s)
| | 0x00401c7a 488b05df1420. mov rax, qword [obj.s
1041
6.1.9 pwn RHme3 Exploitation
tdout] ; [0x603160:8]=0
| | 0x00401c81 4889c7 mov rdi, rax
| | 0x00401c84 e837f1ffff call sym.imp.fflush
; int fflush(FILE *stream)
| |,= 0x00401c8b 8b45ec mov eax, dword [local
_14h] ; 取出编号 [local_14h] -> eax
| | 0x00401c8e 488b04c58031. mov rax, qword [rax*8
+ obj.players] ; [0x603180:8]=0 ; 找到编号对应的球员地址
| | 0x00401c96 488905d31420. mov qword [obj.select
ed], rax ; [0x603170:8]=0 ; 将地址写入 [obj.selected]
| | 0x00401c9d bf58254000 mov edi, str.Player_s
elected ; 0x402558 ; "Player selected!"
| | 0x00401ca2 e8d9efffff call sym.imp.puts
; int puts(const char *s)
| | 0x00401ca7 488b05b21420. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| | 0x00401cae 4889c7 mov rdi, rax
| | 0x00401cb1 e80af1ffff call sym.imp.fflush
; int fflush(FILE *stream)
| | 0x00401cb6 488b05b31420. mov rax, qword [obj.s
elected] ; [0x603170:8]=0 ; 取出球员地址
| | 0x00401cbd 4889c7 mov rdi, rax
; rax -> rdi
| | 0x00401cc0 e8c6faffff call sym.show_player_
func ; 调用函数 sym.show_player_func 打印出球员信息
| | ; JMP XREF from 0x00401c89 (sym.select_player)
| `-> 0x00401cc5 488b45f8 mov rax, qword [local
_8h]
| 0x00401cc9 644833042528. xor rax, qword fs:[0x
28]
| ,= 0x00401cd9 c9 leave
\ 0x00401cda c3 ret
1042
6.1.9 pwn RHme3 Exploitation
对象 obj.selected 是一个全局变量，用于存放选择的球员编号。
[0x00400ec0]> is~selected
vaddr=0x00603170 paddr=0x00003170 ord=095 fwd=NONE sz=8 bind=GLO
BAL type=OBJECT name=selected
选中球员之后，打印球员信息的操作就是通过从 obj.selected 中获取球员地址
实现的。
下面是删除球员的过程，函数 sym.delete_player ：
[0x00400ec0]> pdf @ sym.delete_player
/ (fcn) sym.delete_player 239
| sym.delete_player ();
| ; var int local_1ch @ rbp-0x1c
| ; var int local_18h @ rbp-0x18
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00402241 (main + 160)
| 0x00401b16 55 push rbp
| 0x00401b17 4889e5 mov rbp, rsp
| 0x00401b1a 4883ec20 sub rsp, 0x20
| 0x00401b1e 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x00401b27 488945f8 mov qword [local_8h],
rax
| 0x00401b2b 31c0 xor eax, eax
| 0x00401b2d bf30254000 mov edi, str.Enter_in
dex: ; 0x402530 ; "Enter index: "
| 0x00401b32 b800000000 mov eax, 0
| 0x00401b37 e8c4f1ffff call sym.imp.printf
; int printf(const char *format)
| 0x00401b3c 488b051d1620. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| 0x00401b43 4889c7 mov rdi, rax
| 0x00401b46 e875f2ffff call sym.imp.fflush
; int fflush(FILE *stream)
| 0x00401b4b 488d45f0 lea rax, rbp - 0x10
| 0x00401b4f be04000000 mov esi, 4
1043
6.1.9 pwn RHme3 Exploitation
| 0x00401b54 4889c7 mov rdi, rax
| 0x00401b57 e867f9ffff call sym.readline
; 读入球员编号
| 0x00401b5c 488d45f0 lea rax, rbp - 0x10
| 0x00401b60 4889c7 mov rdi, rax
| 0x00401b63 e8d8f2ffff call sym.imp.atoi
; int atoi(const char *str)
| 0x00401b68 8945e4 mov dword [local_1ch]
, eax ; 编号 eax -> [local_1ch]
| 0x00401b6b 837de40a cmp dword [local_1ch]
, 0xa ; [0xa:4]=-1 ; 10
| ,= 0x00401b81 bf3e254000 mov edi, str.Invalid_
index ; 0x40253e ; "Invalid index"
| | 0x00401b86 e8f5f0ffff call sym.imp.puts
; int puts(const char *s)
| | 0x00401b8b 488b05ce1520. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| | 0x00401b92 4889c7 mov rdi, rax
| | 0x00401b95 e826f2ffff call sym.imp.fflush
; int fflush(FILE *stream)
| |,= 0x00401b9c 8b45e4 mov eax, dword [local
_1ch] ; 取出编号 [local_1ch] -> eax
| | 0x00401b9f 488b04c58031. mov rax, qword [rax*8
+ obj.players] ; [0x603180:8]=0 ; 找到编号对应的球员地址
| | 0x00401ba7 488945e8 mov qword [local_18h]
, rax ; 将球员地址 rax 放入 [local_18h]
| | 0x00401bab 8b45e4 mov eax, dword [local
_1ch] ; 取出编号 [local_1ch] -> eax
| | 0x00401bae 48c704c58031. mov qword [rax*8 + ob
j.players], 0 ; [0x603180:8]=0 ; 将 players 数组中的对应值置零
1044
6.1.9 pwn RHme3 Exploitation
| | 0x00401bba 488b45e8 mov rax, qword [local
_18h] ; 将球员地址 [local_18h] 放回 rax
| | 0x00401bbe 488b4010 mov rax, qword [rax +
0x10] ; [0x10:8]=-1 ; 16 ; 取出 player.name 指向的字符串
| | 0x00401bc2 4889c7 mov rdi, rax
; 字符串地址 rax -> rdi
| | 0x00401bc5 e886f0ffff call sym.imp.free
; void free(void *ptr) ; 调用函数 free 释放球员名字
| | 0x00401bca 488b45e8 mov rax, qword [local
_18h] ; 将球员地址 [local_18h] 放回 rax
| | 0x00401bce 4889c7 mov rdi, rax
; 球员地址 rax -> rdi
| | 0x00401bd1 e87af0ffff call sym.imp.free
; void free(void *ptr) ; 调用函数 free 释放球员结构体
| | 0x00401bd6 bf4c254000 mov edi, str.She_s_go
ne ; 0x40254c ; "She's gone!"
| | 0x00401bdb e8a0f0ffff call sym.imp.puts
; int puts(const char *s)
| | 0x00401be0 488b05791520. mov rax, qword [obj.s
tdout] ; [0x603160:8]=0
| | 0x00401be7 4889c7 mov rdi, rax
| | 0x00401bea e8d1f1ffff call sym.imp.fflush
; int fflush(FILE *stream)
| | ; JMP XREF from 0x00401b9a (sym.delete_player)
| `-> 0x00401bef 488b45f8 mov rax, qword [local
_8h]
| 0x00401bf3 644833042528. xor rax, qword fs:[0x
28]
| ,= 0x00401c03 c9 leave
\ 0x00401c04 c3 ret
该函数首先释放掉球员的名字，然后释放掉球员的结构体。却没有对
obj.selected 做任何修改，而该对象中存放的是选中球员的地址，这就存在一
个逻辑漏洞，如果我们在释放球员之前选中该球员，则可以继续使用这个指针对内
存进行操作，即 UAF 漏洞。
1045
6.1.9 pwn RHme3 Exploitation
最后看一下显示球员信息的过程，函数 sym.show_player ：
[0x00400ec0]> pdf @ sym.show_player
/ (fcn) sym.show_player 99
| sym.show_player ();
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00402265 (main + 196)
| 0x004020b4 55 push rbp
| 0x004020b5 4889e5 mov rbp, rsp
| 0x004020b8 4883ec10 sub rsp, 0x10
| 0x004020bc 64488b042528. mov rax, qword fs:[0x
28] ; [0x28:8]=-1 ; '(' ; 40
| 0x004020c5 488945f8 mov qword [local_8h],
rax
| 0x004020c9 31c0 xor eax, eax
| 0x004020cb 488b059e1020. mov rax, qword [obj.s
elected] ; [0x603170:8]=0
| 0x004020d2 4885c0 test rax, rax
| ,= 0x004020f2 488b05771020. mov rax, qword [obj.s
elected] ; [0x603170:8]=0 ; 取出选中球员的地址