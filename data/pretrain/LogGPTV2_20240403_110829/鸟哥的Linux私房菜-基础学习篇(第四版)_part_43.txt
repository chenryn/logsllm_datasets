假设有个帐号名称为dmtsai，他的主文件夹在/home/dmtsai/，dmtsai对此目录具有[rwx]的权限。 若在此目录下有个名为
the_root.data的文件，该文件的权限如下：
-rwx------ 1 root root 4365 Sep 19 23:20 the_root.data
请问dmtsai对此文件的权限为何？可否删除此文件？
答：
如上所示，由于dmtsai对此文件来说是“others”的身份，因此这个文件他无法读、无法编辑也无法执行， 也就是说，他无法变动
这个文件的内容就是了。
但是由于这个文件在他的主文件夹下， 他在此目录下具有rwx的完整权限，因此对于the_root.data这个“文件名”来说，他是能
够“删除”的！ 结论就是，dmtsai这个用户能够删除the_root.data这个文件！
Tips
上述的例子解释是这样的，假设有个莫名其妙的人，拿着一个完全密封的数据夹放到你的办公室抽屉中，因为完全密封你也打不开、看不到这个数
据夹的内部数据（对文件来说，你没有权限）。 但是因为这个数据夹是放在你的抽屉中，你当然可以拿出/放入任何数据在这个抽屉中（对目录来说，你具
有所有权限）。 所以，情况就是：你打开抽屉、拿出这个没办法看到的数据夹、将他丢到走廊上的垃圾桶！搞定了 （顺利删除！）！
还是看不太懂？有听没有懂喔！没关系～我们下面就来设计一个练习， 让你实际玩玩看，应该就能够比较近入状况啦！不过，由于很多
指令我们还没有教， 所以下面的指令有的先了解即可，详细的指令用法我们会在后面继续介绍的。
先用root的身份创建所需要的文件与目录环境
我们用root的身份在所有人都可以工作的/tmp目录中创建一个名为testing的目录， 该目录的权限为744且目录拥有者为root。另外，
在testing目录下在创建一个空的文件， 文件名亦为testing。创建目录可用mkdir（make directory），创建空文件可用touch（下一章会说
明）来处理。 所以过程如下所示：
[root@study ~]# cd /tmp <==切换工作目录到/tmp
[root@study tmp]# mkdir testing <==创建新目录
[root@study tmp]# chmod 744 testing <==变更权限
[root@study tmp]# touch testing/testing <==创建空的文件
[root@study tmp]# chmod 600 testing/testing <==变更权限
[root@study tmp]# ls -ald testing testing/testing
drwxr--r--. 2 root root 20 Jun 3 01:00 testing
-rw-------. 1 root root 0 Jun 3 01:00 testing/testing
# 仔细看一下，目录的权限是 744 ，且所属群组与使用者均是 root 喔！
# 那么在这样的情况下面，一般身份使用者对这个目录/文件的权限为何？
一般用户的读写权限为何？观察中
在上面的例子中，虽然目录是744的权限设置，一般用户应该能有 r 的权限， 但这样的权限使用者能做啥事呢？由于鸟哥的系统中
含有一个帐号名为 dmtsai 的，请再开另外一个终端机，使用 dmtsai 登陆来操作下面的任务！
[dmtsai@study ~]$ cd /tmp
[dmtsai@study tmp]$ ls -l testing/
ls: cannot access testing/testing: Permission denied
total 0
?????????? ? ? ? ? ? testing
# 虽然有告知权限不足，但因为具有 r 的权限可以查询文件名。由于权限不足（没有x），所以会有一堆问号。
[dmtsai@study tmp]$ cd testing/
-bash: cd: testing/: Permission denied
# 因为不具有 x ，所以当然没有进入的权限啦！有没有呼应前面的权限说明啊！
如果该目录属于用户本身，会有什么状况？
上面的练习我们知道了只有r确实可以让使用者读取目录的文件名列表，不过详细的信息却还是读不到的， 同时也不能将该目录变
成工作目录（用 cd 进入该目录之意）。那如果我们让该目录变成使用者的， 那么使用者在这个目录下面是否能够删除文件呢？下面的练
习做看看：
# 1. 先用 root 的身份来搞定 /tmp/testing 的属性、权限设置：
[root@study tmp]# chown dmtsai /tmp/testing
[root@study tmp]# ls -ld /tmp/testing
drwxr--r--. 2 dmtsai root 20 6月 3 01:00 /tmp/testing # dmtsai 是具有全部权限的！
# 2. 再用 dmtsai 的帐号来处理一下 /tmp/testing/testing 这个文件看看：
[dmtsai@study tmp]$ cd /tmp/testing
[dmtsai@study testing]$ ls -l <==确实是可以进入目录
-rw-------. 1 root root 0 Jun 3 01:00 testing <==文件不是vbird的！
[dmtsai@study testing]$ rm testing <==尝试杀掉这个文件看看！
rm: remove write-protected regular empty file `testing'? y
# 竟然可以删除！这样理解了吗？！
通过上面这个简单的步骤，你就可以清楚的知道， x 在目录当中是与“能否进入该目录”有关， 至于那个 w 则具有相当重要的权限，因为
他可以让使用者删除、更新、新建文件或目录， 是个很重要的参数啊！这样可以理解了吗？！ ^_^！
使使用用者者操操作作功功能能与与权权限限
刚刚讲这样如果你还是搞不懂～没关系，我们来处理个特殊的案例！假设两个文件名，分别是下面这样：
/dir1/file1
/dir2
假设你现在在系统使用 dmtsai 这个帐号，那么这个帐号针对 /dir1, /dir1/file1, /dir2 这三个文件名来说，分别需要“哪些最小的权限”才能
达成各项任务？ 鸟哥汇整如下，如果你看得懂，恭喜你，如果你看不懂～没关系～未来再来继续学！
操作动作 /dir1 /dir1/file1 /dir2 重点
读取 file1 内容 x r - 要能够进入 /dir1 才能读到里面的文件数据！
修改 file1 内容 x rw - 能够进入 /dir1 且修改 file1 才行！
执行 file1 内容 x rx - 能够进入 /dir1 且 file1 能运行才行！
删除 file1 文件 wx - - 能够进入 /dir1 具有目录修改的权限即可！
将 file1 复制到 /dir2 x r wx 要能够读 file1 且能够修改 /dir2 内的数据
你可能会问，上面的表格当中，很多时候 /dir1 都不必有 r 耶！为啥？我们知道 /dir1 是个目录，也是个抽屉！那个抽屉的 r 代表“这个抽
屉里面有灯光”， 所以你能看到的抽屉内的所有数据夹名称 （非内容）。但你已经知道里面的数据夹放在哪个地方，那，有没有灯光有差嘛？
你还是可以摸黑拿到该数据夹的！对吧！ 因此，上面很多动作中，你只要具有 x 即可！r 是非必备的！只是，没有 r 的话，使用 [tab] 时，他就
无法自动帮你补齐文件名了！这样理解乎？
Tips
看了上面这个表格，你应该会觉得很可怕喔！因为，要读一个文件时，你得要具有“这个文件所在目录的 x 权限”才行！所以，通常要开放的目
录， 至少会具备 rx 这两个权限！现在你知道为啥了吧？
我们在基础篇一直强调一个概念，那就是：任何设备在Linux下面都是文件， 不仅如此，连数据沟通的接口也有专属的文件在负责～所
以，你会了解到，Linux的文件种类真的很多～ 除了前面提到的一般文件（-）与目录文件（d）之外，还有哪些种类的文件呢？
文文件件种种类类：：
我们在刚刚提到使用“ls -l”观察到第一栏那十个字符中，第一个字符为文件的类型。 除了常见的一般文件（-）与目录文件（d）之外，还
有哪些种类的文件类型呢？
正正规规文文件件（（regular file ））：
就是一般我们在进行存取的类型的文件，在由 ls -al 所显示出来的属性方面，第一个字符为 [ - ]，例如 [-rwxrwxrwx ]。另外，依照文件的内
容，又大略可以分为：
纯文本文件（ASCII）：这是Linux系统中最多的一种文件类型啰， 称为纯文本文件是因为内容为我们人类可以直接读到的数据，例
如数字、字母等等。 几乎只要我们可以用来做为设置的文件都属于这一种文件类型。 举例来说，你可以下达“ cat ~/.bashrc ”就可以
看到该文件的内容。 （cat 是将一个文件内容读出来的指令）
二进制档（binary）：还记得我们在“ 第零章、计算机概论 ”里面的软件程序的运行中提过， 我们的系统其实仅认识且可以执行二进
制文件（binary file）吧？没错～ 你的Linux当中的可可执行文件（scripts, 文字体批处理文件不算）就是这种格式的啦～ 举例来说，
刚刚下达的指令cat就是一个binary file。
数据格式文件（data）： 有些程序在运行的过程当中会读取某些特定格式的文件，那些特定格式的文件可以被称为数据文件
（data file）。举例来说，我们的Linux在使用者登陆时，都会将登录的数据记录在 /var/log/wtmp那个文件内，该文件是一个data
file，他能够通过last这个指令读出来！ 但是使用cat时，会读出乱码～因为他是属于一种特殊格式的文件。了乎？
目目录录（（directory））：
就是目录啰～第一个属性为 [ d ]，例如 [drwxrwxrwx]。
链链接接文文件件（（link））：
就是类似Windows系统下面的捷径啦！ 第一个属性为 [ l ]（英文L的小写），例如 [lrwxrwxrwx] ；
设设备备与与设设备备文文件件（（device））：
与系统周边及储存等相关的一些文件， 通常都集中在/dev这个目录之下！通常又分为两种：
区块（block）设备文件 ：就是一些储存数据， 以提供系统随机存取的周边设备，举例来说，硬盘与软盘等就是啦！ 你可以随机的
在硬盘的不同区块读写，这种设备就是区块设备啰！你可以自行查一下/dev/sda看看， 会发现第一个属性为[ b ]喔！
字符（character）设备文件：亦即是一些序列埠的周边设备， 例如键盘、鼠标等等！这些设备的特色就是“一次性读取”的，不能够
截断输出。 举例来说，你不可能让鼠标“跳到”另一个画面，而是“连续性滑动”到另一个地方啊！第一个属性为 [ c ]。
数数据据接接口口文文件件（（sockets））：
既然被称为数据接口文件， 想当然尔，这种类型的文件通常被用在网络上的数据承接了。我们可以启动一个程序来监听用户端的要求，
而用户端就可以通过这个socket来进行数据的沟通了。第一个属性为 [ s ]， 最常在/run或/tmp这些个目录中看到这种文件类型了。
数数据据输输送送档档（（FIFO, pipe））：
FIFO也是一种特殊的文件类型，他主要的目的在解决多个程序同时存取一个文件所造成的错误问题。 FIFO是first-in-first-out的缩写。第一
个属性为[p] 。
除了设备文件是我们系统中很重要的文件，最好不要随意修改之外（通常他也不会让你修改的啦！）， 另一个比较有趣的文件就是链接
文件。如果你常常将应用程序捉到桌面来的话，你就应该知道在 Windows下面有所谓的“捷径”。同样的，你可以将 linux下的链接文件简单的视
为一个文件或目录的捷径。 至于socket与FIFO文件比较难理解，因为这两个咚咚与程序（process）比较有关系， 这个等到未来你了解
process之后，再回来查阅吧！此外， 你也可以通过man fifo及man socket来查阅系统上的说明！
Linux文文件件扩扩展展名名：：
基本上，Linux的文件是没有所谓的“扩展名”的，我们刚刚就谈过，一个Linux文件能不能被执行，与他的第一栏的十个属性有关， 与文
件名根本一点关系也没有。这个观念跟Windows的情况不相同喔！在Windows下面， 能被执行的文件扩展名通常是 .com .exe .bat等等，而在
Linux下面，只要你的权限当中具有x的话，例如[ -rwxr-xr-x ] 即代表这个文件具有可以被执行的能力喔！
Tips
具有“可执行的权限”以及“具有可执行的程序码”是两回事！在 Linux 下面，你可以让一个文本文件，例如我们之前写的 text.txt 具
有“可执行的权限” （加入 x 权限即可）， 但是这个文件明显的无法执行，因为他不具备可执行的程序码！而如果你将上面提到的 cat 这个可以执行的
指令，将他的 x 拿掉，那么 cat 将无法被你执行！
不过，可以被执行跟可以执行成功是不一样的～举例来说，在root主文件夹下的 initial-setup-ks.cfg 是一个纯文本文件，如果经由修改权
限成为 -rwxrwxrwx 后，这个文件能够真的执行成功吗？ 当然不行～因为他的内容根本就没有可以执行的数据。所以说，这个x代表这个文件具
有可执行的能力， 但是能不能执行成功，当然就得要看该文件的内容啰～
虽然如此，不过我们仍然希望可以借由扩展名来了解该文件是什么东西，所以， 通常我们还是会以适当的扩展名来表示该文件是什么种
类的。下面有数种常用的扩展名：
*.sh ： 脚本或批处理文件 （scripts），因为批处理文件为使用shell写成的，所以扩展名就编成 .sh 啰；
*Z, *.tar, *.tar.gz, *.zip, *.tgz： 经过打包的压缩文件。这是因为压缩软件分别为 gunzip, tar 等等的，由于不同的压缩软件，而取其相关的扩
展名啰！
*.html, *.php：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件啰！ .html 的文件可使用网页浏览器来直接打开，至于 .php 的
文件， 则可以通过 client 端的浏览器来 server 端浏览，以得到运算后的网页结果呢！