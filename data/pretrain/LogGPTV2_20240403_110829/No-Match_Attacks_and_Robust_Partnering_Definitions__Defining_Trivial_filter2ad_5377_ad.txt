protocols can lead to no-match attacks. Possible candidates are all
primitives that make one or more messages be computed probabilis-
tically like for example NIZK proofs, or probabilistic authenticated
encryption systems. However, we stress that general statements on
the vulnerability of some primitives to no-match attacks are inap-
propriate. No-match attacks are not launched against primitives
but against a concrete protocol in a concrete security model. At the
same time we also want to emphasize that no-match attacks not
only rely on modifications of cryptographic values. In fact, they
may modify any data that is exchanged between two communica-
tion partners. Indeed this is one reason why they are so hard to
spot. For example, in Appendix E.2 we describe subtle no-match
attack that exploit that group elements can have more than one rep-
resentation. Additionally, Appendix C shows that no-match attacks
can be launched by modifying values that are entirely independent
of the remaining protocol messages and in particular of the session
key.
4 NOVEL DEFINITIONS OF PARTNERING
Let us stress once again that the above attacks do seemingly not
harm the practical security of the above protocols in any meaning-
ful way. However, strictly speaking their security proofs are not
sound. In this work, we propose several approaches to armor pro-
tocols against no-match attacks. Ideally our solutions should be as
little invasive as possible to make them easily applicable to existing
protocol implementations as well (either via only minor modifica-
tions of the protocol or no modification at all). In the following
we will concentrate on our main and recommended solution to
the problem of no-match attacks – a modification of the definition
of partnering (as compared to modifications of the primitives or
the overall protocol). In essence, we propose a careful relaxation
of the notion of matching conversations. In Appendix E we pro-
pose two other solutions. The first relies on a careful instantiation
of the building blocks that are used in a security protocol. More
concretely it proposes to only use unique primitives and unique
message encodings. The second solution relies on a compiler (in
the random oracle model) which makes the computation of the ses-
sion key crucially depend on every message bit that is exchanged
between two parties. In this way, the computation of the session
key needs to be adapted slightly. Before we detail our new defi-
nition of partnering, we note that although no-match attacks do
not directly give rise to practical attacks they can be problematic
for the application they are used in, for example if the protocol is
used under the (implicit) assumption that there is a correspondence
between matching conversations and successful key establishment.
Thus protocols that have been analyzed on the basis of a modified
definition of matching conversations should only be used after a
careful analysis of the application scenario.
Intuitively, what we want from a secure protocol (from a design
perspective) is that any active modification of the exchanged mes-
sages should result in the two communicating oracles to compute
distinct and unrelated keys. This models that the adversary has
no way of meaningfully tempering with the messages. Now since
the keys are unrelated we can also allow the adversary to reveal
one of the keys. This should not harm the secrecy of the other key.
With this rationale in mind, we can clearly isolate where no-match
attacks introduce a theoretical problem. In a no-match attack, the
keys remain the same although there is an active attack (see Fig-
ure 1 and Figure 2). Our final solution is to change the security
model such that no-match attacks (and only them!) do not break
the security of the protocol anymore. Arguably, this is legitimate
since no-match attacks do not constitute realistic attacks anyway.
Thus, from a more abstract viewpoint we can view the omission
of no-match attacks from the set of valid attacks as an attempt to
adapt theoretical security definitions for key exchange to model
practical protocol settings more realistically.
4.1 Robust Matching Conversations
What we intuitively require from our modified definition of part-
nering is that it deletes no-match attacks from the set of attacks
that are considered valid. In our new definition, we try to capture
only ‘meaningful’ modifications of the messages by the adversary.
Intuitively, what we want is a definition that is useful in situa-
tions where it may not be harmful for Bob to accept a cryptographic
value v′ that has been produced by an adversary. For example, in
signed Diffie-Hellman, if the signature v′ is valid and produced on
the same message as Alice’s signature v, one could argue that Bob
may still be able to securely use the corresponding session key in
practice. A natural first approach to define this kind of partnering is
to relax the definition of matching conversations. More concretely
one could define a form of ‘robust matching conversations’. Under
such a definition the session identifier of an oracle would not only
consists of the transcript of messages that this oracle actually gener-
ated in a protocol run. In contrast, the session identifier of an oracle
would additionally contain the entire set of transcripts that could
have been produced by that oracle in presence of a no-match attack.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1351However, there are two major disadvantage of such a definition.
The first one is that it ultimately ties the formalization of security
(i.e. of the session identifier) to the design of the protocol (i.e. to
the ways the protocol admits no-match attacks). The second one
is that it may be difficult to specify the session identifier because
they are hard to spot or just because there are too many. Our final
definition circumvents these problems entirely.
4.2 Original Key Partnering
We propose to use the following partnering definition as a standard
substitution of matching conversations to exclude no-match attacks
while still providing a very high level of security.
Definition 4.1 (Original Key Partnering). Two oracles a and b are
said to be partnered if both of them have computed their original
key.
Notably, original key partnering ultimately decouples the defini-
tion of partnering from the sent protocol messages. Besides being
theoretically compelling, this is an important benefit as one does
not have to explicitly consider all no-match attacks possible in a
protocol. Moreover, it is a useful partnering definition in situations
in which it is hard to find an appropriate message-dependent part-
nering definition in the first place, for example when dealing with
PKE encryption as detailed in Section 3.3 and Appendix E.1. Its in-
dependence from concrete messages makes original key partnering
a very general and versatile definition of security. Furthermore, it
is a very practical partnering concept as it concentrates on a single
cryptographic value, independent of the complexity of the protocol.
This supports simple falsification. Our definition can generically
be plugged into all existing security definitions that rely on match-
ing conversations. At the same time it fixes all MC-based security
proofs that fail to address no-match attacks: as an immediate con-
sequence of original key partnering, no-match attacks vanish from
the spectrum of possible attacks against a protocol (Figure 3).
We remark that the definition of original key partnering nicely
supports the following, natural intuition: if (despite there being an
active attack) the session keys computed by two oracles are equal
to those computed in a protocol run with a passive attacker then
these keys are treated as being (cryptographically) as good as well.
To give a slightly different perspective, our definition might be
viewed to follow some form of ideal/real world paradigm. First we
define an ideal run of a key exchange protocol where the attacker is
passive only. Our definition decides that for key exchange protocols
the defining characteristic of such a run is that both oracles have
computed their original key, i.e. the original key is computed by
Alice and Bob without any adversarial interference. Next we classify
any attack with respect to this ideal run. If after some adversarial
modification both oracles still have computed the original key, then
this does not deviate from the ideal definition, and thus does not
constitute a valid attack.
In our definition of original key partnering we deliberately avoid
to explicitly enumerate all possible ways in which messages may be
modified to launch a successful no-match attack. Besides being very
complex such a classification is always highly protocol-dependent.
Intuitively, our definition rather focuses on the fact that the modified
messages trigger the same behavior of the receiver as the original ones
– and ultimately lead to the computation of the same (original) key.
When comparing original key partnering with previous partnering
notions we can observe that similar to matching conversations our
new definition fulfills the first set of desirable properties, 1)–6),
given in Section 1. However, in contrast to matching conversations
it also fulfills properties 7)–9). Proving security under original key
partnering is comparable to proofs under matching conversations,
with a tendency to be slightly simpler (since less cases have to be
considered): proofs under matching conversations usually distin-
guish active and passive attacks. Roughly, first active attacks are
ruled out by reducing to the properties of the underlying primitives.
Then security follows from the passive security of the protocol.
In contrast, when using original key partnering, we only have to
consider a subset of active attacks in the first step, namely those
that make either Alice or Bob not compute their original key. We
provide an illustrative example protocol in Appendix D together
with a proof sketch.
passive attacks
Test-oracle has partner oracle
there is an oracle that shares
original key with Test-oracle
active attacks
no partner oracle
no oracle shares original
key with Test-oracle
Figure 3: Attack spectrum and corresponding states of the
Test-oracle when relying on original key partnering.
Remark 1. We stress that for our security definition it is not helpful
to isolate messages that contribute to the computation of the session
key from those that do not, as it is usually done when relying on
partial matching conversations. The core problem is that no-match
attacks may aim to modify both, messages which do contribute
to the session key derivation but also messages which do not. For
example, the signatures in our running example obviously con-
tribute to the session key generation in the sense that if they are
invalid, the session key will not be computed at all. However, our
results show that in some protocols one can launch a successful
no-match attack by modifying these signatures.11 One the other
hand, in Appendix C we show that in traditional security models,
augmenting protocol messages with new but entirely independent
messages can lead to no-match attacks, too.
We also remark that despite its apparent generality the partner-
ing function given in [7] does not cover our definition. Roughly, a
partnering function takes as input a single oracle, a communica-
tion transcript, and the (so-called) intended partner of that oracle
(see Section 5) and outputs the partnered oracle, if it exists. (If the
input oracle communicates with the adversary, the function simply
outputs a fixed error symbol. It is important to note that in such
situations, it is trivial for the adversary to compute the session
key of the Test-oracle - it can simply run the protocol with the
Test-oracle.) In contrast, our partnering definition rather takes as
input two oracles. Conceptually, each pair of oracles, is associated
with their original key. (So, for n oracles there are O(n
2) original
11Some signature schemes, like re-randomizable signatures, are even by definition
modifiable, albeit in some well-restricted way.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1352keys.) In our definition, two oracles are then considered partnered
if both have indeed computed their original key. To deal with situa-
tions in which an oracle is communicating with the adversary we
can require that the peer of the Test-oracle is uncorrupted, as for
example in [37].
Similarly, our new definition of original key partnering cannot be
viewed as an instantiation of the session identifier concept, where
each oracle is associated with a session identifier and partnering is
decided by comparing the session identifiers of two oracles. In our
new definition each oracle may rather be viewed to have several
potential session identifiers (original keys), one with each other
oracle. Partnering only holds if both oracles have indeed computed
it.
4.3 Partnering via Mere Key Comparison is Not
Sufficient
We would like to emphasize that we do not define partnering by com-
paring session keys. Such a definition would fail to reflect real-world
attacks in the security model. Let us provide a brief example. For
example, we can easily consider a protocol where the adversary can
– via an active attack – make an oracle accept with a key of some
other oracle. In practice, an adversary could for example make a
client computer with no physical protection mechanisms compute
the same key that is shared between two strongly protected servers.
Attacking the client computer would then also reveal the servers’
session key and an adversary could simply distinguish it from a ran-
dom key. We clearly want that such an attack is reflected in a strong
security model. More generally, any protocol where the adversary
can make an oracle compute a given key should be considered inse-
cure and most security protocols successfully protect against this
kind of attacks.12 However, when we use mere key comparison to
define partnering, revealing the client computer before breaking
key indistinguishability of one of the server oracles is deemed a triv-
ial attack as it holds the same key as the two servers. This is highly
unintuitive. When using original key partnering, in contrast, this is
a legitimate attack in the security model. This choice of partnering
definition clearly distinguishes our work from all previous results
that (partly) define partnering by considering if two oracles have
merely computed the same key (not necessarily the original key),
for example [5]. Our definition is stronger than all these definitions:
with original key partnering, if an attacker manages to make two
oracles accept with the same key (distinct from the original key)
then this is guaranteed to be deemed a successful attack. In contrast,
mere key comparison may not recognize this as an attack at all.
4.4 Public vs. Secret Partnering
As the original key must be kept secret, original key partnering does
in general not allow the adversary to efficiently test whether two
oracles are partnered. In general, it is thus harder for the adversary
to base its strategy on the fact that in the past certain pairs of oracles
have been partnered or not. We would like to comment on this in
more detail and argue why relying on such a ‘hidden’ partnering
definition is not a serious restriction.
12If the attacker is also allowed to reveal session keys it should even be possible to
successfully break key indistinguishability independent of the attackers computational
power.
First, we stress that the adversary controls the entire network
and can decide on which message is delivered to which oracle.
Moreover when behaving entirely passive, the adversary already
knows exactly which oracles are partnered. Thus any unclarity
in deciding if two oracles are partnered is always introduced by
the adversary herself in exactly the way she desires to. It is also
worth mentioning that the adversary knows the protocol layout
and the used primitives. So it already knows which changes to the
transmitted messages influence the computation of the session key.
At the same time we stress that our definition of partnering does by
no means exclude that there also exist (efficient) public algorithms
for checking if two oracles are partnered. This is important when we
consider results like the compiler of [15] which explicitly requires
an efficient public function for checking whether two oracles are
partnered with each other.
Second, from a theoretical point of view the partnering definition
is only required in the security analysis. For provable security, it
is not required that any entity can actually compute partnered
oracles efficiently. Partnering is merely used to define the winning
conditions of the adversary. In particular, we do not have to make
the simulator be able to check if the partnering condition (as part of
the winning condition) is violated. In the security proof, we simply
assume an adversary that breaks the security definition and, as part
of that, respects the partnering definition. This is quite similar to the
fact, that we cannot have the simulator in the indistinguishability
game be able to verify if the adversary’s guess (for a real or a
random key) is actually true. (The latter fact is simply because
any simulator that can verify the adversary’s guess can already
compute the solution on its own. Thus it cannot embed the security
challenge at this point.)
Finally, we would also like to emphasize that it is not necessary
to use session identifiers to formalize the access of the adversary to
its queries. Although there exist security models like the Canetti-
Krawczyk model [17] or the model in [5] that uses session identifiers
to access oracles (note that this strategy is problematic when session
identifiers are post-specified), it is always possible to formulate the
entire security game without them, for a recent example of this
type of formalization see the model used in [24].
We also remark that some security models specify that the ses-
sion identifier computed by two oracles is given to the adversary
after they computed the session key, for example in [5]. This also
holds for the Test-oracle. However, in these models session identi-
fiers are based on public information only (and used to formalize
access to queries). As usual, the session key must be kept secret.
Therefore basing our session identifier on secret original keys is, in
some sense, not a restriction. In particular, the adversary can still
access the same public information generated in the protocol run
by two oracles as in the model of [5].