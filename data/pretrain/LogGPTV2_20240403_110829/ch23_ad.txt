太多压力：要求采用系统、框架或实践的倾向，而不是将它们作为一个有吸引力的选项来实现你的目标，同时使合作伙伴更容易同时实现自己的目标。
有一个共同的主题，汇集了前两个反模式，但又有超越。那就是如果你试图成为生产环境的守门人，或通过建立一个工具，然后试图迫使人们使用它，那么最终会一事无成。更糟糕的是，科学上已经证明这样还会造成伤害。团队可以选择自己的工具，并且引入轻量级的团队内部审核流程，与尝试将此类决策强加给团队的组织相比，这种开明的态度更快地达成了更好的结果。Forsgren, Nicole, Jez Humble, and Gene Kim（2018）加速：精益软件和 DevOps 的科学。Portland, OR: IT Revolution Press。
使员工更难完成工作，而不是更容易。这种管理风格的安全和生产工程团队会发现，他们并没有消除任何风险；他们其实只是在控制与政策的压制中催生了一种作坊式的工作体系。
在 Dropbox，围绕重新设计团队部署服务的方式，我们把基础架构的吉祥物设置成一名宇航员，他举着印有胡萝卜标志的旗帜（#to_boldly_growdot22）。它不仅很可爱，还能每天提醒相关团队要对大家友善。大胆成长感谢 Maggie Nelson 和 Serving Platform 的慷慨帮助。
应该专注于构建更好的开发人员基础架构和生产实用程序，以便产品团队用你的工具和服务来赢得工作效率，要么因为它们优于自己的工具和服务，要么因为它们对于 80% 的案例都很好用，同时还能减轻大量的开发工作量，也能大量减低运维负荷，适用于提供和支持服务。
你的目标应该是通过倾听同事的痛点来构建足够酷的东西，帮助他们获得优势，也帮助他们提高执行能力。从而让他们自发的向 SRE 团队添加工程师，而不必继续将工程师添加到自己的团队。从此你可能会找不到更多的人来雇佣，且不必和其他部门为预算而开战。有趣的是，任何足够大的吸引力在功能上也可以成为其他团队的压力。
实现此目标的唯一方法是构建良好的工具，并收集有关它们提供的实际工作效率的精确指标。好消息是，可靠性工程也是速度工程。你的团队不是成本中心、不是官僚机构、也不是纪律警察，你是开发团队的力量倍增器，也是为客户提供所需内容的直接贡献者：可靠、高效地访问服务，使他们的生活更好、更高效。反模式12：推迟生产
过于谨慎的推新会产生更大的问题。
推迟生产：为试错过程而强加过长的提前周期和测试延迟，以防止任何系统故障的出现，几乎剥夺了工程师对有关其实际影响做出简单、快速的反馈调整的能力。
有时，为了保护生产环境免受潜在有害更改的影响，我们设置了各种检查和测试以及试错周期，尝试提前在更新生产环境之前检测任何问题。
生产前测试很重要，但我们需要确保在开发人员进行更改和他们获得关于其发布影响的实际反馈之间不要引入明显的延迟。
最好的方法是通过自动化和仔细的测试，并在可能的情况下，通过灰度发布、生产/集成环境试错和“1%”推送来提供早期生产反馈机会，甚至有可能串联执行更慢和更耗时的测试（负载、性能等），具体取决于服务对错误的容差或重试能力。
我们需要使产品开发人员能够尽快了解其发布的实际影响。错误率上升了吗？还是降低了？延迟如何？我们应该在工作流中自动公开这些类型的影响，而不是让他们去查找信息。产品开发人员是团队的一部分。他们应该能够看到他们的努力在生产中尽可能接近实时产生什么成果。
专注于缩短反馈循环，从早期开发测试到性能测试到生产指标。更快的反馈提供更高的速度，同时实际提高安全性（者不能妥协），特别是如果你正在进行自动试错和性能/负载测试。计算机比人类更善于在大型数据集中发现有问题的模式。不要依赖人类。
能够快速更新或回滚，同时能够通过尽可能多的、有意义的标准，对流量进行切片和切分，并控制哪些部分交付给哪些系统，这降低了更新或回滚的风险，因为当发现问题时，你可以对它做出反应。如果能够自动回滚可检测到的不良更新或失败更新，则我们面对的风险几乎为零。
反模式 13：优先避免故障而不追求快速恢复（MTTF > MTTR）
  失败是不可避免的。善于处理它，而不必尝试完全避免它。
MTTF > MTTR：不适当地重视避免故障（增加平均故障时间 [MTTF]），特别是忽略快速检测和从故障中恢复的能力（平均恢复时间 [MTTR]）。让生产系统继续苟延残喘，这本质上是一种更广泛的反模式，因为花费了不成比例的设计和操作努力来防止系统出现故障，而不是确保系统能够快速地从不可避免的故障中恢复过来。其实那样对用户的影响最小。但是对弹性的追求还是应该胜过鲁棒性，除非受到静态架构的限制。
事实是，有些应用程序无法从某些类型的故障中恢复。对于医学领域来说，当有人进入脑死亡时，我们就无法让他们快速康复。因此，通过锻炼和健康饮食，努力使身体尽可能强壮，并尽我们所能防止器官衰竭或其他可能导致“病危通知”的故障，这是有道理的。
运动和饮食控制可以提高身体健康程度，并防止心脏病发作的发生，例如，心脏病发作会导致心脏停止。但是，即使在一个世纪前，我们也无法将人们从急性体温过低或心脏骤停中抢救回来。但是在50年代发现了人工复苏术，然后是60年代医院里可以进行心脏除颤术，70年代医护人员迅速配备了便携式除颤仪，然后80年代更迅速推出了EMT高度分布式除颤，90年代大众普及了自动除颤以及随后的可植入/可穿戴设备。西雅图同时是心脏复苏和云计算的先驱，因此这些日期可能与你的历史知识不完全相符，但可能大致相同：https://en.wikipedia.org/wiki/History_of_cardiopulmonary_resuscitation。现在，我们有恢复机制，可以帮助那些遭受这些创伤的人的功能恢复，哪怕将来再次发也不怕。我们甚至可以计划一次小的创伤（比如体温过低）来帮助人类增加面对其他创伤（溺水、心脏停止）的生存能力，甚至有控制的计划一次心脏病发作，以帮助我们防止将来发生更大、更具破坏性的意外发作。每年，我们更善于更换各种我们无法阻止的器官。我们还没有彻底解决问题，但我们已经看到快速检测、响应和可恢复性，避免了无法预防和避免的灾难。
在计算方面，我们走得更远。公司的网站可靠性就是一个例子，我每天的都会有失败的体验。但是，SRE 不只是能预测失败，甚至开始期待失败，并基于失败一定会发生而改进设计，届时流量将需要重新路由而不至停顿，失败的恢复需要在短期内完成，这些都依赖于自动重新部署而不是行政上的外部努力。
混沌工程是现代服务规划和设计的重要工具。百分之百的在线时间是一个神话，因为所有的变化都会给您的系统带来风险。但是，冻结更新会消除的是在真正的失败发生之前解决现有风险的能力，而系统始终存在风险。无论哪种方式，系统总会有失败，因此请务必接受故障将发生，并转而寻求最小化故障的影响。引入容忍故障和提供降级服务的功能，而不是无处不在的失败。充分分发服务，以便它可以利用分发机制来提高吞吐量，以便从故障域外的基础架构部分继续服务。并尽量减少从故障中恢复和（在适当情况下）重新处理任何错误所需的人工干预的时间（和程度）。
确保这些设计原则在实践中得到遵守，最佳方法之一是定期将不至崩溃的故障引入你的系统。
一位面试官曾经问我，“好的 SRE 有什么特点？”一个答案是，SRE 需要善于编写软件、调试系统，并想象事情会如何失败。
最后一部分是定义：主要从事可靠性工作的软件工程师和主要从事产品开发的软件工程师之间的区别。我们有时玩一个游戏，在游戏中，我们将指定一个生产环境的运行实例，隔离它，然后说出某种破坏方式，然后试着猜测会发生什么。然后，我们就按照之前说的来实施破坏，看看我们是否得到了预测的行为，还是观察到一些其他的失败模式，这可能是更令人兴奋和意想不到的一点。我们试图找到门槛和临界点，以及讨论边界情况，这样你自以为非常熟悉的复杂系统在几年后可能仍然会让你大吃一惊。
这很像黑客或软件测试的工作，只是有不同的焦点，所以有一组不同的模式。过了一会儿，我们成了失败的鉴赏家。然后，我们将尝试找出如何防止我们发现的东西影响用户的服务，然后尝试再次破坏这些修复程序。这是一个好时机，如果你对这种事情感兴趣。
不过，当你玩过这个游戏时，最好的办法就是从中吸取最有影响力的教训，并把它们融入到你的自动压力测试/试错环境/生产测试中（你的 Chaos Monkey 或者你使用的任何工具）这样这些随着时间的推移，系统会定期应用各种测试，并帮助确保将来的系统更改不会导致稳定性或弹性的降低。只有具有良好的恢复能力，特别是可检测、回滚和可恢复性，才能避免生产流量免受任何新引入的问题或老问题的影响，这个游戏才能继续下去。当我们努力确保系统定期面对此类测试时，它迫使站点可靠性开发人员更多地考虑产品设计，以及他们可以为产品团队提供哪些基础架构上的帮助。它还迫使产品开发人员更多地考虑为规模和生存能力进行设计，并确保他们利用 SRE 为他们提供的可靠性特性和服务。这就保留了 SRE 起初的明确契约（将可靠性作为技术功能优先实施，无论是哪个领域） ， 在组织承担的一切事情中起到中流砥柱的作用，因此其他团队无需付出额外努力。  
反模式14：依赖地狱