III. DUAL-EXECUTION PROTOCOLS
Informally, a secure-computation protocol needs to satisfy
two properties: privacy, which ensures private inputs are
not revealed improperly, and correctness, which guaran-
tees the integrity of the ﬁnal output. Yao’s (semi-honest)
garbled-circuit protocol is easily seen to provide one-sided
privacy against a malicious circuit generator as long as an
OT protocol secure against malicious adversaries is used,
and the evaluator does not reveal the ﬁnal output to the
circuit generator. It thus only remains to provide correctness
guarantees for an honest circuit evaluator against a possibly
malicious generator, and to provide a way for both parties
to receive the output while continuing to provide privacy
guarantees against a malicious generator.
The dual-execution (DualEx) protocol proposed by Mo-
hassel and Franklin [30] provides a mechanism to achieve
these guarantees. The protocol involves two independent ex-
ecutions of the semi-honest garbled-circuit protocol, where
each participant plays the role of circuit generator in one of
the executions. The outputs obtained from the two execu-
tions are then compared to verify they are identical; if so,
each party simply outputs the value it received. Intuitively,
this may leak an extra bit of information to an adversary
who runs the comparison protocol using an incorrect input.
We describe the protocol and method for comparing
outputs in more detail next. Note that Mohassel and Franklin
left some details of the protocol unspeciﬁed, and did not
give a proof of security. They also did not provide any
implementation of their approach.
A. Notation
We write a set of wire-label pairs as a matrix:
(cid:32)
W =
w0
w1
1 w0
2
1 w1
2
··· w0
··· w1
(cid:96)
(cid:96)
(cid:33)
.
A vector of wire labels is denoted as
w = (w1, w2, . . . , w(cid:96)) .
If v ∈ {0, 1}(cid:96) is a string and W is a matrix as above, then
we let
Wv = (wv1
1 , . . . , wv(cid:96)
(cid:96) )
be the corresponding vector of wire labels.
B. Protocol
Assume the parties wish to compute some function f, and
(for simplicity) that each party holds an n-bit input and that
f produces an (cid:96)-bit output.
Figure 1 depicts an overview of the basic DualEx protocol.
This is essentially the protocol described in Section 4.1 of
Mohassel and Franklin’s paper [30]. The protocol consists of
two separate runs of a particular semi-honest protocol plus a
ﬁnal stage for verifying that certain values computed during
the course of the two semi-honest executions are identical.
A more detailed description of the DualEx protocol is
shown in Figure 2. The protocol is conceptually divided
into three stages: the ﬁrst run, the second run, and the
274
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. DualEx protocol overview (informal).
secure validation. For the sake of performance, however, our
implementation executes the ﬁrst two stages concurrently,
using pipelining to overlap the circuit-generation and circuit-
evaluation work for each party (see Section VI). (As long
as the oblivious transfers are done sequentially, our security
proof is unaffected by performing the two garbled-circuit
executions in parallel. The reason is that our security proof
holds even against a “worst-case” adversary who waits to
receive the entire garbled circuit from the honest party before
sending any of its own garbled gates.) We stress that the
parties run each of the ﬁrst two stages to completion — even
if an error is encountered — so that no information is leaked
about the presence or absence of errors in an execution. If an
error is detected that prevents normal progress, the execution
continues using random values.
The DualEx protocol uses a speciﬁc garbled-circuit pro-
tocol with an oblivious-transfer sub-protocol secure against
malicious adversaries (see Figure 3). After an execution of
this protocol, only P2 learns the output (but is uncertain
about
its correctness), while P1 learns nothing. In this
version, the result f (x, y) is revealed to P2 (Bob in the
ﬁrst execution as deﬁned in Figure 2) even if cheating by
P2 is detected during the equality-checking protocol. This
does not violate our deﬁnition of security, however for many
scenarios this property would be undesirable. Section VII
presents some heuristic enhancements to the basic protocol
that address this issue by limiting the amount of information
either party can obtain during the protocol execution.
C. Secure Output Validation
The goal of the secure validation protocol is to verify
the correctness of the outputs Alice and Bob obtained in
the previous stages. The validation protocol consists of an
equality test between certain output-wire labels held by
each of the parties. Since half the output-wire labels chosen
by the garbled-circuit generator are never learned by the
circuit evaluator (and since output-wire labels are chosen at
random) this has the effect of preventing an adversary from
(usefully) changing their input to the equality test. In an
honest execution, on the other hand, since both executions
275
of the garbled-circuit sub-protocol are computing the same
function on the same inputs, the inputs to the equality test
will be equal.
The equality test will be done by ﬁrst (a) computing a
hash of the inputs at both sides, and then (b) comparing the
hashes using an equality test that is secure against malicious
adversaries. (See Figure 4.) If the hash used in the ﬁrst
step is modeled as a random oracle (with sufﬁciently large
output length), then it is possible to show that this results in
an equality test for the original inputs with security against
malicious adversaries.
Input to Alice: the private input x.
Input to Bob: the private input y.
Output to both Alice and Bob: f (x, y), or ⊥ if
cheating is detected.
Execution:
1) Alice and Bob run the semi-honest garbled-circuit
protocol (Figure 3) where Alice plays the role of
circuit generator (P1), and Bob plays the role of
circuit evaluator (P2). Alice knows the 2(cid:96)
output-wire labels she generated, WA, while Bob
learns (cid:96) output-wire labels wB and an output
vB ∈ {0, 1}(cid:96). (If both parties are honest,
wB = WvB
A .)
2) Alice and Bob invoke the semi-honest garbled
circuit protocol again, swapping roles. Alice
learns the output vA along with labels wA, while
Bob knows the label pairs WB. (If both parties
are honest, then wA = WvA
B , and also vA = vB.)
3) Alice and Bob run a “validation protocol” (i.e.,
an equality test), secure against malicious
adversaries. (See Figures 4 and 5 for one possible
A (cid:107)wA and Bob
instantiation.) Alice uses input WvA
uses input wB(cid:107)WvB
B . If the protocol outputs true,
then Alice outputs vA and Bob outputs vB.
Otherwise, the honest party has detected
malicious behavior and outputs ⊥.
Figure 2. DualEx protocol
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Simply exchanging the hashes and doing local comparison
is problematic, because this may reveal information on the
outputs of the circuit evaluation which is supposed to be
hidden from the generator unless the validation check passes.
For example, already knowing all the output-wire label pairs,
the generator who learns the evaluator’s hash can test for
candidate output values. Therefore, it is of vital importance
to keep the hashes secret throughout the comparison protocol
if the equality test fails.
A (cid:107)wA) and h2 = H(wB(cid:107)WvB
The most straightforward realization of the equality test
is to use a generic garbled-circuit protocol (with malicious
security). The inputs to the circuit are the hashes h1 =
H(WvA
B ), while the circuit
is simply a bunch of bitwise XORs (to compute h1 ⊕ h2)
followed by a many-to-1 OR circuit that tests if all bits of
h1 ⊕ h2 are zero. This still requires running a full garbled-
circuit protocol with malicious security, however, which can
be expensive.
An alternative is to view an equality test as computing
the intersection of two singleton sets. Private set intersection
has been widely studied in many contexts, including in the
presence of malicious adversaries [9, 13, 5, 20, 21, 7]. We
derive our secure equality-test protocol (Figure 5) by spe-
cializing the ideas of Freedman et al. [9] based on additively
homomorphic encryption. The basic protocol enables P2 to
prove to P1 that he holds an hB that is equal to hA in
(cid:33)
.
(cid:32)
w0
w1
Input from P1: private input x.
Input from P2: private input y.
Output to P1: the output wire key pairs
WA =
Output to P2: vB ∈ {0, 1}(cid:96) representing the value of
f (x, y), and output-wire labels
A2 ,··· , wvB(cid:96)
wB = (wvB1
A(cid:96) ).
Execution:
··· w0
··· w1
A1 w0
A2
A1 w1
A2
A1 , wvB2
A(cid:96)
A(cid:96)
1) P1 and P2 run a garbled-circuit protocol where
P1 plays the circuit generator’s role and P2 the
circuit evaluator’s role.
2) P1 and P2 execute a malicious OT protocol (with
P1 the sender and P2 the receiver) to enable P2
to learn the wire labels corresponding to P2’s
input y. Then P2 evaluates the garbled circuit to
learn output-wire labels wB.
3) P1 computes(cid:32)
(cid:33)
H(w0
H(w1
A1)··· H(w0
A(cid:96))
A1)··· H(w1
A(cid:96))
for H a random oracle, and sends it to P2 so that
it can use wA to learn vB.
4) If P2 detects cheating at any point during the
protocol, he does not complain but instead just
outputs completely random vB and wB.
Figure 3. Semi-honest garbled-circuit sub-protocol
276
a privacy-preserving fashion. This basic protocol will be
invoked twice with the parties swapping roles. We remark
that the protocol that results does not appear to achieve
the standard notion of (simulation-based) security against
malicious adversaries. Nevertheless, under the assumption
that h1, h2 are independent, random values (of sufﬁcient
length), it does, informally, satisfy the following properties
even against a malicious adversary: (1) no information about
the honest party’s input is leaked to the malicious party,
and (2) the malicious party can cause the honest party to
output 1 with only negligible probability. We conjecture
that our proof of security in Section V can be adapted for
equality-testing protocols having these properties.
First of all, P1 sends to P2 α0 = (cid:74)−h1(cid:75). Then, P2
computes e =(cid:74)r × (h2 − h1) + s(cid:75), using the homomorphic
properties of the encryption scheme, as follows
r ∗(cid:0)(h2 ∗ α1) + α0
(cid:1) + s ∗ α1
where ∗ and + here denote homomorphic addition and
constant multiplication, respectively. In addition, P2 sends
h = H(s, h2). P1 decrypts the result
to recover ˆs =
r × (h2 − h1) + s, which is equal to s in case h2 = h1
but a random value otherwise. Finally, P1 checks whether
H(ˆs, h1) = h.
In contrast to the “malicious-client” protocol by Freed-
man et al. [9], it is unnecessary for P1 to verify that P2
followed the protocol (even though it could). The reason is
a consequence of several facts:
(a) P2 doesn’t gain anything from seeing (α0, α1, s1);
(b) it is of P2’s own interest to convince P1 that h1 = h2;
(c) the test only passes with negligible probability if P2
cheats.
This three-round protocol satisﬁes the properties claimed
earlier even when both Alice and Bob are malicious. The in-
formal arguments are as follows. To see that Alice’s privacy
is guaranteed, note that (cid:74)−hA(cid:75) hides −hA thanks to the
semantic security offered by the homomorphic encryption
scheme. Bob’s privacy is also guaranteed by the semantic se-
curity of both the homomorphic encryption scheme and the
cryptographic hash function (in the random-oracle model).
Input to Alice: WvA
A , wA.
Input to Bob: wB, WvB
B .
Output to both Alice and Bob:
(cid:40)
true,
if WvA
A = wB and wA = WvB
B ;
false, otherwise.
Execution:
A (cid:107)wA);
1) Alice computes h1 = H(WvA
2) Bob computes h2 = H(wB(cid:107)WvB
B );
3) Alice and Bob uses an equality test (secure
against malicious adversaries) to compare h1 and
h2. If they are equal, Alice and Bob both output
true; otherwise they output false.
Figure 4. An instantiation of the secure-validation protocol.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
IV. SECURITY ANALYSIS
This section clariﬁes what it means to leak a single bit on
average, and informally discusses possible attack strategies.
In Section V, we provide a proof that the deﬁned protocol
satisﬁes the desired property of not leaking more than one
bit on average beyond what can already be inferred from the
outputs.
A. Leakage and Detection Probability
As argued at the beginning of Section III, there is no
privacy loss for the evaluator when a semi-honest garbled