 **Migrated issue, originally created by vijchti**
Oracle database via cx_Oracle on SQLAlchemy 1.0.6 (also tested on some older
versions, got same result).
About 50% of the time, using Query.first() on a query will return None. The
rest of the time the query returns results as expected. The same behavior is
not seen when using the expression language by itself or when using any other
client on this or any other computer to retrieve the data. This issue can be
duplicated on other machines.
Here is the code I used to generate this error:
    from sqlalchemy import create_engine, Column, Integer, String
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker
    # Fix environment variables
    import os
    try:
    	del os.environ['ORACLE_HOME']
    except KeyError:
    	pass
    os.environ['TNS_ADMIN'] = r'C:\product\11.1.0\client_1\network\admin'
    os.environ['PATH'] = r'C:\product\11.1.0\client_1\BIN;' + os.environ['PATH']
    engine = create_engine(r'oracle+cx_oracle://{username}:{password}@{service_name}'.format(username='USER', password='PASSWORD', service_name='SERVICE'))
    session_maker = sessionmaker(bind=engine)
    base_class = declarative_base()
    class Lot(base_class):
    	__tablename__ = 'lot'
    	__table_args__ = {'schema': 'SCHEMA_NAME'}
    	lot_key = Column(Integer, primary_key=True)
    	lot_id = Column(String)
    session = session_maker()
    cursor = session.query(Lot)
    result = cursor.first()
    if result is None:
    	raise Exception