这一节会就JavaScript语法给你一个快速的印象。
下面是值的五种基本类型：
布尔值
数字
字符串
普通对象
数组
这是几个基础语法的例子：
注意等号的两个不同用法：
一个等号（=）用来给变量赋值。
三个等号（===）用来比较两个值（参见1.5.3“等式运算符”）。
7.2 注释
有两种注释方式。
单行注释，一行中 // 之后的剩余内容，例子如下：
多行注释，被 /＊ ＊ / 包裹的任意区间，它不能嵌套使用。例子如下：
7.3 表达式与语句
这一节关注JavaScript中的一个重要语法区别：表达式和语句之间的不同。
7.3.1 表达式
表达式将会产生一个值，它可以写在任何需要值的地方。比如例子中，作为一个函数的调用的参数或作为赋值操作的右值。下面每行都包含一个表达式：
7.3.2 语句
大致上来说，语句表示了一种行为，如循环和if语句，一个程序基本上就是语句的序列[1]。
凡是在JavaScript期望语句的地方都可以写表达式，这样的语句叫作表达式语句。反之则不然：不能在需要表达式的地方使用语句。例如，判断语句不能成为函数的参数。
条件语句与条件表达式
想把语句和表达式之间的差异看得更清楚的话，可以看这两个语法：If 语句和条件运算符（表达式）。
下面是一个If语句的例子：
还有一种类似的表达式，条件运算符。上面的语句等价于下面的代码：
等号和分号之间的代码是一个表达式。小括号不是必需的，但为了让条件运算符更加容易阅读，我们把它放到括号里。
使用二义表达式作为语句
有两种像语句的表达式类型，它们的语法类型是二义的。
对象字面量（表达式）看上去像块（语句）
上述结构是一个对象字面量（详见17.1.2“对象字面量”），或是跟在标签foo:后面的一个块，一个函数调用bar(3, 5)。
具名函数表达式看上去像是函数声明（语句）：
上述结构是一个具名函数表达式或者函数声明。前者创建一个变量并把函数分配给它（两种函数定义的方式详见15.3“定义函数”）。
为了避免二义性，在解析过程中，JavaScript不能使用对象字面和函数表达式作为语句。也就是说，表达式语句不能以下面的内容开头：
花括号；
function关键词。
如果一个表达式以上述内容作为token的开始，它只能出现在表达式的上下文中。请遵守此要求，比如把表达式用小括号括起来。接下来，看两个必要的例子。
通过eval()对一个对象字面量求值
eval在语句的上下文中解析它的参数。如果希望eval返回一个对象，需要用小括号将对象字面量括起来。
立即调用函数表达式
以下代码是一个立即调用函数表达式（IIFE），一个函数体被立即执行的函数（在16.6“通过IIFE引入新的作用域”可以知道IIFE的作用）。
如果省略了最外面的小括号，会有一个语法错误，因为JavaScript会认为它是一个函数声明，而函数声明是不能匿名的。
如果添加一个函数名，还是会出现语法错误，因为函数定义不能被立即执行。
函数声明后面跟着的必须是合法的语句，而()不是合法的语句。
7.4 控制流语句和块
控制流语句的主体只有一条语句，如以下两个示例：
然而，所有语句都能替换成块，花括号包含零个或多个语句。因此，上述代码也可以这样写：
我更喜欢后面这种控制语句的写法。对它的标准化意义在于单语句和多语句体之间没有差异。从结果来看，你的代码看起来将更加一致，单语句和多语句的切换也会更加容易。
7.5 使用分号的规则
我们在本节中将研究如何在JavaScript中使用分号，基本规则为：
通常，语句都是以分号结束。
块语句的结束是一个例外。
分号在JavaScript中是可选的。缺少的分号会通过分号自动插入机制（ASI，参见7.5.3“自动分号插入”）完成。然而，这种机制并不是像你预期的那样总是能正确地处理好分号，这就是为什么必须总是要书写分号。
7.5.1 以块结束的语句后面没有分号
下面的语句如果以块结束就不需要分号。
循环语句：for, while（不包括 do-while）。
分支语句：if,switch,try。
函数声明语句（不包括函数表达式）。
以下是while和do-while的例子：
以下是函数声明和函数表达式的示例。后者跟着分号，因为它出现在var声明中（以分号结束）：
注解：
 如果在一个块后面添加一个分号，并不会得到一个语法错误，因为它被解释为一个空语句（参见7.5.2节）。
提示：
 这是你最需要了解的分号的知识。如果你总是加上分号，本节后面的内容可以不用阅读。
7.5.2 空语句
分号本身是一条空语句，什么也不做。空语句可以出现在任何期望语句的地方。在要求语句的场景也有用，但并非必需。通常在这种场景下，块也是被允许的。如以下两条语句是等价的：
假定函数processNextItem会返回剩余的元素数量。以下程序由三个空语句组成，但它的语法也是正确的：
7.5.3 自动分号插入
自动分号插入（ASI）的目标是使分号对行结束来说是可选的。想象一下，引入自动分号插入术语是JavaScript为我们在自动解析插入分号的场景（对其内部来说，事情的处理通常是不一样的）。
另一种说法，ASI帮助解析器来确定语句的结束。通常情况下会是分号，ASI在遇到如下情形时也会认定语句结束。
行结束符后（如换行符）跟着一个非法token。
遇到一个结束的花括号。
文件已达结尾。
例子：非法token触发ASI
以下代码包含一个跟有非法token的行结束符：
console在0后面是一个非法token，它触发了ASI：
例子：结束花括号触发ASI
下面的代码，花括号内的语句没有以分号结束：
ASI创建了上述代码的正确语法版本：
陷阱：ASI会出乎意料地破坏语句
如果在关键词return后面有行终止符，ASI也会触发，例如：
ASI会将上述代码转变为：
这是一个空return，后面跟着一个标签为name，表达式语句为'John'的块。块之后是空语句。
陷阱：ASI可能不按预期触发
有时候新行中的语句以某些token开始时会延续上一条语句。这时ASI不会触发，就算它看上去应该被触发。例如：
第二行中的方括号被解释为func()返回结果的一个索引。括号内的逗号被解释为逗号运算符（这个例子返回的是'ol'，参见9.7.2“逗号运算符”）。因为JavaScript会将前面的代码视为：
7.6 合法标识符
标识符用来命名事物，它会出现在JavaScript 的不同语法中。比如，变量名、未引起来的属性名都必须是合法的标识符。标识符是大小写敏感的。
标识符的首字符：
任何Unicode字符，包括拉丁字母（比如D）、希腊字母（比如λ）、西里尔字母（比如Д）。
美元符号($)。
下划线(_)。
首字符之后的字符可以是：
任何合法的首字符。
任何Unicode“十进制数字（ND）”类目中的数字；包括欧洲数字（如7）和印度数字（如٣）。
其他各种的Unicode符号和标点。
合法标识符的例子：
尽管这使得可以在JavaScript中使用各种各样的人类语言，但我推荐标识符和注释坚持使用英语。这会保证最多的人可以理解你的代码，这一点很重要，考虑到现在有很多代码是在国际上传播。
以下的标识符是保留字，它们是语法的一部分，不能作为变量名（包括函数名以及参数名）：
下面的三个标识符不是保留字，但仍应该把它们当作保留字对待。
最后，应该避免使用标准的全局变量名（参见第23章）。它们可以用作局部变量，这样不会造成任何破坏，不过这样你的代码还是会令人困惑。
注意，可以使用保留字作为未引起来的属性名（在ECMAScript 5中）：
可以在Mathias Bynens的博文“Valid JavaScript variable names”（http://mathiasbynens. be/notes/javascript-identifiers）中看到标识符的精确规则。
7.7 数字字面量的方法调用
在调用数字变量的方法时，区分是浮点数的小数点还是调用方法的点运算符是非常重要的。因此，你不可以书写类似1.toString()这样的代码；你必须使用以下一种方式：
7.8 严格模式
ECMAScript 5提供了严格模式。在严格模式中，JavaScript代码会更加简洁，会有更少不安全的特性，更多的警告和更加合理的代码。普通模式（也叫作非严格模式）有时候也被称作“宽松模式”。
7.8.1 启用严格模式
你可以在JavaScript文件或者标签的第一行加入以下代码来启用严格模式：
注意不支持ECMAScript 5的JavaScript引擎会忽略掉这一条声明，以这种方式写的字符串（等同于一个表达式语句，可以参见7.3.2“语句”）没有任何作用。
你也可以为每个函数启用严格模式。代码如下所示：
在处理遗留代码库时，为所有的代码启用严格模式将会造成错误，那么上面这种方式会很有帮助。
7.8.2 严格模式：建议与注意事项
总之，严格模式所做的变更都是为了让JavaScript变得更好。因此，强烈推荐在编写新的代码时使用严格模式——这仅需要在文件的开头启用严格模式。然而有两点需要注意：
（1）启用严格模式可能会破坏现有的代码
代码可能会依赖一个不再可用的特性，或者它依赖于一个在严格模式中与宽松模式不同的行为。不要忘记，可以在宽松模式的文件中给单个函数选择性地增加严格模式。
（2）细心打包
在合并或者压缩代码的时候，必须留心观察需要启用严格模式的时候它是否被关掉，反之亦然。发生这两种情况都会破坏代码功能。
接下来的小节会更加详细地讨论严格模式的特性。通常不需要特意去了解它们，因为你做了任何禁止的操作会收到更多的警告。
7.8.3 严格模式中，变量必须被声明
在严格模式中，所有变量都必须被显式声明。这有助于防止拼写错误。在宽松模式中，未显式声明的变量将会创建一个全局变量。
在严格模式中，对未声明的变量赋值将会抛出异常：
7.8.4 严格模式下的函数
严格模式限制了函数相关特性。
函数必须在作用域的顶部声明
在严格模式中，所有的函数必须在顶级作用域声明（在全局作用域或者直接在函数内）。这意味着你不能在一个块内声明函数。如果这样做，将会抛出描述性SyntaxError。例如，V8引擎会提示你：“在严格模式中，函数只能在顶部声明或者在另一个函数内立即声明”。
上面的代码是无效的，因为函数需要被创建于包围函数的作用域中，而不是在块内。
如果你想消除这个限制，可以通过一个变量声明和函数表达式在块中创建函数：
更严格的函数参数规定
对函数参数的规定则更加严格：参数禁止同名，因为会存在与参数同名的局部变量。
arguments对象拥有更少的属性
在严格模式中，arguments对象变得更加简单：arguments.callee和arguments.caller被取消了，你不能指定arguments变量并且arguments不会跟踪参数的变化（当一个参数变化时，对应的数组元素不会改变）。15.8.1节讲到的“arguments弃用特性”解释了具体细节。
无方法的函数中this的值为undefined
在宽松模式中，在无方法的函数中this的值会指向全局对象(在浏览器中是指window，参见16.8“全局对象”)：
在严格模式中，它是undefined：
这对于构造函数来说很有用。例如，在严格模式中，构造函数Point如下：
由于是严格模式，如果你不小心忘记了new关键词并且调用了函数，将会看到警告：
在宽松模式中，代码不会报错，并且会创建全局变量x和y。具体细节可以参见17.10.5“实现构造函数的小技巧”。
7.8.5 严格模式中，设置或者删除不可改变的属性会抛出异常
严格模式中，对属性的非法操作会抛出异常。例如，对于只读属性的设定操作会抛出异常，同理不可以删除不可设置属性。下面是一个例子：
7.8.6 严格模式中的不合格标识符不能删除
在宽松模式中，你可以用下面这种方式删除全局变量foo：
在严格模式中，想要删除不合格标识符时将会抛出异常。你依然可以通过下面这种方式来删除全局变量：
7.8.7 严格模式中，eval更加简洁
在严格模式中，eval()函数变得没有那么古怪：要执行的字符串中声明的变量将不会添加到eval()所在的作用域中。更多细节参见23.4.1“使用eval()执行代码”。
7.8.8 严格模式中禁用的特性
在严格模式中，两种JavaScript特性是被禁止的。
with语句不能再被调用（参见13.5“with语句”）。编译（代码加载时）时将会抛出一个语法错误。
没有八进制数字：在宽松模式中，一个以0开头的数字会被解读成八进制数字。例如：
而在严格模式中，如果使用上述类型的代码将会抛出一个语法错误：
[1] 为了使内容易于理解，可以假设声明也都是语句。
第8章 值
JavaScript提供大多数其他编程语言支持的值类型：布尔值、数字、字符串、数组等。在JavaScript中，所有的常规值都有属性[1]。每一个属性有一个key（或name）和一个value。可以将属性看成一个个记录的集合。可以通过点（.）运算符来访问属性：
8.1 JavaScript中的类型体系
本章节主要讨论JavaScript中的类型体系。
8.1.1 JavaScript类型