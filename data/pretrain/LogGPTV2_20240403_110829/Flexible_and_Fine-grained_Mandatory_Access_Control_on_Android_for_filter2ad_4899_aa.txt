# Flexible and Fine-Grained Mandatory Access Control on Android for Diverse Security and Privacy Policies

**Authors:**
- Sven Bugiel, Saarland University, Germany
- Stephan Heuser, Fraunhofer SIT, Germany
- Ahmad-Reza Sadeghi, Technische Universität Darmstadt / CASED, Germany

**Abstract:**
In this paper, we present a generic security architecture for the Android operating system (OS) that serves as a flexible and effective ecosystem for implementing various security solutions. Our proposed security architecture, FlaskDroid, introduces mandatory access control (MAC) simultaneously at both the middleware and kernel layers of Android. Aligning policy enforcement across these two layers, which have different semantics, is a non-trivial task. We introduce an efficient policy language, inspired by SELinux, tailored to the specific requirements of Android's middleware. The flexibility of our architecture is demonstrated through policy-driven instantiations of selected security models, such as the existing Saint framework and a new, privacy-protecting, user-defined, and fine-grained per-app access control model. Other potential use cases include phone booth mode and dual persona phones. Finally, we evaluate our implementation on SE Android 4.0.4, demonstrating its efficiency and effectiveness.

## 1. Introduction

Mobile devices, such as smartphones and tablets, have become indispensable in our daily lives and are increasingly used for work purposes. However, the growing complexity of these devices and the increasing amount of sensitive information they handle, including location data, online banking credentials, and enterprise VPNs, raise significant security and privacy concerns. Google's Android OS is currently the most popular and widely used smartphone operating system.

### 1.1 Android's Vulnerabilities

Android has been shown to be vulnerable to various attacks, including:
- Malicious apps and libraries that misuse their privileges [57, 40, 25] or exploit root vulnerabilities [55, 40] to extract sensitive information.
- Attacks that take advantage of unprotected interfaces [14, 12, 53, 32] and files [49].
- Confused deputy attacks [16].
- Collusion attacks [46, 34].

### 1.2 Existing Solutions

The open-source nature of Android has made it an attractive platform for academic and industrial security research. Various extensions to Android's access control framework have been proposed to address specific issues, such as:
- Protection of users' privacy [19, 28, 15, 52, 7, 30].
- Application-centric security, like Saint, which enables developers to protect their application interfaces [39].
- Establishing isolated domains for personal and corporate use [9].
- Mitigating collusion attacks [8].
- Extending Android's Linux kernel with MAC [48].

### 1.3 Observations

From the extensive literature on Android security and privacy, we can make the following observations:
- Most security extensions to Android implement MAC mechanisms tailored to specific problems, such as fine-grained access control to private data or platform integrity.
- These solutions typically operate at only one system abstraction layer, either the middleware/application layer or the kernel layer, neglecting the importance of both layers in the overall security and privacy of Android.
- A few solutions consider both layers [8, 9], but they support only static policies and lack the flexibility to instantiate different security and privacy models.

### 1.4 Challenges and Goals

Based on these observations, we aim to address the following challenges:
1. Design a generic and practical MAC architecture for Android-based mobile devices that operates on both the kernel and middleware layers and is flexible enough to instantiate various security and privacy models through configurable policies.
2. Leverage Android's API-oriented design to minimize the complexity of the desired policy, addressing a common criticism of generic MAC solutions like SELinux on desktop systems.

## 2. Background

### 2.1 Android Software Stack

Android is an open-source software stack designed for mobile devices. It consists of:
- A modified Linux kernel responsible for basic OS services.
- An application framework implementing the Android API.
- System services and libraries, implemented in C/C++.
- Higher-level services, such as system settings and location management, implemented in Java.

Android applications (apps) are primarily written in Java and may include native code. They interact with kernel and middleware services. Apps consist of components like Activities, Services, ContentProviders, and Broadcast Receivers, and communicate using IPC mechanisms and Intents.

### 2.2 Security Mechanisms

#### Sandboxing
Android uses Linux discretionary access control (DAC) for application sandboxing by assigning each app a unique user identifier (UID) during installation. This UID determines access to low-level resources and controls IPC using Linux DAC.

#### Permissions
Access control for inter-component communication (ICC) is managed through permissions, which are labels assigned to apps at install-time. These permissions are checked by reference monitors at the middleware and application levels. While Android’s permission model is not MAC, it can restrict access to low-level resources using Linux group identifiers (GIDs).

### 2.3 SELinux

Security-Enhanced Linux (SELinux) is an instantiation of the Flask security architecture, providing a policy-driven MAC framework for the Linux kernel. SELinux decouples policy decision-making from enforcement, using a security server in the kernel to manage policy rules and access decisions. SELinux supports various access control models, with Type Enforcement being the primary mechanism. Each object and subject is labeled with a security context containing a type attribute that determines access rights. Access is denied by default and must be explicitly granted through policy rules.

### 2.4 SE Android

SE Android prototypes SELinux for Android's Linux kernel, aiming to defend against root exploits and application vulnerabilities. It confines system services and apps in different kernel-space security domains, using Multi-Level Security (MLS). SE Android provides Android-specific policies and security extensions, such as labeling application processes with SELinux-specific security contexts for type enforcement. Since it is often unknown which apps will be installed, SE Android employs a mechanism to derive security contexts dynamically.

## 3. Our Contribution

In this paper, we present the design and implementation of a security architecture for the Android OS that addresses the challenges mentioned above. Our contributions include:

1. **System-wide Security Framework**: We present an Android security framework that operates on both the middleware and kernel layers, addressing many issues of the stock Android permission framework and related solutions.
2. **Security Policy and Type Enforcement at Middleware Layer**: We extend Android's middleware layer with type enforcement and introduce a policy language specifically designed for the rich semantics at this layer. Aligning middleware and kernel layer policies is non-trivial due to their different semantics.
3. **Use Cases**: We demonstrate how our security framework can instantiate selected use cases, including the well-known Saint framework and a privacy-protecting solution with fine-grained, user-defined access control to personal data. We also discuss other useful security models that can be instantiated with FlaskDroid.
4. **Efficiency and Effectiveness**: We evaluate the efficiency and effectiveness of our solution by testing it against a testbed of known attacks and deriving a basic system policy that allows for the instantiation of further use cases.

## 4. Evaluation

We successfully evaluate the efficiency and effectiveness of our solution by testing it against a testbed of known attacks and deriving a basic system policy that allows for the instantiation of further use cases. Our implementation on SE Android 4.0.4 demonstrates the practicality and robustness of FlaskDroid in enhancing Android's security and privacy.

---

This revised version aims to provide a clear, coherent, and professional presentation of the paper's content.