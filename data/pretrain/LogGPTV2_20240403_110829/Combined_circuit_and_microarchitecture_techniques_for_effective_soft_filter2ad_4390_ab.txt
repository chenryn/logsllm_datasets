the structure, LACE is the average residence time of the ACE
bits in the structure, and #B is the number of bits in the
structure. In a given cycle, the AVF of a hardware structure is
the percentage of ACE bits that the structure holds. The AVF
of a hardware structure is derived by averaging the AVFs of
the structure across program execution, as shown in Eq.5.
A VF = executio,,_cycles
# A CE bits per cycle
(E 5)
q.
L
# B • Texecutio,,_cycles
From Eq. 4, we can see that a microarchitecture
susceptibility to soft errors can be reduced by controlling the
quantity (BACE) and the residency cycles (LACE) of the ACE
bits in that structure. Differing from circuit level radiation
hardening methods, microarchitecture
error
vulnerability mitigation
program
techniques
to achieve application-oriented reliability
characteristics
optimization. In general,
these techniques can reduce soft
error failure rate but does not guarantee convergence to the
high reliability design goal.
level
exploit
soft
2.4. Issue Queue AVF Reduction by Operand
Readiness Based Dispatch
a
execution microprocessor,
This subsection describes a microarchitecture-Ievel issue
queue (IQ) soft error vulnerability reduction technique that
uses operand readiness based dispatch. In a dynamic-issue,
out-of-order
dispatched
instruction will stay in the IQ until all of its source operands
are ready and the appropriate functional unit is available. An
instruction's IQ residency time can be broken down into
cycles during which the instruction is waiting for its source
operands and cycles during which the instruction is ready to
execute but
is waiting for an available function unit.
Correspondingly, the instruction in the IQ can be classified as
either a waiting instruction or a ready instruction, depending
on the readiness of its source operands. Both waiting
instructions and ready instructions affect the IQ soft-error
susceptibility. Figure 2 (a) shows the IQ AVF contributed by
waiting instructions and ready instructions across different
types of workloads (see Table 2) on the studied SMT
processor (see Table 1). As IQ AVF is determined by the
number of vulnerable instructions per cycle and instruction
residency cycles in IQ, Figure 2 (b) and (c) depict
the
quantity and residency cycles of waiting instructions and
ready instructions in the IQ.
As Figure 2 (a) shows, on an average, waiting instructions
contribute to 86% of the total IQ AVF. Waiting instruction
residency time in the IQ ranges from 10 to 48 cycles, whereas
ready instructions usually spend 1.5 cycles in the IQ on
average. This suggests that an instruction can spend a
significant fraction (91% on average) of its IQ residency
cycles waiting for source operands that are being produced by
1-4244-2398-9/08/$20.00 ©20081EEE
139
DSN 2008: Fu et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
other instructions. At every cycle, the number (61 on average)
of waiting instructions also overwhelms that (9 on average) of
ready instructions. As a result, waiting instructions contribute
to 980/0 of the total IQ AVF. In short, in order to mitigate IQ
AVF, we should focus on the waiting instructions.
IQ
residency cycles can be minimized if instructions are
dispatched into the IQ with ready operands; meanwhile, the
number of waiting instructions is also reduced because when
instructions are dispatched they are ready-to-execute directly.
To reduce IQ soft error vulnerability at microarchitecture
level, we propose ORBIT (Operand Readiness-Based
InstrucTion dispatch) [16] which delays the dispatch for
instructions with at
least one non-ready operand. With
ORBIT, instructions whose operands are not ready will not be
dispatched until they become operand-ready.
~ Waiting hstndons
• Ready hstruclions
~.. ~
~
~
CPU
MIX
MEM
(b)
(c)
loll(
MEM
(a)
Figure 2. (a) IQ AVF contributed by waiting instructions and
ready instructions, profiles of (b) the quantity and (c) residency
cycles of ready instructions and waiting instructions.
3. Combined Circuit and Microarchitecture
Techniques
In this
section, we propose combined circuit and
microarchitecture techniques for enhancing IQ and ROB soft
error robustness in SMT processors.
3.1. Radiation Hardening IQ Design Using Hybrid
Techniques
As described in Section 2.4, microarchitecture level
techniques such as ORBIT can effectively reduce the IQ AVF
they provide no protection to soft errors.
despite that
Instructions whose operands are not
ready will not be
dispatched until
they become operand-ready. Therefore,
ready-to-execute instructions cannot be issued immediately
once they tum to be ready, since they have to be dispatched
into the IQ first. As a result, instructions' issue is delayed. If
those instructions are performance critical,
this technique
results in performance penalty. Note that
the increased
program runtime will increase processors' overall transient
fault
soft errors now have more
opportunities to strike the chips. Therefore, microarchitecture
soft error mitigation techniques
should cause minimal
performance overhead. Due to the superior soft error
robustness of the rSRAM cell, it can be used to implement IQ,
a SRAM based structure in high-performance processors (e.g.
MIPS RIOK). However, the using of rSRAM increases write
latency, which implies that an IQ entirely implemented with
the rSRAM will suffer noticeable performance degradation.
susceptibility since
To leverage the advantage of circuit and microarchitecture
level soft error tolerant
techniques while overcoming the
disadvantage of both, we propose an IQ consists of a part
implemented using the standard SRAM cells (NIQ) and a part
the
The
using
radiation
hardened
implemented
rSRAM
technologies (RIQ). The operands ready instructions are
dispatched into NIQ while other not-ready but performance
critical instructions are dispatched into RIQ and issued on
time. By decreasing both quantity and residency cycles of
instructions' vulnerable bits in a hardware structure,
the
operand readiness based dispatch can effectively mitigate soft
error vulnerability of NIQ where no error protection is
critical
provided.
instructions from the delayed dispatch alleviates performance
penalty. Meanwhile, the write latency of the rSRAM based
RIQ can be efficiently hidden since instructions dispatched to
the RIQ normally will not be immediately ready for issuing.
The rSRAM technique, which provides great soft error
immunity, successfully protects those instructions from soft
error strikes during their RIQ residency period. Therefore,
compared with methods that exclusively rely on circuit or
microarchitecture solution, the hybrid schemes can achieve
more desirable trade-offs between reliability and performance.
out of performance
filtering
Figure 3. The control flow of instruction dispatch in the
proposed IQ using hybrid radiation hardening techniques.
In typical processors, resources (a ROB entry, an IQ entry,
a LSQ entry and so on) are allocated at the dispatch stage,
and instructions are dispatched simultaneously to those
resources. In our design, instruction dispatch completes in
two steps: resource allocation and instruction dispatch into
other
structures perform normally without any delay;
instructions will be dispatched from ROB into the IQ later
depending on their operands readiness and performance
criticality. Note that the allocated IQ entry will be reserved
the instruction fmally moves into the IQ. Figure 3
until
flow of instruction dispatch in the
presents the control
proposed IQ design that uses hybrid radiation hardening
techniques. When instructions in ROB are scheduled for
the dispatch logic only places ready-to-execute
dispatch,
instructions into the NIQ. By doing so,
the quantity and
residency cycles of instructions in the NIQ are significantly
reduced and the corresponding IQ SER decreases. The
not-ready-to-execute
performance
instructions
are
dispatched to the RIQ without delay. Even though RIQ write
operation has latency, it splits into multiple pipeline stages,
and it can sustain every cycle. Therefore, only non-critical
instructions are delayed at the dispatch stage.
examined and critical
instructions
criticality
other
of
is
1-4244-2398-9/08/$20.00 ©2008 IEEE
140
DSN 2008: Fu et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Update
Check
Criticality
o~~:tg
c."'.."""'~,.."
Operand Readlne ..
Update
11f+-
ReglaterReadyBltaUpdate
Figure 4. An overview of radiation hardened IQ design using
hybrid techniques.
In this study, we investigate hybrid schemes that can
achieve attractive reliability and performance tradeoffs
without significantly increasing the hardware cost. We
assume that the NIQ and RIQ have the total size equal to that
of the original IQ, and they share the same amount of
dispatch bandwidth as in the original design. Figure 4
provides an overview of the architecture support for the
proposed ideas. The detailed RIQ circuit design will be
discussed in Section 3.2. In order to obtain their operands
readiness when the instructions are sitting in the ROB, a
multi-banked, multi-ported array is built to record the register
files' readiness state. The bit array is updated during write
back stage. The ROB can be logically partitioned into several
segments to allow parallel accesses to the multiple banks of
the array which hold the same copies of information. A
simple AND gate is added in each ROB entry to determine
the readiness of an instruction. Note that in our scheme,
younger instructions can still be dispatched if their source
operands are ready and this does not affect the correctness of
program execution since instructions are still committed in
In this paper, we define the performance critical
order.
instructions as branch instructions and the instructions with
long dependence chain in ROB. We use critical
tables
proposed in [17] to quantify an instruction's criticality. Each
thread's ROB is associated with a critical table and each ROB
entry has a corresponding critical table entry to represent the
data dependences of other instructions on this instruction.
Each critical table entry is a vector having one bit per ROB
entry, a certain bit of the vector is set as "1" if its
corresponding ROB entry is direct or indirect data dependent
on the current ROB entry. The sum of each bit
in
the ith critical
table entry represents the length of the
ith instruction's data dependence chain which, in other words,
describes its performance criticality. The critical
table is
updated at decode and renaming stages. As the instruction's
criticality is available in critical table, a criticality threshold is
set to classify the instructions into critical instructions and
non-critical instructions. Instructions with higher criticality
than the threshold are recognized as critical instruction, and
vise versa. Branch instructions are always identified as
critical. Note
happens
simultaneously with the instruction readiness checking.
It
does not introduce extra delay in the pipeline. The criticality
threshold affects the required RIQ size and correspondingly,
the performance and reliability of the proposed techniques. A
detailed analysis can be found in Section 5.2.
criticality
check
that
the
3e2e The RIQ Design
for
register
A conventional IQ entry consists of several fields: 1)
payload area (such as the opcode, destination register address,
function units type and so on); 2) left and right tags of the two
source registers, and each tag is coupled with a CAM
(content-addressable memory)
number
comparison; 3) left and right source ready bits, used to record
the availability of the source registers; 4) and another ready
bit to present the instruction's readiness, which is the logic
AND result of the two source ready bits. When an instruction
completes its execution, its destination register identifier is
sent to the tag buses and broadcasted through all IQ entries.
The CAM in each IQ entry figures out whether there is a
match between the instruction's source register number and
identifier in the tag buses, and the corresponding source ready
bit is set to "1" if a match occurs. In the case that both source
ready bits are set to "1", the instruction is ready, and ready bit
will raise the issue request signal to the selection logic.
Tag Buses
rSRAM
f"~-. based
L R
,
rCAM ._--".
IL Payload IL Tag I
0'- IStOl8glt~1j
0'- ISt~ceIlj.
~
IR Tag I R Payload I
-!St!9ce1l! ~
IStoragecellj ~
...
D-
R R
1
Figure 5. The wakeup logic of the RIQ.
In our hybrid IQ, the wakeup logic of NIQ is identical to
that of the conventional IQ. Care must be taken for the RIQ
design due to the extra write latency to the rSRAM cells.
Figure 5 describes the detailed circuit design on each field of
the RIQ entry. Since instructions dispatched into the RIQ
usually are not ready-to-execute, the latency caused by initial
write operations to the RIQ entry can be overlapped with the
instructions' waiting-for-ready period. As a result,
the
rSRAM is used to build the payload area and tags in each
RIQ entry. However, the write latency delays the update of
the ready bits and prevents the instructions from being issued
on time. In other words, the selection and issue stages of the
pipeline will be postponed. To avoid the negative
performance impact of the rSRAM, we implement the three
ready bits per IQ entry using standard SRAM-based cells.
Another important design consideration for RIQ entry is
the CAM which is composed of storage cell (SRAM) and
comparison circuit (XOR gates), the rSRAM techniques can
also be used to implement robust CAM without any area
penalty. [5] proposed to extend rSRAM technique into CAM
(i.e. rCAM). The rCAM has the similar characteristic as
rSRAM, namely, it also suffers from the write latency, but
read time is unchanged. In this study, we also consider rCAM
implementation for RIQ. Since the data (source register
number) is written to CAM storage cell once the instruction is
dispatched into RIQ and stay there until the instruction is
issued, the write latency in rCAM is overlapped with that on
writing instruction information into the RIQ payload and tags.
Therefore, rCAM doesn't introduce extra performance delay
in RIQ. However, it is possible that the instruction misses the
register number broadcasting while its information is being
to timely update the
written into the rCAM.
instruction's source ready bits, as shown in Figure 4,
the
In order
1-4244-2398-9/08/$20.00 ©20081EEE
141
DSN 2008: Fu et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:09 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
register ready bits array will be checked once the write
operation completes.
3.3. Using Dual-Vnn to Improve ROB Reliability
ROB is another important microarchitecture structure in
SMT processors. As introduced in Section 2, supplying high
VDD to CMOS circuit can improve hardware structure's raw
soft error rate. However, high vDD
should be judiciously
applied since the dynamic power consumption is quadratic to
using
supply
microarchitecture level soft error vulnerability characteristics
and runtime events to enable and disable high vDD , which can
achieve attractive trade-offs between reliability and power.
paper, we
voltage.
explore
this
In
Recall that the overall soft error rate of a microarchitecture
structure is determined by FIT rate per bit and AVF at
microarchitecture level. In the case that different vDD varies
FIT per cycle, Eq.3 can be rewritten as:
FlTmrrm ' L #ACE/itsJXrC){ie+F1TmumJ' L #AfE/itsJXrC){ie
(Eq.6)
SER=
7;,_JTJ
Tm-UTJ
#B· Teau¥7U)dei
where FIT .
f10mmal