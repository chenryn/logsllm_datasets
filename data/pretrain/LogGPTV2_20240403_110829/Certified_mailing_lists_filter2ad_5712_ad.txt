Proposition 2. Assume that messages sent from L/T reach
their destination. If the judge says that the receiver has re-
ceived m, then the receiver has received m.
6. CONCLUSIONS
In this paper we presented a novel Certiﬁed Mailing-list
Protocol (CMLP) that provides fair delivery, conﬁdential-
ity, non-repudiation of origin and receipt, authentication,
and integrity. We formally speciﬁed and veriﬁed the weak
fairness property of the protocol with Proverif. In the fu-
ture we will formally verify the strong fairness property of
the protocol and implement a prototype.
7. ACKNOWLEDGEMENTS
We would like to thank Rakesh Bobba and the anonymous
reviewers for helpful comments and suggestions. This work
was funded by the Oﬃce of Naval Research under contract
number N00014-04-1-0562.
8. REFERENCES
[1] M. Abadi and B. Blanchet, “Computer-Assisted
Veriﬁcation of a Protocol for Certiﬁed Email”, in the
10th International Symposium (SAS’03), San Diego,
California, June 2003.
[2] M. Abadi and B. Blanchet, “Analyzing Security
Protocols with Secrecy Types and Logic Programs”, in
Journal of the ACM, 52(1):102-146, January 2005.
[3] M. Abadi, N. Glew, B. Horne, and B. Pinkas, “Certiﬁed
email with a light on-line trusted third party: Design
and implementation”, in the Eleventh International
World Wide Web Conference, New York, 2002.
[4] N. Asokan, M. Schunter, and M. Waidner, “Optimistic
Protocols for Fair Exchange”, in Proceedings of 4th
ACM Conference on Computer and Communications
Security, Zurich, April 1997.
[5] N. Asokan, Matthias Schunter, and Michael Waidner,
“Optimistic protocols for multi-party fair exchange”,
Research Report RZ 2892 (90840), IBM Research,
December 1996.
[6] G. Ateniese, K. Fu, M. Green, and S. Hohenberger,
“Improved Proxy Re-encryption Schemes with
Applications to Secure Distributed Storage, in
Proceedings of the 12th Annual Network and Distributed
System Security Symposium (NDSS), February 2005.
[7] G. Ateniese, B. de Medeiros, and M. Goodrich,
“Tricert: Distributed certiﬁed e-mail schemes”, in the
Network and Distributed System Security Symposium,
San Diego, CA, February 2000.
[8] F. Bao, R. Deng, K. Q. Nguyen, and V. Vardharajan,
“Multi-party fair exchange with an oﬀ-line trusted
neutral party”, in DEXA’99 Workshop on Electronic
Commerce and Security, Firenze, Italy, September 1999.
[9] S. Berchtold, A. Biliris, and E. Panagos, “SaveMe: a
system for archiving electronic documents using
messaging groupware”, in the international joint
conference on Work activities coordination and
collaboration, California, United States, 1999.
[10] M. Blaze, G. Bleumer, and M. Strauss, “Divertible
protocols and atomic proxy cryptography”, in
Eurocrypt’98, LNCS 1403, Springer-Verlag, 1998.
[11] C. Blundo, S. Cimato, and R. D. Prisco, “Certiﬁed
Email: Design and Implementation of a New Optimistic

Protocol”, in proceedings of the Eighth IEEE
International Symposium on Computers and
Communications, June 30 - July 03, Turkey, 2003.
[12] D. Boneh, “The Decision Diﬃe-Hellman Problem”, in
proceedings of the International Symposium on
Algorithmic Number Theory (ANTS’98), 1998.
[13] Catalist, the oﬃcial catalog of LISTSERV lists,
http://www.lsoft.com/catalist.html.
[14] R. H. Deng, L. Gong, A. A. Lazar, and W. Wang,
“Practical protocols for certiﬁed electronic mail”, in the
Journal of Network and Systems Management, 3(4),
1996.
[15] J. Ferrer-Gomila, M. Payeras-Capella, and L.
Huguet-Rotger, “A realistic protocol for multi-party
certiﬁed electronic mail”, in proceedings of Information
Security Conference, Sao Paulo, Brazil, September 2002.
[16] M. Franklin and M. Reiter, “Fair exchange with a
semi-trusted third party”, in the 4th ACM Conference
on Computer and Communications Security, Zurich,
Switzerland, April 1997.
[17] M. Franklin and G. Tsudik, “Secure group barter:
multi-party fair exchange with semi-trusted neutral
parties”, in Financial Cryptography, 1998.
[18] J. A. Garay and P. MacKenzie, P, “Abuse-free
multi-party contract signing”, in Distributed Computing
(DISC ’99), Bratislava, Slovak Rep., 27-29 Sep., vol.
1693 of Lecture Notes in Computer Science, 1999.
[19] C. Gutwin, R. Penner, and K. Schneider, “Group
awareness in distributed software development”, in
Proceedings of the 2004 ACM conference on Computer
supported cooperative work, Illinois, USA, 2004.
[20] A. Ivan and Y. Dodis, “Proxy Cryptography
Revisited”, in Proceedings of the Network and
Distributed System Security Symposium (NDSS),
February 2003.
[21] H. Khurana, A. Slagell, and R. Bonilla, “SELS: A
Secure E-mail List Service”, n the Security Track of the
ACM Symposium on Applied Computing (SAC), March
2005.
[22] E. Kirda, P. Fenkam, G. Reif, H. Gall, “A service
architecture for mobile teamwork”, in Proceedings of the
14th international conference on Software engineering
and knowledge engineering, Ischia, Italy, 2002.
[23] S. Kremer and O. Markowitch, “A multi-party
non-repudiation protocol”, in proceedings of 15th IFIP
International Information Security Conference, Beijing,
China, August 2000.
[24] O. Markowitch and S. Kremer, “A multi-party
optimistic non-repudiation protocol”, in proceedings of
3rd International Conference on Information Security
and Cryptology, Seoul, Korea, December 2000.
[25] E. Mykletun, M. Narasimha, G. Tsudik,
“Authentication and Integrity in Outsourced
Databases”, in ISOC Symposium on Network and
Distributed Systems Security, 2004.
[26] C. Weng and J. H. Gennari, “Asynchronous
collaborative writing through annotations”, in
Proceedings of the 2004 ACM conference on Computer
supported cooperative work, Illinois, USA, 2004.
[27] J. Zhou, “On the Security of a Multi-Party Certiﬁed
Email Protocol”, in proceedings of the International
Conference on Information and Communications
Security, Malaga, Spain, October 2004.
[28] J. Zhou and D. Gollmann, “A fair non-repudiation
protocol”, in proceedings of the IEEE Symposium on
Research in Security and Privacy, 1996.
APPENDIX
A. FORMAL VERIFICATION
In this section we present details of the formalization and
veriﬁcation of our certiﬁed mailing list protocol. We for-
mally specify the protocol, state the propositions for weak
fairness, and show how the tool was used to prove these
propositions.
A.1 Formalizing the Protocol
The following is the coding of the CMLP protocol in the
veriﬁer’s input language with the steps of the protocol iden-
tiﬁed in the comments. This code represents the situation
in which all principals behave honestly. We modify the sit-
uation in the next section to verify our propositions.
(* Public key cryptography *)
fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.
(* Signatures *)
fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k),pk(k)) = m.
(* Host names *)
fun host/1.
reduc getkey(host(x)) = x.
(* Proxy Key: LT tranforms a message m encrypted with pkY into
a message encrypted with pkZ using the proxy key associated with
pkZ *)
reduc transform(encrypt(m,pk(y)),host(pk(y)),host(pk(w)),
lookupproxykey(host(pk(y)),host(pk(w)))) = encrypt(m,pk(w)).
(* hash function *)
fun hash/1.
(* Shared-key cryptography *)
fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.
(* Build a message*)
private fun Message/1.
(* Free names (public and private constants) *)
(* Signature keys *)
private free sigSKey,sigLTKey,sigRKey.
(* Decryption keys *)
private free dSKey,dRKey,dLTKey.
(* channels *)
free c,LTchannel,Schannel,Rchannel.
(* Constants to identify messages *)
data Give/0. data NewEmail/0. data KeyRequest/0.
data KeyDelivery/0.data DeliveryReceipt/0. data Delivered/0.

let processS =
(* Step 1.1: Build a message to send and sign it *)
new text; new desc; new skey;
let mesg = Message(text) in
event beginSmesg(mesg);
let signedMesg = sign((Sname,desc,mesg),sigSKey) in
(* Step 1.2 *)
let sencM1 = sencrypt((mesg,signedMesg),skey) in
(* Step 1.3 *)
let hashM1 = hash((Sname,desc,sencM1)) in
(* Step 1.4 *)
let aencM1 = encrypt(skey,eLKkey) in
(* Step 1.5 *)
let signedHashM1 = sign((hashM1,Give),sigSKey) in
event beginSGive(Sname,desc,sencM1,aencM1,signedHashM1);
out(LTchannel, (Sname,desc,sencM1,aencM1,signedHashM1));
!
in(Schannel,(LTnameIn,signedM5In));
(* Step 4/5.5 *)
let (receipt,aencIn,=DeliveryReceipt,receiver) =
checksign(signedM5In,verLTKey) in
let (=hashM1,=KeyRequest,=receiver) = getmess(receipt) in
event endLTDeliveryReceipt(LTnameIn,signedM5In);
signedHashM1,signedM5In));
signedNewEmailIn));
(* Step 3.1 *)
let (=NewEmail,sender) =
checksign(signedNewEmailIn,verLTKey) in
let hashInM3 = hash((sender,descIn,sencIn)) in
let (=hashInM3) = checksign(signedHashIn,verSKey) in
(* Step 3.3 *)
let signedM3 = sign((hashInM3,KeyRequest,Rname),sigRKey) in
event endLTNewMesg(LTname,descIn,sencIn,signedHashIn,
signedNewEmailIn);
event beginRKeyRequest(signedM3);
out(LTchannel,signedM3);
!
in(Rchannel,(LTnameInM4,signedM4In));
let (aencIn,=hashInM3,=KeyDelivery,=Rname) =
checksign(signedM4In,verLTKey) in (
(* Step 4//5.3 *)
let dKey = decrypt(aencIn,dRKey) in
let (decmesg,decsign) = sdecrypt(sencIn,dKey) in
let (=sender,=descIn,=decmesg) =
checksign(decsign,verSKey) in
event endLTKeyDelivery(LTnameInM4,signedM4In);
event endSMesg(decmesg))
(* Send receipt out for other receiver processes *)
else out(Rchannel,(LTnameInM4,signedM4In)).
(* Send delivery receipt copy to other sender processes *)
out(Schannel,(LTnameIn,signedM5In)).
process
let processLT =
in(LTchannel, (SnameIn,descM2,sencM2,aencIn,signedHashM2));
(* Step 2.1 *)
let hashInM2 = hash((SnameIn,descM2,sencM2)) in
let (=hashInM2,=Give) = checksign(signedHashM2,verSKey) in
(* Step 2.2 *)
let signedNewEmail = sign((NewEmail,SnameIn),sigLTKey) in
event beginLTNewMesg(LTname,descM2,sencM2,signedHashM2,
signedNewEmail);
event endSGive(SnameIn,descM2,sencM2,aencIn,signedHashM2);
out(Rchannel,(LTname,descM2,sencM2,signedHashM2,
signedNewEmail));
!
in(LTchannel,signedRM5);
(* Step 4/5.1 *)
let (=hashInM2,=KeyRequest,receiver) =
checksign(signedRM5,verRKey) in
let pkey = lookupproxykey(LTname,receiver) in
(* Step 4/5.2 *)
let aencM4 = transform(aencIn,LTname,receiver,pkey) in
let signedM4 = sign((aencM4,hashInM2,KeyDelivery,receiver),
sigLTKey) in
let signedM5 = sign((signedRM5,aencM4,DeliveryReceipt,receiver),
sigLTKey) in
event endRKeyRequest(signedRM5);
event beginLTKeyDelivery(LTname,signedM4);
(* Step 4/5.4 *)
out(Rchannel,(LTname,signedM4));
event beginLTDeliveryReceipt(LTname,signedM5);
(* Step 4/5.5 *)
out(Schannel,(LTname,signedM5)).
let processR =
in(Rchannel, (LTnameIn,descIn,sencIn,signedHashIn,
let verSKey = pk(sigSKey) in out(c, verSKey);
let verLTKey = pk(sigLTKey) in out(c, verLTKey);
let verRKey = pk(sigRKey) in out(c, verRKey);
let eSKey = pk(dSKey) in out(c, eSKey);
let eRKey = pk(dRKey) in out(c, eRKey);
let eLKkey = pk(dLTKey) in out(c, eLKkey);
let Sname = host(eSKey) in out(c, Sname);
let Rname = host(eRKey) in out (c, Rname);
let LTname = host(eLKkey) in out(c, LTname);
((!processS) | (!processLT) | (!processR))
The code begins by declaring cryptographic primitives.
For example, encrypt is the public-key encryption construc-
tor that takes a public key and a plaintext to return a ci-
phertext, and decrypt is the corresponding destructor that
takes a ciphertext and a secret key to return the plaintext.
We assume perfect cryptography so only the secret key can
be used to decipher encrypted messages. We similarly deﬁne
primitives for shared key encryption, hash function, signa-
tures, and proxy transformation. For proxy transformation
we do not encode the cryptographic operations; instead, we
encode the functionality of enabling LT to transform mes-
sages encrypted with one public one into that encrypted with
another public key. We also declare a number of constants
that appear in messages. These include names of message
channels, signature keys, and decryption keys. All decla-
ration with free are accessible to the adversary while those
with private free are not.
The processes processS, processR, and processLT represent
S, R, and LT respectively. They are composed in the last part
of the protocol under process, which also includes computa-
tion of public keys and principal names. The public keys
and principal names are then revealed on the public chan-
nel, c. Since an inﬁnite number of copies of these process
are launched, a single process processR suﬃces to represent

all the list subscribers. By including the receiver’s name in
the key request, LT can ensure that it uniquely transforms
the sender’s message for every recipient.
The process processS ﬁrst composes a message to be sent
to LT (for forwarding to list subscribers), signs the message
with its signing key sigSKey, generates a new shared key
skey, and encrypts the signed message with that key. The
process then computes and signs the hash, encrypts skey
with the list public encryption key eLKkey, and sends the
email out on LTchannel thus completing Step 1. The channel
always indicates the destination of the message but since
it is public the adversary can read the message and send
its own messages on the channel. This part of the process