setup, there will be a total of 2n-1 possible bit patterns 
for K if the bit pattern of individual Pi does not contain 
too many 0's or 1's. 
For each Pi, K  will  be xor'ed  with two different Ki's 
instead  of one before  it is permuted.  This special  ar- 
rangement enables us to easily decode K. 
3.  To decode K from the Pi's, we use the following: 
Property 1  If  Pi 's are set up as above, then 
As  a result,  if m is odd, the above decoding function 
will  always return  the  correct  value  of K  if  the  card 
has not been tampered  with. The hidden wiring imple- 
ments the Adn; 's. 
However,  this  is  not  an  ideal  decoding function  as  the 
attacker  can  compromise the  ith permutation  details  (i.e. 
find  the  Mni's>, via  techniques  described  in  Section  4.2, 
by  comparing encrypted  result  of vector with  only one bit 
on, i.e., by  setting  the Pi  to 000.. ' 1 ,  000' . . l o ,  . . ., and 
100.. ' 0  one by  one while  setting  all  other  Pj's ( j  #  i) 
to 000. . .O and compare the result  with the encrypted  pat- 
tern of 000' . . 1 ,  000. . '10, . . ., and  100. . . 0  respectively. 
Without  loss  of  generality,  suppose PI  =  000. . .1 and 
Pi  = 000...O,Vi  >  1.  Then 
A4;'Pi  = Af;llP1 
is a vector with  only one bit  on.  As a result,  the encrypted 
result  using this key must be among the encrypted patterns 
of  000. . .1,000. . .lo, . . ., and 100. . .0 and we can there- 
fore infer the wiring detail of this bit. 
The basic  problem  with  the above decoding function  is 
that an attacker knows many  valid physical  keys (i.e., sets 
of Pi's) of a special  form, and can  use these  to attack  the 
card to find the wiring.  Once the attacker knows the wiring, 
s h e  can  work  backward  to find the  key.  Instead,  we  need 
a method  that  is not  expensive (in  terms  of  complexity of 
building the circuit)  to  decode K, and for which  it  is dif- 
ficult to find valid  physical  keys without knowledge of the 
physical wiring. 
Our aproach will be to introduce m new n-bit words 6,, 
P2, . . ., P,.  These words will give us another equation for 
finding K. Comparing the result of this and equation (2) will 
A 
enable the card to tell  if it has been  tampered with.  These 
Pi's would be set to 
- 
P1  =  ( hlT2 K) CE KI 
(3) 
where TO  ,= rm. 
These Pi's will be stored in the EEPROM. Note that in 
this scheme the Ki's will be dumped after use. Their values 
can  only  be deduced when  both  K  and  the corresponding 
Pi's are known. 
5.2.1  Decoding Function 
The key K will then be computed as follows: 
1.  We  calculate  a  first  value  for  K  via  Kinit  = 
@El M;% 
2.  rearrange the m equations in equation ( I )  for each Pi, 
multiply both sides of equation ( I )  by hl;I,  leave K at 
the left hand side and then substitute in the appropriate 
values from equation (3) giving 
K  =  M -  rrl'Pi 63 K ( i + l   mod  m) Cl3  K(i+2 mod  m )  
n 
fif,'Pi  @  ( p ( i + l  mod m) @ fifr(i+* mod ,,,,Kinit) 
@  (F(i+2  mod m )  
h'T'(8+3 
mod  m )  Ki71Zr) 
This yields m different expressions for K 
If Pi's have not been tampered with (that is, the card is func- 
tioning as it was first issued to the customer), the correct K 
will  be returned  if  we  logically AND, or logically  OR all 
these m K's.  Hence, K  can be calculated  via the following 
steps: 
1.  Calculate K,,d  by: 
Kand  =  i;; { A4;'Pa 
'B 
i=  1 
(p(i+l mod m )  @ Af=,,,+, mod  m ) K i n z t )  @ 
A 
A (P(i+2 mod m )  'B  filn(,+,  mod m ) K i n i t )  
2. Calculate Kor by: 
Kor  =  t{ M;'  Pi  CE 
i= 1 
31 
3.  If Kand = K and Kor  = K, then return K; else return 
an error message. 
With this decoding function, the attacker is unable to derive 
any information about the hidden permutation as before by 
by setting one Pi to 00. . . 1 while setting the other Pj's ( j  # 
i) to 00 . . ' 0  and 
to  00 . . '0.  In  this  special case, K  = 
00. . . 1. Define l i  to be the n-bit word with the ith bit be 1 
and all the other bits be 0. That is, K = 11, while 
Kor  = (11 @ L, @ L , )  V (lm, @ L s ) V .  ..V ( L ,  @I,,) 
where l,,  = Mnx 11. 
To ensure that Kand  = K, each sub-expression of Kand 
must  have at least one 1. That is, lm4 #  l,,  , . . . , l,,  # 
lm3. Consequently,  Kor  will  have  more  than  one  1 and 
hence  Kor  #  K.  As  a result, the  attacker  cannot get  any 
information  by  setting_one Pi  to 0 0 .  . . l  while  setting the 
other Pj's ( j  # i) and Pi's to 00. . .O. 
5.3. Some Properties 
With the modificatio! 
attack, the attacker can derive the 
values of  the Pi's and  Pi's  but  not  the permutation  details 
(that is, the  xi's are unknown).  In this suksection, we  are 
going to argue that these values of Pi's and Pi's cannot help 
much to derive the actual key K. The attacker can perform 
an  exhaustive  search  to  find  the  value  of  K  as follow  (in 
this  example,  we  assume  that  the  card  can  do secret-key 
encryption): 
1.  The attacker picks a set of messages and then generates 
their corresponding ciphertexts with the working card. 
2.  Find the values of Pi's using the modification attack. 
3.  Then  the  attacker  needs  to  find  the  value  of  K.  An 
attack is successful  if given the  pairs  of  message and 
ciphertext, the attacker can find the key K that encrypts 
the message to the corresponding ciphertext. 
As  it  is  known that  the  value of  K  is calculated based  on 
K = $:p,  M;l  Pi, we are going to show that in the worst 
case, there are a total of  2n-'  possible bit  patterns for the 
correct n-bit key K and the attacker needs to test these 2n-1 
possible  bit  patterns for K.  Although this  process  can  be 
done off-line, it still takes a long time for the attacker to get 
K. 
We  start with the following property on the binomial coef- 
ficients CF = 
of (1 + xln: 
The following property asserts that equation ( I )  is safe. 
In particular, knowledge of Pi's alone cannot derive any in- 
formation on K: 
Propzrty 3  If xi Is are unknown butfixed perniutations, X 
and Xi's are uniformly and independently c&osen_n-bit bi- 
n a q  words, arid Y satisfies Y = M,,  (X @ Xla @ Xs), then 
P ( X  = 21Y = y) = P(X = x). 
Property 4  Ifr1 arid 7r2 are two unknown butfutedpetmu- 
tutions, P1  arid Pa  are two n-bit words (with n1 and n2 1's 
respectively), then Kinit  = Mn, P1  @ M,,P2  has a total of 
xi=,  Cr+ai possible bit patterns where 1  = In1  - 7221 
u - l ) / Z  
and 
U = {  
711 + 
2n - (nl + nz) 
ifnl + n2  5 n 
ifnl + 712  > n 
Furtherniore,  given  m  2 3,  for  any  m  n-bit  words 
P I ,  P2, . . . , Pm (with 721,712, . . ., and n,  1's respectively), 
ifthere exist 
1. two words  Pi  and  Pj. i  #  j such  that  the resulting 
P'  = Mni Pi @ M,,  Pj has possibly 1,l + 2, . . ., and U 
1 's; and 
and ni + nj -6 n k  2 n, 
2.  a third  word Pk, k # i, k # j ,  such that 1  _<  n k  _<  U 
then Kinit = @Ll M,*Pi  has a total of  2"-'  possible bit 
patterns. 
The  implication  of  this  property  is  that  there  will  be  a 
total of 2*-'  possible bit patterns for the n-bit key K if the 
bit pattern of individual Pi does not contain too many 0's or 
1's. Consequently, a brute force attack needs to try the 2"-l 
possible bit  patterns for K  in the  worst case  if  there are at 
least 3 Pi's satisfying the above properties, and the security 
is approximate to cracking for an unknown  key of n - 1 bit 
long.  This does not imply, however, that the attacker has a 
to guess for the key because the 2*-' 
probability of 1/2*-' 
possible bit patterns for K are not uniformly  distributed. In 
Section 6, we will discuss the probability  distribution of K, 
and analyze the consequences. 
5.4. Further Improvement 
The  scheme  described  in  Section  5.2  confuses  the  at- 
tackers  by  increasing  the  number  of  possible  bit  patterns 
32 
to 2n-1.  A simple encoding algorithm can further increase 
this number to 2n. The following algorithm encodes a given 
key Kin into the card: 
Encode 
input: K,, 
randomly choose m K,’s 
if @zlK, has even number of 1’s then 
K t K n  
else 
1 
2 
3 
4 
5 
6 
7  vi, P,  t 
endif 
K t K  
A f x ,  ( K @ K ( L + ~  mod m )  @K(,+2 mod m ) )  
A 
The idea  explzits the  fact  that  the attacker does not  know 
the values of K,’s while we use this to determine if  we en- 
code the cryptographic key  K,,  or its complement K,, into 
the card.  As a result,  the number of possible bit  patterns is 
doubled. Hence the following proposition: 
Proposition 3  Utider the saine condition as in properh 4, 
the  above Encode procedure  will  increase  the tiuniber  of 
possible bit patterns for IY  = 
MT, W, to 2n. 
6. Analysis 
To attack the scheme described in Section 5.2, one has to 
guess the value of the key K (which is unknown) based  on 
the values of the Pi’s (which can be derived). Although the 
scheme can be designed to generate the whole spectrum of 
2n possible bit patterns, this does not mean that conditioned 
on the given values of the Pi’s, each possible K is uniforndy 
likely to have been the original  key. Hence, we cannot draw 
the  conclusion  that  the  attacker  only  has  a  probability  of 
1/2” of  guessing the correct key  when the attack is based 
only upon the knowledge of the P,’s. 
We  would  study  the chance that  the attacker can  guess 
the key.  Using the modification  attack, the attacker can see 
the values of the Pi’s and  knows that  K  = @L1 M;’Pi. 
As  the attacker cannot see the  hidden  wires,  the values of 
ML’Pi’s are unknown.  However, the permutation  cannot 
change the  number of  1’s (and 0’s) in  the  Pi’s; this is  the 
only additional information leaked to the attacker. Thus the 
only chance  for  the  attacker to derive  K  is  to  take  advan- 
(with the number of 
tage of the properties of 
1’s in the Pi’s known) and see if these properties can be ex- 
ploited  to derive something better than  a brute force attack, 
As the M;”s 
are unknown to the attacker, the problem can 
be restated  as follow: 
Arl;’Pi 
Let  n1, n2, . . . , n,  be  arbitrary  integers  where 
0  5  n;  5  n.  Let  P l r P 2 , . . .  ,P,,  be  chosen 
independently  with  Pi  being  chosen  uniformly 
from among the C,:; n-bit words with ni  1’s. Let 
K = @El Pi. What is the distribution of K? 
We will  show that although the keys are not uniformly  dis- 
tributed, their distribution is close to uniform if weak values 
are discarded.  Analysis also shows that  m  = 3 or m  = 5 
are already good enough practically to provide strong secu- 
rity  if the encoding is done properly. 
6.1. Approach 
Suppose we are going to store an encoding of the n-bit 
key  K  into  the  device  as described  in  Section  5.2,  m n- 
, n,,  1’s respectively will be created 
bit Pi’s with n1, n2, t . .  
and burned into the EEPROM. 
Notice that these m Pi’s are generated randomly and in- 
dependently. We can repeat the generation process until all 
these Pi’s have some proven desired properties. That is, we 
can abandon the set of m Pi’s if it is not generated satisfac- 
torily  (e.g.  one of the Pi’s contains a word  with too many 
0’s or l’s), and repeat the process again (so that all Pi’s sat- 
isfy the required condition that we will describe shortly). 
If  Pi’s are chosen  randomly,  then  ni  is a binomial  ran- 
dom variable with parameters n, p  = 1/2, and therefore the 
expected  values of  these  ni’s will  be  n/2. We  will  study 
how ni  will deviate from n/2 and see if it can give us some 
hints on how to pick the Pi’s. 
6.2. Chernoff Bounds 
Each Pi  is made up of a bits.  We can view these n bits 