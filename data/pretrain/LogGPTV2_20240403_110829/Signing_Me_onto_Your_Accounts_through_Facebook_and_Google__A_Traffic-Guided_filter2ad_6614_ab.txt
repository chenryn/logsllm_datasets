automatic  submission,  or  (3)  a  response  with  a  script  or  a 
Flash  object  to  make  a  request.  In  this  paper,  we  do  not 
differentiate  these  implementations  and  instead,  describe 
each BRM in a format described by the following example: 
 src=a.com  dst=Facebook.com/a/foo.php 
Set-cookies: sessionID=6739485 
Arguments: x=123 & user=john 
Cookies: fbs=a1b2c3 & foo=43da2c2a 
Intuitively, this BRM is interpreted as: “a.com (source 
server)  asks  the  browser  to  set  cookie  sessionID  = 
6739485  for  its  domain  and  to  send  a  request  to 
destination  URL  Facebook.com/a/foo.php; 
the  request 
contains arguments x=123 and user=john provided by 
a.com,  as  well 
and 
foo=43da2c2a  stored  in  the  browser  for  the  domain 
Facebook.com.” In the above example, each underlined item 
is  called  an  element,  which  includes  the  BRM’s  source, 
destination,  or  other  name-value  pairs  of  set-cookies, 
arguments and cookies. 
2.2.  Threat and Adversary Model  
cookies  fbs=a1b2c3 
as 
Threat.  Web  SSO  faces  various  security  and  privacy 
threats, as studied in prior research [29][30][31][32], which 
we  will  describe  in  the  related  work  section.  Our  research 
focuses on the type of security flaws that completely defeats 
the purpose of authentication: that is, the unauthorized party 
Bob signs in as the victim user Alice.  
Adversary’s roles. When evaluating the threat from the 
malicious  party  Bob,  we  need  to  understand  who  he  can 
communicate  with  and  what  roles  he  can  play  in  an  SSO 
process. It is easy to see that Bob can actually interact with 
367
IdP
RP
Figure 4: possible communications when Bob is involved 
From  the  figure,  we  can  see  that  because  of  Bob’s 
involvement  in  the  communication,  there  are  four  possible 
SSO triangles similar to the one shown in Figure 2. These 
SSO  triangles  are  Alice-IdP-Bob,  Bob-IdP-RP,  Alice-IdP-
RP and Alice-Bob-RP. In our study, we did not consider the 
last one, in which Bob acts as the IdP and can steal Alice’s 
authentication information through phishing, as the focus of 
our  research  is  logic  flaws  in  SSO  systems,  not  social 
engineering.  In  the  remaining  three  relations  described  as 
scenarios  (A),  (B)  and  (C)  respectively  in  Figure  5,  Bob’s 
roles allow him to identify and exploit SSO vulnerabilities. 
Specifically, in (A), Bob is a client in an SSO and attempts 
to  convince  the  RP  that  his  browser  represents  Alice, 
assuming  that  he  knows  Alice’s  username  through  a  prior 
communication;  in  (B),  when  Alice  visits  Bob's  website, 
Bob  acts  as  an  RP  to  the  IdP,  in  an  attempt  to  get  Alice's 
credential  for  the  target  RP;  in  (C),  Bob  leaves  malicious 
web  content  in  Alice’s  browser  during  her  visiting  of  his 
website,  which  can  perform  SSO  operations 
through 
sending  requests  to  the  IdP  and  the  RP.  Of  course,  these 
three  scenarios  are  just  high-level  strategies.  How  to  carry 
out the strategies is exactly what we need to figure out from 
the study to be presented next. 
(A)  Bob as a client 
(B) Bob as a relying party (RP)
Alice 
Bob
Alice
IdP
Bob
RP
(C) Bob as a parasite page in Alice’s browser 
Alice 
IdP
Bob
RP
IdP 
 Alice 
 (browser) 
IdP 
RP
Bob’s
page
RP
Figure 5: three basic types of exploitations by Bob 
3. KEY CONCEPTS IN BRM-GUIDED ANALYSIS  
The  main  findings  of  our  study  will  be  presented  in 
Section 4, but in order to clearly explain the vulnerabilities 
and  how  we  discovered  them  step-by-step,  we  need  to 
introduce in this section some important basic concepts that 
section 4  will base  upon. These concepts are derived from 
features in BRM traces by an automatic tool that we built, 
namely the BRM analyzer.  
3.1.  The BRM Analyzer 
Our  BRM  analyzer  was  designed  to  perform  a  black-
box,  differential  analysis  on  BRM  traces.  The  analyzer 
needs  to  capture/parse  BRMs  and  further  modify/replay 
HTTP  requests.  To  this  end,  we  installed  Fiddler  [15],  a 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
web  proxy  capable  of  uncompressing/decoding/parsing  all 
HTTP  messages,  on  the  browser  machines  used  in  our 
research. We also utilized Firefox’s debugging tool Firebug 
[16] to modify and replay browser requests. 
Figure 6 shows how the analyzer works. To conduct an 
analysis,  we  need  two  test  accounts  (i.e.,  user1  and  user2, 
with  different  user  names,  email  addresses,  etc.)  to  collect 
three  traces,  including  two  for  user1’s  logins  from  two 
different  machines  and  one  for  user2’s  login  from  one 
machine,  which  serve  as  the  input  to  the  analyzer.  Each 
trace records all the BRMs observed by the browser during 
a login. These traces are processed by the analyzer through 
three steps (Figure 6), which perform comparisons, regular 
expression  matching  and  some  dynamic  tests.  These  steps 
aim at identifying and labeling key elements in an SSO and 
other  elements  related  to  these  elements.  Their  output 
describes  the  elements  and  their  relations  under  the  three 
adversarial scenarios in Figure 5.  
Trace of user1’s 
login on machine 1 
Trace of user1’s 
login on machine 2 
Trace of user2’s 
login on machine 1 
Abstract 
traces (A) 
(B) (C) 
accessibility labeling 
Semantic 
labeling 
Syntactic 
 labeling 
Adversary 
Figure 6: input, output and the three steps of the BRM analyzer 
In  the  rest  of  the  section,  we  elaborate  these  steps, 
which  include  syntactic  labeling,  semantic  labeling  and 
adversary  accessibility  labeling,  using  the  following  raw 
trace as an example.  
BRM1: src=RP  dst=http://IdP/handler.php 
    Arguments: notifyURL=http://RP/auth.php 
    Cookies: sessionID=43ab56c2 
BRM2: src=IdP dst=http://RP/auth.php 
    Arguments: username=Alice & sig=11a3f69 
Syntactic labeling.  The first step of our analysis is to 
determine  the  syntactic  types  of  individual  elements  in 
BRMs. Table 1 lists all the types with their examples. The 
lexical  grammar  we  used  to  recognize  these  types  is 
straightforward, which we do not elaborate here due to the 
space 
type 
recognition  using  a  single  trace,  labeling  each  element  it 
identifies. 
element 
“notifyURL=http://RP/auth.php”,  the  analyzer  attaches  a 
label [URL]  to it. To ensure the correctness of such labeling, 
our approach automatically compares the types of the same 
element  (e.g.,  notifyURL)  across  all  three  traces:  once  an 
inconsistency  is  found,  it  reports  to  the  human  analyst  for 
reconciliation, though this happened rarely in our study.  
limitation.  Our  analyzer  performs  such 
example, 
For 
the 
for 
Table 1: types 
Label 
INT (decimal no longer than 4 digits) 
WORD 
BLOB (decimal longer than 4 digits, or 
a hexadecimal or alphanumeric number) 
URL 
LIST 
Example value 
123  
Alice 
43ab56c2 
http://RP/auth.php 
(x, y, z) 
368
Semantic  labeling.  After  the  types  of  individual 
elements are labeled, our analyzer moves on to identify their 
semantic  meanings.  Table  2  summarizes  the  semantic 
attributes  defined  in  our  research,  which  are  obtained 
through  a  series  of  black-box  tests  described  below.  Note 
that  we  include  the  descriptions  for  “UU  (user-unique)”, 
“MU (client-machine-unique)”, “SU (session-unique)”, “BG 
(browser-generated)”,  “SIG?  (signature-like)”  and  “NC 
(newly-created)” in Table 2, since they are straightforward.  
Table 2: semantic attributes 
UU  (user-unique):  We  compare  the  three  input  traces.  An 
element is labeled “UU” if it has an identical value in the two 
traces  of  user1’s  logins,  and  a  different  value  in  the  trace  of 
user2’s login. This element holds a value unique to the user.  
MU (client-machine-unique): An element is labeled “MU” if it 
has  an  identical  value  in  the  two  users’  login  traces  on 
machine1, and a different value in the trace of user1’s login on 
machine2.  
SU  (session-unique):  An  element  is  labeled  “SU”  if  it  has 
different values in all three input traces.  
BG  (browser-generated): an  element  not  included  in  the 
response, but appearing in the request that follows. 
SIG?  (signature-like):  It  is  a  BLOB  element  whose  name 
contains  the  substring  “sig”.  Such  an  element  is  likely  a 
signature. We need a replay test to confirm it. 
pChain (propagation chain): An element uses this chain to find 
all  elements  in  the  trace  that  have  the  same  value  as  this 
element.
NC  (newly-created): it  is  an  element  whose  pChain  is  null, 
indicating that the element does not come from a prior BRM. 
SIG  (signature):  It  indicates  an  element  confirmed  as  a 
signature. We create a data structure to describe its properties, 
including  its  signer  and  whether  it  covers  the  entire  argument 
list or only selectively.
SEC (secret): it indicates a secret specific to the current session 
and necessary for the success of the authentication.
“!” (must-be): When a src value of a BRM is prefixed with this 
label, it means that the element must have this value in order for 
the authentication to succeed.  
pChain  (propagation  chain).  To  identify  the  elements 
accessible  to  the  adversary  under  different  circumstances, 
we  need  to  understand  how  the  value  of  an  element  is 
propagated to other elements across different BRMs. To this 
end,  our  analyzer  attaches  to  every  element  a  pChain 
attribute that serves to link related elements together. In the 
following  we  describe  how  to  discover  such  connections: 
(1) for each element except src and dst (see the example) 
in a BRM, the analyzer compares its value with those of the 
elements  on  all  its  predecessors  in  a  reverse  chronological 
order; the element’s pChain is set to point to the first (i.e., 
chronologically  latest)  element  on  the  prior  BRMs  that 
contains  the  identical  value;  (2)  we  also  set  pChain  of  the 
src element on every BRM to point to the dst element of 
its prior BRM.  
SIG label. To identify a signature on a BRM,  we first 
look  for  those  labeled  as  “SIG?  (signature-like)”  and  “NC 
(newly  created)”.  The  presence  of  these  two  labels  is  a 
necessary yet insufficient condition for a signature in most 
web  SSO  systems,  as  discovered  in  our  study.  To  avoid 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
false  positives,  our  analyzer  performs  a  dynamic  test  on 
such  an  element  to  find  out  whether  it  indeed  carries  a 
signature.  Specifically,  our  analyzer  first  changes  the 
element’s value and replays the message: if the message is 
rejected,  then  the  element  is  labeled  as  SIG.  When  this 
happens, the analyzer further adds and removes the elements 
in the message to find out those protected by the signature. 
In  all  the  cases  we  studied,  a  signature  either  covered  the 
whole  URL,  the  whole  argument  list  or  some  elements  in 
the  argument  list.  In  the  last  situation,  the  message  also 
contains  a  LIST  element  that  indicates  the  names  of 
protected elements.  
SEC  label.  For  every  newly-created  session-unique 
BLOB element (i.e., those with NC, SU and BLOB labels), 
the analyzer also changes a digit of its value and replays the 
message. If the message is rejected, this element is labeled 
SEC to indicate that it is a secret. 
“!” (must-be) label. If a signature or a secret is created 
by  a  party  in  a  benign  scenario,  then  even  in  an  attack 
scenario, it has to be created by the same party in order for 
the attack to succeed. In other words, no signature or secret 
can  be  faked  by  another  party.  Thus,  for  every  BRM 
containing  a  newly  created  element  of  SIG  or  SEC,  the 
analyzer  prefixes  the  src  value  of  the  BRM  with  a  “!”, 
which also propagates to the dst of its prior BRM. 
Ignoring  pre-existing  cookies.  Our  analysis  only  cares 
about the cookies set after a user starts an SSO process, so 
any  cookie  whose  corresponding  set-cookie  element  is  not 
on the trace does not need to be analyzed, i.e., if a cookie’s 
pChain does not lead to a set-cookie element, we ignore it. 
Let’s  look  back  at  the  sample  trace.  After  it  has  been 
processed  by  the  analyzer,  we  obtain  a  trace  below.  Note 
that the analyzer removes the concrete values of all elements 
except  those  of  src,  dst,  URL  and  LIST  elements,  and 
replaces  them  with  labels  of  their  semantic  meanings.  The 