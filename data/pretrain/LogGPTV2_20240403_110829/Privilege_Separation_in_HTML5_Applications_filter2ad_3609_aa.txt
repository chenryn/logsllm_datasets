# Privilege Separation in HTML5 Applications
**Authors:**
- Devdatta Akhawe
- Prateek Saxena
- Dawn Song

**Contact:**
- {devdatta, prateeks, dawnsong}@cs.berkeley.edu
- University of California, Berkeley

## Abstract
The conventional method for privilege separation in web applications is to execute application components in different web origins. However, this approach is impractical due to the financial and administrative costs associated with each web origin.

In this paper, we propose a new design for achieving effective privilege separation in HTML5 applications, allowing them to create an arbitrary number of components at minimal cost. Our approach leverages standardized abstractions already implemented in modern browsers, without requiring changes to the underlying browser or the adoption of new high-level languages. We empirically demonstrate that our design can be retrofitted to real-world HTML5 applications, including browser extensions and rich client-side applications, reducing the Trusted Computing Base (TCB) by factors ranging from 6x to 10,000x. Our mechanism requires fewer than 13 lines of application-specific code changes, significantly improving auditability.

## 1. Introduction
Applications built with JavaScript, HTML5, and CSS (referred to as HTML5 applications) are becoming increasingly common. Rich web applications and browser extensions are prime examples of HTML5 applications that have gained widespread popularity. The introduction of browser operating systems and support for HTML5 applications in traditional operating systems further underscores the convergence of web and desktop applications. Despite extensive research on detection and mitigation techniques, web vulnerabilities remain prevalent in emerging web applications and browser extensions.

### 1.1 Background on Privilege Separation
Privilege separation is a well-established security principle that provides a critical second line of defense. Commodity operating systems (OSes) enable privilege-separated applications through isolation mechanisms such as LXC, seccomp, and SysTrace. Traditional applications, like OpenSSH, QMail, and Google Chrome, have effectively utilized these mechanisms for enhanced security. In contrast, implementing privilege separation in web applications is more challenging and costly. If an HTML5 application needs to separate its functionality into multiple isolated components, the same-origin policy (SOP) mandates that each component must execute in a separate web origin. This requirement imposes significant administrative overheads, limiting the practicality of privilege separation in web applications.

### 1.2 Recent Research and Limitations
Recent research and modern HTML5 platforms, such as the Google Chrome extension platform, have recognized the need for better privilege separation in HTML5 applications. These systems advocate re-architecting the underlying browser or OS platform to force HTML5 applications to be divided into a fixed number of components. For example, the Google Chrome extension framework requires that extensions have three components, each executing with different privileges. Similarly, recent research proposes partitioning HTML5 applications into "N privilege rings," similar to the isolation primitives supported by x86 processors.

However, these approaches have two main drawbacks:
1. **Fixed Number of Components:** A fixed limit on the number of partitions or components creates an artificial and unnecessary limitation. Different applications require varying numbers of components, and a "one-size-fits-all" approach is not effective.
2. **Deployment and Adoption Costs:** Redesigning the browser has inherent deployment and adoption costs, and it takes significant time before applications can benefit from privilege separation.

## 2. Problem and Approach Overview
### 2.1 Issues with Current Architecture
Traditional HTML applications execute with the authority of their "web origin" (protocol, port, and domain). The browser's same-origin policy (SOP) isolates different web origins from one another and from the file system. However, applications rarely rely on domains for isolation due to the costs associated with creating new domains or origins.

In more recent application platforms, such as the Google Chrome extension platform and Windows 8 Metro applications, applications can execute with enhanced privileges provided by the underlying platform through privileged APIs. These applications declare their permissions to use privileged APIs at install time via manifest files. While install-time manifests are a step towards better security, these platforms still limit the number of application components and rely on separate origins for isolation.

### 2.2 Bundling and TCB Inflation
#### 2.2.1 Bundling
Bundling occurs when functionally disjoint components run in the same principal (origin), despite requiring different privileges. For example, a hypothetical Google Chrome extension called ScreenCap, which captures screenshots and includes a rudimentary image editor, has two components: a screenshot capturing component and an image editor. Both components run in the same origin, leading to over-privileging. The image editor, which only needs the `pictureLibrary` permission, runs with the powerful `tabs` and `<all_urls>` permissions required by the screenshot component.

#### 2.2.2 TCB Inflation
Privileges in HTML5 are ambient; all code in a principal runs with full privileges. Only a small core of the application typically needs access to these privileges, but the entire application is included in the TCB. For instance, the complex UI and image manipulation libraries in the ScreenCap image editor run with the ambient privilege to write to the user’s picture library, in addition to the privileges of the screenshot component.

We measured the TCB inflation for the top 50 Chrome extensions. Figure 1 shows that in half of the extensions studied, less than 5% of the functions actually need any privileges. In 80% of the extensions, less than 20% of the functions require any privileges.

### 2.3 Summary
HTML5 applications, like Chrome extensions, do not sufficiently isolate their sub-components. The same-origin policy equates web origins and security principals, and web origins are fixed at creation time or tied to the web domain of the application. All code from a given provider runs under a single principal, making privileges ambient. Allowing applications to cheaply create as many security principals as necessary and confine them with fine-grained, flexible policies can make privilege separation more practical.

### 2.4 Problem Statement
Our goal is to design a new architecture for privilege separation that addresses the problem of scarce web origins and enables the following properties:
- **Reduced TCB:** Given the pervasive nature of code injection vulnerabilities, reducing the TCB is essential.
- **Ease of Audit:** An architecture that eases audits, despite dynamic code inclusion and complex JS constructs, is necessary.
- **Flexible Policies:** Current manifest mechanisms provide insufficient contextual data for meaningful security policies. A separate, flexible policy mechanism can ease audits and analysis.
- **Reduce Over-privileging:** Isolating disjoint applications agnostic of origin to reduce over-privileging.
- **Ease of Use:** Minimal compatibility costs for developers to ensure ease of adoption.

## 3. Design
### 3.1 Key Security Invariants
We describe our privilege separation architecture and the key security invariants we maintain. Our approach utilizes standardized primitives available in today’s web browsers, requires no additional web domains, and improves the auditability of HTML5 applications. HTML5 applications can create an arbitrary number of "unprivileged components," each executing in its own temporary origin isolated from the rest of the components by the SOP. Unprivileged components communicate with a "privileged" (parent) component, which executes in the main (permanent) origin of the web application. The privileged code is small, and we ensure its integrity by enforcing key security invariants defined in Section 3. The privileged code mediates all access to critical resources granted to the web application by the underlying browser platform and enforces a fine-grained policy on all accesses that can be easily audited.

### 3.2 Mechanisms
Our proposal achieves the same security benefits in ensuring application integrity as enjoyed by desktop applications with process isolation and sandboxing primitives available in commodity OSes. We show that our approach is practical for existing HTML5 applications. We retrofitted two widely used Google Chrome extensions and a popular HTML5 application for SQL database administration to use our design. In our case studies, the amount of trusted code running with full privileges reduced by a factor of 6 to 10,000. Our architecture does not sacrifice performance compared to alternative approaches that redesign the underlying web browser. Finally, migrating existing applications requires minimal changes to code. For example, in porting our case studies to this new design, we changed no more than 13 lines of code in any application. Developers do not need to learn new languages or type safety primitives to migrate code to our architecture.

We also demonstrate strong data confinement policies. To encourage adoption, we have released our core infrastructure code and the case studies (where permitted) and made them freely available online. We are currently collaborating with the Google Chrome team to apply this approach to secure Chrome applications, and our design has influenced the security architecture of upcoming Chrome applications.

In our architecture, HTML5 applications can define more expressive policies than supported by existing HTML5 platforms, such as the Chrome extension platform and the Windows 8 Metro platform. Policy code is explicit and clearly separated, can take into account runtime ordering of privileged accesses, and can be more fine-grained. This design enables expert auditors, such as maintainers of software application galleries, to reason about the security of applications. In our case studies, these policies are typically a small amount of static JavaScript code, which is easily auditable.