Figure 5. Checking EIP for a bad value 
5 
tables. [2] When DTrace cannot determine what 
is happening in a function it chooses to not 
allow instrumentation.  For this reason, you may 
end up with a function for which there is an 
entry probe, but no exit probe. This is the case 
when DTrace cannot fully instrument a function 
due to its use of function jump tables. If this 
type of function is called and accounted for in 
our stack monitor, but never returns, then our 
list of saved return addresses will become out of 
sync with the real stack.  These functions must 
be ignored during tracing in order to properly 
monitor the stack.  DTrace’s “–l” command 
parameter can be used to list matching probes 
for a given probe definition.  The list of entry 
probes can be compared with the list of return 
probes to determine which functions our 
monitor should ignore. 
With these considerations implemented, our 
DTrace-based stack overflow monitor was able 
to detect the recent RTSP overflow in 
QuickTime Player. The initial output is shown 
below. The full output of the program includes 
the call trace. 
The monitor will catch stack overflows that 
depend on overwriting the return address.  In 
many cases overflows will modify more data on 
the stack than just the return address.  This can 
result in invalid memory access attempts when 
the function attempts to dereference overflowed 
data before it returns.  This situation is more 
common when fuzzing applications, rather than 
when detecting well crafted exploits that 
properly control EIP. An additional DTrace 
script can be used to pinpoint the exact 
instruction that causes the overflow.  This is 
done by tracing each instruction in the 
vulnerable function, and checking the stack 
return value after each instruction.  Once the 
overflow is detected, we know that the last EIP 
value is the instruction that caused the overflow. 
It may be worth exploring other ways DTrace 
can be used to monitor for overflow.  Similar to 
the heap overflow monitor discussed below, 
function parameter sizes and addresses could be 
recorded and later verified when bcopy, 
memcpy or strcpy are used to copy data into 
those locations.  Another approach would be to 
record the stack frame boundaries and when the 
bcopy, memcpy or strcpy functions are called,  
then verify that the parameter will not write past 
a frame boundary. This is an area of future 
work.  
Heap Overflow Monitoring 
One of the most powerful features of DTrace is 
ability to ‘hook’ functions generically.  As 
shown above this functionality when combined 
with Ruby or some other object-oriented 
scripting language can make for a very powerful 
reverse engineering platform.  In recent years 
many development teams have embraced secure 
coding practices. The increased awareness 
among software companies along with advances 
in operating system protections such as non 
executable stacks have made traditional “low 
hanging fruit” like stack overflows increasingly 
rare in widely used platforms.  This has made 
# ./eiptrace.d -q -p 4450 
   STACK OVERFLOW DETECTED 
   STACK OVERFLOW DETECTED  
   STACK OVERFLOW DETECTED  
Module: QuickTimeStreaming 
Function: _EngineNotificationProc 
Expected return value: 0x1727bac4 
Actual return value: 0xdeadbeef 
Stack depth: 14 
Registers: 
EIP: 0xdeadbeef 
EAX: 0xffffeae6 
EBX: 0x11223344 
ECX: 0x00000005 
EDX: 0x00000000 
EDI: 0x31337666 
ESI: 0x41424142 
EBP: 0xdefacedd 
ESP: 0x183f6000 
... 
 Figure 6. A Stack overflow detected 
6 
‘heap overflows’ an increasingly import attack 
vector 
for 
exploit 
writers 
and 
security 
researchers. 
Nemo, of FelineMenace.or,g wrote the de facto 
treatise on “Exploiting Mac OS X heap 
overflows” in Phrack 63 [11].  His attack relies 
on manipulating the size and frequency of 
allocations to the heap (on OS X called 
“zones”), combined with a heap overflow to 
overwrite function pointers contained in the 
initial heap struct called ”malloc_zone_t.” The 
struct is loaded into process space and contains 
function pointers to various dynamic allocation 
routines such as malloc(), calloc(), realloc(), 
etc… When the addresses to these functions are 
overwritten the next call can result in arbitrary 
code execution.  This is just one of many heap 
exploitation techniques that rely on tracking the 
size, amount, and allocation patterns of the heap 
structures.   
The emergence of the heap as one of the main 
exploit attack vectors has brought along with it 
the need for an advance in tools to help the 
reverse engineer understand how the heap 
structure evolves.   
There are a number of tools released recently 
which focus on understanding the way the heap 
evolves from a reverse engineering perspective.  
On the Windows platform, the Immunity 
Debugger has an extremely powerful API which 
provides many tools for understanding the way 
a heap evolves. On the Linux and Solaris 
platforms, Core Security’s HeapTracer tool 
written by Gerado Richarte uses truss or ltrace 
to monitor system calls which allocate or de-
allocate dynamic memory.  Building on this 
same idea as a platform the heap overflow 
monitor included with RE:Trace keeps track of 
the “heap” state by hooking dynamic allocation 
functions. RE:Trace’s Heap Smash detector 
does more then just track allocations to the 
heap, it goes one step further by also hooking 
functions that attempt to allocate data to the 
heap. 
The RE:Trace Heap Smash Detector works by 
creating a Ruby hash which keeps track of the 
request size of malloc() calls as a value and the 
valid return pointer as a key.  Its also keeps 
track of any calloc(), realloc(), or free() calls 
accordingly.  This running ‘tab’ or the state of 
the heap is then used to check whether 
operations using the space will overflow it.  A 
second hash keeps track of the stack frame 
which allocated that original memory chunk. 
For example, in RE:Trace the standard C 
strncpy() call is hooked and the destination 
address and size parameters are checked against 
the malloc() hash to see what the valid size of 
allocated region is.  If the size of the strncpy() is 
larger then the allocated block we know that a 
heap overflow has occurred. The heap smasher 
has identified precisely where the overflow 
occurred, how large it is, and what stack frame 
made the original malloc() called. Not bad for a 
relatively short script!  
Figure 8. Strncpy() being hooked 
pid$target::malloc:entry{ 
  self->trace = 1; 
  self->size = arg0; 
} 
pid$target::malloc:return 
/self->trace == 1/  
{ 
ustack(1); 
printf("mallocreturn:ptr=0x%p|size=%
d", arg1, self->size);  
self->trace = 0; 
self->size = 0; 
} 
Figure  7.  Probe instrumenting malloc entry 
size argument and return pointer 
7 
A similar vulnerability tracing technique has 
been created using Microsoft’s Detours suite. 
[14] The tool called “VulnTrace” uses a DLL 
injected into process space which intercepts 
functions imported in IAT table so it can inspect 
function arguments for security flaws.  This 
method is much more laborious and time 
consuming than the method used for RE:Trace, 
and must be tailored to each application being 
instrumented.  Performance and memory 
addressing may be affected because of the 
additional DLL.  DTrace is implemented as an 
operating system component with very little 
overhead and does not interfere with the 
software under test. 
There are some caveats about the OS X zone 
allocation algorithm which must be taken into 
account when implementing the heap smash 
detector.  As noted by Nemo is his article 
“Exploiting OS X heap overflows,” OS X keeps 
separate “zones” or heaps for different sized 
allocations.  The following table from A. 
Singh’s “Mac OS X internals” shows the 
division of the ‘zones’ by allocation size. 
Zone 
Type 
Zone 
Size 
Allocation 
Size (bytes) 
Allocation 
Quantum 
Tiny 
2MB 
 16,773,120  
1 page 
 (4096 bytes) 
Figure 9. Scalable Zone Types on OS X 
Leopard. Source: [6] 
We can keep a running tally of each of the zones 
by hooking the allocation sizes and using 
separate hashes for each.  One interesting aspect 
about the tiny and small “zones” is that they are 
fixed at 2mb and 8mb respectively making it 
easier to calculate how much has been allocated 
to each.   
We can easily spot double free() and double 
malloc() errors using the structure laid out 
above.  One interesting fact about OS X zones 
noted by Nemo is the allocation algorithm in use 
will not free() a zone located at the same 
address twice in most cases. [11]  Yet under the 
right circumstances, (i.e. the attempted double 
free() is the same size and free()’d pointer still 
exists) the condition is exploitable and therefore 
worth detecting.  We are able to monitor for 
precisely this condition with the RE:Trace Heap 
Smash Detector.  Future additions to the 
framework may included integration with IDA 
disassembled via IDARub for automatic probe 
creation. 
Code Coverage 
Function level tracing can give us some hints as 
to which parts of code have been executed 
during a particular run of the software.  
Combined with symbols resolution this can be 
quite meaningful for someone wishing to gain 
an understanding of the behavior of an 
application.  Function level tracing can be 
particularly helpful if you wish to understand 
how a certain vulnerable function can be 
triggered.  But in terms of code coverage, 
function level measurements are fuzzy at best.  
There is no real indication as to the complexity 
of a function, or even as to how much of the 
code inside a function was executed.  At the 
function level, we can learn about what the 
application is doing, but we cannot obtain a 
good measurement of how well we have tested 
our software. 
Block level tracing can provide us with much 
more accurate measurements of code coverage.  
A block of code is a set of instructions for which 
if the first instruction is executed, then all 
instructions 
in 
the 
block 
are 
executed.  
Conditional jump instructions separate blocks of 
instructions.  This is represented in the IDA Pro 
disassembler graph view as illustrated below. 
8 
Figure 10. IDA Pro Disassembler graph 
The arrows between each block represent the 
possible code paths that may be taken during 
execution. When auditing an application, we are 
interested in how many blocks of code we can 
execute. DTrace can provide us with this 
measurement with its ability to do instruction 
level tracing.  This gives us the ability to see 
which blocks in a function are being executed 
and which are not.  Combining run time 
instruction traces with static binary analysis, we 
can answer questions such as what percentage 
of total instructions were executed, what 
percentage of blocks were executed, how many 
times a block executed, and which blocks were 
never executed.  This provides important 
metrics to software testers, and can also be used 
as feedback into a smart or evolutionary fuzzing 
engine that changes its behavior depending on 
the feedback it gets from its monitor.  
Instrumenting probes at every instruction in a 
large application can be very expensive in terms 
of performance.  It helps to narrow the scope to 
a single library that the application imports, or 
just the application code itself.  Further 
improvements can be made with the help of 
static analysis.  Only a single instruction needs 
to be instrumented per block. 
With DTrace’s instruction level tracing, specific 
instruction probes are specified as an offset 
within its function, rather than a memory 
address relative to the start of the library or the 
instructions global address in virtual memory. 
For example, the following probe definition will 
fire at the instruction that at the offset 3f in the 
function getloginname of the /usr/bin/login 
program: 
pid4573:login:getloginname:3f {} 
DTrace is strictly a runtime analysis tool and 
has no notion of code blocks.  Static analysis 