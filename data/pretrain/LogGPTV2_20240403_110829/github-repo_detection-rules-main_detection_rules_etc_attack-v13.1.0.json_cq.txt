### Screensaver

**Created:** 2018-01-16T16:13:52.465Z  
**Description:**
Screensavers are programs that execute after a configurable period of user inactivity and consist of Portable Executable (PE) files with a `.scr` file extension. The Windows screensaver application, `scrnsave.scr`, is located in `C:\Windows\System32\` on 32-bit systems and in both `C:\Windows\System32\` and `C:\Windows\SysWOW64\` on 64-bit systems, along with other screensavers included in the base Windows installation.

The following screensaver settings are stored in the Windows Registry under `HKCU\Control Panel\Desktop\` and can be manipulated to achieve persistence:

- **SCRNSAVE.exe**: Set to the path of a malicious PE.
- **ScreenSaveActive**: Set to `1` to enable the screensaver.
- **ScreenSaverIsSecure**: Set to `0` to not require a password to unlock.
- **ScreenSaveTimeout**: Sets the user inactivity timeout before the screensaver is executed.

Adversaries can use screensaver settings to maintain persistence by configuring the screensaver to run malware after a certain period of user inactivity. This technique has been observed in attacks such as those using the Gazer backdoor.

**External References:**
- [Wikipedia Screensaver](https://en.wikipedia.org/wiki/Screensaver)
- [ESET Gazer Aug 2017](https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf)

**Kill Chain Phases:**
- Persistence

**Modified:** 2020-01-24T13:51:47.990Z  
**Name:** Screensaver  
**Type:** attack-pattern  
**Platforms:** Windows  
**Permissions Required:** User  
**Detection:**
- Monitor process execution and command-line parameters of `.scr` files.
- Monitor changes to screensaver configuration in the Registry that may not correlate with typical user behavior.
- Use tools like Sysinternals Autoruns to detect changes to the screensaver binary path in the Registry.
- Investigate suspicious paths and PE files that may indicate outliers among legitimate screensavers in a network.

---

### TFTP Boot

**Created:** 2020-10-20T00:06:56.180Z  
**Description:**
Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.

Adversaries may manipulate the configuration on the network device to specify the use of a malicious TFTP server, which may be used in conjunction with [Modify System Image](https://attack.mitre.org/techniques/T1601) to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through the use of standard functionality. This technique is similar to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result in the network device running a modified image.

**External References:**
- [Cisco Blog Legacy Device Attacks](https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954)
- [Cisco IOS Software Integrity Assurance - Secure Boot](https://tools.cisco.com/security/center/resources/integrity_assurance.html#35)
- [Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification](https://tools.cisco.com/security/center/resources/integrity_assurance.html#7)
- [Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification](https://tools.cisco.com/security/center/resources/integrity_assurance.html#13)
- [Cisco IOS Software Integrity Assurance - Command History](https://tools.cisco.com/security/center/resources/integrity_assurance.html#23)
- [Cisco IOS Software Integrity Assurance - Boot Information](https://tools.cisco.com/security/center/resources/integrity_assurance.html#26)

**Kill Chain Phases:**
- Defense Evasion
- Persistence

**Modified:** 2020-10-22T16:35:53.806Z  
**Name:** TFTP Boot  
**Type:** attack-pattern  
**Platforms:** Network  
**Permissions Required:** Administrator  
**Detection:**
- Compare a copy of the network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS.
- Review command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration.
- Check boot information, including system uptime, image booted, and startup configuration, to determine if results are consistent with expected behavior in the environment.
- Monitor unusual connections or connection attempts to the device that may specifically target TFTP or other file-sharing protocols.

---

### Windows Service

**Created:** 2020-01-17T19:13:50.402Z  
**Description:**
Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.

Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as `sc.exe`), by directly modifying the Registry, or by interacting directly with the Windows API.

Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (e.g., `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()`, or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`. Adversaries may leverage these drivers as [Rootkits](https://attack.mitre.org/techniques/T1014) to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as "Bring Your Own Vulnerable Driver" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).

Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (e.g., using a service and/or payload name related to a legitimate OS or benign software component).

**External References:**
- [Microsoft Windows Event Forwarding FEB 2018](https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection)
- [ESET InvisiMole June 2020](https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf)
- [TechNet Services](https://technet.microsoft.com/en-us/library/cc772408.aspx)
- [Microsoft 4697 APR 2017](https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697)
- [Symantec W.32 Stuxnet Dossier](https://www.wired.com/images_blogs/threatlevel/2010/11/w32_stuxnet_dossier.pdf)
- [Unit42 AcidBox June 2020](https://unit42.paloaltonetworks.com/acidbox-rare-malware/)
- [TechNet Autoruns](https://technet.microsoft.com/en-us/sysinternals/bb963902)
- [Crowdstrike DriveSlayer February 2022](https://www.crowdstrike.com/blog/how-crowdstrike-falcon-protects-against-wiper-malware-used-in-ukraine-attacks/)

**Kill Chain Phases:**
- Persistence
- Privilege Escalation

**Modified:** 2023-04-21T12:30:35.872Z  
**Name:** Windows Service  
**Type:** attack-pattern  
**Platforms:** Windows  
**Permissions Required:** User, Administrator, SYSTEM  
**Detection:**
- Monitor processes and command-line arguments for actions that could create or modify services.
- Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc.
- Creation of new services may generate alterable events (e.g., Event ID 4697 and/or 7045).
- Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.
- Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

---

### Fast Flux DNS

**Created:** 2020-03-11T14:11:16.560Z  
**Description:**
Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it, which are swapped with high frequency, using a combination of round-robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.

The simplest, "single-flux" method, involves registering and de-registering addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.

In contrast, the "double-flux" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux, additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.

**External References:**
- [MehtaFastFluxPt1](https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-1/#gref)
- [MehtaFastFluxPt2](https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-2/#gref)
- [Fast Flux - Welivesecurity](https://www.welivesecurity.com/2017/01/12/fast-flux-networks-work/)

**Kill Chain Phases:**
- Command and Control

**Modified:** 2020-03-27T16:10:37.183Z  
**Name:** Fast Flux DNS  
**Type:** attack-pattern  
**Platforms:** Linux, macOS, Windows  
**Detection:**
- Detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly.
- In single flux cases, only IP addresses change for static domain names. In double flux cases, nothing is static.
- Defenders such as domain registrars and service providers are likely in the best position for detection.

---

### System Checks

**Created:** 2020-03-06T20:57:37.959Z  
**Description:**
Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.

Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks into one script and then have the program exit if it determines the system to be a virtual environment.

Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters' addresses, CPU core count, and available memory/drive size.

Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.

Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative of a virtual environment. Adversaries may also query for specific readings from these devices.

**External References:**
- [Deloitte Environment Awareness](https://drive.google.com/file/d/1t0jn3xr4ff2fR30oQAUn_RsWSnMpOAQc)
- [McAfee Virtual Jan 2017](https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/stopping-malware-fake-virtual-machine/)
- [Unit 42 OilRig Sept 2018](https://researchcenter.paloaltonetworks.com/2018/09/unit42-oilrig-targets-middle-eastern-government-adds-evasion-techniques-oopsie/)

**Kill Chain Phases:**
- Defense Evasion
- Discovery

**Modified:** 2021-10-18T14:57:07.973Z  
**Name:** System Checks  
**Type:** attack-pattern  
**Platforms:** Linux, macOS, Windows  
**Defense Bypassed:**
- Static File Analysis
- Signature-based detection
- Host forensic analysis
- Anti-virus

**Detection:**
- Virtualization/sandbox-related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment.
- Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.
- Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.
- Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.

---

### Cron

**Created:** 2019-12-03T14:25:00.538Z  
**Description:**
Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems. The crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.

An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003).

**External References:**
- [20 macOS Common Tools and Techniques](https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/)

**Kill Chain Phases:**
- Execution
- Persistence
- Privilege Escalation

**Modified:** 2022-03-24T17:33:03.443Z  
**Name:** Cron  
**Type:** attack-pattern  
**Platforms:** Linux, macOS  
**Permissions Required:** User  
**Detection:**
- Monitor scheduled task creation from common utilities using command-line invocation.
- Legitimate scheduled tasks may be created during installation of new software or through system administration functions.
- Look for changes to tasks that do not correlate with known software, patch cycles, etc.
- Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data.
- Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

---

### Domain Groups

**Created:** 2020-02-21T21:15:06.561Z  
**Description:**
Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.

Commands such as `net group /domain` of the [Net](https://attack.mitre.org/software/S0039) utility, `dscacheutil -q group` on macOS, and `ldapsearch` on Linux can list domain-level groups.

**External References:**
- None

**Kill Chain Phases:**
- Discovery

**Modified:** 2023-04-07T17:16:47.754Z  
**Name:** Domain Groups  
**Type:** attack-pattern  
**Platforms:** Linux, macOS, Windows  
**Detection:**
- System and network discovery techniques normally occur throughout an operation as an adversary learns the environment.
- Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.
- Monitor processes and command-line arguments for actions that could be taken to gather system and network information.
- Remote access tools with built-in features may interact directly with the Windows API to gather information.
- Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

---

### Vulnerabilities

**Created:** 2020-10-15T02:59:38.628Z  
**Description:**
Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.

An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e., [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e., [Exploits](https://attack.mitre.org/techniques/T1587/004)).

**External References:**
- [National Vulnerability Database](https://nvd.nist.gov/)

**Kill Chain Phases:**
- Resource Development

**Modified:** 2021-04-15T03:16:32.119Z  
**Name:** Vulnerabilities  
**Type:** attack-pattern  
**Platforms:** PRE  
**Detection:**
- Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult.
- Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (e.g., [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).

---

### Spearphishing Link

**Created:** 2020-03-02T19:15:44.182Z  
**Description:**
Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.

All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an "IDN homograph attack").

Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that, when accepted by the user, provide permissions/access for malicious applications, allowing adversaries to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.

**External References:**
- [ACSC Email Spoofing](https://www.cyber.gov.au/sites/default/files/2019-03/spoof_email_sender_policy_framework.pdf)
- [CISA IDN ST05-016](https://us-cert.cisa.gov/ncas/tips/ST05-016)
- [Trend Micro Pawn Storm OAuth 2017](https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks)
- [Microsoft OAuth 2.0 Consent Phishing 2021](https://www.microsoft.com/security/blog/2021/07/14/microsoft-delivers-comprehensive-solution-to-battle-rise-in-consent-phishing-emails/)
- [Microsoft Anti Spoofing](https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spoofing-protection?view=o365-worldwide)

**Kill Chain Phases:**
- Initial Access

**Modified:** 2023-04-11T00:44:21.193Z  
**Name:** Spearphishing Link  
**Type:** attack-pattern  
**Platforms:** Linux, macOS, Windows, Office 365, SaaS, Google Workspace  
**Detection:**
- URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites as well as links redirecting to adversary infrastructure based by upon suspicious OAuth patterns with unusual TLDs.
- Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.
- Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.
- Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once [User Execution](https://attack.mitre.org/techniques/T1204) occurs.

---

### Startup Items

**Created:** 2017-12-14T16:46:06.044Z  
**Description:**
Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, `/Library/StartupItems`, isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), `StartupParameters.plist`, reside in the top-level directory.

An adversary can create the appropriate folders/files in the `StartupItems` directory to register their own persistence mechanism. Additionally, since `StartupItems` run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing `Startup Item`, then they will be able to Privilege Escalate as well.

**External References:**
- [Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)
- [Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)

**Kill Chain Phases:**
- Persistence
- Privilege Escalation

**Modified:** 2020-01-15T18:02:49.891Z  
**Name:** Startup Items  
**Type:** attack-pattern  
**Platforms:** macOS  
**Permissions Required:** Administrator  
**Effective Permissions:** root  
**Detection:**
- The `/Library/StartupItems` folder can be monitored for changes.
- Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.
- Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.

---

### Clear Linux or Mac System Logs

**Created:** 2020-01-28T17:11:54.034Z  
**Description:**
Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the `/var/log/` directory. Subfolders in this directory categorize logs by their related functions, such as:

- `/var/log/messages`: General and system-related messages
- `/var/log/secure` or `/var/log/auth.log`: Authentication logs
- `/var/log/utmp` or `/var/log/wtmp`: Login records
- `/var/log/kern.log`: Kernel logs
- `/var/log/cron.log`: Crond logs
- `/var/log/maillog`: Mail server logs
- `/var/log/httpd/`: Web server access and error logs

**External References:**
- [Linux Logs](https://www.eurovps.com/blog/important-linux-log-files-you-must-be-monitoring/)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2020-03-29T21:23:51.886Z  
**Name:** Clear Linux or Mac System Logs  
**Type:** attack-pattern  
**Platforms:** Linux, macOS  
**Detection:**
- File system monitoring may be used to detect improper deletion or modification of indicator files.
- Also, monitor for suspicious processes interacting with log files.

---

### Application or System Exploitation

**Created:** 2020-02-20T15:37:27.052Z  
**Description:**
Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.

Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489), etc., which may further cause a DoS condition and deny availability to critical information, applications, and/or systems.

**External References:**
- [Sucuri BIND9 August 2015](https://blog.sucuri.net/2015/08/bind9-denial-of-service-exploit-in-the-wild.html)

**Kill Chain Phases:**
- Impact

**Modified:** 2022-03-25T18:11:13.604Z  
**Name:** Application or System Exploitation  
**Type:** attack-pattern  
**Platforms:** Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace  
**Impact Type:** Availability  
**Detection:**
- Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack.
- Externally monitor the availability of services that may be targeted by an Endpoint DoS.

---

### Office Application Startup

**Created:** 2017-12-14T16:46:06.044Z  
**Description:**
Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.

A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.

**External References:**
- [SensePost Ruler GitHub](https://github.com/sensepost/ruler)
- [TechNet O365 Outlook Rules](https://blogs.technet.microsoft.com/office365security/defending-against-rules-and-forms-injection/)
- [CrowdStrike Outlook Forms](https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746)
- [Outlook Today Home Page](https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943)
- [Microsoft Detect Outlook Forms](https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack)
- [SensePost NotRuler](https://github.com/sensepost/notruler)

**Kill Chain Phases:**
- Persistence

**Modified:** 2021-10-15T20:18:31.112Z  
**Name:** Office Application Startup  
**Type:** attack-pattern  
**Platforms:** Windows, Office 365  
**Permissions Required:** User, Administrator  
**Detection:**
- Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes.
- Non-standard process execution trees may also indicate suspicious or malicious behavior.
- If `winword.exe` is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.
- Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts.
- Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.
- Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.
- SensePost, whose tool [Ruler](https://attack.mitre.org/software/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.

---

### InstallUtil

**Created:** 2020-01-23T19:09:48.811Z  
**Description:**
Adversaries may use `InstallUtil` to proxy execution of code through a trusted Windows utility. `InstallUtil` is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. The `InstallUtil` binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: `C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe` and `C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe`.

`InstallUtil` may also be used to bypass application control through the use of attributes within the binary that execute the class decorated with the attribute `[System.ComponentModel.RunInstaller(true)]`.

**External References:**
- [MSDN InstallUtil](https://msdn.microsoft.com/en-us/library/50614e95.aspx)
- [LOLBAS Installutil](https://lolbas-project.github.io/lolbas/Binaries/Installutil/)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2022-03-11T18:47:52.603Z  
**Name:** InstallUtil  
**Type:** attack-pattern  
**Platforms:** Windows  
**Permissions Required:** User  
**Defense Bypassed:**
- Digital Certificate Validation
- Application control

**Detection:**
- Use process monitoring to monitor the execution and arguments of `InstallUtil.exe`.
- Compare recent invocations of `InstallUtil.exe` with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity.
- Command arguments used before and after the `InstallUtil.exe` invocation may also be useful in determining the origin and purpose of the binary being executed.

---

### Spearphishing for Information

**Created:** 2020-10-02T17:09:50.723Z  
**Description:**
Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (e.g., [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.

All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site.

Adversaries may also link to "web bugs" or "web beacons" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address. Adversaries may also be able to spoof a complete website using what is known as a