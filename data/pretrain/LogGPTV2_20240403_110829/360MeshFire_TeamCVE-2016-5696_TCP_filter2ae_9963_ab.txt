2.1伪造一个RST包，seq为猜测值
2.2 使用真实连接，发送100个设计过的RST包(seq落在有效范围，且不等于正确值)，如果收到99个包，说明seq num在范围内
2.3 采用折半算法，收紧范围，最终确定准确的seq值
3 推断ack number
原理：推断ACK值，可以先推断出挑战范围的左边界：SND.UNA −(231 − 1)， 然后再 +（231 – 1），就可以得到准确的ACK值了。
3.1确定左边界的范围，尝试0， 1G，2G， 3G四个节点，确定左边界落在哪个象限中。
具体实施：
3.1.1 发送伪造ACK包，ack分别为0、1G、2G、3G，seq为有效范围内的值
3.1.2 发送100个设计过的RST包, 如果收到99个包，说明ack在挑战范围
3.13 通过四个节点的命中挑战的情况，就可以判断出挑战范围的左边界。
3.2 再使用折半逼近的方法，确定左边界的精确值。
具体实施：
3.2.1 伪造一个ACK包，ack为猜测值， seq为有效范围内的值，
3.2.2 发送100个设计过的RST包，如果收到99个包，说明 ack在挑战范围内; 如果收到100个包，则说明ack在invalid 范围内。
3.2.3 根据判断结果，逐渐逼近至挑战范围的左边界。
3.3 左边界+（231 – 1） = ack
**攻击示意图：**
**现实挑战：**
**时间同步**
由于计数器是按秒复位，上一秒的计数器，在进入下一秒后会复位。
所以攻击端，必须与被攻击机器的时间尽可能保持同步，才能使攻击成立。
**RST限制**
通常 firewall都有限制RST的频率，防止攻击，那么就不能使用RST做尝试推断了。
可以使用ACK包进行挑战，ACK挑战条件：
1、seq在有效范围
2、ACK在挑战范围，
ACK的挑战值很容易确定：
四个节点：0，1G，2G，3G，必定有1到2个命中范围，在已知一个seq有效值的情况下，可以推断出ACK挑战值。
**包丢失**
包的丢失，会影响推断：
引入多次确认机制。
**窗口变化**
tcp 窗口，不是固定，是变化的，一定程序上增加了推断难度。
**  
**
**0x03 攻击效果**
有一组公开的数据，
1.断开连接攻击：
2.数据注入攻击
可以看到成功率非常高，时间基本控制在1分钟左右。
**  
**
**0x04 POC**
截止到8月30日，网络上已经出现两个POC：
rover: 第三方，只是开放了推断端口号部分，python实现。
mountain-goat: 官方曝出，只开放到推断seq 范围，C实现 。
8月底，360MeshFire网络安全团队完整实现了端口号、seq和ack的推断，并完成了reset攻击和inject数据攻击。
360MeshFire Team POC演示视频： [https://yunpan.cn/cMW9EbkGBscuz
](https://yunpan.cn/cMW9EbkGBscuz)（提取码：b46b）
附演示视频截图：
POC结论：
1.针对任意TCP连接，精准的猜测连接是否存在、源端口、seq、ack是可行的，成功率极高。
2.只要服务端的Linux kernel为漏洞影响版本，可触发挑战包机制，就会受到该漏洞的影响。
3.一旦推测出四元组信息，seq，ack的情况下，就可以实现双向的数据劫持注入和定向TCP连接的拒绝服务：包括HTTP中注入钓鱼代码，伪造客户端发送写命令（TELNET，HTTP等）
4.如果在网络带宽足够、程序实现优化（C实现）等情况下，可以快速精准地推断出以上元素数据，达到paper所述的攻击成功率。
5.由于安卓4.4版本以上均存在该问题，且大量APP中建立的是与服务器的长连接，导致可被利用的场景，可能会有更多的变数。
**  
**
**0x05 影响范围**
Linux Kernel3.6 以上版本, 包括目前最高4.6版本，都受该漏洞影响。
**安卓**
release version , name ,kernel version
4.4 Kit Kat |3.10
5.x Lollipop |3.16.1
6.0 Marshmallow |3.18.10
**Centos 7**
release version ,kernel version
7.0 3.10
7.1 3.10
7.2 3.10
**Utuntu**
release version ,kernel version
13.04 Raring Ringtail 3.8
13.10 Saucy Salamander 3.11
14.04 Trusty Tahr 3.13
14.10 Utopic Unicorn 3.16
15.04 Vivid Vervet 3.19
15.10 Wily Werewolf 4.2
16.04 Xenial Xerus 4.4
16.10 Yakkety Yak 4.6
**Redhat Enterprise release**
release version ,kernel version
RHEL 7.2 3.10.0-327
RHEL 7.1 3.10.0-229
RHEL 7.0 GA 3.10.0-123
RHEL 7.0 Beta 3.10.0-54.0.1
**0x06 修复方案**
1.升级Linux内核到4.7版本以上
2.修改挑战包计数器值，步骤如下：
1）修改挑战包的节流设置/etc/sysctl.conf:
net.ipv4.tcp_challenge_ack_limit = 9999999
该值取100-300间随机数，可以过滤那些只会使用工具的黑客，增加一定难度，同时对性能不会产生什么影响。
该值取一个大值，将直接解决此问题，但因此导致的性能、带宽损耗需要评估。
2 ）sysctl -p （激活）
3\. 对业务来讲，使用加密传输，可以有效防止数据的劫持和注入。
协议栈解决漏洞思路：
不采用全局挑战包计数器的实现方案，每个连接维护一个挑战包计数器。
linux 4.0部分引入了这个思想，但只对SYN包的挑战进行了单独计算，所以面对攻击无效。
**0x07 参考资料**
[sec16_TCP_pure_offpath.pdf](http://www.cs.ucr.edu/~zhiyunq/pub/sec16_TCP_pure_offpath.pdf)
数据注入[演示视频](http://www.tudou.com/programs/view/UBS_Oel6FUQ/?resourceId=341181215_06_02_99)
[14亿Android设备受Linux TCP漏洞的影响](http://www.freebuf.com/news/112245.html)
[How to mitigate Linux “Off-path” TCP exploits](https://bobcares.com/blog/fix-linux-off-path-tcp-attacks-cve-2016-5696/)
知乎[tombkeeper与曹跃关于geekpwn上任意tcp远程支持的讨论](https://www.zhihu.com/question/46277448)