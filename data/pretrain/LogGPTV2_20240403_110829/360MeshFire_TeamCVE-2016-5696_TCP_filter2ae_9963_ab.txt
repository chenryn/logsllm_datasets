### 2.1 伪造RST包
- **步骤**：构造一个RST包，其序列号（seq）为猜测值。

### 2.2 使用真实连接发送RST包
- **步骤**：通过实际的TCP连接，发送100个精心设计的RST包。这些RST包的序列号在有效范围内但不等于正确的序列号。
- **验证**：如果收到99个响应包，则表明猜测的序列号在有效范围内。

### 2.3 确定准确的序列号
- **方法**：使用折半算法逐步缩小范围，最终确定准确的序列号。

### 3 推断ACK号
#### 原理
- **推断过程**：首先推断出挑战范围的左边界 `SND.UNA - (2^31 - 1)`，然后加上 `(2^31 - 1)` 即可得到准确的ACK值。

#### 3.1 确定左边界的范围
- **步骤**：
  1. 发送四个伪造的ACK包，其ACK分别为0、1G、2G、3G，且序列号在有效范围内。
  2. 发送100个设计过的RST包，如果收到99个响应包，说明ACK在挑战范围内。
  3. 根据四个节点的响应情况，判断挑战范围的左边界落在哪个区间内。

#### 3.2 确定左边界的精确值
- **步骤**：
  1. 构造一个ACK包，其ACK为猜测值，序列号在有效范围内。
  2. 发送100个设计过的RST包，如果收到99个响应包，说明ACK在挑战范围内；如果收到100个响应包，则说明ACK在无效范围内。
  3. 根据上述结果，逐渐逼近挑战范围的左边界。

#### 3.3 计算ACK值
- **公式**：`左边界 + (2^31 - 1) = ACK`

### 攻击示意图
- **现实挑战**：
  - **时间同步**：计数器每秒复位，攻击者必须与目标机器的时间保持同步。
  - **RST限制**：防火墙通常会限制RST包的频率，因此可以使用ACK包进行推断。
  - **包丢失**：引入多次确认机制以应对包丢失问题。
  - **窗口变化**：TCP窗口大小的变化增加了推断难度。

### 0x03 攻击效果
- **公开数据**：
  1. **断开连接攻击**
  2. **数据注入攻击**
- **成功率**：非常高，时间基本控制在1分钟左右。

### 0x04 POC
- **截至8月30日**，网络上已出现两个POC：
  - **rover**：第三方实现，仅开放端口号推断部分，使用Python编写。
  - **mountain-goat**：官方公布，仅开放到序列号推断部分，使用C语言编写。
- **360MeshFire网络安全团队**：完整实现了端口号、序列号和ACK号的推断，并完成了重置攻击和数据注入攻击。
- **演示视频**：[https://yunpan.cn/cMW9EbkGBscuz](https://yunpan.cn/cMW9EbkGBscuz)（提取码：b46b）

#### POC结论
1. 针对任意TCP连接，精准猜测连接是否存在、源端口、序列号和ACK号是可行的，成功率极高。
2. 只要服务端的Linux内核版本受漏洞影响，即可触发挑战包机制。
3. 一旦推测出四元组信息（序列号和ACK号），可以实现双向的数据劫持注入和定向TCP连接的拒绝服务。
4. 在网络带宽足够且程序优化的情况下，可以快速精准地推断出以上元素数据，达到论文所述的攻击成功率。
5. 由于安卓4.4及以上版本均存在该问题，大量APP中建立的是与服务器的长连接，导致可被利用的场景更多。

### 0x05 影响范围
- **受影响的Linux内核版本**：3.6及以上版本，包括目前最高4.6版本。
- **安卓**：
  - 4.4 Kit Kat | 3.10
  - 5.x Lollipop | 3.16.1
  - 6.0 Marshmallow | 3.18.10
- **CentOS 7**：
  - 7.0 | 3.10
  - 7.1 | 3.10
  - 7.2 | 3.10
- **Ubuntu**：
  - 13.04 Raring Ringtail | 3.8
  - 13.10 Saucy Salamander | 3.11
  - 14.04 Trusty Tahr | 3.13
  - 14.10 Utopic Unicorn | 3.16
  - 15.04 Vivid Vervet | 3.19
  - 15.10 Wily Werewolf | 4.2
  - 16.04 Xenial Xerus | 4.4
  - 16.10 Yakkety Yak | 4.6
- **Red Hat Enterprise Linux**：
  - RHEL 7.2 | 3.10.0-327
  - RHEL 7.1 | 3.10.0-229
  - RHEL 7.0 GA | 3.10.0-123
  - RHEL 7.0 Beta | 3.10.0-54.0.1

### 0x06 修复方案
1. **升级Linux内核**：至4.7版本以上。
2. **修改挑战包计数器值**：
  1. 修改挑战包的节流设置 `/etc/sysctl.conf`：
     ```bash
     net.ipv4.tcp_challenge_ack_limit = 9999999
     ```
  2. 激活配置：
     ```bash
     sysctl -p
     ```
3. **业务层面**：使用加密传输，防止数据劫持和注入。
4. **协议栈改进**：每个连接维护独立的挑战包计数器，而不是全局计数器。

### 0x07 参考资料
- [sec16_TCP_pure_offpath.pdf](http://www.cs.ucr.edu/~zhiyunq/pub/sec16_TCP_pure_offpath.pdf)
- 数据注入[演示视频](http://www.tudou.com/programs/view/UBS_Oel6FUQ/?resourceId=341181215_06_02_99)
- [14亿Android设备受Linux TCP漏洞的影响](http://www.freebuf.com/news/112245.html)
- [How to mitigate Linux “Off-path” TCP exploits](https://bobcares.com/blog/fix-linux-off-path-tcp-attacks-cve-2016-5696/)
- 知乎[tombkeeper与曹跃关于geekpwn上任意tcp远程支持的讨论](https://www.zhihu.com/question/46277448)