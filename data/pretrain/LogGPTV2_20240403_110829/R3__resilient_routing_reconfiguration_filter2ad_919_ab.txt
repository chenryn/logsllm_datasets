and thus may involve the failed link) into a protection routing
that does not traverse any failed link and thus can be used to
reroute trafﬁc on the failed links. The rescaling procedure is ef-
ﬁcient and can be applied in real-time with little computation
and memory overhead.
A unique feature of R3 is that it can provide several provable
theoretical guarantees. In particular, R3 guarantees no congestion
under a wide range of failure scenarios involving multiple link fail-
ures. As a result, it provides much stronger guarantee than simple
reachability. Moreover, the conversion from topology uncertainty
into trafﬁc uncertainty is efﬁcient in that the seemingly wasteful re-
placement of rerouted trafﬁc with link capacity is indeed necessary
for single-link failure scenarios. Finally, the online reconﬁguration
procedure is independent of the order in which the failed links are
detected. Thus, routers can apply R3 independently.
In addition, R3 admits a number of useful extensions for (i) cop-
ing with trafﬁc variations, (ii) supporting realistic failure scenarios,
(iii) accommodating prioritized trafﬁc with different protection lev-
els, (iv) balancing the trade-off between performance under normal
conditions and failures, and (v) balancing the trade-off between net-
work utilization and delay.
3. R3 DESIGN
In this section, we present the detailed design of R3. We describe
ofﬂine precomputation in Section 3.1 and online reconﬁguration
in Section 3.2, followed by an illustrative example in Section 3.3.
We prove the theoretical guarantees of R3 in Section 3.4. We also
introduce several useful extensions to R3 in Section 3.5.
3.1 Ofﬂine Precomputation
Problem formulation: The goal of ofﬂine precomputation is to
ﬁnd routing r for trafﬁc matrix d and routing p for rerouting vir-
tual demand set XF deﬁned in (2) to minimize the maximum link
utilization (MLU) over demand set d + XF . This is formulated as a
problem shown in (3). The objective is to minimize MLU over the
entire network. To remove redundant routing trafﬁc forming a loop,
we can either add to the objective a small penalty term including the
sum of routing terms or postprocess. For clearer presentation, we
focus on MLU as the objective. Constraint [C1] ensures that r and
p are valid routing, i.e., they both satisfy routing constraints (1).
Constraint [C2] enforces all links have utilization below MLU.
minimize(r,p) M LU
subject to :
[C1] r = {rab(e)|a, b ∈ V, e ∈ E} is a routing;
p = {pℓ(e)|ℓ, e ∈ E} is a routing;
[C2] ∀x ∈ XF , ∀e ∈ E :
Pa,b∈V dabrab(e)+Pl∈E xlpl(e)
ce
≤ M LU.
(3)
Note that p is deﬁned for each link whereas r is deﬁned for each
OD pair. Also note that when r is pre-determined (e.g., by OSPF),
r becomes an input to the optimization in (3) instead of consisting
of optimization variables.
Solution strategy: A key challenge in solving (3) is that there is a
constraint [C2] for every element x belonging to the rerouting vir-
tual demand set XF . Since XF has an inﬁnite number of elements,
the number of constraints is inﬁnite. Fortunately, we can apply lin-
ear programming duality to convert (3) into an equivalent, simpler
linear program with a polynomial number of constraints as follows.
First, constraint [C2] in (3) is equivalent to:
∀e ∈ E : Pa,b∈V dabrab(e) + M L(p, e)
ce
≤ M LU,
(4)
where M L(p, e) is the maximum load on e for ∀x ∈ XF , and thus
is the optimal objective of the following problem:
maximizex Pl∈E xlpl(e)
subject to :  ∀ℓ ∈ E : xℓ/cℓ ≤ 1;
Pℓ∈E xℓ/cℓ ≤ F.
(5)
293Here (5) is a linear program when p is a ﬁxed input. From linear
programming duality [5], the optimal objective of (5), M L(p, e),
is no more than a given upper bound U B if and only if there exist
dual multipliers πe(ℓ) (ℓ ∈ E) and λe such that:
ξe. Speciﬁcally, let E′ = E \ {e} and G′ = (V, E′). The updated
base routing r’ is deﬁned as:
ab(ℓ) = rab(ℓ) + rab(e) · ξe(ℓ), ∀a, b ∈ V, ∀ℓ ∈ E′,
r′
(9)
Pℓ∈E πe(ℓ) + λeF ≤ U B;
∀ℓ ∈ E : πe(ℓ)+λe
∀ℓ ∈ E : πe(ℓ) ≥ 0;
λe ≥ 0.
≥ pℓ(e);
cℓ
(6)
where rab(ℓ) is the original allocation on link ℓ for OD pair a → b,
and rab(e) · ξe(ℓ) gives the increase due to using ξe to reroute the
original allocation on the failed link (i.e., rab(e)). Similarly, the
updated protection routing p’ is deﬁned as:
Here πe(ℓ) is the dual multiplier for constraint xℓ/cℓ ≤ 1, λe is the
that (5) computes the maximum load on link e.
Since all of the constraints in (6) are linear, we convert (4) into a
dual multiplier forPℓ∈E xℓ/cℓ ≤ F , and the subscript e indicates
set of linear constraints by substituting M L(p, e) withPℓ∈E πe(ℓ)+
λeF and incorporating (6). We can show that the original problem
(3) then becomes the following equivalent linear program, which
we solve using cplex [8]:
minimize(r,p,π,λ) M LU
subject to :
p′
uv(ℓ) = puv(ℓ) + puv(e) · ξe(ℓ), ∀(u, v) ∈ E′, ∀ℓ ∈ E′. (10)
Efﬁciency: All the operations in online reconﬁguration are sim-
ple and thus highly efﬁcient. Speciﬁcally, computing ξe from p
requires only simple rescaling of {pe(ℓ)}. The rescaling oper-
ation can also be avoided if we directly store pe(e) and ξe =
ab(ℓ) and p′
1−pe(e) |ℓ 6= eo instead of {pe(ℓ)|ℓ ∈ E}. Meanwhile, updat-
n pe(ℓ)
ing r′
uv(ℓ) is also extremely simple and is only required
for demands with non-zero trafﬁc allocation on the failed link (i.e.,
rab(e) > 0 and puv(e) > 0). Note that R3 does not require all
routers to ﬁnish updating their r and p before recovering from the
failed link e – the recovery reaches full effect as soon as the source
router of e starts rerouting trafﬁc through the detour route ξe.
(7)
≤ M LU ;
3.3 R3 Example
i
e1
e2
e3
e4
j
r = {rab(e)|a, b ∈ V, e ∈ E} is a routing;
p = {pℓ(e)|ℓ, e ∈ E} is a routing;
∀e ∈ E :
Pa,b∈V dabrab(e)+Pl∈E πe(ℓ)+λeF
ce
∀e, ℓ ∈ E : πe(ℓ)+λe
∀e, ℓ ∈ E : πe(ℓ) ≥ 0;
∀e ∈ E : λe ≥ 0.
cℓ
≥ pℓ(e);
8>>>>>>>>>>>>>>>:
Complexity: Linear program (7) has O(|V |2 ·|E|+|E|2) variables
and O(|V |3 + |E|2) constraints. Even if we just want to ﬁnd r to
minimize the MLU for ﬁxed trafﬁc matrix d, routing constraints (1)
already have O(|V |2 · |E|) variables and O(|V |3) constraints. In
most networks, |E|2 ≤ |V |3. So (7) only causes moderate increase
in the size of the linear program. Note that linear programming du-
ality has also been exploited in recent research on oblivious rout-
ing [3, 39]. However, [3, 39] require O(|V | · |E|2) constraints,
which is much higher than (7).
3.2 Online Reconﬁguration
After the failure of link e is detected, two main tasks are per-
formed by online reconﬁguration. First, the source router of e im-
mediately reroutes the trafﬁc originally traversing e through a de-
tour route. Second, in preparation for additional link failures, every
router adjusts r and p so that no demand traverses the failed link e.
Fast rerouting of trafﬁc on the failed link: After link e fails, the
source router of e immediately uses p to derive a detour route (de-
noted by ξe) to reroute the trafﬁc that traverses e before it fails.
Note that we cannot directly use pe = {pe(ℓ)|ℓ ∈ E} as the de-
tour route ξe, because pe is deﬁned on the original topology and
may assign non-zero trafﬁc to e, i.e., pe(e) > 0. Fortunately,
{pe(ℓ)|ℓ 6= e} already satisﬁes routing constraints [R1], [R3] and
[R4] in (1). To convert it into a valid detour route ξe, we just need
to perform the following simple re-scaling to ensure that all trafﬁc
originally traversing e is rerouted (thus satisfying [R2]):
ξe(ℓ) = pe(ℓ)
1−pe(e)
(∀ℓ ∈ E \ {e}).
(8)
An example illustrating this procedure is provided in Section 3.3.
Note that when pe(e) = 1, we simply set ξe(ℓ) = 0. As we
show later, under the condition of Theorem 1, pe(e) = 1 implies
that link e carries no actual demand from any OD pairs or virtual
demand from links other than e. So link e does not need to be
protected and can be safely ignored.
Adjusting r and p to exclude the failed link: In preparation for
additional link failures, R3 adjusts r and p to ensure that no (actual
or virtual) demand traverses the failed link e. This can be achieved
by moving the original trafﬁc allocation on link e to the detour route
Figure 1: A simple example network with 4 parallel links.
To illustrate R3 protection routing and re-scaling, consider a sim-
ple network (shown in Figure 1) with 4 parallel links e1, e2, e3, and
e4. For such a network, one can verify that the ofﬂine optimization
results in a protection routing that splits each rerouting virtual de-
mand among all 4 links in proportion to their link capacities.
P4
pe1 (ei)
Suppose the protection routing p for virtual demand e1 spec-
iﬁes that pe1 (e1) = 0.1, pe1 (e2) = 0.2, pe1 (e3) = 0.3, and
pe1 (e4) = 0.4. After e1 fails, source router i detours the real
trafﬁc originally traversing e1 through e2, e3, and e4 in propor-
tion to pe1 (e2), pe1 (e3), and pe1 (e4). This is equivalent to using
a detour route ξe1 , where ξe1 (ei) =
1−pe1 (e1)
for i = 2, 3, 4. This is effectively the re-scaling in (8) and yields
ξe1 (e2) = 2
pe1 (ei)
j=2 pe1 (ej ) =
9 , and ξe1 (e4) = 4
9 .
9 , ξe1 (e3) = 3
Now consider the protection routing of e2 in p, which also spec-
iﬁes that pe2 (e1) = 0.1, pe2 (e2) = 0.2, pe2 (e3) = 0.3, and
pe2 (e4) = 0.4. After link e1 fails, protection plan pe2 is no longer
valid, as it uses e1 to carry the trafﬁc originally passing through
e2, but e1 is unavailable and e1’s protection even needs e2. To
solve this issue, we need to update pe2 so that the usage of e1 is
replaced by remaining links. For this purpose, we use the same
detour route ξe1 to detour the fraction pe2 (e1) = 0.1 of virtual de-
mand xe2 originally traversing e1. This detour splits pe2 (e1) to e2,
e3 and e4 in proportion to ξe1 (e2), ξe1 (e3), and ξe1 (e4), yielding
p′
e2 (ei) = pe2 (ei) + pe2 (e1) · ξe1 (ei) for i = 2, 3, 4. This is effec-
tively the reconﬁguration in (10). Thus, after e1 fails, the protec-
tion routing for e2 becomes p′
e2 (e2) = 0.2 + 0.1 · 2
9 ,
p′
e2 (e3) = 0.3 + 0.1 · 3
e2 (e4) = 0.4 + 0.1 · 4
9 .
e2 (e1) = 0, p′
9 , and p′
3.4 Theoretical Guarantees of R3
Sufﬁcient condition for congestion-free guarantee: A key fea-
ture of R3 is that it can provide provable congestion-free guarantee
under all possible failure scenarios as long as the optimal MLU in
(7) is below 1. More formally, we have:
294THEOREM 1. Let XF be the rerouting virtual demand set with
up to F link failures, as deﬁned in (2). If ofﬂine precomputation
(Section 3.1) obtains routing r and p such that the MLU for the en-
tire demand set d + XF is no larger than 1 on the original topology
G = (V, E), then online reconﬁguration (Section 3.2) guarantees
that the MLU for the real trafﬁc matrix d and the rerouted trafﬁc
is no larger than 1 under any failure scenario with up to F failed
links.
PROOF. Let e be the ﬁrst failed link. Let E′ = E \ {e}. Let
r’ and p’ be the updated routing after online reconﬁguration. Let
XF −1 be the rerouting virtual demand set with up to F − 1 failures
in E′. Below we prove that r’ and p’ guarantee that the MLU for
demand set d+XF −1 is no larger than 1 on the new topology G′ =
(V, E′). Consider any ℓ ∈ E′ and x ∈ XF −1. Let L(d, x, r
′, ℓ)
be the load on link ℓ coming from real trafﬁc d and virtual demand
x using base routing r’ and protection routing p’. We have:
′, p
L(d, x, r
′, p
′, ℓ)
ab(ℓ) +P(u,v)∈E′ xuvp′
= Pa,b∈V dabr′
= Pa,b∈V dab(rab(ℓ) + rab(e)ξe(ℓ))
+P(u,v)∈E′ xuv(puv(ℓ) + puv(e)ξe(ℓ))
= L(d, x, r, p, ℓ) + L(d, x, r, p, e) ·
pe(ℓ)
1−pe(e) .
uv(ℓ)
THEOREM 2. Let X1 be the rerouting virtual demand set for
single-link failures, as deﬁned in (2).
If there exists base rout-
ing r and link-based protection routing p∗ such that for all cases
of single-link failures, the MLU (due to both regular trafﬁc and
rerouted trafﬁc) is no larger than 1 and there is no trafﬁc loss due
to network partitioning, then there exists p such that with r and p,
d + X1 can be routed without creating any congestion.
e due to real trafﬁc d and base routing r. We construct p as:
PROOF. Let L(d, r, e) =Pa,b∈V dabrab(e) be the load on link
∀e, ℓ ∈ E : pe(ℓ) =(
1 − L(d,r,e)
e(ℓ) · L(d,r,e)
p∗
if ℓ = e;
otherwise.
(16)
,
,
ce
ce
We next show that the resulted routing p together with the base
routing r ensures that there is no congestion for demand set d+X1.
Since MLU is a convex function, the maximum MLU for routing
(r,p) over the entire demand set d + X1 will be reached at an
extreme point of d + X1, which corresponds to having a single
xe/ce = 1 and all the other xℓ/cℓ = 0 (∀ℓ 6= e). It is easy to see
that for ∀ℓ 6= e, we have
L(d, x, r, p, ℓ) = L(d, r, ℓ) + xepe(ℓ)
(11)
p∗
e(ℓ)
= L(d, r, ℓ) + ce
= L(d, r, ℓ) + L(d, r, e)p∗
e(ℓ).
L(d,r,e)
ce
Given x ∈ XF −1, we can obtain y ∈ XF by adding a virtual
demand for the failed link e to x. That is, ye = ce and yuv =
xuv for ∀(u, v) ∈ E′. Since r and p guarantee no congestion for
d + XF , we have:
That is, L(d, x, r, p, ℓ) is the same as the link load on ℓ when pro-
tection routing p∗
e is used to reroute trafﬁc traversing the failed link
e, which is no larger than cℓ by assumption. Meanwhile, it is easy
to see that:
cℓ ≥ L(d, y, r, p, ℓ) = L(d, x, r, p, ℓ) + ce · pe(ℓ);
ce ≥ L(d, y, r, p, e) = L(d, x, r, p, e) + ce · pe(e).
From (13) and when pe(e) < 1, we have:
ce ≥ L(d, x, r, p, e)/(1 − pe(e)).
(12)
(13)
(14)
Substituting ce in (12) with the R.H.S. of (14), we have:
cℓ ≥ L(d, x, r, p, ℓ) + L(d, x, r, p, e) pe(ℓ)
1−pe(e) .
(15)
′, p
Combining (11) and (15), we have cℓ ≥ L(d, x, r
′, ℓ) (for
∀ℓ ∈ E′). Note that this also holds when pe(e) = 1. In this case,
under our assumption that M LU ≤ 1, no other actual or virtual
demand traverses e and thus needs to be rerouted. So we simply set
′, ℓ) = L(d, x, r, p, ℓ) ≤ cℓ. Therefore,
ξe(ℓ) = 0 and L(d, x, r
r’ and p’ guarantee that the MLU for d + XF −1 on G′ = (V, E′)
is no larger than 1. Thus, r’ guarantees that the MLU for d is no
larger than 1. By induction, we can then prove that d is congestion-
free for any failure scenario with up to F failed links.
′, p
Note that depending on the value of F and the connectivity of
G, we may not be able to ﬁnd r and p that meet the sufﬁcient con-
dition. For example, if there exist F failures that partition the net-
work, then it is impossible to ﬁnd r and p to ensure that the MLU
is no larger than 1 for the entire demand set d + XF . Interestingly,
our evaluation shows that when such a scenario occurs, the online
reconﬁguration of R3 can automatically remove those demands that
have lost reachability due to the partition of the network (by setting
ξe(ℓ) = 0 when pe(e) = 1). Moreover, by choosing r and p that
minimize the MLU over the entire demand set d+XF , R3 achieves