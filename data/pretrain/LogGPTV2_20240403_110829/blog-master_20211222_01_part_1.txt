## 每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第14期 - 为什么会有死锁?      
### 作者                                    
digoal                                    
### 日期                                    
2021-12-22                        
### 标签                                 
PostgreSQL , 热门问题                 
----               
## 背景               
- 问题说明(现象、环境)        
- 分析原因        
- 结论和解决办法        
## 链接、驱动、SQL             
#### 14、为什么会有死锁?               
https://www.bilibili.com/video/BV1LD4y1c7Zp/  
当等待链条出现闭环时, 就是死锁. 如果不检测或干预死锁, 那么将无限等待下去.  
```  
-- session 1:  
begin;  
update a set x=? where id=1;  
-- session 2:  
begin;  
update a set x=? where id=2;  
-- session 3:  
begin;  
update a set x=? where id=3;  
-- session 1:  
update a set x=? where id=3;  
-- session 2:  
update a set x=? where id=1;  
-- session 3:  
update a set x=? where id=2;  
1 wait 3  
2 wait 1  
3 wait 2  
1 -- 3 -- 2 -- 1   等待闭环  
```  
如何发现和处理死锁?   
1、当无法立即获得锁(与锁队列(包括已获得和等待中的)冲突)时, 将当前的“会话、等什么对象、锁级别”写入等待队列:  
- 通常是末端,   
- 特殊情况: 如果当前会话已获得某个锁, 而且等待队列中有其他会话正在等待当前会话已获得的锁, 那么就插入到这些waiting会话之前), 进入sleep状态.  
- 当等待超过sleep时长(deadlock_timeout, 默认1秒)后, 检测是否出现死锁.    
```  
x  
x  
x  
x  
x  
插入等待队列末尾  
```  
特殊情况  
```  
b (我的, 已获得)    
队列  
x  
x  
x  
  d 现在插入这 ...   
c (这个会话和我的会话已获得(b)冲突, 那么就把当前会话插入到它前面)    
x  
x  
a (这个会话和我的会话已获得(b)冲突, 那么就把当前会话插入到它前面)    
x
x
```  
PostgreSQL 锁等待队列的插入算法, 有点意思:   
这种rearrange wait order插入方式的目的是消除soft deadlock, 也就是说大家都在等待, 在等待队列中也可能出现死锁(soft deadlock), 通过调整等待顺序来解决soft deadlock.   
2、检测死锁的方法就是前面说的, 是否出现锁等待的闭环.    
```  
postgres=*# update tt set info='1' where id=2;  
ERROR:  40P01: deadlock detected  
DETAIL:  Process 74933 waits for ShareLock on transaction 31462666; blocked by process 75163.  
Process 75163 waits for ShareLock on transaction 31462665; blocked by process 74933.  
HINT:  See server log for query details.  
CONTEXT:  while updating tuple (0,4) in relation "tt"  
LOCATION:  DeadLockReport, deadlock.c:1153  
```  
3、谁会被rollback?   
按照PG的死锁检测算法, 在等待中的会话都会每隔sleep时长(deadlock_timeout, 默认1秒)就发起死锁检测, 所以谁先检测出死锁就rollback谁(也就是说发现自己在闭环中, 属于自杀行为).    
不建议设置太小的deadlock_timeout, 不断唤起死锁检测, 会导致性能消耗问题.  
参考:  
死锁检测算法  
src/backend/storage/lmgr/README  
```  
The Deadlock Detection Algorithm  
--------------------------------  
Since we allow user transactions to request locks in any order, deadlock  
is possible.  We use a deadlock detection/breaking algorithm that is  
fairly standard in essence, but there are many special considerations  
needed to deal with Postgres' generalized locking model.  
A key design consideration is that we want to make routine operations  
(lock grant and release) run quickly when there is no deadlock, and  
avoid the overhead of deadlock handling as much as possible.  We do this  
using an "optimistic waiting" approach: if a process cannot acquire the  
lock it wants immediately, it goes to sleep without any deadlock check.  
But it also sets a delay timer, with a delay of DeadlockTimeout  
milliseconds (typically set to one second).  If the delay expires before  
the process is granted the lock it wants, it runs the deadlock  
detection/breaking code. Normally this code will determine that there is  
no deadlock condition, and then the process will go back to sleep and  
wait quietly until it is granted the lock.  But if a deadlock condition  
does exist, it will be resolved, usually by aborting the detecting  
process' transaction.  In this way, we avoid deadlock handling overhead  
whenever the wait time for a lock is less than DeadlockTimeout, while  
not imposing an unreasonable delay of detection when there is an error.  
Lock acquisition (routines LockAcquire and ProcSleep) follows these rules:  
1. A lock request is granted immediately if it does not conflict with  
any existing or waiting lock request, or if the process already holds an  
instance of the same lock type (eg, there's no penalty to acquire a read  
lock twice).  Note that a process never conflicts with itself, eg one  
can obtain read lock when one already holds exclusive lock.  
2. Otherwise the process joins the lock's wait queue.  Normally it will  
be added to the end of the queue, but there is an exception: if the  
process already holds locks on this same lockable object that conflict  
with the request of any pending waiter, then the process will be  
inserted in the wait queue just ahead of the first such waiter.  (If we  
did not make this check, the deadlock detection code would adjust the  
queue order to resolve the conflict, but it's relatively cheap to make  
the check in ProcSleep and avoid a deadlock timeout delay in this case.)  
Note special case when inserting before the end of the queue: if the  
process's request does not conflict with any existing lock nor any  
waiting request before its insertion point, then go ahead and grant the  
lock without waiting.  
When a lock is released, the lock release routine (ProcLockWakeup) scans  
the lock object's wait queue.  Each waiter is awoken if (a) its request  
does not conflict with already-granted locks, and (b) its request does  
not conflict with the requests of prior un-wakable waiters.  Rule (b)  
ensures that conflicting requests are granted in order of arrival. There  
are cases where a later waiter must be allowed to go in front of  
conflicting earlier waiters to avoid deadlock, but it is not  
ProcLockWakeup's responsibility to recognize these cases; instead, the  
deadlock detection code will re-order the wait queue when necessary.  