### VI. RESULTS

#### A. Accuracy
In this section, we evaluate the accuracy of HCLPars and compare it with 14 existing log parsers. The log datasets used in our experiments include HDFS, BGL, Spark, Hadoop, ZooKeeper, OpenStack, HPC, and Proxifier (Table III). These log files are from distributed systems, and some of them (HDFS, BGL, HPC, ZooKeeper, and Proxifier) have been used in previous studies [17, 20].

To ensure a fair comparison, we conducted accuracy experiments on subsets of the original log datasets, each containing 2,000 log messages. For example, HDFS, which has a total size of 1.47 GB, was reduced to sizes of 300 KB, 1 MB, 10 MB, 100 MB, and 1 GB, respectively. Table IV shows the number of raw log messages in each dataset.

Table III presents the accuracy results of the log parsers across 16 log datasets. Each column indicates the accuracy of one log parser across all datasets, helping to define its robustness across different log types. We selected log parsers that achieved high accuracy in more than four log datasets: AEL, IPLOM, LenMa, MoLFI, Spell, Drain, and POP, and compared them with HCLPars.

#### C. Efficiency
Efficiency is a critical aspect when parsing log data. To evaluate the efficiency of the log parsers, we recorded the runtime required to complete the entire parsing process. Similar to the previous experiment settings, we evaluated the runtime of log parsers on 40 sampled datasets from real-world log datasets. The results are shown in Figure 9. It is evident that the size of the log is directly proportional to the runtime, i.e., parsing time increases with log size. Additionally, the efficiency of the log parser depends on the number of event templates. Simpler log data, containing a limited number of templates, is easier to parse. The efficiency of the log parser is particularly noticeable when there are many log templates.

Drain and IPLoM exhibit better efficiency, scaling linearly with log size. POP also performs well with large data. In contrast, AEL and Spell do not scale well with many event templates, while LenMa and MoLFI struggle with large data.

Figure 8 illustrates the parsing accuracy on different log dataset volumes. Some lines in the figure are incomplete because certain parsers, such as MoLFI and LenMa, cannot complete the parsing within a reasonable period (4 hours). The results show that POP maintains consistent performance in most cases, except for a 0.24 drop in OpenStack. Other log parsers exhibit clear drops in accuracy or significant fluctuations with increasing data volume, except for HDFS, ZooKeeper, and Spark.

The experimental results for HCLPars are presented in Table IV and Figure 8. HCLPars demonstrates very consistent accuracy across all datasets. For HDFS and Spark, the accuracy is 1 for all five samples. For BGL and Hadoop, the accuracy fluctuation is at most 0.001. For Proxifier and ZooKeeper, the fluctuation is at most 0.02. Compared to other parsers, HCLPars is the only one to achieve consistently high accuracy across all datasets.

For instance, BGL contains 619 event templates. POP can finish parsing within 5 minutes, while Drain and IPLoM take 10 minutes. AEL and Spell require a long time to complete parsing (1 hour), and LenMa and MoLFI cannot finish parsing 1 GB of BGL within 2, 4, or 6 hours, respectively. The experimental results for HCLPars are also shown in Table VI and Figure 9.

#### TABLE III. ACCURACY OF LOG PARSERS ACROSS DIFFERENT LOG TYPES

| Log Dataset | SLCT | AEL | IPLOM | LKE | LFA | LogSig | SHISO | LenMa | Spell | Drain | MoLFI | POP | HCLPars | Best |
|-------------|------|-----|-------|-----|-----|--------|-------|-------|-------|-------|-------|-----|---------|------|
| HDFS        | 0.455 | 0.978 | 1*    | 0.998 | 0.875 | 0.800  | 0.978 | 0.546 | 0.998 | 0.851 | 1*   | 0.997   | 0.998 | 1*      | 1    |
| Hadoop      | 0.432 | 0.567 | 0.956 | 0.700 | 0.900 | 0.654  | 0.865 | 0.566 | 0.885 | 0.867 | 0.778 | 0.938   | 0.957 | 0.998   | 0.955* | 0.999   |
| Spark       | 0.685 | 0.905 | 0.920 | 0.634 | 0.994 | 0.544  | 0.920 | 0.795 | 0.887 | 0.576 | 0.905 | 0.920   | 0.418 | 0.999   | 1*   | 1       |
| Zookeeper   | 0.726 | 0.921 | 0.992* | 0.578 | 0.839 | 0.700  | 0.660 | 0.789 | 0.841 | 0.688 | 0.964 | 0.967   | 0.839 | 0.990   | 0.987 | 0.992   |
| OpenStack   | 0.867 | 0.758 | 0.871 | 0.787 | 0.200 | 0.200  | 0.722 | 0.696 | 0.743 | 0.743 | 0.764 | 0.733   | 0.213 | 0.880   | 0.900* | 0.900   |
| BGL         | 0.573 | 0.758 | 0.939 | 0.128 | 0.854 | 0.227  | 0.711 | 0.835 | 0.690 | 0.723 | 0.787 | 0.963   | 0.960 | 0.990   | 0.996* | 0.996   |
| HPC         | 0.839 | 0.900 | 0.800 | 0.574 | 0.817 | 0.354  | 0.325 | 0.788 | 0.830 | 0.784 | 0.654 | 0.887   | 0.824 | 0.950   | 1*   | 1       |
| Thunderbird | 0.882 | 0.941 | 0.663 | 0.813 | 0.649 | 0.694  | 0.576 | 0.599 | 0.943 | 0.919 | 0.844 | 0.955*  | 0.646 | 0.955*  | 0.955* | 0.955   |
| Mac         | 0.558 | 0.764 | 0.673 | 0.366 | 0.555 | 0.478  | 0.595 | 0.604 | 0.698 | 0.872 | 0.757 | 0.787   | 0.636 | 0.889*  | 0.889* | 0.889   |
| Windows     | 0.697 | 0.690 | 0.567 | 0.990 | 0.588 | 0.689  | 0.701 | 0.713 | 0.566 | 0.993 | 0.989 | 0.997   | 0.406 | 0.876   | 1*   | 1       |
| Linux       | 0.297 | 0.673 | 0.672 | 0.519 | 0.279 | 0.169  | 0.701 | 0.629 | 0.701 | 0.612 | 0.605 | 0.690   | 0.284 | 0.701   | 0.894* | 0.894   |
| Android     | 0.882 | 0.682 | 0.712 | 0.909 | 0.616 | 0.548  | 0.585 | 0.798 | 0.880 | 0.504 | 0.919* | 0.911   | 0.788 | 0.876   | 0.919* | 0.919   |
| HealthApp   | 0.331 | 0.568 | 0.872 | 0.592 | 0.549 | 0.235  | 0.397 | 0.531 | 0.174 | 0.684 | 0.639 | 0.780   | 0.440 | 0.772   | 0.900* | 0.900   |
| Apache      | 0.731 | 1*    | 1*    | 1*   | 1*   | 0.582  | 1*    | 0.709 | 0.999 | 1*    | 1*    | 0.998   | 1*    | 1*      | 1*   | 1       |
| OpenSSH     | 0.521 | 0.538 | 0.802 | 0.426 | 0.501 | 0.373  | 0.619 | 0.426 | 0.925 | 0.431 | 0.554 | 0.788   | 0.500 | 0.998   | 0.999* | 0.999   |
| Proxifier   | 0.518 | 0.518 | 0.519 | 0.455 | 0.145 | 0.969* | 0.517 | 0.951 | 0.508 | 0.517 | 0.527 | 0.527   | 0.013 | 0.900   | 0.930* | 0.969   |
| Average     | 0.624 | 0.760 | 0.809 | 0.614 | 0.647 | 0.513  | 0.679 | 0.702 | 0.835 | 0.735 | 0.782 | 0.864   | 0.640 | 0.923   | 0.960  |

#### TABLE IV. LOG SIZE OF SAMPLE DATASETS

| Dataset   | Sample 1 | Sample 2 | Sample 3 | Sample 4 | Sample 5 |
|-----------|----------|----------|----------|----------|----------|
| HDFS      | 300 KB   | 1 MB     | 10 MB    | 100 MB   | 1 GB     |
| BGL       | 400 KB   | 1 MB     | 10 MB    | 100 MB   | 500 MB   |
| Spark     | 300 KB   | 1 MB     | 10 MB    | 100 MB   | 1 GB     |
| Hadoop    | 600 KB   | 1 MB     | 10 MB    | 15 MB    | 20 MB    |
| ZooKeeper | 4 KB     | 8 KB     | 16 KB    | 32 MB    | 64 KB    |
| OpenStack | 600 KB   | 1 MB     | 10 MB    | 15 MB    | 20 MB    |
| HPC       | 600 KB   | 1 MB     | 10 MB    | 15 MB    | 20 MB    |
| Proxifier | 300 KB   | 600 KB   | 1200 KB  | 1800 KB  | 2400 KB  |

#### TABLE V. ACCURACY OF HCLPARS ON THE SAMPLE DATASETS OF TABLE III

| Dataset   | Sample 1 | Sample 2 | Sample 3 | Sample 4 | Sample 5 |
|-----------|----------|----------|----------|----------|----------|
| HDFS      | 1        | 1        | 1        | 1        | 1        |
| BGL       | 0.996    | 0.996    | 0.996    | 0.996    | 0.995    |
| Spark     | 1        | 1        | 1        | 1        | 1        |
| Hadoop    | 0.999    | 0.999    | 0.999    | 0.998    | 0.999    |
| ZooKeeper | 0.987    | 0.987    | 0.987    | 0.980    | 0.987    |
| OpenStack | 0.900    | 0.900    | 0.900    | 0.900    | 0.900    |
| HPC       | 1        | 1        | 0.996    | 1        | 1        |
| Proxifier | 0.93     | 0.93     | 0.91     | 0.91     | 0.93     |

#### TABLE VI. RUNNING TIME OF HCLPARS (sec) ON SAMPLE DATASETS IN TABLE III

| Dataset   | Sample 1 | Sample 2 | Sample 3 | Sample 4 | Sample 5 |
|-----------|----------|----------|----------|----------|----------|
| HDFS      | 4.67     | 4        | 5        | 10       | 30       |
| BGL       | 15.98    | 20.98    | 34.76    | 40.15    | 60       |
| Spark     | 8.403    | 18.7     | 20       | 44.67    | 50.89    |
| Hadoop    | 7        | 7.98     | 15       | 30.38    | 50       |
| ZooKeeper | 2.120    | 4.203    | 18.23    | 23.78    | 31.67    |
| OpenStack | 5.21     | 6        | 17.95    | 30       | 45       |
| HPC       | 4.98     | 5.45     | 34       | 50       | 52       |
| Proxifier | 3.09     | 7.56     | 10.45    | 12.33    | 10.94    |

### VII. CONCLUSION

This paper investigates the automated parsing of large system event logs. Initially, a comprehensive study was conducted on existing log parsing methods and their functionalities. Based on the findings, the Automatic Log Parsing (HCLPars) method using Spark was proposed, which consists of three steps: removing parameter values according to acquired knowledge, grouping raw log messages based on similarity, and finding the common parts in each group to extract log keys. Many experiments were conducted on 16 sets of real-world log data. The results indicate that HCLPars is highly effective, as it works accurately and efficiently on all types of log data, regardless of their size. Future work will involve testing this method on more log data.

### ACKNOWLEDGEMENT

This work was funded by the University of Jeddah, Jeddah, Saudi Arabia, under grant No. (UJ-20-123-DR). The authors acknowledge with thanks the technical and financial support provided by the University of Jeddah.

### REFERENCES

[1] J. Svacina et al., "On Vulnerability and Security Log analysis: A Systematic Literature Review on Recent Trends," in International Conference on Research in Adaptive and Convergent Systems, Gwangju, Korea, Oct. 2020, pp. 175â€“180, https://doi.org/10.1145/3400286.3418261.

[2] J. Sun, B. Liu, and Y. Hong, "LogBug: Generating Adversarial System Logs in Real Time," in 29th ACM International Conference on Information & Knowledge Management, New York, NY, USA, Oct. 2020, pp. 2229â€“2232, https://doi.org/10.1145/3340531.3412165.

[3] D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupathy, "SherLog: error diagnosis by connecting clues from run-time logs," in Fifteenth International Conference on Architectural Support for Programming Languages and Operating Systems, Pittsburgh, PA, USA, Mar. 2010, pp. 143â€“154, https://doi.org/10.1145/1736020.1736038.

[4] X. Xu, L. Zhu, I. Weber, L. Bass, and D. Sun, "POD-Diagnosis: Error Diagnosis of Sporadic Operations on Cloud Applications," in 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, Atlanta, GA, USA, Jun. 2014, pp. 252â€“263, https://doi.org/10.1109/DSN.2014.94.

[5] A. Oliner, A. Ganapathi, and W. Xu, "Advances and challenges in log analysis," Communications of the ACM, vol. 55, no. 2, pp. 55â€“61, Oct. 2012, https://doi.org/10.1145/2076450.2076466.

[6] X. Xie, Z. Wang, X. Xiao, Y. Lu, S. Huang, and T. Li, "A Confidence-Guided Evaluation for Log Parsers Inner Quality," Mobile Networks and Applications, vol. 26, no. 4, pp. 1638â€“1649, Aug. 2021, https://doi.org/10.1007/s11036-019-01501-6.

[7] H. Dai, "logram: efficient log paring using n-gram model," M.S. thesis, Concordia University, Montreal, QC, Canada, 2020.

[8] D. Aroussi, B. Aour, and A. S. Bouaziz, "A Comparative Study of 316L Stainless Steel and a Titanium Alloy in an Aggressive Biological Medium," Engineering, Technology & Applied Science Research, vol. 9, no. 6, pp. 5093â€“5098, Dec. 2019, https://doi.org/10.48084/etasr.3208.

[9] M. V. Japitana and M. E. C. Burce, "A Satellite-based Remote Sensing Technique for Surface Water Quality Estimation," Engineering, Technology & Applied Science Research, vol. 9, no. 2, pp. 3965â€“3970, Apr. 2019, https://doi.org/10.48084/etasr.2664.

[10] J. Zhu et al., "Tools and Benchmarks for Automated Log Parsing," in 41st International Conference on Software Engineering: Software Engineering in Practice, Montreal, QC, Canada, Dec. 2019, pp. 121â€“130, https://doi.org/10.1109/ICSE-SEIP.2019.00021.

[11] C. Gormley and Z. Tong, Elasticsearch: The Definitive Guide: A Distributed Real-Time Search and Analytics Engine. Sebastopol, CA, USA: Oâ€™Reilly Media, 2015.

[12] M. Nagappan, K. Wu, and M. A. Vouk, "Efficiently Extracting Operational Profiles from Execution Logs Using Suffix Arrays," in 20th International Symposium on Software Reliability Engineering, Mysuru, India, Nov. 2009, pp. 41â€“50, https://doi.org/10.1109/ISSRE.2009.23.

[13] W. Xu, L. Huang, A. Fox, D. Patterson, and M. I. Jordan, "Detecting large-scale system problems by mining console logs," in 22nd Symposium on Operating Systems Principles, Big Sky, MT, USA, Oct. 2009, pp. 117â€“132, https://doi.org/10.1145/1629575.1629587.

[14] R. Vaarandi, "A data clustering algorithm for mining patterns from event logs," in 3rd IEEE Workshop on IP Operations & Management (IPOM 2003) (IEEE Cat. No.03EX764), Kansas City, MO, USA, Oct. 2003, pp. 119â€“126, https://doi.org/10.1109/IPOM.2003.1251233.

[15] A. A. O. Makanju, A. N. Zincir-Heywood, and E. E. Milios, "Clustering event logs using iterative partitioning," in 15th ACM SIGKDD international conference on Knowledge discovery and data mining, Paris, France, Jul. 2009, pp. 1255â€“1264, https://doi.org/10.1145/1557019.1557154.

[16] A. Makanju, A. N. Zincir-Heywood, and E. E. Milios, "A Lightweight Algorithm for Message Type Extraction in System Application Logs," IEEE Transactions on Knowledge and Data Engineering, vol. 24, no. 11, pp. 1921â€“1936, Aug. 2012, https://doi.org/10.1109/TKDE.2011.138.

[17] P. He, J. Zhu, S. He, J. Li, and M. R. Lyu, "Towards Automated Log Parsing for Large-Scale Log Data Analysis," IEEE Transactions on Dependable and Secure Computing, vol. 15, no. 6, pp. 931â€“944, Aug. 2018, https://doi.org/10.1109/TDSC.2017.2762673.

[18] Y. Ohno, S. Morishima, and H. Matsutani, "Accelerating Spark RDD Operations with Local and Remote GPU Devices," in 22nd International Conference on Parallel and Distributed Systems, Wuhan, China, Dec. 2016, pp. 791â€“799, https://doi.org/10.1109/ICPADS.2016.0108.

[19] M. Cinque, D. Cotroneo, and A. Pecchia, "Event Logs for the Analysis of Software Failures: A Rule-Based Approach," IEEE Transactions on Software Engineering, vol. 39, no. 6, pp. 806â€“821, Jun. 2013, https://doi.org/10.1109/TSE.2012.67.

[20] M. Du, F. Li, G. Zheng, and V. Srikumar, "DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning," in ACM SIGSAC Conference on Computer and Communications Security, Dallas, TX, USA, Nov. 2017, pp. 1285â€“1298, https://doi.org/10.1145/3133956.3134015.

[21] M. Zaharia et al., "Resilient distributed datasets: a fault-tolerant abstraction for in-memory cluster computing," in 9th USENIX conference on Networked Systems Design and Implementation, Berkeley, CA, United States, Apr. 2012, pp. 1â€“14.

[22] T.-F. Yen et al., "Beehive: large-scale log analysis for detecting suspicious activity in enterprise networks," in 29th Annual Computer Security Applications Conference, New Orleans, LA, USA, Dec. 2013, pp. 199â€“208, https://doi.org/10.1145/2523649.2523670.

[23] Z. M. Jiang, A. E. Hassan, P. Flora, and G. Hamann, "Abstracting Execution Logs to Execution Events for Enterprise Applications (Short Paper)," in The Eighth International Conference on Quality Software, Oxford, UK, Aug. 2008, pp. 181â€“186, https://doi.org/10.1109/QSIC.2008.50.

[24] J. C. Gower and G. J. S. Ross, "Minimum Spanning Trees and Single Linkage Cluster Analysis," Journal of the Royal Statistical Society: Series C (Applied Statistics), vol. 18, no. 1, pp. 54â€“64, 1969, https://doi.org/10.2307/2346439.

[25] E. F. Krause, "Taxicab Geometry," The Mathematics Teacher, vol. 66, no. 8, pp. 695â€“706, Dec. 1973, https://doi.org/10.5951/MT.66.8.0695.

[26] "Apache SparkTM - Unified Engine for large-scale data analytics," Apache Spark. https://spark.apache.org/.

[27] M. A. Biberci and M. B. Celik, "Dynamic Modeling and Simulation of a PEM Fuel Cell (PEMFC) during an Automotive Vehicleâ€™s Driving Cycle," Engineering, Technology & Applied Science Research, vol. 10, no. 3, pp. 5796â€“5802, Jun. 2020, https://doi.org/10.48084/etasr.3352.

[28] S. He, J. Zhu, P. He, and M. R. Lyu, "Loghub: A Large Collection of System Log Datasets towards Automated Log Analytics." arXiv, Aug. 14, 2020, https://doi.org/10.48550/arXiv.2008.06448.

[29] T.-K. Hu, T. Chen, H. Wang, and Z. Wang, "Triple Wins: Boosting Accuracy, Robustness and Efficiency Together by Enabling Input-Adaptive Inference." arXiv, Feb. 24, 2020, https://doi.org/10.48550/arXiv.2002.10025.

[30] W. Xu, "System Problem Detection by Mining Console Logs," Ph.D. dissertation, University of California, Berkeley, CA, USA, 2010.