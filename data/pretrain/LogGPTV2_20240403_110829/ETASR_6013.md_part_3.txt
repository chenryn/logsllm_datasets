VI. RESULTS
such as HDFS, BGL, Spark, Hadoop, ZooKeeper, Open-Stack,
A. Accuracy HPC, and Proxifier (Table III). HDFS, Spark, Hadoop,
ZooKeeper, OpenStack are log files from distributed systems,
In this part, we evaluate the accuracy of HCLPars, and
while HDFS, BGL, HPC, ZooKeeper, and Proxifier were used
compare it with the accuracy of 14 existing log parsers. To
in [17, 20]. For log dataset, we changed the size based on its
make the comparison fair, we performed accuracy experiments
total size. For example, HDFS has a total size of 1.47 GB. We
on subsets of the original log datasets, each containing 2,000
changed its size to 300 KB, 1 MB, 10 MB, 100 MB, and 1 GB,
log messages.
successively. Table IV shows the number of raw log messages
Table III presents the accuracy results of the log parsers in the datasets. Each row presents 5 sample datasets created
evaluated in 16 log datasets. Each column indicates the from a real dataset. We chose the log parsers that achieved high
accuracy for 1 log parser across the datasets, helping define its accuracy in more than 4 log datasets, i.e. AEL, IPLOM,
robustness across different log types. Each row represents the LenMa, MoLFI, Spell, Drain, and POP and compared them
accuracy of the parsing for different log parsers in a single with HCLPars.
www.etasr.com Bin Lashram et al.: HCLPars: Α New Hierarchical Clustering Log Parsing Method
Engineering, Technology & Applied Science Research Vol. 13, No. 4, 2023, 11130-11138 11136
C. Efficiency
Efficiency is an important aspect to consider when parsing
log data. To evaluate the efficiency of the log parser, we record
the runtime it takes to complete the entire parsing process. Like
previous experiment settings, we evaluate the runtime of log
parsers on 40 sampled datasets from original real-world
datasets. The results can be seen in Figure 9. It is obvious that
the size of the log is directly proportional to runtime, i.e.
parsing time increases with log size. It is also obvious that the
efficiency of the log parser depends on the number of event
templates. The simpler the log data, containing a limited
number of templates, the easier the parsing process. The
efficiency of the log parser is shown when there are many log
templates. Drain and IPLoM have better efficiency, which
scales linearly with log size. POP has better efficiency with
large data. AEL and Spell do not scale well with many event
templates. LenMa and MoLFI do not scale well with large data.
Fig. 8. Log parser accuracy on dataset log size.
Figure 8 shows the results of the parsing accuracy on
different log dataset volumes. Note that some lines are
incomplete in the Figure because some parsers, such as MoLFI
and LenMa, cannot finish the parsing in a reasonable period (4
hours). The results show that POP works continuously in most
cases except for the 0.24 drop in OpenStack, while the rest of
the log parsers have clear drops in accuracy or clear
fluctuations with increasing data volume in most datasets
(except for HDFS, ZooKeeper, and Spark). The experimental
results of HCLPars are shown in Table IV and Figure 8. Note Fig. 9. Running time of log parsers on dataset log size.
that the accuracy of HCLPars is very consistent for all datasets.
The accuracy on HDFS and Spark is 1 for all 5 samples. For For instance, BGL contains 619 event tem plates. POP can
BGL and Hadoop, the fluctuation of the accuracy is 0.001 at finish parsing within 5 min, while Drain and IPLoM take 10
most. For Proxifier and ZooKeeper, the fluctuation of the min. AEL and Spell take a long time to complete parsing (1
accuracy is 0.02 at most. When compared to the other parsers, hour), while LenMa and MoLFI cannot finish parsing 1 GB of
HCLPars is the only to obtain consistently high accuracy in all BGL in 2, 4, or 6 hours, respectively. The experimental results
datasets. of HCLPars are also shown in Table VI and Figure 9.
www.etasr.com Bin Lashram et al.: HCLPars: Α New Hierarchical Clustering Log Parsing Method
Engineering, Technology & Applied Science Research Vol. 13, No. 4, 2023, 11130-11138 11137
TABLE III. ACCURACY OF LOG PARSERS ACROSS DIFFERENT LOG TYPES
Log Log
Dataset SLCT AEL IPLOM LKE LFA LogSig SHISO LenMa Spell Drain MoLFI POP HCLPars Best
cluster mine
HDFS 0.455 0.978 1* 0.998 0.875 0.800 0.978 0.546 0.998 0.851 1* 0.997 0.998 1* 1* 1
Hadoop 0.432 0.567 0.956 0.700 0.900 0.654 0.865 0.566 0.885 0.867 0.778 0.938 0.957 0.998 0.955* 0.999
Spark 0.685 0.905 0.920 0.634 0.994 0.544 0.920 0.795 0.887 0.576 0.905 0.920 0.418 0.999 1* 1
Zookeeper 0.726 0.921 0.992* 0.578 0.839 0.700 0.660 0.789 0.841 0.688 0.964 0.967 0.839 0.990 0.987 0.992
OpenStack 0.867 0.758 0.871 0.787 0.200 0.200 0.722 0.696 0.743 0.743 0.764 0.733 0.213 0.880 0.900* 0.900
BGL 0.573 0.758 0.939 0.128 0.854 0.227 0.711 0.835 0.69 0.723 0.787 0.963 0.960 0.990 0.996* 0.996
HPC 0.839 0.900 0.800 0.574 0.817 0.354 0.325 0.788 0.830 0.784 0.654 0.887 0.824 0.950 1* 1
Thunderb 0.882 0.941 0.663 0.813 0.649 0.694 0.576 0.599 0.943 0.919 0.844 0.955* 0.646 0.955* 0.955* 0.955
Mac 0.558 0.764 0.673 0.366 0.555 0.478 0.595 0.604 0.698 0.872 0.757 0.787 0.636 0.889* 0.889* 0.889
Windows 0.697 0.690 0.567 0.990 0.588 0.689 0.701 0.713 0.566 0.993 0.989 0.997 0.406 0.876 1* 1
Linux 0.297 0.673 0.672 0.519 0.279 0.169 0.701 0.629 0.701 0.612 0.605 0.690 0.284 0.701 0.894* 0.894
Android 0.882 0.682 0.712 0.909 0.616 0.548 0.585 0.798 0.880 0.504 0.919* 0.911 0.788 0.876 0.919* 0.919
HealthApp 0.331 0.568 0.872 0.592 0.549 0.235 0.397 0.531 0.174 0.684 0.639 0.780 0.440 0.772 0.900* 0.900
Apache 0.731 1* 1* 1* 1* 0.582 1* 0.709 0.999 1* 1* 0.998 1* 1* 1* 1
OpenSSH 0.521 0.538 0.802 0.426 0.501 0.373 0.619 0.426 0.925 0.431 0.554 0.788 0.500 0.998 0.999* 0.999
Proxifier 0.518 0.518 0.519 0.455 0.145 0.969* 0.517 0.951 0.508 0.517 0.527 0.527 0.013 0.900 0.930* 0.969
Average 0.624 0.760 0.809 0.614 0.647 0.513 0.679 0.702 0.835 0.735 0.782 0.864 0.640 0.923 0.960
Obviously, the runtime that HCLPars consumes is directly
TABLE IV. LOG SIZE OF SAMPLE DATASETS
proportional to the log size, and the run time of HCLPars does
Dataset Sample 1 Sample 2 Sample 3 Sample 4 Sample 5 not exceed 1 minute for the largest dataset size (1 GB).
HDFS 300 KB 1 MB 10 MB 100 MB 1 GB Compared to the other log parsers, HCLPars conducts the
BGL 400 KB 1 MB 10 MB 100 MB 500 MB fastest parsing, as it can parse large logs in a record time that
does not exceed 1 minute.
Spark 300 KB 1 MB 10 MB 100 MB 1 GB
Hadoop 600 KB 1 MB 10 MB 15 MB 20 MB VII. CONCLUSION
ZooKeeper 4 KB 8 KB 16 KB 32 MB 64 KB
This paper studied the automated parsing for large system
OpenStack 600 KB 1 MB 10 MB 15 MB 20 MB
event logs. Initially, a comprehensive study was conducted on
HPC 600 KB 1 MB 10 MB 15 MB 20 MB the existing log parsing methods and the way they work. Based
Proxifier 300 KB 600 KB 1200 KB 1800 KB 2400 KB on the result, the Automatic Log Parsing (HCLPars) method
using Spark was proposed, which consists of three steps:
TABLE V. ACCURACY OF HCLPARS ON THE SAMPLE removing parameter values according to acquired knowledge,
DATASETS OF TABLE III.
grouping of raw log messages based on similarity, and finding
Dataset Sample 1 Sample 2 Sample 3 Sample 4 Sample 5 the common parts in each group to get the log keys. Many
experiments were conducted on 16 sets of real-world data logs.
HDFS 1 1 1 1 1
The results from these experiments indicate that HCLPars is
BGL 0.996 0.996 0.996 0.996 0.995
very effective, as it works accurately and efficiently on all
Spark 1 1 1 1 1
types of data logs, regardless of their size. In the future, we
Hadoop 0.999 0.999 0.999 0.998 0.999
hope to test this method on more data logs.
ZooKeeper 0.987 0.987 0.987 0.980 0.987
OpenStack 0.900 0.900 0.900 0.900 0.900 ACKNOWLEDGEMENT
HPC 1 1 0.996 1 1 This work was funded by the University of Jeddah, Jeddah,
Proxifier 0.93 0.93 0.91 0.91 0.93 Saudi Arabia, under grant No. (UJ-20-123-DR). The authors,
therefore, acknowledge with thanks the University of Jeddah
TABLE VI. RUNNING TIME OF HCLPARS (sec) ON SAMPLE technical and financial support.
DATASETS IN TABLE III.
REFERENCES
Dataset Sample 1 Sample 2 Sample 3 Sample 4 Sample 5
HDFS 4.67 4 5 10 30 [1] J. Svacina et al., "On Vulnerability and Security Log analysis: A
Systematic Literature Review on Recent Trends," in International
BGL 15.98 20.98 34.76 40.15 60 Conference on Research in Adaptive and Convergent Systems, Gwangju,
Spark 8.403 18.7 20 44.67 50.89 Korea, Oct. 2020, pp. 175–180, https://doi.org/10.1145/3400286.
3418261.
Hadoop 7 7.98 15 30.38 50
[2] J. Sun, B. Liu, and Y. Hong, "LogBug: Generating Adversarial System
ZooKeeper 2.120 4.203 18.23 23.78 31.67
Logs in Real Time," in 29th ACM International Conference on
OpenStack 5.21 6 17.95 30 45 Information & Knowledge Management, New York, NY, USA, Oct.
HPC 4.98 5.45 34 50 52 2020, pp. 2229–2232, https://doi.org/10.1145/3340531.3412165.
Proxifier 3.09 7.56 10.45 12.33 10.94 [3] D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupathy,
"SherLog: error diagnosis by connecting clues from run-time logs," in
Fifteenth International Conference on Architectural support for
www.etasr.com Bin Lashram et al.: HCLPars: Α New Hierarchical Clustering Log Parsing Method
Engineering, Technology & Applied Science Research Vol. 13, No. 4, 2023, 11130-11138 11138
programming languages and operating systems, Pittsburgh, PA, USA, Dallas, TX, USA, Nov. 2017, pp. 1285–1298, https://doi.org/10.1145/
Mar. 2010, pp. 143–154, https://doi.org/10.1145/1736020.1736038. 3133956.3134015.
[4] X. Xu, L. Zhu, I. Weber, L. Bass, and D. Sun, "POD-Diagnosis: Error [21] M. Zaharia et al., "Resilient distributed datasets: a fault-tolerant
Diagnosis of Sporadic Operations on Cloud Applications," in 44th abstraction for in-memory cluster computing," in 9th USENIX
Annual IEEE/IFIP International Conference on Dependable Systems conference on Networked Systems Design and Implementation,
and Networks, Atlanta, GA, USA, Jun. 2014, pp. 252–263, Berkeley, CA, United States, Apr. 2012, pp. 1–14.
https://doi.org/10.1109/DSN.2014.94. [22] T.-F. Yen et al., "Beehive: large-scale log analysis for detecting
[5] A. Oliner, A. Ganapathi, and W. Xu, "Advances and challenges in log suspicious activity in enterprise networks," in 29th Annual Computer
analysis," Communications of the ACM, vol. 55, no. 2, pp. 55–61, Oct. Security Applications Conference, New Orleans, LA, USA, Dec. 2013,
2012, https://doi.org/10.1145/2076450.2076466. pp. 199–208, https://doi.org/10.1145/2523649.2523670.
[6] X. Xie, Z. Wang, X. Xiao, Y. Lu, S. Huang, and T. Li, "A Confidence- [23] Z. M. Jiang, A. E. Hassan, P. Flora, and G. Hamann, "Abstracting
Guided Evaluation for Log Parsers Inner Quality," Mobile Networks and Execution Logs to Execution Events for Enterprise Applications (Short
Applications, vol. 26, no. 4, pp. 1638–1649, Aug. 2021, Paper)," in The Eighth International Conference on Quality Software,
https://doi.org/10.1007/s11036-019-01501-6. Oxford, UK, Aug. 2008, pp. 181–186, https://doi.org/10.1109/
[7] H. Dai, "logram: efficient log paring using n-gram model," M.S. thesis, QSIC.2008.50.
Concordia University, Montreal, QC, Canada, 2020. [24] J. C. Gower and G. J. S. Ross, "Minimum Spanning Trees and Single
[8] D. Aroussi, B. Aour, and A. S. Bouaziz, "A Comparative Study of 316L Linkage Cluster Analysis," Journal of the Royal Statistical Society:
Stainless Steel and a Titanium Alloy in an Aggressive Biological Series C (Applied Statistics), vol. 18, no. 1, pp. 54–64, 1969,
Medium," Engineering, Technology & Applied Science Research, vol. 9, https://doi.org/10.2307/2346439.
no. 6, pp. 5093–5098, Dec. 2019, https://doi.org/10.48084/etasr.3208. [25] E. F. Krause, "Taxicab Geometry," The Mathematics Teacher, vol. 66,
[9] M. V. Japitana and M. E. C. Burce, "A Satellite-based Remote Sensing no. 8, pp. 695–706, Dec. 1973, https://doi.org/10.5951/MT.66.8.0695.
Technique for Surface Water Quality Estimation," Engineering, [26] "Apache SparkTM - Unified Engine for large-scale data analytics,"
Technology & Applied Science Research, vol. 9, no. 2, pp. 3965–3970, Apache Spark. https://spark.apache.org/.
Apr. 2019, https://doi.org/10.48084/etasr.2664. [27] M. A. Biberci and M. B. Celik, "Dynamic Modeling and Simulation of a
[10] J. Zhu et al., "Tools and Benchmarks for Automated Log Parsing," in PEM Fuel Cell (PEMFC) during an Automotive Vehicle’s Driving
41st International Conference on Software Engineering: Software Cycle," Engineering, Technology & Applied Science Research, vol. 10,
Engineering in Practice, Montreal, QC, Canada, Dec. 2019, pp. 121– no. 3, pp. 5796–5802, Jun. 2020, https://doi.org/10.48084/etasr.3352.
130, https://doi.org/10.1109/ICSE-SEIP.2019.00021. [28] S. He, J. Zhu, P. He, and M. R. Lyu, "Loghub: A Large Collection of
[11] C. Gormley and Z. Tong, Elasticsearch: The Definitive Guide: A System Log Datasets towards Automated Log Analytics." arXiv, Aug.
Distributed Real-Time Search and Analytics Engine. Sebastopol, CA, 14, 2020, https://doi.org/10.48550/arXiv.2008.06448.
USA: O’Reilly Media, 2015. [29] T.-K. Hu, T. Chen, H. Wang, and Z. Wang, "Triple Wins: Boosting
[12] M. Nagappan, K. Wu, and M. A. Vouk, "Efficiently Extracting Accuracy, Robustness and Efficiency Together by Enabling Input-
Operational Profiles from Execution Logs Using Suffix Arrays," in 20th Adaptive Inference." arXiv, Feb. 24, 2020, https://doi.org/
International Symposium on Software Reliability Engineering, Mysuru, 10.48550/arXiv.2002.10025.
India, Nov. 2009, pp. 41–50, https://doi.org/10.1109/ISSRE.2009.23. [30] W. Xu, "System Problem Detection by Mining Console Logs," Ph.D.
[13] W. Xu, L. Huang, A. Fox, D. Patterson, and M. I. Jordan, "Detecting dissertation, University of California, Berkeley, CA, USA, 2010.
large-scale system problems by mining console logs," in 22nd
Symposium on Operating Systems Principles, Big Sky, MT, USA, Oct.
2009, pp. 117–132, https://doi.org/10.1145/1629575.1629587.
[14] R. Vaarandi, "A data clustering algorithm for mining patterns from event
logs," in 3rd IEEE Workshop on IP Operations & Management (IPOM
2003) (IEEE Cat. No.03EX764), Kansas City, MO, USA, Oct. 2003, pp.
119–126, https://doi.org/10.1109/IPOM.2003.1251233.
[15] A. A. O. Makanju, A. N. Zincir-Heywood, and E. E. Milios, "Clustering
event logs using iterative partitioning," in 15th ACM SIGKDD
international conference on Knowledge discovery and data mining,
Paris, France, Jul. 2009, pp. 1255–1264, https://doi.org/10.1145/
1557019.1557154.
[16] A. Makanju, A. N. Zincir-Heywood, and E. E. Milios, "A Lightweight
Algorithm for Message Type Extraction in System Application Logs,"
IEEE Transactions on Knowledge and Data Engineering, vol. 24, no.
11, pp. 1921–1936, Aug. 2012, https://doi.org/10.1109/TKDE.2011.138.
[17] P. He, J. Zhu, S. He, J. Li, and M. R. Lyu, "Towards Automated Log
Parsing for Large-Scale Log Data Analysis," IEEE Transactions on
Dependable and Secure Computing, vol. 15, no. 6, pp. 931–944, Aug.
2018, https://doi.org/10.1109/TDSC.2017.2762673.
[18] Y. Ohno, S. Morishima, and H. Matsutani, "Accelerating Spark RDD
Operations with Local and Remote GPU Devices," in 22nd International
Conference on Parallel and Distributed Systems, Wuhan, China, Dec.
2016, pp. 791–799, https://doi.org/10.1109/ICPADS.2016.0108.
[19] M. Cinque, D. Cotroneo, and A. Pecchia, "Event Logs for the Analysis
of Software Failures: A Rule-Based Approach," IEEE Transactions on
Software Engineering, vol. 39, no. 6, pp. 806–821, Jun. 2013,
https://doi.org/10.1109/TSE.2012.67.
[20] M. Du, F. Li, G. Zheng, and V. Srikumar, "DeepLog: Anomaly
Detection and Diagnosis from System Logs through Deep Learning," in
ACM SIGSAC Conference on Computer and Communications Security,
www.etasr.com Bin Lashram et al.: HCLPars: Α New Hierarchical Clustering Log Parsing Method