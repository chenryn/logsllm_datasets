么解决方案呢，我们来看一下。
其实我们了解一个事物的时候更需要知道边界，那么GTID有什么限制呢，这些限制有什
式设计。
Twitter 的 ID 生成算法 snowflake，所以换一个角度来理解GTID，其实是一种优雅的分布
是具有相应的趋势规律，在必要的时候方便进行顺序提取，行业内适用较多的是基于
SELECT.
”这种语句其实目标明确，复制表结构，复制数据，insert的部分好解决，难点就在于create
create table xxx as select 的语句，其实会被拆分为两部分：create 语句和 insert 语句,
一个是 create table xxx as select 的模式；另外一个是临时表相关的，我们就来简单说
在开始介绍GTID之前，我们换一种思路，通常我们都会说一种技术和特性能干什么
注：其中参数log_slave_updates 在 5.7版本中不是强制选项，其中最重要的原因在于
如何开启 GTID 呢，我们先来说下基础的内容，然后逐步深入，通常来说，需要在
这个ID 因为是全局唯一，所以在分布式环境中很容易识别，因为趋势递增，所以ID
create table xxx as select 的方式可以拆分成两部分，如下。
除了规规矩矩的拼出建表语句之外，还有一个方法是MySQL 特有的用法 like。
（1）create语句限制和解法
如果说GTID 在5.6版本试水，
2.GTID的限制和解决方案
● enforce_gtid_consistency=ON
● log_slave_updates=
● binlog_format=row
●log-bin=mysql-bin
1．如何开启GTID
·趋势递增
create table xxxx like data_mgr;
gtid_mode=ON
，在5.7版本已经发展完善，但是还是有一些场景是受
---
## Page 215
个GTID 的概览信息，分别从变量视图、表和文件视图、操作视图等三个维度来看待GTID。
以不会同步到 Slave，但是在删除临时表的时候会产生GTID 会导致，主从中断。
在 autocommit=1的情况下可以创建临时表，Master 端创建临时表不产生GTID 信息，所
我们来用下面的表格5-2来阐述常见的这几个变量。
我们分别从每个视图来简单说一下。
前面聊了不少 GTID 的内容，我们来看看 GTID 的一个体系内容，如下图 5-10 是我梳理的一
（1）变量视图
3．从三个视角看待 GTID
使用 GTID 复制模式时，不支持 create temporary table 和 drop temporary table。但是
（2）临时表的限制和建议
操作视图
Show global variables like
Showmaster status
nysql.gtid_executed
%p！1%,
gtid_purged
ecuted_Gtid_Set
binlog
Master
图5-10
Changemastertoxxxxx,master_auto_position
resetmaster
mysql.gtid_execut
relaylog
set global gtid_purged='
Executed_Gtid_Set
Retrieved_Gtid_Se
nd a
Slave
第5章MySQL运维管理实践丨193
binlog
---
## Page 216
194
”MySQL DBA工作笔记：数据库管理、架构优化与运维开发
如下的方式：
方式。如果是修复主从复制中的异常，如果是在确认错误可以跳过的情况下，可以使用
了取舍。这些命令主要是在搭建主从复制关系时所用，基本都是一次开启，长期生效的
executed 进行压缩，默认值为1000。
会越来越多，如何精简管理呢，MySQL 引入了一个新的线程和参数来进行管理。
是一个内存值，而这个问题在5.7中通过表 mysql.gtid_executed 把这个值持久化来得以解
为当 Slave 重启后，无法得知当前 Slave 已经运行到的 GTID 位置，由于变量 gtid_executed
库应用 Relay Log，从库在执行的时候也是用同样的GTID 写 binlog。
然后再写事务的 Binlog，主从同步时GTID_Event 和事务的 Binlog 都会传递到从库，在从
时候，会先写一个特殊的 Binlog Event，类型为 GTID_Event，指定下一个事务的 GTID,
决，
然后说一下表 mysql.gtid_executed，在 5.6 版本中必须要设置 log_slave_updates，因
线程为：thread/sql/compress_gtid_table,可以查询 performance_schema.threads 来查看。
此外，引入该解决方案之后又带来了新的问题，那就是在 gtid_executed 里面的数据
，也就意味着 log_slave_updates 是一个可选项。
●commit；注入一个空事物；
·begin;
· set gtid_next=xxxxxx:N'；指定下一个事务执行的版本，即想要跳过的 GTID;
● stop slave;
对于操作，我们列举了较为简单常规的操作方式，为了避免歧义，我对一些命令做
（3）操作视图
参数为 gtid_executed_compression_period，主要用于控制每执行多少个事务，对表 gtid
先来说下文件层面的关联，根据 MySQL 的复制原理，MySQL Server 在写binlog 的
当然也有一些略微复杂的场景，我们来看一个案例。
●start slave；开始同步。
.S
（2）表和文件视图
set gtid_next='AUTOMATIC'自动的寻找 GTID 事务;
Retrieved_Gtid_Set
Executed_Gtid_Set
gtid_purged
GTID变量
gtid_next
扫描所得的GTID
GTID三种取值方式
gtid_executed的子集
Slave 会扫描最后一
如何产生下一个GTID，通常有AUTOMATIC、ANONYMOUS 和显示
gtid purged 用于记录已经被清除了的binlog 事务集合，它是
在当前实例上执行过的 GTID 集合
表5-2
一个 relay log 文件，Retrieved_Gtid_Set 显示的是当前
描
述
---
## Page 217
5-11是使用偏移量复制的状态。
困难重重。我们来理一下这个问题，看看这种情况下怎么修复。
ER_LOG_POS=428492286,master_auto_position=0;
来重接复制，这个时候复制就正常了。
没做过 purge binary logs 操作，相关的日志都存在，为什么抛出这个错误呢。
slave
用了reset slave all的方式，然后重新配置复制关系。
操作是可以弥补的。我们可以暂且忽略这一条。
@@GLOBAL.GTID_MODE= ON.'
为了能够快速复选问题，并且进行问题跟踪，我把这个数据库做了镜像备份，下图
经过测试，发现有一个折中方案，那就是先临时关闭 GTID 协议，使用偏移量的方式
，可以从日志明显的看出来，这是MHA的心跳检测机制，对于数据完整性来说，这个
对于这个问题也着实下了功夫，发现还是对于GTID 的理解不够深入导致解决的时候
从这个错误信息可以看出，应该是日志的信息出了问题，但是查看主库中，最近也
Got fatal error 1236 from master when reading data from binary log: 'The
本来以为这是一个常规的修复，没想到复制状态出现了问题，为了尽快修复，我使
于是使用如下的方法来跳过这个错误：
NOT
change master to master_auto_position=l;
一旦想重新启用GTID协议，就又开始抛错了。
PASSWORD=
没想到抛出了如下的错误。
start slave;
stop slave;
show slave status的报错信息如下：
前几天碰到一个MySQL服务器掉电，重新启动之后，主从复制出现了异常。
案例5-8：修复GTID复制失败的分析
session gtid_next='xxxxxxx';
nfra
MASTER
sing
mast
PORT=
=4306，
cinyint
NOT
AUTO
NULL primary key,
Query:
第5章MySQL运维管理实践丨195
requires
'CREATE TABLE
out
`val
the
---
## Page 218
196丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
之间用冒号分隔，而这个时候查看 mysql.gtid_executed 的内容如下图5-12 所示。
从库端的 Executed_GTID 状态如下图 5-14 所示。
查看 GTID_purge 变量的内容如下图 5-13 所示。
从 GTID 的格式可以了解到，同一 source_id 的事务序号有多个范围区间，各组范围
zExecuted Gtid_Set: eb99e9de-c2cb-11e8-81e4-005056b7dfa4:1-4613465:
查看 GTID 的信息有些奇怪，这个内容代表什么意思呢。
an
set(e.eo
0127
sec
.0.0.1:mysql 18:28:19>>select
图5-13
图5-12
图5-11
---
## Page 219
6300007。
留了一个较大的范围区间，如图5-15所示。
master_auto_position=1时，还是会尝试去应用旧的事务数据，也就难怪会抛出错误了。
是在从库端的GTID_Set中却还是一个较大范围的区间。按照这种情况，开启
我们在主库端做下验证，看看主库端的 Executed_GTID_Set 是什么情况，是否也是保
>>reset master;
因为目前的GTID 配置有些不一致，所以我们需要重置一下GTID。
这个时候Executed_GTID_Set是6300028。如图5-16所示。
>>stopslave;
首先，停止从库的复制进程。
从现在起，我们就在从库端操作了。
从以上的结果可以看出，主库端是很清晰的，目前的 GTID_Set值已经超过了
通过这个内容我们可以看出，目前的 Executed_GTID_Set 已经是大于 6299932了，但
图5-16
图5-15
图5-14
show
master status\G
第5章MySQL运维管理实践丨197
---
## Page 220
198丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
6300028'
启动从库。
重新建立复制，使用 master_auto_position=1 来开启 GTID 协议复制。
>>reset slave all;
重置从库的复制配置。
使用 show master status 可以看到，这个配置是生效了，如图 5-19所示。
Query OK, 0 rows affected (0.00 sec)
接下来我们来配置下复制关系。
这样从库端的 GTID 设置就是和主库一样的配置方式了，如图 5-18 所示。
>>SET
我们初始化的时候，选择这个临界点GTID 值：6300028。
Empty set (0.00 sec)
>> select *from gtid_executed;
这个时候查看mysql.gtid_executed 是没有数据的。
重置结果如图 5-17所示。
@@GL0BAL.GTID_PURGED='eb99e9de-c2cb-11e8-81e4-005056b7dfa4:1-
MASTER
Do_
File:
7.0.0.1:m
PORT=4306
图5-19
图5-18
图5-17
,MASTER_AUTO_POSITION=1;
5056b7dfa4:1-6
master
tus
---
## Page 221
配置复制关系时，语句不带 relay_log_file 和 relay_log_pos 选项都会导致 relay log 被清理，所以
移量的复制方式，在主从切换的时候很容易出问题。
致要应用的 GTID 事务已经在主库被清理。
式是对从库开启只读模式，如果碰到数据修复的场景，我们可以使用 sql_log)bin=0 来临时修复。
一组相对完整的语句为：
下的一些不规范的GTID 使用场景，供大家参考。
模拟测试中基本都碰到了。
同时，在一些特殊的数据修复场景中，我们使用 change masterto xx,master_auto_position=O;
change master to master_user=[Master_user] ,master_port=[Master_port],
the master has purged binary logs containing GTIDs that the slave requires
GTID 复制错误中很常见的就属这个错误了：
如果在从库端写入了数据，GTID_Set 就包含两个源，在使用中可能会混淆，比较规范的方
GTID是一种很不错的复制解决方案，但是在使用中还是碰到一些问题，我梳理了如
如果我们开启了GTID，还是建议使用GTID 协议的数据复制方式，如果依旧使用偏
（3）复制模式为MASTER_AUTO_POSITION=0
如果主库端对于binary log 的保留时间过短，同时主从网络链路存在问题，都可能导
（2）Purge binlog
（1）从库可写
4.一些不规范的GTID使用场景
通过这个过程也着实对于GTID 有了更进一步地了解，对于一些异常情况的测试也在
这个时候查看从库的状态，就达到了预期的效果了，如图 5-20所示。
mysql--dba_admin@127.0.0.1:mysql 18:35:40>>start slave;
图5-20
第5章MySQL运维管理实践丨199
---
## Page 222
200丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
个问题，为什么 SBM（Seconds_behind_master）仅供参考呢，我们来聊一下延迟的一些问题。
的选项，但是那个可不能当做严格意义上的主从延迟标准，这句话该如何理解呢，或者可以换一
延迟情况做一个全面的测试。
倦努力的方向，本小节我们来讨论下检测主从延迟的工具和方法，并对基于并行复制的
5.2.4
对主库做了reset master 操作。
反复变化说明管理是混乱的，
作的频率是很低的，不排除有一些复杂的bug；二来是对于配置GTID应该是统一的规划，
如何查看延迟呢，有的同学可能会说，我们有 show slave status 里面的 Seconds_behind_master
1．为什么 Seconds_behind_master的值不够准确
基于MySQL的复制架构，延迟问题是不可避免的，如何降低延迟是我们需要孜孜不
mysqldump 会默认开启 set-gtid-purged 选项，在导出的 dump 文件中会包含 set
（5）mysqldump导出导入可能导致从库混乱
master_host=[Master_Host],master_port=[Master_port],master_log_file=[Re
首先我们来看一个 MySQL复制的流程图，如下图5-21所示。
官方明确说GTID 是可以在线启停的，但是不建议这样做，一来是维稳，因为这种操
（4）在线启停GTID
如何看待主从延迟
Log
一般建议在参数文件中配置后启动数据库。
图5-21
I0_thread
X
Log
Relay
Pos
log写
binlc
file=
---
## Page 223
时间其实是属于额外的资源消耗导致。
实得到的就是比较尴尬的假象数据。
的 3600 秒之后，Slave 的状态 Slave_IO_Running 的值会为变为 No，而在这个过程中，其
dif_with_master来做这个校准的，所以这个问题可以忽略。
来计算的，很明显这样的结果是不对的，不过从代码中我们可以看到是有 mi->clock
这种差异感受是最直接的。
感觉没有延迟，但是实际上因为网络条件不佳，已经产生了很大的延迟，对于应用来说，
端来看，sql_thread能够很快的应用日志数据，SBM值却是0，这样就会造成一个幻觉，
timestamp（简写为 ts）进行比较，而得到的这个时间差值。
就存在诸多的可能性，比如上面画叉的一些环节。
用产生 binlog 为止，这个过程是相对完整的数据同步过程。所以如果要产生延迟，那么
（4）如果从库存在大量的查询导致处理性能低下，也会造成延迟时间，而这个延迟
（2）如果 Master 和 Slave 端的时间不一致，那么推送过来的延迟是根据日志中的 event 时间
（3）当从库长时间为收到主库传来的数据，等待时间超过参数 slave_net_timeout 默认
SBM 的逻辑是对 sql_thread 执行的 event 的 timestamp 和 io_thread 复制好的 event 的
（5）如果一个数据库在1分钟内产生了大量的 binlog，
（1）如果Master和 Slave 端的网路情况不好，即IO_thread的同步是瓶颈，而从 Slave
看起来貌似正常，但是显然有一些问题，比如：
源码中我们可以得到一些更加明确清晰的信息，如下图5-22 的源码文件 sql/rpl_slave.cc中。
（3）mi->clock_diff_with_master是主从的时间差异值，可以理解是一个校准值。
(2）mi->rlilast_master_timestamp 是当前从库正在执行 SQL的event 时间戳。
(1）time(0)是从库当前系统时间戳，是系统函数。