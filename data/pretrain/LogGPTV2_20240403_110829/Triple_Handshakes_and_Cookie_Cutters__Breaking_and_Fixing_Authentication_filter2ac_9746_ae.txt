We propose several countermeasures at the TLS level to prevent man-in-the-middle (MITM) attacks at their source, with minimal or no changes required to application-level mechanisms. These proposals emerged from discussions with various implementors and protocol experts, and we are cautiously optimistic about their adoption. Given that new protocol extensions and features can take a long time to propagate, we also discuss short-term mitigations for various applications.

### VII-A: A New Channel Binding

In Sections V-C and VI-C, we found that neither the session ID, the master secret, nor the `tls-unique` channel binding served as unique identifiers for a TLS session. Therefore, we propose a new TLS channel binding called `tls-session-hash`, which captures all negotiated parameters for a session.

**Definition of `tls-session-hash`:**
For a given TLS session, `tls-session-hash` is defined as the hash of the handshake messages up to and including the client key exchange message in the original handshake that created the session. The hash function used depends on the protocol version:
- For TLS 1.2, it is the hash function specified in the ciphersuite.
- For SSL3 and earlier versions of TLS, it is the concatenation of MD5 and SHA1 hashes.

We require that TLS implementations compute and store `tls-session-hash` within the session structure and expose it to other implementations.

**Rationale:**
- We only hash messages up to the client key exchange because, at this point, the negotiation is complete, and all inputs to the master secret are available. Most TLS implementations will create (but not cache) the session structure at this stage.
- The hashed log includes nonces, the ciphersuite, key exchange messages, client and server certificates, and any identities passed in protocol extensions.
- Our definition of the hash functions matches those used for the finished messages in SSL3 and TLS 1.0â€“1.2. Thus, implementations already keep a running hash of the log, and we simply reuse its value.
- Implementing this channel binding increases the cached session size by a single hash, with no performance impact.

**Reasons for a New Hash Value:**
1. **Compatibility with Stateless Servers:** Stateless servers must send the session ticket before the server finished message, so the server verify data is not yet available.
2. **Stronger Collision Resistance:** The session hash is longer than the verify data, offering stronger collision resistance. This is particularly important for long-lived sessions that are frequently resumed.
3. **Suitability for Extensions:** Reusing the input to the client verify data would not offer clear advantages, and our current definition is more suitable for our proposed extensions.

**Recommended Usage:**
- Protocols such as SCRAM should use `tls-session-hash` instead of `tls-unique` for channel binding.
- To fix Channel ID, the signature on abbreviated handshakes should include the `tls-session-hash` of the resumed session.
- For deriving application keys from the master secret, like in PEAP, we recommend adding `tls-session-hash` to the PRF.

### VII-B: Context Binding for Master Secrets

We propose a new extension for all versions of TLS and DTLS that includes negotiated session parameters in the master secret computation, following the principle of context binding. This ensures that computed keys are usage-specific.

**Extension Details:**
- The extension is signaled in the client and server hello messages.
- If both peers support it, the handshake proceeds as usual, except that the master secret is computed as:
  \[
  ms = prf(pms, "extended master secret", tls-session-hash)
  \]
- Including `tls-session-hash` ensures that the resulting master secret depends on all negotiated session parameters, implicitly authenticating these parameters and ensuring different sessions have different master secrets.

**Benefits:**
- This solution protects all TLS handshake modes (including RSA and DHE) and protocol versions.
- It allows application-level protocols like PEAP to safely use the TLS master secret without any changes.
- The idea of including additional materials in the master secret computation is not new, but our proposal merits more detailed analysis, which we leave for future work.

### VII-C: Secure Resumption Indication

We propose a mandatory extension for all versions of TLS and DTLS that complements the renegotiation indication extension by also protecting session resumption across multiple connections.

**Extension Details:**
- The extension is signaled in the client and server hello messages when proposing and accepting resumption, respectively.
- It contains the `tls-session-hash` value of the session being resumed.
- Peers supporting the extension must check that this value matches the one recorded in their locally stored session before proceeding with the abbreviated handshake.
- The exchanged session hashes are authenticated by the master secret in the finished messages of the resumption, cryptographically binding the new connection to the resumed session.
- If one of the peers does not support the extension, the other should refuse session resumption and may instead offer a full handshake.

### VII-D: Summary of Mitigations

We implemented the session hash channel binding and our two extensions as patches to OpenSSL and miTLS, and tested their interoperability for all versions of TLS and DTLS. Our patches fit well into the code structure and have no visible effect on performance.

**Conservative Design Principles:**
1. Do not allow the peer to renegotiate its certificate.
2. Do not use `tls-unique` after session resumption.
3. To derive application keys from the TLS master secret, hash the session's certificates into the derivation.
4. Buffer application data until its semantics are unambiguous; discard it if the TLS connection is torn down.
5. Do not share secret cookies between HTTP and HTTPS connections, or between different origins.

### VIII: Verified Application Security Over TLS

#### VIII-A: miHTTPS: A Basic HTTPS Client

To validate our application-level recommendations and demonstrate transparent application-level security over TLS, we built and verified an exemplary HTTPS library, `miHTTPS`. Its client command-line interface is as follows:

```sh
$ mihttps --help
Usage: mihttps [options] REQUEST
--host=NAME     https server host name
--channel=ID    channel identifier
--client=NAME   authenticated client name
```

**Goals:**
- Provide a basic API with strong implicit security.
- Offer a flexible implementation that supports typical HTTP (cookies) and TLS (multiple connections, renegotiation, resumption, late client authentication) mechanisms.

**Implementation:**
- `miHTTPS` consists of 600 lines of F# code built on top of the miTLS verified reference implementation.
- It automatically processes HTTP 1.0 headers, cookies, etc., and interoperates with existing, unmodified web servers.
- We tested it with authenticated webmail access to Roundcube.

**Secure Channels:**
- Our main communication abstraction is a long-term, stateful channel between a client and a host.
- Each client can create multiple channels and use them to request documents from URLs at different hosts.
- Each channel supports parallel requests, as required when loading a web page with numerous resources.
- Requests and responses may get lost or delayed, and there is no explicit acknowledgment of peer reception. Responses confirm requests, and cookies attached to requests confirm prior responses.

**Simplifications:**
- Each channel is associated with a unique host name, treating each host as a separate principal.
- We do not deal with related sub-domains, redirects, or wildcards in certificate names.
- We do not support mixtures of HTTP and HTTPS, avoiding complications with cookies discussed in Sections II and III.

**Client and Server Credentials:**
- We rely on the public-key infrastructure for X.509 certificates and require that client and host names exactly match their certificates' common names.
- Credentials are associated with the whole channel, once and for all. The host name cannot be changed, preventing the renegotiation attack described in Section VI-A.

**Local State and Cookies:**
- Channels maintain local, private state, including open connections, live sessions, cookies, and associated names.
- Channels buffer request and response fragments to deliver only whole HTTPS messages to the application, foiling truncation attacks.

**Security Goals (Informal):**
- We focus on application-level channel integrity. With overwhelming probability, the following properties hold:
  1. **Request Integrity:** When an honest server accepts a request and attributes it to a channel bound to honest server and client names, the client has indeed sent the request on that channel, with matching principal names.
  2. **Response Integrity:** When an honest client accepts a document in reply to a request to an honest server, that server has indeed sent the document in response to this request.
  3. **Tracking:** When an honest server accepts a request echoing the cookie of a response on a channel with an honest client, the client indeed received this response.

**miHTTPS: Secure Typed Interface:**
- We follow the modular type-based cryptographic verification method used for the miTLS API.
- We specify computational security for various constructions and protocols using precise typed interfaces.
- The verification effort for `miHTTPS` consists of specifying its typed API and letting F7 typecheck its 600 lines of code, using the lower-level, verified, precisely-typed API of miTLS.

**Figure 4: miHTTPS Interface (Excerpt)**
- Defines types for names, channels, and predicates for honest clients and servers.
- The API has three main modules: `Data`, `Certificate`, and `Server`.
- Functions for creating channels, sending requests, and polling responses have precise value-dependent types specifying pre- and post-conditions.

### IX: Impact and Limitations

We have presented a series of attacks on authentication mechanisms built within and over TLS. Table II summarizes these new attacks and compares them to previous attacks in terms of their impact and limitations. The table lists preconditions for each attack, including what the attacker must be capable of, how the application (mis-)uses TLS, and whether previous mitigations block the attack.

**Example:**
- The second row indicates that the cookie cutter attack requires a network attacker and a client application that processes truncated HTTP headers over TLS, and a server application that allows chosen plaintexts before the Set-Cookie header.
- Its advantage over previous TLS truncation attacks is a higher impact, enabling full HTTPS session hijacking (by stealing session cookies) between mainstream web browsers and popular websites such as Google and Facebook.

**Table II: Summary of Attacks: Novelty, Impact, and Preconditions**

| Attack Type | Precondition | Impact | Previous Mitigations |
|-------------|--------------|--------|----------------------|
| Cookie Cutter | Network attacker, client processing truncated headers, server allowing chosen plaintexts | Full HTTPS session hijacking | Not blocked |
| ... | ... | ... | ... |

This table provides a comprehensive overview of the attacks, their preconditions, and the effectiveness of existing mitigations.