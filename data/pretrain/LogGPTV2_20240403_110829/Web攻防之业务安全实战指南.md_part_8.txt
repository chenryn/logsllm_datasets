### 7.1 SQL注入测试

#### 7.1.1 测试原理和方法
在参数后添加单引号 (`'`) 或 `%27`（由于SQL语句中的单引号成对出现，添加单引号会导致SQL语句错误，无法被SQL解释器正常解析。访问报错说明SQL语句已执行），即可构造SQL注入语句。例如，如图7-9所示。
**图7-9 添加单引号返回包情况**

步骤二：添加 `’or‘1’=’1`，查看页面响应，如图7-10所示。
**图7-10 添加’or‘1’=’1返回包情况**

通过这种方式，不仅查询出特定用户的信息（如10100095），还可以查询到所有用户信息。使用sqlmap工具可以进一步验证漏洞，如图7-11所示。
**图7-11 sqlmap注入成功**

以上两种注入方式都是基于报错信息的手工测试和工具注入。此外，还有基于时间、盲注、布尔型等的注入方法，在此不再一一举例。

#### 7.1.2 测试过程
1. **添加单引号**
   - 在参数后添加单引号或 `%27`，观察是否出现SQL错误。
   - 如图7-9所示，展示添加单引号后的返回包情况。

2. **添加 `’or‘1’=’1`**
   - 在参数后添加 `’or‘1’=’1`，查看页面响应。
   - 如图7-10所示，展示添加 `’or‘1’=’1` 后的返回包情况。

3. **使用sqlmap验证**
   - 使用sqlmap工具进一步验证漏洞。
   - 如图7-11所示，展示sqlmap注入成功的界面。

#### 7.1.3 修复建议
1. **输入验证与过滤**
   - 对每个客户端提交的页面、服务器端脚本生成的页面、表单提交或链接请求中的所有变量进行检查。
   - 过滤特殊字符，包括：
     - SQL关键词：如 `and`、`or`、`select`、`declare`、`update`、`xp_cmdshell` 等。
     - 特殊符号：`'`、`"`、`;` 等。

2. **最小权限原则**
   - Web应用系统接入数据库服务器时，应使用非系统管理员用户，并遵循最小权限原则。

### 7.2 XSS测试

#### 7.2.1 测试原理和方法
跨站脚本漏洞是Web应用程序在将数据输出到网页时存在问题，导致攻击者可以插入恶意JavaScript或HTML代码，从而窃取或操纵用户会话和Cookie，模仿合法用户身份进行操作。

XSS主要分为三种类型：
- **存储型XSS**：恶意脚本直接写入服务端数据库。
- **反射型XSS**：恶意脚本由服务端解析后在浏览器生成。
- **DOM型XSS**：恶意脚本通过修改DOM结构实现。

**反射型XSS测试方法**：在URL或输入框内插入跨站脚本，观察是否弹出对话框。

**存储型XSS测试方法**：在网站的留言板、投诉、建议等输入框内输入跨站脚本，查看是否能插入数据库并在查看留言时执行脚本。

#### 7.2.2 测试过程
1. **反射型XSS**
   - 以高级搜索模块为例，抓包并在工单编号输入处添加测试代码，如图7-14所示。
   - 成功弹出对话框，证明XSS漏洞存在，如图7-15所示。

2. **存储型XSS**
   - 以商调函模块为例，新建工单并在功能说明处添加XSS payload，数据存储于数据库，触发存储型XSS，如图7-17所示。

#### 7.2.3 修复建议
1. **输入验证与过滤**
   - 对所有变量值进行检查，过滤特殊字符，包括：
     - HTML标签：`<`、`"`、`'`、`%` 等及其Unicode值。
     - 客户端脚本关键字：如 `JavaScript`、`script` 等。

2. **防止回显**
   - 不应在搜索结果页面中回显搜索内容。

3. **设置出错页面**
   - 防止Web服务器发生内部错误时返回错误信息给客户端。

4. **双因素认证**
   - 使用双因素客户身份验证机制。

5. **脚本验证**
   - 在使用脚本之前，验证其来源，不要完全信任他人提供的脚本。

### 7.3 命令执行测试

#### 7.3.1 测试原理和方法
当应用需要调用外部程序处理内容时，可能会使用执行系统命令的函数（如PHP中的 `system`、`exec`、`shell_exec`）。如果用户可以控制这些函数的参数，就可能注入恶意命令，造成命令执行攻击。

#### 7.3.2 测试过程
1. **发现疑似漏洞**
   - 攻击者发现疑似存在命令执行漏洞的链接，添加命令执行payload确认漏洞，如图7-18所示。

2. **具体示例**
   - 以网络安全审计系统为例，未对 `register_key` 参数进行过滤，抓包并测试，成功执行命令，如图7-19和图7-20所示。
   - 以DVWA为例，提供免费ping命令，抓包并测试，成功执行系统命令，如图7-22和图7-23所示。

#### 7.3.3 修复建议
1. **减少执行命令函数的使用**
   - 尽量少用或禁用执行命令的函数。

2. **参数过滤**
   - 对参数进行过滤，对敏感字符进行转义。

3. **指定函数**
   - 确保使用的函数是指定的函数之一。

### 第8章 回退模块测试

#### 8.1 回退测试

#### 8.1.1 测试原理和方法
许多Web业务在密码修改成功后或订单付款成功后，返回上一步重新操作时，如果能够重复操作且更改结果，则存在业务回退漏洞。

#### 8.1.2 测试过程
1. **按正常流程更改业务信息**
   - 密码修改成功后，尝试回退到上一步再次修改密码，如图8-2所示。

2. **回退测试**
   - 如果可以回退并再次修改密码，如图8-3所示。

#### 8.1.3 修复建议
1. **请求验证**
   - 判断请求是否来自上一步骤的业务，如果不是则返回错误提示或页面失效。

### 第9章 验证码机制测试

#### 9.1 验证码暴力破解测试

#### 9.1.1 测试原理和方法
验证码机制用于防止暴力破解、DDoS攻击等。常见的验证码有图片验证码、邮件验证码、短信验证码、滑动验证码和语音验证码。

#### 9.1.2 测试过程
1. **填写任意手机号码注册**
   - 服务器发送短信验证码，攻击者通过暴力破解尝试所有可能的验证码，如图9-1所示。

2. **暴力破解**
   - 抓取登录数据包，对 `code` 参数进行暴力破解，如图9-3所示。

3. **成功登录**
   - 通过返回值判断正确的验证码，使用该验证码成功登录，如图9-5所示。

#### 9.1.3 修复建议
1. **设置验证码失效时间**
   - 建议为180秒。

2. **限制失败尝试次数**
   - 5分钟内连续失败5次即锁定账号15分钟。

#### 9.2 验证码重复使用测试

#### 9.2.1 测试原理和方法
如果验证码认证成功后没有及时清空session，将会导致验证码可重复使用。测试时可以抓取携带验证码的数据包重复提交，查看是否成功。

#### 9.2.2 测试过程
1. **填写投诉建议**
   - 输入要投诉的内容及验证码，抓取提交的数据包，重复提交，查看是否成功提交多个投诉信息，如图9-6所示。

2. **具体示例**
   - 以某App手机客户端应用程序为例，如图9-7所示。

#### 9.2.3 修复建议
1. **及时清空session**
   - 验证码认证成功后，及时清空session。