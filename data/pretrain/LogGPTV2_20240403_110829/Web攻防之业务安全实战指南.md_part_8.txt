在参数后加单引号或者%27（由于 SQL 语句单引号是成对出现的，添加单引号则
SQL语句是错误的语句，不能被SQL解释器正常解析。访问报错说明SQL语句执行了），
即可在参数后构造SQL语句，如图7-9所示。
图7-9 添加单引号返回包情况
步骤二：添加’or‘1’=’1，查看页面，如图7-10所示。
图7-10 添加’or‘1’=’1返回包情况
不仅查询出10100095的信息，所有信息都可以查询到，用sqlmap可以进一步验证漏
洞，如图7-11所示。
图7-11 sqlmap注入成功
以上两种注入都是基于报错信息手工测试和工具注入，还有基于时间、盲注、布尔型
等的注入，在这就不一一举例了。
7.1.3 修复建议
每个提交信息的客户端页面、通过服务器端脚本（JSP、ASP、ASPX、PHP等）生成
的客户端页面、提交的表单（FORM）或发出的链接请求中包含的所有变量，必须对变量
的值进行检查，过滤其中包含的特殊字符，或对字符进行转义处理。特殊字符如下。
· SQL语句关键词：如and、or、select、declare、update、xp_cmdshell；
· SQL语句特殊符号：’、”、；等。
此外，Web 应用系统接入数据库服务器使用的用户不应为系统管理员，用户角色应
遵循最小权限原则。
7.2 XSS测试
7.2.1 测试原理和方法
跨站脚本漏洞是Web应用程序在将数据输出到网页的时候存在问题，导致恶意攻击者
可以往Web页面里插入恶意JavaScript、HTML代码，并将构造的恶意数据显示在页面的漏
洞中。攻击者一般利用此漏洞窃取或操纵客户会话和 Cookie，用于模仿合法用户，从而
使攻击者以该用户身份查看或变更用户记录以及执行事务。
跨站一般情况下主要分为存储型跨站、反射型跨站、DOM型跨站。存储型跨站脚本
可直接写入服务端数据库，而反射型不写入数据库，由服务端解析后在浏览器生成一段类
似的脚本。
反射型跨站测试方法主要是在URL或输入框内插入一段跨站脚本，观察是否能弹出对
话框。
存储型跨站测试方法主要是在网站的留言板、投诉、建议等输入框内输入一段跨站脚
本，看是否能插入数据库，插入成功的表现为当网站管理人员查看该留言时，会执行跨站
语句（如弹出对话框），或者当普通用户再次访问该页面时，会执行跨站语句，如弹出对
话框。
7.2.2 测试过程
发现疑似存在跨站链接，在漏洞参数处添加测试漏洞payload，如果达到测试目的则
确定跨站漏洞存在，根据漏洞实际类型分为反射型跨站、存储型跨站，如图7-12所示。
图7-12 XSS漏洞测试流程图
7.2.2.1 反射型XSS
以http：//xxx.xxx.local中高级搜索模块为例，如图7-13所示。
图7-13 高级搜索业务模块
步骤一：抓包并在工单编号输入处添加测试是否存在XSS漏洞的测试代码，如图7-14
所示。
图7-14 抓取业务请求包并添加验证漏洞payload
步骤二：成功弹出对话框，并证明XSS漏洞存在，如图7-15所示。
图7-15 漏洞成功触发
7.2.2.2 存储型XSS
以http：//xxx.xxx.local为例，在商调函模块存在新建、编辑、删除的模块，如图7-16
所示。
图7-16 业务模块
新建一工单并在功能说明处添加XSS payload，这时数据会存储于数据库，于是就会
造成存储型XSS，如图7-17所示。
图7-17 漏洞成功触发
7.2.3 修复建议
每个提交信息的客户端页面、通过服务器端脚本（JSP、ASP、ASPX、PHP等）生成
的客户端页面、提交的表单（FORM）或发出的链接请求中包含的所有变量，必须对变量
的值进行检查，过滤其中包含的特殊字符，或对字符进行转义处理。特殊字符如下。
· HTML标签的<、“、’、%等，以及这些符号的Unicode值；
· 客户端脚本（JavaScript、VBScript）关键字：JavaScript、script等。
此外，对于信息搜索功能，不应在搜索结果页面中回显搜索内容。同时应设置出错页
面，防止Web服务器发生内部错误时，将错误信息返回给客户端。具体建议如下：
· 定义允许的行为，确保Web应用程序根据预期结果的严格定义来验证所有输入参数
（Cookie、标头、查询字符串、表单、隐藏字段等）。
· 检查POST和GET请求的响应，以确保返回的对象是预期的内容且有效。
· 通过对用户提供的数据进行编码，从用户输入中移除冲突的字符、括号和单双引
号。这将防止插入的脚本以可执行的格式发送给最终用户。
· 只要可能，就应将客户端提供的所有数据限制为字母数字数据。使用此过滤机制
时，如果用户输入“”，将缩减
为“scriptalertdocumentcookiescript”。如果必须使用非字母数字字符，请先将其编码为
HTML 实体，然后再将其用在 HTTP 响应中，这样就无法将它们用于修改HTML文档的结
构。
· 使用双因素客户身份验证机制，而非单因素身份验证。
· 在修改或使用脚本之前，验证脚本的来源。
· 不要完全信任其他人提供的脚本并用在自己的代码中（不论是从Web上下载的，还
是熟人提供的）。
7.3 命令执行测试
7.3.1 测试原理和方法
在应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函
数。如PHP中的system、exec、shell_exec等，当用户可以控制命令执行函数中的参数时，
将可注入恶意系统命令到正常命令中，造成命令执行攻击。测试中如果没有对参数（如
cmd=、command、excute=等）进行过滤，就可以直接造成命令执行漏洞或配合绕过及命
令连接符（在操作系统中，“&、|、||、；”都可以作为命令连接符使用，用户通过浏览器
提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况
下就执行命令）等进行命令执行漏洞测试。
7.3.2 测试过程
攻击者发现疑似存在命令执行的漏洞链接，添加命令执行payload，确认漏洞，如图7-
18所示。
图7-18 命令执行漏洞测试流程
以某网络安全审计系统为例，由于未对register_key参数进行过滤可能存在命令执行漏
洞，抓包并对其进行测试，构造命令执行语句并执行成功，证明此参数未经严格过滤造成
命令执行漏洞，如图7-19和图7-20所示。
图7-19 抓包并进行测试
图7-20 漏洞成功执行
再以自己搭建的网站http：//localhost/DVWA/为例。
在dvwa处提供了一个免费的ping命令，如图7-21所示。
图7-21 ping命令
步骤一：我们ping一下自己的主机并抓包，如图7-22所示。
步骤二：由于ip接收一个参数并执行ping命令，如果接收的参数没有过滤就可以
用“&、|、||、；”构造语句，进行命令执行漏洞测试，成功执行系统命令，如图7-23所
示。
图7-22 抓取请求包
图7-23 漏洞成功触发
7.3.3 修复建议
尽量少用执行命令的函数或者直接禁用，参数值尽量使用引号包括在使用动态函数之
前，确保使用的函数是指定的函数之一，在进入执行命令的函数/方法之前，对参数进行
过滤，对敏感字符进行转义。
第8章 回退模块测试
8.1 回退测试
8.1.1 测试原理和方法
很多Web业务在密码修改成功后或者订单付款成功后等业务模块，在返回上一步重新
修改密码或者重新付款时存在重新设置密码或者付款的功能，这时如果能返回上一步重复
操作，而且还能更改或者重置结果，则存在业务回退漏洞。
8.1.2 测试过程
攻击者按正常流程更改业务信息，更改完成后可回退到上一流程再次成功修改业务信
息，如图8-1所示。
图8-1 业务回退测试流程
以某网站修改密码为例。
步骤一：密码修改成功后，进行回退测试（检查是否可以回退，并进行操作，如果存
在，可能存在回退漏洞），首先按照正常流程更改密码，如图8-2所示。
图8-2 密码重置成功
步骤二：尝试是否可以进行回退，结果可以回到重置密码这一步，即第三步，可以修
改密码，成功且无限制，如图8-3所示。
图8-3 回退可再次进行修改
8.1.3 修复建议
对于业务流程有多步的情况，如修改密码或重置密码等业务，首先判断该步骤的请求
是否是上一步骤的业务所发起的，如果不是则返回错误提示或页面失效。
第9章 验证码机制测试
9.1 验证码暴力破解测试
9.1.1 测试原理和方法
验证码机制主要被用于防止暴力破解、防止DDoS攻击、识别用户身份等，常见的验
证码主要有图片验证码、邮件验证码、短信验证码、滑动验证码和语音验证码。
以短信验证码为例。短信验证码大部分情况下是由4～6位数字组成，如果没有对验证
码的失效时间和尝试失败的次数做限制，攻击者就可以通过尝试这个区间内的所有数字来
进行暴力破解攻击。
9.1.2 测试过程
攻击者填写任意手机号码进行注册，服务器向攻击者填写的手机号码发送短信验证
码，攻击者设置验证码范围 000000～999999、00000～99999、0000～9999，对验证码进
行暴力破解，通过返回数据包判断是否破解成功，然后通过破解成功的验证码完成注册，
如图9-1所示。
以某会员网站任意手机号码注册为例。
步骤一：填写任意号码进行注册，本案例使用手机号码为16666666666，单击获取手
机动态码，会向手机发送一条验证码信息，如图9-2所示。
图9-1 短信验证码暴力破解测试流程
图9-2 获取短信验证码
步骤二：快速登录，抓取数据包，对code参数进行暴力破解，如图9-3所示。
图9-3 抓取登录数据包
破解信息如下，如图9-4所示。
图9-4 暴力破解
步骤三：通过返回值的长度可判断 46547 为正确的验证码，使用该验证码可成功登录
网站，获取个人信息，如图9-5所示。
图9-5 登录成功
9.1.3 修复建议
针对验证码的暴力测试，建议采取如下的加固方案：
（1）设置验证码的失效时间，建议为180秒；
（2）限制单位时间内验证码的失败尝试次数，如5分钟内连续失败5次即锁定该账号
15分钟。
9.2 验证码重复使用测试
9.2.1 测试原理和方法
在网站的登录或评论等页面，如果验证码认证成功后没有将session及时清空，将会导
致验证码首次认证成功之后可重复使用。测试时可以抓取携带验证码的数据包重复提交，
查看是否提交成功。
9.2.2 测试过程
攻击者填写投诉建议，输入页面验证码，抓取提交的数据包，使用发包工具对数据包
进行重复提交，然后查看投诉建议页面是否成功提交了多个投诉信息，如图9-6所示。
图9-6 验证码重复使用测试流程
以某App手机客户端应用程序为例。
步骤一：在客户投诉建议处，输入要投诉的内容，并输入验证码，如图9-7所示。步