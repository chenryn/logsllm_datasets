---
author: Gabriel Cánepa
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 6893
date: '2016-09-05 20:00:31'
editorchoice: false
excerpt: "在这篇文章中我们探讨了一些监控资源使用的方法，以便验证 Linux 系统中重要硬件和软件组件的完整性和可用性。\r\n我们也学习了如何在特殊情况下采取恰当的措施（通过调整给定进程的执行优先级或者结束进程）。"
fromurl: http://www.tecmint.com/monitor-linux-processes-and-set-process-limits-per-user/
id: 7746
islctt: true
largepic: /data/attachment/album/201609/05/200033ysdt9mfa9cs90tzd.png
permalink: /article-7746-1.html
pic: /data/attachment/album/201609/05/200033ysdt9mfa9cs90tzd.png.thumb.jpg
related:
- displayorder: 0
  raid: 7744
reviewer: ''
selector: ''
summary: "在这篇文章中我们探讨了一些监控资源使用的方法，以便验证 Linux 系统中重要硬件和软件组件的完整性和可用性。\r\n我们也学习了如何在特殊情况下采取恰当的措施（通过调整给定进程的执行优先级或者结束进程）。"
tags:
- 进程
- LFCS
thumb: false
title: LFCS 系列第十四讲： Linux 进程资源用量监控和按用户设置进程限制
titlepic: true
translator: ictlyh
updated: '2016-09-05 20:00:31'
---
由于 2016 年 2 月 2 号开始启用了新的 LFCS 考试要求，我们在已经发表的 [LFCS 系列](http://www.tecmint.com/sed-command-to-create-edit-and-manipulate-files-in-linux/) 基础上增加了一些必要的主题。为了准备考试，同时也建议你看看 [LFCE 系列](http://www.tecmint.com/installing-network-services-and-configuring-services-at-system-boot/) 文章。
![](/data/attachment/album/201609/05/200033ysdt9mfa9cs90tzd.png)
*第十四讲： 监控 Linux 进程并为每个用户设置进程限制*
每个 Linux 系统管理员都应该知道如何验证硬件、资源和主要进程的完整性和可用性。另外，基于每个用户设置资源限制也是其中一项必备技能。
在这篇文章中，我们会介绍一些能够确保系统硬件和软件正常工作的方法，这些方法能够避免潜在的会导致生产环境下线或钱财损失的问题发生。
### 报告 Linux 进程统计信息
你可以使用 **mpstat** 单独查看每个处理器或者系统整体的活动，可以是每次一个快照或者动态更新。
为了使用这个工具，你首先需要安装 **sysstat**：
```
# yum update && yum install sysstat              [基于 CentOS 的系统]
# aptitutde update && aptitude install sysstat   [基于 Ubuntu 的系统]
# zypper update && zypper install sysstat        [基于 openSUSE 的系统]
```
你可以在 [在 Linux 中学习 Sysstat 和其中的工具 mpstat、pidstat、iostat 和 sar](http://www.tecmint.com/sysstat-commands-to-monitor-linux/) 了解更多和 sysstat 和其中的工具相关的信息。
安装完 **mpstat** 之后，就可以使用它生成处理器统计信息的报告。
你可以使用下面的命令每隔 2 秒显示所有 CPU（用 `-P` ALL 表示）的 CPU 利用率（`-u`），共显示 **3** 次。
```
# mpstat -P ALL -u 2 3
```
**示例输出：**
```
Linux 3.19.0-32-generic (tecmint.com)   Wednesday 30 March 2016     _x86_64_    (4 CPU)
11:41:07  IST  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
11:41:09  IST  all    5.85    0.00    1.12    0.12    0.00    0.00    0.00    0.00    0.00   92.91
11:41:09  IST    0    4.48    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   94.53
11:41:09  IST    1    2.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   97.00
11:41:09  IST    2    6.44    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   92.57
11:41:09  IST    3   10.45    0.00    1.99    0.00    0.00    0.00    0.00    0.00    0.00   87.56
11:41:09  IST  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
11:41:11  IST  all   11.60    0.12    1.12    0.50    0.00    0.00    0.00    0.00    0.00   86.66
11:41:11  IST    0   10.50    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   88.50
11:41:11  IST    1   14.36    0.00    1.49    2.48    0.00    0.00    0.00    0.00    0.00   81.68
11:41:11  IST    2    2.00    0.50    1.00    0.00    0.00    0.00    0.00    0.00    0.00   96.50
11:41:11  IST    3   19.40    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   79.60
11:41:11  IST  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
11:41:13  IST  all    5.69    0.00    1.24    0.00    0.00    0.00    0.00    0.00    0.00   93.07
11:41:13  IST    0    2.97    0.00    1.49    0.00    0.00    0.00    0.00    0.00    0.00   95.54
11:41:13  IST    1   10.78    0.00    1.47    0.00    0.00    0.00    0.00    0.00    0.00   87.75
11:41:13  IST    2    2.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   97.00
11:41:13  IST    3    6.93    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   92.57
Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
Average:     all    7.71    0.04    1.16    0.21    0.00    0.00    0.00    0.00    0.00   90.89
Average:       0    5.97    0.00    1.16    0.00    0.00    0.00    0.00    0.00    0.00   92.87
Average:       1    9.24    0.00    1.16    0.83    0.00    0.00    0.00    0.00    0.00   88.78
Average:       2    3.49    0.17    1.00    0.00    0.00    0.00    0.00    0.00    0.00   95.35
Average:       3   12.25    0.00    1.16    0.00    0.00    0.00    0.00    0.00    0.00   86.59
```
要查看指定的 **CPU（**在下面的例子中是 **CPU 0）**，可以使用：
```
# mpstat -P 0 -u 2 3
```
**示例输出：**
```
Linux 3.19.0-32-generic (tecmint.com)   Wednesday 30 March 2016     _x86_64_    (4 CPU)
11:42:08  IST  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
11:42:10  IST    0    3.00    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   96.50
11:42:12  IST    0    4.08    0.00    0.00    2.55    0.00    0.00    0.00    0.00    0.00   93.37
11:42:14  IST    0    9.74    0.00    0.51    0.00    0.00    0.00    0.00    0.00    0.00   89.74
Average:       0    5.58    0.00    0.34    0.85    0.00    0.00    0.00    0.00    0.00   93.23
```
上面命令的输出包括这些列：
* `CPU`： 整数表示的处理器号或者 all 表示所有处理器的平均值。
* `%usr`： 运行在用户级别的应用的 CPU 利用率百分数。
* `%nice`： 和 `%usr` 相同，但有 nice 优先级。
* `%sys`： 执行内核应用的 CPU 利用率百分比。这不包括用于处理中断或者硬件请求的时间。
* `%iowait`： 指定（或所有）CPU 的空闲时间百分比，这表示当前 CPU 处于 I/O 操作密集的状态。更详细的解释（附带示例）可以查看[这里](http://veithen.github.io/2013/11/18/iowait-linux.html)。
* `%irq`： 用于处理硬件中断的时间所占百分比。
* `%soft`： 和 `%irq` 相同，但是是软中断。
* `%steal`： 虚拟机非自主等待（时间片窃取）所占时间的百分比，即当虚拟机在竞争 CPU 时所从虚拟机管理程序那里“赢得”的时间。应该保持这个值尽可能小。如果这个值很大，意味着虚拟机正在或者将要停止运转。
* `%guest`： 运行虚拟处理器所用的时间百分比。
* `%idle`： CPU 没有运行任何任务所占时间的百分比。如果你观察到这个值很小，意味着系统负载很重。在这种情况下，你需要查看详细的进程列表、以及下面将要讨论的内容来确定这是什么原因导致的。
运行下面的命令使处理器处于极高负载，然后在另一个终端执行 mpstat 命令：
```
# dd if=/dev/zero of=test.iso bs=1G count=1
# mpstat -u -P 0 2 3
# ping -f localhost # Interrupt with Ctrl + C after mpstat below completes
# mpstat -u -P 0 2 3
```
最后，和 “正常” 情况下 **mpstat** 的输出作比较：
![](/data/attachment/album/201609/05/200033ff9gmms1ggbvgdf5.png)
*Linux 处理器相关统计信息报告*
正如你在上面图示中看到的，在前面两个例子中，根据 `%idle` 的值可以判断 **CPU 0** 负载很高。
在下一部分，我们会讨论如何识别资源饥饿型进程，如何获取更多和它们相关的信息，以及如何采取恰当的措施。
### Linux 进程报告
我们可以使用有名的 `ps` 命令，用 `-eo` 选项（根据用户定义格式选中所有进程） 和 `--sort` 选项（指定自定义排序顺序）按照 CPU 使用率排序列出进程，例如：
```
# ps -eo pid,ppid,cmd,%cpu,%mem --sort=-%cpu
```