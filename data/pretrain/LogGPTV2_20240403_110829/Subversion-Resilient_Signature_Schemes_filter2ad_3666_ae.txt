index j reaches the value τ + 1 (i.e., for no pair (v, i) ∈ {0, 1}× [(cid:96)] we have that sk [i] = v).
 Event E(cid:48)(cid:48): The event becomes true whenever, at the end of the q repetitions, the values
v do not cover the entire set [(cid:96)] (i.e., there exists an index ˆi ∈ [(cid:96)] such that for all pairs
(v, i) ∈ {0, 1} × [(cid:96)] we have i (cid:54)= ˆi).
Observe that the distribution of the pairs (v, i) in game G0 is identical to that induced during a
run of the game from Deﬁnition 9. Moreover, whenever the event E does not happen, adversary
B recovers the signing key with probability one,15 and thus P [B wins] ≥ 1 − P [E]. It remains
to upper bound the probability of event E.
Towards this goal, consider a mental experiment in which instead of sampling the pair (v, i)
by running the PRF on input the signature σ, we now pick (v, i) ←$ {0, 1} × [(cid:96)] uniformly at
random, unless the value σ was already generated as part of a previous query, in which case we
return the previously sampled pair (v, i). More formally:
Game G1(κ, q, τ, M):
15This is because in each of the q repetitions we always have that sk [i] = v for some pair (v, i), and furthermore
the latter happens for all i ∈ [(cid:96)].
17
 Sample (vk , sk ) ←$ KGen(1κ) and initialize an empty array S.
 For q times:
– Initialize j := 0;
– Repeat the following instructions, until (sk [i] = v ∨ j = τ ):
* Increment the counter j := j + 1;
* Sample r ←$ R and m ←$ M;
* Compute a fresh signature σ = Sign(sk , m; r);
* If S[σ] is undeﬁned, sample (v, i) ←$ {0, 1} × [(cid:96)] and let S[σ] := (v, i).
Claim 1.1. For all message samplers M, we have that |PG0[E] − PG1[E]| ≤ εprf.
Proof. Fix an arbitrary message sampler algorithm M with sampling running time tM. Consider
the following distinguisher Dprf attempting to break the PRF security of the function F .
Distinguisher Dprf:
 Run (vk , sk ) ←$ KGen(1κ).
 For q times:
– Initialize j := 0;
– Repeat the following instructions, until (sk [i] = v ∨ j = τ ):
* Increment the counter j := j + 1;
* Sample r ←$ R and m ←$ M;
* Compute a fresh signature σ = Sign(sk , m; r);
* Query σ to the target oracle (i.e., either the PRF or a random function)
and obtain a pair (v, i).
 Use all the collected pairs to check whether the event E has happened or not.
In case the event happens output 1, and otherwise output 0.
For the analysis, note that Dprf asks at most τ · q ≤ qprf oracle queries and runs in time at most
equal to τ · q times the sum of the running time of algorithm Sign plus the time required to
sample an element from M. Moreover, in case Dprf’s target oracle is Fs (·), for a randomly chosen
key, the probability that Dprf outputs 1 is identical to the probability that event E happens in
G0. Similarly, in case Dprf’s target oracle is a random function f (·), the probability that Dprf
outputs 1 is identical to the probability that event E happens in G1. Hence, by security of the
PRF:
(cid:105) − P
f ←$ F
(cid:104)
Df (·)
prf (1κ) = 1
(cid:105)(cid:12)(cid:12)(cid:12)(cid:12) ≤ εprf,
(cid:12)(cid:12)(cid:12)(cid:12) P
G0
(cid:12)(cid:12)(cid:12)(cid:12) =
(cid:12)(cid:12)(cid:12)(cid:12)
(cid:104)
[E] − P
G1
[E]
P
s ←$ {0,1}κ
DFs (·)
prf
(1κ) = 1
concluding the proof.
Next, we modify the previous game by requiring that a diﬀerent pair (v, i) is sampled
uniformly at random in each of the queries (independently of collisions on signatures). More
formally:
Game G2(κ, q, τ, M):
 Sample (vk , sk ) ←$ KGen(1κ).
 For q times:
18
– Initialize j := 0;
– Repeat the following instructions, until (sk [i] = v ∨ j = τ ):
* Increment the counter j := j + 1;
* Sample r ←$ R and m ←$ M;
* Compute a fresh signature σ = Sign(sk , m; r);
* Sample (v, i) ←$ {0, 1} × [(cid:96)].
Claim 1.2. For all message samplers M, and for all q ∈ N, we have that |PG1[E] − PG2[E]| ≤
q2τ 2 · 2−η−1.
Proof. Let W be the event that for some of the messages sampled via the message sampler
algorithm M there is a collision in the computation of a signature. Clearly, if W does not
happen, the values (v, i) are sampled uniformly and independently for each query, and thus G1
and G2 are identical. Since PG1[W ] = PG2[W ] = P [W ], by Lemma 1, SD (G1; G2) ≤ P [W ].
It remains to bound the probability of event W . By deﬁnition of min-entropy, the worst-case
probability (over the choice of the randomness) that a particular value σ is hit is at most 2−η
(regardless of the distribution by which we sample the message). Since at most τ q signatures
are generated, a standard union bound gives
P [W ] ≤
as desired.
(cid:18)τ q
(cid:19)
2
· 2−η ≤ q2τ 2
2
· 2−η,
Finally, we upper bound the probabilty of event E in game G2.
Claim 1.3. For all message samplers M, and for all q ∈ N, we have that PG2[E] ≤ (cid:96) · e−q/(cid:96) +
q · 2−τ .
Proof. We simply analyze the probability of event E happening in G2, by looking at the sub-
events E(cid:48), E(cid:48)(cid:48).
 Event E(cid:48): Since in each of the τ trials, the value v hits sk [i] with probability 1/2, and
since such a process is repeated at most q times, we have that PG2[E(cid:48)
2] ≤ q · 2−τ .
 Event E(cid:48)(cid:48): Since each index i ∈ [(cid:96)] is hit with probability 1/(cid:96), the probability that a
(cid:96) )q ≤ e−q/(cid:96). Hence, by applying
particular index is not hit after q trials is at most (1 − 1
the union bound, we have that PG2[E(cid:48)(cid:48)] ≤ (cid:96) · e−q/(cid:96).
The claim follows by a union bound and by the deﬁnition of event E := E(cid:48) ∨ E(cid:48)(cid:48).
The above claims imply P [B wins] ≥ 1 − εprf − q2τ 2
· 2−η − ((cid:96) · e−q/(cid:96) + q · 2−τ ), concluding
2
the proof of part (i).
(ii) Let G be the game described in Deﬁnition 8. Consider the game G0 to be an identical
copy of G when b = 0, and consider the game G1 to be an identical copy of G when b = 1. We
need to prove that G0 and G1 are computationally indistinguishable. To this end, we consider
a sequence of games deﬁned below.
Game H0: Identical to G1.
Game H1: We change the way the subversion algorithm (cid:101)As,τ works. Namely,
instead of
computing the pair (v, i) by running the PRF on input the signature σ, we now pick
(v, i) ←$ {0, 1}× [(cid:96)] uniformly at random unless the value σ was already generated as part
of a previous query, in which case we return the previously sampled pair (v, i).
19
Game H2: Identical to the previous game, but now a diﬀerent pair (v, i) is sampled uniformly
at random in each of the queries (independently of collisions on signatures).
Notice that in game H2 the choice of (v, i), for each signature query, is independent of the choice
of σ, and thus it does not aﬀect the distribution of the latter; hence, H2 ≡ G0. The next two
claims, whose proof is analogous to the proof of Claim 1.1 and Claim 1.2, imply the statement.
Claim 1.4. For all distinguishers D running in time t and asking q oracle queries, we have
that |P [D(H0) = 1] − P [D(H1) = 1]| ≤ εprf.
Claim 1.5. For all (even unbounded) distinguishers D asking q oracle queries, we have that
|P [D(H1) = 1] − P [D(H2) = 1]| ≤ q2τ 2 · 2−η−1.
The fact that the class Abias is strongly undetectable follows directly by the fact that each
algorithm (cid:101)As,τ (sk , m), as described in Fig. 1, is stateless.
Concrete parameters. Observe that the size of the signing key determines the eﬃciency of
the attack. If we consider the case of RSA-PSS signatures [BR96], with a signing key of size
1536 bits, we can achieve a key-recovery probability of ≈ 0.73 by setting q = 1536 · 10 = 15360
and τ = 18 as long as η ≥ 38.
As a comparison, if we consider the case of ECDSA signatures, with signing key of size
256 bits, we can achieve a key-recovery probability of ≈ 0.85 if we take the parameters to be
q = 256 · 8 = 2048 and τ = 15 as long as η ≥ 40.
4.2 Coin-Extractable Attack
The attack in Section 4.1 allows to break all suﬃciently randomized schemes. This leaves the
interesting possibility to show a positive result for schemes using less randomness, e.g., the
Katz-Wang signature scheme [KW03] that uses a single bit of randomness. In this section we
present a simple attack (cf. Fig. 2) ruling out the above possibility for all signature schemes
that are coin extractable, a notion which we deﬁne next.
Deﬁnition 12 (Coin-extractable signatures). Let SS = (KGen, Sign, Vrfy) be a signature scheme.
We say that SS is νext-coin-extractable if there exists a PPT algorithm CExt such that for all
κ ∈ N, for all (vk , sk ) output by KGen(1κ), and all m ∈ M,
P(cid:2)r(cid:48) = r : r ←$ R; σ = Sign(sk , m; r); r(cid:48) ←$ CExt(vk , m, σ)(cid:3) ≥ 1 − νext.
We point out that many existing signature schemes are νext-coin-extractable, for small νext:
 All public-coin signature schemes [Sch12], where the random coins used to generate a
signature are included as part of the signature. Concretely, the schemes in [GHR99,
CS00, NPS01, CL02, Fis03, CL04, BB08, HW09a, HW09b, HK12], and the Unstructured
Rabin-Williams scheme [Ber08], are all public-coin.
 The Katz-Wang scheme [KW03], where the signature on a message m is computed as
σ = f−1(H(m||r)) such that f is a trapdoor permutation, H is a hash function (modeled
as a random oracle), and r is random bit. Given a pair (m, σ) the extractor simply sets
r = 1 iﬀ f (σ) = H(m||1).
 The PSS signature scheme [BR96, Cor02].
20
SA class Acext
Let SS = (KGen, Sign, Vrfy) be a signature scheme with randomness space R := {0, 1}d, and let
G : {0, 1}κ → {0, 1}κ × {0, 1}d be a stateful pseudorandom generator. For simplicity, assume
that d|(cid:96), where (cid:96) is the size of the signing key in bits (a generalization is straightforward). The
class Acext consists of a set of algorithms {(cid:101)As,τ =0}s∈{0,1}κ, where each algorithm in the class
behaves as follows.
 If τ ≥ (cid:96), then τ := 0;
 Run (s(cid:48), v) = G(s) and re-deﬁne s := s(cid:48);
(cid:101)As,τ (sk , m):
 Compute the biased randomness(cid:101)r := v ⊕ sk [τ + 1, τ + d];
 Return σ := Sign(sk , m;(cid:101)r).
 Update the state τ ← τ + d;
Figure 2: Attacking coin-extractable schemes
In Fig. 2 we describe a secretly undetectable attack that allows to break all coin-extractable
schemes (even if the scheme relies on a single bit of randomness). The intuition behind it is
as follows.16 Let G be a stateful PRG (cf. Section 2.3) with d ≥ 1 bits of stretch, and assume
that the randomness space of the signature scheme consists of all d-bit strings. We consider the
class of SAs which outputs a real signature, except that the randomness used to compute the
signature is derived by ﬁrst running the PRG, and later xor-ing the obtained pseudorandom
bits with the next d bits of the secret key. Since the scheme is coin-extractable, an adversary
can recover the coins used to generate each signature and remove the pseudorandom pad by
re-iterating the PRG, which allows to fully recover the secret key.
Theorem 2. Let (cid:96), d ≥ 1, with d|(cid:96), and let SS be a randomized, νext-coin-extractable, signature
scheme, with randomness space R = {0, 1}d and signing key space SK = {0, 1}(cid:96). Consider
the class of SAs Acext described in Fig. 2, and let G : {0, 1}κ → {0, 1}κ × {0, 1}d be a stateful
(tprg, qprg, εprg)-secure PRG, Ucext be the uniform distribution over Acext, and M be an arbitrary
message sampler algorithm. Then:
(i) There exists an adversary B (and we describe it in the proof of this theorem) that (t, (cid:96)/d, ε,
Ucext, M)-recovers the signing key of SS, with
ε ≥ 1 − νext · (cid:96)/d,
The running time t of B is roughly equal to (cid:96)/d times the sum of the running time of
algorithm CExt plus the time to evaluate a single iteration of the function G.
(ii) The class Acext is secretly (tprg, qprg, εprg, Ucext)-undetectable, as long as qprg ≥ (cid:96)/d and tprg
is at least (cid:96)/d times the running time of algorithm Sign.
Proof. (i) Consider the following adversary B playing the game G described in Deﬁnition 9, for
the SA class Acext described in Fig. 2, and let q := (cid:96)/d.
Adversary B:
16A previous version of this paper [AMV15] contained a similar attack that even achieves secret undetectability
unconditionally; however that attack does not immediately work in the multi-user setting.
21
 Initialize sk(cid:48) := 0(cid:96).