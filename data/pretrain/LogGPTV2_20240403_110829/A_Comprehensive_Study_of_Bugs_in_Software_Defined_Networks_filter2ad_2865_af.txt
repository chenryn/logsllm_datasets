to Network Control and Management,” ACM SIGCOMM Computer
Communication Review, vol. 35, no. 5, pp. 41–54, 2005.
[75] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown, and
S. Shenker, “Ethane: Taking Control of the Enterprise,” in ACM
SIGCOMM Computer Communication Review, vol. 37, no. 4. ACM,
2007, pp. 1–12.
[76] M. Caesar, D. Caldwell, N. Feamster, J. Rexford, A. Shaikh, and
J. van der Merwe, “Design and Implementation of A Routing Control
Platform,” in Proceedings of the 2nd conference on Symposium on
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
113
Networked Systems Design & Implementation-Volume 2. USENIX
Association, 2005, pp. 15–28.
[77] A. Rabkin and R. H. Katz, “How Hadoop Clusters Break,” IEEE
software, vol. 30, no. 4, pp. 88–94, 2012.
[78] M. Attariyan and J. Flinn, “Automating Conﬁguration Troubleshooting
with Dynamic Information Flow Analysis,” in OSDI, vol. 10, no. 2010,
2010, pp. 1–14.
[79] ——, “Automating conﬁguration troubleshooting with confaid,” login
Usenix Mag., vol. 36, no. 1, 2011. [Online]. Available: https://www.
usenix.org/publications/login/february-2011-volume-36-number-1/
automating-conﬁguration-troubleshooting-confaid
[80] T. Xu, X.
Jin, P. Huang, Y. Zhou, S. Lu, L.
and
S. Pasupathy, “Early detection of conﬁguration errors to reduce
failure damage,” in 12th USENIX Symposium on Operating Systems
Design and Implementation (OSDI 16).
Savannah, GA: USENIX
Association, Nov. 2016, pp. 619–634.
[Online]. Available: https:
//www.usenix.org/conference/osdi16/technical-sessions/presentation/xu
retrieved from,” https://github.com/
issue #355 details
Jin,
faucetsdn/faucet/pull/355, 2019, accessed: 6-5-2019.
[81] “Faucet
[82] “Inﬂuxdb details retrieved from,” https://www.inﬂuxdata.com/, 2019,
accessed: 6-5-2019.
[83] R. G. Kula, D. M. German, A. Ouni, T. Ishio, and K. Inoue,
“Do developers update their library dependencies?” Empirical Softw.
Engg., vol. 23, no. 1, p. 384–417, Feb. 2018. [Online]. Available:
https://doi.org/10.1007/s10664-017-9521-5
[84] “Cve-2018-1000615 details retrieved from,” https://www.cvedetails.
com/cve/CVE-2018-1000615/, 2019, accessed: 1-6-2020.
[85] “Ovsdb details retrieved from,” http://docs.openvswitch.org/en/latest/
ref/ovsdb.7/, 2019, accessed: 1-6-2020.
[86] “Dependency-check details retrieved from,” https://jeremylong.github.
io/DependencyCheck/, 2020, accessed: 26-06-2020.
[87] “Details retrieved from,” https://nvd.nist.gov/, 2020, accessed: 26-06-
2020.
[88] S. Mirhosseini and C. Parnin, “Can Automated Pull Requests En-
courage Software Developers to Upgrade Out-of-date Dependencies?”
in Proceedings of the 32nd IEEE/ACM International Conference on
Automated Software Engineering.
IEEE Press, 2017, pp. 84–94.
[89] M. Lungu, R. Robbes, and M. Lanza, “Recovering Inter-Project De-
pendencies in Software Ecosystems,” in Proceedings of the IEEE/ACM
international conference on Automated software engineering. ACM,
2010, pp. 309–312.
[90] “Voltha details
retrieved from,” https://www.opennetworking.org/
voltha/, 2020, accessed: 26-06-2020.
[91] “Vol-549 details
retrieved from,” https://jira.opencord.org/browse/
VOL-549, 2019, accessed: 6-5-2019.
[92] “Chaos monkey details retrieved from,” https://github.com/Netﬂix/
chaosmonkey, 2019, accessed: 14-3-2019.
[93] N. Shelly, B. Tschaen, K.-T. F¨orster, M. Chang, T. Benson, and L. Van-
bever, “Destroying Networks for Fun (and Proﬁt),” in Proceedings of
the 14th ACM Workshop on Hot Topics in Networks. ACM, 2015,
p. 6.
[94] L. Keller, P. Upadhyaya, and G. Candea, “Conferr: A tool for assessing
resilience to human conﬁguration errors,” in 2008 IEEE International
Conference on Dependable Systems and Networks With FTCS and
DCC (DSN), June 2008, pp. 157–166.
[95] M. Attariyan and J. Flinn, “Automating conﬁguration troubleshooting
with dynamic information ﬂow analysis,” in Proceedings of
the
9th USENIX Conference on Operating Systems Design and
Implementation,
Berkeley, CA, USA: USENIX
Association, 2010, pp. 237–250. [Online]. Available: http://dl.acm.org/
citation.cfm?id=1924943.1924960
ser. OSDI’10.
[96] A. Whitaker, R. S. Cox, and S. D. Gribble, “Conﬁguration debugging
as search: Finding the needle in the haystack,” in Proceedings of
the 6th Conference on Symposium on Operating Systems Design
& Implementation - Volume 6, ser. OSDI’04.
Berkeley, CA,
USA: USENIX Association, 2004, pp. 6–6.
[Online]. Available:
http://dl.acm.org/citation.cfm?id=1251254.1251260
[97] C. Yuan, N. Lao, J.-R. Wen, J. Li, Z. Zhang, Y.-M. Wang,
and W.-Y. Ma, “Automated known problem diagnosis with event
traces,” in Proceedings of the 1st ACM SIGOPS/EuroSys European
Conference on Computer Systems 2006, ser. EuroSys ’06. New
York, NY, USA: ACM, 2006, pp. 375–388. [Online]. Available:
http://doi.acm.org/10.1145/1217935.1217972
[98] “Onos-5992 details retrieved from,” https://jira.onosproject.org/browse/
ONOS-5992, 2020, accessed: 10-12-2020.
technology
analysis
xpon
of
[99] “An
development,”
https:
//www.zte.com.cn/global/about/magazine/zte-technologies/2007/
10/en 120/161896.html, 2021, accessed: 01-04-2021.
[100] P. Kruchten, R. L. Nord, and I. Ozkaya, “Technical debt: From
metaphor to theory and practice,” IEEE Software, vol. 29, no. 6, pp.
18–21, 2012.
[101] I. Ahmed, U. A. Mannan, R. Gopinath, and C. Jensen, “An empirical
study of design degradation: How software projects get worse over
time,” in 2015 ACM/IEEE International Symposium on Empirical
Software Engineering and Measurement (ESEM), 2015, pp. 1–10.
[102] S. Olbrich, D. S. Cruzes, V. Basili, and N. Zazworka, “The evolution
and impact of code smells: A case study of two open source sys-
tems,” in 2009 3rd International Symposium on Empirical Software
Engineering and Measurement, 2009, pp. 390–400.
[103] W. Li
“An empirical
and R. Shatnawi,
the bad
smells and class error probability in the post-release object-
oriented system evolution,” Journal of Systems and Software,
vol. 80, no. 7, pp. 1120 – 1128, 2007, dynamic Resource
Management in Distributed Real-Time Systems. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0164121206002780
study of
in Refactoring for Software Design Smells,
G. Suryanarayana, G. Samarthyam, and T. Sharma, Eds. Boston:
Morgan Kaufmann,
http:
//www.sciencedirect.com/science/article/pii/B9780128013977010018
[Online]. Available:
2015,
iii.
p.
[104] “Front matter,”
[105] T. Sharma, P. Mishra, and R. Tiwari, “Designite: A software
design quality assessment tool,” in Proceedings of the 1st International
Workshop on Bringing Architectural Design Thinking into Developers’
Daily Activities, ser. BRIDGE ’16. New York, NY, USA: Association
for Computing Machinery, 2016, p. 1–4.
[Online]. Available:
https://doi.org/10.1145/2896935.2896938
[106] G. Suryanarayana, G. Samarthyam, and T. Sharma, “Chapter 5 -
modularization smells,” in Refactoring for Software Design Smells,
G. Suryanarayana, G. Samarthyam, and T. Sharma, Eds. Boston:
Morgan Kaufmann, 2015, pp. 93 – 122. [Online]. Available: http:
//www.sciencedirect.com/science/article/pii/B9780128013977000059
[107] ——, “Chapter 6 - hierarchy smells,” in Refactoring for Software
Design Smells, G. Suryanarayana, G. Samarthyam, and T. Sharma,
Eds.
192.
[Online]. Available: http://www.sciencedirect.com/science/article/pii/
B9780128013977000060
Boston: Morgan Kaufmann,
2015,
123
pp.
–
[108] J. Garcia, D. Popescu, G. Edwards, and N. Medvidovic, “Toward a
catalogue of architectural bad smells,” in Architectures for Adaptive
Software Systems, R. Mirandola, I. Gorton, and C. Hofmeister, Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2009, pp. 146–162.
[109] M. Lippert and S. Roock, “Refactoring in large software projects,”
2006.
[110] M. Noback, The Stable Dependencies Principle. Berkeley, CA:
Apress, 2018, pp. 217–235. [Online]. Available: https://doi.org/10.
1007/978-1-4842-4119-6 10
[111] G. Suryanarayana, G. Samarthyam, and T. Sharma, “Chapter 2
- design smells,” in Refactoring for Software Design Smells,
G. Suryanarayana, G. Samarthyam, and T. Sharma, Eds. Boston:
Morgan Kaufmann, 2015, pp. 9 – 19. [Online]. Available: http:
//www.sciencedirect.com/science/article/pii/B9780128013977000023
[112] T. Sharma, P. Singh, and D. Spinellis, “An empirical investigation on
the relationship between design and architecture smells,” Empirical
Software Engineering, vol. 25, no. 5, pp. 4020–4068, Sep 2020.
[Online]. Available: https://doi.org/10.1007/s10664-020-09847-2
[113] “Onos-6594 details retrieved from,” https://jira.onosproject.org/browse/
ONOS-6594, 2019, accessed: 26-01-2020.
[114] “Faucet codebase details retrieved from,” https://github.com/faucetsdn/
faucet/pull/2399, 2019, accessed: 6-5-2019.
[115] “Dependency versioning in the wild,” in 2019 IEEE/ACM 16th
International Conference on Mining Software Repositories (MSR),
2019, pp. 349–359.
[116] “Onos-5309 details retrieved from,” https://jira.onosproject.org/browse/
ONOS-5309, 2019, accessed: 6-5-2019.
[117] “Vol-1201 details retrieved from,” https://jira.opencord.org/browse/
VOL-1201, 2019, accessed: 6-5-2019.
[118] “Onos-6893 details retrieved from,” https://jira.onosproject.org/browse/
ONOS-6893, 2019, accessed: 6-5-2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
114
[138] M. J. Islam, G. Nguyen, R. Pan, and H. Rajan, “A Comprehen-
sive Study on Deep Learning Bug Characteristics,” arXiv preprint
arXiv:1906.01388, 2019.
[139] J. Wang, W. Dou, Y. Gao, C. Gao, F. Qin, K. Yin, and J. Wei, “A
Comprehensive Study on Real World Concurrency Bugs in Node.
js,” in 2017 32nd IEEE/ACM International Conference on Automated
Software Engineering (ASE).
IEEE, 2017, pp. 520–531.
[140] H. Liu, S. Lu, M. Musuvathi, and S. Nath, “What Bugs Cause
Production Cloud Incidents?” in HotOS, 2019, pp. 155–162.
[141] Y. Gao, W. Dou, F. Qin, C. Gao, D. Wang, J. Wei, R. Huang, L. Zhou,
and Y. Wu, “An Empirical Study on Crash Recovery Bugs in Large-
Scale Distributed Systems,” in Proceedings of the 2018 26th ACM
Joint Meeting on European Software Engineering Conference and
Symposium on the Foundations of Software Engineering. ACM, 2018,
pp. 539–550.
[142] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu, “Attacking the brain:
Races in the sdn control plane,” in Proceedings of the 26th USENIX
Conference on Security Symposium, ser. SEC’17. Berkeley, CA,
USA: USENIX Association, 2017, pp. 451–468. [Online]. Available:
http://dl.acm.org/citation.cfm?id=3241189.3241225
[143] P. Vizarreta, K. Trivedi, B. Helvik, P. Heegaard, A. Blenk, W. Kellerer,
and C. Mas Machuca, “Assessing the maturity of sdn controllers with
software reliability growth models,” IEEE Transactions on Network
and Service Management, vol. 15, no. 3, pp. 1090–1104, 2018.
[144] P. Vizarreta, E. Sakic, W. Kellerer, and C. M. Machuca, “Mining soft-
ware repositories for predictive modelling of defects in sdn controller,”
in 2019 IFIP/IEEE Symposium on Integrated Network and Service
Management (IM), 2019, pp. 80–88.
[145] P. Vizarreta, K. Trivedi, V. Mendiratta, W. Kellerer, and C. Mas-
Machuca, “Dason: Dependability assessment framework for imperfect
distributed sdn implementations,” IEEE Transactions on Network and
Service Management, vol. 17, no. 2, pp. 652–667, 2020.
[119] “Faucet
issue #489 details
retrieved from,” https://github.com/
faucetsdn/faucet/pull/489, 2019, accessed: 6-5-2019.
[120] “Cord-2687 details retrieved from,” https://jira.opencord.org/browse/
CORD-2687, 2019, accessed: 6-5-2019.
[121] “Onos-2015 details retrieved from,” https://jira.onosproject.org/browse/
ONOS-2015, 2019, accessed: 6-5-2019.
[122] “Vol-1122 details retrieved from,” https://jira.opencord.org/browse/
VOL-1122, 2019, accessed: 6-5-2019.
[123] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran,
J. Noh, and B. B. Kang, “Rosemary: A robust,
secure, and
high-performance network operating system,” in Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’14. New York, NY, USA: ACM, 2014, pp. 78–89.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660353
[124] P. Tammana, C. Nagarajan, P. Mamillapalli, R. Kompella, and M. Lee,
“Fault Localization in Large-Scale Network Policy Deployment,” in
2018 IEEE 38th International Conference on Distributed Computing
Systems (ICDCS).
IEEE, 2018, pp. 54–64.
[125] K. Mahajan, R. Poddar, M. Dhawan, and V. Mann, “Jury: Validat-
ing Controller Actions in Software-Deﬁned Networks,” in 2016 46th
Annual IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN).
IEEE, 2016, pp. 109–120.
tolerance
[126] B. Yamansavascilar, A. C. Baktir, A. Ozgovde, and C. Ersoy,
“Fault
considering network and
application based metrics,” Journal of Network and Computer
Applications, vol. 170, p. 102780, 2020.
[Online]. Available:
http://www.sciencedirect.com/science/article/pii/S108480452030254X
[127] “Onos-7758 details retrieved from,” https://jira.onosproject.org/browse/
in sdn data plane
ONOS-7758, 2019, accessed: 6-5-2019.
[128] D. Levin, A. Wundsam, B. Heller, N. Handigol, and A. Feldmann,
“Logically centralized? state distribution trade-offs in software deﬁned
networks,” in Proceedings of the First Workshop on Hot Topics
in Software Deﬁned Networks, ser. HotSDN ’12. New York, NY,
USA: Association for Computing Machinery, 2012, p. 1–6. [Online].
Available: https://doi.org/10.1145/2342441.2342443
[129] H. E. Egilmez, S. T. Dane, K. T. Bagci, and A. M. Tekalp, “Openqos:
An openﬂow controller design for multimedia delivery with end-to-end
quality of service over software-deﬁned networks,” in Proceedings of
The 2012 Asia Paciﬁc Signal and Information Processing Association
Annual Summit and Conference, 2012, pp. 1–8.
[130] Y. Yu, C. Qian,
and X. Li,
the Third Workshop on Hot Topics
“Distributed and collaborative
trafﬁc monitoring in software deﬁned networks,” in Proceedings
of
in Software Deﬁned
Networking, ser. HotSDN ’14. New York, NY, USA: Association
for Computing Machinery, 2014, p. 85–90.
[Online]. Available:
https://doi.org/10.1145/2620728.2620739
[131] R. Sherwood, G. Gibb, K. kiong Yap, M. Casado, N. Mckeown, and
G. Parulkar, “Flowvisor: A network virtualization layer,” Tech. Rep.,
2009.
[132] T. Koponen, K. Amidon, P. Balland, M. Casado, A. Chanda, B. Fulton,
I. Ganichev, J. Gross, P. Ingram, E. Jackson, A. Lambeth, R. Lenglet,
S.-H. Li, A. Padmanabhan, J. Pettit, B. Pfaff, R. Ramanathan,
S. Shenker, A. Shieh, J. Stribling, P. Thakkar, D. Wendlandt, A. Yip,
and R. Zhang, “Network virtualization in multi-tenant datacenters,”
in 11th USENIX Symposium on Networked Systems Design and
Implementation (NSDI 14).
Seattle, WA: USENIX Association,
Apr. 2014, pp. 203–216. [Online]. Available: https://www.usenix.org/
conference/nsdi14/technical-sessions/presentation/koponen
[133] Y. Li, B. Dolan-Gavitt, S. Weber, and J. Cappos, “Lock-in-Pop:
Securing Privileged Operating System Kernels by Keeping on the
Beaten Path,” in ATC), 2017, pp. 1–13.
[134] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann, “SPHINX: Detect-
ing Security Attacks in Software-Deﬁned Networks,” 01 2015.
[135] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado, “Bouncer:
Securing Software by Blocking Bad Input,” ACM SIGOPS Operating
Systems Review, vol. 41, no. 6, pp. 117–130, 2007.
[136] M. Kuzniar, P. Peresini, M. Canini, D. Venzano, and D. Kos-
tic, “A SOFT Way for OpenFlow Switch Interoperability Testing,”
in Proceedings of
the 8th international conference on Emerging
networking experiments and technologies. ACM, 2012, pp. 265–276.
[137] T. Nelson, A. D. Ferguson, and S. Krishnamurthi, “Static differential
program analysis for software-deﬁned networks,” in FM 2015: Formal
Methods, N. Bjørner and F. de Boer, Eds. Cham: Springer International
Publishing, 2015, pp. 395–413.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
115