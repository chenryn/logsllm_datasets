[41] M. T. Rahman, Q. Shi, S. Tajik, H. Shen, D. L. Woodard, M. Tehra-
nipoor, and N. Asadizanjani, “Physical Inspection Attacks: New Frontier
in Hardware Security,” in 2018 IEEE 3rd International Veriﬁcation and
Security Workshop (IVSW), Jul. 2018, pp. 93–102.
© 2020 IEEE
14
[42] M. K. Mc Manus, J. A. Kash, S. E. Steen, S. Polonsky, J. C. Tsang,
D. R. Knebel, and W. Huott, “PICA: Backside failure analysis of CMOS
circuits using Picosecond Imaging Circuit Analysis,” Microelectronics
Reliability, vol. 40, no. 8, pp. 1353–1358, Aug. 2000.
[43] A. Schl¨osser, D. Nedospasov, J. Kr¨amer, S. Orlic, and J.-P. Seifert, “Sim-
ple Photonic Emission Analysis of AES,” in Cryptographic Hardware
and Embedded Systems – CHES 2012, ser. Lecture Notes in Computer
Science, E. Prouff and P. Schaumont, Eds. Berlin, Heidelberg: Springer,
2012, pp. 41–57.
[44] H. Lohrke, S. Tajik, T. Krachenfels, C. Boit, and J. Seifert, “Key
Extraction Using Thermal Laser Stimulation A Case Study on Xilinx
Ultrascale FPGAs,” IACR Trans. Cryptogr. Hardw. Embed. Syst., vol.
2018, no. 3, pp. 573–595, 2018.
[45] F. Stellari, P. Song, M. Villalobos, and J. Sylvestri, “Revealing SRAM
memory content using spontaneous photon emission,” in VTS 2016.
IEEE Computer Society, 2016, pp. 1–6.
[46] J. Couch, N. Whewell, A. Monica, and S. Papadakis, “Direct read of
idle block RAM from FPGAs utilizing photon emission microscopy,”
in HOST 2018.
IEEE Computer Society, 2018, pp. 41–48.
[47] U. Kindereit, G. Woods, J. Tian, U. Kerst, R. Leihkauf, and C. Boit,
“Quantitative Investigation of Laser Beam Modulation in Electrically
Active Devices as Used in Laser Voltage Probing,” IEEE Transactions
on Device and Materials Reliability, vol. 7, no. 1, pp. 19–30, 2007.
[48] S. Tajik, H. Lohrke, J. Seifert, and C. Boit, “On the Power of Optical
Contactless Probing: Attacking Bitstream Encryption of FPGAs,” in CCS
2017. ACM, 2017, pp. 1661–1674.
[49] H. Lohrke, S. Tajik, C. Boit, and J. Seifert, “No Place to Hide:
Contactless Probing of Secret Data on FPGAs,” in CHES 2016, ser.
LNCS, vol. 9813. Springer, 2016, pp. 147–167.
[50] B. Niu, G. M. E. Khoo, Y.-C. S. Chen, F. Chapman, D. Bockelman, and
T. Tong, “Laser Logic State Imaging (LLSI),” in ISTFA 2014. ASM
International, 2014, p. 65.
[51] M. Wagner, S. Heyse, and C. Guillemet, “Brute-Force Search Strategies
for Single-Trace and Few-Traces Template Attacks on the DES Round
Keys of a Recent Smart Card,” IACR Cryptology ePrint Archive, vol.
2017, p. 614, 2017.
[52] H. Groß, S. Mangard, and T. Korak, “Domain-Oriented Masking:
Compact Masked Hardware Implementations with Arbitrary Protection
Order,” in TIS@CCS 2016. ACM, 2016, p. 3.
[53] TEXPLAINED. (2018) Hardware security software - CHIPJUICE -
[Online]. Available: https:
Recover any IC’s internal architecture.
//www.texplained.com/about-us/chipjuice-software/
(2020) Access Our Reverse
Engineering
[Online]. Available: https://www.techinsights.com/
[54] TechInsights
Inc.
— TechInsights.
access-reverse-engineering
[55] K. D. Pham, E. L. Horta, and D. Koch, “BITMAN: A tool and API
IEEE, 2017, pp.
for FPGA bitstream manipulations,” in DATE 2017.
894–897.
[56] T. Zhang, J. Wang, S. Guo, and Z. Chen, “A Comprehensive FPGA
Reverse Engineering Tool-Chain: From Bitstream to RTL Code,” IEEE
Access, vol. 7, pp. 38 379–38 389, 2019.
[57] M. Ender, P. Swierczynski, S. Wallat, M. Wilhelm, P. M. Knopp, and
C. Paar, “Insights into the mind of a trojan designer: the challenge to
integrate a trojan into the bitstream,” in ASPDAC 2019. ACM, 2019,
pp. 112–119.
[58] A. Moradi, A. Barenghi, T. Kasper, and C. Paar, “On the vulnerability of
fpga bitstream encryption against power analysis attacks: extracting keys
from xilinx virtex-ii fpgas,” in Proceedings of the 18th ACM conference
on Computer and communications security, 2011, pp. 111–124.
[59] A. Moradi, D. Oswald, C. Paar, and P. Swierczynski, “Side-channel
attacks on the bitstream encryption mechanism of altera stratix ii:
facilitating black-box analysis using software reverse-engineering,” in
Proceedings of
the ACM/SIGDA international symposium on Field
programmable gate arrays, 2013, pp. 91–100.
[60] A. Moradi and T. Schneider, “Improved Side-Channel Analysis Attacks
on Xilinx Bitstream Encryption of 5, 6, and 7 Series,” in COSADE 2016,
ser. LNCS. Springer, 2016, vol. 9689, pp. 71–87.
[61] M. Ender, A. Moradi, and C. Paar, “The unpatchable silicon: A full break
of the bitstream encryption of xilinx 7-series fpgas,” in 29th {USENIX}
Security Symposium ({USENIX} Security 20), 2020.
[62] J. N. Sarvaiya, S. Patnaik, and S. Bombaywala, “Image Registration by
Template Matching Using Normalized Cross-Correlation,” in ACT 2009.
IEEE, 2009, pp. 819–822.
[63] F. Meyer, “Topographic distance and watershed lines,” Signal process-
ing, vol. 38, no. 1, pp. 113–125, 1994.
[64] J. S. Lim, Two-Dimensional Signal and Image Processing.
Hall, Inc., 1990.
Prentice-
[65] M. Renauld and F.-X. Standaert, “Algebraic Side-Channel Attacks,”
in International Conference on Information Security and Cryptology.
Springer, 2009, pp. 393–410.
[66] Y. Oren, M. Renauld, F.-X. Standaert, and A. Wool, “Algebraic Side-
channel Attacks Beyond the Hamming Weight Leakage Model,” in
International Workshop on Cryptographic Hardware and Embedded
Systems. Springer, 2012, pp. 140–154.
[67] M. Soos, K. Nohl, and C. Castelluccia, “Extending SAT solvers to
cryptographic problems,” in SAT 2009, ser. LNCS, vol. 5584. Springer,
2009, pp. 244–257.
[68] Altera Corporation. (2016) Cyclone IV Device Handbook. [Online].
https://www.intel.com/content/dam/www/programmable/us/
Available:
en/pdfs/literature/hb/cyclone-iv/cyclone4-handbook.pdf
[69] M. T. Rahman, S. Tajik, M. S. Rahman, M. Tehranipoor, and
N. Asadizanjani, “The key is left under the mat: On the inappropriate
security assumption of logic locking schemes.” in 2020 IEEE Interna-
tional Symposium on Hardware Oriented Security and Trust (HOST).
IEEE, 2020.
[70] H. Gross. (2016) DOM Protected Hardware Implementation of AES.
[Online]. Available: https://github.com/hgrosz/aes-dom
[71] The MathWorks Inc., “MATLAB–The Language of Technical Comput-
ing,” http://www.mathworks.com/products/matlab/.
[72] T. Moos, “Static Power SCA of Sub-100 nm CMOS ASICs and the
Insecurity of Masking Schemes in Low-Noise Environments,” IACR
Trans. Cryptogr. Hardw. Embed. Syst., vol. 2019, no. 3, pp. 202–232,
2019.
[73] S. Tajik, H. Lohrke, F. Ganji, J. Seifert, and C. Boit, “Laser Fault Attack
IEEE Computer
on Physically Unclonable Functions,” in FDTC 2015.
Society, 2015, pp. 85–96.
[74] H. Lohrke, P. Scholz, C. Boit, S. Tajik, and J.-P. Seifert, “Automated
Detection of Fault Sensitive Locations for Reconﬁguration Attacks on
Programmable Logic,” in ISTFA 2016. ASM International, 2016, p. 6.
[75] C. Helfmeier, D. Nedospasov, C. Tarnovsky, J. S. Krissler, C. Boit, and
J. Seifert, “Breaking and entering through the silicon,” in CCS 2013.
ACM, 2013, pp. 733–744.
[76] M. Von Haartman, S. Rahman, S. Ganguly, J. Verma, A. Umair, and
T. Deborde, “Optical Fault Isolation and Nanoprobing Techniques for
the 10 nm Technology Node and Beyond,” in Proceedings of the 41st
International Symposium for Testing and Failure Analysis, 2015, pp.
47–51.
[77] J. Beutler, J. J. Clement, E. I. Cole, J. Stevens, V. C. Hodges, S. Sil-
verman, and R. Chivas, “Visible Light LVP on Bulk Silicon Devices,”
Sandia National Lab.(SNL-NM), Albuquerque, NM (United States),
Tech. Rep., 2015.
[78] C. Boit, H. Lohrke, P. Scholz, A. Beyreuther, U. Kerst, and Y. Iwaki,
“Contactless Visible Light Probing for Nanoscale ICs through 10 µm
Bulk Silicon,” in Proceedings of the 35th Annual NANO Testing Sym-
posium (NANOTS 2015), 2015, pp. 215–221.
[79] H. Tong, Y. Lai, and C. Wong, Advanced Flip Chip Packaging. Springer
US, 2013.
[80] E. Amini, A. Beyreuther, N. Herfurth, A. Steigert, B. Szyszka, and
C. Boit, “Assessment of a Chip Backside Protection,” Journal of
Hardware and Systems Security, vol. 2, no. 4, pp. 345–352, 2018.
[81] M. Kar, A. Singh, S. K. Mathew, A. Rajan, V. De, and S. Mukhopadhyay,
“Reducing Power Side-Channel Information Leakage of AES Engines
Using Fully Integrated Inductive Voltage Regulator,” J. Solid-State
Circuits, vol. 53, no. 8, pp. 2399–2414, 2018.
[82] S. Tajik, J. Fietkau, H. Lohrke, J. Seifert, and C. Boit, “PUFMon:
Security monitoring of FPGAs using physically unclonable functions,”
in IOLTS 2017.
IEEE, 2017, pp. 186–191.
© 2020 IEEE
15
APPENDIX A
ADDITIONAL FIGURE
0
1
1
1
0
0
1
1
1
1
1
1
0
0
1
0
0
1
0
0
0
1
0
0
Fig. 10. Difference image of a snapshot covering three times eight registers,
once ﬁlled with random data, and once with zeroes. A signiﬁcant difference
(black and white spots) for a register corresponds to bit value 1.
APPENDIX B
SAT CLAUSES
We suppose that the registers are distinguished from the
other cells (e.g., through the technique given in Section III),
and their values can be recovered at multiple clock cycles,
following the given instructions. We also suppose that the
design architecture is known to the adversary, i.e., what is
processed and stored at every clock cycle. However,
the
relation between the recovered values (through snapshots) and
the register cells is unknown. In other words, it is not known to
the adversary which recovered value belongs to which register
cell.
Having the above assumptions in mind, we use CryptoMi-
niSat 5 [67] to conduct the attack, which, compared to other
similar SAT solvers, can more easily deal with XOR clauses.
We should highlight that in such SAT solvers, the problem
should be written in Conjunctive Normal Form (CNF), or let
say product of sums. Each clause is a sum (logical OR) of a
couple of variables (or their invert). The product (logical AND)
of all clauses should be True, hence every clause should be
True. CryptoMiniSat allows us to easily deﬁne XOR-based
clauses as well.
We ﬁrst
focus on a single snapshot at a certain
clock cycle leading to binary observations denoted by
{ω0, . . . , ωn−1∈ F2} corresponding to n registers of the de-
sign. Some registers belong to the control logic (ﬁnite-state
machine), which are out of our interest. Therefore, we target
m ≤ n registers according to the architecture of the underlying
design. For example, m = 256 for an unprotected implemen-
tation of AES (128 bits for the state register and 128 bits for
the key register). If we deﬁne variables vi∈{0,...,m−1} for the
value of targeted register cells at the selected clock cycle, we
can write
vi = ci
0ω0 + ... + ci
n−1ωn−1,
(3)
where with ci
j we denote binary coefﬁcients. Since only one of
the observations is associated to the i-th register cell, only one
of the coefﬁcients ci
j∈{0,...,n−1} is 1, and the rest are 0. In other
© 2020 IEEE
16
words, ∀i,(cid:80)
∀j
ci
j = 1. These are the ﬁrst formulations that we
require to include in the Boolean satisﬁability problem (SAT).
To this end, we break the addition into bit level by deﬁning
intermediate variables tj∈{2,...,n−1} for each i individually.
Below, we drop the superscript i for both t and c for simplicity.
Adding c0 and c1 leads to result t2 = c0 ⊕ c1 and carry c0c1.
Since the carry must be zero, we can add the following clauses
to the SAT.
t2 ⊕ c0 ⊕ c1 = 1,
c0 ∨ c1 = 1
(4)
tj+1⊕cj ⊕tj = 1,
The same procedure is repeated for adding c2 and the result of
former addition t2, i.e., t3 = c2 ⊕ t2 and c2t2 = 0. Generally,
we can write
cj ∨ tj = 1 (5)
∀j ∈ {2, . . . , n−2},
At the end, we add a clause tn−1 ⊕ cn−1 = 1 to the SAT,
deﬁning that the ﬁnal result of the addition should be 1.
These clauses (which are independent of the observations ω
and the architecture of the circuit under attack) are generated
individually for each targeted register cell i ∈ {0, . . . , m− 1}.
We should also add the CNF of (3) for each targeted
register cell. Those observations ωj that are 0 cancel out the
corresponding coefﬁcient cj. Therefore, we can write
(cid:18) (cid:88)
∀j,ωj =1
cj
= 0.
(cid:19)
(cid:18) ∨∀j,ωj =1
(cid:19)
cj
= 1.
(6)
vi ⊕
(cid:19)
This translates to
(cid:18) ∨∀j,ωj =1
vi ∨
cj
= 1,
vi ∨
The left equation can be easily added as a clause to the SAT
(as it is already in CNF), but the right one should be split into
multiple clauses as follows:
∀j, ωj = 1,
vi ∨ cj = 1.
(7)
Having more snapshots at different clock cycles, the clauses
in (6) and (7) should be repeated for m distinct register
variables vi based on the corresponding observations ωj.
However,
they are
deﬁned only once for the entire circuit independent of the
number of snapshots. Accordingly, the clauses in (4) and (5)
are also not repeated.
j stay the same,
the coefﬁcients ci
i.e.,
The remaining task is to link the variables vi (of targeted
register cells) at different clock cycles. This is done based on
the underlying design architecture of the circuit under attack
and the functions it realizes. For example, in a round-based
architecture, the state register cells store the output of the
cipher round function, and the key register cells the round
keys. In a serialized architecture, the content of the registers
is shifted (e.g., in a byte-wise fashion), and certain operations
(e.g., Sbox) are applied on particular registers at determined
clock cycles.
In case of a masked implementation with d + 1 shares,
the number of targeted registers at each clock cycle becomes
m(d + 1) (for example, 512 × 2 for a ﬁrst-order masked
implementation of AES making use of the state and key
registers with 2 shares). Therefore, the entire clauses given
in (6) to (7) should be repeated d + 1 times. In the next step,
vi,l (for each clock
we deﬁne m virtual variables νi =
cycle), where (vi,1, . . . , vi,d+1) represent variable νi with d+1
shares. The corresponding clauses can be written as
d+1(cid:76)
l=1
∀i ∈ {1, . . . , m},
νi ⊕ vi,1 ⊕ . . . ⊕ vi,d+1 = 1.
The rest is similar to an unmasked implementation, i.e., the
(unmasked) variables νi at different clock cycles are linked
based on the design architecture of the circuit under attack.
© 2020 IEEE
17