...
if ((scc = PE_find_scc())) { // See if we can find the serial port
scc = io_map_spec(scc, 0x1000); // Map it in
initialize_serial((void *)scc); // Start the serial driver
PE_kputc = serial_putc;
simple_lock_init(&kprintf_lock, 0);
} else
PE_kputc = cnputc;
...
}
void
serial_putc(char c)
{
(void)scc_putc(0, 1, c);
if (c == '\n')
(void)scc_putc(0, 1, '\r');
}
void
kprintf(const char *fmt, ...)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 79 of 137
{
...
if (!disableSerialOutput) {
va_start(listp, fmt);
_doprnt(fmt, &listp, PE_kputc, 16);
va_end(listp);
}
...
}
Moreover, unlike GDB-based remote debugging, which works with the default Mac OS X kernel,
using KDB requires building a custom kernel with the DEBUG configuration (see Section 6.10 for a
discussion of kernel compilation).
6.8.3. CHUD Support
The Computer Hardware Understanding Development (CHUD) Tools software is a suite of graphical
and command-line programs for measuring and optimizing software performance on Mac OS X.[13] It
is also used for benchmarking and analyzing various aspects of system hardware. Besides user-space
programs, the CHUD Tools suite employs kernel extensions (CHUDProf.kext and CHUDUtils.kext),
which export a variety of functions to the user space through I/O Kit user clients.[14] Finally, the
kernel implements several functions and callback hooks for use by CHUD software. The
bsd/dev/ppc/chud/ and osfmk/ppc/chud/ directories contain the implementations of these
functions and hooks. Many of the functions are analogous to functions in the Mach API. The CHUD-
related functions and hooks in the kernel can be categorized as described in the following subsections.
[13] We enumerated the individual programs in the CHUD Tools suite in Chapter 2.
[14] An I/O Kit user client is an in-kernel object that allows a user-space application to
communicate with a device that the user client represents. We will look at user clients in
Chapter 10.
6.8.3.1. Task-Related Functions
Examples include chudxnu_current_task(), chudxnu_task_read(), chudxnu_task_write(),
chudxnu_pid_for_task(), chudxnu_task_for_pid(), chudxnu_current_pid(), and
chudxnu_is_64bit_task().
6.8.3.2. Thread-Related Functions
Examples include chudxnu_bind_thread(), chudxnu_unbind_thread(),
chudxnu_thread_get_state(), chudxnu_thread_set_state(),
chudxnu_thread_user_state_available(), chudxnu_thread_get_callstack(),
chudxnu_thread_get_callstack64(), chudxnu_current_thread(), chudxnu_task_for_thread
(), chudxnu_all_threads(), chudxnu_thread_info(), and
chudxnu_thread_last_context_switch().
6.8.3.3. Memory-Related Functions
Examples include chudxnu_avail_memory_size(), chudxnu_phys_memory_size(),
chudxnu_io_map(), and chudxnu_phys_addr_wimg().
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 80 of 137
6.8.3.4. CPU-Related Functions
These include functions for the following operations:
Retrieving the numbers of available and physical CPUs
Retrieving the current CPU's index
Starting and stopping CPUs
Enabling, disabling, and querying napping on a CPU
Enabling and disabling interrupts
Checking whether the current CPU is running in an interrupt context (determined by checking
whether the pointer to the interrupt stack is NULL or not)
Generating a fake I/O interrupt
Reading and writing special-purpose registers
Flushing and enabling CPU caches
Acquiring and releasing the performance-monitoring facility
Performing SCOM facility reads and writes
Retrieving a pointer to and the size of the branch-tracing buffer
Retrieving and clearing interrupt counters
6.8.3.5. Callback-Related Functions
The kernel supports registration of CHUD callbacks in several kernel subsystems, such as those listed
here.
 Per-CPU timer callback The CPU's per_proc_info structure's pp_chud field, which is a
pointer to a chudcpu_data_t structure, is used to hold timer-related data structures for this
callback.
 System-wide trap callback The perfTrapHook function pointer points to the callback. It is
invoked from TRap() [osfmk/ppc/trap.c] during trap processing.
 System-wide interrupt callback The perfIntHook function pointer points to the callback. It is
invoked from interrupt() [osfmk/ppc/interrupt.c] during interrupt processing.
 System-wide AST callback The perfASTHook function pointer points to the callback. It is
invoked from trap() [osfmk/ppc/trap.c] during trap processing.
 System-wide CPU signal callback The perfCpuSigHook function pointer points to the callback.
It is invoked from cpu_signal_handler() [osfmk/ppc/cpu.c] during the processing of inter-
CPU signals.
 System-wide kdebug callback The kdebug_chudhook function pointer points to the callback. It
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 81 of 137
is invoked from kernel_debug() [bsd/kern/kdebug.c] and its variants, which are used (as
part of KERNEL_DEBUG macros) throughout the kernel for fine-grained tracing of kernel events.
 System-wide system call callback The PowerPC-only system call 0x6009 becomes alivecalling
it from user space invokes the callback in the kernel.
Timer callbacks Multiple timers can be allocated, and thread-based callouts can be established
to run the CHUD timer callbacks.
Figure 630 shows how the kernel invokes CHUD system-wide hooks for traps and ASTs.
Figure 630. Invocation of CHUD system-wide hooks for traps and ASTs
/ osfmk/ppc/trap.c
struct savearea *
trap(int trapno, struct savearea *ssp, unsigned int dsisr, addr64_t dar)
{
...
ast_t *myast;
...
myast = ast_pending();
if (perfASTHook) {
if (*myast & AST_PPC_CHUD_ALL) {
perfASTHook(trapno, ssp, dsisr, (unsigned int)dar);
}
} else {
*myast &= ~AST_PPC_CHUD_ALL;
}
if (perfTrapHook) {
if (perfTrapHook(trapno, ssp, dsisr, (unsigned int)dar) ==
KERN_SUCCESS)
return ssp; // if it succeeds, we are done...
}
...
}
Let us look at the operation of the CHUD system call hook. We noted in Table 612 that the PowerPC-
only system call 0x6009 (CHUDCall) is disabled by default. Figure 631 shows that invoking a disabled
PowerPC-only system call results in an erroneous (nonzero) return.
Figure 631. Invoking a disabled PowerPC-only system call
// CHUDCall.c
#include 
int
CHUDCall(void)
{
int ret;
__asm__ volatile(
"li r0,0x6009\n"
"sc\n"
"mr %0,r3\n"
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 82 of 137
: "=r" (ret) // output
: // no input
);
return ret;
}
int
main(void)
{
int ret = CHUDCall();
printf("%d\n", ret);
return ret;
}
$ gcc -Wall -o CHUDCall CHUDCall.c
$ ./CHUDCall
1
Let us now see what is involved in registering a CHUD system call callback with the kernel. If
successfully registered, the callback will be invoked in the kernel when the 0x6009 system call is
executed. We can carry out such an experiment by using the following steps.
Create a trivial loadable kernel extension that has only the start and stop entry points. We will
discuss kernel extensions in Chapter 10. You can create a trivial kernel extension using the
Generic Kernel Extension template in Xcode.
Implement a wrapper function that first checks whether the callback function pointer is non-
NULL, and if so, it copies the save area that the 0x6009 system call receives as an argument to a
thread state structure. It then invokes the callback with a pointer to the thread state structure as
an argument.
Implement a function that copies information from a save area to a thread state structure.
Implement a function that sets PPCcalls[9]the table entry for system call 0x6009to point to
the wrapper. Call this function from the kernel extension's start routine.
 Implement a function that disables the 0x6009 system call by setting PPCcalls[9] to NULL.
Call this function from the kernel extension's stop routine.
Figure 632 shows most of the code for implementing these steps. Note that the code, including the
portion that is not shown, is largely identical to the code in
osfmk/ppc/chud/chud_osfmk_callback.c. To create a working kernel extension for this
experiment, you need to provide the missing code.
Figure 632. Implementing a kernel extension to register a PowerPC-only system call
// CHUDSyscallExtension.c
#include 
#include 
#define XNU_KERNEL_PRIVATE
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 83 of 137
#define __APPLE_API_PRIVATE
#define MACH_KERNEL_PRIVATE
// Either include the appropriate headers or provide structure declarations
// for the following:
//
// struct savearea
// struct ppc_thread_state
// struct ppc_thread_state64
// PowerPC-only system call table (from osfmk/ppc/PPCcalls.h)
typedef int (* PPCcallEnt)(struct savearea *save);
extern PPCcallEnt PPCcalls[];
// The callback function's prototype
typedef kern_return_t (* ppc_syscall_callback_func_t) \
(thread_flavor_t flavor, thread_state_t tstate, \
mach_msg_type_number_t count);
// Pointer for referring to the incoming callback function
static ppc_syscall_callback_func_t callback_func = NULL;
// Identical to chudxnu_copy_savearea_to_threadstate(), which is implemented
// in osfmk/ppc/chud/chud_osfmk_callbacks.c
kern_return_t
ppc_copy_savearea_to_threadstate(thread_flavor_t flavor,
thread_state_t tstate,
mach_msg_type_number_t *count,
struct savearea *sv)
{
...
}
// PPCcalls[9] will point to this when a callback is registered
kern_return_t
callback_wrapper(struct savearea *ssp)
{
if (ssp) {
if (callback_func) {
struct my_ppc_thread_state64 state;
mach_msg_type_number_t count = PPC_THREAD_STATE64_COUNT;
ppc_copy_savearea_to_threadstate(PPC_THREAD_STATE64,
(thread_state_t)&state,
&count, ssp);
ssp->save_r3 = (callback_func)(PPC_THREAD_STATE64,
(thread_state_t)&state, count);
} else {
ssp->save_r3 = KERN_FAILURE;
}
}
return 1; // Check for ASTs
}
// Example callback function
kern_return_t
callback_func_example(thread_flavor_t flavor,
thread_state_t tstate,
mach_msg_type_number_t count)
{
printf("Hello, CHUD!\n");
return KERN_SUCCESS;
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 84 of 137
/ Callback registration
kern_return_t
ppc_syscall_callback_enter(ppc_syscall_callback_func_t func)
{
callback_func = func;
PPCcalls[9] = callback_wrapper;
__asm__ volatile("eieio");
__asm__ volatile("sync");
return KERN_SUCCESS;
}
// Callback cancellation
kern_return_t
ppc_syscall_callback_cancel(void)
{
callback_func = NULL;
PPCcalls[9] = NULL;
__asm__ volatile("eieio");
__asm__ volatile("sync");
return KERN_SUCCESS;
}
kern_return_t
PPCSysCallKEXT_start(kmod_info_t *ki, void *d)
{
ppc_syscall_callback_enter(callback_func_example);
printf("PPCSysCallKEXT_start\n");
return KERN_SUCCESS;
}
kern_return_t
PPCSysCallKEXT_stop(kmod_info_t *ki, void *d)
{
ppc_syscall_callback_cancel();
printf("PPCSysCallKEXT_stop\n");
return KERN_SUCCESS;
}
If you run the program from Figure 631 after the kernel extension shown in Figure 632 is loaded, you
should get a zero return from the system call, and the "Hello, CHUD!" message should appear in the
system log.
6.8.4. Kernel Profiling (kgmon and gprof)
The Mac OS X kernel can be compiled with support for profiling its own code. Such a compilation is
achieved by selecting the PROFILE configuration before initiating a kernel build. Doing so enables
several aspects of the kernel profiling mechanism, such as the following.
 The kernel is compiled with the -pg GCC option, thereby generating extra code to write
profiling information for subsequent analysis.