以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[17] A. Sepp, B. Mihaila, 和 A. Simon, “从二进制文件中提取关系信息的精确静态分析,” 18th Working Conference on Reverse Engineering (WCRE 2011). IEEE, 2011. [在线]. 可访问: http://dx.doi.org/10.1109/WCRE.2011.50

[18] K. R. M. Leino, “高效的最弱前置条件,” 《信息处理通讯》, 卷 93, 期 6, 2005.

[19] A. Biere, A. Cimatti, E. M. Clarke, 和 Y. Zhu, “无BDD的符号模型检查,” 在 TACAS 1999. Springer, 1999.

[20] A. Djoudi 和 S. Bardin, “Binsec: 基于低级区域的二进制代码分析,” 在 Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2015.

[21] R. David, S. Bardin, T. Thanh Dinh, J. Feist, L. Mounier, M.-L. Potet, 和 J.-Y. Marion, “BINSEC/SE: 用于二进制级别分析的动态符号执行工具包,” 在 SANER 2016. IEEE, 2016.

[22] J. Calvet, J. Campos, 和 T. Dupuy, “参观熊窝：网络间谍之旅,” RECON 2016, 蒙特利尔, 2016年6月17日.

[23] P. Junod, J. Rinaldini, J. Wehrli, 和 J. Michielin, “Obfuscator-llvm: 一种LLVM框架下的混淆器,” IEEE Press, 2015.

[24] J. Vanegue 和 S. Heelan, “软件安全中的SMT求解器,” 在 WOOT 2012. Usenix Association, 2012, 页 85–96. [在线]. 可访问: http://www.usenix.org/conference/woot12/smt-solvers-software-security

[25] P. Godefroid, N. Klarlund, 和 K. Sen, “DART: 有向自动化随机测试,” SIGPLAN Not., 卷 40, 期 6, 2005.

[26] K. Sen, D. Marinov, 和 G. Agha, “CUTE: 一个针对C语言的共形单元测试引擎,” SIGSOFT Softw. Eng. Notes, 卷 30, 期 5, 2005.

[27] R. David, S. Bardin, J. Feist, J.-Y. Marion, L. Mounier, M.-L. Potet, 和 T. D. Ta, “符号执行中具体化和符号化策略的规范,” 在 ISSTA 2016. ACM, 2016年7月.

[28] S. Bardin 和 P. Herrmann, “OSMOSE: 自动结构测试可执行文件,” 《软件测试、验证与可靠性》, 卷 21, 期 1, 2011.

[29] V. Chipounov, V. Kuznetsov, 和 G. Candea, “S2E平台: 设计、实现与应用,” 《ACM计算系统事务》, 卷 30, 期 1, 2012年2月.

[30] S. K. Cha, T. Avgerinos, A. Rebert, 和 D. Brumley, “对二进制代码释放混乱,” 在 SP 2012. IEEE, 2012.

[31] M. D. Preda, R. Giacobazzi, S. K. Debray, K. Coogan, 和 G. M. Townsend, “通过抽象解释建模多态性,” 在 SAS 2010. Springer, 2010.

[32] S. Bardin, P. Herrmann, J. Leroux, O. Ly, R. Tabary, 和 A. Vincent, “用于二进制代码分析的Bincoa框架,” 在 CAV 2011. Springer, 2011. [在线]. 可访问: http://dx.doi.org/10.1007/978-3-642-22110-1_13

[33] P. Larsen, A. Homescu, S. Brunthaler, 和 M. Franz, “综述: 自动软件多样化,” 在 SP 2014, 2014年5月.

[34] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, 和 P. G. Bringas, “综述: 运行时打包器的深度检查: 复杂性的纵向研究,” 在 SP 2015, 2015. [在线]. 可访问: http://dx.doi.org/10.1109/SP.2015.46

[35] C. Collberg, S. Martin, J. Myers, 和 J. Nagra, “通过持续软件更新进行分布式应用程序篡改检测,” 在 ACSAC 2012. ACM, 2012.

[36] Trend Micro, “Operation Pawn Storm: 使用诱饵逃避检测,” 技术报告, 2014.

[37] ESET Research, “Sednit APT Group Meets Hacking Team,” http://www.welivesecurity.com/2015/07/10/sednit-apt-group-meets-hacking-team/, 2015年10月.

[38] Trend Micro, “Operation Pawn Storm 加剧活动; 目标是北约和白宫,” 2015年4月.

[11] B. Yadegari, B. Johannesmeyer, B. Whitely, 和 S. Debray, “一种通用的方法来自动反混淆可执行代码,” 在 SP 2015, 2015年5月.

[39] von Gastbeitrag, “德国议会的数字攻击: 对左翼党在联邦议院基础设施被黑客攻击的调查报告,” 2015年6月.

[40] D. Alperovitch, “Bears in the Midst: 民主国家委员会的入侵,” https://www.crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/, 2016年6月.

[41] N. Mehta 和 B. Leonard, “CVE-2016-7855: Chromium Win32k系统调用锁定,” 技术报告, 2016.

[42] D. Creus, T. Halfpop, 和 R. Falcone, “Sofacy的‘Komplex’ OS X Trojan,” http://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/, 2016年9月.

[43] Y. Zhou, A. Main, Y. X. Gu, 和 H. Johnson, “基于混合布尔-算术变换的信息隐藏,” 在 Information Security Applications. Berlin, Heidelberg: Springer Berlin Heidelberg, 2007, 卷 4867, 页 61–75.

[44] N. Eyrolles, L. Goubin, 和 M. Videau, “击败基于MBA的混淆,” 在 SPRO 2016 (CCS研讨会), ACM, 编辑, 2016.

[45] S. Banescu, C. S. Collberg, V. Ganesh, Z. Newsham, 和 A. Pretschner, “对抗符号执行攻击的代码混淆,” 在 ACSAC 2016. ACM, 2016.

[46] N. M. Hai, M. Ogawa, 和 Q. T. Tho, Foundations and Practice of Security: 8th International Symposium, FPS 2015, Revised Selected Papers. Springer, 2016, 章节: 基于CFG生成的恶意软件代码混淆定位. [在线]. 可访问: http://dx.doi.org/10.1007/978-3-319-30303-1_14

[47] A. Finkel 和 P. Schnoebelen, “到处都是良好结构的转换系统!” 《理论计算机科学》, 卷 256, 期 1-2, 2001.

[48] F. Charreteur 和 A. Gotlieb, “基于约束的Java字节码测试输入生成,” 在 ISSRE 2010. IEEE, 2010.

[49] S. Bardin, M. Delahaye, R. David, N. Kosmatov, M. Papadakis, Y. L. Traon, 和 J. Marion, “不可行测试需求的声音且准完全检测,” 在 ICST 2015. IEEE, 2015.

[50] T. Reinbacher 和 J. Brauer, “使用布尔逻辑的精确控制流重建,” 在 EMSOFT 2011. ACM, 2011. [在线]. 可访问: http://doi.acm.org/10.1145/2038642.2038662

[51] S. Blazy, V. Laporte, 和 D. Pichardie, “经过验证的抽象解释技术用于反汇编低级自修改代码,” 在 ITP 2014. Springer, 2014.

[52] M. Dalla Preda, M. Madou, K. De Bosschere, 和 R. Giacobazzi, “通过抽象解释检测不透明谓词,” 在 AMAST 2006. Springer-Verlag, 2006. [在线]. 可访问: http://dx.doi.org/10.1007/11784180_9

[53] M. H. Nguyen, T. B. Nguyen, T. T. Quan, 和 M. Ogawa, “从二进制代码构建控制流图的混合方法,” 在 APSEC 2013, 卷 2, 2013年12月.

[54] G. Myles 和 C. Collberg, “通过不透明谓词进行软件水印: 实现、分析和攻击,” 《电子商务研究》, 卷 6, 期 2, 2006. [在线]. 可访问: http://dx.doi.org/10.1007/s10660-006-6955-z

[55] J. Palsberg, S. Krishnaswamy, M. Kwon, D. Ma, Q. Shao, 和 Y. Zhang, “软件水印的经验,” 在 ACSAC 2000, 2000. [在线]. 可访问: http://dx.doi.org/10.1109/ACSAC.2000.898885

[56] S. K. Udupa, S. K. Debray, 和 M. Madou, “反混淆: 反向工程混淆代码,” 在 WCRE 2005, 2005.

---

**附录**

**(第六部分B段扩展)** 图14展示了表V结果的图形表示。x轴表示边界值k，y轴表示识别为不透明谓词、真实谓词的数量，以及超时（TO）、假阳性（FP）和假阴性（FN）的数量。随着k的增加，FN数量显著减少，而FP数量缓慢增加。在这里，TO数量保持在非常低的水平。

**(第七部分B段扩展)** 关于调用/堆栈篡改的发现。从调用/堆栈篡改的角度来看，并根据第五部分定义的分类，检测到了许多不同类型的违规行为。在ACProtect中找到的前两个模式分别如图15和16所示，被标记为[违反], [单个], [对齐]和[违反], [单个], [不对齐]。图18、17和19显示了在ASPack中发现的三种不同的违规类型。在第一个例子（见图18）中，篡改被标记为[违反], [不对齐]，因为堆栈指针在错误的偏移量处读取返回地址。在第二个例子（见图17）中，返回值在原地被修改。篡改被标记为[违反], [对齐], [单个]。最后一个例子（见图19）发生在两个自修改层之间的过渡过程中，ret指令用于尾部过渡到打包器的有效载荷（即原始的未打包程序）。这种违规被标记为[违反], [不对齐], [单个]，因为分析匹配了追踪中更早的一个调用，该调用是不对齐的。注意，地址10043ba处的push 0x10011d7指令最初是一个push 0，但在执行地址10043a9处的指令时被修补，触发进入一个新的自修改层。这种模式反映了在许多打包器（如nPack、TELock或Upack）中普遍存在的现象，这些打包器只有一个被篡改的ret：它们通过push; ret来进行尾部过渡到原始（已打包）程序的入口点。因此，这种分析可以精确地找到执行追踪中的那个时刻，在那一刻有效载荷很可能在内存中被解压缩。

**图15: ACProtect违规1/2**
| 地址 | 操作码 | 注释 |
|------|--------|------|
| 1004328 | call 0x1004318 | // 将0x100432d作为返回地址压入栈 |
| 1004318 | add [esp], 9 | // 在原地篡改值 |
| 100431c | ret | // 返回到0x1004n336 |

**图16: ACProtect违规2/2**
| 地址 | 操作码 | 注释 |
|------|--------|------|
| 1001000 | push 0x1004000 | // 跳转到下面的ret |
| 1001005 | push 0x100100b | // 跳转到0x1004000 |
| 100100a | ret | |
| 100100b | ret | |

**图17: ASPack违规1/3**
| 地址 | 操作码 | 注释 |
|------|--------|------|
| 1004a3a | call 0x1004c96 | // 将0x1004a3f作为返回地址压入栈 |
| 1004c96 | call 0x1004c9c | // 将0x1004c9b作为返回地址压入栈 |
| 1004c9c | pop esi | // 将返回地址弹出到esi |
| 1004c9d | sub esi, 4474311 | // 返回到0x1004a3f |

**图18: ASPack违规2/3**
| 地址 | 操作码 | 注释 |
|------|--------|------|
| 1004002 | call 0x100400a | // 将0x1004007作为返回地址压入栈 |
| 1004007 | .byte invalid | // 无效字节（无法反汇编） |
| 1004008 | ... | // 未反汇编 |
| 100400a | pop ebp | // 将返回地址弹出到ebp |
| 100400b | inc ebp | // 增加ebp |
| 100400c | push ebp | // 将值重新压入栈 |
| 100400d | ret | // 跳转到0x1004008 |

**图19: ASPack违规3/3**
| 地址 | 操作码 | 注释 |
|------|--------|------|
| 10043a9 | mov [ebp+0x3a8], eax | // 修补10043ba处的push值* |
| 10043af | popa | // 恢复初始程序上下文 |
| 10043b0 | jnz 0x10043ba | // 进入最后一个SM层（有效载荷） |
| 10043ba | push 0x10011d7 | // 将入口点地址压入栈 |
| 10043bf | ret | // 使用ret跳转到它 |
| 10011d7 | ... | // 开始执行有效载荷 |
| *(运行时eax=10011d7且ebp+0x3a8=10043bb) | // * |

**(第七部分A段扩展)** 打包器实验的详细情况。表XVI展示了表VII中呈现的实验的完整视图。

**表XVI: 打包器实验: 不透明谓词与调用堆栈篡改**

| 打包器 | 动态 | #proc | 自我修改 | #layers | 混淆检测 | 不透明谓词 (k16) |
|--------|-------|-------|----------|---------|-----------|------------------|
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 1         | -                |
| 1      | 1     | 1     | 1        | 1       | 