kernel to the pager. An external pager demultiplexes all messages it receives using the
memory_object_server() routine.
[9] In Mac OS X, the "message" is simply a function call, not an IPC message.
kern_return_t
memory_object_init(memory_object_t memory_object,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 17 of 135
memory_object_control_t memory_control,
memory_object_cluster_size_t memory_object_page_size);
The memory_object argument to memory_object_init() is the port representing the memory object in
question. Since the pager can give different clients different memory objects, the client tells the pager
which memory object it is dealing with. memory_control, which the kernel provides to the pager, is a
port to which the kernel holds receive rights. The pager uses this port to send messages to the kernel.
Hence, it is also called the pager reply port.
In Mach, a pager could be serving multiple kernels. In that case, there would be a separate control port for
each kernel.
Consider the specific example of the vnode pager in Mac OS X. When memory_object_init()
determines (using the hardcoded vnode pager port) that the memory object passed to it corresponds to the
vnode pager, it calls vnode_pager_init() [osfmk/vm/bsd_vm.c]. The latter does not really set up the
vnode pager, which was already set up when the vnode was created. However, vnode_pager_init()
does call memory_object_change_attributes() to set the kernel's attributes for the memory object.
kern_return_t
memory_object_change_attributes(memory_object_control_t control,
memory_object_flavor_t flavor,
memory_object_info_t attributes,
mach_msg_type_number_t count);
The kernel maintains per-object attributes for mapped objects. Cacheability and copy strategy are
examples of such attributes. Cacheability specifies whether the kernel should cache the object (provided
there is enough memory) even after all users of the object are gone. If an object is marked as not
cacheable, it will not be retained when it is not in use: The kernel will return the dirty pages to the pager,
reclaim the clean pages, and inform the pager that the object is no longer in use. Copy strategy specifies
how the memory object's pages are copied. The following are examples of valid copy strategies.
 MEMORY_OBJECT_COPY_NONE The pager's pages should be copied immediately, with no copy-on-
write optimization by the kernel.
 MEMORY_OBJECT_COPY_CALL If the kernel needs to copy any of the pager's pages, it should call the
pager.
 MEMORY_OBJECT_COPY_DELAY The pager promises not to change externally any of the data cached
by the kernel, so the kernel is free to use an optimized copy-on-write strategy (see asymmetric
copy-on-write in Section 8.3.7).
 MEMORY_OBJECT_COPY_TEMPORARY This strategy acts like MEMORY_OBJECT_COPY_DELAY;
additionally, the pager is not interested in seeing any changes from the kernel.
 MEMORY_OBJECT_COPY_SYMMETRIC This strategy acts like MEMORY_OBJECT_COPY_TEMPORARY;
additionally, the memory object will not be multiply mapped (see symmetric copy-on-write in
Section 8.3.7).
The attributes can be retrieved through memory_object_get_attributes().
kern_return_t
memory_object_get_attributes(memory_object_control_t control,
memory_object_flavor_t flavor,
memory_object_info_t attributes,
mach_msg_type_number_t *count);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 18 of 135
When a client task accesses a memory object page that is not resident, a page fault occurs. The kernel
locates the appropriate VM object, which refers to the memory object. The kernel sends the pager a
memory_object_data_request() message. The pager will typically provide the data, fetching it from the
backing store.
kern_return_t
memory_object_data_request(memory_object_t memory_object,
memory_object_offset_t offset,
memory_object_cluster_size_t length,
vm_prot_t desired_access);
In Mach, the pager would respond to memory_object_data_request() by sending an asynchronous
reply to the kernel: it would send a memory_object_data_supply() or memory_object_data_provided
() message (depending on the Mach version) to the memory object control port. In Mac OS X,
memory_object_data_request() explicitly calls one of the three pagers. In the case of the vnode pager,
the kernel calls vnode_pager_data_request() [osfmk/vm/bsd_vm.c], which in turn calls
vnode_pager_cluster_read() [osfmk/vm/bds_vm.c]. The latter causes data to be paged in by calling
vnode_pagein() [bsd/vm/vnode_pager.c], which eventually calls the file-system-specific page-in
operation.
Paging Problems
In Mach, the pager can also reply with a memory_object_data_unavailable() or
memory_object_data_error() message. memory_object_data_unavailable() means
that although the range within the memory object is valid, there is no data for it yet. This
message notifies the kernel to return zero-filled pages for the range. Although the pager itself
could create zero-filled pages and supply them through memory_object_data_supply(), the
kernel's zero-fill code is likely to be more optimized. If a paging errorsay, a bad disk
sectorcauses the pager to fail to retrieve data, the pager can respond with a
memory_object_data_error() message.
When the kernel needs to reclaim memory and there are dirty pages for a memory object, the kernel can
send those pages to the pager through memory_object_data_return(). In Mac OS X, the in-kernel
page-out daemon does this.
kern_return_t
memory_object_data_return(memory_object_t memory_object,
memory_object_offset_t offset,
vm_size_t size,
memory_object_offset_t *resid_offset,
int *io_error,
boolean_t dirty,
boolean_t kernel_copy,
int upl_flags);
There is no explicit response to this messagethe pager simply deallocates the pages from its address space
so that the kernel can use the physical memory for other purposes. In Mac OS X, for the vnode pager,
memory_object_data_return() calls vnode_pager_data_return() [osfmk/vm/bsd_vm.c], which in
turn calls vnode_pager_cluster_write() [osfmk/vm/bsd_vm.c]. The latter causes data to be paged out
by calling vnode_pageout() [bsd/vm/vnode_pager.c], which eventually calls the file-system-specific
page-out operation.
A pager uses memory_object_lock_request() to control use of the (resident) data associated with the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 19 of 135
given memory object. The data is specified as the number of bytes (the size argument) starting at a given
byte offset (the offset argument) within the memory object. memory_object_lock_request() sanity-
checks its arguments and calls vm_object_update() [osfmk/vm/memory_object.c] on the associated
VM object.
kern_return_t
memory_object_lock_request(memory_object_control_t control,
memory_object_offset_t offset,
memory_object_size_t size,
memory_object_offset_t *resid_offset,
int *io_errno,
memory_object_return_t should_return,
int flags,
vm_prot_t prot);
The should_return argument to memory_object_lock_request() is used to specify the data to be
returned, if at all, to the memory manager. It can take the following values:
 MEMORY_OBJECT_RETURN_NONE do not return any pages
 MEMORY_OBJECT_RETURN_DIRTY return only dirty pages
 MEMORY_OBJECT_RETURN_ALL return both dirty and precious pages
 MEMORY_OBJECT_RETURN_ANYTHING return all resident pages
The flags argument specifies the operation to perform, if any, on the data. Valid operations are
MEMORY_OBJECT_DATA_FLUSH, MEMORY_OBJECT_DATA_NO_CHANGE, MEMORY_OBJECT_DATA_PURGE,
MEMORY_OBJECT_COPY_SYNC, MEMORY_OBJECT_DATA_SYNC, and MEMORY_OBJECT_IO_SYNC. Note that the
combination of should_return and flags determines the fate of the data. For example, if
should_return is MEMORY_OBJECT_RETURN_NONE and flags is MEMORY_OBJECT_DATA_FLUSH, the
resident pages will be discarded.
The prot argument is used to restrict access to the given memory. Its value specifies the access that
should be disallowed. The special value VM_PROT_NO_CHANGE is used when no change in protection is
desired.
The kernel uses memory_object_terminate() to notify the pager that the object is no longer in use. The
pager uses memory_object_destroy() to notify the kernel to shut down a memory object even if there
are references to the associated VM object. This results in a call to vm_object_destroy()
[osfmk/vm/vm_object.c]. In Mac OS X, memory_object_destroy() is called because of vclean()
[bsd/vfs/vfs_subr.c], which cleans a vnode when it is being reclaimed.
kern_return_t
memory_object_terminate(memory_object_t memory_object);
kern_return_t
memory_object_destroy(memory_object_control_t control, kern_return_t reason);
8.3.7. Copy-on-Write
Copy-on-write (COW) is an optimization technique wherein a memory copy operation defers the copying
of physical pages until one of the parties involved in the copy writes to that memoryuntil then, the
physical pages are shared between the parties. As long as copied data is only read and not written to,
copy-on-write saves both time and physical memory. Even when the data is written to, copy-on-write
copies only the modified pages.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 20 of 135
Note in Figure 86 that two of the VM entries are shown as pointing to the same VM object. This is how
Mach implements symmetric copy-on-write sharing. Figure 88 shows the scheme. In a symmetric copy-
on-write operation, the needs_copy bit is set in both the source and destination VM map entries. Both
entries point to the same VM object, whose reference count is incremented. Moreover, all pages in the
VM object are write-protected. At this point, both tasks access the same physical pages while reading
from the shared memory. When such a page is written to by one of the tasks, a page protection fault
occurs. The kernel does not modify the original VM object but creates a new VM objecta shadow object
containing a copy of the faulting pageand gives it to the task that modified the page. The other pages,
including the unmodified version of the page in question, remain in the original VM object, whose
needs_copy bit remains set.
Figure 88. Symmetric copy-on-write using shadow objects
[View full size image]
In Figure 88, when the destination task accesses a previously copy-on-write-shared page that it has
already modified, the kernel will find that page in the shadow object. The remaining pages will not be
found in the shadow objectthe kernel will follow the pointer to the original object and find them there.
Multiple copy-on-write operations can result in a shadow object being shadowed by another, leading to a
shadow chain. The kernel attempts to collapse such chains when possible. In particular, if all pages in
some VM object are shadowed by the parent object, the latter does not need to shadow the former any
moreit can shadow the next VM object, if any, in the chain.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 21 of 135
The scheme is symmetric because its operation does not depend on which taskthe source or the destination
in the copy-on-write operationmodifies a shared page.
It is important to note that when a shadow object is created during a symmetric copy-on-write, no memory
manager is recorded for it. The kernel will use swap space as the backing store, and the default pager as
the memory manager, when it needs to page out anonymous memory. There is a problem, however, if an
external memory managersay, the vnode pager in the case of a memory-mapped filebacks the original VM
object. The kernel cannot change the VM object because doing so would disconnect the file mapping.
Since page modifications in a symmetric copy-on-write are seen only by shadow objects, the original VM
object, which is connected to the memory manager, will never see those modifications. Mach solves this
problem by using an asymmetric copy-on-write algorithm, in which the source party retains the original
VM object and the kernel creates a new object for the destination. The asymmetric algorithm works as
follows (see Figure 89).
When a copy operation is performed, create a new objecta copy objectfor use by the destination.
 Point the shadow field of the copy object to the original object.
 Point the copy field of the original object to the copy object.
Mark the copy object as copy-on-write. Note that the original object is not marked copy-on-write in
this case.
Whenever a page is about to be modified in the source mapping, copy it to a new page first and
push that page to the copy object.
Figure 89. Asymmetric copy-on-write using copy objects
[View full size image]
8.3.8. The Physical Map (Pmap)
A VM map also points to a physical map (pmap) data structure (struct pmap [osfmk/ppc/pmap.h]),
which describes hardware-defined virtual-to-physical address translation mappings. Mach's pmap layer
encapsulates the machine-dependent VM codein particular, that for managing the MMU and the
cachesand exports generic functions for use by the machine-independent layer. To understand the pmap
layer's role in the system, let us look at examples of functions in the pmap interface.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 22 of 135
The Mac OS X kernel contains additional code outside of the pmap modulein osfmk/ppc/mappings.cto
maintain virtual-to-physical mappings on the PowerPC. This code acts as a bridge between the pmap layer
and the underlying hardware, which is contrary to Mach's traditional encapsulation of all hardware-
dependent code within the pmap layer.
8.3.8.1. The Pmap Interface
pmap_map() maps the virtual address range starting at va to the physical address range spa through epa,
with the machine-independent protection value prot. This function is called during bootstrapping to map
various ranges, such as those corresponding to the exception vectors, the kernel's text segment, and the
kernel's data segment.
vm_offset_t
pmap_map(vm_offset_t va, vm_offset_t spa, vm_offset_t epa, vm_prot_t prot);
pmap_map_physical() and pmap_map_iohole() are special versions of pmap_map(). The former maps
physical memory into the kernel's address map. The virtual address used for this mapping is lgPMWvaddr,
the so-called physical memory window. pmap_map_iohole() takes a physical address and size and then
maps an "I/O hole" in the physical memory window.
pmap_create() creates and returns a physical map, either by recovering one from the list of free pmaps
or by allocating one from scratch.
pmap_t
pmap_create(vm_map_size_t size);
Besides the list of free pmaps (free_pmap_list), the kernel also maintains the following relevant data
structures:
A list of in-use pmaps (anchored by kernel_pmap, the kernel pmap).
A list of physical addresses of in-use pmaps (anchored by kernel_pmap_phys).
A pointer to a cursor pmap (cursor_pmap), which the kernel uses as the starting point while
searching for free pmaps. cursor_pmap points to either the last pmap allocated or to the previous-
to-last if it was removed from the in-use list of pmaps.
The kernel pmap is located in a 512-byte block in the V=R (virtual=real) area. Therefore,
kernel_pmap_phys and kernel_pmap both point to the same location. Each address space is assigned an
identifier that is unique within the system. The identifier is used to construct the 24-bit PowerPC virtual
segment identifier (VSID). The number of active address spaces is limited by maxAdrSp (defined to be
16384 in osfmk/ppc/pmap.h).
pmap_create() is called during task creation, regardless of whether the child is inheriting the parent's
memory or not. If no memory is being inherited, a "clean slate" address space is created for the child task;
otherwise, each VM entry in the parent is examined to see if it needs to be shared, copied, or not inherited
at all.
pmap_destroy() removes a reference to the given pmap. When the reference count reaches zero, the
pmap is added to the list of free pmaps, which caches the first free_pmap_max (32) pmaps that are freed
up. pmap_destroy() is called when a VM map is destroyed after the last reference to it goes away.
void
pmap_destroy(pmap_t pmap);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 23 of 135
pmap_reference() increments the reference count of the given pmap by one.
void
pmap_reference(pmap_t pmap);
pmap_enter() creates a translation for the virtual address va to the physical page number pa in the given
pmap with the protection prot.
void
pmap_enter(pmap_t pmap,
vm_map_offset_t va,
ppnum_t pa,
vm_prot_t prot,
unsigned int flags,
__unused boolean_t wired);
The flags argument can be used to specify particular attributes for the mappingfor example, to specify
cache modes:
 VM_MEM_NOT_CACHEABLE (cache inhibited)
 VM_WIMG_WTHRU (write-through cache)
 VM_WIMG_WCOMB (write-combine cache)
 VM_WIMG_COPYBACK (copyback cache)
pmap_remove() unmaps all virtual addresses in the virtual address range determined by the given pmap
and [sva, eva)that is, inclusive of sva but exclusive of eva. If the pmap in question is a nested pmap, then
pmap_remove() will not remove any mappings. A nested pmap is one that has been inserted into another
pmap. The kernel uses nested pmaps to implement shared segments, which in turn are used by shared
libraries and the commpage mechanism.
void
pmap_remove(pmap_t pmap, addr64_t sva, addr64_t eva);
pmap_page_protect() lowers the permissions for all mappings to a given page. In particular, if prot is
VM_PROT_NONE, this function removes all mappings to the page.
void
pmap_page_protect(ppnum_t pa, vm_prot_t prot);
pmap_protect() changes the protection on all virtual addresses in the virtual address range determined
by the given pmap and [sva, eva). If prot is VM_PROT_NONE, pmap_remove() is called on the virtual
address range.
void
pmap_protect(pmap_t pmap,
vm_map_offset_t sva,
vm_map_offset_t eva,
vm_prot_t prot);
pmap_clear_modify() clears the dirty bit for a machine-independent page starting at the given physical
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 24 of 135
address. pmap_is_modified() checks whether the given physical page has been modified since the last
call to pmap_clear_modify(). Similarly, pmap_clear_reference() and pmap_is_referenced()
operate on the referenced bit of the given physical page.
void pmap_clear_modify(ppnum pa);
boolean_t pmap_is_modified(register ppnum_t pa);
void pmap_clear_reference(ppnum_t pa);
boolean_t pmap_is_referenced(ppnum_t pa);
pmap_switch() switches to a new pmapthat is, it changes to a new address space. It is called during a
thread context switch (unless the two threads belong to the same task and therefore share the same address
space).
void
pmap_switch(pmap_t pmap);
PMAP_ACTIVATE(pmap, thread, cpu) and PMAP_DEACTIVATE(pmap, thread, cpu) activate and
deactivate, respectively, pmap for use by tHRead on cpu. Both these routines are defined to be null macros
on the PowerPC.
8.4. Resident Memory
Mach divides an address space into pages, with the page size usually being the same as the native
hardware page size, although Mach's design allows a larger virtual page size to be built from multiple