title:A strict evaluation method on the number of conditions for the SHA-1
collision search
author:Jun Yajima and
Terutoshi Iwasaki and
Yusuke Naito and
Yu Sasaki and
Takeshi Shimoyama and
Noboru Kunihiro and
Kazuo Ohta
A Strict Evaluation Method on the Number of Conditions
for the SHA-1 Collision Search
Jun Yajima
FUJITSU
LABORATORIES LTD.
4-1-1, Kamikodanaka,
Nakahara-ku, Kawasaki,
Kanagawa, 211-8588 Japan
PI:EMAIL
‡
Yu Sasaki
The University of
Electro-Communications
1-5-1, Chofugaoka, Chofu-shi,
Tokyo, 182-8585 Japan
∗
Terutoshi Iwasaki
Chuo-University
1-13-27, Kasuga, Bunkyo-ku,
Tokyo, 112-8551 Japan
Takeshi Shimoyama
FUJITSU
LABORATORIES LTD.
4-1-1, Kamikodanaka,
Nakahara-ku, Kawasaki,
Kanagawa, 211-8588 Japan
†
Yusuke Naito
The University of
Electro-Communications
1-5-1, Chofugaoka, Chofu-shi,
Tokyo, 182-8585 Japan
Noboru Kunihiro
The University of
Electro-Communications
1-5-1, Chofugaoka, Chofu-shi,
Tokyo, 182-8585 Japan
Kazuo Ohta
The University of
Electro-Communications
1-5-1, Chofugaoka, Chofu-shi,
Tokyo, 182-8585 Japan
ABSTRACT
This paper proposes a new algorithm for evaluating the num-
ber of chaining variable conditions(CVCs) in the selecting
step of a disturbance vector (DV) for the analysis of SHA-1
collision attack. The algorithm is constructed by combining
the following four strategies, “Strict Diﬀerential Bit Com-
pression”, “DV expansion”, “Precise Counting Rules in Ev-
ery Step” and “Diﬀerential Path Conﬁrmation for Rounds 2
to 4”, that can evaluate the number of CVCs more strictly
compared with the previous approach.
Categories and Subject Descriptors
E.3 [DATA ENCRYPTION]: [Standards, Public key cryp-
tosystems]
tute, Ltd.”
∗This author’s present aﬃliation is “Nomura Research Insti-
†This author’s present aﬃliation is “Information Technology
‡This author’s present aﬃliation is “NTT Information Shar-
R & D Center, Mitsubishi Electric Corporation.”
ing Platform Laboratories, NTT Corporation.”
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
10
General Terms
Security
Keywords
Hash Function, Collision Attack, SHA-1, Disturbance Vec-
tor
1.
INTRODUCTION
SHA-1 has been a widely used scheme since it was issued
by NIST as a Federal Information Processing Standard in
1995 [9]. Recently, many researches have discussed collision
search attacks on SHA-1 [1, 6, 14, 13, 12].
The progress of collision attacks of SHA-1 is summarized
as follows: Chabaud and Joux [4] and Wang et al.[11] in-
dependently pointed out the weakness of compression func-
tions of SHA-0 and SHA-1. They used collisions within 6-
steps diﬀerential path which is called local collision (LC in
short). The disturbance vector (DV) [4, 11] was introduced
in order to ﬁnd appropriate combination of LCs for SHA-0
and SHA-1.
Paper [14] succeeded in attacking the full 80 step SHA-1
with 269 complexity, by adjusting the diﬀerential path in the
ﬁrst round (step 1 to step 16) to another possible diﬀeren-
tial path, and adopting the multi-block collision technique
introduced by [1, 15]. Wang et al. improved their attack by
advanced message modiﬁcation techniques in [13, 12] with
the complexity of 261 ∼ 262. Recently, De Canni`ere et al.
found a colliding message pair against reduced SHA-1 with
70 steps[2].
Roughly speaking, collision search consists of the following
procedures [14]:
Stage(1) Selecting a DV and obtaining the message diﬀer-
entials ∆M = M(cid:48) − M .
Stage(2) Locating diﬀerential paths which are the diﬀer-
ences between two sequences of chaining variables
yielded by the calculation of H(M ) and H(M(cid:48)).
Stage(3) Deriving the suﬃcient conditions of chaining vari-
ables for the result of H(M ) = H(M(cid:48)).
Stage(4) Constructing M using message modiﬁcation (MM)
so that M satisﬁes all the chaining variable conditions
(CVCs) and message conditions eﬃciently.
Message modiﬁcation consists of the basic message mod-
iﬁcation (BMM) and the advanced message modiﬁcation
(AMM). The former is applied to steps 1 to 16, and the
latter is applied to steps of larger than 16.
By the recent researches, the stages (1)-(4) in the above
attack procedure were improved. On (2) and (3), an auto-
mated path search algorithm of diﬀerential paths was dis-
cussed in [3, 5, 16]. Some of these papers can succeed in
ﬁnding diﬀerential paths other than that of Wang et al. On
(4), the AMM technique is very important to study. The
complexity of collision search attack is determined by the
number of CVCs in the diﬀerential path which are not sat-
isﬁed by MM. With the progress of advanced message mod-
iﬁcation techniques, extending the applicable steps of AMM
from step 21 [14] to step 25 in [12] reduced the complexity
of the collision search of SHA-1 from 269 to 261. The recent
researches of AMM [6, 8, 10] have an eﬀect on the reduction
of complexity of the collision search of SHA-1. On (1), only
Wang’s method described in [14] has been proposed.
In order to ﬁnd a collision, the following properties are
also important.
i Less #{total CVCs in step 17-80}
ii Many #{satisﬁable CVCs by MM in step 17-80}
iii Can ﬁnd a diﬀerential path
iv Much message freedom for the collision search process
At the stage (1) in the attack algorithm, #{total CVCs in
step 17-80} (i) should be evaluated from an analyzing DV.
However, the evaluation algorithm described in [14] has sev-
eral problems. So the algorithm cannot evaluate it strictly.
In this paper, we will point out some possibilities for improv-
ing Wang et al.’s counting rules, described in [14], and we
will propose a new evaluating algorithm, which consists of
“Strict Diﬀerential Bit Compression”, “DV expansion”, “Pre-
cise Counting Rules in Every Step” and “Diﬀerential Path
Conﬁrmation for Rounds 2 to 4”. Then we implement the
algorithm and estimate #CVCs for an analyzing DV corre-
sponding to the step number of SHA-1.
2. DESCRIPTION OF SHA-1
SHA-1[9] input is an arbitrary length message M , and
SHA-1 output is 160 bit data H(M ). The message is padded
to realize a multiple of 512 bits. Padded message M is di-
vided into several messages Mi each 512 bits long (M =
(M1||M2||...||Mn)). These divided messages are input to the
compression function. In this paper, we call the calculation
in a single run of the compression function “1 block”. We
next explain the structure of the compression function of
SHA-1. All calculations in this are 32-bit. Hereafter, we ex-
clude the description of “mod 232”. Symbol “≪ j” denotes
left cyclic shift by j bits.
Step 1 Divide the input message Mj into 32 bit messages
m0, m1, ..., m15.
Step 2 Calculate m16 to m79 by mi = (mi−3 ⊕ mi−8 ⊕
mi−14 ⊕ mi−16) ≪ 1.
Step 3 Calculate chaining variables ai, bi, ci, di, ei in step i
by the following procedures.
ai =(ai−1 ≪ 5) + f (bi−1, ci−1, di−1) + ei−1
+ mi−1 + ki−1,
bi =ai−1, ci = bi−1 ≪ 30, di = ci−1, ei = di−1.
Repeat this procedure 80 times. (SHA-1 has 80 steps.)
Step 4 (a0 + a80, b0 + b80, c0 + c80, d0 + d80, e0 + e80) is the
output of the compression function.
Initial values a0, b0, c0, d0, e0 for the compression function
in the ﬁrst block are constant values described in [9]. After
the ﬁrst block, a0, b0, c0, d0, e0 are the output values of the
compression function in the previous block. Steps 1-20 are
called the ﬁrst round. Steps 21-40, 41-60, and 61-80 are
the second, third and fourth rounds, respectively. ki is a
constant deﬁned in each round. Function f is a Boolean
function deﬁned in each round, (b ∧ c) ∨ (¬b ∧ d) in the ﬁrst
round, b ⊕ c ⊕ d in the second and the fourth rounds and
(b ∧ c) ⊕ (c ∧ d) ⊕ (d ∧ b) in the third round.
3. COLLISION SEARCH FOR SHA-1
3.1 Overview of a Collision Attack of SHA-1
Collision search procedure takes the following approach
[14].
Stage(1) Select a disturbance vector,
Stage(2) Locate concrete diﬀerential path,
Stage(3) Determine which chaining variable conditions are
satisﬁable by using message modiﬁcations, and
Stage(4) Modify the message M by message modiﬁcations
in order to get a collision pair (M, M(cid:48)) by M(cid:48) = M +
∆M .
Given a DV and the corresponding diﬀerential path for
SHA-1 by the ﬁrst and second stages in the above proce-
dure, we have to set some bitwise conditions on messages mi
and chaining variables ai, bi, ci, di, ei. These conditions on
messages and on chaining variables are called message condi-
tion (MC in short) and chaining variable condition (CVC in
short), respectively. The number of CVC (#CVC in short)
impacts the complexity of the collision search of SHA-1.
For CVCs up to step 16, the technique of basic message
modiﬁcation (BMM in short) can be applied, so we can ig-
nore these conditions. With some additional eﬀort, we can
modify the messages so that conditions after step 16 also
hold. This technique is called advanced message modiﬁca-
tion (AMM in short). Roughly speaking, if the number of
11
CVCs that will not be applicable for neither BMM nor AMM
is n, then the complexity of collision search can be estimated
by 2n by using a naive collision search procedure.
In present, Wang et al. have ﬁnished (3) in the above
procedure. And they have pointed out that the complexity
needed for ﬁnd a collision is 269 in [14]. In [12], they reduced
the complexity from 269 to 261 ∼ 262 by changing a DV.
However, no one still ﬁnd a colliding message pair because
the complexity is too much for present computers.
Though their works are known as the best results for ﬁnd-
ing a collision, the stages (1)-(4) have not been described in
detail in [14]. Many researchers are trying to clarify the de-
tail and trying to improve each step. On (2), an automated
path search algorithm of diﬀerential paths was discussed in
[3, 5, 16]. On (3), message modiﬁcations were discussed in
[6, 8, 10]. On (4), reduced 70-step SHA-1 was analyzed in
[2]. And they found a collision of reduced SHA-1. On (1),
only Wang’s method has been described in [14] for 80-step
full SHA-1.
3.2 Complexity for Finding a Collision of
SHA-1
The complexity needed for ﬁnd a collision is determined
by the following equations.
Complexity ≈ 2#{essentialCV Cs}
#{essentialCV Cs} = #{total CVCs in step 17-80}
− #{satisﬁable CVCs by MM in step 17-80}
In order to ﬁnd a colliding message pair, the following
properties are also important.
i Less #{total CVCs in step 17-80}
Mainly depend on the stage (1) (in the procedure de-
scribed in the previous subsection.)
ii Many #{satisﬁable CVCs by MM in step 17-80}
Mainly depend on the stages (1), (2) and (3).
iii Can ﬁnd a diﬀerential path
Mainly depend on the stages (1) and (2).
iv Much message freedom for the collision search process
Mainly depend on the stages (1), (2) and (3).
Figure 1: Trade-oﬀ between the properties for colli-
sion search
These properties are in the trade-oﬀ relations1. However,
at stage (1) in the attack procedure, it is very diﬃcult to
select the most eﬀective disturbance vector by considering
all the above properties. The reasons are described below.
1Some trade-oﬀ relations are considerable in the collision
search. One of them are described in [2].
12
• Each property depends on the results of the stages
(1),(2) and (3). So some properties can be evaluated
after the stage (3) only.
• The stage (2) consumes computer power a lot. So we
cannot execute (2) many times.
• The execution order of the stages (1)-(4) is optimized.
Changing the order may cause bad eﬀect to collision
attack.
By these reasons, Wang et al. only evaluate #{total CVCs
in step 17-80} in the above equations at stage (1). And
after stage (3), they consider all properties. However, they
have used a rough evaluation method that evaluates #{total
CVCs in step 17-80} from the DV analyzed at stage (1). The
evaluation method includes several problems and they might
miss the best DV. In this paper, we focus on the evaluation
algorithm of #{total CVCs in step 17-80} from a DV.
4. PREVIOUS WORKS ON RESEARCHING
DISTURBANCE VECTOR
4.1 Local Collision and Disturbance Vector
It is known that collisions within 6-step that can start at
any step i can be constructed on SHA-1, and real collision
attacks succeeded based on this collisions. This kind of col-
lisions is called local collision (LC in short). An example of
local collision is shown in Table 1.
Table 1: An Example of Local Collision
Step i
xi−1
mi−1
00000001
i
i+1
i+2
i+3
i+4
i+5
0
5
0
30
30
30
ai
0
bi
0
ci
di
ei
30
30
30
The element in the columns on xi is a hexadecimal
number. Each element e (ex. 5) in the columns of
mi, ai ··· , ei means number ±2e (ex. 00000020).
Sequences of local collisions joined together are also diﬀer-
ential paths for SHA-1. They can be speciﬁed by the vector
of 32 bit elements (x0, ..., x79) called disturbance vector (DV
in short) it corresponds to the message diﬀerential on the
starting steps of the local collisions.
4.2 Disturbance Vector Search by Wang’s Ap-
proach
This subsection shows the approach used to derive DVs
as proposed by Wang et al.[14].
First, set the search space described below. We call this
search space as “rectangle range”. And take a DV in the
search space.
• The search space of Wang’s approach (rectangle range)
{xi = (0, . . . , 0, xi,1, xi,0)|i = t, . . . , t + 15}
where xi,j is a bit and t = 0, . . . , 64 (65·232 possibilities
in total), which is a part of DV in 16-step.
Can find a Differential PathMuch messagefreedomLess #CVCsfor round 2-4Many SatisfiableCVCsof allFigure 2: Approach for Searching Disturbance Vectors by Wang et al. and Our Approach
After that, evaluate #CVC corresponding to the decided
DV using the following “Wang’s Calculation Algorithm of
#CVC”.
And next, construct the concrete diﬀerential path given
the disturbance vector by using the 6-step local collision for
rounds 2 to 4.
Finally, select a DV with the lowest #CVCs.
Wang’s Calculation Algorithm of #CVC.
1. Each element in search space that can be seen as a set
of a vector corresponding 16 steps in DV, is expanded
into the vector of 80 steps using SHA-1 message ex-
pansion. Then DV {x0, . . . , xt, . . . , xt+15, . . . , x79} is
generated.
2. Reduce the Hamming weight (HW) of each DV by us-
ing the special counting rule 1.
3. Pick up several DVs with low HW in rounds 2 to 4
4. Estimate a number of conditions in rounds 2-4 by using
the counting rules in Table 2.
After the 4th step of the calculation algorithm, they have
selected 12 DVs and then ﬁnally chosen a good set of DVs
by using the above approach. Figure 2 shows the above
approach.
We comment that the previous approach of searching dif-