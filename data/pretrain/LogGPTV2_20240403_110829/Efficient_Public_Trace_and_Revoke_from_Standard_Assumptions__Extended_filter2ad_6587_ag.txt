Note that ¯𝑥𝑖 ∈ Z2ℓ is chosen from 𝐷𝑝Z+𝑥𝑖,𝜎1 if 𝑖 ∈ [ℓ]
√
and 𝐷𝑝Z+𝑥𝑖,𝜎2 otherwise. We thus have ‖¯x‖ ≤ (𝜎1 + 𝜎2)
ℓ ·
√
log 𝜆) with probability 1 − 𝜆−𝜔(1). This, together with
√
𝜔(
e1 ∼ 𝐷2ℓZ,𝛼𝑞, implies that |⟨¯x, e1⟩| ≤ 𝛼𝑞(𝜎1 + 𝜎2)
ℓ · 𝜔(log 𝜆)
with probability 1 − 𝜆−𝜔(1). Furthermore, since each column
√
of Z is chosen from 𝐷2ℓZ,𝜎0 , we have ‖zx‖ ≤ 𝜎0(𝜎1 + 𝜎2)
ℓ𝑚 ·
𝜔(log 𝜆) with probability 1 − 𝜆−𝜔(1). As a result, we have
|⟨zx, e0⟩| ≤ 𝜎0(𝜎1 + 𝜎2)𝛼𝑞
ℓ𝑚 · 𝜔(log3/2 𝜆) with probability
1 − 𝜆−𝜔(1).
√
Security. We now show that the scheme above is secure,
for our relaxed notion of 𝐿-IND-CPA security. The proof is
similar to [4], but we exploits the weaker security model of
bounded number of random key queries. In particular, we
perform a much more careful analysis on the conditional
distribution of Z from the view of the adversary.
Theorem 4.1. If the parameters are set as above, the
above scheme is 𝐿-IND-CPA secure under the LWE𝑛,𝑚,𝑞,𝛼′
assumption.
Proof. The proof proceeds with a sequence of games that
starts with the real game and ends with a game in which the
adversary’s advantage is negligible. For each 𝑖, we call 𝑆𝑖 the
event that the adversary wins in Game 𝑖.
Game 0: This is the ordinary security game. Namely, at
the outset of the game, the adversary 𝒜 is given the master
public key pk. Then, it sees 𝑄 random vectors {x𝑖}𝑖∈[𝑄],
where x𝑖 ←˒ Z2ℓ
𝑝 and 𝑄 is an arbitrary polynomial specified
by 𝒜. Then, it makes secret key queries for these vectors.
The number of the key queries is bounded by 𝐿. Note that
the adversary can only make key queries for random vectors
chosen as x ←˒ Z2ℓ
𝑝 . In the challenge phase, the adversary 𝒜
7We note that it is possible to choose parameters that allow to take 𝑝 as
low as 𝑝 = 2, but in our trace-and-revoke application we use 𝑝 = 𝜆𝜔(1)
to guarantee correctness.
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2288comes up with two distinct vectors y0, y1 and receives an
encryption 𝐶 of y𝛽 for 𝛽 ←˒ {0, 1} sampled by the challenger.
The adversary is not allowed to make secret key queries after
the challenge phase. When 𝒜 halts, it outputs 𝛽′ ∈ {0, 1} and
𝑆0 is the event that 𝛽′ = 𝛽. Note that for any vector x for
which 𝒜 makes a secret key query, we must have ⟨x, y0⟩ ≡
⟨x, y1⟩ mod 𝑝 if 𝒜 is a legitimate adversary.
Game 1: We modify the generation of x and ¯x for all secret
key queries. Namely, instead of choosing x ←˒ Z2ℓ
𝑝 and then
sampling ¯x, the challenger first chooses ¯x = (¯𝑥1, . . . , ¯𝑥2ℓ)𝑡 as
¯𝑥𝑖 ←˒ 𝐷Z,𝜎1 for 𝑖 ∈ [ℓ] and ¯𝑥𝑖 ←˒ 𝐷Z,𝜎2 for 𝑖 ∈ [ℓ + 1, 2ℓ] and
then sets x := ¯x mod 𝑝. We claim that this changes the joint
distribution of (x, ¯x) only negligibly. To see this, we observe
that the distribution of ¯𝑥𝑖 conditioned on ¯𝑥𝑖 ≡ 𝑥𝑖 mod 𝑝
is 𝐷𝑝Z+𝑥𝑖,𝜎1 for 𝑖 ∈ [ℓ] and 𝐷𝑝Z+𝑥𝑖,𝜎2 for 𝑖 ∈ [ℓ + 1, 2ℓ].
Therefore, it suffices to show that ¯𝑥𝑖 mod 𝑝 is statistically
close to the uniform distribution over Z𝑝 when ¯𝑥𝑖 is chosen
√
from 𝐷Z,𝜎1 or 𝐷Z,𝜎2 . This follows from 𝜎1, 𝜎2 ≥ 𝑝 · Ω(
𝜆)
and Lemma 2.4. Therefore, we have that | Pr[𝑆1] − Pr[𝑆0]| ≤
2−Ω(𝜆).
Game 2: We modify the generation of 𝐶 = (c0, c1) in the
challenge phase. Namely at the outset of the game, the chal-
𝑞 , e ←˒ 𝐷𝑚Z,𝛼′𝑞 (which may be chosen
lenger picks s ←˒ Z𝑛
. Let V ∈ Z(𝑚+2ℓ)×𝑚
ahead of time) as well as Z ←˒ 𝐷2ℓ×𝑚Z,𝜎0
be the matrix that is obtained by putting I𝑚 on top of Z,
where I𝑚 is the unit matrix of size 𝑚. We then set the
ciphertext 𝐶 = (c0, c1) ∈ Z𝑚
𝑞 × Z2ℓ
𝑞 as
b = As + e
′
′
𝑞, 𝛼/(2𝛼
(c0‖c1) = ReRand(V, b, 𝛼
this, we first observe that 𝑠1(V) ≤√︀1 + 𝑠1(Z)2 ≤ 𝑂(𝜎0
)) + 𝑝𝑘−1 · y𝛽 (4)
where ReRand is from Lemma 2.5. We claim that this change
√
alters the view of the adversary only negligibly. To show
𝑚)
holds with all but 2−Ω(𝑚) ≤ 2−Ω(𝜆) probability by Lemma 2.7.
By Lemma 2.5 and our parameter choices, we have
c0 = I𝑚 · As + e0 = As + e0,
c1 = Z · As + e1 + 𝑝𝑘−1 · y𝛽 = Us + e1 + 𝑝𝑘−1 · y𝛽,
where e0 and e1 are within statistical distance 2−Ω(𝜆) from
𝐷𝑚Z,𝛼𝑞. Therefore,we have that | Pr[𝑆2] − Pr[𝑆1]| ≤ 2−Ω(𝜆).
Game 3: We further modify the generation of 𝐶 = (c0, c1)
in the challenge phase. Instead of setting b = As + e, we
choose b = u + e, where u ←˒ Z𝑚
𝑞 . Then, the ciphertext is
set as in Equation (4). Under the LWE assumption, we have
that | Pr[𝑆3] − Pr[𝑆2]| is negligible.
Game 4: We modify the generation of 𝐶 = (c0, c1) once
more. Namely, the ciphertext is now set as
c0 = u + e0,
c1 = Z · u + e1 + 𝑝𝑘−1 · y𝛽,
𝑞 and e0, e1 ←˒ 𝐷𝑚Z,𝛼𝑞. Similarly to Game 2,
where u ←˒ Z𝑚
this change does not alter the view of the adversary much.
By Lemma 2.5 and our parameter choices, we have that
| Pr[𝑆4] − Pr[𝑆3]| ≤ 2−Ω(𝜆). Below, we prove that Pr[𝑆4] is
exponentially close to 1/2, which will complete the proof.
𝑝 . Let {x𝑖𝑗 ∈ Z2ℓ
Define y = y1 − y0 ∈ Z2ℓ
𝑝 }𝑗∈[𝐿′] be the
vectors corresponding to the secret key queries made by
𝒜, where 𝐿′ ≤ 𝐿. As 𝒜 is a legitimate adversary, we have
⟨x𝑖𝑗 , y⟩ = 0 mod 𝑝 for each secret key query x𝑖𝑗 . The view of
the adversary contains 𝐿′ tuples {x𝑖𝑗 , ¯x𝑖𝑗 , zx𝑖𝑗
}𝑗∈[𝐿′], where
the vectors {x𝑖𝑗}𝑗∈[𝐿′] form a Z𝑝-basis of a subspace of the
(2ℓ − 1)-dimensional vector space y⊥ := {x ∈ Z2ℓ
𝑝 : ⟨x, y⟩ =
0 mod 𝑝}. We define X𝑡𝑜𝑝 ∈ Z𝐿′×2ℓ as the matrix whose 𝑗-th
row is ¯x𝑡
𝑖𝑗 for 𝑗 ∈ [𝐿′].
We say that X𝑡𝑜𝑝 ∈ Z𝐿′×2ℓ is good when we can choose
U ∈ Z2ℓ×2ℓ such that | det U| = 1, X𝑡𝑜𝑝 · U = (I𝐿′|0), and
√
every row of U has norm ≤ 𝑂(
𝜅ℓ𝜎2) (see Lemma 2.9). For
a good X𝑡𝑜𝑝, we can define X ∈ Z2ℓ×2ℓ as X := U−1. It can
be seen that the upper 𝐿′ rows of X corresponds to X𝑡𝑜𝑝.
We denote the lower 2ℓ − 𝐿′ rows of the matrix as X𝑏𝑜𝑡.
We note that since X is invertible over Z, so is it modulo 𝑞.
Without loss of generality, we assume that U and X𝑏𝑜𝑡 are
deterministically determined from X𝑡𝑜𝑝. (If there are more
than one matrix satisfying the required properties, we sort
them in the lexicographical order and pick the first one.)
Note that it might be infeasible to efficiently compute U
and X𝑏𝑜𝑡 from X𝑡𝑜𝑝. This does not cause any problem in our
proof because all the following arguments are information
theoretic.
We state the following lemmas:
Lemma 4.2. Assume that 𝜎0 ≥ Ω(𝑝𝜅ℓ𝜎2) and 𝑞𝑛+1/𝑝𝑚 ≤
2−Ω(𝜅). Then the following distributions are within 2−Ω(𝜅)
statistical distance:
(A, u, ZA, X𝑡𝑜𝑝, X𝑡𝑜𝑝Z, X𝑏𝑜𝑡Zu) ≈
(A, u, ZA, X𝑡𝑜𝑝, X𝑡𝑜𝑝Z, v)
𝑞
, u ←˒ Z𝑚
where A ←˒ Z𝑚×𝑛
X𝑡𝑜𝑝 ∈ Z𝐿′×2ℓ
is chosen from 𝐷ℓZ,𝜎1×𝐷ℓZ,𝜎2 , and v ←˒ Z2ℓ−𝐿′
.
Note that if X𝑏𝑜𝑡 is not good, then X𝑏𝑜𝑡 is undefined. In such
a case, the term X𝑏𝑜𝑡Zu is replaced with ⊥.
𝑞 , Z ←˒ 𝐷2ℓ×𝑚Z,𝜎0
, each row of
𝑞
𝑞
Lemma 4.3. If there exists an adversary 𝒜 whose advan-
tage in Game 4 is 𝜖, then there exists another (unbounded)
adversary ℬ whose distinguishing advantage between the two
distributions in Lemma 4.2 is 𝜀/𝑄𝐿′
.
Given these two lemmas, we can conclude the proof of
< 2−Ω(𝜅) and thus
□
Theorem 4.1 since these imply 𝜀/𝑄𝐿′
𝜀 < 𝑄𝐿 · 2−Ω(𝜅) = 2𝑂(𝐿 log 𝜆)−Ω(𝜅) ≤ 2−Ω(𝜆).
It remains to prove Lemmas 4.2 and 4.3.
Proof of Lemma 4.2. By Lemma 2.9, matrix X𝑡𝑜𝑝 is
good with all but 2−Ω(𝜅) probability. In the following, let us
fix good X𝑡𝑜𝑝 and prove that the above two distributions
are 2−Ω(𝜅)-close. We first consider the distribution X𝑏𝑜𝑡Z
conditioned on X𝑡𝑜𝑝Z. Note that in X𝑡𝑜𝑝Z and X𝑏𝑜𝑡Z, ma-
trices X𝑡𝑜𝑝 and X𝑏𝑜𝑡 act in parallel on the columns of Z.
We can hence restrict ourselves to the distribution of X𝑏𝑜𝑡z𝑖
conditioned on X𝑡𝑜𝑝z𝑖, with z𝑖 sampled from 𝐷Z2ℓ,𝜎0 . Let
b𝑖 = X𝑡𝑜𝑝z𝑖 ∈ Z𝐿′
𝑖 ∈ Z2ℓ arbitrary such that
and fix z⋆
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2289Σ
√
Σ
,𝜎0
−𝑡
U𝑡
𝑖 ,𝜎0 .
𝑖 ,𝜎0 is 𝐷Z2ℓ−𝐿′
−1,w, where Σ = U𝑡
b𝑖 = X𝑡𝑜𝑝z⋆
𝑖 . The distribution of z𝑖 given (X𝑡𝑜𝑝, X𝑡𝑜𝑝z𝑖) is
𝑖 ,𝜎0 , with Λ = {x ∈ Z2ℓ : X𝑡𝑜𝑝x = 0}. Therefore, we
𝐷Λ+z⋆
have that given X𝑡𝑜𝑝z𝑖, the vector X𝑏𝑜𝑡z𝑖 is distributed as
X𝑏𝑜𝑡 · 𝐷Λ+z⋆
Let U𝑙𝑒𝑓 (resp. U𝑟𝑖𝑔) denote the left 𝐿′ (resp. right 2ℓ−𝐿′)
columns of U. We are to show that the distribution X𝑏𝑜𝑡 ·
𝐷Λ+z⋆
𝑟𝑖𝑔U𝑟𝑖𝑔 and
w = −√
𝑟𝑖𝑔U𝑙𝑒𝑓 b𝑖. To see this, we first show that the
supports of both distributions are the same. More specifically,
we prove X𝑏𝑜𝑡 · Λ = Z2ℓ−𝐿′
. To do so, it suffices to show
that for any a ∈ Z2ℓ−𝐿′
, we have a ∈ X𝑏𝑜𝑡 · Λ. By the
construction of U, we have X𝑡𝑜𝑝U𝑟𝑖𝑔 = 0 and X𝑏𝑜𝑡U𝑟𝑖𝑔 =
I2ℓ−𝐿′ . Now, a ∈ X𝑏𝑜𝑡 · Λ follows because we have a =
X𝑏𝑜𝑡 · (U𝑟𝑖𝑔a) and X𝑡𝑜𝑝 · U𝑟𝑖𝑔a = 0. We next evaluate the
probability of a ∈ Z2ℓ−𝐿′
𝑖 ,𝜎0 .
This probability equals to the probability of a′ ∈ Z2ℓ being
𝑖 ,𝜎0 for a′ that is the unique vector in Λ + z⋆
output by 𝐷Λ+z⋆
satisfying a = X𝑏𝑜𝑡 · a′. Since a′ ∈ Λ + z⋆
𝑖 , we have X𝑡𝑜𝑝 · a′ =
X𝑡𝑜𝑝(a′ − z⋆
𝑖 = 0 + b𝑖 = b𝑖. Therefore, the vector
a′ can be written as a′ = X−1(b𝑖‖a) = U(b𝑖‖a) = U𝑙𝑒𝑓 b𝑖 +
U𝑟𝑖𝑔a. The probability we consider is proportional to
being output by X𝑏𝑜𝑡 · 𝐷Λ+z⋆
𝑖 ) + X𝑡𝑜𝑝z⋆
𝑖
−𝑡
𝑟𝑖𝑔U𝑙𝑒𝑓 b𝑖‖2/𝜎2
U𝑡
√
−𝑡
Σ
𝑟𝑖𝑔U𝑙𝑒𝑓 b𝑖‖2)/𝜎2
U𝑡
0
0
)︁
0
√
)︀
)︀
′‖2/𝜎2
exp(︀−𝜋‖a
= exp(︀−𝜋‖U𝑙𝑒𝑓 b𝑖 + U𝑟𝑖𝑔a‖2/𝜎2
(︁−𝜋‖
(︁−𝜋(‖U𝑙𝑒𝑓 b𝑖‖2 − ‖
⏟
(︁−𝜋‖
does not depend on a
Σ(a − w)‖2/𝜎2
= exp