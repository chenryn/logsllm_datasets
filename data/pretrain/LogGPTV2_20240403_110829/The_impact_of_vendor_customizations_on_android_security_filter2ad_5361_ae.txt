We also note that there are not very strong correlations between
a number of superﬁcial metrics and the number of vulnerabilities
present in a stock ﬁrmware image. Code size does not strongly
correlate: the Nexus 4 has the third-largest number of LOC, but the
lowest number of vulnerabilities in the whole study. The number
of apps does not correlate: both Sony devices perform very well,
despite having a very large number of apps, while the LG devices
do poorly on security even though they have the fewest apps of any
non-reference device. Finally, even popularity does not appear to
correlate with security: Samsung’s Galaxy S3 was the most popular
smartphone of 2012, having shipped in excess of 50 million units
as of March 2013 [45], and yet it had the most vulnerabilities of
any phone in its generation studied in this paper.
Lastly, we would like to acknowledge some of the limitations of
our work. We do not cover the customization of system level code,
which can be an interesting topic for future research. Our current
prototype also has several constraints. First of all, our static anal-
ysis produces a relatively high false positive rate. On average, our
analysis produces less than 300 paths per device. While it does not
make too much effort to manually verify each path, it would be bet-
ter if we could use a light-weight dynamic analyzer to reduce the
631manual workload. Secondly, we generate the call graph recursively.
In order to avoid very deep (potentially inﬁnite) recursion, we con-
strain our analysis in two ways: only acyclic graphs are allowed,
and/or the maximum length of a path (or the maximum exploration
time) is set as an upper boundary for safety. These constraints may
prevent us from discovering certain vulnerabilities if there exists
heavy code obfuscation that either extends the length of vulnerable
path or modiﬁes the sinks we use to deﬁne such paths. Fortunately,
it is our experience that most pre-loaded apps (other than bundled
third-party apps) are not extensively obfuscated. As a result, these
constraints were primarily triggered by inﬁnite recursion, not by
overly long, yet valid, call chains.
5. RELATED WORK
Provenance Analysis
In our system, provenance provides im-
portant context which we use when evaluating the results of our
other analyses. However, determining the provenance of an app or
a piece of code is a difﬁcult problem, which has attracted much re-
search. For example, traditional similarity measurement has been
widely used in malware (e.g., virus and worm) clustering and inves-
tigation. Kruegel et al. [32] propose an approach to detect polymor-
phic worms by identifying structural similarities between control
ﬂow graphs. SMIT [29], a malware database management system
based on malware’s function-call graphs, is able to perform large
scale malware indexing and queries. Note these approaches are
mainly developed for PC malware and have considerably more so-
phistication – and complexity – than our own. In the same spirit, we
use chains of method signatures to determine whether a pre-loaded
app is, in fact, an altered version of a core AOSP app. Previous
insights however should be able to further guide us in improving
accuracy and completeness of our approach.
In the Android platform, one line of inquiry concerns detecting
repackaged apps – apps that have been altered and re-uploaded
by some party other than the original author. DroidMOSS [50],
DNADroid [9] and PiggyApp [49] all focus on detecting repack-
aged apps in Android app markets, while AppInk [46] pays at-
tention to deterring repackaging behavior with watermarking tech-
niques. These efforts all must establish the ancestry of any given
app, which mirrors our efforts to understand, longitudinally, the
evolution of ﬁrmware images using vertical differential analysis.
However, we are not as concerned with the arrow of time – it
is obvious the relationship between the original AOSP image and
the vendor’s customizations, for legal reasons more than technical
ones.
Lastly, mobile advertisement libraries have attracted a lot of at-
tention, as they live within other apps and share their permissions.
They have been demonstrated to be another important source of
privacy leaks [23]; furthermore, Book et al.’s longitudinal study [5]
shows that negative behaviors may be growing more common in
such libraries over time. As a result, several mitigation measures
have been proposed. Some add new APIs and permissions [36] to
attempt to isolate such alien code; AdSplit [41], in contrast, moves
advertisement code into another process to allow the core Android
framework to issue it different permissions, and thus enforce a dif-
ferent policy. Our work has a strange kinship with these works, in
that we similarly are interested in poorly-tagged vendor customiza-
tions mixed in with code from other sources. While we operate on
a different scale to evaluate whole phone images instead of indi-
vidual third-party apps, many of the same concepts apply. Further-
more, there similarly exists a disconnection between the trust a user
may afford the open-source, heavily vetted AOSP and the vendor’s
customizations of it – attempting to mitigate the ﬂaws introduced
by the vendor would be an interesting topic for future work.
Permission Usage Analysis Our permission usage analysis
is built upon the accumulated insight of a number of other works
in this area. For example, Stowaway [17], Vidas et al. [44] and
PScout [2] all study the problem of overprivileged third party apps
and provide permission mappings in different ways. Barrera et
al. [3] study the permission usage patterns of third party apps by
applying self-organizing maps. None of these works analyze the
problem of permission overprivilege in pre-loaded ﬁrmware apps,
which is one key focus of our work.
Others have attempted to infer certain security-related properties
about apps based solely on their requested permissions. Kirin [16],
for example, looks for hard-coded dangerous combinations of per-
missions to warn the user about potential malware. Sarma et al. [40],
Peng et al. [37] and Chakradeo et al. [7], on the other hand, use ma-
chine learning techniques to automatically classify apps as poten-
tially malicious based on the permissions they seek. In this initial
study, we do not attempt to look for such emergent effects in the
permissions requested by a pre-loaded app as the examined stock
images are released by reputable and trustworthy entities.
Vulnerability Analysis Several works have attempted to survey
the landscape of malware on Android (e.g., MalGenome [51]) as
well as general apps [15, 38]. Other works, like DroidRanger [53],
RiskRanker [25], Peng et al. [37] and MAST [7] all have been con-
cerned with ﬁnding malicious apps in app markets that contain a
large number of benign apps. DroidScope [48] uses virtualization
to perform semantic view reconstruction, much like a number of
desktop systems, to analyze Android malware. The insights de-
veloped in these works are useful in informing our own about the
potential dangers of third-party malicious apps.
Permission re-delegation vulnerabilities, a form of the classic
confused-deputy attack [27], have been known to be a problem
on the Android platform for some time. ComDroid [8], Wood-
pecker [24], and CHEX [34] all apply static analysis techniques to
ﬁnd vulnerabilities in either third party or pre-loaded apps. SEFA is
most similar to the latter two systems. But our system also performs
provenance analysis, allowing us to determine the impact of ven-
dor customizations on security. While ComDroid and Woodpecker
only could detect in-component vulnerabilities, CHEX could addi-
tionally detect cross-component ones. Our work is the most com-
prehensive yet, as it can ﬁnd in-component, cross-component, and
cross-app vulnerabilities. Speciﬁcally, cross-app vulnerabilities ac-
count for 8.90% of the vulnerabilities that we found, a signiﬁcant
proportion that also leads to similar, if not greater, security risks.
Several systems [6, 12, 18] aim to mitigate the permission re-
delegation problem by either checking IPC call chains or by mon-
itoring the run-time communication between apps. Other works
try to protect security in a different manner. For example, virtual-
ization techniques are leveraged by Cells [1] and L4Android [33].
MoCFI [10] implements a control-ﬂow integrity enforcement frame-
work for apps on iOS platform. These works are all complementary
to our own, as similar techniques may be able to be applied to mit-
igate the impact of the ﬂaws that we have detected.
Several systems, including TaintDroid [14], PiOS [13], Apex [35],
MockDroid [4], TISSA [54], AppFence [28], Aurasium [47], SOR-
BET [19] and CleanOS [43] aim to study privacy leak issues. They
all try to protect (or mitigate) the privacy leak problem by modi-
fying the underlying framework. There has been considerably less
work related to content leaks. ContentScope [52] tries to identify
vulnerabilities related to third-party, unprotected content providers.
Our own work uses a similar concept, but is concerned with content
providers in ﬁrmware. Note these content providers are only ever
found in that context and we have to additionally cover protected
content providers (that have not been addressed by earlier work).
6326. CONCLUSION
In this paper, we evaluate the security impact of vendor cus-
tomizations on Android devices by designing and implementing the
SEFA analysis framework. This tool performs several analyses to
study the provenance, permission usage and vulnerability distribu-
tion of the pre-loaded apps that make up a device’s ﬁrmware image.
We evaluated ten devices from ﬁve different vendors: two models
from each vendor, representing two different generations. We then
compare the various vendors’ offerings for a given generation, as
well as the evolution of any given vendor’s security practices over
time. Our results show that due to heavy vendor customizations,
on average, over half of the apps in each image are overprivileged
vendor apps, and more than 60% of the vulnerabilities we identiﬁed
stemmed from the vendors’ modiﬁcations to the ﬁrmware. Further-
more, for most of the manufacturers in our study, these patterns
were stable over time, highlighting the need for heightened focus
on security by the smartphone industry.
7. ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their com-
ments that greatly helped improve the presentation of this paper.
We also want to thank Kunal Patel, Wu Zhou and Minh Q. Tran
for the helpful discussion. This work was supported in part by
the US National Science Foundation (NSF) under Grants 0855297,
0855036, 0910767, and 0952640. Any opinions, ﬁndings, and con-
clusions or recommendations expressed in this material are those
of the authors and do not necessarily reﬂect the views of the NSF.
8. REFERENCES
[1] J. Andrus, C. Dall, A. Van’t Hof, O. Laadan, and J. Nieh. Cells: A
Virtual Mobile Smartphone Architecture. In Proceedings of the 23rd
ACM Symposium on Operating Systems Principles, SOSP ’11, 2011.
[2] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing
the Android Permission Speciﬁcation. In Proceedings of the 19th
ACM Conference on Computer and Communications Security, CCS
’12, 2012.
[3] D. Barrera, H. G. Kayacik, P. C. van Oorschot, and A. Somayaji. A
Methodology for Empirical Analysis of Permission-Based Security
Models and its Application to Android. In Proceedings of the 17th
ACM Conference on Computer and Communications Security, CCS
’10, 2010.
[4] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. MockDroid:
Trading Privacy for Application Functionality on Smartphones. In
Proceedings of the 12th International Workshop on Mobile
Computing Systems and Applications, HotMobile ’11, 2011.
[5] T. Book, A. Pridgen, and D. S. Wallach. Longitudinal Analysis of
Android Ad Library Permissions. In IEEE Mobile Security
Technologies, MoST ’13, 2013.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and
B. Shastry. Towards Taming Privilege-Escalation Attacks on
Android. In Proceedings of the 19th Annual Symposium on Network
and Distributed System Security, NDSS ’12, 2012.
[7] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck. MAST: Triage for
Market-scale Mobile Malware Analysis. In Proceedings of the 6th
ACM Conference on Security and Privacy in Wireless and Mobile
Networks, WiSec ’13, 2013.
[8] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
Inter-Application Communication in Android. In Proceedings of the
9th Annual International Conference on Mobile Systems,
Applications, and Services, MobiSys ’11, 2011.
[9] J. Crussell, C. Gibler, and H. Chen. Attack of the Clones: Detecting
Cloned Applications on Android Markets. In Proceedings of 17th
European Symposium on Research in Computer Security, ESORICS
’12, 2012.
[10] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. Nurnberger, and A.-R. Sadeghi. MoCFI: A Framework to Mitigate
Control-Flow Attacks on Smartphones. In Proceedings of the 19th
Annual Symposium on Network and Distributed System Security,
NDSS ’12, 2012.
[11] Defuse. Use-deﬁne chain. http://en.wikipedia.org/
wiki/Use-define_chain.
[12] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
QUIRE: Lightweight Provenance for Smart Phone Operating
Systems. In Proceedings of the 20th USENIX Security Symposium,
USENIX Security ’11, 2011.
[13] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting
Privacy Leaks in iOS Applications. In Proceedings of the 18th
Annual Symposium on Network and Distributed System Security,
NDSS ’11, 2011.
[14] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. N. Sheth. TaintDroid: An Information-Flow Tracking System for
Realtime Privacy Monitoring on Smartphones. In Proceedings of the
9th USENIX Symposium on Operating Systems Design and
Implementation, USENIX OSDI ’10, 2010.
[15] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of
Android Application Security. In Proceedings of the 20th USENIX
Security Symposium, USENIX Security ’11, 2011.
[16] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile
phone application certiﬁcation. In Proceedings of the 16th ACM
Conference on Computer and Communications Security, CCS ’09,
2009.
[17] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
Permissions Demystiﬁed. In Proceedings of the 18th ACM
Conference on Computer and Communications Security, CCS ’11,
2011.
[18] A. P. Felt, H. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In Proceedings of
the 20th USENIX Security Symposium, USENIX Security ’11, 2011.
[19] E. Fragkaki, L. Bauer, L. Jia, and D. Swasey. Modeling and
Enhancing Android’s Permission System. In Proceedings of 17th
European Symposium on Research in Computer Security, ESORICS
’12, 2012.
[20] Gartner. Gartner Says Worldwide Smartphone Sales Soared in Fourth
Quarter of 2011 With 47 Percent Growth. http://www.
gartner.com/it/page.jsp?id=1924314.
[21] Google. Intent. http://developer.android.com/
reference/android/content/Intent.html.
[22] Google. Platform Versions. http://developer.android.
com/about/dashboards/index.html.
[23] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe Exposure
Analysis of Mobile In-App Advertisements. In Proceedings of the
5th ACM Conference on Security and Privacy in Wireless and Mobile
Networks, WiSec ’12, 2012.
[24] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of
Capability Leaks in Stock Android Smartphones. In Proceedings of
the 19th Annual Symposium on Network and Distributed System
Security, NDSS ’12, 2012.
[25] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker:
Scalable and Accurate Zero-day Android Malware Detection. In
Proceedings of the 10th International Conference on Mobile Systems,
Applications and Services, MobiSys ’12, 2012.
[26] Gsmarena. http://www.gsmarena.com/.
[27] N. Hardy. The Confused Deputy: (or why capabilities might have
been invented). ACM SIGOPS Operating Systems Review, 22,
October 1988.
[28] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These
Aren’t the Droids You’re Looking For: Retroﬁtting Android to
Protect Data from Imperious Applications. In Proceedings of the
18th ACM Conference on Computer and Communications Security,
CCS ’11, 2011.
[29] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-Scale Malware Indexing
Using Function-Call Graphs. In Proceedings of the 16th ACM
Conference on Computer and Communications Security, CCS ’09,
2009.
[30] IDC. Strong Demand for Smartphones and Heated Vendor
Competition Characterize the Worldwide Mobile Phone Market at
the End of 2012, IDC Says. https://www.idc.com/getdoc.
jsp?containerId=prUS23916413#.UQIPbh0qaSp.
633[31] J. Koetsier. Android captured almost 70% global smartphone market
[49] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, Scalable
share in 2012, Apple just under 20%. http://venturebeat.
com/2013/01/28/android-captured-almost-70-
global-smartphone-market-share-in-2012-apple-
just-under-20/.
[32] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna.
Polymorphic worm detection using structural information of
executables. In Proceedings of 8th International Symposium on
Recent Advances in Intrusion Detection, RAID ’05, 2005.
[33] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter.
L4Android: A Generic Operating System Framework for Secure
Smartphones. In Proceedings of the 1st Workshop on Security and
Privacy in Smartphones and Mobile Devices, CCS-SPSM ’11, 2011.
[34] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting
android apps for component hijacking vulnerabilities. In Proceedings
of the 19th ACM Conference on Computer and Communications
Security, CCS ’12, 2012.
[35] M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android
Permission Model and Enforcement with User-Deﬁned Runtime
Constraints. In Proceedings of the 5th ACM Symposium on
Information, Computer and Communications Security, ASIACCS
’10, 2010.
[36] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege
Separation for Applications and Advertisers in Android. In
Proceedings of the 7th ACM Symposium on Information, Computer
and Communications Security, ASIACCS ’12, 2012.
[37] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju,
C. Nita-Rotaru, and I. Molloy. Using probabilistic generative models
for ranking risks of android apps. In Proceedings of the 19th ACM
Conference on Computer and Communications Security, CCS ’12,
2012.
[38] S. Rosen, Z. Qian, and Z. M. Mao. AppProïˇn ˛Aler: A Flexible Method
of Exposing Privacy-Related Behavior in Android Applications to
End Users. In Proceedings of the 3nd ACM Conference on Data and
Application Security and Privacy, CODASPY ’13, 2013.
[39] A. Russakovskii. http://www.androidpolice.com/2011/
10/01/massive-security-vulnerability-in-htc-
android-devices-evo-3d-4g-thunderbolt-others-
exposes-phone-numbers-gps-sms-emails-
addresses-much-more/.
[40] B. Sarma, C. Gates, N. Li, R. Potharaju, C. Nita-Rotaru, and
I. Molloy. Android Permissions: A Perspective Combining Risks and
Beneﬁts. In Proceedings of the 17th ACM Symposium on Access
Control Models and Technologies, SACMAT ’12, 2012.
[41] S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit: Separating
smartphone advertising from applications. In Proceedings of the 21th
USENIX Security Symposium, USENIX Security ’12, 2012.
[42] Smali. An assembler/disassembler for Android’s dex format.
http://code.google.com/p/smali/.
[43] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and
N. Sarda. CleanOS: Limiting Mobile Data Exposure With Idle
Eviction. In Proceedings of the 11th USENIX Symposium on
Operating Systems Design and Implementation, USENIX OSDI ’12,
2012.
[44] T. Vidas, N. Christin, and L. F. Cranor. Curbing Android permission
creep. In Proceedings of the 2011 Web 2.0 Security and Privacy
Workshop, W2SP ’11, 2011.
[45] Wiki. Samsung Galaxy S3. http://en.wikipedia.org/
wiki/Samsung_Galaxy_S_III.
[46] Z. Wu, X. Zhang, and X. Jiang. AppInk: Watermarking Android
Apps for Repackaging Deterrence. In Proceedings of the 8th ACM
Symposium on Information, Computer and Communications
Security, ASIACCS ’13, 2013.
[47] R. Xu, H. Saidi, and R. Anderson. Aurasium: Practical Policy
Enforcement for Android Applications. In Proceedings of the 21th
USENIX Security Symposium, USENIX Security ’12, 2012.
[48] L. K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the
OS and Dalvik Semantic Views for Dynamic Android Malware
Analysis. In Proceedings of the 21th USENIX Security Symposium,
USENIX Security ’12, 2012.
Detection of ‘Piggybacked’ Mobile Applications. In Proceedings of
the 3nd ACM Conference on Data and Application Security and
Privacy, CODASPY ’13, 2013.
[50] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. DroidMOSS: Detecting
Repackaged Smartphone Applications in Third-Party Android
Marketplaces. In Proceedings of the 2nd ACM Conference on Data
and Application Security and Privacy, CODASPY ’12, 2012.
[51] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization
and Evolution. In Proceedings of the 33rd IEEE Symposium on
Security and Privacy, IEEE Oakland ’12, 2012.
[52] Y. Zhou and X. Jiang. Detecting Passive Content Leaks and Pollution
in Android Applications. In Proceedings of the 20th Annual
Symposium on Network and Distributed System Security, NDSS ’13,
2013.
[53] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get off of My
Market: Detecting Malicious Apps in Ofﬁcial and Alternative
Android Markets. In Proceedings of the 19th Annual Symposium on
Network and Distributed System Security, NDSS ’12, 2012.
[54] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh. Taming
Information-Stealing Smartphone Applications (on Android). In
Proceedings of the 4th International Conference on Trust and
Trustworthy Computing, TRUST ’11, 2011.
APPENDIX
A. REACHABILITY ANALYSIS
Algorithm 3: Reachability Analysis
Input: path from entrypoint to sink
Output: path is reachable or not
ret = f alse;
intra_analysis(all nodes in path) ;
nodes = nodes in the path;
edges = edges in the path;
while constraint does not meet do
f lag = f alse;
foreach n ∈ nodes do
callee = callee set of n;
if callee = ∅ then
break;
foreach c ∈ callee do
if (n, c) ∈ edges then
f lag = f lag ∪ c.summarize(n);
if f lag then
inter_analysis(c);
if constraint meets then
break;
else
break;
ret = reachability_check(path with summary information);
return ret
634