### Figure 11 Analysis

Figure 11 presents a time series of goodput measurements taken at one-second intervals. The blue line represents a bundle of sessions that initially pass through Middlebox1 until the 70-second mark, after which they are rerouted to Middlebox2. Upon this transition, the goodput for all sessions increases significantly. Specifically, the goodput for sessions now passing through Middlebox2 is nearly double that of the sessions remaining on Middlebox1. Notably, the sessions migrating from Middlebox1 to Middlebox2 do not experience any performance degradation, such as packet loss or reordering, and are not blocked by the firewall on Middlebox2.

The average reconfiguration time for 100 migrations, including state transfer and measured from the moment a SYN message is sent until the new path is used, was less than 100 milliseconds. Comparing this with the times in Figure 13, it is evident that the state transfer process dominates the reconfiguration time.

### Limitations

#### Security Mechanisms
Our prototype does not implement the security mechanisms discussed in §2.3.

#### Domain Boundaries
In principle, Dysco service chains can span domain boundaries, as packets are steered from one middlebox to another using ordinary addressing and forwarding. In practice, however, a SYN packet carrying an address list (as described in §2.1) may be rejected by a domain’s firewall.

#### Routing and Service Chains
There is also a potential issue with service chains that begin where a TCP session enters a new domain. The routing within the domain must ensure that all packets of the session are directed to the same middlebox, specifically one with a Dysco agent that initiates the service chain for the session.

#### Dynamic Reconfiguration
Dynamic reconfiguration may face additional challenges if the reconfigured segment crosses a domain boundary, especially if an unmodified NAT at the boundary does not allow UDP packets to pass through. Our current prototype has another issue: the new path is set up using UDP packets (§3.3), causing TCP data packets to appear unsolicited. This problem can be addressed by setting up the new path with a TCP SYN handshake using random initial sequence numbers and employing the delta mechanism (§3.4) to correct subsequent sequence numbers in the data stream.

### Related Work

#### DOA
- **Global Name Space**: DOA uses a global name space, whereas Dysco does not.
- **Dynamic Reconfiguration**: DOA does not support dynamic reconfiguration of the service chain.
- **Middlebox Insertion**: DOA inserts middleboxes only on behalf of end-hosts, ignoring those inserted by administrators.
- **Encapsulation**: DOA uses encapsulation, including both high- and low-level addresses in each packet, which can increase packet size and cause MTU issues.

#### NUTSS
In the NUTSS architecture [12], session setup begins with an end-to-end handshake between end-hosts using high-level names. These handshakes are routed through an overlay network of servers that provide name authentication, encryption negotiation, and credential distribution. After the handshake, packets carry credentials to be accepted by middleboxes such as firewalls. NUTSS requires modifications to all end-hosts and middleboxes.

#### Connection Acrobatics
Nicutar et al. [28] use Multipath TCP to insert middleboxes into sessions. However, middleboxes can only be inserted after a TCP session is established end-to-end. Subsequently, a second end-to-end path is established through a middlebox, and the first path is removed. This approach has limitations, as middleboxes cannot protect end-hosts from unwanted sessions, choose session endpoints, or guarantee seeing all packets within a session.

#### NSH
Network Service Header (NSH) [16] is an encapsulation format for service chaining without using forwarding rules. It is an intra-domain format with no mechanism for dynamic reconfiguration.

### Complementary Research

#### mcTLS
Multi-context TLS (mcTLS) [25] enables middleboxes to operate on encrypted traffic through a signaling protocol that establishes a TCP session for each hop in the service chain and exchanges relevant security information. Like Dysco, mcTLS includes a list of middleboxes in the session setup message, carried in the TLS Hello message rather than the TCP SYN packet. mcTLS highlights the need for middleboxes to receive encryption keys through the session protocol, as fine-grained routing and forwarding alone are insufficient.

#### Mobility and Multihoming
End-to-end signaling protocols have been widely used for supporting end-host mobility [49]. ECCP [3], TCP Migrate [41], and msocket [48] are TCP-oriented and compatible with Dysco. msocket explicitly uses application-layer signaling to avoid new TCP options and handle middlebox complexities. Application data are encapsulated in msocket packets, making data streams appear as regular TCP data to middleboxes. Similar protocols, such as ECCP and Multipath TCP, have been used for multihoming, and all these protocols are intrinsically compatible with Dysco.

### Conclusion

This paper presents motivations for using a session protocol as the mechanism for TCP service chaining. Our Dysco protocol meets the requirements of various use cases and interoperates smoothly with routing and forwarding, making it a versatile solution. Dysco introduces a general capability for dynamic reconfiguration of service chains, with formal verification ensuring no data loss during reconfiguration. The autonomy of Dysco agents minimizes the load on centralized policy servers, and our experiments show fast session setup and teardown, high steady-state throughput, and minimal disruption during dynamic reconfiguration. Many middleboxes can run unmodified in the Dysco architecture.

Future work will include more measurements, prototyping of new use cases, and deployment in real networks. While some limitations remain, particularly in inter-domain service chaining, the Dysco approach offers significant potential compared to fine-grained forwarding, which has limited inter-domain capabilities.

### Acknowledgments

We thank Vyas Sekar and the anonymous SIGCOMM reviewers for their valuable feedback. We also thank Mina Arashloo, Bharath Balasubramanian, Jennifer Gossels, Rob Harrison, Yaron Koral, Robert MacDavid, and Shankaranarayanan Narayanan for their feedback on earlier drafts of this paper. This work was supported in part by NSF grant CNS-116112 and the Brazilian National Council for Scientific and Technological Development (CNPq) proc. 201983/2014-1.

### References

[References listed here, following the original format and content.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.