of Figure 11. The time series represents the goodput measured at
one-second intervals. The blue line is a bundle of sessions that runs
through Middlebox1 until the 70s mark and then changes to a new
path that goes through Middlebox2. After the blue-line sessions
are moved from Middlebox1 to Middlebox2, the goodput of all ses-
sions increases. The overall goodput of the sessions that now go
through Middlebox2 is almost twice the goodput of the sessions
that stayed on Middlebox1. The sessions that migrate from Middle-
box1 to Middlebox2 do not suffer performance degradation (i.e., no
lost or reordered packets) and are not blocked by the firewall on
Middlebox2. The average reconfiguration time for the 100 migra-
tions, including state transfer and measured from the moment a
SYN message is sent until the new path is used, was less than 100
ms. Comparing with the times from Figure 13, we can see that in
this case the state transfer dominates the reconfiguration time.
6 LIMITATIONS
Our prototype does not implement the security mechanisms pre-
sented in §2.3.
In principle, Dysco service chains can span domain boundaries,
because packets are steered from one middlebox to another by
ordinary addressing and forwarding. In practice, a SYN packet with
a payload—the address list, as in §2.1—may not be accepted by a
domain’s firewall.
There is also a potential practical problem with service chains
that begin where a TCP session enters a new domain. Routing in
the domain must ensure that all packets of the session are routed
to the same middlebox, one with a Dysco agent that initiates the
service chain for the session.
There may be an additional difficulty with dynamic reconfigura-
tion, if the reconfigured segment crosses a domain boundary, and
an unmodified NAT at the boundary does not allow UDP packets
to pass through. Our current prototype has yet another problem
that the new path is set up with UDP packets (§3.3), so its TCP data
packets appear unsolicited. The latter problem can be fixed, how-
ever, by setting up the new path with a TCP SYN handshake with
random initial sequence numbers, and using the delta mechanism
(§3.4) to correct subsequent sequence numbers in the data stream.
Dynamic Service Chaining with Dysco
SIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
global name space, while Dysco does not; (ii) DOA does not sup-
port dynamic reconfiguration of the service chain; (iii) DOA inserts
middleboxes only on behalf of end-hosts (ignoring middleboxes
inserted on behalf of administrators), and (iv) DOA uses encapsu-
lation, so that both high- and low-level addresses are included in
each packet. Extra addresses increase packet size, which may cause
MTU problems.
NUTSS: In the NUTSS architecture [12], session setup begins
with an end-to-end handshake between end-hosts with high-level
names. The handshake signals are routed by the high-level names
through an overlay network of servers. These servers are not mid-
dleboxes, however, but rather policy servers that provide name
authentication, negotiation of encryption, and distribution of cre-
dentials. After the handshake in the overlay network, packets in the
ordinary network carry credentials they can use to be accepted by
middleboxes such as firewalls that they are routed through. NUTSS
requires changes to all end-hosts and middleboxes.
Connection Acrobatics: Nicutar et al. [28] use Multipath TCP
to insert middleboxes into sessions. However, middleboxes cannot
be inserted until a TCP session is established end-to-end. Subse-
quently a second end-to-end path is established going through a
middlebox, and the first path is removed. A second middlebox can
then be inserted between an end-host and the first middlebox, and
so on. This approach takes dynamic insertion too far—because mid-
dleboxes are not included as the session is formed, middleboxes
cannot protect an end-host from unwanted sessions as a firewall
does, cannot choose the end-host of a session as a load balancer
does, and are not guaranteed to see all packets within a session.
NSH: Network Service Header [16] is an encapsulation format
for service chaining without the use of forwarding rules, so in this
list it is most closely related to DOA. NSH is an intra-domain format
only, and there is no mechanism for dynamic reconfiguration.
7.3 Research complementary to Dysco
mcTLS: Multi-context TLS (mcTLS) [25] enables middleboxes to
operate on encrypted traffic, through a signaling protocol that (i)
establishes a TCP session for each hop in the service chain and (ii)
exchanges the relevant security information for decrypting and
reencrypting the data. Like Dysco, mcTLS has a list of middleboxes
in a session setup message, which is yet another example of the need
for metadata. In mcTLS, however, the list is carried in the TLS Hello
message rather than the TCP SYN packet. mcTLS illustrates clearly
that if middleboxes are to operate on encrypted sessions then they
must receive encryption keys through the session protocol. Fine-
grained routing and forwarding can never be sufficient to enable
such middleboxes to do their jobs.
Mobility and multihoming: End-to-end signaling protocols
have been widely used for supporting end-host mobility [49]. Of
these, ECCP [3], TCP Migrate [41], and msocket [48] are TCP-
oriented. Both ECCP and TCP Migrate are oblivious to middleboxes.
msocket explicitly uses signaling at the application layer to avoid
introducing new TCP options and to deal with the complexities
introduced by middleboxes. Application data are encapsulated in
msocket packets, so data streams look like regular TCP data for
middleboxes. Likewise signaling protocols have been used for sup-
porting multihoming, notably ECCP [3] and Multipath TCP [31]. All
of these protocols are intrinsically compatible with Dysco, which
suggests that merging the approaches would be fruitful.
8 CONCLUSION
In this paper we have presented motivations for using a session
protocol as the mechanism for TCP service chaining. Our Dysco
protocol meets the requirements of a wide variety of use cases.
The protocol interoperates smoothly with the use of routing and
forwarding for service chaining, so there is no need to exclude
either approach.
Dysco introduces a very general capability for dynamic recon-
figuration of a service chain, along with a number of use cases for
it (§1). Correctness of this capability has been formally verified,
including the property that no data is lost due to reconfiguration.
Concerning the demand for new capabilities such as dynamic re-
configuration, the question to ask is not, “Is this capability being
demanded now?”, when even much simpler things are difficult
to deploy. A fairer question might be, “Would good uses for this
capability be found if it were readily available?”
Because Dysco agents have a great deal of autonomy, the load on
centralized policy servers is relatively light. Our experiments show
that session setup and teardown are fast, steady-state throughput is
high, and disruption due to dynamic reconfiguration is minimized.
Many middleboxes can run unmodified in the Dysco architecture.
Future work will include more measurements, prototyping of new
use cases, and deployment of Dysco in a real network.
Some limitations remain, particularly in the realization of Dysco’s
potential for inter-domain service chaining. However, the Dysco
approach has received far less attention than fine-grained forward-
ing as a mechanism for service chaining (which has little hope
of extending to inter-domain service chains). A fair question for
comparison might be, “If the same amount of research effort were
put into this approach as has gone into fine-grained forwarding,
which alternative would look better?”
ACKNOWLEDGMENTS
We thank our shepherd Vyas Sekar and the anonymous SIGCOMM
reviewers for their valuable feedback. We also thank Mina Arashloo,
Bharath Balasubramanian, Jennifer Gossels, Rob Harrison, Yaron
Koral, Robert MacDavid, and Shankaranarayanan Narayanan for
their feedback on earlier drafts of this paper. This work was sup-
ported in part by NSF grant CNS-116112, and by the Brazilian
National Council for Scientific and Technological Development
(CNPq) proc. 201983/2014-1.
REFERENCES
[1] Bilal Anwer, Theophilus Benson, Nick Feamster, and David Levin. 2015. "Pro-
gramming Slick Network Functions". In ACM SIGCOMM Symposium on Software
Defined Networking Research. 14:1–14:13.
[2] Arbor 2015. Arbor Networks SP Solution. (2015). http://www.arbornetworks.
com/images/documents/Data%20Sheets/DS_SP_EN.pdf.
[3] Matvey Arye, Erik Nordstrom, Robert Kiefer, Jennifer Rexford, and Michael J.
Freedman. 2012. A Formally-verified Migration Protocol for Mobile, Multi-homed
Hosts. In IEEE International Conference on Network Protocols. 1–12.
[4] R. Atkinson, S. Bhatti, and S. Hailes. 2010. Evolving the Internet Architecture
Through Naming. IEEE Journal on Selected Areas in Communication 28, 8 (October
2010), 1319–1325.
[5] Bro 2017. The Bro Network Security Monitor. (2017). https://www.bro.org/.
SIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
P. Zave et al.
[34] C. Perkins, D. Johnson, and J. Arkko. 2011. Mobility Support in IPv6.
IETF
Request for Comments 6275. (July 2011).
[35] PRADS 2017. PRADS. (2017). http://gamelinux.github.io/prads/.
[36] Zafar Ayyub Qazi, Phani Krishna, Vyas Sekar, Vijay Gopalakrishnan, Kaustubh
Joshi, and Samir Das. 2016. KLEIN: A Minimally Disruptive Design for an Elastic
Cellular Core. In ACM Symposium on SDN Research. 2:1–2:12.
[37] Zafar Ayyub Qazi, Cheng-Chun Tu, Luis Chiang, Rui Miao, Vyas Sekar, and
Minlan Yu. 2013. SIMPLE-fying Middlebox Policy Enforcement Using SDN.
In ACM SIGCOMM Conference on Applications, Technologies, and Protocols for
Computer Communication. 27–38.
[38] Costin Raiciu, Christoph Paasch, Sebastien Barre, Alan Ford, Michio Honda,
Fabien Duchene, Olivier Bonaventure, and Mark Handley. 2012. How Hard Can
It Be? Designing and Implementing a Deployable Multipath TCP. In USENIX
Conference on Networked Systems Design and Implementation. 399–412.
[39] Shriram Rajagopalan, Dan Williams, Hani Jamjoon, and Andrew Warfield. 2013.
Split/Merge: System Support for Elastic Execution in Virtual Middleboxes. In
USENIX Conference on Networked Systems Design and Implementation. 227–240.
[40] Justine Sherry, Shaddi Hasan, Colin Scott, Arvind Krishnamurthy, Sylvia Rat-
nasamy, and Vyas Sekar. 2012. Making Middleboxes Someone Else’s Problem:
Network Processing As a Cloud Service. In ACM SIGCOMM Conference on Appli-
cations, Technologies, and Protocols for Computer Communication. 13–24.
[41] Alex C. Snoeren and Hari Balakrishnan. 2000. An End-to-End Approach to
Host Mobility. In ACM Annual International Conference on Mobile Computing and
Networking. 155–166.
[42] Snort 2017. Snort. (2017). https://www.snort.org/.
[43] Squid 2017. Squid. (2017). http://www.squid-cache.org/Intro/.
[44] Suricata 2017. Suricata. (2017). http://www.suricata-ids.org/.
[45] Verisign 2015. Faster DDoS Mitigation with Increased Customer Control: In-
troducing Verisign OpenHybrid Customer Activated Mitigation. (Sept. 2015).
http://blogs.verisign.com/blog/entry/faster_ddos_mitigation_with_increased.
[46] Michael Walfish, Jeremy Stribling, Maxwell Krohn, Hari Balakrishnan, Robert
Morris, and Scott Shenker. 2004. Middleboxes No Longer Considered Harmful.
In USENIX Symposium on Opearting Systems Design & Implementation. 215–230.
[47] wrk 2017. wrk: A HTTP Benchmarking Tool. (2017). https://github.com/wg/wrk/.
[48] Aditya Yadav and Arun Venkataramani. 2016. msocket: System Support for
Mobile, Multipath, and Middlebox-Agnostic Applications. In IEEE International
Conference on Network Protocols. 1–10.
[49] Pamela Zave and Jennifer Rexford. 2013. The Design Space of Network Mobility.
In Recent Advances in Networking, Olivier Bonaventure and Hamed Haddadi
(Eds.). ACM SIGCOMM, New York, NY, USA.
[50] Ying Zhang, Neda Beheshti, Ludovic Beliveau, Geoffrey Lefebvret, Ravi Manghir-
malani, Ramesh Mishra, Ritun Patney, Meral Shirazipour, Ramesh Subrahmaniam,
Catherine Truchan, and Mallik Tatipamula. 2013. StEERING: A Software-Defined
Networking for Inline Service Chaining. In IEEE International Conference on
Network Protocols. 1–10.
[6] Contrail 2017.
Contrail Feature Guide, Release 2.20, Service Chaining.
http://www.juniper.net/techpubs/en_US/contrail2.2/topics/task/
(2017).
configuration/service-chaining-vnc.html.
[7] Docker 2017. Docker. (2017). https://www.docker.com/.
[8] Dysco 2017. Dysco supplemental material. (2017). https://github.com/dysco/.
[9] Seyed Kaveh Fayazbakhsh, Luis Chiang, Vyas Sekar, Minlan Yu, and Jeffrey C.
Mogul. 2014. Enforcing Network-Wide Policies in the Presence of Dynamic
Middlebox Actions using FlowTags. In USENIX Conference on Networked Systems
Design and Implementation. 533–546.
[10] Aaron Gember, Anand Krishnamurthy, Saul St. John, Robert Grandl, Xiaoyang
Gao, Ashok Anand, Theophilus Benson, Vyas Sekar, and Aditya Akella. 2014.
Stratos: A Network-Aware Orchestration Layer for Virtual Middleboxes in Clouds.
http://arxiv.org/abs/1305.0209. (2014).
[11] Aaron Gember-Jacobson, Raajay Viswanathan, Chaithan Prakash, Robert Grandl,
Junaid Khalid, Sourav Das, and Aditya Akella. 2014. OpenNF: Enabling Innovation
in Network Function Control. In ACM SIGCOMM Conference on Applications,
Technologies, and Protocols for Computer Communication. 163–174.
[12] Saikat Guha and Paul Francis. 2007. An End-Middle-End Approach to Connection
Establishment. In ACM SIGCOMM Conference on Applications, Technologies, and
Protocols for Computer Communication. 193–204.
[13] W. Haeffner, J. Napper, M. Stiemerling, D. Lopez, and J. Uttaro. 2016. Service
Function Chaining Use Cases in Mobile Networks. IETF Internet Draft draft-ietf-
sfc-use-case-mobility-07. (Oct. 2016).
[14] HAProxy 2017. HAProxy: The Reliable, High Performance TCP/HTTP Load
Balancer. (2017). http://www.haproxy.org/.
[15] Gerard J. Holzmann. 2003. The Spin Model Checker: Primer and Reference Manual
(first ed.). Addison-Wesley Professional, Boston, MA, USA.
[16] IETF 2017. IETF Working Group on Service Function Chaining (SFC). (2017).
http://datatracker.ietf.org/wg/sfc/.
[17] J. R. Iyengar, P. D. Amer, and R. Stewart. 2006. Concurrent Multipath Trans-
fer Using SCTP Multihoming over Independent End-to-End Paths. IEEE/ACM
Transactions on Networking 14, 5 (2006), 951–964.
[18] Xin Jin, Li Erran Li, Laurent Vanbever, and Jennifer Rexford. 2013. SoftCell:
Scalable and Flexible Cellular Core Network Architecture. In ACM Conference on
Emerging Networking Experiments and Technologies. 163–174.
[19] Dilip A. Joseph, Arsalan Tavakoli, and Ion Stoica. 2008. A Policy-Aware Switching
Layer for Data Centers. In ACM SIGCOMM Conference on Applications, Technolo-
gies, and Protocols for Computer Communication. 51–62.
[20] R. Krishnan, A. Ghanwani, J. Halpern, S. Kini, and D. Lopez. 2015. SFC Long-lived
Flow Use Cases. IETF Internet Draft draft-ietf-sfc-long-lived-flow-use-cases-03.
(Feb. 2015).
[21] Linux-NF 2017. Linux Netfilter. (2017). http://www.netfilter.org.
[22] Linux-TC 2017. Linux TC. (2017). http://lartc.org/manpages/tc.txt.
[23] Mininet 2017. Mininet: An Instant Virtual Network on your Laptop (or other
PC). (2017). http://mininet.org/.
[24] A. R. Natal, L. Jakab, M. Portolés, V. Ermagan, P. Natarajan, F. Maino, D. Meyer,
and A. C. Aparicio. 2013. LISP-MN: Mobile networking through LISP. Wireless
Personal Communications 70, 1 (May 2013), 253–266.
[25] David Naylor, Kyle Schomp, Matteo Varvello, Ilias Leontiadis, Jeremy Blackburn,
Diego Lopez, Konstantina Papagiannaki, Pablo Rodriguez Rodriguez, and Peter
Steenkiste. 2015. Multi-Context TLS (mcTLS): Enabling Secure In-Network
Functionality in TLS. In ACM SIGCOMM Conference on Applications, Technologies,
and Protocols for Computer Communication. 199–212.
[26] Neutron 2017. Neutron Service Insertion and Chaining. (2017). http://wiki.
openstack.org/wiki/Neutron/ServiceInsertionAndChaining.
[27] NGINX 2017. NGINX: A High-Performance HTTP Server and Reverse Proxy.
(2017). https://nginx.com/.
[28] Catalin Nicutar, Christoph Paasch, Marcel Bagnulo, and Costin Raiciu. 2013.
Evolving the Internet with Connection Acrobatics. In Workshop on Hot Topics in
Middleboxes and Network Function Virtualization. 7–12.
[29] P. Nikander, A. Gurtov, and T. R. Henderson. 2010. Host Identity Protocol (HIP):
Connectivity, Mobility, Multi-Homing, Security, and Privacy over IPv4 and IPv6
Networks. IEEE Communications Surveys and Tutorials 12, 2 (April 2010), 186–204.
[30] Erik Nordström, David Shue, Prem Gopalan, Rob Kiefer, Matvey Arye, Steven Ko,
Jennifer Rexford, and Michael J. Freedman. 2012. Serval: An End-host Stack for
Service-centric Networking. In USENIX Conference on Networked Systems Design
and Implementation. 85–98.
[31] Christoph Paasch and Olivier Bonaventure. 2014. Multipath TCP. Commun. ACM
57, 4 (April 2014), 51–57.
[32] Shoumik Palkar, Chang Lan, Sangjin Han, Keon Jang, Aurojit Panda, Sylvia
Ratnasamy, Luigi Rizzo, and Scott Shenker. 2015. E2: A Framework for NFV
Applications. In Symposium on Operating Systems Principles. 121–136.
[33] Parveen Patel, Deepak Bansal, Lihua Yuan, Ashwin Murthy, Albert Green-
berg, David A. Maltz, Randy Kern, Hemant Kumar, Marios Zikos, Hongyu Wu,
Changhoon Kim, and Naveen Karri. 2013. Ananta: Cloud Scale Load Balancing.
In ACM SIGCOMM Conference on Applications, Technologies, and Protocols for
Computer Communication. 207–218.