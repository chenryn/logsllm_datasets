    ```
    输出将为您提供签名者的详细信息、已签名的标记映像以及映像上的其他信息:
    ```
    Signatures for vincesestodocker/security-app:trust2
    SIGNED TAG      DIGEST                     SIGNERS
    trust2          d848a63170f405ad3…         vincesestodocker
    List of signers and their keys for vincesestodocker/security-app:
    trust2
    SIGNER              KEYS
    vincesestodocker    f4b834e54c71
    Administrative keys for vincesestodocker/security-app:trust2
      Repository Key:
        26866c7eba348164f7c9c4f4e53f04d7072fefa9b52d254c573e8b082
        f77c966
      Root Key:
        69bef52a24226ad6f5505fd3159f778d6761ac9ad37483f6bc88b1cb4
        7dda334
    ```
10.  Use the `docker trust revoke` command to remove the signature of the associated key:
    ```
    docker trust revoke vincesestodocker/security-app:trust2
    Enter passphrase for vincesestodocker key with ID f4b834e: 
    Successfully deleted signature for vincesestodocker/security-app:
    trust2
    ```
    注意
    如果您使用自己的 Docker 注册表，您可能需要设置一个公证服务器，以允许 DCT 与您的 Docker 注册表一起工作。亚马逊的弹性容器注册中心和 Docker 可信注册中心等产品在其产品中内置了公证员。
如您所见，使用离散余弦变换对 Docker 映像进行签名和验证，可以轻松控制作为应用一部分的映像。使用来自可信来源的签名映像只是等式的一部分。在下一节中，我们将使用 Anchore 和 Snyk 开始扫描我们的映像以查找漏洞。
# Docker 映像安全扫描
安全扫描不仅在确保应用的正常运行时间方面发挥着重要作用，而且还确保您没有运行过时、未修补或易受攻击的容器映像。应该对您的团队和环境中使用的所有映像执行安全扫描。如果你从头开始创造了它们，并且信任它们，这并不重要；这仍然是降低您环境中潜在风险的重要一步。本章的这一部分将介绍两种扫描映像的方法，这两种方法很容易被您的开发团队采用。
通过对我们的 Docker 映像进行安全扫描，我们希望实现以下目标:
*   我们需要保存一个已知和最新漏洞的数据库，或者使用一个代表我们保存该数据库的应用。
*   我们根据这个漏洞数据库扫描我们的 Docker 映像，不仅验证底层操作系统是安全的和打补丁的，而且验证容器使用的开源应用和我们的软件实现使用的语言是安全的。
*   安全扫描完成后，我们需要获得一份完整的报告，说明在我们的映像上扫描了哪些内容，并报告和提醒扫描过程中可能突出显示的任何问题。
*   最后，通过更新 Dockerfile 中使用的基础映像或支持使用的应用，安全扫描可以对发现的任何问题进行补救并发出警报。
市场上有很多产品可以为您执行安全扫描，包括付费的和开源的。本章的篇幅有限，因此我们选择了两种既易于使用又能提供良好功能的服务。第一个是 Anchore，这是一个开源的容器分析工具，我们将把它安装到我们的系统上，并作为本地工具运行来测试我们的映像。然后我们将看看 Snyk，这是一个在线的 SaaS 产品。有一个 Snyk 的免费版本，这是我们将在本章中用来演示它如何工作的版本。它提供了不错的功能，不需要每月付费。
# 使用锚定安全扫描在本地扫描映像
Anchore Container Analysis 是一个开源静态分析工具，允许您扫描 Docker 映像，并根据用户定义的策略提供通过或失败的结果。Anchore Engine 允许用户在不运行映像的情况下提取映像，分析映像内容，并评估映像是否适合使用。Anchore 使用 PostgreSQL 数据库来存储已知漏洞的详细信息。然后，您可以使用命令行界面根据数据库扫描映像。Anchore 还使入门变得非常容易，我们将在下面的练习中看到，因为它提供了一个易于使用的`docker-compose`文件来自动安装，并让您尽快入门。
注意
如果你有兴趣了解更多关于主播的信息，https://docs.anchore.com/current/有大量的文档和信息。
在接下来的练习中，一旦我们的环境启动并运行，您将使用 Anchore 的应用编程接口与它进行交互。`anchore-cli`命令附带了许多易于使用的命令来检查系统状态，并开始评估我们的映像的漏洞。
一旦我们的系统启动并运行，我们可以使用`system status`命令提供我们所有服务的列表，并确保它们启动并运行:
```
anchore-cli system status
```
一旦系统启动并运行，您需要做的第一件事就是验证提要列表是否是最新的。这将确保您的数据库已经填充了漏洞源。这是通过以下`system feeds list`命令实现的:
```
anchore-cli system feeds list
```
默认情况下，`anchore-cli`将使用 Docker Hub 作为您的映像注册表。如果您的映像位于不同的注册表中，您将需要使用`anchore-cli registry add`命令添加注册表，并指定注册表名称，以及包含 Anchore 可以使用的用户名和密码:
```
anchore-cli registry add   
```
要向 Anchore 添加映像，可以使用`image add`命令行选项，包括 Docker Hub 位置和映像名称:
```
anchore-cli image add /
```
如果您希望扫描映像中的漏洞，可以使用`image vuln`选项，包括您最初扫描的映像名称。我们还可以对操作系统特定的漏洞使用`os`选项，对语言相关的漏洞使用`non-os`选项。在以下示例中，我们使用了`all`来包含`os`和`non-os`选项:
```
anchore-cli image vuln / all
```
然后，要查看已完成的映像评估，并获得映像是否可以安全使用的合格或不合格信息，请使用`anchore-cli`命令的`evaluate check`选项:
```
anchore-cli evaluate check /
```
考虑到这一点，Anchore 确实提供了一个受支持的付费版本，具有易于使用的网络界面，但是正如您将在下面的练习中看到的，让 Anchore 应用在您的系统上运行和扫描并不需要太多的艰苦工作。
注意
前面的练习使用了离散余弦变换作为容器创建和签名的一部分。在下面的练习中，练习所需的 Anchore 映像使用了`latest`标记，因此如果您仍在运行 DCT，则需要在继续下一个练习之前停止它:
`export DOCKER_CONTENT_TRUST=0`
## 练习 11.03:开始主播映像扫描
在下面的练习中，您将使用`docker-compose`将 Anchore 安装到您的本地系统上，并开始分析您在本章中使用的映像:
1.  Create and tag a new version of the `security-app` image that you have been working on. Tag the image with the `scan1` tag:
    ```
    docker tag security-app:latest vincesestodocker/security-app:scan1 ;
    ```
    将其推送到 Docker Hub 存储库:
    ```
    docker push vincesestodocker/security-app:scan1
    ```
2.  创建一个名为`aevolume`的新目录，并使用以下命令进入该目录。这是我们将执行工作的地方:
    ```
    mkdir aevolume; cd aevolume
    ```
3.  Anchore 在一个易于使用的`docker-compose.yaml`文件中为您提供了开始设置和运行 Anchore API 所需的一切。使用以下命令拉出最新的`anchore-engine` Docker 编写文件:
    ```
    curl -O https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml
    ```
4.  浏览`docker-compose.yml`文件。虽然它包含 130 多行，但文件中没有太复杂的内容。`Compose`文件正在设置 Anchore 的功能，包括 PostgreSQL 数据库、目录和分析器以供查询；简单的队列和策略引擎；和运行命令和查询的应用编程接口。
5.  Pull the images needed by the `docker-compose.yml` file using the `docker-compose pull` command, making sure you are in the same directory as the `Compose` file:
    ```
    docker-compose pull
    ```
    该命令将开始提取数据库、目录、分析器、简单队列、策略引擎和应用编程接口:
    ```
    Pulling anchore-db           ... done
    Pulling engine-catalog       ... done
    Pulling engine-analyzer      ... done
    Pulling engine-policy-engine ... done
    Pulling engine-simpleq       ... done
    Pulling engine-api           ... done
    ```
6.  If all our images are now available, as seen in the preceding output, there is nothing left to do other than running the `Compose` file using the `docker-compose up` command. Use the `-d` option to have all of the containers running in the background as daemons:
    ```
    docker-compose up -d
    ```
    该命令应输出以下内容:
    ```
    Creating network "aevolume_default" with the default driver
    Creating volume "aevolume_anchore-db-volume" with default driver
    Creating volume "aevolume_anchore-scratch" with default driver
    Creating aevolume_anchore-db_1 ... done
    Creating aevolume_engine-catalog_1 ... done
    Creating aevolume_engine-analyzer_1      ... done
    Creating aevolume_engine-simpleq_1       ... done
    Creating aevolume_engine-api_1           ... done
    Creating aevolume_engine-policy-engine_1 ... done
    ```
7.  Run the `docker ps` command to have the running containers on your system that make up Anchore ready to start scanning our images. The `IMAGE`, `COMMAND`, and `CREATED` columns are removed from the table for convenience:
    ```
    docker-compose ps
    ```
    输出中的所有值应显示每个固定发动机容器的`healthy`:
    ```
    CONTAINER ID       STATUS         PORTS
        NAMES
    d48658f6aa77       (healthy)      8228/tcp
        aevolume_engine-analyzer_1
    e4aec4e0b463   (healthy)          8228/tcp
        aevolume_engine-policy-engine_1
    afb59721d890   (healthy)          8228->8228/tcp
        aevolume_engine-api_1
    d61ff12e2376   (healthy)          8228/tcp
        aevolume_engine-simpleq_1
    f5c29716aa40   (healthy)          8228/tcp
        aevolume_engine-catalog_1
    398fef820252   (healthy)          5432/tcp
        aevolume_anchore-db_1
    ```
8.  Now that the environment is deployed onto your system, use the `docker-compose exec` command to run the `anchor-cli` commands mentioned earlier. Use the `pip3` command to install the `anchorecli` package onto your running system. The `--version` command has been used to verify whether `anchore-cli` has installed successfully:
    ```
    pip3 install anchorecli; anchore-cli --version
    ```
    该命令返回`anchor-cli`版本:
    ```
    anchore-cli, version 0.5.0
    ```
    注意
    版本可能因您的系统而异。
9.  You could now run your `anchore-cli` command, but you would need to specify the URL (using `--url`) to your API and the username and password (using `--u` and `--p`). Instead, export the values to your environment with the following commands so that you don't need to use the extra command-line options:
    ```
    export ANCHORE_CLI_URL=http://localhost:8228/v1
    export ANCHORE_CLI_USER=admin
    export ANCHORE_CLI_PASS=foobar
    ```
    注意
    前面的变量是 Anchore 提供的`Compose`文件的默认值。如果您决定设置在您的部署环境中运行的环境，您很可能会更改这些环境以提高安全性。
10.  With `anchore-cli` now installed and configured, use the `anchore-cli system status` command to verify that the analyzer, queue, policy engine, catalog, and API are all up and running:
    ```
    anchore-cli system status
    ```
    可能有一两个服务关闭的情况，这意味着您很可能需要重新启动容器:
    ```
    Service analyzer (anchore-quickstart, http://engine-analyzer:
    8228): up