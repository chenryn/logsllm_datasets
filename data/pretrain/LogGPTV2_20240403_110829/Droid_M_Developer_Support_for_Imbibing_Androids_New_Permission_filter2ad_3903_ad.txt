least will not cause unexpected program malfunction or crashes. We
further discuss how to handle denied permissions in §7.
Critical Permissions: Droid M+ currently does not support iden-
tifying critical permissions that must be requested up-front. For
such permissions, developers have to add the requests manually and
provide proper education on the welcome screen [17]. However, be-
cause granted permissions can always be revoked by users at anytime
(through system settings), the code snippets that Droid M+ inserts
are still necessary for the correct functioning of the app.
5 EVALUATIONS
In this section, we present the Droid M+’s evaluations. Our evalua-
tion focus on answering two questions: (a) How applicable is Droid
M+ i.e., how well can it handle today’s apps on the Play Store? and,
(b) How good is our permission request placement algorithm?
We implement Droid M+’s static analyzer based on the soot [40]
static analysis framework. We use apktool [7] and androguard [3] to
analyze existing apps. Annotation interpretation and code insertion
is done based on Java JDK 1.8 and using the Java parser [24].
5.1 Applicability
We design Droid M+ to be a source code level tool set. Unfortunately,
as there are only a limited number of open sourced Android apps,
we evaluate Droid M+ in two ways. First, using RingDroid as a
case study, we showcase how Droid M+ would work on real world
Android apps. Then we analyze 100 top apps from the Google Play
store and quantify how many apps can be handled by Droid M+.
Case Study: Ringdroid. Ringdroid [35] is an open source app that
records and edits sounds. In this case study, we use the commit
955039d that was pushed on December 2, 2016; actual source code
and line numbers can be found in [35]. Although Ringdroid was
developed by Google and was targeting the latest Android SDK (API
level 25), it surprisingly does not support revocable permissions
(built against API level 22). Instead, it just wraps access to protected
APIs with a try block and catches the thrown SecurityException.
This makes it a good example to showcase the benefits of Droid M+.
Ringdroid requires four dangerous permissions: READ CONTACTS,
WRITE CONTACTS, RECORD AUDIO, and WRITE EXTERNAL STORAGE. The
static analyzer in Droid M+, finds 11 functionalities that require
permissions. Among them 8 are background functionalities and the
remaining 3 are associated with button clicks. 9 requests are finally
inserted by Droid M+ (2 are redundant). In all the 9 cases, the
requests were inserted immediately before the associated sensitive
call happens, because the containing methods are all void methods.
• The first functionality is the onCreateLoader interface, im-
plemented by RingdroidSelectActivity when it returns a
CursorLoader that requires the STORAGE permission. This method
is invoked in the background by the Android framework when
LoadManager related methods are invoked (e.g., in the onCreate
method at line 151 and 152). Droid M+ insert the requests before
line 151 (152 is covered by this request), and the remainder of the
code from line 151 to line 187 is replicated in a wrapper method.
• The LoadManager is also invoked in the refreshListView method.
Since this method can be called from other UI events such
as onCreateOptionsMenu), Droid M+ placed a request for the
STORAGE permission at line 528 with lines 528 and 529 replicated
in a wrapper.
• In the onDelete method invoked from a button click callback
function, Droid M+ inserted a request for the STORAGE permission
at line 473; the remainder of the function is replicated in a wrapper.
• The ReadMetadata method also requires the STORAGE permission.
However, since it is not part of an Activity, Droid M+ has to move
it up to the loadFromFile method of the RingdroidEditActivity.
Droid M+ inserted a request at line 598, with the remainder
of the function replicated in a wrapper. Note that inside the
loadFromFile method, there is a background thread that also
requires the STORAGE permission. However, as the permission has
already been requested, no request is inserted for this thread.
• The MICROPHONE permission is also required by the RecordAudio
method of the SoundFile. However, as it is invoked from a back-
ground thread, the request is inserted before the creation of the
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea772Group
LOCATION
CONTACTS
CALENDAR
PHONE
MICROPHONE
STORAGE
ACCESS COARSE LOCATION, ACCESS FINE LOCATION
READ CONTACTS, GET ACCOUNTS
READ CALENDAR
Permissions
READ CALL LOG, READ PHONE STATE
RECORD AUDIO
WRITE EXTERNAL STORAGE
Figure 8: CDF
of
vs
apps
functionali-
ties
permission(s).
requiring
9:
Figure
Average
Compila-
tion Time.
thread at line 755 inside the recordAudio method; the rest of the
function is replicated in a wrapper.
• Three methods of the SoundFile class: ReadFile, WriteFile,
and WriteWAVFile require the STORAGE permission. But as they
are invoked in background threads, namely, one created in
the loadFromFile method discussed above and another in the
saveRingtone method, the request is inserted inside the creation
method. In particular, this is done at line 1225. The rest of the
function replicated in a wrapper.
• The ChooseContactActivity implements the onCreateLoader
interface which will return a CursorLoader that requires the
CONTACTS permission. The loader is initialized in the onCreate
method. Thus, a request is inserted at line 129 with the code from
line 129 to line 139 replicated.
• The afterTextChanged method handles UI events. A request to
CONTACTS permission is inserted to enable restartLoader, at line
181; this line (line 181) is replicated in a wrapper.
• The assignRingtoneToContact method, invoked from a button
click callback function, also requires the CONTACTS permission. A
request is inserted at line 154 with the remainder of the function
replicated in a wrapper.
The reasons for requesting these permissions are self-explanatory;
thus, we omit the annotations that were created.
Extended Measurement:To understand the applicability of Droid
M+ to general apps, we perform the following measurements. First,
since Droid M+ cannot handle native code that requires dangerous
permissions (e.g., write to the external storage), we analyze how
many apps from our measurement study (1) contain native code and
(2) require external storage read/write permissions1. We found that
546 apps from among the 7000 apps match these criteria and thus,
might not be handled by Droid M+.
Next, we analyze 100 top Android M apps that do not have native
code and require dangerous permissions. We choose Android M apps
to ensure that we can also compare the permission requests place-
ments. From among these apps, we found 698 functionalities that
would request a total of 158 permissions up-front. On average, each
application has 7 different functionalities that require permission(s);
90% of the apps have 13 “permission requiring” functionalities or
fewer. Fig. 8 presents the CDF of the number of permission requiring
1 We have verified experimentally that this is the only common permission that is used
within native code.
Table 1: Dangerous permissions requested by Any.Do.
functionalities of the analyzed apps. Among these functionalities
that require permissions, 203 are Activities, 232 are UI event han-
dlers, 201 are third-party libraries, and 60 are background threads.
Most of the functionalities (579) require only one permission, 98
require two, 21 require three or more.
Regarding request placement, as was discussed in § 4, Droid M+
cannot place an annotation in a non-void method whose return value
depends on the permission and would be used by its caller(s). To
understand how common this situation is, we performed a more
conservative measurement – how many non-void methods contain
access to protected APIs. We found that 43% of the methods would
returns a value and thus, the placement of the permission request
may have to moved up to its callers. We also found that 11.3% of
these requests might need to be placed on the entry method because
all the other methods inside the functionality return a value.
Finally, by applying Droid M+ to these apps, only 48 permissions
will be requested up-front (instead of 158), while the remaining
will be asked instead, in-context; this corresponds to a decrease of
69.62% in permissions asked up front.
5.2 Quality of Request Placement
Next, we evaluate the effectiveness of our request placement strategy
(i.e., examine whether the processed app actually follows Google’s
guidelines [17]). To show that this is indeed the case, we first use an
existing Android M app that supports revocable permissions to show
that Droid M+’s placement matches the placement of the developers,
i.e., we are as good as manual placement. Then we reason about why
the Droid M+-processed app will follow the guidelines.
Case Study: Any.do. In this case study, we analyzed the free version
of Any.do [5], one of the most popular “To do” and task list apps on
Google’s Play Store with a total number of installations between 10
and 50 million. This app was updated last on November 21, 2016
and it supports the new revocable permission model. We input the
downloaded APK to Droid M+’s static analyzer and find that the app
requires 9 dangerous permissions (see Table 1).
Manual request placement. Upon launch, the app requests users
for permissions for LOCATION, CONTACTS, and PHONE. No explanation
or education is provided with regards to any of these. Upon further
investigation, we find that none of the requested permissions are criti-
cal and the app would continue to function even if no permissions are
granted. In addition to these up-front requests, all used permissions
are also requested in-context; so they can be dynamically revoked.
• The LOCATION permission is used in four functionalities: one for
attaching to a scheduled task for location based reminders, two
for sharing the location to custom analytics classes, and one in a
third-party location-based library.
• The CONTACTS permission is used in two functionalities: when the
user shares a task with her friends and to display the caller of a
missed phone call. If the permission is not granted, no feedback
is provided and the corresponding functionality is not performed.
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea773• The PHONE permission is used when the user seeks to be noti-
fied with regards to missed phone calls. If the permission is not
granted, feedback “Missed call feature requires phone permission”
is provided. It is also being used in the two analytics classes.
• The CALENDAR permission is requested in-context
to cross-
reference the tasks with the user’s calendar for conflict detection,
etc. If the permission is denied, the feedback “Post meeting feature
requires calendar permission” is provided.
• The MICROPHONE permission is requested correctly in-context
when the user wants to add a voice message to a task that she
schedules for later. If the permission is not granted, the feedback
“Recording permission is needed” is provided.
• The STORAGE permission is also requested correctly in-context
when the user wants to add a photo or a document to her sched-
uled task. If the permission is not granted, the feedback “This
feature requires access to external storage” is provided. But this
permission is also used by three different third party libraries.
In summary, to support revocable permissions, all permissions are
checked before use; however, only 3 (50%) are requested in-context.
Moreover, Google’s guidelines are not adequately followed: (1)
non-critical permissions are requested up-front, (2) no education is
provided. While admittedly in many cases the reasons for requesting
a permission can be inferred from the functionality, some cases are
less intuitive (e.g., displaying the callers for missed calls); (3) when
permissions are denied, feedback is not always provided and the
functionality silently fails (e.g., share with contacts).
Droid M+’s request placement. Because Any.Do does not always
request the permission in-context, we cannot do a one-to-one match-
ing with its request placement; instead, we perform two measure-
ments: (1) we check if their in-context requests matches Droid M+’s
and (2) we check if their in-context checks matches the requests
made by Droid M+.
For the three already in-context permission requests, because they
are all inside click handlers, our placement is roughly the same as
existing placement. There is a difference due to the fact that, to sup-
port ascynchronous permission requests, Any.do’s code has already
been refactored so that the protected APIs are all accessed inside
void methods and the permissions are asked before the invocation
of the methods. This makes Droid M+’s placement one level deeper
than existing placement (permissions are asked inside the method).
Unfortunately, since we do not have an older version of this app, we
cannot verify if without such factoring, our algorithm would have
yielded the same placement.
In the remaining places where permissions are checked but not
requested, Droid M+’s static analyzer identified all of those as places
where permissions should be requested. From among them, 16 of
the accesses are inside third-party libraries and 4 of them are inside
background threads. We have also manually checked whether our
request placements are in-context and the answer is yes.
Discussion: Although Any.Do is a single case study, we argue that
the evaluations carry over to other apps. Specifically, the quality of
the request placement is assessed based on whether the request would
be in-context. In Droid M+ we achieve this goal in two steps: (1) we
segment the code into different functionalities based on unique entry
points and (2) we try to place the request as close to the permission
use as possible. We believe this is effective for the following reasons.
First, our functionality identification process essentially segments
the app into Activities, UI events handlers, and background threads.
Since most UI events handlers are single-purposed and very simple,
permissions requests should also be in-context. Activities typically,
at most represent a single context; thus, any request within an Ac-
tivity is highly likely to be in-context. Furthermore, the quality of
the placement inside a Activity is further improved in the second
step (see above). For background threads, due to the limitation of the
Android framework, the request would is less likely to be in-context;
however, Droid M+ still improves the quality of the request by sup-
porting the insertion of justifications. Finally, note that the fallback
solution for placement is to place the requests in the main activity.
However, this need did not arise in our test cases.
5.3 Performance
Next, we seek to experimentally quantify the overheads that accom-
pany Droid M+ on the developer side. Towards this, again consider
Ringdroid, the open source app that was previously described and
modify it to support revocable permissions. We make two constructs;
in one the API of Android M is used, and in the other system is used.
Compilation Overhead: Our case study was performed on An-
droid Studio 1.4.1, running on a laptop with a quad core Intel Core
i7 2.00GHz CPU with 16GB of RAM and a hard drive of 1TB at
5400 rpm. We seek to quantify the increase in the compilation time
with Droid M+ compared Android M’s API, because of the addi-
tional steps we add. We perform a clean before each compilation to
achieve the maximum overhead that can be incurred. We perform 20
runs and on average (Fig. 9), Ringdroid using only Android M com-
piles in 22.43 seconds while using Droid M+ it compiles in 67.53.