### Handling Permissions with Droid M+

#### Introduction
Droid M+ is designed to handle permissions in a way that minimizes the risk of unexpected program malfunctions or crashes. In §7, we will further discuss how to manage denied permissions.

**Critical Permissions:**
Currently, Droid M+ does not support identifying critical permissions that must be requested upfront. For such permissions, developers need to manually add the requests and provide appropriate explanations on the welcome screen [17]. However, since granted permissions can be revoked by users at any time (through system settings), the code snippets inserted by Droid M+ are still necessary for the correct functioning of the app.

### Evaluations

In this section, we present the evaluations of Droid M+. Our evaluation focuses on answering two key questions:
1. How applicable is Droid M+ in handling today’s apps on the Play Store?
2. How effective is our permission request placement algorithm?

#### Implementation
We implemented Droid M+’s static analyzer using the Soot [40] static analysis framework. We used apktool [7] and androguard [3] to analyze existing apps. Annotation interpretation and code insertion were performed using Java JDK 1.8 and the Java parser [24].

### Applicability

Droid M+ is designed as a source code-level toolset. Due to the limited number of open-sourced Android apps, we evaluated Droid M+ in two ways:
1. Using RingDroid as a case study to demonstrate its functionality.
2. Analyzing 100 top apps from the Google Play Store to quantify the number of apps that can be handled by Droid M+.

**Case Study: Ringdroid**
Ringdroid [35] is an open-source app for recording and editing sounds. We used the commit 955039d, pushed on December 2, 2016. Although Ringdroid was developed by Google and targeted the latest Android SDK (API level 25), it surprisingly did not support revocable permissions (built against API level 22). Instead, it wrapped access to protected APIs with a try block and caught the thrown `SecurityException`. This makes it a good example to showcase the benefits of Droid M+.

Ringdroid requires four dangerous permissions: `READ_CONTACTS`, `WRITE_CONTACTS`, `RECORD_AUDIO`, and `WRITE_EXTERNAL_STORAGE`. The static analyzer in Droid M+ identified 11 functionalities that require permissions. Among these, 8 are background functionalities, and the remaining 3 are associated with button clicks. Droid M+ inserted 9 permission requests (2 were redundant). In all 9 cases, the requests were inserted immediately before the associated sensitive call, as the containing methods are all void methods.

- **`onCreateLoader` Interface**: Implemented by `RingdroidSelectActivity` when it returns a `CursorLoader` requiring the `STORAGE` permission. This method is invoked in the background by the Android framework. Droid M+ inserted the request before line 151, and the remainder of the code from line 151 to line 187 was replicated in a wrapper method.
- **`refreshListView` Method**: This method can be called from other UI events like `onCreateOptionsMenu`. Droid M+ placed a request for the `STORAGE` permission at line 528, with lines 528 and 529 replicated in a wrapper.
- **`onDelete` Method**: Invoked from a button click callback function, Droid M+ inserted a request for the `STORAGE` permission at line 473, with the remainder of the function replicated in a wrapper.
- **`ReadMetadata` Method**: Requires the `STORAGE` permission. Since it is not part of an Activity, Droid M+ moved it up to the `loadFromFile` method of `RingdroidEditActivity` and inserted a request at line 598.
- **`RecordAudio` Method**: Requires the `MICROPHONE` permission. As it is invoked from a background thread, the request is inserted before the creation of the session at line 755 inside the `recordAudio` method.
- **`SoundFile` Class Methods**: `ReadFile`, `WriteFile`, and `WriteWAVFile` require the `STORAGE` permission. These methods are invoked in background threads, so the request is inserted inside the creation method at line 1225.
- **`ChooseContactActivity`**: Implements the `onCreateLoader` interface, which requires the `CONTACTS` permission. A request is inserted at line 129, with the code from line 129 to line 139 replicated.
- **`afterTextChanged` Method**: Handles UI events. A request for the `CONTACTS` permission is inserted at line 181 to enable `restartLoader`.
- **`assignRingtoneToContact` Method**: Invoked from a button click callback function, also requires the `CONTACTS` permission. A request is inserted at line 154.

The reasons for requesting these permissions are self-explanatory, so we omit the annotations created.

**Extended Measurement:**
To understand the applicability of Droid M+ to general apps, we performed the following measurements:
1. **Native Code and External Storage Permissions**: Droid M+ cannot handle native code that requires dangerous permissions. We found that 546 out of 7000 apps contain native code and require external storage read/write permissions, and thus might not be handled by Droid M+.
2. **Top 100 Android M Apps**: We analyzed 100 top Android M apps without native code that require dangerous permissions. We found 698 functionalities that would request a total of 158 permissions upfront. On average, each application has 7 different functionalities that require permissions; 90% of the apps have 13 or fewer "permission-requiring" functionalities. Figure 8 presents the CDF of the number of permission-requiring functionalities of the analyzed apps. Most functionalities (579) require only one permission, 98 require two, and 21 require three or more.

**Request Placement:**
Droid M+ cannot place an annotation in a non-void method whose return value depends on the permission and is used by its caller(s). We found that 43% of the methods return a value, and thus the placement of the permission request may have to be moved up to its callers. Additionally, 11.3% of these requests might need to be placed on the entry method because all other methods inside the functionality return a value.

By applying Droid M+ to these apps, only 48 permissions will be requested upfront (instead of 158), reducing the number of upfront permissions by 69.62%.

### Quality of Request Placement

We evaluated the effectiveness of our request placement strategy to ensure it follows Google’s guidelines [17]. We used Any.do, a popular "To do" and task list app, to show that Droid M+’s placement matches the manual placement by developers.

**Case Study: Any.do**
Any.do [5] is a popular app with 10 to 50 million installations. It supports the new revocable permission model. We input the APK to Droid M+’s static analyzer and found that the app requires 9 dangerous permissions (see Table 1).

**Manual Request Placement:**
Upon launch, the app requests permissions for `LOCATION`, `CONTACTS`, and `PHONE`. No explanation or education is provided. None of the requested permissions are critical, and the app continues to function even if no permissions are granted. All used permissions are also requested in-context, allowing them to be dynamically revoked.

- **`LOCATION` Permission**: Used in four functionalities, including location-based reminders, sharing location to custom analytics classes, and a third-party location-based library.
- **`CONTACTS` Permission**: Used when sharing tasks with friends and displaying missed call information. If the permission is not granted, the corresponding functionality is not performed.
- **`PHONE` Permission**: Used for missed call notifications. If the permission is not granted, feedback is provided.
- **`CALENDAR` Permission**: Requested in-context for cross-referencing tasks with the user’s calendar. If denied, feedback is provided.
- **`MICROPHONE` Permission**: Requested in-context when adding voice messages. If denied, feedback is provided.
- **`STORAGE` Permission**: Requested in-context when adding photos or documents. If denied, feedback is provided. Also used by three different third-party libraries.

**Droid M+’s Request Placement:**
For the three in-context permission requests, Droid M+’s placement is similar to the existing placement. For the remaining places where permissions are checked but not requested, Droid M+’s static analyzer identified all of those as places where permissions should be requested. We manually verified that our request placements are in-context.

**Discussion:**
Although Any.Do is a single case study, we argue that the evaluations carry over to other apps. The quality of the request placement is assessed based on whether the request is in-context. Droid M+ achieves this goal by segmenting the code into different functionalities based on unique entry points and placing the request as close to the permission use as possible.

### Performance

We quantified the overheads that accompany Droid M+ on the developer side using Ringdroid. We modified it to support revocable permissions and made two constructs: one using the Android M API and the other using Droid M+.

**Compilation Overhead:**
Our case study was performed on Android Studio 1.4.1, running on a laptop with a quad-core Intel Core i7 2.00GHz CPU, 16GB of RAM, and a 1TB hard drive at 5400 rpm. We quantified the increase in compilation time with Droid M+ compared to Android M’s API. We performed 20 runs and found that, on average, Ringdroid using only Android M compiles in 22.43 seconds, while using Droid M+ it compiles in 67.53 seconds.