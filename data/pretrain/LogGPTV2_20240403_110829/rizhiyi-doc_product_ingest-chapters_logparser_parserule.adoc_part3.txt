==== IP格式转换
针对IP地址的转换算子。包括两种行为：
. 将一个长整数地址转换成一个字符串(IPv4)网络标准点格式地址。例如3651919938 ,在将数据类型转换为整数类型后，使用格式转换即会转变成 217.171.224.66；
+
image::images/parserule-long2ip.png[]
+
. 将一个字符串地址，标记为索引中的 IP 数据类型。其中，如果字符串中包含 `:`，标记为 IPv6，否则为 IPv4。
** 标记为 IPv4 类型后，可以采用子网掩码查询方式，而不能用通配符查询方式。
+
image::images/parserule-ipv4.png[]
+
** 标记位 IPv6 类型后，可以采用全写或简写字符串，任意查询命中数据。
+
image::images/parserule-ipv6.png[]
==== 内容替换
用于对特定信息的彻底修改，例如日志原文为
 123abc456
正则表达式为(\d+)[a-z]+，替换内容为$1###。 则日志原文变成
 123###456
image::images/parserule-sed.png[]
内容替换规则还支持修改内置元字段值，包括：raw_message,@appname,@tag,@hostname,@source。
例如替换 tag=top_info 为 tag=top_info,newinfo, 则需要:
1. 配置一个topinput数据采集，tag为top_info.
2. 设置字段提取规则如下：
image::images/replace.png[]
最后查看搜索页的tag:top_info搜索结果，tag是一个数组，包括top_info和newinfo两个元素。
==== 手机号码解析
日志中有手机号信息，可自动解析出城市、运营商等信息。
image::images/parserule-mobilephone.png[]
==== 固定电话解析
日志中有固定电话信息，可自动解析固定电话归属地：
image::images/parserule-telephone.png[]
==== Hex转换
日志中有十六进制数据(比如tcpdump -X的输出，如下图)时，可以利用Hex转换，将其中的十六进制数据部分，转换成为原始报文格式。
image::images/parserule-hex-before.png[]
[NOTE]
====
由于不同系统输出时，格式上稍有区别，本规则并不会基于某一原则进行内置的格式处理。需要用户提前通过正则配置、内容替换、格式化处理等规则，将十六进制部分单独提取并去除空白内容后，再进行进制转换。
====
image::images/parserule-hex.png[]
==== geo解析
解析出日志中ip地址的地理位置，例如针对正则表达式小节的样例日志，添加“geo解析”解析规则，选择“clientip”字段：
image::images/parserule-geo.png[]
可以看到clientip地址被解析出国家、城市、经纬度等信息。
==== 格式化处理
设置格式化处理，根据现有的一至多个字段值生成全新的字段内容,比如把从source中提取的date 和 raw_message 中提取的 time两个字段组合成datetime新字段。
新字段的内容根据格式规则生成，规则中可以使用$1,$2,$3…来引用多个source字段的值。此外，还有两个特殊的宏定义，也可以在规则中使用：
1.	$LOG_DATE：代表的是日志时间戳里的日期字符串, 格式为年-月-日(yyyy-MM-dd)。
2.	$LOG_DATE_YEAR：代表的是日志时间戳里的年份字符串，格式为yyyy。
宏的具体取值是从事件内多个时间戳中读到的第一个可用时间戳，优先级顺序为：
1.	logTimestamp：agent识别到的时间戳
2.	logriver：用时间戳解析算子解析出来的时间戳
3.	agentSendTimestamp：agent发送该事件的时间戳
4.	collectorRecvTimestamp：collector收到的时间戳
5.	Time.now当前时间戳
格式化处理算子场景示例如下：
我们先通过两次正则解析，得到date和time字段：
image::images/parserule-format-before.png[]
然后采用格式化处理得到timestamp，并进行时间戳解析：
image::images/parserule-format.png[]
如果日志里确实没date字段，格式规则就可以写$LOG_DATE $2。
日志样例下的source、appname、hostname、tag信息，会在选中样例时自动填充，也可以按需手写。在解析规则中，这四个内置字段会前缀@号以示和自定义字段的区别。
==== 删除字段
设置删除字段算子，可以删除掉无用的字段。通常用于处理其他解析算子中途产生的内容。
比如在上一小节的示例中，拼接得到timestamp字段以后，date和time字段就没用了，不必继续占用索引空间。那么可以添加相应的删除字段规则：
image::images/parserule-remove.png[]
==== 脱敏配置
设置脱敏规则，替换敏感信息。没有得到“可查看敏感信息”授权的用户不能查看敏感信息；而得到“可查看敏感信息”授权的用户可以查看脱敏前的原始数据。
下面是一个脱敏配置用例：
用户需求为对手机号码4-7位数字脱敏，用****替换，同时管理员admin可以查看非脱敏手机号码，应用系统运维人员esb只能查看脱敏的手机号码。
具体的日志信息，在接入数据后由admin查看可见，如下图所示：
image::images/parserule-desensitization-1.png[]
然后增加脱敏配置算子，将客户手机号码4-7位数字脱敏，用****替换。注意：因为原文中还有其他可以匹配上\d{3}\d{4}\d{4}的内容，比如esb.flow_no1、esb.flow_no2等，所以这里我们需要通过匹配前缀、匹配后缀两个参数，来具体规定敏感信息在raw_message中的位置。保证脱敏过程的准确执行。
image::images/parserule-desensitization-2.png[]
有趣的是，本例中，raw_message在除了解析为phone.geo.phone字段以外的地方，依然还有手机号内容出现！所以我们需要添加两次脱敏配置，分别使用不同的匹配前缀和匹配后缀。这次配置的前后缀是空格：
image::images/parserule-desensitization-3.png[]
然后进入角色权限管理界面赋权。应用系统运维人员esb归属esb分组，拥有esb角色的权限。
image::images/parserule-desensitization-4.png[]
注意角色 esb 的功能列表未勾选“可查看敏感内容”选项，即用户esb无权查看客户非脱敏手机号码。
image::images/parserule-desensitization-5.png[]
##验证方式##
登录应用系统运维人员esb账号，查看客户手机号码字段是已脱敏后的信息。
image::images/parserule-desensitization-6.png[]
同时，在原始日志内容中，客户手机号码是已脱敏后的信息。
image::images/parserule-desensitization-7.png[]
我们可以看到，添加的两个匹配前后缀规则，都生效了。
==== 字段重命名
设置字段重命名算子，可以修改现存字段的字段名称，经常用来简化提取嵌套多层字段内特定字段时的命令输入。如下图：
image::images/parserule-rename.png[]
在“来源字段”和“目标字段”分别输入重命名对象和新字段名。支持的输入语法包括：
* 字段名：如a.b.c
* 通配符：如a.*.c
经过上图内的步骤，成功将字段a.*.c内容用字段a.c代替。
==== 结构体解析
系统在输出日志的过程中，有时会出现不可见字符，不可预计的空格，或是由于编码不同导致字符长度不一等复杂的情况。日志易的结构体解析算子对struct结构进行了定义，您可通过直接定义准备提取的字符编码、字节长度、数据类型、字段名称等结构体，来定义需要解析的数据内容。
结构体定义栏里，表达字段的语法为“字段名：长度（字节）：类型”。三个函数依次排列，多个字段之间用逗号分隔开，并遵循以下规则：
* 字段名：支持嵌套语法，如a.b.c；
* 长度（字节）：若是中文的话语编码相关；
* 类型：默认为字符串类型，在表达式内用缩略字母来代替，一个有5类，缩略字母与其代表的含有如下:
** i：int
** l：long
** f：float
** d：double
** s：string
例，样例为“aaa     111 ”的内容格式，添加“结构体解析”解析规则，选择“raw_message”字段，最终目的是将“aaa”以字符串格式保存进字段名为name的函数内，将“111 ”以整数为格式保存进字段名为“val”的函数内，
此时，结构体定义应为“name:8,val:4:i”，“8”和“4”分别为name和val字段的长度，中间用逗号隔开，name使用的是默认函数类型，因此类型可忽略，而val用i代表函数类型为整数，最后得到结果如图。
image::images/parserule-struct.png[]
==== 重定向解析
当单个字段提取规则里使用了较多的条件控制逻辑时，规则看起来不太清晰。这时候，可以将不同逻辑拆分到不同的提取规则里，然后在主规则中使用重定向解析算子，将日志分发到不同规则中。
配置界面如下：
image::images/parserule-redirect.png[]
一般来说，重定向解析算子，要搭配条件控制使用。条件控制的介绍，见稍后章节。
==== script解析
该算子提供更高级的流式数据处理能力。在算子规则中，可以使用数十种函数、变量赋值、遍历循环、逻辑判断等功能。以下先介绍该算子的语法。
1.	运算符：加(+), 减(-), 乘(*), 除(/), 取余(%)
2.	内置函数：
* 通用操作: len, isempty, typeof
* 数值操作: abs, ceil, floor, log, max, min, pow, exp, sqrt, acos
* 字符串操作: upper, lower, trim, substring, match, format, split
* 多值操作: mvrange, mvzip, mvszip, mvappend, mvcount, mvfind, mvindex, mvjoin, mvsort, mvdedup
* 字典操作: mapkeys, mapvalues
* 日期操作: formatdate, parsedate
* 类型判断: isnull, isnum, isstr, islist, isdict
* 类型转换 tolong, tolong2, todouble, todouble2, tostring, todict
* 其他： cidrmatch, relative_time, urldecode
3.	条件操作：等于(==),不等于(!=), 小于(), 小于等于(=), 是否定义(isdef)
4.	逻辑组合：与(&&), 或(||), 非(!)
5.	逻辑判断：if，while，for
此外，用户可以在该算子规则中，定义和访问数组或字典类型的临时变量。例如：
[source]
list = [1, 2, 3, 4, 5];
dict = {0:"a", 1:"b"};
list[0] = 1;
dict["k"] = "v";
为了在语法中引用日志已存在的字段，可以使用source["xxx"]代表。如果是多层字段，比如 user.name，则写为 source["user"]["name"]。如下图所示，source["start"]就是上一个CSV算子解析出来的start字段：
image::images/parserule-script.png[]
script 算子中的运算和函数，基本和 SPL 语法一致，只有逻辑判断部分稍有区别。为减少在界面上书写语句块时候的麻烦，script 算子中的条件语句不包含多条时，可以忽略大括号。
比如 if 判断中，可以省略大括号写成：
[source,javascript]
    source["name"]="liukang";
    source["age"]=18;
    if(source["name"]=="yottabyte") source["alias"]="rizhiyi";
    else if (source["age"]<18) source["info"]="too young";
    else source["errorMsg"]="No such user";
比如 for 循环。假设我们有一个多层嵌套字段，打算把内层字段全部重命名为顶层字段，直接使用重命名算子不太方便，就可以用 for 循环实现：
image::images/parserule-script-forexample.png[]
比如 while 循环。假设我们有如下数据，解析出两个多值字段，prices 和 qtys，多值长度取决于 kv.count 字段值。
image::images/parserule-script-dataexample.png[]
我们想要得到一个新的多值字段，是二者一一对应相乘的结果，比如 prices[0] * qtys[0]，以此类推。则在 script 算子中可以写成：
[source,javascript]
    i = 0; source["prices_qtys"] = [];
    while (i < source["kv"]["count"])
    {
        source["prices_qtys"] = mvappend(source["prices_qtys"],source["prices"][i]*source["qtys"][i]);
        i = i + 1;
    }
=== 可选的算子生效条件
在诸如Cisco Syslog、Windows Eventlog等常见日志场景中，message部分的格式会根据ID不同而有较大变化。单纯使用正则表达式来兼容这些变化非常繁琐而且可读性较差。日志易提供一种条件判断定义，可以给字段提取中的每个解析规则都单独配置一个可选的生效条件，简化了解析规则的书写难度。
如下图所示：
image::images/parserule-condition.png[]
图中展示了一个采用syslog记录nginx访问日志的场景。在完成syslog格式解析以后，就可以单独设置programname字段值等于nginx的条件下，对msg采用访问日志的正则解析了。
=== 规则验证
==== 算子验证状态提示
现实中日志格式通常较为复杂，一个字段提取规则内部会含有多个解析算子和条件控制。这时，解析验证未必会用到全部算子。日志易提供算子验证状态功能，对每个算子在该日志样例下的运行状态和耗时一目了然。
image::images/parserule-succ.png[]
目前，日志易提供成功、失败、未命中、异常四种状态。
===== 正则表达式提示
上图上，我们看到正则解析算子的状态提示中，除了结果状态和耗时以外，还提供了steps匹配步数，作为评估正则表达式性能的一个参照指标。
除此以外，对于部分预编译期就可以发现的正则表达式书写错误，日志易提供了单独的提示：
image::images/parserule-regex-error.png[]
目前，日志易提供如下6种正则错误提示：
* 捕获组中包含重名字段
* 使用了未定义的Grok
* 编译错误
* 不完整的正则分组，缺少括号
* 非法的Grok类型
* 非法的Grok命名
==== 批量验证
完成所有解析算子配置后，可以点击“使用检索日志验证”，页面底部的事件表格左侧将出现成功/失败标记，以及每条样例日志的解析耗时：
image::images/parserule-multi-succ.png[]
点击“字段”标签，下拉框选择字段名，可以查看在最近100条日志中，该解析规则提取出来的字段值统计列表。也可以选择一个字段标准集，对比字段标准集中声明的标准字段名称列表，和解析规则提取出的字段名称列表，是否符合期望：
image::images/parserule-example-stats.png[]
可以通过“全部日志，解析成功，解析失败”下拉框过滤被验证的事件。并在解析失败的事件集上重新点击“选为日志样例”，替换之前的“日志样例”文本框：
image::images/parserule-multi-fail.png[]