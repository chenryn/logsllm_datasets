                if(!in_array(strtolower(substr($value, 0, 6)), array('http:/', 'https:', '[ftp://'](https://webmail.alibaba-inc.com/alimail/#this);, 'rtsp:/', 'mms://')) && !preg_match('/^static\//', $value) && !preg_match('/^data\//', $value)) {
                    $value = '[http://'.$value](http://%27.%24value/);
                }
            }
            if($field['formtype'] == 'file') {
                if((!empty($_FILES[$key]) && $_FILES[$key]['error'] == 0) || (!empty($space[$key]) && empty($_GET['deletefile'][$key]))) {
                    $value = '1';
                } else {
                    $value = '';
                }
            }
            if(empty($field)) {
                continue;
            } elseif(profile_check($key, $value, $space)) {
                $setarr[$key] = dhtmlspecialchars(trim($value));
            } else {
                if($key=='birthprovince') {
                    $key = 'birthcity';
                } elseif($key=='resideprovince' || $key=='residecommunity'||$key=='residedist') {
                    $key = 'residecity';
                } elseif($key=='birthyear' || $key=='birthmonth') {
                    $key = 'birthday';
                }
                profile_showerror($key);
            }
            if($field['formtype'] == 'file') {
                unset($setarr[$key]);
            }
            if($vid && $verifyconfig['available'] && isset($verifyconfig['field'][$key])) {
                if(isset($verifyinfo['field'][$key]) && $setarr[$key] !== $space[$key]) {
                    $verifyarr[$key] = $setarr[$key];
                }
                unset($setarr[$key]);
            }
            if(isset($setarr[$key]) && $_G['cache']['profilesetting'][$key]['needverify']) {
                if($setarr[$key] !== $space[$key]) {
                    $verifyarr[$key] = $setarr[$key];
                }
                unset($setarr[$key]);
            }
        }
        if($_GET['deletefile'] && is_array($_GET['deletefile'])) {
            foreach($_GET['deletefile'] as $key => $value) {
                if(isset($_G['cache']['profilesetting'][$key])) {
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                    $verifyarr[$key] = $setarr[$key] = '';
                }
            }
        }
看到这里：
    foreach($_POST as $key => $value):
其实这里可以联想到全局变量覆盖的问题，也就是通过这里来遍历外部的所有`POST`变量，然后将变量带入到下面的几处判断分支里面去，直到遍历完全部`$_POST`参数：
    if(in_array($field['formtype'], array('text', 'textarea'))
    if(in_array($key, $forumfield))
    if($field['formtype'] == 'file’) //判断是否文件类型参数
    if(empty($field)) //XSS过滤
    if($field['formtype'] == 'file’) //判断是否文件类型参数
    if($vid && $verifyconfig['available'] && isset($verifyconfig['field'][$key]))
    if(isset($setarr[$key]) && $_G['cache']['profilesetting'][$key]['needverify'])
变更数据信息通过变量覆盖原始数据传入数据库来达到更新数据的目的，下面的代码就是对上传文件的参数进行操作了：
    if($_FILES) {
            $upload = new discuz_upload();
            foreach($_FILES as $key => $file) {
                if(!isset($_G['cache']['profilesetting'][$key])) {
                    continue;
                }
                $field = $_G['cache']['profilesetting'][$key];
                if((!empty($file) && $file['error'] == 0) || (!empty($space[$key]) && empty($_GET['deletefile'][$key]))) {
                    $value = '1';
                } else {
                    $value = '';
                }
                if(!profile_check($key, $value, $space)) {
                    profile_showerror($key);
                } elseif($field['size'] && $field['size']*1024 init($file, 'profile');
                $attach = $upload->attach;
                if(!$upload->error()) {
                    $upload->save();
                    if(!$upload->get_image_info($attach['target'])) {
                        @unlink($attach['target']);
                        continue;
                    }
                    $setarr[$key] = '';
                    $attach['attachment'] = dhtmlspecialchars(trim($attach['attachment']));
                    if($vid && $verifyconfig['available'] && isset($verifyconfig['field'][$key])) {
                        if(isset($verifyinfo['field'][$key])) {
                            @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                            $verifyarr[$key] = $attach['attachment'];
                        }
                        continue;
                    }
                    if(isset($setarr[$key]) && $_G['cache']['profilesetting'][$key]['needverify']) {
                        @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                        $verifyarr[$key] = $attach['attachment'];
                        continue;
                    }
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    $setarr[$key] = $attach['attachment'];
                }
            }
        }
这一块也是漏洞问题的触发点，详情在下面的漏洞分析中会分析，最终的SQL执行语句：
后面还有一个方法是password方法：
    if($operation == 'password’) {
    ...
    ...
    }
修改密码的模块，限于篇幅，不做过多的分析了。
### 0x03 漏洞分析
在说这个漏洞前，先说说14年Discuz的一个漏洞，也是任意文件操作漏洞，同样性质的漏洞，问题也是在`spacecp_profile.php`中出现的（毕竟新洞是继承了老洞的坑），从source/include/spacecp/spacecp_profile.php中可以看到这段代码，也就是结束了`foreach`循环操作后会对外部`$_GET`进来的`deletefile`进行处理：
    if($_GET['deletefile'] && is_array($_GET['deletefile'])) {
            foreach($_GET['deletefile'] as $key => $value) {
                if(isset($_G['cache']['profilesetting'][$key])) {
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                    $verifyarr[$key] = $setarr[$key] = '';
                }
            }
        }
首先判断外部是否有`deletefile`数组，然后对`$_G[&#39;cache&#39;][&#39;profilesetting&#39;][$key]`进行判断，看里面是否有值，这里比较关键的地方是:
>`$_GET[&#39;deletefile&#39;] as $key =&gt; $value`
这一步将外部指定的字段值给了`$key`值,比如外部是`deletefile[affectivestatus]=1`，那么`$key`值就是`affectivestatus`，
跟下去的`$space[$key]`就是数据库中个人资料的值(原始值)，带入到下面的`unlink`进行删除操作。
打印出来如下：
    foreach($_GET['deletefile'] as $key => $value) {
                if(isset($_G['cache']['profilesetting'][$key])) {
                    var_dump($_G['cache']['profilesetting'][$key]);
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    var_dump($space[$key]);
                    exit();
后来官方出的补丁是：
    if($_GET['deletefile'] && is_array($_GET['deletefile'])) {
            foreach($_GET['deletefile'] as $key => $value) {
                if(isset($_G['cache']['profilesetting'][$key]) && $_G['cache']['profilesetting'][$key]['formtype'] == 'file')
     {
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                    $verifyarr[$key] = $setarr[$key] = '';
                }
            }
        }
直接加了类型`(formtype)`判断，只要判断出用户表单里面的类型为`file`后才走下一步，之前`affectivestatus`类型为`text`：
但是开发只修复了这一个点，同一个文件里面的其他`unlink`方法并没有`Review`到其中存在的安全威胁，导致了又一个任意文件删除漏洞：
    if(!$upload->error()) {
                    $upload->save();
                    if(!$upload->get_image_info($attach['target'])) {
                        @unlink($attach['target']);
                        continue;
                    }
                    $setarr[$key] = '';
                    $attach['attachment'] = dhtmlspecialchars(trim($attach['attachment']));
                    if($vid && $verifyconfig['available'] && isset($verifyconfig['field'][$key])) {
                        if(isset($verifyinfo['field'][$key])) {
                            @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                            $verifyarr[$key] = $attach['attachment'];
                        }
                        continue;
                    }
                    if(isset($setarr[$key]) && $_G['cache']['profilesetting'][$key]['needverify']) {
                        @unlink(getglobal('setting/attachdir').'./profile/'.$verifyinfo['field'][$key]);
                        $verifyarr[$key] = $attach['attachment'];
                        continue;
                    }
                    @unlink(getglobal('setting/attachdir').'./profile/'.$space[$key]);
                    $setarr[$key] = $attach['attachment'];
                }
首先设置任意`POST`参数字段为你要删除的文件，然后再上传文件，网上很多是自己构造表单去上传文件，这里有个更简洁的方法，就是通过修改原始html表单的text参数为file后再上传就ok了。
保存截断跟踪参数走到  
`@unlink(getglobal(&#39;setting/attachdir&#39;).&#39;./profile/&#39;.$space[$key]);`
debug参数如下：
同样还是获取到了`affectivestatus`的原始值参数并且拼接到`unlink`后面去造成了任意文件删除漏洞。
### 0x04 总结
最新的修复方案是官方直接把这个模块的所有`unlink`函数给删掉，简单又粗暴，不过确实真的有效办法，从这两次的重复出现的漏洞点可以看出，开发是值得反思的，这其实是一个典型的案例，纵观现在的甲方企业安全建设也有同样的问题，当黑客只需通过某个脆弱点就能进入内网，安全部门的人在通知业务修复了这个脆弱点的同时是否还应该考虑一下其他的点是否也是外部攻击的脆弱点，业务在不懂安全开发的情况下安全工程师是否能够协助业务发现其他安全问题也是考量安全团队技术实力的指标。
参考：