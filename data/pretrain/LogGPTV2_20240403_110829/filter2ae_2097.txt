# 【技术分享】基于Chakra JIT的CFG绕过技术

**译文声明**

本文为翻译文章，原文来源：theori.io。译文仅供参考，具体内容和含义请以原文为准。

**翻译者**: [shan66](http://bobao.360.cn/member/contribute?uid=2522399780)  
**预估稿费**: 200 RMB  
**投稿方式**: 发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 引言

本文将介绍在攻击Internet Explorer和Edge浏览器时如何绕过Microsoft的控制流防护（CFG）。我们之前的漏洞利用代码通过覆盖对象的函数指针实现，但在遇到CFG时这种方法不再有效。假设攻击者已经获得了读写内存权限。

## 背景知识

CFG是微软近年来为Windows系统添加的一种安全防护机制，通过对间接调用/跳转指令的目标地址进行高效检查来提供保护。更多详细信息，请参阅参考文献[[1]](http://blog.trendmicro.com/trendlabs-security-intelligence/exploring-control-flow-guard-in-windows-10/)[[2]](https://blog.coresecurity.com/2015/03/25/exploiting-cve-2015-0311-part-ii-bypassing-control-flow-guard-on-windows-8-1-update-3/)[[3]](http://www.powerofcommunity.net/poc2014/mj0011.pdf)。

尽管CFG增加了控制流劫持型攻击的难度，但它并不完美。该技术主要保护间接调用和跳转，对堆栈（即ROP）没有提供保护。此外，这是一种编译时插桩技术，需要重新编译源代码。尽管许多微软二进制文件受益于CFG，但仍有许多程序未使用CFG保护机制编译。

## Chakra JIT

Chakra JIT负责为多次调用的函数和循环生成优化的JIT代码。这一过程分为多个阶段，其中Full JIT Compiler和Garbage Collection阶段在后台线程中执行。有关工作流程和各种图示，请参阅MSDN。

### JIT工作流程（摘自MSDN）

我们重点关注Full JIT Compiler阶段，它负责获取字节码并输出本地代码。针对单个函数或循环的高级处理在`Func::Codegen()`中进行。首先，生成字节码的中间表示（IR），然后进行优化、寄存器分配、prolog和epilog等转换。一旦IR准备就绪，就会被`Encoder::Encode()`编码为本地代码。

```cpp
// https://github.com/Microsoft/ChakraCore/blob/master/lib/Backend/Encoder.cpp#L15
void Encoder::Encode()
{
    NoRecoverMemoryArenaAllocator localAlloc(_u("BE-Encoder"), m_func->m_alloc->GetPageAllocator(), Js::Throw::OutOfMemory);
    m_tempAlloc = &localAlloc;
    ...
    m_encodeBuffer = AnewArray(m_tempAlloc, BYTE, m_encodeBufferSize);
    ...
}
```

实际上，`Encoder`负责生成实际的本地代码。它首先分配`m_encodeBuffer`来临时存放本地代码。当所有本地指令发送到`m_encodeBuffer`后，`Encoder`对该缓冲区进行重新定位，将其复制到只读可执行内存，并按照CFG的要求处理调用目标。此时，临时缓冲区不再使用，可以释放。

```cpp
// https://github.com/Microsoft/ChakraCore/blob/master/lib/Backend/Encoder.cpp#L294
...
m_encoderMD.ApplyRelocs((size_t) workItem->GetCodeAddress());
workItem->RecordNativeCode(m_func, m_encodeBuffer);
m_func->GetScriptContext()->GetThreadContext()->SetValidCallTargetForCFG((PVOID) workItem->GetCodeAddress());
...
```

注意，一旦代码被复制到可执行内存后，很难修改。但当`Encoder`在临时缓冲区生成本地代码时，攻击者可以利用写入内存权限来更改临时缓冲区中的代码。由于JIT进程在后台线程中运行，JavaScript线程仍然可以正常运行。攻击者的难点在于找到临时缓冲区并在短时间内完成修改。

## 绕过CFG防护

既然已经知道如何修改JIT代码，接下来我们将付诸行动，设法绕过CFG。我们的过程分为以下三步：

1. 触发JIT。
2. 查找临时的本地代码缓冲区。
3. 修改缓冲区的内容。

当然，最后一步是执行JIT处理过的代码。

### 触发JIT

第一步也是最简单的一步，就是触发JIT开始对一个函数进行编码。为了使第二步更容易，我们希望函数的代码多一些，以便有足够的时间在内存中寻找临时缓冲区。函数中的具体指令无关紧要。

```javascript
var code = "var i = 10; var j = 1; ";
for (var i = 0; i < 1000000; i++) {
    code += "i++;";
}
eval(code);
```

### 查找临时的本地代码缓冲区

第二步是查找临时的本地代码缓冲区。这可以通过内存扫描或其他方法实现。具体的实现细节取决于环境和工具。

### 修改缓冲区的内容

第三步是修改缓冲区的内容。这需要在短时间内完成，因为`Encoder`很快会将代码复制到只读可执行内存。具体的修改内容取决于攻击者的目标。

## 安全影响

由于该CFG绕过漏洞仅在攻击者已经获得读写内存权限的情况下有效，其实用性在现实中可能受到限制。需要注意的是，这种绕过方法内置在Chakra JIT架构中，难以修补，并且不会受到像英特尔CET这样的未来缓解措施的影响。

## 补救措施

微软已承诺对ChakraCore进行相应的修改，以缓解我们发现的CFG绕过和其他CVE补丁所造成的威胁。基本思路是在编码器编码指令时计算校验和，然后在将整个缓冲区复制到最终的RX（只读可执行）缓冲区后验证校验和。只有通过验证后，JIT处理后的代码入口点才能作为有效的CFG目标。选择的校验和算法是CRC32。

我们希望这篇文章能激励他人继续研究绕过当前缓解措施的新方法，并发展新的缓解措施。