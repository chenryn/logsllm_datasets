PostgreSQL
数据库恢复
Objectives
• 描述介质恢复
• 执行非归档模式下恢复
• 执行归档模式下完全恢复
• 执行基于表空间的完全恢复
• 执行只读数据库恢复
介质恢复
• 用于恢复丢失或损坏的当前数据文件或控制文件
• 需要显式调用
• 操作如下：
Ø 从备份中恢复文件
Ø 恢复的文件会应用归档日志和在线重做日志进行数据重构
恢复步骤
Archived
Redo log
Online
wal
应用wal日志 回滚未提交事务
2
4
Datafile 1 Datafile 1 Datafile 1
Datafile 2 Datafile 2 Datafile 2
Datafile 3 Datafile 3 Datafile 3
转储备份文件 数据库恢复完成
数据库包含已提交/未提交的事务
1 5
3
执行数据文件转储和恢复
• 使用操作系统命令tar/cp转储数据文件
• 使用pg_ctl start对数据文件进行恢复
非归档模式恢复
• 在非归档模式下，必须恢复数据目录下所有的文件和目录：
Ø 所有$PGDATA目录下的子目录
base、global、pg_wal...
Ø 所有$PGDATA目录下的文件
postgresql.conf、pg_hba.conf...
非归档模式恢复优缺点
• 优势
Ø 易于执行，出错风险低
Ø 恢复时间是转储所有文件所需的时间
• 缺点
Ø 数据丢失，必须手动重新应用
Ø 整个数据库将恢复到上一次完整关闭备份的位置
非归档模式恢复
144 144 144
146 146 146
Datafile 1 Control wal
Datafile 1 Control Wal file 1
files file 1
files
144 143
146 145
Parameter Parameter Datafile 2 wal
Datafile 2 wal file 2
File File file 2
144
146
Datafile 3
Datafile 3
other other
Backup
File Database File
从最近备份中转储数据文件
144 144 144
Datafile 1 Control Wal file 1
files
144 143
Parameter
Datafile 2 Wal file 2
File
144
Datafile 3
other
File Database
归档模式恢复
• 完全恢复
Ø 使用wal数据或增量备份
Ø 将数据库更新到最新的时间点
Ø 应用所有wal日志记录的更改
• 不完全恢复
Ø 使用备份和wal日志生成数据库的非当前版本
完全恢复
• 确认数据库关闭
• 恢复数据文件
Ø 如果是全库备份，哪怕是损坏了一个数据文件，也要转储备份的所有数据文件
Ø 如果是单独表空间（除了global）备份，哪怕损坏了表空间下的一个数据文件，
也要转储备份的所有数据文件
• 修改postgresql.conf文件
• 生成recovery.signal空文件
• 启动数据库（recovery）
归档模式完全恢复优缺点
• 优势
Ø 将所有数据恢复到最新点（故障点）
Ø 恢复时间是转储数据文件和应用所有归档日志文件所需的时间
• 缺点
Ø 必须具有自您要从中恢复的备份以来的所有归档日志文件
执行一个基于数据库备份的
完全恢复
• 示例（恢复前备份pg_wal目录下所有文件）
1、使用tar包进行恢复
tar -zvxf /backup/base.tar.gz -C $PGDATA
2、修改postgresql.conf文件
restore_command = 'cp /home/postgres/archives/%f %p'
recovery_target_timeline = 'latest'
3、生成recovery.signal空文件
touch recovery.signal
4、启动数据库
pg_ctl start
时间线和时间线历史文件
• timelineId（时间线）
每当做了一次完全或者不完全恢复后，数据库的时间线就会发生变化，意味着从失败
点后重新开始新的生命轨迹，同时用时间线历史文件来记录。
和 文件名关系
timelineId wal
• 时间线的改变导致wal名字发生变化
当完成对数据库的恢复后，会产生新的wal文件，其命名规则为在原来的段文件名字中用
新的时间线替换原来的时间线，其它不变。
时间线和时间线历史文件
• Timeline History File
Ø 历史文件会在pg_wal中生成，同时复制到归档目录下，命名规则如下所示：
“8-digit new timelineId”.history 比如：00000002.history
Ø 时间线历史记录文件至少包含一行，每行由以下三项组成：
ü timelineId –用于恢复的归档日志的timelineId。
ü LSN –发生WAL段切换的LSN位置
ü reason –人类可读的时间线为什么改变的解释。
Ø 比如：postgres> cat /home/postgres/archivelogs/00000002.history
1 0/A000198 before 2020-4-28 12:05:00.861324+00
注意上面1是行号，也代表数据库恢复过的次数。这个文件不要删除，否则会影响
数据库恢复。
执行一个基于表空间备份的
完全恢复
PG支持基于表空间（除了pg_global之外）级别的完全恢复，因为pg_global表空间比
较特殊，其中包括控制文件，而控制文件不能使用备份的进行恢复。
1、转储备份的表空间目录到目标位置
cp -rf /backup/PG_12_201909212 /home/postgres/tblspc/
2、转储backup_lable文件到$PGDATA目录下
cp /backup/backup_lable $PGDATA
3、创建recovery.signal
4、修改postgresql.conf文件
restore_command = 'cp /home/postgres/archives/%f %p'
recovery_target_timeline = 'latest'
5、启动数据库，表空间所包含的表能够实现完全恢复
pg_ctl start
只读数据库的恢复
Read-Only
Case 1
Read-Only Read-Write
Case 2
Read-Write Read-Only
Case 3
Backup 1 Backup 2 Recovery
执行一个只读数据库的恢复
1、把数据库变成只读状态
ALTER DATABASE new_db1 SET default_transaction_read_only=on;
2、单独备份new_db1数据库目录
3、如果new_db1数据库目录损坏，关闭数据库，转储备份的目录到目标位置
4、打开数据库
*PG不支持单个数据库完全恢复。
总结
• 描述介质恢复
• 执行非归档模式下恢复
• 执行归档模式下完全恢复
• 执行基于表空间的完全恢复
• 执行只读数据库恢复
练习
• 1、继续上一节的练习, 用到上一节练习pg_basebackup备份的内容.
• 2、创建存放恢复数据库实例的空目录, 确保有足够空间
• 3、将pg_basebackup备份的内容解压到该目录
• 4、观察表空间文件的存放位置
• 5、配置postgresql.conf , 使用新的监听端口. 配置恢复设置: 恢复到指定时间点后暂停, 并
开启standby只读模式
• 6、连接到恢复实例, 验证数据是否恢复到指定时间点.
• 7、配置恢复参数, 继续恢复到最新状态.
• 8、连接到恢复实例, 验证数据是否恢复到指定时间点.