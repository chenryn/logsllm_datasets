# PostgreSQL 数据库恢复

## 目标
- 描述介质恢复
- 执行非归档模式下的恢复
- 执行归档模式下的完全恢复
- 执行基于表空间的完全恢复
- 执行只读数据库的恢复

## 介质恢复
介质恢复用于恢复丢失或损坏的数据文件或控制文件。需要显式调用，操作步骤如下：
1. 从备份中恢复文件。
2. 恢复的文件会应用归档日志和在线重做日志进行数据重构。

### 恢复步骤
1. **应用归档重做日志 (Archived Redo Log)**
2. **应用在线 WAL 日志 (Online WAL)**
3. **回滚未提交事务**

## 非归档模式恢复
在非归档模式下，必须恢复数据目录下的所有文件和目录：
- $PGDATA 目录下的子目录：`base`, `global`, `pg_wal` 等。
- $PGDATA 目录下的文件：`postgresql.conf`, `pg_hba.conf` 等。

### 优缺点
- **优势**
  - 易于执行，出错风险低。
  - 恢复时间是转储所有文件所需的时间。
- **缺点**
  - 数据丢失，必须手动重新应用。
  - 整个数据库将恢复到上一次完整关闭备份的位置。

### 恢复步骤
1. 使用操作系统命令（如 `tar` 或 `cp`）转储数据文件。
2. 使用 `pg_ctl start` 对数据文件进行恢复。

## 归档模式恢复
归档模式支持完全恢复和不完全恢复。

### 完全恢复
- **使用 WAL 数据或增量备份** 将数据库更新到最新的时间点。
- **应用所有 WAL 日志记录的更改**。

### 不完全恢复
- **使用备份和 WAL 日志生成数据库的非当前版本**。

### 完全恢复步骤
1. **确认数据库关闭**。
2. **恢复数据文件**：
   - 如果是全库备份，即使只有一个数据文件损坏，也要转储备份的所有数据文件。
   - 如果是单独表空间（除了 `global`）备份，即使有一个数据文件损坏，也要转储备份的所有数据文件。
3. **修改 `postgresql.conf` 文件**。
4. **生成 `recovery.signal` 空文件**。
5. **启动数据库（进入恢复模式）**。

### 优缺点
- **优势**
  - 将所有数据恢复到最新点（故障点）。
  - 恢复时间是转储数据文件和应用所有归档日志文件所需的时间。
- **缺点**
  - 必须具有自要从中恢复的备份以来的所有归档日志文件。

### 示例
1. **使用 tar 包进行恢复**：
   ```bash
   tar -zvxf /backup/base.tar.gz -C $PGDATA
   ```
2. **修改 `postgresql.conf` 文件**：
   ```conf
   restore_command = 'cp /home/postgres/archives/%f %p'
   recovery_target_timeline = 'latest'
   ```
3. **生成 `recovery.signal` 空文件**：
   ```bash
   touch recovery.signal
   ```
4. **启动数据库**：
   ```bash
   pg_ctl start
   ```

## 时间线和时间线历史文件
每当进行一次完全或不完全恢复后，数据库的时间线就会发生变化，同时用时间线历史文件来记录。

### 时间线历史文件
- **文件命名规则**：`8-digit new timelineId.history`，例如 `00000002.history`。
- **文件内容**：至少包含一行，每行由以下三项组成：
  - `timelineId`：用于恢复的归档日志的时间线 ID。
  - `LSN`：发生 WAL 段切换的 LSN 位置。
  - `reason`：人类可读的时间线改变的原因。

### 示例
```bash
postgres> cat /home/postgres/archivelogs/00000002.history
1 0/A000198 before 2020-4-28 12:05:00.861324+00
```

## 基于表空间备份的完全恢复
PostgreSQL 支持基于表空间（除了 `pg_global` 之外）级别的完全恢复。

### 恢复步骤
1. **转储备份的表空间目录到目标位置**：
   ```bash
   cp -rf /backup/PG_12_201909212 /home/postgres/tblspc/
   ```
2. **转储 `backup_lable` 文件到 `$PGDATA` 目录下**：
   ```bash
   cp /backup/backup_lable $PGDATA
   ```
3. **创建 `recovery.signal` 文件**：
   ```bash
   touch recovery.signal
   ```
4. **修改 `postgresql.conf` 文件**：
   ```conf
   restore_command = 'cp /home/postgres/archives/%f %p'
   recovery_target_timeline = 'latest'
   ```
5. **启动数据库**：
   ```bash
   pg_ctl start
   ```

## 只读数据库的恢复
只读数据库的恢复可以通过以下步骤实现：

### 恢复步骤
1. **将数据库变成只读状态**：
   ```sql
   ALTER DATABASE new_db1 SET default_transaction_read_only=on;
   ```
2. **单独备份 `new_db1` 数据库目录**。
3. **如果 `new_db1` 数据库目录损坏，关闭数据库，转储备份的目录到目标位置**。
4. **打开数据库**。

### 注意
- PostgreSQL 不支持单个数据库的完全恢复。

## 总结
- 描述介质恢复
- 执行非归档模式下的恢复
- 执行归档模式下的完全恢复
- 执行基于表空间的完全恢复
- 执行只读数据库的恢复

## 练习
1. **继续上一节的练习，使用 `pg_basebackup` 备份的内容**。
2. **创建存放恢复数据库实例的空目录，确保有足够空间**。
3. **将 `pg_basebackup` 备份的内容解压到该目录**。
4. **观察表空间文件的存放位置**。
5. **配置 `postgresql.conf`，使用新的监听端口。配置恢复设置：恢复到指定时间点后暂停，并开启 standby 只读模式**。
6. **连接到恢复实例，验证数据是否恢复到指定时间点**。
7. **配置恢复参数，继续恢复到最新状态**。
8. **连接到恢复实例，验证数据是否恢复到指定时间点**。