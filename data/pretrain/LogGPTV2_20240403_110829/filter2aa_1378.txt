# Network Anti-Reconnaissance: Disrupting Nmap with Deception

## Introduction
- **Author:** AltF4
- **Topic:** Anti-Reconnaissance

### Overview of a Network Attack
A typical network attack can be divided into three main phases:
1. **Gain Access**
2. **Perform Reconnaissance**
3. **Exploit Vulnerability**

This discussion will focus on the second phase, **Reconnaissance**, and the techniques used to counter it.

### What is Anti-Reconnaissance?
Anti-reconnaissance is a set of strategies designed to obscure the network, making it difficult for attackers to gather useful information. This is different from intrusion detection/prevention and access control, which are more about detecting and preventing unauthorized access.

### Reconnaissance Techniques
Attackers use various methods to gather information for an exploit:
- **Number of Systems**: ARP Sweep scans or ICMP Echo requests.
- **Types of Systems (OS)**: OS detection scans.
- **Open Ports**: TCP SYN, CONNECT, and other port scans.
- **Network Topology**: Traceroute.
- **Running Services**: Service detection scans.

### Challenges in Detecting and Preventing Reconnaissance
#### Detection Challenges
- **Signature Failures**: Many reconnaissance packets (e.g., ARP, TCP SYNs, ICMP) look identical at the packet level.
- **Speed Variations**: Slow and fast scanning can both be stealthy.
- **Internal Presence**: Attackers may already be inside the network, bypassing border security (firewalls).

#### Prevention Challenges
- **Metadata**: Metadata cannot be encrypted, making it vulnerable to analysis.
- **Obfuscation**: Effective obfuscation is challenging but necessary.

### Constraining the Problem
To make reconnaissance more difficult, one effective method is to create a "needle in a haystack" scenario by drowning real nodes with realistic fake ones. Tools like **Honeyd** can help achieve this.

#### Honeyd
- **Goals**:
  - **Obfuscate the Network**: Provide a large number of fake results to confuse reconnaissance efforts.
  - **Identify Reconnaissance**: Traffic to decoys can be presumed hostile.
- **Features**:
  - **Low Fidelity Honeypots**: These are not real machines or virtual machines as you know them. They cannot be exploited like VMs and can be produced en masse.
  - **Last Update**: May 7, 2007. Note that Nmap has introduced new probes since then, so updates may be necessary.
  - **Source Code**: Available at [github.com/datasoft/honeyd](https://github.com/datasoft/honeyd).

### The Haystack Approach
- **Scenario**: An attacker gains access to a massive network where most machines are fake.
- **Outcome**: Reconnaissance becomes ineffective, cumbersome, and obvious.

### Classification
- **High Fidelity Honeypots**: These allow for detailed inspection of log files, either manually or with automated tools. However, signature-based detection (IDS/antivirus) often fails.

### Machine Learning for Detection
- **K-Nearest Neighbors (KNN)**: Uses statistical features such as packet timing, IPs contacted, ports contacted, and haystack nodes contacted.
- **Training Data**: Programmed into the system, similar to a spam filter.
- **Process**: Plot data points in N-dimensional space, query a point, and search for the k nearest neighbors. A majority vote based on a distance metric is used to classify the query point.
- **Libraries**: **libann** for approximate nearest neighbors, which introduces some error but provides significant performance gains.

### Features of Haystack Autoconfig
- **Scans Your Network**: Automatically builds a haystack from your network.
- **Multiple User Interfaces**: WebUI, Qt, and Terminal.
- **Import/Export Training Data**: Facilitates easy management of training data.
- **Highly Multithreaded**: Optimized for performance.
- **Free Software**: Open-source and freely available.

### Demo
A demonstration of the tool can be provided upon request.

### Questions & Contact
- **Email**: PI:EMAIL
- **Social Media**:
  - **Identi.ca**: @altf4
  - **Twitter**: @2600AltF4
  - **Diaspora**: PI:EMAIL
- **Development**:
  - **GitHub**: [github.com/DataSoft](https://github.com/DataSoft)
  - **IRC**: OFTC #nova
- **In Person**: 1st Fridays, phx2600.org

For further information or collaboration, feel free to reach out through any of the above channels.