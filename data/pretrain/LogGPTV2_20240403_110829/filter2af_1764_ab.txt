       50                 context.disableDefaultConstraintViolation();
       51:                context.buildConstraintViolationWithTemplate(this.message).addConstraintViolation();
       52                 return false;
       53              }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\role\RolesExistValidator.java:
       42        } else {
       43           context.disableDefaultConstraintViolation();
       44:          context.buildConstraintViolationWithTemplate("Missing roles: " + missing).addConstraintViolation();
       45           return false;
       46        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-validation\3.21.2-03\nexus-validation-3.21.2-03\org\sonatype\nexus\validation\ConstraintViolationFactory.java:
       75        public boolean isValid(ConstraintViolationFactory.HelperBean bean, ConstraintValidatorContext context) {
       76           context.disableDefaultConstraintViolation();
       77:          ConstraintViolationBuilder builder = context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(bean.getMessage()));
       78           NodeBuilderCustomizableContext nodeBuilder = null;
       79           String[] var8;
Later I saw the [Vulnerability
Analysis](https://github.com/Cryin/Paper/blob/master/CVE-2018-16621%20Nexus%20Repository%20Manager3%20%E4%BB%BB%E6%84%8FEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5.md)
published by the author, indeed used `buildConstraintViolationWithTemplate` as
the source of the vulnerability , use this key point to do tracking analysis.
As can be seen from the search results above, the three CVE key points caused
by the el expression are also among them, and there are several other places,
a few used `this.getEscapeHelper().StripJavaEl` , There are a few, it seems
ok, a ecstasy in my heart? However, although several other places that have
not been cleared and can be accessed by routing, they cannot be used. One of
them will be selected for analysis later. So at the beginning, I said that the
official may have fixed several similar places. I guess there are two
possibilities:
  * Officials have noticed that there are also el parsing vulnerabilities in those places, so they did a cleanup.
  * There are other vulnerability discoverers who submitted the cleared vulnerability points, because those places can be used; but the uncleared places cannot be used, so the discoverers did not submit, and the official did not go do clear
However, I feel that the latter possibility is more likely. After all, it is
unlikely that the official will clear some places, and some places will not do
it.
##### CVE-2018-16621 analysis
This vulnerability corresponds to the above search result is
RolesExistValidator. Since the key point is searched, I will manually reverse
the traceback to see if it can be traced back to the place where there is
routing processing. Here is a simple search traceback.
The key point is isValid in RolesExistValidator, which calls
buildConstraintViolationWithTemplate. Search if there is a place to call
RolesExistValidator:
There is a call in RolesExist, this way of writing will generally use
RolesExist as a comment, and will call `RolesExistValidator.isValid ()` during
verification. Continue to search for RolesExist:
There are several places that directly use RolesExist to annotate the roles
attribute. We can go back one by one, but according to the Role keyword,
RoleXO is more likely, so look at this (UserXO is also), continue to search
for RoleXO:
There may be some other disturbances, such as the first red label
RoleXOResponse, this can be ignored, we find the place to use RoleXO directly.
In RoleComponent, if you see the second red annotation, you probably know that
you can enter the route here. The third red annotation uses roleXO and has the
roles keyword. RolesExist also annotates roles above, so the guess is
attribute injection to roleXO. The decompiled code in some places is not easy
to understand, you can look at the source code:
It can be seen that the submitted parameters are injected into roleXO, and the
route corresponding to RoleComponent is as follows:
Through the above analysis, we probably know that we can enter the final
RolesExistValidator, but there are may be many conditions to be met in the
middle, we need to construct the payload and then measure it step by step. The
location of the web page corresponding to this route is as follows:
Test (the 3.21.1 version used here, CVE-2018-16621 is the previous
vulnerability, which was fixed earlier in 3.21.1, but 3.21.1 was bypassed
again, so the following is the bypass situation, will`$`Is replaced with`$ \\
x` to bypass):
Repair method:
Added `getEscapeHelper (). StripJavaEL` to clear the el expression,
replacing`$ {`with`{`, the next two CVEs are bypassing this fix:
##### CVE-2020-10204 analysis
This is the bypass of the previous stripJavaEL repair mentioned above, and it
will not be analyzed here. The use of the `$\\x{` format will not be replaced
(tested with version 3.21.1):
##### CVE-2020-10199 analysis
This vulnerability corresponds to ConstraintViolationFactory in the search
results above:
buildConstraintViolationWith (label 1) appears in the isValid of
HelperValidator class (label 2), HelperValidator is annotated on
HelperAnnotation (label 3, 4), HelperAnnotation is annotated on HelperBean
(label 5), on `ConstraintViolationFactory.createViolation` HelperBean (labels
6, 7) is used in the method. Follow this idea to find the place where
`ConstraintViolationFactory.createViolation` is called.
Let's also go back to the manual reverse trace to see if we can trace back to
where there is routing.
Search ConstraintViolationFactory:
There are several, here uses the first BowerGroupRepositoriesApiResource
analysis, click to see that we can see that it is an API route:
ConstraintViolationFactory was passed to super, and other functions of
ConstraintViolationFactory were not called in
BowerGroupRepositoriesApiResource, but its two methods also called super
corresponding methods. Its super is AbstractGroupRepositoriesApiResource
class:
The super called in the BowerGroupRepositoriesApiResource constructor assigns
ConstraintViolationFactory (label 1) in AbstractGroupRepositoriesApiResource,
the use of ConstraintViolationFactory (label 2), and calls createViolation (we
can see the memberNames parameter), which is needed to reach the vulnerability
point. This call is in validateGroupMembers (label 3). The call to
validateGroupMembers is called in both createRepository (label 4) and
updateRepository (label 5), and these two methods can also be seen from the
above annotations that they are routing methods.
The route of BowerGroupRepositoriesApiResource is
/beta/repositories/bower/group, find it in the admin page APIs to make a call
(use 3.21.1 test):
Several other subclasses of AbstractGroupRepositoriesApiResource are the same:
##### CleanupPolicyAssetNamePatternValidator does not do cleanup point
analysis
Corresponding to the CleanupPolicyAssetNamePatternValidator in the search
results above, we can see that there is no StripEL removal operation here:
This variable is thrown into buildConstraintViolationWithTemplate through an
error report. If the error message contains the value, then it can be used
here.
Search CleanupPolicyAssetNamePatternValidator:
Used in CleanupPolicyAssetNamePattern class annotation, continue to search for
CleanupPolicyAssetNamePattern:
The attribute regex in CleanupPolicyCriteria is annotated by
CleanupPolicyAssetNamePattern, and continue to search for
CleanupPolicyCriteria:
Called in the toCleanupPolicy method in CleanupPolicyComponent, where
`cleanupPolicyXO.getCriteria` also happens to be CleanupPolicyCriteria object.
toCleanupPolicy calls toCleanupPolicy in the createup and previewCleanup
methods of the CleanupPolicyComponent that can be accessed through routing.
Construct the payload test:
However, it cannot be used here, and the value value will not be included in
the error message. After reading RegexCriteriaValidator.validate, no matter
how it is constructed, it will only throw a character in the value, so it
cannot be used here.
Similar to this is the CronExpressionValidator, which also throws an exception
there, it can be used, but it has been fixed, and someone may have submitted
it before. There are several other places that have not been cleared,but
either skipped by if or else, or cannot be used.
The way of manual backtracking search may be okay if there are not many places
where the keyword is called, but if it is used a lot, it may not be so easy to
deal with. However, for the above vulnerabilities, we can see that it is still
feasible to search through manual backtracking.
#### Vulnerabilities caused by JXEL (CVE-2019-7238)
we can refer to @iswin's previous analysis
, here is no longer going Debugging
screenshots. Here I want to write down the previous fix for this
vulnerability, saying that it was added with permission to fix it. If only the
permission is added, can it still be submitted? However, after testing version
3.21.1, even with admin permissions can not be used, I want to see if it can
be bypassed. Tested in 3.14.0, it is indeed possible:
But in 3.21.1, even if the authority is added, it will not work. Later, I
debug and compare separately, and pass the following test:
    JexlEngine jexl = new JexlBuilder().create();
    String jexlExp = "''.class.forName('java.lang.Runtime').getRuntime().exec('calc.exe')";
    JexlExpression e = jexl.createExpression(jexlExp);
    JexlContext jc = new MapContext();
    jc.set("foo", "aaa");
    e.evaluate(jc);
I learned that 3.14.0 and the above test used
`org.apache.commons.jexl3.internal.introspection.Uberspect` processing, and
its getMethod method is as follows:
In 3.21.1, Nexus is set to
`org.apache.commons.jexl3.internal.introspection.SandboxJexlUberspect`, this
SandboxJexlUberspect, its getMethod method is as follows:
It can be seen that only a limited number of methods of type String, Map, and
Collection are allowed.
#### Conclusion
  * After reading the above content, I believe that we have a general understanding of the Nexus3 loopholes, and you will no longer feel that you can't start. Try to look at other places, for example, there is an LDAP in the admin page, which can be used for jndi connect operation, but the `context.getAttribute` is called there. Although the class file will be requested remotely, the class will not be loaded, so there is no harm.
  * The root cause of some vulnerabilities may appear in a similar place in an application, just like the keyword `buildConstraintViolationWithTemplate` above, good luck maybe a simple search can encounter some similar vulnerabilities (but my luck looks bad Click, we can see the repair in some places through the above search, indicating that someone has already taken a step forward, directly called `buildConstraintViolationWithTemplate` and the available places seem to be gone)
  * Look closely at the payloads of the above vulnerabilities, it seems that the similarity is very high, so we can get a tool similar to fuzz parameters to collect the historical vulnerability payload of this application, each parameter can test the corresponding payload, good luck may be Hit some similar vulnerabilities.
* * *