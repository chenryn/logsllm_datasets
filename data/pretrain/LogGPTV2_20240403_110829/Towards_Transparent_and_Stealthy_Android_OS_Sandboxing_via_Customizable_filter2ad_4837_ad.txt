Bluetooth service process ( 2 ) only provides the anonymous
Binder service externally, which does not submit the registered
Binder to the ServiceManager. This means we cannot apply the
binder service sharing mechanism to 2 . Instead, we implement a
new service proxy to virtualize Bluetooth. Figure 3(b) illustrates
our workflow. We modify the Bluetooth app (“packages/apps/Blue-
tooth”) and embed a Bluetooth JNI proxy. After our modification,
the Bluetooth service process now only contains the JAVA module
( 5 ), and the original JNI module is put into the newly added Blue-
tooth JNI proxy ( 8 ) in the host. Now, it is our Bluetooth JNI proxy
to interact with the Bluetooth stack and the Bluetooth controller.
Furthermore, to enable our proxy to communicate with new
Bluetooth service processes ( 5 ) in the host and each VP, we also
build a binder service in the Bluetooth JNI process ( 6 ). In this way,
each VP can finally access the Bluetooth driver in the host device.
Please note that the Bluetooth driver does not support multiplexing.
An exception will happen if multiple connections are established
with the Bluetooth driver at the same time. Therefore, we add a
namespace check in our proxy ( 7 ): we only forward the foreground
VP’s Bluetooth service request. Our SELinux policy specifies user-
level apps in each VP have no privilege to access the new Bluetooth
service process ( 5 ) to detect our change.
6 SCALABILITY AND SELINUX
When running multiple VPs on VPBox, memory usage becomes
the scalability bottleneck. We modify related kernel functions and
data structures to support three memory optimization techniques:
advanced multi-layered unification filesystem (AUFS) [49], Linux
kernel same-page merging (KSM) [65], and Android low memory
killer [6]. We use the AUFS mechanism to mount the read-only
partition of the VP system to reduce the load storage of the de-
vice. However, there is no AUFS module in the Android system.
We first transplant the AUFS module from its git repository to
the “/fs” directory of the Android kernel source code. Then, we
modify the file operation interface of the kernel, such as d_walk,
setfl, sync_filesystem, and related data structures, to complete
the adaption. KSM is a module in the Android kernel, but we
need to activate it to support multiple container instances. KSM
is a memory-saving de-duplication feature. The major modifica-
tions we made include enabling “/sys/kernel/mm/ksm/run=1” and
“CONFIG_KSM=y”, configuring the values of sleep_millisecs,
pages_to_scan, and other parameters in “kernel/mm/ksm.c” mod-
ule based on the terminal hardware configuration and the number
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea28640
(cid:69)(cid:88)(cid:76)(cid:79)(cid:71)(cid:17)(cid:57)(cid:51)(cid:37)(cid:82)(cid:91)(cid:17)(cid:83)(cid:85)(cid:82)(cid:83)
(cid:54)(cid:92)(cid:86)(cid:87)(cid:72)(cid:80)(cid:3)(cid:51)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:76)(cid:72)(cid:86)(cid:3)(cid:34)
(cid:37)(cid:85)(cid:68)(cid:81)(cid:71)(cid:29)(cid:3)(cid:42)(cid:82)(cid:82)(cid:74)(cid:79)(cid:72)(cid:3)(cid:51)(cid:76)(cid:91)(cid:72)(cid:79)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)(cid:3)(cid:44)(cid:39)(cid:29)(cid:3)(cid:71)(cid:69)(cid:70)(cid:59)(cid:59)(cid:59)
(cid:54)(cid:72)(cid:85)(cid:76)(cid:68)(cid:79)(cid:3)(cid:49)(cid:88)(cid:80)(cid:69)(cid:72)(cid:85)(cid:29)(cid:3)(cid:27)(cid:25)(cid:24)(cid:20)(cid:27)(cid:91)(cid:91)(cid:91)(cid:91)(cid:91)(cid:91)(cid:91)(cid:23)(cid:27)
(cid:54)(cid:54)(cid:44)(cid:39)(cid:29)(cid:3)(cid:51)(cid:76)(cid:91)(cid:72)(cid:79)(cid:16)(cid:59)(cid:59)(cid:59)(cid:16)(cid:24)(cid:42)
(cid:48)(cid:36)(cid:38)(cid:3)(cid:36)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)(cid:29)(cid:3)(cid:68)(cid:23)(cid:29)(cid:70)(cid:68)(cid:29)(cid:68)(cid:19)(cid:29)(cid:23)(cid:19)(cid:29)(cid:91)(cid:91)(cid:29)(cid:25)(cid:28)
(cid:51)(cid:75)(cid:82)(cid:81)(cid:72)(cid:3)(cid:49)(cid:88)(cid:80)(cid:69)(cid:72)(cid:85)(cid:29)(cid:3)(cid:27)(cid:20)(cid:23)(cid:16)(cid:26)(cid:26)(cid:26)(cid:16)(cid:91)(cid:91)(cid:91)(cid:91)
(cid:17)(cid:17)(cid:17)
(cid:49)(cid:82)
(cid:43)(cid:82)(cid:86)(cid:87)(cid:29)(cid:3)(cid:44)(cid:81)(cid:76)(cid:87)
(cid:38)(cid:88)(cid:86)(cid:87)(cid:82)(cid:80)(cid:3)(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)
(cid:38)(cid:88)(cid:86)(cid:87)(cid:82)(cid:80)(cid:3)(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)
5
(cid:83)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:92)(cid:66)(cid:74)(cid:72)(cid:87)
6
VP
(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:36)(cid:87)(cid:87)(cid:85)(cid:76)(cid:69)(cid:88)(cid:87)(cid:72)(cid:3)
(cid:52)(cid:88)(cid:72)(cid:85)(cid:92)
(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)(cid:36)(cid:87)(cid:87)(cid:85)(cid:76)(cid:69)(cid:88)(cid:87)(cid:72)(cid:3)
(cid:52)(cid:88)(cid:72)(cid:85)(cid:92)
9
(cid:60)(cid:72)(cid:86)
(cid:57)(cid:51)(cid:29)(cid:3)(cid:44)(cid:81)(cid:76)(cid:87)
1
(cid:57)(cid:51)(cid:3)(cid:48)(cid:72)(cid:80)(cid:82)(cid:85)(cid:92)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)(cid:3)(cid:54)(cid:92)(cid:86)(cid:87)(cid:72)(cid:80)(cid:3)
(cid:51)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:76)(cid:72)(cid:86)
2
(cid:38)(cid:88)(cid:86)(cid:87)(cid:82)(cid:80)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:54)(cid:75)(cid:68)(cid:85)(cid:72)(cid:71)(cid:3)(cid:48)(cid:72)(cid:80)(cid:82)(cid:85)(cid:92)(cid:3)
(cid:43)(cid:82)(cid:86)(cid:87)(cid:3)(cid:48)(cid:72)(cid:80)(cid:82)(cid:85)(cid:92)
(cid:57)(cid:76)(cid:85)(cid:87)(cid:88)(cid:68)(cid:79)(cid:76)(cid:93)(cid:72)(cid:71)(cid:3)(cid:39)(cid:72)(cid:76)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:51)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:76)(cid:72)(cid:86)
(cid:3)
3
(cid:44)(cid:51)(cid:38)(cid:3)
(cid:49)(cid:68)(cid:80)(cid:72)(cid:86)(cid:83)(cid:68)(cid:70)(cid:72)
(cid:53)(cid:72)(cid:68)(cid:79)(cid:3)(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:39)(cid:68)(cid:87)(cid:68)
4
(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:36)(cid:70)(cid:70)(cid:72)(cid:86)(cid:86)
(cid:57)(cid:76)(cid:85)(cid:87)(cid:88)(cid:68)(cid:79)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:43)(cid:82)(cid:86)(cid:87)(cid:3)(cid:56)(cid:86)(cid:72)(cid:85)(cid:16)(cid:79)(cid:72)(cid:89)(cid:72)(cid:79)(cid:3)(cid:51)(cid:85)(cid:82)(cid:91)(cid:92)
(cid:11)(cid:37)(cid:79)(cid:88)(cid:72)(cid:87)(cid:82)(cid:82)(cid:87)(cid:75)(cid:3)(cid:95)(cid:3)(cid:55)(cid:72)(cid:79)(cid:72)(cid:83)(cid:75)(cid:82)(cid:81)(cid:92)(cid:3)(cid:95)(cid:3)(cid:39)(cid:76)(cid:86)(cid:83)(cid:79)(cid:68)(cid:92)(cid:3)(cid:95)(cid:3)(cid:42)(cid:51)(cid:56)(cid:17)(cid:17)(cid:17)(cid:12)
7
(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)
(cid:36)(cid:70)(cid:70)(cid:72)(cid:86)(cid:86)
(cid:38)(cid:88)(cid:86)(cid:87)(cid:82)(cid:80)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:53)(cid:72)(cid:68)(cid:79)(cid:3)(cid:39)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:39)(cid:68)(cid:87)(cid:68)
(cid:57)(cid:76)(cid:85)(cid:87)(cid:88)(cid:68)(cid:79)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:43)(cid:82)(cid:86)(cid:87)(cid:3)(cid:46)(cid:72)(cid:85)(cid:81)(cid:72)(cid:79)(cid:3)(cid:39)(cid:85)(cid:76)(cid:89)(cid:72)(cid:85)
(cid:11)(cid:38)(cid:51)(cid:56)(cid:3)(cid:95)(cid:3)(cid:51)(cid:82)(cid:90)(cid:72)(cid:85)(cid:3)(cid:95)(cid:3)(cid:42)(cid:51)(cid:54)(cid:3)(cid:95)(cid:3)(cid:48)(cid:72)(cid:80)(cid:82)(cid:85)(cid:92)(cid:17)(cid:17)(cid:17)(cid:3)(cid:12)
8
(cid:54)(cid:72)(cid:79)(cid:73)(cid:16)(cid:80)(cid:68)(cid:71)(cid:72)(cid:3)(cid:54)(cid:92)(cid:86)(cid:70)(cid:68)(cid:79)(cid:79)
Figure 4: VPBox’s workflow of customizing the VP’s device attributes.
of container instances. We virtualize the kernel driver of Low Mem-
ory Killer so that each VP can independently use this mechanism
to manage the process memory of its namespace. We mainly mod-
ified the process task_struct data structure to bind the device
namespace to identify the VP that different processes belong to. In
particular, we modified “kernel/drivers/staging/android/lowmemo-
rykiller.c” module, registered a lowmem_shrinker memory callback
for each VP, and configured the scheduling strategy so that the back-
ground VP’s lowmem_shrinker has more execution opportunities
than the foreground VP’s lowmem_shrinker.
Moreover, we also provide an optional, “screen off” function for
background VPs to further improve scalability. In this way, when a
VP is switched to the background, its power model will become the
same as pressing the power button of the native Android system.
Turning off the screen causes each component to stop unnecessary
services, processes, and threads, which further reduces memory
consumption.
To isolate all VPs from the host machine and one another, we
utilize three kinds of namespaces (UID, device, and mount) to
enforce the access control on user credentials, data, device state,
and filesystem. Also, we disable the capability of creating device
nodes inside a VP. Furthermore, we add a fine-grained permission
strategy that monitors a VP’s internal processes in real time. We
modify the host’s SELinux policy to take different VP’s namespaces
as new labels and create new SELinux access control strategies for
each VP’s internal processes. In this way, we can prevent untrusted
apps from abusing the VP’s device access permissions.
Inspired by BareDroid [48], we also take advantage of SELinux
to record the system calls invoked during app execution. By default,
only denied operations are recorded by SELinux. We modified the
SELinux policy by adding an auditallow tag to each authorized op-
eration. In this way, we can collect complete operations performed
by a user app.
7 DEVICE ATTRIBUTE CUSTOMIZATION
Our virtualization techniques attempt to provide VPBox users with
the same experiences as using a physical smartphone. However, a
dedicated adversary can still detect the particular device running
VPBox, such as the Google phones we used. Even bare-metal mal-
ware analysis frameworks, such as BareBox [39] and BareDroid [48],
are still susceptible to ad-hoc fingerprinting techniques by examin-
ing specific software/hardware environment features. To address
this issue, we go one step further to enable customizing VP’s de-
vice attributes. Our “out-of-the-box” virtualization design enables
the device attribute customization to preserve stealthiness. This
new feature offers a cost-effective way to simulate more diversi-
fied virtual environments (e.g., Xiaomi Redmi series and Huawei
Honor series) on a single device. Figure 4 shows the workflow of
our proposed device-attribute customization. VPBox users provide
a configuration file “build.VPBox.prop” in advance ( 0 in Figure 4),
which stores device-specific attributes in the form of key-value
pairs. We classify these key-value pairs into three categories: An-
droid system properties, user-level-virtualized device properties,
and kernel-level-virtualized device properties. Each category has
a different customization method. The strategy and advantages of
our customization are explored next.
7.1 Android System Property Customization
Android system properties are const values that describe the mobile
device’s configuration information, such as brand, model, serial
number, IMEI, and manufacturer. These properties are stored in
the init process’s shared memory, but they are independent of
our device virtualization. This shared memory is typically used to
store some system and hardware information when the system is
being initialized. Other processes enquire about Android system
properties at runtime by calling “property_get” ( 5 in Figure 4),
an API for other processes to read the data stored in the shared
memory space. Therefore, during the process of booting up the VP,
its init process will call “load_system_props” to load the custom
Android system properties from “build.VPBox.prop” into the VP’s
shared memory space ( 1 ). Then, the custom system properties are
ready for apps running in the VP to access and inquire.
7.2 User-level Customization
The second category of “build.VPBox.prop” contains the device
attributes that we customize for user-level-virtualized devices, such
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2865as Bluetooth, WiFi, and telephony. The customized data in the
second category will be loaded into the host init process’s shared
memory ( 2 ). We enforce the IPC namespace to isolate the host’s
and VP’s shared memory ( 3 ). We embed a customization function
in the place where we perform user-level device virtualization, such
as Bluetooth JNI proxy and Telephony RilD proxy. In particular, the
customization function takes effect after the virtualization function
has responded to the app’s device attribute query request ( 4 ).
The customization function first determines whether the current
query request is from the VP by checking the associated device
namespace. If the query is from the VP’s app, it calls “property_get”
( 5 ) to get the custom data from the shared memory that maps
“build.VPBox.prop”, and then it returns the custom device data to
the VP ( 6 ).
7.3 Kernel-level Customization
The third category contains key-value pairs used to customize
kernel-level-virtualized devices, such as Power and GPS. Besides,
certain kernel drivers contain basic device attributes (e.g., kernel
version and memory/processor information), which are included
in the third category of our customized data as well. These kernel-
related configuration data are also stored in the host init process’s
shared memory.
In the kernel driver, we embed a customization function at the
place where our kernel-level virtualization function has responded
to the app’s device access request ( 7 ). The customization functions
need to interact with the shared memory of the host’s init process.
However, the customized data in the init process have no privilege
to enter the kernel space. To overcome this obstacle, we create a
new system call to copy data from the userspace to the kernel space
( 8 ). All of our customization functions in the kernel drivers work
similarly. For example, we customize the battery-related profiles
(e.g., battery level) in the kernel power driver and use the device
namespace to determine whether the query request is from the VP
or the host. If the request is from the VP, the Power’s customization
function will call our created syscall to extract the custom data and
then return them to the VP ( 9 ).
However, we have to take special measures to customize kernel
version information, of which two attributes are defined in the UTS
namespace data structure (“UTS_RELEASE” and “UTS_VERSION”).
We need to modify the UTS namespace data structure to embed
our customization function. Interested readers are referred to Ap-
pendix D for more details.
7.4 Advantages of VPBox’s Customization
VPBox now provides 150 device configuration options, which span
a broad spectrum of device attributes. Appendix Table 6 lists cus-
tomizable device-attribute options. We collect them from 1) the
related work on Android sandbox detection, and 2) existing device-
attribute editing tools. To the best of our knowledge, VPBox’s
device-attribute customization options are the largest and most
comprehensive so far.
Existing Android device-attribute editing tools [15, 74] are built
on Xposed [54] by hooking APIs. Compared to them, VPBox reveals
two distinct advantages. First, our customization methods are more
stealthy, because they occur at internal data structures or internal
Configure
build.VPBox.prop
Create a VP
Compile image files
Install image
HOST
PC
USB
VPBox
Control center
Initialize a VP
Exit the original VP
adb remount
USB
Replace
build.VPBox.prop
Control
center
VPBox
Start a new VP
(a) Create and initialize a VP
(b) Start a new customized VP
Figure 5: The workflow of starting a custom virtual phone.
interfaces that are inaccessible to the virtual phone. Besides, they do
not rely on user-level API-hooking, which means our customization
does not leave footprints in the VP’s runtime environment.
Second, our VP’s customization does not interfere with nor-
mal operations on the host device. System modifications without
leveraging container virtualization lack flexibility and compatibility,
because only changing return values of APIs or syscalls is likely to
result in system crashes or exceptions. For example, blindly editing
Bluetooth attributes would cause the Bluetooth system service to
keep restarting, affecting the app that is using the Bluetooth ser-
vice. In VPBox’s customization functions, we do not use the custom
device data to respond to all device access requests. Instead, we
analyze the data flow of the VP interface that accesses the device.
Only if the device data obtained by the VP interface finally flows
into the VP’s process, and the process UID is a user app, we send
the custom device data to the VP interface. Powered by our “out-
of-the-box” virtualization design, VPBox can gracefully decouple
device-attribute editing operations from normal operations on the
host device and solve incompatibility issues.
8 EVALUATION
VPBox Usage The VP images are created and configured on a PC
and downloaded to the host device via USB. We provide a control
center app for VPBox users to switch between the host system
and VPs swiftly. To start a new custom VP, a user takes the follow-
ing three steps: 1) exit the original VP; 2) update and replacing a
new “build.VPBox.prop” configuration file; 3) stat a new VP via the
control center app. Figure 5 shows how to start a new custom VP.
We evaluate VPBox from three dimensions. First, we provide
performance measurements to show that VPBox reveals native
performance. Second, we compare existing Android sandboxes
in evading various virtual environment detection heuristics. The
third experiment evaluates VPBox’s device customization using
environment-sensitive malware. Please note that we are unable to
compare VPBox with other peer Android containers in the perfor-
mance test. The complete source code download links of Cells [10],
Cellrox [17], and Condroid [73] have been out of work for a while,
so we cannot compile and run their virtual phones. We can only
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea28661.2
1
0.8
0.6
0.4
0.2
0
1.2
1
0.8
0.6
0.4