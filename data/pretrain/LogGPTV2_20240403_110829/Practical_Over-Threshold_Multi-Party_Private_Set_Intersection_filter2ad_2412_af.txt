(Section 5). From the empirical results discussed in the previous section, the most eﬃcient OPPRF instanti-
ation is the TABLE-based hint. Thus, the OPPRF was instantiated using the TABLE-based protocol in this
18
300
240
180
120
60
30
d
n
o
c
e
s
n
i
e
m
i
t
g
n
i
n
u
R
t = 1
t = (cid:98)n/2(cid:99)
t = n − 1
3
4
5
10
15
Number of parties n
Figure 11: Total running time of our semi-honest Multi-Party PSI for the number of parties n, t < n
dishonestly colluding, each with set size 220, in LAN setting.
Number
Parties n Corruption t
Threshold
3
{4, 5}
{10, 15}
4
5
10
15
{1, 2}
1
{2, 3}
2
4
5
9
7
14
212
Set Size m
220
216
3.28
51.87
935.32
4.92
4.92
6.56
9.84
14.76
13.12
22.96
77.80
77.80
103.74
155.61
233.41
207.48
363.09
1,402
1,402
1,870
2,805
4,208
3,741
6,547
224
14,860
-
22,290
-
-
-
-
-
-
Table 5: The numerical communication (in MB) of our Multi-Party PSI in semi-honest setting. The cost
is on the client’s side for the number of parties n, t < n dishonestly colluding, each with set size m.
Communication costs ignore the ﬁxed cost of base OTs for OT extension. Cells with − denote trials that
either took longer than hour or ran out of memory.
section.
To understand the scalability of this protocol, we evaluate it on the range of the number parties n ∈
{3, 4, 5, 10, 15} on the set size m ∈ {212, 216, 220, 224}. We also wanted to understand the performance eﬀect
of the generalization discussed in Section 5.3 in which the protocol is tuned to tolerate an arbitrary number
t of corrupted parties. In our experiments, we used t ∈ {1,(cid:98)n/2(cid:99), n − 1}.
Our protocol scales well using multi-threading between n parties. In our implementation, the leader P1
uses n−1 threads and other parties use min{t+1, n−1} threads so that each party operates OPPRF protocol
with other parties at the same time. However, we use a single thread to perform the OPPRF subprotocol
between two parties.
We proposed a better “hashing to bin” scheme (Appendix B) than the state-of-art two-party PSI [KKRT16].
Speciﬁcally, our hashing scheme removes the stash bins which consume nontrivial cost of the protocol [KKRT16]
for suﬃciently small sets. For example of 212 set size, we see that our protocol requires 168 milliseconds
compared to 211 milliseconds by [KKRT16], a diﬀerence of 1.2×.
Results. Table 4 presents the running time of our PSI protocol in both LAN and WAN setting. We
report the running time for the total time and online phase. The oﬄine phase consists of all operations
which do not depend on the input sets. In the three-party case, our protocol supports the full corrupted
majority. For m = 220, our general 3-PSI protocol ( Section 5) in LAN setting costs 42 seconds while the
19
optimized protocol (Section 6.3) takes 26 seconds which is 1.6× faster. When evaluating our 3-PSI in WAN
setting, we found this optimized variant to be 1.2× faster. This is primarily due to the need to wait for
previous OPPRF completed.
To address the possibility of at most t parties colluding, each party performs OPPRF with min{t+1, n−1}
other parties. Therefore the cost of the protocol is the same for t = n− 1 as t = n− 2. Hence, we report the
protocol performance with the n = 4 and t ∈ {2, 3} on the same row of the Table 4.
As we can see in the table 4, our protocol requires only 72 seconds to compute a PSI of n = 5 parties for
m = 220 elements. For the same set size, when increasing the number of parties to n = 10, our total running
time is 3 minutes and if n = 15 our protocol takes around 5 minutes. Figure 11 shows that our protocol’s
cost is linear in the size of number parties. When assuming only one corrupt party, our protocol takes only
64 seconds to compute PSI of 15 parties for m = 220 elements. For the small set size of m = 212, the PSI
protocol of n = 15 parties takes an total time of 1.85 seconds with the online phase taking 1.32 seconds. We
ﬁnd that our protocol also scales to large input sets (m = 224) with n ∈ {3, 4, 5} participants.
Table 5 reports the numerical communication costs of our implementation. The protocol is asymmetric
with respect to the leader P1 and other parties. Because the leader plays the role of receiver in most OPPRFs,
the majority of his communication costs can be done in an oﬄine phase. Hence we report the communication
costs of the clients, which reﬂects the online cost of the protocol. For the small set size of m = 212, only
3.28MB communication was required in 3-PSI protocol on the client’s sides. The communication complexity
of our protocols is O(mtλ) bits. Thus, our protocol requires gigabytes of communication for a large set
size (m ∈ {220, 224}). Concretely, for the large input set m = 224, our 3-PSI protocol uses 14.8GB of
communication, roughly 0.88KB per item.
References
[AMPR14] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. Non-interactive secure compu-
tation based on cut-and-choose. In Phong Q. Nguyen and Elisabeth Oswald, editors, EURO-
CRYPT 2014, volume 8441 of LNCS, pages 387–404, Copenhagen, Denmark, May 11–15, 2014.
Springer, Heidelberg, Germany.
[ATD15]
[BA12]
[CG13]
[CJS12]
[CLR17]
Aydin Abadi, Sotirios Terzis, and Changyu Dong. O-PSI: delegated private set intersection on
outsourced datasets. In ICT Systems Security and Privacy Protection, pages 3–17. Springer,
2015.
Marina Blanton and Everaldo Aguiar. Private and oblivious set and multiset operations. In
7th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’12,
pages 40–41, New York, NY, USA, 2012. ACM.
Ran Canetti and Juan A. Garay, editors. CRYPTO 2013, Part II, volume 8043 of LNCS, Santa
Barbara, CA, USA, August 18–22, 2013. Springer, Heidelberg, Germany.
Jung Hee Cheon, Stanislaw Jarecki, and Jae Hong Seo. Multi-party privacy-preserving set
intersection with quasi-linear complexity. IEICE Transactions, 95-A(8):1366–1378, 2012.
Hao Chen, Kim Laine, and Peter Rindal. Fast private set intersection from homomorphic
encryption. Cryptology ePrint Archive, Report 2017/299, 2017. http://eprint.iacr.org/
2017/299.
[DCKT10] Emiliano De Cristofaro, Jihye Kim, and Gene Tsudik. Linear-Complexity Private Set Intersec-
tion Protocols Secure in Malicious Model, pages 213–231. Springer Berlin Heidelberg, Berlin,
Heidelberg, 2010.
[DCW13]
Changyu Dong, Liqun Chen, and Zikai Wen. When private set intersection meets big data:
An eﬃcient and scalable protocol. In ACM Conference on Computer &#38; Communications
Security, CCS ’13, pages 789–800. ACM, 2013.
[DSMRY12] Dana Dachman-Soled, Tal Malkin, Mariana Raykova, and Moti Yung. Eﬃcient robust private
set intersection. Int. J. Appl. Cryptol., 2(4):289–303, July 2012.
20
[FHNP16] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. Eﬃcient set intersection
with simulation-based security. J. Cryptology, 29(1):115–155, 2016.
[FIPR05] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search and
oblivious pseudorandom functions. In Joe Kilian, editor, TCC 2005, volume 3378 of LNCS,
pages 303–324, Cambridge, MA, USA, February 10–12, 2005. Springer, Heidelberg, Germany.
[FNP04]
Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. Eﬃcient private matching and set
intersection. In Advances in Cryptology - EUROCRYPT 2004, volume 3027 of Lecture Notes
in Computer Science, pages 1–19. Springer, 2004.
[Gol09]
Oded Goldreich. Foundations of cryptography: volume 2, basic applications. Cambridge uni-
versity press, 2009.
[GOW12]
Ran Gelles, Rafail Ostrovsky, and Kina Winoto. Multiparty proximity testing with dishonest
majority from equality testing. In Automata, Languages, and Programming, pages 537–548.
Springer, 2012.
[HEK12]
[HFH99]
[HL10]
[HLP11]
[HV17]
[JL09]
Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than cus-
tom protocols? In Network and Distributed System Security (NDSS’12). The Internet Society,
2012.
Bernardo A. Huberman, Matt Franklin, and Tad Hogg. Enhancing privacy and trust in elec-
tronic communities. In Proceedings of the 1st ACM Conference on Electronic Commerce, EC
’99, pages 78–86. ACM, 1999.
Carmit Hazay and Yehuda Lindell. Eﬃcient secure two-party protocols: Techniques and con-
structions. Springer Science & Business Media, 2010.
Shai Halevi, Yehuda Lindell, and Benny Pinkas. Secure computation on the web: Comput-
ing without simultaneous interaction.
In Phillip Rogaway, editor, Advances in Cryptology -
CRYPTO 2011, volume 6841 of Lecture Notes in Computer Science, pages 132–150. Springer,
2011.
Carmit Hazay and Muthuramakrishnan Venkitasubramaniam. Scalable multi-party private set-
intersection. Cryptology ePrint Archive, Report 2017/027, 2017. http://eprint.iacr.org/
2017/027.
Stanislaw Jarecki and Xiaomin Liu. Eﬃcient oblivious pseudorandom function with applications
to adaptive OT and secure computation of set intersection. In Theory of Cryptography, volume
5444 of Lecture Notes in Computer Science, pages 577–594. Springer, 2009.
[KKRT16] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. Eﬃcient batched oblivi-
ous prf with applications to private set intersection. 2016. http://eprint.iacr.org/2016/799.
[KLS+17]
´Agnes Kiss, Jian Liu, Thomas Schneider, N. Asokan, and Benny Pinkas. Private set intersection
for unequal set sizes with mobile applications. Cryptology ePrint Archive, Report 2017/670,
2017. http://eprint.iacr.org/2017/670.
[KM08]
Adam Kirsch and Michael Mitzenmacher. Less hashing, same performance: Building a better
bloom ﬁlter. Random Struct. Algorithms, 33(2):187–218, September 2008.
[KMW08] Adam Kirsch, Michael Mitzenmacher, and Udi Wieder. More robust hashing: Cuckoo hashing
with a stash. In Dan Halperin and Kurt Mehlhorn, editors, ESA 2008, volume 5193 of Lecture
Notes in Computer Science, pages 611–622. Springer, 2008.
[KNR+17] Vladimir Kolesnikov, Jesper Buus Nielsen, Mike Rosulek, Ni Trieu, and Roberto Triﬁletti. Du-
plo: Unifying cut-and-choose for garbled circuits. Cryptology ePrint Archive, Report 2017/344,
2017. http://eprint.iacr.org/2017/344.
21
[Kol05]
[KS05]
[LR15]
[LW07]
[Mea86]
[MN15]
[MR13]
[NP01]
[Ops13]
Vladimir Kolesnikov. Gate evaluation secret sharing and secure one-round two-party compu-
tation. In Bimal K. Roy, editor, ASIACRYPT 2005, volume 3788 of LNCS, pages 136–155,
Chennai, India, December 4–8, 2005. Springer, Heidelberg, Germany.
Lea Kissner and Dawn Song. Privacy-preserving set operations. In Proceedings of the 25th An-
nual International Conference on Advances in Cryptology, CRYPTO’05, pages 241–257, Berlin,
Heidelberg, 2005. Springer-Verlag.