|Ai
C. CPS Probing Orchestration Fingerprinting
In recent years, there has been a noteworthy shift towards
a new phenomenon of probing events that could be dubbed
as probing campaigns. These are distinguished from previous
probing incidents as (1) the population of the participating
bots is several orders of magnitude larger, (2) the target
scope is generally the entire IP address space, and (3) the
sources adopt well-orchestrated, often botmaster-coordinated,
stealth scan strategies that maximize targets’ coverage while
minimizing redundancy and overlap [55, 56]. In this section,
we build upon our darknet preprocessing model as well as
our CPS probes’ inference algorithm by proposing a clustering
approach to infer CPS probing campaigns. This aims at better
comprehending the natures as well as the type of maliciousness
of such campaigns; for instance, it could be found, through
investigation, that a speciﬁc campaign is specialized in tar-
geting particular critical infrastructure resources. Further, the
proposed ﬁngerprinting approach allows the elaboration of the
actual scope and characteristics of the inferred campaigns in an
effort to provide accurate measurements as well as aid in CPS
situational awareness, analysis and attribution. In this context,
previous works [77] suggested that coordinated unsolicited
sources within a campaign probe their targets in a similar
fashion. Indeed, the proposed approach exploits this idea by
automatically building notions of similar probing behavioral
characteristics. To achieve this challenging task, given that we
are exclusively dealing with darknet data [46], the proposed
approach applies a fusion of a time-series technique in con-
junction with a network forensic analysis approach between
the previously inferred (independent) CPS probing ﬂows.
1) Time-Series Analysis: As a ﬁrst step,
the proposed
approach attempts to infer temporal similarities between the
previously inferred CPS probing activities. To this end, we
leverage a time-series approach rooted in Dynamic Time Warp-
ing (DTW) [78]. Motivated by its successful experimentation
in diverse research areas [78, 79], the DTW technique mea-
sures the resemblance between data sequences independent of
their rates. The aim is to cope with possible time deformations
afﬁliated with time-dependent data [80]. The DTW takes two
vectors deﬁning the time series as input and produces a
distance unit characterizing their temporal similarities.
2) Netﬂow Analysis: As a second step,
the proposed
approach leverages the context triggered piecewise hashing
(CTPH) [81] technique using a customized developed version
of ssdeep3, which exploits netﬂow characteristics. The CTPH
technique, which is derived from the digital forensics research
ﬁeld, is advantageous in comparison with typical hashing as
it can provide a percentage of similarity between two trafﬁc
samples rather than producing a null value if the samples are
slightly different. CTPH generates a percentage of similarity
deﬁning netﬂow similarities between any two given CPS
probing sessions.
To this end, to infer orchestrated CPS probing campaigns,
the proposed approach selects and clusters those CPS probing
sessions that minimize the DTW similarity metric while max-
imizing the CTPH measure targeting the same CPS protocol.
IV. RESULTS
The generated results are based upon scrutinizing 50 GB
of darknet data that were collected from a newly deployed
network telescope IP space during a one month period between
April and May, 2016. Please note that while we do not
claim that the design, deployment and management of such
darknet is part of this paper’s contributions, nevertheless, we
have to pinpoint that this is a ﬁrst of a kind cyber threat
intelligence gathering project in our region. We organize this
section following closely the previously proposed models and
approaches.
A. Darknet Preprocessing Model
We implemented a prototype of the proposed model of
Section III-A in Java using the jNetPcap4 library. To exe-
cute the proposed model on the darknet dataset, we aggregate
the connections into sessions using an approach similar to
the ﬁrst step algorithm by Kannan et al. [82]. We consider
all those connections within Taggreg of each other as part
of the same session for a given pair of hosts. We used the
same proposed threshold, Taggreg = 100 seconds, and found
3ssdeep: http://ssdeep.sourceforge.net/
4jNetPcap: http://jnetpcap.com/?q=jnetpcap-1.4
that this seems to correctly group the majority of connections
between any given pair of hosts. To validate the outcome
of the proposed model, we compare it against the baseline;
classifying misconﬁguration trafﬁc as any darknet trafﬁc that
is not scanning or backscattered [83]. The latter is a commonly
employed technique, given the lack of other available formal
literature approaches.
Figure 1 depicts the outcome of the execution of the proposed
model on the extracted sessions while Table IV summarizes
the outcome of the baseline. By comparing Table IV and
Figure 1, we can notice that the proposed model ﬁngerprinted a
lower percentage of misconﬁguration trafﬁc than the baseline.
A semi-automated veriﬁcation (i.e., using scripts and manual
Fig. 1: Proposed Model: Distribution of darknet sessions
investigation) validated that all the sessions that the model
inferred as misconﬁguration trafﬁc are true misconﬁguration
packets, where almost 50% of them are malformed packets
while the rest are packets that targeted the darknet IP space
only once. We further investigated the 4.7% darknet sessions
that the baseline experiment has inferred as misconﬁguration
trafﬁc and noticed that they are indeed false positives related to
UDP ampliﬁcation probes [66]. Thus, we can safely claim that
Scanning Trafﬁc
Backscatter Trafﬁc Misconﬁguration
65.1%
8.2%
26.7%
TABLE IV: Baseline: Distribution of darknet sessions
the proposed model was accurate in distinguishing between
darknet misconﬁguration trafﬁc and other malicious (or unso-
licited) darknet trafﬁc, compared to the baseline. In terms of
processing performance, we were solely interested in inferring
the execution time of the prototype; the time from which a
darknet dataset is fed into the prototype, until the time the
prototype ﬂags the misconﬁguration, ﬁlters-out such trafﬁc and
generates a new “clean” dataset. We executed the experiment
on a single commodity machine running Ubuntu 16.04 LTS
with an Intel Core-i7, 64-bit processor and 16 GB of RAM.
The output disclosed that in order to achieve the intended tasks,
the prototype approximately required, on average, 14 minutes
to completely process 1 hour of darknet data. For our current
tasks in hand that do not require very large measurement stud-
ies and given the accuracy and automation that is offered by
the proposed model, we believe that such result is acceptable.
Future work will address the performance of the proposed
model by (1) dropping the Java implementation in favor
8
22%78%Misconfiguration TrafficUnsolicited TrafficBACnet (on port 47808) and Ethernet (on ports 22222/44818).
In contrast, Modbus, ICCP, Niagara Fox and DNP3 were
among the top abused TCP CPS services. We geo-located
the probing sources of the most prominent probed services
as depicted in Figure 4. The outcome demonstrates that the
United States leads in terms of generating most of the probes.
Additionally, we infer distributed horizontal probing events
towards Germany, China, and France, and horizontal probing
activities from Japan, Russia, Canada and Korea that respec-
tively target the ICCP, Foundation Fieldbus, ROC and Modbus
CPS protocols. Moreover, we infer other horizontal probing
activities from Spain and Singapore, which simultaneously
target the ICCP and Modbus services.
of a C implementation that leverages the libpcap5 library,
and (2) employing multi-threading and parallel programming
paradigms.
B. CPS Probing Inference & Characterization
After preprocessing the darknet dataset, we aimed at in-
ferring and characterizing probing events targeting 120 CPS
communication and control protocols covering 26 CPS services
(please recall Table III). Table V provides an overview of the
CPS scanning activities as inferred by the proposed algorithm.
In total, we have identiﬁed 33897 CPS probing events targeting
20 CPS protocols. Figure 2 illustrates the distribution of such
events during the analyzed period. In an effort to validate
the occurrence of the inferred CPS probing activities, we
performed the following tasks. First, we relied on third-party
publicly available threat repositories provided by Cymon6
and AbuseIPDB7. These repositories index Internet-scale sus-
picious IP addresses as reported by service providers and
backbone network operators. They also identify the probable
attack category. We cross-matched the inferred CPS probing
events with those repositories.
April
Week3
April
Week4
May
Week1
May
Week2
7954
8871
8731
8341
3007
3727
3950
3731
Total
Scanners
Total
Unique
Scanners
TABLE V: Inferred CPS probing events
Our ﬁndings revealed that approximately 4.37% of scan-
ners were indeed involved in various malicious reported ac-
tivities (i.e., hacking (41.25%), portscan (31.46%), FTP/SSH
brute force (13.28%), and DDoS (6.29%)). In an auxiliary
attempt to validate the occurrence of the remaining scanners,
we relied on DShield8 data. By performing this, we were able
to validate 88.1% of the remaining scanners, which generated
1710065 malicious activities and were involved in 151799
unique attacks, as reported by DShield. The residual 7.53%
of scanning sources have never been reported in any publicly
available dataset that we could ﬁnd. However, our manual
inspection indicated that 80% of them belong to an unsolicited
CPS probing campaign (campaign B to be discussed in Section
IV-C). Thus, in total, through our validation approach and
manual inspection, we were able to validate the occurrence
of all the inferred CPS probing sources, except 1.34%, which
close to half of them were conﬁrmed, by investigating their
corresponding packets, to be related to misconﬁguration trafﬁc
that were not ﬁltered out correctly by the preprocessing model.
Our investigation revealed that 98% of the events are TCP-
based, where they are rendered by vertical probing activities,
in an effort to verify all running CPS services on a single host.
CPS probing events that exploit the UDP were scarce (close
to 2%) in our analyzed dataset and predominantly targeted
5tcpdump: http://www.tcpdump.org/
6Cymon Open Threat Intelligence: https://cymon.io/
7AbuseIPDB: https://www.abuseipdb.com/
8DShield: https://www.dshield.org/
9
Fig. 4: CPS service scans: Top source countries
We proceed by analyzing two packet features, namely, IP
Identiﬁcation (ip-id) and source port (src-port), related to the
inferred CPS probing events. Both features are typically used
to make inferences related to the service generating the trafﬁc
[54]. On one hand, Table VI lists the top ﬁve ip-id values
and their counts. The results revealed that the majority of the
used ip-id values are consistent with probes generated from
the Zmap probing tool, which has a default ip-id equal to
54321 (0xd431 in hex) [54]. As such, we can state that around
90% of the inferred CPS probing trafﬁc are indeed generated
from Zmap. On the other hand, Table VII summarizes the top
employed source ports. We inferred a signiﬁcant amount of
probes originating from typically abused ports such as 6000
(i.e., often reported to be used by trojans). We have also noticed
that the majority of the trafﬁc have been received via speciﬁc
ports within the 40k and 60k range. While analyzing Modbus
communication, we have noted that around 30% of its trafﬁc
originated from source port 6706, which is the only port that
consistently appeared during the entire analyzed period. We
currently have no tangible explanation of such trafﬁc, but we
will be investigating their packets’ details in the near future.
April
Week3
April
Week4
May
Week1
May
Week2
0xd431 (13060)
0x0100 (820)
0x0049 (11)
0x9625 (9)
0x0ae7 (9)
0xd431 (12632)
0x0100 (343)
0x0b1c (10)
0x052a (10)
0x058d (9)
0xd431 (11640)
0x0100 (566)
0x843d (9)
0x591e (9)
0x01da (9)
0xd431 (12849)
0x0100 (530)
0x0438 (13)
0xb530 (9)
0x8faf (9)
TABLE VI: Top ﬁve ip-id values (Probe packet count)
Consistent with Section III-B, we now investigate whether
020040060080010001200USDECNJPCHNLRUESSGFRISHKPLCAKRProbe PacketsCountryProFinetBACnetDNPEthernetFoundationICCPModbusOPCROCFig. 2: TCP and UDP probed CPS services
Fig. 3: The co-occurrence patterns of the inferred CPS probing events
April
Week3
6000 (609)
53933 (348)
53 (315)
43490 (267)
59531 (244)
April
Week4
53 (535)
43490 (356)
6000 (235)
22 (214)
1048 (146)
May
Week1
May
Week2
1048 (785)
42880 (576)
53 (334)
59651 (223)
58017 (221)
6000 (426)
60000 (330)
53 (314)
63030 (156)
50449 (128)
TABLE VII: Top ﬁve used/abused src-port (Probe packet count)
the same CPS scanning sources are prevalent on different
time periods by deriving their co-occurrence patterns. Figure 3
shows the extracted patterns for the most probed CPS services,
which are visualized in associated and correlated colors. Our
analysis revealed one clear consistent pattern that remained
active during the entire analyzed period. Such pattern is an
association between sources probing the ROC PLUS protocol
10
by abusing TCP port 4000 and those targeting the Ethernet
UDP ports 22222 and 44818. In this pattern, 55 to 82 IP
addresses were always persistent probing those CPS services.
Another interesting ﬁnding is related to the ICCP service on
TCP port 102, in which it was found to be probed with 5 other
services, namely, BACnet, DNP3, Ethernet, ROC and Modbus.
In these probes, 27 and 86 IP addresses concurrently shared
the probing task. Additionally, we have pinpointed probing
sources that exclusively targeted the Foundation Fieldbus and
PROFINET services, where their probing sources did not probe
any others CPS protocols. We also note that
the probing
sources targeting the Modbus protocol, also targeted 6 other
(CPS and non-CPS) protocols 74% of the time. By focusing
on the Modbus protocol, which was the most probed in our
analyzed dataset, we can infer from Figure 5 that 12 Modbus