AR5523
MWIFIEX
RSI
0
100
200
300
400
500
(c) Branching factor
Figure 10: Distribution of the depths of all the (a) created
and (b) evicted checkpoints in the checkpoint trees, as well
as (c) the resulting branching factors of the trees, measured
in Syzkaller-USB fuzzing.
machine, Agamotto continuously generated and ran test cases
despite kernel panics, eventually getting past the known bug
to discover this unknown bug. Moreover, Agamotto maintains
the fuzzing throughput, even when it frequently hits these
bugs. In fuzzing MWIFIEX as well as RSI, where Agamotto
encountered bugs more than 6,000 and 200 times in every
10 minutes, their baseline throughput is signiﬁcantly lower
than the ones observed in fuzzing other drivers. Agamotto, in
contrast, maintained a similar level of throughput across all
experiments.
Dirty Page Statistics. To show that our incremental check-
pointing and delta restore techniques are effective in practice,
we measured the number of pages that are restored and dirtied
in each iteration of the fuzzing loop. The results are shown
in Figure 12a and 12b. In our experiments, the number of
pages dirtied after executing a test case has an upperbound
near 8,000 pages. The number of restored pages is similarly
bounded, but often exceeds this limit when the modiﬁed pages
of the checkpoint being restored do not completely overlap
with the current set of dirty pages. This means that, as dis-
cussed in Section 5.1 and 5.2, the run-time overhead of virtual
machine checkpointing and restoration was greatly reduced.
·105
s
n
o
i
t
a
r
o
t
s
e
r
f
o
#
1
0.5
0
1
2
3
4
5
6
Path length
Figure 11: Distribution of the length of the restoration path in
Syzkaller-USB fuzzing.
0
4k
8k
12k
16k
0
4k
8k
12k
16k
(a) Pages restored
(b) Pages dirtied
y
c
n
e
u
q
e
r
F
y
c
n
e
u
q
e
r
F
0
8
16
24
32
40
48
(MiB)
(c) Checkpoint size
Figure 12: Distribution of the number of pages (a) restored
and (b) dirtied per iteration, and (c) the size of checkpoints in
Syzkaller-USB fuzzing.
Also, with the zero page optimization enabled, most of the
checkpoints were found to be smaller than 32MiB, as depicted
in Figure 12c.
5.4 AFL-PCI Fuzzing
Experimental Setup. To evaluate our device-virtualization-
based PCI fuzzer augmented with Agamotto, we fuzzed four
PCI drivers. We used AFL as the fuzzer this time, with its
fuzzing algorithm unmodiﬁed again; we note that AFL imple-
ments a different input generation and scheduling algorithm
than Syzkaller. With our own PCI fuzzer, we used a conserva-
tive baseline, where Agamotto was applied, but the creation of
non-root checkpoints was disabled. In effect, our PCI experi-
ments measured the effectiveness of ﬁne-grained checkpoints
created by Agamotto in improving the performance of kernel
driver fuzzing.
To avoid introducing randomness through the seed input,
we started fuzzing with a single input as the seed, which con-
tains an eight-byte string—“Agamotto” in the ASCII format—
and without any dictionary entries. Randomness in the fuzzing
2552    29th USENIX Security Symposium
USENIX Association
RSIMWIFIEXAR5523BTUSBPN533GO7007SI470XUSX2YRSIMWIFIEXAR5523BTUSBPN533GO7007SI470XUSX2Y(a) ATLANTIC
(b) RTL8139
(c) STMMAC
(d) SNIC
Figure 13: AFL-PCI fuzzing throughput (execs/second) mea-
sured every 10 minutes for 3 hours.
algorithm was also controlled the same way as in the USB ex-
periments. We fuzzed each driver using 32 instances for three
hours. Since the driver’s interactions with a PCI device were
faster than what we observed in USB fuzzing, we reduced
the starting checkpoint interval to 50ms. We used 100ms as a
timeout value; we terminated each iteration 100ms after the
driver’s last access to the I/O mappings.
Fuzzing Throughput. Although AFL uses a fuzzing algo-
rithm different from Syzkaller’s, Agamotto again improved
the throughput by 21.6% on average, as shown in Figure 13.
We emphasize that neither AFL’s nor Syzkaller’s fuzzing al-
gorithm produces a sequence of test cases that are optimal
for Agamotto to accelerate. In particular, AFL’s fuzzing al-
gorithm is not tailored to fuzzing of event-driven systems
(e.g., it always mutates each test case in the corpus from the
ﬁrst byte). Still, Agamotto consistently improved the fuzzing
throughput in all experiments, and has potential to improve
it further when the checkpoint management policies are opti-
mized together with other aspects of the fuzzing algorithm.
Path Coverage. Table 4 shows, in fuzzing each driver, the
maximum number of code paths discovered among all fuzzing
instances. Agamotto’s effectiveness is far more pronounced
when the underlying fuzzer keeps discovering new, deeper
code paths; the more checkpoints created by Agamotto in
deep code paths, the more time it saves. In fuzzing AT-
LANTIC, RTL8139, and STMMAC, Agamotto covered sub-
stantially more paths than the baseline did in the same amount
of time; by executing 32.8% more test cases on average, Ag-
amotto covered 47.8% more paths. In fuzzing SNIC, however,
AFL only discovered only a limited number of paths. Still,
Agamotto did execute 6.2% more test cases than the baseline.
Table 4: Number of executions and discovered paths in AFL-
PCI fuzzing.*
# Executions
# Paths Discovered
Agamotto-R Agamotto
(Increase)
Agamotto-R
Agamotto
(Increase)
ATLANTIC
RTL8139
STMMAC
SNIC
147k 191k (30.1%)
152k 259k (70.5%)
137k 160k (16.6%)
144k 153k (6.2%)
* Median values from 3 independent runs.
112 142 (18.7%)
71 153 (115.4%)
87 121 (50.5%)
(0%)
8
8
6 Discussion
Checkpoint-Aware Fuzzing Algorithm. Our checkpoint-
ing primitive introduces a new dimension in the optimization
space of fuzzing kernel drivers or other event-driven, reactive
systems in general. We conservatively evaluated Agamotto
without modifying the underlying fuzzing algorithm; that
is, we only leveraged spatial and temporal localities that are
already present in the fuzzing algorithm of state-of-the-art
fuzzers. Thus, various aspects of the fuzzing algorithm such
as input selection and mutation strategies can be revisited.
We intend to explore checkpoint-aware or -oblivious fuzzing
algorithms as future work.
Supporting Other OSs. Agamotto itself does not require
any modiﬁcation to the OS. Agamotto interacts with the
virtual machine using standard virtual machine introspec-
tion mechanisms—hypercalls, VIRTIO, and shared mem-
ory devices—which are also readily available in closed-
source, proprietary operating systems such as Windows [45].
Syzkaller’s USB fuzzing component requires kernel modiﬁ-
cations, in order to redirect a USB driver’s I/O requests to
user space via the system call interface. Our modiﬁcations to
Syzkaller only pertain to its user-space components. Due to
its OS-independence Agamotto can be used in conjunction
with general kernel fuzzing approaches [53, 54].
Fuzzing the System Call Interface. OS kernels have an
event-driven system that processes incoming inputs from
peripherals and user-space programs. Agamotto can make
fuzzing the system call attack surface more efﬁcient. The de-
gree to which system call fuzzing can beneﬁt from Agamotto,
however, can vary depending on the kernel subsystem being
targeted. Kernel subsystems that pose similar challenges to
those that Agamotto addresses may beneﬁt more than others.
Device drivers themselves can also be tested more thoroughly
by simultaneously fuzzing both their system call (e.g., ioctl)
and peripheral attack surface. A local attacker having access
to both of these attack surfaces can compromise the OS kernel
by exploiting vulnerabilities found by such two-dimensional
fuzzing. Prior work showed that two-dimensional fuzzing is
USENIX Association
29th USENIX Security Symposium    2553
AgamottoAgamotto-R(Baseline)0123010203001230204001230510150123051015effective at ﬁnding bugs in ﬁle systems [64]. The same idea
can be applied to device drivers, and Agamotto can facilitate
an in-depth exploration of their two-dimensional input space.
Fuzzing Other Event-Driven Systems. Virtualization
techniques have also been used for running and fuzzing IoT
ﬁrmware [17, 22, 25, 66]. Although this paper focuses on
fuzzing kernel-mode device drivers running in a full-ﬂedged
OS kernel, Agamotto’s core techniques can be applied to
fuzzing IoT ﬁrmware running in a virtual machine. Event-
driven systems running in user mode can also beneﬁt from
Agamotto. For example, when fuzzing a multi-process sys-
tem where processes interact with each other, Agamotto, as it
transparently captures the states of all running processes at
the virtual machine level, can facilitate a deep exploration of
the state space of such systems as a whole.
Further Optimizations.
In a multi-instance fuzzing setup,
one can deduplicate checkpoints across fuzzing instances via
shared memory. Deduplication allows Agamotto to store more
checkpoints in memory, which in turn may prevent thrash-
ing and result in a higher hit rate of checkpoints. One can
also explore different checkpointing and eviction policies that
are either generic (e.g., the ones we presented), or tailored to
certain classes of fuzzing algorithms. Virtual machine intro-
spection primitives can also be further optimized via software
and hardware techniques [4].
Limitations. Syzkaller supports a multi-proc mode, which
runs multiple instances of a fuzzer within a single guest OS,
increasing the fuzzing throughput. Agamotto does not support
this mode currently, but we believe that this mode can be
supported with a ﬁner-grained checkpointing mechanism, e.g.,
via ﬁner-grained virtual machine introspection or in-kernel
checkpoints with kernel modiﬁcations [30]. We intend to
explore this direction as future work. We emphasize, however,
that other aspects of Agamotto, e.g., checkpoint management
and optimization techniques, would still apply even with such
ﬁner-grained checkpointing mechanism. We also emphasize
that our choice of checkpointing at the virtual machine level
allows Agamotto to support other VM-based kernel driver
fuzzers as we demonstrated with PCI-AFL experiments.
7 Related Work
Peripheral Attacks and Defenses. Malicious peripherals
have long been a threat to OS kernel security. A well-known
example are malicious USB devices, which often appear as
benign USB ﬂash drives [42]. Peripherals other than USB
devices, even non-pluggable ones hardwired in an SoC, can
also potentially turn malicious via peripheral attacks [9, 11].
Many defenses against malicious peripherals have been pro-
posed [5, 13, 58–60], though securing the peripheral attack
surface is still an ongoing effort [39]. With the performance
improvements that Agamotto provides, the exploration of the
peripheral attack surface via fuzzing can be made more efﬁ-
cient, reducing the time for discovering new vulnerabilities.
Kernel Fuzzing. Many fuzzers exist that ﬁnd vulnerabili-
ties in kernel subsystems [2, 3, 18, 24, 26, 27, 29, 32, 40, 46,
48, 53–55, 57, 64]. A line of work used various snapshot tech-
niques [2, 64], which we already discussed in detail in Sec-
tion 2. Other lines of work generally focused on the fuzzing
algorithm, e.g., generating coverage-increasing test cases; Ag-
amotto complements these efforts, as it transparently creates
and uses checkpoints to save time in executing the gener-
ated test cases. Hybrid fuzzing, a combination of symbolic
execution and fuzzing, has also been used to ﬁnd bugs in
OS kernels [33, 36, 49, 51]. Since both Agamotto and sym-
bolic execution systems maintain different forms of snapshots,
by devising switching mechanisms between the two forms
of snapshots, Agamotto could also augment hybrid kernel
fuzzing.
8 Conclusion
We presented Agamotto, a system which transparently im-
proves the performance of kernel driver fuzzers using a highly-
optimized dynamic virtual machine checkpointing primitive.
During a fuzzing run, Agamotto automatically checkpoints
the virtual machine at ﬁne-grained intervals and restores the
virtual machine from these checkpoints allowing it to skip re-
boots on kernel panics and to “fast forward” through the time-
consuming parts of test cases that are repeatedly executed.
We evaluated Agamotto in various USB and PCI fuzzing
scenarios with two different fuzzers, and demonstrated the