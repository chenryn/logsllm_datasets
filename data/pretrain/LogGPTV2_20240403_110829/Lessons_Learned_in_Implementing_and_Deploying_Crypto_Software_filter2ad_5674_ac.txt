vulnerable  to  a  man-in-the-middle  (MITM)  attack,
however  this  requires  an  active  attack  at  the  time  the
connection  is  established.    This  type  of  attack  is
considerably  more  difficult  than  a  passive  attack
performed  an  arbitrary  amount  of  time  later,  as  is
possible  with  unprotected,  widely-known,  or  poorly-
chosen shared keys, or, worse yet, no protection at all
because a general solution to the problem isn(cid:146)t available
[25].    In  situations  like  this  the  engineering  approach
(within  â€“10%  of  the  target  with  reasonable  effort)  is
often  better  than  the  mathematician(cid:146)s  approach  (100%
accuracy  with  unreasonable  effort,  so  that  in  practice
nothing gets done).
3.4 What Time is it Anyway?
Many  security  protocols,  and  in  particular  almost  all
PKI  protocols  which  deal  with  validity  intervals  and
time periods, assume they(cid:146)re operating in the presence
of  precisely-synchronised  clocks  on  all  systems.    The
fact that this frequently isn(cid:146)t the case was recognised a
decade  ago  both  by  security  researchers  (mostly  as  a
result of Kerberos V4(cid:146)s use of timestamps) [26][27][28]
and  by  implementers  of  post-Kerberos  V4  protocols
such as IBM(cid:146)s KryptoKnight, which replaced the time-
stamps  with  nonces  [29][30][31][32],  Bell-Atlantic(cid:146)s
Yaksha  [33][34],  and  to  some  extent  Kerberos  V5,
which  allows  for  (but  doesn(cid:146)t  require)  nonces  [35].
More recently, one of the few published papers on PKI
implementation  experience  pointed  out  the  problems
inherent in using timestamps for synchronisation in the
CMP PKI protocol [36].
The  author  has  seen  Windows  machines  whose  time
was out by tens of minutes (incorrect settings or general
clock  drift),  one  or  more  hours  (incorrect  settings  or
incorrect  time  zone/daylight  savings  time  adjustment),
one  or  more  days  (incorrect  settings  or  incorrect  time
zone,  for  example  a  machine  in  New  Zealand  set  to
GMT), and various larger units (weeks or months).  In
the  most  extreme  case  the  time  was  out  by  several
decades  but  wasn(cid:146)t  noticed  by  the  user  until  cryptlib
complained  about  a  time  problem  while  processing
certificates with a known validity period.  In addition to
the basic incorrect time problems, combinations such as
an offset of one day + one hour + 15 minutes have been
spotted.
In addition to problems due to incorrect settings, there
are  also  potential  implementation  problems.    One  PKI
pilot  ran  into  difficulties  because  of  differences  in  the
calculation  of  offsets  from  GMT  in  different  software
packages  [37].    Time  zone  issues  are  extremely
problematic  because  some  operating  systems  handle
them  in  a  haphazard  manner  or  can  be  trivially  mis-
configured  to  get  the  offset  wrong.    Even  when
everything  is  set  up  correctly  it  can  prove  almost
impossible to determine the time offset from a program
in one time zone with daylight savings time adjustment
and a second program in a different time zone without
daylight savings time adjustment.
A further problem with a reliance on timestamps is the
fact  that  it  extends  the  security  baseline  to  something
which  is  not  normally  regarded  as  being  security-
relevant,  and  which  therefore  won(cid:146)t  be  handled  as
carefully  as  obviously-security-related  items  such  as
passwords  and  crypto  tokens.    To  complicate  things
further,  times  are  often  deliberately  set  incorrectly  to
allow expired certificates to continue to be used without
paying for a new one, a trick which shareware authors
countered  many  years  ago  to  prevent  users  from
running  trial  versions  of  software  indefinitely.    For
example Netscape(cid:146)s code signing software will blindly
trust the date incorporated into a JAR file by the signer,
allowing  expired  certificates  to  be  rejuvenated  by
backdating the signature generation time.  It would also
be possible to resuscitate a revoked certificate using this
trick,  except  that  the  software  doesn(cid:146)t  perform
revocation checking so it(cid:146)s possible to use it anyway.
Don(cid:146)t incorporate the system clock (or the
other  parties(cid:146)  system  clocks)  in  your
security  baseline.    If  you  need  synchro-
nisation, use nonces.
If some sort of timeliness guarantees are required, this
can still be achieved even in the presence of completely
desynchronised clocks by using the clock as a means of
measuring  the  passage  of  time  rather  than  as  an
absolute  indicator  of  time.    For  example  a  server  can
indicate to a client that the next update will take place
15  minutes  after  the  current  request  was  received,  a
quantity  which  can  be  measured  accurately  by  both
sides  even  if  one  side  thinks  it(cid:146)s  currently  September
1986.    To  perform  this  operation,  the  client  would
submit  a  request  with  a  nonce,  and  the  server  would
respond with a (signed or otherwise integrity-protected)
reply  containing  a  relative  time  to  the  next  update.    If
the  client  doesn(cid:146)t  receive  the  response  within  a  given
time,  or  the  response  doesn(cid:146)t  contain  the  nonce  they
sent,  then  there(cid:146)s  something  suspicious  going  on.    If
everything is OK, they know the exact time (relative to
their  local  clock)  of  the  next  update,  or  expiry,  or
revalidation.    Although  this  measure  is  simple  and
obvious, the number of security standards which define
mechanisms  which  assume  the  existence  of  perfectly
synchronised  clocks  for  all  parties  is  somewhat
worrying.
In  the  presence  of  arbitrary  end  user
systems,  relative  time  measures  work.
Absolute time measures don(cid:146)t.
For  non-interactive  protocols  which  can(cid:146)t  use  nonces
the  solution  becomes  slightly  more  complex,  but  can
generally  be  implemented  using  techniques  such  as  a
one-off online query, or time-stamping [38].
3.5 RSA in CBC Mode
When  the  RSA  algorithm  is  used  for  encryption,  the
operation  is  usually  presented  as  (cid:147)encrypting  with
RSA(cid:148).  The obvious consequence of this is that people
try  to  perform  bulk  data  encryption  using  pure  RSA
rather  than  using  it  purely  as  a  key  exchange
mechanism for a fast symmetric cipher.  In most cases
this misunderstanding is quickly cleared up because the
crypto toolkit API makes it obvious that RSA can(cid:146)t be
used that way, however the JCE API, which attempts to
provide a highly orthogonal interface to all ciphers even
if  the  resulting  operations  don(cid:146)t  make  much  sense,
allows  for  bizarre  combinations  such  as  RSA  in  CBC
mode  with  PKCS  #5  padding  alongside  the  more
sensible  DES  alternative  with  the  same  mode  and
padding (CBC and PKCS #5 are mechanisms designed
for use with block ciphers, not public-key algorithms).
As a result, when a programmer is asked to implement
RSA encryption of data, they implement the operation
exactly  as  the  API  allows  it.    One  of  the  most
frequently-asked  questions  for  one  open-source  Java
crypto  toolkit  covers  assorted  variations  on  the  use  of
bulk  data  encryption  with  RSA,  usually  relating  to
which (block cipher) padding or chaining mode to use,
but eventually gravitating towards (cid:147)Why is it so slow?(cid:148)
once the code nears completion and testing commences.
This  can  lead  to  a  variety  of  interesting  debates.
Typically  a  customer  asks  for  (cid:147)RSA  encryption  of
data(cid:148),  and  the  implementers  deliver  exactly  that.    The
customer  claims  that  no-one  with  an  ounce  of  crypto
knowledge1  would  ever  perform  bulk  data  encryption
1 Equivalent to 31 grams of crypto knowledge, being
worth its weight in gold.
with  RSA  and  the  implementers  should  have  known
better,  and  the  implementers  claim  that  they(cid:146)re
delivering  exactly  what  the  customer  asked  for.
Eventually the customer threatens to withhold payment
until the code is fixed, and the implementers sneak the
changes in under (cid:147)Misc.Exp.(cid:148) at five times the original
price.
Don(cid:146)t  include  insecure  or  illogical
security mechanisms in your crypto tools.
3.6 Left as an Exercise for the User
Crypto  toolkits  sometimes  leave  problems  which  the
toolkit  developers  couldn(cid:146)t  solve  themselves  as  an
exercise  for  the  user.    For  example  the  gathering  of
entropy data for key generation is often expected to be
performed  by  user-supplied  code  outside  the  toolkit.
Experience  with  users  has  shown  that  they  will
typically go  to any lengths  to  avoid having  to  provide
useful  entropy  to  a  random  number  generator  which
relies  on  this  type  of  user  seeding.    The  first  widely-
known case where this occurred was with the Netscape
generator,  whose  functioning  with  inadequate  input
required  the  disabling  of  safety  checks  which  were
designed  to  prevent  this  problem  from  occurring  [39].
A  more  recent  example  of  this  phenomenon  was
provided  by  an  update  to  the  SSLeay/OpenSSL
generator,  which  in  version  0.9.5  had  a  simple  check
added to the code to test whether any entropy had been
added  to  the  generator  (earlier  versions  would  run  the
pseudo-random number generator (PRNG) with little or
no real entropy).  This change lead to a flood of error
reports  to  OpenSSL  developers,  as  well  as  helpful
suggestions  on  how  to  solve  the  problem,  including
seeding  the  generator  with  a  constant  text  string
[40][41][42],  seeding 
it  with  DSA  public  key
components  (whose  components  look  random  enough
to fool entropy checks) before using it to generate the
corresponding  private  key  [43],  seeding  it  with
consecutive  output  byes  from  rand()[44],  using  the
executable  image  [45],  using  /etc/passwd [46],  using
/var/log/syslog [47],  using  a  hash  of  the  files  in  the
current  directory  [48],  creating  a  dummy  random  data
file and using it to fool the generator [49], downgrading
to  an  older  version  such  as  0.9.4  which  doesn(cid:146)t  check
for  correct  seeding  [50],  using  the  output  of  the
unseeded generator to seed the generator (by the same
person  who  had  originally  solved  the  problem  by
downgrading to 0.9.4, after it was pointed out that this
was  a  bad 
the  string
(cid:147)0123456789ABCDEF0(cid:148)  [52].    Another  alternative,
suggested  in  a  Usenet  news  posting,  was  to  patch  the
code  to  disable  the  entropy  check  and  allow  the
generator  to  run  on  empty  (this  magical  fix  has  since
been  independently  rediscovered  by  others  [53]).    In
idea)  [51],  and  using 
later versions of the code which used /dev/random if it
was present on the system, another possible fix was to
open a random disk file and let the code read from that
thinking it was reading the randomness device [54].  It
is likely that considerably more effort and ingenuity has
been  expended 
the  generator
incorrectly than ever went into doing it right.
towards  seeding 
The  problem  of  inadequate  seeding  of  the  generator
became  so  common  that  a  special  entry  was  added  to
the  OpenSSL  frequently-asked-questions  (FAQ)  list
telling  users  what  to  do  when  their  previously-fine
application  stopped  working  when  they  upgraded  to
version 0.9.5 [55],  and  since  this  still  didn(cid:146)t  appear  to
be sufficient later versions of the code were changed to
display the FAQ(cid:146)s URL in the error message which was
printed  when  the  PRNG  wasn(cid:146)t  seeded.    Based  on
comments  on  the  OpenSSL  developers  list,  quite  a
number of third-party applications which used the code
were experiencing problems with the improved random
number  handling  code  in  the  new  release,  indicating
that 
low-security
cryptovariables  and  probably  had  been  doing  so  for