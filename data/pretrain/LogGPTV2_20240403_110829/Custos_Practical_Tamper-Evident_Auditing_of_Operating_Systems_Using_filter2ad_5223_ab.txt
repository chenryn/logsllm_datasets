ﬁcation of subsets of log entries without
the need to
possess the entire log history. This permits audits over
a speciﬁc time span of interest. Further, this property aids
attack reconstruction by attributing integrity violations to
a speciﬁc time span in the log history.
G4 Log Availability. In addition to detecting violations of
the system should provide assurance of
log integrity,
2CUSTOS’ security in the context of micro-architectural side channels
reduces to software in the TEE being able to protect secret keys during
cryptographic routines (e.g., when calculating digital signatures), which is a
well-studied and orthogonal problem [122], [103], [18], [12], [129], [125].
Fig. 1: Overview of CUSTOS’ components. Each rectangle represents
a host. Hosts record logs using CUSTOS’ Logger (Section V). A shows
a centralized auditing scenario (Section VI), where one central server
(Auditor) audits the logs of other hosts and reports violations to the
system administrator. B shows a decentralized auditing scenario (Sec-
tion VII) where logging hosts also run CUSTOS’ Auditor component
and audit each other in a peer-to-peer fashion.
log availability. Speciﬁcally, the system should allow to
preserve and retrieve copies of historic, integrity-veriﬁed
log data describing pre-compromise events.
G5 Minimal Invasiveness. The system must interoperate with
commodity audit frameworks, avoid changes to the un-
derlying OS, work efﬁciently enough to be deployed on
systems under heavy load, and preserve compatibility with
upstream log analysis applications (e.g., [115]).
3) Design Challenges: Providing the above properties is
challenging given our threat model. Let us consider exist-
ing schemes that satisfy G2 (third-party veriﬁability). These
schemes fall short of achieving our other goals by trading off
performance (violating G5) or security (violating G1).
For example, existing forward-secure signature schemes
relying on the notion of epoch (e.g., [73], [44], [41]) fully
achieve G1 only when conﬁgured to generate signatures at the
granularity of one log event (epoch = 1), but generating a
new key and/or signature per log event incurs impractically
large computational costs (violating G5). On the other hand,
when epoch = n the most recent pre-compromise events
remain vulnerable. That is, if the attacker achieved full sys-
tem compromise before the n-th event of the current epoch
occurred,
then they would obtain the current key and be
able to forge integrity proofs for all pre-compromise events
belonging to the current epoch. Such a conﬁguration would
thus fail to provide G1. Moreover, schemes based on forward-
secure sequential aggregate signatures (e.g., [73], [128]) fail to
provide G3 (ﬁne-grained audits) in that they require the entire
log history for veriﬁcation.
While the aid of trusted hardware (as in [57], [89], [111])
can help overcome these issues (e.g., by protecting the secrecy
of the current key after full system compromise), it is not
a panacea. Interacting with a TEE still requires addressing
attack vectors such as rollback attacks and protocol termination
3
LoggerAuditorAuditorLoggerAuditorLoggerAuditorA)B)LoggerLoggerLoggerNotation
H
Σ
m1(cid:107)m2
(cid:104)sk, pk(cid:105)
Me
TABLE I: Summary of notation and semantics for CUSTOS’ protocols.
Description
An incremental cryptographic hash-function with methods Init, Update, Final.
Init() initializes and returns a hash context.
Update(hash, data) updates the hash context hash with data.
Final(hash) generates the hash digest h(hash).
A digital signature scheme with methods KeyGen, Sign, Verify.
KeyGen() generates an asymmetric key pair (cid:104)sk, pk(cid:105), with sk private key and pk public key.
Sign(sk, m) generates σsk(m) by signing message m with sk.
Verify(pk, m, σsk(m)) returns true if σsk(m) is a valid signature over m made with sk, false otherwise.
Concatenation of m1 and m2.
Uniquely-identifying keypair for CUSTOS instance. Generated with Σ.
Ordered set of non-overlapping consecutive log entries belonging to a block with unique ID e.
Seal(in, out)
Unseal(in, out)
CreateMC()
IncrementMC(mcID)
ReadMC(mcID)
DestroyMC(mcID)
TEE function. Seals the given input data in into the encrypted output data out .
TEE function. Attempts to unseal the given encrypted input data in into the output data out. Returns −1 if the
unsealing fails (e.g. the sealed data was tampered with).
TEE function. Initializes a monotonic counter with ID mcID and value mc = 0. Returns the tuple (cid:104)mcID, mc(cid:105).
TEE function. Increments by one the value of the monotonic counter with ID mcID.
TEE function. Reads and returns the value of the monotonic counter with ID mcID.
TEE function. Destroys the monotonic counter with ID mcID.
attacks, and accounting for these issues often leads to large
overheads [46], [78], [80]. However, as hosts can generate
hundreds of thousands of system calls per second [24], sat-
isfying G5 necessitates low overheads. In addition to perfor-
mance challenges, TEEs also pose reliability challenges. For
example, hardware monotonic counters (updated once every
50 log events in [57]) are known to become unusable after
approximately one million uses due to the wear-out of non-
volatile memory [78]. Another limitation of TEEs is the limited
memory available to enclaves (e.g., 128 MB in SGX), making
them unusable to store large amounts of log messages.
IV. SYSTEM OVERVIEW
In light of the inability of prior work to meet our goals,
we now present the design of CUSTOS, an efﬁcient and secure
solution for the tamper-evident
logging problem. CUSTOS
enables the detection of tampering in system logs through
the introduction of the components described below. A visual
diagram of these components is provided in Figure 1.
1) Tamper-Evident Logger (Section V): As log events are
generated by the operating system,
they are processed by
an underlying audit framework3 that is minimally-modiﬁed
to efﬁciently generate proofs of log integrity. Upon creation,
log events are hashed inside the enclave, and the enclave
asynchronously signs these hashes in response to periodic
audits. The code and data (keys) responsible for producing
these signatures are partitioned from the rest of the framework
and executed within a trusted enclave. For proof veriﬁcation,
the Logger publishes its public key, which is bound to the
identity of the enclave.
3In this work, underlying audit framework refers to the software which
receives and records the log events generated by the OS.
2) Centralized Auditing (Section VI): Log tampering is
discovered through auditing. To this end, we introduce two
auditing protocols for CUSTOS. Our ﬁrst auditing protocol is
designed to support the prevailing common practice for logging
in large organizations, which is is to transmit log events to a
central storage server. The central server (Auditor) obtains logs
and proofs from a Logger host by issuing an audit challenge
to it. The Logger sends a response to the audit challenge
that includes the logs and their associated integrity proofs.
The Auditor uses these proofs to check the integrity of the
logs included in the response, sending a security alert to the
administrator if the audit fails.
3) Decentralized Auditing (Section VII): A centralized log
server creates a single point of failure, which could con-
ceivably be targeted by attackers after perimeter defenses are
breached. Thus, centralized auditing jeopardizes G4 and also
creates scalability issues. To address these limitations, we
present a decentralized variant of our audit protocol. Here, all
network nodes include an Auditor component running inside
the enclave of the host. The Auditor randomly initiates audit
challenges with a parameterizable number of its peers over
a speciﬁed time period. Our protocols further support secure
log replication with parameterizable redundancy and include a
parallelized log reconstruction algorithm.
V. TAMPER-EVIDENT LOGGER
We now describe CUSTOS’ tamper-evident logging pro-
tocol in its ﬁve routines: (1) Initialization; (2) Startup; (3)
Logging; (4) Commitment; and (5) Shutdown. Each of these
routines corresponds to a call to the Logger application running
inside the trusted enclave. Table I explains the notation and
TEE functions we will use in our protocol descriptions.
4
Algorithm 1: Initialization Phase
Output: sealed-key-id, sealed-e
(cid:104)sk, pk(cid:105) ← Σ.KeyGen() ;
(cid:104)mcID, mc(cid:105) ← CreateMC();
e ← 0;
Seal((cid:104)sk, mcID(cid:105), sealed-key-id);
Seal((cid:104)e(cid:107)mc(cid:107)mcID(cid:105), sealed-e);
// pk is published
Algorithm 2: Startup Phase
Input: sealed-key-id, sealed-e
ret1 ← Unseal(sealed-key-id,(cid:104)sk, mcID(cid:105));
if ret1 == −1 then
raise an error;
mc ← ReadMC(mcID);
ret2 ← Unseal(sealed-e,(cid:104)e(cid:107)mce(cid:107)mcIDe(cid:105));
if ret2 == −1 ∨ mce (cid:54)= mc ∨ mcIDe (cid:54)= mcID then
raise an error;
hash ← H.Init(); (cid:111)
IncrementMC(mcID);
e ← e + 1;
StartNewBlock()
1) Initialization phase: Algorithm 1 shows the initializa-
tion phase, used when CUSTOS is deployed on the host. This
phase starts with creating an asymmetric key pair (cid:104)sk, pk(cid:105) for
the Logger. Next, the TEE is used to initialize a new monotonic
counter with UUID and value (cid:104)mcID, mc(cid:105), respectively, and a
block ID variable (e) is initialized to zero, which will be the
index of the ﬁrst block of logs signed with sk. The TEE is then
used to seal these values so that they can be stored on disk;
they will be unsealed by the Logger during its startup phase.
pk and sealed-key-id are also copied onto an administrative
machine for key management and recovery purposes.
2) Startup phase: Algorithm 2 describes the startup phase,
which is invoked once per application startup. This phase starts
with unsealing the previously sealed key, monotonic counter
ID, and block ID, and ensuring the freshness of the block
ID (by checking that the mc attached to sealed-e is up-to-
date).4 The Logger then increments the value of the monotonic
counter to mark the beginning of a new session. Finally, a
new block is started and an incremental hash is initialized.
The Logger maintains the key, monotonic counter, block ID,
and incremental hash in enclave-protected memory throughout
its execution until the shutdown phase is invoked. Once this
phase is complete, the Logger is ready to receive log events
from the underlying audit framework.
3) Logging phase: Algorithm 3 shows the logging phase,
which is invoked each time the audit framework produces
a new log event. As moderately loaded hosts can produce
hundreds of thousands of system calls per second [24], per-
formance is paramount in this routine. CUSTOS judiciously
minimizes the cost of this phase by having it use a single,
efﬁcient operation: updating the current block’s hash value
with the new log event.
4In case of corrupted or stale data, the Logger will raise an error and will
need to be re-initialized. We discuss how CUSTOS supports recovery from
errors in Appendix A.
5
Algorithm 3: Logging Phase
Input: A log message m
H.Update(hash, m);
// update the hash
Algorithm 4: Commitment Phase
Output: e, σsk(hashMe )
H.Update(hash, e);
hashMe ← H.Final(hash);
σsk(hashMe) ← Σ.Sign(sk, hashMe )
StartNewBlock();
(cid:41)
Algorithm 5: Shutdown Phase
Output: sealed-e, e, σsk(hashMe)
CompleteBlock();
Seal((cid:104)e(cid:107)mc(cid:107)mcID(cid:105), sealed-e);
CompleteBlock()
4) Commitment phase: The commitment phase, shown in
Algorithm 4, is invoked when the Logger receives an audit
challenge for the current block:
this process will become
clearer when we introduce our audit protocol in Section VI.
During this phase, the Logger signs the incremental hash that
has been generated over the current block of logs (with block
ID e). Finally, a new block is started. The output signature can
then be stored together with the logs and used for auditing
purposes. Observe that the size of each block thus depends on
the frequency of the audits.
5) Shutdown phase: Algorithm 5 describes the Shutdown
phase. This phase is invoked when the Logger application is
terminated. In this phase, the Logger must complete the current
block (regardless of whether an audit challenge was received)
and seal the current block ID e together with the current value
and ID of the monotonic counter. This phase ensures that (1)
all log entries up to the moment of shutdown are successfully
signed and (2) when the Logger is started up again it can
continue with block ID e + 1.
VI. CENTRALIZED AUDITING
In large organizations, it is common practice to periodically
transmit system logs to a central storage server. Once the logs
are extracted from the host, they can be analyzed by Secu-
rity Information and Event Management (SIEM) products or
retained for forensic analysis. In this section, we demonstrate
how CUSTOS can be suitably incorporated into this workﬂow
through the introduction of an audit protocol, which serves
to ensure that logs were not manipulated between capture and
transmission to the central server. An overview of this protocol
can be found in Figure 2. The procedure works as follows:
1) The central storage server (Auditor) initiates an audit by
sending a signed audit challenge to the Logger. An audit
challenge message includes a challenge ID cID, which
is a nonce, and an interval of log blocks deﬁned by its
extremities b1 and b2 (with b1 ≤ b2). If b2 is unspeciﬁed,
Auditor
Logger
b1 = e − 2
b2 = Ø
cID, b1, b2,
σska (cID(cid:107)b1(cid:107)b2)
msg = Mb1 , σskl (Mb1 ), . . . , Mb2 , σskl (Mb2 ),
σskl (cID(cid:107)b1(cid:107)b2(cid:107)msg)
result(b1,b2),
σska (result(b1,b2))
Fig. 2: Protocol summary of an audit. The Auditor initiates an audit
challenge between blocks with IDs b1 and b2. The Logger transmits
the inclusive range of log events between the IDs with their associated
integrity proofs. The Auditor notiﬁes the Logger of the result after
storing and verifying the logs. (cid:104)ska, pka(cid:105) denotes the key pair of the
Auditor, and (cid:104)skl, pkl(cid:105) denotes the key pair of the Logger.
the audit challenge represents a request for the Logger to
commit and transmit its current log block.5