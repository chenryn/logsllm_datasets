fori in range(128):
v1=ul（v1-（（v0+sum）（16*v0+key[2])^（v0>>5）+key[3])））
v0=ul(v0-（(v1+sum）(16*v1+key[0j)(（v1>>5）+key[1j）))
sum=ul(sum-0x9e3779b9）
res = %08x%08x' %(v0, v1)
returnres
with open(./debug,rb) as f:
datas=f.read()[0x7030:0x7030+0x10]
d2=*join（chr（ord（d）^0x31)fordin datas）
key=[0x112233,0x44556677,0x8899aabb,0xccddeeff]
flag=retea（d2[0:8],key）
---
## Page 303
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
303/1144
flag +=retea(d2[8:16],key)
print flag
---
## Page 304
CTF特训营：技术详解、解题方法与
10.3.6虚拟机保护
304/1144
10.3.6虚拟机保护
代码字节流，在具体执行时再对这些伪代码进行逐一翻译、解释，逐
步还原为原始代码并执行。
这段用于翻译伪代码并负责具体执行的子程序就称为虚拟机
（VM，好似一个抽象的CPU）。它以一个函数的形式存在，函数的参
数就是字节码的内存地址。
1.基本思路
像一些商用的保护软件（如Vmprotect、themida等）都采用了虚
拟机保护技术，CTF中也多次出现过虚拟机保护的程序，不过相对来
说，虚拟机的指令集较少，因此可以在有限的时间内分析出来。
对于一个虚拟机而言，它定义了一套自已的指令集架构
（ISA），包括寄存器集、内存和指令集。起初，通常会有一个vm_init
阶段完成初始化操作，对寄存器进行初始化，对内存进行加载；然后
进入vm_run阶段，开始取指令、解析指令，然后根据操作码opcode
---
## Page 305
CTF特训营：技术详解、解题方法与
10.3.6虚拟机保护
305/1144
分派处理函数。
常见的解题思路为：首先逆向虚拟机，得到虚拟机的ISA，然后
编写相应的反汇编工具对虚拟机指令进行反汇编，最后分析虚拟机的
反汇编代码。
2.实例分析
本节所列举的实例来自2015zctfsimulator，题目提供了一个
simulator程序和一个input.bin文件，运行方式为“/simulator
input.bin”。用iDA打开simulator，首先查看main函数，如图10-39所
示，通过简单分析，可以猜测3个子函数的大致功能。
int_cdecl main（int argc,const char **argv,const char **envp)
intresult;//eax@2
if（argc>1）
load_mem(argv[1]);
vm_init（）;
result=1;
vm_run（）;
图10-39simulator的main函数
其中，Vm_init是对VM的寄存器进行初始化，反编译代码如图
10-40所示。load_mem是将文件argv[1]中的内容读到内存中，所以主
---
## Page 306
CTF特训营：技术详解、解题方法与
10.3.6虚拟机保护
306/1144
要是分析vm_run函数。在分析vm_run函数的过程中，可以识别出各
个VM寄存器所表示的意义。比如本题中，分析得到的vm_init如图
10-40所示。可以看出VM有16个通用寄存器vreg、一个指令指针寄存
器vpc、一个堆栈寄存器vsp和一个状态标识寄存器v_flag。
void *_fastcall vm_init()
signed int i;//[sp+Ch] [bp-4hj@1
for（i=0;i0x4000）
perror（4200831LL);
_exit（);
opcode=read_byte（)&0x3F;
if
（opcode>6）&3
opcode=opcode&0x3f
if opcode==0:
print %08x: initvm%real_pc
break
elif opcode == 1:
if size == 0:
reg1_index=get_byte()
reg2_index=get_byte()
print%08x:movreg%d,reg%d%(real_pc,reg1_index,reg2_index)
else:
reg1_index=get_byte()
imm = get_dword()
print%08x:movreg%d,%08x%(real_pc,reg1_index,imm)
elif opcode ==2:
reg1_index= get_byte()
reg2_index=get_byte()
size_dict={0:byte，1:word’2:dword}
print%08x:mov reg%d, %s [reg%d]%(real_pc,reg1_index,size_dict[size],
reg2_index)
elif opcode ==3:
reg1_index= get_byte()
reg2_index=get_byte()
sizedict={0:byte'，1:word’，2:dword”}
print %08x:mov %s [reg%d], reg%d%(real_pc, size_dict[size],reg2_index,
reg1_index)
elif （opcode == 4)1(opcode ==5):
reg1_index=get _byte()
mnemonic_dict={4:pop',5:push}
print%08x:%s reg%d%(real_pc,mnemonic_dict[opcode],reg1_index)
elif(opcode==6)1(opcode==7):
mnemonic_dict ={6:printf,7:'scanf}
reg1_index=get_byte()
if size == 0:
print “%08x: %s reg%d #c' %(real_pc, mnemonic_dict[opcode], reg1_index)
elif size == 1:
(xepub[podo]puoweude)%p#p%be %x0% ud
elif size == 2:
print“%08x:%s reg%d#x%(real_pc,mnemonic_dict[opcode],reg1_index)
elif size == 3:
print %08x: %s byte [reg%d] %(real_pc, mnemonic_dict[opcode], reg1_
index)
---
## Page 311
CTF特训营：技术详解、解题方法与
10.3.6虚拟机保护
311/1144
elif opcode ==8:
print%08x:ret'%real_pc
elif opcode==9:
imm = get_dword()
jcc_mnemonic_dict={0:jmp，1:jz，2:jnz，3:j1}
print%08x:%s %08x'%（real_pc,jcc_mnemonic_dict[size],imm)
elif opcode == 10:
reg1_index=get_byte()
jcc_mnemonic_dict = {0: jmp',1:jz, 2: jnz, 3: j1}
print%08x:%sreg%d%（real_pc,jcc_mnemonic_dict[size]，reg1_index)
elif（opcode>=11）&（opcode<=16）:
mnemonic_dict ={11:add,12:sub’,13:and,14:or,15:xor,16:cmp′}
reg1_index=get_byte()
if size == 0:
reg2_index= get _byte()
print%08x:%s reg%d，reg%d’%（real_pc,mnemonic_dict[opcode],reg1_
index,reg2_index)
else:
imm=get_dword()
print%08x:%sreg%d, %08x%（real_pc,mnemonic_dict[opcode],reg1
index, imm)
elif opcode ==17:
print %08x:ret'%real_pc
elif opcode==18:
reg1_index=get_byte()
reg2_index=get_byte()
size_dict={0:byte'，1:word，2:‘dword}
print%08x:movreg%d,%s[reg%d]%（real_pc,reg1_index, size_dict[size],
reg2_index)
elif opcode == 19:
reg1_index=get_byte()
reg2_index=get_byte()
if size == 0:
(xapubxepubede)be [belq ow :x0%,u
elif size == 1:
print %08x: mov word[reg%d], reg%d %(real_pc,reg2_index, reg1_index)
elif size == 2:
print%08x:mov dword[reg%d],reg%d%（real_pc,reg2_index,reg1
index)
elif opcode == 20:
if size ==0:
reg1_index=get_byte()
print%08x:callreg%d%（real_pc,reg1_index)
else:
---
## Page 312
CTF特训营：技术详解、解题方法与
10.3.6虚拟机保护
312/1144
imm=get_dword()
print“%08x:call%08x%（real_pc,imm)
elif opcode ==21:
print%08x:nop'%real_pc
elif （opcode==22)1（opcode==23）:
mnemonic_dict={22:inc,23:'dec}
reg1_index=get _byte()
print%08x:%sreg%d%（rea_pc,mnemonic_dict[opcode],reg1_index)
elif opcode==24:
reg1_index= get_byte()
reg2_index=get _byte()
print%08x:testreg%d，reg%d%（real_pc,reg1_index,reg2_index)
else:
print invalid opcode:%x%opcode
raise Exception('error)
pc=0
with open(input.bin','rb') as f:
mem =f.read()
disasm()
反汇编成功之后，对反汇编出来的虚拟机汇编进行分析，具体过
程不再详述。
---
## Page 313
CTF特训营：技术详解、解题方法与
10.4脚本语言的逆向313/1144
10.4脚本语言的逆向
C#、Java等解释型语言编译后会变为学节码，幸运的是，大多
数学节码与源码存在一一对应的关系，而自保留了变量名、定义、函
数名等信息，对此类语言的逆向往往比C要简单轻松。
相比C/C++这一类编译运行类程序，依靠Java虚拟机、.NET、
Python解释器等运行程序，由于所生成的字节码（供虚拟机解释运
行）仍然具有高度抽象性，所以对这类程序逆向得到的伪代码的可读
性更强，有时甚至接近于源代码。所以对这类语言的可执行程序主要
是恢复出可读代码（可以通过阅读这些代码来梳理程序的运行过
程）。本节将主要介绍还原这三种语言的源代码的工具，具体的源代
码分析过程则不再详细介绍
---