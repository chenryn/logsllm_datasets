# 前言
在大学期间，我主要学习了C++、PHP和Python等面向对象编程语言，但对Java及其安全领域一直没有深入接触。因此，在看到同事们讨论Java漏洞利用时，我无法参与其中。为了弥补这一知识空白，我决定利用暑假最后的几周时间，从零开始学习Java安全，并选择复现Struts2 S2-001漏洞作为入门案例。

由于我在Java Web开发方面缺乏基础，整个过程遇到了不少挑战，包括一些看似简单的问题也花费了很多时间才得以解决。最终，我还是成功完成了漏洞的复现与分析工作。接下来，我将分享从环境搭建到漏洞分析的具体步骤。

# 环境搭建

### 开发平台及工具
- 操作系统：Windows 10
- 应用服务器：Apache Tomcat 9.0.7
- 集成开发环境：IntelliJ IDEA

#### 创建项目
1. 在IntelliJ IDEA中创建一个新的项目。
2. 下载Struts2所需的jar包并放置于`WEB-INF/lib`目录下。
3. 修改`web.xml`文件以配置Struts2过滤器：
   ```xml
   <filter>
       <filter-name>struts2</filter-name>
       <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
   </filter>
   <filter-mapping>
       <filter-name>struts2</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
   ```
4. 创建`index.jsp`和`welcome.jsp`页面。
5. 在`src`目录下新建`com.demo.action`包，并添加`LoginAction.java`类实现登录逻辑。
6. 添加`struts.xml`配置文件来映射动作。

注意：如果IDE显示找不到某些源码文件，请确保已经正确设置了项目的视图模式（例如点击"Project Files"）。

#### 导入依赖
通过IntelliJ IDEA的“File > Project Structure”选项，将之前下载的所有jar包添加至项目的库路径中。完成设置后，执行构建命令使更改生效。

#### 启动应用
- 配置Tomcat服务器的相关调试参数。
- 启动项目并通过浏览器访问http://localhost:8888/（端口号可能因个人设置而异），若能看到预期界面则表明环境配置成功。

# 漏洞复现
当尝试使用错误的用户名或密码登录时，系统会直接回显这些输入值。攻击者可以利用此特性，通过构造特定格式的数据触发OGNL表达式解析，进而执行任意代码。例如：
- 获取Tomcat安装目录：`%{"tomcatBinDir{"+@java.lang.System@getProperty("user.dir")+"}"}`
- 执行操作系统命令：修改如下模板中的`whoami`为所需命令即可。
  ```java
  %{...}
  ```

# OGNL简介
OGNL (Object-Graph Navigation Language) 是一种强大的表达式语言，允许用户通过简洁的语法访问对象属性、调用方法以及遍历对象结构。其核心要素包括：

- **表达式**：定义了要执行的操作内容。
- **根对象**：指定了操作的目标实体。
- **上下文环境**：提供了额外的信息或辅助变量，影响着表达式的执行结果。

此外，OGNL支持多种操作符如算术运算、逻辑判断等，使其成为一个非常灵活且功能丰富的EL实现方案。