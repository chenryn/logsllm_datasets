### 优化后的文本

#### 图6：[EC2] 使用Varys在每流公平性基础上改进作业和通信完成时间的平均值和95百分位数
- **5.9.2**
- **7.8.1**
- **6.7.1**
- **2.6.19**
- **95百分位数**
- **4.8.3**
- **6.1.3**
- **0.7.1**
- **5.7.1**
- **5.8.1**
- **4.7.1**

**改进倍数 (Improvement Factor) = 当前持续时间 / 修改后持续时间**

#### (b) 通信时间上的改进
图6展示了在EC2实验中，通过使用Varys进行跨协同流调度，通信主导型作业的平均和95百分位数完成时间分别减少了最多2.5倍和2.94倍。相应地，平均和95百分位数的平均CCT（通信时间）分别提高了最多3.16倍和3.84倍（见图6b）。需要注意的是，不同分组中的平均CCT改进并不相关，因为这更多取决于协同流的特性而不是作业的特性。然而，随着通信占总完成时间的比例增加，作业的完成速度也变得更快。总体来看，端到端的平均完成时间提高了1.25倍，而平均CCT提高了1.85倍；相应的95百分位数改进分别为1.15倍和1.74倍。

#### 图7：[EC2] 不同协同流特性的CCT改进
图7显示了Varys对不同协同流特性的CCT改进情况。由于瓶颈与协同流的长度或宽度没有直接关联，特别是涉及bin-2和bin-3时，对比变得更加困难。我们观察到，在平均CCT方面，bin-1的协同流比bin-4的协同流有更大的改进，尽管它们的95百分位数改进情况相反。这是由于Varys在处理小型协同流时存在协调开销，因此不处理小型协同流以避免固定开销。

#### 图8：[EC2和仿真] Varys、每流公平性和每流优先级方案的CCT分布
- **(a) EC2部署**
- **(b) 仿真**

图8展示了Varys、每流公平性和每流优先级方案在EC2部署和仿真中的CCT分布。注意X轴是对数尺度。

#### 图9：[仿真] 使用跨协同流调度的平均和95百分位数CCT改进
- **30**
- **20**
- **10**
- **0**

**相对于每流优先级（平均）**
**相对于每流优先级（95百分位数）**
**相对于每流公平性（平均）**
**相对于每流公平性（95百分位数）**

当协同流变大时，协同流调度的优势变得更加明显。接下来我们将详细讨论Varys的开销；随后，我们将展示一些仿真结果，进一步揭示在没有协调开销的情况下小规模协同流的性能。

#### 开销
控制平面消息是主要的开销来源。尽可能地将同一端点的多条消息批量处理。在高峰负载下，我们在主节点上观察到的消息吞吐量为每秒4000多条。调度算法在协同流到达或离开时平均需要17毫秒来计算新的调度计划。平均分配新调度计划的时间为30毫秒。

另一个开销来源是同步时间，即在协同流准备好进行调度之前的时间。一个协同流需要等待`numFlows get()`调用；因此，单个延迟的`get()`调用可能会阻塞整个协同流。在我们的实验中，平均同步时间为：

---

通过这些优化，文本变得更加清晰、连贯和专业。希望这些修改对你有所帮助！