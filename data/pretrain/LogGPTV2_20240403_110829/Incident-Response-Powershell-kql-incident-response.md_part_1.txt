::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# Incident Response Part 1: IR on Microsoft Security Incidents (KQL edition) {#incident-response-part-1-ir-on-microsoft-security-incidents-kql-edition .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in
[KQL](/categories/kql/) [Sentinel](/categories/sentinel/) [Defender For
Endpoint](/categories/defender-for-endpoint/) [Incident
Response](/categories/incident-response/)]{.post-category}
:::
::: post-meta-line
 2023-09-29  2291 words   11 minutes 
:::
:::
::: {#content .content}
It always happens on Friday afternoon, a high severity incident is
created just before you want to start your weekend. After you have
triaged the incident you suspect that an threat actor gained access to
your environment. From that moment questions are starting to pop up in
your head; what happened on this device? Are more devices impacted? What
do I need to do to contain the incident? Will I be in time for dinner
with my wife? To answer all those questions I have created an Incident
Response blog series that consists of three parts:
1.  **Incident Response Part 1: IR on Microsoft Security Incidents (KQL
    edition)**
2.  **Incident Response Part 2: [What about the other
    logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}**
3.  **Incident Response Part 3: [Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}**
![/images/kql-incident-response/Incident.png](/svg/loading.min.svg "Alt text"){.lazyload
data-src="/images/kql-incident-response/Incident.png"
data-srcset="/images/kql-incident-response/Incident.png, /images/kql-incident-response/Incident.png 1.5x, /images/kql-incident-response/Incident.png 2x"
data-sizes="auto"}
This week we start with the first part: *IR on Microsoft Security
Incidents (KQL edition)*. The next parts will follow in the upcoming
weeks! In this blog, we discuss how KQL can help answer the questions
you have once an incident has been created. The starting point of the
blog will be a Defender For Endpoint incident that has triggered, based
on that we will discuss the following actions:
1.  [Mayday Mayday Mayday](#mayday-mayday-mayday){rel=""}
2.  [KQL DFIR](#kql-dfir){rel=""}
3.  [Summarize Malicious
    Activities](#summarize-malicious-activities){rel=""}
4.  [Listing Inbound Connections](#listing-inbound-connections){rel=""}
5.  [File Analysis](#file-analysis){rel=""}
6.  [Registry Run Key Forensics](#registry-run-key-forensics){rel=""}
7.  [More IR Queries](#more-ir-queries){rel=""}
8.  [MDE Settings](#mde-settings){rel=""}
Before we dive into the technical aspects of this blog, it is important
to first share some theoretical background on incident response, this is
done based on the [NIST Computer Security Incident Handling
Guide](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf){target="_blank"
rel="noopener noreffer"}. Incident response is often thought of as
something we just do, but it consists of four pillars:
-   Preparation
-   Detection and Analysis
-   Containment, Eradication, and Recovery
-   Post-Incident Activity
Those pillars are phases in your incident response lifecycle. This blog
will focus on the *Detection and Analysis* phase, if you start
implementing some of the items from this blog, you are already working
in the *Preparation* phase! The preparation phase in incident response
is crucial as it lays the foundation for an effective and efficient
response to security incidents. Preparation includes: selecting the
tools, performing training, planning response actions and many others.
For the incident response best practices the [incident response
overview](https://learn.microsoft.com/en-us/security/operations/incident-response-overview){target="_blank"
rel="noopener noreffer"} page by Microsoft can be useful to bookmark!
# Mayday Mayday Mayday
The image below shows the incident that we are dealing with today, one
incident consisting of 19 alerts. Based on the information provided by
Defender For Endpoint we can quickly collect the *Evidence and Response*
to further investigate those activities. This includes information on
the indicators of compromise that are related to this incident, such as
IPs, Hashes and commands. A timeline search could be one of our next
activities to investigate what has happened on the system, but if the
actions are spread over a larger amount of time it can quickly become
infeasible to investigate those activities manually. From now on we move
over to KQL to investigate these activities and in the case of a real
incident, before you move on hit that isolate button!
![Defender For Endpoint Incident](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/alert.png"
data-srcset="/images/kql-incident-response/alert.png, /images/kql-incident-response/alert.png 1.5x, /images/kql-incident-response/alert.png 2x"
data-sizes="auto"}
# KQL DFIR
The [DFIR
Section](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/tree/main/DFIR){target="_blank"
rel="noopener noreffer"} of the GitHub repository is used for most of
the KQL queries. Before we touch base on those queries we first
highlight the variables that are used in the queries. Each query uses
*let* variables as input to scope the results. The variables are most
often the name of the compromised device (or account), in our case that
is testmachine3 and the SearchWindow which is time to look back in the
logs.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let CompromisedDevice = "testmachine3";
let SearchWindow = 48h; //Customizable h = hours, d = days
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
next()
:::
::: details-content
::: admonition-content
IR tip! Use the KQL
[next()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/nextfunction){target="_blank"
rel="noopener noreffer"} function to get the difference between the
current line and the next line. This can be very useful to detect
subsequent actions, due to the limited *timeDiffInMilliseconds*. This
example uses milliseconds, but all other timeframes can also be used.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
DeviceProcessEvents
| where DeviceName == "testmachine3"
| sort by Timestamp asc
| extend timeDiffInMilliseconds = datetime_diff('millisecond', next(Timestamp, 1), Timestamp)
```
:::
:::
:::
:::
# Summarize Malicious Activities
We start of with a KQL query that summarizes all the malicious
activities on a device. The query combines multiple malicious activities
that originate from a compromised device, which are put into one query.
Those activities include:
-   ASR Triggers
-   SmartScreen Events
-   Antivirus Detections
-   Tampering Detections
-   Exploit Guard Triggers
-   AMSI Events
A sample of the
[query](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20ListMaliciousActivities.md){target="_blank"
rel="noopener noreffer"} is shown in the code block below. The query
stacks multiple individual queries and combines them together in the
results using the
[union](https://learn.microsoft.com/nl-nl/azure/data-explorer/kusto/query/unionoperator){target="_blank"
rel="noopener noreffer"} operator. As can already be derived from the
first query is that **preparation is key**, because you do not want to
build those queries after incidents have been triggered. Save yourself
some time to prepare such queries beforehand, your time to respond to
incidents will go down with good preparation.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let ExploitGuardEvents = DeviceEvents
     | where Timestamp > ago(SearchWindow)
     | where DeviceName == CompromisedDevice
     | where ActionType startswith "ExploitGuard"
     | project Timestamp, DeviceName, ActionType, FileName, FolderPath, RemoteUrl;
// List all amsi events
let AMSIEvents = DeviceEvents
     | where Timestamp > ago(SearchWindow)
     | where DeviceName == CompromisedDevice
     | where ActionType contains "Amsi"
     | extend Description = tostring(parse_json(AdditionalFields).Description)
     | project Timestamp, DeviceName, ActionType, Description, FolderPath;
// Combine all results into one output
(union isfuzzy=true
     (ASREvents),
     (SmartScreenEvents),
     (AntivirusDetections),
     (TamperingAttempts),
     (ExploitGuardEvents),
     (AMSIEvents)
     | sort by Timestamp
)
```
:::
The results show that 5 different malicious activities have been
performed. Just running a 'simple' query is quite effective isn't it?
Now it's up to you again, are those activities malicious? Do we need to
run some more queries? (Always a good answer :).)
![List Malicious Activities](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/ListMaliciousActivities.png"
data-srcset="/images/kql-incident-response/ListMaliciousActivities.png, /images/kql-incident-response/ListMaliciousActivities.png 1.5x, /images/kql-incident-response/ListMaliciousActivities.png 2x"
data-sizes="auto"}
The queries that are used in each screenshot can be found in the
[Github](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules){target="_blank"
rel="noopener noreffer"} repository. Just follow the link below, copy
the query and enjoy!
> **KQL Query** [List Malicious
> Activities](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/DFIR/MDE%20-%20ListMaliciousActivities.md){target="_blank"
> rel="noopener noreffer"}
# Listing Inbound Connections
Based on the summarized results we want to get more information from
this device. How did the adversaries gain access to the system? The
query for this section lists all network events with a
*InboundConnectionAccepted* ActionType. That an inbound connection has
been accepted does not necessarily mean that an adversary got access to
your device, because in most cases you first make a connection to a
system and then perform the authentication. In the case of the results
we got, we see a lot of different IPs from a variety of countries have
connected on port 3389 (RDP). Is that a reason for concern? It depends,
the RDP port will probably be open to the internet, but if no
successuccessful full login attempt is made within that same period we
still do not have to fear too much.
![Inbound Connections Accepted](/svg/loading.min.svg){.lazyload
data-src="/images/kql-incident-response/InboundConnections.png"
data-srcset="/images/kql-incident-response/InboundConnections.png, /images/kql-incident-response/InboundConnections.png 1.5x, /images/kql-incident-response/InboundConnections.png 2x"
data-sizes="auto"}