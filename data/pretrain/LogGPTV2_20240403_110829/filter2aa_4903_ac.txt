.Pp
.Dl Usage: .Ar argument ... 
.Bl -tag -width ".Ar file1 file2" -compact -offset 15n
.It Li \&.Ar
.Ar
.It Li \&.Ar file1
.Ar file1
.It Li \&.Ar file1\ .
.Ar file1 .
.It Li \&.Ar file1 file2
.Ar file1 file2
.It Li \&.Ar f1 f2 f3\ :
.Ar f1 f2 f3 :
.It Li \&.Ar file\ )\ )\ ,
.Ar file ) ) ,
.El
.Pp
如果不带参数调用
.Ql \&.Ar
宏, 缺省为
.Ql Ar .
.Ql \&.Ar
宏可以被 (其他宏) 分析和调用.
.Ss 配置定义 (手册第四部分) Configuration Declaration
.Ql \&.Cd
宏用于描述
.Xr config 8
对 设备接口的定义 (手册第四部分).
这个宏 接受 引号内的参数 (只能是双引号).
.Pp
.Bl -tag -width "device le0 at scode?" -offset indent
.It Cd "device le0 at scode?"
来自:
.Ql ".Cd device le0 at scode?" .
.El
.Ss 命令修饰 Command Modifier
命令修饰宏和
.Ql \&.Fl
(标志) 命令相似, 除了
.Ql \&.Cm
宏 不在 任何参数 前 加 短横线 (dash).
传统的标志 以 短横线 开头, 但 一些 命令 或 命令的子集 不用这个.
命令修饰宏 也可以 和 交互命令 结合 使用, 如 编辑命令. 另见
.Sx Flags .
.Ss 已定义的变量 Defined Variables
在 头文件 中 已经 定义了的变量 用
.Ql \&.Dv 
宏说明.
.Pp
.Dl Usage: .Dv defined_variable ... 
.Bl -tag -width ".Dv MAXHOSTNAMELEN" -compact -offset 14n
.It Li ".Dv MAXHOSTNAMELEN"
.Dv MAXHOSTNAMELEN
.It Li ".Dv TIOCGPGRP )"
.Dv TIOCGPGRP )
.El
.Pp
不带参数调用
.Ql \&.Dv
是个错误.
.Ql \&.Dv
宏可以被 (其他宏) 分析和调用.
.Ss Errno's (仅供手册第二部分)
这个
.Ql \&.Er
errno 宏 指明 手册 第二部分, 库函数 的 错误返回值.(译注: 应该是系统调用)
下面的 第二个 例子 显示了
.Ql \&.Er
配合
.Ql \&.Bq
基本正文宏 的 使用, 就象 用在 手册 第二部分 一样.
.Pp
.Dl Usage: .Er ERRNOTYPE ... 
.Bl -tag -width ".Bq Er ENOTDIR" -compact -offset 14n
.It Li \&.Er ENOENT
.Er ENOENT
.It Li \&.Er ENOENT\ )\ ;
.Er ENOENT ) ;
.It Li \&.Bq \&Er ENOTDIR
.Bq Er ENOTDIR
.El
.Pp
不带参数调用
.Ql \&.Er
宏是个错误.
.Ql \&.Er
宏可以被 (其他宏) 分析和调用.
.Ss 环境变量 Environment Variables
.Ql \&.Ev
宏说明一个环境变量.
.Pp
.Dl Usage: .Ev argument ... 
.Bl -tag -width ".Ev PRINTER ) ) ," -compact -offset 14n
.It Li \&.Ev DISPLAY
.Ev  DISPLAY
.It Li \&.Ev PATH\ .
.Ev PATH .
.It Li \&.Ev PRINTER\ )\ )\ ,
.Ev PRINTER ) ) ,
.El
.Pp
不带参数调用
.Ql \&.Ev
宏是个错误.
.Ql \&.Ev
宏可以被 (其他宏) 分析和调用.
.Ss 函数参数 Function Argument
.Ql \&.Fa
宏 用来 说明 在手册的
.Sx 总览 SYNOPSIS
小节 之外的 函数参数, 或者在
.Sx 总览 SYNOPSIS
小节内, 其 参数列表对
.Ql \&.Fn
宏 而言 过长, 并且 必须 使用
.Ql \&.Fo
和
.Ql \&.Fc
宏时.
.Ql \&.Fa
也 有可能 用来 说明 结构成员.
.Pp
.Dl Usage: .Fa function_argument ... 
.Bl -tag -width ".Fa d_namlen\ )\ )\ ," -compact -offset 14n
.It Li \&.Fa d_namlen\ )\ )\ ,
.Fa d_namlen ) ) ,
.It Li \&.Fa iov_len
.Fa iov_len
.El
.Pp
不带参数调用
.Ql \&.Fa
宏是个错误.
.Ql \&.Fa
宏可以被 (其他) 宏分析和调用.
.Ss 函数声明 Function Declaration
.Ql \&.Fd
宏 用于 第二或 第三部分 手册页 的
.Sx 总览 SYNOPSIS
小节.
.Ql \&.Fd
宏 既 不调用 其他宏, 也 不能 被 其他宏调用.
.Pp
.Dl Usage: .Fd include_file (or defined variable)
.Pp
在
.Sx 总览 SYNOPSIS
小节, 如果 已经 说明了 某个 函数, 并且 没有 出现 省略号, 则
.Ql \&.Fd
宏请求 能够 产生 一个 断行.
在 函数 和 函数声明 之间, 垂直方向上 产生 一定的 空白.
.Ss 标志 Flags
.Ql \&.Fl
宏 处理 命令行标志. 它 在 标志前 加一个 短横线
.Ql \- ,
对于 交互命令 标志, 它 不需要 短横线, 可以用
.Ql \&.Cm
(命令修饰 command modifier)
宏替换, 它 没有 短横线.
.Pp
.Dl Usage: .Fl argument ... 
.Bl -tag -width ".Fl \-s \-t \-v" -compact -offset 14n
.It Li \&.Fl
.Fl
.It Li \&.Fl cfv
.Fl cfv
.It Li \&.Fl cfv\ .
.Fl cfv .
.It Li \&.Fl s v t
.Fl s v t
.It Li \&.Fl -\ ,
.Fl - ,
.It Li \&.Fl xyz\ )\ ,
.Fl xyz ) ,
.El
.Pp
如果
.Ql \&.Fl
宏 不带 任何 参数, 将 只产生 一个 短横线, 代表 stdin/stdout.
注意 如果 把 一个 短横线 做为
.Ql \&.Fl
的参数, 结果 会 得到 两个短横线.
.Ql \&.Fl
宏可以被 (其他宏) 分析和调用.
.Ss 函数(库函数) Functions (library routines)
宏 .Fn 是 ANSI C 函数风格 的 模型.
.Bd -literal
Usage: .Fn [type] function [[type] parameters ... 
.Ed
.Bl -tag -width ".Fn int align. .const * char *sptrsxx" -compact
.It Li "\&.Fn getchar"
.Fn getchar
.It Li "\&.Fn strlen ) ,"
.Fn strlen ) ,
.It Li \&.Fn "\\*qint align\\*q" "\\*qconst * char *sptrs\\*q" ,
.Fn "int align" "const * char *sptrs" ,
.El
.Pp
不带参数调用
.Ql \&.Fn
是一个错误.
.Ql \&.Fn
宏可以被 (其他宏) 分析和调用,
注意 任何 对 其他宏 的 调用 应该在
.Ql \&.Fn
宏调用 的 结尾处 给出 标记 (反括弧).
.Pp
对于 八个 参数 以上的 函数 (尽管少见), 可以 用 宏
.Ql \&.Fo
(function open) 和
.Ql \&.Fc
(function close) 配合
.Ql \&.Fa
(function argument) 宏 的 使用, 突破 参数 过多 的 限制, 例如:
.Bd -literal -offset indent
\&.Fo "int res_mkquery"
\&.Fa "int op"
\&.Fa "char *dname"
\&.Fa "int class"
\&.Fa "int type"
\&.Fa "char *data"
\&.Fa "int datalen"
\&.Fa "struct rrec *newrr"
\&.Fa "char *buf"
\&.Fa "int buflen"
\&.Fc
.Ed
.Pp
产生:
.Bd -filled -offset indent
.Fo "int res_mkquery"
.Fa "int op"
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "char *data"
.Fa "int datalen"
.Fa "struct rrec *newrr"
.Fa "char *buf"
.Fa "int buflen"
.Fc
.Ed
.Pp
宏
.Ql \&.Fo
和
.Ql \&.Fc
可以被 (其他宏) 分析和调用. 在
.Sx 总览 SYNOPSIS
小节, 函数 总是 位于 行的开始 处.
如果 在
.Sx 总览 SYNOPSIS
小节 有 一个以上的 函数声明, 而且 函数类型 没有 说明, 则 会产生 一个 断行.
在 函数 和 函数 的 垂直方向 上 产生 一定的 空白. 此时
.Ql \&.Fn
宏 不按 troff 的 行长 检查 单词 边界, 有可能 难看的 从 单词中间 断开.
以后 会 解决 这个 问题.
.Ss 函数类型 Function Type
这个宏 设计 用在
.Sx 总览 SYNOPSIS
小节. 它 可以 毫无困难的 用在 手册页的 其他 地方, 但 它的 主要 目的
是 为 第二 和 第三部分 手册页的
.Sx 总览 SYNOPSIS
小节, 以 核心标准形式 (kernel normal form) 描述 函数类型
(它 导致 断行, 在 下一行 显示 函数 名称).
.Pp
.Dl Usage: .Ft type ... 
.Bl -tag -width "\&.Ft struct stat" -offset 14n -compact
.It Li \&.Ft struct stat
.Ft struct stat
.El
.Pp
.Ql \&.Ft
宏不能被其他宏调用.
.Ss 交互命令 Interactive Commands
宏
.Ql \&.Ic
用于 说明 交互 或 内部命令.
.Pp
.Dl Usage: .Ic argument ... 
.Bl -tag -width ".Ic setenv , unsetenvxx" -compact -offset 14n
.It Li \&.Ic :wq
.Ic :wq
.It Li \&.Ic do while {...}
.Ic do while {...}
.It Li \&.Ic setenv\ , unsetenv
.Ic setenv , unsetenv
.El
.Pp
不带参数调用
.Ql \&.Ic
是个错误.
.Ql \&.Ic
宏可以被 (其他宏) 分析和调用.
.Ss 名称宏 Name Macro
.Ql \&.Nm
宏 用于 说明 文档题目 或 主题. 它的特点 是 能够 记住 调用时 带的 第一个 
参数, 这个 参数 就是 该页的 主题. 当 不带 参数 调用它 时,
.Ql \&.Nm
宏 把 以前 记住的 参数 显示 出来, 可以 为作者 省点劲.
注意: 手册第二部分或第三部分的函数名称, 在
.Sx 名称 NAME
小节 用
.Ql \&.Nm
说明, 在
.Sx 总览 SYNOPSIS
和 其余 小节 用
.Ql \&.Fn
说明. 对于 交互命令, 例如 在
.Xr csh 1
中的
.Ql while
命令, 应该 使用
.Ql \&.Ic
宏.
.Ql \&.Ic
宏和
.Ql \&.Nm ,
宏 非常接近, 只是 它 不能够 记忆 调用时的 参数.
.Pp
.Dl Usage: .Nm argument ... 
.Bl -tag -width ".Nm mdoc.sample" -compact -offset 14n
.It Li \&.Nm mdoc.sample
.Nm  mdoc.sample
.It Li \&.Nm \e-mdoc
.Nm \-mdoc .
.It Li \&.Nm foo\ )\ )\ ,
.Nm foo ) ) ,
.It Li \&.Nm
.Nm
.El
.Pp
.Ql \&.Nm
宏可以被 (其他宏) 分析和调用.
.Ss 选项 Options
.Ql \&.Op
宏 把 命令行上 剩余的 所有 参数 用 方括弧 括在一起, 把 最后的 标点符号
放到 方括弧 外面. 宏
.Ql \&.Oc
和
.Ql \&.Oo
用于 处理 跨行.
.Pp
.Dl Usage: .Op options ... 
.Bl -tag -width ".Op Fl c Ar objfil Op Ar corfil ," -compact -offset indent
.It Li \&.Op
.Op
.It Li ".Op Fl k"
.Op Fl k
.It Li ".Op Fl k ) ."
.Op Fl k ) .
.It Li ".Op Fl k Ar kookfile"
.Op Fl k Ar kookfile
.It Li ".Op Fl k Ar kookfile ,"
.Op Fl k Ar kookfile ,