P TP TTT
TTunn lieling
ICMICMPPPP TTu
ICMPP T
T
P TT
iiiii
li
i
Tunneling 
Server
Skype User
Figure 9: Illustration of the Skype service over ICMP tunneling
for free VoLTE-exploited data access.
is an individual phone user, targeted or randomly picked. Given the
victim’s IP address, we uncover this data spamming can occur with-
out consent from the victim. The IP address can be learned from
a phishing Website or an unprivileged malware. Compared with
other spamming attacks [18,23,24], this threat readily bypasses the
ﬁrewall and security boxes. This is because they are always de-
ployed at the border of mobile networks to prevent malicious traf-
ﬁc from the Internet. However, the spamming caused by VoLTE
purely relies on the internal trafﬁc without reaching the Internet.
In one run in OP-I, the overcharged volume reached 449 MB, still
showing no sign of limit.
3.5 Attacks on Real Apps
We further apply two attacks of free Mobile-to-Internet data ser-
vice and data DoS to real apps. With the former, we use the Skype
service with ICMP tunneling over mobile network for free-of-charge.
The latter force both the Web browser and Youtube to abort at the
victim’s phone. Note that these two attacks are feasible only for
OP-I.
Free Skype service over mobile network We build an ICMP
tunnel between the phone and our external server, in order to ex-
ploit the free VoLTE-exploited data service. As shown in Figure 9,
we deploy a tunneling server outside the mobile network. It sits be-
tween the phone, and application servers or other communicating
hosts. At the phone, we create a virtual interface and modify the
routing table to achieve two purposes. First, it is set to be the de-
fault interface for apps so that all the apps’ packets are forwarded
to it. Second, all the packets from the interface are redirected to
our tunneling server. The server does encapsulation/decapsulation
and the packets relay for the phone. Thus, the application servers
or other communicating hosts do not require to be modiﬁed.
We then run the Skype app on top of it. We show that a malicious
user with ICMP tunneling over the mobile network can have a 10-
minute chat with another Skype user. Moreover, the data volume
consumed during this time period is free-of-charge. Note that other
apps can also be free-of-charge over mobile network by taking ad-
vantage of ICMP tunneling.
322information can be inferred from its salient features (the guaranteed
bit rate for its QoS conﬁguration), thereby being exposed to mali-
cious exploits (V6).
(cid:60)(cid:82)(cid:88)(cid:87)(cid:88)(cid:69)(cid:72)(cid:3)(cid:47)(cid:82)(cid:74)(cid:82)
V5: Insufﬁcient Data–Plane Access Defense at Phone
(cid:90)(cid:90)(cid:90)(cid:17)(cid:70)(cid:81)(cid:81)(cid:17)(cid:70)(cid:82)(cid:80)
(a) Web DoS
(b) Youtube DoS
Figure 10: Data DoS attacks against web browsing (cnn) (a)
and Youtube (b).
Data DoS on Web browser and Youtube We launch Data DoS
on a victim’s phone while s(he) is loading the CNN webpage with
the Web browser or watching Youtube. We send a 10Mbps VoLTE-
exploited ﬂow of spam to the phone while it is placed in the con-
dition of rush-hour trafﬁc. It is observed that both CNN browsing
and Youtube watching are forced to abort, as shown in Figures 10a
and 10b.
4. MUTING VOICE THROUGH SPAMS IN
VOLTE DATA PLANE
We further investigate insecurity on the VoLTE data plane, as
well as the coordination between it and the control plane. We dis-
cover that the data plane is not well protected, regardless of cer-
tain mechanisms to protect the conﬁdential voice session informa-
tion, compared with those on the control plane. Unprivileged apps,
which do not require rooting or jailbreaking the phone, can inject
non-voice junk into voice bearers. Moreover, the private informa-
tion can be leaked from both the designated scheme for voice QoS
and the coordination lapse. By exploiting them, we devise a novel
voice DoS attack where a VoLTE call can be made through, but
its voice is muted (i.e., the caller and the callee cannot hear each
other).
4.1
Injecting Packets into the Voice Bearer
In the data-plane operation, a voice bearer is built on-demand
upon any call request, and then released after the call ends. Given
the PS nature, it is also vulnerable to the injection of non-voice
packets. However, compared with the signaling bearer, the voice
bearer appears safer with two inherent protection mechanisms. First,
voice packets are handled by the hardware (chipset) without soft-
ware intervention. As shown in Figure 3, their payload must be
encoded or decoded by the IMS (VoLTE) stack in the chipset (e.g.,
Qualcomm Snapdragon Processors), without reaching mobile OS.
Therefore, without hardware hack, it is unlikely for any app above
the mobile OS to deliver valid data through the voice bearer. Sec-
ond, each RTP session identiﬁer (i.e., the destination IP and a pair
of ports for RTP and RTCP) is protected as a secret, not being ex-
posed to the OS. This information is encrypted in the signaling
messages and varies with each call.
It is difﬁcult for the adver-
sary to get the session ID and forge the packet header (with correct
session ID).
However, after thorough analysis, we ﬁnd that the current de-
fenses are still insufﬁcient to protect the data plane. It is vulnerable
to deliver invalid packets (junk data) through the voice bearer. We
unveil two vulnerabilities in the data plane. First, the VoLTE data-
plane access control is problematic (V5) so that it is possible to in-
ject data to the voice bearer, though the delivered bytes are beyond
control by apps. Second, the conﬁdential VoLTE data-plane session
The data plane is also without sufﬁcient access control. Com-
pared with the control plane, it generates all voice packets within
the hardware. Speciﬁcally, the voice codec that converts an ana-
log voice signal to digitally encoded bytes, is implemented within
the chipset, as illustrated in Figure 3. However, the seemingly se-
cure hardware protection mechanism is still not sufﬁcient. It never
restricts the access to authentic VoLTE calls only (i.e., the system-
level dialer app). Instead, it accepts trafﬁc injected by other apps,
even those unprivileged ones, if they get the correct session infor-
mation. One thing worth noting is that the hardware buffer for the
voice bearer may overﬂow if the injected trafﬁc exceeds the max-
imum bit rate (MBR) (e.g., tens of kbps), which caps the voice
bearer trafﬁc. Genuine voice packets might be consequently dis-
carded, thus degrading the voice quality.
Empirical validation. We conﬁrm that an app without root priv-
ilege can inject high-rate trafﬁc into the voice bearer. We run this
application during an ongoing call at the callee, and generates pack-
ets with the voice RTP session identiﬁer (i.e., destination IP and
RTP/RTCP ports) of the ongoing call at 10 Mbps rate, and sends
them via the VoLTE interface. We will disclose how we exact the
voice RTP session identiﬁer in V6 and V7. We run 20 tests and
consistently observe that the callee’s voice is muted at the caller
(i.e., no voice from the callee). This implies that the data packets
created by the unprivileged app has been successfully injected into
the voice bearer and the injected trafﬁc indeed overﬂows the uplink
buffer of the voice bearer at the callee, with most voice packets
being discarded.
Causes and lessons.
without authenticating the origin of voice trafﬁc. The ﬁrst guard
comes from the VoLTE common operation that the data plan fol-
lows the legacy design (i.e., CS voice). Voice trafﬁc is encoded/decoded
by speciﬁc codec in the hardware, so it does not require software
intervention. It inherently prevents the non-VoLTE apps from abus-
ing the voice bearer. However, it merely reduces the hijacking like-
lihood but cannot avoid hijacking. The second defense relies on
the secrecy of RTP session ID. Neither checks whether the traf-
ﬁc comes from the real VoLTE application. The hardware allows
for the voice transfer from the OS, which still permits trafﬁc from
non-VoLTE apps.
The current two defenses are still ill-equipped,
V6: Side-channel Leakage of Session Privacy
The ID of each RTP session is regarded as a session secret [26].
It is carried by the signaling messages of the VoLTE application,
and may be further encrypted. Without root privilege, other un-
privileged apps should not be able to capture the signaling, thereby
learning the session ID. Figure 11 shows an example of the session
ID in a SIP message. Note that we get it by decrypting the en-
crypted SIP message from OP-I according to the method [2]. Note
that the decryption requires root privilege.
We however propose an approach to obtain the ID through side-
channel hints without root privilege or call operation permission. It
contains two parts. First, the destination IP address (i.e., the media
gateway’s IP) can be easily retrieved from the routing table. Sec-
ond, the RTP and RTCP port numbers can be inferred from a unique
pattern due to its guaranteed-bit-rate QoS scheme. Speciﬁcally, the
standard regulates that the voice bearer should be guaranteed with
323IP_SignalingServer
IP_VoLTE
Destination
Source
fd00:976a:c305:1821::f   2607:fb90:407:         SIP/SDP   Status: 200 OK
Session Initiation Protocol (200)
Status-Line: SIP/2.0 200 OK
Message Body
IP_MediaGateway
Protocol
Info
...
Session Description Protocol
Connection Information (c): IN IP6 fd00:976a:14f0:193e::6
Media Description, name and address (m): audio 64580 RTP/AVP
RTP Port 
Figure 11: A decrypted SIP message which contains the de-
scription of the RTP session.
a minimum rate (e.g., 8 KB/s) [10], regardless of whether packets
over the highest-priority signaling bearer would be served.
Moreover, the VoLTE signaling and voice bearers use the same
IP allocated to the VoLTE interface, and the packets for these two
bearers are differentiated based on their corresponding ports. That
is, only the packets with the RTP and RTCP ports of the session
ID are delivered to the voice bearer, whereas the others are to the
signaling bearer. Hence, it is possible to learn the session ports
by scanning all ports (sending one packet via one port). In case
of injecting heavy trafﬁc into the signaling bearer, the ones over
the voice bearer would have much smaller delay, since they have
guaranteed resource. In fact, the two ports with the smallest delay
should be the ones used by RTP and RTCP.
Empirical validation. We focus only on the destination ports
of the uplink RTP session (i.e., RTP and RTCP ports), since the
destination IP can be obtained as disclosed in §3.1.
During an ongoing call, the application without root privilege
does two things. First, it scans each port by sending one packet.
Second, it keeps sending many packets to certain ports (e.g., 80)
which are deﬁnitely not for RTP and RTCP, in order to overwhelm
the signaling bearer. We consider one-hop RTT for each port, where
we sent a UDP packet with Hop Limit being set to 1, and receive
ICMP response. The one-hop RTT is calculated based on the time
difference between the sending time of the UDP packet and the
receipt time of the ICMP response. Figure 12a plots the perceived
delay in one test run. The packets with two destination ports, 64580
and 64581, have the smallest delay, 39 ms, whereas other ports ex-
perience larger delay (> 90ms). These ports match those disclosed
from the decrypted SIP messages. Figure 12b shows that the delay
gap between the RTP/RTCP ports and other ports is consistently
observed, with at least as large as 50 ms in the 20 tests. So it is
viable to infer the RTP port numbers, though they vary in each run.
Causes and Lessons.
Two factors may trespass session privacy.
First, signaling and voice packets are dispatched from the VoLTE
interface based on an exclusive rule in that, those with the voice
session ID are delivered to the voice bearer, and others to the sig-
naling bearer. Second, resource reservation for the voice bearer is
not affected by the signaling bearer. This side information helps to
differentiate the two bearers. Therefore, QoS is good for perfor-
mance but can be bad for privacy.
4.2 Leakage in Coordination between Planes
We further disclose another weakness in the coordination be-
tween control and data planes. This makes it easier to leak the
voice session ID.
V7: Side-channel Leakage by Improper Coordination
The session ID can also be leaked from improper coordination
between planes. It can be obtained during call setup and call termi-
nation. At these two phases, the voice bearer on the data plane is
 300
)
s
m
 200
 100
(
T
T
R
p
o
H
e
n
O
Ports 64580,64581
 0
 0
 10
 20
 30
 40
 50
 60
Port Number (K)
(a) One run
RTP/RTCP
Min Delay Except RTP/RTCP
 200
 160
 120
 80
 40
)
s
m
(
T
T
R
p
o
H
e
n
O
 1
 3
 5
 7
 11  13  15  17  19
 9
x-th Run
(b) 20 runs
Figure 12: Latency of the packets using different ports.
established and released upon receiving certain signals on the con-
trol plane. When operations are not invoked in the correct timing
sequence, voice packets can be erroneously delivered to the control
plane.
We ﬁrst see that some initial voice packets from the media gate-
way will be forwarded to the control plane when the voice bearer
is not established in time. This is because the 4G gateway has only
one forwarding rule for the VoLTE IP (i.e., to/from the signaling
bearer) before the voice bearer is created. For example, certain
initial voice packets, such as alerting tone and early media (e.g.,
CallerTune), should be delivered to the phone before the call is
answered. The media gateway in the IMS core does have valid rea-
sons to do so. This is a voice feature provided by most operators.
We further observe a few VoLTE voice packets from the control-
plane interface after the call hangs up. It turns out that, the sig-
naling server consists of two separate components, i.e., the proxy
server and the serving server. The former regulates the establish-
ment/release of voice bearer at the 4G gateway, whereas the lat-
ter manages the start/stop of voice delivery at the media gateway.
However, there is no explicit coordination procedure between them.
Instead, implicit coordination is activated through the signaling mes-
sages passing them. When the phone terminates a call, it sends a
SIP BYE message. This message ﬁrst arrives at the proxy server,
and is then forwarded to the serving server. Through this sequence,
the former releases the voice bearer before the latter stops deliv-
ering voice packets. As a result, voice packets arriving at the 4G
gateway must be forwarded to the VoLTE signaling bearer, since
there is no voice bearer. When voice packets are forwarded to the
signaling bearer, they reach the phone’s VoLTE interface. Once
captured by non-VoLTE apps, they can leak the session ID.
Empirical validation.
from the VoLTE signaling interface on the mobile device via Shark [4].
Some VoLTE voice packets (here, UDP) are captured while the user
dials out or hangs up. We further develop an unprivileged app to
capture these early packets. The app binds to the VoLTE IP address
and the UDP source port used by the voice RTP session. The UDP
source port can be inferred; both operators have a simple selection
rule. For OP-I, it starts from the number, 1234, after booting, and
then monotonically increases by 10 for each call. For OP-II, the
Figure 13 shows IP packets collected
324IP_SignalingServer
IP_VoLTE 
Destination
...
IP_MediaGateway
Source
2607:fb90:1000:             fd00:976a:     ::f        SIP/SDP     Request: INVITE tel:323
fd00:976a:     ::f                  2607:fb90:1000:       SIP             Status: 100 Trying
...
fd00:976a:     ::6                 2607:fb90:1000:        UDP         
...
2607:fb90:1000:             fd00:976a:     ::6      
ICMPv6   
Dials out
Protocol
Info
...
...
...
...
...
Call ends
● ● ●
● ● ●
...
2607:fb90:1000:             fd00:976a:     ::f        SIP              Bye
...
fd00:976a:     ::6               2607:fb90:1000:         UDP         
2607:fb90:1000:             fd00:976a:     ::6      
ICMPv6   
...
...
...
...
Figure 13: Packet trace collected from the VoLTE signaling in-
terface while dialing and ending a call. UDP packets are those
from Media Gateway in the data plane, but are delivered to the