FSEVENTS_DEVICE_FILTER ioctl on the cloned /dev/fsevents descriptor. By default, fsevents assumes
that a watcher is interested in all devices.
A read call on the cloned descriptor will block until the kernel has file system changes to report. When
such a read call returns successfully, the data read would contain one or more events, each encapsulated in
a kfs_event structure. The latter contains an array of event arguments, each of which is a structure of type
kfs_event_arg_t, containing variable-size argument data. Table 113 shows the various possible argument
types. The argument array is always terminated by the special argument type FSE_ARG_DONE.
Table 113. Argument Types Contained in Events Reported by the Fsevents Mechanism
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 53 of 90
Event Type Description
FSE_ARG_VNODE A vnode pointer
FSE_ARG_STRING A string pointer
FSE_ARG_PATH A full pathname
FSE_ARG_INT32 A 32-bit integer
FSE_ARG_INT64 A 64-bit integer
FSE_ARG_RAW A void pointer
FSE_ARG_INO An inode number
FSE_ARG_UID A user ID
FSE_ARG_DEV A file system identifier (the first component of an
fsid_t) or a device identifier (a dev_t)
FSE_ARG_MODE A 32-bit number containing a file mode
FSE_ARG_GID A group ID
FSE_ARG_FINFO An argument used internally by the kernel to hold an
object's device information, inode number, file mode,
user ID, and group IDtranslated to a sequence of
individual arguments for user space
FSE_ARG_DONE A special type (with value 0xb33f) that marks the end
of a given event's argument list
typedef struct kfs_event_arg {
u_int16_t type; // argument type
u_int16_t len; // size of argument data that follows this field
... // argument data
} kfs_event_arg_t;
typedef struct kfs_event {
int32_t type; // event type
pid_t pid; // pid of the process that performed the operation
kfs_event_arg_t args[KFS_NUM_ARGS]; // event arguments
} kfs_event;
Figure 1123 shows an overview of the fsevents mechanism's implementation in the kernel. There is an
fs_event_watcher structure for each subscribed watcher. The event_list field of this structure points to
an array of event types. The array contains values that the watcher specified while cloning the device. The
devices_to_watch field, if non-NULL, points to a list of devices the watcher is interested in. Immediately
following the fs_event_watcher structure is the watcher's event queuethat is, an array of pointers to
kfs_event structures, with the latter residing in the global shared event buffer (fs_event_buf). The
fs_event_watcher structure's rd and wr fields act as read and write cursors, respectively. While adding an
event to the watcher, if it is found that the write cursor has wrapped around and caught up with the read
cursor, it means the watcher has dropped one or more events. The kernel reports dropping of events as a
special event of type FSE_EVENTS_DROPPED, which has no arguments (except FSE_ARG_DONE) and contains
a fake process ID of zero.
Figure 1123. An overview of the fsevents mechanism's implementation
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 54 of 90
Events can also be dropped because the fs_event_buf global shared buffer is full, which can happen
because of a slow watcher. This is a more serious condition from Spotlight's standpoint. In this case, the
kernel must discard an existing event to make space for the new event being added, which means at least
one watcher will not see the discarded event. To simplify implementation, the kernel delivers an
FSE_EVENTS_DROPPED event to all watchers.
Dropped Events and Spotlight
Since events dropped from the global shared event buffer affect all subscribers, a slow
subscriber can adversely affect the primary subscriberthat is, the Spotlight server. If Spotlight
misses any events, it may need to scan the entire volume looking for changes that it missed.
A typical scenario in which a subscriber's slowness will manifest itself is one involving heavy
file system activity, where the meaning of "heavy" may vary greatly depending on the system
and its currently available resources. Unpacking a giant archive or copying a well-populated
directory hierarchy is likely to cause heavy-enough file system activity. The kauth-based
mechanism developed in Section 11.10.3 may be a better alternative in many cases for
monitoring file system activity.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 55 of 90
Figure 1124 shows how events are added to the global shared event buffer. Various functions in the VFS
layer call add_fsevent() [bsd/vfs/vfs_fsevents.c] to generate events based on the return value from
need_fsevent(type, vp) [bsd/vfs/vfs_fsevents.c], which takes an event type and a vnode and
determines whether the event needs to be generated. need_fsevent() first checks the
fs_event_type_watchers global array (see Figure 1123), each of whose elements maintains a count of
the number of watchers interested in that event type. If fs_event_type_watchers[type] is zero, it means
that an event whose type is type need not be generated, since there are no watchers interested. Fsevents
uses this array as a quick check mechanism to bail out early. Next, need_fsevent() checks each watcher
to see if at least one watcher wants the event type to be reported and is interested in the device the vnode
belongs to. If there is no such watcher, the event need not be generated.
Figure 1124. Event generation in the fsevents mechanism
[View full size image]
add_fsevent() expands certain kernel-internal event arguments into multiple user-visible arguments. For
example, both FSE_ARG_VNODE and the kernel-only argument FSE_ARG_FINFO cause FSE_ARG_DEV,
FSE_ARG_INO, FSE_ARG_MODE, FSE_ARG_UID, and FSE_ARG_GUID to be appended to the event's argument
list.
We will now write a programlet us call it fsloggerthat subscribes to the fsevents mechanism and displays
the change notifications as they arrive from the kernel. The program will process the argument list of each
event, enhance it in certain cases (e.g., by determining human-friendly names corresponding to process,
user, and group identifiers), and display the result. Figure 1125 shows the source for fslogger.
Figure 1125. A file system change logger based on the fsevents mechanism
// fslogger.c
#include 
#include 
#include 
#include 
#include 
#include 
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 56 of 90
#include 
#include 
#include 
#include 
#define PROGNAME "fslogger"
#define DEV_FSEVENTS "/dev/fsevents" // the fsevents pseudo-device
#define FSEVENT_BUFSIZ 131072 // buffer for reading from the device
#define EVENT_QUEUE_SIZE 2048 // limited by MAX_KFS_EVENTS
// an event argument
typedef struct kfs_event_arg {
u_int16_t type; // argument type
u_int16_t len; // size of argument data that follows this field
union {
struct vnode *vp;
char *str;
void *ptr;
int32_t int32;
dev_t dev;
ino_t ino;
int32_t mode;
uid_t uid;
gid_t gid;
} data;
} kfs_event_arg_t;
#define KFS_NUM_ARGS FSE_MAX_ARGS
// an event
typedef struct kfs_event {
int32_t type; // event type
pid_t pid; // pid of the process that performed the operation
kfs_event_arg_t args[KFS_NUM_ARGS]; // event arguments
} kfs_event;
// event names
static const char *kfseNames[] = {
"FSE_CREATE_FILE",
"FSE_DELETE",
"FSE_STAT_CHANGED",
"FSE_RENAME",
"FSE_CONTENT_MODIFIED",
"FSE_EXCHANGE",
"FSE_FINDER_INFO_CHANGED",
"FSE_CREATE_DIR",
"FSE_CHOWN",
};
// argument names
static const char *kfseArgNames[] = {
"FSE_ARG_UNKNOWN", "FSE_ARG_VNODE", "FSE_ARG_STRING", "FSE_ARGPATH",
"FSE_ARG_INT32", "FSE_ARG_INT64", "FSE_ARG_RAW", "FSE_ARG_INO",
"FSE_ARG_UID", "FSE_ARG_DEV", "FSE_ARG_MODE", "FSE_ARG_GID",
"FSE_ARG_FINFO",
};
// for pretty-printing of vnode types
enum vtype {
VNON, VREG, VDIR, VBLK, VCHR, VLNK, VSOCK, VFIFO, VBAD, VSTR, VCPLX
};
enum vtype iftovt_tab[] = {
VNON, VFIFO, VCHR, VNON, VDIR, VNON, VBLK, VNON,
VREG, VNON, VLNK, VNON, VSOCK, VNON, VNON, VBAD,
};
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 57 of 90
static const char *vtypeNames[] = {
"VNON", "VREG", "VDIR", "VBLK", "VCHR", "VLNK",
"VSOCK", "VFIFO", "VBAD", "VSTR", "VCPLX",
};
#define VTYPE_MAX (sizeof(vtypeNames)/sizeof(char *))
static char *
get_proc_name(pid_t pid)
{
size_t len = sizeof(struct kinfo_proc);
static int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, 0 };
static struct kinfo_proc kp;
name[3] = pid;
kp.kp_proc.p_comm[0] = '\0';
if (sysctl((int *)name, sizeof(name)/sizeof(*name), &kp, &len, NULL, 0))
return "?";
if (kp.kp_proc.p_comm[0] == '\0')
return "exited?";
return kp.kp_proc.p_comm;
}
int
main(int argc, char **argv)
{
int32_t arg_id;
int fd, clonefd = -1;
int i, j, eoff, off, ret;
kfs_event_arg_t *kea;
struct fsevent_clone_args fca;
char buffer[FSEVENT_BUFSIZ];
struct passwd *p;
struct group *g;
mode_t va_mode;
u_int32_t va_type;
u_int32_t is_fse_arg_vnode = 0;
char fileModeString[11 + 1];
int8_t event_list[] = { // action to take for each event
FSE_REPORT, // FSE_CREATE_FILE
FSE_REPORT, // FSE_DELETE
FSE_REPORT, // FSE_STAT_CHANGED
FSE_REPORT, // FSE_RENAME
FSE_REPORT, // FSE_CONTENT_MODIFIED
FSE_REPORT, // FSE_EXCHANGE
FSE_REPORT, // FSE_FINDER_INFO_CHANGED
FSE_REPORT, // FSE_CREATE_DIR
FSE_REPORT, // FSE_CHOWN
};
if (argc != 1) {
fprintf(stderr, "%s accepts no arguments. It must be run as root.\n",
PROGNAME);
exit(1);
}
if (geteuid() != 0) {
fprintf(stderr, "You must be root to run %s. Try again using 'sudo'.\n",
PROGNAME);
exit(1);
}
setbuf(stdout, NULL);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 58 of 90
if ((fd = open(DEV_FSEVENTS, O_RDONLY))  0)
printf("=> received %d bytes\n", ret);
off = 0;
while (off type == FSE_EVENTS_DROPPED) { // special event
printf("# Event\n");
printf(" %-14s = %s\n", "type", "EVENTS DROPPED");
printf(" %-14s = %d\n", "pid", kfse->pid);
off += sizeof(u_int16_t); // FSE_ARG_DONE: sizeof(type)
continue;
}
if ((kfse->type type >= -1)) {
printf("# Event\n");
printf(" %-14s = %s\n", "type", kfseNames[kfse->type]);
} else { // should never happen
printf("This may be a program bug (type = %d).\n", kfse->type);
exit(1);
}
printf(" %-14s = %d (%s)\n", "pid", kfse->pid,
get_proc_name(kfse->pid));
printf(" # Details\n # %-14s%4s %s\n", "type", "len", "data");
kea = kfse->args;
i = 0;
while ((off type == FSE_ARG_DONE) { // no more arguments
printf(" %s (%#x)\n", "FSE_ARG_DONE", kea->type);
off += sizeof(u_int16_t);
break;
}
eoff = sizeof(kea->type) + sizeof(kea->len) + kea->len;
off += eoff;
arg_id = (kea->type > FSE_MAX_ARGS) ? 0 : kea->type;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 59 of 90
printf(" %-16s%4hd ", kfseArgNames[arg_id], kea->len);
switch (kea->type) { // handle based on argument type
case FSE_ARG_VNODE: // a vnode (string) pointer
is_fse_arg_vnode = 1;
printf("%-6s = %s\n", "path", (char *)&(kea->data.vp));
break;
case FSE_ARG_STRING: // a string pointer
printf("%-6s = %s\n", "string", (char *)&(kea->data.str));
break;
case FSE_ARG_INT32:
printf("%-6s = %d\n", "int32", kea->data.int32);
break;
case FSE_ARG_RAW: // a void pointer
printf("%-6s = ", "ptr");
for (j = 0; j len; j++)
printf("%02x ", ((char *)kea->data.ptr)[j]);
printf("\n");
break;
case FSE_ARG_INO: // an inode number
printf("%-6s = %d\n", "ino", kea->data.ino);
break;
case FSE_ARG_UID: // a user ID
p = getpwuid(kea->data.uid);
printf("%-6s = %d (%s)\n", "uid", kea->data.uid,
(p) ? p->pw_name : "?");
break;
case FSE_ARG_DEV: // a file system ID or a device number
if (is_fse_arg_vnode) {