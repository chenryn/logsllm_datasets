title:Automatic Proof of Strong Secrecy for Security Protocols
author:Bruno Blanchet
Automatic Proof of Strong Secrecy for Security Protocols
Bruno Blanchet
CNRS, ´Ecole Normale Sup´erieure, Paris
and Max-Planck-Institut f¨ur Informatik, Saarbr¨ucken
PI:EMAIL
Abstract
We present a new automatic technique for proving strong
secrecy for security protocols. Strong secrecy means that an
adversary cannot see any difference when the value of the
secret changes. Our technique relies on an automatic trans-
lation of the protocol into Horn clauses, and a resolution
algorithm on the clauses. It requires important extensions
with respect to previous work for the proof of (standard) se-
crecy and authenticity. This technique can handle a wide
range of cryptographic primitives, and yields proofs valid
for an unbounded number of sessions and an unbounded
message space; it is also ﬂexible and efﬁcient. We have
proved its correctness, implemented it, and tested it on sev-
eral examples of protocols including JFK [11] (a proposed
replacement for IPsec).
1. Introduction
Secrecy is a basic and important security notion in the
analysis of cryptographic protocols. It formalizes that an
attacker must not be able to ﬁnd out sensitive data. Even
for such a basic notion, several different deﬁnitions can be
given. We focus here on deﬁnitions of secrecy in formal
models of cryptography, which do not consider bitstrings,
but terms built from abstract perfect cryptographic primi-
tives. As discussed in [2], in such models, two main ways
of deﬁning secrecy can be distinguished:
(cid:0) The ﬁrst one, which we name standard secrecy,
means that an attacker must not be able to ob-
tain the value of the secret itself. This is the one most
frequently checked in cryptographic protocol veriﬁca-
tion, using techniques such as model-checking [34],
theorem proving [39],
typing and logic program-
ming [3] for instance.
(cid:0) The second one, which we name strong secrecy,
means that an attacker must see no difference when
the value of the secret changes. This notion of se-
crecy is stronger than the ﬁrst one. It is similar to the
notion of non-interference, which has been widely
used in language-based security, but in general with-
out cryptography [43]. Exceptions include [25],
which deﬁnes a similar notion of secrecy for a prop-
erty instead of a value, [1], which presents a type
system for verifying strong secrecy for the spi calcu-
lus, and [7], which uses manual process equivalence
proofs for deriving strong secrecy. This deﬁni-
tion of secrecy is sometimes considered too restrictive.
However, we believe that,
in the case of crypto-
graphic protocols, this notion of secrecy is not overly
restrictive, since encryption can be used to hide infor-
mation, so that sending a secret encrypted does not
reveal it.
Strong secrecy is interesting for several reasons:
(cid:0) It takes into account implicit ﬂows. For instance, an
implicit ﬂow occurs when a test yields different results
depending on the value of a secret and the outcome of
the test is subsequently known to the adversary. This is
particularly important when the secrets can take only
a few values (see Section 6 for more details on this
point).
(cid:0) Strong secrecy is a particular case of process equiva-
lence. Process equivalences provide a simple and ele-
gant way of formalizing security properties. They have
nice compositionality properties. This makes it easy
to combine manual proofs of some lemmas with au-
tomatic proofs of others.
(cid:0) Even though it is based on a formal model, strong se-
crecy is closer to the computational deﬁnition of se-
crecy, for example semantic security of a key. Indeed,
intuitively, semantic security means that a polynomial-
time adversary has negligible probability to distinguish
between a process that gives it the correct key and
a process that gives it a random key. Our notion of
secrecy also means that the adversary cannot distin-
guish between different values of the secret. This link
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
is formally illustrated by [8, 10], which show that, for
passive attacks and symmetric encryption, plus addi-
tional technical restrictions, process equivalences im-
ply computational equivalences.
In this paper, we present an automatic technique for verify-
ing strong secrecy. In our technique, the protocol is given
as input under the form of a process in an extension of the
pi calculus with a generic treatment of cryptographic prim-
itives. This process is then automatically translated into a
set of Horn clauses, which yields an abstract representa-
tion of the protocol. This translation extends the transla-
tion given in [3] for standard secrecy and in [16] for au-
thenticity. The main new idea of this translation is to col-
lect all tests that the adversary can do: in particular, a test
can be the application of a primitive that can succeed or fail
(such as a decryption or an equality test). The set of all pos-
sible tests is inﬁnite, but can be ﬁnitely described by Horn
clauses. The main challenge is then to make sure, without
enumerating this inﬁnite set of tests, that none of them re-
veals information about the secrets. We achieve this goal
by adding a new predicate “(cid:1)	(cid:5)(cid:6)” in the clauses, which
is not deﬁned by Horn clauses, but by speciﬁc simpliﬁca-
tion steps in the solving algorithm. Taking into account the
meaning of (cid:1)	(cid:5)(cid:6), we can show that, if a certain fact (cid:7)(cid:8)(cid:9)
is not derivable from the clauses, then the protocol satisﬁes
the desired strong secrecy property. We use a resolution-
based algorithm to determine derivability of facts from the
clauses. This algorithm is also an extension of the algorithm
previously used for standard secrecy. The major novelty of
this algorithm is the introduction of the simpliﬁcation steps
for (cid:1)	(cid:5)(cid:6). We have proved our technique correct (includ-
ing the translation and the solving algorithm), implemented
it, and tested it on several examples of protocols, includ-
ing JFK [11] (a proposed replacement for IPsec).
We have also proved the termination of the algorithm for
the large class of tagged protocols, thus extending [17] to
strong secrecy. (Experimentally, the algorithm also termi-
nates on many non-tagged protocols.) Intuitively, a tagged
protocol is a protocol in which each encryption, signature,
. . . is distinguished from others by a constant tag. For in-
stance, to encrypt  under (cid:1), we write (cid:1)(cid:3)(cid:5) (cid:2) (cid:2) (cid:1)
instead of (cid:1)(cid:3)(cid:5) (cid:2) (cid:1), where  is a constant tag. Dif-
ferent encryptions in the protocol use different tags, and the
receiver of a message always checks the tags.
Related work There is a long line of research on informa-
tion ﬂow for programs (without cryptography), using ﬁnite-
state exploration tools such as CoSeC [28] or type sys-
tems [43]. These type systems are often very restrictive.
We refer to [40] for a detailed survey. Adding cryptogra-
phy considerably complicates the proof of non-interference,
since one should be allowed to publish the encryption of
a secret, although it depends on the secret, and therefore
would be reported as a violation by these type systems. One
might use explicit downgrading [37] to solve this problem,
allowing the secret to be downgraded into a public value at
speciﬁc places in the program. Obviously, downgrading is
not safe in general, so one must control that it does not leak
more information than intended, for example as in [44]. The
current techniques for controlling downgrading do not take
into account the algebraic properties of the cryptographic
primitives, which are key to determine which messages one
should be allowed to publish. So our work relies on a differ-
ent approach: we use exclusively the algebraic properties of
the cryptographic primitives to prove strong secrecy, with-
out any downgrading indications.
In the same spirit as explicit downgrading, Dam and Gi-
ambiagi [24, 30] use the technique of admissible ﬂows to
check that ﬂows in the implementation of a cryptographic
protocol satisfy a dependency speciﬁcation, which gives
tight control on which arguments are allowed for encryp-
tion, and which messages may be sent. However, the tech-