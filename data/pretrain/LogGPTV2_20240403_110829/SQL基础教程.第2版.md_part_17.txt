INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date) VALUES ('0007', 
'擦菜板', '厨房用具', DEFAULT, 790, '2009-04-28');
表示下一行接续本行，只是由于版面所限而换行。
这样一来，RDBMS就会在插入记录时自动把默认值赋给对应的列。
我们可以使用SELECT语句来确认通过INSERT语句插入的数据行。
-- 确认插入的数据行；
SELECT * FROM ProductIns WHERE product_id = '0007';
因为sale_price列（销售单价）的默认值是0，所以sale_price
列被赋予了值0。
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
---------+-----------+-----------+---------+------------+----------
0007 | 擦菜板 | 厨房用具 | 0 | 790 | 2008-04-28
4-1 数据的插入（INSERT语句的使用方法） 125 ●
■通过隐式方法插入默认值
插入默认值时也可以不使用DEFAULT关键字，只要在列清单和
VALUES中省略设定了默认值的列就可以了。我们可以像代码清单4-7那
样，从INSERT语句中删除sale_price列（销售单价）。
代码清单4-7 通过隐式方法设定默认值
省略sale_price列
INSERT INTO ProductIns (product_id, product_name, product_type, 
purchase_price, regist_date) VALUES ('0007', '擦菜板', '厨房用具', 
790, '2009-04-28');
值也省略
表示下一行接续本行，只是由于版面所限而换行。
这样也可以给sale_price赋上默认值0。
那么在实际使用中哪种方法更好呢？笔者建议大家使用显式的方法。
因为这样可以一目了然地知道sale_price列使用了默认值，SQL语
句的含义也更加容易理解。
说到省略列名，还有一点要说明一下。如果省略了没有设定默认值的
列，该列的值就会被设定为NULL。因此，如果省略的是设置了NOT
NULL约束的列，INSERT语句就会出错（代码清单4-8）。请大家一定
要注意。
代码清单4-8 未设定默认值的情况
-- 省略purchase_price列（无约束）：会赋予“NULL”
INSERT INTO ProductIns (product_id, product_name, product_type, 
sale_price, regist_date) VALUES ('0008', '圆珠笔', '办公用品', 
100, '2009-11-11');
-- 省略product_name列（设置了NOT NULL约束）：错误！
INSERT INTO ProductIns (product_id, product_type, sale_price,
purchase_price, regist_date) VALUES ('0009', '办公用品', 1000, 500, 
'2009-12-12');
表示下一行接续本行，只是由于版面所限而换行。
法则4-2
省略INSERT语句中的列名，就会自动设定为该列的默认值（没有默认值时会设定
为NULL）。
● 126 第4章 数据更新
从其他表中复制数据
要插入数据，除了使用VALUES子句指定具体的数据之外，还可以
从其他表中复制数据。下面我们就来学习如何从一张表中选取数据，复制
到另外一张表中。
要学习该方法，我们首先得创建一张表（代码清单4-9）。
代码清单4-9 创建ProductCopy表的CREATE TABLE语句
-- 用来插入数据的商品复制表
CREATE TABLE ProductCopy
(product_id CHAR(4) NOT NULL,
product_name VARCHAR(100) NOT NULL,
product_type VARCHAR(32) NOT NULL,
sale_price INTEGER ,
purchase_price INTEGER ,
regist_date DATE ,
PRIMARY KEY (product_id));
ProductCopy（商品复制）表的结构与之前使用的Product（商
品）表完全一样，只是更改了一下表名而已。
接下来，就让我们赶快尝试一下将Product表中的数据插入到
ProductCopy表中吧。代码清单4-10中的语句可以将查询的结果直
接插入到表中。
代码清单4-10 INSERT ... SELECT语句
-- 将商品表中的数据复制到商品复制表中
INSERT INTO ProductCopy (product_id, product_name, product_type, 
sale_price, purchase_price, regist_date)
SELECT product_id, product_name, product_type, sale_price, 
purchase_price, regist_date
FROM Product;
表示下一行接续本行，只是由于版面所限而换行。
KEYWORD 执行该INSERT … SELECT语句时，如果原来Product表中有
●INSERT … SELECT语句 8行数据，那么ProductCopy表中也会插入完全相同的8行数据。当然，
Product表中的原有数据不会发生改变。因此，INSERT SELECT
…
语句可以在需要进行数据备份时使用（图4-2）。
4-1 数据的插入（INSERT语句的使用方法） 127 ●
图4-2 INSERT ... SELECT语句
A表 B表
使用INSERT ・・・SELECT语句
可以在关联的表之间传递数据
■多种多样的SELECT语句
该INSERT语句中的SELECT语句，也可以使用WHERE子句或者
GROUP BY子句等。目前为止学到的各种SELECT语句也都可以使用A。
注A 对在关联表之间存取数据来说，这是非常方便的功能。
但即使指定了ORDER BY子句
接下来我们尝试一下使用包含GROUP BY子句的SELECT语句进
也没有任何意义，因为无法保证
表内部记录的排列顺序。 行插入。代码清单4-11中的语句创建了一个用来插入数据的表。
代码清单4-11 创建ProductType表的CREATE TABLE语句
-- 根据商品种类进行汇总的表；
CREATE TABLE ProductType
(product_type VARCHAR(32) NOT NULL,
sum_sale_price INTEGER ,
sum_purchase_price INTEGER ,
PRIMARY KEY (product_type));
该表是用来存储根据商品种类（product_type）计算出的销售单
价合计值以及进货单价合计值的表。下面就让我们使用代码清单4-12中
的INSERT SELECT语句，从Product表中选取出数据插入到这张
…
表中吧。
代码清单4-12 插入其他表中数据合计值的INSERT ... SELECT语句
INSERT INTO ProductType (product_type, sum_sale_price, 
sum_purchase_price)
SELECT product_type, SUM(sale_price), SUM(purchase_price)
FROM Product
GROUP BY product_type;
表示下一行接续本行，只是由于版面所限而换行。
● 128 第4章 数据更新
通过SELECT语句对插入结果进行确认，我们发现ProductType表
中插入了以下3行数据。
-- 确认插入的数据行
SELECT * FROM ProductType;
执行结果
product_type | sum_sale_price | sum_purchase_price
--------------+-----------------+--------------------
衣服 | 5000 | 3300
办公用品 | 600 | 320
厨房用具 | 11180 | 8590
法则4-3
INSERT语句的SELECT语句中，可以使用WHERE子句或者GROUP BY子句等任
何SQL语法（ 但使用ORDER BY子句并不会产生任何效果）。
4-2 数据的删除（DELETE语句的使用方法） 129 ●
第4章 数据更新
4-2
数据的删除（ 语句的使用方法）
DELETE
● 如果想将整个表全部删除，可以使用DROP TABLE语句，如果只想删除
学习重点
表中全部数据，需使用DELETE语句。
● 如果想删除部分数据行，只需在WHERE子句中书写对象数据的条件即可。
通过WHERE子句指定删除对象的DELETE语句称为搜索型DELETE语句。
语句和 语句
DROP TABLE DELETE
上一节我们学习了插入数据的方法，本节我们来学习如何删除数据。
删除数据的方法大体可以分为以下两种。
KEYWORD ① DROP TABLE语句可以将表完全删除
●DROP TABLE语句
② DELETE语句会留下表（容器），而删除表中的全部数据
●DELETE语句
①中的DROP TABLE语句我们已经在1-5节中学过了，此处再简单
回顾一下。DROP TABLE语句会完全删除整张表，因此删除之后再想插
入数据，就必须使用CREATE TABLE语句重新创建一张表。
反之，②中的DELETE语句在删除数据（行）的同时会保留数据表，
因此可以通过INSERT语句再次向表中插入数据。
本节所要介绍的删除数据，指的就是只删除数据的DELETE语句。
此外，我们在第1章中也提到过，不管使用哪种方法，删除数据时都
要慎重，一旦误删，想要恢复数据就会变得十分困难。
语句的基本语法
DELETE
DELETE语句的基本语法如下所示，十分简单。
语法4-2 保留数据表，仅删除全部数据行的DELETE语句
DELETE FROM ;
● 130 第4章 数据更新
执行使用该基本语法的DELETE语句，就可以删除指定的表中的全
部数据行了。因此，想要删除Product表中全部数据行，就可以参照代
码清单4-13来书写DELETE语句。
代码清单4-13 清空Product表
DELETE FROM Product;
如果语句中忘了写FROM，而是写成了“DELETE ”，或者
写了多余的列名，都会出错，无法正常执行，请大家特别注意。
前者无法正常执行的原因是删除对象不是表，而是表中的数据行（记
注A 录）。这样想的话就很容易理解了吧A。
与INSERT语句相同，数据的更
后者错误的原因也是如此。因为DELETE语句的对象是行而不是列，
新也是以记录为基本单位进行
的。下一节将要学习的UPDATE
所以DELETE语句无法只删除部分列的数据。因此，在DELETE语句
语句也是如此。
中指定列名是错误的。当然，使用星号的写法（DELETE * FROM
Product；）也是不对的，同样会出错。
法则4-4
DELETE语句的删除对象并不是表或者列，而是记录（行）。
指定删除对象的 语句（搜索型 ）
DELETE DELETE
想要删除部分数据行时，可以像SELECT语句那样使用WHERE
KEYWORD 子句指定删除条件。这种指定了删除对象的DELETE语句称为搜索型
●搜索型DELETE
DELETEB。
注B 搜索型DELETE的语法如下所示。
虽然“搜索型DELETE”是正式用
语，但实际上这种说法并不常用， 语法4-3 删除部分数据行的搜索型DELETE
而是简单地称为DELETE语句。
DELETE FROM 
WHERE ;
下面让我们以Product（商品）表为例，来具体研究一下如何进行
数据删除（表4-1）。
4-2 数据的删除（DELETE语句的使用方法） 131 ●
表4-1 Product表
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
假设我们要删除销售单价（sale_price）大于等于4000日元的
数据（代码清单4-14）。上述表中满足该条件的是“运动T恤”和“高压锅”。
代码清单4-14 删除销售单价（sale_price）大于等于4000日元的数据
DELETE FROM Product
WHERE sale_price >= 4000;
WHERE子句的书写方式与此前介绍的SELECT语句完全一样。
通过使用SELECT语句确认，表中的数据被删除了2行，只剩下6行。
-- 确认删除后的结果
SELECT * FROM Product;
执行结果
product_id | product_name | product_type | sale_price | p urchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2 009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2 009-09-11
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2 009-09-20
0006 | 叉子 | 厨房用具 | 500 | | 2 009-09-20
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2 008-04-28
0008 | 圆珠笔 | 办公用品 | 100 | | 2 009-11-11
法则4-5
可以通过WHERE子句指定对象条件来删除部分数据。
● 132 第4章 数据更新
与SELECT语句不同的是，DELETE语句中不能使用GROUP BY、
HAVING和ORDER BY三类子句，而只能使用WHERE子句。原因很简单，
GROUP BY和HAVING是从表中选取数据时用来改变抽取数据形式的，
而ORDER BY是用来指定取得结果显示顺序的。因此，在删除表中数据
时它们都起不到什么作用。
专 栏
删除和舍弃
标准SQL中用来从表中删除数据的只有DELETE语句。但是，很多数据库产
KEYWORD 品中还存在另外一种被称为TRUNCATE的语句。这些产品主要包括Oracle、SQL
●TRUNCATE语句 Server、PostgreSQL、MySQL和DB2。
TRUNCATE是舍弃的意思，具体的使用方法如下所示。
语法4-A 只能删除表中全部数据的TRUNCATE语句
TRUNCATE ;
与DELETE不同的是，TRUNCATE只能删除表中的全部数据，而不能通过
WHERE子句指定条件来删除部分数据。也正是因为它不能具体地控制删除对象，
所以其处理速度比DELETE要快得多。实际上，DELETE语句在DML语句中也
属于处理时间比较长的，因此需要删除全部数据行时，使用TRUNCATE可以缩短
执行时间。
注A 但是，产品不同需要注意的地方也不尽相同。例如在Oracle中，把TRUNCATE
因此，Oracle中的TRUNCATE 定义为DDL，而不是DMLA 。使用TRUNCATE时，请大家仔细阅读使用手册，
不能使用ROLLBACK。执行
多加注意。便利的工具往往还是会存在一些不足之处的。
TRUNCATE的同时会默认执行
COMMIT操作。
4-3 数据的更新（UPDATE语句的使用方法） 133 ●
第4章 数据更新
4-3
数据的更新（ 语句的使用方法）
UPDATE
● 使用UPDATE语句可以更改（更新）表中的数据。
学习重点
● 更新部分数据行时可以使用WHERE来指定更新对象的条件。通过WHERE