src\preprocessors\portscan.h  
src\preprocessors\portscan.c  
src\preprocessors\spp_sfportscan.c  
src\preprocessors\spp_sfportscan.h
根据 sense_level 查找相关代码  
  * 设置不同级别时间窗
        static int ps_proto_update_window(PS_PROTO *proto, time_t pkt_time)
    {
        time_t interval;
        switch(portscan_eval_config->sense_level)
        {
            case PS_SENSE_LOW:
                //interval = 15;
                interval = 60;
                break;
            case PS_SENSE_MEDIUM:
                //interval = 15;
                interval = 90;
                break;
            case PS_SENSE_HIGH:
                interval = 600;
                break;
            default:
                return -1;
        }
  * 规则阈值配置
    1. 结构体
                typedef struct s_PS_ALERT_CONF
         {
             short connection_count;
             short priority_count;
             short u_ip_count;
             short u_port_count;
         } PS_ALERT_CONF;
      * connection_count  
onnection_count指明了当前时间段内在主机(src or
dst)上有多少活跃的连接。该字段对于基于连接的协议(TCP)很准确，对于其它协议（UDP等），它是一个估计值。portscan是否被过滤可以用该字段进行辨别，如果connection_count较大，而priority_count较小，则表明portscan被过滤了。
      * priority_count  
记录”bad responses”（无效响应，如TCP RST, ICMP unreachable）.
priority_count越大，说明捕获的无效响应包越多. 在判断扫描时 priority_count 是先于
connection_count进行判断的，它们俩是并列的，但是priority_count优先和阈值比较。  
      * u_ip_count  
u_ip_count记录着和主机最后进行通信的IP地址(last_ip)，如果新来一个数据包，其源IP地址src_ip，如果src_ip
不等于last_ip，就对u_ip_count字段加1。对于Portscan类型扫描，该值比较小；对于活跃的主机（和外界通信频繁），这个值会比较大，这样有可能导致portscan被检测成Distributed
scan.
      * u_port_count  
u_port_count记录着和主机最后进行通信的端口（last_port），当新来的数据包的目的端口(dst_port)不等于last_port，那么对u_port_count加1.
    2. 配置
                static int ps_alert_tcp(PS_PROTO *scanner, PS_PROTO *scanned)
         {
             static PS_ALERT_CONF *one_to_one;
             static PS_ALERT_CONF *one_to_one_decoy;
             static PS_ALERT_CONF *one_to_many;
             static PS_ALERT_CONF *many_to_one;
             /*
             ** Set the configurations depending on the sensitivity
             ** level.
             */
             switch(portscan_eval_config->sense_level)
             {
                 case PS_SENSE_HIGH:
                     one_to_one       = &g_tcp_hi_ps;
                     one_to_one_decoy = &g_tcp_hi_decoy_ps;
                     one_to_many      = &g_tcp_hi_sweep;
                     many_to_one      = &g_tcp_hi_dist_ps;
         ......
                /*
         **  Scanning configurations.  This is where we configure what the thresholds
         **  are for the different types of scans, protocols, and sense levels.  If
         **  you want to tweak the sense levels, change the values here.
         */
         /*
         **  TCP alert configurations
         */
         static PS_ALERT_CONF g_tcp_low_ps =       {0,5,25,5};
         static PS_ALERT_CONF g_tcp_low_decoy_ps = {0,15,50,30};
         static PS_ALERT_CONF g_tcp_low_sweep =    {0,5,5,15};
         static PS_ALERT_CONF g_tcp_low_dist_ps =  {0,15,50,15};
         static PS_ALERT_CONF g_tcp_med_ps =       {200,10,60,15};
         static PS_ALERT_CONF g_tcp_med_decoy_ps = {200,30,120,60};
         static PS_ALERT_CONF g_tcp_med_sweep =    {30,7,7,10};
         static PS_ALERT_CONF g_tcp_med_dist_ps =  {200,30,120,30};
         static PS_ALERT_CONF g_tcp_hi_ps =        {200,5,100,10};
         static PS_ALERT_CONF g_tcp_hi_decoy_ps =  {200,7,200,60};
         static PS_ALERT_CONF g_tcp_hi_sweep =     {30,3,3,10};
         static PS_ALERT_CONF g_tcp_hi_dist_ps =   {200,5,200,10};
         /*
         **  UDP alert configurations
         */
         static PS_ALERT_CONF g_udp_low_ps =       {0,5,25,5};
         static PS_ALERT_CONF g_udp_low_decoy_ps = {0,15,50,30};
         static PS_ALERT_CONF g_udp_low_sweep =    {0,5,5,15};
         static PS_ALERT_CONF g_udp_low_dist_ps =  {0,15,50,15};
         static PS_ALERT_CONF g_udp_med_ps =       {200,10,60,15};
         static PS_ALERT_CONF g_udp_med_decoy_ps = {200,30,120,60};
         static PS_ALERT_CONF g_udp_med_sweep =    {30,5,5,20};
         static PS_ALERT_CONF g_udp_med_dist_ps =  {200,30,120,30};
         static PS_ALERT_CONF g_udp_hi_ps =        {200,3,100,10};
         static PS_ALERT_CONF g_udp_hi_decoy_ps =  {200,7,200,60};
         static PS_ALERT_CONF g_udp_hi_sweep =     {30,3,3,10};
         static PS_ALERT_CONF g_udp_hi_dist_ps =   {200,3,200,10};
         /*
         **  IP Protocol alert configurations
         */
         static PS_ALERT_CONF g_ip_low_ps =        {0,10,10,50};
         static PS_ALERT_CONF g_ip_low_decoy_ps =  {0,40,50,25};
         static PS_ALERT_CONF g_ip_low_sweep =     {0,10,10,10};
         static PS_ALERT_CONF g_ip_low_dist_ps =   {0,15,25,50};
         static PS_ALERT_CONF g_ip_med_ps =        {200,10,10,50};
         static PS_ALERT_CONF g_ip_med_decoy_ps =  {200,40,50,25};
         static PS_ALERT_CONF g_ip_med_sweep =     {30,10,10,10};
         static PS_ALERT_CONF g_ip_med_dist_ps =   {200,15,25,50};
         static PS_ALERT_CONF g_ip_hi_ps =         {200,3,3,10};
         static PS_ALERT_CONF g_ip_hi_decoy_ps =   {200,7,15,5};
         static PS_ALERT_CONF g_ip_hi_sweep =      {30,3,3,7};
         static PS_ALERT_CONF g_ip_hi_dist_ps =    {200,3,11,10};
         /*
         **  ICMP alert configurations
         */
         static PS_ALERT_CONF g_icmp_low_sweep =   {0,5,5,5};
         static PS_ALERT_CONF g_icmp_med_sweep =   {20,5,5,5};
         static PS_ALERT_CONF g_icmp_hi_sweep =    {10,3,3,5};
         static int ps_get_proto(PS_PKT *, int *);
  * 扫描检测逻辑
**以sense_level high 的 one_to_one 扫描即传统端口扫描为例**  
配置`static PS_ALERT_CONF g_tcp_hi_ps = {200,5,100,10}`
这里scanned 都是被扫描主机的统计。scanner 为攻击主机的信息。
    1. 比较`scanned->priority_count >= 5// conf->priority_count`
      1. `scanned->u_ip_count u_ip_count`  
`&& scanned->u_port_count >= 10 //conf->u_port_count`  
600 秒时间窗内 错误包>=5，不同连接ip数=10 即判断为扫描
    2. 比较`scanned->connection_count >= 200 //conf->connection_count`
      1. `scanned->u_ip_count u_ip_count`  
`&& scanned->u_port_count >= 10//conf->u_port_count`  
600 秒时间窗内 活跃连接数>=200，不同连接ip数=10 即判断为扫描
    static int ps_alert_one_to_one(PS_PROTO *scanner, PS_PROTO *scanned,
              PS_ALERT_CONF *conf, int proto)