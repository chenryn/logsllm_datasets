### Figures and Tables

**Figure 15: Targeted Attack - Histogram of Changed Features per Successful Impersonation**
- **X-axis:** Number of changed features per successful sample (%)
- **Y-axis:** Frequency
- **Data Points:**
  - 20-30: 10
  - 30-40: 8
  - 40-50: 6
  - 50-60: 4
  - 60-120: 2
- **References:**
  - Caliskan et al. [9]
  - Abuhamad et al. [1]

**Figure 14: Targeted Attack - Stacked Histogram of Changed Lines of Code (LOC) per Successful Impersonation**
- **X-axis:** Number of changed LOC per successful sample
- **Y-axis:** Frequency
- **Data Points:**
  - 0: y
  - 20: t
  - 40: i
  - 60: s
  - 80: n
  - 100: e
  - 120: D
- **References:**
  - Caliskan et al. [9]
  - Abuhamad et al. [1]
- **Note:** The original source files have an average of 74 lines (std: 38.44).

### Selected Authors and Template Transformations
We start with the scenario where we retrieve two samples of source code for each of the 20 programmers from various GCJ challenges, not part of the fixed 8 train-test challenges, to support the template transformations.

### Attack Performance
**Table 3: Success Rate of the Attack for Both Attribution Methods**
- **Caliskan et al. [9]:** 77%
- **Abuhamad et al. [1]:** 81%

**Figure 13: Matrix of Successful Impersonations**
- **Matrix Description:** The number of successful impersonations is visually depicted. Each cell indicates the absolute number of successful impersonations for the 8 challenges associated with each author pair.
- **Findings:** A large set of developers can be imitated by almost every other developer. Their stylistic patterns are well reflected by our transformers and thus can be easily forged. Only developers I and P have a small impersonation rate for Caliskan et al. [9], yet 68% and 79% of the developers can still imitate the style of I and P in at least one challenge.

### Attack Analysis
**Figure 14: Number of Altered Lines of Code**
- **Description:** In most cases, only 0 to 10 lines of code are affected.

**Figure 15: Distribution of Changed Features**
- **Description:** Both attribution methods exhibit a similar distribution as before in the untargeted attack, except that the left peak vanishes for the method of Caliskan et al. [9]. This means that each source file requires more than a few targeted changes to achieve an impersonation.

### Transformation Families Contribution
**Table 4: Usage of Transformation Families for Impersonation**
- **Transformation Family:**
  - **Cal. [9]:**
    - Control Transformers: 8.43%
    - Declaration Transformers: 14.11%
    - API Transformers: 29.90%
    - Miscellaneous Transformers: 9.15%
    - Template Transformers: 38.42%
  - **Abu. [1]:**
    - Control Transformers: 9.72%
    - Declaration Transformers: 17.88%
    - API Transformers: 19.60%
    - Miscellaneous Transformers: 4.76%
    - Template Transformers: 48.04%

**Findings:** All transformations are necessary to achieve the reported attack rates. The method by Abuhamad et al. [1] strongly relies on the usage of template transformers, while the families are more balanced for the approach by Caliskan et al. [9].

### Case Study
**Figure 16: Impersonation Example for GCJ Problem "Steed 2: Cruise Control"**
- **Original Source File (Author I):**
  ```cpp
  cout << d >> n;
  for (double i = 0; i < k; i++) {
      cin >> k >> s;
      // ...
  }
  ans = d / ans;
  ```

- **Transformed Version (Impersonated as Author P):**
  ```cpp
  int T, cas = 0;
  cin >> T;
  while (T--) {
      int d, n;
      cin >> d >> n;
      double t = 0;
      while (n--) {
          int k, s;
          cin >> k >> s;
          t = max((1.0 * d - k) / s, t);
      }
      double ans = d / t;
      printf("Case #%d: %.10f\n", ++cas, ans);
  }
  ```

- **Target Author's Original Source File (Author P):**
  ```cpp
  int T, cas = 0;
  cin >> T;
  while (T--) {
      int d, n;
      cin >> d >> n;
      double t = 0;
      while (n--) {
          int k, s;
          cin >> k >> s;
          t = max((1.0 * d - k) / s, t);
      }
      double ans = d / t;
      printf("Case #%d: %.10f\n", ++cas, ans);
  }
  ```

- **Transformations:**
  1. **Typedef:** Adds typedef and replaces all locations with previous type by novel typedef.
  2 - **For Statement:** Converts for-statement into an equivalent while-statement.
  3. **Init-Decl:** Moves a declaration out of the control statement to mimic the declaration behavior of while-statements.
  4. **Output API:** Substitutes C++ API for writing output by C API `printf`.

### Attack without Template
- **Scenario:** Adversary has no access to a template file of the target developer.
- **Results:**
  - **Caliskan et al. [9]:** 71%
  - **Abuhamad et al. [1]:** 69%
- **Findings:** Without a template, the approach by Abuhamad et al. [1] is harder to fool due to its reliance on simple lexical features and included libraries.

### Attack with Substitute Model
- **Scenario:** No access to the prediction of the original classifier, relying on a substitute model trained from separate data.
- **Results:**
  - **Transferability:** 79% of adversarial examples generated with the substitute model transfer to the original model.
  - **Success Rate on Original Model:** 52%
- **Findings:** Our attack successfully changes indicative features for a target developer across models.

### Summary
- **Findings:** An adversary can automatically impersonate a large set of developers with and without access to a template file. Both considered attribution methods can be abused to trigger false allegations, making real-world applications dangerous.

### Preserved Semantics and Plausibility
- **Preserved Semantics:** Verified using test files from each challenge of the GCJ competition. The output remains unchanged for each manipulated source code sample.
- **Plausible Code:** Conducted a discrimination test with 15 human subjects (4 undergraduates, 6 graduates, 5 professionals). Participants correctly classified 60% of the provided files, which is only marginally higher than random guessing.
- **Evasion of Layout Features:** Demonstrated that layout features can be trivially manipulated, so it is valid to restrict the approach to the forgery of lexical and syntactic features.

**Table 5: Study on Plausibility of Transformed Source Code**
- **Participant Group:**
  - **Undergraduate Students:** 66.7% (Std: 23.6%)
  - **Graduate Students:** 55.6% (Std: 15.7%)
  - **Professionals:** 60.0% (Std: 24.9%)
  - **Total:** 60.0% (Std: 21.8%)
  - **Random Guessing:** 50.0%