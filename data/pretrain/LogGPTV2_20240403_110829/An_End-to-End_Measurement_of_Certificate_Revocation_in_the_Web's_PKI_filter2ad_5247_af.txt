the number of revoked certiﬁcates (which is relatively easy
to determine), not the number of fresh, issued certiﬁcates
(which is unknown and much, much larger).
28Note that this does not take into account the time it takes to
push updated CRLSets to clients, which may add to the window of
vulnerability.
Figure 10: Number of days that clients are vulnerable to revoked
certiﬁcates using CRLSets. Revoked certiﬁcates on covered CRLs
are added quickly (within a day), but many revoked certiﬁcates
are removed from the CRLSet well before they expire.
As a proof-of-concept, we brieﬂy analyze the character-
istics of a Bloom Filter-based revocation list. As shown in
Figure 11, we examine the trade-oﬀs between ﬁlter size m,
the number of revoked certiﬁcates inserted into the ﬁlter n,
and false positive rate p. The number of hash functions k is
calculated using the optimal formula k =(cid:6) m
n ∗ log 2(cid:7).
Figure 11 highlights the advantages of our Bloom Filter-
based implementation over CRLSet.
The grey region
shows the minimum and maximum revocations covered
by CRLSets over time. For the same maximum ﬁle size
(256 KB), our Bloom Filter can store an order of magnitude
more revocations with only a 1% false positive rate (i.e., in-
stances where the CRL would be checked to avoid actually
blocking the connection). If we use a ﬁlter that is 2 MB in
size, we can cover 1.7 million revocations at this false pos-
itive rate; this represents 15% of all revocations across all
CRLs in our dataset.
The results of this analysis are similar to the examination
of the suitability of Bloom Filters for distributing revocation
information conducted by Langley [25]; Bloom Filters show
signiﬁcant promise as a mechanism for dramatically increas-
ing the coverage of CRLSets at little cost to clients. In fact,
Langley suggests that using a variant of Bloom Filters called
Golomb Compressed Sets [17] may serve to reduce the space
requirements even more.
7.5 Summary
To summarize, we ﬁnd that CRLSets have limited cover-
age, their coverage of revoked certiﬁcates is diminishing over
time, they are updated frequently but experience outages,
and they leave browsers vulnerable to unexpired revoked
certiﬁcates. While the CRLSet approach has a number of
Figure 11: Number of revocations that would ﬁt in Bloom Fil-
ters of various sizes, compared to CRLSets of today.
 1 10 100 1000 10000 100000OctNovDecJanFebMarAprNumber of Entires AddedDate (2014-2015)CRL EntriesCRLSet Entries 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 1000 10000CDFDaysDays to appearDays between removal and expiry 0.0001 0.001 0.01 0.1 1 10 10010K100K1M10MFalse Positive Rate (p)Revocations in the Bloom Filter (n)CRLSetm=256KBm=512KBm=1MBm=2MBm=16MBbeneﬁts to users, it is clear that the developers have chosen
to provide security only for a small fraction of sites in order
to decrease the amount of bandwidth required to dissemi-
nate revocation information; this leaves the vast majority of
popular sites uncovered.
8. RELATED WORK
SSL Certiﬁcate Ecosystem. There has been a long
thread of work that examines the SSL certiﬁcate ecosys-
tem, ranging from the contents of diﬀerent browser/OS root
stores [36,50] to the trust relationships between CAs [14] and
the patterns of certiﬁcates advertised by servers [22]. While
Durumeric et al. [14] brieﬂy examine certiﬁcate revocation
in their study, our work builds on theirs by examining the
dynamics of revocation behavior, diﬀerent revocation proto-
cols, and the cost of obtaining revocation information.
Researchers have proposed ideas to reduce the level of
trust placed in CAs. Signiﬁcant recent work has gone into
increasing the transparency of the SSL ecosystem [24, 29,
30, 39, 43], ideally leading to better accountability. For ex-
ample, the Certiﬁcate Transparency Project [29] introduces
public logs to monitor all certiﬁcates issued by CAs. Oth-
ers have proposed alternate architectures to the current CA-
based system [9,12,47], often requiring modiﬁcations to both
servers and clients. The DANE [47] proposal, for example,
allows the owner of a DNS domain to distribute their public
keys via DNS itself (thereby obviating the need for SSL cer-
tiﬁcates), while relying on DNSSEC to secure the binding.
Studying and Improving Revocations. There has been
signiﬁcant debate over the actual eﬀectiveness of certiﬁcate
revocation in practice [27, 28, 32], and researchers have at-
tempted to improve the certiﬁcate revocation process and
dissemination mechanisms. For example, there are propos-
als for very short certiﬁcate lifetimes [46], ideally making
revoking a certiﬁcate as easy as not renewing it. Alterna-
tively, Schulman et al. [42] proposed a broadcast system that
disseminates revocation data over FM radio.
Two recent security incidents (a Debian vulnerability
and the Heartbleed bug) provided opportunities to study
whether site operators who should revoke their certiﬁcates
actually do [13, 51, 52]. The results are disheartening, as
only around 10% of vulnerable certiﬁcates were correctly re-
voked. Our work is complementary: we look at a larger set
of certiﬁcates over a longer period of time, we investigate
the burden that disseminating revocation information has
on CAs, and explore when clients obtain this information.
Client-side Certiﬁcate Validation. Finally, much work
has gone into understanding client-side behavior when cre-
ating SSL connections. Recent work has shown that many
pieces of non-browser software do not correctly implement
SSL checks, often due to mis-use of SSL APIs [18,19]. Others
have shown that the SSL libraries themselves are buggy [10].
Because browsers often ask users whether or not to proceed
when the SSL connection is suspicious, other work has fo-
cused on how browsers present warnings and how users re-
act [6, 7]. Taken together, these results show that correctly
implementing SSL validation is diﬃcult to get right; our
results show that this situation is further complicated by
browsers that decline to check revocation information at all.
The GRC browser revocation test [21] is similar to our
“test suite”, but ours is much more comprehensive (the GRC
test only contains a single certiﬁcate). As a result, our con-
clusions diﬀer: while Firefox performed well on their test, we
found that Firefox fails in other conﬁgurations of certiﬁcate
chains/revocation protocols.
9. CONCLUDING DISCUSSION
Certiﬁcate revocation is a necessary component of any
PKI, but it comes with costs, both real and perceived: CAs
carry the cost of disseminating revocation information, while
browsers risk the cost of increased web page load times. In
the trade-oﬀ between low communication overheads and se-
curity, both ends of certiﬁcate revocation (those who issue
and those who fetch) are naturally tempted towards the for-
mer.
Indeed, the very utility of revocations has been de-
bated and doubted [28] by the security community, but to
date, these debates have had to largely depend on anecdotal
CA and browser behavior.
We have presented in this paper an empirical measure-
ment of the options at all parties’ disposal—website admin-
istrators, CAs, and browsers—in terms of the communica-
tion overhead costs they impose and the extent to which
they are currently being employed.
Overall, our results show that,
in today’s Web’s PKI,
there is extensive inaction with respect to certiﬁcate revo-
cation. While many certiﬁcates are revoked (over 8% of
fresh certiﬁcates and almost 1% of alive certiﬁcates), many
web browsers either fail to check certiﬁcate revocation in-
formation or soft-fail by accepting a certiﬁcate if revocation
information is unavailable.
On the positive side, our results also demonstrate that
there are several clear paths to improvement. To reduce
CRL sizes, CAs can simply maintain more, smaller CRLs
(in the extreme, each certiﬁcate could be assigned a unique
CRL, resulting in an approximation of OCSP)—surprisingly
few CAs currently take such an approach (§5) and there-
fore incur greater bandwidth costs than strictly necessary.
A promising improvement is OCSP Stapling, as it reduces
CA bandwidth costs as well as web page load times—yet,
not all browsers support it, and some that do simply ig-
nore the responses. A more pervasive deployment of OCSP
Stapling, at both websites and browsers, could lead to an
immediate improvement in user security at little additional
performance cost, particularly if the Multiple OCSP Staple
Extension [37] were adopted to allow intermediate certiﬁ-
cates to be stapled. Finally, we show that a straightforward
modiﬁcation to CRLSets could increase their coverage by
several orders of magnitude.
From these results, we conclude that certiﬁcate revocation
ought not be given up on—that indeed it serves a critical yet
overlooked role that, with proper support from all parties,
can be achieved at a cost far outweighed by the beneﬁts. To
realize this, we believe continued measurement and valida-
tion of future browsers will be of utmost importance, and
to this end have made our data and our browser test suite
publicly available at http://www.sslresearch.org
Acknowledgments
We thank the anonymous reviewers for their helpful com-
ments. This research was supported by NSF grants CNS-
1054233, CNS-1409191, CNS-1319019, CNS-1421444, and
CNS-1345284, by USAF award FA8750-14-2-0150, and by
the NSA as part of a Science of Security lablet.
10. REFERENCES
[1] Network Security Services. Mozilla Developer Network,
2014. http://mzl.la/1DRKqGZ.
[2] CRLSets. The Chromium Projects, 2015.
http://bit.ly/1JPsUeC.
[3] Network Stack. The Chromium Projects, 2015.
http://bit.ly/1GYuMhE.
[4] B. Andrei and M. Michael. Network applications of bloom
ﬁlters: A survey. Int. Math., 1(4), 2004.
[5] C. Arthur. DigiNotar SSL certiﬁcate hack amounts to
cyberwar, says expert. The Guardian.
http://www.theguardian.com/technology/2011/sep/05/
diginotar-certificate-hack-cyberwar.
[6] D. Akhawe and A. P. Felt. Alice in Warningland: A
Large-scale Field Study of Browser Security Warning
Eﬀectiveness. USENIX Security, 2013.
[7] D. Akhawe, B. Amann, M. Vallentin, and R. Sommer.
Here’s My Cert, So Trust Me, Maybe?: Understanding TLS
Errors on the Web. WWW, 2013.
[8] An Evaluation of the Eﬀectiveness of Chrome’s CRLSets.
Gibson Research Corporation.
https://www.grc.com/revocation/crlsets.htm.
[9] A. Bates, J. Pletcher, T. Nichols, B. Hollembaek, and
K. R.B. Butler. Forced Perspectives: Evaluating an SSL
Trust Enhancement at Scale. IMC, 2014.
[10] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V.
Shmatikov. Using Frankencerts for Automated Adversarial
Testing of Certiﬁcate Validation in SSL/TLS
Implementations. IEEE S&P, 2014.
[11] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley,
and W. Polk. Internet X.509 Public Key Infrastructure
Certiﬁcate and Certiﬁcate Revocation List (CRL) Proﬁle.
RFC 5280, IETF, 2008.
[12] Convergence. http://convergence.io.
[13] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M.
[27] A. Langley. Revocation still doesn’t work. 2014.
https://www.imperialviolet.org/2014/04/29/
revocationagain.html.
[28] A. Langley. No, don’t enable revocation checking. 2014.
https://www.imperialviolet.org/2014/04/19/
revchecking.html.
[29] B. Laurie, A. Langley, and E. Kasper. Certiﬁcate
Transparency. 2013.
https://tools.ietf.org/html/rfc6962.
[30] S. Matsumoto, P. Szalachowski, and A. Perrig. Deployment
Challenges in Log-based PKI Enhancements. EuroSec,
2015.
[31] Mozilla piles on China’s SSL cert overlord: We don’t trust
you either. http://bit.ly/1GBPwfG.
[32] NetCraft. How certiﬁcate revocation (doesn’t) work in
practice. 2013.
http://news.netcraft.com/archives/2013/05/13/how-
certificate-revocation-doesnt-work-in-practice.html.
[33] NetCraft. OCSP Server Performance in April 2013. 2013.
http://news.netcraft.com/archives/2013/05/23/ocsp-
server-performance-in-april-2013.html.
[34] D. Olivier. ASN. 1 communication between heterogeneous
systems. Morgan Kaufmann, 2001.
[35] OS X Yosemite: List of available trusted root certiﬁcates.
https://support.apple.com/en-us/HT202858.
[36] H. Perl, S. Fahl, and M. Smith. You Won’t Be Needing
These Any More: On Removing Unused Certiﬁcates from
Trust Stores. FC, 2014.
[37] Y. Pettersen. The Transport Layer Security (TLS) Multiple
Certiﬁcate Status Request Extension. RFC 6961 (Proposed
Standard), IETF, 2013.
[38] Qualys SSL Pulse.
https://www.trustworthyinternet.org/ssl-pulse/.
[39] M. D. Ryan. Enhanced Certiﬁcate Transparency and
End-to-End Encrypted Mail. NDSS, 2014.
Bailey, F. Li, N. Weaver, J. Amann, J. Beekman, M. Payer,
and V. Paxson. The Matter of Heartbleed. IMC, 2014.
[40] Rapid7 SSL Certiﬁcate Scans.
https://scans.io/study/sonar.ssl.
[14] Z. Durumeric, J. Kasten, M. Bailey, and J. A. Halderman.
Analysis of the HTTPS Certiﬁcate Ecosystem. IMC, 2013.
[15] C. Ellison and B. Schneier. Ten Risks of PKI: What You’re
not Being Told about Public Key Infrastructure. Computer
Security Journal, 16(1), 2000.
[16] EFF SSL Observatory. https://www.eff.org/observatory.
[17] P. Felix, S. Peter, and S. Johannes. Cache-, hash- and
space-eﬃcient bloom ﬁlters. Experimental Algorithms,
Springer, 2007.
[18] S. Fahl, M. Harbach, T. Muders, L. Baumg¨artner, B.
Freisleben, and M. Smith. Why Eve and Mallory Love
Android: An Analysis of Android SSL (in)Security. CCS,
2012.
[19] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh,
and V. Shmatikov. The Most Dangerous Code in the
World: Validating SSL Certiﬁcates in Non-browser
Software. CCS, 2012.
[20] P. Gutmann. Engineering Security. 2014. https:
//www.cs.auckland.ac.nz/~pgut001/pubs/book.pdf.
[41] Revoking Intermediate Certiﬁcates: Introducing OneCRL.
Mozilla Security Blog. http://mzl.la/1zLFp7M.
[42] A. Schulman, D. Levin, and N. Spring. RevCast: Fast,
Private Certiﬁcate Revocation over FM Radio. CCS, 2014.
[43] P. Szalachowski, S. Matsumoto, and A. Perrig. PoliCert:
Secure and Flexible TLS Certiﬁcate Management. CCS,
2014.
[44] S. Santesson, M. Myers, R. Ankney, A. Malpani, S.
Galperin, and C. Adams. X.509 Internet Public Key
Infrastructure Online Certiﬁcate Status Protocol - OCSP.
RFC 6960 (Proposed Standard), IETF, 2013.
[45] StartSSL: Frequently Asked Questions.
https://www.startssl.com/?app=25.
[46] E. Topalovic, B. Saeta, L.-S. Huang, C. Jackson, and D.
Boneh. Towards Short-Lived Certiﬁcates. W2SP, 2012.
[47] The DNS-Based Authentication of Named Entities (DANE)
Transport Layer Security (TLS) Protocol: TLSA. 2012.
https://tools.ietf.org/html/rfc6698.
[48] Trustwave to escape ’death penalty’ for SSL skeleton key.
[21] S. Gibson. Security Certiﬁcate Revocation Awareness Test.
http://bit.ly/1RbPlNe.
2014. https://www.grc.com/revocation.htm.
[22] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The
SSL Landscape – A Thorough Analysis of the X.509 PKI
Using Active and Passive Measurements. IMC, 2011.
[23] ICSI SSL Notary. http://notary.icsi.berkeley.edu.
[24] T. H.-J. Kim, L.-S. Huang, A. Perring, C. Jackson, and V.
Gligor. Accountable Key Infrastructure (AKI): A Proposal
for a Public-key Validation Infrastructure. WWW, 2013.
[25] A. Langley. Smaller than Bloom ﬁlters. 2011. https:
//www.imperialviolet.org/2011/04/29/filters.html.
[26] A. Langley. Revocation checking and Chrome’s CRL. 2012.
https:
//www.imperialviolet.org/2012/02/05/crlsets.html.
[49] University of Michigan Daily Full IPv4 HTTPS
Handshakes. https://scans.io/series/https-full-ipv4.
[50] N. Vallina-Rodriguez, J. Amann, C. Kreibich, N. Weaver,
and V. Paxson. A Tangled Mass: The Android Root
Certiﬁcate Stores. CoNEXT, 2014.
[51] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S.
Savage. When Private Keys Are Public: Results from the
2008 Debian OpenSSL Vulnerability. IMC, 2009.
[52] L. Zhang, D. Choﬀnes, T. Dumitras, D. Levin, A. Mislove,
A. Schulman, and C. Wilson. Analysis of SSL certiﬁcate
reissues and revocations in the wake of Heartbleed. IMC,
2014.