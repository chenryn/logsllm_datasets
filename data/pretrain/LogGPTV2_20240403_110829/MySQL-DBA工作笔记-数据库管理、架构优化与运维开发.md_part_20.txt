MySQL Enterprise Backup
--backup-dir=/root/backup
14mins
--port=33081
--port=33081
--port=33081
---
## Page 127
果文件。
数据导出，如下：
些小技巧可供参考。
础上做下补充，除了库级别的备份，表级别的数据导出和导入需求更加丰富，如下的一
实时的同步 binlog 数据到远程备份服务器，
于数据恢复的效率和意义更大。
的明细，如果我们在一些场景下不启用全量的备份，而使用 binlog 来实现逆向操作，对
的，那就是日志备份，MySQL 的binlog 就像一个时光记录仪，里面包含了所有发生变化
备份 binlog 的工具可以使用官方的 mysqlbinlog 命令，它有一个选项 stop-never 可以
  aa.html
相信这几款备份恢复工具，让大家对备份恢复有了一个初步的认识，我们在这个基
mysqlbinlog
方式7：生成操作日志
方式6：导出xml格式的文件
Twu'e  notee;
mysql>
MySQL数据恢复
FIELDS
TERMINATED
INFILE'data.log' INTO TABLE data_log
1000000
BY
Deleted:0 Skipped: 10 Warnings:0
一
TERMINATED
BY
'\n
---
## Page 129
键，
过 strings 解析可以看到对应的二进制日志，当然事务的 Xid 也有的。
/home/databak/fu11/20170322
份目录在/home/databak/full/20170322下。
来进行说明。
恢复方案，抛砖引玉来带给大家一些参考。
司的生死存亡也息息相关。本小节力求通过几个维度的思考来梳理一下常见的一些数据
innobackupex
里面有着备份恢复所有的检查点LSN，从下面的数据来看，这是一个全备，因为
xtrabkup
xtrabackup_55logfile 结尾的文件的内容无法直接查看，但是可以用 strings 来看。通
# more xtrabackup_binary
binary 结尾的文件是备份中用到的可执行文件,这个可以对应几个版本,比如xtrabackup_51，
646M
比如我需要做一个全备，在备份命令中加几个辅助选项，备份使用 socket 连接，备
08360000000039DB下面的这个文件就更特别了，这个是作为数据的备份恢复的关
. /mysql-bin.000009
MySQLXid
对于上面生成的文件，我们简单看一下。
Z
备份后查看对应的目录，
对于数据恢复，我们需要打好基础的就是 xtrabackup 的恢复，我们通过如下的案例
393102654
9M
恢复方法1：使用xtrabackup 进行数据全量恢复
从这个思路来考虑，我可以列举出一系列的恢复“惨案”，不光大公司中招，中小公
.OK
12K
.0G
.0G
9
./xtrabackup_logfile
. /xtrabackup_checkpoints
./performance_schema
./mysql
./mobile_billing
/mobile_activity
./gm
./backend
/xtrabackup_binary
/backup-my.cnf
/ibdatal
，备份的数据情况如下，整体看来和源库的目录结构一样
--no-timestamp --no-lock --throttle=100
-socket=/home/mysql/mysql.sock
第3章MySQL基础运维面面观丨107
---
## Page 130
108丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
日志文件和 ibdata。
现主要就在于 logfile 和 ibdata，是使用 apply-log 这个选项实现的。
不一致的状态，在启动数据库的时候需要走一个前滚，然后是一个回滚的操作。这个体
们备份数据的时候，存在未提交的事务，但是数据却存在于备份中，这样就是一个数据
我们往下看。
样的目录结构来。
from_lsn=0。
整个过程就是大量的拷贝工作。
innobackupex
这个步骤完成之后就是最关键的还原恢复了。这个过程是使用copy-back 的选项实现的。
默认会使用100M 的内存，也可以使用选项 use-memory 来调整,整个过程会重构 redo
xtrabackup_55 --defaults-file="/home/databak/ful1/20170322/backup-my.cnf"
这个过程其实就会隐式调用 xtrabackup_55这个可执行文件，调用的命令类似于：
innobackupex
我们使用如下的方式来做。
这里的数据恢复分为两个步骤：prepare 和还原恢复；prepare 的意义就在于，如果我
所以 xtrabackup 这样一个热备工具，有点类似有文件级别的拷贝，但是不止于此,
112K./test
2.6G
#du
而在源库的目录结构下，我们稍作过滤，也会得到一个几乎和这个工具备份出来一
last_lsn 
# cat xtrabackup_checkpoints
完成之后需要修改一下文件的属主，默认是root，然后启动即可。
我们来看如何做数据恢复，还是使用 innobackupex这个工具，只是参数有些差别。
from
OG
.5M
2K
OG
./mysql.sock
6M
b0 A- daxlqpouut A- daxluta-bsw A- dax|*/. us- r
./mysql
./ib_lru_dump
./backend
/ibdatal
/gm
：30754980731
=30754980731
--defaults-file=/home/databak/full/20170322/backup-my.cnf
--defaults-file=/home/databak/full/20170322/backup-my.cnf
---
## Page 131
/home/databak/incre/20170322
目录，比如 2017-03-22_18-07-38。
的备份，就是一个差异增量备份。
周
备份其实有累计增量和差异增量了。
所以需要指向全库备份的目录。
数 incremental-basedir=/home/databak/incre/20170322下不存在，因为这个是一个新目录，
/usr/bin/innobackupex line 349.
--incremental-basedir=/home/databak/incre/20170322
表test2，如下：
'/home/databak/incre/20170322/2017-03-22_18-05-32/xtrabackup_suspended'
周二的一个增备，这就是一个累
然后修复后备份就没问题了，因为有了这个参考点LSN，
下面的是一个累计增量备份。
这个怎么理解呢，比如周日做一个全
innobackupex:
xtrabackup:
 innobackupex: Waiting for ibbackup
170322
innobackupex
使用增备得有一个参考点，从哪里开始，即从哪个LSN开始，这个LSN在指定的参
原因就在于里面的一个关键文件
但是很不幸，执行失败了。这个错误带有典型的意义。
使用的命令如下：
因为刚刚已经做了全备，
Query OK,
Query OK,
我们接下来看看增量备份和恢复，先来创建一些数据。我们在数据库 test下创建一个
insert
恢复方法2：使用xtrabackup 进行数据增量恢复
kup
18:05:34
rows affected
rows affect
test2
Error:
error:
innobackupex:
/home/
我们继续做一个增备。
ced
计增量备份，
-defaults-file=/etc/my.cnf
因为基准是上次的一个全备，
(0.00 sec)
failed
(0.01
_checkpoints
备
sec)
Starting
而
周
child
周三的时候做一
to
做一个增备，
process
read
ibbackup
cannot
所以需要要说明的是这个
第3章MySQL 基础运维面面观|109
备份后会自动生成一个
一个周二至周三数据变化
周二做一个周日全备到
metadata
has
-suspend-at-end
with
--incremental
--incremental
died
--user=root
-user=root
command:
ado
file
from
at
---
## Page 132
110丨MySQL DBA 工作笔记：数据库管理、架构优化与运维开发
是.delta，.meta 之类的文件。
/home/databak/fu11/20170322
-incremental/home/databak/incre/20170322
这样做其实是一个 merge 的过程，对于增备来说，会生成如下的几个文件，都
innobackupex--defaults-file=/etc/my.cnf--user=root--apply-log--redo-only
innobackupex --defaults-file=/etc/my.cnf --user=root --apply-log --redo-only
innobackupex
而我们在一个增备之后又插入了一些数据，这个怎么继续恢复呢，还是 prepare的过
这个过程我们相当于完成了一个全备加一个增备的数据恢复过程。
这个时候表test2里面的数据是几条？是2条。
这个时候我们使用如下的方式来还原恢复。
last_lsn 
from
而 prepare 之后的全备里面的 checkpoint 文件其实已经发生了变化，如下：
to
backup_
[ 2017-03-22_18-07-38]# cat *checkpoints
增备目录下的 checkpoint 文件就有意思了，有一个很清晰的LSN 的增量描述。
-rw-r--r-
-rw-r--r--
-rw-r--r--
total 132
[test]# 1l
然后是增备，注意这里加黑的参数。
整个恢复的过程是下面的形式，还是一个 prepare 的过程，首先是全备，如下：
下面的是一个差异增量备份。基于上一次的增备。
这样表 test2 就有 4 条数据了，
cat *checkpoints
为了区别两次增量，我继续插入两行数据
Lsn
Isn
type
：30754984465
=
=30754984465
30754984465
：30754980731
1 mysql mysql 61 Mar 22 17:58 db.opt
root root 18Mar 22
full-prepared
_incremental
mysql
root
mysql
81920 Mar