Furthermore, we require the digital signature scheme to be correct, i.e., for all (dsk, dpk) ∈ KeyGen(κ)
and all M ∈ {0, 1}∗, DVerify(DSign(M, dsk), M, dpk) = true must hold. A digital signature scheme
is secure, if it is existentially unforgeable under adaptively chosen-message attacks (UF-CMA) [10].
Note that in practice, the sign and verify algorithms will typically use a hash function to map input
messages to constant size strings, which is also known as the hash-then-sign paradigm.
4.3 Polynomial Commitments
In [12], Kate et al. introduced the notion of constant-size polynomial commitments. The authors
present two distinct commitment schemes, whereas one is computationally hiding (PolyCommitDL)
and the other is unconditionally hiding (PolyCommitPed). For our scheme, we are using an uncondi-
tionally hiding and computationally binding variant of PolyCommitDL for reducible, monic polyno-
mials. The constructions of [12] use an algebraic property of polynomials f (X) ∈ Zp[X]. Namely,
that (X − λ) perfectly divides the polynomial f (X) − f (λ) for λ ∈ Zp: Now, we brieﬂy present the
PolyCommitDL construction of [12].
Setup(κ, t): Pick two groups G, GT of the same prime order p (with p being a prime of bitlength
κ) having a symmetric pairing e : G × G → GT such that the t-SDH assumption holds. Choose
a generators P ∈ G and α ∈R Z∗
p and output ppk = (G, GT , p, e, P, αP, . . . , αtP ) as well as
psk = α.
Commit(ppk, f (X)): Given f (X) ∈ Zp[X] with deg(f ) ≤ t and compute the commitment C =
f (α)P ∈ G and output C.
Open(ppk,C, f (X)): Output f (X).
Verify(ppk,C, f (X)): Verify whether
C = f (α)P
holds and output true on success and false otherwise. 2
2 Subsequently, we use f (α)P as short-hand notation for(cid:80)deg(f )
be evaluated in case of a trapdoor commitment, i.e., with α known.
f (i)(αiP ), although f (α) as such can only
i=0
CreateWit(ppk, f (X), γ): Compute φ(X) = f (X)−f (γ)
and Wγ = φ(α)P and output (γ, f (γ), Wγ).
VerifyWit(ppk,C, γ, f (γ), Wγ): Verify that f (γ) is the evaluation of unknown f at point γ. This is
X−γ
done by checking whether
e(C, P ) = e(Wγ, αP − γP ) · e(f (γ)P, P )
holds. Output true on success and false otherwise.
√
A polynomial commitment scheme is secure if it is correct, polynomial binding, evaluation binding
and hiding (cf. [12]). The above scheme can be proven secure under the t-SDH assumption in G,
2κ. For the proof we refer the reader to [12]. Notice that α must remain unknown
as long as t <
to the committer (and thus the setup has to be run by a trusted third party), since, otherwise, it
would be a trapdoor commitment scheme.
Moreover, we note that we do not need the algorithms CreateWit and VerifyEval in our construc-
tion, since we do not need to prove valid evaluations of the polynomial f (X) without revealing the
polynomial itself.
5 Blank Digital Signatures
In this section we introduce the notion of blank digital signatures as well as the according secu-
rity model. As a prerequisite we ﬁrst need to introduce representations and encodings for message
templates and template instantiations.
5.1 Template and Message Representation
In the following we introduce a representation for message templates. A message template T describes
all potential template instantiations that correspond to a single template. More formally, a message
template is deﬁned as follows.
Deﬁnition 5 (Message Template). A message template T is a sequence of non-empty sets Ti =
{Mi1 , . . . , Mil} of bitstrings Mij and uniquely identiﬁed by idT . If the size of Ti is one, then the set
Ti is called ﬁxed element of T and exchangeable element otherwise. The set of all message templates
is denoted by T.
An exchangeable element Ti represents allowed substitutions, i.e., Ti can be replaced by any of its
elements Mij in order to obtain an instantiation of the template. Let n be the sequence length of
T , then n is called length of template T . Finally, with |T | we denote the size of template T , that is
|T | =(cid:80)n
i=1 |Ti|.
Deﬁnition 6 (Template Instantation). A template instantiation M of some template T =
i=1 is derived from T as follows. For each 1 ≤ i ≤ n choose exactly one element Mi ∈ Ti
(Ti)n
and set M = (Mi)n
i=1. A template instantiation M is called valid, which we denote by M (cid:22) T ,
if it represents choices that were intended by the originator of template T . Furthermore, we use
MT = {M : M (cid:22) T } to denote the set of all possible template instantiations of a template T .
A message template T is called
– trivial if it does not contain any exchangeable elements. Note that this implies |T | = n, and
– minimal if no two ﬁxed elements are adjacent.
The minimal property guarantees that the number of ﬁxed elements is kept minimal. The complement
of the template instantiation M denoted as M is a sequence of sets of bitstrings and represents all
unused choices in the exchangeable elements, that is M = (Ti \ {Mi})n
i=1 for an instantiation
M = (Mi)n
i=1 of T = (Ti)n
i=1.
Now, we give a short example to illustrate our concept.
Example 1. Let T = (T1, T2, T3) with
– T1 = {“I, hereby, declare to pay ”},
– T2 = {“100$”, “120$”, “150$”} and
– T3 = {“ for this tablet device.”}.
Here, T1 and T3 are ﬁxed elements and T2 is an exchangeable element with three choices. A template
instantiation could, for instance, be
M = (“I, hereby, declare to pay ”, “120$”, “ for this tablet device.”).
The complement of template instantiation M is then M = (∅,{“100$”, “150$”},∅).
In the following, we deﬁne encodings of templates and template instantiations, for which we
use polynomials in the Euclidean ring Zp[X]. This allows us to perform polynomial division with
remainder, which is essential to our construction.
Deﬁnition 7 (Template Encoding). Let T =(Ti)n
i=1 be a message template and H : {0, 1}∗ → Zp
be a full-domain cryptographic hash function. A template encoding function t : T → Zp[X] is deﬁned
as follows:
T (cid:55)→ n(cid:89)
(cid:89)
i=1
M∈Ti
(cid:0)X − H(M(cid:107)idT (cid:107)i)(cid:1).
The evaluation t(T ) results in a so-called template encoding polynomial tT ∈ Zp[X] of degree |T |.
2κ, as otherwise the
Note that the degree of the resulting polynomial needs to be bounded by
security of the polynomial commitment scheme is no longer guaranteed. However, this has no impact
in practice, since the polynomial can only be created by a polynomial time algorithm.
√
Deﬁnition 8 (Message Encoding). Similar to Deﬁnition 7, a message encoding function mT :
MT → Zp[X] with respect to a message template T is deﬁned as follows:
M (cid:55)→ n(cid:89)
i=1
(X − H(Mi(cid:107)idT (cid:107)i)),
where M = (Mi)n
i=1. We call mM = mT (M) ∈ Zp[X] message
encoding polynomial. Furthermore, we deﬁne the complementary message encoding function mT :
MT → Zp[X]:
i=1 is an instantiation of T = (Ti)n
M (cid:55)→ n(cid:89)
(cid:89)
(cid:0)X − H(M(cid:107)idT (cid:107)i)(cid:1).
i=1
M∈(Ti\{Mi})
We call mM = mT (M) = ( tT
with respect to template T .
mM ) ∈ Zp[X] the complementary message encoding polynomial of mM
Typically, a template instantiation M = (Mi)n
In the following, we consider all polynomials to be expanded. To do so, we assume that an algorithm
Exp, which carries out the polynomial expansion, is applied implicitly to all polynomials.
i=1 (cid:22) T will be mapped to a single bitstring M =
M1(cid:107) . . .(cid:107)Mn. We denote the mapping leading from M to M by λ(M,I) = M, where I = (|Mi|)n
is a descriptional sequence holding the lengths of the n elements of M as given by template T .
For sake of simplicity, we consider all templates to be non-trivial as well as minimal and do not
diﬀerentiate between a template instantiation M and its corresponding bitstring M .
i=1
5.2 Blank Digital Signature Scheme
Now, we are able to formally deﬁne what we mean by a blank digital signature scheme.
Deﬁnition 9 (Blank Digital Signature Scheme). A blank digital signature scheme BDSS con-
sists of a tuple (KeyGen, Sign, VerifyT , Inst, VerifyM) of polynomial-time algorithms:
VerifyT (T , σT , pp, dpkO, skT
specifying the maximum template size. It generates public parameters pp and returns them.
KeyGen(κ, t): This probabilistic algorithm gets the security parameter κ ∈ N and a value t ∈ N
Sign(T , pp, dskO, dpkP): This probabilistic algorithm takes a message template T , the public pa-
rameters pp, the originator’s signing key dskO, the proxy’s veriﬁcation key dpkP and outputs a
template signature σT and a template dependent private key for the proxy skT
P .
P , dpkP): This deterministic algorithm takes a template T , its signature
σT , the public parameters pp, the originator’s signature veriﬁcation key dpkO, the private key
P , and the proxy’s veriﬁcation key dpkP. It outputs a bit b ∈ {true, false}
of the proxy skT
indicating whether σT is a valid signature for T .
P , dskP): This probabilistic algorithm takes a template T , an instantiation M,
Inst(T ,M, σT , pp, skT
a template signature σT , the public parameters pp, the private key of the proxy skT
P , the signing
key dskP of the proxy and outputs a message signature σM.
VerifyM(M, σM, pp, dpkP, dpkO): This deterministic algorithm takes a template instantiation M of
T , the signature σM, the public parameters pp, the signature veriﬁcation key of the proxy dpkP,
and the signature veriﬁcation key of the originator dpkO. It outputs a bit b ∈ {true, false}
indicating whether σM is a valid signature for M (cid:22) T .
5.3 Security Deﬁnitions
In the following, we deﬁne the security properties a blank digital signature scheme needs to satisfy
in order to be secure. Therefore, we start with a brief overview of the required properties.
Correctness: The scheme must be correct in terms of signature correctness, signature soundness
and instantiation correctness, i.e., both template and message signatures are accepted when valid
and template signatures of the originator are binding.
Unforgeability: No entity without knowledge of the signing keys dskO, dskP and skT
P should be able
to forge template or message signatures. This is analogous to the security of traditional digital
signatures.
template T should not be able to forge template or message signatures.
Immutability: The proxy having access to skT
Privacy: No entity without knowledge of the signing keys dskO, dskP and skT
P and dskP, when given a template signature σT for
determine elements of templates, which have not so far been revealed through instantiations.
P should be able to
Subsequently, the security deﬁnitions are discussed in more detail.
Correctness For a blank digital signature scheme the usual correctness properties are required to
hold, i.e., genuinely signed templates and message signatures are accepted. Furthermore, we require
template signatures to be sound, i.e., the originator commits to exactly one template by creating a
template signature.
Signature correctness: For any key pairs (dskO, dpkO) ∈ DKeyGen(κ) and (dskP, dpkP) ∈ DKeyGen(κ),
any BDSS parameters pp ∈ KeyGen(κ, t), any template T and any honestly computed template sig-
nature
σT = Sign(T , pp, dskO, dpkP),
we require that the veriﬁcation
VerifyT (T , σT , pp, dpkO, skT
P , dpkP) = true
holds.
Signature soundness: For any key pairs (dskO, dpkO) ∈ DKeyGen(κ) and (dskP, dpkP) ∈ DKeyGen(κ),
any BDSS parameters pp ∈ KeyGen(κ, t), any template T and any honestly computed template sig-
nature
σT = Sign(T , pp, dskO, dpkP),
we require that for any (skT ∗
P ,T ) the probability that the veriﬁcation
P ,T ∗) (cid:54)= (skT
VerifyT (T ∗, σT , pp, dpkO, skT ∗
P , dpkP) = true
holds is negligibly small as a function of the security parameter κ.
Instantiation correctness: For any key pairs (dskO, dpkO) ∈ DKeyGen(κ) and (dskP, dpkP) ∈
DKeyGen(κ), any BDSS parameters pp ∈ KeyGen(κ, t), any template T , any honestly computed sig-
nature σT and corresponding skT
P such that
VerifyT (T , σT , pp, dpkO, skT
P , dpkP) = true,
any honestly computed message signature
σM = Inst(T ,M, σT , pp, skT
P , dskP),
we require that the veriﬁcation
VerifyM(M, σM, pp, dpkP, dpkO) = true
holds.
Deﬁnition 10 (Correctness). A BDSS is correct if it satisﬁes signature correctness, signature
soundness and instantiation correctness.
Unforgeability Unforgeability in the context of blank digital signatures resembles the notion of
(existential) unforgeability against adaptive chosen message attacks (UF-CMA) in classic digital
signature schemes. We adapt the classical notion to our setting in Game 1. Unforgeability is a
protection against attacks mounted by parties not having access to any secret information. Here,
the adversary obtains the public keys from the challenger in the setup phase. In the query phase, A
has access to two signing oracles, a template signing and a message signing oracle.
Deﬁnition 11 (Unforgeability). A BDSS is called unforgeable, if for any polynomial-time algo-
rithm A the probability of winning Game 1 is negligible as a function of security parameter κ.
Immutability Immutability guarantees that no malicious proxy can compute signatures for tem-
plates or template instantiations not intended by the signer. Immutability is similar to unforgeability,
but, in contrast to unforgeability, immutability deals with malicious insiders (proxies).
The immutability game, as stated in Game 2, diﬀers only slightly from the unforgeability game.
Here, the adversary additionally obtains dskP from the challenger in the setup phase. In the query
phase, A has access to two signing oracles, where the template signing oracle additionally returns