**Breaking the Security Wall of S7CommPlus**

**Author:** Cheng Lei, NSFOCUS

**Related Work:**
- **Dillon Beresford.** *Exploiting Siemens Simatic S7 PLCs.* Black Hat 2011 USA. (S7Comm Protocol)
- **Ralf Spenneberg et al.** *PLC-Blaster: A Worm Living Solely in the PLC.* Black Hat 2016 USA. (Early S7CommPlus Protocol)

**Focus of This Talk:**
This presentation will primarily focus on the current encrypted S7CommPlus protocol.

**Introduction to Programmable Logic Controllers (PLCs):**
PLCs are essential components in industrial control systems, responsible for process control. A typical PLC includes a Central Processing Unit (CPU), digital and analog input/output modules, communication modules, and process control modules such as PID controllers.

**Siemens PLCs and Protocols:**
- **S7-200, S7-300, S7-400:** These models use the S7Comm protocol.
- **S7-1200 v3.0:** Utilizes the early S7CommPlus protocol.
- **S7-1200 v4.0, S7-1500:** These models employ the current encrypted S7CommPlus protocol.

**TIA Portal:**
TIA Portal is the configuration and programming software used for Siemens PLCs.

**Replay Attacks:**
Replay attacks have been commonly employed in PLC security breaches. These attacks involve capturing and retransmitting communication sequences, often with the help of tools like Wireshark.

**S7CommPlus Protocol Structure:**
The current S7CommPlus protocol consists of:
1. **First Connection Setup Request**
2. **First Connection Setup Response**
3. **Second Connection Setup Request**
4. **Function Packet (e.g., Stop PLC)**

**Session ID:**
- **Session ID Calculation:** Session ID = Object ID + 0x80

**Encryption in S7CommPlus:**
- **Connection Packets:**
  1. **First Encryption:** Uses XOR (referred to as Encryption1) with a random value array generated by the PLC in the first connection response packet.
  2. **Second Encryption:** Uses the result of the first encryption as an input parameter and applies a more complex Siemens-private algorithm (referred to as Encryption2).

- **Function Packets:**
  - **Encryption:** Uses a fixed field array with the Session ID as the input parameter. A complex algorithm (referred to as Encryption3) is applied to generate the function encryption.

**Reverse Debugging and Encryption Analysis:**
Using reverse debugging techniques, we discovered that the encryption processes are calculated by TIA Portal through a file named `OMSp_core_managed.dll`.

**Encryption Details:**
- **First Encryption in Connection Packet:**
  - **Input Parameter:** Random value array from the PLC
  - **Calculation:** Value Array + Encryption1 = First Encryption

- **Second Encryption in Connection Packet:**
  - **Input Parameter:** Result of the first encryption
  - **Calculation:** First Encryption + Encryption2 = Second Encryption

- **Function Packet Encryption:**
  - **Input Parameter:** Fixed field array with Session ID
  - **Calculation:** ConstantArray + Encryption3 = Function Encryption (with Session ID)

**Security Protections in S7CommPlus:**
- **Code Level:**
  - **Techniques:** Code obfuscation and anti-debugging measures for key DLL files.
- **Design Level:**
  - **Private Key Usage:** A private key is used as an input parameter for the encryption algorithm in the communication between Siemens software and PLCs.
- **Protocol Level:**
  - **Packet Encryption:** The entire packet is encrypted rather than just specific bytes.

**Contact Information:**
- **Email:** [Your Email Address]

This optimized text provides a clearer, more professional, and coherent structure, making it easier to understand the technical details and the overall context.