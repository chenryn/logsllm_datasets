Create a ledger state channel. In order to create a new ledger
state channel γ, the environment sends the message (create, γ) to
both parties in γ .end–users. The protocol for creating a ledger state
channel works at a high level as follows.
The initiating party γ .Alice requests construction of the state
channel contract by sending the message (construct, γ) to the ideal
functionality F (cid:98)L(∆)
(C). The ideal functionality locks the required
amount of coins in her account on the ledger and sends the message
(initializing, γ) to both parties. If party γ .Bob confirms the initial-
ization by sending the message (confirm, γ), the ideal functionality
scc
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada962F (cid:98)L(∆)
(C) outputs (created, γ). In case γ .Bob does not confirm, the
scc
ledger state channel cannot be created and the initiating party
γ .Alice has the option to refund the coins that were locked in her
account on the ledger during the first step. Creation of a ledger
state channels takes up to 2∆ rounds since it requires two interac-
tions with the hybrid ideal functionality modeling a smart contract
on the ledger. In case the ledger state channel is not created but
γ .Alice’s coins were locked in the first phase of the ledger state
channel creation, she can receive them back latest after 3∆ rounds.
Register a contract instance in a ledger state channel. As long
as both end-users of a ledger state channel behave honestly, they
can update, execute and close contract instances running in the
ledger state channel off-chain; i.e. without communicating with the
(C). However, once the parties run into
dispute (e.g., one party does not communicate, sends an invalid
message, etc.), parties have to resolve their disagreement on the
ledger. We call this process “registration of a contract instance”, and
will describe its basic functionality below.
ideal functionality F (cid:98)L(∆)
The registration of a contract instance might be necessary ei-
ther when the contract instance is being updated, executed or
when a ledger state channel is being closed. To prevent repeat-
ing the same part of the protocol multiple times in each of the
protocols, we state the registration process as a separate procedure
Register(P, id, cid) which can be called by parties running one of
the sub-protocols mentioned above. The procedure takes as input
party P which initiates the registration and the identifiers defining
the contract instance to be registered, i.e. identifier of the ledger
state channel id and the contract instance identifier cid.
At a high level, the initiating party (assume for now that it is
ity F (cid:98)L(∆)
γ .Alice) sends her contract instance version to the ideal functional-
(C) which first checks the validity of the received version,
and then within ∆ rounds the hybrid ideal functionality F (cid:98)L(∆)
(C)
informs both users that the contract instance is being registered.
instance to F (cid:98)L(∆)
Party γ .Bob then reacts by sending his own version of the contract
(C). The ideal functionality compares the two re-
ceived versions, registers the one with higher version number and
within ∆ rounds informs both users which version was registered.
In case γ .Bob did not send in his version, γ .Alice can finalize the
registration by sending the message “finalize–register” to the ideal
functionality.
In the optimistic case when γ .Bob submits a valid version of
the contract instance, the registration procedure takes up to 2∆
F (cid:98)L(∆)
rounds since it requires two interactions with the ideal functionality
(C). In the pessimistic case when γ .Bob does not react or
scc
submits an invalid version, the procedure takes up to 3∆.
scc
scc
scc
scc
Update a contract instance in a ledger state channel. An update
of the storage of a contract instance in a ledger state channel starts
when the environment sends the message (update, id, cid, ˜σ , C) to
the initiating party P ∈ γ .end–users and works as follows. The
initiating party P signs the new contract instance with increased
version number (i.e. if ν is the contract instance version stored by
P until now, then the new contract instance version ν′ will be such
that ν′.version = ν .version + 1). Party P then sends her signature
on this value to the party Q := γ .other–party(P). The other party
verifies the signature and informs the environment that the update
was requested. If the environment confirms the update, the party
Q signs the updated contract version and sends the signature to P.
In this optimistic case, the update takes 2 rounds.
Let us discuss how parties behave in case the environment does
not confirm the update. If Q simply aborts in this situation, P does
not know if the update failed because Q is malicious or because
the environment did not confirm the update. Therefore, Q has to
inform P about the failure. This is, however, still not sufficient. Note
that Q holds P’s signature of the updated contract instance version.
If Q is corrupt, he can register the updated contract instance on
the ledger at any later point. Thus, party Q in order to convince P
that he is not malicious, signs the original contract instance ν but
with version number increased by 2 (i.e. the contract instance ν∗
signed by Q is such that ν∗.storage = ν .storage, ν∗.code = ν .code
but ν∗.version = ν .version + 2). Party Q then sends the signature to
party P. Note that since ν∗.storage = ν .storage, party P does not
need to send her signature on ν∗ back to Q.
If P does not receive a valid signature on either the updated
contract instance version or the original contract instance with
increased version number from Q, it is clear that Q is malicious and
therefore P initiates the registration of the contract instance on the
ledger by calling the procedure Register(P, id, cid). Note that Q
can still register the updated contract instance (the one that was
signed by P). But importantly, after at most 2 + 3∆ rounds it will be
clear to both parties what the current contract instance version is.
Execute a contract instance in a ledger state channel. In order
to execute a contact instance stored in a ledger state channel γ,
the environment sends the message (execute, γ .id, cid, f , z) to the
initiating party P ∈ γ .end–users. The parameter cid points to the
contract instance, f is the contact function and z are additional
input values for f . For P = γ .Alice the protocol works as follows. If
the parties never registered the contract instance with identifier cid,
then γ .Alice first tries to execute the contract instance “peacefully”.
This means that she locally executes f on the contract version she
stores in Γγ .Alice, signs the new contract instance and sends the
signature to γ .Bob. Party γ .Bob also executes f locally on his own
version of the contract instance stored in Γγ .Bob and thereafter
verifies γ .Alice’s signature. If the signature is valid, γ .Bob immedi-
ately confirms the execution by sending his signature on the new
contract instance to party γ .Alice.
A technical challenge occurs when both parties want to peace-
fully execute the same contract instance in the same round τ since
it becomes unclear what is the new contract instance. This can be
resolved be having designated rounds for each party.
In case the contract instance with identifier cid has already been
registered on the ledger or the peaceful execution fails, the initiating
party executes the contract instance “forcefully”. By this we mean
that γ .Alice first initiates registration of the contract instance by
calling the procedure Register(γ .Alice, id, cid) if it was not done
before, and then instructs the hybrid ideal functionality F (cid:98)L(∆)
(C)
to execute the contract instance. The Register procedure can take
up to 3∆ rounds and the contract instance execution on the ledger
can take up to ∆ rounds. Thus, pessimistic time complexity of the
execution protocol is equal to 4∆ + 5 rounds.
scc
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada963Close a ledger state channel. In order to close a ledger state chan-
nel with identifier id by party P ∈ γ .end–users, the environment
sends the message (close, id) to the initiating party P. Before a
ledger state channel can be closed, the end-users of the ledger state
channel have the chance to register all the contract instances that
they have constructed off-chain. Thus, the initiating party P first
(in parallel) registers all the contract instances which have been
updated/peacefully executed but not registered at the ledger yet.
F (cid:98)L(∆)
This takes up to 3∆ rounds. Next, P asks the ideal functionality
(C) representing the state channel contract on the ledger to
scc
close the ledger state channel. Within ∆ rounds, the ideal function-
ality informs both parties that the ledger state channel is being
closed and gives the other end-user of the ledger state channel time
3∆ to register contract instances that were not registered by P. If
after 3∆ rounds all registered contract instances are terminated, the
ideal functionality adds γ .cash(γ .Alice) coins to γ .Alice’s account
on the ledger, and γ .cash(γ .Bob) coins to γ .Bob’s account on the
ledger, deletes the ledger state channel from its channel space and
within ∆ rounds informs both parties that the ledger state channel
was successfully closed. Hence, in the pessimistic case closing can
take up to 8∆ rounds.
ch
ch
A.2 Protocol for Virtual State Channels
We now describe the protocol Π(i, C) that Eres-realizes the ideal
functionality F (cid:98)L(∆)
(i, C) for i > 1. The protocol is in the hybrid
world with the hybrid ideal functionality which allows to create,
update, execute and close state channels of lengths up to i − 1 in
which contract instances with code from the set VSCCi(C) ∪ C can
be constructed, i.e. the functionality F (cid:98)L(∆)
(i − 1, VSCCi(C) ∪ C).
The protocol consists of four subprotocols: Create a virtual state
channel, Contract instance update, Contract instance execute and
Close a virtual state channel. Similarly as for ledger state channels,
we additionally define a procedure Registeri(P, id, cid) that regis-
ters a contract instance in a virtual state channel of length i and
can be called by parties of the protocol Π(i, C).
The protocol Π(i, C) has to handle messages about state channels
of any length j, where 1 ≤ j ≤ i. If a party P of the protocol Π(i, C)
is instructed by the environment to create, update, execute or close
a state channel of length 1 ≤ j < i, the party forwards this message
F (cid:98)L(∆)
(possibly with some pre-processing) to the hybrid ideal functionality
(i − 1, VSCCi(C) ∪ C), and hence we focus on the protocol for
ch
virtual state channels of length exactly i.
Create a virtual state channel. To create the virtual state channel
γ of length i in which contract instances with code from set C can
be constructed, the environment sends a message (create, γ) to all
three parties γ .Alice, γ .Bob and γ .Ingrid in the same round τ0. The
creation of γ then works as follows.
First, the end-users of the virtual state channel, γ .Alice and
γ .Bob, both need to construct a new contract instance with the
code VSCCi(C) in the subchannels they each have with γ .Ingrid. Let
us denote these state channels by α, β in the outline that follows
below. To create these contract instances, party γ .Alice first locally
computes the constructor InitC
i (γ .Alice, τ , γ) to obtain the initial
admissible contract storage of VSCCi(C). Recall that informally this
ch
ch
contract storage can be viewed as a “copy” of the virtual state chan-
to the hybrid ideal functionality F (cid:98)L(∆)
nel γ. Thereafter, she sends an update request of the state channel α
(i − 1, VSCCi(C) ∪ C). At the
same time, γ .Bob analogously requests the update of the state chan-
and β from F (cid:98)L(∆)
nel β. If γ .Ingrid receives update requests of both state channels α
(i − 1, VSCCi(C) ∪ C), she immediately confirms
both of them. Note that, it is crucial for γ .Ingrid that either both
her state channels α and β are updated or none of them. Only then
she is guaranteed that if she loses coins in the subchannel α, she
can claim these coins back from the subchannel β.
To ensure that at the end of the protocol two honest users γ .Alice
and γ .Bob can conclude whether the virtual state channel γ was suc-
cessfully created, there is one additional technicality in our protocol.
Notice that if γ .Ingrid is honest, once γ .Alice receives a confirma-
tion that her update request of α was successfully competed, she
can conclude that the virtual state channel is created. However, we
cannot assume that γ .Ingrid is honest. Hence, to guarantee that
when both γ .Alice and γ .Bob are honest they agree on whether γ
was opened, they exchange confirmation messages at the end of
the protocol. To conclude, if creation of a virtual state channel is
successful, both end-users output (created, γ) to the environment
after 3 rounds.
We emphasize that creating a virtual state channel runs in con-
stant time – independent of the ledger processing time ∆ and length
of the virtual state channel. This is in contrast to the ledдer state
channels with require always 2∆ time for creation.
Register a contract instance in a virtual state channel. Similarly
to the procedure Register defined for ledger state channels, the
subprotocol Registeri is called with parameters (P, id, cid) the first
time end-users of a virtual state channel γ with identifier id disagree
on a contract instance ν := γ .cspace(cid). Intuitively, we need the
intermediate party γ .Ingrid to play the role of the ledger and resolve
the dispute between γ .Alice and γ .Bob. If the intermediary would be
trusted, then both end-users could simply send their latest contract
instance version to γ .Ingrid, who would then decide whose contract
instance version is the latest valid one. Unfortunately, the situation
is more complicated since γ .Ingrid is not a trusted party. She might,
for example, stop communicating or collude with one of the end-
users. This is the point where the contract instances with code
VSCCi(C) created in the underlying subchannels during the virtual
state channel creation play an important role. Parties instead of
sending versions of ν directly to each other send them indirectly by
executing the contract instances in their subchannels with γ .Ingrid
on the contract function RegisterInstanceC
. Since this execution
i
of the contract instance in the subchannel cannot be stopped (i.e., in
the worst case it may involve the ledger which resolves the conflict),
this guarantees that the end-users eventually can settle the latest
state on which they both have agreed on. Let us now take a closer
look at how this is achieved by VSCCi(C).
Let cidA := γ .Alice||γ .id be the contract instance with code
VSCCi(C) stored in the state channel γ .subchan(γ .Alice) and cidB :=
γ .Bob||γ .id the contract instance stored in γ .subchan(γ .Bob). The
initiating party (assume for now that it is γ .Alice) first executes
cidA on the function RegisterInstanceC
with input parameters
(cid, νA), where νA is γ .Alice’s current off-chain contract instance
i
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada964i
i