sue an ALLOC BLOCK call with a reference block and
the number of required blocks as arguments. This
ALLOC BLOCK call is internally translated to a CRE-
ATE PTR operation with the reference block and the
newly allocated block as its arguments. If the reference
block is marked to be versioned, then the destination
block that it points to is also marked for versioning. File
systems normally pass the inode or the indirect block as
the reference block.
4.4 Reverting Versions
In the event of an intrusion or an operating system
compromise, an administrator would want to undo the
changes done by an intruder or a malicious application
by reverting back to a previous safe state of the disk. We
deﬁne reverting back to a previous versions as restoring
the disk state from time t to the disk state at time t - tv,
where tv is the checkpoint interval.
Even though SVSDS can access any previous ver-
sion’s data, we require reverting only one version at a
time. This is because SVSDS internally maintains state
about block relationships through pointers, and it re-
quires that the pointer information be properly updated
inside the disk to garbage-collect deleted blocks. To il-
lustrate the problem with reverting back to an arbitrary
version, let’s revert the disk state from version f to ver-
sion a by skipping reverting of the versions between f
and a. Reverting back the V-TABLE entries for version
a alone would not sufﬁce. As we directly jump to ver-
sion a, the blocks that were allocated, and pointers that
were created or deleted between versions f and a, are
not reverted back. The blocks present during version a
does not contain information about blocks created after
version a. As a result, blocks allocated after version a
becomes unreachable by applications but according to
pointer information in the P-TABLE they are still reach-
able. As a result, the disk will not reclaim back these
block and the we will be leaking disk space. Hence,
SVSDS allows an administrator to revert back only one
version at a time.
SVSDS also allows an administrator to revert back
the disk state to a arbitrary point in time by revert-
ing back one version at a time until the largest ver-
to the
sion whose start
time mentioned by the administrator is found.
RE-
VERT TO PREVIOUS VERSION and REVERT TO TIME
time is less than or equal
USENIX Association  
17th USENIX Security Symposium 
265
Disk Primitives
VERSION BLOCKS(BN o)
Description
Marks all blocks in the subtree starting from block BN o to be versioned.
The data blocks present in the subtree will be versioned along with the
reference (or meta-data) blocks.
REVERT TO PREVIOUS VERSION Reverts back the disk state from current version to the previous version.
REVERT TO TIME(t)
MARK READ ONLY(BN o)
MARK APPEND ONLY(BN o)
Reverts back the disk state one version at a time till it ﬁnds a version v
with start time less than or equal to t.
Marks all blocks in the sub-tree starting from block BN o as read-only.
Marks all blocks in the sub-tree starting from block BN o as
append-only. BN o itself will not be an append-only block as it could be
a meta-data block, with non-sequential updates.
Table 1: Additional Disk APIs in SVSDS
are the additional primitives added to the existing disk
interface to revert back versions by the administrator (see
Table 1).
While reverting back to a previous version, SVSDS
recovers the data by reverting back the following: (1)
Pointers: the pointer operation that happened in the cur-
rent version are reverted back; (2) Meta-data: all meta-
data changes that happened in the current version are re-
verted back; (3) Data-blocks: all versioned data blocks
and some (or all) of the non-versioned deleted data-
blocks are reverted back (i.e., the non-versioned data
blocks that have been garbage collected cannot be re-
verted back); and (4) Bitmaps: both logical and physical
block bitmap changes that happened during the current
version are reverted.
4.4.1 Reverting Mapping
SVSDS reverts back to its previous version from the cur-
rent version in two phases. In the ﬁrst phase, it restores
all the T-TABLE entries stored in the mapping list of the
previous version in the V-TABLE. While restoring back
the T-TABLE entries of the previous version, there are two
cases that need to be handled. (1) An entry already ex-
ists in the T-TABLE for the logical block of the restored
mapping. (2) An entry does not exist. When an entry
exists in the T-TABLE, the current mapping is replaced
with the old physical block from the mapping list in the
V-TABLE. The current physical block is freed by clearing
the bit corresponding to the physical block number in the
PBITMAPS. If an entry does not exist in the T-TABLE, it
implies that the block was deleted in the current version
and the mapping was backed up in the V-TABLE. SVSDS
restores the mapping as a new entry in the T-TABLE and
the logical block is marked as used in the LBITMAPS.
The physical block need not be marked as used as it is
already alive. At the end of the ﬁrst phase, SVSDS re-
stores back all the versioned data that got modiﬁed or
deleted in the current version.
4.4.2 Reverting Pointer Operations
In the second phase of the recovery process, SVSDS re-
verts back the pointer operations performed in the cur-
rent version by applying the inverse of the pointer op-
erations. The inverse of the CREATE PTR operation is a
DELETE PTR operation and vice versa. The pointer op-
erations are reverted back to free up the space used by
blocks created in the current version and also for restor-
ing pointers deleted in the current version.
Reverting back CREATE PTR operations are straight
forward. SVSDS issues the corresponding DELETE PTR
operations. If there are no incoming pointers to the des-
tination blocks of the DELETE PTR operations, the disk
automatically garbage collects the destination blocks.
While reverting the DELETE PTR operations, SVSDS
checks if the destination blocks are present in the T-
TABLE. If yes, SVSDS executes the corresponding CRE-
ATE PTR operations.
If the destination blocks is not
present in the T-TABLE, it implies that the DELETE PTR
operations were performed on non-versioned blocks. If
the destination blocks are present in the deleted block
list, SVSDS restores the backed up T-TABLE entries from
the deleted block list and issues the corresponding CRE-
ATE PTR operations.
While reverting back to a previous version, the inverse
pointer operations have to be replayed in the reverse or-
der. If not, SVSDS would prematurely garbage collect
these blocks. We illustrate this problem with a simple
example. From Figure 4(a) we can see that block a has
a pointer to block b and block b has pointers to blocks c
and d. The pointers from b are ﬁrst deleted and then the
pointer from a to b is deleted. This is shown in Figs. 4(b)
and 4(c). If the inverse pointer operations are applied in
the same order, ﬁrst a pointer would be is created from
block b to d (assuming pointer from b to d is deleted ﬁrst)
but block b would be automatically garbage collected by
SVSDS as there are no incoming pointers to block b. Re-
playing pointer operations in the reverse order avoids this
problem. Figs 4(d), 4(e), and 4(f) show the sequence of
266 
17th USENIX Security Symposium 
USENIX Association
a
b
(a)
c
d
a
b
(b)
c
d
a
b
a
a
b
a
(c)
(d)
(e)
c
d
b
(f)
Figure 4: Steps in reverting back delete pointer operations
steps performed while reverting back the delete pointer
operations in the reverse order. We can see that revert-
ing back pointer operations in the reverse order correctly
reestablishes the pointers in the correct sequence.
4.4.3 Reverting Meta-Data
SVSDS uses the mapping information in the V-TABLE to
revert back changes to the meta-data blocks. There are
three cases that need to be handled while reverting back
meta-data blocks: (1) The meta-data block is modiﬁed
in the new version, (2) The meta-data block is deleted
in the new version, and (3) The meta-data block is ﬁrst
modiﬁed and then deleted in the new version. In the ﬁrst
case, the mappings that are backed up in the previous
version for the modiﬁed block in the V-TABLE are re-
stored. This is done to get back the previous contents
of the meta-data blocks. For the second case, the delete
pointer operations would have caused the T-TABLE en-
tries to be backed up in the V-TABLE as they would be
the last incoming pointer to the meta-data blocks. The
T-TABLE entries will be restored back in the ﬁrst phase
of the recovery process and the deleted pointers are re-
stored back in the second phase of the recovery process.
Reverting meta-data blocks when they are ﬁrst modiﬁed
and then deleted is the same as in reverting meta-data
blocks when they are deleted.
4.4.4 Reverting Data Blocks
When the recovery manager reverts back to a previous
version, it cannot revert back to the exact disk state in
most cases. To revert back to the exact disk state, the disk
would need to revert mappings for all blocks, including
the data blocks that are not versioned by default. In a
typical TSD scenario, blocks are automatically garbage
collected as soon as the last incoming pointer to them
is deleted, making their recovery difﬁcult if not impos-
sible. The garbage collector in SVSDS tries to reclaim
the deleted data blocks as late as possible. To do this,
SVSDS maintains an LRU list of deleted non-versioned
blocks (also known as the deleted block list).
When the delete-pointer operations are reverted back,
SVSDS issues the corresponding create-pointer opera-
tions only if the deleted data blocks are still present in
the deleted block list. This policy of lazy garbage collec-
tion allows users to recover the deleted data blocks that
have not yet been garbage collected yet.
Lazy garbage collection is also useful when a user re-
verts back the disk state after inadvertently deleting a di-
rectory. If all data blocks that belong to the directory are
not garbage collected, then the user can get back the en-
tire directory along with the ﬁles stored under it. If some
of the blocks are already reclaimed by the disk, the user
would get back the deleted directory with data missing in
some ﬁles. Even though SVSDS does not version all data
block, it still tries to restore back all deleted data blocks
when disk is revert back to its previous version.
4.4.5 Reverting Bitmaps
When data blocks are added or reclaimed back during
the recovery process the bitmaps have to be adjusted to
keep track of free blocks. The PBITMAPS need not be
restored back as they are never deleted. The physical
blocks are backed up either in the deleted block list or
in the old mapping lists in the V-TABLE. The physical
blocks that are added in the current version are freed dur-
ing the ﬁrst and second phases of the recovery process.
During the ﬁrst phase, the previous version’s data is re-
stored from mapping list in the V-TABLE. At this time the
physical blocks of the newer version are marked free in
the PBITMAPS. When the pointers created in the current
version are reverted back by deleting them in the second
phase, the garbage collector frees both the physical and
the logical blocks, only if it is the last incoming pointer
to the destination block.
The LBITMAPS only have to be restored back for ver-
sioned blocks that have been deleted in the current ver-
sion. While restoring the backed up mappings from the
V-TABLE, SVSDS checks if the logical block is allocated
in the LBITMAPS. If it is not allocated, SVSDS reallo-
cates the deleted logical block by setting the correspond-
ing bit in the LBITMAPS. The deleted non-versioned
blocks need not be restored back. Previously, these
blocks were moved to the deleted block list and were
added back to the T-TABLE during the second phase of
the recovery process.
USENIX Association  
17th USENIX Security Symposium 
267
4.5 Operation-based constraints
In addition to versioning data inside the disk, it is also
important to protect certain blocks from being modiﬁed,
overwritten, or deleted. SVSDS allows users to spec-
ify the types of operations that can be performed on a
block, and the constraint manager enforces these con-
straints during block writes. SVSDS enforces two types
of operation-based constraints: read-only and append-
only.
The sequence of steps taken by the operation man-
ager to mark a ﬁle as read-only or append-only is the
same as marking a ﬁle to be versioned. The steps for
marking a ﬁle to be versioned was described in Sec-
tion 4.3. While marking a group of blocks, the ﬁrst
block (or the root block of the subtree) encountered in
the breadth ﬁrst search is treated differently to accom-
modate special ﬁle system updates. For example, ﬁle
systems under UNIX support three timestamps: access
time (atime), modiﬁcation time (mtime), and creation
time (ctime). When data from a ﬁle is read, its atime
is updated in the ﬁle’s inode. Similarly, when the ﬁle
is modiﬁed, its mtime and ctime are updated in its in-
ode. To accommodate atime, mtime, and ctime updates
on the ﬁrst block, the constraint manager distinguishes
the ﬁrst block by adding a special meta-data block ﬂag
in the T-TABLE for the block. SVSDS disallows dele-
tion of blocks marked as read-only or append-only con-
straints. MARK READ ONLY and MARK APPEND ONLY
are the two new APIs that have been added to the disk for
applications to specify the operation-based constraints on
blocks stored inside the disk. These APIs are described
in Table 1.
Read-only constraint. The read-only operation-based
constraint is implemented to make block(s) immutable.
For example, the system administrator could mark bi-
naries or directories that contain libraries as read-only,
so that later on they are not modiﬁed by an intruder or
any other malware application. Since SVSDS does not
have information about the ﬁle system data structures,
atime updates cannot be distinguished from regular block
writes using pointer information. SVSDS neglects (or
disallows) the atime updates on read-only blocks, as they
do not change the integrity of the ﬁle. Note that the read-
only constraint can also be applied to ﬁles that are rarely
updated (such as binaries). When such ﬁles have to be
updated, the read-only constraint can be removed and set
back again by the administrator through the secure disk
interface.
pendent on the integrity of the log ﬁles. The operation-
based constraints implemented by SVSDS can be used
to protect log ﬁles from being overwritten or deleted by
intruders.
SVSDS allows marking any subtree in the pointer
chain as “append-only”. During a write to a block in
an append-only subtree, the operation manager allows
it only if the modiﬁcation is to change trailing zeroes
to non-zeroes values. SVSDS checks the difference be-
tween the original and the new contents to verify that
data is only being appended, and not overwritten. To
improve the performance, the operation manager caches
the append-only blocks when they are written to the disk
to avoid reading the original contents of block from the
disk during comparison. If a block is not present in the
cache, the constraint manager reads the block and adds
it to the cache before processing the write request. To
speed up comparisons, the operation manager also stores
the offsets of end of data inside the append-only blocks.
The newly written data is compared with the cached data
until the stored offsets.
When data is appended to the log ﬁle, the atime and
the mtime are also updated in the inode block of the ﬁle
by the ﬁle system. As a result, the ﬁrst block of the
append-only block is overwritten with every update to
the ﬁle. As mentioned earlier, SVSDS does not have the
information about the ﬁle system data structures. Hence,
SVSDS permits the ﬁrst block of the append-only ﬁles to
be overwritten by the ﬁle system.
SVSDS does not have information about how ﬁle
systems organize its directory data. Hence, enforcing
append-only constraints on directories will only work iff
the new directory entries are added after the existing en-
tries. This also ensures that ﬁles in directories marked as
append-only cannot be deleted. This would help in pre-
venting malicious users from deleting a ﬁle and creating
a symlink to a new ﬁle (for example, an attacker can no
longer unlink a critical ﬁle like /etc/passwd, and then just
creates a new ﬁle in its place).
4.6 Issues
In this section, we talk about some of the issues with
SVSDS. First we talk about the ﬁle system consistency
after reverting back to a previous version inside the disk.
We then talk about the need for a special port on the disk
to provide secure communication. Finally, we talk about
Denial of Service (DoS) attacks and possible solutions to
overcome them.
Append-only constraint. Log ﬁles serve as an impor-
tant resource for intrusion analysis and statistics collec-
tion. The results of the intrusion analysis is heavily de-
Consistency Although TSDs understand a limited
amount of ﬁle system semantics through pointers, they
are still oblivious to the exact format of ﬁle system-
speciﬁc meta-data and hence it cannot revert the state that
268 
17th USENIX Security Symposium 
USENIX Association
is consistent in the viewpoint of speciﬁc ﬁle systems. A
ﬁle system consistency checker (e.g., fsck) needs to be
run after the disk is reverted back to a previous version.
Since SVSDS internally uses pointers to track blocks, the
consistency checker should also issue appropriate calls to
SVSDS to ensure that disk-level pointers are consistent
with ﬁle system pointers.
Administrative Interfaces To prevent unauthorized
users from reverting versions inside the disk, SVSDS
should have a special hardware interface through which
an administrator can log in and revert back versions.
This port can also be used for setting the checkpoint fre-
quency.
Supporting Encryption File Systems Encryption File
systems (EFS) can run on top of SVSDS with minimal
modiﬁcations. SVSDS only requires EFS to use TSD’s
API for block allocation and notifying pointer relation-
ship to the disk. The append-only operation-based con-
straint would not work for EFS as end of block can-
not be detected if blocks are encrypted.