4.9 客户端 JavaScript 
JavaScript 有几个已知的安全漏洞，HTML5 和 JavaScript 在今天的网站中变得越来越
普遍，越来越多的网站依赖于 JavaScript 设计响应性网页。代码审计者需要了解寻找哪些
JavaScript 相关的漏洞。JavaScript 正迅速成为黑客进入网络应用程序的重要切入点。出于
这个原因，我们在 A1 注入小节中进行了介绍。 
4.9.1  描述 
JavaScript 中最重要的漏洞是跨站点脚本(XSS)和基于文档对象模型的 XSS。 
检测基于 DOM 的 XSS 可能具有挑战性。这是由以下原因造成的。 
JavaScript 经常被混淆以保护知识产权。 
出于对带宽的考虑，JavaScript 经常被压缩。 
277 
在这两种情况下，强烈建议代码审计人员能够在 JavaScript 被混淆和/或压缩之前对其
进行审计。这是质量保证软件专业人员争论的一个重要问题，因为您正在审计不在其生产状
态的代码。 
另一个使 JavaScript 代码审计具有挑战性的方面是它对微软等大型框架的依赖.NET 和
Java Server Faces 以及 JavaScript 框架的使用，比如 JQuery、Knockout、Angular、
Backbone。这些框架加剧了这个问题，因为只有给定框架本身的源代码，才能对代码进行
全面分析。这些框架通常比代码审计者需要审计的代码大几个数量级。 
由于时间和金钱的原因，大多数公司简单地接受这些框架是安全的，或者风险较低，并
且为组织所接受。 
由于这些挑战，我们建议对 JavaScript 进行混合分析。必要时手动进行源到汇的验证，
通过黑盒测试和污点测试进行静态分析。 
首先使用静态分析。代码审计者和组织需要理解，由于事件驱动的行为、HTML DOM
和 JavaScript 代码之间的复杂依赖关系以及与服务器端静态分析的异步通信，它们总是达
不到预期效果，并且可能会出现各种误报。 
需要执行反射或存储 XSS 的黑盒传统方法检测。然而，这种方法不适用于基于 DOM
的 XSS 漏洞。 
污点分析需要结合到静态分析引擎中。污点分析试图识别已经被用户可控制的输入“污
染”的变量，并追踪它们到可能的易受攻击的函数。如果被污染的变量未经清理就被传递到
接收器，它将被标记为漏洞。其次，代码审计者需要确定代码是用 JavaScript 测试的，并
关闭以确保所有客户端数据验证也在服务器端得到验证。 
278 
 示例： 
JavaScript 漏洞的代码示例。 
示例： 
var url = document.location.url; 
var loginIdx = url.indexOf(‘login’); 
var loginSuffix = url.substring(loginIdx); 
url = ‘http://mySite/html/sso/’ + loginSuffix; 
document.location.url = url; 
说明:攻击者可以向受害者发送“http://hostname/welcome . html # name = ”等链接，导致受害者的浏览器执行注入的客户端代码。 
第 5 行可能是一个误报，并被证明是安全代码，或者它可能对带有污点分析的“开放
重定向攻击”开放。如果存在此漏洞，静态分析应该能够正确识别。如果静态分析只依赖于
黑盒组件，那么该代码将被标记为易受攻击，要求代码审计者完成完整的源代码审计。 
4.9.2 其他示例和潜在的安全风险 
接收器:document.write() 
结果:结果:document . write(“”； 
网络攻击可以控制以下文档元素，包括
279 
document.url,document.location,document.referrer,window.location。 
来源:document . location Sink:windon . location . href 
结果:windon . location . href = http://www .BadGuysSite-客户端代码打开重定向。 
来源:document.url 
存储:windows.localstorage.name 
Sink: elem.innerHTML 
结果:elem.innerHTML =  =基于存储 DOM 的跨站点脚本 
 eval()容易受到安全威胁，因此不建议使用。请考虑以下几点: 
1. 传递给 eval 的代码以执行者的权限执行。因此，如果传递的代码可能受到某些恶意
意图的影响，就会导致恶意代码以您网站的权限在用户的机器上运行。 
2. 恶意代码可以理解传递给 eval 的代码被调用的范围。 
3. 您也不应该使用 eval()或 new Function()来解析 JSON 数据。 
如果使用上述方法，可能会带来安全威胁。JavaScript 在用于动态评估代码时会产生潜
在的安全风险。 
eval(' alert(" Query String '+une scape(document . location . search)+')；'); 
eval(不可信字符串)；可能导致代码注入或客户端开放重定向。 
280 
JavaScripts 的“新功能”也可能造成潜在的安全风险。 
JavaScript 需要三个有效点 
1. 在客户端关闭所有服务器端逻辑、JavaScript 验证 
2. 审计各种 XSS DOM 攻击，永远不要相信用户数据，知道你的源和汇(即，看看所有 
包含用户提供的输入的变量)。 
3. 审计不安全的 JavaScript 库，并经常更新。 
4.9.3 参考: 
http://docstore.mik.ua/orelly/web/jscript/ch20_04.html 
https://www.owasp.org/index.php/Static_Code_Analysis 
http://www.cs.tau.ac.il/~omertrip/fse11/paper.pdf 
http://www.jshint.com 
5 附录 
5.1 代码审计的 Do’s 和 Dont’s 
在工作中我们是专业的。但是我们需要确保，即使作为专业人员，当我们进行代码审计
时，除了代码审计的技术方面之外，我们还考虑了代码审计的人的方面。下面是代码审计人
员讨论的要点列表；每个参与人员都需要考虑。这个列表并不全面，但它是一个建议的起点，，
281 
也是一个讨论的来源，让企业确保代码审计是有效的，而不是破坏性的。如果代码审计成为
一个组织内部的话语来源，寻找安全性的有效性，功能缺陷将会减少，开发人员将不会与审
计人员起冲突。做一名好的代码审计员需要良好的社交技能，这是一项需要实践的技能，就
像学习代码审计一样。 
⚫ 
你不需要在代码中找出错误来进行代码审计。如果你总是对某事进行批评，你的评
论就会失去可信性。 
⚫ 
不要急于进行代码审计。找到安全性和功能缺陷很重要，但其他开发人员或团队成
员正在等着您，所以您需要缓和一下，设定好事项的优先级。 
⚫ 
在审计代码时，您需要知道所期望的内容。您是否需要审计代码的安全性、功能性、
可维护性和/或风格?您的组织有关于代码风格的工具和文档吗?或者您使用自己的
代码风格?您的组织是否为开发人员提供工具，根据组织自己的编码标准来标记不
可接受的编码标准？ 
⚫ 
在开始代码审计之前，您的组织是否有明确的方法来解决开发人员和代码审计人员
在代码审计过程中可能出现的冲突？ 
⚫ 
代码审计者是否有一组定义好的需求作为代码审计的结果来产生？ 
⚫ 
当代码审计期间的代码需要更改时，代码审计的流程是什么（考虑复审，确保修
复）？ 
⚫ 
代码审计者是否了解被审计代码的领域知识？大量的证据表明，如果代码审计者了
解代码的主要内容，那么代码审计是最有效的。例如，行业和政府、业务功能、风
险等的合规性规范。 
282 
5.2 敏捷软件开发生命周期 
将安全性集成到敏捷的 sdlc 流程流中是很困难的。组织需要安全团队的持续参与，或
者每个团队都需要训练有素的程序员致力于安全。 
283 
5.2.1 持续集成和测试驱动开发 
术语“持续集成”起源于极限编程开发过程。今天，它是 SDLC 敏捷的最佳实践之一。
CI 要求开发人员每天数次将代码检入到源代码控制管理应用程序(scm)中。自动生成服务器
和应用程序验证每个签入。优点是团队成员可以在软件开发过程的早期快速发现构建问题。
对于代码审计者来说，配置项的缺点是虽然代码可以正确构建；软件安全漏洞可能仍然存在。
代码审计可能是签入过程的一部分，但审计可能只是为了确保代码只符合组织的最低标准。
284 
代码审计并不是一种安全的代码审计，它采用风险评估的方法，需要额外的时间来进行代码
审计。 
代码审计的第二个缺点是，由于组织在敏捷过程中进展很快，可能会引入设计缺陷，导
致安全漏洞，这些漏洞可能会被部署到生产环境中。 
代码审计者的不能逾越的红线是… 
1.没有 user stories 谈论基于风险的安全漏洞。 
2. User stories 没有公开描述源和汇。 
3.尚未对该应用程序进行风险评估。 
5.2.2 分解过程区域 
术语“测试驱动开发”像 CI 一样起源于极限编程开发过程。今天，像竞争情报一样，
它是 SDLC 敏捷的最佳实践之一。TDD 要求开发人员重复非常短的开发周期。首先，开发
人员编写一个自动化测试用例，定义一个需要的改进或者新的功能。第一步 TDD 初始测试
失败。随后的步骤是开发人员创建最少数量的要通过的代码。最后，开发人员将新代码重构
为组织可接受的编码标准。 
285 
5.3 代码审计 Checklist 
条目 
描述 
PASS 
FAIL 
通用 
是否有后门/未公开的业务逻辑类？ 
通用 
应用程序使用的外部库，工具，插件是否具有这
些协议的最新版本，是否已进行补丁和适当处理
以保持更新？ 
通用 
包含安全机密（例如密码）的类只能通过受保护
的 API 访问 
通用 
包含安全机密（例如密码）的类只能通过受保护
的 API 访问？ 
286 
通用 
纯文本秘密不会长时间存储在内存中。 
通用 
审计数组范围 
通用 
应用程序使用的所有敏感信息已被识别 
业务逻辑和设计 
是否有与业务逻辑相关的未使用配置？ 
业务逻辑和设计 
如果使用请求参数标识业务逻辑方法，是否存在
对它们的用户特权以及方法/动作的正确映射？ 
业务逻辑和设计 
审计绑定到用户输入的表单对象中是否存在未
暴露的实例变量。 如果存在，请审计它们是否
具有默认值。 
业务逻辑和设计 
审计绑定到用户输入的表单对象中是否存在未
公开的实例变量。 如果存在，请在表单绑定之
前审计它们是否已初始化。 
业务逻辑和设计 
审计绑定到用户输入的表单对象中是否存在未
暴露的实例变量。 如果存在，请审计它们是否
具有默认值。 
业务逻辑和设计 
审计绑定到用户输入的表单对象中是否存在未
公开的实例变量。 如果存在，请在表单绑定之
前审计它们是否已初始化。 
业务逻辑和设计 
审计是否正确执行？ 有后门参数吗？ 
287 
业务逻辑和设计 
审计是否应用于 Web 根目录内的所有必需文件
和文件夹？ 
业务逻辑和设计 
是否有像 Access-ALL 这样的默认配置？ 
业务逻辑和设计 
配置是否适用于所有文件和用户？ 
业务逻辑和设计 
该设计是否支持诸如明文文件之类的弱数据存
储？ 
业务逻辑和设计 
集中式验证是否适用于所有请求和所有输入？ 
业务逻辑和设计 
集中验证审计是否会阻止所有特殊字符？ 
业务逻辑和设计 
是否有任何特殊的请求从验证中跳过？ 
业务逻辑和设计 
设计是否保留任何未通过验证的参数或功能的
排除清单？ 