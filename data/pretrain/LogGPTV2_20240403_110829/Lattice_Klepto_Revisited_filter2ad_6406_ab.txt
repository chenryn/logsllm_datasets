Algorithm 4 NTRU Key Generation
1: function KenGen()
2:
3:
4:
5:
6:
7:
f ← Lf
д ← Lд
Compute fp such that f ⊛ Fp = 1 mod p
Compute fq such that f ⊛ Fq = 1 mod q
h = д ⊛ Fq mod q
return pk = h, sk = (f , Fp)
Algorithm 5 NTRU Encryption
1: function Encrypt(m ∈ Rp, pk = h)
2:
3:
4:
r ← Lr
c = p(r ⊛ h) + m mod q
return c
Algorithm 6 NTRU Decryption
1: function Decrypt(c, sk = (f , Fp))
2:
3:
4:
a = f ⊛ c mod q
m = a ⊛ Fp mod p
return m
3 DETECT THE BACKDOOR IN THE SETUP
FOR NTRU ENCRYPTION IN [8]
3.1 The NTRU Backdoor in [8]
In [8] Kwant et al. proposed a kleptographic backdoor on NTRU
encryption scheme.
The backdoor is equipped by the attacker who attempts to steal
the secrets of the encrypting party, such as the session key for
the symmetric part. The key generation is as same as the regular
NTRU, but the attacker constructs a Klepto encryption to replace the
regular encryption. The legal recipient can decrypt the tampered-
with ciphertext correctly with very high probability and the attacker
can run Klepto decryption to get the secret.
We next describe the Klepto encryption and decryption in [8].
3.1.1 Klepto encryption: The Klepto encryption employs a hybrid
elliptic curve-based ElGamal encryption scheme (ECC) as the em-
bedded encryption. Let M be the session key for the symmetric
part. To leak it, the backdoored NTRU first encrypts it with the
embedded attacker’s public key:
M ∈ {0, 1}256 hybrid ECC encryption
−−−−−−−−−−−−−−−−−−−→ C ∈ {0, 1}640
,
where C is set to be the ECC ciphertext along with an AES-GCM
ciphertext which is of total 640 bits’ length.
Next the attacker interprets the bitstring C as a vector and takes
its entries in base ρ as polynomial coefficients to obtain a polyno-
mial C ∈ Zρ[X]/(X n − 1), where ρ < q and gcd(ρ, p) = 1.
Step 1 Sample r ←(cid:45) L(dr , dr) and encrypt user’s message m ∈ Rp
by computing
c = p · r ⊛ h + m.
(1)
Step 2 Compute k ∈ Zρ[X]/(X n − 1), where each coefficient ki
(2)
Ci = ci + p · ki mod ρ.
satisfies
Step 3 Output
′ = c + p · k.
c
(3)
3.1.2 Klepto decryption: To recover M, the attacker computes
′ mod ρ,
C = c
and transforms it to the corresponding bitstring. Then, he can
retrieve M by computing the hybrid ECC decryption.
Kwant et al. thought the backdoor can not be detected under
some reasonable assumption such as the distribution of a in the legal
decryption process for the regular ciphertext can not be recognized.
Next, we will show the backdoor can be detected efficiently under
the same assumption.
3.2 Detect the Backdoor in the SETUP in [8]
3.2.1 The First Attempt. Suppose the user is given a ciphertext
which may be a regular one or a tampered-with one. From now on
we denote this ciphertext as c which won’t cause confusion. Now
the user decrypts c to get a message m. Then he computes
−1(c − m) mod q.
z = p
(4)
In Rq,
(cid:26) h ⊛ r,
z =
if c is a regular ciphertext,
if c is a tampered-with ciphertext.
We recall the homomorphism from Z[X] to Z defined by
h ⊛ r + k,
X (cid:55)→ 1,
which in fact evaluates a polynomial in Z[X] at 1. It can also be
checked easily that the map X (cid:55)→ 1 is also a homomorphism from
Rq = Zq[X]/(X n − 1) to Z.
Note that for any polynomial F ∈ L(d, d) for some integer d it
holds that F(1) = 0. By the choice of r and д, we know that r(1) = 0,
and д(1) = 0 which implies that h(1) = 0. Consequently,
(cid:26) 0 mod q,
k(1) mod q,
z(1) =
if c is a regular ciphertext,
if c is a tampered-with ciphertext.
Session 16: Practical Post-Quantum Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan869Since k(1) is not necessarily equal to 0, by checking the value of (4)
at 1 is zero or not, the user is able to distinguish the system with
SETUP from a regular implementation with a good probability.
We have to point out that there is an easy way to fix the backdoor
to resist this detection, by substituting k by
640 + k.
′ = −k(1) · X
k
(cid:26) r,
This is possible since now k′ is a vector of length 640 + 1 which is
still less than n in the parameter sets in [8]. It is easy to verify that
k′(1) is always equal to 0.
3.2.2 The Second Attempt. Even there is some way to resist our
first attack, we still have the following way to detect the backdoor.
As noted in [8], once the public key h is invertible in the ring
Rq, then the backdoor can be detected easily, since letting w =
p−1(c − m)h−1 ∈ Rq, from the relation (1) in Section 3.1 we have
,
r + p · k ⊛ h−1
if c is a regular ciphertext,
if c is a tampered-with ciphertext.
w =
Note that r is chosen from the set Lr = L(dr , dr), whereas the
term r +p·k ⊛h−1 does not belong to Lr with very high probability.
Hence by this difference one can immediately decide whether the
ciphertext is tempered-with or not.
Unfortunately, д is usually chosen in L(dд, dд) which makes h
not invertible, and the method above fails. However a detector can
still compute the term w with some algebraic calculations and an
efficient search, based on the fact that h is usually pseudo-invertible
as shown in [10].
For completeness, we describe the detection in details. To start
with, recall the Chinese Remainder Theorem, which says
Rq = Zq[X]/(X n − 1)
≃ Zq[X]/(X − 1) × Zq[X]/(X n−1 + · · · + X + 1).
Following [10], we refer to the rings Zq[X]/(X−1) and Zq[X]/(X n−1+
· · · + X + 1) as P1, P2 respectively, and denote by φ1 and φ2 respec-
tively the reduction modulo X − 1 and X n−1 + · · · + 1. φ1 is just
the X (cid:55)→ 1 homomorphism as in the previous subsection. Now we
focus on φ2. The demonstrations in [6, 10] showed,
this inverse can easily be computed.
Lemma 3.1. In P2, φ2(h) has a good chance to be invertible, and
We denote the inverse of h in P2 by(cid:101)h in this case. After the
computation for(cid:101)h, by the relation
−1(c − m)) ·(cid:101)h,
φ2(w) = φ2(p
one is able to find the image of w in P2.
Note that if c is a regular ciphertext, the image of w in P1 is just
the image of r in P1, which is zero by the fact that r ∈ L(dr , dr).
Hence we can compute
′ ↔ (0, φ2(w)).
w
It is easy to check that if c is a regular ciphertext, then w′ = r ∈ Lr ,
but if c is a tampered-with ciphertext, w′ falls into Lr with very
small probability, based on which we can tell if NTRU is backdoored
or not.
We implemented this attack on a Windows 7 system with a 2.93
GHz Intel i7 processor and 2 GByte RAM using Shoup’s NTL library
version 5.4.1. [14] with the recommended parameter with highest
security in [5]. For simplicity, we did not implement ECC encryption
but chose a random k. In our all 1000 tests, h was invertible in P2
and w didn’t belong to Lr , i.e. our attack always succeeded in our
experiment.
Remark 1. One may wonder if we can adjust Lr to resist the
attack. However, it seems not easy. For the correctness, r should be a
short vector. Even we do not know the image of r in P1, it only has q
possibilities. Hence, we can run over all the possible value for φ1(r),
compute the value of w ∈ Rq corresponding to (φ1(r), φ2(w)) and
check if it is short enough to find if there is a backdoor or not.
Another way to resist the attack is to make h never invertible in
P2. However, for a regular public key, the probability that φ2(h) is
invertible in P2 is very high, the detection party may just reset the
communication session several times, to invoke the key generation
algorithm. If h is always not invertible in P2, then a backdoor is
considered to be embedded.
3.3 Our Detection Algorithm
Below we summarize out detection algorithm as follows:
Algorithm 7 Detection Algorithm for Klepto on NTRU in [8]
Require: An equipment for NTRU
Ensure: Yes if it has backdoor or No otherwise
1: Generate the public key h and private key until h is invertible
in P2, if h is always not invertible in P2, return Yes;
2: Choose a random message m and encrypt it to c;
3: Use the first attack to detect the ciphertext, return Yes if it is
tampered-with;
4: Use the second attack to detect the ciphertext, return Yes if it
is tampered-with. return No.
Finally, the backdoor in [8] can be easily detected by simple
and efficient algebraic calculations. It seems not easy to embed a
backdoor into NTRU, which we leave as an open problem.
4 A STRONGLY UNDETECTABLE BACKDOOR
FOR RLWE ENCRYPTION
Though the danger of the backdoor for NTRU seems weak, klepto-
graphic attacks still threaten lattice-based cryptography. We show
this by introducing a strongly undetectable backdoor on RLWE-
based encryption. The idea is to set part of the public key as some
"ciphertext", which is generated by encrypting some seed with the
attacker’s public key and the seed is used to generate the private
key of the RLWE scheme.
We would like to point out that our method is universal for
most of the LWE-based schemes, encryption scheme or signature
schemes, since our backdoor is embedded into the public key.
We present our method by embedding the backdoor into NewHope,
a famous RLWE-based encryption scheme. We use a Diffie-Hellman
key exchange-like mechanism to substitute the production of seeds.
For compactness of this mechanism we choose elliptic curve cryp-
tography as well.
First we briefly review the Diffie-Hellman key exchange on el-
liptic curves.
Session 16: Practical Post-Quantum Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan8704.1 Elliptic Curve Cryptography
An elliptic curve over Zp where p is a prime consists of points {P =
(Px , Py)} ⊂ Zp × Zp. The set of points has an addition operation
on it, which makes it an additive group.
In the key exchange process, Alice and Bob first choose the curve,
denoting whose generator element by P. Then they select secret
random integers X, Y, respectively. Alice does the multiplication
X P while Bob computes Y P, and they send the result to each other.
Finally Alice multiplies the term Y P by X while Bob multiplies X P
by Y, and the common result XY P will be their key.
In our backdoor, for the curve we choose secp256k1 in [13],
where p = 2256 − 232 − 977. This means there is roughly only 2−224
of the space {0, 1}256 making a difference from Zp. Distinguishing
such a minor difference is far beyond the ability of computation
and precision.
Usually, to send a point P = (Px , Py) on the public curve, just
Px and the sign of Py are needed to be sent and the whole Py can
be computed from the equation of the curve. However, this still
needs 257 bits, which is a bit more for our backdoor. Hence, in the
backdoor we will use the technique of omitting y-coordinates for
compactness. In this setting only a point’s x-coordinate Px will be
leaked to the attacker. Since there are only two possibilities for the