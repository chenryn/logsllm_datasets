c ← generate asymmetric key pair
Kc,K−1
s ← generate asymmetric key pair
Ks,K−1
r ← generate asymmetric key pair
Kr,K−1
h1 ← H(h0(cid:14)success(cid:14)state_gen(cid:14)m(cid:14)k(cid:14)u(cid:14)K(cid:14)Kc(cid:14)Ks(cid:14)Kr)
write h1 to NVRAM
C ← EncKb (h1(cid:14)m(cid:14)k(cid:14)u(cid:14)K(cid:14)K−1
σ ← SignK
return h1,Kc,Ks,Kr,C,σ
s (cid:14)K−1
−1ε (h1(cid:14)K(cid:14)Kc(cid:14)Ks(cid:14)Kr(cid:14)m(cid:14)k(cid:14)u)
c (cid:14)K−1
)
r
threshold k for authorizing certiﬁcate signatures and a threshold u
for management operations. Finally, we assume that the PAL code
is unmodiﬁed and available to the TPM.
Each administrator uses a veriﬁer to generate and scan a QR code
encoding
Mi,m,k,u,Ki
(8)
at the signer. The PAL then performs the initialization step, which
is shown in Algorithm 4. In the initialization step, the PAL creates
an initial epoch identiﬁer and base key, and writes these values into
NVRAM to tamper-proof them. The PAL also seals the base key to
the PCR values containing the Flicker core and PAL. To attest to the
PAL that is running, the signer invokes a TPM quote on the PCRs
measuring the PAL, using ⊕m
i=1Mi as a nonce (preventing any sin-
gle administrator from biasing the nonce). The PAL then creates an
initialization BLOB I, which holds the number of administrators,
thresholds for signature and management operations, and admin-
istrator public keys. The PAL then returns the above information
with a signature by the non-migratable secret key K
−1ε
The administrators can then review this information to conﬁrm
that the PAL received the correct information. Once this check
has passed, each administrator creates a setup signature, deﬁned as
(h0), which authorizes the remainder of system setup.
Si = SignK
The administrators scan their setup signatures at the signer, which
passes them to the PAL along with B and I.
−1
i
The PAL then performs state generation, shown in Algorithm 5.
In this step, the PAL checks the setup signatures to ensure that the
administrators have authorized the remainder of setup, and also en-
.
552sures that the initial epoch identiﬁer matches the value in NVRAM
(thus preventing replays of old setup signatures). If these checks
pass, the PAL generates the attestation, signature, and restoration
key pairs and creates the conﬁguration BLOB C with the newly-
generated public keys and information from the initialization BLOB.
Finally, the PAL logs and signs the public information in C and re-
turns this information along with C (which is encrypted with Kb).
The veriﬁers can use this information to check the signature σ and
store the public keys Kc, Ks, and Kr.
6.3 Administrator Management
Adding or removing an administrator requires agreement by at
least u administrators. The new administrator Am+1 must have a
key pair and veriﬁer like all other administrators. We assume that
the u administrators all know Km+1 and the latest epoch identiﬁer
h(cid:2), which links the operation to a speciﬁc point in time.
The quorum of administrators each contribute a message of the
form
−1
SignK
i
(h(cid:2),“add,” Km+1)
(9)
and scan these messages at the signer. The PAL then checks each
signature, and if all signatures are correct, adds Km+1 to K and logs
the event, returning the new epoch identiﬁer h(cid:2)+1.
The administrators can remove an existing administrator by pro-
viding a message of the form in Equation 9, but by stating “remove”
instead of “add” along with the public key of an existing adminis-
trator. The PAL then removes the public key from K. The thresh-
olds k and u are also decremented along with m if they are equal to
the new number of administrators m− 1.
Administrators can also initiate other operations, such as chang-
ing parameters or signing keys, by signing messages in the form
of Equation 9, but with a string stating “change param/key” and
identifying the parameter or key being changed, and if changing a
parameter, the new value of the parameter. The PAL then checks
the signatures and makes the change if there are at least u valid sig-
natures authorizing the change. If any keys, such as Kb, K−1
, or
K−1
are changed, the PAL generates a new key rather than having
the administrators specify a new value (since these values must be
known only to the PAL).
6.4 System Backup and Restoration
c
s
We now describe how a CASTLE system can be securely backed
up and restored. In particular, we back up the information stored at
the signer. The backup material consists of the base BLOB B and
the main BLOB C. We use the term source machine to refer to the
signer being backed up, and the term target machine to refer to the
new signer restoring the backup. In CASTLE, a backup from the
source machine entails a restore to the target machine and requires
a quorum of administrators at each machine. We use the restoration
key pair of the target machine to encrypt the backup in transit and
ensure that the contents of B and C are not accessible, even to the
administrators that carry out the process.
Restoring a backup onto a target machine ﬁrst requires the target
machine to be initialized as described in Section 6.2 and an iden-
tical quorum of u to be registered at both machines. To achieve
this in a setup where the target machine is already initialized with
a different set of administrators, the target machine’s administra-
tors and threshold can be adapted to those of the source machine
as described in Section 6.3 before starting the backup process. The
(cid:10)
r of the target machine is publicly available
restoration public key K
to its own administrators, having been provided during the state
generation step described in Algorithm 5.
The u administrators initiate the backup at the source machine by
msc CASTLE Signing Process
Administrators
Veriﬁers
Signer
PAL
Trusted
C, Ri
C, {Ri}, B, C
h(cid:2)+1, S, A
h(cid:2)+1, S, A, C’
Att.
S, Ai
S, {Ai}, B, C’
h(cid:2)+2, S
Sig.
h(cid:2)+2, S, C(cid:10)(cid:10)
C
Check A
OK, d
authenticate
S
Check S
OK
Figure 5: Message sequence chart for a signing session. Dotted
lines indicate messages encoded as QR codes.
scanning QR codes encoding a signature on K(cid:10)
administrator thus sends a message of the form SignK
which the PAL responds to with the encrypted backup
r. Each participating
(h(cid:2),K(cid:10)
r),
−1
i
E = EncK(cid:10)
r (Kb,C)
(10)
The PAL also returns a signature on the epoch and backup:
c (h(cid:2),E)
SignK−1
(11)
This information is displayed by the source signer as a QR code.
Using Kc, administrators at both the source and target machines
can verify that the signature is correct and thus that the backup
was created by the source PAL. The administrators can then scan
(cid:2),Kb,C) at the target machine, which
signatures of the form EncK(cid:10)
checks the u signatures and overwrites its own conﬁguration with
the information provided in E. The state of the source machine is
thus copied to the target machine.
r (h(cid:10)
7. ANALYSIS
In this section, we perform an informal analysis of a certiﬁcate
signing session and argue that under the limitations of the adver-
sary model described in Section 3, the adversary cannot cause a
certiﬁcate to be issued. We note that even for an adversary with
capabilities beyond those listed in Section 3, the event will still be
logged and can be audited in the future. We plan on conducting a
formal analysis in future work.
7.1 Security of Certiﬁcate Signing
We now argue for the security of a certiﬁcate signing session by
showing that an adversary must compromise at least k administra-
tors or veriﬁers to issue an unauthorized certiﬁcate. Consider the
553messages sent by the signer as shown in Figure 5. A compromised
signer can forge or replay messages, and because it directly han-
dles the input and output of the PAL, can attempt to modify these
messages in order to obtain a signed certiﬁcate from the PAL. How-
ever, we observe that without access to administrator private keys,
a compromised signer cannot forge or replay any message that will
be accepted by its recipient in the protocol. We assume that each
administrator knows the latest epoch identiﬁer h(cid:2) and the set of
other administrators participating in the session.
In the request step, the signer cannot send a different CSR with-
out altering the corresponding request signatures, and cannot re-
play previous CSRs with their request signatures because the re-
quest signatures contain the epoch identiﬁer at the time of the ses-
sion. The signer also cannot forge BLOBs because the base key
is sealed to and thus only accessible to the PAL, and cannot re-
play BLOBs because they too are bound to the epoch identiﬁer in
NVRAM, which is also accessible only to the PAL. Thus the signer
cannot modify any messages in the request step.
After the attestation step, the signer cannot forge the new epoch
identiﬁer, since it is included in the attestation signature (which
only the PAL can create). The signer also cannot replay old epoch
identiﬁers and attestation signatures, since the administrators can
easily verify the log entry, given that they know the other partici-
pating administrators by assumption, and C and h(cid:2) from creating
the request signature in the previous step. Thus each administrator
can verify that the epoch identiﬁer h(cid:2)+1, session BLOB S, and at-
testation signature A are the correct output for the given CSR and
starting epoch identiﬁer h(cid:2).
In the authorization step, the signer cannot forge the session,
base, or conﬁguration BLOBs because each BLOB is bound to
the base key to which only the PAL has access. Similarly, the
signer cannot replay the BLOBs because they are all bound to the
epoch identiﬁer h(cid:2)+1 written into NVRAM. Finally, the signer can-
not forge the authorization signatures Ai without access to admin-
istrator private keys, and cannot replay the authorization signatures
because they contain the session BLOB, which cannot be forged or
replayed as explained above.
Finally, after the signature step, the signer cannot forge or re-
play the ﬁnal epoch identiﬁer h(cid:2)+2 because the administrators can
again check the log entry given h(cid:2)+1, the set of participating ad-
ministrators, and the signature S. Similarly, the signer cannot forge
the signature S without access to the signing key K−1
, and cannot
replay old signatures because the administrators know the CSR C
used in the session.
We observe, however, that by compromising administrators or
veriﬁers, the adversary can gain access to administrator private keys
needed to create request and authorization signatures. In particular,
with k administrators or veriﬁers compromised, an adversary can
generate the number of request signatures and authorization sig-
natures necessary to proceed with the entire signing session for a
given CSR. However, the adversary must compromise at least k ad-
ministrators or veriﬁers, and thus within the limitations of our ad-
versary model, therefore cannot obtain an unauthorized signature
on a certiﬁcate.
s
7.2 Security of Management Operations
For management operations, we observe that adding or removing
administrators, changing parameters, or backing up or restoring a
signer requires at least u administrators to provide a signature au-
thorizing the operation. Because we assume that an adversary can
compromise a maximum of u − 1 administrators and veriﬁers, it
can only gain access to a maximum of u− 1 administrator private
keys. Thus an adversary with the limitations of our model given in
Flicker kernel module
Flicker helpers
mbed TLS
PAL
TCB Total
mbed TLS base 64 utilities
Signer front-end
Crypto, I/O libraries (OpenSSL, ZBar, qrencode)
Untrusted Total
EJBCA Modules
EJBCA Core
EJBCA Total
SLOC
5,521
4,789
6,097
1,115
17,522
652
2,656
143,621
146,929
182,716
43,753
226,469
Table 3: Source lines of TCB and untrusted code of CASTLE
versus that of EJBCA.
Section 3 cannot authorize these management operations.
8. EVALUATION
In this section, we evaluate our prototype implementation of CAS-
TLE. We begin by describing the implementation itself, and then
discuss the performance results of the system. We then brieﬂy dis-
cuss the cost of the prototype.
8.1
Implementation
We implemented our signer prototype in C. The signer applica-
tion runs on a 3.6GHz Intel Core i7-4790 machine with 3GB of
RAM and support for Intel’s Trusted Execution Technology [5].
As veriﬁers will likely be mobile devices carried with administra-
tors, we implemented the veriﬁer in Java as an Android application.
We used a variety of off-the-shelf libraries for features such as QR
code detection and the GUI interface, and we note in particular that
we used OpenSSL for cryptographic operations, except in the PAL,
where we utilized the mbed TLS library2 (formerly PolarSSL) for
its compact code.
For the purposes of the prototype, some features were simpli-
ﬁed or omitted. For example, CSRs are passed as hashes to be
signed rather than in PEM format, and signer parameter changes
were not implemented. However, sealed storage and NVRAM are
fully implemented and our prototype works with X.509v3 [2] cer-
tiﬁcates (though it is not fully compatible with the standard). We
will make our code open-source so that existing CAs can begin de-
ploying CASTLE.
We measured the source lines of code of our prototype imple-
mentation, and the results are shown in Table 3, separated into code
that is part of the TCB and code that is not. We further compare
this to the EJBCA open-source CA code base [19], developed by
PrimeKey. We measured the source lines of code in EJBCA Com-
munity 6.3.1.1, and also present these results in the table.
We observe that a majority of the CASTLE TCB consists of
Flicker and the mbed TLS library. In fact, the PAL itself is a small
part, comprising only 6.4% of the TCB. Similarly, the size of the
signer front-end is dwarfed by the off-the-shelf libraries, partic-
ularly OpenSSL. Further optimization or a different choice of li-
braries could shrink the size of both the TCB and untrusted por-
tions, but the CASTLE portion of the code base will likely remain
below 10,000 lines of code, even with future extensions.
When compared to EJBCA’s code base, we observe that CAS-
TLE takes fewer lines of code than the EJBCA implementation
does. Moreover, the CASTLE implementation has a limited TCB,
whereas in EJBCA all code must be trusted. We note that simply
2https://tls.mbed.org/
554Attestation
Signature
300