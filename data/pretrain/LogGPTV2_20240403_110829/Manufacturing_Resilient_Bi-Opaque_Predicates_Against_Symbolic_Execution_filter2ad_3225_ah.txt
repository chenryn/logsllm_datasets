programming.
Parallel
Fig. 7: The assembly codes of symbolic opaque predicates.
Parallel Programming(cid:1)(cid:9)(cid:20)(cid:15)(cid:19)(cid:10) 
(cid:39)(cid:77)(cid:80)(cid:66)(cid:85)(cid:74)(cid:79)(cid:72)(cid:14)(cid:81)(cid:80)(cid:74)(cid:79)(cid:85)(cid:1)(cid:9)(cid:21)(cid:15)(cid:18)(cid:10)
(cid:36)(cid:80)(cid:87)(cid:70)(cid:83)(cid:85)(cid:1)P(cid:83)(cid:80)(cid:81)(cid:66)(cid:72)(cid:66)(cid:85)(cid:74)(cid:80)(cid:79)(cid:1)((cid:21)(cid:15)(cid:22)(cid:10)
(cid:52)(cid:90)(cid:78)(cid:67)(cid:80)(cid:77)(cid:74)(cid:68)(cid:1)(cid:34)(cid:83)(cid:83)(cid:66)(cid:90)(cid:1)(cid:9)(cid:22)(cid:15)(cid:18)(cid:10)
(cid:48)(cid:67)(cid:71)(cid:86)(cid:84)(cid:68)(cid:66)(cid:85)(cid:80)(cid:83)(cid:14)(cid:45)(cid:45)(cid:55)(cid:46)(cid:1)(cid:9)(cid:22)(cid:15)(cid:19)(cid:10)
Fig. 8: A comparison of symbolic opaque predicates with
ordinary predicates. The curve is the distance distribution of
ordinary predicates and the histogram is the raw data.
Note that our evaluation results are from the view of
symbolic execution engines rather than speciﬁc symbolic
execution-based attackers. This is because all such attackers
or speciﬁc detection rules would be effective only if the un-
derlying symbolic execution engine performs correctly [5]. In
this regard, our evaluation results remain valid for evaluating
symbolic execution-based attackers.
D. Stealth
Currently, there is no standard evaluation method for stealth.
Existing methods (e.g., [26]) generally measure the statistical
difference of instructions between obfuscated programs and or-
dinary programs. The less difference an obfuscation approach
incurs, the stealthier it is.
To apply the idea on evaluating symbolic opaque predicates,
we should measure the difference between a symbolic opaque
predicate and ordinary predicates. In general, the difference
depends on which challenging problem that a predicate
employs. Different problems will generate different codes and
corresponding assembly instructions. Figure 7 demonstrates
the assembly codes of several opaque predicates. Figure 7(a)
is the default opaque predicate generated by Obfuscator-
LLVM, which is mainly composed of arithmetic operations.
Figure 7(b) is the symbolic opaque predicate with ﬂoating-
point numbers, which is mainly composed of ﬂoating-point
operations. The two ﬁgures demonstrate obvious difference;
however, all such instructions are widely used in ordinary
programs.
TABLE II: Categorization of Instructions.
Category
Arithmetic Instructions
Logical Instructions
Instructions for Data
Transfer
Instructions Converting
Data Dimension
Pointer Instructions
Comparison Instructions
Jump Instructions
Instructions
imul, inc, sub, add, idiv, divsd, sbb
and, sar, xor, test, shr, shl, or, xorps
movaps, movsd, movabs, movzx,
mov, movss, movsx, movsxd, stosd
cvtss2sd, cvtsi2sd, cvtsd2ss, cqo, cdq
lea
cmp, ucomisd
jle, jne, jge, jae, jl, je,jg, jp, ja, jbe,
jno, jmp
Stack-related Instructions
pop, push, call, ret
Instructions Creating
Boolean Variable
Other Instructions
setge, setne, setg, seta, setb, setl, sete
nop
In our experiment, we use a similarity-based approach to
measure the difference between symbolic opaque predicates
and ordinary predicates. To this end, we randomly select 100
ordinary predicates from the unobfuscated binaries. For each
predicate, we arbitrarily select the 10 instructions before its
conditional jump because such instructions would serve as
essential information for reverse analysis. Then we categorize
such instructions into several
types with a categorization
approach employed for malware detection [27]. Table II lists
the categories and corresponding instructions in each category.
Considering the space where each dimension is an instruction
category, a predicate can be represented as a vector in that
space. Then we can compute the center of the 100 ordinary
opaque predicates, and compute the euclidean distance from
each predicate to the center. Figure 8 shows the distribution
of such distances. In our experiment, the average distance is
2.6, and the max distance is 5.4. For comparison, we also
compute the distances from our symbolic opaque predicates
to the center, which are between 3.2, 4.1, 4.5, and 5.1.
The distances are smaller than the max distance of ordinary
predicate. Moreover, they are slightly better than the distance
of the default opaque predicate employed in Obfuscator-
LLVM, which is 5.2.
The opaque predicates based on parallel programming
has the best performance in stealth. The main reason is
that we have employed a call-based approach to implement
the predicate. As shown in Figure 4(e), we implement the
symbolic analysis problem in another function and only
employ the return value in the main routine. In its binary code
shown in Figure 7(c), only a call instruction is artiﬁcially
added before the unconditional jump, and the rest instructions
are mostly from the original program. By simply reading the
instructions nearby a conditional jump, it would be difﬁcult to
discover the tricks of symbolic opaque predicates.
E. Cost
To evaluate the cost of symbolic opaque predicates, we
obfuscate several general programs (e.g., Linux commands
such as cat, ls, date) and several encryption programs
(e.g., MD5 and AES). We choose encryption programs because
674
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
(cid:15)(cid:139)(cid:144)(cid:151)(cid:154)(cid:486)(cid:133)(cid:131)(cid:150)(cid:3)(cid:4666)(cid:22)(cid:139)(cid:156)(cid:135)(cid:3)(cid:18)(cid:152)(cid:135)(cid:148)(cid:138)(cid:135)(cid:131)(cid:134)(cid:4667)
(cid:882)
(cid:883)
(cid:887)
(cid:883)(cid:882)
(cid:144)(cid:145)(cid:3)(cid:142)(cid:139)(cid:143)(cid:139)(cid:150)
(cid:4667)
(cid:149)
(cid:143)
(cid:3)
(cid:139)
(cid:4666)
(cid:3)
(cid:135)
(cid:143)
(cid:23)
(cid:144)
(cid:145)
(cid:139)
(cid:150)
(cid:151)
(cid:133)
(cid:135)
(cid:154)
(cid:8)
(cid:15)(cid:139)(cid:144)(cid:151)(cid:154)(cid:486)(cid:133)(cid:131)(cid:150)(cid:3)(cid:4666)(cid:8)(cid:154)(cid:135)(cid:133)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:18)(cid:152)(cid:135)(cid:148)(cid:138)(cid:135)(cid:131)(cid:134)(cid:4667)
(cid:882)
(cid:883)
(cid:887)
(cid:883)(cid:882)
(cid:144)(cid:145)(cid:3)(cid:142)(cid:139)(cid:143)(cid:139)(cid:150)
(cid:883)(cid:890)
(cid:883)(cid:888)
(cid:883)(cid:886)
(cid:883)(cid:884)
(cid:883)(cid:882)
(cid:890)
(cid:888)
(cid:886)
(cid:884)
(cid:882)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:16)(cid:135)(cid:143)(cid:145)(cid:148)(cid:155)
(cid:9)(cid:142)(cid:145)(cid:131)(cid:150)(cid:139)(cid:144)(cid:137)(cid:486)(cid:146)(cid:145)(cid:139)(cid:144)(cid:150)(cid:3)(cid:17)(cid:151)(cid:143)(cid:132)(cid:135)(cid:148)
(cid:6)(cid:145)(cid:152)(cid:135)(cid:148)(cid:150)(cid:3)(cid:19)(cid:148)(cid:145)(cid:146)(cid:131)(cid:137)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:19)(cid:131)(cid:148)(cid:131)(cid:142)(cid:142)(cid:135)(cid:142)(cid:3)(cid:19)(cid:148)(cid:145)(cid:137)(cid:148)(cid:131)(cid:143)(cid:143)(cid:139)(cid:144)(cid:137)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:16)(cid:135)(cid:143)(cid:145)(cid:148)(cid:155)
(cid:9)(cid:142)(cid:145)(cid:131)(cid:150)(cid:139)(cid:144)(cid:137)(cid:486)(cid:146)(cid:145)(cid:139)(cid:144)(cid:150)(cid:3)(cid:17)(cid:151)(cid:143)(cid:132)(cid:135)(cid:148)
(cid:6)(cid:145)(cid:152)(cid:135)(cid:148)(cid:150)(cid:3)(cid:19)(cid:148)(cid:145)(cid:146)(cid:131)(cid:137)(cid:131)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:19)(cid:131)(cid:148)(cid:131)(cid:142)(cid:142)(cid:135)(cid:142)(cid:3)(cid:19)(cid:148)(cid:145)(cid:137)(cid:148)(cid:131)(cid:143)(cid:143)(cid:139)(cid:144)(cid:137)
(a) Size overhead when obfuscating Linux command cat.
(b) Execution overhead when obfuscating Linux command cat.
(cid:15)(cid:139)(cid:144)(cid:151)(cid:154)(cid:486)(cid:134)(cid:131)(cid:150)(cid:135)(cid:3)(cid:4666)(cid:22)(cid:139)(cid:156)(cid:135)(cid:3)(cid:18)(cid:152)(cid:135)(cid:148)(cid:138)(cid:135)(cid:131)(cid:134)(cid:4667)
(cid:882)
(cid:883)
(cid:887)
(cid:883)(cid:882)
(cid:144)(cid:145)(cid:3)(cid:142)(cid:139)(cid:143)(cid:139)(cid:150)
(cid:883)(cid:884)
(cid:883)(cid:882)
(cid:4667)
(cid:149)
(cid:143)
(cid:15)(cid:139)(cid:144)(cid:151)(cid:154)(cid:486)(cid:134)(cid:131)(cid:150)(cid:135)(cid:3)(cid:4666)(cid:8)(cid:154)(cid:135)(cid:133)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:18)(cid:152)(cid:135)(cid:148)(cid:138)(cid:135)(cid:131)(cid:134)(cid:4667)
(cid:882)
(cid:883)
(cid:887)
(cid:883)(cid:882)
(cid:144)(cid:145)(cid:3)(cid:142)(cid:139)(cid:143)(cid:139)(cid:150)
(cid:3)
(cid:139)
(cid:4666)
(cid:3)
(cid:135)
(cid:143)