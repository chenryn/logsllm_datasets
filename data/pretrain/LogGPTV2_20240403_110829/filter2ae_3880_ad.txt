  6. [ViaLab Community Edition](https://www.nowsecure.com/blog/2014/09/10/introducing-vialab-community-edition/)
  7. [Droidbox](https://github.com/pjlantz/droidbox)
  8. [Mercury](http://labs.mwrinfosecurity.com/tools/2012/03/16/mercury/)
  9. [Drozer](https://labs.mwrinfosecurity.com/tools/drozer/)
  10. [Taintdroid](https://appanalysis.org/download.html) \- requires AOSP compilation
  11. [Xposed](https://forum.xda-developers.com/showthread.php?t=1574401) \- equivalent of doing Stub based code injection but without any modifications to the binary
  12. [Android Hooker](https://github.com/AndroidHooker/hooker) \- API Hooking of java methods triggered by any Android application (requires the Substrate Framework)
  13. [Android tamer](https://androidtamer.com/) \- custom image
  14. [Droidscope](https://code.google.com/p/decaf-platform/wiki/DroidScope) \- custom image for dynamic analysis
  15. [CuckooDroid](https://github.com/idanr1986/cuckoo-droid) \- Android extension for Cuckoo sandbox
  16. [Mem](https://github.com/MobileForensicsResearch/mem) \- Memory analysis of Android (root required)
  17. [Crowdroid](http://www.ida.liu.se/labs/rtslab/publications/2011/spsm11-burguera.pdf) – unable to find the actual tool
  18. [AuditdAndroid](https://github.com/nwhusted/AuditdAndroid) – android port of auditd, not under active development anymore
  19. [Android Security Evaluation Framework](https://code.google.com/p/asef/) \- not under active development anymore
  20. [Android Reverse Engineering](https://redmine.honeynet.org/projects/are/wiki) – ARE (android reverse engineering) not under active development anymore
  21. [Aurasium](https://github.com/xurubin/aurasium) – Practical security policy enforcement for Android apps via bytecode rewriting and in-place reference monitor.
  22. [Android Linux Kernel modules](https://github.com/strazzere/android-lkms) *
  23. [Appie](https://manifestsecurity.com/appie/) \- Appie is a software package that has been pre-configured to function as an Android Pentesting Environment.It is completely portable and can be carried on USB stick or smartphone.This is a one stop answer for all the tools needed in Android Application Security Assessment and an awesome alternative to existing virtual machines.
  24. [StaDynA](https://github.com/zyrikby/StaDynA) \- a system supporting security app analysis in the presence of dynamic code update features (dynamic class loading and reflection). This tool combines static and dynamic analysis of Android applications in order to reveal the hidden/updated behavior and extend static analysis results with this information.
  25. [DroidAnalytics](https://github.com/zhengmin1989/DroidAnalytics) \- incomplete
  26. [Vezir Project](https://github.com/oguzhantopgul/Vezir-Project) \- Virtual Machine for Mobile Application Pentesting and Mobile Malware Analysis 
## REVERSE ENGINEERING
  1. [Smali/Baksmali](https://github.com/JesusFreke/smali) – apk decompilation
  2. [emacs syntax coloring for smali files](https://github.com/strazzere/Emacs-Smali)
  3. [vim syntax coloring for smali files](http://codetastrophe.com/smali.vim)
  4. [AndBug](https://github.com/swdunlop/AndBug)
  5. [Androguard](https://github.com/androguard/androguard) – powerful, integrates well with other tools
  6. [Apktool](https://ibotpeaches.github.io/Apktool/) – really useful for compilation/decompilation (uses smali)
  7. [Android Framework for Exploitation](https://github.com/appknox/AFE)
  8. [Bypass signature and permission checks for IPCs](https://github.com/iSECPartners/Android-KillPermAndSigChecks)
  9. [Android OpenDebug](https://github.com/iSECPartners/Android-OpenDebug) – make any application on device debuggable (using cydia substrate).
  10. [Dare](http://siis.cse.psu.edu/dare/index.html) – .dex to .class converter
  11. [Dex2Jar](https://github.com/pxb1988/dex2jar) \- dex to jar converter
  12. [Enjarify](https://github.com/google/enjarify) \- dex to jar converter from Google
  13. [Dedexer](http://dedexer.sourceforge.net)
  14. [Fino](https://github.com/sysdream/fino)
  15. [Indroid](https://bitbucket.org/aseemjakhar/indroid) – thread injection kit
  16. [IntentSniffer](https://www.nccgroup.trust/us/about-us/resources/intent-sniffer/)
  17. [Introspy](https://github.com/iSECPartners/Introspy-Android)
  18. [Jad](http://varaneckas.com/jad/) \- Java decompiler
  19. [JD-GUI](https://github.com/java-decompiler/jd-gui) \- Java decompiler
  20. [CFR](http://www.benf.org/other/cfr/) \- Java decompiler
  21. [Krakatau](https://github.com/Storyyeller/Krakatau) \- Java decompiler
  22. [Procyon](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler) \- Java decompiler
  23. [FernFlower](https://github.com/fesh0r/fernflower) \- Java decompiler
  24. [Redexer](https://github.com/plum-umd/redexer) – apk manipulation
  25. [Smali viewer](http://blog.avlyun.com/wp-content/uploads/2014/04/SmaliViewer.zip)
  26. [ZjDroid](https://github.com/BaiduSecurityLabs/ZjDroid) (no longer available), [fork/mirror](https://github.com/yangbean9/ZjDroid)
  27. [Simplify Android deobfuscator](https://github.com/CalebFenton/simplify)
  28. [Bytecode viewer](https://github.com/Konloch/bytecode-viewer)
  29. [Radare2](https://github.com/radare/radare2)
## FUZZ TESTING
  1. [IntentFuzzer](https://www.nccgroup.trust/us/about-us/resources/intent-fuzzer/)
  2. [Radamsa Fuzzer](https://github.com/anestisb/radamsa-android)
  3. [Honggfuzz](https://github.com/google/honggfuzz)
  4. [An Android port of the melkor ELF fuzzer](https://github.com/anestisb/melkor-android)
  5. [Media Fuzzing Framework for Android](https://github.com/fuzzing/MFFA)
## APP REPACKAGING DETECTORS
  1. [FSquaDRA](https://github.com/zyrikby/FSquaDRA) \- a tool for detection of repackaged Android applications based on app resources hash comparison.
## Exploitable Vulnerabilties
  1. [Vulnerability Google doc](https://docs.google.com/spreadsheet/pub?key=0Am5hHW4ATym7dGhFU1A4X2lqbUJtRm1QSWNRc3E0UlE&single=true&gid=0&output=html)
  2. [Root Exploits (from Drozer issue #56)](https://github.com/mwrlabs/drozer/issues/56)
## SAMPLE SOURCES
  1. [contagio mini dump](http://contagiominidump.blogspot.com)
  2. [Android malware github repo](https://github.com/ashishb/android-malware)
  3. [Open Source database](https://code.google.com/p/androguard/wiki/DatabaseAndroidMalwares)
  4. [Drebin](http://user.informatik.uni-goettingen.de/~darp/drebin/)
  5. [Admire](http://admire.necst.it/)
  6. [MalGenome](http://www.malgenomeproject.org/policy.html) \- contains 1260 malware samples categorized into 49 different malware families, free for research purpose.
  7. [VirusTotal Malware Intelligence Service](https://www.virustotal.com/en/about/contact/) \- powered by VirusTotal,not free
## Reading material
  1. [Android Security (and Not) Internals](http://www.zhauniarovich.com/pubs.html)
  2. [Android security related presentations](https://github.com/jacobsoo/AndroidSlides)
  3. [A good collection of static analysis papers](https://tthtlc.wordpress.com/2011/09/01/static-analysis-of-android-applications/)
## MARKET CRAWLERS
  1. [Google play crawler (Java)](https://github.com/Akdeniz/google-play-crawler)
  2. [Google play crawler (Python)](https://github.com/egirault/googleplay-api)
  3. [Google play crawler (Node) ](https://github.com/dweinstein/node-google-play) \- get app details and download apps from official Google Play Store.
  4. [Aptoide downloader (Node)](https://github.com/dweinstein/node-aptoide) \- download apps from Aptoide third-party Android market
  5. [Appland downloader (Node)](https://github.com/dweinstein/node-appland) \- download apps from Appland third-party Android market
## MISC TOOLS
  1. [smalihook](http://androidcracking.blogspot.com/2011/03/original-smalihook-java-source.html)
  2. [APK-Downloader](http://codekiem.com/2012/02/24/apk-downloader/)
  3. [AXMLPrinter2](http://code.google.com/p/android4me/downloads/detail?name=AXMLPrinter2.jar) \- to convert binary XML files to human-readable XML files
  4. [adb autocomplete](https://romannurik-code.googlecode.com/git/bash_completion/adb)
  5. [Dalvik opcodes](http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html)
  6. [Opcodes table for quick reference](http://www.xchg.info/corkami/opcodes_tables.pdf)
  7. [ExploitMe Android Labs](http://securitycompass.github.io/AndroidLabs/setup.html) \- for practice
  8. [GoatDroid](https://github.com/jackMannino/OWASP-GoatDroid-Project) \- for practice
  9. [mitmproxy](https://github.com/mitmproxy/mitmproxy)
  10. [dockerfile/androguard](https://github.com/dweinstein/dockerfile-androguard)
  11. [Android Vulnerability Test Suite](https://github.com/nowsecure/android-vts) \- android-vts scans a device for set of vulnerabilities
## Good Tutorials
  1. [Android Reverse Engineering 101 by Daniele Altomare](http://www.fasteque.com/android-reverse-engineering-101-part-1/)
# Other Awesome Lists
Other amazingly awesome lists can be found in the [awesome-awesomeness](https://github.com/bayandin/awesome-awesomeness) list.
* * *