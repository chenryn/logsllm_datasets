### Internet-Based Self-Services: from Analysis and Design to Deployment

**Authors:**
- Jorge Cardoso
- John A. Miller

**Affiliations:**
- Department of Informatics Engineering/CISUC, University of Coimbra, Coimbra, Portugal
- Computer Science Department, University of Georgia, Athens, GA, USA

**Emails:**
- Jorge Cardoso: [jorge.cardoso@uc.pt](mailto:jorge.cardoso@uc.pt)
- John A. Miller: [john.miller@uga.edu](mailto:john.miller@uga.edu)

**Abstract:**
Many global economies have shifted from manufacturing to service-oriented models. Consequently, research on Internet-based Self-Services (ISS) can enhance the uptake of service exports and trading by replacing many face-to-face interactions with more accurate, convenient, and faster transactions. Currently, ISS are often created using generic software techniques and development methods, which results in poor support. Systematic methods that go beyond service design to include service analysis, implementation, and deployment are needed. In this paper, we introduce SEASIDE, a systematic development approach based on four scientific advances: enterprise architectures (EA), model-driven developments (MDD), model-view-controller pattern (MVC), and platform as a service (PaaS). We evaluated our approach using the Incident Management service from the Information Technology Infrastructure Library (ITIL). Our research indicates that SEASIDE enables a focus on the business and design aspects of services, reducing development time and costs.

**Keywords:**
- Service engineering
- Service design
- Self-services
- Service architecture
- EA
- MDD
- MVC
- PaaS

---

### 1. Introduction

The primary objective of this paper is to understand how the systematic analysis, design, implementation, and deployment of Internet-based self-services (ISS) can be achieved through the intersection of four main research streams: enterprise architectures (EA), model-driven developments (MDD), model-view-controller architecture (MVC), and platforms as a service (PaaS). The combination of these approaches has resulted in a development methodology called SEASIDE (SystEmAtic ServIce DEvelopment).

Our approach was applied to the Incident Management Service from the ITIL, used as a use case. We followed an end-to-end systematic engineering process, concluding with its deployment using a PaaS. We hypothesize that the integration of these four research streams can reduce complexity, reuse common patterns, automate implementation, and simplify the deployment of ISS.

Enterprise architectures enable the reduction of complexity in designing services through abstraction and divide-and-conquer mechanisms. Model-driven development initiatives foster automated code generation, reducing ISS implementation costs. The MVC pattern reduces code organization complexity, and PaaS cloud-based infrastructures simplify service deployment and reduce operational costs.

### 2. Related Work

We previously developed the ISE (Inter-enterprise Service Engineering) methodology and workbench, one of the first attempts to devise a service engineering procedure for designing business services. ISE shares some similarities with the method presented here, as it was also inspired by the Zachman framework and relies on model-driven development concepts. However, the differences are significant, reflecting the experience gained from ISE's development.

ISE was conceived to analyze and model services but did not foresee the implementation and deployment phases of the service engineering lifecycle. The exploration of these additional phases makes the proposal described in this paper a complete, end-to-end solution. ISE adopted the first five perspectives (abstractions) of the Zachman framework, but we learned that the granularity of these perspectives was too fine to provide a useful modeling solution. Therefore, in our new proposal for ISS engineering, we do not consider the conceptual and physical perspectives, making the approach simpler and more appealing to stakeholders.

### 3. Systematic Service Development

One of the cornerstones of our SEASIDE methodology is the adoption and adaptation of an enterprise architecture framework to provide a service architecture for organizing service developments and verifying their completeness. Completeness refers to the verification that a service has all the necessary models, interfaces, linkings, and flows for analysis, modeling, implementation, and deployment.

#### A. Service Architecture

The enterprise architecture adopted to provide a service architecture is the Zachman framework for the following reasons:
1. Our previous research on using this framework for service engineering was positive.
2. There is a clear mapping between the framework and the components of the proposed approach. For example, MDD maps to the logical perspective of the Zachman framework, and MVC maps to the 'as built' perspective.
3. It provides simple cognitive models, such as mindmaps and nested bullet lists, which help stakeholders deal with abstraction and complexity using a divide-and-conquer approach.
4. It addresses the separation of concerns paradigm by dividing and structuring services into six dimensions relevant for ISS: data, processes, networks, people, time, and motivation.

Based on our previous research, we realized that the original framework structure, while adequate for modeling enterprise architectures, had too many abstractions, making it difficult to use. We decided to "discard" two abstractions (conceptual and physical) and added a functioning abstraction to capture the commercial PaaS used to operate ISS. The resulting service architecture is illustrated in Figure 1 and is composed of the following abstractions:
- **Service Analysis:** Corresponds to the contextual abstraction and contains mindmaps and nested bullet lists.
- **Service Design:** Corresponds to the logical abstraction and contains models such as processes and user abstract interfaces managed using MDD.
- **Service Implementation:** Corresponds to the 'as built' abstraction and contains a specialization of the MVC pattern.
- **Service Deployment:** Corresponds to the functioning abstraction and contains Internet-based self-services running on a PaaS.

#### B. Service Development Method

The workflow for generating MVC-based ISS applications from a service architecture is described in Figure 2. In the first and second steps, stakeholders construct service models based on the weak semantics captured in the analysis phase. These steps are manual and involve intensive discussions about the objectives of the ISS to be developed. In the third and fourth steps, models are serialized to XML, and code and instructions are automatically generated from models by applying XSLT transformations and customized transformation engines using XPath. E-R models generate SQL instructions, service blueprints generate controllers (coded using Ruby, Java, or PHP), and inject control-flow instructions into views (e.g., HTML instructions). Low-fidelity prototypes representing the UI of servicesâ€™ tasks front-ends are used to generate web pages, and USDL generates information instructions to the views (e.g., quality of service information) and controllers (e.g., if-then-else conditions that specify the operating schedule for our ITIL IMS use case). The injection of code is made using specific tags placed in the receiving code, which are replaced by the code being injected.

In the fifth step, the generated code and instructions are integrated and organized according to an MVC-based structure customized for services, named MVC for Services. Information on the deployment is extracted from the network graph and packed into a service archive along with the MVC for Service structure. The networked graph contains information on the parameterization of the commercial PaaS and the instructions needed for deployment. In the last step, the service archive is automatically deployed into a commercial PaaS platform. After this final step, the ISS is available for use by end users, who can interact with it using a web browser.

#### C. ITIL Service Use Case

As a use case, we applied our SEASIDE end-to-end development approach to analyze, design, implement, and deploy the Incident Management Service from the ITIL. This use case demonstrates the practical applicability of our approach and highlights the advantages and challenges of the SEASIDE methodology.

### 4. Contributions and Lessons Learned

Our research indicates that the SEASIDE methodology effectively reduces the complexity of service analysis by using weak semantics and taxonomies. Automatic code generation techniques ensure consistency and traceability between ISS models and service implementation. The use of an adapted MVC pattern enhances the quality of the generated code and instructions, improving maintainability and readability. By leveraging a PaaS for ISS operation, the time and complexity of deployment were significantly reduced.

### 5. Conclusions

This paper presents SEASIDE, a systematic development approach for Internet-based self-services that integrates enterprise architectures, model-driven developments, the model-view-controller pattern, and platform as a service. Our findings indicate that SEASIDE enables a focus on the business and design aspects of services, reducing development time and costs. Future work will explore the application of SEASIDE to a broader range of service domains and further refine the methodology to address emerging challenges in the field of service engineering.