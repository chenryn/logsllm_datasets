Internet-Based Self-Services: from Analysis and
Design to Deployment
Jorge Cardoso John A. Miller
Dept. Engenharia Informatica/CISUC Computer Science Department
University of Coimbra University of Georgia
Coimbra, Portugal Athens, GA, USA
Email: PI:EMAIL Email: PI:EMAIL
Abstract—Manyworldwideeconomieshavemovedawayfrom lower costs. ISS are a subtype of services driven by self-
manufacturing and became service-oriented. As a consequence, servicetechnologies[8]whichprovidetechnologicalinterfaces
research on Internet-based Self-Services (ISS) will foster the
allowing customers to use services independently of the in-
uptake of service exports and trading since they can replace
volvement of direct service employee. Self-ticket purchasing
many face-to-face interactions and make service transactions
more accurate, convenient and faster. Currently, ISS are poorly and self-check-in for a flight using the Internet are examples
supported since they are created using generic software tech- of Internet-based self-services.
niquesanddevelopmentmethods.Systematicmethodsareneeded Indeed, the Internet and W3C/OASIS standards have a
and must go beyond service design, a well established research
significant role for software-driven services but they are not
area, to account also for service analysis, implementation, and
sufficienttosupportself-services.Thechallengehereishowto
deployment. In this paper, we explore a systematic development
approach,calledSEASIDE,basedonfourscientificadvances:en- “industrialize the manufacturing” of services for international
terprise architectures (EA), model-driven developments (MDD), trading. The formalization, conceptualization and integration
model-view-controller pattern (MVC), and platform as a service of this service triangle (technology, business, and design)
(PaaS). By selecting the Incident Management service from
will enable, among other things, to increase the exports
the Information Technology Infrastructure Library, we have
of services, reduce time-to-market from service analysis to
evaluatedourapproach.Ourresearchindicatesthattheproposed
method enables to focus on the business and design side of service deployment, and provision services to consumers with
services, and reduce development time and costs. lower operation costs [9]. ISS can replace many face-to-
face service interactions to make service transactions more
Keywords-serviceengineering;servicedesign;self-services;ser-
vice architecture; EA; MDD; MVC; PaaS; accurate, convenient and faster by using the Internet as a
delivery medium and a Web browser as an interaction tool.
I. INTRODUCTION
The purpose and objective of this paper is to understand
The research done so far in the field of services has taken how the systematic analysis, design, implementation and de-
three main and distinct paths. On the one hand, and from the ployment of Internet-based self-services can benefit and be
computer science community, services have been seen from achieved from the intersection of four main research streams:
a software and IT perspective. This has originated extensive a)enterprisearchitectures(EA),b)model-drivendevelopments
research around the concepts of Web services and software- (MDD), c) model-view-controller architecture (MVC), and
oriented architecture (SOA) [1], [2]. On the other hand, a d) platforms as a service (PaaS). The combination of these
stream originating from business and marketing has targeted fourapproachesresultedinadevelopmentmethodologycalled
the development of service management approaches and the SEASIDE1.
economical analysis of services from a sales, communications Our approach was applied to the Incident Management
and business models perspective [3], [4]. Models for under- Service description from the Information Technology Infras-
standing and modeling service processes, models for under- tructure Library (ITIL [3]) which was used as a use case.
standingcustomersatisfactionandtoolsformeasuringservice We followed an end-to-end systematic engineering which was
qualityhavebeensomeoftheresults.Andastreamoriginating finalized with its deployment using a platform as a service
from service design has taken the design perspective [5], [6]. and explored the difficulties, advantages and challenges of
It has targeted the ’deep dive’ into the world of actors within the approach. We hypothesize that the combination of these
service systems, aiming at the development and prototyping four research streams can support a systematic engineering
of scenarios for service improvements and innovations. methodology which enables to reduce the complexity, reuse
Our claim is that research on services should now focus common patterns and structures, automatize implementation,
on bridging the results already obtained, i.e. from software- and simplify the deployment of ISS. Enterprise architectures
basedservices,businessmodels,andservicedesign,toprovide enable to reduce the complexity of designing services by
systematic approaches to develop Internet-based Self-Services
(ISS) [7] which enable a faster time to market and involve 1SEASIDE=SystEmAticServIceDEvelopment
usingabstractionanddivide-and-conquermechanisms.Model- were not mature for multi-model scenarios. In this paper,
driven development initiatives foster the automatized genera- model-driven developments are used in a much simpler way
tion of code and reduce ISS’ implementation costs. Model- to generate software code and instructions.
view-controller patterns reduce code organization complexity. Several researchers have investigated how models, such
And, platform as a service cloud-based infrastructures enable as UML diagrams, could be used to automatically generate
to simplify the deployment of services and reduce operation semantic Web services descriptions [13], [14], [15], [16]. In
costs. [13], the authors proposed an approach to produce MVC-
The findings of our research indicate that the proposed based skeletons for Web applications from UML and OWL-
SEASIDE methodology enabled to reduce service analysis S descriptions. In [14] and [15] the authors use UML class
complexity by using weak semantics and taxonomies. The diagramstorepresentdatamodelsandUMLactivitydiagrams
use of automatic code generation techniques enabled the to represent business processes. The approach is used with
consistency and traceability between ISS models and service semantic Web services specified with OWL-S by applying
implementation.Ithasalsoenabledtosupportamoreefficient XSLT transformations to UML diagrams. Timm and Gannod
implementationphase.Theuseofanadaptationoftheoriginal [16] also present an automated software tool that uses model-
MVC pattern enabled a higher and consistent quality of the driven developments to generate OWL-S descriptions from
generated code and instructions with respect to errors, main- UMLdiagrams.Comparedtoourwork,weseektounderstand
tainability and readability. By using a PaaS for ISS operation, how various models (e.g. data models, service blueprinting,
the time and complexity of deployment was reduced. network graphs, user interfaces, USDL, etc.) can co-exist and
This paper is structured as follows. Section I, the in- be transformed into software components that implement an
troduction, provides the background to our work, identifies ISS. Handling several models provide a more real service
limitations of current and requirements for future research, development environment. We rely on model-driven develop-
and gives an overview of our approach. Section II describes mentstoalsogeneratesoftwarecode.Butinourwork,codeis
themainrelatedresearchinthisarea.InsectionIIIwedescribe organizedaccordingtoamodifiedversionoftheMVCpattern
our systematic methodology and depict a use case from ITIL structured to implement and deploy ISS services. We believe
to illustrate its applicability in practice. Sections IV, V, VI, thattheMVCpatternneedstobespecializedtoreflectdomain
and VII describe the contribution of EA, MDD, MVC, and knowledge of services.
PaaS, respectively, to our approach. Section VIII presents our The telecommunication industry is realizing the value of
achievementsandthelessonswehavelearned.Finally,section exposing WSDL/SOAP Web services to consumers using
IX presents our conclusions. governance systems and best practices. For example, SAPO,
a subsidiary of Portugal Telecom (the largest telecommuni-
II. RELATEDWORK
cations service provider in Portugal), developed a Service
We have previously developed the ISE (Inter-enterprise Delivery Broker [17] to design and deploy Web services. The
Service Engineering) methodology and workbench [10], [11], system enables the creation of Web services UI front-ends to
one of the first attempts to devise a Service Engineering enableconsumerstoeasilyaccessandbuyfunctionalities(e.g.
procedure for designing business services [12]. ISE has some SMS packages and GPS points of interests). Our work differs
similarities with the method presented in this paper since it in two fundamental aspects. On the one hand, we target the
was also inspired by the Zachman framework (see [12]) and study of Internet-based self-services and do not restrict our
reliesonmodel-drivendevelopmentconcepts.Nonetheless,the approach to WSDL/SOAP services. On the other hand, we
differences are important and reflect the experience we have seek to demonstrate that it is possible to develop automated
gainedwiththedevelopmentofISE.Ontheonehand,ISEwas end-to-endapproachestoimplementanddeployservicesinthe
conceived to analyze and model services and did not foresee ’cloud’. Overlapping objectives include understanding how a
the implementation and deployment phases of the service PaaScanreducethecostofservicemanagementanddelivery.
engineering lifecycle. The exploration of these two additional
III. SYSTEMATICSERVICEDEVELOPMENT
phasesmakestheproposaldescribedinthispaperacomplete,
end-to-endsolution.ISEadoptedthefirstfiveperspectives(i.e. One of the cornerstones of our SEASIDE methodology
abstractions)oftheZachmanframework.Wehavelearnedthat is the adoption and adaptation of an enterprise architecture
the granularity of these perspectives was too fine to provide a framework to provide a service architecture to organize ser-
useful modeling solution. As a result, in our new proposal for vices’ developments and verify their completeness. The term
ISS engineering, we do not consider the conceptual and phys- “completeness” refers to the verification that a service has all
ical perspectives. This decision made the approach simpler to the models, interfaces, linkings and flows needed so it can be
use and more appealing to stakeholders. On the other hand, analyzed, modeled, implemented and deployed.
the focus of ISE was on the horizontal/vertical integration,
A. Service architecture
synchronization, and transformation of models using model
transformation languages and toolkits such as MOF QVT or The enterprise architecture adopted to provide a service ar-
ATL (see [10], [12], [11]). This approach revealed to be too chitecturewastheZachmanframeworkforfourmainreasons:
complex since management tools for model transformation (1) our previous research on using this framework for the
Fig.1. ServicearchitectureforthesystematicdevelopmentofISS
Fig.2. TheprocessofdevelopingISSusingoursystematicapproach
engineering of services was positive (see [10]); (2) there is
a clear mapping between the framework and the components B. Service development method
of the approach proposed in this paper. For instance, MDD
Thefollowingparagraphsdescribetheworkflowwhichgen-
maps to the logical perspective of the Zachman framework
eratesMVC-basedISSapplicationsfromaservicearchitecture
and MVC maps to the ’as build’ perspective; (3) it provides
(see Figure 2). In the first and second step, stakeholders con-
simple cognitive models, such as mindmaps and nested bullet
struct service models based on the weak semantics captured
lists, which help stakeholders dealing with abstraction and
in the analysis phase. These steps are manual and involve
supportsthecomplexityofservicesusingadivide-and-conquer
an intensive discussion of the objectives of an ISS to be
approach; and (4) it addresses the separation of concerns
developed. In a third and fourth step, models are serialized to
paradigm raised by [18] by dividing and structuring services’
XML and code and instructions are automatically generated
important aspects into six dimensions relevant for ISS: data,
from models by applying XSLT transformations and cus-
processes, networks, people, time, and motivation.
tomizedtransformationenginesusingXPath.E-Rmodelsgen-
Based on our previous research, we have realized that the erate SQL instructions, service blueprints generate controllers
original framework structure, while adequate to model enter- (which are coded using, for example, Ruby, Java or PHP)
prise architectures, had too many abstractions which made and inject control-flow instructions into views (e.g. HTML
it difficult to use. As a result, we decided to “discard” two instructions), the low fidelity prototypes representing the UI
abstractionssincetheiroriginalcontributiondidnotfitexactly of services’ tasks front-ends are used to generate Web pages
our services’ needs. The conceptual and physical abstractions (seeFigure4),andUSDLgeneratesinformationinstructionsto
were left out in our service architecture. On the other hand, the views (e.g. quality of service information) and controllers
oneabstractionwasaddedwhenlookingatourpreviouswork (e.g.if-then-elseconditionsthatspecifytheoperatingschedule
ontheISEframework.Thefunctioningabstractionwasadded for our ITIL IMS use case). The injection of code was made
to capture the commercial PaaS which can be used to operate using specific  tags placed in the receiving code
ISS. The resulting service architecture is illustrated in Figure which was replaced by the code being injected. In the fifth
1 and is composed of the following abstractions: step, the code and instructions generated are integrated and
organized according to an MVC-based structure customized
• Serviceanalysiscorrespondstothecontextualabstraction
to services and named MVC for Services. Information on
and contains mindmaps and nested bullet lists.
the deployment is extracted from the network graph and
• Service design corresponds to the logical abstraction and
packedintoaservicearchivealongwiththeMVCforService
contains models, such as processes and user abstract
structure. The networked graph contained information on the
interfaces, managed using MDD.
parameterization of the commercial PaaS and the instructions
• Service implementation corresponds to the ’as build’
needed for deployment. In the last step, the service archive
abstraction and contains a specialization of the MVC
is automatically deployed into a commercial PaaS platform.
pattern.
After this last step, the ISS is available for use by end users
• Service deployment corresponds to the functioning ab-
which can interact with it using a Web browser.
straction and contains Internet-based self-services run-
ning on a PaaS. C. ITIL service use case
The service architecture is a blueprint which drives the As a use case, we decided to apply our SEASIDE end-
systematic development process of ISS from service analysis, to-end development approach to analyze, design, implement