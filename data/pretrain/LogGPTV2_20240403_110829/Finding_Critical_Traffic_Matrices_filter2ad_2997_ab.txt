• the minimum trafﬁc demand oversizing
||~y, X|| = min
~x∈X
||~y, X|| = min
~x∈X,~x≤d~y
|~y − ~x|1
• the minimum weighted trafﬁc demand oversizing
||~y, X|| = min
~x∈X,~x≤d~y
~w · (~y − ~x)
where ~w is the geographical distance (e.g., air mile)
between ﬂow source and ﬂow destination of each ﬂow.
• the minimum link load oversizing
||~y, X|| = min
~x∈X,~x≤d~y
|A(~y − ~x)|1
where A is a routing matrix.
• the minimum oversizing in bandwidth mileage product
||~y, X|| = min
~x∈X,~x≤d~y
~d · (A(~y − ~x))
where A is a routing matrix and ~d is the length (in
miles) of each link.
Note that in the above functions, the notations |·|1, |·|2 and
|·|∞ denote the standard ‘1-norm, ‘2-norm and ‘∞-norm of
vector variables, respectively. More speciﬁcally,
|(a1, a2, . . . , ar)|1 =
|ai|
r(cid:88)
(cid:118)(cid:117)(cid:117)(cid:116) r(cid:88)
i=1
|(a1, a2, . . . , ar)|2 =
a2
i
|(a1, a2, . . . , ar)|∞ = max
1≤i≤r
|ai|
i=1
In our analysis and solution to the CritMat problem, we
will just deal with some instance of the distance function
||~y, X|| and treat the other forms of the distance function as
performance metrics.
2.2 Complexity Analysis
In this subsection, we will analyze the complexity of the
critical trafﬁc matrices selection problem. The decision ver-
sion of the optimization problem can be stated as follows.
• PROBLEM INSTANCE: A ﬁnite
a real number δ;
set X
=
an integer
{~x1, ~x2, . . . , ~xn};
number m.
• QUESTION:
Is
{~y1, ~y2, . . . , ~ym} such that
∀~y
X,∃a1, a2, . . . , am,
there a set of vectors Y
|Y | = m,
and (iii) ∀~x
ai~yi
(i)
Y,||~y, X|| ≤ δ
ai = 1 and ~x ≤d
m(cid:80)
m(cid:80)
∈
=
(ii)
∈
i=1
i=1
We now show that the CritMat problem is NP-hard in
|~y − ~x|∞ and dimension K
the case where ||~y, X|| = min
~x∈X
is unbounded. We show that 3-SAT is polynomial-time-
reducible to CritMat.
Given an instance of
a 3-SAT problem,
Proof:
C1 ∧ C2 ∧ . . . ∧ CM , where clause Ci is the disjunc-
tion of 3 literals (a literal is a variable or a negated variable),
we construct a CritMat problem as follows.
For each variable xi (1 ≤ i ≤ N) in the 3-SAT problem,
we create two vectors: ~v2i and ~v2i−1 which have value
0 in all dimensions except for the 2i-th and (2i − 1)-th
dimension. ~v2i, corresponding to xi, has value 3 in the
2i-th dimension and value 2 in the (2i − 1)-th dimension
and ~v2i−1, corresponding to ¬xi, has value 2 in the 2i-th
dimension and value 3 in the (2i−1)-th dimension. For each
clause Ci, 1 ≤ j ≤ M, we create another vector ~cj, which
has value 1.75 in the three dimensions that corresponds to
its three literals and has value 0 in the other dimensions.
For example, the vector for clause xi ∨ ¬xj ∨ xk has value
1.75 in the 2i-th, the (2j − 1)-th and the 2k-th dimension,
and has value 0 in the other dimensions. We set X be
the collection of variable vectors and clause vectors, i.e.,
X = {~v1, . . . , ~v2N , ~c1, . . . , ~cM} and let δ be 1 and m be the
number of variables, N.
We now show that the 3-SAT problem has a solution (a
truth assignment of variables that satisﬁes all clauses) if and
only if the constructed CritMat problem has a solution (a
set of vectors that satisﬁes the problem constraint).
⇒ If the original 3-SAT problem has a solution, the set
Y = {~y1, ~y2, . . . , ~yN} deﬁned as follows is a solution
of the constructed CritMat problem. For each vari-
able, xi, we deﬁne a vector ~yi: ~yi has value 4 in the
2i-th dimension, value 3 in the (2i − 1)-th dimension
and value 1 in the other dimensions if xi is T; ~yi has
value 3 in the 2i-th dimension, value 4 in the (2i − 1)-
th dimension and value 1 in the other dimensions if xi
is F. It is straight forward to see that |Y | = N and
∀~y ∈ Y,∃~x ∈ X|~y, ~x|∞ ≤ 1. Furthermore, it can
be veriﬁed that each pair of variable vectors, ~v2i and
~v2i−1, are dominated by ~yi, and each clause vector,
~ci, is dominated by a linear combination of the vec-
tors that corresponds to the variables in the clause, e.g.,
the clause vector for xi ∨ ¬xj ∨ xk is dominated by
4 ~yi + 3
8 ~yk if xi = xj = T and xk = F. Thus,
1
Y is a solution to the CritMat problem.
⇐ If the constructed CritMat problem has a solution:
Y = {~y1, ~y2, . . . , ~yN}, we know that 1) for each of
the 2N dimensions, there exists at least one ~yi that
has value no less than 3 in this dimension (otherwise
the corresponding variable vector is not dominated); 2)
each ~yi can have value no less than 3 in at most two di-
mensions: the 2j-th and (2j−1)-th dimension for some
j (otherwise ||~yi, X|| > 1). Combining 1) and 2), we
have that each ~yi has value no less than 3 in exactly
two dimensions that corresponds to a pair of variable
vectors. We rearrange i such that ~yi dominates ~v2i and
~v2i−1. Furthermore, since ||~yi, X|| ≤ 1, each ~yi should
have values between 3 and 4 in the 2i-th and (2i − 1)-
th dimension with at least one of them being exact 3,
and have values between 0 and 1 in the other dimen-
sions. Thus, if ~yi has value greater than 3 in the 2i-th
dimension, we let xi = T; otherwise we let xi = F.
We claim that such a truth assignment is a solution
to the 3-SAT problem. This can be shown by contra-
diction. Without loss of generality, we assume clause
xi ∨ ¬xj ∨ xk is not satisﬁed, i.e., xi = F, xj = T,
xk = F, which implies that ~yi has value 3 in the 2i-th
dimension and value no greater than 1 in the (2j−1)-th
and 2k-th dimension, ~yj has value 3 in the (2j − 1)-
8 ~yj + 3
th dimension and value no greater than 1 in the 2i-th
and 2k-th dimension, and ~yj has value 3 in the 2k-
th dimension and value no greater than 1 in the 2i-th
and (2j − 1)-th dimension. If we focus on the 2i-th,
(2j − 1)-th and 2k-th dimension, in the best case where
~yi, ~yj and ~yk take the upper bound value 1 in the corre-
sponding dimensions, they can dominate a vector with
value no larger than 3+1+1
3 in all of these three
dimensions. Therefore, the corresponding clause vec-
tor, which has 1.75 in these three dimensions, cannot
be dominated by any linear combination of vectors in
Y — contradicting to Y being a solution. Thus, all
clauses are satisﬁed and the truth assignment is a solu-
tion to the 3-SAT problem.
= 5
3
This completes the proof.
Now we have established the NP-hard-ness of CritMat
when the objective distance function is represented by the
maximum difference (in all dimensions) to the closest in-
put trafﬁc matrix. We conjecture that for other distance
functions, the CritMat problem remains NP-hard due to the
combinatorial nature of the solution space. In the next sec-
tion, we will look into approximation approaches to critical
trafﬁc matrices selection.
3 Algorithms
In this section, we describe our approximation algorithms
for CritMat. By looking at the structure of the problem, we
ﬁnd that CritMat shares many similarities to the traditional
clustering problem for high-dimensional data set – both re-
quire ﬁnding a set of representatives that can represent the
whole data set and are individually close to some member in
the data set. Therefore, we will ﬁrst look at some algorithms
in the context of high-dimensional data clustering. We will
brieﬂy review two well-known techniques for data cluster-
ing [11, 5], K-means and hierarchical agglomeration, the
latter of which has motivated our design of the Critical-ness
Aware Clustering algorithm.
K-means starts with a randomly chosen m vectors as the
center of the clusters, where m is the desired number of clus-
ters. Each vector computes its distance to each of the m clus-
ters, and joins the one with the minimum distance. Once a
vector joins a cluster, the center of the cluster is recomputed.
This step repeats until no vector can ﬁnd a smaller distance
to another cluster than the one that it belongs to.
Hierarchical agglomeration starts with n (singleton) clus-
ters centered at each of the n vectors to be clustered. At each
iteration, the pair of clusters with the minimum distance to
each other are agglomerated into one cluster. Once agglom-
erated, the center of the cluster is recomputed. The process
stops after n − m iterations when there are m clusters left.
While the K-means and the hierarchical agglomeration
algorithms generate m-partitions of the vector set such that
the vectors within one partition are close to each together, in
the CritMat problem, we are seeking a set of vectors that
for each xi
for each Ci, Cj
compute cost(i, j) =
volume(head(hi, hj))-max(mi, mj)
sort cost(i, j) in ascending order
create cluster Ci = {xi}
deﬁne cluster head hi = xi
let mi = volume of xi // max volume in Ci
1 initialization:
2
3
4
5
6
7
8
9
10 for step = 1 to n − m
11
12
13
14
15
16
17
18
19 return {hi} for the remaining m clusters
merge the clusters Ci, Cj with min cost(i, j):
hi = head(hi, hj)
mi = max(mi, mj)
remove cluster Cj
for each remaining cluster Ck
cost(i, k) = cost(k, i) =