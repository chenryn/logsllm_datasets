      TO r3  
      USING (r = "current_user"())  
postgres=# \c postgres r3  
You are now connected to database "postgres" as user "r3".  
```  
因为针对r3角色创建了update策略, 但是没有创建其他命令的策略, 所以其他命令的策略默认为FALSE?  
```  
postgres=> select * from test;  
 id | r   
----+---  
(0 rows)  
```  
更新操作应用了策略.  
```  
postgres=> update test set id=4 where r='r3';  
UPDATE 1  
postgres=> select * from test;  
 id | r   
----+---  
(0 rows)  
```  
现在创建SELECT的策略, 可以查询了  
```  
postgres=# create policy p1 on test for select to r3 using ( r = current_user);  
CREATE POLICY  
postgres=# \d+ test  
                         Table "public.test"  
 Column |  Type   | Modifiers | Storage | Stats target | Description   
--------+---------+-----------+---------+--------------+-------------  
 id     | integer |           | plain   |              |   
 r      | name    |           | plain   |              |   
Policies:  
    POLICY "p1" FOR SELECT  
      TO r3  
      USING (r = "current_user"())  
    POLICY "p4" FOR UPDATE  
      TO r3  
      USING (r = "current_user"())  
postgres=# \c postgres r3  
You are now connected to database "postgres" as user "r3".  
postgres=> select * from test;  
 id | r    
----+----  
  4 | r3  
(1 row)  
```  
但是delete命令上还没有创建策略, 所以删除操作直接FALSE.  
```  
postgres=> delete from test ;  
DELETE 0  
```  
在r1角色上, 没有创建任何策略, 所以操作是允许的.  
```  
postgres=> \c postgres r1  
You are now connected to database "postgres" as user "r1".  
postgres=# select * from test;  
 id | r    
----+----  
  1 | r1  
  2 | r2  
  4 | r1  
  4 | r2  
  4 | r1  
  4 | r2  
  4 | r1  
  4 | r3  
(8 rows)  
```  
在使用pg_dump导出或者使用pg_restore导入时. 如果表enable了row security策略.  
普通用户在执行pg_dump或pg_restore时会报错.  
例如 :   
```  
pg95@db-172-16-3-150-> pg_dump -U r2 -t test postgres  
.....  
COPY test (id, r) FROM stdin;  
pg_dump: [archiver (db)] query failed: ERROR:  insufficient privilege to bypass row security.  
pg_dump: [archiver (db)] query was: COPY public.test (id, r) TO stdout;  
```  
最后要讲一下使用策略的过滤顺序, 还记得视图攻击吗?  
[《PostgreSQL views privilege attack and security with security_barrier(视图攻击)》](../201307/20130710_01.md)    
同样, leakproof 函数也在策略过滤器前调用.  
例子 :   
普通函数  
```  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# create or replace function attack(int,name) returns boolean as $$  
postgres$# declare  
postgres$# begin  
postgres$#   raise notice '%,%', $1,$2;  
postgres$#   return true;  
postgres$# end;  
postgres$# $$ language plpgsql cost 0.00000000000000000000001 ;  
CREATE FUNCTION  
postgres=# \c postgres r3  
You are now connected to database "postgres" as user "r3".  
postgres=> select * from test where attack(id,r);  
NOTICE:  4,r3  
 id | r    
----+----  
  4 | r3  
(1 row)  
```  
普通函数在语句中的过滤是在策略过滤器后面执行  
```  
postgres=> explain select * from test where attack(id,r);  
                             QUERY PLAN                               
--------------------------------------------------------------------  
 Subquery Scan on test  (cost=0.00..61.32 rows=6 width=68)  
   Filter: attack(test.id, test.r)  
   ->  Seq Scan on test test_1  (cost=0.00..61.15 rows=17 width=68)  
         Filter: (r = "current_user"())  
(4 rows)  
```  
如果修改为leakproof函数的话  
```  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
postgres=# alter function attack(int,name) LEAKPROOF;  
ALTER FUNCTION  
```  
就直接上升到和过滤器一起执行了  
```  
postgres=# \c postgres r3  
postgres=> explain select * from test where attack(id,r);  
                      QUERY PLAN                        
------------------------------------------------------  
 Seq Scan on test  (cost=0.00..61.15 rows=6 width=68)  
   Filter: (attack(id, r) AND (r = "current_user"()))  
(2 rows)  
```  
可以从函数中读取出所有数据  
```  
postgres=> select * from test where attack(id,r);  
NOTICE:  1,r1  
NOTICE:  2,r2  
NOTICE:  4,r1  
NOTICE:  4,r2  
NOTICE:  4,r1  
NOTICE:  4,r2  
NOTICE:  4,r1  
NOTICE:  4,r3  
 id | r    
----+----  
  4 | r3  
(1 row)  
```  
## 参考  
1\. http://www.postgresql.org/docs/devel/static/sql-createpolicy.html  
2\. http://www.postgresql.org/docs/devel/static/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT  
row_security (enum)  
```  
This variable controls if row security policies are to be applied to queries which are run against tables that have row security enabled. The default is 'on'. When set to 'on', all users, except superusers and the owner of the table, will have the row policies for the table applied to their queries. The table owner and superuser can request that row policies be applied to their queries by setting this to 'force'. Lastly, this can also be set to 'off' which will bypass row policies for the table, if possible, and error if not.  
For a user who is not a superuser and not the table owner to bypass row policies for the table, they must have the BYPASSRLS role attribute. If this is set to 'off' and the user queries a table which has row policies enabled and the user does not have the right to bypass row policies then a permission denied error will be returned.  
The allowed values of row_security are on (apply normally - not to superuser or table owner), off (fail if row security would be applied), and force (apply always - even to superuser and table owner).  
For more information on row security policies, see CREATE POLICY.  
```      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")