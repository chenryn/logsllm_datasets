以 ! 开头可以运行 shell 命令。用法： ! 。
!ls
| 是管道符。用法：  |  。
pd | less
~ 用于文本比配（grep）。用法： [command]~[modifier][word,word]
[endmodifier][[column]][:line] 。
i~:0 显示 i 输出的第一行
pd~mov,eax 反汇编并匹配 mov 或 eax 所在行
pi~mov&eax 匹配 mov 和 eax 都有的行
i~0x400$ 匹配以 0x400 结尾的行
??? 可以获得以 ? 开头的命令的细节
? 可以做各种进制和格式的快速转换。如 ? 1234
?p vaddr 获得虚拟地址 vaddr 的物理地址
?P paddr 获得物理地址 paddr 的虚拟地址
?v 以十六进制的形式显示某数学表达式的结果。如 ?v eip-
0x804800 。
?l str 获得 str 的长度，结果被临时保存，使用 ?v 可输出结果。
@@ foreach 迭代器，在列出的偏移处重复执行命令。
wx ff @@ 10 20 30 在偏移 10、20、30 处写入 ff
p8 4 @@ fcn.* 打印处每个函数的头 4 个字节
?$? 可以显示表达式所使用变量的帮助信息。用法： ?v [$.] 。
$$ 是当前所处的虚拟地址
$? 是最后一个运算的值
$s 文件大小
$b 块大小
$l 操作码长度
231
2.2.1 radare2
$j 跳转地址。当 $$ 处是一个类似 jmp 的指令时， $j 中保存着
将要跳转到的地址
$f 跳转失败地址。即当前跳转没有生效， $f 中保存下一条指令的地
址
$m 操作码内存引用。如： mov eax,[0x10] => 0x10
e 用于进行配置信息的修改
e asm.bytes=false 关闭指令 raw bytes 的显示
默认情况下，执行的每条命令都有一个参考点，通常是内存中的当前位置，由命令
前的十六进制数字指示。任何的打印、写入或分析命令都在当前位置执行。例如反
汇编当前位置的一条指令：
[0x00005060]> pd 1
;-- entry0:
;-- rip:
0x00005060 31ed xor ebp, ebp
block size 是在我们没有指定行数的时候使用的默认值，输入 b 即可看到，使用
b [num] 修改字节数，这时使用打印命令如 pd 时，将反汇编相应字节的指
令。
[0x00005060]> b
0x100
[0x00005060]> b 10
[0x00005060]> b
0xa
[0x00005060]> pd
;-- entry0:
;-- rip:
0x00005060 31ed xor ebp, ebp
0x00005062 4989d1 mov r9, rdx
分析（analyze）
所有与分析有关的命令都以 a 开头：
232
2.2.1 radare2
[0x00000000]> a?
|Usage: a[abdefFghoprxstc] [...]
| ab [hexpairs] analyze bytes
| abb [len] analyze N basic blocks in [len] (section.size
by default)
| aa[?] analyze all (fcns + bbs) (aa0 to avoid sub re
naming)
| ac [cycles] analyze which op could be executed in [cycles
]
| ad[?] analyze data trampoline (wip)
| ad [from] [to] analyze data pointers to (from-to)
| ae[?] [expr] analyze opcode eval expression (see ao)
| af[?] analyze Functions
| aF same as above, but using anal.depth=1
| ag[?] [options] output Graphviz code
| ah[?] analysis hints (force opcode size, ...)
| ai [addr] address information (show perms, stack, heap,
...)
| ao[?] [len] analyze Opcodes (or emulate it)
| aO Analyze N instructions in M bytes
| ar[?] like 'dr' but for the esil vm. (registers)
| ap find prelude for current offset
| ax[?] manage refs/xrefs (see also afx?)
| as[?] [num] analyze syscall using dbg.reg
| at[?] [.] analyze execution traces
| av[?] [.] show vtables
233
2.2.1 radare2
[0x00000000]> aa?
|Usage: aa[0*?] # see also 'af' and 'afna'
| aa alias for 'af@@ sym.*;af@entry0;afva'
| aa* analyze all flags starting with sym. (af @
@ sym.*)
| aaa[?] autoname functions after aa (see afna)
| aab aab across io.sections.text
| aac [len] analyze function calls (af @@ `pi len~call
[1]`)
| aad [len] analyze data references to code
| aae [len] ([addr]) analyze references with ESIL (optionally t
o address)
| aai[j] show info of all analysis parameters
| aar[?] [len] analyze len bytes of instructions for refe
rences
| aan autoname functions that either start with
fcn.* or sym.func.*
| aas [len] analyze symbols (af @@= `isq~[0]`)
| aat [len] analyze all consecutive functions in secti
on
| aaT [len] analyze code after trap-sleds
| aap find and analyze function preludes
| aav [sat] find values referencing a specific section
or map
| aau [len] list mem areas (larger than len bytes) not
covered by functions
afl ：列出所有函数。
axt [addr] ：找到对给定地址的交叉引用。
af [addr] ：当你发现某个地址处有一个函数，但是没有被分析出来的时
候，可以使用该命令重新分析。
Flags
flag 用于将给定的偏移与名称相关联，flag 被分为几个 flag spaces，用于存放不同
的 flag。
[0x00000000]> f?
234
2.2.1 radare2
|Usage: f [?] [flagname] # Manage offset-name flags
| f list flags (will only list flags from
selected flagspaces)
| f?flagname check if flag exists or not, See ?? a
nd ?!
| f. [*[*]] list local per-function flags (*) as
r2 commands
| f.blah=$$+12 set local function label named 'blah'
| f* list flags in r commands
| f name 12 @ 33 set flag 'name' with length 12 at off
set 33
| f name = 33 alias for 'f name @ 33' or 'f name 1
33'
| f name 12 33 [cmt] same as above + optional comment
| PI:EMAIL delete local label from function at c
urrent seek (also f.-)
| f-- delete all flags and flagspaces (dein
it)
| f+name 12 @ 33 like above but creates new one if doe
snt exist
| f-name remove flag 'name'
| f-@addr remove flag at address expression
| f. fname list all local labels for the given f
unction
| f= [glob] list range bars graphics with flag of
fsets and sizes
| fa [name] [alias] alias a flag to evaluate an expressio
n
| fb [addr] set base address for new flags
| fb [addr] [flag*] move flags matching 'flag' to relativ
e addr
| fc[?][name] [color] set color for given flag
| fC [name] [cmt] set comment for given flag
| fd addr return flag+delta
| fe- resets the enumerator counter
| fe [name] create flag name.#num# enumerated fla
g. See fe?
| fi [size] | [from] [to] show flags in current block or range
| fg bring visual mode to foreground
| fj list flags in JSON format
235
2.2.1 radare2
| fl (@[flag]) [size] show or set flag length (size)
| fla [glob] automatically compute the size of all
flags matching glob
| fm addr move flag at current offset to new ad
dress
| fn list flags displaying the real name (
demangled)
| fo show fortunes
| fr [old] [[new]] rename flag (if no new flag current s
eek one is used)
| fR[?] [f] [t] [m] relocate all flags matching f&~m 'f'r
om, 't'o, 'm'ask
| fs[?]+-* manage flagspaces
| fS[on] sort flags by offset or name
| fV[*-] [nkey] [offset] dump/restore visual marks (mK/'K)
| fx[d] show hexdump (or disasm) of flag:flag
size
| fz[?][name] add named flag zone -name to delete.
see fz?[name]
常见用法：
f flag_name @ addr ：给地址 addr 创建一个 flag，当不指定地址时则默认
指定当前地址。
f-flag_name ：删除flag。
fs ：管理命名空间。
236
2.2.1 radare2
[0x00005060]> fs?
|Usage: fs [*] [+-][flagspace|addr] # Manage flagspaces
| fs display flagspaces
| fs* display flagspaces as r2 commands
| fsj display flagspaces in JSON
| fs * select all flagspaces
| fs flagspace select flagspace or create if it doesn't exi
st
| fs-flagspace remove flagspace
| fs-* remove all flagspaces
| fs+foo push previous flagspace and set
| fs- pop to the previous flagspace
| fs-. remove the current flagspace
| fsm [addr] move flags at given address to the current f
lagspace
| fss display flagspaces stack
| fss* display flagspaces stack in r2 commands
| fssj display flagspaces stack in JSON
| fsr newname rename selected flagspace
定位（seeking）
使用 s 命令可以改变当前位置：
237
2.2.1 radare2
[0x00000000]> s?
|Usage: s # Seek commands
| s Print current address
| s:pad Print current address with N padded zeros (d
efaults to 8)
| s addr Seek to address
| s- Undo seek
| s- n Seek n bytes backward
| s-- Seek blocksize bytes backward
| s+ Redo seek
| s+ n Seek n bytes forward
| s++ Seek blocksize bytes forward
| s[j*=!] List undo seek history (JSON, =list, *r2, !=
names, s==)
| s/ DATA Search for next occurrence of 'DATA'
| s/x 9091 Search for next occurrence of \x90\x91
| s.hexoff Seek honoring a base from core->offset
| sa [[+-]a] [asz] Seek asz (or bsize) aligned to addr
| sb Seek aligned to bb start
| sC[?] string Seek to comment matching given string
| sf Seek to next function (f->addr+f->size)
| sf function Seek to address of specified function
| sg/sG Seek begin (sg) or end (sG) of section or fi
le
| sl[?] [+-]line Seek to line
| sn/sp Seek to next/prev location, as specified by
scr.nkey
| so [N] Seek to N next opcode(s)
| sr pc Seek to register
| ss Seek silently (without adding an entry to th
e seek history)
s+ , s- ：重复或撤销。
s+ n , s- n ：定位到当前位置向前或向后 n 字节的位置。
s/ DATA ：定位到下一个出现 DATA 的位置。
信息（information）
238
2.2.1 radare2
[0x00000000]> i?
|Usage: i Get info from opened file (see rabin2's manpage)
| Output mode:
| '*' Output in radare commands
| 'j' Output in json
| 'q' Simple quiet output
| Actions:
| i|ij Show info of current file (in JSON)
| iA List archs
| ia Show all info (imports, exports, sections..
)
| ib Reload the current buffer for setting of th
e bin (use once only)
| ic List classes, methods and fields
| iC Show signature info (entitlements, ...)
| id[?] Debug information (source lines)
| iD lang sym demangle symbolname for given language
| ie Entrypoint
| iE Exports (global symbols)
| ih Headers (alias for iH)
| iHH Verbose Headers in raw text
| ii Imports
| iI Binary info
| ik [query] Key-value database from RBinObject
| il Libraries
| iL [plugin] List all RBin plugins loaded or plugin deta
ils
| im Show info about predefined memory allocatio
n
| iM Show main address
| io [file] Load info from file (or last opened) use bi
n.baddr
| ir Relocs
| iR Resources
| is Symbols
| iS [entropy,sha1] Sections (choose which hash algorithm to us
e)
| iV Display file version info
| iz|izj Strings in data sections (in JSON/Base64)
239
2.2.1 radare2