when a node chooses two directly connected nodes to act
as providers for each other and then the link between them
breaks.
In particular, the event signal.1.{2,3}.Down can incor-
2The “cycle-free” constraint ensures that node id cannot choose
node p as its provider for node n if the only path from p to n goes via id.
id
p
n
rectly be refused after the trace illustrated in Figure 3:3
Note that node 1 will accept messages originating from
node 2 only if they are received from node 3; and will ac-
cept messages originating from node 3 only if they are re-
ceived from node 2. Hence, once the link connecting nodes
2 and 3 goes down, there is no path by which such mes-
sages can reach node 1. Thus node 1 never accepts a mes-
sage telling it that the link has gone down.
3.3. Second CSP interpretation
In the second CSP interpretation of the reverse path for-
warding algorithm, each node chooses all its providers in a
single event. More precisely, each node maintains a span-
ning tree of those nodes in its connected component and
uses this to determine providers:
the provider p for any
given node n is the ﬁrst node on the path to n in the span-
ning tree. A consequence of this is that no node can select
two other nodes as providers for each other.
As depicted in Figure 4, FDR ﬁnds an error in this inter-
pretation when considering a four node ring. This occurs
when two nodes (1 and 2) select each other as providers for
two directly connected nodes (3 and 4) and then the link
between them breaks.
In particular, neither the event signal.1.{3,4}.Down nor
the event signal.2.{3,4}.Down can be performed after the
trace illustrated in Figure 5:4 Observe that node 1 will ac-
cept messages originating from nodes 3 and 4 only if they
are received from node 2, whilst node 2 will accept mes-
sages originating from nodes 3 and 4 only if they are re-
ceived from node 1. Hence, once the link connecting nodes
3 and 4 goes down, there is no path by which such mes-
sages can reach either node 1 or node 2. Thus these nodes
will never learn that the link has gone down.
Note that the above choice of routes will not arise if
routes are chosen based on minimising costs, and the cost
of using an edge is independent of the node using that edge.
However, it can arise if the cost of using an edge depends
upon the node using it; in this case the routing is compatible
with the edge (1,4) being relatively expensive for node 1,
and the edge (2,3) being relatively expensive for node 2.
3.4. Discussion
In the ﬁrst model, we abstracted away from the costs of
edges, and let each node id nondeterministically choose the
provider p for each other node n from amongst its neigh-
bours such that there is a cycle-free path from id to n via p.
It turns out that under these conditions, the protocol does
3For clarity we have omitted those setProvider events that are not crit-
ical to our understanding of the error. For full details see [7].
4Again for clarity we have omitted those setProvider events that are
not critical to our understanding of the error. For full details see [7].
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
KEY:
1
2
3
Made edge
Broken edge
Provider route
Figure 2. The error of the ﬁrst CSP interpretation of the RPF algorithm.
(cid:2)
(cid:3)
setProvider.1.2.3,
setProvider.1.3.2,
break.{2,3},
tock
// node 1 selects node 3 as the provider for node 2
// node 1 selects node 2 as the provider for node 3
// the link connecting nodes 2 and 3 goes down
// time passes
Figure 3. The trace after which an error of the ﬁrst CSP interpretation of the RPF algorithm arises.
not work correctly: we discover a network conﬁguration
where a node selects two other nodes to be providers for
each other and then it subsequently fails to learn about
changes in the state of the link between those two nodes.
Whilst the model of the ﬁrst CSP interpretation model
reveals an interesting aspect of the protocol, the circum-
stances under which it fails are perhaps unrealistic: we
cannot think of any circumstances in which a node would
sensibly choose two distinct nodes to be providers for each
other. If, for example, routing paths are chosen based upon
minimal costs of edges, then there is no choice of positive
costs that is consistent with this routing decision.
The over-abstraction in the ﬁrst CSP model—we re-
moved too much detail from the way in which nodes choose
their providers—was overcome in the second CSP model.
In the latter, each node chooses its providers so that mes-
sages are routed via a spanning tree. Since a spanning tree
has no cycles, no two nodes can be chosen as providers for
each other.
Once more an error was found. Again the error was due
to nodes being mutual providers for each other. However,
the crucial difference was that in the ﬁrst model the error
arose when a single node selected two nodes as providers
for each other, whilst in the second model the error arose
when two distinct nodes each selected the other to be the
provider for a particular pair of connected nodes.
We consider the circumstances under which the second
model fails to be perfectly plausible and discuss this further
in Section 7.1
4. Alloy-based analysis
Alloy [6] is a structural, or state-based, modelling lan-
guage. It has many of the features of Z [10]; however, un-
like Z, it is based on ﬁrst order logic. Whilst this can re-
strict expressibility, it facilitates automatic analysis which
can be performed by the associated constraint solver, the
Alloy Analyzer.
In this section we present the results of our Alloy-based
analysis. As with the CSP-based analysis, we model two
different interpretations of the reverse path forwarding al-
gorithm, and the results of our analysis of each. The dif-
ference between our two Alloy models is characterised by
the difference between their respective distance measures,
measures by which shortest paths, and hence providers for
nodes, are calculated.
4.1. Features common to both models
The key unit in our state-based description of the reverse
path forwarding algorithm is the NodeState. As well as its
own identiﬁer, each node records its belief about the status
of every link in the network along with how up-to-date that
information is.
In addition each node has a distance function that deter-
mines how far it is from every other node in its connected
component. The precise deﬁnition of the distance function
depends upon the interpretation of the algorithm, and is dis-
cussed in Sections 4.2 and 4.3 below. Finally each node has
a function onPathTo that returns the provider for each node.
This function is determined by the distance function.
At a higher, or global, level we model the data type
Network. Each network records the actual state of every
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
1
4
2
3
KEY:
Made edge
Broken edge
Provider route
Figure 4. The error of the second CSP interpretation of the RPF algorithm.
(cid:2)
(cid:3)
setProvider.1.2.2,
setProvider.1.3.2,
setProvider.1.4.2,
setProvider.2.4.1,
setProvider.2.3.1,
setProvider.2.1.1,
break.{3,4},
tock
//
// node 1 selects node 2 as its provider for nodes 2, 3 and 4
//
//
// node 2 selects node 1 as its provider for nodes 1, 3 and 4
//
// the link connecting nodes 3 and 4 goes down
// time passes
Figure 5. The trace after which an error of the second CSP interpretation of the RPF algorithm arises.
link in the network as well as a set of NodeStates, one for
each node in the system. There are three operations on a
Network: a link can be made, a link can be broken, and
some or all information can be propagated throughout the
network.
Finally, we have a type WorldView that records the ﬁ-
nal state of the network—the state in which an error was
detected—and the sequence of operations that led to that
state.
In our Alloy interpretations, we deﬁne an error state to
be a reachable state in which the network is stable—no
information can be propagated further—but two nodes in
the same connected component have contradictory beliefs
about the status of a link in their connected component.
We assert that no such state can be reached and the Alloy-
Analyzer searches for a witness to contradict our assertion.
As with the CSP interpretations we assume without loss
of generality that networks are initially fully connected
with all nodes having recent and correct information about
the status of each link.
4.2. First Alloy interpretation
In the ﬁrst Alloy model we adopt a most simplistic in-
terpretation of the reverse path forwarding algorithm: we
take each link to be of unit distance and choose node p to
be the provider to node i for node n only if p is the ﬁrst
node on a shortest path from i to n. Observe that, unlike the
two interpretations explored in the previous section, in this
model all nodes must be providers for themselves to their
immediate neighbours.
In this model, no counter example was found for up to
four nodes in a ring and up to three operations.
4.3. Second Alloy interpretation
The interpretation of the distance measure adopted in
the second Alloy model is much less restrictive than that of
the ﬁrst model.
Each node i maintains a routing distance to each other
node j, representing the number of network hops on the
chosen route to j. A necessary condition for i to give rout-
ing distance n + 1 to j is that there is some other node k at
routing distance n from i, and directly connected to j. Note
thought that this condition is not sufﬁcient: an effect of this
is that the routing distance may not represent the minimum
number of hops possible.
In fact, although their implementations are signiﬁcantly
different, this interpretation turns out to be equivalent to
the interpretation in the second CSP model in which nodes
choose their providers so that messages are routed via a
spanning tree.
As with the second CSP interpretation, no error was
found when considering a three node ring but an error was
found when considering a four node ring. The error is de-
picted in Figure 6, and is equivalent to that found in the sec-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
d
1
4
a
c
2
3
b
KEY:
Made edge
Broken edge
Provider route
Figure 6. The error of the second Alloy interpretation of the RPF algorithm.
ond CSP interpretation. It occurs when two nodes—Nodes
1 and 2 in this instance—select each other to be providers
for all nodes in their connected component, and then a
link between two such nodes—link c in this instance—goes
down.
After all information has been propagated throughout
the network, nodes 0 and 1 end up in the states depicted
in the table in Figure 7. Both nodes believe that all links
are up, and that their information is recent in all cases ex-
cept link c. Observe ﬁrst that no more information can be
propagated since the only old beliefs are about the status
of link c, and nodes 0 and 1 will only accept information
about this link from each other. Moreover, there is a con-
tradiction since nodes 0 and 1 (incorrectly) believe that link
c is up whereas nodes 2 and 3 (correctly) believe that it is
down. An error has been found.
4.4. Discussion
No error was found when considering the ﬁrst Alloy in-
terpretation of the reverse path forwarding algorithm. In-
deed, as this is a special case of the result proved correct
in Section 6 with every link being of unit distance, we will
see that there is no error to be found.
As discussed in Section 4.3, although their implemen-
tations are very different, the interpretation of the reverse
path forwarding algorithm is the same for the second CSP
model and the second Alloy model. In each case nodes se-
lect as the provider for every node in their connected com-
ponent a neighbour that is the ﬁrst node on some non-cyclic
path to the given node, and in each case that path need not
be the shortest path.
Furthermore, the errors found in each case are equiv-
alent. They arise when two nodes independently choose
each other to be providers for the remaining nodes in their
connected component. As discussed in Section 7.1, we
consider the circumstances under which the model fails to
be perfectly plausible.
5. A special-purpose Java program
Having used model-checkers FDR and the Alloy Ana-
lyzer to identify errors for several interpretations of the pro-
tocol, we now consider reverse path forwarding in a setting
where the costs of edges are independent of the nodes that
use those edges. We want to increase our conﬁdence in the
conjecture that, if the cost of any given link is independent
of the node using that link, then the network will eventually
stabilise into a state where every node has correct informa-
tion about every edge within its connected component.
In order to investigate this, we wrote a special-purpose
Java program to search for stable network conﬁgurations—
i.e. where beliefs do not change—where nodes hold incor-
rect beliefs. Note that a conﬁguration is stable in this sense
if each node’s belief about the edge (i,j) is the same as the
beliefs of its providers for i and j.
The program repeatedly generates random graphs, and
then tries to generate stable beliefs for the nodes; if it suc-
ceeds, it tests whether any beliefs are incorrect. For sim-
plicity, the program assumes that the costs of all edges are
equal, so it simply records whether an edge is made or bro-
ken. (Earlier versions of the program allowed edges to have
different lengths, but this does not appear to give any ad-
vantage.)
The program failed to ﬁnd such a network, even after
trying more than 200,000,000 networks. This led us to sus-
pect that no such network exists, a fact that we prove in the
following section.
6. A proof of reverse path forwarding with
uniform costs
In this section we prove that if the costs of edges are
independent of the nodes that use those edges, then under
constant link states conditions, the network will eventually
stabilise into a state where every node has correct informa-
tion about every edge within its connected component. Our
proof arose from discussions with Bill Roscoe.
We will use the following deﬁnitions.
Deﬁnition 1 A piece of information held by a node about
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
Node
0
Link Belief
Up
Up
Up
Up