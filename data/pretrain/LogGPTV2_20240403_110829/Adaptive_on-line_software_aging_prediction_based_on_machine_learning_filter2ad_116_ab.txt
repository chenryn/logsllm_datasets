2150 seconds, 
seconds. 
objects 
they are not referenced 
toring perspective 
is the percentage 
tive. The Heap resizes 
of the memory allocated 
tive from the system level perspective 
Java application 
a while, but that is only part of the truth: 
released 
System resizes 
In Figure 1 we observe 
at 
at 5150 
zone is resized, 
some 
Zone, or are freed if 
We can see that the moni­
(dark line) is that the 
amount of memory for 
has 
a part of memory (grey line) but the system does 
At the same time that the Old 
are moved to the Permanent 
zone and releases 
by the application. 
is crucial 
of memory used from the system perspec­
here. In the figure, the dark line 
is using a constant 
and (less visible) 
at 4350 seconds, 
The perspec­
by others. 
the Old 
some part 
the application 
this 
behavior 
on our monitoring 
strat­
resource 
example, 
depending 
in the previous 
As discussed 
can look quite different 
egy. This is most dramatic 
tualized 
Memory. Memory usage by a Java application 
different 
the Java Virtual 
when we are working with vir­
such as (in some sense) the Java Heap 
Machine (JVM)  level. 
at the operating 
system (OS) level or 
resources, 
if we monitor 
looks quite 
We conducted 
a simple experiment 
to show this duality. 
4 in detail) 
workload 
in Section 
exe­
has 
and constant 
to the initial 
for 20 minutes, 
state. We repeat this 
behavior/pattern 
Every phase lasts 20 minutes. 
from the OS perspective. 
and after which the 
during the pre­
during 20 minutes, 
the memory acquired 
every hour during 5 hours. How­
is not shown by 
over the memory used by the Java ap­
We have modified the applica­
phases in the application 
The application 
after which it consumes 
We run a web application  (presented 
under a constant  workload. 
tion to force three different 
cution. 
a normal behavior 
memory abnormally 
application 
releases 
vious phase, returning 
periodic 
ever, this periodic 
a simple monitoring 
plication 
during the same ex­
both perspectives 
periment. 
the sum of 
the memory used by the Young and Old zones. The Per­
manent zone is not depicted 
the experiment. 
by the Java application 
tive (dark line). In a Linux system, when an application 
this 
frees up some memory, the system does not recover 
by 
memory automatically: 
it when required 
other applications. 
the OS 
memory consumed by an application 
along time, but if we observe 
application 
if we monitor 
it may look constant 
it only recovers 
Due this behavior, 
The waves (the grey line) represent 
how the memory allocated 
the Java Heap Memory, the 
In Figure 2 we present 
of the same resource 
from the OS perspec­
and consuming 
looks constant 
We can observe 
is releasing 
memory. 
These examples  indicate 
the difficulty 
of building 
an ac­
system. We need detailed 
tools to obtain detailed 
Even having all the metrics, 
curate prediction 
cated monitoring 
resources. 
human expertise 
to actually 
information 
on the 
we need a lot of 
ones, and 
to decide which are the relevant 
build the model taking into account 
the system's 
and sophisti­
because it is constant  during 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
509 
DSN 2010: Alonso et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:59:15 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
500 
"i'"  400 350 
o 300 
E250 
200 
5150 
100 
'" " oo@i 
number of linear patches, 
This may well be the case for many system behav­
nonlinear, 
sonable 
linear. 
iors of the kind we want to analyze, 
be in one of a relatively 
which is essentially 
inary comparison  of 
decision 
and concluded 
small number of phases, 
In [14] we performed 
regression 
trees alone, in a simple failure 
that it indeed performed 
alone, and 
prediction 
much better. 
where the system may 
each of 
linear. 
M5P with linear 
it may be composed (or approximate 
it may be piecewise 
scenario 
a prelim­
by) a rea­
i.e., 
-Tomcat Memory used OS perspective  Execution 
Time (seconds) 
- Youn  +Okthea  usedJVM ers ctive 
Figure 2. The Tomcat memory consumption 
from system and heap perspectives 
This is probably 
unaffordable 
in most 
in ever-changing 
environments 
and software are updated frequently. 
For 
ML and Data Mining seems as an alternative 
a complement) 
expert modeling. 
to explicit 
ML 
complex behavior. 
cases, and anyway useless 
where hardware 
this reason, 
(or at least, 
can be used to automatically 
tems from a set of (possibly 
independent 
metrics. 
build models of complex sys­
tens or hundreds 
of) apparently 
2.2 Prediction Assumptions 
Our model will be trained 
using failure  executions 
and 
from the training 
set to 
the accuracy 
time until failure 
does not vary in the fu­
changes (the consumption 
executions 
of the model build by ML. Our idea 
if the situation 
the model has to be able to recalculate 
the 
under the new circumstances. 
The M5P 
does not really take into account the ab­
tested using different 
validate 
if the state of 
is that our model predicts 
the system  (including  workload) 
ture. However, 
speed changes) 
time until failure 
training 
solute value of the times, but the number of checkpoints 
(instances) 
If the resource 
slower than in other environment, 
same number of checkpoints, 
grading 
will be the same, only spaced apart 100 
more times, M5P will build the same model, and the pre­
dictions 
will be equally good. 
the measurements 
of the de­
but we still measure the 
we collect. 
resource 
degrades 
100 times 
process 
Our proposal 
is thus to use ML to predict 
time until fail­
easily 
memory, Java memory, threads, 
and with low 
a priori about them, we decide to use ML to 
the model from a set of metrics 
in any system like CPU utilization, 
system mem­
users, 
ure due to software aging. Due to the complexity 
of mod­
eling these growing complex environments 
knowledge 
build automatically 
available 
ory, application 
etc. Thanks to the potential 
to take 
executions 
into account to build the model. In fact, software aging 
resource 
could be related 
ex­
used in this paper could predict 
haustion. 
the 
crash due to software aging if we collect 
(from 
resources 
what are the most important 
with the software aging. 
with other reasons, 
The technique 
or not) related 
variables 
the metrics 
besides 
jobs, 
of ML to learn from previous 
Note that our approach 
may be valid when an approach­
For this reason, 
to achieve 
variable 
we added a set of derived 
a more accurate 
metrics 
as a 
The most 
prediction. 
speed from 
(threads, 
system memory, 
speed, we decided 
the consumption 
under monitoring 
we add is the consumption 
memory and every Java Heap zone: Young 
variables 
important 
every resource 
web application 
and Old).  To calculate 
to use an average speed to avoid too much fluctuations 
the measure. 
(also called moving average). 
collects 
and calculates 
fluctuation. 
window is more noise tolerant, 
slower to reflect changes in the input. It must be set by con­
sidering 
of change in 
our scenario. 
We decided to use a sliding 
The sliding 
so as to smooth out noise and 
trade-off: 
the last X speed observations 
window average 
window average 
The choice of X is  a certain 
noise and the frequency 
but also makes the method 
from the resource 
their average, 
the expected 
a long 
in 
is somehow foreseeable 
from the system met­
that happen with no warning. 
Using this sliding 
ing failure 
rics, not for sudden crashes 
These would require 
as static 
conditions, 
analysis 
completely 
different 
techniques, 
such 
of the code to reveal dangerous 
logical 
here. 
which we do not address 
Among many ML algorithms 
and models available, 
we 
have chosen to use the one called M5P [16], included 
in 
at 
the popular 
WEKA [17] ML and data mining package, 
this stage of our work. An M5P model consists 
of a bi­
nary decision 
of the form "variable 
with a linear 
The rationale 
regression 
is that while a global behavior 
< value?", 
model (possibly 
tree whose inner nodes are labelled 
may be highly 
and each leaf is labelled 
with tests 
using all variables). 
window and M5P we have conducted 
to evaluate 
the effectiveness 
of our ap­
aging scenarios. 
We have used 
Error (MAE) to measure our prediction 
a set of experiments 
proach for complex software 
Mean Absolute 
curacy: this is the average of the absolute 
tween true values and predicted 
absolute 
failure 
minutes over 10 minutes. 
time until failure 
We have used another 
lute Error (S-MAE): We decided 
of 1000 seconds is not equivalent 
is probably 
However, 
errors. 
values. 
too hard, even as a baseline. 
measure called the Soft Mean Abso­
that if the model predicts 
ac­
be­
difference 
So, we are using 
An error of 200 seconds over a time-to­
to  an error of 2 
predicting 
exactly 
the 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
510 
DSN 2010: Alonso et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:59:15 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
Table 1. Machine Description 
Hardware 
System 
Operating 
JVM 
Software 
and DB Server App. Servers 
Clients 
2-way Intel XEON 2.4 4-way Intel XEON 1.4 
GHz with 2 GB RAM  GHz with 2 GB RAM 
Linux 2.6.8-3-686  Linux 2.6.15 
jdk1.5 with 1GB heap 
Tomcat 5.5.26 
TPC-W 
Clients/MySQL 
5.0.67 
book store) in sessions. 
connected 
(from the EB 
of logically 
Between two consecutive 
requests 
an on-line 
is a sequence 
the web site (simulating 
A session 
point of view) requests. 
from the same EB, TPC-W computes 
senting 
requested 
iments we have used the default 
Moreover, 
of concurrent 
EBs is kept constant 
and deciding 
following 
the time between the user receiving 
a thinking 
time, repre­
a web page s/he 
In all of our exper­
the next request. 
configuration 
of TPC-W. 
the number 
the TPC-W specification, 
during the experiment. 
margin), 
if the real time until crash is 10 minutes, 
we count it as zero er­
a time until crash within a margin of 10% of the real time 
until crash (named security 
ror. For example, 
we assume 0 error if the model predicts 
and 9 minutes. 
we would count a 2-minute 
course, 
that S-MAE is always smaller 
other than 10% are possible. 
If the system predicts 
error (the absolute 
error). 
It is clear 
say 13 (or 7) minutes, 
between 11 minutes 
thresholds 
than MAE. 
Of 
Finally, 
we have trained 
our model to be more accurate 
we have calcu­
when the crash is coming. For this reason, 
lated the MAE for the last 10 minutes of every experiment 
(POST-MAE) 
The idea is that our approach 
last 10 minutes 
prediction 
has to have lower MAE in the 
showing that the 
and for the rest of experiment 
than the rest of experiment, 
becomes more accurate 
when it is more needed. 
(PRE-MAE). 
3 Experimental 
Setup 
In this section 
we describe 
the experimental 
setup used in 
below, whose main goal is to eval­
of the prediction 
approach. 
The ex­
machine. 
simulates 
all experiments 
presented 
uate the effectiveness 
environment 
perimental 
composed 
by the web application 
and the clients 
ning subsystem 
a real environment, 
have the analysis 
only the planning 
using the information 
the client 
tor installed. 
however, 
subsystem 
subsystem 
are in an external 
workload 
a real web environment, 
server, 
the database 
server 
The analysis 
machine; 
subsystem 
centralized 
and plan­
in 
the best option would be to 
among nodes and 
distributed 
centralized 
to make decisions 
from all nodes. Finally, 
to simulate 
we have a machine with client 
simula­
In our experiments, 
we have used a multi-tier 
e­
book store, 
an on-line 
follow­
of TPC-W benchmark 
[18]. 
using servlets 
and 
developed 
server. 
As application 
configuration 
commerce site that simulates 
ing the standard 
We have used the Java version 
using as a MySQL [19] as database 
server, 
us to run different 
and under a controlled 
low us to conduct the 
the time until failure. 
given in Table 1. 
evaluation 
Details 
experiments 
we have used Apache Tomcat [20]. TPC-Wallows 
environment. 
using different 
parameters 
These capabilities 
al­
of our approach 
to predict 
Table 2. Variables 
to build the model 
used in every experiment 
(2)b 
Time 
Used (2) 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
variation(2) 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
4.3 Feature 
represented 
Exp  Exp  Exp Exp 
4.1 4.2 4.3  4.4 
x 
X-X a  X 
Throughput(TH) 
X 
X-X  X 
Workload 
X 
X-X  X 
Response 
X 
X-X  X 
System Load 
X 
X-X  X 
Disk Used 
X 
X-X  X 
Swap Free 
X 
X-X  X 
Num. Processes 
X 
X 
X-
Sys. Memory Used 
X 
X-
X 
Tomcat Memory Used 
X 
X-X  X 
Num. Threads 
X 
X-X  X 
Num. Http Connections 
X 
X-X  X 
Num. Mysql Connections 
X-X  X 
Max. MB Young/Old 
X-X  X 
MB Young/Old 
Used (2) 
X-X  X 
% Used Young/Old 
X-X  X 
SWN Young/Old 