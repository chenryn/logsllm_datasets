The  adopted  formalism  is  Stochastic  Activity  Networks 
(SAN) [11], an extension of Stochastic Petri Nets (SPNs) [2]: 
places (represented as circles) can contain tokens; the number 
of  tokens  in  all  places  is  the  state  of  the  model.  Tokens  are 
added  or  removed  by  the  firing  of  activities  (represented  as 
vertical bars), which may be immediate or timed. Input gates 
and output gates (represented as triangles) allow complex pre-
conditions and consequences to be specified for the execution 
of activities. Further information on the SAN formalism can be 
found in [11]. When it is not specified otherwise, we do not set 
constraints  on  the  probability  distribution  of  timed  activities. 
Interface places, i.e., those that are meant to be shared with the 
other subnets, are highlighted with a dashed box in the follow-
ing figures. 
1)  EventOccurrence 
The  EventOccurrence  subnet  (Fig.  3)  models  the  occur-
rence of a generic event related to the platform. For example, 
279
this  subnet  can  be  used  to  model  dangerous  events  like  gas 
leakage or modifications of weather conditions. 
in the component, each one represented by an ErrorX place. In 
the  example  in  the  figure  three  errors  are  shown;  the  actual 
number depends on the concrete component to be modeled.  
Fig. 3. EventOccurrence subnet. 
The preconditions for the occurrence of the event are repre-
sented by the Precondition place, which contains a token only 
if the needed preconditions are not satisfied. The actual occur-
rence of the event is modeled by the firing of the Event activi-
ty;  the  occurrence  of  the  event  normally  does  not  modify  its 
preconditions, i.e., tokens are not removed from the Precondi-
tion place. A token is added to the EventOccurred place. 
Two additional places, DetectedOnTime and DetectedLate 
are associated with each event, and are used to keep track of 
whether an event has been detected or not, and if it has been 
detected on time or late (with respect to an appropriate deadline 
for its detection). 
2)  EventRecovery 
Recovery  from  the  occurrence  of  an  event  is  modeled  by 
the EventRecovery subnet (Fig. 4). In general, this means that 
the immediate effects caused by the event have been removed. 
For  example,  the  gas  leakage  has  been  stopped,  or  a  good 
weather condition was restored. 
Fig. 4. EventRecovery subnet. 
Also the recovery requires the existence of a precondition, 
which is  modeled by the RecoveryPossible place. Only when 
such  place  contains  a  token  the  Recover  activity  is  enabled. 
When  the  Recover  activity  fires,  all  tokens  in  places  Even-
tOccurred, DetectedOnTime, and DetectedLate are removed.  
It should be noted that the precondition for the execution of 
a recovery event may also be the occurrence of another event. 
In  this  case,  the  EventOccurred  place  of  the  second  event  is 
shared with the RecoveryPossible place of the event for which 
recovery is being modeled.  
3)  GenericComponent 
The subnet for modeling a generic component is depicted in 
(Fig. 5). A component may be affected by a certain number of 
different failure modes, which may be caused by internal faults, 
external faults, or a combination of both.  
The occurrence (and activation) of an internal fault is repre-
sented by the FaultOccurrence activity. With a certain proba-
bility, the activation of the fault may generate different errors 
280
Fig. 5. GenericComponent subnet. 
Failure  modes  of  the  component  are  modeled  by  a  set  of 
FailureModeX  places,  which  contain  a  token  if  that  specific 
failure mode has occurred, and are the interface of the subnet 
with the other models. The component may be affected by ex-
ternal faults, represented by the ExternalFaultX interface plac-
es. These places are shared with FailureMode places of other 
components, or with EventOccurred places of events that are 
external  faults  for  the  component  (e.g.,  the  occurrence  of  an 
electric shock). As a particular kind of external fault, the Disa-
bled place contains a token when the component is explicitly 
disabled during the work, e.g., for work that includes the “iso-
lation of safety systems” [3]. 
The occurrence of component failures is given by a combi-
nation  of  external  faults,  errors,  and  the  disabling  event.  The 
condition  is  encoded  in  the  IGFailure  input  gate  associated 
with the Failure activity. The firing of this activity ensures that 
the  marking of the FailureModeX places is always consistent 
with  the  current  state  of  the  component.  We  assume  that  the 
effect of errors and external fault is immediate: we do not con-
sider  propagation  delays.  This  is  mainly  due  to  the  fact  that 
information on the system is limited, and such delays would be 
difficult to estimate. Still, in case a delay needs to be modeled, 
it can be represented using the EventOccurence subnet. 
Repair of the component is modeled by the Repair activity, 
which is enabled and fires when a token is in DoRepair place. 
To  ensure  a  correct  modeling  of  the  repair,  the  FaultOccur-
rence activity is reactivated (i.e., a new value is sampled from 
its distribution) when a token is in DoRepair. 
4)  ConditionChecker 
For several reasons it may be necessary to test specific con-
ditions on the state of the overall system. For example, a pre-
condition for the execution of an event may be satisfied only if 
a specific combination of other events has occurred. 
This  kind  of  check  is  performed  by  means  of  the  Condi-
tionChecker subnet (Fig. 6). This subnet has a set of places as 
input, each of them representing one of the basic conditions to 
be checked (e.g., the occurrence of some event, or the failure of 
a component). The place Condition holds one token if the con-
dition to be checked is true, otherwise it is empty. The objec-
tive of this subnet is to ensure that the number of tokens in the 
Condition place is always consistent with the result of evaluat-
ing the specified condition on the InputX places. 
cation of the consumable barrier, and Propagate, which repre-
sents the propagation of the incoming event, due to the deple-
tion of the consumable barrier items. 
Fig. 6. ConditionChecker subnet. 
The condition to be checked is encoded in the IGCheck in-
put gate, which ensures that the number of token in place Con-
dition  is  consistent  with  the  state  of  the  places  considered  as 
input of the subnet. If it is not the case, then Check fires and the 
execution of the IGCheck gate reestablishes the consistency. 
5)  Detector 
Event detection is modeled using the Detector subnet (Fig. 
7),  which  interfaces  with  the  event  that  it  is  meant  to  detect, 
through the interface places EventOccurred, DetectedOnTime, 
and DetectedLate.  
Fig. 8. ConsumableBarrier subnet. 
The number of consumable items is stored in place Barrier-
Items, and it is progressively diminished every time the Block 
activity  fires.  The  Disabled  place  represents  the  disabling  of 
this barrier. In case the consumable barrier explicitly refers to a 
component of the system, the BarrierItems is connected  with 
the Healthy place of the corresponding subnet.  
7)  Disabler 
Disabling  of  a  component  is  modeled  using  the  Disabler 
subnet  (Fig.  9).  The  Disabled  place  is  shared  with  the  corre-
sponding  place  in  the  subnet  to  be  disabled,  while  Disa-
blingStart and DisablingEnd are two interface places that sig-
nal  the  beginning  and  the  end  of  the  disabling  operation,  re-
spectively.  Such  places  are  connected  with  EventOccurred 
places  of  events  that  trigger  the  disabling  procedure,  or  with 
places of a Timeline model (described below). A token in place 
DisablingStart  triggers  the  Disable  activity,  while  a  token  in 
DisablingEnd  re-enables  the  component  through  the  Enable 
activity. 
Fig. 7. Detector subnet. 
The actual detection is modeled by the Detection activity, 
which may have three outcomes: the event is detected within a 
predefined time bound; the event is detected late; the event is 
not detected at all. The relative probabilities of the three corre-
sponding cases are a parameter of the template. Place OneShot 
ensures that the activity fires only once per event occurrence. 
When the reference event is cleared (i.e., place EventOccurred 
becomes empty), then a token is restored in the OneShot place 
by the firing of the Reset activity. 
In case the detection activity relies on some specific com-
ponent of the barrier system, then the subnet is connected to the 
corresponding  GenericComponent  subnet,  by  means  of  the 
Disabled  interface  place,  and  the  FailureModeX  places.  The 
content of these places may influence the firing of the Detec-
tion activity and/or the relative probabilities of its cases.  
6)  ConsumableBarrier 
Some safety barriers may be consumable, i.e., they may be 
used only once and need to be replaced after their use. It is the 
case for example of fire extinguishers. This aspect is modeled 
by the ConsumableBarrier model (Fig. 8). The model contains 
two instantaneous activities, Block, which represents the appli-
Fig. 9. Disabler subnet. 
8)  Timeline 
While some events occur spontaneously or as consequences 
of other events, others are known in advance, e.g., because they 
are part of the plan described in the work permit, or because 
they represent some past event that need to be included in the 
model. Such events thus follow a precise sequence and timing. 
This aspect is modeled by a Timeline subnet, which describes a 
sequence of known phases.  
Fig. 10. Timeline subnet. 
An  example  of  such  model  is  depicted  in  (Fig.  10).  The 
completion of each phase may trigger one or more events, rep-
resented by places EventOccurredX. Those places are the inter-
face of the Timeline subnet towards the other models. In partic-
281
ular, each EventX place can be connected to a Precondition of 
some EventOccurrence subnet. 
B.  Model Construction 
The  central  idea  is  to  automatically  derive  the  analysis 
model from the architectural barrier description, and from the 
WP application. The process for the composition of the overall 
model  consists  of  several  steps, which  are described  and dis-
cussed in the following. 
Identification of barriers. The first step consists in the iden-
tification of barriers that are relevant for the WP. Barriers are 
selected based on the Kind of work, Location, and Risks fields. 
Based on this, a set of architectural models of relevant barriers, 
Bi, are retrieved. 
Events. For each event present in a barrier model Bi, an in-
stance of the EventOccurrence subnet is added to the model. If 
the occurrence rate (or probability distribution) of the event is 
known,  then  a  timed  activity  is  used,  otherwise  Event  is  an 
immediate activity. In case event recovery is foreseen, an Even-
tRecovery subnet is directly connected with the corresponding 
EventOccurrence subnet. 
Components. For each component present in a barrier mod-
el Bi, an instance of the GenericComponent template model is 
created. Parameters like its possible failure modes, fault occur-
rence distribution, etc., are derived from the architectural barri-
er model and the database. In case no fault occurrence infor-
mation is available for a given component, the corresponding 
FaultOccurrence  activity  is  disabled.  If  the  component  is  a 
consumable  resource,  then  the  ConsumableBarrier  subnet  is 
connected to the basic model. 
Error propagation. For each failure  mode X of a compo-
nent A, that generates an external fault Y in component B, the 
corresponding places, FailureModeX (in the A subnet) is con-
nected to place ExternalFaultY (in the B subnet). In case some 
delay is specified for the propagation between the two compo-
nents, an instance of the EventOccurrence subnet is added be-
tween the two. That is, FailureModeX is connected to the Pre-
condition  interface  place,  and  ExternalFaultY  to  the  Even-
tOccurred  interface  place.  Propagation  delay  is  given  by  the 
firing delay of the Event activity. 
Propagation  of  events.  Still  based  on  the  barrier  models, 
preconditions for events introduced in the previous step are set. 
In  the  simple  case  in  which an  event has  no  preconditions,  a 
token is added to the corresponding Precondition place, mean-
ing  that  the  event  is  always  enabled.  Otherwise,  if  the  event 
requires  a  certain  combination  of  conditions  to  hold,  an  in-
stance of the ConditionChecker subnet is added. The Condition 
place is shared with the Precondition place of the EventOccur-
rence.  Places  InputX  are  instead  shared  with  the  events  that 
appear in the condition. 
Detection facilities. For each pair (A,E), such that compo-
nent A is marked to be able to detect event E, an instance of the 
Detector template is added to the model. The EventOccurred, 
DetectedOnTime, and DetectedLate places are shared with the 
ones corresponding to the event to detect, while Disabled, and 
FailureModeX  are  shared  with  the  corresponding  ones  in  the 
subnet of the component. 
Timeline. Timeline models are constructed based on known 
event that are going to occur during the work. In particular, the 
occurrence  of  safety-relevant  events  are  considered,  e.g.,  the 
isolation of safety mechanisms or the beginning of a different 
phase of work. 
A particular aspect that is modeled using the timeline is the 
(recent)  history  of  repairs,  and  the  subsequent  time  that  has 
elapsed until the WP application. In fact, we assumed that for 
each  component  we  know  the  last  time  at  which  it  has  been 
installed, repaired, or replaced. Basically, the last time at which 
it could be considered as new. In case we don’t have any up-
dated information on the current state of components, we must 
refer to such instant of time as their “initial state” when evalu-
ating  their  future  behavior.  The  oldest  repairing  time,  among 