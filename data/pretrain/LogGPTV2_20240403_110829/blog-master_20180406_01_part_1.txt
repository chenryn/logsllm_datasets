## PostgreSQL 递归妙用案例 - 分组数据去重与打散    
### 作者                                                                 
digoal                                                                 
### 日期                                                                 
2018-04-06                                                              
### 标签                                                                 
PostgreSQL , 递归 , UDF , 窗口查询 , 分组TOP , 分组打散 , 分组去重+随机返回   
----                                                                 
## 背景   
我们现在业务场景，有对筛选结果进行去重和打散的需求，比如每个品牌的商品只能出现不超过10个。  
目前我们是在业务层进行处理的，效率比较低。  
PGSql有没有更好的方式来支持对结果的去重和打散呢？  
PostgreSQL SQL功能强大，有很多种方法可以实现这类业务需求的高效检索。比如  
1、递归  
2、窗口查询  
3、自定义UDF  
## 例子1 - 品牌+商品 唯一  
1、建表，品牌+商品字段唯一，也就是说不需要考虑去重。  
```  
create table tbl(  
  c1 int,   -- 品牌ID  
  c2 int,   -- 商品ID  
  c3 int,   -- 其他条件，本例用来做过滤的条件  
  c4 timestamp,   -- 时间  
  unique (c1,c2)  -- 唯一约束  
);  
```  
2、写入5000万测试数据  
```  
insert into tbl   
  select random()*10000,   
         random()*1000000,   
	 random()*10,   
	 clock_timestamp()  
  from generate_series(1,50000000)   
  on conflict (c1,c2) do nothing;  
```  
3、创建加速索引，过滤条件放在前面，品牌C1字段在最后（用于类似SKIP INDEX SCAN类似的排序加速）。  
```  
create index idx_tbl_1 on tbl(c3,c1);  
```  
在满足某个条件的结果集合中，对每一个品牌的商品，只取10个商品的记录。  
假设筛选条件为  
```  
c3=1 and c1 (select c1 from tmp) order by c3,c1 limit 1) t_max  
    where tbl.c3=1 and tbl.c1 (select t_max_c1 from skip limit 1) order by c3,c1 limit 1) t_max  
    where tbl.c3=1 and tbl.c1(select c1 from skip limit 1)  
                                       ^  
```  
修改SQL如下，使用LATERAL引用前面出现过的表的内容  
```  
with recursive   
-- 符合条件的第一个品牌  
tmp as (select c1 from tbl where c3=1 and c1 (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1 and tbl.c1 s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1  
	    ) t_max,    
    LATERAL (select * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1 and tbl.c1  Limit  (cost=0.44..1.31 rows=1 width=8) (actual time=0.057..0.057 rows=1 loops=1)  
           Output: tbl.c1, tbl.c3  
           Buffers: shared hit=4  
           ->  Index Only Scan using idx_tbl_1 on public.tbl  (cost=0.44..39795.81 rows=45681 width=8) (actual time=0.056..0.056 rows=1 loops=1)  
                 Output: tbl.c1, tbl.c3  
                 Index Cond: ((tbl.c3 = 1) AND (tbl.c1   Recursive Union  (cost=0.92..96.62 rows=55 width=24) (actual time=0.094..5.947 rows=1000 loops=1)  
           Buffers: shared hit=1710  
           ->  Limit  (cost=0.92..8.64 rows=5 width=24) (actual time=0.093..0.111 rows=10 loops=1)  
                 Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4, tbl_2.c1  
                 Buffers: shared hit=21  
                 InitPlan 2 (returns $2)  
                   ->  CTE Scan on tmp  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)  
                         Output: tmp.c1  
                 ->  Nested Loop  (cost=0.90..8.62 rows=5 width=24) (actual time=0.092..0.108 rows=10 loops=1)  
                       Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4, tbl_2.c1  
                       Buffers: shared hit=21  
                       ->  Limit  (cost=0.46..1.43 rows=1 width=8) (actual time=0.077..0.077 rows=1 loops=1)  
                             Output: tbl_2.c1, tbl_2.c3  
                             Buffers: shared hit=8  
                             InitPlan 3 (returns $3)  
                               ->  CTE Scan on tmp tmp_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.060..0.060 rows=1 loops=1)  
                                     Output: tmp_1.c1  
                                     Buffers: shared hit=4  
                             ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_2  (cost=0.44..24434.73 rows=25242 width=8) (actual time=0.077..0.077 rows=1 loops=1)  
                                   Output: tbl_2.c1, tbl_2.c3  
                                   Index Cond: ((tbl_2.c3 = 1) AND (tbl_2.c1  $3))  
                                   Heap Fetches: 1  
                                   Buffers: shared hit=8  
                       ->  Index Scan using idx_tbl_1 on public.tbl tbl_1  (cost=0.44..7.13 rows=5 width=20) (actual time=0.012..0.026 rows=10 loops=1)  
                             Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4  
                             Index Cond: ((tbl_1.c3 = 1) AND (tbl_1.c1   Nested Loop  (cost=0.88..8.69 rows=5 width=24) (actual time=0.038..0.055 rows=10 loops=100)  
                 Output: tbl_4.c1, tbl_4.c2, tbl_4.c3, tbl_4.c4, tbl_3.c1  
                 Buffers: shared hit=1689  
                 ->  Nested Loop  (cost=0.44..1.46 rows=1 width=8) (actual time=0.025..0.026 rows=1 loops=100)  
                       Output: skip_1.t_max_c1, tbl_3.c1  
                       Buffers: shared hit=400  
                       ->  Limit  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=100)  
                             Output: skip_1.t_max_c1  
                             ->  WorkTable Scan on skip skip_1  (cost=0.00..1.00 rows=50 width=4) (actual time=0.000..0.000 rows=1 loops=100)  
                                   Output: skip_1.t_max_c1  
                       ->  Limit  (cost=0.44..1.41 rows=1 width=8) (actual time=0.024..0.024 rows=1 loops=100)  
                             Output: tbl_3.c1, tbl_3.c3  
                             Buffers: shared hit=400  
                             ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_3  (cost=0.44..24434.73 rows=25242 width=8) (actual time=0.024..0.024 rows=1 loops=100)  
                                   Output: tbl_3.c1, tbl_3.c3  
                                   Index Cond: ((tbl_3.c3 = 1) AND (tbl_3.c1  skip_1.t_max_c1))  
                                   Heap Fetches: 99  
                                   Buffers: shared hit=400  
                 ->  Limit  (cost=0.44..7.13 rows=5 width=20) (actual time=0.012..0.026 rows=10 loops=99)  
                       Output: tbl_4.c1, tbl_4.c2, tbl_4.c3, tbl_4.c4  
                       Buffers: shared hit=1289  
                       ->  Index Scan using idx_tbl_1 on public.tbl tbl_4  (cost=0.44..7.13 rows=5 width=20) (actual time=0.012..0.024 rows=10 loops=99)  
                             Output: tbl_4.c1, tbl_4.c2, tbl_4.c3, tbl_4.c4  
                             Index Cond: ((tbl_4.c3 = 1) AND (tbl_4.c1  (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1        -- 符合条件  
    and tbl.c1=(select c1 from tmp)     -- 商家ID等于上一次计算得到的下一个品牌  