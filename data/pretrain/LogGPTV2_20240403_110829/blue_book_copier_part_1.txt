[Copier](https://github.com/copier-org/copier) is a library and CLI app for rendering project templates.
- Works with local paths and Git URLs.
- Your project can include any file and Copier can dynamically replace values in any kind of text file.
- It generates a beautiful output and takes care of not overwriting existing files unless instructed to do so.
# [Installation](https://github.com/copier-org/copier)
```bash
pipx install copier
```
Until [this issue is solved](https://github.com/copier-org/copier/issues/1225) you also need to downgrade `pydantic`
```bash
pipx inject copier 'pydantic Copier doesn't replace the DRY principle... but sometimes you simply can't be DRY and you need a DRYing machine...
- Template consumers: Programmers that want to start a new project quickly, or that want to evolve it comfortably.
Non-humans should be happy also by using Copier's CLI or API, as long as their expectations are the same as for those humans... and as long as they have feelings.
Templates have these goals:
- [Code scaffolding](https://en.wikipedia.org/wiki/Scaffold_%28programming%29): Help consumers have a working source code tree as quickly as possible. All templates allow scaffolding.
- Code lifecycle management. When the template evolves, let consumers update their projects. Not all templates allow updating.
Copier tries to have a smooth learning curve that lets you create simple templates that can evolve into complex ones as needed.
# Usage
## [Creating a template](https://copier.readthedocs.io/en/latest/creating/)
A template is a directory: usually the root folder of a Git repository.
The content of the files inside the project template is copied to the destination without changes, unless they end with `.jinja`. In that case, the templating engine will be used to render them.
Jinja2 templating is used. Learn more about it by reading [Jinja2 documentation](https://jinja.palletsprojects.com/).
If a YAML file named `copier.yml` or `copier.yaml` is found in the root of the project, the user will be prompted to fill in or confirm the default values.
Minimal example:
```
📁 my_copier_template                            # your template project
├── 📄 copier.yml                                # your template configuration
├── 📁 .git/                                     # your template is a Git repository
├── 📁 {{project_name}}                          # a folder with a templated name
│   └── 📄 {{module_name}}.py.jinja              # a file with a templated name
└── 📄 {{_copier_conf.answers_file}}.jinja       # answers are recorded here
```
Where: 
- copier.yml
        ```yaml
    # questions
    project_name:
        type: str
        help: What is your project name?
    module_name:
        type: str
        help: What is your Python module name?
    ```
- `{{project_name}}/{{module_name}}.py.jinja`
    ```python
    print("Hello from {{module_name}}!")
    ```
- `{{_copier_conf.answers_file}}.jinja`
    ```
    # Changes here will be overwritten by Copier
    {{ _copier_answers|to_nice_yaml -}}
    ```
Generating a project from this template using `copier copy my_copier_template generated_project` answering `super_project` and `world` for the `project_name` and `module_name` questions respectively would create in the following directory and files:
```
📁 generated_project
├── 📁 super_project
│   └── 📄 world.py
└── 📄 .copier-answers.yml
```
Where:
- `super_project/world.py`
    ```python
    print("Hello from world!")
    ```
- `.copier-answers.yml`
    ```yaml
    # Changes here will be overwritten by Copier
    _commit: 0.1.0
    _src_path: gh:your_account/your_template
    project_name: super_project
    module_name: world
    ```
### [Template helpers](https://copier.readthedocs.io/en/latest/creating/#template-helpers)
In addition to [all the features Jinja supports](https://jinja.palletsprojects.com/en/3.1.x/templates/), Copier includes:
- All functions and filters from [jinja2-ansible-filters](https://gitlab.com/dreamer-labs/libraries/jinja2-ansible-filters/). This includes the `to_nice_yaml` filter, which is used extensively in our context.
- `_copier_answers` includes the current answers dict, but slightly modified to make it suitable to autoupdate your project safely:
    - It doesn't contain secret answers.
    - It doesn't contain any data that is not easy to render to JSON or YAML.
    - It contains special keys like `_commit` and `_src_path`, indicating how the last template update was done.
- `_copier_conf` includes a representation of the current Copier Worker object, also slightly modified:
    - It only contains JSON-serializable data.
    - You can serialize it with `{{ _copier_conf|to_json }}`.
    - ⚠️ It contains secret answers inside its `.data` key.
    - Modifying it doesn't alter the current rendering configuration.
    - It contains the current commit hash from the template in `{{ _copier_conf.vcs_ref_hash }}`.
    - Contains Operating System-specific directory separator under `sep` key.
## [Configuring a template](https://copier.readthedocs.io/en/latest/configuring)
### [The `copier.yaml` file](https://copier.readthedocs.io/en/latest/configuring/#the-copieryml-file)
The `copier.yml` (or `copier.yaml`) file is found in the root of the template, and it is the main entrypoint for managing your template configuration.
For each key found, Copier will prompt the user to fill or confirm the values before they become available to the project template.
This `copier.yml` file:
```yaml
name_of_the_project: My awesome project
number_of_eels: 1234
your_email: ""
```
Will result in a questionary similar to:
```
🎤 name_of_the_project
  My awesome project
🎤 number_of_eels (int)
  1234
🎤 your_email
```
Apart from the simplified format, as seen above, Copier supports a more advanced format to ask users for data. To use it, the value must be a dict.
Supported keys:
- type: User input must match this type. Options are: `bool`, `float`, `int`, `json`, `str`, `yaml` (default).
- help: Additional text to help the user know what's this question for.
- choices: To restrict possible values.
    A choice can be validated by using the extended syntax with dict-style and tuple-style choices. For example:
    ```yaml
    cloud:
        type: str
        help: Which cloud provider do you use?
        choices:
            - Any
            - AWS
            - Azure
            - GCP
    iac:
        type: str
        help: Which IaC tool do you use?
        choices:
            Terraform: tf
            Cloud Formation:
                value: cf
                validator: "{% if cloud != 'AWS' %}Requires AWS{% endif %}"
            Azure Resource Manager:
                value: arm
                validator: "{% if cloud != 'Azure' %}Requires Azure{% endif %}"
            Deployment Manager:
                value: dm
                validator: "{% if cloud != 'GCP' %}Requires GCP{% endif %}"
    ```
    When the rendered validator is a non-empty string, the choice is disabled and the message is shown. Choice validation is useful when the validity of a choice depends on the answer to a previous question.
- default: Leave empty to force the user to answer. Provide a default to save them from typing it if it's quite common. When using choices, the default must be the choice value, not its key, and it must match its type. If values are quite long, you can use YAML anchors.
- secret: When true, it hides the prompt displaying asterisks (*****) and doesn't save the answer in the answers file
- placeholder: To provide a visual example for what would be a good value. It is only shown while the answer is empty, so maybe it doesn't make much sense to provide both default and placeholder.
- multiline: When set to `true`, it allows multiline input. This is especially useful when type is json or yaml.
- validator: Jinja template with which to validate the user input. This template will be rendered with the combined answers as variables; it should render nothing if the value is valid, and an error message to show to the user otherwise.
- when: Condition that, if false, skips the question.
    If it is a boolean, it is used directly, but it's a bit absurd in that case.
    If it is a string, it is converted to boolean using a parser similar to YAML, but only for boolean values.
    This is most useful when templated.
    If a question is skipped, its answer will be:
    - The default value, if you're generating the project for the first time.
    - The last answer recorded, if you're updating the project.
    ```yaml
    project_creator:
        type: str
    project_license:
        type: str
        choices:
            - GPLv3
            - Public domain
    copyright_holder:
        type: str
        default: |-
            {% if project_license == 'Public domain' -%}
                {#- Nobody owns public projects -#}
                nobody
            {%- else -%}
                {#- By default, project creator is the owner -#}
                {{ project_creator }}
            {%- endif %}
        # Only ask for copyright if project is not in the public domain
        when: "{{ project_license != 'Public domain' }}"
    ```
    ```yaml
    love_copier:
        type: bool # This makes Copier ask for y/n
        help: Do you love Copier?
        default: yes # Without a default, you force the user to answer
    project_name:
        type: str # Any value will be treated raw as a string
        help: An awesome project needs an awesome name. Tell me yours.
        default: paradox-specifier
        validator: >-
            {% if not (project_name | regex_search('^[a-z][a-z0-9\-]+$')) %}
            project_name must start with a letter, followed one or more letters, digits or dashes all lowercase.
            {% endif %}
    rocket_launch_password:
        type: str
        secret: true # This value will not be logged into .copier-answers.yml
        placeholder: my top secret password
    # I'll avoid default and help here, but you can use them too
    age:
        type: int
        validator: "{% if age <= 0 %}Must be positive{% endif %}"
    height:
        type: float
    any_json:
        help: Tell me anything, but format it as a one-line JSON string
        type: json
        multiline: true
    any_yaml:
        help: Tell me anything, but format it as a one-line YAML string
        type: yaml # This is the default type, also for short syntax questions
        multiline: true
    your_favorite_book:
        # User will choose one of these and your template will get the value
        choices:
            - The Bible
            - The Hitchhiker's Guide to the Galaxy
    project_license:
        # User will see only the dict key and choose one, but you will
        # get the dict value in your template
        choices:
            MIT: &mit_text |
                Here I can write the full text of the MIT license.
                This will be a long text, shortened here for example purposes.
            Apache2: |
                Full text of Apache2 license.
        # When using choices, the default value is the value, **not** the key;
        # that's why I'm using the YAML anchor declared above to avoid retyping the
        # whole license
        default: *mit_text
        # You can still define the type, to make sure answers that come from --data
        # CLI argument match the type that your template expects
        type: str
    close_to_work:
        help: Do you live close to your work?
        # This format works just like the dict one
        choices:
            - [at home, I work at home]
            - [less than 10km, quite close]
            - [more than 10km, not so close]
            - [more than 100km, quite far away]
    ```
#### [Include other YAML files](https://copier.readthedocs.io/en/latest/configuring/#include-other-yaml-files)
The `copier.yml` file supports multiple documents as well as using the `!include` tag to include settings and questions from other YAML files. This allows you to split up a larger `copier.yml` and enables you to reuse common partial sections from your templates. When multiple documents are used, care has to be taken with questions and settings that are defined in more than one document:
- A question with the same name overwrites definitions from an earlier document.
- Settings given in multiple documents for `exclude`, `skip_if_exists`, `jinja_extensions` and `secret_questions` are concatenated.
- Other settings (such as `tasks` or `migrations`) overwrite previous definitions for these settings.
You can use Git submodules to sanely include shared code into templates!
```yaml
---
# Copier will load all these files
!include shared-conf/common.*.yml
# These 3 lines split the several YAML documents
---
# These two documents include common questions for these kind of projects
!include common-questions/web-app.yml
---
!include common-questions/python-project.yml
---
# Here you can specify any settings or questions specific for your template
_skip_if_exists:
    - .password.txt
custom_question: default answer
```
that includes questions and settings from `common-questions/python-project.yml`
```yaml
version:
    type: str
    help: What is the version of your Python project?
# Settings like `_skip_if_exists` are merged
_skip_if_exists:
    - "pyproject.toml"
```
### [Conditional files and directories](https://copier.readthedocs.io/en/latest/configuring/#conditional-files-and-directories)
You can take advantage of the ability to template file and directory names to make them "conditional", i.e. to only generate them based on the answers given by a user.
For example, you can ask users if they want to use pre-commit:
```yaml
use_precommit:
    type: bool
    default: false
    help: Do you want to use pre-commit?
```
And then, you can generate a `.pre-commit-config.yaml` file only if they answered "yes":
```
📁 your_template
├── 📄 copier.yml
└── 📄 {% if use_precommit %}.pre-commit-config.yaml{% endif %}.jinja
```
Note that the chosen template suffix must appear outside of the Jinja condition, otherwise the whole file won't be considered a template and will be copied as such in generated projects.
You can even use the answers of questions with choices:
```yaml
ci:
    type: str
    help: What Continuous Integration service do you want to use?
    choices:
        GitHub CI: github
        GitLab CI: gitlab
    default: github
```
```
📁 your_template
├── 📄 copier.yml
├── 📁 {% if ci == 'github' %}.github{% endif %}
│   └── 📁 workflows
│       └── 📄 ci.yml
└── 📄 {% if ci == 'gitlab' %}.gitlab-ci.yml{% endif %}.jinja
```
Contrary to files, directories must not end with the template suffix.
### [Generating a directory structure](https://copier.readthedocs.io/en/latest/configuring/#generating-a-directory-structure)
You can use answers to generate file names as well as whole directory structures.
```yaml
package:
    type: str
    help: Package name
```
```
📁 your_template
├── 📄 copier.yml
└── 📄 {{ package.replace('.', _copier_conf.sep) }}{{ _copier_conf.sep }}__main__.py.jinja
```
If you answer `your_package.cli.main` Copier will generate this structure:
```
📁 your_project
└── 📁 your_package
    └── 📁 cli
        └── 📁 main
            └── 📄 __main__.py
```
You can either use any separator, like `.`, and replace it with `_copier_conf.sep`, like in the example above, or just use `/`.
### [Importing Jinja templates and macros](https://copier.readthedocs.io/en/latest/configuring/#importing-jinja-templates-and-macros)
You can [include templates](https://jinja.palletsprojects.com/en/3.1.x/templates/#include) and [import macros](https://jinja.palletsprojects.com/en/3.1.x/templates/#import) to reduce code duplication. A common scenario is the derivation of new values from answers, e.g. computing the slug of a human-readable name:
- `copier.yaml`: