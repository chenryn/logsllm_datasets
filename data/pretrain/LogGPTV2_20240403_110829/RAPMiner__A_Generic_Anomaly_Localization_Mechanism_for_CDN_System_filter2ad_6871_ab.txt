of mining root anomaly patterns in two stages: CP-based
Redundant Attribute Deletion to prune the non-root cause
attribute combinations and AC-guided Layer by Layer Top-
down Search to avoid searching for anomaly but non-root
patterns. Both two steps are effective in narrowing the search
space, tackling the ﬁrst challenge above. The contributions of
this paper are summarized as follows.
• We propose RAPMiner, a framework for root anomaly
patterns mining, which can localize root anomaly patterns
effectively and efﬁciently without strict assumptions.
• We develop a highly efﬁcient metric named classiﬁcation
power that can signiﬁcantly reduce the search space by
deleting redundant attributes. Our analysis demonstrates
that even if only one attribute is pruned, the total search
space will be narrowed by at least 50%.
• By injecting failures into the data collected from a large
ISP-operated CDN in China, we create a semi-synthetic
dataset and call it RAPMD. We refer to the real-world
root anomaly patterns in failures injection procedures, so
as to avoid the ideal root anomaly patterns in RAPMD.
• Experiments are conducted on two datasets including
RAPMD to show the effectiveness of RAPMiner in CDN,
and the semi-synthetic dataset published by Squeeze to
illustrate its usefulness in other scenarios. The results
show that RAPMiner achieves a comparable F1-score
with the existing methods on the Squeeze dataset, and
signiﬁcantly outperforms the state-of-the-art approaches
with regard to RC@k on RAPMD with stable parameters
sensitivity. Besides, the running time experiments also
show the efﬁciency of the proposed RAPMiner. For
allowing experiment reproduction, we have released our
source codes via GitHub at https://github.com/liuchang-
sophie/RAPMiner.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:38 UTC from IEEE Xplore.  Restrictions apply. 
320
Layer 2
Layer 1
(cid:2)(cid:1)(cid:12)(cid:14)(cid:15)(cid:13)(cid:16)(cid:18)(cid:14)(cid:17)(cid:16)(cid:1)
(cid:7)(cid:19)(cid:11)(cid:17)(cid:14)(cid:12)(cid:18)
(cid:3)(cid:1)(cid:12)(cid:14)(cid:15)(cid:13)(cid:16)(cid:18)(cid:14)(cid:17)(cid:16)(cid:1)
(cid:7)(cid:19)(cid:11)(cid:17)(cid:14)(cid:12)(cid:18)
(cid:4)(cid:1)(cid:12)(cid:14)(cid:15)(cid:13)(cid:16)(cid:18)(cid:14)(cid:17)(cid:16)(cid:1)
(cid:7)(cid:19)(cid:11)(cid:17)(cid:14)(cid:12)(cid:18)
(cid:5)(cid:1)(cid:12)(cid:14)(cid:15)(cid:13)(cid:16)(cid:18)(cid:14)(cid:17)(cid:16)(cid:1)
(cid:7)(cid:19)(cid:11)(cid:17)(cid:14)(cid:12)(cid:18)
Layer 3
Layer 4
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:6)
(cid:1)(cid:1)(cid:7)(cid:8)
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:9)
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:6)(cid:2)(cid:9)
(cid:1)(cid:1)(cid:7)(cid:6)
(cid:1)(cid:1)(cid:7)(cid:9)
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:6)(cid:2)(cid:9)
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:9)(cid:2)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:8)(cid:2)(cid:6)(cid:2)(cid:10)
(cid:1)(cid:7)(cid:8)(cid:2)(cid:6)(cid:2)(cid:9)(cid:2)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:6)(cid:2)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:6)(cid:2)(cid:9)(cid:2)(cid:10)
(cid:1)(cid:1)(cid:7)(cid:9)(cid:2)(cid:10)
C: Cuboid
L:  Location
A:  Access Type
O: OS of Device
S:  Website
Layer 1
(L1, *, *, *)
(*, *, *, Site1)
Other Combinations
Layer 2
(L1, *,*,Site1)
i
Other Combinations
Layer 3
(L1, Wireless, *, Site1)
(L1, Fixed, *, Site1)
Other Combinations
(L1, Wireless, IOS, Site1)
1)
(L1, Fixed, IOS, Site1)
e1)
Other Combinations
Layer 4
(L1, Wireless, Android, Site1)
(L1, Fixed, Android, Site1)
( 1
A
i
Fig. 2. The Hierarchical Structure of Cuboids
II. BACKGROUND
In this section, we ﬁrst
introduce the IT operations in
CDN infrastructure. Then, we will illustrate some details via
examples, e.g., basic concepts, to further help understand the
anomaly localization in CDN.
A. IT Operations in CDN
Fig. 1 left shows a typical CDN infrastructure. In CDN,
the edge nodes cache the contents of various websites and
usually sink to districts or counties which are very closed to
users. When HTTP requests are sent by Internet users, the
scheduling center gives priority to providing content to users
from edge nodes via the front-haul link, or otherwise retrieving
the contents from the upper depository ﬁrstly via the back-haul
network, then sending them to users when a cache miss occurs.
To conduct service quality management for CDN, human
operators usually collect and monitor various CDN KPIs, such
as trafﬁc volume, cache hit ratio and server response delay,
etc. Once an anomaly alarm occurs, anomaly localization is
triggered. As shown in Fig. 1 right, a four-tuple (L1, Wireless,
Android, Site1) indicates the “Android” users surf the “Site1”
and are served by the edge node at location “L1” via the
“wireless” network, however, services failed, unfortunately.
Compared these impacted users with those in a four-tuple
(L1, Wireless, IOS, Site1) which are served successfully, it
is not hard for us to observe that the “OS” attribute with
the “Android” element may be the issue. Similarly, since the
service for users that characterized by (L2, Fixed, IOS, Site1)
is failed, while users belonging to (L2, Fixed, IOS, Site2)
are served successfully, thus there is probably the failure of
“Site1”. In this case, clues provided by anomaly localization
enable human operators timely to switch the impacted users
to edge sites in “L1” to guarantee the QoE.
B. Analysis for Search Space
As mentioned above,
the impacted scope of the ISP-
operated CDN can be characterized by four attributes, i.e.
location, access type, OS of the device and website user surfs.
Each attribute has various elements which can form many
different attribute combinations. Consistent with HotSpot [21],
we use cuboids to divide these attribute combinations. As
shown in Fig. 2, there are 15 cuboids in the 4-attribute CDN
Fig. 3. The Root Anomaly Pattern
system with the generalized form 2n−1 where n is the number
of attributes. These cuboids locate in four layers, which are
1-dimensional cuboids with only one attribute, 2-dimensional
cuboids with two attributes, 3-dimensional cuboids with three
attributes, and 4-dimensional cuboids with four attributes
respectively. There is an obvious parent-child relationship
between the layers. For example, cuboid CL is only composed
of Location and contains only 33 attribute combinations, while
cuboid CL,S is composed of Location and Website which
contains 660(= 20 × 33) attribute combinations. The worst
case is that cuboid CL,A,O,S is composed of all attributes, and
the number of attribute combinations it contains has reached
10560(= 20 × 33 × 4 × 4).
C. Anomaly Localization in CDN: an Example Analysis
When a failure alarm occurs, the overall KPI of the CDN
usually shows abnormal behaviors. There may be an anomaly
in the KPI curves of many attribute combinations in all cuboids
shown in Fig. 2, but actually not every attribute combination
showing abnormal behavior will be called the root anomaly
pattern. This is because of the inclusion and parent-child
relationship between attribute combinations, i.e., the affected
scope covered by the higher attribute combination contains
the scope characterized by the lower attribute combination and
only those attribute combinations that present anomalies and
no longer have the parents presenting anomalies can be called
root anomaly patterns. As shown in Fig. 3, the KPI curves
of attribute combinations (L1, *, *, Site1), (L1, Wireless, *,
Site1), (L1, Fixed, *, Site1), (L1, Wireless, IOS, Site1), (L1,
Wireless, Android, Site1), (L1, Fixed, IOS, Site1) and (L1,
Fixed, Android, Site1) all show abnormal behaviors when an
anomalous alarm occurs. However, since (L1, *, *, Site1) is
the ancestor of all other anomalous attribute combinations,
covering the impacted scope of all other anomalous attribute
combinations, hence it is the RAP we want to identify.
III. PROBLEM DEFINITION
Before introducing the problem deﬁnition, we deﬁne some
of the notations in Table II which will be used later.
A. KPI
KPIs collected in real-world Internet
infrastructures are
mainly classiﬁed into two categories. One category is the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:38 UTC from IEEE Xplore.  Restrictions apply. 
321
TABLE II
SUMMARY OF NOTATIONS
Aggregated
75
(a1, *, *)
Notations
ac
attr
CubAttributeSet
v
f
D
Dattri
CPattr
tCP
tconf
Layer
P arents()
Elem()
l()
AttributeSet()
Inf o()
Inf oattr()
Conf idence()
support countD()
Descendants()
Deﬁnations
Attribute Combination
Attribute
Cuboid consisting of attribute combinations
which have the same attributes
Actual Value
Forecast Value
Basic Dataset, i.e. CubA,B,C,D
Sub-dataset which is produced from the
basic dataset D and contains attri
The classiﬁed power of the speciﬁc attribute
The threshold of classiﬁcation power to
determine whether some attribute is
redundant, in the form of percentage
The threshold of conﬁdence to determine
whether some attribute combination is
anomalous, in the range of (0, 1)
The index of the layer that some attribute
combination locates in
The function to get the parent set of some
attribute combination
The function to get elements of some attribute
The function to get the number of elements
for each attribute
The function to get the attribute set of
some attribute combinations
The function to get the information entropy of
the dataset according to Shannon Theory
The function to get the sum of information
entropy of all of the datasets which are formed
by dividing the dataset D with some attribute
The function to get the conﬁdence
The function to get the support on dataset D
The function to get all of the descendants of
some attribute combination
fundamental KPI, and the other is the derived KPI [13]. In
the scenario of ISP-operated CDN, human operators usually
collect and aggregate the fundamental KPIs of the most ﬁne-
grained attribute combinations once an anomaly alarm is
triggered. Since the fundamental KPIs are generally additive,
the KPIs of the coarse-grained attribute combinations in the
higher layers can be obtained from the KPIs of the ﬁne-
grained attribute combinations in the lower layers, as shown
in Fig. 4. Even though the derived KPIs are non-additive, we
can obtain them from fundamental KPIs through a series of
transformations, i.e. K D = g(K F
m), where K F
is fundamental KPI and K D is derived KPI, and g is the
speciﬁc functions. Therefore, as shown in Fig. 4 we can ﬁrst
obtain the fundamental KPIs of the coarse-grained attribute
combinations in higher layers via the aggregation from the
lower layers and further get the derived KPIs through the
speciﬁc transformations.
2 , ..., K F
1 , K F
B. Root Anomaly Pattern (RAP)
Based on the description of the root anomaly pattern in
Section II, we now deﬁne it precisely. We denote the attribute
combination as ac.
Deﬁnition 1 (Root Anomaly Pattern, RAP): If ac is an
(cid:2) ∈ P arents(ac) is
anomalous attribute combination, and (cid:2)ac
an anomalous attribute combination, then ac is a RAP.
15
(a1, b1, *)
60
(a1, b2, *)
5
(a1, b1, c1)
10
(a1, b1, c2)
20
(a1, b2, c1)
40
(a1, b2, c2)
Fig. 4. The Aggregated Process of Fundamental KPI
C. Problem Deﬁnition
For the sake of the description, we still use a four-tuple
attribute combination to elaborate the problem deﬁnition. Note
that the number of attributes can be generalized to any value.
We denote the attribute set for the impacted scope S as
AttributeSet(S) = {A,B,C,D}, and the element sets for
these attributes are denoted as Elem(A) = {a1, a2, ..., al(A)},
Elem(B) = {b1, b2, ..., bl(B)}, Elem(C) = {c1, c2, ..., cl(C)}
and Elem(D) = {d1, d2, ..., dl(D)} respectively, where l(A),
l(B), l(C) and l(D) indicate the number of elements for each
attribute. Then, we divide the cuboids composed of these four
attributes into four layers. Where cuboids in the ﬁrst layer only
contain an individual attribute, and cuboids in the second layer
can be obtained by the Cartesian product of any two attributes,
so as the third and the fourth layers, as shown in Fig. 2. We
formulate the cuboid as follows and only show the example
of one cuboid for each layer.
CubA = {(a1,∗,∗,∗), ..., (al(A),∗,∗,∗)},
length = l(A).
CubA,B = {(a1, b1,∗,∗), ..., (al(A), bl(B),∗,∗)},
length = l(A) × l(B).
CubA,B,C = {(a1, b1, c1,∗), ..., (al(A), bl(B), cl(C),∗)},
length = l(A) × l(B) × l(C).
CubA,B,C,D = {(a1, b1, c1, d1), ..., (al(A), bl(B), cl(C), dl(D))},
length = l(A) × l(B) × l(C) × l(D).
As for the impacted scope characterized in the four-tuple,
CubA,B,C,D is the set of the most ﬁne-grained attribute combi-
nations. Each element in this set is a leaf attribute combination.
They only have ancestors but no descendants. The real value
of KPIs for each element in the CubA,B,C,D can be obtained
in the data collection phase, and we can get the corresponding
predicted values via some prediction methods. We denote the
actual and predicted value as v and f, respectively. Examples
of the data are shown in Table III. Since many existing studies
have focused on prediction techniques [1], [2], [15], [23], [24],
we do not take the prediction methods as our primary work
in this paper.
To sum up, mining of root anomaly patterns can be ex-
pressed as: given the actual value v and predicted value f
of the corresponding KPIs for the most ﬁne-grained attribute
combination set CubA,B,C,D, how we can quickly and accu-
rately mine the RAP s of the impacted scope S.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:38 UTC from IEEE Xplore.  Restrictions apply. 
322
THE DATA FORM OF THE MOST FINE-GRAINED ATTRIBUTE
TABLE III
COMBINATION
Attribute Combination
(a1, b1, c1, d1)
(a1, b1, c1, d2)
...
(al(A), bl(B), cl(C), dl(D))
v
10.0
23.0
...
101.2
f
5.0
20.5
...
125.8
IV. ROOT ANOMALY PATTERN MINER
A. Insights
Through a careful analysis of the real-world CDN dataset,
we underscore two domain-speciﬁc insights as follows.
1) Insight 1: If an attribute is in the root anomaly patterns,
this attribute has some degree of classiﬁcation power for the
entire most ﬁne-grained attribute combinations, namely normal
or abnormal.
2) Insight 2: If an attribute combination is a root anomaly
pattern, most of its children should be anomalous, while all of
its parents should not be anomalous. In other words, if only a
small part of its child attribute combinations are anomalous or
anyone parent is anomalous, such attribute combination should
not be considered as a RAP .
B. Framework
Fig. 5 shows the overall framework of RAPMiner, which
mainly consists of two parts: a CP-based Redundant Attribute
Deletion and an AC-guided Layer by Layer Top-down Search.