Mission Impossible 
 Steal Kernel Data from User Space 
Yueqiang)Cheng,)Zhaofeng)Chen,)Yulong)Zhang,)Yu)Ding,)Tao)Wei)
Baidu)Security)
About Speakers
Dr.$Tao$Wei$
Dr.$Yueqiang$Cheng$
Mr.$Zhaofeng$Chen$
Mr.$Yulong$Zhang$
Dr.$Yu$Ding$
Our)Security)Projects:)
How to Read Unauthorized Kernel Data 
From User Space?
$$
Strong Kernel-User Isolation (KUI)
      Enforced by MMU via Page Table
Why is Hard?
Assume Kernel has NO implementation bug: 
      No kernel vulnerability to arbitrarily read kernel data
Memory Access in KUI
Lookup TLB
Fetch
Page Table
Update TLB
Protection
Check
Miss
Hit
Denied
 Permitted
Protection
Fault
SIGSEGV
Physical 
Address
Virtual Address
Permission Checkings
2: Control Registers, e.g., SMAP in CR4
1: Page Table Permissions
Image from Intel sdm 
1. Unprivileged App +
2. KUI Permission Checking +
3. Bug-free Kernel
No Way to Go?
However, in order to 
gain high performance, 
CPU …
1. Unprivileged App +
2. Permission Checking +
3. Bug-free Kernel
Microarchitecture$
Speculative)Execution)+)Out-of-order)
Execution$
Speculative Execution 
S$
F$
T$
E$
No$Speculative$Execution$
Misprediction$
Correct$Prediction$
Out-of-order Execution 
Images$are$from$Dr.$Lihu$Rappoport$
Speculative)Execution)+))
Out-of-order)Execution))
Enough?)
Not)Enough)!!!))
Delayed Permission Checking 
+ Cache Side Effects 
Permission)checking)
is)delayed)to)Retire)
Unit$
Image$from$https://www.cse.msu.edu/~enbody/postrisc/postrisc2.htm$
Branch)Predictor)in)
Front)End)Serving)
Speculative)Execution$
Execution)Engine)
executes)in)a)out-
of-order)way$
Side effects in 
cache are still 
there!!! 
1. The content of an attacker-chosen memory 
location, which is inaccessible to the attacker, is 
loaded into a register. 
$
Point)to)the)target)
kernel)address)
How 
Meltdown 
(v3) Works 
How 
Meltdown 
(v3)  
Works 
2. A transient instruction accesses a cache line 
based on the secret content of the register. 
$
Bring)data)into)
cache)
This)number)
should)>=)0x6)
3. The attacker uses Flush+Reload to determine the 
accessed cache line and hence the secret stored at 
the chosen memory location. 
$
ArrayBase$
256$Slots$
0$
1$
2$
254$
255$
The)selected)index)is)the)value)of)the)target)byte)
e.g.,$if$the$selected$index$is$0x65,$the$value$is$‘A’))
How 
Meltdown 
(v3) Works 
ForeShadow Attack 
Put secrets in L1
Unmap Page Table Entry
Meltdown
$$
How about Spectre (v1/v2)?
How  
Spectre (v1) 
Works 
1. The setup phase, in which the processor is mistrained to 
make "an exploitable erroneous speculative prediction." 
        e.g., x  array1_size 
Execution)flow)
should)go)here)
Speculative)
Execution)goes)
here!)
A)slot)of)array2)is)loaded)
into)cache)
How  
Spectre (v1) 
Works 
3: The sensitive data is recovered. This can be done by 
timing access to memory addresses in the CPU cache.$
Array2Base$
256$Slots$
0$
1$
2$
254$
255$
The)selected)index)is)the)value)of)the)target)byte)
e.g.,$if$the$selected$index$is$0x66,$the$value$is$‘B’))
How 
Spectre 
Works 
$$
How Spectre Read Kernel Data
array1+x'points)to))
secret)
ü  array1 and array2 are in user-space
ü  x is controlled by the adversary
Slot)index)of)
array2)leaks)
kernel)data)
1. Unprivileged App +
2. Permission Checking +
3. Bug-free Kernel
Happy! We Get Kernel Data Now
SMAP$
Spectre))
(Gadget)in)Kernel)Space)))
However... 
KPTI$
Meltdown)
Spectre)(Gadget)in)User)Space))$
Kernel$
Space$
PCID)helps)performance))
Before)KPTI)
User$
Space$
Kernel$
Space$
User$
Space$
Kernel$
Space$
User$
Space$
After)KPTI)
User/kernel)mode)
kernel)mode)
User)mode)
KPTI 
Even we put the Spectre 
gadget into the kernel 
space, SMAP will stop it
SMAP 
Supervisor$
Mode$$
(kernel$Space)$
User$Mode$
(User$Space)$
ü  SMAP is enabled when the SMAP bit in 
the CR4 is set 
ü  SMAP can be temporarily disabled by 
setting the EFLAGS.AC flag 
ü  SMAP checking is done long before 
retirement or even execution 
Attack and Mitigation Summary 
Techniques)
Steal)
Kernel)
Data?)
Mitigations)
After)
Mitigation,)
kern.)Data)
Leakage?)
Spectre$
Yes$
KPTI$+$SMAP$
NO$
Meltdown$
Yes$
KPTI$
NO$
ForeShadow$
Yes$
KPTI$
NO$
Only for Kernel Data Leakage. For other aspects, the summary is not included here.
Despair... 
KPTI + SMAP + KUI
Image$from$http://nohopefor.us/credits$
Before)KPTI)
User$
Space$
Kernel$
Space$
After)KPTI)
User/kernel)mode)
Hope in Despair 
Shared)range$$
as$a$bridge)to$
leak$kernel$data$
User$
Space$
Kernel$
Space$
User$
Space$
kernel)mode)
User)mode)
Kernel$
Space$
This)part)cannot)
be)eliminated)
Breaking SMAP + KPTI + user-kernel Isolation 
1: Use new gadget to build data-
dependence between target kernel data 
and the bridge (bypass SMAP)  
2: Use Reliable Meltdown to probe 
bridge to leak kernel data  
(bypass KPTI and KUI) 
New Variant Meltdown v3z 
1st Step: Trigger New Gadget
Similar to Spectre gadget, but not exact the same
Point)to)the)
target)address)
Arr2+offset'is)the)
base)of)”bridge”)
x)and)offset)should)be)controlled)by)the)adversary!!)
Slot'index'of)
“bridge”))
How to Trigger the New Gadget
There are many sources to trigger the new gadget
1: Syscalls
2: /proc and /sys etc. interfaces
3: Interrupt and exception handlers
4: eBPF
5: … 
How to Find the New Gadget
Source Code Scanning
We use smatch for Linux Kernel 4.17.3,
Ø  Default conﬁg: 36 gadget candidates
Ø  Allyes conﬁg:  166 gadget candidates
However, there are many restrictions to the gadget in real exploits
ü  Oﬀset range
ü  Controllable invocation
ü  Cache noise
ü  …
Binary Code Scanning?? 
2nd Step: Probe Bridge
UserArrayBas
e$
0$
1$
2$
254$
255$
BridgeBase)
0$
1$
2$
254$
255$
User Space 
Obviously, in each round there are (256*256) probes
To make the result reliable, usually we need multiple rounds
Bridge
Ineﬃcient
Make it Practical/Eﬃcient
UserArrayBas
e$
0$
1$
2$
254$
255$
BridgeBase)
0$
1$
2$
254$
255$
Why do we need to probe 256 times in Meltdown?
If we know the value of the slot 0 of the BridgeBase, we probe it only once.
Can we know the values in advance? 
User Space 
Bridge
No for Meltdown (v3) 
Meltdown is able to read kernel data. 
But, it requires that the target data is in the CPU L1d cache. 
If the target data is NOT in L1d cache, 0x00 returns. 
We need reliably reading kernel data!
Reliable Meltdown (V3r)
We$test$it$on$Linux$4.4.0$with$Intel$CPU$E3-1280$v6,$and$MacOS$
10.12.6$(16G1036)$with$Intel$CPU$i7-4870HQ$
V3r has two steps:
1st step: bring data into L1d cache
2nd step: use v3 getting data
Point)to)the)
target)address)
Everywhere))
in)kernel)
Put Everything Together
Offline phase: 
Ø Use v3r dumping bridge data, and save them into a table 
Online phase: 
Ø 1st step: Build data dependence between target data and 
bridge slot 
Ø 2nd step: Probe each slot of the bridge  
Efficiency: 
Ø  from several minutes (even around 1 hour in certain 
cases) to only several seconds to leak one byte. 
Demo Settings
Kernel:$Linux$4.4.0$with$SMAP$+$KPTI$
CPU:$Intel$CPU$E3-1280$v6$
In kernel space, we have a  
                       secret msg, e.g., xlabsecretxlabsecret,  
                       location is at, e.g., 0xffffffffc0e7e0a0 
Countermeasure Discussions
Software Mitigations
ü  Patch kernel to eliminate all expected gadgets
ü  Minimize the shared “bridge” region
ü  Randomize the shared “bridge” region
ü  Monitor cache-based side channel activities
Countermeasure Discussions
Hardware Mitigations
ü  Do permission checking during or even execution stage
ü  Revise speculative execution and out-of-order execution
ü  Use side channel resistant cache, e.g., exclusive/random cache
ü  Add hardware-level side channel detection mechanism
Take Away
•  Trinational Spectre and Meltdown can NOT steal kernel 
data with KPTI + SMAP + KUI enabled.
•  Our new Meltdown variants is able to break the 
strongest protection (KPTI + SMAP + KUI).
•  All existing kernels need to be patched to mitigate our 
new attack
Mission Impossible 
Steal Kernel Data from User Space 
Q&A$image$is$from$https://i.redd.it/wbiwgnokgig11.jpg$
Yueqiang)Cheng)))
Baidu)Security)