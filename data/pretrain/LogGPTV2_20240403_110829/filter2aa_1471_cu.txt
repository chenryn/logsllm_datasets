packaged services. A packaged service is identified through the
SERVICE_PKG_SERVICE (512) flag set in its service type. Packaged
services have been designed mainly to support standard Win32 desktop
applications (which may run with an associated service) converted to the new
Modern Application Model. The Desktop App Converter is indeed able to
convert a Win32 application to a Centennial app, which runs in a lightweight
container, internally called Helium. More details on the Modern Application
Model are available in the “Packaged application” section of Chapter 8.
When starting a packaged service, the SCM reads the package information
from the registry, and, as for standard Centennial applications, calls into the
AppInfo service. The latter verifies that the package information exists in the
state repository and the integrity of all the application package files. It then
stamps the new service’s host process token with the correct security
attributes. The process is then launched in a suspended state using
CreateProcessAsUser API (including the Package Full Name attribute) and a
Helium container is created, which will apply registry redirection and Virtual
File System (VFS) as for regular Centennial applications.
Protected services
Chapter 3 of Part 1 described in detail the architecture of protected processes
and protected processes light (PPL). The Windows 8.1 Service Control
Manager supports protected services. At the time of this writing, a service
can have four levels of protection: Windows, Windows light, Antimalware
light, and App. A service control program can specify the protection of a
service using the ChangeServiceConfig2 API (with the
SERVICE_CONFIG_LAUNCH_ PROTECTED information level). A
service’s main executable (or library in the case of shared services) must be
signed properly for running as a protected service, following the same rules
as for protected processes (which means that the system checks the digital
signature’s EKU and root certificate and generates a maximum signer level,
as explained in Chapter 3 of Part 1).
A service’s hosting process launched as protected guarantees a certain kind
of protection with respect to other nonprotected processes. They can’t
acquire some access rights while trying to access a protected service’s
hosting process, depending on the protection level. (The mechanism is
identical to standard protected processes. A classic example is a nonprotected
process not being able to inject any kind of code in a protected service.)
Even processes launched under the SYSTEM account can’t access a
protected process. However, the SCM should be fully able to access a
protected service’s hosting process. So, Wininit.exe launches the SCM by
specifying the maximum user-mode protection level: WinTcb Light. Figure
10-24 shows the digital signature of the SCM main executable, services.exe,
which includes the Windows TCB Component EKU
(1.3.6.1.4.1.311.10.3.23).
Figure 10-24 The Service Control Manager main executable (service.exe)
digital certificate.
The second part of protection is brought by the Service Control Manager.
While a client requests an action to be performed on a protected service, the
SCM calls the ScCheckServiceProtectedProcess routine with the goal to
check whether the caller has enough access rights to perform the requested
action on the service. Table 10-13 lists the denied operations when requested
by a nonprotected process on a protected service.
Table 10-13 List of denied operations while requested from nonprotected
client
Involve
d API 
Name
Operation
Description
Change
Service
Config[
2]
Change 
Service 
Configuration
Any change of configuration to a protected 
service is denied.
SetServi
ceObjec
tSecurit
y
Set a new 
security 
descriptor to a 
service
Application of a new security descriptor to a 
protected service is denied. (It could lower 
the service attack surface.)
DeleteS
ervice
Delete a 
Service
Nonprotected process can’t delete a 
protected service.
Control
Service
Send a control 
code to a 
service
Only service-defined control code and 
SERVICE_CONTROL_INTERROGATE are 
allowed for nonprotected callers.
SERVICE_CONTROL_STOP is allowed for 
any protection level except for 
Antimalware.
The ScCheckServiceProtectedProcess function looks up the service record
from the caller-specified service handle and, in case the service is not
protected, always grants access. Otherwise, it impersonates the client process
token, obtains its process protection level, and implements the following
rules:
■    If the request is a STOP control request and the target service is not
protected at Antimalware level, grant the access (Antimalware
protected services are not stoppable by non-protected processes).
■    In case the TrustedInstaller service SID is present in the client’s token
groups or is set as the token user, the SCM grants access regarding the
client’s process protection.
■    Otherwise, it calls RtlTestProtectedAccess, which performs the same
checks implemented for protected processes. The access is granted
only if the client process has a compatible protection level with the
target service. For example, a Windows protected process can always
operate on all protected service levels, while an antimalware PPL can
only operate on Antimalware and app protected services.
Noteworthy is that the last check described is not executed for any client
process running with the TrustedInstaller virtual service account. This is by
design. When Windows Update installs an update, it should be able to start,
stop, and control any kind of service without requiring itself to be signed
with a strong digital signature (which could expose Windows Update to an
undesired attack surface).
Task scheduling and UBPM
Various Windows components have traditionally been in charge of managing
hosted or background tasks as the operating system has increased in
complexity in features, from the Service Control Manager, described earlier,
to the DCOM Server Launcher and the WMI Provider—all of which are also
responsible for the execution of out-of-process, hosted code. Although
modern versions of Windows use the Background Broker Infrastructure to
manage the majority of background tasks of modern applications (see
Chapter 8 for more details), the Task Scheduler is still the main component
that manages Win32 tasks. Windows implements a Unified Background
Process Manager (UBPM), which handles tasks managed by the Task
Scheduler.
The Task Scheduler service (Schedule) is implemented in the Schedsvc.dll
library and started in a shared Svchost process. The Task Scheduler service
maintains the tasks database and hosts UBPM, which starts and stops tasks
and manages their actions and triggers. UBPM uses the services provided by
the Desktop Activity Broker (DAB), the System Events Broker (SEB), and
the Resource Manager for receiving notification when tasks’ triggers are
generated. (DAB and SEB are both hosted in the System Events Broker
service, whereas Resource Manager is hosted in the Broker Infrastructure
service.) Both the Task Scheduler and UBPM provide public interfaces
exposed over RPC. External applications can use COM objects to attach to
those interfaces and interact with regular Win32 tasks.
The Task Scheduler
The Task Scheduler implements the task store, which provides storage for
each task. It also hosts the Scheduler idle service, which is able to detect
when the system enters or exits the idle state, and the Event trap provider,
which helps the Task Scheduler to launch a task upon a change in the
machine state and provides an internal event log triggering system. The Task
Scheduler also includes another component, the UBPM Proxy, which collects
all the tasks’ actions and triggers, converts their descriptors to a format that
UBPM can understand, and sends them to UBPM.
An overview of the Task Scheduler architecture is shown in Figure 10-25.
As highlighted by the picture, the Task Scheduler works deeply in
collaboration with UBPM (both components run in the Task Scheduler
service, which is hosted by a shared Svchost.exe process.) UBPM manages
the task’s states and receives notification from SEB, DAB, and Resource
Manager through WNF states.
Figure 10-25 The Task Scheduler architecture.
The Task Scheduler has the important job of exposing the server part of
the COM Task Scheduler APIs. When a Task Control program invokes one
of those APIs, the Task Scheduler COM API library (Taskschd.dll) is loaded
in the address space of the application by the COM engine. The library
requests services on behalf of the Task Control Program to the Task
Scheduler through RPC interfaces.
In a similar way, the Task Scheduler WMI provider (Schedprov.dll)
implements COM classes and methods able to communicate with the Task
Scheduler COM API library. Its WMI classes, properties, and events can be
called from Windows PowerShell through the ScheduledTasks cmdlet
(documented at https://docs.microsoft.com/en-
us/powershell/module/scheduledtasks/). Note that the Task Scheduler
includes a Compatibility plug-in, which allows legacy applications, like the
AT command, to work with the Task Scheduler. In the May 2019 Update
edition of Windows 10 (19H1), the AT tool has been declared deprecated,
and you should instead use schtasks.exe.
Initialization
When started by the Service Control Manager, the Task Scheduler service
begins its initialization procedure. It starts by registering its manifest-based
ETW event provider (that has the DE7B24EA-73C8-4A09-985D-
5BDADCFA9017 global unique ID). All the events generated by the Task
Scheduler are consumed by UBPM. It then initializes the Credential store,
which is a component used to securely access the user credentials stored by
the Credential Manager and the Task store. The latter checks that all the
XML task descriptors located in the Task store’s secondary shadow copy
(maintained for compatibility reasons and usually located in
%SystemRoot%\System32\Tasks path) are in sync with the task descriptors
located in the Task store cache. The Task store cache is represented by
multiple registry keys, with the root being
HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Schedule\TaskCache.
The next step in the Task Scheduler initialization is to initialize UBPM.
The Task Scheduler service uses the UbpmInitialize API exported from
UBPM.dll for starting the core components of UBPM. The function registers
an ETW consumer of the Task Scheduler’s event provider and connects to
the Resource Manager. The Resource Manager is a component loaded by the
Process State Manager (Psmsrv.dll, in the context of the Broker
Infrastructure service), which drives resource-wise policies based on the
machine state and global resource usage. Resource Manager helps UBPM to
manage maintenance tasks. Those types of tasks run only in particular system
states, like when the workstation CPU usage is low, when game mode is off,
the user is not physically present, and so on. UBPM initialization code then
retrieves the WNF state names representing the task’s conditions from the
System Event Broker: AC power, Idle Workstation, IP address or network
available, Workstation switching to Battery power. (Those conditions are
visible in the Conditions sheet of the Create Task dialog box of the Task
Scheduler MMC plug-in.)
UBPM initializes its internal thread pool worker threads, obtains system
power capabilities, reads a list of the maintenance and critical task actions
(from the HKLM\System\CurrentControlSet\Control\Ubpm registry key and
group policy settings) and subscribes to system power settings notifications
(in that way UBPM knows when the system changes its power state).
The execution control returns to the Task Scheduler, which finally
registers the global RPC interfaces of both itself and UBPM. Those interfaces
are used by the Task Scheduler API client-side DLL (Taskschd.dll) to
provide a way for client processes to interact via the Task Scheduler via the
Task Scheduler COM interfaces, which are documented at
https://docs.microsoft.com/en-us/windows/win32/api/taskschd/.
After the initialization is complete, the Task store enumerates all the tasks
that are installed in the system and starts each of them. Tasks are stored in the
cache in four groups: Boot, logon, plain, and Maintenance task. Each group
has an associated subkey, called Index Group Tasks key, located in the Task
store’s root registry key (HKLM\ SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Schedule\TaskCache, as introduced previously). Inside
each Index Tasks group key is one subkey per each task, identified through a
global unique identifier (GUID). The Task Scheduler enumerates the names
of all the group’s subkeys, and, for each of them, opens the relative Task’s
master key, which is located in the Tasks subkey of the Task store’s root
registry key. Figure 10-26 shows a sample boot task, which has the
{0C7D8A27-9B28-49F1-979C-AD37C4D290B1} GUID. The task GUID is
listed in the figure as one of the first entries in the Boot index group key. The
figure also shows the master Task key, which stores binary data in the
registry to entirely describe the task.
Figure 10-26 A boot task master key.
The task’s master key contains all the information that describes the task.
Two properties of the task are the most important: Triggers, which describe
the conditions that will trigger the task, and Actions, which describe what
happen when the task is executed. Both properties are stored in binary
registry values (named “Triggers” and “Actions,”, as shown in Figure 10-26).
The Task Scheduler first reads the hash of the entire task descriptor (stored in
the Hash registry value); then it reads all the task’s configuration data and the
binary data for triggers and actions. After parsing this data, it adds each
identified trigger and action descriptor to an internal list.
The Task Scheduler then recalculates the SHA256 hash of the new task
descriptor (which includes all the data read from the registry) and compares it
with the expected value. If the two hashes do not match, the Task Scheduler
opens the XML file associated with the task contained in the store’s shadow
copy (the %SystemRoot%\System32\Tasks folder), parses its data and
recalculates a new hash, and finally replaces the task descriptor in the
registry. Indeed, tasks can be described by binary data included in the
registry and also by an XML file, which adhere to a well-defined schema,
documented at https://docs.microsoft.com/en-
us/windows/win32/taskschd/task-scheduler-schema.
EXPERIMENT: Explore a task’s XML descriptor
Task descriptors, as introduced in this section, are stored by the
Task store in two formats: XML file and in the registry. In this
experiment, you will peek at both formats. First, open the Task
Scheduler applet by typing taskschd.msc in the Cortana search
box. Expand the Task Scheduler Library node and all the subnodes
until you reach the Microsoft\Windows folder. Explore each
subnode and search for a task that has the Actions tab set to
Custom Handler. The action type is used for describing COM-
hosted tasks, which are not supported by the Task Scheduler applet.
In this example, we consider the ProcessMemoryDiagnosticEvents,
which can be found under the MemoryDiagnostics folder, but any
task with the Actions set to Custom Handler works well:
Open an administrative command prompt window (by typing
CMD in the Cortana search box and selecting Run As
Administrator); then type the following command (replacing the
task path with the one of your choice):
Click here to view code image
schtasks /query /tn 
"Microsoft\Windows\MemoryDiagnostic\ProcessMemoryDiagnosticE
vents" /xml
The output shows the task’s XML descriptor, which includes the
Task’s security descriptor (used to protect the task for being
opened by unauthorized identities), the task’s author and
description, the security principal that should run it, the task
settings, and task triggers and actions:
Click here to view code image
    1.0
    D:P(A;;FA;;;BA)(A;;FA;;;SY)
(A;;FR;;;AU)
$(@%SystemRoot%\system32\MemoryDiagnostic.dll,-600)
$(@%SystemRoot%\system32\MemoryDiagnostic.dll,-
603)
\Microsoft\Windows\MemoryDiagnostic\ProcessMemoryDiagno
sticEvents
      S-1-5-32-544
      HighestAvailable
    false
true
    true
    false
    PT2H
    true
IgnoreNew
    true
    true
      true
      true
true
       &lt;QueryList&gt;&lt;Query Id="0" 
Path="System"&gt;&lt;Select Path="System"&gt;*
[System[Provider[@Name=’Microsoft-Windows-WER-
SystemErrorReporting’] and (EventID=1000 or EventID=1001 or 
EventID=1006)]]&lt;/Select&gt;&lt;/Query&gt;&lt;/QueryList&g
t;
    . . . [cut for space reasons] . . .
      {8168E74A-B39F-46D8-ADCD-7BED477B80A3}
In the case of the ProcessMemoryDiagnosticEvents task, there
are multiple ETW triggers (which allow the task to be executed
only when certain diagnostics events are generated. Indeed, the
trigger descriptors include the ETW query specified in XPath
format). The only registered action is a ComHandler, which
includes just the CLSID (class ID) of the COM object representing
the task. Open the Registry Editor and navigate to the
HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID key.
Select Find... from the Edit menu and copy and paste the CLSID
located after the ClassID XML tag of the task descriptor (with or
without the curly brackets). You should be able to find the DLL
that implements the ITaskHandler interface representing the task,
which will be hosted by the Task Host client application
(Taskhostw.exe, described later in the “Task host client” section):
If you navigate in the HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Schedule\TaskCache\Tasks registry key, you
should also be able to find the GUID of the task descriptor stored
in the Task store cache. To find it, you should search using the
task’s URI. Indeed, the task’s GUID is not stored in the XML
configuration file. The data belonging to the task descriptor in the
registry is identical to the one stored in the XML configuration file
located in the store’s shadow copy
(%systemroot%\System32\Tasks\Microsoft\
Windows\MemoryDiagnostic\ProcessMemoryDiagnosticEvents).
Only the binary format in which it is stored changes.
Enabled tasks should be registered with UBPM. The Task Scheduler calls
the RegisterTask function of the Ubpm Proxy, which first connects to the