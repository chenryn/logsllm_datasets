# Off-Grid Communications with Android: Meshing the Mobile World

## Authors
- **Josh “m0nk” Thomas**
  - The MITRE Corporation, Bedford, MA, USA
  - Email: [PI:EMAIL]
- **Jeff “Stoker” Robble**
  - The MITRE Corporation, Bedford, MA, USA
  - Email: [PI:EMAIL]

## Abstract
The SPAN (Smart Phone Ad-Hoc Networks) project is an open-source implementation of a generalized Mobile Ad-Hoc Network (MANET) framework. Its primary goal is to enable dynamic mesh networking on smartphones and explore the concept of off-grid communications. This paper introduces the SPAN project, its technical details, and its potential applications in scenarios where traditional communication infrastructure is unavailable or unreliable.

## Keywords
- MANET
- OLSRd
- Mesh Network
- Android
- Decentralized
- Peer-to-Peer
- Smartphone

## 1. Introduction to SPAN

Recent global events have highlighted the vulnerabilities of our current communication infrastructure. Cellular towers can be destroyed by natural disasters or become overloaded, and Wi-Fi hotspots rely on power and network connectivity, which are often scarce during emergencies. Examples include Hurricane Katrina, the Haiti earthquake, and the Fukushima disaster, where the common problem was a lack of connectivity and communication.

The SPAN project aims to address these issues by providing an alternative means for information dissemination. It leverages MANET technology to create a resilient backup communication framework when other infrastructure is unavailable or unreliable. The MANET-based solution is a headless, infrastructure-less network that allows smartphones to dynamically link together. By harnessing the ubiquity of smartphones, SPAN provides durable and decentralized communication.

The SPAN team at MITRE has developed an open-source framework for implementing MANET networks, which will be released to the public in late summer. This framework not only provides a full "proof of concept" implementation of a functional MANET but also supports "plug and play" for custom routing protocols. These protocols are essential for adapting the network to the scalability, mobility, and power constraints of mobile devices. The SPAN team is currently developing an adaptive routing protocol that dynamically adjusts based on the current runtime metrics of the mesh network.

In addition to resilient information sharing, the SPAN project enables "off-grid" communications. This is useful in situations where data should be transferred without using the Internet or cellular networks, due to security concerns, fear of monitoring, or other reasons.

## 2. Technical Details

### A. Leveraging Open Source Projects

SPAN is based on the Wireless Tether for Root Users application, originally developed by Harald Mueller. The app started as an open-source project under the GPLv3 license but later became closed source to prevent unauthorized commercialization. We have adopted much of Harald’s interface design and followed his method for configuring a wireless chip to operate in ad-hoc mode using the `iwconfig` Linux command-line utility.

The SPAN project also draws inspiration from the B.A.T.D.R.O.I.D. project, which provides a simple management wrapper to start and stop the B.A.T.M.A.N. daemon on rooted Android handsets. However, SPAN differentiates itself by allowing the use of arbitrary routing protocols during MANET runtime. This is achieved through a generalized architecture implemented as a framework, rather than a proprietary implementation of a specific protocol.

### B. Architecture

The SPAN architecture is designed to support the use of arbitrary routing protocols during runtime. This generalized solution enables the development and investigation of custom routing protocols without the overhead of building a complete implementation. The goal is to provide a MANET test bed for protocol developers to experiment with real-world behaviors and adapt the implementation as needed. This framework also facilitates the SPAN adaptive framework, which will be discussed later in this paper.

The framework is injected into the existing Android network stack between OSI layers 2 and 3. Given that this network stack is based on the standard BSD implementation, the framework is inherently portable across most platforms, whether mobile or otherwise. The initial implementation of the framework is structured as follows:

- The injection point of the Global Handset proxy allows the SPAN framework to control all network traffic seamlessly.
- From the OS and application layer viewpoint, the MANET is simply another avenue for network access, and its existence is completely hidden.
- Once the framework is running on the device, no software application or Android OS modifications are necessary.
- This transparent nature allows common applications like Twitter or Facebook to function, assuming a single node on the overall MANET has bridged the mesh to the outside Internet.

### C. Ad-Hoc Mode on Android Hardware

The Android framework is primarily designed to configure the built-in wireless chip to operate in managed mode (also known as infrastructure mode) and monitor the state of the managed network. In other words, the default behavior of the wireless chip in an Android device is to authenticate with an external access point and act as a client to connect to a pre-existing wireless network. Users can control various options for connecting to a managed network through the wireless and network preferences available in the Settings app. Many Android implementations store network information in a `wpa_supplicant.conf` file and perform authentication using the `wpa_supplicant` command-line utility, which is the standard Linux approach for connecting to a managed network.

An ad-hoc network, on the other hand, does not rely on static access points and eliminates the need for dedicated devices to manage the network. Instead, each device in an ad-hoc network can intelligently route packets to other peers. For successful operation, each device must either know the network topology in advance (proactive routing) or be capable of learning the topology on demand to plan routes at the time of packet transmission (reactive routing). Both approaches have their pros and cons, which will be discussed in a later section.

The pre-ICS (Ice Cream Sandwich / 4.0) Android framework does not support configuring the built-in wireless chip to operate in any mode other than managed mode. ICS introduced support for Wi-Fi Direct, but the ICS implementation of the Wi-Fi Direct specification does not provide a complete ad-hoc network solution. To configure the wireless chip in ad-hoc mode, we work directly with the wireless chip drivers using the `iwconfig` Linux command-line utility to set the parameters of the wireless interface. For `iwconfig` to work, the Linux kernel must support the Wireless Extensions API. The following table shows which devices used for development support the Wireless Extensions API out of the box and which do not:

| **Wireless Extensions Support** | **No Wireless Extensions Support** |
|---------------------------------|------------------------------------|
| Samsung Nexus S 4G              | Samsung Galaxy Nexus               |
| Samsung Galaxy Tab 10.1         | Motorola Razr Maxx                 |
| Samsung Galaxy S II Epic Touch 4G |                                      |

Note that all devices supporting the Wireless Extensions API use the Broadcom wireless chip, as shown in the following table:

| **Device**                      | **Wireless Chip**                  |
|---------------------------------|------------------------------------|
| Samsung Nexus S 4G              | Broadcom BCM4329                   |
| Samsung Galaxy Tab 10.1         | Broadcom BCM4330                   |
| Samsung Galaxy S II Epic Touch 4G | Broadcom BCM4330                   |
| Samsung Galaxy Nexus            | Broadcom BCM4329                   |
| ASUS Eee Pad Transformer Prime  | AzureWave AW-NH615 (rebranded Broadcom BCM4329) |
| Motorola Razr Maxx              | Texas Instruments WL1285C          |
| iPhone 4S                       | Broadcom BCM4330                   |
| Nokia Lumia 900                 | Broadcom BCM4329                   |

In addition to the devices that support the Wireless Extensions API, we were able to compile support into the Linux kernel for the Samsung Galaxy Nexus and ASUS Eee Pad Transformer Prime. We are grateful to Samsung and ASUS for providing their kernel source code to the open-source community. As a result, we have had great success with the Broadcom BCM4329 and BCM4330 wireless chipsets in Android devices and believe it is possible to use the Wireless Extensions API to configure the same wireless chipsets in the iPhone 4S and Nokia Lumia to operate in ad-hoc mode. However, we have had limited success with the Texas Instruments WL1285C chipset.