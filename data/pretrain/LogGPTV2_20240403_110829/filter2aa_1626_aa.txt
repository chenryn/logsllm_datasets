Off Grid communications with Android 
Meshing the mobile world 
Josh “m0nk” Thomas 
The MITRE Corporation 
Bedford, MA USA 
PI:EMAIL 
Jeff “Stoker” Robble 
The MITRE Corporation 
Bedford, MA USA 
PI:EMAIL
The SPAN project is an open source implementation of a 
generalized Mobile Ad-Hoc Network framework.  The project’s 
goals are to bring dynamic mesh networking to smart phones and to 
explore the concepts of Off-Grid communications. 
Keywords: MANET; OLSRd; Mesh Network; Android; 
Decentralized; Peer to Peer; Smartphone 
I. 
 INTRODUCTION TO SPAN 
Recent worldwide events have showcased that our current 
communications infrastructure is not as reliable as we would 
like to believe. Cellular towers can be destroyed by natural 
phenomena or simply overloaded beyond capacity and Wi-Fi 
hotspots are reliant on power and network connectivity, two 
things in short availability during a disaster or catastrophic 
event. We’ve seen these issues surface time and time again 
over the past years, from Katrina to Haiti to Fukushima. It's 
always 
the 
same 
problem: 
no 
connectivity 
and 
no 
communication.  
The SPAN project (Smart Phone Ad-Hoc Networks) 
attempts to ameliorate these issues by providing an alternate 
means for information dispersal. The project utilizes MANET 
(Mobile Ad-Hoc Network) technology to provide a resilient 
backup framework for communication between individuals 
when all other infrastructure is unavailable or unreliable. The 
MANET based solution is a headless, infrastructure-less 
network that allows common smart phones to link together in a 
dynamic way. The SPAN project is harnessing the ubiquity of 
smart phones to provide durable communications.  
The MITRE based SPAN team has created an open source 
framework for implementing MANET networks that will be 
released to the public in late summer. The framework provides 
not only a full “proof of concept” implementation of a 
functional MANET but also allows for “plug and play” of 
custom routing protocols. The routing protocols are the true 
cornerstone of the MANET architecture as they adapt the 
network for scalability, mobility and power constraints of 
mobile devices. The SPAN team is currently working on an 
adaptive routing protocol that will dynamically adjust itself 
based on the current runtime metrics of the mesh network 
itself.  
Aside from resilient information sharing, the SPAN project 
also allows for “Off Grid” communications. There are times 
when data should be transferred around a network, but for 
security, fear of monitoring or other reasons the participants do 
not wish to utilize either the Internet or the cellular networks. 
II. 
TECHNICAL DETAILS 
A. Leveraging Open Source Projects 
SPAN is based on the Wireless Tether for Root Users 
application written by Harald Mueller. The app originally 
started out as an open source project licensed under GPLv3 
but eventually became closed source to prevent profiteers from 
rebranding and selling it on the Android Market (now Google 
Play) for personal gain. We leverage much of Harald’s 
interface design and follow his method for configuring a 
wireless chip to operate in ad-hoc mode using the iwconfig 
Linux command line utility. 
The SPAN project is also somewhat reminiscent of the 
existing B.A.T.D.R.O.I.D. project which provides a simple 
management wrapper to start/stop the B.A.T.M.A.N. daemon 
on your rooted Android handset. The main differentiating 
factor is the SPAN project allows for arbitrary routing 
protocols to be used during MANET runtime. This is 
accomplished by harnessing a generalized architecture 
implemented as a framework instead of a simple proprietary 
implementation of a specific protocol. 
B. Architecture 
The SPAN architecture is intentionally designed to allow 
for arbitrary routing protocol use during runtime.  This 
generalized solution will allow for custom routing protocols to 
be developed and investigated without incurring the overhead 
of building a complete implementation.  The intent is to 
provide a MANET test bed for protocol developers to 
experiment with real world behaviors and adapt the 
implementation as required.  Such a framework also allows for 
the SPAN adaptive framework discussed later in this paper. 
The framework is injected into the existing Android 
network stack between OSI layers 2 & 3.  Given this network 
stack is based on the standard BSD implementation, our 
framework is inherently portable across most platforms, 
mobile or otherwise.  The initial implementation of the 
framework is designed as such: 
The injection point of the Global Handset proxy allows the 
SPAN framework to control all network traffic seamlessly.  
From the OS and application layer viewpoint the MANET is 
simply another avenue for network access and its existence is 
completely hidden.  Once the framework is running on the 
device, no software application or Android OS modifications 
are necessary.  This transparent nature allows for common 
applications like Twitter or Facebook to simply work, 
assuming a single node on the overall MANET has bridged the 
mesh to the outside Internet. 
C. Ad-Hoc Mode on Android Hardware 
The Android framework is primarily designed to configure 
the built-in wireless chip to operate in managed mode (a.k.a. 
infrastructure mode) and monitor the state of the managed 
network. In other words, the default behavior of the wireless 
chip in an Android device is to authenticate with an external 
access point and act as a client to connect to a pre-existing 
wireless network. The user can control various options for 
connecting to a managed network through the wireless and 
network preferences available through the Settings app. Many 
Android implementations store network information in a 
wpa_supplicant.conf file and perform authentication using the 
wpa_supplicant command line utility, which is the standard 
Linux approach for connecting to a managed network.  
An ad-hoc network does not consist of static access points 
and does away with the need for dedicated devices for 
managing the network. Instead, each device in an ad-hoc 
network is capable of intelligently routing packets to other 
peers in the network. In order to be successful, each device 
must know about the network topology prior to planning 
routes (i.e. proactive routing) or capable of learning the 
network topology on demand to plan a route at the time of 
packet transmission (i.e. reactive routing). Both approaches 
have pros and cons, as we will discuss in a later section. 
The pre-ICS (Ice Cream Sandwich / 4.0) Android 
framework does not support configuring the built-in wireless 
chip to operate in any other mode but managed mode. ICS 
offers support for Wi-Fi Direct, but the ICS implementation of 
the Wi-Fi Direct specification does not provide a complete ad-
hoc network solution, as we will discuss in a later section. In 
order to configure the wireless chip in ad-hoc mode we dive 
deeper than the Android framework and work with the 
wireless chip drivers directly by using the iwconfig Linux 
command line utility to set the parameters of the wireless 
interface. In order to use iwconfig the Linux kernel must have 
support for the Wireless Extensions API. The following table 
shows which of the devices we used for development have 
support for the Wireless Extensions API out of the box and 
which do not: 
Wireless Extensions 
Support 
No Wireless Extensions 
Support 
Samsung Nexus S 4G 
Samsung Galaxy Nexus 
Samsung Galaxy Tab 10.1 
ASUS Eee Pad Transformer 
Prime 
Samsung Galaxy S II Epic 
Touch 4G 
Motorola Razr Maxx 
Note that all of the devices which support the Wireless 
Extensions API use the Broadcom wireless chip, as shown in 
the following table: 
 Device 
Wireless Chip 
Samsung Nexus S 4G 
Broadcom BCM4329 
Samsung Galaxy Tab 10.1 
Broadcom BCM4330 
Samsung Galaxy S II Epic 
Touch 4G 
Broadcom BCM4330 
Samsung Galaxy Nexus 
Broadcom BCM4329 
ASUS Eee Pad Transformer 
Prime 
AzureWave AW-NH615 
(rebranded Broadcom 
BCM4329) 
Motorola Razr Maxx 
Texas Instruments WL1285C 
iPhone 4S 
Broadcom BCM4330 
Nokia Lumia 900 
Broadcom BCM4329 
In addition to the devices which support the Wireless 
Extensions API, we were able to compile support into the 
Linux kernel for the Samsung Galaxy Nexus and ASUS Eee 
Pad Transformer Prime. We are very thankful that both 
Samsung and ASUS have provided their kernel source code to 
the open source community.  
Thus, we have had great success with the Broadcom 
BCM4329 and BCM4330 wireless chipsets in Android 
devices and strongly believe that it is possible to use the 
Wireless Extensions API to configure the same wireless 
chipsets in the iPhone 4S and Nokia Lumia to operate in ad-
hoc mode. On the other hand, we have had limited success 