学习的 ppt
感谢 AngelBoy1
[地址](https://www.slideshare.net/AngelBoy1/macos-memory-allocator-libmalloc-exploitation)
# 基础
在macOS中利用的是 libcmalloc
在这个模式中 堆块对应为 `tiny small large`
  * **tiny** (Q = 16) ( **tiny** > 4)运算后将checksum保存在高位上，以便检测堆的元数据是否被溢出破坏
保存的指针的结构
在 free 后的chunk结构中
Msize 记录的是 `block` 的个数，比如这个 chunk 大小为 0x40 那么他对应 4个 `block` 所以 `Msize` 的值为 4
### tiny magazine
结构  
这里的 map_last 类似于一个 **缓存** ，对于free 的chunk(mag_last_free_msize == msize` 是否上一个 free 的chunk 大小和我们现在要申请的chunk 大小一样，这个 `tiny magazine` 中的 chunk 类似存储在 缓存中 `cache`
  2. 如果 `tiny magazine` 中的 `mag_last_free_msize` 不符合我们需要的，会去 `free_list` 中找到对应的chunk，然后会 这个 选择的这个 `chunk->next` 指针进行解密。
  3. 如果 也没用对应大小的 chunk，回去 `free_list` 中存在 chunk 且 大小能够使用的 list 中取出chunk 将chunk 进行切割，取出，然后将剩下的chunk 放入对应 大小的 `free_list`中
  4. 如果 `free_list` 中没有对应的 free 的chunk 能被申请，且 `tiny region end` 大小满足 申请的chunk大小 那么就会从 `tiny region end` 中申请
  5. 当找到对应大小的 chunk 后，会跟新 `metadata(tiny Region 中的 tiny_header_inuse_pair 修改标志位 标明chunk 的使用情况)` 然后将申请的 chunk 返回给 用户 。
接着会利用 `szone_size` 大小索引方法，验证 头和使用状态。
### Free机制
  1. 如果free 的chunk 的 mszie prev == ptr
和 tiny chunk 的申请是一样的，但是 oob chunk 里面ptr 地址存的是 原始数据 不用调用 unchecksum
  3. 且是从 free_list 头取出
  4. 申请得到 chunk 后 会修改 `small Region` 末尾的 `small_oob_free_entries` 里面对应的标志 修改 flag|size 为 mszie msize 的大小为 `0x600/0x200` 这样的计算
### Free机制
  1. 把 chunk 放入 `Cache`
  2. 在free small chunk 中也会存在 合并操作。
    * 首先根据这个堆块 prev 指针找到上一个堆块，根据堆块所在的 Region 末尾的 `small_meta_words` 去查看这个 上一个堆块 标志位，判断这个堆块 是否被free 和 他的msize。从而定位到 上一个chunk 的位置。
    * 然后找到 下一个堆块的 判断是否 free 得到他的大小
    * 接着 合并相邻地址的 prev next free 的chunk （先进行unlink 然后进行 合并
##### unlink
首先根据 是否为 oob chunk
如果为 oob chunk 直接获取 对应的 ptr 指正，如果不是先进行 `unchecksum` 然后进行合并
也是和 tiny chunk 一样会验证 chunk 的 `prev->next == next->prev == ptr`
成立才回调用 unlink
##### 图解
和tiny 一样