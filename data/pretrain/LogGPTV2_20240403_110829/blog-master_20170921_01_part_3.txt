 全文检索    
 物联网    
 流式数据处理    
 社交    
 图式搜索    
 独立事件分析    
 冷热分离    
 异步消息    
 多值类型、图像特征值 相似搜索    
 实时数据清洗    
 GIS应用    
 任意字段实时搜索    
 ... ...  
```    
1\.2 主打：功能、稳定性、性能、高可用、可靠性、Oracle兼容性、HTAP。    
2、HybridDB for PostgreSQL(Greenplum开源版GPDB改进而来) 适合PB级实时OLAP，非常典型的海量数仓。    
兼容SQL:2008，兼容TPC-H，TPC-DS。有数十年的商业化历练经验。    
支持可读写的OSS对象存储外部表    
支持常用类型、扩展数据类型：JSON、PostGIS空间数据库、数组、HLL估值类型。    
支持bitmap, hash, btree索引。    
支持pljava服务端编程。    
支持分析型语法（多维计算、窗口查询、MADlib机器学习）、支持全文检索语法。    
支持列存储、行存储、压缩、混合存储。    
支持4阶段聚合，支持节点间自动重分布。    
支持水平扩容。    
2\.1 适合业务场景：    
PB+级实时分析。（传统统计；时间、空间、属性多维属性透视、圈人；任意表、任意维度JOIN；）    
2\.2 主打：分析型SQL兼容性、功能、稳定性、性能、高可用、扩展性。    
3、RDS PPAS 9.6  
PostgreSQL商业版本PPAS，TB+级OLTP+OLAP数据库，兼容SQL:2011，兼容Oracle(SQL语法、函数、PLSQL存储过程)，支持单机多核并行计算，百万+级tpmC。  
适合业务场景：  
最小化业务改动量，低成本去O。  
TB+级OLTP(在线事务处理)+OLAP(实时分析)。  
主打 功能、稳定性、性能、高可用、Oracle兼容性、HTAP。  
## 三、精准实测法  
精准实测，需要清楚的了解业务。了解业务的数据结构，业务逻辑，模拟事务请求。  
### 压测方法  
根据实际业务，设计测试模型，模拟事务请求，压测得到benchmark。  
### 例子  
[《PostgreSQL性能优化综合案例讲解 - 1》](../201203/20120313_01.md)    
[《PostgreSQL性能优化综合案例讲解 - 2》](../201203/20120313_02.md)    
上面的两篇文档中，设计了一个场景，里面就涉及到如何设计场景，如何设计结构、QUERY、以及测试脚本，压测。  
下面再列举一个例子。  
1、设计表结构  
```  
create table a(id int8 primary key, info text, crt_time timestamp);  
```  
2、设计SQL  
```  
insert into a values (:id, md5(random()::text), now()) on conflict (id) do update set info=excluded.info, crt_time=excluded.crt_time;  
```  
3、设计测试脚本  
pgbench里面支持多种随机数生成方法，支持sleep来模拟客户端业务逻辑的处理，支持多线程。具体详见pgbench文档。  
```  
vi test.sql  
\set id random(1,100000000)  
insert into a values (:id, md5(random()::text), now()) on conflict (id) do update set info=excluded.info, crt_time=excluded.crt_time;  
```  
4、压测（连接数、压测时长）  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 32  
number of threads: 32  
duration: 120 s  
number of transactions actually processed: 37100343  
latency average = 0.103 ms  
latency stddev = 0.282 ms  
tps = 309166.975398 (including connections establishing)  
tps = 309180.511436 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.001  \set id random(1,100000000)  
         0.103  insert into a values (:id, md5(random()::text), now()) on conflict (id) do update set info=excluded.info, crt_time=excluded.crt_time;  
```  
PostgreSQL测试客户端pgbench文档：  
https://www.postgresql.org/docs/9.6/static/pgbench.html  
### 工业标准测试  
1、tpc-b  
PostgreSQL pgbench客户端自带的测试模型，就是tpc-b。具体请参考pgbench的帮助文档，很简单。  
https://www.postgresql.org/docs/9.6/static/pgbench.html  
2、pgbench for sysbench  
这个测试的是一些mysql流行的场景  
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)    
3、tpc-c  
TPC-C是工业标准的OLTP测试，涉及较多复杂查询。  
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)    
4、linkbenchmark  
linkbench是facebook的一个测试模型，用于测试一些图论相关的写入和查询  
[《facebook linkbench 测试PostgreSQL社交关系图谱场景性能》](../201609/20160911_01.md)    
## 四、一些常见性能指标  
![pic](20170921_01_pic_004.jpg)  
![pic](20170921_01_pic_005.jpg)  
![pic](20170921_01_pic_006.jpg)  
![pic](20170921_01_pic_007.jpg)  
![pic](20170921_01_pic_008.jpg)  
![pic](20170921_01_pic_009.jpg)  
![pic](20170921_01_pic_010.jpg)  
![pic](20170921_01_pic_011.jpg)  
https://github.com/digoal/blog/blob/master/201711/readme.md  
## 小结  
根据业务的发展，估算数据库性能，估算需要投入多少硬件，本文提供了三种方法。  
1、微观评估（相对来说比较准确）  
当业务开发好后，表结构、QUERY都已经固定了，唯一不固定的是数据。数据可以通过业务方来估算，多少条记录，有多少唯一值，相关性如何，高频词情况如何等等。  
结合 成本因子的调教、统计信息、结构、query，得到每一种QUERY的执行时间。评估达到这样的TPS需要多少硬件。  
2、宏观评估（对选型有帮助，对规格帮助不大，略显粗糙）  
宏观评估，适合选型，因为它只是多各种产品的特性的总结。  
3、精准评估（最为准确，但是要求对业务非常熟悉，对未来的瓶颈把握准确）  
这个可以在业务开发初期就进行评估，而且相对来说比较准确。  
根据表结构，业务逻辑，设计测试脚本，根据实际的测试结果，结合业务的发展期望进行评估。  
最后，本文还提供了若干种工业标准测试的方法，以及若干种已有的测试数据仅供参考。   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")