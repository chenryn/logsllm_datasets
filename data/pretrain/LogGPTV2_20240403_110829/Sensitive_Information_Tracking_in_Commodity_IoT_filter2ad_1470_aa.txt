title:Sensitive Information Tracking in Commodity IoT
author:Z. Berkay Celik and
Leonardo Babun and
Amit Kumar Sikder and
Hidayet Aksu and
Gang Tan and
Patrick D. McDaniel and
A. Selcuk Uluagac
Sensitive Information Tracking in Commodity IoT
Z. Berkay Celik, The Pennsylvania State University; Leonardo Babun, Amit Kumar Sikder, and
Hidayet Aksu, Florida International University; Gang Tan and Patrick McDaniel,  
The Pennsylvania State University; A. Selcuk Uluagac, Florida International University
https://www.usenix.org/conference/usenixsecurity18/presentation/celik
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Sensitive Information Tracking in Commodity IoT
Z. Berkay Celik∗1, Leonardo Babun∗2, Amit K. Sikder2, Hidayet Aksu2,
Gang Tan1, Patrick McDaniel1, and A. Selcuk Uluagac2
1 Systems and Internet Infrastructure Security Lab
Department of CSE, The Pennsylvania State University
{zbc102,gtan,mcdaniel}@cse.psu.edu
2 Cyber-Physical Systems Security Lab
Department of ECE, Florida International University
{lbabu002,asikd003,haksu,suluagac}@fiu.edu
Abstract
Broadly deﬁned as the Internet of Things (IoT), the
growth of commodity devices that integrate physical pro-
cesses with digital connectivity has had profound effects
on society–smart homes, personal monitoring devices, en-
hanced manufacturing and other IoT applications have
changed the way we live, play, and work. Yet extant IoT
platforms provide few means of evaluating the use (and
potential avenues for misuse) of sensitive information.
Thus, consumers and organizations have little informa-
tion to assess the security and privacy risks these devices
present. In this paper, we present SAINT, a static taint
analysis tool for IoT applications. SAINT operates in three
phases; (a) translation of platform-speciﬁc IoT source
code into an intermediate representation (IR), (b) iden-
tifying sensitive sources and sinks, and (c) performing
static analysis to identify sensitive data ﬂows. We eval-
uate SAINT on 230 SmartThings market apps and ﬁnd
138 (60%) include sensitive data ﬂows. In addition, we
demonstrate SAINT on IOTBENCH, a novel open-source
test suite containing 19 apps with 27 unique data leaks.
Through this effort, we introduce a rigorously grounded
framework for evaluating the use of sensitive information
in IoT apps—and therein provide developers, markets,
and consumers a means of identifying potential threats to
security and privacy.
1
Introduction
The introduction of IoT devices into public and private
spaces has changed the way we live. For example, home
applications supporting smart locks, smart thermostats,
smart switches, smart surveillance systems, and Internet-
connected appliances change the way we monitor and in-
teract with our living spaces. Here mobile phones become
movable control panels for managing the environment that
supports entertainment, cooking, and even sleeping. Such
devices enable our living space to be more autonomous,
∗contributed equally.
adaptive, efﬁcient, and convenient. However, IoT has also
raised concerns about the privacy of these digitally aug-
mented spaces [33, 10, 21, 17, 6]. These networked de-
vices have access to data that can be intensely private,
e.g., when you sleep, what your door lock pin code is,
what you watch on TV or other media, and who and when
others are in the house. Moreover, the state of the devices
themselves represents potentially sensitive information.
Because IoT apps are exposed to a myriad of sensitive
data from sensors and devices connected to the hub, one
of the chief criticisms of modern IoT systems is that
the existing commercial frameworks lack basic tools and
services for analyzing what they do with that information–
i.e., application privacy [47, 27, 46]. SmartThings [34],
OpenHAB [31], Apple’s HomeKit [1] provide guidelines
and policies for regulating security [39, 30, 3], and related
markets provide a degree of internal (hand) vetting of the
applications prior to distribution [36, 4]. However, tools
for evaluating privacy risks in IoT implementations is at
this time largely non-existent. What is needed is a suite
of analysis tools and techniques targeted to IoT platforms
that can identify privacy concerns in IoT apps. This work
seeks to explore formally grounded methods and tools for
characterizing the use of sensitive data, and identifying
the sensitive data ﬂows in IoT implementations.
In this paper, we present SAINT, a static taint analy-
sis tool for IoT apps. SAINT ﬁnds sensitive data ﬂows
in IoT apps by tracking information ﬂow from sensitive
sources, e.g., device state (door locked/unlocked) and
user info (away/at home) to external sinks, e.g., Internet
connections, and SMS. We conduct a study of three ma-
jor existing IoT platforms (i.e., SmartThings, OpenHAB,
and Apple’s HomeKit) to identify IoT-speciﬁc sources
and sinks as well as their sensor-computation-actuator
program structures. We then translate the source code of
an IoT app into an intermediate representation (IR). The
SAINT IR models an app’s lifecycle, including program
entry points, user inputs, and sensor states. In this, we
USENIX Association
27th USENIX Security Symposium    1687
identify IoT-speciﬁc events/actions and asynchronously
executing events, as well as platform-speciﬁc challenges
such as call by reﬂection and the use of state variables.
SAINT uses the IR to perform efﬁcient static analysis that
tracks information ﬂow from sensitive sources to sinks.
We present two studies evaluating SAINT. The ﬁrst is a
horizontal market study in which we evaluated 230 Smart-
Things IoT apps, including 168 market vetted (called ofﬁ-
cial) and 62 non-vetted (called third-party) apps. SAINT
correctly ﬂagged 92 out of 168 ofﬁcial and 46 out of 62
third-party apps exposing at least one piece of sensitive
data via the Internet or messaging services. Further, the
study showed that half of the analyzed apps transmit out
at least three different sensitive data sources (e.g., device
info, device state, user input) via messaging or Internet.
Similarly, approximately two-thirds of the apps deﬁne at
most two separate sensitive sink interfaces and recipients
(e.g., remote hostname or URL for Internet and contact
information for messaging). In a second study, we intro-
duced IOTBENCH, an open-source application corpus for
validating IoT analysis. Our analysis of SAINT on IOT-
BENCH showed that it correctly identiﬁed 25 out of 27
unique leaks in the 19 apps. SAINT produced two false-
positives that were caused by ﬂow over-approximation
resulting from reﬂective methods calls. Additionally, the
two missed code sites contained side-channel leaks and
therefore were outside the scope of SAINT analysis.
It is important to note that the code analysis identi-
ﬁes potential ﬂows of sensitive data. What the user does
with a discovered sensitive data ﬂow is outside the scope
of SAINT. Indeed, the importance of a ﬂow is highly
contextual–one cannot divine the impact or correctness of
a ﬂow without understanding the environment in which
it is deployed–whether the exposure of a camera image,
the room temperature, or television channel represents a
privacy concern depends entirely on who and under what
circumstances the device and app is used. Hence, we iden-
tify those ﬂows which have the potential impact on user
or environmental security and privacy. We expect that the
results will be recorded and the code hand-investigated
to determine the cause(s) of the data ﬂows. If the data
ﬂow is deemed malicious or dangerous for the domain or
environment, the app can be rejected (from the market) or
modiﬁed (by the developer) as needs dictate.
We make the following contributions:
• We introduce the SAINT system that automates
information-ﬂow tracking using inter- and intra-data
ﬂow analysis on an IoT app.
• We evaluate SAINT on 230 SmartThings apps and
expose sensitive information use in commodity apps.
• We validate SAINT on a new open-source IoT-
speciﬁc test corpus IOTBENCH, an open-source repos-
itory of 19 malicious hand-crafted apps.
We begin in the next section by deﬁning the analysis task
and outlining the security and attacker models.
2 Problem Scope and Attacker Model
Problem Scope. SAINT analyzes the source code of an
IoT app, identiﬁes sensitive data from a taint source, and
attaches taint labels that describe sensitive data’s sources
and types. It then performs static taint analysis that tracks
how labeled data (source data, e.g., camera image) prop-
agates in the app (sink, e.g., network interface). Finally,
it reports cases where sensitive data transmits out of the
app at a taint sink such as through the Internet or some
messaging service. In a warning, SAINT reports the source
in the taint label and the details about the sink such as the
external URL or the phone number. SAINT does not deter-
mine whether the data leaks are malicious or dangerous;
however, the output of SAINT can be further analyzed to
verify whether an app conforms to its functionality and
notify users to make informed decisions about potential
privacy risks, e.g., when a camera image is transmitted.
We focus on home automation platforms, which have
the largest number of applications and consumer prod-
ucts [19]. Currently, SAINT is designed to analyze Smart-
Things IoT apps written in the Groovy programming lan-
guage. We evaluate the SmartThings platform for two
reasons. First, it supports the largest number of devices
(142) among all IoT platforms and provides apps of var-
ious functionalities [41]. Second, it has a detailed, pub-
licly available documentation that helps validate our ﬁnd-
ings [40]. As we will detail in Sec. 4.1, SAINT exploits
the highly-structured nature of the IoT programming plat-
forms and extracts an abstract intermediate representation
from the source code of an IoT app. This would allow
the algorithms developed in SAINT to be easily integrated
into other programming platforms written in different
programming or domain-speciﬁc languages.
Attacker Model. SAINT detects sensitive data ﬂows from
taint sources to taint sinks caused by carelessness or mali-
cious intent. We consider an attacker who provides a user
with a malicious app that is used to leak sensitive infor-
mation with or without permissions granted by the user.
First, the granted permissions may violate user privacy
by deviating from the functionality claimed by the app.
Second, permissions granted by an IoT programming plat-
form may also be used to leak information; for instance,
permissions to access the hub id or the manufacturer name
are often granted by default to develop device-speciﬁc
solutions. We assume attackers cannot bypass the security
measures of an IoT platform, nor can they exploit side
channels [35]. For instance, an app that changes the light
intensity to leak the information about whether anyone is
at home is out of the scope of this work.
3 Background of IoT Platforms
We present background of the SmartThings IoT plat-
form [40] to gain insights into the structure of its apps.
We also discuss two other popular IoT platforms: open-
HAB [31] and Apple’s HomeKit [1]. Our discussion is
1688    27th USENIX Security Symposium
USENIX Association
based on a survey, which was performed by reviewing the
platforms’ ofﬁcial documentation, running their example
IoT apps, and analyzing their app construction logic. We
then present the challenges of information ﬂow tracking
in IoT apps. Lastly, we deﬁne each potential type of taint
sources, the mechanisms for taint propagation, and taint
sinks by studying their API documentation.
3.1 Overview of IoT Platforms
SmartThings is a proprietary platform developed by
Samsung. The platform includes three components: a
hub, apps, and the cloud backend [36]. The hub con-
trols the communication between connected devices, the
cloud backend, and mobile apps. Apps are developed
with Groovy (a dynamic, object-oriented language) in a
Kohsuke sandboxed environment [10]. The sandbox lim-
its developers to a speciﬁc subset of the Groovy language
for performance and security. For instance, the sandbox
bans apps from creating their own classes and threads.
The cloud backend creates software wrappers for physical
devices and runs the apps.
The permission system in SmartThings allows a devel-
oper to specify devices and user inputs required for an
app at install time. User inputs are used to implement the
app logic. For instance, a user input is used to set the heat-
ing point of a thermostat. Devices in SmartThings have
capabilities (i.e., permissions). Capabilities are composed
of actions and events. Actions represent how to control or
actuate devices and events represent the state information
of devices. Actions and events are not one to one. While
a device may support many events, it may have limited
actions. Apps are event-driven. They subscribe to device
events or other pre-deﬁned events such as clicking an
icon; when an event is activated, the corresponding event
handler is invoked to take actions.
Users can install SmartThings apps in two different
ways using a smartphone companion app called Smart-
Things Mobile. First, users may download apps through
the ofﬁcial app market. Second, users may install third-
party apps through the Web IDE on a proprietary cloud
backend. Publishing an app in the ofﬁcial market requires
the developer to submit the source code of the app for
review. Ofﬁcial apps appear in the market after the com-
pletion of a review process that takes around two months
to ﬁnish [36]. Users can also develop or install the source
code of a third-party app and make it accessible to only
themselves using the Web IDE. These apps do not require
any review process and are often shared in the Smart-
Things community forum [37]. Compared to other com-
peting platforms, SmartThings supports more devices and
has a growing number of ofﬁcial and third-party apps.
OpenHAB is a vendor- and technology-agnostic open-
source automation platform built in the Eclipse IDE [31].
It includes various devices speciﬁcally designed for home
automation. OpenHAB is open source and provides ﬂexi-
ble and customizable device integration and applications
Information Tracking in IoT Apps
(referred to as rules) to build automated tasks. Similar
to the SmartThings platform, the rules are implemented
through three triggers to react to the changes in the envi-
ronment. Event-based triggers listen to commands from
devices; timing-based triggers respond to speciﬁc times
(e.g., midnight); system-based triggers run with certain
system events such as system start and shutdown. The
rules are written in a Domain Speciﬁc Language (DSL)
based on the Xbase language, which is similar to the
Xtend language with some missing features [8]. Users can
install OpenHAB apps by placing them in rules folder of
their installations and from Eclipse IoT marketplace [29].
Apple’s HomeKit is a development kit that manages and
controls compatible smart devices [1]. The interaction be-
tween users and devices occurs through Siri and HomeKit
apps. Similar to SmartThing and OpenHAB, each device
has capabilities that represent what a device can do. Ac-
tions are deﬁned to send commands to speciﬁc devices
and triggers can be deﬁned to execute actions based on
location, device, and time events. Developers write scripts
to specify a set of actions, triggers, and optional condi-
tions to control HomeKit-compatible devices. Developing
applications in HomeKit can either be written in Swift or
Objective C. Users can install HomeKit apps using the
Home mobile app provided by Apple [2].
3.2
Information ﬂow tracking either statically or dynamically
is a well-studied technique, which has been applied to
many different settings such as mobile apps. From our
study of the three IoT platforms, we found that IoT plat-
forms possess a few unique characteristics and challenges
in terms of tracking information ﬂow when compared
to other platforms. First, in the case of Android, it has a
well-deﬁned IR, and analysis can directly analyze IR code.
However, IoT programming platforms are diverse, and
each uses its own programming language. We propose a
novel IR that captures the event-driven nature of IoT apps;
it has the potential to accommodate many IoT platforms
(Sec. 4.1). Second, while all taint tracking systems have
to be conﬁgured with a set of taint sources and sinks, iden-
tifying taint sources and sinks in IoT apps is quite subtle,
since they access a diverse set of devices, each of which
has a different set of internal states. We describe common
taint sources and sinks in IoT platforms to understand
why they pose privacy risks (Sec. 3.3). Lastly, each IoT
platform has its idiosyncrasies that can pose challenges
to taint tracking. For instance, the SmartThings platform
allows apps to perform call by reﬂection and allows web-
service apps; each of these features makes taint tracking
more difﬁcult and requires special treatment (Sec. 4.2).
3.3
From our studying of the three IoT platforms, we found
that their apps share a common structure and common
types of taint sources and sinks. In this subsection, we
IoT Application Structure
USENIX Association
27th USENIX Security Symposium    1689
notiﬁcations through messaging services when speciﬁc
events occur. We mark such inputs as sensitive since they
contain personally identiﬁable data and may be used to
proﬁle user behavior. We will discuss more about the
semantics of user inputs in Sec. 6.
5) State Variables. IoT apps do not store data about their
previous executions. To retrieve data across executions,
platforms allow apps to persist data to some proprietary
external storage and retrieve this data in later executions.
For instance, a SmartThing app may persist a “counter”
that keeps track of how many times a door is unlocked;
during every execution of the app, the counter is retrieved
from external storage and incremented when a door is
unlocked. We call such persistent data app state variables.
As we detail in Sec. 4.2.2, state variables store sensitive
data and needs to be tracked during taint propagation.
Taint Propagation. An IoT app invokes actions to con-
trol its devices when a particular event occurs. Actions
are invoked in event handlers and may change the state
of the devices. For instance, when a motion sensor trig-
gers a sensor-active event, an app may invoke an event
handler to take an action that changes the state of the
light switch from off to on. This is a straightforward ap-
proach to invoke an action. Event handlers are not limited
to implement only device actions. Apps often call other
functions for implementing the app logic, sending mes-
sages, and logging device events to an external database.
During the execution of event handlers, it is necessary
to track how sensitive information propagates in an app’s
logic. To obtain precision in taint propagation, we start
from event handlers to propagate taint when tainted data is
copied or used in computation, and we delete taint when
all traces of tainted data are removed (e.g., when some
variable is loaded with a constant). We will detail event
handlers and SAINT’s taint propagation logic in Sec. 4.
Taint Sinks. Our initial analysis also uses two taint sinks
(although adding more later is a straightforward exercise).
1) Internet. IoT apps may send sensitive data to exter-
nal services or may act as web services through which
external entities acquire sensitive information. For the
ﬁrst kind, HTTP interfaces may be used to send out in-
formation. For instance, an app may connect to a weather
forecasting service (e.g., www.weather.com) and send out
its location information to get the local weather. For the
second kind, a web-service IoT app may expose a URL
that allows external entities to make requests to the app.
For instance, a request from a remote server may be used
to get the room temperature value. We will detail how
SAINT tracks taint of web-service apps in Sec. 4.2.2.
2) Messaging Services. IoT apps use messaging APIs to
deliver push notiﬁcations to mobile-app users and to send
SMS messages to designated recipients when speciﬁc
events occur. We consider all messaging service interfaces
taint sinks–naturally, as they exﬁltrate data by design.
Figure 1: SAINT’s source and sink categorization in IoT apps.
describe these common taint sources and taint sinks to
understand why they pose privacy risks and how sensitive
information gets propagated in their app structure (see
Fig. 1). We present the taint sources and sinks of the
SmartThings platform in Appendix C.
Taint Sources. We classify taint sources into ﬁve groups
based on information types.
1) Device States. Device states are the attributes of a de-
vice. An IoT app can acquire a variety of privacy-sensitive
information through device state interfaces. For instance,
a door-lock interface returns the status of the door as
locked or unlocked. In our analysis, we marked device
states sensitive as they can be used to proﬁle habits of a
user and pose risks to physical privacy.
2) Device Information. IoT apps grant access to IoT de-
vices at install time. Our investigations reveal the plat-
forms often deﬁne interfaces to access device information
such as its manufacturer name, id, and model. This allows
a developer to write device-speciﬁc apps. We mark all
interfaces used to acquire device information as sensi-
tive as they can be used for marketing and advertisement.
Note that device information is static and does not change
over the course of app execution. In contrast, device states
introduced earlier may change during app execution; for
instance, an action of an app may change a device’s state.
3) Location. In the IoT domain, location information
refers to a user’s geolocation or geographical location.
Geolocation deﬁnes a virtual property such as a garage or
an ofﬁce deﬁned by a user to control devices in that loca-
tion. Geographical location is used to control app logic
through time zones, longitudes, and latitudes. This infor-
mation is often provided by the programming platform
using the ZIP code of the user at install time. For instance,
local sunrise and sunset times of a user’s location may
be used to control the window shade of a house. Loca-
tion information is acquired through location interfaces;
therefore, we mark these interfaces as taint sources.
4) User Inputs. IoT apps often require user inputs either
to manage the app logic or to control devices. In a simple
example, a temperature value needs to be entered by a
user at install time to set the heating point of a thermostat.
User inputs are also often used to form predicates that
control device actions; for instance, an app may turn off
the switch of a device at a particular time entered by the
user. Lastly, users may enter contact information to enable
1690    27th USENIX Security Symposium
USENIX Association
State variables added Internet Device information IoT app  source code Messaging Device states User inputs Location Sensitive sources Sinks Programming platform API Taint Propagation State variables Figure 2: Overview of SAINT architecture.
4 SAINT
We present SAINT, a static taint analysis tool designed
and implemented for SmartThings apps. Fig. 2 shows the
overview of SAINT architecture. We implement the SAINT
analyzer that extracts an intermediate representation (IR)
from the source code of an IoT app. The IR is used to
construct an app’s entry points, event handlers, and call
graphs (Sec. 4.1). Using these, SAINT models the lifecycle
of an app and performs static taint analysis (Sec. 4.2).
Finally, based on static taint analysis, it reports sensitive
data ﬂows from sources to sinks; for each data ﬂow, the
type of the sensitive information, as well as information
about sinks, are reported (Sec. 4.3).
4.1 From Source Code to IR
The ﬁrst step toward modeling the app lifecycle is to ex-
tract an IR from an app’s source code. We exploit the
highly-structured nature of IoT programming platforms
based on our analysis in Sec. 3. We found that IoT systems
are generally structured similarly regardless of their pur-
pose and complexity. The dominant IoT platforms struc-
ture their app’s design around the sensor-computation-
actuator idioms. Therefore, we translate the source code
of an IoT app into an IR by exploiting this structure.
SAINT builds the IR from a framework-agnostic com-
ponent model, which is comprised of the building blocks
of IoT apps, shown in Fig. 3. A broad investigation of
existing IoT environments showed three types of com-
mon building blocks: (1) Permissions grant capabilities
to devices used in an app; (2) Events/Actions reﬂect the
association between events and actions (when an event is
triggered, an associated action is performed); and (3) Call
graphs represent the relationship between entry points
and functions in an app. The IR has several beneﬁts. First,
it allows us to precisely model the app lifecycle as de-
scribed above. Second, it is used to abstract away parts of
the code that are not relevant to property analysis, e.g., def-
inition blocks that specify app meta-data or logging code.
Third, it allows us to have effective taint tracking, e.g., by
associating permissions with the corresponding taint tags
and by knowing what methods are entry points.
We use a sample app presented in Fig. 4 to illustrate
the use of the IR. When a user arrives at home, the app
unlocks the front door and turns on the lights. When she
leaves, it turns off the lights, locks the front door, and
sends to a security service a short message that she is
away based on the time window speciﬁed by her.
Permissions. Permissions are granted when a user installs
or updates an app. This is where various types of devices
Figure 3: Components of the Intermediate Representation (IR).
Figure 4: The IR of a sample app constructed by SAINT from
the app’s source code to demonstrate the precise modelling of
the app’s lifecycle. (Appendix A presents its source code.)
and user inputs are described and granted access. The
permissions are read-only, and app logic is implemented
using the permissions. The SAINT analyzer analyzes the
source code of an app and extracts permissions for all
devices and user inputs. Turning to the IR example in
Fig. 4, the permission block (Lines 1-7) deﬁnes: (1) the
devices: a presence sensor, a switch, and a door; and
(2) user inputs: security-service “contact” information
for sending notiﬁcation messages, and “fromTime” and
“toTime” values that are used to determine whether no-
tiﬁcation messages should be sent. For each permission,
the IR declares a triple following keyword “input”. For
devices, the ﬁrst two entries map device identiﬁers to their
platform-speciﬁc device names in order to determine the
interfaces that a device may access. For instance, an app
that grants access to a switch may use theswitchState
object to access its “on” or “off” state. For a user input,
the line in the IR contains the string name that stores the
user input and its type. The next entry labels the input
with a taint tag showing the type of information such as
the user-deﬁned tag. As noted in Sec. 3.3, we consider
user inputs sensitive.
We also include in the permission block a set of com-
mon interfaces designed for all apps that may leak sen-
sitive data. For instance, location.currentMode gives
the location mode either set to “home” or “away”. We
USENIX Association
27th USENIX Security Symposium    1691
Final	architecture		IoT	App		source	code	Perform	data	ﬂow	analysis		Obtain	IR	(source,	sink	and	entry	point	detec@on)		SainT	analyzer	Sec$on	4.2	Report	details	of	discovered	ﬂows	SainT	web	console	Sec$on	4.3			SainT’s	taint	sources	and	taint	sinks	Sec$on	4.1	For	usenix		New	IoT	App	Hook	Groovy	Compiler			SainT	Analyzer	IR	AST	Visitors	and	AST	Browser		Taint	Analysis			Taint	Sinks			Taint	Sources	u  v Actuator	…	Device	Device	ComputaDon	Devices	Device	Events/AcDons	Call	Graph	Permissions	Mode	Timer	App	touch	Web	service	Sensor		readings	//	Permissions	block	input	(p,	presenceSensor,	type:device)	input	(s,	switch,	type:device)	input	(d,	door,	type:device)	input	(fromTime,	time,	type:user_defined)	input	(toTime,	time,	type:user_defined)	input	(c,	contact,	type:user_defined)		//	Events/Actions	block	subscribe(p,	“present”,	h1)	subscribe(p,	“not	present”,	h2)			//	Entry	point	h1(){		x()	}			//	Entry	point	h2(){		s.off()		d.lock()		def	between=	y()		if	(between){							z()			}	}			x(){		s.on()		d.unlock()	}				y(){				return	timeOfDayIsBetween(fromTime,	toTime,																			new	Date(),	location.timeZone)	}			z(){		sendSms(c,	“...”)			}	1:	2:	3:	4:	5:		6:	7:			8:	9:	10:	11:	12:	13:	14:		15:	16:	17:	18:	19:	20:	21:	22:	23:			24:	25:	26:	27:				28:	29:	30:		31:		32:	33:		34:	USENIX	assign each sensitive value to its label based on taint tags
deﬁned in Sec. 3.3. In this way, we obtain a complete list
of sensitive interfaces an app may access.
Events/Actions. Similar to mobile applications, an IoT
app does not have a main method due to its event-driven
nature. Apps implicitly deﬁne entry points by subscribing
to events. The events/actions block in an IR is built by
analyzing how an app subscribes to events. Each line
in the block includes three pieces of information: the
mapping used for a device, a device event to be subscribed,
and an event handler method to be invoked when that
event occurs. The event handler methods are commonly
used to take device actions. Therefore, an app may deﬁne
multiple entry points by subscribing to multiple events
of a device or devices. Turning to our example, the event
of state changing to “present” is associated with an event
handler method named h1() and the event of changing
to “not present” with the h2() method.
We also found that events are not limited to device
events, and can be generated in many other ways: (1)
Timer events; event handlers are scheduled to take ac-
tions within a particular time or at pre-deﬁned times
(e.g., an event handler is invoked to take actions after
a given number of minutes has elapsed or at speciﬁc times
such as sunset); (2) Web service events; IoT program-
ming platforms may allow an app to be accessible over
the web. This allows external entities (e.g., If This Then
That (IFTTT) [18]) to make requests to the app, and get
information about or control end devices; (3) App touch
events; for example, some action can be performed when
the user clicks on a button in an app; (4) what actions get
generated may also depend on mode events, which are
behavior ﬁlters that automate device actions. For instance,
an app running in “home” mode turns off the alarm and
turns on the alarm when it is in the “away” mode. The
SAINT analyzer analyzes all event subscriptions and ﬁnds
their corresponding event handler methods; it creates a
dummy main method for each entry point.
Asynchronously Executing Events. While each event
corresponds to a unique event handler, the sequence of
the event handlers cannot be decided in advance when
multiple events happen at the same time. For instance, in
our example, there could be a third subscription in the
event/actions block that subscribes to the switch-off event
to invoke another event-handler method. We consider
eventually consistent events, which means any time an
event handler is invoked, it will ﬁnish execution before
another event is handled, and the events are handled in
the order they are received by an edge device (e.g., a hub).
We base our implementation on path-sensitive analysis
that analyzes an app’s event handlers, which can run in
arbitrary sequential order. This is enabled by constructing
a separate call graph for each entry point.
Call Graphs. We create a call graph for each entry point
that deﬁnes an event-handler method. Turning to IR de-
picted in Fig. 4, we have two entry points h1() and h2()
ids ← {(n(cid:48),id(cid:48)) | id(cid:48) is an identiﬁer in e}
worklist ← worklist∪ (ids \ done)
dep ← dep∪{(n : id,n(cid:48) : ids)}
(n,id) ← worklist.pop()
done ← done∪{(n,id)}
for node n(cid:48) with id def.(cid:63) in assignment id = e do
Algorithm 1 Computing dependence from taint sinks
Input: ICFG : Inter-procedural control ﬂow graph
Output: Dependence relation dep
1: worklist ← /0; done ← /0; dep ← /0
2: for an id in a sink call’s arguments at node n do
worklist ← worklist∪{(n,id)}
3:
4: end for
5: while worklist is not empty do
6:
7:
8:
9:
10:
11:
end for
12:
13: end while
1 An id deﬁnition means that there is a control-ﬂow path from
n(cid:48) to n and on the path there is no other assignments to id.
(Lines 12 and 16). h1() invokes x() to unlock the door
and turn on the lights. The entry point h2() turns off the
light and locks the door. It then calls method y() to check
the time to decide whether to send a short message to
a predeﬁned contact via method z(). We note that the
next section will detail how to construct call graphs, for
example, in the case of call by reﬂection.
4.2 Static Taint Tracking
We start with backward taint tracking (Sec. 4.2.1). We
then present algorithms to address platform- and language-
speciﬁc taint-tracking challenges like state variables, call
by reﬂection, web-service IoT apps, and Groovy-speciﬁc
properties (Sec. 4.2.2). Last, we discuss the problem of
implicit ﬂows in static taint tracking (Sec. 4.2.3).
4.2.1 Backward Taint Tracking
From the inter-procedural control ﬂow graph (ICFG) of an
app, SAINT’s backward taint tracking consists of two steps:
(1) it ﬁrst performs taint tracking backward from taint
sinks to construct possible data-leak paths from sources
to sinks; (2) using path- and context- sensitivity, it then
prunes infeasible paths to construct a set of feasible paths,
which are the output of SAINT’s static taint tracking.
In the ﬁrst step, SAINT starts at the sinks of the ICFG
and propagates taint backward. The reason that SAINT
uses the backward approach is to reduce the processing
overhead by starting from a few sinks instead of from a
huge number of sensitive sources. This is conﬁrmed by
checking the ratio of sinks over sources in analyzed IoT
apps (see Fig. 7 in Sec. 5 for taint source analysis and see
Fig. 9 in Sec. 5 for taint sink analysis).
Algorithm 1 details the steps for computing a depen-
dence relation that captures how values propagate in an
app. It is a worklist-based algorithm. The worklist is ini-
tialized with identiﬁers that are used in the arguments of
sink calls. Note that each identiﬁer is also labeled with the
node information to uniquely identify the use of an iden-
tiﬁer because the same identiﬁer can be used in multiple
locations. The algorithm then takes an entry (n,id) from
1692    27th USENIX Security Symposium
USENIX Association
methodName = resp.data.toString()
}
"$methodName"() //call by reﬂection
httpGet("http://url"){
resp –> if(resp.status == 200){
path("/switches") {
path("/switches/:command") {
action: [GET: "listSwitches"] }
action: [PUT: "updateSwitches"] }
state.switchCounter = 0
subscribe(theswitch, "switch.on", turnedOnHandler)
Listing 1: Sample code blocks for SmartThings idiosyncrasies
1 /∗ A code block of an app using a state variable ∗/
2 def initialize() {
3
4
5 }
6 def turnedOnHandler() {
state.switchCounter = state.switchCounter + 1
7
taintedVar = state.switchCounter // tainted
8
9 }
10 /∗ A code block of app using call by reﬂection ∗/
11 def getMethod(){
12
13
14
15
16
17 }
18 def foo() {...}
19 def bar() {...}
20 /∗ A code block of an example web–service app ∗/
21 mappings {
22
23
24
25
26 }
27 def listSwitches() {
switches.each {
28
29
30
31
32 }
33 def updateSwitches() {...}
34 /∗ A code block of an app using closures ∗/
35 def someEventHandler(evt) {
36
37
38
39
40 }
41 /∗ Implicit ﬂows in an example app ∗/
42 def batteryHandler(evt) {
43
if (batLevel  switchVal == "on" ? true : false
}
resp << [name: it.displayName, value:
it.currentValue("switch")]} //tainted
def batLevel = event.device?.currentBattery;
return resp
}
may cause imprecision in taint tracking. We next discuss
how these issues are addressed in SAINT.
Field-sensitive Taint Tracking of State Variables. As
discussed before, IoT apps use state variables that are
stored in the external storage to persist data across execu-
tions. In SmartThings, state variables are stored in either
the global state object or the global atomicState ob-
ject. Listing 1 (Lines 1–9) presents an example app using
the state object to store a ﬁeld named switchCounter
to track the number of times a switch is turned on. To taint
track potential data leaks through state variables, SAINT
applies ﬁeld-sensitive analysis to track the data dependen-