## 开源PolarDB|PostgreSQL 应用开发者&DBA 公开课 - 5.4 PolarDB开源版本必学特性 - PolarDB 日常运维          
### 作者                              
digoal                              
### 日期                              
2024-01-23                              
### 标签                              
PostgreSQL , PolarDB , 应用开发者 , DBA , 公开课                    
----                              
## 背景      
## PolarDB 日常运维      
为了降低学习门槛, 满足没有共享存储环境的同学可以进行体验的需求, 本章的例子使用的是本地环境进行讲解, 共享存储的方法与之类似可以自行探索更有乐趣.    
主机创建一个目录用于存放PolarDB共享数据卷 (请根据你自己的环境进行修改, 本例为`/Users/digoal/polardb_data`) :  
```  
mkdir ~/polardb_data  
cd ~/polardb_data  
pwd  
  返回:  
  /Users/digoal/polardb_data   
```  
拉取镜像  
```  
docker pull polardb/polardb_pg_local_instance  
```  
初始化数据库 (请根据你自己的环境进行修改, 本例为`/Users/digoal/polardb_data`)    
```  
docker run -it --rm \
    --env POLARDB_PORT=5432 \
    --env POLARDB_USER=postgres \
    --env POLARDB_PASSWORD=hellopwd123 \
    -v /Users/digoal/polardb_data:/var/polardb \
    polardb/polardb_pg_local_instance \
    echo 'done'     
```  
启动 PolarDB-PG 服务 (请根据你自己的环境进行修改, 本例为`/Users/digoal/polardb_data`)    
```  
docker run -it -P -d \
    --cap-add=SYS_PTRACE \
    --cap-add SYS_ADMIN \
    --privileged=true \
    --name polardb_pg \
    --shm-size=1g \
    --network=host \
    -v /Users/digoal/polardb_data:/var/polardb \
    polardb/polardb_pg_local_instance    
```  
容器内的 `5432` 至 `5434` 端口分别运行着一个读写节点和两个只读节点。两个只读节点与读写节点共享同一份数据，并通过物理复制保持与读写节点的内存状态同步。  
进入容器  
```  
docker exec -ti polardb_pg bash  
postgres@docker-desktop:~$ psql  
psql (11.9)  
Type "help" for help.  
postgres=# SHOW data_directory;  
        data_directory          
------------------------------  
 /var/polardb/primary_datadir  
(1 row)  
```  
没有特殊说明, 下面演示都在容器中执行.    
### 1、PolarDB 读写节点故障切换 (只读节点在线 Promote)    
首先确认1主2读3个节点的数据目录    
```  
postgres@docker-desktop:~$ ps -efw|grep postgres|grep "\-D"  
postgres    17     1  0 14:08 pts/0    00:00:00 /home/postgres/tmp_basedir_polardb_pg_1100_bld/bin/postgres -D /var/polardb/primary_datadir  
postgres    48     1  0 14:08 pts/0    00:00:00 /home/postgres/tmp_basedir_polardb_pg_1100_bld/bin/postgres -D /var/polardb/replica_datadir1  
postgres    64     1  0 14:08 pts/0    00:00:00 /home/postgres/tmp_basedir_polardb_pg_1100_bld/bin/postgres -D /var/polardb/replica_datadir2  
```  
关闭读写节点(5432), 模拟读写节点故障.   
```  
pg_ctl -D /var/polardb/primary_datadir stop -m fast  
```  
此时，集群中没有任何节点可以写入存储了。这时，我们需要将一个只读节点提升为读写节点，恢复对存储的写入。  
只有当读写节点停止写入后，才可以将只读节点提升为读写节点，否则将会出现集群内两个节点同时写入的情况。当数据库检测到出现多节点写入时，将会导致运行异常。  
将即将被激活的实例(5433)参数进行修改, 以进行激活. 注释的配置为采用quorum同步复制, 确保2个只读实例有1个收到wal meta.       
```  
echo "# synchronous_standby_names='ANY 1 (*)'  
synchronous_standby_names=''" >> /var/polardb/primary_datadir/postgresql.auto.conf   
echo "# synchronous_standby_names='ANY 1 (*)'  
synchronous_standby_names=''" >> /var/polardb/replica_datadir1/postgresql.auto.conf   
echo "# synchronous_standby_names='ANY 1 (*)'  
synchronous_standby_names=''" >> /var/polardb/replica_datadir2/postgresql.auto.conf   
```  
将运行在 5433 端口的只读节点提升为读写节点：  
```  
pg_ctl -D /var/polardb/replica_datadir1 promote  
waiting for server to promote.... done  
server promoted  
```  
接下来将将其他活着的节点(5434)的同步目标从old(5432)转移到新的读写节点(5433).   
```  
cd /var/polardb/replica_datadir2  
vi recovery.conf  
# 注释并修改  
# primary_conninfo = 'host=localhost port=5432 user=postgres dbname=postgres application_name=replica2'   
primary_conninfo = 'host=localhost port=5433 user=postgres dbname=postgres application_name=replica2'   
```  
老的RW节点角色转变为RO节点. 本例老的RW节点实际上还在, 所以可以将老的RW节点角色转变为RO节点.  
```  
cd /var/polardb/primary_datadir  
vi recovery.conf  
# 增加如下, 现在它是replica1, 过去的replica1是primary.   
primary_conninfo = 'host=localhost port=5433 user=postgres dbname=postgres application_name=replica1'  
primary_slot_name = 'replica1'  
polar_replica = on  
recovery_target_timeline = 'latest'  
# 启动节点  
pg_ctl -D /var/polardb/primary_datadir start  
```  
现在新的RW节点上可以看到有2个RO节点了  
```  
postgres@docker-desktop:~$ psql -p 5433  
psql (11.9)  
Type "help" for help.  
postgres=# select * from pg_replication_slots ;  
 slot_name | plugin | slot_type | datoid | database | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn   
-----------+--------+-----------+--------+----------+-----------+--------+------------+------+--------------+-------------+---------------------  
 replica1  |        | physical  |        |          | f         | t      |      65345 |      |              | 0/174CEC0   |   
 replica2  |        | physical  |        |          | f         | t      |      65300 |      |              | 0/174CCC8   |   
(2 rows)  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# select * from pg_stat_replication ;  
  pid  | usesysid | usename  | application_name | client_addr | client_hostname | client_port |         backend_start         | backend_xmin |   state   | sent_lsn  | write_lsn | flush_lsn | replay_lsn   
|    write_lag    |    flush_lag    |   replay_lag    | sync_priority | sync_state   
-------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------  
+-----------------+-----------------+-----------------+---------------+------------  
 65300 |       10 | postgres | replica2         | ::1         |                 |       34416 | 2024-01-25 14:57:34.5525+08   |              | streaming | 0/174D048 | 0/174D048 | 0/174D048 | 0/174D048    
| 00:00:00.000239 | 00:00:00.000239 | 00:00:00.000467 |             0 | async  
 65345 |       10 | postgres | replica1         | ::1         |                 |       49196 | 2024-01-25 15:03:17.208988+08 |              | streaming | 0/174D048 | 0/174D048 | 0/174D048 | 0/174D048    
| 00:00:00.000352 | 00:00:00.000352 | 00:00:00.000435 |             0 | async  
(2 rows)  
```  
### 2、增加PolarDB 只读节点    
由于PolarDB采用了共享存储的架构, 新建只读节点时, 只读实例本地的数据可以通过初始化来生成, 不需要拷贝共享存储中的数据. 或者从已有计算节点拷贝.     
2\.1、创建本地数据目录  
```  
cd /var/polardb  
mkdir replica_datadir3  
chmod 700 replica_datadir3  
```  
2\.2、初始化RO实例数据目录    
```  
# 从RW节点 start backup  
psql -p 5433 -c "select pg_start_backup('test',true);"  
# 选择从replica2拷贝.  
cp -r /var/polardb/replica_datadir2/* /var/polardb/replica_datadir3/  
# 删除 postmaster.pid   
rm -f /var/polardb/replica_datadir3/postmaster.pid   
# 从RW节点 stop backup  
psql -p 5433 -c "select pg_stop_backup();"  
```  
2\.3、配置参数  
从任意只读实例拷贝如下4个文件  
```  
/var/polardb/replica_datadir3/  
postgresql.conf  
postgresql.auto.conf  
pg_hba.conf  
recovery.conf  
```  
修改以上文件的内容  
```  
echo "port = 5435  
  polar_hostid = 3" >> /var/polardb/replica_datadir3/postgresql.auto.conf  
echo "primary_conninfo = 'host=localhost port=5433 user=postgres dbname=postgres application_name=replica3'  
  primary_slot_name = 'replica3'" >> /var/polardb/replica_datadir3/recovery.conf  
```  
2\.4、在RW节点创建replica slot  
```  
psql \
    -p 5433 \
    -d postgres \
    -c "SELECT pg_create_physical_replication_slot('replica3');"  
 pg_create_physical_replication_slot  
-------------------------------------  
 (replica3,)  
(1 row)  
```  
2\.5、启动RO实例  
```  
pg_ctl start -D /var/polardb/replica_datadir3  
```  
2\.6、检查新RO实例上的数据是否正确  
```  
# 在RW节点执行数据写入
# 注意, 目前PolarDB DDL语句通过WAL同步到所有的RO节点/standby节点, 
# 因此在执行DDL时要确保所有replication slot对应节点的正常, 否则DDL操作会被堵塞.
# 通过pg_replication_slots视图或pg_get_replication_slots()函数可以查询系统中的slots.
# 如果SLOT对应节点已经不需要(例如故障)了, 那么请及时调用pg_drop_replication_slot(name)删除对应的slot
psql -p 5433  
drop table if exists test;  
create table test (id int, info text, ts timestamp);  
insert into test select generate_series(1,10), md5(random()::text), clock_timestamp();  
# 在RO节点查看数据是否已同步
psql -p 5435  
select count(*) from test;  
```  
2\.7、检查新的PolarDB集群拓扑  
```  
psql -p 5433  