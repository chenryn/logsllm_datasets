Certainly! Here's a more polished and coherent version of your text:

---

I am developing a Python application that offloads several processing tasks to a set of Celery workers. The main application then waits for the results from these workers. As soon as a result is available, the main application processes it and schedules additional workers to execute.

To achieve a non-blocking design, I currently use a polling function to check for available results from the workers. However, I would like to explore the possibility of using `asyncio` to receive notifications about result availability, thereby eliminating the need for polling. Unfortunately, I have not found any clear guidance on how to implement this with `asyncio`.

I am aware that `gevent` can be used to avoid polling, but since I am working with Python 3.4, I prefer to use `asyncio` instead.

Additionally, I have implemented an `on_finish` function in the Celery worker to publish a message to Redis when a task is completed. In the main application, I use `aioredis` to subscribe to the relevant channel. Once a notification is received, the main application knows that the result is ready for processing.

Any pointers or suggestions on how to achieve this with `asyncio` would be greatly appreciated.

---

This version maintains the original content while improving clarity and coherence.