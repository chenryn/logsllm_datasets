jonathan:
| ?- dynamicsod(User, Role1, Role2).
User = jonathan ,
Role1 = accountant ,
Role2 = clerk ;
Again, we relax this constraint and continue to simu-
late the execution of permissions. The fact that the prepare
cheque permission was executed on the supplier cheque ob-
ject by user jonathan in his role as an accountant is again
asserted to the system through the following clause:
assert(was_executed_on(
prepare_cheque, supplier_cheque,
jonathan, accountant)).
In a similar way we let andreas sign the supplier cheque
and james dispatch the cheque. So far no further dynamic
constraints are broken. Things are different for the customer
cheque. This refund to a priority customer requires fast pro-
cessing and so jonathan prepares the cheque in his role as
an accountant and later dispatches the same cheque in his
role as a clerk. If we now check for any constraints to be
broken, the system will report:
jonathan
accountant
prepare_cheque
| ?- objectsod(User,Object,Role1,Role2).
jeremy
james
mutex
clerk
dispatch_cheque
User = jonathan,
Object = customer_cheque,
Role1 = accountant,
Role2 = clerk ;
Figure 2. Original assignments
In this initial conﬁguration the system will report a Static
Jonathan accessed the customer cheque object twice,
once in his role as an accountant and once in his role as a
clerk, which are mutually exclusive. The object-based Sep-
aration of Duty constraint is broken.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
RBAC96 and RBDM0 model components
Prolog implementation counterparts
1.  , (cid:2), (cid:3) and (cid:4) are sets of permissions, roles,
1. RBAC96 deﬁnition 1.
represented by the facts permission(P),
users and sessions respectively.
role(R), user(U). Sessions are not explicitly modeled.
2. UA (cid:1) (cid:3)  (cid:2) is a many to many user to role
2. RBAC96 deﬁnition 2. represented by the fact
assignment relation.
holds(User, Role).
3. PA (cid:1)   (cid:2) is a many to many permission to
3. RBAC96 deﬁnition 3. represented by the fact
role assignment relation
cando(Role, Permission).
4. RH (cid:1) (cid:2)(cid:2) is a partial order on R, expressing
4. RBAC96 deﬁnition 4. represented by the fact
the role hierarchy.
5. UAO (cid:1) (cid:3) (cid:2) is a many to many original user
superior(Role1, Role2).
Partial order not checked, could be implemented as a spanning tree.
to role assignment relation.
5. RBAC96 deﬁnition 5. represented by the fact
6. UAD (cid:1) (cid:3)  (cid:2) is a many to many delegated
holds o(User, Role).
user to role assignment relation.
6. RBAC96 deﬁnition 6. represented by the fact
7. UA = UAO (cid:3) UAD
8. Users O(r)=(cid:4)	 (cid:5) (cid:6)(cid:1) (cid:7) (cid:1)	(cid:7) (cid:1) (cid:8) (cid:3) (cid:8)(cid:9)
9. Users D(r)=(cid:4)	 (cid:5) (cid:6)(cid:1) (cid:7) (cid:1)	(cid:7) (cid:1) (cid:8) (cid:3) (cid:8)(cid:10)(cid:9)
10. Users(r)= Users O(r) (cid:3) Users D(r)
11. Users: (cid:2) (cid:10) (cid:3)(cid:1) is a function mapping each
role to a set of users.
12. User: (cid:4) (cid:10) (cid:3) is a function mapping each ses-
sion to a single user.
holds d(User, Role).
7. RBAC96 deﬁnition 7. represented by the rule
holds(User, Role):-holds o(User, Role),
holds d(User, Role).
8. RBAC96 deﬁnitions 8.-10. implied by Prolog 5.-7. implementations.
9. RBAC96 deﬁnitions 11. represented by clause
setof(User, holds(User, Role),
Set of assigned users).
10. RBAC96 deﬁnitions 12. and 13. indirectly represented by clause
13. Roles: (cid:4) (cid:10) (cid:3)(cid:2) is a function mapping each
session to a set of roles.
setof(User, plays(User, Role),
Set of assigned users).
14. Permissions: (cid:4) (cid:10) (cid:3) is a function derived
from PA, mapping each session to a set of per-
missions
11. RBAC96 deﬁnition 14. requires the more complex operation clause
collect all permissions(List of Roles for User,
List of permissions).
Table 1. RBAC96/RBDM0 components and Prolog counterparts
Static SoD Rules
staticsod(U, R1, R2):-
holds(U, R1),
mutex(R1, R2),
holds(U, R2).
Description
There is a conﬂict if a user U assigned to two exclusive roles R1, R2.
Dynamic SoD Rules
Description
dynamicsod(U, R1, R2):-
staticsod(U, R1, R2),
plays(U, R1),
plays(U, R2).
objectsod(U, Ob, R1, R2):-
...(See Appendix)
There is a conﬂict if a user U activates two exclusive roles R1, R2 simultane-
ously.
There is a conﬂict if a user U has accessed an object Ob twice through different
exclusive roles R1, R2.
operationalsod(U, Op, P1, P2):-
...(See Appendix)
There is a conﬂict if a user U has all permissions needed in an operation
Op through the union of his exclusive roles. P1 represents the set of his
permissions, P2 the permissions required in the operation.
Table 2. Separation of Duty Rules
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
Still the operational Separation of Duty constraint has
not been broken. Assuming standard RBAC96 mecha-
nisms and the given initial conﬁguration, this constraint
will never be broken by any regular user activities. How-
ever, simulating a user to user role delegation, we can
cause a conﬂict. We now assume that andreas delegates
his role as a supervisor to jonathan. This is inserted
as the fact holds d(jonathan,supervisor) to the
fact base using the delegates(andreas, supervi-
sor, jonathan) rule. The newly delegated assignment
is now being represented by the dashed arrow in Figure 3.
andreas
supervisor
sign_cheque
mutex
jonathan
accountant
prepare_cheque
jeremy
james
mutex
clerk
dispatch_cheque
Figure 3. Original and delegated assignments
This will now cause an operational separation of duty
constraint to be broken as jonathan holds the original roles
of an accountant and clerk and the delegated role of a su-
pervisor, where accountant and supervisor and accountant
and clerk are declared as exclusive. Through these roles, he
now holds all the permissions (P1) required for processing
a cheque (P2):
| ?- operationalsod(User,Object,P1,P2).
User = jonathan ,
Object = process_cheque ,
P1 = [prepare_cheque, sign_cheque,
dispatch_cheque],
P2 = [sign_cheque, dispatch_cheque,
prepare_cheque];
Although we only demonstrated how delegation activi-
ties between users can cause an operational Separation of
Duty constraint to be broken, it is clear that also any other
dynamic constraint can be proven to conﬂict with delega-
tion activities. We can no longer rely on checking for con-
ﬂicts at compile time only. Conﬂict detection checks must
be made with any delegation activity, since it is possible to
create new user/role assignments at run-time.
7 Analysis of Conﬂicts
Considering the simulation of our conﬂict detection
rules, we can make the following observations.
7.1 Non-hierarchical RBAC96
In a standard RBAC96 model without role hierarchies
but with sessions we were able to simulate static, dynamic
and object-based Separation of Duty constraints to be bro-
ken. This was on the basis of a given initial conﬁguration
and a set of user actions.
The interesting question in this case is where the origin
of these conﬂicts lies. We see two main possibilities. On the
one hand it may be the case that mutual exclusion properties
are too strict and do not reﬂect operational needs. On the
other hand the system is too complex and the side-effects of
administrative actions are difﬁcult to determine.
7.2 Hierarchical RBAC96
Role inheritance in the RBAC96 context means that
permissions associated with a role are inherited upwards.
Adding hierarchies to the standard RBAC96 model in-
creases model complexity to a great extent. Now the admin-
istrator not only has to be careful about the deﬁnition of mu-
tually exclusive roles and user to role assignment, but also
about the speciﬁcation of an inheritance hierarchy. In our
implementation, the conﬂict detection rules are not greatly
affected by the introduction of role hierarchies and only an-
other rule allowing us to traverse the role hierarchy using
the Prolog backtracking mechanisms is needed.
The rule for the traversal of role hierarchies is a standard
backtracking rule as described in [5].
inherits_from(Super_Role,Sub_Role):-
superior(Super_Role,Sub_Role).
inherits_from(Super_Role,Sub_Role):-
superior(Super_Role,Sub_Sub_Role),
inherits_from(Sub_Sub_Role,Sub_Role).
Thus in case of the static separation of duty rule we
would now have to ask: 1) Which role(s) does a user hold ei-
ther directly or be means of inheritance 2) Are these role(s)
part of a mutual exclusion relationship? The efﬁciency of
this was already demonstrated by us in a prototype tool pre-
sented in an invited talk at [16].
Again, we can observe that Separation of Duty con-
straints can be broken as described in Section 7.1. Addi-
tionally, we can obtain conﬂicts through a) manipulation of
role hierarchies and b) assignment of users to roles part of
a hierarchy. Private roles as introduced in [14] might be
used as a mitigating mechanism to suppress unwanted in-
heritance.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
7.3 Non-hierarchical RBAC96 and RBDM0
However, the focus of this paper is on the extension of
a hierarchy free RBAC96 model with delegation mecha-
nisms. The simulation we made showed that now also ad-
ministrative actions by a user of the system can lead to con-
ﬂicts. All the static, dynamic, object and operational con-
straints we speciﬁed can be broken by a) ordinary user activ-
ities (e.g. role activation, object access) and b) simple user
to user delegation activities.
7.4 Hierarchical RBAC96 and RBDM0
Again,
introducing role hierarchies into an extended
RBAC96 model results in an increasing complexity. Now
the delegation of a role which is part of a role hierarchy can
also lead to explicit or implicit conﬂicts with static and op-
erational separation of duty conﬂicts. In combination with
certain user activities all four constraints can be broken.
8 Conﬂict Analysis - Why and How?
The scenarios and conﬂict examples we have presented
in this paper may appear trivial. Yet, real role-based sys-
tems are far more complex. The declaration of mutually
exclusive roles and role hierarchies might be done centrally
for the whole organisation, whilst user-role assignment ac-
tivities might occur within an application speciﬁc context.
Thus, it is often difﬁcult to support an administrator in his
work, enabling him to observe what the consequences of his
actions would be prior to ﬁnal commitment.
We have experimented coupling Prolog with a relational
database and a graphical interface. The database would be
used to store the facts, while Prolog would be used to ex-
press rules. We found that the management mechanisms
of a database are very useful for maintaining the integrity
of our data whilst Prolog is far more efﬁcient for process-
ing recursive queries as they result out of role hierarchies.
Considering the performance of such an approach depends
on the search strategy, depth and width of eventual hierar-
chies, design of rules and facts, and the compiler strategy
and query engine. We have not yet experienced any tech-
nical problems with this approach and would rather see the
real difﬁculty in mapping information about organisational
structures and workﬂows to the restricted form of database
tables.
9 Resolving Conﬂicts
We argue that both, constraint speciﬁcation and role del-
egation, are valid and useful extensions to a role-based sys-
tem. However, we have seen that conﬂicts are possible. Too
many conﬂicts indicate an inefﬁcient system conﬁguration,
either because separation rules are too strict or the delega-
tion activities are not sufﬁciently restricted. Simply stat-
ing that separation rules always have precedence would be
one possible way, but other ways of resolving these con-
ﬂicts must be discussed, especially when considering the
implementation of role hierarchies, more elaborate delega-
tion models such as [8], and the decentralisation of admin-
istrative activities through administrative roles [13]. Within
our simple scenario and the limitations of the RBAC96 and
RBDM0 models we see the following possibilities:
(cid:2) Constraining the delegation by introducing sets of
roles that cannot be delegated, sets of users that cannot
delegate and sets of certain users that cannot delegate
certain roles.
(cid:2) Constraining delegation by evaluating the current con-
text, e.g. which user already holds and plays which
original and delegated roles.
(cid:2) Constraining delegation with respect to the history of a
user in his role, e.g. executed permissions or accessed
objects.
(cid:2) Immediate revocation of delegated roles according to
the principle of least privilege.
(cid:2) Temporary revocation or deactivation of his original
roles, e.g. a user has to cover his colleague, thus he will
be delegated the needed roles but his original roles are
revoked for the time of coverage.
A further possibility for conﬂict resolution would be the
application of a different deﬁnition of a role as we sug-
gested and described in [17]. This however, would require
the RBAC96 and RBDM0 model to be changed.
10 An extended deﬁnition of a role
In the RBAC96 model ”Role” is an atomic concept, de-
ﬁned as ”...a named job function within the organization”.
We provide an extended deﬁnition of a role, distinguish-
ing between ofﬁcial positions within the organisational hi-
erarchy and descriptions of the job function of employees.
From now on we will refer to a role using the construct
function/Ofﬁcial Position. We will use lower case letters
for functions and title case letters for positions. An exam-
ple of this would be the supervisor/Group Manager role,
indicating that somebody has the function of being a super-
visor and holds the ofﬁcial position of a Group Manager.
If we decided to delegate not the entire role but only func-
tions and compose new delegated roles, we would be able to
solve some of the previously detected conﬂicts. However,
this notion of an extended role would also require a different
deﬁnition of delegation rules.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
10.1 Delegating functions
Let us assume the following scenario. We have four ex-
tended roles deﬁned by the tuples (Figure 4):
(cid:2) clerk/Employee
(cid:2) clerk/Team Manager
(cid:2) accountant/Team Manager
(cid:2) supervisor/Group Manager
These are identical to our previously used examples in
the cheque issuing process. However, the assignment of
users to those roles is different. We remember that we had
assigned the user jonathan to the exclusive roles of accoun-
tant and clerk such that we could deal with certain types of
cheques more effectively. In our new deﬁnition of a role
we would only assign jonathan to a different function, his