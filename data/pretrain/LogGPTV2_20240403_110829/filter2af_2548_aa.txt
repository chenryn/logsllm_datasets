### 优化后的文本

这道题目涉及QEMU逃逸，属于堆溢出类型的问题。实际环境中处理堆溢出问题与普通的PWN题有所不同，且该题目还去除了符号信息，增加了逆向工程的难度。

## 描述
根据官方[描述](https://github.com/o-o-overflow/chall-ec-3/tree/de0e64563fc9890ce81bfe5fe107afb107d719b7)，目标是通过逃逸读取文件系统中的flag。具体来说，存在一个易受攻击的PCI设备在qemu二进制文件中。参与者需要为Ubuntu内核编写一个内核驱动程序，并利用qemu漏洞来读取flag。

从[这里](https://github.com/ray-cp/vm-escape/blob/master/qemu-escape/DefconQuals-2018-EC3/EC3.tar)下载相关文件后，目录结构如下：
```bash
$ ll
-rw-r--r-- 1 raycp raycp 256K May 10  2018 bios-256k.bin
-rw-r--r-- 1 raycp raycp 235K May 10  2018 efi-e1000.rom
-rw-rw-r-- 1 raycp raycp 1.8M Aug 13 19:10 initramfs-busybox-x86_64.cpio.gz
-rw-r--r-- 1 raycp raycp 9.0K May 10  2018 kvmvapic.bin
-rw-r--r-- 1 raycp raycp 1.5K May 10  2018 linuxboot_dma.bin
-rwxr-xr-x 1 raycp raycp  13M May 11  2018 qemu-system-x86_64
-rwxr-xr-x 1 raycp raycp  170 May 10  2018 run.sh
-rw-r--r-- 1 raycp raycp  38K May 10  2018 vgabios-stdvga.bin
-rw------- 1 raycp raycp 6.9M May 10  2018 vmlinuz-4.4.0-119-generic
```

`run.sh` 脚本内容如下：
```bash
#!/bin/sh
./qemu-system-x86_64 -initrd ./initramfs-busybox-x86_64.cpio.gz -nographic -kernel ./vmlinuz-4.4.0-119-generic -append "priority=low console=ttyS0" -device ooo
```
从 `-device ooo` 参数可以推断，主要目标是 `ooo` 这个PCI设备。

通过检查 `qemu-system-x86_64` 文件，可以看到它是被剥离了符号信息的。
```bash
$ file qemu-system-x86_64
qemu-system-x86_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.32, BuildID[sha1]=b6c6ab3e87201dc5d18373dee7bee760367a8ffa, stripped
```

## 分析
### 环境安装
我在Ubuntu 18.04上尝试运行 `sudo ./run.sh` 启动虚拟机时遇到了一些错误。以下是解决这些问题的步骤：

1. **缺少 libiscsi.so.2**:
   ```bash
   ./qemu-system-x86_64: error while loading shared libraries: libiscsi.so.2: cannot open shared object file: No such file or directory
   ```
   解决方法：
   ```bash
   git clone https://github.com/sahlberg/libiscsi.git
   cd libiscsi
   ./autogen.sh
   ./configure
   make
   sudo make install
   sudo cp /usr/lib/x86_64-linux-gnu/libiscsi.so.7 /lib/libiscsi.so.2
   ```

2. **缺少 AC_PROG_LIBTOOL 宏**:
   ```bash
   configure.ac:9: error: possibly undefined macro: AC_PROG_LIBTOOL
   ```
   解决方法：
   ```bash
   sudo apt-get install libtool
   sudo apt-get install libsysfs-dev
   ```

3. **缺少 libpng12.so.0**:
   ```bash
   ./qemu-system-x86_64: error while loading shared libraries: libpng12.so.0: cannot open shared object file: No such file or directory
   ```
   解决方法：
   ```bash
   sudo wget -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb
   sudo dpkg -i /tmp/libpng12.deb
   sudo rm /tmp/libpng12.deb
   ```

4. **缺少 libxenctrl-4.6.so**:
   ```bash
   ./qemu-system-x86_64: error while loading shared libraries: libxenctrl-4.6.so: cannot open shared object file: No such file or directory
   ```
   解决方法：
   ```bash
   sudo wget -O /tmp/libxen.deb http://mirrors.kernel.org/ubuntu/pool/main/x/xen/libxen-4.6_4.6.5-0ubuntu1.4_amd64.deb
   sudo dpkg -i /tmp/libxen.deb
   sudo rm /tmp/libxen.deb
   ```

最终，虚拟机成功启动并显示以下信息：
```bash
sudo ./run.sh
...
[    3.609675] Write protecting the kernel read-only data: 14336k
[    3.615441] Freeing unused kernel memory: 1696K
[    3.618437] Freeing unused kernel memory: 100K
Boot took 3.82 seconds
break out of the vm, but don't forget to have fun!
/bin/sh: can't access tty; job control turned off
/ # [    4.444675] clocksource: Switched to clocksource tsc
/ #
```

### 逆向分析
将 `qemu-system-x86_64` 导入IDA进行分析。由于符号信息被移除，无法直接搜索 `ooo` 相关函数。我参考了 `edu.c` 和 `hitb2018 babyqemu` 的IDB文件，通过字符串 `ooo_class_init` 定位到以下关键函数和结构体：
- `ooo_class_init` 函数地址：`0x6E67DE`
- `pci_ooo_realize` 函数地址：`0x6E64A5`
- `memory_region_init_io` 函数地址：`0x47D731`
- `ooo_mmio_ops` 结构体地址：`0xB63300`
- `ooo_mmio_read` 函数地址：`0x6E613C`
- `ooo_mmio_write` 函数地址：`0x6E61F4`
- `ooo_instance_init` 函数地址：`0x6E6732`

通过 `pci_ooo_realize` 函数可以确定MMIO空间大小为 `0x1000000`。

接下来详细分析 `ooo_mmio_write` 和 `ooo_mmio_read` 函数。

首先是 `ooo_mmio_write` 函数，关键代码如下：
```c
__int64 __fastcall ooo_mmio_read(struct_a1 *a1, int addr, unsigned int size)
{
    unsigned int idx; // [rsp+34h] [rbp-1Ch]
    __int64 dest; // [rsp+38h] [rbp-18h]
    struct_a1 *v6; // [rsp+40h] [rbp-10h]
    unsigned __int64 v7; // [rsp+48h] [rbp-8h]
    v7 = __readfsqword(0x28u);
    v6 = a1;
    dest = 0x42069LL;
    idx = (addr & 0xF0000u) >> 16;
    if ((addr & 0xF00000u) >> 20 != 15 && global_buf[idx])
}
```

通过这些分析，我们可以进一步理解 `ooo` 设备的行为和潜在的漏洞点。