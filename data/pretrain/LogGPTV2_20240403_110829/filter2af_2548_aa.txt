这题是qemu逃逸是一道堆题，实际环境的堆题还是和普通的pwn题有一定区别的，同时这题还是把符号去掉了，增加了逆向的难度。
## 描述
在官方的[描述](https://github.com/o-o-overflow/chall-ec-3/tree/de0e64563fc9890ce81bfe5fe107afb107d719b7)中，还是逃逸读flag。
    there's a vulnerable PCI device in the qemu binary. players have to write a kernel driver for the ubuntu kernel that is there and then they have to exploit the qemu to read flag off the fsystem.
[文件](https://github.com/ray-cp/vm-escape/blob/master/qemu-escape/DefconQuals-2018-EC3/EC3.tar)下载下来以后，文件结构如下：
    $ ll
    -rw-r--r-- 1 raycp raycp 256K May 10  2018 bios-256k.bin
    -rw-r--r-- 1 raycp raycp 235K May 10  2018 efi-e1000.rom
    -rw-rw-r-- 1 raycp raycp 1.8M Aug 13 19:10 initramfs-busybox-x86_64.cpio.gz
    -rw-r--r-- 1 raycp raycp 9.0K May 10  2018 kvmvapic.bin
    -rw-r--r-- 1 raycp raycp 1.5K May 10  2018 linuxboot_dma.bin
    -rwxr-xr-x 1 raycp raycp  13M May 11  2018 qemu-system-x86_64
    -rwxr-xr-x 1 raycp raycp  170 May 10  2018 run.sh
    -rw-r--r-- 1 raycp raycp  38K May 10  2018 vgabios-stdvga.bin
    -rw------- 1 raycp raycp 6.9M May 10  2018 vmlinuz-4.4.0-119-generic
`run.sh`里面的内容是：
    #!/bin/sh
    ./qemu-system-x86_64 -initrd ./initramfs-busybox-x86_64.cpio.gz -nographic -kernel ./vmlinuz-4.4.0-119-generic -append "priority=low console=ttyS0" -device ooo
通过`-device ooo`知道了目标应该主要是`ooo`这个pci设备。
    $ file qemu-system-x86_64
    qemu-system-x86_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.32, BuildID[sha1]=b6c6ab3e87201dc5d18373dee7bee760367a8ffa, stripped
可以看到`qemu-system-x86_64`是`stripped`，符号是去掉了的。
## 分析
### 环境安装
我是在ubuntu18上面尝试`sudo ./run.sh`把虚拟机跑起来的，但是各种报错，折腾了很久才跑起来，因此在这里也记录一下。
一开始报错：
    ./qemu-system-x86_64: error while loading shared libraries: libiscsi.so.2: cannot open shared object file: No such file or directory
解决办法，安装`libiscsi`：
    git clone https://github.com/sahlberg/libiscsi.git
    ./autogen.sh
    ./configure
    make
    sudo make install
    cp /usr/lib/x86_64-linux-gnu/libiscsi.so.7 /lib/libiscsi.so.2
在运行`./autogen.sh`的时候，报错：
    configure.ac:9: error: possibly undefined macro: AC_PROG_LIBTOOL
解决方法，安装`libtool`和`libsysfs-dev`：
    sudo apt-get install libtool  
    sudo apt-get install libsysfs-dev
安装完`libiscsi`后，再跑`sudo ./run.sh`，仍然报错：
    ./qemu-system-x86_64: error while loading shared libraries: libpng12.so.0: cannot open shared object file: No such file or directory
解决方法，安装`libpng12`：
    sudo wget -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb 
    sudo dpkg -i /tmp/libpng12.deb 
    sudo rm /tmp/libpng12.deb
再跑run.sh，报错：
    ./qemu-system-x86_64: error while loading shared libraries: libxenctrl-4.6.so: cannot open shared object file: No such file or directory
解决方法，安装`libxen4.6`：
    sudo wget  -O /tmp/libxen.deb http://mirrors.kernel.org/ubuntu/pool/main/x/xen/libxen-4.6_4.6.5-0ubuntu1.4_amd64.deb
    sudo dpkg -i /tmp/libxen.deb
    sudo rm /tmp/libxen.deb
然后终于可以运行起来了。。。。
    sudo ./run.sh
    ...
    [    3.609675] Write protecting the kernel read-only data: 14336k
    [    3.615441] Freeing unused kernel memory: 1696K
    [    3.618437] Freeing unused kernel memory: 100K
    Boot took 3.82 seconds
    break out of the vm, but don't forget to have fun!
    /bin/sh: can't access tty; job control turned off
    / # [    4.444675] clocksource: Switched to clocksource tsc
    / #
### 逆向分析
把`qemu-system-x86_64`拖进ida进行分析，由于符号去掉了，所以不能像之前一样直接搜索`ooo`相关的函数来寻找设备函数。
因此为了将该设备相关的函数和结构体找出来，我对照的是`edu.c`以及`hitb2018
babyqemu`的idb文件，通过`ooo_class_init`字符串定位`0x6E67DE`地址的函数为`ooo_class_init`；确定`0x6E64A5`函数为`pci_ooo_realize`；确定`0x47D731`函数为`memory_region_init_io`；确定`0xB63300`地址为`ooo_mmio_ops`对应的结构体；确定`0x6E613C`为`ooo_mmio_read`函数以及`0x6E61F4`为`ooo_mmio_write`函数。通过`ooo_instance_init`字符串可以确定`0x6E6732`为`ooo_instance_init`函数。
通过`pci_ooo_realize`函数可以确定mmio的空间大小为`0x1000000`。
接下来详细分析`ooo_mmio_write`函数以及`ooo_mmio_read`函数。
首先是`ooo_mmio_write`函数，关键代码如下：
    __int64 __fastcall ooo_mmio_read(struct_a1 *a1, int addr, unsigned int size)
    {
      unsigned int idx; // [rsp+34h] [rbp-1Ch]
      __int64 dest; // [rsp+38h] [rbp-18h]
      struct_a1 *v6; // [rsp+40h] [rbp-10h]
      unsigned __int64 v7; // [rsp+48h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      v6 = a1;
      dest = 0x42069LL;
      idx = (addr & 0xF0000u) >> 16;
      if ( (addr & 0xF00000u) >> 20 != 15 && global_buf[idx] )