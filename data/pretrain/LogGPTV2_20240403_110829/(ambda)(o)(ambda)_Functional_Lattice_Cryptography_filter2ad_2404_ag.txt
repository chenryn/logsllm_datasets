• fast and modular algorithms for converting among the three most useful represen-
tations of ring elements, corresponding to the powerful, decoding, and Chinese
Remainder Theorem (CRT) bases;
• fast algorithms for sampling from “theory-recommended” error distributions—i.e.,
those for which the Ring-LWE problem has provable worst-case hardness—for use in
encryption and related operations;
• proper use of the powerful- and decoding-basis representations to maintain tight
control of error growth under cryptographic operations, and for the best error tolerance
in decryption.
We especially emphasize the importance of using appropriate error distributions for Ring-
LWE, because ad-hoc instantiations with narrow error can be completely broken by certain
attacks [Eli+15; CLS15; CIV16], whereas theory-recommended distributions are provably
immune to the same class of attacks [Pei16].
In addition, Λ∘ 𝜆 is the ﬁrst lattice cryptography implementation to expose the rich
hierarchy of cyclotomic rings, making subring and extension-ring relationships accessible
36
to applications. In particular, Λ∘𝜆 support the homomorphic operations known as ring-
switching [BGV14; Gen+13; AP13], which enables efﬁcient homomorphic evaluation of
certain structured linear transforms. Ring-switching has multiple applications, such as
ciphertext compression [BGV14; Gen+13] and asymptotically efﬁcient “bootstrapping”
algorithms for FHE [AP13].
Safety: Building on its host language Haskell, Λ∘ 𝜆 has several facilities for reducing
programming errors and code complexity, thereby aiding the correct implementation of
lattice cryptosystems. This is particularly important for advanced constructions like HE,
which involve a host of parameters, mathematical objects, and algebraic operations that
must satisfy a variety of constraints for the scheme to work as intended.
More speciﬁcally, Λ∘𝜆 uses advanced features of Haskell’s type system to statically
enforce (i.e., at compile time) a variety of mathematical constraints. This catches many
common programming errors early on, and guarantees that any execution will perform only
legal operations.3 For example, Λ∘𝜆 represents integer moduli and cyclotomic indices as
specialized types, which allows it to statically enforce that all inputs to modular arithmetic
operations have the same modulus, and that to embed from one cyclotomic ring to another,
the former must be a subring of the latter. We emphasize that representing moduli and
indices as types does not require ﬁxing their values at compile time; instead, one can (and
we often do) reify runtime values into types, checking any necessary constraints just once at
reiﬁcation.
Additionally, Λ∘𝜆 aids safety by deﬁning high-level abstractions and narrow interfaces
for algebraic objects and cryptographic operations. For example, it provides an abstract data
type for cyclotomic rings, which hides its choice of internal representation (powerful or
CRT basis, subring element, etc.), and automatically performs any necessary conversions.
Moreover, it exposes only high-level operations like ring addition and multiplication, bit
decomposition, sampling uniform or Gaussian ring elements, etc.
3A popular joke about Haskell code is “if you can get it to compile, it must be correct.”
37
Finally, Haskell itself also greatly aids safety because computations are by default pure:
they cannot mutate state or otherwise modify their environment. This makes code easier to
reason about, test, or even formally verify, and is a natural ﬁt for algebra-intensive appli-
cations like lattice cryptography. We stress that “effectful” computations like input/output
or random number generation are still possible, but must be embedded in a structure that
precisely delineates what effects are allowed.
Multiple backends: Λ∘𝜆’s architecture sharply separates its interface of cyclotomic ring
operations from the implementations of their corresponding linear transforms. This allows
for multiple “backends,”, e.g., based on specialized hardware like GPUs or FPGAs via
tools like [Cha+11], without requiring any changes to cryptographic application code. (By
contrast, prior implementations exhibit rather tight coupling between their application and
backend code.) We have implemented two interchangeable backends, one in the pure-Haskell
Repa array library [Kel+10; Lip+12], and one in C++.
3.1.2 Other Technical Contributions
Our work on Λ∘𝜆 has also led to several technical novelties of broader interest and applica-
bility.
Abstractions for lattice cryptography. As already mentioned, Λ∘𝜆 deﬁnes composable
abstractions and algorithms for widely used lattice operations, such as rounding (or rescal-
ing) Z𝑞 to another modulus, (bit) decomposition, and other operations associated with
“gadgets” (including in “Chinese remainder” representations). Prior works have documented
and/or implemented subsets of these operations, but at lower levels of generality and com-
posability. For example, we derive generic algorithms for all the above operations on product
rings, using any corresponding algorithms for the component rings. And we show how
to generically “promote” these operations on Z or Z𝑞 to arbitrary cyclotomic rings. Such
38
modularity makes our code easier to understand and verify, and is also pedagogically helpful
to newcomers to the area.
DSL for sparse decompositions. As shown in [LPR13a] and further in this work, most
cryptographically relevant operations on cyclotomic rings correspond to linear transforms
having sparse decompositions, i.e., factorizations into relatively sparse matrices, or tensor
products thereof. Such factorizations directly yield fast and highly parallel algorithms; e.g.,
the Cooley-Tukey FFT algorithm arises from a sparse decomposition of the Discrete Fourier
Transform.
To concisely and systematically implement the wide variety of linear transforms associ-
ated with general cyclotomics, Λ∘𝜆 includes an embedded domain-speciﬁc language (DSL)
for expressing sparse decompositions using natural matrix notation, and a “compiler” that
produces corresponding fast and parallel implementations. This compiler includes generic
combinators that “lift” any class of transform from the primitive case of prime cyclotomics,
to the prime-power case, and then to arbitrary cyclotomics. (See section 3.4 for details.)
Algorithms for the cyclotomic hierarchy. Recall that Λ∘𝜆 is the ﬁrst lattice cryptography
implementation to expose the rich hierarchy of cyclotomic rings, i.e., their subring and
extension-ring relationships. As the foundation for this functionality, in section 3.3 we
derive sparse decompositions for a variety of objects and linear transforms related to the
cyclotomic hierarchy. In particular, we obtain simple linear-time algorithms for the embed
and “tweaked” trace operations in the three main bases of interest (powerful, decoding, and
CRT), and for computing the relative analogues of these bases for cyclotomic extension
rings. To our knowledge, almost all of this material is new. (For comparison, the Ring-
LWE “toolkit” [LPR13a] deals almost entirely with transforms and algorithms for a single
cyclotomic ring, not inter-ring operations.)
39
3.1.3 Limitations and Future Work
Security. While Λ∘𝜆 has many attractive functionality and safety features, we stress that
it is still an early-stage research prototype, and is not yet recommended for production
purposes—especially in scenarios requiring high security assurances. Potential issues
include, but may not be limited to:
• Most functions in Λ∘𝜆 are not constant time, and may therefore leak secret information
via timing or other side channels. (Systematically protecting lattice cryptography
from side-channel attacks is an important area of research.)
• While Λ∘𝜆 implements a fast algorithm for sampling from theory-recommended error
distributions, the current implementation is somewhat naïve in terms of precision.
By default, some Λ∘ 𝜆 functions use double-precision ﬂoating-point arithmetic to
approximate a sample from a continuous Gaussian, before rounding. (But one can
specify an alternative data type having more precision.) We have not yet analyzed
the associated security implications, if any. We do note, however, that Ring-LWE is
robust to small variations in the error distribution (see, e.g., [LPR13b, Section 5]).
Discrete Gaussian sampling. Many lattice-based cryptosytems, such as digital signatures
and identity-based or attribute-based encryption schemes following [GPV08], require sam-
pling from a discrete Gaussian probability distribution over a given lattice coset, using an
appropriate kind of “trapdoor.” Supporting this operation in Λ∘ 𝜆 is left to future work,
for the following reasons. While it is straightforward to give a clean interface for discrete
Gaussian sampling (similar to the Decompose class described in subsection 3.2.4), providing
a secure and practical implementation is very subtle, especially for arbitrary cyclotomic
rings: one needs to account for the non-orthogonality of the standard bases, use practically
efﬁcient algorithms, and ensure high statistical ﬁdelity to the desired distribution using
ﬁnite precision. Although there has been good progress in addressing these issues at the
40
theoretical level (see, e.g., [DN12; LPR13a; DP15a; DP15b]), a complete practical solution
still requires further research.
Applications. Our focus in this chapter is mainly on the Λ∘ 𝜆 framework itself. We
provide two reference implementations in other chapters: chapter 4 has an implementa-
tion of somewhat-homomorphic encryption [BGV14], and section 6.6 includes the weak
pseudorandom function from [BPR12]. We leave further implementations of lattice-based
cryptosystems with Λ∘𝜆 for future work. While digital signatures and identity/attribute-
based encryption use discrete Gaussian sampling, many other primitives should be straight-
forward to implement using Λ∘𝜆’s existing functionality. These include standard Ring-
LWE-based [LPR13b; LPR13a] and NTRU-style encryption [HPS98; SS11], public-key
encryption with security under chosen-ciphertext attacks [MP12], and strong pseudorandom
functions (PRFs) [BPR12; Bon+13; BP14].
3.1.4 Comparison to Related Work
As mentioned above, there are many implementations of various lattice- and ring-based
cryptographic schemes, such as NTRU (Prime) encryption [HPS98; Ber+16], the SWIFFT
hash function [Lyu+08], digital signature schemes like [GLP12] and BLISS [Duc+13],
key-exchange protocols [Bos+15; Alk+16; Bos+16b], and HE libraries like HElib [HS].
In addition, there are some high-performance backends for power-of-two cyclotomics,
like NFLlib [Mel+16] and [Wan+12], which can potentially be plugged into these other
systems. Also, in a Masters thesis developed concurrently with this work, Mayer [May16]
implemented the “toolkit” algorithms from [LPR13a] for arbitrary cyclotomic rings (though
not the inter-ring operations that Λ∘𝜆 supports).
On the whole, the prior works each implement just one cryptographic primitive (some-
times even on a speciﬁc computational platform), and typically opt for performance over
generality and modularity. In particular, none of them provide any abstract data types
41
for cyclotomic rings, but instead require the programmer to explicitly manage the repre-
sentations of ring elements (e.g., as polynomials) and ensure that operations on them are
mathematically meaningful. Moreover, with the exception of [May16], they do not support
general cyclotomic rings using the current best theory for cryptographic purposes.
HElib. Our work compares most closely to HElib [HS], which is an “assembly language”
for BGV-style HE over cyclotomic rings [BGV14]. It holds speed records for a variety of
HE benchmarks (e.g., homomorphic AES computation [GHS12c]), and appears to be the
sole public implementation of many advanced HE features, like bootstrapping for “packed”
ciphertexts [HS15].
On the downside, HElib does not use the best known algorithms for cryptographic oper-
ations in general (non-power-of-two) cyclotomics. Most signiﬁcantly, it uses the univariate
representation modulo cyclotomic polynomials, rather than the multivariate/tensored repre-
sentations from [LPR13a], which results in more complex and less efﬁcient algorithms, and
suboptimal noise growth in cryptographic schemes. The practical effects of this can be seen
in our performance evaluation (subsection 4.4.2), which shows that Λ∘𝜆’s C++ backend is
about nine times slower than HElib for power-of-two cyclotomics, but is signiﬁcantly faster
(by factors of two or more) for indices involving two or more small primes. Finally, HELib
is targeted toward just one class of cryptographic construction (HE), so it lacks functionality
necessary to implement a broader selection of lattice schemes (e.g., CCA-secure encryption).
Computational algebra systems. Algebra packages like Sage and Magma provide very
general-purpose support for computational number theory. While these systems do offer
higher-level abstractions and operations for cyclotomic rings, they are not a suitable platform
for attaining our goals. First, their existing implementations of cyclotomic rings do not
use the “tensored” representations (i.e., powerful and decoding bases, and CRT bases
over Z𝑞) and associated fast algorithms that are preferred for cryptographic purposes. Nor
do they include support for special lattice operations like bit decomposition and other
42
“gadget” operations, so to use such systems we would have to reimplement essentially all
the mathematical algorithms from scratch. Perhaps more signiﬁcantly, the programming
languages of these systems are relatively weakly and dynamically (not statically) typed, so
all type-checking is deferred to runtime, where errors can be much harder to debug.
3.1.5 Architecture and Chapter Organization
The components of Λ∘𝜆 are arranged in a few main layers, and the remainder of the chapter
is organized correspondingly. From the bottom up, the layers are:
Integer layer (section 3.2): This layer contains abstract interfaces and implementations for
domains like the integers Z and its quotient rings Z𝑞 = Z/𝑞Z, including specialized
operations like rescaling and “(bit) decomposition.” It also contains tools for working
with moduli and cyclotomic indices at the type level, which enables static enforcement
of mathematical constraints.
Tensor layer (section 3.3 and 3.4): This layer’s main abstract interface, called Tensor,
deﬁnes all the linear transformations and special values needed for working efﬁciently
in cyclotomic rings (building on the framework developed in [LPR13a]), and permits
multiple implementations. This low-level interface is completely hidden from typical
cryptographic applications by the cyclotomic layer (below). These sections describe
the interface and include the deﬁnitions and analysis of several linear transforms and
algorithms that, to our knowledge, have not previously appeared in the literature.
Additionally, section 3.4 describes the “sparse decomposition” DSL and compiler that
underlie our pure-Haskell Tensor implementation.
Cyclotomic layer (section 3.5): This layer deﬁnes data types and high-level interfaces for
cyclotomic rings and their cryptographically relevant operations. Our implementations
are relatively thin wrappers which modularly combine the integer and tensor layers,
43
and automatically manage the internal representations of ring elements for more
efﬁcient operations.
Cryptography layer: This layer consists of implementations of cryptographic schemes.
We defer our main application to chapter 4, which uses Λ∘ 𝜆 to implement a full-
featured somewhat-homomorphic encryption scheme. We expand this layer with a
second application in chapter 6.
Acknowledgments. We thank the anonymous CCS’16 reviewers for many useful com-
ments.
3.2
Integer and Modular Arithmetic
At its core, lattice-based cryptography is built around arithmetic in the ring of integers Z
and quotient rings Z𝑞 = Z/𝑞Z of integers modulo 𝑞. In addition, a variety of specialized
operations are also widely used, e.g., lifting a coset in Z𝑞 to its smallest representative in Z,
rescaling (or rounding) one quotient ring Z𝑞 to another, and decomposing a Z𝑞-element as a
vector of small Z-elements with respect to a “gadget” vector.
Here we recall the relevant mathematical background for all these domains and opera-
tions, and describe how they are represented and implemented in Λ∘𝜆. This will provide
a foundation for the next section, where we show how all these operations are very easily
“promoted” from base rings like Z and Z𝑞 to cyclotomic rings, to support ring-based cryp-
tosystems. (Similar promotions can also easily be done to support cryptosystems based
on plain-LWE, but we elect not to do so in Λ∘𝜆, mainly because those systems are not as
practically efﬁcient.)
3.2.1 Representing Z and Z𝑞
We exclusively use ﬁxed-precision primitive Haskell types like Int and Int64 to represent
the integers Z, and deﬁne our own specialized types like ZqBasic q z to represent Z𝑞. Here
44
the q parameter is a “phantom” type that represents the value of the modulus 𝑞, while z is an
integer type (like Int64) specifying the underlying representation of the integer residues
modulo 𝑞.
This approach has many advantages: by deﬁning ZqBasic q z as an instance of Ring,
we can use the (+) and (*) operators without any explicit modular reductions. More
importantly, at compile time the type system disallows operations on incompatible types—
e.g., attempting to add a ZqBasic q1 z to a ZqBasic q2 z for distinct q1, q2—with no
runtime overhead. Finally, we implement ZqBasic q z as a newtype for z, which means
that they have identical runtime representations, with no additional overhead.
CRT/RNS representation. Some applications, like homomorphic encryption, can require
moduli 𝑞 that are too large for standard ﬁxed-precision integer types. Many languages
have support for unbounded integers (e.g., Haskell’s Integer type), but the operations are
relatively slow. Moreover, the values have varying sizes, which means they cannot be stored
efﬁciently in “unboxed” form in arrays. A standard solution is to use the Chinese Remainder
Theorem (CRT), also known as Residue Number System (RNS), representation: choose 𝑞
to be the product of several pairwise coprime and sufﬁciently small 𝑞1, . . . , 𝑞𝑡, and use the
natural ring isomorphism from Z𝑞 to the product ring Z𝑞1 × ··· × Z𝑞𝑡, where addition and
multiplication are both component-wise.
In Haskell, using the CRT representation—and more generally, working in product