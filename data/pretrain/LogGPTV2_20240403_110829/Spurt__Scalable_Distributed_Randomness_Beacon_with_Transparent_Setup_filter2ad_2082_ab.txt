t
c
i
d
e
r
p
n
U





e
c
n
a
t
s
i
s
e
r
-
s
a
i
B
n
o
i
t
a
c
i
n
u
m
m
o
C
)
l
a
t
o
t
(
t
s
o
C
n
o
i
t
a
c
ﬁ
i
r
e
V
c
i
l
b
u
P
y
t
i
x
e
l
p
m
o
C
n
o
i
t
a
t
u
p
m
o
C
y
t
i
x
e
l
p
m
o
C
c
i
h
p
a
r
g
o
t
p
y
r
C
s
e
v
i
t
i
m
i
r
P
r
o
n
o
i
t
a
z
i
l
a
i
t
i
n
I
n
o
i
t
p
m
u
s
s
A
p
u
t
e
S
O(n)
O(λn2)

O(1)
 O(λc2 log n) O(c2 log n) O(1)

O(1)

O(1)

O(n)
O(λn2)
O(λn2)
O(λn4)
O(n)
O(n)
O(n)
Uniq. th-sig.
PVSS & CoSi
Uniq. th-sig.
Uniq. th-sig.
Partial HE
Trusted
DKG
DKG
DKG
DKG
Ω(t)
Ω(t)






O(λcn)
O(λn)
O(λn4)
O(λn4)
t + 1  O(λn2 log n)
t + 1 
t + 1 

O(λn2)
O(λn2)
O(λn3)

O(c)
very high
O(n3)
O(n2)
O(n)
VDF
O(n2)
O(n2)
O(1)
O(1)
O(n3)
O(n2)
O(n)
O(1)
O(n2)
O(n2)
VRF
Hash func.
PVSS
PVSS
PVSS
VDF
PVSS
VSS
CRS & PKI
CRS
CRS & PKI
CRS & PKI
CRS & PKI
CRS & PKI
q−SDH & PKI
q−SDH & PKI
CRS & PKI
1/3
partial sync.
SPURT
∗ RandHerd uses RandHound as a one-time setup phase. RandHound is
driven by a leader node and hence its liveness requires the leader to
be honest. As presented, RandHerd is biasable and needs additional
techniques to be unbiasable.




O(n)
O(n)
PVSS & Pairing
O(λn2)
‡ Algorand and Randherd use a randomly sampled committee of size c
to run the protocol. This is an orthogonal technique and can be applied
to most other protocols in the table to improve scalability at the cost
of a slightly reduced fault tolerance.
running the protocol. A recent work Hydrand [65] reduces the
communication cost to O(λn2 log n) but offers poor unpre-
dictability, even against a semi-honest adversary. Very recently,
a concurrent work Brandpiper [13] improves upon Hydrand to
provide perfect unpredictability and increased fault tolerance.
As a trade-off, it incurs O(λn3) worst-case communication
cost and makes the q-SDH assumption, which either requires
a trusted setup or a secure multi-party computation protocol
to generate public parameters.
Furthermore, all existing protocols without trusted setup rely
on synchronous networks that assume a known upper bound
on the network delay. If the delay assumption is violated, these
protocols will fail to provide the desired security properties.
They are hence less robust in wide area networks. Another ad-
vantage of a partially synchronous protocol over a synchronous
one is that such protocol can be made responsive [60], i.e.,
they can generate beacons at the rate of true network speed,
as opposed to some pre-determined conservative parameters.
We summarize existing works in Table I and will provide
more details about each protocol in §VIII.
Our results. In this paper, we design SPURT, a distributed
random beacon protocol that does not require any trusted
or expensive setup. SPURT guarantees unpredictability, bias-
resistance, availability, and public veriﬁability in a partially
synchronous network [34] against a malicious adversary that
controls up to one-third of the nodes. In a network of n
nodes, SPURT’s amortized communication cost per beacon
output (across all nodes) is O(λn2) where λ is a security
parameter representing the size of group elements. Each node
in SPURT performs O(n) group exponentiation per beacon
output. Furthermore, SPURT is responsive [60], i.e., it can
produce beacon outputs at the actual speed of the network,
as opposed to any pre-determined conservative parameters.
With these properties, we believe SPURT has good scalability
and is suitable for applications with a large number of nodes
deployed globally across the Internet (possibly by combining
with the sampling technique).
While designing SPURT, we also design a new publicly
veriﬁable secret sharing (PVSS) scheme whose security relies
on the standard Decisional Bilinear Difﬁe-Hellman (DBDH)
assumption [17] and does not require a Random Oracle. This
result can be of independent interests.
We implement SPURT in Golang and evaluate it with up to
128 geographically distributed nodes. We compare with recent
works Hydrand [65] and Drand [2] in terms of throughput
and network bandwidth usage. Note that Hydrand provides
poor unpredictability, and Drand requires a DKG setup. Our
evaluation illustrates that SPURT can generate beacon outputs
at a rate comparable to or better than Drand and Hydrand.
For example, with 32 nodes, SPURT can generate 84 beacon
outputs every minute, which is approximately 1.1× and 3.5×
higher than Drand and Hydrand, respectively. SPURT has
a network bandwidth cost of 35 Kilobytes with 32 nodes,
which is approximately 5× higher than Drand and is 55%
of Hydrand.
Paper organization. The rest of the paper is organized as
follows. We describe the system model and an overview of
SPURT in §II. In §III, we give preliminaries and notations.
We then provide details of our new PVSS scheme in §IV. We
describe SPURT in detail in §V and analyze its security and
complexity in §VI. We present our prototype implementation
and evaluation results in §VII. We describe related work in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
22503
detail in §VIII and conclude with a discussion in §IX.
II. SYSTEM MODEL AND OVERVIEW OF SPURT
In this section, we describe our system model and provide
an overview of SPURT.
A. System Model
We consider a network of n nodes connected via pair-wise
authenticated channels. We assume that at most t  i, for all PPT