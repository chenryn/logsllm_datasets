### System Model and Overview of SPURT

#### A. System Model
We consider a network consisting of \( n \) nodes, each connected via pairwise authenticated channels. We assume that at most \( t < \frac{n}{3} \) nodes are controlled by a malicious adversary. This model ensures that the adversary cannot control more than one-third of the nodes, which is a common assumption in Byzantine fault-tolerant systems.

#### B. Overview of SPURT
In this section, we provide an overview of SPURT, a distributed random beacon protocol designed to operate in a partially synchronous network. SPURT guarantees unpredictability, bias-resistance, availability, and public verifiability against a malicious adversary. The key features of SPURT include:

- **No Trusted or Expensive Setup**: SPURT does not require any trusted or expensive setup, making it suitable for large-scale, decentralized applications.
- **Unpredictability and Bias-Resistance**: SPURT ensures that the random beacon outputs are unpredictable and resistant to bias, even if up to one-third of the nodes are controlled by an adversary.
- **Amortized Communication Cost**: In a network of \( n \) nodes, the amortized communication cost per beacon output is \( O(\lambda n^2) \), where \( \lambda \) is a security parameter representing the size of group elements.
- **Efficient Computation**: Each node in SPURT performs \( O(n) \) group exponentiations per beacon output, ensuring efficient computation.
- **Responsiveness**: SPURT is responsive, meaning it can produce beacon outputs at the actual speed of the network, rather than being constrained by pre-determined conservative parameters.

### Related Protocols and Their Limitations
To better understand the advantages of SPURT, we compare it with existing protocols such as RandHound, Algorand, Hydrand, and Brandpiper.

- **RandHound**: Uses a leader node to drive the protocol, which requires the leader to be honest. As presented, RandHound is biasable and needs additional techniques to become unbiasable.
- **Algorand and Randherd**: Use a randomly sampled committee of size \( c \) to run the protocol, improving scalability but reducing fault tolerance slightly.
- **Hydrand**: Reduces the communication cost to \( O(\lambda n^2 \log n) \) but offers poor unpredictability, even against a semi-honest adversary.
- **Brandpiper**: Improves upon Hydrand to provide perfect unpredictability and increased fault tolerance but incurs a higher worst-case communication cost of \( O(\lambda n^3) \) and relies on the q-SDH assumption, which requires a trusted setup or secure multi-party computation.

### Evaluation
We implemented SPURT in Golang and evaluated its performance with up to 128 geographically distributed nodes. Our evaluation compared SPURT with recent works such as Hydrand and Drand in terms of throughput and network bandwidth usage.

- **Throughput**: With 32 nodes, SPURT can generate 84 beacon outputs every minute, which is approximately 1.1× and 3.5× higher than Drand and Hydrand, respectively.
- **Network Bandwidth**: SPURT has a network bandwidth cost of 35 Kilobytes with 32 nodes, which is approximately 5× higher than Drand but only 55% of Hydrand.

### Paper Organization
The rest of the paper is organized as follows:
- **§II**: System model and overview of SPURT.
- **§III**: Preliminaries and notations.
- **§IV**: Details of our new PVSS scheme.
- **§V**: Detailed description of SPURT.
- **§VI**: Security and complexity analysis.
- **§VII**: Prototype implementation and evaluation results.
- **§VIII**: Related work.
- **§IX**: Conclusion and discussion.

This structured approach provides a comprehensive understanding of SPURT's design, implementation, and performance, highlighting its suitability for large-scale, globally distributed applications.