### 4.2 Technical Intuitions

Our primary intuition is that by recursively identifying and then sifting through the row and column mappings between matrices \( A' \) and \( B \), we can accurately recover the underlying keywords of the query tokens and the correspondence between known documents and encrypted documents.

#### Key Observations
1. **Unique Document Correspondence**: Each encrypted document uniquely corresponds to a (plaintext) document. This means there exists a subset \( S_{\text{col}} \subset \{ed_1, \ldots, ed_n\} \) such that \( \{\pi_1(d_{y_1}), \ldots, \pi_1(d_{yn'})\} = S_{\text{col}} \), where \( \pi_1 \) is a mapping function. Therefore, for each column of \( A' \), there must exist a "matching" column in \( B \).

2. **Unique Query Token Correspondence**: Each query token uniquely corresponds to a keyword. There exists a subset \( S_{\text{row}} \subset \{q_1, \ldots, q_m\} \) such that \( \{\pi_2(w_{x_1}), \ldots, \pi_2(w_{xm'})\} = S_{\text{row}} \), where \( \pi_2 \) is a mapping function. Hence, for each row of \( A' \), there exists a "matching" row in \( B \).

The goal of LEAP is thus reduced to finding the column and row mappings between \( B \) and \( A' \).

#### Column-Sum and Row-Sum Analysis
- The column-sum of \( B \) captures the number of query tokens attached to an encrypted document \( ed_j \).
- The column-sum of \( A' \) captures the number of keywords that appear in a document \( d_{yj} \).

Since \( A' \) has fewer columns than \( B \), matching rows directly by unique row-sums is not feasible. For example, if the row-sum of \( B \) for \( q_4 \) is \( z \) and this value is unique, and there is a unique row-sum of \( A' \) equal to \( z \), one cannot conclude that \( w_{x5} \) is the underlying keyword of \( q_4 \) because the true value of the row-sum may exceed \( z \) due to missing documents containing \( w_{x5} \).

Instead, we map the columns between \( B \) and \( A' \) by finding unique column-sum mappings. From the encrypted documents and attached query tokens, we derive \( m \) distinct query tokens, each corresponding to a unique keyword. Let \( \{w_{xm'+1}, \ldots, w_{xm''}\} = \{w_1, \ldots, w_m\} - \{w_{x1}, \ldots, w_{xm'}\} \) be the keywords not appearing in the partially-known document set \( F' \). We extend the \( m' \times n' \) matrix \( A' \) to a new \( m \times n' \) matrix \( A'' \) by setting \( A''_{i,j} = 0 \) for \( i \in \{m' + 1, \ldots, m''\} \) and \( j \in \{1, \ldots, n'\} \).

#### Methods for Finding Mappings

1. **Method 1: Unique Column-Sum Mappings**
   - Since the number of rows in \( A'' \) equals the number of rows in \( B \), we find unique column-sum mappings as follows: for each unique column-sum \( \text{column}_j \) in \( B \), if there is a matching column-sum in \( A'' \), we conclude that \( ed_j \) is the encrypted version of \( d_{yj'} \).

2. **Method 2: Using Occurrence Matrices**
   - Given known column mappings, we use the \( n \times n \) ed-occurrence matrix \( M \) and the \( n' \times n' \) d-occurrence matrix \( M' \) to find additional column mappings. The algorithm leverages the fact that \( M_{i,j} = M'_{i',j'} \) if \( ed_i \) is the encrypted version of \( d_{yi'} \) and \( ed_j \) is the encrypted version of \( d_{yj'} \). For a known mapping \( (ed_k, d_{yk'}) \) and an unmapped \( d_{yj'} \), we find a new mapping \( (ed_j, d_{yj'}) \) if there is only one \( ed_j \) satisfying \( M_{j,k} = M'_{j',k'} \) and the column-sums match.

3. **Method 3: Finding (q, w) Mappings**
   - Given known \( (ed, d) \) mappings, this method finds \( (q, w) \) mappings. Let \( S_c = \{(ed_{j1}, d_{yj'1}), \ldots, (ed_{jt}, d_{yj't})\} \) be the set of known mappings. We define the \( S_c \)-column-mapped submatrix pair \( (B_c, A''_c) \) from \( (B, A'') \). If any row \( i \) of \( B_c \) is unique among all rows of \( B_c \), and there is a matching row \( i' \) in \( A''_c \), we conclude that the underlying keyword of \( q_i \) is \( w_{i'} \).

4. **Method 4: Dual to Method 3**
   - Given known \( (q, w) \) mappings, this method finds one or more \( (ed, d) \) mappings. Let \( S_r = \{(q_{i1}, w_{xi'1}), \ldots, (q_{it}, w_{xi't})\} \) be the set of known mappings. We define the \( S_r \)-row-mapped submatrix pair \( (B_r, A''_r) \) from \( (B, A'') \). If any row \( i \) of \( B_r \) is unique among all rows of \( B_r \), and there is a matching row \( i' \) in \( A''_r \), we conclude that the encrypted document \( ed_i \) corresponds to the plaintext document \( d_{i'} \).

These methods collectively enable LEAP to accurately recover the underlying keywords and document correspondences.