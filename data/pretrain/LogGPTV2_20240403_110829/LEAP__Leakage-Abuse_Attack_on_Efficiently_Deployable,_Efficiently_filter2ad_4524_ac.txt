· · ·
· · ·
· · ·
· · ·
q1
q2
...
qm
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
where Bi,j is 1 if qi is attached to edj for i ∈ [m] and j ∈ [n], and 0
otherwise.
In addition, the attacker can obtain the following n × n ed-
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(6)
(5)
occurrence matrix M:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
ed1
ed2
ed1 M1,1 M1,2
ed2 M2,1 M2,2
...
...
edn Mn,1 Mn,2
...
· · ·
edn
· · · M1,n
· · · M2,n
· · ·
...
· · · Mn,n
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45),
(7)
where Mi,j is the number of query tokens that are attached to both
edi and edj for i, j ∈ [n].
4.2 Technical Intuitions
Our main intuition is that by recursively finding and then sifting
the row and column mappings between A′ and B, we can accurately
recover the underlying keywords of the query tokens as well as the
correspondence between the known documents and the encrypted
documents. First observe that each encrypted document uniquely
corresponds to a (plaintext) document. That is, there exists a subset
Scol ⊂ {ed1, ...,edn} such that {π1 (dy1 ), ...,π1 (dyn′ )} = Scol , where
π1 is a function. Hence, for each column of A′, there must exist
a “matching” column in B 1. Similarly, note that each query token
uniquely corresponds to a keyword. That is, there exists a sub-
set Srow ⊂ {q1, ...,qm} such that {π2(wx1 ), ...,π2(wxm′ )} = Srow ,
where π2 is a function. Hence, for each row of A′, there exists a
“matching” row in B 2. Naturally, the goal of LEAP is reduced to
finding the column mapping and row mapping between B and A′.
Now recall the meaning of column-sum and row-sum of B and
A′ defined in Section 2. The columnj-sum of B captures the number
of query tokens that are attached to encrypted document edj. The
columnj-sum of A′ captures the number of keywords that appear in
document dyj
. Clearly, one cannot simply match the rows between
B and A′ by finding unique row-sum mappings between them since
A′ has fewer columns than B. For example, suppose that row4-sum
of B is z, and this value is unique among all row-sums of B. Further
assume that there exists a unique row5-sum of A′ equal to z. One
cannot conclude that wx5 is the underlying keyword of q4. This is
because the true value of row5-sum may exceed z, since the missing
documents may also contain wx5.
Instead, we map the columns between B and A′ by finding
unique column-sum mappings between them. From the encrypted
documents and the attached query tokens stored on the server,
we can derive m distinct query tokens. Since each query token
uniquely corresponds to a keyword, we know that there are to-
tally m keywords corresponding to the full document set (i.e., F).
Let {wxm′+1 , ...,wxm
′′ } = {w1, ...,wm} − {wx1 , ...,wxm′} be the key-
words that do not appear in the partially-known document set F′
(where F′ = {dy1 , ...,dyn′}); in other words, {wxm′+1 , ...,wxm
′′ } are
unknown to the attacker. We can extend the m′ × n′ matrix A′ to a
new m × n′ matrix A′′ by setting A′′
= 0 for i ∈ {m′ + 1, ...,m
′′}
i,j
and j ∈ {1, ...,n′} as follows:
,
′′
′′
′′
(8)
A′′
m
A′′
m
A′′
m
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
...
,1 = 0
· · ·
· · ·
· · ·
· · ·
· · ·
· · · A′′
· · ·
· · ·
dy2
A′′
1,2
A′′
2,2
...
A′′
m′,2
m′+1,2 = 0
dyn′
A′′
1,n′
A′′
2,n′
...
A′′
m′,n′
m′+1,n′ = 0
dy1
A′′
1,1
A′′
2,1
...
A′′
m′,1
A′′
m′+1,1 = 0 A′′
...
,n′ = 0
be a document associated with columnj of A′′, wxi
wx1
wx2
...
wxm′
wxm′+1
...
...
,2 = 0
′′
wxm
Let dyj
be a
keyword associated with rowi of A′′.
For the relationship of A′′ and B, we have {π1 (dy1 ), ...,π1(dyn′ )} ⊂
{ed1, ...,edn} and {π2(wx1 ), ...,π2(wxm′′ )} = {q1, ..., qm}. The goal
of LEAP is now reduced to the task of finding as many unique row
mappings and unique column mappings as possible between B and
A′′.
In more details, LEAP utilizes the following methods to find
unique row mappings and unique column mappings between B
and A′′.
1Here, “matching” denotes that for the document d corresponding to a particular
column of A′, there exists an encrypted document ed corresponding to a particular
column in B such that π1 (d ) = ed.
2Here, “matching” denotes that for the keyword w corresponding to a particular row
of A′, there exists a query token q corresponding to a particular row in B such that
π2 (w ) = q.
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2311• Method 1. Since the number of rows in A′′ equals the number
of rows in B, we can find unique column-sum mappings between
B and A′′ as follows: for each columnj-sum of B that is unique
among {columnj-sum of B}j∈[n], if we can find a columnj′-sum
of A′′ which equals the columnj-sum of B, then we can conclude
that edj is the encrypted version of dyj′ .
• Method 2. Given known column mappings, we employ n × n
ed-occurrence matrix M and n′ × n′ d-occurrence matrix M′ to
find the column mappings between B and A′′ that cannot be
mapped via unique column-sum as described in Method 1. The
detailed algorithm of this method is shown in Algorithm 1. The
intuition behind this algorithm is described as follows. For the
relationship between M and M′, Mi,j equals M′
i′,j′ if edi is the
encrypted version of dyi′ and edj is the encrypted version of
dyj′ . For a known mapping (edk ,dyk′ ) and a (unmapped) dyj′ ,
we can obtain a new mapping (edj ,dyj′ ) if there exists only one
edj satisfying Mj,k = M′
j′,k′ and columnj′-sum of A′′ equals
columnj-sum of B.
• Method 3. Given known (ed,d ) mappings, this method aims
to find (q,w ) mappings. Without loss of generality, let Sc =
{(edj1 ,dyj′1
)} be the set of (ed,d ) mappings that
have been found, where {j1, ..., jt} ⊂ [n] and {yj′
} ⊆
1 , ...,yj′
[n′]. We define Sc -column-mapped submatrix pair (Bc ,A′′
c ) from
(B,A′′) as follows.
Let Bc be a submatrix of B with a rearranged column order as:
), ..., (edjt ,dyj′
t
t
and let A′′
as:
c be a submatrix of A′′ with a rearranged column order
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
q1
q2
...
qm
w1
w2
...
wm
edj1
B1,j1
B2,j1
...
edj2
B1,j2
B2,j2
...
Bm,j1 Bm,j2
dyj′1
A′′
1,j′
A′′
1
2,j′
1
...
A′′
m,j′
1
dyj′2
A′′
1,j′
A′′
2
2,j′
2
...
A′′
m,j′
2
· · ·
· · ·
· · ·
· · ·
· · ·
edjt
B1,jt
B2,jt
...
Bm,jt
t
· · ·
dyj′
t
· · · A′′
1,j′
· · · A′′
2,j′
· · ·
...
· · · A′′
m,j′
t
t
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45).
(cid:43)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:47)(cid:45).
1
).
,dyj′
2
, ...,dyj′
t
Note that the columns in Bc are arranged according to the order
of (edj1 ,edj2 , ...,edjt ), while the columns in A′′
c are arranged
according to the order of (dyj′
If any rowi of Bc is unique among all rows of Bc, then rowi of
B is unique among all rows of B. The same applies to the case
of A′′
c and A′′. Hence, for each rowi of Bc whose bit-string is
unique among all rows of Bc, if there exists a rowi′ of A′′
c whose
bit-string is the same as the bit-string of rowi of Bc, then we can
conclude that the underlying keyword of qi is wi′.
• Method 4. This method is dual to Method 3. Given known (q,w )
mappings, this method is used to find one or more (ed,d ) map-
pings. Without loss of generality, let Sr = {(qi1 ,wxi′1
), ..., (qit ,wxi′
t
be the set of (q,w ) mappings that have been recovered, where
{i1, ...,it ,i′
t} ⊆ [m]. We define Sr -row-mapped submatrix
pair (Br ,A′′
1, ...,i′
r ) from (B,A′′) as follows:
Br is a submatrix of B with a rearranged row order as:
and let A′′
r be a submatrix of A′′ with a rearranged row order as:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
qi1
qi2
...