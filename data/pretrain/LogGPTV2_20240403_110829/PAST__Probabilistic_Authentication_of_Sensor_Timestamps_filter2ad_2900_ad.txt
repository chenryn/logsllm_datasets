plots show the certainty of timestamp veriﬁ-
cation as 3, 4 or 5 witnesses are included in
each PAST block.
Figure 5. The x and y axes have the same se-
mantics as in Figure 4. Each PAST block con-
tains 7 witnesses. The threshold for validat-
ing a block’s timestamp is varied from 1 to 5
witnesses.
4.2. Node Compromise
closest base station that acts as a gateway. The second is
the link between the gateway and the base station acting
as a notary. The third is between the notary and the stor-
age server. A PAST block includes a hash of the readings
which serves as an integrity check. Except for the source
and destination address, the rest of the block is encrypted.
Thus, the integrity and conﬁdentiality of the data is assured
during the ﬁrst two links, from the sensor through the gate-
way to the notary. Once a notary validates a PAST block,
it encrypts the data with the storage server’s public key and
signs the result with its own key. Therefore the conﬁden-
tiality, integrity and authenticity are ensured over the third
link.
Base stations are assumed to have sufﬁcient storage to
buffer and retransmit data. Therefore an adversary that in-
terferes with the second and third network link will only
slow data transmission, not halt it. However, the ﬁrst link is
more vulnerable to attack. This is because the sensor must
complete the transmission of a PAST block within a lim-
ited period of time. After that, it will either have to stop
sampling the physical environment since it will not have
sufﬁcient memory to store new readings, or it will have to
discard the PAST block. This problem can be addressed by
splitting the memory between a current PAST block and one
that is in the process of being transmitted. While this will
double the metadata overhead, it will provide the sensor a
large window of time within which it can retransmit the pre-
vious PAST block if an adversary is jamming the network
link to the gateway.
Since sensors and base stations are deployed in the ﬁeld,
an adversary may gain complete control over some of them.
Once a sensor is compromised, it can be made to generate
readings of an adversary’s choosing. If the readings have
fraudulent timestamps claiming they were generated in an
earlier time period, PAST can detect this. This is ensured by
evolving the authenticating witnesses with a one-way func-
tion each time a new PAST block is constructed. Similarly,
when a base station is compromised, an adversary is limited
because of the use of a forward-secure digital signature ap-
plied to all data sent to the storage server. If new data with
old timestamps is sent, the inconsistency will be detected.
PAST distributes the attestation operations among multi-
ple nodes. This allows it to tolerate the subversion of a frac-
tion of the deployed base stations. As the fraction of com-
promised base stations in the network increases, the prob-
ability that a designated notary will choose not to validate
a legitimate witness increases. This is depicted in Figure 4,
where at least 2 witnesses must provide valid attestations for
the timestamp to be accepted. The number of witnesses in-
cluded in each PAST block is varied from 3 to 5. Each curve
is associated with a different number of witnesses present
in a PAST block. When the block contains more witnesses,
there is a greater likelihood of ﬁnding 2 that are associated
with uncompromised notaries that will validate them. This
can be seen in Figure 4 since the plot for a witness count
of 5 has uniformly higher certainty than the one where the
witness count is 4 (and similarly the plot for 4 has higher
certainties than the one for 3). Even with 35% of the net-
work’s base stations compromised, the timestamps can be
validated with 96% probability using just 5 witnesses per
PAST block, as can be seen from Figure 4.
The threshold for validating a block’s timestamp is the
number of witnesses that must be veriﬁed before it can be
certiﬁed. In principle, a threshold of 1 should sufﬁce since
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:52 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Storage overhead directly translates to power consumption
since the metadata must be transmitted and communication
requires a sensor to operate at its peak power level. PAST’s
utility derives from the fact that PAST imposes a small over-
head while providing a high level of certainty in the sensor’s
timestamps.
4.3. Sybil Attack
To avoid a central point of failure, a protocol may re-
quire multiple nodes to participate. A Sybil attack [5] works
around this by masquerading a single node as a set. The pro-
tocol can then be made to fail since the nodes it relies on are
not independent and distinct. Such an attack is of particu-
lar signiﬁcance in sensor network settings. The reason is
that it is common for each sensor to be in communication
range of a single base station. In such a case, when a sensor
attempts to communicate with other nodes in the network,
the gateway can effect a Sybil attack. It can masquerade
as any remote node since all network trafﬁc to and from
the sensor passes through that gateway. PAST speciﬁcally
guards against such attacks. All sensor output is encrypted
using a key that is not known to the gateway. This prevents
the gateway from masquerading as the originating sensor.
A different key is used to encrypt a sensor’s communica-
tion with distinct base stations. This prevents a notary from
masquerading as a sensor.
5. Related Work
Bellare and Miner introduced the idea of forward-secure
signatures in 1999 [2]. Przydatek, Song and Perrig subse-
quently framed the problem in the context of sensor net-
works [13]. As part of their work on secure information
aggregation in 2004, they proposed the following scheme.
Each sensor shares a key with a base station. The data gen-
erated by the sensor is hashed using this key. After a prede-
ﬁned period of time passes, a new shared key is computed
by hashing the old one which subsequently discarded. The
same operation is simultaneously performed on the sensor
and the base station. When data from the nth epoch needs
to be authenticated, the nth key is needed. Assuming the
current epoch is later than the nth epoch, there is no way
to retrieve the earlier key. Therefore the veriﬁer must be
provisioned with the initial key and they must compose the
hash function n times to derive the nth key from the ﬁrst.
Since sensors are deployed in the ﬁeld for long periods, n
can grow large. Performing n hashes to verify each read-
ing becomes expensive, making the scheme computation-
ally unscalable. Alternatively, the veriﬁer can pre-compute
and store the composed hashes. However, this makes the
scheme unscalable in terms of space usage. The paper ac-
knowledges the scheme’s deﬁciency and leaves its resolu-
tion as an open problem. PAST uses a small constant num-
ber of hashes to verify a single reading. This makes it scal-
able in terms of both time and space, at the cost of a small
reduction in the probability of veriﬁcation. Further, PAST
does not rely on synchronized clocks.
Figure 6. The storage overhead is plotted as a
function of the number of witnesses included
in a PAST block.
forging even a single witness would require computing the
preimage of the hash function’s output. However, the MAC
used in TinySec is 32 bits [9] since it must be computed
on a sensor. An adversary that compromises a sensor could
send a stream of PAST blocks that are identical except for
the use of differing values for the witnesses. In this manner,
they could reduce the difﬁculty of computing a valid preim-
age. For example, if 256 variations of a PAST block are
sent, then the complexity of forging a witness would drop
to 232−8 = 224. If the threshold for accepting a timestamp
is increased to 2 witnesses, then this attack’s complexity
increases quadratically. Thus, using a higher threshold is
warranted when more assurance is required.
Figure 4 showed the beneﬁt of increasing the number of
available witnesses with a ﬁxed threshold. In Figure 5, the
PAST block is provisioned with 7 witnesses. The threshold
is varied from 1 to 5. As the standard for validating a block
is increased, there is a decrease in the certainty with which
the timestamp can be certiﬁed. The curve for a threshold of
1 has the highest certainty, while the curve for a threshold
of 5 has the lowest. Timestamps can be validated with high
probability even if a stringent threshold is mandated. As
seen in Figure 5, when 35% of the network’s base stations
are compromised and 4 witnesses must be veriﬁed out of 7
in a PAST block, the timestamp can still be validated with
96% probability.
The size of the memory in a sensor bounds the num-
ber of readings that can be buffered. As a result, there
is a limit to the extent to which the storage overhead of
the witnesses can be amortized by batching readings to-
gether.
In the case of the MICA mote, the memory size
is 512KB. A witness would be implemented using a Tiny-
Sec MAC which is 4 bytes long [9] and the associated no-
tary would be represented using a 2 byte TinySec address.
As shown in Figure 6, PAST uses very little storage over-
If we used 7
head for reasonable numbers of witnesses.
witnesses to achieve the assurance of Figure 5, the storage
overhead would be 0.01%. If a 100 witnesses were included
in each PAST block, the storage overhead would be 0.11%.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:52 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Subsequent work on providing forward-secure authenti-
cation and secrecy focused on the problem of managing the
keys [12]. It used the same hash chaining scheme as above.
However, the ﬁrst key is split using a polynomial-based se-
cret sharing scheme. The pieces are then either distributed
among the neighboring nodes of either a sensor or a data
aggregation node. When a piece of sensor data is to be veri-
ﬁed, a request goes to its source which then reconstitutes the
ﬁrst key. This is then used to compose the hash function n
times if the data was the nth reading and verify the value’s
integrity. The advantage of this scheme over previous work
is that the veriﬁer does not need to store and manage the
keys used for checking sensors’ output. Since nodes in the
ﬁeld have limited storage, composed values of the keys can
not be stored. Therefore, this scheme must also rely on n
hash compositions to verify the nth reading. (PAST only
needs to perform a small constant number of operations to
verify a reading, rather than an unbounded sequence.) In
addition, an adversary can use their veriﬁcation protocol to
force a node to reconstitute the ﬁrst key at a time of the
adversary’s choosing. Since the nodes are deployed in the
ﬁeld, the adversary can subvert it at this point and get the
ﬁrst key. With this, they can forge past sensor data. PAST is
not susceptible to such an attack since it does not store the
original key indeﬁnitely. Speciﬁcally, it is discarded after
the ﬁrst few sensor readings are generated.
6. Conclusion
We have described PAST, a probabilistic protocol for
timestamping sensor data.
It provides forward-secure
timestamp authentication when sensor and base station
cryptographic keys are compromised.
It only requires a
small constant number of operations to verify a reading.
This improves over previous forward-secure sensor network
protocols which required O(n) hashes to verify the nth
reading in the data stream. Unlike previous schemes, PAST
does not rely on synchronized clocks.
PAST ensures that the data stream generated by a sensor
is distributed through multiple nodes in the network to avoid
a central point of failure. It also prevents an adversary from
gaining any information about earlier witnesses if a sensor
is compromised. PAST provides a high level of conﬁdence
in the timestamps’ validity while imposing a low storage
and power consumption overhead.
References
[1] http://www.ibm.com/security/cryptocards/
[2] Mihir Bellare and Sarah Miner, A Forward-Secure
Digital Signature Scheme, Advances in Cryptology,
Lecture Notes in Computer Science 1666, 1999.
[3] http://www.intrinsyc.com/products/cerfcube/
[4] http://www.cyberﬂex.com
[5] John Douceur, The Sybil Attack, Proceedings of
the 1st International Workshop Peer-to-Peer Systems,
2002.
[6] Vipul Gupta, Matthew Millard, Stephen Fung, Yu
Zhu, Nils Gura, Hans Eberle and Sheueling Chang
Shantz, Sizzle: A Standards-Based End-to-End Secu-
rity Architecture for the Embedded Internet, Proceed-
ings of the 3rd IEEE International Conference on Per-
vasive Computing and Communications, 2005.
[7] Mike Horton, David Culler, Kris Pister, Jason Hill,
Robert Szewczyk and Alec Woo, MICA - The Com-
mercialization of Microsensor Motes, Sensors, 19(4),
2002.
[8] Gene Itkis and Leonid Reyzin, SiBIR: Signer-Base
Intrusion-Resilient Signatures, Advances in Cryptol-
ogy, Lecture Notes in Computer Science 2442, 2002.
[9] Chris Karlof, Naveen Sastry and David Wagner, Tiny-
Sec: A Link Layer Security Architecture for Wireless
Sensor Networks, Proceedings of the 2nd ACM Con-
ference on Embedded Networked Sensor Systems,
2004.
[10] Alan Mainwaring, Joseph Polastre, Robert Szewczyk,
David Culler and John Anderson, Wireless Sensor
Networks for Habitat Monitoring, ACM International
Workshop on Wireless Sensor Networks and Applica-
tions, 2002.
[11] David Malan, Crypto for Tiny Objects, Harvard Uni-
versity Technical Report TR-04-04, 2004.
[12] Yi Ouyang, Zhengyi Le, James Ford and Fillia Make-
don, Local Data Protection for In-Network Processing
in Sensor Networks, IEEE International Conference
on Pervasive Services, 2005.
[13] Bartosz Przydatek, Dawn Song and Adrian Perrig,
SIA: Secure Information Aggregation in Sensor Net-
works, Proceedings of the ACM Conference on Em-
bedded Networked Sensor Systems, 2003.
[14] Michael Rabin, Digital signatures and public-key
functions as intractable as factorization, MIT Techni-
cal Report TR-212, 1979.
[15] A. Shamir, Identity-based cryptosystems and signa-
ture schemes, Advances in Cryptology, Lecture Notes
in Computer Science 196, 1984.
[16] Ronald J. Watro, Derrick Kong, Sue-fen Cuti, Charles
Gardiner, Charles Lynn and Peter Kruus, TinyPK: se-
curing sensor networks with public key technology,
Proceedings of the 2nd ACM Workshop on Security
of Ad hoc and Sensor Networks, 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:52 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006