p₀.x - x > 0 ┊  0
),
⋮
∀a ∈ angles: a.x ≠ p0.x ⇒ We end up with two partitions.
3 ┆ Scans: Not Only in the Hills
Scans are a general and expressive computational pattern:
‹agg›(‹e›) OVER (ORDER BY ‹e₁›, …, ‹eₙ›
P─Q─R {RANGE,ROWS} BETWEEN UNBOUNDED PRECEDING
(∅,z,⨁) AND CURRENT ROW)
Available in a variety of forms in programming languages
Haskell: scanl z ⨁ xs, APL: ⨁\xs, Python: accumulate:
scanl ⨁ z [x₁,x₂,…] = [z, z ⨁ x₁, (z ⨁ x₁) ⨁ x₂, …]
In parallel programming: prefix sums (9 Guy Blelloch)
Sorting, lexical analysis, tree operations, reg.exp.
search, drawing operations, image processing, …
4 ┆ Interlude: Quiz
Q: Assume xs ≡ '((b*2)-4×a×c)*0.5'. What is computed below?
SELECT inp.pos, inp.c,
SUM((array[1,-1,0])[COALESCE(p.oc, 3)])
OVER (ORDER BY inp.pos) AS d
FROM unnest(string_to_array(ÅÇ, NULL))
WITH ORDINALITY AS inp(c,pos),
LATERAL (VALUES (array_position(array['(',')'],
inp.c))) AS p(oc)
ORDER BY inp.pos;
# Hint (this is the same query expressed in APL):
xs ← '((b*2)-4×a×c)*0.5'
+\ (1 ¯1 0)['()'⍳xs]
5 ┆ Beyond Aggregation: Window Functions
window function
ᵗʰ/> rows away
3. Row Ranking: assign numeric rank of row in its partition
6 ┆ LAG/LEAD: Access Rows of the Past and Future
Row access at offset ∓‹n›, relative to the current row:
-- evaluate ‹e› áÇ àâ we were
-- ‹n› rows äãåçéã the current row
-- U───────V──────W
LAG(‹e›,‹n›,‹d›) OVER ([ PARTITION BY ‹p₁›,…,‹pₘ› ]
ORDER BY ‹e₁›,…,‹eₙ›
[ ‹frame› ])
Note:
LEAD(‹e›,‹n›,‹d›): ⋯ ‹n› rows after the current row ⋯
Scope is partition—may access rows outside the ‹frame›.
No row at offset ∓‹n› ⇒ return default ‹d›.
LAG/LEAD: Row Offsets ✎
┌───┬───┐ offset
row│ A │ ⋯ │
├───┼───┤╳ OGF❪･,4,‹d›❫ ≡ ‹d› ├ ⁻⁴
ϱ₁│ │ │ ├ ⁻³
ϱ₂│ │ │ OGF❪･,2,･❫ ├ ⁻²
ϱ₃│┈┈┈│┈┈┈│┈┈┐ ├ ⁻¹
ϱ₄│␥␥␥│␥␥␥│ current row ├ ⁰
ϱ₅│ │ │ O;GA❪･,1,･❫ ├ ⁺¹
ϱ₆│┈┈┈│┈┈┈│┈┈┘ ├ ⁺²
ϱ₇│ │ │ ⋱ ├ ⁺³
└───┴───┘ frame
The frame of the current row is irrelevant for LAG/LEAD.
If no default value  given ⇒ return NULL.
/
A March Through the Hills: Ascent or Descent?
SELECT m.x, m.alt,
CASE sign(LEAD(m.alt, 1) OVER rightwards - m.alt)
WHEN -1 THEN 'C' WHEN 1 THEN 'D'
WHEN 0 THEN 'E' ELSE '?'
END AS climb,
LEAD(m.alt, 1) OVER rightwards - m.alt AS "by [m]"
FROM map AS m
WINDOW rightwards AS (ORDER BY m.x) -- marching right
x alt climb by [m]
0 200 E 0
⋮ ⋮ ⋮ ⋮
90 700 D 100
100 800 C −100
110 700 C −200
120 500 ? NULL
/
Crime Scene: Sessionization
A spy broke into the Police HQ computer system. A log
records keyboard activity of user uid at time ts:
Table log
uid ts
! 09-17-2016 07:25:12
! 09-17-2016 07:25:18
" 09-17-2016 08:01:55
" 09-17-2016 08:02:07
" 09-17-2016 08:05GH0
! 09-17-2016 08:05GH9
" 09-17-2016 08:05:46
Q: Can we sessionize the log so that investigators can
identify sessions (≡ streaks of uninterrupted activity)?
/
Sessionization (Query Plan)
1. Cop and spy sessions happen independently (even if
concurrent): partition table log into ! and " rows.
2. Tag keyboard activities (here: !):
t₂ - t₁ ⩽ î ⇒ continue session (tag t₂ with ñ)
UV─W
time
t₁ t₂ t₃ t₄ t₅ t₆ t₇
P───────────Q────────────R
t₆ - t₂ > î ⇒ new session (tag t₆ with L)
3. Scan the tagged table and derive session IDs by
maintaining a runnning sum of start of session tags.
/
Sessionization (Query Plan) ✎
➊ ➋ ➌ ➍
┌───┬──┐ ┌────┬────┐ ┌───┬────┬───┐ ┌───┬──┬───────┐
│uid│ts│ │uid │ ts │ │uid│ ts │sos| │uid│ts│session|
├╌╌╌┼╌╌┤ ├────┼────┤ ├───┼────┼───┤ ├───┼──┼───────┤
│ u₁│t₁│ │ u₁ │ t₁│ │ u₁│ t₁│ 1 │ log start │ u₁│t₁│ 1 │
│ u₁│t₂│ │ u₁ │ t₂│ │ u₁│ t₂│ 0 │ t₆ - t₂ > î │ u₁│t₂│ 1 │
│ u₂│t₃│ │ u₁ │ t₆│ │ u₁│ t₆│ 1 │ ⇒ new session │ u₁│t₆│ 2 │
│ u₂│t₄│ |┈┈┈┈|┈┈┈┈| |┈┈┈|┈┈┈┈|┈┈┈│ |┈┈┈|┈┈|┈┈┈┈┈┈┈│
│ u₂│t₅│ │ u₂ │ t₃│ │ u₂│ t₃│ 1 │ log start │ u₂│t₃│ 1 │
│ u₁│t₆│ │ u₂ │ t₄│ │ u₂│ t₄│ 1 │ │ u₂│t₄│ 2 │
│ u₂│t₇│ | u₂ | t₅| | u₂| t₅| 0 │ t₇ - t₅ ⩽ î | u₂|t₅| 2 │
└───┴──┘ │ u₂ │ t₇│ │ u₂│ t₇│ 0 │ ⇒ continue │ u₂│t₇│ 2 │
└────┴────┘ └───┴────┴───┘ └───┴──┴───────┘
At log start, always begin a new session.
How to assign global session IDs (u₂'s sessions: 3, 4)?
/
Image Compression by Run-Length Encoding
Compress image by identifying pixel runs of the same color:
x → Table çéõúõùûü Table ãù†ç°õùú
1234567 ┌───┬───┬─────┐ ┌─────┬────────┬─────┐
y 1 │ x │ y │pixel| │ run │ length │pixel|
↓ 2 ├╌╌╌┼╌╌╌┼─────┤ ├╌╌╌╌╌┼────────┼─────┤
3 │ 1 │ 1 │ │ │ 1 │ 1 │ │
4 │ 2 │ 1 │ │ │ 2 │ 5 │ │
5 ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊
6 │ 6 │ 6 │ │ │ 12 │ 5 │ │
P─Q─R │ 7 │ 6 │ │ │ 13 │ 1 │ │
run: 5× └───┴───┴─────┘ └─────┴────────┴─────┘
Here: assumes a row-wise linearization of the pixel map.
In b/w images we may omit column pixel in table encoding.
/
Run-Length Encoding (Query Plan) ✎
➊ ➋
┌───┬───┬─────┬───────┐ ┌───┬───┬─────┬───────┬─────────┐
│ x │ y │pixel|change?| │ x │ y │pixel|change?|£ change?|
├╌╌╌┼╌╌╌┼─────┼───────┤ ├╌╌╌┼╌╌╌┼─────┼───────┼─────────┤
│ 1 1 │ │ t ₁ │ │ 1 1 │ │ 1 │ 1 │
│ 2 1 │ │ t ₁ │ │ 2 1 │ │ 1 │ 2 ⎫ │
│ 3 1 │ ≟ │ f ₀ │ │ 3 1 │ │ 0 │ 2 ⎮ │
│ 4 1 │ │ f ₀ │ │ 4 1 │ │ 0 │ 2 ⎬┄┄│┄ run #2 of
│ 5 1 │ │ f ₀ │ │ 5 1 │ │ 0 │ 2 ⎮ │ length 5
│ 6 1 │ │ f ₀ │ │ 6 1 │ │ 0 │ 2 ⎭ │
│ 7 1 │ │ t ₁ │ │ 7 1 │ │ 1 │ 3 │
┊ ⋮ ┊ ⋮ ┊⋮ ┊ ⋮ ⋮ ┊ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊
└───┴───┴─────┴───────┘ └───┴───┴─────┴───────┴─────────┘
➊: LAG(pixel,1,¶ß®©âàß©®): pixel @ (1,1) always “changes.”
➋: SUM() scan of change? may serve as run identifier.
7 ┆ FIRST_VALUE, LAST_VALUE, NTH_VALUE: In-Frame Row Access
Aggregates reduce all rows inside a frame to a single value.
Now for something different:
Positional access to individual rows inside a frame is
provided by three window functions:
-- evaluate expression ‹e› áÇ àâ we were at
-- the first/last/‹n›ᵗʰ row in the frame
-- U───────V────────W
FIRST_VALUE(‹e›) ⎫
LAST_VALUE(‹e›) ⎬ OVER (⋯)
NTH_VALUE(‹e›,‹n›) ⎭
NTH_VALUE(‹e›,‹n›): No ‹n›ᵗʰ row in frame ⇒ return NULL.
In-Frame Row Access ✎
┌───┬───┐
row│ A │ ⋯ │
├───┼───┤ frame in-frame position
ϱ₁│ │ │ ⋰
ϱ₂│┈┈┈│┈┈┈│┈┈┐ NEC¨?OO
└───┴───┘
FIRST_VALUE(‹e›) ≡ NTH_VALUE(‹e›,1).
/
Detecting Landscape Features
peak
<
├ ⁸⁰⁰ᵐ
├ ⁷⁰⁰ᵐ
peak valley ├ ⁶⁰⁰ᵐ
< < ├ ⁵⁰⁰ᵐ
├ ⁴⁰⁰ᵐ
├ ³⁰⁰ᵐ
├ ²⁰⁰ᵐ
x ┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──
₀ₘ ₅₀ₘ ₁₀₀ₘ
Detect features in hilly landscape. Attach label ∈
{peak,valley,-} to every location x.
Feature defined by relative altitude change in vicinity.
/
Detecting Landscape Features (Query Plan)
1. Track relative altitude changes in a sliding x-window
of size 5:
 <   <  <  < µá∂∂©∑ features