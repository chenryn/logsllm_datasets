Delete from 表名;
### 注意事项:
-   删除指定数据时,最好先按条件查询,检查是否符合删除要求,再执行删除
-   删除所有表记录.表并未被删除,表结构还存在
## 四:基本匹配条件
![](media/image26.png){width="5.767361111111111in"
height="3.941666666666667in"}
## 4.1数值比较
大于:\> 大于等于:\>= 等于:= 小于等于:\ select name,uid,gid from user where uid != gid ;
## 4.2字符比较/匹配空/非空
相等:= 不相等:!= 匹配空:is null 匹配非空:is not null
mysql\> select name,uid,gid from user where name = \"mysql\";
mysql\> select name,uid,gid from user where name != \"mysql\";
mysql\> select name,uid,gid from user where shell is null ;
mysql\> select name,uid,gid from user where shell is not null;
## 4.3逻辑匹配:多个判断条件使用
逻辑或:or 多个查询条件,其中某个条件成立即可满足查询条件
mysql\> select name,uid shell from user where name=\"apache\" or uid=88
or shell=\"/sbin/nologin\";
逻辑与:and 多个查询条件,需要同时成立才满足查询条件
mysql\> select name,uid shell from user where name=\"apache\" and uid=88
and shell=\"/sbin/nologin\";
逻辑非: !或not 取反
mysql\> select name from user where name != \"mysql\";
mysql\> select name from user where name is not null;
提高优先级:() 提高判断条件的优先级
## 4.4范围内匹配/去重显示
匹配范围内的任意一个值即可
\-\-\--用途\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--类型\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
在\...里面\... In (值列表)
mysql\> select name from user where name in
(\"root\",\"adm\",\"rsync\",\"bob\");
mysql\> select name,uid from user where uid in (1,7,3);
不在\...里面\... Not in (值列表)
mysql\> select name,uid from user where uid not in (1,7,3);
在\...之间\... Between 数字1 and 数字2
mysql\> select \* from user where id between 10 and 20;
去重显示 distinct 字段名
mysql\> select distinct shell from user;
## 五:高级匹配查询
## 5.1模糊查询:
基本用法: where 字段名 like '通配符'
\_ 匹配单个字符
\% 匹配0\~N个字符
mysql\> select name from user where name like \'\_\_\_\_\'; #四个\_
mysql\> select name from user where name like \'%r%\'; #含有r
mysql\> select name from user where name like \'\_\_%\_\_\'; #至少有四个
mysql\> select name from user where name like \'r%\'; #r开头
## 5.2正则表达式:
基本用法:where 字段名 regexp '正则表达式'
正则元字符:
\^:开头 \$:结尾 . :任意一个字符
\[\]:范围其中一个 \*:0个或多个前面的值 \|:或者
mysql\> select name from user where name regexp \'\^r\|\^a\';
mysql\> select name from user where name regexp \'\^r.\*t\$\';
mysql\> insert into user(name)values(\"jim9\"),(\"j7im\"),(\"ji2m\");
mysql\> select name from user where name regexp \'\[0-9\]\';
## 5.3四则运算:
加:+ 减:- 乘:\* 除:/ 取余:%
mysql\> update user set uid=uid+1 where uid \ select name ,uid,gid,uid+gid ruslet from user where
name=\"root\";
() 提供条件的优先级
mysql\> select name ,uid,gid, (uid+gid)/2 pjz from user where
name=\"mysql\";
## 5.4操作查询结果
### 聚集函数 
聚集函数:MySQL 内置数据统计函数
sum(字段名) 统计字段之和
avg(字段名) 统计字段平均值
min(字段名) 统计字段最小值
max(字段名) 统计字段最大值
count(字段名) 统计字段值个数
mysql\> select count(name) from user;
mysql\> select count(name) from user where shell=\"/bin/bash\";
mysql\> select avg(uid) from user;
mysql\> select sum(uid) from user;
mysql\> select min(uid) from user;
mysql\> select max(uid) from user;
mysql\> select min(uid) from user where shell != \"/bin/bash\";
mysql\> select min(uid) from user;
mysql\> select count(\*) from user; #统计所有行数
### 查询结果排序order by 字段名
默认升序:sql 查询 order by 字段名
降 序:sql 查询 order by 字段名 desc
sql 查询 order by 字段名 \[asc\|desc\]
在user表中查看uid在10-1000之间的name,并且按uid升序排序
mysql\> select name,uid from user where uid between 10 and 1000 order by
uid;
mysql\> select name,uid from user where uid between 10 and 1000 order by
uid desc;
### 分组 group by 字段名
Sql 查询 group by 字段名 通常是对字符类型字段分组
mysql\> select shell from user group by shell;
mysql\> select shell from user where uid between 10 and 1000 group by
shell;
### 过滤 having 条件表达式
Sql 查询 having 条件表达式;
Sql 查询 where 条件 having 条件表达式;
Sql 查询 group by 字段名 having 条件表达式;
查询user表中uid在10和6000之间的,名字是"root"的数据
mysql\> select name from user where uid between 10 and 6000 having
name=\"root\";
mysql\> select name from user where uid between 10 and 6000 having
name=\"mysql\";
### 限制显示行数 limit
Sql 查询 limit;
Sql 查询 limit n; #显示查询结果的前N行记录
Sql 查询 limit n,m #显示指定范围内的查询记录
Sql 查询 where 条件查询 limit 3; #显示查询结果前3条记录
Sql 查询 where 条件查询 limit 3,3; #从第4行开始,共显示3条记录
mysql\> select name from user where uid between 10 and 6000 limit 2;
mysql\> select name from user where uid between 10 and 6000 limit 4,5;
综合应用:
在user表中查找shell不是/bin/bash的所有数据,且按照uid的值降序排序,显示前3行
mysql\> select \* from user where shell!=\"/bin/bash\" order by uid desc
limit 3;
在user表中查找shell不是/bin/bash的所有数据,且按照uid的值升序排序,显示前3行
mysql\> select \* from user where shell!=\"/bin/bash\" order by uid
limit 3;
## 案例
1.  MySQL存储引擎的配置
2.  数据导入/导出
3.  操作表记录
4.  查询及匹配条件
## 1 MySQL存储引擎的配置
1.1 问题
本案例要求MySQL数据存储引擎的使用，完成以下任务操作：
查看服务支持的存储引擎
查看默认存储类型
更改表的存储引擎
设置数据库服务默认使用的存储引擎
1.2 步骤
实现此案例需要按照如下步骤进行。
### 步骤一：查看存储引擎信息
登入MySQL服务器，查看当前支持哪些存储引擎。
使用mysql命令连接，以root用户登入：
\[root@dbsvr1 \~\]# mysql -u root --p
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 9
Server version: 5.7.17 MySQL Community Server (GPL)
Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights
reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current
input statement.
mysql\>
执行SHOW ENGINES\\G指令可列表查看，MySQL
5.6可用的存储引擎有9种（除最后的FEDERATED以外，其他8种都支持），其中默认采用的存储引擎为InnoDB：
mysql\> SHOW ENGINES\\G
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 1. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: InnoDB
Support: DEFAULT //此存储引擎为默认
Comment: Supports transactions, row-level locking, and foreign keys
Transactions: YES
XA: YES
Savepoints: YES
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 2. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: MRG_MYISAM
Support: YES
Comment: Collection of identical MyISAM tables
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 3. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: MEMORY
Support: YES
Comment: Hash based, stored in memory, useful for temporary tables
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 4. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: BLACKHOLE
Support: YES
Comment: /dev/null storage engine (anything you write to it disappears)
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 5. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: MyISAM
Support: YES
Comment: MyISAM storage engine
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 6. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: CSV
Support: YES
Comment: CSV storage engine
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 7. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: ARCHIVE
Support: YES
Comment: Archive storage engine
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 8. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: PERFORMANCE_SCHEMA
Support: YES
Comment: Performance Schema
Transactions: NO
XA: NO
Savepoints: NO
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 9. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Engine: FEDERATED
Support: NO //此引擎不被支持
Comment: Federated MySQL storage engine
Transactions: NULL
XA: NULL
Savepoints: NULL
9 rows in set (0.01 sec)
### 步骤二：查看默认存储类型
查看系统变量default_storage_engine
的值，确认默认采用的存储引擎是InnoDB：
mysql\> SHOW VARIABLES LIKE \'default_storage_engine\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| default_storage_engine \| InnoDB \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
### 步骤三：修改默认存储引擎
在 mysql\>
环境中，可以直接通过SET指令更改默认的存储引擎（只在本次连接会话过程中有效，退出重进即失效）
。比如临时修改为MyISAM，可执行下列操作：
mysql\> SET default_storage_engine=MyISAM; //改用MyISAM引擎
Query OK, 0 rows affected (0.00 sec)
mysql\> SHOW VARIABLES LIKE \'default_storage_engine\'; //确认结果
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| default_storage_engine \| MyISAM \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
若希望直接修改MySQL服务程序所采用的默认存储引擎，应将相关设置写入配置文件/etc/my.cnf，并重启服务后生效。比如：
\[root@dbsvr1 \~\]# vim /etc/my.cnf
\[mysqld\]
.. ..
default_storage_engine=MEMORY //改用MEMORY引擎
\[root@dbsvr1 \~\]# systemctl restart mysqld.service //重启服务
重新登入 mysql\> 确认修改结果：
\[root@dbsvr1 \~\]# mysql -u root -p
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 3