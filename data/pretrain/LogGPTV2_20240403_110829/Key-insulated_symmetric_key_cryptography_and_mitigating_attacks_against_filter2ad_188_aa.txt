title:Key-insulated symmetric key cryptography and mitigating attacks against
cryptographic cloud software
author:Yevgeniy Dodis and
Weiliang Luo and
Shouhuai Xu and
Moti Yung
Key-Insulated Symmetric Key Cryptography and Mitigating
Attacks against Cryptographic Cloud Software
Yevgeniy Dodis
Dept. of Computer Science
New York University
PI:EMAIL
Weiliang Luo
Dept. of Computer Science
University of Texas at San
Antonio
PI:EMAIL
Shouhuai Xu
Dept. of Computer Science
University of Texas at San
Antonio
PI:EMAIL
Moti Yung
Google
PI:EMAIL
ABSTRACT
Software-based attacks (e.g., malware) pose a big threat to
cryptographic software because they can compromise the as-
sociated cryptographic keys in their entirety. In this paper,
we investigate key-insulated symmetric key cryptography,
which can mitigate the damage caused by repeated attacks
against cryptographic software. To illustrate the feasibility
of key-insulated symmetric key cryptography, we also report
a proof-of-concept implementation in the Kernel-based Vir-
tual Machine (KVM) environment.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed
Systems
General Terms
Security
Keywords
Key-insulation, key management, cloud computing
1.
INTRODUCTION
The motivation of the present study is two-fold. From
a system perspective, a cloud should facilitate secure com-
munications between the applications that run in diﬀerent
Virtual Machines (VMs). A particularly devastating attack
is that the attacker fully compromises the cryptographic
keys associated with the cryptographic software. It is there-
fore imperative to mitigate the damage caused by such full
(rather than partial) exposure of cryptographic keys. From a
cryptographic perspective, the notion of key-insulated cryp-
tography has been investigated but only in the public-key
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
setting [7, 8]. While key-insulated public key cryptography
may be adapted to fulﬁll the functions we aim to oﬀer, key-
insulated symmetric key cryptography can deal with bulk
data more eﬃciently and can ease the task of key man-
agement in such a relatively centralized environment. Key-
insulated symmetric key cryptography is interesting also for
its own sake because a symmetric key can be exposed at the
sender or receiver side; whereas an asymmetric (private) key
can be exposed at the receiver side only.
Our contributions.
We present deﬁnition and construction of key-insulated
symmetric key cryptography. We show how key-insulated
symmetric key cryptography can be adopted to mitigate at-
tacks against cryptographic cloud software, we consider its
integration into Trusted Virtual Domain (TVD) [11].
Related work.
There are three approaches to mitigate the damage caused
by the full compromise of cryptographic keys. The ﬁrst is
the primitives approach. One strategy is to divide the sys-
tem time into periods, and change the cryptographic key
frequently. An example is forward-security [1, 2, 3], which
ensures that compromise of a key during one period does
not allow the attacker to obtain the key in any past period.
Another strategy is represented by the notion called thresh-
old cryptosystems [4], which splits the key (rather than the
system time) into multiple shares such that a key is not
compromised until after a suﬃcient number of shares are
compromised. The second is the architectural approach. In
this approach a cryptographic key is protected in a tamper-
resistant hardware [13]. The third is the hybrid approach.
This approach has the advantages of the two approaches
mentioned above. Two examples are key-insulated pub-
lic key cryptosystems [7, 8] and intrusion-resilient public
key cryptosystems [10, 5, 6]. The present paper follows
this approach and investigates key-insulated symmetric key
schemes.
2. KEY-INSULATED SYMMETRIC CRYP-
TOGRAPHY
2.1 Model and Deﬁnition
The lifetime of the system is divided into periods 1, . . . , N
(e.g., days). Each user/participant has a device (e.g., a hard-
ware co-processor, or a trusted software module in VMM),
and a networked computer. Denote by P the set of identities
of the users (e.g., VMs), where |P| ≥ 2. At the beginning
of time period t (1 ≤ t ≤ N ), each user’s computer obtains
certain information from the user’s device, derives a key SKt
for this time period (i.e., all the relevant users’ computers
obtain the same SKt). A networked computer is subject to
repeated compromise. Although it is assumed to be harder,
a device may also be compromised. Our model and deﬁ-
nition of key-insulated symmetric key schemes are adapted
from the ones of key-insulated public key cryptography [7,
8], but here are some fundamental diﬀerences between the
public-key setting and the secret-key setting.
Definition 1. A key-updating symmetric key scheme Π
is a 5-tuple of polynomial-time algorithms (G, U ∗, U, E , D):
• G, the probabilistic key generation algorithm that takes
as input a security parameter k and the total number of
time periods N . It returns SK(Dev) def
= {SK(ID.Dev)}ID∈P
and SK(Comp) def
= {SK(ID.Comp)}ID∈P , where SK(ID.Dev)
and SK(ID.Comp) are user ID’s device master key and
computer master key, respectively.
• U ∗, the device key-update algorithm that takes as in-
put an index t, where 1 ≤ t ≤ N , and the device master
key SK(ID.Dev). It returns a partial secret key SKID.Dev
.
t
• U, the computer key-update algorithm that takes as
input an index t, the secret key SKt−1 for time period
t − 1 (where SK0 =⊥), the partial secret key SKID.Dev
,
and the computer master key SK(ID.Comp). It returns a
secret key SKt for time period t, and erases SKt−1 as
well as SKID.Dev
.
t
t
• E , the encryption algorithm that takes as input an in-
dex t, a message M , and secret key SKt. It returns a
ciphertext ht, Ci.
• D, the decryption algorithm that takes as input se-
cret key SKt and ciphertext ht, Ci. It returns the cor-
responding message M if the ciphertext is legitimate,
and ⊥ otherwise.
For correctness, we require that for every message M and
1 ≤ t ≤ N , it holds that Pr[DSKt (ESKt (t, M )) = M ] = 1.
2.2 Security Deﬁnition
We consider three types of exposures: (1) ordinary key
exposure, which models the (repeated) compromise of ID’s
computer and leaks SKt and SK(ID.Comp); (2) key-update
exposure, which models the (repeated) compromise of ID’s
computer during the key-updating step and leaks SKt−1,
SKt, and SK(ID.Comp)); and (3) device master key expo-
sure, which models the compromise of ID’s device and leaks
SK(ID.Dev). Formally, we give the adversary access to three
(possibly ﬁve) types of oracles.
• Key exposure oracle ExpSK(Dev) ,SK(Comp) (·, ·): It, on in-
put t ∈ {1, . . . , N } and ID ∈ P, returns the period
secret key SKt.
• Left-or-right encryption oracle LRE,~b(·, ·, ·): It is de-
= ESKt (t, Mbt ), where ~b =
ﬁned as LRE,~b(t, M0, M1)
b1, . . . , bN ∈ {0, 1}N . It models encryption requests by
the adversary on (period, message) pairs.
def
tion oracle E ∗
• We may allow the adversary to have access to encryp-
SK(Dev) ,SK(Comp) (·, ·) that, on input t and
def
= ESKt (t, M ). This
M , computes and returns ht, Ci
models a chosen-plaintext attack by the adversary.
• We may also allow the adversary to have access to
decryption oracle D∗
SK(Dev) ,SK(Comp) (·) that, on input
ht, Ci, computes and returns DSKt (ht, Ci). This models
a chosen-ciphertext attack by the adversary.
We allow the adversary to interleave encryption requests and
key exposure requests. Moreover, key exposure requests may
be made adaptively and in any order.
Definition 2. For ID ∈ P, deﬁne T ′
ID = {t|1 ≤ t ≤ N ∧
∃ExpSK(Dev) ,SK(Comp) (t, ID)}, which corresponds to the points
in time that the computer is compromised, and T ′′
ID = {t|1 ≤
t ≤ N ∧∃Dev(t, ID)}, which corresponds to the points in time
that the device is compromised. Deﬁne tID = max(t′
ID),
where t′
ID are deﬁned as follows:
ID and t′′
ID, t′′
• If T ′
ID 6= ∅, deﬁne t′
T ′
ID, t′ ≥ t (i.e., t′
is compromised); otherwise, deﬁne t′
ID = ∞.
ID = t such that t ∈ T ′
ID and ∀ t′ ∈
ID is the ﬁrst time that ID’s computer
• If T ′′
ID 6= ∅, deﬁne t′′
T ′′
ID, t′′ ≥ t (i.e., t′′
compromised); otherwise, deﬁne t′′
ID and ∀ t′′ ∈
ID = t such that t ∈ T ′′
ID is the ﬁrst time that ID’s device is
ID = ∞.
Note that tID is the earliest point in time that ID’s computer
and device have been compromised. Deﬁne TP = {tID|ID ∈
P}. Deﬁne tΠ = t such that t ∈ TP and ∀ ID ∈ P, t ≤ tID.
Note that tΠ is the earliest point in time that ID’s computer
and device have been compromised, which means that all of
the cryptographic keys have been compromised. We say that
Π is never-compromised if tΠ = ∞, and Π is compromised
at time tΠ otherwise. Deﬁne T ′
ID. We say that
a never-compromised Π is un-exposed at time period t if
t /∈ T ′
P .
P = SID∈P T ′
For a never-compromised Π, we require key-insulation spec-
iﬁed below; for a Π that is compromised at some time tΠ,
we require augmented key-insulation speciﬁed below. Infor-
mally, Π is key-insulated if the probability that any proba-
bilistic polynomial-time adversary succeeds in guessing the
value of bt for any un-exposed time period t is negligibly
more than 1/2. More formally,
Definition 3. (key-insulation) Let Π be a key-updating
symmetric key scheme. For adversary A, deﬁne:
SuccA,Π(k)
def
=
Pr
(SK(Dev), SK(Comp)) ← G(1k, N );
~b ← {0, 1}N ;
(t, b) ←
A
b = bt
(·,·,·),Exp
E,~b
LR
SK(Dev) ,SK(Comp) (·,·),Dev(·,·),O1(·,·),O2(·)
,
() :
• Key exposure oracle Dev(·, ·): It, on input t ∈ {1, . . . , N }
and ID ∈ P, returns SK (ID.Dev).
where O1(·, ·) =⊥ for known-plaintext attack and O1(·, ·) =
E ∗
SK(Dev) ,SK(Comp) (·, ·) for chosen-plaintext attack, and O2(·) =⊥
meaning that the adversary has no access to the decryption
oracle and O2(·) = D∗
SK(Dev) ,SK(Comp) (·) meaning that the
adversary has access to the decryption oracle (i.e., chosen-
ciphertext attack in which case the adversary is not allowed
to query D∗
SK(Dev) ,SK(Comp) (ht, Ci) if ht, Ci was returned by
LRE,~b(t, ·, ·)). Then, Π is (T, N )-key-insulated if for any
probabilistic polynomial-time A such that tΠ = ∞ (i.e., Π
is never-compromised), t /∈ T ′
P (i.e. Π is un-exposed at
period t), and |T ′
P | ≤ T , |SuccA,Π(k) − 1/2| is negligible.
Moreover, we say a (N − 1, N )-key-insulated symmetric key
scheme achieves optimal key-insulation.
For the notion of key-insulation, it may be desirable to
consider an extra property called secure key updates below.
We call the following attack a key-update exposure at period
t on ID’s computer: an adversary breaks into user ID’s com-
puter while a key update is taking place (i.e., the exposure
occurs between two periods t − 1 and t). In this case, the
, SK(ID.Comp), and (can
adversary receives SKt−1, SKID.Dev
compute) SKt. Informally, we say a scheme has secure key
updates if a key-update exposure at period t on ID’s com-
puter is equivalent to key exposures at periods t − 1 and t
on ID’s computer and no more. More formally:
t
Definition 4. (secure key updates for key-insulation) A
key-updating symmetric key scheme Π has secure key up-
dates if the view of any adversary A making a key-update
exposure request at time period t on ID’s computer can be
perfectly simulated by an adversary A′ who makes key expo-
sure requests at periods t − 1 and t on ID’s computer.
Informally, we say Π is augmented key-insulated if the
probability that any polynomial-time adversary succeeds in
guessing the bit bt corresponding to LRE,~b(t, M1, M2) is neg-
ligibly more than 1/2, where t < tΠ. More formally,
Definition 5. (augmented key-insulation) Let Π be a key-
updating symmetric key encryption scheme. For adversary
A, deﬁne the following:
SuccI,Π(k)
def
=
Pr
(SK(Dev), SK(Comp)) ← G(1k, N );
~b ← {0, 1}N ;
(tΠ, t, b) ←
I
b = bt
(·,·,·),Exp
LR
E,~b
SK(Dev) ,SK(Comp) (·,·),Dev(·,·),O1(·,·),O2(·)
,
() :
where t < tΠ and t /∈ T ′
P , O1(·, ·) =⊥ for known-plaintext at-
tack and O1(·, ·) = E ∗
SK(Dev) ,SK(Comp) (·, ·) for chosen-plaintext
attack, and O2(·) =⊥ meaning that the adversary has no ac-
cess to the decryption oracle and O2(·) = D∗
SK(Dev) ,SK(Comp) (·)
meaning that the adversary has access to the decryption or-
acle (i.e., chosen-ciphertext attack in which case the ad-
versary is not allowed to query D∗
SK(Dev) ,SK(Comp) (ht, Ci) if
ht, Ci was returned by LRE,~b(t, ·, ·)). Π is augmented key-
insulated if: (1) when tΠ < ∞, |SuccI,Π(k) − 1/2| is negli-
gible for any probabilistic polynomial-time algorithm A, and
(2) when tΠ = ∞, Π is key-insulated.
2.3 Key-Insulated Symmetric Key Scheme
Let (G, E, D) be a secure symmetric key cryptosystem,
where G is the key generation algorithm which takes as in-
put a security parameter k and outputs a key K, EK(·)
is encryption algorithm, and DK (·) is the decryption al-
gorithm. We refer to [12] for its security deﬁnitions. Let
{fK } : {0, 1}k × {0, 1}∗ → {0, 1}k be a pseudorandom func-
tion family keyed by K ∈ {0, 1}k [9]. The (N − 1, N )-key-
insulated symmetric key scheme Π for two party communi-
cation (i.e., |P| = 2) is speciﬁed as follows.
• Key Generation. This algorithm is executed in a secure
environment. Suppose {xi}1≤i≤4 are uniformly chosen
from {0, 1}k. Alice stores (x1, x2) on her computer,
and (x3, x4) on her device; Bob stores (x1, x3) on his
computer, and (x2, x4) on his device.