# R3蓝屏的多种方式及原理分析（二）—— Win11下的蓝屏探究
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在前一篇[《R3蓝屏的多种方式及原理分析（一）》](https://www.anquanke.com/post/id/254815)，主要讲解了如何利用`NtRaiseHardError`进行蓝屏，以及它蓝屏的整个“旅程”。剩下的篇幅来介绍第二类蓝屏到底是如何发生的，主要解决以下问题：
    如何将自己的“地位”提升为系统Critical Process/Thread 
    Critical Process是如何蓝屏的
    变成Critical Thread之后为什么无法蓝屏
    Windows内核Critical Process的设计到底精髓在哪里
    如何利用以及如何防护此类攻击
## 0x01 背景
离第一篇的投稿已经过去了好几天，这段时间正好处于Windows
11发布的档口，看了下相关的报道，内核没什么大的更新，主要是更新了UI的内容，我猜测关于这部分的内核内容是没什么变化的，由于之前已经逆过一遍Win10的，那么咱们便直接从Win
11入手开始分析吧，如果跟Win10有很大不同的地方我会指出。有些微软自己官方说的小细节是存在误导的可能性的，还得靠自己来逆，废话不多说，直接开始。
先来看一下Win11下的蓝屏吧，黑屏？？？我觉得还不如蓝屏
## 0x02 相关API
根据上一篇就已经知道这4个ＡＰＩ，但仅仅知道了函数名，这一节要详细介绍一下，每个参数的含义，先把逆向出来的各参数含义写在下面。
**特别注意：Rtl系列的两个函数都是`cdecl`(外平栈)，否则会出现栈不平导致报错的情况。**
    NTSTATUS __cdecl RtlSetProcessIsCritical(    
    IN BOOLEAN     NewValue,                // 想要设置成的新值  0/1  1为启用 Critical Process 0为关闭
    OUT PBOOLEAN OldValue     OPTIONAL,    // 返回的旧值       0/1  返回的是EPROCESS.Flags.BreakOnTermination的值
    IN BOOLEAN     NeedBreaks                 // 是否要求system critical breaks启用 
    )    
    NTSTATUS __cdecl RtlSetThreadIsCritical(    
    IN BOOLEAN     NewValue,                // 想要设置成的新值  0/1  1为启用 Critical Thread 0为关闭
    OUT PBOOLEAN OldValue     OPTIONAL,    // 返回的旧值       0/1  ETHREAD.CrossThreadFlags.BreakOnTermination的值
    IN BOOLEAN     NeedBreaks                 // 是否要求system critical breaks启用   
    )        
    NTSTATUS NTAPI NtSetInformationProcess(    
    IN HANDLE     ProcessHandle,                            // 进程的句柄  -1为当前进程
    IN PROCESSINFOCLASS     ProcessInformationClass,    // 想要设置的类型
    IN PVOID     ProcessInformation,                        // 参数指针，由第二个参数ProcessInformationClass决定，
                                                        // 由于本文需要设置的是BreakOnTermination，只有是和否
                                                        // 因此只需要bool类型，下面的长度也默认为4
    IN ULONG     ProcessInformationLength                 // 参数长度
    )
    NTSTATUS NTAPI NtSetInformationThread(    
    IN HANDLE     ThreadHandle,                            // 线程的句柄  -2为当前线程
    IN THREADINFOCLASS     ThreadInformationClass,            // 想要设置的类型
    IN PVOID     ThreadInformation,                        // 参数指针
    IN ULONG     ThreadInformationLength                 // 参数长度
    )
## 0x03 Rtl系如何封装Nt系函数
分析的版本，以下均基于Win11 正式版的ntoskrnl.exe、以及dll文件和pdb文件
###  1.RtlSetThreadIsCritical和RtlSetProcessIsCritical
打开IDA附加到ntdll上，直接开整。这俩函数基本算是一个模子刻出来的，把函数名字里的Process改成Thread，-2改成-1就完美替换。
图上的`ZwQueryInformationxxx()`和`NtSetInformationxxx()`都是四个参数，IDA的F5问题很大，这个上一节已经讲过了，咱们主要是用来看流程，关键的地方还得看汇编。
上面的`NtGlobalFlags`先不谈，先来看看NtSetInformationThread/Process的参数
翻译成C则如下所示
    status = NtSetInformationThread(GetCurrentThread(), ThreadBreakOnTermination, &Enable, sizeof(Enable));
    status = NtSetInformationProcess(GetCurrentProcess(), ProcessBreakOnTermination, &Enable, sizeof(Enable));
###  2.GetCurrentProcess和GetCurrentThread
下面来逐个解析参数，首先第一个参数，为什么是-1和-2？
科普个小知识，`GetCurrentProcess`()和`GetCurrentThread()`返回的都是伪句柄，伪句柄是什么读者可以自行了解。反正结论就是
  * `-1`代表当前`进程`
  * `-2`代表当前`线程`
至于为什么，我也不知道为什么，它的源码就是这么写的，可能就是为了用着方便吧。打开vs，跟踪一下，查看调用堆栈，两个函数分别是`KernelBase!GetCurrentProcess`
`Kernel32!GetCurrentThread`，不知道为什么`kernel32!GetCurrentProcess`转发给kernelbase了，无语子，不就一行代码的事，至于吗？
###  3.两个枚举类型PROCESSINFOCLASS和THREADINFOCLASS
两个Nt函数的第二个参数分别为`PROCESSINFOCLASS`和`THREADINFOCLASS`，结构如下
    typedef enum _THREADINFOCLASS
    {
        ThreadBasicInformation,             //0
        ThreadTimes,                        //1
        ThreadPriority,                     //2
        ThreadBasePriority,                 //3
        ThreadAffinityMask,                 //4
        ThreadImpersonationToken,           //5
        ThreadDescriptorTableEntry,         //6
        ThreadEnableAlignmentFaultFixup,    //7
        ThreadEventPair_Reusable,           //8
        ThreadQuerySetWin32StartAddress,    //9
        ThreadZeroTlsCell,                  //10
        ThreadPerformanceCount,             //11
        ThreadAmILastThread,                //12
        ThreadIdealProcessor,               //13
        ThreadPriorityBoost,                //14
        ThreadSetTlsArrayAddress,           //15
        ThreadIsIoPending,                  //16
        ThreadHideFromDebugger,             //17
        ThreadBreakOnTermination,           //18   0x12
        ThreadSwitchLegacyState,            //19
        ThreadIsTerminated,                 //20
        ThreadLastSystemCall,               //21
        ThreadIoPriority,                   //22
        ThreadCycleTime,                    //23
        ThreadPagePriority,                 //24
        ThreadActualBasePriority,           //25
        ThreadTebInformation,               //26
        ThreadCSwitchMon,                   //27
        MaxThreadInfoClass                  //28
    } THREADINFOCLASS;
    typedef enum _PROCESSINFOCLASS
    {
        ProcessBasicInformation,           //0
        ProcessQuotaLimits,                //1
        ProcessIoCounters,                 //2
        ProcessVmCounters,                 //3
        ProcessTimes,                      //4
        ProcessBasePriority,               //5
        ProcessRaisePriority,              //6
        ProcessDebugPort,                  //7 
        ProcessExceptionPort,              //8
        ProcessAccessToken,                //9
        ProcessLdtInformation,             //10
        ProcessLdtSize,                    //11
        ProcessDefaultHardErrorMode,       //12
        ProcessIoPortHandlers,             //13
        ProcessPooledUsageAndLimits,       //14
        ProcessWorkingSetWatch,            //15
        ProcessUserModeIOPL,               //16 
        ProcessEnableAlignmentFaultFixup,  //17
        ProcessPriorityClass,              //18
        ProcessWx86Information,            //19
        ProcessHandleCount,                //20
        ProcessAffinityMask,               //21
        ProcessPriorityBoost,              //22
        ProcessDeviceMap,                  //23
        ProcessSessionInformation,         //24
        ProcessForegroundInformation,      //25
        ProcessWow64Information,           //26
        ProcessImageFileName,              //27
        ProcessLUIDDeviceMapsEnabled,      //28
        ProcessBreakOnTermination,         //29  0x1D
        ProcessDebugObjectHandle,          //30
        ProcessDebugFlags,                 //31
        ProcessHandleTracing,              //32
        ProcessIoPriority,                 //33
        ProcessExecuteFlags,               //34
        ProcessTlsInformation,             //35
        ProcessCookie,                     //36
        ProcessImageInformation,           //37
        ProcessCycleTime,                  //38
        ProcessPagePriority,               //39
        ProcessInstrumentationCallback,    //40
        ProcessThreadStackAllocation,      //41
        ProcessWorkingSetWatchEx,          //42
        ProcessImageFileNameWin32,         //43
        ProcessImageFileMapping,           //44
        ProcessAffinityUpdateMode,         //45
        ProcessMemoryAllocationMode,       //46
        MaxProcessInfoClass                //47
    } PROCESSINFOCLASS;
本文只使用BreakOnTermination的两个，其实`NtSetInformationThread/Process`的功能是很强大的，用处非常多，想法有多大，舞台就有多大，在本文不再展开，后续文章中可能会继续介绍。
第三个参数和第四个参数上面有注释相信大家也都能看得懂。
###  4.NtGlobalFlags
这个东西还是很有用的，以下为它的具体含义。
Description | Symbolic Name | Hexadecimal Value | **Abbreviation** |
**Destination**  
---|---|---|---|---  
[Buffer DbgPrint Output](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/buffer-dbgprint-output) | FLG_DISABLE_DBGPRINT |
0x08000000 | ddp | R,K  
[Create kernel mode stack trace database](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/create-kernel-mode-stack-trace-database)
| FLG_KERNEL_STACK_TRACE_DB | 0x2000 | kst | R  
[Create user mode stack trace database](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/create-user-mode-stack-trace-database) |
FLG_USER_STACK_TRACE_DB | 0x1000 | ust | R,K,I  
[Debug initial command](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debug-initial-command) | FLG_DEBUG_INITIAL_COMMAND |
0x04 | dic | R  
[Debug WinLogon](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debug-winlogon) | FLG_DEBUG_INITIAL_COMMAND_EX |
0x04000000 | dwl | R  
[Disable heap coalesce on free](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/disable-heap-coalesce-on-free) |
FLG_HEAP_DISABLE_COALESCING | 0x00200000 | dhc | R,K,I  
[Disable paging of kernel stacks](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/disable-paging-of-kernel-stacks) |
FLG_DISABLE_PAGE_KERNEL_STACKS | 0x080000 | dps | R  
[Disable protected DLL verification](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/disable-protected-dll-verification) |
FLG_DISABLE_PROTDLLS | 0x80000000 | dpd | R,K,I  
[Disable stack extension](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/disable-stack-extension) |
FLG_DISABLE_STACK_EXTENSION | 0x010000 | dse | I  
[Early critical section event creation](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/early-critical-section-event-creation) |
FLG_CRITSEC_EVENT_CREATION | 0x10000000 | cse | R,K,I  