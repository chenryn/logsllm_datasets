# 从solc编译过程来理解solidity合约结构
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
现在以一个最简单的代码来开始我们的逆向旅程,为了方便学习,所有的代码编译和分析都在
上进行.默认IDE 选项是关闭代码优化(Enable Optimization)和使用0.4.25 版本的solidity 编译器编译.
        pragma solidity ^0.4.24;
        contract test {
            function a() {
                uint a = 123;
            }
        }
在Remix 上输入上述代码,点击Start to Compile 对代码进行编译,可以在Details 按钮里面获取编译出来的结果.结果包含如下:
        METADATA  编译器元数据,包含:编译器版本,编译器设置,源码信息等
        BYTECODE  合约编译完整的字节码结果
        ABI  应用程序接口,用于标识合约提供了哪些函数给外部调用
        WEB3DEPLOY  Web3js版合约部署代码
        METADATAHASH  元数据哈希
        GASESTIMATES  编译器计算函数调用需要消耗的Gas表
        RUNTIME BYTECODE  合约运行时字节码
        ASSEMBLY  字节码反汇编
读者们会注意到,编译结果里面有ByteCode 和Runtime Bytecode ,分别表示什么意思呢,在此先略过这个疑问,我们关注Runtime
Bytecode 中返回的字节码.对代码结构分析和字节码分析的标注后所有代码如下:
        000 PUSH1 80
        002 PUSH1 40
        004 MSTORE             ;  把0x80 写到[0x40 ,0x40 + 0x20] 这块内存里面,因为内存是空的,这会创建新的内存
        005 PUSH1 04
        007 CALLDATASIZE       ;  获取CALLDATA 的长度
        008 LT                 ;  LT 和PUSH1 0x4 对应,判断CALLDATA 的长度是否小于0x4
        009 PUSH1 3f
        011 JUMPI              ;  如果小于0x4 就往下跳转到0x3F
        012 PUSH1 00
        014 CALLDATALOAD       ;  CALLDATALOAD 0x0 ,PUSH1 0x0 是给CALLDATALOAD 的参数,意思要获取CALLDATA 数据的偏移位置
        015 PUSH29 0100000000000000000000000000000000000000000000000000000000
        045 SWAP1
        046 DIV                ;  DIV 和PUSH29 对应,意思是把上面的数据向左移28 字节,剩下4 字节是调用合约函数名的哈希
        047 PUSH4 ffffffff
        052 AND                ;  AND 和PUSH4 0xFFFFFFFF 对应,保留低位4 字节数据,高位去处
        053 DUP1
        054 PUSH4 0dbe671f     ;  这个是合约有的函数名,经过sha3() 精简过的
        059 EQ                 ;  判断传递过来的函数调用名是否相等
        060 PUSH1 44
        062 JUMPI              ;  如果两值相等就往下跳转到0x44
        063 JUMPDEST           ;  空指令
        064 PUSH1 00
        066 DUP1
        067 REVERT             ;  没有匹配到相应的函数就撤销所有操作,Revert(0,0)
        068 JUMPDEST
        069 CALLVALUE          ;  获取用户转帐数额
        070 DUP1
        071 ISZERO             ;  如果用户转帐数额为0
        072 PUSH1 4f
        074 JUMPI              ;  转帐数额不为0 则跳到0x4F,否则就退出
        075 PUSH1 00
        077 DUP1
        078 REVERT             ;  因为调用函数a() 是不需要附加转帐金额的,所以检测到带有附加金额的函数调用就退出,参考payable 关键字
        079 JUMPDEST
        080 POP
        081 PUSH1 56
        083 PUSH1 58
        085 JUMP               ;  跳转到地址88
        086 JUMPDEST
        087 STOP               ;  停止执行
        088 JUMPDEST
        089 PUSH1 00
        091 PUSH1 7b
        093 SWAP1
        094 POP
        095 POP
        096 JUMP               ;  跳转到地址86
        097 STOP
        ----  合约代码结束分界线  ----        098 LOG1
        099 PUSH6 627a7a723058
        106 SHA3
        107 MUL
        108 PUSH15 5fd8c2f6fe4103dba9baf9c48c052e
        124 CALLDATALOAD
        125 INVALID
        126 PUSH1 d9
        128 INVALID
        129 INVALID
        130 TIMESTAMP
        131 STATICCALL
        132 INVALID
        133 INVALID
        134 DUP13
        135 INVALID
        136 TIMESTAMP
        137 INVALID
        138 NUMBER
        139 STOP
        140 INVALID
标注信息把合约代码的结构和执行过程的思路都理清了,但是读者们会发现以下的问题:
        1.为什么会有合约代码结束分界线,多出来的代码究竟是什么
        2.为什么会有很多多余的跳转
        3.JUMPDEST 是无意思的字节码,为什么会多次出现
要解决这些疑问,那么就需要深入到solidity 编译器的源码分析.在
中找到solc 编译器的源码,定位到libsolidityCodegenContractCompiler.cpp
文件的ContractCompiler::compileContract() 函数,对该函数的分析如下:
        void ContractCompiler::compileContract(
            ContractDefinition const& _contract,
            std::map const& _contracts
        )  //  合约编译
        {
            // ...
            initializeContext(_contract, _contracts);  //  初始化执行环境上下文
            appendFunctionSelector(_contract);         //  根据合约内使用到的函数进行汇编构造
            appendMissingFunctions();                  //  链接不公开的函数(非public 声名)
        }
initializeContext() 函数主要功能是初始化执行环境上下文,并把初始化的机器码输出到字节码缓存.
        void ContractCompiler::initializeContext(
            ContractDefinition const& _contract,
            map const& _compiledContracts
        )
        {
            m_context.setExperimentalFeatures(_contract.sourceUnit().annotation().experimentalFeatures);
            m_context.setCompiledContracts(_compiledContracts);
            m_context.setInheritanceHierarchy(_contract.annotation().linearizedBaseContracts);
            CompilerUtils(m_context).initialiseFreeMemoryPointer();  //  初始化EVM 内存指针
            registerStateVariables(_contract);
            m_context.resetVisitedNodes(&_contract);
        }
        const size_t CompilerUtils::freeMemoryPointer = 64;
        const size_t CompilerUtils::zeroPointer = CompilerUtils::freeMemoryPointer + 32;
        const size_t CompilerUtils::generalPurposeMemoryStart = CompilerUtils::zeroPointer + 32;
        void CompilerUtils::initialiseFreeMemoryPointer()
        {
            m_context , FunctionTypePointer> interfaceFunctions = _contract.interfaceFunctions();  //  合约中声名的公开函数列表
            map, const eth::AssemblyItem> callDataUnpackerEntryPoints;  //  函数代码入口点
            if (_contract.isLibrary())  //  判断合约是否为库代码
            {
                solAssert(m_context.stackHeight() == 1, "CALL / DELEGATECALL flag expected.");
            }
            FunctionDefinition const* fallback = _contract.fallbackFunction();
            eth::AssemblyItem notFound = m_context.newTag();    //  创建新的汇编Tag ,Tag 的意义是用来标注汇编代码块声名和跳转到某一段汇编用的
            // directly jump to fallback if the data is too short to contain a function selector
            // also guards against short data
            m_context ? 
            for (auto const& it: interfaceFunctions)
            {
                callDataUnpackerEntryPoints.insert(std::make_pair(it.first, m_context.newTag()));  //  对函数入口创建新汇编代码块声名
                m_context ::Arith(it.first)) isPayable())
                    appendCallValueCheck();
                solAssert(fallback->isFallback(), "");
                solAssert(FunctionType(*fallback).parameterTypes().empty(), "");
                solAssert(FunctionType(*fallback).returnParameterTypes().empty(), "");
                fallback->accept(*this);
                m_context hasDeclaration(), "");
                CompilerContext::LocationSetter locationSetter(m_context, functionType->declaration());
                m_context stateMutability() > StateMutability::View)  //  库函数且关键字声名不是pure 和view 的函数
                {
                    // If the function is not a view function and is called without DELEGATECALL,
                    // we revert.
                    m_context isPayable() && !_contract.isLibrary())  //  如果函数没有启用Payable 关键字或者这是库函数的话,都不支持接收合约调用携带转帐金额
                    appendCallValueCheck();    //  添加对转帐金额检测代码
                // Return tag is used to jump out of the function.
                eth::AssemblyItem returnTag = m_context.pushNewTag();  //  对函数创建返回代码段声名
                if (!functionType->parameterTypes().empty())  //  如果函数有参数的话
                {
                    // Parameter for calldataUnpacker
                    m_context parameterTypes());    //  从TXDATA 中获取参数
                }
                m_context.appendJumpTo(m_context.functionEntryLabel(functionType->declaration()));  //  调转到函数入口点
                m_context returnParameterTypes()) -                    CompilerUtils(m_context).sizeOnStack(functionType->parameterTypes()) -                    1
                );
                // Consumes the return parameters.
                appendReturnValuePacker(functionType->returnParameterTypes(), _contract.isLibrary());  //  构造函数返回值处理
            }
        }
上面的代码分析可能看起来有些晦涩难懂,作者把上面分析到的编译过程一一对应到编译结果并标注,汇编代码如下:
        -----  initializeContext() -> initialiseFreeMemoryPointer()  ----        000 PUSH1 80         ;  initialiseFreeMemoryPointer()  ,  m_context declaration()));
        079 JUMPDEST         ;  JUMPDEST 是无意义的代码,它的唯一意义是用来标识这是一个Label 起始头
        080 POP
        081 PUSH1 56         ;  eth::AssemblyItem returnTag = m_context.pushNewTag();  0x56 is Return Address
        083 PUSH1 58         ;  /
        085 JUMP             ;    m_context.appendJumpTo(m_context.functionEntryLabel(functionType->declaration()));
        -----  Tag function_A_return_Code  ----        086 JUMPDEST         ;  Address 0x56
        087 STOP             ;  ContractCompiler::appendReturnValuePacker();
        -----  Tag function_A_Main_Code  ----        -----  CompilerContext 是保存每一个函数编译好的代码
        088 JUMPDEST         ;  Address 0x58 , m_context.functionEntryLabel("a"); ..
        089 PUSH1 00
        091 PUSH1 7b
        093 SWAP1            ;  0x7B ,0x00  == SWAP => 0x00 ,0x7B .意义是对栈进行平衡