---
author: Garima
category: 观点
comments_data:
- date: '2017-08-20 22:26:51'
  message: SaaS不是软件即服务吗？
  postip: 183.51.194.64
  username: 来自广东揭阳的 Chrome 60.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 4622
date: '2017-08-20 18:42:00'
editorchoice: false
excerpt: 容器在性能方面表现出色，而即将到来的“无服务器”计算（也称为功能即服务 - Function as a Service (FaaS)）的浪潮将进一步增强其优势。
fromurl: https://opensource.com/article/17/2/performance-container-world
id: 8797
islctt: true
largepic: /data/attachment/album/201708/20/184447hw12rkwjvhwscxsw.jpg
permalink: /article-8797-1.html
pic: /data/attachment/album/201708/20/184447hw12rkwjvhwscxsw.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 容器在性能方面表现出色，而即将到来的“无服务器”计算（也称为功能即服务 - Function as a Service (FaaS)）的浪潮将进一步增强其优势。
tags:
- 性能
- 容器
thumb: false
title: Linux 容器轻松应对性能工程
titlepic: true
translator: geekpi
updated: '2017-08-20 18:42:00'
---

![](/data/attachment/album/201708/20/184447hw12rkwjvhwscxsw.jpg)

应用程序的性能决定了其完成预期任务的速度。这包括几个关键问题：
* 峰值负载下的响应时间
* 与替代方案相比的易用性、支持的功能和用例
* 运营成本（CPU 使用率、内存需求、数据吞吐量、带宽等）

性能分析的价值远不止于估计所需的计算资源或满足峰值需求的应用实例数量。它直接关系到企业的成功。良好的性能提升了用户体验，减少了响应时间，优化了内容交付，提高了客户粘性，并最终促进了业务增长。

### 挑战

当然，这只是对性能工程价值的一个简化描述。为了更好地理解这些挑战，让我们将其置于一个更复杂的现实场景中。

现代应用程序通常托管在云端，可以利用几乎无限的计算资源。云提供了硬件和软件的需求支持。开发人员通过云提供的功能实现更快的编码和部署。虽然云托管不是免费的，但其成本与应用程序的资源需求成正比。

除了常见的云服务如搜索即服务 (Search as a Service, SaaS)、平台即服务 (Platform as a Service, PaaS)、基础设施即服务 (Infrastructure as a Service, IaaS) 和负载均衡即服务 (Load Balancing as a Service, LBaaS)，开发人员还可能使用以下快速增长的云服务之一或多个：
* **安全即服务 (Security as a Service, SECaaS)**：满足软件和用户的安全需求
* **数据即服务 (Data as a Service, DaaS)**：为应用提供所需的数据
* **日志即服务 (Logging as a Service, LaaS)**：提供日志传递和分析指标
* **搜索即服务 (Search as a Service, SaaS)**：用于应用程序的分析和大数据需求
* **网络即服务 (Network as a Service, NaaS)**：用于通过公共网络发送和接收数据

随着云服务的指数级增长，开发复杂应用程序变得更加容易。然而，分布式组件之间的相互作用变得越来越复杂。用户群更加多元化，软件需求列表变得更长，对其他服务的依赖性也在增加。这些因素可能导致性能问题的连锁反应。

例如，假设你有一个精心编写的应用程序，遵循安全编码实践，能够满足不同的负载要求，并经过彻底测试。此外，你还结合了基础架构和分析工作来支持基本的性能要求。那么，在系统的实现、设计和架构中建立性能标准需要做些什么？如何使软件跟上不断变化的市场需求和新兴技术？如何测量关键参数以调整系统以获得最佳性能？如何使系统具有弹性和自我恢复能力？如何快速识别并解决潜在的性能问题？

### 容器的作用

软件容器基于微服务设计或面向服务的架构 (SoA) 的优点，提高了性能。包含更小、自足的代码块的系统更容易编码，并对其它系统组件有更清晰、定义良好的依赖。测试变得更加容易，资源利用和内存过度消耗等问题比在宏架构中更容易确定。

当扩展系统以增加负载能力时，容器应用程序的复制快速且简单。安全漏洞可以更好地隔离，补丁可以独立版本化并快速部署。性能监控更有针对性，测量结果更可靠。还可以重写和“改版”资源密集型代码，以满足不断变化的性能要求。

容器启动和停止都非常迅速，比虚拟机 (VM) 具有更好的资源利用和进程隔离。它们没有空闲内存和 CPU 闲置的问题，允许多个应用程序共享同一台机器而不损失数据或性能。容器使应用程序可移植，开发人员可以构建并将应用程序发送到任何支持容器技术的 Linux 服务器上，而不必担心性能损失。容器在其内生存，并遵守集群管理器（如 Cloud Foundry 的 Diego、Kubernetes、Apache Mesos 和 Docker Swarm）规定的配额（如存储、计算和对象计数配额）。

容器在性能方面表现出色，而即将到来的“无服务器”计算（也称为功能即服务 - Function as a Service (FaaS)）将进一步扩大其优势。在 FaaS 时代，这些临时或短期的容器将带来超越应用程序性能的优势，直接转化为在云中托管的间接成本节省。如果容器的工作更快，其寿命就会更短，计算负载纯粹按需分配。

---
作者简介：

Garima 是 Red Hat 的工程经理，专注于 OpenShift 容器平台。在加入 Red Hat 之前，Garima 曾帮助 Akamai Technologies 和 MathWorks Inc. 开创创新。

---
via: 
作者：[Garima](https://opensource.com/users/garimavsharma) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出