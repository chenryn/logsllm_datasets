描述这个结构的一个ksy文件（）可以[在这里找到](https://courk.fr/wp-content/uploads/RFCOMM_packet.ksy)。
将此结构应用于我们之前使用的亮度控制效载荷：
    [-] [root]
      [-] header
        [.] unknown = 01 01 
        [.] packet_size = 11
        [.] protocol_version = 1
        [.] command_id = 2319
        [.] arguments_size = 6
      [-] arguments
        [-] argument (1 = 0x1 entries)
          [-] 0
            [-] argument_header
              [.] argument_id = 2317
              [.] argument_size = 2
            [.] argument_data = 01 0c
我没有尝试了解argument_data的第一个字节是什么，但第二个字节显然是表示亮度的值。
nm二进制码中的编码阵列使command
ID和相应的功能之间建立了一个对应关系。其中一些命令可能不是针对智能手机应用程序使用的。命令0x205，称为cmd_perso，特别有趣。
**cmd_perso命令**
命令cmd_perso可用于从电路板读取和写入配置数据。这个数据可以是：
• 设备独有的制造ID
• 某个服务器的主机名
一个“秘密”（我不知道这个秘密是做什么，而且我并没有试图去弄清楚它，我想这可能是在认证过程中要使用的）
该命令也可用于读写Uboot环境变量。最终可以用来重置用户设置。不用说这是一个相当危险的命令。此外，此命令的解析受到缓冲区溢出漏洞的影响。
要了解漏洞的位置，我们先来看看cmd_perso的参数。它具有以下结构。
上述 **的action_id** 允许选择一个动作：写或读一个变量，或重置用户设置。fields用于放置这些变量的名称和值。
描述这个结构的一个ksy文件（）可以[在这里找到](https://courk.fr/wp-content/uploads/cmd_perso.ksy)。
现在看看当接收到 **cmd_perso** 时调用的函数的开头。
    / (fcn) fcn.0x3ce4c 200
    |   fcn.0x3ce4c (int arg_110h, int arg_114h, int arg_118h);
    |           ; var int local_118h @ fp-0x118
    |           ; var int local_114h @ fp-0x114
    |           ; var int local_110h @ fp-0x110
    |           ; arg int arg_110h @ fp+0x110
    |           ; arg int arg_114h @ fp+0x114
    |           ; arg int arg_118h @ fp+0x118
    |           ; var int local_4h @ r13+0x4
    |           0x0003ce4c      00482de9       push {fp, lr}
    |           0x0003ce50      04b08de2       add fp, sp, 4
    |           0x0003ce54      12de4de2       sub sp, sp, 0x120
    |           0x0003ce58      10010be5       str r0, [fp - local_110h]
    |           0x0003ce5c      14110be5       str r1, [fp - local_114h]
    |           0x0003ce60      18210be5       str r2, [fp - local_118h]
    |           0x0003ce64      433f4be2       sub r3, fp, 0x10c
    |           0x0003ce68      0300a0e1       mov r0, r3
    |           0x0003ce6c      b945ffeb       bl sym.imp.wpp_init_perso
    |           0x0003ce70      18311be5       ldr r3, [fp - local_118h]
    |           0x0003ce74      0338a0e1       lsl r3, r3, 0x10
    |           0x0003ce78      2328a0e1       lsr r2, r3, 0x10
    |           0x0003ce7c      431f4be2       sub r1, fp, 0x10c
    |           0x0003ce80      8c309fe5       ldr r3, [0x0003cf14]        ; [0x3cf14:4]=0xdd30 sym.imp.wpp_unpack_perso
    |           0x0003ce84      00308de5       str r3, [sp]
    |           0x0003ce88      0100a0e1       mov r0, r1
    |           0x0003ce8c      14111be5       ldr r1, [fp - local_114h]
    |           0x0003ce90      80309fe5       ldr r3, [0x0003cf18]        ; [0x3cf18:4]=0x205
    |           0x0003ce94      9841ffeb       bl sym.imp.wpp_unpack_arg
    |           0x0003ce98      0030a0e1       mov r3, r0
    |           0x0003ce9c      000053e3       cmp r3, 0
    ...
在解析RFCOMM数据包的参数（参见上一节了解整个数据包结构）时存在问题。解析由第28行调用的函数wpp_unpack_arg完成。
wpp_unpack_arg函数将会被传入由wpp_init_perso函数（第18行）初始化的262个字节结构的参数。它将参数通过一个指针传入函数wpp_unpack_perso，
wpp_unpack_perso函数会解析cmd_perso数据包的载荷（第23行）。
wpp_unpack_perso多次调用memcpy函数来填充262个字节长的结构，但没有做边界检查，复制cmd_perso数据包参数的字段时可能会发生缓冲区溢出，将会覆盖保存在堆栈上的fp和lr寄存器。
**缓冲区溢出攻击**
为了利用这个缓冲区溢出，我选择使用众所周知的ROP技术。我遇到两个主要困难：
• 我没有在代码中找到更的ROP gadgets
• 每个字段的大小限制为0xff的长度
由于这两点，不可能建立一个长而复杂的ROP链。这就是为什么我决定以下列方式构建漏洞的原因：
• 构建一个能够写入几个字节的链以便找到可写地址。显然payload执行后，后面的指令必须要能正常执行。
• 构建另一个链，使用该可写地址作为参数调用 **system（）** 函数。
要构建第一个链，我使用以下gadget：
• “设置R3”gadget（从0x0000e840开始）：
    .-> 0x0000e798      24109fe5       ldr r1, [0x0000e7c4]        ; [0xe7c4:4]=0x5cc0c loc.__bss_start__
            |   0x0000e79c      24009fe5       ldr r0, [0x0000e7c8]        ; [0xe7c8:4]=0x5cc0c loc.__bss_start__
            |   0x0000e7a0      011060e0       rsb r1, r0, r1
            |   0x0000e7a4      4111a0e1       asr r1, r1, 2
            |   0x0000e7a8      a11f81e0       add r1, r1, r1, lsr 31
            |   0x0000e7ac      c110b0e1       asrs r1, r1, 1
            |   0x0000e7b0      1eff2f01       bxeq lr
            |   ....................................................
            |   0x0000e840      0840bde8       pop {r3, lr}
            `=