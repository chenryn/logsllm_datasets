eitherexplicitly,byrunningthe(freeze,index_cleanup false)command,or
viathevacuum_index_cleanupstorageparameter.Itisratherobviousthatitshould
notbedoneonaregularbasissinceinthiscasewillnotbecopingwellwith
itsmaintaskofpagecleanup.
Freezing Data at the Initial Loading
The data that is not expected to change can be frozen at once, while it is being
loadedintothedatabase.Itisdonebyrunningthecommandwiththe
option.
Tuplescanbefrozenduringtheinitialloadingonlyiftheresultingtablehasbeen
createdortruncatedwithinthesametransaction,asboththeseoperationsacquire
p. anexclusivelockonthetable. Thisrestrictionisnecessarybecausefrozentuples
areexpectedtobevisibleinallsnapshots,regardlessoftheisolationlevel;other-
wise,transactionswouldsuddenlyseefreshly-frozentuplesrightastheyarebeing
uploaded. But if the lock is acquired, other transactions will not be able to get
accesstothistable.
Nevertheless, it is still technically possible to break isolation. Let’s start a new
transactionattheRepeatableReadisolationlevelinaseparatesession:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT 1; -- the shapshot is built
Truncatethetfreezetableandinsertnewrowsintothistablewithinthesametrans-
action. (If the read-only transaction had already accessed the tfreeze table, the
commandwillbeblocked.)
150
7.4 ManualFreezing
=> BEGIN;
=> TRUNCATE tfreeze;
=> COPY tfreeze FROM stdin WITH FREEZE;
1 FOO
2 BAR
3 BAZ
\.
=> COMMIT;
Nowthereadingtransactionseesthenewdataaswell:
=> SELECT count(*) FROM tfreeze;
count
−−−−−−−
3
(1 row)
=> COMMIT;
It does break isolation,but since data loading is unlikely to happen regularly,in
mostcasesitwillnotcauseanyissues.
Ifyouloaddatawithfreezing,thevisibilitymapiscreatedatonce,andpagehead- v.
ersreceivethevisibilityattribute: p.
=> SELECT * FROM pg_visibility_map('tfreeze',0);
all_visible | all_frozen
−−−−−−−−−−−−−+−−−−−−−−−−−−
t | t
(1 row)
=> SELECT flags & 4 > 0 AS all_visible
FROM page_header(get_raw_page('tfreeze',0));
all_visible
−−−−−−−−−−−−−
t
(1 row)
Thus,ifthedatahasbeenloadedwithfreezing,thetablewillnotbeprocessedby v.
vacuum(aslongasthedataremainsunchanged).Unfortunately,thisfunctionality
isnotsupportedfortablesyet: ifanoversizedvalueisloaded,vacuumwill
havetorewritethewholetabletosetvisibilityattributesinallpageheaders.
151
8
Rebuilding Tables and Indexes
8.1 Full Vacuuming
Whyis RoutineVacuuming not Enough?
Routinevacuumingcanfreemorespacethanpagepruning,butsometimesitmay
stillbenotenough.
Iftableorindexfileshavegrowninsize,cancleanupsomespacewithin
pages,butitcanrarelyreducethenumberofpages.Thereclaimedspacecanonly
bereturnedtotheoperatingsystemifseveralemptypagesappearattheveryend
ofthefile,whichdoesnothappentoooften.
Anexcessivesizecanleadtounpleasantconsequences:
• Fulltable(orindex)scanwilltakelonger.
• Abiggerbuffercachemayberequired(pagesarecachedasawhole,sodata
densitydecreases).
• B-treescangetanextralevel,whichslowsdownindexaccess.
• Filestakeupextraspaceondiskandinbackups.
Ifthefractionofusefuldatainafilehasdroppedbelowsomereasonablelevel,an
administratorcanperformfullvacuuming byrunningthecommand.1
Inthiscase,thetableandallitsindexesarerebuiltfromscratch,andthedatais
p. packedasdenselyaspossible(takingthefillfactorparameterintoaccount).
1 postgresql.org/docs/14/routine-vacuuming.html#VACUUM-FOR-SPACE-RECOVERY
152
8.1 FullVacuuming
When full vacuuming is performed, Postgre first fully rebuilds the table and
then each of its indexes. While an object is being rebuilt,both old and new files
havetobestoredondisk,1sothisprocessmayrequirealotoffreespace.
Youshouldalsokeepinmindthatthisoperationfullyblocksaccesstothetable,
bothforreadsandwrites.
Estimating Data Density
Forthepurposeofillustration,let’sinsertsomerowsintothetable:
=> TRUNCATE vac;
=> INSERT INTO vac(id,s)
SELECT id, id::text FROM generate_series(1,500000) id;
Storagedensitycanbeestimatedusingthepgstattupleextension:
=> CREATE EXTENSION pgstattuple;
=> SELECT * FROM pgstattuple('vac') \gx
−[ RECORD 1 ]−−−−−−+−−−−−−−−−
table_len | 70623232
tuple_count | 500000
tuple_len | 64500000
tuple_percent | 91.33
dead_tuple_count | 0
dead_tuple_len | 0
dead_tuple_percent | 0
free_space | 381844
free_percent | 0.54
Thefunctionreadsthewholetableanddisplaysstatisticsonspacedistributionin
its files. The tuple_percent field shows the percentage of space taken up by use-
fuldata(heaptuples). Thisvalueisinevitablylessthan%becauseofvarious
metadatawithinpages,butinthisexampleitisstillquitehigh.
Forindexes,thedisplayedinformationdiffersabit,buttheavg_leaf_densityfield
hasthesamemeaning:itshowsthepercentageofusefuldata(in-treeleafpages).
1 backend/commands/cluster.c
153
Chapter8 RebuildingTablesandIndexes
=> SELECT * FROM pgstatindex('vac_s') \gx
−[ RECORD 1 ]−−−−−−+−−−−−−−−−−
version | 4
tree_level | 3
index_size | 114302976
root_block_no | 2825
internal_pages | 376
leaf_pages | 13576
empty_pages | 0
deleted_pages | 0
avg_leaf_density | 53.88
leaf_fragmentation | 10.59
Thepreviouslyusedpgstattuplefunctionsreadthetableorindexinfulltogetthe
precise statistics. For large objects, it can turn out to be too expensive, so the
extension also provides another function called pgstattuple_approx, which skips
thepagestrackedinthevisibilitymaptoshowapproximatefigures.
Afasterbutevenlessaccuratemethodistoroughlyestimatetheratiobetweenthe
datavolumeandthefilesizeusingthesystemcatalog.1
Herearethecurrentsizesofthetableanditsindex:
=> SELECT pg_size_pretty(pg_table_size('vac')) AS table_size,
pg_size_pretty(pg_indexes_size('vac')) AS index_size;
table_size | index_size
−−−−−−−−−−−−+−−−−−−−−−−−−
67 MB | 109 MB
(1 row)
Nowlet’sdelete%ofalltherows:
=> DELETE FROM vac WHERE id % 10 != 0;
DELETE 450000
Routinevacuumingdoesnotaffectthefilesizebecausetherearenoemptypages
attheendofthefile:
=> VACUUM vac;
1 wiki.postgresql.org/wiki/Show_database_bloat
154
8.1 FullVacuuming
=> SELECT pg_size_pretty(pg_table_size('vac')) AS table_size,
pg_size_pretty(pg_indexes_size('vac')) AS index_size;
table_size | index_size
−−−−−−−−−−−−+−−−−−−−−−−−−
67 MB | 109 MB
(1 row)
However,datadensityhasdroppedabouttimes:
=> SELECT vac.tuple_percent, vac_s.avg_leaf_density
FROM pgstattuple('vac') vac, pgstatindex('vac_s') vac_s;
tuple_percent | avg_leaf_density
−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−
9.13 | 6.71
(1 row)
Thetableandtheindexarecurrentlylocatedinthefollowingfiles:
=> SELECT pg_relation_filepath('vac') AS vac_filepath,
pg_relation_filepath('vac_s') AS vac_s_filepath \gx
−[ RECORD 1 ]−−+−−−−−−−−−−−−−−−−−
vac_filepath | base/16391/16514
vac_s_filepath | base/16391/16515
Let’scheckwhatwewillgetafter.Whilethecommandisrunning,its v.
progresscanbetrackedinthepg_stat_progress_clusterview(whichissimilartothe
pg_stat_progress_vacuumviewprovidedfor):
=> VACUUM FULL vac;
=> SELECT * FROM pg_stat_progress_cluster \gx
−[ RECORD 1 ]−−−−−−−+−−−−−−−−−−−−−−−−−
pid | 19492
datid | 16391
datname | internals
relid | 16479
command | VACUUM FULL
phase | rebuilding index
cluster_index_relid | 0
heap_tuples_scanned | 50000
heap_tuples_written | 50000
heap_blks_total | 8621
heap_blks_scanned | 8621
index_rebuild_count | 0
155
Chapter8 RebuildingTablesandIndexes
Expectedly,phases1differfromthoseofroutinevacuuming.
Fullvacuuminghasreplacedoldfileswithnewones:
=> SELECT pg_relation_filepath('vac') AS vac_filepath,
pg_relation_filepath('vac_s') AS vac_s_filepath \gx
−[ RECORD 1 ]−−+−−−−−−−−−−−−−−−−−
vac_filepath | base/16391/16526
vac_s_filepath | base/16391/16529
Bothindexandtablesizesaremuchsmallernow:
=> SELECT pg_size_pretty(pg_table_size('vac')) AS table_size,
pg_size_pretty(pg_indexes_size('vac')) AS index_size;
table_size | index_size
−−−−−−−−−−−−+−−−−−−−−−−−−
6904 kB | 6504 kB
(1 row)
As a result,data density has increased. For the index,it is even higher than the
originalone: itismoreefficienttocreatea-treefromscratchbasedontheavail-
abledatathantoinsertentriesrowbyrowintoanalreadyexistingindex:
=> SELECT vac.tuple_percent,
vac_s.avg_leaf_density
FROM pgstattuple('vac') vac,
pgstatindex('vac_s') vac_s;
tuple_percent | avg_leaf_density
−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−
91.23 | 91.08
(1 row)
Freezing
Whenthetableisbeingrebuilt,Postgrefreezesitstuplesbecausethisopera-
tioncostsalmostnothingcomparedtotherestofthework:
1 postgresql.org/docs/14/progress-reporting.html#CLUSTER-PHASES
156
8.1 FullVacuuming
=> SELECT * FROM heap_page('vac',0,0) LIMIT 5;
ctid | state | xmin | xmin_age | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−−−−+−−−−−−
(0,1) | normal | 861 f | 5 | 0 a
(0,2) | normal | 861 f | 5 | 0 a
(0,3) | normal | 861 f | 5 | 0 a
(0,4) | normal | 861 f | 5 | 0 a
(0,5) | normal | 861 f | 5 | 0 a
(5 rows)
Butpagesareregisteredneitherinthevisibilitymapnorinthefreezemap,andthe
pageheaderdoesnotreceivethevisibilityattribute(asithappenswhenthe
commandisexecutedwiththeoption): p.
=> SELECT * FROM pg_visibility_map('vac',0);
all_visible | all_frozen
−−−−−−−−−−−−−+−−−−−−−−−−−−
f | f
(1 row)
=> SELECT flags & 4 > 0 all_visible
FROM page_header(get_raw_page('vac',0));
all_visible
−−−−−−−−−−−−−
f
(1 row)
Thesituationimprovesonlyafteriscalled(orautovacuumistriggered):
=> VACUUM vac;
=> SELECT * FROM pg_visibility_map('vac',0);
all_visible | all_frozen
−−−−−−−−−−−−−+−−−−−−−−−−−−
t | t
(1 row)
=> SELECT flags & 4 > 0 AS all_visible
FROM page_header(get_raw_page('vac',0));
all_visible
−−−−−−−−−−−−−
t
(1 row)
157
Chapter8 RebuildingTablesandIndexes
Itessentiallymeansthatevenifalltuplesinapagearebeyondthedatabasehori-
zon,suchapagewillstillhavetoberewritten.
8.2 Other Rebuilding Methods
Alternatives to FullVacuuming
Inadditionto,thereareseveralothercommandsthatcanfullyrebuild
tablesandindexes.Allofthemexclusivelylockthetable,allofthemdeleteolddata
filesandrecreatethemanew.
Thecommandisfullyanalogousto,butitalsoreorderstuples
infilesbasedononeoftheavailableindexes.Insomecases,itcanhelptheplanner
useindexscansmoreefficiently. Butyoushouldbearinmindthatclusterization
is not supported: all further table updates will be breaking the physical order of
tuples.
Programmatically,   is simply a special instance of the  com-
mandthatdoesnotrequiretuplereordering.1
The  command rebuilds one or more indexes.2 In fact,   and
usethiscommandunderthehoodwhenrebuildingindexes.
Thecommand3 deletesalltablerows;itisalogicalequivalentof
p. runwithouttheclause.Butwhilesimplymarksheaptuplesasdeleted
(so they still have to be vacuumed),  creates a new empty file, which is
usuallyfaster.
Reducing Downtime during Rebuilding
p. isnotmeanttoberunregularly,asitexclusivelylocksthetable(even
forqueries)forthewholedurationofitsoperation. Thisisusuallynotanoption
forhighlyavailablesystems.
1 backend/commands/cluster.c
2 backend/commands/indexcmds.c
3 backend/commands/tablecmds.c,ExecuteTruncatefunction
158
8.3 PreventiveMeasures
There are several extensions (such as pg_repack1) that can rebuild tables and in-
dexeswithalmostzerodowntime.Anexclusivelockisstillrequired,butonlyatthe
beginningandattheendofthisprocess,andonlyforashorttime. Itisachieved
by a more complex implementation: all the changes made on the original table
whileitisbeingrebuiltaresavedbyatriggerandthenappliedtothenewtable.To
completetheoperation,theutilityreplacesonetablewiththeotherinthesystem
catalog.
Anunconventionalsolutionisofferedbythepgcompacttableutility.2 Itperforms
multiplefakerowupdates(thatdonotchangeanydata)sothatcurrentrowver-
sionsgraduallymovetowardsthestartofthefile.
Between these update series,vacuuming removes outdated tuples and truncates p.