title:ProMACs: Progressive and Resynchronizing MACs for Continuous Efficient
Authentication of Message Streams
author:Frederik Armknecht and
Paul Walther and
Gene Tsudik and
Martin Beck and
Thorsten Strufe
ProMACs: Progressive and Resynchronizing MACs for
Continuous Efficient Authentication of Message Streams
Frederik Armknecht‚àó
University of Mannheim
Paul Walther‚àó
Gene Tsudik
UC Irvine
Germany
TU Dresden
Germany
PI:EMAIL
PI:EMAIL
USA
PI:EMAIL
Martin Beck
TU Dresden
Germany
PI:EMAIL
ABSTRACT
Efficiently integrity verification of received data requires Message
Authentication Code (MAC) tags. However, while security calls for
rather long tags, in many scenarios this contradicts other require-
ments. Examples are strict delay requirements (e.g., robot or drone
control) or resource-scarce settings (e.g., LoRaWAN networks with
limited battery capacity).
Prior techniques suggested truncation of MAC tags, thus trading
off linear performance gain for exponential security loss. To achieve
security of full-length MACs with short(er) tags, we introduce Pro-
gressive MACs (ProMACs) ‚Äì a scheme that uses internal state to
gradually increase security upon reception of subsequent messages.
We provide a formal framework and propose a provably secure,
generic construction called Whips. We evaluate applicability of
ProMACs in several realistic scenarios and demonstrate example
settings where ProMACs can be used as a drop-in replacement for
traditional MACs.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Hash functions and message au-
thentication codes; Formal security models; Domain-specific
security and privacy architectures; ‚Ä¢ Theory of computation ‚Üí
Cryptographic primitives.
KEYWORDS
Message Authentication Codes, Stream Authentication, Progressing
Security, Sensor Networks, Drone Control, Robot Control
ACM Reference Format:
Frederik Armknecht, Paul Walther, Gene Tsudik, Martin Beck, and Thorsten
Strufe. 2020. ProMACs: Progressive and Resynchronizing MACs for Con-
tinuous Efficient Authentication of Message Streams. In Proceedings of the
‚àóBoth authors contributed equally to the paper
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ‚Äô20, November 9‚Äì13,2020, Virtual Event, USA
¬© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423349
Thorsten Strufe
KIT and CeTI TU Dresden
Germany
PI:EMAIL
2020 ACM SIGSAC Conference on Computer andCommunications Security
(CCS ‚Äô20), November 9‚Äì13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 13 pages. https://doi.org/10.1145/3372297.3423349
1 INTRODUCTION
Verifying authenticity and integrity of received data (e.g., a packet
stream) is usually achieved by appending a Message Authentication
Code (MAC) tag to each packet. Increasing the tag length linearly
yields exponential security gains (up to the key size). The use of
long(er) per packet MAC tags is typically justified by high (and
growing) network speeds and large packet sizes in many application
domains.
However, some recent and emerging communication settings
impose ultra-low latency requirements and involve low-power de-
vices, which makes the bandwidth overhead of long MAC tags to
be too high. Examples include: the Internet of Things (IoT) with
small battery-operated devices, vehicular communication, as well
as robot and drone control. Communication in these examples is
characterized by very high frequency streams of very small control
packets that are subject to very strict timing constraints. Similar re-
quirements occur in distributed control loops [52]. Thus far, the fact
that communication usually comprises long sequences of tightly
spaced packets has not been exploited to improve security.
Drone control [3] requires wireless transmission of thousands
of small (a few bytes to tens of bytes in size) packets, fully utilizing
the available bandwidth of the wireless channel [22]. Given their
control of physical hardware, all commands must be authenticated
individually in their specific context. As context and criticality of
control messages varies over the course of operation, the required
security level changes accordingly. In contrast, LoRaWAN devices
in the IoT domain are optimized to transmit as few bytes, as rarely
as possible due to energy limitations [2]. All unnecessary data
and re-transmissions cause battery drain and diminish the overall
utility and longevity of the system; in particular, this means that
implicit resynchronization in cases of packet loss is preferable to
explicit retransmissions. Even the cost of memory and the resulting
storage limitations can limit the applicability of traditional MACs,
as in the case of the Memory Encryption Engine in Intel SGX [25].
Various other domains share these requirements, such as in-car
communication [50], haptic feedback controls [34], radio networks
signalling [40], and even System/Network-on-Chip communication
[39].
In summary, there are many practical use-cases that require
authentication of message streams under the following conditions:
(1) Direct authentication of each packet immediately upon (or
at most shortly after) its reception
(2) Tag sizes should be minimized to reduce bandwidth overhead
(3) High security guarantees, i.e. comparable to traditional MAC
(4) Ability to resynchronize without explicit protocol communi-
schemes
cation
Figure 1: Achieved security level of progressive MACs (bot-
tom), compared to simple truncation (top), with identical
communication cost ‚Äì tags truncated to 64 bits, internal
MAC/key of 256-bit length each.
As discussed in Section 2 below, no prior work satisfies all of
these conditions. To fill the gap, we propose the concept of Progres-
sive MACs (ProMACs). In a nutshell, ProMACs extend (possibly
truncated) MACs with a modest amount of dynamic internal state
on the receiver side. This allows for implicit verification of older
packets as more recent tags are received and results in progres-
sively increasing level of security. As shown at the bottom of Fig.
1, each packet reception yields immediate integrity verification
with the security level of 64 bits, which improves upon reception
of subsequent packets. Individual tag sizes can still be chosen to
be small enough to reduce communication and verification costs,
or large enough for security critical packets. Moreover, internal
state computation allows implicit resynchronisation without extra
communication overhead.
The contributions of this paper are:
Formal Framework: We present a formal definition of ProMACs
which formalizes stream integrity schemes that achieve in-
creased security through progressive verification of packet
streams. Moreover, we show that ProMACs extends the no-
tion of standard MACs, i.e., any MAC scheme can be seen as
an instantiation of ProMACs.
Generic Construction: We describe a generic construction of
ProMACs based on pseudorandom functions (PRFs) and
prove its security.
Experiments: Prototype implementations demonstrate the sub-
stantial speed-up and cost reduction in realistic settings.
The rest of the paper is organized as follows: Section 2 motivates
aforementioned requirements and argues that prior schemes are
unable to satisfy all of them. Next, Section 3 describes some neces-
sary background concepts. Then, Section 4 introduces ProMACs
in an intuitive manner, followed by a formal definition and secu-
rity arguments, and concludes with the discsussion of ProMACs‚Äô
relationship to classical MACs and duplex constructions. Section 5
constructs a ProMAC instance and proves its security properties. In
Section 6, this construction is evaluated in realistic settings and its
performance and security claims are evaluated. Section 7 concludes
the paper.
2 REQUIREMENTS AND RELATED WORK
We start by motivating the requirements sketched out in Section 1.
We then discuss relevant prior work and show that none of it
satisfies all of these requirements, thus motivating a new design.
2.1 Requirements
We consider a scenario that involves two parties that share a secret
ùëò and exchange packet streams. Packets are sent over an insecure
channel controlled by an active attacker that can inject, delete and
manipulate traffic. Our objective is to protect the integrity of these
streams at the packet level. Since the number of packets in a stream
may not be known beforehand, or because different packets may
have different levels of security criticality (see below), we have
Requirement I: Each packet should be authenticated immediately
upon (or briefly after) its reception.
The common approach to packet stream integrity is to introduce
a per packet MAC tag. However for high-frequency streams of short
packets, transmission of a full MAC tag amounts to appreciable
overhead, as can be seen from the ratio of payload- to tag-length.
Applications controlling robots or drones, generate thousands of
packets per second [34], and that their delivery has to be guaranteed
with latency on the order of milliseconds [22], at an effective packet
loss rate of under 10‚àí9 in manufacturing environments. This agrees
with [52] for Tactile Internet applications (or any control loop
with haptic feedback) and [3] for drone control. For the latter, we
expect packet sizes of dozens of bytes [3], while robot control
packets are in a 15-20 byte range [19, 48]. Providing acceptable
integrity of such a packet stream with a standard HMAC-SHA256
translates to extending each payload by 32 bytes. This results in
an overhead of ‚âà 200%, clearly rendering timely delivery for robot
control applications impossible.
Another example is 802.15.4 ‚Äì the foundation of ZigBee and one
of the standard communication technologies for remote control. In
802.15.4, a millisecond delay can only be achieved with packet sizes
under 30 bytes [24]. Consequently, we deduce
Requirement II: Tag sizes should be minimized to reduce com-
munication overhead.
Of course it is possible to lower bandwidth overhead caused by
MAC tags by simply reducing their bit-size. This yields a linear
performance gain, as fewer bits are transmitted, yet it also results
in an exponential security loss, since only transmitted tag bits are
available to check each packet‚Äôs integrity. This can threaten safety
and security of underlying applications (see top of Fig. 1) and is
generally not acceptable in all use-cases [41].
Approach
Req. I Req. II Req. III Req. IV
Common MAC
Truncated MAC
MAC over
aggregated packets
Aggregated MACs
Stateful MACs
ProMAC
‚úì
‚úì
-
‚úì
‚úì
‚úì
-
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
-
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
‚úì
-
-
‚úì
Table 1: Overview of other prominent MAC schemes with
respect to requirements I‚ÄìIV.
However, in several settings corruption of single packets in a
stream might be acceptable, as long as most packets are verified and
corruptions are still detected. This is particularly relevant to use-
cases where retransmissions are undesirable, e.g., in video stream-
ing, due to high data volume, a single corrupted frame might only be
perceived as glitch, or in LoRaWAN sensors each packet transmis-
sion is costly and retransmissions must be avoided. Thus, detection
of a single corrupted packet should be viewed as a normal event,
which should not adversely affect the entire packet stream. Whereas,
in prior techniques, a single packet authentication error leads to a
stream reset, which includes tearing down the current session and
establishing a new one. Consequently, it is desirable to have higher
than the security of plain tag truncation.
Requirement III: High security guarantees in the long term, i.e.
comparable to traditional MAC schemes and above the secu-
rity of plain tag truncation.
Finally, communication (especially wireless) is subject to occa-
sional transmission failures, e.g., malformed or dropped packets.
Within the described use-cases it is much more sensible to keep the
packet stream running and to allow for implicit resynchronization.
Consequently, any practical security approach should support
Requirement IV: Ability to resynchronize without explicit pro-
tocol communication.
2.2 Related Work
We now demonstrate that prior relevant prior techniques do not
satisfy all four requirements identified above. An overview is shown
in Table 1.
2.2.1 Common MACs. As pointed out, the standard approach for
ensuring packet integrity is to use common MACs, e.g., [4, 7, 10,
11, 27]; see Section 3.1 for a formal MAC definition. Althought
appending a single full-blown MAC tag to each packet allows for