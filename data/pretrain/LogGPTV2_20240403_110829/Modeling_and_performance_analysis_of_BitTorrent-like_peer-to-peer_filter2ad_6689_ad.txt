that the system scales very well. In other words, even very
popular ﬁles can be downloaded at the same speed as less
popular ﬁles.
6.2 Experiment 2
 λ=0.04
 λ=0.4
 λ=4
 λ=40
 simple fluid model
250
200
150
100
50
s
d
e
e
s
f
o
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N
0
0
1000
2000
3000
4000
5000
 time (min)
Figure 3: Experiment 2 : The evolution of the num-
ber of seeds
In Figs. 3 and 4, we have the same setting as the ﬁrst
experiment, except that now we set γ = 0.005. With the
change of γ, the uploading bandwidth now becomes the bot-
tleneck. In this setting, we have the similar result as before.
Again, we see that the simple ﬂuid model is accurate when
λ is large, but performs well even for smaller λ. We also plot
the histogram of ˆx and ˆy in Figs. 5 and 6,
xsim(t) − x(t)
ˆx(t) =
√
λ
and
ˆy(t) =
ysim(t) − y(t)
√
λ
,
where xsim(t) and ysim(t) are the number of downloaders
and seeds respectively in the actual simulation and x(t) and
y(t) are the number of downloaders and seeds in determin-
istic ﬂuid model. From the theory presented in Section 3.4,
500
450
400
350
300
250
200
150
100
50
s
r
e
d
a
o
n
w
o
d
l
f
o
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N
0
0
1000
 λ=0.04
 λ=0.4
 λ=4
 λ=40
 simple fluid model
2000
3000
4000
5000
 time (min)
Figure 4: Experiment 2 : The evolution of the num-
ber of downloaders
1600
1400
1200
*
y
f
1000
o
m
a
r
g
o
t
s
H
i
800
600
400
200
0
−40
 λ=0.04
 λ=0.4
 λ=4
 λ=40
−20
0
 y*
20
40
60
Figure 5: Experiment 2 : Histogram of the variation
of the number of seeds around the ﬂuid model
we expect the histograms to look roughly Gaussian and this
fact is borne out by the ﬁgures for suﬃciently large λ. We
can see that the variance of ˆx and ˆy do not change much
when λ changes from 0.04 to 40.
6.3 Experiment 3
In this experiment, we introduced a ﬁle into the BitTor-
rent network and collected the log ﬁles of the BitTorrent
tracker for a time period of around three days. When a
peer joins/leaves the system or completes the download, it
reports the event to the tracker.
In addition, peers regu-
larly report information such as the total amount of data
uploaded/downloaded so far, the number of bytes that still
need to be downloaded, etc. The tracker keeps all the infor-
mation in the log ﬁles. Hence, we can analyze the tracker
log ﬁles and retrieve useful information. The parameters
λ, θ, and γ can be measured by counting the peer arrival,
the downloader departure, and the seed departure respec-
tively. However, from the tracker log ﬁles, we cannot deter-
mine whether the uploading bandwidth or the downloading
bandwidth is the bottleneck. So we assume the uploading
bandwidth is the bottleneck and estimate µ by dividing the
measured total uploading rate by the number of peers (i.e.,
 λ=0.04
 λ=0.4
 λ=4
 λ=40
1200
1000
800
600
400
200
*
x
f
o
m
a
r
g
o
t
s
H
i
0
−60
−40
−20
0
 x*
20
40
60
s
d
e
e
s
f
o
r
e
b
m
u
n
20
18
16
14
12
10
8
6
4
2
0
0
1000
 fluid model
 real trace
4000
5000
2000
3000
 time (min)
Figure 6: Experiment 2 : Histogram of the varia-
tion of the number of downloaders around the ﬂuid
model
Figure 7: Experiment 3 : Evolution of the number
of seeds
we assume that η = 1). The size of the ﬁle that was in-
troduced was around 530M B. The average uploading band-
width was estimated to be 90kb/s. We use 1 min as the time
unit to calculate arrival rates, departure rates, etc. The nor-
malized uploading bandwidth (normalized by the ﬁle size in
bytes) was estimated µ = 0.0013. The downloader leaving
rate was estimated to be θ = 0.001. An interesting feature
that we observed in the real BitTorrent is that λ and γ are
in fact time-varying. We attribute this to the fact that when
a new ﬁle is introduced into the system, the ﬁrst few seeds
stay in the system long enough to ensure that there is a
suﬃcient population of peers to sustain the system. If the
initial seeds depart too quickly, the system will simply die,
i.e., there will be no one to download from.
From the tracker logs, we estimate that, for t ≤ 800min,
λ = 0.06 and γ = 0.001. When t ≥ 1300min, λ = 0.03 and
γ = 0.0044. In between, the arrival rate increases roughly
linearly.
In our ﬂuid model simulation, for time between
800min and 1300min, we let λ and γ change linearly. We
also set the downloading bandwidth c = 1 for the ﬂuid model
simulation (note that the actual value of c will not aﬀect the
ﬂuid model results if it is above a certain threshold).
The simulation results are shown in Figs 7 and 8. The
real trace is measured from the tracker log ﬁle and the ﬂuid
model is calculated by using the above measured parame-
ters. For the ﬂuid model, we also numerically calculate the
standard deviation from the steady state network parame-
ters by using (14) and plot the error bar for 95% conﬁdence
intervals. From Fig. 7, we see that the ﬂuid model captures
the evolution of the number of seeds well.
In Fig. 8, the
oscillation of the number of downloaders is more signiﬁcant.
This is because that the ﬁle is not very popular and the
arrival rate λ is small. Hence, our model is only an approx-
imation of the real network. But despite this, we can see
that the oscillation is within the level suggested by the 95%
conﬁdence interval.
7. CONCLUSIONS
In this paper, we ﬁrst presented a simple ﬂuid model for
BitTorrent-like networks and studied the steady-state net-
work performance. Speciﬁcally, we obtained expressions for
25
20
15
10
s
r
e
d
a
o
n
w
o
d
l
f
o
r
e
b
m
u
n
5
0
0
1000
 fluid model
 real trace
4000
5000
2000
3000
 time (min)
Figure 8: Experiment 3 : Evolution of the number
of downloaders
the average number of seeds, the average number of down-
loaders, and the average downloading time as functions of
the peer arrival rate, downloader leaving rate, seed leav-
ing rate, uploading bandwidth, etc, which explicitly give
us insight on how the network performance is aﬀected by
diﬀerent parameters. We also characterized the variability
of the system by applying limit theorems to the stochastic
model when the arrival rate is large. We then abstracted
the built-in incentive mechanism of BitTorrent and studied
its eﬀect on network performance. Under certain conditions,
we proved that a Nash equilibrium exists, under which each
peer chooses its physical uploading bandwidth to be equal to
the actual uploading bandwidth. We also brieﬂy discussed
the eﬀect of optimistic unchoking on free-riding. Our experi-
mental results show that the simple ﬂuid model can capture
the behavior of the system even when the arrival rate is
small.
8. REFERENCES
[1] Entropia. http://www.entropia.com.
[2] Top applications (bytes) for subinterface: SD-NAP
traﬃc, 2002.
www.caida.org/analysis/workload/byapplication/sdnap.
[3] L. Arnold. Stochastic Diﬀerential Equations: Theory
and Applications. John Wiley, New York, NY, 1974.
[4] D. Bertsekas and R. Gallager. Data Networks.
Prentice Hall, Englewood Cliﬀs, NJ, 1987.
[15] S. Iyer, A. Rowstron, and P. Druschel. Squirrel: A
decentralized peer-to-peer web cache. In Proceedings
of ACM Symposium on Principles of Distributed
Computing (PODC ’02), Monterey, California, 2002.
[5] P. Billingsley. Convergence of Probability Measures.
[16] D. Liberzon and A. Morse. Basic problems in stability
Wiley, 1968.
[6] F. Clevenot and P. Nain. A Simple Fluid Model for
the Analysis of the Squirrel Peer-to-Peer Caching
System. In Proceedings of IEEE INFOCOM, 2004.
[7] F. Clevenot, P. Nain, and K. Ross. Stochastic Fluid
Models for Cache Clusters. Technical Report 4815,
INRIA, Sophia Antipolis, 2003. To appear in
Performance Evaluation.
[8] B. Cohen. Incentives build robustness in bittorrent,
May 2003. http://bitconjurer.org/BitTorrent
/bittorrentecon.pdf.
[9] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and
I. Stoica. Wide-area cooperative storage with CFS. In
Proceedings of the 18th ACM Symposium on Operating
Systems Principles (SOSP ’01), Chateau Lake Louise,
Banﬀ, Canada, October 2001.
[10] A. Das and R. Srikant. Diﬀusion approximations for a
single node accessed by congestion-controlled sources.
IEEE Transactions on Automatic Control,
45(10):1783–1799, October 1998.
[11] G. de Veciana and X. Yang. Fairness, incentives and
performance in peer-to-peer networks. In the
Forty-ﬁrst Annual Allerton Conference on
Communication, Control and Computing, Monticello,
IL, Oct. 2003.
[12] S. N. Ethier and T. G. Kurtz. Markov Processes:
Characterization and Convergence. Wiley, 1994.
[13] Z. Ge, D. R. Figueiredo, S. Jaiswal, J. Kurose, and
D. Towsley. Modeling peer-peer ﬁle sharing systems.
In Proceedings of IEEE INFOCOM, 2003.
[14] P. W. Glynn. On the Markov property of the
GI/G/∞ Gaussian limit. Advances in Applied
Probability, 14:191–194, 1982.
and design of switched systems. IEEE Control
Systems Magazine, pages 59–70, 1999.
[17] T. S. Eugene Ng, Y.-H. Chu, S. G. Rao,
K. Sripanidkulchai, and Hui Zhang.
Measurement-Based Optimization Techniques for
Bandwidth-Demanding Peer-To-Peer Systems. In
Proceedings of IEEE INFOCOM, 2003.
[18] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
S. Shenker. A scalable content addressable network. In
Proceedings of ACM SIGCOMM, 2001.
[19] M. Ripeanu. Peer-to-peer architecture case study:
Gnutella network. Technical report, University of
Chicago, 2001.
[20] M. Ripeanu, I. Foster, and A. Iamnitchi. Mapping the
gnutella network: Properties of large-scale
peer-to-peer systems and implications for system
design. IEEE Internet Computing Journal, 6(1), 2002.
[21] I. Stoica, R. Morris, D. Karger, M. Kaashoek, and
H. Balakrishman. Chord: A scalable peer-to-peer
lookup protocol for internet applications. In
Proceedings of ACM SIGCOMM, 2001.
[22] W. Whitt. On the heavy-traﬃc limit theorems for
GI/G/∞ queues. Advances in Applied Probability,
14:171–190, 1982.
[23] W. Whitt. Stochastic Process Limits. Springer, 2002.
[24] X. Yang and G. de Veciana. Service Capacity of Peer
to Peer Networks. In Proceedings of IEEE INFOCOM,
2004.