最近CTF中TP反序列化考的比较频繁，从前段时间的N1CTF到最近的安洵杯都利用了ThinkPHP反序列化，疯狂填坑，审计挖掘了下TP5、TP6反序列化中的利用链，本篇主要总结下TP6利用链的挖掘思路。小白文章，大佬们请略过。。。
TP5反序列化入口都是在Windows类的析构方法，通过`file_exists()`函数触发`__toString`
魔术方法，然后以`__toString`为中间跳板寻找代码执行点，造成反序列化任意命令执行。有关TP5的分析可以看[挖掘暗藏thinkphp中的反序列利用链](https://blog.riskivy.com/%e6%8c%96%e6%8e%98%e6%9a%97%e8%97%8fthinkphp%e4%b8%ad%e7%9a%84%e5%8f%8d%e5%ba%8f%e5%88%97%e5%88%a9%e7%94%a8%e9%93%be/)这篇文章，感觉分析的思路比较好，本篇分析TP6，也是按照文中的思路来的。
TP6的不同之处就是没有了Windows类，也就无法利用其中的析构方法作为反序列化入口，需要重新挖掘其他入口点。
## 基础知识
### 1.PHP反序列化
序列化：将php值转换为可存储或传输的字符串，目的是防止丢失其结构和数据类型。
反序列化：序列化的逆过程，将字符串再转化成原来的php变量，以便于使用。
简单来说，就是涉及php中的serialize与unserialize两个函数。
### 2.PHP魔术方法
魔术方法：在php中以两个下划线字符（__）开头的方法，方法名都是PHP预先定义好的，之所以称为`魔术方法`
就是这些方法不需要显示的调用而是由某种特定的条件触发执行。
常用的魔术方法：
`__constuct`: 构建对象的时被调用
`__destruct`: 明确销毁对象或脚本结束时被调用
`__wakeup`: 当使用unserialize时被调用，可用于做些对象的初始化操作
`__sleep`: 当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用
`__call`: 调用不可访问或不存在的方法时被调用
`__callStatic`: 调用不可访问或不存在的静态方法时被调用
`__set`: 当给不可访问或不存在属性赋值时被调用
`__get`: 读取不可访问或不存在属性时被调用
`__isset`: 对不可访问或不存在的属性调用isset()或empty()时被调用
`__unset`: 对不可访问或不存在的属性进行unset时被调用
`__invoke`: 当以函数方式调用对象时被调用
`__toString`: 当一个类被转换成字符串时被调用
`__clone`: 进行对象clone时被调用，用来调整对象的克隆行为
`__debuginfo`: 当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本
`__set_state`: 当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值
### 3.反序列化漏洞利用过程
反序列化漏洞就是通过多个类，赋予一定条件，使其自动调用魔术方法，最终达到代码执行点。过程包括起点、中间跳板、终点。
#### 起点
最常用的就是反序列化时触发的魔术方法：
`__destruct`: 明确销毁对象或脚本结束时被调用
`__wakeup`: 当使用unserialize时被调用，可用于做些对象的初始化操作
有关字符串操作可以触发的魔术方法：
`__toString`: 当一个类被转换成字符串时被调用
触发的情况有：
    用到打印有关函数时，如echo/ print等
    拼接字符串时
    格式化字符串时
    与字符串进行==比较时
    格式化SQL语句，绑定参数时
    数组中有字符串时
#### 中间跳板
`__toString`: 当一个类被转换成字符串时被调用
`__call`: 调用不可访问或不存在的方法时被调用
`__callStatic`: 调用不可访问或不存在的静态方法时被调用
`__set`: 当给不可访问或不存在属性赋值时被调用
`__get`: 读取不可访问或不存在属性时被调用
`__isset`: 对不可访问或不存在的属性调用isset()或empty()时被调用
#### 终点
`__call`: 调用不可访问或不存在的方法时被调用
`call_user_func`、`call_user_func_array`等代码执行点
## 利用链挖掘
主要分析三篇利用链的挖掘思路，网上也有很多分析，但是发现很多POC都不能用，因此自己分析构造下POC。
### 1.环境搭建
TP6.0安装参照Thinkphp6手册，从5.2版本开始不能利用下载的方法，需要利用composer。
    composer create-project topthink/think TP-6.0 6.0.*-dev
### 2.利用起点
起点的挖掘可以利用直接搜索常用入口魔法函数的方法。
第一条利用链选择从`Model`类分析：
`vendor/topthink/think-orm/src/Model.php`
满足`$this->lazySave` 为true 就可以进入`save` 方法，跟进下`save`方法：
发现满足条件就可以进入`updateData` 方法：
    if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
        return false;
    }
    $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
需要满足：
    $this->isEmpty()为false
    $this->trigger('BeforeWrite') 为true
    $this->exists 为true
跟进下：
    $this->isEmpty()为false 需要$this->data不为空
    $this->trigger('BeforeWrite') 为true 需要$this->withEvent 为false
    $this->exists 为true
进入`updateData`函数：
    protected function updateData(): bool
    {
        // 事件回调
        if (false === $this->trigger('BeforeUpdate')) {
            return false;
        }
        $this->checkData();
        // 获取有更新的数据
        $data = $this->getChangedData();
        if (empty($data)) {
            // 关联更新
            if (!empty($this->relationWrite)) {
                $this->autoRelationUpdate();
            }
            return true;
        }
        if ($this->autoWriteTimestamp && $this->updateTime && !isset($data[$this->updateTime])) {
            // 自动写入更新时间
            $data[$this->updateTime]       = $this->autoWriteTimestamp($this->updateTime);
            $this->data[$this->updateTime] = $data[$this->updateTime];
        }
        // 检查允许字段
        $allowFields = $this->checkAllowFields();
        foreach ($this->relationWrite as $name => $val) {
            if (!is_array($val)) {
                continue;
            }
            foreach ($val as $key) {
                if (isset($data[$key])) {
                    unset($data[$key]);
                }
            }
        }
        // 模型更新
        $db = $this->db();
        $db->startTrans();
        try {
            $this->key = null;
            $where     = $this->getWhere();
            $result = $db->where($where)
                ->strict(false)
                ->cache(true)
                ->setOption('key', $this->key)
                ->field($allowFields)
                ->update($data);
            $this->checkResult($result);
            // 关联更新
            if (!empty($this->relationWrite)) {
                $this->autoRelationUpdate();
            }
            $db->commit();
            // 更新回调
            $this->trigger('AfterUpdate');
            return true;
        } catch (\Exception $e) {
            $db->rollback();
            throw $e;
        }
    }
然后跟进函数分析，发现`checkAllowFields`函数的`db` 函数存在提到的拼接字符串操作，因此可以触发`__toString`
然后再分析`updateData`函数和`checkAllowFields`函数 看下进入`db`函数的条件：
首先是`updateData`函数：
跟进`getChangedData()`函数：
满足`$this->force`为true即可，这样进入到`checkAllowFields` 函数：
`$this->field`为空，`$this->schema` 为空即可进入`db`函数，看一下拼接字符串需要满足的条件：
跟进发现只要`$this->connection` 为`mysql` 即可。
梳理下思路：
    //寻找一个入口魔术方法
    //可以利用 vendor/topthink/think-orm/src/Model.php
    public function __destruct()
    {
        if ($this->lazySave) { //需要满足$this->lazySave为true
            $this->save();
        }
    }
    public function save(array $data = [], string $sequence = null): bool
    {
        if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
            return false;
        }//需要满足 $this->data不为空 $this->withEvent为false
        $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
    }//$this->exists为true
    protected function updateData(): bool
    {
        if (false === $this->trigger('BeforeUpdate')) {
            return false;//$this->withEvent为false已经满足
        }
        $data = $this->getChangedData();//$this->force 为true
        $allowFields = $this->checkAllowFields();
    }
    protected function checkAllowFields(): array
    {
        if (empty($this->field)) {//$this->field 为空
            if (!empty($this->schema)) {//$this->schema 为空
                $this->field = array_keys(array_merge($this->schema, $this->jsonType));
            } else {
                $query = $this->db();
            }
        }
    }
    public function db($scope = []): Query
    {
        $query = self::$db->connect($this->connection)//$this->connection为mysql
            ->name($this->name . $this->suffix)
            ->pk($this->pk);
        return $query;
    }
### 3.中间跳板
前边构造条件已经触发`__toString`函数，现在需要寻找可利用类的`__toString`。
通过审计发现后续利用思路和TP5.2版本利用动态代码执行是一样的，这里只做简单分析。
通过搜索不难发现熟悉的`Conversion` 类，直接利用TP5.2的利用链：
跟进函数：
    public function toArray(): array
    {
        $item       = [];
        $hasVisible = false;
        foreach ($this->visible as $key => $val) {
            if (is_string($val)) {
                if (strpos($val, '.')) {
                    [$relation, $name]          = explode('.', $val);
                    $this->visible[$relation][] = $name;
                } else {
                    $this->visible[$val] = true;
                    $hasVisible          = true;
                }
                unset($this->visible[$key]);
            }
        }
        foreach ($this->hidden as $key => $val) {
            if (is_string($val)) {
                if (strpos($val, '.')) {
                    [$relation, $name]         = explode('.', $val);
                    $this->hidden[$relation][] = $name;
                } else {
                    $this->hidden[$val] = true;
                }
                unset($this->hidden[$key]);
            }
        }
        // 合并关联数据
        $data = array_merge($this->data, $this->relation);
        foreach ($data as $key => $val) {
            if ($val instanceof Model || $val instanceof ModelCollection) {
                // 关联模型对象
                if (isset($this->visible[$key]) && is_array($this->visible[$key])) {
                    $val->visible($this->visible[$key]);
                } elseif (isset($this->hidden[$key]) && is_array($this->hidden[$key])) {
                    $val->hidden($this->hidden[$key]);
                }
                // 关联模型对象
                if (!isset($this->hidden[$key]) || true !== $this->hidden[$key]) {
                    $item[$key] = $val->toArray();
                }
            } elseif (isset($this->visible[$key])) {
                $item[$key] = $this->getAttr($key);
            } elseif (!isset($this->hidden[$key]) && !$hasVisible) {
                $item[$key] = $this->getAttr($key);
            }
        }
        // 追加属性（必须定义获取器）
        foreach ($this->append as $key => $name) {
            $this->appendAttrToArray($item, $key, $name);
        }
        return $item;
    }
进入`toArray` 函数后，TP5.2有两个思路，一个是利用`getAttr`的`getValue` 函数，然后`$value =
$closure($value, $this->data);`动态调用；另一个思路是进入`appendAttrToArray`
函数，利用`$relation->visible($name);`
触发`__call`方法，TP6.0中第二种方法不能用了，第一种是可以的。接下来就是寻找最终的代码执行点。
### 4.代码执行
`toArray` 方法中`$data = array_merge($this->data,
$this->relation);`是可控的，所以`$item[$key] = $this->getAttr($key);` 中的`$key`
也是可控的，进入`getAttr` 函数：
首先进入`getData` 函数看下$value值的处理：
可以发现$value为可控的，由此`getValue` 函数的参数都是可控，进入到`getValue`函数：
`$this->withAttr`可控，`$this->data`也可控：
这样就可以执行任意代码。
梳理下思路：
    // vendor/topthink/think-orm/src/model/concern/Conversion.php
    public function __toString()
    {
        return $this->toJson();
    }
    public function toJson(int $options = JSON_UNESCAPED_UNICODE): string