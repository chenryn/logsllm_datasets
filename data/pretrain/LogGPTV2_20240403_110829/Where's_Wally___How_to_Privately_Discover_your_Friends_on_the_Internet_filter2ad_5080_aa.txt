title:Where's Wally?: How to Privately Discover your Friends on the Internet
author:Panagiotis Papadopoulos and
Antonios A. Chariton and
Elias Athanasopoulos and
Evangelos P. Markatos
Where’s Wally? How to Privately Discover your Friends on the
Internet
Panagiotis Papadopoulos
FORTH-ICS, Greece
PI:EMAIL
Elias Athanasopoulos
University of Cyprus, Cyprus
PI:EMAIL
ABSTRACT
Internet friends who would like to connect with each other (e.g.,
VoIP, chat) use point-to-point communication applications such as
Skype or WhatsApp. Apart from providing the necessary communi-
cation channel, these applications also facilitate contact discovery,
where users upload their address-book and learn the network ad-
dress of their friends. Although handy, this discovery process comes
with a significant privacy cost: users are forced to reveal to the ser-
vice provider every person they are socially connected with, even if
they do not ever communicate with them through the app.
In this paper, we show that it is possible to implement a scalable
User Discovery service, without requiring any centralized entity
that users have to blindly trust. Specifically, we distribute the main-
tenance of the users’ contact information, and allow their friends
to query for it, just as they normally query the network for ma-
chine services. We implement our approach in PROUD: a distributed
privacy-preserving User Discovery service, which capitalizes on
DNS. The prevalence of DNS makes PROUD immediately applicable,
able to scale to millions of users. Preliminary evaluation shows that
PROUD provides competitive performance for all practical purposes,
imposing an overhead of less than 0.3 sec per operation.
CCS CONCEPTS
• Security and privacy → Pseudonymity, anonymity and un-
traceability; Privacy-preserving protocols; Privacy protections;
KEYWORDS
Mobile User Discovery, Privacy of Social Graph, Adress-book, DNS
ACM Reference Format:
Panagiotis Papadopoulos, Antonios A. Chariton, Elias Athanasopoulos,
and Evangelos P. Markatos. 2018. Where’s Wally? How to Privately Discover
your Friends on the Internet. In ASIA CCS ’18: 2018 ACM Asia Conference on
Computer and Communications Security, June 4–8, 2018, Incheon, Republic of
Korea. ACM, New York, NY, USA, 6 pages. https://doi.org/10.1145/3196494.
3196496
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196496
Antonios A. Chariton
University of Crete, Greece
PI:EMAIL
Evangelos P. Markatos
FORTH-ICS, Greece
PI:EMAIL
1 INTRODUCTION
More and more users turn to Internet-based, real-time applications
(e.g., Messenger, WhatsApp, Viber, Skype, WeChat, Snapchat) for
their daily communication needs (VoIP, chat, file/image/video shar-
ing). Recent studies [33] predict that instant messaging (IM) alone
will account for 75% of the overall mobile communication traffic
by 2018. Other studies [3] show that the combined user base of the
top four mobile communication apps is larger than the combined
user base of the top four social networks, proving that these apps
have managed to transcend traditional social networks.
Today, each time a user opens her mobile app, the application con-
ducts an extensive User Discovery across all friends in her address-
book. Instantly, the user exposes her entire set of contacts to the
application provider, relinquishing the privacy of her social graph.
Hence, the provider learns which user is socially connected with
whom, even if they haven’t ever sent a single byte to each other.
What is more, there are cases where the revealed social graph does
not even belong to the mobile application. For example, in applica-
tions like Whatsapp (or Viber), the address-book uploaded during
User Discovery is not the one that contains the Whatsapp friends
of the users; it is her mobile phone address-book, which contains
people that she is socially connected with even if they have never
installed Whatsapp!
Building services which can provide in practice scalable User
Discovery, while respecting the user’s privacy, is challenging. Exist-
ing services are currently based on a centralized architecture for the
User Discovery process: a directory server (or group of servers) op-
erated by the application provider is responsible to store, maintain,
and respond to queries regarding its users’ network addresses. The
centralization of this information to a single provider, inevitably,
transforms it into a powerful “Big Brother”, who maintains, and
owns data, that include both user network addresses, and parts of
the global social graph. To make matters worse, there have been
incidents where this sensitive data were used beyond the control
of the user (i.e., sold to advertisers [25, 27, 29, 31, 34], handed over
to government agencies[39], or included, as an asset, in the com-
pany’s future buy-out [23, 32]). Even in the case of trusted services,
there exist bold examples, where the application’s bad design al-
lowed sensitive data to be leaked [15], enabling anyone interested
to find out, at any time, the current IP address, and consequently
the approximate geolocation of any user.
To address these drawbacks, the research community explored
if it is possible to build a User Discovery service, without revealing the
entire or part of the user’s social graph. Vuvuzela [36], for instance,
is a full-featured system for private messaging, resisting traffic
analysis attacks. However, it requires users to have their devices
constantly online, for sending no-op messages, even during idle
times. Vuvuzela is an all-or-nothing approach: you cannot use it
just for discovering your buddies. In this paper, we are primarily
interested in privacy-preserving User Discovery, which should be
neutral to the actual application. Apres [14], on the other hand,
attempts to solve the problem over Tor, which can cause additional
overhead, especially for mobile clients, and IoT. Other systems are
based on Private Information Retrieval (PIR) [6], requiring a large
amount of traffic (linear in some cases to the size of the database),
or a large amount of computation, or a combination of both, which
may limit the scalability of the system [2, 4].
In this work, we propose PROUD (PRivacy-preservation Of User
Discovery): a scalable system, which (i) enables users to control
their current network address without relying on any centralized
infrastructure, and additionally, (ii) allows them to find the network
addresses of their friends, without revealing their social associations.
PROUD is based on a core Internet service, available for everyone:
the Domain Name System (DNS). In PROUD, users who would like
to be discovered by their friends, place their network address in
(specially crafted and encrypted dead-drops) in the DNS. Users,
who would like to find the network address of their friends, retrieve
the dead drops from DNS, and, after appropriate decryption, they
(and only they) are able to find the current network address of their
friends. To summarize, we make the following contributions:
• We design PROUD: a system to enable users to discover their
contacts in a privacy-preserving fashion, without revealing who
is socially connected with whom. Following similar distributed
approaches [1, 12], PROUD does not require the user to blindly
trust any centralized entity.
• We implement PROUD as a standalone service by leveraging the
publicly accessible datastore of DNS, and we provide1 an API
library to support any type of app. Our service is immediately
applicable, without needing maintenance by any single entity.
• To quantify the effectiveness of our approach, we develop a
simple IM application, which outsources its user discovery to
PROUD. The performance evaluation of our system shows that
it has minimal bandwidth requirements, and adds negligible
latency to the user experience (0.35 sec on average).
2 THREAT MODEL
Apart from sensitive data that a User Discovery service delivers
(i.e., users’ current network address), there are also metadata pro-
duced by its operations (i.e., Set/Get address), which reveal who
queries for whom. With such metadata, an application provider
can reconstruct the users’ social graph (i.e., who is socially associ-
ated with whom). This graph can be analyzed, together with other
leaked information [24, 26, 28], to infer interests or preferences
(political or religious beliefs, sexual preferences, etc.) [10], and be
sold to advertisers, even when they have not shared any related
information [21].
In this work, we assume an Internet service, which operates on a
community-based interaction. In such services, users are clustered
in communities. A typical example is a chat application, where
1Source Code: https://github.com/panpap/PROUD
2
users form communities that exchange text messages. We addition-
ally assume an attacker who aims at discovering the community
structure (i.e., the social topology) by attacking the service. The at-
tacker can learn the community structure either by being in cahoots
with the centralized service, or by compromising the service and
leaking their data. PROUD addresses that by distributing the com-
munity information in two sets of non-colluding nodes: (i) the ones
responsible for setting the user discovery information (registration
servers), and (ii) the ones responsible for responding to queries for
this information (resolvers). Of course, the non-colluding nodes
assumption is not new in information-theoretic PIR (IT-PIR) [6],
and has been widely used in the area [4]. PROUD can preserve the
privacy of users as long as only one of the two above types of nodes
is compromised by the attacker: either registration servers or re-
solvers. Finally, we must note that the way a user will connect with
their friends after querying PROUD (e.g., through TLS connection,
Tor or physically by car), is beyond the scope of our paper.
3 SYSTEM OVERVIEW
3.1 Our approach: PROUD
The objective of PROUD is to enable users to advertise their current
network address to their friends only, without revealing their social
topology to any third party. In a nutshell, we design a system where
a user (which we call by convention Alice), creates a dead-drop
(namely friendship record) with her current contact point (e.g., IP
address), which her friend (Bob) can query.
Our system needs two separate types of servers: (a) a registra-
tion server, responsible for storing and maintaining the friendship
records of Alice, and (b) a recursive resolver, that handles the record
querying part. In order for our system to be immediately appli-
cable, we have to capitalize our system on an existing datastore.
This datastore must fulfill specific requirements that are necessary
for PROUD. These requirements include: (i) distribution of data
and infrastructure (i.e., servers), (ii) distribution of management by
allowing anyone interested to maintain their own servers, thus
participating in a wider coalition of nodes, and finally, (iii) provide
a high level of scalability.
Such a system could be a structured peer-to-peer system based on
DHT, e.g., Chord [35] or Kademlia [20]. The example of GNUnet’s
Name System (GNS) [37] proves that DHT-based systems can suc-
cessfully resolve keys to values. Similar translation of keys to values,
is already provided by the traditional DNS for years, making this
system an essential part of the Internet.
The key-value datastore of DNS. Although DNS was first de-
signed to map domain names to IP addresses, its success as a highly
scalable, lightweight, key-to-value mapping system, made it in-
dispensable to many Internet-related applications, and there are
several projects leveraging it to distribute their mappings (e.g., SSL
certificates [5, 9], server discovery [13], blacklist querying [17]).
The split design of DNS allows PROUD to perform over 2 separate
types of nodes, since each node may take one of the two roles below:
(1) Authoritative nameserver: a server responsible for a DNS zone
that provides responses to queries about records in this zone. In
PROUD, such nameservers are responsible of user registration,
and maintaining the friendship records.
(2) Recursive resolver: receives queries from the users’ devices,
contacts one or more authoritative nameservers inside the zone
hierarchy to locate a DNS record, before finally responding back
to the querying user. In PROUD, Bob can query any existing
DNS resolver to retrieve friendship records.
3.2 The PROUD protocol
For presentation purposes, throughout this section, we use a mobile
instant messenger (MIM) as our application example, which sup-
ports two types of directional friendships: followers and followees2.
In our scenario, both Alice and Bob have a user unique identifier
(UID) such as phone number, username, email. For simplicity’s sake,
they will be the only participants in our example. Bob is wishing to
follow his friend Alice, so he only queries the system for the address
of Alice3. Our protocol, supports semantics that can be simplified to
put(key, value) and get(key) commands and provides 3 main
operations: (i) create a new friendship, (ii) update with the device’s
current IP address, and (iii) discover the address of a friend in the