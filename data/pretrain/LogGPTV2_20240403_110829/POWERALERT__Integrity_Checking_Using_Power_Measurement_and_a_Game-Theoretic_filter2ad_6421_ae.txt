### IC-Program Diversity and Attack Mitigation

Each time a new IC-Program is generated, the attacker has only one opportunity to find an injection scheme that results in a final number of instructions below the designed threshold. In the next iteration, a new injection method will be required, making it computationally challenging for any runtime method to automatically discover the optimal injection scheme without being detected by our current measurements.

However, an attacker can redirect the data pointer by altering the page table pointer (register cr3). This attack is difficult to thwart, and we may consider using the System Management Mode (SMM) execution mode, which disables paging [29].

### Attacker Hiding

If an attacker attempts to hide, they must predict when the POWERALERT protocol will be initiated. POWERALERT's random initiation mechanisms ensure that the attacker cannot reliably predict these instances. Our game-theoretic analysis shows that when the defender uses an exponential initiation strategy, the attacker's best strategy is to hide more frequently if the defender is aggressive. Since POWERALERT employs a random strategy, the attacker will not always correctly predict the initiation times. Consequently, some POWERALERT actions will occur when the attacker is not hiding, leading to detection. The attacker’s strategy, while stealthy, can delay but not prevent detection.

### Forced Retraining

In this attack, the attacker forces POWERALERT to retrain by simulating a hardware fault that necessitates a CPU change, thereby leading POWERALERT to a compromised model. If this occurs, POWERALERT's process involves wiping the permanent storage, retraining with a clean OS, and then restoring the data. Given that we assume the attacker does not modify the hardware state, removing the permanent storage prevents the attacker from affecting the retraining process.

### Related Work

1. **Timing Attestation:**
   - Seshadri et al. propose Pioneer [24], extended by Kovah et al. [19], a timing-based remote attestation system for legacy systems (without TPM). The timing is computed using network round-trip time, assuming the machine can be restricted to single-threaded execution. However, network conditions can significantly affect round-trip time, leading to high false positive rates. Additionally, single-threaded execution restrictions can be evaded by low-level attackers.
   - Hernández et al. [14] implement a monitor integrity checking system by estimating the time it takes for software to run. Timing information is sent to a remote server for phase change detection. The issue here is that the untrusted machine sends the timing information, which can be easily manipulated.
   - Armknecht et al. [2] propose a generalized framework for remote attestation in embedded systems, using timing to limit the attacker's ability to evade detection. They formalize the goals of both the attacker and the defender, providing a generic attestation scheme and proving sufficient conditions for secure attestation.

2. **Power Malware Detection:**
   - Several researchers use power usage to detect malware. For example, Clark [6] collects power usage data from medical embedded devices and extracts features for anomaly detection. Kim et al. [17] use battery consumption to detect energy-greedy malware. Both methods involve sending power readings from the untrusted device to a remote server for comparison against a trusted baseline, which can be manipulated by the attacker.
   - PowerProf [18] is another in-device, unsupervised malware detection system that uses power profiles. However, the power information is passed through the untrusted stack, making it susceptible to attacker evasion through tampering.

3. **Hardware Attestation:**
   - Secure Boot [7] verifies system integrity with the root of trust in a bootloader. Trusted Platform Modules (TPMs) use Platform Configuration Registers (PCRs) to store secure measurements (hashes) of the system. These methods are static, checking integrity at boot time. Dynamic attestation, supported by CPU extensions like Intel TXT, can perform attestation on the current system state.
   - El Defrawy et al. propose SMART [8], an efficient hardware-software primitive for establishing a dynamic root of trust in embedded processors, but do not account for hardware attacks.

4. **VM-Based Integrity Checkers:**
   - Hofmann et al. [15] propose OSck, a KVM-based kernel integrity checker that inspects kernel data structures and text to detect rootkits. The checker runs as a guest OS thread but is isolated by the hypervisor. Most VMM introspection integrity checkers assume a trusted hypervisor, making them vulnerable to hardware-level attacks [20], [26], [28]. In our work, we make no trust assumptions since the attestation device is external to the untrusted machine.

5. **Checksum Diversity:**
   - Wang et al. [27] propose using diversity of probe software for security, obfuscating control flow by flattening the probing software to make it harder for an attacker to reverse engineer. While flattened control flow is hard to statically analyze, the programs are susceptible to active learning, allowing attackers to adapt over time.
   - Giffin et al. [12] propose self-modifying code to detect checksum modifications. Their experiments show an overhead of 1 microsecond per checksum computation, which is costly for large programs. The authors in [1] use randomized address checking and memory noise to achieve unpredictability.

### Conclusion

In this work, we presented POWERALERT, an external integrity checker that uses power measurements as a trust base to achieve resilience against stealthy attackers. By relying on an untainted, trustworthy, and highly accurate side-channel, POWERALERT initiates the checking protocol by sending a randomly generated integrity checking program to the machine. The diversity of the IC-programs prevents the attacker from adapting, and we showed that the space of IC-programs is practically impossible to exhaust. The untrusted machine runs the IC-program and sends its output back to POWERALERT. During execution, POWERALERT measures the current drawn by the processor and compares it to a learned model. Any deviation from the expected output indicates tampering. To determine the frequency of checks, we modeled the interaction between POWERALERT and the attacker using a time-continuous game, showing that POWERALERT can either force the attacker into hiding or have the attacker risk detection.