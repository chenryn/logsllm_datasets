• The desired number of terms m in the compressed sig-
nal
OUTPUT:
• A set of m indices λ1, . . . , λm
• An N-dimensional residual rm
PROCEDURE:
1. Initialize the residual r0 = v and the iteration counter
t = 1.
2. Find the index λt of the vector with the largest dot
product with the current residual
λt = argmaxj |hrt−1, ϕji| .
3. Let Pt be the orthogonal projection onto the span of
the current vectors span{ϕλ : λ1, . . . , λt}. Calculate
the new residual:
rt = v − Pt v.
4. Increment t, and return to Step 2 if t < m.
Note that if we had a single orthonormal basis as the dic-
tionary D, the representation obtained using Algorithm 4.1
is exactly the same as the projection onto the orthonormal
basis. For example, if we just had a Fourier basis, the co-
efﬁcients obtained from a regular Fourier transform would
exactly match the coefﬁcients obtained from the matching
pursuit procedure.
5 Data Description
The primary data set we have used for evaluating our meth-
ods consists of trafﬁc aggregates collected over a 20 week
period (between January and June 2004) at a large Tier-1
Internet provider’s IP backbone network. The dataset con-
sists of trafﬁc aggregates in terms of ﬂow, packet, and byte
counts. The dimensions of interest over which the aggre-
gates are collected are:
• TCP Ports: Trafﬁc to and from each of the 65535 TCP
ports.
• UDP Ports: Trafﬁc to and from each of the 65535
UDP ports.
• Aggregated Network Preﬁxes: Trafﬁc to and from net-
work preﬁxes aggregated at a set of predeﬁned net-
work preﬁxes.
The trafﬁc aggregates were generated from ﬂow records
using trafﬁc collection tools similar to Netﬂow [14], aggre-
gated over multiple links in the provider’s Internet back-
bone. In this particular data set, the trafﬁc volume counts
are reported on an hourly basis. For example, for each TCP
port the data set contains the total number of ﬂows, packets,
and bytes on that port. The data set aggregates each met-
ric (i.e., ﬂows, packets, and bytes) for both incoming (i.e.,
trafﬁc with this port was the destination port) and outgoing
trafﬁc (i.e., trafﬁc with this port as the source port). Such
per-port and per-preﬁx aggregates are routinely collected
at many large ISPs and large enterprises for various trafﬁc
engineering and trafﬁc analysis applications.
It is useful to note that such data sets permit interest-
ing trafﬁc analysis including observing trends in the trafﬁc
USENIX Association
Internet Measurement Conference 2005  
257
data, and detecting and diagnosing anomalies in the net-
work data. For many types of network incidents of interest
(outages, DoS and DDoS attacks, worms, viruses, etc.) the
dataset has sufﬁcient spatial granularity to diagnose anoma-
lies. For example, the number of incoming ﬂows into spe-
ciﬁc ports can be an indication of malicious scanning activ-
ity or worm activity, while the number of incoming ﬂows
into speciﬁc preﬁxes may be indicative of ﬂash-crowds or
DoS attacks targeted at that preﬁx.
For the following discussions, we consider the data in
week long chunks, partly because a week appears to be the
smallest unit within which constituent components of the
signal manifest themselves, and also because a week is a
convenient time unit from an operational viewpoint.
6 Results
In this section, we demonstrate how we can use sparse ap-
proximations to compress trafﬁc time series data. We look
at the unidimensional aggregates along each port/protocol
pair and preﬁx as an independent univariate signal.
In
the following sections, unless otherwise stated, we work
with the total number of incoming ﬂows into a particular
port. We observe similar results with other trafﬁc aggre-
gates such as the number of packets and the number of in-
coming bytes incoming on each port, and for aggregated
counts for the number of outgoing ﬂows, packets, bytes on
each port—we do not present these results for brevity. We
present the results only for the TCP and UDP ports and note
that the compression results for aggregated address preﬁxes
were similar.
Since an exhaustive discussion of each individual port
would be tedious, we identify 4 categories of ports, pre-
dominantly characterized based on the applications that use
these ports. For each of the categories the following discus-
sion presents results for a few canonical examples.
1. High volume, popular application ports (e.g., HTTP,
SMTP, DNS).
2. P2P ports (e.g., Kazaa, Gnutella, E-Donkey).
3. Scan target ports (e.g., Port 135, Port 139) .
4. Random low volume ports.
6.1 Fourier Dictionary
Our ﬁrst attempt at selecting a suitable dictionary for com-
pression was to exploit the periodic structure of trafﬁc time
series data. A well known fact, conﬁrmed by several mea-
surements [9, 10, 15], is the fact that network trafﬁc when
viewed at sufﬁcient levels of aggregation exhibits remark-
ably periodic properties, the strongest among them being
the distinct diurnal component. It is of interest to identify
these using frequency spectrum decomposition techniques
(Fourier analysis).
It is conceivable that the data can be
compressed using a few fundamental frequencies, and the
trafﬁc is essentially a linear combination of these harmon-
ics with some noisy stochastic component.
To understand the intuition behind using the frequency
spectrum as a source of compression we show in Figure 2
the power spectrum of two speciﬁc ports for a single week.
In each case the power spectrum amplitudes are normal-
ized with respect to the maximum amplitude frequency for
that signal (usually the mean or 0th frequency component),
and the y-axis is shown on a log-scale after normalization.
We observe that the power spectrum exhibits only a few
very high energy components. For example the central
peak and the high energy band around it corresponds to the
mean (0th) frequency in the Fourier decomposition, while
the slightly lesser peaks symmetric around zero, and close
to it correspond to the high energy frequencies that have a
wavelength corresponding to the duration of a day.
100
10−1
10−2
10−3
10−4
10−5
10−6
10−7
r
e
w
o
P
d
e
z
i
l
a
m
r
o
N
100
10−1
10−2
10−3
10−4
10−5
10−6
10−7
r
e
w
o
P
d
e
z
i
l
a
m
r
o
N
10−8
−100
−80
−60
−40
0
−20
20
Frequency Index
40
60
80
100
10−8
−100
−80
−60
−40
0
−20
20
Frequency Index
40
60
80
100
(a) Port 25/TCP
(b) Port 4662/TCP
Figure 2: Frequency power spectrum of time-series of in-
coming ﬂows on speciﬁc ports over a single week
We also show the how the normalized amplitude de-
creases when we sort the frequency components in de-
scending order of their amplitudes in Figure 3. We observe
that there is indeed a sharp drop (the ﬁgures are in log-scale
on y-axis) in the energy of the frequency components after
20-30 components for the different signals considered.
We observe that a small number of components do cap-
ture a signiﬁcant portion of the energy, which suggests a
rather obvious compression scheme. For each week-long
time series, pick the k frequencies that have the highest
energies in the power spectrum. Figure 4 indicates that us-
ing 40 coefﬁcients per week (around 40/168 = 25% of the
original signal size) coefﬁcients yields a relative error of
less than 0.05 for more than 90% of all ports3. A relative
error of 0.05 using our relative error metric indicates that
around 95% of the original signal energy was captured in
the compressed form. We observe in Figure 5 that the cor-
responding compressibility of UDP ports is slightly worse.
258
Internet Measurement Conference 2005
USENIX Association
100
10−1
10−2
10−3
10−4
10−5
10−6
10−7
m
u
r
t
c
e
p
s
y
c
n
e
u
q
e
r
f
n
i
y
g
r
e
n
e
d
e
z
i
l
a
m
r
o
N
10−8
0
20
40
60
80
100
120
Frequency Index Sorted by Energy
100
10−1
10−2
10−3
10−4
10−5
10−6
10−7
m
u
r
t
c
e
p
s
y
c
n
e
u
q
e
r
f
n
i
y
g
r
e
n
e
d
e
z
i
l
a
m
r
o
N
140
160
180
10−8
0
20
40
60
80
100
120
140
160
180
Frequency Index Sorted by Energy
(a) Port 25/TCP
(b) Port 4662/TCP
Figure 3: Energy of the frequencies sorted in descending
order for speciﬁc ports
The reason is that the trafﬁc volumes on UDP ports tend to
exhibit far lesser aggregation, in terms of absolute volumes
and popularity of usage of particular ports. Intuitively one
expects that with higher volumes and aggregation levels,
the trafﬁc would exhibit more periodic structure, which ex-
plains the better compression for TCP ports as opposed to
UDP ports.
s
t
r
o
p
f
o
n
o
i
t
c
a
r
F
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
20 coeffts
40 coeffts
60 coeffts
80 coeffts
0.05
0.15
Relative error in terms of residual energy
0.1
0.2
Figure 4: CDFs of relative error for TCP ports (incoming
ﬂows) with Fourier dictionary
The Fourier basis is one simple orthonormal basis. There
are a host of other orthonormal bases which have been
employed for compressing different datasets. Wavelets
have traditionally been used for de-noising and compres-
sion in image and audio applications. The effectiveness
of a wavelet basis depends on the choice of the “mother
wavelet” function. However, identifying the best basis for
representing either a given signal or a class of signals is
a hard problem, for which only approximate answers ex-
ist using information-theoretic measures [17]. For our ex-
periments we tried a variety of wavelet families including
the well studied Daubechies family of wavelets, and other
derivatives such as Symlets and Coiﬂets. Our observation
is that the families of wavelets we tested had poorer perfor-
s
t
r
o
p
f
o
n
o
i
t
c
a
r
F
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
20 coeffts
40 coeffts
60 coeffts
80 coeffts
0.05
0.15
Relative error in terms of residual energy
0.1
0.2
Figure 5: CDFs of relative error for UDP ports (incoming
ﬂows) with Fourier dictionary
mance when compared with the Fourier basis. Although an
exhaustive discussion of choosing the ideal wavelet family
is beyond the scope of this paper, our experiments with a
host of wavelet families indicate that the trafﬁc time-series
cannot be efﬁciently compressed using wavelets (as an or-
thonormal basis) alone.
6.2 Using Redundant Dictionaries
Our choice of the Fourier dictionary was motivated by the
observation that the trafﬁc time-series when viewed at a
reasonable level of aggregation possesses a signiﬁcant pe-
riodic component. Therefore, using Fourier basis functions
as part of the redundant dictionary seems a reasonable start-
ing point. There are however, other interesting incidents we
wish to capture in the compressed representation. Experi-
ence with trafﬁc data indicates that interesting events with
high volume (and hence high signal energy) include possi-
bly anomalous spikes, trafﬁc dips, and slightly prolonged
high trafﬁc incidents. Such isolated incidents, localized in
time, cannot be succinctly captured using only a Fourier
basis. Fortunately, these events can be modeled either us-
ing spike functions appropriately placed at different time
indices, or using Haar wavelets (square waveforms) of dif-
ferent scales and all translations. The fully-translational
Haar wavelets at all scales and all translations form a rich
redundant dictionary of size N log N. By contrast, the or-
thonormal basis of Haar wavelets is of size N and consists
of the Haar wavelets at all scales and only those translations
which match the scale of the wavelet.
Table 1 compares a host of possible dictionaries on se-
lected ports. Over the entire spectrum of port types, we ob-
serve that speciﬁc bases are indeed better suited than oth-
ers for speciﬁc ports. For example, we observe that for
some high volume and P2P ports using a Fourier dictio-
nary gives better compression than using a wavelet or full-
translation Haar dictionary, while for some of the random
USENIX Association
Internet Measurement Conference 2005  
259
and scan ports, the wavelet or full-translation Haar dictio-
nary give better compression. In some cases (e.g. port 114)
we also ﬁnd that using spikes in the dictionary gives the
lowest compression error.
Rather than try to optimize the basis selection for each
speciﬁc port, we wish to use redundant dictionaries that can
best capture the different components that can be observed
across the entire spectrum of ports. Hence we use redun-
dant dictionaries composed of Fourier, fully-translational
Haar, and Spike waveforms and observe that we can ex-
tract the best compression (in terms of number of coefﬁ-
cients selected), across an entire family of trafﬁc time se-
ries data. We compare three possible redundant dictionar-
ies: Fourier+ Haar wavelets (referred to as DF +H), Fourier
+ Spikes (referred to as DF +S), and Fourier + Spikes +
Haar wavelets (referred to as DF +H+S). Within each dic-
tionary the error-compression tradeoff is determined by the
number of coefﬁcients chosen (Recall that a m-coefﬁcient
representation roughly corresponds to a compression ratio
of m/N). A fundamental property of the greedy pursuit
approach is that with every iteration the residual energy de-
creases, and hence the error is a monotonically decreas-
ing function of the number of modes chosen. We evaluate
the error-compression tradeoffs for these different dictio-
naries in Figures 6 and 7, where we assume that we are
constrained to use 30 coefﬁcients (roughly corresponding
to using only one-sixth of the data points for each week).
We observe two main properties of using the redundant dic-
tionary approach. First, the compressibility is substantially
enhanced by expanding the dictionary to include either
spikes or Haar wavelets, in addition to the periodic Fourier
components, i.e., using redundant dictionaries yields bet-
ter ﬁdelity for the same storage cost as compared to a sin-
gle orthonormal basis. The second property we observe
with the particular choice of basis functions on the trafﬁc
data is a monotonicity property – adding a richer basis set
to the dictionary helps the compressibility. For example
the error-compression tradeoff that results with DF +H+S
is never worse than either DF +H or DF +S. The compres-
sion does come at a slightly higher computation cost, since
the time to compress the time series depends on the size
of the dictionary used, as the compression time scales in
linearly with the number of vectors in the dictionary (refer
Section 4).
In Figures 8 and 9 we show how the 95th percentile of
the relative error across all the ports decreases as a function
of the number of coefﬁcients used for representing the traf-
ﬁc data for each port for TCP and UDP ports respectively.
We ﬁnd that after 30-35 coefﬁcients we gain little by adding
additional coefﬁcients, i.e., the marginal improvement in
the ﬁdelity of the representation becomes less signiﬁcant.
We will address this issue again in Section 8, by consid-
ering the rate of decrease of the residual as a function of
the number of modes selected for speciﬁc ports, to derive
1