0.4
3
1
1.2
0.1
0.2
0.3
0.2
0.4
-
due to complex loops, ﬂoating-point variables, and unknown
function calls. 3 of these programs comprise a standard
benchmark (LESE [101]) used in prior work that improves
loop-handling over DSE, and the remaining are real-world
applications for media processing, web data transfer, and
database management. All the programs have prior publicly
known vulnerabilities: various out-of-bound accesses, ﬂoating
point exceptions, and arithmetic overﬂows. We manually craft
input grammars for these programs and use the same symbolic
inputs for KLEE and NEUEX.
A. Efﬁciency of NEUEX over KLEE
We run vanilla KLEE and NEUEX on each of the programs
with a 12-hour timeout. We experimented with two search
strategies in KLEE: (a) BFS mode, where symbolic states to
solve are picked in breadth-ﬁrst search order of the control-
ﬂow graph, and (b) the KLEE default RAND mode, where
paths are selected randomly favoring new paths. Since NEUEX
builds on KLEE, we ran NEUEX with both these strategies.
As shown in Table III, within 12 hours, vanilla KLEE ﬁnds
17 and 18 bugs in BFS and RAND mode respectively. NEUEX
ﬁnds all bugs that vanilla KLEE does, and additionally ﬁnds
16 more, totaling to 33 and 34 bugs in BFS and in RAND mode
respectively. Out of the bugs found by vanilla KLEE and also
by NEUEX, 12 bugs are previously unknown, whereas all bugs
found by NEUEX alone are previously known CVEs. All the
12 previously unknown vulnerabilities found are out-of-bound
buffer accesses: 1 in Bind, 1 in cURL, 6 in Sendmail, and 4
in WuFTP. We have responsibly disclosed these bugs to the
corresponding application maintainers.
NEUEX ﬁnds 94% and 89% more bugs than vanilla KLEE
in BFS and RAND modes respectively, within the same time
window. To explain the improvements, we further compare
KLEE and NEUEX in the BFS mode, which has deterministic
exploration strategy and is hence unaffected by the randomness
internally used by the tools. Figure 7 shows that the number
of CVPs reached or covered by NEUEX is signiﬁcantly higher
than vanilla KLEE. NEUEX covers these CVPs much faster.
Recall that the neural mode helps classic DSE mode in NEUEX
in two conceptual ways. First, it drives down paths which are
11
450
400
350
300
d
e
r
e
v
o
c
s
P
V
C
f
o
#
Vanilla KLEE
NEUEX
0
200
400
600
Time (min)
Fig. 7.
CVP Coverage. Each line represents the number of CVPs covered
or reached by vanilla KLEE and NeuEx in BFS mode, as the function of
time. The solid line represents the CVPs covered by NEUEX. The dashed line
represents the CVPs covered by vanilla KLEE.
)
n
i
m
(
e
m
T
i
800
600
400
200
0
Vanilla KLEE
NEUEX
12-hour timeout
1
2 3
4 5
6 7
8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
Bug ID
Fig. 8. Exploit Generation Time. The time taken to generate exploits (y-axis)
for each bug ID (x-axis) in BFS mode by vanilla KLEE and NEUEX. The solid
line represents the time taken by NEUEX. The dashed line represents the time
taken by vanilla KLEE. The dotted line represents the 12-hour timeout. KLEE
is not able to ﬁnd the bugs which reach the 12-hour timeout.
otherwise difﬁcult and which cause vanilla DSE (and KLEE)
to gets stuck. Second, the classic DSE mode is terminated on
states where it gets stuck, allowing it to explore other easier
paths rather than spending time on difﬁcult ones. Intuitively,
terminating DSE mode on difﬁcult paths can itself enhance
coverage of NEUEX by allowing DSE to cover other paths.
We experimentally check if this holds true. We ﬁnd that
without the neural reasoning, NEUEX performs marginally
better than vanilla KLEE with 2% more coverage and no
additional exploits. This shows that the neural reasoning in
NEUEX leads to its enhanced coverage.
Column 2 of Table IV reports that the neural mode is
triggered 61 times in the classical DSE mode. These triggers
are due to 6 external calls without stubs, 53 loop timeouts, 1
timeouts of the Z3 solver, and 1 memory exhaustion instances
in our experiments, directly highlighting the bottlenecks of
KLEE which NEUEX resolves.
Figure 8 reports the total
time taken to ﬁnd different
exploits by NEUEX and vanilla KLEE in its BFS mode in log-
scale (base 2). The 17 vulnerabilities found by both tools are
found relatively quickly. Though 4 of them trigger the neural
mode, the BFS procedure reaches them faster than the neural
mode, by brute-forcing the path space. 16 out of 33 found by
NEUEX are not found by vanilla KLEE even in 12 hours,
however, showing the advantage of the neural mode. Our
subsequent manual analysis conﬁrms the underlying reason:
COMPARISON RESULTS BETWEEN THE NEURAL MODE OF NEUEX AND LESE ON FINDING THE SAME VULNERABILITIES ON THE
BENCHMARK WITH THE SAME SETUP AND SMALLER SAMPLE SET SIZE.
TABLE V.
Program
Vulnerability
LESE
(s)
Neural Mode
of NEUEX (s)
Speedup
Factor
CA-
1999-
14(1)
2511
BIND
CA-
1999-
14(2)
2155
CVE-
1999-
0009
586
CVE-
2001-
0013
4464
CA-
2003-
07
672
CVE-
1999-
0131
526
CVE-
1999-
0206
626
Sendmail
CVE-
1999-
0047
633
CA-
2003-
12
18080
CVE-
2001-
0653
676
CVE-
2002-
0906
237
CVE-
1999-
0878
483
WuFTP
CAN-
2003-
0466
197
CVE-
1999-
0368
109
25.48
30.46
7.20
82.44 × 84.58 × 15.57 × 311.30 × 109.62 × 149.01 × 145.24 × 101.77 × 4185.19 × 28.51 × 1.64 × 34.77 × 19.50 × 15.14 ×
144.41
37.65
14.34
13.89
10.10
4.32
23.71
6.22
6.13
3.53
4.31
Geometric
Mean
2282.5
23.70
377.45 ×
on simple constraints, such as linear relationships, both vanilla
KLEE and neural analysis work relatively fast, with vanilla
KLEE being faster as it captures the constraint symbolically.
As constraints become complex (see example in Section II),
vanilla KLEE becomes considerably slower and cannot recover
relationships within 12 hours in the extreme cases. This shows
that the neural mode gracefully scales with the increasing
complexity of constraints to be recovered.
B. NEUEX Performance Breakdown
When neural mode is triggered, NEUEX spends time in
4 sub-steps: (a) trying to reach certain CVPs; (b) generating
I/O training value to train each reached CVP; (c) training one
neural net for each CVP; and (d) solving the mixed neuro-
symbolic constraint to generate exploit inputs. Note that in
step (d), exploits are enumerated up to a maximum of 50, 000
and NEUEX stops searching when one working exploit (that is
concretely validated) is found for a CVP. Table IV reports the
number of CVPs for each of the categories (a)-(d) solely due to
its neural mode, and the total time to ﬁnd the veriﬁed exploit.
Neural mode is triggered 61 times, leading to 20 exploits, out
of which 16 are only found by the neural mode.5
Breakdown by CVPs. Table IV reports the number of CVPs
which are reached / covered by NEUEX (Column 3) in neural
mode. For a fraction (64 out of 159) of the covered CVPs,
NEUEX is able to generate sufﬁcient data samples to train
the neural network (Column 4). Note that NEUEX generates
random state mutations from the state that the DSE mode gets
stuck in order to reach target CVPs, hence not all CVPs are
reached in our experiments. Out of those 64 with sufﬁcient
training data samples, NEUEX is able to successfully learn
neural networks for 29 CVPs (Column 5); here, we consider
networks which achieve an accuracy of at
least 50% as
successfully learnt. We use the standard accuracy metric.6
The number of samples to train one neural net successfully
is less than 200, 000. Out of the successfully trained neural
networks, NEUEX uses its neuro-symbolic solver to generate
inputs which exploit the CVP. We ﬁnd that 20 of the 29
successfully learnt neural networks lead to veriﬁed (or true)
exploits, which are reported to the end user.
CPU Cycle Breakdown. Figure 9 shows the fraction of CPU
cycles NEUEX spends in sub-steps (a)-(d) for each program.
The majority of time spent is on dataset generation for training
neural network, followed by the training itself. The dataset
and by vanilla KLEE too.
5The rest of the bugs found by NEUEX are found in its classical DSE mode
6Accuracy = 100 × # of correctly predicted samples
. The generated
sample dataset is partitioned into disjoint sets for testing (20%) and training
(80%).
# of test samples
s
e
l
c
y
C
U
P
C
f
o
n
o
i
t
c
a
r
F
1
0.5
0
cURL
SQLite
libTIFF
libsndﬁle
BIN D
Sendmail
W uFTP
Reachability Dataset Generation
Training
Solver
Fig. 9. CPU Cycle Breakdown for NEUEX Neural Mode. The size of each
shaded region represents the fraction of cycles NEUEX takes for each step.
generation cost is impacted by the size of the program fragment
being approximated by the neural network—larger fragments
take more CPU cycles to execute. Our implementation takes
advantage of parallel cores for sub-steps (a) and (b), speciﬁ-
cally the mutations for reaching CVPs and dataset generation
for each CVP reached respectively. The training and solving
for each CVP runs on 1 core each. The neural constraint
solving is fast for most cases.
Beneﬁts of Automatically Learning Stubs. Through manual
analysis, we ﬁnd that the ability of NEUEX to approximate
missing code with automatically learnt stubs leads to several
CVEs. For example, in libsndfile, NEUEX automatically
approximate the fabs function when learning the relation-
ship between input bytes and the vulnerable variable max.
Due to the precise approximation, NEUEX takes 1.3 hour
to successfully generate the exploits triggering the vulnera-
bility. Similarly, NEUEX provides sufﬁcient stubs for func-
tion dn_skipname in bind utility for successfully generating
the exploits. Further, it can reach the vulnerability point in
libTIFF library despite the missing mmap function stub.
C. Comparison to Structured Constraint Inference
Learning neural constraints is faster for simple (e.g., linear)
relationships, but with additional time, much more complex
relations can be learnt. To show this, we compare to an
extension of DSE called LESE that
learns speciﬁc linear
relationships. NEUEX is faster than LESE by two orders of
magnitude as shown in Table V. We explain conceptually why
12
multi-path extensions to DSE that ameliorate the low-level
path explosion do not improve their ability to recover succinct
representations in Section II. We experimentally conﬁrm this
by testing state-of-the-art techniques called LESE [91] and
Veritesting [33]. Both these experiments are detailed here.
LESE. LESE augments symbolic execution for reasoning
about
loops on binaries [91]. It learns linear relationships
between loop induction variables. As the source code of LESE
is not public, in this experiment we evaluate the neural mode
of NEUEX on the same benchmark that LESE uses on an
identical setup to compare the numbers reported in their paper.
The LESE benchmark consists of 3 programs with 14 bugs in
total [101]. We task the neural mode of NEUEX to ﬁnd exploits
for these 14 vulnerabilities. We conﬁgure NEUEX to execute
only in neural mode because we want
to compare LESE
technique directly to our neuro-symbolic execution. Table V
summarizes the execution time for NEUEX’s neural mode and
LESE to complete the benchmark. NEUEX ﬁnds the exploits
for all the 14 bugs in the benchmark under 3 minutes, while
LESE takes 5 hours in the worst case. NEUEX’s neural mode is