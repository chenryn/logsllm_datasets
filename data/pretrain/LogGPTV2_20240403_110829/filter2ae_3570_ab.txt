    173         MaxAge: 600,
    174         AllowedHeaders: []string{"*"},
    175     })
    176     return c.Handler(srv)
    177 }
Listing 1: rpc/http.go, before commit 5e29f4be935ff227bbf07a0c6e80e8809f5e0202
    164 func newCorsHandler(srv *Server, allowedOrigins []string) http.Handler {
    165     c := cors.New(cors.Options{
    166         AllowedOrigins: allowedOrigins,
    167         AllowedMethods: []string{"POST", "GET"},
    168         MaxAge: 600,
    169         AllowedHeaders: []string{"*"},
    170     })
    171     return c.Handler(srv)
    172 }
Listing 2: rpc/http.go, after commit 5e29f4be935ff227bbf07a0c6e80e8809f5e0202
    113     // Allowed Origins
    114     if len(options.AllowedOrigins) == 0 {
    115     // Default is all origins
    116     c.allowedOriginsAll = true
    117     }
Listing 3: vendor/github.com/rs/cors/cors.go
    $ curl -i -X OPTIONS
        -H "Access-Control-Request-Method: POST"
        -H "Access-Control-Request-Headers: content-type"
        -H "Origin: foobar" http://localhost:8545
    HTTP/1.1 200 OK
    Vary: Origin
    Vary: Access-Control-Request-Method
    Vary: Access-Control-Request-Headers
    Date: Tue, 25 Apr 2017 08:49:10 GMT
    Content-Length: 0
    Content-Type: text/plain; charset=utf-8
Listing 4: CORS headers before commit 5e29f4b
    $ curl -i -X OPTIONS
        -H "Access-Control-Request-Method: POST"
        -H "Access-Control-Request-Headers: content-type"
        -H "Origin: foobar" http://localhost:8545
    HTTP/1.1 200 OK
    Access-Control-Allow-Headers: Content-Type
    Access-Control-Allow-Methods: POST
    Access-Control-Allow-Origin: foobar
    Access-Control-Max-Age: 600
    Vary: Origin
    Vary: Access-Control-Request-Method
    Vary: Access-Control-Request-Headers
    Date: Tue, 25 Apr 2017 08:47:24 GMT
    Content-Length: 0
    Content-Type: text/plain; charset=utf-8
Listing 5: CORS headers after commit 5e29f4b
### 1.3.4. JavaScript引擎和API
JavaScript引擎[otto](https://github.com/robertkrimen/otto)是Go
Ethereum中的CLI脚本接口，一个IPC/RPC接口的终端交互解释器，也是私有`debug API`的一部分。考虑到其代码有限，在审计中优先级比较低。
#### 1.3.4.1. 伪随机数生成的弱随机数种子
在`jsre`中对伪随机数生成器进行初始化的时候，如果`crypto/rand`(`crypto/rand`返回密码学安全地伪随机数)方法失败，随机数种子将会依赖于当时的UNIX时间。在listing
6中，这个弱随机数种子将会被用于初始化`math/rand`的实例。
这个`PRNG`没有被用于任何敏感信息，而且显然也不应该被用作于密码学安全的`RNG`,但是由于用户可以通过命令行运行脚本来使用`PRNG`，使其失败而不是制造出弱随机数种子显然是更安全的。从`crypto/rand`中得到错误意味着其他地方可能也存在问题。即使是得到了安全的随机数种子，在文档中也应该指出`PRNG`并不是密码学安全的。
    84 // randomSource returns a pseudo random value generator.
    85 func randomSource() *rand.Rand {
    86     bytes := make([]byte, 8)
    87     seed := time.Now().UnixNano() // 不是完全随机
    88     if _, err := crand.Read(bytes); err == nil {
    89         seed = int64(binary.LittleEndian.Uint64(bytes))
    90     }
    91
    92     src := rand.NewSource(seed)
    93     return rand.New(src)
    94 }
Listing 6: internal/jsre/jsre.go
### 1.3.5. 以太坊虚拟机(EVM)的实现
`TrueSec`对以太坊虚拟机(EVM)部分的代码进行了审计，主要关注由滥用内存分配和IO操作而引起的拒绝服务。EVM解释器(runtime/fuzz.go)存在一个`go-fuzz`的入口点，这个入口点成功地被使用。`TrueSec`确认了其功能性，但是在fuzzing过程中没有发现有影响的漏洞。
#### 1.3.5.1. 滥用intPool导致的廉价的内存消耗
由于性能的原因，在EVM的执行过程中，使用大整数会进入整数池`intPool`(intpool.go)。由于没有对整数池大小进行限制，使用特定的`opcode`组合，将导致意外出现廉价使用内存的情况。
    0 JUMPDEST      // 1 gas
    1 COINBASE      // 2 gas
    2 ORIGIN        // 2 gas
    3 EQ            // 3 gas, puts 20 + 20 bytes on the intpool
    4 JUMP          // 8 gas, puts 4-8 bytes on the intpool
比如说，合约代码将会消耗3.33e9单位的gas(在当时大约价值3300USD)，分配10G内存给`intPool`。以太坊虚拟机中分配10GB内存的预期`gas`成本是1.95e14(大约195,000,000USD)
当`intPool`产生`out of memory
panic`时，会导致拒绝服务攻击。但是共识算法对`gaslimit`进行了限制，能够阻止该拒绝服务攻击的发生。但是考虑到攻击者可能发现一种更有效的填充`intPool`的方式，或者`gaslimit
target`增长过于迅速等，`TrueSec`仍然推荐对`intPool`的大小进行限制。
#### 1.3.5.2. 在挖矿区块中脆弱的负值保护
账户之间以太坊的转账是通过`core/evm.go`里的`Transfer`方法进行的。
    func Transfer(db vm.StateDB, sender, recipient common.Address, amount *big.Int) {
        db.SubBalance(sender, amount)
        db.AddBalance(recipient, amount)
    }
输入`amount`是一个指向有符号类型的指针，可能存在负的引用值。一个负的`amount`将会把以太坊从收款方转移到转账方，使得转账方可以从收款方那里盗窃以太坊。
当接收到一个没有被打包的交易时，将会验证交易的值是否为正。如`tx_pool.go, validateTx()`:
    if tx.Value().Sign() 
### 1.4.3. 参考链接
参考项目 | URL地址  
---|---  
go ethereum |   
go fuzz |   
commit 5e29f4 |   
cors中间件 |   
otto | 