respective vendors during the disclosure process.
Error Type and Impact: Vulnerabilities found by PER-
IFUZZ fall into four categories: buffer overﬂows, address leaks,
reachable assertions, and null-pointer dereferences. We mark
buffer overﬂows and address leaks as potentially exploitable,
and reachable assertions and null-pointer dereferences as vul-
nerabilities that can cause a denial-of-service (DoS) attack by
triggering device reboots.
Double-fetch Bugs: We did not attempt to ﬁnd double-
fetch bugs in streaming DMA buffers, since we operated
under the assumption that an IOMMU preventing such bugs
is in place (see Section IV-A). That said, we did identify
several double-fetch bugs in code that accesses coherent DMA
buffers. These bugs can potentially be exploited, even when the
system deploys an IOMMU. We discuss these bugs in detail
in Section VI-G.
F. Case Study I: Design Bug in qcacld-3.0
One of the vulnerabilities we found in qcacld-3.0 is in
code that dereferences a ﬁrmware-provided pointer. PERIFUZZ
fuzzed the pointer value as it was read by the device driver.
The driver then dereferenced the fuzzed pointer and crashed
the kernel. An analysis of this vulnerability revealed that it is in
fact a design issue. The pointer was originally provided by the
driver to the device. Line 11 in Listing 1 turns a kernel virtual
address, which points to a kernel memory region allocated at
Line 4, into a 64-bit integer called cookie. The driver sends
this cookie value to the device, thereby effectively leaking a
kernel address.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
A_STATUS ol_txrx_fw_stats_get(...)
{
...
non_volatile_req =
(cid:44)→
if (!non_volatile_req)
return A_NO_MEMORY;
qdf_mem_malloc(sizeof(*non_volatile_req));
...
address as the cookie */
/* use the non-volatile request object's
(cid:44)→
cookie =
(cid:44)→
ol_txrx_stats_ptr_to_u64(non_volatile_req);
...
}
Listing 1: Kernel address leak in qcacld-3.0
An attacker that controls the peripheral processor can infer
the kernel memory layout based on the cookie values passed
by the driver. This address leak can facilitate exploitation
of memory corruption vulnerabilities even if the kernel uses
randomization-based mitigations such as KASLR. This bug
can be ﬁxed by passing a randomly generated cookie value
rather than a pointer to the device.
G. Case Study II: Double-fetch Bugs in bcmdhd4358
The bcmdhd4358 driver contains several double-fetch
bugs that allow an adversarial Wi-Fi chip to bypass an integrity
check in the driver. Listing 2 shows how the driver accesses
9
TABLE VII.
UNIQUE DEVICE DRIVER VULNERABILITIES FOUND BY PERIFUZZ
Error Type
Analysis
Double-fetch
Alloc.
Type
DC
DS
DS
DS
DS
DS
DS
DS
DS
DC
DC
DC
DC
DC
MM
Alloc.
Context
QC2
QC3
QC3
QC3
QC3
QC3
QC4
QC4
QC4
BC1
BC2
BC2
BC2
BC2
BC4
aQualcomm conﬁrmed the vulnerability but they do not assign CVEs for low-severity ones.
bCVE assigned for the address leak.
Unexpected RX queue index
Unexpected message type
Unexpected peer id
Unexpected number of ﬂows
Unexpected FW-provided pointer
Unexpected TX descriptor id
Unexpected endpoint id
Duplicate message
Unexpected payload length
Unexpected interface id
Unexpected ring id in create rsp.
Unexpected ring id in delete rsp.
Unexpected ring id in ﬂush rsp.
Uninitialized ﬂow ring state
Unexpected ﬂow ring pointer
Buffer Overﬂow
Null-pointer Deref.
Buffer Overﬂow
Buffer Overﬂow
Address Leak/Buffer Ovf.
Buffer Overﬂow
Reachable Assertion
Reachable Assertion
Reachable Assertion
Buffer Overﬂow
Buffer Overﬂow
Buffer Overﬂow
Buffer Overﬂow
Null-pointer Deref.
Buffer Overﬂow




Status (Severity)
Impact
CVE-2018-11902 (High)
Conﬁrmed (Low)a
Known
Known
CVE-2018-11947 (Med)b
Known
Known (Med)
Known (Med)
Known (Med)
CVE-2018-14852, SVE-2018-11784 (Low)
CVE-2018-14856, SVE-2018-11785 (Low)
CVE-2018-14854, SVE-2018-11785 (Low)
CVE-2018-14855, SVE-2018-11785 (Low)
CVE-2018-14853, SVE-2018-11783 (Low)
CVE-2018-14745, SVE-2018-12029 (Low)
Likely Exploitable
DoS
Likely Exploitable
Likely Exploitable
Likely Exploitable
Likely Exploitable
DoS
DoS
DoS
Likely Exploitable
Likely Exploitable
Likely Exploitable
Likely Exploitable
DoS
Likely Exploitable
a coherent DMA buffer that holds meta-information about
network data. At Line 4 and Line 5, the driver veriﬁes the
integrity of the data in the buffer by calculating and checking
an XOR checksum. The driver then repeatedly accesses this
coherent DMA buffer again. The problem here is that the
device, if compromised, could modify the data between the
point of the initial integrity check, and the subsequent accesses
by the driver.
1
2
3
4
5
6
7
8
9
10
11
12
static uint8 BCMFASTPATH
(cid:44)→
(cid:44)→
(cid:44)→
{
dhd_prot_d2h_sync_xorcsum(dhd_pub_t *dhd,
msgbuf_ring_t *ring, volatile cmn_msg_hdr_t
*msg, int msglen)
...
prot_checksum = bcm_compute_xor32((volatile
(cid:44)→
if (prot_checksum == 0U) { /* checksum is OK */
uint32 *)msg, num_words);
if (msg->epoch == ring_seqnum) {
ring->seqnum++; /* next expected sequence
(cid:44)→
goto dma_completed;
number */
}
}
...
}
Listing 2: Initial fetch and integrity check in bcmdhd4358
PERIFUZZ was able to trigger multiple vulnerabilities by
modifying the data read from this buffer after the integrity
check was completed. We show one buffer overﬂow vulnera-
bility in Listing 3, which was triggered by fuzzing the ifidx
value used at Line 4. The overlapping fetch that occurred
before this buffer overﬂow is a double-fetch bug, because the
overlapping fetch can invalidate a previously passed buffer
integrity check. Thus, in addition to safeguarding the array
access with a bounds check, the driver should copy the contents
of the coherent DMA buffers to a location that cannot be
accessed by the peripheral device, before checking the integrity
of the data in the buffer. Subsequent uses of device-provided
data should also read from the copy of the data, rather than
the DMA buffer itself.
1
2
3
4
5
6
7
8
9
10
11
12
void dhd_rx_frame(dhd_pub_t *dhdp, int ifidx,
(cid:44)→
{
void *pktbuf, int numpkt, uint8 chan)
...
ifp = dhd->iflist[ifidx];
if (ifp == NULL) {
DHD_ERROR(("%s: ifp is NULL. drop packet\n",
__FUNCTION__));
PKTFREE(dhdp->osh, pktbuf, FALSE);
continue;
}
...
}
Listing 3: Buffer overﬂow in bcmdhd4358
H. Case Study III: New Bug in qcacld-3.0
Listing 4 shows a null-pointer deference bug we discovered
in the qcacld-3.0 driver. The pointer to the netbufs_ring
array dereferenced at Line 9 is null, unless the driver is conﬁg-
ured to explicitly allocate this array. The driver conﬁguration
used by the Google Pixel 2 did not contain the entry necessary
to allocate the array. Although the driver never executes the
vulnerable code under normal conditions, we found that the
vulnerable line is reachable through legal control ﬂow paths.
1
2
3
4
5
6
7
8
9
10
11
htt_rx_netbuf_pop(htt_pdev_handle pdev)
static inline qdf_nbuf_t
(cid:44)→
{
int idx;
qdf_nbuf_t msdu;
HTT_ASSERT1(htt_rx_ring_elems(pdev) != 0);
idx = pdev->rx_ring.sw_rd_idx.msdu_payld;
msdu = pdev->rx_ring.buf.netbufs_ring[idx];
...
}
Listing 4: Null-pointer dereference in qcacld-3.0
It is difﬁcult to detect this bug statically, as it requires a
whole-program analysis of the device driver to determine if the
netbufs_ring pointer is initialized whenever the vulnerable
line can execute. PERIFUZZ consistently triggered the bug,
10
TABLE VIII.
TIME CONSUMED BY PERISCOPE’S PAGE FAULT
HANDLER (MEASURED IN µ SECONDS)
TABLE IX.
PEAK FUZZING THROUGHPUT FOR EACH FUZZED
ALLOCATION CONTEXT
Tracing Only
Tracing + Fuzzing
Mean
117.6
227.8
Minimum Maximum
99.8
182.7
194.5
379.7
however. This vulnerability discovery therefore bolsters the
argument that fuzzing can complement manual auditing and
static analysis.
I. Performance Analysis
1) Page Fault: PERISCOPE incurs run-time overhead as it
triggers a page fault for every instruction that accesses the
monitored set of DMA/MMIO regions. We quantiﬁed this
overhead by measuring the number of clock cycles spent
inside PERISCOPE’s page fault handler. We read the AArch64
counter-timer virtual count register CNTVCT_EL0 when enter-
ing the handler and when exiting from the handler, and calcu-
lated the difference between the counter values, divided by the
counter-timer frequency counter CNTFRQ_EL0. To minimize
interference, we disabled hardware interrupts while executing
our page fault handler. We also disabled dynamic frequency
and voltage scaling.
We tested the page fault handler under two conﬁgurations.
In one conﬁguration, PERISCOPE calls the default pre- and
post-instruction hooks that only trace and log memory ac-
cesses. In the other conﬁguration, we registered PERIFUZZ’s
instruction hooks to enable DMA/MMIO fuzzing. Table VIII
shows the mean, minimum, and maximum values over samples
of 500 page fault handler invocations for each conﬁguration.
Note that we deliberately trade performance for deter-