如果输出`Good job!`则表示得到flag
所以下面就是取逆向`q`, `r`, `p`三个函数，原理和上面逆向`u`函数一样：
    def q(O0OOO0O0O00O00OOO):
        return O0OOO0O0O00O00OOO.decode('hex')
    def r(O0O000OO00OO00OO0):
        if len(O0O000OO00OO00OO0) == 18:
            return 0
        return 1
`q`和`r`两个函数，一个是进行decode操作，一个是判断长度，所以判断flag是否正确就在`p`函数中，而`p`函数是手工最难逆的函数，我从下午6点，逆到了8点，/(ㄒoㄒ)/~~，我应该是采取了最笨的方法，前面提到了，我现在有个自动化的思路，之后会放到我blog中。
    def p(hhh):
      if ((ord(hhh[13])*25+254)%256) ^ 184 == 139:
        if ((ord(hhh[2])*3+158)%256) ^ 161 == 21:
          if ((ord(hhh[10])*251+142)%256) ^ 128 ==  115:
            if ((ord(hhh[5])*99+28)%256) ^ 130 ==  253:
              if ((ord(hhh[17])*219+88)%256) ^ 130 ==  180:
                if ((ord(hhh[14])*83+119)%256) ^ 161 ==  101:
                  if ((ord(hhh[7])*57+178)%256) ^ 184 ==  91:
                    if ((ord(hhh[1])*245+207)%256) ^ 184 ==  57:
                      if ((ord(hhh[0])*249+166)%256) ^ 230 ==  85:
                        if ((ord(hhh[8])*213+134)%256) ^ 161 ==  240:
                          if ((ord(hhh[4])*199+255)%256) ^ 128 ==  202:
                            if ((ord(hhh[6])*85+30)%256) ^ 230 ==  202:
                              if ((ord(hhh[9])*173+69)%256) ^ 227 ==  124:
                                if ((ord(hhh[15])*141+205)%256) ^ 227 ==  170:
                                  if ((ord(hhh[11])*133+218)%256) ^ 130 ==  149:
                                    if ((ord(hhh[12])*139+193)%256) ^ 230 ==  2:
                                      if ((ord(hhh[3])*67+202)%256) ^ 227 ==  24:
                                        if ((ord(hhh[16])*103+151)%256) ^ 128 ==  145:
                                          return 0
      return 1
    #  这代码弄出来的时候差点猝死
然后写个脚本爆破出flag(现在想想，应该可以用z3)：
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    flag = [""]*18
    bds = ['((x*25+254)%256) ^ 184 == 139', '((x*3+158)%256) ^ 161 == 21', '((x*251+142)%256) ^ 128 ==  115', '((x*99+28)%256) ^ 130 ==  253', '((x*219+88)%256) ^ 130 ==  180', '((x*83+119)%256) ^ 161 ==  101', '((x*57+178)%256) ^ 184 ==  91', '((x*245+207)%256) ^ 184 ==  57', '((x*249+166)%256) ^ 230 ==  85', '((x*213+134)%256) ^ 161 ==  240', '((x*199+255)%256) ^ 128 ==  202', '((x*85+30)%256) ^ 230 ==  202', '((x*173+69)%256) ^ 227 ==  124', '((x*141+205)%256) ^ 227 ==  170', '((x*133+218)%256) ^ 130 ==  149', '((x*139+193)%256) ^ 230 ==  2', '((x*67+202)%256) ^ 227 ==  24', '((x*103+151)%256) ^ 128 ==  145']
    bds_index = [13,2,10,5,17,14,7,1,0,8,4,6,9,15,11,12,3,16]
    for y in xrange(18):
        for x in xrange(256):
            if eval(bds[y]):
                flag[bds_index[y]] = x
                break
    payload= ""
    for x in flag:
        payload += chr(x)
    print payload.encode('hex')
    # b5aab27b5d01d6b91f021f59c97ddf6c76fa
    $ python final.pyc 
    Please input your key(hex string):b5aab27b5d01d6b91f021f59c97ddf6c76fa
    Good job! The flag is pwnhub{flag:your input(lower case)}
傻逼的半自动化脚本：
    #!/usr/bin/env python2.7
    # -*- coding=utf-8 -*-    
    import dis, marshal
    from pwn import u16
    one_para = ["\x01","\x02", "\x03", "\x21", "\x17", "\x0a", "\x0b", "\x0c", "\x0f", "\x13", "\x14", "\x15", "\x16", "\x18", "\x19", "\x1a", "\x1c", "\x1e", "\x1f", "\x47", "\x48"]
    f = open("final.pyc")
    f.read(8)
    code = marshal.load(f)
    code = code.co_consts[45]
    print code.co_name
    asm = code.co_code
    # asm = code.co_consts[45].co_code
    stack = []
    varn = {
        'DIVIDER': None,       # DEVIDER
        'OOO000OOOOOO00OOO': None,
        'OOOO000OO000OOOOO': None,
        'OOO0OOO00O00OOOO0': None,
        'O0OOO0O0O00O00OOO': None,
        'O0O000OO00OO00OO0': None,
    }
    flag = 0
    # n = 1632
    n = 0
    add = 0
    while True:
        if len(asm) <= n:
            print n
            break
        if asm[n] == 'q':  # JUMP_ABSOLUTE
            n = u16(asm[n+1:n+3])
            continue
        elif asm[n] == 'n':  # JUMP_FORWARD
            n += u16(asm[n+1:n+3]) + 3
            continue
        # elif asm[n] in one_para:
        #     dis.disassemble_string(asm[n])
        #     n+=1
        #     continue
        elif asm[n] == "\x53":   # RETURN
            dis.disassemble_string(asm[n])
            break
        try:
            print "%d: "%n
            dis.disassemble_string(asm[n:n+3])
            add = 3
        except IndexError:
            try:
                dis.disassemble_string(asm[n])
                add = 1
            except IndexError:
                print "%d: %d"%(n, ord(asm[n]))
                break
        if asm[n] == 'd': # LOAD_CONST
            key = u16(asm[n+1:n+3])
            value = code.co_consts[key]
            stack.append(value)
            n += 3
        elif asm[n] == '|': # LOAD_FAST
            key = u16(asm[n+1:n+3])
            value = varn[code.co_varnames[key]]
            stack.append(value)
            n += 3
        elif asm[n] == '}':   # STORE_FAST
            key = code.co_varnames[u16(asm[n+1:n+3])]
            varn[key] = stack.pop()
            n += 3
        elif asm[n] == 'k':   # COMPARE_OP
            x1 = stack.pop()
            x2 = stack.pop()
            if x1 == x2:
                flag = 1
            n += 3
        elif asm[n] == "s":   # POP_JUMP_IF_TRUE
            if flag:
                n = u16(asm[n+1:n+3])
                flag = 0
            else:
                n += 3
        # elif ord(asm[n]) == 114:  # POP_JUMP_IF_FALSE
        #     break 
        else:
            n += add
* * *
自动跑p函数，使用z3跑出flag自动化脚本：
    #!/usr/bin/env python2.7
    # -*- coding=utf-8 -*-    
    import dis, marshal
    from pwn import u16
    import z3
    flag_n = z3.BitVecs('x__0 x__1 x__2 x__3 x__4 x__5 x__6 x__7 x__8 x__9 x__10 x__11 x__12 x__13 x__14 x__15 x__16 x__17', 8)
    f = open("final.pyc")
    f.read(8)
    code = marshal.load(f)
    code = code.co_consts[34]
    print code.co_name
    asm = code.co_code
    # asm = code.co_consts[45].co_code
    stack = []
    varn = {
        'DIVIDER': None,       # DEVIDER
        'OOO000OOOOOO00OOO': None,
        'OOOO000OO000OOOOO': None,
        'OOO0OOO00O00OOOO0': flag_n,
        'O0OOO0O0O00O00OOO': None,
        'O0O000OO00OO00OO0': None,
    }
    flag = 0
    # n = 1632
    n = 0
    add = 0
    index = 0
    while True:
        if len(asm) <= n:
            print n
            break
        if asm[n] == 'q' or asm[n] == 'r':  # JUMP_ABSOLUTE    or  POP_JUMP_IF_FALSE
            n = u16(asm[n+1:n+3])
            continue
        elif asm[n] == 'n':  # JUMP_FORWARD
            n += u16(asm[n+1:n+3]) + 3
            continue
        # elif asm[n] in one_para:
        #     dis.disassemble_string(asm[n])
        #     n+=1
        #     continue
        elif asm[n] == "\x53":   # RETURN
            dis.disassemble_string(asm[n])
            break
        try:
            print "%d: "%n
            dis.disassemble_string(asm[n:n+3])
            add = 3
        except IndexError:
            try:
                dis.disassemble_string(asm[n])
                add = 1
            except IndexError:
                print "%d: %d"%(n, ord(asm[n]))
                break
        if asm[n] == 'd': # LOAD_CONST
            key = u16(asm[n+1:n+3])
            value = code.co_consts[key]
            stack.append(value)
            n += add
        elif asm[n] == '|': # LOAD_FAST
            key = u16(asm[n+1:n+3])
            value = varn[code.co_varnames[key]]
            stack.append(value)
            n += add
        elif asm[n] == '}':   # STORE_FAST
            key = code.co_varnames[u16(asm[n+1:n+3])]
            varn[key] = stack.pop()
            n += add
        elif asm[n] == 'k':   # COMPARE_OP
            op = u16(asm[n+1:n+3])
            if op == 3:
                x1 = stack.pop()
                x2 = stack.pop()
                flag_n[index] = (x2==x1)
            elif op == 2:
                x1 = stack.pop()
                x2 = stack.pop()
                if x1 == x2:
                    flag = 1
            n += add
        elif asm[n] == "s":   # POP_JUMP_IF_TRUE
            if flag:
                n = u16(asm[n+1:n+3])
                flag = 0
            else:
                n += add
        elif asm[n] == chr(25):   # BINARY_SUBSCR
            x1 = stack.pop()
            x2 = stack.pop()
            stack.append(x2[x1])
            #print stack
            index = x1
            n += add
        elif asm[n] == chr(20):   # BINARY_MULTIPLY
            x1 = stack.pop()
            x2 = stack.pop()
            stack.append(x2*x1)
            #print stack
            n += add
        elif asm[n] == chr(22):   # BINARY_MODULO
            x1 = stack.pop()
            x2 = stack.pop()
            stack.append(x2%x1)
            #print stack
            n += add
        elif asm[n] == chr(65):   # BINARY_XOR
            x1 = stack.pop()
            x2 = stack.pop()
            stack.append(x2^x1)
            #print stack
            n += add
        elif asm[n] == chr(23):   # BINARY_ADD
            x1 = stack.pop()
            x2 = stack.pop()
            stack.append(x2+x1)
            #print stack
            n += add
        else:
            n += add
    flag = []
    for x in flag_n:
        s = z3.Solver()
        s.add(x)
        s.check()
        res = s.model()
        flag.append(res[res[0]])
    flag_hex = ""
    for y in flag:
        flag_hex += chr(y.as_long())
    print flag_hex.encode('hex')
思路挺简单的，相当于自己实现一个解释器，实现一个stack，因为我代码中的opcode不全，所以只能针对本题，还有几种思路，比如魔改dis，目前的dis是线性的翻译opcode，可以按照我脚本的思路，当遇到JUMP类指令时，也跟随跳转，但是这个不能去除混淆，混淆还是需要自己写代码去，而我上面自动跑flag的脚本思路是来源于Triton，传入的参数是未知的，就设置为符号变量，当分支判断的时候进行响应的处理，进行动态分析，这样就不需要去混淆。
等我把Triton研究清楚了，说不定能用Triton调试pyc？
* * *