这部分在源码里位置如下
我们发现在unshare 之后调用了一个关键call，就是mount。并且 flag 位设置的 是 MS_BIND 也就是bind mount。
原本情况如果你在主进程退出，相关的NS也会一并跟着销毁，但通过bind mount 持久化的 NS 文件，不会因为主进程退出而销毁，
通过列出文件的inode号，我们发现的确是持久化成功了。相关实现代码和之前处理 resolv.conf 是一样的，这里就不在赘述。
但是处理持久化mnt也没那么简单，你会发现会返回错误 Invalid argument
❯ unshare —mount=/tmp/.ICE-unix/mnt
unshare:mount /proc/276532/ns/mnt on /tmp/.ICE-unix/mnt failed:Invalid
argument
核心原因在于挂载点标志的问题，每个挂载点都有一个propagation type标志。
比如：
  * MS_SHARED
  * MS_PRIVATE
  * MS_SLAVE
  * MS_UNBINDABLE
问题原因和解决方案可以在这个issue中找到。
[unshare: Persisting mount namespace no longer working · Issue #289 ·
karelzak/util-linux](https://github.com/karelzak/util-linux/issues/289)
issue
中有提到，基于[systemd](https://wiki.archlinux.org/title/systemd)启动的系统默认是共享挂载的（可能是/，或其他挂载点并不一定全是）。而想要挂载
mntns 必须是在private filesystemd上（其他NS挂载暂时没发现啥问题）。因为我使用的开发系统是Ubuntu
20.04，默认走的是systemd（高版本Centos也迁移到了systemd），所以会产生这个问题。
解决方案就是先建立一个private 挂载点，然后在里面进行持久化mntns。
到此位置 init 的相关工作也就做的差不多了。
## nsjoin (进入Namespace环境)
再次进入隔离空间，也没有那么一帆风顺。
> nsenter – run program with namespaces of other processes
通过 nsenter 接口我们可以让当前进程进入指定的NS空间，其中用到的syscall 是setns。
## Setns with net and mnt
用代码也很好实现,因为syscall 这个包里面没有直接实现setns（当然外部有），但也可以通过 RawSyscall 的方式通过call 调用号来实现。
就在这个时候 对mnt的setns出现了问题（又是这该死的 invalid argument）。
❯ ./SetnstMntTest
[-]setns on mnt namespace failed:invalid argument
后来在 golang 的issue 也发现有人遇到过这个问题
[Calling setns from Go returns EINVAL for mnt namespace · Issue #8676 ·
golang/go](https://github.com/golang/go/issues/8676)
原因是因为go程序默认启动就以多线程的模式运行的，但是setns mnt不能在这种模式下工作，也不太清楚这个限制的原因。解决方案利用的Docker的办法：
使用 cgo 来提前setns，这个时候 go 的runtime 并还没启动。所以我们可以在 golang 中使用 import
“C”的方式来写C，解决这个问题。
## Using busybox anti HIDS
关于Anti的部分现在做的还不算多，我先说一下这里使用busybox 的理由（也是Exp建议并制作的）。
为什么要使用busybox
使用busybox的首要考虑是为了对抗HIDS。HIDS的一个基本功能之一就是记录恶意的命令执行。有关这个功能的实现方式有很多种，在不考虑从ring0层面上进行监控的前提下，很多厂商都会使用修改bash程序，修改libc或者使用全局ld
preload方式来监控程序对于命令执行函数(system, popen, execve)的调用。
常见HIDS进行命令监控的方法（不完全,来自网上的一些方法总结）：
  * Patch bash/other shell
  * PROMPT_COMMAND 监控
  * 在ring3通过/etc/ld.so.preload劫持系统调用
  * 二次开发glibc加入监控代码(据说某产品就是这么做监控的)
  * 基于调试器思想通过ptrace()主动注入
  * 遍历/proc目录，无法捕获瞬间结束的进程。
  * Linux kprobes/uprobes调试技术，并非所有Linux都有此特性，需要编译内核时配置。
  * 修改glic库中的execve函数，但是可通过int0x80绕过glic库，这个之前360 A-TEAM一篇[文章](http://mp.weixin.qq.com/s?__biz=MzUzODQ0ODkyNA==&mid=2247483854&idx=2&sn=815883b02ab0000956959f78c3f31e2b&scene=21#wechat_redirect)有写到过。
  * 修改sys_call_table，通过LKM(loadable kernel module)实时安装和卸载监控模块，但是内核模块需要适配内核版本。
  * ebpf yyds (目测是最理想的方法)
为了对抗ring3层面上的hook。我们就需要一个单独编译的，不依赖libc，并且全静态编译不调用外部命令执行方法的shell。
除此之外，考虑到部分hids除了hook
bash之外，可能还会对一些常用的命令进行修改和检测。所以我们希望能有一个不依赖任何so库，只需要一个文件就能提供shell以及一些常用命令的工具。并且考虑到实际攻防中的网络情况。我们还希望这个文件的大小能够尽量的小。
这样的解决方案在IOT领域还是挺常见的。由于IOT设备的特殊性，上述要求也是IOT设备中对对于shell的常见要求。所以很自然的就可以想到，只要把IOT领域最常见的解决方案busybox稍微做一下定制。就能满足要求了。
## 定制busybox
使用busybox的另外一个好处就是支持定制。结合红队的常见需求，我们对busybox做了如下一些自定义的配置。
  * FEATURE_SUID [=n]
出于安全考虑，busybox调用shell时默认会drop掉suid权限。这对红队没必要，很多时候还是个麻烦（需要额外调用setresuid）所以禁用
  * FEATURE_PREFER_APPLETS [=y]
默认情况下，busybox的shell优先从环境变量PATH中寻找我们执行的命令。基于上一章的讨论，我们更需要busybox优先使用内建的命令。所以启用该选项
  * STATIC [=y]
静态编译busybox。让其不依赖任何so库
  * CROSS_COMPILER_PREFIX [=musl-]
我们使用musl-libc而不是常规的glibc编译。使用musl-libc的主要优势是能够显著的减少程序的体积。相比于臃肿的glibc来说，针对嵌入式设备准备musl更加的轻量。
  * FEATURE_EDITING_SAVEHISTORY [=n]
我们并不希望shell记录任何历史
  * 命令裁剪
默认busybox支持的命令太多了。许多命令并没有什么用。所以这里根据需要只保留了部分对红队有帮助的命令用以减少体积。
  * 修改源码以支持任意文件名
默认情况下，busybox根据自身程序来判断执行什么命令。比如把程序命名成ls就执行ls，命名成wget就执行wget。其中特例是如果程序以busybox开头，则会根据命令行参数的第一项来执行对应命令。
但是上传的时候不能耿直的就叫busybox。基本的伪装还是要做的。所以就需要修改一点源码。需要修改
libbb/appletlib.c中的run_applet_and_exit函数。在程序根据自身文件名寻找applet失败的时候，转而使用第一个参数来寻找applet即可
最终编译出来的busybox经过upx压缩，大小在350kb左右。属于可以接受的范围。
对于busybox内置的命令都使用本身来执行，如果没有再调用外部命令，默认情况下也不会记录各种 shell history，省去了你经常敲:
unsetPROMPT_COMMAND HISTORY HISTFILEHISTSAVE HISTZONE HISTORY
HISTLOG;exportHISTFILE=/dev/null;
这里使用 go-bindata 的方法将 busybox 打包进自身然后释放到隔离空间内，然后运行，这样外面也是看不到的。
## 隐藏痕迹
###  Process Hide
这是单独启动的一个子进程来完成的操作，目的是为了做进程隐藏，和一些擦屁股的事情。
这里用到的方法 —— 挂载覆盖/proc/pid 目录 ：
[Linux进程隐藏：中级篇 – FreeBuf网络安全行业门户](../articles/system/250714.html)
这是一种成本很低快速可完成的方法，但同时也很容易暴露。
这里回答之前的坑，为什么不使用PID NS来做进程隔离。要使用PID NS
我们需要一个新的rootfs，并且持久化的时候至少需要一个进程保持运行。一个最小的 tiny core
rootfs,他的大小大概在16m左右（可进一步缩小）。
但设想一下，如果我们深处多层代理的情况要传输包括自身在内接近20m的文件到target主机上，这可能是件很糟糕的事情，所以目前我先用这种方式代替，后面想想方法再切换过去，但不得不说使用新的rootfs
是解决PID hide最佳方式。
代码依然是比较简单的。
整个过程会在一个 go 协程内部不断循环，一旦检测到新的进程启动就会保姆级别帮助mount掉。检测方法很简单就是通过PPID来辨别是否属于其子进程。
###  Hide ass
因为我们是使用 SSH terminal 全交互上目标主机的，所以这会有相应的会话记录产生，并被记录到Xtmp文件当中：
寻找过尝试在此过程中不记录这些信息但比较菜没能解决，后来还是通过简单直接的方式删除对应的日志来进行隐藏。
在 emp3r0r post-exploitation framework 中刚好有实现这部分的代码：
[jm33-m0/emp3r0r](https://github.com/jm33-m0/emp3r0r/blob/c2e5c483e4645958004fea40c1609620391957df/core/internal/agent/xtmp.go#L15)
但是在这作者写错了utmp的日志位置，这里应该是 /var/run/utmp。
xtmpFiles :=[]string{“/var/log/wtmp”,”/var/log/btmp”,”/var/log/utmp”}
并且作者使用的是字符串包含的方式来进行匹配删除，其实并没有去解析Xtmp二进制文件的各个位的含义，这样带来的问题就是无法精确控制你要删除的条目。
但这些问题你可以通过匹配其他特征去解决，或者自行去解析每个bytes。
###  SSH Client
这里写的Adapter其实主要在于 SCP Silencer
到目标主机上（我以为要把卢老板的代码删完，后来发现卢老板写的真香），并执行启动过程的自动化操作。其实你完全可以自己手工搞上去，然后在用标准ssh
client 执行命令去启动Silencer（但不建议）。
目前这还是个玩具，还需要进一步改进，欢迎讨论更多降噪→消音→隐匿的手法。
完善后会同步到 。
## Reference
  * [Docker安全性与攻击面分析] 
  * [namespaces-in-go] https://medium.com/@teddyking/namespaces-in-go-network-fdcf63e76100
  * [使用golang理解Linux namespace] 
  * [emp3r0r](https://zhuanlan.zhihu.com/p/387830848/edit)()
  * [Linux进程隐藏：中级篇] [https://www.freebuf.com/articles/system/250714.html](../articles/system/250714.html)
  * [Linux 系统动态追踪技术介绍] 
  * [PROMPT_COMMAND](https://zhuanlan.zhihu.com/p/387830848/edit)()
  * [如何在Linux下监控命令执行] [https://mp.weixin.qq.com/s?__biz=MzUzODQ0ODkyNA==&mid=2247483854&idx=2&sn=815883b02ab0000956959f78c3f31e2b](https://mp.weixin.qq.com/s?__biz=MzUzODQ0ODkyNA==&mid=2247483854&idx=2&sn=815883b02ab0000956959f78c3f31e2b)
  * [“驭龙”Linux执行命令监控驱动实现解析] 
  * [namespaces(7) — Linux manual page] 
  * [persistent namespaces] 
  * [netsetgo] 
  * [go-interactive-shell] 
  * 
  * 