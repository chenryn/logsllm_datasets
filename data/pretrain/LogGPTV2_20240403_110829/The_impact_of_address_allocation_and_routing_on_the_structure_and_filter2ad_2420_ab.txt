A similar practice is followed by some large end-users like web-
hosting services, which have obtained a provider independent allo-
cation. Such an end-user might split its allocation and announce the
different sub-blocks from different upstream providers, for load-
sharing reasons.
The previous routing practices described scenarios in which the
original allocation does not appear in the routing table, but sub-
preﬁxes of that allocation do (this is not always true, since some-
times an ISP will advertise its allocation intact and also advertise
sub-preﬁxes; we return to this in a later section). These sub-preﬁxes
may not completely cover the original allocation’s address space.
We label this practice splitting, and refer to the allocation that splits
as a split allocation, and to the products of splitting as split preﬁxes.
As we discuss later, not all allocations split. Some allocations ap-
pear in their entirety as one preﬁx in the routing table. We call these
intact allocations, and the corresponding preﬁxes intact preﬁxes.
We now describe routing practices that describe how assign-
ments to customers (or sub-preﬁxes thereof) appear in the routing
table. There are (at least) three qualitatively different routing prac-
tices in this category.
A customer of an ISP might provide for backup connectivity by
advertising its assigned space through an upstream provider (say
ISP B) different from the one it obtained the assignment from (say
ISP A). In this case, A’s allocation appears (either intact or split)
in the routing table and is a less-speciﬁc preﬁx of the customer’s
assignment. A slight variant of this practice is that the customer,
instead of advertising its entire assigned space advertises a part
of it through the upstream, preferentially drawing trafﬁc from its
upstreams. Finally, a customer which gets its addresses from one
ISP might split its assignment into multiple preﬁxes to perform load
sharing among different providers.
From the perspective of the routing table, these routing practices
result in more-speciﬁc preﬁxes being advertised in BGP. We say
that a preﬁx spawns more-speciﬁcs, and that these routing practices
govern spawning.
2.2 ARAM
A detailed causal model of a routing table might have attempted
to explicitly include all the processes described above: the alloca-
tion of address space to LIRs, the assignment of address preﬁxes to
customers, and the various routing practices described above. Such
a model, while closer to physical reality, is very difﬁcult to deﬁne,
and even harder to validate. As we shall see, the upper-levels of the
address assignment hierarchy (IANA to RIRs and RIRs to LIRs) are
relatively easy to model. Data about assignments is available, and it
may be possible to construct models for this. However, succinctly
capturing the physical processes underlying routing practice seems
to be beyond our reach today. While the kinds of routing practices
that occur today are probably small in number, economic and other
considerations determine which ISPs and which customers follow
what kinds of routing practices. Capturing these considerations is
left for a future generation of models.
ARAM is a less ambitious, but nonetheless very useful, hybrid
model, with three parts. First, it models the allocation of address
preﬁxes from RIRs to LIRs. Then, it incorporates knobs that deter-
mine how these allocations appear in the routing table—i.e., whether
the allocation is split, or appears intact. Finally, it models the ap-
pearance of customer assignments in the routing table by providing
knobs that determine preﬁx spawning (Section 2.1.2).
In the rest of this section, we describe these three components
of ARAM, and provide intuitive justiﬁcation for our design of the
model. In Section 2.3, we validate ARAM’s design.
Before describing the internals of ARAM, we describe its inputs
and outputs. The output of ARAM is a routing table of a desired
size. More precisely, the output is the collection of address preﬁxes
that might appear in a routing table of this size, and does not include
other routing attributes that might be associated with these preﬁxes,
such as AS paths, next hops, or BGP communities. The desired
size of the routing table is not an explicit input to ARAM; rather it
is implicitly deﬁned by ﬁve input parameters:
• The number of allocations made by RIRs to LIRs is deter-
• Fsplit is the probability of an allocation splitting and Csplit
is the percentage of address space of a split allocation that is
mined by a parameter N.
advertised in the routing table
• Finally, Fspawn is the probability that a split or intact preﬁx
spawns one or more preﬁxes, and Cspawn is the fraction of
address space of a split or intact preﬁx that is advertised in
the routing table as spawned preﬁxes (i.e., as more speciﬁc
preﬁxes).
Apart from N, the other parameters encode the aggregate impact
of various routing practices described in Section 2.1.2. Exporting
these knobs allows users of the model to extrapolate how changes
in routing practice might affect the “shape” of routing tables (i.e.,
the relationship between preﬁxes).
Modeling Allocations
The ﬁrst step in generating a routing table in ARAM is to generate
N allocations. Following current registry practice, ARAM gener-
ates allocations whose preﬁx length is between /10 and /20. The
number of preﬁxes N (x) of length x (more precisely, x is the pre-
ﬁx length minus 9, so that the shortest preﬁx generated is a /10) is
determined by a function of the form N (x) ∝ xk for some constant
k.
The intuition for this simple form of allocation distribution arises
from the observation that RIR allocation policy is based on docu-
mented need. To get address space of a certain size, an LIR must
justify the need for that size either by presenting a business case
or by demonstrating an appropriate rate of assignments to cus-
tomers [15]. Thus, a large ISP is (eventually) allocated a large
block of addresses (shorter preﬁx length), and small ISPs are al-
located smaller blocks (longer preﬁx length). Since the distribution
of ISPs can plausibly be said to be a power law (following the more
general, and well-established empirical observation that companies
are power-law distributed by size [21]), we can expect that N (x)
follows the form described above.
This model makes one important simpliﬁcation. In practice, an
LIR is progressively allocated space based on need and, because
these allocations are not guaranteed to be contiguous, an LIR may
have several distinct preﬁxes allocated to it. ARAM, however, im-
plicitly allocates one preﬁx to an LIR, and assumes that this preﬁx
is the aggregated result of several allocation requests. Furthermore,
this version of ARAM hard-codes the value of k = 3.4 into the
model. In principle, of course, we could have exported k to enable
the user of a model to explore how quantitative changes in the allo-
cation distribution affect routing tables. We have left this for future
work.
The mechanics of allocation in ARAM work as follows. ARAM
maintains a pool of /8s from which it makes these allocations. As
a matter of detail, the /8s that ARAM uses are the same ones that
are in use by RIRs, or that have been reserved by IANA for future
use. There are about 113 such /8s. ARAM repeatedly performs
the following steps N times (assuming that the /8s are numerically
ordered):
• It draws a random sample from the distribution N (x) ∝ xk.
• It allocates this preﬁx from the ﬁrst /8 whose current utiliza-
This determines the preﬁx length of an allocation.
tion is less than 80%.
In this way ARAM sequentially ﬁlls up /8s until N allocations have
been made.
Modeling Advertisement of Allocations
The next step in the model determines how allocations appear in
the routing table. As we discussed in Section 2.1.1, although one
might expect an allocation to appear intact in the routing table, a
variety of prevalent routing practices cause allocations to “split”
and appear as a collection of sub-preﬁxes in the routing table.
Rather than attempt to model these routing practices, ARAM de-
ﬁnes the frequency and extent of this practice using two parameters.
Fsplit deﬁnes the percentage of allocations that split. For each al-
location, ARAM tosses a coin with probability Fsplit to determine
whether that allocation is split or intact. When an allocation splits,
in practice, the collection of split preﬁxes corresponding to that al-
location does not usually cover the allocation’s address space. Intu-
itively, these split preﬁxes cover only that part of the address space
actually utilized (assigned to customers). To model these, ARAM
uses the Csplit parameter and, for each split allocation, generates
a number of preﬁxes such that the address space covered by those
preﬁxes is as close as possible to Csplit times the address space of
the split allocation.
Into what preﬁxes does an allocation split? From our analysis of
the data, there does not appear to be a dominant pattern of alloca-
tion splitting, nor does there appear to be a rationale (e.g., larger
allocations splitting in a certain way) for the way split allocations
appear in the routing table.
There is one important exception to this. Some web-hosting and
content providers (these are not the only examples of such practice;
the other examples defy classiﬁcation but are numerous) that obtain
their own allocations from RIRs sometimes split into a large num-
ber of small preﬁxes (e.g.,/24s). Each such preﬁx intuitively repre-
sents one data-center or part thereof. ARAM captures this practice
by assuming that a ﬁxed fraction (20%) of split allocations split in
this way.
For the rest of the split allocations, we use a rather ad-hoc split-
ting rule. Two observations guided the design of this rule. First,
in practice, allocations do not split into equal-sized address blocks.
In particular, when splitting is for the purposes of load sharing, one
might expect that skewed trafﬁc distributions to different parts of
the address space will result in size diversity among the split pre-
ﬁxes. Second, for reasons of routing manageability, we suppose
that allocations will split into a relatively small number of preﬁxes.
The splitting rule we use is:
Split the allocation into preﬁxes of length /(i + 2) and
/(i+3), where /i is the length of the original allocation.
The number of /(i + 2)s and /(i + 3)s are determined
as follows: for every /(i + 2), two /(i + 3)s are also
produced (i.e., equal amounts of address space appear
as /(i + 2)s and as /(i + 3)s). Finally, as many /(i + 3)s
are added as are necessary to cover up to Csplit times
the address space of the allocation.
Modeling More Speciﬁcs
In this ﬁnal step of the model, ARAM determines the preﬁxes which
are spawned from intact or split preﬁxes. Essentially, spawned pre-
ﬁxes in a routing table appear as more-speciﬁcs of other preﬁxes,
and represent various routing practices: backup routing and cus-
tomer load sharing among upstreams (Section 2.1.2), or an ISP an-
nouncing its allocation as well as preﬁxes split from that allocation
(Section 2.1.1).
As with splitting, rather than modeling these routing practices,
ARAM encodes their effect using two parameters: Fspawn, and
Cspawn. Fspawn is the probability that an intact or split preﬁx ac-
tually spawns at least one more-speciﬁc preﬁx. Intuitively, not all
such preﬁxes spawn more-speciﬁcs. Consider a cable ISP that splits
up its allocation; because such an ISP serves residential customers
or small businesses, the ISP does not have customers who engage
in multi-homing. Similarly, an end-user who receives a direct allo-
cation from the RIR would not need to spawn preﬁxes if it does not
perform load sharing.
Furthermore, not all the space covered by an intact or split preﬁx
appears as spawned preﬁxes. For example, only some of an ISP’s
customers may actually multi-home, resulting in more speciﬁcs
in the routing table. Once ARAM has decided, based on a coin
toss with probability Fspawn whether a given intact or split preﬁx
spawns some preﬁxes, it then generates spawned preﬁxes such that
Cspawn of the address space of the original preﬁx is covered by
spawned preﬁxes.
Finally, as with splitting, our rule for generating spawned pre-
ﬁxes represents a delicate compromise between trying to capture
diversity in routing practice, and keeping the model simple and
understandable. We have two spawning rules. First, all spawned
preﬁxes are in the range /19-/24. This rule follows from ISP ﬁl-
tering practice which limits the longest preﬁx that may appear in
backbone routing tables to /24. In addition, very few customers get
blocks larger than /19 from ISPs. Second, to generate spawned pre-
ﬁxes for a given “parent” preﬁx, ARAM repeats the following two
steps until the fraction Cspawn of the parent preﬁx is covered.
• Pick the largest i between 19 and 24 such that one /i, two
/(i+1)s, four /(i+2)s and so on up to 224−i /24s can be gen-
erated within the spawnable address space. (The basic idea
is that equal address space is devoted to each preﬁx length).
The motivation for this rule is its simplicity. It closely paral-
lels our splitting rule; in that case, however, routing manage-
ability was used as a motivation to keep the number of split
preﬁxes relatively small. Such a consideration isn’t neces-
sary for spawning since an ISP cannot, in general (of course,
there may be exceptions to this) control what its customers
do with their assignments.
• Assign each preﬁx, without overlap, to a random location
within the parent preﬁx’s address space. The intuition behind
this is that from the perspective of an ISP, which customer de-
cides to advertise its assignment for backup or load balancing
is generally uncorrelated with the address space, so that the
more-speciﬁcs can be expected to be quite random.
In summary, notice that ARAM models a two-depth routing ta-
ble. By depth of a preﬁx, we mean the number of its less speciﬁc
preﬁxes or ancestors. All intact and split preﬁxes appear at depth
zero of the routing table (i.e., they have no less speciﬁc routing ta-
ble entries). All spawned preﬁxes appear at depth one and have
one parent (either an intact or a split preﬁx) from which they are
spawned. Actual routing tables have a small percentage of preﬁxes
at other depths (not more than 10% during the last 5 years).
2.3 Validation of ARAM
In this section, we validate ARAM by comparing actual rout-
ing table snapshots against comparably sized tables generated by
ARAM. We then discuss each aspect of ARAM’s design, and pro-
vide quantitative justiﬁcation wherever possible.
2.3.1 Data Sources, Assumptions and Methodology
To validate our modeling of allocation practice, we use data from
the three main RIRs (ARIN, RIPE and APNIC)3. Databases of allo-
cations made by the RIRs are publicly available [24, 25, 26]. LIRs
register their assignments in a Whois database; a bulk data dump
of these assignments is also available from the RIRs upon written
request.
We processed the allocation databases, to sanitize them, in two
ways. First, while most allocations are powers of two, some (about
0.5%) cannot be expressed as a single preﬁx. This may happen
3A fourth, LACNIC, was established only in Nov 2002 and is not
included in our validations.
x
i
f
e
r
p
r
e
p
r
o
r
r
e
e
r
a
u
q
s
n
a
e
m
t
o
o
R
0.06
0.05
0.04
0.03
0.02
0.01
0
0
Scatter
ARAM
20000
10000
s
e
x
i
f
e
r
p
f
o
r
e
b
m
u
N
ARAM
Real routing table
10
20
30
40
50
60
70
Months since Nov. 1997
0
6
8
10
12
14
16
18
20
22
24
Prefix length
Figure 1: Normalized RMS error per preﬁx
Figure 2: August 1998: Preﬁx length distributions
when an RIR makes allocations which are not a power of two [22]
or if two contiguous preﬁxes of different sizes were allocated to
the same organization [23]. We break up such allocations into the
smallest possible number of preﬁxes. Second, occasionally some
ISPs will announce aggregated entries of their allocations. In our
study, we treat the aggregate as the allocation. This processing re-
sults in two invariants; all allocations can be expressed as address
preﬁxes, and an allocation cannot be covered by a less speciﬁc pre-
ﬁx from the routing table.
For validating and understanding routing practice, as well as to