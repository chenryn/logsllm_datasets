`-----BEGIN CERTIFICATE-----/-----END CERTIFICATE-----`{.literal}
标头和页脚。
已使用 `DER`{.literal} 编码的证书是一个二进制 X509
数字证书文件。作为二进制文件，证书不可读。`DER`{.literal} 文件有时使用
`.der`{.literal} 文件名扩展名，但 `.crt`{.literal} 和 `.cer`{.literal}
文件名扩展名的文件有时也会包含 `DER`{.literal} 证书。`DER`{.literal}
包含键的文件可以命名为 `.key`{.literal}。
使用 `PEM`{.literal} Base64
编码的证书是一个人类可读的文件。该文件包含前缀为\"\-\-\-\--BEGIN
...\"行的 ASCII(Base64)ARM 数据。`PEM`{.literal} 文件有时使用
`.pem`{.literal} 文件名扩展名，但 `.crt`{.literal} 和 `.cer`{.literal}
文件名扩展名的文件有时也会包含 `PEM`{.literal} 证书。`PEM`{.literal}
包含键的文件可以命名为 `.key`{.literal}。
不同的 `ipa`{.literal} 命令对它们接受的证书类型有不同的限制。例如：
`ipa user-add-cert`{.literal} 命令只接受 `base64`{.literal}
格式编码的证书，但 `ipa-server-certinstall`{.literal} 接受
`PEM, DER, PKCS #7, PKCS #8`{.literal} 和 `PKCS #12`{.literal} 证书。
::: table
[]{#convert-cert-formats-idm_working-with-idm-certificates.html#tab.cert-encodings_convert-cert-formats-idm}
**表 3.1. 证书编码**
::: table-contents
  编码格式     人类可读   通用文件名扩展     接受编码格式的 IdM 命令示例
  ------------ ---------- ------------------ ------------------------------------------------
  PEM/base64   是         .pem, .crt, .cer   ipa user-add-cert, ipa-server-certinstall, ...​
  DER          否         .der, .crt, .cer   ipa-server-certinstall, ...​
:::
:::
["IdM
中的与证书相关的命令和格式"一节](#convert-cert-formats-idm_working-with-idm-certificates.html#other-cert-commands_convert-cert-formats-idm "IdM 中的与证书相关的命令和格式"){.xref}
使用命令接受的证书格式进一步列出 `ipa`{.literal} 命令。
### []{#convert-cert-formats-idm_working-with-idm-certificates.html#_user_authentication}用户身份验证
在使用 Web UI 访问 IdM
时，用户证明自己通过将两者都存储在浏览器的数据库中，证明自己拥有与证书对应的私钥。
当使用 CLI 访问 IdM
时，用户通过以下方法之一证明自己拥有与证书对应的私钥：
::: itemizedlist
-   作为 `kinit -X`{.literal} 命令的 `X509_user_identity`{.literal}
    参数的值，用户添加连接到包含证书和密钥的智能卡模块的路径：
    ``` literallayout
    $ kinit -X X509_user_identity='PKCS11:opensc-pkcs11.so' idm_user
    ```
-   用户添加两个文件作为 `kinit -X`{.literal} 命令的
    `X509_user_identity`{.literal}
    参数的值，一个包含证书，另一个包含私钥：
    ``` literallayout
    $ kinit -X X509_user_identity='FILE:`/path/to/cert.pem,/path/to/cert.key`' idm_user
    ```
:::
### []{#convert-cert-formats-idm_working-with-idm-certificates.html#_useful_certificate_commands}有用的证书命令
查看证书数据，如主题和签发者：
``` literallayout
$ openssl x509 -noout -text -in ca.pem
```
要比较两个证书的不同行：
``` literallayout
$ diff cert1.crt cert2.crt
```
要比较两个证书与两列中显示的输出不同的行：
``` literallayout
$ diff cert1.crt cert2.crt -y
```
:::
::: section
::: titlepage
# []{#convert-cert-formats-idm_working-with-idm-certificates.html#convert-cert-to-load-to-user-profile-idm_convert-cert-formats-idm}将外部证书转换为 IdM 用户帐户 {.title}
:::
本节论述了如何确保在将外部证书添加到用户条目之前正确对其进行编码和格式化。
::: itemizedlist
**先决条件**
-   如果您的证书由 Active Directory 证书颁发机构发布，并使用
    `PEM`{.literal} 编码，请确保已将 `PEM`{.literal} 文件转换为
    `UNIX`{.literal} 格式。要转换文件，请使用 eponymous 软件包提供的
    `dos2unix`{.literal} 工具。
:::
::: section
::: titlepage
## []{#convert-cert-formats-idm_working-with-idm-certificates.html#convert-cert-to-load-to-user-profile-idm-cli}在 IdM CLI 中转换外部证书并将其加载到 IdM 用户帐户中 {.title}
:::
`IdM CLI`{.literal} 只接受从其中的第一行和最后一行（\-\-\-\--BEGIN
CERTIFICATE\-\-\-\-- 和 \-\-\-\--END CERTIFICATE\-\-\-\--）中删除的
`PEM`{.literal} 证书。
::: orderedlist
**流程**
1.  将证书转换为 `PEM`{.literal} 格式：
    ::: itemizedlist
    -   如果您的证书为 `DER`{.literal} 格式：
        ``` literallayout
        $ openssl x509 -in cert.crt -inform der -outform pem -out cert.pem
        ```
    -   如果您的文件采用 `PKCS #12`{.literal} 格式，其通用文件名扩展名为
        `.pfx`{.literal} 和
        `.p12`{.literal}，并且包含证书、私钥和其他数据，请使用
        `openssl pkcs12`{.literal}
        实用程序提取证书。提示时，输入密码保护存储在文件中的私钥：
        ``` literallayout
        $ openssl pkcs12 -in cert_and_key.p12 -clcerts -nokeys -out cert.pem
        Enter Import Password:
        ```
    :::
2.  获取管理员凭证：
    ``` literallayout
    $ kinit admin
    ```
3.  使用以下方法之一在用户帐户中添加证书： `IdM CLI`{.literal}
    ::: itemizedlist
    -   在将字符串添加到 `PEM`{.literal} 命令前，删除 `sed`{.literal}
        工具的第一行和最后一行（\-\-\-\--BEGIN CERTIFICATE\-\-\-\-- 和
        \-\-\-\--END CERTIFICATE\-\-\-\--）：
        `ipa user-add-cert`{.literal}
        ``` literallayout
        $ ipa user-add-cert some_user --certificate="$(sed -e '/BEGIN CERTIFICATE/d;/END CERTIFICATE/d' cert.pem)"
        ```
    -   将证书文件的内容复制并粘贴到 `ipa user-add-cert`{.literal}
        命令中，但不包含第一行和最后一行（\-\-\-\--BEGIN
        CERTIFICATE\-\-\-\-- 和 \-\-\-\--END CERTIFICATE\-\-\-\--）：
        ``` literallayout
        $ ipa user-add-cert some_user --certificate=MIIDlzCCAn+gAwIBAgIBATANBgkqhki...
        ```
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        您无法直接传递包含证书的 `PEM`{.literal} 文件作为
        `ipa user-add-cert`{.literal}
        命令的输入，而无需先删除第一行和最后一行（\-\-\-\--BEGIN
        CERTIFICATE\-\-\-\-- 和 \-\-\-\--END CERTIFICATE\-\-\-\--）：
        ``` literallayout
        $ ipa user-add-cert some_user --cert=some_user_cert.pem
        ```
        此命令会导致 \"ipa: ERROR: Base64 解码 failed: Incorrect
        padding\"错误消息。
        :::
    :::
4.  （可选）检查系统是否接受证书：
    ``` literallayout
    [idm_user@r8server]$ ipa user-show some_user
    ```
:::
:::
::: section
::: titlepage
## []{#convert-cert-formats-idm_working-with-idm-certificates.html#convert-cert-to-load-to-user-profile-idm-webui}在 IdM Web UI 中转换外部证书以加载到 IdM 用户帐户： {.title}
:::
::: orderedlist
**流程**
1.  使用 `CLI`{.literal}，将证书转换为 `PEM`{.literal} 格式：
    ::: itemizedlist
    -   如果您的证书为 `DER`{.literal} 格式：
        ``` literallayout
        $ openssl x509 -in cert.crt -inform der -outform pem -out cert.pem
        ```
    -   如果您的文件采用 `PKCS #12`{.literal} 格式，其通用文件名扩展名为
        `.pfx`{.literal} 和
        `.p12`{.literal}，并且包含证书、私钥和其他数据，请使用
        `openssl pkcs12`{.literal}
        实用程序提取证书。提示时，输入密码保护存储在文件中的私钥：
        ``` literallayout
        $ openssl pkcs12 -in cert_and_key.p12 -clcerts -nokeys -out cert.pem
        Enter Import Password:
        ```
    :::
2.  在编辑器中打开证书并复制内容。您可以包含 \"\-\-\-\--BEGIN
    CERTIFICATE\-\-\-\--\" 和 \"\-\-\-\--END CERTIFICATE\-\-\-\--\"
    标题和页脚图，但您不必这样做，因为 IdM Web UI 接受 `PEM`{.literal}
    和 `base64`{.literal} 格式。
3.  在 IdM Web UI 中，以安全官身份登录。
4.  前往 `Identity`{.literal} → `Users`{.literal} →
    `some_user`{.literal}。
5.  点击 `Certificates`{.literal} 旁边的 `Add`{.literal}。
6.  将证书的 PEM 格式内容粘贴到打开的窗口中。
7.  点 `Add`{.literal}。
:::
如果系统接受证书，您可以看到它列在用户配置集的 `Certificates`{.literal}
中。
:::
:::
::: section
::: titlepage
# []{#convert-cert-formats-idm_working-with-idm-certificates.html#prepare-load-cert-into-browser-idm_convert-cert-formats-idm}准备将证书加载到浏览器 {.title}
:::
在将用户证书导入到浏览器前，请确保证书和对应的私钥采用
`PKCS #12`{.literal} 格式。有两种需要额外检查的常见情况：
::: itemizedlist
-   证书位于 NSS 数据库中。有关如何在这种情况下进行的详情请参考
    ["将证书和私钥从 NSS 数据库导出到 PKCS #12
    文件中"一节](#convert-cert-formats-idm_working-with-idm-certificates.html#export-cert-from-nss-to-pkcs12_convert-cert-formats-idm "将证书和私钥从 NSS 数据库导出到 PKCS #12 文件中"){.xref}。
-   证书和私钥位于两个独立的 `PEM`{.literal}
    文件中。有关如何在这种情况下进行的详情请参考 ["将证书和私钥 PEM
    文件合并到 PKCS #12
    文件中"一节](#convert-cert-formats-idm_working-with-idm-certificates.html#combine-cert-private-key-to-pkcs12_convert-cert-formats-idm "将证书和私钥 PEM 文件合并到 PKCS #12 文件中"){.xref}。
:::
之后，要将 `PEM`{.literal} 格式的 CA 证书和 `PKCS #12`{.literal}
[格式的用户证书导入到浏览器中，请按照配置浏览器以启用证书身份验证和验证
身份管理 Web UI
的步骤，并使用证书作为身份管理用户](#dc-web-ui-auth_working-with-idm-certificates.html#configuring-browser-for-cert-auth_dc-web-ui-auth "配置浏览器以启用证书身份验证"){.link}。
::: section
::: titlepage
## []{#convert-cert-formats-idm_working-with-idm-certificates.html#export-cert-from-nss-to-pkcs12_convert-cert-formats-idm}将证书和私钥从 NSS 数据库导出到 PKCS #12 文件中 {.title}
:::
::: orderedlist
**流程**
1.  使用 `pk12util`{.literal} 命令将证书从 NSS 数据库导出到
    `PKCS12`{.literal} 格式。例如：将 `some_user`{.literal} nickname
    的证书从存储在 `~/certdb`{.literal} 目录中的 NSS 数据库导出到
    `~/some_user.p12`{.literal} 文件中：
    ``` literallayout
    $ pk12util -d ~/certdb -o ~/some_user.p12 -n some_user
    Enter Password or Pin for "NSS Certificate DB":
    Enter password for PKCS12 file:
    Re-enter password:
    pk12util: PKCS12 EXPORT SUCCESSFUL
    ```
2.  为 `.p12`{.literal} 文件设置适当的权限：
    ``` literallayout
    # chmod 600 ~/some_user.p12
    ```
    因为 `PKCS #12`{.literal}
    文件还包含私钥，所以必须对其进行保护才能防止其他用户使用该文件。否则，他们可以模拟用户。
:::
:::
::: section
::: titlepage
## []{#convert-cert-formats-idm_working-with-idm-certificates.html#combine-cert-private-key-to-pkcs12_convert-cert-formats-idm}将证书和私钥 PEM 文件合并到 PKCS #12 文件中 {.title}
:::
这部分论述了如何将证书和存储在单独的 `PEM`{.literal}
文件中的对应密钥合并到 `PKCS #12`{.literal} 文件中。
::: itemizedlist
**流程**
-   将存储在 `certfile.cer`{.literal} 中的证书和存储在
    `certfile.key`{.literal} 中的密钥合并到包含证书和密钥的
    `certfile.p12`{.literal} 文件中：
    ``` literallayout
    $ openssl pkcs12 -export -in certfile.cer -inkey certfile.key -out certfile.p12
    ```
:::
:::
:::