title:A Security Architecture for Object-Based Distributed Systems
author:Bogdan C. Popescu and
Maarten van Steen and
Andrew S. Tanenbaum
A Security Architecture for Object-Based Distributed Systems
Bogdan C. Popescu
Vrije Universiteit
Maarten van Steen
Vrije Universiteit
Andrew S. Tanenbaum
Vrije Universiteit
Amsterdam, The Netherlands
Amsterdam, The Netherlands
Amsterdam, The Netherlands
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
Large-scale distributed systems present numerous secu-
rity problems not present in local systems.
In this paper
we present a general security architecture for a large-scale
object-based distributed system. Its main features include
ways for servers to authenticate clients, clients to authenti-
cate servers, new secure servers to be instantiated without
manual intervention, and ways to restrict which client can
perform which operation on which object. All of these fea-
tures are done in a platform- and application-independent
way, so the results are quite general. The basic idea behind
the scheme is to have each object owner issue cryptograph-
ically sealed certiﬁcates to users to prove which operations
they may request and to servers to prove which operations
they are authorized to execute. These certiﬁcates are used
to ensure secure binding and secure method invocation. The
paper discusses the required certiﬁcates and security proto-
cols for using them.
1 Introduction
Security in large-scale distributed systems differs from
operating system security by the fact that there is no central,
trusted authority that mediates interaction between users
and processes. Instead, a distributed system usually runs on
top of a large number of loosely coupled autonomous hosts.
Those hosts may run different operating systems, and may
have different security policies, which can be enforced in
different ways by careless, or even malicious administra-
tors.
A popular trend in distributed systems is to encapsulate
functionality as objects and provide mechanisms for their
location, migration and, persistence, as well as for remote
method invocation. CORBA [2] [3], DCOM [9], and Le-
gion [13] are examples of distributed systems using this
paradigm. Each of them handles security in its own way,
and the main objectives are authenticating the communicat-
ing parties, protecting network trafﬁc, enforcing access con-
trol policies on the object’s member functions, delegating
rights and respecting site-speciﬁc security concerns. There
is one feature these systems have in common: all of them
support only non-replicated objects. This makes it easier to
implement a security infrastructure, since security policies
for individual objects have to be enforced at only one point:
the host where the object resides.
Globe [26], is a wide-area distributed system based on
distributed shared objects (DSO). The notion of a DSO
stresses the property that objects in Globe are not only
shared by multiple users, but also physically replicated
at possibly thousands of hosts over a wide-area network.
Thus, a single object may be active and accessible on many
hosts at the same time. Obviously this leads to a consistency
problem, but that has been addressed elsewhere [6].
This paper describes the Globe security architecture. Our
main contribution is a design that (1) makes a clear separa-
tion between the security issues to be dealt with at the mid-
dleware level as opposed to the application-speciﬁc ones,
(2) provides concrete solutions to some unique security
challenges, which derive from the fact that Globe objects
can be (massively) replicated with some of the replicas run-
ning on untrusted, possibly malicious hosts, and (3) is truly
decentralized - it does not require any global authority or
trusted third party that would severely limit the scalability
of the system.
The rest of the paper is organized as follows: Section 2
gives an overview of Globe, the internal structure of a DSO,
and the services provided by the Globe middleware that fa-
cilitate the creation and deployment of DSOs. In Section 3
we identify the security problems we are trying to solve and
in Section 4 we present our trust model. The problems iden-
tiﬁed in Section 3, which can be grouped as secure binding
problems, platform security problems, and secure method
invocation problems, are then discussed in Sections 5, 6
and 7 respectively. Finally, in Section 8 we discuss related
work and in Section 9 conclude.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
2 The Globe System
A central concept in the Globe architecture is the dis-
tributed shared object (DSO). As seen in Figure 1, a DSO is
built from a number of local objects that reside in a single
address space and communicate with local objects in other
address spaces. Each Globe DSO is identiﬁed by a unique
object ID (OID).
A1
A2
DSO Replica
Replication
subobject
Communication
subobject
Control
subobject
Semantics
subobject
Security 
Subobject
Security
Policy
Address space
Network
Distributed object
Local
Object
A3
A4
A5
Figure 1. A Globe DSO replicated across four
address spaces
Some of the local objects (possibly all of them, depend-
ing on the replication strategy) can store all or part of the
DSO’s state. A local object that stores some part of the
DSO’s state is called a replica. When a user wants to in-
voke methods on a DSO, it will have to create a local ob-
ject for that DSO in his own address space. Often, such a
local object acts as a user proxy, and does not store the ob-
ject’s state, but simply forwards the user requests to replicas
that can execute them (but except for possibly increased re-
sponse latency, this is transparent to the user). For this to
happen, the user proxy needs to be initialized with an ob-
ject handle, which consists of the OID of that DSO plus
the information needed to ﬁnd other replicas of that object
(e.g.
the network address of a replica running a directory
service). To facilitate ﬁnding DSO replicas, we have imple-
mented the Globe Location Service (LS) [25]. DSOs can
(optionally) register with this service, in which case they
do not have to keep track of their replicas, but only register
them with the LS.
All the replicas part of a DSO work together to imple-
ment the functionality of that DSO. Replicas consist of the
code for the application, the state they store, and the dis-
tribution mechanism. The internal structure of a replica is
shown in Figure 2 (a user proxy has a similar structure), and
is as follows:
Communication Infrastructure
Figure 2. The internal structure of a Globe
DSO. The arrows indicate the possible inter-
actions between the subobjects
The semantics subobject contains the code that imple-
ments the functionality of the DSO. This is the only subob-
ject that needs to be written by the application developer.
The communication subobject is responsible for the
communication between local objects residing in different
address spaces. It hides the network communication aspects
from all the other subobjects.
The replication subobject is responsible for keeping the
replica’s state consistent with the other replicas. All replicas
part of a DSO participate in an object-speciﬁc replication
protocol: each replication subobject implements its part of
the protocol by mediating the exchange of state-update mes-
sages with other replicas. In the case of a user proxy, the
replication subobject is responsible for providing the user
with the view of a logical, non-replicated object. This view
is accomplished by transforming local method invocations
into requests that are sent to replicas for further processing.
The control subobject’s job is to take care of invocations
from client processes on the host where the local object re-
sides and to mediate the interaction between the semantics
subobject and the replication subobject. It is comparable to
a skeleton stub in object adaptors [24]
The security subobject [17] is responsible for enforcing
the DSO’s security policy at the level of local objects by
mediating the communication ﬂow between the other local
subobjects.
Replicas in Globe are generally hosted on Globe Object
Servers (GOS). A Globe user wishing to run a replica or
a proxy, needs a GOS on his computer, either stand-alone,
or integrated in some other application, a Globe-aware Web
browser [27] for example. One can think about the GOS as
something similar to the ORB (Object Request Broker) in
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
CORBA. The GOS is responsible for managing the lifecy-
cle of local objects - downloading the class code needed to
create them (in most of the cases the DSOs will be responsi-
ble with providing this code), instantiating their subobjects,
and mediating the use of computing resources (e.g. mem-
ory, CPU, disk, network interface). A detailed description
of resource management by a GOS is outside the scope of
this paper, it is enough to say that our Java prototype GOS
implementation deals with all these issues using traditional
operating systems techniques. In this paper we will cover
only the security-related issues in the GOS design.
3 Security Issues in Globe
When designing the Globe security architecture, we
chose to follow a modular approach, similar to the one de-
scribed in [15]: the ﬁrst step is to analyze the Globe security
requirements and identify all the possible mechanisms that
can be used to satisfy these requirements. The second step
is to select a subset of these functions to be actually imple-
mented as part of the middleware (not all, since some of
the functions can be better handled at the application level).
Finally, in the third step, selected measures are to be im-
plemented and evaluated. The ﬁrst stage has been already
completed, and the resulting document [17] can be seen as a
speciﬁcation of all security functions that could be incorpo-
rated in Globe applications. This paper deals with the sec-
ond stage, and we are using it as a speciﬁcation document
for our prototype implementation.
As seen in the scientiﬁc literature, security issues in dis-
tributed systems are not trivial to identify and structure. In
our case, the situation is even more complex due to the fact
that Globe objects can be replicated across multiple ma-
chines, which introduces a series of new problems. For ex-
ample there is the threat of malicious insiders (replicas run-
ning on malicious Globe object servers) which introduces
the need to restrict the functionality of replicas depending
on the trustworthiness of the system they are running on.
Looking at the wide range of security problems identiﬁed
in [17], we decided to group the security issues relevant to
our design into three categories: secure binding, platform
security and secure method invocation.
Secure binding effectively establishes that a client, given
an OID, installs a local object that is indeed part of the DSO
identiﬁed by that OID. In addition, it ensures that a replica
can be veriﬁed to be part of a DSO of which the OID is
known. Finally, secure binding allows us to securely asso-
ciate an OID with real-world entities such as an individual,
organization, or company.
Platform security issues derive from the fact that Globe
relies heavily on mobile code. The security design should
address the problem of protecting hosts from Trojan horses
and viruses embedded in the object code that is downloaded
on the ﬂy to start replicas and user proxies. However, plat-
form security does not deal only with threats posed by mo-
bile object code on the host. The reverse problem is also an
issue: we need to protect a DSO against possibly malicious
hosts. In Globe, a DSO will optimize its performance by
placing replicas close to its clients. This placement requires
the cooperation of servers over which the (owner of a) DSO
has no control, and which may act maliciously. What we
need is a mechanism to assure host administrators that run-
ning other people’s DSOs replicas will not corrupt their sys-
tem, and also assure DSO owners that replicas of their ob-
jects running on hosts outside their control are still follow-
ing the security policy they have set for their DSO.
Finally, there are a number of issues related to secure
method invocation. Any distributed system where security
plays even a minor role has to deal with issues like authen-
ticating clients and servers, enforcing an access control pol-
icy on user requests, and protecting network trafﬁc. How-
ever, with replication involved, as in Globe, we are faced
with a new problem. What we also need is reverse access
control, that is, a means for deciding which replicas should
be allowed to execute certain user requests. We need to
ensure clients that their requests are sent only to replicas
trustworthy enough to execute them.
In the following section we will describe the architec-
tural elements used in Globe security. After having de-
scribed the basic building blocks, we will see how these
blocks are combined in an infrastructure that addresses the
issues just outlined.
4 The Globe Trust Model
The cornerstone of the Globe trust model is that individ-
ual DSOs are fully in charge with their security policies.
This means a Globe object does not need any external trust
broker in order to run securely (but there are mechanisms
that allow DSOs to interoperate with external trust authori-
ties, if they choose to do this, we will describe these mech-
anisms later in this section.)
4.1 The DSO Trust Hierarchy
Because DSOs can be massively replicated across wide-
area networks, we have chosen public key cryptography as
the basic cryptographic building block for implementing the
DSO trust hierarchy. The alternative, namely to use only
shared secret keys, has the disadvantage that we need to
take special measures to reduce the number of keys, for ex-
ample, by using a Key Distribution Center. Although pub-
lic keys introduce their own scalability problems, such as
those related to certiﬁcate revocation, we have nevertheless
decided to associate public/private key pairs with all distinct
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Globe entities (DSOs, replicas, users), believing that these
are more easy to deploy in a large-scale system.
We require that each DSO has a public/private key pair,
which we term as the object key. The object key acts as
the ultimate source of trust for the object, and any principal
that has knowledge of the object’s private key can set the
security policy for that object (we term such a principal the
object owner).
We also associate a public/private key pair with every
DSO replica (we call this the replica key). The replica key
is generated by the GOS hosting the replica at the moment
when the replica is instantiated. If multiple replicas of dif-
ferent DSOs run on the same GOS, they cannot tamper with
each other’s keys, thus replicas of different DSOs do not
have to trust each other, even when they run on the same
server (however, they would have to trust the server to some
extent; we will talk more about this when discussing plat-
form security). Having the GOS protecting the replicas it
runs from each other is an architectural requirement. The
way this is enforced in practice it is dependent on the way
the GOS is implemented.
For DSO users, public-key cryptography is used for au-