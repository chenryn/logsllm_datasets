title:Fast and Precise Sanitizer Analysis with BEK
author:Pieter Hooimeijer and
Benjamin Livshits and
David Molnar and
Prateek Saxena and
Margus Veanes
Fast and Precise Sanitizer Analysis with BEK
Pieter Hooimeijer
University of Virginia
Benjamin Livshits
Microsoft Research
David Molnar
Microsoft Research
Prateek Saxena
UC Berkeley
Margus Veanes ∗
Microsoft Research
Abstract
Web applications often use special string-manipulating
sanitizers on untrusted user data, but it is difﬁcult to rea-
son manually about the behavior of these functions, lead-
ing to errors. For example, the Internet Explorer cross-
site scripting ﬁlter turned out to transform some web
pages without JavaScript into web pages with valid Java-
Script, enabling attacks. In other cases, sanitizers may
fail to commute, rendering one order of application safe
and the other dangerous.
BEK is a language and system for writing sanitiz-
ers that enables precise analysis of sanitizer behavior,
including checking idempotence, commutativity, and
equivalence. For example, BEK can determine if a tar-
get string, such as an entry on the XSS Cheat Sheet, is
a valid output of a sanitizer. If so, our analysis synthe-
sizes an input string that yields that target. Our language
is expressive enough to capture real web sanitizers used
in ASP.NET, the Internet Explorer XSS Filter, and the
Google AutoEscape framework, which we demonstrate
by porting these sanitizers to BEK.
Our analyses use a novel symbolic ﬁnite automata
representation to leverage fast satisﬁability modulo the-
ories (SMT) solvers and are quick in practice,
tak-
ing fewer than two seconds to check the commutativ-
ity of the entire set of Internet Exporer XSS ﬁlters,
between 36 and 39 seconds to check implementations
of HTMLEncode against target strings from the XSS
Cheat Sheet, and less than ten seconds to check equiv-
alence between all pairs of a set of implementations of
HTMLEncode. Programs written in BEK can be compiled
to traditional languages such as JavaScript and C#, mak-
ing it possible for web developers to write sanitizers sup-
ported by deep analysis, yet deploy the analyzed code
directly to real applications.
1 Introduction
Cross site scripting (“XSS”) attacks are a plague in to-
day’s web applications. These attacks happen because
the applications take data from untrusted users, and then
echo this data to other users of the application. Because
web pages mix markup and JavaScript, this data may
be interpreted as code by a browser, leading to arbitrary
code execution with the privileges of the victim. The ﬁrst
∗Authors are listed alphabetically. Work done while P. Hooimeijer
and P. Saxena were visiting Microsoft Research.
line of defense against XSS is the practice of sanitiza-
tion, where untrusted data is passed through a sanitizer,
a function that escapes or removes potentially danger-
ous strings. Multiple widely used Web frameworks offer
sanitizer functions in libraries, and developers often add
additional custom sanitizers due to performance
or functionality constraints.
Unfortunately,
implementing sanitizers correctly is
surprisingly difﬁcult. Anecdotally, in dozens of code re-
views performed across various industries, just about any
custom-written sanitizer was ﬂawed with respect to secu-
rity [38]. The recent SANER work, for example, showed
ﬂaws in custom-written sanitizers used by ten web ap-
plications [9]. For another example, several groups of
researchers have found specially crafted pages that do
not initially have cross site scripting attacks, but when
passed through anti-cross-site scripting ﬁlters yield web
pages that cause JavaScript execution [10, 22].
The problem becomes even more complicated when
considering that a web application may compose multi-
ple sanitizers in the course of creating a web page. In
a recent empirical analysis, we found that a large web
application often applied the same sanitizers twice, de-
spite these sanitizers not being idempotent. This analysis
also found that the order of applying different sanitizers
could vary, which is safe only if the sanitizers are com-
mutative [32], providing further evidence suggesting that
developers have a difﬁcult time writing correct sanitiza-
tion functions without assistance.
Despite this, much work in the space of detecting and
preventing XSS attacks [19, 23, 25, 27, 39] has optimisti-
cally assumed that sanitizers are in fact both known and
correct. Some recent work has started exploring the is-
sue of speciﬁcation completeness [24] as well as san-
itizer correctness by explicitly statically modeling sets
of values that strings can take at runtime [13, 26, 36, 37].
These approaches use analysis-speciﬁc models of strings
that are based on ﬁnite automata or context-free gram-
mars. More recently, there has been signiﬁcant interest
in constraint solving tools that model strings [11, 17, 18,
20, 31, 34, 35]. String constraint solvers allow any client
analysis to express constraints (e.g., path predicates for a
single code path) that include common
string manipulation functions.
Sanitizers are typically a small amount of code, per-
haps tens of lines. Furthermore, application developers
know when they are writing a new, custom sanitizer or set
of sanitizers. Our key proposition is that if we are will-
ing to spend a little more time on this sanitizer code, we
can obtain fast and precise analyses of sanitizer behavior,
along with actual sanitizer code ready to be integrated
into both server- and client-side applications. Our ap-
proach is BEK, a language for modeling string transfor-
mations. The language is designed to be (a) sufﬁciently
expressive to model real-world code, and (b) sufﬁciently
restricted to allow fast, precise analysis, without needing
to approximate the behavior of the code.
Key to our analysis is a compilation from BEK pro-
grams to symbolic ﬁnite state transducers, an extension
of standard ﬁnite transducers. Recall that a ﬁnite trans-
ducer is a generalization of deterministic ﬁnite automata
that allows transitions from one state to another to be an-
notated with outputs: if the input character matches the
transition, the automaton outputs a speciﬁed sequence of
characters.
In a symbolic ﬁnite transducer, transitions
are annotated with logical formulas instead of speciﬁc
characters, and the transducer takes the transition on any
input character that satisﬁes the formula. We apply algo-
rithms that determine if two BEK programs are equiva-
lent. We also can check if a BEK program can output a
speciﬁc string, and if so, synthesize an input
yielding that string.
Our symbolic ﬁnite state transducer representation
enables leveraging satisﬁability modulo theories (SMT)
solvers, tools that take a formula and attempt to ﬁnd in-
puts satisfying the formula. These solvers have become
robust in the last several years and are used to solve com-
plicated formulas in a variety of contexts. At the same
time, our representation allows leveraging automata the-
oretic methods to reason about strings of unbounded
length, which is not possible via direct encoding to SMT
formulas. SMT solvers allow working with formulas
from any theory supported by the solver, while other
previous approaches using binary decision diagrams are
specialized to speciﬁc types of inputs.
After analysis, programs written in BEK can be com-
piled back to traditional languages such as JavaScript or
C# . This ensures that the code analyzed and tested is
functionally equivalent to the code which is actually de-
ployed for sanitization, up to bugs in our compilation.
This paper contains a number of experimental case
studies. We conclusively demonstrate that BEK is ex-
pressive enough for a wide variety of real-life code by
converting multiple real world Web sanitization func-
tions from widely used frameworks, including those used
in Internet Explorer 8’s cross-site scripting ﬁlter, to BEK
programs. We report on which features of the BEK lan-
guage are needed and which features could be added
given our experience. We also examine other code,
such as sanitizers from Google AutoEscape and func-
tions from WebKit, to determine whether or not they can
be expressed as BEK programs. We maintain samples of
BEK programs online1.
1http://code.google.com/p/bek/
We then use BEK to perform security speciﬁc analy-
ses of these sanitizers. For example, we use BEK to de-
termine whether there exists an input to a sanitizer that
yields any member of a publicly available database of
strings known to result in cross site scripting attacks. Our
analysis is fast in practice; for example, we take two sec-
onds to check the commutativity of the entire set of In-
ternet Explorer 8 XSS ﬁlters, and less than 39 seconds to
check an implementations the HTMLEncode sanitization
function against target strings from the
XSS Cheat Sheet [5].
To experimentally demonstrate the difﬁculty of writ-
ing correct sanitizers, we hired several freelance devel-
opers to implement HTMLEncode functionality. Using
BEK, we checked the equivalence of the seven differ-
ent implementations of HTMLEncode and used BEK to
ﬁnd counterexamples: inputs on which these sanitizers
behave differently. Finally, we performed scalability ex-
periments to show that in practice the time to perform
BEK analyses scales near-linearly.
1.1 Contributions
The primary contributions of this paper are:
• Language. We propose a domain-speciﬁc lan-
guage, BEK, for string manipulation. We describe a
syntax-driven translation from BEK expressions to
symbolic ﬁnite state transducers.
• Algorithms. We provide algorithms for performing
composition computation and equivalence check-
ing, which enables checking commutativity, idem-
potence, and determining if target strings can be
output by a sanitizer. We show how JavaScript and
C# code can be generated out of BEK programs,
streamlining the client- and server-side deployment
of BEK sanitizers.
• Evaluation. We show that BEK can encode real-
world string manipulating code used to sanitize un-
trusted inputs in web applications. We demonstrate
the expressiveness of BEK by encoding OWASP
sanitizers, many IE 8 XSS ﬁlters, as well as func-
tions written by freelance developers hired through
odesk.com and vworker.com for our experiments
presented in this paper. We show how the analy-
ses supported by our tool can ﬁnd security-critical
bugs or check that such bugs do not exist. To
improve the end-user experience when a bug is
found, BEK produces a counter-example. We dis-
cover that only 28.6% of our sanitizers commute,
∼79.1% are idempotent, and that only 8% are re-
versible. We also demonstrate that most hand-
written HTMLEncode implementations disagree on
at least some inputs.
• A Scalable Implementation. BEK deals with Uni-
code strings without creating a state explosion. Fur-
thermore, we show that our algorithms for equiv-
alence checking and composition computation are
private static string EncodeHtml(string t)
{
if (t == null) { return null; }
if (t.Length == 0) { return string.Empty; }
StringBuilder builder =
new StringBuilder("", t.Length * 2);
foreach (char c in t)
{
if ((((c > ’‘’) && (c  ’@’) && (c  ’/’) && (c  startIndex)
{
builder.Append(s, startIndex, num-startIndex);
}
char ch = s[num];
if (ch > ’>’)
{
builder.Append("&#");
builder.Append(((int) ch).
ToString(NumberFormatInfo.InvariantInfo));
builder.Append(’;’);
}
else
{
char ch2 = ch;
if (ch2 != ’"’)
{
switch (ch2)
{
case ’’:
builder.Append("&gt;");
goto Label_00D5;
case ’&’:
builder.Append("&amp;");
goto Label_00D5;
}
}
else
{
builder.Append("&quot;");
}
}
Label_00D5:
startIndex = num + 1;
if (startIndex < length)
{
num = IndexOfHtmlEncodingChars(s, startIndex);
if (num != -1)
{
goto Label_002A;
}
builder.Append(s, startIndex, length-startIndex);
}
return builder.ToString();
}
Figure 3: Code for EncodeHtml from version 2.0 of
System.Net. This code is not equivalent to the AntiXSS
library version.
Commutativity: Consider two default sanitizers in
the Google CTemplate framework: JavaScriptEscape
and HTMLEscape [4].
The former performs Uni-
code encoding (\u00XX) for safely embedding untrusted
data in JavaScript strings while the latter sanitizer per-
forms HTML entity-encoding (&lt;) for embedded un-