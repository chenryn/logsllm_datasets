checked和unchecked。对于符号，使用字体Segoe MDL2 Assets定义一个向量图形符号元素
（代码文件ControlsSample/Views/ InkSample. xaml）：
图32-24显示了一个命令栏，其中包含之前创建的两个AppBarButton控件以及
AppBarToggleButton控件，这次使用紧凑模式。
图32-24
CommandBar还允许用于二级命令。如果需要更多的命令，但这些命令在一行中放不
下，尤其是移动设备，就可以使用二级命令。二级命令可以定义为赋予CommandBar元素
的属性SecondaryCommands。
在Windows 10中，单击省略号按钮，可以打开二级命令，如图32-25所示。
图32-25
32.5 已编译的数据绑定
已编译的数据绑定比较快，它使用第31章介绍的x: 
Bind替代了Binding标记扩展，在
本章前面已经提到它。现在深入讨论已编译绑定的特点。
可以使用已编译的数据绑定作为Binding标记扩展的更快替换。需要旧绑定语法只有
几个原因，例如，在属性变化（而不是焦点变化）时触发绑定。在未来版本中已编译的绑
定更加强大时，这肯定会改变。目前，根本不使用编译的绑定没有足够的理由，因为可以
混合编译的绑定和Binding标记表达式。
第31章介绍了已编译绑定的新语法，用x:Bind替代Binding，在编译代码时，甚至会得
到一个编译错误。
已编译的绑定专注于性能，默认模式是OneTime。如果在代码的变更中需要更新用户
界面，就需要显式地把模式设置为OneWay。为了在UI中更新源代码，需要设置TwoWay
模式。已编译的绑定使用与Binding表达式相同的模式，但默认值是不同的。
因为已编译的绑定已经在第31章讨论了，本章只涉及已编译绑定的一些特殊功能，比
如在资源中使用它，控制绑定的生命周期。
32.5.1 已编译绑定的生命周期
使用已编译的绑定，代码会从绑定中生成。也可以通过编程方式影响绑定的生命周
期。
下面从一个简单的Book类型开始，它在用户界面中绑定（代码文件
CompiledBindingSample /Models/Book.cs）：
    public class Book : BindableBase
    {
      public int BookId { get; set; }
      private string _title;
      public string Title
      {
        get { return _title; }
        set { SetProperty(ref _title, value); }
      }
      public string Publisher { get; set; }
      public override string ToString() => Title;
    }
使用页面类，创建一个只读属性Book，返回一个Book实例。Book实例的值可以改
变，而Book实例本身是只读的（代码文件CompiledBindingSample 
/ 
Views/
LifetimeSample.xaml.cs）：
    public Book Book { get; } = new Book
                                {
                                Title = "Professional C# 6",
                                Publisher = "Wrox Press"
                                };
在XAML代码中，Title属性是TextBlock的Text属性，且采用OneWay模式。绑定了
Publisher，但没有指定模式，这意味着它绑定OneTime（代码文件
CompiledBindingSample/Views/Lifetime-Sample.xaml）：
接下来，绑定几个AppBarButton控件，改变已编译绑定的生命周期。一个按钮的
Click事件绑定到OnChangeBook方法上。该方法改变书的标题。如果尝试一下，标题会立
即更新，因为执行了OneTime绑定（代码文件CompiledBindingSample 
/ 
Views 
/
LifetimeSample.xaml.cs）：
    public void OnChangeBook()
    {
      Book.Title = "Professional C# 6 and .NET Core 5";
    }
然而，可以停止绑定的跟踪。使用页面的Bindings属性调用方法StopTracking（如果
使用的是已编译的绑定，就创建该属性），删除所有绑定侦听器。调用方法
OnChangeBook之前调用这个方法，书的更新就不会反映在用户界面中：
    private void OnStopTracking()
    {
      Bindings.StopTracking();
    }
为了在绑定源中明确地更新用户界面，可以调用Update方法。调用这个方法不仅反映
了OneWay或TwoWay绑定中的变化，还反映了OneTime绑定：
    private void OnUpdateBinding()
    {
      Bindings.Update();
    }
为了把侦听器放在适当的位置上，立即更新用户界面，需要调用Initialize方法。
Initialize、Update和StopTracking是控制已编译绑定的生命周期的3个重要方法。
32.5.2 给已编译的数据模板使用资源
使用编译的绑定定义数据模板很容易，只需要用数据模板指定x: DataType特性，因为
这是生成强类型代码所必须的。不过，把数据模板放在资源文件中有一个问题。在页面中
使用数据模板很容易，因为页面已经创建了后台代码，这是数据模板包含编译的绑定所必
须的。下面看看需要做什么才能将这样的数据模板放在资源文件中。
在示例代码中，生成了DataTemplates.xaml资源文件。所需的资源是一个封闭的类
（代码文件CompiledBindingSample / Styles / DataTemplates.xaml.cs）：
    namespace CompiledBindingSample.Styles
    {
      public sealed partial class DataTemplates
      {
        public DataTemplates()
        {
        this.InitializeComponent();
        }
      }
    }
XAML文件和往常一样，仍包含数据模板。只是注意x: 
Class特性把
ResourceDictionary映射到后台代码文件中的类。数据模板还包含.NET Models名称空间的
XML别名，把Book类型和已编译的绑定映射到Title和Publisher属性上（代码文件
CompiledBindingSample/Styles/DataTemplates.xaml）：
从App. xaml文件中引用资源文件时，该文件不能像往常一样通过ResourceDictionary
元素来引用。而需要创建一个实例（代码文件CompiledBindingSample / App. xaml）：
有了这一切，数据模板就可以像往常一样引用了，例如，使用ListBox的ItemTemplate
（代码文件CompiledBindingSample / Views/ BooksListPage.xaml）：
32.6 控件
本书不可能讨论UWP提供的所有控件。然而，它们使用起来很简单，知道如何使用
其中的一些控件，其他控件就不难使用了。许多控件都与WPF控件有相似之处，所以可
以在第34章中读到控件的更多信息。
32.6.1 TextBox控件
对于UWP控件，值得一提的是可用于TextBox控件的Header属性。本章之前已经介绍
了如何用RelativePanel安排编辑表单。在这个示例中，使用一个与TextBlock控件相关的
TextBox控件。通常应该在TextBox中输入的信息由此文本输入控件附近的标签来描述。在
这个示例中，TextBlock控件与RelativePanel一起实现这个目的。还有另一种方式给
TextBox添加信息。使用TextBox控件的Header属性时，不需要定义单独的TextBlock控
件。填充Header属性就可以了。Header属性的值显示在TextBox的旁边（参见图32-26）。
图32-26
当设置InputScope属性时，可以指定应该显示屏幕键盘。图32-27显示了Windows屏幕
键盘，其中InputScope被设置为Formula，如下面的代码片段所示。在这个键盘上可以看到
一些公式专用的键（代码文件ControlsSamples / Views / TextSample.xaml）：
图32-27
32.6.2 AutoSuggest
UWP的一个新控件是AutoSuggest控件。这个控件允许用户在控件中输入时给用户提
供建议。这个控件有三个重要的事件。一旦用户在控件中输入，就触发TextChanged事
件。在示例代码中，调用OnTextChanged处理程序方法。如果给用户提供建议，而用户选
择一个建议，就触发SuggestionChosen事件。用户输入文本后——可能是一个建议或输入
的其他单词，就触发QuerySubmitted事件（代码文件ControlsSample 
/ 
Views 
/
AutoSuggestSample.xaml）：
为了让示例代码创建建议，使用HttpClient类从
http://www.cninnovation.com/downloads/Racers. xml中加载一个XML文件，其中包含一级方
程式冠军。导航到页面上，检索XML文件，把内容转化为一组Racer对象（代码文件
ControlsSamples / Views/ AutoSuggestSample.xaml.cs）：
    private const string RacersUri =
      "http://www.cninnovation.com/downloads/Racers.xml";
    private IEnumerable _racers;
    protected async override void OnNavigatedTo(NavigationEventArgs e)
    {
      base.OnNavigatedTo(e);
      XElement xmlRacers = null;
      using (var client = new HttpClient())
      using (Stream stream = await client.GetStreamAsync(RacersUri))
      {
        xmlRacers = XElement.Load(stream);
      }
      _racers = xmlRacers.Elements("Racer").Select(r => new Racer
      {
        FirstName = r.Element("Firstname").Value,
        LastName = r.Element("Lastname").Value,
        Country = r.Element("Country").Value
      }).ToList();
    }
Racer类包含FirstName、LastName和Country属性，以及ToString的一个重载方法（代
码文件ControlsSamples / Models/Racer.cs）：
    public class Racer
    {
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public string Country { get; set; }
      public override string ToString() => $"{FirstName} {LastName}, {Country}";
    }
只要AutoSuggestBox的文本发生变化，就调用OnTextChanged事件。接收的参数是
AutoSuggest-Box自身（发送方）和AutoSuggestBoxTextChangedEventArgs。使用
AutoSuggestBoxTextChangedEvent-Args，在Reason属性中显示变化的原因。可能的原因是
UserInput、ProgrammaticChange和Suggestion-Chosen。只有原因是UserInput，才需要向用
户提供建议。在这里，检查用户输入是否至少有两个字符。访问AutoSuggestBox的Text属
性，来检索用户输入。这个文本基于输入字符串来查询名字、姓氏和国家。查询的结果分
配给AutoSuggestBox的ItemsSource属性（代码文件ControlsSamples/Views/
AutoSuggestSample.xaml.cs）：
      private void OnTextChanged(AutoSuggestBox sender,
        AutoSuggestBoxTextChangedEventArgs args)
      {
        if (args.Reason == AutoSuggestionBoxTextChangeReason.UserInput
 &&
          sender.Text.Length >= 2)
        {
          string input = sender.Text;
          var q = _racers.Where(
          r => r.FirstName.StartsWith(input,
            StringComparison.CurrentCultureIgnoreCase))
          .OrderBy(r => r.FirstName).ThenBy(r => r.LastName)
          .ThenBy(r => r.Country).ToArray();
          if (q.Length == 0)
          {
          q = _racers.Where(r => r.LastName.StartsWith(input,
            StringComparison.CurrentCultureIgnoreCase))
            .OrderBy(r => r.LastName).ThenBy(r => r.FirstName)
            .ThenBy(r => r.Country).ToArray();
          if (q.Length == 0)
          {
            q = _racers.Where(r => r.Country.StartsWith(input,
              StringComparison.CurrentCultureIgnoreCase))
              .OrderBy(r => r.Country).ThenBy(r => r.LastName)
              .ThenBy(r => r.FirstName).ToArray();
          }
          }
          sender.ItemsSource = q;
        }
      }
当运行这个应用程序，在AutoSuggestBox中输入Aus时，查询找不到以这个文本开头
的姓或名，但它找到了以这个文本开头的国家。来自以Aus开头的国家的一级方程式冠军
显示在建议列表中，如图32-28所示。
图32-28
如果用户选择了一个建议，就调用OnSuggestionChosen处理程序。建议可以从
AutoSuggestBox-SuggestionChosenEventArgs的SelectedItem属性中检索：
    private async void OnSuggestionChosen(AutoSuggestBox sender,
      AutoSuggestBoxSuggestionChosenEventArgs args)
    {
      var dlg = new MessageDialog($"suggestion: {args.SelectedItem}");
      await dlg.ShowAsync();
    }
无论用户是否选择了建议，都会调用OnQuerySubmitted方法，显示结果。结果显示在
参数AutoSuggestBoxQuerySubmittedEventArgs的QueryText属性中。如果选中一个建议，
就在ChosenSuggestion属性中显示它：