# Inside Flash: Uncovering Flash Exploit Detection

## About Us
- **Security Researchers at PANW**
  - Focus on:
    - Intrusion Prevention Systems (IPS)
    - Advanced Persistent Threat (APT) Detection
    - Vulnerability Discovery
    - Exploit Technique Research

## Agenda
1. Identify Possible Exploits
2. Stop Exploits
3. Detect Exploits

### Part 1: Identifying Possible Exploits

#### Finding Vectors in Loops Using Static Detection
- **Tools for SWF Analysis:**
  - `swfdump.py` in MechEye-Fusion
  - `swfdump.jar` or `swfdump.exe` in Flex (we use this)
- **Types of Loops:**
  - For
  - While
  - Do/While

#### Simplest Scenario
- **MXMLC to SWF Conversion:**
  - AS3 Code -> MXMLC Compiler -> SWF File
  - Example Loop: `Do...while` and `for` loops

#### Algorithm for Finding Vectors in Loops
```python
def FindVecInLoop(line):
    for i in range(len(line)):
        if find_jump_opcode(i):
            jump_label = get_jump_label()
            for j in range(i + 1, len(line)):
                if find_jump_label(j):
                    cur_line_cnt = get_cur_line_cnt()
                    for k in range(cur_line_cnt + 1, len(line)):
                        if find_if(k):
                            if_label = get_if_label()
                            if if_label == i + 1:
                                print("Found loop")
                                loop_body = get_loop_body()
                                if find_vector(loop_body):
                                    check_third_argument_of_construct()
                                    if vector_found:
                                        print("Vector found in loop body")
```

#### Common Free Bugs
- **Out-of-Bounds Access (OBA)**
- **Use-After-Free (UAF)**

#### Memory Layout and Heap Management in Flash
- **Heap Block Structure:**
  - Each block is 4096 bytes
  - Custom heap in Flash MMgc
  - GCHeap managed by Garbage Collector (GC)
  - FixedMalloc for internal buffer management
  - Different sizes in one bucket

#### From AS3 to Memory
- **Example with ByteArray:**
  ```as3
  var ba:ByteArray = new ByteArray();
  ba.length = 0x80;
  ```

  - **Creation Process:**
    - `ByteArrayClass::createInstanceProc` creates a new `ByteArrayObject`
    - `operator new` allocates memory using the GC
    - `ByteArrayObject` constructor initializes the object and sets properties

  - **Setting Length:**
    - `set_length` -> `SetLengthFromAS3` -> `SetLengthCommon` -> `UnprotectedSetLengthCommon` -> `Grower::SetLengthCommon` -> `EnsureWritableCapacity` -> `ReallocBackingStore`

  - **Memory Reallocation:**
    - `ReallocBackingStore` reallocates the backing store for the ByteArray
    - Uses `mmfx_new_array_opt` macro from FixedMalloc
    - Manages old and new buffers, copying data and setting new capacity

  - **Memory Representation:**
    - `ByteArrayObject` (managed by GC)
    - `ByteArrayBuffer` (managed by FixedMalloc)

#### Example Memory Dump
- **ByteArrayObject:**
  ```
  02A944A8 cc 4b 18 01 01 df 07 80 d8 bd f2 04 e8 52 9f 05
  02A944B8 c0 44 a9 02 40 00 00 00 20 4a 18 01 34 4a 18 01
  02A944C8 28 4a 18 01 3c 4a 18 01 18 6c a3 02 10 00 5b 00
  02A944D8 88 c3 9f 05 00 00 00 00 00 00 00 00 00 da 14 01
  02A944E8 a0 8b 5a 00 01 00 00 00 00 00 00 00 2c 4a 18 01
  02A944F8 03 00 00 00 00 00 00 00
  ```

- **ByteArrayBuffer:**
  ```
  059FD010 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
  059FD020 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
  059FD030 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
  059FD040 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
  059FD050 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
  ```

This document provides a detailed overview of identifying and managing potential exploits in Flash, focusing on loop detection, memory management, and common vulnerabilities.