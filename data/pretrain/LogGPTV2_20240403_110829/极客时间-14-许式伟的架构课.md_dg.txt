## 感知"不可胜在己"，立于不败之地，自己是关键，其他都是辅因；"可胜在敌"，看敌人的软肋和什么时候失误。"内省。知彼，但先要知己。"曾国藩作战，也首先讲明己第一，稳扎稳打立于不败之地，克敌才能实现。胜利也并非都是好事，很多时候当不是自己太强，而是对手太弱或其他因素，造就的胜利只会麻痹自己和埋下根本性失败的伏笔。"知己知彼"就是自我和对手的感知。"天时地利人和"是对环境的感知。战争错综复杂风云变化，很多时候考较的都是随机应变的感知力和应对能力。"用兵者，合于利而动，不合于利而止。"对是否进行战争的条件的感知。还有对于细节的感知，"汲而先饮者，渴也。"需要通过经验学习感知获取信息，将规则载入情景化和有效利用。感知，可用于内部观察和防患未然，也可以用于判断对手并拟定对策。"攻其无备，出其不意。"需要重视情报和传播。"兵者，诡道也。"情报和传播，等于数据的输入和输出，很多时候决定战争或组织的成败。依据情报奇兵制胜，如邓艾灭蜀；与对手虚假的情报，像蒋干盗书。更典型的是反间计。李牧、范曾罢黜，赵国、项羽败亡。
## 法度"五事七计"都提到法令和奖惩。楚汉之争刘邦胜，"约法三章"以及陈平的有效奖惩体系都为功不小，胜在乎法令执行和奖惩公平。另一方面，用兵能"破釜沉舟"的项羽，然"印刓敝,忍不能予"是其失败的重要原因。"五德，智信仁勇乎。"五德相须，缺一不可。但强调"智"，将人才放第一。而法度是规则，人才必须在法度内。"主孰有道，将孰有能。""将之至任，不可不察也。""将听吾计，用之必胜，留之。将不听吾计，用之必败，去之。""令行素。"平时一样重视，战时才能发挥作用。对于复杂系统，内部崩溃往往是其失败的主要原因。当然如前所述，这种内因也可由对手或外因推动演化。对于企业来说，领导者素质和人才队伍，中坚力量的支撑很重要，而成为中坚的标准就是一致的价值观和遵循规范。另外，还要建立适应自身、对手和战争形态的管理架构和组织体系，以及有效的规章和奖惩体系。
## 辨证"以正合，以奇胜。"《孙子兵法》可能是辨证思维最早期的著作和运用。《孙子兵法》里，强弱虚实迂直恩仇甚至胜败都是辩证的，是可以对立转化的。事实上，无论战争或是组织发展，都不是直线的，而是曲线的，或者周期的，充满了变化。胜负也是辩证和变化的，便是拥有《孙子兵法》，吴国后期数战数胜，开始骄傲自负，百姓疲敝，胜负环境逆转，终致败亡。"水因地而制流，兵因敌而制胜"。所有策略必须依据时机、环境、对手、人心变化而变化。兵法不可能写尽所有情况，任何行为和结果也不是简单对应，而是因果交错。战争和系统竞争要处理的是复杂数据。《孙子兵法》注定"学者生，像者死"，必须根据特定时空、自己和对手的具体情况灵活化用。《孙子兵法》重规则轻案例，舍事而言理，因而得以破越时空和领域，成为竞争、管理和生存的基础规则。《大败局》一书中，吴晓波将中国大多数企业失败归结为缺乏道德感和人文关怀，缺乏对规则和秩序的尊重以及系统的职业精神的缺乏，这些因果在《孙子兵法》中都能够找得到对应；相对的，所有基业长青的公司，又都具备一系列适应变化，可以持续指导成长的一般性规则，这些规则在《孙子兵法》中也都能够找到对应。作为一种超乎教材而更类似于宗教的力量，《孙子兵法》的价值在于其提供了实用性同时引导了对规则的思考。跨域2500年时空岁月，它的思想精髓仍如星辰闪耀。而且随着数据、时代演进、新元素的输入还会不断推动其演进和发展，即便再过100 年，1000 年，只要人类、系统和竞争存在，它就永不会过时。![](Images/66b9828c3d4de21b8f7a14213cf3c4e7.png){savepage-src="https://static001.geekbang.org/resource/image/43/00/43231f3789095eb4cdb38e67ff3d7900.jpg"}
# 结束语 \| 放下技术人的身段，用极限思维提升架构能力  你好，我是七牛云许式伟。  这个专栏从去年 4 月份至今已经有 10个月左右的时间，到了要和你说再见的时候了。感谢你的一路相伴，感谢你的坚持。也希望这些内容能够对你有所帮助。  从工程角度来说，架构师的存在几乎是一种必然。传统项目工程也有架构师的角色，只不过软件工程有其特殊性，它快速变化，充满了不确定性，所以架构师的重要性的比重会被进一步放大。  但是如何才能成为优秀的软件工程架构师？  传统的架构图书往往从架构思维开始。但是，我认为它们错了。这里面最关键的问题在于：  slate-type="block-quote"   架构并不是 "知识点"。  架构思维的确非常非常重要。但是，熟读架构思维并不足以让人成为一名优秀的架构师。  关于这一点，我经常拿中国传统的武学文化做类比。武功招式可以精确传授，是"知识点"，掌握了就是掌握了，理论上可以做到分毫不差。但是，架构不是武功招式。它更像内功，它不是0 和1，没有清晰的掌握和没有掌握这样泾渭分明的区别。  在架构能力上，没有最好，只有更好。slate-object="mark"}  这是为什么我们的架构课并不是从架构思维开始，而是采用双线结构。它基本上围绕着以下两个脉络主线来展开内容：     slate-type="list-line" 如何从零开始一步步构建出整个信息世界；   slate-type="list-line" 在整个信息世界的构建过程中，都用了哪些重要的架构思维范式，以及这些范式如何去运用于你平常的工程实践中。  这两大脉络相辅相成。  首先，我们通过还原信息世界的构建过程，剥离出了整个信息世界的核心骨架，这也是最真实、最宏大的架构实践案例。  其次，我们结合这个宏大的架构实践来谈架构思维，避免因对架构思维的阐述过于理论化而让人难以理解。  最后，架构就是对业务系统的正交分解。因此，整个信息科技的演化过程，自然而然形成了分层：基础架构 +业务架构。   基础架构的产生是对业务架构不断深入理解的过程。越来越多的共性需求从业务架构抽离出来，成为信息科技的基础设施。  作为架构师，我们需要坚持对业务进行正交分解的信念，要坚持不断地探索各类需求的架构分解方法。这样的思考多了，我们就逐步形成了各种各样的架构范式。  这些架构范式，并不仅仅是一些架构思维，而是"一个个业务只读、接口稳定、易于组合的模块 +组合的方法论"，它们才是架构师真正的武器库。  这个武器库包含哪些内容？  首先，它应该包括信息科技形成的基础架构。努力把前辈们的心血，变成我们自己真正的积累。光会用还不够，以深刻理解它们背后的架构逻辑，确保自己与基础架构最大程度上的"同频共振"。  只有让基础架构完全融入自己的思维体系，同频共振，我们才有可能在架构设计需要的时候"想到它们"。  这一点很有趣。有些人看起来博学多才，头头是道，但是真做架构时完全想不到他的"博学"。   从体系结构来说，这个基础架构包含哪些内容？  其一，基础平台。包括：冯·诺依曼体系、编程语言、操作系统。  其二，桌面开发平台。包括：窗口系统、GDI系统、浏览器与小程序。当然我们也要理解桌面开发背后的架构逻辑，MVC架构。   其三，服务端开发平台。包括：负载均衡、各类存储中间件。服务端业务开发的业务逻辑比桌面要简单得多。服务端难在如何形成有效的基础架构，其中大部分是存储中间件。  其四，服务治理平台。主要是以容器技术为核心的DCOS（数据中心操作系统），以及围绕它形成的整个服务治理生态。这一块还在高速发展过程中，最终它将让服务端开发变得极其简单。  理解了这些基础架构，再加上你自己所处行业的领域知识，设计出一个优秀业务系统对你来说就只是轻车熟路而已。  这也是为什么这个架构课的内容结构是目前这个样子组织的。因为消化基础架构成为架构师自身的本领，远比消化架构设计原则，架构思维逻辑要难得多。  消化基础架构的过程，同时也是消化架构思维的过程。  把虚的事情往实里做，才有可能真正做好。  当然提升架构能力，不完全与成为架构师这件事情等同。  架构能力其实是一种属性，并不是只有架构师需要架构能力。软件开发工程师、SRE、甚至包括产品经理，都需要具备架构能力。  而架构师这个特殊的岗位，则是因为软件工程的需要而产生的。它从更全局的视角来把控工程的演进方向，以确保整个业务系统经历几年甚至几十年的迭代，仍然可以快速适应变化，而不至于老化。  成为架构师并不是一件纯技能的事情。  架构师需要放下技术人的身段，学会"共情"。与用户共情，理解用户的所思所想。与开发人员共情，理解技术人的所思所想。与公司共情，理解公司的发展诉求。  架构师需要学会"认同他人，反思迭代自己"。不要在不了解背景的情况下，随意推翻别人写的代码，而理由可能仅仅是不符合你的个人风格。当然反过来完全看不到项目的问题同样要不得，但这往往是受限于个人能力。要提升自己的架构水平，需要在实践中不断反思，不断在自我否定中成长。  不过我们今天把话题的重心收敛到架构能力上。怎么才有意识地通过训练来提升自己的架构能力？  实践对架构能力不可或缺。  在现实中，不少技术人员连函数规格都想不清楚。他们关心你是怎么 "实现"的，但是却不关心 "接口规格" 是什么样的，接口规格是否符合函数的"业务语义"。  要提升架构能力，首先得做到规格为先，而不是实现为先。不要动不动问怎么实现的。要首先谈这个规格合不合理，是否存在多余的依赖。进一步来说，要多去谈这个函数（或软件实体）的业务范畴合不合理，是否应该换一个切分的姿势。  其实 review自己的代码也是一种极佳的架构能力的提升手段。对自己刚刚写完的代码，去review它，从中找出问题。如此反复训练，就能实现自我能力的提升。  这其实是最高效的自我提升的方式。如果团队其他成员 code review发现了你的问题，你得反思一下为什么自己发现不了。  很多人追逐实现新的业务系统，通过做新系统来找到满足感。但是实际上对架构师来说，恰恰是反复打磨既有系统是更加锻炼人的。如果你一年前实现的系统今天仍然很满意，那就需要警醒，因为这一年你在原地踏步。  在架构能力上，没有最好，只有更好。slate-object="mark"}  这里我想分享一段我自己 review自己代码的特殊经历。事情发生在我大学期间，当时的电脑相对我们大部分学生的购买力来说，还是非常昂贵。所以我和另外4 个同学花了 7500元合买了一台电脑。  结果就是，我们 5个人轮流使用这台电脑。这意味着，我一周平均只能用一天多一点时间。再刨除上课时间，我真正能够上机的时间并不多。  而当时的我对编程非常着迷，所以我绝大部分的上机时间都花在编程上。作为物理系的学生，正常来说我学的编程语言是Fortran。但我很快就把 Fortran 课程自学完了，并从老师口中和 Fortran课程的附录中了解到了 C 语言。  于是我找物理系高年级的同学搞到了 Turbo C2.0，开始翻遍学校图书馆的图书自学 C语言。   为了能够高效利用一周只有一天多的上机时间，我尝试把程序写到纸上，并且提前进行codereview，确保尽可能多地发现程序中的错误，以减少上机过程中的调试时间。  在一次数学建模竞赛里，我和另外两位同学（廖唯棨和程胜峰）一组，其中用到了Dijkstra的最短路径算法。看完算法逻辑的介绍后，我直接一遍写成最终的代码，没有经过任何调试过程。  这让在旁边看着的同学廖唯棨觉得很神奇，问我是不是之前实现过 Dijkstra算法。但其实于我而言，这不过是长期养成自我 review代码习惯的结果而已。  这个习惯持续了三年之久。这三年里，我开始的时候都是先把代码写到纸上并完成review，然后再到电脑上。但是到后期这个习惯就变了，我不再需要把所有细节都提前写到纸上，而是只需要提前准备好骨架：整个程序串起来的思路是什么。  我大学期间写过很多高代码量的程序。其实第一个 C 程序就不短，是一个仿DOSKEY 的程序。后来也做过汇编语言的IDE。这是因为学汇编的时候，发现没有好的汇编语言集成环境，于是就自己做了一个。至于为什么学汇编？是因为我想写一个C++ 编译器，感受一下语言实现者的体验。另外，我也尝试在 DOS操作系统下实现了一个图形界面库，并用它做了图片查看器和 MP3播放器。   在代码量非常大的时候，人的脑容量就完全无法把这个实现装到头脑中。这时"规格重于实现"背后的意义就完全体现出来了。通过规格串起整个业务系统，以此把业务系统装到脑子里，这就是很朴素的架构"骨架" 思维。  这不是一个假想实验。  它是我的亲身经历。这段经历启发我意识到极限思维对架构能力提升的重要性。  架构没有最好，只有更好。在极有限的上机时间里，在没有电脑的情况下，我们只能选择把更多的逻辑装进脑子里。  这个过程还可以更进一步。我们不断训练自己对不同业务领域的架构范式的理解。直至最终，我们头脑中可以装得下整个信息科技的骨架。  到那时，单就架构能力而言，你就是最顶级的架构师了。  备注：我在文末准备了一份调研问卷，也欢迎你点击下方的图片参与调研，期待你的反馈。  ![](Images/e484e357a41d08af766575a657eb5340.png)savepage-src="https://static001.geekbang.org/resource/image/2c/b7/2c712350bf20f675d589a50376155db7.jpg"}](https://jinshuju.net/f/zxjsq8)