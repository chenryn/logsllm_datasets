    147 Taiwan
    129 Italy
    127 Israel
    126 Spain
    106 Singapore
    103 Ukraine
    89 Hong Kong
    87 Switzerland
    76 Sweden
    74 Turkey
    60 Ireland
    57 Vietnam
    57 Iran
    54 Belgium
    53 Finland
    52 Austria
    49 Pakistan
    49 Indonesia
    47 Argentina
    43 New Zealand
    42 Mexico
    41 Romania
    40 Thailand
    37 Norway
    37 Czechia
    31 South Africa
    31 Denmark
    31 Colombia
    29 Portugal
    29 Greece
    29 Chile
    24 Philippines
    23 Malaysia
    20 Hungary
    20 Belarus
    19 Nepal
每个访问排名
    28 114.255.40.3
    25 46.105.249.70
    16 54.84.16.79
    16 54.237.234.187
    16 54.157.41.7
    16 54.145.106.255
    16 52.90.178.211
    13 34.198.151.69
    12 52.221.7.193
    11 54.235.37.25
    10 34.224.47.129
    9 172.56.26.43
    7 94.153.230.50
    7 80.239.169.204
    7 73.78.62.6
    7 54.87.185.66
    7 52.207.13.234
    7 113.140.11.125
    6 52.55.104.10
    6 24.108.0.220
光从这几天来看，在 PyPI 上投放 evilpackage 的效果还是非常不错的， 每天都会有大概 2200+ 个独立 ip
进行访问，数据量稍微比之前那位小哥好一点， 也就是说，即便是类似的文章发出来，过了一年之后，随意安装 package 的这种情况完全没有改善，可能更严重了。
那位小哥释放掉所有的 package 之后，我作为一个 “恶意者” 再次使用他之前使用的 git、openssl 名字来统计数据， 我作为一个
“恶意者”，被官方勒令删除所有的 package，这些 package 名字再次被释放，我比较好奇下一位 “恶意者” 会是谁， 会在 package
里放什么？会是和我一样收集数据，还是直接 rm -rf /，还是勒索。拭目以待。
**0x10 requirements.txt**
一般经常使用 Python 的人都知道 requirements.txt 是整个项目的依赖文件，一般这样使用：
    pip install -r requirements.txt
不过也有可能一时手速过快，敲打成
    pip install requirements.txt
所以 requirements.txt 也是一个比较好的 evil package 的名字
**诡异的 requirements.txt**
在 2017-05-24 19:00 晚上，我尝试在 PyPI 注册上传 requirements.txt 的时候：
嗯，都失败了，但是 [GitHub
Issues](https://github.com/search?utf8=%E2%9C%93&q=repo%3Afate0%2Fcookiecutter-evil-pypackage+requirements.txt&type=Issues) 上竟然会有 153 个和 requirements.txt 相关的
Issues：
我并不怀疑这些 requirements.txt 数据的真实性，因为就没有人知道我尝试上传过 requirements.txt，所以这些数据肯定是真实的。
PyPI 上也并不存在 requirements.txt 信息，本地尝试安装也失败了，至今仍未明白这种情况为何发生。
**绕过 PyPI requirements.txt 的限制**
在 PyPI 账号被删除之后，我还是对 requirements.txt 很好奇，为什么之前 GitHub 上会有记录？ 能不能绕过 PyPI
的限制？下面简单讲一下如何绕过 PyPI 的限制。
我们直接查看提交 Package 时，PyPI 对 Package 名字限制的地方：
    # from: https://github.com/pypa/pypi-legacy/blob/master/webui.py#L2429
    @must_tls
    def submit_pkg_info(self):
        # ...
        # ...
        name = data['name']
        version = data['version']
        if name.lower() in ('requirements.txt', 'rrequirements.txt',
                'requirements-txt', 'rrequirements-txt'):
            raise Forbidden, "Package name '%s' invalid" % name
通过上面的代码，我们可以看到 PyPI 直接硬编码 'requirements.txt', 'rrequirements.txt',
'requirements-txt', 'rrequirements-txt' 禁止用户上传这些文件。
我们再看看 pip install xxx 的时候，PyPI 是怎么查找 Package 的：
    # from: https://github.com/pypa/pypi-legacy/blob/master/store.py#L611
    def find_package(self, name):
        '''Return names of packages that differ from name only in case.'''
        cursor = self.get_cursor()
        sql = 'select name from packages where normalize_pep426_name(name)=normalize_pep426_name(%s)'
        safe_execute(cursor, sql, (name, ))
        return [r[0] for r in cursor.fetchall()]
好吧，直接查找数据库，我们再跟下来看 normalize_pep426_name：
    # from: https://github.com/pypa/warehouse/blob/master/warehouse/migrations/versions/3af8d0006ba_normalize_runs_of_characters_to_a_.py#L27
    def upgrade():
        op.execute(
            """ CREATE OR REPLACE FUNCTION normalize_pep426_name(text)
                RETURNS text AS
                $$
                    SELECT lower(regexp_replace($1, '(.|_|-)+', '-', 'ig'))
                $$
                LANGUAGE SQL
                IMMUTABLE
                RETURNS NULL ON NULL INPUT;
            """
        )
        op.execute("REINDEX INDEX project_name_pep426_normalized")
看到中间那个正则了吧，这也就意味着
    pip install youtube-dl
    pip install youtube_dl
    pip install youtube.dl
    pip install youtube-_-dl
    pip install youtube.-.dl
这几条命令其实都是等价的，都是在安装 youtube_dl, 那么我们就可以很容易的就绕过 PyPI 的限制， 直接上传一个
requiremnets–txt：
    twine register dist/requirements--txt-0.1.0.tar.gz
    twine upload dist/requirements--txt-0.1.0.tar.gz
来来来，我们直接尝试 pip install requirements.txt：
通过上面的图，我们可以看到 PyPI 已经返回我们的 package url， 到了 pip 准备安装这个 package 的时候报错了，所以直接看 pip
代码：
    # https://github.com/pypa/pip/blob/master/pip/index.py#L650
    if not version:
        version = egg_info_matches(egg_info, search.supplied, link)
    if version is None:
        self._log_skipped_link(
            link, 'wrong project name (not %s)' % search.supplied)
        return
看了代码，也就是没法在 url 中获取 package 的版本号， 因为 package
的名字(requirements–txt)和搜索名字(requirements.txt)对不上，我们得找找其他方法：
    # https://github.com/pypa/pip/blob/master/pip/index.py#L626
    if ext == wheel_ext:
        try:
            wheel = Wheel(link.filename)
        except InvalidWheelFilename:
            self._log_skipped_link(link, 'invalid wheel filename')
            return
        if canonicalize_name(wheel.name) != search.canonical:
            self._log_skipped_link(
                link, 'wrong project name (not %s)' % search.supplied)
            return
        if not wheel.supported(self.valid_tags):
            self._log_skipped_link(
                link, 'it is not compatible with this Python')
            return
        version = wheel.version
看到这里，大家应该也知道了，之前我们一直都是使用 source 的方式提交 package，如果我们直接打包成 wheel，
根据上面的代码，就不会再报错了，我们重新打包，再次上传：
终于成功了，当然 wheel 安装方式并不能直接执行命令， 不过我们可以通过给 requirements.txt 添加一个恶意依赖达到执行任意代码的效果。
在这里，我就添加了一个名为 ztz 的 source package，用于提醒安装 requirements.txt 的用户
**0x11 总结**
想做一件坏事情真不容易，快去看看  上面有没有你的名字。