for the CPU RTL designs while running SimInput mutation,
ISA simulation and bug checking. For SimInput mutation and
other functionalities outside the RTL simulation, DIFUZZRTL
consists of 4 k lines of Python, which include manually
determined opcodes and registers for instruction generation.
We also added 800 lines to the ISA simulator for instruction
emulation and a pseudo interrupt controller. The framework
also relies on gnu toolchains (i.e. gcc, nm) to generate
simulation inputs. Then, we implemented the prototype of
DIFUZZRTL on two different RTL testing environments, the
software simulation and the FPGA emulation.
Prototyping for Software Simulation. We used cocotb [46],
a python based test bench tool for RTL codes, to implement the
prototype on RTL software simulation. The designs are then
simulated using an RTL simulator (i.e., Verilator [47] or icarus
Verilog [48]). This prototype includes 1.5 k lines of python
codes for stimuli generation and monitoring the simulation.
Prototyping for FPGA emulation.
to test
DIFUZZRTL using FPGA emulation, we incorporated the
fuzzing framework into FireSim, which is an FPGA-
accelerated simulation platform developed by BAR [49].
Thus, DIFUZZRTL’s implementation on FireSim automatically
instruments register-coverage when building an FPGA image,
thereby enabling the fuzzing framework. To this end, we
modified 200 lines of Scala and 500 lines of C++ codes in
FireSim.
In order
VI. EVALUATION
This section evaluates DIFUZZRTL on various aspects. We
first describe the evaluation setup of DIFUZZRTL (§VI-A).
Then we evaluate the effectiveness of register-coverage with
synthetic RTL designs (§VI-B). Next, we analyze the perfor-
mance of DIFUZZRTL with real-world CPU designs in two
different testing environments: 1) software simulation (§VI-C);
and 2) FPGA emulation (§VI-D). Then we describe the list of
new bugs that DIFUZZRTL found (§VI-E), and introduce case
studies of finding real-world bugs through DIFUZZRTL and
other approaches (§VI-F).
A. Evaluation Setup
1) RTL Designs: In order to evaluate DIFUZZRTL, we
performed the fuzz testing with various RTL designs, from
synthetic RTL designs to real-world OpenRISC and RISC-V
CPU cores.
Synthetic RTL.
In order to clearly understand DIFUZZRTL,
we developed a synthetic RTL design based on the code
example shown in Figure 22. We added one more register
variable from the example so that the bug is triggered when
the registers reach a specific state. We also tested synthetic
RTL design while varying the number of states by adding
more states per each register (i.e., adding more bits to each
register). In total, four different versions of RTL designs with
the different number of finite states were tested: 27 , 64 , 125,
and 216 states.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1294
Real-World OpenRISC Mor1kx Cappuccino. This is a five
stage pipelined core which implements the OpenRISC ISA [43].
Modules such as MMU, cache, and FPU are included in this
design, building a full-fledged core. Thus, this core supports
basic and floating point instruction set in OpenRISC ISA and is
able to boot Linux. In order to perform the differential testing
while fuzzing, DIFUZZRTL used OpenRISC Or1ksim as a
golden model, which is an OpenRISC ISA simulator.
Real-World RISC-V Rocket Core. Rocket core is an in-order
pipelined core which is included in RISC-V Rocket Chip [41].
This core is supported by industry for the chip prototyping.
We note that Rocket core is extensively verified by the steering
research group. In order to perform the differential testing
while fuzzing the Rocket core, we used a RISC-V reference
ISA simulator, Spike, as a golden model. Spike is commonly
used to verify the correctness of new hardware designs.
Real-World RISC-V Boom Core. Boom Core is an out-
of-order superscalar core which can also be used in RISC-V
Rocket Chip SoC. Features for out-of-order cores such as issue
queue or ROB are implemented in Boom core thus its micro
architecture is much more complex than in-order cores. Boom
core is also able to boot linux and widely verified by the
steering research group. To perform the differential testing, we
used Spike as we have done for the Rocket core.
2) Fuzz Testing Environment: We evaluated DIFUZZRTL
in two different environments for testing RTL designs, i.e.
software simulation and FPGA emulation.
Software Simulation. All our experiments based on software
simulation were carried out on a machine of Intel Xeon Gold
6140 with 72 CPU cores and 512GB RAM, which runs Ubuntu
18.04 LTS. For synthetic RTL designs, we fuzzed each version
1,000 times and plotted a graph representing the distributions
so as to come up with a more robust statistical conclusion.
For real-world RTL designs, we fuzzed each RTL design with
the corresponding ISA simulator for three times and plotted
a graph showing an average value as well as minimum and
maximum values along with an error bar.
FPGA Emulation. We ran DIFUZZRTL using FPGA em-
ulation on an Amazon EC2 F1 instance [50], which offers
a customizable hardware acceleration feature through FPGA.
Similar to the case of the software simulation, we fuzzed
Rocket core and Boom core three times and plotted a graph
showing an average value and error bar.
3) Coverage Guiding Setup for Fuzzing: To compare the
effectiveness DIFUZZRTL’s register-coverage guided fuzzing,
we ran DIFUZZRTL while changing the coverage guiding
feature: 1) no-cov, which does not leverage any coverage-
guided feature; 2) mux-cov, which utilizes the mux-coverage
guided fuzzing as proposed by RFuzz [14]; and 3) reg-cov,
which utilizes the register-coverage guided fuzzing that we
propose with DIFUZZRTL.
B. Fuzzing Synthetic RTL
Static Instrumentation Overhead. To compare the effi-
ciency of DIFUZZRTL’s register-coverage and RFuzz’s mux-
Project
Synthetic RTL (27)
Synthetic RTL (64)
Synthetic RTL (125)
Synthetic RTL (216)
Num. reg. (Bits) Num. muxes Verilog
Total
Original
6 (18)
6 (18)
6 (21)
6 (21)
Control
3 (6)
3 (6)
3 (9)
3 (9)
Total
9
12
15
18
Overhead (%)
mux-cov
118
121
121
121
reg-cov
24
20
17
15
123
145
167
187
Fig. 9: Coverage instrumentation overheads for synthetic RTL
designs
(a) Average time (s) to find bug
Fig. 10: Efficiency of coverage guided fuzzing for synthetic
RTL designs
(b) Reached states
coverage scheme, we instrumented each coverage scheme on
the synthetic RTL designs. Figure 9 shows the statistics of
each synthetic RTL design and the overheads of coverage
instrumentations. The design has total six registers and 18
muxes, where only three registers are identified as control
registers by DIFUZZRTL. The number of muxes that mux-
coverage has to monitor linearly increases as the number of
states increases, but the bits in control registers that register
coverage should monitor marginally increases.
Runtime Instrumentation Overhead. In the case of runtime
overhead due to the instrumentation, simulation speeds were
not largely different by each other. More specifically, the
original performance before the coverage instrumentation
showed 2.36 MHz, and after the coverage instrumentation,
DIFUZZRTL’s register-coverage showed 2.29 MHz (i.e., 4.2%
slowdown) and RFuzz’s mux-coverage showed 2.02 MHz (i.e.,
15.4% slowdown). As we will show later with real-world RTL
designs, if the target RTL designs are complicated enough,
DIFUZZRTL’s performance improvement over RFuzz becomes
significant—up to 40 times for the RISC-V Rocket core.
Efficiency of Register Coverage-Guided Fuzzing. Coverage
metrics during the RTL fuzzing should efficiently guide an
input stimuli to unexplored states. To this end, we measured
the average cycles to reach the vulnerable state in each version
of synthetic RTL design with different coverage guidances. In
the evaluation, the fuzzer randomly generates input which is
defined as a concatenation of bit vectors fed to the design every
cycle. We use a simple random bit flip algorithm for mutation
so that the only difference is the coverage for input guidance,
i.e., 1) no-coverage guided, 2) mux-coverage guided, and 3)
register-coverage guided.
As illustrated in Figure 10, register-coverage guided fuzzer
shows a remarkable improvement over other two coverage-
guiding methods thanks to the judicious guidance. On the
other hand, mux-coverage was even worse than the no-coverage
due to the limitations of the mux-coverage. This is because the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1295
2764125216Number of finite states0.00010.0010.010.1110Elapsed time (s) to find bugno-covmux-covreg-cov010002000300040005000Number of fuzzing iterations050100150200Number of states coveredno-covmux-covreg-covno-cov
mux-cov
reg-cov
Project
Overhead (%)
mux-cov
Num. reg (Bits)
All
258 (780)
1,3 k (15.3 k)
4.90 k (36.6 k)
Control
90 (106)
207 (661)
330 (990)
Num. muxes Verilog
Original
8.31 k
69.2 k
168 k
Total
1.33 k
5.3 k
21 k
mor1kx
Rocket
Boom
✗ RFuzz failed to instrument Mor1kx cappuccino and Boom core
Fig. 13: Instrumentation overhead for real-world CPU RTLs
Fuzzing speed* (Hz)
Simulation speed (Hz)
Slowdown (%)
✗
112
✗
reg-cov
21
18
15
Project
no-cov
mux-cov
reg-cov
N.A.
9.46e – 13
2.64e – 33
-
N.A.
1.25e – 34
-
-
N.A.
Fig. 11: p-values of the Mann-Whitney U test between
distributions, where each distribution is populated with each
coverage-guiding method. Two distributions are considered
significantly different if p-value is less than 0.05 [51].
no-cov
mux-cov
reg-cov
no-cov
mux-cov
reg-cov
N.A.
no-cov
reg-cov
-
N.A.
reg-cov
-
-
N.A.
Fig. 12: The results of Vargha Delaney’s A12 measure
between the distributions. The coverage-guiding method name
in a cell is the result of the VDA measure [52], which is
expected to show the higher performance between the
methods in the corresponding row and column (i.e., exploring
a more number of states in a given number of iterations).
mux-coverage guided fuzzer not only failed to recognize the
valid input but also mis-recognized the invalid input as a valid
one. As a result, it inserted such invalid inputs to the fuzzing
corpus and wasted the cycles to mutate the invalid inputs which
do not help to explore the new state space. This tendency
becomes clarified as the number of finite states increases,
meaning that the register-coverage becomes more efficient.
Compared to mux-coverage guided fuzzer, register-coverage
guided fuzzer reached the bug state almost 6.4 times faster.
In terms of the average number of reached states during
the fuzzing iterations, register-coverage has shown the best
performance—i.e., register-coverage guided fuzzer explored the
highest number of states as shown in Figure 10-(b). To come
up with a more robust statistical conclusion, we performed
two statistical testings, the Mann-Whitney U test [53] and the
Vargha Delaney’s A12 (VDA) measure [52], on the distributions
obtained from the number of reached states during 5,000
iterations.
According to the Mann-Whitney U test, p-value between
each distribution (i.e., a distribution populated with no-coverage,
mux-coverage, and register-coverage guiding method) was
always less than 0.05 as shown in Figure 11, suggesting that all
three distributions show clear statistical differences. The VDA
measure also demonstrated that the register-coverage always
showed higher improvement over the other two coverage-
guiding methods (shown in Figure 12)—the VDA score was
always larger than 0.71. One thing to note is that the mux-
coverage clearly decreased the performance even more than
the no-coverage case as we described before.
mux-cov
mux-cov
no-cov
2.94 k
2.44 k
1.71 k
mor1kx
Rocket
Boom
*Fuzzing speed is defined as the number of fuzzing iterations per second.
✗ RFuzz failed to instrument Mor1kx cappuccino and Boom core
✗
56.5
✗
✗
97
✗
reg-cov
2.76 k
2.27 k
1.60 k
reg-cov
6.1
6.9
6.4
mux-cov
✗
0.006
✗
reg-cov
0.41