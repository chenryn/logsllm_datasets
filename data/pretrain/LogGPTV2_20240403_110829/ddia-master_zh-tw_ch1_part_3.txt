在某些情况下，我们可能会选择牺牲可靠性来降低开发成本（例如为未经证实的市场开发产品原型）或运营成本（例如利润率极低的服务），但我们偷工减料时，应该清楚意识到自己在做什么。
## 可伸缩性
系统今天能可靠执行，并不意味未来也能可靠执行。服务 **降级（degradation）** 的一个常见原因是负载增加，例如：系统负载已经从一万个并发使用者增长到十万个并发使用者，或者从一百万增长到一千万。也许现在处理的资料量级要比过去大得多。
**可伸缩性（Scalability）** 是用来描述系统应对负载增长能力的术语。但是请注意，这不是贴在系统上的一维标签：说 “X 可伸缩” 或 “Y 不可伸缩” 是没有任何意义的。相反，讨论可伸缩性意味著考虑诸如 “如果系统以特定方式增长，有什么选项可以应对增长？” 和 “如何增加计算资源来处理额外的负载？” 等问题。
### 描述负载
在讨论增长问题（如果负载加倍会发生什么？）前，首先要能简要描述系统的当前负载。负载可以用一些称为 **负载引数（load parameters）** 的数字来描述。引数的最佳选择取决于系统架构，它可能是每秒向 Web 伺服器发出的请求、资料库中的读写比率、聊天室中同时活跃的使用者数量、快取命中率或其他东西。除此之外，也许平均情况对你很重要，也许你的瓶颈是少数极端场景。
为了使这个概念更加具体，我们以推特在 2012 年 11 月释出的资料【16】为例。推特的两个主要业务是：
* 释出推文
  使用者可以向其粉丝释出新讯息（平均 4.6k 请求 / 秒，峰值超过 12k 请求 / 秒）。
* 主页时间线
  使用者可以查阅他们关注的人释出的推文（300k 请求 / 秒）。
处理每秒 12,000 次写入（发推文的速率峰值）还是很简单的。然而推特的伸缩性挑战并不是主要来自推特量，而是来自 **扇出（fan-out）**[^ii]—— 每个使用者关注了很多人，也被很多人关注。
[^ii]: 扇出：从电子工程学中借用的术语，它描述了输入连线到另一个门输出的逻辑闸数量。输出需要提供足够的电流来驱动所有连线的输入。在事务处理系统中，我们使用它来描述为了服务一个传入请求而需要执行其他服务的请求数量。
大体上讲，这一对操作有两种实现方式。
1. 释出推文时，只需将新推文插入全域性推文集合即可。当一个使用者请求自己的主页时间线时，首先查询他关注的所有人，查询这些被关注使用者释出的推文并按时间顺序合并。在如 [图 1-2](../img/fig1-2.png) 所示的关系型资料库中，可以编写这样的查询：
    ```sql
    SELECT tweets.*, users.*
      FROM tweets
      JOIN users   ON tweets.sender_id = users.id
      JOIN follows ON follows.followee_id = users.id
      WHERE follows.follower_id = current_user
    ```
    ![](../img/fig1-2.png)
    **图 1-2 推特主页时间线的关系型模式简单实现**
2. 为每个使用者的主页时间线维护一个快取，就像每个使用者的推文收件箱（[图 1-3](../img/fig1-3.png)）。当一个使用者释出推文时，查询所有关注该使用者的人，并将新的推文插入到每个主页时间线快取中。因此读取主页时间线的请求开销很小，因为结果已经提前计算好了。
    ![](../img/fig1-3.png)
    **图 1-3 用于分发推特至关注者的资料流水线，2012 年 11 月的负载引数【16】**
推特的第一个版本使用了方法 1，但系统很难跟上主页时间线查询的负载。所以公司转向了方法 2，方法 2 的效果更好，因为发推频率比查询主页时间线的频率几乎低了两个数量级，所以在这种情况下，最好在写入时做更多的工作，而在读取时做更少的工作。
然而方法 2 的缺点是，发推现在需要大量的额外工作。平均来说，一条推文会发往约 75 个关注者，所以每秒 4.6k 的发推写入，变成了对主页时间线快取每秒 345k 的写入。但这个平均值隐藏了使用者粉丝数差异巨大这一现实，一些使用者有超过 3000 万的粉丝，这意味著一条推文就可能会导致主页时间线快取的 3000 万次写入！及时完成这种操作是一个巨大的挑战 —— 推特尝试在 5 秒内向粉丝传送推文。
在推特的例子中，每个使用者粉丝数的分布（可能按这些使用者的发推频率来加权）是探讨可伸缩性的一个关键负载引数，因为它决定了扇出负载。你的应用程式可能具有非常不同的特征，但可以采用相似的原则来考虑它的负载。
推特轶事的最终转折：现在已经稳健地实现了方法 2，推特逐步转向了两种方法的混合。大多数使用者发的推文会被扇出写入其粉丝主页时间线快取中。但是少数拥有海量粉丝的使用者（即名流）会被排除在外。当用户读取主页时间线时，分别地获取出该使用者所关注的每位名流的推文，再与使用者的主页时间线快取合并，如方法 1 所示。这种混合方法能始终如一地提供良好效能。在 [第十二章](ch12.md) 中我们将重新讨论这个例子，这在覆盖更多技术层面之后。
### 描述效能
一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：
* 增加负载引数并保持系统资源（CPU、记忆体、网路频宽等）不变时，系统性能将受到什么影响？
* 增加负载引数并希望保持效能不变时，需要增加多少系统资源？
这两个问题都需要效能资料，所以让我们简单地看一下如何描述系统性能。
对于 Hadoop 这样的批处理系统，通常关心的是 **吞吐量（throughput）**，即每秒可以处理的记录数量，或者在特定规模资料集上执行作业的总时间 [^iii]。对于线上系统，通常更重要的是服务的 **响应时间（response time）**，即客户端传送请求到接收响应之间的时间。