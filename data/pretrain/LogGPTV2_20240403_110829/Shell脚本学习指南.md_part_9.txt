Shel1是一个完整的程序语言，目前，我们已经说明过基本的命令、选项、参数与变量，
以及echo与printf的基本输出。我们也大致介绍了基本的I/O重定向符：、>>
以及1。
Shell会在SPATH变量所列举的各个目录中寻找命令。SPATH需会包含个人的bin目录
（用来存储你个人的程序与脚本），你可以在·profile文件中将该目录列入到PATH里。
我们还看过了取得命令行参数的基本方式，以及简易的执行跟踪。
本章最后讨论的是国际化与本地化。在世界各地的人们对运算需求越来越大的时候，该
主题在计算机系统上也日益重要了，对Shell脚本而言，尽管这方面的支持仍然有限，不
过Shell程序员还是应该了解locale对他们的程序代码所造成的影响。
www.TopSage.com
---
## Page 56
第3章
查找与替换
我们在1.2节里曾提及UNIX程序员偏好处理文本的行与列。文本型数据比二进制数据
更具灵活性，且UNIX系统也提供许多工具、让用户可以轻松地剪贴文本。
在本章中，我们要讨论的是编写Shel1脚本时经常用到的两个基本操作：文本查找
（searching）-寻找含有特定文本的行，文本替换（substitution）更换找到的文
本。
虽然你可以使用简单的固定文本字符串完成很多工作，但是正则表达式（regular
expression）能提供功能更强大的标记法，以单个表达式匹配各种实际的文本段。本章
会介绍两种由不同的UNIX程序所提供的正则表达式风格，然后再进一参介绍提取文本
与重新编排文本的几个重要工具。
3.1查找文本
以grep程序查找文本（以UNIX的专业术语来说，是匹配文本（matchingtext））是相
当方便的。在POSIX系统上，grep可以在两种正则表达式风格中选择一种，或是执行
简单的字符串匹配。
传统上，有三种程序，可以用来查找整个文本文件：
grep
最早的文本匹配程序。使用POSIX定义的基本正则表达式（BasicRegular
Expression，BRE），本章稍后会提到这部分，
do15o
扩展式grep（Extendedgrep）。这个程序使用扩展正则表达式（ExtendedRegular
Expression，ERE）—这是一套功能更强大的正则表达式，使用它的代价就是会
44
www.TopSage.com
---
## Page 57
查找与替换
45
耗掉更多的运算资源。在早期出现的PDP-11的机器上，这点事关重大，不过以现
在的系统而言，在性能影响上几乎没有太大的差别。
fgrep
快速grep（Fastgrep）。这个版本匹配固定字符申面非正则表达式，它使用优化
的算法，能更有效地匹配固定字符串。最初的版本，也是唯一可以并行（inparallel）
地匹配多个字符申的版本：也就是说，grep与egrep只能匹配单个正则表达式；
而fgrep使用不同的算法，却能匹配多个字符串，有效地测试每个输人行里，是
否有匹配的查找字符串。
1992POSIX标准将这三个改版整合成一个grep程序，它的行为是通过不同的选项加
以控制。POSIX版本可以匹配多个模式—不管是BRE还是ERE，fgrep与egrep
两者还是可用，只是标记为不推荐使用（deprecated），即它们有可能在往后的标准里剩
除。果然，在2001POSIX标准里，就只纳人合井后的grep命令。不过实际上，egrep
与fgrep在所有UNIX与类UNIX的系统上都还是可用的。
3.1.1
简单的grep
grep最简单的用法就是使用固定字符串：
S vbo
有登录了
toistoy tty1
Feb 26 10:53
tolstoy
pts/0
pts/1
Feb 29 10:59
tolstoy
Feb 29 10:59
toistoy
Pts/2
Feb 29 11:00
pts/3
Peb 29 11:00
Feb 29 11:00
pts/5
pts/4
austen
Feb 29 15:39 (mansfield-park,example.com)
austen
pt8/6
Feb 29 15:39 (mansfield-park.example.com)
S wbo 1 grep -F auaten
Feb 29 15:39 (mansfield-park,example.com)
austen登录干何处
austen
pts/5
au8ten
pt8/6
Feb 29 15:39 (mansfield-psrk.example.com)
范例中使用-F选项，以查找固定字符串auBten。事实上，只要匹配的模式里未含有
正则表达式的meta字符（metacharacter），期grep默认行为模式就等同于使用了-F：
S wbo 1 grep austen
Feb 29 15:39 (mansfield-park.exanp1e,com)
不具-7.但结果一样
austen
austen
pts/5
pt8/6
Feb 29 15:39 (mansfie1dpark,example.com)
3.2
正则表达式
本节提供有关正则表达式构造与匹配方式的概述，特别会提及POSIXBRE与ERE构造，
因为它们想要将大部分UNIX工具里的两种正则表达式基本风格（flavors）加以正式化。
www.TopSage.com
---
## Page 58
46
grep
语法
grep[options ...]pattern-spec[files ...]
用途
显示匹配一个或多个模式的文本行，时常会作为管道（pipeline）的第一费，
以便对匹配的数据作进一步处理。
主要选项
-B
使用扩展正则表达式进行匹配，grep-E可取代传统的egrep。
-F
使用围定字将串进行匹配。grep-F可取代传统的fgrep命令。
-e pat-list
通常，第一个非选项的参数会指定要医配的模式。你也可以提供多个模
式，只要将它们放在引号里并以换行字将分隔它们。模式以减号开头时，
grep会混清，而将它视为选项。这就是-e选项派上用场的时候，它可
以指定其参数为模式--即使它以减号开头。
-f pat-file
从pat-file文件读取模式作匹配。
-i
模式匹配时忽略字母大小写差异。
-1
列出医配模式的文件名称，而不是打印匹配的行。
静默地。如果模式匹配匹配，则grep会成功地离开，而不将匹配的行写入
标准输出：否则即是不成功。（我们尚未讨论成功/不成功：可参考6.2节）。
-S
不显示错误信息。通常与-Q并用。
-V
显示不匹配模式的行。
行为模式
读取命令行上指名的每个文件，发现医配查找模式的行时，将它显示来。当指
明多个文件时，greD会在毒一行前面加上文件名与一个留号。联认使用BRE。
你可以使用多个-e与-f选项，建立要查我的模式列表。
www.TopSage.com
---
## Page 59
查找与替换
47
我们期望你在阅读这本书前，已经接触过正则表达式与文本匹配，并已有些了解，如果
是这样，下面的段落将澄清如何使用正则表达式完成具有可移植性的Shell脚本。
若你完全没接触过正则表达式，那么这里提到的东西对你来说可能太简略了，你应该先
去看看介绍性的资料，例如《Learning the UNIXOperating System》（O'Reilly）或是
《sed&awk》（O'Reilly）。因为正则表达式是UNIX工具使用和构建模型上的基础，花
些时间学习如何使用它们并且好好利用它们，你会不断地从各个层面得到充分的回报。
如果你使用正则表达式处理文本已有多年经验，可能会觉得这里所介绍的内容略嫌粗略。
在这种情况下，我们会建议你浏览了第一部分POSIXBRE与ERE的表格式概括之后，
就直接跳到下一节，然后找一些比较深入的资料来阅读，例如《MasteringRegular
Expressions)(O'Reilly)。
3.2.1什么是正则表达式
正则表达式是一种表示方式，让你可以查找匹配特定准则的文本，例如，“以字母a开
头”。此表示法让你可以写一个表达式，选定或匹配多个数据字符串。
除了传统的UNIX正则表达式表示法之外，POSIX正则表达式还可以做到：
·编写正则表达式，它表示特定于locale的字符序列顺序和等价字符。
编写正则表达式，而不必关心系统底层的字符集是什么。
很多的UNIX工具程序沿用某一种正则表达式形式来强化本身的功能。这里列举一部分
例子：
用来寻找匹配文本行的grep工具族：grep与egrep，以及非标准但很好用的agrep
工具(注1)。
·用来改变输入流的sed流编辑器（streameditor），本章稍后将会介绍。
·字符串处理程序语言，例如awk、Icon、Perl、Python、Ruby、Tcl等。
文件查看程序（有时称为分页程序，pagcrs），例如more、page，与pg，都常出现
在商用UNIX系统上，另外还有广受欢迎的1eSB分页程序（注2）。
注 1:
1992年原始的 UNIX 版基及在fp://ftp.cs.arizona.edu/agrep/agrep-2.04.sar.Z, Windows
本别在krp://www.tgries.de/agrep/337/agrep337.zip。agzep 不同于我们在本书中余
绍的大部分可自由下载的较件，它并不能随意地用于任何目的；你可以参考程序所附的
许可文件。
注 2:
与more对应的双关语。见ftp:/ftp-gnu.org/gnm/less/。
www.TopSage.com
---
## Page 60
48
第3章
文本编辑器，例如历史悠久的ed行编辑器、标准的vi屏幕编辑器，还有一些插件
（add-on）编辑器，例如 emacs、jed、jove、vile、vim等。
正因为正则表达式对于UNIX的使用是这么的重要，所以花些时间把它们弄熟绝对不会
错，越早开始就能掌握得越好。
从根本上来看，正则表达式是由两个基本组成部分所建立：一般字符与特殊字符，一般
字符指的是任何没有特殊意义的字符，正如下表中所定义的。在某些情况下，特殊字符
也可以视为一般字符。特殊字符常称为元字符（metacharacter），本章接下来的部分都会
以meta字符表示。表3-1为POSIXBRE与ERE的meta字符列表。
表3-1：POSIXBRE与 ERE的meta字符
字符
BRE/ERE
模式含义
两者都可
通常用以关闭后续字符的特殊意义，有时则是相反地打开后续字
符的特殊意义，例如（..\）与\（..）。
两者都可
匹配任何单个的字符，但NUL除外。独立程序也可以不允许匹配
换行字符。
两者都可
匹配在它之前的任何数目（或没有）的单个字符。以ERE而言，此
前置字符可以是正则表达式，例如：因为，（点号）表示任一字符，
所以。*代表“匹配任一字符的任意长度”。以BRE来说，*若置
于正则表达式的第一个字符，不具任何特殊意义。
两者都可
匹配紧接着的正则表达式，在行或字符申的起始处。BRE：仅在正
则表达式的开头处具此特殊含义，ERE：置于任何位置都具特殊含
义。
$
两者都可
匹配前面的正则表达式，在字符申或行结尾处，BRE：仅在正则表
达式结尾处具特殊含义，ERE：置于任何位置都具特殊含义。
[...]两者都可
方括号表达式（bracket expression），匹配方括号内的任一字符。
连字符（-）指的是连续字符的范围（注意：范围会因locale而有
所不同，因此不具可移植性）。符号置于方括号里第一个字符则
有反向含义：指的是匹配不在列表内（方括号内）的任何字符。作
为首字符的一个连字符或是结束方括号（1），则被视为列表的一
部分，所有其他的meta字符也为列表的一部分（也就是：根据其
字面上的意义），方括号表达式里可能会含有排序符号（collating
symbol）、等价字符集（equivalence class），以及字符集（character
class）（文后将有介绍）。
www.TopSage.com
---
## Page 61
查找与替换
表3-1：POSIXBRE与ERE的meta字符（续）
com
字符
BRE/ERE
模式含义
\(n,m^)BRE
区间表达式（intervalexpression），匹配在它前面的单个字符重现
（occurrences）的次数区间，\（n\）指的是重现n次；\（n，\）则
为至少重现（occurrences）n次，而\（n，m））为重现n至m次，n
与m的值必须介于0至RE_DUP_MAX（含）之间，后者最小值为255。
BRE
多可以将9个独立的子模式（subpattern）存储在单个模式中。匹
配于子模式的文本，可通过转义序列（escape sequences）\1至
\9，被重复使用在相同模式里。例如\（ab\）.*\1，指的是匹配于
ab组合的两次重现，中间可存在任何数目的字符。
\n
BRE
重复在\（与\）方括号内第n个子模式至此点的模式。n为1至9
的数字，1为由左开始。
(n,m)
ERE
与先前提及BRE的\（n，m\）一样，只不过方括号前没有反斜杠。
ERE
匹配前面正则表达式的一个或多个实例。
a
ERE
匹配前面正则表达式的零个或一个实例。