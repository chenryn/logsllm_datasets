### Shell 编程基础

Shell 是一种完整的编程语言。截至目前，我们已经介绍了基本命令、选项、参数和变量的使用方法，以及 `echo` 和 `printf` 的基本输出功能。此外，还简要说明了基本的 I/O 重定向符号：`>`、`>>` 和 `<`。当执行命令时，Shell 会在 `PATH` 环境变量所列出的目录中查找相应的程序或脚本。通常，`PATH` 包含用户的个人 `bin` 目录（用于存放自定义的程序和脚本），用户可以在 `.profile` 文件中将此目录添加到 `PATH` 中。我们还探讨了获取命令行参数的基本方式及简单的执行跟踪技术。

在本章最后部分，我们将讨论国际化与本地化的重要性。随着全球范围内对计算资源需求的增长，这一主题变得愈发关键。尽管 Shell 脚本在此方面的支持仍然有限，但了解 `locale` 对代码的影响对于 Shell 程序员来说是必不可少的。

---

### 第三章：文本搜索与替换

#### 引言
正如我们在1.2节提到的那样，UNIX程序员倾向于处理文本文件中的行和列数据。相比二进制格式，纯文本提供了更高的灵活性，并且 UNIX 提供了许多工具来帮助用户轻松地编辑和操作文本内容。本章节主要介绍编写 Shell 脚本时常会用到的两种基本操作：文本搜索（寻找包含特定字符串的行）和文本替换（更改找到的内容）。虽然简单的固定文本串可以完成许多任务，但正则表达式（Regular Expression, RegEx）提供了一种更为强大的模式匹配机制，能够以单一表达式对应多种实际文本段落。接下来，我们会分别介绍由不同 UNIX 工具支持的两种正则表达式风格，并进一步探索一些重要的文本提取与重组工具。

#### 3.1 文本搜索
利用 `grep` 命令进行文本搜索（即匹配指定模式的文本）非常便捷。在 POSIX 兼容系统上，`grep` 支持两种类型的正则表达式或者简单的字符串匹配。历史上存在三种常用的文本搜索工具：

- **grep** - 最初版本的文本匹配工具，遵循 POSIX 定义的基础正则表达式（Basic Regular Expression, BRE）。
- **egrep** - 扩展 grep（Extended grep），采用扩展正则表达式（Extended Regular Expression, ERE），这是一种更强大的表达式形式，代价是可能消耗更多计算资源。
- **fgrep** - 快速 grep（Fast grep），专门针对固定字符串而非正则表达式的高效匹配算法设计。它能够并行检查多个目标字符串是否出现在输入行中。

1992 年的 POSIX 标准整合了这三种变体为一个统一的 `grep` 程序，通过不同的选项控制其行为。合并后的版本支持同时匹配多个模式（无论是 BRE 还是 ERE），而 egrep 和 fgrep 被标记为不推荐使用，尽管实际上它们至今仍在所有主流 UNIX 及类 UNIX 操作系统中可用。

##### 3.1.1 基础 `grep` 用法
最简单的 `grep` 用法是直接指定要查找的确切字符串：
```bash
$ who | grep tolstoy
```
上述命令展示了如何从 `who` 命令输出的结果中筛选出含有 "tolstoy" 的行。如果需要精确匹配而不考虑正则表达式元字符，则可添加 `-F` 选项：
```bash
$ who | grep -F austen
```
当模式不含任何正则表达式特殊字符时，即使省略 `-F` 选项，默认行为也等同于指定了该选项。

#### 3.2 正则表达式简介
本节概述了正则表达式的构建规则及其工作原理，特别是关于 POSIX BRE 与 ERE 的规范，旨在标准化大多数 UNIX 工具中使用的两种主要正则表达式风格。对于那些已经熟悉正则表达式的读者来说，下面的信息可能显得过于基础；而对于完全没有接触过这方面知识的人士而言，建议先阅读相关入门资料如《Learning the Unix Operating System》(O'Reilly) 或《sed & awk》(O'Reilly)，然后再回到这里继续学习。

##### 3.2.1 什么是正则表达式？
正则表达式是一种描述文本匹配模式的语言，允许你定义一系列规则来识别符合特定条件的数据片段。除了传统的 UNIX 风格外，POSIX 标准还引入了一些新特性，例如：
- 描述特定于当前区域设置的字符序列及其等价关系。
- 无需关心底层字符集的具体实现细节即可编写跨平台兼容的表达式。

许多 UNIX 工具都内置了某种形式的正则表达式支持，包括但不限于：
- **grep/egrep/agrep** - 查找匹配给定模式的文本行。
- **sed** - 流编辑器，用于修改文本流。
- **awk** - 数据处理语言。
- **more/less** - 分页查看器。
- **vi/vim/emacs** - 文本编辑器。

鉴于正则表达式在日常工作中扮演的重要角色，花时间深入理解其工作原理绝对物有所值。从根本上讲，正则表达式由普通字符和特殊字符组成，后者又被称为元字符（metacharacter）。下表列举了 POSIX BRE 和 ERE 中常见的元字符及其含义：

| 字符 | 在 BRE/ERE 中的作用 |
| --- | --- |
| `\` | 转义下一个字符或开启/关闭后续字符的特殊意义。|
| `.` | 匹配任意单个字符（除 NUL 外）。某些实现也可能禁止匹配换行符。|
| `*` | 匹配前面的元素零次或多次。在 BRE 中，若位于表达式开头则无特殊意义。|
| `^` | 断言行首位置。BRE 仅限于表达式开始处有效，而在 ERE 中可在任何地方出现。|
| `$` | 断言行尾位置。BRE 仅限于表达式结束处有效，而在 ERE 中可在任何地方出现。|
| `[...]` | 方括号表达式，表示其中任一字符的集合。连字符可用于指定范围，反斜杠前缀表示否定整个列表。|

以上只是正则表达式复杂语法的一小部分示例。随着你对这些概念的理解加深，将会发现更多高级特性和应用场景。