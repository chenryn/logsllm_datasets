high
图8-4-10
7.再次循环，mid=1+F[6-1]-1=5。此时a[5]=47key，因此执行第16~17
行，得到high=6，k=4-1=3。
下标
012
345
01162435475962738899
low high
图8-4-12
9.再次循环，mid=6+F[3-1]-1=6。此时a[6]=59=key，因此执行第26~27
行，得到返回值为6。程序运行结束。
如果key=99，此时查找循环第一次时，mid=8与上例是相同的，第二次循环时，
mid=11，如果a[11]没有值就会使得与key的比较失败，为了避免这样的情况出现，
第9~10行的代码就起到这样的作用。
斐波那契查找算法的核心在于：
1）当key=a[mid]时，查找就成功；
2）当keya[mid]时，新范围是第m+1个到第high个，此时范围个数为F[k-2]
一1个。
F[k}-1
low
mid
high
F[k-1]-1
Y
F[k-2]-1
图 8-4-13
也就是说，如果要查找的记录在右侧，则左侧的数据都不用再判断了，不断反复
进行下去，对处于当中的大部分数据，其工作效率要高一些。所以尽管斐波那契查找
的时间复杂也为0(ogn)，但就平均性能来说，斐波那契查找要优于折半查找。可惜如
果是最坏情况，比如这里key=1，那么始终都处于左侧长半区在查找，则查找效率要
低于折半查找。
还有比较关键的一点，折半查找是进行加法与除法运算（mid=（ow+high）/2），
插值查找进行复杂的四则运算（mid=lw+（high-kow)*（key-a[ow])/（a[high]一
a[ow]），面斐波那契查找只是最简单加减法运算（mid=bw+F[k-1]-1），在海量
数据的查找过程中，这种细微的差别可能会影响最终的查找效率。
应该说，三种有序表的查找本质上是分隔点的选择不同，各有优劣，实际开发时
可根据数据的特点综合考虑再做出选择。
8.5线性索引查找
我们前面讲的几种比较高效的查找方法都是基于有序的基础之上的，但事实上，
很多数据集可能增长非常快，例如，某些微博网站或大型论坛的帖子和回复总数每天
都是成百万上千万条，如图8-5-1所示，或者一些服务器的日志信息记录也可能是海
量数据，要保证记录全部是按照当中的某个关键字有序，其时间代价是非常高昂的，
所以这种数据通常都是按先后顺序存储。
306
---
## Page 331
第8章查找
Twitter每日微博数达9干万话题多与电视相关
报递人m址发布于2010-11-1111:14适论（0）有219人间读原文级捷[量]
北京时间11月11日消息，Twitter高管罗宾斯障（RobinSloan）今日在旧金山华行的
NewTeeVee会议中透范，Twitter每日数博数量已达900o万条，其中绝大部分微博话题与电视相
关
1-S-8 ]
那么对于这样的查找表，我们如何能够快速查找到需要的数据呢？办法就是一
索引
数据结构的最终目的是提高数据的处理速度，索引是为了加快查找速度而设计的
一种数据结构。索引就是把一个关键字与它对应的记录相关联的过程，一个索引由若
干个索引项构成，每个索引项至少应包含关键字和其对应的记录在存储器中的位置等
信息。索引技术是组织大型数据库以及磁盘文件的一种重要技术。
索引按照结构可以分为线性索引、树形索引和多级索引。我们这里就只介绍线性
索引技术。所谓线性索引就是将索引项集合组织为线性结构，也称为索引表。我们重
点介绍三种线性索引：稠密索引、分块索引和倒排索引。
8.5.1稠密索引
我母亲年纪大了，记忆力不好，经常在家里找不到东西，于是她想到了一个办
法。她用一小本子记录了家里所有小东西放置的位置，比如户口本放在右手床头柜下
面抽展中，针线放在电视柜中间的抽展中，钞票放在衣柜咳，这个就不提了（同
学们坏笑）。总之，她老人家把这些小物品的放置位置都记录在了小本子上，并且每隔
一段时间还按照本子整理一遍家中的物品，用完都放回原处，这样她就几乎再没有找
不到东西。
记得有一次我申请职称时，单位一定要我的大学毕业证，我在家里找了很长时间
未果，急得要死。和老妈一说，她的神奇小本子马上发挥作用，一下子就找到了，原
来被她整理后放到了衣橱里的抽屉里。
从这件事就可以看出，家中的物品尽管是无序的，但是如果有一个小本子记录，
寻找起来也是非常容易，面这小本子就是索引。
稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项，如图8-5-2
307
---
## Page 332
大调数据结构
所示。
关键码其他数据项
下标关键码指针
5
32
0
18
5
...
26
89
·.
32
26
57
57
..
18
图8-5-2
刚才的小例子和稠密索引还是略有不同，家里的东西毕竞少，小本子再多也就几
十页，全部翻看完就几分钟时间，面稠密索引要应对的可能是成千上万的数据，因此
对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列。
索引项有序也就意味着，我们要查找关键字时，可以用到折半、插值、斐波那契
等有序查找算法，大大提高了效率。比如图8-5-2中，我要查找关键字是18的记录，
如果直接从右侧的数据表中查找，那只能顺序查找，需要查找6次才可以查到结果。
而如果是从左侧的索引表中查找，只需两次折半查找就可以得到18对应的指针，最
终查找到结果。
这显然是稠密索引优点，但是如果数据集非常大，比如上亿，那也就意味着索引
也得同样的数据集长度规模，对于内存有限的计算机来说，可能就需要反复去访问磁
盘，查找性能反面大大下降了。
8.5.2分块索引
回想一下图书馆是如何藏书的。显然它不会是顺序摆放后，给我们一个稠密索引
表去查，然后再找到书给你。图书馆的图书分类摆放是一门非常完整的科学体系，而
它最重要的一个特点就是分块。
308
---
## Page 333
第8章查找
图 8-5-3
稠密索引因为索引项与数据集的记录个数相同，所以空间代价很大。为了减少索
引项的个数，我们可以对数据集进行分块，使其分块有序，然后再对每一块建立一个
索引项，从而减少索引项的个数。
分块有序，是把数据集的记录分成了若干块，并且这些块需要满足两个条件：
■块内无序，即每一块内的记录不要求有序。当然，你如果能够让块内有序
对查找来说更理想，不过这就要付出大量时间和空间的代价，因此通常我
们不要求块内有序。
■块间有序，例如，要求第二块所有记录的关键字均要大于第一块中所有记
录的关键字，第三块的所有记录的关键字均要大于第二块的所有记录关键
字因为只有块间有序，才有可能在查找时带来效率。
对于分块有序的数据集，将每块对应一个索引项，这种索引方法叫做分块索引。
如图8-5-4所示，我们定义的分块索引的索引项结构分三个数据项：
■最大关键码，它存储每一块中的最大关键字，这样的好处就是可以使得在
它之后的下一块中的最小关键字也能比这一块最大的关键字要大；
■存储了块中的记录个数，以便于循环时使用；
■用于指向块首数据元素的指针，便于开始对这一块中记录进行遍历。
309
---
## Page 334
大据数据结构
18
o...
27
13
最大关键码块长块首
4
第二块
57
57
96
36
....
分状索引表
第三块
96
62
..
77
数指集
邮 8-5-4
在分块索引表中查找，就是分两步进行：
1.在分块索引表中查找要查关键字所在的块。由于分块索引表是块间有序的，
因此很容易利用折半、插值等算法得到结果。例如，在图8-5-4的数据集中
查找62，我们可以很快可以从左上角的索引表中由57<62<96得到62在第
三个块中
2.根据块首指针找到相应的块，并在块中顺序查找关键码。因为块中可以是无序
的，因此只能顺序查找。
应该说，分块索引的思想是很容易理解的，我们通常在整理书架时，都会考虑不
同的层板放置不同类别的图书。例如，我家里就是最上层放不太常翻阅的小说书，中
间层放经常用到的如菜谱、字典等生活和工具用书，最下层放大开本比较重的计算机
书。这就是分块的概念，并且让它们块间有序了。至于上层中《红楼梦》是应该放在
《三国演义》的左边还是右边，并不是很重要。毕竞要找小说《三国演义》，只需要对
这一层的图书用眼晴扫过一遍就能很容易查找到。
我们再来分析一下分块索引的平均查找长度。设n个记录的数据集被平均分成m
310
---
## Page 335
第8章查找
块，每个块中有t条记录，显然n=mxt，或者说m=n/t。再假设L为查找索引表的
I+1
这样分块索引查找的平均查找长度为：
222
2）
+
注意上面这个式子的推导是为了让整个分块索引查找长度依赖n和t两个变量。
从这里了我们也就得到，平均长度不仅仅取决于数据集的总记录数n，还和每一个块
的记录个数t相关。最佳的情况就是分的块数m与块中的记录数t相同，此时意味着
-（=++
+1=t+1=√n+1
可见，分块索引的效率比之顺序查找的0（m）是高了不少，不过显然它与折半查找
的0（ogn）相比还有不小的差距。因此在确定所在块的过程中，由于块间有序，所以可
以应用折半、插值等手段来提高效率。
总的来说，分块索引在兼顾了对细分块不需要有序的情况下，大大增加了整体查
找的速度，所以普遍被用于数据库表查找等技术的应用当中。
8.5.3倒排索引
我不知道大家有没有对搜索引擎好奇过，无论你查找什么样的信息，它都可以在极
短的时间内给你一些结果，如图8-5-5所示。是什么算法技术达到这样的高效查找呢？
数据结构
数海们15.300,00条进其（期时0.08秒）
图8-5-5
我们在这里介绍最简单的，也算是最基础的搜索技术一倒排索引。
我们来看样例，现在有两篇极短的英文“文章”——其实只能算是句子，我们暂
认为它是文章，编号分别是1和2。
1.Booksandfriends shoud befewbutgood（读书如交友，应求少面精。）
2.Agood book isa good friend（好书如挚友。)
假设我们忽略掉如“books”、“friends”中的复数“s”以及如“A”这样的大小写
311
---
## Page 336
大话数据结构
差异。我们可以整理出这样一张单词表，如表8-5-1所示，并将单词做了排序，也就
是表格显示了每个不同的单词分别出现在哪篇文章中，比如“good”它在两篇文章中
都有出现，而“is”只是在文章2中才有。
表8-5-1
英文单词
文章编号
2
pue
1
be
1
book
1,2
but
few
1
1
friend
1,2
good
1,2
2
should
1
有了这样一张单词表，我们要搜索文章，就非常方便了。如果你在搜索框中填写
“book”关键字。系统就先在这张单词表中有序查找“book”，找到后将它对应的文章
编号1和2的文章地址（通常在搜索引擎中就是网页的标题和链接）返回，并告诉
你，查找到两条记录，用时0.0001秒。由于单词表是有序的，查找效率很高，返回的
又只是文章的编号，所以整体速度都非常快。
如果没有这张单词表，为了能证实所有的文章中有还是没有关键字“book”，则需