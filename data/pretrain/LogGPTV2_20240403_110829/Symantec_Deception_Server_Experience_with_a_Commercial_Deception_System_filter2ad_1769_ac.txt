### ManTrap: A Comprehensive Honeypot System

#### Audit Logging
ManTrap maintains detailed audit logs of all activities within its cages. Given that any activity in a cage is inherently suspicious (as no legitimate users should be present), the system logs as much information as possible. The following activities are logged by a running ManTrap:
- All terminal input and output
- All files opened for writing
- All device accesses
- All processes that are started
- All network activity

The logs aim to provide an almost complete view of the activities inside the cage. Additionally, ManTrap allows administrators to cryptographically verify the integrity of the logs, ensuring they have not been tampered with (see "Audit Reliability" below).

#### Response Mechanisms
When ManTrap detects activity in a cage, it can alert the administrator and/or respond automatically. The administrator can configure response policies, including:
- SMTP (email) alerts
- SNMP traps (alerts to network management software)
- Integration with other commercial threat management solutions (e.g., NIDS)
- Custom responses: administrator-specified scripts or binaries to be run on specific events

These responses can be used to notify administrators when a cage is accessed, to shut down a cage once an attacker has achieved a certain level of access (e.g., gained root), and more.

#### Log Analysis
The log data collected inside a cage is used to generate various types of activity reports. These reports can be generated on-demand or on a scheduled basis and cover cage activities such as:
- File modifications
- Successful logins to the cage
- Responses triggered by the cage
- Attempted connections
- Outgoing connections
- TCP and/or UDP port activity on the cage

Additionally, the ManTrap administration console allows the administrator to monitor interactive sessions in a terminal window, either in real-time or after the session has ended. This provides a unique and realistic view of what the intruder saw and did during the attack.

### Construction Experience

#### General Technique
ManTrap is an instrumented system primarily constructed using a kernel module that intercepts system calls, providing filtering and modification. This is supported by a virtualized file system and various coordination and administrative processes. For example, if a process in a cage attempts to open `/etc/passwd` using the `open()` call, the ManTrap module intercepts this call and redirects it to open a cage-specific copy of the file instead.

#### Isolation
The primary requirement for ManTrap is that the cages be isolated from the root system and from each other. A process within a cage is not allowed to access files, directories, or devices except those explicitly exposed to it. Processes within a cage are also not allowed to interact with processes outside the cage. However, this must be achieved without causing compatibility issues for applications running inside the cage. One key feature of ManTrap is that administrators can run existing applications inside the deception environment without any modifications. While this was challenging, ManTrap generally succeeds in providing isolation while maintaining application compatibility.

#### Stealth
A key differentiator of ManTrap from other host virtualization techniques (e.g., VMware, Solaris zones) is its stealth. Processes running within the virtualized environment (the cage) should not be able to determine that they are not on the "real" system. This requires hiding all traces of monitoring, virtualization, and other instrumentation, as well as hiding activity in other cages on the same host. This must be done without causing compatibility issues for applications running inside the cages and without tipping off the attacker. This proved to be one of the most significant challenges due to the numerous and often undocumented interfaces in the operating system.

#### Audit Reliability
The reliability of the audit data is crucial for analysis and potential use as evidence. ManTrap uses a hardware crypto-token called an iButton to sign its log files periodically. If an attacker later modifies the log files, the signature validation will fail, making any tampering easily detectable. At best, an attacker could delete the logs or portions of them, but the integrity of the remaining data would still be verifiable.

#### Cage Restoration
Later versions of ManTrap include the ability to easily restore a pristine cage image. Once an attacker has compromised the honeypot and made modifications, the cage is tainted. While it may be useful to maintain the tainted state for some time, eventually, the administrator may wish to restore the system to a clean state. ManTrap added functionality to allow administrators to easily restore configurations post-installation and customization, making the restoration process as simple as clicking a button.

#### Automated Analysis
ManTrap aims to be usable by administrators with limited security and systems expertise. It provides some level of automated analysis of the data it collects, including:
- Presentation and basic aggregation of lower-level data
- Application of a basic knowledge of the security impact of common events

For example, ManTrap can reconstruct keystroke traces into a session view of the attacker's terminal for easy observation. It can also determine if a root shell has been created from a non-root shell, indicating a possible local privilege escalation exploit. While this is far from providing an "expert in a box," it does reduce the required expertise for use.

### Current Challenges

While ManTrap is considered a success, several challenges remain:
1. **Maintaining Stealth with Root Access**: Once an attacker gains root access, even emulated, it becomes difficult to maintain stealth. For example, if a root process attempts to access `/dev/kmem`, the system must either deny access (presenting a signature) or virtualize the resource (which is very difficult).
2. **High Porting Cost**: Due to the platform-specific nature of many modifications, porting ManTrap to different operating systems is almost a complete rewrite.
3. **Further Reducing Expertise Requirements**: While ManTrap makes progress in reducing the required expertise, there is still room for improvement, particularly in automated analysis of attacker intent and skill level.

### Summary and Conclusions
Our experience developing ManTrap validated the concept of building a deep instrumented system honeypot. By modifying the operating system, we were able to provide the necessary isolation, stealth, and audit functionality. We also automated enough administrative tasks to make the tool usable by administrators with limited honeypot expertise. Practical experience showed that most administrators capable of managing a Solaris system could also manage a ManTrap. However, in many environments, even that level of expertise did not exist, suggesting a need to further reduce administrative complexity.

Through numerous incidents, these honeypots have proven to be valuable complements to existing security infrastructure. They detected attacks earlier than other systems, provided high levels of data about attackers, and offered a powerful defense mechanism. Deception technologies and honeypots are important, emerging security technologies that should be a component of any security solution.