title:All Your Queries Are Belong to Us: The Power of File-Injection Attacks
on Searchable Encryption
author:Yupeng Zhang and
Jonathan Katz and
Charalampos Papamanthou
All Your Queries Are Belong to Us: The Power of 
File-Injection Attacks on Searchable Encryption
Yupeng Zhang, Jonathan Katz, and Charalampos Papamanthou, University of Maryland
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/zhang
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX All Your Queries Are Belong to Us:
The Power of File-Injection Attacks on Searchable Encryption
Yupeng Zhang∗
Jonathan Katz†
Charalampos Papamanthou∗
Abstract
The goal of searchable encryption (SE) is to enable a
client to execute searches over encrypted files stored on
an untrusted server while ensuring some measure of pri-
vacy for both the encrypted files and the search queries.
Most recent research has focused on developing efficient
SE schemes at the expense of allowing some small, well-
characterized “(information) leakage” to the server about
the files and/or the queries. The practical impact of this
leakage, however, remains unclear.
We thoroughly study ﬁle-injection attacks—in which
the server sends files to the client that the client then
encrypts and stores—on the query privacy of single-
keyword and conjunctive SE schemes. We show such at-
tacks can reveal the client’s queries in their entirety using
very few injected files, even for SE schemes having low
leakage. We also demonstrate that natural countermea-
sures for preventing file-injection attacks can be easily
circumvented. Our attacks outperform prior work signifi-
cantly in terms of their effectiveness as well as in terms of
their assumptions about the attacker’s prior knowledge.
1
Introduction
The goal of searchable encryption (SE) is to enable
a client to perform keyword searches over encrypted
files stored on an untrusted server while still guarantee-
ing some measure of privacy for both the files them-
selves as well as the client’s queries.
In principle, so-
lutions that leak no information to the server can be con-
structed based on powerful techniques such as secure
∗Department of Electrical and Computer Engineering, University of
Maryland. Research supported in part by NSF awards #1514261 and
#1526950, by a Google Faculty Research Award, and by Yahoo! Labs
through the Faculty Research Engagement Program (FREP). Email:
{zhangyp,cpap}@umd.edu.
†Department of Computer Science, University of Maryland. Re-
search supported in part by NSF awards #1223623 and #1514261.
Email: jkatz@cs.umd.edu.
two-party computation, fully-homomorphic encryption,
and/or oblivious RAM. Such systems, however, would be
prohibitively expensive and completely impractical [15].
In light of the above, researchers have focused on the
development of novel SE schemes that are much more
efficient, at the expense of allowing some information to
“leak” to the server [19, 9, 8, 11, 6, 16, 12, 20, 13, 5].
The situation is summarized, e.g., by Cash et al. [6]:
The premise of [our] work is that in order to
provide truly practical SSE solutions one needs
to accept a certain level of leakage; therefore,
the aim is to achieve an acceptable balance be-
tween leakage and performance.
The question then becomes: what sort of leakage is ac-
ceptable? Roughly speaking, and focusing on single-
keyword search for simplicity, current state-of-the-art
schemes leak mainly two things: the query pattern (i.e.,
when a query is repeated) and the ﬁle-access pattern
(namely, which files are returned in response to each
query); these are collectively called L1 leakage in [4].
The prevailing argument is that L1 leakage is inconse-
quential in practice, and so represents a reasonable sacri-
fice for obtaining an efficient SE scheme.
In truth, the ramifications of different types of leak-
age are poorly understood; indeed, characterizing the
real-world consequences of the leakage of existing SE
schemes was highlighted as an important open question
in [6]. Recently, several groups have shown that even
seemingly minor leakage can be exploited to learn sensi-
tive information, especially if the attacker has significant
prior knowledge about the client’s files or the keywords
they contain.
Islam et al. [10] (IKK12), who initiated
this line of work, showed that if the server knows (al-
most) all the contents of the client’s files, then it can de-
termine the client’s queries from L1 leakage. Cash et
al. [4] (CGPR15) gave an improved attack that works for
larger keyword universes while assuming (slightly) less
knowledge about the files of the client. They also ex-
USENIX Association  
25th USENIX Security Symposium  707
plored the effects of even greater leakage, and showed
how query-recovery attacks could serve as a springboard
for learning further information about the client’s files.
A different attack for query recovery was given by Liu
et al. [14]. The attack assumes a known distribution on
the keywords being searched by the client, and works
only after the client issues a large number of queries.
1.1 Our Contributions
In this paper, we further investigate the consequences of
leakage in SE schemes through the lens of ﬁle-injection
attacks.
In such attacks, the server sends files of its
choice to the client, who then encrypts and uploads them
as dictated by the SE scheme. This attack was introduced
by Cash et al. [4], who called it a known-document at-
tack. As argued by those authors, it would be quite easy
to carry out such attacks: for example, if a client is us-
ing an SE scheme for searching email (e.g., Pmail [2]),
with incoming emails processed automatically, then the
server can inject files by simply sending email to the
client (from a spoofed email address, if it wishes to avoid
suspicion). We stress that the server otherwise behaves
entirely in an “honest-but-curious” fashion.
We show that file-injection attacks are devastating for
query privacy: that is, a server can learn a very high frac-
tion of the keywords searched by the client, by injecting
a relatively small number of files. Compared to prior
work [10, 4], our attacks are both more effective in terms
of the fraction of queries recovered and far less demand-
ing in terms of the prior information the server knows.
Our attacks differ in that the server must inject files, but
as argued above this is easy to carry out in practice.
We consider both adaptive and non-adaptive attacks,
where adaptivity refers (in part) to whether the server in-
jects files before or after the client’s query is made. In
particular, a non-adaptive attack injects files that can be
used to break all future queries; An adaptive attack crafts
the injected files using leakage of previously-observed
queries. Our adaptive attacks are more effective, but
assume the SE scheme does not satisfy forward pri-
vacy [7, 20]. (Forward privacy means that the server can-
not tell if a newly inserted file matches previous search
queries. With the exception of [7, 20], however, all ef-
ficient SE schemes supporting updates do not have for-
ward privacy.) Our work thus highlights the importance
of forward privacy in any real-world deployment.
1.2 Organization of the paper
We begin by showing a simple, binary-search attack that
allows the server to learn 100% of the client’s queries
with no prior knowledge about the client’s files. We then
propose an easy countermeasure: limiting the number of
keywords that are indexed per file. (We show that this
idea is viable insofar as it has limited effect on the utility
of searchable encryption.) However, our attacks can be
suitably modified to defeat this countermeasure, either
using a larger number of injected files (but still no prior
knowledge about the client’s files) or based on limited
knowledge—as low as 10%—of the client’s files. Our
attacks still outperform prior work [10, 4], having a sig-
nificantly higher recovery rate and requiring a lower frac-
tion of the client’s files to be known.
We additionally investigate the effectiveness of
padding files with random keywords (suggested in [10,
4]) as another countermeasure against our attacks. We
show that the performance of our attacks degrades only
slightly when such padding is used, in contrast to prior
attacks that fail completely.
Finally, we initiate a study of the implications of leak-
age on conjunctive queries, and show how to extend
our attacks to this setting. Our attacks work against SE
schemes having “ideal” leakage, but are even more ef-
fective against the scheme of Cash et al. [6] (the most ef-
ficient SE scheme allowing conjunctive queries), which
suffers from larger leakage.
2 Background
For the purposes of this paper, only minimal background
about searchable encryption (SE) is needed. At a high
level, an SE scheme allows a client to store encrypted
versions of its files on a server, such that at a later point
in time the client can retrieve all files containing a cer-
tain keyword (or collection of keywords). We assume a
set of keywords K = {k0,k1, . . .} known to an attacker,
and for simplicity view a file as an unordered set of key-
words. (Although the order and multiplicity of the key-
words matter, and a file may contain non-keywords as
well, these details are irrelevant for our purposes.)
We assume an SE scheme in which searching for some
keyword k is done via the following process (all efficient
SE schemes work in this way): first, the client deter-
ministically computes a token t corresponding to k and
sends t to the server; using t, the server then computes
and sends back the ﬁle identiﬁers of all files containing
keyword k. (These file identifiers need not be “actual”
filenames; they can instead simply be pointers to the
appropriate encrypted files residing at the server.) The
client then downloads the appropriate files.
Because the token is generated deterministically from
the keyword, the server can tell when queries repeat and
thus learn the query pattern; the returned file identifiers
reveal the ﬁle-access pattern. Our attacks rely only on
knowledge of the file-access pattern, though we addition-
ally assume that the server can identify when a specific
file identifier corresponds to some particular file injected
708  25th USENIX Security Symposium 
USENIX Association
2
File 1:
k0 k1 k2 k3 k4 k5 k6 k7
File 2:
k0 k1 k2 k3 k4 k5 k6 k7
File 3:
k0 k1 k2 k3 k4 k5 k6 k7
0
1
0
s
e
a
r
c
h
r
e
s
u
l
t
Figure 1: An example of the binary-search attack with
|K| = 8. Each file injected by the attacker contains 4
keywords, which are shaded in the figure.
If file 2 is
returned in response to some token, but files 1 and 3 are
not, the keyword corresponding to that token is k2.
by the server. (The same assumption is made by Cash et
al. [4].) This is reasonable to assume, even if file identi-
fiers are chosen randomly by the client, for several rea-
sons: (1) the server can identify the file returned based
on its length (even if padding is used to mitigate this, it is
impractical to pad every file to the maximum file length);
(2) in SE schemes supporting updates, the server can in-
ject a file F and then identify F with the next (encrypted)
file uploaded by the client; (3) if the server can influence
the queries of the client, or even if it knows some of the
client’s queries, then the server can use that information
to identify specific injected files with particular file iden-
tifiers. We postpone further discussion to Section 8.
In this paper, we focus only on query-recovery at-
tacks where the server observes various tokens sent by
the client followed the file identifiers returned, and the
server’s goal is to determine the keywords correspond-
ing to those tokens. This violates query privacy, which
is important in its own right, and—as noted by Cash et
al. [4]—can also be leveraged to violate ﬁle privacy since
it reveals (some of) the keywords contained in (some
of) the files. Our attacks show that the leakage of SE
schemes should be analyzed carefully when SE is used
as part of a larger system.
3 Binary-Search Attack
In this section, we present a basic query-recovery at-
tack that we call the binary-search attack. This attack
does not require the server to have any knowledge about
the client’s files, and recovers all the keywords being
searched by the client with 100% accuracy.
3.1 Basic Algorithm
The basic observation is that if the server injects a file F
containing exactly half the keywords from the keyword
universe K, then by observing whether the token t sent
by the client matches that file (i.e., whether F is returned
in response to that token), the server learns one bit of
information about the keyword corresponding to t. Us-
ing a standard non-adaptive version of binary search, the
server can thus use (cid:30)log|K|(cid:29) injected files to determine
the keyword exactly. The idea is illustrated in Figure 1
for |K| = 8.
The attack is described more formally in the pseudo-
code of Figure 2. We assume for simplicity that |K| is a
power of 2, and identify K with the set {0, . . . ,|K|−1}
written in binary. The attack begins by having the server
generate a set F of log|K| files to be injected, where the
ith file contains exactly those keywords whose ith most-
significant bit is equal to 1. At some point,1 the server
learns, for each injected file, whether it is returned in re-
sponse to some token t. We let R = r1r2··· denote the
search results on the injected files, where ri = 1 if and
only if the ith file is returned in response to the token.
For this attack, the server can deduce that the keyword
corresponding to t is precisely R.
Algorithm F ← Inject Files(K)
1: for i = 1, . . . ,log |K| do
2:
Generate a file Fi that contains exactly the key-
words in K whose ith bit is 1.
3: Output F = {F1, . . . ,Flog|K|}.
Algorithm k ← Recover(R,K)
1: Return R as the keyword from universe K as-
sociated with the token.
Figure 2: The binary-search attack. R denotes the search
results for the token to be recovered on the injected files.
We highlight again that for this attack, the files are
generated non-adaptively and independent of the token t.
We note further that the same injected files can be used
to recover the keywords corresponding to any number of
tokens, i.e., once these files are injected, the server can
recover the keywords corresponding to any future tokens
sent by the client. The number of injected files needed
for this attack is quite reasonable; with a 10,000-keyword
universe, a server who sends only one email per day to
the client can inject the necessary files in just 2 weeks.
Small keyword universe. For completeness and future
reference, we note that the binary-search attack can be
optimized if the hidden keyword is known to lie in some
smaller universe of keywords, or if the server only cares
about keywords lying in some subset of the entire key-
word universe (and gives up on learning the keyword if
1This can occur if the files are injected before the token t is sent, or
if the files are injected after t is sent and the SE scheme does not satisfy
forward privacy.
USENIX Association  
25th USENIX Security Symposium  709
3
it lies outside this subset). Specifically, the server can
carry out the binary-search attack from Figure 2 based
on any subset K(cid:31) ⊂ K of the keyword universe using only
log|K(cid:31)| injected files.
3.2 Threshold Countermeasure
A prominent feature of the binary-search attack is that
the files that need to be injected for the attack each con-
tain a large number of keywords, i.e., |K|/2 keywords
per file. We observe, then, that one possible countermea-
sure to our attack is to modify the SE scheme so as to
limit the number of keywords per indexed file to some
threshold T (cid:28) |K|/2. This could be done either by sim-
ply not indexing files containing more than T keywords
(possibly caching such files at the client), or by choos-
ing at most T keywords to index from any file containing
more than T keywords.
The threshold T can be set to some reasonably small
value while not significantly impacting the utility of the
SE scheme. For example, in the Enron email dataset [1]