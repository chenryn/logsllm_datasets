software-exploitable side channels [14]. Fortunately, the class of
light-weight embedded systems considered by Aion have a signif-
icantly reduced microarchitectural attack surface in comparison
to notoriously complex x86 processors. In particular, known side-
channel attacks on MSP430-Sancus platforms are mostly reduced
to classic start-to-end timing [16], as well as more fine-grained in-
terrupt latency timing attacks [40]. Side channels can generally be
ruled out entirely by manually rewriting the application code to ad-
here to established constant-time programming best practices [14].
Alternatively, in the case of deterministic execution platforms such
as MSP430, static code balancing solutions can provide an auto-
mated solution, either by transparently generating compensation
code in the compiler backend [41] or statically analyzing execution
path timings at the level of the generated assembly code [11, 35].
Finally, for the particularly relevant problem of interrupt latency
timing side channels [40], recent work has proposed a provably
secure, hardware-level padding defense for a simplified version of
Sancus [9]. We leave integration of such architectural changes to
further strengthen Aion against side channels as future work.
Guaranteed availability. Importantly, the activation latencies
from Section 5.2 apply to A and B in our case study, even in the
presence of strong software-level attackers who are capable of
manipulating all software that is outside of the TCB. Specifically,
we consider attackers that might attempt to (i) block the CPU by
performing extensive uninterruptible computations, (ii) influence
the scheduler to disrupt the execution of (other) jobs, (iii) block
I/O resources through continuous use, or (iv) cause illegal memory
access or atomicity violations.
First, considering attack (i), a misbehaving or malicious enclave
can try and prevent progress by using the clix instruction and
potentially invoke a scheduler operation. This is limited to a fixed
number of cycles after which the scheduler will serve pending
interrupts and schedule other jobs. In Aion, clix and scheduler
operations are the only means by which an application can prevent
interruption. Importantly, clix periods cannot overlap to form
continuous uninterruptible sections.
Alternatively, in attack (ii), the attacker could try and schedule
many short sleeps to maximize scheduling effort. We consider this
attack in our evaluation and show that it has a substantial but still
deterministic impact on the available CPU cycles for applications
(cf. Section 5.2), and that the attack does not impact the baseline
guarantees. The attack can be prevented by a scheduling policy
where sleep requests below a certain threshold are not accepted, or
where a misbehaving job is terminated.
In attack scenario (iii), attackers try to continuously use an I/O
resource. This can be ruled out by implementing clix-based atomic
interactions with I/O drivers, which are followed by a scheduler
interaction. As we have illustrated in our case study, it is feasible to
program enclaved device drivers that either synchronously or asyn-
chronously serve application enclaves, where the entry functions
for applications have a bounded execution time and return within a
single clix. This prevents the attacker from continuously blocking
a resource and guarantees deterministic worst-case latencies for
the next scheduling decision. Sancus‚Äôs secure I/O functionality [30]
Session 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1368can be used to guarantee that no code other than the driver enclave
has access to the memory addresses used to control the peripheral,
excluding non-driver code to interfere with the peripheral.
Finally, considering attack (iv), Aion‚Äôs exception engine guar-
antees that all interrupts, including violations of platform policies,
are handled by the scheduler and do not trigger a platform reset.
The specifics under which jobs are scheduled and how violations
are handled are subject to the protected scheduler implementation.
Aion provides real-time guarantees based on a deterministic
worst-case latency that is followed by ùëÄ cycles of progress. By
means of specific scheduler implementations, more elaborate poli-
cies can be provided, including the ‚Äúat least ùë• % of the CPU cycles
per interval ùëá ‚Äù-guarantee from Section 2.3. For this, the scheduler
must (a) allow at most ùëÅ jobs with availability guarantees, (b) im-
plement round-robin scheduling among these ùëÅ jobs, and (c) run on
a platform where clix provides atomicity for ùëÄ cycles. Then each
of these ùëÅ tasks is guaranteed to execute at least ùëÄ CPU cycles
(within a clix) of every ùëá = (5920 + ùëÄ) + (1845 + ùëÄ) ‚àó (ùëÅ ‚àí 1)
cycles. This is under the assumptions that ùëÅ ‚àí 1 jobs are under
attacker control, all attacker jobs are placed before the victim job
in the round robin scheduling, and the attacker jobs all schedule a
timer to be woken up together with the victim. Furthermore, each
attacker job executes a maximum clix for ùëÄ cycles, which ends
in a scheduler invocation where the job schedules a timer for the
next period. Thus, the first scheduled job experiences the above
calculated worst case delay while the scheduler will only need to
perform steps 1, 4.2, and 5 from Table 3 for the remaining jobs. For
our prototype implementation with 15 allowed jobs and a clix
length of 1000, the absolute worst-case activation latency for the
last-scheduled victim job is 6920 + 2845 ‚àó 14 = 46750 cycles. This
represents the absolute worst-case where the platform developer de-
cided to provide the same guarantees to 14 attacker jobs other than
the victim job and it shows that our system can give deterministic
guarantees based on highly flexible platform configurations.
Using attestation. Applications include dependent code in their
TCB, e.g. device drivers or the scheduler, and trust these for avail-
ability. The trustworthiness of this code is to be established by
validation techniques beyond the scope of this paper. Remote at-
testation of the application enclave, together with Sancus‚Äôs secure
linking mechanism [30], give the deployer the guarantee that the
application is indeed executing on a platform with the intended
properties. For this, the scheduler and I/O drivers must be provided
as enclaves and implement scheduling and access policies in code,
the identity of which is then part of the attestation procedure. En-
claves can make use of mutual attestation and rely on enclave IDs
to identify each other and provide specific guarantees, such as the
availability of output buffers for A and B in the case study.
Our case study illustrates these features in a rather static scenario
and based on fixed enclave IDs. To enable the open system that we
describe in this paper, where protected applications can be deployed
at any time and without a platform reset, applications and driver
enclaves need to provide APIs that allow an application to, e.g.,
request a guaranteed I/O buffer, and to communicate success or
failure to the deploying stakeholder after the initial attestation. This
allows the deployer to ascertain schedulability of a deployment.
The latter approach also enables the use of I/O devices that
require more complex access policies and that cannot complete
an I/O operation atomically. For instance, a sensor might need
to be calibrated for a specific use and multiple applications may
require different calibrations. We believe that the Aion design is
flexible enough to integrate adequate access logic for such scenarios
into driver enclaves, yet our MSP430-Sancus platform, being a
very light-weight 16-bit processor, has limitations regarding the
implementation size of application and driver logic.
Summary, limitations, and future work. As a result of our joint
spatial and temporal isolation, an application‚Äôs security is no longer
impacted by faults in other applications. Specifically, vulnerabilities
in B may lead to B being compromised, and scheduling faults
caused by B may lead to the termination of B. But, these events
do not affect the security and availability of A, and vice versa.
Importantly, Aion does not impose a hierarchy of trust or criticality
on applications. We enable multiple mutually distrusting and non-
collaborative applications that operate at the same "priority" to
execute under equally strong security and availability guarantees.
We consider a hardware attacker with the ability to arbitrarily
trigger external interrupts to be out of scope for Aion. However, a
platform where the scheduler is capable of temporarily masking
these interrupts or disabling interrupts completely, would be able to
resist these attacks. We note, however, that this could compromise
the trusted time guarantees of the scheduler if a timer tick is missed.
A specific challenge of Aion comes with the use of cryptographic
operations for attestation or secure communication, which may
take many CPU cycles to complete. Sancus [30] implements these
operations in hardware for reasons of security and performance.
While Aion makes cryptographic operations interruptible, the state
of the cryptographic engine is lost upon interruption and the op-
eration needs to be restarted entirely. Therefore, these operation
complicate timing analysis and may prevent applications from mak-
ing progress if they cannot complete a cryptographic operation
within a clix. There are several ways to address these issues, e.g.
by making the crypto engine resumable, tuning the semantics of
clix to specific progress requirements, or relying on cryptographic
operations in software, which we will investigate in future work.
7 CONCLUSION
We presented Aion, a configurable security architecture that can
preserve real-time availability guarantees for embedded systems
even in the presence of a strong software attacker. This set of
guarantees is especially of interest for open systems that execute
arbitrary dynamically deployed code from multiple, mutually dis-
trusting stakeholders which all request their same fair access to
resources. Aion is the first design for modern TEE architectures
that provides a strong notion of trusted scheduling, derived from
preemption, bounded atomicity, and an enclaved scheduler. We
implemented and evaluated a prototype of Aion on a light-weight
TEE and conclude that our system can deterministically guarantee a
worst-case latency of 6920 cycles until a protected job is scheduled.
This allows platform developers to derive more complex scheduling
policies that can enable a future class of truly open IoT systems.
Session 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1369ACKNOWLEDGMENTS
This research is partially funded by the Research Fund KU Leuven,
by the Flemish Research Programme Cybersecurity, and by a gift
from Intel Corporation. Fritz Alder and Jo Van Bulck are supported
by a grant of the Research Foundation ‚Äì Flanders (FWO). Specific
funding was provided under the SAFETEE project by the Research
Fund KU Leuven.
REFERENCES
[1] Tiago Alves and Don Felton. 2004. TrustZone: Integrated hardware and software
security. ARM white paper 3, 4 (2004), 18‚Äì24.
[2] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad
Ganesh, Jia Ma, and Wenbo Shen. 2014. Hypervision across worlds: Real-time
kernel protection from the arm trustzone secure world. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications Security. 90‚Äì102.
[3] Emmanuel Baccelli, Cenk G√ºndoƒüan, Oliver Hahm, Peter Kietzmann, Martine S
Lenders, Hauke Petersen, Kaspar Schleiser, Thomas C Schmidt, and Matthias
W√§hlisch. 2018. RIOT: An open source operating system for low-end embedded
devices in the IoT. IEEE Internet of Things Journal 5, 6 (2018), 4428‚Äì4440.
[4] Emmanuel Baccelli, Oliver Hahm, Mesut G√ºnes, Matthias W√§hlisch, and
Thomas C Schmidt. 2013. RIOT OS: Towards an OS for the Internet of Things.
In 2013 IEEE conference on computer communications workshops (INFOCOM WK-
SHPS). IEEE, 79‚Äì80.
[5] Raad Bahmani, Ferdinand Brasser, Ghada Dessouky, Patrick Jauernig, Matthias
Klimmek, Ahmad-Reza Sadeghi, and Emmanuel Stapf. 2021. CURE: A Security
Architecture with CUstomizable and Resilient Enclaves. In Proceedings of the 30th
USENIX Security Symposium.
[6] Bernard Blackham, Yao Shi, Sudipta Chattopadhyay, Abhik Roychoudhury, and
Gernot Heiser. 2011. Timing analysis of a protected operating system kernel. In
2011 IEEE 32nd Real-Time Systems Symposium. IEEE, 339‚Äì348.
[7] Ferdinand Brasser, Brahim El Mahjoub, Ahmad-Reza Sadeghi, Christian Wachs-
mann, and Patrick Koeberl. 2015. TyTAN: Tiny trust anchor for tiny devices. In
Design Automation Conference (DAC 2015). IEEE, 1‚Äì6.
[8] Alan Burns and Robert Davis. 2019. Mixed criticality systems ‚Äì a review. Depart-
ment of Computer Science, University of York, Tech. Rep (2019), 1‚Äì81.
[9] Matteo Busi, Job Noorman, Jo Van Bulck, Letterio Galletta, Pierpaolo Degano,
Jan Tobias M√ºhlberg, and Frank Piessens. 2020. Provably secure isolation for
interruptible enclaved execution on small microprocessors. In 33rd IEEE Computer
Security Foundations Symposium (CSF‚Äô20).
[10] Ghada Dessouky, Shaza Zeitouni, Ahmad Ibrahim, Lucas Davi, and Ahmad-Reza
Sadeghi. 2019. CHASE: A Configurable Hardware-Assisted Security Extension
for Real-Time Systems. In 2019 IEEE/ACM International Conference on Computer-
Aided Design (ICCAD). IEEE, 1‚Äì8.
[11] Florian Dewald, Heiko Mantel, and Alexandra Weber. 2017. AVR Processors as a
Platform for Language-Based Security. In European Symposium on Research in
Computer Security (ESORICS). 427‚Äì445.
[12] Pan Dong, Alan Burns, Zhe Jiang, and Xiangke Liao. 2018. Tzdks: A new trustzone-
based dual-criticality system with balanced performance. In 2018 IEEE 24th
International Conference on Embedded and Real-Time Computing Systems and
Applications (RTCSA). IEEE, 59‚Äì64.
[13] Karim Eldefrawy, Gene Tsudik, Aur√©lien Francillon, and Daniele Perito. 2012.
SMART: Secure and minimal architecture for (establishing a dynamic) root of
trust.. In NDSS, Vol. 12. Internet Society, 1‚Äì15.
[14] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2018. A survey of mi-
croarchitectural timing attacks and countermeasures on contemporary hardware.
Journal of Cryptographic Engineering 8, 1 (2018), 1‚Äì27.
[15] Olivier Girard. 2009. openMSP430 ‚Äì a synthesizable 16-bit microcontroller core
written in Verilog. https://opencores.org/project,openmsp430.
[16] Travis Goodspeed. 2008. Practical attacks against the MSP430 BSL. In Twenty-
Fifth Chaos Communications Congress.
[17] Ronghui Gu, Zhong Shao, Hao Chen, Xiongnan (Newman) Wu, Jieung Kim,
Vilhelm Sj√∂berg, and David Costanzo. 2016. CertiKOS: An Extensible Architecture
for Building Certified Concurrent OS Kernels. In 12th USENIX Symposium on
Operating Systems Design and Implementation, OSDI 2016, Savannah, GA, USA,
November 2-4, 2016. USENIX Association, 653‚Äì669.
[18] Intel Corporation. 2020.
Intel 64 and IA-32 architectures software developer‚Äôs
manual ‚Äì Volume 3D: System programming guide, part 4. Reference no. 332831-
072US.
[19] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock,
Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael
Norrish, et al. 2009. seL4: Formal verification of an OS kernel. In Proceedings of
the ACM SIGOPS 22nd symposium on Operating systems principles. ACM, 207‚Äì220.
[20] Patrick Koeberl, Steffen Schulz, Ahmad-Reza Sadeghi, and Vijay Varadharajan.
2014. TrustLite: A security architecture for tiny embedded devices. In Proceedings
of the Ninth European Conference on Computer Systems. ACM, Article 10, 14 pages.
[21] Dayeol Lee, David Kohlbrenner, Kevin Cheang, Cameron Rasmussen, Kevin
Laeufer, Ian Fang, Akash Khosla, Chia-Che Tsai, Sanjit Seshia, Dawn Song, and
Krste Asanovic. 2018. Keystone: Open-source Secure Hardware Enclave. https:
//keystone-enclave.org/.
[22] Songran Liu, Nan Guan, Zhishan Guo, and Wang Yi. 2020. MiniTEE: A Light-
weight TrustZone-Assisted TEE for Real-Time Systems. Electronics 9, 7 (2020).
[23] Anna Lyons and Gernot Heiser. 2014. Mixed-criticality support in a high-
assurance, general-purpose microkernel. In Workshop on Mixed Criticality Systems.
9‚Äì14.
[24] Pieter Maene, Johannes G√∂tzfried, Ruan De Clercq, Tilo M√ºller, Felix Freiling,
and Ingrid Verbauwhede. 2017. Hardware-based trusted computing architectures
for isolation and attestation. IEEE Trans. Comput. 67, 3 (2017), 361‚Äì374.
[25] Ramya Jayaram Masti, Claudio Marforio, Aanjhan Ranganathan, Aur√©lien Francil-
lon, and Srdjan Capkun. 2012. Enabling trusted scheduling in embedded systems.
In Annual Computer Security Applications Conference (ACSAC).
[26] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi,
Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions
and software model for isolated execution. In Proceedings of the 2nd International
Workshop on Hardware and Architectural Support for Security and Privacy. ACM,
10:1‚Äì10:1.
[27] Anway Mukherjee, Tanmaya Mishra, Thidapat Chantem, Nathan Fisher, and
Ryan Gerdes. 2019. Optimized trusted execution for hard real-time applications
on COTS processors. In Proceedings of the 27th International Conference on Real-
Time Networks and Systems. 50‚Äì60.
[28] Job Noorman, Pieter Agten, Wilfried Daniels, Raoul Strackx, Anthony Van Her-
rewege, Christophe Huygens, Bart Preneel, Ingrid Verbauwhede, and Frank
Piessens. 2013. Sancus: Low-cost trustworthy extensible networked devices with
a zero-software trusted computing base. In 22nd USENIX Security Symposium.
USENIX Association, 479‚Äì494.
[29] Job Noorman, Jan Tobias M√ºhlberg, and Frank Piessens. 2017. Authentic exe-
cution of distributed event-driven applications with a small TCB. In STM ‚Äô17
(LNCS), Vol. 10547. Springer, Heidelberg, 55‚Äì71.
[30] J. Noorman, J. Van Bulck, J. Tobias M√ºhlberg, F. Piessens, P. Maene, B. Preneel, I.
Verbauwhede, J. G√∂tzfried, T. M√ºller, and F. Freiling. 2017. Sancus 2.0: A low-cost
security architecture for IoT devices. ACM Transactions on Privacy and Security
(TOPS) 20, 3 (2017), 7:1‚Äì7:33.
[31] Ivan De Oliveira Nunes, Karim Eldefrawy, Norrathep Rattanavipanon, Michael
Steiner, and Gene Tsudik. 2019. VRASED: A Verified Hardware/Software Co-
Design for Remote Attestation. In 28th USENIX Security Symposium (USENIX
Security 19). 1429‚Äì1446.
[32] Marco Patrignani, Pieter Agten, Raoul Strackx, Bart Jacobs, Dave Clarke, and
Frank Piessens. 2015. Secure compilation to protected module architectures. ACM
Transactions on Programming Languages and Systems (TOPLAS) 37, 2 (2015).
[33] Sandro Pinto, Tiago Gomes, Jorge Pereira, Jorge Cabral, and Adriano Tavares.
2017. IIoTEED: an enhanced, trusted execution environment for industrial IoT
edge devices. IEEE Internet Computing 21, 1 (2017), 40‚Äì47.
[34] Sandro Pinto, Jorge Pereira, Tiago Gomes, Mongkol Ekpanyapong, and Adriano
Tavares. 2016. Towards a TrustZone-assisted hypervisor for real-time embedded
systems. IEEE computer architecture letters 16, 2 (2016), 158‚Äì161.
[35] Sepideh Pouyanrad, Jan Tobias M√ºhlberg, and Wouter Joosen. 2020. SCF MSP:
static detection of side channels in MSP430 programs. In Proceedings of the 15th
International Conference on Availability, Reliability and Security (ARES). 1‚Äì10.
[36] Thomas Sewell, Felix Kam, and Gernot Heiser. 2017. High-assurance timing
analysis for a high-assurance real-time operating system. Real-Time Systems 53,
5 (2017), 812‚Äì853.
[37] Wilson Snyder. 2020. Verilator, the fastest Verilog/SystemVerilog simulator.
https://www.veripool.org/wiki/verilator.
[38] Raoul Strackx, Frank Piessens, and Bart Preneel. 2010. Efficient isolation of trusted
subsystems in embedded systems. In Security and Privacy in Communication
Networks. Springer, 344‚Äì361.
[39] Jo Van Bulck, David Oswald, Eduard Marin, Abdulla Aldoseri, Flavio D. Garcia,
and Frank Piessens. 2019. A tale of two worlds: Assessing the vulnerability
of enclave shielding runtimes. In Proceedings of the 26th ACM Conference on
Computer and Communications Security (CCS‚Äô19). ACM.
[40] Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2018. Nemesis: Studying mi-
croarchitectural timing leaks in rudimentary CPU interrupt logic. In Proceedings
of the 25th ACM Conference on Computer and Communications Security (CCS‚Äô18).
ACM.
[41] Hans Winderix, Jan Tobias M√ºhlberg, and Frank Piessens. 2021. Compiler-
Assisted Hardening of Embedded Software Against Interrupt Latency Side-
Channel Attacks. In EuroS&P ‚Äô21. IEEE, Washington, DC, USA.
Session 5A: Control System Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1370A ATOMICITY STATE MACHINE
Figure 6 shows the complete atomicity state machine with all edge