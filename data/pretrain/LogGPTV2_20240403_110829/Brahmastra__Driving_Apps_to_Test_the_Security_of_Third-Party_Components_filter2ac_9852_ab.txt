ities of an app. More importantly, they also improve
the test hit rate of such analysis. Faster analysis helps
to avoid any timeouts (R1). Dynamic node pruning can
bypass activities that require human inputs (R2). In Fig-
ure 1, Brahmastra can jump to A3 and bypass A1 that re-
quires selecting a future due date. Intent-driven naviga-
tion helps Brahmastra to make transitions where a Mon-
key fails due to unidentiﬁed GUI elements (R3). Finally,
visiting fewer activities reduces the likelihood of crashes
(R4). We quantitatively support these claims in §6.
(cid:6)(cid:23)(cid:21)(cid:16)(cid:1)
(cid:1)
(cid:23)(cid:22)(cid:4)(cid:25)(cid:16)(cid:12)(cid:27)(cid:16)(cid:1)
(cid:23)(cid:22)(cid:10)(cid:24)(cid:28)(cid:23)(cid:22)(cid:7)(cid:27)(cid:16)(cid:21)
(cid:24)(cid:28)(cid:23)(cid:22)(cid:7)
(cid:11)(cid:16)(cid:20)(cid:16)(cid:14)(cid:27)(cid:16)(cid:15)(cid:1)
(cid:26)(cid:17)(cid:23)(cid:32)(cid:2)(cid:13)(cid:23)(cid:30)(cid:27)(cid:1)
(cid:2)(cid:13)
(cid:26)(cid:17)(cid:23)(cid:32)(cid:1)
(cid:5)(cid:16)(cid:16)(cid:15)(cid:3)(cid:12)(cid:14)(cid:19)(cid:1)
(cid:26)(cid:17)(cid:23)(cid:32)(cid:1)
(cid:9)(cid:23)(cid:25)(cid:16)(cid:2)(cid:24)(cid:24)(cid:26)(cid:1)
(cid:6)(cid:23)(cid:21)(cid:16)(cid:5)(cid:25)(cid:16)(cid:16)(cid:1)
(cid:1)
(cid:23)(cid:22)(cid:4)(cid:25)(cid:16)(cid:12)(cid:27)(cid:16)(cid:1)
(cid:37)(cid:37)(cid:37)(cid:1)
(cid:2)(cid:13)(cid:23)(cid:30)(cid:27)(cid:3)(cid:23)(cid:33)(cid:1)
(cid:1)
(cid:23)(cid:22)(cid:4)(cid:25)(cid:16)(cid:12)(cid:27)(cid:16)(cid:1)
(cid:23)(cid:22)(cid:8)(cid:18)(cid:19)(cid:16)(cid:1)
(cid:23)(cid:22)(cid:8)(cid:18)(cid:19)(cid:16)
(cid:4)(cid:20)(cid:18)(cid:14)(cid:19)(cid:16)(cid:15)(cid:1)
(cid:11)(cid:17)(cid:12)(cid:25)(cid:16)(cid:2)(cid:14)(cid:28)(cid:31)(cid:18)(cid:27)(cid:34)(cid:1)
(cid:1)
(cid:23)(cid:22)(cid:4)(cid:25)(cid:16)(cid:12)(cid:27)(cid:16)(cid:1)
(cid:23)(cid:22)(cid:11)(cid:17)(cid:12)(cid:25)(cid:16)(cid:4)(cid:20)(cid:18)(cid:14)(cid:19)(cid:1)
(cid:4)
(cid:17)
(cid:26)(cid:17)(cid:12)(cid:25)(cid:16)(cid:1)
(cid:26)(cid:17)(cid:12)(cid:25)(cid:16)
(cid:23)(cid:22)(cid:5)(cid:12)(cid:14)(cid:16)(cid:13)(cid:23)(cid:23)(cid:19)(cid:1)
(cid:5)(cid:12)(cid:14)(cid:16)(cid:13)(cid:23)
(cid:11)(cid:17)(cid:12)(cid:25)(cid:16)(cid:1)
(cid:5)(cid:12)(cid:14)(cid:16)(cid:13)(cid:23)(cid:23)(cid:19)(cid:1)
(cid:12)(cid:30)(cid:27)(cid:17)(cid:23)(cid:25)(cid:18)(cid:35)(cid:16)(cid:1)
2:
call
graph
A simpliﬁed
Figure
of
ch.smalltech.battery.free that shows multiple transi-
tion paths composed of multiple activities. Boxes and
ovals represent classes and methods. Solid edges corre-
spond to synchronous calls; (red) dotted edges indicate
activity transitions; and (blue) dashed edges represent
implicit calls due to user interactions. Three different
paths starting from Home.onOptionItemSelected() reach
AboutBox.onCreate() and share the remaining part.
4 Design
Brahmastra requires as input: a test application binary;
the names of target methods to be invoked within the
context of the application; and the plug-in of a spe-
ciﬁc security analysis to run once the target method is
reached. Our system is composed of three parts:
1. Execution Planner statically analyzes the test app
binary and discovers an execution path to invoke the
target third-party method.
2. Execution Engine receives execution paths from the
Planner and launches the test app in one or multi-
ple emulators and automatically navigates through
various pages according to the execution path.
3. Runtime Analyzer is triggered when the test app in-
vokes the target method. It captures the test app’s
runtime state (e.g., page content, sensors accessed,
network trace) and runs the analysis plug-in.
4.1 Execution Planner
The job of the Execution Planner is to determine: (1) the
activities that invoke the target third-party method; and
(2) the method-level execution paths that lead to the tar-
get activities. To accomplish these tasks, we statically
analyze the app binary to construct a call graph that en-
compasses its activities and interactions that cause activ-
ity transitions.
Constructing call graph: A call graph is a graph where
vertices are methods and edges are causal relationship
between method invocation. More precisely, there exists
1024  23rd USENIX Security Symposium 
USENIX Association
1 ImageButton b = (ImageButton)
2
3 b.setOnClickListener(new OnClickListener() {
4
public void onClick(View v) {
findViewById(R.id.b1);
5
6
...
}});
Figure 3: Example of a programmatic handler registra-
tion. onClick() is bound to setOnClickListener()
an edge from method m1 to m2 if m1 invokes m2. Based
on how m2 is invoked by m1, there are three types of
edges: (1) synchronous edges, if m1 directly calls m2, (2)
asynchronous edges, if m1 invokes m2 asynchronously,
and (3) activity transition edges, if m1 starts an activity
that automatically calls m2. Figure 2 depicts a call graph
of one real app.
While synchronous edges can be identiﬁed easily by
scanning the app binary code, discovering other edges
can be difﬁcult. To ﬁnd activity transition edges, we
rely on the fact that one activity can start another ac-
tivity by generating an intent and passing it
to the
startActivity() method. We perform constant propa-
gation analysis [12] so as to track such intent creations
and detect activity transitions. We also conduct class hi-
erarchy analysis [19] to conservatively determine possi-
ble receiver types for dynamic dispatch, where the target
call sites depend on the runtime types of the receivers.
To discover asynchronous edges, we need to consider
all the different ways asynchronous methods can be in-
voked by a mobile app:
1. Programmatic handler registrations: These are call-
backs explicitly bound to methods (e.g., event han-
dler of GUI elements) within the code. Figure 3
shows an example.
2. XML-based handler registrations: These are call-
backs speciﬁed in the layout or resource XML ﬁles.
Figure 4 shows an example.
3. Lifetime methods: These are methods provided by
the underlying framework that automatically make
transitions to other methods on speciﬁc events. Ex-
amples are splash screens and message boxes that
transition to next activities after a timeout or after
user acknowledgment, respectively.
To discover the ﬁrst and third types, we use constant
propagation analysis to trace callbacks attached to var-
ious event handlers. To handle the second case, we parse
layout XML ﬁles corresponding to each activity to ﬁgure
out the binding between UI elements and callback meth-
ods.
Efﬁcient call graph computation: A call graph can be
extremely large, thus computing the entire call graph can
style="@style/ABB_Black_ShareButton" ... />
style="@style/ABB_Black_ShareButton" ... />
1 // layout/about_box_share.xml
2 onShareClick
Figure 4: Example of a XML-based handler registration
observed from ch.smalltech.battery.free. Two buttons
share the onShareClick callback. The binding between
onShareClick and setOnClickListener of each button
can be determined through layout and styles XML ﬁles.
be very expensive. For example, the app shown in Fig-
ure 1 declares 74 activities in the manifest; we ﬁnd at
least 281 callbacks over 452 registering points; and its
call graph is composed of 1,732 nodes and 17,723 edges.
To address this, we use two optimizations to compute a
partial call graph that includes target methods and the
start activity methods. First, we exclude system’s static
libraries and other third-party libraries that are not re-
lated to the target methods. Second, we search transition
paths backwards on call graph. We pinpoint call sites
of target methods while walking through bytecodes. We
then construct a partial call graph, taking into accounts
component transitions via intent and bindings between
views and listeners. Finally, starting from the call sites,
we build backward transition paths, until public compo-
nents including the main activity are reached. If failed,
partial paths collected at the last phase will be returned.
Determining target activity(s): Given the call graph
and a target method, we determine the activities that in-
voke the method as follows. From the call graph, we
can identify the activity boundaries such that all meth-
ods within the same boundary are invoked by the same
activity. Since an activity can be started only through
an activity transition edge in the call graph, any maxi-
mal connected component whose edges are either syn-
chronous or asynchronous deﬁne the boundary of an ac-
tivity. In Figure 2, bigger rectangles denote the activity
boundaries. Given the boundaries, we identify the activ-
ities that contain the target method.
Finding activity transition paths: Reaching a target ac-
tivity from the start activity may require several transi-
tions between multiple activities. For example, in Fig-
ure 2, navigating from the start activity (HomeFree) to
a target activity (ShareActivity) requires three transi-
USENIX Association  
23rd USENIX Security Symposium  1025
tions. This implies that Brahmastra requires techniques
for automatic activity transitions, which we describe in
the next subsection. Second, a target activity may be
reachable via multiple transition paths. While the short-
est path is more attractive for fast exploration, the path
may contain blocking activities and hence not executable
by Brahmastra. Therefore, Brahmastra considers all tran-
sition paths (in increasing order of their length); if exe-
cution of a short path fails, it tries a longer one.
Given the call graph G, the Planner computes a small
set P of acyclic transition paths that the Execution En-
gine need to consider. P includes a path if and only if
it terminates at a target activity without a cycle and is
not a sufﬁx of any other path in P. This ensures that P is
useful, complete (i.e., Execution Engine does not need to
consider any path not in P), and compact. For instance
Figure 5 shows one out of three paths contained in P.
HomeFree;.onCreate
---> Home;.onCreate
-#-> Home;.onOptionsItemSelected
---> Home;.showAbout
---> AboutBox;.onCreate
-#-> AboutBox;.onLikeClicked
---> ShareActivity;.onCreate
-#-> ShareActivity;.onShareClick
---> ShareActivity;.share
---> ShareActivity;.onFacebookShare
An
example
path
5:
information
for
Figure
stand
ch.smalltech.battery.free Dashed
for explicit calls or activity transition, whereas ar-
rows with a hash tag represent implicit invocations,
which are either callbacks due to user interactions or
framework-driven callbacks, such as lifecycle methods.
arrows
P can be computed by breadth-ﬁrst traversals in G,
starting from each target activity and traversing along the
reverse direction of the edges.
4.2 Execution Engine
The useful paths P produced by the Execution Planner
already give an opportunity to prune exploration: Brah-
mastra considers only paths in P (and ignore others), and
for each path, it can simply navigate through its activi-
ties from the beginning of the path (by using techniques
described later). Exploration can stop as soon as a target
method is invoked.
Rewriting apps for self-execution: One might use a
Monkey to make activity transitions along useful paths.
Since a Monkey makes such transitions by interacting
with GUI elements, this requires identifying mapping be-
tween GUI elements and transitioning activities and in-
teract with only the GUI elements that make desired tran-
sitions.
We address this limitation with a technique we develop
called self execution. At a high level, we rewrite app bi-
naries to insert code that automatically invokes the call-
backs that trigger desired activity transitions, even if their
corresponding GUI elements are not visible. Such code
is inserted into all the activities in a useful path such that
the rewritten app, after being launched in a phone or an
emulator, would automatically make a series of activity
transitions to the target activity, without any external in-
teraction with its GUI elements.
Jump start: Brahmastra goes beyond the above opti-
mization with a node pruning technique called “jump
start”. Consider a path p = (a0,a1, . . . ,at ), where at is a
target activity. Since we are interested only in the target
activity, success of Brahmastra is not affected by what
activity ai in p the execution starts from, as long as the
last activity at is successfully executed. In other words,
one can execute any sufﬁx of p without affecting the hit
rate. The jump start technique tries to execute a sufﬁx —
instead of the whole — useful path. This can improve
Brahmastra’s speed since it can skip navigating through
few activities (in the preﬁx) of a useful path. Interest-
ingly, this can also improve the hit rate of Brahmastra.
For example, if the ﬁrst activity a0 requires human in-
puts such as user credentials that an automation system
cannot provide, any effort to go beyond state a0 will fail.
Note that directly executing an activity ai,i > 0, with-
out navigating to it from the start activity a0, may fail.
This is because some activities are required to be invoked
with speciﬁc intent parameters. In such cases, Brahmas-
tra tries to jump start to the previous activity ai−1 in the
path. In other words, Brahmastra progressively tries to
execute sufﬁxes of useful paths, in increasing order of
lengths, until the jump start succeeds and the target activ-
ity at is successfully reached or all the sufﬁxes are tried.
Algorithm 1 shows the pseudocode of how execution
with jump start works. Given the set of paths, the al-
gorithm ﬁrst generates sufﬁxes of all the paths. Then it
tries to execute the sufﬁxes in increasing order of their
length. The algorithm returns true on successful execu-
tion of any sufﬁx. Note that Algorithm 1 needs to know
if a path sufﬁx has been successfully executed (line 9).
We inject lightweight logging into the app binary to de-
termine when and whether target methods are invoked at
runtime.
4.3 Runtime Analyzer
Runtime Analyzer collects various runtime states of the
test app and makes it available to custom analysis plug-
ins for scenario-speciﬁc analysis. Runtime states include
UI structure and content (in form of a DOM tree) of the
current app page, list of system calls and sensors invoked
by the current page, and network trace due to the current
page. We describe two plug-ins and analysis results in
1026  23rd USENIX Security Symposium 
USENIX Association
Algorithm 1 Directed Execution
1: INPUT: Set of useful paths P from the Planner
2: OUTPUT: Return true if execution is successful
3: S ← set of sufﬁxes of all paths in P
4: for i from 0 to ∞ do
Si ← set of paths of length i in S
5:
if Si is empty then
6:
7:
8:
9:
10:
11:
12: return false
for each path sufﬁx p in Si do
if Execute(p) = true then
return false
return true
Implementation of Brahmastra
later sections.
5