### References

1. **Oﬀensive Technologies (2017).**

2. **Castro, M., Costa, M., and Harris, T.** (2017). *Securing software by enforcing data-flow integrity*. 147–160.

3. **Chen, S., Zhang, X., Reiter, M. K., and Zhang, Y.** (2017). *Detecting privileged side-channel attacks in shielded execution with Déjà Vu*. In *ACM Symposium on Information, Computer and Communications Security*.

4. **Cheng, R., Zhang, F., Kos, J., He, W., Hynes, N., Johnson, N., Juels, A., Miller, A., and Song, D.** (2019). *Ekiden: A platform for confidentiality-preserving, trustworthy, and performant smart contracts*. In *2019 IEEE European Symposium on Security and Privacy (EuroS&P)*.

5. **Das, P., Eckey, L., Frassetto, T., Gens, D., Hostáková, K., Jauernig, P., Faust, S., and Sadeghi, A.-R.** (2019). *Fastkitten: Practical smart contracts on Bitcoin*. In *28th USENIX Security Symposium*.

6. **Dessouky, G., Gens, D., Haney, P., Persyn, G., Kanuparthi, A., Khattri, H., Fung, J. M., Sadeghi, A.-R., and Rajendran, J.** (2019). *Hardfails: Insights into software-exploitable hardware bugs*. In *Proceedings of the 28th USENIX Security Symposium*, Santa Clara, CA, USA, USENIX Sec, pp. 213–230.

7. **Domas, C.** (2017). *Sandsifter: The x86 processor fuzzer*. [Online]. Available: https://github.com/xoreaxeaxeax/sandsifter

8. **Domas, C.** (2018). *Rosenbridge: Hardware backdoors in some x86 CPUs*. [Online]. Available: https://github.com/xoreaxeaxeax/rosenbridge

9. **Esmaeilzadeh, H., Blem, E., Amant, R. S., Sankaralingam, K., and Burger, D.** (2011). *Dark silicon and the end of multicore scaling*. In *2011 38th Annual International Symposium on Computer Architecture (ISCA)*, IEEE, pp. 365–376.

10. **Felsen, S., Kiss, Á., Schneider, T., and Weinert, C.** (2019). *Secure and private function evaluation with Intel SGX*. In *CCSW 2019 - The ACM Cloud Computing Security Workshop*.

11. **Goryachy, M., and Ermolov, M.** (2018). *How to hack a turned-off computer, or running unsigned code in Intel Management Engine*. [Online]. Available: https://www.blackhat.com/docs/eu-17/materials/eu-17-Goryachy-How-To-Hack-A-Turned-Off-Computer-Or-Running-Unsigned-Code-In-Intel-Management-Engine.pdf

12. **Goryachy, M., and Ermolov, M.** (2019). *Intel VISA: Through the rabbit hole*. [Online]. Available: https://i.blackhat.com/asia-19/Thu-March-28/bh-asia-Goryachy-Ermolov-Intel-Visa-Through-the-Rabbit-Hole.pdf

13. **Götzfried, J., Eckert, M., Schinzel, S., and Müller, T.** (2017). *Cache attacks on Intel SGX*. In *European Workshop on Systems Security*.

14. **Gras, B., Razavi, K., Bos, H., and Giuffrida, C.** (2017). *Translation leak-aside buffer: Defeating cache side-channel protections with TLB attacks*.

15. **Gruss, D., Lettner, J., Schuster, F., Ohrimenko, O., Haller, I., and Costa, M.** (2017). *Strong and efficient cache side-channel protection using hardware transactional memory*. In *26th USENIX Security Symposium*.

16. **Gruss, D., Maurice, C., and Mangard, S.** (2016). *Rowhammer.js: A remote software-induced fault attack in JavaScript*. In *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment*, Springer, pp. 300–321.

17. **Götzfried, J., and Müller, T.** (2013). *Fast software encryption with SIMD*. In *Proceedings of the Sixth European Workshop on System Security*.

18. **Intel.** (2015). *Intel 64 and IA-32 architectures software developer’s manual*. [Online]. Available: http://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html

19. **Intel.** (2016). *Intel Software Guard Extensions (Intel SGX)*. [Online]. Available: https://software.intel.com/en-us/sgx

20. **Intel.** (2019). *Intel 64 and IA-32 architectures software developer’s manual, combined volumes 3A, 3B, and 3C: System programming guide*. [Online]. Available: https://www.intel.de//content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf

21. **Intel Corporation.** (2019). *Intel CSME, Intel SPS, Intel TXE, Intel DAL, and Intel AMT 2019.1 QSR advisory*. [Online]. Available: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00213.html

22. **Intel Corporation.** (2019). *Intel processors voltage settings modification advisory*. [Online]. Available: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00289.html

23. **Jang, Y., Lee, J., Lee, S., and Kim, T.** (2017). *SGX-Bomb: Locking down the processor via Rowhammer attack*. In *Proceedings of the 2nd Workshop on System Software for Trusted Execution*, ACM, p. 5.

24. **Kim, Y., Daly, R., Kim, J., Fallin, C., Lee, J. H., Lee, D., Wilkerson, C., Lai, K., and Mutlu, O.** (2014). *Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors*. In *ACM SIGARCH Computer Architecture News*, vol. 42, IEEE Press, pp. 361–372.

25. **Kocher, P., Horn, J., Fogh, A., Genkin, D., Gruss, D., Haas, W., Hamburg, M., Lipp, M., Mangard, S., Prescher, T., Schwarz, M., and Yarom, Y.** (2018). *Spectre attacks: Exploiting speculative execution*.

26. **Koppe, P., Kollenda, B., Fyrbiak, M., Kison, C., Gawlik, R., Paar, C., and Holz, T.** (2017). *Reverse engineering x86 processor microcode*. In *26th USENIX Security Symposium*, pp. 1163–1180.

27. **Lim, A. B., and Heaton, E. D.** (2011). *Platform-level error handling strategies for Intel systems*. [Online]. Available: https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/platform-level-error-strategies-paper.pdf

28. **Lipp, M., Schwarz, M., Gruss, D., Prescher, T., Haas, W., Fogh, A., Horn, J., Mangard, S., Kocher, P., Genkin, D., Yarom, Y., and Hamburg, M.** (2018). *Meltdown: Reading kernel memory from user space*.

29. **Moghimi, A., Irazoqui, G., and Eisenbarth, T.** (2017). *CacheZoom: How SGX amplifies the power of cache attacks*. Tech. rep., arXiv:1703.06986 [cs.CR], [Online]. Available: https://arxiv.org/abs/1703.06986

30. **Murdock, K., Oswald, D., Garcia, F. D., Van Bulck, J., Gruss, D., and Piessens, F.** (2020). *Plundervolt: Software-based fault injection attacks against Intel SGX*. In *Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P’20)*.

31. **National Security Agency.** (SELinux). *Security-enhanced Linux*.

32. **Pandit, N., Kalbarczyk, Z., and Iyer, R. K.** (2009). *Effectiveness of machine checks for error diagnostics*. In *2009 IEEE/IFIP International Conference on Dependable Systems & Networks*, IEEE, pp. 578–583.

33. **Papadimitriou, G., Kaliorakis, M., Chatzidimitriou, A., Magdalinos, C., and Gizopoulos, D.** (2017). *Voltage margins identification on commercial x86-64 multicore microprocessors*. In *2017 IEEE 23rd International Symposium on On-Line Testing and Robust System Design (IOLTS)*, IEEE, pp. 51–56.

34. **Portela, B., Barbosa, M., Scerri, G., Warinschi, B., Bahmani, R., Brasser, F., and Sadeghi, A.-R.** (2017). *Secure multiparty computation from SGX*. In *Financial Cryptography and Data Security*.

35. **Qiao, R., and Seaborn, M.** (2016). *A new approach for Rowhammer attacks*. In *IEEE International Symposium on Hardware Oriented Security and Trust (HOST)*, HOST.

36. **Qiu, P., Wang, D., Lyu, Y., and Qu, G.** (2019). *VoltJockey: Breaching TrustZone by software-controlled voltage manipulation over multi-core frequencies*. In *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, ACM, pp. 195–209.

37. **Qiu, P., Wang, D., Lyu, Y., and Qu, G.** (2019). *VoltJockey: Breaking SGX by software-controlled voltage-induced hardware faults*. In *Asian Hardware Oriented Security and Trust Symposium (AsianHOST)*.

38. **Ragland, D., Shih, N., and Brix, C.** (2015). *Overclocking 6th generation Intel® Core™ processors*.

39. **Rane, A., Lin, C., and Tiwari, M.** (2015). *Raccoon: Closing digital side-channels through obfuscated execution*. In *USENIX Security Symposium*.

40. **Razavi, K., Gras, B., Bosman, E., Preneel, B., Giuffrida, C., and Bos, H.** (2016). *Flip feng shui: Hammering a needle in the software stack*. In *25th USENIX Security Symposium*, USENIX Sec.

41. **Richtek.** (2018). *Dual Channel PWM Controller for IMVP8 CPU Core Power Supply*.

42. **Seaborn, M., and Dullien, T.** (2015). *Exploiting the DRAM Rowhammer bug to gain kernel privileges*. Black Hat.

43. **Semeraro, G., Magklis, G., Balasubramonian, R., Albonesi, D. H., Dwarkadas, S., and Scott, M. L.** (2002). *Energy-efficient processor design using multiple clock domains with dynamic voltage and frequency scaling*. In *Proceedings Eighth International Symposium on High Performance Computer Architecture*, IEEE, pp. 29–40.

44. **Seo, J., Lee, B., Kim, S., Shih, M.-W., Shin, I., Han, D., and Kim, T.** (2017). *SGX-Shield: Enabling address space layout randomization for SGX programs*. In *Annual Network and Distributed System Security Symposium*.

45. **Shafique, M., Garg, S., Henkel, J., and Marculescu, D.** (2014). *The EDA challenges in the dark silicon era: Temperature, reliability, and variability perspectives*. In *Proceedings of the 51st Annual Design Automation Conference*, ACM, pp. 1–6.

46. **Shih, M.-W., Lee, S., Kim, T., and Peinado, M.** (2017). *T-SGX: Eradicating controlled-channel attacks against enclave programs*. In *Annual Network and Distributed System Security Symposium*.

47. **Tang, A., Sethumadhavan, S., and Stolfo, S.** (2017). *CLKSCREW: Exposing the perils of security-oblivious energy management*. In *USENIX Security Symposium*, pp. 1057–1074.

48. **Tatar, A., Krishnan, R., Athanasopoulos, E., Giuffrida, C., Bos, H., and Razavi, K.** (2018). *Throwhammer: Rowhammer attacks over the network and defenses*. In *2018 USENIX Annual Technical Conference (USENIX ATC18)*, USENIX Association.

49. **The MITRE Corporation.** (2019). *CVE-2019-11157*. [Online]. Available: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11157

50. **Van Bulck, J., Piessens, F., and Strackx, R.** (2018). *Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution*. In *USENIX Security Symposium*.

51. **Van Bulck, J., Weichbrodt, N., Kapitza, R., Piessens, F., and Strackx, R.** (2017). *Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution*. In *26th USENIX Security Symposium*.

52. **van der Veen, V., Fratantonio, Y., Lindorfer, M., Gruss, D., Maurice, C., Vigna, G., Bos, H., Razavi, K., and Giuffrida, C.** (2016). *Drammer: Deterministic Rowhammer attacks on commodity mobile platforms*. In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*.

53. **van der Veen, V., Lindorfer, M., Fratantonio, Y., Pillai, H. P., Vigna, G., Kruegel, C., Bos, H., and Razavi, K.** (2018). *GuardION: Practical mitigation of DMA-based Rowhammer attacks on ARM*. In *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment*, Springer, pp. 92–113.

54. **van Schaik, S., Milburn, A., Österlund, S., Frigo, P., Maisuradze, G., Razavi, K., Bos, H., and Giuffrida, C.** (2019). *RIDL: Rogue in-flight data load*. In *40th IEEE Symposium on Security and Privacy*, IEEE.

55. **Xiao, Y., Zhang, X., Zhang, Y., and Teodorescu, R.** (2016). *One bit flips, one cloud flops: Cross-VM Row Hammer attacks and privilege escalation*. In *USENIX Security Symposium*, pp. 19–35.

56. **Xu, Y., Cui, W., and Peinado, M.** (2015). *Controlled-channel attacks: Deterministic side channels for untrusted operating systems*. In *IEEE Symposium on Security and Privacy*.

57. **Zeitouni, S., Gens, D., and Sadeghi, A.-R.** (2018). *It’s hammer time: How to attack (Rowhammer-based) DRAM-PUFs*. In *Proceedings of the 55th Annual Design Automation Conference*, ACM, p. 65.

### MSR OC Mailbox Interface

In Table 4, we list the known domain and command encodings for the MSR OC Mailbox interface. Not all x86 platforms are designed for overclocking, so these commands may not be available on all systems. However, we found that the voltage read/write commands (0x10/0x11) are present in all newer mobile and desktop platforms. The write command is used to modify the voltage of the domain unit and supports two modes: offset (0x0) and static (0x1), which can be selected by bit [20] of the payload.

- **Offset Mode**: Applies an offset value located in bits [31:21] to the voltage of the domain. The offset is encoded as an 11-bit signed value, allowing a theoretical offset range from -1024 mV to 1023 mV. For the Core domain (0x0), the offset is applied to the base voltage of every P-state. For example, writing the value 0x80000011f3800000 to the OC Mailbox MSR will apply an offset of -100 (0xf38) mV to every P-state.
- **Static Mode**: Sets the domain voltage to a fixed value encoded in bits [19:8] of the payload. This 11-bit unsigned value is divided by 1024 by the hardware, allowing a static voltage setting from 0 to 2V.

In the rest of this paper, only the offset mode is used to control the voltage. When we use the term "undervolting," we mean applying a negative offset via this command through the MSR OC Mailbox (0x150). It is important to note that any details related to MSRs can vary depending on the micro-architectural generation and model version of the processor.

| Domain [42:40] | Command [39:32] |
|----------------|------------------|
| 0x0 Cores      | 0x10 Read Voltage Change |
| 0x1 Core GPU   | 0x11 Write Voltage |
| 0x2 LLC/Ring   |                  |
| 0x3 System Agent |                |

**Table 4: Relevant domain and command encodings for using MSR OC Mailbox (0x150) from software.**

---

This revision aims to make the text more structured, clear, and professional. If you need further adjustments, please let me know!