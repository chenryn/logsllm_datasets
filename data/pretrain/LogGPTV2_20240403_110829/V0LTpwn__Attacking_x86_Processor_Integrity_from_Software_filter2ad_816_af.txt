Oﬀensive Technologies (2017).
[10] Castro, M., Costa, M., and Harris, T. Securing software
by enforcing data-ﬂow integrity. 147–160.
[11] Chen, S., Zhang, X., Reiter, M. K., and Zhang, Y. Detect-
ing privileged side-channel attacks in shielded execution with
Déjà Vu. In ACM Symposium on Information, Computer
and Communications Security (2017).
[12] Cheng, R., Zhang, F., Kos, J., He, W., Hynes, N., John-
son, N., Juels, A., Miller, A., and Song, D. Ekiden: A
platform for conﬁdentiality-preserving, trustworthy, and per-
formant smart contracts. In 2019 IEEE European Symposium
on Security and Privacy (EuroS&P) (2019).
[13] Das, P., Eckey, L., Frassetto, T., Gens, D., Hostáková,
K., Jauernig, P., Faust, S., and Sadeghi, A.-R. Fastkitten:
Practical smart contracts on Bitcoin.
In 28th USENIX
Security Symposium (August 2019).
[14] Dessouky, G., Gens, D., Haney, P., Persyn, G., Kanu-
parthi, A., Khattri, H., Fung, J. M., Sadeghi, A.-R., and
Rajendran, J. Hardfails: insights into software-exploitable
hardware bugs. In Proceedings of the 28th USENIX Security
Symposium. Santa Clara, CA, USA (2019), USENIX Sec,
pp. 213–230.
[15] Domas, C. Sandsifter: The x86 processor fuzzer.
//github.com/xoreaxeaxeax/sandsifter, 2017.
https:
[16] Domas, C. Rosenbridge: Hardware backdoors in some
https://github.com/xoreaxeaxeax/rosenbridge,
x86 cpus.
2018.
[17] Esmaeilzadeh, H., Blem, E., Amant, R. S., Sankar-
alingam, K., and Burger, D. Dark silicon and the end
of multicore scaling.
In 2011 38th Annual international
symposium on computer architecture (ISCA) (2011), IEEE,
pp. 365–376.
[18] Felsen, S., Kiss, Á., Schneider, T., and Weinert, C.
Secure and private function evaluation with Intel SGX. In
CCSW 2019 - The ACM Cloud Computing Security Workshop
(November 2019).
[19] Goryachy, M., and Ermolov, M. How to hack a turned-oﬀ
computer, or running unsigned code in Intel management
engine.
https://www.blackhat.com/docs/eu-17/materials/
eu- 17- Goryachy- How- To- Hack- A- Turned- Off- Computer- Or-
Running- Unsigned- Code- In- Intel- Management- Engine.pdf,
2018.
[20] Goryachy, M., and Ermolov, M.
Intel VISA: Through
the rabbit hole.
https://i.blackhat.com/asia- 19/Thu-
March-28/bh-asia-Goryachy-Ermolov-Intel-Visa-Through-
the-Rabbit-Hole.pdf, 2019.
[21] Götzfried, J., Eckert, M., Schinzel, S., and Müller,
T. Cache attacks on Intel SGX. In European Workshop on
Systems Security (2017).
[22] Gras, B., Razavi, K., Bos, H., and Giuffrida, C. Trans-
lation leak-aside buﬀer: Defeating cache side-channel protec-
tions with TLB attacks.
[23] Gruss, D., Lettner, J., Schuster, F., Ohrimenko, O.,
Haller, I., and Costa, M. Strong and eﬃcient cache side-
channel protection using hardware transactional memory. In
26th USENIX Security Symposium (2017).
[24] Gruss, D., Maurice, C., and Mangard, S. Rowhammer.js:
A remote software-induced fault attack in JavaScript.
In
International Conference on Detection of Intrusions and Mal-
ware, and Vulnerability Assessment (2016), Springer, pp. 300–
321.
[25] Götzfried, J., and Müller, T. Fast software encryption
with SIMD. In Proceedings of the Sixth European Workshop
on System Security (2013).
[26] Intel.
Intel 64 and IA-32 architectures software devel-
oper’s manual.
http://www- ssl.intel.com/content/
www/us/en/processors/architectures-software-developer-
manuals.html, 2015.
[27] Intel. Intel software guard extensions (intel SGX).
//software.intel.com/en-us/sgx, 2016.
https:
[28] Intel. Intel 64 and IA-32 architectures software developer’s
manual, combined volumes 3A, 3B, and 3C: System pro-
gramming guide. https://www.intel.de//content/dam/www/
public/us/en/documents/manuals/64-ia-32-architectures-
software-developer-vol-3b-part-2-manual.pdf, 2019.
[29] Intel Corporation. Intel CSME, intel SPS, intel TXE, intel
DAL, and intel AMT 2019.1 QSR advisory.
https://www.
intel.com/content/www/us/en/security- center/advisory/
intel-sa-00213.html, 2019.
[30] Intel Corporation. Intel processors voltage settings modi-
ﬁcation advisory.
https://www.intel.com/content/www/us/
en/security-center/advisory/intel-sa-00289.html, 2019.
SGX-Bomb:
Locking down the processor via Rowhammer attack.
In
Proceedings of the 2nd Workshop on System Software for
Trusted Execution (2017), ACM, p. 5.
[31] Jang, Y., Lee, J., Lee, S., and Kim, T.
[32] Kim, Y., Daly, R., Kim, J., Fallin, C., Lee, J. H., Lee, D.,
Wilkerson, C., Lai, K., and Mutlu, O. Flipping bits in
memory without accessing them: An experimental study of
DRAM disturbance errors. In ACM SIGARCH Computer
Architecture News (2014), vol. 42, IEEE Press, pp. 361–372.
[33] Kocher, P., Horn, J., Fogh, A., , Genkin, D., Gruss,
D., Haas, W., Hamburg, M., Lipp, M., Mangard, S.,
Spectre
Prescher, T., Schwarz, M., and Yarom, Y.
attacks: Exploiting speculative execution.
[34] Koppe, P., Kollenda, B., Fyrbiak, M., Kison, C., Gaw-
lik, R., Paar, C., and Holz, T. Reverse engineering x86
processor microcode. In 26th USENIX Security Symposium
(2017), pp. 1163–1180.
[35] Lim, A. B., and Heaton, E. D. Platform-level error han-
dling strategies for Intel systems.
https://www.intel.com/
content/dam/www/public/us/en/documents/white- papers/
platform-level-error-strategies-paper.pdf, 2011.
[36] Lipp, M., Schwarz, M., Gruss, D., Prescher, T., Haas,
W., Fogh, A., Horn, J., Mangard, S., Kocher, P., Genkin,
D., Yarom, Y., and Hamburg, M. Meltdown: Reading
kernel memory from user space.
[37] Moghimi, A.,
Irazoqui, G., and Eisenbarth, T.
CacheZoom: How SGX ampliﬁes the power of cache at-
tacks.
https://arxiv.org/abs/1703.06986.
rep., arXiv:1703.06986 [cs.CR], 2017.
Tech.
[38] Murdock, K., Oswald, D., Garcia, F. D., Van Bulck, J.,
Gruss, D., and Piessens, F. Plundervolt: Software-based
fault injection attacks against Intel SGX. In Proceedings of
the 41st IEEE Symposium on Security and Privacy (S&P’20)
(2020).
[39] National Security Agency.
(SELinux).
Security-enhanced Linux
USENIX Association
29th USENIX Security Symposium    1459
[40] Pandit, N., Kalbarczyk, Z., and Iyer, R. K. Eﬀectiveness
of machine checks for error diagnostics. In 2009 IEEE/IFIP
International Conference on Dependable Systems & Networks
(2009), IEEE, pp. 578–583.
[41] Papadimitriou, G., Kaliorakis, M., Chatzidimitriou, A.,
Magdalinos, C., and Gizopoulos, D. Voltage margins
identiﬁcation on commercial x86-64 multicore microprocessors.
In 2017 IEEE 23rd International Symposium on On-Line
Testing and Robust System Design (IOLTS) (2017), IEEE,
pp. 51–56.
[42] Portela, B., Barbosa, M., Scerri, G., Warinschi, B.,
Bahmani, R., Brasser, F., and Sadeghi, A.-R. Secure mul-
tiparty computation from SGX. In Financial Cryptography
and Data Security (April 2017).
[43] Qiao, R., and Seaborn, M. A new approach for Rowhammer
In IEEE International Symposium on Hardware
attacks.
Oriented Security and Trust (HOST) (2016), HOST.
[44] Qiu, P., Wang, D., Lyu, Y., and Qu, G. VoltJockey:
Breaching trustzone by software-controlled voltage manipula-
tion over multi-core frequencies. In Proceedings of the 2019
ACM SIGSAC Conference on Computer and Communica-
tions Security (2019), ACM, pp. 195–209.
[45] Qiu, P., Wang, D., Lyu, Y., and Qu, G. VoltJockey:
Breaking SGX by software-controlled voltage-induced hard-
ware faults. In Asian Hardware Oriented Security and Trust
Symposium (AsianHOST) (2019).
[46] Ragland, D., Shih, N., and Brix, C. Overclocking 6th
generation Intel® Core™ processors!, 2015.
[47] Rane, A., Lin, C., and Tiwari, M. Raccoon: Closing digital
In USENIX
side-channels through obfuscated execution.
Security Symposium (2015).
[48] Razavi, K., Gras, B., Bosman, E., Preneel, B., Giuffrida,
C., and Bos, H. Flip feng shui: Hammering a needle in the
software stack. In 25th USENIX Security Symposium (2016),
USENIX Sec.
[49] Richtek. Dual Channel PWM Controller for IMVP8 CPU
CorePower Supply, Aug. 2018.
[50] Seaborn, M., and Dullien, T. Exploiting the DRAM
Rowhammer bug to gain kernel privileges. Black Hat (2015).
[51] Semeraro, G., Magklis, G., Balasubramonian, R., Al-
bonesi, D. H., Dwarkadas, S., and Scott, M. L. Energy-
eﬃcient processor design using multiple clock domains with
dynamic voltage and frequency scaling. In Proceedings Eighth
International Symposium on High Performance Computer
Architecture (2002), IEEE, pp. 29–40.
[52] Seo, J., Lee, B., Kim, S., Shih, M.-W., Shin, I., Han, D.,
and Kim, T. SGX-Shield: Enabling address space layout
randomization for SGX programs. In Annual Network and
Distributed System Security Symposium (2017).
[53] Shafique, M., Garg, S., Henkel, J., and Marculescu, D.
The EDA challenges in the dark silicon era: Temperature,
reliability, and variability perspectives. In Proceedings of the
51st Annual Design Automation Conference (2014), ACM,
pp. 1–6.
[54] Shih, M.-W., Lee, S., Kim, T., and Peinado, M. T-SGX:
Eradicating controlled-channel attacks against enclave pro-
grams. In Annual Network and Distributed System Security
Symposium (2017).
[55] Tang, A.,
Sethumadhavan,
S.
CLKSCREW: exposing the perils of security-oblivious en-
ergy management. USENIX Security Symposium (2017),
1057–1074.
S.,
and Stolfo,
[56] Tatar, A., Krishnan, R., Athanasopoulos, E., Giuffrida,
C., Bos, H., and Razavi, K. Throwhammer: Rowhammer at-
tacks over the network and defenses. In 2018 USENIX Annual
Technical Conference, (USENIX ATC18) (2018), USENIX
Association.
[57] The MITRE Corporation. Cve-2019-11157.
https://
cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11157,
2019.
[58] Van Bulck, J., Piessens, F., and Strackx, R. Foreshadow:
Extracting the keys to the Intel SGX kingdom with transient
out-of-order execution. USENIX Security Symposium (2018).
[59] Van Bulck, J., Weichbrodt, N., Kapitza, R., Piessens,
F., and Strackx, R. Telling your secrets without page faults:
Stealthy page table-based attacks on enclaved execution. In
26th USENIX Security Symposium (2017).
[60] van der Veen, V., Fratantonio, Y., Lindorfer, M.,
Gruss, D., Maurice, C., Vigna, G., Bos, H., Razavi, K.,
and Giuffrida, C. Drammer: Deterministic rowhammer at-
tacks on commodity mobile platforms. In ACM SIGSAC Con-
ference on Computer and Communications Security (2016),
CCS.
[61] van der Veen, V., Lindorfer, M., Fratantonio, Y., Pil-
lai, H. P., Vigna, G., Kruegel, C., Bos, H., and Razavi, K.
GuardION: Practical mitigation of DMA-based Rowhammer
attacks on ARM. In International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment
(2018), Springer, pp. 92–113.
[62] van Schaik, S., Milburn, A., Österlund, S., Frigo, P.,
Maisuradze, G., Razavi, K., Bos, H., and Giuffrida, C.
RIDL: Rogue in-ﬂight data load. In 40th IEEE Symposium
on Security and Privacy (2019), IEEE.
[63] Xiao, Y., Zhang, X., Zhang, Y., and Teodorescu, R. One
bit ﬂips, one cloud ﬂops: Cross-VM Row Hammer attacks
and privilege escalation. In USENIX Security Symposium
(2016), pp. 19–35.
[64] Xu, Y., Cui, W., and Peinado, M. Controlled-channel
attacks: Deterministic side channels for untrusted operating
systems.
In IEEE Symposium on Security and Privacy
(2015).
[65] Zeitouni, S., Gens, D., and Sadeghi, A.-R. It’s hammer
time: how to attack (Rowhammer-based) DRAM-PUFs. In
Proceedings of the 55th Annual Design Automation Confer-
ence (2018), ACM, p. 65.
A OC Mailbox Interface
In Table 4 we list the possible domain and command
encodings that are known to us. Not all x86 platforms
are designed for overclocking, so the commands may
not be available on all systems. However, we found the
voltage read/write commands 0x10/0x11 to be present
in all newer mobile and desktop platforms. The write
command is used to modify the voltage of the domain
unit and is present in the two modes oﬀset (0x) and
static (0x1), which can be selected by bit [20] of the
payload. The oﬀset mode applies the oﬀset value located
in the bits [31:21] to the voltage of the domain. The
oﬀset is encoded as an 11 bit signed value, allowing a
theoretical oﬀset range from -1024 mV to 1023 mV. For
the domain Core (0x0), the oﬀset is applied to the base
1460    29th USENIX Security Symposium
USENIX Association
Domain [42:40]
0x0 Cores
0x1 Core GPU
0x2 LLC/Ring
0x3
System Agent
Command [39:32]
0x10 Read Voltage Change
0x11 Write Voltage
Table 4: Relevant domain and command encodings for
using MSR OC Mailbox (0x150) from software.
voltage of every P-state. As an example, writing the
value 0x80000011f3800000 to the OC Mailbox MSR,
will apply an oﬀset of -100 (0xf38) mV to every P-state.
In static mode, the domain voltage can be set to a ﬁxed
value that is encoded in the bits [19:8] of the payload.
This 11 bit unsigned value is divided by 1024 by the
hardware, allowing to set a static voltage from 0 to 2V.
In the rest of the paper, only the oﬀset mode is used to
control the voltage. When we use the term undervolting
we mean applying a negative oﬀset via this command
through the MSR OC Mailbox (0x150). We would like to
emphasize again that any details related to MSRs can in
principle depend on the micro-architectural generation
and model version of the processor.
USENIX Association
29th USENIX Security Symposium    1461