advantage, but, on the other hand, reverse engineers never play fair!
288
Tampering and Reverse Engineering on Android
In the Developer options, pick Uncrackable1 as the debugging application and activate the "Wait for Debugger"
switch.
Note: Even with ro.debuggable set to "1" in default.prop , an app won't show up in the "debug app" list unless the
android:debuggable flag is set to "true" in the Android Manifest.
Patching React Native applications
If the React Native framework has been used for developing then the main application code is located in the file
assets/index.android.bundle . This file contains the JavaScript code. Most of the time, the JavaScript code in this file
is minified. By using the tool JStillery a human readable version of the file can be retried, allowing code analysis. The
CLI version of JStillery or the local server should be preferred instead of using the online version as otherwise source
code is sent and disclosed to a 3rd party.
The following approach can be used in order to patch the JavaScript file:
1. Unpack the APK archive using apktool tool.
289
Tampering and Reverse Engineering on Android
2. Copy the content of the file assets/index.android.bundle into a temporary file.
3. Use JStillery to beautify and deobfuscate the content of the temporary file.
4. Identify where the code should be patched in the temporary file and implement the changes.
5. Put the patched code on a single line and copy it in the original assets/index.android.bundle file.
6. Repack the APK archive using apktool tool and sign it before to install it on the target device/emulator.
Dynamic Instrumentation
Method Hooking
Xposed
Let's assume you're testing an app that's stubbornly quitting on your rooted device. You decompile the app and find
the following highly suspect method:
package com.example.a.b
public static boolean c() {
int v3 = 0;
boolean v0 = false;
String[] v1 = new String[]{"/sbin/", "/system/bin/", "/system/xbin/", "/data/local/xbin/",
"/data/local/bin/", "/system/sd/xbin/", "/system/bin/failsafe/", "/data/local/"};
int v2 = v1.length;
for(int v3 = 0; v3  _ | Commands:
/_/ |_| help -> Displays the help system
. . . . object? -> Display information about 'object'
. . . . exit/quit -> Exit
. . . .
. . . . More info at https://www.frida.re/docs/home/
[*] Starting script
[USB::Android Emulator 5554::sg.vantagepoint.uncrackable1]-> [*] onClick handler modified
[*] sg.vantagepoint.a.a.a modified
[*] onClick called.
[*] Decrypted: I want to believe
The hooked function outputted the decrypted string. You extracted the secret string without having to dive too deep
into the application code and its decryption routines.
You've now covered the basics of static/dynamic analysis on Android. Of course, the only way to really learn it is
hands-on experience: build your own projects in Android Studio, observe how your code gets translated into bytecode
and native code, and try to crack our challenges.
In the remaining sections, we'll introduce a few advanced subjects, including kernel modules and dynamic execution.
294
Tampering and Reverse Engineering on Android
Customizing Android for Reverse Engineering
Working on real devices has advantages, especially for interactive, debugger-supported static/dynamic analysis. For
example, working on a real device is simply faster. Also, Running the target app on a real device is less likely to
trigger defenses. Instrumenting the live environment at strategic points gives you useful tracing functionality and the
ability to manipulate the environment, which will help you bypass any anti-tampering defenses the app might
implement.
Customizing the RAMDisk
Initramfs is a small CPIO archive stored inside the boot image. It contains a few files that are required at boot, before
the actual root file system is mounted. On Android, initramfs stays mounted indefinitely. It contains an important
configuration file, default.prop, that defines some basic system properties. Changing this file can make the Android
environment easier to reverse engineer. For our purposes, the most important settings in default.prop are
ro.debuggable and ro.secure .
$ cat /default.prop
#
# ADDITIONAL_DEFAULT_PROPERTIES
#
ro.secure=1
ro.allow.mock.location=0
ro.debuggable=1
ro.zygote=zygote32
persist.radio.snapshot_enabled=1
persist.radio.snapshot_timer=2
persist.radio.use_cc_names=true
persist.sys.usb.config=mtp
rild.libpath=/system/lib/libril-qc-qmi-1.so
camera.disable_zsl_mode=1
ro.adb.secure=1
dalvik.vm.dex2oat-Xms=64m
dalvik.vm.dex2oat-Xmx=512m
dalvik.vm.image-dex2oat-Xms=64m
dalvik.vm.image-dex2oat-Xmx=64m
ro.dalvik.vm.native.bridge=0
Setting ro.debuggable to "1" makes all running apps debuggable (i.e., the debugger thread will run in every process),
regardless of the value of the android:debuggable attribute in the Android Manifest. Setting ro.secure to "0" causes