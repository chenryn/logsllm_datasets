no time disclosed to intermediaries, i.e., storage and autho-
rization services, guaranteeing data conﬁdentiality, integrity,
and authenticity. Decryption keys are only shared with au-
thorized parties via a blockchain-based indirection, ensuring
asynchronicity, i.e., keys are established without requiring par-
ticipants to be online at the same time. In case decryption keys
are compromised, Droplet guarantees that only the user’s data
stream segment associated with the key is disclosed, and the
compromised keys cannot be used to disclose past or future
data beyond the temporal segment associated with the key.
Data partitions are signed, allowing parties without decryption
keys to verify data authenticity and integrity. Droplet enables
checking the freshness of data, and it provides data immutabil-
ity optionally via an authenticated data structure anchored in
the blockchain, such that even the data owner can no longer
modify past data. Droplet cryptographically prevents evicted
users from accessing future data. Though evicted users may
have already cached past data, they are, however, prevented
from future access. Droplet encodes user-deﬁned access per-
missions in the blockchain, eliminating trusted intermediaries
and assuring collusion-resistance and auditability. Moreover,
we employ privacy-preserving access permissions, prevent-
ing an observer from learning the sharing parties’ identities.
Droplet does not protect against denial-of-service attacks, nor
does it hide access patterns. It could be extended with ORAM
USENIX Association
29th USENIX Security Symposium    2471
Encrypted Data Access ControlModuleStoragewrite data streamEncrypted DataDataProducer(writer)Principal(reader)Data OwnerACLDB Bootstrapped Access Control State Machine(Authorization Agent) data access requestgrant/deny accesstransactions to log access control updates Access Control State Machine(Decentralized Authorization Log)ACDBtechniques to hide access patterns [64, 99]. Cryptographic
techniques alone are not sufﬁcient to prevent a malicious stor-
age provider from denial-of-service or deconstruction of data.
Hence, adequate replication strategies on multiple providers
are necessary to ensure the preservation and availability of
data. In §C, we discuss the security guarantees in more detail.
Assumptions. In Droplet, we make the following assump-
tions. We assume the storage nodes to be available. This is a
valid assumption since storage nodes can face ﬁnancial (and
potentially legal) consequences upon detection of misbehav-
ior. Droplet guarantees data conﬁdentiality even if malicious
storage nodes hand over data illegitimately, as data is end-to-
end encrypted. We assume the adversaries to be subject to the
standard cryptographic hardness and the underlying block-
chain to be secure, i.e., similar to previous work [3,6,19,105],
we assume transactions are append-only, ordered, and im-
mutable after a conﬁrmation period and the blockchain to be
highly available. We assume users store their keys securely
and that key recovery techniques are deployed (we discuss
in §9 potential recovery techniques, such as Shamir’s secret
sharing). We assume data producers to report correct data and
to perform data serialization and encryption correctly. We
assume there is a ﬁnancial agreement between the storage
provider and data owner to provide persistent storage, which
can also be facilitated through the cryptocurrency feature of
the underlying blockchain.
2.3 Architecture
As illustrated in Figure 1, our design considers four actors and
three system components: data owner is someone who owns
a set of devices (e.g., wearables, appliances, services) which
produce time-series data, i.e., data producers. In an indus-
trial setting, the data owner can be an organization that owns a
swarm of IoT devices. The generated data is stored on storage
services, and data owners can decide to selectively expose
their data to data consumers (i.e., principals) who can pro-
duce an added value from the data (e.g., fuse several streams
for prediction tasks). Data is end-to-end encrypted at the data
producer, and each principal computes the corresponding de-
cryption keys locally based on an encrypted authorization
token (i.e., embodies the access policy state) shared through
Droplet’s decentralized authorization log. Data owner, data
producer, and data consumer run Droplet’s client library,
which covers the tasks of data serialization, enc/decryption,
key management, and setting/viewing access permissions.
Moreover, end-user applications (e.g., Fitbit/Strava) interact
directly with Droplet’s client API to facilitate sharing through
Droplet. The storage node is in charge of storing encrypted
data and providing access to principals as deﬁned by the data
owner. The storage node grants or denies access requests via
Droplet, i.e., in accordance with user-deﬁned access permis-
sions. Access permissions are cryptographically bound to a
speciﬁc principal’s identity (public key). The storage node
can take various forms, such as edge, decentralized (e.g., a
node in a p2p storage service [65]), or cloud storage (e.g.,
Amazon’s S3). The storage node runs Droplet’s storage en-
gine and can additionally run Droplet’s authorization agent to
handle access requests locally. Droplet’s authorization agent
bootstraps its state from the decentralized authorization log.
As a matter of fact, anyone can run Droplet’s authorization
agent to either expose it as a service or to monitor the state
of relevant access permissions. Note that Droplet’s decen-
tralized authorization agents are stateless and cache relevant
access permissions for fast lookup, e.g., maintaining access
permissions of resources stored by the storage node.
Droplet is, in essence, a new decentralized access control
system that is materialized by coupling a new encryption-
based access control scheme and a decentralized authorization
service. In the following, we elaborate on our encryption-
based data access construction. As the backbone of our
encryption-based data access, we present the design of an
efﬁcient key-management construction. Afterward, we dis-
cuss Droplet’s decentralized authorization service.
3 Encryption for Access Control
Goals. With our crypto-enforced data access construction, we
pursue a design that fulﬁlls the following goals: (i) Flexible
sharing abstractions: support of the three common types of
sharing modalities desired for time-series data, varying based
on the role and purpose of the data consumer; (a) subscrip-
tion, where the data consumer is granted continuous access to
the data stream as it is generated, either temporarily or until
revoked, (e.g., a visualization app rendering an overview of
the user’s daily activity based on wearable data), (b) sharing
arbitrary intervals of past data (e.g., a practitioner app access-
ing and analyzing user’s health data during past pregnancy),
and (c) a combination of i and ii. (ii) Efﬁciency: computa-
tionally efﬁcient crypto primitives to adhere to the constraint
resources of IoT devices, (iii) Scalability: to cope with the
velocity and large volume of time-series data.
Gist: A key aspect of our construction is tied to the observa-
tion that time-series data streams are continuous. Hence, we
introduce time-encoded key-streams which map keys to tem-
poral segments of the data stream, such that access to the data
stream can be restricted by only sharing the corresponding
range in the keystream with a principal. Based on the access
policy, the principal gains access to the necessary decryp-
tion keys via an access token. Access tokens are encrypted
with the principal’s public key (hybrid encryption). To en-
able sharing without enumerating all the keys and expressing
stream access policies in a succinct shared state, we design
a key derivation construction that synthesizes the concepts
underlying hash trees and dual-key regression.
3.1 Encryption-based Access Control
Each data chunk of a data stream is encrypted under a random
symmetric key derived from our key derivation construction.
Keys are rotated for each chunk permitting access permissions
2472    29th USENIX Security Symposium
USENIX Association
Figure 2: Droplet’s key generation. Data Encryption Keys
(DEKs) are managed through the hash tree, allowing efﬁcient
sharing of arbitrary intervals. An access policy contains sev-
eral shared nodes as authorization tokens.
at the chunk level. This allows for ﬂexible access policies
for individual data consumers without the need for data re-
encryption or introducing redundant data. The design of our
key derivation construction in its core builds on hash trees [26]
and key regression [50] to enable expressing stream-speciﬁc
access policies and efﬁcient management of encryption keys.
Droplet supports computing a large segment of keys from a
single shared state instead of sharing individual keys.
We now give a brief background on hash trees and key re-
gression and their role in our encryption-based access control
construction. We elaborate why these two components alone
fall short in meeting our design requirements and describe
how we leverage them to create our hybrid key management
construction. We formalize the security guarantees of our key
management in A.
Binary Hash Tree (BHT). A BHT [26] is a balanced binary
tree, built top-down from a secret random seed as the root;
using two cryptographic hash functions for the left and right
child nodes, i.e., hashl() and hashr(), respectively. Initially the
hash functions are applied to the root node. This procedure
is applied recursively until the desired depth h in the tree is
reached, as depicted in Figure 2. The leaf nodes represent the
keystream {k0,k1,k2, ...,k2h−1}. We select a large h such that
the keystream is virtually inﬁnite.
We encrypt each data chunk of the data stream with a
unique key derived from the BHT. With this construction
users can efﬁciently share any arbitrary time interval of their
stream; by just sharing the inner nodes in the BHT necessary
to compute the corresponding keys. For instance, in Figure 2,
given the two highlighted inner nodes a data consumer is
granted access to two disjoint intervals t[0−3] and t[6−7], and
can compute the corresponding decryption keys. While con-
sistent with our efﬁciency and low overhead requirements,
this BHT-based construction lacks support for sharing in sub-
scription mode, where data consumers have continuous access
to data streams. Realizing this mode of sharing with BHT re-
quires maintaining and sharing a growing state per individual
data consumer.
Key Regression. Key regression [50] is a hash-chain based
construction that enables sharing a large number of keys by
Figure 3: Droplet’s hybrid key management supports sharing
of arbitrary intervals (hash tree) and subscriptions (dual-key
regression). Given the opening and end tokens (dual-key re-
gression), one computes the interval Data Encryption Keys.
only sharing a single state. Given a single hash token, one
can derive all previous keys by applying the hash function
successively, i.e., given key Kt in time t one can compute
all keys until the initial key K0, i.e., ∀i∈[0..t]Ki. However, no
future keys can be computed (forward-secrecy). This is not
always desirable, as key regression enables sharing of all keys
from the beginning until current time (all-or-none principle).
Dual-Key Regression. To overcome the all-or-none limita-
tion of key regression, we design a hash chain construction
that enables sharing with a deﬁned lower time bound, e.g.,
access to data of a particular stream from Nov’18 till revoked.
To realize this, we extend key regression with an additional
hash chain in the reverse order, to cryptographically enforce
both boundaries of the shared interval (Figure 4). In simple
key regression, hash tokens are consumed in the reverse order
of chain generation as input to a key derivation function to de-
rive the current key. Due to the pre-image resistance property
of hash functions, it is computationally hard to compute future
tokens and hence future keys. However, the reverse can be
computed efﬁciently. We leverage this property of hash chains
for deﬁning the beginning of an interval through a secondary
hash chain in the reverse order, as depicted in Figure 4. In
the dual-key regression, the Key Derivation Function (KDF)
takes a second token h(cid:48)
i from the
secondary hash chain (Figure 4). For instance, to share a data
stream from time ti to t j, the user provides the tokens h(cid:48)
i and
h j. Since it is infeasible to compute h j+1, no key posterior to
k j can be computed. Conversely, since it is infeasible to com-
pute h(cid:48)
i−1, no key prior to ki can be computed. With access
to the two hash tokens (h j, h(cid:48)
i), indicating the beginning and
end of the shared interval, one can compute all the encryption
keys within this interval. We formalize and prove the security
guarantees of dual-key regression in A.1.
3.2 Droplet’s Key Management
We now discuss how our design compounds dual-key regres-
sion and BHT via a layered encryption technique to enable
stream sharing abstractions. Dual-key regression resembles a
linear chain of keys, where for a given state, i.e., beginning
and end tokens, one can compute all the keys in between.
i) = Ki, with h(cid:48)
i: KDF(hi||h(cid:48)
USENIX Association
29th USENIX Security Symposium    2473
Binary Hash TreetimeDEK(Data Encryption Key)derived DEKKDFhash functionsshared nodes/tokenst0t3t6t7Binary Hash TreetimeDEK(Data EncKey)Dual key regressionSEK(Subscriber EncKey)Enc(DEKi)SEKit0t3t6t7t12t15derived DEKshared nodes/tokensBinary Hash TreetimeDEK(Data Encryption Key)hashl()hashr()derived DEKKDFhash functionsshared nodes/tokenst0t3t6t7Binary Hash TreetimeDEK(Data EncKey)Dual key regressionSEK(Subscriber EncKey)Enc(DEKi)SEKit0t3t6t7t12t15derived DEKshared nodes/tokensFigure 4: The dual-key regression supports time-bounded
sharing via a secondary hash chain. The gray elements depict
the standard key regression mechanism: Given current kc, one
can compute all keys up to k0. Our construction allows the
sharing of keys for an interval via a secondary hash chain.
Conceptually, we exploit the hash tree to allow arbitrary shar-
ing of intervals and the dual-key regression to support sharing
in subscription mode.
The layered encryption consists of two steps: (i) the
hash tree delivers time-encoded data encryption keys DEKi,
which we use to encrypt data generated during the time
epoch i. (ii) the dual-key regression also delivers time-
encoded subscriber encryption keys SEKi for the epoch i. We
use SEKi to encapsulate the corresponding data encryption
key: ENCSEKi(DEKi). For fast access, each encrypted data
chunk holds the encapsulated DEK. With this construction,
we can give access to data encryption keys either via the hash
tree (arbitrary intervals) or dual-key regression (subscription),
as depicted in Figure 3. To a subscriber, DEKs appear as
random encryption keys. For principals with access to past
data, DEKs are the leaf nodes of the BHT which they locally
compute based on the shared inner nodes (e.g., root nodes
of the corresponding subtrees). Note that a principal can be
granted access in both modes simultaneously, as shown in
the example of Figure 3. In this example, the data owner has
granted the principal access to the intervals t[0−3] and t[6−7],
which is realized through the hash tree. Also, the principal is
granted a subscription from t12 which is realized over dual-key
regression. We describe next how to handle long key chains
efﬁciently and in constant space.
Key Distribution. An important aspect to address in crypto-
based access control schemes is how to distribute keys efﬁ-
ciently. In Droplet, this is especially tricky for the subscription
mode, where new data chunks arrive continuously, and each
one is encrypted with a new key. We now describe our key
distribution mechanism and refer to §4 for insights on obtain-
ing the keying material over the decentralized authorization
service. When a new data consumer is added, an authoriza-
tion token encapsulating the deﬁned access policies is issued
which contains either: (i) the state to compute decryption keys
for past data intervals (i.e., inner nodes of the hash tree) or
(ii) in case of sharing in the subscription mode the hash token
for the beginning of the interval h(cid:48)
i (i.e., dual-key regression).
For the subscription mode the challenge is to give the active