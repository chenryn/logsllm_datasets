minimum size of a cookie that the child willbe content with; and each cookie j has a size sj. If sj 
Assume you are an awesome parent and want to give your children some cookies. But, you
题目
455. Assign Cookies
You have 3 cookies and their sizes are big enough to gratify all of the
Output: 2
Input: [1,2], [1,2,3]
You need to output 2.
You need to output 1.
And even though you have 2 cookies, since their size is both 1, you could only
Explanation: You have 3 children and 2 cookies. The greed factors of 3
output: 1
Input: [1,2,3], [1,1]
children,
children are 1, 2.
children are l, 2, 3.
return ret
ret := 0 
 ret += m[0-c-d]
---
## Page 533
题目
456. 132 Pattern
代码
解题思路
注意：你可以假设胃口值为正。
可能满足越多数量的孩子，并输出这个最大数值。
个尺寸 sj。如果 sj>= gi，
个孩子i，都有一个胃口值gi，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干j，都有一
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每
题目大意
·这是一道典型的简单贪心题。贪心题一般都伴随着排序。将 g[］和s[］ 分别排序。按照最难满
·假设你想给小朋友们饼干，每个小朋友最多能够给一块饼干。每个小朋友都有一个"贪心指数"，称
func findcontentchildren(g []int,s []int) int {
import "sort"
package leetcode
 return res
sort.Ints(g)
足的小朋友开始给饼干，依次往下满足，最终能满足的小朋友数就是最终解。
for gi = g[gi] {
 si++
gi++
si++
res++
Y
 我们可以将这个饼干j分配给孩子i，这个孩子会得到满足。你的目标是尽
，一个小朋友最多只能拥有一块饼干。
---
## Page 534
代码
解题思路
意：n的值小于15000。
= O; i-- {
num3, stack := math.MinInt64, []int{}
"math"
 return false
if nums[i] stack[len(stack)-1] {
return false
 if len(stack) == 0 Il (len(stack) > 0 && nums[i] >
} else if nums[i] = O; index--
index := len(stack) - 1
if nums[stack[index]]  1 is a backward movement. All movements in a cycle must follow a
output: false 
Input: [-2,1,-1,-2,-2]
the cycle's length is 1. By definition the cycle's length must be greater than
Explanation: The movement from index 1 -> 1 -> 1 ..
Output: false
Input: [-1,2]
is3.
 ,       -  x      
Output: true
Input: [2,-1,1,2,2]
3. 1 ≤nums.length ≤5000 
 is not a cycle, because
---
## Page 537
代码
解题思路
进阶：
提示：
和向后的运动。
外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，
确定 nums 中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度>1。此
下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。
引。相反，如果是负数(-k)，则向后移动k个索引。因为数组是环形的，所以可以假设最后一个元素的
给定一个含有正整数和负整数的环形数组 nums。如果某个索引中的数k为正数，则向前移动k个索
题目大意
·给出一个循环数组，
·你能写出时间时间复杂度为 O(n)和额外空间复杂度为 O(1)的算法吗？
func circularArrayLoop(nums []int) bool {
package leetcode
●-1000≤nums[i]≤1000
1 ≤ nums.length ≤ 5000
 nums[i] ≠ 0 
for i := O; i 〇就会是 0，提前退出找循
乘积必然是负数)，如果没有找到循环，可以将当前已经走过的路径上的 num[ 值都置为 0，标记
向的，这个简单，用 num[i]＊num[j]>〇就可以判断出是同向的(如果是反向的，那么两者的
是单元素的循环，所以在快慢指针中加入这个判断条件。还有一个判断条件是循环的方向必须是同
遇到循环就可以优先考虑用快慢指针的方法判断循环，这一题对循环增加了一个条件，循环不能只
方向的。
if nums[i] == O { 
 return false
for nums[fast]*nums[i] > O & nums[getNextIndex(nums, fast)]*nums[i] > 0 {
slow, fast, val := i, getNextIndex(nums, i),0 
if slow == fast { 
continue
 slow/fast pointer
 // check for loop with only one element
数组的数字代表了前进和后退的步数，
+代表往右(前进)，－代表往左(后退)。
一个循环中不能同时包括向前的运动
---
## Page 538
Example:
Note: 0 ≤×,  0 {
slow, val = i, nums[i] 
// loop not found, set all element along the way to 0
slow = next 
nums[slow] = 0 
next := getNextIndex(nums, slow)
fast = getNextIndex(nums, getNextIndex(nums, fast))
slow = getNextIndex(nums, 
return true
if slow == getNextIndex(nums, slow) {
 break 
slow)
---
## Page 539
Example:
Determine the perimeter of the island.
One cellis a square with side length 1. The grid is rectangular, width and height don't exceed 100.
by water, and there is exactly one island (i.e., one or more connected land cells).
Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded
You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 
题目
463. Island Perimeter
代码
解题思路
O ≤x, y= len(grid[o]] ll grid[i][j+1] == 0 {
if j-1 = len(grid) ll grid[i+1][j] == 0 {
ifi-1 rand49（）--> rand40(） --> rand10():
●给出 rand7（）要求实现 rand10（）。
●你能否尽量少调用 rand70)？
●rand7 已定义。
随机整数。不要使用系统的 Math.random() 方法。
 2. Could you minimize the number of calls to rand7() ?
1. What is the expected value for the number of calls to rand7O function?
rand7（）等概率地产生1，2，3，4，5，6，7。要想得到rand10（）即等概率的生成1-10。解
rand7()调用次数的 期望值是多少？
：传入参数:n 表示 rand10 的调用次数。
式：（rand6(）－ 1）*6+（rand6（）-1)，最后生成了rand13()；
生成 rand36(），然后变成以 26 为界限，因为 26 是13 的倍数。生成rand36(）的方
－1）*7+（rand7（）－1），最后生成了rand9（）；用rand6（）生成 rand13(），可以先
+（rand3(）－1），最后生成了rand11(）；用rand7(）生成rand9(），可以先生成
22是 11的倍数。生成rand27(）的方式：3*3 *（rand3(）－1）+3*（rand3(）－ 1)
这道题可以推广到生成任意数的随机数问题。用 randN(）实现 randM(），M>N。步骤如下:
rand49(），然后变成以 45为界限，因为 45 是9的倍数。生成rand49（）的方式：（rand7()
都过滤掉，这样就得到了rand40（），在对10取余即可。
rand10（）了。所以可以从rand7(）先构造出rand49（），再把rand49（）中大于等于 40的
题思路是先构造一个 randNC），这个 N 必须是 10 的整数倍，然后 randN % 10 就可以得到
1.
6．把步骤 5 的结果 mod 10 再加 1，就会等概率的随机生成[1,10]
2
1. rand7() 等概率地产生 1,2,3,4,5,6,7. 
用 randN(）先实现 randx(），其中×≥ M，×是 M 的整数倍。如这题中的 49 >10;
如果步骤 4 的结果大于等于 40，那么就重复步骤 4，直到产生的数小于 40
（rand7（）－ 1）*7 +（rand7(）－ 1）等概率地产生[0,48] 这 49 个数字
（rand7(） － 1） *7 等概率地产生 0,7,14,21,28,35,42 
rand7() － 1 等概率地产生[0,6].
---
## Page 543
Example 1: 
Note:
n 1s. Each 0 and 1 can be used at most once. 
is an array with strings consisting of only Os and 1s.
aun 'puey lauo aue uo anadsau st u pue so w jo soeuiwop e ane no asoddns 'mou lo 
we always want to pursue.
In the computer world, use restricted resource you have to generate maximum benefit is what 
题目
474. Ones and Zeroes
代码
 2. The size of given string array won't exceed 600.
1. The given numbers of 0s and 1s willboth not exceed 100
func randi01(） int {
func rand7() int {
func randio() int {
import "math/rand"
package leetcode
rand40 := 40 
 return rand.Intn(7)
return rand40%10 + 1
for rand40 >= 40 { 
return rand10%10 + 
for rand10 >= 10 { 
rand10 := 10 
rand40 = (rand7()-1)*7 + rand7() - 1 
rand10 = (rand7() - 1) + rand7()
---