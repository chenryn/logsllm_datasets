i
F
&
h
t
l
a
e
H
y
t
i
v
i
t
c
u
d
o
r
P
l
a
c
o
L
&
l
e
v
a
r
T
t
n
e
m
n
i
a
t
r
e
t
n
E
High
Medium
Low
l
a
i
c
o
S
r
e
h
t
O
e
c
n
a
n
i
F
n
o
i
t
a
c
i
n
u
m
m
o
C
s
e
l
c
i
h
e
V
&
o
t
u
A
y
h
p
a
r
g
o
t
o
h
P
k
n
i
r
D
&
d
o
o
F
n
o
i
t
a
c
u
d
E
g
n
i
p
p
o
h
S
l
a
c
i
d
e
M
n
o
i
t
a
g
i
v
a
N
&
o
i
d
u
A
&
c
i
s
u
M
s
p
a
M
Category
Figure 7: Presence of application-layer security in differ-
ent categories of applications, averaged over BLE reads and
writes, and broken down by conﬁdence level. Only unique
packages have been taken into consideration. APKs that do
not currently have a presence on Google Play have been ex-
cluded, as their category cannot be identiﬁed.
DFU mode, which does not require the ﬁrmware to be signed.
To exploit this, we developed an APK that, in accordance with
the attacks described in Section 3.1, connects to the device,
sends commands to place it in DFU mode, and then writes a
new modiﬁed ﬁrmware to the device without user intervention.
The updated ﬁrmware in this case was a simple, innocuous
modiﬁcation of the original ﬁrmware. However, given that
the device can be conﬁgured to receive notiﬁcations from
other applications, a malicious ﬁrmware could be developed
in such a way that, for example, all notiﬁcations (including
second-factor authentication SMS messages or end-to-end
encrypted messages) are routed to the malicious application
that installed the ﬁrmware.
This attack was possible because the BLE peripheral did
not verify the ﬁrmware (e.g., via digital signatures) nor the
source application (via application-layer security). We have
informed the application developer of the issue (02 Nov 2018),
but have received no response as of the date of submission of
this manuscript (18 May 2019).
While our attack was crafted for a speciﬁc device, it does
demonstrate that attacks against these types of devices are rel-
atively easy. An attacker could easily embed several ﬁrmware
images within a single mobile application, to target a range
of vulnerable devices.
USENIX Association
28th USENIX Security Symposium    13
4.7 Limitations
In this section, we outline some limitations, either in our script
or due to the inherent nature of our experiments, that may have
impacted our results.
4.7.1 Unhandled Data Transfer Mechanisms
As mentioned in Section 4.4, BLECryptracer does not analyze
data that is written out to ﬁle (including shared preferences),
or communicated out to a different application, because it is
not straightforward (and many times, not possible) to deter-
mine how data will be handled once it has been transferred out
of the application under analysis. It is also possible that an ap-
plication obtains the data to be written to a BLE device from,
or forwards the data read from a BLE device to, another entity,
such as a remote server. That is, the Android application could
merely act as a “shuttle” for the data, which means that an
analysis of the APK would not show evidence of usage of
cryptography libraries. However, the transfer of data to/from
a remote server does not in itself indicate cryptographically-
processed data, as plain-text values can also be transmitted in
the same manner. We therefore do not analyze instances of
data transfers to external entities.
BLECryptracer also does not handle data transfers between
a source and sink when only one of them is processed within
an Looper function or when the data is transmitted via mes-
sages. However, when we logged instances of where such
functions were called during a trace, we found that of the
APKs that utilized such data transfer mechanisms, a large
percentage were identiﬁed as having cryptographic protection
via other data ﬂows. In fact, of the 8,834 APKs where cryp-
tography was not identiﬁed with BLE writes, only 501 APKs
interacted with Looper or Messenger, and an even smaller
percentage of APKs were affected for BLE reads.
4.7.2 Conditional Statements with Backtracing
When backtracing a register, BLECryptracer stops when it
encounters a constant value assignment. However, it is pos-
sible that this value assignment occurs within one branch of
a conditional jump, which means that another possible value
could be contained within another branch further up the in-
struction list. To identify this, the script would have to ﬁrst
trace forward within the instruction list, identify all possible
conditional jumps, and then trace back from the register of
interest for all branches. This would need to be performed
for every method that is analyzed and could result in a much
longer processing time per APK ﬁle, as well as potentially
unnecessary overheads.
5 Related Work
User privacy has received particular attention in the BLE re-
search community because several widely-used BLE devices,
such as ﬁtness trackers and continuous glucose monitors, are
intended to always be on the user’s person, thereby potentially
leaking information about the user’s whereabouts at all times.
Some of the research has focused on the threats to privacy
based on user location tracking [15,19], while others explored
the possibility of obtaining personal user data from ﬁtness
applications or devices [14, 28].
While our research is concerned with data access and user
privacy, we focus more on the impact on privacy and security
due to how the BLE standard has been implemented in mobile
device architectures, as well as how it is applied by applica-
tion developers in general, rather than due to individual BLE
ﬁrmware design.
The work that is most closely related to ours is the re-
search by Naveed, et al., which explored the implications of
shared communication channels on Android devices [31]. In
their paper, the authors discussed the issue of Classic Blue-
tooth and NFC channels being shared by multiple applications
on the same device. They then demonstrated unauthorized
data access attacks against (Classic) Bluetooth-enabled med-
ical devices. The authors also performed an analysis of 68
Bluetooth-enabled applications that handled private user data,
and concluded that the majority of them offered no protection
against this attack. Finally, they proposed an operating-system
level control for mitigating the attack.
Our work speciﬁcally targets pairing-protected character-
istics on BLE devices, because BLE appears to slowly be
replacing Classic Bluetooth in the personal health and home
security domains. We demonstrate that the BLE data format
and access mechanisms enable even easier attacks than in the
case of Classic Bluetooth. Further, we identify the impact that
the new Android permissions model (introduced in Android
v6) has had on the user experience and on malicious appli-
cations’ capabilities. We also perform a much larger-scale
analysis over 18,900+ Android applications, to determine how
prevalent application-layer security is among BLE-enabled
applications.
6 Conclusions
In this paper, we analyze the risks posed to data on Bluetooth
Low Energy devices from co-located Android applications.
We show the conditions under which an unauthorized An-
droid application would be able to access potentially sensi-
tive, pairing-protected data from a BLE peripheral, once a
co-located authorized application has paired and bonded with
a BLE peripheral, without the user being aware of the access.
We also show that, in some cases, an unauthorized application
may be able to access such protected data with fewer permis-
sions required of it than would be required of an authorized
application. We then discuss mitigation strategies in terms of
the different stakeholders in the BLE ecosystem.
We present BLECryptracer, an analysis tool for determin-
ing the presence of application-layer security with BLE data.
14    28th USENIX Security Symposium
USENIX Association
We evaluate it against the taint-analysis tool Amandroid, and
present the results from executing BLECryptracer against
18,929 BLE-enabled Android APKs. Our results suggest that
over 45% of all applications, and about 70% of “Medical” ap-
plications, do not implement cryptography-based application-
layer security for BLE data. We also found, among the ap-
plications that do use cryptographically processed BLE data,
several instances of cryptography misuse, such as the use of
insecure cipher modes and hard-coded key values. We believe
that, if this situation does not change, then as more and more
sensitive use cases are proposed for BLE, the amount of pri-
vate or critical data that may be vulnerable to unauthorized
access can only increase. We hope that our work increases
awareness of this issue and prompts changes by application
developers and operating system vendors, to lead to improved
protection for BLE data.
7 Availability
The code for our BLECryptracer tool is available at
https://github.com/projectbtle/BLECryptracer
This repository also contains the SHA256 hashes of the APKs
in our dataset, and the source/sink ﬁles used for the Aman-
droid analysis. In addition, it contains source code for the
benchmarking applications, as well as a comprehensive break-
down of the results per DroidBench category.
8 Acknowledgements
This research has been partially sponsored by the Engineering
and Physical Sciences Research Council (EPSRC) and the
UK government as part of the Centre for Doctoral Training
in Cyber Security at Royal Holloway, University of London
(EP/P009301/1).
References
[1] ALLIX, K., BISSYANDÉ, T. F., KLEIN, J., AND
LE TRAON, Y. Androzoo: Collecting millions of An-
droid apps for the research community. In Proceedings
of the 13th International Conference on Mining Soft-
ware Repositories (2016), ACM, pp. 468–471.
[2] ANDROID. Distribution dashboard. [Online]. Avail-
https://developer.android.com/about/
able:
dashboards/. [Accessed: 06 Aug 2018].
[4] ANDROID. Security tips, June 2018. [Online]. Avail-
able: https://developer.android.com/training/
articles/security-tips. [Accessed: 18 July 2018].
[5] ANDROID.
Security updates and resources, 2018.
https://source.android.
[Online]. Available:
com/security/overview/updates-resources#
severity. [Accessed: 18 May 2019].
[6] ARM LTD.
Firmware Over the Air, 2016.
[On-
line]. Available: https://docs.mbed.com/docs/
ble-intros/en/master/Advanced/FOTA/.
[Ac-
cessed: 21 July 2018].
[7] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E.,
BARTEL, A., KLEIN, J., LE TRAON, Y., OCTEAU, D.,
AND MCDANIEL, P. Flowdroid: Precise context, ﬂow,
ﬁeld, object-sensitive and lifecycle-aware taint analysis
for Android apps. Acm Sigplan Notices 49, 6 (2014),
259–269.
[8] BISIO, I., SCIARRONE, A., AND ZAPPATORE, S. A new
asset tracking architecture integrating RFID, Bluetooth
Low Energy tags and ad hoc smartphone applications.
Pervasive and Mobile Computing 31 (2016), 79–93.
[9] BLUETOOTH SPECIAL INTEREST GROUP. Heart Rate
Proﬁle: Bluetooth proﬁle speciﬁcation v1.0, 07 2011.
[10] BLUETOOTH SPECIAL INTEREST GROUP. Continuous