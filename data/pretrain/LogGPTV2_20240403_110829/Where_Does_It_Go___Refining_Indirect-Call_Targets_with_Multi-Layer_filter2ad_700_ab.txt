in line 24 can only be copy_no_check().
char buf[MAX_LEN];
...
(*b.a.handler)(buf, user_input);
(*c.a.handler)(buf, user_input);
...
a field (handler) of a function-pointer type, fptr_t, while both B
and C have an instance of A. The code provides two string copy
functions: copy_with_check() takes two char * arguments and per-
forms the boundary check before copying a string; copy_no_check()
is identical to copy_with_check() except that it does not do any
boundary check. The code defines two global variables, b of type
B and c of type C, and initializes these two variables accordingly with
copy_with_check() and copy_no_check(). Function handle_input()
processes the untrusted user_input, which could be of arbitrary
length and contain malicious content. handle_input() first creates
a stack buffer buf with the fixed size MAX_LEN and then retrieves
function pointers from variables b and c, and uses them to copy
user_input to the stack buffer buf, respectively. Next, We use this
example to show how the existing FLTA and our MLTA identify
the different numbers of icall targets.
2.2 Existing Approaches and Limitations
Existing FLTA relies on type-based matching to infer the possible
target(s) for an icall. Specifically, FLTA (1) identifies the function-
pointer type in an icall (2) searches the whole program to find all
address-taken functions of the same type. In the example of Figure 1,
the icall in line 23 uses function pointer b.a.handler which takes
type fptr_t. As both copy_with_check() and copy_no_check() have
the matched type, and their addresses are taken for variable initial-
ization (line 15, 18), FLTA will label both of them as valid targets.
Similarly, FLTA will assign both functions to the icall in line 24.
However, with manual checking, we can tell that the icall in line
23 can only target function copy_with_check(), while the icall in
line 24 can only target function copy_no_check(). Thus, FLTA in-
troduces false positives when identifying icall targets.
Triggering false alarms. The inaccuracy of FLTA will cause false
alarms when we use static analysis to detect bugs. Let us consider
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1869Figure 2: Overview of TypeDive. It takes the program LLVM bitcode as input and outputs the targets for each icall. TypeDive takes two phases to produce
the icall targets. The first phase inspects the address-taken instructions to build the type-function map, analyzes all value store and casting instructions to
collect the relationship between types, and checks each type to identify escaped ones. The second phase uses the built maps to resolve the targets for each icall.
a static analysis for identifying buffer overflows. From the example,
the analysis first detects a buffer, buf, in handle_input(). Then
it proceeds to check whether the memory access to this buffer
is within its boundary. It follows the control flow and reaches
the icall in line 23. FLTA tells that both copy_with_check() and
copy_no_check() could be the targets. Therefore, the analysis in-
spects both functions and will report a buffer overflow in line 11 due
to the missing of a boundary check. However, this is a false alarm be-
cause the icall in line 23 will never reach function copy_no_check().
Crippling CFI protection. The inaccuracy of FLTA will also
bring security issues to CFI protection. CFI aims to prevent control-
flow hijacking attacks [1], where attackers maliciously change some
memory variables like function pointers to divert the control flow
for their bidding. CFI makes sure that each indirect control-flow
transfer (i.e., indirect call/jump and return) only goes to the prede-
fined valid target(s). Therefore, an accurate indirect-call analysis
is required for strong protection. In line 233 of Figure 1, attackers
may have corrupted the function pointer, b.a.handler, to divert
the control flow. With FLTA, the type analysis, as employed in
recent CFI mechanisms [36, 46, 49], will allow both functions. Such
approximation weakens the protection as attackers can divert the
control flow to copy_no_check() to launch attacks.
FLTA fails to identify the accurate icall targets in the simple code
of Figure 1. In real-world programs with millions of lines of code,
such inaccuracy will lead to significant false positives, rendering
the analysis results less meaningful. Therefore, it is necessary to
develop a new approach to effectively refine icall targets.
2.3 Our Approach: Multi-Layer Type Analysis
The example in Figure 1 shows that FLTA uses only one-layer type
information (i.e., the function pointer type) to find icall targets,
without considering more type layers. Such observation motivates
us to propose a new approach—multi-layer type analysis (MLTA).
The key insight of MLTA is that the target(s) of an icall can be con-
fined through multi-layer types. We consider not only the function
type but also the types of memory objects that hold the function
pointers. Since memory objects can hold other memory objects re-
cursively, we can further leverage the “layered” types to refine icall
targets. For example, in Figure 1, MLTA will find that the function
pointer, b.a.handler, in line 23 takes type fptr_t, and its value is
read from a, an object of type A. In turn, a is retrieved from b, an
object of type B. Therefore, we find a three-layer type to retrieve
the function pointer: B.A.fptr_t. MLTA requires that the target(s)
of the icall in line 23 must have its (theirs) address(s) taken and
assigned to some pointers of the three-layer type B.A.fptr_t. By
checking the program, we can find that the only function satisfying
such a requirement is copy_with_check(), while copy_no_check()
is assigned to a function pointer of type C.A.fptr_t. Therefore,
in this example, the multi-layer type analysis helps remove false
positives and find the correct, unique target.
3 Overview of TypeDive
MLTA refines icall targets through type analysis of multiple layers.
In this section, we introduce our system, TypeDive, a practical im-
plementation of multi-layer type analysis for refining icall targets.
Figure 2 shows the overview of TypeDive, which takes as input
the LLVM bitcode files of the target program and identifies the
targets for icalls as the outputs. TypeDive consists of two main
phases, the type-analysis phase, and the target-resolving phase.
The first phase thoroughly scans all bitcode files to collect type-
related information. Note that, for simplicity, we refer to types as
composite types by default in the following sections. TypeDive first
collects all address-taken functions and identifies all address-taking
operations, where the latter could be either a static initializer of
a global variable or a store instruction. TypeDive then analyzes
the address-taking operation to identify the multi-layer type of
the memory object. For example, in line 15 of Figure 1, the ad-
dress of copy_with_check() is taken and assigned to b.a.handler.
TypeDive will identify its multi-layer type as B.A.fptr_t. Then
TypeDive splits the multi-layer type into several two-layer types
for efficient target propagation. In this case, B.A.fptr_t is split into
fptr_t (the first layer), A.fptr_t (the second layer) and B.A (the
third layer). TypeDive adds such information to the type-function
map where the key is the hash of the two-layer type, and the value is
the set of associated functions. Next, TypeDive identifies how typed
objects are stored to other objects of different types, e.g., through
*p=a, and adds the relationship between the types of two operands
into the type-propagation map. The key of the type-propagation
map is the type of the value object a, and the value is the type of
the pointer object, p. TypeDive analyzes all casting operations and
maintains the casting relationships between two types through the
type-propagation map. Note that nested types will also be cast and
maintained for casting operations. The last component of the first
phase is to capture potential type escaping cases and add them into
the escaped-type set. A type is escaping if we cannot decide all the
icall targets it can confine. For example, when a primitive type is
cast to a composite type, because we cannot decide the targets of
Layered Type Analysismaintain type-func confinementsmaintain type propagations identify type escapingIndirect-Call Targets Resolvingtype escaping ?union and intersectnext layer ?Indirect-calltargetsforeach icalltype-function maptype-prop mapescaped typesMaintained datastructuresNNYYbitcodefilesSession 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1870the primitive type, the targets of the composite type also become
undecidable. In this case, the composite type is escaped.
The second phase of TypeDive aims to resolve targets for each
icall. Given an icall instruction, TypeDive identifies the multi-layer
type of the function pointer and breaks it into a series of two-layer
types. TypeDive initializes the target set with the first-layer type
matching (i.e., FLTA), and then iteratively resolves the targets layer
by layer, from the first layer to the last layer. The target set of one
layer will be intersected with the targets resolved from previous
layers. At each layer, TypeDive first checks if the type at the layer
has escaped or not, based on the maintained escaped-type set. If
the type has escaped, TypeDive conservatively stops confining
the targets for the icall and outputs the current target set (i.e., an
overestimation) as the final target set. Otherwise, TypeDive queries
the type-propagation map to find all types that are ever cast to the
current type. All targets of these types are recursively collected and
combined as the targets set of the current layer, which are further
intersected with the targets of previous layers. After each iteration,
TypeDive continues to identify the next-layer type. If no further
types are identified, TypeDive reports the existing target set as the
final one for the icall. Otherwise, TypeDive continues the target
resolving with the next-layer type.
As targets at each layer are intersected, TypeDive can effectively
refine icall targets. TypeDive’s analysis is conservative and elastic:
(1) if TypeDive cannot find the next layer, it immediately returns
the final target set; (2) if any type is escaping, TypeDive stops
resolving the targets and falls back to a previous layer. Note that,
TypeDive’s analysis is field-sensitive, e.g., maintaining which field
a store is targeting.
4 Design of TypeDive
TypeDive has two design goals: (1) to effectively refine the targets
as much as possible and (2) to not introduce any false negatives (i.e.,
to not miss valid targets) to FLTA. In this section, we present how
we design each component of TypeDive to achieve both goals.
4.1 Phase I: Layered Type Analysis
TypeDive includes two phases. As shown in Figure 2, the first
phase identifies all stores and initializers of global variables that
save a function address into memory, maintains how functions are
confined by types, and how types are propagated to other types.
More importantly, to avoid false negatives, this phase also identifies
escaped types whose instances may hold type-undecided targets.
4.1.1 Maintaining Type-Function Confinements. For a function ad-
dress to be a valid icall target, it must be first stored into memory
(i.e., a variable or a field of an object). Given a store of a function
address, TypeDive identifies the layered types of it and maintains
the confinements in a global type-function map. While the key
is a type, the value is a set of functions confined by the type. We
call the stores of function addresses as confinements because the
function addresses are expected to be loaded from the objects of
the same types. The stores can be in a store instruction or a static
initializer of a global variable (e.g., line 15 and line 18 in Figure 1).
Our analysis is field-sensitive in that the type information in the
map also includes the index of the field that holds the function.
Layered confinements. In an address-taking operation, if an ob-
ject containing a function pointer is contained by another object
of a different type, the confinement is layered. Such information
enables TypeDive to match types layer by layer. Specifically, given
a store of a function address, in either an initializer or a store in-
struction, TypeDive will recursively identify the layered types and
also maintain the confinements in the map. As shown in Figure 1,
both functions copy_no_check() and copy_with_check() are ever
stored into objects of type A, which is further stored into objects
of types B and C. In this case, we will identify that type A confines
these functions at layer two, and that types B and C confine these
functions at layer three. The function type is always at layer one,
i.e., FLTA. The type matching at layer two (i.e., through type A) will
identify both functions, copy_no_check() and copy_with_check(),
as valid targets for icalls in lines 23 and 24. However, the type match-
ing at layer three (i.e., through types B and C) can identify a unique
function target for each icall. That is, the icall in line 23 can only call
copy_with_check() because copy_no_check() is never confined by
type B, and the icall at line 24 can only call copy_no_check().
4.1.2 Maintaining Type Propagation. A multi-layer type in address-
taking operations introduces layered confinement. However, if an
object of one type is stored into an object of another type in non-
address-taking operations, all functions confined by the first type
should be propagated as possible targets to the second type. In this
case, the targets of the second type could potentially be significantly
expanded. We call such cases as type propagation.
To identify type propagation, we thoroughly analyze all store and
cast operations. The store can be either value-based or reference-
based (i.e., storing a pointer of an object into a field of another
object). The cast operations can be in either a cast instruction or a
cast operator in static initializers. For example, in LLVM IR, unions
are implemented as one of its multiple types, and the IR relies on
type casting to load and store the instance of other types. Given a
store or cast operation, we identify the source type and the sink type,
and use the type-propagation map to maintain the propagation.
The key in the map is the sink type, and its value is a set of source
types that are ever cast to the sink type.
Propagation for nested sub-types. When a source type propa-
gates to a sink type, we will recursively perform the propagation
for the nested sub-types from the source to the sink. This is neces-
sary because TypeDive does not employ data-flow analysis, so we
cannot guarantee that TypeDive always finds the base type where
a function pointer is loaded from.
Identifying Escaping Types. The essence of TypeDive is to
4.1.3
identify the confined targets for a type. However, this may be-
come infeasible if the type contains undecidable targets. We call
such cases type escaping. To specify the policy for identifying type-
escaping cases, we first define unsupported types as follows:
(1) Non-composite types such as general pointer types (e.g., char *)
and integer types.
(2) A type whose object pointers are ever arithmetically computed.
Note this does not include field indexing for structures.
The first criterion is not mandatory; as long as the propagation of
a type is thoroughly tracked, it can be included for layered type
analysis. We exclude non-composite types based on the observation
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom18714
5
6
7
8
9
10
11
12
13
14
15
16
17
18
22
23
24
25
26
27
28
29
that such types can potentially contain a large number of function
targets, rendering the layered analysis less effective. Further, includ-
ing non-composite types will significantly enlarge the maintained
data structures and impact the analysis efficiency. By contrast, the
second criterion is required because, once a pointer is arithmetically
computed, the type of the object it points to can be undecidable.
We then identify a composite-type as escaping if it has one of
the following cases.
(1) The type is cast from an unsupported type;
(2) Its objects are stored to objects of an unsupported type;
(3) It is cast to an unsupported type.
The first policy is intuitive. Casting propagates icall targets from
source to sink; because the target set of an unsupported type is
undecidable, the target set of the composite type will become un-
decidable. The same reason applies to the second policy because a
store also propagates icall targets. The third policy is also necessary.
When a composite type is cast to an unsupported type, it may be
used as a pointer to store a value with an unsupported type, like
the destination pointer in memory(). In this case, the target set of
the composite type will also become undecidable.
To identify escaping types, we analyze all store and cast opera-
tions targeting a composite type and extract the types of both the
source and the sink. If either type is unsupported, we conserva-
tively label the composite type as escaping. One thing to note is
that, when we cannot decide if a composite type would be stored
or cast to an unsupported type, e.g., a pointer of an object of the
composite type is passed to or from other functions, and we cannot
decide how this pointer is used in those functions, we will also treat
the composite type as escaping.
Supporting Field-Sensitive Analysis. TypeDive’s analysis is
4.1.4
field-sensitive. This is important to refining icall targets because a
type may have multiple fields that can hold different function tar-
gets. Therefore, TypeDive computes the indexes of fields into the
objects. TypeDive supports field-sensitive analysis by analyzing
operations that control pointers for accessing elements of arrays
and structs. The operations in LLVM IR are the GetElementPtrInst
and GEPOperator; both are for type-safe pointer arithmetic for ac-
cessing fields in composite-type objects. When the indices in the
operations are constants, analyzing the index of fields is straight-
forward. However, when the indices include non-constants, which
is uncommon, TypeDive conservatively labels the type as escap-
ing. All the types in the type-function confinement map, the
type-propagation map, and the type-escaping set include indexes.
With the field-sensitive analysis, union types can also be naturally
supported—union types are treated as general composite types, and
their fields are recognized based on the fields indexes.
4.2 Phase II: Targets Resolving for iCalls
Based on the collected information from the first phase, the second
phase of TypeDive resolves possible targets for each icall. At a
high level, TypeDive iteratively resolves confined targets for the
type at each layer based on how the function pointer is loaded
from memory. The targets of each layer are intersected to have the