### Capability-Based Access Control for Web Origins

Capability-based access control can be used to restrict web content's access to the functionality of the JavaScript bridge. Similarly, NoInjection [38] enhances the PhoneGap bridge with sanitization to prevent code injection attacks. Morbs [35] proposes an extension to the Android application framework that attaches origin information to Intents and Inter-Component Communication (ICC) channels, enabling a same-origin policy to prevent cross-site scripting and request forgery attacks. Additionally, various modifications to the Android WebView and Android IDEs have been discussed [35], [39], such as whitelisting web origins for access to the JavaScript bridge, displaying the security status of WebView connections to users, and using lint tools to warn developers about insecure TLS certificate validation in WebViews.

**Actors' Roles:**
- **Platform Developers:** Must integrate better isolation of web origins in WebViews and support origin-based access control on data flows (R1).
- **Web App Framework Providers and App Publishers:** Are responsible for securing their web-to-app and app-to-web bridges (R4, R6).

**Lessons Learned:**
- The trend towards web apps and the use of web technologies has lowered the barrier to entry for app development. However, this has also led to the replication of known web application vulnerabilities and the emergence of new issues.
- Cross-origin and web-to-app/app-to-web vulnerabilities pose significant security challenges. These issues are addressable by platform developers and do not require widespread changes from developers or end users, making this trend worth pursuing.

**Assessment (Webification):**
- Using standard web technology for building apps has proven satisfactory, though initially problematic. After addressing well-known web security issues and integrating them with the platform’s app sandboxing, this trend should continue.

### Programming-Induced Leaks

This section addresses the challenges and countermeasures related to data leaks caused by developer errors in apps, frameworks, and libraries.

**Challenges:**
- Android provides a comprehensive set of APIs, including security-related ones for permissions, secure network protocols, and cryptographic primitives.
- Fahl et al. [40] found widespread issues with custom TLS certificate validation implementations, leading to active Man-in-the-Middle (MITM) vulnerabilities.
- Egele et al. [43] discovered that 88% of analyzed apps made at least one mistake when using cryptographic primitives, indicating that the default configurations and API documentation are insufficient.
- Insecure code loading via unverified channels (e.g., HTTP) was found in 9.25% of analyzed apps, allowing attackers to inject malicious code [30].

**Countermeasures:**
- **MalloDroid [40]:** A static analysis tool to detect broken TLS certificate validation.
- **Fahl et al. [42]:** Propose a redesign of Android’s middleware/SDK to prevent developers from breaking TLS certificate validation.
- **SMV-Hunter [41]:** Combines static and dynamic analysis to detect TLS certificate validation issues.
- **CryptoLint [43]:** A static analysis tool to detect misuse of cryptographic APIs.
- **CHEX [22]:** A static analysis tool to detect component hijacking vulnerabilities.
- **ScanDroid [80]:** A modular data flow analysis tool for tracking data flows in apps.
- **AndroidLeaks [81]:** A large-scale analysis tool to detect privacy leaks and reduce manual security audit overhead.
- **FlowDroid [82]:** Uses static taint analysis to detect unintentional privacy leaks.

**Actors' Roles:**
- **App Developers:** Misuse of security-related APIs leaves apps vulnerable to other installed apps, malicious dynamic code loading, and network attacks (C2, C5, C6).
- **Platform Developers:** Should provide safe defaults and redesign APIs to match developers' needs (A1, A4, A5).
- **Toolchain Support:** Better toolchain support could help developers and library providers write more secure code (R7, R5, R4).
- **App Markets:** Could run analyses on apps to prevent insecure apps from being installed (R3).

**Lessons Learned:**
- Many new developers struggle with security APIs, often due to complex configurations and inadequate documentation.
- Developer interviews suggest that simplifying API design and providing better tool support can improve security.
- It should become common practice to use developer studies to test and improve security and privacy APIs.

**Assessment (Programming-Induced Leaks):**
- Existing work on redesigning and simplifying the usage of APIs and security-related tools should be extended and complemented by research on currently unexplored areas of developer usability.

### Software Distribution

The appified world has shifted software distribution from a decentralized to a centralized model.

**Challenges:**
- **App Piracy and Malware Incentives:** Research [46] found that common malware activities include collecting user information and sending premium-rate SMS messages. Follow-up studies [47], [32], [48], [49], [50], [29] confirmed that ad fraud is a major incentive for malware authors. Repackaged apps, which modify original apps to siphon ad revenue, are a significant distribution method.
- **Application Signing Issues:** Recent work [7] highlighted the central role of app markets and the potential for cheating on users by withholding apps or updates. Inappropriate handling of app signing mechanisms, such as using a single key for multiple apps, undermines security.

**Countermeasures:**
- **Meteor [83]:** Provides consistent security semantics across multiple markets.
- **MAST [84]:** Ranks apps based on attributes to target malware analysis resources effectively.
- **Application Transparency [7]:** Introduces cryptographic proofs to verify the authenticity of apps.
- **DNADroid [49]:** Detects pirated apps using program dependency graphs.
- **RiskRanker [85]:** Proposes proactive zero-day malware detection.
- **CHABADA [86]:** Uses anomaly detection to identify malicious apps.
- **Ernst et al. [87]:** Suggests collaborative verification between benign developers and market operators.
- **AppInk [89]:** Deters app repackaging through dynamic watermarking.

**Actors' Roles:**
- **Platform Developers:** Responsible for fixing key signing issues and ensuring secure app distribution (A1, R1).
- **End Users:** Can run malware detection software on their devices (R8), but this requires better support from platform developers.
- **App Markets:** Have a significant impact on security and can add accountability features (A3, R3).
- **App Developers and Publishers:** Bear responsibility for misusing app signing recommendations and can fix these issues (A5, R6, A6).

**Lessons Learned:**
- Centralized software distribution has been effective in protecting users against malware and fighting piracy.
- App markets can act as both a line of defense and a potential attacker. While they have a powerful position, few proposed security and privacy mechanisms have been adopted.
- Researchers should look for additional actors, such as app publishers and generators, to assist in improving user privacy.

**Assessment (Software Distribution):**
- Centralizing software distribution has been successful and should be retained. The threat of malicious app markets is manageable with ready countermeasures. The trustworthiness of emerging actors like app publishers and generators needs to be evaluated and established.

### Vendor Customization and Fragmentation

Fragmentation in appified ecosystems is a widespread phenomenon due to competition among hardware and software vendors.

**Challenges:**
- **Vendor Customizations:** Different OS versions and custom system apps increase the attack surface. Overprivileged system apps and misconfigurations allow unprivileged apps access to protected functionality.
- **Device Drivers:** Customizations of device drivers significantly increase the attack surface and provide access to sensitive functionality.

**Countermeasures:**
- No research has been conducted to address the challenges stemming from fragmented appified ecosystems.

**Actors' Roles:**
- **Device Vendors:** Responsible for security degradations caused by fragmentation and customization (A2, R2).

**Lessons Learned:**
- Android’s open ecosystem, while fostering innovation, also introduces significant security risks. Future platforms should consider the potential security implications of vendor customizations.
- Encouraging vendors to use system apps instead of OS patches for custom hardware support and forcing more modularity in Android could reduce fragmentation and the attack surface.

**Assessment (Vendor Customization/Fragmentation):**
- Allowing different vendors to customize their devices fueled Android’s adoption but introduced new challenges. Future fragmentation should focus on system apps rather than OS patches.

### Software Update Mechanism

Centralized software distribution simplifies app updates but makes OS updates challenging due to fragmentation.

**Challenges:**
- **Application Lifecycle:** Updates for actively maintained apps are frequent, but OS and application framework updates are less timely. Thomas et al. [108] found significant variability in the delivery of security updates, with 87% of devices vulnerable to at least 11 vulnerabilities.
- **Permission Management:** Upgrading the OS version can introduce permission management issues, allowing privilege escalation attacks.

**Countermeasures:**
- **Google’s Update Strategy:** Google has changed its update strategy for Nexus devices, but it remains to be seen if other vendors will adopt this.
- **SecUp [51]:** An app that detects privilege-escalation attacks through OS updates.

**Actors' Roles:**
- **Device Vendors:** Responsible for providing OS updates (A2, R1).
- **Platform Developers:** Responsible for introducing the upgrade privilege escalation attack (A1, R2).

**Lessons Learned:**
- Expecting platform developers to implement countermeasures is often unrealistic due to slow adaptation and fragmentation. Modular updates could help deploy security fixes faster without requiring full system updates.

**Assessment (Software Update Mechanism):**
- Since most countermeasures rely on OS updates, and fragmentation makes these cumbersome, platform developers should create better update mechanisms to deploy security fixes more easily.

### Conclusion

Android's story is one of both success and failure. New security mechanisms were introduced without a clear understanding of their practical implications, and some well-established mechanisms were adapted to meet the needs of the new computing platform. Some approaches, like centralizing software distribution, have been highly effective. Others, such as permission dialogs for end users, have failed and should be reconsidered for future OS designs. Overall, the key takeaway is that while some aspects of Android's security have worked well, others need rethinking and improvement.