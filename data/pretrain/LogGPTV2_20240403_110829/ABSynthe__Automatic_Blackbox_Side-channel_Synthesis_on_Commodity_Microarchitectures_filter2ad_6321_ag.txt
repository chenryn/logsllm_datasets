show that an analyst armed with ABSynthe’s results, by
performing tailored post-processing, can implement full key
recovery from the ABSynthe-recovered key bit stream even
with a single capture. A promising direction for future work is
to also automate the post-processing, investigating brute-force
heuristics that may apply to a wide variety of (cryptographic)
programs.
IX. RELATED WORK
Microarchitectural and physical side-channels Side chan-
nels have a rich history and have been applied to many
different microarchitectural components. Cache attacks are the
oldest and most widespread microarchitectural side-channel
attacks. Such attacks originally targeted the L1 cache [3,
31, 32, 33], and more recently expanded to higher-level
caches all
the way to DRAM [34]. There are different
eviction-based techniques to exploit cache side channels.
The classic variant is PRIME+PROBE, which requires exact
eviction sets but
is the most general. Other variants are
EVICT+TIME [3, 35, 36], which allows over-estimating an
eviction set, FLUSH+RELOAD [1], which relies on shared
physical memory but is high-resolution, and easy to use.
Non-software side channels are even older than microar-
chitectural attacks, and can use physical properties of the
device that is doing the computation in order to leak secret
information [37, 38].
The Branch Target Buffer (BTB) has also been heavily
studied in prior work [8, 39, 40, 41, 42]. For instance, it allows
ASLR information to leak from the kernel as well as from other
processes. Recent work has also exploited the Pattern History
Table (PHT) [9]. The PHT is shared across threads and, a spy
thread can leak data by evicting PHT entries and deducing the
direction of a particular branch. The Translation Lookaside
Buffer (TLB) is also a shared resource. Prior work has shown
that the L1 dTLB can be exploited for a reliable side-channel
attack through the TLB [7] using a PRIME+PROBE-style attack.
Memory Order Buffer (MOB) is yet another shared resource
that can leak information by creating a false dependency across
threads [43] and stalling the victim thread while the CPU
decides whether store forwarding should proceed (in case of a
true dependency).
The focus on contention-based side channels is recent and
to our knowledge they have only been applied to execution
ports. PortSmash [10] can leak cryptographic keys on Intel
processors by creating contention on execution ports. Port
contention has also been used to simplify gadgets [11] used
in speculative execution attacks [44]. Previous work show the
possibility of information leakage with port contention [42,
45]. Compared to these attacks that require highly specialized
analysis that is often not portable to other (micro)architectures,
ABSynthe can automatically synthesize contention-based side
channels for a given software target and a microarchitecture.
Instead of focusing on a single component (e.g., execution
ports), ABSynthe automatically discovers the best set resources
that leak information with a blackbox analysis.
Side-channel attack automation Other prior efforts have
proposed systems to automate side-channel attacks, although
none can support the blackbox synthesis strategy proposed
in this paper. For instance, [46] focuses an automating side-
channel attacks with a traditional side-channel analysis tailored
to a speciﬁc microarchitectural component (last-level cache).
Covert Shotgun [20] is more related in that it runs many
combinations of instructions to automatically ﬁnd covert chan-
nels. ABSynthe’s contention-based side channel strategy draws
inspiration from such approach, but covers the entire x86_64
ISA and synthesizes a side-channel attack rather than a much
simpler covert channel.
While not aiming at automatic blackbox synthesis, other
efforts have used machine learning techniques to ease side-
channel exploitation, for instance to differentiate the key-
dependent side channel signals from one another [7, 47, 48,
49]. Recent work has also applied deep learning techniques to
in-browser cache ﬁngerprinting attacks [50].
16
X. CONCLUSION
As a result of ever more advanced attacks, side-channel
vulnerabilities have become important attack vectors in recent
years. Most attacks such as PRIME+PROBE rely on targeted
eviction operations on speciﬁc components (e.g., caches). Such
whitebox attack strategies require a deep understanding of
the target component, often involving labor-intensive reverse
engineering that must be repeated for each microarchitecture.
In this paper, we created comprehensive leakage maps for
on-core resources on three x86_64 microarchitectures. These
leakage maps show the possibility of creating a variety of
side-channel attacks by creating contention on a variety of
microarchitectural components that are constantly and un-
avoidably used by victim code. We built ABSynthe based
on this key observation for constructing powerful contention-
based attacks in a black box, automated fashion without any
need for labor-intensive reverse engineering. ABSynthe shows
that simply treating the CPU as a black box and evaluating the
information leakage across sequences of instructions is enough
for crafting reliable side-channel attacks. Through extensive
evaluation, we showed that ABSynthe can automatically craft
practical side-channel attacks to recover key bit streams on
different microarchitectures (Intel, AMD, ARM) and execution
environments (native, virtualized) against a variety of software
targets. We also presented a case study where an analyst
armed with ABSynthe’s results can recover the full secret key.
ABSynthe can also be used by hardware designers for microar-
chitecture regression testing purposes (e.g., to automatically
test whether new ISA extensions introduce new side channels)
or by software designers to test for side-channel leakage.
ACKNOWLEDGEMENTS
packet.net and WorksOnArm gracefully sponsored the
use of several of their bare metal machines, including the
AMD EPYC machine and the Cavium Thunder X2 machine,
for which the authors are very grateful. We would like to thank
the anonymous reviewers for their valuable feedback. This
work was supported by the European Union’s Horizon 2020
research and innovation programme under grant agreements
No. 786669 (ReAct) and No. 825377 (UNICORE), by Intel
Corporation through the Side Channel Vulnerability ISRA,
and by the Netherlands Organisation for Scientiﬁc Research
through grants NWO 639.023.309 VICI “Dowsing,” NWO
639.021.753 VENI “PantaRhei,” and NWO 016.Veni.192.262.
As to the opinions and positions in this document that the
authors express or to which the authors contributed, they are
those of the authors and do not represent the views of any
current or previous employer, including Intel Corporation or
its afﬁliates. The same applies to the funding agencies, which
are also not responsible for any use that may be made of the
information the paper contains.
REFERENCES
[1] Y. Yarom and K. Falkner, “Flush+ reload: A high resolu-
tion, low noise, l3 cache side-channel attack.” in USENIX
Security Symposium, 2014, pp. 719–732.
[2] C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen,
“Prime+ abort: A timer-free high-precision l3 cache at-
tack using intel tsx,” in 26th USENIX Security Symposium
(USENIX Security 17), 2017, pp. 51–67.
17
[3] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks
and countermeasures: the case of aes,” in Cryptogra-
phers’ Track at the RSA Conference.
Springer, 2006,
pp. 1–20.
[4] N. Lawson, “Side-Channel Attacks on Cryptographic
Software,” in IEEE Symposium on Security and Privacy,
2009.
[5] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-
level Cache Side-channel Attacks are Practical,” in IEEE
Symposium on Security and Privacy, 2015.
[6] M. Yan, R. Sprabery, B. Gopireddy, C. Fletcher,
R. Campbell, and J. Torrellas, “Attack Directories, Not
Caches: Side-Channel Attacks in a Non-Inclusive World,”
in IEEE Symposium on Security and Privacy, 2019.
[7] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Trans-
lation Leak-aside Buffer: Defeating Cache Side-channel
Protections with TLB Attacks,” in USENIX Security
Symposium, 2018.
[8] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh,
“Jump over aslr: Attacking branch predictors to bypass
aslr,” in Microarchitecture (MICRO), 2016 49th Annual
IEEE/ACM International Symposium on.
IEEE, 2016,
pp. 1–13.
[9] D. Evtyushkin, R. Riley, N. C. Abu-Ghazaleh, D. Pono-
marev et al., “Branchscope: A new side-channel attack on
directional branch predictor.” ACM, 2018, pp. 693–707.
[10] A. C. Aldaya, B. B. Brumley, S. ul Hassan, C. P. García,
and N. Tuveri, “Port contention for fun and proﬁt,” in
Security and Privacy (SP), 2019 IEEE Symposium on.
IEEE, 2019.
[11] A. Bhattacharyya, A. Sandulescu, M. Neugschwandtner,
A. Sorniotti, B. Falsaﬁ, M. Payer, and A. Kurmus,
execution
“Smotherspectre:
preprint
through
port
arXiv:1903.01843, 2019.
exploiting
contention,”
speculative
arXiv
[12] S. Weiser, A. Zankl, R. Spreitzer, K. Miller, S. Mangard,
and G. Sigl, “Data–differential address trace analysis:
Finding address-based side-channels in binaries,” in 27th
USENIX Security Symposium (USENIX Security 18),
2018, pp. 603–620.
[13] R. Singhal, “Inside intel next generation nehalem mi-
croarchitecture,” in Hot Chips, vol. 20, 2008, p. 15.
[14] Y. Tian, C. Lin, and K. Hu, “The performance model of
hyper-threading technology in intel nehalem microarchi-
tecture,” in Advanced Computer Theory and Engineering
(ICACTE), 2010 3rd International Conference on, vol. 3.
IEEE, 2010, pp. V3–379.
[15] D. Marr, F. Binns, D. Hill, G. Hinton, D. Koufaty et al.,
“Hyper-threading technology in the netburst® microar-
chitecture,” 14th Hot Chips, 2002.
[16] Intel, “Intel 64 and ia-32 architectures optimization ref-
erence manual,” 2016.
[17] H. Wong, “Measuring reorder buffer capacity,” http : / /
blog . stuffedcow. net / 2013 / 05 / measuring-rob-capacity/,
Accessed on 10.11.2018., may 2013.
[18] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller,
and M. Costa, “Strong and efﬁcient cache side-channel
protection using hardware transactional memory,” in 26th
USENIX Security Symposium (USENIX Security 17),
2017, pp. 217–233.
[19] D. Genkin, L. Valenta, and Y. Yarom, “May the fourth
be with you: A microarchitectural side channel attack
on several real-world applications of curve25519,” in
Proceedings of the 2017 ACM SIGSAC. ACM, 2017,
pp. 845–858.
[20] A. Fogh, “Covert shotgun,” september 2016. [Online].
Available: https://cyber.wtf/2016/09/27/covert-shotgun/
[21] A. Abel and J. Reineke, “uops.
info: Characterizing
latency, throughput, and port usage of instructions on
intel microarchitectures,” in Proceedings of the Twenty-
Fourth ASPLOS. ACM, 2019, pp. 673–686.
[22] L. Team, “Dataﬂowsanitizer design document,” https :
/ / clang . llvm . org / docs / DataFlowSanitizerDesign . html,
Accessed on 03.01.2019., march 2019.
[23] J. Zhang, X. Lu, J. Jose, R. Shi, and D. K. D. Panda, “Can
inter-vm shmem beneﬁt mpi applications on sr-iov based
virtualized inﬁniband clusters?” in European Conference
on Parallel Processing. Springer, 2014, pp. 342–353.
[24] K. Price, R. M. Storn, and J. A. Lampinen, Differential
evolution: a practical approach to global optimization.
Springer Science & Business Media, 2006.
[25] S. Hochreiter and J. Schmidhuber, “Long short-term
memory,” Neural computation, vol. 9, no. 8, pp. 1735–
1780, 1997.
I. Goodfellow, A. Harp, G.
[26] F. Chollet et al., “Keras,” https://keras.io, 2015.
[27] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen,
C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin,
S. Ghemawat,
Irving,
M. Isard, Y. Jia, R. Jozefowicz, L. Kaiser, M. Kudlur,
J. Levenberg, D. Mane, R. Monga, S. Moore, D. Murray,
C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever,
K. Talwar, P. Tucker, V. Vanhoucke, V. Vasudevan,
F. Viegas, O. Vinyals, P. Warden, M. Wattenberg,
M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: Large-
scale machine learning on heterogeneous
systems,”
2015, software available from tensorﬂow.org. [Online].
Available: https://www.tensorﬂow.org/
[28] A. Reid, “Trustworthy speciﬁcations of arm® v8-a and
v8-m system level architecture,” in 2016 Formal Methods
in Computer-Aided Design (FMCAD).
IEEE, 2016, pp.
161–168.
[29] D. Genkin, L. Pachmanov, I. Pipman, and E. Tromer,
“Ecdh key-extraction via low-bandwidth electromagnetic
attacks on pcs,” in Cryptographers’ Track at the RSA
Conference. Springer, 2016, pp. 219–235.
[30] K. Okeya and T. Takagi, “The width-w naf method
provides small memory and fast elliptic scalar multipli-
cations secure against side channel attacks,” in Cryptog-
raphers’ Track at the RSA Conference. Springer, 2003,
pp. 328–343.
[31] D. Page, “Theoretical use of cache memory as a crypt-
analytic side-channel.” IACR Cryptology ePrint Archive,
vol. 2002, no. 169, 2002.
[32] C. Percival, “Cache missing for fun and proﬁt,” 2005.
[33] O. Aciiçmez, “Yet another microarchitectural attack:
exploiting i-cache,” in Proceedings of the 2007 ACM
workshop on Computer security architecture.
ACM,
2007, pp. 11–18.
[34] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Man-
gard, “Drama: Exploiting dram addressing for cross-cpu
attacks,” in USENIX Security Symposium, 2016.
[35] R. Spreitzer and T. Plos, “Cache-access pattern attack
on disaligned aes t-tables,” in International Workshop on
Constructive Side-Channel Analysis and Secure Design.
Springer, 2013, pp. 200–214.
[36] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida,
“Aslr on the line: Practical cache attacks on the mmu,”
NDSS (Feb. 2017), 2017.
[37] D. Genkin, L. Pachmanov, I. Pipman, E. Tromer, and
Y. Yarom, “Ecdsa key extraction from mobile devices
via nonintrusive physical side channels,” in Proceedings
of the 2016 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2016, pp. 1626–1638.
[38] G. Bertoni, V. Zaccaria, L. Breveglieri, M. Monchiero,
and G. Palermo, “Aes power attack based on induced
cache miss and countermeasure,” in International Confer-
ence on Information Technology: Coding and Computing
(ITCC’05)-Volume II, vol. 1.
IEEE, 2005, pp. 586–591.
[39] O. Aciiçmez, Ç. K. Koç, and J.-P. Seifert, “On the power
of simple branch prediction analysis,” in Proceedings of
the 2nd ACM symposium on Information, computer and
communications security. ACM, 2007, pp. 312–320.
[40] O. Acıiçmez, Ç. K. Koç, and J.-P. Seifert, “Predicting
secret keys via branch prediction,” in Cryptographers’
Track at the RSA Conference. Springer, 2007, pp. 225–
242.
[41] O. Acıiçmez, S. Gueron, and J.-P. Seifert, “New branch
prediction vulnerabilities in openssl and necessary soft-
ware countermeasures,” in IMA International Conference
on Cryptography and Coding. Springer, 2007, pp. 185–
203.
[42] O. Acıiçmez and J.-P. Seifert, “Cheap hardware paral-
lelism implies cheap security,” in Fault Diagnosis and
Tolerance in Cryptography, 2007. FDTC 2007. Workshop
on.
IEEE, 2007, pp. 80–91.
[43] A. Moghimi, T. Eisenbarth, and B. Sunar, “Memjam:
A false dependency attack against constant-time crypto
implementations in sgx,” in Cryptographers’ Track at the
RSA Conference. Springer, 2018, pp. 21–44.
[44] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz,
and Y. Yarom, “Spectre attacks: Exploiting speculative
execution,” arXiv preprint arXiv:1801.01203, 2018.
[45] S. M. D’Antoine, “Exploiting processor side channels
to enable cross vm malicious code execution,” Ph.D.
dissertation, Rensselaer Polytechnic Institute, 2015.
[46] D. Gruss, R. Spreitzer, and S. Mangard, “Cache tem-
plate attacks: Automating attacks on inclusive last-level
caches.” in USENIX Security Symposium, 2015, pp. 897–
912.
[47] I. P. Samiotis, “Side-channel attacks using convolutional
neural networks: A study on the performance of con-
volutional neural networks on side-channel data,” Delft
University of Technology Master Thesis, 2018.
[48] G. Hospodar, B. Gierlichs, E. De Mulder,
I. Ver-
bauwhede, and J. Vandewalle, “Machine learning in side-
channel analysis: a ﬁrst study,” Journal of Cryptographic
Engineering, vol. 1, no. 4, p. 293, 2011.
[49] T. Zhang, Y. Zhang, and R. B. Lee, “Analyzing cache
side channels using deep neural networks,” in Proceed-
ings of the 34th Annual Computer Security Applications
Conference. ACM, 2018, pp. 174–186.
[50] A. Shusterman, L. Kang, Y. Haskal, Y. Meltser, P. Mittal,
Y. Oren, and Y. Yarom, “Robust website ﬁngerprinting
through the cache occupancy channel,” arXiv preprint
arXiv:1811.07153, 2018.
18