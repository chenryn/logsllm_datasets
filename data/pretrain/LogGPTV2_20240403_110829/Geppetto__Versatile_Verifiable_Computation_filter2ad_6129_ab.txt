the veriﬁcation algorithm twice:
Verify((Du,DF0
Verify((Dz,DF1
,Dz),π0)
,Dy),π1)
(2)
(3)
2We use ‘digest’ rather than ‘commitment’, since only some of the digests
need to be binding—see §3.1.
255255
F;F0, . . . ,Fm−1 Function F is decomposed into m functions Fi
= |B|
Formal variables used when computing F
A partition of χχχ into banks Bb ∈ B with (cid:2)
An instance tb of bank Bb;
Commit-and-prove message for bank Bb (Defn. 2)
= |σ|
(cid:3)
A proof schedule (Defn. 1) with length n
The MultiQAP Q(cid:3), combining sub-QAPs Qi
A QAP has size ρ and degree d
χχχ
B, (cid:2)
B(tb)
b
χb
σ, n
Q(cid:3), Qi
ρ,d
(cid:3)
Figure 2: Notation summary for §2.
and accepts y as F(u) if both checks succeed.3 Note that Dz oc-
curs in both veriﬁcation checks. Formally, a system that allows
a prover to commit to state in this fashion and use the result-
ing commitments in multiple proofs is known as a commit-and-
prove (CP) scheme (see §3.1).
As shown in Figure 1, proofs of complex functions F may in-
volve multiple instances of a simpler function Fi. For example,
Fi may represent the execution of a single function call, or a sin-
gle loop iteration in F. Each instance of Fi requires the prover
to generate (and the veriﬁer to check) a fresh proof, along with
digests for the banks involved. In §2.1.2, we formalize these
relationships with a proof schedule (Defn 1); each step in the
schedule indicates which Fi is “active”, which banks it depends
on, and which set of bank values this particular instance of Fi
depends on.
To efﬁciently build a commit-and-prove system supporting
such schedules, we use Pinocchio’s techniques to express each
function Fi as a Quadratic Arithmetic Program (QAP) Qi, a for-
mat suitable for succinct cryptographic proofs. To share state
between individual Qi, we combine them into a single Multi-
QAP Q(cid:3) that also efﬁciently incorporates the buses connecting
them. Using a MultiQAP also simpliﬁes our deﬁnitions, con-
structions, and security proofs.
In particular, we can repeat-
edly use a commit-and-prove scheme for a single relation for all
proof schedules composed of different Qi steps, with the abil-
ity to share compact, private digests between the proof steps.
MultiQAPs support this functionality without signiﬁcantly in-
creasing the prover’s costs beyond what is required to handle
each sub-QAP of the schedule individually.
2.1.2 Scheduling Proofs With Shared State
As described in §2.1.1, we decompose the proof of a complex
function F into a conjunction of proofs of m simpler functions
F0,. . . ,Fm−1.4 Let χχχ represent all of the formal variables used
when computing F; this includes F’s input and output variables,
variables “local” to the computation of each Fi, and the variables
shared across the Fi. Based on these different roles, we partition
χχχ into banks Bb ∈ B.
A given execution of F may involve several instances of the
same bank (e.g., if Fi represents a loop body, then the banks
,π0) the proof for
3This approach generalize’s Pinocchio’s, which calls (DF0
F0 and has the veriﬁer compute Du and Dz inside the veriﬁcation algorithm.
4Cryptographers think of F as a language, and F’s IO as a language instance.
Programmers may see this proof as a trace-property, e.g., interpreting u,y as a
valid input-output sequence obtained by running a program whose speciﬁcation
is captured by F.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
(cid:3)
(cid:3)
corresponding to its IO and local variables may take on differ-
ent concrete values on each loop iteration). We refer to these
distinct instances of bank Bb as B(tb)
for tb = 1,2, . . . reserving
b
tb = 0 for the instance that assigns the constant 0 to every vari-
able in Bb. With these notations (summarized in Figure 2), we
can deﬁne proof schedules.
Deﬁnition 1 (Multi-proof schedule) A schedule σ is a se-
quence of steps of the form (i,t) where i ∈ [m] and t is a vector
with an index tb ≥ 0 for each bank Bb ∈ B. We deﬁne n
= |σ| to
= |B| the number of banks.
be the length of the schedule, and (cid:2)
Each step (i,t) of the schedule selects a function Fi and the
instances B(tb)
of the banks it uses, with tb = 0 whenever Fi does
b
not use Bb. We require that Fi use only its local bank BFi, that
is, tFj
A proof for σ consists of (1) a proof πi for each of its steps,
and (2) a digest D(t)
b
for each of its bank instances B(t)
b .
= 0 whenever i (cid:5)= j.
Intuitively, the schedule indicates a sequence of calls to Fis
for which the prover must generate (or the veriﬁer must check)
a proof, and the indexes t of the banks digests that the prover
(or the veriﬁer) should use with that proof. The variables in any
banks not used in a given step are implicitly set to 0 and hence
can be represented with a trivial digest.
Returning to our example from §2.1.1, we have B = (Bu,By,
,Bz) and the schedule for Equations (0) and (1) would
,BF1
BF0
be σ = [(0, (1,0,1,0,1)), (1, (0,1,0,1,1))].
2.1.3 An Efﬁcient CP System from MultiQAPs
To understand Geppetto’s MultiQAPs, it helps to review how
Pinocchio encodes computations as QAPs. This encoding en-
ables Pinocchio’s efﬁcient cryptographic protocol.
Quadratic Arithmetic Programs (QAPs)
[29, 46] Ab-
stractly, Pinocchio compiles a function F into a conjunction of
d equations of the form
(cid:2)
(4)
Q(χχχ)
(cid:3)
=
(vr ·χχχ)(wr ·χχχ) = (yr ·χχχ)
r∈[d]
where χχχ is the vector of F’s variables, which range over some
large, ﬁxed prime ﬁeld Fp, and the vectors vr, wr, yr each de-
ﬁne linear combinations over the variables χχχ. Each equation
(indexed by r) can be thought of as encoding a two-input mul-
tiplication gate in the arithmetic circuit computing F, with vr
indicating each variable’s contribution (if any) to the gate’s left
input, wr indicating each variable’s contribution to the gate’s
right input, and yr indicating the variable’s relation to the gate’s
output. We say that Q has size ρ (cid:3)
= |χχχ| and degree d.
Crucially, Pinocchio’s evaluation key (used by the prover to
create his proof) contains cryptographic key material for each
variable χ ∈ χχχ, and the structure of that key material depends
directly on which (and how) χ participates in each of the d equa-
tions in Equation (4), i.e., on the value of χ’s entry in each of
the vectors vr, wr, yr.
From QAPs to MultiQAPs
If we decompose F into sim-
pler functions Fi, then we can create a corresponding QAP Qi
for each Fi. Suppose we wish to connect Q0, which has some
variables z0 representing F0’s output, with Q1, which has some
variables z1 representing F1’s input, with |z0| = |z1|. Since F0
and F1 are different functions, z0 and z1 undoubtedly participate
in different equations in Q0 and Q1, and hence, as explained
above, will have different key material representing z0 and z1.
As a result, a digest for z0 will be completely different from a
digest for z1, even if z0 = z1! We could ﬁx this by combining Q0
and Q1 into a single QAP and adding equations requiring that
z0 = z1, but then we lose the beneﬁts we hoped to gain from
decomposing F.
Instead, we combine all of the (Qi)i∈[m] into a single Multi-
QAP Q(cid:3). Q(cid:3) has the same equations and variables χχχ used in
the Qi. In addition, for each variable s that we wish to share
between some subset ˆQ of the Qi, we add a new variable ˆs to a
new bus bank associated with ˆQ, and we add an equation relat-
ing ˆs to the local copy of s in each of the Qi in ˆQ. Continuing
our earlier example, we will introduce a new bus for variables
ˆz with | ˆz| = |z0| = |z1|, and for each ˆz in ˆz, we will add an
equation:
z0 + z1 = ˆz
(5)
relating it to the corresponding variables in Q0 and Q1. By
adding the ˆz bus as a layer of indirection, it no longer matters if
z0 is used differently in Q0 than z1 is in Q1; the prover can cre-
ate a single digest Dˆz representing the values on the bus, and the
veriﬁer can use this digest when checking the correct execution
of Q0, as well as that of Q1, just as in the example in §2.1.1,
when computing Equations (2) and (3). Because the veriﬁer
only accepts proof schedules with trivial digests for all other
local banks (Deﬁnition 1), when she veriﬁes a proof of Q0, all
of the variables in Q1 are set to 0, and hence Equation (5) says
that z0 = ˆz, whereas when she veriﬁes a proof of Q1, all of the
variables in Q0 are set to 0, and hence (5) says that z1 = ˆz.
If we follow these steps to combine m sub-QAPs (Qi)i∈[m],
each of size ρi and degree at most d, along with the buses
connecting them, into a single MultiQAP Q(cid:3), then Q(cid:3) has size
ρ(cid:3) = |s| + ∑i∈[m] ρi and degree d(cid:3) = d +|s|, where s includes
all intermediate variables shared between the Qi. By choosing
a decomposition from F to (Fi)i∈[m] that exploits the structure
of F, Geppetto’s compiler can ensure that most variables are lo-
cal to one Fi, so we typically achieve |s| << d. Since each step
in a proof schedule considers only one Qi at a time, the size and
degree of the “active” QAP within Q(cid:3) is only slightly larger
than the original Qi. Thus, MultiQAPs enable state sharing
across sub-QAPs without signiﬁcantly increasing the prover’s
costs beyond what is required to handle the sub-QAPs of the
schedule individually.
2.1.4 Other Techniques for Stateful Computations
Prior work explores other, largely complementary mechanisms
for handling veriﬁable computations over state. As discussed in
§2.1.1, a classic way to condense state is to commit to it via a
hash [8, 12, 29, 43]. When specifying the IO to a function F,
the veriﬁer only gives the hash value h = H(u). The prover
supplies the full data values and, as part of the veriﬁable com-
putation, hashes the data and proves that the hash matches the
256256
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:17 UTC from IEEE Xplore.  Restrictions apply. 
one supplied by the veriﬁer. A recent system, Pantry [16], im-
plements such collision-resistant hashing on top of the existing
QAP-based Pinocchio [46] and Zaatar protocols [49].
As shown in §7.2, using MultiQAPs is much cheaper than
hashing when all (or most) of the state will be used in a given
computation. Thus, MultiQAPs will typically be advantageous
when passing state between computations, such as between
mappers and reducers in a MapReduce job or within a decom-
posed program such as the one shown in Figure 1, since a good
compiler will ensure that state is passed between computations
only if both computations actually need it. MultiQAPs are also
advantageous for IO when the veriﬁer’s inputs can be split in
two pieces, a (mostly) static and a dynamic portion, that inter-
act in each computation. For example, we might see this pattern
if the computation takes in a large dataset and a small query, and
the query needs to veriﬁably compute on most of the dataset.
In contrast, hashing is advantageous when the inputs are
large, but the veriﬁable computation only accesses a small por-
tion of the input at a time. For example, if the computation is
over a large database but any given computation only selects a
handful of records, then hashing makes sense. Hashing is also
suitable for transferring state between veriﬁable computations
performed with keys created by mutually distrusting parties.
As an orthogonal contribution, Pantry uses hashes to build
a RAM abstraction based on Merkle trees [43], though subse-
quent work [10, 54] suggests that handling RAM via memory
routing networks [8] performs better for most memory sizes.
Regardless, these techniques are orthogonal to Geppetto in the
sense that they focus on dynamic RAM access within a com-
putation/QAP, rather than on transferring state between com-
putations. Indeed, routing networks would likely be the most
efﬁcient way to allow a given Geppetto sub-QAP to incorpo-
rate a RAM abstraction. Recent work demonstrates [54] that
such abstractions can be naturally integrated with Geppetto’s
compilation-based approach.
Finally, in concurrent work, Backes et al. modify the Pinoc-
chio protocol to incorporate a linearly homomorphic MAC in
order to optimize computing on authenticated data [3]. Using
signed Geppetto commitments offers an alternate approach; we
defer evaluating the tradeoffs to future work.
2.2 Veriﬁable Crypto and Bootstrapping Proofs
In theory, we should be able to verify cryptographic compu-
tations (e.g., a signature veriﬁcation) just like any other com-
In practice, as discussed in §1, a naive embedding
putation.
of cryptographic computations into the ﬁeld Fp that our Mul-
tiQAPs operate over leads to signiﬁcant overhead. In §5, we
use a careful choice of cryptographic primitives and parameters
to build a large class of crypto operations (e.g., signing, ver-
iﬁcation, encryption) using elliptic curves built “natively” on
Fp. For example, this makes it cheap to verify computations on
signed data, since the data and the signature both “live” in Fp.
Prior work used such tailoring for unbounded bootstrapping [9]
and hashing [9, 16].
Our most complex application of this technology is a form
of proof bootstrapping [11, 53], which we use to address the
main drawback of CP schemes. With CP schemes, includ-
ing our MultiQAP-based scheme, the size of the cryptographic
evidence—and the veriﬁer costs—grow linearly with the num-
ber of digests and proofs. While often acceptable in practice,
these costs can be reduced to a constant by using another in-
stance of our CP scheme to outsource the veriﬁcation of all of
the cryptographic evidence according to a target proof schedule.
More formally, let Verifyσ(cid:3)(D,Π) be the function checking
that a scheduled CP proof cryptographically veriﬁes, where D
and Π are the collections of digests and proofs used in the
schedule σ(cid:3). We recursively apply Geppetto to generate a
quadratic program Qσ(cid:3) for Verifyσ(cid:3). This yields another, more
◦
σ(cid:3) (D◦,π◦) with a single, constant-sized
efﬁcient veriﬁer Verify
digest D◦ of D, Π, and all intermediate variables used to verify
them according to σ(cid:3), and with a single constant-sized proof π◦
to verify, now in constant time.
◦
σ(cid:3) need not be limited to just