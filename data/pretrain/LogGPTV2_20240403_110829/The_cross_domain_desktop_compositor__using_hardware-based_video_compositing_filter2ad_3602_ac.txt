by the domain-side computer connected to the CDDC.
The Keyboard component models a trustworthy user typ-
ing on a trustworthy keyboard. Its internal state includes,
for each external domain d ∈ extdom, an inﬁnite stream
key srcd of characters representing user input typed at level d.
Its state also includes a disable ﬂag (not depicted) that it
shares with the Mouse component, modelling a mechanism
by which the CDDC component temporarily disables the key-
board and mouse while it is analysing a mouse-click (see
below, and Section 7.2). For each computation step, if the
disable ﬂag is not set, the Keyboard component reads the next
input character from key srcactive, where active is the cur-
rently active domain as indicated by the CDDC-generated
augmented display data aug.
It places this character in
key buﬀer, the keyboard input buﬀer of the CDDC compo-
nent. This models a faithful user who always types input at
the level indicated by the CDDC-generated banner across
the top of the display.
The Mouse component models the trustworthy user pro-
viding mouse input to the CDDC. It contains a single inﬁnite
KeyboardCDDCMouseWSNWS1key_src1key_srcN…key_buffermouse srcmouse_bufferoutput1outputN…cur_coorddom_orddisableinput1inputN…augGetInput:
Read datum dt from mouse buﬀer or,
TestClick:
Ferry(dt):
Flush(n):
if none available, key buﬀer;
if dt is a mouse click then
set disable ﬂag and goto TestClick;
else
update cur coord as needed;
goto Ferry(dt);
let d = domainOf (cur coord);
update dom ord and aug as needed;
if d is not the old active domain then
goto Flush(0);
else
unset disable ﬂag;
goto Ferry(click (cur coord));
let activedom = topmost(dom ord);
put dt into outputactivedom ;
goto GetInput;
if n < BUFLEN then
clear (key buﬀer [n]);
goto Flush(n + 1);
else
unset disable ﬂag;
goto Ferry(click (cur coord))
Figure 10: Behaviour of the CDDC component.
Given coordinates c, the function domainOf (c) re-
turns the topmost domain in dom ord whose windows
occupy position c, while click (c) creates a mouse click
event at location c.
stream mouse src of mouse input data. At each computation
step, if the disable ﬂag is not set, this component reads the
next item from mouse src and places it in mouse buﬀer, the
mouse input buﬀer of the CDDC component.
The CDDC component has the most complex behaviour.
Its internal state includes a structured program counter vari-
able and each computation step atomically executes an en-
tire labelled block (i.e. everything up to execution of the
next goto statement) of the input processing loop described
in Figure 10, namely the block identiﬁed by the current value
of the CDDC’s program counter. The goto statements in
Figure 10 show how the program counter variable is updated
in each execution step.
The entire system executes the above components in par-
allel, interleaving their individual execution steps to form ex-
ecution traces. No component ever blocks, nor synchronises
with any other, so issues such as enabledness and termination-
sensitivity are irrelevant.
6.2 The Security Property
The security property is a variant of noninterference, and
essentially forbids information at the level of one external
domain d being observed at another d(cid:48).
To phrase this requirement we group the data in the sys-
tem into (sometimes overlapping) collections, called security
labels, and deﬁne a global information ﬂow policy that says
how information is allowed to ﬂow between these labels. For
the CDDC formal model, the set of security labels includes
just the following. Each external domain d ∈ extdom has
its own label, Externald. However, we also include an extra
label Internal, for data that at no instant in time belong to
any of the external domains. The Internal label includes,
for instance, the mouse input data which, because it deﬁnes
when domain switches occur, cannot be labelled at the level
of any of the external domains, as otherwise it would create
a trivial information channel between all such domains [11].
Speciﬁcally, when a domain switch occurs, the domain be-
ing switched to necessarily learns that the mouse cursor was
(clicked) over one of its windows, and so learns something
about the current mouse position. Thus the mouse data
cannot be labelled with any external label.
The information ﬂow policy ;, then, says that informa-
tion is allowed to ﬂow from the Internal label to all others,
but that no other information ﬂows are permitted between
labels.
Internal ;d
d ;d’ −→ d = d’
This policy ensures that, while when domain switches occur
can (and will) be controlled by Internal state, this is the
only state that can do so.
In practice, the CDDC formal
model adheres to this requirement because it allows domain
switches to occur only in response to mouse clicks.
To state the security property, we then need to deﬁne the
labelling of the data in the system. This labelling is deﬁned
by, for each label l, deﬁning an equivalence relation l∼ on
states of the system so that s l∼ s(cid:48) holds for any two states s
and s(cid:48) precisely when the values of all data labelled by l
are identical between s and s(cid:48). We say that the equivalence
relation l∼ includes all data labelled by l.
Before describing the labelling and the equivalence rela-
tions, we ﬁrst deﬁne the conﬁdentiality property that we
prove for the system, to show that it adheres to the in-
formation ﬂow policy ; deﬁned above. This property is
equivalent to the following.
Definition 6.1. Conﬁdentiality holds when for all labels l,
for all reachable states s and t, and all states s(cid:48) and t(cid:48) reach-
able from these respectively after a single execution step per-
formed by the same component in each,
s l∼ t ∧ s Internal∼ t −→ s
(cid:48)
l∼ t
(cid:48)
Conﬁdentiality simply requires that each execution step
reveals to an arbitrary label l only information that l al-
ready knew, or Internal information (which, recall, ; allows
anyone to learn).
The essence of what this security property means and en-
forces, then, is captured by the labelling deﬁned in terms of
the equivalence relations
·∼.
Note that by phrasing the labelling via equivalence rela-
tions on states s and t, it may depend on the contents of s
and t themselves. This allows the labelling to depend on
ﬁxed parts of the state, namely the Internal-labelled state
that the policy ; allows all other labels to observe. We
make use of this to have the labelling for labels Externald
depend on whether d is the currently active domain.
Speciﬁcally, the state labelled Externald naturally includes
all (containers holding) d-classiﬁed data in the system: the
Keyboard’s input stream key srcd, the CDDC’s output buﬀer
outputd, and the WSd’s input buﬀer inputd. When d is the
active domain, it also includes the CDDC’s key buﬀer. An
implication is that the security property then requires (i.e.
it enforces) that the key buﬀer only ever contain the data of
the currently active domain. This is why it must be cleared
when switching to a new domain, and why the keyboard
must be disabled during this process, by the CDDC (see
Figure 10).
Finally, when d is the active domain, the CDDC’s program
counter (mentioned above) is also labelled by Externald. As
we will see below, the behaviour of the CDDC component
is largely independent of the keyboard data it receives from
the current domain, except when the program counter is
e.g. Ferry(dt), in which case the program counter’s value
directly encodes potential keyboard data dt from the current
domain. Clearly values of this form for the program counter
contain information of the current domain. However, all
other information contained in the program counter (besides
dt) contains only publicly observable information (i.e. that
derived from Internal data).
This allows the remainder of the information in the CDDC’s
program counter to be labelled Internal. Speciﬁcally, Internal∼
relates two program counter values that are equal, as well as
any two values of the form Ferry(dt) and Ferry(dt’). The re-
mainder of the state not labelled by any Externald label (i.e.
the Keyboard’s mouse src and disable ﬂag, plus the CDDC’s
mouse buﬀer, cur coord, dom ord and aug) is all labelled In-
ternal. It is precisely this state that controls when domain
switches occur.
The conﬁdentiality security property is sound and com-
plete to one over entire execution traces, for which we refer
the reader to [11].
6.3 Discussion
The formal analysis was extremely helpful internally to
the development, as a careful attempt to write down what
was meant by the technical ideas in the design. In particu-
lar, it suggested several covert channels – discussed in Sec-
tion 7.2, and a closer analysis of the keyboard state. More-
over, the implementations above for policy and the label
equivalence relations were just one choice of many, which
led to explorations of the alternatives.
The security property above rules out information ﬂows
from the user’s keyboard input to any but the currently ac-
tive domain. It is predicated on the assumption of a faithful
user who never suﬀers confusion about which domain is cur-
rently active (i.e. always heeds the banner rendered by the
CDDC at the top of their screen).
However, importantly, it permits information ﬂows from
the user’s mouse inputs to all domains. This means that a
CDDC implementation that broadcast all mouse data to all
domains would satisfy the property.
A more nuanced model and security deﬁnition might apply
a more ﬁne-grained (state-dependent) labelling to the mouse
input stream, to allow only the mouse clicks that will cause
a domain switch to be labelled Internal. One could then
specify that all other mouse input should be directed only
to the currently active domain. We leave this exploration
for future work.
7. SECURITY ANALYSIS
Achieving perfect security in an MLS user interface is a
diﬃcult proposition, in such systems, security is often in
conﬂict with the usability of the user interface. Increased
usability is usually obtained through complexity, making
it more diﬃcult to evaluate and accredit a solution. The
CDDC gives a user most of the functionality they desire,
whilst minimising the trusted computing elements. Cus-
tom hardware, small trusted modules for composition and
switching, and enforced unidirectional ﬂows provide a real-
istic target for formal analysis and subsequent evaluation as
a high assurance device.
The authors believe that usable security, even in the pres-
ence of small covert channels is better than perfect, unusable
security that drives a user to bypass security mechanisms.
7.1 Architectural Security
Keeping most of the functionality untrusted, including the
graphics subsystems, operating environments, and existing
commodity computing infrastructure can reduce the total
cost of the solution. The most contentious decision is al-
lowing the domain-side software and hence the windowing
information to remain untrusted – this also allows the video
processing blocks to remain untrusted. Malicious software
could attempt to thwart security by sending incorrect in-
formation, such as locations of non-windows, or by rapidly
changing the size, number, and location of the windows, or
by sending no information. The CDDC hardware is trusted
to correctly decorate each region and always display the cor-
rect active domain banner. Whilst the display might look
confusing, the banner can still be trusted and incorrectly
drawn windows should alert users to potential issues.
7.2 Covert Channel Analysis
The tension between usability and security also inﬂuences
the covert channels present in the CDDC. Our goal was to
ensure no information ﬂowed between domains, and from
a hardware perspective this has been achieved – under the
implicit assumption that we trust the external keyboard,
mouse and display. A malicious display cannot leak informa-
tion back to another domain through the CDDC, the threat
is equivalent to a malicious display attached to a standalone
system. The mouse only provides input to the CDDC, which
always displays the correct location of the cursor. A mali-
cious mouse could annoy a user and at worse, provide an
increased channel for some automated attacks discussed be-
low. A malicious keyboard could act as a storage channel –
recording keystrokes from one domain and replaying them
to another domain. The CDDC can mitigate against this by
powering down the keyboard between domain switches.
The cursor is the only element that crosses the trust bound-
ary between all the domains – the movement and switching
activities are potentially visible to more than one domain.
We believe the only timing covert channels present in the
system are through the user and the use of this domain
crossing cursor. Two types of covert channel are explored
here, incidental channels and malicious attacks. As the cur-
sor moves across the screen, the mouse position is sent to the
active desktop. When a domain switch occurs the cursor po-
sition is then directed to the newly active domain. Although
a domain does not know when it has been switched to, or
from, monitoring cursor activity may give some indication.
By examining the cursor position when an incidental do-
main switch occurs, the previously active domain may gain
some knowledge about the positions of windows in the newly
active domain. Information can then be transferred from one
domain to another encoded within the window positions.
In general the window positions are under user control,
and given the likely ﬁdelity of window positions discernible
through a domain switch, orchestrating data leakage through
this channel would prove diﬃcult.
It is possible to mitigate against this timing channel, for
example extra mouse movements could be constantly in-
jected into all non-active domains, this may have unintended
side eﬀects, such as tool tips and other mouse hover function-
alities occurring. Other policy-based methods can also pre-
vent or limit these timing covert channels at the expense of
usability. For example: the CDDC could only pass through
cursor clicks and not cursor movement to the domains; cur-
sor movement could be passed through only when above
an identiﬁed window; the CDDC could limit the number of
domain switches, could enforce switching using physical or
virtual buttons, or provide a keyboard shortcut to switch
domains. Ideally switching using mouse clicks on windows
is the most natural interaction with the CDDC interface and
the policy enforced would be a matter for accreditation.
In a more malicious scenario, if a user can be enticed to
click somewhere speciﬁc in one domain through actions of
another domain, then information may be transferred. One
way to entice a user to click somewhere speciﬁc is to have
a malicious non-active domain quickly display and hide a
dialog box, hoping it would be composited and visible. A
user then attempts to click on the dialog box but it disap-
pears and instead clicks at a speciﬁc location in the currently
active domain, transferring information between domains.
This activity would be quite orchestrated and user train-
ing and awareness should highlight the impact of unusual
behaviours in the system.
7.3 Cognitive Threats
Another threat to the CDDC is cognitive, whereby mode
confusion may cause a user to act in a way that leaks infor-
mation either directly, for example by typing in the incorrect
domain, or indirectly, for example by incorrectly believing
certain information viewed to originate from a speciﬁc do-
main. The ability for a user to successfully operate within
such an MLS user interface is part of our ongoing research.
One important cognitive requirement is that a user knows
when a domain switch has occurred. At the moment, the
CDDC alerts a user to this change by changing the trusted
banner. A domain switch may require a more distinctive
action, for example, an audible alert, or a ﬂash of the screen.
Speciﬁc cognitive threats to the CDDC include spooﬁng
attacks, whereby a domain draws a window within one of its
own windows, does not report the sub-window and draws its
own decoration the colour of another domain. While a user
might click on this content, the trusted banner will always
correctly show where the keyboard and mouse are directed.
Malicious software can try and confuse a user by sending