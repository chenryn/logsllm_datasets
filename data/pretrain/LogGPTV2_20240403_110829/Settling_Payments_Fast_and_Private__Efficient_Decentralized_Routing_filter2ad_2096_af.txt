attempts, the slight increase may not warrant multiple attempts.
For all algorithms but Ford-Fulkerson, the success ratio
was considerably below 100%. It stands to reason that a lot of
users might not be willing to accept a failure rate of 10%
or more. Note that a failure to route does not reduce the
funds of any user, so there is no loss in funds associated with
a routing failure. Furthermore, in a non-static environment,
users can retry the transaction at a later point in time after
the network has sufﬁciently changed for it to work. If neither
failure nor waiting is an option, we could apply Ford-Fulkerson
on failure. By reducing the transactions that require Ford-
Fulkerson to 10%, we still considerably improve the efﬁciency
in comparison to a network relying exclusively on Ford-
Fulkerson at the price of a slight increase in delay due to the
preceding use of SpeedyMurmurs. In addition, we hope that
with increasing popularity, both the connectivity of the PBT
networks and the amount of available funds increase beyond
the current state of the Ripple network, which is bound to
entail a higher probability of success.
Impact of Dynamics: We evaluated the impact of
dynamics on the performance of SpeedyMurmurs and Silent-
Whispers. As stated above, the impact of dynamics is par-
ticularly of interest to decide if on-demand stabilization is
indeed more efﬁcient than periodic stabilization. To better
comprehend the reasons underlying our results, Fig. 3a dis-
plays the number of transactions and link changes per epoch
for the Ripple dataset. While the number of transactions did
not vary greatly over the period of three years, link creations
and modiﬁcations were frequent in some short intervals but
rare during the remaining observation period. The frequency
of link changes directly relates to the stabilization overhead
of SpeedyMurmurs, as indicated by Fig. 3b. Whereas the
stabilization overhead was usually below 100 messages per
epoch, the overhead increased to about 109 messages during
periods of frequent change. Note that only the ﬁrst two of the
four batches of link changes resulted in a drastically increased
need for stabilization. After the ﬁrst two batches, spanning
trees had formed and new link additions mostly created short-
cuts that did not require changes to the trees. In contrast, the
stabilization overhead of SilentWhispers only depended on the
number of edges in the network and hence increased as the
graph grows over time. During intervals of frequent change,
the stabilization overhead of SilentWhispers was considerably
lower than SpeedyMurmurs’ stabilization overhead. However,
during ‘normal’ operation, SilentWhispers’ stabilization over-
head exceeded the overhead of SpeedyMurmurs by more than
2 orders of magnitude. We evaluated the success in relation
to Ford-Fulkerson and hence divided the actual success ratio
of each epoch by the success ratio of Ford-Fulkerson for the
corresponding epoch. As can be seen from Fig. 3c, the success
could exceed 1 if an alternative routing algorithm exhibited
13
 0 0.2 0.4 0.6 0.8 1 0 1 2 3 4 5 6 7 8Success RatioTreesSilentWhispersSpeedyMurmurs 0 5 10 15 20 25 30 0 1 2 3 4 5 6 7 8(Hop) DelayTreesSilentWhispersSpeedyMurmurs 0 0.2 0.4 0.6 0.8 1 1 2 3 4 5 6 7 8 9 10Success RatioAttemptsSilentWhispersSpeedyMurmurs 0 5000 10000 15000 20000 25000 0 100 200 300 400 500 600 700CountEpoch NumberTransactionsSet Link 1 100 10000 1e+06 1e+08 1e+10 0 100 200 300 400 500 600 700StabilizationEpoch NumberSilentWhispersSpeedyMurmurs 0 0.2 0.4 0.6 0.8 1 0 100 200 300 400 500 600 700SuccessEpoch NumberSilentWhispersSpeedyMurmursa higher success ratio. Note that higher success ratios were
indeed possible due to the fact that different routing algorithms
resulted in different payments and hence different network
states. Different network states implied a different set of
possible transactions, so that a transaction could fail for Ford-
Fulkerson but succeed for SilentWhispers or SpeedyMurmurs.
In comparison, SpeedyMurmurs and SilentWhispers achieved
similar success ratios for most of the time; however, at the
end of the simulation interval, SilentWhispers outperformed
SpeedyMurmurs. The sudden increase in success correlates
with the addition or change of many links, as can be seen from
Fig. 3a. The additional links increase the density of the graph,
leading to shorter paths, and hence a higher success probability.
The fact that SilentWhispers achieves a higher success ratio
than SpeedyMurmurs could be due to the tree structure:
SilentWhispers maintains breadth-ﬁrst search trees whereas
SpeedyMurmurs initially constructs breadth-ﬁrst search trees
but does not change the parent of a node if a new neighbor
offers a shorter path to the root. The longer paths to the root
could have negative effects on the probability of success. As
the actual success ratio of all considered algorithms is low
during later epochs, e.g., frequently below 5%, the result might
be an artifact of our dataset and post-processing method.
We hence answered our ﬁve initial research questions:
• SpeedyMurmurs achieved a higher performance than
SilentWhispers with regard to all considered metrics for
the static scenario.
• On-demand stabilization and embedding-based routing
had a positive effect on all 5 performance metrics. In
contrast,
the use of random credit assignment might
decrease the success ratio slightly. However, when used
in combination with embedding-based routing, the effect
was mostly negated.
• As expected, Ford-Fulkerson usually achieved a higher
success than both SpeedyMurmurs and SilentWhispers.
However, the algorithm resulted in an enormous trans-
action overhead, exceeding the overhead of the other
algorithms by 2 to 3 orders of magnitude.
• An increased number of trees or attempts to perform a
transaction did not considerably increase the success ratio
of SpeedyMurmurs but incurred increased overheads.
• The evolution of the PBT network affects the performance
of SpeedyMurmurs considerably. Stabilization overhead
and success ratio vary considerably depending on the
frequency of transactions and link changes.
The dynamic evaluation suggests working on the design of an
alternative spanning tree maintenance algorithm. In particular,
the results raise the question of suitable criteria for dynami-
cally switching between on-demand and periodic stabilization.
Indeed, as SilentWhispers is more efﬁcient during periods of
frequent change but results in higher overhead otherwise, such
a switching mechanism could further reduce the communica-
tion overhead and hence increase scalability.
VI. RELATED WORK
Maximizing the set of possible transactions in a credit
network is NP-hard [7]. Instead, many existing systems have
opted for considering one transaction at a time and applying the
max-ﬂow approach [5] as a routing algorithm. Nevertheless,
existing algorithms [4] run in O(V 3) or O(V 2 log(E)) time
and hence do not scale to a growing number of users and
transactions [22], [35].
The pioneering credit networks Ripple and Stellar main-
tain their entire PBT networks on public blockchain ledgers.
Although this information can be leveraged to perform routing
efﬁciently, it also trivially leaks sensitive information such as
credit links/relationships and ﬁnancial activity in the form of
transactions. Instead, current proposals rely on a decentralized
PBT network requiring no public log.
Prihodko et al. recently proposed Flare [23], a routing
algorithm for the Lightning Network, a network of Bitcoin
payment channels among Bitcoin users that enables off-chain
transactions [21]. In Flare, all nodes keep track of their k-
neighborhood; i.e., nodes at a hop distance of at most k and
all links between them. In addition, each node maintains paths
to a set of nearby beacon nodes.
This routing algorithm reveals the weight of all links in
the k-neighborhood, usually for k ≥ 3. This results in a
privacy concern as the weight of a link between two users
is exposed to users other than those two. Furthermore, nodes
spread all updates to the k-neighborhood, meaning each credit
change results in possibly hundreds of messages, which is
highly inefﬁcient for frequent transactions and hence changes
in available credit.
Canal [35] presents the ﬁrst efﬁcient implementation of
tree-only routing applied to looking for paths in credit net-
works. A trusted central party computes the shortest paths
in the spanning trees between sender and receiver. If these
paths provide enough credit to settle a transaction, the routing
terminates successfully. Otherwise,
it fails. In the face of
network dynamics, the central server re-computes spanning
trees constantly. Due to maintaining a central server, Canal [35]
has severe privacy and security drawbacks.
PrivPay [17] increases the privacy of Canal by using trusted
hardware at the central server. However, PrivPay relies on a
similar landmark technique as Canal and is also a centralized
solution, therefore the scalability is still low and the issue
of a single point of failure remains unsolved. Additionally,
the PrivPay paper introduces for the ﬁrst time the notions of
value privacy and sender/receiver privacy for payments in a
credit network. In this work, we deﬁne the privacy notions for
routing in a PBT network as a building block not only for
credit networks but also for any PBT network.
SilentWhispers [11] uses landmark routing in a fully
distributed credit network. Both sender and receiver send
messages in the direction of the landmarks, which constitute
rendezvous nodes. In other words, paths in SilentWhispers
are concatenations of the sender’s path to a landmark and
the path from said landmark to the receiver. All paths pass a
landmark, even if sender and receiver happen to be in the same
branch, potentially leading to performance issues. However,
as we discuss throughout
the
routing algorithm proposed in this work, outperforms the
routing approach proposed in SilentWhispers while achieving
the privacy notions of interest.
this paper, SpeedyMurmurs,
Malavolta et al. [12] recently proposed Rayo and Fulgor,
two payment-channel networks (i.e., PBT networks) that pro-
14
vide a necessary tradeoff between privacy and concurrency.
Their study of concurrency could be leveraged to extend how
concurrency is handled in SpeedyMurmurs. Nevertheless, they
do not tackle the path selection problem. Thus, SpeedyMur-
murs is an excellent candidate to complement Rayo and Fulgor.
Summary: Existing routing approaches often disregard
privacy. Most of them require centralization or shared public
information; SilentWhispers is the only existing distributed
PBT network focusing on privacy. However,
it relies on
a distributed landmark routing technique that is potentially
inefﬁcient. Our in-depth performance and privacy evaluation
shows that SpeedyMurmurs provides higher overall perfor-
mance when compared to state-of-the-art routing approaches,
while achieving the privacy notions of interest.
VII. CONCLUSION AND FUTURE WORK
In this work, we design SpeedyMurmurs, an efﬁcient
routing algorithm for completely decentralized PBT networks.
Our extensive simulation study and analysis indicate that
SpeedyMurmurs is highly efﬁcient and achieves a high prob-
ability of success while still providing value privacy as well
as sender/receiver privacy against a strong network adversary.
As these privacy notions are essential for PBT applications,
SpeedyMurmurs is an ideal routing algorithm for decentralized
credit networks and payment channel networks, as well as for
emerging inter-blockchain algorithms.
As our results indicate that on-demand and periodic stabi-
lization are suitable for different phases of a PBT network’s
evolution, future work can extend upon our results by in-
vestigating the option of dynamically switching between on-
demand and periodic stabilization.
ACKNOWLEDGEMENTS
This work beneﬁted from the use of the CrySP RIPPLE
Facility at University of Waterloo and is partially supported by
an Intel/CERIAS RA and NSERC grant RGPIN-2017-03858.
REFERENCES
[1] Frederik Armknecht, Ghassan O Karame, Avikarsha Mandal, Franck
Youssef, and Erik Zenner. Ripple: Overview and Outlook. In Interna-
tional Conference on Trust and Trustworthy Computing, 2015.
[2] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari
Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine Shi,
Emin G¨un Sirer, Dawn Song, and Roger Wattenhofer. On scaling
decentralized blockchains. In FC, 2016.
[3] Dimitri DeFigueiredo and Earl T. Barr. TrustDavis: A Non-Exploitable
Online Reputation System. In E-Commerce Technology, 2005.
[4] Yeﬁm Dinitz. Dinitz’s Algorithm: The Original Version and Even’s
Version. In Theoretical Computer Science. 2006.
[5] Lester R Ford and Delbert R Fulkerson. Maximal Flow Through a
Network. Canadian Journal of Mathematics, 8(3), 1956.
[6] Ethereum Foundation. Ethereum Project. https://www.ethereum.org/.
Accessed July 2017.
[7] Arpita Ghosh, Mohammad Mahdian, Daniel M. Reeves, David M.
Pennock, and Ryan Fugger. Mechanism design on trust networks. In
Internet and Network Economics, 2007.
[8] Andreas Hoefer, Stefanie Roos, and Thorsten Strufe. Greedy Embed-
ding, Routing and Content Addressing for Darknets. In NetSys, 2013.
[9] Amrit Kumar, Cl´ement Fischer, Shruti Tople, and Prateek Saxena.
A traceability analysis of Monero’s blockchain. Cryptology ePrint
Archive, Report 2017/338, 2017. http://eprint.iacr.org/2017/338.
[10] Lightning Network Team. Atomic cross-chain trading.
https://en.
bitcoin.it/wiki/Atomic cross-chain trading. Accessed July 2017.
[11] Giulio Malavolta, Pedro Moreno-Sanchez, Aniket Kate, and Matteo
SilentWhispers: Enforcing Security and Privacy in Credit
Maffei.
Networks. In NDSS, 2017.
[12] Giulio Malavolta, Pedro Moreno-Sanchez, Aniket Kate, Matteo Maffei,
and Srivatsan Ravi. Concurrency and Privacy with Payment-Channel
Networks. In CCS, 2017.
[13] Sarah Meiklejohn, Marjori Pomarole, Grant Jordan, Kirill Levchenko,
Damon McCoy, Geoffrey M. Voelker, and Stefan Savage. A ﬁstful of
bitcoins: Characterizing payments among men with no names. In IMC,
2013.
[14] Andrew Miller, Malte M¨oser, Kevin Lee, and Arvind Narayanan. An
empirical analysis of linkability in the Monero blockchain. CoRR,
abs/1704.04299, 2017.
[15] Alan Mislove, Gaurav Oberoi, Ansley Post, Charles Reis, Peter Dr-
uschel, and Dan S. Wallach. AP3: Cooperative, decentralized anony-
mous communication. In ACM SIGOPS European Workshop, 2004.
[16] Prateek Mittal and Nikita Borisov. Shadowwalker: Peer-to-peer anony-
mous communication using redundant structured topologies. In CCS,
2009.
[17] Pedro Moreno-Sanchez, Aniket Kate, Matteo Maffei, and Kim Pecina.
Privacy Preserving Payments in Credit Networks: Enabling trust with
privacy in online marketplaces. In NDSS, 2015.
[18] Pedro Moreno-Sanchez, Muhammad Bilal Zafar, and Aniket Kate.
Listening to Whispers of Ripple: Linking Wallets and Deanonymizing
Transactions in the Ripple Network. In PETS, 2016.
[19] Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash Sys-
tem. http://fastbull.dl.sourceforge.net/project/bitcoin/Design%20Paper/
bitcoin.pdf/bitcoin.pdf, 2011.
[20] Christos H Papadimitriou and David Ratajczak. On a Conjecture
In Algorithmic Aspects of Wireless
Related to Geometric Routing.
Sensor Networks, 2004.
Joseph Poon and Thaddeus Dryja.
The Bitcoin Lightning Net-
work: Scalable Off-chain Instant Payments. https://lightning.network/
lightning-network-paper.pdf, 2015.
[21]
[22] Ansley Post, Vijit Shah, and Alan Mislove. Bazaar: Strengthening user
reputations in online marketplaces. In NSDI, 2011.
[23] Pavel Prihodko, Slava Zhigulin, Mykola Sahno, Aleksei Ostrovskiy, and
Olaoluwa Osuntokun. Flare: An Approach to Routing in Lightning Net-
work.
http://bitfury.com/content/5-white-papers-research/whitepaper
ﬂare an approach to routing in lightning network 7 7 2016.pdf,
2016.
[24] Raiden network. http://raiden.network/. Accessed July 2017.
[25] Real-time gross settlement.
https://en.wikipedia.org/wiki/Real-time
gross settlement. Accessed July 2017.
[26] Fergal Reid and Martin Harrigan. An Analysis of Anonymity in the
Bitcoin System. In Yaniv Altshuler, Yuval Elovici, Armin B. Cremers,
Nadav Aharony, and Alex Pentland, editors, Security and Privacy in
Social Networks. Springer, 2013.
[27] Michael K. Reiter and Aviel D. Rubin. Crowds: Anonymity for web
transactions. ACM Trans. Inf. Syst. Secur., 1(1):66–92, 1998.
[28] Ripple website. https://ripple.com/. Accessed July 2017.
[29] Stefanie Roos, Ma Beck, and Thorsten Strufe. VOUTE—Virtual
Overlays Using Tree Embeddings. CoRR, abs/1601.06119, 2016.
[30] Stefanie Roos, Martin Beck, and Thorsten Strufe. Anonymous Ad-
In
dresses for Efﬁcient and Resilient Routing in F2F Overlays.
INFOCOM, 2016.
[31] Benjamin Schiller and Thorsten Strufe. GTNA 2.0-A Framework for
Rapid Prototyping and Evaluation of Routing Algorithms. In Summer
Computer Simulation Conference, 2013.
[32] Stellar website. https://www.stellar.org/. Accessed July 2017.
[33] Stefan Thomas and Evan Schwartz. A Protocol for Interledger Pay-
ments. https://interledger.org/interledger.pdf, 2015.
[34] P. F. Tsuchiya. The Landmark Hierarchy: A New Hierarchy for Routing
in Very Large Networks. In SIGCOMM, 1988.
[35] Bimal Viswanath, Mainack Mondal, Krishna P. Gummadi, Alan Mis-
love, and Ansley Post. Canal: Scaling Social Network-based Sybil
Tolerance Schemes. In EuroSys, 2012.
[36] XRP Chat.
Interledger payment
https://www.
xrpchat.com/topic/5660-interledger-payment-through-7-ledgers/, 2017.
Accessed July 2017.
through 7 ledgers.
15