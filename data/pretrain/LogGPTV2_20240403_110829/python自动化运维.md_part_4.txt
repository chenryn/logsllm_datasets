ns2.baidu.com.
ns7.baidu.com.
ns3.baidu.com.
（4）CNAME记录
实现CNAME记录查询方法源码。
【/home/test/dnspython/simple4.py】
#！/usr/bin/env python
import dns.resolver
domain = raw_input（'Please input an domain： '）
cname = dns.resolver.query（domain， 'CNAME'） #指定查询类型为CNAME记录
for i in cname.response.answer： #结果将回应cname后的目标域名
for j in i.items：
print j.to_text（）
结果将返回cname后的目标域名。
1.3.3 实践：DNS域名轮循业务监控
大部分的DNS解析都是一个域名对应一个IP地址，但是通过DNS轮循技术可
以做到一个域名对应多个IP，从而实现最简单且高效的负载平衡，不过此方案最
大的弊端是目标主机不可用时无法被自动剔除，因此做好业务主机的服务可用
监控至关重要。本示例通过分析当前域名的解析IP，再结合服务端口探测来实现
自动监控，在域名解析中添加、删除IP时，无须对监控脚本进行更改。实现架构
图如图1-1所示。
图1-1 DNS多域名业务服务监控架构图
1.步骤
1）实现域名的解析，获取域名所有的A记录解析IP列表；
2）对IP列表进行HTTP级别的探测。
2.代码解析
本示例第一步通过dns.resolver.query（）方法获取业务域名A记录信息，查
询出所有IP地址列表，再使用httplib模块的request（）方法以GET方式请求监控
页面，监控业务所有服务的IP是否服务正常。
【/home/test/dnspython/simple5.py】
#！/usr/bin/python
import dns.resolver
import os
import httplib
iplist=[] #定义域名IP列表变量
appdomain="www.google.com.hk" #定义业务域名
def get_iplist（domain=""）： #域名解析函数，解析成功IP将被追加到iplist
try：
A = dns.resolver.query（domain， 'A'） #解析A记录类型
except Exception，e：
print "dns resolver error："+str（e）
return
for i in A.response.answer：
for j in i.items：
iplist.append（j.address） #追加到iplist
return True
def checkip（ip）：
checkurl=ip+"：80"
getcontent=""
httplib.socket.setdefaulttimeout（5） #定义http连接超时时间（5秒）
conn=httplib.HTTPConnection（checkurl） #创建http连接对象
try：
conn.request（"GET"， "/"，headers = {"Host"： appdomain}） #发起URL请
求，添
#加host主机头
r=conn.getresponse（）
getcontent =r.read（15） #获取URL页面前15个字符，以便做可用性校验
finally：
if getcontent==""： #监控URL页的内容一般是事先定义好的，比
如
#“HTTP200”等
print ip+" [OK]"
else：
print ip+" [Error]" #此处可放告警程序，可以是邮件、短信通知
if __name__=="__main__"：
if get_iplist（appdomain） and len（iplist）>0： #条件：域名解析正确且至少返
回一个IP
for ip in iplist：
checkip（ip）
else：
print "dns resolver error."
我们可以将此脚本放到crontab中定时运行，再结合告警程序，这样一个基于
域名轮循的业务监控已完成。运行程序，显示结果如下：
# python simple5.py
74.125.31.94 [OK]
74.125.128.199 [OK]
173.194.72.94 [OK]
从结果可以看出，域名www.google.com.hk解析出3个IP地址，并且服务都是
正常的。
第2章 业务服务监控详解
业务服务监控是运维体系中最重要的环节，是保证业务服务质量的关键手
段。如何更有效地实现业务服务，是每个运维人员应该思考的问题，不同业务
场景需定制不同的监控策略。Python在监控方面提供了大量的第三方工具，可以
帮助我们快速、有效地开发企业级服务监控平台，为我们的业务保驾护航。本
章涉及文件与目录差异对比方法、HTTP质量监控、邮件告警等内容。
2.1 文件内容差异对比方法
本节介绍如何通过difflib模块实现文件内容差异对比。difflib作为Python的标
准库模块，无需安装，作用是对比文本之间的差异，且支持输出可读性比较强
的HTML文档，与Linux下的diff命令相似。我们可以使用difflib对比代码、配置
文件的差别，在版本控制方面是非常有用。Python 2.3或更高版本默认自带difflib
模块，无需额外安装，我们先通过一个简单的示例进行了解。
2.1.1 示例1：两个字符串的差异对比
本示例通过使用difflib模块实现两个字符串的差异对比，然后以版本控制风
格进行输出。
【/home/test/difflib/simple1.py】
#！/usr/bin/python
import difflib
text1 = """text1： #定义字符串1
This module provides classes and functions for comparing sequences.
including HTML and context and unified diffs.
difflib document v7.4
add string
"""
text1_lines = text1.splitlines（） #以行进行分隔，以便进行对比
text2 = """text2： #定义字符串2
This module provides classes and functions for Comparing sequences.
including HTML and context and unified diffs.
difflib document v7.5"""
text2_lines = text2.splitlines（）
d = difflib.Differ（） #创建Differ（）对象
diff = d.compare（text1_lines， text2_lines） # 采用compare方法对字符串进行比较
print '\n'.join（list（diff））
本示例采用Differ（）类对两个字符串进行比较，另外difflib的
SequenceMatcher（）类支持任意类型序列的比较，HtmlDiff（）类支持将比较结
果输出为HTML格式，示例运行结果如图2-1所示。
图2-1 示例运行结果
为方便大家理解差异关系符号，表2-1对各符号含义进行说明。
表2-1 符号含义说明
2.1.2 生成美观的对比HTML格式文档
采用HtmlDiff（）类的make_file（）方法就可以生成美观的HTML文档，对
示例1中代码按以下进行修改：
d = difflib.Differ（）
diff = d.compare（text1_lines， text2_lines）
print '\n'.join（list（diff））
替换成：
d = difflib.HtmlDiff（）
print d.make_file（text1_lines， text2_lines）
将新文件命名为simple2.py，运行# python simple2.py>diff.html，再使用浏览
器打开diff.html文件，结果如图示2-2所示，HTML文档包括了行号、差异标志、
图例等信息，可读性增强了许多。
图2-2 在浏览器中打开diff.html文件
2.1.3 示例2：对比Nginx配置文件差异
当我们维护多个Nginx配置时，时常会对比不同版本配置文件的差异，使运
维人员更加清晰地了解不同版本迭代后的更新项，实现的思路是读取两个需对
比的配置文件，再以换行符作为分隔符，调用difflib.HtmlDiff（）生成HTML格
式的差异文档。实现代码如下：
【/home/test/difflib/simple3.py】
#！/usr/bin/python
import difflib
import sys
try：
textfile1=sys.argv[1] #第一个配置文件路径参数
textfile2=sys.argv[2] #第二个配置文件路径参数
except Exception，e：
print "Error："+str（e）
print "Usage： simple3.py filename1 filename2"
sys.exit（）
def readfile（filename）： #文件读取分隔函数
try：
fileHandle = open （filename， 'rb' ）
text=fileHandle.read（）.splitlines（） #读取后以行进行分隔
fileHandle.close（）
return text
except IOError as error：
print（'Read file Error：'+str（error））
sys.exit（）
if textfile1=="" or textfile2==""：
print "Usage： simple3.py filename1 filename2"
sys.exit（）
text1_lines = readfile（textfile1） #调用readfile函数，获取分隔后的字符串
text2_lines = readfile（textfile2）
d = difflib.HtmlDiff（） #创建HtmlDiff（）类对象
print d.make_file（text1_lines， text2_lines） #通过make_file方法输出HTML格式
的比对结果
运行如下代码：
# python simple3.py nginx.conf.v1 nginx.conf.v2 > diff.html
从图2-3中可以看出nginx.conf.v1与nginx.conf.v2配置文件存在的差异。
参考提示 2.1节示例参考官网文档
http://docs.python.org/2/library/difflib.html。
图2-3 nginx.conf.v1与nginx.conf.v2配置文件对比结果
2.2 文件与目录差异对比方法
当我们进行代码审计或校验备份结果时，往往需要检查原始与目标目录的文
件一致性，Python的标准库已经自带了满足此需求的模块filecmp。filecmp可以
实现文件、目录、遍历子目录的差异对比功能。比如报告中输出目标目录比原
始多出的文件或子目录，即使文件同名也会判断是否为同一个文件（内容级对
比）等，Python 2.3或更高版本默认自带filecmp模块，无需额外安装，下面进行
详细介绍。
2.2.1 模块常用方法说明
filecmp提供了三个操作方法，分别为cmp（单文件对比）、cmpfiles（多文
件对比）、dircmp（目录对比），下面逐一进行介绍：
·单文件对比，采用filecmp.cmp（f1，f2[，shallow]）方法，比较文件名为f1
和f2的文件，相同返回True，不相同返回False，shallow默认为True，意思是只根
据os.stat（）方法返回的文件基本信息进行对比，比如最后访问时间、修改时
间、状态改变时间等，会忽略文件内容的对比。当shallow为False时，则
os.stat（）与文件内容同时进行校验。
示例：比较单文件的差异。
>>> filecmp.cmp（"/home/test/filecmp/f1"，"/home/test/filecmp/f3"）
True
>>> filecmp.cmp（"/home/test/filecmp/f1"，"/home/test/filecmp/f2"）
False
·多文件对比，采用filecmp.cmpfiles（dir1，dir2，common[，shallow]）方
法，对比dir1与dir2目录给定的文件清单。该方法返回文件名的三个列表，分别
为匹配、不匹配、错误。匹配为包含匹配的文件的列表，不匹配反之，错误列
表包括了目录不存在文件、不具备读权限或其他原因导致的不能比较的文件清
单。
示例：dir1与dir2目录中指定文件清单对比。
两目录下文件的md5信息如下，其中f1、f2文件匹配；f3不匹配；f4、f5对应
目录中不存在，无法比较。
[root@SN2013-08-020 dir2]# md5sum *
d9dfc198c249bb4ac341198a752b9458 f1
aa9aa0cac0ffc655ce9232e720bf1b9f f2
33d2119b71f717ef4b981e9364530a39 f3
d9dfc198c249bb4ac341198a752b9458 f5
[root@SN2013-08-020 dir1]# md5sum *
d9dfc198c249bb4ac341198a752b9458 f1
aa9aa0cac0ffc655ce9232e720bf1b9f f2
d9dfc198c249bb4ac341198a752b9458 f3
410d6a485bcf5d2d2d223f2ada9b9c52 f4
使用cmpfiles对比的结果如下，符合我们的预期。
>>>filecmp.cmpfiles（"/home/test/filecmp/dir1"，"/home/test/filecmp/dir2"，
['f1'，'f2'，'f3'，'f4'，'f5']）
（['f1'， 'f2']， ['f3']， ['f4'， 'f5']）
·目录对比，通过dircmp（a，b[，ignore[，hide]]）类创建一个目录比较对
象，其中a和b是参加比较的目录名。ignore代表文件名忽略的列表，并默认为
['RCS'，'CVS'，'tags']；hide代表隐藏的列表，默认为[os.curdir，os.pardir]。
dircmp类可以获得目录比较的详细信息，如只有在a目录中包括的文件、a与b都
存在的子目录、匹配的文件等，同时支持递归。
dircmp提供了三个输出报告的方法：
·report（），比较当前指定目录中的内容；
·report_partial_closure（），比较当前指定目录及第一级子目录中的内容；
·report_full_closure（），递归比较所有指定目录的内容。
为输出更加详细的比较结果，dircmp类还提供了以下属性：
·left，左目录，如类定义中的a；
·right，右目录，如类定义中的b；
·left_list，左目录中的文件及目录列表；
·right_list，右目录中的文件及目录列表；
·common，两边目录共同存在的文件或目录；
·left_only，只在左目录中的文件或目录；
·right_only，只在右目录中的文件或目录；
·common_dirs，两边目录都存在的子目录；
·common_files，两边目录都存在的子文件；
·common_funny，两边目录都存在的子目录（不同目录类型或os.stat（）记
录的错误）；
·same_files，匹配相同的文件；
·diff_files，不匹配的文件；
·funny_files，两边目录中都存在，但无法比较的文件；
·subdirs，将common_dirs目录名映射到新的dircmp对象，格式为字典类型。
示例：对比dir1与dir2的目录差异。
通过调用dircmp（）方法实现目录差异对比功能，同时输出目录对比对象所
有属性信息。
【/home/test/filecmp/simple1.py】
import filecmp
a="/home/test/filecmp/dir1" #定义左目录
b="/home/test/filecmp/dir2" #定义右目录
dirobj=filecmp.dircmp（a，b，['test.py']） #目录比较，忽略test.py文件
#输出对比结果数据报表，详细说明请参考filecmp类方法及属性信息