Inspired by the way in which package managers handle open-
source packages, we designed our system to be completely
automated. As a result, any program available as a Debian
package(s) can be checked by just specifying the package
name. Given the package name(s) for the program, ARBITRAR
automatically fetches and builds the program into LLVM
bitcode using Apt-tools [26].
% fetch and build the debian packages.
$ arbitrar collect --deb libpng --deb pngtools
% ---or---
% fetch all the packages in the provided json file.
$ arbitrar collect packages.json
The trace generation and feature encoding for an API method,
say binder_inner_proc_lock, of the built programs is done
by using the following command:
$ arbitrar analyze -i binder_inner_proc_lock
Finally, active learning through user interaction can be
commenced by using the following command:
$ arbitrar learn active binder_inner_proc_lock
B. Active learning
Our active learning technique interacts with the user by
presenting a trace at the source-code level, and the user
provides feedback by entering Y or N, which means whether
the presented trace is buggy or not. Figure 6 shows an
example of user interaction wherein the trace is presented by
highlighting the corresponding source lines. As the trace is path
sensitive, it is easy for the user to reason about the sequence
of corresponding program states and provide feedback.
V. EVALUATION
In this section, we evaluate ARBITRAR in terms of the
following aspects:
• Effectiveness: How effective is ARBITRAR compared to
APISAN, a state-of-the-art API misuse detection tool?
• Impact: Can ARBITRAR ﬁnd previously unknown API
misuse bugs?
• Scalability: Does ARBITRAR scale to large real-world
codebases and still quickly learn from and respond to user
feedback?
• Extensibility: How extensible is ARBITRAR to other usage
scenarios?
Our experiments are conducted on a 40-core machine with
768 GB RAM. We set the context depth to be zero for all our
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1407
// bug curl3
Missing return value check
1
2
3 (cid:13)fp = BIO_new(BIO_s_file());
4
5
6
7
8
9
10
11
// if(fp == NULL) {
// failf(data,
// "BIO_new return NULL, " OSSL_PACKAGE
// " error %s",
// ossl_strerror(ERR_get_error(), error_buffer,
//
// return 0;
//}
sizeof(error_buffer)) );
Listing 2: Bug found by ARBITRAR and missed by APISAN
in Curl of Bmu bug-benchmark.
bug is not presented within the ﬁrst two interactions then we
consider the bug to be not found by ARBITRAR, and, therefore
a false negative. If Arf = ∞, then the user can check all traces
and there will be no false negatives. Similarly, if Arf = 0,
none of the bugs will be found (i.e., false negatives = 100%)
as ARBITRAR gets no feedback and may fail to learn. Note that
Arf is not the total number of traces that should be analyzed
by the user but rather the number of false positive traces the
user is willing to tolerate. Speciﬁcally, if the user analyzed n
traces with Arf = k, this means there are at least n− k traces
that are true bugs.
Table III shows the results of running APISAN and
ARBITRAR (with Arf = 5).
b) Detection rate: Overall ARBITRAR’s detection rate
(89.1%) is substantially higher than APISAN (76.1%). Fur-
thermore, the detection rate of ARBITRAR is relatively similar
on all benchmarks but APISAN has a skewed detection rate
and fails to detect misuses of complex APIs. In fact, APISAN
found zero bugs in APIMU4C’s Curl dataset. Listing 2 shows
one such instance.
c) False positives: The false positive rate of APISAN (f pap)
at 87.9% is signiﬁcantly higher than that of ARBITRAR
(f par) at 51.5%. For instance, in the case of the OpenSSL
benchmark, APISAN produced 160 bug reports out of which
only 19 were true positives. This is also in line with the
observation of the APISAN authors (Fig 12 in [69]).
Although, f par at 51.5% still seems large, in practice this
feels negligible because of active learning. Recall that, we
consider any non-buggy traces shown to the user as false
positives. The false positive rate of 51.5% means that we
showed two traces for every bug and one of them is non-buggy.
This means that ARBITRAR was able to learn the API misuses
from the feedback on just one trace.
Nonetheless, as indicated by the missed bugs (10.9%), there
are bugs that are not detected by ARBITRAR. As Arf = 5, this
means there are 10.9% of the bugs where the trace containing
the bug was not presented in the ﬁrst 5 interactions. These are
the APIs that have complex speciﬁcations or multiple disjoint
but valid usage patterns. Consider the example in Figure 7,
which took 13 interactions to ﬁnd. Here, whether the return
of BN_CTX_get need to be checked depends on previous calls
to the function using same ctx.
As mentioned before, false negatives are determined by
feedback tolerance (Arf ). Figure 8 shows the percentage of
Fig. 6: The user interface of ARBITRAR showing a path
sensitive trace and requesting for user feedback.
experiments, i.e., d = 0. Symbolic trace generation and feature
encoding for a heavily-used API like kzalloc in Linux Kernel
takes 35 minutes and generates a database of size 2GB.
A. Dataset
We use two API misuse bug benchmarks and 21 real-world
programs including Linux Kernel as our dataset.
a) Bug-benchmark: Our bug benchmark contains 92 API
misuse bugs, including 45 bugs found by APISAN in Linux
Kernel (denoted Bap) and 47 bugs in APIMU4C [25], a
recently proposed API misuse bug dataset (denoted Bmu).
We excluded bugs related to APIs which have less than ﬁve
occurrences (or call-sites) in the dataset to avoid unnecessarily
penalize APISAN as it is known to require more API call-sites
to be effective [25].
b) Real-world programs: We chose libpng (10 Debian
packages), libbluetooth (7 Debian packages), OpenSSL
(3 Debian packages) and Linux Kernel 5.7. These programs
have APIs with varying complexity and constitute a suitable
dataset to evaluate the generality of ARBITRAR.
B. Effectiveness
A traditional automated bug detection technique is expected
to give warnings or bug reports with high precision (i.e.,
few false positives and false negatives). However, ARBITRAR
does not have any prior knowledge about a bug and actively
learns from the user feedback. Consequently, there will be
non-buggy traces (or false positives) presented to the user so
that ARBITRAR can learn API misuses. However, an effective
technique will learn quickly from user feedback and should
present fewer non-buggy traces.
a) False positives and negatives: Based on this observation,
we deﬁne false positives of ARBITRAR, denoted by f par, as
the number of non-buggy traces presented to the user. We also
deﬁne feedback tolerance (Arf ), as the upper bound on the
number of non-buggy traces or false positives tolerable for
the user. This enables us to measure false negatives (f nar).
For instance, if Arf = 2, then the user can tolerate only two
non-buggy traces. Consequently, if the trace containing the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1408
TABLE III: Comparative Evaluation of ARBITRAR and APISAN on Bug-benchmarks.
Bug benchmark
Programs
# bugs
APISan Bugs (Bap)
Linux Kernel
APIMU4C (Bmu)
Cumulative
OpenSSL
Curl
Httpd
45
32
9
6
92
APISAN
Bugs Detection (% of bugs)
Missed
N/A*
13 (40.7%)
9 (100%)
0
22 (23.9%)
Found
45 (100%)
19 (59.3%)
0
6 (100%)
70 (76.1%)
ARBITRAR (Arf = 5)
False positive
rate (f pap)
Found
71.9%
40 (88.9%)
88.1%
28 (87.5%)
100%
8 (88.9%)
97.6%
6 (100%)
87.9% 82 (89.1%) ↑
Bugs Detection (% of bugs)
Missed
5 (11.1%)
4 (12.5%)
1 (11.1%)
0
10 (10.9%) ↓
False positive
rate (f par)
50.6%
50.9%
57.9%
50%
51.5% ↓
// OPENSSL:crypto/bn/bn_div.c:190
BN_CTX_start(ctx);
res = (dv == NULL) ? BN_CTX_get(ctx) : dv;
1
2
3
4 ¸tmp = BN_CTX_get(ctx);
5 ¸snum = BN_CTX_get(ctx);
6 ¸sdiv = BN_CTX_get(ctx);
7
8
if (sdiv == NULL)
goto err;
goto err;
ctx = BN_CTX_new();
if (ctx == NULL)
1
2
3
4
5
6 (cid:13)tmp = BN_CTX_get(ctx);
7
8
BN_CTX_start(ctx);
Missing null check.
// if (tmp == NULL)
//
goto err; // bug 1ff7425d61
Fig. 7: The top listing shows a valid usage of BN_CTX_get: In
a sequence of consecutive calls to BN_CTX_get, only the return
value of last call needs to be checked. The bottom listing shows
a bug as the return value of the function BN_CTX_get is not
checked even though there are no previous calls to BN_CTX_get.
d
e
t
c
e
t
e
d
s
g
u
B
f
o
%
100
80
60
40
20
0
0 1 2 3
Arf = 5
APISan (Bap)
OpenSSL (Bmu)
Curl (Bmu)
Httpd (Bmu)
7
5
Feedback Tolerence (Arf )
12
20
Fig. 8: The percentage of bugs in bug-benchmarks detected
by ARBITRAR with varying feedback tolerance (Arf ).
bugs detected (Y-axis) as we increase the feedback tolerance
(X-axis). The line (Arf = 5) shows the result used in Table III.
There are several interesting observations: First, most (80%)
of the bugs can be found within the ﬁrst two interactions
(Arf = 2). Second, almost all (99%) of the bugs can be found
within the ﬁrst twelve interactions (Arf = 12). Finally, there
were only two bugs that require more than 12 interactions.
These bugs reveal a drawback of our extensive feature vector:
memset is missing.
// All fields are uninitialized
struct hci_request rq;
1
2
3
4
5 (cid:13)memset(&rq, 0, sizeof(rq));
6
7
8
9
10
11
12
13
14
15
// Only few fields are initialized
rq.ogf
rq.event
rq.cparam = &cp;
rq.rparam = &rp;
rq.rlen
// uninitialized fields of rq may be
// be used by the method
if (hci_send_req(dd, &rq, to) < 0)
= OGF_LINK_CTL;
= EVT_AUTH_COMPLETE;
= EVT_AUTH_COMPLETE_SIZE;
return -1;
Listing 3: Use of uninitialized memory found by ARBITRAR (in
3rd interaction) because of missing memset call that is present
in all other call-sites of hci_send_req.
any small change in the usage of an API could potentially
keep the traces far apart in the feature space and hence takes
more feedback to ﬁnd the invalid usage.
C. Impact
In this section, we evaluate the ability of ARBITRAR to ﬁnd
new bugs in large real world programs. Table IV shows the
results of running ARBITRAR and APISAN on chosen programs.
In total, we found misuses of 18 APIs which resulted in a
total of 40 new bugs. Furthermore, our patches have also
been accepted for 18 of these bugs. All of these bugs have
a non-ignorable impact on the target program and a few of
them have security implications. Most of the bugs required
less than 5 interactions with average being ∼3. This indicates
that ARBITRAR is effective at ﬁnding new bugs with minimal
(just 3 interactions) user feedback. Consider the bug found
in ARBITRAR in libbluetooth as shown in Listing 3.
Here, calls to hci_send_req use memset to initialize all the
ﬁelds of the ﬁrst argument (rq) to 0 to avoid using unini-
tialized stack data, i.e., the feature share arg with target
is true for the memset call. However, at the location shown
in Listing 3 there is no explicit memset, and is ﬂagged by
share arg with target being false. Consequently,
the
trace was presented in just 3rd interaction, and the bug was
found.
Unfortunately, irrespective of the huge number of reports
(2,084), APISAN did not ﬁnd any of the above bugs. The main
reasons for this are:
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1409
TABLE IV: New Bugs Found By ARBITRAR but missed by APISAN. The column First Bug Warning indicate the number of
false warnings analyzed before ﬁnding the ﬁrst bug. To avoid bloating the bug numbers, code smell issues and non-triggerable
bugs (highlighted rows) are counted as just one irrespective of the number of occurrences.
Program
API Method
Bug Description
Impact
ARBITRAR
Linux
cdev_add
i2c_new_client_device
i2c_add_adapter
v4l2_ctrl_handler_setup
v4l2_m2m_get_vq
vb2_plane_vaddr
SSL
CRYPTO_zalloc
libpng