]]])
SEND_ATTACH_VARCHAR2(sender, n/a Same as the SEND procedure, but with VARCHAR2
recipients, cc, bcc, subject,
attachments.
message, mime_type, priority,
attachment [, att_inline [,
att_mime_type [, att_filename
]]])
Note: An administrator must grant execute privileges to each user or group before they
can use this package.
3.22.1 SEND
The SEND procedure provides the capability to send an e-mail to an SMTP server.
SEND(sender VARCHAR2, recipients VARCHAR2, cc VARCHAR2,
bcc VARCHAR2, subject VARCHAR2, message VARCHAR2
[, mime_type VARCHAR2 [, priority PLS_INTEGER ]])
Parameters
sender
E-mail address of the sender.
recipients
Comma-separated e-mail addresses of the recipients.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 308
Database Compatibility for Oracle® Developers
Built-in Package Guide
cc
Comma-separated e-mail addresses of copy recipients.
bcc
Comma-separated e-mail addresses of blind copy recipients.
subject
Subject line of the e-mail.
message
Body of the e-mail.
mime_type
Mime type of the message. The default is text/plain; charset=us-ascii.
priority
Priority of the e-mail The default is 3.
Examples
The following anonymous block sends a simple e-mail message.
DECLARE
v_sender VARCHAR2(30);
v_recipients VARCHAR2(60);
v_subj VARCHAR2(20);
v_msg VARCHAR2(200);
BEGIN
v_sender := 'PI:EMAIL';
v_recipients := 'PI:EMAIL,PI:EMAIL';
v_subj := 'Holiday Party';
v_msg := 'This year''s party is scheduled for Friday, Dec. 21 at ' ||
'6:00 PM. Please RSVP by Dec. 15th.';
UTL_MAIL.SEND(v_sender,v_recipients,NULL,NULL,v_subj,v_msg);
END;
3.22.2 SEND_ATTACH_RAW
The SEND_ATTACH_RAW procedure provides the capability to send an e-mail to an SMTP
server with an attachment containing either BYTEA data or a large object (identified by
the large object's OID). The call to SEND_ATTACH_RAW can be written in two ways:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 309
Database Compatibility for Oracle® Developers
Built-in Package Guide
SEND_ATTACH_RAW(sender VARCHAR2, recipients VARCHAR2,
cc VARCHAR2, bcc VARCHAR2, subject VARCHAR2, message
VARCHAR2,
mime_type VARCHAR2, priority PLS_INTEGER,
attachment BYTEA[, att_inline BOOLEAN
[, att_mime_type VARCHAR2[, att_filename VARCHAR2 ]]])
SEND_ATTACH_RAW(sender VARCHAR2, recipients VARCHAR2,
cc VARCHAR2, bcc VARCHAR2, subject VARCHAR2, message
VARCHAR2,
mime_type VARCHAR2, priority PLS_INTEGER, attachment OID
[, att_inline BOOLEAN [, att_mime_type VARCHAR2
[, att_filename VARCHAR2 ]]])
Parameters
sender
E-mail address of the sender.
recipients
Comma-separated e-mail addresses of the recipients.
cc
Comma-separated e-mail addresses of copy recipients.
bcc
Comma-separated e-mail addresses of blind copy recipients.
subject
Subject line of the e-mail.
message
Body of the e-mail.
mime_type
Mime type of the message. The default is text/plain; charset=us-ascii.
priority
Priority of the e-mail. The default is 3.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 310
Database Compatibility for Oracle® Developers
Built-in Package Guide
attachment
The attachment.
att_inline
If set to TRUE, then the attachment is viewable inline, FALSE otherwise. The
default is TRUE.
att_mime_type
Mime type of the attachment. The default is application/octet.
att_filename
The file name containing the attachment. The default is NULL.
3.22.3 SEND_ATTACH_VARCHAR2
The SEND_ATTACH_VARCHAR2 procedure provides the capability to send an e-mail to an
SMTP server with a text attachment.
SEND_ATTACH_VARCHAR2(sender VARCHAR2, recipients VARCHAR2,
cc VARCHAR2, bcc VARCHAR2, subject VARCHAR2, message
VARCHAR2, mime_type VARCHAR2, priority PLS_INTEGER,
attachment VARCHAR2 [, att_inline BOOLEAN [, att_mime_type
VARCHAR2 [, att_filename VARCHAR2 ]]])
Parameters
sender
E-mail address of the sender.
recipients
Comma-separated e-mail addresses of the recipients.
cc
Comma-separated e-mail addresses of copy recipients.
bcc
Comma-separated e-mail addresses of blind copy recipients.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 311
Database Compatibility for Oracle® Developers
Built-in Package Guide
subject
Subject line of the e-mail.
message
Body of the e-mail.
mime_type
Mime type of the message. The default is text/plain; charset=us-ascii.
priority
Priority of the e-mail The default is 3.
attachment
The VARCHAR2 attachment.
att_inline
If set to TRUE, then the attachment is viewable inline, FALSE otherwise. The
default is TRUE.
att_mime_type
Mime type of the attachment. The default is text/plain; charset=us-
ascii.
att_filename
The file name containing the attachment. The default is NULL.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 312
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.23 UTL_RAW
The UTL_RAW package allows you to manipulate or retrieve the length of raw data types.
Note: An administrator must grant execute privileges to each user or group before they
can use this package.
Function/Procedure Function or Return Type Description
Procedure
CAST_TO_RAW(c IN VARCHAR2) Function RAW Converts a VARCHAR2 string to a RAW value.
CAST_TO_VARCHAR2(r IN RAW) Function VARCHAR2 Converts a RAW value to a VARCHAR2 string.
CONCAT(r1 IN RAW, r2 IN RAW, Function RAW Concatenate multiple RAW values into a
r3 IN RAW,…) single RAW value.
CONVERT(r IN RAW, to_charset Function RAW Converts encoded data from one encoding
IN VARCHAR2, from_charset IN
to another, and returns the result as a RAW
VARCHAR2
value.
LENGTH(r IN RAW) Function NUMBER Returns the length of a RAW value.
SUBSTR(r IN RAW, pos IN Function RAW Returns a portion of a RAW value.
INTEGER, len IN INTEGER)
Advanced Server's implementation of UTL_RAW is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
3.23.1 CAST_TO_RAW
The CAST_TO_RAW function converts a VARCHAR2 string to a RAW value. The signature
is:
CAST_TO_RAW(c VARCHAR2)
The function returns a RAW value if you pass a non-NULL value; if you pass a NULL value,
the function will return NULL.
Parameters
c
The VARCHAR2 value that will be converted to RAW.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 313
Database Compatibility for Oracle® Developers
Built-in Package Guide
Example
The following example uses the CAST_TO_RAW function to convert a VARCHAR2 string to
a RAW value:
DECLARE
v VARCHAR2;
r RAW;
BEGIN
v := 'Accounts';
dbms_output.put_line(v);
r := UTL_RAW.CAST_TO_RAW(v);
dbms_output.put_line(r);
END;
The result set includes the content of the original string and the converted RAW value:
Accounts
\x4163636f756e7473
3.23.2 CAST_TO_VARCHAR2
The CAST_TO_VARCHAR2 function converts RAW data to VARCHAR2 data. The signature
is:
CAST_TO_VARCHAR2(r RAW)
The function returns a VARCHAR2 value if you pass a non-NULL value; if you pass a NULL
value, the function will return NULL.
Parameters
r
The RAW value that will be converted to a VARCHAR2 value.
Example
The following example uses the CAST_TO_VARCHAR2 function to convert a RAW value to
a VARCHAR2 string:
DECLARE
r RAW;
v VARCHAR2;
BEGIN
r := '\x4163636f756e7473'
dbms_output.put_line(v);
v := UTL_RAW.CAST_TO_VARCHAR2(r);
dbms_output.put_line(r);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 314
Database Compatibility for Oracle® Developers
Built-in Package Guide
END;
The result set includes the content of the original string and the converted RAW value:
\x4163636f756e7473
Accounts
3.23.3 CONCAT
The CONCAT function concatenates multiple RAW values into a single RAW value. The
signature is:
CONCAT(r1 RAW, r2 RAW, r3 RAW,…)
The function returns a RAW value. Unlike the Oracle implementation, the Advanced
Server implementation is a variadic function, and does not place a restriction on the
number of values that can be concatenated.
Parameters
r1, r2, r3,…
The RAW values that CONCAT will concatenate.
Example
The following example uses the CONCAT function to concatenate multiple RAW values into
a single RAW value:
SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CONCAT('\x61', '\x62', '\x63')) FROM
DUAL;
concat
--------
abc
(1 row)
The result (the concatenated values) is then converted to VARCHAR2 format by the
CAST_TO_VARCHAR2 function.
3.23.4 CONVERT
The CONVERT function converts a string from one encoding to another encoding and
returns the result as a RAW value. The signature is:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 315
Database Compatibility for Oracle® Developers
Built-in Package Guide
CONVERT(r RAW, to_charset VARCHAR2, from_charset VARCHAR2)
The function returns a RAW value.
Parameters
r
The RAW value that will be converted.
to_charset
The name of the encoding to which r will be converted.
from_charset
The name of the encoding from which r will be converted.
Example
The following example uses the UTL_RAW.CAST_TO_RAW function to convert a
VARCHAR2 string (Accounts) to a raw value, and then convert the value from UTF8 to
LATIN7, and then from LATIN7 to UTF8:
DECLARE
r RAW;
v VARCHAR2;
BEGIN
v:= 'Accounts';
dbms_output.put_line(v);
r:= UTL_RAW.CAST_TO_RAW(v);
dbms_output.put_line(r);
r:= UTL_RAW.CONVERT(r, 'UTF8', 'LATIN7');
dbms_output.put_line(r);
r:= UTL_RAW.CONVERT(r, 'LATIN7', 'UTF8');
dbms_output.put_line(r);
The example returns the VARCHAR2 value, the RAW value, and the converted values:
Accounts
\x4163636f756e7473
\x4163636f756e7473
\x4163636f756e7473
3.23.5 LENGTH
The LENGTH function returns the length of a RAW value. The signature is:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 316
Database Compatibility for Oracle® Developers
Built-in Package Guide
LENGTH(r RAW)
The function returns a RAW value.
Parameters
r
The RAW value that LENGTH will evaluate.
Example
The following example uses the LENGTH function to return the length of a RAW value:
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('Accounts')) FROM DUAL;
length
--------
8
(1 row)
The following example uses the LENGTH function to return the length of a RAW value that
includes multi-byte characters:
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('独孤求败'));
length
--------
12
(1 row)
3.23.6 SUBSTR
The SUBSTR function returns a substring of a RAW value. The signature is:
SUBSTR (r RAW, pos INTEGER, len INTEGER)
This function returns a RAW value.
Parameters
r
The RAW value from which the substring will be returned.
pos
The position within the RAW value of the first byte of the returned substring.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 317
Database Compatibility for Oracle® Developers
Built-in Package Guide
 If pos is 0 or 1, the substring begins at the first byte of the RAW value.
 If pos is greater than one, the substring begins at the first byte specified
by pos. For example, if pos is 3, the substring begins at the third byte of
the value.
 If pos is negative, the substring begins at pos bytes from the end of the
source value. For example, if pos is -3, the substring begins at the third
byte from the end of the value.
len
The maximum number of bytes that will be returned.
Example
The following example uses the SUBSTR function to select a substring that begins 3 bytes
from the start of a RAW value:
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('Accounts'), 3, 5) FROM DUAL;
substr
--------
count
(1 row)
The following example uses the SUBSTR function to select a substring that starts 5 bytes
from the end of a RAW value:
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('Accounts'), -5 , 3) FROM DUAL;
substr
--------
oun
(1 row)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 318
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.24 UTL_SMTP
The UTL_SMTP package provides the capability to send e-mails over the Simple Mail
Transfer Protocol (SMTP).
Note: An administrator must grant execute privileges to each user or group before they
can use this package.
Function/Procedure Function or Return Type Description
Procedure
CLOSE_DATA(c IN OUT) Procedure n/a Ends an e-mail message.
COMMAND(c IN OUT, cmd [, arg Both REPLY Execute an SMTP command.
])
COMMAND_REPLIES(c IN OUT, cmd Function REPLIES Execute an SMTP command where multiple
[, arg ]) reply lines are expected.
DATA(c IN OUT, body VARCHAR2) Procedure n/a Specify the body of an e-mail message.
EHLO(c IN OUT, domain) Procedure n/a Perform initial handshaking with an SMTP
server and return extended information.
HELO(c IN OUT, domain) Procedure n/a Perform initial handshaking with an SMTP
server
HELP(c IN OUT [, command ]) Function REPLIES Send the HELP command.
MAIL(c IN OUT, sender [, Procedure n/a Start a mail transaction.
parameters ])
NOOP(c IN OUT) Both REPLY Send the null command.
OPEN_CONNECTION(host [, port Function CONNECTION Open a connection.
[, tx_timeout ]])
OPEN_DATA(c IN OUT) Both REPLY Send the DATA command.
QUIT(c IN OUT) Procedure n/a Terminate the SMTP session and
disconnect.
RCPT(c IN OUT, recipient [, Procedure n/a Specify the recipient of an e-mail message.
parameters ])
RSET(c IN OUT) Procedure n/a Terminate the current mail transaction.
VRFY(c IN OUT, recipient) Function REPLY Validate an e-mail address.
WRITE_DATA(c IN OUT, data) Procedure n/a Write a portion of the e-mail message.
Advanced Server's implementation of UTL_SMTP is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
The following table lists the public variables available in the UTL_SMTP package.
Public Variables Data Type Value Description
connection RECORD Description of an SMTP connection.
reply RECORD SMTP reply line.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 319
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.24.1 CONNECTION
The CONNECTION record type provides a description of an SMTP connection.
TYPE connection IS RECORD (
host VARCHAR2(255),
port PLS_INTEGER,
tx_timeout PLS_INTEGER
);
3.24.2 REPLY/REPLIES
The REPLY record type provides a description of an SMTP reply line. REPLIES is a table
of multiple SMTP reply lines.
TYPE reply IS RECORD (
code INTEGER,
text VARCHAR2(508)
);
TYPE replies IS TABLE OF reply INDEX BY BINARY_INTEGER;
3.24.3 CLOSE_DATA
The CLOSE_DATA procedure terminates an e-mail message by sending the following
sequence:
.
This is a single period at the beginning of a line.
CLOSE_DATA(c IN OUT CONNECTION)
Parameters
c
The SMTP connection to be closed.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 320
Database Compatibility for Oracle® Developers