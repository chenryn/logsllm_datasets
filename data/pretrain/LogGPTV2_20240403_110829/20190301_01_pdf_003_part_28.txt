### 3.22 UTL_MAIL

#### 3.22.1 SEND
The `SEND` procedure allows you to send an email to an SMTP server.

**Syntax:**
```sql
SEND(
    sender VARCHAR2,
    recipients VARCHAR2,
    cc VARCHAR2,
    bcc VARCHAR2,
    subject VARCHAR2,
    message VARCHAR2
    [, mime_type VARCHAR2]
    [, priority PLS_INTEGER]
)
```

**Parameters:**
- **sender**: The email address of the sender.
- **recipients**: A comma-separated list of email addresses for the recipients.
- **cc**: A comma-separated list of email addresses for carbon copy (CC) recipients.
- **bcc**: A comma-separated list of email addresses for blind carbon copy (BCC) recipients.
- **subject**: The subject line of the email.
- **message**: The body of the email.
- **mime_type**: The MIME type of the message. The default is `text/plain; charset=us-ascii`.
- **priority**: The priority of the email. The default is 3.

**Example:**
```sql
DECLARE
    v_sender VARCHAR2(30);
    v_recipients VARCHAR2(60);
    v_subj VARCHAR2(20);
    v_msg VARCHAR2(200);
BEGIN
    v_sender := 'PI:EMAIL';
    v_recipients := 'PI:EMAIL,PI:EMAIL';
    v_subj := 'Holiday Party';
    v_msg := 'This year''s party is scheduled for Friday, Dec. 21 at ' ||
             '6:00 PM. Please RSVP by Dec. 15th.';
    UTL_MAIL.SEND(v_sender, v_recipients, NULL, NULL, v_subj, v_msg);
END;
```

#### 3.22.2 SEND_ATTACH_RAW
The `SEND_ATTACH_RAW` procedure allows you to send an email to an SMTP server with an attachment containing either `BYTEA` data or a large object (identified by the large object's OID).

**Syntax:**
```sql
SEND_ATTACH_RAW(
    sender VARCHAR2,
    recipients VARCHAR2,
    cc VARCHAR2,
    bcc VARCHAR2,
    subject VARCHAR2,
    message VARCHAR2,
    mime_type VARCHAR2,
    priority PLS_INTEGER,
    attachment BYTEA
    [, att_inline BOOLEAN]
    [, att_mime_type VARCHAR2]
    [, att_filename VARCHAR2]
)

SEND_ATTACH_RAW(
    sender VARCHAR2,
    recipients VARCHAR2,
    cc VARCHAR2,
    bcc VARCHAR2,
    subject VARCHAR2,
    message VARCHAR2,
    mime_type VARCHAR2,
    priority PLS_INTEGER,
    attachment OID
    [, att_inline BOOLEAN]
    [, att_mime_type VARCHAR2]
    [, att_filename VARCHAR2]
)
```

**Parameters:**
- **sender**: The email address of the sender.
- **recipients**: A comma-separated list of email addresses for the recipients.
- **cc**: A comma-separated list of email addresses for carbon copy (CC) recipients.
- **bcc**: A comma-separated list of email addresses for blind carbon copy (BCC) recipients.
- **subject**: The subject line of the email.
- **message**: The body of the email.
- **mime_type**: The MIME type of the message. The default is `text/plain; charset=us-ascii`.
- **priority**: The priority of the email. The default is 3.
- **attachment**: The attachment, which can be `BYTEA` data or an OID of a large object.
- **att_inline**: If set to `TRUE`, the attachment is viewable inline; otherwise, it is not. The default is `TRUE`.
- **att_mime_type**: The MIME type of the attachment. The default is `application/octet-stream`.
- **att_filename**: The file name for the attachment. The default is `NULL`.

#### 3.22.3 SEND_ATTACH_VARCHAR2
The `SEND_ATTACH_VARCHAR2` procedure allows you to send an email to an SMTP server with a text attachment.

**Syntax:**
```sql
SEND_ATTACH_VARCHAR2(
    sender VARCHAR2,
    recipients VARCHAR2,
    cc VARCHAR2,
    bcc VARCHAR2,
    subject VARCHAR2,
    message VARCHAR2,
    mime_type VARCHAR2,
    priority PLS_INTEGER,
    attachment VARCHAR2
    [, att_inline BOOLEAN]
    [, att_mime_type VARCHAR2]
    [, att_filename VARCHAR2]
)
```

**Parameters:**
- **sender**: The email address of the sender.
- **recipients**: A comma-separated list of email addresses for the recipients.
- **cc**: A comma-separated list of email addresses for carbon copy (CC) recipients.
- **bcc**: A comma-separated list of email addresses for blind carbon copy (BCC) recipients.
- **subject**: The subject line of the email.
- **message**: The body of the email.
- **mime_type**: The MIME type of the message. The default is `text/plain; charset=us-ascii`.
- **priority**: The priority of the email. The default is 3.
- **attachment**: The `VARCHAR2` attachment.
- **att_inline**: If set to `TRUE`, the attachment is viewable inline; otherwise, it is not. The default is `TRUE`.
- **att_mime_type**: The MIME type of the attachment. The default is `text/plain; charset=us-ascii`.
- **att_filename**: The file name for the attachment. The default is `NULL`.

### 3.23 UTL_RAW
The `UTL_RAW` package provides functions to manipulate and retrieve the length of raw data types.

**Note:** An administrator must grant execute privileges to each user or group before they can use this package.

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `CAST_TO_RAW(c IN VARCHAR2)` | RAW | Converts a `VARCHAR2` string to a `RAW` value. |
| `CAST_TO_VARCHAR2(r IN RAW)` | VARCHAR2 | Converts a `RAW` value to a `VARCHAR2` string. |
| `CONCAT(r1 IN RAW, r2 IN RAW, r3 IN RAW, …)` | RAW | Concatenates multiple `RAW` values into a single `RAW` value. |
| `CONVERT(r IN RAW, to_charset IN VARCHAR2, from_charset IN VARCHAR2)` | RAW | Converts encoded data from one encoding to another and returns the result as a `RAW` value. |
| `LENGTH(r IN RAW)` | NUMBER | Returns the length of a `RAW` value. |
| `SUBSTR(r IN RAW, pos IN INTEGER, len IN INTEGER)` | RAW | Returns a portion of a `RAW` value. |

#### 3.23.1 CAST_TO_RAW
The `CAST_TO_RAW` function converts a `VARCHAR2` string to a `RAW` value.

**Syntax:**
```sql
CAST_TO_RAW(c VARCHAR2)
```

**Parameters:**
- **c**: The `VARCHAR2` value to be converted to `RAW`.

**Example:**
```sql
DECLARE
    v VARCHAR2(10) := 'Accounts';
    r RAW;
BEGIN
    dbms_output.put_line(v);
    r := UTL_RAW.CAST_TO_RAW(v);
    dbms_output.put_line(r);
END;
```
**Output:**
```
Accounts
\x4163636f756e7473
```

#### 3.23.2 CAST_TO_VARCHAR2
The `CAST_TO_VARCHAR2` function converts a `RAW` value to a `VARCHAR2` string.

**Syntax:**
```sql
CAST_TO_VARCHAR2(r RAW)
```

**Parameters:**
- **r**: The `RAW` value to be converted to `VARCHAR2`.

**Example:**
```sql
DECLARE
    r RAW := '\x4163636f756e7473';
    v VARCHAR2(10);
BEGIN
    dbms_output.put_line(r);
    v := UTL_RAW.CAST_TO_VARCHAR2(r);
    dbms_output.put_line(v);
END;
```
**Output:**
```
\x4163636f756e7473
Accounts
```

#### 3.23.3 CONCAT
The `CONCAT` function concatenates multiple `RAW` values into a single `RAW` value.

**Syntax:**
```sql
CONCAT(r1 RAW, r2 RAW, r3 RAW, …)
```

**Parameters:**
- **r1, r2, r3, …**: The `RAW` values to be concatenated.

**Example:**
```sql
SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_RAW.CONCAT('\x61', '\x62', '\x63')) FROM DUAL;
```
**Output:**
```
concat
--------
abc
(1 row)
```

#### 3.23.4 CONVERT
The `CONVERT` function converts a string from one encoding to another and returns the result as a `RAW` value.

**Syntax:**
```sql
CONVERT(r RAW, to_charset VARCHAR2, from_charset VARCHAR2)
```

**Parameters:**
- **r**: The `RAW` value to be converted.
- **to_charset**: The name of the encoding to which `r` will be converted.
- **from_charset**: The name of the encoding from which `r` will be converted.

**Example:**
```sql
DECLARE
    r RAW;
    v VARCHAR2(10) := 'Accounts';
BEGIN
    dbms_output.put_line(v);
    r := UTL_RAW.CAST_TO_RAW(v);
    dbms_output.put_line(r);
    r := UTL_RAW.CONVERT(r, 'UTF8', 'LATIN7');
    dbms_output.put_line(r);
    r := UTL_RAW.CONVERT(r, 'LATIN7', 'UTF8');
    dbms_output.put_line(r);
END;
```
**Output:**
```
Accounts
\x4163636f756e7473
\x4163636f756e7473
\x4163636f756e7473
```

#### 3.23.5 LENGTH
The `LENGTH` function returns the length of a `RAW` value.

**Syntax:**
```sql
LENGTH(r RAW)
```

**Parameters:**
- **r**: The `RAW` value whose length will be evaluated.

**Example:**
```sql
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('Accounts')) FROM DUAL;
```
**Output:**
```
length
--------
8
(1 row)
```

**Example with multi-byte characters:**
```sql
SELECT UTL_RAW.LENGTH(UTL_RAW.CAST_TO_RAW('独孤求败')) FROM DUAL;
```
**Output:**
```
length
--------
12
(1 row)
```

#### 3.23.6 SUBSTR
The `SUBSTR` function returns a substring of a `RAW` value.

**Syntax:**
```sql
SUBSTR(r RAW, pos INTEGER, len INTEGER)
```

**Parameters:**
- **r**: The `RAW` value from which the substring will be returned.
- **pos**: The position within the `RAW` value of the first byte of the returned substring.
  - If `pos` is 0 or 1, the substring begins at the first byte of the `RAW` value.
  - If `pos` is greater than 1, the substring begins at the first byte specified by `pos`.
  - If `pos` is negative, the substring begins at `pos` bytes from the end of the source value.
- **len**: The maximum number of bytes that will be returned.

**Example:**
```sql
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('Accounts'), 3, 5) FROM DUAL;
```
**Output:**
```
substr
--------
count
(1 row)
```

**Example:**
```sql
SELECT UTL_RAW.SUBSTR(UTL_RAW.CAST_TO_RAW('Accounts'), -5, 3) FROM DUAL;
```
**Output:**
```
substr
--------
oun
(1 row)
```

### 3.24 UTL_SMTP
The `UTL_SMTP` package provides the capability to send emails over the Simple Mail Transfer Protocol (SMTP).

**Note:** An administrator must grant execute privileges to each user or group before they can use this package.

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `CLOSE_DATA(c IN OUT CONNECTION)` | n/a | Ends an email message. |
| `COMMAND(c IN OUT CONNECTION, cmd VARCHAR2, arg VARCHAR2)` | REPLY | Executes an SMTP command. |
| `COMMAND_REPLIES(c IN OUT CONNECTION, cmd VARCHAR2, arg VARCHAR2)` | REPLIES | Executes an SMTP command where multiple reply lines are expected. |
| `DATA(c IN OUT CONNECTION, body VARCHAR2)` | n/a | Specifies the body of an email message. |
| `EHLO(c IN OUT CONNECTION, domain VARCHAR2)` | n/a | Performs initial handshaking with an SMTP server and returns extended information. |
| `HELO(c IN OUT CONNECTION, domain VARCHAR2)` | n/a | Performs initial handshaking with an SMTP server. |
| `HELP(c IN OUT CONNECTION, command VARCHAR2)` | REPLIES | Sends the HELP command. |
| `MAIL(c IN OUT CONNECTION, sender VARCHAR2, parameters VARCHAR2)` | n/a | Starts a mail transaction. |
| `NOOP(c IN OUT CONNECTION)` | REPLY | Sends the null command. |
| `OPEN_CONNECTION(host VARCHAR2, port PLS_INTEGER, tx_timeout PLS_INTEGER)` | CONNECTION | Opens a connection. |
| `OPEN_DATA(c IN OUT CONNECTION)` | REPLY | Sends the DATA command. |
| `QUIT(c IN OUT CONNECTION)` | n/a | Terminates the SMTP session and disconnects. |
| `RCPT(c IN OUT CONNECTION, recipient VARCHAR2, parameters VARCHAR2)` | n/a | Specifies the recipient of an email message. |
| `RSET(c IN OUT CONNECTION)` | n/a | Terminates the current mail transaction. |
| `VRFY(c IN OUT CONNECTION, recipient VARCHAR2)` | REPLY | Validates an email address. |
| `WRITE_DATA(c IN OUT CONNECTION, data VARCHAR2)` | n/a | Writes a portion of the email message. |

#### 3.24.1 CONNECTION
The `CONNECTION` record type provides a description of an SMTP connection.

**Definition:**
```sql
TYPE connection IS RECORD (
    host VARCHAR2(255),
    port PLS_INTEGER,
    tx_timeout PLS_INTEGER
);
```

#### 3.24.2 REPLY/REPLIES
The `REPLY` record type provides a description of an SMTP reply line. `REPLIES` is a table of multiple SMTP reply lines.

**Definitions:**
```sql
TYPE reply IS RECORD (
    code INTEGER,
    text VARCHAR2(508)
);

TYPE replies IS TABLE OF reply INDEX BY BINARY_INTEGER;
```

#### 3.24.3 CLOSE_DATA
The `CLOSE_DATA` procedure terminates an email message by sending a single period at the beginning of a line.

**Syntax:**
```sql
CLOSE_DATA(c IN OUT CONNECTION)
```

**Parameters:**
- **c**: The SMTP connection to be closed.

---

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.