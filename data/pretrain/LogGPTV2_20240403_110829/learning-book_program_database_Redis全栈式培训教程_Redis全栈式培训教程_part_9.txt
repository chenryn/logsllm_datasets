Redis缓存
数据库
数据库
数据库
1.
在普通本地缓存+Redis模式下，如果数据需要更新，需要同时更新Redis缓存+本地缓存
2.在采用Redis客户端缓存模式后，我们只更注重更新Redis缓存，然后由Redis通知本地缓存更新
春风阁讲堂出品
108
---
## Page 109
6.9.2.何为客户端缓存
客户端缓存是一种用于创建高性能服务的技术，它可以利用应用服务器上的可用内存（这些服务器通常是一些不同于数据库服务器的节点），
在这些应用服务端来直接存储数据库中的一些信息
与访问数据库等网络服务相比，访问本地内存所需要的时间消耗要少得多，因此这个模式可以大大缩短应用程序获取数据的延迟，同时也能减轻数
据库的负载压力
在客户端缓存，redis本身不提供在应用服务端缓存数据的功能，这个功能要由访问redis的业务端自已去实现。也就是说，redis服务端只负责通
知你，你缓存在应用服务本地的这个key已经作废了，至于你本地如何缓存的这些数据，redis并不关心，也不可能去关心
缓存分为三种模式：
缓存模式
特征描述
优缺点
1.服务端会记录某个客户端具体访问过哪一些key，当这些key对应的
值发生变化时，会发送失效消息给这些客户端。
优点：省CPU和带宽
默认模式
2.这个模式会在服务端消耗一些内存，但是发送失效消息的范围，被限
艮缺点：多用占内存
制在了客户端存储了的key的集合范围内
1.服务端不会再记录某个客户端访问了哪些key。取而代之的是，客户
端需要订阅key的特定前缀，每当符合这个前缀的key对应的值发生
优点：少占用内存
广播模式
改变时，客户端都会收到通知消息
缺点：多用占CPU
2.这个模式下不消耗服务端的内存，但是会消耗更多的CPU
转发模式
优点：少占用内存
1.主要是为了兼容resp2协议，是一个过渡模式
缺点：多用占CPU
春风阁讲堂出品
109
---
## Page 110
6.9.3.客户端缓存优势
到这里，我们来对比一下，和传统的只使用redis做远程缓存、以及使用整合后的两级缓存相比较，客户端缓存具有什么样的优势。
1.当应用的服务端存在缓存时，会直接读取本地缓存，能够减少网络访问上造成的延迟，从而加快访问速度
2.同时也能减少访问redis服务端的次数，降低redis的负载压力
3.在分布式环境下，不再需要通过发布订阅来通知其他主机更新本地缓存，来保证数据的一致性。使用客户端缓存后，它所具有的原生的消息通
知功能，能很好地支持作废本地缓存，保证之后访问时能取到更新后的新数据
春风阁讲堂出品
110
---
## Page 111
6.9.4.默认模式演示
前提：redis 6.x版本+开启RESP3协议+开启tracking机制
1.客户端A采用telnet模式连接上redis，命令：telnet127.0.0.16379
[xiangsl@crm167~]$ telnet127.0.0.1 6379
Trying 127.0.0.1...
Connectedto127.0.0.1.
Escapecharacterisi^]
2.
开启resp3协议，命令：hello3
hello3
97
3.
开启tracking机制，命令：client tracking on
client tracking on
+OK
4.接下来，我们在客户端A中先执行getkeyl，然后在客户端B中执行setkeylnewval，然后我们发现客户端A中收到了作废信息
get k1
$1
>2
4
$10
invalidate
1
52
春风阁讲堂出品
111
---
## Page 112
6.9.5.广播模式演示
前提：redis 6.x版本+开启RESP3协议+开启tracking机制
1.客户端A采用telnet模式连接上redis，命令：telnet127.0.0.16379
[xiangsl@crm167~]$ telnet 127.0.0.1 6379
Trying 127.0.0.1...
Connectedto127.0.0.1.
Escapecharacterisi^]
2.
开启resp3协议命令：hello3
hello3
97
3.
开启tracking 机制，命令：client tracking onbcast
client tracking on bcast
+OK
4.接下来，我们在客户端B中执行set任意key的值，然后我们发现客户端A中均能收到作废信息
get k1
$1
>2
4
$10
invalidate
1
2
春风阁讲堂出品
112
---
## Page 113
6.9.6.转发模式演示
前提：redis 6.x版本+开启tracking机制
1.客户端A采用telnet模式连接上redis，并订阅_redis_:invalidate事件，命令：
命令：telnet 127.0.0.1 6379，subscribe _redis_invalidate
[xiangsl@crm167~]$ telnet 127.0.0.16379
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escapecharacter is'^]'
client id
:49
subscriberedis:invalidate
E*
6$
subscribe
2.
客户B上开启转发模式，命令：client tracking on bcast redirect49
127.0.0.1:6379>client tracking on bcast redirect 49
OK
127.0.0.1:6379>setk1k1
OK
这时候我们发现，在其它客户端修改的消息均能出现在客户端A
redis_:invalidate
*1
$2
春风阁讲堂出品
113
---
## Page 114
7.Redis主从模式介绍
7.1.Redis集群历史
Redis有三种集群模式，分别是：主从模式、哨兵模式、Cluster模式。
Rdis最开始使用主从模式做集群，若master宕机，需要手动配置slave转为master
为了高可用后来提出来哨兵模式，该模式下有一个哨兵集群监视master和slave，若master宕机可自动将slave转为master
但哨兵模式有一个问题，就是内存有限，写性能上限为单点，不能扩容：所以Redis在3.x后，官方发布了cluster集群模式
集群模式
特性
缺点
代表产品
主从模式
通过主从模式可以提升读性能
故障时需要手工切换，内存瓶颈
主从
哨兵模式
仍然采用主从模式，增加了从自动转主功能
故障主从可自动切换，但是写性能仍有限，内存瓶颈
哨兵
代理模式
通过代理进行节点路由，达到水平扩展
某些原生命令不支持，代理降低部分性能，
Twemproxy、Codis
某些不支持最新Redis功能
集群模式
数据分布式存储、节点水平扩容、故障自动转移
需要轻量级客户端计算路由
最新集群
春风阁讲堂出品
114
---
## Page 115
7.2.主从模式架构
在主从复制中，Redis数据库分为两种角色：主数据库（master）和从数据库（slave），从可以是多个
主Redis
(master)
1.
主数据库可以进行读写操作，当读写操作导致数据变化时会自
动将数据同步给从数据库
2.
复制的数据流是单向的，只能由主节点复制到从节点。
3.
从数据库一般都是只读的，并且接收主数据库同步过来的数据
一个master可以拥有多个slave，但是一个slave只能对应一
从Redis1
从Redis2
(slave)-
个master
(slave)
5.
slave挂了不影响其他slave的读和master的读和写，重新启
动后会将数据从master同步过来
master挂了以后，不影响slave的读，但redis不再提供写服
务，master恢复后redis将重新对外提供写服务
7.master挂了以后，不会在slave节点中重新选一个master
从Redis3
从Redis4
(slave)
(slave)
春风阁讲堂出品
115
---
## Page 116
7.3.主从复制原理
7.3.1.复制方式/场景介绍
场景
实现方式
复制方式说明
Redis=2.8第一次启动
psync 复制
全量复制
Redis>=2.8正常运行
缓冲区复制
增量复制
Redis>=2.8第二次启动(Master缓冲区未溢出）
缓冲区复制
部分复制，短暂的停启不会对主造成影响
Redis>=2.8第二次启动(Master缓冲区溢出）
psync复制
全量复制
注意：无是哪种场景，Redis的主从复制机制均采用异步复制，也称为乐观复制，因此不能完全保证主从数据的一致性
春风阁讲堂出品
116
---
## Page 117
7.3.2.SYNC工作原理
Slave
Master
节点
节点
1、启动时向master发送sync请求
2、触发rdb持久化+缓冲写入命令
3、向slave节点发送快照RDB文件
4、清空l旧数据+接收主rdb文件
5、向slave节点发送缓冲区命令
6、执行缓冲区命令
7、持续增量同步
1.
当slave启动后或者断开重连后，会向master发送sync命令
2.master节点收到sync命令后会开始在后台保存快照（即RDB持久化，主从复制时会触发RDB），并将保存快照期间接收到的命令缓存起来
3.
master节点执行RDB持久化完后，向所有slave节点发送快照RDB文件，并在发送快照期间继续记录被执行的写命令
4.slave节点收到快照文件后丢弃所有旧数据（会清空所有数据），载入收到的快照
5.master节点快照发送完毕、slave节点载入快照完毕后，master节点开始向slave节点发送缓冲区中的写命令
6.master节点完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令。（从数据库初始化完成）
7.后续master节点每执行一个写命令就会向slave节点发送相同的写命令，slave节点接收并执行收到的写命令
春风阁讲堂出品
117
---
## Page 118
7.3.3.PSYNC工作原理
Slave节点启动
是否
第一次连接
香
发送psyncoffset
是
发送psync-1
Master是否
前应Continue
是
全量同步
增量同步
1.当slave启动后或者断开重连后，slave根据自已是否保存Masterrunid来判断是否是第一次连接
2.如果是第一次同步则向Master发送psync-1命令来进行全量同步：如果是重连接，则发送PSYNCrunidoffset命令（runid是身份ID，offset
是从节点同步命令的全局迁移量）
3.Master接收到PSYNC命令后，首先判断runid是否和本机的id一致，同时会判断offset偏移量有没有超过复制积压缓冲区大小，如果没有那
么就给Slave发送CONTINUE，此时Slave只需要等待Master传回失去连接期间丢失的命令。
4.如果runid和本机id不一致或者offset偏差超过了复制积压缓冲区大小，那么就会返回FULLRESYNCrunidoffset，Slave将runid保存起来，
并进行全量同步
5.后续过程中，主数据库会将每一个写命令传递给从数据库的同时，都会将写命令存放到复制积压队列，并记录当前积压队列中存放命令的全局
偏移量offset。当salve重连接时，会从复制积压队列进行增量复制
春风阁讲堂出品
118
---
## Page 119
7.4.主从模式环境搭建
7.4.1.单节点要求
准备两个 Redis 节点，192.168.128.167:6379,192.168.128.167:6380
两个单节点的配置均参考单规范进行搭建
7.4.2.主从关系建立
1．静态配置
在192.168.128.167:6380的redis.conf中我们增加如下配置，代理6380(从）追随6379(主）
replicaof 192.168.128.167 6379
2.动态配置
分别启动192.168.128.167:6379,192.168.128.167:6380，连接6380端口，输入如下命令
replicaof 192.168.128.167 6379
一般这种模式需要回写配置，通过configrewrite命令，将内存中的配置重写写入redis.conf
3.启动参数（不推荐）
在6380进程启动时加入参数
/redis-server ../conf/redis_6380.conf --replicaof 192.168.128.167 6379
春风阁讲堂出品
6I1
---
## Page 120
7.4.3.主从环境验证
分别在6379和6380客户端上输入info
127.0.0.1:6379>info Replication
127.0.0.1:6380>infoReplication
#Replication
#Replication
role:master
role:slave
connected_slaves:0
master_failover_state:no-failover
master_host:192.168.128.167
master_replid:cd6b8ae2f9d32545583035e67572091f17483caa
master_port:6379
master_replid2:0000000000000000000000000000000000000o00
master_link_status:up
master_repl_offset:2221
master_last_io_seconds_ago:6
second_repl_offset:-1
master_sync_in_progress:0
repl_backlog_active:1
slave_read_repl_offset:2235
repl_backlog_size:1048576
slave_repl_offset:2235
repl_backlog_first_byte_offset:1
slave_priority:100
repl_backlog_histlen:2221
slave_read_only:1
1.同时启动6379和6380进程，在6379上写入数据a1，在6380上验证a1会自自动同步过来
2.启动6379进程，进行写入数据al，然后再启动6380进程，验证al会自动同步过来
3.在6380上写入数据al，验证会报错，因为从节点默认不可写入
4.删除dump_6380.data，重启6380进程，验证a1数据仍会自动同步过来
5.在6379上执行flushall、flushdb命令，验证6380上的数据会同样被清空
春风阁讲堂出品
120
---
## Page 121
7.5.主从模式常见管理
7.5.1.主从建立关系
这个我们在环境搭建里面已经介绍过
7.5.2.主从去除关系
1.修改192.168.128.167:6380的配置文件redis_6380.conf
去除配置replicaof
注意：从节点数据不会丢失
2.登陆192.168.128.167:6380客户端，输入如下命令
replicaof no one，然后再执行config rewrite
注意：从节点数据不会丢失
7.5.3.从节点切换新主
登陆从节点客户端，执行如如下命令
slaveof 新ip 新 port
1.断开与旧主节点主从关系。
2.与新主节点建立主从关系。
3.删除从节点当前所有数据。
4.对新主节点进行复制操作。
春风阁讲堂出品
121
---
## Page 122
7.5.4.从提升为主操作
在某些场景下，比如机器原因或者其它原因导到主节点不可用，这时候我们需要将原来的从提升为主，并建立新的主从关系
比如原有的A->B，我们需要处理成新的B-C
主要操作如下：
1.将原来从节点B的replicaof去掉，重新启动（这一步，相当于把B由从提升为主）
2.将C的配置replicaof指向B节点（这一步，相当于建立主从关系）
单纯的主从模式下，整个过程需要人工参与，并非自动完成
所以主从模式只是增加了读并发，不具备高可用，目前来讲生产上该模式比较少见
春风阁讲堂出品
122
---
## Page 123
8.Sentinel高可用方案
8.1.Sentinel模式架构
1.RedisSentinel是一个分布式架构，包含若干个Sentinel节点和若干个Redis数据节点，
2.
每个Sentinel节点会对Redis数据节点和其余Sentinel节点进行监控，当发现节点不可达时，会对节点做下线标识。
3.如果被标识的是Redis主节点，它会和其他Sentinel节点进行“协商”，当大多数的Sentinel节点都认为主节点不可达时，他们会选举出一个Sentinel
节点来完成自动故障转移工作，同时将这个变化通知给Redis应用方
Sentinel集群
Sentinel节点1
监控
监控
Sentinel节点2