only need to try kID on cID(cid:1) if ID and ID
are at the same
depth in the tree, which requires knowledge of the depth of
for ciphertext cID(cid:1). Of course, we cannot directly re-
ID
(cid:1)
for ciphertext cID(cid:1), since the encryption is meant
lease ID
(cid:1)
. However, since each ciphertext C has a portion
to hide ID
(cid:1)
at every depth of the tree, we can give out the depth of ID
for
each cID(cid:1) ∈ C without leaking any information about ID
(cid:1)
.
In this way, we reduce the decryption cost to O(log T ) rather
than O(log2
T ).
(cid:1)
(cid:1)
(cid:1)
We emphasize that using AIBE as the underlying encryp-
tion scheme is crucial to ensuring the security of the de-
rived MRQED1 scheme. In particular, a non-anonymous IBE
scheme is not suitable to use as the underlying encryption
scheme, since IBE hides only the message Msg but not the
attribute x.
,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007(cid:4)
(cid:5)
4.3 AIBE-Based MRQEDD Construction
(log T )D
The same idea can be applied to construct an MRQEDD
scheme, resulting in O(1) public key size, O
en-
cryption cost, ciphertext size, decryption key size, and de-
cryption cost. Since the details of this construction is not cru-
cial to the understanding of our main construction, we only
give a sketch here and leave the full description of the scheme
to the technical report version [43]. However, we highlight
a few important deﬁnitions here, including the notion of a
simple hyper-rectangle, and the deﬁnition of Λ×(B). These
deﬁnitions will later be used in our main construction.
We build D binary interval trees, one for each dimension.
We assign a globally unique ID to each node in the D trees.
Representing a hyper-rectangle. We represent an arbitrary
hyper-rectangle as a collection of simple hyper-rectangles.
To illustrate this idea, we ﬁrst give a formal deﬁnition of
a simple hyper-rectangle, and then state how to represent
an arbitrary hyper-rectangle as a collection of simple hyper-
rectangles. Simply put, a simple hyper-rectangle is a hyper-
rectangle B0 in space, such that B0 can be represented by
a single node in the tree of every dimension. More specif-
ically, a hyper-rectangle B(s1, t1, . . . , sD, tD) in space is
composed of a range along each dimension. If for all 1 ≤
d ≤ D, |Λ(sd, td)| = 1, i.e., [sd, td] is a simple range
in the dth dimension, then we say that the hyper-rectangle
B(s1, t1, . . . , sD, tD) is a simple hyper-rectangle. A simple
hyper-rectangle can be deﬁned by a single node from each
dimension. We can assign a unique identity to each simple-
rectangle B0(s1, t1, . . . , sD, tD) in space. Deﬁne
idB0 = (ID1, ID2, . . . , IDD) ,
where IDd(1 ≤ i ≤ D) is the node representing [sd, td] in
the dth dimension.
hyper-rectangles). Given
Deﬁnition 6 (Hyper-rectangle as a collection of sim-
ple
hyper-rectangle
B(s1, t1, . . . , sD, tD), denote Λd(B)
:= Λ(sd, td) for
d ∈ [D]. Λ(B) is the collection of nodes representing
range [sd, td] in the dth dimension. The hyper-rectangle
B can be represented as a collection Λ×(B) of simple
hyper-rectangles:
an
×
Λ
(B) = Λ1(B) × Λ2(B) × . . . × ΛD(B)
(cid:4)
(cid:5)
In particular, for every id ∈ Λ×(B), id is a vector of the form
(ID1, ID2, . . . , IDD), where IDd (d ∈ [D]) is a node in
the tree corresponding to the dth dimension. Therefore, id
uniquely speciﬁes a simple hyper-rectangle B0 in space.
(log T )D
Clearly, |Λ×(B)| = O
; in addition, Λ×(B)
can be efﬁciently computed. Given the above deﬁnitions,
we brieﬂy describe the AIBE-based MRQEDD construction.
The detailed description is provided the technical report ver-
sion [43].
Encryption. Suppose that now we would like to encrypt a
message Msg and the point X = (x1, x2, . . . , xD). We
encrypt the message Msg under all simple hyper-rectangles
Then,
that contain the point X = (x1, x2, . . . , xD). This is equiv-
alent to encrypting Msg under the cross-product of D dif-
ferent paths to the root. Speciﬁcally, for d ∈ [D], denote
Pd(X) := P(xd). Pd(X) is the path from the root to the
leaf node representing xd in the dth dimension. Deﬁne the
cross-product of all D different paths to the root:
(log T )D
(log T )D
(X) =P 1(X) × P2(X) × . . . × PD(X).
P×
(cid:5)
(cid:4)
to encrypt Msg and X, we use AIBE to en-
(cid:5)
(cid:4)
crypt Msg under every id ∈ P×(X). Since |P×(X)| =
, both encryption cost and ciphertext size are
O
.
O
Key derivation and decryption. To issue decryption keys
for a hyper-rectangle B, we issue a key for every id ∈
Λ×(B). Since |Λ×(B)| = O
, the decryption
. Now if X ∈ B, then P×(X) ∩
key has size O
Λ×(B) (cid:10)= ∅; in addition, P×(X) and Λ×(B) intersect at ex-
actly one simple hyper-rectangle idB0, where the keys and the
ciphertexts overlap. In this case, we use the key for idB0 to
decrypt the ciphertext for idB0. Otherwise, if X /∈ B, then
P×(X) ∩ Λ×(B) =∅. In this case, the security of the under-
lying AIBE schemes ensures the security of the MRQEDD
constructions. In the technical report version [43], we show
that the cost of decryption is also O
(log T )D
(log T )D
(log T )D
(cid:4)
(cid:5)
(cid:5)
.
(cid:4)
(cid:5)
(cid:4)
5 Our MRQEDD Construction
(cid:4)
(cid:5)
(cid:4)
(cid:5)
In Section 4, we showed an AIBE-based MRQEDD con-
struction with O(1) public key size, O
encryp-
decryption key
tion cost and ciphertext size, O
size and decryption cost. In this section, we propose a new
MRQEDD construction with O (D log T ) public key size,
O (D log T ) encryption cost and ciphertext size, O (D log T )
decryption key size, and O
decryption cost.
(log T )D
(log T )D
(log T )D
(cid:4)
(cid:5)
5.1
Intuition
We build D interval trees over integers from 1 to T , each
representing a separate dimension. Assume each tree node
has a globally unique ID. In the previous section, we showed
a naive construction for MRQEDD based on AIBE. The naive
construction encrypts Msg under the O((log T )D) simple
hyper-rectangles that contain the point X; and releases de-
cryption keys for the O((log T )D) simple hyper-rectangles
that compose a hyper-rectangle B. Our goal is to reduce
the ciphertext size and decryption key size to O(D log T ) in-
stead. However, as we will soon explain, naively doing this
introduces the collusion attack as shown in Figure 2 (b). Our
main technical challenge, therefore, is to devise ways to se-
cure against the collusion attack.
Reducing the ciphertext size. In other words, rather than en-
cryption Msg for each simple hyper-rectangle in P×(X) =
P1(X) × . . . × PD(X), we would like to encrypt Msg for
each tree node in the the union of these D different paths:
P∪
(X) =P 1(X) ∪ . . . ∪ PD(X).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007c1
c2
c3
c4
3
. . .
1
. . .
T
k
IDB
k
IDC
IDA
k
2
1
. . .
6 . . .
T
1
.
.
.
c8
5
.
.
.
T
c5
c7
c6
x
1
.
.
.
3
.
.
.
k
IDD
k
IDE
k
IDF
7
T
kx1
ky1
R1
kx2
R2
ky2
R3
R4
(a) A ciphertext and a decryption key in MRQED2.
(b) Collusion.
Figure 2. An MRQED2 scheme. (a) Encryption under the point x = (3, 5) and the keys released for the range [2, 6]×[3, 7]. (b) With
decryption keys kx1, ky1 for region R1 and kx2, ky2 for region R4, regions R2 and R3 are compromised.
Reducing the decryption key size. Instead of representing
an arbitrary hyper-rectangle using the collection of simple
hyper-rectangles, we can represent a simple hyper-rectangle
B as the collection of disjoint intervals over different dimen-
sions:
Deﬁnition 7 (Hyper-rectangle as a collection of nodes). A
hyper-rectangle B ⊆ L∆ gives a collection of nodes corre-
sponding to disjoint intervals over different dimensions:
∪
(B) = Λ1(B) ∪ Λ2(B) ∪ . . . ∪ ΛD(B)
Λ
Note that for all hyper-rectangle B ⊆ L∆, |Λ∪(B)| =
O(D log T ); in addition, Λ∪(B) can be computed efﬁciently.
Using the above deﬁnition, rather than releasing keys for
each simple hyper-rectangle in Λ×(B) = Λ1(B) × . . . ×
ΛD(B), we would like to release keys for each ID in
Λ1(B) ∪ . . . ∪ ΛD(B).
Example. Figure 2 (a) is an example in two dimensions. To
encrypt under the point (3, 5), we ﬁnd the path from the leaf
node 3 to the root in the ﬁrst dimension, and the path from
the leaf node 5 to the root in the second dimension. We then
produce a block in the ciphertext corresponding to each node
on the two paths. In the ﬁrst dimension, we produce blocks
c1, c2, c3 and c4. In the second dimension, we produce blocks
c5, c6, c7 and c8. To release decryption keys for the range
[2, 6] × [3, 7], we ﬁnd a collection Λ(2, 6) of nodes covering
the range [2, 6] in the ﬁrst dimension; and a collection Λ(3, 7)
of nodes covering [3, 7] in the second dimension. We issue
a block in the decryption key corresponding to each node
in Λ(2, 6) and in Λ(3, 7). In the ﬁrst dimension, we create
blocks kIDA, kIDB , and kIDC ; and in the second dimension,
we create blocks kIDD , kIDE , and kIDF .
Preventing the collusion attack. Unfortunately, naively
doing the above is equivalent to applying the AIBE-based
MRQED1 scheme independently in each dimension. As we
demonstrate in Figure 2 (b), such a scheme is susceptible to
the collusion attack. Suppose that Figure 2 (b), every rect-
angle is a simple rectangle. Now suppose that an adversary
were given the decryption keys for region R1 and R4, then
the adversary would have collected keys kR1 = {kx1, ky1},
kR4 = {kx2, ky2}. With these, the adversary would be able
to reconstruct the keys for R2 and R3: kR2 = {kx2, ky1},
kR3 = {kx1, ky2}. Hence, our major challenge is to ﬁnd
a way to secure against the collusion attack without incur-
ring additional cost. We use a binding technique to prevent
the collusion attack: we use re-randomization to tie together
the sub-keys in different dimensions. For example, in Fig-
ure 2 (b), when we release the decryption key for region R1,
instead of releasing {kx1, ky1}, we release {(cid:11)µxkx1,(cid:11)µyky1},
where (cid:11)µx and (cid:11)µy are random numbers that we pick each
the key for region R4, we release {(cid:11)µ