### 25.11.3 Setup 方法的函数符号

以 `Setup` 方法为例，表 25-23 列出了该方法的函数符号属性。

**表 25-23: Setup 方法的函数符号**

| 属性                     | 值         | 说明                                                                                      |
|--------------------------|------------|-------------------------------------------------------------------------------------------|
| get_access               | public[3]  | 访问性：公共方法                                                                           |
| get_addressOffset        | 0x620      | 地址偏移量                                                                                 |
| get_addressSection       | 2          | 所在节号                                                                                   |
| get_classParentId        | 3266       | 所属类的类型符号 ID                                                                        |
| get_customCallingConvention | 0          | 未使用定制调用协议                                                                         |
| get_farReturn            | 0          | 不包含远返回（far return）                                                                |
| get_hasAlloca            | 0          | 方法中没有调用 alloca*                                                                     |
| get_hasEH                | 0          | 未使用非托管异常处理                                                                       |
| get_hasEHa               | 0          | 未使用 /EHa 编译选项                                                                      |
| get_hasInlAsm            | 0          | 未使用内嵌汇编                                                                             |
| get_hasLongJump          | 0          | 没有长跳转（long jump）                                                                   |
| get_hasSecurityChecks    | 0          | 未使用安全检查（如 cookie）                                                               |
| get_hasSEH               | 0          | 未使用结构化异常处理（SEH）                                                               |
| get_hasSetJump           | 0          | 未使用 setjump                                                                            |
| get_InlSpec              | 0          | 未被标记为 inline                                                                          |
| get_interruptReturn      | 0          | 未包含中断返回指令（如 iret）                                                             |
| get_intro                | 1          | 是引入虚方法的方法（Introducing Virtual Function）                                         |
| get_isNaked              | 0          | 不具有 naked 属性（告诉编译器不要加入序言和结语）                                          |
| get_isStatic             | 0          | 不是静态方法                                                                               |
| get_length               | 0xc3       | 函数长度                                                                                   |
| get_lexicalParentId      | 316        | 父词条 ID（即 BaseClass.obj）                                                              |
| get_locationType         | static[1]  | 位置类型                                                                                   |
| get_name                 | CBaseClass::Setup | 名称                                                                  |
| get_noInline             | 0          | 未标记为 noinline                                                                         |
| get_noReturn             | 0          | 未标记为 noreturn                                                                         |
| get_noStackOrdering      | 0          | 安全检查（GS）时可以栈定序                                                                 |
| get_notReached           | 0          | 不具有“never reached”特征                                                                 |
| get_optimizedCodeDebugInfo | 0          | 不属于包含调试信息的优化代码                                                               |
| get_pure                 | 0          | 不是纯虚函数                                                                               |
| get_relativeVirtualAddress | 71200     | 函数入口相对于模块起点的地址                                                               |
| get_typeId               | 1261       | 函数类型符号的 ID                                                                          |
| get_undecoratedName      | ****       | 未修饰过的名称（内容为 `public: virtual int __thiscall CBaseClass::Setup(wchar_t const *)`） |
| get_virtual              | 1          | 是虚函数                                                                                   |
| get_virtualAddress       | 0x11620    | 函数入口的虚拟地址                                                                         |
| get_virtualBaseOffset    | 4          | 虚函数在虚函数表中的偏移量                                                                 |

*注释：*
- *alloca* 是从栈上分配内存的 C 标准函数。
- *setjump* 可以保存当前栈环境，以便以后使用 *longjump* 跳回到这个状态。它们一起可以实现跨函数的跳转。C 中的异常处理使用这种方法来执行异常处理和恢复代码。
- 如果父类和子类中都有相同的虚方法，那么最早将该方法声明为 *virtual* 的那个方法就是所谓的引入虚方法（Introducing Virtual Function）。
- 使用 *get_undecoratedNameEx* 方法可以获取不同形式的未修饰名。

### 25.11.4 SymTagFunctionStart

`SymTagFunctionStart` 符号用于描述源代码调试时函数的实际可调试起点。例如，在源程序中对函数入口设置断点时，调试器实际上会将断点设置在函数序言之后的位置。`FunctionStart` 符号正是用来描述这一位置的。

通过 SymView 的 Compiland 视图，我们可以观察到函数的 `FunctionStart` 符号。表 25-24 列出了 `Setup` 方法的 `FunctionStart` 符号的主要属性。

**表 25-24: Setup 方法的 FunctionStart 符号**

| 属性                    | 值         | 说明                                                   |
|-------------------------|------------|--------------------------------------------------------|
| get_addressOffset       | 0x643      | 调试起点的偏移地址                                     |
| get_addressSection      | 2          | 调试起点所在的节号                                     |
| get_locationType        | static[1]  | 位置类型                                               |
| get_relativeVirtualAddress | 0x11643   | 调试起点相对于模块起点的地址                           |
| get_virtualAddress      | 0x11643    | 调试起点的虚拟地址                                     |

从上表可以看出，`FunctionStart` 符号定义的位置是 0x11643，这与 VC2005 调试器实际设置断点的位置（0x00411643）一致，因为我们使用 SymView 工具观察的值没有包括模块基地址。

### 25.11.5 SymTagFunctionEnd

类似于 `FunctionStart` 符号，`SymTagFunctionEnd` 符号用于描述源代码级调试时函数的调试结束位置。以 `Setup` 方法为例，其 `FunctionEnd` 符号所定义的偏移地址是 0x6cd，对应的是设置返回值的下一条语句：

```assembly
004116C8  mov         eax,1  ; return TRUE;
004116CD  pop         edi
```

`FunctionStart` 和 `FunctionEnd` 符号主要用于源代码级调试。在汇编窗口调试时，可以在起始点之前或截止点之后设置断点并进行跟踪。

### 25.11.6 SymTagLabel

`SymTagLabel` 符号用于描述程序中的标号（Label）。因为标号实际上记录的是某段代码的地址，所以标号既可以是跳转语句的目标，也可以被当作函数来调用。表 25-25 列出了一个典型标号符号的各种属性，这个符号描述的是 HiWorld 程序中的 `TAG_EXIT` 标号，位于 `LabelTest` 函数中。

**表 25-25: 标号符号的属性**

| 属性                    | 值         | 说明                                                   |
|-------------------------|------------|--------------------------------------------------------|
| get_addressOffset       | 0xa019     | 节内偏移                                               |
| get_addressSection      | 1          | 所属节                                                 |
| get_locationType        | static[1]  | 位置类型                                               |
| get_name                | TAG_EXIT   | 名称                                                   |
| get_relativeVirtualAddress | 0xb019    | 标号的 RVA                                             |
| get_virtualAddress      | 0xb019     | 标号的虚拟地址                                         |

其中的父词条 ID（#1786）代表的是所在函数的符号，因为这个标号是函数内标号。对于函数外标号，父符号是它所在的 Compiland。

### 25.12 数据符号

数据符号（`SymTagData`）用于描述程序中的常量和各种变量，包括局部变量、全局变量、类的成员和参数。我们先来看数据符号的公共属性，然后再分别介绍各种数据符号。

#### 25.12.1 公共属性

除了符号 ID 和 `SymTag`，数据符号通常还具有以下属性：

- **名称**：变量或常量的名称。
- **类型**：描述变量类型的类型符号。
- **取值**：常量的取值，该属性是一个 `VARIANT` 结构，可以表示各种类型的常量。对于变量，应从其存储空间（内存、栈或寄存器）读取其值。
- **数据种类（Data Kind）**：数据的种类，其值为表 25-26 所列出的 `DataKind` 枚举常量之一。
- **位置类型（Location Type）**：数据存放的位置类型，其值为表 25-27 所列出的 `LocationType` 枚举常量之一。

**表 25-26: 描述数据符号种类的 DataKind 枚举类型**

| 常量                  | 值 | 说明                          |
|-----------------------|----|-------------------------------|
| DataIsUnknown         | 0  | 未知种类                      |
| DataIsLocal           | 1  | 局部变量                      |
| DataIsStaticLocal     | 2  | 静态局部变量                  |
| DataIsParam           | 3  | 参数                          |
| DataIsObjectPtr       | 4  | 对象指针（即 this 指针）      |
| DataIsFileStatic      | 5  | 文件作用域内的静态变量        |
| DataIsGlobal          | 6  | 全局变量                      |
| DataIsMember          | 7  | 成员变量                      |
| DataIsStaticMember    | 8  | 静态成员变量                  |

---

希望这些优化后的文本更加清晰、连贯和专业。如果有进一步的需求或修改，请告诉我！