### 后台执行命令

#### 提交作业
- **后台提交作业**：直接在命令行中输入命令后加上 `&` 符号。
- **使用 `nohup` 命令**：使用 `nohup` 命令可以在后台运行一个命令，即使用户退出系统也不受影响。

#### 名词解释
- **Cron**：系统调度进程，用于在特定时间自动执行任务。例如，可以设置每天的非高峰时段运行某些作业。
- **At**：用于在指定时间运行一次性的任务。
- **&**：将进程放到后台运行，适用于不需要长时间占用终端的任务。
- **Nohup**：使进程在用户退出登录后仍能继续运行。

### 3.1 Cron 和 Crontab

**Cron** 是系统的主要调度工具，能够在无需人工干预的情况下执行定时任务。**Crontab** 是用来创建、编辑或删除这些定时任务的命令。每个用户都可以拥有自己的 crontab 文件来存储调度信息。

- **Crontab 文件结构**：
  - 第1列：分钟 (0-59)
  - 第2列：小时 (0-23)
  - 第3列：日期 (1-31)
  - 第4列：月份 (1-12)
  - 第5列：星期几 (0-6, 0表示星期天)
  - 第6列：要执行的命令

**示例**:
```
30 21 * * * /apps/bin/cleanup.sh
```
这表示每晚21:30运行 `/apps/bin/cleanup.sh` 脚本。

**Crontab 命令选项**：
- `-u 用户名`：指定用户名。
- `-e`：编辑用户的 crontab 文件。
- `-l`：列出用户的 crontab 文件内容。
- `-r`：删除用户的 crontab 文件。

### 3.2 At 命令
**At** 命令允许用户安排一次性任务在未来某个时间点执行。其基本格式为：
```
at [-f script] [-m -l -r] [time] [date]
```

- **-f script**：指定要执行的脚本或命令。
- **-l**：列出当前所有等待运行的作业。
- **-r**：取消指定的作业。
- **-m**：在作业完成后发送邮件给用户。

**示例**:
```
$ at 21:10 find /etc -name "passwd" -print
```
此命令将在当天21:10执行 `find /etc -name "passwd" -print`。

### 3.3 使用 `&` 命令
当你希望在后台运行一个命令时，可以在命令末尾添加 `&` 符号。这样做的好处是可以释放终端，以便进行其他操作。

**示例**:
```
$ find /etc -name "passwd" -print &
```
上述命令会在后台查找 `/etc` 目录下名为 `passwd` 的文件，并打印结果。

通过以上方法，你可以有效地管理和调度你的系统任务，无论是定期任务还是临时性的一次性任务。