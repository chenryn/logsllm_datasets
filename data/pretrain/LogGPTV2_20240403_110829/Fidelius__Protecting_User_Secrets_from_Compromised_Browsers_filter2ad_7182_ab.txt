protecting user inputs and computation over them. We do
not provide a full framework for secure web applications or
a generic tool for protecting existing web applications. In
particular, we do not protect against developers who decide
to run insecure, leaky, or malicious JavaScript code inside an
enclave, but we do provide a simple developer interface to
protect security-critical components of applications.
We assume the security of the trusted hardware platform and
that the enclave hides the contents of its protected memory
pages and CPU registers from an attacker with control of
the OS, so side channel attacks on the enclave [21], [22] are
also out of the scope of this work. We discuss side channel
attacks and mitigations for SGX in Section XII. Physical
attackers who tamper with the internal functionality of our
devices also lie outside our threat model, but we note that
our trusted devices seem to be robust against opportunistic
physical attackers that do not tamper with hardware internals
but can, for example, attach a usb keylogger to a computer.
The SGX hardware itself is also designed to resist advanced
hardware attackers.
Finally, we do not address how the honest server protects
sensitive data once the user’s inputs reach it. Our goal is to
protect data from compromise on the client side or in transit
to the server. Once safely delivered to the correct origin, other
measures must be taken to protect user data. For example, we
do not defend against a server who receives secrets from the
user and then displays them in untrusted HTML sent back to
the browser.
IV. ARCHITECTURE OVERVIEW
The goal of Fidelius is to establish a trusted path between
a user and the remote server behind a web application. To
achieve this goal, Fidelius relies on two core components:
a trusted user I/O path and a web enclave. In practice, this
involve subsystems for a secure keyboard, a secure video
display, a browser component to interact with a hardware
enclave, and the enclave itself. Figure 1 gives an overview
of the components of Fidelius.
(cid:19)(cid:23)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
A. Trusted User I/O Path
The trusted user I/O path consists of a keyboard and
display with a trusted dongle placed between them and the
computer running Fidelius. Each device consists of trusted
and untrusted modes. The untrusted modes operate exactly
the same as in an unmodiﬁed system. The trusted keyboard
mode, when activated, sends a constant stream of encrypted
keystrokes to the enclave. The enclave decrypts and updates
the state of the relevant trusted input ﬁeld. The trusted and
untrusted display modes are active in parallel, and the trusted
mode consists of a series of overlays sent encrypted from
the enclave to the display. Overlays include rendered DOM
subtrees (including, if any, the protected user inputs) placed
over the untrusted display output as well as a dedicated portion
of the screen inaccessible to untrusted content. We cover these
functionalities and details of the protocols used to secure them
in Section VI. Finally, both trusted devices have LEDs that
notify the user when a trusted path is established and ready
to collect user input. Our system relies, in part, on users not
typing secrets on the keyboard when these security indicator
lights are off. This ensures that only the enclave has access to
secrets entered on the keyboard. We note, however, that several
works have studied the effectiveness of security indicators
in directing user behavior [24], [25] and found that users
often ignore them. We brieﬂy discuss potential alternatives
in Section XI, but leave the orthogonal problem of designing
a better user interface – one that is more difﬁcult to ignore –
to future work.
B. Web Enclave
A web enclave is essentially a hardware enclave running
a minimalistic,
trusted browser engine bound to a single
web origin. A browser using a web enclave delegates the
management and rendering of portions of a DOM tree and
the execution of client-side scripts, e.g. JavaScript and Web
Assembly, to the enclave. In addition, the web enclave can
send and receive encrypted messages to and from trusted
devices and the origin server. Finally, the web enclave provides
client-side script APIs to access the DOM subtree, secure
storage, and secure HTTP communication.
When a user loads a web page, Fidelius checks whether
the page contains HTML tags that need to be protected, e.g.,
secure HTML forms. If it does, it initiates a web enclave,
runs remote attestation between that enclave and the server,
and validates the identity of the server. Once this process
completes, Fidelius loads the HTML tags it needs to protect
into the web enclave and veriﬁes their signatures. Then, when
the user accesses a protected tag, e.g. with a mouse click,
Fidelius gives control to the enclave, which in turn activates
the devices’ trusted mode. The trusted mode LEDs are turned
on, informing the user that the trusted path is ready to securely
collect user input.
Web enclaves provide two main ways to send protected
messages to a remote server: directly through an encrypted
form submission or programmatically via an XMLHttpRequest
API. When a user clicks a form’s submit button, the web
2QOLQH6WRUH;
6HFXUH_KWWSVSD\VLWHFRP

+ROGHU
&DUG1XPEHU
00
 [...] 
value="Card Number" name="card"/>
value="MM/YY" name="exp"/>
Place order
Cancel
Fidelius currently supports , , and
 tags. To mark any of these tags as compatible
with Fidelius, developers add a secure attribute to the tag. In
the case of  and  tags, a signature over the
content of the tag is included in a sign attribute, to be veriﬁed
with respect to the server’s public key inside the enclave as
described in Section VII. The signature ensures that the form
and script contents have not been modiﬁed by malware before
they were passed to the enclave. The signature is not needed
for  tags because the signature on a form includes
the inputs contained within it.  tags also require a
name attribute to be shown in the trusted component of the
display when that input has focus.
JavaScript included in secure  tags runs on an
interpreter inside the web enclave with different scope than
untrusted code running in the browser. Trusted JavaScript has
access to its own memory and its own web APIs for secure
storage and secure HTTP requests, but it cannot directly access
the memory or web APIs available to untrusted JavaScript.
Trusted and untrusted JavaScript can, however, make calls to
each other and pass information between each other as needed
using an interface similar to the postMessage cross-origin
message passing API.
Fidelius enforces a strict same-origin policy for web en-
claves, so network communication originating or ending in an
enclave can only come from its speciﬁed origin. By default,
the origin of HTML tags is inherited from the web page. In
general, the origin is derived from the initial URL of the page.
However, for tags such as  and , the origin
is derived from the action and src attributes respecively.
The origin speciﬁed here is not authenticated and therefore
susceptible to tampering. We discuss the process by which
a web enclave connects to remote servers and veriﬁes their
legitimacy in Section VII.
VI. TRUSTED PATH FOR USER I/O
In this section, we describe the building blocks to create and
manage a trusted path connecting a keyboard, display, and web
enclave. Speciﬁcally, we cover device setup, communication
patterns between devices, and the structure of individual
messages passed between devices.
Although we develop our trusted I/O path in the context of
the larger Fidelius system and focus our discussion on web
applications, it is important to note that the trusted path is
fundamentally a separate system from the web enclave. In
other words, although the two systems interact closely in the
design of Fidelius, the trusted path has applications outside
the web and can be run on its own as well. To our knowledge,
this is the ﬁrst system to provide a trusted path to the user
for both input and output relying only on assumptions about
enclave security. We cover the details of how we realize the
trusted peripherals in hardware dongles in Section IX.
A. Setup
Listing 1. Fidelius-enabled code for the online payment web page.
In red, the new HTML attributes required by Fidelius.
In order to securely communicate, the web enclave and
peripherals (or the dongles connected to them) must have a
(cid:19)(cid:23)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
shared key. One option is to operate in a threat model with an
initial trusted phase where we assume the computer is not yet
compromised. Pre-shared keys are exchanged when the user
conﬁgures the computer for the ﬁrst time. Devices store the
key in an internal memory, and the enclave seals the shared
keys for future retrieval. The key can be accessed only by the
enclave directly and not by user-provided JavaScript running
inside it.
In the more realistic setting where new peripherals can be
introduced to a computer over time, we must protect against