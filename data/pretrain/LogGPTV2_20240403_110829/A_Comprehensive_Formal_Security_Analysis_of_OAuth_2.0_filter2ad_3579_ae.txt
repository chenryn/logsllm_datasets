if the following holds true: if at any point in a run of OWS n an
attacker can obtain the service token that was issued by an honest
RP using some IdP i for a user u, then the IdP i, the browser of u, or
at least one of the trusted RPs of u must be corrupted.
Session Integrity. Intuitively, session integrity (for authorization)
means that (a) an RP should only be authorized to access some
resources of a user when the user actually expressed the wish to
start an OAuth ﬂow before, and (b) if a user expressed the wish to
start an OAuth ﬂow using some honest IdP and a speciﬁc identity,
then the OAuth ﬂow is never completed with a different identity (in
the same session); similarly for authentication.
More formally, we say that OWS w is secure w.r.t. session integrity
for authorization if the following holds true: (a) if in a run OWS w an
OAuth login ﬂow is completed with a user’s browser, then this user
started an OAuth ﬂow. (b) If in addition we assume that the IdP that
is used in the completed ﬂow is honest, then the ﬂow was completed
for the same identity for which the OAuth ﬂow was started by the
user. We say that the OAuth ﬂow was completed (for some identity
v) iff the RP gets access to a protected resource (of v).
We say that OWS w is secure w.r.t. session integrity for authenti-
cation if the following holds true: (a) if in a run ρ of OWS w a user
is logged in with some identity v, then the user started an OAuth
ﬂow. (b) If in addition the IdP that is used in that ﬂow is honest,
then the user is logged in under exactly the same identity for which
the OAuth ﬂow was started by the user.
We note that for session integrity, as opposed to authorization
and authentication, we use the web attacker as an adversary. The
rationale behind this is that a network attacker can always forcefully
log in a user under his own account (by setting cookies from non-
secure to secure origins [39]), thereby defeating existing CSRF
defenses in OAuth (most importantly, the state parameter). This is
a common problem in the session management of web applications,
independently of OAuth. This is why we restrict our analysis of
session integrity to web attackers since otherwise session integrity
would trivially be broken. We note, however, that more robust
solutions for session integrity are conceivable (e.g., using JavaScript
and HTML5 features such as web messaging and web storage).
While some proprietary approaches exist, such approaches are less
common and typically do not conform to the OAuth standard.
Main Theorem. We prove the following theorem (see [17] for the
proof):
Theorem 1. Let OWS n be an OAuth web system with a network at-
tacker, then OWS n is secure w.r.t. authorization and secure w.r.t. au-
thentication. Let OWS w be an OAuth web system with web attack-
ers, then OWS w is secure w.r.t. session integrity for authorization
and authentication.
Note that this trivially implies that authentication and authoriza-
tion properties are satisﬁed also if web attackers are considered.
12135.3 Discussion of Results
Our results show that the OAuth standard is secure, i.e., provides
strong authentication, authorization, and session integrity proper-
ties, when (1) ﬁxed according to our proposal and (2) when ad-
hering to the OAuth security recommendations and best practices,
as explained in Section 5.1. Depending on individual implementa-
tion choices, (2) is potentially not satisﬁed in all practical scenarios.
For example, RPs might run untrusted JavaScript on their websites.
Nevertheless, our security results, for the ﬁrst time, give precise
implementation guidelines for OAuth to be secure and also clearly
show that if these guidelines are not followed, then the security of
OAuth cannot be guaranteed.
6. RELATED WORK
We focus on work closely related to OAuth 2.0 or formal security
analysis of web standards and web applications.
The work closest to our work is the already mentioned work by
Bansal, Bhargavan, Delignat-Lavaud, and Maffeis [6]. Bansal et
al. analyze the security of OAuth using the applied pi-calculus and
the WebSpi library, along with the protocol analysis tool ProVerif.
They model various settings of OAuth 2.0, often assuming the pres-
ence of common web implementation ﬂaws resulting in, for exam-
ple, CSRF and open redirectors in RPs and IdPs. They identify
previously unknown attacks on the OAuth implementations of Face-
book, Yahoo, Twitter, and many other websites. Compared to our
work, the WebSpi model used in [6] is less expressive and compre-
hensive (see also the discussion in [14]), and the models of OAuth
they employ are more limited.16 As pointed out by Bansal et al.,
the main focus of their work is to discover attacks on OAuth, rather
than proving security. They have some positive results, which, how-
ever, are based on their more limited model. In addition, in order
to prove these results further restrictions are assumed, e.g., they
consider only one IdP per RP and all IdPs are assumed to be honest.
Wang et al. [37] present a systematic approach to ﬁnd implicit as-
sumptions in SDKs (e.g., the Facebook PHP SDK) used for authenti-
cation and authorization, including SDKs that implement OAuth 2.0.
In [29], Pai et al. analyze the security of OAuth in a very limited
model that does not incorporate generic web features. They show
that using their approach, based on the Alloy ﬁnite-state model
checker, known weaknesses can be found. The same tool is used
by Kumar [24] in a formal analysis of the older OAuth 1.0 protocol
(which, as mentioned, is very different to OAuth 2.0).
Chari, Jutla, and Roy [9] analyze the security of the authorization
code mode in the universally composability model, again without
considering web features, such as semantics of HTTP status codes,
details of cookies, or window structures inside a browser.
Besides these formal approaches, empirical studies were con-
ducted on deployed OAuth implementations.
In [36], Sun and
Beznosov analyze the security of three IdPs and 96 RPs. In [25],
Li and Mitchell study the security of 10 IdPs and 60 RPs based
in China. In [38], Yang et al. perform an automated analysis of 4
OAuth IdPs and 500 RPs. Shernan et al. [34] evaluate the lack of
CSRF protection in various OAuth deployments. In [10, 33], practi-
cal evaluations on the security of OAuth implementations of mobile
apps are performed.
16For example, only two OAuth modes are considered, the model
is monotonic (e.g., cookies can only be added, but not deleted or
modiﬁed), ﬁxed bounded number of cookies per request, no precise
handling of windows, documents, and iframes, no web messaging,
omission of headers, such as origin. We note that while OAuth does
not make use of all web features, taking such features into account
is important to make positive security results more meaningful.
In [27], Mladenov et al. perform an informal analysis of OpenID
Connect. They present several attacks related to discovery and dy-
namic client registration, which are extensions of OpenID Connect;
see also the discussion in Section 3.2 (related attacks) concerning
their malicious endpoint attack.
Note that many of the works listed here led to improved secu-
rity recommendations for OAuth as listed in RFC6749 [20] and
RFC6819 [26]. These are already taken into account in our model
and analysis of OAuth.
More generally, there have been only very few analysis efforts
for web applications and standards based on formal web models so
far. Work outside of the context of OAuth includes [2–5,14–16,23].
7. CONCLUSION
In this paper, we carried out the ﬁrst extensive formal analy-
sis of OAuth 2.0 based on a comprehensive and expressive web
model. Our analysis, which aimed at the standard itself, rather than
speciﬁc OAuth implementations and deployments, comprises all
modes (grant types) of OAuth and available options and also takes
malicious RPs and IdPs as well as corrupted browsers/users into
account. The generic web model underlying our model of OAuth
and its analysis is the most comprehensive web model to date.
Our in-depth analysis revealed four attacks on OAuth as well as
OpenID connect, which builds on OAuth. We veriﬁed the attacks,
proposed ﬁxes, and reported the attacks and our ﬁxes to the work-
ing groups for OAuth and OpenID Connect. The working groups
conﬁrmed the attacks. Fixes to the standard and recommendations
are currently under discussion or already incorporated in a draft for
a new RFC [22].
With the ﬁxes applied, we were able to prove strong authorization,
authentication, and session integrity properties for OAuth 2.0. Our
security analysis assumes that OAuth security recommendations
and certain best practices are followed. We show that otherwise the
security of OAuth cannot be guaranteed. By this, we also provide
clear guidelines for implementations. The fact that OAuth is one of
the most widely deployed authorization and authentication systems
in the web and the basis for other protocols makes our analysis
particularly relevant.
As for future work, our formal analysis of OAuth offers a good
starting point for the formal analysis of OpenID Connect, and hence,
such an analysis is an obvious next step for our research.
8. ACKNOWLEDGEMENTS
This work was partially supported by Deutsche Forschungsge-
meinschaft (DFG) through Grant KU 1434/10-1.
9. REFERENCES
[1] M. Abadi and C. Fournet. Mobile Values, New Names, and
Secure Communication. In POPL 2001, pages 104–115.
ACM Press, 2001.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song.
Towards a Formal Foundation of Web Security. In CSF 2010,
pages 290–304. IEEE Computer Society, 2010.
[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar,
G. Pellegrino, and A. Sorniotti. An authentication ﬂaw in
browser-based Single Sign-On protocols: Impact and
remediations. Computers & Security, 33:41–58, 2013.
Elsevier, 2013.
[4] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L.
Tobarra. Formal Analysis of SAML 2.0 Web Browser Single
Sign-on: Breaking the SAML-based Single Sign-on for
Google Apps. In FMSE 2008, pages 1–10. ACM, 2008.
1214[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis.
Keys to the Cloud: Formal Analysis and Concrete Attacks on
Encrypted Web Storage. In POST 2013, volume 7796 of
LNCS, pages 126–146. Springer, 2013.
[6] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis.
Discovering Concrete Attacks on Website Authorization by
Formal Analysis. Journal of Computer Security,
22(4):601–657, 2014. IOS Press, 2014.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for
cross-site request forgery. In CCS 2008, pages 75–88. ACM,
2008.
[8] J. Bradley, T. Lodderstedt, and H. Zandbelt. Encoding claims
in the OAuth 2 state parameter using a JWT –
draft-bradley-oauth-jwt-encoded-state-05. IETF. Dec. 2015.
https://tools.ietf.org/html/
draft-bradley-oauth-jwt-encoded-state-05.
[9] S. Chari, C. S. Jutla, and A. Roy. Universally Composable
Security Analysis of OAuth v2.0. IACR Cryptology ePrint
Archive, 2011:526, 2011.
[10] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague.
OAuth Demystiﬁed for Mobile Application Developers. In
CCS 2014, pages 892–903, 2014.
[11] Chromium Project. HSTS Preload Submission.
https://hstspreload.appspot.com/.
[12] Cross-Origin Resource Sharing - W3C Recommendation 16
January 2014.
http://www.w3.org/TR/2014/REC-cors-20140116/.
[13] J. Eisinger and E. Stark. Referrer Policy – Editor’s Draft, 28
March 2016. W3C. Mar. 2016.
https://w3c.github.io/webappsec-referrer-policy/.
[14] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model for
the Web Infrastructure: Deﬁnition and Application to the
BrowserID SSO System. In S&P 2014, pages 673–688. IEEE
Computer Society, 2014.
[15] D. Fett, R. Küsters, and G. Schmitz. Analyzing the
BrowserID SSO System with Primary Identity Providers
Using an Expressive Model of the Web. In ESORICS 2015,
volume 9326 of LNCS, pages 43–65. Springer, 2015.
[16] D. Fett, R. Küsters, and G. Schmitz. SPRESSO: A Secure,
Privacy-Respecting Single Sign-On System for the Web. In
CCS 2015, pages 1358–1369. ACM, 2015.
[17] D. Fett, R. Küsters, and G. Schmitz. A Comprehensive
Formal Security Analysis of OAuth 2.0. Technical Report
arXiv:1601.01229, arXiv, 2016. Available at
http://arxiv.org/abs/1601.01229.
[18] R. Fielding (ed.) and J. Reschke (ed.). RFC7231 – Hypertext
Transfer Protocol (HTTP/1.1): Semantics and Content. IETF.
Jun. 2014. https://tools.ietf.org/html/rfc7231.
[19] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence,
P. Leach, A. Luotonen, and L. Stewart. RFC2617 – HTTP
Authentication: Basic and Digest Access Authentication.
IETF. Jun. 1999. https://tools.ietf.org/html/rfc2617.
[20] D. Hardt (ed.). RFC6749 – The OAuth 2.0 Authorization
Framework. IETF. Oct. 2012.
https://tools.ietf.org/html/rfc6749.
[21] E. Homakov. How I hacked Github again, 7 February 2014.
http://homakov.blogspot.de/2014/02/
how-i-hacked-github-again.html.
[22] M. Jones, J. Bradley, and N. Sakimura. OAuth 2.0 Mix-Up
Mitigation – draft-ietf-oauth-mix-up-mitigation-01. IETF. Jul.
2016. https:
//tools.ietf.org/html/draft-ietf-oauth-mix-up-mitigation-01.
[23] F. Kerschbaum. Simple Cross-Site Attack Prevention. In
SecureComm 2007, pages 464–472. IEEE Computer Society,
2007.
[24] A. Kumar. Using automated model analysis for reasoning
about security of web protocols. In ACSAC 2012. ACM,
2012.
[25] W. Li and C. J. Mitchell. Security issues in OAuth 2.0 SSO
implementations. In ISC 2014, volume 8783 of LNCS, pages
529–541, 2014. Springer, 2014.
[26] T. Lodderstedt (ed.), M. McGloin, and P. Hunt. RFC6819 –
OAuth 2.0 Threat Model and Security Considerations. IETF.
Jan. 2013. https://tools.ietf.org/html/rfc6819.
[27] V. Mladenov, C. Mainka, J. Krautwald, F. Feldmann, and
J. Schwenk. On the security of modern Single Sign-On
Protocols: Second-Order Vulnerabilities in OpenID Connect.
CoRR, abs/1508.04324v2, 2016.
[28] Open Web Application Security Project (OWASP). Session
ﬁxation. https://www.owasp.org/index.php/Session_Fixation.
[29] S. Pai, Y. Sharma, S. Kumar, R. M. Pai, and S. Singh. Formal
Veriﬁcation of OAuth 2.0 Using Alloy Framework. In CSNT
2011, pages 655–659. IEEE, 2011.
[30] J. Richer (ed.). RFC7662 – OAuth 2.0 Token Introspection.
IETF. Oct. 2015. https://tools.ietf.org/html/rfc7662.
[31] N. Sakimura, J. Bradley, M. Jones, B. de Medeiros, and
C. Mortimore. OpenID Connect Core 1.0 incorporating errata
set 1. OpenID Foundation. Nov. 8, 2014.
http://openid.net/specs/openid-connect-core-1_0.html.
[32] J. Selvi. Bypassing HTTP Strict Transport Security. In
Blackhat (Europe) 2014, 2014.
[33] M. Shehab and F. Mohsen. Towards Enhancing the Security
of OAuth Implementations in Smart Phones. In IEEE MS
2014. IEEE, 2014.
[34] E. Shernan, H. Carter, D. Tian, P. Traynor, and K. R. B.
Butler. More Guidelines Than Rules: CSRF Vulnerabilities
from Noncompliant OAuth 2.0 Implementations. In DIMVA
2015, volume 9148 of LNCS, pages 239–260. Springer, 2015.
[35] SimilarTech. Facebook Connect Market Share and Web
Usage Statistics. Last visited Nov. 7, 2015. https:
//www.similartech.com/technologies/facebook-connect.
[36] S.-T. Sun and K. Beznosov. The Devil is in the
(Implementation) Details: An Empirical Analysis of OAuth
SSO Systems. In CCS 2012, pages 378–390. ACM, 2012.
[37] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and
Y. Gurevich. Explicating SDKs: Uncovering Assumptions
Underlying Secure Authentication and Authorization. In
USENIX Security 2013, pages 399–314. USENIX
Association, 2013.
[38] R. Yang, G. Li, W. C. Lau, K. Zhang, and P. Hu. Model-based
Security Testing: An Empirical Study on OAuth 2.0
Implementations. In AsiaCCS 2016, pages 651–662. ACM,
2016.
[39] X. Zheng, J. Jiang, J. Liang, H. Duan, S. Chen, T. Wan, and
N. Weaver. Cookies Lack Integrity: Real-World Implications.
In USENIX Security 2015), pages 707–721, 2015. USENIX
Association, 2015.
1215