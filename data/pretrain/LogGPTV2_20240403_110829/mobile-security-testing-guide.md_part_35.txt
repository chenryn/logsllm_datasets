Reverse engineering is the process of taking an app apart to find out how it works. You can do this by examining the
compiled app (static analysis), observing the app during run time (dynamic analysis), or a combination of both.
Tooling
Make sure that the following is installed on your system (see the "Android Basic Security Testing" chapter for
installation instructions):
The newest SDK Tools and SDK Platform-Tools packages. These packages include the Android Debugging
Bridge (ADB) client and other tools that interface with the Android platform.
The Android NDK. This is the Native Development Kit that contains prebuilt toolchains for cross-compiling native
code for different architectures. You'll need it if you plan to deal with native code, e.g. to inspect it or to be able to
debug or trace it (the NDK contains useful prebuilt versions of such as gdbserver or strace for various
architectures).
In addition to the SDK and NDK, you'll also need something to make Java bytecode more human-readable.
Fortunately, Java decompilers generally handle Android bytecode well. Popular free decompilers include JD, JAD,
Procyon, and CFR. For convenience, we have packed some of these decompilers into our apkx wrapper script. This
script completely automates the process of extracting Java code from release APK files and makes it easy to
experiment with different backends (we'll also use it in some of the following examples).
Other tools are really a matter of preference and budget. A ton of free and commercial disassemblers, decompilers,
and frameworks with different strengths and weaknesses exist. We'll be covering some of them in this chapter.
Building a Reverse Engineering Environment for Free
253
Tampering and Reverse Engineering on Android
With a little effort, you can build a reasonable GUI-based reverse engineering environment for free.
For navigating the decompiled sources, we recommend IntelliJ, a relatively lightweight IDE that works great for
browsing code and allows basic on-device debugging of the decompiled apps. However, if you prefer something that's
clunky, slow, and complicated to use, Eclipse is the right IDE for you (based on the author's personal bias).
If you don't mind looking at Smali instead of Java, you can use the smalidea plugin for IntelliJ for debugging. Smalidea
supports single-stepping through the bytecode and identifier renaming, and it watches for non-named registers, which
makes it much more powerful than a JD + IntelliJ setup.
apktool is a popular free tool that can extract and disassemble resources directly from the APK archive and
disassemble Java bytecode to Smali format (Smali/Baksmali is an assembler/disassembler for the Dex format. It's
also Icelandic for "Assembler/Disassembler"). apktool allows you to reassemble the package, which is useful for
patching and applying changes to the Android Manifest.
You can accomplish more elaborate tasks (such as program analysis and automated de-obfuscation) with open
source reverse engineering frameworks such as Radare2 and Angr. You'll find usage examples for many of these free
tools and frameworks throughout the guide.
Commercial Tools
Building a reverse engineering environment for free is possible. However, there are some commercial alternatives.
The most commonly used are:
JEB, a commercial decompiler, packs all the functionality necessary for static and dynamic analysis of Android
apps into an all-in-one package. It is reasonably reliable and includes prompt support. It has a built-in debugger,
which allows for an efficient workflowâ€”setting breakpoints directly in the decompiled (and annotated) sources is
invaluable, especially with ProGuard-obfuscated bytecode. Of course, convenience like this doesn't come cheap,
and now that JEB is provided via a subscription-based license, you'll have to pay a monthly fee to use it.
IDA Pro in its paid version is compatible with ARM, MIPS, Java bytecode, and, of course, Intel ELF binaries. It
also comes with debuggers for both Java applications and native processes. With its powerful scripting,
disassembling, and extension capabilities, IDA Pro usually works great for static analysis of native programs and
libraries. However, the static analysis facilities it offers for Java code are rather basic: you get the Smali
disassembly but not much more. You can't navigate the package and class structure, and some actions (such as
renaming classes) can't performed, which can make working with more complex Java apps tedious. In addition,
unless you can afford the paid version, it won't be of help when reversing native code as the freeware version
does not support the ARM processor type.
Disassembling and Decompiling
In Android app security testing, if the application is based solely on Java and doesn't have any native code (C/C++
code), the reverse engineering process is relatively easy and recovers (decompiles) almost all the source code. In
those cases, black-box testing (with access to the compiled binary, but not the original source code) can get pretty
close to white-box testing.
Nevertheless, if the code has been purposefully obfuscated (or some tool-breaking anti-decompilation tricks have
been applied), the reverse engineering process may be very time-consuming and unproductive. This also applies to
applications that contain native code. They can still be reverse engineered, but the process is not automated and
requires knowledge of low-level details.
Decompiling Java Code
The process of decompilation consists of converting Java bytecode back into Java source code. We'll be using
UnCrackable App for Android Level 1 in the following examples, so download it if you haven't already. First, let's install
the app on a device or emulator and run it to see what the crackme is about.
254
Tampering and Reverse Engineering on Android
$ wget https://github.com/OWASP/owasp-mstg/raw/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk
$ adb install UnCrackable-Level1.apk
Seems like we're expected to find some kind of secret code!
We're looking for a secret string stored somewhere inside the app, so the next step is to look inside. First, unzip the
APK file and look at the content.
$ unzip UnCrackable-Level1.apk -d UnCrackable-Level1
Archive: UnCrackable-Level1.apk
inflating: UnCrackable-Level1/AndroidManifest.xml
inflating: UnCrackable-Level1/res/layout/activity_main.xml
inflating: UnCrackable-Level1/res/menu/menu_main.xml
extracting: UnCrackable-Level1/res/mipmap-hdpi-v4/ic_launcher.png
extracting: UnCrackable-Level1/res/mipmap-mdpi-v4/ic_launcher.png
extracting: UnCrackable-Level1/res/mipmap-xhdpi-v4/ic_launcher.png
extracting: UnCrackable-Level1/res/mipmap-xxhdpi-v4/ic_launcher.png
extracting: UnCrackable-Level1/res/mipmap-xxxhdpi-v4/ic_launcher.png
extracting: UnCrackable-Level1/resources.arsc
inflating: UnCrackable-Level1/classes.dex
inflating: UnCrackable-Level1/META-INF/MANIFEST.MF
inflating: UnCrackable-Level1/META-INF/CERT.SF
inflating: UnCrackable-Level1/META-INF/CERT.RSA
In the standard setup, all the Java bytecode and app data is in the file classes.dex in the app root directory. This file
conforms to the Dalvik Executable Format (DEX), an Android-specific way of packaging Java programs. Most Java
decompilers take plain class files or JARs as input, so you need to convert the classes.dex file into a JAR first. You
can do this with dex2jar or enjarify .
Once you have a JAR file, you can use any free decompiler to produce Java code. In this example, we'll use the CFR
decompiler. CFR is under active development, and brand-new releases are available on the author's website. CFR
was released under an MIT license, so you can use it freely even though its source code is not available.
The easiest way to run CFR is through apkx , which also packages dex2jar and automates extraction, conversion,
and decompilation. Install it:
$ git clone https://github.com/b-mueller/apkx
$ cd apkx
$ sudo ./install.sh
This should copy apkx to /usr/local/bin . Run it on UnCrackable-Level1.apk :
$ apkx UnCrackable-Level1.apk
Extracting UnCrackable-Level1.apk to UnCrackable-Level1
Converting: classes.dex -> classes.jar (dex2jar)
dex2jar UnCrackable-Level1/classes.dex -> UnCrackable-Level1/classes.jar
Decompiling to UnCrackable-Level1/src (cfr)
255
Tampering and Reverse Engineering on Android
You should now find the decompiled sources in the directory Uncrackable-Level1/src . To view the sources, a simple
text editor (preferably with syntax highlighting) is fine, but loading the code into a Java IDE makes navigation easier.
Let's import the code into IntelliJ, which also provides on-device debugging functionality.
Open IntelliJ and select "Android" as the project type in the left tab of the "New Project" dialog. Enter "Uncrackable1"
as the application name and "vantagepoint.sg" as the company name. This results in the package name
"sg.vantagepoint.uncrackable1", which matches the original package name. Using a matching package name is
important if you want to attach the debugger to the running app later on because Intellij uses the package name to
identify the correct process.
In the next dialog, pick any API number; you don't actually want to compile the project, so the number doesn't matter.
Click "next" and choose "Add no Activity", then click "finish".
Once you have created the project, expand the "1: Project" view on the left and navigate to the folder
app/src/main/java . Right-click and delete the default package "sg.vantagepoint.uncrackable1" created by IntelliJ.
Now, open the Uncrackable-Level1/src directory in a file browser and drag the sg directory into the now empty
Java folder in the IntelliJ project view (hold the "alt" key to copy the folder instead of moving it).
256
Tampering and Reverse Engineering on Android
You'll end up with a structure that resembles the original Android Studio project from which the app was built.
See the section "Reviewing Decompiled Java Code" below to learn on how to proceed when inspecting the
decompiled Java code.
Disassembling Native Code
Dalvik and ART both support the Java Native Interface (JNI), which defines a way for Java code to interact with native
code written in C/C++. As on other Linux-based operating systems, native code is packaged (compiled) into ELF
dynamic libraries (*.so), which the Android app loads at run time via the System.load method. However, instead of
257
Tampering and Reverse Engineering on Android
relying on widely used C libraries (such as glibc), Android binaries are built against a custom libc named Bionic. Bionic
adds support for important Android-specific services such as system properties and logging, and it is not fully POSIX-
compatible.
When reversing Android apps containing native code you'll have to consider this especial layer between Java and
native code (JNI). It worths also noticing that when reversing the native code you'll need a disassembler. Once your
binary is loaded, you'll be looking at disassembly, which is not easy to look at as Java code.
In the next example we'll reverse the HelloWorld-JNI.apk from the OWASP MSTG repository. Installing and running it
on your emulator or Android device is optional.
$ wget https://github.com/OWASP/owasp-mstg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk
This app is not exactly spectacularâ€”all it does is show a label with the text "Hello from C++". This is the app
Android generates by default when you create a new project with C/C++ supportâ€” it's just enough to show the
basic principles of JNI calls.
Decompile the APK with apkx .
$ apkx HelloWord-JNI.apk
Extracting HelloWord-JNI.apk to HelloWord-JNI
Converting: classes.dex -> classes.jar (dex2jar)
dex2jar HelloWord-JNI/classes.dex -> HelloWord-JNI/classes.jar
Decompiling to HelloWord-JNI/src (cfr)
This extracts the source code into the HelloWord-JNI/src directory. The main activity is found in the file HelloWord-
JNI/src/sg/vantagepoint/helloworldjni/MainActivity.java . The "Hello World" text view is populated in the onCreate
method:
public class MainActivity
extends AppCompatActivity {
static {
System.loadLibrary("native-lib");
}
@Override
protected void onCreate(Bundle bundle) {
super.onCreate(bundle);
258
Tampering and Reverse Engineering on Android
this.setContentView(2130968603);
((TextView)this.findViewById(2131427422)).setText((CharSequence)this.stringFromJNI());
}
public native String stringFromJNI();
}
Note the declaration of public native String stringFromJNI at the bottom. The keyword "native" tells the Java
compiler that this method is implemented in a native language. The corresponding function is resolved during run
time, but only if a native library that exports a global symbol with the expected signature is loaded (signatures
comprise a package name, class name, and method name). In this example, this requirement is satisfied by the
following C or C++ function:
JNIEXPORT jstring JNICALL Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI(JNIEnv *env, jobject)
So where is the native implementation of this function? If you look into the lib directory of the APK archive, you'll
see eight subdirectories named after different processor architectures. Each of these directories contains a version of
the native library libnative-lib.so that has been compiled for the processor architecture in question. When
System.loadLibrary is called, the loader selects the correct version based on the device that the app is running on.
Following the naming convention mentioned above, you can expect the library to export a symbol called
Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI . On Linux systems, you can retrieve the list of symbols
with readelf (included in GNU binutils) or nm . Do this on Mac OS with the greadelf tool, which you can install via
Macports or Homebrew. The following example uses greadelf :
$ greadelf -W -s libnative-lib.so | grep Java
3: 00004e49 112 FUNC GLOBAL DEFAULT 11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI
You can also see this using radare2's rabin2:
$ rabin2 -s HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so | grep -i Java
003 0x00000e78 0x00000e78 GLOBAL FUNC 16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI
This is the native function that eventually gets executed when the stringFromJNI native method is called.
To disassemble the code, you can load libnative-lib.so into any disassembler that understands ELF binaries (i.e.,
any disassembler). If the app ships with binaries for different architectures, you can theoretically pick the architecture
you're most familiar with, as long as it is compatible with the disassembler. Each version is compiled from the same
source and implements the same functionality. However, if you're planning to debug the library on a live device later,
it's usually wise to pick an ARM build.
To support both older and newer ARM processors, Android apps ship with multiple ARM builds compiled for different
Application Binary Interface (ABI) versions. The ABI defines how the application's machine code is supposed to
interact with the system at run time. The following ABIs are supported:
armeabi: ABI is for ARM-based CPUs that support at least the ARMv5TE instruction set.
259
Tampering and Reverse Engineering on Android
armeabi-v7a: This ABI extends armeabi to include several CPU instruction set extensions.
arm64-v8a: ABI for ARMv8-based CPUs that support AArch64, the new 64-bit ARM architecture.
Most disassemblers can handle any of those architectures. Below, we'll be viewing the armeabi-v7a version (located
in HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so ) in radare2 and in IDA Pro. See the section "Reviewing
Disassembled Native Code" below to learn on how to proceed when inspecting the disassembled native code.
radare2
To open the file in radare2 you only have to run r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so . The chapter
"Android Basic Security Testing" already introduces radare2. Remember that you can use the flag -A to run the aaa
command right after loading the binary in order to analyze all referenced code.
$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze function calls (aac)
[x] Analyze len bytes of instructions for references (aar)
[x] Check for objc references
[x] Check for vtables
[x] Finding xrefs in noncode section with anal.in=io.maps
[x] Analyze value pointers (aav)
[x] Value from 0x00000000 to 0x00001dcf (aav)
[x] 0x00000000-0x00001dcf in 0x0-0x1dcf (aav)
[x] Emulate code to find computed references (aae)
[x] Type matching analysis for all functions (aaft)
[x] Use -AA or aaaa to perform additional experimental analysis.
-- Print the contents of the current block with the 'p' command
[0x00000e3c]>
Note that for bigger binaries, starting directly with the flag -A might be very time consuming as well as unnecessary.
Depending on your purpose, you may open the binary without this option and then apply a less complex analysis like
aa or a more concrete type of analysis such as the ones offered in aa (basic analysis of all functions) or aac
(analyze function calls). Remember to always type ? to get the help or attach it to commands to see even more
command or options. For example, if you enter aa? you'll get the full list of analysis commands.
[0x00001760]> aa?
Usage: aa[0*?] # see also 'af' and 'afna'
| aa alias for 'af@@ sym.*;af@entry0;afva'
| aaa[?] autoname functions after aa (see afna)
| aab abb across bin.sections.rx
| aac [len] analyze function calls (af @@ `pi len~call[1]`)
| aac* [len] flag function calls without performing a complete analysis
| aad [len] analyze data references to code
| aae [len] ([addr]) analyze references with ESIL (optionally to address)
| aaf[e|t] analyze all functions (e anal.hasnext=1;afr @@c:isq) (aafe=aef@@f)
| aaF [sym*] set anal.in=block for all the spaces between flags matching glob
| aaFa [sym*] same as aaF but uses af/a2f instead of af+/afb+ (slower but more accurate)
| aai[j] show info of all analysis parameters
| aan autoname functions that either start with fcn.* or sym.func.*
| aang find function and symbol names from golang binaries
| aao analyze all objc references
| aap find and analyze function preludes
| aar[?] [len] analyze len bytes of instructions for references
| aas [len] analyze symbols (af @@= `isq~[0]`)
| aaS analyze all flags starting with sym. (af @@ sym.*)
| aat [len] analyze all consecutive functions in section
| aaT [len] analyze code after trap-sleds
| aau [len] list mem areas (larger than len bytes) not covered by functions
| aav [sat] find values referencing a specific section or map
260
Tampering and Reverse Engineering on Android
There is a thing that is worth noticing about radare2 vs other disassemblers like e.g. IDA Pro. The following quote
from an article of radare2's blog (http://radare.today/) pretty summarizes this.
Code analysis is not a quick operation, and not even predictable or taking a linear time to be processed. This
makes starting times pretty heavy, compared to just loading the headers and strings information like itâ€™s done by
default.
People that are used to IDA or Hopper just load the binary, go out to make a coffee and then when the analysis
is done, they start doing the manual analysis to understand what the program is doing. Itâ€™s true that those tools
perform the analysis in background, and the GUI is not blocked. But this takes a lot of CPU time, and r2 aims to
run in many more platforms than just high-end desktop computers.
This said, please see section "Reviewing Disassembled Native Code" to learn bore bout how radare2 can help us
performing our reversing tasks much faster. For example, getting the disassembly of an specific function is a trivial
task that can be performed in one command.
IDA Pro
If you own an IDA Pro license, open the file and once in the "Load new file" dialog, choose "ELF for ARM (Shared
Object)" as the file type (IDA should detect this automatically), and "ARM Little-Endian" as the processor type.
The freeware version of IDA Pro unfortunately does not support the ARM processor type.
Static Analysis
For white-box source code testing, you'll need a setup similar to the developer's setup, including a test environment
that includes the Android SDK and an IDE. Access to either a physical device or an emulator (for debugging the app)
is recommended.
During black-box testing, you won't have access to the original form of the source code. You'll usually have the
application package in Android's .apk format, which can be installed on an Android device or reverse engineered as
explained in the section "Disassembling and Decompiling".
Manual (Reversed) Code Review
Reviewing Decompiled Java Code
Following the example from "Decompiling Java Code", we assume that you've successfully decompiled and opened
the crackme app in IntelliJ. As soon as IntelliJ has indexed the code, you can browse it just like you'd browse any
other Java project. Note that many of the decompiled packages, classes, and methods have weird one-letter names;
this is because the bytecode has been "minified" with ProGuard at build time. This is a basic type of obfuscation that
makes the bytecode a little more difficult to read, but with a fairly simple app like this one it won't cause you much of a
headache. When you're analyzing a more complex app, however, it can get quite annoying.
261