In addition to the direct instrumentation of applications, we have also in-
strumented a number of wrappers to perform third party monitoring and even
interception. Examples of these include:
– A TCP wrapper [25] replacement to take access control decisions for services
started by the inetd superserver. Services which can be controlled using
TCP wrappers include finger and telnet.
– A suite of application level proxies [13] similar to the ﬁrewall toolkit of
TIS [19].
– A preloaded library to intercept exec system calls to invoke new programs.
These are examples to show that the IDS/A interface can not only be used
for direct application instrumentation but also third party instrumentation and
even interception.
Lastly we have also provided a number of applications which only report
events, using idsad merely as an extended logger instead of as a reference moni-
tor. As an example we have provided a syslog shim which maps syslog messages
to IDS/A events and reports them to idsad.
Further applications are in various stages of development — of particular
interest are those applications which cross protection domains internal to an
organization (e.g. groupware) as this may make it possible to counter internal
threats, often the most damaging.
9 Example Signatures
An example illustrates how IDS/A can be used to restrict the functionality of
an application with a known vulnerability — a typical application for a misuse
detection system: Some versions of ftpd implement the SITE command inse-
curely. At some installations ftp might be an essential service and it may not be
possible to update ftpd immediately (e.g. because a ﬁx is not yet available).
If the ftp server has been instrumented using the IDS/A API, then the fol-
lowing idsad rule could be used to reject SITE commands instead of having to
disable ftp completely:4
service ftpd & scheme ftp & uid ftp & cmd=string SITE:
deny; log file /var/log/idsa/ftpd-site-attempts
4 Some of the mechanisms proposed in [20] to initiate the orderly termination of ﬂawed
programs could conceivably be modiﬁed to automate this contraction of functional-
ity.
Interfacing Trusted Applications with Intrusion Detection Systems
49
The rule applies to applications which register themselves as ftpd using the
scheme ftp, running under the Unix user id ftp.
It is also possible to specify such access rules/signatures at a higher level:
service ftpd & scheme ftp & uid ftp & irisk > 0.4
& (! ipsrc 192.168.1.1/24 | %time wday Sat, Sun):
deny; log file /var/log/idsa/ftpd-risky-deny
This rule denies risky ftp operations to users outside the local network or
those connecting on weekends. If the designer of the ftp daemon has rated the
SITE command as having a risk to system integrity (irisk) of over 0.4 (relative
to other ftp commands) then this rule disables the command under a number of
threatening circumstances.
Note how the author of access rules is able to select between applying his own
domain knowledge (see previous rule) or taking advantage of the knowledge of
the application designer without needing to understand the application internals.
Our system provides state variables to retain information across rules and
events. These can be used to initiate more complex reactions to intrusions and
intrusion attempts. For example, a state variable could be used to retain the
IP address of an attacker probing the ftp daemon. The state information could
then be used to block access to other services, such as using our TCP wrapper
replacement to block access to ﬁnger or telnet or having mod idsa block HTTP
access. Even more sophisticated tests might involve machine learning systems to
discover anomalous usage patters. However, the above rules are already suﬃcient
to block an intrusion and do so without manual intervention and minimal risk
of subversion.
10 Results
We have created a number of signatures which can transiently block out the
more obtrusive bulk vulnerability scanners: For example, mod idsa can be used
to block CGI vulnerability scanners, while the application level proxies or TCP
wrapper replacement can be used to block banner grabbing scanners. Although
the block is transient, the response codes sent to the scanner indicate a perma-
nent failure discouraging further probing.
Apart from ourselves using tools such as whisker [18] to probe an installation,
we have been running idsad on a server as part of its normal operation. idsad
has blocked several real-world banner grabbing scans, as well as a number of
rogue web crawlers which did not honour robots.txt or even tried to access
forbidden areas deliberately.
In order to develop further conﬁdence in IDS/A as a reasonable misuse de-
tection system, more tests are being conducted and additional rule-bases con-
structed.
The anomaly detection capabilities of idsad are still under development, and
no results can be reported on this aspect.
It is diﬃcult to provide a general estimate of the performance costs of using
our system to instrument an application, as this depends heavily on how and
50
M. Welz and A. Hutchison
where the application designer inserts IDS/A calls. However, we have provided
a brief overview of the performance impact for mod idsa, the apache module.
Tests were performed using the httperf tool with 1000 GET requests for the
same entity. We ran three tests:
1. A request for a directory listing made to a web server running on the local
host. Directory listings are expensive as they generate multiple IDS/A calls.
2. A request for a small ﬁle for a server on the local host since a request for a
large ﬁle would have masked the costs of IDS/A calls.
3. A request for a small ﬁle on a remote server, where the remote server is
situated on the same ethernet.
1. local directory listing 14.69
5.22
2. ﬁle on local server
3. ﬁle on remote server
15.60
No mod idsa Test in idsad Test in httpd
26.80 (82.4%) 17.42 (19.0%)
6.28 (20.0%)
5.86 (12.0%)
16.51 (5.9%) 15.95 (2.3%)
Fig. 5. Performance impact of instrumenting apache. Units are in seconds to process
1000 requests. Percentages indicate cost of instrumentation
It can be seen that for an expensive operation such as a directory listing
the cost of contacting idsad can be signiﬁcant, with an overall slowdown of
82%. When the test is shifted into the application context (see Fig. 4) this
drops to 19%. For realistic scenarios — a request for a short ﬁle from a remote
server, IDS/A instrumentation costs drop to a level which we consider acceptable
(2.3%).
11 Discussion
We acknowledge that our approach has limitations, it requires that an applica-
tion be modiﬁed to provide reliable information, and that some attacks might be
able to compromise a trusted application before it is able to report the attack.
However, conventional intrusion detection systems are also fallible — the entire
ﬁeld of intrusion detection is a best eﬀort.
Our approach can be seen as another layer of an in depth defence, with diﬀer-
ent modes of failure to those encountered in conventional intercepting systems.
By making a generic reference monitor available to application programmers
it becomes possible to provide a uniﬁed system for securing applications —
already some trusted applications such as web browsers allow their users to
select a certain level of security. We believe that our API makes this easier: An
application programmer need not create his own reference monitor, but can use
our system. Applications are becoming evermore complex and feature rich, and
it seems unlikely that this trend will be reversed — we provide an API which at
least makes it possible to disable functionality selectively.
Interfacing Trusted Applications with Intrusion Detection Systems
51
In many ways our system can be viewed as oﬀering a second opinion to
an application — like the medical practitioner who consults another party for
an important decision, so our system can be used as another reference monitor
which can be consulted when making a decision which has an impact on security.
12 Related Work
Our interface can be thought of as an extension of the uni-directional applica-
tion logging interfaces such as the conventional Unix syslog or the NT event log.
More complex logging subsystems include the X/OPEN Distributed Auditing
Standard (XDAS) [23] which can be described as logging middleware. An ex-
ample of an IDS using application speciﬁc audit information is DEMIDS [6], a
database misuse detection system.
Some system management architectures provide for a bi-directional instru-
mentation of applications, e.g. SNMP [5] or the X/OPEN XEMS [24]. However,
these interfaces have a diﬀerent focus, dealing with such tasks as starting and
stopping services or exporting service deﬁnitions.
Interfaces which have the exchange of security information as their primary
focus include the one designed by the IETF IDWG [7] or the communications
channels of distributed intrusion detection systems such as AAFID [3], although
the focus of those interfaces is on coupling diﬀerent IDS components, as opposed
to our interface intended to couple an IDS to applications.
Recent examples of directly instrumented systems include the embedded sen-
sor project (ESP) [12] which has modiﬁed a kernel to log network misuse. At the
application level, Kava [26] is an example of a system to enforce access control
policies for mobile code.
The concept of having an application consult a third party for an additional
security decision can be related to aspects of reliable programming, in particular
N version programming where several instances perform the same computation.
In our case the access control decisions are veriﬁed by a second, external reference
monitor.
Systems such as JANUS [9], Medusa DS9 [27] and LOMAC [8] also attempt
to inﬂuence applications actively (as opposed to mere monitoring). However,
whereas these systems inﬂuence applications via a third party (typically by
rewriting operating system calls), our interface attempts to do so directly.
13 Conclusion
We have presented an external, nonspeciﬁc, voluntary reference monitor acces-
sible through a simple API. Requests are described to the reference monitor in
two ways: As a domain independent set of risk assessments and as a domain
speciﬁc description.
We believe that such a reference monitor can be used as an adjunct or al-
ternative to conventional intercepting intrusion detection systems. Conventional
intercepting IDSs are vulnerable to a number of desynchronization attacks and
only have limited response and prevention capabilities.
52
M. Welz and A. Hutchison
By encoding misuse signatures as negative access rights, our reference mon-
itor can be used to prevent attempted intrusions with a reasonable degree of
safety, and with a limited potential for desynchronization. The domain indepen-
dent risk ratings can be used to constrain the eﬀects of a response as well as a
guide to anomaly detection systems.
While our approach has the disadvantage of requiring the co-operation of
application programmers and is dependent on accurate application logging, the
failure modes of our approach are suﬃciently diﬀerent from those of conventional
intrusion detection systems to make it an interesting component of an in-depth
defence.
14 Source
The IDS/A homepage is http://jade.cs.uct.ac.za/idsa/ and parts of the
implementation are available for download.
References
[1] J. Abela, T. Debeaupuis, and E. Guttman. Universal format for logger messages.
http://www.hsc.fr/gulp/, 1997.
[2] S. Axelsson. The base-rate fallacy and its implications for the diﬃculty of in-
trusion detection. In Proceedings of the 6th ACM Conference on Computer and
Communications security, pages 1–7, November 1999.
[3] J. Balasubramaniyan, J. O. Garcia-Fernandez, E. H. Spaﬀord, and Zamboni D. An
architecture for intrusion detection using autonomous agents. Technical report,
COAST Laboratory, June 1998.
[4] M. Bishop. A standard audit trail format.
In National Information Systems
Security Conference, pages 136–145, October 1995.
[5] J. Case, M. Fedor, M. Schoﬀstall, and J. Davin. A simple network management
protocol. http://www.ietf.org/rfc/rfc1157.txt, 1990.
[6] C. Chung, M. Gertz, and K. Levitt. DEMIDS: A misuse detection system for
database systems. In Third Annual IFIP TC-11 WG 11.5 Working Conference
on Integrity and Control in Information Systems, 1999.
[7] M. Erlinger, S. Staniford-Chen, et al. IETF intrusion detection working group.
http://www.ietf.org/html.charters/idwg-charter.html, 1999.
[8] T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments.
In Proceedings of the IEEE Symposium on Security and Privacy, pages 230–245,
May 2000.
[9] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for
untrusted helper applications. In Proceedings of the 6th USENIX Security Sym-
posium, pages 1–13, July 1996.
[10] G. S. Goldszmidt. Distributed Management by Delegation. PhD thesis, Columbia
University, 1996.
[11] K. Ilgun. USTAT: A real-time intrusion detection system for unix. Master’s thesis,
University of California, July 1992.
[12] F. Kerschbaum, E. H. Spaﬀord, and D. Zamboni. Using embedded sensors for
detecting network attacks. In 1st ACM Workshop on Intrusion Detection Systems,
November 2000.
Interfacing Trusted Applications with Intrusion Detection Systems
53
[13] M. Kirkwood and I. Lynagh. Firewall kit.
http://ferret.lmh.ox.ac.uk/˜weejock/fk/, 2000.
[14] W. Lee, S. J. Stolfo, and K. Mok. Mining audit data to build intrusion detection
models. In International Conference on Knowledge Discovery and Data Mining,
September 1998.
[15] A. Mounji. Languages and Tools for Rule-Based Distributed Intrusion Detection.
PhD thesis, Universite de Namur, September 1997.
[16] K. E. Price. Host-based misuse detection and conventional operating systems’
audit data collection. Master’s thesis, Purdue University, December 1997.
[17] T. H. Ptacek and T. N. Newsham. Insertion, evasion and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks, 1998.
[18] Rain Forrest Puppy. Whisker. http://www.wiretrip.net/rfp/, 1999.
[19] M. K. Ranum and F. M. Avolio. A toolkit and methods for internet ﬁrewalls. In
Proceedings of the USENIX Conference, pages 37–44, 1994.
[20] J. Riordan and D. Alessandri. Target naming and service apoptosis. In Proceedings
of the 3rd Workshop on Recent Advances in Intrusion Detection, pages 217–225,
October 2000.
[21] V. Samar and R. Schemers. Uniﬁed login with pluggable authentication modules
(PAM), October 1995.
[22] D. Song. Fragrouter. http://www.anzen.com/research/nidsbench/, 1999.
[23] The Open Group. Distributed Audit Service (XDAS) Base. The Open Group,
1997.
[24] The Open Group. Systems Management: Event Management Service. The Open
Group, 1997.
[25] W. Venema. TCP wrapper, network monitoring, access control and booby traps.
In Proceedings of the 3rd USENIX Security Symposium, pages 85–92, September
1992.
[26] I. Welch and R. Stroud. Reﬂection as a mechanism for enforcing security policies
in mobile code. In Proceedings of the 6th European Symposium on Research in
Computer Security, October 2000.
[27] M. Zelem, M. Pikula, and M. Ockajak. Medusa DS9 security system.
http://medusa.fornax.sk/, 1999.