你使用什么名字，它都必须跟你用在方法参数列表和其他read-value调用中的名字相同。眼下你
该变量是来自read-value方法的方法参数而并非来源于槽描述符。它不一定非叫做in，但无论
并返回下面结果的函数：
的函数，也就是说，接受形式
符那样，现在你也需要一个接受define-binary-class槽描述符作为参数并生成适当sETF形式
(identifier (iso-8859-1-string:length 3))
278
①从技术上来讲，type或object不可能与槽名字冲突，最坏情况是它们会在WITH-SLOTS形式中被掩盖掉。不过，
不过，上面的代码和DEFCLASS的槽描述符有一点儿区别：它包含了对一个变量in的引用，
所有要做的就是将这个骨架添加到define-binary-class模板中，把其中的省略号部分替
(defmethodread-value((type(eql
有了这些函数，你就可以将read-value添加到define-binary-class中了。如果你取一
BINARY-DATA>(slot->read-value'(major-version ul) 'stream)
你可以使用各种类型的槽描述符来测试slot->read-value。
函数normalize-slot-spec用来正则化槽描述符的第二个元素，将类似u1这样的符号转化
（defunmklist（x）（if（listp x）x（listx）））
(defun slot->read-value (spec stream)
因此，就像你需要一个函数来将define-binary-class槽描述符转化成DEFcLAss槽描述
简单地用GENSYM来生成一个宏模板中用到的所有局部变量肯定是无害的。
SETFMAJOR-VERSION(READ-VALUE
(list（first spec）
(destructuring-bind(name(type &rest args)) (normalize-slot-spec spec)
(let
object)))
object))
(with-slots（...）object
(setf,name(read-value,type,stream,@args))))
第24章实践：解析二进制文件
(setf frames
(setf
(setf flags
((object
size
(mklist（second spec))))
www.TopSage.com
ance
(read-value*ulin))
..))stream&key)
STREAM)
---
## Page 296
为一个参数。
来输出槽数据的代码。和slot->read-value函数一样，这个助手函数需要接受流变量的名字作
广义函数。
24.8
文件编译器的特殊对待，第20章曾讨论过这点。
形式。PROGN习惯上用来让宏可以展开成多个定义，因为当它出现在一个文件的顶层时可以得到
其次，定义一个助手函数，将一个define-binary-class槽描述符转换成使用write-value
生成用来写一个二进制类实例的代码将会做类似的处理。首先，你可以定义一个write-value
现在你可以在define-binary-class宏里添加一个write-value模板。
(defgeneric write-value (type stream value &key)
所以，你可以将define-binary-class改成下面这样:
(defun slot->write-value (spec stream)
另外，由于一个宏必须展开成单一形式，你需要在DEFCLASS和DEFMETHOD的外面包装一些
(defmacro define-binary-class (name slots)
(defmacro define-binary-class (name slots)
(with-gensyms (typevar objectvar streamvar)
(with-gensyms (typevar objectvar streamvar)
写二进制对象
(progn
(progn
(write-value ',type ,stream ,name ,@args)))
(axy 1eaoa(ao' 1eauearas' ((aweu', Iba) xeada')) ane-aittm pouawgap)
(defmethod read-value ((,typevar (eql :,name)) ,streamvar &key)
(defmethod read-value ((,typevar (eql ',name)) ,streamvar &key)
(defclass ,name ()
,(mapcar #'slot->defclass-slot slots))
;(mapcar #'slot->defclass-slot slots))
(let ((,objectvar (make-instance
(let ((,objectvar (make-instance
,@(mapcar #'(lambda (x) (slot->write-value x streamvar)) slots))))))
,objectvar))
,objectvar))))}
,@(mapcar
,@(mapcar
#'(lambda (x) (slot->read-value x streamvar)) slots))
#'first slots)
www.TopSage.com
,name)))
1,name}))
,objectvar
,objectvar
24.8写二进制对象
279
---
## Page 297
的槽。
在的对象和一个流。定义在这些广义函数上的方法将用来读写特定于它们所特化的对象所属的类
技术。
对象，而另一部分则用来填充一个已存在对象的槽。写的方面其实更简单，但你可以使用同样的
个不同的对象。
你不可能让方法通过读取基类的字段来实例化一个对象，同时让子类的方法去实例化并填充另一
可以被那些由子类生成的方法用来读写继承的槽。
列表。
道如何读取足够数据来决定创建何种类型的类的read-value方法所特化。
tagged-binary-class用来定义那些“抽象”类。后者并不直接被实例化，而是可以被那些知
么这会打断read-value的运行，因为它需要读取构成它所实例化的类实例的全部数据。
知道这是哪个类型的帧。而如果其他代码读取了标识符以检测用来传给read-value的类型，那
binary-class来定义一个代表每种帧类型的类，但如果你没有至少读取标识符部分的话就无法
它的值来检测你正在查看的是哪一种帧类型，以及如何解析该顿的主体。
了一个由字符串标识和长度所构成的统一的头结构。为了读取一个帧，你需要先读取标识符再用
取了一些用来指示如何解析后续字节的数据以后才能决定。例如，ID3标签中的大量帧全都共享
class来支持继承。
了一些可以自然地采用子类和基类来建模的磁盘结构。因此你可能想要扩展define-binary-
24.9
为define-binary-class添加继承的第一步是为该宏添加一个参数来接受一个基类的
因此，你可以定义两个新的广义函数read-object和write-object，它们都接受一个已存
280
你可以通过将read-value划分成两部分来解决这个问题：一部分用来实例化正确类型的
当前的read-value工作方式尤其有问题，因为它在填人内容之前就要实例化对象。很明显
 你可以为define-binary-class添加继承来解决这个问题，并编写另一个宏define-
 当前的define-binary-class宏没有办法处理这种类型的读取操作，你可以使用define-
一个相关的用在许多二进制格式中的技术是存在于一些磁盘上的结构，其确切类型只有在读
不过，你还需要改变read-value和write-value方法，这样在定义基类时所生成的方法才
(defgeneric read-object (object stream)
(defclass ,name ,superclasses 
然后，在DEFCLASS模板中插入该值以取代原先的空列表。
(defmacro define-binary-class (name (&rest superclasses) slots) ...
( :documentation
·..)
添加继承和标记的结构
第 24章
实践：解析二进制文件
"Fill in the slots of object from stream."))
www.TopSage.com
-specific-last)
---
## Page 298
单个类：
规范中所继承的槽的情形。例如，在当前的define-binary-class定义下，你可以像这样定义
24.10
而不是read-value和write-value上的方法了。
type参数。
也可以使用任何求值成一个类名的表达式来调用这个函数。本例则使用了read-value方法中的
道想要实例化的类，你会使用一个引I用了的符号作为第一个参数来调用MAKE-INSTANCE，但你
制类的名字。
了的read-value和write-value方法。你可以定义默认方法，其中假设类型参数就是一个二进
定类的重量级操作现在都由read-object和write-object来完成了，你甚至不需要再定义特化
在该类中的槽，然后特化在下一个最不相关子类上的方法再运行，依此类推。而由于所有对于特
PROGN方法组合将合并所有可应用的方法并让继承体系中最不相关的类首先运行，接着读写定义
而你可以定义特化在object的每个二进制类上的方法，并让它们只处理实际定义在该类中的槽。
目前的定义适用于很多情形。不过，它无法处理一种相当普遍的情形，即子类需要引用其槽
(defmacro define-binary-class (name superclasses slots)
注意你是怎样将MAKE-INSTANCE用作一个通用的对象工厂的。尽管通常情况下由于确切知
(defmethod read-value ((type symbol) stream &key)
把这些广义函数定义成使用带有:most-specific-last选项的pROGN方法组合的形式，继
(defmethod write-value ((type symbol) stream value &key)
(defgeneric write-object (object stream)
(with-gensyms (objectvar streamvar)
(write-object value stream))
(let ((object
( :documentation 
object))
跟踪继承的槽
(progn
(read-object object stream)
(defmethod write-object progn ((,objectvar ,name) ,streamvar)
(defmethod read-object progn ((,objectvar ,name)
(defclass ,name 
(with-slots
(with-slots ,(mapcar 
,(mapcar #'slot->defclass-slot slots))
(typep value type))
,@(mapcar #:(lambda (x) (slot->write-value x streamvar)) slots))))))
,@(mapcar #:(lambda (x) (slot->read-value x streamvar)) slots)))
(make-inst
"Write out the slots of object to the stream.")).
(mapcar #'first slots)
,superclasses
#'first slots)
:most
www.TopSage.com
-specific-last)
,objectvar
,objectvar
24.10跟踪继承的槽
,streamvar)
281
---
## Page 299
binary-class生成的展开式中，从而保住一个二进制类和它的直接基类的槽信息：
对于这样的需求，你应当把它包装在一个类似下面这样的EVAL-WHEN中：
如果你编译了一个带有几个define-binary-class形式的文件，在编译过程中关于这些类都定
值了。另一方面，如果你将该表达式包含到展开式中，那么它将不会在编译期被求值，这意味着
define-binary-class形式时被求值，但当你以后加载了含有编译后代码的文件时就不会再求
放置这个表达式仍然不甚明了。如果你在计算宏的展开式时对其求值，那么它将在你编译
的表达式将一个slots键添加到符号foo的属性表中，值为(x Yz)：
举个例子，如果二进制类foo定义了三个槽x、y和z，那么在跟踪这一事实时，你可以采用下面
把任意的键值对用GET的SETF添加到一个符号的属性表中，从而将这些信息与该符号关联起来。
对象都有一个与之关联的属性列表，属性列表可通过函数SYMBOL-PLIST和GET来访问。你可以
和write-object方法的wITH-SLoTs形式中。
态出现的变量size。
期错误，因为在特化于generic-frame的read-object和write-object方法中没有以词法形
在两个槽里：
的全部槽的WITH-SLOTs的封装下读写data槽的。不过，如果你试图将上面的类像这样分开定义
你希望在编译一个宏形式的过程中窃取一些信息，并且希望在编译后的形式被加载时仍然有效。
这就是我在第20章里讨论的用特殊操作符EVAL-WHEN处理的问题。通过将一个形式封装在
跟踪这类信息最简单的方法是从命名类的符号下手。如同我在第13章里讨论过的，每个符号
你需要做的是跟踪由每个二进制类定义的槽，并将通过继承得到的槽包含在read-object
282
然后把eVAL-WHEN包含在宏所生成的展开式中。这样，你可以将下列形式添加到由define-
你希望这份备忘能够作为求值foo的define-binary-class的一部分。不过，对于在何处
((z K x)：(s0[8， 00： a5) a9)
(define-binary-class frame ()
在data规范中，对size的引用可以按照你预想的方式来进行，因为这些表达式是在该对象
(eval-when (:compile-toplevel :load-toplevel :execute)
(define-binary-class generic-frame (frame)
(define-binary-class generic-frame ()
(setf (get'foo slots)'(xy z)))
((data (raw-bytes :bytes size))))
（（id
(data (raw-bytes :bytes size))))
(id(iso
（sizeu3)))
(size u3)
第24章实践：解析二进制文件
(iso