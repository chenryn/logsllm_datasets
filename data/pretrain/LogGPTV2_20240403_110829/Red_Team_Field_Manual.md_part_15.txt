filemtime (file) i Case-insensitive 2008-07-31T18:30:13+01:00
filesize (file) s Period matches newline r RFC 2822
file_exists (file) m ^ and $ match lines Thu, 31 Jul 2008 18:30:13 +0100
fopen (file, mode) U Ungreedy matching
fread (handle, len) e Evaluate replacement 1. 0 is Sunday, 6 is Saturday.
fwrite (handle, str) x Pattern over several lines
readfile (file) 2. Week that overlaps two years belongs
to year that contains most days of that
Date and Time Functions
week. Hence week number for 1st
fopen() Modes
checkdate (month, day, year) January of a given year can be 53 if
r Read date (format, timestamp) week belongs to previous year.
r+ Read and write, prepend getdate (timestamp) date("W", mktime(0, 0, 0, 12, 8,
w Write, truncate mktime (hr, min, sec, month, day, yr) $year)) always gives correct number of
w+ Read and write, truncate strftime (formatstring, timestamp) weeks in $year.
a Write, append strtotime (str)
a+ Read and write, append time () 3. The Epoch is the 1st January 1970.
4. With leading zeroes
Available free from AddedBytes.com
ccssss
Selectors Box Model Boxes
* All elements margin x border-color x
Visible Area Margin
div  margin-top border-top-color
div * All elements within  margin-right border-right-color
div span  within  margin-bottom border-bottom-color
div, span  and  margin-left border-left-color
div > span  with parent  padding x border-style x
div + span  preceded by  padding-top border-top-style
.class Elements of class "class" padding-right border-right-style
div.class  of class "class" padding-bottom border-bottom-style
#itemid Element with id "itemid" padding-left border-left-style
div#itemid  with id "itemid" border x border-width x
a[attr]  with attribute "attr" border-top x border-top-width
a[attr='x']  when "attr" is "x" Height Border Width Padding border-bottom x border-right-width
a[class~='x']  when class is a list border-right x border-bottom-width
containing 'x' border-left x border-left-width
Positioning
a[lang|='en']  when lang begins "en"
display clear
Tables
position z-index
Pseudo-Selectors and Pseudo-Classes
top direction + caption-side + border-spacing +
:first-child First child element right unicode-bidi table-layout empty-cells +
:first-line First line of element bottom overflow border-collapse + speak-header +
:first-letter First letter of element left clip
:hover Element with mouse over float visibility
Paging
:active Active element
:focus Element with focus size page-break-inside +
Dimensions
:link Unvisited links marks page +
:visited Visited links width min-height page-break-before orphans +
:lang(var) Element with language "var" min-width max-height page-break-after widows +
:before Before element max-width vertical-align
:after After element height
Interface
cursor + outline-style
Sizes and Colours Color / Background
outline x outline-color
0 0 requires no unit color + background-repeat outline-width
Relative Sizes background x background-image
em 1em equal to font size of background-color background-position
Aural
parent (same as 100%) background-attachment
ex Height of lower case "x" volume + elevation
% Percentage speak + speech-rate
Text
Absolute Sizes pause x voice-family
px Pixels text-indent + word-spacing + pause-before pitch
Text
cm Centimeters text-align + text-transform + pause-after pitch-range
mm Millimeters text-decoration white-space + cue x stress
in Inches text-shadow line-height + cue-before richness
pt 1pt = 1/72in letter-spacing + cue-after speak-punctuation
pc 1pc = 12pt play-during speak-numeral
Colours azimuth +
Fonts
#789abc RGB Hex Notation
#acf Equates to "#aaccff" font + x font-weight +
Miscellaneous
rgb(0,25,50) Value of each of red, green, font-family + font-stretch +
and blue. 0 to 255, may be font-style + font-size + content list-style-type +
swapped for percentages. font-variant + font-size-adjust + quotes + list-style-image +
counter-reset list-style-position +
Shorthand properties are marked x Available free from counter-increment marker-offset
Note
Properties that inherit are marked + www.AddedBytes.com list-style + x
sys Variables String Methods Datetime Methods
argv Command line args capitalize() * lstrip() today() fromordinal(ordinal)
builtin_module_names Linked C modules center(width) partition(sep) now(timezoneinfo) combine(date, time)
byteorder Native byte order count(sub, start, end) replace(old, new) utcnow() strptime(date, format)
check_interval Signal check frequency decode() rfind(sub, start ,end) fromtimestamp(timestamp)
exec_prefix Root directory encode() rindex(sub, start, end) utcfromtimestamp(timestamp)
executable Name of executable endswith(sub) rjust(width)
exitfunc Exit function name expandtabs() rpartition(sep)
Time Methods
modules Loaded modules find(sub, start, end) rsplit(sep)
path Search path index(sub, start, end) rstrip() replace() utcoffset()
platform Current platform isalnum() * split(sep) isoformat() dst()
stdin, stdout, stderr File objects for I/O isalpha() * splitlines() __str__() tzname()
version_info Python version info isdigit() * startswith(sub) strftime(format)
winver Version number islower() * strip()
isspace() * swapcase() *
Date Formatting (strftime and strptime)
istitle() * title() *
sys.argv for $ python foo.py bar -c qux --h
isupper() * translate(table) %a Abbreviated weekday (Sun)
sys.argv[0] foo.py join() upper() * %A Weekday (Sunday)
sys.argv[1] bar ljust(width) zfill(width) %b Abbreviated month name (Jan)
sys.argv[2] -c lower() * %B Month name (January)
sys.argv[3] qux %c Date and time
sys.argv[4] --h Methods marked * are locale %d Day (leading zeros) (01 to 31)
Note
dependant for 8-bit strings. %H 24 hour (leading zeros) (00 to 23)
%I 12 hour (leading zeros) (01 to 12)
os Variables
%j Day of year (001 to 366)
List Methods
altsep Alternative sep %m Month (01 to 12)
curdir Current dir string append(item) pop(position) %M Minute (00 to 59)
defpath Default search path count(item) remove(item) %p AM or PM
devnull Path of null device extend(list) reverse() %S Second (00 to 61 4)
extsep Extension separator index(item) sort() %U Week number 1 (00 to 53)
linesep Line separator insert(position, item) %w Weekday 2 (0 to 6)
name Name of OS %W Week number 3 (00 to 53)
pardir Parent dir string %x Date
File Methods
pathsep Patch separator %X Time
sep Path separator close() readlines(size) %y Year without century (00 to 99)
flush() seek(offset) %Y Year (2008)
Registered OS names: “posix”, “nt”, fileno() tell() %Z Time zone (GMT)
Note
“mac”, “os2”, “ce”, “java”, “riscos” isatty() truncate(size) %% A literal "%" character (%)
next() write(string)
read(size) writelines(list) 1. Sunday as start of week. All days in a
Class Special Methods
readline(size) new year preceding the first Sunday
__new__(cls) __lt__(self, other) are considered to be in week 0.
__init__(self, args) __le__(self, other)
Indexes and Slices (of a=[0,1,2,3,4,5])
__del__(self) __gt__(self, other) 2. 0 is Sunday, 6 is Saturday.
__repr__(self) __ge__(self, other) len(a) 6
__str__(self) __eq__(self, other) a[0] 0 3. Monday as start of week. All days in a
__cmp__(self, other) __ne__(self, other) a[5] 5 new year preceding the first Monday
__index__(self) __nonzero__(self) a[-1] 5 are considered to be in week 0.
__hash__(self) a[-2] 4
__getattr__(self, name) a[1:] [1,2,3,4,5] 4. This is not a mistake. Range takes
__getattribute__(self, name) a[:5] [0,1,2,3,4] account of leap and double-leap
__setattr__(self, name, attr) a[:-2] [0,1,2,3] seconds.
__delattr__(self, name) a[1:3] [1,2]
__call__(self, args, kwargs) a[1:-1] [1,2,3,4]
Available free from AddedBytes.com
b=a[:] Shallow copy of a
Anchors Sample Patterns
^ Start of line + ([A-Za-z0-9-]+) Letters, numbers and hyphens
\A Start of string + (\d{1,2}\/\d{1,2}\/\d{4}) Date (e.g. 21/3/2006)
$ End of line + ([^\s]+(?=\.(jpg|gif|png))\.\2) jpg, gif or png image
\Z End of string + (^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$) Any number from 1 to 50 inclusive
\b Word boundary + (#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?) Valid hexadecimal colour code
\B Not word boundary + ((?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}) 8 to 15 character string with at least one
\ End of word and one digit (useful for passwords).
(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6}) Email addresses
(\]+)\>) HTML Tags
Character Classes
\c Control character These patterns are intended for reference purposes and have not been extensively tested.
Note
\s White space Please use with caution and test thoroughly before use.
\S Not white space
\d Digit
Quantifiers Ranges
\D Not digit
\w Word * 0 or more + . Any character except
\W Not word *? 0 or more, ungreedy + new line (\n) +
\xhh Hexadecimal character hh + 1 or more + (a|b) a or b +
\Oxxx Octal character xxx +? 1 or more, ungreedy + (...) Group +
? 0 or 1 + (?:...) Passive Group +
?? 0 or 1, ungreedy + [abc] Range (a or b or c) +
POSIX Character Classes
{3} Exactly 3 + [^abc] Not a or b or c +
[:upper:] Upper case letters {3,} 3 or more + [a-q] Letter between a and q +
[:lower:] Lower case letters {3,5} 3, 4 or 5 + [A-Q] Upper case letter +
[:alpha:] All letters {3,5}? 3, 4 or 5, ungreedy + between A and Q +
[:alnum:] Digits and letters [0-7] Digit between 0 and 7 +
[:digit:] Digits \n nth group/subpattern +
Special Characters
[:xdigit:] Hexadecimal digits
[:punct:] Punctuation \ Escape Character +
Note Ranges are inclusive.
[:blank:] Space and tab \n New line +
[:space:] Blank characters \r Carriage return +
[:cntrl:] Control characters \t Tab +
Pattern Modifiers
[:graph:] Printed characters \v Vertical tab +
[:print:] Printed characters and \f Form feed + g Global match
spaces \a Alarm i Case-insensitive
[:word:] Digits, letters and [\b] Backspace m Multiple lines
underscore \e Escape s Treat string as single line
\N{name} Named Character x Allow comments and
white space in pattern
Assertions
e Evaluate replacement
String Replacement (Backreferences)
?= Lookahead assertion + U Ungreedy pattern
?! Negative lookahead + $n nth non-passive group
? Once-only Subexpression $` Before matched string ^ [ .
?() Condition [if then] $' After matched string $ { *
?()| Condition [if then else] $+ Last matched string ( \ +
?# Comment $& Entire matched string ) | ?
$_ Entire input string 
Items marked + should work in most $$ Literal "$"
Note
regular expression implementations. Available free from
AddedBytes.com
String Functions Date Functions Create a Stored Procedure
Exact Numerics DATEADD (datepart, number, date) CREATE PROCEDURE name
bit decimal DATEDIFF (datepart, start, end) @variable AS datatype = value
tinyint money DATENAME (datepart, date) AS
smallint numeric DATEPART (datepart, date) -- Comments
bigint DAY (date) SELECT * FROM table
Approximate Numerics GETDATE() GO
float real GETUTCDATE()
Date and Time MONTH (date) Create a Trigger
smalldatetime timestamp YEAR (date)
datetime CREATE TRIGGER name
Strings Dateparts ON
char text table
varchar Year yy, yyyy FOR
Unicode Strings Quarter qq, q DELETE, INSERT, UPDATE
nchar ntext Month mm, m AS
nvarchar Day of Year dy, y -- Comments
Binary Strings Day dd, d SELECT * FROM table
binary image Week wk, ww GO
varbinary Hour hh
Miscellaneous Minute mi, n Create a View
cursor table Second ss, s
sql_variant xml Millisecond ms CREATE VIEW name
AS
-- Comments
Type Conversion Mathematical Functions
SELECT * FROM table
GO
CAST (expression AS datatype) ABS LOG10
CONVERT (datatype, expression) ACOS PI
ASIN POWER Create an Index
Ranking Functions ATAN RADIANS
CREATE UNIQUE INDEX name
ATN2 RAND
ON
RANK NTILE CEILING ROUND
table (columns)
DENSE_RANK ROW_NUMBER COS SIGN
COT SIN
Create a Function
DEGREES SQUARE
Grouping (Aggregate) Functions
EXP SQRT
CREATE FUNCTION name
AVG MAX FLOOR TAN
(@variable datatype(length))
BINARY_CHECKSUM MIN LOG
RETURNS
CHECKSUM SUM
datatype(length)
CHECKSUM_AVG STDEV String Functions AS
COUNT STDEVP
BEGIN
COUNT_BIG VAR ASCII REPLICATE
DECLARE @return datatype(length)
GROUPING VARP CHAR REVERSE
SELECT @return = CASE @variable
CHARINDEX RIGHT
WHEN 'a' THEN 'return a'
Table Functions DIFFERENCE RTRIM
WHEN 'b' THEN 'return b'
LEFT SOUNDEX
ELSE 'return c'
ALTER DROP LEN SPACE
RETURN @return
CREATE TRUNCATE LOWER STR
END
LTRIM STUFF
NCHAR SUBSTRING
Available free from PATINDEX UNICODE
AddedBytes.com REPLACE UPPER
QUOTENAME