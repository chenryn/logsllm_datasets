source code associated with a build, and archive both this file and the WAR file. We could do this by
generating a JAR file containing the application source code (for example, by using the Maven Source
Plugin for a Maven project), and then including this in the list of artifacts to store (see Figure 5.35,
“Archiving source code and a binary package”).
116
Figure 5.35. Archiving source code and a binary package
Of course, this example is a tad academic: it would probably be simpler just to use the revision number
for this build (which is displayed on the build result page) to retrieve the source code from your version
control system. But you get the idea.
Note that if you are using an Enterprise Repository Manager such as Nexus or Artifactory to store
your binary artifacts, you may not need to keep them on the Jenkins server. You may prefer simply to
automatically deploy your artifacts to your Enterprise Repository Manager as part of the build job, and
retrieve them from here when required.
5.7.3. Notifications
The point of a CI server is to let people know when a build breaks. In Jenkins, this comes under the
heading of Notification.
Out of the box, Jenkins provides support for email notification. You can activate this by ticking the
“E-mail Notification” checkbox in the Post-build Actions (see Figure 5.36, “Email notification”). Then
enter the email addresses of the team members who will need to know when the build breaks. When
the build does break, Jenkins will send a friendly email message to the users in this list containing a
link to the broken build.
117
Figure 5.36. Email notification
You can also opt to send a separate email to the user who’s commit (presumably) broke the build. For this
to work, you need to have activated Security on your Jenkins server (see Chapter 7, Securing Jenkins).
Normally, Jenkins will send an email notification out whenever a build fails (for example, because of
a compilation error). It will also send out a notification when the build becomes unstable for the first
time (for example, if there are unit test failures). Unless you configure it to do so, Jenkins will not send
emails for every unstable build, but only for the first one.
Finally, Jenkins will send a message when a previously failing or unstable build succeeds, to let everyone
know that the problem has been resolved.
5.7.4. Building Other Projects
You can also start other build jobs in the Post-build Actions, using the “Build other projects” option.
This is useful if you want to organize your build process in several, smaller steps, rather than one long
build job. Just list the projects you want to start after this one. Normally, these projects will only be
triggered if the build was stable, but you can optionally trigger another build job even if the current build
is unstable. This might be useful, for example, if you wanted to run a code quality metrics reporting
build job after a project’s main build job, even if there are test failures in the main build.
5.8. Running Your New Build Job
Now all you need to do is save your new build job. You can then trigger the first build manually, or
just wait for it to kick off by itself. Once the build is finished, you can click on the build number to
see the results of your work.
5.9. Working with Maven Build Jobs
In this section, we will have a look at the other most commonly used build job: Maven 2/3 build jobs.
Maven build jobs are specifically adapted to Maven 2 and Maven 3 builds. Creating a Maven build
job requires considerably less work than configuring the equivalent freestyle build job. Maven build
jobs support advanced Maven-related features such as incremental builds on multimodule projects and
triggering builds from changes in snapshot dependencies, and make configuration and reporting much
simpler.
118
However, there is a catch: Maven 2/3 build jobs are less flexible than freestyle build jobs, and don’t
support multiple build steps within the same build job. Some users also report that large Maven projects
tend to run more slowly and use more memory when configured as Maven build jobs rather than as
Freestyle ones.
In this section, we will investigate how to configure Maven 2/3 builds, when you can use them, as well
as their advantages and limitations.
To create a new Maven build job, just choose the “”Build a maven2/3 project” option in the New Job
page (see Figure 5.37, “Creating a new Maven build job”).
Figure 5.37. Creating a new Maven build job
5.9.1. Building Whenever a SNAPSHOT Dependency Is Built
At first glance, the Maven 2/3 build job configuration screen is very similar to the one we saw for
freestyle builds in the previous section. The first difference you may notice is in the Build Triggers
section. In this section, an extra option is available: “Build whenever a SNAPSHOT dependency
is built”. If you select this option, Jenkins will examine your pom.xml file (or files) to see if any
SNAPSHOT dependencies are being built by other build jobs. If any other build jobs update a
SNAPSHOT dependency that your project uses, Jenkins will build your project as well.
Typically in Maven, SNAPSHOT dependencies are used to share the latest bleeding-edge version of
a library with other projects within the same team. Since they are by definition unstable, it is not
recommended practice to rely on SNAPSHOT dependencies from other teams or from external sources.
For example, imagine that you are working on a new game-of-life web application. You are using Maven
for this project, so you can use a Maven build job in Jenkins. Your team is also working on a reusable
library called cooltools. Since these two projects are being developed by the same team, you are using
some of the latest cooltools features in the game-of-life web application. So you have a SNAPSHOT
dependency in the  section of your game-of-life pom.xml file:
119
com.acme.common
cooltools
0.0.1-SNAPSHOT
test
...
On your Jenkins server, you have set up Maven build jobs for both the cooltools and the game-of-life
applications. Since your game-of-life project needs the latest cooltools SNAPSHOT version, you tick
the “Build whenever a SNAPSHOT dependency is built” option. This way, whenever the cooltools
project is rebuilt, the game-of-life project will automatically be rebuilt as well.
5.9.2. Configuring the Maven Build
The next area where you will notice a change is in the Build section. In a Maven build job, the build
section is entirely devoted to running a single Maven goal (see Figure 5.38, “Specifying the Maven
goals”). In this section, you specify the version of Maven you want to execute (remember, at the time
of Maven, this will only work with Maven), the location of the pom.xml file, and the Maven goal (or
goals) to invoke. You can also add any command-line options you need here.
Figure 5.38. Specifying the Maven goals
In many cases, this is all you need to get your Maven build job configured. However, if you click on the
“Advanced...” button, you can take your pick of some more advanced features (Figure 5.39, “Maven
build jobs—advanced options”).
Figure 5.39. Maven build jobs—advanced options
120
The Incremental Build option comes in very handy for large, multimodule Maven builds. If you tick this
option, when a change is made to one of the project modules, Jenkins will only rebuild that module and
any modules that use the changed module. It performs this magic by using some new Maven features
introduced in Maven 2.1 (so it won’t work if you are using Maven 2.0.x). Jenkins detects which modules
have been changed, and then uses the -pl (--project-list) option to build only the updated modules,
and the -amd (--also-make-dependents) option to build the modules that use the updated modules.
If nothing has been changed in the source code, all of the modules are built.
By default, Jenkins will archive all of the artifacts generated by a Maven build job. This can come in
handy at times, but it can also be very expensive in disk storage. If you want to turn off this option, just
tick the “Disable automatic artifact archiving” option. Alternatively, you can always limit the artifacts
stored by using the “Discard Old Builds” option at the top of the configuration page.
The “Build modules in parallel” option tells Jenkins to run each individual module in parallel as a
separate build. In theory, this could speed up your builds quite a bit. In practice, it will only really work
if your modules are totally independent (that is, you aren’t using aggregation), which is rarely the case.
If you think building your modules in parallel could really speed up your multimodule project, you may
want to try a freestyle build with Maven 3 and its new parallel build feature.
Another useful option is “Use [a] private Maven repository”. Normally, when Jenkins runs Maven, it
will behave in exactly the same way as Maven on the command line: it will store artifacts in, and retrieve
artifacts from the local Maven repository (found in ~/.m2/repository if you haven’t reconfigured it
in the settings.xml file). This is efficient in terms of disk space, but not always ideal for CI builds.
Indeed, if several build jobs are working on and with the same snapshot artifacts, the builds may end
up interfering with each other.
When this option is checked, Jenkins will tell Maven to use $WORKSPACE/.repository as the local
Maven repository. This means each job will get its own isolated Maven repository just for itself. It fixes
the above problems, at the expense of additional disk space consumption.
With this option, Maven will use a dedicated Maven repository for this build job, located in the
$WORKSPACE/.repository directory. This takes more disk space, but guarantees a better isolation
between build jobs.
Another way of addressing this problem is to override the default repository location by using the
maven.repo.local property, as shown here:
$ mvn install -Dmaven.repo.local=~/.m2/staging-repository
This approach has the advantage of being able to share a repository across several build jobs, which is
useful if you need to do a series of related builds. It will also work with freestyle jobs.
5.9.3. Post-Build Actions
The Post-Build actions in a Maven build job are considerably simpler to configure than in a freestyle
job. This is simply because, since this is a Maven build, Jenkins knows where to look for a lot of the
121
build output. Artifacts, test reports, Javadoc, and so forth, are all generated in standard directories, which
means you don’t have to tell Jenkins where to find things. So Jenkins will find, and report on, JUnit
test results automatically, for example. Later on in the book, we will see how the Maven projects also
simplify the configuration of many code quality metrics tools and reports.
Most of the other Post-build Actions are similar to those we saw in the freestyle build job.
5.9.4. Deploying to an Enterprise Repository Manager
One extra option does appear in the Maven build jobs is the ability to deploy your artifacts to a Maven
repository (see Figure 5.40, “Deploying artifacts to a Maven repository”). An Enterprise Repository
Manager is a server that acts as both a proxy/cache for public Maven artifacts, and as a central storage
server for your own internal artifacts. Open Source Enterprise Repository Managers like Nexus (from
Sonatype) and Artifactory (from JFrog) provide powerful maintenance and administration features
that make configuring and maintaining your Maven repositories a lot simpler. Both these products
have commercial versions, with additional features aimed at more sophisticated or high-end build
infrastructures.
The advantage of getting Jenkins to deploy your artifacts (as opposed to simply running mvn deploy) is
that, if you have a multimodule Maven build, the artifacts will only be deployed once the entire build has
finished successfully. For example, suppose you have a multimodule Maven project with five modules.
If you run mvn deploy, and the build fails after three modules, the first two modules will have been
deployed to your repository, but not the last three, which leaves your repository in an instable state.
Getting Jenkins to do the deploy ensures that the artifacts are only deployed as a group once the build
has successfully finished.
Figure 5.40. Deploying artifacts to a Maven repository
To do this, just tick the “Deploy artifacts to Maven repository” option in the “Post-Build actions”. You
will need to specify the URL of the repository you want to deploy to. This needs to be the full URL
to the repository (e.g., http://nexus.acme.com/nexus/content/repositories/snapshots, and not just http://
nexus.acme.com/nexus)
Most repositories need you to authenticate before letting you deploy artifacts to them. The standard
Maven way to do this is to place a  entry in your local settings.xml file, as shown here:
122
nexus-snapshots
scott
tiger
nexus-releases
scott
tiger
For the more security-minded, you can also encrypt these passwords if required.
Then, enter the corresponding ID value in the Repository ID field in Jenkins. Jenkins will then be able
to look up the right username and password, and deploy your artifacts. Once the build is finished, your
artifacts should be available in your Maven Enterprise Repository (see Figure 5.41, “After deployment
the artifact should be available on your Enterprise Repository Manager”).
Figure 5.41. After deployment the artifact should be available on your Enterprise Repository Manager
Using this option, you always don’t have to deploy straight away—you can always come back and
deploy the artifacts from a previous build later. Just click on the “Redeploy Artifacts” menu on the left
and specify the repository URL you want to deploy your artifact to (see Figure 5.42, “Redeploying an
artifact”). As in the previous example, the Advanced button lets you provide the ID for the 
entry in your local settings.xml file. As we will see later on in the book, you can also use this
123
deployment as part of a build promotion process, configuring an automatic deployment to a different
repository when certain quality metrics have been satisfied, for example.
Figure 5.42. Redeploying an artifact
This approach will work fine for any Enterprise Repository manager. However, if you are using
Artifactory, you may prefer to install the Jenkins Artifactory Plugin11, which provides tighter two-
way integration with the Artifactory Enterprise Repository Manager. It works by sending additional
information to the Artifactory server during the deployment, allowing the server to refer back to the
precise build that generated a given artifact. Once you have installed the plugin, you can activate it in
your Maven build job by ticking the “Deploy artifacts to Artifactory” option in the Post-build Actions.
Then you choose what repositories your project should deploy to from a list of repositories on the server,
along with the username and password required to perform the deployment (see Figure 5.43, “Deploying
to Artifactory from Jenkins”).
Figure 5.43. Deploying to Artifactory from Jenkins
Your build job will now automatically deploy to Artifactory. In addition, a link to the artifact on the
server will now be displayed on the build job home and build results pages (see Figure 5.44, “Jenkins
displays a link to the corresponding Artifactory repository”).
11 http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin
124
Figure 5.44. Jenkins displays a link to the corresponding Artifactory repository
This link takes you to a page on the Artifactory server containing the deployed artifact (see Figure 5.45,
“Viewing the deployed artifact in Artifactory”). From this page, there is also a link that takes you back
to the build that built the artifact.
Figure 5.45. Viewing the deployed artifact in Artifactory
5.9.5. Deploying to Commercial Enterprise Repository Managers
An Enterprise Repository Manager is an essential part of any Maven-based software development
infrastructure. They also play a key role for non-Maven projects using tools like Ivy and Gradle, both
of which rely on standard Maven repositories.
Both of the principal Enterprise Repository Managers, Nexus and Artifactory, offer professional
versions which come with extra integration features with Jenkins. Later on in the book, we will discuss
how you can use advanced features such as Nexus Pro’s staging and release management to implement
sophisticated build promotion strategies. On the deployment side of things, the commercial edition of
Artifactory (Artifactory Pro Power Pack) extends the two-way integration we saw earlier. When you
view an artifact in the repository browser, a “Builds” tab displays details about the Jenkins build that
created the artifact, and a link to the Jenkins build page (see Figure 5.46, “Viewing the deployed artifact
125
and the corresponding Jenkins build in Artifactory”). Artifactory also keeps track of the dependencies
that were used in the Jenkins build, and will warn you if you try to delete them from the repository.
Figure 5.46. Viewing the deployed artifact and the corresponding Jenkins build in Artifactory
5.9.6. Managing Modules
When using Maven, it is common to split a project into several modules. Maven build jobs have an
intrinsic understand of multimodule projects, and adds a Modules menu item that lets you display the
structure of the project at a glance (see Figure 5.47, “Managing modules in a Maven build job”).
Figure 5.47. Managing modules in a Maven build job
Clicking on any of the modules will take you to the build page for that module. From here, you can view
the detailed build results for each module, trigger a build of that module in isolation, and if necessary
fine tune the configuration of individual module, overriding the configuration of the overall project.
126
5.9.7. Extra Build Steps in Your Maven Build Jobs
By default, the Maven build job only allows for a single Maven goal. There are times when this is a
little limiting, and you would like to add some extra steps before or after the main build. You can do this
with the Jenkins M2 Extra Steps Plugin. This plugin lets you add normal build steps before and after
the main Maven goal, giving you the flexibility of a freestyle build while still having the convenience
of the Maven build job configuration.
Install this plugin and go to the Build Environment section of your build job. Tick the “Configure Extra
M2 Build Steps” option. You should now be able to add build steps that will be executed before and/or
after your main Maven goal is executed (see Figure 5.48, “Configuring extra Maven build steps”).
Figure 5.48. Configuring extra Maven build steps
5.10. Using Jenkins with Other Languages
As we mentioned earlier, Jenkins provides excellent support for other languages. In this section, we will
look at how to use Jenkins with a few of the more common ones.
5.10.1. Building Projects with Grails
Grails is an open source dynamic web application framework built on Groovy and many well-established
open source Java frameworks such as Spring and Hibernate.
127
Jenkins provides excellent support for Grails builds. First, you need to install the Jenkins Grails plugin12.
Once you have installed this and restarted Jenkins, you will need to provide at least one version of Grails
for Jenkins to use in the Grails Builder section of the Configure System screen (see Figure 5.49, “Adding
a Grails installation to Jenkins”).
Figure 5.49. Adding a Grails installation to Jenkins
Now you can set up a freestyle build job to build your Grails project. The Grails plugin adds the
“Build with Grails” build step, which you can use to build your Grails application (see Figure 5.50,