The client code APIs support the interactions during prepa-
ration and notiﬁcation stages. The chain code APIs support
the interactions during execution and two-step validation.
Table I shows the speciﬁcations of these APIs.
Client Code APIs support read from and write to an orga-
nization’s private ledger. Via these APIs, an application can
548
(cid:2)N
construct and maintain the private ledger, as well as submit
transactions to the blockchain network via the Fabric SDK.
The PvlGet API is used to retrieve rows by transaction
identiﬁer. When a new transaction arrives or a submitted
transaction is validated, the PvlPut API is called to update
the private ledger. Client code uses the Validate API to
invoke the validation chaincode to verify a new transaction.
As discussed in Section III-A, in order to generate a valid
and publicly veriﬁable Proof of Balance, the random num-
i=1 ri = 0.
bers in a transaction speciﬁcation must satisfy
These random numbers can either be generated in the chain-
code or provided as arguments by the client code. In Fabric,
each organization can own multiple peer nodes for fault
tolerance. A transaction request can be sent to multiple peers
of the initiating organization to get endorsements. To ensure
that consistent random numbers are used by independent
peers for the same transaction, we provide the GetR API
to the client code, so that the same random numbers can be
distributed to all the endorsing peers.
Chaincode APIs are used to read/write data from/to the
public ledger. The ZkPutState API is called during the
execution stage, when the spending organization initializes
a transfer. It converts a transaction speciﬁcation to the
commitments and audit tokens, serializes them into a byte
stream, and invokes the native Fabric API, PutState, to
generate a write set, which is stored in a transient data
store on the endorsing peer and returned to the spending
organization.
The ZkVerify and ZkAudit APIs are called collabora-
tively during the two-step validation phase to verify transac-
tions in the public ledger. In step one, ZkVerify is invoked
by individual organizations to check Proof of Balance and
Proof of Correctness for a given row of transaction. In step
two, all organizations invoke ZkAudit in the chaincode to
create range proofs, disjunctive proofs, and the two tokens
in Equation (5) and (6), i.e., (cid:4)RP, DZKP, Token
(cid:2)(cid:2)(cid:5)
quadruples for each transaction. Finally, ZkVerify is
called again to check Proof of Assets, Proof of Amount, and
Proof of Consistency. A transaction is considered valid if
ZkVerify has successfully validated all ﬁve proofs.
, Token
(cid:2)
V. SYSTEM IMPLEMENTATION
In this section, we present the implementation details
of FabZK. We speciﬁcally focus on two practical design
aspects: data structure on the public ledger and parallelizing
the computation. We also explain how to write FabZK
applications.
A. Data Structure of Public Ledger
Recall that, in a tabular structured public ledger (Fig-
ure 2), each row represents a single transaction, containing
three types of transaction data: a (cid:4)Com, Token(cid:5) tuple, a
(cid:2)(cid:2)(cid:5) quadruple, and validation state.
(cid:4)RP, DZKP, Token
(cid:2)
We implement the schema of a FabZK row with the zkrow
, Token
l e d g e r
/ / zkrow r e p r e s e n t s a row i n t h e p u b l i c
message zkrow {
map columns = 1 ;
b o o l
b o o l
i s V a l i d B a l C o r = 2 ;
i s V a l i d A s s e t = 3 ;
}
/ / OrgColumn r e p r e s e n t s one o r g a n i z a t i o n
message OrgColumn {
two s t e p v a l i d a t i o n s t a t e
i s V a l i d B a l C o r = 3 ;
i s V a l i d A s s e t = 4 ;
/ /
t r a n s a c t i o n c o n t e n t
b y t e s commitment = 1 ;
b y t e s a u d i t T o k e n = 2 ;
/ /
b o o l
b o o l
/ /
b y t e s TokenPrime = 5 ;
b y t e s TokenDoublePrime = 6 ;
RangeProof
D i s j u n c t i v e P r o o f dzkp = 8 ;
a u x i l i a r y d a t a
f o r p r o o f s
r p = 7 ;
}
Figure 4: Data structure for a row in FabZK’s public ledger
in protobuf language [34]. Due to space limitations, details of
RangeProof and DisjunctiveProof are omitted.
data structure, shown in Figure 4. A zkrow constructs all
organizations’ data as multiple columns and holds the
validation state of that row. Each column is a key/value pair,
where the key is an organization’s name (or ID) and the
value is typed as an OrgColumn, storing the three types of
transaction data.
The contents of the ledger data structures are ﬁlled
by the chaincode APIs. The (cid:4)Com, Token(cid:5) tuple and
(cid:4)RP, DZKP, Token
(cid:2)(cid:2)(cid:5) quadruple are created by the
ZkPutState and ZkAudit APIs, respectively. The two
validation states,
i.e., OrgColumn.isValidBalCor
and OrgColumn.isValidAsset are
the
ZkVerify API during the two-step validation. After
all OrgColumns’ validation states are set, the result of
the logical AND operation of these states are assigned to
zkrow.isValidBalCor and zkrow.isValidAsset,
respectively.
, Token
set
by
(cid:2)
B. Parallelizing Computation
Because of the computation overhead of the cryptographic
algorithms, we need to further optimize program execution
to improve FabZK’s performance. We focus on parallelizing
the computation during the execution and two-step validation
phases, since these two phases account for most of the
computation overhead.
In the execution phase, we observe that the computa-
tions of (cid:4)Com, Token(cid:5) tuples for different organizations
are independent of each other. These computations also
do not require accessing historical data. Therefore in our
implementation, a spending organization creates multiple
threads to compute (cid:4)Com, Token(cid:5) tuples for all organizations
concurrently.
In the two-step validation phase, we realize that
the
computations of Proof of Balance and Proof of Correctness
=
(cid:2)m
have no dependency upon historical data or dependency
across different organizations. However,
the other three
proofs have to be computed sequentially, due to the two
constraints of Equation (4). First, computing a range proof
for the m-th row requires data from row 0 to row m, e.g.,
i=0 ui. Thus, ZkAudit cannot be invoked until
uRPm
all previous results are computed. Second, range proofs and
disjunctive proofs can only be computed by the spending
organization, because other organizations are not aware of
the sender’s available assets or the transaction detail. These
two constraints, together with the fact that the spending orga-
nization varies by transaction, dictate that the computations
of range proofs and disjunctive proofs have to be performed
sequentially.
In our implementation,
the ﬁrst step of validation is
fully parallelized, i.e., the computations of Proof of Balance
and Proof of Correctness are distributed to all peer nodes.
The second step of validation is partially parallelized: the
spending organization can launch multiple threads to verify
the range proofs and disjunctive proofs for all organizations,
but these two proofs are computed sequentially.
C. Writing FabZK Applications
Writing applications in FabZK is similar to that in the
Hyperledger Fabric. A FabZK application is comprised of
application chaincode and client code: the former is installed
on the endorser nodes, and the latter on off-chain nodes.
When an application chaincode is instantiated on a chan-
nel, its init function initializes the tabular structure of the
public ledger for each organization. Values such as orga-
nization name (or ID), public key and initial asset amount
can be loaded from the channel’s genesis block. The init
function calls the ZKPutState API to create the ﬁrst row
on the public ledger.
The application chaincode needs to support three chain-
code methods: transfer, audit and validation. All of them
accept input parameters from the client code. The transfer
method calls the ZkPutState API to create a row with
columns of (cid:4)Com, Token(cid:5) tuples on the public ledger. The
validation and audit methods invoke the two-step valida-
tion through their underlying FabZK APIs. The validation
method runs twice to call the ZkVerify API, validating
two sets of NIZK proofs respectively. The audit method calls
the ZkAudit API to compute (cid:4)RP, DZKP, Token
(cid:2)(cid:2)(cid:5)
quadruples. Note that the audit chaincode method can be in-
voked periodically (e.g., once a week) to provide automated
auditing.
, Token
(cid:2)
Developers write client code to access the private ledger.
To prepare the input transaction speciﬁcation for the transfer
chaincode method,
the client code retrieves the current
assets on the private ledger via the PvlGet API, and calls
the GetR API to obtain a set of random numbers. After
being notiﬁed of a new arrived transaction tid, the client
code retrieves information from its private ledger to check
549
whether its organization is involved. If involved, it appends
a new transaction row in the private ledger with tid and
the transfer amount via the PvlPut API. The client code
can also invoke the validation chaincode method with the
transfer amount, the organization’s secret key, and remaining
assets as input. Based on the returned result, the client code
updates the valid ﬁelds for that row of its private ledger.
A Sample Application: We build an over-the-counter stock
trade application to demonstrate the methodology above.
This application allows organizations to exchange assets
between each other on a Fabric channel [35]. Client code of
this application contains about 1200 lines of code in NodeJS,
while chaincode contains about 1000 lines of code in Go.
A single asset exchange transaction requires two chain-
code invocations. First, the sender informs the receiver of
the upcoming transaction’s unique identiﬁer out of band
and uses the client code to invoke the transfer chaincode
method on its endorsing peer. Next, all organizations invoke
the validation chaincode method to verify Proof of Balance
and Proof of Correctness of the incoming transaction.
While the transactions are being submitted to Fabric, they
are being audited with the other three NIZK proofs: Each
organization scans the rows in its private ledger. If a row is
veriﬁed during the asset exchange phase and the organization
is the spending transaction, it invokes the audit chaincode
method to create range proofs and disjunctive proofs for
the transaction. Then, the auditor and other organizations
can verify Proof of Assets (or Proof of Amount) and Proof
of Consistency for the transaction. The auditing process is
triggered at every 500 transactions.
Note that while auditing can identify invalid transactions,
this process often lags behind the transactions. So invalid
transactions can still occur until they are rejected. In practice,
the consortium of participating organizations should agree
on certain business rules to penalize the violations of the
range proof and disjunctive proof. This logic, however, is
out of scope for this paper, so it is not implemented in our
sample application.
VI. PERFORMANCE EVALUATION
In this section, we evaluate the performance of the FabZK
system. We aim to address the following aspects: (1) the
efﬁciency of FabZK’s cryptographic algorithms, compared
to other alternatives, and (2) the overhead introduced to an
application when using the privacy and audit functionalities
provided by FabZK.
We implement FabZK on top of the Hyperledger Fabric
version 1.3.0. The chaincode APIs are written in Go and the
client APIs written in NodeJS. FabZK uses the elliptic curve
secp256k1 of the btcec library to compute commitments.
Our range proofs are based on the protocol from Bullet-
Proofs [31]. The disjunctive proofs use a modiﬁed version
of Chaum-Pedersen proofs [32] with two non-interactive Σ-
protocols [33]. Since these are proven cryptographic primi-
550
Table II: Time (in ms) in running cryptographic algorithms
by libsnark and FabZK for various numbers of organizations.
# of
orgs
1
4
8
12
16
20
Data
encryption
FabZK
libsnark
185.6
186.4
188.4
195.2
194.9
195.5
0.2
0.6
0.8
1.4
1.8
2.0
Proof
generation
libsnark
193.3
195.5
196.4
195.6
199.1
196.4
FabZK
150.1
158.8
169.0
224.9
313.1
448.7
Proof
veriﬁcation
libsnark
FabZK
5.1
5.7
6.6
5.7
7.2
9.8
2.0
2.6
3.9
4.3
7.7
9.2
tives, we focus only on the evaluation of their performance,
while referring to the references above if the readers are
interested in knowing their effectiveness in terms of privacy
protection. All evaluations are run on Ubuntu 16.04 VMs
provisioned on IBM Cloud.
A. Algorithm Performance