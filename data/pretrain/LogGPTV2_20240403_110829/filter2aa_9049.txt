### Android 关键代码定位

#### 1. AndroidManifest.xml 文件
- **软件包名**：定义应用程序的唯一标识符。
- **主活动**：指定应用程序启动时首先显示的Activity。某些隐藏程序可能没有主Activity。

#### 2. Application 类
- **Application 类** 是在 Java 层最早启动的类，用于全局配置和初始化操作。

#### 3. 关键代码定位顺序分析
最常见且有效的方法是按照程序逻辑逐步查看代码进行分析。然而，当代码量非常大时，这种方法效率较低，需要其他辅助方法来提高效率。

#### 4. 字符串定位法
字符串定位法通过程序运行过程中出现的字符串来定位相应的函数。字符串可以被硬编码在程序中，也可以通过字符串ID索引。虽然这种方法使用方便，但现代应用可能会对字符串进行分割或加密，在运行时动态解密。

我们可能关注的字符串包括：
- 程序报错信息
- 服务名称
- 广播接收器

#### 5. 敏感 API 定位法
敏感 API 定位法是根据程序的执行行为来判断其调用的函数。这需要对 Android 中的 API 有深入了解。常见的关注点包括：
- **控件事件函数**
  - `onClick`
  - `show`
  - `Toast`
- **网络函数**
  - `HttpGet`
  - `HttpPost`
  - `HttpUriRequest`
  - `Socket`
- **发送短信**
- **打电话**
- **定位**

#### 6. Log 信息定位法
Log 信息是指 Android 程序在运行时输出的日志信息，这些信息不会显示在界面上，因此需要使用辅助工具（如 DDMS）进行分析。可以从以下两个方面考虑：
- **利用程序本身生成的 log 信息**：直接查看应用程序生成的日志。
- **插入自定义 log 信息**：对代码进行反编译，插入自定义日志信息，重新打包后进行分析。

#### 7. 栈跟踪方式
使用 DDMS 提供的方法获取调用链信息，帮助理解当前程序的调用关系。