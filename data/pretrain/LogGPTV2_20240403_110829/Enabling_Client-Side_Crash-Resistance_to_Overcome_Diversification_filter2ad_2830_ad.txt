page. The algorithm works due to the fact that access to an
address before the safe region will cause a fault, while an
access anywhere after the start of the mapped area will not
cause a fault. Consequently, we can approximate the beginning
of the region by halving the error margin with every step.
The maximum number of probes with binary search is log2 n,
with n being the number of elements to search in. There are
4T iB/4KiB = 1, 073, 741, 824 possible pages containing the
start of the safe region. This means we need a maximum of
log2 1, 073, 741, 824 = 30 tries after we located an arbitrary
address in the safe region to determine the start. Assuming the
worst case, we need 32 (128T iB/4T iB) probes to locate the
safe region and afterwards 30 probes to locate the exact starting
address. To decrease the likelihood of erroneously marking an
address containing zero bytes not belonging to the safe region,
the algorithm can be modiﬁed to sample more addresses in the
same page.
With the ability to alter the information on any pointer we
want, the protection of CPI can be circumvented as we can
just set the value allowing the action we need to perform with
the pointer. Note that the attack assumptions (i.e., a read and
write primitive as well as an information leak) required for our
memory oracle are within the threat model of CPI.
F. Subverting Hidden Code Layouts
Data structures related to exports are an essential aspect
of dynamic loading. These data structures contain function
addresses allowed to be imported by other modules, as ex-
plained in the following. We ﬁrst cover this background
information before discussing which challenges this introduces
for defenses.
1) Dynamic Loading: Windows as well as Linux provide
legitimate methods to load shared libraries into a running
process. This procedure is known as dynamic loading. Shared
libraries in Windows contain an Export Address Table (EAT)
with pointers of exportable functions. This structure is often
accessed by legitimate code even during a program’s runtime
and not only at load time. For example, the Windows API
function GetProcAddress() solely needs the module base and
the function name to retrieve a function address. It reads the
module’s Portable Executable (PE) metadata until it discovers
the appropriate function and returns its address. Hence, know-
ing a module’s base address is sufﬁcient to retrieve any of its
exportable functions. Linux provides a similar API: dlopen()
can be used to load a shared library into a running process
and dlsym() returns the address of a needed symbol (e.g., a
function).
The key observation is that export symbols and export
addresses are available throughout the complete runtime of
a process. This is necessary because a library loaded dy-
namically during runtime may import functions which are
exported by system libraries like ntdll.dll (Windows) or
libc.so (Linux). Therefore, exports in system libraries are
inevitable. Dynamic loading is especially important in web
browsers: Firefox implements a plugin architecture to load
desired features on the ﬂy. Similarly, Windows implements
the Component Object Model (COM) which is indispensable
for ActiveX plugins in Internet Explorer [11].
Note that disabling dynamic loading is not an option in
practice, as it would break fundamental functionality and
compatibility, and would require loading all libraries at startup
of a process. To the best of our knowledge, there is no defense
which protects export symbols against illegal access. However,
Export Address Table ﬁltering Plus (EAF+) of EMET [31]
forbids reading export structures based on the origin of the
read instruction. We show in Section V-A that this is only a
small hurdle in practice.
2) Leveraging Crash-Resistance to Subvert Hidden Code
Layouts:
In case of code pointer hiding, which is utilized
by Readactor [13], the functions’ addresses are hidden be-
hind execute-only trampolines which mediate execution to the
appropriate functions. Thus, their start addresses cannot be
read directly. However, with crash-resistance, an adversary can
discover the TEB without control-ﬂow hijacking. After she
reads information of a TEB, she can read the base addresses
of all modules out of the PEB. Another option despite TEB
discovery is to sweep through the address space in crash-
resistant mode. As the PE ﬁle header starting at a module’s
base is characteristic, memory oracles can provide modules’
base addresses. Furthermore, by utilizing memory disclosures,
the attacker can resolve trampoline addresses corresponding
to exported functions. She can then chain together several
trampoline addresses to perform whole function code-reuse,
as we will demonstrate later on.
IV. CONQUERING (RE-)RANDOMIZATION
Randomization of the memory layout or the code itself
has been proposed by various works (e.g., [23, 37, 56]) and
much attention was payed to their security and effectiveness.
Thus, the latest outcome of this evolution are ﬁne-grained re-
randomization schemes such as Isomeron [17], which aims
8
at preventing code-reuse primitives (see Section II-B3 for
details). When utilizing crash-resistance, an adversary can
abuse weak points in the defenses.
A. Defeating Fine-Grained Re-Randomization
In the case of Isomeron, re-randomization is applied to
the layout of the code. Hence, in two different points of time
one of two different code versions can be used for a speciﬁc
execution ﬂow. However, to the best of our knowledge, data is
not re-randomized at all. Thus, constant data is a foothold for
an adversary to undermine the security guarantees of Isomeron
as we discuss in the following.
1) Constant Structures: As explained above, the knowledge
about a module’s base address is sufﬁcient to resolve any of its
exported functions. While re-randomizing the code layout dur-
ing runtime can be performed efﬁciently, re-randomizing the
layout of data structures and the base addresses of modules has
yet to be shown. Moreover, the PE metadata layout of a module
needed to discover export functions must stay consistent such
that legitimate code can traverse it. Dynamic loading crucially
relies on this aspect. The same holds for the metadata of the
ELF ﬁle format. The potential shortcoming is that an attacker
can read that metadata with memory disclosures as well. Re-
randomizing the metadata such that its ﬁeld offsets change
would require adjusting legitimate code which accesses it.
Additionally, data structures in other modules which reference
the metadata need to be updated, too. Thus, we assume re-
randomization of data structures allocated in a large number
across the complete virtual address space is a challenging and
yet unsolved task.
2) Pulling Sensitive Information: A TEB also contains
a pointer to a process’ PEB. One of its ﬁelds, namely
PPEB LDR DATA LoaderData, contains the base addresses,
names, and entry points of all loaded modules. We extract that
information after we found a TEB with memory oracles. Then
we can traverse the PE metadata of each module and retrieve
all exported functions independent of the randomization ap-
plied. We therefore read the individual PE ﬁelds with memory
disclosures and follow the speciﬁc offsets until we reach the
EAT. Then, we can loop over the function names and extract
the function addresses. As noted above, EMET applies ﬁlters
to EATs, such that only legitimate code can traverse it. These
are ineffective in practice and can be bypassed as we show in
Section V-A.
B. Code Execution under Re-Randomizing and CFI
Abusing a memory corruption vulnerability in an address
space which is randomized in a ﬁne-grained way on the
instruction level and additionally re-randomizes before each
function call is very challenging. To further harden exploita-
tion, indirect calls are only allowed to dispatch functions and
returns can only target instructions which are preceded by call
instructions. This is consistent with coarse-grained CFI like
Microsoft’s Control Flow Guard, BinCFI [60], CCFIR [59] or
code-reuse protections in EMET [20, 36]. Thus, known code-
reuse primitives such as ROP or Call-Oriented Programming
(COP [10]) are not an option. Return-to-libc is inappropriate
as well since a shadow stack can detect such attacks.
However, as we can retrieve all export functions of all
modules via crash-resistance and memory oracles, we opt to
chain exported functions in a call-oriented manner. As re-
randomization preserves the semantic of functions indepen-
dent of the code (layout) mutations, they are reusable in a
consistent way. The basic idea is to invoke exported functions
which dispatch other exported functions on indirect call sites.
Ultimately, an adversary can achieve the goal of executing her
code of choice.
1) Discovering Functions for Code-Reuse: At the point of
control-ﬂow hijacking, when the adversary dispatches her ﬁrst
function of choice, we assume that she can control the ﬁrst
argument’s memory (see Section V for details). Thus, we want
functions which contain indirect calls whose targets can be
controlled with values derived from the ﬁrst argument. To ﬁnd
possible candidate functions usable for function chaining, we
apply static program analysis and symbolic execution.
An executable module is disassembled, its Control Flow
Graph (CFG) is derived, and all exported functions are dis-
covered. We then mark all
indirect calls in them. In the
next step, we extract the shortest execution paths between
the beginning of a function and its indirect calls. We utilize
the symbolic execution functionality of miasm2 [28] on the
gathered paths to detect if the ﬁrst argument to the function
inﬂuences the target of the indirect call. If this is the case,
we symbolically propagate potential arguments the functions
receives to potential parameters a function may take when
dispatched at the indirect call site.
Figure 1 illustrates the concept of argument propagation to
an indirect call instruction inside RtlInsertElementGeneric-
TableFullAvl in the NT Layer DLL. ARGn are arguments
the function receives via the stack. At the indirect call site
memory at ARG1 + 0x2C is taken as a call target EIPout.
Additionally, arguments are propagated to parameters for the
callee (argn). For example, the ﬁrst argument ARG1 becomes
the ﬁrst parameter for the callee, ARG3 is increased by ten to
become the callee’s second parameter arg2. Such propagation
summaries for export functions serve as a base to build code-
reuse function chains. The ultimate goal
is to control the
parameters of the last function, which eventually performs the
operation wanted by an adversary.
2) Crash-Resistant Oriented Programming (CROP): Be-
sides function chaining, an adversary can also utilize the crash-
arg5 ← EBPin
arg4 ← EBXin
arg3 ← ESIin
arg2 ← ARG3 + 0x10
arg1 ← ARG1
EAXout ← ARG3 + 0x10
ECXout ← ARG3
EBXout ← ARG1
EIPout ← [ARG1 + 0x2C]
Figure 1.
REGin are registers which are not redeﬁned until the indirect call.
Propagation summary for RtlInsertElementGenericTableFullAvl.
9
resistance feature to sequentially execute exported system calls
or exported functions. Each call is thereby triggered within
JavaScript and ends with a fault. As faults are handled, a
new call to another exported function or function chain can
be prepared and issued as we explain in the following.
The exported function NtContinue() in ntdll.dll can
be used to set a register context [58]. This context is taken
as ﬁrst parameter by NtContinue() and registers are set such
that program execution continues within that context. At the
point of control-ﬂow hijacking which starts a function chain
of choice, eventually NtContinue is dispatched as the last
function in our chain. It takes a propagated argument ﬁeld as its
only parameter PCONTEXT. In the PCONTEXT parameter, we let
the stack pointer point to attacker-controlled memory and the
instruction pointer to an exported function like NtAllocate-
VirtualMemory(). The return address for the function is set to
NULL in the controlled memory. NtContinue() sets the register
context and the function of choice (e.g., NtAllocateVirtual-
Memory()) executes successfully. Upon its return, an access
fault is triggered as it returns to NULL. However, this fault is
handled and the browser continues running.
This way, exported functions or syscalls can be dispatched
subsequently in crash-resistant mode. Similar to our scan-
ning technique shown in Section III-E, this happens within
JavaScript with setTimeout or setInterval. We term this
technique Crash-Resistant Oriented Programming (CROP)
and in spirit it is similar to sigreturn-oriented programming
(SROP) [8], as we discuss in Section VI.
V. PROOF-OF-CONCEPT IMPLEMENTATIONS
To demonstrate the practical viability of the methods dis-
cussed in the previous sections, we developed proof-of-concept
exploits for Internet Explorer (IE) 10 on Windows 8.0 64-bit,
for IE 11 and Firefox 64-bit on Windows 8.1 64-bit, and for
Firefox 64-bit on Ubuntu 14.10 Linux 3.17.1. IE is a multi-
process architecture whose tab processes run in 32-bit mode.
We utilized CVE-2014-0322 which is a use-after-free bug in IE
10. It allows increasing a byte at an attacker controlled address.
For IE 11, we utilize an introduced vulnerability which only
allows writing a null byte to an attacker-speciﬁed address.
The general procedure we utilize to ultimately execute code
consists of the following six steps:
1) Trigger the vulnerability to create a read-write primitive
usable from JavaScript.
2) Utilize the primitive as memory disclosure feature to leak
information accessible with memory disclosures.
3) Use the primitive as memory oracles to ﬁnd constant
hidden memory such as the TEB or module bases.
4) Traverse the modules’ EATs and extract exported func-
tions.
chain.
5) Prepare attacker-controlled objects and set up the function
6) Invoke a JavaScript function to trigger execution of the
ﬁrst function in the chain at an indirect callsite.
A. Exploiting IE without Knowledge of the Memory Layout
We use heap feng shui
to align objects to predictable
addresses [57]. The use-after-free vulnerability in IE 10 and
10
the null byte write in IE 11 are used to modify a JavaScript
number inside a JavaScript array. In IE, a generic array
keeps array elements in different forms, which depend on
their type. Numbers lower than 0x80000000 are stored as
element = number (cid:28) 1 | 1. In contrast, objects are stored as
pointers and their least signiﬁcant bit is never set. We use the
vulnerability to modify an element which represents a number.
This way, we create a type confusion and let the number point
to memory of choice (see Figure 2). We control 0x400 bytes
at that location and can read and write it with byte granularity.
We craft a fake Js::LiteralString object, including the
buffer pointer to any address we want, a length ﬁeld, and the
type ﬂag1. When the modiﬁed number element is accessed, IE
will interpret it as a string object. This way, we can use the
JavaScript function escape() on that element to retrieve the
data where the string’s pointer is pointing to. This functionality
is used to (i) probe addresses we set in our fake string object
with crash-resistant memory oracles (see Section III-C) and
(ii) read memory content at addresses which are readable.
Figure 2. After modifying a number, IE interprets it as pointer to an object
(fakePtr). As it points to a JavaScript array, elements can be set and fake
objects can be created. By varying the buffer pointer (bufPtr), a fake string
object can be used for crash-resistent memory probing attempts.
1) Memory Probing: After setting the scene, we probe with
page-granularity for a TEB starting from 0x7ffffffc and ex-
tract addresses of all exported functions. Optionally, we probe
with a granularity of 64KB (module alignment) and check
for the DOS header and PE header in case probing returns
readable memory. Similar to the former, this circumvents re-
randomization schemes which do not re-randomize metadata
in a mapped module.
As another hurdle, Export Address Table Filtering Plus
(EAF+) of Microsoft EMET [31] needs to be bypassed, too,
since it checks read attempts to export-metadata of mapped PE
modules. If the read originates from illegitimate instructions,
then the program is terminated. This should prevent reading
export or import metadata with JavaScript. Therefore, modules
are blacklisted which are not allowed to access it. However,
we discovered that applying escape() on large-sized string
objects triggers memory copying instructions from whitelisted
modules (e.g., msvcrt.dll). Thus, we can simply copy a com-
plete PE module into a JavaScript string by using escape() on
our fake Js::LiteralString object. Finally, we can resolve
exports within the copy of the module.
2) Code Execution and Function Chaining: With all
exported function addresses available, we craft a fake vtable
and insert the addresses of ﬁve exported functions into the
fake object. We dispatch a JavaScript method of the fake string
object, which triggers a lookup in the vtable and a dispatch
of the ﬁrst exported function in our chain. Thereby, the ﬁrst
function also receives our fake object as ﬁrst argument, such
that we control two parameters for the last function in the
1 Most JavaScript objects are C++ objects and contain a vtable pointer. As we do not
know the location of any module’s data yet, we do not set it. However, accessing the
fake string object with e.g. escape() still works.
b) Probing the Memory: A loop in JavaScript is utilized
which calls into asm.js and utilizes the asm.js crash-resistant
functionality to probe target regions. We use an asm.js function