JWSSigner signer = new MACSigner(sharedSecretString);
// create the signed JWT with the JWS header and the JWT body.
SignedJWT signedJWT = new SignedJWT(jswHeader, jwtClaims);
// sign the JWT with HMAC-SHA256.
signedJWT.sign(signer);
// serialize into base64url-encoded text.
String jwtInText = signedJWT.serialize();
// print the value of the JWT.
System.out.println(jwtInText);
return jwtInText;
}
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
180
To build and run the program, execute the following Maven command from the ch07/
sample02 directory.
\> mvn test -Psample02
The preceding code produces the following output, which is a signed JSON payload (a JWS). 
If you run the code again and again, you may not get the same output as the value of the 
currentTime variable changes every time you run the program:
eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MDIwMzkyOTIsInN1YiI6ImpvaG4iLCJuYm
YiOjE0MDIwMzg2OTIsImF1ZCI6WyJodHRwczpcL1wvYXBwMS5mb28uY29tIiw
iaHR0cHM6XC9cL2FwcDIuZm9vLmNvbSJdLCJpc3MiOiJodHRwczpcL1wvYXBy
ZXNzLmNvbSIsImp0aSI6ImVkNjkwN2YwLWRlOGEtNDMyNi1hZDU2LWE5ZmE
5NjA2YTVhOCIsImlhdCI6MTQwMjAzODY5Mn0.3v_pa-QFCRwoKU0RaP7pLOox
T57okVuZMe_A0UcqQ8
The following Java code shows how to validate the signature of a signed JSON message 
with HMAC-SHA256. To do that, you need to know the shared secret used to sign the JSON 
payload:
public static boolean isValidHmacSha256Signature()
                                       throws JOSEException, ParseException {
        String sharedSecretString = "ea9566bd-590d-4fe2-a441-d5f240050dbc";
        // get signed JWT in base64url-encoded text.
        String jwtInText = buildHmacSha256SignedJWT(sharedSecretString);
        // create verifier with the provider shared secret.
        JWSVerifier verifier = new MACVerifier(sharedSecretString);
        // create the signed JWS token with the base64url-encoded text.
        SignedJWT signedJWT = SignedJWT.parse(jwtInText);
        // verify the signature of the JWS token.
        boolean isValid = signedJWT.verify(verifier);
        if (isValid) {
            System.out.println("valid JWT signature");
        } else {
            System.out.println("invalid JWT signature");
        }
        return isValid;
}
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
181
GENERATING A JWS TOKEN WITH RSA-SHA256 WITH A JSON PAYLOAD
The following Java code generates a JWS token with RSA-SHA256. you can download 
the complete Java sample as a Maven project from https://github.com/
apisecurity/samples/tree/master/ch07/sample03. First you need to invoke 
the method generateKeyPair() and pass the PrivateKey(generateKeyPair().
getPrivateKey()) into the method buildRsaSha256SignedJSON():
public static KeyPair generateKeyPair()
                                  throws NoSuchAlgorithmException {
        // instantiate KeyPairGenerate with RSA algorithm.
        KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("RSA");
        // set the key size to 1024 bits.
        keyGenerator.initialize(1024);
        // generate and return private/public key pair.
        return keyGenerator.genKeyPair();
 }
 public static String buildRsaSha256SignedJSON(PrivateKey privateKey)
                                                throws JOSEException {
    // build audience restriction list.
    List aud = new ArrayList();
    aud.add("https://app1.foo.com");
    aud.add("https://app2.foo.com");
    Date currentTime = new Date();
    // create a claims set.
    JWTClaimsSet jwtClaims = new JWTClaimsSet.Builder().
                                // set the value of the issuer.
                                issuer("https://apress.com").
                                 // set the subject value - JWT belongs to  
// this subject.
                                subject("john").
                                // set values for audience restriction.
                                audience(aud).
                                // expiration time set to 10 minutes.
                                 expirationTime(new Date(new Date().getTime() 
+ 1000 * 60 * 10)).
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
182
                                // set the valid from time to current time.
                                notBeforeTime(currentTime).
                                // set issued time to current time.
                                issueTime(currentTime).
                                 // set a generated UUID as the JWT identifier.
                                jwtID(UUID.randomUUID().toString()).
                                build();
        // create JWS header with RSA-SHA256 algorithm.
        JWSHeader jswHeader = new JWSHeader(JWSAlgorithm.RS256);
        // create signer with the RSA private key..
        JWSSigner signer = new RSASSASigner((RSAPrivateKey)privateKey);
        // create the signed JWT with the JWS header and the JWT body.
        SignedJWT signedJWT = new SignedJWT(jswHeader, jwtClaims);
        // sign the JWT with HMAC-SHA256.
        signedJWT.sign(signer);
        // serialize into base64-encoded text.
        String jwtInText = signedJWT.serialize();
        // print the value of the JWT.
        System.out.println(jwtInText);
        return jwtInText;
}
The following Java code shows how to invoke the previous two methods:
KeyPair keyPair = generateKeyPair();
buildRsaSha256SignedJSON(keyPair.getPrivate());
To build and run the program, execute the following Maven command from the ch07/
sample03 directory.
\> mvn test -Psample03
Let’s examine how to validate a JWS token signed by RSA-SHA256. you need to know the 
PublicKey corresponding to the PrivateKey used to sign the message:
public static boolean isValidRsaSha256Signature()
                                           throws NoSuchAlgorithmException,
                                                        JOSEException, 
ParseException {
        // generate private/public key pair.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
183
        KeyPair keyPair = generateKeyPair();
        // get the private key - used to sign the message.
        PrivateKey privateKey = keyPair.getPrivate();
        // get public key - used to verify the message signature.
        PublicKey publicKey = keyPair.getPublic();
        // get signed JWT in base64url-encoded text.
        String jwtInText = buildRsaSha256SignedJWT(privateKey);
        // create verifier with the provider shared secret.
        JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) publicKey);
        // create the signed JWT with the base64url-encoded text.
        SignedJWT signedJWT = SignedJWT.parse(jwtInText);
        // verify the signature of the JWT.
        boolean isValid = signedJWT.verify(verifier);
        if (isValid) {
            System.out.println("valid JWT signature");
        } else {
            System.out.println("invalid JWT signature");
        }
        return isValid;
}
GENERATING A JWS TOKEN WITH HMAC-SHA256 WITH A NON-JSON PAYLOAD
The following Java code generates a JWS token with HMAC-SHA256. you can download the 
complete Java sample as a Maven project from https://github.com/apisecurity/
samples/tree/master/ch07/sample04. The method buildHmacSha256Signed 
NonJSON() in the code should be invoked by passing a secret value that is used as the 
shared key to sign. The length of the secret value must be at least 256 bits:
public static String buildHmacSha256SignedJWT(String sharedSecretString)
                                                    throws JOSEException {
// create an HMAC-protected JWS object with a non-JSON payload
JWSObject jwsObject = new JWSObject(new JWSHeader(JWSAlgorithm.HS256),
                                    new Payload("Hello world!"));
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
184
// create JWS header with HMAC-SHA256 algorithm.
jwsObject.sign(new MACSigner(sharedSecretString));
// serialize into base64-encoded text.
String jwtInText = jwsObject.serialize();
// print the value of the serialzied JWS token.
System.out.println(jwtInText);
return jwtInText;
}
To build and run the program, execute the following Maven command from the ch07/
sample04 directory.
\> mvn test -Psample04
The preceding code uses the JWS compact serialization and will produce the following output:
eyJhbGciOiJIUzI1NiJ9.SGVsbG8gd29ybGQh.zub7JG0FOh7EIKAgWMzx95w-nFpJdRMvUh_
pMwd6wnA
 Summary
• 
JSON has already become the de facto message exchange format  
for APIs.
• 
Understanding JSON security plays a key role in securing APIs.
• 
JSON Web Token (JWT) defines a container to transport data 
between interested parties in a cryptographically safe manner.  
It became an IETF standard in May 2015 with the RFC 7519.
• 
Both JWS (JSON Web Signature) and JWE (JSON Web Encryption) 
standards are built on top of JWT.
• 
There are two types of serialization techniques defined by the JWS 
specification: compact serialization and JSON serialization.
• 
The JWS specification is not just limited to JSON. You can sign any 
content with JWS without wrapping it inside a JSON payload.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
185
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_8
CHAPTER 8
Message-Level  
Security with JSON  
Web Encryption
In Chapter 7, we discussed in detail the JWT (JSON Web Token) and JWS (JSON Web 
Signature) specifications. Both of these specifications are developed under the IETF JOSE 
working group. This chapter focuses on another prominent standard developed by the 
same IETF working group for encrypting messages (not necessarily JSON payloads): JSON 
Web Encryption (JWE). Like in JWS, JWT is the foundation for JWE. The JWE specification 
standardizes the way to represent an encrypted content in a JSON-based data structure. 
The JWE1 specification defines two serialized forms to represent the encrypted payload: 
the JWE compact serialization and JWE JSON serialization. Both of these two serialization 
techniques are discussed in detail in the sections to follow. Like in JWS, the message to be 
encrypted using JWE standard need not be a JSON payload, it can be any content. The term 
JWE token is used to refer to the serialized form of an encrypted message (any message, not 
just JSON), following any of the serialization techniques defined in the JWE specification.
 JWE Compact Serialization
With the JWE compact serialization, a JWE token is built with five key components, each 
separated by periods (.): JOSE header, JWE Encrypted Key, JWE Initialization Vector, 
JWE Ciphertext, and JWE Authentication Tag. Figure 8-1 shows the structure of a JWE 
token formed by JWE compact serialization.
1 The JSON Web Encryption specification, https://tools.ietf.org/html/rfc7516
186
 JOSE Header
The JOSE header is the very first element of the JWE token produced under compact 
serialization. The structure of the JOSE header is the same, as we discussed in Chapter 7,  
other than few exceptions. The JWE specification introduces two new parameters (enc 
and zip), which are included in the JOSE header of a JWE token, in addition to those 
introduced by the JSON Web Signature (JWS) specification. The following lists out all the 
JOSE header parameters, which are defined by the JWE specification:
• 
alg (algorithm): The name of the algorithm, which is used to encrypt 
the Content Encryption Key (CEK). The CEK is a symmetric key, 
which encrypts the plaintext JSON payload. Once the plaintext 
is encrypted with the CEK, the CEK itself will be encrypted with 
another key following the algorithm identified by the value of the 
alg parameter. The encrypted CEK will then be included in the JWE 
Encrypted Key section of the JWE token. This is a required attribute 
in the JOSE header. Failure to include this in the header will result in 
a token parsing error. The value of the alg parameter is a string, which 
is picked from the JSON Web Signature and Encryption Algorithms 
registry defined by the JSON Web Algorithms2 (JWA) specification. 
If the value of the alg parameter is not picked from the preceding 
registry, then it should be defined in a collision-resistant manner, 
but that won’t give any guarantee that the particular algorithm is 
identified by all JWE implementations. It’s always better to stick to the 
algorithms defined in the JWA specification.
• 
enc: The enc parameter in the JOSE header represents the name of 
the algorithm, which is used for content encryption. This algorithm 
should be a symmetric Authenticated Encryption with Associated 
2 JWS algorithms are defined and explained in the JSON Web Algorithms (JWA) specification, 
https://tools.ietf.org/html/rfc7518.
Figure 8-1. A JWE token with compact serialization
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
187
Data (AEAD) algorithm. This is a required attribute in the JOSE 
header. Failure to include this in the header will result in a token 
parsing error. The value of the enc parameter is a string, which is 
picked from the JSON Web Signature and Encryption Algorithms 
registry defined by the JSON Web Algorithms (JWA) specification. 
If the value of the enc parameter is not picked from the preceding 
registry, then it should be defined in a collision-resistant manner, 
but that won’t give any guarantee that the particular algorithm is 
identified by all JWE implementations. It’s always better to stick to the 
algorithms defined in the JWA specification.
• 
zip: The zip parameter in the JOSE header defines the name of the 
compression algorithm. The plaintext JSON payload gets compressed 
before the encryption, if the token issuer decides to use compression. 
The compression is not a must. The JWE specification defines DEF 
as the compression algorithm, but it’s not a must to use it. The token 
issuers can define their own compression algorithms. The default 
value of the compression algorithm is defined in the JSON Web 
Encryption Compression Algorithms registry under the JSON Web 
Algorithms (JWA) specification. This is an optional parameter.
• 
jku: The jku parameter in the JOSE header carries a URL, which 
points to a JSON Web Key (JWK)3 set. This JWK set represents a 
collection of JSON-encoded public keys, where one of the keys is  
used to encrypt the Content Encryption Key (CEK). Whatever the 
protocol used to retrieve the key set should provide the integrity 
protection. If keys are retrieved over HTTP, then instead of plain HTTP, 
HTTPS (or HTTP over TLS) should be used. We discuss Transport 
Layer Security (TLS) in detail in Appendix C. The jku is an optional 
parameter.
• 
jwk: The jwk parameter in JOSE header represents the public 
key corresponding to the key that is used to encrypt the Content 
Encryption Key (CEK). The key is encoded as per the JSON Web Key 
(JWK) specification.3 The jku parameter, which we discussed before, 
3 A JSON Web Key (JWK) is a JSON data structure that represents a cryptographic key,  
https://tools.ietf.org/html/rfc7517
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON 
188
points to a link that holds a set of JWKs, while the jwk parameter 
embeds the key into the JOSE header itself. The jwk is an optional 
parameter.
• 
kid: The kid parameter of the JOSE header represents an identifier 
for the key that is used to encrypt the Content Encryption Key 
(CEK). Using this identifier, the recipient of the JWE should be able 
to locate the key. If the token issuer uses the kid parameter in the 
JOSE header to let the recipient know about the signing key, then the 
corresponding key should be exchanged “somehow” between the 
token issuer and the recipient beforehand. How this key exchange 
happens is out of the scope of the JWE specification. If the value of 
the kid parameter refers to a JWK, then the value of this parameter 
should match the value of the kid parameter in the JWK. The kid is 
an optional parameter in the JOSE header.
• 
x5u: The x5u parameter in the JOSE header is very much similar to 