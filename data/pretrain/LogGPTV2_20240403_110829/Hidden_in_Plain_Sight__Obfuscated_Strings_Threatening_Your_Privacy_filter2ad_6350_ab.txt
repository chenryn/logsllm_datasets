br.com.tempest
com.tnkfactory
br.com.tempest
com.google.android
br.com.tempest
com.apptracker
com.adlib
com.mnt
com.waystorm.ads
com.vpon.adon
com.mt.airad
Cipher
AES
AES & Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
Bit
DESede
DESede
Encoding
B64
B85
custom
custom
URL
B64
B64
B64
B64
Countermeasure
Count
9
3
16
6
6
3
22
13
3
25
3
9
3
9
3
9
13
9
31
28
25
SO
SI
BA
SW mod. key
Key in BA
Key is SC (KSC)
OI
SC
ST
SW
TK
TM
Key is idx of BA
KMC
During our analysis, we classified a string as not obfuscated, if
it flows, without any modification, into an unmodifiable method 2.
Additionally, if the string contains multiple words found in a dic-
tionary or matches a known format (e.g., XML), it is not classified
as obfuscated. In the case of other data structures, we considered
all bit operations that are performed on constant values to be an
indication for string obfuscation. For each obfuscated string, we
then manually analyzed the code that deobfuscates the string to
determine the used technique.
Overview of identified techniques. Using our methodology, we
identified 21 unique string obfuscation techniques found in 236 ad
libraries shown in Table 1. Among the identified techniques are also
those used by the state-of-the-art obfuscation tool manufacturers
such as, DexGuard 5.5.41 [16], Allatori 6.8 [41], DashO 9.2 [12],
Stringer 3.0.5 [52], ZKM 12.0 [62], and Shield4J [8]. For each tech-
nique, we show the cipher, the encoding, and countermeasures
used to make detection by static/dynamic analyses more difficult.
Additionally, we list the distribution (Count) of each string obfus-
cation technique across all 236 ad libraries (incl. duplicates). The
used ciphers are bit manipulations such as XOR operations (Bit),
DESede, AES, and the combination of bit manipulation and AES.
The encodings consist of Base64 (B64), URLEncoder (URL), Base85
(B85), or custom encodings (custom), e.g., using a BigInteger with
base 33, or splitting a string and concatenating the characters at
the beginning and the end of the new string. We identified the
following countermeasures:
Serialized Object (SO): One technique loads a serialized object at
runtime that implements a deobfuscation method. Subsequently,
it must be called through reflection to deobfuscate a string. This
technique evades deobfuscators that rely exclusively on identifying
and executing deobfuscation methods.
2Most obfuscators produce strings with unreadable symbols and, therefore, contain
no words.
Static Initializer (SI): The static initializer computes the deobfus-
cation key. This practice evades deobfuscators who extract the logic
of only one particular method for execution.
Byte Arrays (BA): Two of the analyzed techniques use byte arrays
to hide the representation of obfuscated strings and, thus, evade
deobfuscators that rely on this representation.
Switch Statements (SW): Two techniques use a switch statement
in a loop to deobfuscate a different string in each loop iteration. Both
store the resulting strings in an array, and each method accesses
this array. These techniques evade deobfuscators that search for an
explicit deobfuscation method.
Stack Calls (SC): Two techniques hard-code the calling context
(e.g., method name and class name) of the deobfuscation method.
While one technique checks the calling context in a conditional
statement, the second one uses the calling-context information as
part of the deobfuscation key. Both techniques evade deobfuscators
that execute the deobfuscation logic without a specific context.
However, only the second one enforces the extraction of the context
for slicing approaches because it is a direct part of the deobfuscation.
Object Initializer (OI): One technique deobfuscates strings by
inserting a specific class whose constructor initializes the deob-
fuscation key. Subsequently, a method of the constructed object
deobfuscates all strings which were obfuscated with the initialized
key. This technique evades deobfuscators that execute only static
methods.
Stream Transfer (ST): Hidden channels are used to transfer obfus-
cated strings to deobfuscation methods. For instance, one obfuscator
transfers the obfuscated string via input/output streams to its deob-
fuscation method. This technique evades deobfuscators that track
obfuscated strings and would, therefore, miss data flows arising
from streams.
Two Keys (TK): Two different keys are used for string deobfusca-
tion. This usage evades deobfuscators that try brute force guessing
of one key to uncover obfuscated strings.
Two Methods (TM): Two methods are used for string deobfusca-
tion. This usage evades deobfuscators that execute only one deob-
fuscation method to uncover obfuscated strings.
Key Management Calls (KMC): One technique initializes deobfus-
cation keys directly before their usage by using object fields. This
technique hinders deobfuscators that do not handle the initializa-
tion of fields.
As depicted in Table 1, different combinations of ciphers, en-
codings, and countermeasures are used as techniques for string
obfuscation. We refer to these combinations as obfuscation schemes.
Some of the techniques are used in state-of-the-art commercial ob-
fuscation tools, and developers most commonly use these tools to
obfuscate strings in Android and Java apps. The findings of this
study are surprising as none of the identified techniques requires a
broader focus than the one described above.
Observation 1. All analyzed obfuscation schemes are ini-
tialized within the class containing the deobfuscation methods.
Thus, no heavyweight inter-procedural analysis seems necessary
for our data set.
Next, the gained knowledge of these identified schemes is used
to evaluate our approach. Therefore, we obfuscated samples with
all schemes by using either an acquired tool or a re-implemented
Figure 1: Overview of StringHound’s Approach
version of the scheme. The re-implementation was achieved by
manually reversing the deobfuscation logic found in obfuscated
apps. For instance, if the deobfuscation logic used a Base64 decoding
followed by an AES decryption, we first encrypted all strings with
AES and then encoded the result using Base64.
3 THE STRINGHOUND APPROACH
StringHound processes Java bytecode in five steps. Figure 1 shows a
high-level view of this process. First, when we analyze an Android
Package (APK), we transform its Dalvik bytecode to Java bytecode
and process the result with our analysis. Second, to reveal obfus-
cated strings, we need to identify the methods that potentially use
them. For locating usages of obfuscated strings, we propose two
complementary techniques: a classifier for identifying potentially
obfuscated strings (String Classifier), and a classifier for identifying
deobfuscation methods (Method Classifier). The string classifier
operates on characteristics of obfuscated strings by using decision
trees. The method classifier matches distributions of instructions
from known deobfuscation methods with the Spearman correlation.
Third, we find the starting point for the slicing (slicing criterion) in
the methods that contain the usage of the obfuscated strings. Forth,
we use a specifically targeted slicing technique that computes all
program statements that affect the state of a given slicing criterion.
Finally, StringHound injects the slice into the execution context of
the deobfuscation logic. Afterward, it executes the resulting slice
to obtain deobfuscated strings. The injection of the slice into the
context renders countermeasures introduced by obfuscators inef-
fective. Our detailed description of StringHound shows the design
decisions taken to address the obfuscation schemes presented in
Section 2.
3.1 Classifiers
In this section, we present our classifiers and evaluate their preci-
sion and recall. In Section 4.2.1, we provide empirical evidence that
they are both needed.
3.1.1 Training & Evaluation Data Set. For the training and evalu-
ation of our classifiers we downloaded the newest versions of all
1,879 apps from F-Droid [20]. We chose F-Droid because it only
consists of open-source software. Hence, string obfuscation does
not make sense and is also not applied. This data set is used as
ground truth of plain strings and methods which do not contain
any deobfuscation logic. These two properties enable the obfus-
cation without dealing with the influence of previously existing
obfuscation artifacts. The standard configuration of the Android
build process might use name obfuscation due to the integration of
ProGuard. However, ProGuard does not use string obfuscation [44].
String Classifier. To train the classifier, we generated a data
3.1.2
set of 1,918,687 obfuscated from the same amount of non-obfuscated
strings. The set of non-obfuscated strings was extracted from the
F-Droid data set (cf. Section 3.1.1). We applied all 21 obfuscation
schemes identified in our case study (Section 2) to non-obfuscated
strings of F-Droid applications to obtain obfuscated strings. This
effort yields 32,379 obfuscated apps1 from which we extracted
all strings. As a result, we acquired significantly more obfuscated
strings than plain strings. To avoid a bias towards obfuscated strings,
we took all strings from the plain apps and randomly selected the
same number of strings from the obfuscated ones.
Approach. We extracted 49 different features from the collected
strings and trained a model using Weka’s REPTree. This enables
a fast comparison of the features by building a regression/deci-
sion tree using the most discriminatory features to check the most
relevant ones first. However, REPTree considers all these features
before it comes to a final decision for a given string. The authors
checked that the classifier considers all features for its final decision
by manually traversing the decision tree.
In the following, we describe the used features from Table 2
grouped by their category.
Format: In the study presented in Section 2, we observed that
obfuscated strings often contain non alphanumeric characters. Nev-
ertheless, we cannot classify a string as obfuscated just because
it contains non alphanumeric characters – plain strings of certain
formats may also use these characters. To avoid matching such
plain strings, we use various patterns to discern format usages
such as XML (e.g. ) and HTML colors (e.g. #FFAE40) in the
feature vector. These flags are used to give the model a hint that
the analyzed string might not be obfuscated. However, these hints
should not be confused with filtering, as they are only a part of the
classifier’s decision.
Statistical Tests: Previous statistical analyses of encryption mech-
anisms [27, 33, 43] show that obfuscated strings often have a ran-
dom (close to equal) distribution of characters. We use random
distribution as a discriminating feature to distinguish between ob-
fuscated and other strings with special characters. To check whether
the distribution of the characters in a string is random, we use three
different measures because each one is suited for different scenarios
we encountered. With the Chi-squared test, we measure the devia-
tion of the characters from the equal distribution of these characters,
since randomized characters are often equally distributed. With
the deviation from the average distribution, we measure whether
the given string belongs to a language or whether the characters
were only rotated (e.g. caesar cipher [27]). Normalized entropy was
previously [33] used to identify encrypted malware. We reuse it to
identify encrypted strings.
AndroDet: We use the number of equals, number of dashes, num-
ber of slashes, number of pluses, and the sum of repetitive characters
from the feature list of AndroDet [38] which are used to identify
if an app uses string obfuscation. However, AndroDet averages
these features over all strings in an app and is therefore not able to
classify individual strings.