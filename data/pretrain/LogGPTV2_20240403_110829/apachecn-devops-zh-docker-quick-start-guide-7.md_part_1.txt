# 七、Docker 栈
在这一章中，我们将把我们在前六章中学到的知识集中起来，并使用它来定义、部署和管理多容器应用。我们将通过使用 Docker 栈来实现这一点。我们将学习如何使用 Docker 栈和定义多容器应用所需的 YAML 文件。我们将利用我们所了解的 Docker 服务、Docker 卷、Docker Swarm 和 Docker 网络来创建功能齐全的基于多服务 Docker 的应用。
The largest cargo ship is 400 meters long and can carry between 15,000 and 18,000 shipping containers!
在本章中，我们将涵盖以下主题:
*   使用 Docker 栈
*   部署多服务 Docker 应用
*   创建和使用合成(栈)YAML 文件
*   扩展已部署的多服务 Docker 应用
# 技术要求
您将从 Docker 的公共报告中获取 Docker 映像，并从 Weave 安装网络驱动程序，因此需要基本的互联网访问来执行本章中的示例。另外，我们将使用 jq 软件包，所以如果您还没有安装它，请查看如何安装的说明；它们可以在[第二章](2.html)*学习 Docker 命令*的*容器检查命令*部分找到。
本章代码文件可在 GitHub:
[https://GitHub . com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/chapter 07](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter07)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2E2qc9U](http://bit.ly/2E2qc9U)
# 了解 Docker 栈的使用
到目前为止，我们主要关注的是从单个 Docker 映像运行 Docker 容器，简化 Docker 模型以想象一个世界，其中每个应用只需要一个服务，因此只需要一个 Docker 映像来运行。然而，正如你所知，这是一个非常不现实的模式。现实世界的应用由多个服务组成，这些服务是使用多个 Docker 映像部署的。要运行所有必要的容器，并将它们保持在所需的副本数量，处理计划内和计划外停机时间、扩展需求以及所有其他服务管理需求，是一项非常艰巨和复杂的任务。在最近的过去，这个场景是使用一个叫做 Docker Compose 的工具来处理的。Docker Compose(正如您在[第 1 章](1.html)、*中所学的，设置 Docker 开发环境*)是一个额外的工具，您可以安装在您的 Docker 环境中，我们这样做是为了完成我们工作站的环境。虽然 Docker Compose 的大部分功能类似于您在 Docker 栈中找到的功能，但我们将在本章中重点介绍 Docker 栈。我们这样做是因为 Docker Compose 是用来管理容器的，Docker 世界已经朝着商品单元是服务而不是容器的方向发展。Docker stacks 管理服务，因此我将 Docker stacks 视为 Docker Compose 的发展(这是一个名为 Fig 的项目的发展)。我们没有在[第 1 章](1.html)、*中安装 Docker 栈的原因是，stacks 已经作为标准 Docker 安装的一部分。*
好的，所以 Docker 栈是新的和改进的 Docker Compose，它包含在我们的安装中。我打赌你在想，太好了。但这意味着什么呢？Docker 栈的用例是什么？好问题！Docker stacks 是*利用我们在前面章节中了解到的所有功能的*方式，例如 Docker 命令、Docker 映像、Docker 服务、Docker 卷、Docker Swarm 和 Docker 网络，将它们打包成一个易于使用、易于理解的声明性文档文件，该文件将代表我们实例化和维护一个复杂的多映像应用。
您的大部分工作(仍然是最容易的部分)将是创建将在 Docker 栈命令中使用的合成文件。当 Docker 创建、启动和管理您的多服务(多容器)应用所需的所有服务时，所有真正困难的工作都将由它来完成。所有这些都由您的一个命令来处理。就像 image 一样，容器和群栈是另一个 Docker 管理组。让我们看看栈管理命令:
![](img/122c40cb-3742-4665-be75-2ce2ecfaa9df.png)
那么，我们这里有什么？对于这个管理组所代表的所有权力，它有一组非常简单的命令。主命令是`deploy`命令。它是发电站！有了这个命令(和一个合成文件)，您就可以启动您的应用，提取任何不在您的环境本地的映像，运行这些映像，根据需要创建卷，根据需要创建网络，为每个映像部署定义数量的副本，将它们分布在整个群集中以实现高可用性和负载平衡，等等。这个命令有点像*指环王*中的一个戒指。除了部署应用之外，当您需要执行诸如扩展应用之类的操作时，您还将使用相同的命令来更新正在运行的应用。
管理组中的下一个命令是列表栈命令。顾名思义，ls 命令允许您获取当前部署到集群的所有栈的列表。当您需要关于群中运行的特定栈的更多详细信息时，您将使用`ps`命令列出特定栈的所有任务。当使用部署的栈结束时，您将使用强大的 rm 命令。最后，将管理命令四舍五入，我们得到了服务命令，它允许我们获得作为栈一部分的服务列表。堆叠拼图中还有一个更重要的部分，那就是`--orchestrator`选项。有了这个选项，我们可以指示 Docker 使用 Docker swarm 或 Kubernetes 进行栈编排。当然，要使用 Kubernetes，必须安装它，要使用 swarm-如果未指定选项，这是默认设置-必须启用 swarm 模式。
在本章的剩余部分，我们将使用一个示例应用深入探讨 Docker 栈。Docker 提供了几个这样的示例，但是我们要检查的是投票应用示例。我将为该应用提供一个 Docker repo 的链接，以及一个在 Docker 应用发生巨大变化或项目消失时指向我的空间中的项目分叉的链接。让我们看一下示例投票应用的栈文件。
# 参考
有关更多信息，请查看以下链接:
*   Docker 组合概述:https://docs . docker . com/compose/overview/
*   Docker 栈命令参考:[https://docs.docker.com/engine/reference/commandline/stack/](https://docs.docker.com/engine/reference/commandline/stack/)
*   Docker 样本:https://github . com/dock samples
*   Docker 投票应用示例:[https://github.com/dockersamples/example-voting-app](https://github.com/dockersamples/example-voting-app)
*   我的投票应用叉:[https://github.com/EarlWaud/example-voting-app](https://github.com/EarlWaud/example-voting-app)
# 如何为 Stacks 创建和使用合成 YAML 文件
栈文件是一个 YAML 文件，基本上和 Docker Compose 文件是一样的。这两个都是 YAML 文件，定义了一个基于 Docker 的应用。从技术上讲，栈文件是一个需要特定版本(或更高版本)的编写规范的编写文件。Docker 栈只支持 3.0 版及以上的规范。如果您有一个使用 Docker 编写 YAML 文件的现有项目，并且这些文件使用版本 2 或更旧的规范，那么您将需要将 YAML 文件更新到版本 3 规范，以便能够与 Docker 栈一起使用它们。值得注意的是，同一个 YAML 文件可以用于 Docker 栈或 Docker compose(前提是它是使用版本 3 或更高的规范编写的)。但是，有些指令会被一个或另一个工具忽略。例如，构建指令被 Docker 栈忽略。这是因为栈和合成之间最重要的区别之一是，所有使用的 Docker 映像都必须预先创建，以便与栈一起使用，而 Docker 映像可以作为建立基于合成的应用的过程的一部分来创建。另一个显著的区别是栈文件能够将 Docker 服务定义为应用的一部分。
现在是克隆投票应用项目和可视化映像的好时机:
```
# Clone the sample voting application and the visualizer repos
git clone https://github.com/EarlWaud/example-voting-app.git
git clone https://github.com/EarlWaud/docker-swarm-visualizer.git
```
严格来说，你不需要克隆这两个转帖，因为你真正需要的是来自投票应用的栈合成文件。这是因为所有的映像都已经创建完毕，并且可以从 hub.docker.com 公开获取，当您部署栈时，这些映像将作为部署的一部分为您提取。因此，下面是获取栈 YAML 文件的命令:
```
# Use curl to get the stack YAML file
curl -o docker-stack.yml\
 https://raw.githubusercontent.com/earlwaud/example-voting-app/master/docker-stack.yml
```
当然，如果您想以任何方式自定义应用，让项目本地允许您构建自己版本的 Docker 映像，然后使用您的自定义映像部署应用的自定义版本。
一旦您的系统上有了项目(或者至少是`docker-stack.yml`文件)，您就可以开始使用 Docker 栈命令了。现在，让我们开始使用`docker-stack.yml`文件来部署我们的应用。您需要设置您的 Docker 节点，并启用集群模式才能运行，因此如果您还没有这样做，请按照[第 5 章](5.html)、 *Docker Swarm* 中的描述设置您的集群。然后，使用以下命令部署示例投票应用:
```
# Deploy the example voting application 
# using the downloaded stack YAML file
docker stack deploy -c docker-stack.yml voteapp
```
这可能是这样的:
![](img/2aee2f71-d5df-4f98-846b-ac4b0b65e79b.png)
让我快速解释一下这个命令:我们使用`deploy`命令和`docker-stack.yml`组成文件，并命名我们的栈`voteapp`。该命令将处理新应用的所有配置、部署和管理。按照`docker-stack.yml`文件中的定义，启动和运行一切需要一些时间，所以当这种情况发生时，让我们开始进入栈合成文件。
现在，你知道我们正在使用`docker-stack.yml`文件。因此，当我们解释栈组成文件的各个部分时，您可以在您最喜欢的编辑器中调出该文件，然后继续。开始了。
我们首先要看的是顶级键。在这种情况下，它们如下:
*   版本
*   服务
*   网络