devices) and ﬁnd that, while standard access patterns are no
longer effective, new many-sided RowHammer patterns can
still induce bit ﬂips on many TRR-protected DDR4 modules
in the market today.
This paper shows that, despite signiﬁcant mitigation ef-
forts, modern DDR4 DRAM systems are still vulnerable to
RowHammer bit ﬂips—and even more vulnerable than DDR3
DRAM systems, once the mitigations are bypassed. In particu-
lar, we demonstrate that Target Row Refresh (TRR), publicized
by CPU and DRAM vendors as the deﬁnitive solution to
RowHammer, can be bypassed to cause RowHammer bit ﬂips.
First, we show that TRR is an umbrella term for a variety of
mitigations deployed at the memory controller or in DRAM
chips. Second, we analyze common TRR implementations
in the memory controller (using timing side channels) and
in DRAM chips (using an FPGA-based memory controller,
SoftMC). Our analysis shows that the consumer CPUs we
test rely on in-DRAM TRR to mitigate the RowHammer
vulnerability and do not employ TRR at the memory controller
level. We discover that modern (in-DRAM) TRR implementa-
tions are generally vulnerable to many-sided RowHammer, a
new hammering strategy that hammers many (i.e., at least 3)
aggressor rows concurrently. Finally, we present TRRespass,
a black-box many-sided RowHammer fuzzer that, unaware of
the implementation of the memory controller or the DRAM
chip, can still ﬁnd sophisticated hammering patterns to mount
real-world attacks for many of the DDR4 DRAM modules
in the market. Our results provide evidence that the pursuit
of effective RowHammer mitigations must continue and that
the security by obscurity strategy of DRAM vendors puts
computing systems at risk for extended periods of time.
DISCLOSURE
We disclosed our new RowHammer attacks to all affected
parties in November of 2019. This triggered an industry-
wide effort
in addressing the issues raised in this paper.
Unfortunately, due to the nature of these vulnerabilities, it will
take time before effective mitigations will be in place. Further
developments on these vulnerabilities are tracked under CVE-
2020-10255. The paper remained conﬁdential until the public
disclosure date of March 10, 2020.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their
valuable feedback and Robin Webbers for helping us in our
analysis of LPDDR4(X) systems. This work was supported by
the European Union’s Horizon 2020 research and innovation
programme under grant agreements No. 786669 (ReAct) and
No. 825377 (UNICORE), by Intel Corporation through the
Side Channel Vulnerability ISRA, and by the Netherlands
Organisation for Scientiﬁc Research through grants NWO
639.023.309 VICI “Dowsing”, NWO 639.021.753 VENI “Pan-
taRhei”, and NWO 016.Veni.192.262. This paper reﬂects only
the authors’ view. The funding agencies are not responsible
for any use that may be made of the information it contains.
REFERENCES
[1] “DRAM Chip Market Share by Manufacturer Worldwide from 2011 to
2019,” https://www.statista.com/statistics/271726/global-market-share-
held-by-dram-chip-vendors-since-2010, 2019.
[2] “RAMBleed DRAM Vulnerabilities,” https://blogs.oracle.com/security/
https://arstechnica.com/information-technology/2019/06/researchers-
use-rowhammer-bitﬂips-to-steal-2048-bit-crypto-key/, 2019.
[4] Advanced Micro Devices, “AMD Generic Encapsulated Software Ar-
chitecture (AGESATM) Interface Speciﬁcation for Arch2008,” 2017.
[5] M. T. Aga et al., “When Good Protections Go Bad: Exploiting Anti-DoS
Measures to Accelerate Rowhammer Attacks,” in HOST, 2017.
rambleed, 2019.
[3] “Researchers Use RowHammer Bit Flips to Steal 2048-bit Crypto Key,”
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:55 UTC from IEEE Xplore.  Restrictions apply. 
760
[6] Apple Inc., “About the Security Content of Mac EFI Security Update
[41] JEDEC, “SPD Annex K - Serial Presence Detect (SPD) for DDR3
2015-001,” https://support.apple.com/en-us/HT204934, june 2015.
SDRAM Modules, v6,” 2014.
[7] Z. B. Aweke et al., “ANVIL: Software-Based Protection Against Next-
[42] JEDEC, “SPD Annex L - Serial Presence Detect (SPD) for DDR4
Generation Rowhammer Attacks,” in ASPLOS, 2016.
[8] K. S. Bains and J. B. Halbert, “Distributed row hammer tracking,” US
[9] K. S. Bains et al., “Row hammer refresh command,” US Patent
Patent 9 299 400B2, 2016.
9 236 110B2, 2016.
[10] K. S. Bains et al., “Method, apparatus and system for providing a
memory refresh,” US Patent 9 030 903B2, 2015.
[11] A. Barenghi et al., “Software-Only Reverse Engineering of Physical
DRAM Mappings for RowHammer Attacks,” in IVSW, 2018.
[12] S. Bhattacharya and D. Mukhopadhyay, “Curious Case of Rowhammer:
Flipping Secret Exponent Bits using Timing Analysis,” in CHES, 2016.
[13] S. Bhattacharya and D. Mukhopadhyay, “Advanced Fault Attacks in
Software: Exploiting the RowHammer Bug,” in Fault Tolerant Architec-
tures for Cryptography and Hardware Security, 2018.
[14] E. Bosman et al., “Dedup Est Machina: Memory Deduplication as an
Advanced Exploitation Vector,” in S&P, 2016.
[15] K. M. Brandl, “Data processor with memory controller for high relia-
bility operation and method,” US Patent 9 281 046B2, 2016.
[16] F. Brasser et al., “CAn’t Touch This: Software-only Mitigation against
Rowhammer Attacks targeting Kernel Memory,” in USENIX Sec., 2017.
[17] S. Carre et al., “OpenSSL Bellcore’s Protection Helps Fault Attack,” in
DSD, 2018.
[18] K. K. Chang et al., “Understanding Latency Variation in Modern DRAM
Chips: Experimental Characterization, Analysis, and Optimization,” in
SIGMETRICS, 2016.
[19] K. K. Chang et al., “Improving DRAM Performance by Parallelizing
Refreshes with Accesses,” in HPCA, 2014.
[20] K. K. Chang et al., “Low-cost Inter-linked Subarrays (LISA): Enabling
Fast Inter-subarray Data Movement in DRAM,” in HPCA, 2016.
[21] K. K. Chang et al., “Understanding Reduced-Voltage Operation in
Modern DRAM Devices: Experimental Characterization, Analysis, and
Mechanisms,” in SIGMETRICS, 2017.
[22] L. Cojocar et al., “Are We Susceptible to Rowhammer? An End-to-End
Methodology for Cloud Providers,” in S&P, 2020.
[23] L. Cojocar et al., “Exploiting Correcting Codes: On the Effectiveness
of ECC Memory Against Rowhammer Attacks,” in S&P, 2019.
[24] A. P. Fournaris et al., “Exploiting Hardware Vulnerabilities to Attack
Embedded System Devices: A Survey of Potent Microarchitectural
Attacks,” Electronics, 2017.
[25] P. Frigo et al., “Grand Pwning Unit: Accelerating Microarchitectural
Attacks with the GPU,” in S&P, 2018.
[26] Z. Greenﬁeld et al., “Method, apparatus and system for determining a
count of accesses to a row of memory,” US Patent 20 140 085 995A1,
2014.
[27] D. Gruss et al., “Another Flip in the Wall of Rowhammer Defenses,” in
S&P, 2018.
SDRAM Modules, v3,” 2015.
[43] JEDEC, “JESD209-4, LPDDR4X Speciﬁcation,” 2017.
[44] JEDEC, “JESD79-4B, DDR4 Speciﬁcation,” 2017.
[45] B. I. Jung et al., “Memory Device, Memory System, and Operating
[46] M. Kaczmarski, “Thoughts on Intel R(cid:3) Xeon R(cid:3) E5-2600 v2 Product
Family Performance Optimisation – component selection guidelines,”
2014.
Methods thereof,” US Patent 9 257 169B2, 2016.
[47] O. D. Kahn and J. R. Wilcox, “Method for Dynamically Adjusting a
Memory Page Closing Policy,” US Patent 6 799 241, 2004.
[48] S. Khan et al., “PARBOR: An Efﬁcient System-Level Technique to
Detect Data-Dependent Failures in DRAM,” in DSN, 2016.
[49] D. S. Kim and J. I. Kim, “Refresh control device and semiconductor
device including the same,” US Patent 9 818 469B1, 2017.
[50] Y. Kim et al., “A Case for Exploiting Subarray-Level Parallelism (SALP)
in DRAM,” in ISCA, 2012.
[51] Y. Kim et al., “Flipping Bits in Memory Without Accessing Them: An
Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.
[52] Y. Kim et al., “ATLAS: A Scalable and High-Performance Scheduling
Algorithm for Multiple Memory Controllers,” in HPCA, 2010.
[53] R. K. Konoth et al., “ZebRAM: Comprehensive and Compatible Soft-
ware Protection Against Rowhammer Attacks,” in OSDI, 2018.
[54] A. Kwong et al., “RAMBleed: Reading Bits in Memory Without
Accessing Them,” in S&P, 2020.
[55] M. Lanteigne, “A Tale of Two Hammers: A Brief Rowhammer Rowham-
mer Analysis of AMD vs. Intel.” ThirdIO Inc., 2016.
[56] M. Lanteigne, “How Rowhammer Could Be Used to Exploit Weaknesses
in Computer Hardware,” in SEMICON, 2016.
[57] D. Lee et al., “Adaptive-Latency DRAM: Optimizing DRAM Timing
for the Common-Case,” in HPCA, 2015.
[58] D. Lee et al., “Tiered-Latency DRAM: A Low Latency and Low Cost
DRAM Architecture,” in HPCA, 2013.
[59] D. Lee et al., “Simultaneous Multi-Layer Access: Improving 3D-Stacked
Memory Bandwidth at Low Cost,” TACO, 2016.
[60] D. Lee et al., “Design-Induced Latency Variation in Modern DRAM
Chips: Characterization, Analysis, and Latency Reduction Mechanisms,”
in SIGMETRICS, 2017.
[61] D. Lee et al., “Decoupled Direct Memory Access: Isolating CPU and
IO Trafﬁc by Leveraging a Dual-Data-Port DRAM,” in PACT, 2015.
[62] E. Lee et al., “TWiCe: Preventing Row-Hammering by Exploiting Time
Window Counters,” in ISCA, 2019.
[63] J.-B. Lee, “Green Memory Solution,” in Samsung Electronics, Investor’s
Forum, 2014.
[64] Lenovo, “Row Hammer Privilege Escalation,” https://support.lenovo.
com/us/en/product security/row hammer, March 2015.
[65] J. Lin, “Handling Maximum Activation Count limit and Target Row
[66] M. Lipp et al., “Nethammer: Inducing Rowhammer Faults Through
Network Requests,” arXiv preprint 1805.04956, 2018.
[67] J. Liu et al., “RAIDR: Retention-Aware Intelligent DRAM Refresh,” in
ISCA, 2012.
[68] J. Liu et al., “An Experimental Study of Data Retention Behavior in
Modern DRAM Devices: Implications for Retention Time Proﬁling
Mechanisms,” in ISCA, 2013.
[69] M. Majkowski, “Every 7.8μs your computer’s memory has a hic-
cup,” https://blog.cloudﬂare.com/every-7-8us-your-computers-memory-
has-a-hiccup/, 2018.
[70] Micron, “DDR4 SDRAM Datasheet,” p. 380, 2016.
[71] O. Mutlu, “The RowHammer Problem and Other Issues We May Face
as Memory Becomes Denser,” in DATE, 2017.
[72] O. Mutlu and J. S. Kim, “RowHammer: A Retrospective,” TCAD, 2019.
[73] Omron, “NY-series Industrial Box PC - Hardware User’s Man-
ual,” https://assets.omron.eu/downloads/manual/en/v6/w553 ny-series
industrial box pc users manual en.pdf, 2019.
[74] J.-B. Park, “Memory and Memory System including the same,” US
Patent 9 396 786B2, 2016.
[75] M. S. Park, “Memory Device to Alleviate the Effects of Row Ham-
mer Condition and Memory System Including the Same,” US Patent
9 685 240B1, 2017.
[76] P. Pessl et al., “DRAMA: Exploiting DRAM Addressing for Cross-CPU
Attacks.” in USENIX Sec., 2016.
[28] D. Gruss et al., “Rowhammer.js: A Remote Software-Induced Fault
Refresh in DDR4 SDRAM,” US Patent 9 589 606B2, 2017.
Attack in JavaScript,” in DIMVA, 2016.
[29] H. Hassan et al., “CROW: A Low-Cost Substrate for Improving DRAM
Performance, Energy Efﬁciency, and Reliability,” in ISCA, 2019.
[30] H. Hassan et al., “ChargeCache: Reducing DRAM Latency by Exploit-
ing Row Access Locality,” in HPCA, 2016.
[31] H. Hassan et al., “SoftMC: A Flexible and Practical Open-Source
Infrastructure for Enabling Experimental DRAM Studies,” in HPCA,
2017.
[32] N. Herath and Anders Fogh, “These are Not Your Grand Daddy’s CPU
Performance Counters,” in Black Hat Brieﬁngs, 2015.
[33] S. Hong et al., “Terminal Brain Damage: Exposing the Graceless
Degradation in Deep Neural Networks Under Hardware Fault Attacks,”
in USENIX Sec., 2019.
[34] D. Hwa Hong, “Smart Refresh Device,” US Patent 9 311 984B1, 2016.
[35] Intel Corp., “Intel R(cid:3) Xeon R(cid:3) Processor E5 v4 Product Family,” 2016.
Package
[36] Intel Corp.,
https://usermanual.wiki/Pdf/
(FSP)
CannonLakeFSPIntegrationGuide.58784693.pdf, 2017.
Intel
Guide,”
“CannonLake
Integration
Firmware
Support
[37] S. Islam et al., “SPOILER: Speculative Load Hazards Boost Rowham-
mer and Cache Attacks,” arXiv preprint 1903.00446, 2019.
[38] Y. Ito and Y. He, “Semiconductor Device,” US Patent 9 805 783B2, 2017.
[39] Y. Jang et al., “SGX-Bomb: Locking Down the Processor via RowHam-
mer Attack,” in SysTEX, 2017.
[40] JEDEC, “JESD209-4, LPDDR4 Speciﬁcation,” 2014.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:55 UTC from IEEE Xplore.  Restrictions apply. 
761
[77] D. Poddebniak et al., “Attacking Deterministic Signature Schemes Using
Fault Attacks,” in EuroS&P, 2018.
[78] R. Qiao and M. Seaborn, “A New Approach for Rowhammer Attacks,”
in HOST, 2016.
[79] K. Razavi et al., “Flip Feng Shui: Hammering a Needle in the Software
Stack,” in USENIX Sec., 2016.
[80] SAFARI Research Group, “SoftMC — GitHub Repository,” https://
github.com/CMU-SAFARI/SoftMC.
[81] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowhammer Bug
to Gain Kernel Privileges,” in Black Hat USA, 2015.
[82] V. Seshadri et al., “RowClone: Fast and Energy-Efﬁcient In-DRAM Bulk
Data Copy and Initialization,” in MICRO, 2013.
[83] V. Seshadri et al., “Ambit: In-Memory Accelerator for Bulk Bitwise
Operations Using Commodity DRAM Technology,” in MICRO, 2017.
[84] V. Seshadri et al., “Gather-Scatter DRAM: In-DRAM Address Transla-
tion to Improve the Spatial Locality of Non-Unit Strided Accesses,” in
MICRO, 2015.
[85] V. Seshadri and O. Mutlu, “In-DRAM Bulk Bitwise Execution Engine,”
arXiv:1905.09822, 2019.
[86] S. M. Seyedzadeh et al., “Counter-Based Tree Structure for Row
Hammering Mitigation in DRAM,” IEEE CAL, 2017.
[87] M. Son et al., “Making DRAM Stronger Against Row Hammering,” in
DAC, 2017.
[88] A. Tatar et al., “Defeating Software Mitigations against Rowhammer: A
Surgical Precision Hammer,” in RAID, 2018.
[89] A. Tatar et al., “Throwhammer: Rowhammer Attacks over the Network
and Defenses,” in USENIX ATC, 2018.
[90] TQ-Systems, “TQMx80UC User’s Manual,” https://www.tq-group.com/
ﬁledownloads/ﬁles/products/embedded/manuals/x86/embedded-modul/
COM-Express-Compact/TQMx80UC/TQMx80UC.UM.0102.pdf, 2020.
[91] V. van der Veen et al., “Drammer: Deterministic Rowhammer Attacks
on Mobile Platforms,” in CCS, 2016.
[92] V. van der Veen et al., “GuardION: Practical mitigation of DMA-based
rowhammer attacks on ARM,” in DIMVA, 2018.
[93] S. van Schaik et al., “RIDL: Rogue in-ﬂight data load,” in S&P, 2019.
[94] VersaLogic
Reference Manual,”
“Blackbird
Corp.,
BIOS
https://www.versalogic.com/wp-content/themes/vsl-new/assets/pdf/
manuals/MEPU 4462 4562 BRM.pdf, 2019.
[95] G. D. Wolff, “Apparatuses and methods for distributing row hammer
refresh events across a memory device,” US Patent 20 180 218 767A1,
2018.
[96] Y. Xiao et al., “One Bit Flips, One Cloud Flops: Cross-VM Row
Hammer Attacks and Privilege Escalation.” in USENIX Sec., 2016.
[97] T. Zhang et al., “Half-DRAM: A High-bandwidth and Low-power
DRAM Architecture from the Rethinking of Fine-grained Activation,”
in ISCA, 2014.
[98] Z. Zhang et al., “Triggering Rowhammer Hardware Faults on ARM: A
Revisit,” in ASHES, 2018.
APPENDIX A
TRR-COMPLIANT MEMORY
In Section IV, we deﬁne TRR-compliant memory. Here we
expand on this concept, also explaining the difference between
TRR-compliant and pTRR-compliant memory.
The MAC ﬁeld is a ﬁeld of one byte located at byte 41
on the SPD of a DDR3 module [41] and byte 7 on the SPD
of a DDR4 module [42]. This ﬁeld reports information about
the module’s resiliency to RowHammer. In the single byte
allocated to the MAC value inside the SPD [41], [42], only the
6 least signiﬁcant bits are used to store information about the
module’s limits in the form of MAC and tMAW (Figure 15),
where MAC is the Maximum Activate Count and tMAW is the
Maximum Activate Window, which simply acts as a multiplier
for MAC (Figure 15). The remaining two most signiﬁcant bits
are ﬂagged as reserved. As we mention in Section IV the MAC
value can take three conﬁgurations:
• unlimited, as value 0b1000;
• untested, as value 0b0000; or
• discrete values from 200K to 700K with steppings of
+100K—values 0b0001 to 0b0110.
(cid:6)(cid:7)(cid:8)
(cid:9)(cid:7)(cid:10)
(cid:11)(cid:7)(cid:12)
(cid:13)(cid:14)(cid:15)(cid:14)(cid:16)(cid:17)(cid:14)(cid:18)
(cid:4)(cid:1)(cid:2)(cid:5)
(cid:1)(cid:2)(cid:3)
Fig. 15: SPD’s MAC ﬁeld. Bit 7 needs to be set in order to enable
pTRR [46].
In one of our early experiments, we discovered that our
deﬁnition of TRR-compliant modules slightly diverges from
Intel’s deﬁnition of pTRR-compliant modules [46]. In fact,
we discovered that in order to enable pTRR, bit 7 (one of the
reserved bits) needs to be set. If not, regardless of the MAC and
tMAW values, the system treats the module as non-compliant.
This is likely a legacy feature which stems from the fact that
pTRR [46] was introduced before TRR became part of the
JEDEC standard [41].
APPENDIX B
TRRespass-ING PATTERNS
In Section VI-B, we explain the new n-sided hammering
patterns we use in our experiments. We now provide a more
general deﬁnition of these hammering patterns.
TRRespass randomizes two parameters: cardinality and
distance. Cardinality and distance together deﬁne a novel
hammering pattern that we refer to as (cid:7)n-sided | dist=d(cid:8)
RowHammer. The pattern consists of n
2 pairs of aggressor
rows, where the two aggressor rows in each pair are placed one
victim row apart (similar to double-sided RowHammer). The
distance d deﬁnes the number of rows between the aggressor
row pairs. For example, the (cid:7)4-sided | dist=3(cid:8) pattern contains
two aggressor row pairs (four aggressor rows in total), and the
two aggressor row pairs are three rows apart from each other.
The n-sided pattern, which we refer to throughout the paper,
is another example, where the distance between the aggressor
row pairs is one row.
Figure 16 shows the number of bit ﬂips that occur in module
A10 when we use the (cid:7)10-sided | dist=D(cid:8) hammering pattern
while sweeping the parameter D. We note that the number
of bit ﬂips increases and decreases as we vary D, reaching
its maximum at D = 12. This observation conﬁrms that the
distance between aggressor row pairs has a primary role in
assembling an effective hammering pattern.
Fig. 16: Bit ﬂips induced by (cid:3)10-sided | dist=D(cid:4) RowHammer-
pattern as a function of D. X-axis plots the distance between each
aggressor row pair. Y-axis reports the number of unique bit ﬂips.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:55 UTC from IEEE Xplore.  Restrictions apply. 
762