权限不足,这个时候我们添加两条ACL
‘DS-Replication-Get-Changes’ = 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2  
‘DS-Replication-Get-Changes-All’ = 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2
验证一下
这个时候我们进行dcsync
成功，也就是说如果我们只要能够在域内添加两台ACL，这两条ACL的受托人就具备Dcsync的权限。
那什么样子的用户才能具备添加 ACL的权限呢。我们通过adfind 查下(下一个系列LDAP篇将紧紧围绕adfind和admod展开)。
我们发现Exchange Windows Permissions,Exchange Trusted Subsystem都具备Write-ACL的权限。
其实Exchange Trusted Subsystem是Exchange Windows Permissions 组内成员
Exchange Trusted Subsystem的成员包括Exchange机器用户
前面啰嗦了一大堆，现在来总结下获取域管权限的思路。
由于Exchange机器在Exchange Trusted Subsystem组里面，Exchange Trusted Subsystem对域有Write-ACL权限，Exchange机器用户自然而然具备Write-ACL权限，我们在拿到Exchange机器的http请求的时候，可以将请求Relay到Ldap,然后由于Exchange机器用户具备Write-ACL权限，我们在域内给添加两条acl，acl的受托人可以是任意用户，
‘DS-Replication-Get-Changes’ = 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2  
‘DS-Replication-Get-Changes-All’ = 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2
从而使该用户具备Dcsync的权限。然后dump 域管的hash进行pth，dump kebtgt的hash进行黄金票据，等等。
  3. 服务端是否要求签名
我们Relay到的服务端是Ldap,前面咱们说过Ldap服务器的默认策略是协商签名。而不是强制签名。也就是说是否签名是有客户端决定的。服务端跟客户端协商是否签名。在这个漏洞里面发起的请求是http协议，http协议是不要求进行签名，这也就意味着我们什么都不用做，在这个漏洞中并不要求签名。
最后梳理一下8581第二种思路(获取域管权限)的打法:
这里面
攻击者:172.16.228.1
Exchange:172.16.228.133
域控:172.16.228.135
  1. 使用impacket监听端口进行等待连接
  2. 发起推送订阅指定所需的URL，Exchange. 服务器将尝试向这个URL发送通知
  3. Relay 到域控的Ldap 服务器并给普通用户daiker添加两条acl
  4. daiker进行Dcync
###  5\. CVE-2019-1040
该洞最早在于攻击者可以利用该漏洞可绕过NTLM MIC的防护机制。很经典的一次NTLM_RELAY
。相信如果从windows内网协议学习从第一篇文章追踪过来的，对每个利用环节都无比熟悉。本篇文章要做的内容就是把这些漏洞利用点给串起来。跟CVE-2018-8581一样，我们主要关注一下三个方面，将思路串起来。
  1. 怎么发起ntlm请求
这里利用到打印机漏洞，在[Windows内网协议学习NTLM篇之发起NTLM请求](https://www.anquanke.com/post/id/193493#h2-20),我们有简单提到这个问题，这个也不算漏洞，微软官方认为是正常业务，也不给出补丁。微软的spoolsv.exe注册了一个服务和若干个rpc。允许认证用户远程调用，其中RemoteFindFirstPrinterChangeNotificationEx这个函数运行传进一个unc路径，打印机服务就会去请求该unc路径。由于打印机是以system权限运行的，所以我们访问打印机rpc，迫使打印机服务向我们发起请求拿到的net-ntlm hash是机器用户hash。这个地方有两个利用点。一个是攻击Exchange
机器，迫使Exchange机器用户向我们发起请求，另外一个就是攻击域管机器，迫使域管机器用户向我们发起请求。
  2. 拿到ntlm 请求之后要做什么
考虑到都是机器用户发起的请求，机器用户并不能直接登录。因此不考虑Relay
到smb。我们考虑Relay到Ldap。当是Exchange机器用户发起的请求时，我们可以跟CVE-2018-8581，由于Exchange机器用户在Exchange
Trusted Subsystem组，Exchange Trusted Subsystem 有write-acl权限，可以给任意用户添加
Dcsync权限，这里不再赘述。
我们考虑另外一种情况，当发起者是域管用户的时候，这个时候别看是域管机器，但是权限真的并不高。首先，他并不在域管组里面。其次，他能控制的acl也并不多。在
[Windows内网协议学习NTLM篇之Net-NTLM利用](https://www.anquanke.com/post/id/194069#h3-7)里面我们介绍了三种通用的漏洞利用思路，前两种在这种情况下，在这里并不适用，在server2012r2，我们可以通过设置基于资源的约束委派。在域管机器属性msDS-AllowedToActOnBehalfOfOtherIdentity里面添加一条ace,可以让任何机器用户和服务用户可以控制该用户(NTLM发起者)，虽然不能直接登录，但是因为该机器是域管机器，我们可以进行dcync。
  3. 服务端是否要求签名
我们Relay到的服务端是Ldap,前面咱们说过Ldap服务器的默认策略是协商签名。而不是强制签名。也就是说是否签名是有客户端决定的。服务端跟客户端协商是否签名。不像CVE-2018-8581，发起的协议是HTTP协议，通过打印机漏洞，发起的请求是Smb协议的请求，这也意味着我们客户端默认是要求签名的。这也是这个漏洞的核心所在。前面的思路，在[Wagging
the Dog: Abusing Resource-Based Constrained Delegation to Attack Active
Directory](https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html)里面就已经提到了，作者在文章里面提及。
这个标识用于协商服务端是否进行签名，因为发起者是smb协议，默认这个标志位(即NTLMSSPNEGOTIATEALWAYSSIGN和NTLMSSPNEGOTIATE_SIGN)为1，服务端会选择进行签名，但是当我们修改数据包将Flag位置为0的话，微软又设计了一套MIC校验。就是下图这个。它使用带有会话密钥的HMAC-MD5保护所有三个NTLM消息的完整性。如果更改了NTLM消息的Flag位，则MIC将无效并且身份验证将失败。
有另外一个地方指示是否存在MIC(标志0x2表示该消息包括MIC)。如下图所示，我们称为msvAvFlag
但是msvAvFlag 在targetInfo里面。
由于在计算Reponse的时候，该targetInfo参与Reponse的计算。(关于Response计算的更多细节可以此参考[Windows内网协议学习NTLM篇之NTLM基础介绍](https://www.anquanke.com/post/id/193149#h2-8))
改变了msvAvFlag值，targetInfo的值随之发生那改变，生成的Reponse在检验的时候肯定会出错，NetNTLM响应将无效并且身份验证将失败。这个时候原文的作者也没有办法了。
但是前面已经说过了，该洞最早在于攻击者可以利用该漏洞可绕过NTLM MIC的防护机制。因此这个漏洞最核心的地方在于绕过了MIC的校验。
最新的绕过将NEGOTIATEKEYEXCHANGE和NEGOTIATE_VERSION位置为0，就不再检验MIC了。不像msvAvFlag那样参与Reponse的运算，因此置为0之后不仅不会校验mic，也不会使得Reponse校验出错。
所以这一步，需要将4个Flag
位(TLMSSPNEGOTIATEALWAYSSIGN，NTLMSSPNEGOTIATESIGN，NEGOTIATEKEYEXCHANGE，NEGOTIATEVERSION)置0。
最后梳理一下1040的打法:
这里面
攻击者:172.16.99.2
域控2012:172.16.99.12
域控2016:172.16.99.16
  1. 使用impacket监听445进行等待域控进行连接
  2. 使用打印机漏洞让域控连接我们的445(注意攻击的域控跟回连的LDAP所在的服务器不要在同一台域控)
  3. Relay 到域控dc2016的Ldap 服务器并添加基于资源的约束委派
  4. 发起win7$到dc2012的s4u，通过-impersonate参数模拟用户administrator的票证
  5. 使用administrator用户的票据登录域控。
###  6\. CVE-2019-1384
Ghost potato
这个漏洞绕过了MS08-068之后，用户不能relay回本机的限制。先来回顾下MS08-068是怎么防止Relay的。
主机A向主机B(访问\\\B)进行SMB认证的时候，将pszTargetName设置为cifs/B,然后在type
2拿到主机B发送Challenge之后，在lsass里面缓存(Challenge,cifs/B)。
然后主机B在拿到主机A的type 3之后，会去lsass里面有没有缓存(Challenge,cifs/b)，如果存在缓存，那么认证失败。
这种情况底下，如果主机B和主机A是不同的主机的话，那lsass里面就不会缓存(Challenge,cifs/B)。如果是同一台主机的话，那lsass里面肯定有缓存，这个时候就会认证失败。
然而这个缓存(Challenge,cifs/B)是有时效性的，这个时间是300秒，也就是说300秒后，缓存(Challenge,cifs/B)就会被清空，这个时候即使主机A和主机B是同一台主机，那么由于缓存已经被清除，那么去lsass里面肯定找不到缓存(Challenge,cifs/B)。
漏洞利用图如下所示。
shenaniganslabs也放出漏洞利用[poc](https://shenaniganslabs.io/files/impacket-ghostpotato.zip)。基于impacket进行修改。只实现的收到http协议的情况。其他协议大家可以自己实现。主要核心代码如下所示。会在sleep
315秒之后再发送type3。
poc的运行如下。
受害者机子的ip是172.16.228.134,攻击者IP是172.16.228.1
  1. 在172.16.228.1开启端口等待172.16.228.134的ntlm请求(作者的poc只支持http)
  2. 172.16.228.134向172.16.228.1发起http请求(为什么不用ip，请看前面的文章)
  3. 172.16.228.1将来自172.16.228.134的请求Relay回172.16.228.134本身的smb，exp的实现效果是在172.16.228.134启动目录上传个文件
## 0x03 引用
  * [Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory](https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html)
  * [Ghost Potato](https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html)