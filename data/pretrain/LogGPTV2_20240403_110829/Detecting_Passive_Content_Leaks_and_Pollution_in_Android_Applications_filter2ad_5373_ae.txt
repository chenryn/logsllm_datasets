result of start functions to determine whether the app is
vulnerable. The invocation return may well depend on the
internal logic of the app (e.g., the presence of a user ac-
count in MiTalk Messenger), which can be missed by our
prototype. To remedy this, we need to manually conﬁrm
them and infer potential side effects. Fortunately, our sys-
tem automatically generates intermediate results, i.e., inter-
method function call graph and intra-method control-ﬂow
graph, which greatly speed up our manual analysis. Nev-
ertheless, there is still a need for us to explore innovative
ways to overcome these limitations and achieve better au-
tomation.
7 Related Work
Smartphone privacy has recently attracted lots of atten-
tions. For example, earlier researches identiﬁed worrisome
privacy leaks among mobile apps available on both An-
droid [22] and iOS [21] platforms. A few systems have
been accordingly proposed to mitigate this problem by re-
vising or extending the framework for better privacy protec-
tion. Examples include Apex [34], MockDroid [13], TISSA
[46], AppFence [30], Dr. Android [31] and Aurasium [40].
Speciﬁcally, they extend the Android framework or repack-
age the app to provide ﬁner-grained privacy control over an
app’s access to potentially sensitive information at runtime.
Most recently, research results show that in-app adver-
tisement libraries [26] can also actively leak private infor-
mation. To mitigate that, AdDroid [35] separates the ad-
vertisement functionality from host apps by introducing a
new set of advertising APIs and permissions. AdSplit [38]
moves the advertisement code into another process. More-
over, mobile malware may also aggressively collect per-
sonal information and upload to remote servers [44]. Our
work differs from earlier efforts in identifying and quantify-
ing vulnerabilities that allow for passive (instead of active)
information leaks.
In addition, another line of research aims to deal with
the classic confused-deputy problem or permission leaks
[29] on Android. Examples include ComDroid [17] and
Woodpecker [27], which employ static analysis to identify
such problems in either third-party apps or preloaded apps.
QUIRE [20] and Felt et al. [25] propose solutions to mit-
igate them by checking IPC call chains to ensure unautho-
rized apps cannot invoke privileged operations. Bugiel et
al. [15] proposes a run time monitor to regulate commu-
nications between apps. Our work is similar to them in
exposing possible vulnerability present in unprotected An-
droid components. However, our work differs from them by
focusing on passively leaking or manipulating internal data
managed by apps, not invoking privileged operations with-
out permission. A more recent system CHEX [33] takes a
static method to detect component hijacking vulnerability
that can be exploited to gain unauthorized access to pro-
tected or private resources. Although CHEX can be used
to statically determine potential leak paths from start to
terminal functions, it can not generate the inputs auto-
matically and can not dynamically conﬁrm the potentially
vulnerable apps. Also our detailed break-down of leaked
and polluted content reﬂects the severity of the problem and
practicality of our system.
Beyond each individual mobile app, researchers also aim
to measure or study overall security of existing apps in mar-
ketplaces. For example, Enck et al. [23] studies 1, 100 top
free apps to better understand the security and privacy char-
acteristics of existing apps. Felt et al. surveys 46 malware
samples from three different mobile platforms to analyze
their incentives, and discuss possible defenses. Stowaway
[24] is proposed to understand over-privileged apps, which
request additional permissions beyond their normal func-
tionalities. DroidMOSS [43] and PiggyApp [42] aim to de-
tect repackaged apps in existing mobile app marketplaces.
DroidRanger [45] and RiskRanker [28] are two systems that
are designed to detect malicious apps in existing Android
markets. MalGenome [44] reports a relatively large collec-
tion of Android malware and presents various characteris-
tics of them, which will be helpful to guide the develop-
ment of effective anti-malware solutions. Peng et al. [36]
use probabilistic generative models to rank the risks of An-
droid apps. Our work is different by primarily focusing on
one built-in Android component i.e., content provider, and
studying the prevalence of vulnerable apps in current An-
droid markets.
In parallel to the above efforts, researchers are also ap-
plying security technologies used on desktops into smart-
phones (e.g., to achieve better isolation or defense against
mobile malware). For example, L4Android [32] and Cells
[11] take a virtualization-based approach to isolate differ-
ent virtual phones. In other words, multiple virtual smart-
phones can run on one single physical phone side-by-side
with necessary isolation. Also related, MoCFI [18] is a
framework to enforce control-ﬂow integrity in iOS apps at
run time without requiring access to the app’s source code.
Similar to the systems used for malware analysis on desk-
top, DroidScope [41] is a system that can be used to analyze
Android malware.
To assess the prevalence of vulnerabilities reported in
this paper, our system shares a similar spirit with earlier
systems that are designed to detect vulnerabilities in desk-
top software. For example, BitBlaze [39] is a binary anal-
ysis framework upon which practical tools can be devel-
oped to discover buffer-overﬂow bugs [37] or detect zero-
day exploits [14]. KLEE [16] is a symbolic execution tool
that can automatically generate test cases with high cov-
erage. The generated test cases can be used to detect po-
tential bugs existed in programs. AEG [12] is designed to
automatically generate exploits for control-ﬂow hijacking
attacks. Our system is designed to achieve similar goals for
automatically discovering and even generating the inputs
(or exploits) to trigger these vulnerabilities. However, our
key contributions are not in the tool development itself, but
in identifying these two vulnerabilities and measuring their
prevalence in existing apps. Moreover, certain differences
in the running environments as well as targeted applications
between these systems and ours lead to unique considera-
tions in our system design and implementation (Section 3).
From another perspective, Java PathFinder [5] is a model
checking tool proposed to test Java programs with a custom
Java virtual machine. Our system is developed to analyze
Dalvik bytecode, which is substantially different from Java
bytecode. Nevertheless, these proposed techniques are ap-
plicable to enhance our tool for better automation and cov-
erage.
8 Conclusion
In this paper, we present two types of vulnerabilities that
are rooted in the unprotected content providers of vulnera-
ble apps. The ﬁrst one, i.e., passive content leak, allows
private information managed by a vulnerable app to be pas-
sively leaked to any other app without any dangerous per-
mission; the second one, i.e., content pollution, allows
for unauthorized changes on the internal data managed by
vulnerable apps. To assess the extent of these two vulnera-
bilities, we analyze 62, 519 apps collected in February 2012
from various Android markets. Our results show that among
these apps, 1,279 (2.0%) and 871(1.4%) of them are suscep-
tible to these two vulnerabilities, respectively. Also we ﬁnd
that among the vulnerable apps, 435 (0.7%) and 398 (0.6%)
of them are downloaded from Google Play. The informa-
tion being passively leaked ranges from personal contacts,
login credentials, call logs, SMS messages, browser histo-
ries, etc. Also, the unauthorized manipulation of vulnerable
apps’ data can be leveraged to block certain phone calls and
SMS messages from speciﬁc numbers chosen by attackers
or download unwanted apps for installation. The presence
of a large number of vulnerable apps as well as a variety
of private data for leaks and pollution reﬂect the severity of
these two vulnerabilities.
Acknowledgements We would like to thank our shep-
herd, David Wagner, and the anonymous reviewers for their
comments that greatly helped improve the presentation of
this paper. We also want to thank Michael Grace, Wu Zhou,
Minh Q. Tran, Lei Wu and Kunal Patel for the helpful dis-
cussion. This work was supported in part by the US Na-
tional Science Foundation (NSF) under Grants 0855297,
0855036, 0910767, and 0952640. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this ma-
terial are those of the authors and do not necessarily reﬂect
the views of the NSF.
References
[1] Android 4.2 APIs. http://developer.android.
com/about/versions/android-4.2.html.
[2] App Store (iOS).
http://en.wikipedia.org/
wiki/App_Store_(iOS).
[3] Gartner Says Worldwide Smartphone Sales Soared in Fourth
Quarter of 2011 With 47 Percent Growth. http://www.
gartner.com/it/page.jsp?id=1924314.
[4] Google Play. http://en.wikipedia.org/wiki/
Google_Play.
[5] Java PathFinder.
gov/trac/jpf.
http://babelfish.arc.nasa.
[6] Number of Web users in China Hits 513 Million. http://
latimesblogs.latimes.com/technology/
2012/01/chinese-web-users-grow-to-513-
million.html.
[7] Sina Weibo.
http://en.wikipedia.org/wiki/
Sina_Weibo.
[8] The Risk You Carry in Your Pocket. https://media.
blackhat.com/bh-ad-10/Nils/Black-Hat-
AD-2010-android-sandcastle-slides.pdf.
[9] Your
Apps
Are
Watching
You.
http://online.wsj.com/article/
SB10001424052748704694004576020083703574602.
html.
[10] ZeuS-in-the-Mobile - Facts and Theories. http://www.
securelist.com/en/analysis/204792194/
ZeuS_in_the_Mobile_Facts_and_Theories.
[11] J. Andrus, C. Dall, A. Van’t Hof, O. Laadan, and J. Nieh.
Cells: A Virtual Mobile Smartphone Architecture. In Pro-
ceedings of the 23rd ACM Symposium on Operating Systems
Principles, SOSP, 2011.
[12] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley.
AEG: Automatic Exploit Generation . In Proceedings of the
18th Annual Symposium on Network and Distributed System
Security, NDSS, 2011.
[13] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. Mock-
Droid: Trading Privacy for Application Functionality on
Smartphones.
In Proceedings of the 12th International
Workshop on Mobile Computing System and Applications,
HotMobile, 2011.
[14] D. Brumley, J. Newsome, and D. Song. Sting: an end-to-end
self-healing system for defending against internet worms. In
Book chapter in ”Malware Detection and Defense”, Editors
Christodorescu, Jha, Maughn, Song, 2007.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
Sadeghi, and B. Shastry.
Towards Taming Privilege-
Escalation Attacks on Android. In Proceedings of the 19th
Annual Symposium on Network and Distributed System Se-
curity, NDSS, 2012.
[16] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and
Automatic Generation of High-Coverage Tests for Complex
Systems Programs . In Proceedings of the 8th USENIX Sym-
posium on Operating Systems Design and Implementation,
OSDI, 2008.
[17] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. An-
alyzing Inter-Application Communication in Android.
In
Proceedings of the 9th Annual International Conference on
Mobile Systems, Applications, and Services, MobiSys, 2011.
[18] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz,
R. Hund, S. Nurnberger, and A.-R. Sadeghi. MoCFI: A
Framework to Mitigate Control-Flow Attacks on Smart-
phones. In Proceedings of the 19th Annual Symposium on
Network and Distributed System Security, NDSS, 2012.
[19] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy.
Privilege escalation attacks on android. In Proceedings of
the 13th international conference on Information security,
ISC, 2010.
[20] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
QUIRE: Lightweight Provenance for Smart Phone Operat-
ing Systems. In Proceedings of the 20th USENIX Security
Symposium, USENIX Security, 2011.
[21] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: De-
tecting Privacy Leaks in iOS Applications. In Proceedings
of the 18th Annual Symposium on Network and Distributed
System Security, NDSS, 2011.
[22] W. Enck, P. Gilbert, B.-g. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. TaintDroid: An Information-Flow
Tracking System for Realtime Privacy Monitoring on Smart-
phones. In Proceedings of the 9th USENIX Symposium on
Operating Systems Design and Implementation, USENIX
OSDI, 2010.
[23] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A
Study of Android Application Security. In Proceedings of
the 20th USENIX Security Symposium, USENIX Security,
2011.
[24] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. An-
droid Permissions Demystiﬁed. In Proceedings of the 18th
ACM Conference on Computer and Communications Secu-
rity, CCS, 2011.
[25] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In Pro-
ceedings of the 20th USENIX Security Symposium, USENIX
Security, 2011.
[26] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe
Exposure Analysis of Mobile In-App Advertisements.
In
Proceedings of the 5th ACM Conference on Security and
Privacy in Wireless and Mobile Networks, WiSec, 2012.
[27] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic De-
tection of Capability Leaks in Stock Android Smartphones.
In Proceedings of the 19th Annual Symposium on Network
and Distributed System Security, NDSS, 2012.
[28] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang.
RiskRanker: Scalable and Accurate Zero-day Android Mal-
ware Detection.
In Proceedings of the 10th International
Conference on Mobile Systems, Applications and Services,
MobiSys, 2012.
[29] N. Hardy. The Confused Deputy: (or why capabilities might
have been invented). ACM SIGOPS Operating Systems Re-
view, 22, October 1998.
[30] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall.
These Aren’t the Droids You’re Looking For: Retroﬁtting
Android to Protect Data from Imperious Applications.
In
Proceedings of the 18th ACM Conference on Computer and
Communications Security, CCS, 2011.
[31] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy,
J. S. Foster, and T. Millstein. Dr. android and mr. hide: Fine-
grained permissions in android applications. In ACM CCS
Workshop on Security and Privacy in Smartphones and Mo-
bile Devices, CCS-SPSM, 2012.
[32] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and
M. Peter. L4Android: A Generic Operating System Frame-
work for Secure Smartphones.
In Proceedings of the 1st
Workshop on Security and Privacy in Smartphones and Mo-
bile Devices, CCS-SPSM, 2011.
[33] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Stati-
cally vetting android apps for component hijacking vulner-
abilities.
In Proceedings of the 19th ACM Conference on
Computer and Communications Security, CCS, 2012.
[34] M. Nauman, S. Khan, and X. Zhang. Apex: Extending
Android Permission Model and Enforcement with User-
Deﬁned Runtime Constraints.
In Proceedings of the 5th
ACM Symposium on Information, Computer and Commu-
nications Security, ASIACCS, 2010.
[35] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid:
Privilege Separation for Applications and Advertisers in An-
droid.
In Proceedings of the 7th ACM Symposium on In-
formation, Computer and Communications Security, ASI-
ACCS, 2012.
[36] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju,
C. Nita-Rotaru, and I. Molloy. Using probabilistic genera-
tive models for ranking risks of android apps. In Proceed-
ings of the 19th ACM Conference on Computer and Commu-
nications Security, CCS, 2012.
[37] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-
extended symbolic execution on binary programs. In Pro-
ceedings of the ACM/SIGSOFT International Symposium on
Software Testing and Analysis, ISSTA, 2009.
[38] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit: Separating
smartphone advertising from applications. In Proceedings of
the 21th USENIX Security Symposium, USENIX Security,
2012.
[39] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G.
Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena.
BitBlaze: A new approach to computer security via binary
analysis. In Proceedings of the 4th International Conference
on Information Systems Security, ICISS, 2008.
[40] R. Xu, H. Saidi, and R. Anderson. Aurasium: Practical Pol-
icy Enforcement for Android Applications. In Proceedings
of the 21th USENIX Security Symposium, USENIX Security,
2012.
[41] L. K. Yan and H. Yin. DroidScope: Seamlessly Recon-
structing the OS and Dalvik Semantic Views for Dynamic
Android Malware Analysis.
In Proceedings of the 21th
USENIX Security Symposium, USENIX Security, 2012.
[42] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast,
scalable detection of ‘piggybacked’ mobile applications. In
Proceedings of the 3rd ACM Conference on Data and Appli-
cation Security and Privacy, CODASPY, 2013.
[43] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. DroidMOSS: De-
tecting Repackaged Smartphone Applications in Third-Party
Android Marketplaces. In Proceedings of the 2nd ACM Con-
ference on Data and Application Security and Privacy, CO-
DASPY, 2012.
[44] Y. Zhou and X. Jiang. Dissecting Android Malware: Char-
acterization and Evolution. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy, IEEE S&P, 2012.
[45] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get
off of My Market: Detecting Malicious Apps in Ofﬁcial and
Alternative Android Markets.
In Proceedings of the 19th
Annual Symposium on Network and Distributed System Se-
curity, NDSS, 2012.
[46] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh. Tam-
ing Information-Stealing Smartphone Applications (on An-
droid). In Proceedings of the 4th International Conference
on Trust and Trustworthy Computing, TRUST, 2011.