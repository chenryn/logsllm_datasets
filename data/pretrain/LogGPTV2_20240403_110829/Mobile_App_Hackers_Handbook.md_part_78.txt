try/catch exception-handling extensively around APIs to which access can be controlled, especially if
functionality in the app degrades gracefully if access is not granted.
By taking this defensive access control–aware approach to development you can ensure your application will
continue to provide the user experience your users expect. If you don’t, a chance exists that when used in more
risk-aware organizations or when configured by more risk-adverse users that your application will simply
generate an unhandled exception and crash.
Memory Cleaning
In BlackBerry OS the possibility exists to have memory (RAM) cleaned of sensitive information in certain high-
security situations such as during certain operations or after a period of time
(http://docs.blackberry.com/en/smartphone_users/deliverables/36022/About_memory_cleaning_61_1587246_11.jsp
This memory cleaning can be extremely useful if you want to guard against sophisticated threat actors and
ensure that sensitive cleartext information of cryptographic key material does not persist when the device is not
in active use.
To understand how to react to a memory cleaning event in your application you first need to understand when
they typically occur:
When you insert your smartphone in a holster
When you do not use your smartphone for a specified period of time
When you synchronize with your computer
When you change the time or the time zone for your smartphone
When you lock your smartphone
The memory-cleaning feature is typically either configured by the organization’s administration through a BES
management policy or alternatively by the user
(http://docs.blackberry.com/en/smartphone_users/deliverables/
36022/Turn_on_memory_cleaning_61_1720942_11.jsp). It is also important to remember that by default these
memory cleaning callbacks will not be called if the system is not configured. If you want to ensure sensitive
memory is cleaned, then you’ll have to implement your own event-driven or inactivity- driven solution.
If you want to support memory cleaning in your app using the OS support method then you need to implement
a listener using (http://www.blackberry
.com/developers/docs/7.0.0api/net/rim/device/api/memorycleaner/MemoryCleanerDaemon.html):
net.rim.device.api.memorycleaner.MemoryCleanerDaemon
Specifically, you need to implement a listener via one of the following methods,
addListener(MemoryCleanerListener listener)
or:
addListener(MemoryCleanerListener listener, boolean enable)
When invoking either of these methods you pass an implementation of the interface MemoryCleanerListener
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/memorycleaner/MemoryCleanerListener
.html) to them. By calling these methods you start the memory-cleaning daemon if it is not already started upon
invocation. Then within your interface implementation your responsibility is to securely erase any sensitive
information. The best strategies are to
Use zero sensitive information in the actual variable or object, being careful to not work on copies.
Use the LowMemoryManager class and specifically the markAsRecoverable method to prioritize recovery by the
Java Virtual Machine garbage collection
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/lowmemory/LowMemoryManager.html
A final note with regard to memory cleaning is that you may want to build some form of malicious activity
detection within your application and then invoke a memory clean programmatically via the previous registered
listeners. If that is the case then you can do so by invoking net.rim.device.api
.memorycleaner.MemoryCleanerDaemon.cleanAll(), which causes the process to begin.
Controlling File Access and Encryption
BlackBerry file storage is broken down conceptually into two stores
(http://docs.blackberry.com/en/developers/deliverables/17952/Storing_files_in_the_file_system_1219757_11.jsp
Internal device storage, such as those residing under file:///store/
External device storage, such as those residing under file:///SDCard
File access control and encryption on a BlackBerry device can typically occur via a number of possible routes:
BES or user-configured policy
(http://docs.blackberry.com/en/smartphone_users/deliverables/36023/Turn_on_encryption_61_1571288_11
.jsp) is encrypted using one of three combinations: device key, device password, or device key and device
password. In this configuration you don’t need to do anything and your application will automatically benefit
from the device’s security settings.
Encrypted due to the use of controlled access. BlackBerry notes a caveat with this feature saying the
encryption key will be written to the root of the storage device that the encrypted file is on—that is,
removable SD storage—and that it does not apply to the internal storage (http://www
.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/io/file/ExtendedFileConnection.html).
Encrypted due to the use of DRM forward locking, thus encrypting the device and locking it to the device in
question.
Most developers will not want to override the user’s preferences in regard to the encryption of files. However, if
you do want to implement controlled access then take the caveat noted in the previous list into consideration
with regard to where the key still exists in the case of capable threat actors and the fact it won’t apply to internal
storage. By far the most secure method is the use of DRM forward locking; however, carefully consider the
impact on user experience. Your users won’t be able to move files between devices.
The following methods enable developers to have control over file encryption methods:
Controlled access—Achieved by calling the setControlledAccess method to set the code signing key to
yours in the net.rim.device.api.io.file .ExtendedFileConnection interface.
DRM forward locking—Achieved by calling the enableDRMForwardLock() method in the
net.rim.device.api.io.file.ExtendedFileConnection interface by casting the Connector object from
javax.microedition.io.Connector.open
(http://www.blackberry.com/developers/docs/7.0.0api/javax/microedition/io/Connector.html).
Before deploying access control and/or file encryption, note that there can be, albeit minimal on modern
devices, a performance impact. Also obviously with any extra processing over and above the base OS and
depending on usage, there could potentially be a battery life impact. As a result, a suggestion is that you
measure performance when enabling access control or encryption to understand these impacts.
SQLite Database Encryption
BlackBerry has native support within its Java API since 5.x for SQLite databases. These databases can be created
in memory or on persistent storage. Persistent storage may be physical internal to the device or a removable SD
card. For these persistent SQLite databases a number of possible security options can be specified by
DatabaseSecurityOptions
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/database/DatabaseSecurityOptions
.html):
The following list covers the BlackBerry OS database security options:
Not encrypted and accessible from any application (insecure).
Encrypted and accessible from any application but only on this device.
Encrypted and accessible only from applications that are signed with the code-signing key that created the
database but only on this device (secure).
The DatabaseSecurityOptions are passed either at the point of creation or at the point of encryption using one
of the methods in the DatabaseFactory class
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/database/DatabaseFactory.html):
create(String id, DatabaseSecurityOptions securityOptions)
create(String id, DatabaseSecurityOptions securityOptions,
DatabaseOptions
databaseOptions)
create(URI fileURI, DatabaseSecurityOptions securityOptions)
create(URI fileURI, DatabaseSecurityOptions securityOptions,
DatabaseOptions databaseOptions)
You can also encrypt and decrypt existing databases on an as-needed basis through the clearly named functions
in the DatabaseFactory class.
If you intend to access these SQLite databases over USB while the device is mounted in mass storage mode, say,
via a companion application on a PC, you may not be able to utilize database encryption and thus access control
—that is, unless you implement your own IPC mechanism between the device-based app and the PC application
using the USB port API (net.rim.device.api .system.USBPort).
Persistent Store Access Control and Encryption
The persistent store on a BlackBerry is an internal storage mechanism and format used for storing Java objects
that are not directly accessible as traditional files via any means. BlackBerry describes it as follows:
The persistent store provides a means for objects to persist across device resets. A persistent object consists
of a key-value pair. When a persistent object is committed to the persistent store, that object’s value is stored
in flash memory via a deep copy. The value can then be retrieved at a later point in time via the key.
http://www.blackberry.com/developers/docs/ 7.0.0api/net/rim/device/api/system/
PersistentStore.html
This feature comes with two notable optional security features:
Access control (controlled access in BlackBerry vernacular) via net.rim
.system.device.api.system.ControlledAccess (http://www.blackberry
.com/developers/docs/7.0.0api/net/rim/device/api/system/ControlledAccess.html).
Encryption (content protection in BlackBerry vernacular) via net
.rim.device.api.system.PersistentContent (http://www.blackberry
.com/developers/docs/6.0.0api/net/rim/device/api/system/PersistentContent.html).
Content protection–provided encryption will only be enabled for an application if the following conditions are
met: (http://developer.blackberry .com/bbos/java/documentation/content_protection_intro_1981828_11
.html):
The device has a password set.
A BES or user-configured policy has been applied enabling it.
The app subscribes and uses the content protection framework.
As with file encryption discussed earlier in this chapter, developers will unlikely want to override the user’s
preferences in regard to data at rest. This should be especially true in the case of the persistent store because no
alternate way exists to access its contents. However, the use of ControlledAccess should be considered. Without
it a threat actor who can reverse-engineer your app can extract the ‘key’ (not be confused with an encryption
key) and then simply use PersistentStore.getPersistentObject(key) to obtain access and thus read or write
any contents.
Runtime Store Access Control
The runtime store on a BlackBerry is an internal storage mechanism and format used for storing Java objects
that are not directly accessible as traditional files via any means yet are not persistent. BlackBerry describes it as
follows:
Provides a central location for applications to share information.
The store is not persistent. If the device resets, then information stored in the store is lost.
http://www.blackberry.com/developers/docs/7.0.0api/ net/rim/device/api/system/RuntimeStore.html
Unlike with the persistent store no need should exist to encrypt the contents of the runtime store. However, as
with the persistent control, a ControlledAccess you should use wrapper
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/system/ControlledAccess.html).
Randomness Sources
The BlackBerry API provides two primary randomness APIs, one of which is better quality than the other. These
randomness APIs are
java.util.Random (http://www.blackberry.com/developers/docs/7.0.0api/java/util/Random.html)
net.rim.device.api.crypto.RandomSource
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/crypto/RandomSource .html)
The second of these two is the one you should use if you require a cryptographically strong randomness source
and don’t have a specific preference for an algorithm.
On the other hand if you do have a specific pseudo-random algorithm that you prefer then there is the
net.rim.device.api.crypto.PseudoRandomSource interface that the following classes implement (note all under
the net.rim .device.api.crypto namespace):
AESCTRDRBGPseudoRandomSource—Implements a deterministic random bit generator (DRBG) using an
approved AES block cipher algorithm in counter mode. This DRBG uses a 128-bit security strength.
ARC4PseudoRandomSource—Implements a pseudo-random number generator (PRNG) that uses the Alleged
RC4 (ARC4) algorithm to expand a finite length seed into an arbitrarily long stream of pseudo-random bytes.
BlackBerry implemented ARC4 as described in “Applied Cryptography,” by Bruce Schneier, in Section 17.1
(published 1996).
CTRPseudoRandomSource—Implements a symmetric key block cipher in Counter mode to provide a sequence
of pseudo-random bytes. CTR mode is defined in FIPS SP 800-38A.
FIPS186PseudoRandomSource—Implements the pseudo-random number generator as found in FIPS 186-2.
OFBPseudoRandomSource—Uses a symmetric key block cipher in Output Feedback mode to provide a sequence
of pseudo-random bytes. OFB mode is defined in FIPS 81.
P1363KDF1PseudoRandomSource—Implements the key derivation function 1 (KDF1) found in the main section
of P1363. The version BlackBerry implemented is from the draft 13 (“d13”) P1363 document.
PKCS1MGF1PseudoRandomSource—Implements the PKCS1 mask generation function (MGF1), using a digest to
expand a finite length seed into an arbitrarily long stream of pseudo-random bytes.
PKCS5KDF1PseudoRandomSource—Not recommended for use!
PKCS5KDF2PseudoRandomSource—Implements PKCS #5 key derivation function (KDF) 2 pseudo-random
number generation. BlackBerry implemented the PKCS5 KDF2 as per PKCS #5 version 2.0 (March 1999).
RFC2631KDFPseudoRandomSource—Implements the KDF found in RFC 2631, which is based upon the KDF in
X9.42.
SPKMKDFPseudoRandomSource—Implements the KDF found in RFC 2025 but comes with caveats on the ability
to call multiple times.
X942KDFPseudoRandomSource—Implements the KDF found in ANSI X9.42.
X963KDFPseudoRandomSource—Implements the KDF found in ANSI X9.63.
Unless you have a specific requirement for any of these algorithms, net
.rim.device.api.crypto.PseudoRandomSource should suffice for your day-to-day use.
SSL, TLS Certificate, and Public Key Pinning in OS 7x and Earlier Legacy Java
Applications
To mitigate rogue or compromised certificate authorities or intermediaries issuing forged SSL or TLS certificates
for a domain/service that chain up and thus validate correctly, you may want to perform certificate or public key
pinning. If you’re not familiar with the topic, look for the excellent write-up on the OWASP site on the attack
and the defense concepts (https://www.owasp.org/index .php/Certificate_and_Public_Key_Pinning).
On BlackBerry, a certificate object (http://www.blackberry.com/developers/
docs/7.0.0api/javax/microedition/pki/Certificate.html) for a TLS connection is retrieved by calling
net.rim.device.api.crypto.tls .tls10.TLS10Connection.getSecurityInfo() (http://www.blackberry
.com/developers/docs/7.0.0api/net/rim/device/api/crypto/tls/tls10/TLS10Connection.html#getSecurityInfo()
and this returns a J2ME-specified SecurityInfo
(http://www.blackberry.com/developers/docs/7.0.0api/javax/microedition/io/SecurityInfo.html) object
that exposes the getServerCertificate() method. The certificate object is the J2ME-defined type and not the
X.509 BlackBerry-defined type (http://www.blackberry
.com/developers/docs/7.0.0api/net/rim/device/api/crypto/certificate/x509/X509Certificate.html), the
impact of which is described shortly. The J2ME incarnation of a certificate exposes the following Distinguished
Name (DN) attributes for X.509 server certificates:
Common name
Surname
Country name
Locality name
State/province name
Street address
Organization name
Organization business unit
E-mail address
In addition the following methods of use are exposed and provide further information:
getIssuer()
getSerialNumber()
getVersion()
However, no method is exposed that will provide the server certificate’s Subject Public Key Information
(although this information is annoyingly present in the BlackBerry X.509 incarnation). As a result your ability
to pin anything strong is somewhat limited and could potentially be subverted if a threat actor has control of an
intermediary certificate authority signing certificate.
To do certificate/public key pinning on BlackBerry OS properly, you need to use the Legion of the Bouncy Castle
(https://www.bouncycastle.org) implementation of TLS, which exposes all the required elements. You can see
a good example of how to use Bouncy Castle to get the X509 certificate information for a particular connection
in the article by Bored Wookie entitled, “How to Use Bouncy Castle Lightweight API’s TLSClient”
(http://boredwookie.net/index .php/blog/how-to-use-bouncy-castle-lightweight-api-s-tlsclient/). In the
example provided in the article, instead of calling the getEncoded() method you would call the
getSubjectPublicKeyInfo() method from the Bouncy Castle API
(https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cert/X509CertificateHolder.html).
You are then able to retrieve the required Subject Public Key Information and thus pin your application to it.
Finally, before embarking on certificate pinning, recognizing the potential operational overhead is important.
For example, in the most tightly coupled deployed app, each time the certificate is updated on the server the app
will need to be updated. This can be extremely difficult and, given general user upgrade apathy, causes all
manner of service or support issues. So although we have seen situations where certificate pinning has
successfully mitigated attacks against the most sophisticated threat actors, unless you are a major service
provider, government-orientated service, or financial institution, it is unlikely the additional overhead is
proportionate to the risk you face.
Defending Against Module Squatting
There exists a theoretical attack on BlackBerry where someone “squats” on the name that your app will retrieve
a handle from via CodeModuleManager .getModuleHandle()
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/system/CodeModuleManager.html#getModuleHandle()
at a later point. The same attack is also possible when using CodeModuleManager .getModuleHandleForClass().
However, this attack is a little more unlikely if the class is packaged by default with your app; however, if it isn’t
and is an optional installation, then the same risk applies.
You might be using modules in a dynamic manner similar to this in the case of certificate pinning. If so, you
might choose to deploy the public key to the server in its own module to allow modular updating.
As a result if you are using either of these methods to dynamically load modules you produce, verify the signing
key of the module before use. You can do this verification using the
ControlledAccess.verifyCodeModuleSignature method
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/system/ControlledAccess.html#verifyCodeModuleSignature
(int, net.rim.device.api.system.CodeSigningKey)). This type of misuse of modules has been seen in public in
the past by the firmware modding community. They used to rely on the ability to mismatch versions or replace
modules entirely. As a result, robust checking around of all of these areas can be prudent using the methods
exposed by CodeModuleManager
(http://www.blackberry.com/developers/docs/7.0.0api/net/rim/device/api/system/CodeModuleManager.html),
including timestamps, versions, vendors, and so on.
Obfuscation
Although it’s not strictly security related, if you have lots of sensitive intellectual property embedded in your
application then due to the use of Java you may want to complicate the disassembly and thus recovery of it.
Although obfuscation won’t stop determined or skilled individuals, it can stop the casual tinkering. You can use
a variety of code/class obfuscators to protect BlackBerry Java applications.
BlackBerry WebWorks Security on BlackBerry OS 7 or Lower
BlackBerry WebWorks is best described by BlackBerry itself:
Provides a central location for applications to share information.
When you hear the words BlackBerry WebWorks, think HTML5, JavaScript, and CSS. Essentially, a
BlackBerry WebWorks application is a web application that runs on a BlackBerry smartphone or BlackBerry
PlayBook tablet.
http://developer.blackberry.com/bbos/html5/documentation/ what_is_a_webworks_app_1845471_11.html
We don’t cover how to secure WebWorks applications on BlackBerry 7 other than to say two things.
The first is that BlackBerry produced a guide with what you need to know in a knowledge base whitepaper titled,
“How to secure your BlackBerry WebWorks Application”
(http://supportforums.blackberry.com/rim/attachments/rim/browser_dev@tkb/52/2/BlackBerry%20WebWorks%20Tutorial_%20How-
to-secure-your-BlackBerry-WebWorks%20application.pdf). It covers the permissions model of allowing you to
expose nonweb-orientated API namespaces to JavaScript.
The second is that obviously where you are bridging web content with something like JavaScript and HTML, the