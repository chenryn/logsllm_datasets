2151
2151
5418
7877
8948
98580
200108
33112
93400
103926
89408
Nii−Nb
Nb
54.8%
6.0%
6.0%
49.9%
101.6%
82.9%
55.1%
55.9%
173.3%
195.2%
167.1%
288.9%
four Intel(R) Xeon(R) Platinum 8151 PI:EMAIL work-
stations with 28 cores, each of which runs a 64-bit Ubuntu
18.04 LTS; the evaluation upon a speciﬁc benchmark is con-
ducted on one machine. To make fair comparisons, MUZZ,
MAFL and AFL are executed in their “ﬁdgety mode” [65],
while MOPT is speciﬁed with -L 0 to facilitate its “pace-
maker mode” [33]. The CPU afﬁnity is turned off during
fuzzing to avoid multiple threads being bound to a single
CPU core. During fuzzing, we run each of the aforementioned
fuzzers six times against all the 12 benchmark programs, with
a time budget of 24 hours. Since all the evaluated programs
are set to run with four working threads and the threads are
mapped to different cores, it takes each fuzzer approximately
12× 6× 24× 4 = 6912 CPU hours.
6.2 Seed Generation (RQ1)
Table 2 shows the overall fuzzing results in terms of newly
generated seeds. We collect the total number of generated
seeds (Nall) and the number of seeds that exercise the mul-
tithreading context (Nmt). In AFL’s jargon, Nall corresponds
to the distinct paths that the fuzzer observes [63]. The
multithreading-relevant seeds are collected with a separate
procedure, based on the observations that they at least invoke
one element in TFork. Therefore, Nmt tracks the different mul-
tithreading execution states during fuzzing — a larger value
of this metric suggests the fuzzer can keep more effective
thread-interleaving seeds. We sum up those seed ﬁles across
all six fuzzing runs to form Nall and Nmt in Table 2. The
Nmt
de-
Nall
termines the probability of picking a multithreading-relevant
seed during seed selection, which greatly impacts the overall
quality of the generated seeds. Obviously, the most critical
metrics are Nmt and Nmt
Nall
column shows the percentage of Nmt over Nall. Nmt
Nall
MUZZ surpasses MAFL, AFL, and MOPT in both metrics.
First, MUZZ exhibits superiority in generating multithreading-
relevant seeds — in all the benchmarks MUZZ achieves the
highest Nmt. For example, in pbzip2-d, despite that all the
Nmt
are relatively small, MUZZ generated 297 multithreading-
Nall
relevant seeds, which is 178 more than MAFL (119), 229
.
more than AFL (68), and 235 more than MOPT (62). More-
over, for larger programs such as im-cnvt (binary size 19.4M),
Nmt of MUZZ (12987) is still better than the others (MAFL:
10610, AFL: 7634, MOPT: 8012). Second, the value of Nmt
Nall
in MUZZ is more impressive — MUZZ wins the comparison
over all the benchmarks. For example, in pbzip2-d, MUZZ’s
result of Nmt
is higher — MUZZ: 14.9%, AFL: 7.0% MAFL:
Nall
4.1%, and MOPT: 3.8%. For the benchmark where AFL has
already achieved a decent result, e.g., 89.3% for x264, MUZZ
can even improve it to 96.5%. Meanwhile, although MAFL
has the largest Nmt for x265 (10890), the value of its Nmt
Nall
(78.6%) is less than that of MUZZ (82.6%).
It is worth noting that MAFL also outperforms AFL and
MOPT w.r.t. Nmt and Nmt
in all the benchmarks. For ex-
Nall
ample, in pxz-c, the number of generated multithreading-
relevant seeds in MAFL is 3401, which is more than AFL
(2470) and MOPT (2634). Correspondingly, the percentage
of multithreading-relevant seeds in MAFL is 60.3%; for
AFL and MOPT, they are 46.1% and 47.2%, respectively.
Considering MAFL, AFL, MOPT apply coverage-oriented
instrumentation (M-Ins), we can conclude that other strate-
gies in MAFL, including thread-context instrumentation,
schedule-intervention instrumentation, and the optimized dy-
namic strategies, also contribute to effective seed generation.
Answer to RQ1: MUZZ has advantages in increasing
the number and percentages of multithreading-relevant
seeds for multithreaded programs. The proposed three
thread-aware instrumentations and dynamic fuzzing
strategies beneﬁt the seed generation.
6.3 Vulnerability Detection (RQ2)
For vulnerability detection, we denote the total number of
proof-of-crash (POC) ﬁles generated during fuzzing as Nc.
The vulnerability analysis component (right-bottom area as
C in Figure 3) analyzes the POC ﬁles and categorizes them
into different vulnerabilities. This basically follows Cluster-
Fuzz’s practice [16]: if two POC ﬁles have the same last N
lines of backtraces and the root cause is the same (e.g., both
2334    29th USENIX Security Symposium
USENIX Association
Table 2: Fuzzing results on MUZZ, MAFL, AFL and MOPT, in terms of generated seeds. Nall: total number of new seeds; Nmt:
number of new multithreading-relevant seeds; Nmt
: the percentage of multithreading-relevant seeds among all the generated
Nall
seeds. Bold data entries mark the best results among the fuzzers, in terms of Nmt and Nmt
. The numbers in parentheses (for Nall
Nall
and Nmt
) denote the differences between MUZZ and the others; for example, “(+1850)” is the more multithreading-relevant seeds
Nall
generated by MUZZ: 5127 than MAFL: 3277.
MUZZ
MAFL
AFL
MOPT
Nmt
Nmt
ID
Nmt
Nmt
Nall
Nall
lbzip2-c
8056
pbzip2-c
381
pbzip2-d 1997
pigz-c
1406
pxz-c
7590
xz-c
2580
Nmt
Nall
5127 63.6% 6307
126 33.1% 340
297 14.9% 1706
1295 92.1% 1355
5249 69.2% 5637
1098 42.6% 2234
Nmt
Nall
3277(+1850) 52.0%(+11.7%)
26.8%(+6.3%)
91(+35)
7.0%(+7.9%)
119(+178)
1189(+106)
87.7%(+4.4%)
3401(+1848) 60.3% (+8.8%)
34.3%(+8.2%)
Nall
5743
272
1650
1298
5357
1953
gm-cnvt 15333 13774 89.8% 14031 10784(+2990) 76.9%(+13.0%) 12453
im-cnvt 14377 12987 90.3% 12904 10610(+2377)
9935
cwebp 11383
9754
vpxdec 28892 25593 88.6% 27735 22507(+3086)
x264
x265
Nmt
Nall
2464(+2663) 42.9%(+20.7%)
25.4%(+7.7%)
69(+57)
4.1%(+10.8%)
68(+229)
1098(+197)
84.6%(+7.5%)
2470(+2779) 46.1% (+23.0%)
581(+517) 29.7%(+12.8%)
Nmt
Nall
2524(+2603) 41.8%(+21.8%)
25.4%(+7.6%)
3.8%(+11.1%)
83.5%(+8.6%)
2634(+2615) 47.2% (+21.9%)
566(+532) 30.7%(+11.9%)
8956(+4818)
69.6%(20.3%)
8012(+4975) 78.5%(+11.8%)
59.9%(+6.5%)
5869(+1685)
77.1%(11.5%)
81.2%(+7.4%) 24397 18936(+6657) 77.6%(+11.0%) 27119 20896(+4697)
90.1%(+6.4%)
89.3% (+7.2%) 12427 11202(+3409)
76.7% (+5.9%) 13142 10154 (+550)
77.3%(+5.3%)
Nall
6033
279
1623
1176
5576
1845
8290(+5484) 66.6%(+23.3%) 12873
7634(+5353) 76.8%(+76.8%) 10203
5874(+1680)
9803
15138 14611 96.5% 14672 13413(+1198) 91.4% (+5.1%) 13211 11801(+2810)
12965 10704 82.6% 13858
9957(+747)
82.2%(+8.1%)
6868(+686) 66.1% (+0.3%)
10890(-186) 78.6% (+4.0%) 12980
71(+55)
62(+235)
982(+313)
7554 66.4% 10389
60.2% (+6.1%)
767(+331)
exhibit as buffer-overﬂow), they are treated as one vulnerabil-
ity. Afterwards, we manually triage all the vulnerabilities into
two groups based on their relevance with multithreading: the
concurrency-vulnerabilities Vm, and the other vulnerabilities
that do not occur in multithreading context Vs. The number of
these vulnerabilities are denoted as Nm
v, respectively.
v in Table 3 to evaluate MUZZ’s
We mainly refer to Nm
v and Ns
c , Nm
concurrency-vulnerability detection capability.
The number of multithreading-relevant POC ﬁles, Nm
c , is
important since it corresponds to different crashing states
when executing multithreading context [27, 34]. It is appar-
ent that MUZZ has the best results of Nm
in all the bench-
c
marks that have Vm vulnerabilities (e.g., for im-cnvt, MUZZ:
63, MAFL: 23, AFL: 6, MOPT: 6). Moreover, MAFL also
exhibits better results than AFL and MOPT (e.g., for pbzip2-c,
MUZZ: 6, MAFL: 6, AFL: 0, MOPT: 0). This suggests that
MUZZ’s and MAFL’s emphasis on multithreading-relevant
seed generation indeed helps to exercise more erroneous
multithreading-relevant execution states.
The most important metric is Nm
v since our focus is to
detect concurrency-vulnerabilities (Vm). Table 3 shows that
MUZZ has the best results: MUZZ detects 9 concurrency-
vulnerabilities, while MAFL, AFL and MOPT detects 5, 4, 4,
respectively. Detected Vm can be divided into three groups.
1) Vm caused by concurrency-bugs. We term this group
of vulnerabilities as Vcb. The 4 vulnerabilities in im-cnvt all
belong to this group — the misuses of caches shared among
threads cause the data races. The generated seeds may ex-
hibit various symptoms such as buffer-overﬂow and memcpy-
param-overlap. MUZZ found all the 4 vulnerabilities, while
the others only found 2. We also observed that for the 2 vul-
nerabilities that are detected by all these fuzzers, MAFL’s
detection capability appears more stable since it detects both
in all its six fuzzing runs, while the others can only detect them
at most in ﬁve runs (not depicted in the table). 2) Vm triggered
in multithreading only but not induced by concurrency-
bugs. For example, the vulnerability in pbzip2-d stems from a
stack-overﬂow error when executing a function concurrently.
This crash can never happen when pbzip2-d works in single-
thread mode since it does not even invoke that erroneous func-
tion. In our evaluation, MUZZ detected this vulnerability while
the other fuzzers failed. Another case is the vulnerability in
pbzip2-c, which was detected by MUZZ and MAFL, but not
by AFL or MOPT. 3) Other concurrency-vulnerabilities.
The characteristics of these Vm are that their crashing back-
trace contains multithreading context (i.e., TFork is invoked),
however, the crashing condition might also be occasionally
triggered when only one thread is speciﬁed. The Vm vulnera-
bilities detected in vpxdec and x264 belong to this category.
In particular, MUZZ detects 2 vulnerabilities in vpxdec while
MAFL, AFL, and MOPT only ﬁnd 1.
We consider the reason behind the differences w.r.t. Nm
c and
Nm
v among the fuzzers to be that, MUZZ keeps more “deeper”
multithreading-relevant seeds that witness different execution
states, and mutations on some of them are more prone to
trigger the crashing conditions.
c, Ns
Columns Nc, Ns
v are metrics less focused. But we can
still observe that 1) according to Nc, MUZZ (and MAFL) can
exercise more total crashing states; 2) despite that the values
of Ns
c from MUZZ are usually smaller, MUZZ can still ﬁnd all
the (categorized) Vs detected by other fuzzers.
From the 12 evaluated benchmarks, we reported the 10 new
vulnerabilities (sum of MUZZ’s results in columns Nm
v and
Ns
v except for row vpxdec; 7 of them belong to Vm), all of
them have been conﬁrmed or ﬁxed, 3 of which have already
been assigned CVE IDs. Besides, we also conducted a similar
evaluation on libvpx v1.8.0-178 (the git HEAD version at
the time of evaluation). MUZZ detected a 0-day concurrency-
vulnerability within 24 hours (among six fuzzing runs, two
of them detected the vulnerability in 5h38min and 16h07min,
USENIX Association
29th USENIX Security Symposium    2335
Table 3: Fuzzing results on MUZZ, MAFL, AFL and MOPT, in terms of crashes and vulnerabilities. Some projects (e.g., lbzip2-c)
are excluded since there were no crashes/vulnerabilities detected by any of the fuzzers. Nc: number of proof-of-crash (POC)
ﬁles; Nm
c: number of POC ﬁles
irrelevant with multithreading; Ns
v: number of vulnerabilities irrelevant to multithreading. Bold data entries mark the best results
for Nm
v . The numbers in parentheses denote the differences between MUZZ and others.
c and Nm
c : number of multithreading-relevant POC ﬁles; Nm
v : number of concurrency-vulnerabilities. Ns
ID
pbzip2-c
pbzip2-d
im-cnvt
cwebp
vpxdec
x264
x265
MUZZ
Nm
v
1
1
4
0
2
1
0
Nc Nm
c
6
6
15
15
63
87
0
19
347
523
103
103
43
0
c Ns
Ns
v