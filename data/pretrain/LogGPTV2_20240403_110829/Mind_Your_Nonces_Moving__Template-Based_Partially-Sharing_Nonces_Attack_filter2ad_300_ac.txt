# Introduction

This document discusses a lattice-based attack on the SM2 Digital Signature Algorithm (SM2DSA) by exploiting information leaked during the generation of nonces. The attack is facilitated by detecting collisions in the first bytes of the nonces using template matching. We also provide theoretical and experimental results, as well as potential countermeasures.

## Target Vector and Lattice Parameters

The target vector is defined as:
\[
\mathbf{u} = (1732 \cdot u_1, 1732 \cdot u_2, \ldots, 1732 \cdot u_d, 0)
\]
where \(d\) is the dimension. The parameter \(\beta\) in the lattice \(B'\) (Section 2.3) is chosen to be \(4n\). The vector \(\mathbf{h}\) that discloses \(d_A\) is expected to be the short vector in the embedding lattice:
\[
\mathbf{h} = (1732(dA t_1 + n h_1 - u_1), \ldots, 1732(dA t_d + n h_d - u_d), 4dA, 4n)
\]

### Theoretical Analysis

The upper bound of the length of the vector \(\mathbf{h}\) is approximately:
\[
\left( \frac{28}{2} \right)^2 + 32n^2
\]
By the Gaussian heuristic, the expected length of the shortest vector is:
\[
\frac{1}{\sqrt{d+2}} \left( \frac{16 \times 1732d \times n^{d+1}}{\sqrt{2\pi e}} \right)^{\frac{1}{d+2}}
\]
When the length of \(\mathbf{h}\) is shorter than this, \(d_A\) can be obtained by finding the short vector in the embedding lattice. For \(n \approx 2^{256}\), we achieve the bound when \(d \geq 45\). Given that \(d\) is relatively small, the BKZ algorithm with blocksize 20 can be used as an SVP oracle for lattices with dimensions not much larger than 50.

## Experimental Results

Our experiments were conducted on a smartcard running SM2DSA at 32 MHz. Power traces were collected with a sampling rate of 1 G/s and a bandwidth of 1 G. Figures 5 and 6 show the power consumption and PCA-reduced traces.

### Template Matching

To collect enough signatures, we repeatedly sent signing APDUs to the smartcard. We did not assume that all signatures could be collected within a single power-on period, so we sent 10,000 APDUs before the smartcard powered off. We selected the interval with the highest standard deviation and applied PCA to the traces. A minimum likelihood principle was used to match the traces with the template, and a threshold was set to minimize false positives. On average, 3-4 power traces were kept for each template, resulting in about 4 pairs of signatures with the same MSBN from 10,000 signatures.

## Partially-Sharing Nonces Attack

For a pair of signatures \((r_1, s_1)\) and \((r_2, s_2)\) sharing MSBN, we have:
\[
s_1(1 + d_A) = k_1 - r_1 d_A \mod n
\]
\[
s_2(1 + d_A) = k_2 - r_2 d_A \mod n
\]
Subtracting these equations, we get:
\[
(s_1 - s_2 + r_1 - r_2)d_A - (s_2 - s_1) = k_1 - k_2 \mod n
\]
To enhance the success rate, we collected 48 pairs of signatures, requiring about 120,000 signatures in the template matching phase. This process took less than 13 hours. In the template building phase, only the random number generation command was run, which is faster than the signing process.

### Solving the CVP

We wrote \(k_1 = 2l k_H^1 + k_L^1\) and \(k_2 = 2l k_H^2 + k_L^2\), where \(l = 2^{48}\) and \(k_H\) is the most significant byte of \(k\). Since \(k_H^1 = k_H^2\), the equation becomes:
\[
(s_1 - s_2 + r_1 - r_2)d_A - (s_2 - s_1) = k_L^1 - k_L^2 \mod n
\]
Given \(k_L^1, k_L^2 \in [0, 2l]\), we have:
\[
-2l \leq (s_1 - s_2 + r_1 - r_2)d_A - (s_2 - s_1) \leq 2l
\]
From 48 pairs of signatures, we randomly chose 45 pairs to form a CVP and solved the embedding lattice using the BKZ 20 algorithm. In the worst case, 17,296 BKZ reductions with dimension 45 were needed, but this was feasible with one core of an Intel Xeon CPU W3530 (2.8 GHz) and 4 GB memory. We recovered the correct private key immediately after trying the first group of 45 pairs of signatures.

## Countermeasures

Common countermeasures include increasing background noise, balancing power consumption, randomizing the internal clock, and introducing random delays. These can be applied to the random number generation and moving processes. Another countermeasure is to generate the nonce \(k\) with extra 64 random bits, as specified in Appendix B.5.1 of NIST FIPS 186-4. This makes our attack invalid.

## Conclusion

This paper presents an attack on SM2DSA using information leaked during nonce generation. By detecting collisions in the first bytes of nonces, we implemented a partially-sharing nonces attack. Possible countermeasures are suggested. Our attack can be applied to other elliptic curve-based signature algorithms like ECDSA if the transfer of random numbers leaks information about the nonce \(k\).

## Acknowledgments

The authors thank the anonymous reviewers for their valuable comments. This work is supported by the National Natural Science Foundation of China (No. 61402536, No. 61202493, and No. 61402252) and the "12th Five-Year Plan" The National Development Foundation for Cryptological Research (No. MMJJ201401009).

## References

[1] C. Archambeau, E. Peeters, F.-X. Standaert, and J.-J. Quisquater. Template Attacks in Principal Subspaces. In L. Goubin and M. Matsui, editors, CHES 2006, volume 4249 of LNCS, pages 1–14. Springer, 2006.
...
[24] F.-X. Standaert and C. Archambeau. Using Subspace-Based Template Attacks to Compare and Combine Power and Electromagnetic Information Leakages. In E. Oswald and P. Rohatgi, editors, CHES 2008, volume 5154 of LNCS, pages 411–425. Springer, 2008.