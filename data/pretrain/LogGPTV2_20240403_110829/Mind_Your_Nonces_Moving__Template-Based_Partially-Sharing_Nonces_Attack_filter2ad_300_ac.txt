0
1732 · t1
0
1732 · n
. . .
···
···
···
. . .
. . .
0
···
0
...
0
...
...
1732 · n 0
1732 · td
4
0
(cid:113)
(cid:113) d+2
The target vector is (cid:126)u = (1732· u1, 1732· u2, . . . , 1732· ud, 0),
and the parameter β in lattice B(cid:48) (Sect. 2.3) is chosen to
be 4n. We expect that the vector (cid:126)h = (1732(dAt1 + nh1 −
u1), . . . , 1732(dAtd + nhd − ud), 4dA, 4n) which discloses dA
is the short vector in the embedding lattice. Now, we give
a heuristic theoretical result about the number of signature
pairs needed to recover the private key: The upper bound of
the length of the vector (cid:126)h is about
28 )2 + 32n2;
by Gaussian heuristic the expected length of shortest vector
d(1732 × n
2πe (16 × 1732d × nd+1)
1
d+2 . When the length of
is about
vector (cid:126)h is shorter than that of Gaussian heuristic, dA can
be obtained by ﬁnding the short vector of the embedding
lattice. Here n ≈ 2256, then we can achieve the bound as
long as d ≥ 45. Since d is relatively small, the lattice basis
reduction algorithm BKZ with blocksize 20 can be seen as an
SVP oracle. That is, the BKZ 20 algorithm will output the
shortest vector for lattice with dimension not much larger
than 50.
Experimental Results. Our smartcard runs SM2DSA at
32MHz; a sampling rate of 1G/s and a 1G band width are
used when we are collecting the power traces.
Figure 5: Traces of values with diﬀerent Hamming
weights after PCA
Figure 6: Power consumption of SM2 signing procedure
should use to match the template, thus we keep only this
part of the power trace for each signature.
In order to collect enough signatures, we have to repeat-
edly send the signing APDU to the smartcard. To make the
attack more reasonable, we will not assume that we can col-
lect enough signatures within a single power-on period of the
smartcard. So we only send the APDU 10,000 times to the
smartcard before it powers oﬀ. For these traces, we select
the interval that is the same as the template building phase
by calculating the standard deviation and then apply PCA
to them. For the traces after PCA, we match them with
the template. A minimum likelihood principle is applied as
mentioned, and a threshold is chosen to make the false pos-
itives as few as possible. After we ﬁnd the matching traces,
we pair these signatures and then collect the next 10,000
signatures to repeat the procedure. Since the values we tar-
geted occur with probability 2/256, and we have a strict
threshold so as to reduce the errors, in our experiment there
were only 3 ∼ 4 power traces kept on average for each of the
two templates. As a consequence, we can get about 4 pairs
of signatures with the same MSBN from 10,000 signatures.
4. PARTIALLY-SHARING NONCES ATTACK
ON SM2DSA
In this section, we describe the lattice attack that uses the
partially-sharing nonces acquired in the previous section to
recover the private key.
For a pair of signatures (r1, s1) and (r2, s2) that shares
MSBN, we have:
s1(1 + dA) = k1 − r1dA mod n ,
s2(1 + dA) = k2 − r2dA mod n ;
(2)
(3)
subtracting Eq. (3) from Eq. (2), then:
(s1 − s2 + r1 − r2)dA − (s2 − s1) = k1 − k2 mod n.
(4)
To enhance the success rate of the attack, similar to [17],
we collect more pairs of signatures than the number calcu-
lated from Gaussian heuristic, say 48. The reason is to avoid
the failure of the attack due to the false detection of the col-
lision, although the probability of falsely detecting is very
low due to our strategy in Sect. 3.
To get 48 pairs of collided signatures, we need about
120,000 signatures in the template matching phase. For our
target smartcard, about one hour is required to run 10,000
signings; thus less than 13 hours are needed to process the
120,000 ones. In the template building phase, only the ran-
dom number generation command should be run, which is
much faster than the signing process. In our experiment, we
need about 12 hours to get the 1,800,000 traces for template
building.
1 + kL
1 , k2 = 2lkH
We write k1 = 2lkH
2 , where l = 248
and kH is the most signiﬁcant byte of k. Since in our case
1 = kH
kH
(s1 − s2 + r1 − r2)dA − (s2 − s1) = kL
2 , Eq. (4) can be rewritten as:
2 + kL
1 − kL
2 mod n.
Since kL
1 , kL
2 ∈ [0, 2l], we have
− 2l ≤ (cid:98)(s1 − s2 + r1 − r2)dA − (s2 − s1)(cid:99)n ≤ 2l
(5)
From these 48 pairs of signatures, we randomly choose 45
pairs to form a CVP and then solve the embedding lattice by
BKZ 20 algorithm implemented in NTL library [23]. In the
worst case, there are about (cid:0)48
(cid:1) = 17296 BKZ reductions
with dimension 45 have to be carried out, but this is still
feasible since one reduction takes about 2.4 seconds with one
core of Intel Xeon CPU W3530 (2.8GHz) and 4G memory.
Actually, we recovered the correct private key immediately
45
160165170175180185190195−80−60−40−20020406080k613after we tried the ﬁrst group of 45 pairs of signatures, and
it turned out that the collided pairs we collected were all
correct when we ﬁgured out all the nonces for the 48 pairs
of signatures.
Furthermore, the previous bound obtained from Gaussian
heuristic is an upper bound and we expect that fewer signa-
tures are actually needed to recover the private key. In our
experiment, we found that BKZ actually performed better
than the bound that we estimated: Less than 40 pairs of sig-
natures were enough to recover the private key. This means
that the attacker can collect fewer signature pairs so as to
reduce the processing time.
Note that in the experiment, we found that the private
key came from the second shortest vector of the embedding
lattice, since the shortest vector would always be all zero
but the (d + 1)-th dimension. Let the (d + 1)-th dimension
of the second shortest vector be d(cid:48)
A, then the private key is
A/4 mod n or n − (d(cid:48)
d(cid:48)
A/4 mod n).
5. COUNTERMEASURES
Common countermeasures of hiding [16] will make our
attack more diﬃcult to succeed. These countermeasures in-
clude increasing the background noise, balancing the power
consumption, randomizing the internal clock, random delay,
etc. All the countermeasures could be applied to the random
number generation and moving process.
Another countermeasure is to generate the nonce k with
the method as speciﬁed in Appendix B.5.1 of [18]. In this
method, a random number with extra 64 random bits will
be produced and then it will be reduced before being used
as the nonce. In this scenario, the information obtained in
our attack is no longer the same as that of the nonces; thus
our attack is invalid in this case.
6. CONCLUSION
This paper implements an attack on SM2DSA by using
the information leaked from the generation of the nonces.
By using the collisions of the ﬁrst bytes of the nonces de-
tected with the assistance of templates, we give a partially-
sharing nonces attack on SM2DSA with the recommended
parameters. Possible countermeasures are also suggested.
Our attack can also be applied to SM2DSA with the other
parameters and the other elliptic curve based signature al-
gorithms like ECDSA, as long as the transfer of the random
numbers leaks the information of the nonce k.
Acknowledgments. The authors would like to thank the anony-
mous reviewers for their valuable comments. This work is sup-
ported by National Natural Science Foundation of China (No.
61402536, No. 61202493 and No. 61402252) and “12th Five-Year
Plan” The National Development Foundation for Cryptological
Research (No. MMJJ201401009).
7. REFERENCES
[1] C. Archambeau, E. Peeters, F.-X. Standaert, and J.-J.
Quisquater. Template Attacks in Principal Subspaces. In
L. Goubin and M. Matsui, editors, CHES 2006, volume
4249 of LNCS, pages 1–14. Springer, 2006.
[2] R. Avanzi, H. Cohen, C. Doche, G. Frey, T. Lange,
K. Nguyen, and F. Vercauteren. Handbook of Elliptic and
Hyperelliptic Curve Cryptography. CRC Press, Boca Raton,
2005.
[3] D. Boneh and R. Venkatesan. Hardness of Computing the
Most Signiﬁcant Bits of Secret Keys in Diﬃe-Hellman and
Related Schemes. In N. Koblitz, editor, CRYPTO 1996,
volume 1109 of LNCS, pages 129–142. Springer, 1996.
[4] D. Boneh and R. Venkatesan. Rounding in Lattices and Its
Cryptographic Applications. In M. E. Saks, editor, SODA
1997, pages 675–681. ACM/SIAM, 1997.
[5] S. Chari, J. R. Rao, and P. Rohatgi. Template Attacks. In
B. S. K. Jr., ¸Cetin Kaya Ko¸c, and C. Paar, editors, CHES
2002, volume 2523 of LNCS, pages 13–28. Springer, 2002.
[6] O. Choudary and M. G. Kuhn. Eﬃcient Template Attacks.
In A. Francillon and P. Rohatgi, editors, CARDIS 2013,
volume 8419 of LNCS, pages 253–270. Springer, 2014.
[7] EMV. Integrated Circuit Card Speciﬁcations for Payment
Systems. Version 4.3 (November 2011).
http://www.emvco.com.
[8] J.-C. Faug`ere, C. Goyet, and G. Renault. Attacking
(EC)DSA Given Only an Implicit Hint. In L. R. Knudsen
and H. Wu, editors, Selected Areas in Cryptography 2012,
volume 7707 of LNCS, pages 252–274. Springer, 2013.
[9] H. Hotelling. Analysis of a Complex of Statistical Variables
Into Principal Components. J. Educ. Psych., 24, 1933.
[10] N. Howgrave-Graham and N. P. Smart. Lattice Attacks on
Digital Signature Schemes. Des. Codes Cryptography,
23(3):283–290, 2001.
[11] R. Kannan. Minkowski’s Convex Body Theorem and
Integer Programming. Mathematics of Operations
Research, 12(3):415–440, 1987.
[12] P. C. Kocher. Timing Attacks on Implementations of
Diﬃe-Hellman, RSA, DSS, and Other Systems. In
N. Koblitz, editor, CRYPTO 1996, volume 1109 of LNCS,
pages 104–113. Springer, 1996.
[13] A. Lenstra, J. Lenstra, H.W., and L. Lov´l´csz. Factoring
polynomials with rational coeﬃcients. Mathematische
Annalen, 261(4):515–534, 1982.
[14] M. Liu, J. Chen, and H. Li. Partially Known Nonces and
Fault Injection Attacks on SM2 Signature Algorithm. In
D. Lin, S. Xu, and M. Yung, editors, Inscrypt 2013, volume
8567 of LNCS, pages 343–358. Springer, 2014.
[15] M. Liu and P. Q. Nguyen. Solving BDD by Enumeration:
An Update. In E. Dawson, editor, CT-RSA 2013, volume
7779 of LNCS, pages 293–309. Springer, 2013.
[16] S. Mangard, E. Oswald, and T. Popp. Power Analysis
Attacks: Revealing the Secrets of Smart Cards. Springer,
2007.
[17] D. Naccache, P. Q. Nguyen, M. Tunstall, and C. Whelan.
Experimenting with Faults, Lattices and the DSA. In
S. Vaudenay, editor, Public Key Cryptography 2005,
volume 3386 of LNCS, pages 16–28. Springer, 2005.
[18] National Institute of Standards and Technology (NIST).
FIPS Publication 186-4: Digital Signature Standard, 2013.
[19] P. Q. Nguyen and I. Shparlinski. The Insecurity of the
Elliptic Curve Digital Signature Algorithm with Partially
Known Nonces. Des. Codes Cryptography, 30(2):201–217,
2003.
[20] Oﬃce of State Commercial Cryptography Administration.
Public Key Cryptographic Algorithm SM2 Based on
Elliptic Curves (in Chinese).
http://www.oscca.gov.cn/News/201012/News_1198.htm.
[21] C. P. Schnorr and M. Euchner. Lattice Basis Reduction:
Improved Practical Algorithms and Solving Subset Sum
Problems. Mathematics of Programming, 66:181–191, 1994.
[22] S. Shen and X. Lee. SM2 Digital Signature Algorithm
draft-shen-sm2-ecdsa-01. http:
//tools.ietf.org/pdf/draft-shen-sm2-ecdsa-01.pdf.
[23] V. Shoup. Number Theory C++ Library (NTL) version
5.5.2. http://www.shoup.net/ntl/.
[24] F.-X. Standaert and C. Archambeau. Using
Subspace-Based Template Attacks to Compare and
Combine Power and Electromagnetic Information Leakages.
In E. Oswald and P. Rohatgi, editors, CHES 2008, volume
5154 of LNCS, pages 411–425. Springer, 2008.
614