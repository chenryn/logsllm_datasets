# 优化后的文本

```javascript
for (var i = 0; i < 10000; i++) {
    for (var j = 0; j < 10000; j++) {
        // 初始调用，尚未触发JIT优化
    }
}
```

```javascript
for (var i = 0; i < 10000; i++) {
    for (var j = 0; j < 10000; j++) {
        // 再次调用，仍未触发JIT优化
    }
}
```

```javascript
// 生成的JIT代码用于修复函数参数数量：
Code at [0x59920a601880, 0x59920a601900]
...
// Baseline JIT
...
// 针对liveoverflow的优化
```

通过增加调用次数，我们已经成功使代码进入了Baseline JIT优化级别。接下来，我们将继续提高调用次数，以触发更高级别的JIT优化。

```javascript
for (var i = 0; i < 10000; i++) {
    for (var j = 0; j < 10000; j++) {
        // 继续调用以触发更高级别的JIT优化
    }
}
```

## JavaScriptCore中的clobberWorld()函数

在`JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h`文件中，我们可以找到`clobberWorld()`函数的定义：

```cpp
void AbstractInterpreter::clobberWorld()
{
    clobberStructures();
}
```

`clobberWorld()`函数会调用`clobberStructures()`函数，其定义如下：

```cpp
template 
void AbstractInterpreter::clobberStructures()
{
    m_state.clobberStructures();
    m_state.mergeClobberState(AbstractInterpreterClobberState::ClobberedStructures);
    m_state.setStructureClobberState(StructuresAreClobbered);
}
```

### JIT优化与副作用

为了防止出现副作用，JIT编译器必须谨慎处理可能改变对象结构的代码。例如，如果代码访问了对象的属性`obj.x`，然后又删除了该属性，那么JIT编译器必须将这个结构标记为“已更改”，以防止经过JIT处理的代码再访问它。否则，可能会导致内存破坏问题。

### 结论

本文介绍了如何通过增加调用次数来触发不同级别的JIT优化，并探讨了JIT编译器如何处理可能导致副作用的代码。在下一篇文章中，我们将研究Linus的exploit，它利用的就是这种漏洞。

## 资源
- [JavaScriptCore CSI: A Crash Site Investigation Story](https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/)
- [Inverting your assumptions: A Guide to JIT comparisons](https://www.thezdi.com/blog/2018/4/12/inverting-your-assumptions-a-guide-to-jit-comparisons/)
- [Video Explanation](https://www.youtube.com/watch?v=45wMEIIPsPA)
```

希望这样可以帮助你更好地理解和展示内容！