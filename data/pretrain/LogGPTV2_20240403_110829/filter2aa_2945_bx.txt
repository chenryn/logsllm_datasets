### Updated and Optimized Text

#### Updating the `currentItem` Variable
The `Current` property will return the value stored in the `currentItem` variable, which has already been updated.

#### Implementing the `IDisposable.Dispose` Method
1. Locate the `IDisposable.Dispose` method.
2. Comment out the `throw new NotImplementedException();` statement as shown below:
   ```csharp
   void IDisposable.Dispose()
   {
       // throw new NotImplementedException();
   }
   ```
3. The enumerator does not use any resources that require explicit disposal, so this method does not need to perform any actions. However, it must still be present. For more information about the `Dispose` method, refer to Chapter 14.

#### Building the Solution
1. Build the solution and correct any reported errors.

#### Initializing a Variable with a Type Parameter
You should have noticed that the `currentItem` variable is defined and initialized using the `default` keyword:
```csharp
private TItem currentItem = default(TItem);
```
- The `currentItem` variable is defined using the type parameter `TItem`.
- When the program is written and compiled, the actual type substituted for `TItem` might not be known; this is resolved only when the code is executed.
- This makes it difficult to specify how the variable should be initialized. The `default` keyword solves this problem:
  - If `TItem` is a reference type, `default(TItem)` returns `null`.
  - If `TItem` is a numeric type, `default(TItem)` returns `0`.
  - If `TItem` is a boolean, `default(TItem)` returns `false`.
  - If `TItem` is a struct, the individual fields in the struct are initialized similarly (reference fields to `null`, numeric fields to `0`, and boolean fields to `false`).

#### Implementing the `IEnumerable` Interface
In the following exercise, you will modify the binary tree class to implement the `IEnumerable` interface. The `GetEnumerator` method will return a `TreeEnumerator` object.

1. In Solution Explorer, double-click the `Tree.cs` file to display the `Tree` class in the Code and Text Editor window.
2. Modify the definition of the `Tree` class to implement the `IEnumerable` interface:
   ```csharp
   public class Tree : IEnumerable where TItem : IComparable
   ```
   Note that constraints are always placed at the end of the class definition.
3. Hover over the `IEnumerable` interface in the class definition. On the drop-down context menu, click "Implement Interface Explicitly."
4. Locate the generic `IEnumerable.GetEnumerator` method near the end of the class. Modify the body of the `GetEnumerator()` method as shown:
   ```csharp
   IEnumerator IEnumerable.GetEnumerator()
   {
       return new TreeEnumerator(this);
   }
   ```
5. Build the solution and correct any reported errors. Rebuild the solution if necessary.

#### Testing the Enumerator
1. In Solution Explorer, right-click the `BinaryTree` solution, point to "Add," and then click "New Project."
2. Add a new project using the "Console App (.NET Framework)" template. Name the project `EnumeratorTest`, set the location to `\Microsoft Press\VCSBS\Chapter 19\BinaryTree` in your Documents folder, and click "OK."
3. Right-click the `EnumeratorTest` project in Solution Explorer and click "Set As StartUp Project."
4. On the Project menu, click "Add Reference." In the Reference Manager dialog box, expand the "Projects" node and select the `BinaryTree` project, then click "OK."
5. In the Code and Text Editor window displaying the `Program` class, add the following using directive:
   ```csharp
   using BinaryTree;
   ```
6. Add the statements shown below to the `Main` method to create and populate a binary tree of integers:
   ```csharp
   static void Main(string[] args)
   {
       Tree tree1 = new Tree(10);
       tree1.Insert(5);
       tree1.Insert(11);
       tree1.Insert(5);
       tree1.Insert(-12);
       tree1.Insert(15);
       tree1.Insert(0);
       tree1.Insert(14);
       tree1.Insert(-8);
       tree1.Insert(10);
   }
   ```
7. Add a `foreach` statement to enumerate the contents of the tree and display the results:
   ```csharp
   static void Main(string[] args)
   {
       ...
       foreach (int item in tree1)
       {
           Console.WriteLine(item);
       }
   }
   ```
8. On the Debug menu, click "Start Without Debugging."
9. The program runs and displays the values in the following sequence: `-12, -8, 0, 5, 5, 10, 10, 11, 14, 15`.
10. Press Enter to return to Visual Studio 2017.

#### Implementing an Enumerator Using an Iterator
C# provides iterators to simplify the process of making a collection enumerable. An iterator is a block of code that yields an ordered sequence of values. It specifies the sequence that an enumerator should use for returning its values.

##### A Simple Iterator Example
The following `BasicCollection` class illustrates the principles of implementing an iterator:
```csharp
using System;
using System.Collections.Generic;
using System.Collections;

class BasicCollection : IEnumerable
{
    private List<T> data = new List<T>();

    public void FillList(params T[] items)
    {
        foreach (var datum in items)
        {
            data.Add(datum);
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        foreach (var datum in data)
        {
            yield return datum;
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        throw new NotImplementedException();
    }
}
```
- The `GetEnumerator` method loops through the items in the `data` list, returning each item in turn.
- The `yield` keyword indicates the value that should be returned by each iteration.
- The compiler uses the iterator code to generate an implementation of the `IEnumerator` class containing `Current` and `MoveNext` methods.

##### Using the Iterator
You can invoke the enumerator generated by the iterator as follows:
```csharp
BasicCollection bc = new BasicCollection();
bc.FillList("Twas", "brillig", "and", "the", "slithy", "toves");
foreach (string word in bc)
{
    Console.WriteLine(word);
}
```
This code outputs the contents of the `bc` object in the order: `Twas, brillig, and, the, slithy, toves`.

##### Providing Alternative Iteration Mechanisms
You can implement additional properties that implement the `IEnumerable` interface and use an iterator to return data in a different sequence. For example, the `Reverse` property of the `BasicCollection` class emits the data in reverse order:
```csharp
public IEnumerable<T> Reverse
{
    get
    {
        for (int i = data.Count - 1; i >= 0; i--)
        {
            yield return data[i];
        }
    }
}
```
You can invoke this property as follows:
```csharp
foreach (string word in bc.Reverse)
{
    Console.WriteLine(word);
}
```
This code outputs the contents of the `bc` object in reverse order: `toves, slithy, the, and, brillig, Twas`.

#### Defining an Enumerator for the `Tree` Class Using an Iterator
In the next exercise, you will implement the enumerator for the `Tree` class using an iterator.

1. Open the `BinaryTree` solution located in the `\Microsoft Press\VCSBS\Chapter 19\IteratorBinaryTree` folder.
2. Open the `Tree.cs` file in the Code and Text Editor window. Modify the definition of the `Tree` class to implement the `IEnumerable` interface:
   ```csharp
   public class Tree : IEnumerable where TItem : IComparable
   {
       ...
   }
   ```
3. Hover over the `IEnumerable` interface in the class definition. On the drop-down context menu, click "Implement Interface Explicitly" to add the `IEnumerable.GetEnumerator` and `IEnumerable.GetEnumerator` methods.
4. Locate the generic `IEnumerable.GetEnumerator` method and replace its contents as shown:
   ```csharp
   IEnumerator IEnumerable.GetEnumerator()
   {
       if (this.LeftTree != null)
       {
           foreach (TItem item in this.LeftTree)
           {
               yield return item;
           }
       }
       yield return this.NodeData;
       if (this.RightTree != null)
       {
           foreach (TItem item in this.RightTree)
           {
               yield return item;
           }
       }
   }
   ```
   This code follows the same recursive algorithm used in Chapter 17 for listing the contents of a binary tree.

#### Testing the New Enumerator
1. In Solution Explorer, right-click the `BinaryTree` solution, point to "Add," and then click "Existing Project." Select the `EnumeratorTest` project file and click "Open."
2. Right-click the `EnumeratorTest` project in Solution Explorer and click "Set As StartUp Project."
3. In Solution Explorer, expand the References folder for the `EnumeratorTest` project. Right-click the `BinaryTree` reference and click "Remove."
4. On the Project menu, click "Add Reference."
5. In the Reference Manager dialog box, select the `BinaryTree` project and click "OK."
6. Display the `Program.cs` file for the `EnumeratorTest` project in the Code and Text Editor window. Review the `Main` method.
7. Build the solution and correct any errors.
8. On the Debug menu, click "Start Without Debugging."
9. The program runs and displays the values in the same sequence as before: `-12, -8, 0, 5, 5, 10, 10, 11, 14, 15`.
10. Press Enter and return to Visual Studio 2017.

### Summary
In this chapter, you learned how to implement the `IEnumerable` and `IEnumerator` interfaces with a collection class to enable applications to iterate through the items in the collection. You also learned how to implement an enumerator using an iterator.

If you want to continue to the next chapter, keep Visual Studio 2017 running and turn to Chapter 20, "Decoupling application logic and handling events."

If you want to exit Visual Studio 2017 now, on the File menu, click "Exit." If you see a Save dialog box, click "Yes" and save the project.

### Quick Reference
- **To make a collection class enumerable, allowing it to support the `foreach` construct:**
  - Implement the `IEnumerable` interface and provide a `GetEnumerator` method that returns an `IEnumerator` object.
  - Example:
    ```csharp
    public class Tree : IEnumerable
    {
        ...
        IEnumerator GetEnumerator()
        {
            ...
        }
    }
    ```

- **To implement an enumerator without using an iterator:**
  - Define an enumerator class that implements the `IEnumerator` interface and provides the `Current` property and the `MoveNext` method (and optionally the `Reset` method).
  - Example:
    ```csharp
    public class TreeEnumerator : IEnumerator
    {
        ...
        TItem Current
        {
            get
            {
                ...
            }
        }
        bool MoveNext()
        {
            ...
        }
    }
    ```

- **To define an enumerator using an iterator:**
  - Implement the enumerator to indicate which items should be returned (using the `yield` statement) and in which order.
  - Example:
    ```csharp
    IEnumerator GetEnumerator()
    {
        for (...)
        {
            yield return ...;
        }
    }
    ```