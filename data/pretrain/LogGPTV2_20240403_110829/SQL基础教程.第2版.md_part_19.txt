WHERE product_name = 'T恤衫';
COMMIT;
MySQL
START TRANSACTION;
-- 将运动T恤的销售单价降低1000日元
UPDATE Product
SET sale_price = sale_price - 1000
WHERE product_name = '运动T恤';
-- 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000
WHERE product_name = 'T恤衫';
COMMIT;
Oracle DB2
-- 将运动T恤的销售单价降低1000日元
UPDATE Product
SET sale_price = sale_price - 1000
WHERE product_name = '运动T恤';
4-4 事务 141 ●
-- 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000
WHERE product_name = 'T恤衫';
COMMIT;
如上所示，各个DBMS事务的开始语句都不尽相同，其中Oracle和
DB2并没有定义特定的开始语句。可能大家觉得这样的设计很巧妙，其
实是因为标准SQL中规定了一种悄悄开始事务处理A的方法。因此，即
注A 使是经验丰富的工程师也经常会忽略事务处理开始的时间点。大家可以试
《标准SQL手册 修订第4版》中
着通过询问“是否知道某个DBMS中事务是什么时候开始的”，来测试学
的记述：希望大家注意事务默认
开始的时间点。没有“BEGIN 校或者公司前辈的数据库知识。
TRANSACTION”这样明确的
开始标志。 反之，事务的结束需要用户明确地给出指示。结束事务的指令有如下
两种。
■ ——提交处理
COMMIT
KEYWORD COMMIT是提交事务包含的全部更新处理的结束指令（图4-3），相当
●COMMIT
于文件处理中的覆盖保存。一旦提交，就无法恢复到事务开始前的状态了。
●提交
因此，在提交之前一定要确认是否真的需要进行这些更新。
图4-3 COMMIT的流程=直线进行
① 事务开始语句
② 执行更新语句（DML）
③ 执行COMMIT
结束后的状态：②中的所有更新都被反映到了数据库中
万一由于误操作提交了包含错误更新的事务，就只能回到重新建表、
重新插入数据这样繁琐的老路上了。由于可能会造成数据无法恢复的后
果，请大家一定要注意（特别是在执行DELETE语句的COMMIT时尤其
要小心）。
法则4-8
虽然我们可以不清楚事务开始的时间点，但是在事务结束时一定要仔细进行确认。
● 142 第4章 数据更新
■ROLLBACK——取消处理
KEYWORD ROLLBACK是取消事务包含的全部更新处理的结束指令（图4-4），
●ROLLBACK
相当于文件处理中的放弃保存。一旦回滚，数据库就会恢复到事务开始之
●回滚
前的状态（代码清单4-22）。通常回滚并不会像提交那样造成大规模的数
据损失。
图4-4 ROLLBACK的流程=掉头回到起点
① 事务开始语句
② 执行更新语句（DML）
③ 执行ROLLBACK
结束后的状态：和①执行前相同
代码清单4-22 事务回滚的例子
SQL Server PostgreSQL
BEGIN TRANSACTION; ------------------- ①
-- 将运动T恤的销售单价降低1000日元
UPDATE Product
SET sale_price = sale_price - 1000
WHERE product_name = '运动T恤';
-- 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000
WHERE product_name = 'T恤衫';
ROLLBACK;
特定的SQL
至此，我们已经知道各个DBMS中关于事务的语法不尽相同。代码清单4-22中的语
句在MySQL中执行时需要将①语句改写为“START TRANSACTION”，而在Oracle
和DB2中执行时则无需①语句（请将其删除），具体请参考4-4节的“创建事务”。
上述事务处理执行之后，表中的数据不会发生任何改变。这是因为执
行最后一行的ROLLBACK之后，所有的处理都被取消了。因此，回滚执
行起来就无需像提交时那样小心翼翼了（即使是想要提交的情况，也只需
要重新执行事务处理就可以了）。
4-4 事务 143 ●
专 栏
事务处理何时开始
之前我们说过，事务并没有标准的开始指令存在，而是根据DBMS的不同而
不同。
实际上，几乎所有的数据库产品的事务都无需开始指令。这是因为大部分情况
下，事务在数据库连接建立时就已经悄悄开始了，并不需要用户再明确发出开始指
令。例如，使用Oracle时，数据库连接建立之后，第一条SQL语句执行的同时，
事务就已经悄悄开始了。
像这样不使用指令而悄悄开始事务的情况下，应该如何区分各个事务呢？通常
会有如下两种情况。
KEYWORD A 每条SQL语句就是一个事务（自动提交模式）
●自动提交模式 B 直到用户执行COMMIT或者ROLLBACK为止算作一个事务
通常的DBMS都可以选择其中任意一种模式。默认使用自动提交模式的
注A DBMS有SQL Server、PostgreSQL和MySQL等A 。该模式下的DML语句如下
例如，PostgreSQL的用户手册中 所示，每一条语句都括在事务的开始语句和结束语句之中。
有如下记述：“PostgreSQL中所有
的SQL指令语句都在事务内执行。
BEGIN TRANSACTION;
即使不执行BEGIN，这些命令语
-- 将运动T恤的销售单价降低1000日元
句也会在执行时悄悄被括在
UPDATE Product
BEGIN和COMMIT（如果成功
SET sale_price = sale_price - 1000
的话）之间。”（《PostgreSQL 9.5.2
WHERE product_name = '运动T恤';
文档》“3-4节 事务”）
COMMIT;
BEGIN TRANSACTION;
-- 将T恤衫的销售单价上浮1000日元
UPDATE Product
SET sale_price = sale_price + 1000
WHERE product_name = 'T恤衫';
COMMIT;
在默认使用B模式的Oracle中，事务都是直到用户自己执行提交或者回滚指
令才会结束。
自动提交的情况需要特别注意的是DELETE语句。如果不是自动提交，即使
使用DELETE语句删除了数据表，也可以通过ROLLBACK命令取消该事务的处
理，恢复表中的数据。但这仅限于明示开始事务，或者关闭自动提交的情况。如果
不小心在自动提交模式下执行了DELETE操作，即使再回滚也无济于事了。这是
一个很严重的问题，初学者难免会碰到这样的麻烦。一旦误删了数据，如果无法重
新插入，是不是想哭的心都有了？所以一定要特别小心。
● 144 第4章 数据更新
ACID特性
DBMS的事务都遵循四种特性，将这四种特性的首字母结合起来统
KEYWORD
●ACID特性 称为ACID特性。这是所有DBMS都必须遵守的规则。
KEYWORD ■原子性（Atomicity）
●原子性（Atomicity）
原子性是指在事务结束时，其中所包含的更新处理要么全部执行，要
么完全不执行，也就是要么占有一切要么一无所有。例如，在之前的例
子中，在事务结束时，绝对不可能出现运动T恤的价格下降了，而T恤
衫的价格却没有上涨的情况。该事务的结束状态，要么是两者都执行了
（COMMIT），要么是两者都未执行（ROLLBACK）。
从事务中途停止的角度去考虑，就能比较容易理解原子性的重要性了。
由于用户在一个事务中定义了两条UPDATE语句，DBMS肯定不会只执
行其中一条，否则就会对业务处理造成影响。
KEYWORD ■一致性（Consistency）
●一致性（Consistency）
一致性指的是事务中包含的处理要满足数据库提前设置的约束，如主
●完整性
键约束或者NOT NULL约束等。例如，设置了NOT NULL约束的列是
不能更新为NULL的，试图插入违反主键约束的记录就会出错，无法执行。
对事务来说，这些不合法的SQL会被回滚。也就是说，这些SQL处理会
被取消，不会执行。
一致性也称为完整性（图4-5）。
图4-5 保持完整性的流程
①事务开始语句
②-1执行更新语句（DML） 成功!
违反约束
②-2执行更新语句（DML） 失败!
②-3执行更新语句（DML） 成功!
③COMMIT;
结束后的状态：只有②-2的更新没有被反映到数据库中
4-4 事务 145 ●
KEYWORD ■隔离性（Isolation）
●隔离性（Isolation）
隔离性指的是保证不同事务之间互不干扰的特性。该特性保证了事务
之间不会互相嵌套。此外，在某个事务中进行的更改，在该事务结束之前，
对其他事务而言是不可见的。因此，即使某个事务向表中添加了记录，在
没有提交之前，其他事务也是看不到新添加的记录的。
KEYWORD ■持久性（Durability）
●持久性（Durability）
持久性也可以称为耐久性，指的是在事务（不论是提交还是回滚）结
●日志
束后，DBMS能够保证该时间点的数据状态会被保存的特性。即使由于系
统故障导致数据丢失，数据库也一定能通过某种手段进行恢复。
如果不能保证持久性，即使是正常提交结束的事务，一旦发生了系统
故障，也会导致数据丢失，一切都需要从头再来。
保证持久性的方法根据实现的不同而不同，其中最常见的就是将事务
的执行记录保存到硬盘等存储介质中（该执行记录称为日志）。当发生故
障时，可以通过日志恢复到故障发生前的状态。
练习题
4.1 A先生在自己的计算机（电脑）上，使用CREATE TABLE语句创建出了
一张空的Product（商品）表，并执行了如下的SQL语句向其中插入数据。
BEGIN TRANSACTION;
INSERT INTO Product VALUES ('0001', 'T恤衫', 
'衣服', 1000, 500, '2008-09-20');
INSERT INTO Product VALUES ('0002', '打孔器', 
'办公用品', 500, 320, '2008-09-11');
INSERT INTO Product VALUES ('0003', '运动T恤', 
'衣服', 4000, 2800, NULL);
表示下一行接续本行，只是由于版面所限而换行。
紧接着，B先生使用其他的计算机连接上该数据库，执行了如下SELECT
语句。这时B先生能得到怎样的查询结果呢？
SELECT * FROM Product;
提示：如果可以使用DELETE语句，就可以对通过CREATE TABLE语句创建出
的空表执行该操作了。
● 146 第4章 数据更新
4.2 如下所示，有一张包含3条记录的Product表。
商品编号 商品名称 商品种类 销售单价 进货单价 登记日期
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
使用如下的INSERT语句复制这3行数据，应该就能够将表中的数据增加
为6行。请说出该语句的执行结果。
INSERT INTO Product SELECT * FROM Product;
4.3 以练习4.2中的Product表为基础，再创建另外一张包含利润列的新表
ProductMargin（商品利润）。
-- 商品利润表
CREATE TABLE ProductMargin
(product_id CHAR(4) NOT NULL,
product_name VARCHAR(100) NOT NULL,
sale_price INTEGER,
purchase_price INTEGER,
margin INTEGER,
PRIMARY KEY(product_id));
请写出向上述表中插入如下数据的SQL语句，其中的利润可以简单地通过
对Product表中的数据进行计算（销售单价-进货单价）得出。
product_id product_name sale_price purchase_price margin
0001 T恤衫 1000 500 500
0002 打孔器 500 320 180
0003 运动T恤 4000 2800 1200
4.4 对练习4.3中的ProductMargin表的数据进行如下更改。
1. 将运动T恤的销售单价从4000日元下调至3000日元。
2. 根据上述结果再次计算运动T恤的利润。
更改后的ProductMargin表如下所示。请写出能够实现该变更的SQL语句。
product_id product_name sale_price purchase_price margin
0001 T恤衫 1000 500 500
0002 打孔器 500 320 180 销售单价和
利润都发生
0003 运动T恤 3000 2800 200 了改变
4-4 事务 147 ●
第5章 复杂查询
视图
子查询
关联子查询
本章重点
前几章我们一起学习了表的创建、查询和更新等数据库的基本操作方法。
从本章开始，我们将会在这些基本方法的基础上，学习一些实际应用中的方法。
本章将以此前学过的SELECT语句，以及嵌套在SELECT语句中的视图和子
查询等技术为中心进行学习。由于视图和子查询可以像表一样进行使用，因此
如果能恰当地使用这些技术，就可以写出更加灵活的SQL了。
5-1 视图
■视图和表
■创建视图的方法
■视图的限制① ——定义视图时不能使用ORDER BY子句
■视图的限制② ——对视图进行更新
■删除视图
5-2 子查询
■子查询和视图
■子查询的名称
■标量子查询
■标量子查询的书写位置
■使用标量子查询时的注意事项
5-3 关联子查询
■普通的子查询和关联子查询的区别
■关联子查询也是用来对集合进行切分的
■结合条件一定要写在子查询中
5-1 视图 149 ●