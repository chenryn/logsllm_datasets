.B grep
报告字节偏移量时，将文件作为 Unix 风格的文本文件看待，也就是说将 CR 字符去掉。这将产生与在一台 Unix 主机上运行
.B grep
完全相同的结果。除非同时使用
.B \-b
选项，否则这个选项无效。这个选项在 MS-DOS 和 MS-Windows 之外的系统中无效。
.TP
.BR \-V ", " \-\^\-version
向标准错误输出打印
.B grep
的版本号。版本号应当包含在所有的 bug 报告中 (参见下面)。
.TP
.BR \-v ", " \-\^\-invert-match
改变匹配的意义，只选择不匹配的行。
.TP
.BR \-w ", " \-\^\-word-regexp
只选择含有能组成完整的词的匹配的行。判断方法是匹配的子字符串必须是一行的开始，或者是在一个不可能是词的组成的字符之后。与此相似，它必须是一行的结束，或者是在一个不可能是词的组成的字符之前。词的组成字符是字母，数字，还有下划线。
.TP
.BR \-x ", " \-\^\-line-regexp
只选择能匹配完整一行的匹配。
.TP
.B \-y
.BR \-i
的同义词，废弃不用。
.TP
.BR \-Z ", " \-\^\-null
输出一个全零字节 (\s-1ASCII\s0 码中的
.B NUL
字符) 而不是一般情况下输出在文件名之后的字符。例如，
.B "grep \-lZ"
在每个文件名之后输出一个全零字节而不是普通的新行符。这个选项使得输出清楚明白，即使文件名的表示中包含特殊字符比如新行符。这个选项可以与命令
.BR "find \-print0" ,
.BR "perl \-0" ,
.BR "sort \-z" ,
和
.B "xargs \-0"
一起使用，来处理任意的文件名，即使是那些含有新行符的文件名。
.SH "正则表达式 REGULAR EXPRESSIONS"
.PP
一个正则表达式是一个描述了一个字符串集合的模式。正则表达式的构造类似于算术表达式，使用各种各样的操作符来将更小的表达式连在一起。
.PP
.B Grep
能理解两种不同版本的正则表达式语法：\*(lqbasic\*(rq 和 \*(lqextended\*(rq。在
.RB "\s-1GNU\s0\ " grep
中，两种语法可以实现的功能是没有区别的。在其他实现中，基本 (basic) 正则表达式表达能力要弱一点。下面的描述适用于扩展的 (extended) 正则表达式，它与基本正则表达式的区别会在最后做一个总结。
.PP
基本的构造块是匹配单个字符的正则表达式。大部分字符，包括所有字母和数字，是匹配它们自身的正则表达式。任何具有特殊含义的元字符可以通过前置一个反斜杠来引用。(may be quoted by preceding it with a backslash.)
.PP
.I "方括号表达式 (bracket)"
是一个字符序列，放在
.B [
和
.BR ]
当中。它匹配序列中的任何一个字符；如果序列中的第一个字符是脱字符 (caret)
.B ^
那么它匹配
.I 不在
序列中的任何一个字符。例如，正则表达式
.B [0123456789]
匹配任何一个数字。
.PP
在方括号表达式之中，一个
.I "范围表达式 (range)"
由两个字符组成，中间用一个连字符 (hyphen) 分隔。它匹配在这两个字符之间的任何一个字符，使用本地化的序列顺序和字符集。(that sorts between the two characters,inclusive, using the locale's collating sequence and character set.) 例如，在默认的 C locale中，
.B [a\-d]
与
.BR [abcd]
等价。典型的，许多 locale 将字符以字典顺序排序，在这些 locale 中，
.B [a\-d]
不与
.BR [abcd]
等价；例如它可能与
.BR [aBbCcDd]
等价。要获得传统的对方括号表达式的解释，可以设定环境变量
.B LC_ALL
值为
.BR C
来使用 locale C 。
.PP
最后，在方括号表达式中有一些预定义的字符类，如下所示。它们的名字是自说明的，它们是
.BR [:alnum:] (字母和数字),
.BR [:alpha:] (字母),
.BR [:cntrl:] (),
.BR [:digit:] (数字),
.BR [:graph:] (),
.BR [:lower:] (小写字母),
.BR [:print:] (可打印字符),
.BR [:punct:] (),
.BR [:space:] (空格),
.BR [:upper:] (大写字母),
和
.BR [:xdigit:]
。例如，
.B [[:alnum:]]
意思是
.BR [0\-9A\-Za\-z]
，但是后一种表示方法依赖于 locale C 和\s-1ASCII\s0 字符编码，而前一种是与 locale 和字符集无关的。(注意这些字符类名中的方括号也是符号名称的一部分，必须包含在用来为序列定界的方括号之中。)
.PP
大多数元字符处于序列中时会失去它们的特殊意义。为了包含一个字面意义 (literal) 的
.B ]
，需要将它放在序列的最前。与此相似，为了包含一个字面意义 (literal) 的
.B ^
，需要将它放在除了序列最前之外的其他位置。最后，为了包含一个字面意义 (literal) 的
.B \-
，需要将它放在序列最后。
.PP
句点符 (period)
.B .
匹配任何一个字符。符号
.B \ew
是
.B [[:alnum:]]
的同义词，
.B \eW
是
.BR [^[:alnum]]
的同义词。
.PP
脱字符 (caret)
.B ^
和美元标记 (dollar)
.B $
分别是匹配一行的首部和尾部的空字串的元字符。符号
.B \e
分别是匹配一个词的首部和尾部的空字串的元字符。符号
.B \eb
匹配一个词边缘 (edge) 的空字串，符号
.B \eB
匹配
.I 不
处于一个词的边缘的空字串。
.PP
一个正则表达式后面可以跟随多种重复操作符之一。
.PD 0
.TP
.B ?
先前的项是可选的，最多匹配一次。
.TP
.B *
先前的项可以匹配零次或多次。
.TP
.B +
先前的项可以匹配一次或多次。
.TP
.BI { n }
先前的项将匹配恰好
.I n
次。
.TP
.BI { n ,}
先前的项可以匹配
.I n
或更多次。
.TP
.BI { n , m }
先前的项将匹配至少
.I n
词，但是不会超过
.I m
次。
.PD
.PP
两个正则表达式可以连接到一起；得出的正则表达式可以匹配任何由两个分别匹配连接前的子表达式的子字符串连接而成的字符串。
.PP
两个正则表达式可以用中缀操作符
.BR |
联合到一起，得出的正则表达式可以匹配任何匹配联合前的任何一个子表达式的字符串。
.PP
重复操作符的优先级比连接高，接下来又比选择的优先级高。一个完整的子表达式可以用圆括号 (parentheses) 括住来超越这些优先级规则。(to override these precedence rules.)
.PP
反向引用
.BI \e n\c
\& 中，
.I n
是一个数字，匹配正则表达式中，以第
.IR n
个圆括号括住的子表达式已匹配的子字符串。
.PP
在基本正则表达式中，元字符
.BR ? ,
.BR + ,
.BR { ,
.BR | ,
.BR ( ,
和
.BR )
丧失了它们的特殊意义；作为替代，使用加反斜杠的 (backslash) 版本
.BR \e? ,
.BR \e+ ,
.BR \e{ ,
.BR \e| ,
.BR \e( ,
和
.BR \e)
。
.PP
传统的
.B egrep
不支持元字符
.B {
，并且一些
.B egrep
的实现通过支持
.B \e{
来代替它，因此可移植的脚本应当避免
在
.B egrep
中使用
.B {
模式，应当使用
.B [{]
来匹配一个字面意义 (literal) 的
.BR {
。
.PP
\s-1GNU\s0
.B egrep
通过假设如果
.B {
处于 an invalid interval specification 的起始，就不是一个特殊字符，来支持传统的用法。例如，shell 命令
.B "egrep '{1'"
将会搜索这个两字符的字符串
.B {1
而不是报告在正则表达式中发生了语法错误。\s-1POSIX.2\s0 允许这个行为，将其视为一个扩展，但是可移植的脚本应当避免使用它。
.SH "环境变量 ENVIRONMENT VARIABLES"
.B Grep
的行为受下列环境变量影响。
.PP
一个 locale
.BI LC_ foo
是通过按下面的顺序，
.BR LC_ALL ,
.BR LC_\fIfoo\fP ,
.BR LANG ,
检查这三个环境变量的取值而确定的。设置了的第一个变量指定了 locale。例如，如果
.B LC_ALL
没有设置，但是
.B LC_MESSAGES
设置为
.BR pt_BR
，那么巴西的葡萄牙语 (Brazilian Portuguese) 将用作
.B LC_MESSAGES
locale 的值。如果没有设置这其中任何一个环境变量，或者没有安装所设置的 locale 目录，或者如果
.B grep
没有将国家和语言支持 (national language support (\s-1NLS\s0)) 编译在内，将默认使用 locale C。
.TP
.B GREP_OPTIONS
这个变量指定了将放在所有显式指定的选项之前的默认选项。例如，如果
.B GREP_OPTIONS
是
.BR "'\-\^\-binary-files=without-match \-\^\-directories=skip'"
的话，
.B grep
将像已经在任何显式指定的选项之前指定了
.B \-\^\-binary-files=without-match
和
.B \-\^\-directories=skip
选项那样来运作。选项以空白 (whitespace) 分隔。一个反斜杠 (backslash) 使得下一个字符转义 (escape)，因此可以用来指定一个含有空白或者反斜杠的选项。
.TP
.B GREP_COLOR
指定用来高亮显示的标记。
.TP
\fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLANG\fP
这些变量指定了 locale
.B LC_COLLATE
，决定了解释类似
.BR [a\-z]
的范围表达式时的序列顺序 (collating sequence) 。
.TP
\fBLC_ALL\fP, \fBLC_CTYPE\fP, \fBLANG\fP
这些选项指定了 locale
.B LC_CTYPE
，决定了字符的类型，例如，哪些字符是空白 (whitespace) 。
.TP
\fBLC_ALL\fP, \fBLC_MESSAGES\fP, \fBLANG\fP
这些选项指定了 locale
.B LC_MESSAGES
，决定了
.B grep
的消息使用的语言。默认的 locale C 使用美国英语的消息。
.TP
.B POSIXLY_CORRECT
如果设置了的话，
.B grep
将像 \s-1POSIX.2\s0 要求的那样来运作；否则，
.B grep
将像其他 \s-1GNU\s0 程序一样来运作。\s-1POSIX.2\s0 要求文件名之后的选项必须视为文件名；默认情况下，这些选项被交换到操作数列表的前面，被当作选项来处理。同时， \s-1POSIX.2\s0 要求不可识别的选项在诊断消息中表示为 \*(lqillegal\*(rq，但是既然它们没有真正触犯法律，因此默认情况下它们在诊断 (diagnose) 消息中表示为 \*(lqinvalid\*(rq。
.B POSIXLY_CORRECT
同时禁止了下面描述的 \fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP。
.TP
\fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP
(这里
.I N
是
.BR grep 's
数字形式的进程ID。) 如果这个环境变量的值的第
.IR i
个字符是
.BR 1
，那么不将
.B grep
的第
.IR i
个操作数视为一个选项，即使它看上去像。shell 可以将这个变量设置在它运行的每个命令的环境中，指定哪个操作数是文件名通配符扩展的结果，因此不应当被视为选项。这个行为只有在使用 \s-1GNU\s0 C 库时有效，并且只有在
.B POSIXLY_CORRECT
没有设置的时候。
.SH 诊断 DIAGNOSTICS
.PP
一般地，如果找到了选择的行，退出时状态值为0，否则为1。但是如果发生错误，退出时状态值是2，除非指定了
.B \-q
或
.B \-\^\-quiet
或
.B \-\^\-silent
选项，并且找到了选择的行。
.SH BUGS
.PP
bug 报告的电子邮件地址是
.BR PI:EMAIL 。
一定要在\*(lqSubject:\*(rq中带有 \*(lqgrep\*(rq 这个词。
.PP
在
.BI { n , m }
结构中重复次数过多会导致
.B grep
使用大量内存。另外，一些过分晦涩的正则表达式需要指数级的时间和空间，可能会导致
.B grep
耗尽所有内存。
.PP
向后引用 (backreferences) 非常慢，可能需要指数级的时间。
.SH "[中文版维护人]"
.B 袁乙钧 
.SH "[中文版最新更新]"
.B 2003.11.03
.SH "《中国linux论坛man手册页翻译计划》:"
.BI http://cmpp.linuxforum.net 
.\" Work around problems with some troff -man implementations.
.br