## 目录结构
这里是看了w0s1np师傅的目录结构，嘻嘻.....
    project  应用部署目录
    ├─application           应用目录（可设置）
    │  ├─common             公共模块目录（可更改）
    │  ├─index              模块目录(可更改)
    │  │  ├─config.php      模块配置文件
    │  │  ├─common.php      模块函数文件
    │  │  ├─controller      控制器目录
    │  │  ├─model           模型目录
    │  │  ├─view            视图目录
    │  │  └─ ...            更多类库目录
    │  ├─command.php        命令行工具配置文件
    │  ├─common.php         应用公共（函数）文件
    │  ├─config.php         应用（公共）配置文件
    │  ├─database.php       数据库配置文件
    │  ├─tags.php           应用行为扩展定义文件
    │  └─route.php          路由配置文件
    ├─extend                扩展类库目录（可定义）
    ├─public                WEB 部署目录（对外访问目录）
    │  ├─static             静态资源存放目录(css,js,image)
    │  ├─index.php          应用入口文件
    │  ├─router.php         快速测试文件
    │  └─.htaccess          用于 apache 的重写
    ├─runtime               应用的运行时目录（可写，可设置）
    ├─vendor                第三方类库目录（Composer）
    ├─thinkphp              框架系统目录
    │  ├─lang               语言包目录
    │  ├─library            框架核心类库目录
    │  │  ├─think           Think 类库包目录
    │  │  └─traits          系统 Traits 目录
    │  ├─tpl                系统模板目录
    │  ├─.htaccess          用于 apache 的重写
    │  ├─.travis.yml        CI 定义文件
    │  ├─base.php           基础定义文件
    │  ├─composer.json      composer 定义文件
    │  ├─console.php        控制台入口文件
    │  ├─convention.php     惯例配置文件
    │  ├─helper.php         助手函数文件（可选）
    │  ├─LICENSE.txt        授权说明文件
    │  ├─phpunit.xml        单元测试配置文件
    │  ├─README.md          README 文件
    │  └─start.php          框架引导文件
    ├─build.php             自动生成定义文件（参考）
    ├─composer.json         composer 定义文件
    ├─LICENSE.txt           授权说明文件
    ├─README.md             README 文件
    ├─think                 命令行入口文件
## 利用链分析
众所周知， **wakeup()和**
destruct()这两种魔术方法在反序列化中是十分重要的存在，在面对这么大量的代码时，我们可以以这两种函数为切入点，来找出反序列化漏洞。
    __wakeup() //执行unserialize()时，先会调用这个函数
    __destruct() //对象被销毁时调用
找到切入点之后，用seay全局查询一下那里用到了这两种魔术方法
然后就是审计代码找可以利用的点了
    hash = spl_object_hash($this);
            static::$safeStorage[$this->hash] = [];
        }
        public function storeSafely($key, $value)
        {
            static::$safeStorage[$this->hash][$key] = $value;
        }
        public function retrieveSafely($key)
        {
            if (array_key_exists($key, static::$safeStorage[$this->hash])) {
                return static::$safeStorage[$this->hash][$key];
            }
        }
        public function __destruct()
        {
            unset(static::$safeStorage[$this->hash]);
        }
    }
第一个存在这个方法的是一个安全储存的部分，用于登录啥的，不存在我们要寻找的东西。
再看下一段
    /**
         * Disconnect on destruction.
         */
        public function __destruct()
        {
            $this->disconnect();
        }
这一块也没啥用，这里的销毁是用于连接断开时销毁，这一块代码主要是关于适配器的，是将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性
，让原本因接口不匹配不能一起工作的两个类可以协同工作。
再看下一段
    autosave) {
                $this->save();
            }
        }
根据文件名判断应该也是个差不多的玩意，但是只要`$this->autosave`为`false`那么就可以调用`save`方法
    /**
         * {@inheritdoc}
         */
        public function autosave()
        {
            if ($this->autosave) {
                $this->save();
            }
        }
没啥用继续往下看。
但是继续跟进save方法就没有相关方法了，先放在一边，我们再看下一块。
在`vendor\topthink\think-orm\src\Model.php`中找到了比较有嫌疑的
    /**
         * 析构方法
         * @access public
         */
        public function __destruct()
        {
            if ($this->lazySave) {
                $this->save();
            }
        }
    }
这里只要让`this->lazySave`为true就可以成功运行，调用`save`方法。跟进一下看看`save`方法是个啥
    public function save(array $data = [], string $sequence = null): bool
        {
            // 数据对象赋值
            $this->setAttrs($data);
            if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
                return false;
            }
            $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
            if (false === $result) {
                return false;
            }
其中这一句比较关键
    if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
                return false;
            }
这里只要`this->isEmpty()`或`false === $this->trigger('BeforeWrite')`就会返回false
里面一个条件为真才能不直接`return`，也即需要两个条件：
    $this->isEmpty()==false
    $this->trigger('BeforeWrite')==true
第一个条件需要继续跟进`isEmpty()`，我们先放一下，第二个条件是当`this`触发`BeforeWrite`的结果是`true`
再看`trigger('BeforeWrite')`，位于`ModelEvent`类中：
    protected function trigger(string $event): bool
        {
            if (!$this->withEvent) {
                return true;
            }
            .....
        }
让`$this->withEvent==false`即可满足第二个条件，
我们跟进`isEmpty()`。
    /**
         * 判断模型是否为空
         * @access public
         * @return bool
         */
        public function isEmpty(): bool
        {
            return empty($this->data);
        }
可以看到他的作用是判断模型是否为空的，所以只要`$this->data`不为空就ok
让`$this->data!=null`即可满足这个条件。
再看这一句
    $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
这里的意思是如果`this->exists`结果为`true`，那么就采用`this->updateData()`，如果不是就采用`this->insertData($sequence)`
    /**
         * 设置数据是否存在
         * @access public
         * @param bool $exists
         * @return $this
         */
        public function exists(bool $exists = true)
        {
            $this->exists = $exists;
            return $this;
        }
这里可以看到结果是为`true`的，所以我们跟进`updateData()`
    /**
         * 保存写入数据
         * @access protected
         * @return bool
         */
        protected function updateData(): bool
        {
            // 事件回调
            if (false === $this->trigger('BeforeUpdate')) {
                return false;
            }
            $this->checkData();
            // 获取有更新的数据
            $data = $this->getChangedData();
            if (empty($data)) {
                // 关联更新
                if (!empty($this->relationWrite)) {
                    $this->autoRelationUpdate();
                }
                return true;
            }
            if ($this->autoWriteTimestamp && $this->updateTime) {
                // 自动写入更新时间
                $data[$this->updateTime]       = $this->autoWriteTimestamp();
                $this->data[$this->updateTime] = $data[$this->updateTime];
            }
            // 检查允许字段
            $allowFields = $this->checkAllowFields();
这里的话想要执行`checkAllowFields()`方法需要绕过前面的两个if判断，必须满足两个条件
    $this->trigger('BeforeUpdate')==true
    $data!=null
第一个条件上面已经满足了，只要关注让`data`不等于`null`就可以了
找找`data`的来源，跟进`getChangedData()`方法，在`/vendor/topthink/think-orm/src/model/concern/Attribute.php`中
    /**
         * 获取变化的数据 并排除只读数据
         * @access public
         * @return array
         */
        public function getChangedData(): array
        {
            $data = $this->force ? $this->data : array_udiff_assoc($this->data, $this->origin, function ($a, $b) {
                if ((empty($a) || empty($b)) && $a !== $b) {
                    return 1;
                }
                return is_object($a) || $a != $b ? 1 : 0;
            });
            // 只读字段不允许更新
            foreach ($this->readonly as $key => $field) {
                if (array_key_exists($field, $data)) {
                    unset($data[$field]);
                }
            }
            return $data;
        }
    $data = $this->force ? $this->data : array_udiff_assoc($this->data, $this->origin, function ($a, $b)
这一句如果`this->force`结果为`true`，那么便执行`this->data`，如果不是那么就会执行`array_udiff_assoc($this->data,
$this->origin, function ($a, $b)`
但因为`force`没定义默认为`null`，所以进入了第二种情况，由于`$this->data,
$this->origin`默认也不为null，所以不符合第一个`if`判断，最终`$data=0`，也即满足前面所提的第二个条件，`$data!=null`。
然后回到`checkAllowFields()`方法，查看一下他是如何调用的。
    /**
         * 检查数据是否允许写入
         * @access protected
         * @return array
         */
        protected function checkAllowFields(): array
        {
            // 检测字段
            if (empty($this->field)) {
                if (!empty($this->schema)) {
                    $this->field = array_keys(array_merge($this->schema, $this->jsonType));
                } else {
                    $query = $this->db();
                    $table = $this->table ? $this->table . $this->suffix : $query->getTable();
                    $this->field = $query->getConnection()->getTableFields($table);
                }
                return $this->field;
            }
            $field = $this->field;
            if ($this->autoWriteTimestamp) {
                array_push($field, $this->createTime, $this->updateTime);
            }
            if (!empty($this->disuse)) {
                // 废弃字段
                $field = array_diff($field, $this->disuse);
            }
            return $field;
        }
这里在第10-15行代码中可以看到，如果想进入宗福拼接操作，就需要进入else中，所以我们要使`$this->field =
array_keys(array_merge($this->schema,
$this->jsonType));`不成立，那么就需要让`$this->field=null`，`$this->schema=null`。
在第14行中出现了`$this->table .
$this->suffix`这一字符串拼接，存在可控属性的字符拼接，可以触发`__toString`魔术方法，把`$this->table`设为触发`__toString`类即可。所以可以找一个有`__tostring`方法的类做跳板，寻找`__tostring`，
在`/vendor/topthink/think-orm/src/model/concern/Conversion.php`中找到了
    /**
         * 转换当前模型对象为JSON字符串
         * @access public
         * @param  integer $options json参数
         * @return string
         */
        public function toJson(int $options = JSON_UNESCAPED_UNICODE): string
        {
            return json_encode($this->toArray(), $options);
        }
        public function __toString()
        {
            return $this->toJson();
        }
看来使需要使用`toJson()`，跟进一下