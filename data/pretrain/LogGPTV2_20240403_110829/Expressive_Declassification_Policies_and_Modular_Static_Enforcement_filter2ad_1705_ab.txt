} else return new Msg("unavailable");
}
Note that the parameters and local variables are all L
(unmarked). Only certain ﬁelds of patient records are
marked H. With this labeling, the program typechecks
except for the assignment to ir.diag. We desig-
nate the assignment as a declassiﬁcation, exempt from
typechecking but subject to a ﬂowspec of the form (2)
where the state predicate P in the precondition is:
pr .committed ∧ db.recent (pr )∧
sys.auth(b, ’book’) ∧ sys.auth(r , ’rep’)∧
log.contains(b.id , r .id , pr .id , pr .vsn, ’release’)
The agreement part of the precondition, i.e., ϕ in
is A(pr .diag) —this expresses “what” is re-
(2),
leased. The presence of ﬂowspecs indicate the program
points “where” release occurs. Predicate P expresses
“when” the release happens. The conditions repre-
sent a sequence of requisite events: db.recent (pr )
expresses that pr is the most recent patient record;
sys.auth(b, ’book’) says that b is authenticated by sys
as bookkeeper; etc.
Our enforcement r´egime accepts the program. One
ingredient of enforcement is that the rest of the pro-
gram typechecks, essentially by the rules in [4] which
disallow declassiﬁcation inside a high conditional (in
addition to the usual rules that prevent direct and
implicit ﬂows). Another ingredient is that the ﬂowtriple
{P &ϕ} ir .diag := pr .diag {A(ir .diag)}
4
is valid; indeed, the stronger ﬂowtriple {ϕ} ir .diag :=
pr .diag {A(ir .diag)} can be proved in the logic
of
[1] or using self-composition with an off-the-
shelf automated veriﬁer [26] (both deal with muta-
ble heap objects). The last ingredient is that P is
a valid pre-assertion, i.e.,
it holds on all paths to
the declassiﬁcation, as we now argue in detail. The
conjunct pr .committed holds owing to the guard con-
dition of the if. The conjuncts sys.auth(b, ’book’) and
sys.auth(r , ’rep’) are preconditions to the method —
its calls must therefore be veriﬁed for these conditions.
Recency should be ensured by the speciﬁcation of
lookup. (This would get more complicated if we con-
sidered concurrent access to the database; the policy is
perhaps too strong on this point.) Presence of the log
entry is ensured by the call to append .
Conditioned gradual release. By itself, checking of
security-labelled types should enforce noninterference.
(A practical checker of this kind is Jif [24]; others
have been formally validated [25], [32].) But we ex-
empt declassiﬁcation commands from type checking!
Instead, each declassiﬁcation is required to form a
valid ﬂowtriple for its associated ﬂowspec —and this
only says something about the declassiﬁcation code
in isolation. To put the two together we propose an
enrichment of the gradual release property [4]. An
observer at level L sees each low action —assignment
to a low variable, declassiﬁcation step, or termina-
tion. Gradual release says that the observer gains no
knowledge about the initial value of secret variables
except from declassiﬁcations. We require in addition
that what is learned about initial secrets is only what is
allowed by the associated ﬂowspec precondition. That
is, they learn no more than they would know if told
the current value of each e for which A(e) is in the
precondition (together with what is known from any
previous releases). Moreover, a declassiﬁcation step
must not be taken except from a state that satisﬁes the
state predicate part of the ﬂowspec precondition. The
formal deﬁnition is in Sect. 5. In the absence of de-
classiﬁcation, conditioned gradual release amounts to
noninterference: knowledge remains constant through
every step of a computation.
Fine points. To achieve modular enforcement using
off-the-shelf tools, we deﬁne our security property to
interpret ﬂowspec preconditions in terms of the current
value of expressions e that occur in agreements A(e).
This poses a risk of laundering: If h0 and h1 are high
variables, a policy with precondition A(h0) would
appear to allow the release of h0, but declassiﬁcation
of h0 subsequent to an assignment h0 := h1 would
actually release h1. The solution to this known prob-
lem is to disallow reassignment of high variables prior
to their use in declassiﬁcations [28].
It is not really practical to disallow all updates of
high variables prior to their use in declassiﬁcations.
For example, one would like to make multiple uses of
an electronic wallet, each time decreasing the balance,
though of course if the user allows many such trans-
actions the entire balance could be revealed. What is
needed is means to designate sessions or transactions,
so a declassiﬁcation policy can refer to the initial value
of a high variable within a session, and disallow its
update prior to release. So too, the security property
would refer to secrets at session start, not the system’s
initial state. Our insistence to use ordinary assertions
rather than exotic syntax may pay off here, since
session boundaries are typically embodied in program
control and data state, and the notion of “session” may
be policy-speciﬁc. For example, a session for a login
password is bracketed by uses of the passwd program.
Thorough treatment of this issue is left to future work.
Another feature of our technique is that a ﬂowspec
could allow modiﬁcation of several low variables (or
heap locations) in a single declassiﬁcation. However,
in order to adhere to the principle of non-occlusion,2 a
declassiﬁcation step should be atomic as viewed by
the low observer (e.g., by use of locks). To avoid
distraction, our formalization achieves atomicity by
restricting declassiﬁcation to single assignments.3
Finally,
the semantic formalization of our secu-
rity property effectively treats a ﬂowspec precondition
P &ϕ as licensing the release of not only what is
explicitly mentioned in ϕ but also any high information
in the control state. To ensure that the policy P &ϕ
is meaningful
in isolation, we choose to disallow
any declassiﬁcation in the context of a high branch
condition. This we do in the enforcement r´egime.4
3. Programming language
This section formalizes the simple imperative lan-
guage over integer variables, augmented with the so-
called declass command. To focus on the key ideas
in a comprehensible way, we refrain from considering
pointers, procedures, or other language features. But a
2. Adding declassiﬁcation cannot make an insecure program se-
cure [29].
3. This is already quite expressive in conjunction with data
structures (Sect. 8) or encryption keys [4], but it precludes wrapping
example (1) inside a declassiﬁcation.
4. As it happens the security condition is well-deﬁned even for
programs, such as example (6), with declassiﬁcation under high
guard. Little would be gained by complicating the security property
on this account.
C , B , M ::= declass ι hx := ei | x := e | skip
| C ; C | if e then C else C | while e do C
e ::= x | 0 | 1 | . . . | e + e | e ≤ e | . . .
Figure 1. Grammar of commands and expres-
sions; ι ranges over declass identiﬁers.
h stop, s i → h stop, X i
h skip, s i → h stop, s i
h x := e, s i → h stop, s[x := [[e]](s)] i
h declass ι hx := ei, s i → h stop, s[x := [[e]](s)] i
h C0, s i → h C 0
0, s 0 i
C 0
0 6= stop
h C0; C1, s i → h C 0
0; C1, s 0 i
h C0, s i → h stop, s 0 i
h C0; C1, s i → h C1, s 0 i
[[e]](s) 6= 0
h if e then C0 else C1, s i → h C0, s i
[[e]](s) = 0
h if e then C0 else C1, s i → h C1, s i
[[e]](s) = 0
h while e do C , s i → h stop, s i
[[e]](s) 6= 0
h while e do C , s i → h C ; while e do C , s i
Figure 2. Semantics; s, s 0
states.
range over non-X
number of technicalities are needed to formalize the
security property (Sect. 5).
The command “declass ι hx := ei” behaves as x :=
e. Its syntax includes an identiﬁer, ι, used later to refer
to an associated ﬂowspec. A well-formed program has
a different identiﬁer ι for each declassiﬁcation.
Figure 2 deﬁnes the semantics. We write [[e]](s) for
the value of expression e in state s. A state s is a map-
ping from variables to values, and we write s[x := n]
for updates. The semantics is given as a deterministic
transition relation, →, over conﬁgurations of the form
h C , s i where s is a state and C is either a command
or stop. The latter triggers an observable step to the
improper state, X, for termination.
Every command can be written in the form C0; C1
or else C0, where C0 is not a sequence, and then we
call C0 the active command. The active command is
the one that gets replaced in a transition step (Fig. 2).
Deﬁne actc(h C , s i) to be the active command of
t i) = stop. Deﬁne
C , and deﬁne actc(h stop,
5
code(h C , t i) = C and state(h C , t i) = t .
An initial conﬁguration h C , s i determines a unique
ﬁnite or inﬁnite run, that is, the maximal sequence of
conﬁgurations given by the transition relation, starting
with h C , s i. We use the term pre-run for a ﬁnite,
non-empty preﬁx of a run.
An action is a transition step for an assignment,
declassiﬁcation, or termination (i.e., the step to X). The
other transitions, e.g., those for if and while, never
change the state. It is convenient to work with a notion
of trace which extracts from a pre-run the series of
states resulting from actions.
Let M be a ﬁxed command, the main program. We
deﬁne several notions based on runs of M , leaving
M implicit
in the notation. For any pre-run S of
M , let trace(S ) be the sequence of states starting
with state(S0) and thereafter including every state
that results from an action. For any state s,
let
| S is a pre-run from s}.
Traces(s) = {trace(S )
Deﬁne TRACES = ∪s
· Traces(s). Note that
declassiﬁcation steps are not marked as such in traces.
if
trace(S ) = σ. A trace σ can have more than one
generating pre-run. The minimal generating pre-run
for σ is just the shortest one, i.e., with no unnecessary
steps at its tail. It is unique since the run is determined
by the initial state, σ0.
We say S is a generating pre-run for σ,
We do not distinguish between a state s and the
singleton trace consisting of s. Juxtaposition is used
to express catenation, e.g., σ s is the trace consisting
of σ followed by s. Also σi
is the ith element,
counting from zero. We write last (σ) for len(σ) − 1
and abbreviate σlast (σ) as σlast .
4. Policy speciﬁcation
In this section we formalize our notion of policy
speciﬁcation. This is intended as a foundation for
concrete policy languages, so we begin with some
discussion of desiderata for policy speciﬁcations.
A “where” policy [29] designates where in the code
declassiﬁcation is allowed. This goes against common
wisdom that policies should be separate from imple-
mentations. If the intention of a “where” policy is to
restrict declassiﬁcation to some program components
that have been subject to security audits, or the code
is in high-integrity storage, then “where in the code”
is at the granularity of, say, a load module. Arguably
that is somewhat separate from the implementation. On
the other hand, extant “where” policy formulations are
ﬁne grained, e.g., individual assignments are marked
as declassiﬁers (e.g., [4], [24]). This is fragile, as im-
6
plementations often change, and it raises the question
of an independent meaning for the policy.
Judging by the examples in the literature, the ratio-
nale for ﬁne-grained “where” policies is pragmatic: the
speciﬁer may choose as declassiﬁers some assignments
that appear to conform to some (informal) “what” or
“when” policy, based on the speciﬁer’s understanding
of the code. In this paper we provide direct means to
specify “what” and “when” policies. So we formulate
policy in a way that caters for separating it from the
code, yet still enables ﬁne-grained “where” speciﬁca-
tion if desired.
Deﬁnition 4.1 (policy): A baseline security policy
for a program M is a mapping, Γ, from the variables
of M to the security levels {L, H}. A declassiﬁca-
tion policy is a set, Φ, of ﬂowspecs, of the form
ﬂow pre P &ϕ mod x where
• ϕ is a conjunction of agreements, A(e0)∧A(e1)∧
. . . A(ek ) where the ei are expressions;
• P is a formula over the program variables;
• the “modiﬁable” variable x is L according to the
baseline policy Γ.
For the language of Sect. 3, P can be a ﬁrst-order
formula with atomic predicates for integer arithmetic.
Technically, all we need is that the semantics is two-
valued, i.e., the satisfaction relation s |= P means
that P is true in state s and otherwise P is false. For
the richer programming language discussed in Sect. 8,
formulas would be as in JML and similar speciﬁcation
languages [7], [19], and the “modiﬁes” clause could
designate a heap location or region.
Agreement formulas P &ϕ are interpreted in a pair
of (non-X) states. For ϕ of the form A(e0)∧. . . A(ek ),
deﬁne (s, t ) |= P &ϕ iff
(3)
(cid:26) s |= P and t |= P and
[[ei ]](s) = [[ei ]](t ) for 0 ≤ i ≤ k
As explained in Sect. 2 and formalized in Sect. 5,
we interpret the policy to mean that information ﬂows
in accord with the baseline policy Γ, except
that
each declass may have additional ﬂows if justiﬁed by
some ﬂowspec in Φ. One might say that the declass
commands in the code are expressing the “where” part
of the policy. To see why we choose not to refer to
them as part of the policy, let us reconsider the issue
of separating code from policy.
Labeling of variables is somewhat separate from
the code that acts on them. (Only external interfaces
need be labelled; the rest, e.g., local variables, ﬁelds,
methods, can be inferred [18], [24], [31], [33].) One
can imagine “what” policies being expressed using an
augmented labeling that designates levels for certain
“escape hatch” expressions, overriding the level given
by usual typing rules; e.g., h ≥ k could be declared
low despite the join of its variable levels being high.
This is explored by Hicks et al [17]. Several works
explore type labeling for declassiﬁcation (e.g., [10],
[11], [20]).
So long as P and ϕ refer only to global variables
and to x , one can read ﬂow pre P &ϕ mod x as a
schematic speciﬁcation of “what” and “when” policy,
taking x to be a placeholder for any variable. Instead of
assuming that the code has marked declass commands,
we could let the type-checker add a declass for each
assignment that violates the baseline policy and is not
in the scope of a high branch. (The latter is needed
in order to maintain the interpretation of a ﬂowspec
precondition as completely specifying what is released
—recall the last “ﬁne point” in Sect. 2.)
Many interesting policies can be expressed using
schematic ﬂowspecs. For the example in Sect. 2, we
can take ir and pr to be schematic variables so
that
the policy is applicable to any assignment of
a PatientRecord’s diagnosis to an InsRecord.
The preconditions refer to ﬁelds of these objects and
to global data structures (the log and the authentication
system).
To cater for schematic use of ﬂowspecs, our formal-