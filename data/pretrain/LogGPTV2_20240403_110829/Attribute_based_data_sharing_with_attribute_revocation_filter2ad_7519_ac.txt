(i)
i=2rk
j
, and
each j ∈ U and j 6= i, Dj is calculated as follows.
Case 1. j ∈ S.
1) Dj = B
r′
j
δj ·R
(k)
j = g
r′
j
rj
δj ·R
(k)
j
rj
, if j ∈ I and ˜j = +j;
2) Dj = B
δj ·R
(k)
j = g
δj ·R
(k)
j
·b , if j ∈ I and ˜j = −j, or
j /∈ I;
Case 2. j /∈ S.
r′
j
(k)
n+j = g
ζj ·R
rj
(k)
n+j
ζj ·R
·b , if j ∈ I and ˜j = j, or
1) Dj = g
j /∈ I;
r′
j
(k)
n+j = g
(k)
rj
n+j , if j ∈ I and ˜j = −j.
ζj ·R
ζj ·R
2) Dj = B
Di is calculated as:
Di = A
1
ζi ·R
(k)
i
· g
r′
i
(k)
ζi ·R
i = g
ab+r′
i
ζi ·Rk
i
·b
·b = g
ri
(k)
i
ζi ·R
·b .
For each attribute j ∈ U , Fj is calculated as follows. If
1) Fj = g
j 6= i, then
r′
j
ηj = g
r′
j
ηj = g
rj
ηj ·b , if j ∈ I;
rj
ηj , if j /∈ I;
Fi is calculated as follows:
ab+r′
i
2) Fj = B
1
ηi · g
r′
i
ηi = g
Fi = A
·b
ηi ·b = g
ri
ηi ·b .
Challenge. The adversary submits two equal length mes-
sages M0 and M1. The challenger ﬂips a random coin b, sets
˜C = Mb · Z, and outputs the ciphertext CT ∗ as follows.
CT ∗ = (ver∗, AS∗, ˜C, C, {C δi·R
(ver∗ )
(ver∗ )
i
}i∈I∧˜i=+i,
{C ζi·R
n+i }i∈I∧˜i=−i, {C ηi }i /∈I ).
Phase 2. Phase 1 is repeated.
Guess. A submits a guess b0 of b. If b0 = b, B will output
µ′ = 0, meaning that (A, B, C, Z) is a valid DBDH-tuple;
otherwise, B outputs µ′ = 1, indicating that (A, B, C, Z) is
just a random 4-tuple. In the case of µ= 1, the adversary
obtains no information about b. We thus have P r[b0 6= b|µ =
1] = 1
2 . B just randomly guesses µ′= 1 when b 6= b0, we have
P r[µ′ = µ] = 1
2 . In the case of µ= 0, the adversary obtains
an encryption of mb, and his advantage is ADVCP A by def-
inition. We thus have P r[b = b0|µ = 0] = 1
2 + ADVCP A.
Since B guesses µ′ = 0 whenever b = b0, we have P r[µ′ =
µ|µ = 0] = 1
the DBDH game is 1
1] − 1
2 = 1
2 ( 1
2 + ADVCP A. The overall advantage of B in
2 P r[µ′ = µ|µ =
2 P r[µ′ = µ|µ = 0] + 1
2 + ADVCP A) + 1
2
1
2 − 1
2 = 1
2 ADVCP A.
5. CCA SECURITY CONSTRUCTION
We now proceed to discuss the construction of the cho-
sen ciphertext secure scheme. For IBE schemes, a common
practice of constructing a CCA secure scheme from a CPA
secure one is to generate one-time signature keys (Kv, Ks)
and sign the ciphertext with Ks with a strongly existentially
unforgeable signature scheme, while Kv is viewed as the mes-
sage receiver’s identity. This technique was proposed by
Canetti, Halvei, and Katz [7]. In [9], Cheung and Newport
applied the similar technique to CP-ABE and constructed
a CCA secure CP-ABE scheme from the CPA secure one.
Their construction deﬁnes an attribute for each bit in the
key space of Kv, each attribute having two occurrences for
its binary values. Each user secret key contains two compo-
nents for the both occurrences of each bit. Thereafter, these
attributes are treated similarly as other normal attributes.
For encryption, the encryptor chooses a pair (Kv, Ks) and
encrypts the message with the attributes for Kv in addition
to other normal attributes. The whole ciphertext is then
signed with Ks. The ciphertext along with the signature
is sent to receiver(s), who will verify the signature before
decryption.
In our work, it seems to be a contradiction to construct
a CCA secure scheme since we on one hand require the ci-
phertext to be non-malleable, and on the other hand give
the proxy re-key’s to proxy servers and allow them to re-
encrypt ciphertexts. However,
in our scheme ciphertext
re-encryption is just limited to updating partial ciphertext
components to the latest version. Modiﬁcation of the un-
derlying message or the access structure is not permitted.
In terms of non-malleability, we just need to prevent adver-
saries from modifying the message or the access structure.
Based on this observation, we adopt the same technique as
[9] but just sign on partial ciphertext components.
5.1 CCA Secure Construction
The seven algorithms in the CCA secure construction are
deﬁned as follows, assuming that the signature veriﬁcation
key Kv has w bits. Denote the set {1, 2, · · · , w} as W .
Setup(1λ) The same as the CPA secure construction ex-
cept that, here 2w extra attributes are deﬁned for Kv. Now
the system master key is: M K = (y, t1, · · · , t3n, t3n+1, · · · ,
t3n+2w), and the public parameters are: P K=(e, g, Y , T1,
· · · , T3n, T3n+1, · · · , T3n+2w).
Initialize the system wide
version number ver as 1 and publish (ver, P K). (ver, M K)
is kept by the authority.
Enc(M, AS, P K) AS is deﬁned to be an AND gate as
before. The encryptor ﬁrst chooses one-time signature key
pair (Kv, Ks), and a random number s ∈ Zp. M is encrypted
as: (ver, AS, ˜C, ˆC, {Ci}i∈U , {Ki}i∈W , Kv), where ver is cur-
rent version number, ˜C = M Y s, ˆC = gs. For each i ∈ I,
Ci = T s
If i ∈ U \I,
i
Ci = T s
2n+i. For each i ∈ W , Ki = T s
3n+i if the ith bit
of Kv is 0, otherwise, Ki = T s
3n+w+i. The encryptor then
if ˜i = +i; or Ci = T s
n+i if ˜i = −i.
signs on tuple (AS, ˜C, ˆC, {Ki}i∈W , Kv) with Ks, and ob-
tains a signature δ. Finally, the ciphertext of M is output
as CT = (ver, AS, ˜C, ˆC, {Ci}i∈U , {Ki}i∈W , Kv, δ).
Deﬁnition 2. (CCA SECURITY) We say that our scheme
is CCA secure if ADVCCA is negligible (in λ) for any poly-
nomial time adversary.
KeyGen(M K, S) First choose a random numbers ri ∈
Zp for each i ∈ U S W . Let r = Pw+n
i=1 ri. The secret
key is deﬁned as SK = (ver, S, D, ¯D = {Di, Fi}i∈U , ˆD =
{ ˆDi,0, ˆDi,1}i∈W ), where D and ¯D are the same as the CPA
ˆD is deﬁned as: ˆDi,0 = g
rn+i
t3n+i and
secure construction.
ˆDi,1 = g
extends the one deﬁned in section 2.2.
t3n+w+i
rn+i
for each i ∈ W . Note that this deﬁnition
ReKeyGen(γ, M K) The same as the CPA secure construc-
tion.
ReEnc(CT, rk, β) Let CT be (ver, AS, ˜C, ˆC, {Ci}i∈U ,
{Ki}i∈W , Kv, δ). The re-encrypted ciphertext is output as
CT ′ = (ver + 1, AS, ˜C, ˆC, {C ′
i}i∈U , {Ki}i∈W , Kv, δ), where
each C ′
i is generated in the same way as the CPA secure
construction.
ReKey( ¯D, rk, θ) The same as the CPA secure construc-
tion.
Dec(CT, P K, SK) The decryptor ﬁrst veriﬁes the signa-
ture δ. On failure, return ⊥; otherwise, proceed as in the
CPA secure construction.
5.2 CCA Security Proof
We ﬁrst give a deﬁnition on CCA security of our scheme.
Then, we sketch the security proof.
CCA Game Let λ be a security parameter. We say that
our scheme is secure against chosen ciphertext attacks under
selective-structure model if no PPT adversary A can win the
following game with non-negligible advantage.
Init and Setup Same as the CPA security game.
Phase 1 The adversary is allowed to adaptively make poly-
nomial times (in λ) of any combination of secret key and
decryption queries.
Query for Secret Key The adversary submits an
attribute set S. The challenger returns a secret key SK for
S, given that S does not satisﬁes AS∗.
Query for Decryption The adversary A submits a
ciphertext CT . If CT is not a valid ciphertext, A loses the
game; otherwise, the challenger B returns the plaintext M .
Challenge Same as the CPA security game.
Phase 2 Same as Phase 1. Similar to [8], ciphertexts sub-
mitted for decryption are not allowed to be derivatives of
CT ∗. A derivative of CT ∗ is deﬁned as any CT that can
be used to derive CT ∗ by repeatedly executing algorithm
ReEnc on proxy re-key’s rk(2), rk(3), · · · , rk(ver∗).
Guess The adversary A outputs his guess b0 of b.
CCA security of our scheme can be shown by the following
theorem.
Theorem 2. If a PPT algorithm (the adversary A) wins
our CCA security game with non-negligible advantage ADVCCA,
we can use this algorithm to construct another PPT algo-
rithm B to solve the DBDH problem with advantage 1
assuming that the signature scheme is strongly existentially
unforgeable.
2 ADVCCA,
Proof. The challenger of the DBDH game generates the
tuple (A, B, C, Z) exactly as in the CPA security proof, and
then sends it to B. To answer this challenge, ﬁrst choose
a signature key pair (K ∗
s ) and then simulates our CPA
security game as follows.
v , K ∗
Init The same as the CPA security proof.
Setup In this phase, B generates (Y, T1, · · · , T3n) and (rk(2),
rk(3), · · · , rk(ver∗)) exactly the same as the CPA security
proof. B generates (T3n+1, · · · , T3n+2w) as follows. For
each i ∈ W , select random numbers φi, ψi ∈ Zp, and set
T3n+i = gφi and T3n+w+i = Bψi
v is
v,i = 0; otherwise, set T3n+i = Bφi and
0, denoted by K ∗
T3n+w+i = gψi .
if the ith bit of K ∗
Phase 1. B answers queries for secret key and for decryp-
tion.
Case 1. Query for secret key. B executes in the same
way as Phase 1 of the CPA security game. When generat-
ing (Dj,0, Dj,1) for each j ∈ W , B deals in the same way as
non-witness attributes in U except that, Rk
n+j are no
longer needed when computing Dj,0 and Dj,1 since ˆD part
of a user secret key never needs update.
j or Rk
Case 2. Query for decryption. A submits a cipher-
text CT = (ver, AS, ˜C, ˆC, {Ci}i∈U , {Ki}i∈W , Kv, δ) for de-
cryption. B ﬁrst veriﬁes the signature δ with Kv.
If the
signature is not valid, B terminates the DBDH simulation
game without answering the DBDH challenger and start
a new game. Otherwise, proceed.
In this case, we know
Kv 6= K ∗
v with overwhelming probability. Otherwise, Kv
can be used to successfully verify δ and the signature con-
tained in the challenge ciphertext, which is assumed to hap-
pen with negligible probability since the signature scheme
is strongly existentially unforgeable. In case of Kv 6= K ∗
v ,
we can assume the jth bits of them are diﬀerent. With-
out loss of generality, we assume that the bit of K ∗
v is 0.
Therefore, Kj = T s
3n+w+j = gb·ψj ·s. B then calculates
e(Kj, A) = e(g, g)absψj = Y sψj . Since ψj is known to B,
he gives ˜C/(e(Kj, A)
1
ψj ) to A as the message M .
Challenge. The adversary submits two equal length mes-
sages M0 and M1. The challenger ﬂips a random coin b, sets
˜C = Mb · Z, and outputs the ciphertext CT ∗ as follows.
CT ∗ = (ver∗, AS∗, ˜C, C, {C δi·R
}i∈I∧˜i=+i, {C ηi }i /∈I ,
{C ζi·R
v,i=0, {C ψi }i∈W ∧K ∗
n+i }i∈I∧˜i=−i, {C φi }i∈W ∧K ∗
(ver∗)
i
(ver∗ )
v,i=1).
The adversary A is advantage in winning this CCA secu-
rity game is deﬁned as ADVCCA = P r[b0 = b] − 1
2 .
Phase 2. Repeat Phase 1. The only restriction is that,
ciphertexts submitted for decryption are not allowed to be
derivatives of CT ∗. B is able to verify this by running algo-
rithm ReEnc on proxy re-key’s and CT ∗, and compare the
results with the ciphertexts he received from A.
Guess. The same as the CPA security proof.
6. DISCUSSION
6.1 Applicability to KP-ABE
Key Policy Attribute-Based Encryption (KP-ABE) [12]
is a sister technique of CP-ABE but the situation is re-
versed:
In KP-ABE, ciphertexts are associated with at-
tributes, while user secret keys are deﬁned with access struc-
tures on attributes. If only the ciphertext attributes satisfy
a user’s access structure, can he decrypt. When CP-ABE
is applicable in Role-Based Access Control like scenarios,
KP-ABE is suitable for applications such as pay-per-view
TV systems, in which user access privileges are deﬁned over