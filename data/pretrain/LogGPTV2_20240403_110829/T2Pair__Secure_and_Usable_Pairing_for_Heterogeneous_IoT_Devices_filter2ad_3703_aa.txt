title:T2Pair: Secure and Usable Pairing for Heterogeneous IoT Devices
author:Xiaopeng Li and
Qiang Zeng and
Lannan Luo and
Tongbo Luo
T2Pair: Secure and Usable Pairing for Heterogeneous IoT Devices
Xiaopeng Li
University of South Carolina
PI:EMAIL
Lannan Luo
University of South Carolina
PI:EMAIL
Qiang Zeng∗
University of South Carolina
PI:EMAIL
Tongbo Luo
JD.com
PI:EMAIL
ABSTRACT
Secure pairing is key to trustworthy deployment and application of
Internet of Things (IoT) devices. However, IoT devices lack conven-
tional user interfaces, such as keyboards and displays, which makes
many traditional pairing approaches inapplicable. Proximity-based
pairing approaches are very usable, but can be exploited by co-
located malicious devices. Approaches based on a user’s physical
operations on IoT devices are more secure, but typically require
inertial sensors, while many devices do not satisfy this require-
ment. A secure and usable pairing approach that can be applied to
heterogeneous IoT devices still does not exist. We develop a tech-
nique, Universal Operation Sensing, which allows an IoT device to
sense the user’s physical operations on it without requiring inertial
sensors. With this technique, a user holding a smartphone or wear-
ing a wristband can finish pairing in seconds through some very
simple operations, e.g., pressing a button or twisting a knob. More-
over, we reveal an inaccuracy issue in original fuzzy commitment
and propose faithful fuzzy commitment to resolve it. We design
a pairing protocol using faithful fuzzy commitment, and build a
prototype system named Touch-to-Pair (T2Pair, for short). The
comprehensive evaluation shows that it is secure and usable.
CCS CONCEPTS
• Security and privacy→ Security services; Network security;
• Computer systems organization→ Sensor networks.
KEYWORDS
Pairing; Internet of Things; fuzzy commitment; PAKE
ACM Reference Format:
Xiaopeng Li, Qiang Zeng, Lannan Luo, and Tongbo Luo. 2020. T2Pair: Secure
and Usable Pairing for Heterogeneous IoT Devices. In Proceedings of the
2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 15 pages. https://doi.org/10.1145/3372297.3417286
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417286
1 INTRODUCTION
Internet-of-Things (IoT) devices are widely deployed, generating
great impacts on various industries and our daily lives. A study
estimates that the number of installed IoT devices will reach 75
billion by 2025 [44]. As pairing is to establish a communication
channel, a convenient and secure pairing approach is critical to
wide deployment and trustworthy application of IoT devices.
To pair a desktop or smartphone to an existing network, the
user simply inputs the network password to the device. However,
most IoT devices do not have user interfaces (UIs) for inputting
passwords, and thus cannot apply this approach.
Many IoT device vendors have the user use her personal mobile
device (e.g., a smartphone) to connect the IoT device’s hotspot and
input the home WiFi password. If the network connection is secure
(how to ensure it is a challenge [4, 12]), the IoT device can obtain the
password from the mobile device securely. This way, the problem of
pairing an IoT device is reduced to mutual authentication between
the IoT device and user’s mobile device [48]. We also leverage a
user’s mobile device for pairing IoT devices.
The literature has proposed many IoT pairing approaches, which
can be divided into at least two categories. The first category estab-
lishes pairing on proximity between devices to be paired [4, 12, 14,
32, 42, 48, 49]. It can be further divided into two sub-categories. (a)
As all IoT devices have certain wireless communication capabilities,
some approaches (such as Move2Auth [48]) prove proximity by
exploiting characteristics of wireless signals [12, 48, 49]. (b) Other
approaches (such as Perceptio [14]) make use of the ambient con-
text, like audio and light, to prove proximity [4, 32, 42]. Approaches
in this category usually feature usability; however, they can be
exploited by co-located malicious devices.
Approaches in the second category require the user to physi-
cally contact or operate the IoT device [15, 30, 45]. For example,
ShaVe/ShaCK [30] has a user hold her smartphone and the IoT de-
vice together in one hand and shake them, and then the knowledge
of the shared movement sequence is used for pairing. They are
generally more secure, as physical operations are involved in the
pairing process. But they require IoT devices to have inertial (or
touch) sensors that sense the user’s operations, while many IoT
devices do not have such sensors.
We consider IoT devices that (1) do not have sophisticated UIs
like keyboards, (2) may be located close to untrusted or malicious
devices (for example, a hospital may contain a mix of devices that
belong to the doctors, patients, or attackers), (3) do not necessarily
have inertial sensors, and (4) may be mobile or mounted, installed
indoors or outdoors. A secure and usable pairing approach that is
Session 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA309Figure 1: Distribution of physical UIs on 270 popular IoT de-
vices. “With BKT” means the device has a normal button,
knob or touchscreen; “Recessed button” refers to a small hole
that can be pressed using, e.g., a ball-point pen.
applicable to such heterogeneous IoT devices still does not exist. For
example, Perceptio [14] can only be applied to IoT devices installed
indoors without co-located malicious devices. We propose a system
named Touch-to-Pair (T2Pair, for short) that is not only secure
but applicable to heterogeneous IoT devices. Moreover, it is very
easy to use—a user wearing a wristband (or holding a smartphone)
only needs to touch, in the form of some very simple operations,
the IoT device for a few seconds to finish pairing.
T2Pair is built on a technique, Universal Operation Sensing (UOS),
which allows an IoT device to sense user operations on an IoT
device without requiring any inertial sensors. When a user wearing
a wristband or holding a smartphone touches an IoT device, such as
pressing its button a few times, twisting its knob back and forth, or
swiping its touchscreen1 in a zig-zag way, salient points arise when
the button is pressed/released or the twisting/swiping changes its
direction. We share an insight with P2Auth [23] and Perceptio [14]
that every IoT device has a clock. To make the technique widely
applicable, we use timestamps to describe salient points. On the
user’s wristband (or smartphone) side, the same set of salient points
can be identified by analyzing the motion data captured by the built-
in Inertial Measurement Unit (IMU). Subsequently, the wristband
and the IoT device can make use of the knowledge of the salient
points to authenticate each other.
T2Pair can be widely applied to most IoT devices on the market.
As shown in Figure 1, our survey of 270 most popular IoT devices on
Amazon (ranked by the number of reviews) indicates that 92.6% of
them have a normal button, knob, touchscreen, or recessed button.
For example, an Amazon smart plug, which does not need much
interaction, has a button for pairing and turning it on/off.
We assume the adversary has full control over all communica-
tion channels. Thus, given that the wristband and the IoT device
do not have prior security association, how to perform secure au-
thentication in the presence of attacks, such as man-in-the-middle
(MITM) attacks, is a challenge. This is a critical difference between
IoT pairing and authentication [23], as the latter usually assumes
the IoT device is already securely associated with the user’s token
or device used for authentication. Another challenge is that the
user’s wristband and the IoT device may have small differences
with regard to the observations of salient points. To overcome the
two challenges, we first tried fuzzy commitment [20], which incor-
porates cryptography and error-correcting code, such that the two
1Touchscreens allow users to input passwords directly; however, the usability of
inputting a WiFi password of eight characters or longer on a small touchscreen is poor.
We thus extend T2Pair to touchscreens.
sides (wristband and IoT device) can securely authenticate each
other without leaking the knowledge to the MITM adversary and,
meanwhile, tolerate small differences aforementioned.
However, this attempt failed. Our experiment shows that the
original fuzzy commitment leads to a high pairing-failure rate, and
our investigation reveals that sometimes small differences between
observations lead to very different encodings, while large differ-
ences result in similar encodings. We thus propose faithful fuzzy
commitment, which makes sure distances between encodings faith-
fully reflect differences between observations.
Furthermore, we uncover a security weakness under trained
mimicry attacks (i.e., an attacker who is familiar with the victim user
mimics her pairing operations) and show how to enhance T2Pair
without harming usability. A prominent advantage of T2Pair is that
it does not need clock synchronization, as it uses intervals between
salient points for encoding, which makes the pairing resilient to
attacks that interfere with clock synchronization.
We implement T2Pair and evaluate it on prototypical IoT de-
vices with buttons, knobs or touchscreens. The evaluation results
show that T2Pair has very low false rejection/acceptance rates. The
pairing takes only 7 seconds. A user study is performed, confirming
high usability of T2Pair. We make the following contributions.
● We develop Universal Operation Sensing (UOS), which allows
IoT devices to sense user operations and uses timestamps to
describe them, without requiring inertial sensors. We reveal the
weakness of pairing based on UOS under trained mimicry attacks
and enhance it to attain both usability and security.
● We propose faithful fuzzy commitment, such that small distances
between encodings faithfully reflect small differences between
values being encoded, and vice versa. A pairing protocol based
on faithful fuzzy commitment and password-authenticated key
exchange [5] is proposed, with strong resilience to attacks.
● Built on the two techniques, we propose and implement T2Pair.
A user only needs to touch the IoT device, in the form of pressing
a button, twisting a knob, or swiping a touchscreen, to finish
pairing. The paring method can be applied to heterogeneous IoT
devices without requiring inertial sensors, and largely eliminates
the threat of co-located malicious devices. The comprehensive
evaluation shows that T2Pair is secure and usable.
The rest of the paper is organized as follows. Section 2 describes
the system overview and threat model. Section 3 presents UOS,
Section 4 the protocol, and Section 5 implementation details. Sec-
tion 6 describes the dataset collection and Section 7 the evaluation.
Related work is discussed in Section 8, and limitations in Section 9.
The paper is concluded in Section 10.
2 SYSTEM OVERVIEW AND THREAT MODEL
Given an IoT device, our goal is that a user can utilize her personal
mobile device, called a helper, such as a smartphone, fitness tracker,
smartwatch, or smart ring [34], to securely pair an IoT device by
quickly performing simple operations on the device.
We take the device with a single button, as an example, to il-
lustrate the overview of our pairing mechanism. Figure 2 shows a
block diagram of T2Pair, where a user wearing a helper presses
the button a few times to conduct the pairing. In the process, the
device makes use of its clock to describe the button-pressing events
WithBKT83.3%Recessedbuttononly9.3%WithoutBKT7.4%84%7%6%3%ButtonKnobTouchscreenMultipleUIsSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA310Figure 2: Architecture of T2Pair (a wristband as the helper and an IoT device with a button as an example).
manipulate the communication between 𝐻𝑣 and 𝐷𝑣.
and derives a piece of evidence of the pairing operations, while
the helper collects readings from its accelerometer/gyroscope, and
independently generates another piece of evidence. We further de-
sign a protocol that allows the two parties to compare the evidence
without leaking it to the MITM attacker. If the difference is small
enough, they will be able to agree on a session key.
𝐷𝑎, so 𝐻𝑣 is fooled to exchange data (such as the WiFi password,
photos, sensor data) with 𝐷𝑎. (G2) The IoT device 𝐷𝑣 pairs a ma-
𝐷𝑣’s (𝐻𝑣’s, resp.) message sent to 𝐻𝑣 (𝐷𝑣, resp.) and sending faked
messages instead. We further consider the attacks below.
32], our work follows a standard Dolev-Yao adversary model [11];
i.e., the adversary has full control over all communication channels.
Threat Model. The attacker𝒜 has one or multiple of the following
goals. (G1) The victim𝒱’s helper 𝐻𝑣 pairs𝒜’s malicious device
licious helper 𝐻𝑎 of𝒜, so 𝐷𝑣 is fooled to exchange data with 𝐻𝑎.
(G3)𝒜 cracks the symmetric key and uses it to eavesdrop and/or
We assume𝒜 has full knowledge of our pairing protocol. Like [14,
Based on this,𝒜 may launch MITM attacks, e.g., by intercepting
Mimicry Attacks. If𝒜 has a visual observation of𝒱,𝒜 may
launch a mimicry attack by mimicking𝒱’s pairing operations, in
scenarios where𝒜 has increasing capabilities. MA-obstructed:𝒜
can see𝒱, but cannot directly see𝒱’s hand motions due to certain
obstructions. MA-clear:𝒜 can clearly see𝒱’s hand motions by
selecting an optimal viewing angle. MA-trained:𝒜 is familiar
with𝒱 and trained by learning the pairing operations of𝒱 before
𝒜 tries every possible piece of evidence until it hits a correct one,
so 𝐻𝑣 and/or 𝐷𝑣 are fooled to pair the attacker. BF-offline:𝒜 may
Attacks beyond Scope.𝒜 may be equipped with a camera and
computer-vision techniques to analyze𝒱’s hand movements. Like
collect all the pairing traffic and perform offline analysis in order
to crack the established key after pairing.
Brute-Force Attacks. BF-online: During the pairing process,
order to achieve G1 and/or G2. We examine the following threat
launching a mimicry attack described in MA-clear.
other pairing approaches that require physical operations, such as
ShaVe/ShaCK [30], T2Pair is also vulnerable to such attacks. At a
user’s home or office, however, the attack is not easy to launch, as
it requires an attacker-controlled camera that points at the user.
𝒜 may launch Denial-of-Service (DoS) attacks to manipulate
the communication channel and disrupt the pairing. But if failed
pairings occur repetitively, the helper can alert the user, who can
take actions to investigate or report the attacks.
3 PAIRING OPERATIONS AND EVIDENCE
We introduce pairing operations in Section 3.1, study operation sens-
ing in Section 3.2, and present evidence extraction in Section 3.3.
3.1 Pairing Operations
To devise usable and effective pairing operations, the UI properties
of IoT devices should be taken into consideration. According to our
survey, the most common UIs of resource-constrained IoT devices
include buttons (e.g., AWS IoT Button [2]), knobs (e.g., Nest Ther-
mostats [13]), and touchscreens (usually small, e.g., Honeywell T9
Smart Thermostats [16]). Thus, our design of Universal Operation
Sensing (UOS) considers the three types of UIs: buttons, knobs, and
touchscreens, and includes the following pairing operations.
● Pressing the button a few times with one or more random pauses
added. A “pause” here means that after the button is pressed
down, the user holds, intentionally, for a random short time
before releasing it. Note that it does not refer to the natural pause
when a user presses down a button and naturally holds shortly
before releasing it. Our experiments reveal that UOS without
pauses is weak under trained mimicry attacks (Section 7.2), while
UOS with pauses is much more resilient (Section 7.2).
● Twisting the knob back and forth with one or more random pauses
added. When the knob is twisted, the micro-controller on the IoT
device can detect the direction and amount of current twisting.