# An Online Gaming Testbed for Peer-to-Peer Architectures

**Authors:**
- Max Lehn
- Christof Leng
- Robert Rehner
- Tonio Triebel
- Alejandro P. Buchmann

**Affiliations:**
- Praktische Informatik IV, Universität Mannheim, Germany
- Databases and Distributed Systems, Technische Universität Darmstadt, Germany

**Contact:**
- Email: {mlehn, cleng, rehner, buchmann}@dvs.tu-darmstadt.de

## Abstract
In this demonstration, we present a testbed environment for evaluating Peer-to-Peer (P2P) game architectures. The testbed is based on Planet PI4, an online multiplayer game that provides a standard workload for gaming-specific network interfaces. Its modular architecture allows for the evaluation and comparison of existing and new P2P networking approaches. Planet PI4 can operate on a real network for prototypical evaluation or in a discrete-event simulator to provide a reproducible environment.

## Categories and Subject Descriptors
- C.2.4 [Distributed Systems]: Distributed Applications
- C.4 [Performance of Systems]: Design Studies

## General Terms
- Experimentation, Performance, Measurement

## 1. Introduction
Massively Multiplayer Online Games (MMOGs) have gained significant popularity in recent years. Examples like World of Warcraft and Eve Online support tens of thousands of players simultaneously in a single virtual world. These MMOGs typically use server-based network architectures for synchronizing game content among players. However, the continuous activity of players places high demands on server resources, making the operation of an MMOG expensive.

Peer-to-Peer (P2P) architectures offer a promising approach to reduce server resource requirements. While P2P research has produced numerous systems designed for networked games or Networked Virtual Environments (NVE), very few have been implemented in real games. Many academic approaches are evaluated using oversimplified models of gameplay and player behavior, such as round-based simulations and random walk mobility models. These models, while simple to use, do not fully capture the complexities of a real game on a real network. Deploying a real game with a new P2P mechanism is challenging, and measurements in real-world Internet setups may be difficult to reproduce.

## 2. Goals
We are developing the 3D real-time massively multiplayer online game Planet PI4, which serves as a benchmark for various P2P networking components. To effectively evaluate these components, we have identified the following objectives:

- **Complex Gameplay:** The gameplay must be complex enough to represent reference player behavior.
- **Attractive to Players:** The game should be appealing to real players, who will provide realistic behavior data.
- **Simplicity for Bots:** The game should be simple enough to be played by bots, allowing for focused testing of key aspects.
- **Real and Simulated Networks:** The game should be capable of running in both real and simulated networks.
- **Resource Efficiency:** The game should be resource-efficient to ensure good simulation performance.
- **Flexible Networking Interfaces:** The networking components must have well-defined and flexible interfaces to facilitate the replacement of network architectures.

These features enable us to provide a testbed for a realistic comparison of P2.P network architectures. Supporting execution on a real network ensures that tested systems do not rely on shortcuts available only in simulations, while network emulation provides a reproducible environment. A realistic user model can only be obtained by analyzing human player behavior, but a reproducible workload must be generated synthetically. We collect traces from human players during client-server game sessions and derive an abstract user model, which is then used in bot implementations to reproduce human behavior. Using player traces directly is infeasible due to the lack of parameterizability and the inability to reproduce interactivity between players.

## 3. Gameplay
In Planet PI4, each player joins a team to compete against other teams. The game is set in an asteroid field, where players navigate their spaceships and shoot at other ships. When a ship is destroyed, the player respawns at the team's initial position. The goals are to destroy the opposing teams' players and capture bases. Bases are strategic points providing certain improvements (e.g., energy, points) to the controlling team. To capture a base, a player must stay within its range while keeping players from other teams out. The asteroid field defines the three-dimensional gameplay region, and bases create hotspots of player density. To evaluate scalability, the game map size and player density are variable, with the map generated algorithmically based on a common random seed.

## 4. Architecture
The testbed architecture is designed to meet the defined requirements. Figure 1 shows the high-level components. The interfaces allow for the exchangeability of components across different layers. PlanetPI4’s game core provides a player control interface that can be used by the GUI or bot implementations. The network interfaces connect the interchangeable network parts, and the system interfaces abstract the runtime.

### 4.1 Network Components
Different networking issues are split into separate interfaces, allowing independent implementations for each:

- **Spatial Multicast:** The most important requirement for the networking component is the dissemination of position updates, which cause most traffic in MMOGs. Publications on P2P systems for games, such as VON, pSense, and Donnybrook, focus on this topic.
- **Object Management:** Another critical issue is the management of persistent game objects that can be manipulated by players. Examples include systems by Hu et al. and Bharambe et al. We define active objects as those with an associated 'think function' for object-specific processing.
- **Channel-based Publish/Subscribe:** For team communication and object-specific updates, we have defined an interface for channel-based publish/subscribe.
- **Global Statistics:** Player and team scores that are globally available are stored using the global statistics interface.

Currently, we have implementations of pSense and BubbleStorm for position updates. A client-server implementation, serving as a reference, supports the full set of network interfaces, including object management and publish/subscribe communication.

### 4.2 System Runtime
To run in a simulated network environment, the game code uses an event-based design. All components that need to regularly execute a task register with the central task scheduler. The task scheduler implementation is exchanged for different runtime environments. In a discrete-event simulator, the scheduler creates simulator events for each task, while the native-network implementation runs a real-time event loop.

## 5. Conclusion and Outlook
Our modular testbed provides powerful means for a realistic evaluation and comparison of P2P gaming architectures. Evaluation in both real and emulated network environments offers valuable insights into the properties of the tested systems. Running a real game increases confidence in the results and demonstrates the real-world applicability of P2P systems. As a next step, we will conduct user studies to obtain player behavior data, derive user models, and build bot implementations with calibrated behavior.

This work was partially funded by the DFG research group FOR 733 and the DFG research training group GRK 1343.

## 6. References
1. A. Bharambe, J. R. Douceur, J. R. Lorch, T. Moscibroda, J. Pang, S. Seshan, and X. Zhuang. Donnybrook: Enabling Large-Scale, High-Speed, Peer-to-Peer Games. ACM SIGCOMM Computer Communication Review, 38(4):389–400, 2008.
2. A. Bharambe, J. Pang, and S. Seshan. Colyseus: A Distributed Architecture for Online Multiplayer Games. In NSDI ’06, Berkeley, CA, USA, 2006. USENIX Association.
3. K. Chen, P. Huang, C. Huang, and C. Lei. Game Traffic Analysis: An MMORPG Perspective. In NOSSDAV’05, pages 19–24. ACM, 2005.
4. S. Hu, S. Chang, and J. Jiang. Voronoi State Management for Peer-to-Peer Massively Multiplayer Online Games. In CCNC ’08, pages 1134–1138, 2008.
5. S.-Y. Hu and G.-M. Liao. Scalable Peer-to-Peer Networked Virtual Environment. In NetGames ’04, pages 129–133, 2004.
6. S. Kulkarni, S. Douglas, and D. Churchill. Badumna: A Decentralised Network Engine for Virtual Environments. Computer Networks, 54(12):1953–1967, 2010.
7. M. Lehn, T. Triebel, C. Leng, A. Buchmann, and W. Eﬀelsberg. Performance Evaluation of Peer-to-Peer Gaming Overlays. In IEEE P2P ’10, 2010.
8. A. Schmieg, M. Stieler, S. Jeckel, P. Kabus, B. Kemme, and A. Buchmann. pSense - Maintaining a Dynamic Localized Peer-to-Peer Structure for Position Based Multicast in Games. In IEEE P2P ’08, pages 247–256, 2008.
9. W. Terpstra, J. Kangasharju, C. Leng, and A. Buchmann. BubbleStorm: Resilient, Probabilistic, and Exhaustive Peer-to-Peer Search. In ACM SIGCOMM ’07, pages 49–60, 2007.
10. T. Triebel, B. Guthier, R. S¨uselbeck, G. Schiele, and W. Eﬀelsberg. Peer-to-Peer Infrastructures for Games. In NOSSDAV ’08, pages 123–124, 2008.