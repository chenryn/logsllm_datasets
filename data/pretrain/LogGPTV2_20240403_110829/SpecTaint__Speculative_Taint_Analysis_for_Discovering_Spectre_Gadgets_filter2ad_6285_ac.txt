### Gadget Detection and Implementation

**Gadget Detection:**
The primary objective of gadget detection is to verify whether the speculative instruction trace adheres to the predefined gadget patterns. This verification is performed within a simulated speculative execution environment. Although both our gadget patterns involve memory access operations, it is inefficient and unnecessary to check every memory access instruction on speculative execution (SE) paths. Instead, we focus on tainted memory access instructions. To achieve this, we instrument memory read and write operations. For Branch-Condition-Branch (BCB) gadgets, we check if the source of each memory read is tainted. Additionally, to ensure that the dependency rule `dep(j, [i])` is satisfied between two instructions, we track whether the tainted operand of one instruction `j` is propagated from another instruction `i`. For Branch-Condition-Branch-Sink (BCBS) gadgets, the pattern captures any tainted memory write whose destination address is marked as tainted within the SE window.

**Implementation:**
We have developed a prototype, SpecTaint, using C. Specifically, we wrote a C plugin of approximately 1,000 lines of code (KLOC) on top of DECAF [25], a dynamic binary analysis platform built on QEMU 1.0. This plugin manages state checkpoints and detects Spectre gadgets. We reused DECAF's dynamic taint analysis plugin for our taint analysis. The total changes required to develop our prototype did not exceed 2 KLOC. To increase code coverage, we used AFL 2.52b [2] and honggfuzz [8] to generate seed inputs.

### Experimental Evaluation

In this section, we evaluate SpecTaint to answer the following research questions:
1. How effective is SpecTaint in finding Spectre gadgets compared to other existing tools?
2. How efficient is SpecTaint in finding Spectre gadgets in real-world applications?

#### Experiment Setup

**Baseline Methods:**
We compare SpecTaint with three baseline approaches: 
- **Spectre 1 Scanner from Red Hat (RH Scanner)** [5]: A static analysis tool for scanning Spectre gadgets.
- **oo7** [43]: A static analysis tool that uses static taint analysis to find Spectre gadgets.
- **SpecFuzz** [39]: A fuzzing-based approach to detect errors in speculative execution and report Spectre gadgets.

Another related work, SPECTECTOR, uses symbolic execution to detect information-flow differences introduced by speculative execution. However, due to the lack of open-source settings and unsupported instructions, it was not feasible to include SPECTECTOR in our evaluation.

**Evaluation Datasets:**
- **Spectre Samples Dataset:** This dataset contains 15 Spectre V1 samples created by Paul Kocher [3], compiled with the same configuration (gcc-4.8.4 with O0) [39].
- **Real-world V1 Dataset:** This dataset includes six widely used applications: OpenSSL [12], Brotli [7], JSON [10], LibHTP [11], HTTP [9], and YAML [6].
- **Real-world V2 Dataset:** To address the shortage of ground truth in real-world programs, we injected known Spectre gadgets into the Real-world V1 Dataset, creating the Real-world V2 Dataset. We used the injection approach proposed in LAVA [20], injecting 15 Spectre V1 gadgets into 52 different locations across six programs. Input seeds were generated using a fuzzing tool [8].

**Evaluation Metrics:**
- **Precision (P):** Calculated as \( P = \frac{TP}{TP + FP} \), where TP is the number of detected gadgets that are manually verified to be exploitable, and FP is the number of detected gadgets that are not exploitable.
- **Recall (R):** Calculated as \( R = \frac{TP}{TP + FN} \), where TP is the number of inserted gadgets correctly detected, and FN is the number of inserted gadgets missed.

**Configuration:**
- **Hardware:** Desktop with 16 GB RAM, Intel Core i7 12 cores at 3.70 GHz, running Linux 4.15.
- **Guest OS in QEMU:** Ubuntu 14.04 with 1 GB memory.
- **Speculative Window Size:** Set to 250, following the configuration used by SpecFuzz [39].

#### Baseline Evaluation on Spectre Samples Dataset

In this experiment, we compared SpecTaint with the three baseline tools on the Spectre Sample Dataset. As shown in Table II, SpecTaint successfully detected all Spectre gadgets, while RH Scanner, which relies on syntax-based pattern matching, missed three cases.

#### Baseline Comparison on Real-world V2 Dataset

We conducted a baseline comparison with RH Scanner, oo7, and SpecFuzz on the Real-world V2 Dataset. In this experiment, we focused on detecting the inserted gadgets, considering only these as true positives and all other results as false positives.

- **Tainting Configuration:** For dynamic taint analysis tools (oo7 and SpecTaint), we marked input bytes that influence injected gadgets as taint sources. For whole input bytes tainting, we marked all input bytes as tainted.
- **Dynamic Analysis Tools (SpecTaint and SpecFuzz):** We used an external fuzzing tool [8] to fuzz the six programs for 10 hours, feeding the generated seeds as inputs.

**Results:**
- **Precision and Recall:** When tainting gadget-related input bytes, SpecTaint achieved a precision rate of 100% with no false positives. Under the same configuration, oo7 produced false positives, indicating the over-tainting issue in static taint analysis.
- **False Negatives:** oo7 missed many inserted gadgets due to incomplete control-flow graph (CFG) extraction and limitations in static inter-procedure taint tracking.
- **Comparison with RH Scanner and SpecFuzz:** SpecTaint outperformed RH Scanner and SpecFuzz under the whole input bytes tainting configuration. SpecFuzz missed many injected gadgets covered by input seeds, primarily due to its prioritized simulation of branch mispredictions.

**Table I: Evaluation Results on Real-world V2 Dataset**

| Tool       | Program   | TP  | FP  | FN  | Precision | Recall |
|------------|-----------|-----|-----|-----|-----------|--------|
| oo7        | JSMN      | 1   | 448 | 2   | 0.002     | 0.33   |
|            | Brotli    | 2   | 811 | 11  | 0.003     | 0.15   |
|            | HTTP      | 3   | 128 | 6   | 0.023     | 0.33   |
|            | LibHTP    | 4   | 254 | 3   | 0.016     | 0.57   |
|            | YAML      | 2   | 36  | 8   | 0.526     | 0.20   |
|            | SSL       | 3   | 100 | 7   | 0.029     | 0.30   |
| SpecTaint  | JSMN      | 2   | 0   | 1   | 1.00      | 0.67   |
|            | Brotli    | 3   | 0   | 0   | 1.00      | 0.54   |
|            | HTTP      | 4   | 0   | 0   | 1.00      | 0.89   |
|            | LibHTP    | 2   | 1   | 1   | 0.67      | 0.71   |
|            | YAML      | 3   | 0   | 0   | 1.00      | 0.40   |
|            | SSL       | 3   | 0   | 0   | 1.00      | 0.60   |

These results demonstrate that SpecTaint is more accurate and effective in detecting Spectre gadgets compared to the baseline tools.