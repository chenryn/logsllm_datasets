proving the memory utilization in VMMs. It is especially ef-
fective in virtual machine environments where multiple guest
OSs co-reside on the same physical machine and share the
physical memory. At the more abstract level, deduplica-
tion works by recognizing processes (or VMs) that place the
same data in memory. This frequently happens when two
processes use the same shared libraries. The deduplication
scheme eliminates multiple copies from memory and allows
the data to be shared between users and processes. Conse-
quently, variations of memory deduplication techniques are
now implemented in VMware ESXI [39, 40] and others such
as KVM [2, 22] VMMs. Since KVM converts the Linux ker-
nel into a hypervisor, it directly uses KSM as page sharing
technique, whereas VMware uses Transparent Page Sharing
(TPS).
Even though deduplication saves memory and thus allows
more virtual machines to run on the host system, it also
opens a door to side channel attacks. While the data in
the cache cannot be modiﬁed or corrupted by an adversary,
parallel access rights can be exploited to reveal secret infor-
mation about processes executing in the target VM.
3. THE LUCKY 13 ATTACK
The Lucky 13 attack targets a vulnerability in the TLS
(and DTLS) protocol design. The vulnerability is due to
MAC-then-encrypt mode, in combination with the padding
of the CBC encryption, also referred to as MEE-TLS-CBC.
In the following, our description focuses on this popular
mode. Vaudenay [38] showed how the CBC padding can
be exploited for a message recovery attack. AlFardan et
al. [16] showed—more than 10 years later—that the sub-
sequent MAC veriﬁcation introduces timing behavior that
makes the message recovery attack feasible in practical set-
tings. In fact, their work includes a comprehensive study of
the vulnerability of several TLS libraries. In this section we
give a brief description of the attack. For a more detailed
description, please refer to the original paper [16].
OPENSSLAPACHEFIREFOXAPACHEOPENSSLAPACHEFIREFOXthis, we are repeating the example given in [16] as follows.
Assume that the plaintext size is 55 bytes. In this case an
8 byte length ﬁeld is appended together with a padding of
size 1, so that the total size is 64 bytes. Here in total the
HMAC operation is going to take four compression function
calls. However if the plaintext size is 58, an 8 byte length
ﬁeld is attached and 62 bytes of padding are appended to
make the total size equal to 128 bytes. In this case, the total
compression function calls are going to be equal to ﬁve. Dis-
tinguishing the number of performed compression function
calls is the basic idea that enables the Lucky 13 attack.
3.3 CBC Encryption & Padding
Until the support of the Galois Counter Mode in TLS
1.2, block ciphers were always used in cipher block chaining
(CBC) mode in TLS. Decryption of each block of a cipher-
text Ci is performed as follows:
Pi = Dk(Ci) ⊕ Ci−1
Here, Pi is the plaintext block and Dk(·) is the decryption
under key k. For the prevalent AES, the block size is 16
bytes. The size of the message to be encrypted in CBC mode
has to be indeed a multiple of the cipher block size. The
TLS protocol speciﬁes a padding as follows: the last padding
byte indicates the length of the padding; the value of the re-
maining padding bytes is equal to the number of padding
bytes needed. This means that if 3 bytes of padding is
needed, the correct padding has to be 0x02|0x02|0x02. Pos-
sible TLS paddings are: 0x00, 0x01|0x01, 0x02|0x02|0x02,
up to 0xﬀ|0xﬀ| . . .|0xﬀ. Note that there are several valid
paddings for each message length.
3.4 An Attack On CBC Encryption
We now discuss the basics of the Lucky 13 attack. For the
purposes of this study the target cipher is going to be AES in
CBC mode, as described above. Again, we are going to use
the same example that AlFardan et al. gave in [16]. Assume
that the sender is sending 4 non-IV blocks of 16 bytes each,
one IV block, and the header number. Let’s further assume
that we are using SHA-1 to compute the MAC tag, in which
case the digest size is 20 bytes. The header has a ﬁxed length
of 5 bytes and the sequence number would have a total size
of 8 bytes. The payload would look like this:
HDR|CIV |C1|C2|C3|C4
Now assume that the attacker masks ∆ in C3. The decryp-
tion of C4 is going to be as follows:
4 = Dk(C4) ⊕ C3 ⊕ ∆ = P4 ⊕ ∆
∗
P
4(14)|P ∗
4(15) three possible
Focusing on the last two bytes P ∗
scenarios emerge:
Invalid padding This is the most probable case, where the
plaintext ends with an invalid padding. Therefore, according
to TLS protocol, this is treated as 0 padding. 20 bytes of
MAC (SHA-1) are removed and the corresponding HMAC
operation in the client side is performed on 44 bytes +13
bytes of header, in total 57 bytes. Therefore the HMAC
evaluates 5 compression function calls.
Valid 0x00 padding If P ∗
4(15) is 0x00, this is considered
as valid padding, and a single byte of padding is removed.
Then the 20 bytes of digest are removed, and the HMAC
operation in client side is done in 43+13 bytes, 56 in total,
which takes 5 compression function calls.
Figure 2: Encryption and authentication in the TLS
record protocol when using HMAC and a block ci-
pher in CBC mode.
3.1 The TLS Record Protocol
The TLS record protocol provides encryption and message
authentication for bulk data transmitted in TLS. The basic
operation of the protocol is depicted in Figure 2. When a
payload is sent, a sequence number and a header are at-
tached to it and a MAC tag is generated by any of the avail-
able HMAC choices. Once the MAC tag is generated, it is
appended to the payload together with a padding. The pay-
load, tag, and pad are then encrypted using a block cipher
in CBC mode. The ﬁnal message is formed by the encrypted
ciphertext plus the header.
Upon receiving an encrypted packet, the receiver decrypts
the ciphertext with the session key that was negotiated in
the handshake process. Next, the padding and the MAC
tag need to be removed. For this, ﬁrst the receiver checks
whether the size of the ciphertext is a multiple of the block
size and makes sure that the ciphertext can accommodate
minimally a zero-length record, a MAC tag, and at least
one byte of padding. After decryption, the receiver checks if
the recovered padding matches one of the allowed patterns.
A standard way to implement this decoding step is to check
the last byte of the plaintext, and to use it to determine how
many of the trailing bytes belong to the padding. Once the
padding is removed, and the plain payload is recovered, the
receiver attaches the header and the sequence number and
performs the HMAC operation. Finally, the computed tag is
compared to the received tag. If they are equal, the contents
of the message are concluded to be securely transmitted.
3.2 HMAC
The TLS record protocol uses the HMAC algorithm to
compute the tag. The HMAC algorithm is based on a hash
function H that performs the following operations:
HMAC(K, m) = H((K ⊕ opad)||H((K ⊕ ipad)||M )
Common choices in TLS 1.2 for H are SHA-1, SHA-256 and
the now defunct MD5. The message M is padded with a
single 1 bit followed by zeros and an 8 byte length ﬁeld.
The pad aligns the data to a multiple of 64 bytes. K ⊕ opad
already forms a 64 byte ﬁeld, as well as K ⊕ ipad. There-
fore, the minimum number of compression function calls for
a HMAC operation is 4. This means that depending on the
number of bytes of the message, the HMAC operation is go-
ing to take more or less compression functions. To illustrate
HDR|SQNDATADATATAGPADHDRCIPHERTEXTHMACCBC ENCRYPTIONAny other valid padding For instance, if we consider
a valid padding of two bytes, the valid padding would be
0x01|0x01 and 2 bytes of padding are removed. Then 20
bytes of digest are removed, and the HMAC operation is
performed over 42 + 13 = 55 bytes, which means four com-
pression function calls.
The Lucky 13 attack is based on detecting this diﬀerence
between 4 and 5 compression function calls. Recall that if an
attacker knows that a valid 0x01|0x01 padding was achieved,
she can directly recover the last two bytes of P4, since
0x01|0x01 = P4(14)|P4(15) ⊕ ∆(14)|∆(15)
Furthermore, she can keep on trying to recover the remain-
ing bytes once she knows the ﬁrst 2 bytes. The attacker
needs to perform at most 216 trials for detecting the last
two bytes, and then up to 28 messages for each of the bytes
that she wants to recover.
4. ANALYSIS OF LUCKY 13 PATCHES
The Lucky 13 attack triggered a series of patches for all
major implementations of TLS [16]. In essence, all libraries
were ﬁxed to remove the timing side channel exploited by
Lucky 13, i.e. implementations were updated to handle dif-
ferent CBC-paddings in constant time. However, diﬀerent
libraries used diﬀerent approaches to achieve this:
• Some libraries implement dummy functions or pro-
cesses,
• Others use dummy data to process the maximum al-
lowed padding length in each MAC checking.
In the following, we discuss these diﬀerent approaches for
some of the most popular TLS libraries.
4.1 Patches Immune to Flush+Reload
In this section we will analyze those libraries that are se-
cure against the ﬂush and reload technique.
• OpenSSL: The Lucky 13 vulnerability was ﬁxed in
OpenSSL versions 1.0.1, 1.0.0k, and 0.9.8y by Febru-
ary 2013 without the use of a time consuming dummy
function and by using dummy data. Basically, when
a packet is received, the padding variation is consid-
ered and the maximum number of HMAC compres-
sion function evaluations needed to equalize the time
is calculated. Then each compression function is com-
puted directly, without calling any external function.
For every message, the maximum number of compres-
sion functions are executed, so that no information is
leaked through the time channel in case of the incor-
rect padding. Furthermore, the OpenSSL patch re-
moved any data dependent branches ensuring a ﬁxed
data independent execution ﬂow. This is a generic so-
lution for microarchitectural leakage related attacks,
i.e. cache timing or even branch prediction attacks.
• Mozilla NSS: This library is patched against the
Lucky 13 attack in version 3.14.3 by using a constant
time HMAC processing implementation. This imple-
mentation follows the approach of OpenSSL, calcu-
lating the number of maximum compression functions
needed for a speciﬁc message and then computing the
compression functions directly. This provides not only
a countermeasure for both timing and cache access at-
tacks, but also for branch prediction attacks.
• MatrixSSL: MatrixSSL is ﬁxed against the Lucky 13
with the release of version 3.4.1 by adding timing coun-
termeasures that reduce the eﬀectiveness of the attack.
In the ﬁx, the library authors implemented a decoding
scheme that does a sanity check on the largest possible
block size. In this scheme, when the received message’s
padding length is incorrect, Matrix SSL runs a loop as
if there was a full 256 bytes of padding. When there
are no padding errors, the same operations are exe-
cuted as in the case of an incorrect padding to sus-
tain a constant time. Since there are no functions
that are speciﬁcally called in the successful or unsuc-
cessful padding cases, this library is not vulnerable to
our Flush+Reload attack.
In addition, Matrix SSL
keeps track of all errors in the padding decoding and
does the MAC checking regardless of valid or invalid
padding rather than interrupting and ﬁnalizing the de-
coding process at the ﬁrst error. However, since an if
statement is used when the extra compression function
is called, the library might be a suitable target for a
branch prediction attack.
4.2 Patches Vulnerable to Flush+Reload
There are some patches that ensure constant time exe-
cution and therefore are immune to the original Lucky 13
attack [16] which are vulnerable to Flush+Reload. This im-
plies a dummy function call or a diﬀerent function call tree
for valid and invalid paddings. Furthermore, if these calls
are preceded by branch predictions, these patches might also
be exploitable by branch prediction attacks. Some examples
including code snippets are given below.
• GnuTLS: uses a dummy_wait function that performs
an extra compression function whenever the padding is
incorrect. This function makes the response time con-
stant to ﬁx the original Lucky 13 vulnerability. Since
this function is only called in the case of incorrect
padding, it can be detected by a co-located VM run-
ning a Flush+Reload attack.
(memcmp ( tag , &c i p h e r t e x t −>data [ l e n g t h ] ,
i f
t a g s i z e ) != 0 | | p a d f a i l e d != 0 )
//HMAC was not
{dummy wait(params , compressed , pad failed ,
pad , length+preamble size ) ;}
t h e same .
• PolarSSL: uses a dummy function called md_process
to sustain constant time to ﬁx the original Lucky 13
vulnerability. Basically the number of extra runs for a
speciﬁc message is computed and added by md_process.
Whenever this dummy function is called, a co-located
adversary can learn that the last padding was incor-
rect and use this information to realize the Lucky 13
attack.
j = 0 ;
j transform in−>
md ctx dec , s s l−>in msg ) ; ]∗
• CyaSSL: was ﬁxed against the Lucky 13 with the re-
lease of 2.5.0 on the same day the Lucky 13 vulnera-
bility became public. In the ﬁx, CyaSSL implements a
timing resistant pad/verify check function called Tim-
ingPadVerify which uses the Padcheck function with
dummy data for all padding length cases whether or
not the padding length is correct. CyaSSL also does
all the calculations such as the HMAC calculation for
the incorrect padding cases which not only ﬁxes the
original Lucky 13 vulnerability but also prevents the
detection of incorrect padding cases. This is due to the
fact that the Padcheck function is called for both cor-
rectly and incorrectly padded messages which makes
it impossible to detect with our Flush+Reload attack.
However, for the correctly padded messages, CyaSSL
calls the CompressRounds function which is detectable
with Flush+Reload .Therefore, we monitor the correct
padding instead of the incorrect padding cases.
Correct padding case:
PadCheck (dummy,
( byte ) padLen ,
MAX PAD SIZE − padLen − 1 ) ;
r e t = s s l −>hmac ( s s l , v e r i f y ,
input ,
pLen − padLen − 1 − t , c o n t e n t , 1 ) ;
CompressRounds( s s l , GetRounds(pLen ,
padLen , t ) , dummy) ;
ConstantCompare ( v e r i f y ,
( pLen − padLen − 1 − t ) ,
t ) != 0 )
i n p u t +
Incorrect padding case:
( byte ) padLen ,
CYASSL MSG( ”PadCheck f a i l e d ”) ;
PadCheck (dummy,
MAX PAD SIZE − padLen − 1 ) ;
s s l −>hmac ( s s l , v e r i f y ,
pLen − t , c o n t e n t , 1 ) ;
// s t i l l
ConstantCompare ( v e r i f y ,
pLen − t ,