′ =
(possibly different) standard basis vector ⃗e
⃗e · Π.
′ ∈ Fr ; namely, of ⃗e
Colloquially, one can think of Corollary 3.2 as stating that a
t-private IT-PIR query issued against a permutation matrix yields
another t-private IT-PIR query (possibly for some other block) or,
put another way, that a permutation matrix is, in a sense, just a
“database of positional PIR queries”.
Despite the naïvety of our discussion up to this point, we are
already well positioned to demonstrate a novel application of per-
mutation matrices to PIR queries.
3.1 Example application: Private queries over a
remote email inbox
Consider the toy example of an email inbox depicted in Figure 1.
The inbox D in the figure contains five emails, which are physically
stored, naturally, in the same order that they were received.
Each row of D represents one email and is structured around a
schema that includes—in addition to the body of the email—fields
for metadata about the email including its subject, its sender, the
date it was received, and its size. Of course, the schema for a real
email inbox would include several additional fields.
Suppose we wish to set up a PIR protocol to facilitate retrieval
of emails from the inbox D. In a typical PIR setting, the user would
fetch an email from D using a positional PIR query. Doing so would
require the user to know (or, at least, to learn) quite a lot about
the physical layout of D, as the row number of the desired email
corresponds to its chronological order among all of the other emails.
By contrast, a typical non-private email client would provide a
3
convenient interface to help the user locate emails of interest, for
instance by imposing a user-selected logical order on the emails
and allowing the user to browse through them in this sorted order.
As a concrete example, the email client might present the user
with a view of the inbox in which emails are sorted numerically
by size, or lexicographically by subject or sender, among other
possibilities.
Observation 3.3. Each of the above-mentioned views of D (i.e.,
sorted by size, by subject, or by sender) corresponds to a partic-
ular 5× 5 permutation matrix.
For example, referring back to D, we observe that the permuta-
tion matrices
 and Πsize (cid:66)
0 0 1 0 0
1 0 0 0 0
0 0 0 1 0
0 1 0 0 0
0 0 0 0 1
0 0 1 0 0
0 1 0 0 0
1 0 0 0 0
0 0 0 0 1
0 0 0 1 0
Πsender (cid:66)
respectively map a query encoding the ith standard basis vector of
F5 to a query for the ith email in a lexicographic ordering of the
inbox by sender or a numerical (decreasing) ordering of the inbox
by size. Thus, the user could request, say, the largest email in D by
sending a vector of shares of the basis vector ⃗e1 ∈ F5, along with the
hint “size”, to each of the PIR servers hosting D. We emphasize that
the user can construct this query knowing only the total number of
rows in Πsize; in particular, the user need not know anything about
which emails occupy which rows of D.
Upon receiving the share vector ⃗Qj and hint “size” from the
user, server j first permutes the components of ⃗Qj via multiplication
j (cid:66) ⃗Qj · Πsize, after which it computes and returns
with Πsize to get ⃗Qsize
· D as usual. It is easy to verify—and the
the response ⃗Rj (cid:66) ⃗Qsize
j
reader should take a moment to do so, since going forward we will
repeatedly use this simple idea, but in increasingly sophisticated
ways—that, upon reconstructing the servers’ responses, the user
indeed learns the largest email in D, just as it sought to do. To
see why, simply note that ⃗e1 · Πsize = ⃗e3, and that ⃗e3 · D yields
the 336 KB email, which has the largest size among emails in the
inbox.
Before we move on, a few remarks about this simple example
are in order. First, we note that the example highlights a poten-
tial application of permutations in PIR, but it reveals no obvious
advantage to thinking about such permutations in terms of multi-
plication by a permutation matrix (as opposed to using some other
representation of a permutation). Nevertheless, in the sequel we
will see increasingly sophisticated variations of this idea which do
rely inherently on the idea of “permuting queries” by way of matrix
multiplications.1 Second, we reiterate that the user in this example
does not require any specific knowledge about D or Πsize, beyond the
height and semantic meaning of Πsize. In fact, even upon reconstruct-
ing the servers’ responses, the user still learns nothing about the
physical layout of D—not even the row number of the email it just
1We point out, moreover, that even for this very simple example, representing the
requisite permutations as matrix multiplications is not unreasonable, as the special
structure of permutation matrices (specifically, their sparsity and the restriction of
their components to {0, 1}) allows the servers to store and compute with them very
efficiently, a fact that will later prove crucial.
fetched! Finally, although the permuted query vectors arising in
our example provide the exact same t-privacy guarantee as regular
queries in the underlying PIR protocol,2 the additional hint “size”
does reveal some meta-information about which emails the user is
after. This meta-information can have implications for privacy; for
instance, in our email fetching example, the servers may infer that
a user requesting emails by size is interested in emails residing in
the tails of the size distribution (i.e., very small or large emails) as
opposed to those near the middle. Thus, in applications that wish
to leverage permutations in this way, special care must be taken
to identify and quantify if and how such leakage might betray the
users’ privacy. We emphasize that (i) such leakage is application-de-
pendent and cannot be meaningfully quantified outside the context
of a specific application, and (ii) in many (if not most) applications,
business logic already betrays similar meta-information.
3.2 From permutation matrices to “simple
indexes of queries”
One can think of the permutation matrices Πsender and Πsize from the
preceding subsection as being two “indexes” through which users
can fetch the blocks comprising D. Indeed, both indexes are them-
selves just special databases whose blocks are all (non-private) posi-
tional queries for blocks in D; in other words, Πsender and Πsize are two
very simple examples of what we call “indexes of queries”.
Note that such indexes of queries need not take the form of
permutation matrices—permutation matrices merely capture the
special case in which the index of queries presents a sorted view of
all blocks in D. Indeed, one could just as well consider an index of
queries Π that (i) is not square, (ii) has some columns containing
no 1s (meaning that certain blocks from D are not accessible via
Π), and/or (iii) has some columns containing multiple 1s (meaning
that certain blocks from D are accessible in multiple ways via Π).
One even consider indexes of aggregate queries, in which some
rows may contain several arbitrary non-zero entries. Such indexes
of queries would map standard basis vectors to requests for linear
combinations of blocks from D and may be useful for solving simple
statistical queries. However, we leave the development of this idea
to future work and, for the time being, cast the following definition
for “simple indexes of queries”, which captures all but the last
possibility just mentioned.
Definition 3.4. A simple index of queries for a database D ∈ Fr ×s
is a (0,1)-matrix Π ∈ Fp×r in which each row contains exactly one
1 entry.
An equivalent definition states that Π ∈ Fp×r is a simple index of
queries for D ∈ Fr ×s if it maps each standard basis vector from Fp
to a standard basis vector from Fr .
3.3 Leakage: It’s not a bug, it’s a feature
In the epilogue to Section 3.1, we remarked that the mere act of
fetching blocks through a given index of queries can implicitly leak
meta-information about which blocks the user seeks. Furthermore,
2Indeed, Shamir’s(t + 1, ℓ)-threshold scheme perfectly hides the secret from coalitions
of up to t shareholders; thus, no amount of post-processing—including, of course,
multiplication by a permutation matrix—will allow coalition members to extract any
information about the user’s query.
4
Definition 3.4 explicitly permits indexes of queries through which
(owing to the presence of all-0 columns) it is impossible to access
certain blocks from D, thus potentially making the information leak-
age explicit. In this subsection, we briefly revisit this information
leakage—seemingly a weakness of simple indexes of queries—and
spin it as a potentially useful feature.
In particular, in use cases where certain implicit leakage is tol-
erable (or even inevitable), it is possible to reduce the cost of PIR
queries by explicitly leaking the exact same information. Trading off
some (limited and controlled) information leakage in exchange for
more efficient and expressive PIR queries is not without precedence;
for example, both of Olumofin and Goldberg’s [21] and Wang, Yun,
Goldwasser, Vaikuntanathan, and Zaharia’s [27] SQL-based PIR
queries leak the “shape” of a query while hiding its sensitive con-
stants. Learning the shape of an SQL query may betray information
about the possible (and likely) constants in a way analogous to in-
dexes of queries; however, as is the case with our indexes of queries,
quantifying precisely how much information is leaked (and how
troubling this leakage is) remains highly application-dependent. To
make our explicit-leakage proposal more concrete, we return to the
earlier example of requesting emails by size and suppose that, due
to the context in which indexes of queries are being employed, the
servers can immediately deduce that any email requested by size
resides in the “large” tail of the size distribution (and yet, for the
sake of the example, that such leakage is deemed acceptable). In this
case, it is possible to support queries by size much more efficiently
if we replace Πsize with a matrix through which only emails in the
“large” tail are actually accessible.
This involves deleting each row of Πsize that corresponds to an
email not in the “large” tail of the size distribution, resulting in a
rectangular pseudo-permutation matrix; that is, in a p×r matrix that
has at most one 1 in each row and each column and 0s elsewhere.
Thus, we end up with a short-and-fat (0,1)-matrix having full rank
(i.e., rank p). For instance, the three largest emails in D could be
accessed via
0 0 1 0 0
0 1 0 0 0
1 0 0 0 0
 .
Πlargest (cid:66)
The following analog of Corollary 3.2 applies.
Observation 3.5. Let ⃗e ∈ Fp be a standard basic vector and
let Π ∈ Fp×r be a pseudo-permutation matrix with rank p. If
(x1, ⃗Q1), . . . ,(xℓ, ⃗Qℓ) is a component-wise (t +1, ℓ)-threshold sharing
of ⃗e, then (x1, ⃗Q1 · Π), . . . ,(xℓ, ⃗Qℓ · Π) is a component-wise (t + 1, ℓ)-
and (1, ℓ)-threshold sharing of a standard basis vector ⃗e
′ ∈ Fr ;
namely, of ⃗e
′ = ⃗e · Π.3
Intuitively, Observation 3.5 implies that a t-private IT-PIR
query through a short-and-fat pseudo-permutation matrix yields
a t-private IT-PIR query over a non-hidden subset of a larger data-
base. Specifically, such a matrix Π ∈ Fp×r necessarily contains r −p
all-0 columns; consequently, every pseudo-permuted share vector
(xj, ⃗Qj · Π) has r − p corresponding 0 entries, which means queries
through Π cannot fetch blocks corresponding to the all-0 columns
in Π. Note that anyone can deduce the set of unfetchable blocks by
3Specifically, the r − p entries corresponding to all-0 columns in Π are (1, ℓ)-threshold
shares of 0; the remaining p entries are each (t + 1, ℓ)-threshold shares of either 0 or 1.
5
inspecting Π (or a pseudo-permuted query vector ⃗Qj · Π), and it is in
this sense that Π explicitly leaks information: it explicitly leaks that
the request is for a block “indexed by some query” in Π.
The upshot of explicitly leaking this information is twofold. First,
the query vectors become shorter (their lengths correspond to the
number of queries p in Π, rather than to the number of blocks r in D);
thus, each request incurs strictly lower upstream communication
cost (p group elements) compared to a positional query over D (r
group elements). Second, because each pseudo-permuted query
vector ⃗Q′
j (cid:66) ⃗Qj · Π has support of size p, the vector-matrix product
⃗Q′
j·D incurs strictly lower computation cost (≈ 2ps field operations)
compared to a positional query over D (≈ 2rs field operations). We
also stress that whatever information does leak is known a priori
to the user; i.e., although queries leak some information, they do
so transparently—there are no surprises.
3.4 Privacy in the face of implicit and explicit
information leakage
(cid:14)
Pr
(cid:3)
(cid:2)
(cid:2)
I = i
I = i
,
= Pr
)(cid:3)
In the preceding subsection, we claimed that a t-private query
through a simple index of queries Π is, at least in some sense, still
t-private. Formally proving that this is indeed the case necessitates
a slight (though natural) modification to the standard definition oft-
privacy. In particular, a direct application of the standard definition
would require, for every coalition S ⊆ [1..ℓ] of at most t servers
and for every record index i ∈ [1..r], that
QS = (Π; ⃗Qj1, . . . , ⃗Qjt
(1)
where I and QS denote the random variables respectively describing
the block index the user requests and the joint distribution of share
vectors it sends to servers in S (including the “hint” that the query
should go through Π).
However, it is evident that Equation (1) need not hold, for ex-
ample, when the block in row i of D is not accessible through Π. It
would not suffice to merely restrict the quantifier so that I ranges
only over the subset of block indices which are accessible through
Π; indeed, there may be several distinct indexes of queries, each
inducing its own conditional distribution for I. In other words, a
correct definition must account for the fact that curious PIR servers
will inevitably—upon learning that a given request is through a
particular index of queries Π—leverage this information to update
their priors. The following modified t-privacy definition captures
this idea.
Definition 3.6. Let D ∈ Fr ×s and let each Π1, . . . , Πn be an index
of queries4 for D. Requests aret -private with respect to Π1, . . . , Πn if,
for every coalition S ⊆ [1. . ℓ] of at most t servers, for every record
index i ∈ [1. .r], and for every index of queries Π ∈ {Π1, . . . , Πn},
(cid:14)
(cid:3)
(cid:2)
Pr
I = i
QS = (Π; ⃗Qj1 , . . . , ⃗Qjt
= Pr
I = i
EΠ
,
where I and QS denote the random variables respectively describing
the block index the user requests and the joint distribution of query
vectors it sends to servers in S (including the “hint” that the query
should go through Π), and where EΠ
is the event that the request
is through Π.
4Our omission of the word “simple” here is intentional: each Πj can either be simple
indexes of queries or one of the more sophisticated types we introduce in the sequel. In
particular, by allowing some or all of the Πj to be different kinds of indexes of queries,
we can use Definition 3.6 to define privacy for all constructions in this paper.
)(cid:3)
(cid:2)
(cid:14)
Observe that a t-private query through a simple index of queries
Π is functionally equivalent to—ergo, provides the exact same pri-
vacy guarantee as—a t-private positional query over the database
(cid:66) Π · D. Consequently, Definition 3.6 reduces to the usual
DΠ
t-privacy definition when Π ∈ Fr ×r is the identity matrix.
The next theorem follows from the above observation and the
t-privacy of Goldberg’s IT-PIR [13, 16].
Theorem 3.7. Let D ∈ Fr ×s and let each Π1, . . . , Πn be a simple
index of queries for D. If Π ∈ {Π1, . . . , Πn} with Π ∈ Fp×r and if
(x1, ⃗Q1), . . . ,(xℓ, ⃗Qℓ) is a component-wise (t +1, ℓ)-threshold sharing
of a standard basis vector ⃗e ∈ Fp, then (Π, x1, ⃗Q1), . . . ,(Π, xℓ, ⃗Qℓ)
is t-private with respect to Π1, . . . , Πn.