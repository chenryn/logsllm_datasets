LARGE PAGE pfn 15240000
The pte debugger command confirmed that the first 1 GB of space of the DAX file is mapped 
using huge pages. Indeed, neither the page directory nor the page table are present. The FsTool 
application can also be used to set the alignment of already existing files. The FSCTL_SET_DAX_
ALLOC_ALIGNMENT_HINT control code does not actually move any data though; it just provides 
ALLOC_ALIGNMENT_HINT control code does not actually move any data though; it just provides 
ALLOC_ALIGNMENT_HINT
a hint for the new allocated file extents, as the file continues to grow in the future:
D:\>fstool e:\test.iso /align:2MB /offset:0
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Applying file alignment to "test.iso" (Offset 0x0)... Success.
Press any key to exit...
D:\>fsutil dax queryfileAlignment e:\test.iso
  File Region Alignment:
    Region
Alignment
StartOffset
LengthInBytes
    0
Huge
0
0x100000000
    1
Large
0x100000000
0xf800000
    2
Other
0x10f800000
0x17b000 
736
CHAPTER 11
Caching and file systems
Virtual PM disks and storages spaces support
Persistent memory was specifically designed for server systems and mission-critical applications, like 
huge SQL databases, which need a fast response time and process thousands of queries per second. 
Often, these kinds of servers run applications in virtual machines provided by HyperV. Windows Server 
2019 supports a new kind of virtual hard disk: virtual PM disks. Virtual PMs are backed by a VHDPMEM 
file, which, at the time of this writing, can only be created (or converted from a regular VHD file) by 
using Windows PowerShell. Virtual PM disks directly map chunks of space located on a real DAX disk 
installed in the host, via a VHDPMEM file, which must reside on that DAX volume. 
When attached to a virtual machine, HyperV exposes a virtual PM device (VPMEM) to the guest. This 
virtual PM device is described by the NVDIMM Firmware interface table (NFIT) located in the virtual 
UEFI BIOS. (More details about the NVFIT table are available in the ACPI 6.2 specification.) The SCM Bus 
driver reads the table and creates the regular device objects representing the virtual NVDIMM device 
and the PM disk. The Pmem disk class driver manages the virtual PM disks in the same way as normal 
PM disks, and creates virtual volumes on the top of them. Details about the Windows Hypervisor and 
its components can be found in Chapter 9. Figure 11-77 shows the PM stack for a virtual machine that 
uses a virtual PM device. The dark gray components are parts of the virtualized stack, whereas light 
gray components are the same in both the guest and the host partition.
PMEM Disk
PMEM Disk
VHDPMEM
File
NTFS (DAX)
NTFS (DAX)
NVDIMM
NVDIMM
Host PMEM driver stack
VID
BIOS VDEV
VPMEM VDEV
Persistent region
Persistent
region
Guest
PMEM-aware
file system
Guest
PMEM driver
stack
Virtual  PMEM
device
Host physical address space
Worker process
Host
Guest
Provides guest
NFIT
Describe
NVDIMM layout
Open
VHDPMEM File
ACPI
NFIT
FIGURE 11-77 The virtual PM architecture.
A virtual PM device exposes a contiguous address space, virtualized from the host (this means that 
the host VHDPMEM files don’t not need to be contiguous). It supports both DAX and block mode, 
which, as in the host case, must be decided at volume-format time, and supports large and huge pages, 
which are leveraged in the same way as on the host system. Only generation 2 virtual machines support 
virtual PM devices and the mapping of VHDPMEM files.
Storage Spaces Direct in Windows Server 2019 also supports DAX disks in its virtual storage pools. One 
or more DAX disks can be part of an aggregated array of mixed-type disks. The PM disks in the array can 
be configured to provide the capacity or performance tier of a bigger tiered virtual disk or can be config-
ured to act as a high-performance cache. More details on Storage Spaces are available later in this chapter.
CHAPTER 11
Caching and file systems
737
EXPERIMENT: Create and mount a VHDPMEM image
As discussed in the previous paragraph, virtual PM disks can be created, converted, and assigned 
to a HyperV virtual machine using PowerShell. In this experiment, you need a DAX disk and a 
generation 2 virtual machine with Windows 10 October Update (RS5, or later releases) installed 
(describing how to create a VM is outside the scope of this experiment). Open an administrative 
Windows PowerShell prompt, move to your DAX-mode disk, and create the virtual PM disk (in 
the example, the DAX disk is located in the Q: drive):
PS Q:\> New-VHD VmPmemDis.vhdpmem -Fixed -SizeBytes 256GB -PhysicalSectorSizeBytes 4096 
ComputerName
: 37-4611k2635 
Path
: Q:\VmPmemDis.vhdpmem 
VhdFormat
: VHDX 
VhdType
: Fixed 
FileSize
: 274882101248 
Size
: 274877906944 
MinimumSize             : 
LogicalSectorSize
: 4096 
PhysicalSectorSize
: 4096 
BlockSize               : 0 
ParentPath              : 
DiskIdentifier
: 3AA0017F-03AF-4948-80BE-B40B4AA6BE24 
FragmentationPercentage : 0 
Alignment               : 1 
Attached
: False 
DiskNumber              : 
IsPMEMCompatible        : True 
AddressAbstractionType  : None 
Number                  :
Virtual PM disks can be of fixed size only, meaning that all the space is allocated for the virtual 
disk—this is by design. The second step requires you to create the virtual PM controller and at-
tach it to your virtual machine. Make sure that your VM is switched off, and type the following 
command. You should replace “TestPmVm” with the name of your virtual machine):
PS Q:\> Add-VMPmemController -VMName "TestPmVm"
Finally, you need to attach the created virtual PM disk to the virtual machine’s PM controller:
PS Q:\> Add-VMHardDiskDrive "TestVm" PMEM -ControllerLocation 1 -Path 'Q:\VmPmemDis.vhdpmem'
You can verify the result of the operation by using the Get-VMPmemController command:
PS Q:\> Get-VMPmemController -VMName "TestPmVm"
VMName     ControllerNumber Drives
------     ---------------- ------
TestPmVm   0
{Persistent Memory Device on PMEM controller number 0 at location 1}
If you switch on your virtual machine, you will find that Windows detects a new virtual disk. In 
the virtual machine, open the Disk Management MMC snap-in Tool (diskmgmt.msc) and initialize 
the disk using GPT partitioning. Then create a simple volume, assign a drive letter to it, but don’t 
format it.
EXPERIMENT: Create and mount a VHDPMEM image
As discussed in the previous paragraph, virtual PM disks can be created, converted, and assigned 
to a HyperV virtual machine using PowerShell. In this experiment, you need a DAX disk and a 
generation 2 virtual machine with Windows 10 October Update (RS5, or later releases) installed 
(describing how to create a VM is outside the scope of this experiment). Open an administrative 
Windows PowerShell prompt, move to your DAX-mode disk, and create the virtual PM disk (in 
the example, the DAX disk is located in the Q: drive):
PS Q:\> New-VHD VmPmemDis.vhdpmem -Fixed -SizeBytes 256GB -PhysicalSectorSizeBytes 4096
ComputerName
: 37-4611k2635
Path
: Q:\VmPmemDis.vhdpmem
VhdFormat
: VHDX
VhdType
: Fixed
FileSize
: 274882101248
Size
: 274877906944
MinimumSize             :
LogicalSectorSize
: 4096
PhysicalSectorSize
: 4096
BlockSize               : 0
ParentPath              :
DiskIdentifier
: 3AA0017F-03AF-4948-80BE-B40B4AA6BE24
FragmentationPercentage : 0
Alignment               : 1
Attached
: False
DiskNumber              :
IsPMEMCompatible        : True
AddressAbstractionType  : None
Number                  :
Virtual PM disks can be of fixed size only, meaning that all the space is allocated for the virtual 
disk—this is by design. The second step requires you to create the virtual PM controller and at-
tach it to your virtual machine. Make sure that your VM is switched off, and type the following 
command. You should replace “TestPmVm” with the name of your virtual machine):
“TestPmVm” with the name of your virtual machine):
“TestPmVm”
PS Q:\> Add-VMPmemController -VMName "TestPmVm"
Finally, you need to attach the created virtual PM disk to the virtual machine’s PM controller:
PS Q:\> Add-VMHardDiskDrive "TestVm" PMEM -ControllerLocation 1 -Path 'Q:\VmPmemDis.vhdpmem'
You can verify the result of the operation by using the Get-VMPmemController command:
PS Q:\> Get-VMPmemController -VMName "TestPmVm"
VMName     ControllerNumber Drives
------     ---------------- ------
TestPmVm   0
{Persistent Memory Device on PMEM controller number 0 at location 1}
If you switch on your virtual machine, you will find that Windows detects a new virtual disk. In 
the virtual machine, open the Disk Management MMC snap-in Tool (diskmgmt.msc) and initialize 
the disk using GPT partitioning. Then create a simple volume, assign a drive letter to it, but don’t 
format it.
738
CHAPTER 11
Caching and file systems
You need to format the virtual PM disk in DAX mode. Open an administrative command 
prompt window in the virtual machine. Assuming that your virtual-pm disk drive letter is E:, you 
need to use the following command:
C:\>format e: /DAX /fs:NTFS /q 
The type of the file system is RAW. 
The new file system is NTFS. 
WARNING, ALL DATA ON NON-REMOVABLE DISK 
DRIVE E: WILL BE LOST! 
Proceed with Format (Y/N)? y 
QuickFormatting 256.0 GB 
Volume label (32 characters, ENTER for none)? DAX-In-Vm 
Creating file system structures. 
Format complete. 
     256.0 GB total disk space. 
     255.9 GB are available.
You need to format the virtual PM disk in DAX mode. Open an administrative command 
prompt window in the virtual machine. Assuming that your virtual-pm disk drive letter is E:, you 
need to use the following command:
C:\>format e: /DAX /fs:NTFS /q
The type of the file system is RAW.
The new file system is NTFS.
WARNING, ALL DATA ON NON-REMOVABLE DISK
DRIVE E: WILL BE LOST!
Proceed with Format (Y/N)? y
QuickFormatting 256.0 GB
Volume label (32 characters, ENTER for none)? DAX-In-Vm
Creating file system structures.
Format complete.
     256.0 GB total disk space.
     255.9 GB are available.
CHAPTER 11
Caching and file systems
739
You can then confirm that the virtual disk has been formatted in DAX mode by using the 
fsutil.exe built-in tool, specifying the fsinfo volumeinfo command-line arguments:
C:\>fsutil fsinfo volumeinfo C: 
Volume Name : DAX-In-Vm 
Volume Serial Number : 0x1a1bdc32 
Max Component Length : 255 
File System Name : NTFS 
Is ReadWrite 
Not Thinly-Provisioned 
Supports Case-sensitive filenames 
Preserves Case of filenames 
Supports Unicode in filenames 
Preserves & Enforces ACL’s 
Supports Disk Quotas 
Supports Reparse Points 
Returns Handle Close Result Information 
Supports POSIX-style Unlink and Rename 
Supports Object Identifiers 
Supports Named Streams 
Supports Hard Links 
Supports Extended Attributes 
Supports Open By FileID 
Supports USN Journal 
Is DAX Volume
Resilient File System (ReFS)
The release of Windows Server 2012 R2 saw the introduction of a new advanced file system, the 
Resilient File System (also known as ReFS). This file system is part of a new storage architecture, called 
Storage Spaces, which, among other features, allows the creation of a tiered virtual volume composed 
of a solid-state drive and a classical rotational disk. (An introduction of Storage Spaces, and Tiered 
Storage, is presented later in this chapter). ReFS is a “write-to-new” file system, which means that file 
system metadata is never updated in place; updated metadata is written in a new place, and the old 
one is marked as deleted. This property is important and is one of the features that provides data 
integrity. The original goals of ReFS were the following:
1.
Self-healing, online volume check and repair (providing close to zero unavailability due to file
system corruption) and write-through support. (Write-through is discussed later in this section.)
2.
Data integrity for all user data (hardware and software).
3.
Efficient and fast file snapshots (block cloning).
4.
Support for extremely large volumes (exabyte sizes) and files.
5.
Automatic tiering of data and metadata, support for SMR (shingled magnetic recording) and
future solid-state disks.
You can then confirm that the virtual disk has been formatted in DAX mode by using the 
fsutil.exe built-in tool, specifying the fsinfo volumeinfo command-line arguments:
C:\>fsutil fsinfo volumeinfo C:
Volume Name : DAX-In-Vm
Volume Serial Number : 0x1a1bdc32
Max Component Length : 255
File System Name : NTFS