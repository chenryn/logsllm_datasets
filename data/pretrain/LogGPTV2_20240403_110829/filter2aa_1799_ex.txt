### LARGE PAGE PFN 15240000

The `pte` debugger command confirmed that the first 1 GB of space in the DAX file is mapped using huge pages. Specifically, neither the page directory nor the page table are present. The `FsTool` application can also be used to set the alignment of existing files. However, the `FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT` control code does not actually move any data; it merely provides a hint for the alignment of new file extents as the file grows in the future.

Example:
```shell
D:\>fstool e:\test.iso /align:2MB /offset:0
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Applying file alignment to "test.iso" (Offset 0x0)... Success.
Press any key to exit...
D:\>fsutil dax queryfileAlignment e:\test.iso
  File Region Alignment:
    Region   Alignment   StartOffset   LengthInBytes
    0        Huge        0             0x100000000
    1        Large       0x100000000   0xf800000
    2        Other       0x10f800000   0x17b000
```

### Caching and File Systems

#### Virtual PM Disks and Storage Spaces Support

Persistent memory (PM) was specifically designed for server systems and mission-critical applications, such as large SQL databases, which require fast response times and can process thousands of queries per second. Often, these servers run applications in virtual machines (VMs) provided by Hyper-V. Windows Server 2019 supports a new type of virtual hard disk: virtual PM disks. These virtual PM disks are backed by a VHDPMEM file, which can only be created or converted from a regular VHD file using Windows PowerShell at the time of writing. Virtual PM disks map chunks of space on a real DAX disk installed in the host via a VHDPMEM file, which must reside on that DAX volume.

When attached to a VM, Hyper-V exposes a virtual PM device (VPMEM) to the guest. This virtual PM device is described by the NVDIMM Firmware Interface Table (NFIT) located in the virtual UEFI BIOS. The SCM Bus driver reads this table and creates the necessary device objects representing the virtual NVDIMM device and the PM disk. The Pmem disk class driver manages virtual PM disks in the same way as normal PM disks, creating virtual volumes on top of them. For more details about the Windows Hypervisor and its components, refer to Chapter 9.

**Figure 11-77: The Virtual PM Architecture**

- **Host PMEM Driver Stack**
- **VID**
- **BIOS VDEV**
- **VPMEM VDEV**
- **Persistent Region**
- **Guest PMEM-Aware File System**
- **Guest PMEM Driver Stack**
- **Virtual PMEM Device**
- **Host Physical Address Space**
- **Worker Process**
- **Host**
- **Guest**
- **NFIT (Describes NVDIMM Layout)**
- **Open VHDPMEM File**
- **ACPI NFIT**

A virtual PM device exposes a contiguous address space, virtualized from the host, meaning the host VHDPMEM files do not need to be contiguous. It supports both DAX and block mode, which must be decided at volume format time, and supports large and huge pages, leveraged in the same way as on the host system. Only Generation 2 VMs support virtual PM devices and the mapping of VHDPMEM files.

Storage Spaces Direct in Windows Server 2019 also supports DAX disks in its virtual storage pools. One or more DAX disks can be part of an aggregated array of mixed-type disks. The PM disks in the array can be configured to provide the capacity or performance tier of a larger tiered virtual disk or act as a high-performance cache. For more details on Storage Spaces, see later in this chapter.

### Experiment: Create and Mount a VHDPMEM Image

As discussed, virtual PM disks can be created, converted, and assigned to a Hyper-V VM using PowerShell. For this experiment, you need a DAX disk and a Generation 2 VM with Windows 10 October Update (RS5, or later releases) installed. Open an administrative Windows PowerShell prompt, navigate to your DAX-mode disk, and create the virtual PM disk (in this example, the DAX disk is located on the Q: drive):

```powershell
PS Q:\> New-VHD -Path VmPmemDis.vhdpmem -Fixed -SizeBytes 256GB -PhysicalSectorSizeBytes 4096
ComputerName      : 37-4611k2635
Path              : Q:\VmPmemDis.vhdpmem
VhdFormat         : VHDX
VhdType           : Fixed
FileSize          : 274882101248
Size              : 274877906944
LogicalSectorSize : 4096
PhysicalSectorSize: 4096
IsPMEMCompatible  : True
```

Virtual PM disks can only be of fixed size, meaning all the space is allocated for the virtual disk. Next, create the virtual PM controller and attach it to your VM. Ensure your VM is powered off and use the following command, replacing "TestPmVm" with your VM's name:

```powershell
PS Q:\> Add-VMPmemController -VMName "TestPmVm"
```

Finally, attach the created virtual PM disk to the VM’s PM controller:

```powershell
PS Q:\> Add-VMHardDiskDrive -VMName "TestPmVm" -ControllerNumber 0 -ControllerLocation 1 -Path 'Q:\VmPmemDis.vhdpmem'
```

Verify the result using the `Get-VMPmemController` command:

```powershell
PS Q:\> Get-VMPmemController -VMName "TestPmVm"
VMName     ControllerNumber Drives
------     ---------------- ------
TestPmVm   0                {Persistent Memory Device on PMEM controller number 0 at location 1}
```

If you power on your VM, Windows will detect a new virtual disk. In the VM, open the Disk Management MMC snap-in (diskmgmt.msc), initialize the disk using GPT partitioning, create a simple volume, and assign a drive letter, but do not format it yet.

### Formatting the Virtual PM Disk in DAX Mode

To format the virtual PM disk in DAX mode, open an administrative command prompt in the VM. Assuming the virtual PM disk drive letter is E:, use the following command:

```cmd
C:\>format e: /DAX /fs:NTFS /q
The type of the file system is RAW.
The new file system is NTFS.
WARNING, ALL DATA ON NON-REMOVABLE DISK DRIVE E: WILL BE LOST!
Proceed with Format (Y/N)? y
QuickFormatting 256.0 GB
Volume label (32 characters, ENTER for none)? DAX-In-Vm
Creating file system structures.
Format complete.
     256.0 GB total disk space.
     255.9 GB are available.
```

You can confirm the virtual disk has been formatted in DAX mode using the `fsutil.exe` tool with the `fsinfo volumeinfo` command:

```cmd
C:\>fsutil fsinfo volumeinfo e:
Volume Name : DAX-In-Vm
Volume Serial Number : 0x1a1bdc32
Max Component Length : 255
File System Name : NTFS
Is ReadWrite
Not Thinly-Provisioned
Supports Case-sensitive filenames
Preserves Case of filenames
Supports Unicode in filenames
Preserves & Enforces ACL’s
Supports Disk Quotas
Supports Reparse Points
Returns Handle Close Result Information
Supports POSIX-style Unlink and Rename
Supports Object Identifiers
Supports Named Streams
Supports Hard Links
Supports Extended Attributes
Supports Open By FileID
Supports USN Journal
Is DAX Volume
```

### Resilient File System (ReFS)

Windows Server 2012 R2 introduced the Resilient File System (ReFS). This file system is part of a new storage architecture called Storage Spaces, which allows the creation of a tiered virtual volume composed of a solid-state drive and a classical rotational disk. ReFS is a "write-to-new" file system, meaning file system metadata is never updated in place; instead, updated metadata is written to a new location, and the old one is marked as deleted. This property is crucial for data integrity. The original goals of ReFS were:

1. **Self-healing, online volume check, and repair**: Provides close to zero unavailability due to file system corruption and write-through support.
2. **Data integrity for all user data**: Ensures hardware and software data integrity.
3. **Efficient and fast file snapshots**: Supports block cloning.
4. **Support for extremely large volumes and files**: Handles exabyte sizes.
5. **Automatic tiering of data and metadata**: Supports SMR (shingled magnetic recording) and future solid-state disks.