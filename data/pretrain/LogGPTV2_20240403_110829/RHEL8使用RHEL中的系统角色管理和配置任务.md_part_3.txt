以下是使用 Collections 准备和应用 Red Hat Ansible Engine playbook
的示例，以便在一组独立的机器上配置日志记录解决方案。
::: itemizedlist
**先决条件**
-   已安装 Galaxy 集合。
:::
::: orderedlist
**流程**
1.  创建定义所需角色的 playbook:
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` screen
        # vi logging-playbook.yml
        ```
    2.  将以下内容插入 YAML 文件中：
        ``` screen
        ---
        - name: Deploying basics input and implicit files output
          hosts: all
          roles:
            - redhat.rhel_system_roles.logging
          vars:
            logging_inputs:
              - name: system_input
                type: basics
            logging_outputs:
              - name: files_output
                type: files
            logging_flows:
              - name: flow1
                inputs: [system_input]
                outputs: [files_output]
        ```
    :::
2.  在特定清单上执行 playbook:
    ``` screen
    # ansible-playbook -i inventory-file logging-playbook.yml
    ```
    其中：
    ::: itemizedlist
    -   [*inventory-file*]{.emphasis} 是清单文件的名称。
    -   [*logging-playbook.yml*]{.emphasis} 是您使用的 playbook。
    :::
:::
::: orderedlist
**验证步骤**
1.  测试 `/etc/rsyslog.conf`{.literal} 文件的语法：
    ``` screen
    # rsyslogd -N 1
    rsyslogd: version 8.1911.0-6.el8, config validation run (level 1), master config /etc/rsyslog.conf
    rsyslogd: End of config validation run. Bye.
    ```
2.  验证系统是否向日志发送信息：
    ::: orderedlist
    1.  发送测试信息：
        ``` screen
        # logger test
        ```
    2.  查看 `/var/log/messages`{.literal} 日志，例如：
        ``` screen
        # cat /var/log/messages
        Aug  5 13:48:31 hostname root[6778]: test
        ```
        `hostname`{.literal} 是客户端系统的主机名。日志显示输入 logger
        命令的用户的用户名，本例中为 `root`{.literal}。
    :::
:::
::: itemizedlist
**其它资源**
-   与流程模块内容紧密相关的其他材料的链接列表。
-   目前，模块无法包含
    xrefs，因此您不能在集合中包含到其他内容的链接。如果您需要链接到另一个装配，请将
    xref 添加到包含此模块的汇编中。
-   [有关编写流程模块的更多详细信息，请参阅模块化文档参考指南](https://github.com/redhat-documentation/modular-docs#modular-documentation-reference-guide){.link}。
-   对文件名、ID 和标题使用一致的系统。提示信息请查看 [Modular
    文档参考指南中的](https://github.com/redhat-documentation/modular-docs#modular-documentation-reference-guide){.link}
    [*Anchor Names 和文件名*]{.emphasis}。
:::
:::
:::
[]{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel}第 4 章 使用 Ansible 角色永久配置内核参数 {.title}
:::
作为熟悉 Red Hat Ansible Engine 经验丰富的用户,您可以使用角色
`kernel_settings`{.literal}
同时在多个客户端中配置内核参数。这个解决方案：
::: itemizedlist
-   提供带有有效输入设置的友好接口。
-   保留所有预期的内核参数。
:::
在您从控制机器运行 `kernel_settings`{.literal}
角色后，内核参数会立即应用于受管系统，并在重启后保留。
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#introduction-to-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}内核设置角色简介 {.title}
:::
RHEL 系统角色是 Ansible Automation Platform
中的角色和模块集合，可提供一致的配置界面来远程管理多个系统。
RHEL 系统角色用于使用 `kernel_settings`{.literal}
系统角色自动配置内核。`rhel-system-roles`{.literal}
软件包包含这个系统角色以及参考文档。
要以自动方式在一个或多个系统中应用内核参数，请在 playbook
中使用您选择的一个或多个角色变量。`kernel_settings`{.literal}playbook
是一个或多个人类可读的 play 的列表，采用 YAML 格式编写。
您可以使用清单文件来定义一组您希望 Ansible Engine 根据 playbook
配置的系统。
使用 `kernel_settings`{.literal} 角色，您可以配置：
::: itemizedlist
-   使用 `kernel_settings_sysctl`{.literal} 角色变量的内核参数
-   使用 `kernel_settings_sysfs`{.literal}
    角色变量的各种内核子系统、硬件设备和设备驱动程序
-   `systemd`{.literal} 服务管理器的 CPU 相关性，并使用
    `kernel_settings_systemd_cpu_affinity`{.literal} 角色变量处理它
-   内核内存子系统使用 `kernel_settings_transparent_hugepages`{.literal}
    和 `kernel_settings_transparent_hugepages_defrag`{.literal}
    角色变量透明地进行巨页
:::
::: itemizedlist
**其它资源**
-   `README.md`{.literal}
    `/usr/share/doc/rhel-system-roles/kernel_settings/`{.literal}
    目录中的 `README.html`{.literal} 文件
-   [使用
    playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [如何构建清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}
:::
:::
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#applying-selected-kernel-parameters-using-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}使用内核设置角色应用所选内核参数 {.title}
:::
按照以下步骤准备并应用 Ansible playbook
来远程配置内核参数，从而对多个受管操作系统产生持久性。
::: itemizedlist
**先决条件**
-   您的 Red Hat Ansible Engine
    [*订阅已附加到该系统，也称为控制机器*]{.emphasis}，您要从中运行
    `kernel_settings`{.literal}
    角色。如需更多信息，请参阅[如何下载和安装 Red Hat Ansible
    Engine](https://access.redhat.com/articles/3174981){.link} 文章。
-   在控制机器上启用 Ansible Engine 软件仓库。
-   Ansible Engine 已安装在控制机器上。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不需要在要配置内核参数的系统中（也称为
    [*受管主机*]{.emphasis}）安装 Ansible Engine。
    :::
-   `rhel-system-roles`{.literal} 软件包安装在控制机器上。
-   控制机器上有一个受管主机清单，Ansible 引擎可以连接它们。
:::
::: orderedlist
**流程**
1.  另外,还可查看 `inventory`{.literal} 文件：
    ``` literallayout
    #  cat /home/jdoe//inventory
    [testingservers]
    PI:EMAIL
    PI:EMAIL
    [db-servers]
    db1.example.com
    db2.example.com
    [webservers]
    web1.example.com
    web2.example.com
    192.0.2.42
    ```
    该文件定义 `[testingservers]`{.literal}
    组和其它组。它可让您针对特定系统集合更有效地运行 Ansible Engine。
2.  创建配置文件来为 Ansible Engine 操作设置默认值和权限升级。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//ansible.cfg
        ```
    2.  将以下内容插入到文件中：
        ``` literallayout
        [defaults]
        inventory = ./inventory
        [privilege_escalation]
        become = true
        become_method = sudo
        become_user = root
        become_ask_pass = true
        ```
        `[defaults]`{.literal}
        部分指定受管主机清单文件的路径。`[privilege_escalation]`{.literal}
        部分定义将用户权限转移到指定受管主机上的
        `root`{.literal}。这对成功配置内核参数是必需的。运行 Ansible
        playbook
        时，会提示您输入用户密码。在连接到受管主机后，用户会通过
        `sudo`{.literal} 切换为 `root`{.literal}。
    :::
3.  创建使用 `kernel_settings`{.literal} 角色的 Ansible playbook。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//kernel_roles.yml
        ```
        此文件代表一个 playbook，通常包含了一组有特定顺序的任务（也称为
        [*play*]{.emphasis} ）列表。这些任何会根据 `inventory`{.literal}
        文件中选择的特定管理主机进行。
    2.  将以下内容插入到文件中：
        ``` literallayout
        ---
        - name: Configure kernel settings
          hosts: testingservers
          vars:
            kernel_settings_sysctl:
              - name: fs.file-max
                value: 400000
              - name: kernel.threads-max
                value: 65536
            kernel_settings_sysfs:
              - name: /sys/class/net/lo/mtu
                value: 65000
            kernel_settings_transparent_hugepages: madvise
          roles:
            - linux-system-roles.kernel_settings
        ```
        `name`{.literal} 键是可选的。它将一个任意字符串作为标签与该 play
        关联，并确定该 play 的用途。play 中的 `hosts`{.literal} 键指定
        play
        被运行的主机。此键的值或值可以作为被管理的主机的单独名称提供，也可以作为
        `inventory`{.literal} 文件中定义的一组主机提供。
        `vars`{.literal} 部分代表包含所选内核参数名称和值的变量列表。
        `roles`{.literal} 键指定配置 `vars`{.literal}
        部分中提到的参数和值的系统角色。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        您可以修改 playbook 中的内核参数及其值以符合您的需要。
        :::
    :::
4.  （可选）验证 play 中的语法是否正确。
    ``` literallayout
    #  ansible-playbook --syntax-check kernel-roles.yml
    playbook: kernel-roles.yml
    ```
    本例演示了对 playbook 的成功验证。
5.  执行 playbook。
    ``` literallayout
    #  ansible-playbook kernel-roles.yml
    BECOME password:
    PLAY [Configure kernel settings]  ... PLAY RECAP **
    PI:EMAIL       : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    PI:EMAIL        : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    ```
    在 Ansible Engine 运行 playbook
    之前，会提示您输入密码，以便受管主机上的用户能够切换至
    `root`{.literal}，这在配置内核参数时是必需的。
    recap 部分显示 play
    成功完成所有受管主机(`failed=0`{.literal})，并且应用了 4
    个内核参数(`changed=4`{.literal})。
6.  重启您的受管主机并检查受影响的内核参数,以验证是否应用了更改并在重启后保留。
:::
::: itemizedlist
**其它资源**
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#getting-started-with-rhel-system-roles_getting-started-with-system-administration){.link}
-   `README.html`{.literal}
    `/usr/share/doc/rhel-system-roles/kernel_settings/`{.literal}
    目录中的 `README.md`{.literal} 文件
-   [使用清单](https://docs.ansible.com/ansible/2.7/user_guide/intro_inventory.html){.link}
-   [配置
    Ansible](https://docs.ansible.com/ansible/2.7/installation_guide/intro_configuration.html){.link}
-   [使用
    Playbook](https://docs.ansible.com/ansible/2.7/user_guide/playbooks.html){.link}
-   [使用变量](https://docs.ansible.com/ansible/2.7/user_guide/playbooks_variables.html){.link}
-   [角色](https://docs.ansible.com/ansible/2.7/user_guide/playbooks_reuse_roles.html){.link}
:::
:::
:::
[]{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel}第 5 章 使用系统角色配置网络连接 {.title}
:::
RHEL 上的 `network`{.literal} 系统角色可让管理员使用 Ansible
自动执行与网络相关的配置和管理任务。
::: section
::: titlepage
# []{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-a-static-ethernet-connection-using-rhel-system-roles_using-system-roles-to-configure-network-connections}使用 RHEL 系统角色配置静态以太网连接 {.title}
:::
此流程描述了如何使用 RHEL 系统角色通过运行 Ansible playbook 为
`enp7s0`{.literal} 接口远程添加带有以下设置的以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal}，子网掩码为 `/24`{.literal}