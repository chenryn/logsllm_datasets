# 优化后的文本

## 覆盖率指标
图8展示了覆盖率指标，包括初始的基本块数量、测试过程中添加的基本块数量以及添加的基本块所占的百分比。

| 程序      | 初始基本块数 | 测试中添加的基本块数 | 添加百分比 |
|---------|-------------|------------------|----------|
| gzip-1   | 4%          | 5509             | 12%      |
| gzip-2   | 908         | 22%              | 102      |
| gzip-3   | 310%        | 592              | 677      |
| bzip2-1  | 34.3%       | 8.8%             | 97       |
| bzip2-2  | 0.24%       | 2187             | 0.073%   |
| bzip2-3  | 2392        | 17.2%            | 36.3%    |
| mplayer-1| 34.1%       | 36.3%            | 16%      |
| mplayer-2| 12.7%       | 15%              | 7.5%     |
| mplayer-3| 8.5%        | 4.0%             | zzuf     |
| ffmpeg-1 | 326         | 1395             | 2472     |
| ffmpeg-2 | 20036       | 2210             | 538      |
| ffmpeg-3 | 20          | 6                | 1846     |
| convert-1| 3560        | 3345             | 3561     |
| convert-2| 334         | 275              | 316      |
| exiv2-1  | 209         | 237              | 114      |
| exiv2-2  | NA          | 2934             | 2783     |
| exiv2-3  | 2816        | 252              | 259      |

## 时间分配
图9显示了SmartFuzz各个阶段所花费的时间百分比。第二列表示总运行时间（秒），其余列是总时间的百分比。“其他”列包括解决STP查询所花费的时间。

例如，mplayer的第一个运行实例使用mp3种子文件，总共花费了98.57%的时间在符号执行上，只有0.33%的时间在覆盖率上，0.72%的时间在分类上。相比之下，mplayer的第二个运行实例使用mp4种子文件，仅花费了14.77%的时间在符号执行上，但花费了10.23%的时间在覆盖率上，以及40.82%的时间在分类上。我们发现，在我们的几次测试运行中，符号执行和分类的速度是主要瓶颈。这表明未来的工作应集中在改进这两个方面。

## 求解器统计
相关约束优化因程序而异。我们测量了所有发送到约束求解器的查询的大小，并在应用第4节描述的相关约束优化之前和之后进行了比较。图10显示了每个测试程序的所有查询的平均大小。虽然优化在所有情况下都是有效的，但其平均效果在不同的测试程序之间差异很大。这表明不同程序中影响每个查询的输入字节数有很大差异。

大多数查询是快速的。图10还显示了所有测试运行中STP求解器时间的经验累积分布函数。大约70%的测试用例中，求解器最多需要一秒。最长的求解时间为约10.89秒。这些结果反映了我们选择的内存模型和相关约束优化的有效性。由于这些因素，发送给求解器的查询只包含位向量操作（没有数组约束），并且发送给求解器的大部分约束集都很小，从而实现了快速的求解性能。

## 结论
我们描述了动态测试生成中寻找整数漏洞的新方法，并在新的动态测试生成工具SmartFuzz中实现了这些方法。然后，我们报告了构建网站metafuzz.com并使用它来大规模管理测试用例生成的经验。特别是，我们发现SmartFuzz找到了zzuf未找到的漏洞，反之亦然，这表明全面的测试策略应同时使用白盒和黑盒测试生成工具。此外，我们展示了我们的方法可以找到整数漏洞，而不会像静态分析或运行时检查方法那样产生误报，并且我们的方法可以扩展到商用Linux媒体播放软件。Metafuzz网站已经上线，我们已经发布了代码以供其他人使用我们的工作成果。

## 致谢
感谢Cristian Cadar、Daniel Dunbar、Dawson Engler、Patrice Godefroid、Michael Levin和Paul Twohey就他们的系统和动态测试生成进行讨论。感谢Paul Twohey提供有关测试机器工程的有用提示。感谢Chris Karlof在短时间内审阅了我们的论文草稿。感谢SUPERB TRUST 2008团队在2008年夏天对Metafuzz和SmartFuzz的工作。感谢Li-Wen Hsu和Alex Fabrikant对metafuzz.com网站的帮助，以及Sushant Shankar、Shiuan-Tzuo Shen和Mark Winterrowd的评论。感谢Erinn Clark、Charlie Miller、Prateek Saxena、Dawn Song、Berkeley BitBlaze小组和Oakland匿名评审员对本工作的早期版本提供的反馈。这项工作得到了DARPA和NSF拨款CCF-0430585和CCF-0424422的慷慨支持。

## 参考文献
[略]

希望以上内容对你有帮助！如果有任何进一步的问题，请随时告诉我。