User: 请解答这个和日志有关的问题How to store passwords written on a physical notebook? Answers to the question "How safe are password managers like LastPass?" suggest that storing personal passwords on a physical notebook might be a reasonable option:


  I know someone who won't use Password Safe and instead has a physical
  notebook with his passwords in obfuscated form. This notebook is
  obviously much safer against malware... whether it's at greater risk
  of loss/theft is an interesting question.


Obviously, a piece of paper is secure against any malware attacks.


  The requirement is for an offline access of credentials. For example a
  small notebook on which you write all your security details for all
  banks, stores, websites, even combination locks, addresses and all
  other details you may wish to be able to access from any location in
  the world.


Also, it can sometimes be easier to look up passwords in a notebook -- e.g. if you travel a lot, you could store passwords on your smartphone using a password manager app. However, this means your phone needs to be charged and operational all the time, which adds another point of failure.



Now, disregarding the posibilities that a notebook might be lost, stolen completely, destroyed or otherwise physically harmed, I'd like to focus on a one question:

How would you obfuscate (as mentioned in the first quote) passwords so that they cannot easily be deciphered by someone who is able to throw a glance at the notebook?

On the other hand, the algorithm must be simple enough so that the owner of the notebook can decode his or her own passwords in almost no time.

Bonus questions:

Could such an algorithm be considered more or less secure even if it's posted here on Information Security or does obfuscation always imply security through obscurity (i.e. keeping the algorithm itself secret)?

Could an obfuscation algorithm be designed in such a way that it would be impossible or unlikely to decipher the passwords, even if a hypothetical attacker had access to the notebook for at least several hours? Or would that naturally contradict the requirement that the owner can decode his/her passwords quickly?

Assistant: In approximate order of increasing complexity (not security, and methods may be combined), here are some ideas that would be easy for anyone used to puzzles/writing code/maths.  A more complete idea is below.  NB: when I say "secret" I mean not written in the book. These are all easy, and most useful to deter the casual thief.


Have a memorised secret element, common to all passwords. *
Minor variant -- an secret element easily derived from the website name/username. 
Put too much information in the book, e.g. know that actually you omit the first 4 characters of each password.*
Offset the account and password by some constant number of entries. *
Never write the full username, just enough to be a clue to you.


* These items have the significant vulnerability that once the obfuscation is cracked for one entry, it's automatically cracked for all entries with no further effort.

If the exact algorithm is published, clearly a notebook-thief who could also script login attempts (or a team of course) could apply the algorithm automagically -- or all published algorithms.  The type of algorithm could be published, for example:


From the password as written, call the first digit x and the second y.  
Count x characters from the first punctuation mark (or first character, or first digit).
Then swap the cases of the next y letters (or preceeding y) letters.
For a memorised 4-digit PIN, increment the first four letters by the numbers of the pin (e.g. 1234 applied to a!bcd would give b!dfh).


Of course you could:


Swap the meanings of x and y
Increment/decrement x and y.
Count from the first vowel.
Swap the cases of y consonants.
Replace digits with their corresponding letters by alphabetic position and vice versa.
Swap digits for the punctuation on the same key (you either need to be confident in the keyboard layout you'll encounter or know your own keyboard very well.)


All these operations, by definition, can be scripted.  But the notebook thief would have to get hold of (or write) a script implementing these (and it's actually quite a variable space even without a secret element.  Then they'd have to type in the passwords (an error-prone process with randomly-generated text), run the script over the list, and attempt to log in with the now potentially thousands of passwords per site.  And hope that the site doesn't lock out after several failed attempts.

It would be worth keeping a backup list, even if not a backup copy of the book, as a list of sites for which the passwords should be changed/accounts flagged if the book went missing.

As with many security measures, the goal must be to make it too much effort to break in.  By combining manual and scripted effort you're doing quite a lot towards that, and increasing your chances that they'll give up.