    p, q = generate_p_q(L, N)
    g = generate_g(p, q)
    return p, q, g
    def sign(M, p, q, g, x):
    if not validate_params(p, q, g):
    raise Exception("Invalid params")
    while True:
    k = randrange(2, q)  # k  1 and (p - 1) % q:
    return True
    return False
    def validate_sign(r, s, q):
    if r  q:
    return False
    if s  q:
    return False
    return True
    if __name__ == "__main__":
    N = 160
    L = 1024
    p, q, g = generate_params(L, N)
    x, y = generate_keys(g, p, q)
    text = "MISIS rocks"
    M = str.encode(text, "ascii")
    r, s = sign(M, p, q, g, x)
    if verify(M, r, s, p, q, g, y):
    print('All ok')
    print M, r, s, p, q, g, y, x
wp.py
    import DSA
    import gmpy2
    p = 89884656743115795725606614650159225690277841481502595853919197404142682654587633619443529337107618458139040334633197494177921687649471369499213716567752381328547433890099679870655669164451442682253794104184449101557496697367969882087186435421957492974255167534286662485855407981652149026488559437814307020371
    q = 1229497345621183758814993469191332519500506868989
    g = 58529698759563737634016334033537212867717849333012189004643018841270428563683093483006045477112444680372809385830948207442567847485491504701629757805667159000252791001714694507655949691684409083802508920193939674609121001281446700059723241202517422540626419233721451721744085470000121912567840671207537526982
    y = 29489506469114296742770625557066000814217646414802633238412133010472159016957098846919012455018753959989276570368282336480069171767524057901394863984285974673733305792863550044443246228204503645686034468583054261755376390851531080847708812880601981651112161391132712064024801647437927228982784350971270864172
    md51 = 193111848988193367504523557345609960681
    out1 =[891788218480967205838238368504390622327899630141L, 1071869941763049920072685934641936261427117475133L]
    md52 = 76447611971473350019028042637993930502
    out2 =[891788218480967205838238368504390622327899630141L, 1185662127967437283367637521307280915897562273383L]
    if DSA.verify(md51, out1[0], out1[1], p, q, g, y):
    print('All ok')
    if DSA.verify(md52, out2[0], out2[1], p, q, g, y):
    print('All ok')
    m3 = md51
    m4 = md52
    s3 = out1[1]
    s4 = out2[1]
    r = out1[0]
    ds = s4 - s3
    dm = m4 - m3
    k = gmpy2.mul(dm, gmpy2.invert(ds, q))
    k = gmpy2.f_mod(k, q)
    tmp = gmpy2.mul(k, s3) - m3
    x = tmp * gmpy2.invert(r, q)
    x = gmpy2.f_mod(x, q)
    print int(x)
    M = 334436397493699539473999398012751306876
    r, s = DSA.sign(M, p, q, g, x)
    print '('+str(r)+'L'+', '+str(s)+'L'+')'
###  Prime
这题应该算是卡的最久的了，题目给出了4组 m^n mod n = c,n的生成方式未知,已知n ,c 求解 m ，看起来像是一个RSA的解密
。与RSA相关联的是欧拉定理，根据欧拉定理可知，  
m^phi(n) mod n ==1，  
结合题目的条件可得：  
m^(n mod phi(n)) mod n =c  
下面就是尝试分解n,发现给出的4个n两两不互素，每个n可以分解成4个素数的乘积，随后对多素数的RSA进行解密，参考  
交互脚本如下：
    from  pwn import *
    import gmpy2
    t = remote('47.111.59.243', 8003)
    proof = t.recvline()
    print proof
    check  = proof[-6:-1]
    salt = proof[-20:-16]
    for i in range(10000000):
    if hashlib.md5(str(i)+salt).hexdigest()[0:5] == check:
    break
    t.sendline(str(i))
    cs = [0] * 4
    ns = [0] * 4
    cs[0] = int(t.recvline()[10:-2],16)
    ns[0] = int(t.recvline()[10:-2],16)
    cs[1] = int(t.recvline()[10:-2],16)
    ns[1] = int(t.recvline()[10:-2],16)
    cs[2] = int(t.recvline()[10:-2],16)
    ns[2] = int(t.recvline()[10:-2],16)
    cs[3] = int(t.recvline()[10:-2],16)
    ns[3] = int(t.recvline()[10:-2],16)
    print t.recvuntil('=')
    m = [0] *4
    print 'start!'
    p = [[0 for i in range(4)] for j in range(4)]
    p[0][1] = gmpy2.gcd(ns[0], ns[1])
    p[0][2] = gmpy2.gcd(ns[0], ns[2])
    p[0][3] = gmpy2.gcd(ns[0], ns[3])
    p[0][0] = ns[0]/(p[0][1]*p[0][2]*p[0][3])
    p[1][1] = gmpy2.gcd(ns[0], ns[1])
    p[1][2] = gmpy2.gcd(ns[1], ns[2])
    p[1][3] = gmpy2.gcd(ns[1], ns[3])
    p[1][0] = ns[1]/(p[1][1]*p[1][2]*p[1][3])
    p[2][1] = gmpy2.gcd(ns[2], ns[1])
    p[2][2] = gmpy2.gcd(ns[0], ns[2])
    p[2][3] = gmpy2.gcd(ns[2], ns[3])
    p[2][0] = ns[2]/(p[2][1]*p[2][2]*p[2][3])
    p[3][1] = gmpy2.gcd(ns[3], ns[1])
    p[3][2] = gmpy2.gcd(ns[3], ns[2])
    p[3][3] = gmpy2.gcd(ns[0], ns[3])
    p[3][0] = ns[3]/(p[3][1]*p[3][2]*p[3][3])
    phi = [0]*4
    i = 0
    for i in range(4):
    phi[i] = (p[i][0]-1)*(p[i][1]-1)*(p[i][2]-1)*(p[i][3]-1)
    d = [0]*4
    e = [0]*4
    for i in range(4):
    e[i] = ns[i]%phi[i]
    d[i] = gmpy2.invert(e[i], phi[i])
    for i  in range(4):
    tmp1 = pow(cs[i],d[i],ns[i])
    tmp2= pow(tmp1,e[i],ns[i])
    if tmp2 == cs[i]:
    t.sendline(str(hex(tmp1)[2:]))
    if i!=3:
    print t.recvuntil('=')
    else:
    print t.recvline()
###  MT
题目主要是对以下一段逻辑进行逆向，