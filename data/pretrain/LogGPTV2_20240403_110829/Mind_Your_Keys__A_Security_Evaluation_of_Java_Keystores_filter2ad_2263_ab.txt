complexity is not very high. This idea is at the base of modern,
state-of-the-art key derivation functions. In [10], [56], [15],
this mechanism has been formalized and analyzed, providing
formal evidence of its correctness. Standard key derivation
functions are all based on key stretching and salting to slow
down brute-forcing [40], [49]. In our paper we advocate the
use of these standard mechanisms for keystores security.
III. SECURITY PROPERTIES AND THREAT MODEL
In this section, we identify a set of fundamental security
properties that should be guaranteed by any keystore (Sec-
tion III-A). We then distill rules that should be followed when
designing a keystore in order to achieve the desired security
properties (Section III-B). Finally, we introduce the threat
model covering a set of diverse attacker capabilities that enable
realistic attack scenarios (Section III-C).
A. Security Properties
We consider standard security properties such as conﬁden-
tiality and integrity of keys and keystore entries. Breaking
conﬁdentiality of sensitive keys allows an attacker to intercept
all the encrypted trafﬁc or to impersonate the user. Breaking
integrity has similar severe consequences as it might allow an
attacker to import fake CA certiﬁcates and old expired keys.
Additionally, since the access to a keystore is mediated by a
software library or an application, we also consider the effect
that a keystore has on the execution environment. Thus, we
require the following properties:
P1 Conﬁdentiality of encrypted entries
P2 Integrity of keystore entries
P3 System integrity
Property P1 states that the value of an encrypted entry should
be revealed only to authorized users, who know the correct
decryption password. According to P2, keystore entries should
be modiﬁed, created or removed only by authorized users,
who know the correct integrity password, usually called store
password. Property P3 demands that the usage of a keystore
should always be tolerated by the environment, i.e., interacting
with a keystore, even when provided by an untrusted party,
should not pose a threat to the system, cause misbehaviours or
hang the application due to an unsustainable performance hit.
A keystore ﬁle should be secured similarly to a password
ﬁle: the sensitive content should not be disclosed even when
the ﬁle is leaked to an attacker. In fact, it is often the case
that keystores are shared in order to provide the necessary key
material to various corporate services and applications. Thus,
in our threat model we will always assume that the attacker
has read access to the keystore ﬁle (cf. Section III-C). For this
reason we require that the above properties hold even in the
presence of ofﬂine attacks. The attacker might, in fact, brute-
force the passwords that are used to enforce conﬁdentiality and
integrity and, consequently, break the respective properties.
B. Design Rules
We now identify a set of core rules that should be em-
braced by the keystore design in order to provide the security
guarantees of Section III-A:
3
R1 Use standard, state-of-the-art cryptography
R2 Choose strong, future-proof cryptographic parameters,
while maintaining acceptable performance
R3 Enforce a typed keystore format
Rule R1 dictates the use of modern and veriﬁed algorithms
to achieve the desired keystore properties. It is well-known
that the design of custom cryptography is a complex task even
for experts, whereas standard algorithms have been carefully
analyzed and withstood years of cracking attempts by the
cryptographic community [13]. In this context, the National
Institute of Standards and Technology (NIST) plays a promi-
nent role in the standardization of cryptographic algorithms
and their intended usage [14], engaging the cryptographic
community to update standards according to cryptographic
advances. For instance, NIST declared SHA1 unacceptable to
use for digital signatures beginning in 2014, and more recently,
urged all users of Triple-DES to migrate to AES for encryption
as soon as possible [9] after the ﬁndings published in [17].
The KDF function recommended by NIST [52] is PBKDF2,
as deﬁned in the PKCS#5 standard, which supersedes the
legacy PBKDF1. Another standard KDF function is deﬁned in
PKCS#12, although it has been deprecated for conﬁdentiality
purposes in favour of PBKDF2.
Key derivation functions combine the password with a
randomly generated salt and iteratively apply a pseudorandom
function (e.g., a hash function) to produce a cryptographic
key. The salt allows the generation of a large set of keys
corresponding to each password [56], while the high number
of iterations is introduced to hinder brute-force attacks by
signiﬁcantly increasing computational times. Rule R2 reﬂects
the need of choosing parameters to keep pace with the state-of-
the-art in cryptographic research and the advances in compu-
tational capabilities. The latest NIST draft on Digital Identity
Guidelines [28] sets the minimum KDF iteration count to
10,000 and the salt size to 32 bits. However, such lower
bounds on the KDF should be signiﬁcantly raised for critical
keys according to [52] which suggests to set the number of
iterations as high as can be tolerated by the environment,
while maintaining acceptable performance. For instance, Apple
iOS derives the decryption key for the device from the user
password using a KDF with an iteration count calculated
by taking into account the computational capabilities of the
hardware and the impact on the user experience [11].
Finally, rule R3 states that the keystore format must provide
strong typing for keystore content, such that cryptographic
objects are stored and read unambiguously. Despite some
criticism over the years [29], the PKCS#12 standard embraces
this principle providing precise types for storing many cryp-
tography objects. Additionally, given that keystore ﬁles are
supposed to be accessed and modiﬁed by different parties,
applications parsing the keystore format must be designed to
be robust against malicious crafted content.
Interestingly, not following even one of the aforementioned
rules may lead to a violation of conﬁdentiality and integrity
of the keystore entries. For instance, initializing a secure KDF
with a constant or empty salt, which violates only R2, would
allow an attacker to precompute the set of possible derived
keys and take advantage of rainbow tables [41] to speed up
the brute-force of the password. On the other hand, a KDF with
4
strong parameters is useless once paired with a weak cipher,
since it is easier to retrieve the encryption key rather than
brute-forcing the password. In this case only R1 is violated.
Additionally, disrespecting Rule R3 may have serious con-
sequences on system integrity (breaking property P3), which
range from applications crashing due to parsing errors while
loading a malicious keystore to more severe scenarios where
the host is compromised. An attacker exploiting type-ﬂaw bugs
could indirectly gain access to the protected entries of a key-
store violating the conﬁdentiality and integrity guarantees. Sys-
tem integrity can additionally be infringed by violating Rule
R2 with an inadequate parameter choice, e.g., an unreasonably
high iteration count value might hang the application, slow
down the system or prevent the access to cryptographic objects
stored in a keystore ﬁle due to an excessive computational
load. In Section V we show how noncompliance to these rules
translate into concrete attacks.
C. Threat Model
In our standard attacker model we always assume that the
attacker has read access to the keystore ﬁle, either authorized
or by means of a data leakage. We also assume that the attacker
is able to perform ofﬂine brute-force attacks using a powerful
system of her choice.
We now present a list of interesting attacker settings, that
are relevant with respect to the security properties deﬁned in
Section III-A:
S1 Write access to the keystore
S2 Integrity password is known
S3 Conﬁdentiality password of an entry is known
S4 Access to previous legitimate versions of the keystore ﬁle
Setting S1 may occur when the ﬁle is shared over a net-
work ﬁlesystem, e.g., in banks and large organizations. Since
keystores include mechanisms for password-based integrity
checks, it might be the case that they are shared with both
read and write permissions, to enable application that possess
the appropriate credentials (i.e.,
the integrity password) to
modify them. We also consider the case S2 in which the
attacker possesses the integrity password. The password might
have been leaked or discovered through a successful brute-
force attack. The attacker might also know the password as
an insider, i.e., when she belongs to the organization who
owns the keystore. Setting S3 refers to a scenario in which the
attacker knows the password used to encrypt a sensitive object.
Similarly to the previous case, the password might have been
accessed either in a malicious or in honest way. For example,
the password of the key used to sign the apk of an Android
application [1] could be shared among the developers of the
team.
In our experience, there exists a strong correlation be-
tween S2 and S3. Indeed, several products and frameworks use
the same password both for conﬁdentiality and for integrity,
e.g., Apache Tomcat for TLS keys and IBM WebSphere for
LTPA authentication. Additionally, the standard utility for Java
keystores management (keytool) supports this practice when
creating a key:
invites the user to just press the
RETURN key to reuse the store password for encrypting the
entry.
the tool
To summarize, our standard attacker model combined with
S1-S3 covers both reading and writing capabilities of the
attacker on the keystore ﬁles together with the possibility of
passwords leakage. On top of these settings, we consider the
peculiar case S4 that may occur when the attacker has access
to backup copies of the keystore or when the ﬁle is shared
over platforms supporting version control such as Dropbox,
ownCloud or Seaﬁle.
IV. ANALYSIS OF JAVA KEYSTORES
The Java platform exposes a comprehensive API for cryp-
tography through a provider-based framework called Java
Cryptography Architecture (JCA). A provider consists of a
set of classes that
implement cryptographic services and
algorithms, including keystores. In this section, we analyze
the most common Java software keystores implemented in
the Oracle JDK and in a widespread cryptographic library
called Bouncy Castle that ships with a provider compatible
with the JCA. In particular, since the documentation was not
sufﬁcient to assess the design and cryptographic strength of the
keystores, we performed a comprehensive review of the source
code exposing, for the ﬁrst time, implementation details such
as on-disk ﬁle structure and encoding, standard and proprietary
cryptographic mechanisms, default and hard-coded parameters.
For reader convenience, we provide a brief summary of the
cryptographic mechanisms and acronyms used in this section:
Password-Based Encryption (PBE) is an encryption scheme
in which the cryptographic key is derived from a password
through a Key Derivation Function (KDF); a Message Au-
thentication Code (MAC) authenticates data through a secret
key and HMAC is a standard construction for MAC which is
based on cryptographic hash functions; Cipher Block Chaining
(CBC) and Counter with CBC-MAC (CCM) are two standard
modes of operation for block ciphers, the latter is designed to
provide both authenticity and conﬁdentiality.
A. Oracle Keystores
The Oracle JDK offers three keystore implementations,
namely JKS, JCEKS and PKCS12, which are respectively
made available through the providers SUN, SunJCE and
SunJSSE [42]. While JKS and JCEKS rely on proprietary
algorithms to enforce both the conﬁdentiality and the integrity
of the saved entries, PKCS12 relies on open standard format
and algorithms as deﬁned in [47].
JKS: Java KeyStore (JKS) is the ﬁrst ofﬁcial implemen-
tation of a keystore that appeared in Java since the release
of JDK 1.2. To the time, it is still the default keystore in
Java 8 when no explicit choice is made. It supports encrypted
private key entries and public key certiﬁcates stored in the
clear. The ﬁle format consists of a header containing the magic
ﬁle number, the keystore version and the number of entries,
which is followed by the list of entries. The last part of the ﬁle
is a digest used to check the integrity of the keystore. Each
entry contains the type of the object (key or certiﬁcate) and
the label, followed by the cryptographic data.
Private keys are encrypted using a custom stream cipher
designed by Sun, as reported in the OpenJDK source code.
In order to encrypt data, a keystream W is generated in
Fig. 1: Decryption in the custom stream cipher used by JKS.
20-bytes blocks with W0 being a random salt and Wi =
SHA1 (password||Wi−1). The encrypted key E is computed
as the XOR of the private key K with the keystream W ,
hence K and E share the same length. The ciphertext is
then prepended with the salt and appended with the checksum
CK = SHA1 (password||K). The block diagram for decryp-
tion is shown in Figure 1.
The integrity of the keystore is achieved through a custom
hash-based mechanism: JKS computes the SHA1 hash of
the integrity password, concatenated with the constant string
“Mighty Aphrodite” and the keystore content. The result
is then checked against the 20 bytes digest at the end of the
keystore ﬁle.
JCEKS: Java Cryptography Extension KeyStore (JCEKS)
has been introduced after the release of JDK 1.2 in the external
Java Cryptography Extension (JCE) package and merged later
into the standard JDK distribution from version 1.4. Accord-
ing to the Java documentation, it is an alternate proprietary
keystore format to JKS “that uses much stronger encryption in
the form of Password-Based Encryption with Triple-DES” [4].
Besides the improved PBE mechanism, it allows for storing
also symmetric keys.
The ﬁle format is almost the same of JKS with a different
magic number in the ﬁle header and support for the symmetric
key type. The integrity mechanism is also borrowed from JKS.
JCEKS stores certiﬁcates as plaintext, while the PBE used
to encrypt private keys, inspired by PBES1 [40], is based on
20 MD5 iterations and a 64 bits salt. Given that Triple-DES is
used to perform the encryption step, the key derivation process
must be adapted to produce cipher parameters of the adequate
size. In particular, JCEKS splits the salt in two halves and
applies the key derivation process for each of them. The ﬁrst
192 bits of the combined 256 bits result are used as the Triple-
DES key, while the remaining 64 bits are the initialization
vector.
PKCS12: The PKCS12 keystore supports both private keys
and certiﬁcates, with support for secret keys added in Java 8.
Starting from Java 9, Oracle replaced JKS with PKCS12 as
the default keystore type [7].
The keystore ﬁle is encoded as an ASN.1 structure accord-
ing to the speciﬁcation given in [47]. It contains the version
number of the keystore, the list of keys and the certiﬁcates.
The last part of the keystore contains an HMAC (together with
5
the parameters for its computation) used to check the integrity
of the entire keystore by means of a password.
The key derivation process, used for both conﬁdentiality
and integrity, is implemented as described in the PKCS#12
standard [47] using SHA1 as hashing function, 1024 itera-
tions and a 160 bit salt. Private keys and secret keys (when
supported) are encrypted using Triple-DES in CBC mode.
Certiﬁcates are encrypted as well in a single encrypted blob,
using the RC2 cipher in CBC mode with a 40-bit key. While
each key can be encrypted with a different password, all the
certiﬁcates are encrypted reusing the store password.
B. Bouncy Castle Keystores
Bouncy Castle is a widely used open-source crypto API.
As of 2014, it provides the base implementation for the crypto
library used in the Android operating system [24]. It supports
four different keystore types via the BC provider: BKS, UBER,
BCPKCS12 and the new FIPS-compliant BCFKS. Similarly to
the Oracle keystores, all the BC keystores rely on passwords
to enforce conﬁdentiality over the entries and to verify the
integrity of the keystore ﬁle.
BKS: The Bouncy Castle Keystore (BKS) allows to store
public/private keys, symmetric keys and certiﬁcates. The BKS
keystore relies on a custom ﬁle structure to store the entries.
The ﬁle contains the version number of the BKS keystore, the
list of stored cryptographic entries and an HMAC, along with