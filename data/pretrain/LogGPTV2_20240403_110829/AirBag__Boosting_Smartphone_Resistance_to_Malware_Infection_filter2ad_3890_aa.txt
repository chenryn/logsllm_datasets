title:AirBag: Boosting Smartphone Resistance to Malware Infection
author:Chiachih Wu and
Yajin Zhou and
Kunal Patel and
Zhenkai Liang and
Xuxian Jiang
AirBag: Boosting Smartphone Resistance to
Malware Infection
Chiachih Wu†, Yajin Zhou†, Kunal Patel†, Zhenkai Liang∗, Xuxian Jiang†
†Department of Computer Science
North Carolina State University
∗School of Computing
National University of Singapore
{cwu10, yajin zhou, kmpatel4, xjiang4}@ncsu.edu
PI:EMAIL
Abstract—Recent years have experienced explosive growth
of smartphone sales. Inevitably, the rise in the popularity of
smartphones also makes them an attractive target for attacks.
In light of these threats, current mobile platform providers have
developed various server-side vetting processes to block malicious
applications (“apps”). While helpful, they are still far from ideal
in achieving their goals. To make matters worse, the presence
of alternative (less-regulated) mobile marketplaces also opens up
new attack vectors, which necessitate client-side solutions (e.g.,
mobile anti-virus software) to run on mobile devices. However,
existing client-side solutions still exhibit
limitations in their
capability or deployability.
In this paper, we present AirBag, a lightweight OS-level virtu-
alization approach to enhance the popular Android platform and
boost our defense capability against mobile malware infection.
Assuming a trusted smartphone OS kernel and the fact that
untrusted apps will be eventually installed onto users’ phones,
AirBag is designed to isolate and prevent them from infecting our
normal systems (e.g., corrupting the phone ﬁrmware) or stealthily
leaking private information. More speciﬁcally, by dynamically
creating an isolated runtime environment with its own dedicated
namespace and virtualized system resources, AirBag not only
allows for transparent execution of untrusted apps, but also
effectively mediates their access to various system resources
or phone functionalities (e.g., SMSs or phone calls). We have
implemented a proof-of-concept prototype on three representative
mobile devices, i.e., Google Nexus One, Nexus 7, and Samsung
Galaxy S III. The evaluation results with a number of untrusted
apps,
including real-world mobile malware, demonstrate its
practicality and effectiveness.
I.
INTRODUCTION
Smartphone sales have recently experienced an explosive
growth. Canalys [23] reports that the year of 2011 marks as
the ﬁrst time in history that smartphones have outsold per-
sonal computers. Their incredible popularity can be partially
attributed to their improved functionality and convenience for
end users. Especially, they are no longer basic devices for
making phone calls and receiving text messages, but powerful
Permission(cid:3) to(cid:3) freely(cid:3) reproduce(cid:3) all(cid:3) or(cid:3) part(cid:3) of(cid:3) this(cid:3) paper(cid:3) for(cid:3) noncommercial(cid:3)
purposes(cid:3) is(cid:3) granted(cid:3) provided(cid:3) that(cid:3) copies(cid:3) bear(cid:3) this(cid:3) notice(cid:3) and(cid:3) the(cid:3) full(cid:3) citation(cid:3)
on(cid:3)the(cid:3)ﬁrst(cid:3)page.(cid:3) Reproduction(cid:3) for(cid:3)commercial(cid:3) purposes(cid:3) is(cid:3)strictly(cid:3) prohibited(cid:3)
without(cid:3)the(cid:3)prior(cid:3)written(cid:3)consent(cid:3)of(cid:3)the(cid:3)Internet(cid:3)Society,(cid:3)the(cid:3)ﬁrst-named(cid:3)author(cid:3)
(for(cid:3) reproduction(cid:3) of(cid:3) an(cid:3) entire(cid:3) paper(cid:3) only),(cid:3) and(cid:3) the(cid:3) author’s(cid:3) employer(cid:3) if(cid:3) the(cid:3)
paper(cid:3) was(cid:3) prepared(cid:3) within(cid:3) the(cid:3) scope(cid:3) of(cid:3) employment.
NDSS(cid:3) ’14,(cid:3) 23-26(cid:3) February(cid:3) 2014,(cid:3) San(cid:3) Diego,(cid:3) CA,(cid:3) USA
Copyright(cid:3) 2014(cid:3) Internet(cid:3) Society,(cid:3) ISBN(cid:3) 1-891562-35-5
http://dx.doi.org/(cid:20)(cid:19)(cid:17)(cid:20)(cid:23)(cid:26)(cid:21)(cid:21)(cid:18)(cid:81)(cid:71)(cid:86)(cid:86)(cid:17)(cid:21)(cid:19)(cid:20)(cid:23)(cid:17)(cid:21)(cid:22)(cid:20)(cid:25)(cid:23)
platforms, with comparable computing and communication ca-
pabilities to commodity PCs, for GPS navigation, web surﬁng,
and even online businesses. Among competing smartphone
platforms, Google’s Android apparently gains the dominance
with more than half of all smartphones shipped to end users
running Android [25].
One key appealing factor of smartphone platforms is the
availability of a wide range of feature-rich mobile applications
(“apps”). For instance, by September 2012, Google Play [9]
and Apple App Store [6] are home to more than 650, 000
and 700, 000 apps, respectively. The centralized model of
mobile marketplaces not only greatly helps developers to
publish their mobile apps, but streamlines the process for
mobile users to browse, download, and install apps, hence
boosting smartphone popularity. With the increased number
of smartphone users, malware authors are also attracted to
the opportunity to widely spread mobile malware. As an
example, the DroidDream malware infected more than 260, 000
devices within 48 hours, before Google took action to remove
them from the ofﬁcial Android Market (now Google Play)
[1]. Considering these threats, mobile platform providers have
developed server-side vetting processes to detect or remove
malicious apps from centralized marketplaces in the ﬁrst place.
With varying levels of success, many malicious apps are
identiﬁed and removed from marketplaces. However, they are
far from ideal as malware authors could still ﬁnd new ways to
penetrate current marketplaces and upload malicious apps.
From another perspective, a number of client-side solutions
have been developed. As a mobile platform provider, Google
provides the Android security architecture which sandboxes
apps based on their permissions and runs them as separate user
identities. However, they are still insufﬁcient as malicious apps
may masquerade as legitimate apps but request (and abuse)
additional permissions [34] to access protected smartphone
functionality or private information. In the face of these
threats, traditional software security vendors have developed
corresponding mobile anti-malware software. With the inherent
dependence on known malware signatures, they are largely
ineffective against new ones. To mitigate them, Aurasium
[55] is proposed to enforce certain access control policies
on untrusted apps. However, it requires repackaging apps to
enable the enforcement and the enforcement is still ineffective
against attacks launched from native code. L4Android [43]
and Cells [19] take a virtualization-based approach to allow
for multiple virtual smartphones to run side-by-side on one
single physical device. However, they are mainly designed to
embrace the new “bring-your-own-device” (BYOD) paradigm
and the offered isolation is too coarse-grained at the virtual
smartphone boundary. For mobile users, it is desirable to have
a lightweight solution that can strictly conﬁne untrusted apps
(including ones with native code or root exploits) at the app
boundary.
the design,
In this paper, we present
implementation,
and evaluation of AirBag, a new client-side solution that
leverages lightweight OS-level virtualization to signiﬁcantly
boost our defense capability against mobile malware infec-
tion. Speciﬁcally, as a client-side solution, AirBag assumes
a trusted smartphone OS kernel and considers users may
unintentionally download and install malicious apps (that
somehow manage to penetrate the vetting processes of mobile
marketplace curators). To strictly isolate and prevent them from
compromising normal phone functionalities such as SMSs or
phone calls, AirBag dynamically instantiates an isolated virtual
environment to ensure their transparent “normal” execution,
and further mediate their access to various system resources
or phone functionalities. Therefore, any damages that may be
possibly inﬂicted by untrusted apps will be strictly isolated
within the virtualized environment.
To provide seamless user experience, AirBag is designed to
run behind-the-scenes and transparently support mobile apps
when they are downloaded, installed, or executed. Speciﬁcally,
when an user installs (or sideloads) an app, the app will be
automatically isolated within an AirBag environment. Inside
the AirBag, the app is prohibited to interact with legitimate
apps and system daemons running outside. To accommodate its
normal functionality, AirBag provides a (decoupled) App Iso-
lation Runtime (AIR) whose purpose is to separate it from the
native Android runtime, but still allow the isolated app to run
as it is installed normally. Further, users can choose to run AIR
in three different modes: (1) “incognito” is the default mode
that will completely remove personally-identifying information
about the phone (e.g., IMEI) or users (e.g., gmail accounts) to
avoid unnecessary information leakage; (2) “proﬁling” mode
will log detailed execution traces (in terms of invoked An-
droid APIs or functionalities) for subsequent ofﬂine analysis;
(3) “normal” mode will essentially execute the app without
further instrumentation. For other normal phone features (e.g.,
networking and telephony), the AIR proxies related API calls
to the external native Android runtime through an authenticated
communication channel.1 This brings us new opportunities to
apply ﬁne-grained access control on the isolated app (e.g.,
prompting users for outgoing SMSs or phone calls) without
repackaging the app itself or affecting the native Android
runtime. Besides, the default mode (“incognito”) of AirBag
allows users to “test” an app in the isolated runtime before
running it in the native runtime. Throughout the “test” phase,
users can check if the app has any abnormal or malicious
behavior with the ﬁne-grained access control logs provided
by AirBag. This prevents end users from installing malicious
apps in the ﬁrst place. On the other hand, users can also
use the “proﬁling” mode to gather detailed information of the
identiﬁed malicious apps (in “incognito” mode) for analysis.
To develop a robust AirBag mechanism and strictly conﬁne
untrusted apps, a common wisdom is to encapsulate their
1A network connection which relies on the authentication protocols to
provide secure communication.
2
execution in a separate virtual machine (VM) that is isolated
from the rest of the system. However, challenges exist to create
a lightweight virtual machine for commodity mobile devices.
In particular, current mobile devices are typically resource
constrained with limited CPU, memory, and battery capabil-
ity. And most off-the-shelf mobile devices do not have the
processors with hardware virtualization support, which makes
traditional virtualization approaches less desirable [52]. As our
solution, AirBag takes a lightweight OS-level virtualization
approach but still obtains comparable isolation capability.
Speciﬁcally, by sharing one single OS kernel instance, our
approach scales better than traditional hypervisors and incurs
minimal performance overhead. Also, by providing a sepa-
rate namespace and virtualizing necessary system resources,
AirBag still achieves comparable isolation.
We have implemented a proof-of-concept prototype on
three mobile devices, Google Nexus One, Nexus 7, and Sam-
sung Galaxy S III, running Linux kernel 2.6.35.7, 3.1.10, and
3.0.8, respectively. To ensure seamless but conﬁned execution
of untrusted apps, our prototype builds the app isolation
runtime or AIR by leveraging the Android Open Source Project
(AOSP 4.1.1) to export the same interface while in the mean-
time allowing users to choose different running modes. Specif-
ically, the “incognito” mode prevents personally-identifying
information from being leaked while the “proﬁling” mode logs
the untrusted app behavior, which we ﬁnd helpful to analyze
malicious apps (Section IV) in a live phone setting. Security
analysis as well as the evaluation with more than a dozen
of real-world mobile malware demonstrate that our system is
effective and practical. The performance measurement with a
number of benchmark programs further shows that our system
introduces very low performance overhead.
The rest of the paper is organized as follows: In Section
II, we present
the overall system design, followed by its
implementation in Section III. We then evaluate our prototype
and report measurement results in Section IV. After that,
we further examine possible limitations and explore future
improvements in Section V. Finally, we describe related work
in Section VI and conclude in Section VII.
II. SYSTEM DESIGN
A. Design Goals and Threat Model
Our system is designed to meet three requirements. First,
AirBag should reliably conﬁne untrusted apps such that any
damage they may incur would be isolated without affecting
the native phone environment. The challenges for realizing
this goal come from the fundamental openness design behind
Android, which implies that any app is allowed to communi-
cate with other apps or system daemons running in the phone
(through built-in IPC mechanisms). In other words, once a
malicious app is installed, it has a wide attack surface to launch
the attack. The presence of privilege escalation or capability
leak vulnerabilities [37] further complicates the conﬁnement
requirement.
Second, AirBag should achieve safe and seamless user
experience throughout the lifespan of untrusted apps, from
their installation to removal. Speciﬁcally, from the user’s
perspective, AirBag should avoid incurring additional burden
on users. Correspondingly, the challenge to meet this goal
AirBag
Trusted
App
.....
Trusted
App
Untrusted
App
Trusted
App
.....
Trusted
App
Untrusted
App
Native Android Runtime
Linux OS Kernel (w/ Android Extention)
User
Kernel
Native Android Runtime
Decoupled AIR
Context−Aware Device Virtualization
Linux OS Kernel (w/ Android Extention)
(a) Current Android Architecture
(b) AirBag−Enhanced Android Architecture
Fig. 1. An Overview of AirBag to Conﬁne Untrusted Apps
is to transparently instantiate AirBag’s app isolation runtime
when an untrusted app is being installed and seamlessly adjust
different runtime environments when the untrusted app is being
launched or terminated.
Third, because AirBag is deployed in resource-constrained
mobile devices, it should remain lightweight and introduce
minimal performance overhead. In addition, AirBag should
be generically portable to a range of mobile devices without
relying on special hardware or features (that may be limited
to certain phone models).
Threat Model and System Assumption
We assume
the following adversary model while designing AirBag: Users
will download and install third-party untrusted apps. These
apps may attempt to exploit vulnerabilities, especially those
in privileged system daemons such as Zygote. By doing so,
they could cause damages by either gaining unauthorized
access to various system resources or abusing certain phone
functionalities in a way not permitted by the user or not known
to the user.
Meanwhile, we assume a trusted smartphone OS kernel,
including our lightweight OS extension to support isolated
namespace and virtualized system resources. As a client-side
solution, AirBag relies on this assumption to establish neces-
sary trusted computing base (TCB). Also, such assumption is
shared by other OS-level virtualization research efforts [43],
[19]. With that, we consider the threat of corrupting OS kernels
falls outside the scope of this work.
B. Enabling Techniques
In Figure 1, we show the overview of AirBag to conﬁne
untrusted apps and its comparison with traditional Android-
based systems. The conﬁnement
is mainly achieved from
three key techniques: decoupled app isolation runtime (AIR),
namespace/ﬁlesystem isolation, and context-aware device vir-
tualization.
1) Decoupled App Isolation Runtime (AIR): Due to the
openness design of Android, all apps share the same Android
runtime and consequently any app is allowed to communicate
with other apps on the phone. As mentioned earlier, from the
security perspective, this exposes a wide attack surface. In
AirBag, to minimize the attack surface and avoid affecting the
original Android runtime, we choose to decouple the untrusted
app execution from it. A separate app isolation runtime that
allows apps to run on it and has (almost) no interaction with
the original Android runtime is instantiated for untrusted app
execution.
There are several beneﬁts behind such a design: First,
by providing a consistent Android abstract layer that will be
invoked by third-party Android apps, AIR effectively ensures
proper execution of untrusted apps without
impacting the
original Android runtime. Second, by design, AIR does not
need to be trusted as it might be potentially compromised
by untrusted apps. Third, a separate app isolation runtime
also allows for customization to support different running
modes (Section II-C). This is necessary as AIR mainly consists
of essential Android framework classes and other service
daemons that are tasked to manage various phone resources
(e.g., device ID) or features (e.g., sensors). As a result, they
likely access private or sensitive information that could be of
concern when being exposed to untrusted apps.
2) Namespace/Filesystem Isolation: With a separate An-
droid runtime to host untrusted apps, AirBag also provides
a different namespace and ﬁlesystem to further restrict and
isolate the capabilities of processes running inside. Because
of namespace and ﬁlesystem isolation, an untrusted app inside
AirBag is not able to “see” and interact with other processes
(e.g., legitimate apps and system daemons) running outside.
In fact, all processes running inside have their own view of
running PIDs, which is completely different from external
processes. In addition, to proactively contain possible damages,
AirBag has its own ﬁlesystem different from the normal
system. For storage efﬁciency, we extensively leverage unionfs
[48] to compose AirBag’s ﬁlesystem and isolate modiﬁcations
from untrusted apps.
To elaborate, when an Android system is loaded, a number
of service processes or daemons (e.g., vold, binder and
servicemanager) are created. Inside AirBag, we similarly