---
author: Nils
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 11598
date: '2017-05-26 17:15:02'
editorchoice: false
excerpt: 你是如何使用 Golang 日志监控你的应用程序的呢？Golang 没有异常，只有错误。因此你的第一印象可能就是开发 Golang 日志策略并不是一件简单的事情。不支持异常事实上并不是什么问题，异常在很多编程语言中已经失去了其异常性：它们过于被滥用以至于它们的作用都被忽视了。
fromurl: https://logmatic.io/blog/our-guide-to-a-golang-logs-world/
id: 8543
islctt: true
largepic: /data/attachment/album/201705/26/171240oyoy6kvyyocgkkky.png
permalink: /article-8543-1.html
pic: /data/attachment/album/201705/26/171240oyoy6kvyyocgkkky.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 你是如何使用 Golang 日志监控你的应用程序的呢？Golang 没有异常，只有错误。因此你的第一印象可能就是开发 Golang 日志策略并不是一件简单的事情。不支持异常事实上并不是什么问题，异常在很多编程语言中已经失去了其异常性：它们过于被滥用以至于它们的作用都被忽视了。
tags:
- Go语言
- 日志
thumb: false
title: Go 语言日志指南
titlepic: true
translator: ictlyh
updated: '2017-05-26 17:15:02'
---
![](/data/attachment/album/201705/26/171240oyoy6kvyyocgkkky.png)
你是否厌烦了那些使用复杂语言编写的、难以部署的、总是在不停构建的解决方案？Golang 是解决这些问题的好方法，它和 C 语言一样快，又和 Python 一样简单。
但是你是如何使用 Golang 日志监控你的应用程序的呢？Golang 没有异常，只有错误。因此你的第一印象可能就是开发 Golang 日志策略并不是一件简单的事情。不支持异常事实上并不是什么问题，异常在很多编程语言中已经失去了其异常性：它们过于被滥用以至于它们的作用都被忽视了。
在进一步深入之前，我们首先会介绍 Golang 日志的基础，并讨论 Golang 日志标准、元数据意义、以及最小化 Golang 日志对性能的影响。通过日志，你可以追踪用户在你应用中的活动，快速识别你项目中失效的组件，并监控总体性能以及用户体验。
### I. Golang 日志基础
#### 1) 使用 Golang “log” 库
Golang 给你提供了一个称为 “log” 的原生[日志库](https://golang.org/pkg/log/) 。它的日志器完美适用于追踪简单的活动，例如通过使用可用的[选项](https://golang.org/pkg/log/#pkg-constants)在错误信息之前添加一个时间戳。
下面是一个 Golang 中如何记录错误日志的简单例子：
```
package main
import (
    "log"
    "errors"
    "fmt"
    )
func main() {
   /* 定义局部变量 */
  ...
   /* 除法函数，除以 0 的时候会返回错误 */
   ret,err = div(a, b)
if err != nil {
 log.Fatal(err)
    }
    fmt.Println(ret)
}
```
如果你尝试除以 0，你就会得到类似下面的结果：
![](/data/attachment/album/201705/26/171255mf7tmlqdqadlqmck.png)
为了快速测试一个 Golang 函数，你可以使用 [go playground](https://play.golang.org/)。
为了确保你的日志总是能轻易访问，我们建议你把它们写到一个文件：
```
package main
import (
        "log"
        "os"
)
func main() {
        // 按照所需读写权限创建文件
        f, err := os.OpenFile("filename", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
        if err != nil {
                log.Fatal(err)
        }   
        // 完成后延迟关闭，而不是习惯!
        defer f.Close()
        //设置日志输出到 f
        log.SetOutput(f)
        //测试用例
        log.Println("check to make sure it works")
}
```
你可以在[这里](https://www.goinggo.net/2013/11/using-log-package-in-go.html)找到 Golang 日志的完整指南，以及 “log” [库](https://golang.org/pkg/log/)内可用函数的完整列表。
现在你就可以记录它们的错误以及根本原因啦。
另外，日志也可以帮你将活动流拼接在一起，查找需要修复的错误上下文，或者调查在你的系统中单个请求如何影响其它应用层和 API。
为了获得更好的日志效果，你首先需要在你的项目中使用尽可能多的上下文丰富你的 Golang 日志，并标准化你使用的格式。这就是 Golang 原生库能达到的极限。使用最广泛的库是 [glog](https://github.com/google/glog) 和 [logrus](https://github.com/sirupsen/logrus)。必须承认还有很多好的库可以使用。如果你已经在使用支持 JSON 格式的库，你就不需要再换其它库了，后面我们会解释。
### II. 为你 Golang 日志统一格式
#### 1) JSON 格式的结构优势
在一个项目或者多个微服务中结构化你的 Golang 日志可能是最困难的事情，但一旦完成就很轻松了。结构化你的日志能使机器可读（参考我们 [收集日志的最佳实践博文](https://logmatic.io/blog/beyond-application-monitoring-discover-logging-best-practices/)）。灵活性和层级是 JSON 格式的核心，因此信息能够轻易被人类和机器解析以及处理。
下面是一个使用 [Logrus/Logmatic.io](https://github.com/logmatic/logmatic-go) 如何用 JSON 格式记录日志的例子：
```
package main
import (
  log "github.com/Sirupsen/logrus"
  "github.com/logmatic/logmatic-go"
)
func main() {
    // 使用 JSONFormatter
    log.SetFormatter(&logmatic.JSONFormatter{})
        // 使用 logrus 像往常那样记录事件
    log.WithFields(log.Fields{"string": "foo", "int": 1, "float": 1.1 }).Info("My first ssl event from golang")
}
```
会输出结果：
```
{   
    "date":"2016-05-09T10:56:00+02:00",
    "float":1.1,
    "int":1,
    "level":"info",
    "message":"My first ssl event from golang",
    "String":"foo"
}
```
#### 2) 标准化 Golang 日志
同一个错误出现在你代码的不同部分，却以不同形式被记录下来是一件可耻的事情。下面是一个由于一个变量错误导致无法确定 web 页面加载状态的例子。一个开发者日志格式是：
```
message: 'unknown error: cannot determine loading status from unknown error: missing or invalid arg value client'
```
另一个人的格式却是：
```
unknown error: cannot determine loading status - invalid client
```
强制日志标准化的一个好的解决办法是在你的代码和日志库之间创建一个接口。这个标准化接口会包括所有你想添加到你日志中的可能行为的预定义日志消息。这么做可以防止出现不符合你想要的标准格式的自定义日志信息。这么做也便于日志调查。
![](/data/attachment/album/201705/26/171327jhgmzhdmcwsm2ems.png)
由于日志格式都被统一处理，使它们保持更新也变得更加简单。如果出现了一种新的错误类型，它只需要被添加到一个接口，这样每个组员都会使用完全相同的信息。
最常使用的简单例子就是在 Golang 日志信息前面添加日志器名称和 id。你的代码然后就会发送 “事件” 到你的标准化接口，它会继续讲它们转化为 Golang 日志消息。
```
// 主要部分，我们会在这里定义所有消息。
// Event 结构体很简单。为了当所有信息都被记录时能检索它们，
// 我们维护了一个 Id
var (
    invalidArgMessage = Event{1, "Invalid arg: %s"}
    invalidArgValueMessage = Event{2, "Invalid arg value: %s => %v"}
    missingArgMessage = Event{3, "Missing arg: %s"}
)
// 在我们应用程序中可以使用的所有日志事件
func (l *Logger)InvalidArg(name string) {
    l.entry.Errorf(invalidArgMessage.toString(), name)