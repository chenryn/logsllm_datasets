ing a testing datapoint to the n closest observations to it
299in the training dataset. The prediction is the most frequent
class label in this set of observations. 2) A Na¨ıve Bayes (NB)
classiﬁer is a simple probabilistic classiﬁer which has been
successfully used, e.g., in spam e-mail detection [34]. 3) Ran-
dom Forest (RF) is an ensemble method that is commonly
used for classiﬁcation tasks. It randomly picks subsets of in-
put attributes and trains decision trees for them. It uses the
most frequently predicted label provided by this set of tree
classiﬁers as the ﬁnal prediction. For each participant, we
trained the Classiﬁer using the labeled context feature vec-
tors and evaluated the performance of the classiﬁers using
10-fold cross-validation.
We assume that by default restrictive protection measures
are in place (access to sensors disabled, device lock active).
The Classiﬁer’s task is therefore to predict situations,
in
which the protections could be relaxed, i.e., if the context
has low privacy exposure or a low risk of device misuse.
Even though most accurate results would be obtained by
direct measurement of on-line enforcement on users’ mobile
devices, we had to rely on an oﬄine evaluation of the Classi-
ﬁers performance, since we wanted to be able to experiment
with several diﬀerent machine learning algorithms. Imple-
menting or porting several diﬀerent algorithms on the mobile
device and conducting a separate user study for each of them
was not feasible given the resource limitations. Therefore we
intend to evaluate the performance of on-line enforcement in
a subsequent user study involving devices with enhanced de-
vice locking functionality.
Protecting against device misuse. Figure 3 shows the
average receiver operating characteristic (ROC) curves of
the classiﬁers for users who provided at least ﬁve feedback
datapoints for each context class.
Figure 3: Average receiver operating characteristic (ROC)
curves for classifying contexts with low risk of device misuse.
All classiﬁers perform reasonably well on the testing data,
providing usable results for practical use. The classiﬁers
reach a true positive rate of approximately 70% with a fairly
moderate false positive rate of 10%. This would mean that
by applying a relaxed device locking scheme in low-risk con-
texts, we can potentially reduce the amount of unnecessary
authentication prompts shown to the user by 70%. Only
one time in ten would a relaxed locking mechanism be en-
forced while the user is in a context with higher risk of mis-
use. This means that a thief or other unauthorized user
would likely have a less than 10% chance of ﬁnding the de-
vice in an unlocked state, when obtaining physical access to
it. These results clearly outperform the progressive authen-
tication scheme presented by Riva et al. [31], who report
a reduction of 42% in unnecessary authentication prompts
presented to the user.
Protecting against sensory malware. Figure 4 shows
the average performance of the classiﬁers in identifying con-
texts with low privacy exposure.
Figure 4: Average ROC curves for classifying contexts with
low privacy exposure.
For this use case, the Random Forest and kNN classiﬁers
provide best performance. They reach a true positive rate
of 70% at a very low false positive rate of 2-3.5%. This
would mean that if a sensory malware protection scheme
with a ’default deny’ policy is enforced, only in less than
3.5% of the cases would access control be relaxed in contexts
with high privacy exposure. In practice, this would severely
limit a sensory malware application’s ability to extract useful
sensitive information about the user.
Through the use of a default deny policy, our framework
errs by default on the safe side, i.e., sensory malware is by
default denied access to sensor information. The true posi-
tive rate of 70% means that our scheme is able to relax the
access restrictions to sensors in public or low-privacy expo-
sure contexts in 70% of the cases. The remaining 30% can
be handled through manual overriding of the default policy
by the user. Fortunately, the use of context information by
many apps is often user-driven, i.e., sensor data are utilized,
when the user is actively using the app (e.g., using a naviga-
tion app to locate a nearby restaurant). Adding an override
conﬁrmation dialog to the user interaction in such situations
should therefore be easy, since the device already is in the
focus of the user’s attention. This approach also has the
beneﬁt that the overriding action can be used as additional
ground truth data for updating the classiﬁcation model and
thus improving subsequent classiﬁcation accuracy.
9. ENFORCEMENT
To verify the applicability of our framework to practical
access control enforcement, we integrated it with an Ac-
cess Control Layer for which we adopted and adapted the
FlaskDroid [7] architecture, a ﬁne-grained mandatory access
control framework for Android 4.0.4 (cf. Figure 5). We now
show how the combination of ConXsense and FlaskDroid can
address the previously deﬁned use-cases, namely Resisting
Sensory Malware and Usable Device Lock (cf. Section 5).
For our implementation we use a Samsung Galaxy Nexus
smartphone.
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1TP rateFP rateRandom ForestkNNNaive Bayes 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1TP rateFP rateRandom ForestkNNNaive Bayes300tion sensor events delivered to SensorEventListeners regis-
tered by apps. It should be noted that FlaskDroid’s origi-
nal implementation of the SensorManager USOM is insuﬃ-
cient to block sophisticated attacks, since the SensorMana-
ger is loaded into the memory space of (potentially mali-
cious) apps. Thus, we replaced FlaskDroid’s SensorManager
USOM with a corresponding USOM in Android’s SensorSer-
vice, which is not under the control of apps.
Similarily, the combination of ConXsense and FlaskDroid
can address also other variants of sensory malware, such
as Soundcomber [36], by identifying the relevant Android
instrumenting them as USOMs and extending the
APIs,
FlaskDroid policy with corresponding conditional rules.
Usable Device Lock. To allow for changes in the An-
droid Lockscreen policy based on the current risk for device
misuse, we use the ConXsense ContextProvider to conﬁgure
Android’s Lockscreen dynamically at runtime. We modiﬁed
Android’s Settings component to be notiﬁed by our Con-
textProvider about changes in the current risk for device
misuse by means of a Broadcast Intent. We further mod-
iﬁed Android’s LockPatternKeyguardView which is used to
display the Lockscreen to query the Settings component for
context information. While the device is used in a context
with low risk for device misuse, the LockPatternKeyguard-
View class automatically dismisses the Lockscreen. When-
ever the device is rebooted or the risk for device misuse
changes to high, a low-watermark mechanism ensures that
the Lockscreen is always displayed regardless of the current
risk for device misuse. This mechanism is required to pre-
vent an attacker from bypassing the Lockscreen by chang-
ing the context, emulating a context the user considers to
have low risk for device misuse or rebooting the device. In
addition, to mitigate the eﬀect of sensory malware which
uses the acceleration sensor as a side channel to derive user
credentials (e.g., Lockscreen PIN or password) [45, 30, 8],
we use the SensorService USOM, our ContextProvider and
corresponding conditional access control rules to block ac-
cess to the acceleration sensor by 3rd-party apps while the
Lockscreen is displayed.
9.2 Evaluation
Mitigation of Sensory Malware. To mitigate the ef-
fects of the PlaceRaider [42] sensory malware we designed
a FlaskDroid policy to assign the type trusted to all pre-
installed system apps (e.g., the camera app), and the type
untrusted to all 3rd-party apps. In a real-world scenario this
trust level could be derived from the app’s reputation in an
app market. We use conditional access control rules for the
CameraService and SensorService USOMs to prevent all un-
trusted apps from accessing the acceleration sensor and the
camera when the risk for privacy exposure is high.
We tested our implementation using a slightly modiﬁed
version of the PlaceRaider malware generously provided to
us by its authors4. By installing the malware on our device
and logging the context information and access control de-
cisions we veriﬁed that FlaskDroid successfully ﬁltered all
data delivered from Android’s SensorService and CameraSer-
vice components to the untrusted PlaceRaider app when the
risk for privacy exposure was high, thus rendering the at-
tack futile. We further veriﬁed that trusted apps could still
use the sensors and the camera. No false positives or false
negatives emerged during the evaluation of the Access Con-
4The sample we received is incompatible with Android 4.0.4.
Figure 5: Enforcement of Context-based policies
9.1 Implementation
FlaskDroid extends Security Enhanced Android (SEAn-
droid) [39] with ﬁne-grained type enforcement on Android’s
middleware layer. In FlaskDroid , Android components that
provide access to sensitive resources, such as the SensorSer-
vice which provides access to sensor information, act as User-
Space Object Managers (USOMs) which control access to
resources they manage. More speciﬁcally, USOMs control
operations from subjects (i.e., apps) to objects (e.g., data)
using types assigned to subjects and objects.
At boot time, FlaskDroid’s PolicyServer (cf. Figure 5)
parses an Access Control Policy and proceeds to assign app
types (e.g., trusted or untrusted ) to all installed apps based
on application metadata (e.g., package name or developer
signature). Apps installed by the user are assigned types
during their installation. Whenever apps request access to a
USOM, for example the SensorService to query the device’s
sensors or the CameraService to take pictures, the USOM
queries the PolicyServer, which is part of Android’s System-
Server, for access control decisions. FlaskDroid supports
conditional access control rules by means of ContextProviders
that evaluate the current context and enable or disable rules
at runtime.
To meet our goals we extended FlaskDroid with additional
USOMs and implemented a ConXsense ContextProvider. It
uses the context classiﬁcation information and conﬁdence
values provided by the Classiﬁer to activate or deactivate
conditional rules at runtime (cf. Figure 5) and to inﬂuence
the Lockscreen behaviour. The ContextProvider can be tuned
with individual user-, use-case and sensor-speciﬁc thresh-
olds for the expected conﬁdence values. These thresholds
could be set, e.g., by specifying a desired maximal false pos-
itive rate and adjusting the conﬁdence threshold accordingly
based on the observed historical performance of the context
classiﬁer. Access to more sensitive context sensors like GPS
could require a higher prediction conﬁdence than less sensi-
tive sensors like the magnetometer.
Mitigation of Sensory Malware. To mitigate, respec-
tively reduce the eﬀects of sensory malware (e.g., Placerai-
der [42] or SoundComber [36]), access control on the sensors
of a device is required. For example, Placeraider uses the
device’s camera and the acceleration sensor to covertly con-
struct 3D images of the surroundings of the user. We trans-
formed Android’s CameraService into an USOM which ﬁl-
ters queries to the takePicture and startPreviewMode meth-
ods. Furthermore, we used FlaskDroid to ﬁlter accelera-
Access-ControlLayerTrustedAppUntrustedAppUSOMSensorAPIClassifierAccess ControlQueriesInter-ComponentCommunicationContext Classification, Confidence ValueLockscreenEnable /DisableUSOMCameraAPIAccess ControlQueriesFlaskDroid PolicyServerAccess Control PolicyAccess ControlRulesContextProvider301trol Layer, which is not surprising since it merely enforces
context-dependent access control rules.
To evaluate the performance impact of the Access Con-
trol Layer we implemented an app which automatically trig-
gers 10, 000 access control queries by reading sensor data
and taking pictures. On average, the Access Control Layer
caused an overhead µ of 4.9 ms (standard deviation σ 17.6
ms) for the SensorService and CameraService USOMs on a
Samsung Galaxy Nexus smartphone. The high standard de-
viation σ is caused by the garbage collector used in An-
droid’s Dalvik Virtual Machine: While studying Android’s
system logs we noticed that during the irregularly slow ac-
cess control queries, which are responsible for the high stan-
dard deviation, the garbage collector started and caused a
stall. Overall, 95% of all access control decisions are handled
in less than 4.2 ms, which we consider reasonable.
Usable Device Lock. To test our implementation of the
context-aware device lockscreen we modiﬁed the Android
operating system to periodically wake the device from sleep
and switch on the screen. We furthermore installed a syn-
thetic malware, which registers SensorEventListeners in An-
droid’s SensorService to be notiﬁed of acceleration sensor
readings. By logging and analyzing the Lockscreen behavior,
context information and sensor readings we veriﬁed that the
Lockscreen was only automatically dismissed in valid situ-
ations and that our synthetic malware did not receive any
sensor readings while the Lockscreen was active.
10. RELATED WORK
In the digital society, context data have been extensive-
ly used to analyze numerous aspects of human everyday
life. Examples range from the prediction of health status
by interpreting context data [24] to analyzing ethnograph-
ics [20] or person matching based on similar interests [15].
Our framework brings this idea of contextual analysis to the
area of security and privacy protection for the most impor-
tant tool of modern life - the smartphone.
A number of works have approached the problem of con-
text-aware access control. Contrary to our work, all of them
rely on user-deﬁned or pre-deﬁned policies in the form of role
deﬁnitions, conditions on context parameters, or context-
dependent rules. For example, Covington et al. [12] use a
Generalised Role Based Access Control (GRBAC) model uti-
lizing Environment Roles that are activated and deactivated
based on context observations, and Damiani et al. [13] utilize
roles in their spatially-aware RBAC model using location as
a component for access control decisions.
Others have used user- or pre-deﬁned policies conditioned
on context parameters. Examples include Sadeh et al. [33]
who investigate a policy deﬁnition and management system
for the PeopleFinder application and Kelley et al. [23], who
introduced a user-controllable policy learning system that
builds on incremental policy improvements proposed to the
users based on recorded history events. For mobile devices,
Bai et al. propose a solution for ﬁne-grained usage control on
Android [2]. Their work extends the UCON access control
model [35] by using context information (e.g., location and
time) as an additional input for policy decisions.
Hull et al. [21] present the Houdini framework for mitigat-
ing the complexity that value-based customization of poli-
cies implies by using user-provided higher-level preferences
to generate rules for privacy enforcement. They mention the
possibility for automatically-learned preferences, but do not
provide support for such automation at the time of writing.
Many recent papers have addressed context-aware access
control enforcement on mobile devices. For example, Conti
et al. [11] describe the CRePe framework for Android for
enforcement of context-dependent access control policies al-
lowing or denying access to speciﬁc resources depending on
the currently detected active context. In the MOSES frame-
work [32] Rusello et al. propose a combination of dynamic
taint tracking using the TaintDroid architecture [16] and
policy enforcement on Android’s middleware layer to en-
able context based access control on resources and apps with
the goal of providing isolated environments called security
proﬁles. Similarly, the TrustDroid [6] architecture provides
lightweight security domain isolation on Android with ba-
sic support for context-based network access control poli-
cies. Saint [29] features a context-aware ﬁne-grained access
control framework for Android, which focuses on enabling
app developers to deﬁne context-dependent runtime con-
straints on inter-app communication. Nauman et al. present