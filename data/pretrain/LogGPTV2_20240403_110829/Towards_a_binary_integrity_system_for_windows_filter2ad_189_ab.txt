### Binaries to be Loaded or Executed

In systems where binaries are loaded or executed, their signatures are either embedded within the files themselves or signed by a third party, such as an administrator, and stored in a secure database. Execution or loading is only permitted if the signature can be verified.

#### Challenges with Signed Binaries

There are three primary issues with signed binaries:

1. **Trust in Signing Keys**: Security relies on the integrity of the signing keys. If a key is compromised, the trust is broken. For example, the Stuxnet worm [6] used signed drivers with genuine certificates trusted by Windows.
2. **Revocation Checking**: Revocation checking is resource-intensive because it cannot be done locally and may not be timely.
3. **Vendor Compliance**: Not all software vendors sign their binaries. Additionally, most signed binary schemes do not address software lifecycle issues, and they only ensure that the binaries have not been modified, not preventing deletion.

### Self-Signed Executables

Self-signed executables [2] offer a different approach to signed binaries, allowing for software updates. In this model, all binaries are embedded with signatures signed by the software vendor. The assumption is that any signed binary can be trusted. Binary updates are allowed if the new signature can be verified using the same public key.

#### Key Binding and Path Issues

The self-signed executable system binds paths with keys. Once bound, the key cannot be changed, even if the file is removed. An attacker can sign malware as long as it is the first software installed at a specific path, leading to potential denial of service attacks. Deleted files leave behind stubs, which can accumulate over time, potentially exhausting storage.

To compare signatures between old and new copies, the semantics of file writing must be altered. Writing is applied to a shadow copy and then updated atomically, which can break software expecting standard POSIX semantics.

### The BinInt Security Model

In Section 3, we discussed several existing security models. While these models provide security for binaries, they do not cover the full spectrum of usage across the software lifecycle or handle all typical attack scenarios. We now present a new security model for binaries called BinInt, which combines file integrity, aspects of signed binaries, and isolation to address usability in the software lifecycle. Although we focus on Windows, this model is generally applicable to other operating systems.

#### Goals of BinInt

Our goals are threefold:
1. **Prevent Attacks**: Prevent attacks exploiting vulnerabilities that load untrusted binaries.
2. **Ensure Integrity**: Ensure the integrity of binaries to prevent malware installation and denial of service attacks that delete binaries.
3. **Balance Usability and Security**: Achieve a balance between usability and security. Changes to system usage should be minimal, and existing software, including closed-source binaries, should continue to function.

#### Execution Modes

All processes in BinInt operate in one of the following modes:
- **d-mode (Default Mode)**: For running already installed software.
- **i-mode (Install Mode)**: For installing or updating software.
- **t-mode (Temporary Trusted Mode)**: For special cases like building and running binaries in an IDE or dynamic temporary binaries.

Each process and binary is labeled with a software domain, which relates the process or binary to a particular installed software. A special software domain `?` denotes binaries without a valid software domain. Binaries with a valid software domain are called b-valid.

#### Rules and Operations

- **Creating a Binary**: In i-mode, the label is set to the software domain of the process; otherwise, it is set to `?` in d-mode or t-mode.
- **Writing and Deleting**: In i-mode, a binary can only be written to or deleted if it has the same software domain as the process or is `?`. In d-mode or t-mode, only binaries labeled `?` can be written to.
- **Loading/Executing**: In d-mode, only b-valid binaries can be loaded/executed. There are no restrictions in t-mode and i-mode, but the privilege needed to change to these modes is restricted.
- **Mode Transition**: A special operation called `modetrans` is defined to change the mode of a process. This requires user authentication and appropriate privileges, similar to `sudo` in Unix or UAC in Windows.

### Implementation and Evaluation

We implemented a prototype of BinInt in Windows XP using a kernel driver that intercepts binary loading, file modification, process creation, and other operations. Performance was evaluated against a baseline system with unmodified Windows XP SP3, using benchmarks such as software build, WinRAR archive extraction, and the SunSpider JavaScript Benchmark in Firefox. The results show that, except for the archive extraction test in i-mode, the overheads are small and often within timing variation.

### Discussion and Conclusion

BinInt focuses on securing binaries, but securing only binaries may not be sufficient. Attackers can modify other types of files, such as Java class files, shell scripts, and configuration files. Generalizing BinInt to protect the integrity of any kind of file is challenging due to the more frequent changes in data files. More fine-grained policies can be applied for data files, which is currently work in progress.

We have presented a binary security model that caters to the dynamic use of binaries within the software lifecycle while protecting against attacks in default mode and providing isolation between software domains in install mode. Our prototype is efficient and usable, protecting a broad range of binary loading/execution mechanisms in Windows. BinInt is a practical solution that balances usability and security to protect binaries on Windows and can be combined with other security mechanisms.

### References

[1] A. Apvrille, D. Gordon, S. Hallyn, M. Pourzandi, and V. Roy, "DigSig: Run-time Authentication of Binaries at Kernel Level," USENIX Large Installation System Administration Conf., 2004.

[2] G. Wurster and P.C.V. Oorschot, "Self-Signed Executables: Restricting Replacement of Program Binaries by Malware," USENIX Workshop on Hot Topics in Security, 2007.

[3] D. Stevens, "Escape From PDF," <http://blog.didierstevens.com/2010/03/29/escape-from-pdf>

[4] <http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0483>

[5] <http://www.microsoft.com/technet/security/advisory/2269637.mspx>

[6] A. Matrosov, E. Rodionov, D. Harley, and J. Malcho, "Stuxnet Under the Microscope," <http://www.eset.com/resources/whitepapers/Stuxnet_Under_the_Microscope.pdf>

[7] Y. Wu, R.H.C. Yap, and R. Ramnath, "Comprehending Module Dependencies and Sharing," Intl. Conf. on Software Engineering, 2010.

[8] L.V. Doorn, G. Ballintijn, and W.A. Arbaugh, "Signed Executables for Linux," CS-TR-4256, U. of Maryland, 2001.

[9] K. Kato and Y. Oyama, "SoftwarePot: An Encapsulated Transferable File System for Secure Software Circulation," Intl. Symp. on Software Security, 2003.

[10] Z. Liang, W. Sun, V. Venkatakrishnan, and R. Sekar, "Alcatraz: An Isolated Environment for Experimenting with Untrusted Software," ACM Trans. on Information and System Security, 2009.

[11] F. Halim, R. Ramnath, Sufatrio, Y. Wu, and R.H.C. Yap, "A Lightweight Binary Authentication System for Windows," Joint iTrust and PST Conf. on Privacy, Trust Management and Security, 2008.

[12] S. Nanda, W. Li, L.C. Lam, and T.C. Chiueh, "Foreign Code Detection on the Windows/X86 Platform," Annual Computer Security Applications Conf., 2006.

[13] Safari Carpet Bomb, <http://www.oreillynet.com/onlamp/blog/2008/05/safari_carpet_bomb.html>

[14] M.A. Williams, "Anti-Trojan and Trojan Detection with In-Kernel Digital Signature Testing of Executables," 2002.