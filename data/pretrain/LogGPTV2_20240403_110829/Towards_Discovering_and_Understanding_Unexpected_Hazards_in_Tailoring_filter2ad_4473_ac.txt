PHONE_STATE
PACKAGE_REPLACED
29
30
PACKAGE_REMOVED
30
PACKAGE_ADDED
BOOT_COMPLETED
30
#
4
5
5
6 KILL_PROCESSES
6
7 ALERT_WINDOW
7 WRITE_BOOKMARKS
8 GET_ACCOUNTS
READ_SMS
8
READ_BOOKMARKS
10
READ_CONTACTS
10
RECEIVE_SMS
10
SEND_SMS
12
15
READ_LOGS
17 GET_TASKS
23 WAKE_LOCK
30
30
30
EXTERNAL_STORAGE
READ_PHONE_STATE
BOOT_COMPLETED
Road map: The remainder of the paper continues as follows:
Section 3 elaborates hazards relevant to the malScan mechanism,
followed by the algorithm designed and implemented to conﬁrm
the hazards. Section 4 explains the exploring process of the hazard
in AVD engineUpdate procedure and a model checker is developed
to conﬁrm the relevant vulnerable program logic. Other hazards are
discussed in Section 5, followed by proposed mitigations. Section 6
reviews related works and Section 7 concludes this paper.
3. HAZARDS IN MALWARE SCAN
In this section, we report our study on the two malware scan
(malScan) operations, namely the light monitoring malScan and
the heavy sweeping malScan, and then followed by the discovered
hazards for each type of malScan operations and their correspond-
ing measurement results.
3.1 Malware Scan Behavior
Different from previous works on antivirus security measure-
ment [44, 40] that targeting the weakness of the incomplete sig-
nature database, we assume that AVDs are all equipped with a
complete VDF, which includes all known malicious payloads and
their obfuscated counterparts. Hence, we use the easily recog-
nizable malicious payloads from the well-known Malware Gnome
Project [53] in our testing. This will force us to concentrate on an-
alyzing the malScan mechanism itself when deployed on the An-
droid platform. Similar to PC AVDs, the malScan operations are
one of the core functionalities of AVDs for malware recognition
based on up-to-date VDF.
Our analysis result shows that only four of the tested 30 AVDs
have developed light monitoring malScan, which performs short-
term scans for particular ﬁle system status changes. It leverages the
FileObserver APIs provided by the Android framework, which is
based on the inotify() system call to monitor the ﬁle system changes
(e.g., create, modify, delete ﬁles/folders and etc.). For example,
when a new ﬁle is downloaded into the /sdcard/Downloads, the
AVD will perform a very quick scan for that particular ﬁle sys-
tem status change on the folders, given that the particular folder
is speciﬁed to be monitored in one of the registered FileObserver
instances. However, our further analysis indicates that it can only
focus on a few pre-selected folders (e.g., /sdcard) and the scan is
lightweight, which means it cannot handle archive format.
On the other hand, all the 30 tested AVDs have implemented the
heavy sweeping malScan, a comprehensive scan on the ﬁle system,
which can be pre-scheduled or triggered directly by a user. It is
usually performed by one or more Android service(s) or dedicated
native process(es) (AVD # 9). This scan will consider most ﬁles,
including archive ﬁles (e.g., .apk, .tar and .zip), in the target folder
and its (sub)directories. It then ﬁngerprints them against the VDF
diligently. For instance, when targeting the /data/app folder, it
will check all the compressed app packages, the Android Applica-
tion Package (APK) ﬁles of all installed apps, and iteratively scan
through subdirectories and ﬁles in each APK ﬁle package. If an
APK ﬁle happens to contain an archive ﬁle format, it will be un-
compressed and scanned through all ﬁles contained in the archive
ﬁle. Therefore, all of the tested AVDs rely on heavy sweeping
malScan to perform comprehensive malware detection.
3.2 Light Monitoring malScan Hazard
To discover the potential hazards in light monitoring malScans,
which leverage the FileObserver APIs, we use the Dynamic Tester
to fully measure the effectiveness of the four AVDs. Our Dynamic
Tester drops well-known malicious payloads on the /sdcard, which
are recognized directly by all the four AVDs that have implemented
this type of malScan. Then we conﬁgure the Dynamic Tester to
test different dropping folders and using various archiving formats
Table 4: Light monitoring malware scan ineffectiveness
Tested Malicious Dropping Actions
APK ﬁles (zipped) dropped on /sdcard
APK ﬁles (zipped) dropped on /sdcard/*/
Native ﬁles (zipped) dropped on /sdcard
Native ﬁles (zipped) dropped on /sdcard/*/ None !!!
APK ﬁles dropped on /sdcard/
APK ﬁles dropped on /sdcard/*/
Native ﬁles dropped on /sdcard/
Native ﬁles dropped on /sdcard/*/
13, 14, 15, 22(17.2s)
13, 15, 22
13, 14, 15
13
Reacted AVD #
14
None !!!
14, 15
(e.g., zipped ﬁles). Table 4 contains the reacted AVDs for each spe-
ciﬁc measurement case. The result demonstrates that this type of
scan is not effective, especially for zipped payloads dropped in a
deeper-level folder of the targeted folder (e.g., /sdcard/ ∗ /). One
reason that current AVDs cannot implement recursively ﬁle system
monitoring due to the fact that this FileObserver APIs are not de-
signed for comprehensive ﬁle system hooking.
From the result, we can also tell that AVD #15 from Lookout
Inc., which is one of the top mobile security company targeting
Android security for years, provides the best design for the light
monitoring malScan among the tested AVDs. However, a design
vulnerability in the AVD #15 has been discovered from our de-
tailed analysis. The light monitoring malScan functionality is ac-
cidentally blocked when performing the heavy sweeping malScan.
This buggy case indicates the problematic design of light monitor-
ing malScan based on FileObserver APIs. Besides this problem,
although our measurement shows that the AVD #22 Sophos can
recognize malicious payloads in the /sdcard directory, on aver-
age it takes 22.7s to react to the observed payload dropping events
reported by the FileObserver. This vulnerability is due to an inap-
propriate way to handle the triggered events from the FileObserver
object. During such a long reaction period, the adversary can eas-
ily ﬁnish his malicious actions based on the dropped payload and
remove it before the malScan (its actual malware recognition ac-
tion). We have reported the vulnerabilities to Lookout and Sophos
respectively, and they have planned to ﬁx them in the next versions.
Since FileObserver APIs provided by Google is not meant for
AVD scanning purposes, these APIs cannot cover the whole ﬁle
system comprehensively and efﬁciently. Thus, the ad-hoc design of
the light monitoring malScans based on FileObserver is proven to
be ineffective and problematic. Therefore, we are calling the need
for speciﬁc hooking APIs for AVDs light monitoring malScan from
platform designers, for instance, Samsung, Google and so on.
3.3 Heavy Sweeping malScan Hazard
Different from the light monitoring malScan, the heavy sweep-
ing malScan is comprehensive, so it is usually hard to bypass. Es-
pecially, when the AVDs are equipped with the complete VDF. The
heavy sweeping malScan is a series of expensive operations per-
formed in a period, we call the period high protection window.
Since it can be only triggered implicitly by a pre-deﬁned schedule
or explicitly by a user, this type of malScan can be very comprehen-
sive, but lack of continuous protection. Therefore, if the adversary
can identify the high protection window, it can potentially evade
the detection by performing malicious actions after the scan.
To identify the high protection window, we want to analyze if
the malScan reveals any side-effects, which is different from other
non-scan operations. Based on the observations of malScan of the
30 AVDs, we notice that it is exactly this comprehensive scanning
strategy that produces very distinguishable CPU and memory usage
patterns. These patterns are distinct from other AVD operations
(e.g., VDF updates or other managing tasks of AVDs). The result
Table 5: Heavy-sweeping malware scan conﬁgurations
Type
Full Scan Only
Only Quick/Full
App Only
Folder Only
Pre-scheduled
AVD #
5, 6, 7, 11, 15, 17, 21, 22, 25, 26, 29
8, 9, 13, 14, 20, 24, 23, 27
1, 2, 4, 7, 12, 16, 17, 19, 20, 21, 27-30
1, 2, 3, 4, 9, 12, 13, 17, 18, 28, 30
1, 2, 3, 4, 7, 9, 12, 16,
17, 19, 20, 21, 27, 29, 30
Table 6: Hardware speciﬁcations of four Android devices
RAM CPU cores,speed
Devices Name
Google Nexus 4
2G
1G
Asus Nexus 7 Tablet
2G
Samsung Note 2
Samsung Nexus S
.5G
OS versions
4.3 JB
4.1 JB
4.0 ICS
2.2 Froyo
Quad,1.5kMHz
Quad,1.3kMHz
Quad,1.6kMHz
Single,1kMHz
from the Environment Information Collector in Table 2 shows that
one can directly access the resource usage pattern (e.g., the utime
and stime1) of AVDs from the ﬁle /proc/[AV D_pid]/stat, which
is accessible by the public. Here the AVD_pid is the process id of
the AVD and the mapping between the AVD package name and its
pid can be obtained through the probing channel #1 and #15.
Our further investigation shows that this Linux statistics ﬁle (stat),
is created for the whole AVD process. Due to the multi-threaded
programming of Android apps, the stat ﬁle for AVD process in-
cludes noise from other types of AVD operations, for example, a
user interacting with the AVD app or other process management
tasks (e.g. garbage collection) that are performed simultaneously
on the background. To precisely identify the scanning operations
and ﬁngerprint the scanning period and locations, we discover that
one can directly leverage the task information in the subdirectory of
each /proc/[AV D_pid]/ folder, namely the /proc/[AV D_pid]/
task/[AV D_tid]/stat, #10 and #11 side channels. They reveal
the utime and stime of a particular scanning task of an AVD pro-
cess (e.g., start and end of the heavy sweeping malScan). Several
dedicated tasks (main user interface or garbage collection threads)
are assigned with ﬁxed tid based on the pid offset. Thus, the noise
introduced from these tasks or operations can be ﬁltered out.
Another interesting observation is that some AVDs (e.g. # 9)
use dedicated native process(es) for more efﬁcient scanning, but
this special improvement in malScan surprisingly hurts itself, as it
simpliﬁes the relevant high protection window ﬁngerprinting pro-
cedure. One only has to identify the pid of the “/kav/libscan” native
process of #9 through the information leakage channels #1 and #15.
And then the relevant resource usage patterns for the comprehen-
sive scanning tasks can be further collected through channels #10
and #11 of the “/kav/libscan” process.
Testing malScans and Collecting Scanning Traces.
To further explore the feasibility of ﬁngerprinting the heavy sweep-
ing malScan in real time and build proof-of-concept evasions from
the collected system resource (e.g., CPU and memory) usages of
the targeted AVD, we ﬁrst run dynamic testing over all the AVDs’
heavy sweeping malScan. The result of our dynamic testing, in Ta-
ble 5, shows that current AVDs have three types of conﬁgurations
for this malScans: 1) only one full scan; 2) quick/full scan, where
a quick scan usually scans a subset of full scan’s content (e.g., only
the APK ﬁles); 3) ﬂexible scan by selecting different targets (fold-
ers). In addition to the above, some AVDs also have user-scheduled
scans at a particular time of a day or in a weekly/monthly basis. To
perform one malScan, it usually takes 1-10 minutes, depending on
the number and type of ﬁles/apps to be scanned. To build a bet-
Figure 2: 6 minutes CPU usage (utime) temporal statistics of (a) AVD
Lookout and (b) AVD Avira
Figure 3: Comparison of full/quick scans’ stime signal of (a) AVD
Dr.Web and (b) AVD Sophos
ter ﬁngerprinting algorithm, we collect the resource usage statis-
tics for various heavy sweeping malScan conﬁgurations of all the
30 tested AVDs on four devices with different hardware speciﬁ-
cations, as shown in Table 6. For each AVD on each device, we
perform ten 30-minute tests to collect its corresponding resource
usage statistics. We name the resource (e.g., CPU and memory)
usage statistics for a particular job of an AVD as a trace. A trace
generally contains all the relevant CPU and memory information
(e.g., the utime, stime1 of CPU and the VmSize, VmRSS2 of the
memory). For a particular AVD scan trace, we name each speciﬁc
resource usage dynamics as a signal. For instance, the process’s
utime signal is a series of incremental values calculated based on
the collected user mode CPU usage time (in Jifﬁes), which reﬂects
the AVD’s real-time CPU usage. Various signals can be sampled at
adjustable rates (e.g., 1 sample/second or 5 sample/Minute).
Identify Heavy Sweeping malScans Traces.
Our ﬁrst goal is to differentiate the traces of heavy sweeping
malScan with traces from all other operations (e.g., VDF ﬁle up-
dates, cloud Scan and etc.). Figure 2 contains 30-minute time se-
ries of two representative AVDs (AVD Lookout and Avira) during
which the user triggers two malScans and various other random
AVD operations. We remove part of the blank sub-period that con-
tains no system resource statistics and present a 6-minute version
in the paper. We observe that the utime pattern (stime has sim-
ilar pattern) has an extremely aggressive CPU usage pattern in a
continuous time period, which is the high-protection window, com-
pared to all other small traces introduced by non-scan operations.
Therefore, we use the average utime, stime signals in a sliding time
window (around 30 seconds) to decide if the AVD’s scan enters the
high-protection window.
Differentiate Full and Quick Scans.
Besides identifying the high-protection window, we want to fur-