这里我们可以使用 来搜索权限。
find
find /data/data/ -perm [permissions value]
36
第三章 Android 应用的逆向和审计
如果我们执行 ，它储存了应用的用户的用户名和密码。
cat userinfo.xml
#grep 'password' /data/data/com.aditya.example/files/userinfo.xml
mysecretpassword
这意味着任何其他应用程序也可以查看和窃取用户的机密登录凭据。 可以通过在开发应用程
序时指定正确的文件权限，以及一起计算密码与盐的散列来避免此漏洞。
目录遍历或本地文件包含漏洞
顾名思义，应用程序中的路径遍历漏洞允许攻击者使用漏洞应用程序的供应器读取其他系统
文件。
此漏洞也可以使用我们之前讨论的工具 Drozer 进行检查。 在这里，我们用例子来说明由
Seafastian Guerrero 发现的 Adobe Reader Android 应用程序漏洞
（
http://blog.seguesec.com/2012/09/path-traversal-vulnerability-on-adobe-reader-android-application
）。 此漏洞存在于 Adobe Reader 10.3.1 中，并在以后的版本中进行了修补。 你可以
从 http://androiddrawer.com 下载各种 Android 应用程序的旧版本。
我们将启动 Drozer，并运行 模块来查找内容供应器 URI。
app.provider.finduri
dz> run app.provider.finduri com.adobe.reader
Scanning com.adobe.reader...
content://com.adobe.reader.fileprovider/
content://com.adobe.reader.fileprov
一旦我们找到了 URI，我们现在可以使用 搜索并利用本地文件包含漏洞。
app.provider.read
在这里，我尝试从系统中读取一些文件，如 和 ，它们默认存在于
/etc/hosts /proc/cpuinfo
所有的 Android 实例中，因为它是基于 Linux 的文件系统。
dz> run app.provider.read content://com.adobe.reader.fileprovider/../../../../etc/host
s
127.0.0.1 localhost
正如我们在下面的屏幕截图中看到的，我们已经成功地使用 Adobe Reader 漏洞内容供应器
读取了 Android 文件系统中的文件。
37
第三章 Android 应用的逆向和审计
客户端注入攻击
客户端攻击通常发生在应用程序未检查用户输入的时候。 例如，在对 SQLite 数据库的查询期
间，应用程序正在解析用户输入，因为它位于查询语句中。
让我们举一个应用程序的示例，它检查本地 SQLite 数据库，来根据登录凭据验证用户。 因
此，当用户提供用户名和密码时，正在运行的查询将如下所示：
SELECT * FROM 'users' where username='user-input-username' and password='user-input-pa
ssword'
现在，在正常情况下，这将正常工作，用户输入其真正的登录凭据，并且查询取决于条件将
返回 或 。
true false
SELECT * FROM 'users' where username='aditya' and password='mysecretpass
但是，如果攻击者输入 SQL 语句而不是正常的用户名怎么办？ 请参考以下代码：
SELECT * FROM 'users' where username='1' or '1' = '1' - - and password='mysecretpasswo
rd
因此，在这种情况下，即使用户不知道用户名和密码，他们可以通过使用 查询来
1'or'1'='1
轻松绕过它，这在所有情况下都返回 。 因此，应用程序开发人员必须在应用程序中进
true
行适当的检查，来检查用户输入。
我们还可以使用 Drozer 的 app.provider.query 来利用 SQL 注入漏洞。 其语法看起来像：
run app.provider.query [Content Provider URI] --projection "* FROM SQLITE_MASTER WHER
E type='table';- -"
38
第三章 Android 应用的逆向和审计
现在，这将返回 SQLite 数据库中整个表的列表，它的信息存储在 SQLITE_MASTER 中。 您还可
以继续并执行更多的 SQL 查询，来从应用程序提取更多的信息。 为了使用 Drozer 实战漏洞
利用，你可以从 下载他
https://www.mwrinfosecurity.com/products/drozer/community-edition/
们的漏洞应用程序。
3.6 OWASP 移动 Top10
Web 应用程序开放安全项目（OWASP）是涉及安全和漏洞搜索的标准之一。 它还发布了前
10 名漏洞的列表，其中包括在各种平台中最常见和重要的漏洞。
可以
在
https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks
上找到 OWASP 移动版的前 10 个指南。 如果我们查看 OWASP 移动项目，以下是它涵盖的
移动应用程序的 10 个安全问题：
服务端弱控制
不安全的数据存储
传输层保护不足
意外的数据泄漏
缺少授权和认证
无效的加密
客户端注入
通过不可信输入的安全决策
不正确的会话处理
缺乏二进制保护
让我们逐一介绍它们，并快速了解它们在移动应用程序中的关系，以及我们如何检测它们：
服务端弱控制
第一个 OWASP 漏洞是服务端弱控制，顾名思义，服务端不以安全的方式将数据从移动应用
程序发送到服务端，或者在发送数据时暴露一些敏感的 API。 例如，考虑一个 Android 应用
程序发送登录凭据到服务器进行身份验证，而不验证输入。 攻击者可以以这样的方式修改凭
证，以便访问服务器的敏感或未授权区域。 此漏洞可视为移动应用程序和 Web 应用程序中的
一个漏洞。
不安全的数据存储
这仅仅意味着，应用相关信息以用户可访问的方式在设备上存储。 许多 Android 应用程序在
共享首选项，SQLite（纯文本格式）或外部存储器中，存储与用户相关的私密信息或应用程
序信息。 开发人员应该始终记住，即使应用程序在数据文件夹（ ）
/data/data/package-name
39
第三章 Android 应用的逆向和审计
中存储敏感信息，只要手机已 root，恶意应用程序/攻击者就可以访问它。
传输层保护不足
许多 Android 开发人员依赖于通过不安全模式的网络来发送数据，例如 HTTP 或没有正确实
现 SSL 的形式。 这使得应用程序易受到网络上发生的所有不同类型的攻击，例如流量拦截，
从应用程序向服务器发送数据时操纵参数，以及修改响应来访问应用程序的锁定区域。
意外的数据泄漏
当应用程序将数据存储在本身易受攻击的位置时，会出现此漏洞。 这些可能包括剪贴板，
URL 缓存，浏览器 Cookie，HTML5 DataStorage ，统计数据等。 一个例子是用户登录到他
们的银行应用程序，他们的密码已经复制到剪贴板。 现在，即使是恶意应用程序也可以访问
用户剪贴板中的数据。
缺少授权和认证
如果 Android 应用程序或一般的移动应用程序在没有适当安全措施的情况下，尝试基于客户
端检查来验证或授权用户，则这些应用程序最容易受到攻击。 应该注意的是，一旦手机已
root，大多数客户端保护可以被攻击者绕过。 因此，建议应用程序开发人员使用服务器端身
份验证和授权进行适当的检查，一旦验证成功，请使用随机生成的令牌，以便在移动设备上
验证用户。
无效的加密
这仅仅表示使用不安全的密码函数来加密数据部分。 这可能包括一些已知存在漏洞的算法，
如 MD5，SHA1，RC2，甚至是没有适当的安全措施的定制算法。
客户端注入
这在Android应用程序中是可行的，主要成因是使用 SQLite 进行数据存储。 我们将在本书的
各章中执行注入攻击。
通过不可信输入的安全决策
在移动应用程序中，开发人员应始终过滤和验证用户提供的输入或其他相关输入，并且不应
该像在应用程序中那样使用它们。 不受信任的输入通常会导致应用程序中的其他安全风险，
如客户端注入。
不正确的会话处理
40
第三章 Android 应用的逆向和审计
在为移动应用程序执行会话处理时，开发人员需要处理很多因素，例如认证 cookie 的正常过
期，安全令牌创建，cookie 生成和轮换，以及无法使后端的会话无效。 必须在 Web 应用程
序和 Android 应用程序之间维护正确的安全同步。
缺乏二进制保护
这意味着不能正确地防止应用程序被逆向或反编译。 诸如 Apktool 和 dex2jar 之类的工具可
用于逆向 Android 应用程序，如果没有遵循正确的开发实践，它会暴露应用程序的各种安全
风险。 为了防止通过逆向攻击来分析应用程序，开发人员可以使用 ProGuard 和 DashO 等工
具。
总结
在本章中，我们学习了使用各种方法来逆转 Android 应用程序并分析源代码。 我们还学习了
如何修改源代码，然后重新编译应用程序，来绕过某些保护。 此外，我们还看到了如何使用
Drozer 等工具寻找 Android 应用程序中的漏洞。 你还可以通
过 http://labs.securitycompass.com/exploit-me/ 亲自尝试 Exploit-Me 实验室中的各种漏洞，
它由 Security Compass 开发。
在下一章中，我们将进一步尝试 Android 应用程序的流量拦截，并在我们的渗透测试中使用
它。
41
第四章 对 Android 设备进行流量分析
第四章 对 Android 设备进行流量分析
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
在本章中，我们将研究 Android 设备的网络流量，并分析平台和应用程序的流量数据。 通常
应用程序会在其网络数据中泄漏敏感信息，因此发现它是渗透测试程序最重要的任务之一。
此外，你经常会遇到通过不安全的网络协议执行身份验证和会话管理的应用程序。 因此，在
本章中，我们将学习如何拦截和分析 Android 设备中，各种应用程序的流量。
4.1 Android 流量拦截
根据 OWASP 移动
Top10（
https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks
），不完善的传输层保护是第三大威胁。实际上，假设一个应用程序通过 HTTP 将用户的登
录凭据提交到服务器。 如果用户位于咖啡店或机场，并在有人嗅探网络时登录到他的应用程
序，会怎么样？ 攻击者能够获得特定用户的整个登录凭据，它以后可能用于恶意目的。 假设
应用程序正在通过 HTTPS 进行身份验证，通过 HTTP 的会话管理，并且在请求中传递身份
验证 Cookie。 在这种情况下，攻击者也能够通过在执行中间人攻击时拦截网络来获取身份验
证 Cookie。 使用这些认证 cookie，他可以直接作为受害用户登录到应用程序。
4.2 流量分析方式
在任何情况下都有两种不同的流量捕获和分析方法。 我们将研究 Android 环境中可能的两种
不同类型，以及如何在真实场景中执行它们。 被动和主动分析如下：
被动分析：这是一种流量分析的方法，其中应用程序发送的网络数据不会被拦截。 相
反，我们将尝试捕获所有网络数据包，然后在网络分析器（如Wireshark）中打开它，然
后尝试找出应用程序中的漏洞或安全问题。
主动分析：在主动分析中，渗透测试者将主动拦截所有正在进行的网络通信，并可以即
时分析，评估和修改数据。 这里，他需要设置代理，并且由应用/设备生成和接收的所有
网络流量会通过该代理。
被动分析
42
第四章 对 Android 设备进行流量分析
被动分析的概念是。将所有网络信息保存到特定文件中，之后使用数据包分析器查看。 这就
是我们将在 Android 设备中进行被动分析。 我们将使用 tcpdump 来将所有的信息保存到设备
中一个位置。 此后，我们将该文件拉取到我们的系统，然后使用 Wireshark 或 Cocoa 包分析
器查看它。 请参阅以下步骤：
1. 我们从 Timur Alperovich 的网站 http://www.eecs.umich.edu/~timuralp/tcpdump-arm 下载
为 ARM 编译的 tcpdump 二进制文件。 如果我们需要，我们还可以下载 tcpdump 的原始
二进制文件并交叉编译（为 Android 交叉编译你的二进制文件，请按照链
接 。链接展示了
http://machi021.blogspot.jp/2011/03/compile-busybox-for-android.html
交叉编译 BusyBox，但相同的步骤可以应用于 ）。
tcpdump
一旦我们下载了 ，我们可以通过在我们刚刚下载的二进制上执行一个文件，来
tcpdump
确认它是否为 ARM 编译。对于 Windows 用户，你可以使用 Cygwin 来执行命令。 输出
类似于以下屏幕截图中所示：
2. 这里的下一步是将 tcpdump 二进制文件推送到设备中的一个位置。 我们还必须记住，我
们需要继续执行这个文件。 因此，我们将它推送到一个位置，我们可以从中更改权限，
以及执行二进制来捕获流量。
3. 现在，继续并使用 adb 的 push 命令推送二进制来将二进制推送到设备。 同样，在我们
需要从设备中拉取内容的情况下，我们可以使用 而不是 。
pull push
4. 这里，我们将使用 adb push 将其推送到 Android 中的 /data/local/tmp ：