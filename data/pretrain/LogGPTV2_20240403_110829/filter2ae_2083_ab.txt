  1. -shared表示我们要编译一个共享库（非静态）
  2. -o指定可执行文件的输出文件名
  3. add.dll是我们想给我们的恶意 dll 起的名字
  4. evil.cpp是我们在其中编写恶意 dll 代码的 .cpp 文件
如果编译成功的话，你应该能在同目录下找到刚刚生成好的恶意 dll（add.dll）
我们再使用 PE 查看工具看看导出表
可以看到中转输出表上已经有了
注意我们这个 dll 并没有写任何功能性代码，让我们使用刚才编译的 main.exe 测试一下
可以发现功能转发正常
当然，当导出函数过多的时候我们不可能一个个自己去导出表里抄，可以写一个脚本自动化完成这个工作，不过这不是我们本文的重点，或者你可以使用 mingw-w64
里面自带的 gendef.exe 工具
#### .def 和 .exp 文件
**exp** ：
文件是指导出库文件的文件，简称导出库文件，它包含了导出函数和数据项的信息。当LIB创建一个导入库，同时它也创建一个导出库文件。如果你的程序链接到另一个程序，并且你的程序需要同时导出和导入到另一个程序中，这个时候就要使用到exp文件(LINK工具将使用EXP文件来创建动态链接库)。
**def** ：
def文件的作用即是，告知编译器不要以microsoft编译器的方式处理函数名，而以指定的某方式编译导出函数（比如有函数func，让编译器处理后函数名仍为func）。这样，就可以避免由于microsoft
VC++编译器的独特处理方式而引起的链接错误。
从上面的介绍中我们可以看出 .exp 文件可以用在链接阶段，所以我们可以先使用 `dlltool` 工具将 .def 转化为 .exp 文件，然后编译
`evil.cpp` 到 `evil.o` 再手动进行链接。
    gcc -c -O3 evil.cpp
    dlltool --output-exp functions.exp --input-def functions.def
    ld -o add.dll functions.exp evil.o
#### 额外的说明
当然，你也可以通过 clang 来完成这项工作
    clang -shared evil.cpp -o add.dll -Wl"/DEF:functions.def"
## 我们如何用 Golang 来实现转发 dll
Golang 提供了官方的动态链接库（dll）编译命令 `go build -buildmode=c-shared -o exportgo.dll
exportgo.go`，根据我们前面铺垫的基础，现阶段所需要思考的是： **如何把 .def 文件或 .exp 文件也带入进去？**
下文我将用 gcc 作为 cgo 的外部链接器，clang也可以按照同样的思想
### 尝试与思考
为什么不考虑利用cgo直接在c代码中写 `#progma comment(linker, '/EXPORT')`，这个的主要原因是 Golang 的 cgo
能力现阶段只支持 clang 和 gcc，MSVC编译器并不支持9。
让我们现在来思考一下整个编译流程：
  * **预处理**  
预处理用于将所有的#include头文件以及宏定义替换成其真正的内容
  * **编译**  
将经过预处理之后的程序转换成特定汇编代码(assembly code)的过程
  * **汇编**  
汇编过程将上一步的汇编代码转换成机器码(machine
code)，这一步产生的文件叫做目标文件，是二进制格式。gcc汇编过程通过as命令完成，这一步会为每一个源文件产生一个目标文件
  * **链接**  
链接过程将多个目标文以及所需的库文件(.so等)链接成最终的可执行文件(executable file)。
前三步都是在将代码处理成二进制机器码，而我们 **所要操控的导出表是属于文件格式的一部分，所以应该是需要在链接这个步骤做文章**
借助这个思路，我们对上面的样例做做文章。
首先把我们的 `evil.cpp` 编译汇编成目标文件，然后链接时加入额外控制。
    # evil.cpp 编译汇编成 evil.o 目标文件（下面的 -O3 是为了启用 O3 优化，可选）
    gcc -c O3 evil.cpp
    # 和 .def 文件一起进行链接
    ld -o add.dll functions.def evil.o
或者利用上文中先将 .def 转化成 .exp 再进行手动链接，我们均能得到我们预期的转发dll。
### golang 中的实现
我们的目的是需要把 .def 或 .exp 文件放入整个编译流程的链接环节中去。
首先我们需要先了解一下 cgo 的工作方式11：它用c编译器编译c，用Go编译器编译Go，然后使用 gcc 或 clang
将他们链接在一起，我们甚至能够通过 CGO_LDFLAGS 来将flag传递至链接器。
在我们Golang程序编译命令中，相信大家使用过 `-ldflags=""` 选项，这个其实是 `go tool link` 带来的，go build
只是一个前端，Go 提供了一组低级工具来编译和链接程序，go build只需收集文件并调用这些工具。我们可以通过使用-x标志来跟踪它的作用。不过这里我们并不关心这个。
我们去看看 [go tool link的说明书](https://pkg.go.dev/cmd/link)，帮助文件里面提到了
    -extld linker
        Set the external linker (default "clang" or "gcc").
    -extldflags flags
        Set space-separated flags to pass to the external linker.
`-extld` 一般我们不需要更改，也就是我们只需要想办法修改 `-extldflags` 让链接过程带入我们的 .def 或 .exp 文件即可。
但是，我们刚才使用 `ld` 编译的时候，都是直接将 .def 或 .exp 文件传入的，如何通过 `ld` 的参数传入呢？
在 [gcc 的链接选项](https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html) 里，有一个选项是
`-Wl`，用法为 `-Wl,option`，它的作用就是将`-Wl`后的option作为标识传递给 `ld` 命令，如果 option 中包含
`,`，则根据 `,` 拆分为多个标识传递给 `ld`，可能看到这里你对于这个选项还是一知半解，下面举个例子
    gcc -c evil.cpp
    ld -o add.dll functions.def evil.o
等同于
    gcc -shared -o add.dll -Wl,functions.def evil.cpp
等同于
    gcc -shared -Wl,functions.def,-o,add.dll evil.cpp
也就是 `-Wl` 后面的东西都会传递链接器
所以我们将 .def 或 .exp 文件利用 `-Wl` 选项设置到 `-extldflags` 上去即可。
所以我们现在可以创建一个样例 go 程序用来编译 dll
main.go
    package main
    import "C"
    func main() {
        // Need a main function to make CGO compile package as C shared library
    }
然后进行编译
    go build -buildmode=c-shared -o add.dll -ldflags="-extldflags=-Wl,C:/Users/Akkuman/Desktop/go-dll-proxy/article/functions.def" main.go
**注意** ：-Wl后面要写上 .def 或 .exp 文件的绝对路径，主要是由于调用程序时候的工作路径问题，只需要记住这一点即可。
现在我们得到了一个 golang 编译出来的转发dll
当然，你可能会对那个 `_cgo_dummy_export` 导出函数比较疑惑，这个是golang编译的dll所特有的，如果你想要去除掉它，可以使用
.exp 来进行链接
    go build -buildmode=c-shared -o add.dll -ldflags="-extldflags=-Wl,C:/Users/Akkuman/Desktop/go-dll-proxy/article/functions.exp" main.go
## dll 转发的总结
其实 cgo 主要的编译手段为：用c编译器编译c，用Go编译器编译Go，然后使用 gcc 或 clang
将他们链接在一起。我们所需要做的只是将它们粘合在一起。
## 在 Golang 中如何实现恶意 dll
我们已经知道了该怎么在 Golang 中实现转发 dll，接下来我们可以尝试实现恶意 dll 了。
### init 写法
如果你看这篇文章，相信你已经知道 Go 会默认执行包中的 init() 方法。所以我们可以把我们的恶意代码定义到这个函数里面去。
一般的dll实现方式为
    package main
    func Add(x, y int) int {
        return x + y
    }
    func main() {
        // Need a main function to make CGO compile package as C shared library
    }
我们只需要加上一个 init 方法，并且让恶意代码异步执行即可（防止 LoadLibrary 卡住）
    package main
    func init() {
        go func() {
            // 你的恶意代码
        }()
    }
    func Add(x, y int) int {
        return x + y
    }
    func main() {
        // Need a main function to make CGO compile package as C shared library
    }
### 对于 windows dll 更细粒度的控制
对于windows dll，DllMain11 是一个可选的入口函数
对于 DllMain 的介绍，我这里就不再赘述了，感兴趣的可以自行进行查询
系统是在什么时候调用DllMain函数的呢？静态链接或动态链接时调用LoadLibrary和FreeLibrary都会调用DllMain函数。DllMain的第二个参数fdwReason指明了系统调用Dll的原因，它可能是:：
  * `DLL_PROCESS_ATTACH`: 当一个DLL文件首次被映射到进程的地址空间时
  * `DLL_PROCESS_DETACH`: 当DLL被从进程的地址空间解除映射时
  * `DLL_THREAD_ATTACH`: 当进程创建一线程时，第n(n>=2)次以后地把DLL映像文件映射到进程的地址空间时，是不再用DLL_PROCESS_ATTACH调用DllMain的。而DLL_THREAD_ATTACH不同，进程中的每次建立线程，都会用值DLL_THREAD_ATTACH调用DllMain函数，哪怕是线程中建立线程也一样
  * `DLL_THREAD_DETACH`: 如果线程调用了ExitThread来结束线程（线程函数返回时，系统也会自动调用ExitThread），系统查看当前映射到进程空间中的所有DLL文件映像，并用DLL_THREAD_DETACH来调用DllMain函数，通知所有的DLL去执行线程级的清理工作
这些流程根据你自己的需求来进行控制。当然，如果你有过 Windows 编程经验，应该对这个比较熟悉。
Golang 是一个有 GC 的语言，需要在加载时运行 Golang 本身的运行时，所以暂时没有太好的方案在 Golang 中实现 DllMain
让外层直接调用入口点，因为没有初始化运行时。
我们可以变相通过 cgo 来实现这个目的。总体思路为，利用 C 来写 DllMain，通过 c 来调用 Golang 的函数
以下示例代码大多来自
[github.com/NaniteFactory/dllmain](https://github.com/NaniteFactory/dllmain)
#### c 实现 DllMain
首先我们可以在 c 中定义我们自己的 DllMain
    #include "dllmain.h"
    typedef struct {
        HINSTANCE hinstDLL;  // handle to DLL module
        DWORD fdwReason;     // reason for calling function // reserved
        LPVOID lpReserved;   // reserved
    } MyThreadParams;
    DWORD WINAPI MyThreadFunction(LPVOID lpParam) {
        MyThreadParams params = *((MyThreadParams*)lpParam);
        OnProcessAttach(params.hinstDLL, params.fdwReason, params.lpReserved);
        free(lpParam);
        return 0;
    }
    BOOL WINAPI DllMain(
        HINSTANCE _hinstDLL,  // handle to DLL module
        DWORD _fdwReason,     // reason for calling function
        LPVOID _lpReserved)   // reserved
    {
        switch (_fdwReason) {
        case DLL_PROCESS_ATTACH:
            // Initialize once for each new process.
            // Return FALSE to fail DLL load.
            {
                MyThreadParams* lpThrdParam = (MyThreadParams*)malloc(sizeof(MyThreadParams));
                lpThrdParam->hinstDLL = _hinstDLL;