.\" grep man page
.if !\n(.g \{\
.	if !\w|\*(lq| \{\
.		ds lq ``
.		if \w'\(lq' .ds lq "\(lq
.	\}
.	if !\w|\*(rq| \{\
.		ds rq ''
.		if \w'\(rq' .ds rq "\(rq
.	\}
.\}
.de Id
.ds Dt \\$4
..
.TH GREP 1  "GNU Project"
.SH NAME
grep, egrep, fgrep \- 打印匹配给定模式的行
.SH 总览 SYNOPSIS
.B grep
.RI [ options ]
.I PATTERN
.RI [ FILE .\|.\|.]
.br
.B grep
.RI [ options ]
.RB [ \-e
.I PATTERN
|
.B \-f
.IR FILE ]
.RI [ FILE .\|.\|.]
.SH 描述 DESCRIPTION
.PP
.B Grep
搜索以
.IR FILE
命名的文件输入 (或者是标准输入，如果没有指定文件名，或者给出的文件名是
.B \-
的话)，寻找含有与给定的模式
.IR PATTERN 
相匹配的内容的行。
默认情况下，
.B grep
将把含有匹配内容的行打印出来。
.PP
另外，也可以使用两个变种程序
.B egrep
和
.B fgrep
。
.B Egrep
与
.BR "grep\ \-E"
相同。
.B Fgrep
与
.BR "grep\ \-F"
相同。
.SH 选项 OPTIONS
.TP
.BI \-A " NUM" "\fR,\fP \-\^\-after-context=" NUM
打印出紧随匹配的行之后的下文
.I NUM
行。在相邻的匹配组之间将会打印内容是
.B \-\^\-
的一行。
.TP
.BR \-a ", " \-\^\-text
将一个二进制文件视为一个文本文件来处理；它与
.B \-\^\-binary-files=text
选项等价。
.TP
.BI \-B " NUM" "\fR,\fP \-\^\-before-context=" NUM
打印出匹配的行之前的上文
.I NUM
行。在相邻的匹配组之间将会打印内容是
.B \-\^\-
的一行。
.TP
.BI \-C " NUM" "\fR,\fP \-\^\-context=" NUM
打印出匹配的行的上下文前后各
.I NUM
行。在相邻的匹配组之间将会打印内容是
.B \-\^\-
的一行。
.TP
.BR \-b ", " \-\^\-byte-offset
在输出的每行前面同时打印出当前行在输入文件中的字节偏移量。
.TP
.BI \-\^\-binary-files= TYPE
如果一个文件的起始几个字节表明文件包含二进制数据，那么假定文件是
.IR TYPE
类型的。默认情况下，
.I TYPE
是
.BR binary
，并且
.B grep
一般会输出一个一行的消息说一个二进制文件匹配，或者如果没有匹配的话就没有消息输出。如果类型
.I TYPE
是
.BR without-match
，那么
.B grep
假定二进制文件不会匹配；这样做与
.B \-I
选项等价。如果类型
.I TYPE
是
.BR text
，那么
.B grep
将一个二进制文件视为文本文件来处理；它与
.B \-a
选项等价。
.I 警告：
.B "grep \-\^\-binary-files=text"
可能会输出二进制的无用内容。如果输出设备是一个终端，并且终端的驱动将这些输出中的一些当作命令，可能会带来恶劣的副作用。
.TP
.BI \-\^\-colour[=\fIWHEN\fR] ", " \-\^\-color[=\fIWHEN\fR]
在匹配的行周围以
.B GREP_COLOR
环境变量中指定的记号来标记。WHEN 可以是 `never', `always', 或是 `auto'。
.TP
.BR \-c ", " \-\^\-count
禁止通常的输出；作为替代，为每一个输入文件打印一个匹配的行的总数。如果使用
.BR \-v ", " \-\^\-invert-match
选项 (参见下面)，将是不匹配的行的总数。
.TP
.BI \-D " ACTION" "\fR,\fP \-\^\-devices=" ACTION
如果输入文件是一个设备，FIFO 或是套接字 (socket) ，使用动作
.I ACTION
来处理它。默认情况下，动作
.I ACTION
是
.BR read
，意味着设备将视为普通文件那样来读。如果动作
.I ACTION
是
.BR skip
，将不处理而直接跳过设备。
.TP
.BI \-d " ACTION" "\fR,\fP \-\^\-directories=" ACTION
如果输入文件是一个目录，使用动作
.I ACTION
来处理它。默认情况下，动作
.I ACTION
是
.BR read
，意味着目录将视为普通文件那样来读。如果动作
.I ACTION
是
.BR skip
，将不处理而直接跳过目录。如果动作
.I ACTION
是
.BR recurse
，
.B grep
将递归地读每一目录下的所有文件。这样做和
.B \-r
选项等价。
.TP
.BR \-E ", " \-\^\-extended-regexp
将模式
.I PATTERN
作为一个扩展的正则表达式来解释 (参见下面)。
.TP
.BI \-e " PATTERN" "\fR,\fP \-\^\-regexp=" PATTERN
使用模式
.I PATTERN
作为模式；在保护以
.BR \-
为起始的模式时有用。
.TP
.BR \-F ", " \-\^\-fixed-strings
将模式
.I PATTERN
视为一个固定的字符串的列表，用新行 (newlines) 分隔，只要匹配其中之一即可。
.TP
.BR \-P ", " \-\^\-perl-regexp
将模式
.I PATTERN
作为一个 Perl 正则表达式来解释。
.TP
.BI \-f " FILE" "\fR,\fP \-\^\-file=" FILE
从文件
.IR FILE
中获取模式，每行一个。空文件含有0个模式，因此不匹配任何东西。
.TP
.BR \-G ", " \-\^\-basic-regexp
将模式
.I PATTERN
作为一个基本的正则表达式 (参见下面) 来解释。这是默认值。
.TP
.BR \-H ", " \-\^\-with-filename
为每个匹配打印文件名。
.TP
.BR \-h ", " \-\^\-no-filename
当搜索多个文件时，禁止在输出的前面加上文件名前缀。
.TP
.B \-\^\-help
输出一个简短的帮助信息。
.TP
.BR \-I
处理一个二进制文件，但是认为它不包含匹配的内容。这和
.B \-\^\-binary-files=without-match
选项等价。
.TP
.BR \-i ", " \-\^\-ignore-case
忽略模式
.I PATTERN
和输入文件中的大小写的分别。
.TP
.BR \-L ", " \-\^\-files-without-match
禁止通常的输出；作为替代，打印出每个在通常情况下不会产生输出的输入文件的名字。对每个文件的扫描在遇到第一个匹配的时候就会停止。
.TP
.BR \-l ", " \-\^\-files-with-matches
禁止通常的输出；作为替代，打印出每个在通常情况下会产生输出的输入文件的名字。对每个文件的扫描在遇到第一个匹配的时候就会停止。
.TP
.BI \-m " NUM" "\fR,\fP \-\^\-max-count=" NUM
在找到
.I NUM
个匹配的行之后，不再读这个文件。如果输入是来自一个普通文件的标准输入，并且已经输出了
.I NUM
个匹配的行，
.B grep
保证标准输入被定位于退出时的最后一次匹配的行之后，不管是否指定了要输出紧随的下文的行。这样可以使一个调用程序恢复搜索。当
.B grep
在
.I NUM
个匹配的行之后停止，它会输出任何紧随的下文的行。当使用了
.B \-c
或
.B \-\^\-count
选项的时候，
.B grep
不会输出比
.IR NUM
更多的行。当指定了
.B \-v
或
.B \-\^\-invert-match
选项的时候，
.B grep
会在输出
.I NUM
个不匹配的行之后停止。
.TP
.B \-\^\-mmap
如果可能的话，使用
.BR mmap (2)
系统调用来读取输入，而不是默认的
.BR read (2)
系统调用。在一些情况下，
.B \-\^\-mmap
提供较好的性能。但是，如果一个输入文件在
.B grep
正在操作时大小发生变化，或者如果发生了一个 I/O 错误，
.B \-\^\-mmap
可能导致不可知的行为 (包括core dumps)。
.TP
.BR \-n ", " \-\^\-line-number
在输出的每行前面加上它所在的文件中它的行号。
.TP
.BR \-o ", " \-\^\-only-matching
只显示匹配的行中与
.I PATTERN
相匹配的部分。
.TP
.BI \-\^\-label= LABEL
将实际上来自标准输入的输入视为来自输入文件
.I LABEL
。这对于 zgrep 这样的工具非常有用，例如：
.B "gzip -cd foo.gz |grep --label=foo something"
.TP
.BR \-\^\-line-buffering
使用行缓冲，it can be a performance penality.
.TP
.BR \-q ", " \-\^\-quiet ", " \-\^\-silent
安静。不向标准输出写任何东西。如果找到任何匹配的内容就立即以状态值 0 退出，即使检测到了错误。
参见
.B \-s
或
.B \-\^\-no-messages
选项。
.TP
.BR \-R ", " \-r ", " \-\^\-recursive
递归地读每一目录下的所有文件。这样做和
.B "\-d recurse"
选项等价。
.TP
.BR "\fR \fP \-\^\-include=" PATTERN
仅仅在搜索匹配
.I PATTERN
的文件时在目录中递归搜索。
.TP
.BR "\fR \fP \-\^\-exclude=" PATTERN
在目录中递归搜索，但是跳过匹配
.I PATTERN
的文件。
.TP
.BR \-s ", " \-\^\-no-messages
禁止输出关于文件不存在或不可读的错误信息。
对于可移植性需要注意：与 \s-1GNU\s0
.BR grep
不同，传统的
.B grep
不遵守 \s-1POSIX.2\s0 规范，因为传统的
.B grep
缺少一个
.B \-q
选项，而它的
.B \-s
选项与 \s-1GNU\s0
.BR grep
的
.B \-q
选项行为相似。需要可移植到传统
.B grep
的 shell 脚本应当避免使用
.B \-q
和
.B \-s
选项，而应当将输出重定向到 /dev/null 。
.TP
.BR \-U ", " \-\^\-binary
将文件视为二进制。默认情况下，在 MS-DOS 和 MS-Windows 系统中，
.BR grep
通过从文件中读取头部的 32kB 内容来判断它的文件类型。如果
.BR grep
判断文件是一个文本文件，它将原始文件内容中的 CR 字符去除 (使得含有
.B ^
和
.B $
的正则表达式可以正常工作)。指定
.B \-U
将不进行这些工作，而使所有文件保持不变地读取并传递给匹配机制。如果文件是一个以 CR/LF 换行的文本文件，这样作将导致一些正则表达式失败。这个选项在 MS-DOS 和 MS-Windows 之外的系统中无效。
.TP
.BR \-u ", " \-\^\-unix-byte-offsets
报告 Unix 风格的字节偏移量。这个开关使得