regions represent the entirety of the vulnerable portions of the
processor.
Further, close examination of Fig. 7 shows that the cache
arrays actually account for much less of the processor area than
a simple accounting of vulnerable bits would suggest (Table I).
Indeed the cache arrays occupy less than half of the total area
of the PowerPC core, suggesting that applying a derating factor
to the probability of selecting a cache upset would improve the
accuracy of the software-based fault emulator.
D. Correlation between laser testing and fault emulation
Because nearly every non-benign error occurred within one
of the cache arrays, our ﬁnal experiment focuses on validating
our fault emulator against strictly the data and instruction
caches. In this experiment, we ran two fault emulation cam-
paigns, one against the data cache and another against the
instruction cache. Under these experiments, we avoid the issue
of cache area relative to the PowerPC core by injecting faults in
only the instruction cache or data cache, and comparing those
results against those laser faults that fell within the cache areas.
We ran 3956 and 5719 trials for the dedicated Icache and
Dcache fault emulation campaigns, respectively. In Figs. 8
and 9 we compare our cache-speciﬁc fault emulator campaigns
to our laser results. By comparing only the percent of errors,
we ﬁnd that the fault emulation results compare most favorably
with our laser results in the case of recoverable errors.
Fig. 8: Results of a dedicated Icache campaign compared to
laser results. Values are listed as the percent of total faults.
blocks of comparably sized emulated injections to their laser
counterparts. For example, there were 133 laser-based faults
injected into the instruction cache and 92 laser-based faults
injected into the data cache.
However, because we are able to produce far more emu-
lated injections than occurred within the cache arrays during
our laser experiment, we also compare the results by averaging
Using this analysis we can directly compare the emulated
results with our laser experiment results. All results are within
a 90% conﬁdence interval. For our data cache results, recover-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
B. Fault Emulation Lessons
The primary lesson learned from our fault emulation ex-
periments was that future studies of this kind must incorpo-
rate laser testing and/or particle beam testing into their fault
distribution models in order to more accurately model the
different error rates in SRAM cells, registers, etc. While an
error distribution based on Table I represents a starting point,
fully characterizing error rates will require more detailed fault
models than are currently available.
As a practical matter, fault emulation proved valuable as
a precursor to our laser test. The fault distribution was useful
for studying application behavior in the presence of bit errors.
By using fault emulation, we were able to implement a robust
fault tolerance solution prior to engaging the NRL for laser
testing. By doing so, we were able to test our solution without
debugging the fault tolerance library in-place. This resulted in
far more productive testing and many more trials over the three
day testing period.
C. Combining Laser Testing and Fault Emulation
While both fault emulation and laser testing, individually,
proved useful, neither provided a full characterization of
our SpaceCube-based application. Broadly, software-controlled
fault emulation tended to overemphasize cache and register
errors, while laser testing provided only a small sample of
faults.
Characterizing an application as complex as a SpaceCube-
based embedded processor application requires thousands
more trials than can reasonably be collected through laser
testing. However, laser testing provides a realistic fault model
that cannot be replicated through fault emulation without
access to proprietary design details.
The combination of fault emulation and laser testing has
allowed us to more fully explore the failure space of the
system under test. Fault emulation allows us to gather tens of
thousands of trials, over weeks if desired, and at extremely low
cost. Our fault emulation campaigns also correctly predicted
that for the application under test, the instruction cache is far
more sensitive than the data cache in terms of recoverable
errors. The cache injection campaigns proved accurate when
compared to their laser counterparts. This was especially true
in the case of recoverable errors (see Figs. 8 and 9). This was
true despite the somewhat unrealistic fault model imposed by
the fault emulator, the inability to accurately model multi-bit
upsets in emulation, and the fact that each injection occurs
along clean clock boundaries, essentially while the system is
paused (in an interrupt).
Laser testing provides a far more realistic fault mechanism,
injecting faults independent of processor state, causing multi-
bit upsets, and injecting into logic that
is unavailable to
a software-based fault emulator. By combining these two
techniques, we were able to leverage the beneﬁts of both
techniques to explore a much greater portion of the failure
space than either is capable of achieving alone.
Finally one insight gained from both laser testing and fault
emulation was the relative effectiveness of error detection on
both the application processor and the emulated radiation-
hardened controller. We found that a surprising majority of
Fig. 9: Results of a dedicated Dcache campaign compared to
laser results. Values are listed as the percent of total faults.
able errors are within 0.106σ (standard deviations), while the
SDCs are within 1.367σ. For our instruction cache campaign,
recoverable errors are within 1.640σ while our SDCs are
within 1.371σ. This helps to conﬁrm our cache injection
model, and demonstrates the viability of fault emulators for
characterizing SEUs.
VI. LESSONS LEARNED
One of the primary goals of this paper is to characterize
a single application through two fault injection methodologies
and show how their combination can be leveraged to greater
effect. Through both laser testing and fault emulation, we
have shown the relative advantages and disadvantages of both
techniques. In this section, we discuss the broad lessons that
we have learned through each technique individually, and most
importantly through the combination of both strategies.
A. Laser lessons
One important lesson learned is the amount of prepara-
tion and development required for system-level laser testing.
Although we re-used a tester board previously designed for
particle beam testing, the new FPGA logic, the embedded test
program, and the capability for selecting individual laser pulses
with a shutter all required signiﬁcant effort. We initially found
it very difﬁcult to get FPGA devices polished; ultimately a
third party was able to provide prompt service.
An unexpected lesson that we learned early on was the
importance of maintaining laser alignment
the
entirety of the experiment. When out of alignment, upsets
were not reliably generated. Thus the alignment needed to
be checked between each campaign, and the size of the scan
region had to be limited such that the device did not move
unintentionally in the z direction. This was the reason that we
split our injection campaigns into two regions.
throughout
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
detected recoverable errors were caught by the application
processor: 94% in the case of our laser experiment, and 97.5%
in the case of our full campaign fault emulation experiment
(Table III). The emulated radiation-hardened controller was
responsible for detecting 6% in the case of the laser experiment
and 2.5% in the case of the fault emulation campaign.
VII. RELATED WORK
We are not aware of studies that speciﬁcally address the
correlation between fault emulation and system-level
laser
testing, however many previous studies have related aspects.
Evaluations of software-implemented fault tolerance in embed-
ded applications have been conducted with in situ data [11].
Several studies correlate fault simulation and particle beam
testing [12], or fault emulation and particle beam testing [13].
In some cases, lasers have been used to perform dynamic,
application-level testing, often in the context of cryptographic
applications [10]. Methods of software-based fault injection
have been well documented. Carreira et al. demonstrated a fault
injector using a CPU’s debug features and exceptions [14].
They were able to inject faults into registers and functional
units (but not caches). Velazco et al. used interrupts to inject
faults into registers and on-chip RAM [15]. A method for
injecting faults into both registers and caches on a embedded
PowerPC core was described by Bernardi et al. [16], and we
have developed our own fault injector, used in this paper [8].
The use of checkpoint/restart in embedded systems has been
previously described by Pop et al. [17]. In our earlier work we
focused on fault tolerance [5] and silent data corruption [18]
in a NASA SpaceCube application.
VIII. CONCLUSION
In this paper we have made two contributions: 1) we have
shared the valuable lessons learned in characterizing an embed-
ded application though both laser testing and fault emulation;
and 2) we showed how combining both fault emulation and
laser testing results in a greater understanding of the failure
space than either technique alone provides. A secondary result
of this paper is that we have demonstrated the robustness of
our fault tolerance solution, tolerating thousands of faults and
recovering from every one. Our hope is that this study will
offer insight to researchers who may want to use laser testing
and/or fault emulation for their own work, and who wish to
employ both techniques more effectively.
ACKNOWLEDGMENTS
The authors would like to acknowledge the contributions
of the following individuals and organizations for their as-
sistance in preparing this manuscript and carrying out the
laser experiments. Scott Stansberry of USC/ISI provided hard-
ware guidance. Jonathan Ahlbin of USC/ISI provided valuable
feedback on this manuscript. Stephen Buchner and Jeffrey
Warner of the U.S. Naval Research Lab provided expertise
in laser testing. Mark Bucciero designed and implemented
much of the framework used in our fault emulation work.
NASA provided a test board and DUT cards. Finally, the
authors greatly acknowledge Tom Flatley, the NASA Goddard
Spaceﬂight Center, and the NASA Earth Science Technology
Ofﬁce AIST Program for funding this work through grant
number NNX09AF16G.
REFERENCES
[1] T. Flatley, “Advanced hybrid on-board science data processor-
SpaceCube 2.0,” Earth Science Technology Forum, 2011.
[2] Synova Inc. (2012) Mongoose-V MIPS R3000 Rad-Hard Processor.
[Online]. Available: http://www.synova.com/proc/mg5.html
[3] N. Haddad, R. Brown, T. Cronauer, and H. Phan, “Radiation hardened
COTS-based 32-bit microprocessor,” in Fifth European Conference on
Radiation and Its Effects on Components and Systems, RADECS 99.
IEEE, 1999, pp. 593–597.
[4] D. Rea, D. Bayles, P. Kapcio, S. Doyle, and D. Stanley, “Pow-
erPC RAD750-A Microprocessor for Now and the Future,” in IEEE
Aerospace Conference.
IEEE, 2005, pp. 1–5.
[5] M. Bucciero, J. P. Walters, and M. French, “Software fault
toler-
ance methodology and testing for the embedded PowerPC,” in IEEE
Aerospace Conference, Mar. 2011.
[6] S. P. Buchner, D. Wilson, K. Kang, D. Gill, J. A. Mazer, W. D. Raburn,
A. B. Campbell, and A. R. Knudson, “Laser Simulation of Single Event
Upsets,” IEEE Transactions on Nuclear Science, vol. 34, no. 6, pp. 1227
–1233, Dec. 1987.
[7] Xilinx, “Virtex-4 PowerPC 405 - Errata for all Virtex-4 FX Devices.”
[8] M. Bucciero, J. P. Walters, R. Moussalli, S. Gao, and M. French, “The
PowerPC 405 Memory Sentinel and Injection System,” in Proceedings
of the 19th Annual International Symposium on Field-Programmable
Custom Computing Machines, ser. FCCM ’11. IEEE Computer Society,
2011, pp. 154–161.
[9] C. Poivey, M. Berg, M. Friendlich, H. Kim, D. Petrick, S. Stansberry,
K. LaBel, C. Seidleck, A. Phan, and T. Irwin, “Single Event Effects
(SEE) response of embedded PowerPCs in a Xilinx Virtex-4 FPGA for
a space application,” in 9th European Conference on Radiation and Its
Effects on Components and Systems, RADECS 2007, Sep. 2007, pp. 1
–5.
[10] V. Pouget, A. Douin, G. Foucard, P. Peronnard, D. Lewis, P. Fouillat,
and R. Velazco, “Dynamic Testing of an SRAM-Based FPGA by Time-
Resolved Laser Fault Injection,” in 14th IEEE International On-Line
Testing Symposium IOLTS ’08, July 2008, pp. 295 –301.
[11] M. N. Lovellette et al., “Strategies for fault-tolerant, space-based com-
puting: Lessons learned from the ARGOS testbed,” in IEEE Aerospace
Conference, 2002.
[12] V. Asenek, C. Underwood, R. Velazco, S. Rezgui, M. Oldﬁeld,
P. Cheynet, and R. Ecoffet, “SEU induced errors observed in micro-
processor systems,” IEEE Transactions on Nuclear Science, vol. 45,
no. 6, pp. 2876 –2883, Dec. 1998.
[13] P. Ramachandran, P. Kudva, J. Kellington, J. Schumann, and P. Sanda,
“Statistical Fault Injection,” in International Conference on Dependable
Systems and Networks, DSN 2008, June 2008, pp. 122 –127.
J. Carreira, H. Madeira, and J. Silva, “Xception: A Technique for the
Experimental Evaluation of Dependability in Modern Computers,” IEEE
Trans. Softw. Eng., vol. 24, no. 2, pp. 125–136, 1998.
[14]
[15] R. Velazco, S. Rezgui, and R. Ecoffet, “Predicting error rate for
microprocessor-based digital architectures through C.E.U. (Code Em-
ulating Upsets) injection,” IEEE Transactions on Nuclear Science,
vol. 47, no. 6, pp. 2405 –2411, Dec. 2000.
[16] P. Bernardi, L. Sterpone, M. Violante, and M. Portela-Garcia, “Hybrid
Fault Detection Technique: A Case Study on Virtex-II Pro’s PowerPC
405,” IEEE Transactions on Nuclear Science, vol. 53, no. 6, pp. 3550
–3557, Dec. 2006.
[17] P. Pop, V. Izosimov, P. Eles, and Z. Peng, “Design Optimization of
Time- and Cost-Constrained Fault-Tolerant Embedded Systems With
Checkpointing and Replication,” IEEE Transactions on Very Large
Scale Integration (VLSI) Systems, vol. 17, no. 3, pp. 389 –402, Mar.
2009.
[18] K. Zick, C.-C. Yu, J. P. Walters, and M. French, “Silent Data Corruption
and Embedded Processing With NASA’s SpaceCube,” IEEE Embedded
Systems Letters, vol. 4, no. 2, pp. 33 –36, June 2012.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply.