最终导致了对parse-log-file的调用。在没有任何错误处理的情况下，它可能像这样：
的主人口点是函数log-analyzer，它查找一组日志并使用函数analyze-log来分析它们，后者
用程序中很上层的某个位置，不一定在parse-log-file的直接调用者中。例如，假设应用程序
理器。你可以在通向parse-log-file的函数调用链的任何位置上设置这个处理器。这可能是应
使用的策略。
以为parse-log-entry添加再启动来提供其他的恢复策略，随后状况处理器可以选择它们想要
entry再启动。它可以选择在更高层进行错误处理。或者，如同我将在下一节讲述的那样，你可
file可以用在更多情形里了。调用parse-log-file的更高层代码不需要调用skip-1og-
避免进入调试器，你可以建立一个状况处理器来自动地调用skip-1og-entry再启动。
skip-log-entry的选项，如果你选择了它，将导致parse-log-file继续其之前的操作。为了
理错误，最终会转到调试器中。不过，在调试器所提供的几个再启动选项中会有一个称为
该函数的新版本如下所示：
产生的行为。在parse-log-file中，你可以根据其行为将这个再启动称为skip-log-entry。
RESTART-CASE的形式与HANDLER-CASE很相似。一般而言，一个再启动名应当描述了再启动所
CASE改成RESTART-CASE。除了再启动的名字可以只是普通的名字而无需是状况类型的名字外，
所示。
这样，从最上层的函数log-analyzer到实际产生错误的parse-log-entry的路径将如下
在我开始谈论这些之前，你需要知道如何设置一个会调用skip-log-entry再启动的状况处
208
analyze-log的任务是直接或间接地调用parse-log-file,然后再对返回的日志项列表做
建立一个再启动而不是让parse-log-file直接处理错误的好处在于，它使得parse-log-
为了改变parse-log-entry，从而使其建立一个再启动而非状况处理器，可以将HANDLER-
(defunanalyze-log(log)
(defun log-analyzer()
如果在一个含有受损日志项的日志文件上调用该版本的parse-1og-file，它将不会直接处
(defun parse-log-file(file)
(dolist
(dolist(log
(with-open-file（in file:direction:input)
(analyze-entryentry)))
(analyze-loglog)))
(loop for text=（read-line innil nil） while text
第19章
whenentrycollectit)))
(entry
超越异常处理：状况和再启动
(find-all-logs))
(parse-log-file log))
www.TopSage.com
{-entrytext)
---
## Page 226
然后将log-analyzer的定义修改成下面这样:
再启动函数：
这样的函数称为再启动函数（restart function）。你可以像下面这样为skip-log-entry定义一个
你也可以定义一个命名函数来做相同的事并绑定该函数。事实上，在定义再启动时有个常用的实
INVOKE-RESTART的调用将查找并调用最近绑定的带有给定名字的再启动。因此你可以像下面这
退栈的情况下运行—当调用该函数时，控制流仍然在对parse-log-entry的调用中。对
HANDLER-CASE之间的一个更大的区别在于，由HANDLER-BIND所绑定的处理器函数必须在不回
是，这里的处理器代码必须是一个函数对象，并且它必须只接受单一参数。HANDLER-BIND和
HANDLER-BIND的主体可以包含任意数量的形式。与HANDLER-CASE的处理器代码有所不同的
其中的每个绑定都是由状况类型和一个单参数处理函数所组成的列表。在处理器绑定之后
BIND的基本形式如下所示：
话栈会回退到HANDLER-CASE所在的函数里。你需要使用更底层的宏HANDLER-BIND。HANDLER-
调用skip-log-entry。不过，你不能使用HANDLER-CASE来建立这个状况处理器，因为那样的
① 编译器可能会抱怨函数的参数从未被使用。你可以通过添加一个声明(declare（ignore c)）作为LAMBDA形
(defun skip-log-entry (c)
在这个HANDLER-BIND中，处理器函数是一个调用了 skip-log-entry再启动的匿名函数。
(defun log-analyzer ()
(handler-bind (binding*) form*)
假设你总是想要跳过有问题的日志项，那么可以改变这个函数来建立一个状况处理器，为你
式体中的第一个表达式来消除这类警告。
(invoke-restart 'skip-log-entry))
(handler-bind ((malformed-log-entry-error
(dolist (log (find-all-logs))
(analyze-log log))))
log-analyzer 
#'(lambda (c)
(invoke-restart 'skip-log-entry))))
 analyze-log
www.TopSage.com
 parse-log-file 
parse-log-entry
19.4再启动
209
---
## Page 227
类似于你之前为skip-log-entry定义的再启动函数。因此，如果你想要改变处理有问题项的策
回值，而另一个则试图在最初的日志项上就地解析其参数。
可以同时支持我刚刚提到的两种恢复策略。一个简单地返回传递给它的parse-log-entry的返
RESTART的调用。通过为parse-log-entry增加两个再启动，其中每个都只接受单个参数，你
项传递回parse-log-entry。
问题的日志项；其他应用可能有-些方式来修复有问题的项，并可能需要一种方式来将修复后的
供不同的恢复策略。如同我早先提到的，并非所有的日志解析应用都需要跳过那些有问题的项。
19.5
供机会来处理该状况。
动来处理该状况，而在其他情况下正常返回，从而给那些绑定在栈的更高层的其他状况处理器提
log-entry被HANDLER-BIND绑定时，它将在存在一个再启动时通过调用skip-log-entry再启
则返回NIL。你可以通过将再启动对象传递给INVOKE-RESTART来调用该再启动。这样，当skip-
log-entry再启动的代码抛出，那么可以将skip-log-entry函数修改成下面这样：
CONTROL-ERROR报错。如果你想要允许malformed-log-entry-error可以被没有建立skip-
-entry再启动，那么对INvoKE-RESTART的调用将在无法找到skip-log-entry再启动时产生
如果malformed-log-ent.ry-error被来自log-analyzer的代码抛出，却没有建立skip-log
为了允许这些更复杂的恢复机制，再启动可以接受任意参数，它们被传递给对INVOKE-
210
USE-VALUE是这类再启动的标准名字。Common Lisp为USE-VALUE定义了-个再启动函数,
由于再启动必须显式调用才有效果，因此你可以定义多个再启动，让它们中的每一个分别提
如同代码中所写，skip-log-entry再启动函数假设已经建立了skip-log-entry再启动。
(defun parse-log-entry (text)
(defun skip-log-entry (c)
(defun log-analyzer ()
(if (well-formed-log-entry-p text)
{let
((--# ---) -
提供多个再启动
(restart-case (error 'malformed-log-entry-error :text text)
(make-instance 'log-entry
(analyze-log log)}))
第19章 
use-value
超越异常处理：状况和再启动
(yalue)
www.TopSage.com
---
## Page 228
为一个错误。
方式来处理一
存在这样的再启动时产生一个CONTROL-ERROR。当然，一个通过WARN产生的状况也可以用其他
回而不打印任何东西。再启动函数MUFFLE-WARNING可以查找并调用与其同名的再启动，并在不
SIGNAL调用的外围建立一个再启动MUFFLE-WARNING，从而允许一个状况处理器令WARN直接返
它将状况打印到*ERROR-OUTPUT*中并返回NIL，从而交给它的调用者来处理。WARN也会在
样，WARN调用SIGNAL来产生一个状况。但是如果SIGNAL返回了，WARN并不会调用调试器—
处理。
对ERROR的调用永远不会正常返回。状况必须要么被一个状况处理器所处理，要么在调试器中被
返回了，那么ERROR将通过调用保存在*DEBUGGER-HOOK*中的函数来启动调试器。这样，一个
况处理器或通过调用一个再启动所处理，那么这个对SIGNAL的调用将不再返回。但如果SIGNAL
况的处理器。如果SIGNAL在状况处理之前找不到其他的状况处理器，那么它也会正常返回。
当处理器返回时，控制被传递回SIGNAL，SIGNAL随后继续查询另一个较近绑定的可以处理该状
理器通过正常返回来拒绝处理状况的原因在于，对处理器函数的调用只是一个正规函数调用—
抛出一个状况并不会改变程序的控制流。
器和再启动在底层和上层代码之间构建多种协议。理解状况的潜在用途的关键在于，要理解仅仅
19.6状况的其他用法
的日志解析API的组成部分。
理解parse-log-file的工作原理。正如其名字所显示的，skip-log-entry是一个正确抽象了
同样效果这一理论，直接去掉skip-log-entry再启动也不是个好主意，因为这要求状况处理器
正是你极力予以避免的。同时，基于状况处理器可以通过在NIL上调用use-Value再启动而获得
通常会想把再启动放在尽可能最底层的代码里。尽管如此，将skip-log-entry再启动移到
你曾经使用的ERROR函数会调用SIGNAL。如果错误被一个通过HANDLER-CASE传递控制的状
基本的信号函数SIGNAL实现了搜索适用的状况处理器并调用其处理器函数的机制。一个处
举个例子，在日志分析应用里，如果存在某些情况使得一个日志项稍不正常但仍可解析，那
另一个状况信号函数WARN提供了构建在状况系统之上的不同类型协议的示例。和ERROR一
虽然状况系统主要用于错误处理，但它们还可以用于其他目的，你可以使用状况、状况处理
你还可以将这些新的再启动放在parse-log-file而不是parse-log-entry中。不过，你
(defun log-analyzer ()
(handler-bind ((malformed-log-entry-error
(dolist (log (find-a
(analyze-log log))))
一个状况处理器可以像处理真正的错误一样来处理它，从而将一-个警告“提升"
#:(lambda (c)
(use-value 
all-logs))
(make-instance 'malformed-log-entry :text (text c))))))
www.TopSage.com
19.6状况的其他用法
211
---
## Page 229
作符。
写健壮代码的极佳工具，并且它可以完美地融合到Common Lisp的增量式开发风格中。
这就是说，如果你的目标是编写一个那样的软件，那么你将发现CommonLisp状况系统是用于编
区别。后者的难点在于，需要进行大量的关于软件本身而不是任何特定编程语言构造细节的思考
正确的错误处理，或者在这方面的欠缺，往往是阐述性代码和坚不可摧的产品级代码之间最大的
帮助处理ID3文件解析过程中一些棘手的边界情况。遗憾的是，编程教材总是过于轻视错误处理。
足够了。
层代码沟通信息，状况机制都可以合理使用。但对于多数目标来说，标准的错误和警告协议应该
函数CONTINUE查找并在CONTINUE再启动可用时调用它，否则返回NIL。
调试器。否则，可以在转到调试器以后使用再启动，立即恢复到CERROR调用之后的计算状态。
会转到调试器。但和WARN一样，它在产生状况之前会建立一个再启动。这个再启动是CONTINUE，
理，并使用与来自malformed-log-entry-error相同的方式进行恢复。
个状况。然后更大的应用可以选择打印这些警告、隐藏这些警告，或是将这些警告当作错误来处
么你可以编写parse-log-entry来使其继续解析这些稍有问题的日志项，但同时用wARN产生一
典的Transaction Processing:Concepts and Techniqgues（MorganKaufimann, 1993）一书的第3章
构建失效容忍系统的更大问题的一个绝佳综述，可以参见JimGray和AndreasReuter所编写的经
多聪明的见解，但在他的编程观点和Lisp编程方式之间仍然存在着一条鸿沟，最后，关于围绕
Eiffel是一种静态类型的受约束的AlgolAda系语言。尽管他在面向对象和软件可靠性方面有许
（PrenticeHal1997）一书的第11章和第12章。不过要记住，BertrandMeyer是Eiffl的发明者，
提供了一种思考软件正确性的有用方式，可参见他的Object-OrientedSoftwareConstruction
Reliability（JohnWiley& Sons，1976）开始.Bertrand Meyer关于DesignBy Contract的著作也
你将在后续的实践章节里用到状况系统，既可以用于正常的错误处理，也可以像第25章那样
212
 在下一章里，我将简单概述一下你尚未有机会使用或者说至少还没有直接用到的25个特殊操
你也可以在SIGNAL之上构建自己的协议—无论底层代码需要何种方式来与调用栈中的上
第三个报错函数CERROR提供了另一种协议。和ERROR一样，CERROR将在状况没被处理时就
关于编写健壮的软件方面的信息，你可以从查阅由GlenfordJ.Meyers编写的Software
第19章超越异常处理：状况和再启动
www.TopSage.com
---
## Page 230
20.2维护词法环境
能力。
的布尔选择操作符，从而构造出其他所有的条件执行构造。?PROGN则提供了序列化一组形式的
供基本控制类型的。QUOTE完全避免求值，从而允许你得到作为数据的S-表达式。IF提供了基本
我们已经全部讨论过了。尽管如此，还是该注意这些操作符是如何分别对一个或多个形式求值提
20.1
的代码中却是相当有用的。
哪些是用来作为你一直使用的其他控制构造的基础的，以及哪些是你将很少直接使用但在宏生成
你会看到它们是如何在一起工作的。我将指出它们中的哪些是可以直接用在你自己的代码中的，
语言其余部分的基础，因此对它们有整体的了解将有助于你理解该语言的工作方式。
到它们。其次，因为25个特殊操作符（连同求值函数调用的基本规则以及内置数据类型）提供了
理的情况也很少发生。你有必要熟悉这些特殊操作符，这样当有一天需要它们时，你至少可以想
他的特殊操作符。首先，一些不太常用的特殊操作符之所以不太常用，只是因为需要用它们来处
语言底层机制的足够的权限，从而能够做到诸如控制栈的回退这样的事情。
我在前面的章节里已经讨论了大多数常用的特殊操作符，但有两个理由使我们有必要熟悉其
①当然，如果IF不是一个特殊操作符而其他某个条件形式（例如COND）是的话，那么你也可以将IF构造成一个宏。
第一类特殊操作符包括三个对形式求值提供基本控制的操作符，它们是QUOTE、IF和PROGN
在本章里，我将讨论所有的特殊操作符，其中的一些只是简要介绍，另一些则会详细叙述
特殊操作符中最大的一类由那些维护和访问词法环境（lexicalenvironment）的操作符所组成。
尽管没有哪个CommonLisp的特殊操作符是直接用于产生或处理状况的，但它们提供了通向
事实上，在许多Lisp方言里，从McCarthy最初的Lisp开始，COND都是那个最基本的条件求值操作符。
控制求值
第20章
特殊操作符
www.TopSage.com
大家网