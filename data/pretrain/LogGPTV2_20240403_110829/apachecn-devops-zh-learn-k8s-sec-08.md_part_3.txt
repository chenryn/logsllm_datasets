然后，创建一个`RoleBinding`或`ClusterRoleBinding`对象，将之前创建的`ClusterRole`对象与服务帐户、用户或组相关联:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: use-example-psp-binding
roleRef:
  kind: ClusterRole
  name: use-example-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
# Authorize specific service accounts:
- kind: ServiceAccount
  name: test-sa
  namespace: psp-test
```
前面的`use-example-pspbinding.yaml`文件创建了一个`RoleBinding`对象，将`use-example-psp`集群角色与`psp-test`命名空间中的`test-sa`服务帐户相关联。所有这些设置完成后，服务帐户为`test-sa`的`psp-test`命名空间中的任何工作负载都将通过 PodSecurityPolicy 示例的评估运行。而只有符合要求的才会被集群录取。
从前面的例子中，可以想到在您的 Kubernetes 集群中运行着不同类型的工作负载，它们中的每一个都可能需要不同的权限来访问不同类型的资源。为不同的工作负载创建和管理 pod 安全策略将是一项挑战。现在，让我们来看看`kube-psp-advisor`，看看它如何帮助您创建 pod 安全策略。
## 立方波德 SecurityPolicy Advisor
kubernetes PodSecurityPolicy Advisor(也称为`kube-psp-advisor`)是来自 Sysdig 的开源工具。它扫描集群中正在运行的工作负载的安全属性，然后在此基础上为您的集群或工作负载推荐 pod 安全策略。
首先，让我们安装`kube-psp-advisor`作为`kubectl`插件。如果您还没有安装`kubectl`插件管理工具`krew`，请按照说明(https://github.com/kubernetes-sigs/krew#installation)进行安装。然后，用`krew`安装`kube-psp-advisor`如下:
```
$ kubectl krew install advise-psp
```
然后，您应该能够运行以下命令来验证安装:
```
$ kubectl advise-psp
A way to generate K8s PodSecurityPolicy objects from a live K8s environment or individual K8s objects containing pod specifications
Usage:
  kube-psp-advisor [command]
Available Commands:
  convert     Generate a PodSecurityPolicy from a single K8s Yaml file
  help        Help about any command
  inspect     Inspect a live K8s Environment to generate a PodSecurityPolicy
Flags:
  -h, --help           help for kube-psp-advisor
      --level string   Log level (default "info")
```
要为命名空间中的工作负载生成 pod 安全策略，您可以运行以下命令:
```
$ kubectl advise-psp inspect --grant --namespace psp-test
```
前面的命令为在`psp-test`命名空间内运行的工作负载生成 pod 安全策略。如果工作负载使用默认服务帐户，则不会为其生成 PodSecurityPolicy 策略。这是因为默认服务帐户将被分配给没有与之关联的专用服务帐户的工作负载。您肯定不希望有一个默认服务帐户能够对权限工作负载使用 PodSecurityPolicy。
以下是由`kube-psp-advisor`为`psp-test`命名空间中的工作负载生成的输出示例，包括具有多个 pod 安全策略的单个`YAML`文件中的角色、角色绑定和 pod 安全策略。让我们来看看一个推荐的 PodSecurityPolicy:
```
# Pod security policies will be created for service account 'sa-1' in namespace 'psp-test' with following workloads:
#	Kind: ReplicaSet, Name: busy-rs, Image: busybox
#	Kind: Pod, Name: busy-pod, Image: busybox
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  creationTimestamp: null
  name: psp-for-psp-test-sa-1
spec:
  allowedCapabilities:
  - SYS_ADMIN
  allowedHostPaths:
  - pathPrefix: /usr/bin
    readOnly: true
  fsGroup:
    rule: RunAsAny
  hostIPC: true
  hostNetwork: true
  hostPID: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - configMap
  - secret
  - hostPath
```
以下是`kube-psp-advisor`生成的角色:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: use-psp-by-psp-test:sa-1
  namespace: psp-test
rules:
- apiGroups:
  - policy
  resourceNames:
  - psp-for-psp-test-sa-1
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
```
以下是`kube-psp-advisor`生成的角色绑定:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: use-psp-by-psp-test:sa-1-binding
  namespace: psp-test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: use-psp-by-psp-test:sa-1
subjects:
- kind: ServiceAccount
  name: sa-1
  namespace: psp-test
---
```
上一节是针对`busy-rs`和`busy-pod`工作负载推荐的 PodSecurityPolicy，`psp-for-psp-test-sa-1`，因为这两个工作负载共享同一个服务帐户，`sa-1`。因此，创建`Role`和`RoleBinding`分别是为了使用 Pod 安全策略`psp-for-psp-test-sa-1`。使用`sa-1`服务帐户，基于工作负载的安全属性的聚合来生成 PodSecurityPolicy:
```
---
# Pod security policies will NOT be created for service account 'default' in namespace 'psp-test' with following workdloads:
#	Kind: ReplicationController, Name: busy-rc, Image: busybox
---
```
上一节提到`busy-rc`工作负载使用`default`服务帐户，因此没有为其创建 Pod 安全策略。这提醒您，如果要为工作负载生成 pod 安全策略，请不要使用默认服务帐户。
构建 Kubernetes PodSecurityPolicy 并不简单，尽管如果单个受限的 PodSecurityPolicy 应用于整个集群，并且所有工作负载都遵守该策略，这将是非常理想的。DevOps 工程师需要有创造力，以便在不破坏工作负载功能的情况下构建受限 pod 安全策略。`kube-psp-advisor`使 Kubernetes pod 安全策略的实现变得简单，适应您的应用需求，具体来说，对于 ea ch one 来说是细粒度的，只允许最低访问权限。
# 总结
在这一章中，我们介绍了如何使用 CIS Docker 基准来强化容器映像，然后详细介绍了 Kubernetes 工作负载的安全属性。接下来，我们详细了解了 PodSecurityPolicy，并介绍了`kube-psp-advisor`开源工具，该工具有助于 pod 安全策略的建立。
保护 Kubernetes 工作负载不是一蹴而就的事情。需要从构建、部署和运行时阶段应用安全控制。它从强化容器映像开始，然后以安全的方式配置 Kubernetes 工作负载的安全属性。这发生在构建阶段。为不同的 Kubernetes 工作负载构建自适应 pod 安全策略也很重要。目标是限制大多数工作负载以有限的权限运行，同时只允许少数工作负载以额外的权限运行，并且不破坏工作负载可用性。这发生在运行时阶段。`kube-psp-advisor`能够帮助构建自适应 pod 安全策略。
在下一章中，我们将讨论映像扫描。这对帮助确保 DevOps 工作流中的 Kubernetes 工作负载至关重要。
# 问题
1.  `HEALTHCHECK`在 Dockerfile 中做什么？
2.  为什么在 Dockerfile 中使用`COPY`而不是`ADD`？
3.  如果您的应用不监听任何端口，可以放弃哪些默认功能？
4.  `runAsNonRoot`属性控制什么？
5.  当您创建一个`PodSecurityPolicy`对象时，为了在工作负载上实施 Pod 安全策略，您还需要做什么？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以参考以下链接:
*   欲了解更多关于`kube-psp-advisor`的信息，请访问以下链接:[https://github.com/sysdiglabs/kube-psp-advisor](https://github.com/sysdiglabs/kube-psp-advisor)
*   想了解更多关于 AppArmor 的信息，请访问以下链接:[https://gitlab.com/apparmor/apparmor/-/wikis/Documentation](https://gitlab.com/apparmor/apparmor/-/wikis/Documentation)
*   想了解更多关于贝恩的信息，请访问以下链接:[https://github.com/genuinetools/bane](https://github.com/genuinetools/bane)*