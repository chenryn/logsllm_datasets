# Privacy and Accountability for Location-based Aggregate Statistics

## Authors
- Raluca A. Popa, MIT
- Andrew J. Blumberg, University of Texas, Austin
- Hari Balakrishnan, MIT
- Frank H. Li, MIT

## Abstract
A growing number of location-based mobile applications aggregate position data from individual devices at a server to compute aggregate statistics. Since these devices can be linked to the movement of individuals, there is a significant risk that the aggregate computation will violate the location privacy of individuals. This paper introduces and evaluates PrivStats, a system for computing aggregate statistics over location data that ensures two key properties: (1) provable guarantees on location privacy, even in the presence of any side information known to the server, and (2) privacy-preserving accountability, which protects against abusive clients uploading large amounts of spurious data. PrivStats achieves these properties through a new protocol for anonymously uploading and aggregating data, as well as an efficient zero-knowledge proof of knowledge protocol for accountability. We implemented PrivStats on Nexus One smartphones and commodity servers. Our experimental results show that PrivStats is practical: computing a common aggregate (e.g., count) over the data of 10,000 clients takes less than 0.46 seconds at the server, and the protocol has a modest latency of 0.6 seconds for uploading data from a Nexus phone. We also validated our protocols using real driver traces from the CarTel project.

**Categories and Subject Descriptors:** C.2.0 [Computer Communication Networks]: General—Security and Protection  
**General Terms:** Security

## 1. Introduction
The rise of location-based mobile services and their use in road transportation, participatory sensing, and social mobile crowdsourcing applications has created a fertile area of research and commercial activity. Many of these applications involve mobile nodes (smartphones, in-car devices, etc.) equipped with GPS or other position sensors, which periodically upload time and location coordinates to a server. The server then processes this information to compute various aggregate statistics.

### Motivation
Consider applications that process streams of GPS position and speed samples along vehicle trajectories to determine current traffic statistics such as average speed, average delay on a road segment, or congestion at an intersection. Projects like CarTel and Mobile Millennium, as well as commercial products like TomTom, provide such services. Another example is social mobile crowdsourcing, where the number of people at a restaurant is estimated by aggregating data from position samples provided by participating users' smartphones.

### Privacy Concerns
A significant concern with existing implementations is the violation of user location privacy. Even though the service only needs to compute an aggregate, most implementations continuously record time-location pairs of all clients and deliver them to the server, labeled by client identity. In such a system, the server can piece together all the locations and times belonging to a particular client and obtain the client’s path, thereby violating their location privacy.

Location privacy concerns are important because many users perceive them as significant, and they may threaten personal security. For instance, two users have sued Google over location data collected by Android phones, citing "serious risk of privacy invasions, including stalking." Similarly, Apple faced a lawsuit for keeping logs of user locations without offering a way to disable tracking or delete the log. Users of TomTom, a satellite navigation system, have expressed concern over the fact that TomTom logs user paths and sells aggregate statistics to the police, who install speed cameras. A study by Riley shows that a significant number of drivers in the San Francisco Bay Area avoid installing toll transponders due to privacy concerns. Additionally, online databases are often breached, and detailed records of user mobility can fall into the hands of criminals, who can then attempt security attacks, such as burglarizing homes when residents are away.

### Contributions
In this paper, we design, implement, and evaluate PrivStats, a practical system for computing aggregate statistics in the context of mobile, location-based applications that provides both strong location privacy guarantees and protection against cheating clients. PrivStats addresses two major problems: it provides formal location privacy guarantees against any side information (SI) attacks and ensures client accountability without a trusted party. Compared to previous systems, PrivStats offers the strongest formal privacy and correctness guarantees while making the weakest trust assumptions.

### Side Information
Side information refers to any out-of-bound information the server may have, which, when combined with the data received, can help the server compromise user location privacy. For example, if the server knows that Alice is the only person living on a street, it can infer that Alice just left or arrived at her house when receiving some speed updates from that street. Despite the potential for SI to leak considerable location privacy, previous systems either do not address the problem or only treat specific cases, such as areas of low density.

### Smoothing Module
Our solution involves a lightweight and restricted module, the smoothing module (SM), which helps clients synchronize with respect to the number of tuples uploaded and performs one decryption per aggregate. The SM is distributed among clients, ensuring that only a small fraction of SMs can misbehave. A compromised SM cannot change aggregate results undetectably and cannot collude with clients to corrupt aggregates. The SM is designed to be simple and easy to verify, with only 62 lines of code (excluding libraries) and constant storage per aggregate.

### Privacy-Preserving Accountability
Since clients are anonymous, the problem of accountability becomes serious: malicious clients can significantly affect the correctness of the aggregate results. Previous systems that provide verification place this task on heavily loaded trusted parties, which, when compromised, can release full location paths and corrupt aggregate results. Our second contribution is a privacy-preserving accountability protocol without any trusted parties. At the core of the protocol is an efficient zero-knowledge proof of knowledge (ZKPoK) that we designed from scratch. The zero-knowledge property is key in maintaining the anonymity of clients.

### Implementation
Finally, we implemented the overall system on Nexus One smartphones and commodity servers. Computing a common aggregate (e.g., count) over the data of 10,000 clients takes less than 0.46 seconds at the server, and the protocol has a modest latency of about 0.6 seconds to upload data from a Nexus phone. The throughput is linearly scalable with the number of processing cores. We validated that our protocols introduce little or no error in statistics computation using real driver traces from the CarTel project.

## 2. Model

### 2.1 Setting
In our model, we have many clients, a server, and a smoothing module (SM). Clients are mobile nodes equipped with smartphones, such as drivers in a vehicular network or peers in a social crowdsourcing application. The server is an entity interested in computing certain aggregate statistics over data from clients. The SM is a third party involved in the protocol that is distributed among clients.

We assume that clients communicate with the server and the SM using an anonymization network (e.g., Tor) or other anonymizing protocols to ensure that privacy is not compromised by the underlying networking protocol. We assume these systems succeed in hiding the origin of a packet from an adversary and hide network travel time; otherwise, clients must introduce an appropriate delay so that all communications have roughly the same round trip times.

Clients can choose which aggregates they want to participate in and can opt-out if the result is deemed too revealing. A sample is a client’s contribution to an aggregate, such as average speed, delay on a road, or a bit indicating presence in a certain restaurant. Clients can generate samples periodically or at certain location/times. A sample point is a pair consisting of a location and a time interval where/when clients should generate a sample. An aggregate to be computed consists of a sample point and the type of data clients should sample. Each aggregate has an identifier, and the mapping between identifiers and aggregates is publicly known. Clients generate tuples of the form (id, sample), meaning that their sample for aggregate id is sample. To preserve privacy, clients in PrivStats will transform these tuples (e.g., encrypt and add cryptographic tokens) and use a certain upload strategy to upload the transformed tuples to the server. Note that clients are not uploading their identity with the tuples, unlike in some existing systems.

### 2.2 Threat Model
[Continue with the threat model and other sections as needed]