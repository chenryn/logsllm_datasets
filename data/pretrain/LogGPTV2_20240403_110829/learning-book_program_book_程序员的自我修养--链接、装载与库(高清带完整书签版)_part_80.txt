13.3.2C++全局构造与析构
C++全局构造与析构的实现是有些特殊的，它与编译器、链接器的关系比较紧密。正如
已经在第10章中所描述的一样，它们的实现是依赖于编译器、链接器和运行库三者共同的
支持和协作的。MiniCRT对于全局对象构造与析构的实现也是基于第10章中描述的Glibc
和MSVCCRT的，本质上没有多大的区别，仅仅是将它们简化到最简程度，保留本质而去
除了一些繁的细节。
通过第10章的分析我们可以得知，C++全局构造和析构的实现在Glibc和MSVCCRT
中的原理十分相似，构造函数主要实现的是依靠特珠的段合并后形成构造函数数组，面析构
则依赖于alexitO函数。这一节中将主要关注全局构造的实现。而把atexitO的实现留到下一
节中
全局构造对于MSVC来说，主要实现两个段“.CRTSXCA”和“.CRT$XCZ”，然后定
文两个函数指针分别指向它们：而对于GCC来说，须要定义“ctor”段的起始部分和结束
程序员的自我修养一链接、装载与库
---
## Page 461
438
第13章运行库实就
部分，然后定义两个函数指针分别指向它们。真正的构造部分则只要由一个循环将这两个函
数指针指向的所有函数都调用一遍即可。
MSVC CRT与Glibc在实现上稍有不同的是，MSVCCRT只需要一个目标文件就可以
实现全局构造，编译器会按照段名将所有的输入段排序：而Glibc需要两个文件：ctrbegin.o
和crtend.o，这两个文件在编译时必须位于输入文件的开始和结尾部分，所有在这两个文件
之外的输入文件中的”ctor“段就不会被正确地合并，全局构造和析构的实现代码如清单13-9
所示。
清单13-9ctors.cpp
// ctore.cpp
typedef void
(*init_func) (void);
#pragma sect ion (* .CRTSxCA*, 1ong, read)
#ifdef wIN32
pragma section (* ,CRTSXCz*, 1ong, read)
declapec(allocate(*.cRTsxcz*)) init_fune ctors_end[1 = ( 0 }:
extern *C* void do_global_ctors()
init_func* p = ctors_begin;
while ( p func = func;
i5ze = Bxeis_cxa = is_cxa;
node->next = atexit_list;
atexit_list = node;
return 0;
#ifndef WIN32
程序员的自我修养—链接、装载与库
---
## Page 464
13.3C++运行库实现
441
typedef void (*cxa_func_t )( void* 1:
int _cxa_atexit (cxa_func_t func, void* arg, void* unused)
1
return register_atexit ( (atexit_func_t) func, arg, 1) :
fendif
int atexit (atexit_func_t func)
return register_atexit (func, 0, 0) :
void mini_crt_cal1_exit_routine(1
func_node* p = atexit_list;
for(; p 1= 0: p = p->next)
#ifdef wIN32
#else
p->func (} ;
if (p->is_cxa)
: (5.xefunc(1:
free (p);
endif
atexit_1ist = 0;
+
F
值得一提的是，在注册函数时，被注册的函数是插入到列表头部的，而最后
mini_crt_call_exit_routine(是从头部开始遍历的，于是由atexit(或_cxa_atexitO注册的函数
是按照先注册后调用的顺序，这符合析构函数的规则，因为先构造的全局对象应该后析构。
13.3.4入口函数修改
由于增加了全局构造和析构的支持，那么需要对Mini CRT的入口函数和exitO函数进行
修改，把对 do_global_ctorsO和 mini_cr_call_exit_routineO的调用加入到entry0和exit0函数
中去。修改后的entry.c如下（省略一部分未修改的内容）：
//entry.c
void mini_crt_entry (void)
if (!mini_crt_heap_init (1)
crt_fatal_error (*heap initialize failed*);
if (imini_crt_io_init ())
crt_fatal_error(*Io initialize failed*):
do_global_ctors();
程序员的自我修养——链接、装载与库
---
## Page 465
442
第13章运行库实现
ret - nain (argc,argv) ;
exit (ret) ;
void exit (int exitCode)
ifdef WIN32
mini_crt_call_exit_routine();
ExitProcess(exitCode) :
#else
a8n(*mov1￥0, $$ebx1n\t*
*nov1 $1,#teax \n\t*
*int s0x80-
hlt
\n\t*
endi f
\n\t*::*n* (exitCode) 1 :
F
13.3.5stream与 string
C++的Hello World里面一般都会用到cout 和 string，以展示C++的特性。流和字符串是
C++STL的最基本的两个部分，我们在这一节中为Mini CRT增加string和stream的实现，
在有了流和字符串之后，Mini CRT将最终宣告完成，可以考虑将它重命名为MiniCRT++。
当然，在真正的STL实现中，string和stream的实现十分复杂，不仅有强大的模板定制
功能、缓冲，庞大的继承体系及一系列辅助类。我们在实现时还是以展示和剖析为最基本的
目的，简化一切能够简化的内容。string和stream的实现将遵循下列原则。
·不支持模板定制，即这两个类仅支持char字符串类型，不支持自定义分配器等，没有
basic_string 模板类。
流对象仅实现ofstream，且没有继承体系，即没有ios_base、stream、ostream、fstream
等类似的相关类。
流对象没有内置的缓冲功能，即没有stream_buffer类支持。
cout 作为ofstream 的一个实例，它的输出文件是标准输出。
stream和string类的实现用到了不少C++语言的特性，已经一定程度上偏离了本书所要
描述的主题，因此在此仅将它们的实现源代码列出，而不做更多的详细分析，有兴趣的读者
可以参考C++STL的相关实现的资料，如果对C++语言本身不熟悉，也可以跳过这一节，
这并不影响对Mini CRT整体实现的理解。string和 iostream的实现如清单13-13、清单13-14、
清单13-15所示。
清单13-13string
//string
)pxs aoedsaueu
程序员的自我修养一链接、装载与库
---
## Page 466
13.3C++运行库实现
443
class string
unsigned len:
char* pbuf;
pub1ic:
explicit string(const char* str);
string(const string&)1
string& operator=(const string6);
-string (1 :
string& operator=(const char* s) ;
const char& operator[] (unsigned idx) const:
const char* c_str(1 const;
char& operator [] (unsigned idx) :
unsigned length() const;
unsigned size() const;
{
string::string(const char* str) 1
1en (0), pbuf (0)
*this = str:
string::string(conet string& s) :
len(0)。 pbuf (0)
*this = s;
string::-string()
if (pbuf 1= 0)(