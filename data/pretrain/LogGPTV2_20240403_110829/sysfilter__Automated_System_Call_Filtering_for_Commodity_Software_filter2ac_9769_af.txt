050001000015000200002500030000Binary50100150200SyscallCountDCG∪ACGVCGDCGAcknowledgments
We thank our shepherd, Aravind Prakash, and the anonymous
reviewers for their valuable feedback. This work was sup-
ported by the Ofﬁce of Naval Research (ONR) and the De-
fense Advanced Research Projects Agency (DARPA) through
awards N00014-17-1-2788 and HR001118C0017. Any opin-
ions, ﬁndings, and conclusions or recommendations expressed
herein are those of the authors and do not necessarily reﬂect
the views of the US government, ONR, or DARPA.
References
[1] Ioannis Agadakos, Di Jin, David Williams-King, Vasileios P. Kemerlis,
and Georgios Portokalidis. Nibbler: Debloating Binary Shared Li-
braries. In Annual Computer Security Applications Conference (AC-
SAC), pages 70–83, 2019.
[2] Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman.
Compilers: Principles, Techniques, and Tools. Pearson Education, 2nd
edition, 2006.
[3] Jim Alves-Foss and Jia Song. Function Boundary Detection in Stripped
Binaries. In Annual Computer Security Applications Conference (AC-
SAC), pages 84–96, 2019.
[4] Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and
Herbert Bos. An In-Depth Analysis of Disassembly on Full-Scale
x86/x64 Binaries. In USENIX Security Symposium (SEC), pages 583–
600, 2016.
[5] Dennis Andriesse, Asia Slowinska, and Herbert Bos. Compiler-agnostic
Function Detection in Binaries. In IEEE European Symposium on
Security and Privacy (EuroS&P), pages 177–189, 2017.
[6] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David
Brumley. BYTEWEIGHT: Learning to Recognize Functions in Binary
Code. In USENIX Security Symposium (SEC), pages 845–860, 2014.
[7] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and
Dan Boneh. Hacking Blind. In IEEE Symposium on Security and
Privacy (S&P), pages 227–242, 2014.
[8] Chromium Blog.
chrome os renderers.
a-safer-playground-for-your-linux-and.html.
A safer playground for your linux and
https://blog.chromium.org/2012/11/
[9] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael Franz,
Stefan Brunthaler, and Mathias Payer. Control-Flow Integrity: Preci-
sion, Security, and Performance. ACM Computing Surveys (CSUR),
50(1):1–33, 2017.
[10] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza
Sadeghi, Hovav Shacham, and Marcel Winandy. Return-Oriented Pro-
gramming without Returns. In ACM SIGSAC Conference on Computer
and Communications Security (CCS), pages 559–572, 2010.
[11] Jonathan Corbet. BPF: the universal in-kernel virtual machine. https:
//lwn.net/Articles/599755/.
[12] Gabriel Corona. The ELF ﬁle format. https://www.gabriel.urdhr.
fr/2015/09/28/elf-file-format/.
[13] Solar Designer. Getting around non-executable stack (and ﬁx). https:
//seclists.org/bugtraq/1997/Aug/63.
[14] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer.
RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and
In IEEE Symposium on Security and Privacy (S&P),
Sanitization.
pages 128–142, 2020.
[15] Docker Documentation. Seccomp Security Proﬁles for Docker. https:
//docs.docker.com/engine/security/seccomp/.
[16] Common Weakness Enumeration. CWE-123: Write-what-where Con-
dition. https://cwe.mitre.org/data/definitions/123.html.
[17] Tal Garﬁnkel. Traps and Pitfalls: Practical Problems in System Call
Interposition Based Security Tools. In Network and Distributed System
Security Symposium (NDSS), pages 163–176, 2003.
[18] Tal Garﬁnkel, Ben Pfaff, and Mendel Rosenblum. Ostia: A Delegating
Architecture for Secure System Call Interposition. In Network and
Distributed System Security Symposium (NDSS), 2004.
[19] Jason Geffner. VENOM: Virtualized Environment Neglected Opera-
tions Manipulation. http://venom.crowdstrike.com.
[20] Seyedhamed Ghavamnia, Tapti Palit, Azzedine Benameur, and Michalis
Polychronakis. Conﬁne: Automated System Call Policy Generation for
Container Attack Surface Reduction. In International Symposium on
Research in Attacks, Intrusions and Defenses (RAID), 2020.
[21] Daniel B Gifﬁn, Amit Levy, Deian Stefan, David Terei, David Mazières,
John C Mitchell, and Alejandro Russo. Hails: Protecting Data Privacy
in Untrusted Web Applications. In USENIX Symposium on Operating
Systems Design and Implementation (OSDI), pages 47–60, 2012.
[22] Jonathon T. Gifﬁn, Somesh Jha, and Barton P. Miller. Detecting Manip-
ulated Remote Call Streams. In USENIX Security Symposium (SEC),
pages 61–79, 2002.
[23] Will Glozer. wrk – a HTTP benchmarking tool. https://github.
com/wg/wrk.
[24] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Por-
tokalidis. Out Of Control: Overcoming Control-Flow Integrity. In IEEE
Symposium on Security and Privacy (S&P), pages 575–589, 2014.
[25] Google Project Zero. speculative execution, variant 4: speculative store
bypass. https://bugs.chromium.org/p/project-zero/issues/
detail?id=1528.
[26] LLVM Developer Group. The LLVM Compiler Infrastructure. https:
//llvm.org.
[27] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. Ef-
In ACM
fective Program Debloating via Reinforcement Learning.
SIGSAC Conference on Computer and Communications Security (CCS),
pages 380–394, 2018.
[28] Gerard J. Holzmann. Code Inﬂation. IEEE Software, (2):10–13, 2015.
[29] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek
Saxena, and Zhenkai Liang. Data-Oriented Programming: On the
Expressiveness of Non-Control Data Attacks. In IEEE Symposium on
Security and Privacy (S&P), pages 969–986, 2016.
[30] Intel.
System V Application Binary Interface.
https:
//software.intel.com/sites/default/files/article/
402129/mpx-linux64-abi.pdf.
[31] GNU Compiler Collection
Attributes.
Function
mon
onlinedocs/gcc/Common-Function-Attributes.html#
Common-Function-Attributes.
(GCC)
Internals.
Com-
https://gcc.gnu.org/
[32] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias
Payer. Block Oriented Programming: Automating Data-Only Attacks.
In ACM SIGSAC Conference on Computer and Communications Secu-
rity (CCS), pages 1868–1882, 2018.
[33] Vasileios P. Kemerlis. Protecting Commodity Operating Systems
through Strong Kernel Isolation. PhD thesis, Columbia University,
2015.
[34] Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D.
Keromytis. ret2dir: Rethinking Kernel Isolation. In USENIX Security
Symposium (SEC), pages 957–972, 2014.
[35] Vasileios P. Kemerlis, Georgios Portokalidis, and Angelos D.
Keromytis. kGuard: Lightweight Kernel Protection against Return-to-
user attacks. In USENIX Security Symposium (SEC), pages 459–474,
2012.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    471
[36] The Linux Kernel.
Seccomp BPF (SECure COMPuting
https://www.kernel.org/doc/html/latest/
with ﬁlters).
userspace-api/seccomp_filter.html.
[37] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss,
Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Ex-
ploiting Speculative Execution. In IEEE Symposium on Security and
Privacy (S&P), pages 1–19, 2019.
[38] Hyungjoon Koo, Yaohui Chen, Long Lu, Vasileios P. Kemerlis, and
Michalis Polychronakis. Compiler-assisted Code Randomization. In
IEEE Symposium on Security and Privacy (S&P), pages 461–477, 2018.
[39] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis.
Conﬁguration-Driven Software Debloating. In European Workshop on
Systems Security (EuroSec), pages 1–6, 2019.
[40] Volodymyr Kuznetzov, László Szekeres, Mathias Payer, George Can-
dea, R. Sekar, and Dawn Song. Code-Pointer Integrity. In USENIX
Symposium on Operating Systems Design and Implementation (OSDI),
pages 147–163. 2014.
[41] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz.
SoK: Automated Software Diversity. In IEEE Symposium on Security
and Privacy (S&P), pages 276–291, 2014.
[42] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Sheneﬁel, Rui Ma, Yuewu
Wang, and Qi Li. Speaker: Split-Phase Execution of Application Con-
tainers. In International Conference on Detection of Intrusions and Mal-
ware, and Vulnerability Assessment (DIMVA), pages 230–251, 2017.
[43] Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, and Justin Cappos. Lock-
in-Pop: Securing Privileged Operating System Kernels by Keeping on
In USENIX Annual Technical Conference (ATC),
the Beaten Path.
pages 1–13, 2017.
[44] Percy Liang and Mayur Naik. Scaling Abstraction Reﬁnement via
Pruning. In ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), pages 590–601, 2011.
[45] The GNU C Library.
System Databases and Name Service
https://www.gnu.org/software/libc/manual/html_
Switch.
node/Name-Service-Switch.html.
[46] Linux Programmer’s Manual. bpf – perform a command on an extended
BPF map or program. http://man7.org/linux/man-pages/man2/
bpf.2.html.
[47] Linux Programmer’s Manual. seccomp – operate on Secure Computing
state of the process. http://man7.org/linux/man-pages/man2/
seccomp.2.html.
[48] Linux Programmer’s Manual. syscall – indirect system call. http:
//man7.org/linux/man-pages/man2/syscall.2.html.
[49] Generic Part Linux Standard Base Core Speciﬁcation.
Excep-
https://refspecs.linuxbase.org/LSB_5.0.0/
tion Frames.
LSB-Core-generic/LSB-Core-generic/ehframechpt.html.
[50] H. J. Lu and Mike Frysinger. x32 System V Application Binary
Interface. https://sites.google.com/site/x32abi/.
[51] Federico Maggi, Matteo Matteucci, and Stefano Zanero. Detecting In-
trusions through System Call Sequence and Argument Analysis. IEEE
Transactions on Dependable and Secure Computing (TDSC), 7(4):381–
395, 2008.
[52] Linux Programmer’s Manual. syscalls – Linux system calls. http:
//man7.org/linux/man-pages/man2/syscalls.2.html.
[53] Ali Jose Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières.
CCFI: Cryptographically Enforced Control Flow Integrity. In ACM
SIGSAC Conference on Computer and Communications Security (CCS),
pages 941–951, 2015.
[55] Shachee Mishra and Michalis Polychronakis. Shredder: Breaking
Exploits through API Specialization. In Annual Computer Security
Applications Conference (ACSAC), pages 1–16, 2018.
[56] Scott Moore, Christos Dimoulas, Dan King, and Stephen Chong.
SHILL: A Secure Shell Scripting Language. In USENIX Symposium on
Operating Systems Design and Implementation (OSDI), pages 183–199,
2014.
[57] MozillaWiki. Security/Sandbox/Seccomp. https://wiki.mozilla.
org/Security/Sandbox/Seccomp.
[58] Darren Mutz, Fredrik Valeur, Giovanni Vigna, and Christopher Kruegel.
Anomalous System Call Detection. ACM Transactions on Information
and System Security (TISSEC), pages 61–93, 2006.
[59] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve
Zdancewic. SoftBound: Highly Compatible and Complete Spatial
Memory Safety for C. In ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), pages 245–258, 2009.
[60] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve
Zdancewic. CETS: Compiler Enforced Temporal Safety for C. In ACM
SIGPLAN International Symposium on Memory Management (ISMM),
pages 31–40, 2010.
[61] NixOS. patchelf – A small utility to modify the dynamic linker
https://github.com/NixOS/
and RPATH of ELF executables.
patchelf.
[62] A. Jefferson Offutt and J. Huffman Hayes. A Semantic Model of
Program Faults. ACM SIGSOFT Software Engineering Notes (SEN),
21(3):195–200, 1996.
[63] OpenSSH.
Release Notes.
release-6.0.
https://www.openssh.com/txt/
[64] Oracle Solaris, Linker and Libraries Guide. Position-Independent
Code. https://docs.oracle.com/cd/E26505_01/html/E26506/
glmqp.html.
[65] Marios Pomonis, Theoﬁlos Petsios, Angelos D. Keromytis, Michalis
Polychronakis, and Vasileios P. Kemerlis. kRˆX: Comprehensive Ker-
nel Protection against Just-In-Time Code Reuse. In European Confer-
ence on Computer Systems (EuroSys), pages 420–436, 2017.
[66] Marios Pomonis, Theoﬁlos Petsios, Angelos D. Keromytis, Michalis
Polychronakis, and Vasileios P. Kemerlis. Kernel Protection against
Just-In-Time Code Reuse. ACM Transactions on Privacy and Security
(TOPS), 22(1):1–28, 2019.
[67] GNU Project. The GNU Compiler Collection. https://gcc.gnu.
org.
[68] Sergej Proskurin, Marius Momeu, Seyedhamed Ghavamnia, Vasileios P.
Kemerlis, and Michalis Polychronakis. xMP: Selective Memory Pro-
tection for Kernel and User Space. In IEEE Symposium on Security
and Privacy (S&P), pages 584–598, 2020.
[69] Niels Provos. Improving Host Security with System Call Policies. In
USENIX Security Symposium (SEC), pages 257–272, 2003.
[70] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo
Kim, and Wenke Lee. RAZOR: A Framework for Post-deployment
Software Debloating. In USENIX Security Symposium (SEC), pages
1733–1750, 2019.
[71] Anh Quach, Aravind Prakash, and Lok Yan. Debloating Software
through Piece-Wise Compilation and Loading. In USENIX Security
Symposium (SEC), pages 869–886, 2018.
[72] Ganesan Ramalingam. The Undecidability of Aliasing. ACM Transac-
tions on Programming Languages and Systems (TOPLAS), 16(5):1467–
1471, 1994.
[54] Steven McCanne and Van Jacobson. The BSD Packet Filter: A New
Architecture for User-level Packet Capture. In USENIX Winter Confer-
ence, pages 259–270, 1993.
[73] Redis Labs. NoSQL Redis and Memcache trafﬁc generation and
benchmarking tool. https://github.com/RedisLabs/memtier_
benchmark.
472    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[74] John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison,
and Xuejun Yang. Test-Case Deduction for C Compiler Bugs.
In
ACM SIGPLAN conference on Programming Language Design and
Implementation (PLDI), pages 335–346, 2012.
[91] Richard Wartell, Yan Zhou, Kevin W. Hamlen, Murat Kantarcioglu,
and Bhavani Thuraisingham. Differentiating Code from Data in x86 Bi-
naries. In European Conference on Machine Learning and Knowledge
Discovery in Databases (ECML-PKDD), pages 522–536, 2011.