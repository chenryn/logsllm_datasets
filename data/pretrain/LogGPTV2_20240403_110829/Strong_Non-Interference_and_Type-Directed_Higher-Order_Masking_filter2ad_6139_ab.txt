ing. SNI reinforces probing security by requiring that the number of input shares on
which the distribution of a given position set may depend be determined only by the
number of internal positions present in that set. For example, consider again position
set O = (cid:104)c0,1, c2,2(cid:105) in RefreshM2, and note that it contains only one internal position
(c0,1). We have seen that the joint distribution(cid:74)RefreshM2(cid:75)O of that position set syn-
(cid:74)RefreshM2(cid:75)O(a) = (cid:104)$0, (a2 (cid:9) $1) (cid:9) $2(cid:105) (since the ring addition ⊕ is a bijection of
tactically depends on two shares of a. However, it can be equivalently expressed as
each of its arguments and $0 is a fresh and uniform ring element). This shows that the
distribution in fact depends on at most one share of a (here a2). In fact, it can be shown
that RefreshM2 is 2-SNI. More generally, surprisingly many gadgets from the literature
achieve SNI.
However, and not unexpectedly, some gadgets from the literature do not satisfy SNI.
Consider for instance RefreshA2 (Gadget 2). It is easy to see that the gadget is 2-NI
(each position cı, depends only on input share aı, and each position ri is completely
independent from the input encoding). Still, looking at position set O(cid:48) = (cid:104)c0,1, c1,1(cid:105),
which is composed of one internal position and one external one, we see that the
(cid:52)
= (cid:104)a0 ⊕ $0, a1 ⊕ $0(cid:105) does depend on more than one share
distribution(cid:74)RefreshA2(cid:75)O(cid:48)
of a. RefreshA2 is therefore not 2-SNI.
Gadget 2 NI Mask Refreshing with t = 2
function RefreshA2(a)
c0,0 ← a0; c1,0 ← a1; c2,0 ← a2;
r0
r1
return (cid:104)c0,2, c1,1, c2,1(cid:105)
$← K; c0,1 ← c0,0 ⊕ r0; c1,1 ← c1,0 (cid:9) r0;
$← K; c0,2 ← c0,1 ⊕ r1; c2,1 ← c2,0 (cid:9) r1;
Compositional Probing Security This small difference between NI and SNI has a
signiﬁcant effect on security when used in larger circuits. Indeed, the output positions
of a strongly non-interfering gadgets do not depend on any of its input positions: when
considered independently from internal positions (in the absence of internal probes), their
distribution is uniform; and in the presence of internal probes, their joint distribution is
entirely determined by that of the probed internal positions. This is essential in supporting
compositional reasoning about the probing security of larger algorithms. In particular,
this makes algorithms of the form shown in Algorithm 3 (for some gadgets R and G of
the appropriate types that work on 2-encodings) easy to prove t-NI if R is RefreshM2,
and illustrates why composition might fail if R is instantiated with RefreshA2. A key
observation to make is that an adversary that observes 2 positions internal to G may learn
2 shares of both a and b. If R is instantiated with RefreshA2 (and is thus only 2-probing
secure), the 2 shares of b can be used to infer information about 2 further shares of a,
which may give the adversary full knowledge of all 3 shares of a. On the other hand, if
R is instantiated with RefreshM2 (and is thus 2-SNI), the adversary’s knowledge of 2
shares of b does not propagate any further back to a, and the algorithm remains secure.
Alg. 3 An abstract algorithm
function Alg2(a)
b := R(a);
c := G(a, b);
return c
Broader uses of SNI The notion of strong non-interference, and the masking transforma-
tion we deﬁne here have already found applications in follow-up work. Bela¨ıd et al. [8]
prove using our compositional techniques that their new non-interfering multiplication
can be securely combined with the strongly non-interfering one of Rivain and Prouff [31]
to build a strongly non-interfering AES S-box with reduced randomness complexity.
Similarly, Goudarzi and Rivain [23] use our method to ensure the compositional security
of their bitsliced software implementation of AES. Battistelo et al. [6] use and prove
t-SNI for their O(n · log n) mask refreshing gadget, allowing further randomness com-
plexity reductions without loss of probing security. Coron et al. [16] use and prove t-SNI
for their efﬁcient parallel algorithms for the evaluation of SBoxes.
Outline The rest of the paper is organized as follows. Section 3 formalizes our two-tier
language for masked gadgets and algorithms, the notion of position, and their seman-
tics, as well as the joint distribution of a set of positions. Sections 4, and 5 formalize
probing security as t-non-interference, and formally deﬁne our new notion of t-strong-
non-interference before illustrating it more generally with simple examples. In Section 6,
we deﬁne a language to describe probing policies, and deﬁne a simple type system
for enforcing probing policies of algorithms, formalizing and generalizing the simple
compositional arguments outlined here. In Section 7, we present an automated method to
verify the strong non-interference of arbitrary gadgets at small ﬁxed orders, that follows
the approach used above in arguing that RefreshM2 is 2-SNI, and adapts algorithms by
Barthe et al. [4] to reduce the number of position sets to consider. In Section 8, we extend
our type system into a masking transformation which automatically builds a masked algo-
rithm from an unprotected program, carefully choosing the proper locations for strongly
non-interfering refreshing gadgets. We evaluate on full cryptographic algorithms the
performance of the type system, of the resulting transformation, and of the transformed
algorithms. Section 9 discusses related work on leakage models, composition for probing
security, and other masking transformations. We interleave discussions of interesting
leads for future work.
3 Masked algorithms
The formal development of this paper is based on a minimalist 2-tier language.10 The
lower tier models gagdets as sequences of probabilistic and (three-address code) deter-
10 However, the veriﬁcation tool supports richer settings to which the theory extends smoothly
and our examples are written in a more general language, closer to our implementation, that
supports static for loops, direct assignments to shares (aı ← e), arbitrary expressions on the
right-hand side of assignments, and a broader return syntax. For example, Gadget 4 shows
generic descriptions of the mask refreshing algorithms from Section 2.
algorithm P (a1, . . . , an) ::= s; return a
alg. body
s ::= b :=(cid:96) G(a1, . . . , an) gadget call.
| s; s
call seq.
G(a1, . . . , an) ::= c; return #»x
gadget
gadget body c ::= x $← K
| x ← e
| c; c
expressions e ::= x, y, . . .
| aı
| x (cid:63) y
prob. assign.
det. assign.
assign. seq.
variable
ıth-share of a
ring operation
Fig. 1: Syntax of masked algorithms
ministic assignments, whereas the upper tier models algorithms as sequences of gadget
calls (we assume that each gadget call is tagged with its instruction number (cid:96) ∈ N). The
formal deﬁnition of the language is given in Figure 1, where we use vector notations ( #»x ,
. . . ) to denote (t + 1)-tuples of scalar variables, ı to denote indices (such that 0 ≤ ı ≤ t)
in such a tuple or in encoding variables, and exponents ·ı to denote the projection of
a component out of a (t + 1)-tuple (for example aı, or #»x ı). We require gadgets and
algorithms to be well-formed, in the following sense. A gadget G is well-formed if
its body is in SSA form, i.e. its scalar variables appear at most once on the left-hand
side of an assignment. An algorithm P is well-formed if all its gadgets are deﬁned and
well-formed, and if, in all gadget calls b := G(a1, . . . , an), variables b, a1, . . . , ak are
pairwise disjoint.
We now turn to the semantics of gadgets and algorithms. Crucially, the semantics
of gadgets and algorithms is instrumented to keep track of the joint distribution of all
intermediate values computed during execution. Formally, we assume that scalar and
encoding variables take values in K and Kt+1, where K is the carrier set of a ﬁnite ring
(K, 0, 1,⊕,(cid:9),(cid:12)). We let Val = Kt+1 denote the set of encoded values. Furthermore,
we let A denote the set of encoding variables and deﬁne the set of global memories
as Mem = A → Kt+1. Likewise, we let V denote the set of scalar variables and
deﬁne the set of local memories as LMem = V (cid:42) K and extended local memories as
ELMem = (N×V) (cid:42) K. Then, the semantics of a gagdet G is a function(cid:74)G(cid:75) that takes
values. Likewise, the semantics of an algorithm P is a function(cid:74)P(cid:75) that takes as input a
as input a global memory and returns a distribution over pairs of local memories and
global memory and returns a distribution over extended local memories and values. The
semantics is outlined in Figure 2.
In order to deﬁne probing security, we ﬁrst deﬁne a notion of position that corre-
sponds to the intuition illustrated in Section 2. First, we deﬁne the set I (cid:52)
= {aı | a ∈
A, 0 ≤ ı ≤ t} of input positions (these correspond to shares of encodings used in the
gadget or algorithm), the set O (cid:52)
= I ∪ V of positions (composed of input positions and
scalara variables) and the set O+ (cid:52)
= I ∪ (N × V) of extended positions (where scalar
variables are tagged with a label in N to differentiate between uses of a variable in
different gadgets). The input positions of a gadget G and of an algorithm P are denoted
by IG and IP respectively and contain exactly those elements of I that correspond to
encoding variables that occur in G or P . Likewise, the set of positions of a gadget G and
of an algorithm P are denoted by OG ⊆ O and OP ⊆ O+ respectively and consist of all
positions that occur in a gadget G, and all extended positions that occur in an algorithm
P .
To capture the joint distribution of a set of positions O in a gadget G or an algorithm
P (with O ⊆ OG, resp. O ⊆ OP ), we take the marginal of the gadget or algorithm’s
semantics with respect to O. These are denoted by(cid:74)G(cid:75)O : Mem → D(O → K) and
(cid:74)P(cid:75)O : Mem → D(O → K) respectively.11
with m ∈ Mem and lm ∈ LMem
with m ∈ Mem and lm ∈ LMem
(cid:74)e(cid:75)(m, lm) : K
(cid:74)x(cid:75)(m, lm) = lm(x)
(cid:74)aı(cid:75)(m, lm) = m(a)ı
(cid:74)x (cid:63) y(cid:75)(m, lm) = lm(x) (cid:63) lm(y)
(cid:74)c(cid:75)(m, lm) : D(Mem × LMem)
(cid:74)x ← e(cid:75)(m, lm) = munit(m, lm{x ←(cid:74)e(cid:75)(m, lm)})
(cid:74)x $← K(cid:75)(m, lm) = mlet v = UK in munit(m, lm{x ← v})
(cid:74)c1; c2(cid:75)(m, lm) = mlet (m1, lm1) =(cid:74)c1(cid:75)(m, lm) in(cid:74)c2(cid:75)(m1, lm1)
(cid:74)G(cid:75)(m) : D(LMem × Val)
(cid:74)G(cid:75)(m) = mlet (m1, lm1) =(cid:74)c(cid:75)(m,∅) in munit(lm1, lm1( #»x ))
(cid:74)s(cid:75)(m, elm) : D(Mem × ELMem)
with m ∈ Mem and
G(a1, . . . , an) ::= c; return #»x
with m ∈ Mem, elm ∈ ELMem and
G(a1, . . . , an) ::= c; return #»x
in munit(m{b ← v}, elm (cid:93) elm1)
(cid:74)b :=(cid:96) G(c1, . . . , cn)(cid:75)(m, elm) = mlet (lm1, v) =(cid:74)G(cid:75)(m{(ai)1≤i≤n ← (m(ci))1≤i≤n})
(cid:74)s1; s2(cid:75)(m, elm) = mlet (m1, elm1) =(cid:74)s1(cid:75)(m, elm) in(cid:74)s2(cid:75)(m1, elm1)
(cid:74)P(cid:75)(m) : D(ELMem × Val)
(cid:74)P(cid:75)(m) = mlet (m1, elm1) =(cid:74)s(cid:75)(m,∅) in munit(elm1, m1(b))
where elm1 is the map that sets only
elm1((cid:96), v) = lm(v) for all v ∈ dom(lm)
with m ∈ Mem and P (a1, . . . , an ::= s; return b
where m{x1, . . . , xn ← v1, . . . , vn} denotes the map m where xi is updated with vi for each i
in increasing order, and (cid:93) denotes the disjoint union of partial maps.
Fig. 2: Semantics of gadgets and algorithms
11 In order to justify that the marginals have the required type, observe that one can reﬁne the type
of(cid:74)G(cid:75) given in Figure 2 to Mem → D(Val × (OG → K)). Similarly, one can reﬁne the type
of(cid:74)P(cid:75) to Mem → D(Val × (OP → K)) .
4 Baseline probing security
interfering (or (I,O)-NI), iff (cid:74)G(cid:75)O(m) = (cid:74)G(cid:75)O(m(cid:48)) for every m, m(cid:48) ∈ Mem s.t.
depsetG(O) =(cid:84){ I | G is (I,O)-NI }; thus, depsetG(O) is the smallest set I ⊆ IG
We ﬁrst review the basic notion of probabilistic non-interference and state some of its
key properties. As usual, we start by introducing a notion of equivalence on memories.
Deﬁnition 1 Let G be a gadget, and let I ⊆ IG. Two memories m, m(cid:48) ∈ Mem are
I-equivalent, written m ∼I m(cid:48), whenever m(a)ı = m(cid:48)(a)ı for every aı ∈ I.
Next, we deﬁne probabilistic non-interference.
Deﬁnition 2 Let G be a gadget, and let I ⊆ IG and O ⊆ OG. G is (I,O)-non-
m ∼I m(cid:48).
For every gadget G and every position set O, we deﬁne the dependency set of O as
such that G is (I,O)-NI.
Lemma 1 Let G be a gadget and O ⊆ OG be a set of positions in G. G is (depsetG(O),O)-
NI.
Proof (sketch). It sufﬁces to show that there exists I such that G is (I,O)-NI and that
for every I and I(cid:48), if G is (I,O)-NI and (I(cid:48),O)-NI, then it is also (I ∩ I(cid:48),O)-NI. (cid:117)(cid:116)
We conclude this section by providing an alternative deﬁnition of non-interference, in
the style of simulation-based security.
Lemma 2 A gadget G is (I,O)-NI iff there exists a simulator Sim ∈ (I → K) →
D(O → K) such that for every m ∈ Mem,
(cid:74)G(cid:75)O(m) = Sim(m|I)
let S be(cid:74)G(cid:75)O(m(cid:48)), where m(cid:48) is any memory that extends m. It is immediate to check
where m|I is the restriction of m to elements in I.
Proof. For the direct implication, deﬁne S as follows: given a function m ∈ I → K, we
that S satisﬁes the expected property. The reverse direction is immediate.
This observation is useful to connect the information-ﬂow based formulation of probing
security introduced below with the simulation-based formulations of probing security
often used by cryptographers. Indeed, the dependency set depsetG(O) can be interpreted
as a set of G’s input shares that is sufﬁcient to perfectly simulate the joint distribution of
positions in O to an adversary.
Next we deﬁne our baseline notion of probing security, which we call t-non-
interference, and state some of its basic properties. The notion of t-non-interference is
based on the notion of degree of an input set, which we deﬁne ﬁrst. Given an input set I
(cid:52)
= I ∩ a of positions in I that corre-
and an encoding variable a, we deﬁne the set I|a
spond to shares of a. Further, we deﬁne the degree of an input set I as (cid:107)I(cid:107) (cid:52)
= maxa |I|a|
(where | · | is the standard notion of cardinality on ﬁnite sets). This notion captures the
intuition that the adversary should not learn all shares of any single encoding variable, by
bounding the information an adversary may learn about any of a gadget’s shared inputs
through positions probed internally to that gadget.
Deﬁnition 3 (Probing security) A gadget G is t-non-interfering (or t-NI) whenever
(cid:107)depsetG(O)(cid:107) ≤ |O| for every O ⊆ OG such that |O| ≤ t.
The next lemma establishes that t-NI is already achieved under a weaker cardinality
constraint on the dependency set. Variants of Lemma 3 in simulation-based settings
appear in [10,8].
Lemma 3 A gadget G is t-NI iff (cid:107)depsetG(O)(cid:107) ≤ t for every O ⊆ OG s.t. |O| ≤ t.
Proof. The direct implication follows from transitivity of ≤. The reverse implication
proceeds by induction on k = t − |O|. The case k = 0 is immediate by deﬁnition of
t-NI. For the inductive case, let O be such that t − |O| = k + 1. Let a be an encoding
variable such that |depset(O)|a| = (cid:107)depset(O)(cid:107). Since (cid:107)depset(O)(cid:107) ≤ |O| ≤ t, there
necessarily exists an input position aı such that aı /∈ depset(O). Let O(cid:48) = O∪{aı}. We
have (cid:107)depsetG(O(cid:48))(cid:107) ≤ |O(cid:48)| = 1 + |O| by induction hypothesis and (cid:107)depsetG(O(cid:48))(cid:107) =