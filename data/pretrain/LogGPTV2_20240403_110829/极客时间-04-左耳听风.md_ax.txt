## "急诊"-   **定位问题**。可以快速地暴露并找到问题的发生点，帮助技术人员诊断问题。-   **性能分析**。当出现非预期的流量提升时，可以快速地找到系统的瓶颈，并帮助开发人员深入代码。只有做到了上述的这些关键点才能是一个好的监控系统。
# 如何做出一个好的监控系统下面是我认为一个好的监控系统应该实现的功能。-   **服务调用链跟踪**。这个监控系统应该从对外的 API    开始，然后将后台的实际服务给关联起来，然后再进一步将这个服务的依赖服务关联起来，直到最后一个服务（如    MySQL 或    Redis），这样就可以把整个系统的服务全部都串连起来了。这个事情的最佳实践是    Google Dapper 系统，其对应于开源的实现是 Zipkin。对于 Java    类的服务，我们可以使用字节码技术进行字节码注入，做到代码无侵入式。如下图所示（截图来自我做的一个 APM 的监控系统）。![](Images/e6f3c162daa7c8ef2ed26d09d661d935.png){savepage-src="https://static001.geekbang.org/resource/image/ab/81/ab79054e0a3cf2d8f1d696e3c367ab81.png"}-   **服务调用时长分布**。使用    Zipkin，可以看到一个服务调用链上的时间分布，这样有助于我们知道最耗时的服务是什么。下图是    Zipkin 的服务调用时间分布。![](Images/3e5d7d5daba38035bfe00b4f6f296ca0.png){savepage-src="https://static001.geekbang.org/resource/image/5f/4c/5fd70b4194854fc8d55c48987cf3644c.png"}-   **服务的 TOP N 视图**。所谓 TOP N    视图就是一个系统请求的排名情况。一般来说，这个排名会有三种排名的方法：a）按调用量排名，b)    按请求最耗时排名，c）按热点排名（一个时间段内的请求次数的响应时间和）。![](Images/01c11c113ccd22c720edbb91b65bff16.png){savepage-src="https://static001.geekbang.org/resource/image/f4/f1/f4f91d5a3ee95b478c47f62499b0dcf1.png"}-   **数据库操作关联**。对于 Java 应用，我们可以很方便地通过 JavaAgent    字节码注入技术拿到 JDBC    执行数据库操作的执行时间。对此，我们可以和相关的请求对应起来。![](Images/d7aa8c19610a4d4ef8674ced0fd35382.png){savepage-src="https://static001.geekbang.org/resource/image/29/f4/29587fed0823f6e8ae7a2d38eaf35af4.png"}-   **服务资源跟踪**。我们的服务可能运行在物理机上，也可能运行在虚拟机里，还可能运行在一个    Docker 的容器里，Docker    容器又运行在物理机或是虚拟机上。我们需要把服务运行的机器节点上的数据（如    CPU、MEM、I/O、DISK、NETWORK）关联起来。这样一来，我们就可以知道服务和基础层资源的关系。如果是 Java应用，我们还要和 JVM 里的东西进行关联，这样我们才能知道服务所运行的 JVM中的情况（比如 GC 的情况）。有了这些数据上的关联，我们就可以达到如下的目标。1.  当一台机器挂掉是因为 CPU 或 I/O    过高的时候，我们马上可以知道其会影响到哪些对外服务的 API。2.  当一个服务响应过慢的时候，我们马上能关联出来是否在做 Java    GC，或是其所在的计算结点上是否有资源不足的情况，或是依赖的服务是否出现了问题。3.  当发现一个 SQL 操作过慢的时候，我们能马上知道其会影响哪个对外服务的    API。4.  当发现一个消息队列拥塞的时候，我们能马上知道其会影响哪些对外服务的    API。总之，我们就是想知道用户访问哪些请求会出现问题，这对于我们了解故障的影响面非常有帮助。一旦了解了这些信息，我们就可以做出调度。比如：-   一旦发现某个服务过慢是因为 CPU 使用过多，我们就可以做弹性伸缩。-   一旦发现某个服务过慢是因为 MySQL    出现了一个慢查询，我们就无法在应用层上做弹性伸缩，只能做流量限制，或是降级操作了。所以，一个分布式系统，或是一个自动化运维系统，或是一个 Cloud Native的云化系统，最重要的事就是把监控系统做好。在把数据收集好的同时，更重要的是把数据关联好。这样，我们才可能很快地定位故障，进而才能进行自动化调度。![](Images/27e7023e727503aba85d191046c316df.png){savepage-src="https://static001.geekbang.org/resource/image/6b/33/6b17dd779cfecd62e02924dc8618e833.png"}上图只是简单地展示了一个分布式系统的服务调用链接上都在报错，其根本原因是数据库链接过多，服务不过来。另外一个原因是，Java在做 Full GC导致处理过慢。于是，消息队列出现消息堆积堵塞。这个图只是一个示例，其形象地体现了在分布式系统中监控数据关联的重要性。
# 小结回顾一下今天的要点内容。首先，我强调了全栈系统监控的重要性，它就像是我们的眼睛，没有它，我们根本就不知道系统到底发生了什么。随后，从基础层、中间层和应用层三个层面，讲述了全栈监控系统要监控哪些内容。然后，阐释了什么才是好的监控系统，以及如何做出好的监控。最后，欢迎你分享一下你在监控系统中的比较好的实践和方法。下一篇文章中，我将讲述分布式系统的另一关键技术：服务调度。下面我列出了《分布式系统架构的本质》系列文章的目录，方便你快速找到自己感兴趣的内容。-   [分布式系统架构的冰与火](https://time.geekbang.org/column/article/1411)-   [从亚马逊的实践，谈分布式系统的难点](https://time.geekbang.org/column/article/1505)-   [分布式系统的技术栈](https://time.geekbang.org/column/article/1512)-   [分布式系统关键技术：全栈监控](https://time.geekbang.org/column/article/1513)-   [分布式系统关键技术：服务调度](https://time.geekbang.org/column/article/1604)-   [分布式系统关键技术：流量与数据调度](https://time.geekbang.org/column/article/1609)-   [洞悉 PaaS    平台的本质](https://time.geekbang.org/column/article/1610)-   [推荐阅读：分布式系统架构经典资料](https://time.geekbang.org/column/article/2080)-   [推荐阅读：分布式数据调度相关论文](https://time.geekbang.org/column/article/2421)![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 25 \| 分布式系统关键技术：服务调度服务治理，你应该听得很多了。但是我想说，你所听到的服务治理可能混合了流量调度等其它内容。我们这里会把服务治理和流量调度分开来讲。所以，今天这篇文章只涉及服务治理上的一些关键技术，主要有以下几点。-   服务关键程度-   服务依赖关系-   服务发现-   整个架构的版本管理-   服务应用生命周期全管理
# 服务关键程度和服务的依赖关系下面，我们先看看服务关键程度和服务的依赖关系。关于服务关键程度，主要是要我们梳理和定义服务的重要程度。这不是使用技术可以完成的，它需要细致地管理对业务的理解，才能定义出架构中各个服务的重要程度。然后，我们还要梳理出服务间的依赖关系，这点也非常重要。我们常说，"没有依赖，就没有伤害"。这句话的意思就是说，服务间的依赖是一件很易碎的事。依赖越多，依赖越复杂，我们的系统就越易碎。因为依赖关系就像"铁锁连环"一样，一个服务的问题很容易出现一条链上的问题。因此，传统的SOA 希望通过 ESB来解决服务间的依赖关系，这也是为什么微服务中希望服务间是没有依赖的，而让上层或是前端业务来整合这些个后台服务。但是要真正做到服务无依赖，我认为还是比较有困难的，总是会有一些公有服务会被依赖。我们只能是降低服务依赖的深度和广度，从而让管理更为简单和简洁。在这一点上，以Spring Boot 为首的微服务开发框架就开了一个好头。**微服务是服务依赖最优解的上限，而服务依赖的下限是千万不要有依赖环**。如果系统架构中有服务依赖环，那么表明你的架构设计是错误的。循环依赖有很多的副作用，最大的问题是这是一种极强的耦合，会导致服务部署相当复杂和难解，而且会导致无穷尽的递归故障和一些你意想不到的问题。``{=html}解决服务依赖环的方案一般是，依赖倒置的设计模式。在分布式架构上，你可以使用一个第三方的服务来解决这个事。比如，通过订阅或发布消息到一个消息中间件，或是把其中的依赖关系抽到一个第三方的服务中，然后由这个第三方的服务来调用这些原本循环依赖的服务。服务的依赖关系是可以通过技术的手段来发现的，这其中，[Zipkin](https://zipkin.io/)是一个很不错的服务调用跟踪系统，它是通过GoogleDapper](https://research.google.com/pubs/pub36356.html)这篇论文来实现的。这个工具可以帮你梳理服务的依赖关系，以及了解各个服务的性能。在梳理完服务的重要程度和服务依赖关系之后，我们就相当于知道了整个架构的全局。就好像我们得到了一张城市地图，在这张地图上可以看到城市的关键设施，以及城市的主干道。再加上相关的监控，我们就可以看到城市各条道路上的工作和拥堵情况。这对于我们整个分布式架构是非常非常关键的。我给很多公司做过相关的咨询。当他们需要我帮忙解决一些高并发或是架构问题的时候，我一般都会向他们要一张这样的"地图"，但是几乎所有的公司都没有这样的地图。