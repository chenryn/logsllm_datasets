Deno doesn't support `require` but there is one thing where `require` wins
against ES6 imports:
In Node.js we can do
    delete require.cache[require.resolve(somePath)];
and delete required file from cache to load it again after it get changed in
runtime. With imports we can't do like this. Even if we use dymanic imports
(`await import("./module.ts")`) twice, we both times get the module Deno
loaded first time.
There is a workaround about it. We can add a query parameter to file path like
this:
    mod = await import(`./mod.ts?foo=${anyRandomlyGeneratedString}`);
and it will be loaded again and we get a new its version. But the problem is
that BOTH versions of this module will exist in the cache, I suppose. That's
not cool.
Why do we even have to store dynamically imported modules in cache? Maybe
better make them uncached and garbage-collected and make it possible to import
the same module multiple times and each time get the current module content
without any ugly workarounds? Otherwise it looks like dynamic imports are just
called dynamic but still work in a static way.