### 4. T-GCN Model and Its Limitations

The T-GCN (Temporal Graph Convolutional Network) model can be viewed as an enhancement of the LSTM-FCN (Long Short-Term Memory - Fully Convolutional Network) architecture. The key improvement in T-GCN is the application of a convolution operation that is not confined to the Euclidean domain. This non-Euclidean convolution is followed by processing through a Recurrent Neural Network (RNN). Despite its recent introduction, T-GCN's graph convolution method has been shown to be outperformed by other Graph Convolutional Neural Network (GCNN) models.

### 5. Conclusion

In this paper, we introduce TELESTO, a novel time series classification model designed to identify recurring anomalies in services deployed in an IaaS (Infrastructure as a Service) cloud environment. Specifically, we model Key Performance Indicators (KPIs) of hypervisors and virtual machines hosting applications as multivariate time series. We present a method to transform these multivariate time series into graphs. The proposed model leverages GCNNs, ensuring invariance to changes in input dimensionality. By applying convolutions on both the spatial and temporal dimensions, we extract a set of features used for anomaly classification via graph classification. To evaluate our method, we deployed a cloud system with two applications hosted within an IaaS service model. Synthetic injections of anomalies provided the ground truth for evaluation. Our results show that TELESTO outperforms two state-of-the-art GCNNs, demonstrating promising results for anomaly classification and the ability to detect recurring anomalies in cloud environments.

For future work, we aim to explore methods to encode temporal information from preceding graphs to improve the classification of subsequent graphs. Additionally, we will test different time series augmentation techniques to synthetically increase the amount of training data.

### References

1. Bodik, P., Goldszmidt, M., Fox, A., Woodard, D.B., Andersen, H.: Fingerprinting the Datacenter: Automated Classification of Performance Crises. In: Proceedings of the 5th European Conference on Computer Systems (2010).

2. Cheng, M., Li, Q., Lv, J., Liu, W., Wang, J.: Multi-scale LSTM Model for BGP Anomaly Classification. IEEE Trans. Serv. Comput. (2018).

3. Clevert, D., Unterthiner, T., Hochreiter, S.: Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs). In: 4th International Conference on Learning Representations, ICLR 2016, Conference Track Proceedings (2016).

4. Dang, Y., Lin, Q., Huang, P.: AIOPS: Real-World Challenges and Research Innovations. In: IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion). IEEE (2019).

5. Du, J., Zhang, S., Wu, G., Moura, J.M.F., Kar, S.: Topology Adaptive Graph Convolutional Networks. arXiv preprint arXiv:1710.10370 (2017).

6. Fawaz, H.I., et al.: InceptionTime: Finding AlexNet for Time Series Classification. Data Min. Knowl. Disc. 34, 1936–1962 (2020). https://doi.org/10.1007/s10618-020-00710-y

7. Fey, M., Lenssen, J.E.: Fast Graph Representation Learning with PyTorch Geometric. arXiv preprint arXiv:1903.02428 (2019).

8. Glorot, X., Bengio, Y.: Understanding the Difficulty of Training Deep Feedforward Neural Networks. In: Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics (2010).

9. Gulenko, A., Wallschlager, M., Schmidt, F., Kao, O., Liu, F.: A System Architecture for Real-Time Anomaly Detection in Large-Scale NFV Systems. Procedia Comput. Sci. 94, 491–496 (2016).

10. He, K., Zhang, X., Ren, S., Sun, J.: Deep Residual Learning for Image Recognition. In: Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (2016).

11. Ioffe, S., Szegedy, C.: Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift. In: International Conference on Machine Learning (2015).

12. Kajo, M., Novaczki, S.: A Genetic Feature Selection Algorithm for Anomaly Classification in Mobile Networks. In: 19th International ICIN Conference - Innovations in Clouds, Internet and Networks (2016).

13. Karim, F., Majumdar, S., Darabi, H., Chen, S.: LSTM Fully Convolutional Networks for Time Series Classification. IEEE Access 6, 1662–1669 (2017).

14. Kingma, D.P., Ba, J.: Adam: A Method for Stochastic Optimization. In: 3rd International Conference on Learning Representations, ICLR 2015, Conference Track Proceedings (2015).

15. Kipf, T.N., Welling, M.: Semi-Supervised Classification with Graph Convolutional Networks. In: 5th International Conference on Learning Representations, ICLR 2017, Conference Track Proceedings (2017).

16. Li, Y., Tarlow, D., Brockschmidt, M., Zemel, R.S.: Gated Graph Sequence Neural Networks. In: 4th International Conference on Learning Representations, ICLR 2016, Conference Track Proceedings (2016).

17. Nedelkoski, S., Cardoso, J., Kao, O.: Anomaly Detection from System Tracing Data Using Multimodal Deep Learning. In: 2019 IEEE 12th International Conference on Cloud Computing (CLOUD). IEEE (2019).

18. Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., Salakhutdinov, R.: Dropout: A Simple Way to Prevent Neural Networks from Overfitting. J. Mach. Learn. Res. 15(1), 1929–1958 (2014).

19. Vaswani, A., et al.: Attention Is All You Need. In: Advances in Neural Information Processing Systems (2017).

20. Velickovic, P., Cucurull, G., Casanova, A., Romero, A., Lio, P., Bengio, Y.: Graph Attention Networks. In: International Conference on Learning Representations (2018).

21. Wetzig, R., Gulenko, A., Schmidt, F.: Unsupervised Anomaly Alerting for IoT-Gateway Monitoring Using Adaptive Thresholds and Half-Space Trees. In: 2019 Sixth International Conference on Internet of Things: Systems, Management and Security (IOTSMS). IEEE (2019).

22. Wu, L., Tordsson, J., Elmroth, E., Kao, O.: MicroRCA: Root Cause Localization of Performance Issues in Microservices. In: IEEE/IFIP Network Operations and Management Symposium (NOMS) (2020).

23. Xu, K., Hu, W., Leskovec, J., Jegelka, S.: How Powerful Are Graph Neural Networks? In: 7th International Conference on Learning Representations, ICLR 2019 (2019).

24. Xu, K., Li, C., Tian, Y., Sonobe, T., Kawarabayashi, K., Jegelka, S.: Representation Learning on Graphs with Jumping Knowledge Networks. In: Proceedings of the 35th International Conference on Machine Learning, ICML 2018. Proceedings of Machine Learning Research, vol. 80. PMLR (2018).

25. Zhang, S., Tong, H., Xu, J., Maciejewski, R.: Graph Convolutional Networks: A Comprehensive Review. Comput. Soc. Netw. 6(1), 1–23 (2019).

26. Zhao, L., Song, Y., Zhang, C., Liu, Y., Wang, P., Lin, T., Deng, M., Li, H.: T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. IEEE Trans. Intell. Transp. Syst. 21(9), 3848–3858 (2019).

---

### Discovering Alarm Correlation Rules for Network Fault Management

**Abstract**

Fault management is critical for telecommunication networks, involving the detection, diagnosis, isolation, and resolution of network issues. This task is time-consuming and resource-intensive. A promising approach to improve fault management is to find patterns that reveal relationships between network alarms, thereby presenting only the most important alarms to network operators. However, current algorithms often ignore the network topology, which is essential for understanding how alarms propagate. This paper addresses this issue by modeling a real-life telecommunication network as a dynamic attributed graph and extracting correlation patterns called Alarm Correlation Rules. Experiments on a large telecommunication network show that these patterns can significantly reduce the number of alarms presented to operators, potentially lowering maintenance costs.

**Keywords:** Fault Management, Dynamic Graph, Correlation Patterns

### 1. Introduction

In today's society, telecommunication networks are vital for personal and business communications. Ensuring the proper operation of large telecommunication networks involves fault management, which aims to maintain network availability, security, reliability, and performance. A key challenge in fault management for large, heterogeneous networks (e.g., city-wide networks) is the generation of millions of alarms by network devices, while the number of technicians or budget for maintenance is limited. This can lead to technicians being overwhelmed by thousands of alarms, making it difficult to investigate all of them. For example, a medium-sized city's telecommunication network may contain multiple device types, some of which can produce over 300 different alarms. These alarms are recorded by each network device and stored centrally for analysis. Additionally, Quality Performance Indicators (QPIs) of each network device are collected over time. For network experts, understanding the relationships between alarms is challenging due to the complex interactions between network devices.

To improve fault management, expert systems have been designed that rely on hand-created knowledge bases to find the causes of network problems. However, this approach is costly, time-consuming, error-prone, and inflexible. An alternative, emerging approach is to use pattern mining techniques to automatically discover relationships between alarms in alarm logs and then compress correlated alarms. This has been shown to significantly reduce the number of alarms presented to operators, thereby reducing maintenance costs. However, such approaches typically represent alarm log data as sequences and ignore the network topology, which is crucial for understanding how alarms propagate.

A promising research direction is to consider the network topology as a dynamic graph and extract richer, more complex patterns to reveal temporal relationships between alarms. Although several algorithms have been proposed to mine patterns in dynamic graphs, none are specifically designed for alarm analysis. This paper models alarm data as a network (i.e., a dynamic graph) where vertices are devices and edges are communication links. Alarms are viewed as spreading along these links, and QPIs are represented as attributes of network devices. From this representation, we propose to extract a new type of pattern called Alarm Correlation Rules using a novel correlation measure named ACOR (Alarm CORrelation). Experiments with real data from a large telecommunication network show that the proposed rules can provide greater alarm compression than the state-of-the-art AABD system.

### 2. Related Work

Several studies have applied pattern mining techniques to discover relationships between alarms in telecommunication networks, including association rule mining, episode mining, and sequential pattern mining (SPM). The first system to discover alarm patterns was TASA (Telecommunication Alarm Sequence Analyzer), which takes a sequence of alarms with timestamps and applies episode mining to find frequently co-occurring alarms within a sliding window. TASA also offers a separate module for association rule mining to find common properties among alarm occurrences, ignoring time. TASA was applied to data from several telecommunication service providers.

Lozonavu et al. proposed a system for mining alarm patterns that partitions the input alarm sequence into subsequences with close timestamps and applies SPM to find frequent subsequence patterns. These patterns are used to generate a graph indicating relationships between alarms, with confidence (conditional probability) calculated for each relationship. This visualization helps network operators understand alarm relationships. The system was applied to a 3G mobile network.

Wanget al. introduced AABD (Automatic Alarm Behavior Discovery), which filters out invalid and transient alarms from the input sequence, identifies the most frequent alarms, and partitions the sequence based on these alarms. SPM is then applied to find frequent alarm sequences, which are used to generate rules for alarm compression. AABD achieved significant alarm reduction, but its rule generation process relies on a knowledge base provided by domain experts, which is time-consuming to create and maintain.

An alarm management system by Raul et al. takes an alarm sequence with attributes and applies a modified SPM algorithm to extract frequent sequences in a sliding window. Patterns are selected based on support, confidence, and lift. The system was applied to data from a large Portuguese telecommunication company, reducing the number of alarms presented to users by up to 70%.

While these pattern mining approaches are useful, they handle simple data types, primarily discrete sequences. To extract patterns that consider the network topology and provide deeper insights, this paper proposes a more complex data representation by adding the spatial dimension (network topology) to the pattern mining process. The network is viewed as a dynamic graph where alarms spread along edges (communication links) between vertices (network devices) to find spatio-temporal patterns.

### 3. The Proposed Framework

This section presents the proposed framework for discovering alarm correlation rules and performing alarm compression. The framework, illustrated in Figure 1, consists of three main steps: (1) obtaining and pre-processing alarm and network topology data, (2) extracting alarm correlation rules, and (3) utilizing the rules to select alarms to be presented to the user.

**Step 1: Obtaining and Preparing the Data**

Previous studies have analyzed historical alarm logs to find patterns involving multiple alarms, typically representing alarm log data as a sequence ordered by time. However, these studies ignore the network topology, leading to imprecise results or missing important underlying patterns. In this work, we observe that telecommunication alarm data can be naturally modeled as a network (a dynamic graph) where alarms spread following the information flow. Thus, we consider both historical alarm logs and the network topology. The following paragraphs describe how these two data sources are obtained and pre-processed.

[Figure 1: The proposed alarm discovery and compression framework]

**Step 2: Extracting Alarm Correlation Rules**

Once the data is prepared, the next step is to extract alarm correlation rules. This involves analyzing the dynamic graph to identify patterns of alarm propagation and correlation. We use a novel correlation measure, ACOR, to quantify the strength of these correlations.

**Step 3: Alarm Compression**

Finally, the extracted rules are used to filter and compress the alarms presented to network operators. This step ensures that only the most relevant and important alarms are displayed, reducing the cognitive load on operators and improving the efficiency of fault management.

### 4. Experimental Evaluation

Experiments were conducted on a large-scale telecommunication network to evaluate the effectiveness of the proposed framework. The results show that the Alarm Correlation Rules can provide greater alarm compression compared to the state-of-the-art AABD system, reducing the number of alarms presented to operators and potentially lowering maintenance costs.

### 5. Conclusion

This paper introduces a novel framework for discovering Alarm Correlation Rules in telecommunication networks, leveraging the network topology to extract spatio-temporal patterns. The proposed approach, TELESTO, demonstrates superior performance in alarm compression and provides valuable insights for fault management. Future work will focus on encoding temporal information from preceding graphs and testing different time series augmentation techniques to further enhance the model's performance.