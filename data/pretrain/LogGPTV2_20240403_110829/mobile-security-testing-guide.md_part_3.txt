Gray-box testing is the most common kind of testing in the security industry.
We strongly advise that you request the source code so that you can use the testing time as efficiently as possible.
The tester's code access obviously doesn't simulate an external attack, but it simplifies the identification of
vulnerabilities by allowing the tester to verify every identified anomaly or suspicious behavior at the code level. A
white-box test is the way to go if the app hasn't been tested before.
Even though decompiling on Android is straightforward, the source code may be obfuscated, and de-obfuscating will
be time-consuming. Time constraints are therefore another reason for the tester to have access to the source code.
Vulnerability Analysis
Vulnerability analysis is usually the process of looking for vulnerabilities in an app. Although this may be done
manually, automated scanners are usually used to identify the main vulnerabilities. Static and dynamic analysis are
types of vulnerability analysis.
21
Mobile App Security Testing
Static versus Dynamic Analysis
Static Application Security Testing (SAST) involves examining an application's components without executing them,
by analyzing the source code either manually or automatically. OWASP provides information about Static Code
Analysis that may help you understand techniques, strengths, weaknesses, and limitations.
Dynamic Application Security Testing (DAST) involves examining the app during runtime. This type of analysis can be
manual or automatic. It usually doesn't provide the information that static analysis provides, but it is a good way to
detect interesting elements (assets, features, entry points, etc.) from a user's point of view.
Now that we have defined static and dynamic analysis, let's dive deeper.
Static Analysis
During static analysis, the mobile app's source code is reviewed to ensure appropriate implementation of security
controls. In most cases, a hybrid automatic/manual approach is used. Automatic scans catch the low-hanging fruit,
and the human tester can explore the code base with specific usage contexts in mind.
Manual Code Review
A tester performs manual code review by manually analyzing the mobile application's source code for security
vulnerabilities. Methods range from a basic keyword search via the 'grep' command to a line-by-line examination of
the source code. IDEs (Integrated Development Environments) often provide basic code review functions and can be
extended with various tools.
A common approach to manual code analysis entails identifying key security vulnerability indicators by searching for
certain APIs and keywords, such as database-related method calls like "executeStatement" or "executeQuery". Code
containing these strings is a good starting point for manual analysis.
In contrast to automatic code analysis, manual code review is very good for identifying vulnerabilities in the business
logic, standards violations, and design flaws, especially when the code is technically secure but logically flawed. Such
scenarios are unlikely to be detected by any automatic code analysis tool.
A manual code review requires an expert code reviewer who is proficient in both the language and the frameworks
used for the mobile application. Full code review can be a slow, tedious, time-consuming process for the reviewer,
especially given large code bases with many dependencies.
Automated Source Code Analysis
Automated analysis tools can be used to speed up the review process of Static Application Security Testing (SAST).
They check the source code for compliance with a predefined set of rules or industry best practices, then typically
display a list of findings or warnings and flags for all detected violations. Some static analysis tools run against the
compiled app only, some must be fed the original source code, and some run as live-analysis plugins in the Integrated
Development Environment (IDE).
Although some static code analysis tools incorporate a lot of information about the rules and semantics required to
analyze mobile apps, they may produce many false positives, particularly if they are not configured for the target
environment. A security professional must therefore always review the results.
The appendix "Testing Tools" includes a list of static analysis tools, which can be found at the end of this book.
Dynamic Analysis
The focus of DAST is the testing and evaluation of apps via their real-time execution. The main objective of dynamic
analysis is finding security vulnerabilities or weak spots in a program while it is running. Dynamic analysis is
conducted both at the mobile platform layer and against the back-end services and APIs, where the mobile app's
22
Mobile App Security Testing
request and response patterns can be analyzed.
Dynamic analysis is usually used to check for security mechanisms that provide sufficient protection against the most
prevalent types of attack, such as disclosure of data in transit, authentication and authorization issues, and server
configuration errors.
Avoiding False Positives
Automated Scanning Tools
Automated testing tools' lack of sensitivity to app context is a challenge. These tools may identify a potential issue
that's irrelevant. Such results are called "false positives".
For example, security testers commonly report vulnerabilities that are exploitable in a web browser but aren't relevant
to the mobile app. This false positive occurs because automated tools used to scan the back-end service are based
on regular browser-based web applications. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site
Scripting (XSS) are reported accordingly.
Let's take CSRF as an example. A successful CSRF attack requires the following:
The ability to entice the logged-in user to open a malicious link in the web browser used to access the vulnerable
site.
The client (browser) must automatically add the session cookie or other authentication token to the request.
Mobile apps don't fulfill these requirements: even if WebViews and cookie-based session management are used, any
malicious link the user clicks opens in the default browser, which has a separate cookie store.
Stored Cross-Site Scripting (XSS) can be an issue if the app includes WebViews, and it may even lead to command
execution if the app exports JavaScript interfaces. However, reflected Cross-Site Scripting is rarely an issue for the
reason mentioned above (even though whether they should exist at all is arguable â€” escaping output is simply a best
practice).
In any case, consider exploit scenarios when you perform the risk assessment; don't blindly trust your scanning
tool's output.
Clipboard
When typing data into input fields, the clipboard can be used to copy in data. The clipboard is accessible system-wide
and is therefore shared by apps. This sharing can be misused by malicious apps to get sensitive data that has been
stored in the clipboard.
Before iOS 9, a malicious app might monitor the pasteboard in the background while periodically retrieving
[UIPasteboard generalPasteboard].string . As of iOS 9, pasteboard content is accessible to apps in the foreground
only, which reduces the attack surface of password sniffing from the clipboard dramatically.
For Android there was a PoC exploit released in order to demonstrate the attack vector if passwords are stored within
the clipboard. Disabling pasting in passwords input fields was a requirement in the MASVS 1.0, but was removed due
to several reasons:
Preventing pasting into input fields of an app, does not prevent that a user will copy sensitive information anyway.
Since the information has already been copied before the user notices that it's not possible to paste it in, a
malicious app has already sniffed the clipboard.
If pasting is disabled on password fields users might even choose weaker passwords that they can remember
and they cannot use password managers anymore, which would contradict the original intention of making the
app more secure.
23
Mobile App Security Testing
When using an app you should still be aware that other apps are reading the clipboard continuously, as the Facebook
app did. Still, copy-pasting passwords is a security risk you should be aware of, but also cannot be solved by an app.
Penetration Testing (a.k.a. Pentesting)
The classic approach involves all-around security testing of the app's final or near-final build, e.g., the build that's
available at the end of the development process. For testing at the end of the development process, we recommend
the Mobile App Security Verification Standard (MASVS) and the associated checklist as baseline for testing. A typical
security test is structured as follows:
Preparation - defining the scope of security testing, including identifying applicable security controls, the
organization's testing goals, and sensitive data. More generally, preparation includes all synchronization with the
client as well as legally protecting the tester (who is often a third party). Remember, attacking a system without
written authorization is illegal in many parts of the world!
Intelligence Gathering - analyzing the environmental and architectural context of the app to gain a general
contextual understanding.
Mapping the Application - based on information from the previous phases; may be complemented by
automated scanning and manually exploring the app. Mapping provides a thorough understanding of the app, its
entry points, the data it holds, and the main potential vulnerabilities. These vulnerabilities can then be ranked
according to the damage their exploitation would cause so that the security tester can prioritize them. This phase
includes the creation of test cases that may be used during test execution.
Exploitation - in this phase, the security tester tries to penetrate the app by exploiting the vulnerabilities identified
during the previous phase. This phase is necessary for determining whether vulnerabilities are real and true
positives.
Reporting - in this phase, which is essential to the client, the security tester reports the vulnerabilities he or she
has been able to exploit and documents the kind of compromise he or she has been able to perform, including
the compromise's scope (for example, the data the tester has been able to access illegitimately).
Preparation
The security level at which the app will be tested must be decided before testing. The security requirements should be
decided at the beginning of the project. Different organizations have different security needs and resources available
for investing in test activities. Although the controls in MASVS Level 1 (L1) are applicable to all mobile apps, walking
through the entire checklist of L1 and Level 2 (L2) MASVS controls with technical and business stakeholders is a good
way to decide on a level of test coverage.
Organizations may have different regulatory and legal obligations in certain territories. Even if an app doesn't handle
sensitive data, some L2 requirements may be relevant (because of industry regulations or local laws). For example,
two-factor authentication (2FA) may be obligatory for a financial app and enforced by a country's central bank and/or
financial regulatory authorities.
Security goals/controls defined earlier in the development process may also be reviewed during the discussion with
stakeholders. Some controls may conform to MASVS controls, but others may be specific to the organization or
application.
24
Mobile App Security Testing
All involved parties must agree on the decisions and the scope in the checklist because these will define the baseline
for all security testing.
Coordinating with the Client
Setting up a working test environment can be a challenging task. For example, restrictions on the enterprise wireless
access points and networks may impede dynamic analysis performed at client premises. Company policies may
prohibit the use of rooted phones or (hardware and software) network testing tools within enterprise networks. Apps
that implement root detection and other reverse engineering countermeasures may significantly increase the work
required for further analysis.
Security testing involves many invasive tasks, including monitoring and manipulating the mobile app's network traffic,
inspecting the app data files, and instrumenting API calls. Security controls, such as certificate pinning and root
detection, may impede these tasks and dramatically slow testing down.
To overcome these obstacles, you may want to request two of the app's build variants from the development team.
One variant should be a release build so that you can determine whether the implemented controls are working
properly and can be bypassed easily. The second variant should be a debug build for which certain security controls
have been deactivated. Testing two different builds is the most efficient way to cover all test cases.
Depending on the scope of the engagement, this approach may not be possible. Requesting both production and
debug builds for a white-box test will help you complete all test cases and clearly state the app's security maturity. The
client may prefer that black-box tests be focused on the production app and the evaluation of its security controls'
effectiveness.
The scope of both types of testing should be discussed during the preparation phase. For example, whether the
security controls should be adjusted should be decided before testing. Additional topics are discussed below.
Identifying Sensitive Data
Classifications of sensitive information differ by industry and country. In addition, organizations may take a restrictive
view of sensitive data, and they may have a data classification policy that clearly defines sensitive information.
There are three general states from which data may be accessible:
At rest - the data is sitting in a file or data store
In use - an application has loaded the data into its address space
In transit - data has been exchanged between mobile app and endpoint or consuming processes on the device,
e.g., during IPC (Inter-Process Communication)
The degree of scrutiny that's appropriate for each state may depend on the data's importance and likelihood of being
accessed. For example, data held in application memory may be more vulnerable than data on web servers to access
via core dumps because attackers are more likely to gain physical access to mobile devices than to web servers.
When no data classification policy is available, use the following list of information that's generally considered
sensitive:
25
Mobile App Security Testing
user authentication information (credentials, PINs, etc.)
Personally Identifiable Information (PII) that can be abused for identity theft: social security numbers, credit card
numbers, bank account numbers, health information
device identifiers that may identify a person
highly sensitive data whose compromise would lead to reputational harm and/or financial costs
any data whose protection is a legal obligation
any technical data generated by the application (or its related systems) and used to protect other data or the
system itself (e.g., encryption keys).
A definition of "sensitive data" must be decided before testing begins because detecting sensitive data leakage
without a definition may be impossible.
Intelligence Gathering
Intelligence gathering involves the collection of information about the app's architecture, the business use cases the
app serves, and the context in which the app operates. Such information may be classified as "environmental" or
"architectural".
Environmental Information
Environmental information includes:
The organization's goals for the app. Functionality shapes users' interaction with the app and may make some
surfaces more likely than others to be targeted by attackers.
The relevant industry. Different industries may have different risk profiles.
Stakeholders and investors; understanding who is interested in and responsible for the app.
Internal processes, workflows, and organizational structures. Organization-specific internal processes and
workflows may create opportunities for business logic exploits.
Architectural Information
Architectural information includes:
The mobile app: How the app accesses data and manages it in-process, how it communicates with other
resources and manages user sessions, and whether it detects itself running on jailbroken or rooted phones and
reacts to these situations.
The Operating System: The operating systems and OS versions the app runs on (including Android or iOS
version restrictions), whether the app is expected to run on devices that have Mobile Device Management (MDM)
controls, and relevant OS vulnerabilities.
Network: Usage of secure transport protocols (e.g., TLS), usage of strong keys and cryptographic algorithms
(e.g., SHA-2) to secure network traffic encryption, usage of certificate pinning to verify the endpoint, etc.
Remote Services: The remote services the app consumes and whether their being compromised could
compromise the client.
Mapping the Application
Once the security tester has information about the app and its context, the next step is mapping the app's structure
and content, e.g., identifying its entry points, features, and data.
When penetration testing is performed in a white-box or grey-box paradigm, any documents from the interior of the
project (architecture diagrams, functional specifications, code, etc.) may greatly facilitate the process. If source code is
available, the use of SAST tools can reveal valuable information about vulnerabilities (e.g., SQL Injection). DAST tools
may support black-box testing and automatically scan the app: whereas a tester will need hours or days, a scanner
may perform the same task in a few minutes. However, it's important to remember that automatic tools have
limitations and will only find what they have been programmed to find. Therefore, human analysis may be necessary
to augment results from automatic tools (intuition is often key to security testing).
26
Mobile App Security Testing
Threat Modeling is an important artifact: documents from the workshop usually greatly support the identification of
much of the information a security tester needs (entry points, assets, vulnerabilities, severity, etc.). Testers are
strongly advised to discuss the availability of such documents with the client. Threat modeling should be a key part of
the software development life cycle. It usually occurs in the early phases of a project.
The threat modeling guidelines defined in OWASP are generally applicable to mobile apps.
Exploitation
Unfortunately, time or financial constraints limit many pentests to application mapping via automated scanners (for
vulnerability analysis, for example). Although vulnerabilities identified during the previous phase may be interesting,
their relevance must be confirmed with respect to five axes:
Damage potential - the damage that can result from exploiting the vulnerability
Reproducibility - ease of reproducing the attack
Exploitability - ease of executing the attack
Affected users - the number of users affected by the attack
Discoverability - ease of discovering the vulnerability
Against all odds, some vulnerabilities may not be exploitable and may lead to minor compromises, if any. Other
vulnerabilities may seem harmless at first sight, yet be determined very dangerous under realistic test conditions.
Testers who carefully go through the exploitation phase support pentesting by characterizing vulnerabilities and their
effects.
Reporting
The security tester's findings will be valuable to the client only if they are clearly documented. A good pentest report
should include information such as, but not limited to, the following:
an executive summary
a description of the scope and context (e.g., targeted systems)
methods used
sources of information (either provided by the client or discovered during the pentest)
prioritized findings (e.g., vulnerabilities that have been structured by DREAD classification)
detailed findings
recommendations for fixing each defect
Many pentest report templates are available on the Internet: Google is your friend!
Security Testing and the SDLC
Although the principles of security testing haven't fundamentally changed in recent history, software development
techniques have changed dramatically. While the widespread adoption of Agile practices was speeding up software
development, security testers had to become quicker and more agile while continuing to deliver trustworthy software.
The following section is focused on this evolution and describes contemporary security testing.
Security Testing during the Software Development Life Cycle
Software development is not very old, after all, so the end of developing without a framework is easy to observe. We
have all experienced the need for a minimal set of rules to control work as the source code grows.
In the past, "Waterfall" methodologies were the most widely adopted: development proceeded by steps that had a
predefined sequence. Limited to a single step, backtracking capability was a serious drawback of Waterfall
methodologies. Although they have important positive features (providing structure, helping testers clarify where effort
27
Mobile App Security Testing
is needed, being clear and easy to understand, etc.), they also have negative ones (creating silos, being slow,
specialized teams, etc.).
As software development matured, competition increased and developers needed to react to market changes more
quickly while creating software products with smaller budgets. The idea of less structure became popular, and smaller
teams collaborated, breaking silos throughout the organization. The "Agile" concept was born (Scrum, XP, and RAD
are well-known examples of Agile implementations); it enabled more autonomous teams to work together more
quickly.
Security wasn't originally an integral part of software development. It was an afterthought, performed at the network
level by operation teams who had to compensate for poor software security! Although unintegrated security was
possible when software programs were located inside a perimeter, the concept became obsolete as new kinds of
software consumption emerged with web, mobile, and IoT technologies. Nowadays, security must be baked inside
software because compensating for vulnerabilities is often very difficult.
"SDLC" will be used interchangeably with "Secure SDLC" in the following section to help you internalize the
idea that security is a part of software development processes. In the same spirit, we use the name DevSecOps
to emphasize the fact that security is part of DevOps.
SDLC Overview
General Description of SDLC
SDLCs always consist of the same steps (the overall process is sequential in the Waterfall paradigm and iterative in
the Agile paradigm):
Perform a risk assessment for the application and its components to identify their risk profiles. These risk
profiles typically depend on the organization's risk appetite and applicable regulatory requirements. The risk
assessment is also based on factors, including whether the application is accessible via the Internet and the kind
of data the application processes and stores. All kinds of risks must be taken into account: financial, marketing,
industrial, etc. Data classification policies specify which data is sensitive and how it must be secured.
Security Requirements are determined at the beginning of a project or development cycle, when functional
requirements are being gathered. Abuse Cases are added as use cases are created. Teams (including
development teams) may be given security training (such as Secure Coding) if they need it. You can use the