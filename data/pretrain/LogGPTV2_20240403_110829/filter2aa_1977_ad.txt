bloodzer0&Lingfighting
⽤用户和数据属性以及策略略信息
在提供的示例例中，测试简单的直接对象引⽤用。此代码基于会话管理理中的示例例构建。
在实现这些访问控制时，重要的是验证访问控制规则的服务器器端实现和表示层表示是否匹配。
如果状态数据需要存储在客户端，则需要使⽤用加密和完整性检查以防⽌止篡改。
应⽤用程序逻辑流必须符合业务规则。
处理理事务时，单个⽤用户或设备在给定时间段内可以执⾏行行的事务数必须⾼高于业务要求，但必须⾜足够低，以防⽌止⽤用户执⾏行行DoS类型的攻击。
重要的是要注意，仅使⽤用referer HTTP头不不⾜足以验证授权，应仅⽤用作补充检查。
对于经过⻓长时间验证的会话，应⽤用程序应定期重新评估⽤用户的授权，以验证⽤用户的权限是否未更更改。如果权限已更更改，请注销⽤用户并强制他们重新进
⾏行行身份验证。
为了了遵守安全程序，⽤用户帐户还应该有⼀一种审计⽅方法。（例例如，在密码过期30天后禁⽤用⽤用户帐户）。
应⽤用程序还必须⽀支持在⽤用户的授权被撤销时禁⽤用帐户和终⽌止会话。（例例如⻆角⾊色变更更、就业状况等）。
当⽀支持外部服务帐户和⽀支持从外部系统或到外部系统的连接的帐户时，这些帐户必须以尽可能低的权限级别运⾏行行。
让我们让第⼀一句句话像您的加密技术⼀一样强⼤大：哈希和加密是两种不不同的东⻄西。
这是⼀一个普遍的误解，⽽而且⼤大多数时候哈希和加密是交替使⽤用的，错误的。它们是不不同的概念，也有不不同的⽤用途。
哈希是由（哈希）函数从源数据⽣生成的字符串串或数字：
hash := F(data)
哈希的⻓长度固定，其值随输⼊入的微⼩小变化⽽而变化很⼤大（仍可能发⽣生冲突）。好的哈希算法不不允许将哈希转换为其原始源。MD5是最流⾏行行的散列列算法，
但安全性blake2被认为是最强和最灵活的。
Go补充加密库提供了了blake2b（或仅blake2）和blake2s实现：前者针对64位平台进⾏行行了了优化，后者针对8到32位平台进⾏行行了了优化。如果blake2不不可
⽤用，则sha-256是正确的选项。
每当你有⼀一些你不不需要知道它是什什么的东⻄西，但只有当它是应该是什什么的时候（⽐比如下载后检查⽂文件完整性），你应该使⽤用hashing
package main
import "fmt"
import "io"
import "crypto/md5"
import "crypto/sha256"
import "golang.org/x/crypto/blake2s"
func main () {
        h_md5 := md5.New()
        h_sha := sha256.New()
        h_blake2s, _ := blake2s.New256(nil)
        io.WriteString(h_md5, "Welcome to Go Language Secure Coding Practices")
        io.WriteString(h_sha, "Welcome to Go Language Secure Coding Practices")
        io.WriteString(h_blake2s, "Welcome to Go Language Secure Coding Practices")
        fmt.Printf("MD5        : %x\n", h_md5.Sum(nil))
        fmt.Printf("SHA256     : %x\n", h_sha.Sum(nil))
        fmt.Printf("Blake2s-256: %x\n", h_blake2s.Sum(nil))
}
输出
密码学实践
bloodzer0&Lingfighting
MD5        : ea9321d8fb0ec6623319e49a634aad92
SHA256     : ba4939528707d791242d1af175e580c584dc0681af8be2a4604a526e864449f6
Blake2s-256: 1d65fa02df8a149c245e5854d980b38855fd2c78f2924ace9b64e8b21b3f2f82
注意：要运⾏行行源代码示例例，您需要运⾏行行 $go get golang.org/x/crypto/blake2s
另⼀一⽅方⾯面，加密使⽤用密钥将数据转换为可变⻓长度的数据
encrypted_data := F(data, key)
与散列列不不同，我们可以使⽤用正确的解密函数和密钥，从加密的数据中计算数据。
data := F⁻¹(encrypted_data, key)
当您需要通信或存储敏敏感数据时，应使⽤用加密，您或其他⼈人稍后需要访问这些敏敏感数据进⾏行行进⼀一步处理理。⼀一个“简单”的加密⽤用例例是安全的https-hyper-
text传输协议。AES是对称密钥加密的事实标准。该算法和其他对称密码⼀一样，可以在不不同的模式下实现。您会注意到在下⾯面的代码示例例中，使⽤用了了
gcm（galois counter模式），⽽而不不是更更流⾏行行的（⾄至少在密码学代码示例例中）cbc/ecb。GCM和CBC/ECB之间的主要区别在于前者是⼀一种经过身份验
证的密码模式，这意味着在加密阶段之后，在密⽂文中添加⼀一个身份验证标签，然后在消息解密之前对其进⾏行行验证，以确保消息没有被篡改。另⼀一⽅方
⾯面，您有公钥密码术或使⽤用成对密钥的⾮非对称密码术：public和private。在⼤大多数情况下，公钥密码学的性能不不如对称密钥密码学，因此其最常⻅见的
⽤用例例是使⽤用⾮非对称密码学在双⽅方之间共享对称密钥，这样他们就可以使⽤用对称密钥交换使⽤用对称密码学加密的消息。除了了90年年代的AES技术外，Go
作者已经开始实施和⽀支持更更现代的对称加密算法，这些算法也提供身份验证，例例如chacha20poly1305。
Go中另⼀一个有趣的包是x/crypto/nacl。这是DanielJ.Bernstein博⼠士的Nacl图书馆的参考资料料，它是⼀一个⾮非常流⾏行行的现代密码学图书馆。go中的
nacl/box和nacl/secretbox是nacl为两个最常⻅见的⽤用例例发送加密消息的抽象实现：
使⽤用公钥加密（nacl/box）在双⽅方之间发送经过身份验证的加密消息
使⽤用对称（即密钥）加密技术在双⽅方之间发送经过身份验证的加密消息
如果符合您的⽤用例例，那么最好使⽤用其中⼀一个抽象，⽽而不不是直接使⽤用AES。
bloodzer0&Lingfighting
package main
import "fmt"
import "crypto/aes"
import "crypto/cipher"
import "crypto/rand"
func main() {
        key := []byte("Encryption Key should be 32 char")
        data := []byte("Welcome to Go Language Secure Coding Practices")
        block, err := aes.NewCipher(key)
        if err != nil {
                panic(err.Error())
        }
        nonce := make([]byte, 12)
        if _, err := rand.Read(nonce); err != nil {
                panic(err.Error())
        }
        aesgcm, err := cipher.NewGCM(block)
        if err != nil {
                panic(err.Error())
        }
        encrypted_data := aesgcm.Seal(nil, nonce, data, nil)
        fmt.Printf("Encrypted: %x\n", encrypted_data)
        decrypted_data, err := aesgcm.Open(nil, nonce, encrypted_data, nil)
        if err != nil {
                panic(err.Error())
        }
        fmt.Printf("Decrypted: %s\n", decrypted_data)
}
Encrypted: a66bd44db1fac7281c33f6ca40494a320644584d0595e5a0e9a202f8aeb22dae659dc06932d4e409fe35a95d14b1cffacbe3914
460dd27cbd274b0c3a561
Decrypted: Welcome to Go Language Secure Coding Practices
请注意，您应该“建⽴立并使⽤用⼀一个如何管理理加密密钥的策略略和过程”，保护“主秘密不不受未经授权的访问”。也就是说：您的加密密钥不不应该硬编码在源
代码中（如本例例中所示）。
go crypto package收集常⻅见的加密常量量，但实现有⾃自⼰己的包，如crypto/md5包。
⼤大多数现代密码算法都是在 https://godoc.org/golang.org/x/crypto 下实现的，因此开发⼈人员应该关注那些算法，⽽而不不
是 [crypto/*package](https://golang.org/pkg/crypto/) 。
在OWASP安全编码实践中，您会发现⼀一条似乎⾮非常复杂的准则：“当这些随机值不不可猜测时，所有随机数、随机⽂文件名、随机guid和随机字符串串都应
使⽤用加密模块批准的随机数⽣生成器器⽣生成”，因此让我们来谈谈“随机数”。
密码学依赖于某种随机性，但为了了正确起⻅见，⼤大多数编程语⾔言提供的现成的是⼀一个伪随机数⽣生成器器：go's math/rand不不例例外。
当⽂文档中声明“顶级函数（如ﬂoat64和int）使⽤用默认共享源时，您应该仔细阅读该⽂文档，该共享源每次运⾏行行程序时都会⽣生成确定的值序
列列。”（source）
这到底是什什么意思？让我们看看
伪随机⽣生成器器
bloodzer0&Lingfighting
package main
import "fmt"
import "math/rand"
func main() {
    fmt.Println("Random Number: ", rand.Intn(1984))
}
运⾏行行这个程序⼏几次会导致完全相同的数字/序列列，但是为什什么呢？
$ for i in {1..5}; do go run rand.go; done
Random Number:  1825
Random Number:  1825
Random Number:  1825
Random Number:  1825
Random Number:  1825
因为Go's Math/Rand和其他许多⽅方法⼀一样是⼀一个确定性伪随机数⽣生成器器，所以它们使⽤用⼀一个称为seed的源。这个种⼦子只负责确定性伪随机数⽣生成器器
的随机性——如果已知或可预测，⽣生成的数字序列列也会发⽣生同样的情况。
我们可以通过使⽤用math/rand seed function为每个程序执⾏行行获取预期的五个不不同值来“修复”这个例例⼦子，但是因为我们在cryptographic practices部分，
所以我们应该遵循go's crypto/rand package。
package main
import "fmt"
import "math/big"
import "crypto/rand"
func main() {
    rand, err := rand.Int(rand.Reader, big.NewInt(1984))
    if err != nil {
        panic(err)
    }
    fmt.Printf("Random Number: %d\n", rand)
}
您可能会注意到运⾏行行crypto/rand⽐比math/rand慢，但这是意料料之中的：最快的算法并不不总是最安全的。crypto的rand实现起来也更更安全；⼀一个例例⼦子
是，您不不能种⼦子crypto/rand，库为此使⽤用操作系统随机性，防⽌止开发⼈人员滥⽤用。
$ for i in {1..5}; do go run rand-safe.go; done
Random Number: 277
Random Number: 1572
Random Number: 1793
Random Number: 1328
Random Number: 1378
如果您对如何利利⽤用这⼀一点很好奇，那么想想如果您的应⽤用程序在⽤用户注册时创建⼀一个默认密码，通过计算⽤用go's math/rand⽣生成的伪随机数的散列列
值，会发⽣生什什么情况，如第⼀一个示例例所示？
是的，你猜对了了，你就可以预测⽤用户的密码了了！
错误处理理和⽇日志记录是应⽤用程序和基础结构保护的重要组成部分。当提到错误处理理时，它是指捕获应⽤用程序逻辑中可能导致系统崩溃的任何错误，除
⾮非正确处理理。另⼀一⽅方⾯面，⽇日志记录详细说明了了系统上发⽣生的所有操作和请求。⽇日志记录不不仅允许识别已发⽣生的所有操作，⽽而且有助于确定需要采取哪
些措施来保护系统。由于攻击者有时试图通过删除⽇日志来删除其操作的所有跟踪，因此集中化⽇日志⾄至关重要。
错误处理理和记录
bloodzer0&Lingfighting
在Go中，有⼀一个内置的 error 类型。 error 类型的不不同值表示异常状态。通常在go中，如果错误值不不是nil，则会发⽣生⼀一个错误，并且必须进⾏行行
处理理，以便便允许应⽤用程序在不不崩溃的情况下从所述状态恢复。
Go中的⼀一个简单示例例如下：
if err != nil {
    // handle the error
}
不不仅可以使⽤用内置错误，还可以指定⾃自⼰己的错误类型。这可以通过使⽤用erro.New 函数。例例⼦子：
{...}
if f < 0 {
    return 0, errors.New("math: square root of negative number")
}
//If an error has occurred print it
if err != nil {
    fmt.Println(err)
}
{...}