### 静态程序分析工具大集合

**参考来源：[Github](https://github.com/mre/awesome-static-analysis/edit/master/README.md)，编译者：FB小编鸢尾**

**静态程序分析（Static Program Analysis）** 是指在不实际运行计算机程序的情况下，对程序进行分析的方法。与之相对的是动态程序分析，后者需要在程序运行时进行。大多数静态程序分析的目标是特定版本的源代码，但也有一些针对目标代码。通常，静态程序分析指的是利用专门的工具来进行的自动化分析过程；而人工执行的分析则一般被称为程序理解或代码审查。

以下是各类编程语言和应用场景下的静态分析工具汇总，其中 `[OSS]` 代表开源软件，`[PROPRIETARY]` 表示专有软件。欢迎各位补充更多资源。

#### C/C++
- **CMetrics** [OSS] - 计算C文件的大小及复杂度
- **cqmetrics** [OSS] - C代码质量度量工具
- **clang-tidy** [OSS] - Clang静态分析工具
- **cppcheck** [OSS] - C/C++代码静态分析
- **flawfinder** [OSS] - 检测潜在的安全漏洞
- **flint++** [OSS] - 跨平台、无依赖的C++静态分析工具，被Facebook采用
- **oclint** [OSS] - C/C++代码静态分析
- **splint** [OSS] - C/C++代码静态分析
- **tis-interpreter** [OSS] - 用标准C编写，用于发现敏感错误的解释器
- **vera++** [OSS] - 可编程工具，用于验证、分析和转换C++源码

#### C#
- **Code Analysis Rule Collection** [OSS] - 包含一组特征、代码修复及基于Microsoft .NET编译器平台“Roslyn”的重构
- **code-cracker** [OSS] - 使用Roslyn为C#和VB提供代码分析
- **CSharpEssentials** [OSS] - Roslyn特性分析集，支持代码修复和重构以适应C# 6的新特性
- **Designite** [PROPRIETARY] - 设计质量评估工具，计算多种代码质量指标并进行趋势分析
- **Gendarme** [OSS] - 检查ECMA CIL格式中的项目和库（Mono和.NET），识别常见问题
- **.NET Analyzers** [OSS] - 致力于开发基于.NET编译平台的分析器（包括特性、代码修复和重构）
- **SonarLint for Visual Studio** [OSS] - Visual Studio扩展，向开发者反馈新bug和.NET代码质量问题
- **Refactoring Essentials** [OSS] - Visual Studio扩展，支持C#和VB.NET重构，并提供建议
- **ReSharper** [PROPRIETARY] - 扩展Visual Studio功能，支持C#、VB.NET等多种技术的动态代码检查
- **VSDiagnostics** [OSS] - 基于Roslyn并与Visual Studio集成的静态分析器集合
- **Wintellect.Analyzers** [OSS] - Wintellect开发的.NET编译平台特性分析器和代码修复工具

#### 容器
- **clair** [OSS] - 对容器进行漏洞静态分析
- **collector** [OSS] - 在容器中运行任意脚本并收集信息
- **Haskell Dockerfile Linter** [OSS] - 智能Dockerfile linter，帮助遵循最佳实践构建镜像

#### CSS
- **CSS Stats** [OSS] - 提供样式表中的有趣统计数据
- **Parker** [OSS] - 样式表分析工具
- **scss-lint** [OSS] - SCSS文件小工具
- **Specificity Graph** [OSS] - 生成CSS选择器特异性图表
- **Stylelint** [OSS] - SCSS/CSS文件小工具

#### Elixir
- **credo** [OSS] - 教育导向且关注代码一致性的静态代码分析工具

#### Go
- **dingo-hunter** [OSS] - Go程序死锁检测
- **flen** [OSS] - 获取Go包中函数长度的信息
- **go/ast** [OSS] - Go语法树表示类型的声明
- **gocyclo** [OSS] - 测量Go源代码中的圈复杂度
- **Go Meta Linter** [OSS] - 综合多个Go lint工具输出标准化
- **go vet** [OSS] - 报告Go源代码中的可疑构造
- **ineffassign** [OSS] - 检测Go代码中的无效赋值
- **safesql** [OSS] - Golang静态分析工具，防止SQL注入

#### Groovy
- **CodeNarc** [OSS] - Groovy源代码静态分析工具，确保编码规范和最佳实践

#### Haskell
- **HLint** [OSS] - 提升Haskell代码质量的工具

#### HTML
- **HTMLHint** [OSS] - HTML静态代码分析
- **HTML Inspector** [OSS] - 有助于团队提高HTML代码质量的工具

#### Java
- **checkstyle** [OSS] - 检查Java源代码是否符合特定编码标准
- **ckjm** [OSS] - 通过处理编译后的字节码来计算面向对象度量
- **Error-prone** [OSS] - 编译时捕获常见的Java错误
- **fb-contrib** [OSS] - FindBugs插件，增加额外bug检测
- **Findbugs** [OSS] - Java程序bug查找工具
- **find-sec-bugs** [OSS] - Java Web应用安全审计IDE/SonarQube插件
- **HuntBugs** [OSS] - 字节码静态分析器，旨在替代FindBugs
- **PMD** [OSS] - Java源代码分析器

#### JavaScript
- **aether** [OSS] - 程序组装、分析、标准化、重构等多功能工具
- **ClosureLinter** [OSS] - 确保JavaScript代码遵循Google风格指南
- **complexity-report** [OSS] - JavaScript项目软件复杂性分析
- **escomplex** [OSS] - JavaScript抽象语法树复杂性分析
- **eslint** [OSS] - 识别并报告JavaScript代码模式
- **Esprima** [OSS] - ECMAScript解析标准，适用于多用途分析
- **quality** [OSS] - 零配置代码质量和模块化程序集
- **jshint** [OSS] - 检测JavaScript代码中的问题