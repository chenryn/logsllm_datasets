参考来源：[Github](https://github.com/mre/awesome-static-analysis/edit/master/README.md)，FB小编鸢尾编译
静态程序分析（Static program
analysis）是指在不运行计算机程序的条件下，进行程序分析的方法。有些程序分析需要在程序运行时才能进行，这种程序分析称为动态程序分析。大部分的静态程序分析的对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。静态程序分析一词多半是指配合静态程序分析工具进行的分析，人工进行的分析一般称为程序理解或代码审查。
— 维基百科
这是一个静态分析工具大集合，其中[OSS]代表开源软件，[PROPRIETARY]代表付费软件，欢迎各位补充。
## C/C++
[CMetrics](https://github.com/MetricsGrimoire/CMetrics) [OSS] – 测算C文件的大小及复杂性
[cqmetrics](https://github.com/dspinellis/cqmetrics) [OSS] – C代码的质量度量工具
[clang-tidy](http://clang.llvm.org/extra/clang-tidy/) [OSS] – clang静态分析
[cppcheck](http://cppcheck/) [OSS] – C/C++代码静态分析
[flawfinder](http://www.dwheeler.com/flawfinder/) [OSS] – 寻找可能存在的安全漏洞
[flint++](http://l2program.co.uk/category/flint) [OSS] – 跨平台, 无依赖端口的flint,
由C++程序开发，Facebook也在用
[oclint](http://oclint.org/) [OSS] – C/C++代码静态分析
[splint](http://www.splint.org/) [OSS] – C/C++代码静态分析
[tis-interpreter](https://github.com/TrustInSoft/tis-interpreter) [OSS] –
由标准C写的一款用于寻找敏感bug的解释器
[vera++](https://bitbucket.org/verateam/vera/wiki/Introduction) [OSS] –
Vera++是一个可用于验证，分析以及变换C++源代码的可编程工具
## C
[Code Analysis Rule Collection](https://carc.codeplex.com/) [OSS] – 包含一组特征,
代码修复以及在Microsoft .NET编译器平台”Roslyn”进行了重构
[code-cracker](https://github.com/code-cracker/code-cracker) [OSS] –
一款适用于C#和VB的分析库，且使用Roslyn进行重构, 代码分析
[CSharpEssentials](https://github.com/DustinCampbell/CSharpEssentials) [OSS] –
C# Essentials是一个Roslyn特征分析程序集合, 代码修复以及进行重构让其更能适应C# 6语言的特性
[Designite](http://www.designite-tools.com/) [PROPRIETARY] –
Designite是一款设计质量评估工具，测算各种各样的代码质量度量以及趋势分析
[Gendarme](http://www.mono-project.com/docs/tools+libraries/tools/gendarme/)[OSS] – Gendarme 检测包含在ECMA
CIL 格式 (Mono and .NET)中的项目以及函数库，寻找出代码中会出现的一些常见问题（编译器一般不会检测的问题）
[.NET Analyzers](https://github.com/DotNetAnalyzers) [OSS] – 一个专注于开发分析器的组织(特征,
代码修复, 重构) ，使用.NET编译平台
[SonarLint for Visual Studio](https://github.com/SonarSource/sonarlint-vs)
[OSS] – SonarLint是Visual Studio 2015中的一个扩展，其支持向开发者动态反馈新bug以及将质量问题注入.NET代码
[Refactoring Essentials](http://vsrefactoringessentials.com/) [OSS] – Visual
Studio 2015扩展用于C#以及VB.NET重构, 提供有关代码质量的建议
[ReSharper](https://www.jetbrains.com/resharper/) [PROPRIETARY] – 扩展Visual
Studio支持动态代码检测C#, VB.NET, ASP.NET, java script, TypeScript以及其他技术
[VSDiagnostics](https://github.com/Vannevelj/VSDiagnostics) [OSS] –
一个基于Roslyn且集成了VS的静态分析器集合
[Wintellect.Analyzers](https://github.com/Wintellect/Wintellect.Analyzers)
[OSS] – Wintellect写的.NET编译平台(“Roslyn”) 特征分析器以及代码修复工具
## 容器
[clair](https://github.com/coreos/clair) [OSS] – 用于容器的漏洞静态分析
[collector](https://github.com/banyanops/collector) [OSS] – 容器内运行任意脚本,然后收集可用信息
[Haskell Dockerfile Linter](https://github.com/lukasmartinelli/hadolint) [OSS]
– 一款智能Dockerfile linter，可以帮助你构建Docker镜像最佳实践
## CSS
[CSS Stats](https://github.com/cssstats/cssstats) [OSS] – 在样式表中潜在有趣的统计数据
[Parker](https://github.com/katiefenn/parker) [OSS] – 样式表分析工具
[scsslint](https://github.com/katiefenn/parker) [OSS] – SCSS文件小工具
[Specificity Graph](https://github.com/pocketjoso/specificity-graph) [OSS] –
CSS特征性图表生成器
[Stylelint](http://stylelint.io/) – [OSS] – SCSS/CSS文件小工具
## Elixir
[credo](https://github.com/rrrene/credo) [OSS] – 一款专注于教学以及代码相容性的静态代码分析工具
## Go
[dingo-hunter](https://github.com/nickng/dingo-hunter) [OSS] –
用于在Go程序中找出deadlocks的静态分析器
[flen](https://github.com/lafolle/flen) [OSS] – 在Go程序包中获取函数长度信息
[go/ast](https://golang.org/pkg/go/ast/) [OSS] – Package
ast声明了关于Go程序包用于表示语法树的类型
[gocyclo](https://github.com/fzipp/gocyclo) [OSS] – 在Go源代码中测算cyclomatic函数复杂性
[Go Meta Linter](https://github.com/alecthomas/gometalinter) [OSS] – 同时Go
lint工具且工具的输出标准化
[go vet](https://golang.org/cmd/vet/) [OSS] – 检测Go源代码并报告可疑的构造
[ineffassign](https://github.com/gordonklaus/ineffassign) – 在Go代码中检测无效赋值
[safesql](https://github.com/stripe/safesql) [OSS] – Golang静态分析工具，防止SQL注入
## Groovy
[CodeNarc](https://github.com/CodeNarc/CodeNarc) [OSS] – 一款Groovy源代码静态分析工具,
授权检验和执行大多数编码编著以及最佳实践。
## Haskell
[HLint](https://github.com/ndmitchell/hlint) [OSS] – HLint是一款提高Haskell代码质量的工具
## HTML
[HTMLHint](https://github.com/yaniswang/HTMLHint) [OSS] – HTML静态代码分析工具
[HTML Inspector](https://github.com/philipwalton/html-inspector) [OSS] – HTML
Inspector是一款代码质量工具，用以帮助你的团队写出更好的代码
## Java
[checkstyle](https://github.com/checkstyle/checkstyle) [OSS] –
检测Java源代码以坚持一个代码标准或者一组验证规则(最佳实践)
[ckjm](http://www.spinellis.gr/sw/ckjm/) [OSS] –
通过处理编译好的Java文件的字节码来计算Chidamber和Kemerer面向对象度量工具
[Error-prone](https://github.com/google/error-prone) [OSS] –
随着编译时错误信息捕获Java常见的错误
[fb-contrib](https://github.com/mebigfatguy/fb-contrib) [OSS] –
FindBugs的一个插件，支持额外的bug检测
[Findbugs](https://github.com/findbugsproject/findbugs) [OSS] –
FindBugs是一个从Java程序中找到bugs的工具，它的查找模式可能存在误差
[find-sec-bugs](https://find-sec-bugs.github.io/) [OSS] –
IDE/Sonarcube插件用于Java web应用程序的安全审计
[HuntBugs](https://github.com/amaembo/huntbugs) [OSS] –
基于Procyon编译工具的字节码静态分析器，旨在取代FindBugs.
[PMD](https://pmd.github.io/) [OSS] – Java源代码分析器
## java script
[aether](https://github.com/codecombat/aether) [OSS] – 程序集, 分析, 标准化, 重构, 沙盒,
运行, 单步调试, 以及可视化
[ClosureLinter](https://github.com/google/closure-linter) [OSS] – 确保你项目的所有java
script代码遵循Google java script样式指南，同时他还可以自动修复许多常见错误
[complexity-report](https://github.com/jared-stilwell/complexity-report) [OSS]
– 针对java script项目的软件复杂性分析
[escomplex](https://github.com/jared-stilwell/escomplex) [OSS] – 针对java
script系的抽象语法树软件复杂性分析
[eslint](https://github.com/eslint/eslint) [OSS] – 在java script代码中对模式进行识别及报告
[Esprima](https://github.com/jquery/esprima) [OSS] – ECMAScript解析标准，支持多用途分析
[quality](https://github.com/jden/quality) [OSS] – 零配置代码和模块化程序集
[jshint](https://github.com/jshint/jshint) [OSS] – 检测java