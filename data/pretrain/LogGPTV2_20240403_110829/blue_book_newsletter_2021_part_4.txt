    [Flask-RESTPlus](https://flask-restplus.readthedocs.io/en/stable/) is an
    extension for Flask that adds support for quickly building REST APIs,
    but I'd use [FastAPI](fastapi.md) instead.
### [Optimization](python_optimization.md)
* New: [Add tips on how to optimize your python command line tools.](python_optimization.md#tips)
    * [Minimize the relative import statements on command line tools](#minimize-the-relative-import-statements-on-command-line-tools):
        When developing a library, it's common to expose the main objects into the
        package `__init__.py` under the variable `__all__`. The problem with command
        line programs is that each time you run the command it will load those objects,
        which can mean an increase of 0.5s or even a second for each command, which is
        unacceptable.
    * [Don't dynamically install the package](#dont-dynamically-install-the-package):
        If you install the package with `pip install -e .` you will see an increase on
        the load time of ~0.2s. It is useful to develop the package, but when you use
        it, do so from a virtualenv that installs it directly without the `-e` flag.
### [GitPython](gitpython.md)
* New: Introduce the python library.
    [GitPython](https://gitpython.readthedocs.io) is a python library used to
    interact with git repositories, high-level like git-porcelain, or low-level like
    git-plumbing.
    It provides abstractions of git objects for easy access of repository data, and
    additionally allows you to access the git repository more directly using either
    a pure python implementation, or the faster, but more resource intensive git
    command implementation.
    Explain how to:
    * Initialize or load repositories.
    * Make commits.
    * Interact with the history.
    * Test applications that use it.
* Improvement: Explain how to get the working directory of a repo.
    Using the `working_dir` attribute.
    perf(python_snippets#Group a list of dictionaries by a specific key) Explain how to group a list of dictionaries by a specific key
    With `itertools.groupby`.
* New: [Clone a repository.](gitpython.md#clone-a-repository)
    ```python
    from git import Repo
    Repo.clone_from(git_url, repo_dir)
    ```
* New: [Create a branch.](gitpython.md#create-a-branch)
    ```python
    new_branch = repo.create_head('new_branch')
    assert repo.active_branch != new_branch # It's not checked out yet
    repo.head.reference = new_branch
    assert not repo.head.is_detached
    ```
* New: [Get the latest commit of a repository.](gitpython.md#get-the-latest-commit-of-a-repository)
    ```python
    repo.head.object.hexsha
    ```
### [Pytest](pytest.md)
* New: [Explain how to exclude code from the coverage report.](pytest.md#excluding-code-from-coverage)
    Add `# pragma: no cover`.
* New: [Explain how to run tests in parallel.](pytest.md#running-tests-in-parallel)
    `pytest-xdist` makes it possible to run the tests in parallel, useful when the
    test suit is large or when the tests are slow.
    ```bash
    pip install pytest-xdist
    pytest -n auto
    ```
* New: [Explain how to set a timeout for your tests.](pytest.md#setting-a-timeout-for-your-tests)
    Using [pytest-timeout](https://pypi.org/project/pytest-timeout/).
* New: [Explain how to rerun tests that fail sometimes.](pytest.md#rerun-tests-that-fail-sometimes)
    With [pytest-rerunfailures](https://pypi.org/project/pytest-rerunfailures/) that is
    a plugin for pytest that re-runs tests to eliminate intermittent failures. Using
    this plugin is generally a bad idea, it would be best to solve the reason why
    your code is not reliable. It's useful when you rely on non robust third party
    software in a way that you can't solve, or if the error is not in your code but
    in the testing code, and again you are not able to fix it.
    feat(python_snippets#Create combination of elements in groups of two):
    Explain how to create combination of elements in groups of two
    ```python
    >>> list(itertools.combinations('ABC', 2))
    [('A', 'B'), ('A', 'C'), ('B', 'C')]
    ```
* New: [Exclude the `if TYPE_CHECKING` code from the coverage.](pytest.md#excluding-code-from-coverage)
    If you want [other code to be
    excluded](https://github.com/nedbat/coveragepy/issues/831), for example the
    statements inside the `if TYPE_CHECKING:` add to your `pyproject.toml`:
    ```toml
    [tool.coverage.report]
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',
        # Type checking can not be tested
        'if TYPE_CHECKING:',
    ]
    ```
* New: Introduce goodconf the pyndantic YAML friendly configuration management.
    [goodconf](https://github.com/lincolnloop/goodconf/) is a thin wrapper over
    Pydantic's settings management. Allows you to define configuration variables and
    load them from environment or JSON/YAML file. Also generates initial
    configuration files and documentation for your defined configuration.
* New: [Capture deprecation warnings.](pytest.md#capture-deprecation-warnings)
    Python and its ecosystem does not have an assumption of strict SemVer, and has a tradition of providing deprecation warnings. If you have good CI, you should be able to catch warnings even before your users see them. Try the following pytest configuration:
    ```toml
    [tool.pytest.ini_options]
    filterwarnings = ["error"]
    ```
    This will turn warnings into errors and allow your CI to break before users break.
    Other sections added are:
    * [Ensuring code triggers a deprecation warning](pytest.md#ensuring-code-triggers-a-deprecation-warning).
    * [Asserting warnings with the warns function](pytest.md#asserting-warnings-with-the-warns-function).
    * [Recording warnings](pytest.md#recording-warnings).
### [Python Snippets](python_snippets.md)
* Correction: Explain how to show the message in custom exceptions.
* New: Explain how to import a module or object from within a python program.
* New: Add today's learned python tricks.
    * [Get system's timezone and use it in
    datetime](python_snippets.md#get-systems-timezone-and-use-it-in-datetime).
    * [Capitalize a sentence](python_snippets.md#capitalize-a-sentence).
    * [Get the last monday
    datetime](python_snippets.md#get-the-last-monday-datetime).
* New: Explain how to use Jinja2.
    [Jinja2](https://jinja.palletsprojects.com) is a modern and designer-friendly
    templating language for Python, modelled after Djangoâ€™s templates. It is fast,
    widely used and secure with the optional sandboxed template execution
    environment.
    Add installation, usage and basic and advanced template guidelines.
* New: Add date management snippets.
    * [Get the week number of a datetime](python_snippets.md#get-the-week-number-of-a-datetime): `datetime.datetime(2010, 6, 16).isocalendar()[1]`.
    * [Get the Monday of a week number](python_snippets.md#get-the-monday-of-a-week-number):
      ```python
      import datetime
      d = "2013-W26"
      r = datetime.datetime.strptime(d + '-1', "%Y-W%W-%w")
      ```
    * [Get the month name from a number](python_snippets.md#get-the-month-name-from-a-number):
      ```python
      import calendar
      >> calendar.month_name[3]
      'March'
      ```
    * [Get ordinal from number](python_snippets.md#get-ordinal-from-number)
      ```python
      def int_to_ordinal(number: int) -> str:
          '''Convert an integer into its ordinal representation.
          make_ordinal(0)   => '0th'
          make_ordinal(3)   => '3rd'
          make_ordinal(122) => '122nd'
          make_ordinal(213) => '213th'
          Args:
              number: Number to convert
          Returns:
              ordinal representation of the number
          '''
          suffix = ['th', 'st', 'nd', 'rd', 'th'][min(number % 10, 4)]
          if 11 >> small.items() >> def multisort(xs, specs):
        for key, reverse in reversed(specs):
            xs.sort(key=attrgetter(key), reverse=reverse)
        return xs
    >>> multisort(list(student_objects), (('grade', True), ('age', False)))
    [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
    ```
* Correction: [Install default directories and files for a command line program.](python_snippets.md#install-default-directories-and-files-for-a-command-line-program)
    I've been trying for a long time to configure `setup.py` to run the required
    steps to configure the required directories and files when doing `pip install`
    without success.
    Finally, I decided that the program itself should create the data once the
    `FileNotFoundError` exception is found. That way, you don't penalize the load
    time because if the file or directory exists, that code is not run.
* New: [Locate element in list.](python_snippets.md#locate-element-in-list)
    ```python
    a = ['a', 'b']
    index = a.index('b')
    ```
* New: [Transpose a list of lists.](python_snippets.md#transpose-a-list-of-lists)
    ```python
    >>> l=[[1,2,3],[4,5,6],[7,8,9]]
    >>> [list(i) for i in zip(*l)]
    ... [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    ```
* New: [Check the type of a list of strings.](python_snippets.md#check-the-type-of-a-list-of-strings)
    ```python
    def _is_list_of_lists(data: Any) -> bool:
        """Check if data is a list of strings."""
        if data and isinstance(data, list):
            return all(isinstance(elem, list) for elem in data)
        else:
            return False
    ```
* New: [Replace all characters of a string with another character.](python_snippets.md#replace-all-characters-of-a-string-with-another-character)
    ```python
    mystring = '_'*len(mystring)
    ```