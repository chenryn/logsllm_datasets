0 16384000 linear 8:2 41156992
```
::: para
以下示例演示了将设备参数指定为 `/dev/hda`{.filename} 的线性目标。
:::
``` screen
0 20971520 linear /dev/hda 384
```
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#striped-map}A.1.2. 条带映射目标 {.title}
:::
::: para
条带映射目标支持所有跨物理设备的条带。它使用条带数目和成条的组集大小以及设备名称和扇区对作为参数。条状目标的格式如下：
:::
``` screen
start length striped #stripes chunk_size device1 offset1 ... deviceN offsetN
```
::: para
每个条块都有一组 *`device`* 和 *`offset`* 参数。
:::
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`#stripes`*]{.term}
:   ::: para
    虚拟设备的条数
    :::
[*`chunk_size`*]{.term}
:   ::: para
    切换到下一个条之前写入每个条的扇区数，必须至少是内核页面大小的两倍
    :::
[*`device`*]{.term}
:   ::: para
    块设备，可被该文件系统中的设备名称或者主号码和副号码以格式
    *`major`*:*`minor`* 参考。
    :::
[*`offset`*]{.term}
:   ::: para
    该设备中映射的起始偏移
    :::
:::
::: para
以下示例显示了一个有三个条，且组集大小为 128 的条状目标：
:::
``` screen
0 73728 striped 3 128 8:9 384 8:8 384 8:7 9789824
```
::: variablelist
[0]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[73728]{.term}
:   ::: para
    这个片段的长度
    :::
[striped 3 128]{.term}
:   ::: para
    三个设备中组集大小为 128 块的条带
    :::
[8:9]{.term}
:   ::: para
    第一个设备的 major:minor 号码
    :::
[384]{.term}
:   ::: para
    第一个设备中映射的起始偏移
    :::
[8:8]{.term}
:   ::: para
    第二个设备的 major:minor 号码
    :::
[384]{.term}
:   ::: para
    第二个设备中映射的起始偏移
    :::
[8:7]{.term}
:   ::: para
    第三个设备的 major:minor 号码
    :::
[9789824]{.term}
:   ::: para
    第三个设备中映射的起始偏移
    :::
:::
::: para
以下示例显示了含有两个 256KiB
条，使用文件系统中的设备名称而不是主号码和副号码指定设备参数的条状目标。
:::
``` screen
0 65536 striped 2 512 /dev/hda 0 /dev/hdb 0
```
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#mirror-map}A.1.3. 镜像映射目标 {.title}
:::
::: para
镜像映射目标支持镜像逻辑设备映像。镜像目标格式如下：
:::
``` screen
start length mirror log_type #logargs logarg1 ... logargN #devs device1 offset1 ... deviceN offsetN
```
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`log_type`*]{.term}
:   ::: para
    可能的日志类型及其参数如下：
    :::
    ::: variablelist
    [`core`{.literal}]{.term}
    :   ::: para
        镜像是本地的，镜像日志保存在核内存中。这个日志类型有 1-3
        个参数：
        :::
        ::: para
        *regionsize* \[\[`no`{.literal}\]`sync`{.literal}\]
        \[`block_on_error`{.literal}\]
        :::
    [`disk`{.literal}]{.term}
    :   ::: para
        镜像是本地的，镜像日志保存在磁盘中。这个日志类型可附加 2-4
        个参数：
        :::
        ::: para
        *logdevice regionsize* \[\[`no`{.literal}\]`sync`{.literal}\]
        \[`block_on_error`{.literal}\]
        :::
    [`clustered_core`{.literal}]{.term}
    :   ::: para
        镜像是集群的，镜像日志保存在 core 内存中。这个日志类型可附加 2-4
        个参数：
        :::
        ::: para
        *regionsize UUID* \[\[`no`{.literal}\]`sync`{.literal}\]
        \[`block_on_error`{.literal}\]
        :::
    [`clustered_disk`{.literal}]{.term}
    :   ::: para
        镜像是集群的，镜像日志保存在磁盘中。这个日志类型可附加 3-5
        个参数：
        :::
        ::: para
        *logdevice regionsize UUID*
        \[\[`no`{.literal}\]`sync`{.literal}\]
        \[`block_on_error`{.literal}\]
        :::
    :::
    ::: para
    LVM
    保存一个小日志用来跟踪与该镜像或者多个镜像同步的区域。*regionsize*
    参数指定这些区域的大小。
    :::
    ::: para
    在集群环境中，*UUID*
    参数是与镜像日志设备关联的特定识别符，以便可通过该集群维护日志状态。
    :::
    ::: para
    可使用自选的 `[no]sync`{.literal} 参数将镜像指定为 \"in-sync\" 或者
    \"out-of-sync\"。`block_on_error`{.literal}
    参数是用来让镜像对错误做出响应，而不是忽略它们。
    :::
[*`#log_args`*]{.term}
:   ::: para
    将在映射中指定的日志参数数目
    :::
[*`logargs`*]{.term}
:   ::: para
    镜像的日志参数；提供的日志参数数目是由 *`#log-args`*
    参数指定的，且有效日志参数由 *`log_type`* 参数决定。
    :::
[*`#devs`*]{.term}
:   ::: para
    镜像中的分支数目；为每个分支指定一个设备和一个偏移
    :::
[*`device`*]{.term}
:   ::: para
    每个镜像分支的块设备，使用该文件系统中的设备名称或者主号码和副号码以
    *`major`*:*`minor`* 的格式参考。每个镜像分支都有一个块设备和误差，如
    *`#devs`* 参数中所示。
    :::
[*`offset`*]{.term}
:   ::: para
    设备中映射的起始偏移。每个镜像分支都有一个块设备和偏移，如 *`#devs`*
    参数中所示。
    :::
:::
::: para
下面的示例演示了集群映像的镜像映像目标，并将该映像的映像日志保存在磁盘中。
:::
``` screen
0 52428800 mirror clustered_disk 4 253:2 1024 UUID block_on_error 3 253:3 0 253:4 0 253:5 0
```
::: variablelist
[0]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[52428800]{.term}
:   ::: para
    这个片段的长度
    :::
[mirror clustered_disk]{.term}
:   ::: para
    镜像目标，其日志类型指定该镜像为集群镜像，并在磁盘中保存期镜像日志。
    :::
[4]{.term}
:   ::: para
    附带 4 个镜像日志参数
    :::
[253:2]{.term}
:   ::: para
    日志设备的 major:minor 号码
    :::
[1024]{.term}
:   ::: para
    镜像日志用来跟踪进行同步的区域大小
    :::
[*`UUID`*]{.term}
:   ::: para
    镜像日志设备的 UUID，该设备上用来维护集群吞吐量信息。
    :::
[`block_on_error`{.literal}]{.term}
:   ::: para
    镜像应该对错误进行响应
    :::
[3]{.term}
:   ::: para
    镜像中的分支数
    :::
[253:3 0 253:4 0 253:5 0]{.term}
:   ::: para
    构成镜像每个分支的设备的 major:minor 号码和偏移
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#snapshot-map}A.1.4. 快照和原始快照映射目标 {.title}
:::
::: para
创建某个卷的第一个 LVM 快照时，使用了四个 Device Mapper 设备：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    包含源卷原始映射表的`线性`{.literal}映射设备。
    :::
2.  ::: para
    作为源卷即写即拷（copy-on-write，COW）设备使用的有`线性`{.literal}映射的设备；每次写入时，会将原始数据保存在每个快照的
    COW 设备中以便保持不更改可见内容（直到 COW 设备写满为止）。
    :::
3.  ::: para
    附带`快照`{.literal}映射及 #1 和 ＃2 的设备，它是可见快照卷。
    :::
4.  ::: para
    "原始"卷（使用源卷使用的设备号码），其列表由来自设备 #1 的
    "snapshot-origin"映射替换。
    :::
:::