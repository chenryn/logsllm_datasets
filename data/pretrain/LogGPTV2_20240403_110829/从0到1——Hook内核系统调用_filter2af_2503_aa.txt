# 从0到1——Hook内核系统调用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本文对kernel双机调试环境搭建、基础LKM编写、内核Hook系统调用、内核模块在不同机器上的加载进行了简单的介绍。
## 0x00 前言
先介绍一下背景吧，目前IOT设备发展可谓如火如荼，在研究的时候作为一个懒狗，总想能够找到一些比较通用的办法，root
shell已经不足以满足我了，于是就把罪恶的手伸向了内核，想要在内核里做一个Hook，但是在实际查看环境的时候才发现，很多IOT设备在出厂的时候，把
`build` 目录都给删了，能获取到的信息只有通过 `uname -sr`
查看到的版本号，因为对内核没有什么基础，最开始上手的时候极其困难，踩了许多坑，特此总结一下，同时也希望能给后入坑的师傅们做个参考。因为想尽量的细致的把这个流程写出来，很多东西可能比较啰嗦，见谅见谅。
## 0x01 双机调试环境搭建
    如果从方便的角度来讲的话，qemu+gdb无疑是比较简便的调试方式，但是在自己之前接触的过程中发现qemu调试相对于双机调试来说还是存在其局限性的，因此个人还是建议要对内核进行调试的话还是使用双机调试的方式会比较舒服。其实如果编写的内核模块比较简单的话，通过 `dmesg` 的方式就已经可以提供很大的帮助了。
> 调试环境基于 Vmware + Centos 7 进行搭建
###  0x1 编译内核
    ~~搭建环境选择的kernel为 ~~`~~3.10.0~~`~~ ，这里建议的是kernel版本与系统发行时使用的kernel版本尽量接近，以免出现一些奇奇怪怪的问题。~~
这里建议选择下载rpm.src包后解包进行安装，本以为不会在这块踩坑了，无奈还是踩了个大坑，从官方源下载的kernel源码编译安装后无法正常进入系统，一直会有一个小光标在那闪来闪去闪来闪去。。目前走通的步骤如下：
  * 下载源码包 
        wget http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.21.1.el7.src.rpm
  * 安装源码包 
        rpm -ivh kernel-3.10.0-693.21.1.el7.src.rpm
  * 解压内核源码 
        cd /root/rpmbuild/SOURCES/
    tar -xvf linux-3.10.0-693.21.1.el7.tar.xz
    cd linux-3.10.0-693.21.1.el7
  * 编译内核
在这里可能会遇到些依赖库的问题，可能需要自行安装一下，我这里碰到的是 `ncurses-devel`
    make menuconfig
为方便后续的调试，需要勾掉下面这个选项，在开启该选项的情况下，会将内核一些区域设置为只读，导致kgdb设置的断点失效。
编译安装
    make -j $(nproc)
    make modules_install
    make install
**编译完成以后就可以把当前虚拟机克隆作为调试机了。**
###  0x2 配置调试选项
**1\. server端**
  * 生成initrd文件 
        mkinitrd initrd.img-xxx xxx        // xxx 为版本号
  * 拷贝文件 
        cp -r linux-xxx /usr/src/
    cd /usr/src/linux-xxx
    cp arch/x86_64/boot/bzImage  /boot/vmlinuz-xxx-kgdb
    cp System.map /boot/System.map-xxx-kgdb
    cp initrd.img /boot/initrd.img-xxx-kgdb
  * 配置grub
使得默认内核启动的时候使用串口并等待gdb连接。
    vim /etc/default/grub
        新增一行 GRUB_CMDLINE_LINUX_DEFAULT="quiet splash text kgdbwait kgdboc=ttyS0,115200"
    grub2-mkconfig -o /boot/grub2/grub.cfg
  * 添加串口
**2\. client端**
  * 配置grub 
        vim /etc/default/grub
      GRUB_CMDLINE_LINUX 中增加 "kgdboc=ttyS0,115200"
    grub2-mkconfig -o /boot/grub2/grub.cfg
  * 添加串口
###  0x3 开始调试
当Server端开机后选择新编译的内核后进入如下图的状态后，说明目前内核处于挂起状态，在等待kgdb连接。
此时通过client端的gdb进行连接后即可调试内核了
我在这次编码过程中用到的调试手段还是主要以 dmesg 查看报错为主的，因此内核双机调试这块暂时就写到这里了，后续有机会的话会尝试一下
vscode+kgdb 的调试方式，毕竟源码调试内核才是王道。
## 0x02 内核 Hook 简介
**1\. linux kernel Hook技术简介**
从分类上来讲，Linux Kernel Hook其实是属于Linux RootKit的一种，通过编写LKM(Loadable Kernel Modules
可加载内核模块)来扩展Linux内核的功能，LKM相对于直接在内核中添加代码而言，具有可插拔，无需重新编译内核的特点，因此LKM原本的是被大量应用与设备驱动程序的编写中的，同时也因为上述的优点，以及内核高权限的诱惑，LKM也常常被应用于Linux
rootkit中。
**2\. 系统调用流程简介**
    在介绍如何Hook之前，首先需要学习一下kernel里系统调用的实现，内核里实现了各种各样的功能，最终通过系统调用的方式向用户层提供其接口。
以execve为例：
  * 用户态转入内核态
用户态程序调用execve后，首先引发系统中断，根据EAX的功能号__NR_execve在系统调用表(sys_call_table)中查询到对应系统调用的入口地址。
    ...
    #define __NR_link          9
    #define __NR_unlink         10
    #define __NR_execve         11
    #define __NR_chdir         12
    #define __NR_time         13
    #define __NR_mknod         14
    #define __NR_chmod         15
    ...
  * 获取系统调用地址
在查询到的系统调用入口这里不同内核版本的结果是不太一样的，对于Linux kernel  2.6 也就是本次使用的 Linux 3.x
系列的内核中，sys_execve 外层套了一个壳： stub_execve，由这个系统调用中转后再调用 sys_execve，这个方式在 Linux
kernel 4.x 的版本中貌似又被去除了，因此对于 Linux kernel 3.x 的 Hook就要采用不同的方式进行 Hook。
    ENTRY(stub_execve)
        CFI_STARTPROC
        addq $8, %rsp
        PARTIAL_FRAME 0
        SAVE_REST
        FIXUP_TOP_OF_STACK %r11
        call sys_execve
        movq %rax,RAX(%rsp)
        RESTORE_REST
        jmp int_ret_from_sys_call
        CFI_ENDPROC
    END(stub_execve)
    ENTRY(stub_x32_execve)
        CFI_STARTPROC
        addq $8, %rsp
        PARTIAL_FRAME 0
        SAVE_REST
        FIXUP_TOP_OF_STACK %r11
        call compat_sys_execve
        RESTORE_TOP_OF_STACK %r11
        movq %rax,RAX(%rsp)
        RESTORE_REST
        jmp int_ret_from_sys_call
        CFI_ENDPROC
    END(stub_x32_execve)
  * sys_execve
通过sys_call_table获取到的sys_execve最终是通过do_execve来完成其功能，在sys_execve这一层面主要做了要执行文件的文件信息校验，确认要执行的文件无误后传入do_execve中。
       45  * sys_execve() executes a new program.
       46  */
       47 asmlinkage long sys_execve(const char __user *filenamei,
       48                const char __user *const __user *argv,
       49                const char __user *const __user *envp,
       50                struct pt_regs *regs)
       51 {
       52     long error;
       53     struct filename *filename;
       54 
       55     filename = getname(filenamei);
       56     error = PTR_ERR(filename);
       57     if (IS_ERR(filename))
       58         goto out;
       59     error = do_execve(filename->name, argv, envp, regs);
       60     putname(filename);
       61 out:
       62     return error;
       63 }
在do_execve后还有do_execve_common，实际的执行逻辑其实都在do_execve_common中实现，但这些并不是这篇文章的重点，有兴趣的话可以自行去查看一下相关的代码。
**3\. 如何进行Hook**
通过上述对系统调用流程的简介可以发现，从用户层到内核层的最关键的一个位置就在于sys_call_table中的内容，如果我们修改了sys_call_table中调用号对应的地址为我们所插入的LKM中函数的地址的话，就可以完成对特定系统调用的Hook了。  
对于 Linux Kernel 
    #include 
    #include 
    MODULE_LICENSE(“GPL”);
    MODULE_AUTHOR(“user”);
    MODULE_DESCRIPTION(“A simple example Linux module.”);
    MODULE_VERSION(“0.1”);
    static int __init hello_init(void) {
    printk(KERN_INFO “Hello, World!\n”);
    return 0;
    }
    static void __exit hello_exit(void) {