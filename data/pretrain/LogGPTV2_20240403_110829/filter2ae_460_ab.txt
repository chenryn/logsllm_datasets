      password1 = claripy.BVS('password1', 64)
      password2 = claripy.BVS('password2', 64)
      password3 = claripy.BVS('password3', 64)
      password0_address = 0xa1ba1c0
      initial_state.memory.store(password0_address, password0)
      initial_state.memory.store(password0_address + 0x8,  password1)
      initial_state.memory.store(password0_address + 0x10, password2)
      initial_state.memory.store(password0_address + 0x18, password3)
      simulation = project.factory.simgr(initial_state)
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Good Job.\n' in stdout_output:
          return True
        else: return False
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Try again.\n' in stdout_output:
          return True
        else: return False
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = solution_state.solver.eval(password0,cast_to=bytes)
        solution1 = solution_state.solver.eval(password1,cast_to=bytes)
        solution2 = solution_state.solver.eval(password2,cast_to=bytes)
        solution3 = solution_state.solver.eval(password3,cast_to=bytes)
        solution = solution0 + b" " + solution1 + b" " + solution2 + b" " + solution3
        print("[+] Success! Solution is: {}".format(solution.decode("utf-8")))
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main()
运行成功
## 06_angr_symbolic_dynamic_memory
这个挑战跟上一个没有太大区别，知识保存字符串的内存使用 **malloc** 分配，而不是保存在栈上。
下面我们逐块分析。
蓝绿两个色块里面用 **malloc** 分配了两块内存，大小都为9个字节。并将返回的地址分别保存在 `buffer0` , `buffer1`
，这两个buffer地址分别是 **0xABCC8A4** 和 **0xABCC8AC** 。
可以看到调用 **scanf** ，并向两个地址写入两个8字节字符串（因为还有一个 `null`,所以malloc申请9个字符，并初始化为0）。
可以看到这里与上一个题目非常像：一个局部变量保存在 **[EBP - 0xC]** ， 然后判断它是否等于7.
  1. 两个输入的字符串全是8字节。
  2. 从0到7有8次迭代。
  3. 下面的代码块每执行一次都会加1.
我们可以假设这里是一个 **for** 循环，它每次循环都会分别访问两个字符串的1个字节。，如果您仔细看前面的代码块，就会发现，每次迭代都会以 `[EBP
- 0xC]` 作为索引字符串的第n个字节。每访问一个字节就会执行一次 **complex_function** 。
看一下 **complex_function** 函数：
进行了通常的数学变换操作。，像先前的挑战一样，有一个 **Try Again** 代码块。在回头看main函数，看看循环以后发生了什么。
在这一块，`buffer0`跟`buffer1`的内容会分别跟两个不同的字符串作比较，都一样的话，才会输出 **Good Job**
。在解决这个问题之前，我们先概括一下我们知道的：
  1. 程序申请了两个9字节的buffer。
  2. 输入两个8字节字符串。
  3. 循环了8次。
  4. 每次迭代都会用 **complex_function** 函数”加密“ 输入的两个字符串。
  5. 之后分别将这两个字符串与程序内置字符串作比较。
  6. 如果全相同就成功了。
看一下 **scaffold06.py** 文件：
    import angr
    import claripy
    import sys
    def main(argv):
      path_to_binary = argv[1]
      project = angr.Project(path_to_binary)
      start_address = ???
      initial_state = project.factory.blank_state(addr=start_address)
      password0 = claripy.BVS('password0', ???)
      ...
      fake_heap_address0 = ???
      pointer_to_malloc_memory_address0 = ???
      initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)
      ...
      initial_state.memory.store(fake_heap_address0, password0)
      ...
      simulation = project.factory.simgr(initial_state)
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        return ???
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = solution_state.se.eval(password0,cast_to=str)
        ...
        solution = ???
        print solution
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main(sys.argv)
    def main():
      path_to_binary = "./06_angr_symbolic_dynamic_memory"
      project = angr.Project(path_to_binary) # (1)
      start_address = 0x8048699 
      initial_state = project.factory.blank_state(addr=start_address) # (2)
      password0 = claripy.BVS('password0', 64) # (3)
      password1 = claripy.BVS('password1', 64)
在（1）建立一个项目。然后我们决定从哪里开始并相应地设置一个状态（2）。注意，我们从地址 **0x8048699** 开始，该地址指向调用
**scanf** 之后的指令 **mov dword[ebp-0xc]，0x0** 。我们跳过了所有的 **malloc** 函数
，稍后我们将在脚本中处理它们。之后，我们初始化两个64位的符号位向量（3）。
下一部分：
    fake_heap_address0 = 0xffffc93c # (1)
    pointer_to_malloc_memory_address0 = 0xabcc8a4 # (2)
    fake_heap_address1 = 0xffffc94c # (3)
    pointer_to_malloc_memory_address1 = 0xabcc8ac # (4)
    initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness) # (5)
    initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness) # (6)
    initial_state.memory.store(fake_heap_address0, password0) # (7)
    initial_state.memory.store(fake_heap_address1, password1) # (8)
这里是关键，angr并不会真正的运行程序，所以不需要一定把内存分配到堆上，可以伪造任何地址，我们在栈上分配了两个地址，如（1）（3）所示。并将
`buffer0`,`buffer1`地址分别赋值给
`pointer_malloc_memory_address0`,`pointer_malloc_memory_address1`，如（2）（4）。之后我们告诉angr，将
两个fake address分别保存到 `buffer0`,`buffer1` ，因为程序实际执行的时候就会把 **malloc**
返回的地址保存到这里。最后我们把符号位向量保存到 伪造的地址里。下面捋一下这几个地址的关系：
    BEFORE:
    buffer0 -> malloc()ed address 0 -> string 0
    buffer1 -> malloc()ed address 1 -> string 1
    AFTER:
    buffer0 -> fake address 0 -> symbolic bitvector 0
    buffer1 -> fake address 1 -> symbolic bitvector 1
我们用伪造的地址取代了malloc返回的地址，并保存符号位向量。
    simulation = project.factory.simgr(initial_state) # (1)
    def is_successful(state): # (2)
      stdout_output = state.posix.dumps(sys.stdout.fileno())
      if b'Good Job.\n' in stdout_output:
        return True
      else: return False
    def should_abort(state): # (3)
      stdout_output = state.posix.dumps(sys.stdout.fileno())
      if b'Try again.\n' in stdout_output:
        return True
      else: return False
    simulation.explore(find=is_successful, avoid=should_abort) # (4)
    if simulation.found:
      solution_state = simulation.found[0]
      solution0 = solution_state.solver.eval(password0, cast_to=bytes) # (5)
      solution1 = solution_state.solver.eval(password1, cast_to=bytes)
      print("[+] Success! Solution is: {0} {1}".format(solution0.decode('utf-8'), solution1.decode('utf-8'))) # (6)
    else:
      raise Exception('Could not find the solution')
在（1）初始化仿真，在（2）（3）像以前一样定义两个函数，用于选出我们感兴趣的路径。然后探索代码路径，如找到解，就将对应的符号位向量转换为对应的字符串，然后打印出来，下面是完整的脚本。
    import angr
    import claripy
    import sys
    def main():
      path_to_binary = "./06_angr_symbolic_dynamic_memory"
      project = angr.Project(path_to_binary)
      start_address = 0x8048699
      initial_state = project.factory.blank_state(addr=start_address)
      password0 = claripy.BVS('password0', 64)
      password1 = claripy.BVS('password1', 64)
      fake_heap_address0 = 0xffffc93c
      pointer_to_malloc_memory_address0 = 0xabcc8a4
      fake_heap_address1 = 0xffffc94c
      pointer_to_malloc_memory_address1 = 0xabcc8ac
      initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)
      initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)
      initial_state.memory.store(fake_heap_address0, password0)
      initial_state.memory.store(fake_heap_address1, password1)
      simulation = project.factory.simgr(initial_state)
      def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Good Job.\n' in stdout_output:
          return True
        else: return False
      def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Try again.\n' in stdout_output:
          return True
        else: return False
      simulation.explore(find=is_successful, avoid=should_abort)
      if simulation.found:
        solution_state = simulation.found[0]
        solution0 = solution_state.solver.eval(password0, cast_to=bytes)
        solution1 = solution_state.solver.eval(password1, cast_to=bytes)
        print("[+] Success! Solution is: {0} {1}".format(solution0.decode('utf-8'), solution1.decode('utf-8')))
      else:
        raise Exception('Could not find the solution')
    if __name__ == '__main__':
      main()