mmap, page fault, bcopy (block memory copy), mmap read
4
http://www.dwheeler.com/sloccount/
Figure 6: Implementation of the Fides architecture.
module and allows easy handling of function pointers with-
out having to use the LLVM intermediate representation. In
step two, the module of the target of the function pointer
is authenticated, if required. The spm_id of the destination
is stored within the boundaries of the module to limit the
cost of subsequent calls. Finally, possible side channels that
leak information about the inner state of the module, such
as the condition ﬂags and save-by-caller registers are cleared
and the value of the stack pointer is stored before a jump to
the function pointer is made. A special return entry point is
added to the module (one per module) to facilitate returns
from the function. As with any entry point, the return lo-
cation after the module has serviced the request, is passed
through register %rbp.
Compiler limitations.
While modules can be written in standard C-code, some
source code annotations are required. Allocation requests
using the standard malloc function, for example, must spec-
ify where the memory should be allocated. A support library
has been created to statically link functions of the libc li-
brary with the module.
5. EVALUATION
5.1 Security Evaluation
Fides oﬀers strong security guarantees to compiled mod-
ules by relying on a run-time system of only limited size and
a compiler. We now discuss both components.
Run-time system.
The run-time system implements a program-counter based
access control mechanism in three layers. At the lowest level
we rely on the TPM chip and assume that an attacker is not
able to launch physical attacks against the system. When
the Fides architecture is loaded, a dynamic root of trust
measurement (DRTM) is started, measuring the memory
state of the system. Based on this measurement the cryp-
tographic keys used by the Vault are sealed in the TPM.
An attacker that compromised the correct loading of Fides,
for example by modifying the binary on disk, will cause an
incorrect measurement and access to the sealed keys is pre-
vented. As the Vault is the only SPM that stores persistent
data, access to sensitive data is prevented.
In the second layer, the hypervisor protects all security
sensitive memory locations against faulty legacy applica-
tions and a compromised kernel. This includes secrecy of
conﬁdential data as well as integrity of code.
The third layer, the security kernel, protects modules from
potentially malicious SPMs by realizing the program-counter
dependent access control model.
9Entry
Round trip
SPM Driver Overhead
8,167.14%
4.35
6.58
8,781.73%
0.05
0.07
Table 3: SPM vs. driver access overhead (in µs).
one-way auth.
two-way auth.
timing
overhead
tstSPM sha512
95.72
tstSPM sha512
7.82
110.63
6.03% 1,198% 12.22% 1,400%
8.28
(a) SPECint 2006
Table 4: Microbenchmarks measuring the cost (in
µs) of calling an (authenticated) SPM.
given the substantial security guarantees, these costs seem
very acceptable.
The second microbenchmark measures the cost of diﬀerent
authentication techniques, over an average of 100,000 runs.
Two SPMs were created, called Ping and Pong. Ping invokes
a service in Pong that simply returns a static response. Four
diﬀerent setups were used, shown in table 4. Performance
results without any authentication measured 7.37µs and is
used as the baseline. Columns one and two display results
for one-way authentication. Column one measures repeated
authentication where Fides is requested to check the spm_id
of the called module and column two measures an initial
authentication using SHA-512 and the lytSPM system call,
which is less ﬂexible than authentication using a security
report, but used, for example, by the Vault. Initial authen-
tication has a performance penalty of 1,197.97%. Repeated
authentication is much less expensive at 6.03%. Similar tests
were conducted for two-way authentication. Performance
penalties increased to 1,400.06% and 12. 22% respectively.
5.2.3
SSL-Enabled Web Server
As a macrobenchmark, we protected an SSL-enabled web
server. Our goal was not only to protect the web server’s
long term secret, but the entire SSL-connection, including
session information. This prevents a kernel-level attacker
from hijacking the connection and renders him only as pow-
erful as an attacker with complete control over the network.
We used the PolarSSL cryptographic library5 and some
functions of the diet libc library that are security sensi-
tive in our use case (i.e. sscanf) to implement the SPM.
We also implemented our own simple malloc memory man-
agement. The NSPR6 library was used to create a multi-
threaded server. Each connection is handled in a separate
thread with its own SPM.
We used the Apache Benchmark to benchmark a web
server returning a static 74-byte page to the client over an
SSL-connection protected by a 1024-bit RSA encryption key.
Table 5 displays the server’s performance with a varying
number of concurrent tranctions, each setup receiving 10,000
requests. Repeated context switches during the SSL negoti-
ation phase lead to a performance cost of up to 13.93%.
6. RELATED WORK
There exists a vast body of research on software secu-
rity. For system-level software, memory safety related vul-
5
6
http://polarssl.org/
https://www.mozilla.org/projects/nspr/
(b) lmbench
Figure 7: The performance impact on the overall
system
(read from a ﬁle mapped into a process), and socket (local
communication by socket). All tests show a performance
overhead of less than 10% and on average even as low as
3.22%. As our implementation does not require any addi-
tional computation when no SPMs are executed, this perfor-
mance overhead can be contributed completely to the hard-
ware virtualization support. We expect that as this support
matures, overhead will be reduced further. Also note that
Fides can be unloaded when it is no longer required, reduc-
ing the overhead to 0%.
5.2.2 Local communication between SPMs
To measure the impact of communication, two microbench-
marks were used. The ﬁrst one measures the cost of a call to
an SPM compared to a call to a similar driver in the legacy
operating system. A simple SPM of two 4 KiB pages was
used for the test. When its entry point is executed, it imme-
diately passes control back to the calling application. The
driver used for comparison is similar. When it is accessed
using the ioctl interface, it immediately returns. Table 3 dis-
plays two results. The Entry row shows the measurement
of the time between the point of call in the user applica-
tion and the point of delivery in the SPM or driver. The
Round trip row measures the time between call and return.
Each test was executed 100,000 times. Results show a per-
formance overhead of 8,167% and 8,781% respectively. This
signiﬁcant overhead is caused by the fact that for each SPM
invocation two VM entries and exits are required to pass
execution control from the legacy VM to the secure VM and
back, as well as four context switches from supervisor to user
mode are required (two in each VM, see Fig. 6). However,
10Concurrency Unprotected Protected
1
5
10
50
100
50.27
83.72
97.34
102.73
103.10
50.09
83.26
83.44
89.27
88.74
Table 5: HTTPS-server performance (in #req/s).
nerabilities are an important threat. We refer the reader to
Younan et al. [39] for a comprehensive survey and to Erlings-
son et al. [12] for a gentle introduction. Practical counter-
measures however, cannot defend against all possible attacks
and countermeasures with strong guarantees typically come
with a signiﬁcant cost.
An alternative approach is to turn to formal veriﬁcation
of systems and applications to provide very strong assurance
of security properties. Impressive achievements include the
veriﬁcation of the HyperV hypervisor [6], and the complete
seL4 microkernel
[16]. While seL4 is also able to provide
strong security guarantees, a key design objective for Fides
is compatibility with legacy operating systems: what should
minimally change to a commodity OS to support protection
of critical software components against kernel-level malware.
For that design objective Fides outperforms seL4 easily.
Other research results proposes hardware modiﬁcations to
increase security guarantees [37, 38]. However, one of our
objectives is to remain compatible with existing systems.
Yet another line of research takes advantage of virtualiza-
tion techniques to increase the protection of sensitive data
by increasing protection of the kernel [30] or applications [10,
36, 5] in the presence of malware. While these research re-
sults present interesting solutions, we are not convinced that
they can ever be made provable secure due to a possibly very
large TCB. The line of research most related to the work in
this paper sets out to bootstrap trust in commodity comput-
ers by securely capturing a computer’s state. An excellent
survey of this research ﬁeld is given by Parno et al. [25]. We
only discuss the most relevant work.
Existing research can be categorized based on the root of
trust. Some works assume a trusted boot sequence to start a
hypervisor before the commodity operating system is loaded.
Terra [13] takes this approach to isolate closed boxes of soft-
ware. Possible attack vectors are minimized by preventing
additional code to be loaded in the box. Nizza [33] takes a
more integrated approach, executing small pieces of code in
isolation on the Nizza microkernel. While this architecture
is similar to Fides, its TCB of 100,000 lines of code is an
order of magnitude larger.
The root of trust can also be started dynamically, after
the system has booted. Pioneer [31] and Conqueror [18]
take this approach completely in software. However, many
assumptions are hard to guarantee in practice and conﬁden-
tiality of data cannot be provided.
Stronger guarantees can be provided when the TPM chip
is used [7, 14]. Seminal work in this ﬁeld has been conducted
by McCune et al. Their Flicker architecture [21] can execute
pieces of code, called PALs, in complete isolation while se-
crecy of sensitive information is guaranteed. The TPM chip
is used intensively by Flicker, leading to a signiﬁcant per-
formance cost. The TrustVisor architecture [20] mitigates
many of these disadvantages by using a hypervisor and a
software delegate of the TPM chip. P-MAPS [28] operates
similar to TrustVisor but does allow protected code to access
unprotected pages. More recently, Azab et al. showed [4]
that the System Management Mode (SMM) can be used to
implement a hypervisor-like security measure, ensuring in-
tegrity and security of module code and data. While these
systems also oﬀer strong isolation of modules, their focus is
on remote attestation. They are ill-equipped for practical
implementation of applications with a large number of (in-
terconnected) modules: (1) writing co-operating protected
modules is hard since modules do not share the same ad-
dress space. (2) Messages sent between modules may never
be delivered. (3) A lack of support for multiple instances
of the same module makes it extremely challenging to build
modular systems. Our approach mitigates these disadvan-
tages by combining a run-time system and a compiler to al-
low programmers to easily develop protected modules that
are able to seamlessly interact with unprotected code and
other modules. Fides’ dual VM architecture also ensures 7
to 2,000 times (TrustVisor and Flicker, resp.) faster context
switches from unprotected memory to SPM’s.
Finally, our own previous work on trusted subsystems
in embedded systems [34] proposed a program-counter de-
pendent memory access control model. An implementation
technique was sketched for embedded systems with a ﬂat
address space and with special-purpose hardware support.
El Defrawy et al. [9] implemented attestation of code in em-
bedded devices based on this access control model, but lim-
ited themselves to only a single module. This signiﬁcantly
reduces the complexity of a hardware implementation as no
primitives for module creation, destruction or authentica-
tion is needed. A full hardware implementation for high-end
CPUs may not be feasible as the access control mechanism
would require interaction with existing memory translation
mechanisms. A key contribution of Fides is that it shows
that similar ideas can be implemented on commodity hard-
ware while remaining fully compatible with legacy software.
7. CONCLUSIONS
Commodity operating systems have been proven hard to
protect against kernel-level malware. This paper presented
a combined run-time system and compiler approach to se-
lectively harden modules. Using a program-counter based
access control model, programmers are able to develop mod-
ules in standard C-code that co-operate seamlessly with un-
protected code and other modules. It has been proven that
such modules are fully protected while system-wide perfor-
mance impact is limited.
8. ACKNOWLEDGMENTS