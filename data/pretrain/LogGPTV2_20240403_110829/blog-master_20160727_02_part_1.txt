## 固若金汤 - PostgreSQL pgcrypto加密插件  
##### [TAG 6](../class/6.md)
### 作者                                                                  
digoal                                                                  
### 日期                                                                  
2016-07-27                                                               
### 标签                                                                  
PostgreSQL , pgcrypto , 加密 , 数据加密  
----                                                                  
## 背景  
默认情况下数据都是以明文存储在数据库中的。    
如果未使用数据传输层加密手段的话, 数据一旦在传输中被截获的话就很容易泄漏数据。    
本文将要介绍的是数据内容的加密。    
数据内容的加密可以在数据库服务端进行加解密, 也可以在客户端进行加解密.     
在数据库服务端加解密的话, 网络上传输的还是未加密的内容, 所以为了防御网络数据截获, 建议还是要搭配使用数据传输加密.    
如果是在客户端进行加解密的话, 网络上传输的是加密后的内容, 所以不必担心网络数据截获的问题.    
下面以pgcrypto这个扩展包为例, 讲一下数据库服务端加密.    
## PostgreSQL 加密插件pgcrypto的用法  
**阿里云正在将这个插件整合到正在公测的ApsaraDB for Greenplum数据库，如果你在RDS PG中使用了这个插件，恭喜你，可以平移到Greenplum了。**    
数据仓库是企业数据的集散地，数据安全不容忽视，特别是云上的用户更是如此。    
https://www.aliyun.com/product/gpdb?spm=5176.7960203.237031.39.3aCwlI    
### 创建pgcrypto扩展包  
```  
pg92@db-172-16-3-40-> psql -h 172.16.3.33 -p 1999 -U postgres digoal  
psql (9.2beta1, server 9.3devel)  
WARNING: psql version 9.2, server version 9.3.  
         Some psql features might not work.  
SSL connection (cipher: RC4-SHA, bits: 128)  
Type "help" for help.  
digoal=# create extension pgcrypto;  
CREATE EXTENSION  
```  
pgcrypto包含了一些加密和解密的函数.    
详见PostgreSQL手册.    
下面主要针对新增的加解密函数进行讲解.    
### 计算hash值的函数  
```  
digest(data text, type text) returns bytea  
digest(data bytea, type text) returns bytea  
```  
type为算法.支持 md5, sha1, sha224, sha256, sha384, sha512. 如果编译postgresql时时有了with-openssl选项, 则可以支持更多的算法.    
例如 :     
```  
digoal=# select digest('I am digoal.', 'md5');  
               digest                 
------------------------------------  
 \xc3b0fb1147858d2259d92f20668fc8f9  
(1 row)  
```  
每次运算得到的hash值都一样.    
```  
digoal=# select digest('I am digoal.', 'md5');  
               digest                 
------------------------------------  
 \xc3b0fb1147858d2259d92f20668fc8f9  
(1 row)  
```  
但是请注意函数参数, 如果要对bytea hash, 那么请在输入参数时指定参数类型bytea.    
例如以下两次调用分别调用了2个函数. 所以得到的结果也是不一样的.    
```  
digoal=# select digest('\xffffff'::bytea, 'md5');  
               digest                 
------------------------------------  
 \x8597d4e7e65352a302b63e07bc01a7da  
(1 row)  
digoal=# select digest('\xffffff', 'md5');  
               digest                 
------------------------------------  
 \xd721f40e22920e0fd8ac7b13587aa92d  
(1 row)  
```  
```  
hmac(data text, key text, type text) returns bytea  
hmac(data bytea, key text, type text) returns bytea  
```  
这两个函数与digest类似, 只是多了一个key参数, 也就是说同一个被加密的值, 可以使用不同的key得到不同的hash值.    
这样的做法是, 不知道key的话, 也无法逆向破解原始值.     
使用hmac还有一个好处是, 使用digest如果原始值和hash值同时被别人修改了是无法知道是否被修改的.    
但是使用hmac, 如果原始值被修改了, 同时key没有泄漏的话, 那么hash值是无法被修改的, 因此就能够知道原始值是否被修改过.    
```  
digoal=# select hmac('I am digoal.', 'this is a key', 'md5');  
                hmac                  
------------------------------------  
 \xc70d0fd2af2382ea8e0a7ffd9edcbd58  
(1 row)  
digoal=# select hmac('I am digoal.', 'this is a key', 'md5');  
                hmac                  
------------------------------------  
 \xc70d0fd2af2382ea8e0a7ffd9edcbd58  
(1 row)  
digoal=# select hmac('I am digoal.', 'this is b key', 'md5');  
                hmac                  
------------------------------------  
 \x4518090fb07fc672b66c829e43fd62dc  
(1 row)  
digoal=# select hmac('I am digoal.', 'this is b key', 'md5');  
                hmac                  
------------------------------------  
 \x4518090fb07fc672b66c829e43fd62dc  
(1 row)  
```  
如果key的长度超过了block size, 那么key会先hash一次, 然后hash值作为key.    
以上hash函数只要原始值一致, 每次得到的hash值是一样的, 虽然hmac多了key的参数, 但是只要key和原始数据一样, 得到的hash值也是一样的. 这样的加密很可能被逆向破解掉.    
### 如何加大破解难度  
下面的2个函数主要是提高了逆向破解的难度, 增强了数据的安全性.     
```  
crypt(password text, salt text) returns text  
gen_salt(type text [, iter_count integer ]) returns text  
```  
crypt(), 用来计算hash值.    
gen_salt(), 用来产生随机的参数给crypt. type参数为des, xdes, md5, bf. iter_count指迭代次数, 数字越大加密时间越长, 被破解需要的时间也越长.    
Table F-16. Iteration Counts for crypt()    
| Algorithm	| Default	| Min	| Max |  
|---|---|---|---|  
|xdes	|725	|1	|16777215|  
|bf	|6	|4	|31|  
xdes的iter_count必须为奇数.    
crypt和gen_salt结合使用的话, 同一个原始值, 每次得到的hash值是不一样的.    
```  
digoal=# select crypt('this is a pwd source', gen_salt('md5'));  
               crypt                  
------------------------------------  
 $1$CAp4ifAa$p261Vfku7HDnwx8cuFhsq/  
(1 row)  
digoal=# select crypt('this is a pwd source', gen_salt('bf',10));  
                            crypt                               