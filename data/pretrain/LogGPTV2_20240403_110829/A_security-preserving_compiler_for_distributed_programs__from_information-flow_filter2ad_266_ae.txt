variable when it may be veriﬁed later with this thread as writer. The
authentication transform rewrites every callable thread  as follows:
ࢫ replace every call ߰ in every locally reachable    with
߰  call ߰;
ࢫ replace every    with   ࢠ;
ࢫ replace the resulting    with     .
The command  may need to generate a tuple of MACs in case
there are mutually-distrusting veriﬁers.
We will deﬁne  as a serie of MAC computations and  as a
serie of nested veriﬁcations, after grouping variables that (1) share
the same MAC key, and (2) are always jointly MACed/veriﬁed. For
instance, we can always use a single MAC for all variables signed
by the caller and read only by the callee.
After the authentication transform, all remote reads occur on un-
protected variables (except for the cryptographic key variables).
Cryptographic Commands Figure 4 provides an implementation
of our cryptographic commands applied to a single variable. The
implementation relies on standard system libraries for the crypto-
graphic primitives. (ࡒ and  are for symmetric encryption and
decryption, and ࡕ and ࡕ are for MAC computation and veriﬁ-
cation, respectively.) It introduces auxiliary variables to hold cryp-
tographic values:
ࢫ  for the encrypted value of , with conﬁdentiality 
and integrity ;
ࢫ 
 and 
 for the (public, tainted) values and MACs
of , with label   .
To deal with sets of variables, we iterate these commands after
grouping variables into tuples. We also use similar, asymmetric
variants of these commands for initial key distribution.
A MAC veriﬁcation  is an unsafe transfer (since  is trusted
but  is tainted) guarded by a dynamic veriﬁcation of the MAC.
The MACed value consists of the concatenation of the full thread
identiﬁer (with its loop indexes), a unique constant for the source
variable, and the authenticated value.
In the proof, the security
assumption on MACs enables us to treat it instead as a safe transfer
from  to , with overwhelming probability.
Similarly, for encryptions and decryptions, the security assump-
tion enables us to replace encryptions of plaintexts with encryptions
of  and to perform a remote lookup instead of a decryption. The
 _




 check ࡕ‘’ 
  
  then  := ; _
with key 
 shared by  ࣯ Ò Ò

  :=  
 ;
with key shared by  ࣯ Ò  Ò

  := ࡒ 
 ;
with key shared by 
  := ;

 := ࡕ‘’ 
with keys shared by  such that
 ࢠ   ࢛ ࢠ  ࣯ Ò Ò
 ;
ࢠ 
Figure 4: Symmetric cryptographic operations

 (cid:100)ࢠ ࣶ
resulting, “ideal” variant of the implementation is the formal basis
for our security proofs.
Shared-Key Selection We now brieﬂy explain how we manage
the keys used in Figure 4. We assume some consistent selection of
hosts  sharing the keys between  and , and between  and
. The compiler introduces families of shared variables 
 and
 for these keys. The level of a symmetric key  shared by the

hosts  ࢠ  is ࡁ
ࢠ . By deﬁnition,
this is the most secure label that can be both read and written by any
of these hosts. We need robustness for each label ࡁ for which we
allocate a key. Intuitively, an adversary that can write (resp. read)
the key can also read (resp. write) anything protected at that level.
Figure 4 only expresses functionality and security constraints on
the keys, leaving the choice of which key to allocate and use to the
compiler. This choice has a signiﬁcant impact on the runtime cost
of cryptographic protection. For instance, when a host performs
a series of encryptions, it is worth solving their constraints with a
minimal number of keys, so that we can ﬁrst group the variables to
protect and perform fewer, larger encryptions. Besides, encryption
and authentication with compatible sets of hosts should clearly be
replaced with joint authenticated encryption. We leave these op-
timizations as future work. For the time being, our compiler uses
simple heuristics to minimize the overall number of keys.
Let   and   be the sets of subsets of hosts for which the com-
piler has allocated an authentication key or an encryption key, re-
spectively. Accordingly, we deﬁne a command that generates these
keys before running our implementation code:
߰


 
 :=ࡕ; ࢠ 
 :=ࡒ ; ࢠ
and add this command before the initial command  of the previ-
ous compilation stage.
Our main theorem relies on two standard computational cryp-
tographic assumptions: we say that an encryption (resp. MAC)
scheme (resp. MAC scheme) is secure when it is IND-CCA2 (resp.
INT-CMA).
(CRYPTOGRAPHIC PROTECTION).
THEOREM 4
If the cryptographic schemes used in " are correct and secure
and all labels for the security keys are robust, then " is correct
and computationally sound.
8. EXPERIMENTAL RESULTS
The prototype compiler consists of 11,000 lines of ML code. It
is parameterized by a module that deﬁnes the security lattice (we
have coded simple lattices and variants of the DLM [Myers and
Liskov, 1998]). It takes as input a program written in an extension
of the source language of Section 2 (). It applies the translations
of Sections 4, 5, 6, and 7, and produces a source ML program that
can then be compiled using the F# compiler, and executed using
440the .NET runtime environment. The produced code is in a subset of
ML similar to the core commands of Section 2; the main syntactic
difference is that we use ML references instead of shared variables,
and thus emit x := !y instead of x := y.
The compiler handles different types of data such as booleans,
integers, strings, lists and tuples. To increase expressiveness of the
source language, the programmer may use any ML function such
as printf as primitive. The replication algorithm of Section 6 as-
sumes given an initial map J for each thread; it describes how to
check their correctness but not how to construct them. Concretely,
our compiler relies on a ﬁxpoint computation on dominance fron-
tiers to build J [Cytron et al., 1991]. The produced code uses stan-
dard cryptographic primitives from the .NET libraries: AES with
fresh random IVs for symmetric encryption, HMACSHA1 for sym-
metric MACs, RSA-OAEP for asymmetric encryption, and FDH-
RSA for signatures. The sharing of global, unprotected memory is
implemented by sending its updated content when calling a thread
on a remote host. Communications rely on TCP connections. For
each host, distribution information (IP addresses, ports, and public
keys) is retrieved at run-time from a trusted conﬁguration ﬁle.
Figure 5 summarizes our experimental results. LOC gives the
number of lines of code for source and compiled programs; l/t gives
the numbers of locality commands and of threads after splitting (re-
motely callable threads plus local threads); crypto gives the number
of encryption/decryption and MAC/veriﬁcation statements emitted
by the compiler; keys gives the number of symmetric encryption/-
MAC keys they use; runtime gives total execution times in seconds
(without/with cryptography).
Program empty is just a:{skip}. It gives the baseline execution
time due to the testing environment (which feeds default values to
programs using a pipe) and execution initialization (mainly reading
a conﬁguration ﬁle). Program running is our running example
(Example 1). Program rpc corresponds to a program that loops
500 times to increment a shared protected variable at two differ-
ent locations. The cryptographic overhead is due to 2000 symmet-
ric encryptions and decryptions, and 4000 MAC computations and
veriﬁcations (for the incremented variable and the pc variable of
the the control ﬂow protocol). Program guess implements a ba-
sic “guess a number” with three participants. Program hospital
collects information from three different principals that are then
declassiﬁed by a doctor for the patient. Program taxes considers
a scenario where a TPM (trusted platform module, with the most
trustworthy integrity) runs a tax calculation with secret information
provided by the user and a tax company.
9. CONCLUSION
We show how to compile high-level programs with information-
ﬂow policies to distributed systems, with adequate cryptographic
protection to preserve their conﬁdentiality and integrity properties.
We believe this approach provides a safer, more reliable alternative
to custom cryptographic protocol design. Our prototype compiler
is still a proof of concept, whose performance can be signiﬁcantly
improved. Nonetheless, experimental results suggest that the cryp-
tographic overhead is on par with handwritten code.
Acknowledgments We thank Jérémy Planul, Andrei Sabelfeld,
David Sands, Eugen Z˘alinescu, and anonymous reviewers for their
comments.
Program
empty
running
rpc
guess
hospital
taxes
LOC
2
18
11
52
33
55
102
464
321
912
906
946
l/t
1 (1+0)
3 (5+3)
2 (3+3)
7 (13+3)
5 (9+0)
4 (7+2)
crypto
0/0
0/0
4/4
2/2
2/2
4/4
2/2 13/16
4/4 11/11
8/8 16/16
keys
0/0
1/2
1/1
2/3
4/8
4/6
runtime
1.59 1.63
1.58 1.71
1.63 2.58
1.69 1.98
1.70 1.84
1.71 1.77
Figure 5: Experimental results
References
M. Abadi and P. Rogaway. Reconciling two views of cryptography (the
computational soundness of formal encryption). Journal of Cryptology,
15(2):103–127, 2002.
B. Alpern, M. N. Wegman, and F. K. Zadeck. Detecting equality of values
in programs. In Proc. of the ACM Symp. on Principles of Programming
Languages, pages 1–11, Jan. 1988.
M. Backes, B. Pﬁtzmann, and M. Waidner. A composable cryptographic
library with nested operations. In 10th ACM Conference on Computer
and Communications Security, pages 220–230, 2003.
S. Chong and A. C. Myers. Decentralized robustness. In 19th IEEE Com-
puter Security Foundations Workshop, (CSFW-19 2006), pages 242–256.
IEEE Computer Society, 2006.
H. Comon-Lundh and V. Cortier. Computational soundness of observational
equivalence. In CCS ’08: Proceedings of the 15th ACM conference on
Computer and communications security, pages 109–118. ACM, 2008.
R. Cytron, J. Ferrante, B. K. Rosen, and M. N. Wegman. Efﬁciently
computing static single assignment form and the control dependence
graph. ACM Transactions on Programming Languages and Systems, 13
(4):451–490, Oct. 1991.
C. Fournet and T. Rezk. Cryptographically sound implementations for
In 35th Symposium on Principles of
typed information-ﬂow security.
Programming Languages (POPL’08), pages 323–335. ACM, Jan. 2008.
P. Laud. Semantics and program analysis of computationally secure in-
formation ﬂow. In 10th European Symposium on Programming (ESOP
2001), volume 2028 of LNCS. Springer-Verlag, Apr. 2001.
P. Laud. On the computational soundness of cryptographically-masked
In 35th Symposium on Principles of Programming Languages
ﬂows.
(POPL’08), pages 337–348. ACM Press, 2008.
A. C. Myers and B. Liskov. Complete, safe information ﬂow with decen-
tralized labels. In 19th IEEE Symposium on Research in Security and
Privacy (RSP), Oakland, California, May 1998.
A. C. Myers and B. Liskov. Protecting privacy using the decentralized label
model. ACM Trans. Softw. Eng. Methodol., 9(4):410–442, 2000.
A. C. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing robust declassi-
ﬁcation and qualiﬁed robustness. Journal of Computer Security, 14(2):
157–196, 2006.
B. K. Rosen, M. N. Wegman, and F. K. Zadeck. Global value numbers and
redundant computations. In ACM Symposium on Principles of Program-
ming Languages, pages 12–27. ACM, Jan. 1988.
A. Sabelfeld and A. Myers. Language-based information-ﬂow security.
IEEE Journal on Selected Areas in Communications, 21(1), 2003.
S. Zdancewic and A. Myers. Robust declassiﬁcation. In 14th IEEE Com-
puter Security Foundations Workshop, pages 15–23, 2001.
S. Zdancewic, L. Zheng, N. Nystrom, and A. C. Myers. Secure program
partitioning. ACM Trans. Comput. Syst., 20(3):283–328, 2002.
L. Zheng, S. Chong, A. Myers, and S. Zdancewic. Using replication and
partitioning to build secure distributed systems. In 15th IEEE Symposium
on Security and Privacy, 2003.
441