### Encrypted Data Storage and Search in Bandwidth-Restricted Environments

In scenarios where a mobile, bandwidth-restricted user wishes to store data on an untrusted server, various encryption and indexing schemes have been proposed. One such scheme requires the user to split the data into fixed-size words and perform encryption and other transformations. However, this approach has several drawbacks, including the need to fix the size of words, the complexities of encryption and search, the inability to support access pattern privacy, and issues with retrieval correctness.

Eu-Jin Goh [28] proposes associating indexes with documents stored on a server. Each document's index is a Bloom filter [15] containing a codeword for each unique word in the document. Chang and Mitzenmacher [20] propose a similar approach, where the index associated with documents consists of a bit string of length equal to the total number of words used (dictionary size). Boneh et al. [16] proposed an alternative method for encrypting emails with recipients' public keys and storing them on untrusted mail servers. Golle et al. [30] extended this idea to conjunctive keyword searches on encrypted data, but their scheme requires users to specify the exact positions where the search matches must occur, making it impractical. Brinkman et al. [18] use secret splitting of polynomial expressions to search in encrypted XML.

### Achieving Efficient and Private Searches on Outsourced Data

We find that we can efficiently and trivially achieve the goal of running searches with full privacy on "outsourced" data by adjusting the model to redefine "outsourced." Specifically, we provide a model that achieves the bulk of the cost savings of outsourcing while retaining the performance benefits of locally managed data.

### Model

#### Participants and Transaction Semantics

**Provider/Server:**
- The provider owns durable storage and offers its use for a fee.
- The provider, hosted in a well-managed data center, ensures high availability.
- We assume an actively malicious provider but do not attempt to prevent denial of service behavior, as there are techniques beyond the scope of this paper to detect such behavior.

**Clients:**
- Clients are trusted parties who run transactions on a shared database with full ACID guarantees.
- Each client has local hard disk storage for working space, but this storage is not assumed to be permanent due to the fragile nature of hard disks.
- Clients aim to perform read queries efficiently without wasting network bandwidth or incurring latency costs.
- They also want to continue running transactions even when other clients are offline, leveraging the provider's high availability.
- Clients seek to benefit from the durability of the provider's storage but do not trust the provider with the privacy or integrity of their data.
- The provider should be prevented from observing any distributed database contents.
- A notion of consistency between clients' database views is defined to address integrity, ensuring that all clients agree on the sequence of updates applied.
- Clients are considered i-trace consistent if they apply the same series of the first i transactions to their local database copies.

**Transaction Semantics:**
- The protocol supports nearly any class of transaction, from simple key-value pair updates to full SQL transactions.
- Clients can buffer many local updates over a long period and send them as a single transaction.
- The underlying transaction-generating system must implement the following:
  - `RunAndCommitLocalTransaction(Transaction T)`: Applies transaction T to the local database and commits.
  - `DetectConflict(TransactionHandle h, Transaction C)`: Returns true if the external outcome of Transaction Th would have been different had transaction C been issued before Th.
  - `Retry(TransactionHandle h)`: Rolls back all changes for uncommitted transaction Th and reattempts the transaction.
  - `RollbackLocal(TransactionHandle h)`: Rolls back local database changes from uncommitted transaction Th.

**DistributeTransaction Interface:**
- `DistributeTransaction(Transaction T, TransactionHandle h)`: Returns once transaction T has been successfully committed to the global database image.

**Conflicts:**
- Transactions a and b conflict if changing the order of these transactions affects the return value of one of the operations or the client state resulting from executing these operations.
- This definition allows us to provide the highest level of transactional isolation, serializability, as defined in the ANSI SQL-92 standard [12].
- Client implementations may substitute a lower isolation level to improve performance by reducing the number of conflicts.

**Cryptographic Primitives:**
- Secure, collision-free hash function: Builds a distribution indistinguishable from a uniform random distribution.
- Encryption function: Generates unique ciphertexts over multiple encryptions of the same item.
- Pseudo-random number generator: Output indistinguishable from a uniform random distribution over the output space.
- Recursive hash chain construction: Incrementally builds a secure hash value over a sequence of items.

### Strawman Protocol: Outsourced Durability with a Global Lock

**Overview:**
- The strawman protocol allows multiple clients to serialize their transactions through an untrusted server using a single global lock.
- An encrypted transaction log is the central data structure, representing the definitive database.
- Clients maintain their own copy of the database in local temporary storage and keep it synchronized with other clients.

**Transaction Protocol:**
1. **Request Slot:**
   - The client issues a "request slot" command to the server, along with the last known slot number l.
   - The server assigns the next available transaction slot s and sends back the slot number s with a list of all commits since the last update Tl.
   
2. **Wait for Solidification:**
   - The client waits until all transactions Tj+1 ... Ts-1 in slots before its assigned slot have committed.
   - The client receives and applies the updates to its local database copy.

3. **Run Transaction:**
   - Once the client has received Ts-1, it runs its own transaction on its local copy of the database, recording the sequence of updates.

4. **Commit:**
   - The client commits by sending a complete encrypted description of the transaction updates Ts back to the server.
   - Each transaction Ti is encrypted and signed using a symmetric key K shared by all clients.

**Correctness:**
- The protocol ensures fork consistency: all clients within a partition will be trace consistent if the server has partitioned the clients.

### Optimistic Lock-Free Protocol

**Theorem 1:**
- If client c applies an update Ti of client d, then clients c and d are i-trace consistent.
- **Proof:**
  - Assume client c has applied Ti from client d, but tracec,i differs from traced,i.
  - At position a, tracec,i contains transaction Ta, while traced,i has a different value T'a.
  - Client c’s computation of HCa differs from client d’s computation of HCa due to the collision-free property of the hash function.
  - Any later link in these hash chains will also differ, and client c’s computation of HCi-1 differs from client d’s computation of HCi-1.
  - Since client c has applied Ti, it had to have successfully verified that Ti originated from client d.
  - As a precondition, the hash chain link Ti-1.hashchain, which is client d’s computation of HCi-1, would have to match client c’s own calculation of HCi-1, leading to a contradiction.

This proof demonstrates the correctness and consistency of the protocol, ensuring that all clients within a partition remain trace consistent.