be consistent with happens-before ((cid:95)). Recall that a system state
is a set of events (§3.1). Each event in the sequence therefore cor-
responds to a system state containing all the events in the start state,
and all events up to and including this event in the sequence. View-
ing an execution as a sequence of system states, an event is sched-
uled if it is in a state, and once it is scheduled, it will be scheduled
in all later states. Two executions are equivalent if their start states
are equal, and their sequences contain the same set of events, so
they ﬁnish with equal system states (same set of events, same(cid:95)).
A full execution represents the entire lifetime of the system, so its
start state contains no events.
For example, Fig. 8 illustrates two equivalent full executions
ending in the system state from Fig. 6.
A transaction scheduling protocol determines the order in which
each location schedules the events of transactions. Given a set of
possible transactions, a location, and a set of events representing
a system state at that location, a protocol decides which event is
scheduled next by the location:
protocol : set(cid:104)Transactions(cid:105) × Location × State → event
Protocols can schedule an event from a started (but unﬁnished)
transaction, or other events used by the protocol itself. In order to
schedule transaction events in ways that satisfy certain constraints,
like serializability, protocols may have to schedule additional events,
which are not part of any transaction. These can include message
send and receipt events. For example, in Fig. 7, the locking events
are not part of any transaction, but are scheduled by the protocol in
order to ensure serializability.
Certain kinds of events are not scheduled by protocols, because
they are not under the control of the system. Events representing
external inputs, including the start events of transactions, can hap-
pen at any time: they are fundamentally nondeterministic. We also
treat the receive times of messages as external inputs. Each mes-
sage receive event is the deterministic result of its send event and
of a nondeterministic network delay event featuring the same secu-
rity label as the receive event. We refer to start and network delay
events collectively as nondeterministic input events (NIEs).
Protocols do not output NIEs. Instead, an NIE may appear at
any point in an execution, and any prior events in the execution
can happen before ((cid:95)) the NIE. Recall that an execution features
a sequence of events, each of which can be seen as a system state
featuring all events up to that point. An execution E is consistent
with a protocol p if every event in the sequence is either an NIE, or
the result of p applied to the previous state at the event’s location.
We sometimes say p results in E to mean “E is consistent with p.”
As an example, assume all events in Fig. 6 have the same location
L, and no messages are involved. Start events r0 and b0 are NIEs.
Every other event has been scheduled by a protocol. Fig. 8 shows
two different executions, which may be using different protocols,
determining which events to schedule in each state. We can see that
in the top execution of Fig. 8, the protocol maps:
{R, B, . . .}, L,{r0} (cid:55)→ r1
{R, B, . . .}, L,{r0, r1} (cid:55)→ r2
{R, B, . . .}, L,{r0, r1, r2, b0} (cid:55)→ p
{R, B, . . .}, L,{r0, r1, r2, b0, p} (cid:55)→ b1
{R, B, . . .}, L,{r0, r1, r2, b0, p, b1} (cid:55)→ b2
The protocol in the bottom execution of Fig. 8 maps:
{R, B, . . .}, L,{r0, b0} (cid:55)→ r1
{R, B, . . .}, L,{r0, b0, r1} (cid:55)→ p
{R, B, . . .}, L,{r0, b0, r1, p} (cid:55)→ b1
{R, B, . . .}, L,{r0, b0, r1, p, b1} (cid:55)→ b2
{R, B, . . .}, L,{r0, b0, r1, p, b1, b2} (cid:55)→ r2
Ultimately, a protocol must determine the ordering of transac-
tions. If the exact set of start events to be scheduled (as opposed
Event Scheduled:
r0
r1
r1
r0
r2
r0
r2
r1
r1
r1
r2
r0
b0
r1
p
p
r1
p
r2
r2
b0
r0
p
r1
b1
b1
p
b0
r0
b1
b1
p
r1
b2
b1
p
b0
b2
r2
r0
r2
b2
b1
p
r1
r2
b1
p
r1
r1
r1
b2
b0
b2
b0
Resulting State:
Event Scheduled:
Resulting State:
{}
{}
r0
r0
b0
b0
r0
b0
r0
b0
r0
b0
r0
b0
r0
b0
r0
Figure 8: Two equivalent full executions for the system state from Fig. 6. Each begins with a start state (the empty set for full executions),
followed by a sequence of events, each of which corresponds to the resulting system state.
to start events possible) were always known in advance, scheduling
would be trivial. A protocol should not require one transaction to
run before another a priori: start events from any subset of pos-
sible transactions may be scheduled at any time. No protocol
should result in a system state in which such a start event cannot be
scheduled, or an incomplete transaction can never ﬁnish.
3.7 Semantic Security Properties
Conditioning the premise of the security condition on the indis-
tinguishability of information that is allowed to be released is an
idea that has been used earlier [32], but not in this way, to our
knowledge.
also be leaked through the order or timing of start events. This
problem is beyond the scope of this work.
Consider an observer who can only “see” events at some security
level (cid:96) or below. If two states S1 and S2 are indistinguishable to the
observer, then after a program runs, noninterference requires that
the resulting executions remain indistinguishable to the observer.
Secret values, which the observer cannot see, may differ in S1 and
S2, and may result in different states at the end of the executions,
but the observer should not be able to see these differences.
3.7.1 Relaxed Observational Determinism
Semantic conditions for information security are typically based
on some variant of noninterference [19, 31]. These variants are
often distinguished by their approaches to nondeterminism. How-
ever, many of these semantic security conditions fail under reﬁne-
ment: if some nondeterministic choices are ﬁxed, security is vio-
lated [37]. However, low-security observational determinism [30,
37] is a strong property that is secure under reﬁnement: intuitively,
if an observer with label (cid:96) cannot distinguish states S and S(cid:48), that
observer must not be able to distinguish any execution E beginning
with S from any execution E(cid:48) beginning with S(cid:48):
(cid:0)S ≈(cid:96) S
(cid:48)(cid:1) ⇒ E ≈(cid:96) E
(cid:48)
This property is too strong because it rules out two sources of non-
determinism that we want to allow: ﬁrst, the ability of any transac-
tion to start at any time, and second, network delays. Therefore, we
relax observational determinism to permit certain nondeterminism.
We only require that executions be indistinguishable to the observer
if their NIEs are indistinguishable to the observer:
(cid:48) ∧ NIE(E) ≈(cid:96) NIE(cid:0)E
(cid:48)(cid:1)(cid:1) ⇒ E ≈(cid:96) E
(cid:0)S ≈(cid:96) S
(cid:48)
We call this relaxed property relaxed observational determinism.
It might appear to be equivalent to observational determinism, but
with the NIEs encoded in the start states. This is not the case. If
NIEs were encoded in the start states, protocols would be able to
read which transactions will start and when messages will arrive in
the future. Therefore relaxed observational determinism captures
something that observational determinism does not: unknowable
but “allowed” nondeterminism at any point in an execution.
By deliberately classifying start events and network delays as in-
put, we allow certain kinds of information leaks that observational
determinism would not. Speciﬁcally, a malicious network could
leak information by manipulating the order or timing of message
delivery. However, such a network could by deﬁnition communi-
cate information to its co-conspirators anyway.
Information can
In our hospital example, as illustrated in Fig. 4, the system de-
termines which of Patsy’s transactions (the one with the dashed
events, or the one without the dashed events) will run based on
whether p.hasHiv is true. We can consider p.hasHiv’s value to
be a high-security event that happens before all reads of p.hasHiv.
If we classify this past high-security event as input, and all low-
security events as low-observable for Mallory, then we must en-
sure that when Patsy’s code runs, the low-security projections of
resulting executions are always the same, regardless of whether
p.hasHiv. Patsy’s possible transactions in Fig. 4 allow for ob-
servational determinism, while her transactions in Fig. 3 do not,
since whether or not Read address occurs depends on p.hasHiv.
Whether or not the system actually maintains observational deter-
minism, however, depends on the protocol scheduling the events.
DEF. 3
(PROTOCOL SECURITY). A protocol is considered se-
cure if the set of resulting executions satisﬁes relaxed observational
determinism for any allowed sets of information-ﬂow secure trans-
actions and any possible NIEs.
4.
IMPOSSIBILITY
One of our contributions is to show that even in the absence of
timing channels, there is a fundamental conﬂict between secure
noninterference and serializability. Previous results showing such
a conﬂict, for example the work of Smith et al. [36] consider only
conﬁdentiality and show only that timing channels are unavoidable.
THEOREM 1
(IMPOSSIBILITY). No secure protocol2 can se-
rialize all possible sets of information-ﬂow secure transactions.3
We assume protocols cannot simply introduce an arbitrarily trusted
third party; a protocol must be able to run using only the set of
locations that have events being scheduled.
PROOF SKETCH. Consider the counterexample shown in Fig. 9.
Alice and Bob are both cloud computing providers who keep strict
logs of the order in which various jobs start and stop. Highly trusted
(possibly government) auditors may review these logs, and check
for consistency, to ensure cloud providers are honest and fair. As
2barring unforeseen cryptographic capabilities (§4.1)
3In fact, what we prove is stronger. Our proof holds for even pos-
sibilistic security conditions [25], which are weaker than relaxed
observational determinism (see technical report [34]). No proto-
col whose resulting traces satisfy even this weaker condition can
serialize all sets of information-ﬂow secure transactions.
?
r2
b2
?
r3
b3
Dave
r0
r1
Bob
Alice
Carol
b0
b1
Figure 9: Transactions that cannot be securely serialized. Dave’s
transaction includes r0, r1, r2, and r3. Carol’s includes b0, b1,
b2, and b3. Cloud providers Alice and Bob must decide how to
order their events. Alice and Bob may not inﬂuence each other, and
Carol and Dave may not inﬂuence each other, as represented by the
wall. For these transactions to be serializable, Alice’s ordering of
r2 and b2 must agree with Bob’s ordering of r3 and b3.
competitors, Alice and Bob do not want each other to gain any in-
formation about their services, and do not trust each other to affect
their own services.
Carol and Dave are presently running jobs on Alice’s cloud. Both
Carol and Dave would like to stop their jobs on Alice’s cloud, and
start new ones on Bob’s cloud. Each wants to do this atomically,
effectively maintaining exactly one running job at all times. Carol
and Dave consider their jobs to be somewhat conﬁdential; they do
not want each other to know about them. Unlike the example from
Fig. 1, Dave and Carol’s transactions do not go through a third
party like Rainforest. For the transactions to be serializable, Alice’s
ordering of the old jobs stopping must agree with Bob’s ordering
of the new jobs starting.
In any system with an asynchronous network, it is possible to
reach a state in which Carol’s message to Alice has arrived, but not