server only acts as a storage-only service, which processes data
sending and receiving requests by the client. Therefore, any
malicious behavior can be easily detected by creating a MAC
for each ORAM block being requested [64]. Malicious security
is more difﬁcult to achieve in the active ORAM setting, where
the client delegates the computation to the server for reduced
bandwidth overhead. Next, we review the attack introduced
in [22] to illustrate the vulnerability of state-of-the-art active
ORAM schemes in the malicious setting.
Most efﬁcient active ORAMs (e.g., [33], [21], [53]) follow
the tree-ORAM paradigm and harness PIR techniques to
implement the retrieval phase efﬁciently. As outlined in §II-B,
to privately retrieve the block indexed i, the client creates a
PIR query, which is a unit vector v where all elements are
set to zero, except the one at index i being set to 1. Such a
query is either encrypted with HE or secret-shared. According
to the PIR, the server computes a homomorphic inner product
between v and the vector containing ORAM blocks on the
retrieval path. So, if the adversary modiﬁes ORAM blocks
that will be likely multiplied with the ciphertext/share of the
zero components in the retrieval vector, the ﬁnal inner product
will still be correct. In this case, the client is unable to tell
whether the adversary has modiﬁed the ORAM structure, but
the malicious server has learned if the vector component was
zero or not, thus violating the privacy of the query. In the tree
paradigm, the upper levels of the tree will likely contain blocks
that have been recently accessed. By modifying data blocks
in upper levels, the malicious server can learn whether the
same blocks have been accessed again with high probability.
To prevent this, Devadas et al. [22] suggested the client to
download a large portion of data blocks, and apply the same
homomorphic computation (like what server did) on them (as
what should be done at the server), to verify if computation
5
has
j
j
j
p
Si
has
α
and
j
i
input
R(i)
T(i)
sends (R(i)
to Si+1.
3. Every Si
inputs
Client
Inputs:
r, ˆr ∈ Fp.
(cid:0)(cid:104)U(cid:105)i, (cid:104)V(cid:105)i, (cid:104)U(cid:105)i+1, (cid:104)V(cid:105)i+1
(cid:1), where (cid:104)U(cid:105)i = ((cid:74)U(cid:75)i,(cid:74)αU(cid:75)i)
and so forth. Each Si has(cid:74)r(cid:75)i,(cid:74)ˆr(cid:75)i as the shares of two random values
1. Every Si locally computes Xi ← (cid:74)U(cid:75)i ×(cid:74)V(cid:75)i +(cid:74)U(cid:75)i ×(cid:74)V(cid:75)i+1 +
(cid:74)U(cid:75)i+1 ×(cid:74)V(cid:75)i and Yi ← (cid:74)U(cid:75)i ×(cid:74)αV(cid:75)i +(cid:74)U(cid:75)i ×(cid:74)αV(cid:75)i+1 +
(cid:74)U(cid:75)i+1 ×(cid:74)αV(cid:75)i.
2. Every Si represents Xi and Yi as the sum of random matrices as Xi =
1 +
i+1) and
, T(i)
i+1)
$← Fm×k
and Yi = T(i)
i+1, T(i)
. Si retains (R(i)
, R(i)
i ) to Si−1, (R(i)
, R(i)
0 + R(i)
2 , where T(i)
i−1, R(i)
0 + T(i)
, T(i)
i+1, T(i)
2 , where R(i)
$← Fm×k
p
, T(i)
1 + R(i)
i−1, T(i)
R(0)
T(0)
i + R(1)
i + T(1)
i+1 + R(1)
i+1 + T(1)
i + R(2)
i + T(2)
i+1 + R(2)
i+1 + T(2)
i+1.
computes (cid:104)Q(cid:105)i = ((cid:74)Q(cid:75)i,(cid:74)αQ(cid:75)i) and (cid:104)Q(cid:105)i+1 =
((cid:74)Q(cid:75)i+1,(cid:74)αQ(cid:75)i+1), where(cid:74)Q(cid:75)i ← R(0)
,(cid:74)Q(cid:75)i+1 ←
,(cid:74)αQ(cid:75)i+1 ←
i+1,(cid:74)αQ(cid:75)i ← T(0)
r ← (cid:80)
i(cid:74)r(cid:75)i, ˆr ← (cid:80)
Output: Each Si sends (cid:74)r(cid:75)i,(cid:74)ˆr(cid:75)i to all other servers to compute r, ˆr as
i(cid:74)ˆr(cid:75)i. All servers set rt ← rt and ˆrt ← ˆrt
(cid:74)x(cid:75)i ← (cid:80)
k rt(cid:74)Q[j, k](cid:75)i, (cid:74)x(cid:75)i+1 ← (cid:80)
(cid:80)
(cid:80)
(cid:80)
(cid:74)y(cid:75)i ←(cid:80)
k rt(cid:74)αQ[j, k](cid:75)i,(cid:74)y(cid:75)i+1 ←(cid:80)
(cid:80)
k ˆrt(cid:74)Q[j, k](cid:75)i+1,
k ˆrt(cid:74)αQ[j, k](cid:75)i+1,
inconsistent or αx (cid:54)= y, where x ← (cid:80)
where t = jp + k . If ((cid:74)x(cid:75)i,(cid:74)y(cid:75)i) received from Si and Si−1 are
i(cid:74)y(cid:75)i, the
client sends ⊥ to all servers and aborts. Otherwise, the client sends ok
and every Si accepts (cid:104)Q(cid:105)i, (cid:104)Q(cid:105)i+1 as its correct authenticated shares
of U × V.
i(cid:74)x(cid:75)i and y ← (cid:80)
for t = 1, . . . , mp. Every Si computes and sends to the client
j
j
i
i
i
i
i
i
Fig. 2: Authenticated matrix multiplication with RSS.
at the server is consistent with the one computed locally. This
technique, however, incurs high bandwidth and computation
overhead at the client.
B. Our Sub-Protocols
In this section, we design some sub-protocols for our
MACAO framework. These sub-protocols offer security against
the attacks targeting the inner product between the client
queries and the ORAM data as presented above. We present
the security proof of sub-protocols in the Appendix.
1) Authenticated Matrix Multiplication in the Shared Set-
ting: We construct matrix multiplication protocols using RSS
and SPDZ schemes described in §II-A.
• Matrix multiplication with RSS: We ﬁrst extend RSS to
be secure against a malicious adversary in the three-server
setting. The key idea is to create an information-theoretic
MAC for each secret as proposed in [20]. Let u, v be two
secrets to be multiplied. The dealer (i.e., the client in our
i.e.,
model) creates the authenticated shares of u and v,
appropriately to servers accordingly. More speciﬁcally, ev-
ery Si receives ((cid:104)u(cid:105)i,(cid:104)u(cid:105)i+1,(cid:104)v(cid:105)i,(cid:104)v(cid:105)i+1). All servers jointly
execute the RSS multiplication protocol
(cid:104)u(cid:105) = ((cid:74)u(cid:75),(cid:74)α(cid:75)) and (cid:104)v(cid:105) = ((cid:74)v(cid:75),(cid:74)αv(cid:75)), and distributes them
to compute (cid:74)uv(cid:75)
over (cid:74)u(cid:75),(cid:74)v(cid:75), and (cid:74)αuv(cid:75) over (cid:74)αu(cid:75), (cid:74)v(cid:75) (or (cid:74)αv(cid:75),(cid:74)u(cid:75)),
resulting in (cid:104)uv(cid:105) = ((cid:74)uv(cid:75),(cid:74)αuv(cid:75)). To this end, every Si
AuthRecover(cid:0)α, ((cid:104)uv(cid:105)0, . . . ,(cid:104)uv(cid:105)(cid:96)−1)(cid:1) and aborts if x =⊥.
sends (cid:104)uv(cid:105)i, (cid:104)uv(cid:105)i+1 to the client. The client executes x ←
p
and V ∈ Fn×p
We now develop an authenticated matrix multiplication
protocol based on the extended RSS. Given two matrices
, U × V incurs O(mnp)
U ∈ Fm×n
number of pair-wise multiplications. Simply using RSS for
each multiplication requires O(mnp) shares being sent from
one server to the other servers. Instead of doing so, we can
perform the local matrix multiplication over the shares and
p
Initialize: The servers invoke the pre-computation to generate sufﬁ-
cient number of authenticated shares of matrix multiplication triples
((cid:104)A(cid:105), (cid:104)B(cid:105), (cid:104)C(cid:105)).
Inputs: The client has input α and every Si has inputs(cid:0)(cid:74)α(cid:75)i, (cid:104)U(cid:105)i, (cid:104)V(cid:105)i
(cid:1).
Each Si has(cid:74)r(cid:75)i,(cid:74)ˆr(cid:75)i as the shares of random values r, ˆr ∈ Fp.
1. Every Si locally computes(cid:74)E(cid:75)i ←(cid:74)U(cid:75)i −(cid:74)A(cid:75)i, and(cid:74)P(cid:75)i ←(cid:74)V(cid:75)i −
2. All servers open E and P by locally computing E ← (cid:80)
(cid:74)B(cid:75)i and broadcast(cid:74)E(cid:75)i,(cid:74)P(cid:75)i.
(cid:80)
i(cid:74)E(cid:75)i, P ←
i(cid:74)P(cid:75)i .
3. Every Si locally computes (cid:104)Q(cid:105)i = ((cid:74)Q(cid:75)i,(cid:74)αQ(cid:75)i), where (cid:74)Q(cid:75)i ←
(cid:74)C(cid:75)i + E ×(cid:74)B(cid:75)i +(cid:74)A(cid:75)i × P + E × P and(cid:74)αQ(cid:75)i ←(cid:74)αC(cid:75)i + E ×
(cid:74)αB(cid:75)i +(cid:74)αA(cid:75)i × P +(cid:74)α(cid:75)iE × P.
i(cid:74)r(cid:75)i, ˆr ← (cid:80)
(cid:80)
Output: Each Si sends (cid:74)r(cid:75)i,(cid:74)ˆr(cid:75)i to all other servers to open r, ˆr as r ←
i(cid:74)ˆr(cid:75)i. All servers set rt ← rt and ˆrt ← ˆrt for
(cid:0)rtE[j, k]+ ˆrtP[j, k](cid:1) and(cid:74)y(cid:75)i ←(cid:80)
(cid:0)rt(cid:74)αE[j, k](cid:75)i +
(cid:80)
(cid:80)
(cid:80)
(cid:1), where(cid:74)αE(cid:75)i =(cid:74)αU(cid:75)i −(cid:74)αA(cid:75)i,(cid:74)αP(cid:75)i =(cid:74)αV(cid:75)i −
(cid:74)αB(cid:75)i and t = jp + k. The client computes y ←(cid:80)
ˆrt(cid:74)αP[j, k](cid:75)i
i(cid:74)y(cid:75)i. If αx (cid:54)= y,
t = 1, . . . , mp. Every Si locally computes and sends to the client x ←
the client sends ⊥ to all servers and aborts. Otherwise, the client sends ok
and every Si accepts (cid:104)Q(cid:105)i as its correct authenticated share of U× V.
k
k
j
j
Fig. 3: Authenticated matrix multiplication with SPDZ.
then only re-share the computation result. This strategy saves
a factor of n number of shares to be transferred among three
servers. Let (cid:104)U(cid:105) = ((cid:74)U(cid:75),(cid:74)αU(cid:75)) and (cid:104)V(cid:105) = ((cid:74)V(cid:75),(cid:74)αV(cid:75)) be
the authenticated share of U and V, respectively. Figure 2
presents our matrix multiplication protocol with RSS scheme
in the three-server setting with malicious security.
Lemma 1. In the 3-server setting, the matrix multiplication
protocol via RSS in Figure 2 is secure against a malicious
adversary corrupting an arbitrary server.
t
t
In our framework, we only employ RSS for the speciﬁc
three-server setting, where no server can collude with each
other (level 1 of privacy). Although a higher privacy level can
be achieved with the general ((cid:96) − t)-threshold RSS, where
(cid:96) = 2t + 1 is the number of servers and t is the privacy
(cid:1) shares for each secret,(cid:0)(cid:96)−1
level, it requires(cid:0)(cid:96)
(cid:1) of which are
, V ∈ Fn×p
stored in each server. This signiﬁcantly increases the server
storage, I/O access, communication and computation overhead,
and therefore it is not desirable. In the following, we construct
another matrix multiplication protocol, which is more suitable
for applications that need a high privacy level.
• Matrix multiplication with SPDZ: Inspired by [48], we de-
velop an efﬁcient authenticated matrix multiplication protocol
with SPDZ sharing. As discussed previously, the computation
of U × V, where U ∈ Fm×n
incurs O(mnp)
numbers of multiplication. Simply using the original SPDZ
multiplication protocol [20] for the matrix multiplication will
increase the communication overhead among the servers sig-
niﬁcantly2. To save a factor of n the bandwidth overhead,
instead of using the standard Beaver triples of the form
(a, b, ab), we generate matrix multiplication triples (A, B, C),
where C = A× B. Now we assume that each server Si stores
an authenticated share of the triple as ((cid:104)A(cid:105)i,(cid:104)B(cid:105)i,(cid:104)C(cid:105)i).
Figure 3 describes the matrix multiplication protocol by SPDZ.
Note that in our setting, the client owns the global MAC key
α so they they can check the integrity of computation at the
end of the protocol. In other words, servers do not need to
multiply their share of the MAC key with the random linear
p
p
2The authors in [8] observed that the ofﬂine phase can be optimized for
functions. The approach is however, different. We are not aware of other
published results that optimized the ofﬂine phase for matrix multiplication.
6
(cid:0)(cid:104)B(cid:105)i, (cid:104)B(cid:105)i+1
Parameters: N denotes the number of shared items in the shared database.
Inputs: The client has inputs (idx, α) and each server Si has inputs
1. For each authenticated shared database (cid:104)B(cid:105)i, stored on Si and Si−1:
(cid:1).
j
j
0
idx
= r(i)
, . . . , r(i−1)
= ¯r(i)
a) The client generates a random binary string of
length N,
N−1). The client generates R(i−1) =
i.e.,
for all j (cid:54)= idx. The client
0 , . . . , r(i)
R(i) = (r(i)
(r(i−1)
N−1 ) by ﬂipping the idx-th bit of R(i),
r(i−1)
idx and r(i−1)
(cid:0)(cid:74)bj(cid:75)i · r(i)
(cid:1) and yi =
b) Si computes and responds with xi =(cid:80)
sends R(i) to Si and R(i−1) to Si−1.
(cid:80)
j , where(cid:80) represents the bit-wise XOR and · rep-
j(cid:74)αbj(cid:75)i · r(i)
(cid:1) and yi−1 =(cid:80)
(cid:0)(cid:74)bj(cid:75)i·r(i−1)
with xi−1 =(cid:80)
j(cid:74)αbj(cid:75)i·r(i−1)
executes b ← AuthRecover(cid:0)α, ((cid:104)b(cid:105)0, . . . , (cid:104)b(cid:105)2)(cid:1).
retrieved block b, i.e., (cid:104)b(cid:105)i = ((cid:74)b(cid:75)i,(cid:74)αb(cid:75)i) = (x(cid:48)
i, y(cid:48)
resents the bit-wise AND. Similarly, Si−1 computes and responds
.
i as the i-th authenticated share of the
i). The client