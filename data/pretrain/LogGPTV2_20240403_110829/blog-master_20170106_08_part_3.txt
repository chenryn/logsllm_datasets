$num_cols = pg_num_fields($rs);  
```  
The pg_num_rows() function returns the number of rows in a PostgreSQL result resource. The pg_num_rows() function returns the number of columns (fields) in a PostgreSQL result resource.  
```  
$ php colsrows.php  
There are 4 rows and 2 columns in the query.  
```  
Example output.  
### Column headers  
Next we will show, how to print column headers with the data from a database table.  
```  
```  
In this program, we select 5 rows from the cars table with the column names.  
```  
$fname1 = pg_field_name($rs, 0);  
$fname2 = pg_field_name($rs, 1);  
$fname3 = pg_field_name($rs, 2);  
```  
The pg_field_name() function returns the name of the column (field) for the specified column number.  
```  
printf("%3s  %-10s %8s\n", $fname1, $fname2, $fname3);  
```  
We print the column headers. We do some formatting with the printf function.  
```  
$ php column_headers.php   
 id  name          price  
  1  Audi          52642  
  2  Mercedes      57127  
  3  Skoda          9000  
  4  Volvo         29000  
  5  Bentley      350000  
```  
Ouput of the program.  
### Affected rows  
In the following example, we will find out how many changes have been done by a particular SQL command.  
```  
```  
We create a friends table. In the last SQL command, we delete three rows. We have one INSERT and one DELETE statement for which we can call the pg_affected_rows() to get the number of affected rows.  
```  
$query = "INSERT INTO friends VALUES (1, 'Jane'), (2, 'Thomas')"  
    . ", (3, 'Beky'), (4, 'Robert'), (5, 'Lucy')";   
```  
We insert five rows into the friends table.  
```  
$ar = pg_affected_rows($res);  
echo "The query has affected $ar rows\n";  
```  
The pg_affected_rows() function returns the number of rows affected by the last SQL statement.  
```  
$ php affected_rows.php  
The query has affected 5 rows  
The query has affected 3 rows  
```  
The INSERT statement has created five rows, the DELETE statement has removed 3 rows.  
### Table metadata  
There is an experimental pg_meta_data(). It returns metadata for each column of a database table.  
```  
```  
The example prints metadata about table columns of the cars table.  
```  
$ary = pg_meta_data($con, 'cars');  
```  
The pg_meta_data() returns metadata information for the cars table. It returns an array.  
```  
var_dump($ary);  
```  
The var_dump() function dumps information about a variable. In our case it is the returned array of metadata information.  
```  
$ php metadata.php  
array(3) {  
  ["id"]=>  
  array(6) {  
    ["num"]=>  
    int(1)  
    ["type"]=>  
    string(4) "int4"  
    ["len"]=>  
    int(4)  
    ["not null"]=>  
    bool(true)  
...  
```  
Excerpt from the example output.  
In this part of the PostgreSQL PHP tutorial, we have worked with database metadata.  
### Transactions with PHP in PostgreSQL  
In this chapter, we will work with transactions. First, we provide some basic definitions. Then we will a sample program that uses a transaction.  
A transaction is an atomic unit of database operations against the data in one or more databases. SQL statements in a transaction can be either all committed to the database or all rolled back. SQL statements are put into transactions for data safety and integrity.  
In PostgreSQL PHP each SQL statement is committed to the database after it is executed. This is not true for all language bindings. For example in Python's psycopg2 module all changes must be explicitly committed with a commit() method by default.  
In direct SQL, a transaction is started with BEGIN TRANSACTION statement and ended with END TRANSACTION, COMMIT statement. In PostgreSQL these statements are BEGIN and COMMIT. In some drivers these statements are omitted. They are handled by the driver. In PHP there are no such methods and the we must use the direct SQL. (In PHP PDO there are such methods.)  
```  
```  
We have our cars table. We want to swap the first row with the last row. We do it in two steps. First we delete the two rows. Then we insert them with their id's exchanged. These two operations need to be placed in a transaction. If the first step succeeded and the second failed, the data would be corrupted. Therefore we need to have all done or nothing done.  
```  
pg_query("BEGIN") or die("Could not start transaction\n");  
```  
We start a new transaction by issuing the BEGIN statement.  
```  
$res1 = pg_query("DELETE FROM cars WHERE id IN (1, 9)");  
$res2 = pg_query("INSERT INTO cars VALUES (1, 'BMW', 36000), (9, 'Audi', 52642)");  
```  
These are the two SQL statements that modify our table. Both pg_query() functions return true or false boolean value indicating whether the SQL command failed or not.  
```  
if ($res1 and $res2) {  
    echo "Commiting transaction\n";  
    pg_query("COMMIT") or die("Transaction commit failed\n");  
} else {  
    echo "Rolling back transaction\n";  
    pg_query("ROLLBACK") or die("Transaction rollback failed\n");;  
}  
```  
If both function calls return true, we commit the transaction with the COMMIT statement. Otherwise we rollback the changes with the ROLLBACK statement.  
```  
$ php transaction.php  
Commiting transaction  
testdb=# SELECT * FROM cars ORDER BY id;  
 id |    name    | price    
----+------------+--------  
  1 | BMW        |  36000  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21606  
  9 | Audi       |  52642  
(9 rows)  
```  
The rows were successfully swapped.  
In this part of the PostgreSQL PHP tutorial, we have mentioned transactions.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")