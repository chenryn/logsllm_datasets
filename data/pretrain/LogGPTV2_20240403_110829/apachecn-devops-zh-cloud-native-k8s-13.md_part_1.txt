# 十三、使用 CRDs 扩展 Kubernetes
本章解释了扩展 Kubernetes 功能的许多可能性。它从开始讨论**自定义资源定义** ( **CRD** )，这是一种 Kubernetes-native 方式，用于指定 Kubernetes API 可以使用熟悉的`kubectl`命令(如`get`、`create`、`describe`和`apply`)操作的自定义资源。接下来是对运营商模式的讨论，这是 CRD 的延伸。然后，它详细介绍了云提供商附加到其 Kubernetes 实现上的一些钩子，并以对更大的云原生生态系统的简单介绍结束。使用本章中学习的概念，您将能够构建和开发 Kubernetes 集群的扩展，从而解锁高级使用模式。
本章的案例研究将包括创建两个简单的 CRD 来支持一个示例应用。我们将从 CRDs 开始，这将使您对扩展如何建立在 Kubernetes API 上有一个很好的基础了解。
在本章中，我们将涵盖以下主题:
*   如何用**自定义资源定义** ( **CRDs** )扩展 Kubernetes
*   Kubernetes 操作员的自我管理功能
*   使用特定于云的 Kubernetes 扩展
*   与生态系统整合
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 13](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter13)。
# 如何用自定义资源定义扩展 Kubernetes
让我们从基础开始。什么是 CRD？我们知道 Kubernetes 有一个 API 模型，我们可以在其中对资源执行操作。Kubernetes 资源的一些例子(你现在应该很熟悉了)是 Pods、PersistentVolumes、Secrets 和其他。
现在，如果我们想在集群中实现一些自定义功能，编写自己的控制器，并将控制器的状态存储在某个地方，该怎么办？当然，我们可以将自定义功能的状态存储在运行于 Kubernetes 或其他地方的 SQL 或 NoSQL 数据库中(这实际上是扩展 Kubernetes 的策略之一)——但是，如果我们的自定义功能更多地作为 Kubernetes 功能的扩展，而不是一个完全独立的应用呢？
在这种情况下，我们有两种选择:
*   自定义资源定义
*   API 聚合
API 聚合允许高级用户在 Kubernetes API 服务器之外构建自己的资源 API，并使用自己的存储——然后在 API 层聚合这些资源，以便可以使用 Kubernetes API 查询它们。这显然是高度可扩展的，本质上只是使用 Kubernetes API 作为您自己的定制功能的代理，它可能会也可能不会与 Kubernetes 真正集成。
另一个选项是 CRDs，在这里我们可以使用 Kubernetes API 和底层数据存储(`etcd`)而不是构建我们自己的。我们可以使用已知的`kubectl`和`kube api`方法与我们自己的定制功能进行交互。
在本书中，我们将不讨论 API 聚合。虽然肯定比 CRDs 更灵活，但这是一个高级的主题，值得深入了解 Kubernetes API，并仔细阅读 Kubernetes 文档，以确保正确。您可以在[https://Kubernetes . io/docs/concepts/extend-Kubernetes/API-extend/API server-aggregation/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/)的 Kubernetes 文档中了解更多关于 API 聚合的信息。
因此，现在我们知道我们正在使用 Kubernetes 控制平面作为我们自己的状态存储来实现新的定制功能，我们需要一个模式。类似于中的 Pod 资源规格，Kubernetes 期望某些字段和配置，我们可以告诉 Kubernetes 我们对新的定制资源的期望。让我们现在来看看 CRD 的规格。
## 编写自定义资源定义
对于 CRDs，Kubernetes 使用 OpenAPI V3 规范。有关 OpenAPI V3 的更多信息，您可以查看官方文档，网址为[。](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
让我们看一个 CRD 规范的例子。现在让我们弄清楚，这不是这个 CRD 的任何具体记录的 YAMLs 会是什么样子。相反，这只是我们定义库本内 CRD 需求的地方。一旦创建，Kubernetes 将接受符合规格的资源，我们可以开始制作我们自己的这种类型的记录。
这是一个 CRD 规范的 YAML 例子，我们称之为`delayedjob`。这个高度简化的 CRD 旨在延迟启动容器映像作业，这可以防止用户不得不为他们的容器延迟启动脚本。这个 CRD 相当脆，我们不建议任何人实际使用它，但它很好地突出了建设 CRD 的过程。让我们从一个完整的 CRD 规格 YAML 开始，然后分解它:
自定义资源定义 1.yaml
```
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: delayedjobs.delayedresources.mydomain.com
spec:
  group: delayedresources.mydomain.com
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                delaySeconds:
                  type: integer
                image:
                  type: string
  scope: Namespaced
  conversion:
    strategy: None
  names:
    plural: delayedjobs
    singular: delayedjob
    kind: DelayedJob
    shortNames:
    - dj
```
让我们回顾一下这个文件的各个部分。乍一看，它看起来像你典型的 Kubernetes YAML 规格-这是因为它是！在`apiVersion`领域，我们有`apiextensions.k8s.io/v1`，这是自 Kubernetes`1.16`以来的标准(在此之前是`apiextensions.k8s.io/v1beta1`)。我们的`kind`永远是`CustomResourceDefinition`。
`metadata`字段是事情开始具体到我们的资源的时候。我们需要将`name`元数据字段构造为我们资源的`plural`形式，然后是一个周期，然后是它的组。让我们从我们的 YAML 文件中转移一下，讨论一下在 Kubernetes API 中组是如何工作的。
### 了解 Kubernetes 应用编程接口组
组是 Kubernetes 在其应用编程接口中分割资源的一种方式。每个组对应于 Kubernetes API 服务器的不同子路径。
默认情况下，有一个名为核心组的遗留组，它对应于在 Kubernetes REST API 的`/api/v1`端点上访问的资源。推而广之，这些遗留组资源的 YAML 规格中有`apiVersion: v1`。核心组中的资源之一的一个例子是 Pod。
接下来是一组命名组，它们对应于可以在形成为`/apis//`的`REST`网址上访问的资源。这些命名组构成了 Kubernetes 资源的主体。但是，最古老和最基本的资源，如 Pod、Service、Secret 和 Volume，都在核心组中。位于命名组中的资源的一个例子是位于`storage.k8s.io`组中的`StorageClass`资源。
重要说明
要查看哪个资源在哪个组中，您可以查看官方的 Kubernetes API 文档，了解您正在使用的 Kubernetes 版本。例如，版本`1.18`文档将位于[https://kubernetes . io/docs/reference/generated/kubernetes-API/v 1.18](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18)。
CRDs 可以指定自己的命名组，这意味着特定的 CRD 将在 Kubernetes API 服务器可以监听的`REST`端点上可用。考虑到这一点，让我们回到我们的 YAML 文件，这样我们就可以谈论 CRD 的主要部分-版本规格。
### 了解自定义资源定义版本
如你所见，我们选择了`delayedresources.mydomain.com`组。理论上，这个群体将持有任何其他延期的 CRDs 例如`DelayedDaemonSet`或`DelayedDeployment`。
接下来，我们有我们的 CRD 的主要部分。在`versions`下，我们可以定义一个或多个 CRD 版本(在`name`字段中)，以及该版本 CRD 的 API 规范。然后，当您创建 CRD 的实例时，您可以在 YAML 的`apiVersion`键中定义您将用于版本参数的版本，例如`apps/v1`，或者在本例中为`delayedresources.mydomain.com/v1`。
每个版本项还有一个`served`属性，本质上是定义给定版本是启用还是禁用的一种方式。如果`served`是`false`，该版本将不会由 Kubernetes 应用编程接口创建，该版本的应用编程接口请求(或`kubectl`命令)将失败。
此外，可以在特定版本上定义`deprecated`键，这将导致 Kubernetes 在使用不推荐使用的版本向 API 发出请求时返回警告消息。这是一个怎样的 CRD。`yaml`文件有一个不推荐使用的版本外观-我们已经删除了一些规格，以保持 YAML 短:
自定义资源定义 2.yaml
```
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: delayedjob.delayedresources.mydomain.com
spec:
  group: delayedresources.mydomain.com
  versions:
    - name: v1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "DelayedJob v1 is deprecated!"
      schema:
        openAPIV3Schema:
		…
    - name: v2
      served: true
      storage: true
      schema:
        openAPIV3Schema:
		...
  scope: Namespaced
  conversion:
    strategy: None
  names:
    plural: delayedjobs
    singular: delayedjob
    kind: DelayedJob
    shortNames:
    - dj
```
如您所见，我们已经将`v1`标记为弃用，并且还包含了一个弃用警告，供 Kubernetes 发送作为响应。如果我们不包括一个折旧警告，将使用默认消息。
再往下，我们有`storage`键，它与`served`键交互。这样做的原因是，虽然 Kubernetes 同时支持一个资源的多个活动(也就是`served`)版本，但是这些版本中只有一个可以存储在控制平面中。然而，`served`属性意味着一个资源的多个版本可以由应用编程接口提供服务。那这到底是怎么回事？
答案是 Kubernetes 会将 CRD 对象从存储的版本转换为您要求的版本(或者在创建资源时，反之亦然)。
这种转换是如何处理的？让我们跳过剩余的版本属性，转到`conversion`键，看看如何操作。
`conversion`键让你指定一个策略，Kubernetes 将如何在之间转换 CRD 对象，无论你的服务版本是什么，也无论存储版本是什么。如果两个版本相同，例如，如果您请求一个`v1`资源，并且存储的版本是`v1`，那么不会发生转换。
这里截止到 Kubernetes 1.13 的默认值是`none`。使用`none`设置，Kubernetes 不会在字段之间进行任何转换。它将简单地包括应该出现在`served`(或存储，如果创建一个资源)版本的字段。
另一个可能的转换策略是`Webhook`，它允许你定义一个定制的网络钩子，它将接受一个版本，并正确地转换到你想要的版本。下面是我们的 CRD 的一个例子，它有一个`Webhook`转换策略——为了简明起见，我们去掉了一些版本模式:
自定义资源定义 3.yaml
```
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: delayedjob.delayedresources.mydomain.com
spec:
  group: delayedresources.mydomain.com