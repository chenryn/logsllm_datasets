I am converting a Protractor page object library from JavaScript to
Typescript. I have a static utility method that refreshes until an element is
present (or the timeout limit is reached).  
For some reason, I am unable to use a boolean valued promise as a thenable
construct and I can't figure out why. The error message is **Error:(102, 50)
TS2345:Argument of type '(isEnabled: boolean) = > Promise | undefined' is not
assignable to parameter of type '((value: boolean) => CloudletPolicyBean |
IThenable) | undefined'.  
Type '(isEnabled: boolean) => Promise | undefined' is not assignable to type
'(value: boolean) => CloudletPolicyBean | IThenable'.  
Type 'Promise | undefined' is not assignable to type 'CloudletPolicyBean |
IThenable'.  
Type 'undefined' is not assignable to type 'CloudletPolicyBean | IThenable'.**
The source code is below with comment showing where the compile error occurs.  
This was asked in SO and people there have commented that this is indeed a
error with type definition for webdriver. Can someone here please take a look.  
**selenium-webdriver types used: 3.0.4  
node:6.9.5  
protractor:5.1.2**
    import {browser, element, ElementFinder, ExpectedConditions} from 'protractor';
    import * as wd from 'selenium-webdriver';
    import {By} from "selenium-webdriver";
    export class ExtendedExpectedConditions {
        public static refreshUntilElementIsPresent(element: ElementFinder,  numberOfSeconds: number = 30000,
            refreshInterval: number = 5000): void {
            this.refreshElement(element, numberOfSeconds, refreshInterval);
        }
        protected static refreshElement(element: ElementFinder, numberOfSeconds: number = 30000, refreshInterval:
            number = 5000) {
            //This line throws the compile error
            element.isPresent().then(value => {
                if (!value) {
                    if (numberOfSeconds  {
                        browser.refresh().then(() => this.refreshUntilElementIsPresent(element, numberOfSeconds -
                        (refreshInterval / 1000)));
                    });
                }
           });
        }
    }