### Indexing and Query Optimization

To partially address the issue, an index can be set up using a Bloom Filter (BF). For example, for AND queries on two columns, if a record has value `a` for column A and value `b` for column B, the following keywords are added: `A:a`, `B:b`, and `AB:a.b`. This approach transforms indexed AND queries into single-term queries. However, this method cannot be fully generalized, as the space required grows exponentially with the number of search columns.

### Complex Queries

The performance of Conjunctive Normal Form (CNF) queries can be analyzed by treating each disjunct (i.e., OR query) as a single-term query. In general, any complex Boolean query can be converted to CNF and then analyzed similarly. Performance scales with the number of results returned by the best disjunct when the query is in CNF form. Notably, we do not need to convert our queries to this form or have detailed knowledge about the data (e.g., high- or low-entropy terms) to achieve this performance, which is even better than MySQL.

### Computation and Communication

Both computational and communication resources required for our protocol are proportional to the query complexities described above.

### False Positives

Since our system is built on Bloom Filters, false positives are possible. In our experiments, we set the false positive rate of each BF to \(10^{-6}\). Assuming the worst-case scenario where many search paths reach and query the BFs at the leaves, this gives a \(10^{-6}\) false positive probability for each term of the query. The false positive rate is a tunable parameter in our system.

### Related Work

#### General-Purpose Secure Computation Schemes
Private Database Management Systems (DBMS) can be addressed using general-purpose secure computation schemes [26, 38, 52, 53]. These solutions, however, involve at least linear (often much more) work in the database size, making them impractical for large-scale applications.

#### Oblivious RAM (ORAM)
Oblivious RAM (ORAM) [27] can completely hide the client’s query pattern and can be used to achieve sublinear amortized time for secure computation if we allow some program running time leakage [29, 39]. Despite these advantages, the computational costs are still prohibitively high for practical use at the scale we are interested in.

#### Private Information Retrieval (PIR)
Private Information Retrieval (PIR) protocols [16] allow a client to retrieve the \(i\)-th record from the server's data without the server knowing the index \(i\). Symmetric PIR (SPIR) protocols [24] additionally ensure that the client learns nothing beyond the requested record. While most PIR and SPIR protocols support record retrieval by index selection, Chor et al. [15] introduced PIR by keyword. These protocols have sublinear communication complexity but polynomial computation, making them inefficient for practical use.

#### Fully Homomorphic Encryption (FHE)
Fully homomorphic encryption (FHE) was theoretically shown to be possible by Gentry in 2009 [21]. Despite significant progress, current FHE constructions are too slow for practical use. For example, it takes two and a half days to homomorphically compute 720 AES blocks [23].

#### Practical Private Search
Little work has been done on practical private search for large datasets. To achieve efficiency, weaker security (with some small amount of leakage) has been considered. Works like [44, 47] support single keyword search and conjunctions but do not scale well to databases with millions of records. Our system extends their approach to support range queries and negations, achieving sublinear performance.

#### Single Keyword Search Solutions
Any single keyword search solution can be used to solve arbitrary Boolean formulas insecurely by solving each keyword separately and combining the results. This, however, leaks more information and has work proportional to the sum of the work for each term. Our system, in contrast, provides privacy for the overall query and has work proportional to the smallest term.

#### Searchable Symmetric Encryption (SSE)
There has been extensive research on searchable symmetric encryption (SSE) [11–13, 17, 25, 41, 50]. SSE focuses on data outsourcing rather than data sharing, and the data owner is the client, so no privacy against the client is required. Many SSE solutions offer either linear-time search over the number of database records or restricted types of client queries. One exception is the recent SSE scheme [11], which extends the approach of [17] to allow any Boolean formula. Their search time complexity is \(O(m \times D(k_0))\), where \(D(k_0)\) is the number of records containing keyword \(k_0\). Our solution addresses arbitrary Boolean formulas with complexity proportional to the best term in the CNF representation.

#### Public Key Setting
Searchable encryption has also been studied in the public key setting [4, 6, 9, 10, 49], where multiple users can use the server's public key to encrypt their data and send it to the server.

#### CryptDB
The CryptDB system [45] addresses DB encryption from a different angle and is largely incomparable to our work. CryptDB does not aim to address query privacy but achieves similar privacy to single-keyword search solutions. It focuses on DB data confidentiality against a curious DB administrator by using a non-private DBMS over SQL-aware encrypted data. The SQL query is pre-processed by a fully trusted proxy that encrypts the search terms, and the query is executed by standard SQL. For free-text search, CryptDB uses the linear solution of [50].

#### Closest Related Work
The closest related work to our setting is a recent extension [31] of the SSE solution [11], which additionally addresses data privacy against the client. Both [11] and [31] support the same class of functions. In the worst case, the complexity of [31] can be linear in the DB size. Our solution, in contrast, does not depend on the client’s knowledge of data distribution or representation choice (beyond the size of the formula). For typical practical applications, [31] can evaluate a large majority of queries with asymptotic complexity similar to ours. In terms of security, [31] achieves security against malicious clients, which is stronger than our semi-honest setting. Our leakages vary and are incomparable, with [31] leaking individual term supports for disjunctive queries.

### Discussion and Motivation

#### Semi-Honest Model
The semi-honest model is often reasonable in practice, especially in government use scenarios. Regular audits help enforce semi-honest behavior. Security against malicious adversaries can be added using standard techniques, but this results in impractical performance. In follow-up work, we show how to amend our protocols to protect against one malicious player (C or IS) at a very small cost (about a 10% increase).

#### Impact of Allowed Leakage
Formally pinning down exact privacy loss is challenging. Understanding our leakage and its impact for specific applications is crucial. We informally investigated the impact of leakage in several natural applications, such as population databases and call-record databases, and believe that our protection is insufficient in some scenarios but provides strong guarantees in many others.

#### Rough Leakage Estimation for Call-Records DB
Consider a call-records database with columns (Phone number, Callee phone number, time of call). The client C is allowed to ask queries of the form `SELECT * WHERE phone number = xxx AND callee phone number = yyy AND time of call ∈ {interval}`. For typical call patterns (e.g., 0-10 calls/person/day), the query leakage will almost always constitute a tree with branches either going to the leafs (returned records) or truncated one or two levels from the root. We believe this is acceptable leakage for many purposes.

#### Reliance on Third Party
While a two-party solution is preferable, state-of-the-art solutions are orders of magnitude slower than what is required for scalable DB access. Using ORAM, set up by a trusted party or through a 2-PC between data owner and querier, is a reasonable approach. However, due to privacy requirements, each ORAM step must be done over encrypted data, leading to unacceptable performance. In government use cases, employing a third party is often seen as reasonable, provided they are not trusted with the data or queries.

### Conclusion

Guaranteeing complete search privacy for both the client and the server is expensive. However, a weaker level of privacy is often acceptable in practice, especially as a trade-off for greater efficiency. We designed, proved secure, built, and evaluated a private DBMS, named Blind Seer, capable of scaling to tens of terabytes of data. This breakthrough performance is achieved at the expense of leaking search tree traversal information. Our performance evaluation results demonstrate the practicality of our system, especially for queries returning a few results, with overhead ranging from just 1.2× to 3× slowdown compared to plaintext MySQL.

We note that the range from complete privacy to best performance is wide, and our work targets a specific point within it. Future work aims to develop a highly tunable system that can be configured to match various practical scenarios with different privacy and performance requirements.

### Acknowledgments

This work was supported in part by the Intelligence Advanced Research Project Activity (IARPA) via the Department of Interior National Business Center (DoI/NBC) contract Number D11PC20194. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements of IARPA, DoI/NBC, or the U.S. Government.

Fernando Krell was supported by BECAS CHILE, CONICYT, Gobierno de Chile. This material is based upon work supported by the National Science Foundation. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.

We thank MIT Lincoln Labs researchers for supporting this program and facilitating extensive testing of our code.