Enabling efﬁcient attack investigation from system monitoring data,”
in USENIX ATC, 2018.
[98] P. Gao, X. Xiao, D. Li, Z. Li, K. Jee, Z. Wu, C. H. Kim, S. R.
Kulkarni, and P. Mittal, “SAQL: A stream-based query system for
real-time abnormal system behavior detection,” in USENIX Security,
2018.
[99] P. Fei, Z. Li, Z. Wang, X. Yu, D. Li, and K. Jee, “Seal: Storage-efﬁcient
causality analysis on enterprise logs with query-friendly compression,”
in USENIX Security, 2021.
[100] X. He, L. Liao, H. Zhang, L. Nie, X. Hu, and T.-S. Chua, “Neural
collaborative ﬁltering,” in ACM WWW, 2017.
[101] F. Zhang, N. J. Yuan, D. Lian, X. Xie, and W. Ma, “Collaborative
knowledge base embedding for recommender systems,” in ACM KDD,
2016.
[102] X. Wang, D. Wang, C. Xu, X. He, Y. Cao, and T. Chua, “Explainable
reasoning over knowledge graphs for recommendation,” in AAAI, 2019.
[103] B. Hu, C. Shi, W. X. Zhao, and P. S. Yu, “Leveraging meta-path based
context for top- N recommendation with A neural co-attention model,”
in ACM KDD, 2018.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:26 UTC from IEEE Xplore.  Restrictions apply. 
503
[104] Y. Xian, Z. Fu, S. Muthukrishnan, G. de Melo, and Y. Zhang,
“Reinforcement knowledge graph reasoning for explainable recommen-
dation,” in ACM SIGIR, 2019.
[105] A. Tsymbal, “The problem of concept drift: deﬁnitions and related
work,” in Computer Science Department, Trinity College Dublin, 2004.
[106] A. Roy and S. Pan, “Incorporating extra knowledge to enhance word
embedding.” in IJCAI, 2020.
[107] N. Michael, J. Mink, J. Liu, S. Gaur, W. U. Hassan, and A. Bates, “On
the forensic validity of approximated audit logs,” in ACSAC, 2020.
APPENDIX A
DISCUSSION OF ONLINE DETECTION.
We currently design SHADEWATCHER to perform ofﬂine
cyber threat analysis similar to existing intrusion detection
systems (e.g., [11], [14], [21]). As our ofﬂine implementation
can process large-scale system entity interactions within sec-
onds, it is already possible for SHADEWATCHER to perform
real-time analysis. However, adapting SHADEWATCHER to an
online approach brings new challenges. For example, similar
to most
learning approaches using embedding techniques,
SHADEWATCHER must retrain its embedding space over time
for new system entities. This phenomenon is well known
as concept drift [105]. One potential solution is to take
morphological knowledge [106] of system entities (e.g., ﬁle
path, owner, and privileges) into consideration to generalize
and capture the semantics of previously unobserved entities.
We leave this optimization as future work.
APPENDIX B
NOISE REDUCTION
To cut down irrelevant or redundant audit records in the
casual analysis of cyber threats, we adopt several noise re-
duction techniques from previous work while constructing a
provenance graph. Speciﬁcally, Causality Preserved Reduc-
tion [6] (CPR) aims to aggregate audit records with identical
provenance impact scope. For example, in Figure 1a, gtcache
receives network packages from 146.153.68.151:80 220 times
for a single data transfer operation. As the absence of re-
dundant receive activities does not alter any data provenance,
CPR merges them and only keeps the ﬁrst occurrence. Ad-
ditionally, recent work [46] discovers that system activities
on speciﬁc ﬁles are not helpful for provenance analysis. For
example, applications regularly create temporary ﬁles to store
intermediate results and delete them after termination. As
these ﬁles exclusively interact with a single process during
their lifecycle, they are of no interest for causal analysis and
can be safely eliminated. Another type of noisy record to
be removed comes from interactions with read-only libraries
during the process initialization [47]. Towards this end, we
deﬁne a whitelist of trusted libraries and remove them if not
affecting the correctness of the causal analysis.
Figure 9 shows the number of edges in provenance graphs
before and after using different noise reduction techniques.
We observe that SHADEWATCHER cuts off around 95% and
65% edges on the TRACE and Simulated datasets compared
with the original provenance graphs. Since SHADEWATCHER
removes a large volume of noisy audit records, the quality of
system entity interactions is signiﬁcantly improved for cyber
(a) TRACE dataset
(b) Simulated dataset
Fig. 9: Effectiveness of different reduction techniques, where
C, T, and L represent causality preserved reduction, temporary
ﬁle reduction, and system library reduction, respectively.
threat detection. Note that our reduction statistics is not the
same as the recent study [107] due to different system entity
granularity levels as discussed in § VIII-A.
APPENDIX C
POSITIVE INTERACTION SAMPLING
For each system entity interaction observed in normal audit
records, we treat it as a negative (benign) instance. Then, we
randomly sample unobserved interactions as positive (poten-
tially malicious) instances. Notice that this sampling strategy
does not guarantee to generate malicious instances.
A similar phenomenon can be found in the recommenda-
tion domain. Typically, users are reluctant to express their
preferences on items, and recommendation systems have to
infer them from implicit user behaviors, such as clicks and
purchases. Nevertheless, the items that a user dislikes still
cannot be determined from user-item interactions. To address
this challenge, recommendation systems [29], [100], [102]
assume items with which a user never interacts to be disliked.
Although unobserved interactions do not yet indicate prefer-
ences4, it is an acceptable recommendation objective to rank
observed interactions higher than unobserved ones.
Since SHADEWATCHER performs anomaly detection, we
follow a similar assumption to recommend a higher probability
of being adversarial for unobserved system entity interac-
tions. To provide a deep understanding, we compare SHADE-
WATCHER’s detection effectiveness with and without sampled
positive interactions. The results are summarized in Table VIII.
We ﬁnd that our sampling strategy brings signiﬁcant detection
improvements. This is reasonable because a recommendation
model cannot differentiate between benign and malicious
interactions by training only on negative instances.
4The unobserved user-item interactions are a mixture of actual dislikes and
missing values (i.e., users may interact with an item in the future).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:26 UTC from IEEE Xplore.  Restrictions apply. 
504
# Edges [million]OriginCC+TC+T+L# Edges [log-scale]OriginCC+TC+T+LDataset
TRACE
Dataset
[48]
Simulated
Dataset
TABLE VII: Overview of attack scenarios in the TRACE and Simulated datasets.
Attack Scenario
Extension Backdoor
Firefox Backdoor
Pine Backdoor
Phishing Executable
Conﬁguration Leakage [31]
Content Destruction [36]
Cheating Student [70]
Illegal Storage [36]
Passwd Gzip Scp [6]
Passwd Reuse [31]
Description of Scenario
An attacker exploits a target host via a vulnerable browser plugin pass-mgr. The compromised
plug-in downloads and executes a malicious program, which scans ports for internal recon and
exﬁltrates sensitive information.
A malicious ad server exploits Firefox to execute an in-memory payload. This provides a remote
console to exﬁltrate sensitive information. A cache process is also exploited and displays similar
behaviors as the compromised Firefox.
Pine is compromised by a malicious executable to scan ports for internal recon and establish
a connection to the attacker’s machine.
An attacker sends a malicious executable as an e-mail attachment to exploit a vulnerability in
Pine. However, the attack fails even though a user manually downloads and runs the executable.
A downloaded txt ﬁle leverages the code executable vulnerability in vim to collect machine
conﬁguration for future system compromise preparation.
An insider tampers with classiﬁed programs and documents.
A student compromises OpenSSL service in a teaching assistant’s server to steal exam answers.
An attacker creates a directory in another user’s home directory and uses it to store illegal ﬁles.
An attacker steals user account information from /etc/passwd ﬁle, compresses it using gzip, and
transfers the data to a remote machine using ssh service.
An administrator reads encrypted user password from /etc/shadow ﬁle, decodes it with John, and
uses the plaintext to log in on other applications.
(a) Provenance Graph
(b) Bipartite Graph
Fig. 10: Recommendations on the Firefox Backdoor.
TABLE VIII: Impact of positive interaction sampling on
detection. Positive Rate (PR) shows the ratio of sampled
positive instances to negative interactions. We use PR=2 to
report experimental results in § VIII due to the best accuracy.
Positive
Rate
Precision
TRACE Dataset
Recall
F1 Score Accuracy
0
1
2
3
0%
0%
0%
100%
0.9995
99.98% 99.99% 0.9998
0.9980
99.63%
99.90%
99.97%
0.008
0.9990
0.9996
0.9959
APPENDIX D
AUDIT DATA COLLECTION
To collect whole-system audit data, we use the Linux
Audit [43] with the following system calls: read, write, open,
close, mq open, openat, unlink, link, linkat, unlinkat, rmdir,
mkdir, rename, pipe, pipe2, dup, dup2, fcntl, clone, fork, vfork,
execve, kill, sendto, recvfrom, sendmsg, sendmmsg, recvmsg,
recvmmsg, connect, socket, and getpeername.
Although we implement SHADEWATCHER to take inputs
from Linux Audit, it can also be extended to support other
audit sources: CamFlow [85] for Linux, ETW for Windows,
and Dtrace for FreeBSD.
APPENDIX E
ATTACK SCENARIO DESCRIPTION
Table VII presents the overview of attack scenarios in the
TRACE and Simulated datasets. Note that the original TRACE
dataset consists of ﬁve APT attacks. However, because Phish-
ing Email is invisible in audit records [17], we do not include
it in the evaluation. More speciﬁcally, once a user visits a
phishing website and enters credentials, subsequent system
activities would be identical to normal workloads. Therefore,
system auditing by nature cannot detect Phishing Email.
APPENDIX F
CASE STUDY ON FIREFOX BACKDOOR
In this incident, Firefox is compromised by a malicious
ad server to steal sensitive user information. Then, multiple
cache processes are launched and display similar behaviors.
As the provenance of cache is missing in the original TRACE
dataset [17], we only capture the malicious behavior rooted at
/etc/passwd for the second part of the attack in Figure 10a.
Firefox Backdoor generates a total of 251 system entity
interactions, eight of which are manually labeled as cyber
threats. Figure 10b illustrates SHADEWATCHER’s recommen-
dation results. The only false negative comes from the in-
teraction between /etc/password and one of the seven cache
processes. We also see that the interaction between /etc/passwd
and 180.156.107.146:80 is given a very high probability (2.17)
to be adversarial, which matches our intuition that sensitive
ﬁles normally do not interact with public networks. Another
interesting observation is that SHADEWATCHER generates 12
false-positive interactions with /proc/pid/stat. By looking into
these false alarms, we discover that they are all associated
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:26 UTC from IEEE Xplore.  Restrictions apply. 
505
/etc/passwdcache180.156.107.146:80/proc/pid/statfirefox/proc/sys/vm/overcommit_memory/etc/group!!!!!!!"!!!!/etc/passwdcache180.156.107.146:80/proc/pid/statfirefox/proc/sys/vm/overcommit_memory/etc/group2.171.46 / -2.51-7.33-1.96 / 0.95-2.66-4.17Fig. 11: A simpliﬁed provenance graph of Content Destruction,
where r8 denotes delete. Dash (a), dash (b), and dash (c) are
/bin/dash with different command-line arguments: “-sh”, “sh
-c chmod u+s /home/test/CVE; id; echo ‘opening root shell’;
/bin/sh;”, and “/bin/sh”.
with ﬁles that are rarely accessed in a running system (e.g.,
/proc/2457/stat). This reveals a limitation of our ﬁrst-order
modeling, which differentiates system entities via the nuance
of contextual
information. In particular, SHADEWATCHER
cannot uncover side information of entities without rich con-
texts. One possible solution to improve SHADEWATCHER’s
effectiveness is incorporating morphological knowledge (e.g.,
ﬁle path) to help capture entity semantics. Nevertheless, ob-
taining high-quality representations of system entities is a
separate research topic that requires non-trivial efforts. For
example, it is challenging to determine useful features from
numerous entity attributes and effectively integrate them into
the ﬁnal representations. While morphological
information
is not considered in this study, our proposed knowledge
graph provides a uniﬁed representation that can conveniently
combine different sources of knowledge from system auditing.
APPENDIX G
ATTACK WITH PRIVILEGE ESCALATION
Recall that after an attacker escalates privilege on a host,
he/she can tamper with audit data at will to cover attack
footprints. However, as mentioned in § III-B, the attacker
has no way of manipulating previous audit records that have
tracked the evidence of privilege escalation via a variety of
secure auditing solutions (e.g., centralized auditing servers).
Therefore, it is necessary to explore the effectiveness of a
detection system in a scenario where the only audit records
available are the ones from before privilege escalation.
Towards this end, we evaluate how SHADEWATCHER per-
forms on audit data before the attacker escalates privilege in
Content Destruction. In this scenario, an attacker exploits a
local privilege escalation vulnerability of SolarWinds Serv-
U5 to get a root shell and delete classiﬁed ﬁles. The attack
is launched in two phases. In the ﬁrst phase, the attacker
5https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12181
Fig. 12: Visualizing system entity embeddings with t-SNE.
downloads (git) the source code of an exploit and compiles
(gcc) it to an executable (exploit). Then, the attacker runs
the executable (./exploit) to open a root shell (dash). In
the second phase, the attacker adopts the privileged shell to
discover (ls) and delete (rm) sensitive data (project.c) on
the victim’s machine. A simpliﬁed provenance graph built
upon Content Destruction is shown in Figure 11, where the
attacker’s activities before and after privilege escalation are
separated into two boxes, namely, Phase I and Phase II.
To evaluate SHADEWATCHER on audit data before privilege
escalation, we perform threat detection on 46 system entity
interactions extracted from Phase I in Figure 11. Two of
46 interactions that exploit
the Serv-U vulnerability (i.e.,
exploit.c r0−→Serv-U and exploit.c r0−→/bin/dash (b)) are labeled
as malicious. Observe that in Table IX, both malicious inter-
actions are recommended with high probabilities (well beyond
-0.5) of being adversarial. Additionally, SHADEWATCHER
predicts the rest of the interactions in Phase I as benign
activities. The experimental results verify our hypothesis in
§ III-B that even without audit data after privilege escalation,
SHADEWATCHER still can detect cyber threats by identifying
system entity interactions used for escalating privileges.
TABLE IX: Recommendations on two malicious system entity
interactions before privilege escalation.
Target
Initiator
/home/test/CVE/exploit.c
/home/test/CVE/exploit.c
/usr/local/Serv-U/Serv-U
/bin/dash (b)
Score
4.65
4.70
VISUALIZATION OF SYSTEM ENTITY EMBEDDING.
APPENDIX H
We use the t-SNE technique to visualize TransR’s em-
In particu-
bedding spaces on a two-dimensional plane.
lar, Figure 12 shows the embeddings of /etc/passwd and
/etc/cron.daily/libvirt-bin in entity and relation spaces. The
entity space intuitively reﬂects the embeddings of TransE
and TransH. We can observe that 1) /etc/passwd has various
representations when involved in read, write, create, and delete
relations; and 2) /etc/passwd and /etc/cron.daily/libvirt-bin are
nearby in the entity space but far away from each other
in speciﬁc relation spaces. The visualization conﬁrms that
TransR captures intrinsic characteristics of system entities in
the contexts of different relations, while TransE and TransH
cannot compare the difference.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:26 UTC from IEEE Xplore.  Restrictions apply. 
506
git clonecc1/tmp/x.sas/tmp/x.oldexploitexploit.cdash (a)exploitServ-Udash (b)dash (c)idchmodrmproject.c!!!"!"!!!"!!!"!#!$!$!$!$!$!$!$!%Phase II: After Privilege EscalationPhase I: Before Privilege EscalationEmbedding SpaceSystem EntityEntityDeleteWriteCreateRead/etc/cron.daily/libvirt-bin/etc/passwd