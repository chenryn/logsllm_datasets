**作者：腾讯研发安全团队 Martinzhou；腾讯蓝军 Neargle、Pass  
原文链接：**
### **I. 背景**
数月前我们在攻防两个方向经历了一场 “真枪实弹” 的考验，期间团队的目光曾一度聚焦到 Chromium 组件上。
其实，早在 Microsoft 2018 年宣布 Windows 的新浏览器 Microsoft Edge 将基于 Chromium
内核进行构建之前，伴随互联网发展至今的浏览器之争其实早就已经有了定论，Chromium
已然成为现代浏览器的事实标准，市场占有率也一骑绝尘。在服务端、桌面还是移动端，甚至据传 SpaceX 火箭亦搭载了基于 Chromium 开发的控制面板。
![
](https://images.seebug.org/content/images/2021/07/42e76f7c-b70c-4c6d-b2ba-24abfd4e5301.png-w331s)
Chromium内核的安全问题，早已悄无声息地牵动着互联网生活方方面面。基于对实战经历的复盘，本文将从Chromium架构及安全机制概况入手，剖析Chromium组件在多场景下给企业带来的安全风险并一探收敛方案。
### **II. 浅析Chromium**
#### **2.1 Chromium涉及哪些组件？**
Chromium主要包含两大核心组成部分：渲染引擎和浏览器内核。
##### **2.1.1 渲染引擎**
Chromium目前使用Blink作为渲染引擎，它是基于webkit定制而来的，核心逻辑位于项目仓库的third_party/blink/目录下。渲染引擎做的事情主要有：
1) 解析并构建DOM树。Blink引擎会把DOM树转化成C++表示的结构，以供V8操作。
2) 调用V8引擎处理JavaScript和Web Assembly代码，并对HTML文档做特定操作。
3) 处理HTML文档定义的CSS样式
4) 调用Chrome
Compositor，将HTML对应的元素绘制出来。这个阶段会调用OpenGL，未来还会支持Vulkan。在Windows平台上，该阶段还会调用DirectX库处理；在处理过程中，OpenGL还会调用到Skia，DirectX还会调用到ANGLE。
Blink组件间的调用先后关系，可用下图概括：
![
](https://images.seebug.org/content/images/2021/07/d07eb76e-8430-42d4-a96b-97c18d25d821.png-w331s)
可以说，几乎所有发生在浏览器页签中的工作，都有Blink参与处理。由于涉及许多组件库，不难想象过程中可能会出现的安全风险一定不少。据《The
Security Architecture of the Chromium
Browser》一文的统计数据，约67.4%的浏览器漏洞都出在渲染引擎中，这也是为什么要引入Sandbox这么重要。
##### **2.1.2 浏览器内核**
浏览器内核扮演连接渲染引擎及系统的“中间人”角色，具有一定“特权”，负责处理的事务包括但不限于：
1) 管理收藏夹、cookies以及保存的密码等重要用户信息
2) 负责处理网络通讯相关的事务
3) 在渲染引擎和系统间起中间人的角色。渲染引擎通过Mojo与浏览器内核交互，包含组件：download、payments等等。
#### **2.2 Chromium 的沙箱保护原理 / 机制**
##### **2.2.1 为什么要引入沙箱？**
前述部分提到，Chromium 渲染引擎涉及大量 C++ 编写的组件，出现漏洞的概率不小。因此，基于纵深防御理念浏览器引入了涉及三层结构。
渲染引擎等组件不直接与系统交互，而是通过一个被称为 MOJO 的 IPC
组件与浏览器引擎通讯（也被称为：broker），再与系统交互。进而可以实现：即便沙箱中的进程被攻破，但无法随意调用系统 API 产生更大的危害。
有点类似：即便攻破了一个容器实例，在没有逃逸或提权漏洞的情况下，宿主机安全一定程度上不受影响（实际上，浏览器的 Sandbox
和容器隔离的部分技术原理是相似的）。
##### **2.2.2 浏览器的哪些部分是运行在沙箱中的？**
浏览器渲染引擎、GPU、PPAPI 插件以及语音识别服务等进程是运行在沙箱中的。此外不同系统平台下的部分服务也会受沙箱保护，例如 Windows
下打印时调用的 PDF 转换服务、icon 浏览服务；MacOS 下 NaCl loader、需要访问 IOSurface 的镜像服务等。
更多细节可查阅 Chromium 项目文件 sandbox_type.h 和 sandbox_type.cc 中的源码定义：
![
](https://images.seebug.org/content/images/2021/07/f2b6b4e8-a7bd-4c1d-b038-243ca32bfa4f.png-w331s)
##### 2.2.3 Windows和Linux下沙箱实现的技术细节
1) Windows
在Windows平台上，Chrome组合使用了系统提供的Restricted Token、Integrity Level、The Windows job
object、The Windows desktop
object机制来实现沙盒。其中最重要的一点是，把写操作权限限制起来，这样攻击这就无法通过写入文件或注册表键来攻击系统。
2) Linux
Chrome 在 Linux 系统上使用的沙箱技术主要涉及两层：
**第一层沙箱采用 setuid sandbox 方案。**
其主要功能封装在二进制文件 chrome_sandbox 内，在编译项目时需要单独添加参数 “ninja -C xxx chrome
chrome_sandbox” 编译，可以通过设置环境变量 CHROME_DEVEL_SANDBOX 指定 Chrome 调用的 setuid
sandbox 二进制文件。
setuid sandbox 主要依赖 **两项机制** 来构建沙盒环境：CLONE_NEWPID 和 CLONE_NEWNET 方法。
CLONE_NEWPID 一方面会借助 chroots，来限制相关进程对文件系统命名空间的访问；另一方面会在调用 clone() 时指定
CLONE_NEWPID 选项，借助 PID namespace，让运行在沙盒中的进程无法调用 ptrace() 或 kill() 操作沙盒外的进程。
而 CLONE_NEWNET 则用于限制在沙盒内进程的网络请求访问，值得一提的是，使用该方法需要 CAP_SYS_ADMIN 权限。
这也使得当 Chrome 组件在容器内运行时，沙箱能力所需的权限会和容器所管理的权限有冲突；我们无法用最小的权限在容器里启动 Chrome 沙箱，本文
4.2.2 部分会详细阐述此处的解决之道。
![
](https://images.seebug.org/content/images/2021/07/6ff55865-b90c-4eec-8f7a-3ac259190b88.png-w331s)
  * 更多详参见 Linux Namespace 及 cgroups 介绍说明：
"Resource management: Linux kernel Namespaces and cgroups"
-
由于 setuid sandbox 方案存在一定短板。自 Chrome 44 版本起已推荐 namespaces sandbox 来替代 setuid
sandbox 方案，其主要依赖于 Linux 内核提供的 user namespaces 机制，相关逻辑可在项目的如下行代码看到：
![
](https://images.seebug.org/content/images/2021/07/89834002-2009-4b41-b51c-a6fb76413c5c.png-w331s)
**第二层沙箱采用 Seccomp-BPF 方案，用来限制进程访问内核特定攻击面。**
其原理是：通过将 Seccomp 和 BPF 规则结合，实现基于用户配置的策略白名单，对系统调用及其参数进行过滤限制。
![
](https://images.seebug.org/content/images/2021/07/bedb2d66-775b-477c-8e1b-ecd5de4d4d6e.png-w331s)
#### **2.3 小结**
Chromium 涉及的组件众多，使用的 C++ 语言天然决定了会潜在不少安全问题。例如：一个 V8
中的内存安全问题（如：CVE-2021-21220、CVE-2019–5782），组合 Web Assembly 将 Shellcode 写入 RWX
Pages，在未受沙箱保护的情况下，就能实现远程代码执行。
沙箱机制组合使用了 OS 相关的隔离能力（如：Linux 平台上的 namespace、Seccomp-BPF 机制），限制了被沙箱保护进程的资源访问以及
syscall 能力，能很好的防止出现在渲染引擎中的漏洞，被用于直接实现 RCE
：但沙箱机制也存在一些不足，历史上也出现过沙箱逃逸的漏洞，例如：Google Project Zero 团队曾发布的《Virtually Unlimited
Memory: Escaping the Chrome Sandbox》一文。
综上，在无法 100% 预防 Chromium 渲染进程出现内存安全问题的情况下，开启沙箱保护是一项必须落地的最佳安全实践。
### **III. Chromium 漏洞攻击利用场景分析**
作为一款客户端组件，在评估 Chromium 漏洞时，常常会聚焦于客户端的攻防场景。但根据我们的经验，受 chromium
漏洞影响的不仅有客户端应用，也包含了服务器上运行的程序，例如：部署在服务器端、基于 Chrome Headless 应用的爬虫程序等。
#### **3.1 服务器端**
##### **3.1.1 禁用沙盒的 chromium headless 应用**
随着 Phantomjs 项目停止维护，Chromium headless 已经成为 Headless Browser
的首选。在日常开发、测试、安全扫描、运维中，有许多地方会用到 Headless Browser，包括不限于以下场景：
  * 前端测试
  * 监控
  * 网站截图
  * 安全扫描器
  * 爬虫