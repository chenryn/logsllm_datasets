With that being said, it’s possible to capability unlock the Samsung Ativ GT-I8750 when its running Windows
Phone 8 with the update level at GDR2 or below (i.e., OS version 8.0.10327.77 or 8.0.10328.78). The unlock
allows all capabilities offered by the OS to be unlocked for use by third-party applications.
The GDR3 update blocked access to the exploitable functionality, thus if you are running Windows Phone 8
GDR3 and above, you must first flash your Ativ back to GDR2 before the capability unlock procedure described
in the link shown will work. Instructions and materials for flashing the device’s ROM back to GDR2 are
available at several online resources, such as in this thread http://forum.gsmhosting.com/vbb/f200/samsung-
ativ-s-i8750-wp8-hard-reset-tutorial-firmware-flashing-guide-1671518/.
In particular, the core vulnerability that allows ID_CAP_INTEROPSERVICES and others to be unlocked in ATIV
devices is the Diagnosis application, which was written by Samsung, the device’s vendor. It has the
ID_CAP_INTEROPSERVICES capability and it provides powerful functionality such as registry writing, which is
obviously interesting from a privilege escalation standpoint.
The Diagnosis application is not installed by default for obvious reasons but is installable via a secret dialer
code. After you install it, you can use the Diagnosis app’s registry writing functionality to unlock
ID_CAP_INTEROPSERVICES and subsequently every capability in the OS.
TIP
The steps and explanations given here assume Windows Phone 8 GDR2 and below—if your device is
running GDR3 or above, see the opening paragraph of this section for reverting to GDR2.
The vulnerabilities and exploit apps used in Samsung device unlocks were researched and developed by several
members belonging to the XDA-Developers forum. Some of these researchers include -W_O_L_F- and
GoodDayToDie, who are perhaps jointly responsible for the Samsung Ativ S interop unlock; cpuguy is also due
credit for discovering that reaching Diagnosis’ registry editor via a toast notification is possible.
Figure 10.9 Sideloading the Interop Unlock helper app
Following the guidelines given here should, if carried out correctly, result in the Ativ’s being unlocked for the
deployment of apps with all capabilities. Other interesting abilities, such as being able to browse the device’s
entire filesystem as well as downloading and modifying files on it, should also be possible. We take no
responsibility from any damages resulting directly or indirectly from following the instructions given here,
because devices could possibly end up bricked if something goes wrong.
1. Download the Interop_Unlock_Helper_Debug_ARM.xap application (http://forum.xda-
developers.com/attachment.php?attachmentid=2526341&d=1390156486) and sideload it to the developer-
unlocked Samsung Ativ S using the Application Deployment SDK tool. (See Figure 10.9.)
This application is a helper app designed to leverage the secret registry editing functionality within the once-
hidden Samsung Diagnosis tool.
2. Start the device’s dialer application and enter the secret dialer code to install Diagnosis. The code is
##634##. Diagnosis installs, and a new dialer screen reading Odyssey_... appears. This is the Diagnosis app,
which is now installing. Press the Windows button to exit it.
Run the Interop Unlock Helper app on the device and tap Next until the app’s screen reads Step 2.
3. Choose your Samsung model and tap Send toast. This sends a clickable toast notification that provides an
entry point into Diagnosis’ registry editor functionality.
4. Tap the toast notification to enter Diagnosis’ registry editor. Navigate back to the unlock helper app without
closing Diagnosis, and tap Next. In particular, the toast notification opens Diagnosis’ registry via the
following URI: App://07a20ad9-a4f9-3de3-855f-
dcda8c8cab39/_default#/WP8Diag;component/7_ETC/RegistryOperationsCheck.xaml.
5. Put a check mark in the HKEY_LOCAL_MACHINE and Check if value is DWORD boxes. Enter
software\microsoft\devicereg\install into the Registry Path To Operate field, enter MaxUnsignedApp into
the Key field, and enter some arbitrary value above 300 as the key’s new value. Click Write to write this new
value. Even though an error message may appear indicating the write failed, this is common—ignore it. (See
Figure 10.10.)
6. Untick the Check if value is DWORD box, ensure that HKEY_LOCAL_MACHINE is still ticked, and then in the
Registry path to operate field enter software\microsoft\devicereg, and for Key type PortalUrlProd. For
the key’s value enter the following string: http://127.0.0.1, and click Write. See Figure 10.11.
7. Ensure that the Check if value is DWORD box is still unticked, ensure that HKEY_LOCAL_MACHINE is still ticked,
and then in the Registry Path To Operate field enter software\microsoft\devicereg, and for Key enter
PortalUrlInt. For the key’s value enter the following string: http://127.0.0.1, and click Write.
The device is now interop unlocked; the registry editor and unlock helper app can both be exited. The next
couple steps unlock the remainder of the OS’s privileges so that any capabilities can be used with newly
sideloaded apps.
8. Download the BootstrapSamsung_Release_ARM.xap app (http://forum.xda-developers.com/attachment.php?
attachmentid=2258632&d=1379229845), sideload it to the device using the Application Deployment software,
and then run it. A success message appears. Exit the app.
9. Download the EnableAllSideloading_Release_ARM.xap (http://forum.xda-developers.com/attachment.php?
attachmentid=2258633&d=1379229845) app, sideload it to the device using the Application Deployment
software, and then run it. The app displays a success message, so now exit the app.
The Ativ is now unlocked for all capabilities.
Figure 10.10 Setting the MaxUnsignedApp registry key
Figure 10.11 Setting the PortalUrlProd registry key
With the device unlocked, it is possible to sideload devices requesting any capability the OS supports. This opens
interesting possibilities for exploration of the device and security assessment of installed applications.
Assuming the device has at this stage been successfully capability unlocked, you can now install an XDA-
Developers born home-brew application called SamWP8 Tools. The application was written by -W_O_L_F-
from XDA-Developers.com and can be downloaded from http://forum.xda-developers.com/showthread .php?
t=2435673. This app requests privileged capabilities, so capability unlocking your device before attempting to
install it is necessary.
Among other interesting features, this tool is able to apply a registry tweak that tells the Media Transfer
Protocol (MTP) service to serve the C:\ root instead of just the media directories (that is, photos, music, and so
on) as it usually does. A registry key is also modified so that the MTP service serves up the C:\ with LocalSystem
privileges, giving full filesystem access.
You can deploy SamWP8 Tools in the same manner as any home-brew XAP application—using the SDK
Application Deployment tool. (See “Developer Unlocking Your Phone” for information on using the Application
Deployment tool.)
The Full FS Access option is located on the “tweaks” screen of the SamWP8 app, accessed by opening the app
and swiping left. The box should be ticked to apply the appropriate registry modification. (See Figure 10.12.)
Figure 10.12 Applying the Full Filesystem access hack using SamWP8 tools
After you tick the box, you should reboot the device.
At this point you can browse and modify files on the device’s filesystem by plugging the device into another
system via USB as a normal mass storage device. Any standard file manager will suffice for viewing the device’s
filesystem, including Explorer, a shell, or another file manager of your choice. Figure 10.13 shows an Ativ’s
filesystem being browsed after using SamWP8 to carry out the MTP registry hack.
Figure 10.13 Browsing the filesystem
You can find a quasi-official thread for the tools used in the preceding process on the XDA-Developers.com
forum at the following URL: http://forum.xda-developers.com/showthread.php?t=2435697.
Samsung Ativ Interop Unlock and Filesystem Access on Windows Phone 8.1 via Custom MBN
Several members of the XDA-Developers.com community have released MBN files that can be flashed to
compatible Samsung devices running Windows Phone 8.1 to unlock the ID_CAP_INTEROPSERVICES capability (and
others) and apply registry hacks to allow full filesystem access.
MBN files, simply put, allow modifications to a phone’s settings, apps, and registry to be made. These changes
are made when the MBN is flashed to the device. Several members of the Windows Phone hacking community
have created MBN files so that when flashed to a device, various capabilities are unlocked and registry hacks are
made so as to allow full filesystem access to the device via USB mass storage mode.
NOTE
Full filesystem access on a device is gained by hacking on the registry so that the MTP service—Media
Transfer Protocol Service—runs as LocalSystem and has its mount point at C:\, thus allowing browsing of
the device’s entire filesystem via USB mass storage mode when plugged into another computer.
Typical MBN files released in the community also make other tweaks to the device’s settings, such as creating or
removing tiles, and tweaking other device settings.
Most work in this area appears to be heavily based on -W_O_L_F-’s and GoodDayToDie’s work on unlocking
capabilities and on _-WOLF-_’s MBN creation work.
There are a number of options available in terms of choosing which MBN file to flash to your Samsung Ativ
device running Windows Phone 8.1, but our current favorites are Spavlin’s (also from XDA-Developers) -
W_O_L_F-’s ROMs, so we’ll now discuss how to flash these MBNs to your device. We’ll also list some of the
additional features and tweaks that these MBNs apply so that you can choose one.
Spavlin’s MBN
Spavlin of XDA-Developers published an MBN that when flashed to a Samsung Ativ device, provides the
following:
Developer unlock
Interop unlock
Carrier unlock
Relock prevent
No pre-pinned Samsung tiles
Unlock of large number of non-third-party capabilities, reportedly 286
Full filesystem access via an MTP registry hack (Media Transfer Protocol service, i.e., for USB mass storage)
Several UI-based tweaks
Gray/silver theme
The UI skin appears as a gray/silver color, as in the screenshot below.
Figure 10.14 Home Screen with Spavlin’s MBN Applied
If you’d like to opt to use this MBN, you can download it from here, as Spavlin’s original thread:
http://forum.xda-developers.com/showthread.php?t=2727667. Either CMK or CMJ version will do.
Spavlin’s MBN is believed to be based on work by -W_O_L_F-, but may have included features that were not
included in -W_O_L_F-’s original ROM, including interop unlock.
At this point, you can proceed to the “How to Flash the MBN to a Device” section, to flash the MBN to your
device and thereby prepare it to serve as a penetration testing device.
-W_O_L_F-’s MBN
-W_O_L_F- has also released an MBN. The MBN, version 2.1 at the time of this writing, introduces the
following features to a phone that it is flashed on:
Developer unlock
Interop unlock
Carrier unlock
Relock prevent
Full filesystem access via an MTP registry hack (Media Transfer Protocol service, i.e., for USB mass storage)
Volume limit disabled
Large number of non-third-party capabilities unlocked
No pre-pinned Samsung tiles
Some less useful Samsung apps removed
Full access to APNs and Internet sharing
The Yandex and Google search providers
Lime green ‘theme’
-W_O_L_F-’s MBN was quite possibly the first publicly released modification released by the Windows Phone
hacking community. The MBN may be downloaded via this URL: http://forum.xda-
developers.com/attachment.php?attachmentid=2703339&d=1398239287. The official thread on XDA-Developers
is here: http://forum.xda-developers.com/attachment.php?attachmentid=2703339&d=1398239287.
Having chosen this MBN, you may now proceed to the next section, “How to Flash the MBN to a Device” to gain
the MBN’s features, i.e., interop and full filesystem access among others, and thereby prepare your device for
penetration testing.
How to Flash the MBN to a Device
Now that you’ve chosen either the -W_O_L_F- or Spavlin MBN, you can now proceed to flash it to your
Samsung Ativ device.
Once the MBN has been flashed to the device, the device will be interop unlocked and will allow the tester to
gain access to its filesystem. Flashing the MBN is trivial if done correctly; the steps below should be followed
very closely, because omission of details could end in you bricking your device.
1. Ensure that your phone has Windows Phone 8.1 installed on it. You can check this by going to Settings About
More Information and looking for Windows Phone 8.1.
2. Download the flashing tool from the following location: http://support.moulnisky.com/index.php?
dir=Samsung/Firmwares/GT-I8750/Downloader/.
3. Download -W_O_L_F-’s fake ROMs from here: http://forum.xda- developers.com/attachment.php?
attachmentid=2811394&d=1403430057 and unpack the archive. You use a fake ROM file because you don’t
actually want to flash a ROM to the device. You just want to flash an MBN file and keep the device’s current
ROM. As such, the fake ROM is just a file that is loaded into the flashing tool to make the tool happy.
4. Install SamsungUSBDriver.msi which is packaged with the flashing tool. You may need to use Windows 7 to
install this cleanly. These drivers allow communication between Windows and your device via USB.
5. Run the flashing tool as Administrator.
6. Click the yellow folder icon and select the ROM file to flash. Select the appropriate fake ROM file; fake_GT-
I8750.wp8.
7. Click the green folder icon and select the MBN file to flash to the device; this will be your chosen MBN,
either Spavlin’s (spv_81_cmk.mbn) or -W_O_L_F-’s MBN (wolfROM_2.1.mbn).
8. Untick all of the Options checkboxes except for CSC and ensure that all checkboxes and radio buttons have
the exact configuration shown in Figure 10.14; this is very important to prevent you from bricking your
device. Ensure that under DL Options, Select is selected. CSC Sales Code can remain set as ATO.
9. Place your device in Download mode. To do this, turn the device off and then hold Volume Up + Power +
Camera. When the device vibrates, release the Power button but continue to hold the Volume Up + Camera
button. Upon the next vibration, release all buttons. You’ll see the Download screen. At this point, the device
is in a state in which it can have ROMs and MBNs flashed to it. Plug your device into your computer via USB.
10. Ensure that your flasher tool view has the settings shown in Figure 10.14.
11. Click Start to begin the MBN flashing process.
12. Remember that you do not want to flash the actual ROM itself (it is not a real ROM). You just want to flash
an MBN file to the device, so you see the message, “Partition information is Not equal. Download all binary?”
click No. This is very important. You do not want to flash a fake ROM to your device!
13. The MBN flashing will happen almost instantly; turn off your phone by holding the Power button; boot the
phone back up.
14. Hard reset your phone by going to Settings About Reset Your Phone, and allow your phone to be reset.
15. Once your phone has finished its hard reset, the MBN will be fully installed.
NOTE
Carrying out a hard reset will wipe all your data; ensure your data is backed up first! You can do this by
going to Settings Backup, and configuring cloud backups from there.
Figure 10.15 Configuration of checkboxes and radio buttons
At this point, your device will be quite well prepared for penetration testing already; your phone will be
developer unlocked, interop unlocked, and various other interesting capabilities will be available when you are
installing apps. Additionally, filesystem access is available when you plug the device into your computer via USB
as a mass storage device. You have filesystem access by means of plugging the device into a computer via USB.
You can read the sections “Using Filesystem Access” and “Using Registry Access” to learn how to use your newly
gained privileges and to begin the security-related exploration of your device.
Huawei Ascend W1 Full Capability Unlock and Filesystem Access on Windows Phone 8
A Windows Phone hacking community member named “reker” has produced a tool named rkBreakout, which
capability unlocks (including ID_CAP_INTEROPSERVICES) at least Huawei Ascend W1-C00 and Huawei Ascend W1-
U00 devices that are running Windows Phone 8. This tool does not work for devices running Windows Phone
8.1.
We have not tested this tool, but according to the original thread, the tool works as advertised; the tool has been
verified as working by various members of XDA-Developers.
The tool may be downloaded from the original thread, which is located at the following URL: http://forum.xda-
developers.com/showthread.php?t=2707074.
In addition to unlocking interesting high privilege capabilities, the registry is also hacked to similar effect as the
aforementioned Samsung hacks, in that the MTP (Media Transfer Protocol service, i.e., which deals with USB
mass storage) service runs as LocalSystem and has its root set at C:\.
NOTE
As noted above, this tool does not work on devices running Windows Phone 8.1. To reiterate, we
recommend that you use a Windows Phone 8.1 device for your penetration testing and hacking activities
so no apps are off limits, so if you have a Huawei Ascend W1-U00 device, we’d suggest you follow the
instructions in the next section.
Huawei Ascend W1-U00 Full Capability Unlock and Filesystem Access on Windows Phone 8.1
WojtasXda, on XDA-Developers, has released a custom ROM intended for Huawei Ascend W1-U00 devices. The
ROM has the following features:
Develop unlocked
Interop unlocked
All capabilities unlocked
Full filesystem access
The ROM and the flashing tool are available in the original thread by WojtasXda, which is located here:
http://forum.xda-developers.com/showthread .php?t=2686053.
The thread also contains instructions for flashing the ROM to your device.
We have not tested this ROM and its accompanying tool, but feedback in the thread firmly ascertains that the
release works as advertised.
Once the instructions in the thread have been followed, your device should be fully capability unlocked,
including interop unlocked, and will allow full filesystem access via USB mass storage mode.
Using Filesystem Access
After you’ve capability unlocked your device and hacked the device for filesystem access, you can begin browsing
the filesystem.
Having this ability can be very useful in security assessments for a number of reasons, including:
You can retrieve application binaries/.NET assemblies that would otherwise have been inaccessible due to
the DRM protection applied by the Store.
You can extract files created by applications to inspect for sensitive information leakage.
You can extract application manifest files for investigation into potential entry points and library usage (see
the earlier section, “Application Manifests”).
You can modify registry hive files.
You can explore the device’s internals.
You can explore the filesystem by plugging your hacked device into a computer via USB. Once plugged in,
you can browse the filesystem via mass storage mode using Explorer or your file manager of choice.
The locations on the filesystem of particular interest for security reviews are:
C:\Data\Programs\{GUID}\Install—This is where application binaries/ .NET assemblies are located, in
addition to application assets and manifest files, where {GUID} pertains to a particular application.
C:\Data\Users\DefApps\APPDATA\{...}—Application sandbox directories, where apps can store data, which
could potentially be sensitive—where {GUID} pertains to a particular application.
The majority of files on the device can be both read and written, since the MTP service will be running as
LocalSystem. Read access is obviously useful for extracting files and analyzing or reverse engineering them, and
write access can be useful in the context of patching application files, among other things.
This ability to access the device’s filesystem will be a cornerstone for your penetration testing activities; you can
use it to extract apps and their assets from your device, and you can also examine the contents of an app’s
filesystem sandbox.
For example, once you extract .NET assemblies and native binaries from an application’s directory, you will then
be able to use a .NET bytecode reverse engineering tool (.NET reflector, for example) or disassembler (i.e., IDA
Pro) to reverse the app and then carry out a security review. You’ll also have the ability to analyze any data that
is stored by the app in its local storage, to check for data leaks and absence of crypto use on sensitive data.
Figure 10.16 shows an application’s install directory being browsed.
Figure 10.16 Browsing an app’s Install directory in Explorer
The remainder of the Windows Phone sections rely quite heavily on you having filesystem access to your device
so that you can extract its app binaries and view its filesystem sandbox.Examination of application binaries that
have been extracted from the device’s filesystem will be revisited in the later section “Reverse Engineering.”
Using Registry Access
The best method for browsing the device’s registry at present is via GoodDayToDie’s Native Access Webserver.