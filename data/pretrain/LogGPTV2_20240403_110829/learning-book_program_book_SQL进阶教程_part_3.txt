100
四国
650
注9
香川
200
九州
600
在“统计姑果”这张表中，“四
国”对应的量表 PrpTbl中的“德
爱媛
150
其他
450
岛、香川、爱强、高知”“九
高知
200
州”对应的显表 PopTbl中的 “福
福冈
300
冈]、佐例、长崎”。 
编者注
佐贸
100
长崎
200
东京
400
群马
50
大家会怎么实现呢？定义一个包含“地区编号”列的视图是一种做法，
但是这样一来，需要添加的列的数量将等同于统计对象的编号个数，而且
很难动态地修改。
为了便于理解，这里用县名（pref_name）代替编号作为GROUP BY的列。
--把县编号转换成地区编号[11
SSL&CT CASE pref_nane
MHEN德岛THEN·四国
国NINH
KHEN·高知·THEN·四国
---
## Page 18
11 CASE表达式
5
MHEN福冈THEN九州
WHEN佐贺THEN九州
MHEN长崎THEN九州
ELSE其性' END AS district,
SUM (population)
FROMPopTb1
GROUP BY CASE pref_oane
国品。以3I，NSHA
KHEN·爱'THEN“四国
国HI，，NSHA
MHEN福冈THEN九州
MHEN佐贺THEN九州
BLSg·其他END;
MHEN长崎THEN九州
这里的关键在于将SELECT子句里的CASE表达式复制到GROUPBY
子句里。需要注意的是，如果对转换前的列“pref_name”进行GROUP
BY，就得不到正确的结果（因为这并不会引起语法错误，所以容易被忽视）。
同样地，也可以将数值按照适当的级别进行分类统计。例如，要按人
口数量等级（pop_class）查询都道府县个数的时候，就可以像下面这样
写 SQL语句。
--按人口数量等级划分都通府具
SELECT
CASE HHEN populatIon e 100 THEN +011
HHEN population >= 100 AND population  0oTe[ndod aN 0oz =c uoTeIndod NEHH
0: N3I 00E = uernod aN oot se uoaerndd NZN
NHEN population >= 200 AND population < 300THEN 031
#0: N2HL 0oE =c uoT2etndod KEHM
ELSE NULL END;
pop_elass
cnt
01
03
02
04
2
---
## Page 19
6
第1章 神奇的 SQL
这个技巧非常好用。不过，必须在SELBCT子句和 GROUP BY子句这
两处写一样的CASE表达式，这有点儿麻烦。后期需要修改的时候，很容
易发生只改了这一处而忘掉改另一处的失误。
所以，如果我们可以像下面这样写，那就方便多了。
--把县编号转换成地区编号[21：将CASE表达式归纳到一处
SSL&CT CASE pref_nane
国HI：NHA
国HI量，NEHA
MHEN‘福冈THEN九州
VEEN长峰THEN九州
MHEN‘佐贺THEN九州
ELss*其性'Eo As district,
SUM (population)
FROM PopTb1
 r 手均理引用T 28r 手与中定显的胰名
没错，这里的 GROUP BY子句使用的正是SBLECT子句里定义的列的
别称—district。但是严格来说，这种写法是违反标准SQL的规则的。
因为 GROUP BY子句比 SELECT语句先执行，所以在 GROUP BY子句中引
用在SBLECT子句里定义的别称是不被允许的。事实上，在Oracle、DB2、
SQLServer等数据库里采用这种写法时就会出错。
不过也有支持这种SQL语句的数据库，例如在PostgreSQL和MySQL
中，这个查询语句就可以顺利执行。这是因为，这些数据库在执行查询语
句时，会先对SELECT子句里的列表进行扫描，并对列进行计算。不过因
为这是违反标准的写法，所以这里不强烈推荐大家使用。但是，这样写出
来的SQL语句确实非常简洁，而且可读性也很好。
用一条SQL语句进行不同条件的统计
进行不同条件的统计是CASE表达式的著名用法之一。例如，我们需
要往存储各县人口数量的表PopTbl里添加上“性别”列，然后求按性别、
县名汇总的人数。具体来说，就是统计表PopTbl2中的数据，然后求出如
表“统计结果”所示的结果。
---
## Page 20
11  CASE表达式
■婉计源表PopTbl2
■坑计结果
县名
男
德岛
1
60
德岛
60
40
德岛
2
40
香川
100
100
香川
1
100
爱媛
100
50
香川
2
100
高知
100
100
爱媛
1
100
福冈
100
200
爱媛
2
50
佐贸
20
80
高知
1
100
长崎
125
125
高知
2
100
东京
250
150
福冈
1
100
福冈
2
200
佐贸
20
佐贺
2
80
长崎
1
125
长崎
2
125
东京
1
250
东京
2
150
通常的做法是像下面这样，通过在WHERE子句里分别写上不同的条件，
然后执行两条SQL语句来查询。
■示例代码3
-男性人口
SELECT pref_name,
FROM PopTb12
SUN (population)
HHERE sex = *1'
raeu Joad Ag dnouD
女性人口
SELECT pref_nare,
SUN (population)
FROM PopTb12
MHERE nex = *2
roueu god xg dnouD
最后需要通过宿主语言或者应用程序将查询结果按列展开。如果使用
UNION，只用一条SQL语句就可以实现，但使用这种做法时，工作量并没
---
## Page 21
8
第1章神奇的SQL
有减少，SQL语句也会变得很长。而如果使用CASE表达式，下面这一条
简单的 SQL语句就可以搞定。
SEL&CT pref_name
SUM( CASE KHE sex = 1' THEN population ELS& 0 END) AS cnt_m,
--男性人口
--女性人口
SUM( CASE WHEN Bex = *2' THEN population ELSE 0 END) AS cnt_f
ausaxaad x8 a0080
FROMPopTb12
（）有
结构”的数据。除了SUN，COUNT、AVG等聚合函数也都可以用于将行结
构的数据转换成列结构的数据。
这个技巧可贵的地方在于，它能将SQL的查询结果转换为二维表的
格式。如果只是简单地用GROUPBY进行聚合，那么查询后必须通过宿主
语言或者Excel等应用程序将结果的格式转换一下，才能使之成为交叉表。
看上面的执行结果会发现，此时输出的已经是侧栏为县名、表头为性别的
交叉表了，在制作统计表时，这个功能非常方便。如果用一句话来形容这
个技巧，可以这样说：
新手用WHERE子句进行条件分支，高手用SELECT子句进行条件
分支。
如此好的技巧，请大家多使用。
用CHECK约束定义多个列的条件关系
其实，CASE表达式和CHECK约束是很般配的一对组合。也许有很多
数据库工程师不怎么用CHECK约束，但是一且他们了解了CHECK约束和
CASE表达式结合使用之后的强大威力，就一定会跃跃欲试的。
假设某公司规定“女性员工的工资必须在20万日元以下”，而在这个
公司的人事表中，这条无理的规定是使用CHECK约束来描述的，代码如下
所示。
---
## Page 22
11 CASE表达式
CONsTRAINrr check_salary CHECK
[ CASE MHEN Sex = *2
THEN CASE KHEN salary <= 200000
THEN 1 ELSE 0 END
ELSE 1 END = 1 
在这段代码里，CASE表达式被嵌入到CHECK约束里，描述了“如果
是女性员工，则工资是20万日元以下”这个命题。在命题逻辑中，该命
题是叫作蕴含式（conditional）的逻辑表达式，记作P→Q。
辑与也是一个逻辑表达式，意思是“P且Q”记作PAQ.用逻辑与改
写的CHECK约束如下所示。
CoNSTRAINT check_salary CHECK
[sex =12# AND salary <= 200o00 ]
当然，这两个约束的程序行为不一样。究竞哪里不一样呢？请先思考
一下，再看下面的答案和解释。
如果在CHBCK约束里使用逻辑与，该公司将不能雇俱男性员工。而如果使用
蕴含式，男性也可以在这里工作。
解释
要想让逻辑与PAQ为真，需要命题P和命题Q均为真，或者一个为真且另
一个无法判定真假。也就是说，能在这家公司工作的是“性别为女且工资在20万
日元以下”的员工，以及性别或者工资无法确定的员工（如果一个条件为假，那
么即使另一个条件无法确定真假，也不能在这里工作。
而要想让蕴含式P→Q为真，需要命题P和命题Q均为真，或者P为假，
或者P无法判定真假。也就是说如果不满足“是女性”这个前提条件，则无需考
虑工资约束。
请参考下面这个关于逻辑与和蕴含式的真值表。U是SQL中三值逻
辑的特有值unknowm的缩写（关于三值逻辑，1-3节将详细介绍）。
图灵社区会员非洲铜(PI:EMAIL）专享尊重版权
---
## Page 23
●10
第1章神奇的SQL
逻辑与和蕴含式
逻辑与
含式