space of the privileged process. The attack is then completed by sending a WM_TIMER 
message that includes the address of the shell code buffer. The default handler for the 
WM_TIMER message simply accepts the address parameter as a function pointer, and 
then immediately runs the code that's pointed to. The result is a straightforward 
privilege escalation performed by running arbitrary code in the context of a privileged 
process. 
The immediate response to the shatter vulnerability was to simply filter the WM_TIMER 
message in any privileged process interacting with a user's desktop. Unfortunately, 
the WM_TIMER message is just a symptom of the problem. The reality is that many 
messages allow manipulation of memory in a target process's address space or could 
lead to arbitrary execution. Brett Moore demonstrated a number of these messages in 
a speech at the Blackhat security conference 
(http://blackhat.com/presentations/bh-usa-04/bh-us-04-moore/bh-us-04-moorew
hitepaper.pdf). However, there are certainly new exploitable messages that have yet 
to be considered. Plus, there are unique exploit vectors in each windowed process, 
which make it unreasonable to expect developers to anticipate every one. The root of 
the problem is that a privileged process, or specifically a service, can't safely interact 
with a potentially hostile desktop. 
As a code auditor, you need to identify situations that cause a privileged service to 
interact with normal user desktops. This interaction can happen in two basic ways. 
The first is a simple operational concern; you just need to check the properties for a 
service and make sure the service isn't interactive. To do this, use the Services 
Microsoft Management Console (MMC) to open the Properties dialog box for the 
service. Then check the "Log On" tab to see whether the "Allow Service to Interact 
with Desktop" option is selected. If it is, the service is potentially vulnerable to a 
shatter attack. Figure 12-1 shows the Properties dialog box for the Windows Task 
Scheduler, which is an interactive service. 
Figure 12-1. An interactive Windows service 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
711 
Services can use another method to interact with a user desktop; they can manually 
create a thread and window on the user's desktop. The following code shows this 
process: 
HWINSTA hWinsta; 
HDESK hDesk; 
hWinsta = OpenWindowStation("Winsta0", FALSE, MAXIMUM_ALLOWED); 
SetProcessWindowStation(hwinsta); 
hdesk = OpenDesktop("default", 0, FALSE, MAXIMUM_ALLOWED); 
SetThreadDesktop(hDesk); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
712 
For brevity's sake, the error checking has been left out, but this code is essentially 
how a service sets up a thread on a normal user's desktop. This code simply opens a 
handle to Winsta0 and then uses the returned handle to open the default desktop. The 
current thread is then switched to this desktop, and the thread can interact with the 
logged-on user's desktop. Of course, the thread isn't vulnerable until it starts 
processing messages. Fortunately, you know how to identify that because you walked 
through a message window setup earlier. However, don't discount the existence of a 
message window just because you can't see it. For instance, certain COM applications 
can create background message windows (as explained in "COM(? [????.])" later in 
this chapter), so you need to be aware of these possibilities. 
To summarize, when you audit a service, you should perform the following steps to 
identify potential shatter-attack exposures: 
1.  Check the MMC snap-in for the service to see whether it runs as the interactive 
user. 
2.  Examine the code to determine whether it manually attaches to the interactive 
user's desktop. 
3.  If either case is true, determine whether a message pump is in operation for 
receiving window messages. If a message pump is in operation, you can consider 
the application to be at risk. 
DDE 
Dynamic Data Exchange (DDE) is a legacy form of IPC that exchanges data by using 
a combination of window messages and shared memory. It's done in one of two ways. 
This first requires handling WM_DDE_* window messages with the PackDDElParam() and 
UnpackDDElParam() functions. The second method uses the DDE Management Library 
(DDEML) API, which includes a set of Dde* functions that wrap the window message 
handling. You can refer to the MSDN for more particulars on using DDE 
communications. 
DDE was a common form of IPC in earlier versions of Windows, but it has been mostly 
superseded by more robust mechanisms. DDE has no real security impact when used 
to establish communication between processes with the same security context. 
However, it can be used to establish communication between different user contexts 
on a shared window station or even exchange data over a network by using file shares. 
Just to make it more confusing, DDE supports impersonation of clients in a DDE 
communication. What you need to keep in mind is that any use of DDE between 
security contexts represents a potential shatter vulnerability. This includes network 
DDE, which requires a privileged service on the desktop. So vulnerable uses of DDE 
include the same type of setup as the shatter attacks described previously. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
713 
Terminal Sessions 
Windows Terminal Services (WTS) provides the capability for a single Windows 
system to host multiple interactive user sessions. Originally, this capability was 
available as a separate product in Windows NT Terminal Server. However, it was 
eventually incorporated into the base product line in all versions of Windows XP. 
Terminal Services is not fully functional in most Windows XP versions, but it is a 
necessary component of the Remote Assistance and Fast User Switching (FUS) 
capabilities. 
The introduction of WTS required some additional framework for interacting with 
different connections; this requirement was addressed by the addition of terminal 
sessions and their associated WTS API functions. Terminal sessions place additional 
restrictions on the interaction between processes in different sessions. For example, 
each terminal session has a unique Winsta0 associated with it, and objects are 
distinguished between sessions by using the Global\ and Local\ namespace prefixes. 
This naming setup allows the standard API functions to still work as expected, while 
the WTS API can be used for WTS-specific manipulation. 
Versions of WTS before the Vista release have an interesting quirk. They run all 
services in session 0, which is the first session the system creates. It also happens to 
be the same session used by the first interactively logged-on user. Running all 
services in session 0 unintentionally grants some extra privilege to the console user 
on a terminal server and the first user on an FUS-enabled system. The main impact is 
that a session 0 user can communicate with interactive services. 
As mentioned, an interactive service represents a serious vulnerability that could 
allow attackers to run arbitrary code in the context of a privileged service account. 
Windows Vista addresses this vulnerability by eliminating interactive services entirely. 
It restricts session 0 to services only and makes it a completely noninteractive session. 
You should make note that any software specifically targeting Windows Vista won't be 
vulnerable to the general class of shatter vulnerabilities. 
7.8.4 Pipes 
Pipes are a connection-oriented IPC mechanism that can be used to communicate 
data between two or more processes. There are two types of pipes: anonymous pipes 
and named pipes. An anonymous pipe is a unidirectional pipe that transfers data 
locally between two processes. Because anonymous pipes have no names, they can't 
be referred to by arbitrary processes. Generally, this means only the creating process 
can make use of an anonymous pipe, unless the pipe handle is duplicated and passed 
to another process. Usually, anonymous pipes are used for communication between 
threads in a single process or between a parent and child process. Named pipes, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
714 
conversely, can be referred to by arbitrary processes and be accessed remotely, 
depending on the access rights associated with the pipe when it's created. Because 
anonymous pipes are local and have only a few of the problems associated with 
named pipes, the following sections focus on named pipes. 
Pipe Permissions 
All pipes are securable objects, so they have specific access rights associated with 
their DACL entries. Table 12-2 summarizes the pipe permissions listed in the MSDN. 
Table 12-2. Pipe Access Rights 
Access Right 
Meaning 
PIPE_ACCESS_DUPLEX 
Allows the caller to read and write to the pipe and gives them 
SYNCHRONIZE access. 
PIPE_ACCESS_INBOUND 
Allows the caller to read from the pipe and gives them 
SYNCHRONIZE access. 
PIPE_ACCESS_OUTBOUND Allows the caller to write to the pipe and gives them 
SYNCHRONIZE access. 
As you can see, access rights for pipes are simpler than most other objects, such as 
files, so developers are less likely to inadvertently set incorrect permissions on a pipe. 
Still, vulnerabilities can result when access permissions are applied haphazardly. It 
might be possible for rogue processes to have read or write access to a pipe when 
they shouldn't, which could lead to unauthorized interaction with a pipe server. This 
problem can even occur with anonymous pipes because attackers can enumerate the 
process handle table and duplicate a handle to a pipe with weak access permissions. 
Named Pipes 
Named pipes are a multidirectional IPC mechanism for transferring data between 
unrelated processes on the same machine or different machines across a network. A 
named pipe can be uni- or bi-directional, depending on how it's created. Pipes work in 
a client/server architecture; pipe communications are made by having one pipe 
server and one or more clients. So a number of clients can be connected to a pipe 
simultaneously, but there can be only one server. 
Pipe Creation 
Pipes can be created by using CreateFile() or CreateNamedPipe(). You have already 
examined the semantics for creating and accessing pipes with CreateFile(), so you 
don't need to review this function again. The prototype for CreateNamedPipe() is 
shown as follows: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
715 
HANDLE CreateNamedPipe(LPCSTR lpName, DWORD dwOpenMode, 
           DWORD dwPipeMode, DWORD nMaxInstances, 
           DWORD nOutBufferSize, DWORD nInBufferSize, 
           DWORD nDefaultTimeout, 
           LPSECURITY_ATTRIBUTES lpSecurityAttributes) 
As you can see, the CreateNamedPipe() function allows more control over certain 
characteristics of the named pipe than CreateFile() does. In addition to the regular 
attributes, developers can optionally specify an input and output buffer size for the 
pipe, although they are only advisory values the system isn't required to honor. The 
dwOpenMode value specifies which access rights the pipe should be opened with 
(PIPE_ACCESS_DUPLEX, PIPE_ACCESS_INBOUND, or PIPE_ACCESS_OUTBOUND). In addition, 
one or more flags can be specified: 
FILE_FLAG_FIRST_PIPE_INSTANCE This flag causes the function to fail if the pipe 
already exists. 
FILE_FLAG_WRITE_THROUGH On certain types of pipes where the client and server 
processes are on different machines, this flag causes the client to not return 
until all data has been written to the pipe successfully. 
FILE_FLAG_OVERLAPPED Overlapped I/O is enabled; a process doesn't need to 
wait for operations on the pipe to finish to continue running. 
The dwPipeMode value specifies what type of pipe should be created. A pipe can be 
PIPE_TYPE_BYTE, which causes pipe data to be treated as a single-byte stream, or 
PIPE_TYPE_MESSAGE, which causes data to be treated as a series of separate messages. 
The nDefaultTimeout value specifies a timeout value in milliseconds for an operation 
to be performed on the pipe, and finally, lpSecurityAttributes specifies a security 
descriptor for the pipe. 
Clients that just want to send a single message to a pipe (of type PIPE_TYPE_MESSAGE) 
don't have to go through the whole process of opening it and closing it. Instead, they 
can use the CallNamedPipe() function, which has the following prototype: 
BOOL CallNamedPipe(LPCSTR lpNamedPipe, LPVOID lpInBuffer, 
         DWORD nBufferSize, LPVOID lpOutBuffer, DWORD 
         nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut) 
This function opens the pipe specified by lpNamedPipe, writes a single message, reads 
a single response, and then closes the pipe. It's useful for clients that just need to 
perform a single pipe transaction. 
Impersonation in Pipes 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
716 
A named pipe server can impersonate the credentials of client servers that connect to 
it. This impersonation is achieved by using the ImpersonateNamedPipeClient() 
function, which has the following prototype: 
BOOL ImpersonateNamedPipeClient(HANDLE hNamedPipe) 
As you can see, this function simply takes a handle to a named pipe and then returns 
a value of TRUE or FALSE, depending on whether impersonation is successful. If it's 
successful, the thread impersonates the context associated with the last message 
read from the pipe. The last message read requirement gets a bit sticky. If the 
connection is local, impersonation always fails unless data has first been read from 
and written to the pipe. However, if the client is remote, the impersonation might 
succeed because messages are transferred in establishing the connection. In either 
case, it's best to make sure the pipe is read from before impersonation is attempted. 
Next, you need to examine the use of impersonation levels. In the context of named 
pipes, clients can restrict the degree to which a server can impersonate them by 
specifying an impersonation level in the call to CreateFile(). Specifically, the 
impersonation level can be indicated in the dwFlagsAndAttributes parameter. Here's 
the CreateFile() function prototype again: 
HANDLE CreateFile(LPCSTR lpFileName, DWORD dwDesiredAccess, 
           DWORD dwSharedMode, 
           LPSECURITY_ATTRIBUTES lpSecurityAttributes, 
           DWORD dwCreationDisposition, 
           DWORD dwFlagsAndAttributes, 
           HANDLE hTemplateFile) 
By including the SECURITY_SQOS_PRESENT flag in the dwFlagsAndAttributes parameter, 
you can specify the following impersonation flags: 
SECURITY_ANONYMOUS This flag enforces the SecurityAnonymous impersonation 
level for the object being opened. 
SECURITY_IDENTIFICATION This flag enforces the SecurityIdentification 
impersonation level for the object being opened. 
SECURITY_IMPERSONATION This flag enforces the SecurityImpersonation 
impersonation level for the object being opened. 
SECURITY_DELEGATION This flag enforces the SecurityDelegation impersonation 
level for the object being opened. 
SECURITY_EFFECTIVE_ONLY This flag causes any changes made via 
AdjustToken*() functions to be ignored. 
SECURITY_CONTEXT_TRACKING The security tracking mode is dynamic. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
717 
Clients can protect their credentials from malicious servers by using these flags, so 
you should always be on the lookout for instances in which a client is overly 
permissive in the impersonation it allows. You also need to pay close attention to 
common oversights when applying these protections. Try to spot the bug in the 
following code. 
BOOL SecureOpenPipe(void) 
{ 
    HANDLE hPipe; 
    hPipe = CreateFile("\\\\.\\pipe\\MyPipe", GENERIC_ALL, 0, NULL, 
        OPEN_EXISTING, SECURITY_IDENTIFICATION, NULL); 
    if(hPipe == INVALID_HANDLE_VALUE) 
        Return FALSE; 
    ... do pipe stuff ... 
} 
Did you see it? The developers are trying to protect the client from connecting to a 
malicious server by enforcing the SECURITY_IDENTIFICATION impersonation level. It's a 
great idea, but poor execution. They forgot to use the SECURITY_SQOS_PRESENT flag, so 
the SECURITY_IDENTIFICATION flag is completely ignored! A correct implementation 
would look like this: 
BOOL SecureOpenPipe(void) 
{ 
    HANDLE hPipe; 
    hPipe = CreateFile("\\\\.\\pipe\\MyPipe", GENERIC_ALL, 0, NULL, 
        OPEN_EXISTING, 
        SECURITY_SQOS_PRESENT|SECURITY_IDENTIFICATION, NULL); 
    if(hPipe == INVALID_HANDLE_VALUE) 
        Return FALSE; 
    ... do pipe stuff ... 
} 
It is also important to audit how servers might use impersonation. In "Impersonation 
Issues" (MSDN Code Secure, March 2003; 
http://msdn.microsoft.com/library/en-us/dncode/html/secure03132003.asp), 
Michael Howard points out the dangers of not checking return values of an 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
718 
impersonation function. Say a server accepts a connection from a client and then 
wants to access an object on the client's behalf. To do this, it impersonates the user 
and then proceeds to access the object, as shown in this example: 
BOOL ProcessRequest(HANDLE hPipe) 
{ 
    BOOL rc; 
    DWORD bytes; 
    unsigned char buffer[BUFSIZ], fname[BUFSIZ]; 
    for(;;) 
    { 
        rc = ReadFile(hPipe, buffer, BUFSIZ, &bytes, NULL); 
        if(rc == FALSE) 
            break; 
        if(bytes <= 0) 
            break; 
        switch(buffer[0]) 
        { 
            case REQUEST_FILE: 
                extract_filename(buffer, bytes, fname); 
                ImpersonateNamedPipeClient(hPipe); 
                write_file_to_pipe(hPipe, fname); 
                RevertToSelf(); 
                break; 
            ... other request types ... 
        } 
    } 
    ... more stuff here ... 
} 
This code is from a named pipe server that can receive a number of requests, one of 
which is for reading certain files. The code fails to check the return value of the 
ImpersonateNamedPipeClient() function, however. If this function fails, the 
application's privileges and access rights are unchanged from its original state. 
Therefore, a file is accessed with the original permissions of the server process 
instead of the connecting client's. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
719 
You might be wondering "But why would impersonation functions fail? Can a 
malicious client prompt that?" Yes, it can. You just learned that when auditing clients, 
you want to look for the presence or absence of enforcing impersonation levels on the 
server. A malicious client could also use these levels to prohibit the server from 
impersonating the client. Even something as simple as failing to read from the pipe 
first may cause the impersonation call to fail. This failure could result in the object 
being accessed at a higher privilege than intended. 
Pipe Squatting 
As with many other types of objects, named pipes existing in the object namespace 
introduces the possibility for name-squatting vulnerabilities. Developers must be 
careful in deciding how applications create and access named pipes. When auditing an 
application, you need to look at this issue from both sides of the fence: the 
implications for servers that are vulnerable to name squatting and the implications for 
clients that are vulnerable to name squatting. 