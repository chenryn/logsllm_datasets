inconsistency, and (8) unforgeable non-inclusion. We go through these each in turn.
Correctness. This follows by construction.
22
Binding. This follows from a standard Merkle tree argument. To win the game, an adversary A must
output two diﬀerent lists that correspond to the same commitment c = (r, L). Since L is the same, both lists
must have the same length, and since r is the same the corresponding Merkle trees hash to the same root.
Thus, an adversary B can compute the Merkle tree for each list, and consider the ﬁrst level (starting from
the root) at which at least one node diﬀers between the two trees. That node and its neighbor in both trees
can be used to break collision resistance.
Soundness. Again, this follow from a standard argument. To win the game, an adversary must output
(c, list, elmt, π). Parse π = (i, πi) and recall that πi contains the values in the sibling nodes on the path from
elmt at position i to the root; thus, given a valid πi and elmt we can also compute the values for the nodes
on the path. Then compute the Merkle tree for list, and consider the ﬁrst node (starting from the root) at
which the node value in the path from elmt diﬀers from the node in the tree for list. The values for that node
and its neighbor in the path from elmt and in the tree for list can be used to break collision resistance.
Append-only. To win the game, an adversary must output (c1, c2, list2, π). Parse π = (πaux, auxold) and
consider the Merkle tree for list2; if the adversary wins, then its root must match the value in c2. If c1 is not
a commitment to a preﬁx of list2, then there must be at least one node in auxold that does not match the
corresponding node in the tree for list2. In that case we can use the membership proof in πaux for that node
(which shows membership with respect to the root in c2) to ﬁnd a collision, as in the previous two reductions.
Provable inconsistency. To win the game, an adversary must output (c, t, list). Now, consider the cases
where CheckInconsistent outputs 0: (1) the times of events e1, . . . , en are wrong; (2) the proof πpost does not
verify; (3) the ﬁnal value ctest (cid:54)= c; and (4) for some i, c=c(cid:48).
For (1), since list is ordered, DemoInconsistent always ﬁnds a set of events for which the times are correct.
The correctness of ProveAppend implies that (2) cannot happen, and similarly the correctness of Append
implies that (3) cannot happen. Finally, by the correctness of Append, case (4) would imply that CheckCom(c(cid:48),
listpre(cid:107)(e1, . . . , ei)) = 1, which contradicts the assumption that c(cid:48) is not a commitment to a preﬁx of list.
Provable non-inclusion. To win the game, an adversary must output (list, elmt). Now, consider the cases
where CheckNotIncl outputs 0: (1) the times of events e1, . . . , en are wrong; (2) elmt ∈ (e2, . . . , en−1); (3) πpost
does not verify; and (4) Append((e1, . . . , en), cpre, auxpre) (cid:54)= cpost.
For (1), since list is ordered, DemoNotIncl always ﬁnds a set of events for which the times are correct.
Option (2) clearly contradicts the winning condition that elmt /∈ list. The correctness of ProveAppend implies
that (3) cannot happen, and the correctness of Append implies that (4) cannot happen.
Unforgeable inconsistency. To win the game, an adversary must output (c1, t, c2, list2, π) such that c1
is a commitment to a preﬁx of list (call this preﬁx list1, and the rest of the list list∆), c2 is a commit-
ment to list2, the tuple (c1, t, list2) is consistent, but CheckInconsistent accepts the proof π. Parse π =
(cpre, auxpre, e1, . . . , en, cpost, πpost).
Now, if with non-negligible probability list
First, suppose that with non-negligible probability either cpre or cpost is not a commitment to a preﬁx of
list2. That allows us to construct an adversary for the append-only property. (The reduction is immediate
(cid:48)(cid:107)listpost and
(cid:48)
and we omit it.) If this is not the case, then there exist lists list
(cid:48)
) = 1. Let listpre be the preﬁx of list2 corresponding to cpre. Then by correctness of Append
CheckCom(cpost, list
and because CheckInconsistent accepts, we know cpost = Com(listpre(cid:107)(e1, . . . , en)).
(cid:54)= listpre(cid:107)(e1, . . . , en), we can break the binding property.
(Again, this follows from a straightforward reduction.) Thus, we can assume that listpre(cid:107)(e1, . . . , en) = list
(cid:48)
and is a preﬁx of list2.
Finally, because list2 is ordered, and because t(cid:48) is greater than equal to the last element in list1 and
t(cid:48) ≤ list∆[1] (by consistency), we know that list1 = listpre(cid:107)e1, . . . ei for some i, 1 ≤ i ≤ n−1. Then by correctness
of Append, we know c1 will be one of the ctest values computed in CheckInconsistent, and CheckInconsistent
will output 0.
and listpost such that list2 = list
(cid:48)
Unforgeable non-inclusion. To win the game, an adversary must produce (c, list, elmt, π) such that
isOrdered(list), CheckCom(c, list) = 1, and elmt ∈ list, but CheckNotIncl accepts the proof π. Parse π =
(cpre, auxpre, e1, . . . , en, cpost, πpost).
First, suppose that with non-negligible probability either cpre or cpost is not a commitment to a preﬁx of
list. This allows us to construct an adversary for the append-only property. (The reduction is immediate and
23
).
(cid:48)
we omit it.) Now, assume this is not the case. Then there exist lists list
(cid:48)
and cpost = Com(list
Let listpre be the preﬁx of list corresponding to cpre. Then by correctness of Append and because CheckNotIncl
accepts, we know cpost = Com(listpre(cid:107)(e1, . . . , en)).
(cid:48) (cid:54)= listpre(cid:107)(e1, . . . , en), then we can break the binding property.
(Again, this follows from a straightforward reduction.) Thus, we can assume that listpre(cid:107)(e1, . . . , en) = list
(cid:48)
and is a preﬁx of list.
Finally, because list is ordered, and because e1  tAu) inst[j] ← (update, event, rcpt); return (stateAu, snapAu, LS,⊥)
inst[j] ← (check, event, rcpt)
return (stateAu, (event, snapAu), LS,⊥)
CheckEntry[Auditor, 2, j](1λ, stateAu, m)
(cmd, event, rcpt) ← inst[j]
if (cmd = check) return CheckEntry[Auditor, 3, j](1λ, stateAu, m)
(snapLS, π) ← m
b ← CheckSnap(snapLS) ∧ CheckAppend(cAu, cLS, π)
if (b = 0) inst[j] ← (done, event, rcpt); return stateAu, 0, Sys, 0)
snapAu ← snapLS
inst[j] ← (check, event, rcpt)
return (stateAu, (event, snapAu), LS,⊥)
CheckEntry[Auditor, 3, j](1λ, stateAu, m)
(cmd, event, rcpt) ← inst[j]
b ← (rcpt[t] ≤ tAu)
if (b = 0) inst[j] ← (done, event, rcpt); return (stateAu, b, Sys,⊥)
b ← CheckIncl(cAu, event, m)
if (b = 0) eventsbad ← eventsbad(cid:107)(event, rcpt)
inst[j] ← (done, event, rcpt); return (stateAu, b, Sys, 1)
We now consider the winning conditions for the consistency game GconsA (λ). First, if CheckEvidence(pk LS,
evidence) = 0, then there are six possibilities: (1) evidence = ⊥, or evidence = (snapAu, snapMo, (event, rcpt), π)
and either
2. snapAu does not verify;
3. snapMo does not verify;
4. event = ⊥ and CheckInconsistent(cAu, tAu, cMo, π) = 0;
5. CheckNotIncl(cMo, event, π) = 0; or
24
6. CheckRcpt(event, rcpt) = 0.
Looking at the protocol in Figure 5, we can see that in fact the middle four options can never happen, as
the honest auditor and monitor check these values themselves and output them only in the case that they do
verify. Similarly, if the ﬁnal option occurs, then the honest auditor will not include the pair (event, rcpt) in
events(Au)
This leaves us with only one remaining possibility: that evidence = ⊥. Folding in the other winning
bad , so it will never be used in the gossip protocol and thus never output as evidence.
conditions, we can express this as the event E in which
((evidence = ⊥) ∧ (tMo ≥ tAu) ∧ (eventspass \ eventsMo (cid:54)= ∅)).
We build adversaries B1, B2,i for all i, 1 ≤ i ≤ n, and B3 such that
nX
Pr[E] ≤ Advp-cons
dlc,B1
(λ) +
Advappend
dlc,B2,i
(λ) + Advsound
dlc,B3
(λ)
(1)
Combining this with our argument above, we get
i=1
Advcons
trans,A(λ) = Pr[GconsA (λ)]
= Pr[E]
≤ Advp-cons
dlc,B1
(λ) +
nX
i=1
Advappend
dlc,B2,i
(λ) + Advsound
dlc,B3
(λ),
from which the theorem follows.
Equation 1
By the time the auditor and monitor engage in the Gossip protocol, the maps QAu and QMo will have been
populated with (trimmed) transcripts of the interactions in which these parties have engaged, which means
QAu will have a set of keys {eventi}n
j=1, and the auditor and monitor will
have respective state (snapAu, events(Au)
bad , eventsMo). We make two initial observations
about the values in these maps:
i=1 and QMo will have a set of keys {tj}m
bad ) and (snapMo, events(Mo)
1. If we order the keys for QMo and deﬁne (snapj, eventsj) ← QMo[tj], then eventsMo = events1(cid:107) . . .(cid:107)eventsm,
isOrdered(eventsMo) = 1, and CheckCom(cMo, eventsMo) = 1. This follows from the behavior of the honest
monitor and from the correctness of the DLC.
2. If we order the values (c, snapLS, π, π(cid:48)) in QAu by tLS, then tAu = tLS,n and cAu = cLS[n]. This follows
by the behavior of the honest auditor (and in particular because snapLS gets added to QAu only if the
appropriate checks pass).
We now break down the components of E2 as follows: ﬁrst, if evidence = ⊥ and tMo ≥ tAu, then the
execution of the protocol in Figure 5 reached line 13, which means that
CheckInconsistent(cAu, tAu, cMo, DemoInconsistent(eventsMo, tAu)) = 0.
(2)
Based on this, we argue that there must exist a preﬁx eventsAu of eventsMo such that CheckCom(cAu,
eventsAu) = 1. Deﬁne this as event Epreﬁx and suppose to the contrary that it does not hold; then we
construct an adversary B1 against the provable inconsistency of the DLC as follows (we omit the description
of MsgAu and MsgMo, as B1 executes these honestly):
B1(1λ)
r←− AMsgAu,MsgMo(1λ)
pk LS
return (cAu, tAu, eventsMo)
By Equation 2, these outputs satisfy the ﬁrst winning condition of Gp-cons
(λ), and by our ﬁrst initial obser-
vation they also satisfy the last winning condition. Furthermore, if ¬Epreﬁx, then they also satisfy the middle
winning condition, meaning B1 wins the game. Thus, Pr[¬Epreﬁx] ≤ Advp-cons
dlc,B1
Moving on to the last component of E2, if eventspass \ eventsMo (cid:54)= ∅, then there exists an event event such
that event ∈ eventspass but event /∈ eventsMo. The former property implies that the following conditions hold:
(λ).
B1
1. event ∈ QAu, so (c, snapLS, π(cid:48), π) ← QAu[event] is well deﬁned; and either
25
2. snapLS = ⊥ and CheckIncl(c, event, π(cid:48)) = 1, or
3. snapLS (cid:54)= ⊥ and
(a) CheckAppend(c, cLS, π) = 1;
(b) CheckSnap(snapLS) = 1; and
(c) CheckIncl(cLS, event, π(cid:48)) = 1.
Fix eventi as this event, deﬁne (ci, snapi, π(cid:48)
i, πi) ← QAu[eventi], and assume now that Epreﬁx holds; i.e.,
that there exists a preﬁx eventsAu of eventsMo such that CheckCom(cAu, eventsAu) = 1.
More formally, observe that Ei-preﬁx is implied by Vn
We would now like to argue that there also exists a preﬁx eventsi of eventsAu such that CheckCom(ci,
eventsi) = 1; call this event Ei-preﬁx. Intuitively, this holds because we have a “path” of append proofs from ci
to cn = cAu, so if no such preﬁx exists then we can use at least one of these proofs to violate the append-only
property of the DLC.
Wn
k=i Ek-preﬁx; i.e., ci is a commitment to a preﬁx
eventsi of eventsAu if ck is a commitment to a preﬁx eventsk for all k, i ≤ k ≤ n. Thus, ¬Ei-preﬁx implies
k=i ¬Ek-preﬁx. We proceed in a series of hybrids: for each hop k, we assume that E(cid:96)-preﬁx holds for all (cid:96),
k + 1 ≤ (cid:96) ≤ n, and we construct an adversary B2,k as follows (again, omitting the description of MsgAu and
MsgMo, in which B2,k behaves honestly):
B2,k(1λ)
r←− AMsgAu,MsgMo(1λ)
pk LS
(cj, snapj, π(cid:48)
if snapk+1 = ⊥ return ⊥