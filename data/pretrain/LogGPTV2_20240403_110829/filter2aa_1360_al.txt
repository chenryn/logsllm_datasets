codecs. This will often play videos that would not otherwise play using standard media players such as 
Windows Media Player and VLC. This will also play many surveillance videos without the need for 
third-party programs. I once used this technique to play a corrupt video file which captured a homicide, 
but standard video players could not understand the data.
• 
Convert a video to MP4: This option simply converts any target video to a standard MP4 format. This 
is beneficial when the target video possesses a unique codec that prohibits playing universally. If the 
above option can play the video, this option can convert it so that any computer should be able to play 
it natively. I often used this to send copies of videos to prosecutors forced to use Windows computers.
• 
Extract video frames: This is likely the most used utility within this set of applications. After supplying 
a target video, this tool will extract the still images from the video. The result is a folder of uncompressed 
bitmap (bmp) image files depicting practically every frame of the video. This is beneficial when close 
examination of frames is necessary. I include this every time a crucial video will be used during 
prosecution of a crime.
• 
Shorten a video (Low activity): This version of the script removes single frames of a video that appear 
extremely similar to the frame preceding it. In other words, it takes out all of the frames which are the 
same (no action) and only leaves desired activity. This is great for surveillance video which contains 
hours of one scene.
• 
Shorten a video (High activity): This version of the script is identical to the previous with one 
exception. It is a bit more forgiving for videos with high activity. This might be outdoor surveillance of 
people walking in the distance or a video with a time counter printed within the feed. If the previous 
option does not remove enough content, this version will be a bit more aggressive. Both of these work 
well with surveillance video recorded in real-time (no motion detection).
• 
Extract audio: This option extracts the raw audio file out of any video, converts it to a 320k MP3 file, 
and saves the file. I have used this to extract audio from video confessions and interviews, and it works 
well on any online videos downloaded from the internet.
• 
Rotate video: You may encounter a video which has been captured from a mobile device and is rotated 
90 degrees clockwise. This option allows us to rotate the video counterclockwise to a traditional view, 
and flips the video vertically to generate a traditional view of a cellular video. This is beneficial during 
courtroom presentation, especially when a jury is involved.
• 
Download a stream: This feature allows you to enter a video stream URL obtained from the Stream 
Detector browser plugin to download an offline copy of the video.
Extract video frames:
ffmpeg -y -i evidence.mpg -an -r 10 img%03d.bmp 
This command saves the still images from the video to a new
Convert a video to MP4:
ffmpeg -i evidence.mpg -vcodec mpeg4 -strict -2 evidence.mp4 
This command converts the video to a standard format and saves it alongside the original.
58 Chapter 4
copy evidence.mp4 
embedded stream.
Shorten a video (High activity):
ffmpeg -i evidence.mpg -strict -2 -vf
"select=gt (sceneX, 0.005) ,setpts=N/ (25*TB) " evidence.mp4
This command converts the video to a version displaying activity, saving it alongside the original.
Download stream:
ffmpeg -i http://somesite.org/867asfjhg87.m3u8
This command downloads the video file from within an
Shorten a video (Low activity):
ffmpeg -i evidence.mpg -strict -2 -vf 
"select=gt(sceneX,0.003), setpts=N/(25*TB) " evidence.mp4
This command converts the video to a version displaying activity, saving it alongside the original.
Extract audio:
ffmpeg -i evidence.mpg -vn -ac 2 -ar 44100 -ab 320k -f mp3 evidence.mp3 
This command converts the video to a standard audio mp3 and saves it alongside the original.
Rotate video:
ffmpeg -i evidence.mpg -vf transposed evidence.mp4
This command rotates the video 90 degrees counter-clockwise and saves it alongside the original.
#!/usr/bin/env bash
zenity —info —text="The next window will prompt you for a target media file. Click 
"Cancel" if entering a stream URL." —title="Video Utilities"
ffmpeg_file=$ (zenity —file-selection —title "Video Utilities")
timestamp=$ (date +%Y-%m-9dd: 
: %M)
optl="Play a video"
opt2="Convert a video to mp4"
opt3="Extract video frames"
opt4="Shorten a video (Low Activity) "
opt5="Shorten a video (High Activity)"
opt6="Extract audio"
opt7="Rotate video"
opt8="Download a video stream"
ffmpeg=$ (zenity —list —title "Video Utilities" —radiolist —column "" —column 
"" TRUE "$optl" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" FALSE "$opt5" FALSE "$opt6" 
FALSE "$opt7" FALSE "$opt8" —height=400 —width=300) 
case Sffmpeg in 
Soptl )
ffplay "$ffmpeg_file"
exit;;
$opt2 )
ffmpeg -i "$ffmpeg_file" -vcodec mpeg4 -strict -2 ~/Videos/$timestamp.mp4 I zenity 
—progress —pulsate —no-cancel —auto-close —title="f fmpeg" —text="Converting 
Video to mp4"
nautilus -/Videos/
exit;;
$opt3 )
mkdir *7Videos/$timestamp-frames
As you can see, these commands can be lengthy and technical. We want to create one single custom script which 
wall allow us to choose which service we want to execute. This is a bit different than the previous example, as it 
will combine several options into one dialogue and allow the user to select a video upon execution. The following 
pages display the script 1 use on my own VM. Afterward, I explain some of the new portions which are important 
to our usage. This exact script is titled ffmpeg.sh within your "vm-files" download.
Linux Applications
59
[Desktop Entry]
Type=Application
Name=Video Utilities
Categories=Application;OSINT
Exec=/home/osint/Documents/scripts/ffmpeg.sh
Icon=/home/osint/Documents/icons/ffmpeg.png
Terminal=true
The second (zenity) line prompts the user with a dialogue telling them to pick a file in the next window. The 
user then sees a file selection window which can be used to browse to the target video. The script then executes 
the commands as previously explained. It then defines that video within the script and obtains a timestamp for 
unique naming. The (opt) section identifies the options for the user, which match our previous manual entries. 
The script then displays the utility selection window to users which allows them to choose the appropriate action 
to take against the target video, such as play, convert, extract, etc.
If following along manually, you will find this script within the "vm-files" archive you previously downloaded. 
You should already have this script in the "scripts" folder in your "Documents" folder. This should be the same 
location where you saved the YouTube-DL script. Next, we need a shortcut to open this script, just as we did 
previously. The previous steps moved a file titled "ffmpeg.desktop" to your "/usr/share/applications" folder, 
and a shortcut should be visible in your Application menu. Below is the content of the ffmpeg.desktop file.
-an -r 10 ~/Videos/?timestamp-frames/img%03d.bmp I 
j —no-cancel —auto-close 
—title=”ffmpeg"
ffmpeg -y -i "$ffmpeg_file" - 
zenity —progress —pulsate 
text="Extracting Frames" 
nautilus -/Videos/ 
exit;;
?opt4 )
ffmpeg -i "?ffmpeg_file" -strict -2 -vf "select=gt (scene\,0.003), setpts=N/(25*TB) •• 
-/Videos/?timestamp-low.mp4 | zenity —progress —pulsate —no-cancel —auto-close 
—title="ffmpeg" —text="Shortening video (Low Activity)" 
nautilus -/Videos/ 
exit;;
?opt5 )
ffmpeg -i "?ffmpeg_file" -strict -2 -vf "select=gt(scene\,0.005),setpts=N/(25*TB)" 
-/Videos/?timestamp-high.mp4 | zenity —progress —pulsate —no-cancel —auto-close 
—title="ffmpeg" —text="Shortening video (High Activity)" 
nautilus -/Videos/ 
exit;;
$opt6 )
ffmpeg -i "?ffmpeg_file" -vn -ac 2 -ar 44100 -ab 320k -f mp3 -/Videos/$timestamp.mp3
I zenity —progress —pulsate —no-cancel —auto-close —title="ffmpeg" 
text="Extracting Audio" 
nautilus -/Videos/ 
exit;;
?opt7 )
ffmpeg -i "?ffmpeg_file" -vf transposed -/Videos/$timestamp.mp4 | zenity —progress 
—pulsate —no-cancel —auto-close —title="ffmpeg" —text="Rotating Video" 
nautilus -/Videos/ 
exit;;
$opt8 )
url=$(zenity —entry —title "Video Stream Download" —text "Enter URL Stream") 
ffmpeg -i "?url" -c copy -/Videos/?timestamp-STREAM.mp4 | zenity —progress — 
pulsate —no-cancel —auto-close —title="ffmpeg" —text="Saving Stream" 
nautilus -/Videos/ 
exit;;esac
example
L
Home
Desktop
- Size
Type
Documents
Downloads
o
MUSIC
Pictures
Videos
Text
Figure 4.04: The Video Utilities selection dialogue and menu of options.
Video Stream Tool
sudo -H pip install streamlink
60 Chapter 4
• 
Open the Applications menu again and scroll down to "Video Utilities".
• 
Right-click this program and select "Add to favorites".
We can now use the tool within Terminal. The following command plays the best quality version of a live stream 
from a Twitch user conducting a cooking lesson through VLC.
G 
O 
O
2020-10-10:10:02%.txt
' lxvAya9uwwtRomment..
lLWEXRAnQdNnfo.txt
Text
Video
Text
o
o
’ ' : same paths 
to our Dock in
Select items from the list below.
Choose Option
Playa video
Convert a video to mp4 
Extract video frames
Shorten a video (Low Activity)
Shorten a video (High Activity) 
Extract audio
Rotate video
Download a video stream
This should look very similar to the previous shortcut. Again, this file assumes you have applied the 
and usernames as my demonstration throughout this chapter. Next, let's add a shortcut icon to o 
order to have easy access to this new utility.
The previous examples explained the details of how these scripts and shortcuts function. The remaining utilities 
we need to add are quite similar and do not need the same attention to detail. I present a description of each 
utility; the content of each script and shortcut, the commands to include in your Ubuntu VM, and an c t 
of usage.
After you select the target video, you are presented with a menu of the options mentioned previously, as seen 
in Figure 4.04 (right). After choosing the action, the script processes the video and creates the new evidence. /Ml 
of this happens without opening Terminal or typing any commands.
The previous utility possesses an option to download a video stream. This can be useful if you know the exact 
location of the data. In Chapter Three, I presented a Firefox extension titled Stream Detector. On that page, 1 
explained how it detected a video stream URL for a primary video stream from CNN. If we copied and pasted 
that URL into the "Download Stream" option of the previous script, it would archive the video into MP4 format. 
This is great, but that feature is unforgiving. If you do not know the exact stream URL, you are out of luck. This 
is where Strcamlink can assist. This powerful software can identify, play, and archive many live or pre-recorded 
video streams by simply providing the URL of the website in which it can be viewed. First, let's install it into 
our Linux VM with the following command within Terminal.
. 2020-1009:1 &44Bob Ro... 40.4 kB 
B 2020-10-09:16:44Bob Ro... 92.0 MB 
2020-10-10:10lX)%(tltle)... 0 bytes
8 2020-10-10:10:01%(tiUe)... 890 bytes Text 
890 bytes Text 
879 bytes Text 
890 bytes Text
*1 PLAEQD0ULngi67rwmhf... 7.7 kB
You should now have a new icon in your Dock directly below the previous YouTube-DL option. You can drag- 
and-drop these in a different order if desired. The new icon launches a dialogue that first notifies you that "The 
next window will prompt you for a target media file. Click "Cancel" if entering a URL. After clicking OK, you 
are presented with a file manager window that prompts you to choose a target video file, as seen in Figure 4.04 
(left). This could be a downloaded YouTube video, an unplayable surveillance video, or any other downloaded 
video content retrieved from any source.
< Oosint Videos YouiubeOL
Name
streamlink https://www.twitch.tv/shroud best
• streamlink https://www.twitch.tv/shroud best -o shroud-stream
If we wanted to watch and archive the data in real-time, we can use the following command.
shroud-stream
• streamlink https://www.twitch.tv/shroud best
copy -/Videos/shroud-stream.mp4
ffmpeg -i shroud-stream
Linux Applications
61
Finally, when the live stream is over, I can convert the archived data into a standard video file within my Videos 
folder titled shroud-stream.mp4 with the following command.
our default director}’
Figure 4.05 (left) displays the menu with the options I explained. Figure 4.05 (right) displays a live stream which 
is being archived while viewing. After the stream is finished, or the user cancels by pressing "Ctrl" and "C", the 
Videos folder is presented in order to see the evidence file. This file can then be converted using the final menu 
option. I find this to be the cleanest method of viewing, recording, archiving, and converting live video streams. 
This utility will be automatically installed and configured using the steps in the next chapter. Let's take a look at 
the script, which should start to look familiar now.
#1/usr/bin/env bash 
optl="Display Live Stream" 
opt2="Record Live Stream" 
opt3="Play and Record Live Stream" 
opt4="Convert Stream to MP4" 
streammenu=$(zenity —list 
"" —column "" TRUE "$optl" 
height=400 —width=300) 
case Sstreammenu in 
Soptl ) 
url=$(zenity —entry —title "Display Live Stream" —text "Enter target URL") 
streamlink $url best 
exit;; 
$opt2 ) 
url=$(zenity —entry —title "Record Live Stream" —text "Enter target URL") 
cd -/Videos 
streamlink $url best -o streamdata | zenity —progress —pulsate —auto-close - 
-title="Record Live Stream" —text="Raw Video being saved to -/Videos/" 
nautilus -/Videos/ 
exit;; 
$opt3 ) 
url=$(zenity —entry —title "Play and Record Live Stream" —text "Enter target 
URL") 
cd -/Videos 
streamlink $url best -r streamdata I zenity —progress —pulsate —auto-close - 
-title="View/Record Live Stream" —text="Raw Video being saved to -/Videos/" 
nautilus -/Videos/
Instead of watching the stream, we can capture it to a file named "shroud-stream" within 
with the following command.
—title "Video Stream Tool" —radiolist —column 
' FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" —
I have created a script tided "streamlink.sh" within the "vm-files/scripts" folder of your download. If you placed 
this file into your "Documents/scripts" folder and moved the shortcut "streamlink.desktop from the "vm- 
files/shortcuts" folder to the "/usr/share/applications" folder as previously explained, you can now replicate all 
of these steps easily.
Select Items from the In t below.
Cancel
CK
Figure 4.06: A failure and success with online video stream capture.
expect this option to work every time. However, it is
62 Chapter 4
Video Stream Tool
vi.w/R.com
O Display Liw Stream