### Video Processing and Utility Scripts

#### 1. **Install Additional Codecs**
   - **Purpose**: This step installs additional codecs, which can play videos that standard media players like Windows Media Player and VLC might not be able to handle. It is particularly useful for playing surveillance videos and corrupt files.
   - **Example Use Case**: I once used this technique to play a corrupted video file capturing a homicide, which standard video players could not decode.

#### 2. **Convert Video to MP4 Format**
   - **Purpose**: Converts any video to the standard MP4 format. This is beneficial when the original video uses a unique codec that prevents it from being played universally.
   - **Usage**: If the video can be played with the installed codecs, this option will convert it so that it can be played natively on any computer.
   - **Example Use Case**: I often use this to send video copies to prosecutors who must use Windows computers.

#### 3. **Extract Video Frames**
   - **Purpose**: Extracts still images from a video, resulting in a folder of uncompressed bitmap (BMP) image files representing each frame.
   - **Usage**: This is useful for close examination of frames, especially in legal contexts.
   - **Example Use Case**: I include this in every crucial video used during the prosecution of a crime.

#### 4. **Shorten a Video (Low Activity)**
   - **Purpose**: Removes frames that are extremely similar to the preceding frame, effectively shortening the video by removing inactive periods.
   - **Usage**: Ideal for surveillance videos that contain long periods of inactivity.
   - **Example Use Case**: Useful for hours-long surveillance footage of a single scene.

#### 5. **Shorten a Video (High Activity)**
   - **Purpose**: Similar to the low-activity version but more forgiving for videos with high activity, such as outdoor surveillance or videos with a time counter.
   - **Usage**: More aggressive in removing content, suitable for real-time surveillance videos without motion detection.
   - **Example Use Case**: Works well for outdoor surveillance where people are walking in the distance or for videos with a time counter.

#### 6. **Extract Audio**
   - **Purpose**: Extracts the raw audio from a video and converts it to a 320k MP3 file.
   - **Usage**: Useful for extracting audio from video confessions, interviews, or online videos.
   - **Example Use Case**: I have used this to extract audio from video confessions and interviews.

#### 7. **Rotate Video**
   - **Purpose**: Rotates a video that has been captured from a mobile device and is rotated 90 degrees clockwise.
   - **Usage**: Rotates the video counterclockwise and flips it vertically to achieve a traditional view.
   - **Example Use Case**: Beneficial for courtroom presentations, especially when a jury is involved.

#### 8. **Download a Video Stream**
   - **Purpose**: Downloads an offline copy of a video stream using a URL obtained from a browser plugin like Stream Detector.
   - **Usage**: Allows you to download and save a video stream for later viewing or analysis.
   - **Example Use Case**: Downloading a live stream from a website for archiving purposes.

### Command Examples

#### Extract Video Frames
```bash
ffmpeg -y -i evidence.mpg -an -r 10 img%03d.bmp
```
- **Description**: Saves still images from the video to a new folder.

#### Convert a Video to MP4
```bash
ffmpeg -i evidence.mpg -vcodec mpeg4 -strict -2 evidence.mp4
```
- **Description**: Converts the video to a standard MP4 format.

#### Shorten a Video (High Activity)
```bash
ffmpeg -i evidence.mpg -strict -2 -vf "select=gt(scene,0.005),setpts=N/(25*TB)" evidence.mp4
```
- **Description**: Creates a version of the video displaying only active scenes.

#### Download a Video Stream
```bash
ffmpeg -i http://somesite.org/867asfjhg87.m3u8
```
- **Description**: Downloads the video file from a given URL.

#### Shorten a Video (Low Activity)
```bash
ffmpeg -i evidence.mpg -strict -2 -vf "select=gt(scene,0.003),setpts=N/(25*TB)" evidence.mp4
```
- **Description**: Creates a version of the video displaying only active scenes, less aggressively than the high-activity version.

#### Extract Audio
```bash
ffmpeg -i evidence.mpg -vn -ac 2 -ar 44100 -ab 320k -f mp3 evidence.mp3
```
- **Description**: Extracts and converts the audio to a 320k MP3 file.

#### Rotate Video
```bash
ffmpeg -i evidence.mpg -vf transpose=1 evidence.mp4
```
- **Description**: Rotates the video 90 degrees counterclockwise.

### Custom Script: `ffmpeg.sh`

This script combines multiple options into a single dialogue, allowing the user to select the desired action and target video.

```bash
#!/usr/bin/env bash

# Prompt the user for a target media file
zenity --info --text="The next window will prompt you for a target media file. Click 'Cancel' if entering a stream URL." --title="Video Utilities"
ffmpeg_file=$(zenity --file-selection --title "Video Utilities")
timestamp=$(date +%Y-%m-%d_%H:%M)

# Define options
opt1="Play a video"
opt2="Convert a video to MP4"
opt3="Extract video frames"
opt4="Shorten a video (Low Activity)"
opt5="Shorten a video (High Activity)"
opt6="Extract audio"
opt7="Rotate video"
opt8="Download a video stream"

# Display utility selection window
ffmpeg=$(zenity --list --title "Video Utilities" --radiolist --column "Select" --column "Option" TRUE "$opt1" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" FALSE "$opt5" FALSE "$opt6" FALSE "$opt7" FALSE "$opt8" --height=400 --width=300)

# Execute the selected option
case $ffmpeg in
    $opt1)
        ffplay "$ffmpeg_file"
        exit;;
    $opt2)
        ffmpeg -i "$ffmpeg_file" -vcodec mpeg4 -strict -2 ~/Videos/$timestamp.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Converting Video to MP4"
        nautilus ~/Videos/
        exit;;
    $opt3)
        mkdir -p ~/Videos/$timestamp-frames
        ffmpeg -y -i "$ffmpeg_file" -an -r 10 ~/Videos/$timestamp-frames/img%03d.bmp
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Extracting Frames"
        nautilus ~/Videos/
        exit;;
    $opt4)
        ffmpeg -i "$ffmpeg_file" -strict -2 -vf "select=gt(scene,0.003),setpts=N/(25*TB)" ~/Videos/$timestamp-low.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Shortening video (Low Activity)"
        nautilus ~/Videos/
        exit;;
    $opt5)
        ffmpeg -i "$ffmpeg_file" -strict -2 -vf "select=gt(scene,0.005),setpts=N/(25*TB)" ~/Videos/$timestamp-high.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Shortening video (High Activity)"
        nautilus ~/Videos/
        exit;;
    $opt6)
        ffmpeg -i "$ffmpeg_file" -vn -ac 2 -ar 44100 -ab 320k -f mp3 ~/Videos/$timestamp.mp3
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Extracting Audio"
        nautilus ~/Videos/
        exit;;
    $opt7)
        ffmpeg -i "$ffmpeg_file" -vf transpose=1 ~/Videos/$timestamp.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Rotating Video"
        nautilus ~/Videos/
        exit;;
    $opt8)
        url=$(zenity --entry --title "Video Stream Download" --text "Enter URL Stream")
        ffmpeg -i "$url" -c copy ~/Videos/$timestamp-STREAM.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Saving Stream"
        nautilus ~/Videos/
        exit;;
esac
```

### Desktop Entry: `ffmpeg.desktop`

Create a desktop entry to launch the `ffmpeg.sh` script.

```ini
[Desktop Entry]
Type=Application
Name=Video Utilities
Categories=Application;OSINT
Exec=/home/osint/Documents/scripts/ffmpeg.sh
Icon=/home/osint/Documents/icons/ffmpeg.png
Terminal=true
```

### Video Stream Tool: `streamlink.sh`

This script allows you to display, record, and archive live video streams.

```bash
#!/usr/bin/env bash

# Define options
opt1="Display Live Stream"
opt2="Record Live Stream"
opt3="Play and Record Live Stream"
opt4="Convert Stream to MP4"

# Display utility selection window
streammenu=$(zenity --list --title "Video Stream Tool" --radiolist --column "Select" --column "Option" TRUE "$opt1" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" --height=400 --width=300)

# Execute the selected option
case $streammenu in
    $opt1)
        url=$(zenity --entry --title "Display Live Stream" --text "Enter target URL")
        streamlink $url best
        exit;;
    $opt2)
        url=$(zenity --entry --title "Record Live Stream" --text "Enter target URL")
        cd ~/Videos
        streamlink $url best -o streamdata | zenity --progress --pulsate --auto-close --title="Record Live Stream" --text="Raw Video being saved to ~/Videos/"
        nautilus ~/Videos/
        exit;;
    $opt3)
        url=$(zenity --entry --title "Play and Record Live Stream" --text "Enter target URL")
        cd ~/Videos
        streamlink $url best -o streamdata | zenity --progress --pulsate --auto-close --title="View/Record Live Stream" --text="Raw Video being saved to ~/Videos/"
        nautilus ~/Videos/
        exit;;
    $opt4)
        ffmpeg -i streamdata -c copy ~/Videos/streamdata.mp4
        zenity --progress --pulsate --no-cancel --auto-close --title="ffmpeg" --text="Converting Stream to MP4"
        nautilus ~/Videos/
        exit;;
esac
```

### Desktop Entry: `streamlink.desktop`

Create a desktop entry to launch the `streamlink.sh` script.

```ini
[Desktop Entry]
Type=Application
Name=Video Stream Tool
Categories=Application;OSINT
Exec=/home/osint/Documents/scripts/streamlink.sh
Icon=/home/osint/Documents/icons/streamlink.png
Terminal=true
```

### Installation and Configuration

1. **Install Streamlink**:
   ```bash
   sudo -H pip install streamlink
   ```

2. **Add to Favorites**:
   - Open the Applications menu and scroll down to "Video Utilities".
   - Right-click the program and select "Add to favorites".

3. **Use the Tool**:
   - You can now use the tool within the Terminal. For example, to play the best quality version of a live stream from a Twitch user:
     ```bash
     streamlink https://www.twitch.tv/shroud best
     ```
   - To watch and archive the data in real-time:
     ```bash
     streamlink https://www.twitch.tv/shroud best -o shroud-stream
     ```
   - After the live stream is over, convert the archived data into a standard video file:
     ```bash
     ffmpeg -i shroud-stream -c copy ~/Videos/shroud-stream.mp4
     ```

### Conclusion

These scripts and utilities provide a comprehensive set of tools for video processing, including playback, conversion, extraction, and archiving. They are designed to be user-friendly and can be easily accessed via desktop shortcuts.