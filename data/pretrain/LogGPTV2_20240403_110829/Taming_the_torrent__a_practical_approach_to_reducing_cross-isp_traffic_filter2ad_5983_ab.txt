Internet scalability.
To validate our approach, we made freely available an imple-
mentation of CDN-based peer selection as an extension to the
popular Azureus BitTorrent client beginning in April 2007. As of
January, 2008, unique users of our extension number over 120, 000,
and are located in more than 100 countries (Fig. 1), with several
thousand online concurrently at any point during the course of
our study.
In addition to implementing our scalable biased peer
selection technique, the software performs network measurements
server, ratio) tuples represented as
µa = (cid:2)(rk, fk), (rl, fl), ..., (rm, fm)(cid:4)
Note that each peer’s ratio map contains only as many entries as
replica servers seen by that peer (in practice, the average number of
entries is 1.6 and the maximum is 31), and that the sum of the fi’s
in any given ratio map equals one. For brevity, we will use µa,i
to represent the ratio of time fi that peer a is redirected to replica
server ri.
In the context of our biased peer selection service, if two peers
have the same ratio map values, then the path between them should
cross a small number of networks (possibly zero). Similarly, if two
peers have completely different redirection behavior, it is likely
that the path between them crosses a relatively large number of
networks. More generally, we would like a metric that, given two
peers, produces a continuum of values describing the similarity
between the peers’ redirection behaviors. Based on our formulation
of ratio maps, each peer in a P2P network can be represented as
a vertex in a general graph connected by edges labeled with the
degree of overlap in their redirection frequency maps. Following
from the premise that CDN redirections are primarily driven by
latency, the structure of this graph can be used to locate nearby
peers based on the cosine similarity of their ratio maps. Cosine
similarity [27] is a mathematical measure of how similar two
vectors are, yielding values on a scale of [0, 1]. Treating a
redirection map as a vector and given two hosts a and b, this can be
formally deﬁned as:
(cid:2)
(cid:3)(cid:2)
i∈Ia
i∈Ia
cos_sim(a, b) =
(µa,i · µb,i)
a,i · (cid:2)
µ2
i∈Ib
µ2
b,i
Where Ia represents the set of replica servers to which peer a
has been redirected over the time window. Intuitively, the cosine
similarity metric is analogous to taking the dot product of two
vectors and normalizing the result. When the maps are identical,
their resulting cosine similarity value is 1; when they are orthogonal
(i.e., have no replica servers in common), the value is 0. Thus,
to determine whether two peers a and b are likely to be in the
same ISP, we can simply compute the cosine similarity of their
redirection maps. If the value is greater than a certain threshold
(currently 0.15 in our implementation), we recommend these peers
as candidates for reducing cross-ISP trafﬁc.
5. CDN-BASED ORACLES IN BITTORRENT
In this section, we describe key details of our CDN-based oracle
implementation for BitTorrent. After a brief overview, we discuss
how to support information from multiple CDNs and how our
implementation efﬁciently locates nearby peers with low overhead.
5.1 Overview
Our implementation, named Ono, is written in Java and designed
as a plugin (i.e., extension) for compatibility with the Azureus
BitTorrent client. We chose Azureus because it is one of the
most popular BitTorrent clients, provides cross-platform compat-
ibility and features a powerful API for dynamically adding new
functionality via plugins. Ono contains approximately 12,000
method lines of code, 3,500 of which are for the GUI and 3,000
for data collection and reporting (and thus not essential for Ono
functionality). It is publicly available with source code at http:
//azureus.sourceforge.net/plugin_list.php or it
can be downloaded and installed from inside the Azureus client.
The Ono plugin uses a built-in Java-based DNS client [35] to
perform periodic DNS lookups on popular CDN names, which it
uses to maintain ratio maps. To determine the cosine similarity
value for a peer, Ono must be able to compare its ratio maps with
those of other peers. The latter information can be obtained in
a number of ways: through direct exchange between peers, from
distributed storage and from trackers. Ono currently supports the
ﬁrst two options. With direct exchange, when two peers running
the Ono plugin perform their connection handshake, the peers
swap ratio maps directly. For the distributed storage solution,
we implemented an efﬁcient DHT-based approach for storing and
retrieving ratio maps.1 The Azureus built-in DHT, however, was
not sufﬁciently reliable to support the functionality efﬁciently, so
the DHT option is disabled by default.
Though Ono enjoys a large user base, it is still a small fraction
of the total BitTorrent population. Thus Ono also attempts to
perform DNS lookups on behalf of other peers that it encounters,
to determine their ratio maps. This enables Ono to perform biased
peer selection over a much larger set of peers, including those not
running the Azureus client. From both direct exchange of ratio
maps and DNS lookups, our Ono clients locate over 180, 000 peers
per day using our CDN-based approach.
When Ono determines that a peer has similar redirection behav-
ior, it attempts to bias trafﬁc toward that peer by ensuring there is
always a connection to it, which minimizes the time that the peer
is choked. Due to limitations of the Azureus plugin API, we are
currently unable to bias other aspects of peer connections, e.g., the
bandwidth allocated to each connection.
Should Ono become universally adopted, we must ensure that
our service does not signiﬁcantly alter the appealing robustness
that comes from the diversity of peers resulting from BitTorrent’s
random selection. To that end, Ono will bias trafﬁc to only a
fraction of the total connections established for a particular torrent.
5.2 Using CDN Names
To perform biased peer selection, Ono must maintain a ratio map
for each CDN name being used for DNS lookups. As we previously
showed, using different CDNs and even different names for the
same CDN can lead to different results in terms of redirection
behavior [33]. To study the impact of this property on Ono’s
recommendations, we collected ratio maps for six names spanning
two large CDNs (Akamai and Limelight) as described in Table 2.
In case CDN behavior changes for these names in ways that are not
useful for peer selection, Ono checks a list of CDN names that we
can update at any time.
Ono performs DNS lookups for each CDN name to determine
redirection behavior and encodes this information as ratio maps.
Because CDNs tend to cluster their servers into groups assigned to
the same class-C subnet, we build ratio maps using replica-server
clusters consisting of /24 addresses instead of full IP addresses.
After performing a DNS lookup for a CDN name, we adjust the
corresponding ratio map to reﬂect the redirection frequencies. We
begin by aging the existing ratios in the map using exponential
decay. The decay rate is set so that a replica server not seen during
the past 24 hours will be removed from the ratio map. Finally, we
increase the value of the ratio for the replica server cluster returned
by the DNS lookup such that the sum of all ratios is 1.
1The approach exploits the key-value structure of ratio maps to
store information in a DHT using a small number of operations
that depends on number of entries in a ratio map (typically less than
10). Locating each nearby peer requires at most two DHT lookup
operations. A detailed explanation of the approach is beyond the
scope of this paper.
CDN
Abbr. DNS name
AA
CN
LM
FN
AB
PW
e100.g.akamaiedge.net Akamai
a1921.g.akamai.net
Akamai
Akamai
a245.g.akamai.net
Akamai
a20.g.akamai.net
Limelight ABC Streaming Video (US television network)
wdig.vo.llnwd.net
a1756.g.akamai.net
Akamai
Description
Air Asia (Southeast Paciﬁc)
CNN.com (US news site)
LeMonde.com (French news site)
Fox News (US news site)
Popular Web Site
Table 2: CDN names used in this study.
As we previously demonstrated [33], redirection behavior changes
over time scales that vary according to the user’s network location.
Thus, to enable adaptation to this behavior with minimum addi-
tional load on CDN name servers, we adopt the following approach.
When a client has no redirection information, it performs a DNS
lookup to each CDN name at most once every thirty seconds, for
two minutes, to establish a basis ratio map. After this bootstrapping
phase, the interval between DNS lookups increases by one minute
if the redirection information for the current CDN name does not
differ from the previous lookup. If the redirection behavior changes
between intervals, the redirection interval is halved (to a minimum
value of 30 seconds). At the end of a BitTorrent session, Ono
caches the ratio maps on persistent storage. This allows Ono
to avoid the bootstrapping phase if the cached ratio maps are
sufﬁciently fresh (i.e., less than 24 hours old by default).
CDN mapping information is not particularly useful for neighbor
selection if the latency along the path between a peer and its
associated replica server is large. To determine the set of useful
CDN names dynamically, Ono performs ICMP pings to the replica
servers returned by the DNS lookup. The smaller the RTT value,
the higher priority the associated name is given with respect
to biasing peer selection. Further,
if the RTT to one replica
server is signiﬁcantly higher (> 50% larger) than the average,
we exclude that mapping from our ratio maps. Note that ICMP
pings are not required for our approach to work — if no RTT
information is available, all names are used with equal weight in
peer selection. As we show in Section 6, the majority of the names
that Ono currently uses offer equally high performance, so ﬁltering
is typically not required.
5.3 Efﬁciency
Ono’s overhead is extremely small: determining each peer’s
proximity requires network operations that scale independently of
the number of peers in the network. In particular, maintaining ratio
maps requires periodic DNS lookups, the cost of which depends
on the lookup frequency, the name being used and the number of
responses. Generally, the name translation request is less than 50
bytes and the response is less than 100 bytes. Using the minimum
lookup interval of 30 seconds to calculate the maximum bandwidth
consumed by a Ono peer, the overhead is 18 KB upstream and
36 KB downstream per day. For comparison, the average peak
download rates from our clients is 80 KB per second and average
peak upload rates are 40 KB/s. Thus, even when using multiple
CDN names and performing DNS lookups to obtain ratio map
information for peers not running Ono, the overhead is sufﬁciently
small as to be insigniﬁcant. Ono also consumes some bandwidth
when peers exchange ratio maps, but this requires at most hundreds
of bytes per peer and in practice is performed much less frequently
than DNS lookups.
Likewise, the computational overhead for comparing ratio maps
is negligible. Since the number of replica server clusters main-
tained in each ratio map is generally less than 10, computing the
cosine similarity between two maps requires at most hundreds
of ﬂoating-point operations. Considering that the result of the
computation is valid until either ratio map signiﬁcantly changes,
the operation is performed infrequently, e.g., on the order of tens of
minutes or more.
Finally, we note that the time required to locate nearby peers is
extremely small compared to the time to completion for the vast
majority of torrents. In particular, when both peers establishing a
connection use Ono, the exchange of ratio maps and the determina-
tion of cosine similarity is essentially immediate. In the case where
one peer is not running our service, Ono is limited only by the time
required to perform DNS lookups on that peer’s behalf to determine
its ratio maps.
6. EMPIRICAL RESULTS
In this section, we evaluate the effectiveness of CDN-based
oracles for biased peer selection in BitTorrent. One of our primary
goals is to demonstrate that our approach indeed locates peers
along paths that signiﬁcantly reduce cross-ISP trafﬁc compared to
default BitTorrent behavior. To that end, we analyze extensive data
regarding paths between BitTorrent peers in the wide area. We also
show that our approach is practical in the sense that it does not
sacriﬁce transfer performance as seen by BitTorrent clients. In fact,
we demonstrate that with appropriate ISPs’ bandwidth allocation
policies, transfer performance using Ono can yield nearly one order
of magnitude improvement in median download rates.
6.1 Dataset
We ﬁrst discuss our methods for collecting data in this study.
While observing downloads, our software samples transfer rates
for each connection once every 5 seconds. For every connec-
tion, it continuously measures the round-trip-time latency between
endpoints using the average of three ICMP pings. By default, at
most 10 ping measurements are issued concurrently, though users
can change the limit for performance reasons. The endpoints are
selected in the same order as the corresponding peers’ connections,
essentially forming a random total order.
We also perform traceroute measurements to peers. Given the
comparatively longer duration of traceroute invocations, we per-
form fewer traceroute measurements than pings. A measurement is
performed for each endpoint at most twice: once upon connection
establishment and once upon termination only if the duration of
the connection is longer than ﬁve minutes. There is at most one
traceroute issued at a time.
Traceroutes provide router-level views of paths between hosts.
However, an ISP may contain many routers, so we wish to
analyze the traceroute measurements using metrics that more
closely correspond to ISP hops. Because the Internet is divided
into separate administration domains in the form of autonomous
systems (ASes), we expect that AS-level path information will
provide better insight regarding cross-ISP links. Although there
is no one-to-one relationship between ASes and ISPs, the number
of AS-hops along a path gives us an upper-bound estimate on the
number of cross-ISP hops. We generate AS-level path information
from our traceroute data using the AS mappings provided by the
Team Cymru group [34].
Our software performs periodic DNS lookups on CDN names
using a built-in Java-based DNS client. The results of the lookups
are recorded individually and cumulatively, every 30 minutes, in
the form of ratio maps.
Each data item is labeled with a timestamp corresponding to the
GMT time of the user’s local clock. When our software is loaded
by a peer, it reports the GMT time of the peer’s local clock and the
server records that value along with the server’s current local time.
This allows us to synchronize all of our users’ clocks to within a
small number of seconds.
In our analysis, we compare statistics from peers located by
Ono (referred to as Ono-recommended peers) to those from all
peers selected at random by the BitTorrent protocol, which also
includes those located by Ono. To facilitate this process, our
plugin reports whether a measured peer was recommended by
Ono. However, because users can terminate data reporting at
any time by force-closing their client, it is not sufﬁcient to rely
on this information alone. Instead, we use ratio-map information
collected over the course of a six-hour interval to determine which
peers were recommended by Ono, then examine statistics inside
this interval accordingly. We chose this interval because ratio
maps are relatively stable at this time scale but tend to change
signiﬁcantly over larger ones. Thus, each point in the following
ﬁgures represents the average of the statistics recorded from one
Ono peer during a six-hour interval.
The following statistics were generated from data collected be-
tween December 1, 2007 and December 16, 2007. This dataset con-
tains approximately 960,000,000 download samples, 19,000,000
traceroute measurements and well over 350,000,000 ping measure-
ments.
6.2 Reducing Cross-ISP Trafﬁc
We now take up the central question of whether our CDN-based
oracle can signiﬁcantly reduce cross-ISP trafﬁc. We answer this
question by comparing path characteristics for Ono-recommended
peers to those found through the random selection algorithm
employed by BitTorrent. As described in the previous section, we
performed traceroute measurements to all peers identiﬁed by Ono
and to a random portion of the remaining peers found by BitTorrent.
We start by presenting cumulative results when using the CDN
name for LeMonde.com, the online version of a popular French
newspaper. We will provide a comparison among all CDN names
at the end of the section.
Figure 2 presents a cumulative distribution function (CDF) of the
number of IP hops taken along paths between Ono clients and their
peers. Each value on a curve represents the average number of
hops for all peers, either Ono-recommended or picked at random
by BitTorrent, seen by a particular Ono client during a six-hour
It is immediately clear that peers found by Ono are
interval.
along shorter paths in terms of IP hops; e.g., the median number
of IP hops to Ono-recommended peers is 6 whereas the median
number of IP hops to peers selected by BitTorrent is nearly 14 —
more than twice as large. Further, over 20% of Ono-recommended
peers are only one hop away from our Ono clients; less than 2%
of those picked at random are the same. Finally, we note that
the quantization evident in the Ono curve is not from a dearth of
data points – in fact, there were over 5,100 such points. Rather,
because each Ono client sees a relatively small number of Ono-
recommended peers during an observation interval and because
]
t
c
p
<