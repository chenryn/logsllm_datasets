通过谷歌的 Kubernetes 或 Flocker 等项目，编排跨越包含微服务的多个容器的应用已经成为 Docker 世界的一个主要部分。铺面是另一个用于促进 Docker 容器编排的选项。Docker 在这一领域的新产品是一套三个编排服务，旨在涵盖分布式应用从应用开发到部署和维护的动态生命周期的所有方面。Helios 是另一个 Docker 编排平台，用于部署和管理整个车队的容器。最初，`fig`是容器编排最首选的工具。然而，在最近的过去，处于提升 Docker 技术前沿的公司推出了一个先进的容器编排工具(`docker-compose`)，让使用 Docker 容器的开发人员在容器生命周期中更轻松地工作。
Docker 公司已经意识到为下一代、业务关键型和容器化工作负载提供容器编排能力的重要性，因此购买了最初构想并具体化`fig`工具的公司。然后，Docker 公司将该工具适当地重新命名为`docker-compose`，并引入了大量的增强功能，以使该工具更好地适应容器开发人员和操作团队的不同期望。
以下是`docker-compose`的要点，它被定位为一个未来主义和灵活的工具，用于使用 Docker 定义和运行复杂的应用。借助`docker-compose`，您可以在一个文件中定义应用的组件(它们的容器、配置、链接、卷等)，然后，您可以用一个命令启动一切，这个命令会尽一切努力让它启动并运行。
该工具通过提供一组内置工具来完成此时手动执行的许多任务，从而简化了容器管理。在本节中，我们提供了使用`docker-compose`来执行容器编排的所有细节，以便拥有下一代分布式应用流。
### 使用 docker-compose 编排容器
在本节中，我们将讨论广泛使用的容器编排工具`docker-compose`。`docker-compose`工具是一种非常简单的电动工具，已经被构思和具体化，以方便一组 Docker 容器的运行。换句话说，`docker-compose`是一个编排框架，允许您定义和控制多容器服务。它使您能够创建一个快速和独立的开发环境，并在生产中编排多个 Docker 容器。`docker-compose`工具在内部利用 Docker 引擎来提取映像、构建映像、以正确的顺序启动容器，并根据`docker-compose.yml`文件中给出的定义在容器/服务之间建立正确的连接/链接。
### 正在安装 docker 合成
写这本书的时候`docker-compose`的最新版本是 1.11.2，建议你和 Docker 1 . 9 . 1 或以上版本一起使用。您可以在 GitHub 位置([https://github.com/docker/compose/releases/latest](https://github.com/docker/compose/releases/latest))找到最新官方发布的`docker-compose`。
我们已经将`docker-compose`的安装过程自动化，并在[http://sjeeva.github.io/getcompose](http://sjeeva.github.io/getcompose)提供给公众使用。这些自动化脚本准确识别最新版本的`docker-compose`，下载并安装在`/usr/local/bin/docker-compose`:
*   像这样使用`wget`工具:
```
      $ wget -qO- http://sjeeva.github.io/getcompose \
 | sudo sh
```
*   像这样使用`curl`工具:
```
      $ curl -sSL http://sjeeva.github.io/getcompose \
 | sudo sh
```
或者，您可以选择直接从 GitHub 软件仓库安装特定版本的`docker-compose`。在这里可以找到下载安装`docker-compose`版本`1.11.2`的方式方法:
像这样使用`wget`工具:
```
sudo sh -c 'wget -qO- \
 https://github.com/docker/compose/releases/tag/1.11.2/ \
 docker-compose-`uname -s`-`uname -m` > \
 /usr/local/bin/docker-compose; \
 chmod +x /usr/local/bin/docker-compose'
```
像这样使用`curl`工具:
```
curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
```
`docker-compose`工具也有 Python 包，可以使用`pip`安装程序安装，如下图所示:
```
$ sudo pip install -U docker-compose  
```
`pip`
`pip`
`docker-compose`
成功安装`docker-compose`后，现在可以查看`docker-compose`版本:
```
$ docker-compose --version
docker-compose version 1.11.2, build dfed245
```
### docker 构成档案
`docker-compose`工具使用 **YAML** 编排容器，这是**又一种标记语言**称为`docker-compose`文件。YAML 是一种人性化的数据序列化格式。Docker 作为容器支持工具开始了它的旅程，它作为一个生态系统正在突飞猛进地发展，以自动化和加速大多数任务，如容器供应、网络、存储、管理、编排、安全、治理和持久性。因此，`docker-compose`文件格式及其版本被多次修改以跟上 Docker 平台。在写这个版本的时候，`docker-compose`文件的最新版本是版本 3。下表列出了`docker-compose`文件和 Docker 引擎版本兼容性矩阵:
| **Docker 构成文件格式** | **Docker 引擎** | **备注** |
| 3, 3.1 | 1.13.0+ | 为`docker stack deploy`和`docker secrets`提供支持 |
| Two point one | 1.12.0+ | 引入了一些新参数 |
| Two | 1.10.0+ | 引入对命名卷和网络的支持 |
| one | 1.9.0+ | 将在未来的撰写版本中被否决 |
默认情况下，`docker-compose`工具使用名为`docker-compose.yml`或`docker-compose.yaml`的文件来编排容器。可以使用`docker-compose`工具的`-f`选项修改该默认文件。以下是`docker-compose`文件的格式:
```
version: "" 
services: 
  : 
    :  
    : 
       -  
       -  
networks: 
  : 
    :  
volumes: 
  : 
    :  
```
这里使用的选项如下:
*   ``:这是`docker-compose`文件的版本。参考前面的版本表。
*   ``:这是服务的名称。一个`docker-compose`文件中可以有多个服务定义。服务名后面应该跟一个或多个键。但是，所有服务必须有一个`image`或一个`build`键，后跟任意数量的可选键。除了`image`和`build`键外，其余键可以直接映射到`docker run`子命令中的选项。该值可以是单个值，也可以是多个值。所有``定义必须归入顶层`services`键。
*   ``:这是服务使用的网络名称。所有``定义必须归入顶级`networks`键。
*   ``:这是服务使用的卷的名称。所有``定义必须归入顶级`volume`键。
这里，我们列出了`docker-compose`文件版本 3 中支持的几个键。`docker-compose`支持的所有按键参见[https://docs.docker.com/compose/compose-file](https://docs.docker.com/compose/compose-file)。
*   `image`:这是标签或者映像 ID。
*   `build`:这是一个包含`Dockerfile`的目录的路径。
*   `command`:该键覆盖默认命令。
*   `deploy`:这个键有很多子项，用来指定部署配置。这仅在`docker swarm`模式下使用。
*   `depends_on`:用于指定服务之间的依赖关系。可以根据自身条件进一步扩展到连锁服务。
*   `cap_add`:这给容器增加了一个能力。
*   `cap_drop`:这降低了容器的能力。
*   `dns`:这设置自定义 DNS 服务器。
*   `dns_search`:这将设置自定义的 DNS 搜索服务器。
*   `entrypoint`:该键覆盖默认入口点。
*   `env_file`:这个键可以让你通过文件添加环境变量。
*   `environment`:这将添加环境变量，并使用数组或字典。
*   `expose`:此键暴露端口，不发布给主机。
*   `extends`:这扩展了在相同或不同配置文件中定义的另一个服务。
*   `extra_hosts`:这使您能够向容器内的`/etc/hosts`添加额外的主机。
*   `healthcheck`:这允许我们配置服务健康检查。
*   `labels`:这个键可以让你添加元数据到你的容器中。
*   `links`:这个键链接到另一个服务中的容器。强烈建议不要使用链接。
*   `logging`:用于配置服务的日志记录。
*   `network`:用于将服务加入到顶层`networks`键定义的网络中。
*   `pid`:这使得主机和容器之间能够共享 PID 空间。
*   `ports`:该键暴露端口并指定两个`HOST_port:CONTAINER_port`端口。
*   `volumes`:该键挂载路径或命名卷。命名卷需要在顶层`volumes`键中定义。
### Docker-合成命令
`docker-compose`工具通过一些命令提供了复杂的编排功能。在本节中，我们将列出`docker-compose`选项和命令:
```
docker-compose []  [...]  
```
`docker-compose`工具支持以下选项:
*   `-f`、`--file `:这为`docker-compose`指定了一个替代文件(默认为`docker-compose.yml`文件)
*   `-p`、`--project-name `:指定一个备选项目名称(默认为目录名)
*   `--verbose`:这显示了更多的输出
*   `-v`、`--version`:这会打印版本并退出
*   `-H`、`--host `:这是指定要连接的守护进程套接字
*   `-tls`、`--tlscacert`、`--tlskey`和`--skip-hostname-check`:`docker-compose`工具还支持**传输层安全性** ( **TLS** )的这些标志
`docker-compose`工具支持以下命令:
*   `build`:此命令构建或重建服务。
*   `bundle`:这是用来从撰写文件中创建 Docker 包的，这仍然是 Docker 1.13 上的一个实验特性。
*   `config`:这是一个验证和显示合成文件的命令。
*   `create`:这将创建在合成文件中定义的服务。
*   `down`:此命令用于停止和移除容器和网络。
*   `events`:可以用来查看实时的容器生命周期事件。
*   `exec`:这使您能够在运行的容器中运行命令。它主要用于调试目的。
*   `kill`:这个命令杀死正在运行的容器。
*   `logs`:显示容器的输出。
*   `pause`:此命令用于暂停服务。
*   `port`:打印端口绑定的公共端口。
*   `ps`:这里列出了容器。
*   `pull`:该命令从存储库中提取映像。
*   `push`:该命令将映像推送到存储库。
*   `restart`:这是用来重新启动编写文件中定义的服务。
*   `rm`:这将移除停止的容器。
*   `run`:这运行一次性命令。
*   `scale`:这为服务设置了容器的数量。
*   `start`:该命令启动合成文件中定义的服务。
*   `stop`:这将停止服务。
*   `unpause`:此命令用于解包服务。
*   `up`:这将创建并启动容器。
*   `version`:这打印的是 Docker Compose 的版本。
### 一般用法
在本节中，我们将借助一个示例来体验 Docker Compose 框架提供的编排功能的强大功能。为此，我们将构建一个两层的 web 应用，它将通过一个 URL 接收您的输入，并用相关的响应文本进行响应。该应用是使用以下两种服务构建的，如下所述:
*   **Redis** :这是一个键值数据库，用来存储一个键及其关联的值
*   **Node.js** :这是一个 JavaScript 运行时环境，用于实现 web 服务器功能以及应用逻辑
这些服务中的每一项都封装在两个不同的容器中，使用`docker-compose`工具将它们缝合在一起。以下是服务的体系结构表示: