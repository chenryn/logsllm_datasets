100.62
383.26
105.39
419.34
130.42
538.10
160.90
736.75
180.74
892.43
990.14
204.55
1112.32 218.39
1384.39 250.23
θ1
3.81
3.98
4.13
4.58
4.94
4.84
5.09
5.53
tl2
5.83
6.91
8.44
10.03
11.08
11.98
12.33
11.31
θ2
65.74
60.69
63.74
73.45
80.54
82.64
90.21
122.40
Table 1: The Local Processing Time in Cartesian Image Re-
construction. The measured data (ts, tl1 & tl2) are in seconds.
iteration on the DO’s side instead of the cubic time complexity of
running SAKE, which implies large amount of efficiency gains.
8 EXPERIMENTAL EVALUATION
In this section, we demonstrate the conducted extensive experi-
ments to assess the performance of our proposed protocols. The
computation tasks for the DO is implemented by Matlab 2014b
and the procedures are executed on a laptop with 2.7 GHz CPU,
8GB RAM memory and a 256GB solid drive. Our primary focus is
on evaluating the efficiency gain on the DO’s side. We test two
of the real-world image benchmarks (undersampled knee and ab-
domens scans), which are acquired from the clinical scanners [16].
We compare our protocol with original SAKE based on the the
library offered by [15]. To provide a more thorough study, we im-
plement both the Cartesian and non-Cartesian sampling schemes,
along with different choices on the imaging data size and slid-
ing window size. Throughout the experiments, we take the fixed
threshold of window-normalized number as 1.4 for the knee data,
i.e. ˆr = ⌊1.4 × w
2⌋ and 1.6 for the abdomens data. The k-space
data is all 3× undersampled by eight coils in parallel. Since the
computation process occupies most of the time cost, we ignore the
communication cost between the DO and CS as suggested in [28].
8.1 Cartesian Sampling
In the Cartesian Sampling, our primary focus is on the time cost
of outsourcing algorithm on the DO’s side. Some representative
results are given in Table 1. The benchmark is the DO’s time cost
for the iterations in SAKE, which is denoted as ts. Meanwhile,
we evaluate the time spent for the local processing (encryption,
decryption and verification) plus the time for performing other
local operations, which is denoted as tl1 and tl2 for SecSAKE I and
SecSAKE II, respectively. Various size of imaging data in k-space
domain (s × t) with 8 slices and size of square window (w × w)
are tested. Two pairs of comparisons between tl1, tl2 and ts have
been made by exploring the ratios θ1 = ts /tl1 and θ2 = ts /tl2. For
instance, the local computation for reconstructing the MRI image
with the k-space size (320×320)×8 and sliding window size 6×6 in
total costs the DO around 218.39 seconds to encrypt, decrypt the
data matrix and perform the other operations, e.g. structural and
data consistency projection, etc. Note that the size of constructed
data matrix in each iteration is correspondingly as large as 288 ×
97969. The DO enjoys a high efficiency gain when outsourcing the
task of SVD to the CS. As shown in Figure 5, the efficiency gain can
Figure 5: The ratio of time cost on the DO’s side between
SAKE and SecSAKE I in the case of Cartesian Sampling.
2
, p
2
q}) = O (pq
2
t}) = O (pq
the computation time in image reconstruction with the time com-
plexity as O (min{pq
)[11]. Another computation-
ally intensive task in SAKE is the matrix multiplication during
data consistency projection (non-Cartesian sampling). If the matrix
N = I − DD† has been pre-computed as we assume, the computa-
tion complexity during this process is dominated by Nˆxn as O (s
t ).
Hence, the total time complexity to perform one loop of SAKE
by the DO can be represented by O (max{pq
2
). To
show that our protocols can achieve the efficiency gains, we mainly
analyze the time complexity on the DO’s side in SecSAKE I (since
the the DO’s overhead in SecSAKE II is conceptually much less).
The main computational overhead of the DO is related to the
procedures of encryption, decryption (Algorithm 1, 2) and verifi-
cation (Algorithm 3, 4) for outsourcing the two computation tasks
above. In Algorithm 1 Line 3, the DO multiplies the data matrix
by two diagonal matrices and then permutes its rows and columns.
These operations take O (pq) time. The Line 5 corresponds to the
reverse operations, which also take O (pq) time. As discussed in
Section 4.2, the computation in Line 7 will only cost O (ˆrpq) time,
where ˆr can be seen as a small constant compared with p.
Regarding the Algorithm 3, the equality test on Line 2 essentially
involves 4 matrix-vector multiplications and is repeated by l times.
The required time for each verification is of the complexity of
O (lpq). Thus, in Cartesian sampling case, the total time cost on the
DO’s side is O (max{ˆr , l}pq).
As for non-Cartesian sampling scheme, the dominant compu-
tation occurs in Algorithm 2 Line 3 and Line 5. In Line 3, the DO
needs to conduct one multiplication between matrix and vector
and then several multiplications between vectors. Besides, Line 5
requires the DO to conduct one multiplication between matrix
and vector and one multiplication between vectors. Note that all
of the terms in Line 3 can be precomputed. Hence, the total run-
time for Algorithm 2 should be O (max{s
, st}). Additionally, the
batch test in Algorithm 4 takes O (τst ) time due to the τ vector-
matrix multiplications in Line 4. The total time cost in this case is
O (max{τst, s
According to Theorem 4.1, the l and τ are both parameters con-
trolling the efficiency-security tradeoff. A small value of τ or l can
already guarantee negligible chance of missing the misbehaviors of
the CS. This fact can imply that l ≪ min{p, q} and τ ≪ min{s, t}.
Thus, SecSAKE I can achieve a quadratic time complexity in each
2}).
2
2
2
, s
2
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea546Figure 6: The ratio of time cost on the DO’s side between
SAKE and SecSAKE II in the case of Cartesian Sampling.
Figure 8: The ratio of time cost on the DO’s side between
SAKE and SecSAKE I (Blue Lines), & between SAKE and Sec-
SAKE II (Red Lines) in the case of Non-Cartesian Sampling.
Figure 7: A 320 × 320 sagittal image on of knee (lateral side).
Unreconstructed image (Left); Reconstructed image after 15
iterations (Middle) and 30 iterations (Right) of SecSAKE I.
be better achieved when the size of imaging data or sliding window
goes larger. Moreover, most of the computations in SecSAKE II
on the DO’s side in within one loop of SecSAKE I. The speedup
depends on the extra time on randomly splitting the k-space data
and the stopping criteria (e.g. the fixed iteration times herein). As
shown in Figure 6, SecSAKE II can realize a speedup of more than
100× compared with the original SAKE. The image reconstructed
from the experiment is shown in Figure 7 (after the inverse Fourier
Transform from k-space domain).
8.2 Non-Cartesian Sampling
We also conduct the experiment on dataset characterized as non-
Cartesian sampling. The DO is expected to execute an extra matrix
multiplication for data consistency projection in SAKE. One pri-
mary issue that we care about is whether the protocol offers the
comparative speedup with the case of Cartesian Sampling. We also
consider the practical case that the data consistency projection is
conducted twice to achieve a better reconstruction result in spiral
non-Cartesian sampling. Considering the size of sliding window
does not directly affect the speed of data consistency projection,
we fix the size of sliding window as 6. In the experiment, we com-
pare the local processing time t′
l1 with the time cost for performing
SAKE only when altering the size of imaging data in k-space, and
calculate the ratio θ3 = t′
l1 to represent the speed-up. As shown
in Figure 8, SecSAKE II can unsurprisingly achieve higher speedup
on the DO’s side because the DO doesn’t have to participate in the
data consistency projection. In contrast, the speedup of SecSAKE I
falls down, which may be mainly due to the lower efficiency gain
in Section 4.3 compared with Section 4.1.
s /t′
8.3 Effectiveness
Our experiment also shows the effectiveness of the protocols, i.e.
the DO can reconstruct clear diagnostic images by running Sec-
SAKE. We select SecSAKE I and pick up the sagittal image on the
lateral side of the knee as the example to illustrate. As can be seen
in Figure 7, the scanned object is visually unrecognizable in the un-
reconstructed image on the left. Some of the aliasing artifacts have
been eliminated during the iteration and the anterior cruciate liga-
ment comes into view in the middle image (marked by red circle).
However, it still remains difficult to observe the articular cartilage
in the gray area around the bone (marked by the yellow circle) until
more iterations are done. As presented in the last image, the details
of the key area are clear enough for further clinical diagnosis.
9 RELATED WORK
In the literature, many secure computation outsourcing schemes
have been proposed. Some of the schemes apply cryptographic
primitives to achieve homomorphic computations over encrypted
data. Gennaro et al. [9] for the first time achieve secure outsourc-
ing of any arbitrary functions by incorporating the technique of
fully homomorphic encryption and (modified) Yao’s garbled circuit.
Chung et al. [6] propose another general scheme based on fully
homomorphic encryption, which achieves lower local computation
cost but with more interaction rounds. Due to the expensive oper-
ations for both data owner and cloud server, all of these schemes
appertain to fully homomorphic encryption have hitherto been
criticized as impractical so far.
Targeting at specific engineering computations, meanwhile, an-
other group of secure outsourcing schemes has emerged in the
security community. Atallah et al. [1] for the first time investigate
the random transformation techniques tailored to several specific
scientific or engineering computation tasks. Despite the wide scope
of discussion over multiple applications, the protocol would lead to
privacy leakage. Afterwards, many studies have been focusing on
designing schemes on privacy-preserving outsourcing fundamen-
tal mathematical functions, such as matrix multiplications [12, 31],
matrix inversion [13], matrix factorization [7, 32], linear equations
[5, 23, 24, 28], etc. However, these schemes are mainly on the com-
putation over real field, which is not applicable to the MRI settings.
Regarding the secure outsourcing of the large-scale mathematical
optimization problem, an initial work was done by Wang et al. [27].
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea547In their work, a practically efficient solution of secure outsourcing
linear programming is designed while allowing result verification
on different conditions. Later on, Nie et al. [20] apply sparse ma-
trices to hide the sensitive data in linear programming for faster
local preprocessing. Chen et al. [3] leverage the pseudorandom
generator to reduce the key size when outsourcing a reformulated
form of linear programming. Liao et al. [14] propose a solution for
secure outsourcing convex separable programming. Salinas et al.
[25] provide a secure outsourcing scheme of the quadratic program
by solving its Lagrange dual problem. A work with similar objective
is [29], which offers a linear-programming based image recovery
service. All of these works only address the convex constrained
optimization problems, which distinguishes them from our work.
10 CONCLUSIONS
In this paper, we for the first time explore the problem of privacy-
preserving outsourcing the image reconstruction process in SAKE,
which is one of the state-of-art algorithms in clinical implementa-
tion. Addressing its most expensive computation task, we propose
SecSAKE, which includes two protocols with extra emphasis on
security and efficiency, respectively. Our first protocol can achieve
computational indistinguishable under CPA for both the imaging
data and sampling operator. In each round, the computation over-
head of the clinic can be reduced to quadratic complexity. Our
second protocol further reduces the computation time on the clinic
side by utilizing multi-server architecture of the cloud. The privacy
of imaging data can also be well protected if none of the cloud
servers colludes with the other. A theoretical analysis is then illus-
trated to prove that both of the protocols are secure and efficient.
We also conduct extensive experiments to demonstrate the practical
efficiency and effectiveness of SecSAKE.
ACKNOWLEDGMENTS
The authors would also like to thank the anonymous reviewers for
their valuable comments and helpful suggestions. This work was
supported in part by the National Science Foundation under grant
NSF CNS-1262277.
REFERENCES
[1] Mikhail J Atallah, Konstantinos N Pantazopoulos, John R Rice, and Eugene E
Spafford. 2002. Secure outsourcing of scientific computations. Advances in
Computers 54 (2002), 215–272.
[2] James A Cadzow. 1988. Signal enhancement-a composite property mapping
algorithm. IEEE Transactions on Acoustics, Speech, and Signal Processing 36, 1
(1988), 49–62.
[3] Fei Chen, Tao Xiang, and Yuanyuan Yang. 2014. Privacy-preserving and verifiable
protocols for scientific computation outsourcing to the cloud. J. Parallel and
Distrib. Comput. 74, 3 (2014), 2141–2151.
[4] Ruichuan Chen, Istemi Ekin Akkus, and Paul Francis. 2013. SplitX: High-
performance private analytics. ACM SIGCOMM Computer Communication Review
43, 4 (2013), 315–326.
[5] Xiaofeng Chen, Xinyi Huang, Jin Li, Jianfeng Ma, Wenjing Lou, and Duncan S
Wong. 2015. New algorithms for secure outsourcing of large-scale systems of
linear equations. IEEE transactions on information forensics and security 10, 1
(2015), 69–78.
[6] Kai-Min Chung, Yael Tauman Kalai, and Salil P Vadhan. 2010. Improved Del-
egation of Computation Using Fully Homomorphic Encryption.. In CRYPTO,
Vol. 6223. Springer, 483–501.
[7] Jia Duan, Jiantao Zhou, and Yuanman Li. 2016. Secure and Verifiable Outsourc-
ing of Nonnegative Matrix Factorization (NMF). In Proceedings of the 4th ACM
Workshop on Information Hiding and Multimedia Security. ACM, 63–68.
[8] Rusins Freivalds. 1977. Probabilistic Machines Can Use Less Running Time.. In
IFIP congress, Vol. 839. 842.
[9] Rosario Gennaro, Craig Gentry, and Bryan Parno. 2010. Non-interactive verifi-
able computing: Outsourcing computation to untrusted workers. Advances in
Cryptology–CRYPTO 2010 (2010), 465–482.
[10] Jonathan Gillard. 2010. Cadzow’s basic algorithm, alternating projections and
singular spectrum analysis. Statistics and its interface 3, 3 (2010), 335–343.
[11] Michael Holmes, Alexander Gray, and Charles Isbell. 2007. Fast SVD for large-
scale matrices. In Workshop on Efficient Machine Learning at NIPS, Vol. 58. 249–