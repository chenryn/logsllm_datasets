of making the take-down of loosely centralized botnets
harder. However, one could imagine “hybrid” botnets
that use DGA-generated domains to identify a set of peer
IPs to bootstrap into a P2P-based C&C infrastructure.
Alternatively, the DGA-generated C&C domains may be
ﬂux domains, namely domain names that point to a IP
ﬂuxing network.
It is worth noting that such sophisti-
cated “hybrid” botnets may be quite complex to develop,
difﬁcult to deploy, and hard to manage successfully.
Another potential limitation is due to the fact that
Pleiades is not able to distinguish between different bot-
nets whose bot-malware use the same DGA algorithm.
In this case, while the two botnets may be controlled by
different entities, Pleiades will attribute the compromised
hosts within the monitored network to a single DGA-
based botnet.
One limitation of our evaluation method is the ex-
act enumeration of the number of infected hosts in the
ISP network. Due to the location of our trafﬁc moni-
toring sensors (below the recursive DNS server), we can
only obtain a lower bound estimate on the number of in-
fected hosts. This is because we have visibility of the IP
addresses within the ISP that generate the DNS trafﬁc,
but lack additional information about the true number of
hosts “behind” each IP. For example, an IP address that
generates DNS trafﬁc may very well be a NAT, ﬁrewall,
DNS server or other type of complex device that behaves
as a proxy (or relay point) for other devices. Also, ac-
cording to the ISP, the DHCP churn rate is relatively low,
and it is therefore unlikely that we counted the same in-
ternal host multiple times.
In the case of Zeus.v3, the DGA is used as a backup
C&C discovery mechanism, in the event that the P2P
component fails to establish a communication channel
with the C&C. The notion of having a DGA compo-
nent as a redundant C&C discovery strategy could be
used in the future by other malware. A large number
of new DGAs may potentially have a negative impact on
the supervised modules of Pleiades, and especially on the
HMM-based C&C detection. In fact, a misclassiﬁcation
by the DGA Classiﬁer due to the large number of classes
among which we need to distinguish may misguide the
selection of the right HMM to be used for C&C detec-
tion, thus causing an increase in false positives. In our
future work we plan to estimate the impact of such mis-
classiﬁcations on the C&C detection accuracy, and inves-
tigate whether using auxiliary IP-based information (e.g.,
IP reputation) can signiﬁcantly improve the accuracy in
this scenario.
As the internals of our system become public, some
botnets may attempt to evade both the DGA discovery
and C&C detection process. As we have already dis-
cussed, it is in the malware authors’ best interest to create
a high number of DGA-related NXDomains in order to
make botnet take-over efforts harder. However, the mal-
ware could at the same time generate NXDomains not re-
lated with the C&C discovery mechanism in an effort to
mislead our current implementation of Pleiades. These
noisy NXDomains may be generated in two ways: (1)
randomly, for example by employing a different DGA,
or (2) by using one DGA with two different seeds, one
of which is selected to generate noise. In case of (1), the
probability that they will be clustered together is small.
This means that these NXDomains will likely not be part
of the ﬁnal cluster correlation process and they will not
be reported as new DGA-clusters. On the other hand,
case (2) might cause problems during learning, espe-
cially to the HMM, because the noisy and “true” NXDo-
mains may be intermixed in the same cluster, thus mak-
ing it harder to learn an accurate model for the domain
names.
9 Conclusion
In this paper, we presented a novel detection system,
called Pleiades, that is able to accurately detect machines
within a monitored network that are compromised with
DGA-based bots. Pleiades monitors trafﬁc below the lo-
cal recursive DNS server and analyzes streams of un-
successful DNS resolutions, instead of relying on man-
ual reverse engineering of bot malware and their DGA
algorithms. Using a multi-month evaluation phase, we
showed that Pleiades can achieve very high detection ac-
curacy. Moreover, over the ﬁfteen months of the oper-
ational deployment in a major ISP, Pleiades was able to
identify six DGAs that belong to known malware fami-
lies and six new DGAs never reported before.
References
[1] K. Aas and L. Eikvil. Text categorisation: A sur-
vey., 1999.
[2] abuse.ch.
ZeuS Gets More Sophisticated Us-
ing P2P Techniques. http://www.abuse.ch/
?p=3499, 2011.
[3] M. Antonakakis, R. Perdisci, D. Dagon, W. Lee,
and N. Feamster. Building a dynamic reputation
system for DNS.
In the Proceedings of 19th
USENIX Security Symposium (USENIX Security
’10), 2010.
[4] M. Antonakakis,
R.
Perdisci, W.
Lee,
N. Vasiloglou, and D. Dagon. Detecting mal-
ware domains in the upper DNS hierarchy. In the
Proceedings of 20th USENIX Security Symposium
(USENIX Security ’11), 2011.
[5] BankPatch.
Trojan.Bankpatch.C.
http:
[13] G. Gu, R. Perdisci, J. Zhang, and W. Lee. Bot-
Miner: clustering analysis of network trafﬁc for
protocol- and structure-independent botnet detec-
tion. In USENIX Security, 2008.
[14] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting
botnet command and control channels in network
trafﬁc. In Network and Distributed System Security
Symposium (NDSS), 2008.
[15] J. Hermans. MozillaWiki TLD List. https://
wiki.mozilla.org/TLD_List, 2006.
[16] S. Krishnan and F. Monrose. Dns prefetching and
its privacy implications: when good things go bad.
In Proceedings of the 3rd USENIX conference on
Large-scale exploits and emergent threats: botnets,
spyware, worms, and more, LEET’10, pages 10–
10, Berkeley, CA, USA, 2010. USENIX Associa-
tion.
//www.symantec.com/security_
response/writeup.jsp?docid=
2008-081817-1808-99&tabid=2, 2009.
[17] L. I. Kuncheva. Combining Pattern Classiﬁers:
Methods and Algorithms. Wiley-Interscience,
2004.
[6] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi.
EXPOSURE: Finding malicious domains using
passive dns analysis.
In Proceedings of NDSS,
2011.
[7] R. Feldman and J. Sanger. The text mining hand-
book: advanced approaches in analyzing unstruc-
tured data. Cambridge Univ Pr, 2007.
[8] R. Finones. Virus:Win32/Expiro.Z. http://
www.microsoft.com/security/portal/
Threat/Encyclopedia/Entry.aspx?
Name=Virus%3AWin32%2FExpiro.Z, 2011.
[9] Y. Freund and L. Mason. The alternating deci-
In Proceedings of
sion tree learning algorithm.
the Sixteenth International Conference on Machine
Learning, ICML ’99, 1999.
[10] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and
W. Lee. BotHunter: Detecting malware infection
through IDS-driven dialog correlation.
In Proc.
USENIX Security, 2007.
[11] M. Geide. Another trojan bamital pattern. http:
//research.zscaler.com/2011/05/
another-trojan-bamital-pattern.
html, 2011.
[12] S. Golovanov and I. Soumenkov.
top
http://www.securelist.com/en/
bot.
analysis/204792180/TDL4_Top_Bot,
2011.
TDL4
[18] M. H. Ligh, S. Adair, B. Hartstein, and M. Richard.
Malware Analyst’s Cookbook and DVD, chapter 12.
Wiley, 2010.
[19] P. Mockapetris.
Domain names - concepts
and facilities. http://www.ietf.org/rfc/
rfc1034.txt, 1987.
[20] P. Mockapetris. Domain names - implementation
and speciﬁcation. http://www.ietf.org/
rfc/rfc1035.txt, 1987.
[21] M. Newman. Networks: an introduction. Oxford
University Press, 2010.
[22] A. Y. Ng, M. I. Jordan, and Y. Weiss. On spectral
clustering: Analysis and an algorithm. In Advances
In Neural Information Processing Systems, pages
849–856. MIT Press, 2001.
[23] P. Porras, H. Saidi, and V. Yegneswaran. An anal-
ysis of conﬁcker’s logic and rendezvous points.
http://mtc.sri.com/Conficker/, 2009.
[24] D. Pelleg and A. W. Moore. X-means: Extending
k-means with efﬁcient estimation of the number of
clusters. In Proceedings of the Seventeenth Inter-
national Conference on Machine Learning, ICML
’00, pages 727–734, San Francisco, CA, USA,
2000. Morgan Kaufmann Publishers Inc.
[25] C. POLSKA.
mapping out
ZeuS
and understanding the
P2P+DGA variant
threat.
http://www.cert.pl/news/4711/
langswitch_lang/en, 2012.
[26] P. Porras.
Inside risks: Reﬂections on conﬁcker.
Communications of the ACM, 52:23–24, October
2009.
[27] P. Porras, H. Saidi, and V. Yegneswaran. Conﬁcker
C analysis. Technical report, SRI International,
Menlo Park, CA, April 2009.
[28] L. R. Rabiner. Readings in speech recognition.
chapter A tutorial on hidden Markov models and
selected applications in speech recognition. 1990.
[29] P. Royal.
Analysis of
the kraken botnet.
http://www.damballa.com/downloads/
r_pubs/KrakenWhitepaper.pdf, 2008.
[30] S. Shevchenko. Srizbi domain generator calculator.
http://blog.threatexpert.com/2008/
11/srizbis-domain-calculator.html,
2008.
[31] S.
Shevchenko.
Domain
name
gen-
http://blog.
for murofet.
erator
threatexpert.com/2010/10/
domain-name-generator-for-murofet.
html, 2010.
[32] SOPHOS.
Mal/Simda-C.
//www.sophos.com/en-us/
threat-center/threat-analyses/
viruses-and-spyware/Mal˜Simda-C/
detailed-analysis.aspx, 2012.
http:
[33] J. Stewart.
Bobax trojan analysis.
http:
//www.secureworks.com/research/
threats/bobax/, 2004.
[34] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert,
M. Szydlowski, R. Kemmerer, C. Kruegel, and
G. Vigna. Your botnet is my botnet: analysis of
a botnet takeover. In Proceedings of the 16th ACM
Conference on Computer and Communications Se-
curity, CCS ’09, pages 635–647, New York, NY,
USA, 2009. ACM.
[35] S. Stover, D. Dittrich, J. Hernandez, and S. Diet-
rich. Analysis of the storm and nugache trojans:
P2P is here. In USENIX ;login:, vol. 32, no. 6, De-
cember 2007.
[36] T.-F. Yen and M. K. Reiter. Are your hosts trading
or plotting? Telling P2P ﬁle-sharing and bots apart.
In ICDCS, 2010.
[37] R. Villamarin-Salomon and J. Brustoloni.
Identi-
fying botnets using anomaly detection techniques
applied to dns trafﬁc. In 5th Consumer Communi-
cations and Networking Conference, 2008.
[38] Wikipedia. The storm botnet.
http://en.
wikipedia.org/wiki/Storm_botnet,
2010.
[39] J. Williams. What we know (and learned) from the
waledac takedown. http://tinyurl.com/
7apnn9b, 2010.
[40] J. Wolf.
details
domain
Technical
generation
of
srizbi’s
algorithm.
http://blog.ﬁreeye.com/research/2008/11/technical-
details-of-srizbis-domain-generation-
algorithm.html, 2008.
2010.
Retreived: April, 10
[41] J. Wong.
Trojan:Java/Boonana.
http:
//www.microsoft.com/security/
portal/Threat/Encyclopedia/Entry.
aspx?Name=Trojan%3AJava%2FBoonana,
2011.
[42] S. Yadav, A. K. K. Reddy, A. N. Reddy, and S. Ran-
jan. Detecting algorithmically generated malicious
domain names. In Proceedings of the 10th annual
Conference on Internet Measurement, IMC ’10,
pages 48–61, New York, NY, USA, 2010. ACM.
[43] S. Yadav and A. N. Reddy. Winning with dns
failures: Strategies for faster botnet detection.
In
7th International ICST Conference on Security and
Privacy in Communication Networks, 2011.
[44] T.-F. Yen and M. K. Reiter. Trafﬁc aggregation for
malware detection. In Proc. International confer-
ence on Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA), 2008.
[45] B. Zdrnja.
Google Chrome
and (weird)
DNS requests.
http://isc.sans.edu/
diary/Google+Chrome+and+weird+DNS+
requests/10312, 2011.
[46] J. Zhang, R. Perdisci, W. Lee, U. Sarfraz, and
X. Luo. Detecting stealthy P2P botnets using sta-
tistical trafﬁc ﬁngerprints.
In Annual IEEE/IFIP
International Conference on Dependable Systems
and Networks - Dependable Computing and Com-
munication Symposium, 2011.