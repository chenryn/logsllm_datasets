011cfc7c 762d167e wbemcore!CRepository::ExecQuery+0xb5 
011cfcd8 762ddadc wbemcore!CRepository::GetRefClasses+0x8d 
表 31-5  CSession 类的主要方法 
方法或属性 
描述 
ExecQuery 
执行查询，通常是调用 CNamespaceHandle 的 ExecQuery。 
BeginWriteTransaction
和
BeginReadTransaction 
启动读/写事务。 
RenameObject 
重命名对象。 
PutObject 
保存对象。 
CommitTransaction 
提交事务。 
AddObject 和 DeleteObject 
加入和删除对象。 
GetObjectByPath 
根据路径取对象。 
GetObjectW 
取对象。 
Enumerate 
枚举。 
CWbemNamespace 类
类
类
类 
WBEMCORE.DLL 中的 CWbemNamespace 类是对 CIM 命名空间的逻辑抽象。它封装
了命名空间的各种行为和针对空间内类或对象的操作，包括访问和管理命名空间中的对
象、执行各种查询操作、事件通知、和安全控制等。CWbemNamespace 是外部访问 WMI
类和对象的主要途径。CWbemNamespace 类包含了 100 多个方法，可以说是 WMI 对象管
理器中处于核心地位一个类。表 31-6 列出了 CWbemNamespace 类的部分方法和简要说明。 
表 31-6  CWbemNamespace 类的主要方法 
方法或属性 
描述 
UniversalConnect 
连接命名空间。 
ExecNotificationQuery 
执行查询，通常是调用 CNamespaceHandle 的 ExecQuery。 
InitializeSD 
初始化安全描述符。 
PutInstance 和 PutInstanceAsync 
创建或更新实例，以 Async 结尾的是异步调用。 
PutClass 和 PutClassAsync 
创建或更新类，以 Async 结尾的是异步调用。 
GetObjectByFullPath 
根据路径取得对象。 
DeleteObject 、 DeleteClass
和
DeleteInstance 
删除对象、类和实例。 
CreateNamespace 
创建命名空间。 
EnsureSecurity、PutAceList 
安全检查，加入 ACE（Access Control Entry 访问控制表
项）。 
GetObjectW 
读取对象。 
ExecQuery、ExecSyncQuery 和 
ExecQueryAsync 
执行查询，Sync 代表同步，Async 代表异步。 
CCoreServices 类
类
类
类 
从客户服务器（Client/Server）模型的角度来看，WMI 应用程序（WMI 消耗器）利用
WMI 管理受管对象，因此 WMI 应用程序是客户，WMI 命名空间中的类和对象为其提供
《软件调试》补编 
- 86 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
了管理服务，是服务（Service）。广义来说，WMI 服务是指 WMI 的基础构件和 WMI 提
供器所构成的整体。狭义来说，WMI 服务是实现了 IWbemServices 接口的 COM 组件。
MSDN 文档公开了 IWbemServices 接口的定义。所有 WMI 提供器和其它服务提供者都应
该实现这一接口。CCoreServices 类是位于 WBEMCORE.DLL 中的一个 WMI 内部类，它
的主要职责就是管理实现了 IWbemServices 接口的各种 WMI 服务，包括初始化系统内的
子系统和内部服务、创建服务实例和管理事件等。表 31-7 列出了 CCoreServices 类的主要
方法和属性。 
表 31-7  CCoreServices 类的主要方法和属性 
方法或属性 
描述 
IsProviderSubsystemEnabled 
通过查询注册表键"SOFTWARE\Microsoft\WBEM\CIMOM"
中的"Enable Provider Subsystem"键值，判断提供器子系统是否
启用。 
GetServices2 
取得 WMI 服务组件的实例，第二个参数是使用路径表示的服
务，如\\.\root\directory\LDAP，第三个参数是用户名，参见下
文。 
DeliverIntrinsicEvent 和
DeliverExtrinsicEvent 
投递内部和外部事件。 
m_pEssOld 和 m_pEssNew 
指向事件子系统（Event Subsystem）的指针。 
g_pSvc 
指向本类全局实例的指针。 
StartEventDelivery 和
StopEventDelivery 
启动和停止事件投递。 
SetCounter、
IncrementCounter 和
DecrementCounter 
设置、递增和递减用于记录服务实例个数的计数器。 
GetObjFactory 
取得对象工厂。 
RegisterWriteHook 和
UnregisterWriteHook 
注册和注销写挂钩。 
InitRefresherMgr 
初始化刷新器（refresher）管理器，记录在 m_pFetchRefrMgr
成员中。 
CreatePathParser 
创建路径解析器。 
GetProviderSubsystem 
取提供器子系统指针，记录在 m_pProvSS 成员变量中。 
CreateFinalizer 
创建终结器（Finalizer）。 
m_pProvSS 
提供器之系统指针。 
CreateQueryParser 
创建查询解析器。 
GetRepositoryDriver 
取 CIM 仓库驱动，已经不用，返回错误。 
GetSystemClass 和
GetSystemObjects 
取系统类和对象，支持 WMI 基础架构的类被称为 WMI 系统
类，相应的，其实例被称为系统对象。 
清单 31-4 显示了当 WMI 应用程序中连接一个命名空间时，WMI 服务器进程内部的
执行过程：CWbemLevel1Login::LoginUser 调用 CCoreServices::GetServices2，然后再调用
CWbemNamespace 类的连接函数，最后创建命名空间的实例。 
清单 31-4  WMI 应用程序连接命名空间的内部过程 
0:081> k 
ChildEBP RetAddr   
0353f3a0 762ea4a9 wbemcore!CWbemNamespace::CreateInstance+0x56 
0353f3b4 762ea548 wbemcore!CWbemNamespace::UniversalConnect+0x47 
0353f400 762da5ee wbemcore!CWbemNamespace::PathBasedConnect+0x3c 
0353f434 762fbcd7 wbemcore!CCoreServices::GetServices2+0x2b 
0353f4a8 762fc0ad wbemcore!CWbemLevel1Login::LoginUser+0x1cf 
0353f548 762fc12f wbemcore!CWbemLevel1Login::ConnectorLogin+0x2fc 
0353f56c 77e79dc9 wbemcore!CWbemLevel1Login::NTLMLogin+0x21 
[以下是 RPC 工作函数，省略] 
《软件调试》补编 
- 87 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
31.3.4  WMI 服务进程 
WMI服务是以进程外服务的形式提供的，WMI应用程序通过WMI API调用位于 WMI
服务进程中的 WMI 服务。因为 WMI 服务都是以 COM/DCOM 形式封装好的，所以调用
WMI 服务的过程是典型的调用 EXE 中的 COM/DCOM 服务器的过程。 
WMI 服务进程是 WMI 服务组件的宿主（host）进程，在 Windows 9x 系统中，WMI
服务进程是以单独的可执行文件（Winmgmt.exe）形式运行的。在 Windows NT 和 2000 系
统中，WMI 服务进程是以 Windows 系统服务的形式自动启动和运行的，服务的可执行文
件也是 Winmgmt.exe。在 Windows XP 系统中，WMI 服务进程也是以系统服务的形式运行
的，不过服务的可执行文件是 SVCHOST.EXE。 
SVCHOST.EXE 
SVCHOST.EXE 是 Windows 系统中的多个服务的共享宿主进程。在典型的 Windows 
XP 系统中，通常有三个或更多的 SVCHOST 进程的实例在运行，承载着多个不同的系统
服务，典型的有 WMI 服务，RPC 服务等。通常每个 SVCHOST 进程实例负责一组服务，
以下注册表表键下定义了各个组的名称和每组所包含的服务： 
HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\Svchost 
图 31-9 显示了在笔者使用的 Windows XP SP2 系统上，使用 SVCHOST 作为宿主进程
的各组服务。图中右侧的每个键值定义一个组，所以共有 8 个组。键值名称即组名，键值
数据包含改组内的服务的服务名（Service Name）。每个服务在如下表键下都有个子键，定
义了该服务的详细信息。 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\ 
图 31-9  使用 SVCHOST 作为宿主进程的系统服务 
每个 SVCHOST 进程负责一组服务，所以如果以上 8 组服务全部启动，那么在任务管
理器中就会看到 8 个 SVCHOST 进程，但因为很多服务都是按需要自动启动的，所有有些
服务可能并不是每次都启动。使用 tasklist /SVC 命令可以列出系统中的所有进程中所包含
的系统服务。从中可以看到 SVCHOST 进程的每个实例，和这个实例中所承载的各个服务
（清单 31-5）。 
清单 31-5  使用 tasklist /SVC 命令观察进程中所包含的系统服务 
C:\>tasklist /SVC 
Image Name                   PID Services                                      
========================= ====== ============================================= 
System Idle Process            0 N/A                                           
System                         4 N/A                                           
smss.exe                     876 N/A                                           
《软件调试》补编 
- 88 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
csrss.exe                   1340 N/A                                           
winlogon.exe                1368 N/A                                           
services.exe                1412 Eventlog, PlugPlay                            
lsass.exe                   1424 Netlogon, PolicyAgent, ProtectedStorage,      
                                 SamSs                                         
ibmpmsvc.exe                1584 IBMPMSVC                                      
ati2evxx.exe                1612 Ati HotKey Poller                             
svchost.exe                 1624 DcomLaunch, TermService                       
svchost.exe                 1700 RpcSs                                         
svchost.exe                 1896 AudioSrv, CryptSvc, Dhcp, ERSvc,              
                                 EventSystem, helpsvc, Irmon, lanmanserver,    
                                 lanmanworkstation, Netman, Nla, RasMan,       
                                 Schedule, seclogon, SENS, ShellHWDetection,   
                                 srservice, TapiSrv, Themes, TrkWks, W32Time,  
                                 winmgmt
winmgmt
winmgmt
winmgmt, WZCSVC                               
S24EvMon.exe                1932 S24EventMonitor                               
svchost.exe                  272 Dnscache                                      
svchost.exe                  524 LmHosts, RemoteRegistry, SSDPSRV, WebClient   
spoolsv.exe                  836 Spooler                     
[后面的省略] 
列表的第一列是进程的映像文件名称，第二列是进程 ID，第三类是该进程所包含的
系统服务，N/A（Not Applicable）该进程内没有系统服务。使用 tlist 工具（参见第 22 章）
也可以看到类似的信息。 
使用 SVCHOST 作为宿主进程的系统服务需要将自己的真正服务模块实现在 DLL 中，
并通过注册表中该服务的 Parameters 表键将 DLL 文件名称（ServiceDll）和入口函数
（ServiceMain）告诉给 SVCHOST 进程。比如 WMI 服务的注册表设置如图 31-10 所示。 
图 31-10  WMI 服务的注册表设置 
要说明的是，WMI 服务的服务名是 winmgmt，并非 WMI。注册表中却是存在名为
WMI 的服务，但它是 WMI 的驱动程序扩展（Driver Extensions），用于支持内核态的驱动
程 序 实 现 WMI 有 关 的 功 能 。 从 图 31-10 可 以 看 到 ， WMI 服 务 的 服 务 模 块 是
%SystemRoot%\system32\wbem\WMIsvc.dll，即 WMISvc.DLL，服务的主函数（入口函数）
是 ServiceMain，使用 Depends 工具观察 WMISvc.DLL 文件，可以看到 ServiceMain 函数
是 WMISvc.DLL 的一个导出函数。因此可想而知，当启动 WMI 服务时，SVCHOST 进程
会根据 ServiceDll 指定的路径加载 WMISvc.DLL，然后动态取得并执行 ServiceMain 键值
指定的服务入口函数。ServiceMain 函数内部会初始化 WMI 数据仓库和 CIM 对象管理器
等基础构件，然后启动一系列工作线程开始提供服务。 
31.3.5  WMI 服务的请求和处理过程 
WMI 应用程序利用 DCOM 技术来使用 WMI 服务进程内的 WMI 服务。DCOM 是分
布式组件模型的简称，是对 COM 技术的扩展，目的是使不同计算机上的 COM 对象可以
相互通信。DCOM 协议又被称为对象 RPC（Object Remote Procedure Call），是基于标准
RPC 协议而制定的。ORPC 规约（specification）定义了如何跨计算机创建、表示、使用和
维护 COM 对象以及如何调用对象的方法。COM/DCOM 运行库封装了使用 RPC 通信的细
《软件调试》补编 
- 89 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
节，使程序员可以像使用本地 COM 组件一样来使用 DCOM 组件。 
为了降低设计 WMI 应用程序的难度，Windows 提供了一系列本地化的组件来进一步
简化调用 WMI 服务的过程，这些组件的实现在 WBEMPROX.DLL 中。 
发起请求
发起请求