title:Fault Detection and Isolation Techniques for Quasi Delay-Insensitive
Circuits
author:Christopher LaFrieda and
Rajit Manohar
Fault Detection and Isolation Techniques for Quasi Delay-Insensitive Circuits
Christopher LaFrieda and Rajit Manohar
Computer Systems Laboratory
Cornell University
Ithaca NY 14853, U.S.A.
Abstract
This paper presents a novel circuit
fault detection
and isolation technique for quasi delay-insensitive asyn-
chronous circuits. We achieve fault isolation by a com-
bination of physical layout and circuit techniques. The
asynchronous nature of quasi delay-insensitive circuits
combined with layout techniques makes the design toler-
ant to delay faults. Circuit techniques are used to make
sections of the design robust to non-delay faults. The com-
bination of these is an asynchronous defect-tolerant circuit
where a large class of faults are tolerated, and the remain-
ing faults can be both detected easily and isolated to a
small region of the design.
1. Introduction
Quasi delay-insensitive (QDI) circuits are asynchronous
circuits that operate correctly regardless of gate delays in
the system. These circuits do not use any clocks, and the
function of the clock is replaced by handshaking signals
on wires. Instead of using time to implement sequencing
(via the clock), QDI circuits use the notion of causality and
event-ordering.
QDI systems exhibit many advantages over clocked de-
sign. QDI circuits can be used to design complex, highly
concurrent systems that are low-power and exhibit average-
case behavior [11]. The very nature of QDI circuits—
namely, that they are insensitive to gate delays—makes
them well-suited for fault-tolerant design, because most de-
lay faults do not cause the circuit to malfunction. However,
while there is an enormous body of literature that exam-
ines different types of faults for clocked circuits, little atten-
tion has been paid to the problem of faults in asynchronous
VLSI systems. This paper provides an in-depth examina-
tion of faults in the context of QDI circuits, and proposes
several methods for fault detection and isolation.
The absence of a global clock means that a faulty asyn-
chronous circuit might exhibit problems that would not nor-
mally arise in a clocked system. In some sense, faults in
control signals in asynchronous logic would be analogous
to faults in data as well as clock lines in a clocked sys-
tem. Faulty asynchronous circuits can behave quite differ-
ently than faulty synchronous circuits. Asynchronous cir-
cuits consist of many state-holding nodes (dynamic nodes
with keepers) and handshaking signals. A fault in an asyn-
chronous system can cause computations to occur out-of-
sequence; this could violate an event-ordering constraint re-
quired for correctness, leading to a circuit failure. A fault
might prevent some computation from occurring by pre-
venting a signal transition and causing deadlock.
Fault detection in QDI circuits requires new techniques
than those used in synchronous architectures. To illustrate
this, consider the concept of introducing redundancy in the
system by using error detecting/correcting codes. These
codes contain data bits and check bits which are periodically
compared using hardware known as checkers. If the data is
consistent with the check bits then it is assumed that no er-
ror exists. If the check bits are inconsistent with the data,
then an error is detected and possibly corrected [5]. Un-
fortunately, this approach might not work well with asyn-
chronous circuits as many faults can cause deadlock, pre-
venting some data/check bits from appearing on the out-
put. In a clocked system where we assume the clock always
works, one can always sample the output of the circuit at the
clock edge and use those values. In contrast to this, asyn-
chronous signaling protocols embed data validity in the sig-
nal values themselves, leading to invalid state faults or sim-
ply deadlock. (Note that a similar problem could arise in a
clocked system when part of the clock network has a fault.)
In this paper we present a set of techniques for both de-
tecting and isolating faults in asynchronous QDI circuits.
We begin with an overview of both our gate model, QDI cir-
cuits, and fault model (Section 2). We examine the effect of
the faults on the behavior of asynchronous circuits, and de-
termine the types of failures that can result from faults (Sec-
tion 3). We introduce techniques that improve the fault de-
tection capability of QDI circuits (Section 4), and examine
the implementation of these techniques in an asynchronous
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
pipeline (Section 5). Finally, we provide an overall sum-
mary of the results (Section 6).
and the way we model the effects of these faults on a QDI
circuit in terms of a transformation on the circuit itself.
Related Work. Previous analysis of faulty/mis-behaving
asynchronous circuits has been done using the stuck-
at-0/stuck-at-1 fault model
[3]. This work examines
the effects of stuck-at faults in delay-insensitive, quasi
delay-insensitive, and speed independent circuits. Test-
ing QDI circuits, using the stuck-at model, is thoroughly
explored in [2]. This testing method classiﬁes a fault as ei-
ther inhibiting (preventing an action) or stimulating (caus-
ing an action), identiﬁes faults that can’t be observed,
and describes a technique to make all faults observ-
able by adding testing points. A technique to mask transient
faults that occur in asynchronous, speed independent, in-
terfaces is described in [14]. This technique employs the
use an adjudicator to mask transient faults between a cir-
cuit and the environment.
Our work examines a robust class of faults, including
process and reliability, and examines the effect of transient
faults. Perhaps the most important distinguishing feature of
our approach v/s the previous work is that our fault de-
tection techniques can be applied at any granularity—at a
single bit level, at the function block level, at the pipeline
stage level, etc. depending on the granularity of fault isola-
tion required. However, previous asynchronous fault detec-
tion techniques focused on making stuck-at faults externally
visible without attempting to isolate them, and the granular-
ity of fault detection could not be controlled.
2. Sources of Faults and Fault Modeling
Faults can occur at any point in an integrated circuit’s
lifetime. Faults that occur during fabrication are known as
process faults. Process faults can directly cause failures or
can result in devices with a short lifespan. Faults that cause
devices to fail early in their lifetime are known as reliabil-
ity faults. Since reliability faults behave like delay faults be-
fore they fail and like process faults after they fail, we won’t
consider them directly. Throughout this paper, we make the
following distinction between faults and failures. Faults are
the physical (electrical) mechanism that may cause a cir-
cuit to malfunction. Failures are the actual deviant behav-
iors that result from faults. For example, let’s say a process
fault converts a static node into a dynamic one. Such a cir-
cuit may cause transient failures because it fails at random
time intervals depending on noise, however, the fault itself
always exists. Soft-errors such as EM noise, crosstalk, and
alpha particle radiation will have a similar effect.
In this section we discuss asynchronous QDI circuits,
provide a description of the circuit notation, and explain
some of their key properties that make them suitable for
fault detection. We continue by discussing sources of faults,
2.1. QDI Circuits
QDI circuits are implemented as a network of gates,
where each gate consists of a pull-up network implemented
with p-transistors, and a pull-down network implemented
with n-transistors. Logically, we can think of a gate as cor-
responding to two Boolean predicates: G+, the condition
that causes its output ν to be connected to the power sup-
ply (VDD, interpreted as the logic “true” or 1 value in any
Boolean expression), and G−
, the condition that causes its
output ν to be connected to ground (GN D, interpreted as
the logic “false” or 0 value in any Boolean expression).
We denote this gate using the production rule (PRS) no-
tation [9] as follows:
G + (cid:1)→ ν↑
G− (cid:1)→ ν↓
Using this notation, a two-input NAND gate would be spec-
iﬁed as follows:
¬a ∨ ¬b (cid:1)→ out↑
(cid:1)→ out↓
a ∧ b
where “∧” denotes the Boolean AND, “∨” denotes OR, and
“¬” denotes logical negation. A restriction on production
rules is that both G + and G−
must never be true at the same
time, because this would result in a short-circuit. This con-
dition is known as non-interference.
If G + and G−
are complements of each other, then the
gate output is always connected to a power supply. This
corresponds to a conventional static CMOS gate and is re-
ferred to as a combinational gate. If there is a state when
both G + and G−
are false, then in this state the output
does not change. If this occurs, then the gate is said to be
state-holding. State-holding gates always contain a stati-
cizer (a.k.a. a keeper) on their output to prevent the gate
output from changing due to leakage or noise.
A fork in a circuit corresponds to an output of a gate be-
ing used as the input to more than one gate. Each connection
from a gate output to a gate input is referred to as a branch
of the fork. We say that a branch of the fork is isochronic
if we must make a delay assumption about the relative de-
lay of the branch of the fork relative to the other branches of
the same fork (a detailed technical discussion can be found
in [10, 7]).
A circuit is said to be QDI if it operates correctly re-
gardless of the delays of the gates or wires that implement
it, with the exception of wires that implement isochronic
branches [10, 7]. It has been established that for an asyn-
chronous circuit to be hazard-free under the QDI model, ev-
ery signal transition must be acknowledged by a transition
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
on the output of some gate it is connected to [10]. In partic-
ular, this means that a signal cannot make a 0 → 1 → 0
transition without an intervening transition on the output
of some gate that it is connected to. This condition can be
translated into a semantic check on the production rules [7],
and this check can be used to determine if a circuit is QDI.
A commonly occurring gate in QDI circuits is the two-
input C-element. A C-element is state-holding, and is de-
scribed by the following production rules:
a ∧ b
(cid:1)→ c↑
¬a ∧ ¬b (cid:1)→ c↓
A C-element could also be inverting, in which case the c↑
and c↓ transitions are interchanged. This can be generalized
to an n-input C-element by and-ing additional terms to both
the pull-up and pull-down.
This acknowledgment property translates to the follow-
ing result [2]: a stuck-at-0/stuck-at-1 fault on the output of
any gate in a QDI circuits results in deadlock. This is in-
tuitively obvious from the description of acknowledgment
described above. However, other faults can cause more sub-
tle errors in QDI circuits. We discuss these situations in the
next section, providing production-rule models for each cat-
egory of fault.
There is a well-established synthesis method for QDI
asynchronous circuits [9]. Production rules can be gener-
ated that guarantee both non-interference and hazard-free
behavior by “compiling” a description of the asynchronous
computation expressed in a programming notation. The no-
tation, called “handshaking expansions,” (HSE) describes
the sequence of waits and actions that must be performed
by the asynchronous circuit. For instance, the sequence
*[L↑; [¬Le]; L↓; [Le]] can be read as follows: repeat the
following sequence forever (the outer *[..]): set L high;
then wait for Le to be low; then set L low; then wait for Le
to be high. The ”;” here denotes sequential actions, while a
”,” would denote parallel actions. This sequence describes a
four-phase handshake protocol on a pair of wires L and Le.
2.2. Process Faults
Process faults are those faults which occur during fabri-
cation. Process faults can be either global or local in nature.
Global disturbances, such as mask misalignment, will more
than likely damage an entire wafer. Local disturbances,
however, usually only causes damage to a small number of
devices. Local disturbances result from contaminants intro-
duced during the various process steps. Contaminants will
result in extra or missing material depending on the contam-
inant size, location, and the processing step in which it’s in-
troduced [4].
Figure 1 shows a few examples of process faults. Fault
(a) is a short in the metal one layer caused by a contaminant
Figure 1. Process faults occurring in a cmos
n-well process: (a) is a metal one short, (b) is
a metal one open, and (c) is an open via.
that was introduced before metal layer one was etched, but
after photoresist was applied. The contaminant prevented a
section of photoresist from being exposed, which protected
the underlying metal from being etched. Fault (b) is an open
in metal one that is caused by the presence of a contami-
nant before metal one deposition. This contaminant creates
a raise in the metal one material that is deposited on top of
it. When resist is spun on, it fails to cover this raised por-
tion and more metal one is etched than should be. Fault (c) is
an open in a diffusion contact via. A contaminant blocked,
or partially blocked, the via and prevented deposited metal
from making contact with the diffusion.
The most common model used for process faults is the
stuck-at fault model [1]. The stuck-at model is attractive be-
cause it considers faults at the gate level, rather than the
transistor level, which makes test pattern generation easy.
However, the stuck-at fault model doesn’t model bridg-
ing faults, open faults or transistor level faults well. Table
1 shows the resulting production rules for some stuck-at
faults. Since many gates in asynchronous circuits are C-
elements, it is common for any stuck input to result in a
stuck output.
Fault Class
Output
Stuck-at-0
Output
Stuck-at-1
Input
Stuck-at-0
Input
Stuck-at-1
Original PRS
G + (cid:1)→ ν↑
G− (cid:1)→ ν↓
G + (cid:1)→ ν↑
G− (cid:1)→ ν↓
¬x ∧ G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
¬x ∧ G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
Resulting PRS
¬VDD (cid:1)→ ν↑
VDD (cid:1)→ ν↓
¬GND (cid:1)→ ν↑