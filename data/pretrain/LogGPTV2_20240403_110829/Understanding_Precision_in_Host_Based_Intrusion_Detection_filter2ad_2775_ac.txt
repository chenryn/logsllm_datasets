ﬂow based approach. As presented, the model requires complete exposure and complete
history of all control-ﬂow events of a program. Practical control-ﬂow based approaches
usually cannot satisfy this requirement due to undecidability problems in program analy-
sis and performance cost. In this section, we simplify our model to analyze the precision
of control-ﬂow approaches based on the exposed and covered control-ﬂow events.
CFI [5] only checks the targets of dynamically computed control-transfer instruc-
tions, yet it was proven [6] to keep the execution of a program in the statically computed
CFG. However, models extracted using dynamic analysis and path sensitive models [34]
may need static branches to be exposed for monitoring. Moreover, a control-ﬂow event
may be valid or invalid depending on the occurrence of a prior control ﬂow. Hence,
the control-ﬂow events that need to be exposed for veriﬁcation depend on the valid
execution model that is being enforced.
We provide a generic framework to derive a simpliﬁed yet precise control-ﬂow model
that only requires the exposure of a subset of control-ﬂow events. Using this framework,
we analyze the precision of CFI in comparison to the system call based models. Our
framework also provides insight into derivation strategies for precise dynamically con-
structed control-ﬂow models. Our goals are different than that of Abadi et al. [6], which
proved that the stateless checks provided by CFI were sufﬁcient to constrain program
control ﬂow to the static CFG.
30
M. Sharif et al.
4.1 Retaining Precision While Simplifying Models
We simplify control-ﬂow sequence models by deriving a simpler language from Cv.
We remove control-ﬂow events from Cv that do not help a monitor identify an invalid
sequence. If a feasible control-ﬂow event can cause an anomaly or its appearance cor-
relates with another anomalous control-ﬂow event, then it cannot be discarded. We call
such events essential control-ﬂow events. Any control-ﬂow event emanating from a
block that has no essential control-ﬂow events can be discarded without affecting the
precision of the model.
Figure 5 illustrates the statically and dynamically constructed control-ﬂow sequence
language Cv of the program presented in Figure 1. Invalid but feasible control-ﬂow
events emanating from the basic blocks of the program are shown using dotted arrows.
Notice that for both models, basic blocks B6, B7 and B8 have invalid but feasible
control-ﬂow events. Each control-ﬂow transfer instruction in these blocks uses a dy-
namically computed target, and can feasibly point anywhere in memory to generate in-
valid sequences. Additionally, in the Cv constructed from dynamic analysis, the JUMP
instruction at block B6 is correlated with the branch in B1. The control-ﬂow event oc-
curring at B1 is required to validate the event at B6. These control-ﬂow events have to
be visible to the model and cannot be removed.
We ﬁrst deﬁne essential control-ﬂow events as any of the following:
C,∀˜x ∈ Σ
∗
1. Anomaly Generating Control-ﬂow Event (AG). An AG event is the ﬁrst control-
ﬂow event in a sequence to turn a valid sequence into an invalid, but feasible se-
quence. A control-ﬂow event c is an AG if ∃˜u, ˜v, ˜w ∈ Σ
C : ˜u˜v ∈
∗
Cv ∧ ˜uc˜x /∈ Cv ∧ ˜uc ˜w ∈ Cf (refer to Figure 6). If c never appears in any valid
control-ﬂow sequence, then we call it an independent anomaly generator (IAG),
which is always anomalous regardless of the events appearing before it. Otherwise,
we call c a dependent anomaly generator (DAG), which is invalid based upon some
previous control-ﬂow events in the sequence. A typical example of an IAG is a
feasible control-ﬂow transfer into injected code. In addition, it can be an invalid
control-transfer to existing code, such as the event (B6, B5) in Figure 5. Examples
of DAG events are function returns that may be sometimes valid and sometimes
invalid based on the call site.
Fig. 5. Simpliﬁcation of the control-ﬂow sequence language Cv derived from the execution lan-
guages given in Figure 2 (The languages are shown by ﬁnite state automata)
Understanding Precision in Host Based Intrusion Detection
31
Fig. 6. Illustration of an AG
control-ﬂow event c
Fig. 7. The two cases where c is an AC event correlated with
the DAG event d
(cid:3)
(cid:3)
(cid:3)
1) and d = (b2, b
2. Anomaly Correlating Control-ﬂow Event (AC). A control-ﬂow event c is an AC
event if its appearance is correlated with a dependent anomaly generator (DAG)
event d. Examples are function calls instructions or static branches. More precisely,
(cid:3)
2) here),
in order for c to be an AC of d (assume that c = (b1, b
two conditions must be satisﬁed. First, in all valid control-ﬂow sequences follow-
ing the event c, the next control-ﬂow event emanating from b2 must be d. Second,
is another event sharing either the source (e.g. conditional branches) or desti-
if c
nation block with c (e.g. function CALL instruction), following c
, if d is the next
event emanating from b2, it generates an invalid sequences. We show two types
of correlation that broadly encapsulates all possible cases in Figure 7. In the dy-
namic analysis case of Figure 5, (B1, B2) is an AC event correlating with the
DAG (B6, B7). If (B1, B3) appears instead of (B1, B2), (B6, B7) generates an
invalid control-ﬂow sequence. In case a DAG has multiple AC events, the ﬁrst one
is selected. Our deﬁnition can be extended to handle complex cases that involve
recursion by incorporating the notion of a stack, and correlating a DAG event with
an AC event on top of the stack.
The set of essential basic blocks Be ⊆ Bv contains blocks having at least one outgo-
ing essential control-ﬂow event. The basic blocks in the set Be are the only ones whose
control-ﬂow events need to be exposed for veriﬁcation. As a result, when a program
executes, sequences of control-ﬂow events will be generated from these blocks only.
In Figure 5, the statically constructed Cv has the essential basic blocks Be =
{B6, B7, B8} because independent anomaly generating control-ﬂow events exist from
them. In the dynamic analysis case, the control-ﬂow events (B6, B7) and (B6, B8) are
dependent anomaly generators because they are sometimes valid and sometimes invalid.
Since the appearance of (B1, B2) and (B1, B3) correlate to the validity of (B6, B7)
and (B6, B8) respectively, they are anomaly correlating control-ﬂow events. There-
fore, Be = {B1, B6, B7, B8}. Notice that even though block B1 contains a branch
with static target addresses, it must be visible to the monitor.
Our simpliﬁcation generalizes to any control-ﬂow model. Unlike CFI, which only
considers dynamically computed control-transfer instructions, the set Be may include
control-transfer instructions with static targets if they become an anomaly generating
or correlating event. For example, a model enforcing correlated branching would verify
the static branches that were correlated. Be may exclude computed control ﬂows if
analysis reveals that an attacker cannot control the destination. For example, an indirect
jump reading from a read-only jump table may be safely left unveriﬁed.
We deﬁne a smaller alphabet ΣCE = Be × Bf containing only the exposed control-
ﬂow events. The simpliﬁed subsequence language is derived using the homomorphism
32
hce : Σ
M. Sharif et al.
→ Σ
∗
CE, deﬁned as:
∗
C
hce((b1, b2)) =
(cid:2)
(b1, b2),
,
b1 ∈ Be;
otherwise
The simpliﬁed model is now Ce = hce(Cv), which is a language of subsequences
of strings in Cv. Again, refer to Figure 5 for the derived Ce of the running example.
The model appears to be less precise than the full control-ﬂow model Cv. The inverse
⊇ Cv. However, this imprecision does not
homomorphism h
contain any feasible anomalous control-ﬂow sequence:
−1
ce applied to Ce yields Ce
v
v = h
−1
ce (hce(Cv)), then Ce
v
∩ Cf = Cv.
v
(cid:3)
∩ Cf .
v
v
(cid:3) ∈ Cv : h(c
v, ∃c
(cid:3) ∈ Cv : hce(c
(cid:3)) = cs = hce(c).
∩ Cf , and then prove Ce
Theorem 3. If Ce
∩ Cf ⊆ Cv. The ﬁrst
Proof. We ﬁrst prove that Cv ⊆ Ce
part of the proof is straightforward. By deﬁnition, Cv ⊆ Cf and Cv ⊆ Ce
v. Therefore,
Cv ⊆ Ce
∩ Cf , then c ∈ Cv.
For the second part of the proof, we show that if c ∈ Ce
The proof is by induction on the length of the string c. Since c ∈ Cf , by deﬁnition
v
c = (bS, b1)(b1, b2)...(bl−1, bl) with ∀i : bi ∈ Bf . Let cs ∈ Σ
∗
CE be the subsequence
of control-ﬂow events in c emanating from basic blocks in Be, i.e. cs = hce(c). Since
c ∈ Ce
For the induction base case, we show that some string in Cv begins with (bS, b1). If
bS /∈ Be, then (bS, b1) cannot be an essential control-ﬂow event. This means that no
anomalous sequence can begin with bS. Therefore, some sequence in Cv begins with
bS. On the other hand, if bS ∈ Be, then (bS, b1) is in the subsequence cs and should
be the ﬁrst event in the subsequence. Since ∃c
(cid:3)) = cs and control-ﬂow
begins with
events emanating from bS can only be found at the beginning of a string, c
(bS, b1).
For the induction step, we assume that the (k−1) length preﬁx of c is also a preﬁx of
(cid:3) ∈ Cv. We have to prove it for the k length preﬁx. In other words, assum-
some string c
ing that (bS, b1)(b1, b2) ... (bk−2, bk−1) is a preﬁx of a valid control-ﬂow sequence, we
have to show that the next event (bk−1, bk) does not induce an anomaly or create a pre-
ﬁx of a sequence outside Cv. First, for bk−1 /∈ Be, it is obvious from the deﬁnition of
Be that no control-ﬂow event emanating from bk−1 can create an anomalous sequence.
Therefore, the k-length preﬁx of c has to be the preﬁx of some sequence in Cv. Suppose
bk−1 ∈ Be. This means that (bk−1, bk) is in the subsequence cs. The k-length preﬁx
can be invalid only if (bk−1, bk) is an anomaly generating event. If it is, then we can
ﬁrst reject the possibility that it may be an independent anomaly generator because it
cannot be contained in any subsequence of strings in Cv. Therefore, it should be a de-
pendent anomaly generator event. Even in this case, we can prove that it will not create
an anomalous preﬁx of length k. For (bk−1, bk) to create an anomalous preﬁx, some
anomaly correlating control-ﬂow events should be missing or not in valid order in the
k − 1 length preﬁx. If that was the case, then the subsequence of essential control-ﬂow
events generated by the k − 1 preﬁx cannot be the preﬁx of any subsequence generated
by strings in Cv. That contradicts c ∈ Ce
v. Therefore, some string in Cv should have the
k length preﬁx of c.
Hence, exposing events from Be and checking with the simpliﬁed subsequence model
Ce is necessary and sufﬁcient to detect anomalies with the same precision as the com-
prehensive sequence language Cv with all control-ﬂow events exposed.
Understanding Precision in Host Based Intrusion Detection
33
Corollary 2. Checking exposed events from the essential set Be with the simpliﬁed
subsequence language Ce is as precise as checking all events with the comprehensive
model Cv, which is equivalent to the precision of Ev.
If basic blocks in Be are missed, control-ﬂow models become imprecise. The relative
precision depend on the covered basic blocks. Models with more exposed control-ﬂow
events are more precise.
Corollary 3. For the same valid and feasible executions of a program, if two control-
ﬂow based approaches expose control-ﬂow events from set of basic blocks BX andBY
respectively, where Be ⊇ BX ⊇ BY , then the former is at least as precise as the latter,
i.e. Ev ⊆ EX
v andEY
v ).
Next, we can state another result that helps reduce the size of the essential basic block
set. Restricting feasible execution of a program reduces the set of essential basic blocks
without loss of precision:
v (basic block sequences considered valid by them are EX
⊆ EY
v
Corollary 4. For any program with valid execution language Ev, feasible execution
Ef and essential basic blocks Be, if the feasible execution is constrained such that
(cid:3)
E
f
⊆ Ef , then the new essential basic block set is B
⊆ Be.
(cid:3)
e
4.2 Comparing Precision of Practical Systems
Using our framework, we now analyze the precision of several recent host based intru-
sion detection systems. We ﬁrst consider models built via static analysis. CFI conﬁnes
execution in a statically built CFG. Furthermore, it ensures that return addresses are
valid by using a protected shadow stack. Suppose that the execution sequences that are
paths in the CFG, conforming to proper function call and return semantics, constitute
the valid execution language Ev.
We now identify the essential control-ﬂow events. Like CFI, we assume the pres-
ence of NWC. As recognized by Abadi et al., any dynamically computed control-ﬂow
transfer may feasibly target any basic block. Since they can generate invalid sequences
regardless of previous control ﬂow, they are independent anomaly generators (IAG).
Returns from functions are dependent anomaly generators (DAG) because they can gen-
erate anomalies during an impossible path attack [33]. They are correlated with prior
function calls, which are anomaly correlating (AC) events. Therefore, Be contains all
basic blocks that have such instructions. Notice that branch instructions, which have
static target addresses are not anomaly generators because both target blocks are valid
according to the static CFG.