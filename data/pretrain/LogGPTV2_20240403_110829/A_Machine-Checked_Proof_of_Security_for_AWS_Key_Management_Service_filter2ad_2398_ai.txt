security of PKCS tokens in their model. Kremer, Steel and Warinschi [18] deﬁne another model
designed to provide more genericity and to support more powerful corruptions. Kremer, K¨unnemann
and Steel [17] deﬁne a UC functionality for key management, and use their model for proving the
23
security of a minimal example. The model imposes constraints on the interactions between key
management and key usage.
Shrimpton, Stam and Warinschi [23] also show that the indistinguishability deﬁnition of security
for cryptographic APIs composes with a natural class of symmetric-key primitives, such as AEAD
and MAC in order to provide cryptographic services. The security of these cryptographic services
was deﬁned by extending the attack vectors of standard AEAD and MAC security with all the
oracles available to the cryptographic API adversary. We depart from this approach and adopt an
alternative formulation for the security of cryptographic services, which is inspired by the Universal
Composability framework (UC). As discussed in Appendix A, from UC we inherit two important
advantages: i. clear composition guarantees of cryptographic services with other systems; and ii.
a clean and intuitive view of correctness and security guarantees for the clients of cryptographic
services.
Blanchet and Chaudhuri [11] use ProVerif to analyze a protocol for secure ﬁle sharing, which
includes distributed key management features. Their analysis is conducted in the symbolic model
of cryptography, which provides weaker guarantees, but allows for a higher degree of automation.
CryptoVerif [9] was among the ﬁrst tools to support cryptographic security proofs in the compu-
tational model. It uses probabilistic process algebra as a modelling language and leverages diﬀerent
notions of equivalence to support proofs of equivalence, equivalence up to failure events, as well as
simple forms of hybrid arguments. CryptoVerif has been used for verifying primitives, as well as
protocols; it was recently applied to TLS 1.3 [10].
9 Conclusion
We proved a concrete security bound for the DMP of AWS KMS, down to standard cryptographic
assumptions. The bound is tight, increasing linearly with the number of entities in the system, and
it is machine-checked in EasyCrypt. For practical purposes, our work gives strong evidence that
the DMP is as good as an ideal encryption service, under the assumption that any quorum of AWS
operators that authorizes a domain update operation includes at least one honest operator.
Access to EasyCrypt code
The EasyCrypt code is available from gitlab.com/kmsver/kmsdmp.
Acknowledgements
Manuel Barbosa was supported by grant SFRH/BSAB/143018/2018 awarded by the Portuguese
Foundation for Science and Technology (FCT). Vitor Pereira was supported by grant FCT-PD/BD/113967/201
awarded by FCT. This work was partially funded by national funds via FCT in the context of project
PTDC/CCI-INF/31698/2017.
References
1. Michel Abdalla, Mihir Bellare, and Phillip Rogaway. DHIES: An encryption scheme based on the Diﬃe-Hellman
problem. Contributions to IEEE P1363a, September 1998.
2. Michel Abdalla, Mihir Bellare, and Phillip Rogaway. The oracle Diﬃe-Hellman assumptions and an analysis of
DHIES. In David Naccache, editor, CT-RSA 2001, volume 2020 of LNCS, pages 143–158. Springer, Heidelberg,
April 2001.
24
3. Jos´e Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and Fran¸cois Dupressoir. Veriﬁable side-channel security
of cryptographic implementations: Constant-time MEE-CBC. In Thomas Peyrin, editor, FSE 2016, volume 9783
of LNCS, pages 163–184. Springer, Heidelberg, March 2016.
4. Jos´e Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Fran¸cois Dupressoir, Benjamin Gr´egoire, Vincent Laporte,
and Vitor Pereira. A fast and veriﬁed software stack for secure function evaluation. In Bhavani M. Thuraisingham,
David Evans, Tal Malkin, and Dongyan Xu, editors, Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pages
1989–2006. ACM, 2017.
5. Amazon Web Services (AWS). AWS Key Management Service Cryptographic Details, August 2018. https:
//d1.awsstatic.com/whitepapers/KMS-Cryptographic-Details.pdf.
6. Gilles Barthe, Fran¸cois Dupressoir, Benjamin Gr´egoire, C´esar Kunz, Benedikt Schmidt, and Pierre-Yves Strub.
Easycrypt: A tutorial. In Alessandro Aldini, Javier L´opez, and Fabio Martinelli, editors, Foundations of Security
Analysis and Design VII - FOSAD 2012/2013 Tutorial Lectures, volume 8604 of Lecture Notes in Computer
Science, pages 146–166. Springer, 2013.
7. Gilles Barthe, Benjamin Gr´egoire, Sylvain Heraud, and Santiago Zanella B´eguelin. Computer-aided security
proofs for the working cryptographer. In Phillip Rogaway, editor, CRYPTO 2011, volume 6841 of LNCS, pages
71–90. Springer, Heidelberg, August 2011.
8. Mihir Bellare, Alexandra Boldyreva, and Jessica Staddon. Randomness re-use in multi-recipient encryption
schemeas. In Yvo Desmedt, editor, PKC 2003, volume 2567 of LNCS, pages 85–99. Springer, Heidelberg, January
2003.
9. Bruno Blanchet. A computationally sound mechanized prover for security protocols. In 2006 IEEE Symposium
on Security and Privacy, pages 140–154. IEEE Computer Society Press, May 2006.
10. Bruno Blanchet. Composition theorems for cryptoverif and application to TLS 1.3. In 31st IEEE Computer
Security Foundations Symposium, CSF 2018, Oxford, United Kingdom, July 9-12, 2018, pages 16–30. IEEE
Computer Society, 2018.
11. Bruno Blanchet and Avik Chaudhuri. Automated formal analysis of a protocol for secure ﬁle sharing on untrusted
storage. In 2008 IEEE Symposium on Security and Privacy (S&P 2008), 18-21 May 2008, Oakland, California,
USA, pages 417–431. IEEE Computer Society, 2008.
12. Matteo Bortolozzo, Matteo Centenaro, Riccardo Focardi, and Graham Steel. Attacking and ﬁxing PKCS#11
security tokens. In Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly Shmatikov, editors, ACM CCS 10, pages
260–269. ACM Press, October 2010.
13. Christian Cachin and Nishanth Chandran. A secure cryptographic token interface. In Proceedings of the 22nd
IEEE Computer Security Foundations Symposium, CSF 2009, Port Jeﬀerson, New York, USA, July 8-10, 2009,
pages 141–153. IEEE Computer Society, 2009.
14. Ran Canetti. Universally composable security: A new paradigm for cryptographic protocols. In 42nd FOCS,
pages 136–145. IEEE Computer Society Press, October 2001.
15. Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walﬁsh. Universally composable security with global
setup. In Salil P. Vadhan, editor, TCC 2007, volume 4392 of LNCS, pages 61–85. Springer, Heidelberg, February
2007.
16. St´ephanie Delaune, Steve Kremer, and Graham Steel. Formal analysis of pkcs#11. In Proceedings of the 21st
IEEE Computer Security Foundations Symposium, CSF 2008, Pittsburgh, Pennsylvania, USA, 23-25 June 2008,
pages 331–344. IEEE Computer Society, 2008.
17. Steve Kremer, Robert K¨unnemann, and Graham Steel. Universally composable key-management.
In Jason
Crampton, Sushil Jajodia, and Keith Mayes, editors, ESORICS 2013, volume 8134 of LNCS, pages 327–344.
Springer, Heidelberg, September 2013.
18. Steve Kremer, Graham Steel, and Bogdan Warinschi. Security for key management interfaces. In Proceedings
of the 24th IEEE Computer Security Foundations Symposium, CSF 2011, Cernay-la-Ville, France, 27-29 June,
2011, pages 266–280. IEEE Computer Society, 2011.
19. Matthew M. Papi, Mahmood Ali, Telmo Luis Correa, Jr., Jeﬀ H. Perkins, and Michael D. Ernst. Practical
pluggable types for java. In Proceedings of the 2008 International Symposium on Software Testing and Analysis,
ISSTA ’08, pages 201–212, New York, NY, USA, 2008. ACM.
20. Phillip Rogaway. Formalizing human ignorance.
In Phong Q. Nguyen, editor, Progress in Cryptology - VI-
ETCRYPT 06, volume 4341 of LNCS, pages 211–228. Springer, Heidelberg, September 2006.
21. Victor Shoup. A Proposal for an ISO Standard for Public Key Encryption (version 2.1), 2001. https://www.
shoup.net/papers/iso-2_1.pdf.
22. Victor Shoup. A proposal for an ISO standard for public key encryption. Cryptology ePrint Archive, Report
2001/112, 2001. http://eprint.iacr.org/2001/112.
23. Thomas Shrimpton, Martijn Stam, and Bogdan Warinschi. A modular treatment of cryptographic APIs: The
symmetric-key case. In Matthew Robshaw and Jonathan Katz, editors, CRYPTO 2016, Part I, volume 9814 of
LNCS, pages 277–307. Springer, Heidelberg, August 2016.
25
A Relation to Universal Composability
Although we have not formalized it (syntactically) in this way, our security model and proof can
be recast in terms of Universal Composability with global setup [15]. This is a framework that
extends Universal Composability to enable set-up assumptions such as common reference strings,
or public-key infrastructures (PKI). In this setting we would consider three types of parties.
– Hosts, which provide the environment Z with the high-level interface of AEAD encryption and
– HSMs, which enable A to update trusts and manage keys, as well as perform encryption and
– Operators, which enable Z to generate key attestation statements for operators and HSMs.
The proof assumes static-corruptions, whereby some parties are known to be corrupt from the
beginning of computation.
decryption and enable A to install trusts.
decryption operations based on requests placed by hosts.
The proof of security in the UC framework would be carried out in a hybrid model. The
ﬁrst hybrid functionality is a conﬁdential and authenticated channel through which hosts place
encryption and decryption requests to HSMs. We emphasise that this hybrid functionality is not
used by the KMS DMP protocol in any of the domain management operations, which are the
focus of our analysis; it captures only the architectural choice that KMS hosts collect end-user
encryption/decryption requests and forward them to HSMs (see footnote 13). Future work will
extend the proof to consider the speciﬁc secure channel used by KMS for this purpose, which
builds on top of the DMP itself.
Additionally the hybrid model includes two set-up assumptions. The ﬁrst set-up assumption
is a standard PKI functionality that is used only by operators, and which registers the identity
keys of genuine entities in the system; this models the real world operation of KMS DMP in which
operators are assumed to know the set of genuine entities. A crucial aspect of the security guarantees
we prove for KMS DMP is precisely that this resource is restricted to operators, and still it suﬃces
to guarantee that trust honesty is preserved by host and HSM actions.
The second set-up assumption captures the global quorum invariant that in any group of n