title:Towards Measuring Supply Chain Attacks on Package Managers for Interpreted
Languages
author:Ruian Duan and
Omar Alrawi and
Ranjita Pai Kasturi and
Ryan Elder and
Brendan Saltaformaggio and
Wenke Lee
Towards Measuring Supply Chain Attacks on
Package Managers for Interpreted Languages
Ruian Duan, Omar Alrawi, Ranjita Pai Kasturi, Ryan Elder,
Brendan Saltaformaggio, and Wenke Lee
Georgia Institute of Technology
Abstract—Package  managers  have  become  a  vital  part  of  the 
modern  software  development  process.  They  allow  developers 
to  reuse  third-party  code,  share  their  own  code,  minimize  their 
codebase, and simplify the build process. However, recent reports 
showed that package managers have been abused by attackers to 
distribute malware, posing significant security risks to developers 
and  end-users.  For  example,  eslint-scope,  a  package  with 
millions of weekly downloads in Npm, was compromised to steal 
credentials  from  developers.  To  understand  the  security  gaps 
and  the  misplaced  trust  that  make  recent  supply  chain  attacks 
possible,  we  propose  a  comparative  framework  to  qualitatively 
assess  the  functional  and  security  features  of  package  managers 
for  interpreted  languages.  Based  on  qualitative  assessment,  we 
apply well-known program analysis techniques such as metadata, 
static,  and  dynamic  analysis  to  study  registry  abuse.  Our  initial 
efforts  found  339  new  malicious  packages  that  we  reported  to 
the  registries  for  removal.  The  package  manager  maintainers 
confirmed 278 (82%) from the 339 reported packages where three 
of them had more than 100,000 downloads. For these packages we 
were issued official CVE numbers to help expedite the removal of 
these  packages  from  infected  victims.  We  outline  the  challenges 
of  tailoring  program  analysis  tools  to  interpreted  languages  and 
release  our  pipeline  as  a  reference  point  for  the  community  to 
build  on  and  help  in  securing  the  software  supply  chain.
I. 
INTRODUCTION
Many  modern  web  applications  rely  on  interpreted  pro-
gramming  languages  because  of  their  rich  libraries  and  pack-
ages. Registries (also known as package managers) like PyPI, 
Npm,  and  RubyGems  provide  a  centralized  repository  that 
developers  can  search  and  install  add-on  packages  to  help  in 
development.  For  example,  developers  building  a  web  appli-
cation  can  rely  on  Python  web  frameworks  like  Django  [1], 
Web2py [2], and Flask [3] to provide boilerplate code for rapid 
development.  Not  only  have  registries  made  the  development 
process  more  efficient, b ut a lso t hey h ave c reated a  large 
community  that  collaborates  and  shares  open-source  code. 
Unfortunately,  miscreants  have  found  ways  to  infiltrate these 
communities  and  infect  benign  popular  packages  with  mali-
cious code that steal credentials [4], install backdoors [5], and 
even  abuse  compute  resources  for  cryptocurrency  mining  [6].
The impact of this problem is not isolated to small one-off 
web apps, but large websites, enterprises, and even government
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23055
www.ndss-symposium.org
organizations that rely on open-source interpreted program-
ming languages for different internal and external applications.
Attackers can infiltrate well-defended organization by simply
subverting the software supply chain of registries. For exam-
ple, eslint-scope [4], a package with millions of weekly
downloads in Npm, was compromised to steal credentials
from developers. Similarly, rest-client [5], which has over
one hundred million downloads in RubyGems, was compro-
mised to leave a Remote-Code-Execution (RCE) backdoor
on web servers. These attacks demonstrate how miscreants
can covertly gain access to a wide-range of organizations by
carrying out a software supply chain attack.
Security researchers [7] are aware of these attacks and have
proposed several solutions to address the rise of malicious
software in registries. Zimmermann et al. [8] systematically
studied 609 known security issues and revealed a large attack
surface in the Npm ecosystem. BreakApp [9], on the other
hand, isolates untrusted packages, which addresses credential
theft and prevents access to sensitive data, but does not
stop cryptocurrency mining or backdoors. Additionally, many
solutions [10]–[12] assume inherent trust and focus on finding
bugs in packages rather than malicious packages. To make
matters worse, some attacks are very sinister and use social
engineering techniques [13], [14] to disguise themselves by
first publishing a “useful” package, then waiting until it is used
by their target to update it and include malicious payloads.
Although, many security researchers are actively investigating
attacks on registries and proposing solutions, these approaches
seem to be ad-hoc and one-off solutions. A better approach is
to understand the extent of the software supply chain abuse and
how miscreants are taking advantage of them. The approach
must be grounded to allow an objective comparison between
the different registry ecosystem.
To this end, we propose a framework that highlights key
functionality, security mechanisms, stakeholders, and remedi-
ation techniques to comparatively analyze different registry
ecosystems. We use our framework to look at what features
registries provide, what security principles are enforced, how is
trust delegated between different parties, and what remediation
and contingency plans registries have in place for post-attack.
We leverage our findings to provide practical action items that
registry maintainers can enforce using pre-existing tools and
security principles that will improve the security of the overall
package management ecosystem. Using well-known program
analysis techniques, we build MALOSS, a custom pipeline
tailored for interpreted languages that we use to empirically
study the security of package managers. We make this pipeline
public 1 for the community to use as a reference or starting
point to help analyze and identify suspicious packages.
We use our pipeline MALOSS to study over one million
packages from PyPI, Npm, and RubyGems and identified 7
malicious packages in PyPI, 41 malicious packages in Npm,
and 291 malicious packages in RubyGems. We reported these
packages to registry maintainers and had 278 of them removed,
over 82%. Three of the reported malicious packages had
over 100K installs and they were assigned an official CVE
number. We present an in-depth case study to demonstrate the
utility of our framework and demonstrate the sophistication of
these malicious packages and present their infection vectors,
capabilities, and persistence. Moreover, to study the impact
the malicious packages, we use passive-DNS data to estimate
how wide spread the installation of these malicious packages.
Finally, we propose actionable steps to help improve the overall
security of package managers and protect the software supply
chain such as adding typo detection at
the client-side to
minimize accidental errors of developers.
integration and continuous deployment (CI/CD) pipeline to
automate the release process (i.e., build and deploy).
Developers. Developers manage the app development frame-
work and are consumers of the published packages. They
are responsible for finding the right packages to use in their
software and releasing their products to end-users. Devs focus
on developing unique features in their software and reuse
packages from registries for common functionalities. Also,
Devs need to address issues of reused packages, such as known
vulnerabilities and incompatibilities.
End-users. Although not directly interacting with registries,
end-users are still an important stakeholder in the ecosystem.
Users are at the downstream and use services or applications
from Devs on browsers, mobile devices or Internet-of-Things
(IoT) devices. Users are eventually customers that pay and
fuel the whole ecosystem, however, they have no control of
software except feedback channels and can be affected by
upstream security issues.
II. BACKGROUND
B. An Overview of Registry Abuse
Registries are platforms for code sharing and play an essen-
tial role in the software development process. We start by intro-
ducing the four primary stakeholders involved in developing,
managing and using packages from registries, namely Registry
Maintainers (RMs), Package Maintainers (PMs), Developers
(Devs) and End-users (Users). We then present an overview of
registry abuse and show that existing studies cannot address
the rising trend of supply chain attacks. We further dive into
the security gaps and identify challenges in securing registries.
A. Primary Stakeholders
We sketch the characteristics of primary stakeholders and
their simplified relationships in the package manager ecosys-
tem in Figure 1. Note that the stakeholders are roles, which
can be assigned to a single person.
Registry Maintainers. Registry maintainers manage the
registry maintaining framework and are responsible for run-
ning registries, which are centralized repositories that host
packages developed by PMs. Registries provide search and
install capabilities for Devs to help organize packages in a
central repository. Registries generally consists of two parts:
a web application that manages and serves packages (e.g.,
pypi.org) and a client application that provides easy access
to the package (e.g., pip).Registry maintainers require PMs to
signup before they are allowed to publish (i.e., authenticated
write) their package. On the other hand, Devs can query and
install (read) from the registry with or without signup.
Package Maintainers. Package maintainers manage the pack-
age maintaining framework and are responsible for develop-
ing, maintaining and managing packages. Package maintainers
typically use a code hosting platform like GitHub to manage
their development and collaborate with other contributing
developers. They may receive pull requests from contributors
interested in their projects, thus allowing community support
for enhancement and maintenance. They can use a continuous
1https://github.com/osssanitizer/maloss
We present a selected list of supply chain attacks in
Figure 2, spanning across different types of registries (e.g.
interpreted languages, system-wide). In 2016, Tschacher [7]
demonstrated a proof-of-concept attack against package man-
agers. The attack used typosquatting, which is a technique
that misspells the name of a popular package and waits for
users installing the popular package to typo the name (hence
typosquatting) resulting in the installation of the malicious
package instead. As of August 2019, there were more than 300
malicious packages reported and removed in different registries
(PyPI, Npm, RubyGems, etc.). In Figure 3, we aggregate the
number of malicious packages uploaded into registries and
their corresponding download counts by year of uploading. We
note that these counts are documented/detected attacks, which
is a subset of all the attacks (known and unknown). Figure 3
shows that the year of 2018 alone saw more than 100 malicious
packages with more than a cumulative 600 million downloads.
Typosquatting is just one type of attack, a more recent
report by Snyk [15], a vulnerability analysis platform, clas-
sified three types of attacks, namely typosquatting, account
hijacking, and social engineering. Hijacking is account com-
promise through credential theft and social engineering is a
deceptive tactic to trick owners of package repositories to
transfer ownership. The report highlights that typosquatting
is the most common attack tactic because most registries do
not enforce any security policies as shown by Loden [16].
Account hijacking takes place because of weak credentials
that attackers can guess and social engineering attacks exploit
the collaborative nature of open-source projects as seen in
many attacks [13], [14], [17]. Unfortunately,
the focus of
the community has been on finding bugs in package code
through platforms like Synode [10], NodeCure [11], and
ReDoS [12]. Recent efforts by BreakApp [9] use runtime
isolation of untrusted packages, but suffers from practicality
due to required developer efforts, and cannot deal with attacks
such as cryptojacking. Registry maintainers are aware of these
issues and have taken initiative to implement some security
enhancements such as package signing [18] and two-factor
authentication (2FA) [19]. Despite these commendable efforts,
2
Fig. 1: Simplified relationships of stakeholders and threats in the package manager ecosystem.
Fig. 2: Selected supply chain attacks on package managers sorted by date of reporting.
Fig. 3: The number of malware and
their downloads aggregated by year
of uploading as of August 2019.
Figure 3 shows the number of malicious packages in registries
is on the rise.
C. Challenges in Securing Registries
To combat supply chain attacks against package managers,
in-depth analysis of the ecosystem is needed to understand
which part is being abused, who are responsible, how can such
attacks be best prevented and what can be done for remedi-
ation. Although coming up with ad-hoc fixes for each threat
can be straightforward, such as 2FA for account compromise,
it remains challenging to systematically understand weak links
and propose countermeasures. To achieve this, we propose a
comparative framework in §III-A to qualitatively analyze the
PyPI, Npm and RubyGems registries. We chose these package
managers for interpreted languages since they are popular
among developers and see the most supply chain attacks. The
framework clears the fog by systematically analyzing registries
for their functional, security and remediation features and
existing attacks for attack vectors and malicious behaviors.
One important takeaway from the qualitative analysis is
that registries currently have little to no review process for
publishing packages. Therefore, our intuition is that more
unknown malware should still exist in the wild. To verify
this, we apply well-known program analysis techniques such as
metadata, static and dynamic analysis to study registry abuse.
However, off-the-shelf tools suffer from accuracy and lack
of domain knowledge. First, since these packages can have
a large number of dependencies, directly applying existing
static analysis tools to them not only incurs significant time
and space overhead, but also wastes computing resources in
repeatedly analyzing commonly used packages. For example,
eslint and electron both reuse over 100 packages on Npm,
including indirect dependencies. Inspired by StubDroid [20],
we implement modularized static analysis which summarize
dependencies into formats for further reuse. Second, these
packages are written in dynamically typed languages and are
flexible in terms of execution, leading to inaccurate static
analysis and complicated runtime requirements in dynamic
analysis. In this study, we take a best effort approach to analyze
packages for their behaviors and leverage our insights from
existing supply chain attacks to flag suspicious ones. We then
iteratively check the results to identify and report malicious
packages. It’s important to note that we are not trying to
advance the state-of-the-art in program analysis, but instead
to compile existing tools into a functional pipeline which the
community can build upon. Surprisingly, our initial efforts in
§III-B found 339 new malicious packages, with three of them
having more than 100,000 downloads.
III. METHODOLOGY
A. Qualitative Analysis
Since 2018, we have been tracking supply chain attacks
on registries, with a focus on PyPI, Npm and RubyGems
which receives most of the attacks. By mirroring the three
registries, we obtained samples for 312 reported attacks. To
analyze these attacks, we propose a framework that enables a
comparative analysis of the registries to identify root causes
and security gaps. The framework is inspired by modeling
the management and development process in the package
management ecosystem. We outline threats that currently affect
the ecosystem and show how it applies to our framework.
1) Registry Features: Registries are the core component
of package manager ecosystems and provide features such as
package hosting and account protection. We list the features
of PyPI, Npm and RubyGems in Table I, organized into three
categories, namely functional, review and remediation.
Functional Features. As shown in Figure 1, PMs, as suppli-
ers, access accounts and publish and manage their packages on
registries, and Devs, as consumers, select and install packages
from registries as dependencies. Each registry has different
3
PackageDevelopment ServerBuild & DeployPublic Hosting PlatformContributing DeveloperRegistry Client BinariesnpmpipgemInstallPushPushAuthenticatedPublish21Application Development ServerBuild & DeployInstallDownloadServiceAppRelease3Package Maintaining FrameworkRegistry Maintaining FrameworkApp DevelopmentFrameworkBrowserMobile AppIOT DeviceEnd UserInstall App/Visit Service4Registry Web AppRegistry Web ServerJul 2016Oct 2016Jan 2017Apr 2017Jul 2017Oct 2017Jan 2018Apr 2018Jul 2018Oct 2018Jan 2019Apr 2019Jul 2019Oct 2019rest-client (RubyGems)webmin (SourceForge)purescript (Npm)strong_password (RubyGems)37 typosquatting packages (Npm)electron-native-notify (Npm)48 typosquatting packages (Npm)bootstrap-sass (RubyGems)AndroidAudioRecorder (JCenter)event-stream (Npm)12 typosquatting packages (PyPI)active-support (RubyGems)eslint-scope (Npm)acroread, balz and minergate (AUR)17 backdoored docker images (DockerHub)2048buntu (Snappy)18 typosquatting packages (PyPI)ssh-decorate (PyPI)getcookies (Npm)10 typosquatting packages (PyPI)14 npm packages reported by Duo (Npm)40 typosquatting packages (Npm)typosquatting thesis (Npm/PyPI/RubyGems)050100# of malware20152016201720182019Year105107109# of downloadsTABLE I: Comparative framework for analysis of registries.
Features
s Password
Registries
Npm RubyGems
PyPI
s
r
e
n
i
a
t
n
i
a
M
e