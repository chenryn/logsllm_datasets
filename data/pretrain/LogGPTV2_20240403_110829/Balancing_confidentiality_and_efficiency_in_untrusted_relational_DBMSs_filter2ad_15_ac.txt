The identiﬁcation of the correspondence between the la-
bels on the graph G = (V, E) and the plaintext values, when
the plaintext database is known, can exploit information on
the topological structure of the data that permits a more
precise reconstruction than the one possible when the only
information available is the distribution of values in each
attribute. In the example, it is possible to correctly iden-
tify the correspondence between label Col1 and attribute
Customer, label Col2 and attribute Balance, label α and
value Alice, label µ and value 100, label κ and value 200.
Also, label t1 will be associated with the ﬁrst tuple and la-
bel t2 with the second. For the remaining vertices it is only
possible to obtain a probabilistic estimate of the correspon-
dence.
i , vj
The search for a correspondence that we above realized
on the intuition, is strongly related to the presence of au-
tomorphisms in the RCV-graph. An automorphism of a
graph is an isomorphism of the graph with itself. For-
mally, an automorphism of a graph is a permutation Γ of the
graph labels such that G(V, E) = G(V Γ, E) (i.e., ∀e(vi, vj) ∈
Γ) ∈ E). If the graph is colored (as in our case),
E, e(vΓ
nodes with diﬀerent color cannot be exchanged by the per-
mutation. The identical permutation trivially satisﬁes the
relationship; then, at least one automorphism exists for any
graph. When the RCV-graph presents only the trivial auto-
morphism, the correspondence between the vertex labels and
the plaintext values can be fully determined and the knowl-
edge of the plaintext database permits a full reconstruction
of the correspondence between plaintext and index values.
When there are several automorphisms in the RCV-graph,
the identiﬁcation of a vertex can be uncertain, as there are
many alternative ways to reconstruct the correspondence be-
tween the vertices. In the example, the RCV-graph presents
4 automorphisms, that we represent here by the permuta-
tions of labels that characterize them. Each permutation is
represented by a diﬀerent order of the symbols in the fol-
lowing sequences.
A1 {Col1, Col2, t1, t2, t3, t4, t5, t6, α, β, γ, δ, , µ, η, κ, θ }
A2 {Col1, Col2, t1, t2, t5, t4, t3, t6, α, δ, γ, β, , µ, θ, κ, η }
A3 {Col1, Col2, t1, t2, t3, t6, t5, t4, α, β, , δ, γ, µ, η, κ, θ }
A4 {Col1, Col2, t1, t2, t5, t6, t3, t4, α, δ, , β, γ, µ, θ, κ, η }
The 4 automorphisms derive from the choice in the or-
der of the two vertices sets (t3,β,η)-(t5,δ,θ) and (t4,γ)-(t6,).
The number of automorphisms could appear as a measure
of the protection against inference attacks, but we observe
that it is not a good evaluator. In fact, in all the databases
we studied the number of automorphisms increases exponen-
tially with the size of the graph and may reach considerable
(and inexpressive) values even for graphs of limited size;
also, situations with evidently diﬀerent protection may be
characterized by the same number of automorphisms. We
devised a more precise measure of protection, which consid-
ers the number of alternatives that are oﬀered for the value
of a label. The intuition is the following:
for each value
in a tuple in the database, we may have a given probabil-
ity of guessing it based on the knowledge of the plaintext
database: if all the RCV-graph automorphisms do not per-
mute the corresponding vertex, we will have a probability
(p = 1) of identifying its correct value. In general, if we have
K automorphisms for the RCV-graph and in k of them the
label assigned to vertex vi is correct, we will have a prob-
ability pi = k/K of correctly identifying the vertex (i.e.,
we ignore row and column vertices). Since we are inter-
ested only in the identiﬁcation of the correspondence for the
vertices representing attribute values, we limit the consider-
ation of the exposure coeﬃcient to these nodes. Given the
value pi of each vertex vi representing an attribute value,
we estimate the probability of guessing right a generic value
by computing the average on all the vertices of the proba-
bility pi, obtaining the attribute exposure coeﬃcient AEC =

m
i=1 pi/m.
The automorphism problem has been extensively stud-
ied in the context of graph theory and many results can be
directly applied to our context. First, the set of automor-
phisms of a graph constitute a group (called the Automor-
phism Group of the graph), which, for undirected graphs
like ours, can be described by the coarsest equitable parti-
tion [12] of the vertices, where each element of the partition
(each subset appearing in the partition) contains vertices
that can be substituted one for the other in an automor-
phism. The Nauty algorithm that identiﬁes the automor-
phism group of the graph [12], starts from a partition on
the vertices that can be immediately derived grouping all
the vertices with the same color and connected by the same
number of edges. This partition is then iteratively reﬁned,
and a concise representation of all the automorphisms is pro-
duced. From the structure of the partition, it derives that
all the vertices appearing in the generic partition element
Cj are equivalently substitutable in all the automorphisms;
from this observation, it derives that the probability pi of
a correct identiﬁcation of a vertex vi ∈ Cj is equal to the
inverse of the cardinality of Cj, 1/ | Cj |.
Then, for the identiﬁcation of the AEC it is suﬃcient to
identify the number of elements in the equitable partition
and the total number of attribute vertices (i.e., it is not
necessary to keep track of the number of vertices in each
partition). In fact, with | Cj | vertices in the partition ele-
ment Cj, n elements in the equitable partition and a total
number m of vertices, the exposure coeﬃcient of the table
is:
m
(cid:0)
i=1
pi/m =
n
(cid:0)
j=1
(cid:0)
vi∈Cj
pi/m =
n
(cid:0)
j=1
(cid:0)
vi∈Cj
1/(| Cj | m) =
n
(cid:0)
j=1
1/m = n/m
In the example, the equitable partition for attribute ver-
tices is {(α)(β, δ)(γ, )(µ)(η, θ)(κ)} and the AEC= 6/9 =
2/3. As a check, the reader can verify on the RCV-graph
that the vertices appearing in singleton elements are asso-
ciated with pi = 1 and those in the remaining elements are
associated with pi = 1/2. The average of pi on all the ver-
tices returns 2/3.
When the structure of the database is completely absent,
as it occurs when all the attribute values appear once in the
database, the AEC is minimal at 1/m. The contribution
of the knowledge of the plaintext database increases when
the structure of the RCV-graph derived from it can impose
restrictions that limit the number of options for a vertex,
increasing the exposure coeﬃcient.
3.2.3 Experimental results
We implemented a tool that takes in input a relational
database and builds the RCV-graph that models it, with the
construction presented in the previous section. The program
then invokes on the RCV-graph the Nauty algorithm [12],
which is able to compute eﬃciently the automorphism group
(around 15 minutes on a 700MHz Pentium III PC running
Linux, for the greatest RCV-graph derived from a 2000 4-
tuple table containing 2262 distinct values). The output of
the program is then analyzed to reconstruct the equitable
partition, that permits to determine the attribute exposure
coeﬃcient of the table. The tool was the basis for an anal-
ysis of the evolution of the exposure coeﬃcient for tables of
progressively increasing size and for an increasing number
of indexes.
We retrieved from an Italian government site a table de-
scribing the professors of the universities in our region. The
table listed 2340 professors, with 4 attributes: Name (ﬁrst
Number of tuples
200
500
1,000
2,000
Attributes
{Name,Role}
18/2006
{Name,Disc.}
83/2234
{Name,Fac.}
44/2019
{Name,Role,Disc.}
881/2241
{Name,Fac.,Role}
152/2027
{Name,Fac.,Disc.}
599/2255
{Name,Fac.,Role,Disc.} 242/284 439/601 743/1110 1467/2262
16/1007
14/206
61/1093
21/269
21/209
21/1009
176/275 316/592 452/1100
66/215
74/1017
141/278 224/594 292/1103
14/507
39/585
21/509
72/516
(a)
NR
ND
NF
NDR
NFR
NFD
NFDR
 200
 500
 1000
Number of tuples
(b)
 2000
t
i
n
e
c
i
f
f
e
o
c
e
r
u
s
o
p
x
e
e
t
u
b
i
r
t
t
A
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Figure 4: Tabular representation of the experimen-
tal results (a) and their graphical representation (b)
(curve labels refer to the initial of the attributes)
name and last name combined in a single attribute), Fac-
ulty (the name of the professor faculty), Role (the status of
the professor:
full, associate, assistant, etc., following the
Italian structure) and Discipline (the ﬁeld of the professor,
using a classiﬁcation by the Italian government). We applied
the tool using a progressively greater number of tuples; we
did not use the full table, but stopped at 2000 tuples. We
considered all the combinations of attributes containing at-
tribute Name; this choice was due to the fact that the anal-
ysis is meaningful only if at least two attributes are present
in the table (otherwise, no correlation among attributes can
be observed) and it was useful to keep a common attribute
in all the experiments. The results appear in tabular form
in Figure 4(a) and graphically in Figure 4(b).
The main result of the experiments is the ﬁnding that the
number of attributes used for the index has a great impact
on attribute exposure. With only two attributes, exposure
coeﬃcients tend to be quite low; when all the 4 attributes
are used as index, the exposure is considerable.
Another question answered by the experiments is how the
exposure evolves with an increase in the database size. What
we observe is that the exposure slowly decreases with the size
of the database. The explanation is that as the number of
tuples increases, a greater number values become character-
ized by a distinct proﬁle and are identiﬁable. At the same
time, the new tuples introduce new values that are infre-
quent and indistinguishable, and this component wins over
the former.
4. SUPPORTING INTERVAL-BASED
QUERIES
The solution presented in Section 2 does not support well
interval-based queries, as a condition over an interval I would
need to be mapped onto as many equality conditions as there
are values in I. Of course, an eﬃcient support for interval-
based queries would be possible by using order-preserving
encryption (imposing Ek(ti[A]) < Ek(tj[A]) whenever ti[A] <
tj[A]). However, this solution is not viable as comparing the
ordered sequences of index and plaintext values would lead
an easy reconstruct the correspondence.
Interval-based queries are eﬃciently supported in tradi-
tional DBMSs with the use of B+-trees (whose construction
and management is left to the DBMS). B+-trees are one of
the most common solutions for the construction of indexes.
A B+-tree (balanced tree) satisﬁes the constraint that the
number of arcs that is necessary to traverse to go from the
root to a leaf is the same for every leaf. A B+-tree with fan
out F is a B-tree where there are no nodes with a number of
outgoing arcs greater than F ; additionally, all the non-leaf
nodes, except the root, must have at least (cid:6)F/2(cid:7) outgoing
arcs.
Given a relation R and a subset of its attributes K, a B+-
tree built on the key K of R permits to access the tuples of
R with a given value for the key. Each node presents f − 1
key values, where f is the number of outgoing arcs; each key
value ki is associated with the outgoing arc ai, except for
the ﬁrst arc a0. To access a tuple characterized by key value
k, the nodes are considered starting from the root, and in
each node if k is greater than or equal to ki and smaller than
ki+1, the arc ai is chosen; if k is smaller than k1, arc a0 is
chosen; if k is greater than or equal to kf−1, the arc af−1
is chosen. In the leaves, the arcs are replaced by the IDs of
the encrypted tuples. A B+-tree structure has in each leaf
an outgoing arc that connects each leaf to the one following
it in the order supported by the tree. This pointer supports
the evaluation of range predicates (the inferior limit of the
interval is ﬁrst searched on the tree; then, the leaves are
navigated, until the superior limit of the search interval is
reached). Figure 5(a) illustrates an example of B+-tree built
on attribute Customer. Here, each node can include two key
values.
In our context, however, the untrusted DBMS only knows
the encrypted data and any B+-tree deﬁned on the indexes,
not reﬂecting the order of the plaintext values, is practi-
cally useless for query execution. The only possible way to
solve this problem is to leave the task of determining B+-
tree information2 to the trusted front end. The B+-tree can
then be encrypted and stored at the untrusted DBMS (as
the trusted front end has limited storage capacities). Obvi-
ously, protecting the B+-tree by encrypting each of its ﬁelds
is unfeasible, as it would disclose to the server the ordering
relationship between the index values. As an alternative,
we propose to encrypt each B+-tree node as a whole. The
original B+-tree is then represented at the untrusted DBMS
as a table with two attributes: a node ID, automatically as-
signed by the system on insertion, and an encrypted value,
representing the node content. Figure 5(b) shows the plain-
text representation of the B+-tree table and its encrypted
counterpart.
2We purposely avoid the use of the term index so not to