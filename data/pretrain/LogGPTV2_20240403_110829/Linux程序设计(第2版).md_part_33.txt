把堆栈上的数字输出为一个十进制数。
发送“：”字符。
d%.
把第二个参数放到堆栈上。
%d
把堆栈上的数字输出为一个十进制数。
·H
发送“H”字符。
这种写法看起来相当复杂。但它允许人们以统一固定的顺序使用这些参数，与终端希望它
们最终出现在escape转义序列里时的顺序互不干扰。“%i”的作用是增加参数的值，它是必不可
少的，因为光标地址的标准定位方法是把屏幕的左上角看做是（0，0)，而VT100把这个位置定义
为地址（1，1）。最后面的“$”表示需要延迟一段与输出五个字符相当的时间，终端就在这段
延时里对光标移动操作进行处理。
我们可以对许许多多的性能指标进行定义，但幸运的是大多数UNIX系统已经把大
多数终端都定义好了。如果读者需要增加一个新终端，就能在使用手册的terminfo项目
下找到一个完整的性能指标清单。比较好的办法是：以与新终端型号接近的一个终端为
出发点，把新终端定义为那个现有终端的变体；或者你可以逐项地对新终端的性能指标
进行定义，按要求修改它们。
man命令给出的使用手册页以外的标准参考资料是O'Reilly出版社出版的“Termcap
andTerminfo”（《Termcap和Terminfo大全》），国际书号是ISBN0-937175-22-6。
5.4.3terminfo的使用方法
现在我们已经知道如何对终端的性能指标进行定义了，下面我们来看看怎样才能利用这些
性能指标实现我们的想法。在使用terminfo的时候，我们要做的第一件事情是调用函数setupterm
设置终端的型号。这个操作会根据当前终端的型号初始化一个TERMINAL结构。随后，我们就
可以查看这个终端的性能指标和使用它的功能了。setupterm函数的调用方法如下所示：
#include 
int setupterm(char *tern,int fd, int *errret);
setupterm库函数把当前终端设置为由参数term指定的型号。如果term是一个空指针，就使用
环境变量TERM的值。往终端写数据需要使用一个文件描述符，它被传递为参数fd。如果函数的
执行结果不是一个空指针，就会被保存到errret指向的一个整数变量里去。它的含义如下：
* -1
terminfo数据库不存在。
0.
terminfo数据库中没有匹配数据项。
· 1
成功。
setupterm函数在成功时返回常数“OK”，失败时返回“ERR”。如果errret被设置为空指针，
setupterm就会在失败时给出一条诊断信息并直接退出执行，就象下面的例子那样：
加入jaVa编程群：524621833
---
## Page 170
/52
Linux程序设计
#include 
include 
include 
(1ureu qu)
setuptera(“unlisted*,fileno(stdout) , tint *)0);
printf(*Done.\n*) ;
exit(0};
在读者系统上运行此醒序的结渠可能与这里给出的不太一样，但意思应该是很明白的。你
在屏莓上足存不到“Done.”的，因为setupterm在它执行失败的时候会使程序直接退出运行。
ce -o badterm badtern.c -I/uar/include/ncurses -lncur8e8
unliste:l'; unknown terminal type.
S badterm
请留意例子中的编译命令行：在这台Linux系统上，ncurses头文件被保存在子目录
usr/include/ncurses里了，所以我们要用“-1”选项明确地告诉编译器该到那里去查找库文件
有的Iinux系统已经把curses阵放到标准地点上了，在这些系统上，我们只需要在程序里包括上
ncurses.h头文件，再在命令行上用“-lcurses”指定库文件就行了。
米乔不我们的菜单选择函数，我们想让它能够清屏，能够在屏幕上移动光标，能够在屏
的不间位置等数据在成功调用sefupterm函数之后，我们就可以通过下面三个函数来访间
terminfo性能指标.每个函数对应着--个性能指标类别：
#include 
int tigetflag(char *capnane))
int tigetnun（char *capname);
函数tigetflag、tigetnum和tigetstr分别返回terminfo性能中的布尔指标、数值指标和字符串指
标在失败的时候（比如某个性能指标不存在的时候），tigetflag将返回“-1"，tigetnum将返词
“-2"，面uigetstr将返回“（char*）-1”。
我们先利用terminfo性能指标数据库查出终端字符显示区的大小，具体做法是用下面这个
sizeterm.c程序检索出终端的cols和lines性能指标值：
include 
#include 
#include 
int sain()
1nt nxows, ncolumns;
setupterm(NULL, fileno[stdout).(int*)0);
ncolumns = tigetnum(*cols*):
nrows = tigetnum(*lines*):
printf(*Thie terminal has d columns and d rows\n′, ncolunns, nrows);
oxit (0) :
ecbo $T2RM
vt100
This teininal has 80 columns and 24 rows
S sizeterm
加入jaVa编程群：524621833
---
## Page 171
第5章终端153
如果我们在工作站的一个窗口里运行这个程序，得到的答案将反应出当前窗口的字符显示
区尺寸，如下所示：
Secho $TERN
Saixetera
xtern
This terminal has 88coluauns and 40rows
如果我们用tigetstr函数来检索xterm终端的光标移动性能cup（即英文“cursormotion
capability”的字头缩写）指标，就会得到这样个参数化结果“E[%p1%d;%p2%dH”。
这个性能指标需要两个参数，即光标将要移到那里去的行号和列号。这两个坐标都是从0开
始计算的，（0.0）表示屏幕的左上角。
用tparm函数可以把性能指标中的参数替换为实际的数值。一次最多可以替换九个参数，它
返回的是一个可用的escape转义序列。
#include 
char *tparm(char *csp, long p1, long p2, ., long p9);
向终端输出控制字持串
用tparm函数构造好终端的转义序列之后、我们还必须把它送往终端。要想正确地完这一
工作，就不能简单地用printf函数向终端发送字符串。必须使用系统为我们提供的下面这几个函
数才行，它们能安排好终端完成某项操作所必要的延时。这些函数是：
#include 
int putp(char *conat atr);
int tputs(char *const stt, int affcnt,int (*putfunc)(int)))
如果成功，putp将返回“OK”；失败时返回“ERR”，putp函数以终端控制字符串为参数，
把它发送到stdout去。
如果想把光标移动到第五行，第30列，我们需要使用如下所示的这段代码：
char *esc_sequence;
cursor = tigetstz(*cup*):
:(aouenbesosa)dnd
esc_sequence = tparm(cursor,5,30):
tputs函数是为不能通过stdout访问终端的情况准备的，它允许我们指定一个用来输出控制字
符串的函数。它返回的是用户指定的字符串输出函数putfunc的返回结果。affcnt参数的用途是限
制这-变化所影响的输出行数，它一般被设置为“1”。用来输出控制字符串的函数其参数和返
回值必须与putchar函数完全一致。事实上，“put(string）”就相当于“tputs（string，1,putchar)”调
用。我们稍后会看到tputs使用用户指定的输出函数进行工作的例子。
读者使用的是这样的版本，就要在下面的“动手试试”里修改char_to_terminal函数的定义：
读者在使用手册页里壹阅tparm和终端性能指标的有关资料时，可能会看到一个名
加入jaVa编程群：524621833
---
## Page 172
154
Linux程序设计
为tgoto的函数。显而易见，用这个函数来移动光标要更容易一些，但载们并没有使用
它。原因是在1997年版的X/Open技术规范（Single UNIXSpecification Version2）里浸
有包括这些个函数。所以我们建议大家在断程序里最好不要使用这些函数。
往我们的菜单选择函数里添加屏幕处理功能的准备工作已经基本就绪。就剩下清屏这件事
还没提到，这个操作很简单，使用性能指标clear就行。clcar会把光标放到屏幕的左上角，但有
些终端不支持这种用法。在这种情况下，我们可以先把光标放到屏幕的左上角，再用“删除到
显示内容尾”命令ed完成操作。
把上面这些内容总结在一起，我们来编写菜单程序示例的最终版本screenmenu.c，我们将通
过这个程序把菜单选项“画”在屏幕上供用户选择。
动手试试：终端控制总动员
我们将重新编写menu4.c程序里的getchoice函数.由此终端将完全处在我们的掌握之中。在
下面的程序清单里，我们省略了main函数，因为不需要对它进行修改。而与menu4.c不一致的地
方都用灰色块标记出来了。
include 
include 
#include ctermios.hx
include 
#include 
char *menu(] ={
'a- add new reccrd*,
d- delete record*.
NULL.
q-quit',
1 :
int getchoice(char *greet, char *choices[1,FILg *in,PILg *out):
int char_to_terminal(int char_to_write) :
int nain()
int getchoice(char *greet, char *choices[1. FIL& *in. FILe *out)
int chosen =0;
int screenrow,screencol = 10;
int selected;
char *cursor,*clear;
char **option;
:no e rea2sqndano
setupterm(MULL.fileno(out),（int *)0);
clear = tigetstr[*clear*}:
tputs(clear, 1,（int *) char_co_tezminal);
screenrow =4;
tputs(tparm(cursor, screenrow, screencol),1.char_to_terminal):
fprintf（out,*Choice:s*,greet):
加入jaVa编程群：524621833
---
## Page 173
第5章终端
155
screenrow += 2;
while(*option)（
optian  choices;
tputs(tparm(cursor,screenrow,screencol).1,char_to_terminal);
++o
option++;
do {
selected =fgetc（in):
while(*option)(
option = choices;
if(selected*cption[0]){
chosen = 1:
break;
option++;
if{1chosen)(
tputs(tparm（cursor.screenrow,screencol),1.char_to_terminal);
fprintf（out,*Incorrect choice，select again\n*);
}while(1chosen):
tputs(clear, 1, char_to_terminal):
return selected;
int char_to_terminal(int char_to_write)
if (output_stream) putc(char_to_write,output_stream);
return 0;
操作注释：
经过重新编写的getchoice函数实现的是前面各示例程序所实现的同一个菜单，但我们对它
的屏幕输出部分做了进一步加工，使它能够充分利用上terminfo性能指标。在提示用户进行下一
次选择之前会有一个清屏操作，如果你想在清屏之前让“Youhavechosen：”信息多停留一会儿，
可以在main函数里增加一个slcep调用。如下所示：
do 
choiee = getchoice(*Please select an action*.nenu,input. output):
printt(\nYou have chosen:c\n*,choicel:
}while (choice ↓=‘q');
sleep(1):
这个程序里的最后一个函数是char_to_terminal，它里面有一个putc函数。对这个函数的介绍
请参考第3章内容。
为了让这一章有个圆满的结局，我们再给大家介绍一个对击键动作进行检测处理的程序示例。
5.5检测键盘输入
曾经为MS-DOS编写过程序的人们经常会在UNIX里寻找一个与kbhit函数对等的东西，这个
函数会在没有实际进行读操作的前提下检测某个键是否被按过了。寻找它的努力是徒劳的、因
操作系统，它的程序很少忙于等待某个事件的发生。kbhit最主要的用途就是等待击键动作的发
生，这在UNIX里是很少见的事。
加入java编程群：524621833
---
## Page 174
156
Linux程序设计
但如果需要移植MS-DOS下的程序.有个kbhit函数的翻版用着也会挺方便的。我们可以用
非授权输人模式来实现它。
动手试试：键盘击键监测程序kbhit
1）程序的开始是标准的程序头和为终端设置值而定义的几个结构。peek_character变量用来
控制对击键动作的检测。然后我们对程序里将要用到的几个函数进行了预定义：
include 
include 
include 
#include 
static struct termios initial_settings.new_settings;
include 
static int peek_character = -1;
void init_keyboard();
void close_keyboard():
int kbhit():
int readch(1;
2)main函数先调用init_keyboard配置好终端，然后每隔-秒循环调用一次kbhit检测有无击
键动作。如果按下的是“q”键，就调用close_keyboard恢复正常的行为并退出程序。
int nain()
int ch = 0;
init_keyboard();
while(ch 1='q'）（
printf(°1ooping\n):
sleep(1):
if (kbhit (})(
printf(*you hit e\n*,ch);
ch = readch():