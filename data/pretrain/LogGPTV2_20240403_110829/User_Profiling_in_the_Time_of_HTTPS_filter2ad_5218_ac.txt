### Profiling and Eavesdropping in HTTPS-Protected Environments

#### True and False Positives
The profiler assigns categories to a user. If a category in \( c(p_{ij}) \) is assigned, it is considered a true positive. Conversely, any category not in \( c(p_{ij}) \) that the profiler assigns is a false positive.

#### Basic Eavesdropper
The basic eavesdropper, as described in Section 3, learns \( w_i \) from the `client_hello` message sent by the user's browser and assigns the categories of the main page \( c(p_{i0}) \) to the user. However, due to HTTPS, the baseline profiling system cannot determine which specific page \( p_{ij} \) was visited.

We denote the true positives and false positives as \( T_i \) and \( F_i \), respectively. The equations for these are:
- \( T_i = |c(p_{i0}) \cap c(p_{ij})| \)
- \( F_i = |c(p_{ij}) \setminus c(p_{i0})| \)

#### Advanced Eavesdropper
The advanced eavesdropper, discussed in Section 4, attempts to infer the page \( p_{ij} \) the user has fetched by analyzing the encrypted traffic trace. This is achieved using a classifier trained on a snapshot of \( w_i \). As shown previously, the freshness of the snapshot used to train the classifier impacts its accuracy.

We denote the expected number of true positives and false positives with a classifier that is \( t_i \) epochs stale as \( T_i^{t_i} \) and \( F_i^{t_i} \), respectively. The equations for these are:
- \( T_i^{t_i} = \sum_{j=0}^{s_i} \pi(p_{ij}) + \sum_{l=0, l \neq j}^{s_i} \pi(p_{ij}, p_{il}) |c(p_{ij}) \cap c(p_{il})| \)
- \( F_i^{t_i} = \sum_{j=0}^{s_i} \pi(p_{ij}) |c(p_{ij}) \setminus c(p_{i0})| + \sum_{l=0, l \neq j}^{s_i} \pi(p_{ij}, p_{il}) |c(p_{il}) \setminus c(p_{ij})| \)

Here, \( \pi(p_{ij}, p_{il}) \) denotes the probability of predicting page \( p_{il} \) as \( p_{ij} \), which depends on the freshness of the classifier.

#### Bandwidth Budget and Classifier Refresh
Given the expected number of true and false positives, we set \( B \) as the bandwidth budget available to the eavesdropper at every epoch, and \( b_i \) as the bandwidth required to refresh the classifier for website \( w_i \). We also denote \( u_i \) as the popularity of website \( w_i \) (i.e., the number of users visiting \( w_i \) in an epoch).

At each epoch, the eavesdropper decides to spend the budget \( B \) by training classifiers on fresh snapshots of a subset \( X \) of the monitored websites. If website \( w_i \) is included in \( X \), the available budget is reduced by \( b_i \), and the expected number of correct categories assigned is \( u_i \cdot T_i^0 \), while the expected number of miss-assigned categories is \( u_i \cdot F_i^0 \). If website \( w_i \) is not included in \( X \), the budget remains untouched, and the expected number of correctly assigned and mis-assigned categories is \( u_i \cdot T_i^{t_i} \) and \( u_i \cdot F_i^{t_i} \), respectively, assuming the most recent classifier for \( w_i \) is \( t_i \) epochs stale.

The selection of \( X \) aims to maximize the number of true positives and minimize the number of false negatives while respecting the available budget. The optimization problem can be formulated as:
\[ \text{Maximize} \sum_{i \in X} u_i (T_i^0 - F_i^0) \]
\[ \text{Subject to} \sum_{i \in X} b_i \leq B \]

If a classifier is never trained on \( w_i \), we fall back to the profiling technique of the naive eavesdropper, where the number of true positives is \( u_i \cdot |c(p_{i0})| \) and the number of false positives is \( |c(p_{i0})| \).

This problem resembles the well-known 0/1 knapsack problem, with the difference that items not selected add a non-zero value to the total gain.

#### Toy Example
To illustrate the workings and the value of the above optimization, we conducted a simulation based on 15 websites from previous sections. We empirically assessed the training bandwidth requirements and probabilities of the confusion matrices, while using Alexa to obtain the popularity of each website.

In Figure 7, a black box marks a domain selected for re-training on a particular day. We show which domains get classified every day under two different budgets: 500MB and 2GB, representing 10% and 40%, respectively, of the budget needed to re-classify all sites every day.

We observe that bandwidth availability strongly affects the daily classification pattern. With a 500MB budget, the same set of websites gets picked for classification every day. In the case of a 2GB budget, different websites compete for the available budget, resulting in a varying selection pattern. The actual resulting pattern depends on the interplay between website popularity, size, and content dynamicity.

For a larger example with 200 pages, we observed substantial differences in profiling performance between optimizing only once versus optimizing every day in more complex settings.

### Conclusions
To the best of our knowledge, this study is the first to demonstrate that network eavesdroppers can profile user interests despite HTTPS. Even off-the-shelf traffic classification algorithms can guess the page a user is viewing. Caching and dynamic content tailored to device capabilities make the effort harder, but the obtained accuracy remains high. We believe that more specialized classification algorithms, coupled with careful optimization of classification bandwidth, can yield accurate and scalable user profiling even in more complex settings.

### Acknowledgments
We are grateful to Juan Miguel Carrascosa, Ruben Cuevas, and Costas Iordanou for helpful comments and discussions. We also thank anonymous reviewers and our shepherd for their valuable comments and suggestions. This work has been partially supported by the European Union through the FP7 METRICS (607728), H2020 TYPES (653449), and ReCRED (653417) Projects.