# 【漏洞分析】Github企业版远程代码执行漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：exablue
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：170RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
眼下，几乎人人都在使用GitHub。如果您有大量的绿皮书或者对自己的代码非常偏执，那么不妨运行自己的GitHub。支付$
2500美元，就可以得到一个GitHub企业版，可供10个用户使用一年。实际上，Github企业版就是一个虚拟机，只不过提供了一个功能齐全的GitHub实例而已。尽管有一些边缘的情况下偶尔用到了GitHub.enterprise？调用，但是它运行的是与原始代码库一样的代码库。
所以，让我们干掉它。
**代码的反混淆处理**
当您下载Github企业版时，将会得到一个VirtualBox镜像，你可以将其部署到自己的机器上面。我通过启动随机恢复镜像考察机器的内部情况时，在/data目录里找到了GitHub的代码：
    data
    ├── alambic
    ├── babeld
    ├── codeload
    ├── db
    ├── enterprise
    ├── enterprise-manage
    ├── failbotd
    ├── git-hooks
    ├── github
    ├── git-import
    ├── gitmon
    ├── gpgverify
    ├── hookshot
    ├── lariat
    ├── longpoll
    ├── mail-replies
    ├── pages
    ├── pages-lua
    ├── render
    ├── slumlord
    └── user
不幸的是，这些代码是经过混淆处理的，大部分看起来像这样：
    require "ruby_concealer"
    __ruby_concealer__ "xFFxB3/xDFHx8AxA7xBF=UxEDx91yxDAxDBxA2qV "
原来，有一个名为ruby_concealer.so的ruby模块，会对二进制字符串执行Zlib :: Inflate ::
inflate，然后利用密钥“This obfuscation is intended to discourage GitHub Enterprise
customers from making modifications to the VM. We know this 'encryption' is
easily broken”进行XOR运算。就像密钥文字所提示的那样，这的确非常用以破解。现在，我们就通过以下工具对代码进行反混淆处理：
    #!/usr/bin/ruby
    #
    # This tool is only used to "decrypt" the github enterprise source code.
    #
    # Run in the /data directory of the instance.
    require "zlib"
    require "byebug"
    KEY = "This obfuscation is intended to discourage GitHub Enterprise customers "+
    "from making modifications to the VM. We know this 'encryption' is easily broken. "
    class String
      def unescape
        buffer = []
        mode = 0
        tmp = ""
        # https://github.com/ruby/ruby/blob/trunk/doc/syntax/literals.rdoc#strings
        sequences = {
          "a"  => 7,
          "b"  => 8,
          "t"  => 9,
          "n"  => 10,
          "v"  => 11,
          "f"  => 12,
          "r"  => 13,
          "e"  => 27,
          "s"  => 32,
          """ => 34,
          "#"  => 35,
          "\" => 92,
          "{"  => 123,
          "}"  => 125,
        }
        self.chars.each do |c|
          if mode == 0
            if c == "\"
              mode = 1
              tmp = ""
            else
              buffer  "_gh_manage",
      :path         => "/",
      :expire_after => 1800, # 30 minutes in seconds
      :secret       => ENV["ENTERPRISE_SESSION_SECRET"] || "641dd6454584ddabfed6342cc66281fb"
实际上，它在内部完成的工作只有一件，那就是：
**将会话数据序列化为cookie**
当这个Rack应用程序完成时，Rack :: Session :: Cookie将使用下面展示的算法将会话数据保存到Cookie中：
取得应用程序放在env [“rack.session”]的会话哈希值（{“user_id”=> 1234，“admin”=> true}或类似的东西）
运行Marshal.dump将这个ruby哈希值转换为字符串
对生成的字符串进行Base64编码
并附加已经用密钥进行了加盐的数据哈希值，以防止篡改。
将结果保存到_gh_manage cookie中。
对来自cookie的会话数据进行反序列化处理
让我们通过一个例子来仔细考察反序列化的过程：为了从cookie加载数据，Rack :: Session ::
Cookie需要执行相应的操作。例如，将cookie设置为下面的值。
    cookie = "BAh7B0kiD3Nlc3Npb25faWQGOgZFVEkiRTRhYjMwYjIyM2Y5MTMzMGFiMmJj%0AMjdiMDI1O"+
    "WY1ODkxMzA2OGNlMGVmOTM0ODA1Y2QwZGRiZGQwYTM3MTEwNzgG%0AOwBGSSIPY3NyZi50b2tlbgY7AFR"+
    "JIjFKMzgrbExpUnpkN3ZEazZld1N1eUhY%0AcjQ0akFlc3NjM1ZFVzArYjI3aWdNPQY7AEY%3D%0A--5e"+
    "b02d2e1b1845e9f766c2282de2d19dc64d0fb9"
它根据“- -”对字符串进行拆解，处理反向url转义，并使用base64对结果进行解码，从而得到最终的二进制数据和签名。
    data, hmac = cookie.split("--")