### Stable 和 Immutable 函数

**定义与特性:**
- **Stable** 和 **Immutable** 函数在函数内部不允许修改数据。对于 PostgreSQL 版本 8.0 及以上，这些函数内不可执行非 `SELECT` 或 `PERFORM` 语句。
- 使用相同的参数调用时，它们会返回相同的结果。
- 在事务中，具有这种特性的函数被归类为 `STABLE`。

**优化器的行为:**
- 优化器可以根据实际场景优化 `STABLE` 函数的调用次数，即多次使用相同参数调用可以减少为单次调用。
- `STABLE` 和 `IMMUTABLE` 函数可用于帮助优化器选择合适的索引扫描，因为索引扫描仅评估一次表达式，随后多次与索引值进行比较。

**创建函数索引:**
- 仅 `IMMUTABLE` 函数可以用于创建函数索引；`STABLE` 和 `VOLATILE` 函数则不能。

**快照处理:**
- 对于 `STABLE` 和 `IMMUTABLE` 函数，其快照来自于外部调用该函数的 `QUERY` 的快照，并且在整个函数执行过程中保持不变，不受外部会话带来的数据变更影响。

### 函数稳定性小结
- **IMMUTABLE:**
  - 不允许修改数据，使用相同的参数调用返回相同的结果。
  - 优化器在处理 `IMMUTABLE` 函数时，先评估函数结果并将其替换为常量。
  - 因此，在约束优化查询场景中也只识别 `IMMUTABLE` 函数。

- **STABLE 与 IMMUTABLE 的区别:**
  - `STABLE` 函数在 `SELECT` 和 `WHERE` 子句中不被优化，只有当使用索引扫描时，`WHERE` 子句中的 `STABLE` 函数才会被优化为单次调用。
  - 在预编译语句 (`prepared statement`) 中：
    - `IMMUTABLE` 函数在计划阶段以常量替代，而在执行阶段直接使用该常量。
    - `STABLE` 函数在每次执行时都被重新计算。
  - 因此，如果 `IMMUTABLE` 函数的参数是常量，则在预编译语句场景下只会执行一次，而 `STABLE` 函数会被多次执行。
  - 函数的稳定性可以通过查看 `pg_proc.provolatile` 字段来确定。

### PostgreSQL MVCC (多版本并发控制)

**MVCC 原理:**
- **事务隔离级别:** 控制不同事务之间的可见性规则。
- **并发控制:** 确保多个事务同时访问数据库时的一致性和完整性。
- **锁机制:** 用于管理对数据行的访问权限，防止冲突。
- **死锁处理:** 通过检测和解决循环等待情况来避免系统停滞。

**关键概念:**
- **XID (Transaction ID):** 数据库中每个事务的唯一标识符。
- **Tuple Head (元组头部):** 包含 `xmin` 和 `xmax` 字段，分别表示插入和删除（或锁定）记录的事务 XID。
- **Xid_snapshot:** 当前集群中未完成的事务集合。
- **CLOG (Commit Log):** 记录事务提交状态的日志文件。

**数据可见性条件:**
1. 记录的头部 XID 信息比当前事务更早。（适用于可重复读或序列化隔离级别，但不适用于已提交读）
2. 记录的头部 XID 信息不在当前的 XID_snapshot 中。（即记录上的事务状态不是未提交的状态）
3. 记录头部的 XID 信息在 CLOG 中显示为已提交。

**更新和删除操作:**
- 更新和删除数据时，并不会直接移除行的数据，而是更新行头部信息中的 `xmax` 和 `infomask` 掩码。
- 事务提交后，更新当前数据库集群的事务状态和 `pg_clog` 中的事务提交状态。

**示例:**
- **会话1:**
  ```sql
  digoal=# truncate iso_test;
  TRUNCATE TABLE
  digoal=# insert into iso_test values (1, 'test');
  INSERT 0 1
  digoal=# begin;
  BEGIN
  digoal=# update iso_test set info='new' where id=1;
  UPDATE 1
  ```

- **会话2:**
  ```sql
  digoal=# select ctid, xmin, xmax, * from iso_test where id=1;
  ctid | xmin | xmax | id | info
  -------+-----------+-----------+----+------
  (0,1) | 316732572 | 316732573 | 1 | test
  (1 row)
  ```

### 事务隔离级别测试

**脏读 (Dirty Read):**
- 在一个事务中可以读取到其他未提交的事务产生的或更改的数据。
- PostgreSQL 不支持 `READ UNCOMMITTED` 事务隔离级别，因此无法测试。

**不可重复读 (Non-Repeatable Read):**
- 在一个事务中，再次读取前面 SQL 读过的数据时，可能会读取到不同的数据（例如其他事务在此期间已提交的数据）。
- 使用 `READ COMMITTED` 事务隔离级别进行测试。

**幻象读 (Phantom Read):**
- 在一个事务中，再次执行同样的 SQL 查询，得到的结果可能不一致。
- 标准 SQL 事务隔离级别（如 PostgreSQL 的 `REPEATABLE READ` 隔离级别）不会产生幻象读。

**测试案例:**

1. **不可重复读测试:**
   ```sql
   digoal=# create table iso_test(id int, info text);
   digoal=# insert into iso_test values (1, 'test');
   digoal=# begin isolation level read committed;
   BEGIN
   digoal=# select * from iso_test where id=1;
   id | info
   ----+------
   1 | test
   (1 row)
   -- 其他会话更新这份数据，并提交。
   digoal=# update iso_test set info='new' where id=1;
   -- 不可重复读出现。
   digoal=# select * from iso_test where id=1;
   id | info
   ----+------
   1 | new
   (1 row)
   ```

2. **幻象读测试:**
   ```sql
   digoal=# begin isolation level read committed;
   digoal=# select * from iso_test;
   id | info
   ----+------
   1 | new
   (1 row)
   -- 其他会话新增数据
   digoal=# insert into iso_test values (2, 'test');
   -- 幻象读出现
   digoal=# select * from iso_test;
   id | info
   ----+------
   1 | new
   2 | test
   (2 rows)
   ```

3. **使用 `REPEATABLE READ` 避免不可重复读和幻象读:**
   ```sql
   digoal=# delete from iso_test;
   digoal=# insert into iso_test values (1, 'test');
   digoal=# begin isolation level repeatable read;
   digoal=# select * from iso_test where id=1;
   id | info
   ----+------
   1 | test
   (1 row)
   -- 其他会话修改数据，并提交
   digoal=# update iso_test set info='new' where id=1;
   -- 未出现不可重复读现象。
   digoal=# select * from iso_test where id=1;
   id | info
   ----+------
   1 | test
   (1 row)
   -- 其他会话新增数据。
   digoal=# insert into iso_test values (2, 'test');
   INSERT 0 1
   -- 未出现幻象读
   digoal=# select * from iso_test ;
   id | info
   ----+------
   1 | test
   (1 row)
   ```

4. **`REPEATABLE READ` 情景案例:**
   - 当 `REPEATABLE READ` 事务尝试更新或删除在事务过程中已被其他事务变更过的数据时，将报错并回滚。
   ```sql
   digoal=# truncate iso_test;
   digoal=# insert into iso_test values (1, 'test');
   digoal=# begin isolation level repeatable read;
   digoal=# select * from iso_test;
   id | info
   ----+------
   1 | test
   (1 row)
   -- 其他事务更新或者删除这条记录，并提交。
   digoal=# update iso_test set info='new' where id=1;
   UPDATE 1
   -- 在 `REPEATABLE READ` 事务中更新或者删除这条记录。会报错回滚
   digoal=# update iso_test set info='tt' where id=1;
   ERROR: could not serialize access due to concurrent update
   digoal=# rollback;
   ROLLBACK
   ```

5. **获取锁后再处理行上的数据:**
   - 会话1:
     ```sql
     digoal=# truncate iso_test;
     TRUNCATE TABLE
     digoal=# insert into iso_test values (1, 'test');
     INSERT 0 1
     digoal=# begin;
     BEGIN
     digoal=# update iso_test set id=id+1 returning id;
     id
     ----
     2
     (1 row)
     UPDATE 1
     ```
   - 会话2:
     ```sql
     digoal=# select * from iso_test;
     id | info
     ----+------
     1 | test
     (1 row)
     digoal=# delete from iso_test where id=1; -- 等待 ctid=(0,1) 的行 exclusive 锁
     -- 会话1 提交事务
     digoal=# end;
     COMMIT
     -- 会话2 此时会话2等待的这条 ctid(0,1) 已经被会话1删除了（如果会话2是 `REPEATABLE READ` 模式的话这里会报错）。
     DELETE 0
     digoal=# select * from iso_test;
     id | info
     ----+------
     2 | test
     (1 row)
     ```

6. **Serializable 隔离级别:**
   - 目标是模拟串行化的隔离级别事务的提交顺序转换为串行的执行顺序。
   - 示例:
     ```sql
     Start transaction a serializable
     Start transaction b serializable
     Session a -> SQL …
     Session b -> SQL …
     Session a|b -> SQL …
     …. Session a|b -> SQL …
     Commit b
     Commit a
     ```
   - 这个场景模拟成:
     ```sql
     Start transaction b ssi
     Sql …
     Commit b
     Start transaction a ssi
     Sql … 如果会话a扫描过的数据在B中被加ssi锁, 那么a会话将提交失败.
     Commit a
     ```
   - PostgreSQL 通过加载预锁（内存中的一种弱冲突锁）来实现串行事务隔离级别，这种锁只在事务结束时判断是否有数据依赖性的冲突。

**执行计划:**
- 由于涉及到扫描的数据，这种锁与 `SELECT * FROM tbl WHERE a=1;` 有关。
- 如果没有索引，则需要全表扫描，加载的预锁是表级别的预锁。
- 如果期间有其他串行事务对这个表有任何变更（包括插入、删除、更新等），并且先提交，则会话结束时会发现预加锁的数据被其他串行事务变更，从而导致提交失败。