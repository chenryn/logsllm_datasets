# 运行验收测试
我们可以使用根项目目录中的 Docker Compose 命令在本地运行测试:
```
$ docker-compose -f docker-compose.yml -f acceptance/docker-compose-acceptance.yml -p acceptance up -d --build
```
该命令使用两个 Docker Compose 配置来运行`acceptance`项目。其中一个启动的容器应该被称为`acceptance_test_1`，并对其结果感兴趣。我们可以使用以下命令检查其日志:
```
$ docker logs acceptance_test_1
 %   Total %   Received % Xferd Average Speed Time 
 100 1     100 1        0 0     1       0     0:00:01
```
日志显示`curl`命令已被成功调用。如果我们想检查测试是成功还是失败，我们可以检查容器的退出代码:
```
$ docker wait acceptance_test_1
0
```
`0`退出代码表示测试成功。除了`0`之外的任何代码都意味着测试失败。测试完成后，我们应该一如既往地拆除环境:
```
$ docker-compose -f docker-compose.yml -f acceptance/docker-compose-acceptance.yml -p acceptance down
```
# 更改验收测试阶段
作为最后一步，我们可以将验收测试执行添加到管道中。让我们用一个新的**验收测试**阶段来替换 Jenkins 文件中的最后三个阶段:
```
stage("Acceptance test") {
    steps {
        sh "docker-compose -f docker-compose.yml 
                   -f acceptance/docker-compose-acceptance.yml build test"
        sh "docker-compose -f docker-compose.yml 
                   -f acceptance/docker-compose-acceptance.yml 
                   -p acceptance up -d"
        sh 'test $(docker wait acceptance_test_1) -eq 0'
    }
}
```
这一次，我们首先构建`test`服务。无需构建`calculator`形象；前几个阶段已经完成了。最后，我们应该清理环境:
```
post {
    always {
        sh "docker-compose -f docker-compose.yml 
                   -f acceptance/docker-compose-acceptance.yml 
                   -p acceptance down"
    }
}
```
将此添加到 Jenkinsfile 后，我们就完成了第二种方法。我们可以通过将所有更改推送到 GitHub 来测试这一点。
# 比较方法 1 和方法 2
总而言之，让我们比较两种解决方案。第一种方法是从用户角度进行真正的黑盒测试，其中 Jenkins 扮演用户的角色。优点是非常接近生产中要做的事情；最终，我们将通过它的 Docker 主机访问容器。第二种方法从另一个容器内部测试应用。该解决方案在某种程度上更优雅，可以以简单的方式在本地运行；但是，它需要创建更多的文件，并且不会像稍后在生产中那样通过 Docker 主机调用应用。
在下一节中，我们将远离 Docker 和 Jenkins，更深入地了解编写验收测试的过程。
# 编写验收测试
到目前为止，我们使用`curl`命令来执行一套验收测试。这显然是相当大的简化。从技术上来说，如果我们编写一个 REST web 服务，那么我们可以将所有的黑盒测试编写成一个大脚本，并带有许多“curl”调用。然而，这个解决方案很难阅读、理解和维护。此外，该脚本对于非技术、业务相关的用户来说是完全不可理解的。如何解决这个问题并创建具有良好结构、用户可读的测试，并满足其基本目标:自动检查系统是否如预期的那样？我将在这一部分回答这个问题。
# 编写面向用户的测试
验收测试是与用户一起编写的，用户应该能够理解。这就是为什么选择一种方法来编写它们取决于客户是谁。
例如，想象一个纯粹的技术人员。如果您编写了一个优化数据库存储的 web 服务，并且您的系统只被其他系统使用，并且只被其他开发人员读取，那么您的测试可以用与单元测试相同的方式来表示。一般来说，如果开发人员和用户都理解，测试是好的。
在现实生活中，大多数软件都是为了交付特定的商业价值而编写的，而商业价值是由非开发人员定义的。因此，我们需要一种共同的语言来协作。一方面，企业知道需要什么，但不知道如何去做；另一方面，知道如何但不知道什么的开发团队。幸运的是，有许多框架可以帮助连接这两个世界，例如，黄瓜、FitNesse、jbehavior、水豚等等。它们彼此不同，每一个都可能是单独一本书的主题；但是，编写验收测试的一般思路是相同的，可以在下图中显示:
![](img/8b572c5e-b2b1-4f86-90b2-a2d60f6f42fc.png)
**验收标准**由用户(或产品所有者作为其代表)在开发人员的帮助下编写。它们通常以下列场景的形式编写:
```
Given I have two numbers: 1 and 2
When the calculator sums them
Then I receive 3 as a result
```
开发人员编写名为**夹具**或**步骤定义**的测试实现，将人性化的 DSL 规范与编程语言集成在一起。因此，我们有一个自动化测试，可以很好地集成到持续交付管道中。
不用说，编写验收测试是一个持续的敏捷过程，而不是瀑布式的过程。它需要持续的协作，在此期间，开发人员和业务部门都要改进和维护测试规范。
In the case of an application with a user interface, it can be tempting to perform the acceptance testing directly via the interface (for example, by recording Selenium scripts); however, this approach when not done properly can lead to tests that are slow and tightly coupled to the interface layer.
让我们看看编写验收测试在实践中的样子，以及如何将它们绑定到持续交付管道。
# 使用验收测试框架
让我们使用黄瓜框架，为计算器项目创建一个验收测试。如前所述，我们将分三步进行:
*   创建验收标准
*   创建步骤定义
*   运行自动化验收测试
# 创建验收标准
让我们将业务规范放在`src/test/resources/feature/calculator.feature`中:
```
Feature: Calculator
    Scenario: Sum two numbers
        Given I have two numbers: 1 and 2
        When the calculator sums them
        Then I receive 3 as a result
```
这个文件应该由用户在开发人员的帮助下创建。请注意，它是以非技术人员可以理解的方式编写的。
# 创建步骤定义
下一步是创建 Java 绑定，以便特性规范可以执行。为此，我们创建一个新文件`src/test/java/acceptance/StepDefinitions.java`:
```
package acceptance;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.springframework.web.client.RestTemplate;
import static org.junit.Assert.assertEquals;
/** Steps definitions for calculator.feature */
public class StepDefinitions {
    private String server = System.getProperty("calculator.url");
    private RestTemplate restTemplate = new RestTemplate();
    private String a;
    private String b;
    private String result;
    @Given("^I have two numbers: (.*) and (.*)$")
    public void i_have_two_numbers(String a, String b) throws Throwable {
        this.a = a;
        this.b = b;
    }
    @When("^the calculator sums them$")
    public void the_calculator_sums_them() throws Throwable {
        String url = String.format("%s/sum?a=%s&b=%s", server, a, b);
        result = restTemplate.getForObject(url, String.class);
    }
    @Then("^I receive (.*) as a result$")
    public void i_receive_as_a_result(String expectedResult) throws Throwable {
        assertEquals(expectedResult, result);
    }
}
```
特性规范文件中的每一行(`Given`、`When`、`Then`)都通过正则表达式与 Java 代码中的相应方法进行匹配。通配符`(.*)`作为参数传递。注意，服务器地址是作为 Java 属性`calculator.url`传递的。该方法执行以下操作:
*   `i_have_two_numbers`:将参数保存为字段
*   `the_calculator_sums_them`:调用远程计算器服务，并将结果存储在字段中
*   `i_receive_as_a_result`:断言结果如预期
# 运行自动化验收测试
要运行自动化测试，我们需要进行一些配置:
1.  **添加 Java 黄瓜库**:在`build.gradle`文件中，将以下代码添加到`dependencies`部分:
```
        testCompile("info.cukes:cucumber-java:1.2.4")
        testCompile("info.cukes:cucumber-junit:1.2.4")
```
2.  **添加渐变目标**:在同一个文件中，添加如下代码:
```
       task acceptanceTest(type: Test) {
            include '**/acceptance/**'
            systemProperties System.getProperties()
       }
       test {
            exclude '**/acceptance/**'
       }
```
这将测试分为单元测试(用`./gradlew test`运行)和验收测试(用`./gradlew acceptanceTest`运行)。
3.  **添加 JUnit runner** :添加新文件`src/test/java/acceptance/AcceptanceTest.java`:
```
        package acceptance;
        import cucumber.api.CucumberOptions;
        import cucumber.api.junit.Cucumber;
        import org.junit.runner.RunWith;
        /** Acceptance Test */
        @RunWith(Cucumber.class)
        @CucumberOptions(features = "classpath:feature")
        public class AcceptanceTest { }
```
这是验收测试套件的入口点。
完成此配置后，如果服务器在本地主机上运行，我们可以通过执行以下代码来测试它:
```
$ ./gradlew acceptanceTest -Dcalculator.url=http://localhost:8080
```
显然，我们可以将这个命令添加到我们的`acceptance_test.sh`中，而不是`curl`命令。这将使黄瓜验收测试在 Jenkins 管道中运行。
# 验收测试驱动的开发
与持续交付过程的大多数方面一样，验收测试不太关注技术，更多的是关注人。当然，测试质量取决于用户和开发人员的参与度，但是，更不直观的是，创建测试的时间。
最后要问的问题是，在软件开发生命周期的哪个阶段应该准备验收测试？或者换句话说，我们应该在编写代码之前还是之后创建验收测试？
从技术上讲，结果是一样的；代码涵盖了单元测试和验收测试。然而，首先考虑编写测试是很有诱惑力的。测试驱动开发的思想可以很好地适用于验收测试。如果单元测试是在代码之前编写的，那么结果代码会更干净，结构也更好。类似地，如果验收测试是在系统特性之前编写的，那么最终的特性更符合客户的需求。这个过程通常被称为验收测试驱动开发，如下图所示:
![](img/432d2a13-c759-4399-b9c4-452689af60fe.png)
用户和开发人员一起用人性化的 DSL 格式编写验收标准规范。开发人员编写夹具，测试失败。然后，特性开发开始在内部使用 TDD 方法。功能完成后，验收测试应该通过，这是功能完成的标志。
一个非常好的做法是在问题跟踪工具中将黄瓜特性规范附加到请求单上(例如，JIRA)，这样特性将总是与其验收测试一起被请求。一些开发团队采取更激进的方法，如果没有准备好验收测试，他们拒绝开始开发过程。很有道理，毕竟*怎么能开发出客户测试不到的东西呢？*
# 练习
我们在本章中介绍了许多新材料，因此为了更好地理解，我们建议进行练习并创建您自己的带有验收测试的项目:
1.  创建一个基于 Ruby 的网络服务`book-library`来存储书籍:
验收标准以以下黄瓜特征的形式交付:
```
Scenario: Store book in the library
Given: Book "The Lord of the Rings" by "J.R.R. Tolkien" with ISBN number  
"0395974682"
When: I store the book in library
Then: I am able to retrieve the book by the ISBN number
```
2.  将“图书库”作为 Docker 映像添加到 Docker 注册表中:
3.  创建 Jenkins 管道来构建 Docker 映像，将其推送到 Docker 注册表，并执行验收测试:
# 摘要
在本章中，您学习了如何构建一个完整的功能性验收测试阶段，这是持续交付过程中必不可少的一部分。这一章的重点是:
*   验收测试可能很难创建，因为它们将技术挑战(应用依赖性、环境设置)与个人挑战(开发人员-业务协作)结合在一起。
*   验收测试框架提供了一种用人类友好的语言编写测试的方法，使得非技术人员可以理解它们。
*   Docker 注册表是 Docker 映像的工件存储库。
*   Docker 注册表非常适合持续交付流程，因为它提供了一种在整个阶段和环境中使用完全相同的 Docker 映像的方法。
*   Docker Compose 编排了一组交互在一起的 Docker 容器。它还可以构建映像和缩放容器。
*   Docker Compose 可以在运行一套验收测试之前帮助建立一个完整的环境。
*   验收测试可以写成 Docker 映像，Docker Compose 可以与测试一起运行整个环境并提供结果。
在下一章中，我们将介绍完成持续交付管道所需的缺失阶段。