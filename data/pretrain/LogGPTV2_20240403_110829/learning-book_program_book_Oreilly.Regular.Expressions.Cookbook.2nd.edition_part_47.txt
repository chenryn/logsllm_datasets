and lowercase letters:
·regular_expressions
*regular_expression
·regexps
*xegexp
·xegexes
·regexen
*regex
See Also
Recipe 5.1 explains how to find a specific word. Recipe 5.2 explains how to find any
of multiple words. Recipe 5.4 explains how to find all except a specific word.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.6 explains word boundaries.
Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
5.4FindAll ExceptaSpecificWord
Problem
You want to use a regular expression to match any complete word except cat.
Catwoman, vindicate, and other words that merely contain the letters “cat” should be
matchedjust not cat.
340 | Chapter 5: Words, Lines, and Special Characters
---
## Page 357
Solution
A negative lookahead can help you rule outspecific words, and is key to this next regex:
\b(?!cat\b)\w+
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Although a negated character class (written as  [ ^.- J) makes it easy to match anything
except a specific character, you can’t just write  surrounding the second part of this regex is a negative lookahead. Look-
ahead tells the regex engine to temporarily step forward in the string, to check whether
the pattern inside the lookahead can be matched just ahead of the current position. It
does not consume any of the characters matched inside the lookahead. Instead, it
merely asserts whether a match is possible. Since we're using a negative lookahead, the
result of the assertion is inverted. In other words, if the pattern inside the lookahead
can be matched just ahead, the match attempt fails, and regex engine moves forward
to try all over again starting from the next character in the subject string. You can find
much more detail about lookahead (and its counterpart, lookbehind) in Recipe 2.16.
As for the pattern inside the lookahead, the \+> matches one or more nonword char-
acters, such as whitespace and punctuation, that appear before cat, The word bound-
ary at the end of the lookahead ensures that we skip only words not followed by cat as
a complete word, rather than just any word starting with cat.
Note that this regular expression even matches the word cat, as long as the subsequent
word is not also cat. If you also want to avoid matching cat, you could combine this
(q\↓e>+\i)q+m\(q\ei)q\> um dn pua o1 g adoy u auo a qptm xa8a
Variations
If you want to only match words that are followed by cat (without including cat and
its preceding nonword characters as part of the matched text), change the lookahead
from negative to positive, then turm your frown upside-down:
b+\b(=\w+cat\b)
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See Also
Recipe 5.4 explains how to find all except a specific word. Recipe 5.6 explains how to
find any word not preceded by a specific word.
5.5 Find Any Word Not Followed by aSpecific Word | 343
---
## Page 360
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe  2.3
6explains character classes. Recipe 2.6 explains word boundaries.
Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround.
5.6FindAnyWordNotPrecededbyaSpecificWord
Problem
You want to match any word that is not immediately preceded by the word cat, ignoring
any whitespace, punctuation, or other nonword characters that come between.
Solution
Lookbehind you
Lookbehind lets you check if text appears before a given position. It works by instruct-
ing the regex engine to temporarily step backward in the string, checking whether
something can be found ending at the position where you placed the lookbehind. See
Recipe 2.16 if you need to brush up on the details of lookbehind.
The following regexes use negative lookbehind, (?) and the pattern that
comes after it ( at the end because the positive lookbehinds already ensure that any match is
preceded by a nonword character. The last regex (which adds support for Ruby 1.9)
wraps its rwo positive lookbehinds in (?:·I--)), since only one of the lookbehinds
can match at a given position.
PCRE 7.2 and Perl 5.10 support the fancy  is consumed by the match even though it is not
included in the match result. You can see this difference by comparing the results of
the regexes with \K and positive lookbehind when they’re applied to the subject string
cat cat cat cat. In Perl and PHP, if you replace all matches of (? with
dogo, you'll get the result cat dog dog dog, since only the first word is not itself pre-
the result will be cat dog cat dog. After matching the leading cat_cat (and replacing
ceded by cat. If you use the regex <\bcat\w+\K\w+) to perform the same replacement,