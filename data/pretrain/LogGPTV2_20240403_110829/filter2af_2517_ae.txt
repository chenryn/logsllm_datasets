    `041cd3fe 488d4802        lea     rcx,[rax+2]
    `041cd402 f0480fb18d78010000 lock cmpxchg qword ptr [rbp+178h],rcx
    `041cd40b 0f8535200500    jne     nt! ?? ::NNGAKEGL::`string'+0x2a7d6 (`0421f446)
    `041cd411 488bcd          mov     rcx,rbp
    `041cd414 e8d70ad2ff      call    nt!ObfReferenceObject (`03eedef0)
    `041cd419 488b442470      mov     rax,qword ptr [rsp+70h]
    `041cd41e 488b942488000000 mov     rdx,qword ptr [rsp+88h]
    `041cd426 4c8d9c24a0000000 lea     r11,[rsp+0A0h]
    `041cd42e 4d8bce          mov     r9,r14
    `041cd431 458ac4          mov     r8b,r12b
    `041cd434 4c895c2458      mov     qword ptr [rsp+58h],r11
    `041cd439 4889442450      mov     qword ptr [rsp+50h],rax
    `041cd43e 488d442468      lea     rax,[rsp+68h]
    `041cd443 4889442448      mov     qword ptr [rsp+48h],rax
    `041cd448 488d442460      lea     rax,[rsp+60h]
    `041cd44d 488bcd          mov     rcx,rbp
    `041cd450 4889442440      mov     qword ptr [rsp+40h],rax
    `041cd455 488b8424e0020000 mov     rax,qword ptr [rsp+2E0h]
    `041cd45d 4889442438      mov     qword ptr [rsp+38h],rax
    `041cd462 488b8424d8020000 mov     rax,qword ptr [rsp+2D8h]
    `041cd46a 4889442430      mov     qword ptr [rsp+30h],rax
    `041cd46f 4c897c2428      mov     qword ptr [rsp+28h],r15
    `041cd474 4c896c2420      mov     qword ptr [rsp+20h],r13
    `041cd479 e836010000      call    nt!PspAllocateThread (`041cd5b4)
    kd> dq [rsp+50h] l1
    fffff880`04286070  fffff880`04286310
    kd> dq fffff880`04286310 l4
    fffff880`04286310  00000000`00000000 00000000`00000000
    fffff880`04286320  fffff880`00000000 00000144`00000000
观察上面的执行路径不难发现传递给 PspAllocateThread 函数的第 11 个参数来自 PspCreateThread 函数的
[rsp+2E8h] 第 14 个参数，而在当前函数中没有进行任何修改和取值访问。
而在 NtCreateThreadEx 函数中由于虚拟化设置问题暂时无法进行单步追踪。所以通过 IDA 对其汇编代码进行分析，再加上通过
PspAllocateThread 函数返回后的上下文，对运行现场的环境进一步的追踪：
    `403701DF loc_1403701DF:
    `403701DF    mov     [rsp+748h+var_6D8], bl
    `403701E3    mov     rax, [rsp+748h+arg_40]
    `403701EB    mov     [rsp+748h+var_6C8], rax
    `403701F3    mov     rax, [rsp+748h+arg_48]
    `403701FB    mov     [rsp+748h+var_6C0], rax
    `40370203    mov     rax, [rsp+748h+arg_38]
    `4037020B    mov     [rsp+748h+var_6D0], rax
    `40370210    mov     [rsp+748h+var_6B8], ebx
    `40370217    xor     edx, edx        ; Val
    `40370219    mov     r8d, 150h       ; Size
    `4037021F    lea     rcx, [rsp+748h+var_198] ; Dst
    `40370227    call    memset
    `4037022C    test    rdi, rdi
    `4037022F    jz      short loc_140370285
    `40370231    mov     rax, gs:188h
    `4037023A    lea     r9, [rsp+748h+var_198]
    `40370242    mov     r8d, 1
    `40370248    mov     dl, [rax+1F6h]
    `4037024E    mov     rcx, rdi
    `40370251    call    PspBuildCreateProcessContext
    `40370256    test    eax, eax
    `40370258    js      loc_140370396
    `4037025E    lea     rax, [rsp+748h+var_70]
    `40370266    bt      dword ptr [rsp+748h+var_198], 0Ch
    `4037026F    cmovnb  rax, rbx
    `40370273    mov     rbx, rax
    `40370276    bt      dword ptr [rsp+748h+var_198], 0Eh
    `4037027F    jb      loc_1403C8D38
    `40370285
    `40370285 loc_140370285:
    `40370285    mov     [rsp+748h+var_638], 10000Bh
    `40370290    mov     rax, cs:PspUserThreadStart
    `40370297    mov     [rsp+748h+var_570], rax
    `4037029F    mov     rax, [rsp+748h+arg_20]
    `403702A7    mov     [rsp+748h+var_5E8], rax
    `403702AF    mov     rax, [rsp+748h+arg_28]
    `403702B7    mov     [rsp+748h+var_5E0], rax
    `403702BF    mov     ecx, 2Bh
    `403702C4    mov     [rsp+748h+var_62E], cx
    `403702CC    mov     [rsp+748h+var_62C], cx
    `403702D4    lea     eax, [rcx+28h]
    `403702D7    mov     [rsp+748h+var_62A], ax
    `403702DF    mov     [rsp+748h+var_628], cx
    `403702E7    mov     [rsp+748h+var_626], cx
    `403702EF    lea     eax, [rcx+8]
    `403702F2    mov     [rsp+748h+var_630], ax
    `403702FA    mov     ecx, 1F80h
    `403702FF    mov     [rsp+748h+var_634], ecx
    `40370306    mov     eax, 27Fh
    `4037030B    mov     [rsp+748h+var_568], ax
    `40370313    mov     [rsp+748h+var_550], ecx
    `4037031A    lea     rax, [rsp+748h+var_6D8]
    `4037031F    mov     [rsp+748h+var_6E0], rax
    `40370324    and     [rsp+748h+var_6E8], 0
    `4037032A    and     [rsp+748h+var_6F0], 0
    `40370330    mov     dword ptr [rsp+748h+var_6F8], r12d ; __int64
    `40370335    lea     rax, [rsp+748h+var_6A8]
    `4037033D    mov     [rsp+748h+var_700], rax ; __int64
    `40370342    lea     rax, [rsp+748h+var_668]
    `4037034A    mov     [rsp+748h+var_708], rax ; __int64
    `4037034F    mov     rax, qword ptr [rsp+748h+var_190]
    `40370357    mov     qword ptr [rsp+748h+var_710], rax ; int
    `4037035C    mov     qword ptr [rsp+748h+var_718], rbx ; int
    `40370361    lea     rax, [rsp+748h+var_198]
    `40370369    mov     [rsp+748h+var_720], rax ; __int64
    `4037036E    and     [rsp+748h+var_728], 0
    `40370374    mov     r9, r15         ; __int64
    `40370377    mov     r8, r14         ; __int64
    `4037037A    mov     edx, r13d       ; __int64
    `4037037D    mov     rcx, rsi        ; PVOID
    `40370380    call    PspCreateThread
上面的反汇编指令片段是在 IDA 中截取的。根据汇编代码显示，[rsp+748h+var_6E0] 是传入 PspCreateThread 函数的第 14
个参数。其取值为 [rsp+748h+var_6D8] 局部变量的地址。var_6D8 是位于栈上的一个结构体对象，需要关注的是其中 +10
偏移的域，在稍早时候对结构体赋初值，这个域由第 9 个参数 [rsp+748h+arg_40] 赋值。
    `403701DF    mov     [rsp+748h+var_6D8], bl
    `403701E3    mov     rax, [rsp+748h+arg_40]
    `403701EB    mov     [rsp+748h+var_6C8], rax
由第 9 个参数赋初值，那就说明这个值是由 NtCreateThreadEx 的调用者传入的。该函数原型如下：
    NTSTATUS
    NTAPI
    Handle_SSDT_NtCreateThreadEx(
        OUT PHANDLE                  ThreadHandle,
        IN  ACCESS_MASK              DesiredAccess,
        IN  POBJECT_ATTRIBUTES       ObjectAttributes,
        IN  HANDLE                   ProcessHandle,
        IN  LPTHREAD_START_ROUTINE   StartAddress,
        IN  LPVOID                   Parameter,
        IN  BOOL                     CreateSuspended,
        IN  ULONG                    StackZeroBits,
        IN  ULONG                    SizeOfStackCommit,
        IN  ULONG                    SizeOfStackReserve,
        OUT LPVOID                   BytesBuffer
    );
第 9 个参数是 SizeOfStackCommit，但我在 Hook 处理函数中监控这个参数，它的值始终是处于正常范围的数值，从未出现前面分析中的
0xFFFFF88000000000 这样的数据。突然注意到在 Hook 处理函数中调用原函数时对栈上的参数进行赋值的代码：
    `050721af 488b8424d0000000 mov     rax,qword ptr [rsp+0D0h]
    `050721b7 4889442450       mov     qword ptr [rsp+50h],rax
    `050721bc 8b8424c8000000   mov     eax,dword ptr [rsp+0C8h]
    `050721c3 89442448         mov     dword ptr [rsp+48h],eax
    `050721c7 8b8424c0000000   mov     eax,dword ptr [rsp+0C0h]
    `050721ce 89442440         mov     dword ptr [rsp+40h],eax
    `050721d2 8b8424b8000000   mov     eax,dword ptr [rsp+0B8h]
    `050721d9 89442438         mov     dword ptr [rsp+38h],eax
    `050721dd 8b8424b0000000   mov     eax,dword ptr [rsp+0B0h]
    `050721e4 89442430         mov     dword ptr [rsp+30h],eax
    `050721e8 488b8424a8000000 mov     rax,qword ptr [rsp+0A8h]
    `050721f0 4889442428       mov     qword ptr [rsp+28h],rax
    `050721f5 488b8424a0000000 mov     rax,qword ptr [rsp+0A0h]
    `050721fd 4889442420       mov     qword ptr [rsp+20h],rax
    `05072202 4c8b8c2498000000 mov     r9,qword ptr [rsp+98h]
    `0507220a 4c8b842490000000 mov     r8,qword ptr [rsp+90h]
    `05072212 8b942488000000   mov     edx,dword ptr [rsp+88h]
    `05072219 488b8c2480000000 mov     rcx,qword ptr [rsp+80h]
    `05072221 ff542468         call    qword ptr [rsp+68h]
上面代码中 mov dword ptr [rsp+40h], eax 这条指令对 SizeOfStackCommit
参数进行传值。在传值之前我无意中看了一下 rsp+40h 地址的原值：
    kd> dq [rsp+40h] l1
    fffff880`0310ea30  fffff880`0310ea98
原来如此，由于 Hook 处理函数和原函数指针类型定义失误，将这个参数定义成了 ULONG32 类型，所以在传参时只通过 eax 进行赋值，栈上的参数位置高
32 位被忽略并保持原值；但在实际的 NtCreateThreadEx 函数中，应是将这个参数作为 ULONG_PTR 进行解析，在 64 位下应是
ULONG64 宽度，所以将参数中没有清零的高 32 位也作为参数值的一部分了，这就最终导致了前面的错误状态码。而这次的错误和虚拟化无关。
真是一次坑爹的分析。
* * *