file为一般文件
-g file
file有设置它的setgid位
-h file
file是一符号连接
-L file
file是一符号连接（等同于-h）
-n string
string是非null
p file
file是一命名的管道（FIFO文件）
-r file
file是可读的
-S file
f1le是socket
-s file
file不是空的
-t n
文件描述符n指向一终端
-u file
file有设置它的 setuid位
- file
file是可写入的
-x file
file是可执行的，或file是可被查找的目录
-z.string
string为null
81:= 82
字符串s1与82相间
s1 != :82
字符串s1与s2不相同
n2 -eq n2
整数n1等于n2
nI -ne n2
整数n1不等于n2
nl -1t n2
n1小于n2
nl -gt n2
n1大于n2
n1 -1e n2
n1小于或等于n2
n2-ge n2
n1大于或等于n2
也可以测试否定的结果，只需前置！字符即可。下面是测试运行的范例：
if [ -f “$file* ]
then
elif [ -d *sfile* ]
echo $file is a regular file
then
echo $file is a directory
f1
if [1 -x *$fle* ]
then
echo $file is NOT executable
fi
www.TopSage.com
---
## Page 153
变量、判断、重复动作
141
在XSI兼容的系统里，test版本是较为复杂的。它的表达式可以与-a（作逻辑的AND）
与-o（作逻辑的OR）结合使用。-a的优先级高于-0，而=与！=优先级则高于其他的
二元运算符。在这里，也可以使用圆括号将其语句括起来以改变计算顺序。
注意：在使用-a和-o（它们是test运算符）与6s和1：（它们是Shell运算符）之间是有一个
差异点。
if [ -n *$str*-a -f *sfile*]
一个test命令，两种条件
[#1#$。3-19[x28$。u-1
两个命令，以快捷方式计算
if [ -n *$str* && -f *sfile* ]
语法错误，见内文
第一个案例，test会计算两种条件。而第二个案例，Shell执行第一个test命令，且只
有在第一个命令是成功的情况下，才会执行第二个命令。最后一个案例，bs为Shel1运算
符，所以它会终止第一个test命令，然后这个命令会抱想它找不到结束的】字符，且以
失败的值退出。即使tost可以成功地退出，接下来的检查还是会失败，因为Shell（最有
可能）找不到一个名为-f的命令。
ksh93与bash都支持一些额外的测试功能。在14.3.2节里有更多的相关信息。
POSIX的test算法介绍如表6-7所示。
表6-7：POSIX的test算法
参数
参数位
结果
0
退出状态为伪（1）
1
如果 $1 非 null
退出状态为真（0）
如果$1为null
退出状态为伪（1）
2
如果$1为！
否定单一参数到试的结果，S2
如果$1为一元运算符
运算符的测试结果
其他情况
未定义
如果$2为二元运算符
运算符的测试结果
如果$1为！
否定双参数测试的结果，S2$3
如果$1是（且$3是）
单一参数测试的结果，S2（XSD)
其他情况
未定义
如果S1为！
否定三个参数测试的结果，$2$3$4
如果S1是（且S4是）
两参数测试的结果，$2$3（XSI)
其他情况
未定义
> 4
未定义
www.TopSage.com
---
## Page 154
142
第6常
网
为了可移植性；POSIX标准里建议对多重条件使用Shell层级测试，而非使用a与-o运OIm1
算符（我们也建议这么用）。举例如下：
then
SEile存在且为一般文件，但不可写入
echo $0: $file is not writable, giving up. >&2
exit 1
fi
下面是几个使用test的诀窍：
需有参数
由于这个原因，所有的Shell变量展开都应该以引号括起来，这样test才能接受
一个参数一即使它已变为null字符串。例如：
if[-fsfile]...
if[-t sfile ]...
正确
不正确
在第二种情况下，万一$file恰巧是空的，则test接收到的参数会少于它所需
要的，这将引发无法预料的奇怪行为。
字符串比较是很微妙的
特别是字符串值为空，或是开头带有一个减号时，test命令就会被混淆。因此有
了一种比较难看不过广为使用的方式：在字符串值前置字母x（x的使用是随意的，
但这是传统用法）。
[，soAx.xnsuesx.]31
你会看到这种方式出现在许多Shell脚本中，事实上POSIX标准里的所有范例都是
这么用。
将所有参数以引l号括起来的算法仅适用于test，而这种算法在test的现代版本
里是足够的，即使第一个参数的开头字符为减号也不会有问题，因此我们已经很少
需要在新的程序里使用前置X的方式了，不过，如果可移植性最大化远比可读性重
要，或许使用前置X的方式比较好（我们有时还是会这么做）。
test是可以披愚弄的
当我们要检查通过网络加载的文件系统访问时，就有可能将加载选项与文件权限相
结合，以欺骗test，使其认为文件是可读取的，但事实是：操作系统根本就不让
你访间这个文件。所以尽管：
test -r a_file s& cat a_file
在理论上应该一定可行，但实际上会失败（注2）。针对这一点你可以微的就是加上
一些其他层面的防御程序：
注 2:
Mike Hacrtel指出这种做法一直都不是百分百的可靠：a_file可能会在执行test与
执行cat之间的处理期间修改。
www.TopSage.com
---
## Page 155
变量、判断、重复动作
143
if test -r a_file && cat a_file
then
# cat worked, proceed on
else
 attempt to recover, issue an error sogsage, etc,
fi
只能作整数数字测试
你不能使用te8t做任何的浮点数算术运算，所有的数字测试只可处理整数
（ksh93认得浮点数字，但如果你在意可移植性的问题，最好就别用）。
例6-1给出了2.6节中finguser脚本的改良版，这个版本会测试S#，即命令行参数编
号，如果未提供，则显示错误信息。
例6-1：用以寻找用户的脚本，需提供usermame参数
1 /bin/ah
findaser--寻找是否有第一个参数所指定的用户登录
if [ $# -ne 1·]
then
echo Usage: finduser usernane >62
f1
exit 1
vho 1 grep $1
6.3
case语句
如果你需要通过多个数值来测试变量，可以将一系列if与eliE测试搭配est一起使
用：
if [*x$s1* = *x-f ]
then
elit*xs1*“x-d”]*xs1·-“x--directory”]#允许长速项
针对-f选项的程序代码
then
针对-d选项的程序代码
else
echo $1: unknown option >&2
fi
exit 1
不过这么做的时候写起来很不顺手，也很难阅读（在echo命令里的>&2，是传送输出
到标准错误，这部分将在7.3.2节讨论）.相对地，Shell的case结构应该用来进行模式
匹配：
www.TopSage.com
---
## Page 156
144
第6章
case $1 in
-f)
+ + *
针对-t选项的程序代码
-d|--directory）允许长速项
I 1
针对-4选项的程序代码
*1
echo $1: unknown opt 1on >&2
在“eBac”之前的：：：形式是一个好习惯，不过并非必要
exit 1
esac
这里我们看到，要测试的值出现在case与in之间。将值以双引l号括起来虽然井非必
要，但也无妨。要测试的值，根据Shell模式的列表依次副试，发现匹配的时候，便执
行相对应的程序代码，直至：：为止。可以使用多个模式，只要用1字符加以分隔即可，
这种情况称为“or（或）”，模式里会包含任何的Shell通配字符，且变量、命令与算术替
换会在它用作模式匹配之前在此值上被执行。
你可能会觉得在每个模式列表之后的不对称的右圆括号是有点奇怪，不过这也是Shell语
言里不对称定界符的唯一实例（instance）。（14.3.7节里，我们将看到bash与ksh确实
允许在模式列表前加上一个开头的“（"）。
最后的*模式是传统用法，但非必需的，它是作为一个默认的情况（case），这通常是在
你要显示诊断信息并退出时使用。正如我们前面提及的，最后一个情况（case）不再需
要结尾的：：，不过加上它，会是比较好的形式，
6.4循环
除了if与case语句之外，还有Shell的循环结构也是非常好用的工具。
6.4.1for循环
for循环用于重复整个对象列表，依次执行每一个独立对象的循环内容。对象可能是命
令行参数、文件名或是任何可以以列表格式建立的东西。在3.2.7.1节里，我们曾提过这
两行的脚本，用来更新一个XML文件：
mv at1ga.xm1 at1ga.xml o1d
sed s/Atlanta/6, the capital of the South/'  at1ga.xml
现在我们假定，比较可能出现的情况应该是拥有一些XML文件，再由这些XML文件集
结成小册子.在此情况下，我们要做的应该是改变所有这些XML文件。所以for循环
最适合这一情况：
www.TopSage.com
---
## Page 157
变量、判断、重复动作
for 1 in atibrochure*.xml
do
.com
echo $i
sed *s/Atlanta/&, the capital of the South/*  $i
mv $i $i.old
done
该循环将每个原始文件备份为副文件名为.old的文件，之后再使用sed处理文件以建
立新文件。这个程序也显示文件名，作为执行进度的一种指示，这在有许多文件要处理
时会有很大的帮助。
for循环里的in列表（list）是可选的，如果省略，Shell循环会遍历整个命令行参数。
这就好像你已经输人了foriin*Sθ"：