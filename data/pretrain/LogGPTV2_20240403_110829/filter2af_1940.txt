# 【技术分享】iOS版微信处理GIF表情不当导致闪退分析

##### 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

作者：[ **shrek_wzw@360 Nirvan Team**](http://bobao.360.cn/member/contribute?uid=2577449118)  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 一、背景情况
自5月17日起，一款天线宝宝的GIF表情在多个微信群中广泛传播。用户发现，在iOS版微信中打开包含该GIF表情的聊天窗口会导致微信闪退。初步猜测可能的原因包括：
1. iOS系统自带的GIF解析功能存在问题；
2. 微信自行实现的GIF解析功能存在输入数据校验不严格的问题。

经过测试，确认iOS版QQ不受影响，因此可以排除iOS系统自带GIF解析功能的问题。

## 二、原因分析

### 1. 样本精简
原始GIF样本大小约为1MB，不利于定位问题的具体位置。使用010 Editor打开并解析原始GIF文件时，出现了异常。通过GIF模板解析显示，在正常的38帧图像数据后，出现了一些异常数据（见图）。我们将正常数据移除，仅保留异常部分进行进一步精简。

剩余的异常数据量庞大，我们采用二分法逐步排除。具体操作是删除一半的数据后，测试剩下的部分是否仍能导致崩溃。如果崩溃，则说明异常数据在保留的一半中；否则，说明异常数据在已删除的部分中。

最终确定，异常数据位于下图所示的紫色区域。只要GIF图像数据中包含这些异常数据，就会导致iOS版微信闪退。

### 2. 调试分析
通过对样本的精简，我们已经找到了异常数据的位置。接下来，结合实际调试来确定具体的异常数据。以iOS微信6.5.7版本为例，崩溃发生时的调用栈如下，表明崩溃发生在微信内部，即微信自身的GIF解析功能存在问题。

通过逆向分析相关函数，我们确定了引起异常的数据。首先来看`sub_100B6CBF0`函数，它对GIF中的数据进行循环查找。如果找到`0x21`和`0xF9`，则表示当前数据是一个GraphicControlExtension结构，并继续解析GraphicControlExtension数据。

如果查找到的数据为`0x2C`，则表示找到了一个ImageDescriptor，跳出while循环并开始解析实际的图片数据。

**这就是异常数据的起始位置！**

正常的帧数据的ImageDescriptor如下：
```
ImageWidth: 非零值
ImageHeight: 非零值
```

而异常数据中恰好存在`0x2C`这个关键分隔符，导致以下红框中的数据被误解析为一个ImageDescriptor。可以看到，`ImageWidth`属性为0，`ImageHeight`属性为`0x100`。

这部分异常数据随后进入`sub_100B6CE90`函数进行解析。由于`ImageWidth`为0，导致与`ImageHeight`相乘后的结果也为0。在`new buffer`时传入的大小参数为0，这是第一个问题，但这并不会直接导致闪退，仍然可以分配一个很小的堆块。

真正的崩溃代码如下，在`else`块中，`sub_100B6C4F0`的作用没有具体跟踪，但猜测是进行LZW解压缩并返回解压缩后的数据长度`v21`。由于`v10 = 0x0000010000000000`，截断成`unsigned int`后为0，这就导致 `v10 – 1 – v21` 为负数，作为`memset`的第三个参数，相应的`unsigned int`形式就是一个很大的正数。在`memset`时，这将导致崩溃，这是第二个问题。

## 三、总结
这个问题的根本原因是微信实现了自己的GIF解析功能，但由于对输入数据的校验不严格，导致异常数据被解析并引发崩溃。

在5月17日当天，这款GIF开始流传后，微信似乎在服务器端做了屏蔽，使得该GIF无法被正常接收。然而，只需修改GIF中的任意一个字节，就能绕过这一屏蔽措施。由于iOS应用上架需要经过苹果审核，修复后的版本不能立即推送给所有用户。目前最新的iOS微信6.5.8版本仍然存在崩溃的问题。