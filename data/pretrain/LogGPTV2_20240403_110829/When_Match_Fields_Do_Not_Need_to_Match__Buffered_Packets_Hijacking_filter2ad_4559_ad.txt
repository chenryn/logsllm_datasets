)
···
(cid:123)(cid:122)
j(cid:89)
ˆfi,j(z) = (
fi,k(tk − tk−1)·
fr,k(tj+k−1 − tj+k) · fr,c(tj+c−1 − z) · j+c−1(cid:89)
j+c−1
k=1
(8)
dtk
Here, t0 = 0. Then, Equation 6 can be represented as follows:
k=1
pinter(ar,c, ai,j) = P (Zi,j < 0)
(cid:90) 0
=
−∞
ˆfi,j(z)dz·
(9)
Obviously, the above equation, i.e., pinter, depends on the
following variables:
r ∈ {1, 2, ..., m} and c ∈ {1, 2, .., nr}
i ∈ {1, 2, ..., m} and c ∈ {1, 2, .., ni}
(10)
r, c,
i, j,
αr,k, βr,k, k ∈ {1, c}
αi,k, βi,k, k ∈ {1, j}
We can see that the hijacking probability in this scenario not
only depends on the positions of the malicious and target
applications, but also depends on the processing delays of
other applications that are prior to the malicious application or
the target application. Moreover, Equation 8 and Equation 9
show that we can calculate the numerical results of the hijack-
ing probability for any malicious application and any target
application in different positions, as long as the distribution
of processing delays are measured. In the next section, we’ll
verify the correctness of our theoretical analysis by conducting
experiments with real SDN processing chains.
VI. ATTACK EVALUATION
In this section, we conduct experiments in a real SDN
testbed to demonstrate the feasibility and effectiveness of the
attacks that exploit the buffered packet hijacking vulnerability.
A. Experiment Setup
We build a real SDN testbed consisting of commercial
hardware switches, EdgeCore AS4610-54T [32], and an open
source SDN controller, Floodlight [17]. As we mentioned in
Table II, all mainstream SDN controllers we investigated are
vulnerable to buffered packet hijacking. For simplicity but
8
Fig. 8: The two longest processing chains in our experiments.
The number is the position where a malicious application can
attach to hijack buffered packets.
without loss of generality, we choose the Floodlight SDN
controller to conduct our experiments since it is popular and
a Java-based controller similar to most controllers. We deploy
the controller on a server with a quad-core Intel Xeon CPU
E5504 and 32GB RAM. We attach physical hosts to switches
so as to send and receive network ﬂows. Each host runs Ubuntu
16.04 LTS and has a quad-core Intel i3 CPU and 4GB RAM.
To build processing chains, we run all SDN applications
speciﬁed in a default Floodlight conﬁguration ﬁle, i.e., ﬂood-
lightdefault.properties [33]. According to our analysis on the
conﬁguration ﬁle, most processing chains contain one or two
applications. The longest processing chain consists of four ap-
plications, i.e., Topology Manager [34], Device Manager [35],
Load Balancer [36], and Forwarding [37]. However, as we
mentioned in Section V,
the hijacking probability heavily
depends on the positions of the malicious application and
the target application. Thus, we build another long processing
chain to better explore the hijacking probability for different
positions of the malicious application and the target appli-
i.e., DoS
cation. Speciﬁcally, we apply four applications,
Detection [38], ARP Proxy [39], Hub [40], and Learning
Switch [41], to form the processing chain.
Figure 8 shows the two longest processing chains that
contain eight SDN applications in total. The functionalities
of these applications range from basic network service, such
as providing network topology with Topology Manager, and
network optimizations, such as balancing ﬂows across multiple
servers with Load Balancer, to advanced network security
enhancement, such as detecting malicious ﬂows with DoS
Detection. For their detailed functionality description, we refer
the readers to the links [34], [35], [36], [37], [38], [39], [40],
[41]. In our experiments, we focus on the hijacking probability
and attack effectiveness with the two longest processing chains.
We implement and run a malicious application to hijack
buffered packets with the two processing chains.
B. Hijacking Probability
To comprehensively explore the hijacking probability, we
attach the malicious application in different positions of the
two processing chains shown in Figure 8. Among all
the
eight applications in the two processing chains, only ﬁve
applications, i.e., DoS Detection, Hub, Learning Switch, Load
Balancer, and Forwarding, send FLOW_MOD messages to
install ﬂow rules and release buffered packets. Thus, we choose
the ﬁve applications as target applications to explore the
hijacking probability. To calculate the hijacking probability
with a target application, we use physical hosts to generate
10,000 new ﬂows. Each ﬂow triggers a PACKET_IN message
TABLE III: Intra-Chain and Inter-Chain Hijacking Probability
with Different Malicious Application’s Positions
(a) When the malicious application is in Processing Chain I.
Malicious
App’s
Position
Chain I: 0
Chain I: 1
Chain I: 2
Chain I: 3
Chain I: 4
Note
Hijacking Probability with a Target App
Learning
Switch
Load
Balancer
Forwarding
100.0%
100.0%
100.0%
100.0%
0
100.0%
90.0%
70.5%
68.5%
36.3%
Inter-Chain Hijacking
100.0%
91.7%
82.0%
80.9%
57.1%
DoS
Detection
100.0%
0
0
0
0
Hub
100.0%
100.0%
100.0%
0
0
Intra-Chain Hijacking
(b) When the malicious application is in Processing Chain II.
Malicious
App’s
Position
Chain II: 0
Chain II: 1
Chain II: 2
Chain II: 3
Chain II: 4
Hijacking Probability with a Target App
Load
Balancer
100.0%
100.0%
100.0%
0
0
Forwarding
DoS
Detection
100.0%
100.0%
100.0%
100.0%
0
89.3%
48.8%
33.3%
9.7%
8.3%
Hub
100.0%
92.2%
85.7%
30.6%
18.3%
Learning
Switch
100.0%
95.7%
93.9%
62.3%
41.9%
Note
Intra-Chain Hijacking
Inter-Chain Hijacking
and makes the target application send FLOW_MOD messages to
release buffered packets. Meanwhile, the malicious application
also receives the PACKET IN message and attempts to install
FLOW_MOD messages to hijack buffered packets that should be
processed by the target application. We count the number of
the ﬂows whose buffered packets are hijacked. The hijacking
probability is calculated through dividing that number by the
total number of ﬂows, i.e., 10,000. Table III shows the intra-
chain and inter-chain hijacking probabilities with different tar-
get applications when changing the positions of the malicious
application.
Intra-chain Hijacking Probability. We ﬁrst see the intra-
chain hijacking probability in Table III. When the malicious
application is in Processing Chain I, three target applications,
i.e., DoS Detection, Hub, and Learning Switch, can be hijacked
within the intra processing chain, which is shown in Table IIIa.
When it is in Processing Chain II, another two applications,
i.e., Load Balancer and Forwarding, can be hijacked within
the intra processing chain, which is shown in Table IIIb. From
the two tables, we can see that there are only two values of
the intra-chain hijacking probability, i.e., either 100.0% or 0.
As we mentioned in Section V, a malicious application can
successfully hijack buffered packets with the intra processing
chain if and only if it is in the front of the target application.
Thus, since DoS Detection is the ﬁrst application in Processing
Chain I, the hijacking probability with it achieves 100% only
when the malicious application is in the head of Processing
Chain I. However, it is much easier to hijack buffered packets
when the malicious application chooses Learning Switch or
Forwarding as the target application. It is because both the two
applications are in the tail of a processing chain. As shown in
Table III, the hijacking probability with any of them is always
100.0%, except in the case where the malicious application is
in the tail.
Inter-chain Hijacking Probability. It is obtained when the
9
Processing Chain IDoSDetectionARPProxyHubLearningSwitchProcessing Chain IITopologyManagerDevice ManagerLoadBalancerForwardingPACKET_IN0123401234Fig. 9: CCDF of Inter-Chain Hijacking Probability with Ran-
dom Positions of Target and Malicious Applications.
Fig. 10: Errors of Inter-Chain Hijacking Probability between
Theoretical and Experimental Results.
malicious application in a processing chain attempts to hi-
jack buffered packets that should be processed by a target
application in another processing chain. Different from the
intra-chain hijacking probability, it can possibly be any real
numbers ranging from 0 to 100%. The inter-chain hijacking
probability not only depends on relative positions of the
malicious application and the target application, but also is
signiﬁcantly affected by processing delays of other applications
in the front of the malicious or the target application. As we
can see in Table IIIa and Table IIIb, the hijacking probability
decreases when the malicious application moves toward the
tail of a processing chain. The largest hijacking probability is
100.0% for four of the ﬁve target applications. However, the
largest hijacking probability is 89.3% for DoS Detection. It is
because DoS Detection is in the head of Processing Chain I.
Compared to other target applications, there are more chances
for the malicious application to hijack buffered packets that
should be processed by DoS Detection. For the same reason,
when the malicious application is in the tail of a processing
chain, the inter-chain hijacking probability with DoS Detection
is the smallest, i.e., 8.3%. However, the inter-chain hijacking
probability with Load Balancer, Forwarding, Hub, and Learn-
ing Switch is 36.3%, 57.1%, 18.3%, and 41.9%, respectively.
The above results show that the malicious application at the
back has many chances to successfully hijack buffered packets
that are processed by a target application at the front.
Inter-Chain Hijacking Probability with Random Positions
of Target Apps. As we shown in Table III, the hijacking
probability is affected by the positions of the malicious appli-
cation and the target application. Particularly, the processing
delays of applications in the front of the malicious or the
target application have a remarkable impacts on the inter-
chain hijacking probability. We implement a Java script to
randomize the positions of the applications in the two pro-
cessing chains 1, i.e., each application is randomly assigned
to one of the eight positions in the two processing chains.
Moreover, we randomly insert the malicious applications into
the positions between two target applications. Figure 9 shows
the Complementary Cumulative Distribution Function (CCDF)
of inter-chain hijacking with random positions of target and
malicious applications. Here, we do not show the CCDF of
intra-chain hijacking probability since the intra-chain hijacking
1We ﬁnd that Load Balancer must be put behind Device Manager or be put
behind Topology Manager. Otherwise, Load Balancer cannot work properly.
Thus, we keep their relative orders when randomizing their positions.
probability is either 0 or 100%, which is straightforward.
As shown in Figure 9, the hijacking probability with any of
the ﬁve applications exceeds 80% in more than 30% cases
where the positions of applications are randomized. Moreover,
95% cases have a hijacking probability of more than 10%
regardless of which is the target application. Above results
demonstrate that a malicious application has many chances