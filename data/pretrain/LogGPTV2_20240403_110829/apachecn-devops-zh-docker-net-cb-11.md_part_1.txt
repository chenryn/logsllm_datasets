# 十一、Docker 网络故障排除
在本章中，我们将介绍以下食谱:
*   使用 tcpdump 验证网络路径
*   验证 VETH 对
*   验证发布的端口和出站伪装
*   验证名称解析
*   构建测试容器
*   重置本地 Docker 网络数据库
# 简介
正如我们在前面几章中看到的，Docker 利用相对知名的 Linux 网络结构的组合来交付容器网络。在本书中，我们已经了解了许多不同的配置、使用和验证 Docker 网络配置的方法。我们还没有做的是概述一个故障排除和验证方法，您可以在遇到问题时使用。排除容器网络故障时，了解并能够排除用于提供端到端连接的每个特定网络组件的故障非常重要。本章的目的是提供当您需要验证或排除 Docker 网络问题时可以采取的具体步骤。
# 使用 tcpdump 验证网络路径
虽然我们在前面的章节中浏览了它的用法，但是任何在基于 Linux 的系统上工作的人都应该对`tcpdump`感到满意。`tcpdump`允许您捕获主机上一个或多个接口上的网络流量。在本食谱中，我们将介绍如何在多种不同的 Docker 网络场景中使用`tcpdump`来验证容器网络流量。
## 做好准备
在本食谱中，我们将使用单个 Docker 主机。假设 Docker 已安装并处于默认配置。您还需要根级访问，以便检查和更改主机网络和防火墙配置。您还需要安装`tcpdump`实用程序。如果您的系统上没有它，您可以使用以下命令安装它:
```
sudo apt-get install tcpdump
```
## 怎么做…
`tcpdump`是一个惊人的故障排除工具。如果使用得当，它可以为您提供数据包在 Linux 主机上通过接口时的详细视图。为了演示，让我们在 Docker 主机上启动一个容器:
```
user@docker1:~$ docker run -dP --name web1 jonlangemak/web_server_1
ea32565ece0c0c22eace935113b6697bebe837f0b5ddf31724f371220792fb15
user@docker1:~$
```
因为我们没有指定任何网络参数，所以这个容器将在`docker0`桥上运行，并将任何公开的端口发布到主机接口。当流量流向外部网络时，从容器生成的流量也将隐藏在主机的 IP 接口后面。使用`tcpdump`，我们可以看到每个阶段的这个流量。
让我们首先检查进入主机的入站流量:
```
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker1:~$
```
在我们的例子中，这个容器暴露了端口`80`，该端口现在已经发布到端口`32768`上的主机接口。让我们首先确保流量通过正确的端口进入主机。为此，我们可以在主机`eth0`接口上捕获去往端口`32768`的流量:
```
user@docker1:~$ sudo tcpdump -qnn -i eth0 dst port 32768
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
15:46:07.629747 IP 10.20.30.41.55939 > 10.10.10.101.32768: tcp 0
15:46:07.629997 IP 10.20.30.41.55940 > 10.10.10.101.32768: tcp 0
15:46:07.630257 IP 10.20.30.41.55939 > 10.10.10.101.32768: tcp 0
```
为了使用`tcpdump`来捕获这个入站流量，我们使用了几个不同的参数:
*   `q`:这告诉`tcpdump`安静，或者不要产生那么多输出。因为我们真的只想看到第 3 层和第 4 层的信息，这就很好地清理了输出
*   `nn`:这告诉`tcpdump`不要尝试将 IP 解析为 DNS 名称。同样，我们想在这里看到 IP 地址
*   `i`:指定我们要捕捉的界面，这里是`eth0`
*   `src port`:告诉`tcpdump`过滤目的港为`32768`的流量
### 注
`dst`参数可以从该命令中删除。这样做将过滤掉端口为`32768`的任何流量，从而向您显示包括返回流量在内的整个流量。
如前面代码中的所示，我们可以看到主机在端口`32768`上的物理接口(`10.10.10.101`)上接收来自远程来源`10.20.30.41`的流量。在这种情况下，`10.20.30.41`是一个测试服务器，它向容器的发布端口发起流量。
现在我们已经看到了到达主机的流量，让我们看看它穿过`docker0`桥的情况:
```
user@docker1:~$ sudo tcpdump -qnn -i docker0
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on docker0, link-type EN10MB (Ethernet), capture size 65535 bytes
16:34:54.193822 IP 10.20.30.41.53846 > 172.17.0.2.80: tcp 0
16:34:54.193848 IP 10.20.30.41.53847 > 172.17.0.2.80: tcp 0
16:34:54.193913 IP 172.17.0.2.80 > 10.20.30.41.53846: tcp 0
16:34:54.193940 IP 172.17.0.2.80 > 10.20.30.41.53847: tcp 0
```
在这种情况下，我们只需在`docker0`桥接口上过滤就可以看到流量。不出所料，我们看到了相同的流量、相同的源，但由于发布的端口功能，现在反映了在容器中运行的服务的准确目的地 IP 和端口。
虽然这肯定是捕获流量最简单的方法，但如果您有多个容器在`docker0`桥上运行，效果就不是很好。当前的过滤将为您提供所有通过网桥的流量，而不仅仅是您正在寻找的特定容器。在这些情况下，您也可以在过滤器中指定 IP 地址，如下所示:
```
user@docker1:~$ sudo tcpdump -qnn -i docker0 dst 172.17.0.2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on docker0, link-type EN10MB (Ethernet), capture size 65535 bytes
16:42:22.332555 IP 10.20.30.41.53878 > 172.17.0.2.80: tcp 0
16:42:22.332940 IP 10.20.30.41.53878 > 172.17.0.2.80: tcp 0
```
### 注
我们在这里指定目的地 IP 作为过滤器。如果我们希望看到流量来源和目的地都是该 IP 地址，我们可以将`dst`替换为`host`。
这种数据包捕获对于验证像端口发布这样的功能是否如预期那样工作至关重要。可以对大多数接口类型进行捕获，包括那些没有关联 IP 地址的接口类型。这种接口的一个很好的例子是用于将容器命名空间连接回默认命名空间的 VETH 对的主机端。排除容器连接故障时，将到达`docker0`桥的流量与特定的主机端 VETH 接口相关联可能会很方便。我们可以通过关联来自多个地方的数据来做到这一点。例如，假设我们执行以下`tcpdump`:
```
user@docker1:~$ sudo tcpdump -qnne -i docker0 host 172.17.0.2
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on docker0, link-type EN10MB (Ethernet), capture size 65535 bytes
16:59:33.334941 02:42:ab:27:0e:3e > 02:42:ac:11:00:02, IPv4, length 66: 10.20.30.41.57260 > 172.17.0.2.80: tcp 0
16:59:33.335012 02:42:ac:11:00:02 > 02:42:ab:27:0e:3e, IPv4, length 66: 172.17.0.2.80 > 10.20.30.41.57260: tcp 0
```
请注意，在这种情况下，我们将`e`参数传递给了`tcpdump`。这告诉`tcpdump`显示每帧的源和目的 MAC 地址。在这种情况下，我们可以看到我们有两个 MAC 地址。其中一个是与`docker0`桥相关联的媒体访问控制地址，另一个是与容器相关联的媒体访问控制地址。我们可以查看`docker0`网桥信息来确定它的 MAC 地址是什么:
```
user@docker1:~$ ip link show dev docker0
4: docker0:  mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 02:42:ab:27:0e:3e brd ff:ff:ff:ff:ff:ff
user@docker1:~$
```
这就留下了地址`02:42:ac:11:00:02`。使用作为`iproute2`工具集一部分的桥接命令，我们可以确定该 MAC 地址位于哪个接口上:
```
user@docker1:~$ bridge fdb show | grep 02:42:ac:11:00:02
02:42:ac:11:00:02 dev vetha431055
user@docker1:~$
```
在这里，我们可以看到容器的 MAC 地址是通过名为`vetha431055`的接口访问的。在该界面上进行捕获将确认我们看到的是正确的界面:
```
user@docker1:~$ sudo tcpdump -qnn -i vetha431055
tcpdump: WARNING: vetha431055: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on vetha431055, link-type EN10MB (Ethernet), capture size 65535 bytes
21:01:24.503939 IP 10.20.30.41.58035 > 172.17.0.2.80: tcp 0
21:01:24.503990 IP 172.17.0.2.80 > 10.20.30.41.58035: tcp 0
```
`tcpdump`可以是验证容器通信的重要工具。明智的做法是花些时间了解该工具，以及使用其不同参数过滤流量的不同方式。
# 验证 VETH 对
在我们在本书中回顾的所有 Linux 网络结构中，VETH 对可能是最重要的。由于知道名称空间，它们允许您将唯一名称空间中的容器连接到任何其他名称空间，包括默认名称空间。虽然 Docker 为您处理了所有这些，但是能够确定 VETH 对的端点在哪里，并将它们关联起来，以确定 VETH 对的目的是什么，这是非常有用的。在这个食谱中，我们将深入回顾如何找到和关联 VETH 对的末端。
## 做好准备
在本食谱中，我们将使用单个 Docker 主机。假设 Docker 已安装并处于默认配置。您还需要根级访问，以便检查和更改主机网络和防火墙配置。
## 怎么做…
Docker 中 VETH 对的主要用例是将容器网络命名空间连接回默认网络命名空间。它通过将一对 VETH 放在`docker0`桥上，另一端放在容器中来实现。VETH 对的容器端获得一个分配给它的 IP 地址，然后重命名为`eth0`。
当寻找匹配容器的 VETH 对的末端时，有两种情况。第一种是从默认命名空间的末尾开始，第二种是从容器命名空间的末尾开始。让我们浏览一下每个案例，以及如何将它们关联在一起。