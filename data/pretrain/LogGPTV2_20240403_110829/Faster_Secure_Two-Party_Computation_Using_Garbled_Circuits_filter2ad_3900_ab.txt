tor) then obliviously computes the output of the circuit
without learning any intermediate values.
Starting with a Boolean circuit for f (which both par-
ties ﬁx in advance), the circuit generator associates two
random cryptographic keys w0
i with each wire i of the
circuit (w0
i encodes a 1-bit). Then,
for each binary gate g of the circuit with input wires i j
and output wire k, the generator computes ciphertexts
i w1
i encodes a 0-bit and w1
Enck
wbi
i w
b j
j
wgbib j
k
for all inputs bib j ࢠ 01. (See Section 3.4 for details
about the encryption used.) The resulting four cipher-
texts, in random order, constitute a garbled gate. The
collection of all garbled gates forms the garbled circuit
that is sent to the evaluator. In addition, the generator
reveals the mappings from output-wire keys to bits.
The evaluator must also obtain the appropriate keys
(that is, the keys corresponding to each party’s actual in-
put) for the input wires. The generator can simply send
wx1
1     wxn
n , the keys that correspond to its own input
where each wxi
i corresponds to the generator’s ith input
bit. The parties use oblivious transfer (see Section 2.2)
to enable the evaluator to obliviously obtain the input-
wire keys corresponding to its own inputs.
Given keys wiw j associated with both input wires i j
of some garbled gate, the evaluator can compute a key for
the output wire of that gate by decrypting the appropriate
ciphertext. As described, this requires up to four decryp-
tions per garbled gate, only one of which will succeed.
Using standard techniques [22], the construction can be
modiﬁed so a single decryption sufﬁces. Thus, given one
key for each input wire of the circuit, the evaluator can
compute a key for each output wire of the circuit. Given
the mappings from output-wire keys to bits (provided by
the generator), this allows the evaluator to compute the
actual output of f . If desired, the evaluator can then send
this output back to the circuit generator (as noted in Sec-
tion 1.2, sending the output back to the generator is a pri-
vacy risk unless the semi-honest model can be imposed
through some other mechanism).
Optimizations. Several optimizations can be applied
to the standard garbled circuits protocol, all of which
we use in our implementation. Kolensikov and Schnei-
der [18] introduce a technique that eliminates the need
to garble XOR gates (so XOR gates become “free”, in-
curring no communication or cryptographic operations).
Pinkas et al. [27] proposed a technique to reduce the size
of a garbled table from four to three ciphertexts, thus sav-
ing 25% of network bandwidth.2
2.2 Oblivious Transfer
One-out-of-two oblivious transfer (OT2
1) [5, 28] is a cru-
cial component of the garbled-circuit approach. An OT2
1
protocol allows a sender, holding strings w0w1, to trans-
fer to a receiver, holding a selection bit b, exactly one of
the inputs wb; the receiver learns nothing about w1ࢤb,
and the sender does not learn b. Oblivious transfer
has been studied extensively, and several protocols are
known. In our implementation we use the Naor-Pinkas
protocol [24], secure in the semi-honest setting. We also
use oblivious-transfer extension [14] which can achieve
a virtually unlimited number of oblivious transfers at the
cost of (essentially) k executions of OT2
1 (where k is a sta-
tistical security parameter) plus a marginal cost of a few
symmetric-key operations per additional OT. In our im-
plementation, the time for computing the “base” k  80
oblivious transfers is about 0.6 seconds, while the on-line
time for each additional OT2
1 is roughly 15 µs.
For completeness, we note that
there are known
oblivious-transfer protocols with stronger security prop-
erties [10], as well as techniques for oblivious-transfer
extension that are secure against malicious adver-
saries [9]. These could easily be integrated with our im-
plementation to provide the stronger privacy properties
2A second proposed optimization reduces the size by approximately
50%, but cannot be combined with the free-XOR technique.
for situations where the result does not go back to the
circuit generator as discussed in Section 1.2.
3
Implementation Overview
Our implementation allows programmers to construct
protocols in a high-level
language while providing
enough control over the circuit design to enable efﬁcient
implementations. The source code for the system and all
the applications described in this paper are available un-
der an open-source license from http://MightBeEvil.org.
Our code base is very small:
the main framework is
about 1500 lines of Java code, and a circuit library (see
Section 3.3) contains an additional 700 lines of code.
The main features of our framework that enable efﬁcient
protocols are its support for pipelined circuit execution
(Section 3.1) and the optimizations enabled by its circuit-
level representation that allow developers to minimize
the number of garbled gates needed (Section 3.2). Sec-
tion 3 describes our circuit library and how a programmer
deﬁnes a new circuit component. Section 3.4 describes
implementation parameters used in our experiments.
3.1 Pipelined Circuit Execution
The primary limitation of previous garbled-circuit imple-
mentations is the memory required to store the entire cir-
cuit in memory. There is no need, however, for either
the circuit generator or evaluator to ever hold the entire
circuit in memory. The circuit generation and evaluation
processes can be overlapped in time (pipelined), elim-
inating the need to ever store the entire garbled circuit
in memory as well as the need for the circuit generator
to delay transmission until the entire garbled circuit is
ready. In our framework, the processing of the garbled
gates is pipelined to avoid the need to store the entire cir-
cuit and to improve the running time. This is automated
by our framework, so a user only needs to construct the
desired circuit.
At the beginning of the evaluation both the circuit
generator and the circuit evaluator instantiate the cir-
cuit structure, which is known to both of them and is
fairly small since it can reuse components just like a non-
garbled circuit. When the protocol is executed, the gener-
ator transmits garbled gates over the network as they are
produced, in an order deﬁned by the circuit structure. As
the client receives the garbled gates, it associates them
with the corresponding gate of the circuit. Note that the
order of generating and evaluating the circuit does not
depend on the parties’ inputs (indeed, it cannot since that
would leak information about those inputs), so there is no
overhead required to keep the two parties synchronized.
The evaluator then determines which gate to evaluate
next based on the available output values and tables. Gate
evaluation is triggered automatically when all the neces-
sary inputs are ready. Once a gate has been evaluated it
is immediately discarded, so the number of truth tables
stored in memory is minimal. Evaluating larger circuits
does not signiﬁcantly increase the memory load on the
generator or evaluator, but only affects the network band-
width needed to transmit the garbled tables.
3.2 Generating Compact Circuits
To build an efﬁcient two-party secure computation pro-
tocol, a programmer ﬁrst analyzes the target applica-
tion to identify the components that need to be com-
puted privately. Then, those components are translated
to digital circuit designs, which are realized as Java
classes. Finally, with support from our framework’s core
libraries, the circuits are compiled and packaged into
server-side and client-side programs that jointly instan-
tiate the garbled-circuit protocol.
The cost of evaluating a garbled circuit protocol scales
linearly in the number of garbled gates. The efﬁciency
of our approach is due to the pipelined circuit execu-
tion technique described above, as well as several meth-
ods we use to minimize the number of non-XOR gates
that need to be evaluated. One way to reduce the num-
ber of gates is to identify parts of the computation that
only require private inputs from one party. These com-
ponents can be computed locally by that party so do not
require any garbled circuits. By designing circuits at the
circuit level rather than using a high-level language like
SFDL [22], we are able to take advantage of these op-
portunities (for example, by computing the key schedule
for AES locally; see Section 7). For the parts of the com-
putation that need to be done cooperatively, we exploit
several opportunities enabled by our approach to reduce
the number of non-XOR gates needed.
Minimizing bit width. To improve performance, our
circuits are constructed with the minimal width required
for the correctness of the programs. Our framework sup-
ports this by allowing most library circuits to be instan-
tiated with a parameter that speciﬁes the sizes of the in-
puts, a ﬂexibility that was not present in prior implemen-
tations of secure computation. For example, SFDL’s sim-
plicity encourages programmers to count the number of
1s in a 900-bit number by writing code that leads to a
circuit using 10-bit accumulators throughout the compu-
tation even though narrower accumulators are sufﬁcient
for early stages. The Hamming distance, Levenshtein
distance, and Smith-Waterman applications described in
this paper all reduce width whenever possible. This has
a signiﬁcant impact on the overall efﬁciency: for exam-
ple, it reduces the number of garbled gates needed for our
Levenshtein-distance protocol by 20% (see Section 5.2).
Fast table lookups. Constant-size lookup tables are fre-
quently used in real-world applications (e.g., the score
matrix for Smith-Waterman and the SBox for AES).
Such lookup tables can be efﬁciently implemented as a
single generalized m-to-n garbled gate, where m is num-
ber of bits needed to represent the index and n is the num-
ber of bits needed to represent each table entry. This,
in turn, can be implemented within as a garbled cir-
cuit using a generalization of the standard “permute-and-
encrypt” technique [22]. The advantage of this technique
is that the circuit evaluator only needs to perform a single
decryption operation to look up an entry in an arbitrarily
large table. On the other hand, the circuit generator still
needs to produce and transmit the entire table, so the cost
for the circuit generator and the bandwidth are high. If
the table entries have any structure there may be more
efﬁcient alternatives (see Section 7 for an example).
3.3 Circuit Library
Our framework includes a library of circuits deﬁned for
efﬁcient garbled execution. Applications can be built by
composing these circuits, but more efﬁcient implementa-
tions are usually possible when programmers deﬁne their
own custom-designed circuits.
The hierarchy of circuits is organized following the
Composite design pattern [6] with respect to the build()
method. Circuits are constructed in a modular fashion,
using Wire objects to connect them together. Appendix A
provides a UML class diagram of the core classes of our
framework. The Wire and Circuit classes follow a varia-
tion of the Observer pattern, which offers a kind of pub-
lish/subscribe functionality [6]. The main difference is
that when a wire w is connected to a circuit on port p
(represented as a position index to the inputWires array
of the circuit), all the observers of the port p automati-
cally become observers of w.
The SimpleCircuit abstract class provides a library of
commonly used functions starting with 2-to-1 AND, OR,
and XOR gates, where the AND and OR gates are im-
plemented using Yao’s garbled-circuit technique and the
XOR gate is implemented using the free-XOR optimiza-
tion. Implementing a NOT gate is also free since it can
be implemented as an XOR with constant 1.
The circuit library also provides more complex circuits
for, e.g., adders, muxers, comparators, min, max, etc.,
where these circuits were designed to minimize the num-
ber of non-XOR gates using the techniques described in
Section 3.2. Optimized circuits for additional functions
can be added, as needed. A circuit for some desired func-
tion f can be constructed from the components provided
in our circuit library, without needing to build the circuit
entirely from AND/OR/NOT gates.
Composite circuits are constructed using the build()
method, with the general structure shown below:
public void build() throws Exception 
createInputWires();
createSubCircuits();
connectWires();
deﬁneOutputWires();
ﬁxInternalWires();

To deﬁne a new circuit, a user creates a new subclass
of CompositeCircuit. Typically it is only necessary to
override the createSubCircuits(), connectWires(), and de-
ﬁneOutputWires() methods. If internal wires are ﬁxed to
known values, these can be set by overriding ﬁxInternal-
Wires(). Our framework automatically propagates known
signals which improves the run-time whenever any inter-
nal wires are ﬁxed in this way. For example, given a cir-
cuit designed to compute the Hamming distance of two
1024-bit vectors, we can immediately obtain a circuit
computing the Hamming distance of two 512-bit vectors
by ﬁxing 512 of each party’s input wires to 0. Because of
the way we do value propagation, this does not incur any
evaluation cost. As another example, when running the
Smith-Waterman algorithm (see Section 6) certain values
are ﬁxed to public constants and these can be ﬁxed in our
circuit implementing the algorithm in the same way.
Implementation Details
3.4
Throughout this paper, we use 80-bit wire labels for gar-
bled circuits and statistical security parameter k  80
for oblivious-transfer extension. For the Naor-Pinkas
oblivious-transfer protocol, we use an order-q subgroup
p with ࢯqࢯ  128 and ࢯpࢯ  1024. These settings cor-
of ࡌࢩ
respond roughly to the ultra-short security level as used
in TASTY [11]. We used SHA-1 to generate the garbled
truth-table entries. Each entry is computed as:
j ࢱk