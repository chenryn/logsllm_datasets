# CSIDL and KnownFolderID Definitions

## CSIDL Definitions
The following are definitions for various `CSIDL` (Common Shell Item ID List) constants, which are used to identify special folders in the Windows shell.

```c
#define CSIDL_RESOURCES_LOCALIZED 0x0039 // Localized Resources
#define CSIDL_COMMON_OEM_LINKS    0x003A // Links to All Users\OEM Links
```

### Special Folder Data Block
- By assigning different `CSIDL` values to `SpecialFolderID`, we can call the `ParseDisplayName` method of various interfaces.
- Most special folders are handled by `CFSFolder::ParseDisplayName` and `CRegFolder::ParseDisplayName`.
- Some interfaces have their own implementation of `ParseDisplayName`:
  - `CSIDL_INTERNET`: `CInternetFolder::ParseDisplayName`
  - `CSIDL_BITBUCKET`: `CBitBucket::ParseDisplayName`
  - `CSIDL_FONTS`: `CFontFolder::ParseDisplayName`
  - `CSIDL_HISTORY`: `CHistory::ParseDisplayName`
  - `CSIDL_CONTROLS`: `CControlPanelFolder::ParseDisplayName`

## CSIDL Constants
```c
#define CSIDL_DESKTOP                 0x0000 // Desktop
#define CSIDL_INTERNET                0x0001 // Internet Explorer (icon on desktop)
#define CSIDL_PROGRAMS                0x0002 // Start Menu\Programs
#define CSIDL_CONTROLS                0x0003 // My Computer\Control Panel
#define CSIDL_PRINTERS                0x0004 // My Computer\Printers
#define CSIDL_PERSONAL                0x0005 // My Documents
#define CSIDL_FAVORITES               0x0006 // \Favorites
#define CSIDL_STARTUP                 0x0007 // Start Menu\Programs\Startup
#define CSIDL_RECENT                  0x0008 // \Recent
#define CSIDL_SENDTO                  0x0009 // \SendTo
#define CSIDL_BITBUCKET               0x000A // \Recycle Bin
#define CSIDL_STARTMENU               0x000B // \Start Menu
#define CSIDL_MYDOCUMENTS             CSIDL_PERSONAL // Personal was just a silly name for My Documents
#define CSIDL_MYMUSIC                 0x000D // "My Music" folder
#define CSIDL_MYVIDEO                 0x000E // "My Videos" folder
#define CSIDL_DESKTOPDIRECTORY        0x0010 // \Desktop
#define CSIDL_DRIVES                  0x0011 // My Computer
#define CSIDL_NETWORK                 0x0012 // Network Neighborhood (My Network Places)
#define CSIDL_NETHOOD                 0x0013 // \nethood
#define CSIDL_FONTS                   0x0014 // windows\fonts
#define CSIDL_TEMPLATES               0x0015 // \Templates
#define CSIDL_COMMON_STARTMENU        0x0016 // All Users\Start Menu
#define CSIDL_COMMON_PROGRAMS         0x0017 // All Users\Start Menu\Programs
#define CSIDL_COMMON_STARTUP          0x0018 // All Users\Startup
#define CSIDL_COMMON_DESKTOPDIRECTORY 0x0019 // All Users\Desktop
#define CSIDL_APPDATA                 0x001A // \Application Data
#define CSIDL_PRINTHOOD               0x001B // \PrintHood
#define CSIDL_LOCAL_APPDATA           0x001C // \Local Application Data
#define CSIDL_ALTSTARTUP              0x001D // non-localized
#define CSIDL_COMMON_ALTSTARTUP       0x001E // non-localized
#define CSIDL_COMMON_FAVORITES        0x001F // All Users\Favorites
#define CSIDL_INTERNET_CACHE          0x0020 // Internet Cache
#define CSIDL_COOKIES                 0x0021 // Cookies
#define CSIDL_HISTORY                 0x0022 // History
#define CSIDL_COMMON_APPDATA          0x0023 // All Users\Application Data
#define CSIDL_WINDOWS                 0x0024 // GetWindowsDirectory
#define CSIDL_SYSTEM                  0x0025 // GetSystemDirectory
#define CSIDL_PROGRAM_FILES           0x0026 // C:\Program Files
#define CSIDL_MYPICTURES              0x0027 // My Pictures
#define CSIDL_PROFILE                 0x0028 // USERPROFILE
#define CSIDL_SYSTEMX86               0x0029 // x86 system directory
#define CSIDL_PROGRAM_FILESX86        0x002A // x86 C:\Program Files
#define CSIDL_PROGRAM_FILES_COMMON    0x002B // C:\Program Files\Common Files
#define CSIDL_PROGRAM_FILES_COMMONX86 0x002C // x86 Program Files\Common Files
#define CSIDL_COMMON_TEMPLATES        0x002D // All Users\Templates
#define CSIDL_COMMON_DOCUMENTS        0x002E // All Users\Documents
#define CSIDL_COMMON_ADMINTOOLS       0x002F // All Users\Start Menu\Programs\Administrative Tools
#define CSIDL_ADMINTOOLS              0x0030 // Administrative Tools
#define CSIDL_CONNECTIONS             0x0031 // Network and Dial-up Connections
#define CSIDL_COMMON_MUSIC            0x0035 // All Users\Music
#define CSIDL_COMMON_PICTURES         0x0036 // All Users\Pictures
#define CSIDL_COMMON_VIDEO            0x0037 // All Users\Videos
#define CSIDL_RESOURCES               0x0038 // Resource Directory
#define CSIDL_RESOURCES_LOCALIZED     0x0039 // Localized Resources
#define CSIDL_COMMON_OEM_LINKS        0x003A // Links to All Users\OEM Links
```

## KnownFolderDataBlock
- As of Windows Vista, `CSIDL` has been replaced by `KNOWNFOLDERID`.
- The `KnownFolderDataBlock` is handled similarly to the `SpecialFolderDataBlock`.

### Example: Decoding Special Folder in CShellLink
```c
HRESULT CShellLink::_DecodeSpecialFolder(CShellLink *this)
{
    ITEMIDLIST* folder_id_list = NULL;
    KnownFolderDataBlock* known_folder = SHFindDataBlock(this->ExtraBlock, 0xA000000B);
    if (known_folder)
    {
        if (!CShellLink::_ShouldDecodeSpecialFolder(this, known_folder->KnownFolderID))
            goto RET;

        HRESULT hr = SHGetKnownFolderIDList_Internal(known_folder->KnownFolderID,
                                                     (this->header.LinkFlags & SLDF_NO_KF_ALIAS | SLDF_UNALIAS_ON_SAVE) >> 10, 0, &folder_id_list);
        if (FAILED(hr))
            goto RET;
    }
    else
    {
        EXP_SPECIAL_FOLDER* special_folder = SHFindDataBlock(this->ExtraBlock, 0xA0000005);
        folder_id_list = SHCloneSpecialIDList(special_folder->idSpecialFolder, 0);
        Offset = special_folder->cbOffset;
    }

RET:
    // Additional processing
    return S_OK;
}
```

### Collecting KNOWNFOLDERID
- `KNOWNFOLDERID` can be collected from `KnownFolder.h` and the registry.
- Registry path: `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions`
- Example: `wc -l ./known_folder_id.txt` returns `377 ./known_folder_id.txt`

### Fuzzing Results
- Several Denial of Service (DoS) bugs were found in different interfaces.
- While not critical, these findings highlight potential areas for improvement.

### Windows Search LNK
- A special kind of LNK file can be created from Windows Search results.
- These LNK files contain complex data blobs in the `LinkTargetIDList`.
- Tools like `LECmd` do not fully parse all the data in the property store.

### PropVariant Deserialization
- `PROPVARIANT` is an undocumented data format parsed by Windows Search and the StructuredQuery library.
- It can hold different types of data, such as `CHAR`, `SHORT`, `LONG`, `FLOAT`, `DOUBLE`, `BOOL`, `DATE`, `FILETIME`, `BSTR`, `IUnknown`, `IDispatch`, `IStream`, `IStorage`, and more.
- The deserialization process involves reading the `VARTYPE` and then parsing the data accordingly.

### Example: ReadPROPVARIANT
```c
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop)
{
    HRESULT hr = IStream_Read(pstm, &prop->vt, 2);
    if (FAILED(hr))
        return hr;

    switch (prop->vt & VT_TYPEMASK)
    {
        case VT_LPWSTR:
            // Handle LPWSTR type
            break;
        // Other cases
    }

    return S_OK;
}
```

### Conclusion
- The `CSIDL` and `KNOWNFOLDERID` constants are essential for identifying special folders in the Windows shell.
- The `KnownFolderDataBlock` and `SpecialFolderDataBlock` are used to handle these identifiers in LNK files.
- Fuzzing and reverse engineering can help uncover potential issues and improve the robustness of the system.

By Dmitriy Turchenkov