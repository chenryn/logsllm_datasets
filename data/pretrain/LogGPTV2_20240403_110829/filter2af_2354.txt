# Java反序列化利用链分析：CommonsCollections2, 4, 8

## 译文声明
本文为翻译文章，具体内容及含义以原文为准。

## 0x00 前言
在前几篇文章中，我们已经分析了CommonsCollections 3.2.1版本以下的反序列化利用链。本文将继续探讨CommonsCollections 4.0版本，并详细讲解CommonsCollections2、4和8的利用链构造。

## 0x01 背景回顾
与commons-collections 3.2.2版本不同，4.0版本并没有通过黑名单机制来修复漏洞，因此3.2.1及其以下版本中的利用链稍作修改后仍然可以使用。例如，在CommonsCollections5中：

```java
final Map innerMap = new HashMap();
final Map lazyMap = LazyMap.lazyMap(innerMap, transformerChain);
```

只需将`innerMap`改为键值对声明方式即可。此外，除了使用`LazyMap`的方式外，CommonsCollections3还提到过使用`TrAXFilter`类初始化来加载任意的class bytes数组。

在commons-collections 4.0版本中，所有利用链最终都通过`TemplatesImpl`来执行命令。由于之前已分析过这种利用方式，本文不再赘述。

## 0x02 利用链分析

### CommonsCollections2 和 CommonsCollections4
这两个利用链都使用了`PriorityQueue`的`Comparator`来触发`transform`函数，但中间桥接所使用的`Transformer`对象有所不同。首先来看一下`PriorityQueue.readObject`方法的主要工作是反序列化恢复该对象的数据，重点关注`heapify()`方法。进一步跟进`siftDown()`方法，当我们在实例化对象时提供了`comparator`，将会调用`siftDownUsingComparator()`方法，进而调用我们传入的`comparator`的`compare`方法。利用链中使用了`TransformingComparator`，其`compare`方法会调用当前`transformer`的`transform`函数。

#### CommonsCollections2
- `PriorityQueue.readObject`
  - `PriorityQueue.heapify()`
  - `PriorityQueue.siftDown()`
  - `PriorityQueue.siftDownUsingComparator()`
  - `TransformingComparator.compare()`
  - `InvokerTransformer.transform()`
  - `TemplatesImpl.newTransformer()`
  - ... templates Gadgets ...
  - `Runtime.getRuntime().exec()`

#### CommonsCollections4
- `PriorityQueue.readObject`
  - `PriorityQueue.heapify()`
  - `PriorityQueue.siftDown()`
  - `PriorityQueue.siftDownUsingComparator()`
  - `TransformingComparator.compare()`
  - `ChainedTransformer.transform()`
  - `InstantiateTransformer.transform()`
  - `TemplatesImpl.newTransformer()`
  - ... templates Gadgets ...
  - `Runtime.getRuntime().exec()`

### CommonsCollections8
CommonsCollections8是今年由[navalorenzo](https://github.com/navalorenzo)推送到ysoserial上的，它与2和4的区别在于使用了新的`readObject`触发点`TreeBag`。查看`TreeBag.readObject`方法，关键点在于`TreeBag`父类的`doReadObject`函数和`TreeMap`。`doReadObject`方法对传入的`TreeMap`调用了`put`函数，进而调用`comparator.compare`函数，其中`comparator`是我们构造的`TransformingComparator`。

- `TreeBag.readObject()`
  - `AbstractMapBag.doReadObject()`
  - `TreeMap.put()`
  - `TransformingComparator.compare()`
  - `InvokerTransformer.transform()`
  - `TemplatesImpl.newTransformer()`
  - ... templates Gadgets ...
  - `Runtime.getRuntime().exec()`

### commons-collections 4.1及以上版本的变化
前面提到的CommonsCollections2、4和8都是基于commons-collections 4.0版本的。而在4.1及以上版本中，`InvokerTransformer`和`InstantiateTransformer`两个类都没有实现`Serializable`接口，导致无法在序列化过程中使用它们。这直接使得上述利用链失效。因此，我们需要寻找其他可操作危险方法的对象。

## 0x03 总结
通过分析ysoserial中的commons-collections系列payloads，我们可以总结出Java反序列化漏洞挖掘的一些思路（不涉及具体技术细节，仅个人观点，如有错误请指正）。

### 最终利用效果
在利用链构造中，我们希望最终能够达到任意命令执行或任意代码执行的效果，从而最大化反序列化漏洞的威力。`InvokerTransformer`的`transform`函数利用反射机制调用任意代码，意味着我们可以控制任意类的调用执行。但在实际挖掘中，除了对反射机制和`defineClass`类型的挖掘，还应关注其他潜在的危险利用，如任意文件写入、任意文件删除等。

### 挖掘思路
分析完所有的CommonsCollections payloads后，我们发现很多payloads组合了多个可利用的节点。在实际挖掘中，我们需要首先识别哪些库文件中包含可利用的节点，然后根据一定规则进行链条连接。

#### 可利用的节点
1. 实现了`Serializable`接口的类。
2. 类属性做了函数调用或返回值，如`TreeMap.map.put()`和`ConstantTransformer.transform`直接返回`iConstant`类属性。
3. 实现了`readObject`函数，可作为起始点或桥接点。
4. 实现了`invoke`函数，可作为桥接点，利用代理机制。
5. 从`readObject`函数和`invoke`函数衍生出来的类属性函数调用，可能引向其他类函数，如`TreeBag.readObject`引向父类的`doReadObject`函数。

#### 节点串联
主要依赖于第5点的挖掘，需要经验或静态代码分析。通过自动化工具如[gadgetinspector](https://github.com/JackOfMostTrades/gadgetinspector)可以实现自动化的利用链发掘。随着防护措施的加强，单个库内的利用链越来越难以实现，因此针对不同项目进行针对性分析变得尤为重要。下一步将重点分析gadgetinspector工具的实现。