URL Handler Method" in the "Dynamic Analysis" of "Testing Custom URL Schemes" section for some examples on
hooking and tracing this method.
Dynamic Analysis
If an app is implementing universal links, you should have the following outputs from the static analysis:
the associated domains
the Apple App Site Association file
the link receiver method
the data handler method
You can use this now to dynamically test them:
Triggering universal links
Identifying valid universal links
Tracing the link receiver method
Checking how the links are opened
Triggering Universal Links
Unlike custom URL schemes, unfortunately you cannot test universal links from Safari just by typing them in the
search bar directly as this is not allowed by Apple. But you can test them anytime using other apps like the Notes app:
Open the Notes app and create a new note.
Write the links including the domain.
Leave the editing mode in the Notes app.
Long press the links to open them (remember that a standard click triggers the default option).
To do it from Safari you will have to find an existing link on a website that once clicked, it will be recognized as a
Universal Link. This can be a bit time consuming.
Alternatively you can also use Frida for this, see the section "Performing URL Requests" for more details.
Identifying Valid Universal Links
First of all we will see the difference between opening an allowed Universal Link and one that shouldn't be allowed.
From the apple-app-site-association of apple.com we have seen above we chose the following paths:
"paths": [
"NOT /shop/buy-iphone/*",
431
iOS Platform APIs
...
"/today",
One of them should offer the "Open in app" option and the other should not.
If we long press on the first one ( http://www.apple.com/shop/buy-iphone/iphone-xr ) it only offers the option to open it
(in the browser).
If we long press on the second ( http://www.apple.com/today ) it shows options to open it in Safari and in "Apple
Store":
432
iOS Platform APIs
Note that there is a difference between a click and a long press. Once we long press a link and select an option,
e.g. "Open in Safari", this will become the default option for all future clicks until we long press again and select
another option.
If we repeat the process and hook or trace the application:continueUserActivity:restorationHandler: method we will
see how it gets called as soon as we open the allowed universal link. For this you can use frida-trace for example:
$ frida-trace -U "Apple Store" -m "*[* *restorationHandler*]"
Tracing the Link Receiver Method
This section explains how to trace the link receiver method and how to extract additional information. For this
example, we will use Telegram, as there are no restrictions in its apple-app-site-association file:
{
"applinks": {
"apps": [],
"details": [
{
"appID": "X834Q8SBVP.org.telegram.TelegramEnterprise",
"paths": [
"*"
]
},
{
"appID": "C67CF9S4VU.ph.telegra.Telegraph",
"paths": [
"*"
433
iOS Platform APIs
]
},
{
"appID": "X834Q8SBVP.org.telegram.Telegram-iOS",
"paths": [
"*"
]
}
]
}
}
In order to open the links we will also use the Notes app and frida-trace with the following pattern:
$ frida-trace -U Telegram -m "*[* *restorationHandler*]"
Write https://t.me/addstickers/radare (found through a quick Internet research) and open it from the Notes app.
First we let frida-trace generate the stubs in __handlers__/ :
$ frida-trace -U Telegram -m "*[* *restorationHandler*]"
Instrumenting functions...
-[AppDelegate application:continueUserActivity:restorationHandler:]
You can see that only one function was found and is being instrumented. Trigger now the universal link and observe
the traces.
434
iOS Platform APIs
298382 ms -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
restorationHandler:0x16f27a898]
You can observe that the function is in fact being called. You can now add code to the stubs in __handlers__/ to
obtain more details:
// __handlers__/__AppDelegate_application_contin_8e36bbb1.js
onEnter: function (log, args, state) {
log("-[AppDelegate application: " + args[2] + " continueUserActivity: " + args[3] +
" restorationHandler: " + args[4] + "]");
log("\tapplication: " + ObjC.Object(args[2]).toString());
log("\tcontinueUserActivity: " + ObjC.Object(args[3]).toString());
log("\t\twebpageURL: " + ObjC.Object(args[3]).webpageURL().toString());
log("\t\tactivityType: " + ObjC.Object(args[3]).activityType().toString());
log("\t\tuserInfo: " + ObjC.Object(args[3]).userInfo().toString());
log("\trestorationHandler: " +ObjC.Object(args[4]).toString());
},
The new output is:
298382 ms -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
restorationHandler:0x16f27a898]
298382 ms application:
298382 ms continueUserActivity:
298382 ms webpageURL:http://t.me/addstickers/radare
298382 ms activityType:NSUserActivityTypeBrowsingWeb
298382 ms userInfo:{
}
298382 ms restorationHandler:
Apart from the function parameters we have added more information by calling some methods from them to get more
details, in this case about the NSUserActivity . If we look in the Apple Developer Documentation we can see what
else we can call from this object.
Checking How the Links Are Opened
If you want to know more about which function actually opens the URL and how the data is actually being handled you
should keep investigating.
Extend the previous command in order to find out if there are any other functions involved into opening the URL.
$ frida-trace -U Telegram -m "*[* *restorationHandler*]" -i "*open*Url*"
-i includes any method. You can also use a glob pattern here (e.g. -i "*open*Url*" means "include any
function containing 'open', then 'Url' and something else")
Again, we first let frida-trace generate the stubs in __handlers__/ :
$ frida-trace -U Telegram -m "*[* *restorationHandler*]" -i "*open*Url*"
Instrumenting functions...
-[AppDelegate application:continueUserActivity:restorationHandler:]
$S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion...
$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application...
$S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19...
...
435
iOS Platform APIs
Now you can see a long list of functions but we still don't know which ones will be called. Trigger the universal link
again and observe the traces.
/* TID 0x303 */
298382 ms -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
restorationHandler:0x16f27a898]
298619 ms | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData
18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA
14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0
10NavigationO0CSgyyctF()
Apart from the Objective-C method, now there is one Swift function that is also of your interest.
There is probably no documentation for that Swift function but you can just demangle its symbol using swift-
demangle via xcrun :
xcrun can be used invoke Xcode developer tools from the command-line, without having them in the path. In
this case it will locate and run swift-demangle, an Xcode tool that demangles Swift symbols.
$ xcrun swift-demangle S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData
18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0
12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF
Resulting in:
---> TelegramUI.openExternalUrl(
account: TelegramCore.Account, context: TelegramUI.OpenURLContext, url: Swift.String,
forceExternal: Swift.Bool, presentationData: TelegramUI.PresentationData,
applicationContext: TelegramUI.TelegramApplicationContext,
navigationController: Display.NavigationController?, dismissInput: () -> ()) -> ()
This not only gives you the class (or module) of the method, its name and the parameters but also reveals the
parameter types and return type, so in case you need to dive deeper now you know where to start.
For now we will use this information to properly print the parameters by editing the stub file:
// __handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js
onEnter: function (log, args, state) {
log("TelegramUI.openExternalUrl(account: TelegramCore.Account,
context: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,
presentationData: TelegramUI.PresentationData,
applicationContext: TelegramUI.TelegramApplicationContext,
navigationController: Display.NavigationController?, dismissInput: () -> ()) -> ()");
log("\taccount: " + ObjC.Object(args[0]).toString());
log("\tcontext: " + ObjC.Object(args[1]).toString());
log("\turl: " + ObjC.Object(args[2]).toString());
log("\tpresentationData: " + args[3]);
log("\tapplicationContext: " + ObjC.Object(args[4]).toString());
log("\tnavigationController: " + ObjC.Object(args[5]).toString());
},
This way, the next time we run it we get a much more detailed output:
298382 ms -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
restorationHandler:0x16f27a898]
298382 ms application:
298382 ms continueUserActivity:
298382 ms webpageURL:http://t.me/addstickers/radare
436
iOS Platform APIs
298382 ms activityType:NSUserActivityTypeBrowsingWeb
298382 ms userInfo:{
}
298382 ms restorationHandler:
298619 ms | TelegramUI.openExternalUrl(account: TelegramCore.Account,
context: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,
presentationData: TelegramUI.PresentationData, applicationContext:
TelegramUI.TelegramApplicationContext, navigationController: Display.NavigationController?,
dismissInput: () -> ()) -> ()
298619 ms | account: TelegramCore.Account
298619 ms | context: nil
298619 ms | url: http://t.me/addstickers/radare
298619 ms | presentationData: 0x1c4e40fd1
298619 ms | applicationContext: nil
298619 ms | navigationController: TelegramUI.PresentationData
There you can observe the following:
It calls application:continueUserActivity:restorationHandler: from the app delegate as expected.
application:continueUserActivity:restorationHandler: handles the URL but does not open it, it calls
TelegramUI.openExternalUrl for that.
The URL being opened is https://t.me/addstickers/radare .
You can now keep going and try to trace and verify how the data is being validated. For example, if you have two
apps that communicate via universal links you can use this to see if the sending app is leaking sensitive data by
hooking these methods in the receiving app. This is especially useful when you don't have the source code as you will
be able to retrieve the full URL that you wouldn't see other way as it might be the result of clicking some button or
triggering some functionality.
In some cases, you might find data in userInfo of the NSUserActivity object. In the previous case there was no data
being transferred but it might be the case for other scenarios. To see this, be sure to hook the userInfo property or
access it directly from the continueUserActivity object in your hook (e.g. by adding a line like this log("userInfo:" +
ObjC.Object(args[3]).userInfo().toString()); ).
Final Notes about Universal Links and Handoff
Universal links and Apple's Handoff feature are related:
Both rely on the same method when receiving data ( application:continueUserActivity:restorationHandler: ).
Like universal links, the Handoff's Activity Continuation must be declared in the com.apple.developer.associated-
domains entitlement and in the server's apple-app-site-association file (in both cases via the keyword
"activitycontinuation": ). See "Retrieving the Apple App Site Association File" above for an example.
Actually, the previous example in "Checking How the Links Are Opened" is very similar to the "Web Browser–to–
Native App Handoff" scenario described in the "Handoff Programming Guide":
If the user is using a web browser on the originating device, and the receiving device is an iOS device with a
native app that claims the domain portion of the webpageURL property, then iOS launches the native app and
sends it an NSUserActivity object with an activityType value of NSUserActivityTypeBrowsingWeb . The
webpageURL property contains the URL the user was visiting, while the userInfo dictionary is empty.
In the detailed output above you can see that NSUserActivity object we've received meets exactly the mentioned
points:
298382 ms -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780
restorationHandler:0x16f27a898]
298382 ms application:
298382 ms continueUserActivity:
298382 ms webpageURL:http://t.me/addstickers/radare
437
iOS Platform APIs
298382 ms activityType:NSUserActivityTypeBrowsingWeb
298382 ms userInfo:{
}
298382 ms restorationHandler:
This knowledge should help you when testing apps supporting Handoff.
UIActivity Sharing
Overview
Starting on iOS 6 it is possible for third-party apps to share data (items) via specific mechanisms like AirDrop, for
example. From a user perspective, this feature is the well-known system-wide share activity sheet that appears after
clicking on the "Share" button.
The available built-in sharing mechanisms (aka. Activity Types) include:
airDrop
assignToContact
copyToPasteboard
mail
message
postToFacebook
postToTwitter
A full list can be found in UIActivity.ActivityType. If not considered appropriate for the app, the developers have the
possibility to exclude some of these sharing mechanisms.
Static Analysis
Sending Items
When testing UIActivity Sharing you should pay special attention to:
the data (items) being shared,
the custom activities,
438
iOS Platform APIs
the excluded activity types.
Data sharing via UIActivity works by creating a UIActivityViewController and passing it the desired items (URLs,
text, a picture) on init(activityItems:applicationActivities:) .
As we mentioned before, it is possible to exclude some of the sharing mechanisms via the controller's
excludedActivityTypes property. It is highly recommended to do the tests using the latest versions of iOS as the
number of activity types that can be excluded can increase. The developers have to be aware of this and explicitely
exclude the ones that are not appropriate for the app data. Some activity types might not be even documented like
"Create Watch Face".
If having the source code, you should take a look at the UIActivityViewController :
Inspect the activities passed to the init(activityItems:applicationActivities:) method.
Check if it defines custom activities (also being passed to the previous method).
Verify the excludedActivityTypes , if any.
If you only have the compiled/installed app, try searching for the previous method and property, for example:
$ rabin2 -zq Telegram\ X.app/Telegram\ X | grep -i activityItems
0x1000df034 45 44 initWithActivityItems:applicationActivities:
Receiving Items
When receiving items, you should check:
if the app declares custom document types by looking into Exported/Imported UTIs ("Info" tab of the Xcode
project). The list of all system declared UTIs (Uniform Type Identifiers) can be found in the archived Apple
Developer Documentation.
if the app specifies any document types that it can open by looking into Document Types ("Info" tab of the Xcode
project). If present, they consist of name and one or more UTIs that represent the data type (e.g. "public.png" for
PNG files). iOS uses this to determine if the app is eligible to open a given document (specifying
Exported/Imported UTIs is not enough).
if the app properly verifies the received data by looking into the implementation of application:openURL:options:
(or its deprecated version application:openURL:sourceApplication:annotation: ) in the app delegate.
If not having the source code you can still take a look into the Info.plist file and search for:
UTExportedTypeDeclarations / UTImportedTypeDeclarations if the app declares exported/imported custom
document types.
CFBundleDocumentTypes to see if the app specifies any document types that it can open.