Building
SECURE SERVERS
with
LINUX
TOOLS & BEST PRACTICES FOR BASTION HOSTS
MICHAEL D. BAUER
Building
SECURESERVERS
with
LINUX
Michael D. Bauer
Beijing • Cambridge • Farnham • Köln • Paris • Sebastopol • Taipei • Tokyo
TITLE  Page iii  Wednesday, October 16, 2002  6:14 PM
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
323
Chapter 10
CHAPTER 10
System Log
Management and
Monitoring
Whatever else you do to secure a Linux system, it must have comprehensive, accu-
rate, and carefully watched logs. Logs serve several purposes. First, they help us trou-
bleshoot virtually all kinds of system and application problems. Second, they provide
valuable early-warning signs of system abuse. Third, after all else fails (whether that
means a system crash or a system compromise), logs can provide us with crucial
forensic data.
This chapter is about making sure your system processes and critical applications log
the events and states you’re interested in and dealing with this data once it’s been
logged. The two logging tools we’ll cover are syslog and the more powerful Syslog-ng
(“syslog new generation”). In the monitoring arena, we’ll discuss Swatch (the Simple
Watcher), a powerful Perl script that monitors logs in real time and takes action on
specified events.
syslog
syslog is the tried-and-true workhorse of Unix logging utilities. It accepts log data
from the kernel (by way of klogd), from any and all local process, and even from pro-
cesses on remote systems. It’s flexible as well, allowing you to determine what gets
logged and where it gets logged to.
A preconfigured syslog installation is part of the base operating system in virtually all
variants of Unix and Linux. However, relatively few system administrators custom-
ize it to log the things that are important for their environment and disregard the
things that aren’t. Since, as few would dispute, information overload is one of the
major challenges of system administration, this is unfortunate. Therefore, we begin
this chapter with a comprehensive discussion of how to customize and use syslog.
Conﬁguring syslog
Whenever syslogd, the syslog daemon, receives a log message, it acts based on the
message’s type (or “facility”) and its priority. syslog’s mapping of actions to facilities
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
324
|
Chapter 10: System Log Management and Monitoring
and priorities is specified in /etc/syslog.conf. Each line in this file specifies one or
more facility/priority selectors followed by an action; a selector consists of a facility
or facilities and a (single) priority.
In the following syslog.conf line in Example 10-1, mail.notice is the selector and /var/
log/mail is the action (i.e., “write messages to /var/log/mail”).
Within the selector, mail is the facility (message category) and notice is the level of
priority.
Facilities
Facilities are simply categories. Supported facilities in Linux are auth, auth-priv, cron,
daemon, kern, lpr, mail, mark, news, syslog, user, uucp, and local0 through local7.
Some of these are self-explanatory, but the following are of special note:
What About klogd?
One daemon you probably won’t need to reconfigure but should still be aware of is
klogd, Linux’s kernel log daemon. This daemon is started automatically at boot time
by the same script that starts the general system logger (probably /etc/init.d/syslogd or
/etc/init.d/sysklogd, depending on which Linux distribution you use).
By default, klogd directs log messages from the kernel to the system logger, which is
why most people don’t need to worry about klogd: you can control the handling of ker-
nel messages by editing the configuration file for syslogd.
This is also true if you use Syslog-ng instead of syslog, but since Syslog-ng accepts mes-
sages from a much wider variety of sources, including /proc/kmsg (which is where klogd
receives its messages), some Syslog-ng users prefer to disable klogd. Don’t do so your-
self unless you first configure Syslog-ng to use /proc/kmsg as a source.
klogd can be invoked as a standalone logger; that is, it can send kernel messages
directly to consoles or a log file. In addition, if it isn’t already running as a daemon,
klogd can be used to dump the contents of the kernel log buffers (i.e., the most recent
kernel messages) to a file or to the screen. These applications of klogd are especially
useful to kernel developers.
For most of us, it’s enough to know that for normal system operations, klogd can be
safely left alone (that is, left with default settings and startup options—not disabled).
Just remember that when you use syslog in Linux, all kernel messages are handled by
klogd first.
Example 10-1. Sample syslog.conf line
mail.notice                /var/log/mail
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
syslog
|
325
auth
Used for many security events.
auth-priv
Used for access-control-related messages.
daemon
Used by system processes and other daemons.
kern
Used for kernel messages.
mark
Messages generated by syslogd itself, which contain only a timestamp and the
string --MARK--; to specify how many minutes should transpire between marks,
invoke syslogd with the -m [minutes] flag.
user
The default facility when none is specified by an application or in a selector.
ocal7
Boot messages.
*
Wildcard signifying “any facility.”
none
Wildcard signifying “no facility.”
Priorities
Unlike facilities, which have no relationship to each other, priorities are hierarchical.
Possible priorities in Linux are (in increasing order of urgency): debug, info, notice,
warning, err, crit, alert, and emerg. Note that the “urgency” of a given message is
determined by the programmer who wrote it; facility and priority are set by the pro-
grams that generate messages, not by syslog.
As with facilities, the wildcards * and none may also be used. Only one priority or
wildcard may be specified per selector. A priority may be preceded by either or both
of the modifiers, = and !.
If you specify a single priority in a selector (without modifiers), you’re actually speci-
fying that priority plus all higher priorities. Thus the selector mail.notice translates
to “all mail-related messages having a priority of notice or higher,” i.e., having a pri-
ority of notice, warning, err, crit, alert, or emerg.
You can specify a single priority by prefixing a = to it. The selector mail.=notice
translates to “all mail-related messages having a priority of notice.” Priorities may
also be negated: mail.!notice is equivalent to “all mail messages except those with
priority of noticeor higher,” and mail.!=notice corresponds to “all mail messages
except those with the priority notice.”
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
326
|
Chapter 10: System Log Management and Monitoring
Actions
In practice, most log messages are written to files. If you list the full path to a file-
name as a line’s action in syslog.conf, messages that match that line will be appended
to that file. (If the file doesn’t exist, syslog will create it.) In Example 10-1, we
instructed syslog to send matched messages to the file /var/log/mail.
You can send messages other places too. An action can be a file, a named pipe, a
device file, a remote host, or a user’s screen. Pipes are usually used for debugging.
Device files that people use are usually TTYs. Some people also like to send security
information to /dev/lp0—i.e., to a local line printer. Logs that have been printed out
can’t be erased or altered by an intruder, but they also are subject to mechanical
problems (paper jams, ink depletion, etc.) and are harder to parse if you need to find
something in a hurry.
Remote logging is one of the most useful features of syslog. If you specify a host-
name or IP address preceded by an @ sign as a line’s action, messages that match
that line will be sent to UDP port 514 on that remote host. For example, the line:
*.emerg            @mothership.mydomain.org
will send all messages with emerg priority to UDP port 514 on the host named
mothership.mydomain.org.
Note
that
the
remote
host’s
(in
this
example,
mothership’s) syslogd process will need to have been started with the -r flag for it to
accept your log messages. By default, syslogd does not accept messages from remote
systems.
syslog has no access-control mechanism of its own: if you enable the
reception of remote messages with the -r flag, your host will accept
messages on UDP port 514 from any and all remote computers. See
the end of this section for some advice on how to mitigate this.
If you run a central log server, which I highly recommend, you’ll want to consider
some sort of access controls on it for incoming messages. At the very least, you
should consider tcpwrappers’ “hosts access” (source-IP-based) controls or maybe
even local firewall rules (ipchains or iptables).
More sophisticated selectors
You can list multiple facilities separated by commas in a single syslog.conf selector.
To extend Example 10-1 to include both mail and uucp messages (still with priority
notice or higher), you could use this line (Example 10-2).
The same is not true of priorities. Remember that only one priority or priority wild-
card may be specified in a single selector.
Example 10-2. Multiple facilities in a single selector
mail,uucp.notice   /var/log/mail
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
syslog
|
327
You may, however, specify multiple selectors separated by semicolons. When a line
contains multiple selectors, they’re evaluated from left to right: you should list gen-
eral selectors first, followed by more specific selectors. You can think of selectors as
filters: as a message is passed through the line from left to right, it passes first
through coarse filters and then through more granular ones.
Continuing our one-line example, suppose we still want important mail and uucp
messages to be logged to /var/log/mail, but we’d like to exclude uucp messages with
priority alert. Our line then looks like Example 10-3.
Stealth Logging
Lance Spitzner of the Honeynet Project (http://www.honeynet.org) suggests a trick
that’s useful for honey (decoy) nets and maybe even for production DMZs: “stealth
logging.” This trick allows a host connected to a hub or other shared medium to send
its log files to a non-IP-addressed system that sees and captures the log messages but
can’t be directly accessed over the network, making it much harder for an intruder on
your network to tamper with log files.
The idea is simple: suppose you specify a bogus IP address in a syslog.conf action (i.e.,
an IP address that is legitimate for your host’s LAN but isn’t actually used by any host
running syslogd). Since syslog messages are sent using the “connectionless” (one-way)
UDP protocol, the sending host doesn’t expect any reply when it sends a log message.
Furthermore, assuming your DMZ hosts are connected to a shared medium such as a
hub, any syslog messages sent over the network will be broadcast on the local LAN.
Therefore, it isn’t necessary for a central log server on that LAN to have an IP address:
the log server can passively “sniff” the log messages via snort, ethereal, or some other
packet sniffer.
Obviously, since an IP-addressless stealth logger won’t be accessible via your usual IP-
based remote administration tools, you’ll need console access to that host to view your
logs. Alternatively, you can add a second network interface to the stealth logger, con-
necting it to a dedicated management network or directly to your management work-
station via crossover cable.
In addition to configuring each DMZ host’s syslog.conf file to log to the bogus IP, you’ll
also need a bogus ARP entry added to the network startup script on each sending host.
If you don’t, each system will try in vain to learn the Ethernet address of the host with
that IP, and it won’t send any log packets.
For example, if you want a given host to pretend to send packets to the bogus IP 192.
168.192.168, then in addition to specifying @192.168.192.168 as the action on one or
more lines in /etc/syslog.conf, you’ll need to enter this command from a shell prompt:
arp -s 192.168.192.168 03:03:03:31:33:77
This is not necessary if you send log packets to a “normal” log host (e.g., if 192.168.
192.168 is the IP address of a host running syslogd with the -r flag.)
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
328
|
Chapter 10: System Log Management and Monitoring
Actually, syslogd’s behavior isn’t as predictable as this may imply: list-
ing selectors that contradict each other or that go from specific to gen-
eral rather than vice versa can yield unexpected results. Therefore, it’s
more accurate to say “for best results, list general selectors to the left
and their exceptions (and/or more-specific selectors) to the right.”
Wherever possible, keep things simple. You can use the logger com-
mand to test your syslog.conf rules (see “Testing System Logging with
logger” later in this chapter).
Note that in the second selector (uucp.!=alert), we used the prefix != before the pri-
ority to signify “not equal to.” If we wanted to exclude uucp messages with priority
alert and higher (i.e, alert and emerg), we could omit the = (see Example 10-4).
You might wonder what will happen to a uucp message of priority info: this matches
the second selector, so it should be logged to /var/log/mail, right? Not based on the
previous examples. Since the line’s first selector matches only mail and uucp mes-
sages of priority notice and higher, such a message wouldn’t be evaluated against the
second selector.
There’s nothing to stop you from having a different line for dealing with info-level
uucp messages, though. You can even have more than one line deal with these if you
like. Unlike a firewall rule base, each log message is tested against all lines in /etc/
syslog.conf and acted on as many times as it matches.
Suppose we want emergency messages broadcast to all logged-in users, as well as
written to their respective application logs. We could use something like
Example 10-5.
Example 10-3. Multiple selectors in a single line
mail,uucp.notice;uucp.!=alert    /var/log/mail
Example 10-4. Selector list with a less specific exception
mail,uucp.notice;uucp.!alert     /var/log/mail
Example 10-5. A sample syslog.conf file
# Sample syslog.conf file that sorts messages by mail, kernel, and "other,"
# and broadcasts emergencies to all logged-in users
# print most sys. events to tty10 and to the xconsole pipe, and emergencies to everyone
kern.warn;*.err;authpriv.none    |/dev/xconsole
*.emerg                           *
# send mail, news (most), & kernel/firewall msgs to their respective logfiles
mail.*                           -/var/log/mail
kern.*                           -/var/log/kernel_n_firewall
# save the rest in one file
*.*;mail.none                    -/var/log/messages
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
syslog
|
329
Did you notice the - (minus) sign in front of the write-to-file actions? This tells
syslogd not to synchronize the specified log file after writing a message that matches
that line. Skipping synchronization decreases disk utilization and thus improves per-
formance, but it also increases the chances of introducing inconsistencies, such as
missing or incomplete log messages, into those files. Use the minus sign, therefore,
only in lines that you expect to result in numerous or frequent file writes.
Besides performance optimization, Example 10-5 also contains some useful redun-
dancy. Kernel warnings plus all messages of error-and-higher priority, except
authpriv messages, are printed to the X-console window. All messages having prior-
ity of emergency and higher are too, in addition to being written to the screens of all
logged-in users.
Furthermore, all mail messages and kernel messages are written to their respective
log files. All messages of all priorities (except mail messages of any priority) are writ-
ten to /var/log/messages.
Example 10-5 was adapted from the default syslog.conf that SuSE 7.1 put on one of
my systems. But why shouldn’t such a default syslog.conf file be fine the way it is?
Why change it at all?
Maybe you needn’t, but you probably should. In most cases, default syslog.conf files
either:
• Assign to important messages at least one action that won’t effectively bring
those messages to your attention (e.g., by sending messages to a TTY console on
a system you only access via SSH)
• Handle at least one type of message with too much or too little redundancy to
meet your needs
We’ll conclude our discussion of syslog.conf with Tables 10-1 through 10-4, which
summarize syslog.conf’s allowed facilities, priorities, and types of actions. Note that
numeric codes should not be used in syslog.conf on Linux systems. They are pro-
vided here strictly as a reference, should you need to configure a non-Linux syslog
daemon that uses numeric codes (e.g., Cisco IOS), or to send syslog messages to
your log server because they’re used internally (i.e., in raw syslog packets). You may
see them referred to elsewhere.
Table 10-1. syslog.conf’s allowed facilities
Facilities