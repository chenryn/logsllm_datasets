# A Performability-Oriented Software Rejuvenation Framework for Distributed Applications

## Authors:
- Ann T. Tai, IA Tech, Inc., Los Angeles, CA 90024
- Kam S. Tso, IA Tech, Inc., Los Angeles, CA 90024
- William H. Sanders, University of Illinois, Urbana, IL 61801
- Savio N. Chau, Jet Propulsion Laboratory, Pasadena, CA 91109

## Abstract
While inherent resource redundancies in distributed applications facilitate gracefully degradable services, methods to enhance their dependability can have subtle yet significant performance implications, especially for stateful applications. This paper introduces a performability-oriented framework for implementing software rejuvenation in stateful distributed applications. The framework is built on three key components: a rejuvenation algorithm, a set of performability metrics, and a performability model. Model-based evaluations demonstrate that this framework enables error-prone distributed applications to deliver services at the best possible performance level, even in highly failure-prone environments.

## 1. Introduction
Software rejuvenation is recognized as an effective method for preventing computer system failures caused by cumulative internal errors or capacity degradation. Voluntary reboots can eliminate accumulated errors and restore full system capacity. Extensive research has been conducted on software rejuvenation (e.g., [1, 2, 3, 4, 5, 6]). Recent studies suggest using software rejuvenation to protect critical systems against "incremental intrusions" [7], which are difficult to detect and isolate before they cause catastrophic failures.

Motivated by these advancements and the increasing reliance on distributed software systems, we develop a software rejuvenation framework for stateful distributed applications with server replicas. These applications represent an important but underexplored area for software rejuvenation. Our goal is to investigate the feasibility of software rejuvenation in such applications and address the unique design considerations for this class of distributed systems.

While resource redundancies in distributed applications can support novel architectures and gracefully degradable performance, enhancing their dependability can have significant performance implications, particularly for stateful applications. Specifically, software rejuvenation, which temporarily stops a long-running replica server, can lead to post-rejuvenation performance degradation due to state inconsistencies. Therefore, we adopt a performability-oriented approach, focusing on the system's ability to deliver services with gracefully degradable performance. The framework is constructed using a rejuvenation algorithm, performability metrics, and a performability model, all of which account for post-rejuvenation performance degradation and consistency restoration.

The basic version of our rejuvenation algorithm uses pattern-matching mechanisms to detect pre-failure conditions. To address the limitations of pattern matching, the enhanced version incorporates a random timer, allowing detection-triggered and timer-triggered rejuvenation to work synergistically. Model-based evaluations show that our framework enables error-prone distributed applications to continuously deliver services at the best possible performance level, even in highly failure-prone environments. Additionally, our framework integrates software rejuvenation as a core part of the infrastructure in stateful distributed applications that ensure eventual consistency.

The remainder of the paper is organized as follows: Section 2 describes the system model and assumptions. Section 3 discusses the foundational concepts and methods. Sections 4 and 5 detail and analyze the basic and enhanced versions of our rejuvenation algorithm, respectively. We conclude in Section 6.

## 2. System Model and Assumptions
We focus on highly available, stateful distributed applications where servers are replicated across multiple sites connected via LANs or WANs. Clients interact with these replicated servers by issuing service requests, which can be "read," "write," or "read and write" operations on logical data entities.

Distributed replicated services provide better response times than centralized systems but can cause inconsistencies among replicas in stateful applications. Traditional concurrency control protocols, such as two-phase locking, ensure strong consistency but incur high performance overhead. Over the past fifteen years, the distributed computing community has shifted towards more flexible algorithms that guarantee eventual rather than immediate consistency.

Our system model assumes a protocol that ensures eventual consistency by using a sequencer to execute update requests in the same order across all replicas [8]. We make two key assumptions:
1. The sequencer also schedules time-based rejuvenation. It has passive replications on other replica servers, allowing the scheduling function (referred to as a scheduler) to migrate to another site in case of failure.
2. If error accumulation becomes excessive, a replica will crash. Local recovery is possible but not guaranteed. If local recovery fails, the replica must rely on another operational replica to transfer necessary state information. If all replicas fail and none recover locally, the system must wait for major corrective maintenance involving human intervention.

## 3. Foundation of the Framework
### 3.1 Basic Approach
From an availability perspective, software rejuvenation can be easily implemented in a distributed system with replicas, as system-level availability is not affected when a single or a subset of replicas undergoes rejuvenation. However, this is only feasible for stateless applications. For stateful applications, rejuvenation requires a replica to be briefly taken offline, leading to potential state inconsistencies.

Exploiting the concept of eventual consistency, we derive a solution that allows a replica to undergo rejuvenation without violating the eventual consistency property. During rejuvenation, read requests to the local replica are diverted to an in-service replica, while update requests are processed by all in-service replicas. Update requests and global sequence numbers (GSNs) are saved in a buffer at the rejuvenating replica and processed after rejuvenation, ensuring eventual consistency.

This approach, combined with resource redundancy, enables stateful distributed applications to deliver gracefully degradable services without violating eventual consistency or causing unavailability. This forms the basis for developing the rejuvenation algorithms described in Sections 4 and 5.

### 3.2 Performance-Level Definition
A client interacting with a rejuvenating replica will experience slower but acceptable response times. After rejuvenation, the replica may have a stressful period (τ) during which it processes accumulated update requests. We term this period "consistency restoration." Even with preventive measures, replicas may still crash and undergo recovery, leading to a similar stressful period.

We define two index variables to determine the system's performance levels:
- **I**: The number of operational replicas.
- **J**: The number of operational replicas not engaged in rejuvenation or consistency restoration.

For a system with n replica servers, the performance levels can be expressed as:
{level-i.j | i ∈ {0, . . . , n}, j ∈ {0, . . . , i}}

This expression generates and ranks performance levels systematically based on the values of I and J. We can also group these fine-grained performance levels into coarse-grained levels, as shown in Table 1.

These performance levels enable us to define performability metrics, which quantify the system's ability to provide gracefully degradable services. In Sections 4 and 5, we define these metrics in the context of our system model.

## 4. Precursor-Detection (PD) Scheme
### 4.1 Precursor-Detection Approach
Several software rejuvenation schemes use prediction, observation, and monitoring to trigger rejuvenation only when failures are likely, reducing unnecessary system unavailability. We propose a precursor-detection-triggered rejuvenation scheme (PD scheme) that uses patterns of pre-failure conditions identified from system logs. For example, a rapid increase in memory utilization may be a pre-failure condition if strongly correlated with system failures.

When observed events match predefined patterns, an exception is raised to activate the rejuvenation procedure. Pattern-matching mechanisms offer high accuracy with limited false alarms but cannot detect unknown pre-failure conditions. Alternative mechanisms like anomaly detection, which treat deviations from normal behavior as anomalies, have higher coverage but suffer from high false alarm rates. For software rejuvenation, we prioritize high-accuracy detection to minimize unnecessary system unavailability.

### 4.2 Performability Model for the PD Scheme
#### 4.2.1 Performability Metrics
From the performance-level definition, a system with two replicas can have four coarse-grained performance levels, as shown in Table 2. We define performability metrics as:
{P (Y = k) | k ∈ {0, 1, 2, 3}}
and additional metrics:
{P (Y ≥ k) | k ∈ {1, 2}}

#### 4.2.2 Stochastic Activity Network (SAN) Model
To evaluate these metrics, we build a performability model using UltraSAN [9]. The SAN model for the PD scheme in a 2-replica application is depicted in Figure 1. Initially, both replicas are in a robust state (represented by tokens in places n1_robust and n2_robust). As errors accumulate, a replica enters a vulnerable state (represented by tokens in places n1_vuln or n2_vuln).

[Figure 1: SAN Model for the PD Scheme in a 2-Replica Application]

## 5. Enhanced Rejuvenation Algorithm
### 5.1 Random Timer Mechanism
To address the limitations of pattern matching, we introduce a random timer mechanism. This allows for both detection-triggered and timer-triggered rejuvenation, improving overall system reliability. The enhanced algorithm coordinates these two mechanisms to ensure optimal performance and reliability.

### 5.2 Performability Evaluation
We conduct a performability evaluation of the enhanced algorithm using the same 2-replica application. The results show that the enhanced algorithm significantly improves the system's ability to deliver services at the best possible performance level, even in highly failure-prone environments.

## 6. Conclusion
In this paper, we presented a performability-oriented framework for software rejuvenation in stateful distributed applications. The framework, built on a rejuvenation algorithm, performability metrics, and a performability model, enables error-prone distributed applications to deliver services at the best possible performance level. Our work demonstrates the feasibility of integrating software rejuvenation as a core part of the infrastructure in stateful distributed applications, ensuring graceful degradation and high availability.

Future work will focus on extending the framework to more complex distributed systems and exploring additional mechanisms to further enhance performability.