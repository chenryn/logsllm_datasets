Line 是不是 immutabie 类(Line.java)
getstartY()
getstartx()
( return endPcint.getx(); }
f return startPoint.getx(); l
return startPoint.getyil;
Immutable-
"- + endPoint + " ”";
想破坏它也没办法
8
---
## Page 107
[下南i的 MutablePerson类（List 2-9）与ImmutablePerson 类（List 2-10）是本章
6
public final class MutablePerson (
package person;
那么，接下来就是问题了。这两个类中，
以这两个类都放在相同的person包里），
计 lmmutablePerson 类可以使用getName 方法与 getAddress 方法访间数据（所
MutablePerson 的i getName 方法与 getAddress 方法不是 public 也不是 private,而
ImmutablePerson类的实例产生后，字段的值就不会变化了（immutable）。
MutablePerson类的实例产生后，其字段值还可以变化（mutable）。而
中曾提到的成对的mutable类与immutable类，
问题2-6（用mutable的实例制作出immutable的实例）
是在哪里呢？
List 2-9
使用默认的访问权限（只有同－个包（packagc）内可以访问）：这只是为了
public synchrorized vcid setPersontString newName, String
publie MutablePerson(String rame, String address)
private Sring name;
public Str.ng tostrirgi) {
publie irt gety() ↑ returr. y; }
publzc Pcint(irt x, int y) [
public MutablePersonfImmutablePerson person) 1
private String address;
this.address = person.getAddress();
this.name = person.getNane();
this.address = address;
this.name = rame; 
this.y =
this.x - x
MutablePerson 类 (MutablePerson.java)
 return x;
，还存在有·些安全性上的漏洞，请问
1
---
## Page 108
public firal class ImmutablePerscn
package person;
newAddress)
List 2-10
public ImmutablePerson(MutablePerson person) {
public ImmutablePerson(String rame, String address) {
private final String aadress;
private final String name;
public synchronized String tostring() {
Scri:g getAadress()
 String getName() f /' Called only by ImmutablePerson
{ublic syrchronized ImmutablePerson getimmutablePersor() ↑
public Strirg getkame() f
public l
this.rame = person.getName ();
this.name = rame; 
"+ ssaippe +.‘ + aweu + iuosiaaiqen l. uxne 
return new MutablePerson(this);
this.address = person-getAddressi):
return aadress;
returr name;
 return new ImmutablePerson(this); 
address = newAddress;
rame - newkamei
return rame;
this.addresｓ
 MutablePerson getMutablePerson() I
ImmutablePerson 类(ImmutablePerson.java )
addréss;
( // Called only by ImmutablePerson
Immutable-
想破坏它也没办法
带2
---
## Page 109
格a多线程设谢模武
publio String tostring() i
public String
return address;
---
## Page 110
Suspension-
Guarded
要等到我准备好
第3章
---
## Page 111
将:RequestQucuc称为被动对象（passive object），
的长示法）。我们将:ClicntThrcad 与:ServerThread称为主动对象（active object），
沟通。类的说明如表3-1所示，
另外个线程（ServerThread）传递请求（Request）的实例。这是非常简单的线程
形表示该对象与线程有相关性，意即该对象可以主动地调用方法（这是UML规定
的说明部分。
们请邮递员在门外等候，以保障自己的隐私权－样。
这就是 Guarded Suspension Pattern 。
意思。当现在并不适合与上执行某个操作时，就要求想要执行该操作的线程等待，
衣服换完以后，再把门打开，说句“让您久等了”……
衣服换到·半不能开门，所以就先说出“请等我
$
Main
Server'l hread
Clieni Thread
RequestQueue
Request
范例程序
   s     ussns pn 
 Guarded Suspension Pattern
Guarded Suspension Patterm 会要求线程等候，
这张图里面，：ClientThread与：ServerThread的边框以粗线表示。粗边框的长方
首先我们要看的是范例程序。这里所写的程序，
范例程序的顺序图如图3-1所示。
这章要学习的是Guarded Suspension Patterm。
在家里正当换衣服的时候，忽然客厅门铃响了，原来是邮递员送信来了。因为
名
称
表3-1类一览表
操作测试用的类
接受请求的类
送出请求的类
依次存放请求以待使用的类
用米表示“请求”的类
，以保障实例的安全性。正如同我
下！"，请邮递员在外面稍等。当
说
是个线程（ClientThread）对
，suspension 则是“暂停”的
强
---
## Page 112
作为从 ClientThread 传递给 ServerThread的实例，所以没有定义特殊的处理。Request
Request 类
是
个只有存放名称（name字段）的类。
Request类（List3-i）是用来表示请求。
:ClhientThrcad
putRequest
putRequest
putRequest
图3-”范例程序的顺序图
RequestQucue
Guarded Suspension--
+
getRequest
getRequest
.gctRequest
，虽说是请求，但在这里只不过是用来
:ServerThrcad
一要等到我准备好喔
putRequest为 tt:
Wait直到
特3
---
## Page 113
也是队列的-种。
队列（queue），或是FIFO（First In First Out）。例如，在银行的服务柜台前排队，
getRequest 方法按塞入的顺序获取Request 的实例。像这样的结构，我们通常称之
putRequest 方法
 getRequest 方法
与 putRequest 两个方法：
RequestQueue 类
9
作为返问值。
-个Request的实例时，就会调旧这个方法。
也就是说，RequestQueuc 可使川 putRequest 方法塞入Request 的实例，并可用
使用putRequest 方法，可以增加1个请求。当线程想要在 RequestQueue 中新增
getRequest方法会从 RequestQueue 里所存放的请求中,将最早传入的一-个取出，
RequestQueue 类（List 3-2）是旧来依次存放请求的类。这个类拥有 getRequest 
public class RequestQueue
import java.util.LinkedList;
public class Request f
List 3-2
private finalLinkedlist
List 3-1 :
public synchronized Request getRequest() l
public String tostring()
public Strirg getName() {
private final String name;
public Request(String name)
 return name;
this.rame = name;
如果没有任何-个请求存在，就等待其他线程 putRequest。
存放请求用的 RequestQueue类（RequestQueue.java)
表示请求的 Requesi 类（Requestjava)
queue = new LinkedList():
---
## Page 114
类
名为"No.O"、"No.1"、"No.2"、………"。
ClientThread 类
产生范围在0以上而未满1000的随机数，sleep这个长度的时间（单位为 ms）。
为了动态变动送出请求（调用 putRequest）的时机，
public class ClientThread extends Thread 
ClientThread类（List 3-3）是用来表示送出请求的线程。（
long seedl {
import java.util.Randon;
●getRequest、putRequest 都是 synchronized 方法：
这个 List 3-2在后面还会详细地讨论，在这里就只先提示一些关键的地方。
心
List 3-3
在 putRequest 里，要调用 notifyAll。
在 while 语句之后，才进行实例想做的处理（removeFirst);
在while 的块中会调州 wait：
getRequest的前面有while语句，用米测试条件是否成立；
 public ClientThread (RequestQueue requestQueue, String name,
private RequestQueue requestQueue;
private Random random;
public synchronized void putRequest (Request request) (
this.random = new Random(seed);
this.requestQueue = requestQueue;
superiname);
notifyAll();
queue.addLast (request);
return (Request)queue.removeFirst();
送出请求用的 ClientThread 类（ClientThread.java）
} catch (InterruptedException el l
try
wait();
一
Guarded Suspension-
所以使用java.util.Random
一要等到我准备好喔
，请求的名称依次命
ClientThread 拥有
紫3
9
---
## Page 115
的实例（requestQueue）。ServerThrcad 类会调用 getRequest 方法获取请求，
ServerThread 类
8
ServerThread 类（List 3-4）是川来接受请求的线程。这个类也拥有 RequestQueue
public class ServerThread extenis Thread
与j ClientThread 相同，ServerThread 类也使用随机数动态地 sleep。
long seedj { 
import java.util.Random;
" handles "+ request};
List 3-4
" requests "+ request);
public void runi) {
 public ServerThread(RequestQueue requestQueue, String name,
private RequestQueue requestQueue;
private Randcm random;
public void run() {
this.random = new Random(seed);
this.requestQueue = requestQueue;
super(name);
fcr （in i = 0; i < 10c00; i++) l
try i
System.out.println(Thread.currertThread(!.getName ()
接受请求用的 ServerThread 类（ServerThread java）
} catch (:nterruptedFxception e) {
requestQueue.putReguest (request);
Request request = new Request("No." + i);
try l 
Thread.sleep(random.next nt (100o) ) ;
Thread.sleep(random.nextInt (l0o0));
---
## Page 116
则不停地处理请求（handles）。
都传入requestQueue 对象，并·start 之。
并建立名为 Alice 的 ClientThread 实例和名为 Bobby 的 ServerThread 实例，对两者
Main 类
public class Main {
3141592L及6535897L只是用米作为随机数的起始值，并无特别意义。
在Main类之（List 3-5）首先会建立RequestQueue 的实例（requestQueue）。
以下省略，CTRL+C结束程序}
Bobby handles
Alice
Alice
Bobby
Alice
Bobby
Alice
Bobby
Bobby
Alice
Bobby handles
Alice requests 
List 3-5
public static void main(string[] args) I
reguests
handies 
 requests
requests
handles 
requests
handles
 reguests
 handles 
new ServerThread (requestQueue,
new ClientThread(requestQueue, "Alice", 3141592L).start ();
 RequestQueue requestQueue = new RequestQueue(};
Main类(Main.java)
}catch (InterruptedException e) [
Reguest
Request
Request
Request 
Request No.0
 Requet
Request 
Request
Request
Request.
Request
Request 
Request
图3-2执行范例
No.6
No.5
. No .6
No.4
No.3
No.3
No.1
No.1
 Guarded Suspension-
No.4
No.2
No.2
Na.0
"Hobby", 6535897L).start11:
+Bobby处理请求No.5、No.6
+Alice送出请求No.5.No.6
+Bobby 处理请求No.4
一Alice送出请求No.4
←Bobby处理请求No.3
+Alice送出请求No.3
一Bobby处理请求No.1、No.2
+Alice送出请求No.l.No.2
+Bcbby 处理请求No.①
Alice送出请求No.0
要等到我准备好喔
6
---
## Page 117
条件才行。条件是“元素数要大于0”，意即“元素有1个以上”。像这样，我们将
月的是“从queue 里取出一个Request 的实例”。也就是说执行
仔细分析 getRequest 方法