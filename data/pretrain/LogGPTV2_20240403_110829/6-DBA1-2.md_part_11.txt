\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| autocommit \| OFF \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
#### 隔离性
终端1关闭了自动提交后,终端2未生效,还是ON
终端1修改的数据必须手动提交(commit),终端2才能看得到;
终端1修改数据没手动提交之前可以进行数据回滚(rollback),恢复操作前的数据;
#### 事务特点ACAD实例操作:
mysql\> create table t6(id int)engine=innodb; #创建t6表,指定存储为innodb
Query OK, 0 rows affected (0.20 sec)
mysql\> insert into t6 values(999);
mysql\> select \* from t6;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
ysql\> show variables like \"%autocommit%\"; #查看终端默认自动提交状态
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| autocommit \| ON \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set autocommit=off; #终端1关闭自动提交
Query OK, 0 rows affected (0.00 sec)
mysql\> show variables like \"%autocommit%\"; #终端1查看确保自动提交关闭
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| autocommit \| OFF \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
\[root@sql51 \~\]# mysql -uroot -p123456 #终端2登录mysql
mysql\> use db3 #终端2进入db3库
mysql\> delete from t6; #终端1删除t6表
Query OK, 1 row affected (0.00 sec)
mysql\> select \* from t6; #终端1查看t6表,已无数据,终端1未提交
Empty set (0.00 sec)
mysql\> mysql\> select \* from t6; #终端2查看t6表还能看到数据
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> rollback; #终端1提交前进行回滚
Query OK, 0 rows affected (0.03 sec)
mysql\> select \* from t6; #终端1又能看到之前的数据
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> insert into t6 values(666); #终端1修改
Query OK, 1 row affected (0.01 sec)
mysql\> select \* from t6; #终端1查看能看到新增数据
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
\| 666 \|
+\-\-\-\-\--+
2 rows in set (0.00 sec)
mysql\> select \* from t6; #终端2上查看还是看不到,终端1未提交
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> commit ; #终端1提交之后
Query OK, 0 rows affected (0.03 sec)
mysql\> select \* from t6; #终端2查看就能看到新增的数据了
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 999 \|
\| 666 \|
+\-\-\-\-\--+
2 rows in set (0.00 sec)
## 实际环境中如何决定一个表使用哪种存储引擎
查询表记录:查询(select)操作多的表适合选用myisam存储引擎,节省系统资源
myisam**表级锁:**只要对表做访问,整张表被锁上
读锁(共享锁):支持并发读
插入表记录:写入(insert update
delete)操作多的表适合选用innodb存储引擎,并发访问量大
innodb**行级锁**:只给访问的每一行记录分别加锁,
写锁(排他锁/互斥锁):独占锁,上锁期间,其他线程不能读表或写表
到此建表知识点完毕!
## 二 数据导入/导出
## 2.1设置搜索路径
### 查看默认使用目录及目录是否存在
导入导出默认检索数据库文件的路径
mysql\> show variables like \"secure_file_priv\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| secure_file_priv \| /var/lib/mysql-files/ \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
\[root@sql51 \~\]# ls -ld /var/lib/mysql-files/
drwxr-x\-\--. 2 mysql mysql 6 11月 29 2016 /var/lib/mysql-files/
### 修改默认使用目录及目录
\[root@sql51 \~\]# mkdir /mydatadir
\[root@sql51 \~\]# chown mysql /mydatadir #设置属组为mysql
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
secure_file_priv=\"/myload\" #指定默认检索目录
\[root@sql51 \~\]# systemctl restart mysqld
mysql\> show variables like \"secure_file_priv\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+
\| secure_file_priv \| /mydatadir/ \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.01 sec)
## 2.2 数据导入
导入作用:把系统文件的内容存储到数据库服务器的表里面
命令格式:load date infile "目录名/文件名" Into table 表名
> Fields terminated by "分隔符" lines terminated by "\\n";
注意事项:字段分隔符要与文件内的一致
> 指定导入文件的绝对路径
>
> 导入数据的表字段类型要与文件字段匹配
>
> 禁用selinux 保护机制
### 数据导入课堂实例:
把/etc/passwd文件的内容存储到db3库下的user表里面.并给每一行记录添加编号字段.
\[root@sql51 \~\]# mkdir /mydatadir
\[root@sql51 \~\]# chown mysql /mydatadir #赋予权限
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
secure_file_priv=\"/mydatadir\"
\[root@sql51 \~\]# systemctl restart mysqld
\[root@sql51 \~\]# mysql -uroot -p123456 db3 #登录mysql并进入读db3库
mysql\> create table user(
-\> name char(35),
-\> password char(1),
-\> uid int,
-\> gid int,
-\> comment char(150),
-\> homedir char(100),
-\> shell varchar(100),
-\> index(name) );
Query OK, 0 rows affected (0.03 sec)
mysql\> desc user; #查看表结构
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| name \| char(35) \| YES \| MUL \| NULL \| \|
\| password \| char(1) \| YES \| \| NULL \| \|
\| uid \| int(11) \| YES \| \| NULL \| \|
\| gid \| int(11) \| YES \| \| NULL \| \|
\| comment \| char(150) \| YES \| \| NULL \| \|
\| homedir \| char(100) \| YES \| \| NULL \| \|
\| shell \| varchar(100) \| YES \| \| NULL \| \|
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
7 rows in set (0.01 sec)
mysql\> system cp /etc/passwd /mydatadir/
#将passwd文件复制到默认检索目录
mysql\> system ls /mydatadir/
passwd
mysql\> load data infile \"/mydatadir/passwd\" into table user fields
terminated by \":\" lines terminated by \"\\n\"; #导入数据,
Query OK, 41 rows affected (0.01 sec)
Records: 41 Deleted: 0 Skipped: 0 Warnings: 0
mysql\> alter table user add id int primary key auto_increment first;
#插入id
Query OK, 41 rows affected (0.07 sec)
Records: 41 Duplicates: 0 Warnings: 0
mysql\> select \* from user #查看数据
## 2.3 数据导出
导出作用:把表记录导出到文件
命令格式:sql查询 into outfile "目录名/文件名"
> Fields terminated by "分隔符" #可单独指定
>
> lines terminated by "\\n" #可单独指定
注意事项:导出的内容由sql查询语句决定
> 导出的文件路径必须是 secure_file_priv(默认搜索路径) 指定的目录里面
>
> 导出的是表中的记录,不包括字段名
>
> 导出的/目录/文件名 必须唯一,不能有重复
>
> 禁用SElinux
### 数据导出课堂实例:
mysql\> select \* from user into outfile \"/mydatadir/a1.txt\";
Query OK, 41 rows affected (0.00 sec)
mysql\> system ls /mydatadir
a1.txt passwd
mysql\> system cat /mydatadir/a1.txt;
mysql\> select \* from user where id \ system ls /mydatadir
a1.txt a2.txt passwd
mysql\> system cat /mydatadir/a2.txt;
mysql\> select name,uid,shell from user where id \ system ls /mydatadir
a1.txt a2.txt a3.txt passwd
mysql\> system cat /mydatadir/a3.txt
root 0 /bin/bash
bin 1 /sbin/nologin
daemon 2 /sbin/nologin
adm 3 /sbin/nologin
lp 4 /sbin/nologin
导出数据,并指定分隔符"#"与换行符"!!!"
mysql\> select name,uid,shell from user where id \ system cat /mydatadir/a4.txt
root#0#/bin/bash!!!bin#1#/sbin/nologin!!!daemon#2#/sbin/nologin!!!adm#3#/sbin/nologin!!!lp#4#/sbin/nologin!!!mysql\>
## 三 管理表记录:
## 3.1增加表记录(insert):
### 格式1:增加1条记录
Insert into 表名 values(字段值列表);
### 格式2:增加N条记录
Insert into 表名 values(字段值列表),(字段值列表)(字段值列表);
### 格式3:增加1条记录,给指定字段赋值
Insert into 表名(字段名列表) values(字段值列表);
### 格式4:增加N条记录,给指定字段赋值
Insert into 表名(字段名列表)
values(字段值列表),(字段值列表)(字段值列表);
### 注意事项
-   字段值要与字段类型相匹配
-   对于字符类型的字段,要用双或者单引号括起来
-   依次给所有字段赋值时,字段名可以省略
-   只给一部分字段赋值时,必须明确写出对应的字段名称
## 3.2查询表记录(select):
### 格式1:无条件
select 字段1,\...,字段N from 表名;
### 格式2:带条件
select 字段1,\...,字段N from 表名 where 条件表达式;
### 注意事项:
-   使用\*可匹配所有字段
-   指定表名时,可采用 库名.表名 形式
## 3.3更新记录(update):
### 格式1:更新表内所有记录
Update set 字段1=新值,字段2=新值,字段n=新值;
### 格式2:只更新符合条件的部分记录
Update set 字段1=新值,字段2=新值,字段n=新值; where 条件表达式
### 注意事项:
-   字段值要与字段类型相匹配
-   对于字符类型的字段,要用双或者单引号括起来
-   若不使用where 限定条件,会更新所有记录
-   限定条件时,只是更新匹配条件的记录
## 3.4删除表记录(delete)
### 格式1:仅删除符合条件的记录
Delete from 表名 where 条件表达式;
### 格式2:删除所有表记录