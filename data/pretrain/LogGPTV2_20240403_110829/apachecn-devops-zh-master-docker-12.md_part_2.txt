# docker daemon configuration(Docker 守护程序配置)
本指南的这一部分提供了保护正在运行的 Docker 守护程序的建议。您对 Docker 守护程序配置所做的一切都会影响每个容器。这些开关可以连接到我们之前看到的 Docker 守护程序，也可以连接到我们在下一节运行该工具时看到的项目。
# 停靠守护程序配置文件
指南的这一部分涉及 Docker 守护程序使用的文件和目录。范围从权限到所有权。有时，这些区域可能包含您不想让其他人知道的信息，这些信息可能是纯文本格式的。
# 容器映像/运行时和构建文件
指南的这一部分包含保护容器映像和构建文件的信息。
第一部分包含映像、封面基本映像和使用的构建文件。正如我们之前介绍的，您需要确定您正在使用的映像，不仅是基础映像，还有 Docker 体验的任何方面。本指南的这一部分涵盖了创建自己的基本映像时应遵循的事项。
# 容器运行时
本节以前是后面一节的一部分，但在 CIS 指南中，它已被移到自己的部分。容器运行时涵盖了许多与安全相关的项目。
小心您正在使用的运行时变量。在某些情况下，当你认为你在利用他们为自己谋利时，攻击者可以利用他们。在容器中暴露太多，例如将应用机密和数据库连接暴露为环境变量，不仅会危及容器的安全，还会危及 Docker 主机和在该主机上运行的其他容器的安全。
# Docker 保安业务
指南的这一部分涵盖了涉及部署的安全领域；这些项目与 Docker 最佳实践联系更紧密。正因为如此，最好遵循这些建议。
# Docker Bench 安全应用
在本节中，我们将介绍您可以安装和运行的 Docker Benchmark 安全应用。该工具将检查以下内容:
*   主机配置
*   Docker 守护程序配置
*   Docker 守护程序配置文件
*   容器映像和构建文件
*   容器运行时
*   Docker 安全行动
*   DockerSwarm 配置
眼熟吗？它应该，因为这些是我们在上一节中回顾过的相同的项目，只构建到一个将为您做大量繁重工作的应用中。它将向您显示在您的配置中出现了哪些警告，并将提供关于其他配置项的信息，甚至是已经通过测试的项。
现在，我们将看看如何运行这个工具，一个真实的例子，以及这个过程的输出意味着什么。
# 在 macOS 的 Docker 和 Windows 的 Docker 上运行该工具
运行工具很简单。它已经为我们包装好了，在一个 Docker 容器里面。虽然您可以获取源代码并定制输出或以某种方式对其进行操作(例如，通过电子邮件发送输出)，但默认设置可能是您所需要的。
该工具的 GitHub 项目可以在[https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/)找到，要在 macOS 或 Windows 机器上运行该工具，您只需将以下内容复制并粘贴到您的终端中。以下命令缺少检查`systemd`所需的行，因为作为 macOS 的 Docker 和 Windows 的 Docker 的底层操作系统的莫比 Linux 不运行`systemd`。我们将很快看到一个基于 T2 的系统:
```
$ docker run -it --net host --pid host --cap-add audit_control \
 -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
 -v /var/lib:/var/lib \
 -v /var/run/docker.sock:/var/run/docker.sock \
 -v /etc:/etc --label docker_bench_security \
 docker/docker-bench-security
```
下载映像后，它将启动并立即开始审核您的 Docker 主机，同时打印结果，如下图所示:
![](img/6fa485b2-d0d5-45fe-ba81-74a1a26e9697.png)
可以看到，有几个警告(`[WARN]`)，还有备注(`[NOTE]`)和信息(`[INFO]`)；然而，正如您所料，由于该主机由 Docker 管理，因此无需过多担心。
# 在 Ubuntu Linux 上运行
在我们更详细地查看审计输出之前，我将在 DigitalOcean 中启动一个普通的 Ubuntu 16.04.5 LTS 服务器，并使用 Docker Machine 执行 Docker 的干净安装，如下所示:
```
$ DOTOKEN=0cb54091fecfe743920d0e6d28a29fe325b9fc3f2f6fccba80ef4b26d41c7224
$ docker-machine create \
 --driver digitalocean \
 --digitalocean-access-token $DOTOKEN \
 docker-digitalocean
```
一旦安装好了，我会推出几个容器，它们都没有非常明智的设置。我将从 Docker Hub 启动以下两个容器:
```
$ docker container run -d --name root-nginx -v /:/mnt nginx
$ docker container run -d --name priv-nginx --privileged=true nginx
```
然后，我将基于 Ubuntu 16.04 构建一个自定义映像，使用以下`Dockerfile`运行 SSH:
```
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo 'root:screencast' | chpasswd
RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
ENV NOTVISIBLE "in users profile"
RUN echo "export VISIBLE=now" >> /etc/profile
EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]
```
我将使用以下代码构建并启动它:
```
$ docker image build --tag sshd .
$ docker container run -d -P --name sshd sshd
```
如您所见，在一张图片中，我们正在`root-nginx container`中装载具有完全读/写访问权限的主机的根文件系统。我们也在`priv-nginx`中以扩展权限运行，最后，在`sshd`中运行 SSH。
为了在我们的 Ubuntu Docker 主机上开始审计，我运行了以下内容:
```
$ docker run -it --net host --pid host --cap-add audit_control \
 -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
 -v /var/lib:/var/lib \
 -v /var/run/docker.sock:/var/run/docker.sock \
 -v /usr/lib/systemd:/usr/lib/systemd \
 -v /etc:/etc --label docker_bench_security \
 docker/docker-bench-security
```
当我们运行在支持`systemd`的操作系统上时，我们正在挂载`/usr/lib/systemd`，以便我们可以对其进行审计。
产出很多，消化的也很多，但这一切意味着什么？让我们来看看并分解每个部分。
# 理解输出
我们将看到三种类型的输出，如下所示:
*   **`[PASS]`** :这些物品都很结实，很好走。它们不需要任何关注，但很好读，让你内心感到温暖。这些越多越好！
*   `[WARN]`:这些都是需要固定的项目。这些是我们不想看到的东西。
*   `[INFO]`:如果您觉得这些项目与您的设置和安全需求相关，那么您应该检查并修复这些项目。
*   `[NOTE]`:这些给出了最佳实践建议。
如前所述，审计包括以下七个主要部分:
*   主机配置
*   docker daemon configuration(Docker 守护程序配置)
*   停靠守护程序配置文件
*   容器映像和构建文件
*   容器运行时
*   Docker 保安业务
*   DockerSwarm 配置
让我们看看我们在扫描的每个部分看到了什么。这些扫描结果来自默认的 Ubuntu Docker 主机，此时不会对系统进行任何调整。我们要关注每一节的`[WARN]`项。当你运行你的程序时，可能会出现其他警告，但这些警告首先会出现在大多数人身上(如果不是所有人的话)。
# 主机配置
我的主机配置有五个状态为`[WARN]`的项目，如下所示:
```
[WARN] 1.1 - Ensure a separate partition for containers has been created
```
默认情况下，Docker 在主机上使用`/var/lib/docker`存储其所有文件，包括默认驱动程序创建的所有映像、容器和卷。这意味着此文件夹可能会快速增长。由于我的主机运行单个分区(取决于您的容器正在做什么)，这可能会填满整个驱动器，从而使我的主机不可用:
```
[WARN] 1.5 - Ensure auditing is configured for the Docker daemon
[WARN] 1.6 - Ensure auditing is configured for Docker files and directories - /var/lib/docker
[WARN] 1.7 - Ensure auditing is configured for Docker files and directories - /etc/docker
[WARN] 1.10 - Ensure auditing is configured for Docker files and directories - /etc/default/docker
```
这些警告被标记是因为`auditd`未安装，并且没有针对 Docker 守护程序和相关文件的审核规则；更多关于`auditd`的信息，请查看[的博文。](https://www.linux.com/learn/customized-file-monitoring-auditd/)
# docker daemon configuration(Docker 守护程序配置)
我的 Docker 守护程序配置标记了八种`[WARN]`状态，如下所示:
```
[WARN] 2.1 - Ensure network traffic is restricted between containers on the default bridge
```
默认情况下，Docker 允许流量在同一主机上不受限制地在容器之间传递。有可能改变这种行为；有关 Docker 网络的更多信息，请参见[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)。
```
[WARN] 2.5 - Ensure aufs storage driver is not used
```
在 Docker 早期，AUFS 被大量使用；但是，它不再被认为是最佳实践，因为它可能负责主机内核中的问题: