    static const u8* trampoline_fmt_64 =
      "\n"
      "/* --- AFL TRAMPOLINE (64-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leaq -(128+24)(%%rsp), %%rsp\n"
      "movq %%rdx,  0(%%rsp)\n"
      "movq %%rcx,  8(%%rsp)\n"
      "movq %%rax, 16(%%rsp)\n"
      "movq $0x%08x, %%rcx\n"
      "call __afl_maybe_log\n"
      "movq 16(%%rsp), %%rax\n"
      "movq  8(%%rsp), %%rcx\n"
      "movq  0(%%rsp), %%rdx\n"
      "leaq (128+24)(%%rsp), %%rsp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";
经过整理，最终插入的汇编码分别是：
    /* --- AFL TRAMPOLINE (32-BIT) --- */
    .align 4
    leal -16(%esp), %esp
    movl %edi,  0(%esp)
    movl %edx,  4(%esp)
    movl %ecx,  8(%esp)
    movl %eax, 12(%esp)
    movl $0x%08x, %ecx
    call __afl_maybe_log
    movl 12(%esp), %eax
    movl  8(%esp), %ecx
    movl  4(%esp), %edx
    movl  0(%esp), %edi
    leal 16(%esp), %esp
    /* --- END --- */
    /* --- AFL TRAMPOLINE (64-BIT) --- */
    .align 4
    leaq -(128+24)(%rsp), %rsp
    movq %rdx,  0(%rsp)
    movq %rcx,  8(%rsp)
    movq %rax, 16(%rsp)
    movq $0x%08x, %rcx
    call __afl_maybe_log
    movq 16(%rsp), %rax
    movq  8(%rsp), %rcx
    movq  0(%rsp), %rdx
    leaq (128+24)(%rsp), %rsp
    /* --- END --- */
⚠️：此处的`%08x`由`(random() % ((1 `（`#
BB#0`或`#
BB#0`在`Clang`中表示注释），表示当前行以及其下面的行不是一个有效的待插桩代码行，应当予以跳过，直到遇到结束标识使得对应标志位清除或置位。那么，`afl-as`将执行， **忽略以下流程，继续循环，读取下一行待插桩文件** 的操作。
#### 分支跳转代码插桩——插入调用`__afl_maybe_log`的汇编码
我们接下来检测条件跳转指令(例如：`jnz`、`jz`之类的语句)，`afl-as`为了标记此处将会有另一条分支并期望在后续的测试过程中覆盖另一条分支，将在跳转指令之后插入`trampoline_fmt_64`/`trampoline_fmt_32`(取决于`use_64bit`标志位状态)，关于这两段代码上文已分析过，此处不再赘述。
注意，`JMP`表示无条件跳转，因此其另一条分支将永远不会被运行到，那么将不会影响代码覆盖率，因此不在`JMP`指令后插桩。
那么，此处插桩逻辑为：若此行代码的第一个字符为`\t`，则再次检测第二个字符是不是`j`，若是，再检查第三个字符是不是`m`，若不是则进行插桩逻辑，插桩结束后将桩代码计数器`ins_lines`加一。无论第二个第三个字符为什么，只要第一个字符为`\t`，则
**忽略以下流程，继续循环，读取下一行待插桩文件**
#### 对标签段进行处理(`Label`)
若此行代码中有`:`字符但是第一个字符不是`.`字符，则将`instrument_next`置位(此标志位表示下一条语句是有效语句，将在`代码插桩——插入调用__afl_maybe_log的汇编码(Ⅰ)`过程中使用)，随后
**继续循环，读取下一行待插桩文件** 。
若此行代码中有`:`字符且第一个字符是`.`字符且满足下列情况之一：
  * 第三个字符是数字且`inst_ratio`大于`random(100)`
  * `clang_mode`置位且此行的前四个字符是`.LBB`且`inst_ratio`大于`random(100)`
则执行对`skip_next_label`的检查，若此标志位清除，则将`instrument_next`置位，随后 **继续循环，读取下一行待插桩文件**
。
若此行代码中有`:`字符且第一个字符是`.`字符但不满足上述情况之一， **继续循环，读取下一行待插桩文件** 。
至此，循环正式结束。
#### 末尾代码插桩——插入`AFL`主逻辑汇编码
最后，若桩代码计数器`ins_lines`不为0，那么将`main_payload_64`/`main_payload_32`(取决于`use_64bit`标志位状态)插入整个汇编文件末尾。
限于篇幅，此处的代码将在下一篇文章中予以说明。
## 0x05 后记
虽然网上有很多关于`AFL`源码的分析，但是绝大多数文章都是抽取了部分代码进行分析的，本文则逐行对源码进行了分析，下一篇文章将针对`afl-as`源码做下一步分析并给出相关实例。