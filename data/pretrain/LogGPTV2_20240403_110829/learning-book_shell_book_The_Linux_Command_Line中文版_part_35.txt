sync
ganes
man
1p
mai1
nevs
使用-d选项，我们能够指定冒号做为字段分隔符。
285
---
## Page 287
21.3.2paste
中抽取文本列。它通过读取多个文件，然后把每个文件中的字段整合成单个文本流，输入到标
准输出。类似于cut命令，paste接受多个文件参数和/或标准输入。为了说明paste是怎样
工作的，我们将会对distros.txt文件动手术，来产生发行版的年代表。
从我们之前使用sort的工作中，首先我们将产生一个按照日期排序的发行版列表，并把结
果存储在一个叫做distros-by-date.txt 的文件中：
[ne@linuxbox -]$ sort -k 3.7nbr -k 3.1nbr -k 3.4nbr distros.txt > distros-by-date.txt
下一步，我们将会使用cut命令从文件中抽取前两个字段（发行版名字和版本号），并把结
果存储到一个名为distro-versions.txt 的文件中：
[ne@linuxbox -]$ cut -f 1,2 distros-by-date.txt > distros-versions.txt
[neglinuxbox -]s head distros-versions.txt
Fedora
10
Ubuntu
8.10
SUSE
11.0
Fedora
Ubuntu
8.04
Fedora
00
Ubuntu
7.10
SUSE
10.3
Fedora
7
Ubuntu
7.04
最后的准备步骤是抽取发行日期，并把它们存储到一个名为distro-dates.txt文件中：
[ne@linuxbox -]$ cut -f 3 distros-by-date.txt > distros-dates.txt
[ne@linuxbox -]$ head distros-dates.txt
11/25/2008
10/30/2008
06/19/2008
05/13/2008
286
---
## Page 288
04/24/2008
11/08/2007
10/18/2007
10/04/2007
05/31/2007
04/19/2007
现在我们拥有了我们所需要的文本了。为了完成这个过程，使用paste命令来把日期列放到
发行版名字和版本号的前面，这样就创建了一个年代列表。通过使用paste命令，然后按照期
望的顺序来安排它的参数，就能很容易完成这个任务。
[ne@linuxbox -]$ paste distros-dates.txt distros-versions.txt
11/25/2008 Fedora
10
10/30/2008 Ubuntu
8.10
06/19/2008 SUSE
11.0
05/13/2008 Fedora
04/24/2008 Ubuntu
8.04
11/08/2007 Fedora
00
10/18/2007 Ubuntu
7.10
10/04/2007SUSE
10.3
05/31/2007 Fedora
7
04/19/2007 Ubuntu
7.04
21.3.3  join
在某些方面，join命令类似于paste，它会往文件中添加列，但是它使用了独特的方法来完成。
一个join操作通常与关系型数据库有关联，在关系型数据库中来自多个享有共同关键域的表格
的数据结合起来，得到一个期望的结果。这个join程序执行相同的操作。它把来自于多个基于
共享关键域的文件的数据结合起来。
为了知道在关系数据库中是怎样使用join操作的，让我们想象一个很小的数据库，这个数
据库由两个表格组成，每个表格包含一条记录。第一个表格，叫做CUSTOMERS，有三个数
据域：一个客户号（CUSTNUM），客户的名字（FNAME）和客户的姓（LNAME）：
KONISOO
FNAME
ME
287
---
## Page 289
4681934
John
Snith
第二个表格叫做ORDERS，其包含四个数据域：订单号（ORDERNUM）.客户号（CUSTNUM）
数量（QUAN）.和订购的货品（ITEM）。
ORDERNUM
HOKISNO
QUAN ITEM
3014953305
4681934
1
Blue Widget
注意两个表格共享数据域CUSTNUM。这很重要，因为它使表格之间建立了联系。
执行一个join操作将允许我们把两个表格中的数据域结合起来，得到一个有用的结果，例
如准备一张发货单。通过使用两个表格CUSTNUM数字域中匹配的数值，一个join操作会产
生以下结果：
FNAME
LNAME
QUAN ITEH
John
Smith
1
Blue Widget
为了说明join程序，我们需要创建一对包含共享键值的文件。为此，我们将使用我们的
distros.txt文件。从这个文件中，我们将构建额外两个文件，一个包含发行日期（其会成为共
享键值）和发行版名称：
[ne@linuxbox -]$ cut -f 1,1 distros-by-date.txt > distros-nanes.txt
[ne@linuxbox -]$ paste distros-dates.txt distros-nanes.txt > distros-key-nanes.txt
[ne@linuxbox -]$ head distros-key-nanes.txt
11/25/2008 Fedora
10/30/2008 Ubuntu
06/19/2008 SUSE
05/13/2008 Fedora
04/24/2008 Ubuntu
11/08/2007 Fedora
10/18/2007 Ubuntu
288
---
## Page 290
10/04/2007 SUSE
05/31/2007 Fedora
04/19/2007 Ubuntu
第二个文件包含发行日期和版本号：
[ne@linuxbox -]$ cut -f 2,2 distros-by-date.txt > distros-vernuns.txt
[ne@linuxbox -]$ paste distros-dates.txt distros-vernums.txt > distros-key-vernuns.txt
[ne@linuxbox -]$ head distros-key-vernuns.txt
11/25/2008 10
10/30/2008 8.10
06/19/2008 11.0
05/13/2008 9
04/24/2008 8.04
11/08/2007 8
10/18/2007 7.10
10/04/2007 10.3
05/31/2007 7
04/19/2007 7.04
现在我们有两个具有共享键值（“发行日期”数据域）的文件。有必要指出，为了使join命
令能正常工作，所有文件必须按照关键数据域排序。
11/25/2008 Fedora 10
10/30/2008 Ubuntu 8.10
06/19/2008 SUSE 11.0
05/13/2008 Fedora 9
04/24/2008 Ubuntu 8.04
11/08/2007 Fedora 8
10/18/2007 Ubuntu 7.10
10/04/2007 SUSE 10.3
05/31/2007 Fedora 7
04/19/2007 Ubuntu 7.04
289
---
## Page 291
也要注意。默认情况下。join命令使用空白字符做为输入字段的界定符，一个空格作为输出
字段的界定符。这种行为可以通过指定的选项来修改。详细信息，参考join命令手册。
21.4比较文本
通常比较文本文件的版本很有帮助。对于系统管理员和软件开发者来说，这个尤为重要。一名
系统管理员可能，例如，需要拿现有的配置文件与先前的版本做比较，来诊断一个系统错误。
同样的，一名程序员经常需要查看程序的修改。
21.4.1comm
这个comm程序会比较两个文本文件，并且会显示每个文件特有的文本行和共有的文把行。为
了说明问题，通过使用cat命令，我们将会创建两个内容几乎相同的文本文件：
[nedlinuxbox -]$ cat > file1.txt
a
[ne@linuxbox -]$ cat > file2.txt
$
下一步，我们将使用comm命令来比较这两个文件
[ne@linuxbox -]$ conm file1.txt file2.txt
正如我们所见到的，comm命令产生了三列输出·第一列包含第一个文件独有的文本行：第
二列，文本行是第二列独有的：第三列包含两个文件共有的文本行。comm支持-n形式的选
290
---
## Page 292
项，这里n代表1，2或3。这些选项使用的时候，指定了要隐藏的列。例如，如果我们只想输
出两个文件共享的文本行，我们将隐藏第一列和第二列的输出结果：
[ne@linuxbox -]$ comm -12 file1.txt file2.txt
b
21.4.2diff
类似于comm程序，dif程序被用来监测文件之间的差异。然而，diff是一款更加复杂的工具
它支持许多输出格式，并且一次能处理许多文本文件。软件开发员经常使用dif程序来检查不
同程序源码版本之间的更改，diff能够递归地检查源码目录，经常称之为源码树。diff程序的一
个常见用例是创建diff文件或者补丁，它会被其它程序使用，例如patch程序（我们一会儿讨
论），来把文件从一个版本转换为另一个版本。
如果我们使用dif程序，来查看我们之前的文件实例：
[ne@linuxbox -]$ diff file1.txt file2.txt
1d0
 e
我们看到dif程序的默认输出风格：对两个文件之间差异的简短描述。在默认格式中，每
组的更改之前都是一个更改命令，其形式为rangeoperationrange，用来描述要求更改的位置
和类型，从而把第一个文件转变为第二个文件：
改变
说明
rlar2
把第二个文件中位置r2处的文件行添加到第一个文件中的
rl处。
rlcr2
用第二个文件中位置r2处的文本行更改（替代）位置r1处
的文本行。
rldr2
删除第一个文件中位置r1处的文本行，这些文本行将会出
现在第二个文件中位置r2处。
291
---
## Page 293
表21-4:diff更改命令
在这种格式中，一个范围就是由逗号分隔开的开头行和结束行的列表。虽然这种格式是默
认情况（主要是为了服从POSIX标准且向后与传统的Unixdif命令兼容），但是它并不像其
它可选格式一样被广泛地使用。最流行的两种格式是上下文模式和统一模式。
当使用上下文模式（带上-c选项），我们将看到这些：
[ne@linuxbox -]s diff -c file1.txt file2.txt
*** file1.txt
2008-12-23 06:40:13.000000000 0500
--- fi1e2.txt 2008-12-23 06:40:34.000000000 0500
***************
***1,4****
-a
b
司
b
U
司
+ e
这个输出结果以两个文件名和它们的时间截开头。第一个文件用星号做标记，第二个文件
用短横线做标记。纵观列表的其它部分，这些标记将象征它们各自代表的文件。下一步，我们
看到几组修改，包括默认的周围上下文行数。在第一组中，我们看到：
*** 1,4 ***
其表示第一个文件中从第一行到第四行的文本行。随后我们看到：
- 1,4 -
292
---
## Page 294
这表示第二个文件中从第一行到第四行的文本行。在更改组内，文本行以四个指示符之一
开头：
293
---
## Page 295
指示符
意思
blank
上下文显示行。它并不表示两个文件之间的差异。
删除行。这一行将会出现在第一个文件中，而不是第二个文
件内。
+
添加行。这一行将会出现在第二个文件内，而不是第一个文
件中。
！
更改行。将会显示某个文本行的两个版本，每个版本会出现
在更改组的各自部分。
表21-5:diff上下文模式更改指示符
这个统一模式相似于上下文模式，但是更加简洁。通过-u选项来指定它：
[ne@linuxbox -]s diff -u file1.txt file2.txt