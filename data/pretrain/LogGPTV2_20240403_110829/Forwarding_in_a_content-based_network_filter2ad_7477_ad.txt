### 3.5, 4, 4.5, 5
**Total Number of Constraints (in millions)**

### Figure 8: Performance of the Forwarding Algorithm (Centralized Architecture)
Figure 8 illustrates a degenerate scenario where a centralized router is modeled, with the forwarding table containing exactly one filter per interface. This represents the worst-case scenario for our algorithm. Despite this, the performance is quite reasonable, with the algorithm taking only about 330 milliseconds to match a message in the presence of over five million constraints, corresponding to approximately one million filters and one million interfaces. The most significant observation from Figure 8 is that our optimization based on the selectivity table is particularly effective in this challenging case, achieving up to a 40% reduction in matching time.

### Figure 9: Performance of the Forwarding Algorithm (Distributed Architecture)
Figure 9 shows that the performance of the forwarding algorithm in scenarios more closely resembling a network of content-based routers, with a fixed number of interfaces, is significantly better. Both the absolute values and the general sublinear behavior are improved. In these cases, the curves with zero rounds of preprocessing are essentially indistinguishable from those with 10 rounds. This indicates that our optimization has no effect in configurations with a high ratio of filters per interface, which is not surprising given that the presence of many filters per interface reduces the overall selectivity of each individual attribute. On the other hand, this also suggests that our optimization does not add measurable cost, even when the simple version of the algorithm is already extremely fast.

### Figure 10: Performance of the Forwarding Algorithm with a Varying Ratio of Filters per Interface
A fundamental parameter in determining the behavior of the algorithm is the ratio of filters to interfaces, while maintaining a fixed total number of constraints (i.e., a fixed number of filters and a fixed forwarding table size). This intuition is confirmed by the results in Figure 10, which effectively demonstrates the impact of handling disjunctions. The graph shows that the forwarding algorithm performs best with very large disjunctions. The left-hand side of Figure 10 again highlights the positive effect of excluding interfaces using the selectivity table.

### 5.3 Sensitivity to the Number of Pre-Processing Rounds
The use of the selectivity table aims to reduce processing time by pre-selecting interfaces that can be safely ignored during the forwarding function. The extent of this reduction depends on two independent factors: the level of selectivity of each name (a characteristic of the predicate set) and the number of preprocessing rounds. As discussed in Section 4.3, adding rounds initially excludes more interfaces from the main processing function. However, after a certain point, this effect diminishes due to the reduced selectivity of names farther down in the selectivity table and the added processing cost per round.

### Figure 11: Cost/Benefit Analysis of the Pre-Processing Function with Varying Number of Rounds
Figure 11 exemplifies the tension between the cost and benefit of the preprocessing function. The two curves represent the advantage of the preprocessing function as a percentage performance gain over the simple counting algorithm. The curve showing the highest advantage corresponds to the case of five million constraints. All experiments were conducted with forwarding tables having one filter per interface. The results show that the preprocessing function becomes ineffective and ultimately a cost after 50 to 70 rounds. We used 10 rounds for all other experiments.

### 5.4 Network Effect
The experiments discussed above evaluate the performance of our forwarding algorithm by examining an individual router. A key question is whether a true network of routers would outperform a single, centralized router under the same heavy workload. We answer this by comparing the end-to-end latency induced by the forwarding function in two scenarios: one with a single router and the other with a combination of interconnected routers. Both scenarios consider a total of one million filters formed from five million constraints, with each filter associated with a distinct destination. This configuration represents the worst case for our optimizations.

In the first configuration (I = F from Figure 8), the latency is about 350 milliseconds, corresponding to the matching time of one run of the forwarding function over the complete set of filters. In the second configuration, using routers with 20 interfaces, we can span the network in at most 12 hops, resulting in a worst-case total latency of only about 40 milliseconds (as shown by the curve for I = 20 in Figure 9). This clearly demonstrates the viability of using a network of routers with an appropriately optimized forwarding function.

### 5.5 Summary of Evaluation
Our experiments have shown that our forwarding algorithm has good absolute performance and good cost amortization across various loads. Specifically:
- The basic short-circuit evaluation of filters greatly reduces processing time when a single message may match a large number of filters.
- The use of the selectivity table improves the ability to short-circuit the forwarding function, reducing matching time by up to 40% in critical cases of routers with numerous interfaces, especially in the extreme case of centralized routers.
- The use of the selectivity table has no measurable costs over the basic algorithm.

In summary, the selectivity table reduces forwarding costs in the most critical cases without adding penalties in other cases where the simple matching algorithm already offers good performance. Our evaluations confirm that our forwarding algorithm is viable under heavy loads, and the proposed optimizations have significant, positive effects.

### 6. Conclusion
In this paper, we present the first algorithm specifically designed for the implementation of the forwarding function of routers in a content-based network. The algorithm refines, adapts, and extends earlier work in centralized content filtering for both large documents and small messages. We formulated a variant of the counting algorithm to handle disjunctive predicates and developed optimizations targeted at the disjunctions that define the semantics of network interfaces in a content-based network.

To evaluate the algorithm, we created an implementation and subjected it to synthetic workloads. The experiments confirmed the algorithm's good overall performance, the validity of our optimization techniques, and the stability of the algorithm even in suboptimal conditions for the optimizations.

In the immediate future, we plan to integrate our algorithm into our prototype content-based network architecture and address the challenge of routing in such networks. Using logical relations between predicates, we have defined the basic concepts of content-based subnetting and supernetting and implemented a routing table. Building on this, we will study and develop optimized data structures for routing and efficient, robust routing protocols for content-based networks.

### Acknowledgments
We thank Jing Deng for his contributions to an earlier version of the forwarding algorithm and Matthew Rutherford and John Giacomoni for their help in testing and improving the implementation. This work was supported in part by the Defense Advanced Research Projects Agency, Air Force Research Laboratory, Space and Naval Warfare System Center, and Army Research Office under agreement numbers F30602-01-1-0503, F30602-00-2-0608, N66001-00-1-8945, and DAAD19-01-1-0484. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes. The views and conclusions expressed herein are those of the authors and do not necessarily represent the official policies or endorsements of the aforementioned agencies.

### References
[References listed as provided in the original text]