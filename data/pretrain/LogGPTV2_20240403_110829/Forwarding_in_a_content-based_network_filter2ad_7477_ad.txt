3.5
4
4.5
5
total number of constraints (millions)
Figure 8: Performance of the Forwarding Algorithm
(Centralized Architecture)
Figure 8 represents the degenerate situation in which we
model a centralized router, namely where the forwarding
table has exactly one ﬁlter per interface. This is the worst
case for our algorithm, yet its performance is arguably quite
reasonable, taking only about 330 milliseconds to match a
message in the presence of over ﬁve million constraints, cor-
responding to more or less one million ﬁlters and one mil-
lion interfaces. The most important observation we make
concerning the graph of Figure 8 is that our optimization
based on the selectivity table is particularly eﬀective in this
extremely diﬃcult case, achieving a reduction of matching
time of up to 40%.
Figure 9 shows that the performance of the forwarding
algorithm in scenarios more closely modeling a network of
content-based routers, with a ﬁxed number of interfaces,
is signiﬁcantly better, both in the absolute values and in
the general sublinear behavior. Notice that in these cases,
the curves with zero rounds are essentially indistinguish-
able from the corresponding ones with 10 rounds of pre-
processing. On the one hand, this says that our optimiza-
tion has no eﬀect in conﬁgurations with a high ratio of ﬁlters
per interface. This is not surprising, since in the presence of
many ﬁlters for each interface, it becomes highly unlikely for
an attribute name to be present in all the ﬁlters of an inter-
face, thus reducing the overall selectivity of each individual
)
s
m
(
e
m
i
t
g
n
i
h
c
t
a
m
40
35
30
25
20
15
10
5
0
matching time per message (I=10,20,40)
I=10,r=10
I=10,r=0
I=20,r=10
I=20,r=0
I=50,r=10
I=50,r=0
I=100,r=10
I=100,r=0
I=200,r=10
I=200,r=0
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
total number of constraints (millions)
Figure 9: Performance of the Forwarding Algorithm
(Distributed Architecture)
attribute. On the other hand, from the same observation,
we can conclude that our optimization does not add mea-
surable cost, even in cases in which the simple version of the
algorithm is already extremely fast.
It would seem that a fundamental parameter in deter-
mining the behavior of the algorithm would be the ratio of
ﬁlters to interfaces, maintaining a ﬁxed total number of con-
straints (i.e., essentially a ﬁxed number of ﬁlters, and a ﬁxed
forwarding table size). This intuition is conﬁrmed by the re-
sults shown in Figure 10. The graph expresses very well the
eﬀect of handling disjunctions, and in particular, it shows
that the forwarding algorithm performs at its best with very
large disjunctions. On the left-hand side of Figure 10, we see
once again the positive eﬀect of excluding interfaces using
the selectivity table.
matching time per message (C=500000)
)
s
m
(
e
m
i
t
g
n
i
h
c
t
a
m
16
14
12
10
8
6
4
2
0
1
r=10
r=0
100000
10
avg number of filters per interface
1000
100
10000
Figure 10: Performance of the Forwarding Algo-
rithm with a Varying Ratio of Filters per Interface
5.3 Sensitivity to the Number of Pre-
Processing Rounds
The idea of using the selectivity table is to reduce the pro-
cessing time by pre-selecting interfaces that can be safely ig-
nored during the forwarding function. The exact amount of
this reduction depends essentially on the combination of two
independent factors. The ﬁrst is the level of selectivity of
each name, which is purely a characteristic of the predicate
set. The second is the number of pre-processing rounds. As
we point out in Section 4.3, the initial eﬀect of adding rounds
is to exclude more interfaces from the main processing func-
tion. However, after a certain point, this eﬀect should fade
due to the reduced selectivity of names farther down in the
selectivity table, and because each round adds a certain pro-
cessing cost that depends on the number of interfaces.
sensitivity of selectivity table reduction (I=F)
)
%
(
e
l
b
a
t
y
t
i
v
i
t
c
e
l
e
s
f
o
e
g
a
t
n
a
v
d
a
60
40
20
0
-20
-40
0
10
0
C=500k
C=5M
90
100
30
20
80
number of preprocessing rounds
60
40
50
70
Figure 11: Cost/Beneﬁt Analysis of the Pre-
Processing Function with Varying Number of
Rounds
The tension between cost and beneﬁt of the pre-processing
function is exempliﬁed by the experimental results shown in
Figure 11. The two curves represent the advantage of the
pre-processing function as a (percentage) performance gain,
over the simple counting algorithm. The curve that shows
the highest advantage corresponds to the case of ﬁve million
constraints. All the experiments are run over forwarding
tables with one ﬁlter per interface. The experiments show
that the pre-processing function becomes ineﬀective and ul-
timately a cost after 50 to 70 rounds. We performed all our
other experiments using 10 rounds.
5.4 Network Effect
The experiments discussed above evaluate the perfor-
mance of our forwarding algorithm, but only by examining
an individual router. The question that arises is whether a
true network of routers would out perform a single, central-
ized router under the same heavy workload. We can answer
this question by comparing the end-to-end latency induced
by the forwarding function in two diﬀerent scenarios: the
ﬁrst with a single router, and the second with a combination
of interconnected routers. In both cases we consider a total
of one million ﬁlters formed from ﬁve million constraints,
where each ﬁlter is associated with a distinct destination.
Notice that this conﬁguration represents the worst case for
our optimizations, so we would expect the performance to
be better in practice.
The ﬁrst conﬁguration corresponds to the curve for I = F
from Figure 8. In this case, the latency is about 350 mil-
liseconds, which corresponds to the matching time of one run
of the forwarding function over the complete set of ﬁlters.
The second conﬁguration can be obtained by connecting the
destination nodes through a set of routers with a limited
number of interfaces. Using routers with I interfaces, inter-
connected in an appropriate conﬁguration, we can reach H
destinations with at most 2 logI H hops.
In our example,
using routers with 20 interfaces, we can span the network
in at most 12 hops, which would give a worst-case total la-
tency of only about 40 milliseconds, as shown by the curve
for I = 20 in Figure 9. This clearly demonstrates the viabil-
ity of using a network of routers that uses an appropriately
optimized forwarding function.
5.5 Summary of Evaluation
Our experiments have shown that our forwarding algo-
rithm has good absolute performance and good cost amorti-
zation over a variety of loads. In particular, we found that:
• the basic short-circuit evaluation of ﬁlters greatly re-
duces processing time in the case where a single mes-
sage may match a large number of ﬁlters;
• the use of the selectivity table improves the ability
to short circuit the forwarding function, reducing the
matching time up to 40% in the critical cases of routers
with numerous interfaces and especially in the extreme
case of centralized routers; and
• the use of the selectivity table has no measurable costs
over the basic algorithm.
In summary, the selectivity table proved to reduce forward-
ing costs in the most critical cases, without adding any
penalties in other cases in which the simple matching algo-
rithm already oﬀers good performance. We conclude from
the evaluations that our forwarding algorithm is viable un-
der heavy loads, and that the optimizations we proposed
have signiﬁcant, positive eﬀects.
6. CONCLUSION
In this paper we have presented the ﬁrst algorithm de-
signed speciﬁcally for the implementation of the forwarding
function of routers in a content-based network. The algo-
rithm is based on earlier work in the area of centralized con-
tent ﬁltering of both large documents and small messages.
Our algorithm reﬁnes, adapts, and extends this work for use
in a very diﬀerent context. We formulated a variant of the
counting algorithm that can handle disjunctive predicates,
and developed optimizations targeted speciﬁcally at the dis-
junctions that are the semantics of network interfaces in a
content-based network.
In order to evaluate the algorithm, we created an imple-
mentation and subjected it to a battery of synthetic work-
loads. From these experiments we found that the algorithm
has good overall performance. The experiments also conﬁrm
the validity of our optimization techniques, and the stability
of the algorithm even in circumstances that are suboptimal
for the optimizations.
In the immediate future we plan to integrate our algorithm
into our prototype content-based network architecture. As a
natural progression of this work, we plan to attack the hard
problem of routing in a content-based network. Using logical
relations between predicates, we have already deﬁned the ba-
sic concepts of content-based subnetting and supernetting,
and we have implemented what amounts to a routing table.
Using that as a basis, we plan to study and develop opti-
mized data structures for routing, as well as eﬃcient and
robust routing protocols for content-based networks.
Acknowledgments
The authors would like to thank Jing Deng for his contribu-
tions to an earlier version of the forwarding algorithm, and
Matthew Rutherford and John Giacomoni for their help in
testing and improving the implementation. The work of
the authors was supported in part by the Defense Advanced
Research Projects Agency, Air Force Research Laboratory,
Space and Naval Warfare System Center, and Army Re-
search Oﬃce under agreement numbers F30602-01-1-0503,
F30602-00-2-0608, N66001-00-1-8945, and DAAD19-01-1-
0484. The U.S. Government is authorized to reproduce
and distribute reprints for Governmental purposes notwith-
standing any copyright annotation thereon. The views and
conclusions contained herein are those of the authors and
should not be interpreted as necessarily representing the oﬃ-
cial policies or endorsements, either expressed or implied, of
the Defense Advanced Research Projects Agency, Air Force
Research Laboratory, Space and Naval Warfare System Cen-
ter, Army Research Oﬃce, or the U.S. Government.
7. REFERENCES
[1] W. Adjie-Winoto, E. Schwartz, H. Balakrishnan, and
J. Lilley. The design and implementation of an
intentional naming system. In 17th ACM Symposium
on Operating Systems Principles (SOSP 99),
volume 34 of Operating Systems Review, pages
186–201, Dec. 1999.
[2] M. K. Aguilera, R. E. Strom, D. C. Sturman,
M. Astley, and T. D. Chandra. Matching events in a
content-based subscription system. In Eighteenth
ACM Symposium on Principles of Distributed
Computing (PODC ’99), pages 53–61, Atlanta,
Georgia, May 4–6 1999.
[3] F. Baboescu and G. Varghese. Scalable packet
classiﬁcation. In Proceedings of the 2001 Conference
on Applications, Technologies, Architectures, and
Protocols for Computer Communications, pages
199–210, 2001.
[4] G. Banavar, T. D. Chandra, B. Mukherjee,
J. Nagarajarao, R. E. Strom, and D. C. Sturman. An
eﬃcient multicast protocol for content-based
publish-subscribe systems. In The 19th IEEE
International Conference on Distributed Computing
Systems (ICDCS ’99), pages 262–272, Austin, Texas,
May 1999.
[5] L. F. Cabrera, M. B. Jones, and M. Theimer. Herald:
Achieving a global event notiﬁcation service. In
Proceedings of the Eighth Workshop on Hot Topics in
Operating Systems, Elmau, Germany, May 2001.
[6] A. Campailla, S. Chaki, E. Clarke, S. Jha, and
H. Veith. Eﬃcient ﬁltering in publish-subscribe
systems using binary decision diagrams. In
Proceedings of the 23th International Conference on
Software Engineering, pages 443–452, Toronto,
Canada, May 2001.
[7] A. Carzaniga, D. S. Rosenblum, and A. L. Wolf.
Design and evaluation of a wide-area event
notiﬁcation service. ACM Transactions on Computer
Systems, 19(3):332–383, Aug. 2001.
[8] A. Carzaniga, M. J. Rutherford, and A. L. Wolf. A
routing scheme for content-based networking.
Technical Report CU-CS-953-03, Department of
Computer Science, University of Colorado, June 2003.
[9] A. Carzaniga and A. L. Wolf. Content-based
networking: A new communication infrastructure. In
NSF Workshop on an Infrastructure for Mobile and
Wireless Systems, Scottsdale, Arizona, Oct. 2001.
[10] Y. K. Dalal and R. M. Metcalfe. Reverse path
forwarding of broadcast packets. Communications of
the ACM, 21(12):1040–1048, Dec. 1978.
[11] S. E. Deering and D. R. Cheriton. Multicast routing
in datagram networks and extended LANs. ACM
Transactions on Computer Systems, 8(2):85–111, May
1990.
[12] F. Fabret, H. A. Jacobsen, F. Llirbat, J. Pereira,
K. A. Ross, and D. Shasha. Filtering algorithms and
implementation for very fast publish/subscribe
systems. In ACM SIGMOD 2001, pages 115–126,
Santa Barbara, California, May 2001.
[13] M. Gitter and D. R. Cheriton. An architecture for
content routing support in the Internet. In 3rd
USENIX Symposium on Internet Technologies and
Systems, pages 37–48, San Francisco, California, Mar.
2001.
[14] J. Gough and G. Smith. Eﬃcient recognition of events
in a distributed system. In Proceedings of the 18th
Australasian Computer Science Conference, Adelaide,
Australia, Feb. 1995.
[15] B. N. Levine, J. Crowcroft, C. Diot, J. J.
Garcia-Luna-Aceves, and J. F. Kurose. Consideration
of receiver interest for IP multicast delivery. In
Proceedings of IEEE INFOCOM 2000, pages 470–479,
Tel Aviv, Israel, Mar. 2000.
[16] Object Management Group. Notiﬁcation Service, Aug.
1999.
[17] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
S. Schenker. A scalable content-addressable network.
In Proceedings of the 2001 Conference on Applications,
Technologies, Architectures, and Protocols for
Computer Communications, pages 161–172, 2001.
[18] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and
S. Surana. Internet indirection infrastructure. In
Proceedings of the 2002 Conference on Applications,
Technologies, Architectures, and Protocols for
Computer Communications, pages 73–88, Pittsburgh,
Pennsylvania, Aug. 2002.
[19] Sun Microsystems, Inc., Mountain View, California.
Java Message Service, Nov. 1999.
[20] T. W. Yan and H. Garcia-Molina. Index structures for
selective dissemination of information under the
Boolean model. ACM Transactions on Database
Systems, 19(2):332–364, June 1994.
[21] T. W. Yan and H. Garcia-Molina. The SIFT
information dissemination system. ACM Transactions
on Database Systems, 24(4):529–565, Dec. 1999.