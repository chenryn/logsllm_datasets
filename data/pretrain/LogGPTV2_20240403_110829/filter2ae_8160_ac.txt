> fast bins 都不能满足分配需 要的时候,ptmalloc 会设法在 top chunk 中分出一块内存给用户,如果 top chunk
> 本身不够大, 分配程序会重新分配一个 sub-heap,并将 top chunk 迁移到新的 sub-heap 上, 新的 sub-heap 与已有的
> sub-heap 用单向链表连接起来,然后在新的 top chunk 上分配所需的内存以满足分配的需要,实际上,top chunk 在分配时总是在
> fast bins 和 bins 之后被考虑,所以,不论 top chunk 有多大,它都不会被放到 fast bins 或者是 bins 中. top
> chunk 的大小是随着分配和回 收不停变换的,如果从 top chunk 分配内存会导致 top chunk 减小,如果回收的 chunk 恰好 与
> top chunk 相邻,那么这两个 chunk 就会合并成新的 top chunk,从而使 top chunk 变大. 如果在 free
> 时回收的内存大于某个阈值,并且 top chunk 的大小也超过了收缩阈值,ptmalloc 会收缩 sub-heap,如果 top-chunk
> 包含了整个 sub-heap,ptmalloc 会调用 munmap 把整个 sub-heap 的内存返回给操作系统.
>
> 由于主分配区是唯一能够映射进程 heap 区域的分配区,它可以通过 sbrk()来增大或是 收缩进程 heap 的大小,ptmalloc
> 在开始时会预先分配一块较大的空闲内存 (也就是所谓的 heap), 主分配区的 top chunk 在第一次调用 mallocd
> 时会分配一块(chunk_size + 128KB) align 4KB 大小的空间作为初始的 heap,用户从 top chunk
> 分配内存时,可以直接取出一块内 存给用户.在回收内存时,回收的内存恰好与 top chunk 相邻则合并成新的 top
> chunk,当该次回收的空闲内存大小达到某个阈值,并且 top chunk 的大小也超过了收缩阈值,会执行内 存收缩,减小 top chunk
> 的大小,但至少要保留一个页大小的空闲内存,从而把内存归还给 操作系统.如果向主分配区的 top chunk 申请内存,而 top chunk
> 中没有空闲内存, ptmalloc 会调用 sbrk()将的进程 heap 的边界 brk 上移, 然后修改 top chunk 的大小.
top chunk 位于最高地址.
#### mmaped chunk
> 当需要分配的 chunk 足够大,而且 fast bins 和 bins 都不能满足要求,甚至 top chunk 本
> 身也不能满足分配需求时,ptmalloc 会使用 mmap 来直接使用内存映射来将页映射到进程空 间.这样分配的 chunk 在被 free
> 时将直接解除映射,于是就将内存归还给了操作系统,再 次对这样的内存区的引用将导致 segmentation fault 错误.这样的 chunk
> 也不会包含在任何 bin 中.
#### Last remainder
> Last remainder 是另外一种特殊的 chunk,就像 top chunk 和 mmaped chunk 一样,不会 在任何 bins
> 中找到这种 chunk.当需要分配一个 small chunk, 但在 small bins 中找不到合适 的 chunk, 如果 last
> remainder chunk 的大小大于所需的 small chunk 大小,last remainder chunk 被分裂成两个 chunk,
> 其中一个 chunk 返回给用户, 另一个 chunk 变成新的 last remainder chuk.
需要注意的是, 仅在请求 small chunk 才使用. 具体可以参考 `eglibc-2.19/malloc/malloc.c:3459`
#### malloc_state
只存在一个主分区, 但是允许多个非主分区, 主分配区域可以访问 heap 区域 和 mmap 区域, 非主分区只能访问 mmap 区域, 每次用 mmap
分配一块大小的内存当做 sub-heap, 用于模拟 heap. 具体细节可以参考 ``,
每次进行内存分配必须加锁请求一个分配区.
    eglibc-2.19/malloc/malloc.c:1663
    /*
       ----------- Internal state representation and initialization -----------     */
    struct malloc_state
    {
      /* Serialize access.  */
      mutex_t mutex;
      /* Flags (formerly in max_fast).  */
      int flags;
    #if THREAD_STATS
      /* Statistics for locking.  Only used if THREAD_STATS is defined.  */
      long stat_lock_direct, stat_lock_loop, stat_lock_wait;
    #endif
      /* Fastbins */
      mfastbinptr fastbinsY[NFASTBINS];
      /* Base of the topmost chunk -- not otherwise kept in a bin */
      mchunkptr top;
      /* The remainder from the most recent split of a small request */
      mchunkptr last_remainder;
      /* Normal bins packed as described above */
      mchunkptr bins[NBINS * 2 - 2];
      /* Bitmap of bins */
      unsigned int binmap[BINMAPSIZE];
      /* Linked list */
      struct malloc_state *next;
      /* Linked list for free arenas.  */
      struct malloc_state *next_free;
      /* Memory allocated from the system in this arena.  */
      INTERNAL_SIZE_T system_mem;
      INTERNAL_SIZE_T max_system_mem;
    };
关于 `malloc_init_state` 的定义在:
    eglibc-2.19/malloc/malloc.c:1768
    /*
       Initialize a malloc_state struct.
       This is called only from within malloc_consolidate, which needs
       be called in the same contexts anyway.  It is never called directly
       outside of malloc_consolidate because some optimizing compilers try
       to inline it at all call points, which turns out not to be an
       optimization at all. (Inlining it in malloc_consolidate is fine though.)
     */
    static void
    malloc_init_state (mstate av)
    {
在 `eglibc-2.19/malloc/malloc.c:1741` 有一个已经初始化的主分配区 `main_arena`, 根据 ELF 的结构解析,
已初始化的全局变量存放在 `.data` 段, 下图作为实践.
    # 33 是 Section 的 Index
    λ : readelf -s /usr/lib/debug//lib/x86_64-linux-gnu/libc-2.23.so | grep main_arena 
       915: 00000000003c3b20  2192 OBJECT  LOCAL  DEFAULT   33 main_arena
    # 对应 33 的 Section 恰好为 .data
    λ : readelf -S /usr/lib/debug//lib/x86_64-linux-gnu/libc-2.23.so | grep .data
      [16] .rodata           NOBITS           0000000000174720  000002b4
      [23] .tdata            NOBITS           00000000003bf7c0  001bf7c0
      [29] .data.rel.ro      NOBITS           00000000003bf900  001bf7c0
      [33] .data             NOBITS           00000000003c3080  001bf7c0
## _int_malloc() 分析
先获取分配区指针, 这个过程设计到分配区初始化和分配区加锁, 之后使用 `_int_malloc` 进行核心的内存分配.
    eglibc-2.19/malloc/malloc.c:3295
    /*
       ------------------------------ malloc ------------------------------     */
    static void *
    _int_malloc (mstate av, size_t bytes)
    {
本来不想阅读, 发现不读根本不了解原理, 这一段分析来自 《glibc内存管理ptmalloc源代码分析》 但是对其中几个步骤做了补充和添加,
可以对比看一下 (以下针对 32 位字长)
ptmalloc 的响应用户内存分配要求的具体步骤为:
  1. 获取分配区的锁, 为了防止多个线程同时访问同一个分配区, 在进行分配之前需要取得分配区域的锁. 线程先查看线程私有实例中是否已经存在一个分配区, 如果存 在尝试对该分配区加锁, 如果加锁成功, 使用该分配区分配内存, 否则, 该线程搜 索分配区循环链表试图获得一个空闲（没有加锁）的分配区. 如果所有的分配区都 已经加锁, 那么 ptmalloc 会开辟一个新的分配区, 把该分配区加入到全局分配区循 环链表和线程的私有实例中并加锁, 然后使用该分配区进行分配操作. 开辟出来的 新分配区一定为非主分配区, 因为主分配区是从父进程那里继承来的. 开辟非主分配区时会调用 mmap()创建一个 sub-heap, 并设置好 top chunk.
  2. 将用户的请求大小转换为实际需要分配的 chunk 空间大小. 具体查看 request2size 宏 (malloc.c:3332)
  3. 判断所需分配 chunk 的大小是否满足 chunk_size 
    #include
    void main()
    {
      void *m1 = malloc(24);
      int t = 0;
      void * ms[200];
      for(t = 0; t < 200; t++)
        ms[t] = malloc(120); // default fastbin size
      malloc(24);
      for(t = 0; t < 200; t++)
        free(ms[t]);
      void *m2 = malloc(24);
      printf("%p\n",m1);
      printf("%p\n",m2);
    }
    // result:
    λ : gcc -g -o test2 test2.c && ./test2
    0x17c2010
    0x17c8450
* * *
下面例子表明, 当 fast bin 的相邻为空闲 chunk, 以及相邻 top chunk 的情况, 都不会进行合并, 但是对于 top chunk
的情况有些特殊.
    /*
      TRIM_FASTBINS controls whether free() of a very small chunk can
      immediately lead to trimming. Setting to true (1) can reduce memory
      footprint, but will almost always slow down programs that use a lot
      of small chunks.
      Define this only if you are willing to give up some speed to more
      aggressively reduce system-level memory footprint when releasing
      memory in programs that use many small chunks.  You can get
      essentially the same effect by setting MXFAST to 0, but this can
      lead to even greater slowdowns in programs using many small chunks.
      TRIM_FASTBINS is an in-between compile-time option, that disables
      only those chunks bordering topmost memory from being placed in