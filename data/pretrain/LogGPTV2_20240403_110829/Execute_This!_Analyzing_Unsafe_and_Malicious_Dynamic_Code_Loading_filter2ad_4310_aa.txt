# Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications

## Authors
- Sebastian Poeplau<sup>∗†</sup>
- Yanick Fratantonio<sup>∗</sup>
- Antonio Bianchi<sup>∗</sup>
- Christopher Kruegel<sup>∗</sup>
- Giovanni Vigna<sup>∗</sup>

<sup>∗</sup>UC Santa Barbara, Santa Barbara, CA, USA  
<sup>†</sup>University of Bonn, Bonn, Germany

**Emails:**
- {yanick, antoniob, chris, vigna}@cs.ucsb.edu
- PI:EMAIL (for Sebastian Poeplau)

## Abstract
The Android system allows applications to load additional code from external sources at runtime. This capability can be exploited by malware to add malicious functionality after passing inspection by an application store or anti-virus engine. Additionally, benign applications may inadvertently introduce vulnerabilities. In this paper, we systematically analyze the security implications of dynamic code loading in Android. We developed a static analysis tool to detect attempts to load external code and conducted a large-scale study on 1,632 popular Google Play applications. Our findings show that 9.25% of these applications, and 16% of the top 50 free applications, load external code insecurely. We also demonstrate how malware can use code-loading techniques to evade detection, exploiting a conceptual weakness in current Android malware protection. Finally, we propose modifications to the Android framework to enforce integrity checks on loaded code, thereby mitigating the associated threats.

## 1. Introduction
In recent years, the Android platform has gained significant popularity, with millions of mobile devices running the operating system. As of May 2013, Google announced that over 900 million Android installations had been activated since its launch in 2008. The large user base provides developers with a broad audience but also attracts malicious actors. The increasing amount of malware targeting Android highlights the need for robust security measures.

To counter the spread of malicious content, Google introduced Bouncer, a vetting mechanism for applications submitted to the Google Play store. Bouncer analyzes each application for malicious behavior before it is made available to users. However, malware can circumvent Bouncer by loading external code at runtime. For example, an application may appear benign during Bouncer's analysis but later download and execute malicious code on users' devices.

This paper presents a large-scale study analyzing the use of code-loading techniques in Google Play applications. We find that many applications use these techniques for legitimate reasons, but their implementation often introduces vulnerabilities. We developed a static analysis tool to detect unsafe code loading and found severe vulnerabilities in both Android applications and third-party frameworks. We propose and implement a modification to Android's Dalvik virtual machine to prevent attacks enabled by external code loading.

### Main Contributions
1. **Systematic Analysis:** We analyze the Android platform for techniques that allow applications to load code at runtime and examine their security implications.
2. **Static Analysis Tool:** We develop an efficient tool to automatically detect problematic behavior associated with dynamic code loading.
3. **Large-Scale Study:** We analyze 1,632 popular Google Play applications, revealing that 9.25% are vulnerable to code injection attacks.
4. **Security Enhancements:** We propose and implement a modification to Android's Dalvik VM to prevent attacks due to external code loading.

## 2. Background and Threat Model

### A. Android Security Concepts
1. **Android Permissions:** Android restricts access to sensitive functionality using permissions. These regulate access to APIs that can cause financial damage, compromise privacy, or affect device usability. Each application must declare the permissions it requires, and users must approve them during installation.
2. **Application Stores:** Applications are typically installed from stores like Google Play. To mitigate malware, Google introduced Bouncer, which dynamically analyzes applications. However, Bouncer can be bypassed if an application loads malicious code at runtime.
3. **Native Code:** Android applications are usually written in Java, but they can also run native code through the Java Native Interface (JNI). Native code runs in the same sandbox as Java code, subject to the same permissions.
4. **Application Frameworks:** Developers often use frameworks to add functionality, such as ad display. Frameworks and applications have different update cycles, making it challenging to deploy updates to frameworks.

### B. Threat Model
We consider two attack scenarios:
1. **Evasion of Offline Analysis Systems:** An attacker creates a malicious application that downloads additional code after installation, evading detection by systems like Bouncer.
2. **Code Injection Against Benign Applications:** Benign applications that load external code for legitimate reasons may be vulnerable to code injection if the loaded code is not properly validated.

## 3. Investigation of Code Loading

### A. Techniques to Load Code
1. **Class Loaders:** Class loaders allow applications to load additional classes from arbitrary files. If the file is stored in a writable location, an attacker can replace it with malicious code. The Android system does not check the integrity of class files, making applications vulnerable to code injection.
2. **Package Contexts:** When Android loads an application, it associates it with a Context object, providing access to resources. Improper use of package contexts can also lead to vulnerabilities.

### B. Reasons for Benign Applications to Load Additional Code
Benign applications may load additional code for various reasons, such as updating features, adding new functionality, or integrating third-party services. However, improper implementation can introduce security risks.

### C. Common Mistakes in Benign Applications
Many benign applications make common mistakes when using code-loading techniques, such as storing code in writable locations, failing to validate the integrity of loaded code, and not enforcing proper access controls.

## 4. Conclusion
Our study highlights the security risks associated with dynamic code loading in Android applications. We have developed a static analysis tool to detect and mitigate these risks and proposed modifications to the Android framework to enforce integrity checks on loaded code. These measures aim to protect users from both malware evasion and code injection attacks.