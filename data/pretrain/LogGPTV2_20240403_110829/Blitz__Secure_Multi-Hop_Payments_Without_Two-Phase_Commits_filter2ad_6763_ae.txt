genState(αi,T,γi): Generates and returns a new channel state
carrying transaction txstate
from the given parameters, shown
in Figure 4. checkTxEr(Ui,a,b, txer, rList, onioni): Checks if
txer is correct, Ui has a stealth address in it and onioni holds rout-
ing information. If unsuccessful, returns ⊥. If Ui is the receiver, re-
turns ((cid:62),(cid:62),(cid:62),(cid:62),(cid:62)). Else, returns (sk(cid:101)Ui
,θεi ,Ri,Ui+1, onioni+1)
it sk(cid:101)Ui
containing the output belonging to Ui θεi, the secret key to spend
, the next user and the next onion.
i
Figure 7: Subprocedures used in the protocol
5.2
Informal security discussion
Due to space constraints, we only argue informally here
why Blitz achieves security and privacy (see Section 4.1).
We give a more formal discussion in the full version [6]
and consider the security against some concrete attacks in
Appendix D.
Balance security An honest intermediary will forward a
payment to its right neighbor only if ﬁrst invoked by its left
neighbor. If constructed correctly, the refund transactions in
both channels depend on txer being published and the timing
is identical. Also, the payment transactions have identical
conditions in both channels. The only possible way for an
intermediary to lose money is, if it were to pay its money to
the right neighbor, while the left neighbor refunded. However,
if the left neighbor is able to refund, this means that also the
intermediary itself can refund. Similarly, if the right neighbor
is able to claim the money, the intermediary can also claim it.
Honest sender A sender that does not receive a conﬁrmation
of the receiver that it received the money in time, can trigger
a refund by publishing txer. In the setup phase of the protocol,
the sender ensures that there is enough time for this.
Honest receiver The receiver gets the money in exchange for
some service. It will wait until being certain that the money
will be received before shipping the product. The transaction
txer on the blockchain is a proof that a refund has occurred.
Privacy Blitz requires to share with intermediaries txer, rout-
ing information and the value that is being paid. The transac-
tion txer uses stealth addresses for its outputs and an unlink-
able input, thereby granting sender, receiver and path privacy
in the honest case, as deﬁned in Section 4.1. As in the LN
however, the stronger notion of relationship anonymity [19]
does not hold; the payment can be linked by comparing (i) in
Blitz, txer and (ii) in the LN, the hash value. In the pessimistic
case, the balance is claimed on-chain. In both Blitz and the
LN, this breaks sender, path and receiver privacy. We defer
the reader to Appendix A for a more detailed discussion on
all privacy properties mentioned in this paragraph.
USENIX Association
30th USENIX Security Symposium    4053
6 Evaluation
In this section, we evaluate the beneﬁts that Blitz offers
over the LN. The source code for our simulation is at [1].
Testbed We took a snapshot of the LN graph (Octo-
ber 2020) from https://ln.bigsun.xyz/ containing 11.6k
nodes, 6.5k of which have 30.9k active channels with a total
capacity of 1166.7 BTC, which account for around 13.2M
USD in October 2020. We ignore the nodes without active
channels. The initial distribution of the channel balance is un-
known. We assume that initially the balance at each channel is
available to both users. It is assigned to a user as required by
payments in a ﬁrst come, ﬁrst serve basis. Naturally, the bal-
ance that has already been used and thus assigned to one user
in the channel, is not reassigned to the other user. Since we
use this strategy consistently throughout all our experiments,
this assignment does not introduce any bias in the results.
Simulation setup We discretize the time in rounds and each
round represents the collateral time per hop (i.e., 1 day or
144 blocks as in the LN). In such a setting, we simulate
payments in batches as follows. Assume that we want to
simulate NPay payments for an amount of Amt and with a
failure rate of FRate. For that, in a ﬁrst batch we simulate the
FRate % of NPay payments, where each payment is between
two nodes s and r (such that s (cid:54)= r) selected at random in
the graph and routed through the cheapest path according to
fees. Moreover, each payment in this batch is disrupted at an
intermediary node chosen at random in the path between s and
r. Finally, for each payment, some balance is marked to be
locked at the channels for a certain number of rounds during
the second batch, depending on whether we are evaluating the
LN (i.e., staggered rounds) or Blitz (i.e., single round). We
model thereby a setting where the network contains locked
collateral due to disrupted payments.
After the ﬁrst batch, we simulate a second one of NPay
payments over 3 rounds as before, assuming that they are not
disrupted (e.g., go over paths of honest nodes). We remark
that here each payment may still be unsuccessful because
there are not enough unlocked funds in the path between s
and r. We focus thus on the effect that staggered vs. constant
collateral has in the number of successful payments.
Setting parameters Due to the off-chain nature of the LN,
there is no ground truth for payment data, a common limi-
tation in PCN related work. We try to make reasonable as-
sumptions for these unknown parameters in our simulation.
We sample the payment amount Amt for each payment from
the range [1000, ub]. We use a lower bound of 1000, as tech-
nically the minimum is 546 satoshis (=1 dust) and we ad-
ditionally account for fees. We select an upper bound (ub)
out of {3000,6000,9000}, which is around 0.1%, 0.2% and
0.3% of the average channel capacity. We consider two dif-
ferent number of payments NPay, 78k and 978k. The former
corresponds to four payments per active node and per round
(ppnpr) modeling a setting with sporadic payments (e.g., a
32.1
30
18.7
30
20
10
z
t
i
l
B
l
i
a
f
/
N
L
l
i
a
f
9.3
7.7
7.7
3000 6000 9000
upper bound ub on amount
4 ppnpr
50 ppnpr
33.1
z
t
i
l
B
l
i
a
f
/
N
L
l
i
a
f
30
20
10
0
9.3
7.5
4.6
8.7
4.3
0.5% 1% 2.5%
% of disrupted payments
50 ppnpr
4 ppnpr
Figure 8: Ratio failLN/failBlitz. (Left) we ﬁx the number of
disrupted payments at 0.5% and vary ub. (Right) we ﬁx ub at
3000 and vary the number of disrupted payments.
banking system), whereas the latter corresponds to 50 ppnpr,
modeling a higher payment frequency (e.g., micropayments).
Finally, we vary the amount of disrupted payments FRate
as {0.5,1,2.5} % of the total payments NPay. We divide these
disrupted payments into two groups of equal size. In the ﬁrst
half, the payment is stopped during the setup phase (from
s to r). In the LN, the channels before the faulty/malicious
node are locked with a staggered collateral lock time. In Blitz,
due to the sender publishing txer, the funds are immediately
unlocked. In the second half, the payment fault occurs in the
second phase, which in the LN is the unlocking and in Blitz
the fast track. This models the case where a node is ofﬂine or
an attacker delays the completion of the payment until the last
possible moment. In the LN, the collateral left of the malicious
node is again staggered, whereas in Blitz the channels right of
that node are locked for one simulation round. Finally, we note
that distributing the disrupted payments differently into these
groups will alter the results accordingly (see Appendix G).
Collateral effect We calculate the number of unsuccessful
payments in a baseline case (i.e., omitting the ﬁrst batch of dis-
rupted payments), in Blitz as well as in the LN and we say that
failBlitz (correspondingly failLN) is the number of payments
that fail in Blitz (correspondingly the LN) when subtracting
those failing also in the baseline case. We carry out every
experiment for a given setting eight times and calculate the
average. In Figure 8 we show the ratio failLN/failBlitz. For all
choices of parameters, there are more unsuccessful payments
in the LN than in Blitz, showing thus the practical advantage
of Blitz by requiring only constant collateral. We also observe
that difference grows in favor of Blitz with the number of
payments, showing that the advantage in terms of collateral
is higher in use cases for which initially the LN was designed
such as micropayments. Finally, we observe that Blitz offers
higher transaction throughput even with an arguably small
ratio of disrupted payments (i.e., a reduced adversarial effect).
Wormhole attack We measure an upper bound on the
amount of fees potentially at risk in the LN, due to it being
prone to the wormhole attack. We observe that the amount
of coins at risk grows with the number of payments and their
amount. In particular, with 50 ppnpr and an upper bound of
4054    30th USENIX Security Symposium
USENIX Association
3000 (modeling e.g., a micropayment setting), we observe
that the LN put at risk 0.25 BTC (2831 USD in October 2020).
Increasing the upper bound to 9000 while keeping 65 ppnpr,
we observe that the LN put at risk 0.30 BTC. Blitz prevents
the wormhole attack and the stealing of these fees by design.
Computation overhead The Blitz protocol does not require
any costly cryptography. In particular, it requires that each
user veriﬁes locally the signatures for the involved transac-
tions. Moreover, each user must compute three signatures
(see Figure 4) independently on the number of channels in-
volved in the payment. In the LN, each user requires to com-
pute only two signatures, one per each commitment trans-
action representing the new state. We remark, however, that
these are all simple computations that can be executed in
negligible time even with commodity hardware.
Communication overhead We ﬁnd that the contract size in
Blitz is 26% smaller than the size of the HTLCs in the LN.
This advantage is crucial in practice as current LN payment
channels cannot hold more than 483 HTLC (and thus 483
in-ﬂight payments) simultaneously, because otherwise, the
size of the off-chain state would be higher than a valid Bitcoin
transaction [23, 28]. The reduced communication overhead
in Blitz implies then that it allows for more simultaneous
in-ﬂight payments per channel than in the LN.
In the pessimistic case, the LN requires to include on-chain
one transaction per channel (158 Bytes for refund, 192 Bytes
for payment), while Blitz requires not only one on-chain trans-
action per channel (307 Bytes for refund, 158 Bytes for pay-
ment), but also that the sender includes the transaction txer to
ensure that the refund is atomic. In this sense, the LN requires
a smaller overhead than Blitz for the pessimistic case. We
remark that there exist incentives in PCNs for the nodes to
follow the optimistic case and reduce entering the pessimistic
case because it requires to close the channels and cannot be
used for further off-chain payments without re-opening them,
with the consequent cost in time and fees. We give detailed
results about communication overhead in Appendix F.
7 Related work
PCNs have attracted plenty of attention from academia [13,
18, 20, 21, 27] and have been deployed in practice [22]. These
PCNs, with the exception of Interledger [27], follow the 2-
phase-commit paradigm and suffer from (some of) the draw-
backs we have discussed in this work, namely, prone to the
wormhole attack, grieﬁng attacks, staggered collateral or rely
on scripting functionality not widely available. Interledger is
a 1-phase protocol that however does not provide security.
Sprites [21] is the ﬁrst multi-hop payment (MHP) that
achieves constant collateral. It, however, relies on Turing com-
plete smart contracts (available in, e.g., Ethereum) thereby
reducing its applicability in practice. Other constructions
that require Turing complete smart contracts, e.g., State chan-
nels [11], achieve constant collateral, but have similar privacy
issues as the LN when used for MHPs. AMCU [13] achieves
constant collateral and is compatible with Bitcoin. AMCU,
however, reveals every participant to each other, a privacy
leakage undesirable in the MHP setting.
To improve privacy, [19] introduced MHTLCs. In [30],
CHTLCs based on Chameleon hash functions were intro-
duced, a functionality that is again not supported in most
cryptocurrencies (e.g., in Bitcoin). AMHL [20] replaces the
HTLC contract with novel cryptographic locks to avoid the
wormhole attack. MHTLC, CHTLC or AMHL based MHPs
all follow the 2-phase-commit paradigm and require staggered
collateral. We defer to Appendix B for works on 1-phase com-
mits in the context of distributed databases.
8 Conclusion
Payment-channel networks (PCNs) are the most prominent
solution to the scalability problem of cryptocurrencies with
practical adoption (e.g., the LN). While optimistic 1-round
payments (e.g., Interledger) are prone to theft by malicious
intermediaries, virtually all PCNs today follow the 2-phase-
commit paradigm and are thus prone to a combination of:
(i) security issues such as wormhole attacks; (ii) staggered
collateral; and (iii) limited deployability as they rely on either
HTLC or Turing complete smart contracts.
We ﬁnd a redundancy implementing a 2-phase-commit pro-
tocol on top of the consensus provided by the blockchain
and instead design Blitz, a multi-hop payment protocol that
demonstrates for the ﬁrst time that it is possible to have a 1-
round payment protocol that is secure, resistant to wormhole
attacks by design, has constant collateral, and builds upon dig-
ital signatures and timelock functionality from the underlying
blockchain’s scripting language. Our experimental evaluation
shows that Blitz reduces the number of unsuccessful payments
by a factor of between 4x and 33x, reduces the size of the
payment contract by a 26% and saves up to 0.3 BTC (3397
USD in October 2020) in fees over a three day period as it
avoids wormhole attacks by design.
Blitz can be seamlessly deployed as a (additional or al-
ternative) payment protocol in the current LN. We believe
that Blitz opens possibilities of performing more efﬁcient and
secure payments across multiple different cryptocurrencies
and other applications built on top, research directions which
we intend to pursue in the near future.
Acknowledgements This work has been supported by the
European Research Council (ERC) under the Horizon 2020
research (grant 771527-BROWSEC); by the Austrian Science
Fund (FWF) through the projects PROFET (grant P31621),
the Meitner program (grant M-2608) and the project W1255-
N23; by the Austrian Research Promotion Agency (FFG)
through the Bridge-1 project PR4DLT (grant 13808694) and
the COMET K1 SBA; by the Vienna Business Agency
through the project Vienna Cybersecurity and Privacy Re-
search Center (VISP); by CoBloX Labs; by the National
Science Foundation (NSF) under grant CNS-1846316.
USENIX Association
30th USENIX Security Symposium    4055
References
[1] Blitz simulation: Github repository, 2020. https://
github.com/blitz-payments/simulation.
[2] M. Abdallah, R. Guerraoui, and P. Pucheral. One-phase
commit: does it make sense? Conference on Parallel
and Distributed Systems, 1998.
[3] Yousef J. Al-houmaily and Panos K. Chrysanthis.
Two-Phase Commit in Gigabit-Networked Distributed
Databases. In Parallel and Distributed Computing Sys-
tems, 1995.
[4] Yousef J Al-Houmaily and Panos K Chrysanthis. 1-
2PC: the one-two phase atomic commit protocol. In
Symposium on Applied Computing, 2004.
[5] Lukas Aumayr, Oguzhan Ersoy, Andreas Erwig, Se-
bastian Faust, Kristina Hostakova, Matteo Maffei, Pe-
dro Moreno-Sanchez, and Siavash Riahi. General-
ized Bitcoin-Compatible Channels. Cryptology ePrint
Archive. https://eprint.iacr.org/2020/476.
[6] Lukas Aumayr, Pedro Moreno-Sanchez, Aniket Kate,
and Matteo Maffei. Blitz: Secure Multi-Hop Pay-
ments Without Two-Phase Commits.
Cryptology
ePrint Archive, Report 2021/176, 2021.