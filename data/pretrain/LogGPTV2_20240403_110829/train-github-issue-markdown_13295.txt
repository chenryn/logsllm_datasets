I am trying to make aggregations on time series to get fixed-duration buckets
of time.  
I need to search based on timestamp (`ts` field) but never on values (`value`
field) so my mapping specifies to skip indexing on `value`.  
However, when I aggregate, it seesms that ES does not find the `value` field
and use count zero instead.
To reproduce (marvel syntax):
  * define a mapping template as:
    PUT _template/test
    {
      "template": "test",
      "mappings": {
        "metric" : {
          "properties": {
            "ts": { "type": "date"},
            "value": { "type": "double", "index": "no"}
          }
        }
      }
    }
  * index one document:
    POST test/metric
    {
      "ts": 4,
      "value": 42
    }
  * aggregate:
    GET test/metric/_search?search_type=count
    {
      "aggs": {
        "sum_indexed_field": { // non sense, only here to show aggregation work on indexed field
          "sum": {
            "field" : "ts"
          }
        },
        "sum_nonindexed_field" : {
          "sum" : {
            "field": "value"
          }
        }
      }
    }
Ouput is rather disappointing:
    {
       "took": 240,
       "timed_out": false,
       "_shards": {
          "total": 4,
          "successful": 4,
          "failed": 0
       },
       "hits": {
          "total": 1,
          "max_score": 0,
          "hits": []
       },
       "aggregations": {
          "sum_indexed_field": {
             "value": 4 // ok
          },
          "sum_nonindexed_field": {
             "value": 0 // should get 42 here
          }
       }
    }
Am I doing something wrong?  
Is this due to the way aggregations work?
Note 1 : using `not_analyzed` instead of `no` makes it work.  
Note 2 : adding `"doc_values": true` makes it work as well.
But I'd like to understand.