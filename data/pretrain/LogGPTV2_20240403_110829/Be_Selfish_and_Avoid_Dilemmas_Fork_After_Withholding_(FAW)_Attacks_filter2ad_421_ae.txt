F2Pool
AntPool
Computational Power
Owner
Computational Power
30%
20%
20%
BTCC Pool
BW.com
BitFury
10%
10%
10%
6.3 Simulation Results
To verify the accuracy of this analysis, we implemented a Monte
Carlo simulator in Python to simulate an FAW a(cid:138)ack against the
two pools in cases 1, 2, and 3 in Fig. 4. (cid:140)e ×-marks show simulation
results for 108 rounds, con(cid:128)rming the calculations.
7 TWO-POOL FAW ATTACK GAME
As described in Section 4, pools can execute FAW a(cid:138)acks against
each other as well. We model a simultaneous game between two
players, Pool1 and Pool2. We know that compliance with Bitcoin
protocol by both players is not a Nash equilibrium, because the
FAW a(cid:138)acker can earn extra rewards as discussed in Sections 5
and 6. In this section, we prove and derive the following result in
the Nash equilibrium. In the case of an FAW a(cid:138)ack, 1) the miner’s
dilemma no longer applies, and 2) the game outcome is based on
pool size, where the larger pool wins the game. Note that while
the game is generalizable to n pools, we leave an exact analysis for
Figure 5: Four cases of the two-pool FAW attack game. A
Pool1 (or Pool2) (cid:128)nds an FPoW by innocent mining, B Pool1
(or Pool2) (cid:128)nds an FPoW using in(cid:128)ltration mining and gen-
erates a fork, C Pool1 and Pool2 both (cid:128)nd an FPoW in the
opponent pool through in(cid:128)ltration mining and generate a
fork, and D someone else (cid:128)nds an FPoW. Each pool can earn
a reward in cases A , B , and C .
future work. Before analyzing the two-pool FAW a(cid:138)ack game, we
de(cid:128)ne the winning condition as earning an extra reward. By this
de(cid:128)nition, the game outcome indicates either a single winner, or
no winner (as in the miner’s dilemma).
7.1 (cid:135)eoretical Analysis of the Game
Parameters for the analysis of the FAW a(cid:138)ack game are de(cid:128)ned as
below for i = 1, 2.
αi: Computational power of Pooli
fi: In(cid:128)ltration mining power of Pooli, i.e., fi = τi αi
When both rational players choose the FAW a(cid:138)ack as a strategy,
the players’ rewards are as follows.
Theorem 7.1. In the FAW a(cid:136)ack game between two pools, the
rewards R1 of Pool1 and R2 of Pool2 are:
+ c
+ c
+ c1 f1
1−α1−α2
1−f2
(cid:48)
2 f1 f2( 1
1−f1
(cid:48)
1 f1 f2( 1
1−f1
R1 = α1−f1
1−f1−f2
R2 = α2−f2
1−f1−f2
Proof Sketch. Pool1 and Pool2 can earn rewards in cases A ,
B , and C in Figure 5. Case A represents when an honest miner
in one pool (cid:128)nds an FPoW. According to case A , Pooli can earn
1−f2 ) 1−α1−α2
+ 1
1−f1−f2
1−f2 ) 1−α1−α2
+ 1
1−f1−f2
1−α1−α2
1−f1
(6)
(7)
+ R1
α1+f2
+ R2
α2+f1
+ c2 f2
f1
f2
αi − fi
1 − f1 − f2 .
Case B represents when only one of the two pools (cid:128)nds an FPoW
in the opponent pool using in(cid:128)ltration mining and submits it to the
opponent pool when another miner (cid:128)nds another valid block. If the
FPoW mined by an in(cid:128)ltration miner of Pooli in the opponent pool
is selected as the main chain (with probability ci), the opponent
pool can earn the reward
1 − α1 − α2
1 − fi
.
ci fi
(cid:140)e (cid:128)nal case shows when in(cid:128)ltration miners of both pools (cid:128)nd
FPoWs in each of the opponent pool and someone other than the
two pools (cid:128)nds another FPoW. We de(cid:128)ne c
as the probability that
the FPoW from Pooli’s in(cid:128)ltration mining in the opponent pool
is selected as the main chain among three branches. In case C , if
the in(cid:128)ltration miner of Pool1 (cid:128)rst (cid:128)nds an FPoW in the opponent
(Pool2) and the FPoW is selected as the main chain, Pool2 can earn
the reward
(cid:48)
i
If the in(cid:128)ltration miner of Pool1 (cid:128)nds another FPoW in Pool2 a(cid:137)er
an in(cid:128)ltration miner of Pool2 (cid:128)nds an FPoW in Pool1, Pool2 can
earn the reward
(cid:48)
1 f1
c
f2
1 − f1
1 − α1 − α2
1 − f1 − f2 .
(cid:48)
1 f2
c
f1
1 − f2
1 − α1 − α2
1 − f1 − f2 ,
when the FPoW found from an in(cid:128)ltration miner of Pool1 is selected
as the main chain. (cid:140)erefore, in case C , Pooli can earn the reward
(cid:48)
¬i f1 f2(
c
1
1 − f1
+
1
1 − f2
)1 − α1 − α2
1 − f1 − f2
(c
(cid:48)
1 + c
(cid:48)
2 ≤ 1).
Lastly, Pooli can earn the reward
R¬i fi
α¬i + fi
through in(cid:128)ltration mining. Based on the above rewards for these
cases, the rewards R1 of Pool1 and R2 of Pool2 can be expressed as
Eq. (6) and (7), respectively.
(cid:3)
Next, we show that the game has a unique Nash equilibrium, and
this equilibrium point does not represent honest mining by both
players since a pool can always earn the extra reward by executing
the FAW a(cid:138)ack against a compliant pool.
Theorem 7.2. (cid:138)e game has a unique Nash equilibrium (f1, f2),
= 0 or a point on a
= 0, ∂R2
and this is either a point satisfying ∂R1
∂f2
∂f1
borderline satisfying these restricted conditions.
Proof Sketch. To prove the existence of a Nash equilibrium,
it su(cid:129)ces to show that the second partial derivatives of R1 and R2
for f1 and f2, respectively, are always negative under the following
conditions:
0 ≤ f1 ≤ α1 ≤ 1
0 ≤ f2 ≤ α2 ≤ 1
α1 + α2 ≤ 1
0 ≤ c1, c2 ≤ 1
(cid:48)
0 ≤ c
2 ≤ 1.
(cid:48)
1 + c
(cid:140)erefore, a unique Nash equilibrium point exists since the func-
tions are strictly concave under these conditions [33].
Next, we (cid:128)nd the equilibrium point by using Best-response dy-
namics. Pool1 and Pool2 start with (f1, f2) = (0, 0) and alternately
update these values to the most pro(cid:128)table in(cid:128)ltration mining power.
If we (cid:128)rst update Pool1’s in(cid:128)ltration power f
to maximize R1,
(1)
1
(1)
1
(1)
2 would be adjusted to maximize
then Pool2’s in(cid:128)ltration power f
(2)
R2 according to f
1
again is updated for maximizing R1 based on f
. (cid:140)is process
repeats continuously. When we generalize this for the k-th process,
(k)
f
1
. A(cid:137)er that, Pool1’s in(cid:128)ltration power f
are represented by
and f
(k)
2
(1)
2
(k)
1 = arg max
0≤f1≤α1
f
(cid:48)
1(f1, f
(k−1)
2
),
R
(k)
2 = arg max
0≤f2≤α2
f
(cid:48)
1(f
(k)
1
R
, f2),
(k)
1
(k)
2
and f
respectively. If f
converge as k approaches in(cid:128)nity,
the values will be in a Nash equilibrium. (cid:140)e Nash equilibrium
(f1, f2) is either a point satisfying ∂R1
= 0 or a point on a
∂f1
borderline of the possible region.
(cid:3)
= 0, ∂R2
∂f2
(cid:48)
i
7.2 (cid:134)antitative Analysis
We quantitatively analyze the results of the game between two
pools in the Nash equilibrium point. To reduce the parameter
dimensions, we assume that ci and c
are symmetrical for i = 1, 2
and can be expressed as c and c/2, respectively, while (0 ≤ c ≤ 1).
Fig. 6 represents the results of the FAW a(cid:138)ack game in terms of α2
and c if α1 is 0.2. Figs. 6a and 6b show in(cid:128)ltration mining power
f1 and f2 in the equilibrium. Figs. 6c and 6d represent RERs (%)
(cid:48)
(cid:48)
1 and R
2 of Pool1 and Pool2 (these parameters are de(cid:128)ned as in
R
Section 5.2) in the equilibrium, respectively, in terms of α2 and
c. (cid:140)e black lines in Figs. 6c and 6d are the borderlines at which
Pool1 and Pool2 earn the same RER as an honest miner, respectively.
(cid:140)at is, Pool1 and Pool2 can earn the extra reward in the regions
above the black lines in the corresponding (cid:128)gure, while taking a
loss below the black lines. As a result, Pool1 and Pool2 can win
the game if (α2, c) is above the black lines in Figs. 6c and 6d when
Pool1’s size is 0.2. Figs. 6c and 6d also show that the FAW a(cid:138)ack
game becomes a pool size game, because the region above the black
line is the case in which Pool1’s size is larger than Pool2’s size (and
vice versa).
7.3 Winning Conditions
Eyal discovered that a game between two pools for the BWH a(cid:138)ack
brings forth the “miner’s dilemma”, because both su(cid:130)er a loss in
the Nash equilibrium when their computational power is less than
0.5 [15]. In the FAW a(cid:138)ack game, the miner’s dilemma may not
occur, even if the size of each of the pools is less than 0.5. (cid:140)e