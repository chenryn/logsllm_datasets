  ports:
  - port: 3000
    protocol: TCP
  selector:
    app: pets
    service: web
```
我们已经在`labs/ch13/pets.yaml`文件中收集了 pets 应用的所有四个对象定义，我们可以一次部署该应用:
![](img/fed1ae3f-5bc9-4c78-8bff-d4ff189ef428.png)
Using a single script to deploy the pets application
同样，我们创建了一个脚本`labs/ch13/remove-pets.sh`，从 Kubernetes 集群中移除 pets 应用的所有工件:
![](img/db74d275-6423-44eb-802b-dc05c0913ba0.png)
Removing pets from the Kubernetes cluster
我们已经采用了我们在[第 8 章](08.html)、 *Docker Compose、*中介绍的 pets 应用，并定义了将该应用部署到 Kubernetes 集群中所需的所有 Kubernetes 对象。在每一步中，我们都确保得到了预期的结果，一旦集群中存在所有工件，我们就展示了正在运行的应用。
# 零停机部署
在任务关键型环境中，应用始终处于启动和运行状态非常重要。这些天来，我们再也承受不起任何停机时间了。Kubernetes 为我们提供了实现这一目标的各种方法。集群中不导致停机的应用更新称为**零停机部署**。在本章中，我们将介绍实现这一目标的两种方法。这些措施如下:
*   滚动更新
*   蓝绿色部署
让我们从讨论滚动更新开始。
# 滚动更新
在前一章中，我们了解到 Kubernetes `Deployment`对象与`ReplicaSet`对象的区别在于，它在后者的功能之上添加了滚动更新和回滚。让我们用我们的`web`组件来演示这一点。显然，我们将不得不修改`web`组件的部署清单或描述。
我们将使用与上一节相同的部署定义，但有一个重要的区别——我们将运行 web 组件的五个副本。以下定义也可以在`labs/ch13/web-deploy-rolling-v1.yaml `文件中找到:
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 5
  selector:
    matchLabels:
      app: pets
      service: web
  template:
    metadata:
      labels:
        app: pets
        service: web
    spec:
      containers:
      - image: fundamentalsofdocker/ch08-web:1.0
        name: web
        ports:
        - containerPort: 3000
          protocol: TCP
```
我们现在可以像往常一样创建这个部署，同时还可以创建使我们的组件可访问的服务:
```
$ kubectl create -f web-deploy-rolling-v1.yaml
$ kubectl create -f web-service.yaml
```
一旦我们部署了 pods 和服务，我们就可以使用以下命令测试我们的 web 组件:
```
$ PORT=$(kubectl get svc/web -o yaml | grep nodePort | cut -d' ' -f5)
$ IP=$(minikube ip)
$ curl -4 ${IP}:${PORT}/
Pets Demo Application
```
如我们所见，应用已经启动并运行，并向我们返回了预期的消息`Pets Demo Application`。
现在我们的开发人员已经创建了新版本的`web`组件。新版本`web`组件的代码可以在` labs/ch13/web`文件夹中找到，唯一的变化位于文件`server.js`的第 12 行:
![](img/826397c9-483c-43dd-8738-62c571ce93bb.png)
Code change for version 2.0 of the web component
开发人员构建了如下新映像:
```
$ docker image build -t fundamentalsofdocker/ch13-web:2.0 web
```
随后，他们将映像推送到 Docker Hub:
```
$ docker image push fundamentalsofdocker/ch13-web:2.0
```
我们现在想要更新我们的豆荚使用的映像，它是`web` `Deployment`对象的一部分。我们可以通过使用`kubectl`的`set image`命令来做到这一点:
```
$ kubectl set image deployment/web \
 web=fundamentalsofdocker/ch13-web:2.0
```
如果我们再次测试应用，我们会得到更新确实已经发生的确认:
```
curl -4 ${IP}:${PORT}/
Pets Demo Application v2
```
现在，*我们怎么知道这次更新没有停机？* *更新真的是滚动进行的吗？* *滚动更新到底是什么意思？*我们来调查一下。首先，通过使用`rollout status`命令，我们可以从 Kubernetes 获得部署确实已经发生并且成功的确认:
```
$ kubectl rollout status deploy/web
deployment "web" successfully rolled out
```
如果我们用`kubectl describe deploy/web`描述部署`web`，我们会在输出的末尾得到以下事件列表:
![](img/365cd586-c907-452a-9683-54b6f34ad02d.png)
List of events found in the output of the deployment description of the web component
第一个事件告诉我们，当我们创建部署时，创建了一个具有五个副本的`ReplicaSet` `web-769b88f67`。然后我们执行`update`命令，列表中的第二个事件告诉我们，这意味着创建一个名为`web-55cdf67cd`的新`ReplicaSet`，最初只有一个副本。因此，在那个特殊的时刻，系统上有六个吊舱，五个初始吊舱，一个新版本的吊舱。但是由于`Deployment`对象的期望状态声明我们只想要五个副本，所以 Kubernetes 现在将旧的`ReplicaSet`缩小到四个实例，我们在第三个事件中看到了这一点。然后，新的`ReplicaSet`被放大到两个实例，随后，旧的`ReplicaSet`被缩小到三个实例，以此类推，直到我们有五个新的实例，并且所有旧的实例都被停用。虽然，我们看不到任何精确的时间(除了三分钟)，但是事件的顺序告诉我们，整个更新是以滚动的方式发生的。
在很短的时间内，对 web 服务的一些调用会收到来自旧版本组件的响应，一些调用会收到来自新版本组件的响应。但是这项服务从未中断过。
我们还可以列出集群中的`Recordset`对象，并将得到我在前面部分所说的确认:
![](img/b590752e-3694-4219-8394-d4ceb3dce2b2.png)
List all Recordset objects in the cluster
我们看到新的记录集有五个实例在运行，旧的记录集已经缩小到零个实例。旧的`Recordset`对象仍然存在的原因是 Kubernetes 为我们提供了回滚更新的可能性，在这种情况下，将重用`Recordset`。
为了在一些未被发现的 bug 潜入新代码的情况下回滚映像的更新，我们可以使用`rollout undo`命令:
```
$ kubectl rollout undo deploy/web
deployment "web"
$ curl -4 ${IP}:${PORT}/
Pets Demo Application
```
我还在前面的片段中使用`curl`列出了测试命令，以验证回滚确实发生了。如果我们列出记录集，我们会看到以下输出:
![](img/4f9f18ee-9fc5-420c-9fb1-c15b19be5a71.png)
Listing RecordSet objects after rollback
这确认了旧的`RecordSet` ( `web-769b88f67`)对象已经被重用，并且新的对象已经缩小到零个实例。
尽管有时我们不能，或者不想，容忍旧版本和新版本共存的混合状态。我们想要一个全有或全无的策略。这就是蓝绿色部署发挥作用的地方，我们接下来将讨论这一点。
# 蓝绿部署
如果我们想为 pets 应用的组件 web 进行蓝绿色风格的部署，那么我们可以通过创造性地使用标签来实现。让我们首先提醒自己蓝绿部署是如何工作的。下面是一个粗略的分步说明:
1.  将组件的第一个版本`web`部署为`blue`。为此，我们将在豆荚上贴上标签`color: blue`。
2.  在`selector`部分为这些带有标签`color: blue`的豆荚部署 Kubernetes 服务。
3.  现在我们可以部署版本 2 的`web`组件，但是这次吊舱有一个标签，`color: green`。
4.  我们可以测试绿色版本的服务，它的工作如预期。
5.  现在，我们通过更新`web`组件的 Kubernetes 服务，将流量从`blue`转移到`green`。我们修改选择器使用标签`color: green`。
让我们为版本 1 定义一个`Deployment`对象，蓝色:
![](img/531b842e-b108-46b3-b65f-6d350740c647.png)
Specification of the deployment blue for the web component
前面的定义可以在`labs/ch13/web-deploy-blue.yaml `文件中找到。请注意第 4 行，我们将部署名称定义为`web-blue`，以区别于即将到来的部署`web-green`。还要注意，我们在第 11 行和第 17 行添加了标签`color: blue`。其他一切都和以前一样。
现在我们为`web`组件定义`Service`对象。它将与我们之前使用的相同，只是做了一些小的更改，您将在下面的截图中看到:
![](img/d925f638-ceb5-454c-a327-3f50e909eb29.png)
Kubernetes service for the web component supporting blue–green deployments
与我们在本章前面使用的服务定义唯一不同的是第 13 行，它在`selector`上添加了标签`color: blue`。我们可以在`labs/ch13/web-svc-blue-green.yaml `文件中找到前面的定义。
然后，我们可以使用以下命令部署`blue`版本的 web 组件:
```
$ kubectl create -f web-deploy-blue.yaml
$ kubectl create -f web-svc-blue-green.yaml
```
一旦服务启动并运行，我们就可以确定其 IP 地址和端口号，并对其进行测试:
```
$ PORT=$(kubectl get svc/web -o yaml | grep nodePort | cut -d' ' -f5)
$ IP=$(minikube ip)
$ curl -4 ${IP}:${PORT}/
Pets Demo Application
```