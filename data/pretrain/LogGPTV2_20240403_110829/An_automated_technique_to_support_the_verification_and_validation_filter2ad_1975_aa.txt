# Title: An Automated Technique to Support the Verification and Validation of Simulation Models

## Authors
Samuel K. Klock and Peter Kemper  
College of William and Mary, Department of Computer Science, Williamsburg, VA 23187, USA  
Email: [PI:EMAIL], [PI:EMAIL]

## Abstract
Verification directly assesses the correctness of an implementation, while validation ensures that the model accurately represents the real-world system. In simulation, these processes can be complex due to the variety of modeling environments and the challenges inherent in software engineering. Graphical user interfaces (GUIs) and code snippets are commonly used to support the creation and testing of models. However, generating tests for non-trivial models remains a significant challenge.

A recent approach to this problem involves automatically generating test cases from a formal specification, such as a modal logic representation. This technique, inspired by work in software engineering, can be applied to the verification and validation (V&V) of simulation models. For V&V, we consider the production of testable properties in a modal logic, which can then be evaluated at runtime. While a one-size-fits-all solution is not feasible, automated techniques can significantly enhance the V&V process.

In this paper, we propose an automated technique for the V&V of simulation models using runtime monitoring. We demonstrate the applicability of our approach with an extended version of a stochastic Botnet model originally developed by Van Ruitenbeek and Sanders. Our method deduces model properties from simulation runs and uses these properties to validate subsequent runs. The properties are represented as formulas in linear temporal logic (LTL).

## 1. Introduction
Modern modeling frameworks enable the creation and analysis of detailed system models, particularly in the context of dependability and performance studies. Verification and validation (V&V) are essential steps to ensure that a simulation model is both correct and representative of the real-world system. Verification addresses the question, "Did we build the system right?" while validation addresses, "Did we build the right system?"

Linear temporal logic (LTL) is a common formalism for specifying and verifying system behavior. Previous work, such as Dinesh et al. [11] and Zhou et al. [23], has extended LTL for various applications, including business operations and distributed systems. Bauer et al. [5] discuss how to conduct LTL-based runtime monitoring on traces.

The main contribution of this paper is to present an automated technique for the V&V of simulation models using runtime monitoring. Our approach allows analysts to learn and verify model behavior promptly, leaving room for performance and dependability studies. We focus on untimed behavior, making our method suitable for a wide range of simulation scenarios.

## 2. Definitions
We consider a discrete-event system with a finite set of state variables \( V = \{V_1, V_2, \ldots, V_m\} \) and a finite set of actions \( A \). Each state variable has a domain in \(\mathbb{R}\), \(\mathbb{Z}\), or \(\mathbb{N}\). An event \( e \) is labeled with an action \( a(e) \) and optionally with a time stamp \( t(e) \in \mathbb{R} \). An event changes the state of the system from a predecessor state \( s \) to a successor state \( s' \).

A trace is a sequence of states and events, \( \sigma = s_0 e_1 s_1 \ldots e_n s_n \), where \( s_i \in S \) and \( e_i \in E \). The trace captures the dynamic behavior of the system, showing the sequence of states and the actions that cause state transitions. We are primarily interested in functional properties, assuming that timing requirements are not critical for the study.

## 3. SE-LTL
State/Event Linear Temporal Logic (SE-LTL) is a formalism that extends LTL to describe the behavior of discrete-event systems. SE-LTL allows us to specify properties of state transitions and events. We use SE-LTL to generate testable properties that can be monitored at runtime.

## 4. Deriving Invariants
We derive invariants from simulation traces using tools like Daikon [12] and Traviando [15]. These invariants, which are likely to hold based on the observed traces, are then converted into LTL formulas. We evaluate the proposed approach using an extended version of a Botnet model developed by Van Ruitenbeek and Sanders [20].

## 5. Application
We apply our technique to the extended Botnet model to demonstrate its effectiveness. The invariants derived from the simulation traces are used to monitor and validate the model's behavior. Our tool architecture integrates SE-LTL, Daikon, and Traviando to provide a comprehensive V&V framework.

## Conclusion
This paper presents an automated technique for the V&V of simulation models using runtime monitoring. By deriving invariants from simulation traces and converting them into LTL formulas, we enable analysts to verify and validate model behavior efficiently. The application to a Botnet model demonstrates the practicality and effectiveness of our approach.

---

**Note:** This document is authorized for limited use at Tsinghua University. Downloaded on March 18, 2021, at 14:04:17 UTC from IEEE Xplore. Restrictions apply.