title:An automated technique to support the verification and validation
of simulation models
author:Samuel K. Klock and
Peter Kemper
201O IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
An Automated Technique to Support the Verification 
and Validation 
of 
Simulation Models 
Samuel K. Klock, Peter Kemper 
College of William and Mary 
Department of Computer Science 
Williamsburg, 
VA 23187, USA 
PI:EMAIL,  PI:EMAIL 
Abstract 
Verification 
directly 
assesses 
the correctness 
of an imple­
en­
models from different 
creating 
modeling 
can mean many things 
a simulation 
and combining 
for an executable 
a model in a graphical 
where "implementation" 
crafting 
environments 
mentation, 
-for example, 
vironment, 
simulation 
or implementing 
ming language 
library. 
eling enable the inclusion 
to programming. 
close proximity 
of modeling 
model comes with many chal­
implementing 
lenges that are seen in software  engineering 
in general. 
model, 
model in a common program­
the support 
user interfaces 
of code snippets, 
Many graphical 
in simulation 
a conceptual 
with or without 
overall 
In summary, 
mod­
of a simulation 
illustrating 
the 
in software 
is broadly applied 
support 
testing 
for automated 
the cor­
is to provide 
tests. 
A recent ap­
for non-trivial 
generation 
of tests 
Related to V &V, testing 
and document 
One challenge 
with substantial 
testing. 
results 
engineering 
and regression 
rect and expected 
proach to this problem is the automatic 
that characterize 
an executable, 
itator 
will draw from this idea but instead 
of a formal specification 
specification 
The corresponding 
tion [17]. It is applied 
in the work by Sokolsky 
can in turn be evaluated 
[16] or Rosu [19]. 
in software 
technique 
software 
the behavior 
form as, for example, 
testable 
does. For V & V of simulation 
of a program in 
Agitar's 
models, we 
Ag­
consider 
the production 
in a modal logic. Such a formal 
on-the-fty 
is known as runtime 
verifica­
at runtime. 
engineering, 
for example, 
to 
for particular 
results 
modeling 
are worth being 
Simulation 
techniques 
are feasible. 
of validation 
and verification 
model validation 
and ver­
While we cannot expect a magic solution 
a technique 
from simulation 
requires 
ification to ensure that computed 
considered. 
the general problem, automated 
aspects 
paper, we propose 
automatically 
tion and validation 
monitoring 
sented as formulas 
to functional  properties. 
of the approach with using an extended 
tic Botnet model originally  developed 
and Sanders. 
to deduce model properties 
runs performed 
and to use those properties 
runs. Properties 
We demonstrate 
version 
by Van Ruitenbeek 
for verifica­
for runtime 
temporal logic and are limited 
during production 
of a stochas­
in linear 
are repre­
In this 
the applicability 
1. Introduction 
Modern modeling 
frameworks 
help us to create and an­
sys­
In stochastic 
and methods to effi­
has explored 
assessment 
model analysis 
experiments. 
ways to develop 
substantial 
and performance 
for the dependability 
the develop­
accurate 
models of great complexity. 
research 
formalisms, 
analyze such models. In practice, 
of simulation 
boils down to a series 
alyze detailed 
modeling 
of systems, 
ment of versatile 
tem models using these formalisms, 
ciently 
usually 
a simulation study,  verification 
necessary 
study. Validation 
right system?" 
tion of a conceptual 
model with the question 
See for instance 
pected to provide 
of interest 
in the system under study. 
In 
(V & V )  are 
of the 
"Did we build the 
reasonably 
that are consistent 
model into an implemented, 
[1, 22]. A valid and verified 
steps to justify confidence 
accurate 
values for measures 
with what would be observed 
"Did we build the system right?" 
while verification 
and validation 
to the question 
in the results 
the transforma­
executable 
addresses 
relates 
model is ex­
Linear temporal 
logic (LTL) can form the basis of for­
In [11], Dinesh et al. extend LTL to describe regula­
and offer a trace-checking 
runtime verifi­
including 
to evaluate 
for verification, 
mal specifications 
cation. 
tory texts for business operations 
algorithm 
by trace analysis. 
model checking 
approach 
of simulation 
ification 
[23], where Zhou et al. describe 
set 
and runtime 
ver­
in a distributed environment 
in 
conformance 
Bauer et al. discuss 
runs. Performing 
how to conduct LTL 
an extension 
monitoring 
monitoring 
to achieve 
of systems 
runtime 
to their mon-
on traces in [5]. We will follow the latter 
has been discussed 
of a distributed 
to regulations 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
595 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
either to regression­
can be used later on to 
simulation 
experiments, 
The set of formulas 
the specification. 
check further 
test a modified model or to monitor production 
main point is that an analyst 
if the model is simulated 
verified 
set of formulas 
dependability 
study to be meaningful. 
leaves sufficient 
behavior. 
in a way that leaves its range of 
runs. The 
Since we focus on untimed behavior, 
can learn easily and promptly 
room for a performance 
the 
or 
for program behavior 
and 
The contribution 
of this paper is to pave the way for 
and checking 
framework MaC to evaluate 
itoring 
In 
protocols 
our case, the simulation experiments 
and 
communication 
is not considered. 
with declarative 
that are specified 
among clients 
are independent 
networking. 
network 
Given these approaches 
to performing 
challenge 
runtime verifica­
a formal 
is obtaining 
the system's 
correct 
how to clarify 
describes 
et al. describe 
that accurately 
In [18], Mondragon 
language 
formulas 
tion, the chief remaining 
specification 
behavior. 
specifications 
natural 
generate 
in future interval 
tool in such a way that those formulas 
down to safety properties 
monitored 
work for running 
gate ways to derive a formal specification 
manner on the basis of the routine 
typically 
Java programs. 
performs. 
logic using the Prospec 
can then be compiled 
with the MaC frame­
In this paper, we investi­
in an automated 
V&V work an analyst 
refers to the fact that the invariant 
In software development, 
generating 
is supported 
a formal descrip­
to a certain 
extent 
so-called 
likely 
from a finite sample of observations, 
is accordingly 
A well­
The term 
invariants. 
properties 
are in­
so 
not guaranteed. 
is Daikon [12], which de­
as safety properties 
that hold at method 
For readability, 
we drop the word "likely" 
tool in this category 
tion of program behavior 
by tools that generate 
likely 
ferred statistically 
their correctness 
established 
rives such invariants 
calls and returns. 
from our discussion 
understanding 
information 
ants, namely ranges of values, 
hardware 
that all invariants 
are only likely invariants. 
deduced from finite trace 
Very simple invari­
are used in [21] to monitor 
and use the term "invariant" 
with the 
types of invariants, including 
in LTL that can be generated 
and monitored 
by means of a formal 
manner. We evaluate 
automated 
using an implementation 
the pro­
that extends 
and 
[15], and Daikon [12]. In 
Traviando 
Mobius[lO], 
of V &V testing 
automated 
support 
specification 
in a completely 
posed approach 
integrates 
this paper, we derive various 
several 
of simulation traces. 
las using a state/event 
transform 
of LTL for subsequent 
types using an adaptation 
We formalize 
them into finite automata 
runtime 
linear temporal 
of Daikon for the analysis 
all invariants 
as formu­
logic (SE-LTL) 
and 
in a three-valued 
variant 
verification. 
The rest of the paper is structured 
as follows. 
In Section 
traces 
and 
necessary 
for simulation 
different 
notation 
3, we describe 
2, we introduce 
SE-LTL. In Section 
ants, which we derive via Daikon and Traviando 
simulation 
and Section 
extended 
Van Ruitenbeek 
of a Botnet model developed 
and Sanders [20]. 
4 describes 
5 shares an application 
of our approach 
to an 
by 
Section 
traces. 
version 
types of invari­
for given 
originally 
our tool architecture, 
and to detect permanent 
hardware 
faults. 
2. Definitions 
study of the performance 
a model for configurations 
In this paper, we propose 
a way to enhance 
the usual pro­
of the model (according 
to a 
of a system in the following 
way. V&V 
an analyst 
to simulate 
a simulation 
stipulating 
cess of conducting 
or dependability 
requires 
all aspects 
that a) exercise 
simple coverage 
criterion 
code that are not executed 
sufficiently 
(i.e., 
formance 
succeeds 
those V & V experiments 
and derive a formal specification of 
or dependability 
on those V &V experiments, 
to infer correct 
results). 
tested) 
show that the model is able to reproduce 
and that b) enable validation 
LTL formulas. 
If a simulation 
model 
we can make use of 
behavior 
of a model 
of a model 
known per­
that relevant 
pieces of 
We consider 
a discrete-event 
system that has a finite set 
are numeri­
Vl, ... , Vm in V. State variables 
with a domain in:R, 7J" or N. The occurrence 
that cause a change in value for state variables 
and a finite set of actions A. A state 
vector with a value for each of the 
V of m state variables 
S is an m-dimensional 
state variables 
cal variables 
of actions 
yields dynamic behavior. 
noted as an event. An event e is labeled 
as a( e) and optionally 
ing action 
also with a 
time stamp t( e) E :R; it changes the state of a model from a 
predecessor 
(s'). 
of an action is de­
with a correspond­
s) to a successor 
state 
a E A denoted 
The occurrence 
state (denoted 
or starting 
We are mainly interested 
in observing 
the behavior 
of 
by tests cannot be considered 
The class of properties 
we address 
in this paper focuses 
sufficiently 
measures 
properties 
model. We 
by 
of a stochastic 
are covered 
on purely functional 
assume that timing requirements 
the performance/dependability 
for a study. The formal specification 
mated manner, along with a report in a less formal, 
read format; 
fer instead 
puts to recognize 
tem and accordingly 
in an auto­
to 
easier 
and re­
can review both of these out­
of parts of the sys­
or remove formulas 
from 
to [14]. An analyst 
incorrect 
we will not discuss 
descriptions 
add, change, 
of the latter 
an analyst 
is derived 
details 
defines 
of state transforma­
model from a sequence 
So, ... ,Sn E S and events 
a stochastic 
tions, which we define as a trace. A trace is a sequence 
(Y  =  sOelsl ... enSn of states 
el, ... ,en E  E over some (finite or infinite) 
E for an arbitrary 
those actions 
stances 
and what changes an action makes to which state variables 
(firing effect or state transformation). 
in (Y, we can observe 
where they can occur (enabling 
sets S and 
but fixed n  E N, the length of (Y. For 
that are present 
(states) 
circum­
conditions) 
Note that the trace neither 
reveals 
any reasons 