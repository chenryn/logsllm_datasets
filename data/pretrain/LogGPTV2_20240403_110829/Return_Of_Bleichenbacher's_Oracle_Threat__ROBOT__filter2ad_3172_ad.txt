ior proﬁles which could not be attributed to any speciﬁc
vendor. These behaviors were found on 923, 793, and
763 hosts, respectively.
7 Proof of concept attack
Our code ﬁrst scans the host for Bleichenbacher vul-
nerabilities. We try to detect a variety of signals given by
the server and automatically adapt our oracle to it.
For a successful attack we need many subsequent
Our attack code utilizes
connections to a server.
TCP NODELAY ﬂag and TCP Fast Open where available to
make these connections faster. This reduces latency and
connection overhead allowing for more oracle queries
per second.
We have published our proof of concept attack under
a free license (CC0).
8
Impact analysis
A vulnerable host allows an attacker to perform opera-
tions with the server’s private key. However, given that
the attack usually takes several tens of thousands of con-
nections it takes some time to perform. This has conse-
quences for the impact of the attack.
TLS supports different kinds of key exchanges with
RSA: Static RSA key exchanges where a secret value is
encrypted by the client and forward-secrecy enabled key
exchanges using Difﬁe Hellman or elliptic curve Difﬁe
Hellman where RSA is only used for signing. Mod-
ern conﬁgurations tend to favor the Elliptic Curve Difﬁe
Hellman key exchange. In a correct TLS implementa-
tion, it should not be possible for an attacker to force a
speciﬁc key exchange mechanism, however other bugs
may allow this.
If a static RSA key exchange is used, the attack has
devastating consequences. An attacker can passively
record trafﬁc and later decrypt it with the Bleichenbacher
oracle. Servers that only support static RSA key ex-
changes are therefore at the highest risk. We observed
devices and conﬁgurations where this is the case, notably
the Cisco ACE load balancers and the host paypal.com.
In this section we describe general applications of Ble-
ichenbacher attacks to servers that do not support static
RSA key exchange.
We developed a proof of concept attack that allows de-
crypting and signing messages with the key of a vulner-
able server. The attack is implemented in Python 3. Our
proof of concept is based on Tibor Jager’s implementa-
tion of the Bleichenbacher algorithm.
The implementation uses the simple algorithm as de-
scribed by Bleichenbacher’s original work [11]. Our at-
tack thus does not use the optimized algorithms that have
been developed over the years [7]. We also did not paral-
lelize the attack, all connections and oracle queries hap-
pen sequentially. Despite these limitations we were still
able to practically perform the attack over the Internet
both for decryptions and for signatures.
8.1 Attacks when server and client do not
use RSA encryption
To attack a key exchange where RSA is only used for
signatures, the attacker faces a problem: He could imper-
sonate a server to a client, but in order to do this he has
to be able to perform an RSA signature operation during
the handshake. A TLS handshake usually takes less than
a second. An attacker can delay this up to a few sec-
onds, but not much more. Therefore, the attack needs to
happen really fast. Creating a signature with a Bleichen-
bacher attack takes longer than decrypting a ciphertext,
therefore this is particularly challenging.
826    27th USENIX Security Symposium
USENIX Association
However, if the client still supports RSA encryption,
the attacker has another option: He can downgrade the
connection to an RSA key exchange. This has previ-
ously been described by Aviram et al. [6]. We believe
that in realistic scenarios it is possible to optimize the at-
tack enough to be able to perform this, particularly for
large targets that have a lot of servers. An attacker could
parallelize and distribute the attack over multiple servers
himself and attack multiple servers of the target. How-
ever, we have not practically tried to perform such an
attack.
8.2 Attack on old QUIC
The QUIC protocol allowed a special attack scenario.
Older versions of QUIC had the possibility to sign a
static X25519 key with RSA. This key could then be
used to run a server without the need of using the pri-
vate RSA key during the handshake. This scenario has
previously been discussed by Jager et al. [23] and in the
context of the DROWN attack by Aviram et al. [6]. In
response to the DROWN attack Google has ﬁrst disabled
QUIC for non-Google hosts and later changed the QUIC
handshake to prevent this attack [12].
8.3 Cross-protocol and cross-server at-
tacks
It should be noted that with Bleichenbacher attacks
the attack target can be independent from the vulner-
able server as long as they share the same RSA key.
As shown by Aviram et al. [6] this has several prac-
tical implications. Let’s assume a web service un-
der www.example.com is served by a safe TLS stack
that is not vulnerable. This server can still be at-
tacked if the same RSA keys are used elsewhere by
a vulnerable stack. This is possible because an at-
tacker can use the oracle from the vulnerable server
to sign messages or decrypt static RSA key exchanges
with www.example.com.
Impersonation attacks are
also possible against www.example.com provided there
is some vulnerable service using an HTTPS certiﬁcate
valid for www.example.com and the attacker is fast
enough. The most common scenario for this would
be if a *.example.com certiﬁcate is used on the vul-
nerable target. We have actually observed such an ex-
ample in the wild. The main WhatsApp web page –
www.whatsapp.com – was not vulnerable. Several sub-
domains of whatsapp.com were however vulnerable
and used a wildcard certiﬁcate that was also valid for
*.whatsapp.com. These servers provided very good
performance, thus we believe a parallelized attack would
have allowed impersonation of www.whatsapp.com.
Similar attack scenarios can be imagined if different
services share a certiﬁcate, a key, or have certiﬁcates that
are also valid for other services. For example, a vulnera-
ble e-mail server could allow attacks on HTTPS connec-
tions.
These scenarios show the risk of sharing keys between
different services or using certiﬁcates with an unneces-
sarily large scope. We believe it would be good crypto-
graphic practice to avoid these scenarios. Each service
should have its own certiﬁcates and certiﬁcates that are
valid for a large number of hosts - particularly wildcard
certiﬁcates – should be avoided. Also private keys should
not be shared between different certiﬁcates.
8.4 Attack on ACME revocation
Apart from attacks against TLS an attack may be pos-
sible if the private key of a TLS server is also used in
different contexts.
An example for this is the ACME protocol [8] for cer-
tiﬁcate issuance that is used by Let’s Encrypt. It allows
revoking certiﬁcates if one is able to sign a special revo-
cation message with the private key belonging to a cer-
tiﬁcate.
While this does not impact the security of TLS con-
nections, it allows causing problems for web page opera-
tors that may see unexpected certiﬁcate validation errors.
9 Discussion
9.1 Countermeasures in TLS 1.0, 1.1 and
1.2
Bleichenbacher’s original attack was published in 1998.
At that time SSL version 3 was the current version of the
SSL protocol. SSL version 3 was replaced with TLS ver-
sion 1.0 in 1999 and this was thus the ﬁrst standard that
included countermeasures to Bleichenbacher’s attack.
TLS 1.0 [2] proposed that when receiving an incor-
rectly formatted RSA block an implementation should
generate a random value and proceed using this random
value as the premaster secret. This will subsequently lead
to a failure in the Finished message that should be in-
distinguishable from a correctly formatted RSA block for
an attacker.
TLS 1.0 did not deﬁne clearly what a server should
do if the ClientHello version in the premaster secret
is wrong. This allowed Kl´ıma, Pokorn´y and Rosa to de-
velop a bad version oracle [26]. Also the countermea-
sures open up a timing variant of the Bleichenbacher or-
acle. Given that the random value is only created in case
of an incorrectly formatted message an attacker may be
able to measure the time it takes to call the random num-
USENIX Association
27th USENIX Security Symposium    827
ber generator. In TLS 1.1 [17] it was attempted to con-
sider these attacks and adapt the countermeasures.
In TLS 1.2 [34] two potential algorithms are pro-
vided that implementers should follow to avoid Ble-
ichenbacher attacks. These two variations contain further
sub-variations, describing proposals for how to maintain
compatibility with broken old implementations. How-
ever these should only be applied if a version number
check is explicitly disabled. Furthermore TLS 1.2 states
that the ﬁrst algorithm is recommended, as it has theoret-
ical advantages, referring again to the work of Kl´ıma,
Pokorn´y and Rosa [26].
It is not clear why the TLS
designers decided to propose two different algorithms
while also claiming that one of them is preferable. This
needlessly increases the complexity even more.
The difference between the two algorithms in TLS 1.2
is the handling of wrong ClientHello versions. The
ﬁrst algorithm proposes that servers ﬁx ClientHello
version errors in the premaster secret and calculate the
Finished message with it. The second algorithm pro-
poses to always treat a wrong version number in the pre-
master secret as an error.
The TLS standards mention that the OAEP proto-
col provides better security against Bleichenbacher at-
tacks.
It was always decided however to keep the old
PKCS #1 v1.5 standard for compatibility reasons.
To summarize, it can be seen that the designers of
the TLS protocol decided to counter Bleichenbacher at-
tacks by introducing increasingly complicated counter-
measures. With each new TLS version the chapter about
Bleichenbacher countermeasures got larger and more
complex. As our research shows, these countermeasures
often do not work in practice and many implementa-
tions remain vulnerable. In our opinion this shows that
it is a bad strategy to counter cryptographic attacks with
workarounds. The PKCS #1 v1.5 encoding should have
been deprecated after the discovery of Bleichenbacher’s
attack.
We would like to point out that something very simi-
lar happened in TLS in terms of symmetric encryption.
In 2002 Vaudenay demonstrated a potential padding ora-
cle attack against CBC in TLS [37]. Instead of removing
these problematic modes or redesigning them to be re-
silient against padding oracle attacks the TLS designers
decided to propose countermeasures. TLS 1.2 explicitly
mentions that these countermeasures still leave a timing
side-channel. AlFardan and Paterson were subsequently
able to show that this timing side-channel could be ex-
ploited [1].
9.2 Timing attacks
In this research we focused on Bleichenbacher vulnera-
bilities that can be performed without using timing at-
tacks. We therefore point out that hosts that show up as
safe in our scans are not necessarily safe from all varia-
tions of Bleichenbacher attacks. It is challenging to test
and perform timing attacks over the public Internet due to
random time differences based on network ﬂuctuations.
Meyer et al. have described some timing-based Ble-
ichenbacher vulnerabilities [28]. Given the complexity
of the countermeasures in the TLS standard it is very
likely that yet unknown timing variants of Bleichen-
bacher vulnerabilities exist in many TLS stacks.
We learned from Adam Langley that various TLS im-
plementations may be vulnerable to timing attacks due
to the use of variable-size bignum implementations. In
OpenSSL the result of the RSA decryption is handled
with the internal BN (bignum) functions.
If the de-
crypted value has one or several leading zeros the opera-
tion will be slightly faster. If an attacker is able to mea-
sure that timing signal he may be able to use this as an
oracle and perform an attack very similar to a Bleichen-
bacher attack. Other TLS libraries have similar issues.
The timing signal is very small and it is unclear
whether this would be exploitable in practice. However,
AlFardan and Paterson have shown in the Lucky Thir-
teen attack [1] that even very small timing side-channels
can be exploitable.
9.3 PKCS #1 v1.5 deprecation in TLS
TLS protocol designers reacted to Bleichenbacher’s re-
search and followup research by adding increasingly
complex workarounds. Our research shows that this
strategy has not worked. The workarounds are not im-
plemented correctly on a large number of hosts.
For the upcoming TLS 1.3 version the RSA encryption
key exchange has been deprecated early in the design
process [33]. However, as shown by Jager et al. this is
not sufﬁcient, as attacks can be performed across proto-
col versions [23]. If we assume that countermeasures are
unlikely to be implemented correctly everywhere then
the only safe option is to fully disable support for RSA
encryption key exchanges.
This comes with some challenges. The alternatives to
the RSA key exchange are ﬁnite ﬁeld Difﬁe Hellman and
Elliptic Curve Difﬁe Hellman key exchanges. There has
also been a push to deprecate ﬁnite ﬁeld Difﬁe Hellman,
because clients cannot practically require safe parame-
ters from a server. The Chrome browser developers have
thus decided to disable support for ﬁnite ﬁeld Difﬁe Hell-
man [10]. This leaves Elliptic Curve Difﬁe Hellman as
the only remaining option, however, deployment of those
ciphers has been delayed by patent concerns. Thus RSA
encryption based key exchanges have been considered as
a compatibility fallback to support old clients.
The deprecation of ﬁnite ﬁeld Difﬁe Hellman is not
828    27th USENIX Security Symposium
USENIX Association
necessarily a problem here. Bleichenbacher vulnerabil-
ities affect the server side of TLS. There is no added
risks if clients still support RSA encryption based key ex-
changes. Therefore server operators can disable RSA en-
cryption based key exchanges and support Elliptic Curve
Difﬁe Hellman exchanges for modern clients and ﬁnite
ﬁeld Difﬁe Hellman for old clients.
Cloudﬂare informed us that on their hosts only around
one percent of client connections use an RSA encryption
key exchange. One of the authors of this paper operates
HTTPS servers and was able to disable RSA encryption
without any notable problems.
There is some indication that disabling RSA encryp-
tion on E-Mail servers is more problematic. We were
able to log TLS ciphers on a mail server operated by one
of this paper’s authors. We identiﬁed legitimate connec-
tions to IMAP and POP3 with an RSA key exchange. By
asking the affected users we learned that they all used the
“Mail” app that came preinstalled on old Android 4 or in
one case even Android 2 phones.
The algorithm choices on Android depend on
On an Android 4.3 phone we were
the app.
able to observe that
the Mail app connected via
TLS RSA WITH AES 128 CBC SHA. However using the
free K9Mail app a connection with an Elliptic Curve
Difﬁe Hellman key exchange was used. Therefore in or-
der to reduce the need to support the RSA encryption
based key exchange users can switch to alternative apps
that support more modern cryptographic algorithms.
Despite these challenges we believe that the risk of
incorrectly implemented countermeasures to Bleichen-
bacher attacks is so high that RSA encryption based key
exchanges should be deprecated. Considering the com-
patibility issues and risks we recommend that ﬁrst sup-
port on the server side should be disabled. For HTTPS
servers we believe that this can be done today and will
only cause minor compatibility issues.
9.4 OAEP, PKCS #1 v1.5 for signatures
and PSS
RSA-OAEP is an alternative to the padding provided
by PKCS #1 v1.5 and provides better security for en-
crypted RSA. It is standardized in the newer PKCS #1
standards, the latest being version 2.2 [29]. However it
was never used for TLS and it is unlikely that this is go-
ing to change.