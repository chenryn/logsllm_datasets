Using the older and more capable vectorization passes in GCC,
ICC from Intel, and XLC from IBM may allow more loops to
be vectorized [32].
In the context of LR2, vectorization would not only reduce
the running time by exploiting the data parallelism inherent
to many computations; it would also reduce the number of
required load masking operations by a factor of more than four.
First of all, vectorized loads read four consecutive scalars into
vector registers using a single (masked) address. Second, the
NEON instructions operate on dedicated, 128-bit wide registers
which means that fewer addresses would be spilled to the stack
and re-masked when reloaded.
B. Assembly code
LLVM does not process inline assembly on an instruction
level and therefore transformation passes can only work with
inline assembly blocks as a whole. Therefore our current
prototype does not handle inline assembly;
this is not a
fundamental limitation of our approach however. To make sure
that every load is properly masked in the presence of assembly
code, we could extend the LLVM code emitter or an assembly-
rewriting framework such as MAO [26] with load-masking and
code pointer hiding passes. Since the code is not in SSA form
at this stage we can not apply our optimizations.
C. Dynamically Generated Code
JIT-ROP attacks are ideally mounted against browsers
containing scripting engines. To ensure complete leakage-
resilience, we must ensure that XoM and code-pointer hiding
is also applied to just-in-time compiled code. Crane et al. [14]
patched the V8 JavaScript engine used in the Chrome browser
to make it compatible with XoM. To use this patch for LR2,
we would have to add functionality to ensure that every load
emitted by the JIT compiler is properly masked. This would
simply involve engineering effort to patch the JIT compiler.
A special property of JIT-compiled code is that it is treated
as both code and data by the JIT compiler; when the compiler
needs to rewrite or garbage collect the code, it is treated
as read-write data, and while running it must be executable.
When XoM is enforced natively by the hardware, the page
permissions of JIT compiled code can be changed by updating
the page tables used by the memory management unit. With
software-enforced XoM, we can make JIT compiled code
readable by copying it (in part or whole) into the memory
range that is accessible to masked loads. However, that would
require a special memcpy function containing unmasked loads.
Therefore, we believe that a better solution would be to adopt
the split-process technique presented by Song et al. [51].
The key idea of this work is to move the activities of the
JIT compiler into a separate, trusted process. Speciﬁcally, the
code generation, optimization, and garbage collection steps are
moved to a separate process in which the JIT code cache
always has read-write permissions. In the main process, the
JIT code cache is always mapped with execute-only (or read-
execute if XoM is unavailable) permissions. The two processes
access the JIT code cache through shared memory. The main
process invokes JIT compilation functionality in the trusted
process through remote procedure calls.
D. Whole-Function reuse attacks
Since LR2 raises the bar signiﬁcantly for ROP attacks
against mobile architectures, attackers may turn to whole-
function reuse techniques such as the classic return-into-libc
(RILC) technique [37] or the recent counterfeit object-oriented
programming (COOP) attack [46]. Our core techniques—
execute-only memory and code-pointer hiding—can be ex-
tended to mitigate RILC and COOP attacks, as proposed by
Crane et al. [15]. To thwart COOP, we would split C++ vtables
into a data part (rvtable) and a code part (xvtable) stored on
execute-only pages. The xvtable contains trampolines, each
of which replaces a pointer to a virtual method. Randomly
permuting the layout of the xvtable breaks COOP attacks
because they require knowledge of the vtable layout. We can
break RILC attacks by similarly randomizing the procedure
linkage table (PLT) or analogous data structures in Windows.
11
l d r
1
2
3 mov
4
l d r
l d r
5
6
b f i
7
8
9
10
11
12
13
add
l d r
l d r
[ . . . ]
r0 ,
[ r1 , #0]
r12 , #28
r3 ,
r1 ,
r0 ,
[ r0 , #7]
[ r0 , #11]
r12 , #0 , #20
r1 ,
r0 ,
r 3
[ r0 , #0]
r1 ,
[ r1 ,
r2 ,
l s l #2]
Before Instrumentation
[ r1 , #0]
[ r 0 , #7]
[ r 0 , #11]
r12 , #0 , #20
r 0 ,
r0 , r0 , #0 x80000000
r12 , #28
r3 ,
r 1 ,
r 0 ,
r0 , r0 , #0 x80000000
r 1 ,
r0 ,
r 1 ,
l s l #2
r1 , r1 , #0 x80000000
r1 ,
l d r
1
b ic
2
3 mov
4
l d r
l d r
5
b f i
6
b ic
7
add
8
9
l d r
add
10
b ic
11
l d r
12
[ . . . ]
13
After Instrumentation
r 3
[ r 0 , #0]
r 1 ,
r2 ,
[ r 1 ]
Figure 6: Simpliﬁed disassembly of the function v8::internal::ElementsAccessorBase::Get that is used to read
arbitrary memory. The load instruction in line 12 reads the memory from the base address provided in register r1 plus the offset
in register r2. After the instrumentation this load is restricted by masking the MSB (line 11) which prevents reads into the code
segment.
E. Compatibility
Due to the nature of its load masking and return-address
hiding scheme, LR2 is fully compatible with unprotected third
party libraries. However, if an unprotected library contains
an exploitable memory-disclosure vulnerability it compromises
the security of the entire process.
In some cases application developers use the mmap()
function to map memory to a speciﬁc address. In LR2 we
do not allow mapping to arbitrary addresses because the
application will fail when trying to read memory mapped
into the XoM region. Hence, we only allow mapping memory
into the data region. This is still consistent with the correct
semantics of mmap() because the kernel considers requested
addresses merely as a hint rather than a requirement
F. AArch64
Our implementation currently targets 32-bit ARMv7 pro-
cessors. ARM recently released ARMv8, which implements
the new AArch64 instruction set for 64-bit processing. LR2
can be ported directly to AArch64. Though AArch64 does not
provide a bit clear instruction with immediate operands, we
can achieve the same effect with a bitwise AND instruction.
VIII. RELATED WORK
Table I: Characterization of leakage-resilient defenses. The
third column indicates whether the defense prevents read
accesses to code pages. The fourth column indicates whether
pointers can be used to leak the code layout.
Applicable to mobile systems?
XoM Ptr. Hiding
Oxymoron [3]
XnR [4]
Isomeron [20]
Opaque CFI [35]
HideM [22]
Readactor [14]
Readactor++ [15]
ASLRGuard
TASR
LR2
No. Bypassed [20]
(cid:88)
No. Requires virtual memory.
N/A
No. High memory requirements
N/A
No. High memory requirements
(cid:88)
No. Requires virtual memory.
No. Requires HW X-only memory. (cid:88)
No. Requires HW X-only memory. (cid:88)
No. Requires 64-bit address space.
No. Requires strict C compliance.
Yes. Requires W⊕X support.
N/A
(cid:88)
(partial)
(partial)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Numerous papers have been published on software di-
versity in the last two decades. We refer to Larsen et al.
[29] for an overview and limit
the present discussion to
recent work on leakage-resistant diversity. Table I shows recent
approaches and the reasons why they are not ideal for mobile
and embedded devices.
a) Leakage-Resilient Diversity: Backes and Nürnberger
[3] were ﬁrst to demonstrate a defense against JIT-ROP attacks.
Their Oxymoron approach uses the vestiges of x86 segmen-
tation features to hide code references between code pages
which in turn prevents the recursive disassembly step in the
original JIT-ROP attacks. Davi et al. [20] later showed that JIT-
ROP attacks are still possible without recursive disassembly
because the adversary can scan data pages to discover plenty
of code pointers that leak the location of code pages. The
eXecute-no-Read (XnR) approach by Backes et al. [4] provides
increased resilience against memory disclosure vulnerabilities
by emulating execute-only memory (XoM) on x86 processors.
While the concept of XoM goes back to MULTICS [12], it is
hard to support on x86 and other platforms that implicitly as-
signs read permissions to executable pages. The XnR approach
is to mark code pages “not present” so any access invokes
a page-fault handler in the operating system. If an access
originates from the instruction fetcher, the page is temporarily
marked present (and thus executable and readable), otherwise
execution terminates. This prevents all read accesses outside
a sliding window of recently executed pages. Gionta et al.
[22] demonstrated that XoM can also implemented using a
technique known as “TLB Desynchronization” on certain x86
processors. Whereas virtual addresses usually translate to the
same physical address regardless of the type of access access,
the HideM approach translates reads and instruction fetches to
distinct physical pages. This means that HideM, in contrast to
XnR, can support code that embeds data in arbitrary locations.
However, Conti et al. [11] demonstrated that neither XnR nor
HideM prevents indirect memory disclosure attacks where the
adversary “harvests” code pointers stored in the stack, heap,
or global data areas of the process.
Readactor by Crane et al. [14] provides comprehensive
XoM on x86 processors by separating code and data during
compilation. At run time, a lightweight hypervisor activates
12
b) Protecting Code Pointers: Cowan et al. [13] were
ﬁrst
to protect code pointers. Their PointGuard technique
XORs all pointers with a per-program key; PointGuard uses
a weak threat model and therefore does not provide leakage
resilience. G-Free [38] encrypts return addresses using a per-
function key. Unlike our solution, the XOR key is not hidden
from adversaries which makes their solution vulnerable in our
threat model. Isomeron by Davi et al. [20] clones the code
and switches between clones at each call site by randomly
ﬂipping a coin. If the coin came up heads, an offset is added
to the return address before it is used. Because the result of
the coin-ﬂip is stored in a hidden memory area, adversaries
cannot predict how the return addresses in a ROP payload will
be modiﬁed by Isomeron. Since all code is cloned, Isomeron
does not scale down to resource-limited systems.
ASLRGuard [31] also prevents code pointers from disclos-
ing the code layout. ASLRGuard uses a nonce and index into
a code pointer table, which is hidden using the vestiges of x86
segmentation; this is yet another example of an x86-speciﬁc
defense. More importantly, ASLRGuard implicitly needs a 64-
bit virtual memory space for ASLR itself to be secure from
brute-force attacks. Shacham et al. [49] demonstrated that
ASLR in a 32-bit address space is insecure due to low entropy.
Most RISC devices have a 32-bit address space at most, and
some even lack an MMU to provide virtual memory at all.
Thus, ASLR and ASLRGuard are not ideal for these resource-
limited devices.
Cryptographic CFI (CCFI) [33] encrypts code pointers.
Speciﬁcally, CCFI uses the AES instructions of recent x86
processors to protect pointers and uses the storage location as
a nonce during encryption to reduce the ability of the adversary
to reuse encrypted pointers in replay attacks. However, CCFI is
yet another defense tied to x86 hardware and has a much higher
overhead than LR2 (45% vs 6.6%) on the SPEC CPU2006
benchmarks.
XOR encryption has also been used to prevent non-control
data attacks [5, 9]. These protections are orthogonal to ours.
c) Mobile-Oriented Defenses: The literature contains
several other mobile-oriented code-reuse defenses. Bojinov
et al. [8] describe the initial implementation of ASLR for
Android devices. Recent releases of the Android platform
adds support for high-entropy ASLR but remains vulnerable
to information disclosure. XIFER [17] is a load-time software
diversiﬁer for Android and Linux that randomizes the code
right before it starts executing. While effective against tradi-
tional ROP attacks, XIFER is not leakage resilient. Lee et al.
[30] identiﬁed weaknesses with the Zygote process creation
model in Android that weakens the effectiveness of ASLR and
evaluated improvements.
MoCFI [18] and CFR [41] are mobile-oriented CFI so-
lutions based on binary rewriting and compilation of iOS
apps respectively. Both implementations use static analysis
augmented by either heuristics (for MoCFI) or programmer
intervention (for CFR) to generate a control-ﬂow graph (CFG)
used to restrict program control ﬂow. This adds a high degree
of uncertainty to the CFG’s accuracy. A CFG that is too coarse-
grained, i.e., places too few restrictions on the control ﬂow, is
easily exploitable by attackers, so the security of these defenses
depends on the quality (granularity) of the generated CFGs.
Figure 7: Relationship between the in-memory program repre-
sentation and techniques that defend against memory leakage.
the extended page tables in modern x86 processors that allows
read/write/execute permissions to be controlled independently.
Readactor also seeks to prevent indirect memory disclosure
attacks though code-pointer hiding, an indirection mechanism
known as call and jump trampolines. A recent extension
(Readactor++ [15]) adds resilience against whole-function