21
Listing 2: An example of hard-to-trigger bugs. State-of-the-art
fuzzers have difficulty triggering the bugs even if they execute
the buggy code blocks. Table 3 shows our experiment results.
}
count = width * height ;
size = count * 8;
data = ( unsigned char *) malloc ( size );
// read data from standard input
for ( int i =0; i  0), multibyte constraints (e.g., x
== 0x0f365c01), and even narrow range arithmetic constraints
(e.g., x > 0 ∧ x 0xffffffff. For instance, for
input values width=0x5557 and height=0x5fff, size multiplied
in line 15 is 0x100025548, which satisfies the overflow condition,
2Note that these bugs were considered in the earlier work of smart fuzzing [23, 31]
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom517Table 3: Results of fuzzing Listing 2 by simulating that the code was
exercised by each fuzzer (seed size: 12 bytes). We measured time and
number of executions, until triggering the bug for 30 times.
Time until trigger
Median (s)
Mean (s)
Executions until trigger
Median
Mean
27
10,211k
fail
fail
Fuzzer
Runs
Intriguer
AFL
VUzzer
Qsym
30
30
30
30
2
1,412
fail
fail (>24h)
fail (>24h)
2
2,187
fail
27
6,612k
fail
fail
going beyond the boundary of int and resulting in an integer over-
flow. The malloc function (line 16) allocates memory for data of
that size, leading to a buffer overflow in line 19.
Table 3 shows the results of four fuzzers assumed to have ex-
plored the code path. We repeated the experiments for 30 runs per
fuzzer, with a 24h time budget for unlimited executions per run.
Intriguer took only 27 executions in 2s to trigger the bug in each of
30 runs; however, AFL took much more, and unfortunately Qsym
and VUzzer failed in every run. Both height and width must be
in 0x5557∼0x5fff for bug-triggering; however, it is unlikely to
coincidentally catch such values in a fuzzing loop. The probability
p for the coincident case occurring is: p = ((0x5fff-0x5557+0x1) /
0xffffffff)2 = (6.35 ∗ 10−7)2. The above example demonstrates
that even if the buggy code is executed, an actual bug can be missed
if the exact values that trigger it are unknown.
Our approach. Treat the arithmetic boundary conditions like
the branch constraints (§3.4).
3 DESIGN
3.1 Overview
Figure 4 illustrates an overview of Intriguer’s system architecture
as a hybrid fuzzer. The key idea of Intriguer is a field-level con-
straint solving, which optimizes symbolic execution with field level
information. Intriguer takes a target binary program and a test
case as input and aims to discover interesting offsets and values to
generate new test cases that explore new paths for fuzzing.
To do this, Intriguer performs an instruction-level taint tracking
on a target program execution with an input test case provided by
a coverage-based fuzzer. Unlike existing approaches, in advance
to constraint solving, Intriguer significantly reduces the execution
traces: it records the execution traces except for data transfer in-
structions like mov, and removes tainted instructions that accessed
a wide range of input bytes (§3.2). Furthermore, Intriguer infers
an input field as a chunk of byte offsets, discarding no-field in-
ferred instructions (§3.3.1), and constructs the field transition trees
for each inferred field to lighten symbolic emulation and compose
minimized constraints (§3.3.3) (§3.4). Thanks to the inferred fields
and the trees, Intriguer can invoke an SMT solver for truly compli-
cated constraints only, and directly solve uncomplicated constraints,
including tight multi-byte comparisons, for both branch and arith-
metic conditions. By doing these, Intriguer can remarkably reduce
unnecessary works incurred by symbolic emulation (i.e., to be more
relevant to bug-finding) (§3.4.1) and constraint solving (§3.4.2). The
rest of this section explains more details about our approaches.
Figure 4: Overview of Intriguer – system architecture.
Table 4: Structure of trace record in CFG format. - means untainted.
::=
::=
::=
::=
 “.”  “.” 
“{”  “}{”  “}” |
“{”“}{”  “}.” 
“-” | “-,”  |  |  “,” 
 |  “,” 
Figure 5: An example that shows the trace reduction. The left-hand
code is a portion of bfd_hash_hash() used for hashing in binutils.
The right-hand trace records (cf. Table 4) show a wide range of input
offsets (00∼FF) due to while loop. Intriguer removes the records ex-
cept the first eight records (colored in green). We omit 0x for space.
3.2 Execution Trace Reduction
Intriguer performs an instruction-level taint tracking for data flow
analysis that enables fine-grained trace reduction and field-level
constraint solving. Our basic insight is that existing concolic execu-
tion engines waste a great deal of time in symbolic emulation for
instructions that are unlikely to be relevant to bug-finding (§5.4). In-
triguer reduces the size of the execution trace by removing tainted
instructions that are irrelevant, before constraint solving stages.
3.2.1 Execution Trace. The DTA engine of Intriguer (named Ex-
ecution Monitor) produces an execution trace list (briefly called
TL) with the record format specified in Table 4 by tracing a target
program execution with an input test case provided by a coverage-
based fuzzer. The Execution Monitor records the traces of instruc-
tions except for mov-like instructions. Note that even if there is
no trace of mov, it is possible to track where data moves through
the traces of the instructions that precede and succeed mov, as we
mentioned in §2.1. We describe how it works in §3.4.1.
The record of the TL, for each tainted instruction, consists of
the instruction’s address and opcode, and the operand’s input byte
offsets and concrete values. An example in Figure 5 shows how the
trace record is configured: the cmp instruction at memory address
0x80c3a07 repeatedly used two operands, one of which the first byte
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom518Table 5: An Example that shows field inference. Consecutive off-
sets are inferred as a single field. F(i, j) indexing a starting offset i
with size j indicates the consecutive offsets as underlined.
# Offset
{-,-}
1
{-,-,-,-}
2
{0x00,-,-,-}
3
{0x00,-,0x01,-}
4
{0x00,0x01}
5
{0x00,0x01,-,-}
6
F(i, j)
-
-
-
-
F(0,2)
F(0,2)
#
7
8
9
10
11
12
Offset
{-,0x00,0x01,-}
{0x00,0x01,0x02,-}
{0x00,0x01,0x02,0x03}
{0x03,0x02,0x01,0x00}
{0x00,0x01,10,-}
{0x00,0x01,0x10,0x11}
F(i, j)
F(0,2)
F(0,3)
F(0,4)
F(0,4)
F(0,2)
F(0,2), F(16,2)
is tainted by consecutive values of ‘a’ and the other untainted with
values 0x00. Intriguer does not distinguish the operand’s type (e.g.,
register, memory, or immediate), but only considers taint states;
and if tainted, the exact input byte offsets, e.g., 0x00∼0xFF, are set
in the records.
Instruction-level Granularity. Intriguer performs an instruction-
3.2.2
level taint tracking, similar to Qsym, but we are more intrigued
in instruction-level trace reduction (rather than basic block-level;
dissimilar to Qsym) to suppress unnecessary symbolic emulation
(Figure 2) and constraint generation caused by redundant instruc-
tions (Listing 1) before symbolic execution (§ 5.4).
Figure 5 shows an example in which many instructions (e.g.,
addition, shift, exclusive or, comparison, and assignment) are re-
peatedly executed with accessing a wide range of input bytes (e.g.,
0x0 ∼ 0x1000 in byte offsets) in the while loop. In general, however,
the location where we expect to find bugs is the part that checks
the size of data for hashing, or the part that executes after a hash
check, rather than computing hash values. Therefore, we reduce
the tainted instructions that accessed a wide range of input bytes
among the repetitive instructions. This feature also occurs when
performing frequent operations including encryption, decryption,
encoding, decoding, compression, and decompression. The trace
reduction algorithm is simple and straightforward as described in
the next subsection.
3.2.3 Trace Reduction. Intriguer runs the following procedure to
produce the reduced trace list (briefly called RL) from the TL.
(1) Group the TL’s trace records by “instruction address” and gen-
erate a sublist named RLaddr for each group.
(2) In each RLaddr , count the number of unique offsets, and go
to the reduction step if the offset count exceeds a predefined
threshold (§5.4).
(3) In the reduction step, leave the first eight trace records only
and remove the remaining records in the over-counted RLaddr .
An example in Figure 5 shows how this trace reduction proce-
dure simply works. Note that RL is the union of all final RLaddr ’s
where each RLaddr is a group of (reduced) records for each tainted
instruction. Thanks to grouping in advance, Intriguer can count
the number of offsets more efficiently.3 In the above procedure, In-
triguer counts the first offset for each operand and the same offsets
only once for each RLaddr . The condition of the offset count ex-
ceeding the threshold indicates that the corresponding instruction
3O(ni ) → O(2n) where n and i are the number of trace records and the number of
instructions, respectively, in TL.
1
2
3
4
5
6
7
8
9
static void
coff_swap_filehdr_in ( bfd * abfd , void * src , void *
dst )
...
/* MS handles overflow of line numbers by carrying
Since it 's
into the reloc field ( it appears ).
supposed to be zero for PE * IMAGE * format , that 's
safe .
This is still a bit iffy .
*/
# ifdef COFF_IMAGE_WITH_PE
scnhdr_int -> s_nlnno = ( H_GET_16 ( abfd , scnhdr_ext ->
s_nlnno )
+ ( H_GET_16 ( abfd , scnhdr_ext -> s_nreloc )  s_nreloc = 0;
...
Listing 3: An example of multi-field operand in objdump.
has accessed a wide range of input bytes (with a number of different
offsets beyond the threshold). Note that Intriguer basically uses the
threshold value as 16 (§3.2).
One might be concerned that this procedure might remove in-
teresting records. First of all, Intriguer does not remove all traces
for the tainted instructions that accessed a wide range of input,
but instead it reduces them. Thus, as evaluated in our experiments
(§5.4), Intriguer can discover more new test cases and bugs within
the same amount of time. Furthermore, Intriguer prioritizes RL but
later on it can go back to TL if there is no more new test cases
generated. In the fuzzing loop, Intriguer can also gradually increase
the threshold when no more new test cases are generated.
3.3 Field Inference and Field Transition Tree
Aiming to discover interesting offsets and values quickly for new
test cases, Intriguer infers a field from unknown input formats to
directly decide where to mutate in an input test case (§3.3.1), and
also to discard no-field inferred instructions. Subsequently, Intriguer
constructs a field transition tree to optimize symbolic emulation
without needing memory address and register information, and
also constraint solving by composing minimized (and relevant)
constraints (§3.3.3). These are the essential steps to proceed with a
field-level constraint solving to decide what value to mutate (§3.4).
Field Inference. We define a field as consecutive input bytes
3.3.1
directly used by an instruction. Intriguer infers such a field from
unknown input formats4 by leveraging offset information recorded
in the execution trace, e.g., RL. If an operand is tainted by consec-
utive offsets of the input data in RL, these consecutive offsets can
be grouped together and inferred as a single field. For an inferred
field, which starts at offset i and has a chunk size j, we denote the
inferred field information as F(i, j) and assigns a list of instructions
used. Table 5 shows an example of field inference done by Intriguer.
Note that by definition, Intriguer ignores a single byte field for
inference. In hybrid fuzzing, the role of a concolic execution engine
is to deal with complex constraints; and so Intriguer decides to infer
a field for multi-byte offsets only and discard the trace records for
a single byte offset. This inference decision makes it possible to
conduct further reduction for the execution trace and the following
constraint generation; and the fuzzer will happily handle such a
single byte constraint. In Table 5, #3 is a single byte offset and #4 is
4Similar techniques are popularly used for protocol/file format reverse engineering [5,
9, 10, 32]. Particularly, our method is close to that of Tupni [10], but Intriguer uniquely
infers a field for both single and multi-field operands. (cf. #12 in Table 5)
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom519Figure 6: An example of field-level constraint solving. (a) RL is reduced from TL. (b) FL is derived from RL for inferred fields, F(0,2) and F(2,2).
(c) A field transition tree is constructed from FL for F(0,2). If depth = 1, uncomplicated constraints are generated. If depth > 1, complicated
constraints are generated. (d) On a node with a comparison instruction, a constraint is generated to explore a new branch (green); and on a
node with an arithmetic instruction, a constraint that takes a value beyond an integer boundary (red) is generated (e.g., >INT_MAX).
non-consecutive; and they are ignored. #11 shows an example that
consecutive two-byte offsets are inferred but a single byte offset is
ignored.
In real-world programs, multiple fields are occasionally com-
bined together as an operand (e.g., {0x00,0x01} and {0x10,0x11} as
{0x00,0x01,0x10,0x11} in #12, Table 5), which we call a multi-field
operand. In this case, the field is unlikely inferred by the existing
techniques because the trace with a multi-field operand indicates
that such offsets are seemingly not consecutive. If such a field is
associated with a bug, a false negative could occur; and so the
trace of an multi-field operand should be inferred. In this context,
Intriguer extends the field inference technique to be able to in-
fer a combination of multiple consecutive offsets, e.g., F(0,2) and
F(16,2), from a multi-field operand. Listing 3 shows a real-world
example of the multi-field operand, which uses two fields combined
into one operand when processing PE files in objdump. In line 6,
scnhdr_ext→s_nlnno and scnhdr_ext→s_nreloc, which were
read from a file, are assigned to the lower two bytes and upper two
bytes of scnhdr_int→s_lnno, respectively. As a result, two fields
are assigned to scnhdr_ext→s_nlnno.
Field-level Trace List. Recall that the execution trace TL was
3.3.2
significantly reduced to RL, and the RL was used for field inference.
Now Intriguer further groups the trace records of RL according to
the inferred fields, and discards all irrelevant (i.e., no-field-inferred)
trace records. We call the reconfigured list of such groups a field-