# 概述：
前面的几篇文章对进程注入的几种基本操作进行了学习，接下来会分享的是有关API钩取技术的学习。
钩取，也就是常说的Hooking，是一种截取信息，更改程序执行流向，添加新功能的技术。那么API钩取顾名思义就是一种针对API函数进行的钩取操作。我们知道，在Windows环境下开发的各种引用都大量的使用了Windows系统提供的API（应用程序编程接口），而如果我们可以通过钩取技术截取某些重要API的执行流程，并将其进行修改，就可以完成许多操作。
与以前的[那篇文章](https://xz.aliyun.com/t/11863)中提到的消息钩子有所不同，API钩取是在程序的执行流上进行操作，下面简单介绍一下API钩取中的几种常用技术。
API钩取的技术大致分为两类：
  * 调试：通过对目标进程进行调试来钩取API，这里所说的调试并不等同于我们使用OD，x64等调试软件对程序进行调试，而是运行我们自己写的调试程序来进行相应操作
  * 注入：注入法可以细分为两种：DLL注入与代码注入（注入是API钩取的最常用的方法，会在以后的文章中进行学习），这两种方法的具体原理可以参考我的前两篇文章。
# 调试器：
本篇文章学习的是使用调试方法进行API钩取，但是这里的调试器与之前所说的调试软件是两种不同的概念。我们使用的OD，x64等调试软件是由别人编写后封装的，可以直接使用的软件，而当我们要使用调试法进行API钩取时，使用的调试器其实是自己编写的程序，在这个程序中，我们会将程序以调试权限附加到目标进程上；由于调试者拥有被调试者所有的权限，包括内存读写甚至是相应寄存器读写等权限。
所以，进行调试的程序可以通过修改内存和寄存器等方式修改被调试程序调用API时使用的参数或者直接截取程序的执行流以完成API钩取的操作。
## 调试器的工作原理
在开始对源码进行分析之前，先简单了解一下调试器的工作原理：
调试进程经过注册后，每当被挑事者发生调试事件（Debug Event）时，OS
就会暂停其运行，并向调试器报告相应事件。调试器对相应事件做适当处理后，时被调试者继续运行。
  * 一般的异常（Exception）也属于调试事件。
  * 若相应进程处于非调试，调试事件会在其自身的异常处理或 OS 的异常处理机制中被处理掉。
  * 调试器无法处理或不关心的调试事件最终由 OS 处理
在各种异常事件中，断点异常ECXEPTION_BREAKPOINT异常是调试器必须要处理的。那么，如果我们将目标API函数的起始地址更改为断点指令：INT3（对应机器码为0xCC），那么我们就可以将程序的执行流在此处中断，而此时，栈中正好保存了这个API函数所需要的参数等，那么我们结合线程中的上下文结构（context）就可以完成修改API中相应的参数等操作
# dbgHook.cpp：
本次练习操作的对象是钩取notepad中调用的WriteFile函数，然后将notepad保存文件内容中所有的小写字母更改为大写字母，不是一个很复杂的操作，但是可以比较清楚的了解调试钩取的主要流程。
下面先给出总的源代码：
    #include "windows.h"
    #include "stdio.h"
    LPVOID g_pWriteFile = NULL;
    CREATE_PROCESS_DEBUG_INFO g_cpdi;
    BYTE g_chINT3 = 0xCC;
    BYTE g_orgByte = 0;
    BOOL CreateProcessDebugEvent(LPDEBUG_EVENT pde)
    {
        g_pWriteFile = GetProcAddress(GetModuleHandleA("kernel32.dll"), "WriteFile");
        memcpy(&g_cpdi, &pde->u.CreateProcessInfo, sizeof(CREATE_PROCESS_DEBUG_INFO)); 
        ReadProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_orgByte, sizeof(BYTE), NULL);
        WriteProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_chINT3, sizeof(BYTE), NULL); 
        return TRUE;
    }
    BOOL ExceprtionDebugEvent(LPDEBUG_EVENT pde) 
    {
        CONTEXT ctx;
        PBYTE lpBuffer = NULL; 
        DWORD dwNumofBytestTowrite = 0; 
        DWORD dwAddrOfBuffer = 0;
        DWORD i = 0;
        PEXCEPTION_RECORD per = &pde->u.Exception.ExceptionRecord;
        if (per->ExceptionCode == EXCEPTION_BREAKPOINT)
        {
            if (g_pWriteFile == per->ExceptionAddress) 
            {
                WriteProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_orgByte, sizeof(BYTE), NULL); 
                ctx.ContextFlags = CONTEXT_CONTROL;
                GetThreadContext(g_cpdi.hThread, &ctx); 
                ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + 0x8), &dwAddrOfBuffer, sizeof(DWORD), NULL); 
                ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + 0xC), &dwNumofBytestTowrite, sizeof(DWORD), NULL);
                lpBuffer = (PBYTE)malloc(dwNumofBytestTowrite + 1);
                memset(lpBuffer, 0, dwNumofBytestTowrite + 1); 
                ReadProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer, lpBuffer, dwNumofBytestTowrite, NULL);
                printf("orignal string: %s\n", lpBuffer);
                for (i = 0; i = 0x61 && lpBuffer[i] dwProcessId, pde->dwThreadId, DBG_CONTINUE);
                Sleep(0); 
                WriteProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_chINT3, sizeof(BYTE), NULL);
                return TRUE;
            }
            return FALSE;
        }
    }
    void DebugLoop()
    {
        DEBUG_EVENT de;
        DWORD dwContinueStatus;
        while (WaitForDebugEvent(&de, INFINITE))
        {
            dwContinueStatus = DBG_CONTINUE;
            if (de.dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT)
            {
                CreateProcessDebugEvent(&de);
            }
            else if (de.dwDebugEventCode == EXCEPTION_DEBUG_EVENT)
            {
                if (ExceprtionDebugEvent(&de))
                    continue;
            }
            else if (de.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT)
            {
                break;
            }
            ContinueDebugEvent(de.dwProcessId, de.dwThreadId, dwContinueStatus);
        }
    }
    int main(int argc, char* argv[])
    {
        DWORD dwPID = 0;
        dwPID = atoi(argv[1]);
        if (!DebugActiveProcess(dwPID))
        {
            printf("DebugActiveProcess(%d) failed!!!\n""Error Code = %d\n", dwPID, GetLastError());
            return -1;
        }
        DebugLoop();
        return 0;
    }
程序的流程大概如下：
  1. 将调试器附加至目标进程并赋予其调试的权限（DebugActiveProcess(dwPID)）
  2. 等待程序运行至发生相关的调试事件（DebugLoop()）
  3. 当程序对应的进程创建时进行相应的操作（CreateProcessDebugEvent）
  4. 当程序对应的进程发生中断事件时进行相应的操作（ExceprtionDebugEvent）
下面将具体分析比较重要的几个步骤的对应函数
## main：
主函数的流程和数据结构都比较简单，这里不在过多赘述，直接看一下代码即可：
    #include "windows.h"
    #include "stdio.h"
    LPVOID g_pWriteFile = NULL; //记录WriteFile起始地址的指针
    CREATE_PROCESS_DEBUG_INFO g_cpdi; //有关进程创建信息数据结构的全局变量
    BYTE g_chINT3 = 0xCC; //INT3指令对应的机器码即为0xCC
    BYTE g_orgByte = 0;
    int main(int argc, char* argv[])
    {
        DWORD dwPID = 0;
        dwPID = atoi(argv[1]); //将命令行参数转化为整型
        if (!DebugActiveProcess(dwPID))
        {
            printf("DebugActiveProcess(%d) failed!!!\n""Error Code = %d\n", dwPID, GetLastError());
            return -1;
        }
        DebugLoop();
        return 0;
    }
## CreateProcessDebugEvent:
这个函数完成的操作是当程序进程发生进程创建异常时，将目标API函数的起始地址中的内存数据更改为INT3指令对应的机器码（0xCC），使程序能够在目标API处中断下来。
程序的流程比较简单：
  1. 获取WriteFile在进程中的地址
  2. 将此时程序对应的进程创建信息结构体赋给全局变量g_cpdi
  3. 保存WriteFile函数起始地址的第一个原始字节，并将其修改为INT3指令的机器码0xCC
这里提一下CREATE_PROCESS_DEBUG_INFO这个数据结构：
它是可由调试器使用的进程创建信息，它可以在MSDN上查到如下：
    typedef struct _CREATE_PROCESS_DEBUG_INFO {
      HANDLE                 hFile;
      HANDLE                 hProcess;
      HANDLE                 hThread;
      LPVOID                 lpBaseOfImage;
      DWORD                  dwDebugInfoFileOffset;
      DWORD                  nDebugInfoSize;
      LPVOID                 lpThreadLocalBase;
      LPTHREAD_START_ROUTINE lpStartAddress;
      LPVOID                 lpImageName;
      WORD                   fUnicode;
    } CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;
其中比较重要的成员就是hProcess（进程句柄），hThread（线程句柄）。在后面的代码中会多次用到这个结构中的成员。
这个部分对应的代码和注释如下：
    BOOL CreateProcessDebugEvent(LPDEBUG_EVENT pde) //创建进程的调试事件
    {
        g_pWriteFile = GetProcAddress(GetModuleHandleA("kernel32.dll"), "WriteFile"); //获取WriteFile的真实函数地址
        memcpy(&g_cpdi, &pde->u.CreateProcessInfo, sizeof(CREATE_PROCESS_DEBUG_INFO)); //将进程创建的相关信息拷贝全局变量g_cpdi中
        ReadProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_orgByte, sizeof(BYTE), NULL); //将原始的WriteFile函数开始的一个字节记录存储下来，后面复原函数时会用到
        WriteProcessMemory(g_cpdi.hProcess, g_pWriteFile, &g_chINT3, sizeof(BYTE), NULL); //将WriteFile函数的最开始一个字节改变为中断指令：INT3
        return TRUE;
    }
## ExceprtionDebugEvent：
这个函数是当程序遇到断点异常（也就是遇到INT3指令）时被中断后进行的操作。
它的主要流程如下：