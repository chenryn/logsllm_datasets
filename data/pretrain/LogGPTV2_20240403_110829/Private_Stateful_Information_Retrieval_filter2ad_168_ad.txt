(cid:19)m ≥
(cid:18)
· . . . ·
u − 2
1 − k − (cid:96)
m(k − (cid:96))
1 −
(cid:19)m ≈ 1
.
e
(cid:19)
k − (cid:96)
u − (m − 1)
Theorem 9. OCP.GenerateSeed requires O(n) PRF evaluations except with negligible probability in n when
m, k = ω(log n) as well as storage of O(m + k) integers.
Proof. OCP.GenerateSeed requires storage of the ranks of the k elements of the constraint subset as well as
the m elements of T(cid:96) at each loop iteration.
By Lemma 8, a subset output by ExtractCondSubset has probability 1/e of passing the test of the loop
starting at Step 4.c. We consider p := e(1 + 3) · k independent invocations of ExtractCondSubset we would
expect µ = (1 + 3)k invocations to be successful. Therefore, by Chernoﬀ bounds, the probability that
OCP.GenerateSeed performs more than (1 − )µ ≥ (1 + )k invocations is negligible, provided that  is small
enough so that (1 + 3)(1 − ) ≥ (1 + ). The Theorem follows since, by Lemma 7, each invocation of
ExtractCondSubset requires O(m) PRF evaluations except with negligible probability,
Theorem 10. Construction 6 is an oblivious constrained partition according to Deﬁnition 4 when function
F is modeled as a random oracle.
Proof. The theorem follows from the fact that the constraint set, as all the other subsets of the partition, is
randomly selected and thus cannot be distinguished from the others.
In Appendix D, a more complex OCP scheme requiring O(k) client storage for OCP.GenerateSeed is
presented.
5 Private Batched Sum Retrieval
In this section, we present StreamPBSR, a simple batch sum retrieval scheme that downloads all the ﬁeld
elements. While requiring O(n) bandwidth and computation, StreamPBSR can be used to construct a single-
server multiple user PIR with sublinear encrypted operations later. The idea is very simple: each record is
downloaded and added to the appropriate partial sums. Before streaming, the server could compress the
database to reduce network costs.
15
Construction 11. (O1, . . . , Oc) ← StreamPBSR(S1, . . . , Sc)
1. Initialize O1 ← 0, . . . , Oc ← 0.
2. For i = 1, . . . , n:
(a) For all j ∈ [c] such that i ∈ Sj:
i. Oj ← Oj + Bi
3. Output (O1, . . . , Oc).
the algorithm uses O(n) bandwidth, O((cid:80)
Theorem 12. StreamPBSR is a private batched sum retrieval scheme according to Deﬁnition 5. In addition,
i |Si|) additions, and O(c) memory.
Proof. The algorithm accesses all the ﬁeld elements in order independent of the input subsets.
In Appendix D, we present several more communication eﬃcient algorithms of more theoretical interest.
6 Private Stateful Information Retrieval
In this section, we present our construction of PSIR that uses as subprotocols an oblivious constrained
partition scheme OCP, a private batched sum scheme PBSR, and a single-server PIR PIR. Our construction is
parametrized by two integers (c, k). For a choice (c, k) of the parameters, PSIR has the following performance
in terms of client memory required and bandwidth:
• Client memory: the client memory must be large enough to contain c records;
• Bandwidth per query amortized over c queries: k integers in the range [n], k seeds of λ bits, and
n/c + PIR(n/k) blocks, where PIR(N ) is the bandwidth of the underlying single-server PIR PIR for a
database of N records.
Except for the PIR operations, the server and client only need to perform plaintext operations or pseudo-
random function evaluations.
A client initializes their state by executing PBSR to download c sums where each sum is over a random
subset of k − 1 records, which will be the client’s side information. To retrieve a record, the client iterates
through its stored record sums or side information until ﬁnding a sum that does not include the desired
query record as an addend. If all unused side information contains the desired query record, then our PSIR
scheme will fail. However, we show that at least (1 − )c queries will succeed for all constant 0  0,
Pr[X ≥ (1 + )µ] ≤ e−p(cid:63) µ(−ln(1+)),
PSIR.UpdateState This protocol is executed by the client, possibly interacting with the server, to update
the client’s state. This can be executed oﬄine by the client by itself unless it requires the server’s help to
re-instate an initial state.
(st,⊥) ← PSIR.UpdateState((st), (D))
1. Parse st as
(count, next, O1, . . . , Oc,K1, . . . ,Kc, ((K, r), PIRKey)).
2. Set st as st = (count, next, O1, . . . , Oc,K1, . . . ,Kc).
3. If count > (1 − )c/2 then
Execute protocol (st,⊥) ← PSIR.Init((1λ, 1c), (1λ, D)).
4. Output st.
We next prove that if a client has local storage large enough to hold c blocks then, except with negligible
probability, the initial state can be used for Ω(c) queries. We use the following lemma on the tail of the sum
of geometric distributions (for a proof, see Theorem 2.1 of [32]).
Lemma 14. Let X1, . . . , Xn be n geometrically distributed random variables with success probability
Lemma 15. Algorithm PSIR.Query fails with probability negligible in n whenever c = ω(log n) and k ≤ n/2.
Proof. PSIR.Query fails only if all c subsets are consumed by fewer than (1− )c/2 queries. By PSIR.Init, each
Sp is a randomly chosen subset of [n] of cardinality k − 1 and thus, for any ﬁxed q ∈ [n], the probability that
q (cid:54)∈ Sp is (n − (k − 1))/n, which is at least 1/2 since k ≤ n/2. Therefore the number of subsets consumed
by each invocation of PSIR.Query is geometrically distributed with probability of success at least 1/2. The
lemma follows by applying the bound given by Lemma 14.
Theorem 16. Construction 13 reduces private record retrieval to a single PIR execution on a database of
n/k records while all other operations are strictly plaintext or cryptographic hashes as well as communicating
k seeds and k integers. In addition, the client must download (oﬄine) O(n/c) records amortized over Ω(c)
queries.
Proof. The cost of communicating k seeds and k integers derive from the seeds derived from OCP.GenerateSeed.
Besides the operations of PIR, all other client or server operations are cryptographic hash evaluations and
adding or moving blocks around (plaintext). For amortized communication costs, the client streams n records
to construct side information which is used over O(c) queries. Therefore, a total of O(n/c) amortized oﬄine
communication is required.
Theorem 17. Construction 13 is a private stateful information retrieval scheme according to Deﬁnition 1.
Proof. We note that PSIR.Init and PSIR.UpdateState are independent of the input subsets by the security
of the underlying PBSR scheme. As a result, the adversary’s view is independent of each honest client’s
state. PSIR.Query outputs Query which is viewed by the adversary. PSIR.Query uses only the input q and the
client’s state. Query consists of PIRQuery and the seed generated by OCP. By the security of the underlying
PIR, PIRQuery is generated independently from the input q. Similarly, K generated by OCP.GenerateSeed
is independent from the input q. As a result, Query is independent from q. As a result, the execution of
PSIR.Reply as well its transcript is independent from q as it only takes Query and the database as input.
Therefore, the adversary’s view is independent of the query sequence for all honest clients.
In Appendix C, we present several techniques to amortize the costs of PSIR.UpdateState.
18
6.1 Discussion
In this section, we will discuss various parts of our PSIR construction.
Online to Oﬄine. A major contribution of our PSIR scheme is moving online costs to an oﬄine phase. Not
all computation and network costs are identical. A charging phone downloading at night connected to WiFi
is almost free in comparison to a phone downloading during the day over cellular networks. PIR expenses
all bandwidth at query time whereas our PSIR scheme moves costs to cheaper oﬄine costs overcoming a
signiﬁcant practical obstacle.
Use of StreamPBSR. At ﬁrst look, StreamPBSR might seem really ineﬃcient to download the entire
database to construct the client’s state. However, it turns out that StreamPBSR is very eﬃcient in terms of
private retrieval storage schemes that must handle many queries. For existing single-server PIR constructions,
a couple hundreds of PIR queries requires communication more than streaming an entire database.
In practice, StreamPBSR is competitive when compared to asymptotically more eﬃcient methods that use
homomorphic encryption and batch codes in an attempt to decrease communication costs (see Appendix D).
These techniques require signiﬁcant computation so that the amortized computations costs become similar
or worse than existing single-server PIR constructions even though they have better asymptotic performance.
On the other hand, StreamPBSR uses linear communication costs with very smaller hidden constants giving
much better practical eﬃciency.
Initializing State. Another issue that arises is that initializing a client’s state before performing query
requires streaming the entire database. Many clients may wish to perform queries immediately after joining
the protocol. In this case, there are several options that the client may use. First, the client may just perform
standard PIR queries while waiting for client state to ﬁnish initializing. On the other hand, the client may
use another private batched sum retrieval schemes described in Appendix E.1 to initialize state for a small
number of queries. The client may use this smaller state for immediate queries while waiting for the large
client state to be initialized. The ﬁrst small number of queries for each client will be slow as the client waits
for its state initialization to complete (analogous to a cache warming up).
7 Experimental Evaluation
In this section we report on the experimental evaluation of PSIR that we have conducted. We start by
describing our experimental setup and our choice of parameters for the experiments. We then consider
two types of implementations of PSIR: the ﬁrst is on top of the C++ APIs provided by the open sourced
XPIR [2] implementation and relies on Ring-LWE and the second considers PIR based on Paillier’s encryption
scheme [42].
Using the experiments, we attempt to answer three important questions. First, can we construct an PSIR
scheme with less concrete costs than the current best PIR construction, SealPIR [7]? Second, what are the
beneﬁts of an PSIR with XPIR and SealPIR compared to generic XPIR and SealPIR? Finally, what is the
latency of our PSIR schemes in several diﬀerent settings?
7.1 The Experimental Setup
Our experiments are conducted using two identical machines, one for the client and one for the server. The
machines are Ubuntu PCs with 12 cores, 3.5 GHz Intel Xeon E5-1650 and 32 GB of RAM. All reported
results (except the estimate costs for SealPIR) have standard deviations less than 10% of the means. The
cost of network resources are determined at the application layer. The client and server implementations of
PSIR are built using the gRPC [4] library.
19
SealPIR
218
N/A
220
N/A
216
129
SealPSIR
218
258
220
524
PaillierPSIR
216
129
218
258
220
524
< 0.01 < 0.01 < 0.01
< 0.01 < 0.01 < 0.01
N/A
< 0.01 < 0.01 < 0.01
N/A
N/A
216
Database Size (n)
Client State (KB) N/A
Client CPU (sec)
Query
Extract
OCP.GenerateSeed
total
Server CPU (sec)
Reply
0.41
OCP.ExtractPartition N/A
total
0.41
Network (KB)
Query
Answer
OCP seed
online total
StreamPBSR
amortized total