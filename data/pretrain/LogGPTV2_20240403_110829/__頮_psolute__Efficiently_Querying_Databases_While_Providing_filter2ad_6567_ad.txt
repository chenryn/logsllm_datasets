The number of nodes in the tree is positive with a high probability of \(1 - \beta\), where \(\beta\) is negligible. To ensure that positive values are drawn with high probability, we can compute the exact minimum required value of \(\alpha_h\) using the cumulative distribution function (CDF) of the Laplace distribution. Specifically, \(\alpha_h\) should be the minimum value satisfying the following inequality:

\[
\left( \frac{\log_k N}{\epsilon} \right)^{\text{nodes}} \leq 1 - \beta
\]

This is equivalent to:

\[
\alpha_h = \frac{\epsilon}{\log_k N} + \frac{N}{k-1}
\]

where \(N\) is the total number of tree nodes, and \(\text{nodes} = k^{\lceil \log_k (k-1) + \log_k N - 1 \rceil} - 1\).

### 5. An Efficient Parallel Epsolute

While the previously described scheme is secure and correct as a CDP-ODB, a single-threaded implementation may be prohibitively slow in practice. To meet real-world performance requirements, we need to scale the algorithm horizontally. In this section, we introduce an upgrade to Epsoluteâ€”a scalable parallel solution.

We propose two variants of the parallel Epsolute protocol. Both variants operate by managing \(m\) ORAMs and randomly assigning \(\frac{n}{m}\) database records to each ORAM. For each query, we use the index \(I\) to locate the required records from the corresponding ORAMs. Each ORAM operates independently, and there is no need for locking. The two methods differ in how they build and store the differential privacy (DP) structure \(DS\), which affects the number of ORAM requests.

#### Algorithm 2: Parallel Epsolute for \(\Pi_\gamma\)

**Setup Phase:**

1. **User U:**
   - Input: \(D\)
   - \(I \leftarrow \text{CreateIndex}(D, m)\)
   - For \(j \in \{1, \ldots, m\}\) (in parallel):
     - Server S:
       - Input: \(DS\)
       - \(k \leftarrow B(DS, q)\)
       - For \(j \in \{1, \ldots, m\}\) (in parallel):
         - \(y_{\text{true}} = (r, r_{\text{ID}})\) such that \(H(r_{\text{ID}}) = j\)
         - \(y_{\text{noise}} = (r, S \setminus T_j, \perp)^{c - |T_j|}\)
         - \(R_j \leftarrow \text{ORAM}_j(y_{\text{true}} \| y_{\text{noise}})\)
       - Output: \(I\)

2. **Server S:**
   - Input: \(\emptyset\)
   - \(c \leftarrow (1 + \gamma) \cdot \frac{q}{\epsilon}\)
   - For \(j \in \{1, \ldots, m\}\) (in parallel):
     - \(y = (w, r_{\text{ID}}, r)\)
   - Output: \(DS\)

**Query Phase:**

1. **User U:**
   - Input: \(q, I\)
   - \(T_1, \ldots, T_m \leftarrow \text{Lookup}(I, q)\)
   - For \(j \in \{1, \ldots, m\}\) (in parallel):
     - \(R_j \leftarrow \text{ORAM}_j(y_{\text{true}} \| y_{\text{noise}})\)
   - Output: \(\bigcup_{j=1}^m R_j\)

2. **Server S:**
   - Input: \(\emptyset\)
   - Output: \(\emptyset\)

### 5.1 No-\(\gamma\)-Method: DP Structure per ORAM

In \(\Pi_{\text{no-}\gamma}\), for each ORAM/subset of the dataset, we build a DP index as described in Section 4. The privacy budget \(\epsilon\) for the construction is the largest (least private) among the \(\epsilon\)'s of the DP indices for each ORAM/subset.

The communication efficiency changes because:
1. We add \(m\) record subsets to answer a query, each having at most \(\alpha\) extra random records.
2. Each ORAM holds fewer records, resulting in a tree of height \(\log_k \frac{n}{m}\).

However, we cannot assume that the records required for each query are equally distributed among the different ORAMs. Instead, we bound the worst-case scenario, which is the maximum number of records from any ORAM required to answer a query. This can be computed as follows:

Let \(X_j\) be 1 if a record for answering query \(q\) is in a specific ORAM \(j\), and 0 otherwise. Due to the random assignment of records to ORAMs, \(\Pr(X_j = 1) = \frac{1}{m}\). Assume we need \(k_0\) records to answer query \(q\). The maximum number of records from ORAM \(j\) to answer \(q\) is bounded as:

\[
\Pr\left(\sum_{i=1}^{k_0} X_i > (1 + \gamma) \frac{k_0}{m}\right) \leq \exp\left(-\frac{k_0 \gamma^2}{3m}\right)
\]

To ensure this probability is less than \(\beta\), we set \(\gamma = \sqrt{\frac{-3m \log \beta}{k_0}}\). The communication efficiency for each query type is given by the following corollary.

**Corollary 5.1:**
Let \(\Pi_{\text{no-}\gamma}\) be an outsourced database system with storage efficiency \((O(1), 0)\). Depending on the query type, \(\Pi_{\text{no-}\gamma}\) offers the following communication efficiency:

- **Range queries:**
  \[
  O\left(\frac{\log n}{m}, \frac{\epsilon m \log n}{1 + \sqrt{-3m \log \beta}}\right)
  \]
- **Point queries:**
  \[
  O\left(\frac{\log n}{m}, \frac{\epsilon m \log n}{1 + \sqrt{-3m \log \beta}}\right)
  \]

### 5.2 \(\gamma\)-Method: Shared DP Structure

In \(\Pi_\gamma\), we maintain a single shared DP structure \(DS\). When a query is issued, we ensure that the number of records retrieved from every ORAM is the same. Depending on the required noisy number of records \(\tilde{k}_0\), we retrieve at most \((1 + \gamma) \frac{\tilde{k}_0}{m}\) records from each ORAM. Setting \(\tilde{k}_0 = k_0 + \log^{1.5} N / \epsilon\) for range queries and \(\tilde{k}_0 = k_0 + \log N / \epsilon\) for point queries, the communication efficiency is as follows.

**Corollary 5.2:**
Let \(\Pi_\gamma\) be an outsourced database system with storage efficiency \((O(1), 0)\). Depending on the query type, \(\Pi_\gamma\) offers the following communication efficiency:

- **Range queries:**
  \[
  O\left(\frac{\log n}{m}, \frac{1 + \log^{1.5} N / \epsilon}{\sqrt{-3m \log \beta}}\right)
  \]
- **Point queries:**
  \[
  O\left(\frac{\log n}{m}, \frac{1 + \log N / \epsilon}{\sqrt{-3m \log \beta}}\right)
  \]

### 5.3 Practical Improvements

Here, we describe optimizations aimed at bringing the construction's performance to real-world demands.

#### 5.3.1 ORAM Request Batching

We observed that although the entire set of ORAM requests for each query is known in advance, the requests are executed sequentially. To address this inefficiency, we designed a method to combine the requests into batches, reducing the number of network requests to the bare minimum. We implemented this method over PathORAM, which we use for the \((\eta_1, \eta_2)\)-ORAM protocol, but the idea applies to most tree-based ORAMs (similar to [20]).