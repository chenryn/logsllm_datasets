return from f2() until the call to f4().
DIRA does not require any system support for program
restart. Instead, it uses inter-procedural jump functions
setjmp() and longjmp() to implement this functional-
ity.
Figure 4 shows the algorithm that DIRA uses to ﬁnd the
least common dynamic ancestor between the function that
detects an attack or a corruption of some control-sensitive
data structure, and the function that inputs the malicious
data from the memory updates log. Logically, the algo-
rithm traverses the memory updates log backwards to ﬁnd
the ﬁrst function whose function entry tag is earlier than
the function entry tag of both functions. The algorithm
includes two steps. The purpose of the ﬁrst step is to ﬁnd
out the depth of f_read with respect to the least com-
mon dynamic ancestor of f_read and f_attack. In or-
der to determine this depth the memory updates log is tra-
versed in backwards direction. The traversal starts from
the last log entry and continues until the function entry
tag of f_read is reached. Variable depth is a loop in-
variant and has the following meaning. It contains the rel-
ative depth of the function which the current log record
belongs to with respect to the greatest dynamic ancestor
function of f_attack seen so far. It is obvious that the
traversal will sooner or later go through a log entry that be-
longs to the least common dynamic ancestor of f_read
and f_attack because the control ﬂow should have re-
turned to this function at least once between the point
when f_read was called and the point when f_attack
was called. Therefore, depth will eventually contain the
relative depth of f_read with respect to the least common
dynamic ancestor. At each loop iteration, variable depth
is updated as follows. If the tag of the current log record
is a function entry tag and the depth equals 0 then the
next log record to be traversed corresponds to a dynamic
parent of the current function, and therefore it becomes
the current greatest dynamic ancestor in which case the
value of depth does not need to be changed. If, however,
the tag of the current log entry is a function exit tag then
the function which that log entry belongs to was called
from the current function. Therefore, we need to increase
depth by one. Finally, if the tag of the current log entry is
a function entry tag and the depth is greater than zero then
we need to decrement depth by one as this means that
the current function is a dynamic child of the greatest an-
cestor function. To summarize, at the end of the ﬁrst step
variable depth equals the relative depth of f_read with
respect to the least common dynamic ancestor. All we
need to do after that is to traverse the log backwards until
we reach a function whose relative depth with respect to
the least common ancestor is zero. The beginning of this
function is the beginning of the least common dynamic
ancestor of f_read and f_attack.
Finding a restart point requires augmentation of the
memory updates log with several types of tags which are
inserted to the log when the program runs normally. These
tags are function entry tag, function exit tag, jump buffer
tag, and ﬁrst local update tag. Upon entering a function
DIRA inserts a function entry tag into the memory updates
log. Similarly, when the function returns a function exit
tag is inserted. When a function call is made, DIRA in-
serts a call to setjmp(buf) where buf is the data ﬁeld
of a memory log record. The read_addr of this record is
set to the jump buffer tag. This makes the point preceding
the function call a potential restart point. At repair time,
the control can be transfered to this point by performing
longjmp(buf). Finally, the ﬁrst local update tag is in-
serted to the log when the ﬁrst update to a local variable
is encountered after a function call. These tags are used at
repair time to determine the actual restart point, which can
be either f_read if no such tags are found in f_restart
between the call to f_read and the call to f_attack, or
f_restart if at least one local update tag was found.
Once the restart point is determined, the memory state
of the program needs to be rolled back to the state corre-
sponding to the new execution point. To do so, the attack
recovery module needs to traverse the memory updates
log in the reverse direction until it reaches the restart point,
undoing each global variable update along the way. After
the undo, the recovery module performs a longjmp() us-
ing the jmp_buf corresponding to the restart point.
To restore the memory image of the program the com-
plete pre-image of each memory update should be stored
in the data ﬁeld of the corresponding log record. The
same is also true about libc functions proxied by DIRA.
For instance, strcpy(a, b) call needs to store the pre-
image of buffer a of length strlen(b) in the data ﬁeld
of memory updates log record.
In addition, several
other classes of libc functions need to be proxied. They
are: memory management functions, privilege manage-
ment functions, process management functions, and inter-
procedural jumps functions. The complete list of proxied
functions is presented in Table 2. Below we will consider
each group of functions in more detail.
Memory Management Functions. Each function in
this group is proxied for the following reason: at re-
pair time, the program needs to be able to undo not only
global memory changes, but also memory manipulation
functions it called before. The proxy_malloc() calls
malloc() ﬁrst and stores the address of the newly allo-
cated object in the memory updates log. At repair time if
this record needs to be rolled back, this memory object is
freed.
During repair time we also need to reallocate objects
that were previously deallocated.
This is achieved by
proxying free(). A straightforward way to restore the
object that was deallocated is to allocate it again with
malloc(). However, the new object may be created at
a new memory locations and all earlier references to it in
execution flow
f1()
f2()
f3()
f4()
f5()
gets(big_buf);
strcpy(small_buf, big_buf);
attack detected!
f5
f4
f1
f2
f3
f2
f1
memory
updates log
depth
-1 -> 0
-1 -> 0
1
2
1
0
-1
possible restart points
f0()
time
0
f_restart
f_attack
f_read
Figure 3. An example illustrating how to identify the least common dynamic ancestor in the
function call graph and use it as the restart point. The right-hand side shows the memory updates
log where f1–f5 are the same functions as those on the left-hand side. The ovals correspond to
function boundaries. The depth values are the values of depth variable that is deﬁned in Figure 4.
f_read — function in which malicious data was read in;
ent_beg=ﬁrst log entry of f_read (function entry tag);
depth=0;
ent=last_log_entry();
while (ent!=ent_beg)
if (ent.tag is function entry tag) then depth−−;
if (ent.tag is function exit tag) then depth++;
if (depth<0) then depth=0;
ent=get_prev_log_entry();
end;
/* second phase */
while (depth≥0)
if (ent.tag is function entry tag) then depth--;
if (ent.tag is function exit tag) then depth++;
ent=get_prev_log_entry();
end;
Figure 4. Algorithm for ﬁnding the least common dynamic ancestor in the function call graph.
Function class
Libc functions
Copying/concatenation
memcpy(), mempcpy(), memmove(), strcpy(),
strncpy(), strcat(), strncat(), bcopy()
Network I/O
readv(), recv(), recvfrom()
Inter-procedural jumps
setjmp(), longjmp()
Memory management
malloc(), calloc(), realloc(), free(), strdup()
Privilege management
seteuid(), setreuid(), setegid(), setregid()
Process creation
fork()
File I/O
read(), fread(), scanf(), vscanf(), fscanf(),
vfscanf(), gets(), fgets()
Format string
sprintf(), snprintf(), vsprintf(), vsnprintf(),
Table 2. The set of functions that DIRA needs to proxy to support attack identiﬁcation and repair.
the memory updates log will need to be remapped. In-
stead, we use a deferred free() approach. When the pro-
gram calls free(), the proxy_free() function just puts
the address of the object into the log without freeing up the
object. At repair time, we do not need to do anything to
restore the original object since it is kept in the memory.
Finally, the proxy_realloc() function saves the orig-
inal pointer in the buffer, replaces the original realloc()
call with a malloc() call and saves the pointer to the
newly allocated memory as well. Then it copies the data
to the newly allocated buffer. The length of the data being
copied is obtained from the memory buffer header that is
preceding the data itself. At repair time, the newly allo-
cated object is deallocated.
The description above suggests that during its normal
execution the program will never free up the memory it
allocates. However, since the capacity of the memory up-
dates log is limited, its records are used in a circular fash-
ion. A single record can be reused if the program runs
long enough. When a record is reused, its previous con-
tent is cleaned up and the recovery of that operation be-
comes impossible. A part of the clean up procedure for a
proxy_free() buffer entry is the free() operation that
was deferred before.
Inter-procedural
Jump
Functions.
Function
longjmp() performs an inter-procedural jump to one
of the dynamic ancestors of the current function.
To
keep the memory updates log consistent, we need to
add a proper number of function exit tags to the log.
This number equals the number of functions skipped by
longjmp(). To determine it at run time, we proxy both
setjmp(jmp_buf) and longjmp(jmp_buf, state).
The proxy_setjmp() function logs the address of the
jmp_buf variable.
The proxy_longjmp() function
searches the memory updates log for a log entry corre-
sponding to setjmp() call that ﬁlled in the jmp_buf
used in proxy_longjmp().
Once it ﬁnds the proper
log entry, it can ﬁnd out the nesting level of the current
function with respect to the target function and thus
compute the required number of function exit tags to be
added.
Privilege Management Functions.
Many programs
change their effective user ID and group ID values for se-
curity reasons. At repair time, the proper values need to be
restored to give the program same access rights as those it
had at the chosen restart point. This is achieved by proxy-
ing functions such as seteuid() and setegid(). These
functions save the original value of uid or gid in the data
ﬁeld of a memory updates log record. The read_addr
ﬁeld holds the proper proxy function tag that allows the
repair procedure to identify such log records and call ap-
propriate privilege management functions with the val-
ues stored in the data ﬁeld. A privileged process calling
setuid() can replace its effective user ID with a nonzero
effective user ID in which case the old effective user ID
can never be restored. In this case, there is no way for the
recovery process to restore the original effective user ID
without explicit system support.
Process Management Functions.
When a program
compiled by DIRA forks a new process, the two processes
can access their memory updates logs concurrently be-
cause of the copy-on-write semantics of fork() system
call. In this case, two versions of the log are created auto-
matically by the OS. However, if a buffer overﬂow attack
is detected in one of the processes then the repair proce-
dure might require the program to be rolled back to the
point before a new process was forked. The current ver-
sion of DIRA does not consider the problem of cascading
rollback. Instead, if the overﬂow was detected in the par-
ent process then all child processes that have been forked
after the new restart point are killed. However, if an at-
tack is detected in the child process and the restart point
is chosen to be before the point where it was forked, the
process is terminated without affecting the parent process
in any way. The proxy_fork() function inserts special
tags in both parent’s and child’s process logs to facilitate
this process.
3.5.
Limitations
The memory updates logging algorithm currently used
in the DIRA compiler is designed for simplicity, and thus
has much room for performance optimization. For ex-
ample, because the current DIRA compiler only tracks
data dependencies carried by simple assignment opera-
tions and proxied functions, it cannot identify dependen-
cies that involve any arithmetic expressions, e.g., B=A+C.
This means that DIRA’s recovery module may not be able
to trace a corrupted control-sensitive data structure back to
a malicious network packet if the former is derived from
the latter through any form of transformation other than
assignment operations. It is possible to generalize the cur-
rent memory updates logging algorithm by leveraging in-
formation from data ﬂow analysis techniques that allow
DIRA to identify and log those and exactly those state-
ments that may be data dependent on the network packets.
Data/control ﬂow analysis can also improve the efﬁ-
ciency of state checkpointing. Ideally, the pre-image of
each global or static variable needs to be recorded ex-
actly once for each logical checkpoint. However, because
a function may be called from different places and the cur-
rent
DIRA compiler does not perform inter-procedural
control ﬂow analysis, the pre-image of each global or
static variable used in a function is recorded at least once
per invocation of that function. Furthermore, due to alias-
ing, the pre-image of the same global or static variable
may be logged multiple times within a function invoca-
tion. Data/control ﬂow knowledge can help eliminate un-
necessary recording of pre-images, e.g., when a global
variable is repeatedly updated within a loop.
The current version of DIRA can only handle concur-
rent accesses to the memory updates log from processes
that are launched through fork() system call. However,
it does not recognize other forms of fork such as vfork().
In these cases, some form of locking mechanism is re-
quired to provide exclusive access to the memory updates
log. It is also possible that a program performs some ﬁle
or network I/O operations between the point when the at-
tack packets were read in and when the attack was de-
tected. In this case, restoring the memory image of the
program without restoring the underlying ﬁle system state
might lead to an inconsistent state of the program. Ideally,
both memory and ﬁle system repair should be performed.
The current DIRA prototype does not support ﬁle system
repair.
Signals are frequently used in network daemons as
a means of scheduling exceptional events.
Currently,
DIRA’s repair mechanism does not support undo of sig-
nals. Ideally, all signals that were set after the new restart
point need to be canceled.
4.
Implementation Issues
4.1.
Source Code Instrumentation
The current DIRA prototype is implemented as an ex-
tension to GCC 3.3.3. When compiling a program, GCC
converts the source code to a number of representations.
First, it translates the program into an Abstract Syntax
Tree (AST). Then, the AST representation is converted
into a Register Transfer Language (RTL) representation.
Finally, the RTL code is converted into the machine code
for the target platform.
DIRA instruments the source
code at two levels: AST level and machine language level.
The latter is used to generate special prologue/epilogue
code that supports return address defense as well as in-
serts function entry/exit tags. Currently, DIRA supports
only the IA-32 platform.
The code required to support memory updates log-
ging is inserted to the source code directly when
it is represented as an AST.
DIRA converts each
tree of type MODIFY_EXPR representing an assign-
ment operation X=Y into a compound tree of type
COMPOUND_EXPR that is equivalent to the following C
code: (log(X,Y,sizeof(Y)), X=Y);. Such a trans-
formation can be inserted at any place in the source code.
All unary arithmetic operations (such as ++ and --)
contained in the original expression are stripped off when
the logging call is made to avoid repeated variable modi-
ﬁcation.
To proxy necessary function calls
DIRA checks all
CALL_EXPR trees in the original program. If the func-
tion name of the function call is one of those that need