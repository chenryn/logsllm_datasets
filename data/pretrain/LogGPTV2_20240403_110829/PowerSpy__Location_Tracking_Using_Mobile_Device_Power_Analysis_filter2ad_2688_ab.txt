1.5
1.4
1.3
1.2
1.1
1
200
400
600
800
1000
1200
1400
1600
1800
Time [sec]
Figure 2: For two phones of the same model, power vari-
ations on the same drive are similar.
3
2.5
2
1.5
1
0.5
0
r
e
w
o
p
d
e
z
i
l
a
m
r
o
N
−0.5
−1
200
Nexus 4
Nexus5
400
600
800
Time [sec]
1000
1200
Figure 3: For two different phone models, power varia-
tions on the same drive are similar.
measurements, while transmitting packets over cellular,
using two different smartphone models (Nexus 4 and
Nexus 5) during the same ride, and we aligned the power
samples, according to absolute time.
The results presented in Figure 3 indicate that there is
similarity between different models that could allow one
model to be used as a reference for another. This ex-
periment serves as a proof of concept: we leave further
evaluation of such an attack scenario, where the attacker
and victim use different phone models, to future work. In
this paper, we assume that the attacker can obtain refer-
ence power measurements using the same phone model
as the victim.
3.3 Hysteresis
A phone attaches to the base station having the strongest
signal. Therefore, one might expect that the base station
to which a phone is attached and the signal strength will
be the same in one location. Nonetheless, it is shown
in [29] that signal strength can be signiﬁcantly different
at a location based on how the device arrived there, for
example, the direction of arrival. This is due to the hys-
teresis algorithm used to decide when to hand-off to a
new base station. A phone hands-off from its base sta-
tion only when its received signal strength dips below
the signal strength from the next base station by more
than a given threshold [26]. Thus, two phones that reside
in the same location can be attached to two different base
stations.
Hysteresis has two implications for determining a vic-
tim’s location from power measurements: (1) an attacker
can only use the same direction of travel as a reference
power measurement, and (2) it will complicate inferring
new routes from power measurements collected from in-
dividual road segments (Section 6).
3.4 Background summary and challenges
The initial measurements in this section suggest that the
power consumed by the cellular radio is a side chan-
788  24th USENIX Security Symposium 
USENIX Association
4
nel that leaks information about the location of a smart-
phone. However, there are four signiﬁcant challenges
that must be overcome to infer location from the power
meter. First, during the pre-measurement phase the at-
tacker may have traveled at a different speed and en-
countered different stops than the target phone. Second,
the attacker will have to identify the target’s power pro-
ﬁle from among many pre-collected power proﬁles along
different routes. Third, once the attacker determines the
target’s path, the exact location of the target on the path
may be ambiguous because of similarities in the path’s
power proﬁle. Finally, the target may travel along a
path that the attacker only partially covered during the
pre-measurement phase: the attacker may have only pre-
collected measurements for a subset of segments in the
target’s route. In the following sections we describe tech-
niques that address each of these challenges and experi-
ment with their accuracy.
4 Route distinguishability
As a warm-up we show how the phone’s power proﬁle
can be used to identify what route the user is taking from
among a small set of possible routes (say, 30 routes). Al-
though we view it as a warm-up, building towards our
main results, route distinguishability is still quite useful.
For example, if the attacker is familiar with the user’s
routine then the attacker can pre-measure all the user’s
normal routes and then repeatedly locate the user among
those routes.
Route distinguishability is a classiﬁcation problem:
we collected power proﬁles associated with known
routes and want to classify new samples based on this
training set. We treat each power proﬁle as a time series
which needs to be compared to other time series. A score
is assigned after each comparison, and based on these
scores we select the most likely matching route. Because
different rides along the same route can vary in speed
at different locations along the ride, and because routes
having the same label can vary slightly at certain points
(especially before getting to a highway and after exiting
it), we need to compare proﬁle features that can vary in
time and length and allow for a certain amount of differ-
ence. We also have to compensate for different baselines
in power consumption due to constant components that
depend on the running applications and on differences in
device models.
We use a classiﬁcation method based on Dynamic
Time Warping (DTW) [23], an algorithm for measur-
ing similarity between temporal sequences that are mis-
aligned and vary in time or speed. We compute the DTW
distance3 between the new power proﬁle and all refer-
3In fact we compute a normalized DTW distance, as we have to
ence proﬁles associated with known routes, selecting the
known route that yields the minimal distance. More for-
mally, if the reference proﬁles are given by sequences
{X}n
i=1, and the unclassiﬁed proﬁle is given by sequence
Y , we choose the route i such that
i = argmin
i
DTW(Y,Xi)
which is equivalent to 1-NN classiﬁcation given DTW
metric.
Because the proﬁles might have different baselines
and variability, we perform the following normalization
for each proﬁle prior to computing the DTW distance:
we calculate the mean and subtract it, and divide the re-
sult by the standard deviation. We also apply some pre-
processing in the form of smoothing the proﬁles using
a moving average (MA) ﬁlter in order to reduce noise
and obtain the general power consumption trend, and we
downsample by a factor of 10 to reduce computational
complexity.
5 Real-time mobile device tracking
In this section we consider the following task:
the at-
tacker knows that a mobile user is traveling along a par-
ticular route and our objective is to track the mobile de-
vice as it is moving along the route. We do not assume
a particular starting point along the route, meaning, in
probabilistic terms, that our prior on the initial location
is uniform. The attacker has reference power proﬁles col-
lected in advance for the target route, and constantly re-
ceives new power measurements from an application in-
stalled on the target phone. Its goal is to locate the device
along the route, and continue tracking it in real-time as it
travels along the route.
5.1 Tracking via Dynamic Time Warping
This approach is similar to that of route distinguishabil-
ity, but we use only the measurements collected up to this
point, which comprise a sub-sequence of the entire route
proﬁle. We use the Subsequence DTW algorithm [23],
rather than the classic DTW, to search a sub-sequence in
a larger sequence, and return a distance measure as well
as the corresponding start and end offsets.
We search for the sequence of measurements we have
accumulated since the beginning of the drive in all our
reference proﬁles and select the proﬁle that yields the
minimal DTW distance. The location estimate corre-
sponds to the location associated with the end offset re-
turned by the algorithm.
compensate for difference in lengths of different routes - a longer route
might yield larger DTW distance despite being more similar to the
tested sequence.
USENIX Association  
24th USENIX Security Symposium  789
5
5.2
Improved tracking via a motion model
6
Inference of new routes
While the previous approach can make mistakes in loca-
tion estimation due to a match with an incorrect location,
we can further improve the estimation by imposing rules
based on a sensible motion model. We ﬁrst need to know
when we are “locked” on the target. For this purpose we
deﬁne a similarity threshold so that if the minimal DTW
distance is above this threshold, we are in a locked state.
Once we are locked on the target, we perform a simple
sanity check at each iteration: “Has the target displaced
by more than X?”
If the sanity check does not pass we consider the esti-
mate unlikely to be accurate, and simply output the pre-
vious estimate as the new estimated location. If the sim-
ilarity is below the threshold, we switch to an unlocked
state, and stop performing this sanity check until we are
“locked” again. Algorithm 1 presents this logic as pseu-
docode.
Algorithm 1 Improved tracking using a simple motion
model
(cid:31) Are we locked on the target?
locked ← f alse
while target moving do
loc[i],score ← estimateLocation()
d ← getDistance(loc[i],loc[i− 1])
if locked and d > MAX DISP then
loc[i] ← loc[i− 1] (cid:31) Reuse previous estimate
end if
if score > T HRESHOLD then
locked ← true
end if
end while
5.3 Tracking using Optimal Subsequence
Bijection
Optimal Subsequence Bijection (OSB) [17] is a tech-
nique, similar to DTW, that enables aligning two se-
quences. In DTW, we align the query sequence with the
target sequence without skipping elements in the query
sequence, thereby assuming that the query sequence con-
tains no noise. OSB, on the other hand, copes with
noise in both sequences by allowing to skip elements.
A ﬁxed jump-cost is incurred with every skip in either
the query or the target sequence. This extra degree of
freedom has potential for aligning noisy subsequences
more efﬁciently in our case. In the evaluation section we
present results obtained by using OSB and compare them
to those obtained using DTW.
In Section 4 we addressed the problem of identifying
the route traversed by the phone, assuming the poten-
tial routes are known in advance. This assumption al-
lowed us to train our algorithm speciﬁcally for the po-
tential routes. As previously mentioned, there are indeed
many real-world scenarios where it is applicable. Nev-
ertheless, in this section we set out to tackle a broader
tracking problem, where the future potential routes are
not explicitly known. Here we speciﬁcally aim to iden-
tify the ﬁnal location of the phone after it traversed an
unknown route. We assume that the area in which the
mobile device owner moves is known, however the num-
ber of all possible routes in that area may be too large to
practically pre-record each one. Such an area can be, for
instance, a university campus, a neighborhood, a small
town or a highway network.
We address this problem by pre-recording the power
proﬁles of all the road segments within the given area.
Each possible route a mobile device may take is a con-
catenation of some subset of these road segments. Given
a power proﬁle of the tracked device, we will reconstruct
the unknown route using the reference power proﬁles
corresponding to the road segments. The reconstructed
route will enable us to estimate the phone’s ﬁnal loca-
tion. Note that, due to the hysteresis of hand-offs be-
tween cellular base stations, a power consumption is not
only dependent on the traveled road segment, but also on
the previous road segment the device came from.
In Appendix A we formalize this problem as a hid-
den Markov model (HMM) [27].
In the following we
describe a method to solve the problem using a particle
ﬁlter. The performance of the algorithm will be exam-
ined in the next section.
6.1 Particle Filter
A particle ﬁlter [1] is a method that estimates the state
of a HMM at each step based on observations up to that
step. The estimation is done using a Monte Carlo approx-
imation where a set of samples (particles) is generated at
each step that approximate the probability distribution of
the states at the corresponding steps. A comprehensive
introduction to particle ﬁlters and their relation to gen-
eral state-space models is provided in [28].
Or =(cid:31)or
xyz(cid:30), where or
We implement the particle ﬁlter as follows. We denote
xyz is a power proﬁle prerecorded
over segment (y,z) while the segment (x,y) had been tra-
versed just before it. We use a discrete time resolution
τ = 3 seconds. We denote ∆yz
max to be the min-
imum and maximum time duration to traverse road seg-
ment (y,z), respectively. We assume these bounds can be
derived from prerecordings of the segments. At each it-
min and ∆yz
790  24th USENIX Security Symposium 
USENIX Association
6
eration i we have a sample set of N routes Pi = {(Q,T )}.
The initial set of routes P0 are chosen according to Π. At
each step, we execute the following algorithm:
Algorithm 2 Particle ﬁlter for new routes estimation
for all route p in P do
tend ← end time of p
(x,y) ← last segment of p
z ← next intersection to traverse (distributed by A)
Wp ← min
t∈[∆yz
min,∆yz
or
xyz∈Or
p ← p||(y,z)
Update the end time of p
xyz)(cid:30)
xyz (cid:31)DTW(O[tend,tend+t],or
max]
end for
Resample P according to the weights Wp
At each iteration, we append a new segment, chosen
according to the prior A, to each possible route (repre-
sented by a particle). Then, the traversal time of the new
segment is chosen so that it will have a minimal DTW
distance to the respective time interval of the tracked
power proﬁle. We take this minimal distance as the
weight of the new route. After normalizing the weights
of all routes, a resampling phase takes place. N routes
are chosen from the existing set of routes according to
the particle weights distribution4. The new resampled set
of routes is the input to the next iteration of the particle
ﬁlter. The total number of iterations should not exceed an