windows特权滥用攻击
本文主要介绍利用windows特权滥用进行本地权限提升攻击。
特权滥用的bug
以高权限运行的进程(一般指system权限)会像其他进程一样对文件进行各类操作(如增删改查)，当高权限
进程在没有进行任何防御措施的情况下访问用户文件或者是目录时则有可能造成安全问题。我们一般所
熟知的此类问题有DLL planting或者是利用可写服务操作等，但除此之外还有其他的文件系统的攻击方
法可以被我们利用，且由于此类攻击属于逻辑漏洞，不涉及内存操作所以不会像内核提权那样有太多的
版本限制以及可能造成的bsod等风险。
漏洞位置
用户可写项
一般用户(普通用户)可以写入的位置如下：
用户自己的目录、文件，包括其appdata和temp文件夹，一般高权限进程不会访问此类文件，AV
除外。
public的文件、目录
C:\ProgramData及其子目录
C:\Windows\Temp及其子目录
至于一个文件目录的权限查看方式则有很多 AccessChk, icacls ,Get-Acl等，最简单的就是直接用GUI的
文件夹查看器：
特权文件操作
这个简单的方法就是procmon来看了，直接过滤指定事件即可。
但这些仅为进程自己执行的操作，如果你想深入挖掘更多的信息如ALPC、COM等等的话，则需要自己
逆向相关程序。
漏洞利用
这个已经有了N多的利用文章了，根据情况来使用即可：
https://googleprojectzero.blogspot.com/2015/08/windows-10hh-symbolic-link-mitigations.html
https://googleprojectzero.blogspot.com/2015/12/between-rock-and-hard-link.html
https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html
https://googleprojectzero.blogspot.com/2017/08/windows-exploitation-tricks-arbitrary.html
https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html
https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html
并且开源了利用工具：https://github.com/googleprojectzero/symboliclink-testing-tools 及.net库：h
ttps://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/tree/master/NtApiDot
Net
NTFS junctions
NTFS链接，有点类似于linux下面的mount功能，即允许将文件设置为文件系统的挂载点。
如图所示，在打开C:\Dir\file.txt 时将打开C:\Other\file.txt，也可以进行跨卷操作，比如将C:\Dir\重定向
到D:\Dir\，一般可以利用symboliclink-testing-tools中的CreateMountPoint 工具来实现这一点，如果
只是单纯的想要创建链接的话，可以使用mklink或者powershell中的New-Item的-Type Junction 参
数。
Hard links
硬链接，含义与linux中的含义相同，不支持目录和跨卷操作(无意义)
symboliclink-testing-tools中的CreateHardLink可以进行此类操作，此类攻击在win10中得到缓解，其
缓解如下：
所以在新版本的windows中，如果使用NtApiDotNet库来进行创建硬链接的话，会显示以下情况：
Object Manager symbolic links
虽然 NTFS 确实提供文件系统符号链接，但在 Windows 上，非特权用户无法在文件系统上创建符号链
接：它需要SeCreateSymbolicLinkPrivilege，默认情况下仅授予管理员。然而，非特权用户可以在 
Windows 的对象管理器中创建符号链接，顾名思义，它管理诸如进程和文件之类的对象。用户可以在可
写对象目录中创建对象符号链接，例如\RPC CONTROL\，这些符号链接可以指向任意路径——包括文件
系统上的路径——无论该路径当前是否存在。
作为非特权用户，我们可以链接一个挂载点，该挂载点解析为该\RPC Control\目录中的对象管理器符号
链接：
在上图中，C:\Dir\file.txt解析为C:\Other\stuff.any。我们可以使用CreateMountPoint和
CreateDosDeviceSymlink来执行此类操作。
By any chance if you are testing the code on Insider Preview, it will give you 
access denied as MS has prevented hard link to files that you have no write 
access to. The mitigation is implemented in file system driver (e.g. ntfs.sys)
Opportunistic locks
机会锁 (oplock) 是一种可以放置在文件上的锁，以便在其他进程想要访问该文件时得到通知——同时延
迟来自这些进程的访问，以便锁定进程可以在解除文件之前使文件处于适当的状态锁。最初设计用于通
过 SMB 缓存客户端-服务器文件访问.
其利用方法为：通过设置伪符号链接（和以前一样）并在最终文件（符号链接的目标）上放置一个机会
锁，我们可以在目标文件打开时更改符号链接（即使目标文件被锁定，符号链接没有）并使其指向另一
个目标文件：
在上图中文件的第一次访问C:\Dir\file.txt将打开C:\One\foo.xxx，第二次访问将打开C:\Two\bar.yyy。
我们可以使用SetOpLock和CreateSymlink。来实现此类攻击。
Exploit
假如说目前有以下场景，
在C:\ProgramData\Product\Logs（具有默认/继承访问权限的目录）中创建日志文件
日志文件由特权（系统）和非特权（用户）进程创建/写入
创建日志文件的过程设置了一个显式的 ACL，以便每个人都可以写入文件（并在需要时转换它）：
这会导致一个漏洞，该漏洞可被利用来创建具有任意内容的任意文件。
如果我们删除现有的日志文件，并将 Logs 目录变成一个连接到C:\Windows\System32（由于继承自 的
访问权限C:\ProgramData），问题组件的特权进程将在System32目录中创建他们的日志：
我们还可以使用符号链接技术来转移特定的日志文件（例如some.log）以使用攻击者选择的名称创建任
意文件，例如程序目录中的 DLL：
因为特权进程还在日志文件上设置了一个许可 ACL，我们也可以写入任意内容的文件。
从任意文件写入到本地权限提升
一般在具有任意文件写入时，我们常用的权限提升技术为dll劫持和文件覆盖：
除此之外还有另外的两种技术可以被我们使用：
http://waleedassar.blogspot.com/2013/01/wow64logdll.html
https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html
注意：第二种攻击方式在19H1之后的系统中由于
SetProcessMitigationPolicy(ProcessImageLoadPolicy)的原因已无法使用。
实操
我们将以Hide VPN为例来演示此类攻击的利用过程。该VPN会创建日志文件且提供相关权限，权限如
下：
下面就是漏洞利用了：
删除“C:\Users\AppData\Roaming\Hide.me”文件夹中的所有文件
从“C:\Users\AppData\Roaming\Hide.me”创建一个指向“C:”的挂载点
hide.me VPN 服务可以重新启动或等到计算机重新启动。一旦重新启动/重新启动，它将创建一个
挂载点到“C:”。
修改挂载点：
Remove-Item -Force "C:\Users\tests\AppData\Roaming\Hide.me\*"
CreateMountPoint.exe "C:\Users\tests\AppData\Roaming\Hide.me\" "C:\"
DumpReparsePoint.exe "C:\Users\tests\AppData\Roaming\Hide.me\"
当服务启动时，log位置已发生变化：
下面就是来利用此类方法来执行我们的恶意代码。利用方法如下：
此时你便获得了该文件的任意写入权限：
然后就是找个一个有dll劫持类的东西，把上面的dll位置改成看可以劫持的dll，然后写入我们的恶意代码
等待它加载，在老版本的windows系统中可以利用Windows 主机服务 (svchost.exe )来运行
C:\Program.exe来实现，但在最新版本的windows测试之后发现该方法已无法使用，且会在放入该类文
件时出发警告。
如果上面都完成之后，我们便可以等待其加载我们的dll，如果一切顺利我们便可以得到一个system的
cmd。
CreateSymlink.exe "C:\xx\xx\xx\x\xx.log" C:\Windows\evil.dll
参考文章：
https://itm4n.github.io/windows-dll-hijacking-clarified/
https://www.atredis.com/blog/cylance-privilege-escalation-vulnerability
https://offsec.almond.consulting/intro-to-file-operation-abuse-on-Windows.html
http://zeifan.my/security/privesc/2020/08/26/hideme-vpn-privesc.html