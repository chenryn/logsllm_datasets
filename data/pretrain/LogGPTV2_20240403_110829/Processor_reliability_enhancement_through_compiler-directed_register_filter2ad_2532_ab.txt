### Authorized Use and Download Information
This document is authorized for licensed use by Tsinghua University. It was downloaded on March 20, 2021, at 09:58:58 UTC from IEEE Xplore. Usage restrictions apply.

### Introduction
This paper introduces a dynamic register remapping technique to minimize the peak temperature of the register file in low-power embedded processors. The remapping process, directed by the compiler, shuffles register names after compilation to ensure balanced register accesses across loop iterations, thereby reducing the need for additional hardware overhead. This approach enables an efficient and low-overhead solution for temperature control in embedded systems.

### Organization
- **Section II**: Reviews related work.
- **Section III**: Outlines the technical motivation.
- **Sections IV and V**: Detail the proposed register shuffling scheme and its implementation.
- **Section VI**: Presents experimental validation.
- **Section VII**: Concludes with a summary of findings.

### II. Related Work
The impact of operating temperature on system reliability has been extensively studied. Researchers have developed analytical and experimental models to understand temperature-induced fault rate increases, such as delay violations, negative bias temperature instability, and neutron-induced latchup. Architectural thermal models like HotSpot have been used to calculate transient temperature responses. Two types of Dynamic Thermal Management (DTM) techniques have been proposed to prevent critical temperature levels: temporal and spatial. Temporal techniques slow down heat accumulation, while spatial techniques shift computation from hot to cool resources. However, these techniques often require spare or underutilized resources.

The register file, being a power-hungry and overheated resource, has received increasing attention. Techniques such as single- or multi-level banking and bit-partitioning have been proposed to reduce power consumption and peak temperature. Additionally, methods to increase idle time or distribute the register file into multiple clusters have been explored, but these often lead to increased chip area and complexity.

Register reassignment techniques have been proposed to balance register accesses, but they are limited by the NP-hard problem of register allocation and cannot completely eliminate access asymmetry. In contrast, our proposed technique iteratively maps logical destinations to distinct physical registers across loop iterations, achieving fine-grained temporal balance without revisiting the register allocation problem.

### III. Technical Motivation
The motivation for designing a dynamic register shuffling process to reduce the register file's peak temperature is based on the observation that code generated by compilers exhibits highly asymmetric register access activity. Traditional register allocation schemes do not consider access distribution, leading to imbalanced register usage. Figure 1 illustrates this imbalance, showing that a small set of registers captures a majority of the total accesses.

To address this, we propose a dynamic mapping between logical and physical registers. This mapping should be deterministic and not rely on a hardware mapping table, which would otherwise introduce significant overhead. The key tasks are:
- Select a free physical register for each write access without dynamic register usage information.
- Redirect each read access to the corresponding physical register without dynamic mapping information.

### IV. Deterministic Register Shuffling

#### A. An Illustrative Example
The goal of the proposed register shuffling technique is to evenly balance register accesses across loop iterations without using a hardware mapping table. This is achieved by establishing a deterministic relationship between the static and dynamic names of logical registers.

For example, in a loop, when a new physical register is allocated as the destination of an instruction, the old destination becomes free. This allows the old destination to be used as the new destination of the next instruction, and so on. This process ensures that heavily accessed logical registers are mapped to different physical registers across iterations, preventing local heat buildup.

#### B. Destination Register Name Adjustment
At each iteration, the k-th logical destination register is deterministically remapped to the physical register used as the (k-1)-th destination in the last iteration. This recursive relationship can be formalized, and the shifting order is the reverse of the order in which each logical register appears as a destination within the loop body.

Two shuffling functions, modulo addition and Galois field multiplication, can be used to achieve this deterministic shifting. These functions ensure that each logical destination register is sequentially mapped to each physical register within a window before shuffling back to the initial mapping.

#### C. Loop-Carried Dependence Preservation
Once the new name of each logical destination register is determined, the names of source registers can be adjusted accordingly to preserve loop-carried dependencies.

### Conclusion
This paper presents a novel dynamic register shuffling technique to reduce the peak temperature of the register file in low-power embedded processors. By leveraging compiler-directed remapping, the technique achieves fine-grained temporal balance in register accesses without the need for additional hardware overhead. Experimental results confirm the efficacy of the proposed approach in improving temperature control and system reliability.