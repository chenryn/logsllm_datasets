（2）篡改固件
（3）提取加密密钥
（4）篡改加密密钥
2、通过无线信号攻击桌面无线设备时：
（1）攻击未经加密和授权的无线通信
（2）重放攻击
（3）按键注入攻击
（4）解密经过加密的通信数据
**五、安全漏洞**
在整个研究项目中，我们可以在使用AES加密机制的无线设备中找到以下5类安全漏洞：
1、缺乏对代码（固件）以及数据（加密密钥）的保护。
2、没有对通信数据进行加密和认证。
3、没有对重放攻击的进行防护。
4、对重放攻击防护不到位。
5、其他加密问题。
我们会在下文详细阐述我们发现的所有漏洞，同时也会在安全公告中提及受影响的相关设备 [16-29]。
**5.1 缺乏对代码和数据的保护**
在我们的研究中，被测试的5个设备中有3个设备的固件和AES加密密钥可以被我们读取，这3个设备分别为AES B.UNLIMITED、Microsoft
Wireless Desktop 2000以及Perixx PERIDUA-710W。
对于这3个基于nRF24的设备而言，我们有可能能够使用nrfprog软件，通过SPI接口访问设备的闪存（如图6和图7所示）。
Cherry的USB设备所导出的内存镜像中包含AES密钥，如下所示：
    1 (...)
    2 00007430: 0000 0000 0000 0000 0000 3cdd 9cc7 db74
    3 00007440: 675a c0b2 9796 a55b 913c 0000 0000 0000
    4 00007450: 0000 0000 0000 0000 0000 0000 0000 0000
    5 (...)
与之匹配的Cherry键盘所导出的内存镜像中也包含相同的AES密钥，如下所示：
    1 00000000: aa32 1d98 5ef9 3cdd 9cc7 db74 675a c0b2
    2 00000010: 9796 a55b 913c ffff ffff ffff ffff ffff
    3 00000020: ffff ffff ffff ffff ffff ffff ffff ffff
    4 (...)
与被测试的Microsoft以及Perixx键盘相比，Cherry键盘并没有将加密密钥保存在普通的耐久性内存中，而是将其保存在扩展的耐久性内存中。对nRF24LE1而言，1.5Kb大小的非易失性内存（non-volatile
memory，NVM）被分为2个256字节大小的扩展耐久性页面以及两个512字节大小的普通耐久性页面，如参考资料[12]所述。而EENVM（extended
endurance non-volatile memory，扩展耐久性非易失性内存）无法通过SPI接口进行访问，如图10所示。
因此，为了访问Cherry键盘中包含加密密钥的EEM（extended endurance
memory，扩展耐久内存），我们需要研发具备memcpy功能的固件，将EEM中特定的内存区域拷贝到SPI可以访问的普通数据内存中。示例固件代码如清单3.1所示。
由于无线设备对自身的代码（固件）及数据（加密密钥）保护不到位，可以物理接触设备的攻击者能够在几分钟之内，对存在漏洞的桌面无线设备进行攻击，提取设备所使用的AES密钥，并在后续攻击中，利用这个密钥以无线攻击模式远程攻击设备，或者篡改设备固件，比如，攻击者可以弱化设备所使用的加密程度。
对被测试的Cherry和Perixx键盘而言，攻击者有可能随意读取或访问设备内存。但这种攻击对Microsoft键盘来说并不适用，因为它使用了nRF24LE1的一次性可编程版本。攻击者只能将该设备闪存中的比特位从1改为0，但并不能从0改为1。但不论如何，我们还是可以在某种程度上修改设备的代码以及数据信息。
对基于nRF24的设备而言，只需简单的方法就能实现对设备代码及数据的更好的保护，那就是使用已有的回读保护功能（Read DISable Main
Block，RDISMB，禁止读取主存储区），如图11所示。
被测试的基于nRF24的4个设备中，只有Logitech键盘使用了这种功能，避免攻击者通过SPI接口对设备闪存进行读写。
**5.2 鼠标欺骗攻击**
在我们研究项目进行期间，我们发现被测试的所有无线鼠标的无线通信都没有经过加密及认证。因此，如果知道设备所使用的鼠标数据协议，攻击者就能模拟并欺骗鼠标的动作（比如鼠标移动或者鼠标点击动作）。这种攻击并不新颖，许多研究人员已经在最近几年中，在不同的场合下报告并分析了这类问题，但这种攻击能够奏效还是让我们非常兴奋。你没有看错，带有加密功能的现代桌面无线设备依然仅对键盘进行加密和认证处理，并没有对鼠标通信进行加密及认证处理，这的确存在安全风险。
攻击者可以通过伪造数据包，以未授权方式远程控制目标系统的鼠标指针。如果（采用启发式方法）对目标系统进行针对性的尝试，这种鼠标欺骗攻击有可能会导致目标系统的远程代码执行漏洞。
启发式攻击需要解决如下几个问题：
1、操作系统（屏幕布局及内容）
2、语言设定（屏幕布局及内容）
3、鼠标设定（鼠标指针加速）
4、操作系统中的虚拟键盘设定（窗口位置）
根据我们的经验，使用启发式方法时最好还是遵循系统的默认设置，Windows 7中默认的鼠标设置、虚拟键盘（on-screen
keyboard，OSK）的默认窗口位置及尺寸设置如图12所示。
在这个研究项目中，我们研发了一款名为Radioactive
Mouse的概念验证软件，来演示鼠标欺骗攻击场景。这款软件属于我们nRF24工具集的一部分[31]。
对鼠标指针实现像素级别的控制听起来比较简单，但目前在实际中还不能完美实现。在鼠标加速方面，我们还需要做更多的研究工作（如对系统实际使用的算法进行逆向分析），例如，我们需要理清不同的Windows系统所使用的鼠标加速策略（实现代码位于win32k.sys中），来完成预定的操作行为。
因此，我们的概念验证软件目前仍需要配合手动干预及减缓鼠标的运动轨迹，以完成较为稳定的攻击过程。
我们使用被测试的无线鼠标，配合Crazyradio
PA无线USB设备以及Bastille的nrf固件，通过鼠标欺骗攻击成功实现了目标系统的代码执行攻击场景，如图13及图14所示。
攻击视频已上传到YouTube上，标题为“Radioactive Mouse States the Obvious”[30]。
**5.3 重放攻击**
在我们研究项目中，我们发现所有被测试的无线键盘及鼠标都会受到重放攻击影响，原因在于它们没有或者缺乏足够的保护机制来防御这类攻击。
Microsoft Wireless Desktop
2000使用了重放攻击保护机制，但根据我们的研究结果，设备所用的有效报文计数器的窗口非常大，如果重放攻击时录制动作和重放动作之间只有少数几次按键点击，那么这种情况下攻击者就可以利用足够大的窗口期来实施重放攻击。
对于桌面无线设备来说，攻击者可以通过重放攻击完成以下两种攻击：
1、在无人看守时，获取处于屏幕锁定状态下的计算机的未授权访问权限。
2、物理接触目标桌面无线设备的USB收发器时，能以明文形式恢复用户的按键信息，例如，可以获取用户输入的密码信息。
攻击者在不知道实际的通信协议的情况下（即黑盒模式下），可以使用软件定义的无线电进行重放攻击。使用软件定义的无线电进行重放攻击时所需的实验设备如图15所示。
以Fujitsu桌面无线设备为目标，我们实施重放攻击时所使用的GRC流程图如图16所示。
复杂状态下的重放攻击需要使用特定的数据报文，我们可以将Crazyradio PA以及Bastille的nrf研究固件结合使用，实现复杂情况下的重放攻击。
在这个研究项目中，我们开发了一款Python工具，名为Simple Replay
Tool，我们使用这款工具来演示5个被测设备没有或缺乏重放攻击防护机制。针对Microsoft Wireless 2000键盘的重发攻击输出结果如下所示：
    1 # python simple_replay.py -c 25
    2 _____ ______ ___ _ _ _____ _ _
    3 | __ | ____|__ | || | | __ | | | |
    4 _ __ | |__) | |__ ) | || |_ | |__) | | __ _ _ _ ___ ___| |_
    5 | '_ | _ /| __| / /|__ _| | ___/| |/ _` | | | / __|/ _  __|
    6 | | | | |  | | / /_ | | | | | | (_| | |_| __  __/ |_
    7 |_| |_|_| __| |____| |_| |_| |_|__,_|__, |___/___|__|
    8 __/ |
    9 |___/
    10 Simple Replay Tool v0.2 by Matthias Deeg - SySS GmbH (c) 2016
    11 [*] Configure nRF24 radio
    12 [*] Scanning for wireless keyboard ...
    13 [+] Received data: 083816010100f32a
    14 [+] Found nRF24 device with address A9:A9:8F:EB:CD on channel 25
    15 [?] Attack this device (y/n)? y
    16 [*] Start recording ( to stop recording)
    17 [+] Received data: 09981601dea2f3157ec032fcfa34ce70dee330c9
    18 [+] Received data: 09981601dea2f3157ec032fcfa34ce70dee330c9…
    19 ()
    20 ^C
    21 [*] Stop recording
    22 [*] Press  to replay the recorded data packets or  to quit ...
    23 [+] Send data: 09981601dea2f3157ec032fcfa34ce70dee330c9
    24 [+] Send data: 09981601dea2f3157ec032fcfa34ce70dee330c9…
    25 ()
通过这款概念验证软件，我们成功完成了本节开头描述的两种攻击形式。通过物理接触USB收发器，记录下键盘按键所对应的无线通信数据，我们成功搞定了处于屏幕锁定状态下计算机系统的未授权访问权限，也成功恢复了明文的按键信息。
**5.4 按键注入攻击**
这5个测试设备中有3个存在加密问题，会受到按键注入攻击影响，这也是我们发现的最后一个安全漏洞（但并不意味着漏洞分量最轻）。
被测试的Cherry、Perixx以及Logitech键盘在计数器模式中使用了AES加密方式，密钥位数为128位（AES-128-CTR）。通常情况下，初始化向量（IV）包含一个随机数（nonce）以及一个计数器（counter）。例如，被测Cherry键盘所使用的随机值包含11个NULL字节（即值为0x00的11个字节），所使用的计数值为一个随机的5字节数据。
我们已经在基于无线电的分析中，看到过被测设备在无线通信中使用了AES加密算法，通过SPI接口篡改Cherry键盘的固件，我们可以对这一结果有更深入的分析及理解。为了分析设备固件，我们仔细研究了nRF24
SDK以及官方提供的源代码，这些资料都非常具有价值。
比如，在lib_crypt.h源代码中，我们发现代码中有些注释非常有趣，比如有注释介绍了nRF24LU1以及nRF24LE1在加密库实现方式上的区别，以及nRF24LE1所用的计数器（LS5B）的相关信息，如清单5.1所示。
    1 /*
    2 (...)
    3 * @brief Example implementation for encrypting/decrypting data
    4 *
    5 * The encryption is based on AES counter mode (CTR) where a 128 bit hybrid counter
    6 * is used for encryption/decryption. The counter is split in two , 11 bytes as MS11B
    7 * and 5 bytes as LS5B. The LS5B part is not secret and tells the receiver how
    8 * to decrypt an encrypted message.
    9 (...)
    10 * Note that the security of the link will not be reduced as a consequence of sending
    11 * the counter value in plain text as long as the following criteria are met:
    12 *
    13 * - Cipher key used for encryption/decryption must be kept secret.
    14 * - The plain text counter (LS5B) must be modified for each transfer.
    15 (...)
    16 * The library can be used on both nRF24LU1 and nRF24LE1 devices , but the implementation
    17 * is slightly different between these. In the nRF24LE1 implementation the LS5B is not
    18 * a counter , but random values generated by the embedded random number generator.
    19 * The reason for this is that the counter value would have to be stored in data memory