title:Automatically Detecting Error Handling Bugs Using Error Specifications
author:Suman Jana and
Yuan Jochen Kang and
Samuel Roth and
Baishakhi Ray
Automatically Detecting Error Handling Bugs 
Using Error Specifications
Suman Jana and Yuan Kang, Columbia University; Samuel Roth, Ohio Northern University; 
Baishakhi Ray, University of Virginia
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/jana
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Automatically Detecting Error Handling Bugs using Error Speciﬁcations
Suman Jana1, Yuan Kang1, Samuel Roth2, and Baishakhi Ray3
1Columbia University
2Ohio Northern University
3University of Virginia
Abstract
Incorrect error handling in security-sensitive code often
leads to severe security vulnerabilities.
Implementing
correct error handling is repetitive and tedious especially
in languages like C that do not support any exception
handling primitives. This makes it very easy for the de-
velopers to unwittingly introduce error handling bugs.
Moreover, error handling bugs are hard to detect and lo-
cate using existing bug-ﬁnding techniques because many
of these bugs do not display any obviously erroneous be-
haviors (e.g., crash and assertion failure) but cause subtle
inaccuracies.
In this paper, we design, implement, and evaluate
EPEX, a tool that uses error speciﬁcations to identify
and symbolically explore different error paths and re-
ports bugs when any errors are handled incorrectly along
these paths. The key insights behind our approach are:
(i) real-world programs often handle errors only in a lim-
ited number of ways and (ii) most functions have sim-
ple and consistent error speciﬁcations. This allows us
to create a simple oracle that can detect a large class of
error handling bugs across a wide range of programs.
We evaluated EPEX on 867,000 lines of C Code from
four different open-source SSL/TLS libraries (OpenSSL,
GnuTLS, mbedTLS, and wolfSSL) and 5 different ap-
plications that use SSL/TLS API (Apache httpd, cURL,
Wget, LYNX, and Mutt). EPEx discovered 102 new er-
ror handling bugs across these programs—at least 53 of
which lead to security ﬂaws that break the security guar-
antees of SSL/TLS. EPEX has a low false positive rate
(28 out of 130 reported bugs) as well as a low false neg-
ative rate (20 out of 960 reported correct error handling
cases).
1
Introduction
Error handling is an important aspect of software de-
velopment. Errors can occur during a program’s exe-
cution due to various reasons including network packet
loss, malformed input, memory allocation failure, etc.
Handling these errors correctly is crucial for develop-
ing secure and robust software. For example, in case
of a recoverable error, a developer must ensure that the
affected program invokes the appropriate error recov-
ery code.
In contrast, if an error is critical, the pro-
gram must display an appropriate error message and
fail in a safe and secure manner. Error handling mis-
takes not only cause incorrect results, but also often
lead to security vulnerabilities with disastrous conse-
quences (e.g., CVE-2014-0092, CVE-2015-0208,
CVE-2015-0288, CVE-2015-0285,
and CVE-
-2015-0292). More worryingly, an attacker can often
remotely exploit error handling vulnerabilities by send-
ing malformed input, triggering resource allocation fail-
ures through denial-of-service attacks etc.
the Internet,
To understand how incorrect error handling can lead
to severe security vulnerabilities in security-sensitive
code, consider the bug in GnuTLS (versions before
3.2.12), a popular Secure Sockets Layer (SSL) and
Transport Layer Security (TLS) library used for com-
municating securely over
that caused
CVE-2014-0092. Listing 1 shows the relevant part
of the affected X.509 certiﬁcate veriﬁcation code. The
function _gnutls_verify_certificate2 called
another function check_if_ca to check whether the
issuer of the input certiﬁcate is a valid Certiﬁcate Au-
thority (CA). check_if_ca returns < 0 to indicate
an error (lines 4 and 5 of Listing 1). However, as line
16 shows, _gnutls_verify_certificate2, the
caller function, only handles the case where the return
value is 0 and ignores the cases where check_if_ca
returns negative numbers as errors. This missing er-
ror check makes all applications using GnuTLS incor-
rectly classify an invalid certiﬁcate issuer as valid. This
bug completely breaks the security guarantees of all SS-
L/TLS connections setup using GnuTLS and makes them
vulnerable to man-in-the-middle attacks.
In summary,
USENIX Association  
25th USENIX Security Symposium  345
1
Listing 1:
GnuTLS error handling bug
(CVE-2014-0092). The lines marked in
color gray show an error path and
the red lines highlight the source of
error handling bug.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
int check_if_ca (...)
{ ...
result = ...;
if (result < 0) {
goto cleanup;
}
...
result = 0;
cleanup:
return result;
}
int _gnutls_verify_certificate2 (...)
{ ...
if (check_if_ca (...)
== 0) {
result = 0;
goto cleanup;
}
...
result = 1;
cleanup:
return result;
this bug renders all protections provided by GnuTLS use-
less.
Developers often introduce error handling bugs unwit-
tingly, as adding error checking code is repetitive and
cumbersome (especially in languages like C that do not
provide any exception handling primitives). Moreover,
a large number of errors in real systems cannot be han-
dled correctly at their source due to data encapsulation
and, therefore, must be propagated back to the rele-
vant module. For example, if a protocol implementa-
tion receives a malformed packet that cannot be parsed
correctly, the parsing error must be appropriately trans-
formed and propagated to the module implementing the
protocol state machine in order to ignore the packet and
recover gracefully.
Implementing correct error propa-
gation in real-world software is non-trivial due to their
complex and intertwined code structure.
Automated detection of error handling bugs can help
developers signiﬁcantly improve the security and robust-
ness of critical software. However, there are three major
challenges that must be tackled in order to build such a
tool: (i) error path exploration. Error handling code
is only triggered in corner cases that rarely occur dur-
ing regular execution. This severely limits the ability of
dynamic analysis/testing to explore error paths. More-
over, error handling code is usually buried deep inside
a program and, therefore, is hard to reach using off-the-
shelf symbolic execution tools due to path explosion; (ii)
lack of an error oracle. Error handling bugs often result
in silent incorrect behavior like producing wrong output,
causing memory corruption, etc. as shown in the previ-
ous example. Therefore, accurately separating incorrect
error handling behavior from the correct ones is a hard
problem; and (iii) localizing error handling bugs. Fi-
nally, the effects of error handling bugs are usually man-
ifested far away from their actual sources. Accurately
identifying the origin of these bugs is another signiﬁcant
problem.
Our contributions. In this paper, we address all these
three problems as discussed below. We design, imple-
ment, and evaluate EPEX, a novel algorithm that can
automatically detect error-handling bugs in sequential C
code.
Identiﬁcation and scalable exploration of error paths.
As low-level languages like C do not provide any excep-
tion handling primitives, the developers are free to use
any arbitrary mechanism of their choice for communi-
cating errors. However, we observe that real-world C
programs follow simple error protocols for conveying
error information across different modules. For exam-
ple, distinct and non-overlapping integer values are used
throughout a C program to indicate erroneous or error-
free execution. Integer values like 0 or 1 are often used to
communicate error-free execution and negative integers
typically indicate errors. Moreover, functions that have
related functionality tend to return similar error values.
For example, most big number functions in OpenSSL re-
turn 0 on error. These observations allow us to create
simple error speciﬁcations for a given C program, in-
dicating the range of values that a function can return
on error. Given such speciﬁcations as input, our algo-
rithm performs under-constrained symbolic execution at
the corresponding call-sites to symbolically explore only
those paths that can return error values and ignores the
rest of the paths. Such path ﬁltering minimizes the path
exploration problem often plaguing off-the-shelf sym-
bolic execution tools.
Design of an error oracle. We observe that when an er-
ror occurs, most C programs usually handle the scenario
in one of the following simple ways: (i) propagate an
appropriate error value (according to the corresponding
error protocol) upstream, (ii) stop the program execution
and exit with an error code, or (iii) display/log a rele-
vant error message. We leverage this behavior to create a
simple program-independent error oracle. In particular,
our algorithm checks whether errors are handled follow-
ing any of the above three methods along each identiﬁed
error path; if not, we mark it as a potential bug.
Accurate bug localization. Our error oracle also helps
us accurately localize the error handling bugs as it al-
lows our algorithm to detect the bugs at their source. As
a side-effect, we can precisely identify buggy error han-
dling code and thus drastically cut down developers’ ef-
346  25th USENIX Security Symposium 
USENIX Association
2
fort in ﬁxing these bugs.
Implementation and large-scale evaluation. Using our
algorithm, we design and implement a tool, EPEX, and
evaluate it. EPEX’s analysis is highly parallelizable and
scales well in practice. EPEX can be used to ﬁnd error-
handling bugs in any C program as long as the above
mentioned assumptions hold true. We evaluated EPEX
on a total of 867,000 lines of C code [56] from 4 differ-
ent open-source SSL/TLS libraries (OpenSSL, GnuTLS,
mbedTLS, and wolfSSL) and 5 different applications us-
ing SSL/TLS APIs (cURL, Wget, Apache httpd, mutt,
and LYNX). EPEX discovered 102 new error handling
bugs across these programs—at least 53 of which lead
to critical security vulnerabilities that break the security
guarantees of SSL/TLS. We also found that EPEX has
both low false positive (28 out of 130 reported bugs)
and false negative rates (20 out of 960 reported correct
error handling cases). Thus, EPEX has a 78% preci-
sion and 83% recall on our tested programs. Several of
our tested programs (e.g., PolarSSL, cURL, and Apache
httpd) have been regularly checked with state-of-the-art
static analysis tools like Coverity, Fortify, etc. The fact
that none of these bugs were detected by these tools also
demonstrates that EPEX can detect bugs that the state-
of-the-art bug ﬁnding tools miss.
The rest of this paper is organized as follows. We
present a brief overview of error handling conventions
in C programs in Section 2. We describe our platform-
and language-independent technique for detecting error
handling bugs in Section 3. The details of implement-
ing our algorithm in Clang and the results are presented
in Sections 4 and 5 respectively. We survey the related
work in Section 6 and present several directions for fu-
ture work in Section 7. Section 8 concludes our paper.
2 Error handling in C programs
C does not support exception handling primitives like
try-catch. In C, a fallible function, which may fail
due to different errors, e.g., memory allocation failure or
network error, usually communicates errors to the caller
function either through return values or by modifying ar-
guments that are passed by reference. While there are no
restrictions on the data types/values that can be used to
communicate errors, C programmers, in general, create
an informal, program-speciﬁc error protocol and follow
it in all fallible functions of a program to communicate
errors. An error protocol consists of a range of error-
indicating and non-error-indicating values for different
data types. For example, a program may use an error pro-
tocol where any negative integer value indicates an error
and 0 indicates an error-free execution. Similarly, an er-
ror protocol may also use a NULL pointer or a boolean
value of false to indicate errors. The existence of such
Libraries
Applications
OpenSSL
GnuTLS
mbedTLS
wolfSSL
httpd [51]
curl
lynx
mutt
wget
−403 ≤ e ≤ −1
−213 ≤ e ≤ −1
1 ≤ e ≤ 720000
−29999 ≤ e ≤ −1
1 ≤ e ≤ 91
e = −1
e = −1
Error
Range
e ≤ 0
e < 0
Non-Error
Range
e = 1
e = 0
e = 0
e ∈ {0,1}
e = 0
e = 0
e ≥ 0
e ≥ 0
e = 0
e represents the return values of fallible functions
Table 1: Error protocols of the tested libraries/applications
error handling protocols makes it easier for us to create
error speciﬁcations for different functions of a program.
For example, consider the C programs that we studied
in this work. Table 1 shows their error protocols. Fal-
lible functions in OpenSSL usually return 0 or a nega-
tive integer to indicate errors and 1 to indicate error-free
execution. In contrast, GnuTLS uses negative integers
between -1 and -403 to indicate errors and 0 to indicate
error-free execution. In spite of the variety of protocols,
in all the cases, error-indicating and non-error-indicating
ranges for fallible functions do not overlap, to avoid am-
biguities.
3 Methodology
In this section, we introduce the details of EPEX (Error
Path Explorer), a tool for automatically detecting dif-
ferent types of error handling bugs in sequential C pro-
grams. Our key intuition is that if an error is returned
by a function in a program path, that error must be han-
dled correctly along that path according to the program’s
error convention. Given a function under test, say FT,
EPEX identiﬁes possible error paths—the paths along
which FT returns error values, and ensures that the er-
ror values are handled correctly along the error paths at
the call site; if not, EPEX reports bugs due to missing
error-handling.
3.1 Overview
An overview of EPEX’s workﬂow for an individual API
function is presented in Figure 1. EPEX takes ﬁve inputs:
the signature of the fallible function under test (FT), the
caller functions of FT (FTcallers), a speciﬁcation deﬁning
a range of error values that FT can return (FTerrSpec), a
range of return values that are used to indicate error-free
execution according to the test program’s error protocol
(GlobalnerrSpec), and a set of error logging functions used
by the program (Loggers). The list of fallible functions,
USENIX Association  
25th USENIX Security Symposium  347
3
GlobalnerrSpec 
Loggers 
FT 
FTcallers  
FTerrSpec  
(1)		
Iden)fying	
error	paths	
error 
paths 
Checking	error	
handling	at	call	
(2)		
site	
paths with  
incorrect 
error 
handling 
(3)		
Improving	precision	by			
leveraging	mul)ple	
error-handling	instances		
error handling  
bugs 
Figure 1: EPEX workﬂow
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
their error speciﬁcations, and list of error logging func-
tions are created manually, while their caller functions
are automatically identiﬁed by EPEX. EPEX then works
in three steps.
For example,
In Step-I, by performing under-constrained sym-
bolic execution at FTcallers, EPEX identiﬁes the er-
ror paths along which FT returns an error value,
based on FTerrSpec.
in Listing 1,
check_if_ca’s error speciﬁcation says the function
will return ≤ 0 on error. Hence, Step-I symbolically
executes _gnutls_verify_certificate2 func-
tion and marks the path along the if branch in the
check_if_ca function as an error path (marked in
color gray ).
Next, in Step-II, EPEX checks if the call site of FT
handles the error values correctly. In particular, EPEX
checks that if FT returns an error, the error value is han-
dled by the caller in one of the following ways:
it (i)
pushed the error upstream by returning a correct error
value from the caller function, (ii) stopped the program
execution with a non-zero error code, or (iii) logged the
error by calling a program-speciﬁc logging function. If
none of these actions take place in an error path, EPEX
reports an error handling bug. For instance, in case
of Listing 1, the error path returns < 0 at the call site,
_gnutls_verify_certificate2 (line 16). How-
ever, the error value is not handled at the call site; in fact
it is reset to 1 (line 21), which is a non-error value as per
GlobalnerrSpec. Thus, in this case, an error path will re-
turn a non-error value. EPEX reports such cases as the
potential error-handling bugs (marked in red).
Finally, in Step-III, EPEX checks how error handling
code is implemented in other call sites of FT. For ex-
ample, if all other FT call sites ignore an error value,
EPEX does not report a bug even if the error value is not
handled properly at the call site under investigation. As
FTerrSpec may be buggy or symbolic execution engines