1
1
3
2
1
4
Nm
e
458
742
57
59
22
28
better than MUZZ.
Second, as to MUZZ and MAFL, P2 is probably better
than P1. It is concluded based on the fact that P2’s “best
results” are all better than P1’s. For example, as to Nm
in
e
e is achieved with P2 (P1: 68, P2:
x264, the best result of Nm
B also comes from P2 (P1: 8,
91); similarly, the best result of Nm
P2: 9). In the meantime, there seems to be no such implication
inside AFL or MOPT. Besides the numbers of concurrency-
violations or concurrency-bugs, §6.5.3 provides a case study
on gm-cnvt that demonstrates P2’s advantages over P1 w.r.t.
time-to-exposure of the concurrency-bugs.
We have reported all the newly detected 19 concurrency-
bugs (excluding the 3 concurrency-bugs in vpxdec-v1.3.0-
5589) to their project maintainers (c.f., Table 5 for the details).
Answer to RQ3: MUZZ outperforms competitors in de-
tecting concurrency-bugs; the value Nc calculated during
fuzzing additionally contributes to revealing these bugs.
6.5 Further Discussions
This section discusses miscellaneous concerns, issues and
observations for MUZZ’s design and evaluation.
6.5.1 Constant Parameters
Using empirical constant parameters for grey-box fuzzing is
practiced by many fuzzing techniques [6,33,63]. For example,
AFL itself has many hard-coded conﬁgurations used by de-
fault; MOPT additionally has the suggested conﬁguration to
control the time to move on to pacemaker mode (i.e., -L 0).
In MUZZ, constant parameters are used in two places.
(1) The upper bounds for coverage-oriented instruc-
tion: Ps0 (defaults to 0.5) and Pm0 (defaults to 0.33). These
default values inspire from AFL’s “selective deputy instruc-
tion instrumentation” strategy to make the instrumentation
ratio to be 0.33 when AddressSanitizer is involved during
instrumentation. Larger values of Ps0 and Pm0 increases the
instrumentation ratio only if the thresholds are frequently
reached. Subsequently, the instrumented program has these
symptoms: a) the program size after instrumentation in-
creases; b) the execution state feedback is potentially better; c)
the instrumentation-introduced execution speed slowdown is
more evident. Therefore, increasing the values of Ps0 and Pm0
reﬂects a tradeoff between precise feedback and its overhead.
In our benchmarks, when we assign Ps0 =0.5, Pm0 =0.33,
• For im-cnvt, the speed slowdown is about 15% com-
pared to default settings, while the capability of detecting
concurrency-vulnerabilities and concurrency-bugs are
similar; meanwhile, there are a few more multithreading-
relevant seeds (Nmt) but Nmt
Nall
• For pbzip2-c, the differences brought by changes of Ps0
is slightly smaller.
and Pm0 from the default settings are all neglectable.
We believe there are no optimal instrumentation thresholds
that work for all the projects; therefore MUZZ provides the
empirical values as the defaults.
(2) The seed selection probabilities Pynt = 0.95, Pynn =
0.01, Pnnn = 0.15 in Algorithm 3. These constants are not in-
troduced by MUZZ, but based on AFL’s “skipping probability”
to conditionally favor seeds with new coverage [63].
Since the 12 benchmarks that we chose are quite diversiﬁed
(c.f., §6.1.2), it is considered fair to use default settings for
these parameters, when comparing MUZZ, MAFL with other
fuzzers such as AFL, MOPT. In practice, we suggest keeping
MUZZ’s default settings to test other multithreaded programs.
6.5.2 Schedule-intervention Instrumentation
The goal of MUZZ’s schedule-intervention is to diversify
interleavings during repeated executions in the fuzzing phase.
During the evaluation, we did not separately evaluate the
effects of schedule-intervention instrumentation. However,
based on our observation, this instrumentation is important
to achieve more stable fuzzing results. Two case studies can
support this statement.
a) We turned off schedule-intervention instrumentation
in MUZZ and fuzzed lbzip2-c six times on the same
machine. The calculated value of Nmt
is 54.5% (=
Nall
4533/8310), which is lower than the result in Table 2
(63.6% = 5127/8056). Since 54.5% is still greater than
the results of AFL (42.9%) and MOPT (41.8%), this also
indicates MUZZ’s other two strategies indeed beneﬁt the
multithreading-relevant seed generation for fuzzing.
USENIX Association
29th USENIX Security Symposium    2337
Table 5: Newly detected vulnerabilities and concurrency-bugs. This summarizes the new vulnerabilities and concurrency-bugs
evaluated in Table 3 and Table 4 over the 11 benchmarks (libvpx-v1.3.0-5589 results are all excluded), and includes one
concurrency-vulnerability in vpxdec-v1.8.0-178 which was mentioned in §6.3.
Bugs
V1
V2
V3
V4
V5
V6
V7
V8
V9
V10
V11
C1
C2
C3-C7
C8-C10
C11-C19
ImageMagick
ImageMagick
ImageMagick
ImageMagick
ImageMagick
x264
libwebp
x265
Project
pbzip2
pbzip2
libvpx-v1.8.0-178
lbzip2
pigz
GraphicsMagick
ImageMagick
x264
Bug Type
Reported Category MUZZ MAFL AFL MOPT
Status
Vm
Vm
Vm
Vm
Vm
Vm
Vs
Vm
Vs
Vs
Vm
Bm
Bm
Bm
Bm
Bm
divide-by-zero
stack-overﬂow
memcpy-param-overlap
buffer-overﬂow
buffer-overﬂow
buffer-overﬂow
negative-size-param
buffer-overﬂow
failed-to-allocate
divide-by-zero
invalid-memory-read
thread-leak
lock-order-inversion
data-race
data-race
data-race













5
3
9













4
3
6













3
2
4













2
2
4
conﬁrmed, not ﬁxed
conﬁrmed, not ﬁxed
CVE-2018-14560
CVE-2019-15141
conﬁrmed, ﬁxed
conﬁrmed, ﬁxed
CVE-2018-14561
conﬁrmed, ﬁxed
conﬁrmed, won’t ﬁx
conﬁrmed, not ﬁxed
CVE-2019-11475
conﬁrmed, not ﬁxed
conﬁrmed, ﬁxed
conﬁrmed, ﬁxed
conﬁrmed, ﬁxed
conﬁrmed, not ﬁxed
b) We turned off schedule-intervention instrumentation in
MUZZ and fuzzed im-cnvt on a different machine. In all
the six fuzzing runs it only detects three concurrency-
vulnerabilities which is less than the result in Table 3
(Nm
v =4). Meanwhile, when the schedule-intervention
instrumentation is re-enabled, MUZZ can still detect four
concurrency-vulnerabilities in that machine.
6.5.3 Time-to-exposure for Concurrency-bug Revealing
In §6.4, we demonstrate P2’s advantage over P1 in terms of
occurrences of concurrency-violations (Nm
e ) and the number
of categorized concurrency-bugs (Nm
B ). Another interesting
metric is the time-to-exposure capability of these two replay
patterns — given the ground truth that the target programs
contain certain concurrency-bugs, the minimal time cost for
each pattern to reveal all the known bugs. This metric can
further distinguish the two replay patterns’ capabilities in
terms of revealing concurrency-bug.
We conducted a case study on gm-cnvt. From Table 4, it
is observable that with both P1 and P2, TSan detected four
concurrency-bugs (Nm
B ) by replaying the MAFL generated
multithreading-relevant seeds (totally 10784) from Table 2;
e results are also similar (P1: 79, P2: 83). We
besides, their Nm
repeated six times against the 10784 seeds by applying P1 and
P2. When a replaying process detects all the four different
ground-truth concurrency-bugs, we record the total execution
time (in minutes). Table 6 shows the results.
In Table 6, compared to P1, we can observe that P2 re-
duces the average time-to-exposure from 66.5 minutes to 34.1
minutes. This fact means, for example, given a tighter replay
time budget (say, 60 minutes), P1 has a high chance to miss
some of the four concurrency-bugs. Moreover, P2 is more
stable since the timing variance is much smaller than that of
Table 6: Time-to-exposure of gm-cnvt’s concurrency-bugs
during six replays with patterns P1 and P2.
#1
55.3
33.4
#2
92.1
52.2
#3
21.8
33.5
#4
93.7
37.6
#5
101.5
24.7
P1
P2
#6 Avg Variance
959.2
91.0
66.5
34.1
34.7
23.3
P1 (91.0 vs. 959.2). This result implicates that, in Table 4, for
the concurrency-bug revealing capability of MAFL, the P2’s
result in gm-cnvt is likely to be much better than P1’s.
The evaluation of time-to-exposure suggests that, given a
set of seeds, P2 is prone to expose concurrency-bugs faster
and more stable. Since P2 is closely relevant to schedule-
intervention instrumentation (§4.4) and repeated execution
(§5.2), this also indicates that these strategies are helpful for
concurrency-bug revealing.
6.5.4 Time Budget During Replaying
We chose two hours (2h) as the time budget in the reply phase
during evaluation. Unlike the fuzzing phase, which aims to
generate new seed ﬁles that exercise multithreading context,
the replay phase runs the target program against existing seeds
(generated during fuzzing). Therefore, the criterion is to 1)
minimize the time for replay; 2) ensure that replay phase tra-
verses all the generated seeds. For projects with less generated
(multithreading-relevant) seeds (e.g., Nmt =126 for pbzip2-c
when applying MUZZ), traversing the seeds (with both P1
and P2) once are quite fast; however for projects with more
generated seeds (e.g., Nmt =13774 for gm-cnvt when applying
MUZZ), this requires more time. To make the evaluation fair,
we use the ﬁxed time budget for all the 12 benchmarks, where
seeds in projects like pbzip2-c will be traversed repeatedly un-
til timeout. During the evaluation, we found 2h to be moderate
2338    29th USENIX Security Symposium
USENIX Association
since it can traverse all the generated multithreading-relevant
seeds at least once for all the projects.
Less time budget, e.g., 1h, may make the replay phase to
miss certain generated seeds triggering concurrency violation
conditions. In fact, from Table 6, we see that time-to-exposure
for the concurrency-bugs may take 101.5 minutes. Meanwhile,
more time budget, e.g., 4h, might be a waste of time for the
exercised 12 benchmarks. In fact, in a case study for gm-cnvt,
when time budget is 4h, despite that Nm
e is nearly doubled,
the number of revealed Bm (i.e., Nm
B ) is still the same as the
results in Table 4, regardless of P1 or P2.
6.5.5 Statistical Evaluation Results
Speciﬁc to the nature of multithreaded programs and our
evaluation strategy to determine seeds’ relevance with mul-
tithreading, we decide not to provide some commonly-used
statistical results [27].
First, it is unfair to track coverage over time when com-
paring MUZZ, MAFL with AFL or MOPT due to the dif-
ferent meanings of “coverage”. In fact, owing to coverage-
oriented instrumentation (in MUZZ) and threading-context
instrumentation (in MUZZ and MAFL), MUZZ and MAFL
cover more execution states (corresponding to Nall), therefore
naturally preserve more seeds. That is also the reason that in
§6.2 the values of Nmt and Nmt
are more important than Nall.
Nall
Second, we cannot compare the multithreading-relevant