title:Don't Forget to Lock the Back Door! A Characterization of IPv6 Network
Security Policy
author:Jakub Czyz and
Matthew J. Luckie and
Mark Allman and
Michael Bailey
Don’t Forget to Lock the Back Door!
A Characterization of IPv6 Network Security Policy
Jakub Czyz∗, Matthew Luckie†, Mark Allman‡, and Michael Bailey§
∗University of Michigan and QuadMetrics, Inc.; PI:EMAIL
†University of Waikato; PI:EMAIL
‡International Computer Science Institute; PI:EMAIL
§University of Illinois at Urbana-Champaign; PI:EMAIL
Abstract—There is growing operational awareness of
the
challenges in securely operating IPv6 networks. Through a
measurement study of 520,000 dual-stack servers and 25,000
dual-stack routers, we examine the extent to which security
policy codiﬁed in IPv4 has also been deployed in IPv6. We
ﬁnd several high-value target applications with a comparatively
open security policy in IPv6 including: (i) SSH, Telnet, SNMP,
are more than twice as open on routers in IPv6 as they are
in IPv4; (ii) nearly half of routers with BGP open were only
open in IPv6; and (iii) in the server dataset, SNMP was twice
as open in IPv6 as in IPv4. We conduct a detailed study
of where port blocking policy is being applied and ﬁnd that
protocol openness discrepancies are consistent within network
boundaries, suggesting a systemic failure in organizations to
deploy consistent security policy. We successfully communicate
our ﬁndings with twelve network operators and all twelve conﬁrm
that the relative openness was unintentional. Ten of the twelve
immediately moved to deploy a congruent IPv6 security policy,
reﬂecting real operational concern. Finally, we revisit the belief
that the security impact of this comparative openness in IPv6 is
mitigated by the infeasibility of IPv6 network-wide scanning—we
ﬁnd that, for both of our datasets, host addressing practices make
discovering these high-value hosts feasible by scanning alone.
To help operators accurately measure their own IPv6 security
posture, we make our probing system publicly available.
I.
INTRODUCTION
Historically, IPv4 has dominated IPv6 in absolute terms,
and security issues arising in IPv6 have seemed no more than
a small-scale annoyance. However, the character and amount
of IPv6 in recent years is changing [17]. For example, Google
reports 8% of its users accessed their services over IPv6 in
mid 2015—a statistic that has doubled in each of the last ﬁve
years [29]. Further, many large networks now report double-
digit IPv6 deployment percentages (e.g., Comcast 39%, ATT
52%, Deutsche Telekom 28%) [6]. Thus, any threat posed by
IPv6 looms large, and, as a community, we should aim to
understand and mitigate such threats as early in the adoption
process at possible.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23047
With IPv6 connectivity come two forms of security issues.
The ﬁrst type are the set of completely new vulnerabilities that
stem from IPv6 protocol changes and features (e.g., [27], [51]).
Part of the problem for vendors and operators alike is that
there are nontrivial technical hurdles to fully supporting IPv6,
especially in policy devices, such as ﬁrewalls and IDSes. For
instance, due to the ﬂexibility of IPv6 header chains and issues
related to fragmentation, simple stateless ﬁrewalls, which may
have sufﬁced for IPv4, are not appropriate in IPv6 [14], [19].
While this issue was addressed in a standards document that
requires the ﬁrst fragment to contain the transport headers [27],
it will likely take time for compatible hardware and practices to
permeate the network. There are a number of such deﬁciencies
or ambiguities in the IPv6 speciﬁcation that may leave dual-
stacked networks vulnerable to emerging attacks via carefully
crafted packets.
In this paper, we tackle the second type of security issue
that results directly from the dual-stack nature of IPv6 adoption.
Quoting IETF IPv6 operational guidance (emphasis is our own):
From an operational security perspective, [dual-stack]
means that you have twice the exposure. One needs
to think about protecting both protocols now. At a
minimum, the IPv6 portion of a dual stacked network
should maintain parity with IPv4 from a security
policy point of view... given the end-to-end connec-
tivity that IPv6 provides, it is also recommended
that hosts be fortiﬁed against threats... There are
many environments which rely too much on the
network infrastructure to disallow malicious trafﬁc to
get access to critical hosts. In new IPv6 deployments it
has been common to see IPv6 trafﬁc enabled but none
of the typical access control mechanisms enabled for
IPv6 device access. With the possibility of network
device conﬁguration mistakes and the growth of IPv6
in the overall Internet, it is important to ensure that
all individual devices are hardened against miscreant
behavior. [15].
Speciﬁcally, we seek to study how well-worn operating system,
protocol, and application weaknesses may be exploitable via
the IPv6 network because security policy that has been codiﬁed
for IPv4, has been neglected in IPv6.
Given the above sketch and standards recommendation, our
expectation is that operators’ intent is parity across IPv4 and
IPv6 security policy in dual-stack settings. While intent is
impossible to derive in the large and there are no doubt cases
where operators intentionally set different security policies for
the two network layer protocols, we believe these are likely
a small minority of the cases. Our contacts with operators,
described in § VII bear this out. Therefore, we assume intended
parity between IPv4 and IPv6 and we test for lack of parity
for various application ports. In this study, we hypothesize
that there will be discrepancies due to several factors: (i) the
lack of a full suite of ancillary tools and software for IPv6;
(ii) less operator experience with IPv6; and (iii) the ability
of IPv6 nodes to auto-conﬁgure without end-user intervention.
More speciﬁcally, we hypothesize that ports are blocked less
frequently when access comes via IPv6 compared with IPv4. In
our experiments, we ﬁnd many cases that bear this out. Mindful
that we may mis-read intent, discrepancies at the very least
point to places with additional attack surface.
We examine ﬁltering policy as it applies to dual-stack
hosts identiﬁed through DNS—those with both IPv4 and IPv6
records. In total, we test ﬁltering policy for 25K dual-stack
routers (11 ports/applications) and 520K dual-stack servers (19
ports/applications). We ﬁnd that:
•
IPv6 is more open than IPv4. A given IPv6 port is
nearly always more open than the same port is in IPv4.
In particular, routers are twice as reachable over IPv6
for SSH, Telnet, SNMP, and BGP. While openness on
IPv6 is not as severe for servers, we still ﬁnd thousands
of hosts open that are only open over IPv6.
•
• When policy variances exist, they tend to exist
network-wide. Our analyses of differences between
IPv4 and IPv6 policy show these policy differences
tend to be consistent within autonomous systems and
routed preﬁxes (e.g., for 78% of routers in the average
preﬁx, their IPv4/IPv6 policy differences are consistent
across the entire routed preﬁx).
Not only does policy differ, but policy mechanism
as well. We classify the type of connectivity failure
through the addition of traceroute measurements and
show that differences exist not only in how policy for
various services are handled, but in how IP protocol
versions are as well (e.g., 9% more routers respond
actively over IPv6 when ports are closed, indicating
fewer policy devices silently dropping than on IPv4).
Existing IPv6 open services are easily discovered
through scanning. Our analysis of host addressing
patterns shows that for a given subnet, most routers
and a quarter of servers could be discoverable within
one second using state of the art port scanners.
•
We attempt to conﬁrm our results by contacting various
network providers and show that the twelve operators we were
able to reach conﬁrmed our results, with ten immediately
making changes to correct the errors. To assist operators in
accurately measuring and assessing their own IPv6 security
posture, we make our scanning tool (sc ﬁlterpolicy) publicly
available [4]. Together, the results point to much work left to
secure IPv6, whose changes and complexity lie far beyond
merely a larger address space.
The remainder of this paper is organized as follows. We
begin with a description of methodology in § II and explore if
our dual-stack identiﬁcation is effective in § III. In § IV we
2
determine whether IPv4 and IPv6 policy differences exist, to
what extent they exist, and whether the differences vary by
application. § V explores if these policy differences are applied
consistently within a network and represent a uniﬁed policy or
likely represent more trivial or piecemeal conﬁguration errors.
In § VI we then discuss what differences between protocol
versions, if any, exist in where and how policy mechanisms are
applied. Next, in § VII we conﬁrm our results by contacting
various network providers and show that the twelve network
operators that we were able to reach conﬁrmed our results.
Finally, in § VIII we revisit the idea that impact of an increased
attack surface is mitigated by the infeasibility of IPv6 network-
wide scanning, discuss related work in § IX, and conclude
in § X.
II. METHODOLOGY
A. Developing Target Lists
To explore potential policy discrepancies between IPv4
and IPv6 we ﬁrst must ﬁnd dual-stack hosts such that we can
measure application reachability (i.e., connection success) to
the same target via the two protocols. As we describe below,
we harvest lists of IP addresses and host names to start the
process. Given a set of hosts, our strategy is to use DNS
names as the basic connective tissue between hostnames, IPv4
addresses, and IPv6 addresses. One reason for this approach is
that “DNS is one of the main anchors in an enterprise [IPv6]
deployment, since most end hosts decide whether or not to use
IPv6 depending on the presence of IPv6 AAAA records...” [14].
Each host Hx in our dataset contains three sets of labels that
N is the set of names, Hx
represent Hx: Hx
4 is a set of IPv4
addresses and Hx
6 is a set of IPv6 addresses. After obtaining
an initial list of hosts (see below) we then detect common
elements across multiple hosts. We compare hosts pair-wise,
as follows:
N) ∪ (Hx
4 ∩ Hy
N ∩ Hy
s = (Hx
(1)
When s (cid:54)= /0 there is overlap between the two hosts and therefore
we replace Hx and Hy with a new Hz that represents the merger
of the two original hosts, as follows:
4 ) ∪ (Hx
6 ∩ Hy
6 )
Hz
N = Hx
Hz
4 = Hx
Hz
6 = Hx
N ∪ Hy
4 ∪ Hy
6 ∪ Hy
4
N
6
(2)
(3)
(4)
Finally, we prune hosts that do not have at least one valid and
routable IPv4 and IPv6 address.
There is a possible concern with using DNS as the
connective tissue. Labels within a group could actually represent
multiple distinct machines, not a single dual-stack machine [12].
As part of our probing we obtain host signatures (e.g., an SSH
host key). In roughly 3% of hosts we detect multiple signatures
across different host labels. We believe this is a strong indication
that our process is predominantly identifying dual-stack hosts,
and we discuss this point further in § III.
There is also a possible issue with using DNS names as
the source of targets for our probes in the ﬁrst place. Because
we start from hosts that have names in DNS (more precisely,
that have associated sets of A, AAAA, and PTR records), we
will naturally exclude hosts without DNS presence or without
complete record sets. We acknowledge that this may bias
our results. However, we believe this bias would result in
an underestimate of the core policy misalignment ﬁnding. First,
without A or AAAA records, server hosts could not be reached
by most clients (except when addresses are directly hard-coded
in applications, which is uncommon). Routers could still be
functional without these records, but ease of management and
conﬁguration dictates that interfaces are often named. Further,
for PTR records, maintaining these is a known best practice [10],
and, in the case of some servers, may be necessary (e.g., for
sending mail [34]). Thus, because maintaining all three record
types is generally a sign of correctly operating an Internet-facing
service interface (i.e., public router or server), we believe results
for these targets will likely produce a lower bound of actual
security policy misalignment in the overall dual-stacked server
and router population, as the larger population will include less
properly-operated hosts.
As we note above, we start the process of identifying dual-
stack hosts using two different lists of hosts, as follows.
Router List: Our ﬁrst focus is on Internet routers, which form
the core of the network, and, hence, correct application of
security measures is crucial. An attacker that can compromise
a router might be able to redirect trafﬁc for man-in-the-middle
attacks, cause a complete or targeted network outage, or adjust
ﬁltering rules on the router that otherwise serve to protect the
network from other attacks. Our router dataset is derived from
router interface IP addresses found in Internet-wide traceroute
data taken by CAIDA’s Ark measurement platform [13]. Each
system in the Ark platform infers the forward IP path with
traceroute measurements to random IPv4 addresses in every
routed /24 preﬁx, as well as to the ﬁrst (::1) and a random
address in every routed IPv6 preﬁx. We extracted the source IP
addresses of ICMP hop-limit responses (intermediate routers)
archived during December 2014 and performed reverse DNS
lookups to obtain names where available. This forms the initial
list of routers, which we then reﬁne using the procedure above.
Server List: Our second list consists of servers, which make
speciﬁc services widely available over the Internet. The security
posture of servers can be of signiﬁcant importance, as servers
can hold private information, infect many clients, and strengthen
botnets. We initialize our list with the Rapid7 DNS ANY
datasets from the scans.io repository [47]. This dataset
represents DNS ANY queries for a set of hostnames gathered
from (i) more than 200 DNS TLD zone ﬁles (including the
popular .com and .net to emerging TLDs such as .farm and
.toys); (ii) reverse DNS names of IPs detected in HTTP scans,
SSL certiﬁcate scans, and IPv4-wide reverse-DNS lookups;
and (iii)  tags in HTTP responses to HTTP scans. We use
the Rapid7 DNS consumer hostname ﬁlter [42] in an attempt
to remove all hostnames that appear to be associated with
static or dynamic customer-premises IPs (e.g., ip-192-168-0-
1.example.com), leaving hostnames that do not appear to be
automatically-generated for consumer Internet endpoints. Due
to the ﬁlter and the provenance of the names and addresses
in the list, the list could include some dual-stacked clients;
however, we believe that these are in the minority. To validate,
we examine what fraction of the IPv4 addresses associated
with each host is part of known consumer network blocks,
using the SpamHaus Policy Block List (PBL) [50]. We ﬁnd