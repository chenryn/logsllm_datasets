half) in the following iterations. However, our graphs are showing only the ﬁrst
iteration of the algorithm and they do not reﬂect this simple optimization.
Comparison with a Cleartext Baseline GraphSC [28] compared their exe-
cution time with GraphLab [25], a state-of-the-art framework for running graph-
parallel algorithms on clear text. They ran Matrix Factorization using gradient
31
202122232425Processors102103Time(Sec)Edges4K20Kdescent with input length of 32K in both frameworks and demonstrated that
GraphSC is about 200K - 500K times slower than GraphLab when run on 2 to
16 processors. Considering our improvements over GraphSC, we estimate our
secure computation to be about 16K-32K times slower than insecure baseline
computation (GraphLab), running the same experiments.
Oblivious Shuﬄe: We use an Oblivious Shuﬄe in our OblivGraph framework,
which has a factor of log(n) less overhead than the Bitonic sort used in GraphSC.
We designed the Oblivious Shuﬄe operation based on the Waksman network
[36]. The cost of shuﬄing is approximately BW(n) using a Waksman network,
where W(n) = n log n − n + 1 is the number of oblivious swaps required to
permute n input elements, and B indicates the size of the elements being shuf-
ﬂed. In the original Waksman switching network, the size of the input, n, is
assumed to be a power of two. However, in order to have an Oblivious Shuﬄe
for arbitrary sized input, we must use an improved version of the Waksman
network proposed in [1] which is called AS-Waksman (Arbitrary-Sized Waks-
man). In our current set of experiments, we have only implemented the original
version of the Waksman network and have not implemented AS-Waksman. We
interpolate precisely to determine the size of arbitrary AS-Waksman when using
arbitrary sized input. Details of this appear in the full version of the paper.
Cost of each operation in OblivGraph framework: In order to understand
how expensive the DumGen and OblivShuﬄe procedures are, as compared to
other GAS model operations, we show the number of AND gates for each of
these procedures in Figure 8. The ﬁgure corresponds to Matrix Factorization
problem, with 2048 users, 128 movies and 20K ratings, with epsilon 0.5. The
cost of a single iteration in the OblivGraph framework is ﬁrst dominated by the
Apply operation which computes the gradient descent and second by Oblivious
Shuﬄe. Figure shows the eﬀect of parallelization on decreasing the circuit size of
each operation. See the full version to compare the cost of DumGen procedure
in diﬀerent protocols.
OblivGraph
GraphSC[28]
# Real Edges
Time(hours)
=0.5
=0.3
=1
1.2M 1.5M 1.8M
2.2
2.4
2.3
1M
13
Table 2: Runtime of a single iteration of OblivGraph vs. GraphSC to solve
matrix factorization problem in scale, with real-world dataset, MovieLens with
6040 users ranked 3883 movies
7 Conclusion and Open Problems
We have established a new tradeoﬀ between privacy and eﬃciency in secure
computation by deﬁning a new security model in which the adversary is pro-
vided some leakage that is proven to preserve diﬀerential privacy. We show that
32
Figure 8: Cost of each operation in OblivGraph for Matrix Factorization
this leakage allows us to construct a more eﬃcient protocol for a broad class of
computations: those that can be computed in graph-parallel frameworks such
as MapReduce. We have evaluated the impact of our relaxation by comparing
the performance of our protocol with the best prior implementation of secure
computation for graph-parallel frameworks.
Our work demonstrates that diﬀerentially private leakage is useful, in that it
provides opportunity for more eﬃcient protocols. The protocol we present has
broad applicability, but we leave open the very interesting question of deter-
mining, more precisely, for which class of computations this leakage might be
help. Graph-parallel algorithms have the property that the access pattern to
memory can be easily reduced to revealing only a histogram of the memory
that is accessed, and histograms are the canonical example in the diﬀerential
privacy literature. Looking at other algorithms will likely introduce very inter-
esting leakage functions that are new to the diﬀerential privacy literature, and
security might not naturally follow from known mechanisms in that space.
References
[1] B. Beauquier and É. Darrot. On arbitrary size waksman networks and their
vulnerability. Parallel Processing Letters, 12(03n04):287–296, 2002.
[2] R. Canetti. Security and composition of multiparty cryptographic proto-
cols. Journal of Cryptology, 13(1):143–202, 2000.
[3] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks
In ACM CCS 2015, pages 668–679, Oct.
against searchable encryption.
2015.
33
202122232425Processors0123456#ANDGates×10816KDumGenShuﬄeGatherApplyScatter[4] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and
M. Steiner. Dynamic searchable encryption in very-large databases: Data
structures and implementation. In NDSS 2014. The Internet Society, Feb.
2014.
[5] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner.
Highly-scalable searchable symmetric encryption with support for Boolean
queries.
In Crypto 2013, Part I, volume 8042 of LNCS, pages 353–373,
Aug. 2013.
[6] T.-H. H. Chan, K.-M. Chung, B. Maggs, and E. Shi. Foundations of
diﬀerentially oblivious algorithms. Cryptology ePrint Archive, Report
2017/1033, 2017. https://eprint.iacr.org/2017/1033.
[7] T.-H. H. Chan, K.-M. Chung, and E. Shi. On the depth of oblivious parallel
RAM. In ASIACRYPT 2017, Part I, LNCS, pages 567–597, Dec. 2017.
[8] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. Multiparty compu-
tation from somewhat homomorphic encryption. In Crypto 2012, volume
7417 of LNCS, pages 643–662, Aug. 2012.
[9] J. Dean and S. Ghemawat. Mapreduce: Simpliﬁed data processing on
large clusters.
In Proceedings of the 6th Conference on Symposium on
Opearting Systems Design & Implementation - Volume 6, OSDI’04, pages
10–10, Berkeley, CA, USA, 2004. USENIX Association.
[10] T. T. A. Dinh, P. Saxena, E.-C. Chang, B. C. Ooi, and C. Zhang. M2r:
Enabling stronger privacy in mapreduce computation.
In 24th USENIX
Security Symposium (USENIX Security 15), pages 447–462, Washington,
D.C., 2015. USENIX Association.
[11] F. B. Durak, T. M. DuBuisson, and D. Cash. What else is revealed by
In ACM CCS 2016, pages 1155–1166, Oct.
order-revealing encryption?
2016.
[12] C. Dwork, K. Kenthapadi, F. McSherry, I. Mironov, and M. Naor. Our
In Euro-
data, ourselves: Privacy via distributed noise generation.
crypt 2006, volume 4004 of LNCS, pages 486–503, May / June 2006.
[13] C. Dwork and A. Roth. The algorithmic foundations of diﬀerential privacy.
Foundations and Trends in Theoretical Computer Science, 9(3-4):211–407,
2014.
[14] Ú. Erlingsson, V. Pihur, and A. Korolova. RAPPOR: Randomized ag-
gregatable privacy-preserving ordinal response. In ACM CCS 2014, pages
1054–1067, Nov. 2014.
[15] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin. Powergraph:
Distributed graph-parallel computation on natural graphs.
In Presented
as part of the 10th USENIX Symposium on Operating Systems Design and
Implementation (OSDI 12), pages 17–30, Hollywood, CA, 2012. USENIX.
34
[16] S. D. Gordon, J. Katz, V. Kolesnikov, F. Krell, T. Malkin, M. Raykova, and
Y. Vahlis. Secure two-party computation in sublinear (amortized) time. In
ACM CCS 2012, pages 513–524, 2012.
[17] F. M. Harper and J. A. Konstan. The movielens datasets: History and
context. ACM Trans. Interact. Intell. Syst., 5(4):19:1–19:19, Dec. 2015.
[18] X. He, A. Machanavajjhala, C. J. Flynn, and D. Srivastava. Composing
diﬀerential privacy and secure computation: A case study on scaling private
record linkage. In ACM CCS 2017, pages 1389–1406, 2017.
[19] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on
searchable encryption: Ramiﬁcation, attack and mitigation. In NDSS 2012.
The Internet Society, Feb. 2012.
[20] S. Kamara and T. Moataz. Boolean searchable symmetric encryption with
worst-case sub-linear complexity. In J. Coron and J. B. Nielsen, editors,
Advances in Cryptology - EUROCRYPT 2017 - 36th Annual International
Conference on the Theory and Applications of Cryptographic Techniques,
Paris, France, April 30 - May 4, 2017, Proceedings, Part III, volume 10212
of Lecture Notes in Computer Science, pages 94–124, 2017.
[21] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill. Generic attacks on secure
outsourced databases. In ACM CCS 2016, pages 1329–1340, Oct. 2016.
[22] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill. Accessing data while pre-
serving privacy. https://www.youtube.com/watch?v=u9LIU4Frce8, 2017.
Communication with the authors.
[23] B. Kreuter. Secure multiparty computation at google. https://www.
youtube.com/watch?v=ee7oRsDnNNc, 2017. Real World Crypto.
[24] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi. ObliVM: A pro-
gramming framework for secure computation. In 2015 IEEE Symposium
on Security & Privacy, pages 359–376, 2015.
[25] Y. Low, J. E. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. M.
Hellerstein. Graphlab: A new framework for parallel machine learning.
CoRR, abs/1408.2041, 2014.
[26] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser,
and G. Czajkowski. Pregel: A system for large-scale graph processing.
In Proceedings of the 2010 ACM SIGMOD International Conference on
Management of Data, SIGMOD ’10, pages 135–146, New York, NY, USA,
2010. ACM.
[27] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks on property-
preserving encrypted databases. In ACM CCS 2015, pages 644–655, Oct.
2015.
35
[28] K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg, N. Taft, and E. Shi.
GraphSC: Parallel secure computation made easy. In 2015 IEEE Sympo-
sium on Security & Privacy, pages 377–394, May 2015.
[29] V. Nikolaenko, S. Ioannidis, U. Weinsberg, M. Joye, N. Taft, and D. Boneh.
Privacy-preserving matrix factorization. In ACM CCS 2013, pages 801–812,
Nov. 2013.
[30] O. Ohrimenko, M. Costa, C. Fournet, C. Gkantsidis, M. Kohlweiss, and
D. Sharma. Observing and preventing leakage in mapreduce. In Proceedings
of the 22Nd ACM SIGSAC Conference on Computer and Communications
Security, CCS ’15, pages 1570–1581, New York, NY, USA, 2015. ACM.
[31] R. Ostrovsky and V. Shoup. Private information storage. In 29th ACM
STOC, pages 294–303, 1997.
[32] A. Papadimitriou, A. Narayan, and A. Haeberlen. Dstress: Eﬃcient diﬀer-
entially private computations on distributed data. In G. Alonso, R. Bian-
chini, and M. Vukolic, editors, Proceedings of the Twelfth European Confer-
ence on Computer Systems, EuroSys 2017, Belgrade, Serbia, April 23-26,
2017, pages 560–574. ACM, 2017.
[33] V. Pappas, F. Krell, B. Vo, V. Kolesnikov, T. Malkin, S. G. Choi,
W. George, A. D. Keromytis, and S. Bellovin. Blind seer: A scalable
private DBMS. In 2014 IEEE Symposium on Security & Privacy, pages
359–374, May 2014.
[34] I. Roy, S. T. V. Setty, A. Kilzer, V. Shmatikov, and E. Witchel. Airavat:
Security and privacy for mapreduce.
In Proceedings of the 7th USENIX
Conference on Networked Systems Design and Implementation, NSDI’10,
pages 20–20, Berkeley, CA, USA, 2010. USENIX Association.
[35] S. Wagh, P. Cuﬀ, and P. Mittal. Root ORAM: A tunable diﬀerentially
private oblivious RAM. CoRR, abs/1601.03378, 2016.
[36] A. Waksman. A permutation network. Journal of the ACM (JACM),
15(1):159–163, 1968.
[37] X. Wang, S. Ranellucci, and J. Katz. Authenticated garbling and eﬃcient
maliciously secure two-party computation. In Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security, CCS ’17,
pages 21–37, New York, NY, USA, 2017. ACM.
[38] X. S. Wang, Y. Huang, T.-H. H. Chan, A. Shelat, and E. Shi. SCORAM:
Oblivious RAM for secure computation. In ACM CCS 2014, pages 191–202,
2014.
[39] R. Wyden.
Letter
to
cymaking.
B10146F5-EDEB-4A2C-AD5E-812B363EE0DC&download=1,
Senate.
poli-
https://www.wyden.senate.gov/download/?id=
U.S.
commission
on
evidence-based
2017.
36
[40] S. Zahur and D. Evans. Obliv-c: A language for extensible data-oblivious
computation. Cryptology ePrint Archive, Report 2015/1153, 2015. http:
//eprint.iacr.org/2015/1153.
[41] S. Zahur, X. S. Wang, M. Raykova, A. Gascón, J. Doerner, D. Evans, and
J. Katz. Revisiting square-root ORAM: Eﬃcient random access in multi-
party computation. In 2016 IEEE Symposium on Security & Privacy, pages
218–234, 2016.
37