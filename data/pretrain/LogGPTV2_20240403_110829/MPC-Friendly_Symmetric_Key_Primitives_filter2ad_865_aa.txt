# MPC-Friendly Symmetric Key Primitives

**Authors:**
- Lorenzo Grassi, Graz University of Technology
- Christian Rechberger, Graz University of Technology
- Dragos Rotaru, Dept. of Comp. Sci., University of Bristol
- Peter Scholl, Dept. of Comp. Sci., University of Bristol
- Nigel P. Smart, Dept. of Comp. Sci., University of Bristol

## Abstract
We discuss the design of symmetric primitives, particularly Pseudo-Random Functions (PRFs), suitable for use in a secret-sharing-based Multi-Party Computation (MPC) system. We consider three different PRFs: the Naor-Reingold PRF, a PRF based on the Legendre symbol, and a specialized block cipher design called MiMC. We present protocols for implementing these PRFs within a secret-sharing-based MPC system and discuss potential applications. We then compare the performance of our protocols. Depending on the application, different PRFs may offer different optimizations and advantages over the classic AES benchmark. Therefore, we conclude that there is no single optimal PRF for all situations.

## 1. Introduction
Secure multi-party computation (MPC) allows a set of parties to jointly evaluate a function on private inputs, with the guarantee that no party can learn anything more than the output of the function. Over the past decade, MPC has transitioned from a theoretical pursuit to a practical field, as protocols have become more efficient and numerous implementations have been developed.

For many years, the de facto benchmark for MPC systems has been the secure computation of the AES function [41, 23, 24, 39, 35]. Although AES was originally chosen as a testbed for comparing protocols, it has often been justified as "useful" for applications requiring the evaluation of a symmetric encryption scheme or PRF with a secret-shared key. However, there is no particular reason why AES should be the best choice for MPC compared to other PRFs or symmetric ciphers. In fact, we argue that AES is, in many ways, an unnatural choice for PRF evaluation in MPC applications.

In this work, we conduct a study of some PRFs for use in MPC, including new protocols for evaluating number-theoretic PRFs and the implementation of "traditional" block cipher candidates designed to have low complexity in MPC.

### 1.1 Main Motivating Applications
Before proceeding, we outline some applications we have in mind. Our focus is on secret sharing-based MPC systems such as BDOZ [7], SPDZ [26, 25], and VIFF [22], or any classical protocol based on Shamir Secret Sharing. In such systems, data is often shared as elements of a finite field \( \mathbb{F}_p \) of large prime characteristic. Using this representation, one can efficiently compute relatively complex functions such as integer comparison [21], fixed-point arithmetic [17], and linear programming [16]. The most famous high-level protocol in this context is the one needed to compute the output of an auction [8].

Given such applications, evaluated by an MPC "engine," the question arises as to how to securely input and output data. Traditionally, data is entered by the computing parties, and the output is delivered to the computing parties. However, in practice, input and output may need to be securely delivered/received by third parties. Additionally, in a long-term reactive functionality, intermediate secure data may need to be stored in a database or other storage device.

For long-term storage of data, which is stored by the MPC engine only to be used again at a later date, the trivial way to store such shared data is for each party to encrypt their share with a symmetric key and then store each encrypted share. This incurs an N-fold increase in storage at the database end (for N MPC servers), which may be prohibitive. A similar trivial solution also applies for data input and output, except data input is now performed using N public keys (one for each MPC server), and output is performed by each server producing a public key encryption of its share to the recipient's public key.

A more efficient solution would be to use a direct evaluation of a symmetric key primitive within the MPC engine. Such a symmetric key primitive should be able to be efficiently evaluated by the MPC engine. We call such a symmetric key primitive "MPC-Friendly." Given that almost all symmetric key primitives can be constructed easily from Pseudo-Random Functions (PRFs), the goal is to produce an MPC-Friendly PRF.

The main problem with using "traditional" PRFs such as AES is that these are built for computational engines that work over data types that do not easily match the operations possible in the MPC engine. For example, AES is very much a byte/word-oriented cipher, which is hard to represent using arithmetic in \( \mathbb{F}_p \). Thus, we are led to a whole new area of PRF design, with very different efficiency metrics compared to traditional PRF design.

### 1.2 Secondary Applications
A simple example application of MPC is to enable distributed secure storage of long-term cryptographic keys by secret-sharing the key and storing each share at a separate server. When the key is required by an application such as encryption or authentication, the MPC protocol is used to compute this functionality. If this cryptographic functionality is a symmetric cipher, then this application would be greatly enhanced by using an "MPC-Friendly" symmetric primitive.

Using traditional symmetric cryptographic primitives directly on shared data can also improve efficiency for some applications. For example, Laur et al. [33] used an oblivious AES implementation to perform a secure join operation on a secret-shared database. After obliviously shuffling the database, the (deterministic) AES encryptions are made public to all parties, so that the join can then be performed efficiently using standard database algorithms.

Lu and Ostrovsky [36] presented a distributed oblivious RAM protocol, which achieves only \( O(\log N) \) overhead, better than any ORAM scheme in the non-distributed setting. This protocol could be combined with a secret-shared MPC system to provide a mechanism to allow secure computation of RAM programs. However, the ORAM construction of [36] makes heavy use of a PRF, so such an application would require the use of an MPC-Friendly PRF.

For other operational reasons, it may be useful to encrypt data using a special form of encryption such as deterministic encryption, searchable symmetric encryption (SSE), or (leaky) order-revealing encryption (ORE) [9, 10, 18, 6, 14], under a secret-shared key. These algorithms can enable efficient queries on the encrypted data, while the query results can then be decrypted into shares for more complex processing using MPC. For transmission across the wire, to (or from) an external application, a form of Authenticated Encryption (AE) is needed. We note that all of these symmetric primitives (SSE, ORE, AE, etc.) can be built, in generic ways, out of a PRF. Thus, the main obstacle preventing such applications is an efficient MPC-Friendly PRF.

### 1.3 Related Work
Surprisingly, there has been little direct work on this problem, despite the recent plethora of proposed MPC applications. The only paper we know of that explicitly designs PRFs for use in MPC is [4], which we will discuss below. The three lines of work most related to the work in this paper, apart from repurposing designs from elsewhere, are:

- Low complexity, "lightweight" ciphers for use in IoT and other constrained environments.
- Block and stream ciphers suited to evaluation by a Fully Homomorphic/Somewhat Homomorphic encryption scheme (SHE-Friendly ciphers).
- Designs for use in SNARKs.

#### Low Complexity Lightweight Ciphers
Block ciphers often iterate a relatively simple round function a number of times to achieve security goals. Most early designs in this domain focused on small area when implemented as a circuit in hardware. Large depth (via a large number of rounds) is of no concern in hardware, as it simply means clocking a circuit that implements a single round more times. Notable exceptions are mCrypton [34] and Noekeon [19], which also feature a relatively low depth. The more recent trend to emphasize low latency (with designs like PRINCE [11]) fits much better with our requirement of having low-depth. A property of all these designs is that they lend themselves well to implementations where binary NAND gates, XOR gates, or multiplexers are the basic building blocks in the used libraries. As explained above, the majority of secret sharing-based MPC applications require description via \( \mathbb{F}_p \). While bit operations are possible over \( \mathbb{F}_p \) using standard tricks (which turn XOR into a non-linear operation), applying such ciphers would require the \( \mathbb{F}_p \) data types to be split into a shared bit representation over \( \mathbb{F}_p \) to apply the cipher. Such a conversion is expensive.

#### SHE-Friendly Ciphers
Perhaps due to the recent theoretical interest in SHE/FHE schemes, this area has had more attention than the more practical issues addressed in this paper. The motivating scenario for a SHE-Friendly cipher is to enable data to be securely passed to a cloud environment, using a standard encryption scheme, which the cloud server then homomorphically decrypts to obtain a homomorphic encryption of the original data.

This line of work has resulted in a handful of designs. A block cipher called LowMC [4], a stream cipher called Kreyvium [13] (based on the Trivium stream cipher), and FLIP [37] (based on a filter permutation). The block cipher LowMC is designed for both MPC and FHE implementation but does not meet the MPC design goals we have set. It does indeed have low depth, but it is a cipher based on operations in characteristic two. The two SHE-friendly stream cipher designs of Kreyvium and FLIP also suffer from the same problem as the lightweight designs described above, as they are also bit-oriented.

#### SNARK-Friendly Constructions
Being SNARK-friendly means that the number of constraints is low. This generally favors larger data types like \( \mathbb{F}_p \) or \( \mathbb{F}_{2^n} \), and the depth of the circuit is of no concern. MiMC [2] was originally designed for this use case and seems to be the only one in this area. As the depth is not too high either, we choose it for detailed evaluation.

### 1.4 Contributions
The goal of this work is to investigate the efficient evaluation of PRFs in a secret-sharing-based MPC setting. We present new protocols for secure computation of PRFs and implementation results using an actively secure MPC protocol, which tolerates up to \( N-1 \) out of \( N \) corrupted parties (with an online phase based on the SPDZ protocol [26, 25]).

To fix notation, we will consider a PRF of the following form:
\[ F : (\mathbb{F}_p)^{\ell} \times (\mathbb{F}_q)^n \rightarrow (\mathbb{F}_r)^m \]
where
\[ (k_1, \ldots, k_{\ell}, x_1, \ldots, x_n) \mapsto F_k(x_1, \ldots, x_n). \]

The various finite fields \( \mathbb{F}_p \), \( \mathbb{F}_q \), and \( \mathbb{F}_r \) may be distinct. Our MPC engine is assumed to work over the finite field \( \mathbb{F}_p \), as we always assume the key to the PRF will be a secret shared value. As a benchmark, we compare all of our candidates to the baseline AES example used in prior work and to implementations of the given PRFs on clear data.

Depending on the precise application, there are several distinct design criteria we may want to consider. Thus, there will not be a one-size-fits-all PRF that works in all applications. We then have various potential cases:

- In some applications, the input is public, and we need to embed the public elements \( x_1, \ldots, x_n \in \mathbb{F}_q \) into \( \mathbb{F}_p \). However, the more general case is when the input is secret shared itself, and we have \( \mathbb{F}_q = \mathbb{F}_p \).
- In some applications, the output of the PRF will be public, and thus \( \mathbb{F}_r \) can be any field. In other applications, we also want the output to be secret shared, so we can use it in some other processing such as a mode of operation. In this latter case, we will have \( \mathbb{F}_r = \mathbb{F}_p \). Additionally, some applications, such as when using the (leaky) ORE scheme presented in [18], require PRF outputs in \( \{0, 1, 2\} \), and we may (or may not) require these to be secret shared (and hence embedded in \( \mathbb{F}_p \)).
- In some applications, we would like a PRF that is just efficient in the MPC engine, and we do not care whether the equivalent standard PRF is efficient or not. In other applications, we also require that the standard PRF is also efficient. For example, when an external third party is encrypting data for the MPC engine to decrypt.

In this paper, we consider four candidate PRFs for use in MPC systems, as well as the comparison case of AES. Two of these are number-theoretic in nature (the Naor-Reingold PRF, based on DDH, and a PRF based on the Legendre symbol), while MiMC [2] and LowMC [4] are more akin to traditional symmetric block cipher constructions.