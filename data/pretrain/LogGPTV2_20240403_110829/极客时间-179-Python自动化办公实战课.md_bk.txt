# 新的文件名            new_path = os.path.join(file_path, str(new_name)+".JPG")                       
# 重命名            os.rename(old_path, new_path)            
# 文件名数字加1            new_name = int(new_name)+1    
# 显示改名后的结果    print(os.listdir(file_path))这段代码会把\"/Users/user1/Desktop/pic\"目录中"jpg"扩展名的文件进行重命名，把它们分别命名为"1.jpg"，"2.jpg"，"3.jpg"，以此类推。那批量改名的这三个操作具体是怎么实现的呢？其实是通过 os库中的三个函数来实现的，分别是 listdir()、path.join()、rename()。这是你在这节课要掌握的重点，我也会着重讲解。第一个是 **listdir()函数**，它的功能是**打印指定目录下的文件名称。如果再**给这个函数指定一个参数 file_path，那么它会把 file_path中的所有文件名称以一个列表的类型返回。使用列表类型方便后续迭代，便于进行单个文件改名。为了只对".jpg"扩展名的文件改名，我使用了 endswith()函数对列表进一步筛选，过滤掉不需要改名的文件。第二个是 **path.join()函数**，它可以连接路径和文件名，从而得到一个带有完整路径的文件名称格式。这里我要给你着重强调一下，改名操作必须要指定文件正确的路径，因此改名前必须要进行路径和文件名的连接。最后是改名函数 **rename() 函数**，它的两个参数分别为改名前文件的路径 +文件名和改名后文件的路径 + 文件名，均为 path.join()函数处理过的完整文件名称。通过 rename()函数改名后，文件名称会自动变为新的文件名称。将上面三个操作放入 for循环语句中，就能实现批量重命名的功能。这一段代码虽然功能正常，但是继续增加新功能时，必然要再增加新的代码，如果只是按照执行的前后顺序把**多个不同功能的代码**写入一个文件，它的可读性会变差，别人阅读你写的代码就会有障碍。就像我们从超市购买的各类商品一样，你一定会把调料放在厨房、把鸡蛋放在冰箱、把袜子放在衣柜，对商品分门别类放置，绝不会按照购买的时间顺序摆放在你的房间中。同理，代码的摆放位置，也不应该按照执行顺序依次存放。正确的做法是，你要把每一组功能相同或相近的代码写入到一个函数中，并把该功能中经常变动的部分作为函数的参数，乃至整个脚本的参数，这样才能给有多个功能的脚本带来更好的阅读体验。代码的整洁程度高，也为你排除代码的故障带来更高的效率。那么接下来，我就教你怎么重构批量改名脚本，提高代码的可读性。重构程序首先，我来带你学习一下什么是重构代码，以及怎么重构代码。重构代码是指在代码可以正常实现的前提下，为了提高它的可维护性，需要对代码的结构进一步调整。就像你需要定期收拾房间一样，代码也需要进行维护。特别是经常修改和添加新的功能的代码，它的逻辑结构会像你炒菜之后的厨房一样，越来越混乱，为了代码和代码之间的逻辑关系更清晰，你需要掌握如何调整代码的结构。我来给你举个例子，比如我在批量改名的程序中又增加了新的需求，要求将改名的路径和扩展名从变量赋值改为从命令行参数赋值。这样就不用进入到脚本中修改代码了。根据这个新的需求，你会发现，当前的代码有 3个地方需要调整。第一个是**代码的结构层次**需要调整。当前的代码只包含了一个批量改名的功能，当你再为代码增加命令行参数处理功能时，新的代码和当前代码放在一起，会破坏改名功能的完整性，这时候，你就可以把每个功能单独放在一个函数中，通过函数来让一个功能和另一个功能代码相互独立。第二个是**代码开始执行的位置需要调整。**由于函数定义的代码块会在函数调用以后才运行，但是根据Python的语法，你必须将函数定义写在函数调用的上方，这就导致了代码开始执行的位置出现在文件的中间和结尾。所以我需要一个更明显的标记，告诉阅读代码的人，从该位置开始阅读代码，该位置才是代码执行的第一条语句，而不是让阅读的人从代码文件开头一行以后的找程序的入口。第三个是**命令行参数的处理需要调整。**由于 Python默认是不去处理命令行的参数的，因此我们需要增加一个专门处理命令行参数的函数，来读取用户输入的正确参数，而对错误的参数，则需要提示用户。这三个地方的调整，我会依次采用函数、内置变量和命令行参数来实现对代码的重构，我来依次带你看一下优化的具体代码。封装到函数为了让代码结构逻辑更加工整，我把每一个独立的功能都放入到单独的函数中。每个函数组成的语句块，就像自然段一样，将一整篇文章，按照功能进行了划分。由于当前的代码只有批量改名这一个功能，所以我就把改名功能的所有代码都放到一个函数当中。封装函数的时候，一个是要考虑功能的完整性，另一个要考虑函数用到的其他变量如何与它进行交互。调用函数时使用参数，就是函数和其他变量交互最好的办法。对于批量改名这一功能，主要交互的对象有两个，它们是批量改名的路径，以及要修改的文件扩展名。所以我就把这两个对象作为改名函数rename() 函数的参数，rename()函数得到这两个参数后，会按照函数的定义，把这两个参数传入 rename()函数中实现改名的逻辑，对文件进行批量改名。封装之后的核心代码如下：    def rename(file_path, old_ext):      