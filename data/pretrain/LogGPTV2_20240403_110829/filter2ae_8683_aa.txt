一个两字节patch导致的off-by-one，最终造成类型混淆，执行shellcode。  
编译了一个`d8`程序用于验证和利用漏洞，相关附件[下载](https://github.com/ret2p4nda/browser-pwn/tree/master/growupjs)
## CheckBound优化流程
首先在原有的`simplified-lowering`阶段，`CheckBound`节点并不被消除，而是设置为`kAbortOnOutOfBounds`模式，并替换为`CheckedUint32Bounds`。
    void VisitCheckBounds(Node* node, SimplifiedLowering* lowering) {
        CheckParameters const& p = CheckParametersOf(node->op());
        Type const index_type = TypeOf(node->InputAt(0));
        Type const length_type = TypeOf(node->InputAt(1));
        if (length_type.Is(Type::Unsigned31())) {
          if (index_type.Is(Type::Integral32OrMinusZero())) {
            // Map -0 to 0, and the values in the [-2^31,-1] range to the
            // [2^31,2^32-1] range, which will be considered out-of-bounds
            // as well, because the {length_type} is limited to Unsigned31.
            VisitBinop(node, UseInfo::TruncatingWord32(),
                       MachineRepresentation::kWord32);
            if (lower()) {
              CheckBoundsParameters::Mode mode =
                  CheckBoundsParameters::kDeoptOnOutOfBounds;
              if (lowering->poisoning_level_ ==
                      PoisoningMitigationLevel::kDontPoison &&
                  (index_type.IsNone() || length_type.IsNone() ||
                   (index_type.Min() >= 0.0 &&
                    index_type.Max() CheckedUint32Bounds(p.feedback(), mode));
            }
          }
而在此之前，该位置如下，可见原先利用节点消除的漏洞利用方法不能使用了。
    if (lower()) {
              if (lowering->poisoning_level_ ==
                      PoisoningMitigationLevel::kDontPoison &&
                  (index_type.IsNone() || length_type.IsNone() ||
                   (index_type.Min() >= 0.0 &&
                    index_type.Max() InputAt(0));
              } else {
                NodeProperties::ChangeOp(
                    node, simplified()->CheckedUint32Bounds(p.feedback()));
              }
            }
在`Effect
linearization`阶段，`CheckedUint32Bounds`节点会被优化成`Uint32LessThan`，并绑定上其`True`和`False`分支。
    Node* EffectControlLinearizer::LowerCheckedUint32Bounds(Node* node,
                                                            Node* frame_state) {
      Node* index = node->InputAt(0);
      Node* limit = node->InputAt(1);
      const CheckBoundsParameters& params = CheckBoundsParametersOf(node->op());
      Node* check = __ Uint32LessThan(index, limit);
      switch (params.mode()) {
        case CheckBoundsParameters::kDeoptOnOutOfBounds:
          __ DeoptimizeIfNot(DeoptimizeReason::kOutOfBounds,
                             params.check_parameters().feedback(), check,
                             frame_state, IsSafetyCheck::kCriticalSafetyCheck);
          break;
        case CheckBoundsParameters::kAbortOnOutOfBounds: {
          auto if_abort = __ MakeDeferredLabel();
          auto done = __ MakeLabel();
          __ Branch(check, &done, &if_abort);
          __ Bind(&if_abort);
          __ Unreachable();
          __ Goto(&done);
          __ Bind(&done);
          break;
        }
      }
      return index;
    }
而在`lateoptimize`阶段，将其优化为左值opcode()) {
    // [...]
        case IrOpcode::kUint32LessThan: {
          Uint32BinopMatcher m(node);
          if (m.left().Is(kMaxUInt32)) return ReplaceBool(false);  // M  false
          if (m.right().Is(0)) return ReplaceBool(false);          // x  false
          if (m.IsFoldable()) {                                    // K  K
            return ReplaceBool(m.left().Value()  false
          if (m.left().IsWord32Sar() && m.right().HasValue()) {
            Int32BinopMatcher mleft(m.left().node());
            if (mleft.right().HasValue()) {
              // (x >> K)  x > K)
              const uint32_t c = m.right().Value();
              const uint32_t k = mleft.right().Value() & 0x1F;
              if (c (kMaxInt >> k)) {
                node->ReplaceInput(0, mleft.left().node());
                node->ReplaceInput(1, Uint32Constant(c  {
      let arr = [1,2,3,4];
      index = 4;
      return arr[index];
    };
    for (var i = 0; i graph(),
                                   &data->info()->tick_counter(),
                                   data->jsgraph()->Dead());
        BranchElimination branch_condition_elimination(&graph_reducer,
                                                       data->jsgraph(), temp_zone);
        DeadCodeElimination dead_code_elimination(&graph_reducer, data->graph(),
                                                  data->common(), temp_zone);
        RedundancyElimination redundancy_elimination(&graph_reducer, temp_zone);
        LoadElimination load_elimination(&graph_reducer, data->jsgraph(),
                                         temp_zone);
        CheckpointElimination checkpoint_elimination(&graph_reducer);
        ValueNumberingReducer value_numbering(temp_zone, data->graph()->zone());
        CommonOperatorReducer common_reducer(&graph_reducer, data->graph(),
                                             data->broker(), data->common(),
                                             data->machine(), temp_zone);
        TypedOptimization typed_optimization(&graph_reducer, data->dependencies(),
                                             data->jsgraph(), data->broker());
        ConstantFoldingReducer constant_folding_reducer(
            &graph_reducer, data->jsgraph(), data->broker());
        TypeNarrowingReducer type_narrowing_reducer(&graph_reducer, data->jsgraph(),
                                                    data->broker());
        AddReducer(data, &graph_reducer, &branch_condition_elimination);
        AddReducer(data, &graph_reducer, &dead_code_elimination);
        AddReducer(data, &graph_reducer, &redundancy_elimination);
        AddReducer(data, &graph_reducer, &load_elimination);
        AddReducer(data, &graph_reducer, &type_narrowing_reducer);
        AddReducer(data, &graph_reducer, &constant_folding_reducer);
        AddReducer(data, &graph_reducer, &typed_optimization);
        AddReducer(data, &graph_reducer, &checkpoint_elimination);
        AddReducer(data, &graph_reducer, &common_reducer);
        AddReducer(data, &graph_reducer, &value_numbering);
        graph_reducer.ReduceGraph();
      }
而在`graph_reducer.ReduceGraph`中将分别对每个节点调用上述添加的10个`*::Reduce()`方法。
    Reduction GraphReducer::Reduce(Node* const node) {
      auto skip = reducers_.end();
      for (auto i = reducers_.begin(); i != reducers_.end();) {
        if (i != skip) {
          tick_counter_->DoTick();
          Reduction reduction = (*i)->Reduce(node);
          if (!reduction.Changed()) {
            // No change from this reducer.
          } else if (reduction.replacement() == node) {
            // {replacement} == {node} represents an in-place reduction. Rerun
            // all the other reducers for this node, as now there may be more
            // opportunities for reduction.
            if (FLAG_trace_turbo_reduction) {
              StdoutStream{} reducer_name() reducer_name() ] by reducer ConstantFoldingReducer
    - In-place update of 45: Branch[True|CriticalSafetyCheck](55, 12) by reducer BranchElimination
    - Replacement of 45: Branch[True|CriticalSafetyCheck](55, 12) with 70: Dead by reducer CommonOperatorReducer
    - Replacement of 47: LoadElement[tagged base, 16, Signed32, kRepTaggedSigned|kTypeInt32, FullWriteBarrier](59, 43, 43, 70) with 70: Dead by reducer DeadCodeElimination
首先跟踪`TypeNarrowingReducer`，可以看到当`opcode`是`kNumberLessThan`时，如果左节点的最小值大于右节点的最大值时，类型会被`op_typer_.singleton_false();`，是一个`HeapConstant`
    Reduction TypeNarrowingReducer::Reduce(Node* node) {
      DisallowHeapAccess no_heap_access;
      Type new_type = Type::Any();
      switch (node->opcode()) {
        case IrOpcode::kNumberLessThan: {
          // TODO(turbofan) Reuse the logic from typer.cc (by integrating relational
          // comparisons with the operation typer).
          Type left_type = NodeProperties::GetType(node->InputAt(0));
          Type right_type = NodeProperties::GetType(node->InputAt(1));
          if (left_type.Is(Type::PlainNumber()) &&
              right_type.Is(Type::PlainNumber())) {
            if (left_type.Max() = right_type.Max()) {
              new_type = op_typer_.singleton_false();
            }
          }
          break;
        }
     //[...]         
      Type original_type = NodeProperties::GetType(node);
      Type restricted = Type::Intersect(new_type, original_type, zone());
      if (!original_type.Is(restricted)) {
        NodeProperties::SetType(node, restricted);
        return Changed(node);
      }
      return NoChange();
    }
从日志中可以发现其左节点是`43`，从`IR`可以发现其范围是`[4,4]`，右节点是`16` ，是一个常量值[4]
    - Replacement of 41: LoadField[tagged base, 24, Range(0, 134217726), kRepTaggedSigned|kTypeInt32, NoWriteBarrier, mutable](68, 17, 12) with 16: NumberConstant[4] by reducer LoadElimination
因此，在`ConstantFoldingReducer::Reduce`中，`44`节点将被生成的一个`HeapConstant`节点替代。
    Reduction ConstantFoldingReducer::Reduce(Node* node) {