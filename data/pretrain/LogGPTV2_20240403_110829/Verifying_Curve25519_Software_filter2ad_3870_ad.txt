.
=⇒ Q64prod
Then |= (|Q64xy eqns|) P 64M ; P 64R (|Q64prod ∧ Q64r bds|).
Note that the Hoare triples in the proposition do not estab-
lish Q64prod directly. Indeed, we need to show
Q64mult ∧ Q64s(cid:48) red ∧ Q64s(cid:48) bds∧
Q64s(cid:48)(cid:48) red ∧ Q64s(cid:48)(cid:48) bds ∧ Q64r red ∧ Q64r bds
in the proof of Proposition 1. Observe that the statement
involves modular operations in the bit-vector theory. Al-
though the statement is expressible in a quantiﬁer-free for-
mula in the theory of bit-vectors, the SMT solver Boolec-
tor could not verify it. We therefore use the proof assistant
Coq to formally prove the statement. With simple facts
about modular arithmetic such as 38 ≡ 2256 (mod p), our
formal Coq proof needs less than 800 lines.
Fp multiplication in radix-251
5.2
Let P 51 denote the qhasm fragment for Fp multiplication
in radix-251 representation. The inputs X = x0 + 251x1 +
2102x2 + 2153x3 + 2204x4, Y = y0 + 251y1 + 2102y2 + 2153y3 +
2204y4, and outcome R = r0 +251r1 +2102r2 +2153r3 +2204r4
are stored in memory pointed to by the qhasm variables xp,
yp, and rp respectively. We thus introduce logical variables
xi, yi, and ri to memorize the values of the qhasm expres-
sions *(uint64 *)(xp + 8i), *(uint64 *)(yp + 8i), and
*(uint64 *)(rp + 8i) respectively for every i ∈ [0, 4].
The formulas Q51xy eqns , Q51r eqns , Q51prod are deﬁned
similarly as in the radix-264 representation. The formulas
Q51xy bds and Q51r bds specify that the inputs and outcome
are in the radix-251 representation.
4(cid:86)
4(cid:86)
i=0
i=0
i=0
0 ≤ yi < 251
0 ≤ ri < 251
0 ≤ xi < 251 ∧ 4(cid:86)
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12) Q51r eqns ∧ Q51r bds∧
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
In the top-level Hoare triple
(|Q51xy eqns ∧ Q51xy bds|) P 51
,
the precondition Q51xy eqns ∧ Q51xy bds assumes that the in-
puts X and Y are in the radix-251 representation. The post-
condition Q51r eqns ∧ Q51r bds ∧ Q51prod speciﬁes that the
Q51prod
Q51xy bds
:=
Q51r bds
:=
305outcome is the product of X and Y in the radix-251 rep-
resentation. The top-level Hoare triple hence speciﬁes that
the qhasm fragment P 51 is Fp multiplication in the radix-251
representation.
Similar to the case in the radix-264 representation, the
top-level Hoare triple should be decomposed before veriﬁca-
tion. Recall that Fp multiplication in the radix-251 repre-
sentation has two phases: multiply-and-reduce and delayed
carry (Sec. 3.2). We therefore verify each phase separately.
Let P 51M R and P 51D denote the qhasm fragment for
multiply-and-reduce and delayed carry respectively. In the
multiply-and-reduce phase, the qhasm fragment P 51M R com-
putes si’s in (2). Since each si has 128 signiﬁcant bits,
P 51M R actually stores each si in a pair of 64-bit qhasm vari-
ables sil and sih. We will use the qhasm expression u.v to
denote u × 264 + v. Deﬁne
Q51s eqns
:=
Q51mult red
:=
si
128= sih.sil
Q51si
4(cid:86)
4(cid:86)
i=0
i=0
where
Q51s0
Q51s1
Q51s2
Q51s3
Q51s4
:= s0
:= s1
:= s2
:= s3
:= s4
128= (x0y0 + 19(x1y4 + x2y3 + x3y2 + x4y1))
128= (x0y1 + x1y0 + 19(x2y4 + x3y3 + x4y2))
128= (x0y2 + x1y1 + x2y0 + 19(x3y4 + x4y3))
128= (x0y3 + x1y2 + x2y1 + x3y0 + 19x4y4)
128= (x0y4 + x1y3 + x2y2 + x3y1 + x4y0) .
Q51s eqns states that the logical variable si is equal to the
qhasm expression sih.sil for every i ∈ [0, 4]. Q51mult red
speciﬁes that si are computed correctly for every i ∈ [0, 4].
Nonetheless, we ﬁnd the condition Q51mult red is too weak to
prove the correctness of the multiply-and-reduce phase. If
sih.sil indeed had 128 signiﬁcant bits, overﬂow could occur
during bitwise operations in multiply-and-reduce. To verify
multiplication, we estimate tighter upper bounds for si’s.
Recall that si’s are sums of products of xi’s and yj’s which
are bounded by 251. A simple computation gives us better
upper bounds for si’s. Deﬁne
Q51s bds
:= 0 ≤ s0 ≤ 2102 + 4 · 19 · 2102∧
0 ≤ s1 ≤ 2 · 2102 + 3 · 19 · 2102∧
0 ≤ s2 ≤ 3 · 2102 + 2 · 19 · 2102∧
0 ≤ s3 ≤ 4 · 2102 + 19 · 2102∧
0 ≤ s4 ≤ 5 · 2102
Consider the Hoare triple (|Q51xy eqns ∧ Q51xy bds|)P 51M R
(|Q51s eqns ∧ Q51s bds ∧ Q51mult red|), in addition to check-
ing whether qhasm variables sih’s and sil’s are computed
correctly, the qhasm fragment P 51M R for multiply-reduce is
required to meet the upper bounds in Q51s bds . The mid-
condition Q51s bds ∧ Q51mult red enables the veriﬁcation of
the qhasm fragment P 51D for the delayed carry phase.
The qhasm fragment P 51D for delayed carry performs car-
rying on 128-bit expressions sih.sil’s to obtain the product
of the inputs X and Y . The product must also be in the
radix-251 representation. Deﬁne
Q51delayed carry
:=
ri251i
(mod p).
The Hoare triple (|Q51s eqns ∧ Q51s bds ∧ Q51mult red|) P 51D
(|Q51delayed carry ∧ Q51r bds|) veriﬁes that the qhasm fragment
4(cid:80)
i=0
si251i 512≡ 4(cid:80)
i=0
P 51D computes a number
4(cid:80)
i=0
sentation, and it is congruent to
Proposition 2. Assume that
P 51M R
Q51xy bds
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12) Q51xy eqns∧
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) Q51s eqns∧
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12) Q51xy eqns∧
Q51s bds∧
Q51mult red
Q51xy bds
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 P 51D
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
1. |=
2. |=
Then |=
ri251i in the radix-251 repre-
i=0
si251i modulo p.
4(cid:80)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) Q51s eqns∧
; and
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12) Q51delayed carry∧
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
(cid:18)(cid:12)(cid:12)(cid:12)(cid:12) Q51prod∧
(cid:12)(cid:12)(cid:12)(cid:12)(cid:19)
Q51s bds∧
Q51mult red
Q51r bds
Q51r bds
.
.
P 51M R; P 51D
The Hoare triples in Proposition 2 do not establish Q51prod
directly. Again, we formally show (cid:96) [Q51xy bds∧Q51mult red∧
Q51delayed carry ] =⇒ Q51prod in the proof assistant Coq.
Our Coq proof contains less than 600 lines.
5.3 Montgomery ladder step
The veriﬁcation of the Montgomery ladder step (Alg. 2)
is carried out after all implementations of used ﬁeld arith-
metic operations are veriﬁed separately. We replace frag-
ments for ﬁeld arithmetic in the Montgomery ladder step
by their corresponding pre- and postconditions with appro-
priate variable renaming. Alg. 2 is then converted to the
static single assignment form. A formula associating vari-
ables in Alg. 2 and corresponding variables in the actual
implementation is also added. We then assert the static
single assignments as the postcondition of Alg. 2. Using
Boolector, we verify that the postcondition holds, and
that the postcondition of every ﬁeld operation implies the
precondition of the following ﬁeld operation in Alg. 2. By
the rule RelaxedComposition, the record-holding implemen-
tation for the Montgomery ladder step in the radix-251 and
radix-264 representations are formally veriﬁed, that is, the
implementation indeed matches Alg. 2.
We did not verify the Montgomery ladder step with a big
annotated qhasm program due to an eﬃciency consideration.
For example, multiplication of two variables is performed
ﬁve times in Alg. 2. The codes for these multiplication op-
erations are essentially identical with one-to-one and onto
variable renaming. Thus, if we verify the Montgomery lad-
der step as a whole, we will waste time on verifying the
same code. Note that the same code with diﬀerent pre- and
postconditions is still needed to be veriﬁed separately.
6. RESULTS AND DISCUSSION
In this section, we present results and ﬁndings during the
veriﬁcation process. A summary of the experimental re-
sults is in Table 1. The columns are the number of limbs,
the number of midconditions used, and the veriﬁcation time
used in Boolector. We run Boolector 1.6.0 on a Linux
machine with 3.07-GHz CPU and 32-GB memory. We did
not set a timeout and thus a veriﬁcation task can run until it
is killed by the operating system. All the results in Table 1
are suﬃcient to verify the qhasm code, not the best.
We formally veriﬁed the ladder step in Algorithm 2 in
both radix-264 and radix-251. The pre- and postconditions
of each operators are obtained from the veriﬁcation of the
306File Name
Description
# of limb # of MC
Time
Table 1: Veriﬁcation of the qhasm code.
fe25519r64 mul-1
fe25519r64 add
fe25519r64 sub
fe25519r64 mul-2
fe25519r64 mul121666
fe25519r64 sq
ladderstepr64
fe19119 mul
mul1271
fe25519 add
fe25519 sub
fe25519 mul
fe25519 mul121666
fe25519 sq
ladderstep
mul25519
mul25519-p2-1
mul25519-p2-2
muladd25519
re15319
radix-264 representation
r = x ∗ y (mod 2255 − 19), a buggy version
r = x + y (mod 2255 − 19)
r = x − y (mod 2255 − 19)
r = x ∗ y (mod 2255 − 19), a ﬁxed version of
fe25519r64 mul-1
r = x ∗ 121666 (mod 2255 − 19)
r = x ∗ x (mod 2255 − 19)
The implementation of Algorithm 2
r = x ∗ y (mod 2191 − 19)
r = x ∗ y (mod 2127 − 1)
Operations of
Algorithm 2
radix-251 representation
Operations of
Algorithm 2
r = x + y (mod 2255 − 19)
r = x − y (mod 2255 − 19)
r = x ∗ y (mod 2255 − 19)
r = x ∗ 121666 (mod 2255 − 19)
r = x ∗ x (mod 2255 − 19)
The implementation of Algorithm 2
r = x ∗ y (mod 2255 − 19), a 3-phase implementation
The delayed carry phase of r = x ∗ y (mod 2255 − 19)
The delayed carry phase of r = x ∗ y (mod 2255 − 19) with two sub-phases
r = x ∗ y + z (mod 2255 − 19)
r = x ∗ y (mod 2153 − 19)
4
4
4
4
4
4
4
3
2
5
5
5
5
5
5
5
5
5
5
3
1
0
0
19
2
15
14
12
1
0
0
27
5
17
14
3
1
2
7
3
0m8.73s
0m3.15s
0m16.24s
73m55.16s
0m2.03s
3m16.67s
0m3.23s
8m43.07s
141m22.06s
0m16.35s
3m38.62s
5658m2.15s
0m12.75s
463m59.5s
1m29.05s
286m52.75s
2723m16.56s