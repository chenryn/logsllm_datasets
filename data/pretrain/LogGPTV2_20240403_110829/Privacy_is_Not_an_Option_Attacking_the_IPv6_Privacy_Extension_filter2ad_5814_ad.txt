same sequence of successive interface identiﬁers due to the algorithm’s deter-
minism. If this holds, the sequence is checked for their dependence on various
inﬂuencing factors. The algorithm has to be invariant to time, the announced
preﬁx as well as system restarts and provide the same sequence of identiﬁers,
while it has to be variant to a change of the MAC address. These conditions are
inferred from the algorithm’s deﬁnition in the respective RFC: Neither the point
in time of address generation is included into the calculation nor the identiﬁer’s
lifetime. Thus, a later repetition of the experiment or a change in the interval
may not have an impact on the identiﬁers. The same holds for the announced net-
work preﬁx. The algorithm has to be invariant to system restarts as the current
state has to be stored in stable storage; all the tested operating systems require
the availability of such a storage. In contrast, the MAC address is included into
the calculation, and its change should result in diﬀerent identiﬁers. These are
necessary criteria, and are not suﬃcient criteria. The results of our tests are
shown in Table 3.
Table 3. Temporary address characteristics wrt to diﬀerent operating systems
Ubuntu 14.10 does not generate deterministic sequences, and its temporary
interface identiﬁers appear to be assigned by a random number generator without
following the deﬁned algorithm. A review of the source code6 supports this. Mac
OS X Yosemite showed the same behavior.
6 Kernel 3.16.0, /net/ipv6/addrconf.c, line 1898.
464
J. Ullrich and E. Weippl
Windows 8.1 provides the same sequence whenever originating from the same
state, and further fulﬁlls the conditions of time and preﬁx invariance as well as
MAC variance. Restarting the machine or the interface, however, inﬂuences the
sequence. Thus, we assume that Windows 8.1 implements the privacy extension’s
version for systems without presence of stable storage. In such a case, the ﬁrst
history value after a restart is randomly assigned. This assumption coincides
with the fact that we could not ﬁnd any appropriate history value in the Win-
dows Registry analysing Registry diﬀs. Further signs supporting our assumption
are the collaboration of Microsoft in the deﬁnition of the RFC, as well as the
algorithm’s description in older TechNet Library articles [22].
The gained insights lead to the following conclusion: While Ubuntu 14.10 and
Mac OS X Yosemite seem to be immune to our attack, Windows 8.1 appears to
be vulnerable – admittedly to a decreased extent as reinitialization of the history
value is performed with every restart. However, systems that are continuously
running for longer periods or using sleep mode remain vulnerable; and sleep
mode is widely used for laptops. For interest, the operating systems’ protection
to our attack is gained by disobeying the privacy extension’s standard. Ubuntu
and Mac OS seem to totally ignore the proposed generation algorithm, while
Windows 8.1 appears to implement the alternative for systems without stable
storage albeit it assumes such storage according to its system requirements.
9 Mitigation
In this section, we recommend changes to the address generation mechanism
for mitigation of our attack. We propose two kinds of strategy: The ﬁrst aims
at impeding synchronization to the algorithm’s current state, while the other
removes the predictability of future identiﬁers in general.
Restraint of Synchronization: Our attack is based on the fact that an adver-
sary is able to learn a victim’s state by observating them over multiple days, and
one might hamper an adversary’s synchronization to the algorithm’s internal
state for mitigation. These strategies do not oﬀer protection in case the state is
leaked. The following explanations are supported by Fig. 6; the numbers in the
ﬁgure match those provided in the following paragraphs.
(1) An increased history value would imply improved randomization and
increase the size of the initial candidate set C0, see Eq. 1. As a consequence, the
adversary has to observe more successive identiﬁers according to Eq. 2, and time
expenditure for brute-forcing increases, see Eqs. 3 and 4. The algorithm’s current
design, however, does not allow an isolated increase of the history value. The
MD5 digest’s ﬁrst half forms the temporary interface identiﬁer and its second
the current history value. Beyond, there are no bits available that could serve as
additional bits for an increased history value. Thus, this strategy would require
the replacement of MD5 by another hash function.
(2) MD5 is considered insecure, and its replacement by a state-of-the-art hash
function seems tempting. MD5 is vulnerable to collision attacks, and insecure
Privacy is Not an Option: Attacking the IPv6 Privacy Extension
465
Fig. 6. Mitigation strategies for generation of temporary IIDs
for applications that rely on collision resistance, e.g., as necessary for certiﬁcates
[23]. The IPv6 privacy extension, however, exploits a hash function’s randomiza-
tion, and replacing MD5 with the currently used SHA-265 would only modestly
increase brute-force eﬀort [24].
Removal of Identiﬁers’ Predictability: Another precondition of our attack
is the dependency of future identiﬁers on the current state and predictable inputs
only. The following mitigation approaches tackle this issue by removing the pre-
dictability of future identiﬁers in diﬀerent ways.
(3) Including a random value in every iteration makes the digest dependent
on more inputs, and adds unpredictability with every new interface identiﬁer.
This is the major diﬀerence to an increased history value as mentioned above
that solely increases randomization at the algorithm’s initialization. Even if the
current state is leaked, it is impossible to accurately predict future interface
identiﬁers. Moreover, this measure does not require a dissolution of MD5.
(4) A removal of the concatenation would result in successive addresses that
are not related to each other; instead, the history value could be randomly ini-
tialized for every new address. A similar but more limited approach is deﬁned by
the privacy extension’s standard, but only for devices without stable storage [7].
As such systems are not able to store the history value across system restarts,
they are allowed to randomly initialize the ﬁrst history value after a reboot.
Their vulnerability is thus dependent on their typical restart intervals in com-
parison to the temporary addresses’ lifetime. Nevertheless, it seems curious that
an alternative algorithm for speciﬁc devices is more secure than the standard
algorithm.
Alternatively, temporary interface identiﬁers could be randomly assigned
without such a complex algorithm. A host’s vulnerability to address correla-
tion is then dependent on the quality of its random number generator. We see
advantages in this approach because high-quality random number generators
are necessary in modern operating systems on personal computers, laptops and
mobiles anyway. The privacy extension would beneﬁt from this quality and fur-
ther be updated automatically with every improvement of the number generator.
For systems without an appropriate random number generator, an alternative
would have to be available. This practice is opposed to today’s standard that
466
J. Ullrich and E. Weippl
deﬁnes a rather complex algorithm “to avoid the particular scenario where two
nodes generate the same randomized interface identiﬁer, both detect the situation
via DAD, but then proceed to generate identical randomized interface identiﬁers
via the same (ﬂawed) random number generation algorithm” [7] and lowers secu-
rity for all systems that implement the privacy extension.
Finally, we considered the question which mitigation strategies are in accor-
dance with the current speciﬁcation, and have drawn the following conclusions:
(1) It is allowed to use another hash function instead of MD5. The brute-force
eﬀort would, however, increase only modestly, and a replacement brings only
limited protection. (2) The history value is allowed to be randomly re-initialized
after every system restart, but this behavior is restricted to systems without sta-
ble storage. However, a variety of systems that implement the privacy extension
like personal computers, laptops, tablets or mobiles do not lack stable storage,
and have to follow the standard variety of the algorithm. (3) The privacy exten-
sion is considered more secure the shorter the temporary addresses’ lifetime. This
inherent belief has to be revised with respect to the presented attack because
more addresses are provided to the adversary within the same time interval,
making synchronization to the current state easier.
10 Conclusions
The IPv6 privacy extension aims to protect privacy by regularly changing the
address, and deﬁnes an algorithm for the generation of interface identiﬁers
that are combined with the advertised network preﬁx to form temporary IPv6
addresses. In this paper, we presented an attack that questions the extension’s
capability of protection: An adversary is able to predict future temporary inter-
face identiﬁers once the internal state is known, and is further able to synchronize
to this internal state by observing the victim’s previous interface identiﬁers. In
consequence, an adversary knows interface identiﬁers belonging to the same host;
in turn, she is able to perform address-based correlation of diﬀerent transactions
and infer (private) details about people’s Internet behavior. Moreover, an adver-
sary might even retrace a host’s movement in the network based on the network
preﬁxes that are included in the respective addresses.
The presented attack is worthwhile as it does not solely identify a privacy
vulnerability but questions a whole measure for privacy protection. The privacy
extension was developed with the intention to impede address-based correlation,
and our attack shows that it does not meet its goal. Nevertheless, we believe that
the general idea of temporary addresses is valuable, and recommend a revision
of the algorithm for interface identiﬁer generation. We want to highlight the fact
that merely replacing MD5 does not solve the problem, as the vulnerability arises
from the concatenation of successive interface identiﬁers, scarce randomization
and information leakage via a side channel. MD5 just makes the attack easier
due to its fast nature. Proper mitigation within the current deﬁnition appears
impractical, and we want to stress the importance of strategies beyond today’s
speciﬁcation.
Privacy is Not an Option: Attacking the IPv6 Privacy Extension
467
Operating systems appeared less vulnerable than originally assumed. This
does not, however, oppose a revision, as their robustness is gained by silently
disobeying the standard and should not be held as a virtue. The standard in
its current form can tempt developers to implement a vulnerable version of the
privacy extension, and should be adapted soon. This utmost concern is further
emphasized by the fact that the privacy extension is the only widely deployed
IPv6 mechanism using stateless address autoconﬁguration that is intended to
protect against temporal as well as geographical address correlation.
Acknowledgments. The authors thank Peter Wurzinger, Dimitris E. Simos, Georg
Merzdovnik and Adrian Dabrowski for many fruitful discussions. This research was
funded by P 842485 and COMET K1, both FFG - Austrian Research Promotion
Agency.
References
1. Landau, S.: Making sense from snowden: what’s signiﬁcant in the NSA surveillance
relevations. IEEE Secur. Priv. Mag. 4, 54–63 (2013)
2. Landau, S.: Making sense from snowden, part II: what’s signiﬁcant in the NSA
surveillance relevations. IEEE Secur. Priv. Mag. 1, 62–64 (2014)
3. Leber, J.: Amazon Woos Advertisers with What
sumers,
amazon-woos-advertisers-with-what-it-knows-about-consumers/
January
2013.
It Knows about Con-
http://www.technologyreview.com/news/509471/
4. Blue, V.: Facebook turns user
into data mining ‘feature’
for advertisers, June 2014. http://www.technologyreview.com/news/509471/
amazon-woos-advertisers-with-what-it-knows-about-consumers/
tracking ‘bug’
5. Cooper, A., Tschofenig, H., Aboba, B., Peterson, J., Morris, J., Hansen, M., Smith,
R.: Privacy Considerations for Internet Protocols, RFC 6973, July 2013
6. Hinden, R., Deering, S.: IP Version 6 Addressing Architecture, RFC 4291, February
2006
7. Narten, T., Draves, R., Krishnan, S.: Privacy Extensions for Stateless Address
Autoconﬁguration in IPv6, RFC 4941, September 2007
8. Ullrich, J., Krombholz, K., Hobel, H., Dabrowski, A., Weippl, E.:
IPv6
security: attacks and countermeasures in a nutshell. In: USENIX Workshop
on Oﬀensive Technologies (WOOT). USENIX Association, San Diego, CA,
August
2014. https://www.usenix.org/conference/woot14/workshop-program/
presentation/ullrich
9. Thomson, S., Narten, T., Jinmei, T.: IPv6 Stateless Address Autoconﬁguration,
RFC 4862, September 2007
10. Gont, F.: A Method for Generating Semantically Opaque Interface Identiﬁers with
IPv6 Stateless Address Autoconﬁguration (SLAAC), RFC 7217, April 2014
11. Aura, T.: Cryptographically Generated Addresses (CGA), RFC 3972, March 2005
12. Arkko, J., Kempf, J., Zill, B., Nikander, P.: SEcure Neighbor Discovery (SEND),
RFC 3971, March 2005
13. Narten, T., Nordmark, E., Simpson, W., Soliman, H.: Neighbor Discovery for IP
version 6 (IPv6), RFC 4861, September 2007
14. Dunlop, M., Groat, S., Marchany, R., Tront, J.: IPv6: now you see me, now you
don’t’. In: International Conference on Networks (ICN), pp. 18–23 (2011)
468
J. Ullrich and E. Weippl
15. Groat, S., Dunlop, M., Marchany, R., Tront, J.: IPv6: nowhere to run, nowhere to
hide. In: Hawaii International Conference on System Sciences (HICSS) (2011)
16. Alsadeh, A., Raﬁee, H., Meinel, C.: Cryptographically generated addresses (CGAs):
possible attacks and proposed mitigation approaches. In: IEEE International Con-
ference on Computer and Information Technology (CIT) (2012)
17. AlSadeh, A., Raﬁee, H., Meinel, C.: IPv6 stateless address autoconﬁguration: bal-
ancing between security, privacy and usability. In: Garcia-Alfaro, J., Cuppens, F.,
Cuppens-Boulahia, N., Miri, A., Tawbi, N. (eds.) FPS 2012. LNCS, vol. 7743, pp.
149–161. Springer, Heidelberg (2013)
18. Barrera, D., Wurster, G., Van Oorschot, P.C.: Back to the future: revisiting IPv6
privacy extensions. USENIX Mag. 36(1), 16–26 (2011). LOGIN
19. Turner, S., Chen, L.: Updated Security Consideration for the MD5 Message-Digest
and the HMAC-MD5 Algorithms, RFC 6151, March 2011
20. Gosney, J.M.: Password cracking HPC. In: Passwords Security Conference (2012)
21. Heuse, M.: Thc-ipv6 toolkit v2.7, April 2015. https://www.thc.org/thc-ipv6/
22. TechNet: IPv6 Addressing (Tech Ref), April 2011. https://technet.microsoft.com/
en-us/library/dd392266(v=ws.10).aspx
23. Stevens, M., Sotirov, A., Appelbaum, J., Lenstra, A., Molnar, D., Osvik, D.A.,
de Weger, B.: Short chosen-preﬁx collisions for MD5 and the creation of a rogue
CA certiﬁcate. In: Halevi, S. (ed.) CRYPTO 2009. LNCS, vol. 5677, pp. 55–69.
Springer, Heidelberg (2009)
24. eBASH (ECRYPT Benchmarking of All Submitted Hashes), March 2015. http://
bench.cr.yp.to/results-hash.html