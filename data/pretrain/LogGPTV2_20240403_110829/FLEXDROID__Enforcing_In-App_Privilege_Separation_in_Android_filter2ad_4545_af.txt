### FLEXDROID’s Features in Comparison to Stock Android

FLEXDROID introduces several features that distinguish it from stock Android. The primary overheads of FLEXDROID stem from two main sources: inter-process stack inspection and sandbox switching. 

1. **Inter-Process Stack Inspection**: FLEXDROID conducts a stack inspection every time an application attempts to access various resources. This process ensures that the access request is legitimate and adheres to the defined security policies.

2. **Sandbox Switching**: FLEXDROID performs a sandbox switch upon every JNI (Java Native Interface) execution and Java API calls from JNI. This ensures that the native code runs in a secure, isolated environment, preventing unauthorized access to system resources.

### Performance Overheads

To evaluate the performance overheads, we conducted both macro-benchmarks and micro-benchmarks on FLEXDROID and stock Android. The results are summarized in Table VII and Table VIII.

#### Macro-Benchmarks (Table VII)

| Use Scenario                   | Stock Android (ms) | FLEXDROID (ms) | Overhead (%) |
|--------------------------------|--------------------|----------------|--------------|
| Launch an application           | 39.13              | 39.73          | 1.55         |
| Launch a service                | 3.76               | 3.95           | 5.22         |
| Download 1.3MB file             | 136.54             | 139.59         | 2.24         |
| Take a photo                    | 443.01             | 448.99         | 1.35         |
| Send an email (K-9 app)         | 100.56             | 101.70         | 1.13         |
| Read 8.4MB file via JNI         | 88.71              | 89.16          | 0.51         |

#### Micro-Benchmarks (Table VIII)

| Benchmark                     | Stock Android (µs) | FLEXDROID (µs) | Overhead (µs) |
|-------------------------------|--------------------|----------------|---------------|
| startActivity()                | 3,935              | 4,529          | 594           |
| startService()                 | 1,221              | 1,734          | 513           |
| file open*                     | 782                | 1,657          | 875           |
| file open (create)*            | 1,390              | 2,338          | 948           |
| file delete                    | 745                | 1,330          | 585           |
| file read†                     | 138                | 142            | 4             |
| file write†                    | 1,076              | 1,134          | 58            |
| call JNI method                | 97                 | 186            | 89            |
| call JNI method after loading  | 963                | 8,436          | 7,473         |
| libraries‡                      |                    |                |               |

*Two stack inspections are required during a file open.
†No stack inspection is required during file read and write.
‡This includes the process of loading (and dynamic linking) the JNI code and shared libraries needed by the JNI code.

### Experimental Setup

To minimize the effect of unrelated processes (e.g., system daemons), all CPU cores were turned on and their frequencies fixed to the maximum values. Additionally, the highest priorities were assigned to all threads running our benchmarks. Each experiment was repeated 50 times, and the median value was chosen for comparison.

### Discussion

1. **Backward Compatibility**: FLEXDROID currently has limitations in backward compatibility, particularly with JNI sandboxing. Known issues include Pthread ID, `mmap()`, and `free()` faults. Addressing these issues would require modifications to the kernel and the development of a more robust JNI sandbox.

2. **Memory Isolation**: FLEXDROID does not provide memory isolation between third-party libraries. Malicious libraries could potentially access or overwrite the memory of other libraries. Establishing memory isolation is a significant area for future work.

3. **ProGuard Integration**: App developers often use ProGuard to obfuscate and optimize their source code. Since ProGuard changes package names, FLEXDROID may not work effectively with obfuscated apps. To mitigate this, developers can configure ProGuard to exclude suspicious libraries.

### Conclusion

FLEXDROID extends Android's permission system to provide dynamic, fine-grained access control for third-party libraries. It enables developers to fully control the capabilities of third-party libraries and specify behaviors for unauthorized resource access. Our evaluation shows that FLEXDROID successfully regulates resource access with minimal performance overheads.

### Acknowledgment

We thank the anonymous reviewers and our shepherd, David Lie, for their valuable feedback. This work was supported by the Institute for Information & Communications Technology Promotion (IITP) grant funded by the Korea government (MSIP) and by the NSF, ONR, and DARPA grants.

### References

[References listed as provided in the original text]

---

This optimized version of the text is more structured and coherent, with clear headings and a logical flow. The tables and experimental setup are clearly presented, and the discussion points are more focused and concise.