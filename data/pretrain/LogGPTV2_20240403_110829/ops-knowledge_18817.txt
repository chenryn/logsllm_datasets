User: How to use rsync on Linux to realize remote synchronization and backup of data?
Assistant: Rsync is a powerful remote data synchronization tool that can perform data transmission and synchronization between different hosts, as well as backup. The following are the steps to use rsync to realize data remote synchronization and backup function on Linux: 1. Install rsync On Linux systems, rsync is usually pre-installed, if not, you can install it directly through the package manager. For example, you can use the following command to install on Ubuntu: sudo apt-get install rsync 2. Determine the synchronization source and target When using rsync for data synchronization, you need to determine the synchronization source and target. The synchronization source can be a local file system or a file system on a remote host. The synchronization target is usually a filesystem on the remote host. For example, assuming that the local synchronization source directory is /home/user/data, the IP address of the remote host is 192.168.1.100, and the synchronization target directory is /backup/data, the rsync command can be written as: rsync -avz /home/user/ data/ user@192.168.1.100:/backup/data/ Among them, the parameter -a means to synchronize in archive mode, -v means to output detailed information, and -z means to use compressed transmission. 3. Set the rsync authentication method When performing remote synchronization, you need to set the rsync authentication method. There are two commonly used ones: (1) Password-based authentication. Using password-based authentication requires adding a user on the remote host and configuring the user to access the rsync service. The specific steps are as follows: - Add user user on the remote host: useradd user - Set password for user user: passwd user - Edit the rsync service configuration file and add settings that allow user user to access rsync service: vi /etc/rsyncd.conf [backup ] path=/backup read only=false uid=nobody gid=nobody auth users=user secrets file=/etc/rsyncd.secrets Among them, [backup] indicates the name of the shared service, path indicates the path of the shared directory, and auth users indicates permission The user name for access, secrets file indicates the path of the password file. - Create a password file to store user passwords in ciphertext: vi /etc/rsyncd.secrets user:password where user is the user name and password is the password. - Set the permissions of the password file: chmod 600 /etc/rsyncd.secrets - Restart the rsync service: systemctl restart rsync Then when using the rsync command locally for synchronization, you need to add password authentication parameters: rsync -avz --password-file=/etc /rsyncd.secrets /home/user/data/ user@192.168.1.100::backup/data/ Among them, the --password-file parameter specifies the path of the password file. (2) Key-based authentication Using key-based authentication needs to generate public and private keys on the local and remote hosts, and add the public key of the local host to the authentication file of the remote host. The specific steps are as follows: - Generate public and private keys on the local host: ssh-keygen -t rsa Follow the prompts to enter the password and file name. - Upload the public key to the remote host: ssh-copy-id user@192.168.1.100 Among them, user is the username on the remote host, and you need to enter the user's password for authentication. - When using the rsync command locally for synchronization, you need to authenticate through the ssh connection: rsync -avz -e ssh /home/user/data/ user@192.168.1.100:/backup/data/ 4. Set a scheduled task to achieve data backup And automatic synchronization, you can set the rsync command as a scheduled task, such as using crontab. Enter in the terminal: crontab -e and add a scheduled task according to the grammar rules: * * * * * command to be executed For example, to perform data backup at 2 o'clock every night, you can add the following scheduled task: 0 2 * * * rsync -avz /home/user/data/ user@192.168.1.100:/backup/data/