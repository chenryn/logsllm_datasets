t
0.07
f
o
y
t
i
l
i
b
a
b
o
r
P
0.06
0.05
0.04
0.03
Samples
Typos
245
150
182
Avg. typing speed (cpm)
Fig. 10: The workers are divided into four quartiles based
on their typing speed, and for each quartile we report the
percentage of passwords that were mistyped.
t
r
o
h
o
c
h
c
a
e
n
i
s
o
p
y
t
f
o
%
50
40
30
20
10
0
1.18
2.01
3.07
Avg. time required to type (sec)
0.1
0.09
0.08
o
p
y
t
0.07
f
o
y
t
i
l
i
b
a
b
o
r
P
0.06
0.05
0.04
0.03
6.89
Fig. 11: Passwords are divided into four quartiles based on
the amount of time spent by workers to type them, and then
compute the fraction of passwords mistyped in each quartile.
(cid:2)
=
(cid:4)
˜w∈P B( ˜w).
w∈C(cid:2) p(w) is
q, ﬁnd a q-size subset P ⊆ S, such that
maximized, where C(cid:2)
Deﬁnition 2. Maximum coverage problem. Given a ground
set E = {e1, e2, . . . en}, a collection of m subsets of E, S =
{S1, S2, . . . , Sm}, and a weight function γ : E → R+ that
assigns weights to each element e ∈ E, ﬁnd a subset C ⊆
(cid:2)
S of size k, such that the following quantity is maximized,
e∈C(cid:2) γ(e), where C(cid:2)
The maximum coverage problem is known to be NP-
Si∈C Si.
(cid:4)
=
hard [20]. We can thus prove the following theorem.
Theorem 3. If there is a polynomial time algorithm for best-q-
guess, there exists a polynomial time algorithm for maximum
coverage problem.
Proof: We shall show a polynomial time reduction from the
maximum coverage problem to the best-q-guess problem. To
start with, we are given an instance of maximum coverage
problem with (E, S, γ, k), and we want to construct an in-
stance of best-q-guess problem. To do so, we set PW = E
and probability p as proportional to γ. (We might have to
normalize γ to make it a probability distribution.) The function
is deﬁned as follows. First add to S a set
B : S → PW∗
i }m
i ) = 0, and for each Si ∈ S,
i=1, with p( ˜w∗
W ∗
= { ˜w∗
nextPw()
Returns the passwords in PW in decreasing order of
their probability p.
FindGuesses(q)
/* B( ˜w) = ball around ˜w, and b = maxS |B( ˜w)| */
/* N (w) = { ˜w | w ∈ B( ˜w)} */
P ← PW
A ← MaxHeap()
g ← φ;
do {
/* val( ˜w) = p(B( ˜w) ∩ P ) */
w ← nextPw()
˜wm ← A.popmax()
while p(B( ˜wm) ∩ P ) ≥ b · p(w) {
g ← g ∪ { ˜wm}
P ← P \ B( ˜wm)
foreach ˜w ∈ { ˜w ∈ A| B( ˜w)∩ B( ˜wm)∩ P (cid:8)= φ}
˜wm ← A.popmax()
A.updateweight ( ˜w)
}
A.heappush( ˜wm)
foreach ˜w ∈ (N (w) \ A)
A.heappush( ˜w)
} while (|g| 1, where ˆS1 is the set of all
strings in S whose ball sizes are exactly one, and ˆS>1 = ˆS\ ˆS1.
We can claim following two inequalities.
(cid:5)
(cid:6)
p
(cid:5)
B( ˆS1)
(cid:6)
p
B( ˆS>1)
≤
| ˆS1|(cid:3)
i=1
p(wi)
≤ | ˆS1, and
p(wi) ≥ p(wq) for all i ≥ q. So, by a union bound over
B( ˆS>1), we can achieve that inequality. We can add the two
inequalities to obtain our desired result.
(cid:5)
(cid:6)
(cid:5)
(cid:6)
(cid:5)
p
B( ˆS)
= p
B( ˆS1)
+ p
B( ˆS>1)
p(wi)
(cid:6)
≤ q(cid:3)
To show strict equality, simply observe that an attacker
against OpChk can always choose the q most probable
passwords to guess and achieve a success rate of λq. Thus
λfuzzy
q = λq.
i=1
Theorem 2. Fix q > 0, a distribution pair (p, τ ), and a
corrector set C. Deﬁne OpChk to work over C and let Chk
work for a set of correctors C(cid:2) ⊆ C. If Δq(Chk) = 0, then
Util(Chk) ≤ Util(OpChk).
Proof: First recollect utility of any checker Chk is deﬁned as
Util(Chk) = Pr[ACC(Chk) ⇒ true]
(cid:3)
(cid:3)
p(w) · τ ˜w(w),
=
˜w∈S
w∈B( ˜w)
where B( ˜w) is the ball of ˜w under Chk.
Let assume for contradiction that there exists a checker Chk
which uses only the correctors in C, achieves a Δq(Chk) =
0 and still beats the OpChk in utility, that is, Util(Chk) >
Util(OpChk). Let denote a ball of OpChk by B(·) and a ball
of Chk by ˜B(·). So, if Util(Chk) > Util(OpChk), then there
exists at least one ˜w ∈ S such that
p(w) · τw( ˜w) >
p(w) · τw( ˜w).
(3)
(cid:3)
w∈B( ˜w)
(cid:3)
w∈ ˜B( ˜w)
(cid:2)
w∈B(w)
Now, by construction, the optimal checker OpChk selects the
B( ˜w) that maximizes the utility under the constraint that no
ball of size 1 has higher cumulative mass than p(wq). Here
p(w) · τw( ˜w). (See
by utility we mean the sum
Eqn. V-D.) The checker Chk can achieve higher utility only
if it violates one of the two constraints in (V-D). The ﬁrst
constraint, required for completeness, is inviolable. The second
constraint determines security; if p( ˜B( ˜w)) > p(wq) when
| ˜B( ˜w)| > 1, then the security loss Δq(Chk) > 0 according to
Lemma 1. Thus there cannot exist any ˜w ∈ S fulﬁlling Eqn. 3.
Thus the assumption Util(Chk) > Util(OpChk) is false.
Lemma 1. For any password and typo distribution pair (p,
τ), checker Chk, and parameter 0  1 and p(B( ˜w)) > p(wq), then
Δq > 0.
Proof: Security loss Δq > 0 implies that λfuzzy
> λq. Let
PW q = {w1, . . . , wq} and recall that λq = p(PW q). Recall
too that:
S⊆S p(B(S)), where |S| = q.
First set S ← (PW q\B( ˜w))∪{ ˜w}. Clearly λfuzzy
If we look at the union of balls of the strings in the set S,
q ≥ p(B(S)).
q = max
λfuzzy
q
B(S) ⊇ PW q ∪ B( ˜w)
⇒ p(B(S)) ≥ p(PW q) + p(B( ˜w) \ PW q)
q
Now, if B( ˜w) \ PW q (cid:7)= φ, then clearly λfuzzy
≥ p(B(S)) >
p(PW q), and so Δq > 0.
If B( ˜w)\PW q = φ, then |S|  1. Thus as
long as there exists a password w(cid:2) ∈ PW\S such that p(w(cid:2)
) >
0, we can add w(cid:2) to S, resulting in p(B(S)) > p(PW q). This
concludes the proof.
G. Toy Example of Poor Ball Estimation
Consider the following toy example of the attacker’s esti-
mated distribution ˆp and the actual challenge distribution p:
Attacker’s estimate
ˆp(w)
w
1/3
123456
1/4
password
1/4
Password
1/6
qwerty
Actual distribution
p(w)
w
1/2
123456
1/5
password
1/5
Password
1/10
asdffghj
The best guess of the attacker against ExChk is 123456,
which yields success rate 1/2. If the attacker wants to optimize
her guess in the presence of a typo tolerant checker, e.g.,
Chk-All with correctors Ctop2, the she select as her ﬁrst guess is
password (in whose ball Password lies), yielding success
probability only 2/5.
818818
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply.