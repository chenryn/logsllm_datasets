i2.setAction("potatoes"); 
sendBroadcast(i2); 
8.8 MXQ TV Box 4.4.2 – Factory Reset 
Normally, sending a broadcast with an action string of android.intent.action.MASTER_CLEAR cannot 
be sent by a third-party app, but it can be sent by a third-party app on this device. This is due to the fact 
that the com.android.server.MasterClearReceiver app component in the system_server process is 
not statically registered in the core android package, and is instead registered dynamically and does not 
have the MASTER_CLEAR permission access requirement. This behavior is not present in 4.4.2 AOSP code. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
sendBroadcast(new Intent ("android.intent.action.MASTER_CLEAR")); 
The programmatic factory reset will wipe all user data and any data that has not been backed up or synced 
to an external location will be lost. 
9. Setting Properties as the com.android.phone User 
We discovered a pre-installed app on some devices that exposes the capability to set system properties as 
the com.android.phone user. This can be performed by any app on the device due to an exported service 
in the com.qualcomm.qti.modemtestmode app. This platform app executes as the system user. Appendix 
F provides the AndroidManifest.xml file for the com.qualcomm.qti.modemtestmode app from a Vivo 
V7 Android device. This app contains an explicitly exported service named MbnTestService that allows 
the caller to provide a key-value pair that it will write as a system property. This application is still bound 
by SELinux rules regarding its context and associated capabilities. Based on our testing, the 
com.qualcomm.qti.modemtestmode app can modify system properties that start with the persist. prefix 
(e.g., persist.sys.factory.mode). Vendors can introduce their own system properties that can alter the 
functionality of the device when a system property is set to a certain value. 
The MbnTestService service is a bound service that provides an interface for clients to access. The bound 
service has a corresponding AIDL file that easily allows the client app to perform RPCs on the service. If a 
client app lacks the AIDL file, the client app can still interact with the bound service although they will 
have to perform low-level behavior that the AIDL file abstracts from the developer. The client will need to 
create and populate the Parcel object, provide the correct interface name, and call the correct function 
number on the interface. The source code to perform this behavior on the Vivo V7 is provided in Appendix 
G. We provide two examples, Vivo V7 and Coolpad Canvas, of how settings a system property can enable 
logging features on a device that would otherwise be unavailable to a third-party app. 
9.1 Vivo V7 – Obtaining User Touch Input 
The 
Vivo 
V7 
device 
contains 
the 
com.qualcomm.qti.modemtestmode 
(versionCode=25, 
versionName=7.1.2) 
app. 
This 
device 
has 
a 
build 
fingerprint 
of 
vivo/1718/1718:7.1.2/N2G47H/compil11021857:user/release-keys. A third-party app can modify 
certain system properties on the device. Specifically, setting the persist.sys.input.log key to a value 
of 1, will make the user’s screen touches be written to the logcat log by the InputDispatcher for all apps. 
Vivo V7 also contains a vulnerability to have a pre-installed app write the logcat logs to the SD card as 
detailed in Section 5.5. With some effort and knowledge of the device, an attacker can translate the 
coordinates to keyboard keypresses. This allows the attacker to determine the user’s keypresses on the 
keyboard, potentially exposing PII. The device will need to be rebooted in order for the system property to 
be read at boot time. A third-party app can quickly cause a system crash and reboot the Vivo V7 device by 
sending a broadcast intent with an action of intent.action.super_power_save_send. The system crash 
is due to inadequate null-checking at runtime and also a lack of exception handling in the system_sever 
process. Below are some log messages from the Vivo V7 device showing the x and y touch coordinates. 
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 0: id=0, toolType=1, x=460.000000, 
y=1027.000000, pressure=0.023529, size=0.023529, touchMajor=6.000000, touchMinor=6.000000, 
toolMajor=6.000000, toolMinor=6.000000, orientation=0.000000 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 1: id=1, toolType=1, x=166.000000, 
y=1282.000000, pressure=0.023529, size=0.023529, touchMajor=6.000000, touchMinor=6.000000, 
toolMajor=6.000000, toolMinor=6.000000, orientation=0.000000 
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 2: id=2, toolType=1, x=268.000000, 
y=1070.000000, pressure=0.015686, size=0.015686, touchMajor=4.000000, touchMinor=4.000000, 
toolMajor=4.000000, toolMinor=4.000000, orientation=0.000000 
9.2 Coolpad Canvas – Write Logcat log, Kernel log, and tcpdump Capture to the SD Card 
The Coolpad Canvas Android device35 is sold by Cricket Wireless and contains a vulnerable version of the 
com.qualcomm.qti.modemtestmode (versionCode=24, versionName=7.0) app, allowing third-party 
apps to change certain system properties (as explained in Section 9) . The build fingerprint of the device is 
Coolpad/cp3636a/cp3636a:7.0/NRD90M/093031423:user/release-keys. Setting a system property 
can enable logging features on the device that would not otherwise be unavailable to a third-party app. 
Specifically, using the method described above, any app can set the persist.service.logr.enable 
property to a value of 1 to enable logging on the device. When this occurs, the device will start writing log 
files to a path of /sdcard/log. Below is a listing of the files created in the /sdcard/log directory.  
cp3636a:/sdcard/log $ ls -al                                                                  
total 1984 
drwxrwx--x  2 root sdcard_rw   4096 2018-05-18 11:42 . 
drwxrwx--x 15 root sdcard_rw   4096 2018-05-18 01:30 .. 
-rw-rw----  1 root sdcard_rw    632 2018-05-18 11:48 0518114248.crash.txt 
-rw-rw----  1 root sdcard_rw 157544 2018-05-18 11:48 0518114248.events.txt 
-rw-rw----  1 root sdcard_rw 241356 2018-05-18 11:48 0518114248.kernel.txt 
-rw-rw----  1 root sdcard_rw 261513 2018-05-18 11:48 0518114248.main.txt 
-rw-rw----  1 root sdcard_rw  65536 2018-05-18 11:47 0518114248.net.pcap 
-rw-rw----  1 root sdcard_rw     11 2018-05-18 11:42 0518114248.qsee.txt 
-rw-rw----  1 root sdcard_rw 244923 2018-05-18 11:48 0518114248.radio.txt 
-rw-rw----  1 root sdcard_rw  28089 2018-05-18 11:48 0518114248.system.txt 
Five of the files correspond to the different log buffers (crash, events, radio, system, and main). These files 
are highlighted in orange. Android prevents third-party apps from reading directly from the system-wide 
logcat log since it tends to contain sensitive data. The kernel log is highlighted in purple. A network package 
capture (pcap) file is also highlighted in green. The qsee file, highlighted in blue contains a log for when 
logging starts. Therefore, any app with the READ_EXTERNAL_STORAGE permission can enable the logging to 
the SD card and read the log files.  
When the persist.service.logr.enable system property is set to a value of 1 when the device finishes 
booting, an app with a package name of com.yulong.logredirect (versionCode=20160622, 
versionName=5.25_20160622_01) will create a sticky notification. If the setting of the 
persist.service.logr.enable system property to a value of 1 happens after the boot process has 
completed, then notification will not be created by the com.yulong.logredirect app. Therefore, to keep 
the notification from appearing, the attacking app will have to set the persist.service.logr.enable 
system property to a value of 0 prior to the device being shut down or rebooted. To accomplish this the app 
needs 
to 
dynamically-register 
a 
broadcast 
receiver 
that 
listens 
for 
the 
action 
of 
android.intent.action.ACTION_SHUTDOWN. Once this broadcast is received, the app will use an already 
35 https://www.cricketwireless.com/support/devices-and-accessories/coolpad-canvas-device-support/customer/device-
support.html 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
existing object that extends the ServiceConnection interface to quickly interact with the MbnTestService 
bound service to quickly change the persist.service.logr.enable system property to a value of 0. Then 
when the device boots back up again, the notification will not be on and the attacking app can listen for 
various broadcast intents through a statically declared broadcast receiver app component in the attacking 
app’s AndroidManifest.xml file. This unburdens the attack app of also having to request the 
RECEIVE_BOOT_COMPLETED permission. For example, the app can statically register for the following 
broadcast 
actions: 
android.intent.action.SIM_STATE_CHANGED 
and 
org.codeaurora.intent.action.ACTION_NETWORK_SPECIFIER_SET. 
Interacting 
with 
the 
com.qualcomm.qti.modemtestmode app to change system properties is done in the same way as in 
Appendix G for the Vivo V7 device, except the Coolpad Canvas device uses an interface token name of 
com.qualcomm.qti.modemtestmode.IMbnTestService 
instead 
of 
com.qualcomm.qti.modemtestmode.f that is used for the Vivo V7. Other than this, the code to interact 
with the bound services is the same where the attacking app provides the appropriate key-value pair to 
modify system properties. 
9.3 Coolpad Canvas – Leaking Telephony Data to the Logcat Log Vulnerability 
The previous vulnerability (i.e., activating the logcat logs) allows any third-party app with the 
READ_EXTERNAL_STORAGE permission to read various log files including the logcat log. The standard 
Android Open Source Project (AOSP) code for the com.android.phone app does not write Short Message 
Service (SMS) messages to the Android log. 
The com.android.phone app writes the user’s sent text messages to the logcat log. 
05-18 16:33:19.165  1735  2120 E mzq     : table =smsvalues =address=(703) 555-1234 
creator=com.android.mms thread_id=1 sub_id=1 read=1 date=1526675599134 body=huba 
subject=null priority=-1 type=6 
The system_server process writes the outgoing calls to the logcat log. 
05-18 16:38:53.565  1173  1173 I Telecom : Class:  processOutgoingCallIntent handle = 
tel:1%20800-864-8331,scheme = tel, uriString = 1 800-864-8331, isSkipSchemaParsing = 
false, isAddParticipant = false: PCR.oR@AJU 
10. ZTE Devices – Dump Modem Logs and Logcat Logs to the SD Card 
We discovered a vulnerability that allows any third-party app on the device to activate the writing of the 
modem and logcat logs to the SD card. This vulnerability has been present on each ZTE device we have 
examined with all of them were sold by US carriers. Specifically, the devices and their build fingerprints 
are provided below. 
Verizon ZTE Blade Vantage - ZTE/Z839/sweet:7.1.1/NMF26V/20180120.095344:user/release-keys 
AT&T ZTE Blade Spark - ZTE/Z971/peony:7.1.1/NMF26V/20171129.143111:user/release-keys 
T-Mobile ZTE Zmax Pro - ZTE/P895T20/urd:6.0.1/MMB29M/20170418.114928:user/release-keys 
Total Wireless ZTE Zmax Champ - ZTE/Z917VL/fortune:6.0.1/MMB29M/20170327.120922:user/release-keys 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
This vulnerability allows any app co-located on the device to use another app’s capabilities to obtain 
sensitive data that the initiating app itself lacks permission to access. An app using this vulnerability to 
monitor the user’s telephony behavior will require the READ_EXTERNAL_STORAGE permission. This 
permission allows an app to read from the device’s external storage (SD card). If the monitoring of the 
modem logs is to continue for an extended period of time, the attacking app should also periodically delete 
the logs since the aggregate size of the modem log files can start to fill up external storage. When this 
occurs, the user may notice a notification that indicates that the log files are taking up too much space 
external storage. To avoid this notification, the attacking app needs to delete old modem log files to ensure 
that adequate space remains so as to not potentially alert the user via a notification. The 
com.android.modem.service.ISdlogService interface (explained later) conveniently provides the 
deleteAllLog() method, so the attacking app does not need to request the WRITE_EXTERNAL_STORAGE 
permission. 
In 
any 
case, 
the 
app 
facilitating 
the 
modem 
logging 
functionality 
, 
com.android.modem.service (versionCode=25, versionName=7.1.1), cannot be disabled by the user. 
If the modem logs themselves or a file containing only parsed data from them is to be exfiltrated from the 
device, the attacking app should also request the INTERNET permission. The modem logs will be written to 
a 
base 
directory 
of 
/sdcard/sd_logs. 
A 
concrete 
file 
path 
of 
a 
modem 
log 
is 
/sdcard/sd_logs/sdlog_09_11_24_58.qmdl.gz. This file is a Qualcomm Extensible Monitor Log file 
that has been compressed using gzip. The modem log contains the raw SMS Protocol Data Units (PDUs) 
for sent and received text messages, including the message body, timestamp, and telephone number. In 
addition, the modem log contains the phone numbers for placed and received phone calls. The subsections 
below will be described used the ZTE Blade Vantage, although the process is the same for all ZTE devices 
we have examined. 
10.1 ZTE – Obtaining the Modem Log Vulnerability Details 
The Android OS contains a service manager that allows apps to obtain a reference to the available services 
on the device. The service manager resides within the system_server process. The system_server 
process is a critical OS process that provides necessary services to apps on the device. Apps that execute as 
the system user (the same user that system_server uses) have the ability to register services with the OS 
service manager and make them available to other apps on the device. The ZTE Blade Vantage contains a 
pre-installed platform app with a package name of com.android.modem.service (versionCode=25,  
versionName=7.1.1) that executes as the system user and registers a service named ModemService. The 
com.android.modem.service.ModemService class within the com.android.modem.service package 
explicitly registers itself with an interface class of com.android.modem.service.IModemService$Stub 
to the Android OS service manager. The com.android.modem.service.IModemService$Stub is 
provided to the Android OS service manager so that other apps can obtain a reference to this interface and 
use 
the 
service. 
Method 
calls 
on 
this 
interface 
will 
be 
delivered 
to 
the 
com.android.modem.service.ModemService class within the com.android.modem.service package. 
The com.android.modem.service.ModemService class itself acts as a mini service manager for services 
it offers within its own app (com.android.modem.service). Specifically, the IModemService interface 
contains 5 methods that can be called where each returns a service interface. Their method signatures are 
provided below, showing the method name and the service interface they return. 
getAdbLogInterface() returns com.android.modem.service.ILogService 
getAssistantInterface() returns com.android.modem.service.IAssistantService 
getModemInterface() returns com.android.modem.service.IModem 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
getModemRegistryInterface() returns com.android.modem.service.IModemRegistry 
getSdlogInterface() returns com.android.modem.service.ISdlogService 
The attacking app first obtains a reference to the service named ModemService using Java reflection from 
the 
Android 
OS 
service 
manager. 
This 
retrieved 
service 
has 
an 
interface 
named 
com.android.modem.service.IModemService. Using the IModemService reference, the attacking app 
can call the getSdlogInterface() method exported by the IModemService interface. The 
getSdlogInterface() 