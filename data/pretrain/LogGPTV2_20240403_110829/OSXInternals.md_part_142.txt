I/O Kit memory allocators and also the memory consumed by I/O Kit object instances. ioclasscount
displays the instance counts of one or more I/O Kit classes.
 The iostat command can be used to display kernel-level I/O statistics for disk devices.
 The latency command can be used to monitor scheduling and interrupt latencyfor example, to see if
a thread is causing interrupts to be blocked for too long.
 ioreg, IORegistryExplorer.app, and Mr. Registry.app can be used to search and browse the I/O
Registry.
10.8.7. Stabs
Mac OS X uses the GNU C compiler (GCC) suite for compiling C, C++, and Objective-C source. When the
compiler is passed the -g option, it produces additional debugging information in the Mach-O output. This
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 75 of 79
debugging information can then be used by both KDB and GDB. By default, the popular stabs format is
used on Mac OS X to represent information that describes a program to a debugger. Originally used for the
pdx Pascal debugger, stabs began as a set of special symbols within an "a.out" executable. It has since been
adopted widely and has been encapsulated into several other file formats.
The word stabs is derived from symbol table. Stabs describe various features of the program source, such as
source filenames and line numbers, function names, function parameters, variable types, and variable
scopes. The information is emitted through a set of assembler directives called stab directives (or simply
stabs). The assembler uses the stabs information while populating the symbol table and the string table of
object files. The linker consolidates one or more object files into a final executable. Thereafter, a debugger
can examine the stabs in the executable to glean debugging information.
Consider a simple C function such as the one shown in Figure 1044.
Figure 1044. A simple C function
01: // func.c
02: unsigned int
03: func(unsigned int x, unsigned int y)
04: {
05: unsigned int sum;
06: int negative;
07:
08: sum = x + y;
09: negative = -1 * sum;
10:
11: return sum;
12: }
Let us compile the function shown in Figure 1044 first without any debugging options and then with
debugging turned on. We will save the intermediate assembly output for the latter compilation so that we
can examine the stabs encodings generated.
$ gcc -Wall -c -o func_nondebug.o func.c
$ gcc -Wall -g -c -o func_debug.o func.c
$ gcc -Wall -g -S -o func_debug.s func.c
$ ls func*
func.c func_debug.o func_debug.s func_nondebug.o
Let us use nm to display the symbol tables of the object files obtained. Note that we will use nm with the -a
option, which displays all symbol table entries, including those inserted for use by debuggers.
$ nm -a func_nondebug.o
00000000 T _func
We see that the nondebug version of the object file has only one symbol: _func. This makes sense, since
func.c contains only one function, func(), which does not call any external functions.
$ nm -a func_debug.o
00000044 - 01 0000 RBRAC
00000000 - 01 0000 LBRAC
00000044 - 01 0000 SO
00000000 - 01 0000 BNSYM
00000000 - 01 0004 SLINE
00000014 - 01 0008 SLINE
00000024 - 01 0009 SLINE
00000030 - 01 000b SLINE
00000034 - 01 000c SLINE
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 76 of 79
00000044 - 01 0000 ENSYM
00000044 - 00 0000 FUN
00000000 - 01 0002 SO /tmp/
00000000 T _func
00000000 - 01 0002 SO func.c
00000000 - 01 0004 FUN func:F(0,1)
00000000 - 00 0000 OPT gcc2_compiled.
00000000 - 00 0000 LSYM int:t(0,2)=r(0,2);-2147483648;2147483647;
00000018 - 00 0006 LSYM negative:(0,2)
0000001c - 00 0005 LSYM sum:(0,1)
00000000 - 00 0000 LSYM unsigned int:t(0,1)=r(0,1);0;037777777777;
00000058 - 00 0003 PSYM x:p(0,1)
0000005c - 00 0003 PSYM y:p(0,1)
In contrast, the debug version of the object file has several other symbols besides _func. These additional
symbols are stabs that encode the program's structure. Let us look at the assembly file (func_debug.s)
corresponding to the debug compilation and analyze the stabs to understand their purpose. Figure 1045
shows the assembly file's contents, with the stabs information highlighted.
Figure 1045. Stabs-encoded debugging information in an assembly file
$ cat func_debug.s
.section __TEXT,__text,regular,pure_instructions
.section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32
.machine ppc
.stabs "/tmp/",100,0,2,Ltext0
.stabs "func.c",100,0,2,Ltext0
.text
Ltext0:
.stabs "gcc2_compiled.",60,0,0,0
.align 2
.globl _func
_func:
.stabd 46,0,0
.stabd 68,0,4
stmw r30,-8(r1)
stwu r1,-64(r1)
mr r30,r1
stw r3,88(r30)
stw r4,92(r30)
.stabd 68,0,8
lwz r2,88(r30)
lwz r0,92(r30)
add r0,r2,r0
stw r0,28(r30)
.stabd 68,0,9
lwz r0,28(r30)
neg r0,r0
stw r0,24(r30)
.stabd 68,0,11
lwz r0,28(r30)
.stabd 68,0,12
mr r3,r0
lwz r1,0(r1)
lmw r30,-8(r1)
blr
.stabs "func:F(0,1)",36,0,4,_func
.stabs "unsigned int:t(0,1)=r(0,1);0;037777777777;",128,0,0,0
.stabs "x:p(0,1)",160,0,3,88
.stabs "y:p(0,1)",160,0,3,92
.stabs "sum:(0,1)",128,0,5,28
.stabs "negative:(0,2)",128,0,6,24
.stabs "int:t(0,2)=r(0,2);-2147483648;2147483647;",128,0,0,0
.stabn 192,0,0,_func
.stabn 224,0,0,Lscope0
Lscope0:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 77 of 79
.stabs "",36,0,0,Lscope0-_func
.stabd 78,0,0
.stabs "",100,0,0,Letext0
Letext0:
.subsections_via_symbols
As Figure 1045 shows, stabs assembler directives generated by GCC fall in three main classes on Mac OS
X: .stabs (string), .stabn (number), and .stabd (dot). These classes have the following formats:
.stabs "string",type,other,desc,value
.stabn type,other,desc,value
.stabd type,other,desc
For each class, the type field contains a number that provides basic information about the stab type. If the
number does not correspond to a valid stab type, the symbol is not treated as a stab. The other fields in a stab
are interpreted based on the stab type. For example, the string field of the .stabs directive has the format
"name:symbol-descriptor type-information", where the fields have the following meanings.
 The name field names the symbol represented by the stab. It can be omitted for unnamed objects.
 symbol-descriptor describes the kind of symbol represented by the stab.
 type-information either refers by number to a type that has already been defined or defines a new
type.
A new type definition may refer to previously defined types by number. Whereas the type number is a single
number on some implementations, it is a (file-number, filetype-number) pair on others, including Mac
OS X. A file-number value starts from 0 and is incremented for each distinct source file in the
compilation. A filetype-number value starts from 1 and is incremented for each distinct type in that file.
In the example shown in Figure 1045, we see the following stab types (in the order that they appear): 100,
60, 46, 68, 36, 128, 160, 192, 224, and 78. Table 105 shows the meanings of these symbols. Note that a
given programming language may have certain stab types specific to it.
Table 105. Stab Symbol Types Used in the Example from Figure 1045
Symbol Number Symbol Name Description
36 (0x24) N_FUN Function name
46 (0x2E) N_BNSYM Begin nsect symbol
60 (0x3C) N_OPT Debugger options
68 (0x44) N_SLINE Line number in text segment
78 (0x4E) N_ENSYM End nsect symbol
100 (0x64) N_SO Path and name of source file
128 (0x80) N_LSYM Stack variable or type
160 (0xA0) N_PSYM Parameter variable
192 (0xC0) N_LBRAC Beginning of a lexical block
224 (0xE0) N_RBRAC End of a lexical block
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 78 of 79
Let us analyze some of the stab directives to understand how the scheme works.
.stabs "/tmp/",100,0,2,Ltext0
.stabs "func.c",100,0,2,Ltext0
Stab type 100 (N_SO) specifies the paths and names of source files. The symbol's value in this
caseLtext0represents the start address of the text section that comes from the given file.
.stabs "gcc2_compiled.",60,0,0,0
Stab type 60 (N_OPT) specifies debugger options. In this case, "gcc2_compiled" is defined to allow GDB to
detect that GCC compiled this file.
.stabd 68,0,4
...
.stabd 68,0,8
...
.stabd 68,0,9
...
.stabd 68,0,11
...
.stabd 68,0,12
Stab type 68 (N_SLINE) represents the start of a source line. In this case, we have stabs for line numbers 4, 8,
9, 11, and 12the other line numbers in func.c do not contain active code.
.stabs "unsigned int:t(0,1)=r(0,1);0;037777777777;",128,0,0,0
...
.stabs "int:t(0,2)=r(0,2);-2147483648;2147483647;",128,0,0,0
Stab type 128 (N_LSYM) is used both for variables allocated on the stack and for giving names to types. In
this case, the stab names the C type unsigned int. The t symbol descriptor is followed by the type number
(0,1), thus associating unsigned int with type number (0,1). The r type descriptor defines a type as a
subrange of another type. Here, it (circularly) defines (0,1) as a subrange of (0,1), with the lower and
upper bounds being 0 and the octal number 0037777777777 (that is, 0xFFFF_FFFF), respectively. Similarly,
the type (0,2)the second type number in the filerepresents the C type int, with upper and lower bounds
being 2147483647 (231) and -2147483648 (231), respectively.
.stabs "func:F(0,1)=r(0,1);0000000000000;0037777777777;",36,0,4,_func
Stab type 36 (N_FUN) describes a function. In this example, the function's name is func. The F symbol
descriptor identifies it as a global function. The type information that follows F represents the return type of
the function(0,1), or unsigned int, in this case. The stab's value_funcspecifies the start of the function.
Note that the stab describing a function immediately follows the function's code.
.stabs "x:p(0,1)",160,0,3,88
.stabs "y:p(0,1)",160,0,3,92
Stab type 160 (N_PSYM) is used to represent the formal parameters of a function. The p symbol descriptor
specifies a parameter passed on the stack. Recall from our discussion of C calling conventions for the
PowerPC in Chapter 3 that even though the first few arguments are normally passed in registers, there is
always space reserved for them in the caller's stack, where the callee saves them after it is called. In this
example, we have two parameters named x and y. The type number following p(0,1)denotes the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 79 of 79
parameter's type. The desc field is 3 for both x and y, indicating that the parameters are on source line
number 3. The value field, which is 88 and 92 for x and y, respectively, represents the offset (from the
frame pointer) used to locate the parameter.
.stabs "sum:(0,1)",128,0,5,32
This stab corresponds to the variable named sum, whose type is (0,1). The variable is at source line number
5. Its offset from the frame pointer is 32 bytes.
.stabn 192,0,0,_func
.stabn 224,0,0,Lscope0
Stab types 192 (N_LBRAC) and 224 (N_RBRAC) correspond to the left and right brace, respectivelythey
represent the program's block structure. The value fields refer to assembly labels surrounding the scope that
is described by the N_LBRAC/N_RBRAC pair.
.stabs "",36,0,0,Lscope0-_func
This is an N_FUN stab with an empty string as the function name and Lscope0-_func as its value. The
purpose of such a stab is to indicate the address of the end of a function. In this case, the stab marks the end
of _func.
.stabs "",100,0,0,Letext0
This is an N_SO stab with an empty string as the filename and Lextext0 as the value. Similar in purpose to
an N_FUN stab with an empty string, this stab marks the end of the source file.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 11. File Systems Page 1 of 90
Chapter 11. File Systems
A file system is an operating system component that provides an abstract view of data on a storage device.
At the user-visible level, a file system's contents are usually organized hierarchically into files and
directories (or folderswe will use the terms directory and folder synonymously in this chapter and the next).
A file system's storage device is often persistent, but it is possibleand usefulto have file systems on
nonpersistent devices such as physical memory.
11.1. Disks and Partitions
A common medium for storing user data is a hard[1] disk drive. The storage space on a disk is divided at
the hardware level into fundamental units called sectors. In a typical hard drive, each sector holds 512
bytes[2] of user data. A sector may also hold some additional data used internally by the drivesuch as data
for error correction and synchronization. A disk may also have some number of spare sectors that are not
exposed through its interface. If a regular sector goes bad, the disk can attempt to transparently replace it
with a spare one. Modern drives deprecate the geometric Cylinder-Head-Sector (CHS) addressing model
for accessing a sector. The preferred model is Logical Block Addressing (LBA), in which addressable
storage on a drive appears as a linear sequence of sectors.
[1] Given that it uses rigid platters, a hard disk was originally so called to distinguish it from a
floppy disk.
[2] In contrast with disk drives, optical drives commonly use a sector size of 2KB.
The program in Figure 111 uses disk I/O control (ioctl) operations to retrieve and display basic information
about a disk device on Mac OS X.
Figure 111. Using ioctl operations to display information about a disk device
// diskinfo.c
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "diskinfo"
void
cleanup(char *errmsg, int retval)
{
perror(errmsg);
exit(retval);
}
#define TRY_IOCTL(fd, request, argp) \
if ((ret = ioctl(fd, request, argp)) \n", PROGNAME);
exit(1);
}
if ((fd = open(argv[1], O_RDONLY, 0)) < 0)
cleanup("open", 1);
TRY_IOCTL(fd, DKIOCGETFIRMWAREPATH, &fwPath);
TRY_IOCTL(fd, DKIOCGETBLOCKSIZE, &blockSize);
TRY_IOCTL(fd, DKIOCGETBLOCKCOUNT, &blockCount);
TRY_IOCTL(fd, DKIOCGETMAXBLOCKCOUNTREAD, &maxBlockRead);
TRY_IOCTL(fd, DKIOCGETMAXBLOCKCOUNTWRITE, &maxBlockWrite);
close(fd);
capacity1024 = (blockCount * blockSize) / (1ULL << 30ULL);
capacity1000 = (blockCount * blockSize) / (1000ULL * 1000ULL * 1000ULL);
printf("%-20s = %s\n", "Device", argv[1]);
printf("%-20s = %s\n", "Firmware Path", fwPath.path);
printf("%-20s = %llu GB / %llu GiB\n", "Capacity",
capacity1000, capacity1024);
printf("%-20s = %u bytes\n", "Block Size", blockSize);
printf("%-20s = %llu\n", "Block Count", blockCount);
printf("%-20s = { read = %llu blocks, write = %llu blocks }\n",
"Maximum Request Size", maxBlockRead, maxBlockWrite);