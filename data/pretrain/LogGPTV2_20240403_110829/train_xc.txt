.i flags
argument contains a multi-bit field defining the notification class of the
listening application and further single bit fields specifying the behavior
of the file descriptor.
.pp
if multiple listeners for permission events exist,
the notification class is used to establish the sequence
in which the listeners receive the events.
.pp
only one of the following notification classes may be specified in
.ir flags :
.tp
.b fan_class_pre_content
this value allows the receipt of events notifying that a file has been
accessed and events for permission decisions if a file may be accessed.
it is intended for event listeners that need to access files before they
contain their final data.
this notification class might be used by hierarchical storage managers,
for example.
.tp
.b fan_class_content
this value allows the receipt of events notifying that a file has been
accessed and events for permission decisions if a file may be accessed.
it is intended for event listeners that need to access files when they
already contain their final content.
this notification class might be used by malware detection programs, for
example.
.tp
.b fan_class_notif
this is the default value.
it does not need to be specified.
this value only allows the receipt of events notifying that a file has been
accessed.
permission decisions before the file is accessed are not possible.
.pp
listeners with different notification classes will receive events in the
order
.br fan_class_pre_content ,
.br fan_class_content ,
.br fan_class_notif .
the order of notification for listeners in the same notification class
is undefined.
.pp
the following bits can additionally be set in
.ir flags :
.tp
.b fan_cloexec
set the close-on-exec flag
.rb ( fd_cloexec )
on the new file descriptor.
see the description of the
.b o_cloexec
flag in
.br open (2).
.tp
.b fan_nonblock
enable the nonblocking flag
.rb ( o_nonblock )
for the file descriptor.
reading from the file descriptor will not block.
instead, if no data is available,
.br read (2)
fails with the error
.br eagain .
.tp
.b fan_unlimited_queue
remove the limit of 16384 events for the event queue.
use of this flag requires the
.b cap_sys_admin
capability.
.tp
.b fan_unlimited_marks
remove the limit of 8192 marks.
use of this flag requires the
.b cap_sys_admin
capability.
.tp
.br fan_report_tid " (since linux 4.20)"
.\" commit d0a6a87e40da49cfc7954c491d3065a25a641b29
report thread id (tid) instead of process id (pid)
in the
.i pid
field of the
.i "struct fanotify_event_metadata"
supplied to
.br read (2)
(see
.br fanotify (7)).
.tp
.br fan_enable_audit " (since linux 4.15)"
.\" commit de8cd83e91bc3ee212b3e6ec6e4283af9e4ab269
enable generation of audit log records about access mediation performed by
permission events.
the permission event response has to be marked with the
.b fan_audit
flag for an audit log record to be generated.
.tp
.br fan_report_fid " (since linux 5.1)"
.\" commit a8b13aa20afb69161b5123b4f1acc7ea0a03d360
this value allows the receipt of events which contain additional information
about the underlying filesystem object correlated to an event.
an additional record of type
.br fan_event_info_type_fid
encapsulates the information about the object and is included alongside the
generic event metadata structure.
the file descriptor that is used to represent the object correlated to an
event is instead substituted with a file handle.
it is intended for applications that may find the use of a file handle to
identify an object more suitable than a file descriptor.
additionally, it may be used for applications monitoring a directory or a
filesystem that are interested in the directory entry modification events
.br fan_create ,
.br fan_delete ,
and
.br fan_move ,
or in events such as
.br fan_attrib ,
.br fan_delete_self ,
and
.br fan_move_self .
all the events above require an fanotify group that identifies filesystem
objects by file handles.
note that for the directory entry modification events the reported file handle
identifies the modified directory and not the created/deleted/moved child
object.
the use of
.br fan_class_content
or
.br fan_class_pre_content
is not permitted with this flag and will result in the error
.br einval .
see
.br fanotify (7)
for additional details.
.tp
.br fan_report_dir_fid " (since linux 5.9)"
events for fanotify groups initialized with this flag will contain
(see exceptions below) additional information about a directory object
correlated to an event.
an additional record of type
.br fan_event_info_type_dfid
encapsulates the information about the directory object and is included
alongside the generic event metadata structure.
for events that occur on a non-directory object, the additional structure
includes a file handle that identifies the parent directory filesystem object.
note that there is no guarantee that the directory filesystem object will be
found at the location described by the file handle information at the time
the event is received.
when combined with the flag
.br fan_report_fid ,
two records may be reported with events that occur on a non-directory object,
one to identify the non-directory object itself and one to identify the parent
directory object.
note that in some cases, a filesystem object does not have a parent,
for example, when an event occurs on an unlinked but open file.
in that case, with the
.br fan_report_fid
flag, the event will be reported with only one record to identify the
non-directory object itself, because there is no directory associated with
the event.
without the
.br fan_report_fid
flag, no event will be reported.
see
.br fanotify (7)
for additional details.
.tp
.br fan_report_name " (since linux 5.9)"
events for fanotify groups initialized with this flag will contain additional
information about the name of the directory entry correlated to an event.
this flag must be provided in conjunction with the flag
.br fan_report_dir_fid .
providing this flag value without
.br fan_report_dir_fid
will result in the error
.br einval .
this flag may be combined with the flag
.br fan_report_fid .
an additional record of type
.br fan_event_info_type_dfid_name ,
which encapsulates the information about the directory entry, is included
alongside the generic event metadata structure and substitutes the additional
information record of type
.br fan_event_info_type_dfid .
the additional record includes a file handle that identifies a directory
filesystem object followed by a name that identifies an entry in that
directory.
for the directory entry modification events
.br fan_create ,
.br fan_delete ,
and
.br fan_move ,
the reported name is that of the created/deleted/moved directory entry.
for other events that occur on a directory object, the reported file handle
is that of the directory object itself and the reported name is '.'.
for other events that occur on a non-directory object, the reported file handle
is that of the parent directory object and the reported name is the name of a
directory entry where the object was located at the time of the event.
the rationale behind this logic is that the reported directory file handle can
be passed to
.br open_by_handle_at (2)
to get an open directory file descriptor and that file descriptor along with
the reported name can be used to call
.br fstatat (2).
the same rule that applies to record type
.br fan_event_info_type_dfid
also applies to record type
.br fan_event_info_type_dfid_name :
if a non-directory object has no parent, either the event will not be reported
or it will be reported without the directory entry information.
note that there is no guarantee that the filesystem object will be found at the
location described by the directory entry information at the time the event is
received.
see
.br fanotify (7)
for additional details.
.tp
.b fan_report_dfid_name
this is a synonym for
.rb ( fan_report_dir_fid | fan_report_name ).
.pp
the
.i event_f_flags
argument
defines the file status flags that will be set on the open file descriptions
that are created for fanotify events.
for details of these flags, see the description of the
.i flags
values in
.br open (2).
.i event_f_flags
includes a multi-bit field for the access mode.
this field can take the following values:
.tp
.b o_rdonly
this value allows only read access.
.tp
.b o_wronly
this value allows only write access.
.tp
.b o_rdwr
this value allows read and write access.
.pp
additional bits can be set in
.ir event_f_flags .
the most useful values are:
.tp
.b o_largefile
enable support for files exceeding 2\ gb.
failing to set this flag will result in an
.b eoverflow
error when trying to open a large file which is monitored by
an fanotify group on a 32-bit system.
.tp
.br o_cloexec " (since linux 3.18)"
.\" commit 0b37e097a648aa71d4db1ad108001e95b69a2da4
enable the close-on-exec flag for the file descriptor.
see the description of the
.b o_cloexec
flag in
.br open (2)
for reasons why this may be useful.
.pp
the following are also allowable:
.br o_append ,
.br o_dsync ,
.br o_noatime ,
.br o_nonblock ,
and
.br o_sync .
specifying any other flag in
.i event_f_flags
yields the error
.b einval
(but see bugs).
.sh return value
on success,
.br fanotify_init ()
returns a new file descriptor.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
an invalid value was passed in
.i flags
or
.ir event_f_flags .
.b fan_all_init_flags
(deprecated since linux kernel version 4.20)
.\" commit 23c9deeb3285d34fd243abb3d6b9f07db60c3cf4
defines all allowable bits for
.ir flags .
.tp
.b emfile
the number of fanotify groups for this user exceeds 128.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enomem
the allocation of memory for the notification group failed.
.tp
.b enosys
this kernel does not implement
.br fanotify_init ().
the fanotify api is available only if the kernel was configured with
.br config_fanotify .
.tp
.b eperm
the operation is not permitted because the caller lacks the
.b cap_sys_admin
capability.
.sh versions
.br fanotify_init ()
was introduced in version 2.6.36 of the linux kernel and enabled in version
2.6.37.
.sh conforming to
this system call is linux-specific.
.sh bugs
the following bug was present in linux kernels before version 3.18:
.ip * 3
.\" fixed by commit 0b37e097a648aa71d4db1ad108001e95b69a2da4
the
.b o_cloexec
is ignored when passed in
.ir event_f_flags .
.pp
the following bug was present in linux kernels before version 3.14:
.ip * 3
.\" fixed by commit 48149e9d3a7e924010a0daab30a6197b7d7b6580
the
.i event_f_flags
argument is not checked for invalid flags.
flags that are intended only for internal use,
such as
.br fmode_exec ,
can be set, and will consequently be set for the file descriptors
returned when reading from the fanotify file descriptor.
.sh see also
.br fanotify_mark (2),
.br fanotify (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2012 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th mtrace 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
mtrace, muntrace \- malloc tracing
.sh synopsis
.nf
.b "#include "
.pp
.b "void mtrace(void);"
.b "void muntrace(void);"
.fi
.sh description
the
.br mtrace ()
function installs hook functions for the memory-allocation functions
.rb ( malloc (3),
.br realloc (3)
.br memalign (3),
.br free (3)).
these hook functions record tracing information about memory allocation
and deallocation.
the tracing information can be used to discover memory leaks and
attempts to free nonallocated memory in a program.
.pp
the
.br muntrace ()
function disables the hook functions installed by
.br mtrace (),
so that tracing information is no longer recorded
for the memory-allocation functions.
if no hook functions were successfully installed by
.br mtrace (),
.br muntrace ()
does nothing.
.pp
when
.br mtrace ()
is called, it checks the value of the environment variable
.br malloc_trace ,
which should contain the pathname of a file in which
the tracing information is to be recorded.
if the pathname is successfully opened, it is truncated to zero length.
.pp
if
.br malloc_trace
is not set,
or the pathname it specifies is invalid or not writable,
then no hook functions are installed, and
.br mtrace ()
has no effect.
in set-user-id and set-group-id programs,
.br malloc_trace
is ignored, and
.br mtrace ()
has no effect.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br mtrace (),
.br muntrace ()
t}	thread safety	mt-unsafe
.te
.hy
.ad
.sp 1
.\" fixme: the marking is different from that in the glibc manual,
.\" markings in glibc manual are more detailed:
.\"
.\"      mtrace: mt-unsafe env race:mtrace const:malloc_hooks init
.\"      muntrace: mt-unsafe race:mtrace const:malloc_hooks locale
.\"
.\" but there is something wrong in glibc manual, for example:
.\" glibc manual says muntrace should have marking locale because it calls
.\" fprintf(), but muntrace does not execute area which cause locale problem.
.sh conforming to
these functions are gnu extensions.
.sh notes
in normal usage,
.br mtrace ()
is called once at the start of execution of a program, and
.br muntrace ()
is never called.
.pp
the tracing output produced after a call to
.br mtrace ()
is textual, but not designed to be human readable.
the gnu c library provides a perl script,
.br mtrace (1),
that interprets the trace log and produces human-readable output.
for best results,
the traced program should be compiled with debugging enabled,
so that line-number information is recorded in the executable.
.pp
the tracing performed by
.br mtrace ()
incurs a performance penalty (if
.b malloc_trace
points to a valid, writable pathname).
.sh bugs
the line-number information produced by
.br mtrace (1)
is not always precise:
the line number references may refer to the previous or following (nonblank)
line of the source code.
.sh examples
the shell session below demonstrates the use of the
.br mtrace ()
function and the
.br mtrace (1)
command in a program that has memory leaks at two different locations.
the demonstration uses the following program:
.pp
.in +4n
.ex
.rb "$ " "cat t_mtrace.c"
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    mtrace();
    for (int j = 0; j < 2; j++)
        malloc(100);            /* never freed\-\-a memory leak */
    calloc(16, 16);             /* never freed\-\-a memory leak */
    exit(exit_success);
}
.ee
.in
.pp
when we run the program as follows, we see that
.br mtrace ()
diagnosed memory leaks at two different locations in the program:
.pp
.in +4n
.ex
.rb "$ " "cc \-g t_mtrace.c \-o t_mtrace"
.rb "$ " "export malloc_trace=/tmp/t"
.rb "$ " "./t_mtrace"
.rb "$ " "mtrace ./t_mtrace $malloc_trace"
memory not freed:
-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
   address     size     caller
0x084c9378     0x64  at /home/cecilia/t_mtrace.c:12
0x084c93e0     0x64  at /home/cecilia/t_mtrace.c:12
0x084c9448    0x100  at /home/cecilia/t_mtrace.c:16
.ee
.in
.pp
the first two messages about unfreed memory correspond to the two
.br malloc (3)
calls inside the
.i for
loop.
the final message corresponds to the call to
.br calloc (3)
(which in turn calls
.br malloc (3)).
.sh see also
.br mtrace (1),
.br malloc (3),
.br malloc_hook (3),
.br mcheck (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,