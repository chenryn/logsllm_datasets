of DFHMT: initialization, appending data, query and veriﬁca-
tion will also be changed accordingly. The main algorithms of
DFHMT are described in this section.
4.1. Initialization
The initialization algorithm of DFHMT consists of three
parts: generating the key, initialization of veriﬁer and initializa-
tion of prover. First, veriﬁer executes genKey to generate and
return the public/private key pair of FHE, the public key is used
to append data and tree extension, and the private key is used
to verify the integrity of the data. Both veriﬁer and prover do
not ﬁx the depth of their own Merkle tree during the initializa-
tion phase, all initial values of depth are 0. Merkle trees of both
sides are automatically adjusted scale as needed when inserting
data, and the depth of the tree will change.
No data is inserted during initialization, then the Merkle trees
of both sides are empty and no node is generated, so set the size
and capacity to 0. The initialization of veriﬁer also needs to ini-
tialize evidence information basis , which is the set of a series
of root nodes and is set to empty at initialization. The initializa-
tion of prover sets DS for storing data to empty at initialization,
preparing for inserting data.
4.2. Data Appending
Before appending the data, needs to determine whether the
Merkle tree has been full by comparing the maximum number
of data that the current Merkle tree can accommodate with the
current total amount of data. If full, should use the tree exten-
sion algorithm to scale the tree ﬁrst to ensure that can accom-
modate more data and continue appending data.
When appending a data, veriﬁer needs to search for the ap-
pending position from the root node downward to ﬁnd the path
from the appending position to the root node, multiply the data
elements with the weights on the path in sequence, and ﬁnally
add the result to the root node and add 1 to the current total
amount of data . Veriﬁer uses the multiplication and addition
of plaintext values, does not need to store the data elements. In
fact, veriﬁer appends the data just to update the evidence infor-
mation . In addition, veriﬁer only calculates the value of the
root node without having to calculate and store the values of
other internal nodes in the path.
Similar to the process of appending data by veriﬁer, when
prover appends a data, it ﬁrst needs to ﬁnd the path from the
appending position to the root node. Then use FHE encryption
algorithm to encrypt the data elements, and, use elements en-
crypted and weights in path to do ciphertext multiplication by
appending
Algorithm 1 Data
appendVeri f ier(data)
Input: data element data
Output: if appending data is successful, output 1, otherwise
algorithm of
veriﬁer
output 0
1: begin
2: if (size == capacity) then
extendVeri f er(weights)
3:
4: end if
5: i ← size
6: prober ← f ind(i, Veri f ierTree)
7: upd ← data
8: for every-level do
9:
10:
11: end for
12: basis.update(upd)
13: size ← size + 1
14: return 1
upd ← upd × prober.weight
prober ← upd × prober.parent
layer and use elements encrypted and the internal nodes of cur-
rent layer in the path to do ciphertext addition with the FHE
ciphertext algorithm evaluateε{addε, multε}, which is to update
the internal nodes in the path. Finally stores the data to DS ,
and add 1 to the current total amount of data size.
data
appending
Algorithm 2
appendProver(data, hpk)
Input: data element data, the public key of FHE hpk
Output: if appending data is successful, output 1, otherwise
algorithm of
prover
output 0
1: begin
2: i ← size
3: prober ← f ind(i, ProverTree)
4: upd ← encryptε(hpk, data)
5: for every-level do
6:
7:
8: end for
9: DS .insert(data)
10: size ← size + 1
11: return 1
upd ← upd ⊗ prober.weight
prober ← upd × prober.parent
4.3. Tree extension
DFHMT supports dynamic extension of scale, which means
that the scale of the tree can be dynamically extended as needed.
After initialization, the Merkle tree is empty, does not exist any
weight in VeriﬁerTree and does not exist any weight and value
in ProverTree. Therefore, need to extend the tree once before
appending the ﬁrst data. First, generate a leaf node, in order
to be consistent with the subsequent tree structure, a root node
is generated above the leaf node, and the pointer of rchild of
the root node is null. Then increase the depth of the tree by 1,
and change the capacity of data to 1 so that you can append the
6
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
7
ﬁrst data. When appending the second data, the Merkle tree is
still full, no additional data can be appended, and extend the
tree again. First, generate a node with the value 0 as the right
child of the root node, and then generate a new root node. The
original root node is used as the left child node of the new root
node, the value of the new root node is the product of the value
of the original root node and the corresponding weight. The
depth of the tree increases by 1, the capacity of data doubled.
DFHMT extends the tree when inserting No.1 and No.2 data
as shown in Fig. 6. Continue to append the third data, also
need to extend the scale of the Merkle tree. After extension,
the right subtree structure is similar to the tree structure before
extension, but the initial values of all nodes are 0. And then
generate a new root node, the new root node is also the product
of the value of the original root node and the corresponding
weight. It is noteworthy that the pointer of rchild of the new
root node is empty.
Fig. 6. DFHMT extends the tree when inserting no.1 and no.2 data
It is also mentioned in the DFHMT Construction Method
(Section 3.1) that when capacity reached the threshold τ , if
use the method that extend to full binary tree at one time, it
will cause a lot of redundancy. In order to overcome this short-
coming, when aize = capacity and capacity ≥ τ, the tree is
gradually extended at a ﬁxed value µ , that is, each extension
can continue to append µ data, capacity no longer double, but
increase µ. The changes before and after the Merkle tree are
extended with ﬁxed value µ are shown in Fig. 7, the capacity of
data is changed from α to α+µ , the original depth of the tree is,
which is not change after this extension, and does not generate
new root node. Only when capacity = 2d−1 the depth of the tree
is increased by 1, and a new root node is generated. After ex-
tending the scale, can perform appending operation according
to the data appending algorithm.
Fig. 7. DFHMT extends the tree with ﬁxed value µ
7
The key point in extending scale algorithm is to generate a
speciﬁc number of weight, and the way to calculate the num-
ber of weight needed for the two extension strategies is diﬀer-
ent. The number of weight required for each extension with the
double extension strategy is related to the depth of the tree and
can be simply written as 2d. The number of weight required for
each extension with the ﬁxed value µ extension is related to µ,
the depth of the tree and the current amount of data, it can be
calculated by Algorithm 3.
Algorithm 3 Algorithm to calculate the number of weight re-
quired for µ extension calcNumO f Weights(µ, d, size)
Input: ﬁxed value µ , depth d , the amount of data size ;
Output: the number of weight required for extension;
1: begin
2: ret ← 2µ − 1
3: t ← size/µ
4: d ← d − log2 µ
5: while t mod 2 == 0 and d! = 1 do
ret ← ret + 1
6:
d ← d − 1
7:
t ← t/2
8:
9: end while
10: if d == 1 then
ret ← ret + 1
11:
12: end if
13: return ret
When size = capacity and capacity < τ , DFHMT gen-
erates 2d weight for extension. When size = capacity and
capacity ≥ τ, calculates the number of the weight required by
calcNumO f Weights and then generates the weights required
for the extension. In the tree extension algorithm, according to
the relationship capacity and 2d−1 to judge whether a new root
node needs to be generated. When there is no need to increase
the depth of the tree, weights is only used to construct a part
of the tree branch, and the evidence information basis does not
need to be updated.
Veriﬁer encrypts all the elements in with the FHE encryp-
tion algorithm to get [weights]FHE . Prover uses [weights]FHE
to update ProberTree , which using FHE ciphertext opera-
tions. Although ProberTree and Veri f ierTree use the diﬀerent
weights, the steps in extending scale are basically the same. Be-
cause ProberTree contains not only the ciphertext weights, but
also the values of the internal nodes, it is necessary to set the
internal nodes of the right subtree newly generated to 0 (cipher-
text) when extending the scale.
4.4. Query
One of the obvious features of streaming data is that the
amount of data increases over time, and the data source sends
the data to the server in order. The data stored in the server has
a certain time sequence, therefore querying in chronological or-
der meets the need of the scene. As shown in Fig. 8, the data
arrives chronologically, and the query can be divided into two
types: single-element query and range query. Single element
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT(cid:166)(cid:11)(cid:20)(cid:12)1(cid:85)d= 1capacity = 1(cid:166)(cid:11)(cid:21)(cid:12)(cid:166)(cid:11)(cid:20)(cid:12)(cid:166)(cid:11)(cid:26)(cid:12)(cid:166)(cid:11)(cid:21)(cid:12)2(cid:85)1(cid:85)d= 2capacity = 221d= 0capacity = 0(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:302)d = 101capacity = (cid:68)d = 101capacity = (cid:68)(cid:80)(cid:14)100(cid:85)101(cid:85)(cid:17)(cid:17)(cid:17)(cid:541)...(cid:17)(cid:17)(cid:17)2(cid:85)1(cid:85)99(cid:85)(2)(cid:72)(1)(cid:72)(3)(cid:72)(6)(cid:72)(9)(cid:72)(2)(cid:72)(7)(cid:72)(1)(cid:72)(2)(cid:72)(1)(cid:72)(39)(cid:72)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
8
extension
Algorithm 4
tree
extendVeri f ier(weights)
Input: set of weights weights
Output: if extension is successful, return 1, otherwise return
algorithm of
veriﬁer
0
else
if capacity == 0 then
depth ← depth + 1
root ← Veri f ierTree
newRoot.weight ← weights[0]
newRoot.lchild ← root
root.parent ← newRoot
root ← newRoot
basis.add(basis × weights[0])
1: begin
2: if depth == 1 or capacity == 2depth−1 then
3:
4:
5:
6:
7:
8:
9:
10: end if
11: if capacity < τ then
12:
capacity ← 1
13:
14:
capacity ← capacity × 2
15:
16:
17: else
18:
19: end if
20: for weight in weights do
prober ← getPosition()
21:
child.weight ← weight
22:
if prober.lchild == NULL then
23:
prober.lchild ← child
24:
25:
prober.rchild ← child
26:
end if
27:
child.parent ← prober
28:
29: end for
30: return 1
end if
capacity ← capacity + µ
else
tree
extension
Algorithm 5
extendProver([weights]FHE)
Input: set of ciphertext weights [weights]FHE
Output: if extension is successful, return 1, otherwise return
algorithm of
prover
0