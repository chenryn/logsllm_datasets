your users to quote their URLs. The solution we present allows a pair of single quotes
or a pair of double quotes to be placed around the URL. When a URL is quoted, it must
start with one of several schemes: chttps?|ftp|file or one of two subdomains cuu|
ftp. After the scheme or subdomain, the regex allows the URL to include any character,
except for line breaks, and the delimiting quote.
The regular expression as a whole is split into three altermatives. The first altemative is
the regex from the previous recipe, which matches an unquoted URL, trying to differ-
entiate berween English punctuation and URL characters. The second alternative
matches a double-quoted URL. The third altermative matches a single-quoted URL. We
au punoe dno fumde e m aeue aus e ueq e saeue om asn
opening quote and a backreference for the closing quote, because we cannot use a
backreference inside the negated character class that excludes the quote character from
the URL.
We chose to use single and double quotes because that’s how URLs commonly appear
in HTML and XHTML files. Quoting URLs this way is natural to people who work on
the Web, but you can easily edit the regex to allow different pairs of characters to delimit
URLs.
SeeAlso
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.2 explains how to match nonprinting characters. Recipe 2.3 explains character
classes. Recipe 2.6 explains word boundaries. Recipe 2.8 explains altermation.
Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
8.3 Finding Quoted URLs in FullText I 441
---
## Page 458
8.4FindingURLswithParenthesesinFullText
Problem
You want to find URLs in a larger body of text. URLs may or may not be enclosed in
punctuation that is part of the larger body of text rather than part of the URL. You want
to correctly match URLs that include pairs of parentheses as part of the URL, without
matching parentheses placed around the entire URL.
Solution
b(?: (?:https?|ftp|fi1e) :// |w\ | ftp\  )
?:\([-A-Z0-9+&@#/%=~_|$?!:, -J*\)I[-A-Z0-9+&@#/%=~_1$?!:,- ])*
(?: \([-A-Z0-9+&@#/%=~_1$?!:, -]*\)I[A-Z0-9+&@#/%=~_1$])
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
b(?: (?:https?|ftp|fi1e) :// |ww\ |ftp -)(?:^([-AZ0-9+&@#/%=_1$?!:, J*\) 
[A-Z0-9+8@#/%=~_1$?!:, ])*(?:\([-A-Z0-9+&@#/%=~_1$?!:, - J*\)T
[A-Z0-9+&@#/%=~_1$]}
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
Pretty much any character is valid in URLs, including parentheses. Parentheses are very
rare in URLs, however, and that’s why we don’t include them in any of the regular
expressions in the previous recipes. But certain important websites have started using
them:
http://en.wikipedia.org/wiki/PC_Tools_(Central_Point_Software)
http: //msdn,microsoft ,com/en-us/1ibrary/aa752574(Vs.85) -aspx
One solution is to require your users to quote such URLs. The other is to enhance your
regex to accept such URLs. The hard part is how to determine whether a closing pa-
renthesis is part of the URL or is used as punctuation around the URL, as in this
example:
RegexBuddy′s website (at http://ww.regexbuddy.com) is really cool.
Since it’s possible for one of the parentheses to be adjacent to the URL while the other
one isn’t, we can't use the technique for quoting regexes from the previous recipe. The
most straightforward solution is to allow parentheses in URLs only when they occur
in unnested pairs of opening and closing parentheses. The Wikipedia and Microsoft
URLs meet that requirement.
The two regular expressions in the solution are the same. The first uses free-spacing
mode to make it a bit more readable.
442 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 459
These regular expressions are essentially the same as the last regex in the solution to
Recipe 8.2. There are three parts to all these regexes: the list of schemes, followed by
the body of the URL that uses the asterisk quantifier to allow URLs of any length, and
the end of the URL., which has no quantifier (i.e., it must occur once). In the original
regex in Recipe 8.2, both the body of the URL and the end of the URL consisted of just
one character class.
The solutions to thisrecipereplace therwo characterclasses with more elaborate things.
The middle character class:
[-A-Z0-9+&@#/%=~_|$?! :, ]
has become:
\([-A-Z0-9+&@#/%=~_1$?!:, - ]*\)I[-A-Z0-9+&@#/%=~_1$?!:, -]
The final character class:
[A-Z0-9+&@#/%=~_1$]
has become:
[$|~=x/#g+6-0z-]1(\[*:i and d> are character classes. Writing this as (ab*c|
d*)*) would be a mistake. It might seem logical at first, because we allow any number
of the characters from  just fine. If we add an
inner asterisk directly on d>, the complexity of the regular expression becomes
8.4 Finding URLs with Parentheses in Full Text | 443
---
## Page 460
exponential. g
Replacement text flavors: NET, JavaScript, Perl
0$
Replacement text flavors: .NET, Java, XRegExp, PHP
\0
Replacement text flavors: PHIP, Ruby
&
Replacement text flavor: Ruby
">\g
Replacement text flavor: Python
444 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 461
When programming, you can implement this search-and-replace as explained in
Recipe 3.15.
Discussion
The solution to this problem is very straightforward. We use a regular expression to
match a URL., and then replace it with RL#, where URi represents
the URL that we matched. Different programming languages use different syntax for
the replacement text, hence the long list of solutions to this problem. But they all do
exactly the same thing. Recipe 2.20 explains the replacement text syntax.
See Also
Recipes 8.2 or 8.4 explain the regular expressions to be used along with these replace-
ment texts.
Techniques used in the replacement text in this recipe are discussed in Chapter 2.
Recipe 2.21 explains how to insert text matched by capturing groups into the replace-
ment text.
When programming, you can implement this search-and-replace as explained in
Recipe 3.15.
8.6Validating URNs
Problem
You want to check whether a string represents a valid Uniform Resource Name (URN),
as specified in RFC 2141, or find URNs in a larger body of text.
Solution
Check whether a string consists entirely of a valid URN:
\Aurn:
# Namespace Identifier
[a-z0-9][a-20-9-]{0,31:
# Namespace Specific String
[a-z0-9()+,\--:=@;$_!**%/?#]+
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
urn:[a-z0-9][a-z0-9-]{0,31}:[a-z0-9()+,^- :=@;$_1**%/?#]+$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Find a URN in a larger body of text:
8.6 Validating URNs | 445
---
## Page 462
\burn:
# Namespace Identifier
[a-20-9][a-20-9-]{0,31}:
# Namespace Specific String
[a-z0-9()+,\--:=@;$_!**%/?#]+
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
\burn:[a-z0-9][a-z0-9-]{0,31}: [a-20-9()+,\-. :=@;$_1**%/?#]+
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Find a URN in a larger body of text, assuming that puncruation at the end of the URN
is part of the (English) text in which the URN is quoted rather than part of the URN
itself:
\burn:
# Namespace Identifier
[a-z0-9][a-20-9-]{0,31}:
# Namespace Specific String
[a-20-9()+,\-. :=9;$_1**%/?#]*[a-20-9+=gs/]
Regex options: Free-spacing, case insensitive
Regexflavers: NET, Java, PCRE, Perl, Python, Ruby
burn: [a-20-9][a-z0-9-]{0,31}: [a-20-9()+, \- :=@;$_!**%/?#]*[a-20-9+=@$/]
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Discussion
A URN consists of three parts. The first part is the four characters urn:, which we can
add literally to the regular expression.
The second part is the Namespace Identifier (NID). It is berween 1 and 32 characters
long. The first character must be a lerter or a digit. The remaining characters can be
letters, digits, and hyphens. We match this using two character classes (Recipe 2.3):
the first one matches a letter or a digit, and the second one matches between O and 31
letters, digits, and hyphens. The NID must be delimited with a colon, which we again
add literally to the regex.
The third part of the URN is the Namespace Specific String (NSS). It can be of any
length, and can include a bunch of punctuation characters in addition to letters and
digits. We easily match this with another character class. The plus after the character
class repeats it one or more times (Recipe 2.12).
If you want to check whether a string represents a valid URN, all that remains is to add
anchors to the start and the end of the regex that match at the start and the end of the
string. We can do this with  in all flavors except Ruby, and with Ao and
\Z in all flavors except JavaScript. Recipe 2.5 has all the details on these anchors.
446 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 463
Things are a little trickier if you want to find URNs in a larger body of text. The punc-
tuation issue with URLs discussed in Recipe 8.2 also exists for URNs. Suppose you
have the text:
The URN is urn:nid:nss, isn’t it?
The issue is whether the comma is part of the URN. URNs that end with commas are
syntactically valid, but any human reading this English-language sentence would see
the comma as English punctuation, not as part of the URN. The last regular expression
in the *Solution* section solves this issue by being a little more strict than RFC 2141.
and is not likely to appear as English punctuation in a sentence mentioning a URN.
It restricts the last character of the URN to be a character that is valid for the NSS part,
This is easily done by replacing the plus quantifier (one or more) with an asterisk (zero
or more), and adding a second character class for the final character. If we added the
character class without changing the quantifier, we’d require the NSS to be at least two
characters long, which isn't what we want.
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.12 explains
repetition. Recipe 2.18 explains how to add comments.
8.7ValidatingGenericURLs
Problem
You want to check whether a given piece of text is a valid URL according to RFC 3986.
Solution
\A
(# Schene
[a-z][a-20-9+- .]*:
(# Authority & path
//
(@+[=+(),g$i%-\6-0z-e])
# User
([a-20-9\-._~%]+
# IPv6 host
# Naned host
\[[a-fo-9:.]+\]
|\[v[a-f0-9][a-z0-9\- -_%!$&’()*+,;=: ]+\])
# IPvFuture host
(:[0-9]+)?
# Port
(/[a-20-9\- -_%!$&’()*+,;==é]+)*/?
# Path
# Path without authority
(/?[a-z0-9)-._%!$8′()*+,;=:@]+(/[a-z0-9\--_~%!$&′()*+,;==@]+)*/?)？
|# Relative URL (no scheme or authority)
8.7 Validating Generic URLs | 447
---
## Page 464
(# Relative path
[a-z0-9\--_%!$&′()*+,;=@]+(/[a-z0-9-._%!$&’()*+,;=:@]+)*/?
[# Absolute path
(/[a-20-9\-._%!ss’()*+,;=:@]+)+/？
）
1
 Query
[a-z][a-z0-9+\- . ]*):
(# Authority & path
//
(?[a-z0-9\- ._"%!$&′()*+,;=]+@)?
# User
(?[a-z0-9\-._%]+
\[[a-f0-9:]+\]
# Named host
# IPv6 host
\[v[a-f0-9][a-20-9\- -_%!$&′()*+,;=: ]+\])
# IPvFuture host
（+[6-0]:)
# Port
(?(/[a-z0-9\- -_
%!$8′()*+,;=:8]+)*/？)
|# Path without authority
# Path
(?/?[a-z0-9\-._%!$8'()*+,;=:@]+
{/(+[:=+(),gsi%-\6-0z-e]/)
|# Relative URL (no scheme or authority)
(?
# Relative path
[a-20-9\-._%!$&′()*+,;=@]+(/[a-z0-9\-._%!$&’()*+,;=：é]+)*/?
[# Absolute path
(/[a-20-9\-._x!ss()*+,;==é]+)+/?
1