impl_deps = GET_IMPLICIT(cov[i])
deps = expl_deps ∪ impl_deps
seed = MERGE(deps ∪ cov[i])
C∪ = cov[i]
S = S ∪ seed
return I
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
3:
4:
5:
6:
7:
8:
9:
13:
14:
15:
16:
17:
Algorithm 2 Pseudocode for capturing explicit and
implicit dependencies.
1: procedure GET_EXPLICIT(c)
2:
deps = /0
T = TRACE_OF(T)
DG = build_dependency_graph(T )
for arg in c.args do
expl_deps = DG.neighbors
for expl_dep in expl_deps do
deps ∪ = GET_IMPLICIT(expl_dep)
deps ∪ = {expl_dep}
10:
return deps
11: procedure GET_IMPLICIT(c)
12:
impl_deps = /0
for uc in upstream_calls(c) do
if uc.WRITE_deps ∩ c.READ_deps then
impl_deps ∪ = GET_EXPLICIT(uc)
impl_deps ∪ = {uc}
return deps
Shine captures those dependencies.
Explicit Dependencies. For each trace, MoonShine
builds a dependency graph that consists of two types of
nodes: results and arguments. Result nodes correspond
to values returned by system calls. The result nodes store
the following information: 1) value returned, 2) return
type (pointer, int, or semantic) and 3) the call in the trace
which produced the result. Argument nodes similarly
store the value of the argument, the type, and the call
to which the argument belongs. An edge from argument
node a to result node r indicates that a’s value relies on
the call which produced r. MoonShine builds the graph
as it parses the trace. For the returned value of each call,
it constructs the corresponding result node and adds it to
the graph. Afterwards, it places the result node in a re-
sult map that is indexed using the composite key of (type,
value). For each argument in a call, MoonShine checks
the result cache for an entry. A hit indicates the existence
of at least one system call whose result has the same type
and value as the current argument. MoonShine iterates
over all the result nodes stored in the map for the spe-
ciﬁc type and value and adds one edge from the argument
node to each result node in the graph.
Once the argument dependency graph is constructed,
MoonShine identiﬁes explicit dependencies for a given
call by enumerating the call’s list of arguments and for
each argument MoonShine visits the corresponding ar-
gument node in the dependency graph. For every edge
from the argument node to a result node, MoonShine
marks the calls that produced the result node as an ex-
plicit dependency. After traversing the entire list, Moon-
Shine returns all calls marked as explicit dependencies.
Implicit Dependencies.
In order for the coverage
achieved by a system call ci to be affected by the prior ex-
ecution of system call c j, c j’s execution must inﬂuence
the evaluation of a conditional in ci’s execution. This
is because the only values that can be used to evaluate
a conditional are those that are passed as arguments or
those existing in the kernel. Therefore, if a call ci is an
implicit dependency of call c j then c j must have a condi-
732    27th USENIX Security Symposium
USENIX Association
Seed 
Programs
Traces
Seeds
4
Implementation
Progra
Progra
m 1
m 1
Trace 
Generator
Seed Distiller
OS 
Fuzzer
System 
Calls
Coverage
OS Kernel (Instrumented)
SsO
Figure 3: MoonShine workﬂow
tional in its control ﬂow which depends on a global value
v that is modiﬁed by ci.
This gives rise to the following deﬁnitions. A global
variable v is a read dependency of a system call c if c
reads v in a conditional. Similarly, a global variable v is
a write dependency of a system call c if c ever writes to
v. As such, a call ca is an implicit dependency of cb if
the intersection of ca’s write dependencies and cb’s read
dependencies is nonempty.
MoonShine is able to identify the collection of read
and write dependencies by performing control ﬂow anal-
ysis on the target kernel. For a given system call, the ﬂow
analysis starts at the function deﬁnition. At each con-
ditional, MoonShine checks all components of the cor-
responding expression and records all global variables
read.
If MoonShine encounters an assignment expres-
sion or unary assignment expression containing a global
variable, it marks that global variable as a write depen-
dency.
Note that for a given trace this approach may overes-
timate or underestimate the number of implicit depen-
dencies for a given call.
It may overestimate because
the condition for which the global variable is a read de-
pendency may only be taken for speciﬁc values. Calls
that write to that ﬁeld may not necessarily write the re-
quired values of the conditional. This approach can un-
derestimate the dependencies if the variable is aliased
and that aliased variable is used in the conditional in-
stead. This method can be further reﬁned through "ﬁne-
grained" data ﬂow analysis, but this comes at the cost of
efﬁciency during distillation.
The pseudocode for these routines is described in Al-
gorithm 2. Note that the implicit and explicit routines
recursively call each other. This is because every up-
stream dependency must have its dependencies captured
as well. This recursive procedure will always terminate
because in each iteration the target call gets closer to the
beginning of the trace.
We present MoonShine’s workﬂow in Figure 3. Moon-
Shine consists of two components: Trace Generation and
Seed Selection. During trace generation, MoonShine ex-
ecutes our seed programs on a kernel instrumented to
record coverage and captures their system call traces.
This collection of traces is passed to the Seed Distiller
which applies our distillation algorithm to extract seeds
for the target fuzzer.
Kernel Instrumentation. In order to perform distil-
lation, MoonShine needs to know the coverage reached
by each system call inside the kernel during its execu-
tion.
In general this can be achieved at compile time
or through binary instrumentation. In our prototype we
compile Linux with the ﬂag CONFIG_KCOV [38] which in-
struments the kernel with gcc’s sanitizer coverage. Linux
allows privileged user level programs to recover the cov-
erage they achieved through the debugfs ﬁle /sys/ker-
nel/fs/debug/kcov. During fuzzing we combine multiple
other gcc sanitizers to detect bugs, namely Kernel Ad-
dress Sanitizer (KASAN) [18] and Kernel UndeﬁnedBe-
haviorSanitizer (UBSAN) [14]. We also enable kernel-
speciﬁc detectors like the Lock dependency tracker for
deadlocks and KMEMLEAK [5] for memory leaks.
Tracer. We implement our tracer by adapting and ex-
tending Strace [13], a popular system call tracer. We ex-
tended Strace because it captured system call names, ar-
guments, and return values out-of-the-box. Furthermore,
Strace can track calls across fork and exec which is use-
ful because many programs are executed by using scripts
and if we are unable to capture traces across these calls
then it limits our ability to scalably capture traces. Our
extension adds a total of 455 lines of code across 3 ﬁles.
This feature is disabled by default but can be enabled by
running Strace with the -k ﬂag. We plan to submit a
patch of our changes to the Strace maintainers.
Multiprocess Traces. If a trace consists of multiple
processes, MoonShine ﬁrst constructs a process tree. Ev-
ery node in the tree stores the system call traces for that
speciﬁc process. An edge from node A to node B indi-
cates that B is a child of A. MoonShine determine this
relationship by examining the return value of the clone
system call. If process A calls clone and the result is
B > 0 then we know A is a parent of B. Each edge
also stores the position of the last call in A’s trace be-
fore B was created, and this is important because some
resources produced by A can be accessed by B, e.g. ﬁle
descriptors or memory mappings. MoonShine builds a
dependency graph for each node in the tree in DFS order.
Each node in the dependency graph also stores the posi-
tion of the call in that processes trace. When computing
the explicit dependencies for a call in a trace MoonShine
ﬁrst checks the local dependency graph. If that value is
USENIX Association
27th USENIX Security Symposium    733
not in the cache then it traverses up the process tree and
checks each process argument graph. If there is a hit in
the parent process, MoonShine checks to make sure that
the value was stored in the cache prior to the clone. In
this case, MoonShine will copy the call and its upstream
dependencies into the child’s trace.
Explicit Dependencies. There are three exceptions to
our approach of capturing explicit dependencies. First,
system call arguments may themselves return results e.g,
pipe. In order to track this, MoonShine requires the aid
of a template that identiﬁes for a given system call, which
argument has its values set by the kernel. With such a
template, MoonShine will also store the value returned
in the argument inside of its result cache. Second, mem-
ory allocation calls like mmap return a range of values. A
system call may depend on a value inside the range but
not on the value explicitly returned. MoonShine handles
this by speciﬁcally tracking memory allocations made by
mmap or SYSTEM V calls. As it parses the trace it makes a
list of active mappings. If the value of a pointer argument
falls within an active mapping, then MoonShine adds an
edge from the argument to the call that produced that
mapping. For any pointer values that do not fall within an
active mapping, such as those on the stack or produced
through brk, MoonShine tracks the memory required for
all such arguments and adds a large mmap call at the be-
ginning of the distilled trace to store their values. The
ﬁnal exception is when two seeds, currently placed in
separate distilled programs, are found to be dependent
on one another. In this case, MoonShine merges the two
programs into one.
Implicit Dependencies. MoonShine’s implicit depen-
dency tracker is build on Smatch [16], a static anal-
ysis framework for C. Smatch allows users to register
functions which are triggered on matching events while
Smatch walks the program’s AST. These hooks corre-
spond to C expressions such as an Assignment Hook or
Conditional Hook. MoonShine tracks read dependencies
by registering a condition hook that checks if the con-
ditional expression, or any of its subexpressions, con-
tains a struct dereference. On a match, the hook noti-
ﬁes MoonShine which struct and ﬁeld are the read de-
pendency along with the line and function name, which
MoonShine records.
MoonShine tracks write dependencies by registering a
Unary Operator Hook and Assignment Hook. The unary
operator hook notiﬁes MoonShine every time a unary as-
signment operation is applied to a struct deference. The
notiﬁcation describes the corresponding struct name and
ﬁeld and MoonShine records the struct and ﬁeld as a
write dependency. Our assignment hook is nearly iden-
tical except it only checks the expression on the left side
of the assignment. After running Smatch with our hooks,
we generate a text ﬁle that is read by our distillation al-
gorithm to identify potential implicit dependencies for
every call.
5 Evaluation
In this section we evaluate the effectiveness of Moon-
Shine both in terms of its ability to aid OS fuzzers in dis-
covering new vulnerabilities, as well as in terms of its ef-
ﬁciency in gathering and distilling traces while preserv-
ing coverage.
In particular, we assessed MoonShine’s
impact on the performance of Syzkaller, a state-of-the-art
OS fuzzer targeting the Linux kernel, by distilling seeds
constructed from traces of thousands of real programs.
Our evaluation aims at answering the following research
questions.
• RQ1: Can MoonShine discover new vulnerabili-
ties? (Section 5.2)
• RQ2: Can MoonShine improve code coverage?
(Section 5.3)
• RQ3: How effectively can MoonShine track depen-
dencies? (Section 5.4)
• RQ4: How efﬁcient is MoonShine? (Section 5.5)
• RQ5: Is distillation useful? (Section 5.6)
5.1 Evaluation Setup
Seed Programs. Since MoonShine’s ability to track de-
pendencies is limited to the calls within a single trace,
we sought out seed programs whose functionality is self-
contained, but also provides diverse coverage. We con-
structed seeds from 3220 programs from the following
sources 1) Linux Testing Project (LTP) [7], 2) Linux Ker-
nel selftests (kselftests) [6], 3) Open Posix Tests [8], 4)
Glibc Testsuite [3].
The LTP testsuite is designed to test the Linux kernel
for reliability, robustness and scalability and is curated by
both kernel developers along with third party companies
such as IBM, Cisco, and Fujitsu. Out of LTP’s 460 sys-
tem call tests we collected traces for 390. The testcases
we avoided focused on system calls which Syzkaller
does not support such as execve, clone, cacheflush,
etc.
Kselftests is a testing suite contained within the Linux
source tree that tests speciﬁc subsystems in the kernel.
Like with our LTP traces, most of the kselftest traces
were collected from the system call suite. Although this
testsuite is signiﬁcantly smaller than LTP we chose to
collect from it because it is designed to test speciﬁc paths
through the kernel. As such, we can expect each program
to provide diverse coverage and be reproducible.
734    27th USENIX Security Symposium
USENIX Association
The OpenPosix test suite is designed to test the Posix
2001 API speciﬁcations for threads, semaphores, timers
and message queues. We collected traces from the 1,630
message queue and timer tests.
The glibc test suite is used for functional and unit
testing of glibc. The test suite includes regression tests
against previously discovered bugs, and tests which exer-
cise components of the C Standard Library such as pro-
cessing ELF ﬁles, io, and networking calls. We collected
the traces from 1,120 glibc tests.
OS Fuzzer. In the experiments we used Syzkaller as
our target OS fuzzer. We chose Syzkaller as it is a state-
of-the-art system call fuzzer, having found a large num-
ber of vulnerabilities, and is actively maintained. Fur-
thermore, Syzkaller employs effective strategies to dis-
cover non-deterministic bugs, e.g., by occasionally exe-
cuting calls from a given program on different threads.
Syzkaller also combines many other existing bug ﬁnd-
ing mechanisms like fault injection to trigger bug in-
ducing scenarios. Unless stated otherwise, we conﬁg-
ured Syzkaller to run on Google Compute Engine (GCE)
with 2 fuzzing groups, each group containing 4 fuzzing
processes. The Syzkaller manager ran on an Ubuntu
16.04 n1-standard-1 instance which contains 1vCPU and
3.75GB. Each fuzzing group ran on an n1-highcpu-4 ma-
chine consisting of 4vCPUs and 3.60GB of memory run-
ning our target kernel.
Distillation Algorithms. In this evaluation we com-
pare MoonShine’s distillation algorithm, termed Moon-
shine(I+E), against two others. The ﬁrst is a distilla-
tion algorithm which only captures the explicit depen-
dencies, ignoring implicit dependencies, which we call
MoonShine(E). The second is a random distillation al-
gorithm, called RANDOM, which tracks no dependencies
at all. The RANDOM algorithm works by ﬁrst selecting
all system calls in a trace that contributed the most cover-
age increase, and assigning each to its own synthetic pro-