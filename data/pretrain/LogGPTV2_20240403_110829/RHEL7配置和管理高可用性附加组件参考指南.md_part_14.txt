    集群"一节](#ch-resourceconstraints-HAAR.html#s3-optout-clusters-HAAR "配置 "Opt-Out" 集群"){.xref}。这是默认的
    Pacemaker 策略。
:::
是否应选择将集群配置为 opt-in 或 opt-out
集群，取决于您的个人偏好和集群的构建。如果大多数资源可以在大多数节点上运行，那么如果没有选择的协议则可能会导致配置更简单。另一方面，如果大多数资源只能在一小部分节点中运行，那么选择的配置可能比较简单。
::: section
::: titlepage
### []{#ch-resourceconstraints-HAAR.html#s3-optin-clusters-HAAR}配置 \"Opt-In\" 集群 {.title}
:::
要创建一个 opt-in 集群，将 `symmetric-cluster`{.literal} 集群属性设置为
`false`{.literal}，以防止资源默认在任何位置运行。
``` screen
# pcs property set symmetric-cluster=false
```
为单个资源启用节点。以下命令配置位置限制，以便资源
`Web 服务器首选`{.literal} 节点 `example-1`{.literal}、资源
`数据库`{.literal} 首选节点
`example-2`{.literal}，如果首选节点出现故障，这两个资源都可切换到节点
`example-3`{.literal}。当为 opt-in
集群配置位置限制时，设置零分数可允许资源在节点上运行，而不表示首选或避免该节点。
``` screen
# pcs constraint location Webserver prefers example-1=200
# pcs constraint location Webserver prefers example-3=0
# pcs constraint location Database prefers example-2=200
# pcs constraint location Database prefers example-3=0
```
:::
::: section
::: titlepage
### []{#ch-resourceconstraints-HAAR.html#s3-optout-clusters-HAAR}配置 \"Opt-Out\" 集群 {.title}
:::
要创建一个 opt-out 集群，将 `symmetric-cluster`{.literal} 集群属性设置为
`true`{.literal}，以允许资源默认随处运行。
``` screen
# pcs property set symmetric-cluster=true
```
以下命令将生成一个与 ["配置 \"Opt-In\"
集群"一节](#ch-resourceconstraints-HAAR.html#s3-optin-clusters-HAAR "配置 "Opt-In" 集群"){.xref}
中的示例对应的配置。如果首选节点失败，这两个资源都可切换到节点
`example-3`{.literal}，因为每个节点都有隐式分数 0。
``` screen
# pcs constraint location Webserver prefers example-1=200
# pcs constraint location Webserver avoids example-2=INFINITY
# pcs constraint location Database avoids example-1=INFINITY
# pcs constraint location Database prefers example-2=200
```
请注意，不需要在这些命令中指定 INFINITY 分数，因为这是分数的默认值。
:::
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-resource-stickiness-HAAR}配置资源以首选其当前节点 {.title}
:::
资源具有 `资源粘性`{.literal} 值，您可以在创建资源时将其设置为 meta
属性，如
["资源元数据选项"一节](#ch-clustresources-HAAR.html#s1-resourceopts-HAAR "资源元数据选项"){.xref}
所述。`resource-stickiness`{.literal}
值决定资源要保留在当前运行节点中的有多少。Pacemaker
与其他设置（如位置限制的分数）一起考虑资源 `粘性`{.literal}
值，以确定是否将资源移至另一节点还是保留原位。
默认情况下，创建资源 `粘性`{.literal} 值为 0。当 `资源粘性`{.literal}
设置为 0 时，Pacemaker
的默认行为是移动资源，以便在集群节点中平均分配这些资源。这可能导致健康的资源变化频率超过您的要求。要防止这种行为，您可以将默认
`资源粘性`{.literal} 值设置为
1。此默认值将应用到集群中的所有资源。这个小值可以被您创建的其他限制轻松覆盖，但可以防止
Pacemaker 在集群中无用地移动处于健康状态的资源。
以下命令将默认资源粘性值设置为 1。
``` screen
# pcs resource defaults resource-stickiness=1
```
如果设置了 `资源粘性`{.literal}
值，则没有资源移至新添加的节点。如果此时需要资源平衡，您可以临时将资源
`粘性`{.literal} 值设置为 0。
请注意，如果位置约束分数高于资源粘性值，集群仍然可以将健康资源移至位置约束点的节点。
有关 Pacemaker 如何确定资源放置位置的更多信息，请参阅
["使用和放置策略"一节](#ch-advancedresource-HAAR.html#s1-utilization-HAAR "使用和放置策略"){.xref}。
:::
:::
::: section
::: titlepage
# []{#ch-resourceconstraints-HAAR.html#s1-orderconstraints-HAAR}顺序限制 {.title}
:::
顺序限制决定资源运行的顺序。
[]{#ch-resourceconstraints-HAAR.html#idm140680362701136
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680309518992
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680364878832
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680372615008
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680375915696
.indexterm}[]{#ch-resourceconstraints-HAAR.html#idm140680375914432
.indexterm}
使用以下命令配置顺序约束：
``` screen
pcs constraint order [action] resource_id then [action] resource_id [options]
```
[表 7.3
"顺序约束的属性"](#ch-resourceconstraints-HAAR.html#tb-orderconstraint-options-HAAR "表 7.3. 顺序约束的属性"){.xref}.
总结了配置顺序约束的属性和选项。
::: table
[]{#ch-resourceconstraints-HAAR.html#tb-orderconstraint-options-HAAR}
**表 7.3. 顺序约束的属性**
::: table-contents
+-----------------------+---------------------------------------------+
| 项                    | 描述                                        |
+=======================+=============================================+
| resource_id           | 执行某个操作的资源的名称。                  |
+-----------------------+---------------------------------------------+
| action                | 对资源执行的操作。*`action`*                |
|                       | 属性的可能值如下：                          |
|                       |                                             |
|                       | \* `start`{.literal} - 启动资源。           |
|                       |                                             |
|                       | \* `stop`{.literal} - 停止资源。            |
|                       |                                             |
|                       | \* `Prop`{.literal} rate - 将资源从 slave   |
|                       | 资源提升到主资源。                          |
|                       |                                             |
|                       | \* `demote`{.literal} -                     |
|                       | 将资源从主资源降级到从资源。                |
|                       |                                             |
|                       | 如果没有指定操作，则 `启动`{.literal}       |
|                       | 默认操作。有关 master 和从资源的详情请参考  |
|                       | ["多状态资                                  |
|                       | 源：具有多个模式的资源"一节](#ch-advancedre |
|                       | source-HAAR.html#s1-multistateresource-HAAR |
|                       |  "多状态资源：具有多个模式的资源"){.xref}。 |
+-----------------------+---------------------------------------------+
| `kind`{.literal} 选项 | 如何强制实施约束。`kind`{.literal}          |
|                       | 选项的可能值如下：                          |
|                       |                                             |
|                       | \* `可选`{.literal} -                       |
|                       | 仅在两个资源都执行                          |
|                       | 指定操作时才应用。有关可选排序的详情请参考  |
|                       | ["公告排序                                  |
|                       | "一节](#ch-resourceconstraints-HAAR.html#s2 |
|                       | -advisoryordering-HAAR "公告排序"){.xref}。 |
|                       |                                             |
|                       | \* `强制`{.literal} - Always                |
|                       | （默认值）。如果您指定                      |
|                       | 的第一个资源是停止或无法启动，则您指定的第  |
|                       | 二个资源必须停止。有关强制排序的详情请参考  |
|                       | ["强制排序"                                 |
|                       | 一节](#ch-resourceconstraints-HAAR.html#s2- |
|                       | mandatoryordering-HAAR "强制排序"){.xref}。 |
|                       |                                             |
|                       | \* `serialize`{.literal} -                  |
|                       | 确保一组资源不会同时发生两个 stop/start     |
|                       | 操作。                                      |
|                       |                                             |
|                       | []{#ch-resou                                |
|                       | rceconstraints-HAAR.html#idm140680353458704 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680358064176 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680358063392 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680359811360 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680365749856 |
|                       | .indexterm}                                 |
+-----------------------+---------------------------------------------+
| `对称`{.literal} 选项 | 如果为                                      |
|                       | tru                                         |
|                       | e（默认值），按相反顺序停止资源。默认值为： |
|                       | `true`{.literal}[]{#ch-resou                |
|                       | rceconstraints-HAAR.html#idm140680375465696 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680372576832 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680372576048 |
|                       | .indexterm}[]{#ch-resou                     |
|                       | rceconstraints-HAAR.html#idm140680370435728 |
|                       | .indexterm}                                 |
+-----------------------+---------------------------------------------+
:::
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-mandatoryordering-HAAR}强制排序 {.title}
:::
强制限制表示您指定的第二个资源在没有您指定的第一个资源处于活跃状态的情况下无法运行。这是
`kind`{.literal}
选项的默认值。保留默认值可确保您指定的第二个资源会在您指定更改状态的第一个资源时响应。
::: itemizedlist
-   如果您指定的第一个资源正在运行并且已停止，则您指定的第二个资源也会停止（如果它正在运行）。
-   如果您指定的第一个资源没有运行，且无法启动，则您指定的资源将会停止（如果正在运行）。
-   如果您指定的第一个资源在您指定的第二个资源正在运行时启动，则您指定的第二个资源将会停止并重启。
:::
但请注意，集群会响应每个状态的更改。如果第一个资源在第二个资源启动停止操作前再次处于启动状态，则不需要重启第二个资源。
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-advisoryordering-HAAR}公告排序 {.title}
:::
当为顺序约束指定 `kind=Optional`{.literal}
选项时，约束被视为可选，且仅在两个资源都执行指定操作时才适用。您指定的第一个资源的状态更改不会对您指定的第二个资源起作用。
以下命令为名为 `VirtualIP 和`{.literal} `dummy_resource`{.literal}
的资源配置公告排序约束。
``` screen
# pcs constraint order VirtualIP then dummy_resource kind=Optional 
```
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-resourceorderlist-HAAR}排序的资源集 {.title}
:::
一个常见的情况是，管理员创建排序的资源链，例如资源 A 在资源 C
之前启动。如果您的配置需要创建一组在一起并启动的资源，您可以配置包含这些资源的资源组，如
["资源组"一节](#ch-clustresources-HAAR.html#s1-resourcegroups-HAAR "资源组"){.xref}
所述。然而，在有些情况下，配置资源需要以指定顺序启动，因为资源组不合适：
::: itemizedlist
-   您可能需要配置资源以启动，而且资源不一定是在一起的。
-   您可能有一个资源 C，它必须在资源 A 或 B 启动后启动，但 A 和 B
    之间没有关系。
-   您可能有资源 C 和 D 在资源 A 和 B 启动时必须启动，但 A 和 B
    之间没有关系，C 和 D 之间没有关系。
:::
在这些情况下，您可以使用 [**pcs constraint set
命令在一组或一组资源中创建顺序约束。**]{.command}
您可以使用 [**pcs constraint order set**]{.command}
命令为一组资源设置以下选项。
::: itemizedlist
-   `sequential`{.literal}，它可以设为 `true`{.literal} 或
    `false`{.literal}，以指示资源集合是否相互排序。
    将 `sequential`{.literal} 设置为 `false`{.literal}
    允许在顺序约束中相对于其他集合对集合进行排序，而不对成员进行排序。因此，只有在约束里列出了多个集合时才有意义
    ; 否则，约束无效。
-   `require-all`{.literal}，它可以设为 `true`{.literal} 或
    `false`{.literal}，以指示集合中的所有资源是否在继续前处于活动状态。将
    `require-all`{.literal} 设置为 `false`{.literal}
    表示集合中只有一个资源需要启动，然后才能继续下一个设置。将
    `require-all`{.literal} 设置为 `false`{.literal}
    无效，除非与未排序的集合结合使用，这些集合的 `序列`{.literal} 设置为
    `false`{.literal}。
-   `操作`{.literal}，它可以设置为
    `启动`{.literal}、`提升`{.literal}、`降级`{.literal}
    `或停止`{.literal}，如 [表 7.3
    "顺序约束的属性"](#ch-resourceconstraints-HAAR.html#tb-orderconstraint-options-HAAR "表 7.3. 顺序约束的属性"){.xref}
    所述。
:::
您可以按照 [**pcs constraint set 命令的 `setoptions`{.literal}
参数为一组资源设置**]{.command} 以下约束选项。
::: itemizedlist
-   `ID`{.literal}，为您定义的约束提供名称：
-   `分数`{.literal} 表示此约束的首选程度。有关这个选项的详情请参考
    [表 7.4 "Colocation
    约束的属性"](#ch-resourceconstraints-HAAR.html#tb-colocationconstraint-options-HAAR "表 7.4. Colocation 约束的属性"){.xref}。
:::
``` screen
pcs constraint order set resource1 resource2 [resourceN]... [options] [set resourceX resourceY ... [options]] [setoptions [constraint_options]]
```
如果您有三个名为 `D1`{.literal}、`D2`{.literal} 和 `D3`{.literal}
的资源，以下命令将它们配置为排序的资源集。
``` screen
# pcs constraint order set D1 D2 D3
```
:::
::: section
::: titlepage
## []{#ch-resourceconstraints-HAAR.html#s2-resourceremove-HAAR}从排序约束中删除资源 {.title}