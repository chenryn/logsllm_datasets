USHORT Length;  
USHORT MaximumLength;  
PWSTR Buffer;  
} UNICODE_STRING, * PUNICODE_STRING;
结构的初始化UNICODE_STRING通过以下方式完成：  
将Length和MaximumLength成员设置为的长度SourceString  
将Buffer成员设置为传入的字符串的地址SourceString  
使用了RtlInitUnicodeString函数最主要就是为了初始化UNICODE_STRING结构  
最后简单代码实现  
RtlInitUnicodeString(&ImagePath, (PWSTR)L"\??\C:\Windows\System32\calc.exe");  
其中我们还需要了解一下Flag，其中从其他的参数也能明白一般创建的过程中可操作性最高的就是关于标志位的设置。  
Flag是用来规范RTL_USER_PROCESS_PARAMETERS_NORMALIZED。  
因为创建进程时，如果还没有完全初始化的话，那么被访问的内存只是描述进程的结构的相对偏移量，而不是实际的内存地址。  
所以我们需要设置Flag来避免这一问题。  
那么最后实现就是  
RtlCreateProcessParametersEx(&ProcessParameters, &ImagePath, NULL, NULL, NULL,
NULL, NULL, NULL, NULL, NULL, RTL_USER_PROCESS_PARAMETERS_NORMALIZED);  
CreateInfo 参数它是一个指向PS_CREATE_INFO结构的指针  
因为关于此参数的包括其结构的信息较少，所以这里借鉴[两个](https://bbs.kanxue.com/thread-272798.htm
"两个")[文章](https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/ntpsapi/ps_create_info/index.htm
"文章")可以很好的理解,就不再重复叙述
这个就是部分关于CREATE_INFO的结构体  
typedef struct _PS_CREATE_INFO  
{  
SIZE_T Size;  
PS_CREATE_STATE State;  
union  
{  
// PsCreateInitialState  
struct  
{  
union  
{  
ULONG InitFlags;  
struct  
{  
UCHAR WriteOutputOnExit : 1;  
UCHAR DetectManifest : 1;  
UCHAR IFEOSkipDebugger : 1;  
UCHAR IFEODoNotPropagateKeyState : 1;  
UCHAR SpareBits1 : 4;  
UCHAR SpareBits2 : 8;  
USHORT ProhibitedImageCharacteristics : 16;  
};  
};  
ACCESS_MASK AdditionalFileAccess;  
} InitState;
PS_CREATE_INFO结构是在NtCreateUserProcess 和ZwCreateUserProcess函数的用户模式和内核模式之间交换  
其中我们要关注的就是PS_CREATE_STATE的PsCreateInitialState  
所以设置为如下，初始化的话我们就填入状态和大小就行  
CreateInfo.Size = sizeof(CreateInfo);  
CreateInfo.State = PsCreateInitialState;
AttributeList 参数是用于设置进程和线程创建的属性，结构体信息  
Windows 内部结构，第 1 部分（第 7 版） 书中有关于进程属性的一张表，很好的做了一部分诠释
typedef struct _PS_ATTRIBUTE  
{  
ULONG_PTR Attribute;  
SIZE_T Size;  
union  
{  
ULONG_PTR Value;  
PVOID ValuePtr;  
};  
PSIZE_T ReturnLength;  
} PS_ATTRIBUTE, *PPS_ATTRIBUTE;
typedef struct _PS_ATTRIBUTE_LIST  
{  
SIZE_T TotalLength;  
PS_ATTRIBUTE Attributes[1];  
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;
使用时, 我们可以根据TotalLength手动调整Attributes数组的大小，用如下代码初始化这个参数  
PS_ATTRIBUTE_IMAGE_NAME指定要创建的进程，NtImagePath保存创建进程的路径
    PPS_ATTRIBUTE_LIST AttributeList = (PS_ATTRIBUTE_LIST*)RtlAllocateHeap(RtlProcessHeap(), HEAP_ZERO_MEMORY, sizeof(PS_ATTRIBUTE));
    AttributeList->TotalLength = sizeof(PS_ATTRIBUTE_LIST) - sizeof(PS_ATTRIBUTE);
    AttributeList->Attributes[0].Attribute = PS_ATTRIBUTE_IMAGE_NAME;
    AttributeList->Attributes[0].Size = NtImagePath.Length;
    AttributeList->Attributes[0].Value = (ULONG_PTR)NtImagePath.Buffer;
以上就是NtCreateUserProcess 各个参数的代表的意义和与其使用相关的一些东西。  
那么最后构造实现就可以简单为如下  
//无关紧要的就设置NULL大法即可  
NtCreateUserProcess(&hProcess, &hThread, PROCESS_ALL_ACCESS,
THREAD_ALL_ACCESS, NULL, NULL, NULL, NULL, ProcessParameters, &CreateInfo,
AttributeList);  
最后还有个清理痕迹，因为我们是在堆里面分配的空所以可以使用RtlFreeHeap函数，它可以释放由RtlAllocateHeap分配的内存。还有RtlDestroyProcessParameters
函数阔以释放存储在RTL_USER_PROCESS_PARAMETERS结构中的进程参数。  
实现效果  
**PPID （父进程欺骗)**  
NtCreateUserProcess也可以进行PPID的操作  
PPID 是恶意软件作者用来混入目标系统的技术之一。这是通过使恶意进程看起来像是由另一个进程产生的来完成的。这有助于规避基于异常父子进程关系的检测。  
父进程欺骗有几处需要注意的，首先我们也要确定我们假借的父进程是哪个，然后确定其完整性如图是System则要求我们自身的权限很高才行，但如果Medium的话那么就不需要了效果如下
GetTokenInformation 可以用这个函数确定进程访问令牌的信息，然后用SID进行比较就可以确定出进程的级别  
还记得PS_ATTRIBUTE_IMAGE_NAME是指定要创建的进程的名称，NtImagePath变量保存创建进程的文件的路径。那么要将一个进程生成为另一个进程的子进程，我们就可以使用PsAttributeParentProcess
PS_ATTRIBUTE_NUM ，然后将HANDLE给父进程。  
那么就直接替换把父节点的attribute加进去 通过PS_ATTRIBUTE_PARENT_PROCESS  
// obtain handle to parent  
OBJECT_ATTRIBUTES oa;  
InitializeObjectAttributes(&oa, 0, 0, 0, 0);  
CLIENT_ID cid = { (HANDLE)5644, NULL };  
这里的进程id是我设置死的一个如果需要更改的话其实可以参考这段代码
* * *
HANDLE hToken;  
OpenProcessToken(hProcess, TOKEN_QUERY, &hToken);  
DWORD cbTokenIL = 0;  
PTOKEN_MANDATORY_LABEL pTokenIL = NULL;  
GetTokenInformation(hToken, TokenIntegrityLevel, NULL, 0, &cbTokenIL);  
pTokenIL = (TOKEN_MANDATORY_LABEL _)LocalAlloc(LPTR, cbTokenIL);  
GetTokenInformation(hToken, TokenIntegrityLevel, pTokenIL, cbTokenIL,
&cbTokenIL);  
DWORD dwIntegrityLevel = _GetSidSubAuthority(pTokenIL->Label.Sid, 0);
## 最后通过dwIntegrityLevel 看是LOW or MEDIUM HIGH SYSTEM 来取可以进行ppid的进程id进行操作
HANDLE hParent = NULL;  
NtOpenProcess(&hParent, PROCESS_ALL_ACCESS, &oa, &cid);
// add parent process attribute
AttributeList->Attributes[1].Attribute = PS_ATTRIBUTE_PARENT_PROCESS;  
AttributeList->Attributes[1].Size = sizeof(HANDLE);  
AttributeList->Attributes[1].ValuePtr = hParent;
//要注意的是我们每添加一个新属性，都需要将PS_ATTRIBUTE增大，因为调用RtlAllocateHeap要为PS_ATTRIBUTE分配足够的内存空间  
最后NtCreateUserProcess  
NtCreateUserProcess(&hProcess, &hThread, PROCESS_ALL_ACCESS,
THREAD_ALL_ACCESS, NULL, NULL, NULL, NULL, ProcessParameters, &CreateInfo,
AttributeList);
其实很多CreateProcess的项目，就比如ppid也有用CreateProcess写的，都可以加以改变改成用NtCreateUserProcess操作的，就可以把一个很简单的被查杀CreateProcess进行一个免杀保护了。（当然也不是都能改的具体情况具体分析）