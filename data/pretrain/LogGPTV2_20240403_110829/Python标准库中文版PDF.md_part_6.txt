过在 Windows 下工作不正常), 如 Example 1-44 所示.
1.5.1.3. Example 1-44. 使用 os.path 模块将用户名插入到文件名
File: os-path-expanduser-example-1.py
import os
print os.path.expanduser("~/.pythonrc")
# /home/effbot/.pythonrc
expandvars 函数将文件名中的环境变量替换为对应值, 如 Example 1-45 所
示.
1.5.1.4. Example 1-45. 使用 os.path 替换文件名中的环境变量
File: os-path-expandvars-example-1.py
import os
os.environ["USER"] = "user"
print os.path.expandvars("/home/$USER/config")
print os.path.expandvars("$USER/folders")
/home/user/config
user/folders
1.5.2. 搜索文件系统
walk 函数会帮你找出一个目录树下的所有文件 (如 Example 1-46 所示). 它
的参数依次是目录名, 回调函数, 以及传递给回调函数的数据对象.
1.5.2.1. Example 1-46. 使用 os.path 搜索文件系统
File: os-path-walk-example-1.py
import os
def callback(arg, directory, files):
for file in files:
print os.path.join(directory, file), repr(arg)
os.path.walk(".", callback, "secret message")
./aifc-example-1.py 'secret message'
./anydbm-example-1.py 'secret message'
./array-example-1.py 'secret message'
...
./samples 'secret message'
./samples/sample.jpg 'secret message'
./samples/sample.txt 'secret message'
./samples/sample.zip 'secret message'
./samples/articles 'secret message'
./samples/articles/article-1.txt 'secret message'
./samples/articles/article-2.txt 'secret message'
...
walk 函数的接口多少有点晦涩 (也许只是对我个人而言, 我总是记不住参数的
顺序). Example 1-47 中展示的 index 函数会返回一个文件名列表, 你可以直
接使用 for-in 循环处理文件.
1.5.2.2. Example 1-47. 使用 os.listdir 搜索文件系统
File: os-path-walk-example-2.py
import os
def index(directory):
# like os.listdir, but traverses directory trees
stack = [directory]
files = []
while stack:
directory = stack.pop()
for file in os.listdir(directory):
fullname = os.path.join(directory, file)
files.append(fullname)
if os.path.isdir(fullname) and not
os.path.islink(fullname):
stack.append(fullname)
return files
for file in index("."):
print file
.\aifc-example-1.py
.\anydbm-example-1.py
.\array-example-1.py
...
如果你不想列出所有的文件 (基于性能或者是内存的考虑) , Example 1-48 展
示了另一种方法. 这里 DirectoryWalker 类的行为与序列对象相似, 一次返回
一个文件. (generator?)
1.5.2.3. Example 1-48. 使用 DirectoryWalker 搜索文件系统
File: os-path-walk-example-3.py
import os
class DirectoryWalker:
# a forward iterator that traverses a directory tree
def _ _init_ _(self, directory):
self.stack = [directory]
self.files = []
self.index = 0
def _ _getitem_ _(self, index):
while 1:
try:
file = self.files[self.index]
self.index = self.index + 1
except IndexError:
# pop next directory from stack
self.directory = self.stack.pop()
self.files = os.listdir(self.directory)
self.index = 0
else:
# got a filename
fullname = os.path.join(self.directory, file)
if os.path.isdir(fullname) and not
os.path.islink(fullname):
self.stack.append(fullname)
return fullname
for file in DirectoryWalker("."):
print file
.\aifc-example-1.py
.\anydbm-example-1.py
.\array-example-1.py
...
注意 DirectoryWalker 类并不检查传递给 _ _getitem_ _ 方法的索引值. 这意
味着如果你越界访问序列成员(索引数字过大)的话, 这个类将不能正常工作.
最后, 如果你需要处理文件大小和时间戳, Example 1-49 给出了一个类, 它返
回文件名和它的 os.stat 属性(一个元组). 这个版本在每个文件上都能节省一
次或两次 stat 调用( os.path.isdir 和 os.path.islink 内部都使用了
stat ), 并且在一些平台上运行很快.
1.5.2.4. Example 1-49. 使用 DirectoryStatWalker 搜索文件系统
File: os-path-walk-example-4.py
import os, stat
class DirectoryStatWalker:
# a forward iterator that traverses a directory tree, and
# returns the filename and additional file information
def _ _init_ _(self, directory):
self.stack = [directory]
self.files = []
self.index = 0
def _ _getitem_ _(self, index):
while 1:
try:
file = self.files[self.index]
self.index = self.index + 1
except IndexError:
# pop next directory from stack
self.directory = self.stack.pop()
self.files = os.listdir(self.directory)
self.index = 0
else:
# got a filename
fullname = os.path.join(self.directory, file)
st = os.stat(fullname)
mode = st[stat.ST_MODE]
if stat.S_ISDIR(mode) and not stat.S_ISLNK(mode):
self.stack.append(fullname)
return fullname, st
for file, st in DirectoryStatWalker("."):
print file, st[stat.ST_SIZE]
.\aifc-example-1.py 336
.\anydbm-example-1.py 244
.\array-example-1.py 526
1.6. stat 模块
Example 1-50 展示了 stat 模块的基本用法, 这个模块包含了一些 os.stat
函数中可用的常量和测试函数.
1.6.0.1. Example 1-50. Using the stat Module
File: stat-example-1.py
import stat
import os, time
st = os.stat("samples/sample.txt")
print "mode", "=>", oct(stat.S_IMODE(st[stat.ST_MODE]))
print "type", "=>",
if stat.S_ISDIR(st[stat.ST_MODE]):
print "DIRECTORY",
if stat.S_ISREG(st[stat.ST_MODE]):
print "REGULAR",
if stat.S_ISLNK(st[stat.ST_MODE]):
print "LINK",
print
print "size", "=>", st[stat.ST_SIZE]
print "last accessed", "=>", time.ctime(st[stat.ST_ATIME])
print "last modified", "=>", time.ctime(st[stat.ST_MTIME])
print "inode changed", "=>", time.ctime(st[stat.ST_CTIME])
mode => 0664
type => REGULAR
size => 305
last accessed => Sun Oct 10 22:12:30 1999
last modified => Sun Oct 10 18:39:37 1999
inode changed => Sun Oct 10 15:26:38 1999
1.7. string 模块
string 模块提供了一些用于处理字符串类型的函数, 如 Example 1-51 所示.
1.7.0.1. Example 1-51. 使用 string 模块
File: string-example-1.py
import string
text = "Monty Python's Flying Circus"
print "upper", "=>", string.upper(text)
print "lower", "=>", string.lower(text)
print "split", "=>", string.split(text)
print "join", "=>", string.join(string.split(text), "+")
print "replace", "=>", string.replace(text, "Python", "Java")
print "find", "=>", string.find(text, "Python"), string.find(text,
"Java")
print "count", "=>", string.count(text, "n")
upper => MONTY PYTHON'S FLYING CIRCUS
lower => monty python's flying circus
split => ['Monty', "Python's", 'Flying', 'Circus']
join => Monty+Python's+Flying+Circus
replace => Monty Java's Flying Circus
find => 6 -1
count => 3
在 Python 1.5.2 以及更早版本中, string 使用 strop 中的函数来实现模块功
能.
在 Python1.6 和后继版本，更多的字符串操作都可以作为字符串方法来访问,
如 Example 1-52 所示, string 模块中的许多函数只是对相对应字符串方法的
封装.
1.7.0.2. Example 1-52. 使用字符串方法替代 string 模块函数
File: string-example-2.py
text = "Monty Python's Flying Circus"
print "upper", "=>", text.upper()
print "lower", "=>", text.lower()
print "split", "=>", text.split()
print "join", "=>", "+".join(text.split())
print "replace", "=>", text.replace("Python", "Perl")
print "find", "=>", text.find("Python"), text.find("Perl")
print "count", "=>", text.count("n")
upper => MONTY PYTHON'S FLYING CIRCUS
lower => monty python's flying circus
split => ['Monty', "Python's", 'Flying', 'Circus']
join => Monty+Python's+Flying+Circus
replace => Monty Perl's Flying Circus
find => 6 -1
count => 3
为了增强模块对字符的处理能力, 除了字符串方法, string 模块还包含了类型
转换函数用于把字符串转换为其他类型, (如 Example 1-53 所示).
1.7.0.3. Example 1-53. 使用 string 模块将字符串转为数字
File: string-example-3.py
import string
print int("4711"),
print string.atoi("4711"),
print string.atoi("11147", 8), # octal 八进制
print string.atoi("1267", 16), # hexadecimal 十六进制
print string.atoi("3mv", 36) # whatever...
print string.atoi("4711", 0),
print string.atoi("04711", 0),
print string.atoi("0x4711", 0)
print float("4711"),
print string.atof("1"),
print string.atof("1.23e5")
4711 4711 4711 4711 4711
4711 2505 18193
4711.0 1.0 123000.0
大多数情况下 (特别是当你使用的是1.6及更高版本时) ，你可以使用 int 和
float 函数代替 string 模块中对应的函数。
atoi 函数可以接受可选的第二个参数, 指定数基(number base). 如果数基为
0, 那么函数将检查字符串的前几个字符来决定使用的数基: 如果为 "0x," 数
基将为 16 (十六进制), 如果为 "0," 则数基为 8 (八进制). 默认数基值为 10
(十进制), 当你未传递参数时就使用这个值.
在 1.6 及以后版本中, int 函数和 atoi 一样可以接受第二个参数. 与字符串
版本函数不一样的是 , int 和 float 可以接受 Unicode 字符串对象.
1.8. re 模块
"Some people, when confronted with a problem, think 'I know, I'll use
regular expressions.' Now they have two problems."
- Jamie Zawinski, on comp.lang.emacs
re 模块提供了一系列功能强大的正则表达式 (regular expression) 工具, 它
们允许你快速检查给定字符串是否与给定的模式匹配 (使用 match 函数), 或
者包含这个模式 (使用 search 函数). 正则表达式是以紧凑(也很神秘)的语法
写出的字符串模式.
match 尝试从字符串的起始匹配一个模式, 如 Example 1-54 所示. 如果模式
匹配了某些内容 (包括空字符串, 如果模式允许的话) , 它将返回一个匹配对
象. 使用它的 group 方法可以找出匹配的内容.
1.8.0.1. Example 1-54. 使用 re 模块来匹配字符串
File: re-example-1.py
import re
text = "The Attila the Hun Show"
# a single character 单个字符
m = re.match(".", text)
if m: print repr("."), "=>", repr(m.group(0))
# any string of characters 任何字符串
m = re.match(".*", text)
if m: print repr(".*"), "=>", repr(m.group(0))
# a string of letters (at least one) 只包含字母的字符串(至少一个)
m = re.match("\w+", text)
if m: print repr("\w+"), "=>", repr(m.group(0))
# a string of digits 只包含数字的字符串
m = re.match("\d+", text)
if m: print repr("\d+"), "=>", repr(m.group(0))
'.' => 'T'
'.*' => 'The Attila the Hun Show'
'\\w+' => 'The'
可以使用圆括号在模式中标记区域. 找到匹配后, group 方法可以抽取这些区
域的内容，如 Example 1-55 所示. group(1) 会返回第一组的内容, group(2)
返回第二组的内容, 这样... 如果你传递多个组数给 group 函数, 它会返回一
个元组.
1.8.0.2. Example 1-55. 使用 re 模块抽出匹配的子字符串
File: re-example-2.py
import re
text ="10/15/99"
m = re.match("(\d{2})/(\d{2})/(\d{2,4})", text)
if m:
print m.group(1, 2, 3)
('10', '15', '99')
search 函数会在字符串内查找模式匹配, 如 Example 1-56 所示. 它在所有可
能的字符位置尝试匹配模式, 从最左边开始, 一旦找到匹配就返回一个匹配对
象. 如果没有找到相应的匹配, 就返回 None .
1.8.0.3. Example 1-56. 使用 re 模块搜索子字符串
File: re-example-3.py
import re
text = "Example 3: There is 1 date 10/25/95 in here!"
m = re.search("(\d{1,2})/(\d{1,2})/(\d{2,4})", text)
print m.group(1), m.group(2), m.group(3)
month, day, year = m.group(1, 2, 3)
print month, day, year
date = m.group(0)
print date
10 25 95
10 25 95
10/25/95
Example 1-57 中展示了 sub 函数, 它可以使用另个字符串替代匹配模式.
1.8.0.4. Example 1-57. 使用 re 模块替换子字符串
File: re-example-4.py
import re
text = "you're no fun anymore..."
# literal replace (string.replace is faster)
# 文字替换 (string.replace 速度更快)
print re.sub("fun", "entertaining", text)
# collapse all non-letter sequences to a single dash
# 将所有非字母序列转换为一个"-"(dansh,破折号)
print re.sub("[^\w]+", "-", text)
# convert all words to beeps
# 将所有单词替换为 BEEP
print re.sub("\S+", "-BEEP-", text)
you're no entertaining anymore...
you-re-no-fun-anymore-
-BEEP- -BEEP- -BEEP- -BEEP-
你也可以通过回调 (callback) 函数使用 sub 来替换指定模式. Example 1-58
展示了如何预编译模式.
1.8.0.5. Example 1-58. 使用 re 模块替换字符串(通过回调函数)
File: re-example-5.py
import re
import string
text = "a line of text\\012another line of text\\012etc..."
def octal(match):
# replace octal code with corresponding ASCII character
# 使用对应 ASCII 字符替换八进制代码
return chr(string.atoi(match.group(1), 8))
octal_pattern = re.compile(r"\\(\d\d\d)")
print text
print octal_pattern.sub(octal, text)
a line of text\012another line of text\012etc...
a line of text
another line of text
etc...
如果你不编译, re 模块会为你缓存一个编译后版本, 所有的小脚本中, 通常不
需要编译正则表达式. Python1.5.2 中, 缓存中可以容纳 20 个匹配模式, 而
在 2.0 中, 缓存则可以容纳 100 个匹配模式.
最后, Example 1-59 用一个模式列表匹配一个字符串. 这些模式将会组合为一
个模式, 并预编译以节省时间.
1.8.0.6. Example 1-59. 使用 re 模块匹配多个模式中的一个
File: re-example-6.py
import re, string
def combined_pattern(patterns):
p = re.compile(
string.join(map(lambda x: "("+x+")", patterns), "|")
)
def fixup(v, m=p.match, r=range(0,len(patterns))):
try:
regs = m(v).regs
except AttributeError:
return None # no match, so m.regs will fail
else:
for i in r:
if regs[i+1] != (-1, -1):
return i