title:Developing Correctly Replicated Databases Using Formal Tools
author:Nicolas Schiper and
Vincent Rahli and
Robbert van Renesse and
Mark Bickford and
Robert L. Constable
Developing Correctly Replicated Databases
Using Formal Tools
Nicolas Schiper
Vincent Rahli
Mark Bickford
Department of Computer Science, Cornell University
Robbert Van Renesse
Robert L. Constable
Abstract—Fault-tolerant distributed systems often contain
complex error handling code. Such code is hard to test or
model-check because there are often too many possible failure
scenarios to consider. As we will demonstrate in this paper,
formal methods have evolved to a state in which it is possible
to generate this code along with correctness guarantees.
This paper describes our experience with building highly-
available databases using replication protocols that were gener-
ated with the help of correct-by-construction formal methods.
The goal of our project is to obtain databases with unsurpassed
reliability while providing good performance.
We report on our experience using a total order broadcast
protocol based on Paxos and speciﬁed using a new formal
language called EventML. We compile EventML speciﬁcations
into a form that can be formally veriﬁed while simultaneously
obtaining code that can be executed. We have developed two
replicated databases based on this code and show that they
have performance that is competitive with popular databases
in one of the two considered benchmarks.
I. Introduction
Replicated databases form the backbone of much critical
software infrastructure, including the storage tiers of large
cloud services. Their availability is of utmost importance,
but replication code that runs correctly in the normal case
and deals correctly with each failure allowed by the system
model is difﬁcult to develop. For example, the mature and
widely used MySQL database had a bug in the replication
code that caused the slave to crash after a query cache ﬁlled
up. This bug was experienced by many users for months
until it was ﬁxed in May 2012.
While the normal case of a replicated database can be
tested fairly easily,
there are many failure scenarios to
consider. Failure scenarios can be hard to generate and
testing them all is not usually possible. One may try to
leverage model checking tools, but such tools work on
models of the actual replication code and even then may not
be able to search the space of failure scenarios exhaustively.
Testing and model checking tools do not scale well and do
not provide a proof that the code is correct.
In recent years, considerable progress has been made in
the area of tools that can be used to generate executable code
with proven correctness guarantees. An excellent example is
seL4 [1], in which a small OS Kernel (less than 10,000 lines
of code) with correctness guarantees was developed using
the Isabelle/HOL proof assistant [2]. Another such example
is the certiﬁed CompCert C compiler [3], which has been
veriﬁed and generated using the Coq proof assistant [4].
While groundbreaking, these works left open whether or not
such techniques can scale to distributed systems.
This paper shows that formal tools have now developed to
a point where it is possible to build high-assurance databases
using such tools. In our work we leverage the availability of
various open-source databases, assuming they will fail more-
or-less independently. We combine several of these into a
single replicated database using a replication protocol. Based
upon an early version of a replicated database [5], we have
built two such replication protocols, one based on Primary-
Backup [6] and one based on State Machine Replication [7].
The ﬁrst protocol relies on code with formal guarantees
for recovery; with the second protocol, both normal case
operation (apart from transaction execution) and recovery
come with correctness guarantees.
At the core of both replication protocols is a Paxos-based
atomic broadcast service. In order to specify this service
we used and extended EventML [8], a language to develop
asynchronous distributed systems. EventML is an extension
of the ML programming language [9] with event recognizers
and event handlers. Finding the appropriate level of abstrac-
tion for specifying such algorithms was the result of a long-
standing cooperation between formal methods and systems
researchers at our lab. EventML is high-level enough so that
it can be used for formal reasoning (without getting buried
in implementation details), but also sufﬁciently low-level so
that speciﬁcations can be compiled into executable forms.
The diagram presented below in Fig. 1 gives a high-
level overview of our methodology. We use EventML as
our speciﬁcation and runtime environment, and the Nuprl
proof assistant [10], [11], [12] to verify that the distributed
protocols we generate are correct. Starting from a distributed
protocol expressed in EventML, we generate a logical spec-
iﬁcation as well as the corresponding executable code. An
automatic proof veriﬁes that the generated code complies
with the logical speciﬁcation. The correctness properties of
the distributed protocol are then proved semi-automatically
using an interactive proof assistant.
The contributions of this paper are as follows: (1) We
present a methodology to generate provably correct repli-
cated databases; (2) we develop an improved version of the
primary-backup based replication protocol [5] and present
a new protocol based on state machine replication; (3)
we improve two existing models of distributed computing
We have used this methodology to develop a Paxos based
total order broadcast service. Because describing the details
of this service is rather involved, we instead illustrate our
methodology using an implementation of Lamport’s Logical
Clocks [7]. Developing this example will touch upon most
of the important steps. We then describe how the method
scales up to the broadcast service.
A. Overview of Methodology: Fig. 2 provides a detailed
illustration of our workﬂow to obtain formally veriﬁed
distributed programs from informal high-level speciﬁcations.
High-level protocol speciﬁcations can be speciﬁcations writ-
ten in English or pseudo-code. Given such a high-level spec-
iﬁcation we manually generate a corresponding EventML
speciﬁcation and formal correctness properties.
EventML is an ML-like [9] event-based functional pro-
gramming language targeted at developing distributed proto-
cols. EventML expressions can be seen as event recognizers
and event handlers or, alternatively, as functions that receive
and produce messages. We refer to EventML programs
as “constructive speciﬁcations” because we can generate
running code from them and use them for formal reasoning.
We have extended EventML in such a way that it now
provides a workable balance between programming and
proving: its level of abstraction is high-level enough so that
reasoning about speciﬁcations is not impeded by low-level
implementation details, while the level is low enough so
that we can automatically generate executable programs.
EventML’s semantics is deﬁned in terms of two models of
distributed computation implemented in Nuprl: the Logic of
Events (LoE) [13], [14], [15] to specify and reason about
the information ﬂow of distributed programs, as well as
a General Process Model (GPM) [16] to implement these
information ﬂows1. Given a speciﬁcation, we implemented
an EventML compiler that generates both an LoE speci-
ﬁcation and a GPM program (arrows a and b in Fig. 2).
To run an EventML constructive speciﬁcation, the tool ﬁrst
compiles the EventML speciﬁcation to a GPM program,
which can then be executed. Therefore, EventML’s opera-
tional semantics is deﬁned in terms of GPM’s operational
semantics. This means that our compiler cannot be incorrect
because it deﬁnes the semantics of EventML by providing
mappings from EventML abstract syntax trees to LoE and
GPM, whatever these mappings are.
Because debugging code by running it tends to be much
cheaper than proving correctness (which can take days or
even weeks), we often start by running the GPM program
to test some of the most critical scenarios. However, to
guarantee correctness, we have to show that (1) the GPM
program complies with the corresponding LoE speciﬁcation
1To handle distributed programs such as the replicated database discussed
in this paper we extended both LoE and GPM by adding new sets of
primitive constructors that are more fundamental, easier to compose, and
more efﬁcient.
Figure 1. A high-level overview of our methodology.
as well as the EventML programming interface for ease
of use and better performance; and (4) we show through
experimental evaluations that both replicated databases have
performance that is competitive with popular databases in
one of the two considered benchmarks. This shows that
building a replicated database with formal guarantees can
provide good performance.
The remainder of the paper is structured as follows. In
Section II we review the formal methodology that we use
in our work, and then discuss the scalability of the method-
ology. The methodology resembles that of the one used for
the seL4 OS Kernel but departs in some important ways.
Section III describes the design of the replicated database
and the two replication protocols that we developed. In
Section IV, we evaluate the performance of the broadcast
service and the two replicated databases, comparing against
appropriate baselines. Section V discusses related work, and
we conclude in Section VI.
II. Formal Methodology
This section describes the different components and steps
involved in generating running code and proving correctness
properties of that code. We make use of the Nuprl proof
assistant [10], [11], [12]. Our methodology resembles the
one used to verify the seL4 microkernel [1]. With seL4,
the veriﬁed runnable code is obtained in three steps. In the
ﬁrst step, the OS kernel is speciﬁed at a high-level in the
Isabelle/HOL proof assistant. This speciﬁcation is reﬁned
to Haskell code before being reﬁned a second time to a
subset of C. To show the correctness of their implementation,
the authors prove that the reﬁnements are correct. As a
result, the C code “satisﬁes” the high-level speciﬁcation.
Similarly, we use EventML to design protocols, and we
compile these EventML speciﬁcations to Nuprl programs
that can be executed by an interpreter or compiled into Lisp
(which we chose for its similarities to Nuprl’s programming
language). We also compile these EventML speciﬁcations
to Nuprl speciﬁcations and automatically prove that
the
Nuprl programs implement the Nuprl speciﬁcations. One
key difference with seL4’s approach is that we automatically
generate implementations from speciﬁcations and automati-
cally prove that they satisfy the corresponding speciﬁcations.
2
Figure 2. The workﬂow of our methodology.
(label c), and (2) the LoE speciﬁcation satisﬁes the cor-
rectness properties speciﬁed by the high-level speciﬁcation
(label d). Both these tasks are carried out within Nuprl.
Nuprl automatically proves that the GPM program imple-
ments the LoE speciﬁcation. If the proof fails that can mean
that our EventML compiler has to be modiﬁed accordingly.
To show that
the LoE speciﬁcation satisﬁes the desired
correctness properties, the proof developer interacts with
Nuprl to produce such a proof. At this point, the generated
GPM program is considered to be correct.
Nuprl provides a program optimizer that can transform
programs (for example, by unrolling recursive deﬁnitions)
and prove that the optimized program is equivalent to the
original one (label e). Running the program optimizer can
signiﬁcantly reduce the execution time of the GPM program,
by a factor of two or more.
A GPM program is a program written in Nuprl’s de-
pendently typed functional programming language. A Nuprl
program can be executed by an interpreter. In addition we
have implemented a translator into Lisp (arrows labeled f ).
We assume that the interpreter and the Lisp translator are
correct. Given the simplicity of the Nuprl programming
language (an applied,
is a
relatively safe assumption to make. Conﬁdence can be fur-
ther improved because EventML provides two interpreters,
one written in SML and one in OCaml. We can exploit
this diversity for increased reliability by running different
replicas in different interpreters (Sec. III-C).
lazy, untyped λ-calculus),
it
B. Nuprl Concepts: Before illustrating the methodology
with an example, we introduce the concepts that are neces-
sary to understand in more details the tasks of Fig. 2.
The EventML compiler generates an LoE speciﬁcation for
reasoning about the code using Nuprl. LoE is an event-based
speciﬁcation language, where events are abstract objects
corresponding to points in space/time. The “space” aspect of
an event is the physical location at which the event occurs.
The “time” aspect of an event is given by a well-founded
causal order relation on events similar to Lamport’s [7].
3
Events are tagged with additional information, such as the
message that triggered a receive event.
A core LoE abstraction is the event class, a function that
takes events as inputs and outputs some information. The
simplest event classes are what we call base classes. They
play the role of event recognizers. They pattern match on
the headers of the incoming messages and return the content
of the message if the header matches, or nothing otherwise.
From such base classes and using LoE combinators we
can build more complex event classes. For example, X || Y
is the parallel composition of the two event classes X and
Y. It recognizes events recognized by either of its two
components, and handles these events in parallel to produce
the outputs of both X and Y.
The EventML compiler also produces a GPM program.
In GPM a process is modeled as a tail-recursive function
that takes an input, produces output, and computes a new
process to replace the original one. In our case, these inputs
and outputs are messages.
C. Illustration of the methodology: This section illus-
trates our methodology using a simple running example:
Lamport’s logical clocks [7]. We show an EventML speciﬁ-
cation of that protocol and describe how we prove its correct-
ness. We also present some of the program transformations
we apply to the code to simplify and optimize it.
1) Speciﬁcation: Logical clocks partially order events of a
distributed system in a way that respects causal order. Events
represent any processing done locally on one machine, as
well as the sending and reception of a message. The event