regulation of the Android systems. Firstly, Qualcomm supplies a
2The kernel module of CPUfreq acts as the DVFS driver in Linux and Android systems.
The core frequencies can be changed in the power plan in Windows system.
Figure 2: The timing constraint of a circuit case. The rising
edge of clock controls the validation of sequential units.
• Tclk means the clock period of synchronous clock pulse,
which also reflects the circuit frequency.
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom197• The input signal (Idst) of the last FF (Edst) should be held for
a period of Tsetup to be stable before the next rising edge of
clock pulse.
• Tsrc denotes the latency for the first sequential unit (Esrc) to
give a steady output after receiving the rising edge of clock
signal.
• Ttransfer represents the transmission time from the output
(Osrc) of Esrc to Idst, which is also the execution time of the
middle logic components.
For a settled frequency, Tclk is a constant. Besides, for a determi-
nate Edst, Tsetup is invariable. Therefore, in order to make sure the
Odst is as expected, Tsrc and Ttransfer should be limited in equation
(1) with a very small time constant Tϵ .
Tsrc + Ttransfer ≤ Tclk − Tsetup − Tϵ
3.2 Triggering Hardware Faults by
Inappropriate Voltages
(1)
If the provided voltage is lower than the expected one, Tsrc and
Ttransfer will increase, which might violate the timing constraint
in equation (1). Figure 3 demonstrates the signal transitions when
Tsrc and Ttransfer increase. Odst will remain unchanged since the
expected Idst is not prepared at the next rising edge of the clock
signal, which might trigger hardware faults and lead to bit-flip.
The clock frequency of a core is determined by the delay of the
underlying circuit. A high voltage can provide small circuit delay
and thus result in high frequency. DVFS manages multiple dis-
crete frequencies and thus requires different voltages. The required
voltage differentials provide the basic vulnerability for our attack.
Figure 4 shows the basic idea of how VoltJockey works. The attacker
procedure is executed on the core that has a low frequency and the
victim procedure is performed on the core that has a high frequency.
The attacker procedure provides a short-lived glitch voltage that
is harmless for the attacker core but could be detrimental for the
victim core to trigger hardware faults into the victim procedure.
For example, to attack the AES function that is securely protected
by TrustZone, the attacker can invoke the AES and induce errors
into the middle state matrix. The encryption key can be maliciously
stolen. To invalidate the signature authentication when an appli-
cation is being loaded into TrustZone, the attacker can fault the
public modulus of the RSA decryption and change the final output
to cheat the authentication.
Figure 4: The overview of VoltJockey attack. 1○ Necessary
preparations for providing a suitable voltage glitch environ-
ment; 2○ Attacker procedure waits for the victim function to
be invoked; 3○ Attacker procedure waits for the target codes
to be executed; 4○ Attacker procedure alters the core voltage
to induce hardware faults; 5○ Recovering the core voltage.
Figure 3: The timing constraint may be violated if Tsrc and
Ttransfer are increased due to inappropriately low voltage
against the designated frequency.
Increasing the voltage of the circuit may damage the stability of
electronic units and introduce hardware faults, too. For example,
if Esrc becomes unstable due to the fact that a high voltage is im-
posed, Osrc may be reversed and Odst will remain at value 1. In this
situation, hardware faults are introduced. This is elaborated with
full details in Figure 11 in the Appendix.
3.3 Attack Method
If both the frequency and voltage of a core are independent from
the other cores, attackers can induce hardware faults by fixing the
victim core’s frequency and choosing a low voltage for the victim
core. However, most of the current processors that enable DVFS are
designed with a shared hardware voltage regulator. Changing the
voltage of victim core will also modify the voltage of other cores.
3.3.1 Assumption. In the attack model of VoltJockey, we make the
following two assumptions
• We assume that the voltage of the target multi-cores proces-
sor can be adjusted by software. This is actually a common
practice used by a wide range of processors for efficient
energy saving by DVFS.
• We assume that the attackers have privileges to configure the
processor voltage. This requires the attackers to first acquire
the root privilege for some systems, which is a well-studied
topic and there are many ways to achieve that.
3.3.2 Attacking parameters. The attackers need to determine the
following critical parameters to launch the proposed attack:
Ffault = {Fa, Fv, Vl, Vb,Tw,Tp,Td}
The meaning of each parameter is listed in Table 1.
3.3.3 Attacking procedure. The attackers can introduce hardware
faults into the victim procedure by the following five steps.
Setting EnvironmentWaiting for Victim FunctionPrevious DelayVoltageAlterationVoltageRestoreVictim FunctionCodes before victim codesCodes after victim codesCodes before Victim FunctionCodes after Victim FunctionCache Layout Processor StatesCore Voltage…Victim codesFaultSession 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom198Table 1: The descriptions of attacking parameters
Para.
Fa
Fv
Vl
Vb
Tw
Tp
Td
Meaning
The frequency of attacker core.
The frequency of victim core.
The glitch voltage that induces hardware faults.
The baseline voltage before and after the fault injection.
The waiting time before the victim function is executed.
The previous delay before the attacker procedure can change
the processor voltage to the glitch voltage.
The duration time that the glitch voltage should be kept to
ensure a successful fault injection.
(a) Preparation setup. A suitable voltage glitch environment
should firstly be prepared before the attack is carried out. First of
all, the victim core should be configured with a high frequency
and all the other cores should be set to low frequencies. Secondly,
the attacker procedure should initialize the processor with a fixed
and secure voltage. Finally, all the residual states in the target
device should be cleared. This includes cache cache layouts, branch
prediction table, interrupt vector table, and status registers, etc. We
show how to clear the residual states in section 4.2.
(b) Waiting for victim function. In normal situations, the vic-
tim function that VoltJockey would inject faults into is a small part
of the victim procedure, and it is uncertain when the victim func-
tion would be running. Therefore, the attacker procedure needs
to wait for the target function to be invoked by monitoring the
intermediate executions of victim procedure before it can induce
desired faults. This will be further discussed in section 4.7.
(c) Waiting for appropriate injection points. The goal of the
injected hardware faults is to influence a small part of instructions
and data of the victim function, and the portion of the affected codes
should be kept as small as possible. Therefore, the fault injection
points should be elaborately controlled. The waiting time before
the fault injection can be conducted is called as the previous delay.
We show our experiment data about the previous delay on faulting
AES and RSA in section 4.11.
(d) Voltage manipulation. This step is responsible for trigger-
ing hardware faults. The value of glitch voltage and its lasting
duration are these two factors to take controllable hardware faults.
It is very important to find the proper voltage values and their
lasting time that will result in desired data changes. More details
about the two factors on attacking AES and RSA are discussed in
section 4.12.
(e) Restoring voltage. The ultimate goal of VoltJockey is to ob-
tain sensitive data or tamper the functions of victim procedure
other than crashing the victim core. Therefore, the attacker proce-
dure needs to restore the processor voltage to resume the victim
procedure normally as soon as the fault injection is done.
4 TECHNICAL CHALLENGES OF
VOLTJOCKEY
In this section, we present the major technical challenges that the
VoltJockey addresses, which gives the most important technical
details and experiment probings to implement such an attack.
4.1 Parallel Execution
In VoltJockey, the attacker procedure and the victim procedure
are diverse processes and executed in parallel, which also is the
most common attack scenario. System libraries provide functions
to support the binding of one thread to a dedicated core. Besides,
OS supplies operations3 for a user to fix one task on a special core.
4.2 Residual States
The system’s residual states before performing the victim procedure
can affect the execution time of instructions of the victim procedure.
This is mainly reflected from three sides. Firstly, the data access
when cache hits will take less time than cache misses, and there-
fore influences the instruction finish time. Secondly, the branch
predictions may also result in the execution time variations of in-
structions. Thirdly, the unfinished tasks or interrupts may enforce
the victim core to emit the victim procedure. Therefore, clearing the
residual states is practically significant for the attacker procedure
to acquire the precise injection points of hardware faults. In this
study, we first flush the cache memories to clear the existing data,
and then execute the victim procedure for several times to fill cache
and set processor state registers with the victim procedure-related
data. In such circumstances, the branch prediction table will also be
highly correlated to the victim procedure. Moreover, we also close
the IRQ and FIQ interrupts that target at the victim core in voltage
manipulation to shield the influences of interrupts.
4.3 Legal Voltage Enforcement
In Android systems, the OPPs are defined in the device-related dtsi
file [36]. Figure 5 shows an example OPPs (black curve) extracted
from Google Nexus 6, which gives the available frequencies and
corresponding secure voltages. VoltJockey needs to bypass the re-
straint of OPPs to gain the power to manipulate the voltages. We
analyze the kernel codes of the software stack of DVFS in the system
of Nexus 6 and find that the top level driver is responsible for the es-
tablishment of frequency table and frequency selection. In addition,
the vendor-specific frequency and voltage regulator drivers change
the frequency and voltage of processor cores with the request of
the top level software and do not care if the request parameters are
in the frequency table. This makes it very easy to break the legal
frequency-voltage enforcement for voltage manipulation.
4.4 Voltage Threshold
Qualcomm implants a low dropout linear regulator (LDO) mode for
the krait architecture, which delivers a stable and regulated voltage
(voltage threshold) to cores for avoiding the processor’s malfunc-
tions. If the requested voltage is less than the voltage threshold, the
vendor-specific voltage regulator driver [33] will turn the processor
voltage mode into LDO, and the processor will be provided the
stabilized threshold voltage rather than the less one. The low volt-
age threshold is defined in the regulator property description file
[35] and is read in the power probe stage of the voltage regulator
driver. In this study, we change the voltage threshold by revising
3Linux provides a command of taskset for a normal user to assign one task on an
appointed core and the command is supported after Android 6.0. The core binding can
be achieved in the task manager in Windows systems.
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom199injection points, and then conducts the low voltage glitches. Finally,
the working environment is cleaned and reset to the original.
4.7 Victim Procedure Monitoring
The fault injection process is right subsequent to the time when
the victim function is invoked. The attacker also needs to detect
if the expected data changes are achieved to conclude whether
the fault injection is successful. Therefore, the execution data of
the victim procedure is required to be visible to the attacker pro-
cedure. However, the attacker procedure cannot directly read the
data of victim procedure as they are different processes and are
separated by the operating system (OS). In this study, we use cache
side-channel attacks to speculate the victim procedure’s data. There
are several side-channel technologies available in the domain, for
instance, prime+probe [58], flush+reload [70], evict+reload [50], and
flush+flush [40]. Lipp et al. verified that the cache side channel
attacks are effective for TrustZone and read T-table of AES exe-
cuted in TrustZone successfully [49]. In VoltJockey, we monitor the
instruction executions of the victim procedure by the method of
prime+probe.
4.8 Timing
The previous delay and voltage glitch duration are time-sensitive
factors. However, they are always a few cycles for the appropriate
fault injections in real attacks. Therefore, the timing functions4 pro-
vided by OS cannot fit the time precision demand. In the VoltJockey
kernel module, we utilize the specified loops of NOP operations to
count the execution cycles. In general, a NOP operation does nothing
except for spending a cycle, it is a wonderful operation for timing in
the clock accuracy. Besides, we embed the clock counting instruc-
tions in the required locations to eliminate the time consumption
of function calls or returns. Moreover, the timing instructions are
programmed to be not optimized by the compiler.
4.9 Voltage Manipulation
When inducing hardware faults, the abnormal voltages may make
the system reboot. Besides, some attempts may fail. In order to
avoid the system from rebooting and improve the attack efficiency
and reliability, we employ the following techniques in VoltJockey.
• Making the irrelevant cores busy.
Figure 6 shows the minimum duration for the successful hard-
ware fault injection with respect to different glitch voltages on the
Nexus 6 processor. When the irrelevant cores (the processor cores
except the attacker and victim cores) are idle (shut down), as the
black curve shows, the minimum glitch duration is much longer
than the other two situations shown by the red and blue curves.
The reason might be that more power can be supplied to the victim
core and the hardware faults are not easy to induce. When all the
irrelevant cores are working with the normal workload (around
30%-50% core usage), as the red curve shows, the minimum duration
of glitch voltages is also longer than those of the blue curve, which
shows the case that all the irrelevant cores are busily working with
high workloads (above 80% core usage). The reason might similarly
be that more power can be supplied to the victim core when most
4In the Linux kernel, udelay, mdelay, ndelay, and msleep are widely utilized as the
timekeeping functions.
Figure 5: The manipulable voltages of Nexus 6 processor.
the power probe function since the influence range is smaller than
modifying the property description file.
The high voltage threshold is hardened in the last byte of the
voltage setpoint [34]. The step width of core voltage is 0.005V
in Nexus 6, which means that the core voltage is theoretically
restricted from 0V to 1.275V . We find out that the processor is
always restarted immediately when the core voltage is set to a
value that is larger than 1.275V . Therefore, it is actually unpractical
to use high voltage to take faults with software.
4.5 Voltage Down-tuning Restriction
As shown in section 2.3, all the processor cores have a common
voltage value. In order to ensure the high-frequency cores perform
tasks error-freely when tuning the voltage, the voltage regulator
driver is designed to only select the higher one between the request
voltage and the voltage that corresponds to the highest core fre-
quency, in other words, no down-tuning voltages are accepted by
the regulator unless the frequency is lowered. In this study, we also
cancel such restriction by revising the regulator driver.
4.6 VoltJockey Kernel
We alter the voltage regulator driver to bypass the limits above.