title:Function Interface Analysis: A Principled Approach for Function
Recognition in COTS Binaries
author:Rui Qiao and
R. Sekar
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Function Interface Analysis: A Principled Approach
for Function Recognition in COTS Binaries
Rui Qiao
Stony Brook University
PI:EMAIL
R. Sekar
Stony Brook University
PI:EMAIL
Abstract—Function recognition is one of the key tasks in
binary analysis, instrumentation and reverse engineering. Pre-
vious approaches for this problem have relied on matching
code patterns commonly observed at the beginning and end
of functions. While early efforts relied on compiler idioms and
expert-identiﬁed patterns, more recent works have systematized
the process using machine-learning techniques. In contrast, we
develop a novel static analysis based method in this paper. In
particular, we combine a low-level technique for enumerating
candidate functions with a novel static analysis for determining if
these candidates exhibit the properties associated with a function
interface. Both control-ﬂow properties (e.g., returning to the
location at the stack top at the function entry point) and data-
ﬂow properties (e.g., parameter passing via registers and the
stack, and the degree of adherence to application-binary interface
conventions) are checked. Our approach achieves an F1-score
above 99% across a broad range of programs across multiple
languages and compilers. More importantly, it achieves a 4x or
higher reduction in error rate over best previous results.
I. INTRODUCTION
Functions are among the most common constructs in pro-
gramming languages. While their deﬁnitions and declara-
tions are explicit in source code, at the binary level, much
information has been lost during the compilation process.
Nevertheless, numerous binary analysis and transformation
techniques require function information. For reverse engineer-
ing tasks such as decompiling [21, 18, 33], function boundary
extraction provides the basis for recovering other high level
constructs such as function parameters or local variables. In
addition, many binary analysis and instrumentation tools are
designed to operate on functions. These include binary code
search [19, 16, 15, 9], binary code reuse [41], security policy
enforcement [12, 32, 10, 2, 42, 46, 43, 39, 40], type inference
[26], in-depth binary analysis such as vulnerability detection
[38], and more. In fact, a recent survey performed literature
study by collecting all binary-based papers published last 3
years at top security conferences, and found that 14 out of
30 works rely on function boundary information [4]. As a
result, developers of most existing binary analysis platforms
[1, 8, 22, 36] need to design and implement techniques to
recognize functions.
Function recognition is a challenging task for stripped
COTS binaries since they lack debug, relocation, or symbol
information. Unlike source code, functions in binaries can have
multiple entry points, potentially causing multiple functions to
be recognized in the place of one. Moreover, while directly
1This work was supported in part by grants from NSF (CNS-1319137) and
ONR (N00014-15-1-2378).
called functions can be easily identiﬁed after disassembly,
there exist a signiﬁcant fraction of functions that are reach-
able only indirectly, i.e., their entry points are known only
at runtime. Existing techniques (e.g., [45]) for determining
indirectly reached functions tend to highly over-estimate their
number, thus leading to poor precision.
Compiler optimizations further exacerbate function recog-
nition in COTS binaries. For instance, tail call optimization
results in functions being entered via a jump instruction
instead of a call instruction. In addtion, function inlining may
eliminate all calls to a function, thereby resulting in unreach-
able functions. While the recovery of reachable functions is
critical for all binary analysis and instrumentation applications,
some applications such as binary comparison and forensics
require the recovery of unreachable functions as well. Our
evaluation shows that the percentage of unreachable functions
is signiﬁcant: over 15% on average for SPEC 2006 programs.
Due to the above difﬁculties, one cannot rely on the obvious
approach of identifying functions by following direct calls.
Many previous systems [1, 8, 22, 36] relied instead on pattern-
matching function prologues (e.g., the instruction sequence
push ebp; mov esp, ebp) and epilogues. Unfortunately, this
approach is far from robust, since these patterns may differ
across compilers. Moreover, optimizations may split and/or
reorder these code sequences. Other optimizations (e.g., reuse
of ebp as a general purpose register) may also remove such
identiﬁable prologues/epilogues. As a result, the best existing
tools are still unsatisfactory for function recognition [7].
To overcome the limitations of manually identiﬁed patterns,
machine-learning based approaches have been proposed for
function recognition [31, 7, 35]. The idea is to use a set of
binaries to train a model for recognizing function starts and
ends. Machine learning can build more complete models that
work across multiple compilers, while reducing manual effort.
As a result, ByteWeight [7] achieved an average F1-score of
92.7% on a benchmark consisting of x86 binaries. Shin et al
[35] further improved the accuracy to achieve an F1-score of
94.4% on the same dataset. Unfortunately, error rates of over
5% are still too high for most applications. More importantly,
the accuracy of these techniques can be skewed by the choice
of the training data. In fact, an independent evaluation of this
dataset [5] found many functions to be duplicated across the
training and testing sets, thus artiﬁcially increasing their F1-
score. When evaluated with a different data set, ByteWeight’s
accuracy degraded to around 60% [5].
In light of these drawbacks of machine-learning based
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.29
201
approaches, we propose a more conventional approach for
function discovery, one that is founded on static analysis.
However, unlike previous techniques that relied on simple
control-ﬂow analyses, and were confounded by the above-
mentioned complications posed by stripped COTS binaries,
our technique incorporates two key advances:
• We develop a ﬁne-grained analysis that is based on de-
tailed semantics of every instruction1, including their effect
on the contents of the registers and memory. As a result,
our analysis can reason about the content of the stack, as
well as the ﬂow of data between a function and its caller.
• We identify a rich set of data-ﬂow properties that char-
acterize function interfaces, such as the use of registers
and the stack to pass parameters and/or return values. We
present a static analysis to discover these ﬂows, and verify
whether a candidate function satisiﬁes these properties.
As a result of these advances we have achieved a 4-fold
reduction in error rate as compared to the results reported
by Shin et al [35]. As compared to Nucleus [5], which relies
on a static analysis of control-ﬂows, we achieve an even more
impressive error rate decrease of more than 7x.
I-A. Contributions
We develop a novel, static analysis based approach for
function recognition in COTS binaries. Speciﬁcally, we make
the following contributions:
• Function identiﬁcation by checking function interface
properties. We show that function interface properties,
as compared to function prologue patterns, can provide
valuable evidence for function recognition. We identify a
collection of such properties and present static analysis
techniques to check them. Each of these techniques is
shown to be independently effective in our evaluation.
• In-depth evaluation. Our evaluation consists of about 2400
binaries resulting from 312 distinct C, C++ and Fortran
programs. These binaries have been compiled using 3
different compilers (GCC, LLVM and Intel) for two ar-
chitectures (x86 and x86-64) at four distinct optimization
levels. In contrast with previous work, our evaluation set
includes low-level code with hand-written assembly code,
in particular, GNU libc.
• Highly accuracy. Our approach achieved an average F1-
score of 99% across these data sets, much better than the
90% to 95% achieved by previous works [7, 35, 5]. This
represents a reduction in error rate by more than 4x.
• Deeper insight. Our approach automatically categorizes
recognized functions by their reachability such as “tail-
called” or “unreachable.” As discussed in Section VIII,
such information can be the basis for further tuning and
reﬁnement of the analysis in order to support demanding
applications such as binary instrumentation that cannot
tolerate errors.
1We have previously shown how to extract such semantics using existing
compilers for a wide range of instruction sets [25, 24, 23].
202
II. BACKGROUND
II-A. Organization of Binaries
Program binaries are organized into sections. Each section
may contain code, data, metadata, or other auxiliary informa-
tion. A code section consists of a sequence of bytes which
is interpreted by the CPU as instructions and gets executed
at runtime. There may be metadata about the code sections
(and data sections), most notably the symbol table, which
denotes the symbol type (e.g., function), start offset, and size
of each symbol. However, symbol tables are normally stripped
off before COTS binaries are distributed.
II-B. Disassembly
Disassembly is usually the ﬁrst step for any binary analysis.
There are two major techniques for disassembly: linear sweep
and recursive traversal [34]. Each of these techniques has some
limitations: linear sweep may erroneously treat embedded data
as code, while recursive traversal suffers from completeness
problems due to difﬁculties in statically determining indirect
control ﬂow targets.
Recent advances have shown that robust disassembly can
be achieved with linear disassembly [4] and error correction
mechanisms [45]. More speciﬁcally, the disassembly algorithm
works by ﬁrst linearly disassembling the binary, and then
checking for errors such as (1) invalid opcode; and (2) direct
control transfer outside the current module or to the middle of
an instruction. These errors arise due to embedded data and
are thus corrected by identifying data start and end locations
so that disassembling can skip over them. Robust disassembly
has been achieved by these techniques for a wide range of
complicated and low-level binaries [45, 4], so we rely on the
same techniques in this paper.
II-C. Discovering Possible Code Pointers
Although it is undecidable whether a constant value in a
binary represents a code pointer, conservative analysis tech-
niques have been developed that identify a superset of possible
code pointers. One recent approach [45] is to scan all constants
in the binary, and select the subset that (a) fall within the
range of code sections within the binary, and (b) target a valid
instruction boundary. We start from this conservative set, and
develop techniques that prune away almost all non-functions.
As shown in our experiments, our analysis reduces the number
of valid function pointers by a factor of 3.
II-D. Jump Table Analysis
A jump table is an array of addresses that are possible
targets for an indirect jump (which we refer to as a table
jump). Jump tables are generally used to implement intra-
procedural switch-case statements in high-level languages.
Existing work has developed analysis techniques to identify
jump tables as well as their targets [13, 28]. The basic idea
is to perform a backwards program slicing from each indirect
jump instruction, and then compute an expression for the jump
(cid:39)(cid:76)(cid:85)(cid:72)(cid:70)(cid:87)
(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)
(cid:76)(cid:71)(cid:72)(cid:81)(cid:87)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:86)
(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:69)(cid:82)(cid:71)(cid:92)(cid:3)
(cid:87)(cid:85)(cid:68)(cid:89)(cid:72)(cid:85)(cid:86)(cid:68)(cid:79)
(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:69)(cid:82)(cid:88)(cid:81)(cid:71)(cid:68)(cid:85)(cid:76)(cid:72)(cid:86)
(cid:44)(cid:81)(cid:71)(cid:76)(cid:85)(cid:72)(cid:70)(cid:87)
(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)
(cid:72)(cid:81)(cid:88)(cid:80)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:45)(cid:88)(cid:80)(cid:83)
(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)
(cid:72)(cid:81)(cid:88)(cid:80)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:41)(cid:88)(cid:81)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:76)(cid:81)(cid:87)(cid:72)(cid:85)(cid:73)(cid:68)(cid:70)(cid:72)(cid:3)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:76)(cid:81)(cid:74)
(cid:16)
(cid:16)
(cid:16)
(cid:54)(cid:87)(cid:68)(cid:70)(cid:78)(cid:3)(cid:71)(cid:76)(cid:86)(cid:70)(cid:76)(cid:83)(cid:79)(cid:76)(cid:81)(cid:72)
(cid:38)(cid:82)(cid:81)(cid:87)(cid:85)(cid:82)(cid:79)(cid:3)(cid:73)(cid:79)(cid:82)(cid:90)(cid:3)(cid:83)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:76)(cid:72)(cid:86)
(cid:39)(cid:68)(cid:87)(cid:68)(cid:3)(cid:73)(cid:79)(cid:82)(cid:90)(cid:3)(cid:83)(cid:85)(cid:82)(cid:83)(cid:72)(cid:85)(cid:87)(cid:76)(cid:72)(cid:86)
(cid:56)(cid:81)(cid:85)(cid:72)(cid:68)(cid:70)(cid:75)(cid:68)(cid:69)(cid:79)(cid:72)
(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)
(cid:72)(cid:81)(cid:88)(cid:80)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
Fig. 1. Overview of our analysis. Direct function starts are identiﬁed from call instructions in the disassembly, and require no further conﬁrmation.
The remaining function start candidates (Indirect, Jump and Unreachable function) need to pass our function interface checks that eliminate spurious
functions. Function body traversal is used to determine function ends, and takes advantage of already identiﬁed functions. Function body traversal and boundary
information feeds back into the determination of unreachable functions, as well as jump-reached (i.e., tail-called) functions.
target. If the expression matches commonly used table jump
patterns, the indirect jump is recognized as a table jump.
The address of jump table can be extracted from the same
expression, and its bound is obtained based on constraints
imposed on the index variable. Finally, jump targets can be
collected from the identiﬁed jump table.
III. OVERVIEW OF APPROACH
III-A. Problem Deﬁnition
We deﬁne a binary function as a contiguous byte sequence
in code section that has one or more entry points reached
from outside the function; and one or more exit points that
transfer control from the function to some code outside. Note
that the entry point is typically reached using call instructions,
but other instructions are possible as well, e.g., a jump. An
exit occurs typically via a return instruction, but there are
exceptions such as jump instructions or calls to non-returning
functions such as exit.
Our task is to recover bytes belonging to each function.
Similar to prior work [7, 35], correctness is determined by
matching the start and end address for each function with sym-
bol table information2. Note that the start and end addresses
correspond to the smallest and largest addresses among the
bytes in the function.
Scope. Our analysis focuses on stripped COTS binaries: no
debug or symbol information is available. Our evaluation fo-
cuses on Executable and Linkable Format (ELF) binaries from
x86-32 and x86-64 Linux platform, although our technique
itself is applicable to other platforms and binary formats, such
as Windows and the Portable Executable (PE) format. We
make no assumptions on the source language, compiler used,
compiler switches or optimization levels. However, similar to
prior work [7, 35, 5], obfuscated binaries are out of scope.
2While our experiments are performed on stripped binaries, we rely on
symbol tables in unstripped binaries for the ground truth.
III-B. Approach Overview
As illustrated in Fig. 1, our approach involves enumerating
possible function starts, and then using a static analysis to
conﬁrm them. Possible function start addresses are enumerated
in different ways. Directly called function starts are readily
obtained from disassembled code. For indirectly reachable
functions, code addresses buried in all binary sections serve
as function start candidates, while for unreachable functions,
the beginning of unclaimed code regions are considered.
As shown in Fig. 1, any function that isn’t directly reached
needs to be conﬁrmed through interfaces, our approach iden-
tiﬁes spurious functions by checking for properties associated
with function interfaces, such as the stack discipline, and the
expected control-ﬂow properties and data-ﬂow properties.
To determine function ends, function body traversal
is
performed. Tail calls are also identiﬁed during this traversal.
In a nutshell, our approach iteratively uncovers functions
based on how they are reached. Directly reached functions are
ﬁrst identiﬁed, and then indirect functions are enumerated and
checked. Finally, unreachable functions are handled. Note that
Jump function enumeration and checking happens alongside
the body traversal for all other functions. The whole procedure
ends when all code regions have been covered.
Note that multiple-entry functions are supported by our
approach: a function with n entry points is treated as if there
are n independent single-entry functions. Each is analyzed
independently by our method. Multi-entry functions can be
easily derived if needed by the applications.
In the following sections, we describe our techniques for
determining function starts (Section IV), function boundaries
(Section V), and interface checking (Section VI).
IV. FUNCTION STARTS
IV-A. Directly Reachable Functions
According to our deﬁnition in Section III-A, functions
are code sequences that are called (or alternatively, reached
using jumps). Therefore, with the disassembly obtained (Sec-
tion II-B), the targets for direct call instructions are deﬁnite
203
function starts. They are ﬁrst collected. Note that we exclude
call instructions used for “non-call” purposes [30], such as
retrieving current instruction pointer in the case of position
independent code.
Although we can obtain direct jump targets in the same
manner, it is non-trivial to distinguish whether they are func-
tion starts (as in the case of a tail call), or, more likely, intra-
procedural targets. We enumerate jump targets as possible
function starts if the target is physically non-contiguous with
current function body (Section V). An analysis of the jump
context is later performed to conﬁrm the function start.
IV-B. Indirectly Reachable Functions
Some functions are only reachable indirectly. These include
functions that are reached using either indirect calls, or indirect
jumps (i.e.,
tail calls). To enumerate their starts,
constant scanning described in Section II-C is used. Since
spurious function starts may also be included, the constants
need to be conﬁrmed using interface checking.
indirect
IV-C. Unreachable Functions
Unreachable functions are identiﬁed by analyzing “gap”
areas that do not belong to any of the functions identiﬁed
by the techniques described so far. Since functions typically
have padding bytes after their end, we consider the ﬁrst non-
NOP instruction3 in each gap as a potential function start.
The corresponding function end is then determined using
techniques described in Section V. If this potential function
does not take all the space of the current gap, the remaining
region is considered as a new gap, and the process continues
until all gaps have been analyzed.
Although our gap exploration seems similar to prior work
[1, 22, 8], the primary difference is that the identiﬁed functions
have to pass interface property checking.
V. IDENTIFYING FUNCTION BOUNDARIES
To identify function boundaries, we traverse a function
body, starting at its entry point. All possible paths are followed
until control ﬂow exits the function. The largest address of
any instruction discovered using this process is considered the
end of the function. Note that exits may sometimes take place
via jumps (tail calls), or calls to non-returning functions. As
described below, we discover and handle those cases as well.
intra-
procedural branches until function exits. Specially, for condi-
tional jumps, both branches are taken, while for table jumps,
all recovered targets are followed.
Function body traversal works by following all
For function body traversal, some special control ﬂow trans-
fers need to be taken into account, most notably C++ exception
handling. When an exception occurs, either at the current
function or some of its callees, control is ﬁrst directed to C++
3We consider an instruction as “NOP” based on its semantics: i.e., the
machine state (other than program counter) is not changed. For example,
other than nop itself, xchg ax, ax is also a NOP instruction.
(cid:73)(cid:88)(cid:81)(cid:70)(cid:3)(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)(cid:19)(cid:91)(cid:19)(cid:21)(cid:19)(cid:19)
(cid:73)(cid:88)(cid:81)(cid:70)(cid:3)(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)(cid:19)(cid:91)(cid:19)(cid:23)(cid:19)(cid:19)
(cid:11)(cid:39)(cid:12)
(cid:73)(cid:88)(cid:81)(cid:70)(cid:3)(cid:86)(cid:87)(cid:68)(cid:85)(cid:87)(cid:3)(cid:19)(cid:91)(cid:22)(cid:19)(cid:19)(cid:19)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:29)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:85)(cid:72)(cid:87)
(cid:19)(cid:91)(cid:21)(cid:21)(cid:19)(cid:19)(cid:29)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:85)(cid:72)(cid:87)
(cid:11)(cid:36)(cid:12)
(cid:11)(cid:36)(cid:12)
(cid:11)(cid:37)(cid:12)
(cid:11)(cid:38)(cid:12)
Fig. 2. Tail call detection
runtime, which is responsible for locating the proper handler
code (also called a “landing pad”), and during this process,
stack unwinding may be performed. If current function is
identiﬁed to have a landing pad designated for the raised
exception, control ﬂow is transferred to this landing pad.
Since a landing pad is essentially indirectly reached from
C++ runtime, the control ﬂow transfer is not captured in the
disassembly of the analyzed binary. We therefore parse the
“call frame information” available in .eh frame sections of
ELF binaries, the same metadata used by the C++ runtime
to guide exception handling. Note that exception handling
information must be present even in stripped binaries.
Function body traversal stops at function exits. While most
functions exit via return instructions, there are special cases
that involve calls and jumps as described further below.
Function exits via calls to non-returning functions. Al-
though most functions do return to the caller, some don’t. For
example, libc exit function terminates the program, and the
control ﬂow never returns back to the caller. Such calls should
be recognized as function exits.
To determine non-returning functions, we perform a simple
analysis. First, we collect a list of library functions that are
documented to never return. We then analyze each potential
function of the binary. If it calls a known non-returning
function on each of its control ﬂow paths, it is also recognized
as a non-returning function and added to the list, and so on.
Function exits using jump instructions. Tail call is another
special type of function exit that uses jump instructions. If not
recognized, tail calls will be treated as normal intra-procedural
jumps, leading to errors in function end identiﬁcation.
We utilize previously identiﬁed functions to detect tail calls.
In particular, a jump is classiﬁed as a tail call if:
• the jump target is a known function start or a PLT4 entry;
• or, if the edge crosses known function boundaries.
We illustrate this process with an example. In Fig. 2, function
body traversal begins from an identiﬁed function start address
4PLT (procedure linkage table) entries are code stubs in ELF binaries used
to route calls to functions in another binary module (e.g., a shared library).
204
0x0400. Let A, B, C, and D be four direct jumps encountered
during this traversal. Since jump A targets a previously identi-
ﬁed function and B crosses a function start, they are identiﬁed
as tail calls. For jumps C and D we use the following two-
step process to determine if they are tail calls. First, our
function body traversal speculatively follows all jumps and
only terminates at deﬁnite function exits (e.g., returns). Any
jump such as C whose target isn’t physically contiguous with
other traversal-covered instructions is identiﬁed as a potential
tail call. In Fig. 2, the colored area starting at 0x400 represents
the instructions covered by such a traversal. Since D targets an
instruction in this region, it is classiﬁed as intraprocedural.
A candidate such as C is conﬁrmed as a tail call if both the
jump and the target pass function interface checks. Function