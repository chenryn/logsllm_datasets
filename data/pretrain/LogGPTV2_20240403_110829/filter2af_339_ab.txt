主包004参数传递的应用名，并拷贝到设备sdcard/database目录命名为5supdate.apk，同时配置“下载者”病毒相关文件，存放目录在sdcard/database目录下。包括actiondown记录包名以及启动服务名、actionsuk应用最近一次运行时间、install.ab服务器推广应用安装情况、mychannel应用渠道，这些文件数据全部都AES加密存放。Actiondown记录下载者病毒包名以及入口服务。
    actiondown:{"downLoadPackageName":"com.android.ucgmap","downLoadVersionKey":1,"downLoadStartMethod":"com.android.ucgmap\/com.android.ucgmap.AimService”}
### **4.3 诱骗用户安装，并启动“下载者”病毒**
子包动态注册监听android.intent.action.PACKAGE_ADDED、android.intent.action.USER_PRESENT消息广播。处理包安装完毕消息，若此次安装包名是actiondown里downLoadPackageName字段记录的“下载者”病毒，读取downLoadStartMethod字段启动“下载者”。
图12
**使用两种策略诱骗用户安装“下载者”病毒(其应用名为update)，一默认模式以应用更新诱骗用户点击安装；二由服务器设置，弹出系统更新诱骗用户点击安装。**
图13
#####
### **4.4 子包自更新**
子包的连接并不是直接暴露的，而是做了两层跳板。配置下一跳转访问地址，参数设备aid、imsi、gaid、mac(wifi)，request和response数据全部AES加密。服务端会根据上传的设备信息返回次设备对应的url地址，随后设备会使用该地址下载服务端推广的应用。
**下图访问url_1(**
图14
解密后的数据为：{"upstream":"http:\/\/sdk.smartchoiceads.com"}，这样获取了下一跳板的地址。
访问跳板地址，下载、加载和运行最新版子包。 访问服务器配置的url_2，服务器同样返回AES加密数据，解密后的数据如下：
    {"solib_name":"libDaemonProcess.so","download_url":"http:\/\/u.smartchoiceads.com\/sdk\/HostDex_20160623163035.jar","classname":
    "com.hostinjectiondex.external.ExternalInterfaces","filename":"dexhostinjection.jar","start_method":
    "startExternalBody","solib_url":"http:\/\/u.smartchoiceads.com\/sdk\/libDaemonProcess_20160520175142.so","stop_method":
    "stopExternalBody","request_interval":"1800","version":"8"}。
根据解密获取的字段，下载新版本的dexhostinjection.jar包，以及lib库，目前服务器最新版本dexhostinjection_8.jar。子包通过向主包的DexService发送com.injection.action.RELOAD_DEX消息意图，完成子包更新加载。
图15
## **五、“下载者”分析**
子包dexhostinject.jar下载的5supdate.apk存放位置在sdcard/database目录下，既是“下载者”病毒安装包，通过应用更新或系统更新诱骗用户安装，安装后dexhostinject.jar启动“下载者”导出服务AimService。“下载者”病毒工作流程图如下：
图16
#####
### **5.1 ChatActivity组件，强制激活设备管理**
dexhostinject.jar启动应用的参数会唤起ChatActivity组件运行。ChatActivity进行设备管理激活，一旦用户激活设备管理，应用将很难被卸载。用户在取消截获设备管理时，AdminReciver会进行锁屏操作并跳转到桌面。
图17
### **5.2 组件AimService**
1.加载target.jar子包，保护“下载者”核心服务AimService不死
2.启动ApsService，组件ApsService是云端推送服务，注册时钟广播每10分钟发送广播转交给ApsAdReceiver处理
图18
3.onStartCommand处理消息意图，包括：
​ a）com.injection.action.RELOAD_DEX，更新target.jar子包；
​ b）com.injection.action.stopJobService，停止JobScheduler并进程自杀；
​ c）-a com.android.startadmin --es isadmin
true，唤起ChatActivity组件，进行激活设备管理。该意图消息是dexhostinject.jar发送给AimService的。
### **5.3“下载者”应用推送分析**
应用下载、安装和启动由ApsService和ApsAdReceiver联合完成。当update应用处于后台运行，并且屏幕处于亮起状态，“下载者”向C&C服务器发起请求，下图访问C&C控制。
图19
“下载者”病毒会每隔10分钟访问
    {
      "isOpened":true,
      "isOpenHideNativeAd":true,
      "fid":"",
      "fnid":"558734714274962_641985812616518",
      "aid":"ca-app-pub-2499265864844132/2514086206",
      "bnid":660078,
      "solaid":5011,
      "soltid":1000171,
      "ad_interval":10,
      "no_ad_start":0,
      "no_ad_end":6
    }
该数据结构信息是当前推广应用的信息，随后通过消息handler转交给startAdWork函数处理。
图20
每隔120分钟请求控制端下载推广应用，[http://www.gamescpa.com/SDKManager/cpa/downloadlink.php?country=cn&packageName=com.android.ucgmap，C&C控制端返回推送的应用信息，包括packgae(应用包名)、url(应用下载链接)、size(应用大小)，返回数据转交给消息handler处理，进行应用下载安装。](http://www.gamescpa.com/SDKManager/cpa/downloadlink.php?country=cn&packageName=com.android.ucgmap，C&C控制端返回推送的应用信息，包括packgae\(应用包名\)、url\(应用下载链接\)、size\(应用大小\)，返回数据转交给消息handler处理，进行应用下载安装。)
图21
再配合之前注册的时钟广播ApsAdReceiver，完美完成推广应用启动。
图22
##
## **六、 病毒sha1:**
​ 01b3e575791642278b7decf70f5783ecd638564d
​ 5900fabbe36e71933b3c739ec62ba89ac15f5453
​ 7ebdd80761813da708bad3325b098dac9fa6e4f5
​ ea781498268ced8dbb892d02aeaad23f4b87a510
​ 44e81be6f7242be77582671d6a11de7e33d19aca
​ 34b7b38ce1ccdd899ae14b15dd83241584cee32b
​ 74a55e9ea67d5baf90c1ad231e02f6183195e564
​ 4e5af777fe28f450a670e789b23fb3669dc6e6b6
​ d59f97297de38db7f85349c9486413e914ff35b5
​ b219db613284a3dd0e87edea67da744be59e7732
​ 9b9109ecfa38d9664084a513392ffc3f41349f02
​ 2b1da376212e63cb25a19900642c4bbca6e49c01
​ 18d9546193a354aec0c76d141dd66fbf99181bad
​ 63c20ee3c1e1b39921d2b3d86aade39de738ea9b
​ 5d2a08d7c1f665ea3affa7f9607601ffae387e8b
​ 70105591ea9f2b42534062278f31dbf9788575b3
34b7b38ce1ccdd899ae14b15dd83241584cee32b
​ 78e9c7e0510b0c28abf28dd46910ab14c56ab4df
​ 88745ecb3114fc0539ca05db388e1c77d3e76109
​ 885fe0dca39d0fe281aad78cbce2fb73f27f3aea
​ 50bdc0195ed3c6f9909e62d4926f26d312cc39fa
## **七、总结**
该病毒应用通过版本更新，进行恶意版本下发，在完成“刷榜僵尸”和“下载者”病毒后又利用版本更新替换成线上安全版本，如此在各大应用市场上期存活。阿里移动安全同学建议，用户下载此类App请认准大厂商品牌应用;谨慎点击软件内的推送广告；来源不明的应用不要随意点击；请定期使用阿里钱盾等手机安全软件查杀病毒。