http://wwr, victim, com/products.asp?id=12+union+select+NULL, system_user$2B*
+ ↑+ *$2Bdb_name () , NULL, NULL
提交该查询，产生的结果类似于图4-5所示的截图。
不难发现，我们已经将多条信息连接到一起，并返回到了一个单列中。还可以使用该技术
连接不同的列，如下列查询所示：
SELECT columnl FROM table 1 UNION SELECT columnA +
+ columnB FROM
tableA
↓ ta
Guteotn
HeL ep
VICTIM.COM
T
12 Bok
app-d:soer[+-tbo
图4-5使用同一列包含多个数据
123
---
## Page 138
SQL注入攻击与防御（第2版）
请注意，这里的columnl、columnA和columnB必须是字符串才能执行。如果不是，可以
借助另一种“武器”—尝试将那些不属于字符申类型的列强制转换为字符串。表4-5列出了
不同数据库中将任意数据转换为字符串的语法。
表4-5强制类型转换运算符
数据库服务器
查询
Microsoft SQL Server
SELECT CAST(123′ AS varchar)
MySQL
SELECT CASTC123 AS char)
Oracle
SELECT CAST(1 AS varchar) FROM dual
PostgreSQL
SELECT CAST(123 AS text)
请注意这取决于你所提取数据的结构，并非总是需要进行类型转换。例如，PostgreSQL允
许非字符串变量使用连接字符串（），只要有一个变量的值是字符串即可。
到目前为止，我们已经介绍了儿个使用UNIONSELECT查询提取某条信息（例如数据库名
称）的示例。只有使用基于UNION的SQL注入一次提取整张表时，才能体会到其真正的威力。
如果编写Web应用的目的是正确显示UNIONSELECT面不只是原始查询返回的结果，那么为
张名为customers 的表，表中包含userid、first_name 和 second_name列（本章后面在介绍数据库
模式的枚举时，读者将看到如何检索这些信息）。就目前掌握的内容而言，我们可以使用下列
URL来检索用户名：
http: //www.victim, com/products .asp7id=12+UNION+SELECT+userid, first_name,
second_name, NULL+FROM+customers
提交该URL，我们将得到图4-6所示的响应。
Ja
dderr
VICTIM.COM
Descripios
Price
12
[Book
SQL Ihjertion Anacks
5
Charles
Semsth
Lydia
Cayto
Bmad
Joner
[Mike
McMilat
图4-6使用UNIONSELECT查询在单个请求中提取多行数据
一个URL竞然得到了所有用户的列表！虽然这个结果很了不起，但更多情况下我们必须
面对只会显示结果中第一行数据的应用程序（虽然它易受到基于UNION的SQL注入攻击）。换
句话说，虽然成功注入UNION查询并在后台数据库成功执行后，数据库会忠实返回所有行，
但之后的Web应用（本例中为products.asp文件）会对结果进行解析并只显示第一行数据。对于
124
---
## Page 139
第4章利用SQL注入
这种情况，如何利用漏洞呢？如果正在尝试提取一行信息（比如当前用户的名称)，就需要移除
原始查询的结果，我们之前使用过下列URL来执行查询以检索数据库用户的名称：
http:/ /svw, vict.im,com/products. asp?id=12+union+select+NULL, system_user,
NULL, NULL
该URL将使远程数据库服务器执行下列查询：
SELECT id, type, description,price FROM products KHERE id = 12 UNION
SELECT NULL, system_user, NULL, NULL
前添加一个使WHERE子句永远为假的条件。例如，可以注入下列内容：
http:/ /ww, vict.im. com/product.s , asp?id=12+and+1=0+union+select+NULL, system_user,
NULL, NULL
现在最终传递给数据库的查询将变为：
SELECT id, type, name,price FROM e-shops.-products WHERE id = 12 AND 1=0
UNION SELECT NULL, system_user, NULL, NULL
1永远不等于0，因面第一个WHERE条件为永假，不会返回id为12的商品的数据。应
用返回的唯—一行将包含 system_user 的值。
通过一个附加的技巧，我们可以使用相同的技术来一次一行地提取整张表（比如customers)
的值。使用下列URL检索第一行数据，它借助“1-0”这个不等式来移除原始查询产生的行：
http:/ /www, victim. com/products.asp7id=12+and+1=0+union+select+userid,
first_name, second_name, NULL+from+customers
该URL将返回一行数据，其中包含第一个顾客的姓名（Charles Smith)，其userid值为1。要
想得到后面的顾客，只需再添加一个条件，将已经检索到名字的顾客从结果中移除：
http:/ /www ,victim.com/products-asp?id=12+and+1=0+union+select+userid,
first_name, second_name, NULL+from+customers+WHERE+userid+>+1
该查询将使用and1=0子句移除原始查询产生的行（其中包含商品的详细信息），并返回结
果中的第一行，其中包含userid值大于1的顾客。该查询产生的响应如图4-7所示。
victin cn very cte aplkcalionMiceot stenet Eaploiel
Mip:.7/www
VICTIM.COM
ID
Tpe
Descripion
Pice
[Carytos
ere
图4-7使用UNION SELECT 循环遍历表中的行
125
---
## Page 140
SQL注入攻击与防御（第2版）
可以通过逐渐增大userid参数的值来循环地逾历整张表，提取出victim.com的所有顾客的
完整列表。
4.5使用条件语句
使用UNION注入任意查询是一种快速有效的提取数据的方法。但该方法不适用于所有情
况，Web应用（即使它们易受到攻击）并不愿意轻易泄露数据。幸运的是，其他几种技术也能实
现该目的（虽然有时不会那么快速有效）。即便最成功、最壮观的SQL注入攻击“头奖”（通常
包括转储整个数据库或者获取与数据库服务器的交互式访问），也通常是从提取少量信息（远少
于UNION语句可以获取的内容）开始的。有些情况下，这些少量的数据只是由位（bit）信息构成
的，因为产生这些结果的查询只有两种答案：是或否。即便是只允许提取最少量数据的查询，
它们的功能也极其强大，并且是最致命的可利用因素之一。通常可使用下列格式表示这些查询：
IF condition THEN do_something ELSE do_something_else
DavidLitchfield和ChrisAnley曾广泛研究、发展过这一概念，并写过多篇关于此主题的白
皮书，其主要思想是强迫服务器执行不同的行为并根据指定的条件返回不同的结果。比如，可
以使用数据的特定字节中特定位的值（第5章我们会详细介绍这一内容）作为条件，但攻击初期
一般是对付数据库配置。我们先者一下相同的基本条件语句在表4-6中列出的不同数据库服务
器技术间语法上的转换过程。
表4-6条件语句
数据库服务器
查询
Microsof SQL Server
IF (aa) SELECT 1 ELSE SELECT 2
MySQL
SELECT IF(α, 1., 2)
SELECT CASE WHEN 'a's THEN 1 ELSE 2
Oracle
END FROM DUAL
SELECT decode(substr(user,1,1),'A',1,2) FROM DUAL
PostgreSQL
SELECT CASE WHEN (1=1) THEN 'a' else °b END
4.5.1方法1：基于时间
使用条件语句利用SQL注入时，第一种可行的方法是基于Web应用响应时间上的差异，
该时间取决于某些信息的值。例如，对于SQLServer而言，您最先想了解的信息是执行查询的
用户是否为系统管理员账户（sa)。很明显，这一点很重要，因为权限不同，在远程数据库上能
执行的操作也会有所不同。因此，可以注入下列查询：
-- ,S=0:0. XVT30 0LIVR(,es, = xosnwoss) 3I
该查询将转换为下列URL：
http://www,victim.com/products . asp?id=12;if+ (system_user=′sa*) +WAITFOR
-.S100.+AV130
126
---
## Page 141
第4章利用SQL注入
上述请求执行了哪些操作呢？system_user只是一个Transact-SQL(T-SQL）函数，它返回当
前登录的用户名（例如 sa)。该查询根据 system_user的值来决定是否执行WAITFOR（等待5秒）。
通过测试应用返回HTML页面所花费的时间，可以确定是否为sa用户。查询尾部的两个连字
符用于注释掉所有可能出现在原始查询中并会干扰注入代码的无用SQL代码。
查询使用的值(5代表5秒）是任意的。可以使用1秒（WAITFORDEL4Y0:0:/)到24小时
（WAITFORDELAY23:59:59是该命令能接受的最长延迟）之间的任何一个值。这里之所以使用5
秒，是因为它能在速度和性能间取得合理平衡。较小的值能为我们提供较快的响应，但可能会
因为受未预料的网络延迟或远程服务器负载高峰的影响面不太精确，
当然，只需要通过替换圆括号中的条件您就可以使用该方法来获取数据库中的任何其他信
息了，例如，想知道远程数据库的版本是否为2005？请看下列查询：
我们首先选择@@version内置变量，在SQLServer2005中，它的值类似于下列内容：
Microsoft SQL Server 2005 - 9.00.3042.00 (Intel x86)
Feb 9 2007 22:47:07
Copyright (c) 1988 - 2005 Microsoft Corporation
Standard Edition on Windovs NT 5.2 (Bui1d 3790: Service Pack 2)
不难发现，该变量包含了数据库版本。要想了解远程数据库是否为SQLServer2005，只需
检查年份的最后一位数字即可，它刚好是@@version变量所存放字符串的第25个字符。很明
显，其他版本中该相同位置的字符不等于“5”（例如，对于SQLServer2000而言，该字符为
“0”）。有了字符串之后，我们把它传递给substringO函数。该函数用于提取字符串中的部分
字符，它接收三个参数：原始字符串、提取字符的起始位置、提取多少个字符。本例中，我们
只提取第25个字符并将它与5进行比较。如果两个值相等，就等待5秒。如果应用程序花费
了5秒才返回结果，那么可以肯定远程数据库确实为SQLServer2005。
有时仅知道数据库产品的主版本（比如2000、2005、2008或2012）是不够的，还需要知道
精确的数据库产品版本。当需要知道数据库服务器是否遗漏了某个特定的更新，因面是否有漏
洞以便执行特定的攻击时，精确的版本信息非常有用。例如，我们可能想知道SQLServer 2005
漏洞可以提升攻击者的权限。为了搞清楚该补丁的信息，我们需要知道SQLServer的精确版
本。如果 SQLServer已经为该特定的漏洞打上了补丁，SQLServer数据库的版本应该是下列
版本之一：
●SQL Server 2005 GDR 9.00.3077
●SQL Server 2005 QFE 9.00.3310
●SQL Server 2000 GDR 8.00.2055
●SQL Server 2000 QFE 8.00.2282
只需少量的请求就可以跟踪到精确的版本信息，或者发现在前面例子中安装的SQLServer
数据库上，DBA（数据库管理员）忘记了打上一些补丁。这样就可以知道可以发起哪些攻击。
表4-7提供了Microsoft SQLServer部分版本的列表，包含了相应的版本编号和一些可能影
响到该版本数据库的漏洞信息。
127
---
## Page 142
SQL注入攻击与防御（第2版）
表4-7MSSQLServer版本号
版
本
产
品
10.50.2500.0
SQL Server 2008 R2 SP1
10.50.1790
SQL Server 2008 R2 QFE(MS11-049 patched)
10.50.1617
SQL Server 2008 R2 GDR(MS11-049 patched)
10.50.1600.1
SQL Server 2008 R2 RTM
10.00.5500
SQL Server 2008 SP3
10.00.4311
SQL Server 2008 SP2 QFE(MS11-049 patched)
10.00.4064
SQL Server 2008 SP2 GDR(MS11-049 patched)
10.00.4000
SQL Server 2008 SP2
10.00.2841