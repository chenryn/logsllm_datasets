### Function Identification and Fault Injection

#### Function Definition
Functions can be defined either within the tested program or in an external library. In most cases, a function defined within the tested program may fail if it calls specific library functions that can also fail. If both the function and its called library functions are considered for fault injection, repeated faults might occur. To avoid this repetition, our analysis selects only those function calls where the called functions are library functions.

#### Statistical Analysis
In some scenarios, a function can fail and trigger error handling, but the return values of several calls to this function are not checked by `if` statements. To address such cases, our analysis employs a statistical method to identify functions that can fail, which we refer to as "error functions." This method first classifies the selected function calls by the called function and collects all function calls to each called function in the tested program code. Then, for the function calls to a given function, it calculates the percentage of calls whose return values are checked by `if` statements. If this percentage exceeds a threshold \( R \), the function is identified as an error function. Finally, all function calls to this function are marked as error sites. For accuracy and generality, if there are multiple tested programs, the source code of all programs is analyzed together.

The value of the threshold \( R \) significantly affects the identified error functions and error sites. A higher \( R \) results in fewer error functions and error sites being identified, potentially dropping more unrealistic ones but also missing more realistic ones. The impact of different \( R \) values is studied in Section 5.2.

### FIFUZZ Framework

Based on our context-sensitive SFI-based fuzzing approach, we have designed a new fuzzing framework named FIFUZZ, aimed at effectively testing error handling code. FIFUZZ is implemented using Clang [16] and performs code analysis and instrumentation on the LLVM bytecode of the tested program. It is compatible with traditional fuzzing processes and mutates error sequences and program inputs together. The architecture of FIFUZZ consists of six main components:

- **Error-site Extractor**: Performs automated static analysis of the source code to identify possible error sites.
- **Program Generator**: Instruments the program code, including identified error sites, function calls, function entries and exits, code branches, etc., to generate an executable tested program.
- **Runtime Monitor**: Runs the tested program with generated inputs, collects runtime information, and performs fault injection according to generated error sequences.
- **Error-sequence Generator**: Creates and mutates error sequences based on collected runtime information.
- **Input Generator**: Mutates and generates new inputs using traditional fuzzing techniques.
- **Bug Checkers**: Analyze collected runtime information to detect bugs and generate bug reports.

FIFUZZ operates in two phases, which are described below.

### Runtime Fuzzing

In this phase, FIFUZZ uses the identified error sites and instrumented code to perform context-sensitive SFI-based fuzzing, combined with traditional fuzzing of program inputs (referencing AFL [1]). The runtime fuzzer executes the tested program using the generated inputs and injects faults using the error sequences. It also collects runtime information about executed error points and code branches. Based on this information, the error-sequence generator creates and mutates error sequences, while the input generator performs coverage-guided mutation to generate new inputs. These generated error sequences and inputs are then used in the runtime fuzzer to re-execute the tested program. Bug checkers, such as ASan [4] and MSan [41], analyze the collected runtime information to detect bugs.

### Code Instrumentation

Code instrumentation serves two purposes: collecting runtime information about error sites and injecting faults. The program generator instruments code before and after each function call, at the entry and exit of each function definition, and before each error site. During execution, the runtime calling context and location of each error site are collected to create an error point. If this error point is found in the current error sequence and its value is 1, a fault is injected. Otherwise, the function call is executed normally. Figure 8 shows an example of instrumented C code, noting that instrumentation is actually performed on the LLVM bytecode.

### Experimental Setup

To validate the effectiveness of FIFUZZ, we evaluated it on nine extensively-tested and widely-used C applications, including text editors, media processing tools, and antivirus engines. The applications and their details are listed in Table 3. The experiments were conducted on a desktop with eight Intel processors and 16GB of memory, using Clang 6.0 and Ubuntu 18.04.

### Error-Site Extraction

Before testing, FIFUZZ performs a static analysis of the source code to identify error functions and error sites. We set \( R = 0.6 \) and manually selected realistic error functions and sites from the identified ones. The results are shown in Table 4, indicating that FIFUZZ can significantly reduce the manual work of identifying realistic error sites.

### Impact of Threshold \( R \)

The value of \( R \) in the static analysis heavily influences the identified error functions. As \( R \) increases, the number of identified and realistic error functions decreases, potentially dropping more unrealistic ones but also missing more realistic ones. The variation caused by different \( R \) values is discussed in Section 5.2.

### Runtime Testing

Using the 1,822 realistic error sites identified with \( R = 0.6 \), we tested the nine target applications. Each application was fuzzed with and without ASan, for three runs, with a time limit of 24 hours per run. The results, shown in Table 5, indicate that FIFUZZ generates many useful error sequences for fault injection, increasing code coverage more effectively than traditional fuzzing inputs.

### Conclusion

FIFUZZ is an effective framework for testing error handling code, capable of identifying and utilizing realistic error sites to increase code coverage and detect bugs. The framework's design and implementation demonstrate its potential to enhance the robustness of software through thorough and context-sensitive fuzzing.