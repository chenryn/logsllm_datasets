# 信息流控制与浏览器安全

## 1. 信息流监控
Vogt等人[35]展示了如何使用运行时监控来跟踪信息流。他们修改了Firefox浏览器的源代码，在JavaScript引擎中添加了一个监控器。然而，他们的实验表明，有时JavaScript代码需要向原域名之外泄露一些信息：他们识别出30个如google-analytics.com这样的域名，这些域名应该被允许泄露某些信息。他们的解决方案是将这些域名列入白名单，从而允许向这些域名泄露任何信息，这为信息清洗提供了可能。而我们的方法可以通过定义详细的降级策略，精确地规定哪些信息可以泄露到哪个安全级别，从而避免信息清洗。

Mozilla正在进行的项目FlowSafe[19]旨在通过动态信息流引用监控[6, 7]在Firefox中实现运行时信息流跟踪。

Yip等人[37]提出了一种名为BFlow的安全系统，该系统能够追踪浏览器内框架之间的信息流动。为了保护框架中的机密数据，框架不能同时持有标记为机密和公开的数据。BFlow不仅关注客户端，还关注服务器端，以防止数据在客户端和服务器之间来回传递时遭受攻击。通过在文档内部应用我们的方法，我们能够获得比BFlow更细粒度的信息流跟踪。

## 2. 网页混搭中的访问控制
网页混搭中的访问控制一直是近期研究的活跃领域。与信息流策略相比，访问控制策略的一个已知限制是，一旦数据被允许访问，应用程序就可以任意使用这些数据，这可能会导致不安全的行为。下面我们将讨论这一领域的最新进展。

Wang等人[36]将网页混搭与操作系统进行了类比，并提出了针对浏览器的保护和通信抽象方案MashupOS。MashupOS扩展了同源策略的信任模型，以更好地匹配网页混搭中的信任关系。他们建议使用两个HTML标签ServiceInstance和Friv来实现这些抽象。ServiceInstance用于将服务加载到内存中的隔离区域，然后将其连接到负责显示内容的Friv。这种组合类似于iframe，但具有更高的灵活性和安全性。内容之间的隔离由同源策略控制。

Crites等人提出的OMash[13]简化了MashupOS的抽象。他们建议每个文档都应声明一个公共接口，通过该接口处理与其他文档的所有通信。OMash不依赖于同源策略进行隔离，而是将每个文档隔离于其公共接口之外。这种方法无法处理同一文档内的跨源内容。

Jackson等人提出了Subspace[20]，这是一种基于现有浏览器功能的安全通信框架，适用于网页混搭组件。每个组件都在子域的iframe中加载，并通过放宽文档的域属性来实现通信对象的共享。

De Keukelaere等人提出的Smash[15]是另一种用于网页混搭的高级通信框架。各个组件相互隔离，但可以通过框架中的高级接口进行通信。通过将每个组件加载到iframe中实现隔离。片段标识符通道[12]用作通信原语，实际通信则在框架的较低层级进行管理。由于此框架依赖于现有的浏览器功能，因此可以轻松适应。但是，一旦某条信息被传递给另一个组件，就失去了对其使用的控制权。

## 3. 结论
我们提出了一种基于格的方法来解决网页混搭的安全问题。通过将来源域表示为格中的不可比较安全级别，我们得到了一个自然的模型，在这个模型中，除非显式指定了降级策略，否则不允许不同来源间的信息流通。我们已经形式化了结合“什么”可以发布和“谁”可以发布的安全保证。我们讨论了安全策略的实际问题及其在浏览器中的实施。

与大多数关于Web浏览器访问控制策略的研究相比，我们能够以更细粒度的方式跟踪信息流。与其他关于浏览器信息流跟踪的研究相比，我们能够提供一种丰富的分布式安全策略模型。

未来的工作包括对降级的“什么”维度（通过逃生口表达）和“谁”维度（通过分布式标签模型[24]表达）的完全整合进行形式化。另一项工作是通过实现来进行实际评估。还有一个有趣的方向是专注于完整性方面的问题，如第5.1节所述。

## 4. 参考文献
此处省略具体参考文献列表，仅列出引用编号。

[1-37] 引用了大量相关文献，涉及Facebook、Google Maps API、各种学术论文及技术报告等。

---

以上是对原文本的优化，使其更加清晰、连贯和专业。希望对你有所帮助！