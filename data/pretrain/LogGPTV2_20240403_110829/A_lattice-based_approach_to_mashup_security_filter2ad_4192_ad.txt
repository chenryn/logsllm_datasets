A,B,C;A,B,C⊥;⊥⊥;A,B,CA,B,C;⊥least conﬁdential; most trustedmost conﬁdential; least trustedhatches express the what and the ownership of the origins
of the escape-hatch policies expresses the who.
Monitoring information ﬂow in browsers.
Vogt et al.[35] show how a runtime monitor can be used
for tracking information ﬂow. They modify the source code
of the Firefox browser, adding a monitor to the JavaScript
engine. However, their experiments show that it is often
desirable for JavaScript code to leak some information out-
side the domain of origin: they identify 30 domains such as
google-analytics.com that should be allowed some leaks.
Their solution is to white-list these domains, and therefore
allow any leaks to these domains, opening up possibilities
for laundering. With our approach, these domains can be
integrated into a policy with declassiﬁcation speciﬁcations of
exactly what can be leaked to which security level, avoiding
information laundering.
Mozilla’s ongoing project FlowSafe [19] aims at empow-
ering Firefox with runtime information-ﬂow tracking, with
dynamic information-ﬂow reference monitoring [6, 7] at its
core.
Yip et al.
[37] present a security system, BFlow, which
tracks information ﬂow within the browser between frames.
In order to protect conﬁdential data in a frame, the frame
cannot simultaneously hold data marked as conﬁdential and
data marked as public. BFlow not only focuses on the client-
side but also on the server-side in order to prevent attacks
that move data back and forth between client and server. By
applying our method within documents, we obtain a ﬁner-
grained information-ﬂow tracking than that of BFlow.
Access control in mashups.
Access control in mashups has been an active area of re-
cent research. Access-control policies have the known limi-
tation compared to information-ﬂow policies that once the
data is allowed access, it can be used by an application arbi-
trarily, and potentially, in an insecure way. We discuss some
recent highlights in this area below.
Wang et al.
[36] draws analogies between mashups and
operating systems and deﬁnes protection and communica-
tion abstractions for the browser in their proposal Mashu-
pOS. MashupOS expands the trust model of the SOP to bet-
ter match the trust relationships found in a mashup. Two
HTML tags are suggested to implement the abstractions,
ServiceInstance and Friv . The tag ServiceInstance is used
to load a service into an isolated region of memory, which
can then be connected to a Friv which is responsible for
displaying the content. The combination is similar to an
iframe, but with more ﬂexibility and protection. The isola-
tion between content is controlled by the SOP.
OMash, by Crites et al., [13] simpliﬁes the abstractions
of MashupOS. They propose that every document should
declare a public interface through which all communication
with other documents is handled. OMash does not rely on
the SOP for isolation.
Instead, each document is isolated
apart from the public interface. This does not handle cross-
origin content within the same document.
Jackson et al. proposed Subspace [20], a framework for
secure communication between mashup components based
on existing browser features. Each component is loaded in
an iframe originating from a subdomain of the integrator and
communication is achieved by relaxing the domain attribute
of the documents so that a communication object can be
shared.
Smash [15], proposed by De Keukelaere et al., is another
high-level communication framework for mashups. The com-
ponents are isolated from each other, but can communicate
using a high-level interface in the framework.
Isolation is
achieved by loading each component in an iframe. The frag-
ment identiﬁer channel [12] is used as a communication prim-
itive. The communication primitive can be exchanged for a
more suitable solution, as the actual communication is man-
aged at a lower level in the framework. As this framework
relies on existing browser features, it can be easily adapted.
However, once a piece of information has been communi-
cated to another component, control over its use is lost.
7. CONCLUSION
We have proposed a lattice-based approach to the mashup
security problem. By representing origin domains as incom-
parable security levels in a lattice, we have a natural model,
where no information between the origins is allowed, unless
explicitly prescribed by a declassiﬁcation policy. We have
formalized the security guarantees that combine the aspects
of what can be released and by who. We have discussed
practical issues with security policies and integrating their
enforcement into browsers.
Compared to much work on access-control policies in web
browsers, we are able to track the ﬂow of information in a
more ﬁne-grained way. Compared to other work on tracking
information ﬂow in the browser, we are able to oﬀer a rich
decentralized security-policy model.
Future work includes a formalization of a fully-ﬂedged
combination of the what dimension of declassiﬁcation (as
expressed by escape hatches) and the who dimension (as ex-
pressed by the decentralized label model [24]). Another line
of work is a practical evaluation by implementation. Yet
another intriguing direction focuses on integrity aspects, as
sketched in Section 5.1.
8. REFERENCES
[1] Facebook. http://www.facebook.com.
[2] Google Maps API. http://code.google.com/apis/maps.
[3] A. Askarov and A. Myers. A semantic framework for
declassiﬁcation and endorsement. In Proc. European
Symp. on Programming, LNCS. Springer-Verlag, 2010.
To appear.
[4] A. Askarov and A. Sabelfeld. Localized delimited
release: Combining the what and where dimensions of
information release. In Proc. ACM Workshop on
Programming Languages and Analysis for Security
(PLAS), pages 53–60, June 2007.
[5] A. Askarov and A. Sabelfeld. Tight enforcement of
information-release policies for dynamic languages. In
Proc. IEEE Computer Security Foundations
Symposium, July 2009.
[6] T. H. Austin and C. Flanagan. Eﬃcient
purely-dynamic information ﬂow analysis. In Proc.
ACM Workshop on Programming Languages and
Analysis for Security (PLAS), June 2009.
[7] T. H. Austin and C. Flanagan. Permissive dynamic
information ﬂow analysis. Technical Report
UCSC-SOE-09-34, University of California, Santa
Cruz, 2009.
[8] A. Banerjee, D. Naumann, and S. Rosenberg.
Expressive declassiﬁcation policies and modular static
enforcement. In Proc. IEEE Symp. on Security and
Privacy, pages 339–353, May 2008.
[9] A. Barth, C. Jackson, and J. C. Mitchell. Securing
frame communication in browsers. In Proc. USENIX
Security Symposium, 2008.
[10] Adam Barth, Collin Jackson, and William Li. Attacks
on javascript mashup communication. In Proc. of Web
2.0 Security and Privacy 2009 (W2SP 2009), May
2009.
information ﬂow control. In Proc. ACM Symp. on
Operating System Principles, pages 129–142, October
1997.
[25] A. C. Myers, A. Sabelfeld, and S. Zdancewic.
Enforcing robust declassiﬁcation and qualiﬁed
robustness. J. Computer Security, 14(2):157–196, May
2006.
[26] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and
N. Nystrom. Jif: Java information ﬂow. Software
release. Located at http://www.cs.cornell.edu/jif,
July 2001–2009.
[11] G. Barthe, S. Cavadini, and T. Rezk. Tractable
[27] Netscape. Using data tainting for security.
enforcement of declassiﬁcation policies. In Proc. IEEE
Computer Security Foundations Symposium, June
2008.
[12] J. Burke. Cross domain frame communication with
fragment identiﬁers.
http://tagneto.blogspot.com/2006/06/
cross-domain-frame-communication-with.html, June
2006.
[13] Steven Crites, Francis Hsu, and Hao Chen. Omash:
enabling secure web mashups via object abstractions.
In CCS ’08: Proceedings of the 15th ACM conference
on Computer and communications security, pages
99–108, New York, NY, USA, 2008. ACM.
[14] D. Crockford. Making javascript safe for advertising.
adsafe.org, 2009.
[15] Frederik De Keukelaere, Sumeer Bhola, Michael
Steiner, Suresh Chari, and Sachiko Yoshihama. Smash:
secure component model for cross-domain mashups on
unmodiﬁed browsers. In WWW ’08: Proceeding of the
17th international conference on World Wide Web,
pages 535–544, New York, NY, USA, 2008. ACM.
[16] D. E. Denning. A lattice model of secure information
ﬂow. Comm. of the ACM, 19(5):236–243, May 1976.
[17] D. E. Denning and P. J. Denning. Certiﬁcation of
programs for secure information ﬂow. Comm. of the
ACM, 20(7):504–513, July 1977.
[18] D. Dolev and A. Yao. On the security of public-key
protocols. IEEE Transactions on Information Theory,
2(29):198–208, August 1983.
[19] B. Eich. Flowsafe: Information ﬂow security for the
browser. https://wiki.mozilla.org/FlowSafe, October
2009.
[20] Collin Jackson and Helen J. Wang. Subspace: secure
cross-domain communication for web mashups. In
WWW ’07: Proceedings of the 16th international
conference on World Wide Web, pages 611–620, New
York, NY, USA, 2007. ACM.
[21] J. Landauer and T. Redmond. A lattice of
information. In Proc. IEEE Computer Security
Foundations Workshop, pages 65–70, June 1993.
[22] A. Lux and H. Mantel. Who can declassify? In
Workshop on Formal Aspects in Security and Trust
(FAST’08), volume 5491 of LNCS, pages 35–49.
Springer-Verlag, 2009.
[23] H. Mantel and A. Reinhard. Controlling the what and
where of declassiﬁcation in language-based security. In
Proc. European Symp. on Programming, volume 4421
of LNCS, pages 141–156. Springer-Verlag, March 2007.
[24] A. C. Myers and B. Liskov. A decentralized model for
http://wp.netscape.com/eng/mozilla/3.0/handbook/
javascript/advtopic.htm, 2006.
[28] A. Russo and A. Sabelfeld. Securing timeout
instructions in web applications. In Proc. IEEE
Computer Security Foundations Symposium, July
2009.
[29] A. Russo, A. Sabelfeld, and A. Chudnov. Tracking
information ﬂow in dynamic tree structures. In Proc.
European Symp. on Research in Computer Security,
LNCS. Springer-Verlag, September 2009.
[30] A. Sabelfeld and A. C. Myers. Language-based
information-ﬂow security. IEEE J. Selected Areas in
Communications, 21(1):5–19, January 2003.
[31] A. Sabelfeld and A. C. Myers. A model for delimited
information release. In Proc. International Symp. on
Software Security (ISSS’03), volume 3233 of LNCS,
pages 174–191. Springer-Verlag, October 2004.
[32] A. Sabelfeld and A. Russo. From dynamic to static
and back: Riding the roller coaster of information-ﬂow
control research. In Proc. Andrei Ershov International
Conference on Perspectives of System Informatics,
LNCS. Springer-Verlag, June 2009.
[33] A. Sabelfeld and D. Sands. Declassiﬁcation:
Dimensions and principles. J. Computer Security,
17(5):517–548, January 2009.
[34] V. Simonet. The Flow Caml system. Software release.
Located at http:
//cristal.inria.fr/~simonet/soft/flowcaml/, July
2003.
[35] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna. Cross site scripting
prevention with dynamic data tainting and static
analysis. In Proc. Network and Distributed System
Security Symposium, February 2007.
[36] Helen J. Wang, Xiaofeng Fan, Jon Howell, and Collin
Jackson. Protection and communication abstractions
for web browsers in mashupos. SIGOPS Oper. Syst.
Rev., 41(6):1–16, 2007.
[37] Alexander Yip, Neha Narula, Maxwell Krohn, and
Robert Morris. Privacy-preserving browser-side
scripting with bﬂow. In EuroSys ’09: Proceedings of
the 4th ACM European conference on Computer
systems, pages 233–246, New York, NY, USA, 2009.
ACM.