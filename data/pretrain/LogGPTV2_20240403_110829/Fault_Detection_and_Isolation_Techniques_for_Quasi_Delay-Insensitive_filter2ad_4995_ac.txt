ceive and send data may generate and consume tokens
(data) in the presence of a fault. Figure 4 is a template
for a computation block based on the half-buffer design
previously discussed [6]. Circuits based on this template
Figure 4. Template of a precharge function
unit.
n, Lt
0, ..., Lf
n), and outputs, (Rf
0 are the pull-down networks that determine Rf
of the inputs and the output are check in (a) and the re-
sult of f0(L0, L1, ..., Ln) is computed and sent in (b). f f
0
and f t
0 and
Rt
0, respectively. During fault-free operation, the inputs,
(Lf
0), start low and
0 , Lt
the enable signal is high. When the inputs arrive, only one
of Rf
0 will go low and the corresponding output will
go high (assuming that Re
0 has arrived). After an output goes
high and all the inputs have arrived, the enable signal will
go low and the environment will set the inputs low. If Re
0
has gone low than Rf
0 will follow and the enable
goes high, returning the circuit to the initial state.
0 and Rt
0 or Rt
0 , Rt
If a fault results in Rf
When a fault occurs in this process, the resulting circuit
may deadlock, consume a token, or generate a token. Let’s
0↑ ﬁred. If a fault
assume the circuit is in the state after Rf
0↓ to ﬁre after enable goes low and before the en-
causes Rf
vironment has received the data (0), then this token will get
consumed and the circuit will return to the initial state. The
following token that enters this process may be evaluated
and take the place of the initial token.
0↑ ﬁring prematurely, such
as a transient or state-holding fault at node 5 or 6, then a to-
ken will be generated. In addition to generating a logical 1
or a logical 0, there is a third kind of token that can be gen-
0↑ to ﬁre just as Rt
0↑
erated. Imagine that a fault causes Rf
begins to ﬁre. Such a token is considered illegal, however,
many circuits will receive and process this type of token.
The template circuit of Figure 4 makes no distinction be-
tween valid and invalid token and will receive and process
both.
0↑ and Rt
4. Design for Detection
We have shown that faults in asynchronous circuits can
result in deadlock, synchronization failure, token genera-
tion, and token consumption. Of these failure types, dead-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
lock is the most desirable because it will prevent an ac-
tion from occurring rather than perform an incorrect action.
Deadlock is also the easiest failure to detect since we only
need to check if a circuit is making forward progress after
some minimum time t. Our approach to improving detec-
tion of the remaining failure types is twofold: One, prevent
all failures from performing incorrect actions. Two, make
all failures result in deadlock. Also, if a fault does not lead
to an observable failure, then for all practical purposes we
can continue to operate as if there was in fact no fault.
4.1. Synchronization Channels
Unlike data, synchronization signals are usually sent in-
dividually from one process to another. In order to make
synchronization failures more detectable, redundancy must
be added to each synchronization channel. We also add an
extra constraint that redundant signals should be produced
in an inverted fashion with respect to the original signal.
This constraint ensures that the resulting circuit is tolerant
of a fault that drives both signals high or low simultane-
ously. A single crosstalk fault may have this affect since
the wires carrying these signals are parallel to one another
and may be long. Although adding redundant signals will
result in at least twice the area, redundant synchronization
channels are feasible because synchronization channels are
a small fraction of the overall design when compared to data
channels.
In order to prevent synchronization failures, a synchro-
nization signal and it’s redundant counterpart must travel to-
gether throughout the circuit. To achieve this, each process
receiving a synchronization signal must wait for both sig-
nals to arrive before performing any action. Figure 5 shows
Figure 5. Redundant synchronization chan-
nels: (a) both signals arrive, (b) top signal
can proceed, (c) bottom signal can proceed.
The HSE for a redundant buffer is as follows (note that
there are two R and L channels, one for the top and one for
the bottom):
HSE for the top portion is:
*[[Re
[¬Re
T ∧ LT ∧ C ]; C e↓; RT↑; Le
T↓;
T ∧ ¬LT ∧ ¬C ]; C e↑; RT↓; Le
T↑]
HSE for the bottom portion is:
*[[Re
[¬Re
B ∧ LB ∧ C e]; C↑; [¬C e]; RB↑; Le
B ∧ ¬LB ]; C↓, (RB↓; Le
B↑)]
B↓;
This buffer takes 39 transistors to implement, with the
added constraint of inverting the bottom signals. This is
more than twice that of the PCHB of Figure 3, which only
requires 18 transistors. This buffer is also somewhat slower
than the PCHB with a forward latency of 4 transitions and
a backward latency of 5 transitions.
Table 5 shows some failures that can occur when the re-
dundant buffer is waiting for data or receiving data. As ex-
pected, this buffer may still cause synchronization failures
when faults cause both RT↑ and RB↑ or both LT↑ and LB↑
to ﬁre simultaneously. However, an interesting property of
State
waiting for [LT ∧ LB]
receiving (RT ↑, RB↓)
Premature Firing
RT ↑ or RB↑
C↑ or Ce↓
RT ↑ and RB↑
RB↓
B↓
Le
Resulting Failure
none or deadlock
none or deadlock
synch failure
none, then deadlock
deadlock
Table 5. Failures resulting from premature ﬁr-
ings of the redundant synchronization buffer.
this buffer is that it may tolerate some premature ﬁrings,
rather than deadlock. For instance, suppose C↑ ﬁres pre-
maturely when the buffer is waiting for LT and LB. When
LT arrives, C e↓ will ﬁre allowing both RT↑ and RB↑ to
ﬁre. When RB↓ ﬁres prematurely during the receive state
shown in the table, a fault induced synchronization signal
may take the place of one of the pair. In this case, the ac-
tions that result are still correct since at least one synchro-
nization signal is correct. This system will eventually dead-
lock because the signal that was replaced is trapped in the
buffer.
4.2. Data Channels
how redundant synchronization signals travel between pro-
cesses with the numbered wires indicating the order in
which transitions occur. In addition to a left and right set
of handshaking signals, a center set of handshaking signals
(denoted C and C e) is introduced to ensure that the pro-
cess waits for both synchronization signals.
The two types of failures, other than deadlock, that have
been shown to occur in data channels are token generation
and token consumption. One could attempt to use the same
solution used for synchronization channels, however, due
to the vast number of data channels, it would be impracti-
cal to make each channel redundant. To detect token gener-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
ation, we will exploit the following properties of data chan-
nels: (i) adjacent bits of a data word complete parallel com-
putations in roughly the same time; (ii) a fault might cause
an illegal transition on an output wire, but the correct chan-
nel will eventually go high if given enough time. This can
be detected because the net result will be an illegal state.
In the template of a precharge function block shown in
Figure 4, the true-rail and false-rail of each bit of data is
generated by separate pieces of logic. Legal states are 00,
01, and 10, so a 11 indicates a failure. If a fault causes the
wrong rail of R to go high, then the process receiving that
bit may lower Re causing the function block to reset. How-
ever, if Re is prevented from going low, then the correct
rail will eventually go high as well, assuming that the in-
puts to the function unit were not faulty. If this were always
the case, then we could detect these faults by checking lines
for invalid tokens.
Figure 6 shows a technique to ensure that the correct
rail in each bit of data will be given enough time to ﬁre.
In this diagram, there are n bits of data traveling through k
Figure 6. A pipeline of k full buffer processes
that read and acknowledge data in groups.
columns of full-buffer processes. Each process in a column
performs the same function on the data. The crucial prop-
erty of this design is that the enables of each column are per-
formed together, due to the insertion of C-elements. This re-
sults in each column reading and acknowledging data as a
group.
Suppose a fault occurs in process P 01 that causes it’s
true rail to go high. Process P 11 will lower it’s Le, but the
intervening C-element will prevent Re in P 01 from going
low as well. Re will only go low once the slowest bit of data
in column 0 has been received by column 1. Since the pro-
cesses in each column are the same, this would give the false
rail enough time to go high if it was supposed to. If the fault
caused an error, then the token will be invalid, if not, no er-
ror occurred.
Fortunately, this technique will result in deadlock when
token consumption occurs at the bit level. Consider the case
where each process of column 0 has a token and each pro-
cess column 1 has a token. In this case, the grouped enables
of each column is low and the grouped Re input to each col-
umn is high. Suppose the token in P 10 is consumed by a
transient fault, and the token in P 00 begins to move into
the P 10 process. The bit Le output of P 10 will go low,
however, the corresponding Re input of P 00 will remain
high due to the intervening C-element. Consequently, the
enable of P 10 will remain low indeﬁnitely and as a result
the enable of this entire column will be prevented from go-
ing high. The conﬁguration of Figure 6 introduces the possi-
bility of token deletion at the group level if a transient fault
occurs on the output of the intervening C-element. To rem-
edy this, the C-elements that group the enables are imple-
mented in a redundant fashion wherein each enable input
has a dedicated 3-input C-element. The C-element that gen-
erates the Re
i+1 of the
following column as inputs.
i of a column has Le
i−1, Le
i , and Le
An important feature of the modiﬁed circuit is that all the
C-elements that were introduced have non-isochronic input
and output branches. This means that any permanent fault
on a single wire on those inputs and outputs will result in
deadlock as well.
4.3. Isochronic Delay Faults
It was shown in Figure 2 that a failure may occur if there
is a greater delay on an isochronic branch than on the non-
isochronic branches. A routing solution to prevent these
failures for some subset of isochronic forks is shown in Fig-
ure 7. When there is some non-isochronic branch in a fork
that has an isochronic branch, the solution shown can be
used to prevent delay faults from causing an isochronic fork
to fail. Rather than forking, we can route a signal through
Figure 7. Routing solution to delay faults on
isochronic branches.
the polysilicon of the gate that had the isochronic branch as
an input, then to the gates with the non-isochronic branch
input. A similar technique is used in [13]. Such a solution is
practical since isochronic branches are kept local to a pro-
cess, i.e., they don’t exist on input or output channels. Now a
fault that caused a delay on an isochronic branch will cause
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
an equal delay on the non-isochronic branches. Assuming
that circuits follow the above routing scheme, delay faults
will result in slower, but correct circuits.
5. Datapath Design Issues
There are two main caveats with the proposed detection
techniques for data channels. One, a circuit is needed to de-
tect invalid tokens in a datapath. Two, not all processes will
produce an invalid token when they receive one. These is-
sues are addressed in this section.
5.1. Invalid Token Detector
Token generating failures will produce invalid tokens,
however, these invalid tokens need to be detected at some
point in the datapath and deadlock the system. Since invalid
tokens use an illegal encoding, both true and false rails are
high. This situation can be detected by the following pro-
duction rules:
¬reset
Lf ∧ Lt
(cid:1)→ Ck↑
(cid:1)→ Ck↓
where Lt and Lf are the two rails of a dual-rail code that (by
deﬁnition) has an illegal “11” state. The reset signal is used
to initialize the Ck check signal. As a ﬁnal point, we can
use this signal to deadlock any handshake in the pipeline.
For example, Ck (and a complement generated using an in-
verter) can be used to block any of the C-elements shown
in Figure 6 by modifying their input signal as follows. In-
stead of using input signal s, the C-element should use ns
where ns is generated by the production rules Ck∧s (cid:1)→ ns↑
and Ck ∧ ¬s (cid:1)→ ns↓ (referred to as the ”switch” gate [9]).
Now when Ck↓ occurs, the next stage will be blocked per-
manently, thereby deadlocking the system.
This checker uses a timing assumption, but it is one that
is very liberal. It assumes that the delay through the next
pipeline stage and the C-element shown is larger than the
time it takes for the Ck signal to transition. Satisfying this
assumption is a trivial task in practice. A more interesting