HTTP/1.1404NotFound
Inthenextsection,we’llexpandonroutingtoinclude
somemiddlewareimplementationsusingotherlibraries.This
willgiveyouincreasedflexibilitywithhandlingHTTP
requests.
BuildingMiddlewarewithNegroni
Thesimplemiddlewareweshowedearlierloggedthestartand
endtimesofthehandlingoftherequestandreturnedthe
response.Middlewaredoesn’thavetooperateonevery
incomingrequest,butmostofthetimethatwillbethecase.
Therearemanyreasonstousemiddleware,includinglogging
requests,authenticatingandauthorizingusers,andmapping
resources.
Forexample,youcouldwritemiddlewareforperforming
basicauthentication.Itcouldparseanauthorizationheaderfor
eachrequest,validatetheusernameandpasswordprovided,
andreturna401responseifthecredentialsareinvalid.You
couldalsochainmultiplemiddlewarefunctionstogetherin
suchawaythatafteroneisexecuted,thenextonedefinedis
run.
Fortheloggingmiddlewareyoucreatedearlierinthis
chapter,youwrappedonlyasinglefunction.Inpractice,thisis
notveryuseful,becauseyou’llwanttousemorethanone,and
todothis,youmusthavelogicthatcanexecutethemina
chain,oneafteranother.Writingthisfromscratchisnot
incrediblydifficult,butlet’snotre-createthewheel.Here,
you’lluseamaturepackagethatisalreadyabletodothis:
negroni.
Thenegronipackage,whichyoucanfindat
https://github.com/urfave/negroni/,isgreatbecauseitdoesn’t
tieyouintoalargerframework.Youcaneasilyboltitonto
otherframeworks,anditprovidesalotofflexibility.Italso
comeswithdefaultmiddlewarethatisusefulformany
applications.Beforeyouhopin,youneedtogogetnegroni:
$gogetgithub.com/urfave/negroni
Whileyoutechnicallycouldusenegroniforallapplication
logic,doingthisisfarfromidealbecauseit’spurpose-builtto
actasmiddlewareanddoesn’tincludearouter.Instead,it’s
besttousenegroniincombinationwithanotherpackage,suchas
gorilla/muxornet/http.Let’susegorilla/muxtobuildaprogramthat
willgetyouacquaintedwithnegroniandallowyoutovisualize
theorderofoperationsastheytraversethemiddlewarechain.
Startbycreatinganewfilecalledmain.gowithina
directorynamespace,suchasgithub.com/blackhat-go/bhg/ch-
4/negroni_example/.(Thisnamespacewillalreadybecreated
intheeventyouclonedtheBHGGithubrepository.)Now
modifyyourmain.gofiletoincludethefollowingcode.
packagemain
import(
"net/http"
"github.com/gorilla/mux"
"github.com/urfave/negroni"
)
funcmain(){
❶r:=mux.NewRouter()
❷n:=negroni.Classic()
❸n.UseHandler(r)
http.ListenAndServe(":8000",n)
}
Listing4-4:Negroniexample(/ch-4/negroni_example/main.go)
First,youcreatearouterasyoudidearlierinthischapter
bycallingmux.NewRouter()❶.Nextcomesyourfirstinteraction
withthenegronipackage:youmakeacalltonegroni.Classic()❷.
ThiscreatesanewpointertoaNegroniinstance.
Therearedifferentwaystodothis.Youcaneitheruse
negroni.Classic()orcallnegroni.New().Thefirst,negroni.Classic(),sets
updefaultmiddleware,includingarequestlogger,recovery
middlewarethatwillinterceptandrecoverfrompanics,and
middlewarethatwillservefilesfromthepublicfolderinthe
samedirectory.Thenegroni.New()functiondoesn’tcreateany
defaultmiddleware.
Eachtypeofmiddlewareisavailableinthenegronipackage.
Forexample,youcanusetherecoverypackagebydoingthe
following:
n.Use(negroni.NewRecovery())
Next,youaddyourroutertothemiddlewarestackby
callingn.UseHandler(r)❸.Asyoucontinuetoplanandbuildout
yourmiddleware,considertheorderofexecution.For
example,you’llwantyourauthentication-checking
middlewaretorunpriortothehandlerfunctionsthatrequire
authentication.Anymiddlewaremountedbeforetherouter
willexecutepriortoyourhandlerfunctions;anymiddleware
mountedaftertherouterwillexecuteafteryourhandler
functions.Ordermatters.Inthiscase,youhaven’tdefinedany
custommiddleware,butyouwillsoon.
GoaheadandbuildtheserveryoucreatedinListing4-4,
andthenexecuteit.Thenissuewebrequeststotheserverat
http://localhost:8000.Youshouldseethenegronilogging
middlewareprintinformationtostdout,asshownnext.The
outputshowsthetimestamp,responsecode,processingtime,
host,andHTTPmethod:
$gobuild-snegroni_example
$./negroni_example
[negroni]2020-01-19T11:49:33-07:00|404|1.0002ms|localhost:8000|GET
Havingdefaultmiddlewareisgreatandall,butthereal
powercomeswhenyoucreateyourown.Withnegroni,youcan
useafewmethodstoaddmiddlewaretothestack.Takealook
atthefollowingcode.Itcreatestrivialmiddlewarethatprintsa
messageandpassesexecutiontothenextmiddlewareinthe
chain:
typetrivialstruct{
}
func(t*trivial)ServeHTTP(whttp.ResponseWriter,r*http.Request,next
http.HandlerFunc){❶
fmt.Println("Executingtrivialmiddleware")
next(w,r)❷
}
Thisimplementationisslightlydifferentfromprevious
examples.Before,youwereimplementingthehttp.Handler
interface,whichexpectedaServeHTTP()methodthataccepted
twoparameters:http.ResponseWriterand*http.Request.Inthisnew
example,insteadofthehttp.Handlerinterface,you’re
implementingthenegroni.Handlerinterface.
Theslightdifferenceisthatthenegroni.Handlerinterface
expectsyoutoimplementaServeHTTP()methodthatacceptsnot
two,butthree,parameters:http.ResponseWriter,*http.Request,and
http.HandlerFunc❶.Thehttp.HandlerFuncparameterrepresentsthe
nextmiddlewarefunctioninthechain.Foryourpurposes,you
nameitnext.YoudoyourprocessingwithinServeHTTP(),and
thencallnext()❷,passingitthehttp.ResponseWriterand*http.Request
valuesyouoriginallyreceived.Thiseffectivelytransfers
executiondownthechain.
Butyoustillhavetotellnegronitouseyourimplementation
aspartofthemiddlewarechain.Youcandothisbycalling
negroni’sUsemethodandpassinganinstanceofyour
negroni.Handlerimplementationtoit:
n.Use(&trivial{})
Writingyourmiddlewarebyusingthismethodis
convenientbecauseyoucaneasilypassexecutiontothenext
middleware.Thereisonedrawback:anythingyouwritemust
usenegroni.Forexample,ifyouwerewritingamiddleware
packagethatwritessecurityheaderstoaresponse,youwould
wantittoimplementhttp.Handler,soyoucoulduseitinother
applicationstacks,sincemoststackswon’texpecta
negroni.Handler.Thepointis,regardlessofyourmiddleware’s
purpose,compatibilityissuesmayarisewhentryingtouse
negronimiddlewareinanon-negronistack,andviceversa.
Therearetwootherwaystotellnegronitouseyour
middleware.UseHandler(handlerhttp.Handler),whichyou’realready
familiarwith,isthefirst.Thesecondwayistocall
UseHandleFunc(handlerFuncfunc(whttp.ResponseWriter,r*http.Request)).The
latterisnotsomethingyou’llwanttouseoften,sinceitdoesn’t
letyouforgoexecutionofthenextmiddlewareinthechain.
Forexample,ifyouwerewritingmiddlewaretoperform
authentication,youwouldwanttoreturna401responseand
stopexecutionifanycredentialsorsessioninformationwere
invalid;withthismethod,there’snowaytodothat.
AddingAuthenticationwithNegroni
Beforemovingon,let’smodifyourexamplefromtheprevious
sectiontodemonstratetheuseofcontext,whichcaneasilypass
variablesbetweenfunctions.TheexampleinListing4-5uses
negronitoaddauthenticationmiddleware.
packagemain
import(
"context"
"fmt"
"net/http"
"github.com/gorilla/mux"
"github.com/urfave/negroni"
)
typebadAuthstruct{❶
Usernamestring
Passwordstring
}
func(b*badAuth)ServeHTTP(whttp.ResponseWriter,r*http.Request,next
http.HandlerFunc){❷
username:=r.URL.Query().Get("username")❸
password:=r.URL.Query().Get("password")
ifusername!=b.Username||password!=b.Password{
http.Error(w,"Unauthorized",401)
return❹
}
ctx:=context.WithValue(r.Context(),"username",username)❺
r=r.WithContext(ctx)❻
next(w,r)
}
funchello(whttp.ResponseWriter,r*http.Request){
username:=r.Context().Value("username").(string)❼
fmt.Fprintf(w,"Hi%s\n",username)
}
funcmain(){
r:=mux.NewRouter()
r.HandleFunc("/hello",hello).Methods("GET")
n:=negroni.Classic()
n.Use(&badAuth{
Username:"admin",
Password:"password",
})
n.UseHandler(r)
http.ListenAndServe(":8000",n)
}
Listing4-5:Usingcontextinhandlers(/ch-4/negroni_example/main.go)
You’veaddednewmiddleware,badAuth,thatisgoingto
simulateauthentication,purelyfordemonstrationpurposes❶.
Thisnewtypehastwofields,UsernameandPassword,and
implementsnegroni.Handler,sinceitdefinesthethree-parameter
versionoftheServeHTTP()method❷wediscussedpreviously.
InsidetheServeHTTP()method,youfirstgrabtheusernameand
passwordfromtherequest❸,andthencomparethemtothe
fieldsyouhave.Iftheusernameandpasswordareincorrect,
executionisstopped,anda401responseiswrittentothe
requester.
Noticethatyoureturn❹beforecallingnext().Thisprevents
theremainderofthemiddlewarechainfromexecuting.Ifthe
credentialsarecorrect,yougothrougharatherverboseroutine
ofaddingtheusernametotherequestcontext.Youfirstcall
context.WithValue()toinitializethecontextfromtherequest,
settingavariablenamedusernameonthatcontext❺.Youthen
makesuretherequestusesyournewcontextbycalling
r.WithContext(ctx)❻.Ifyouplanonwritingwebapplications
withGo,you’llwanttobecomefamiliarwiththispattern,as
you’llbeusingitalot.
Inthehello()function,yougettheusernamefromthe
requestcontextbyusingtheContext().Value(interface{})function,
whichitselfreturnsaninterface{}.Becauseyouknowit’sa
string,youcanuseatypeassertionhere❼.Ifyoucan’t
guaranteethetype,oryoucan’tguaranteethatthevaluewill
existinthecontext,useaswitchroutineforconversion.
BuildandexecutethecodefromListing4-5andsendafew
requeststotheserver.Sendsomewithbothcorrectand
incorrectcredentials.Youshouldseethefollowingoutput:
$curl-ihttp://localhost:8000/hello
HTTP/1.1401Unauthorized
Content-Type:text/plain;charset=utf-8
X-Content-Type-Options:nosniff
Date:Thu,16Jan202020:41:20GMT
Content-Length:13
Unauthorized
$curl-i'http://localhost:8000/hello?username=admin&password=password'
HTTP/1.1200OK
Date:Thu,16Jan202020:41:05GMT
Content-Length:9
Content-Type:text/plain;charset=utf-8
Hiadmin
Makingarequestwithoutcredentialsresultsinyour
middlewarereturninga401Unauthorizederror.Sendingthe
samerequestwithavalidsetofcredentialsproducesasuper-
secretgreetingmessageaccessibleonlytoauthenticatedusers.
Thatwasanawfullottodigest.Uptothispoint,your
handlerfunctionshavesolelyusedfmt.FPrintf()towriteyour
responsetothehttp.ResponseWriterinstance.Inthenextsection,
you’lllookatamoredynamicwayofreturningHTMLby
usingGo’stemplatingpackage.
UsingTemplatestoProduceHTMLResponses
Templatesallowyoutodynamicallygeneratecontent,
includingHTML,withvariablesfromGoprograms.Many
languageshavethird-partypackagesthatallowyoutogenerate
templates.Gohastwotemplatingpackages,text/templateand
html/template.Inthischapter,you’llusetheHTMLpackage,
becauseitprovidesthecontextualencodingyouneed.
OneofthefantasticthingsaboutGo’spackageisthatit’s
contextuallyaware:itwillencodeyourvariabledifferently
dependingonwherethevariableisplacedinthetemplate.For
example,ifyouweretosupplyastringasaURLtoanhref
attribute,thestringwouldbeURLencoded,butthesame
stringwouldbeHTMLencodedifitrenderedwithinan
HTMLelement.
Tocreateandusetemplates,youfirstdefineyourtemplate,
whichcontainsaplaceholdertodenotethedynamiccontextual
datatorender.Itssyntaxshouldlookfamiliartoreaderswho
haveusedJinjawithPython.Whenyourenderthetemplate,
youpasstoitavariablethat’llbeusedasthiscontext.The
variablecanbeacomplexstructurewithseveralfields,orit
canbeaprimitivevariable.
Let’sworkthroughasample,showninListing4-6,that
createsasimpletemplateandpopulatesaplaceholderwith
JavaScript.Thisisacontrivedexamplethatshowshowto
dynamicallypopulatecontentreturnedtothebrowser.
packagemain
import(
"html/template"
"os"
)
❶varx=`
❷Hello{{.}}
`
funcmain(){
❸t,err:=template.New("hello").Parse(x)
iferr!=nil{
panic(err)
}
❹t.Execute(os.Stdout,"")
}
Listing4-6:HTMLtemplating(/ch-4/template_example/main.go)
Thefirstthingyoudoiscreateavariable,namedx,tostore
yourHTMLtemplate❶.Hereyou’reusingastringembedded
inyourcodetodefineyourtemplate,butmostofthetime
you’llwanttostoreyourtemplatesasseparatefiles.Notice
thatthetemplateisnothingmorethanasimpleHTMLpage.
Insidethetemplate,youdefineplaceholdersbyusingthe
{{variable-name}}convention,wherevariable-nameisthedata
elementwithinyourcontextualdatathatyou’llwanttorender
❷.Recallthatthiscanbeastructoranotherprimitive.Inthis
case,you’reusingasingleperiod,whichtellsthepackagethat
youwanttorendertheentirecontexthere.Sinceyou’llbe
workingwithasinglestring,thisisfine,butifyouhadalarger
andmorecomplexdatastructure,suchasastruct,youcould
getonlythefieldsyouwantbycallingpastthisperiod.For
example,ifyoupassedastructwithaUsernamefieldtothe
template,youcouldrenderthefieldbyusing{{.Username}}.
Next,inyourmain()function,youcreateanewtemplateby
callingtemplate.New(string)❸.ThenyoucallParse(string)toensure
thatthetemplateisproperlyformattedandtoparseit.
Together,thesetwofunctionsreturnanewpointertoa
Template.
Whilethisexampleusesonlyasingletemplate,it’s
possibletoembedtemplatesinothertemplates.Whenusing
multipletemplates,it’simportantthatyounametheminorder
tobeabletocallthem.Finally,youcallExecute(io.Writer,
interface{})❹,whichprocessesthetemplatebyusingthe
variablepassedasthesecondargumentandwritesittothe
providedio.Writer.Fordemonstrationpurposes,you’lluse
os.Stdout.ThesecondvariableyoupassintotheExecute()method
isthecontextthat’llbeusedforrenderingthetemplate.
RunningthisproducesHTML,andyoushouldnoticethat
thescripttagsandothernefariouscharactersthatwere
providedaspartofyourcontextareproperlyencoded.Neat-o!
$gobuild-otemplate_example
$./template_example
Hello&lt;script&gt;alert(&#39;world&#39;)&lt;/script&gt;
Wecouldsayalotmoreabouttemplates.Youcanuse
logicaloperatorswiththem;youcanusethemwithloopsand
othercontrolstructures.Youcancallbuilt-infunctions,and
youcanevendefineandexposearbitraryhelperfunctionsto
greatlyexpandthetemplatingcapabilities.Doubleneat-o!We
recommendyoudiveinandresearchthesepossibilities.
They’rebeyondthescopeofthisbook,butarepowerful.
Howaboutyoustepawayfromthebasicsofcreating
serversandhandlingrequestsandinsteadfocusonsomething
morenefarious.Let’screateacredentialharvester!
CREDENTIALHARVESTING
Oneofthestaplesofsocialengineeringisthecredential-
harvestingattack.Thistypeofattackcapturesusers’login
informationtospecificwebsitesbygettingthemtoentertheir
credentialsinaclonedversionoftheoriginalsite.Theattack
isusefulagainstorganizationsthatexposeasingle-factor
authenticationinterfacetotheinternet.Onceyouhaveauser’s
credentials,youcanusethemtoaccesstheiraccountonthe
actualsite.Thisoftenleadstoaninitialbreachofthe
organization’sperimeternetwork.
Goprovidesagreatplatformforthistypeofattack,
becauseit’squicktostandupnewservers,andbecauseit
makesiteasytoconfigureroutingandtoparseuser-supplied
input.Youcouldaddmanycustomizationsandfeaturestoa
credential-harvestingserver,butforthisexample,let’sstickto
thebasics.
Tobegin,youneedtocloneasitethathasaloginform.
Therearealotofpossibilitieshere.Inpractice,you’d
probablywanttocloneasiteinusebythetarget.Forthis
example,though,you’llcloneaRoundcubesite.Roundcubeis
anopensourcewebmailclientthat’snotusedasoftenas
commercialsoftware,suchasMicrosoftExchange,butwill
allowustoillustratetheconceptsjustaswell.You’lluse
DockertorunRoundcube,becauseitmakestheprocesseasier.
YoucanstartaRoundcubeserverofyourownby
executingthefollowing.Ifyoudon’twanttorunaRoundcube
server,thennoworries;theexercisesourcecodehasacloneof
thesite.Still,we’reincludingthisforcompleteness:
$dockerrun--rm-it-p127.0.0.180:80robbertkl/roundcube
ThecommandstartsaRoundcubeDockerinstance.Ifyou
navigatetohttp://127.0.0.1:80,you’llbepresentedwitha
loginform.Normally,you’dusewgettocloneasiteandallits
requisitefiles,butRoundcubehasJavaScriptawesomeness
thatpreventsthisfromworking.Instead,you’lluseGoogle
Chrometosaveit.Intheexercisefolder,youshouldseea
directorystructurethatlookslikeListing4-7.