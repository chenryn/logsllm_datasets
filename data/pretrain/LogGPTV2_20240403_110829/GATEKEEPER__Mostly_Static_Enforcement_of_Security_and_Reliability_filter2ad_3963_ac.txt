### 1. Unfortunate Coding Pattern in Live Widgets

Live widgets often encourage a coding pattern that complicates static analysis, as illustrated in Figure 11. The `url` value, which is the result of concatenating a constant URL and `widgetURL`, is used on the right-hand side and can be exploited for code injection.

To mitigate this, the following code snippet:
```javascript
v1.innerHTML = v2;
```
is rewritten as:
```javascript
if (__IsUnsafe(v2)) {
    alert("Disguised eval attempt at :");
} else {
    v1.innerHTML = v2;
}
```
where `__IsUnsafe` disallows all but very simple HTML. Currently, `__IsUnsafe` is implemented as follows:
```javascript
function __IsUnsafe(data) {
    return (toStaticHTML(data) === data);
}
```
`toStaticHTML` is a built-in function in newer versions of Internet Explorer that removes script attempts from HTML. An alternative approach is to use a parser that allows a subset of HTML, similar to the method used in WebSandbox [25]. The `alert` call is optional and only needed if we want to warn the user; otherwise, it can be omitted.

### 2. Rewriting Unresolved Heap Loads and Stores

The JavaScript syntax supported by GATEKEEPER includes additional variants of LOAD and STORE rules for associative arrays, introducing Datalog facts as shown below:
```datalog
v1 = v2[*]
v1[*] = v2
LOAD(v1, v2, _)
STORE(v1, _, v2)
[ARRAYLOAD]
[ARRAYSTORE]
```
When the indices of an associative array operation cannot be determined statically, a conservative approach is necessary. This means that any field that may be accessed or modified must be considered.

**Example:**
```javascript
var a = {
    'f': function(){...},
    'g': function(){...},
    ...
};
a[x + y] = function(){...};
a.f();
```
If we cannot statically determine which field of object `a` is being written to on line 5, we must conservatively assume that the assignment could be to field `f`, potentially affecting which function is called on line 6.

Moreover, any statically unresolved store may introduce additional code through writing to the `innerHTML` field, which static analysis might miss. We rewrite statically unsafe stores `v1[i] = v2` by blacklisting fields that may lead to code introduction:
```javascript
if (i === "onclick" || i === "onkeypress" || ...) {
    alert("Disguised eval attempt at :");
} else if (i === "innerHTML" && __IsUnsafe(v2)) {
    alert("Unsafe innerHTML at :");
} else {
    v1[i] = v2;
}
```
We use `===` instead of `==` to avoid coercion of `i` to a string. Due to JavaScript's single-threaded nature, there is no risk of a TOCTOU vulnerability where `v2` changes after the safety check.

Similarly, statically unsafe loads of the form `v1 = v2[i]` can be restricted as follows:
```javascript
if (i === "eval" || i === "setInterval" || i === "setTimeout" || i === "Function" || ...) {
    alert("Disguised eval attempt at :");
} else {
    v1 = v2[i];
}
```
We must check for unsafe functions such as `eval`, `setInterval`, etc., and ensure the blacklist is comprehensive to preserve the soundness of our analysis.

### 3. Normalization Details

This section discusses several aspects of normalizing the JavaScript AST. Certain control flow and reflective constructs like `for...in` are omitted because our analysis is flow-insensitive.

- **Handling the Global Object:** We explicitly treat the global object by introducing a variable `global` and assigning to its fields. Global variable reads and writes become loads and stores to fields of the global object.
- **Handling `this` Argument in Function Calls:** In JavaScript, the `this` keyword is set to the global object for calls of the form `f(x, y, ...)`. We translate these differently, passing the global object in place of `this`.

### 4. Native Environment

The browser embedding of the JavaScript engine includes many pre-defined objects. For whole-program analysis, we create stubs for the native environment. For every function encountered, we provide a default stub:
```javascript
var global = new Object();
var this = global;
global.Array = new Object();
global.Array.constructor = new function(){return undefined;};
global.Array.join = new function(){return undefined;};
...
```
We use an explicit global object to host a namespace for our declarations. However, creating a sound native environment is challenging. For example, the following code demonstrates aliasing:
```javascript
var parent_div = document.getElementById('header');
var child_div = document.createElement('div');
parent_div.appendChild(child_div);
var child_div2 = parent_div.childNodes[0];
```
In this case, `child_div` and `child_div2` are aliases for the same `DIV` element. We model operations like `appendChild` in JavaScript code to create mock-ups instead of native browser implementations.

### 5. Security and Reliability Policies

This section outlines policies that apply to widgets from various hosts (Live, Sidebar, and Google). Each policy is accompanied by a Datalog query designed to find violations.

- **Restricting Widget Capabilities:** We restrict code capabilities, such as disallowing calls to specific functions. For example, to prevent pop-up boxes, we use the following query:
  ```datalog
  AlertCalls(i : I)
  GlobalSym(m, h)
  : – PTSTO("global", g), HEAPPTSTO(g, m, h).
  AlertCalls(i)
  : – GlobalSym("alert", h), CALLS(i, h).
  ```

- **Detecting Writes to Frozen Objects:** We disallow changing properties of built-in objects to prevent environment pollution attacks. The following query detects such attempts:
  ```datalog
  FrozenViolation(v : V)
  BuiltInObject(h) : – GlobalSym("Boolean", h).
  BuiltInObject(h) : – GlobalSym("Array", h).
  ...
  FrozenViolation(v) : – STORE(v, _, _), PTSTO(v, h), BuiltInObject(h).
  ```

- **Detecting Code Injection:** We prevent code injection through `document.write` by using the following query:
  ```datalog
  DocumentWrite(i : I)
  : – GlobalSym("document", d), HEAPPTSTO(d, "write", m), CALLS(i, h).
  DocumentWrite(i)
  : – GlobalSym("document", d), HEAPPTSTO(d, "writeln", m), CALLS(i, h).
  ```

- **Redirecting the Browser:** We prevent browser redirection by detecting assignments to `window.location`:
  ```datalog
  LocationAssign(v : V)
  : – GlobalSym("window", h), PTSTO(v, h), STORE(_, "location", v).
  ```

These policies and queries help ensure the security and reliability of widgets in various hosting environments.