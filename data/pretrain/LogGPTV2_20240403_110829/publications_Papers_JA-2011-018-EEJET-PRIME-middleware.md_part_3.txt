ver, there are also gaps in specific techniques. Still there is
4. Generic Architecture and Ontology a need to:
1. Identify Semantic Web technologies that are needed
The PRIME platform aims at providing (semantic) cro- and are sufficient to model the interaction of real-world obj-
ss-layer communication services (data-level interoperability) ects, software systems and humans in PRIME.
and collaboration-support services (functional protocol-level 2. Ontologically formalize the model of device-software-
interoperability) to heterogeneous industrial resources. The human interaction.
basic set of components needed for realizing such a platform 3. Formalize the concept of business service as a well
is sketched above in the “Vision”: adapters to specific mid- defined, encapsulated, reusable, and business-aligned cap-
dleware platforms, semantic models and ontologies, and the ability.
agents representing resources along with the agent platform 4. Ontologically model middleware interfaces to hetero-
governing them. A rigorous study based on the principles of geneous types of networked resources.
system analysis is needed for: 5. Solve the problems related to ontological mapping
1. Identifying all the needed architectural components and alignment that arise in the device-software-human
for the realization of the inter-middleware vision. interaction.
2. Defining the properties of the components and their PRIME, which is being built on top of many existing
required capabilities. tools and will make maximal reuse of (1) the Semantic Web
3. Analysis of the relations between components, their technology developed in SEKT and (2) the Semantic Web
interdependencies and interactions. Service technology developed in SUPER, DIP, and IBR-
4. Analysis of the overall operational cycle of the inter- OW. As a result, PRIME will extend the generic architectu-
middleware platform and its modes. re, languages, and tools of the SUPER and the DIP systems
A substantial part of PRIME’s conceptualizations need into actually deployable solutions for an inter-middleware
to be made explicit to support their reuse and to facilitate application area.
interoperability in the device-software-human triangle. To
this end, we rely on the achievements in the area of ontolog-
ies and Semantic Web. Dedicated methodologies have been 5. Agent-Based Core of PRIME
developed to convert information landscapes into ontologic-
al models, and special means have been explored to represent In the PRIME vision, every resource is represented by a
the models on the (Semantic) Web to be utilized in various software agent. Autonomous agents will act as representativ-
scenarios. es of resources and engines for executing defined interaction
In PRIME’s vision, the connection towards a resource scenarios.
is organized through the mediation of an existing midd- Although the flexibility of agent interactions has many
leware supported by the middleware adapters’ layer and advantages when it comes to engineering complex systems,
the semantics layer. The semantic layer extends and reuses the downside is that it leads to unpredictability in the run
existing ontology languages, annotation tools, techniques, time system; as agents are autonomous, the patterns and
repositories, and reasoners. One core difference between the the effects of their interactions are uncertain (Jennings,
Semantic Web environment and the PRIME environment is 2000). It is common in specific systems and applications to
that the PRIME ontology will be developed and utilised as a circumvent these difficulties by using interaction protocols
reference for semantics of business and technical vocabulary whose properties can be formally analyzed, by adopting rigid
8
Прикладные информационные технологии
and preset organizational structures, and/or by limiting the the run-time loop of an agent. S-APL agents are able to acc-
nature and the scope of the agent interplay. However, these ess the behaviour models from an external repository, which
restrictions also limit the power of the agent-based approach; can be managed by the organization which “hires” the agents
thus, in order to realize its full potential some longer term to enact those roles. As can be seen from the picture, the pla-
solutions are required (Jennings, 2000). tform allows also on-demand access of RABs. Such a 3-layer
Realization of the PRIME vision requires a reliable agent architecture with externalization of behaviour models
platform that would provide means for building systems and on-demand access of atomic code components provides
that are flexible and consist of autonomous components, yet a good core for the PRIME platform.
predictable in operation. Two important research directions,
acknowledged in the literature, are: social level character-
ization of agent-based systems, and ontological approaches 6. Interfacing with Heterogeneous Resources
to coordination. The former direction presents the need
for a better understanding of the impact of sociality and In the PRIME vision, the connection towards a resource
organizational context on an individual’s behaviour and of is organized through the semantic mediation of an existing
the symbiotic link between the behaviour of the individual middleware supported by the middleware adapters’ layer.
agents and that of the overall system (Jennings, 2000). In Three distinct classes of resources are considered: real-wo-
particular, it requires modelling behaviour of an agent as rld entities (Internet of Things), software systems (Web of
being defined or restricted by the roles the agent plays in Services), and humans (Web 2.0), leading to the three sub-
one or several organizations (Vаzquez-Salceda et al., 2005). objectives. Achieving each sub-objective includes, among
The latter direction presents the need to enable agents to other tasks, a development effort towards a semantic doma-
communicate their intentions with respect to future activit- in-independent middleware adapter.
ies and resource utilization and to reason about the actions, 6.1. Linking to the Internet of Things’ Resources
plans, and knowledge of each other, in real time (Tamma et Several middleware solutions have been created for in-
al., 2005). Jennings at al. (1998) present this as an issue of terconnectivity of embedded systems in the ubiquitous co-
enabling individual agents to represent and reason about the mputing domain. The middleware needs of the ubiquitous
actions, plans, and knowledge of other agents to coordinate computing go well beyond interconnectivity of embedded
with them. In other words, there is a need for the interacting systems themselves. There is a more general need for sol-
processes, e.g. software agents, Web services, etc, to be able utions that will enable seamless integration of embedded
to communicate not only about the external world, i.e. the systems with Web services, software applications, humans
domain, but also about their own abilities, goals, as well as along with their interfaces, and other. Also, middleware
the current and intended actions. should provide interoperability, not just interconnectivity.
Recently, we introduced the Semantic Agent Program- The components of ubiquitous computing systems should
ming Language (S-APL) (Katasonov and Terziyan, 2008), be able not only to communicate and exchange data, but
which is an RDF-based language integrating semantic desc- also to flexibly coordinate with, discover and use one an-
ription of the domain resources with semantic prescription of other, and jointly engage in different business processes.
the agents’ behaviours. The architecture of an S-APL based Such more general middleware needs of the ubiquitous
agent, depicted in Fig. 5, does some steps in the research computing domain are emphasized, e.g., in the Strategic
directions mentioned above. Research Agenda (SRA) of the ARTEMIS European Te-
chnology Platform. ARTEMIS’ SRA includes “Seamless
Connectivity and Middleware” as one of its three main
parts. One of the research priorities listed there is efficient
bridging of information between global, enterprise, and
embedded systems. Another priority is middleware as the
key enabler for declarative programming paradigm, where
the components and their interactions are defined and co-
nfigured declaratively rather than programmatically. The
other relevant middleware research priorities include use
of ontologies for cross-domain systems’ organization and
for interoperability in heterogeneous environments, dyn-
amic reconfiguration capabilities, and adaptive resource
management.
As explained above, the PRIME approach is to create
an inter-middleware which would provide above mention-
ed complex capabilities, while embedded-level middleware
solutions will remain simple without the need of extending
Fig. 5. S-APL agent architecture
them with this complexity. The existing (and future) embed-
It can be seen as consisting of three layers: reusable at- ded-level middleware solutions will be connected to PRIME
omic behaviours (RABs), beliefs storage, and the behaviour through corresponding middleware adapters, which means:
engine. A RAB is a piece of Java code implementing a reason- 1. Taking into account the specifics of interfacing with
ably atomic function (this covers sensors, actuators, and data physical resources, considering the context of inter-mid-
processing). The beliefs storage contains data and behaviour dleware. Analyse existing real-world entities middleware
rules, both encoded in the S-APL language. The behaviour solutions, their capabilities and restrictions.
engine is the standard component of any S-APL agent. It is 2. Developing an appropriate methodology for building
responsible for parsing S-APL documents, and it implements semantic annotations to the devices and their profiles.
9
Восточно-Европейский журнал передовых технологий 3/12 ( 51 ) 2011
3. Solving issues arising when considering the adapters nta Networks’ Virtual RFID Network (VRN) technology.
for interfacing with different embedded middleware solut- VRN ensures that Mint-enabled RFID networks provide
ions and come up with a generic framework for developing fast response, high reliability and secure communications.
such adapters. The main difference between the VRN RFID gate and the
4. Developing a domain-independent adapter to RFID standard gates is the ability to orchestrate activities of the
middleware and incorporate it in the global context of conn- gate readers in an optimized way from the middleware. Stan-
ecting RFID enabled devices to enterprise systems. dard RFID gates are static in nature. They can be optimally
We are using a device integration middleware protot- positioned according to the original design constraints, but
ype developed by SAP Research6), as our base middleware they are ill-adapted to fit constantly changing conditio-
for interfacing with real-world objects. The middleware is ns. The readers in the standard gate are independent and
primarily a framework which facilitates development and cannot, therefore, avoid mutual disturbance. Antennas in
execution of device integration logic and services. Device- multi-antenna gate cannot operate together and switching
integration logic connects compatible electronic devices to cannot be dynamically configured. VRN gates’ dynamic
backend systems (such as ERP and databases). A service is reading and writing strategies are optimal for the changing
an interface which is capable of connecting to device-inte- reading conditions, materials, readers and tags. In PRIME,
gration logic and other services. A service, additionally, is VRN approach is extended to combine the interfaces from
capable of performing business logic on different kinds of the RFID network with standard IP connectivity. Conside-
data received from devices and backend systems through red scenario is such where RFID tags (connected via Mint)
device-integration logic. and barcode readers, energy monitors, etc (connected via
A device to enterprise integration scenario is as follows. device integration middleware) are integrated through the
The complete platform is comprised of three different sub- PRIME inter-middleware. This scenario is rather domain-
parts – the Node (which is the Runtime), the frontend UI, independent and fits well the Future Factory Initiative of
and the persistence engine. Node is the component which is SAP Research in Dresden.
responsible for interfacing with
devices (from the manufacturing
domain or elsewhere), message
routing, protocol translation, me-
ssage mapping etc. The runtime
can be hot-deployed, i.e., specific
services/agents which are resp-
onsible for gathering data and
forwarding data from devices can
be developed on the fly and dep-
loyed without the need to restart
the Node. This is particularly he-
lpful from the extensibility point
of view since it enables manuf-
acturers to add a newly install-
ed device to the backend system
without requiring restarting the
middleware. The persistence en- Fig. 6. A deployment scenario for device integration middleware
gine is responsible for storing de-
vice data over multiple sessions.
It uses ORM (Object Relation Mapping) which enables 6.2. Linking to the Web of Services
services in the node to connect to any data source in the A great number of businesses have adopted or are adop-
background by referencing the source via runtime instances. ting SOA architectures for their business software or ERP
Additionally, it connects to the frontend UI which is respo- systems. Web services are widely recognised as the lead imp-
nsible for providing a distributed yet uniform view of asset lementation of SOA for enterprises applications and systems
hierarchy of the entire system including but not limited to integration. In such context, traditional software compon-
the sites where nodes are installed, the different physical and ents and modules are transformed into Web Services, imp-
logical device interfaces, their configurations, and details roving usability, manageability, and flexibility, providing a
about the enterprise systems. The frontend also allows dyn- uniform way for software application interoperability and
amic upload of service implementations, i.e., the user of the integration. However, new breed of services are emerging as
system can upload an archived file which performs business part of Web 2.0. Web 2.0 services have gained momentum
logic on data received from different entities of the system. A among academia and industry. They are predominantly imp-
deployment scenario is illustrated in Fig. 6. lemented according to the RESTful principles.
Also we are using the Mint RFID middleware of Menta Web services and Web 2.0 have coexisted as integration
Networks7). Mint is an integrated, of-the-shelf RFID Front- paradigms on the Web for some years now, but whereas Web
End Gateway. It does not require any customization, its drag services are typically applied in business contexts in a closed
and drop interface allows quick setup and easy maintenance, environment, Web 2.0 is an informal approach for ad hoc
significantly reducing costs and time. Mint is utilizing Me- integration, far outnumbering the number of Web services.
Web 2.0 services are particularly pivotal for a successful
6)http://www.sap.com/about/company/research/ integration of the “Internet of Things”, since data published
7)http://www.mentanet.com/ from sensors on the Web is mostly provided in an ad-hoc
10
Прикладные информационные технологии
fashion without clear and standardised interfaces. The cha- • Identifying relevant vocabularies, ontologies, and oth-
llenges increase when other types of resources, e.g. humans er resources present there and how they are involved in the