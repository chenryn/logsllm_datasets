## PostgreSQL 设计优化case - 大宽表任意字段组合查询索引如何选择(btree, gin, rum) - (含单个索引列数超过32列的方法) 
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-08-03                                                             
### 标签                                                               
PostgreSQL , adhoc查询 , 大宽表 , 任意字段组合查询 , 索引 , btree , gin , rum    
----                                                               
## 背景  
大宽表，任意字段组合查询，透视。是实时分析系统中的常见需求：  
1、实时写入。  
2、实时任意字段组合查询、透视。  
PostgreSQL中，有多种方法支持这种场景：  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
1、方法1，每个字段加一个索引(普通类型用btree, 多值类型(数组,json,全文检索,枚举等类型)用gin, 空间、范围类型用gist，时序类型用brin)。  
2、方法2，使用单个复合索引，把所有字段放到GIN倒排索引接口中。  
3、方法3，使用单个复合索引，把所有字段放到RUM索引接口中。  
那么这三种方法，应该选哪种更好呢？  
或者说选哪种，可以在写入、查询性能上获得更好的平衡。  
## 让单个复合索引支持超过32个字段  
注意，PG默认情况下，仅支持一个索引中，最多放32个字段。  
通过修改 src/include/pg_config_manual.h ，重新编译，可以支持更多的字段。但是注意，支持的字段越多，索引的头信息会越大。  
```  
vi src/include/pg_config_manual.h  
/*  
 * Maximum number of columns in an index.  There is little point in making  
 * this anything but a multiple of 32, because the main cost is associated  
 * with index tuple header size (see access/itup.h).  
 *  
 * Changing this requires an initdb.  
 */  
// #define INDEX_MAX_KEYS   32  
#define INDEX_MAX_KEYS   128  
```  
或者用array代替多字段也可以满足需求:  ```create index idx x on t using gin ((array['c1:'||c1, 'c2:'||c2, ...]))``` 查询时也使用和索引相同的表达式即可.     
```  
src/include/access/itup.h  
/*  
 * Index tuple header structure  
 *  
 * All index tuples start with IndexTupleData.  If the HasNulls bit is set,  
 * this is followed by an IndexAttributeBitMapData.  The index attribute  
 * values follow, beginning at a MAXALIGN boundary.  
 *  
 * Note that the space allocated for the bitmap does not vary with the number  
 * of attributes; that is because we don't have room to store the number of  
 * attributes in the header.  Given the MAXALIGN constraint there's no space  
 * savings to be had anyway, for usual values of INDEX_MAX_KEYS.  
 */  
```  
如果字段允许NULL，则有一个数据结构IndexAttributeBitMapData用来表示哪个字段的值是NULL（与TUPLE的头信息类似，也有NULL BITMAP的表示）。  
因此如果字段有NULL，则索引条目的的头信息中，会多出若干BIT，是固定大小的。   
```  
typedef struct IndexAttributeBitMapData  
{  
        bits8           bits[(INDEX_MAX_KEYS + 8 - 1) / 8];  
}   
```  
INDEX_MAX_KEYS = 32 时，4字节。  
## 对比每列独立索引、GIN单个全字段复合索引、RUM单个全字段复合索引。  
### 安装测试PostgreSQL软件  
1、编译软件  
```  
wget https://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2  
tar -jxvf postgresql-snapshot.tar.bz2  
cd postgresql-12devel  
参考上面的章节修改源码 src/include/pg_config_manual.h ，支持单个索引放128个字段。  
LIBS=-lpthread CFLAGS="-O3" ./configure --prefix=/home/digoal/pgsql12  
LIBS=-lpthread CFLAGS="-O3" make world -j 128  
LIBS=-lpthread CFLAGS="-O3" make install-world  
```  
安装rum插件，略。  
https://github.com/postgrespro/rum  
2、设置环境变量  
```  
vi env12.sh  
export PS1="$USER@`/bin/hostname -s`-> "    
export PGPORT=8000  
export PGDATA=/data01/pg/pg_root$PGPORT    
export LANG=en_US.utf8    
export PGHOME=/home/digoal/pgsql12  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH    
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.    
export MANPATH=$PGHOME/share/man:$MANPATH    
export PGHOST=$PGDATA    
export PGUSER=postgres    
export PGDATABASE=postgres    
alias rm='rm -i'    
alias ll='ls -lh'    
unalias vi  
. ./env12.sh  
```  
3、初始化数据库集群  
```  
initdb -D $PGDATA -U postgres -X /data02/pg/pg_wal_8000 -E SQL_ASCII --locale=C  
```  
4、修改数据库配置  
```  
vi $PGDATA/postgresql.conf  
listen_addresses = '0.0.0.0'  
port = 8000  
max_connections = 1000  
unix_socket_directories = '/tmp,.'  
shared_buffers = 32GB  
maintenance_work_mem = 1GB  
dynamic_shared_memory_type = posix  
vacuum_cost_delay = 0  
bgwriter_delay = 10ms  
bgwriter_lru_maxpages = 1000  
bgwriter_lru_multiplier = 10.0  
effective_io_concurrency = 0  
max_worker_processes = 128  
wal_level = replica  
synchronous_commit = off  
wal_buffers = 16MB  
wal_writer_delay = 10ms  
checkpoint_timeout = 35min  
max_wal_size = 64GB  
min_wal_size = 16GB  
checkpoint_completion_target = 0.1  
random_page_cost = 1.1  
log_destination = 'csvlog'  
logging_collector = on  
log_truncate_on_rotation = on  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose    
log_timezone = 'PRC'  
log_autovacuum_min_duration = 0    
autovacuum_freeze_max_age = 1200000000  
autovacuum_multixact_freeze_max_age = 1400000000  
autovacuum_vacuum_cost_delay = 0ms  
vacuum_freeze_table_age = 1150000000  
vacuum_multixact_freeze_table_age = 1150000000  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'  
lc_monetary = 'C'  
lc_numeric = 'C'  
lc_time = 'C'  
default_text_search_config = 'pg_catalog.english'  
jit = off  
```  
5、启动数据库  
```  
pg_ctl start  
```  
### 构建测试表  
1、分别创建a b c 3张表，结构一样，都是128个字段。按要求创建索引  
每列一个BTREE索引  
```  
do language plpgsql $$   
declare  
  sql text := 'create table a (';  
begin  
  for i in 1..128 loop  
    sql := sql || 'c' || i || ' int default random()*2000000000,';  
  end loop;  
  sql := rtrim(sql,',');  
  sql := sql || ')';  
  execute sql;  
  for i in 1..128 loop  
    execute 'create index idx_a_'||i||' on a (c'||i||')';  
  end loop;  
end;  
$$;  
```  
所有列放到一个GIN索引中  
（注意GIN索引有FASTUPDATE参数，开启的时候，写入性能很好，但是会延迟合并PENDING TUPLES，写入快了，查询就可能慢（如果在PENDING TUPLES合并慢，并且很大时，越慢），后面会有例子）  
```  
create extension btree_gin;  
do language plpgsql $$   
declare  
  sql text := 'create table b (';  
begin  
  for i in 1..128 loop  
    sql := sql || 'c' || i || ' int default random()*2000000000,';  
  end loop;  
  sql := rtrim(sql,',');  
  sql := sql || ')';  
  execute sql;  
  sql := 'create index idx_b_1 on b using gin (';  
  for i in 1..128 loop  
    sql := sql || 'c' || i || ',';  
  end loop;  
  sql := rtrim(sql,',');  
  sql := sql || ')';  
  execute sql;  
end;  
$$;  
```  
所有列放到一个RUM索引中  
```  
create extension rum;  