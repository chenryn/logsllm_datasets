[`sshd_service`{.literal}]{.term}
:   此变量更改 `sshd`{.literal} 服务名称，这对于配置第二个
    `sshd`{.literal} 服务实例非常有用。
[`sshd`{.literal}]{.term}
:   包含配置的字典。例如：
    ``` screen
    sshd:
      Compression: yes
      ListenAddress:
        - 0.0.0.0
    ```
[`sshd_OptionName`{.literal}]{.term}
:   您可以使用由 `sshd_`{.literal} 前缀和选项名称而不是 dict
    组成的简单变量来定义选项。简单的变量覆盖 `sshd`{.literal}
    字典中的值。例如：
    ``` screen
    sshd_Compression: no
    ```
[`sshd_match`{.literal} 和 `sshd_match_1`{.literal} 到 `sshd_match_9`{.literal}]{.term}
:   字典列表或 只是匹配部分的字典。请注意，这些变量不会覆盖
    `sshd`{.literal}
    字典中定义的匹配块。所有源都会反映在生成的配置文件中。
:::
::: title
**SSH 服务器系统角色的辅助变量**
:::
您可以使用这些变量来覆盖与每个支持的平台对应的默认值。
::: variablelist
[`sshd_packages`{.literal}]{.term}
:   您可以使用此变量来覆盖安装的软件包的默认列表。
[`sshd_config_owner`{.literal}、`sshd_config_group`{.literal} 和 `sshd_config_mode`{.literal}]{.term}
:   您可以使用这些变量为该角色生成的 `openssh`{.literal}
    配置文件设置所有权和权限。
[`sshd_config_file`{.literal}]{.term}
:   此角色保存生成的 `openssh`{.literal} 服务器配置的路径。
[`sshd_config_namespace`{.literal}]{.term}
:   此变量的默认值为
    null，这意味着角色定义配置文件的整个内容，包括系统默认值。或者，您也可以使用此变量从其他角色或从不支随时可访问目录的系统上的单个
    playbook 中的多个位置调用此角色。`sshd_skip_defaults`{.literal}
    变量将被忽略，本例中没有使用系统默认值。
    设置此变量时，角色会将您指定的配置放置在给定命名空间下的现有配置段中。如果您的场景需要多次应用角色，您需要为每个应用程序选择不同的命名空间。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `openssh`{.literal}
    配置文件的限制仍然适用。例如，对大多数配置选项，只有配置文件中指定的第一个选项有效。
    :::
    从技术上讲，角色会将段放在\"Match
    all\"块中，除非它们包含其他匹配块，以确保无论现有配置文件中之前匹配的块如何都将应用它们。这允许从不同角色调用中配置任何不冲突的选项。
[`sshd_binary`{.literal}]{.term}
:   `openssh`{.literal} 的 `sshd`{.literal} 可执行文件的路径。
[`sshd_service`{.literal}]{.term}
:   `sshd`{.literal} 服务的名称。默认情况下，此变量包含目标平台所使用的
    `sshd`{.literal} 服务的名称。当角色使用
    `sshd_install_service`{.literal} 变量时，您还可以使用它来设置自定义
    `sshd`{.literal} 服务的名称。
[`sshd_verify_hostkeys`{.literal}]{.term}
:   默认值为 `auto`{.literal}。当设置为 `auto`{.literal}
    时，这将列出生成的配置文件中存在的所有主机密钥，并生成所有不存在的路径。此外，权限和文件所有者被设置为默认值。如果该角色用于部署阶段来确保服务能够在第一次尝试时启动，则这非常有用。若要禁用此检查，可将此变量设置为空列表
    `[]`{.literal}。
[`sshd_hostkey_owner`{.literal},`sshd_hostkey_group`{.literal},`sshd_hostkey_mode`{.literal}]{.term}
:   使用这些变量来设置 `sshd_verify_hostkeys`{.literal}
    的主机密钥的所有权和权限。
[`sshd_sysconfig`{.literal}]{.term}
:   在基于 RHEL 的系统上，这个变量配置 `sshd`{.literal}
    服务的其它详细信息。如果设置为
    `true`{.literal}，则此角色还会根据以下配置来管理
    `/etc/sysconfig/sshd`{.literal} 配置文件：默认值为
    `false`{.literal}。
[`sshd_sysconfig_override_crypto_policy`{.literal}]{.term}
:   在 RHEL 中，当设为 `true`{.literal}
    时，这个变量会覆盖系统范围的加密策略。默认值为 `false`{.literal}。
[`sshd_sysconfig_use_strong_rng`{.literal}]{.term}
:   在基于 RHEL 的系统上，此变量可以强制 `sshd`{.literal}
    使用给定的字节数作为参数来重新设置 `openssl`{.literal}
    随机数字生成器的种子。默认值为
    `0`{.literal}，它会禁用此功能。如果系统没有硬件随机数字生成器，请不要打开此选项。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-openssh-servers-using-the-sshd-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSH 服务器系统角色配置 OpenSSH 服务器 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSH 服务器系统角色来配置多个 SSH
服务器。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以将 SSH Server 系统角色与其他系统角色结合使用，用于更改 SSH 和 SSHD
配置，如身份管理 RHEL 系统角色。要防止配置被覆盖，请确保 SSH Server
角色使用命名空间（RHEL 8 及更早版本）或置入目录(RHEL 9)。
:::
::: itemizedlist
**先决条件**
-   可以访问一个或多个 [*受管节点*]{.emphasis}，它们是您要使用 SSHD
    系统角色来配置的系统。
-   对 [*控制节点*]{.emphasis} 的访问和权限，控制节点是 Red Hat Ansible
    Engine 配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
        软件包已安装 。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0-8.5 提供对一个独立的 Ansible 存储库的访问权限，该存储库包含基于
Ansible 的自动化 Ansible Engine 2.9。Ansible Engine
包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}、连接器（如
`docker`{.literal} 和 `podman`{.literal}
）以及许多插件和模块。有关如何获取并安装 Ansible Engine 的详情，请参考
[如何下载并安装 Red Hat Ansible
Engine](https://access.redhat.com/articles/3174981){.link} 知识库文章。
RHEL 8.6 和 9.0 引入了 Ansible Core（作为 `ansible-core`{.literal}
软件包提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。RHEL 通过 AppStream
软件仓库提供此软件包，它有一个有限的支持范围。如需更多信息，请参阅 [RHEL
9 和 RHEL 8.6 及更新的 AppStream 软件仓库文档中的 Ansible Core
软件包的支持范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: itemizedlist
-   列出受管节点的清单文件。
:::
::: orderedlist
**流程**
1.  复制 SSH 服务器系统角色的示例 playbook：
    ``` screen
    # cp /usr/share/doc/rhel-system-roles/sshd/example-root-login-playbook.yml path/custom-playbook.yml
    ```
2.  使用文本编辑器打开复制的 playbook，例如：
    ``` screen
    # vim path/custom-playbook.yml
    ---
    - hosts: all
      tasks:
      - name: Configure sshd to prevent root and password login except from particular subnet
        include_role:
          name: rhel-system-roles.sshd
        vars:
          sshd:
            # root login and password login is enabled only from a particular subnet
            PermitRootLogin: no
            PasswordAuthentication: no
            Match:
            - Condition: "Address 192.0.2.0/24"
              PermitRootLogin: yes
              PasswordAuthentication: yes
    ```
    playbook 将受管节点配置为 SSH 服务器，以便：
    ::: itemizedlist
    -   禁用密码和 `root`{.literal} 用户登录
    -   只对子网 `192.0.2.0/24`{.literal} 启用密码和 `root`{.literal}
        用户登录
    :::
    您可以根据您的偏好修改变量。如需了解更多详细信息，请参阅 [SSH
    服务器系统角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/configuring-secure-communication-with-the-ssh-system-roles_securing-networks#sshd-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles){.link}。
3.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
4.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ...
    PLAY RECAP
    **************************************************
    localhost : ok=12 changed=2 unreachable=0 failed=0
    skipped=10 rescued=0 ignored=0
    ```
:::
::: orderedlist
**验证**
1.  登录到 SSH 服务器：
    ``` screen
    $ ssh user1@10.1.1.1
    ```
    其中：
    ::: itemizedlist
    -   `user1`{.literal} 是 SSH 服务器上的用户。
    -   `10.1.1.1`{.literal} 是 SSH 服务器的 IP 地址。
    :::
2.  检查 SSH 服务器上的 `sshd_config`{.literal} 文件的内容：
    ``` screen
    $ vim /etc/ssh/sshd_config
    # Ansible managed
    HostKey /etc/ssh/ssh_host_rsa_key
    HostKey /etc/ssh/ssh_host_ecdsa_key
    HostKey /etc/ssh/ssh_host_ed25519_key
    AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
    AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
    AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
    AcceptEnv XMODIFIERS
    AuthorizedKeysFile .ssh/authorized_keys
    ChallengeResponseAuthentication no
    GSSAPIAuthentication yes
    GSSAPICleanupCredentials no
    PasswordAuthentication no
    PermitRootLogin no
    PrintMotd no
    Subsystem sftp /usr/libexec/openssh/sftp-server
    SyslogFacility AUTHPRIV
    UsePAM yes
    X11Forwarding yes
    Match Address 192.0.2.0/24
      PasswordAuthentication yes
      PermitRootLogin yes
    ```
3.  检查您是否可以以 root 用户身份从 `192.0.2.0/24`{.literal}
    子网连接到服务器：
    ::: orderedlist
    1.  确定您的 IP 地址：
        ``` screen
        $ hostname -I
        192.0.2.1
        ```
        如果 IP 地址在 `192.0.2.1`{.literal} - `192.0.2.254`{.literal}
        范围内，您可以连接到服务器。
    2.  以 `root`{.literal} 用户身份连接到服务器：
        ``` screen
        $ ssh root@10.1.1.1
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/rhel-system-roles/sshd/README.md`{.literal} 文件。
-   `ansible-playbook(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#ref_ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSH 客户端系统角色变量 {.title}
:::
在 SSH 客户端系统角色 playbook 中，您可以根据您的首选项和限制定义客户端
SSH 配置文件的参数。
如果您没有配置这些变量，系统角色会生成与 RHEL 默认值匹配的全局
`ssh_config`{.literal} 文件。
在所有情况下，布尔值在 `ssh`{.literal} 配置中都正确地呈现为
`yes`{.literal} 或 `no`{.literal}。您可以使用 list
来定义多行配置项。例如：
``` screen
LocalForward:
  - 22 localhost:2222
  - 403 localhost:4003
```
呈现为：
``` screen
LocalForward 22 localhost:2222
LocalForward 403 localhost:4003
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
配置选项区分大小写。
:::
::: variablelist
**SSH 客户端系统角色的变量**
[`ssh_user`{.literal}]{.term}
:   您可以定义系统角色修改用户特定配置的现有用户名。用户特定配置保存在给定用户的
    `~/.ssh/config`{.literal} 中。默认值为
    null，它会修改所有用户的全局配置。
[`ssh_skip_defaults`{.literal}]{.term}
:   默认值为 `auto`{.literal}。如果设置为
    `auto`{.literal}，则系统角色将写入系统范围的配置文件
    `/etc/ssh/ssh_config`{.literal}，并在其中保留定义 RHEL
    的默认值。例如，通过定义 `ssh_drop_in_name`{.literal}
    变量来创建一个随时可访问的配置文件，将自动禁用
    `ssh_skip_defaults`{.literal} 变量。
[`ssh_drop_in_name`{.literal}]{.term}
:   定义 drop-in 配置文件的名称，该文件放在系统范围的 drop-in
    目录中。该名称在模板
    `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal}
    中使用，以引用要修改的配置文件。如果系统不支持 drop-in
    目录，则默认值为 null。如果系统支持 drop-in 目录，则默认值为
    `00-ansible`{.literal}。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    如果系统不支持 drop-in 目录，设置此选项将使 play 失败。
    :::
    建议的格式是 `NN-name`{.literal}，其中 `NN`{.literal}
    是用于订购配置文件的两位数字，`name`{.literal}
    是内容或文件所有者的任何描述性名称。
[`ssh`{.literal}]{.term}
:   包含配置选项和其相应值的字典。
[`ssh_OptionName`{.literal}]{.term}
:   您可以使用由 `ssh_`{.literal}
    前缀和选项名称而不是字典组成的简单变量来定义选项。简单的变量覆盖
    `ssh`{.literal} 字典中的值。
[`ssh_additional_packages`{.literal}]{.term}
:   此角色会自动安装 `openssh`{.literal} 和 `openssh-clients`{.literal}
    软件包，这是最常见用例所需要的。如果您需要安装其他软件包，例如
    `openssh-keysign`{.literal}
    以用于基于主机的身份验证，您可以在此变量中指定它们。
[`ssh_config_file`{.literal}]{.term}
:   角色保存产生的配置文件的路径。默认值：