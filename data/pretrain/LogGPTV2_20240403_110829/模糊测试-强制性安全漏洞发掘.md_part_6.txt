中，一般不推荐使用strcpy（）库函数，因为它缺少对目的缓冲区的边界检查。因此，如果程序
员不小心自己编写代码而增加了边界检查代码，便可能会发生缓冲区溢出，从而将数据置于目
的容器的边界之外。第一个代码例子不会发生缓呷区溢出，因为字符申“test”（包括后跟的
null终止标记）的长度总是固定值5，因此小于目标缓冲区的10字节。第二个例子中的场景中可
能会也可能不会发生缓冲区溢出，这要取决于用户在命令行中输入的参数数据长度。这里的关
键问题是用户是否能够控制输入给有可能发生漏洞的函数的参数长度。一次彻底的代码评审可
能会将strcpy（）所在的一行标记为“可能产生漏洞”。尽管如此，还是需要跟踪该函数的实际
输入参数，以理解可被人为利用的执行条件是否真正存在。这并不是说源代码评审对安全领域
的研究者不是一个有价值的技术工具。源代码评审应该在可获得代码的任何时候进行，然而，
是否要进行源代码评审取决于你的角色和观点，通常人们不需要在如此细节的层次上访问被测
对象。
人们经常不正确地认为白盒测试是比黑盒测试更有效的方法。对软件的何种审视能够比
访问源代码更好、更精确呢？不过无论如何都不要忘记，对源代码来说，你看到的东西并不
一定是实际执行的东西。软件构建过程在从源代码到汇编代码的转换中可能会发生很大的改
变。因为这个原因和其他的原因，不能说一种测试方法就一定比另一种测试方法更好，它们
仅仅是不同的方法，通常会揭示不同类型的漏洞。为了达到充分覆盖的目的，有必要结合多
种测试方法。
微软源代码泄露
为了说明源代码评审未必一定优于里金测试，让我们考虑和分析发生在2004年2月的一个
---
## Page 18
第1章安全漏洞发掘方法学
3
事件。在没有事先告戒的情况下，有传闻说MicrosoftWindowsNT4.0和Windows2000操作
系统提供的部分源代码文档被传播到互联网上。Microsoft后来确认这些文格是真实的操作系
统代码。许多公司当时感到极度紧张，因为这一泄露事件将导致上述两个操作系统版本产生
大量的安全漏洞。但是他们所担心的事情没有发生，事实上，直到今天，只有很少的安全漏
润被归因于当时的源代码泄露。其中的一个安全漏润是CVE-2004-0566，其具体细节是当操
作系统在处理位图文件时会产生一个整数值溢出。有趣的是，Microsoft否认这个安全漏洞
的发现，声称其所属的软件公司在一次内部审核中早已经发现了这个问题。为什么我们没
有发现大量的安全漏洞？不是说源代码评审可以发现一切吗？事实是源代码评审尽管是应用
程序或操作系统安全性审核的一个重要部分，但是由于代码的规模和复杂性，源代码评审难
以充分地进行。此外，反汇编分析技术也可以发现大部分源代码中的问题，例如，让我们考
察一下TinyKRNL和ReactOS项目，它们的日的都是为应用软件提供与MicrosoftWindows
内核及其操作系统的兼容性。这些项目的开发者并没有访问Microsoft的内核源代码，但是仍
然能够在一定程度上创建项目，提供一个兼客Windows的环境。在审核Windows操作系统时，
不大可能会直接访问Windows源码，相反，上述项目的源代码可以被作为解释Windows汇编
代码的指南。
1.1.2工具和自动化
源代码分析工具一般可以分为三类—编译时检查器、源代码浏览器或自动源代码审核工
具。编译时检查器在源代码编译时查找漏洞。此类工具通常与编译器集成在一起，但是主要查
找与安全性有关的问题而不是应用程序的功能问题。MicrosoftVisualC++的/analyze编译选项
是一个编译时检查器的例子。Microsoft还提供了PREfastforDrivers?，它能够检测针对驱动
程序开发的不同类型的漏洞，而编译器可能检测不到这些漏洞。
源代码浏览器是专门设计用于辅助人工检查和评审源代码的软件工具。这类工具允许评审
者执行代码的高级搜索，枚举代码，以及在代码的交叉引用位置之间进行导航。例如，一位评
审者可能会使用这样的工具来定位所有strcpy（）调用的位置，力图识别可能的缓冲区溢出漏洞。
Cscope和LinuxCross-Reference是当前流行的源代码浏览器。
源代码自动审核工具用于扫描源代码以及自动识别可能的关注区域。同大多数安全性工具
一样，源代码自动审核工具既有商业工具也有开源的自由软件解决方案。除此之外，此类工具
 http://archives.neohapsis.com/archives/fulldisclosure/2004-02/0806.html
http://news.zdnet.com/2100-1009_22-5160566.html
③http:www.tinykml.org
@http/www.reactos.org/
③htp/ww.microsoft.com/whdc/devtoostols/PREfast.mspx
xdsemzugy/m/snuauoosousjurzupsujda
http://cscope.sourceforge.net/
orsnxyd
---
## Page 19
第一部分背
景
倾向于关注具体的编程语言，因此如果目标软件使用了不同的编程语言的话，可能需要多种源
代码自动审核工具。在商业软件工具方面，有来自Fortify、Coverity、KlockWork、
GrammaTech和其他供应商的产品。一些流行的自由软件工具列于表1-1，其中包括它们审核
的语言以及支持的平台。
表1-1
源代码审核的自由软件工具
名称
语言
平台
下载
RATS (Rough Auditing
C.C++、Perl,
UNIX, Win32
http://www.fortifysoftware.com/security-resources/
Tool for Security)
PHP, Python
dss
ITS4
C,C++.
UNIX, Win32
http://ww.cigital.com/its4/
Splint
C
UNIX, Win32
http://elint.cs.virginia.edu/
Flawfinder
C.C++
UNIX
Jlint
Java.
UNIX,Win32
http:/lint.sourceforge.net/
CodeSpy
Java
Java
http://www.owasp.org/software/labs/codespy.html
重要的是要记住，没有任何自动化工具能够完全替代有经验的安全研究员的技能，它们只
不过是工具，能够将繁重的分析源代码的任务进行流水化和自动完成，有助于节省时间和解决
一些问题。这些工具生成的报告仍然必须由具备经验的分析员评审，以识别出伪问题，也需要
有开发人员的评审以实际修复问题。例如，下面的一段代码输出是由RoughAuditingToolfor
Security（RATS）自动生成的，被分析的代码是本章前面所举的存在安全漏洞隐患的程序示例。
分析结果可以表明这样一个事实：该段程序使用了固定长度缓冲区并且对strcpy（）的使用可能
是不安全的。但是，分析结果没有背定地说确实存在一个漏洞，只是提醒用户注意存在可能不
安全的代码区域，但是该区域是否真的不安全，则需要由他（她）决定。
Entries in per1 database:33
Entries in python database:62
Entries in c database: 334
Entries in php database:55
Analyzing userinput.c
userinput.c:4: High: fixed size 1oca1 buffer
Extra care should be taken to ensure that character arrays that are allocated on the
stack are used safely. They are prime targets for buffer overflow attacks.
userinput.c:5:High:strcpy
Check to be sure that argunent 2 passed to this function cal1 wi11 not copy nore data
than can be handled, resulting in a buffer overflow.
Tota1 1ines analyzed: 7
 http://www.fortifysoftware.com/
@http://www.coverity.com/
@http://www.klocwork.com/
@http://www.grammatech.com/
---
## Page 20
第1章安全漏洞发振方法学5
Tota1 time 0.000131 seconds
Entries in per1 database:33
53435 1ines per second
Entries in python database: 62
Entries in c database:334
Entries in php database: 55
Analyzing userinput.c
Extra care should be taken to ensure that character arrays that are allocated
userinput.c:4: High: fixed size 1oca1 buffer
on the stack are used safely.They are prine targets for buffer overflow
attacks.
Check to be sure that argument 2 passed to this function cal1 wi11 not copy
userinput.c:5:High: strcpy
more data than can be handled, resulting in a buffer overflow.
Total 1ines analyzed: 7
Tota1 time 0.000794 seconds
8816 1ines per second
1.1.3优点和缺点
如同前面提到的，发现安全漏润不存在唯一正确的方法学。那么如何选择一种合适的方法
学呢？当然，有时的决策是由我们自己确定的，例如，如果我们不能访问目标软件的源代码，
那么就不可能进行白盒测试。这对大部分安全研究者和用户都是一样的，尤其是那些购买了
Windows环境的商业软件的人，那么白盒测试有什么优点呢？
·我盖能力：由于白盒测试能够获得所有源代码，因此代码评审允许完全的覆盖。所有可
能的代码路径都可以被审核，以发现可能的漏洞。当然，这个过程也可能导致误报的出
现，因为一些代码路径可能在代码执行的时候不可达。
代码评审并不总是可行的。即使能够执行代码评审，也应该和其他漏洞发掘方法学结合使
用。源代码分析有下面一些缺点：
·复杂性：源代码分析工具是不完善的，有可能报告出伪问题。因此，这类工具产生的错
误报告并不是游戏的结束。这些结果必须经过有经验的程序员的评审，以识别出那些能
够合理代表安全性漏洞的问题。重要的软件项目典型地要包含数十万行代码，工具所产
生的报告可能相当长并且需要大量的时间阅读。
·可用性：由于白盒测试能够获得所有源代码，因此代码评审允许完全的覆盖。尽管许多
UNIX项目是开放源代码的，并且允许源代码被评审，但是这种情况在Win32环境下比较
罕见，对于商业软件这种情况则通常不存在。如果不能访问源代码，那么白盒测试则根
本不能作为一个测试选项。
1.2黑盒测试
黑盒测试意味着只能了解外部观察到的东西。作为终端用户，可以控制输入，从一个黑盒
子的一端提供输人，从盒子的另一端观察输出结果，但是并不知道被控目标的内部工作细节。
---
## Page 21
第一部分开
京
在远程访问Web应用和Web服务时这种情形最常见。我们可以采用超文本置标语言（HTML）
或可扩展置标语言（XML）请求的形式产生输人并观察生成的Web页面或返回值，但是并不知
道幕后发生了什么。
让我们考虑另一个例子。假设你在某个时候购买了一个应用软件，例如MicrosoftOffice，
通常你只能得到一个经过编译后得到的二进制程序，并不能得到用于构建这个应用程序的源代
码。在这种情况下，你的观点将决定测试方法的盒子的颜色。如果你不打算采用逆向工程技术，
那么黑盒测试是有效的。反之，就应该采用灰盒测试方法，灰盒测试将在下一节讨论。
1.2.1人工测试
仍然以Web应用为例，人工测试可能要包括使用一个标准的Web浏览器来浏览一个Web站
点的层次结构，同时长乏味地在所观察到的感兴趣的区域输入可能导致危险的各种输入数据。
在审核的最初阶段，这个技术可能只是被零星地应用，例如，通过给各种各样的参数增加引用，
以期望揭示出SQL注入漏洞。
在没有自动化工具辅助的情况下通过人工测试应用程序来查找漏洞，这通常并不是一个可
行的方法（除非公司雇佣了一大批实习生）。这种方法能够带来益处的场景是它被用于扫除
（sweeping）多个应用程序中类似的一个漏洞时。当多个程序员在不同的项目中犯了相同的错
误时，就需要利用这种扫除技术。例如，在一个专门的LDAP（LightweightDirectoryAccess
Protocol）服务器中发现了一个缓冲区溢出，并且通过测试其他LDAP服务器发现同样的安全漏
洞。如果我们假设程序之间经常共享代码或者同一个程序员参加过多个开发项目，那么这种情
况就并非不经常出现。
扫除技术
CreateProcess（）是Microsoft Windows应用程序编程接口（API）提供的一个函数。正如