## Page 817
//如果mid 较大，则左侧存在峰值，high=m，如果mid+1 较大，则右侧存在峰值，1ow
=mid+1
if A[mid] > A[mid+1] {
high = mid
}else{
1ow = mid + 1
3
return 1ow
853.CarFleet
题目
N cars are going to the same destination along a one lane road. The destination is target miles
away.
[]uoya,sod uogisod legui pue (anou aad saw ul) [tjpaads paads jueisuo e seu  je ypeg
miles towards the target along the road.
A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to
bumper at the same speed.
The dlistance between these two cars is ignored - they are assumed to have the same position.
A cor fleet is some non-empty set of cars driving at the same position and same speed. Note that
a single car is also a car fleet.
If a car catches up to a car fleet right at the destination point, it will still be considered as one car
fleet.
How many car fleets will arrive at the destination?
Example 1:
Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
output: 3
Explanation:
The cars starting at 10 and 8 become a fleet, meeting each other at 12.
The car starting at 0 doesn't catch up to any other car, so it is a fleet by
itself.
The cars starting at 5 and 3 become a fleet, meeting each other at 6.
Note that no other cars meet these fleets before the destination, so the
answer is 3.
Note:
1. 0  a[j].position
func carFleet(target int, position []int, speed []int) int {
---
## Page 819
n := len(position)
if n  lastTime {
lastTime = cars[i] .time
fleet++
return fleet
856.ScoreofParentheses
题目
Given a balanced parentheses string S, compute the score of the string based on the following
ani
() has score 1
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
Example 1:
Input: "()"
output: 1
Example 2:
Input: "()"
output: 2
Example 3:
---
## Page 820
Input: "O) ○)"
Output:2
Example 4:
((O)O)。:4nduI
output: 6
Note:
1. S is a balanced parentheses string, containing only ( and ).
2. 2 yl，且y2的时候取x还是
一样的，那么算距离的话，y2-x显然大于y1-×，这样的话肯定不会是最短的距离。
·从上面这两个常识来看，可以用双端队列deque来处理prefixSum。deque中存储的是递增的
x下标，为了满足常识一。从双端队列的开头开始遍历，假如区间和之差大于等于K，就移除队
首元素并更新结果res。队首移除元素，直到不满足prefixSum[i]-prefixSum[deque[0]]
>=K这一不等式，是为了满足常识二。之后的循环是此题的精髓，从双端队列的末尾开始往前遍
历，假如当前区间和prefixSum[i]小于等于队列末尾的区间和，则移除队列末尾元素。为什么
这样处理呢？因为若数组都是正数，那么长度越长，区间和一定越大，则prefixSum[i]一定大
于所有双端队列中的区间和，但由于可能存在负数，从而使得长度变长，区间总和反而减少了，之
前的区间和之差值都没有大于等于K（=K，如果找到了就更新答案
for len(deque) > 0 && prefixSum[i]-prefixSum[deque[o]] >= K {
length := i - deque[0]
if res > length {
res = 1ength
//找到第一个deque[0]能满足条件以后，就移除它，因为它是最短长度的子序列了
deque = deque[1:]
//下面这个循环希望能保证prefixSum[deque[i]]递增
for len(deque) > 0 && prefixSum[i] 0，则还需要在它的右子树中查找剩下的距离。如果是在右子树中
找到了target，反之同理。如果当前节点就是目标节点，那么就可以直接记录这个点。否则每次遍
历一个点，距离都减一。
代码
func distanceK(root *TreeNode, target *TreeNode, K int) []int {
visit := []int{}
findDistancek(root,target, K,&visit)
return visit
func findDistancek(root, target *TreeNode, K int, visit *[]int) int {
if root == nil {
return -1
if root == target {
findchild(root, K, visit)
return K - 1
leftDistance := findDistancek(root.Left, target, K, visit)
if 1eftDistance == 0 {
findchi1d(root, 1eftoistance, visit)
if leftDistance > 0 {
findchi1d(root.Right, 1eftDistance-1, visit)
return leftDistance - 1
rightDistance := findDistanceK(root.Right, target, K, visit)
if rightDistance == 0 {
findchild(root, rightDistance, visit)
if rightDistance > 0 {
findchild(root.Left, rightDistance-1, visit)
return rightDistance - 1
return -1
func findchild(root *TreeNode, K int, visit *[]int) {
if root == nil {
return
1
if K == 0 {
*visit = append(*visit, root.val)
}else {
findchi1d(root.Left, K-1, visit)
findchi1d(root.Right, K-1, visit)
---
## Page 826
864.ShortestPathtoGetAllKeys
题目
We are given a 2-dimensional grid . "." is an empty cell, *# is a wall, *e" is the starting
point, ("a", *b", ..) are keys, and ( "A", "B", .) are locks
We start at the starting point, and one move consists of walking one space in one of the 4
cardlinal directions. We cannot walk outside the grid, or walk into a wall. if we walk over a key, we
pick it up. We can't walk over a lock unless we have the corresponding key.
 y au jo laal aseaddn ao pue aeamo auo exa s aa g =>  =>  aos o
letters of the English alphabet in the grid. This means that there is exactly one key for each lock,
and one lock for each key; and also that the letters used to represent the keys and locks were
Return the lowest number of moves to acquire all keys. If it's impossible, return 1
Example 1:
Input: ["@.a.#","###.#","b.A.B"]
Output: 8
Example 2:
Input: ["@..aA","..B#.","....b"]
Output: 6
Note:
1. 1 <= grid.1ength <= 30
2. 1 <= grid[0].1ength <= 30
3.grid[i][j] contains only .*,'#, *@', 'a′-'f' and 'A'-'F'
4. The number of keys is in [1, 6]. Each key has a different letter and opens exactly one lock.
题目大意
给定一个二维网格grid。“"代表一个空房间，“#”代表一堵墙，“@"是起点，（"a"，"b"，….）代表钥
匙，（"A","B",….）代表锁。
我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行
走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无
法通过锁。
---
## Page 827
假设K为钥匙/锁的个数，且满足1<=K<=6，字母表中的前K个字母在网格中都有自己对应的一个小
写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙
和锁的字母互为大小写并按字母顺序排列。
返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回-1。
提示：
1. 1 <= grid.length <= 30
2. 1 <= grid[0].length <= 30
3.grid[j] 只含有",#,@，a'-f 以及‘A'-F
4.钥匙的数目范围是[1，6]，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。
解题思路
·给出一个地图，在图中有钥匙和锁，当锁在没有钥匙的时候不能通行，问从起点@开始，到最终
获得所有钥匙，最短需要走多少步。
·这一题可以用BFS来解答。由于钥匙的种类比较多，所以visited数组需要3个维度，一个是×坐
标，一个是y坐标，最后一个是当前获取钥匙的状态。每把钥匙都有获取了和没有获取两种状态，
题目中说最多有6把钥匙，那么排列组合最多是2^6=64种状态。用一个十进制数的二进制位来
压缩这些状态，二进制位分别来表示这些钥匙是否已经获取了。既然钥匙的状态可以压缩，其实x
和y的坐标也可以一并压缩到这个数中。BFS中存的数字是坐标+钥匙状态的状态。在BFS遍历
的过程中，用visited数组来过滤遍历过的情况，来保证走的路是最短的。其他的情况无非是判断
锁的状态，是否能通过，判断钥匙获取状态。
·这一题不知道是否能用DFS来解答。我实现了一版，但是在18/35这组caSe上超时了，具体
case 见测试文件第一个case。
代码
package leetcode
import（
"math"
"strings"
1
//解法一BFS，利用状态压缩来过滤筛选状态
func shortestPathAllkeys(grid []string)int{
if 1en(grid) == 0 {
return 0
3
board, visited, startx, starty, res, fullkeys := make([][]byte, len(grid)),