5.1.4 Review of payment application code prior to release to customers after any significant change, to identi-
fy any potential coding vulnerability.
Note: This requirement for code reviews applies to all payment application components (both internal and 
public-facing web applications), as part of the system development life cycle. Code reviews can be conducted 
by knowledgeable internal personnel or third parties.
20
METHODOLOGY
Code review is systematic examination of computer source code and reviews are done in various forms and 
can be accomplished in various stages of each organization S-SDLC. This book does not attempt to tell each 
organization how to implement code reviews in their organization but this section does go over in generic 
terms and methodology of doing code reviews from informal walkthroughs, formal inspections, or Tool-assist-
ed code reviews.
6.1 Factors to Consider when Developing a Code Review Process
When planning to execute a security code review, there are multiple factors to consider since every code 
review is unique to its context. In addition to the elements discussed in this section, one must consider any 
technical or business related factors (business decisions such as deadlines and resources) that impact the 
analysis as these factors and may ultimately decide the course of the code review and the most effective way 
to execute it.
Risks
It is impossible to secure everything at 100%, therefore it is essential to prioritize what features and components 
must be securely reviewed with a risk based approach. While this project highlights some of the vital areas of design 
security peer programmers should review all code being submitted to a repository, not all code will receive the atten-
tion and scrutiny of a secure code review.
Purpose & Context
Computer programs have different purposes and consequently the grade of security will vary depending on the 
functionality being implemented. A payment web application will have higher security standards than a promotion- 
al website. Stay reminded of what the business wants to protect. In the case of a payment application, data such as 
credit cards will have the highest priority however in the case of a promotional website, one of the most important 
things to protect would be the connection credentials to the web servers. This is another way to place context into a 
risk-based approach. Persons conducting the security review should be aware of these priorities.
Lines of Code
An indicator of the amount of work is the number of lines of code that must be reviewed. IDEs (Integrated De-
velopment Environments) such as Visual Studio or Eclipse contain features, which allows the amount of lines 
of code to be calculated, or in Unix/Linux there are simple tools like ‘wc’ that can count the lines. Programs 
written in object-oriented languages are divided into classes and each class is equivalent to a page of code. 
Generally line numbers help pinpoint the exact location of the code that must be corrected and is very useful 
when reviewing corrections done by a developer (such as the history in a code repository). The more lines of 
code a program contains, the greater the chances that errors are present in the code.
Programming language
Programs written in typed safe languages (such as C# or Java) are less vulnerable to certain security bugs 
such as buf- fer overflows than others like C and C++. When executing code review, the kind of language will 
determine the types of expected bugs. Typically software houses tend towards a few languages that their 
programmers are experienced in, however when a decision is made to create new code in a language new to 
the developer management must be aware of the increased risk of securely reviewing that code due to the 
lack of in-house experience. Throughout this guide, sections explain the most common issues surrounding 
the specific programming language code to be reviewed, use this as a reference to spot specific security issues 
in the code.
Methodology
21
Resources, Time & Deadlines
As ever, this is a fundamental factor. A proper code review for a complex program will take longer and it will 
need higher analysis skills than a simple one. The risks involved if resources are not properly provided are 
higher. Make sure that this is clearly assessed when executing a review.
6.2 Integrating Code Reviews in the S-SDLC
Code reviews exist in every formal Secure Software Development Lifecycle (S-SDLC), but code reviews also 
vary widely in their level of formality. To confuse the subject more, code reviews vary in purpose and in rela-
tion to what the code reviewer is looking for, be it security, compliance, programming style, etc. Throughout 
the S-SDLC (XP, Agile, RAD, BSIMM, CMMI, Microsoft ALM) there are points where an application security SME 
should to be involved. The idea of integrating secure code reviews into an S-SLDC may sound daunting as 
there is another layer of complexity or additional cost and time to an already over budget and time con-
strained project. However it is proven to be cost effective and provides an additional level of security that 
static analyzers cannot provide.  
In some industries the drive for secure enhancements to a company’s S-SDLC may not be driven purely by 
the desire to produce better code, these industries have regulations and laws that demand a level of due care 
when writing software (e.g. the governmental and financial industries) and the fines levelled at a company 
who has not attempted to secure their S-SDLC will be far greater than the costs of adding security into the 
development lifecycle.
When integrating secure code reviews into the S-SDLC the organization should create standards and policies 
that the secure code reviewer should adhere to. This will create the right importance of the task so it is not just 
looked at as a project task that just needs to be checked off. Project time also needs to be assigned to the task 
so there is enough time to complete the tasks (and for any remedial tasks that come out of the secure code 
review).  Standards also allow management and security experts (e.g. CISOs, security architects) to direct em-
ployees on what secure coding is to be adhered to, and allows the employees to refer to the (standard) when 
review arbitration is necessary.
Methodology
A standard report template will provide enough information to enable the code reviewer to clas-
sify and prioritize the software vulnerabilities based on the applications threat model. This report 
does not need to be pages in length, it can be document based or incorporated into many auto-
mated code review tools. A report should provide the following information:
• Date of review.
• Application name, code modules reviewed.
• Developers and code reviewer names.
• Task or feature name, (TFS, GIT, Subversion, trouble ticket, etc.).
Code Review Reports
22
Today most organizations have modified their S-SDLC process to add agile into their S-SDLC process. Because of this 
the organization is going to need to look at their own internal development practices to best determine where and 
how often secure code reviews need to happen. If the project is late and over budget then this increases the chance 
that a software fix could cause a secure vulnerability since now the emphasis is on getting the project to deployment 
quicker. Code reviews for code in production may find software vulnerabilities but understand that there is a race 
with hackers to find the bug and the vulnerable software will remain in production while the remedial fix is being 
worked on.
6.3 When to Code Review
Once an organization decides to include code reviews part of their internal code process. The next big question to 
ask is to determine what stages of the SDLC will the code be reviewed. This section talks about three possible ways to 
include code reviews. There are three stages be in the SDLC when code can be reviewed:
When code is about to be checked in (pre-commit)
The development organization can state in their process that all code has to be reviewed before the code can be 
submitted to the source code repository.  This has the disadvantage of slowing the check-in process down, as the 
review can take time, however it has many advantages in that below standard code is never placed in the code line, 
and management can be confident that (if processes are being followed) the submitted code is at the quality that 
has been stipulated.  
For example, processes may state that code to be submitted must include links to requirements and design docu-
mentation and necessary unit and automated tests. This way the reviewers will have context on the exact code mod-
ification being done (due to the documentation) and they will know how the developer has tested the code (due to 
the tests).  If the peer reviewers do not think the documentation is complete, or the tests are extensive enough, they 
can reject the review, not because of the code itself, but because the necessary docs or tests are not complete. In an 
environment using CI with automated tests running nightly, the development team as a whole will know the next 
day (following check-in) if the submitted code was of enough quality.  Also management know that once a bug or 
feature is checked in that the developer has finished their task, there’s no “I’ll finish those tests up next week” scenar-
ios which adds risk to the development task.
When code has just been checked into a code base (post-commit)
Here the developer submits their code change, and then uses the code repository change-lists to send the code 
diff for review.  This has the advantage of being faster for the developer as there’s no review gate to pass before they 
check-in their code.  The disadvantage is that, in practice, this method can lead to a lesser quality of code.  A develop-
Methodology
• A brief sentence(s) to classify and prioritize software vulnerability if any and what if any remedial 
tasks need to be accomplished or follow up is needed.
• Link to documents related to task/feature, including requirements, design, testing and threat 
modeling documents.
• Code Review checklist if used, or link to organization Code Review Checklist. (see Appendix A)
• Testing the developer has carried out on the code. Preferably the unit or automated tests them-
selves can be part of the review submission.
• If any tools such as FxCop, BinScope Binary Analyzer, etc. were used prior to code review.
23
er will be less inclined to fix smaller issues once the code has been checked in, usually with a mantra of “Well the code 
is in now, it’ll do.”.  There also a risk of timing, as other developers could write other code fixes into the same module 
before the review is done or changes and tests have been written, meaning the developer not only has to implement 
the code changes from the peer or security review, but they also have to do so in a way that does not break other 
subsequent changes.  Suddenly the developer has to re-test the subsequent fixes to ensure no regressions.
Some development organizations using the Agile methodology add a ‘security sprint’ into their processes. During the 
security sprint the code can be security reviewed, and have security specific test cases (written or automated) added.
When code audits are done
Some organizations have processes to review code at certain intervals (i.e. yearly) or when a vulnerable piece of 
code is suspected of being repeated throughout the code base.  Here static code analyzers, or simple string searches 
through the code (for specific vulnerability patterns) can speed up the process.  This review is not connected to the 
submission of a feature or bug fix, they are triggered by process considerations and are likely to involve the review of 
an entire application or code base rather than a review of a single submission.
6.4 Security Code Review for Agile and Waterfall Development
Today agile development is an umbrella term for a lot of practices that include programming, continuous inte-
gration, testing, project management, etc. There are many flavors of agile development, perhaps as many flavors 
as there are practitioners. Agile development is a heterogeneous reference framework where the development 
team can pick what practices they want to use. 
Agile has some practices that could affect how and when code is reviewed, for example agile tries to keep code 
review and testing as near as possible to the development phase. It is a common practice to define short devel-
opment cycles (a.k.a. Iterations or Sprints). At the end of each cycle, all the code should be production quality 
code. It can be incomplete, but it must add some value. That affects the review process, as reviewing should be 
continuous. From the point of view of secure coding review, it shouldn’t make a difference if the development 
Methodology
Some organizations assume secure code review can be a job for a security or risk-analysis team member.  How-
ever all developers need to understand the exposure points of their applications and what threats exist for their 
applications. 
Many companies have security teams that do not have members with coding backgrounds, which can make 
interactions with development teams challenging. Because of this development teams are usually skeptical of 
security input and guidance. Security teams are usually willing to slow things down to ensure confidentiality 
and integrity controls are in place while developers are face with pressure from business units they support to 
create and update code as quickly as possible. Unfortunately the more critical the application to operational or 
business needs, the more pressure to deploy the code to production.
It is best to weave secure code reviews into the SDLC processes so that development organizations do not see 
security as a hindrance, but as an assistance.  As mentioned previously, spreading secure coding SMEs through-
out an organization (satellites in BSIMM terminology) allows the secure code review tasks to scale and reach 
more development teams.  As the process grows, more of the developers gain awareness of secure coding issues 
(as they have reviews rejected on secure coding grounds) and the frequency of secure coding issues in code 
reviews should drop.
Who Should Perform Secure Code Reviews
24
organization uses agile or waterfall development practices.  Code review is aligned to the code submitted, not the 
order of feature development vs testing, or the time patterns assigned to the coding task.  In many organizations 
the line between waterfall and agile is becoming blurred, with traditional waterfall departments introducing the 
continuous integration (CI) aspects from agile, including nightly builds, automated testing, test driven develop-
ment, etc.
6.5 A Risk Based Approach to Code Review
A development house will have various degrees of code changes being reviewed, from simple one line bug fixes 
in backend scripts that run once a year, to large feature submissions in critical business logic. Typically the inten-
sity of the code review varies based on the perceived risk that the change presents.
In the end, the scale of the code review comes down to the management of resources (skilled persons, company 
time, machines, etc.). It would not be scalable to bring in multiple security experts for every code change occur-
ring on a product, the resources of those persons or those teams would not be large enough to handle every 
change. Therefore companies can make a call on which changes are important and need to be closely scruti-
nized, and which ones can be allowed through with minimal inspection. This will allow management to better 
size the development cycle, if a change is going to be done in an area which is high risk, management can know 
to set aside sufficient time for code review and ensure persons with relevant skills will be available. The process 
of deciding which changes need which level of code review is based on the risk level of the module the change 
is within.
If the review intensity of code changes is based on the risk level of the module being changed, who should 
decide the level of risk? Ultimately management is responsible for the output of a company, and thus they are 
responsible for the risk associated with products sold by the company. Therefore it is up to management (or per-
sons delegated by management) to create a reproducible measure or framework for deciding the risk associated 
with a code change. 
Decisions on the risk of a module or piece of code should be based on solid cost benefit analysis and it would be 
irresponsible to decide all modules are high risk. Therefore management should meet with persons who have 
an understanding of the code base and security issues faced by the products, and create a measure of risk for 
various ele-ments of code. Code could be split up into modules, directories, products, etc., each with a risk level 
associated with it.
Various methods exist in the realm of risk analysis to assign risk to entities, and many books have been dedicated 
to this type of discussion. The three main techniques for establishing risk are outlined in table 1 below.
Methodology
Technique
Method
Quantitative
Bring people together and establish a monetary value on the potential loss associated with the code. Gauge the likeli-
hood that the code could be compromised. Use dollar values produced from these calculations to determine the level 
of risk.
Qualitative
Delphi
Bring people together and discuss opinions on what level of loss is associated with the modules, and opinions on likeli-
hood of compromise. Qualitative does not attempt to nail down monetary associations with the loss, but tends towards 
the perception or opinion of associated losses.
Independently interview or question people on the losses and compromises of the modules, whilst letting them know 
the feedback will be anonymous. The impression here is that the people will give more honest answers to the questions 
and will not be swayed by other people’s arguments and answers.
Table 1: Options For Establishing Risk
25
Risk is chance of something bad happening and the damage that can be caused if it occurs. The criteria for decid-
ing the risk profile of different code modules will be up to the management team responsible for delivering the 
changes, examples are provided in table 2.
When levels of risk have been associated with products and modules, then the policies can be created deter-
mining what level of code review must be conducted. It could be that code changes in a level one risk module 
must be reviewed by 3 persons including a Security Architect, whereas changes in a level 4 risk module only 
need a quick one person peer review. 
Other options (or criteria) for riskier modules can include demands on automated testing or static analysis, e.g. 
code changes in high risk code must include 80% code coverage on static analysis tools, and sufficient auto-
mated tests to ensure no regressions occur. These criteria can be demanded and checked as part of the code 
review to ensure they are capable of testing the changed code.
Some companies logically split their code into differing repositories, with more sensitive code appearing in a 
repository with a limited subset of developers having access. If the code is split in this fashion, then it must be 
remembered that only developers with access to the riskier code should be able to conduct reviews of that 
code.
Risk analysis could also be used during the code review to decide how to react to a code change that introduc-
es risk into the product, as in table 3. In a typical risk analysis process, the team needs to decide whether to 
accept, transfer, avoid or reduce the risks. When it comes to code reviews it is not possible to transfer the risk 
as transferring risk normally means taking out insurance to cover the cost of exposure.
Methodology
Criteria
Explanation
Ease of exposure
Is the code change in a piece of code directly exposed to the internet? Does an insider use the interface directly?
Value of loss
Regulatory controls
How much could be lost if the module has a vulnerability introduced? Does the module contain some critical password 
hashing mechanism, or a simple change to HTML border on some internal test tool?
If a piece of code implements business logic associated with a standard that must be complied with, then these mod-
ules can be considered high risk as the penalties for non-conformity can be high.
Table 2: Common Criteria For Establishing The Risk Profile Of A Code Module
Risk Resolution
Explanation
Reduce
This is the typical resolution path. When a code reviewer finds that the code change introduces risk into an element of 
business logic (or simply a bug) the code will be changed to fix the bug or code in a way that reduces the risk.
Accept
When the code change introduces a risk in the code but there is no other way to implement the business logic, the code 
change can pass code review if the risk is considered acceptable. The risk and any workarounds or mitigating factors 
should be documented correctly so that it is not ignored. 
Table 3: Options For Handling Risks Identified In A Code Review
Avoid
When the code change introduces a risk that is too great to be accepted, and it is not possible to reduce the risk by imple-
menting a code change, then the team need to consider not performing the change. Ideally this decision should be reached 
before the code review stage, but it is entirely possible that factors can arise during code implementation that changes the 
understood risk profile of a code module and prompts management to reconsider if a change should go ahead.
26
6.6 Code Review Preparation 
A security review of the application should uncover common security bugs as well as the issues specific to business 
logic of the application.  In order to effectively review a body of code it is important that the reviewers understand 
the business purpose of the application and the critical business impacts. The reviewers should understand the attack 
surface, identify the different threat agents and their motivations, and how they could potentially attack the applica-
tion.
For the software developer whose code is being reviewed, performing code review can feel like an audit and devel-
opers may find it challenging to not take the feedback personally. A way to approach this is to create an atmosphere 
of collaboration be-tween the reviewer, the development team, the business representatives, and any other vested 
interests. Por-traying the image of an advisor and not a policeman is important to get co-operation from the devel-
opment team.
The extent to which information gathering occurs will depend on the size of the organization, the skill set of the re-
viewers, and the criticality/risk of the code being reviewed. A small change to the CSS file in a 20- person start-up will 
not result in a full threat model and a separate secure review team. At the same time a new single sign-on authentica-
tion module in a multi-billion dollar company will not be secure code reviewed by a person who once read an article 
on secure coding. Even within the same organization, high-risk modules or applications may get threat modeled, 
where the lower risk modules can be reviewed with a lesser emphasis on the reviewer understanding the security 
model of the module.
This section will present the basic items the reviewer (or review team) should attempt to understand about the ap-
plication subjected to a secure code review.  This can be used in smaller companies that don’t have the resources to 
create a full security baseline, or on low risk code within larger companies.  A later section goes into detail on threat 
modeling, which would be used by larger companies on their highest risk code bases.
In an ideal world the reviewer would be involved in the design phase of the application, but this is rarely the case. 
However regardless of the size of the code change, the engineer initiating the code review should direct reviewers 
to any relevant architecture or design documents. The easiest way to do this is to include a link to the documents (as-
suming they’re stored in an online document repository) in the initial e-mail, or in the code review tool.  The reviewer 
can then verify that the key risks have been properly addressed by security controls and that those controls are used 
in the right places.
To effectively conduct the review the reviewer should develop familiarity with the following aspects:
Application features and Business Rules
The reviewer should understand all the features currently provided by the application and capture all the business 
restrictions/rules related to them.  There is also a case for being mindful of potential future functionality that might be 
on the roadmap for an application, thereby future-proofing the security decisions made during current code reviews. 
What are the consequences of this system failing? Shall the enterprise be affected in any great way if the application 
cannot perform its functions as intended?
Context 
All security is in context of what we are trying to secure. Recommending military standard security mechanisms on 
an application that vends apples would be overkill and out of context. What type of data is being manipulated or 
processed, and what would the damage to the company be if this data was compromised? Context is the “Holy Grail” 
of secure code inspection and risk assessment.
Methodology
27
Sensitive Data
The reviewer should also make a note of the data entities like account numbers and passwords that are sensitive to 
the application. The categorizing the data entities based on their sensitivity will help the reviewer to determine the 
im-pact of any kind of data loss in the application.
User roles and access rights
It is important to understand the type of users allowed to access the application. Is it externally facing or internal to 
“trusted” users?  Generally an application that is accessible only for the internal users of an organization might be 
exposed to threats that are different than the one that is available for anyone on the Internet. Hence, knowing the 
users of the application and its deployed environment would allow the reviewer to realize the threat agents correctly. 
In addition to this, the different privileges levels present in the application must also be understood. It would help 
the reviewer to enumerate different security violations/privilege escalation attacks that can be applicable to the ap-
plication.
Application type
This refers to understanding whether the application is browser based application, a desktop based standalone ap-
plication, a web-service, a mobile applications or a hybrid application. Different type of application faces different 
kinds of security threats and understanding the type of the application would help the reviewer to look for specific 
security flaws, determine correct threats agents and highlight necessary controls suitable to the application.
Code
The language(s) used, the features and issues of that language from a security perspective. The issues a programmer 
needs to look out for and language best practices from a security and performance perspective.
Design
Generally web applications have a well-defined code layout if they are developed using MVC design principle. Appli-
cations can have their own custom design or they may use some well-known design frameworks like Struts/Spring 