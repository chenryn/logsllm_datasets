> Author：bit4@[勾陈安全实验室](http://www.polaris-lab.com/ "勾陈安全实验室")
## 前言
  * 听说你想用Ceye，而又怕认证？
  * 听说你想用CloudEye，而又没有注册码？
  * 听说你想用DNSlog，而又嫌太麻烦？
[burp_collaborator_http_api](https://github.com/bit4woo/burp_collaborator_http_api)是一个让你可以通过HTTP
API调用Burp
Suite的[Collaborator](https://portswigger.net/burp/help/collaborator)服务器的插件，让你分分钟用上Burp
Suite版本的DNSlog
## 部署说明
**方式一**
最简单的方式是运行Burp Suite
Pro并安装这个[插件](https://github.com/bit4woo/burp_collaborator_http_api/releases)
此方式使用的是Burp Suite官方的Collaborator服务器
**方式二**
自建Burp Collaborator服务器，这样就能做到完全独立自主了
参考官方文档：
GitHub上也有Docker版本的部署方法：
## 接口说明
生成Payload：
获取Payload的记录：
目前这个接口是原样返回，数据没有做处理，但足以判断命令是否执行成功。后续会优化
它可以接收的请求类型包括:
`HTTP\HTTPS\DNS\SMTP\SMTPS\FTP`；Demo版本暂不区分，后续有空会继续优化，提供特定类型的查询和数据提取。
## 接口调用示例
简单的Python调用示例：
    # !/usr/bin/env python
    # -*- coding:utf-8 -*-    __author__ = 'bit4'
    __github__ = 'https://github.com/bit4woo'
    import requests
    proxy = {"http": "http://127.0.0.1:8888", "https": "https://127.0.0.1:8888"}
    url = "http://127.0.0.1:8000/generatePayload"
    response = requests.get(url)
    payload = response.text
    print payload
    requests.get("http://{0}".format(payload))
    url = "http://127.0.0.1:8000/fetchFor?payload={0}".format(payload.split(".")[0])
    res = requests.get(url)
    print  res.content
## 尝试在无图形界面的Linux上运行
这部分还在研究中，如果你有好的方法，欢迎提交给我，谢谢！
最简单的部署一个Collaborator服务器的方式：
    sudo java -jar burp.jar --collaborator-server
启动Burp Suite Pro并安装指定插件，需要先在json中配置：
    java -jar burpsuite_pro_1.7.33.jar --user-config-file=collaborator_http_api.json
不启动图形界面：
    java -Djava.awt.headless=true -jar burpsuite_pro_1.7.33.jar --user-config-file=collaborator_http_api.json