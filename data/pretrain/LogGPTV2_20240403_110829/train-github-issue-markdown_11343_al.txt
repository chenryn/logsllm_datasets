### 编译错误和警告

在编译 LibTorch 1.4 示例项目时，遇到了以下链接错误（LNK2019 和 LNK2001）：

#### 链接错误（LNK2019）
1. **`torch::autograd::AutogradMeta` 构造函数未解析**
   - 错误代码：`__declspec(dllimport) public: __cdecl torch::autograd::AutogradMeta::AutogradMeta(struct c10::TensorImpl *,bool,struct torch::autograd::Edge)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`std::make_unique`

2. **`torch::autograd::AutogradMeta` 析构函数未解析**
   - 错误代码：`__declspec(dllimport) public: virtual __cdecl torch::autograd::AutogradMeta::~AutogradMeta(void)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::autograd::AutogradMeta::`scalar deleting destructor'`

3. **`torch::jit::tracer::getTracingState` 未解析**
   - 错误代码：`__declspec(dllimport) class std::shared_ptr const & __cdecl torch::jit::tracer::getTracingState(void)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::jit::tracer::isTracing`

4. **`torch::jit::tracer::setTracingState` 未解析**
   - 错误代码：`__declspec(dllimport) void __cdecl torch::jit::tracer::setTracingState(class std::shared_ptr)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::rand`

5. **`torch::jit::tracer::recordSourceLocation` 未解析**
   - 错误代码：`__declspec(dllimport) void __cdecl torch::jit::tracer::recordSourceLocation(struct torch::jit::Node *)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::rand`

6. **`torch::jit::tracer::addInputs` (多个重载) 未解析**
   - 错误代码：`__declspec(dllimport) void __cdecl torch::jit::tracer::addInputs(struct torch::jit::Node *,char const *,class c10::ArrayRef)` 和 `__declspec(dllimport) void __cdecl torch::jit::tracer::addInputs(struct torch::jit::Node *,char const *,struct c10::TensorOptions const &)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::rand`

7. **`torch::jit::tracer::addOutput` 未解析**
   - 错误代码：`__declspec(dllimport) void __cdecl torch::jit::tracer::addOutput(struct torch::jit::Node *,class at::Tensor const &)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::rand`

8. **`torch::jit::Node::insertBefore` 未解析**
   - 错误代码：`__declspec(dllimport) public: struct torch::jit::Node * __cdecl torch::jit::Node::insertBefore(struct torch::jit::Node *)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::jit::Graph::insertNode`

9. **`torch::jit::Node::inBlockList` 未解析**
   - 错误代码：`__declspec(dllimport) private: bool __cdecl torch::jit::Node::inBlockList(void)const`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
   - 函数引用：`torch::jit::Graph::insertNode`

10. **`torch::jit::Graph::create` 未解析**
    - 错误代码：`__declspec(dllimport) public: struct torch::jit::Node * __cdecl torch::jit::Graph::create(struct c10::Symbol,unsigned __int64)`
    - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`
    - 函数引用：`torch::rand`

#### 链接错误（LNK2001）
1. **`c10::Error` 构造函数未解析**
   - 错误代码：`public: __cdecl c10::Error::Error(class c10::Error const &)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

2. **`c10::ivalue::Future::FutureError` 构造函数未解析**
   - 错误代码：`public: __cdecl c10::ivalue::Future::FutureError::FutureError(struct c10::ivalue::Future::FutureError const &)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

3. **`c10::Error` 析构函数未解析**
   - 错误代码：`public: virtual __cdecl c10::Error::~Error(void)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

4. **`c10::ivalue::Future::FutureError` 析构函数未解析**
   - 错误代码：`public: virtual __cdecl c10::ivalue::Future::FutureError::~FutureError(void)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

5. **`torch::autograd::AutogradMeta::grad` 未解析**
   - 错误代码：`public: virtual class at::Tensor & __cdecl torch::autograd::AutogradMeta::grad(void)` 和 `public: virtual class at::Tensor const & __cdecl torch::autograd::AutogradMeta::grad(void)const`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

6. **`c10::intrusive_ptr_target::release_resources` 未解析**
   - 错误代码：`private: virtual void __cdecl c10::intrusive_ptr_target::release_resources(void)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

7. **`torch::autograd::AutogradMeta::requires_grad` 未解析**
   - 错误代码：`public: virtual bool __cdecl torch::autograd::AutogradMeta::requires_grad(void)const`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

8. **`torch::autograd::AutogradMeta::set_requires_grad` 未解析**
   - 错误代码：`public: virtual void __cdecl torch::autograd::AutogradMeta::set_requires_grad(bool,struct c10::TensorImpl *)`
   - 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\LibTorch-1.4-example\Source.obj`

#### 总结
- **总共有 68 个未解析的外部符号**。
- 文件路径：`C:\Users\XX\Documents\Visual Studio Proj\LibTorch-1.4-example\x64\Debug\LibTorch-1.4-example.exe`

### 使用 Nightly 版本编译时的错误和警告

#### 警告
1. **C4251** - `c10::InefficientStdFunctionContext::ptr_` 需要有 DLL 接口才能被客户端使用。
   - 文件路径：`c:\users\XX\documents\libtorch-nightly\include\c10\core\allocator.h`
   - 行号：183

2. **E1866** - 属性不适用于任何实体。
   - 文件路径：`C:\Users\XX\Documents\libtorch-nightly\include\c10\util\ArrayRef.h`
   - 行号：278

3. **C4275** - 非 DLL 接口类 `std::exception` 用作具有 DLL 接口的类 `c10::Error` 的基类。
   - 文件路径：`c:\users\XX\documents\libtorch-nightly\include\c10\util\exception.h`
   - 行号：28

4. **C4251** - `c10::Error::msg_stack_`、`c10::Error::backtrace_`、`c10::Error::msg_` 和 `c10::Error::msg_without_backtrace_` 需要有 DLL 接口才能被客户端使用。
   - 文件路径：`c:\users\XX\documents\libtorch-nightly\include\c10\util\exception.h`
   - 行号：29, 30, 35, 36

5. **C4251** - `c10::DataPtr::ptr_` 需要有 DLL 接口才能被客户端使用。
   - 文件路径：`c:\users\XX\documents\libtorch-nightly\include\c10\core\allocator.h`
   - 行号：21

#### 警告（类型转换）
1. **C4244** - `int` 转换为 `float` 可能会导致数据丢失。
   - 文件路径：`c:\users\XX\documents\libtorch-nightly\include\c10\util\half-inl.h`
   - 行号：172, 175, 178, 181, 185

### 解决建议
1. **检查 LibTorch 库文件**：确保所有必要的库文件已正确链接到项目中。可能需要手动添加缺失的库文件。
2. **配置项目属性**：检查项目的 C++ 编译器和链接器设置，确保它们与 LibTorch 库的要求一致。
3. **更新 LibTorch 版本**：考虑使用最新版本的 LibTorch，以避免已知的问题和兼容性问题。
4. **处理警告**：对于 C4251 和 C4275 警告，可以尝试将相关类标记为 `__declspec(dllexport)` 或 `__declspec(dllimport)`，具体取决于它们的使用方式。
5. **类型转换警告**：对于 C4244 警告，可以检查代码逻辑，确保类型转换不会导致数据丢失。

希望这些信息能帮助您解决问题。如果还有其他问题，请随时告知。