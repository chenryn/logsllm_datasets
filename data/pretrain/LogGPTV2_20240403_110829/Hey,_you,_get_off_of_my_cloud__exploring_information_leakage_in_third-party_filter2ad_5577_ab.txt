### Identifying and Exploiting Co-Residence in Cloud Environments

#### Introduction
In cloud environments, adversaries often aim to place a malicious virtual machine (VM) on the same physical host as a target VM. This co-residence can be exploited for various attacks. To achieve this, it is essential to identify the potential targets in the cloud and the instance creation parameters required to establish co-residence. This paper outlines methods to map the internal IP address space of Amazon EC2, infer the availability zones and instance types of public EC2 instances, and confirm successful co-residence.

#### Mapping the EC2 Internal Address Space
To map the EC2 internal address space, we start with the hypothesis that different availability zones and instance types are likely to correspond to different internal IP address ranges. By mapping these addresses, an adversary can determine which IP addresses correspond to specific creation parameters. Additionally, EC2's DNS service allows mapping public IP addresses to private IP addresses, enabling an adversary to infer the instance type and availability zone of a target service, thereby reducing the number of instances needed to achieve co-residence.

We evaluate this hypothesis using two datasets:
1. **Public EC2-based Web Servers**: We enumerate public EC2-based web servers using external probes and translate responsive public IPs to internal IPs via DNS queries within the cloud.
2. **Launched EC2 Instances**: We launch multiple EC2 instances of varying types and survey the resulting IP addresses assigned.

To leverage the second dataset, we present a heuristic algorithm that labels /24 prefixes with an estimate of the availability zone and instance type of the included internal IPs. The output is a map of the internal EC2 address space, allowing one to estimate the availability zone and instance type of any public EC2 server.

#### Surveying Public Servers on EC2
Using WHOIS queries, we identified four distinct IP address prefixes: /16, /17, /18, and /19, associated with EC2. We surveyed 57,344 IP addresses, performing TCP connect probes on port 80 and port 443. This resulted in 11,315 responsive IPs, with 9,558 responding to a follow-up wget on port 80. A TCP port 443 scan yielded 8,375 responsive IPs. We translated each public IP address that responded to either port 80 or port 443 into an internal EC2 address, resulting in a list of 14,054 unique internal IPs.

#### Instance Placement Parameters
EC2 has three availability zones and five instance types. While these parameters could be assigned independently, in practice, they show significant regularity. The internal IP address space is cleanly partitioned between availability zones, and instance types within these zones also exhibit regularity. Different accounts exhibit similar placement patterns.

To establish these facts, we iteratively launched 20 instances for each of the 15 availability zone/instance type pairs using a single account, "Account A." The top graph in Figure 1 shows the internal IP addresses assigned to each of the 300 instances, partitioned according to availability zone. The data supports the assessment that availability zones use separate physical infrastructure.

We also launched 100 instances (20 of each type) in Zone 3 from a second account, "Account B," 39 hours after terminating the Account A instances. The bottom graph in Figure 1 plots the Zone 3 instances from both accounts, using distinct labels for instance type. The results show that /24 prefixes rarely have IPs assigned to distinct instance types.

#### Heuristic Algorithm for Labeling /24 Prefixes
To fully leverage the sampling data, we derived heuristics to label /24 prefixes with both availability zone and instance type:
- All IPs from a /16 are from the same availability zone.
- A /24 inherits any included sampled instance type. If there are multiple instances with distinct types, the /24 is labeled with each distinct type.
- A /24 containing a Dom0 IP address only contains Dom0 IP addresses. We associate the /24 with the type of the Dom0’s associated instance.
- All /24s between two consecutive Dom0 /24s inherit the former’s associated type.

Applying these heuristics to 869 /24s, we assigned a unique zone and type to 723, a unique zone and two types to 23, and left 123 unlabeled due to lack of sampling data.

#### Preventing Cloud Cartography
Cloud providers have incentives to prevent cloud cartography, such as hiding their infrastructure and usage. Features of EC2, like static association of local IP addresses to availability zones and instance types, make cartography easier. Providers might inhibit this by isolating each account’s view of the internal IP address space, but this would only slow down our techniques. Other methods, such as ping timing measurements or traceroutes, could still be used to locate instances.

#### Determining Co-Residence
Given a set of targets, the EC2 map informs the choice of instance launch parameters to achieve co-residence. We describe several easy-to-implement co-residence checks:
1. **Matching Dom0 IP Address**
2. **Small Packet Round-Trip Times**
3. **Numerically Close Internal IP Addresses**

We verify the correctness of these checks using a hard-disk-based covert channel. In our experiment, we used three EC2 accounts: control, victim, and probe. We launched instances and determined the Dom0 IPs. For each pair of instances, if the Dom0 IPs matched, we performed packet RTT probes and sent a 5-bit message over the covert channel. The results showed a median RTT for co-resident instances significantly smaller than those to controls, confirming the effectiveness of the checks.

#### Discussion
Our experiment concluded with an effective false positive rate of zero for the Dom0 IP co-residence check. This method provides a reliable way to determine co-residence, enabling targeted attacks in cloud environments. Future work should focus on mitigating these vulnerabilities and enhancing the security of cloud infrastructures.