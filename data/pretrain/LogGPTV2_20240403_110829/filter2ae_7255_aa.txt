## 环境搭建
（1）制作qcow2虚拟机镜像
    创建qcow2硬盘文件：
    qemu-img create -f qcow2 ubuntu-server.qcow2 5G
    制作linux qcow2镜像：
    sudo kvm -m 1028 -cdrom /mnt/hgfs/Share/VM-study/ubuntu-18.04.5-live-server-amd64.iso -drive file=ubuntu-server.qcow2,if=virtio -net nic,model=virtio -net tap,script=no -boot d -vnc :0
    后续使用vnc-view连接 127.0.0.1:0 进行系统安装
（2）源码编译qemu
为了qemu启动能使用qxl-vga设备，需要提前安装spice，开启spice进行编译
a、安装spice依赖：
安装spice-protocol：
    wget https://spice-space.org/download/releases/spice-protocol-0.12.10.tar.bz2
    tar xvf spice-protocol-0.12.10.tar.bz2
    cd spice-protocol-0.12.10/
    ./configure 
    make
    sudo make install
安装celt：
    wget http://downloads.us.xiph.org/releases/celt/celt-0.5.1.3.tar.gz
    tar zxvf celt-0.5.1.3.tar.gz 
    cd celt-0.5.1.3/
     ./configure 
     make
     sudo make install
安装依赖：
    sudo apt install libjpeg-dev
    sudo apt-get install libsasl2-dev
安装spice-server
    wget https://spice-space.org/download/releases/spice-server/spice-0.12.7.tar.bz2
    tar xvf spice-0.12.7.tar.bz2
    cd spice-0.12.7/
    ./configure 
     make
     sudo make install
b、编译qemu源码
    git clone git://git.qemu-project.org/qemu.git
    cd qemu
    git checkout tags/v4.2.1
    mkdir -p bin/debug/naive
    cd bin/debug/naive
    ../../../configure --target-list=x86_64-softmmu --enable-debug --disable-werror --enable-spice
    make
编译出来qemu的路径为./qemu/bin/debug/naive/x86_64-softmmu/qemu-system-x86_64
c、制作usb设备：
    qemu-img create -f raw disk_01.img 32M
    mkfs.vfat disk_01.img
d、启动脚本
    /home/osboxes/study/vul/qemu-14364/src/qemu/bin/debug/naive/x86_64-softmmu/qemu-system-x86_64 \
        -machine q35 \
        -m 1G \
        -hda ubuntu-server.qcow2 \
        -device e1000,netdev=net0 \
        -netdev user,id=net0,hostfwd=tcp::5555-:22 \
        -enable-kvm \
        -usb \
        -drive if=none,format=raw,id=disk1,file=/home/osboxes/study/vul/qemu-14364/disk_01.img \
        -device usb-storage,drive=disk1 \
        -device qxl-vga \
e、调试断点（自选）
    b do_token_setup
    b do_token_in
    b do_token_out
    b ehci_opreg_write
    b usb_ehci_init
    b ehci_work_bh
## 漏洞分析
关键结构：
    struct USBDevice {
        DeviceState qdev;
        USBPort *port;
        char *port_path;
        char *serial;
        void *opaque;
        uint32_t flags;
        /* Actual connected speed */
        int speed;
        /* Supported speeds, not in info because it may be variable (hostdevs) */
        int speedmask;
        uint8_t addr;
        char product_desc[32];
        int auto_attach;
        bool attached;
        int32_t state;
        uint8_t setup_buf[8];
        uint8_t data_buf[4096]; setupbuf的内容用户可控，可赋值给s->setuplen最大 0xffdata_buf的大小为4096个字节。过大的s->setup_len
会进行返回，但s->setup_len已经被赋值了，该处的检查没有起到效果。
    static void do_token_setup(USBDevice *s, USBPacket *p)
    {
        int request, value, index;
        if (p->iov.size != 8) {
            p->status = USB_RET_STALL;
            return;
        }
        usb_packet_copy(p, s->setup_buf, p->iov.size);
        s->setup_index = 0;
        p->actual_length = 0;
        s->setup_len   = (s->setup_buf[7] setup_buf[6]; // setup_len > sizeof(s->data_buf)) {                  //  %zu)\n",
                    s->setup_len, sizeof(s->data_buf));
            p->status = USB_RET_STALL;
            return;
        }
        request = (s->setup_buf[0] setup_buf[1];
        value   = (s->setup_buf[3] setup_buf[2];
        index   = (s->setup_buf[5] setup_buf[4];
        if (s->setup_buf[0] & USB_DIR_IN) {
            usb_device_handle_control(s, p, request, value, index,
                                      s->setup_len, s->data_buf);
            if (p->status == USB_RET_ASYNC) {
                s->setup_state = SETUP_STATE_SETUP;
            }
            if (p->status != USB_RET_SUCCESS) {
                return;
            }
            if (p->actual_length setup_len) {
                s->setup_len = p->actual_length;
            }
            s->setup_state = SETUP_STATE_DATA;
        } else {
            if (s->setup_len == 0)
                s->setup_state = SETUP_STATE_ACK;
            else
                s->setup_state = SETUP_STATE_DATA;
        }
        p->actual_length = 8;
    }
之后在qemu-4.2.1\hw\usb\core.c：do_token_in 中【3】处使用s->setup_len 获得
len，而p->iov.size 也由用户可控，例如设置p->iov.size 大小为0x1f00，则len 最大为0x1f00，大于s->data_buf
的size：4096，所以会在【4】的复制操作造成越界访问。
    static void do_token_in(USBDevice *s, USBPacket *p)
    {
        int request, value, index;
        assert(p->ep->nr == 0);
        request = (s->setup_buf[0] setup_buf[1];
        value   = (s->setup_buf[3] setup_buf[2];
        index   = (s->setup_buf[5] setup_buf[4];
        switch(s->setup_state) {
        case SETUP_STATE_ACK:
            if (!(s->setup_buf[0] & USB_DIR_IN)) {
                usb_device_handle_control(s, p, request, value, index,
                                          s->setup_len, s->data_buf);
                if (p->status == USB_RET_ASYNC) {
                    return;
                }
                s->setup_state = SETUP_STATE_IDLE;
                p->actual_length = 0;
            }
            break;
        case SETUP_STATE_DATA:
            if (s->setup_buf[0] & USB_DIR_IN) {
                int len = s->setup_len - s->setup_index; //  p->iov.size) {
                    len = p->iov.size;
                }
                usb_packet_copy(p, s->data_buf + s->setup_index, len);// setup_index += len;
                if (s->setup_index >= s->setup_len) {
                    s->setup_state = SETUP_STATE_ACK;
                }
                return;
            }
            s->setup_state = SETUP_STATE_IDLE;
            p->status = USB_RET_STALL;
            break;
        default:
            p->status = USB_RET_STALL;
        }
    }
对于do_token_in中的usb_packet_copy 最终会调用到iov_from_buf， 将s->data_buf +
s->setup_index 复制到用户态空间，造成越界读。
    static inline size_t
    iov_from_buf(const struct iovec *iov, unsigned int iov_cnt,
                 size_t offset, const void *buf, size_t bytes)
    {
        if (__builtin_constant_p(bytes) && iov_cnt &&
            offset ep->nr == 0);
        switch(s->setup_state) {
        case SETUP_STATE_ACK:
            if (s->setup_buf[0] & USB_DIR_IN) {
                s->setup_state = SETUP_STATE_IDLE;
                /* transfer OK */
            } else {