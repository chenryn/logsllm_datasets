# Leave Me Alone: App-Level Protection Against Runtime Information Gathering on Android

**Authors:** Nan Zhang, Kan Yuan, Muhammad Naveed, Xiaoyong Zhou, and XiaoFeng Wang  
**Affiliations:**  
- **Indiana University, Bloomington** (Nan Zhang, Kan Yuan, Xiaoyong Zhou, XiaoFeng Wang)  
  Email: {nz3, kanyuan, zhou, xw7}@indiana.edu  
- **University of Illinois at Urbana-Champaign** (Muhammad Naveed)  
  Email: PI:EMAIL  
**Conference:** 2015 IEEE Symposium on Security and Privacy  
**DOI:** 10.1109/SP.2015.61

## Abstract
The theft of sensitive information from mobile applications is a critical threat to Android security. Recent studies have shown that even apps without explicit implementation flaws can be compromised through the exploitation of design weaknesses in the operating system, such as shared communication channels (e.g., Bluetooth) and side channels (e.g., memory and network data usage). In these attacks, a malicious app runs alongside the target app to collect its runtime information. For example, a malicious app can record phone conversations or infer a user's medical condition by monitoring WebMD’s data usage.

This runtime-information-gathering (RIG) threat is both realistic and serious, as demonstrated by prior research and our new findings. We found that malware targeting popular Android-based home security systems can determine when a house is unoccupied and when the user is not monitoring surveillance cameras, and can even disable alarm notifications.

To defend against this new category of attacks, we propose a novel technique called **App Guardian**. This approach does not require modifications to the operating system or the target apps and provides immediate protection upon installation. App Guardian thwarts a malicious app’s runtime monitoring attempts by pausing all suspicious background processes when the target app (called the principal) is running in the foreground, and resuming them after the app stops and its runtime environment is cleaned up. Our technique leverages a unique feature of Android, where third-party apps running in the background are often considered disposable and can be stopped with minimal performance and utility impact. We further limit this impact by focusing on a small set of suspicious background apps, identified by their behaviors inferred from side channels (e.g., thread names, CPU scheduling, and kernel time).

Our experimental studies show that App Guardian successfully defeated all known RIG attacks, with minimal impacts on the utility of legitimate apps and the performance of the OS. The underlying idea of our approach, including app-level protection, side-channel-based defense, and lightweight response, not only significantly raises the bar for RIG attacks but also inspires future research on deployable detection systems in the fragmented Android ecosystem.

## 1. Introduction
The popularity of Android devices has led to a vibrant app market, with new apps continuously emerging to provide a wide range of services, from news and entertainment to banking, healthcare, and home security. These apps often carry sensitive personal information, such as bank account details, medical records, and financial data, which must be protected from unauthorized access by other apps running on the same device.

The Android security model aims to protect each app within its application sandbox using a unique Linux user ID. However, despite these protections, sensitive user data can still be disclosed to malicious apps through shared communication channels (e.g., audio, Bluetooth) or public resources (e.g., memory, CPU usage). Such runtime information gathering (RIG) is one of the most serious threats to Android users' privacy, as extensively reported in prior studies [1]–[7].

### 1.1. Runtime Information Gathering
RIG refers to any malicious activities that involve collecting data produced or received by an app during its execution, with the intent to directly steal or indirectly infer sensitive user information. These attacks can occur through the abuse of permissions acquired by the malicious app, such as unauthorized recording of phone conversations, or through the analysis of side-channel information, such as CPU, memory, and mobile-data usage [1], [5]. For example, apps with the RECORD_AUDIO permission can selectively extract confidential data (e.g., credit card numbers) and stealthily deliver it to an adversary [3]. Additionally, the official app of an external medical device, such as a blood glucose meter, can be monitored to collect patient data through the Bluetooth channel before the official app establishes a connection with the device [6].

Even apps that do not request any permissions can still obtain highly-sensitive user information from various side channels, highlighting the fundamental weakness of mobile devices in separating an app’s operations from its data. Examples include web content detected through browser memory footprints [5], keystrokes logged using the phone’s accelerometer [4], and the inference of a user’s identity, disease, and financial information from different apps’ mobile-data usage [1].

### 1.2. Implications for Android IoT
We further investigated the implications of RIG threats on Android-controlled Internet of Things (IoT) systems, which are increasingly used for smart homes, automobile control, and home security. Our preliminary study focused on two popular home-security IoT systems: Belkin NetCam Wi-Fi Camera with Night Vision [13] and Nest Protect [9]. We found that both systems are vulnerable to RIG threats. For example, a malicious app without permission can determine when no one is at home and when the user is not monitoring the surveillance video. It can also detect when the camera’s motion sensor captures the presence of a stranger and is sending an alarm message to the user’s phone, allowing the malware to turn off the phone’s speaker and make the alarm go unnoticed. This enables a potential intruder to break into a home undetected, even when the home is protected by a security system. A demo of this attack is available online [15].

### 1.3. Challenges
Conventional solutions to RIG threats typically involve modifying either the Android OS or the apps under threat. Enhancing Android’s access control mechanism to prevent information leaks during security-critical operations, such as phone calls, and removing public resources that could be used for side-channel analysis, can make the system less usable and cause compatibility issues. Moreover, due to the fragmentation of the Android ecosystem, deploying OS-level solutions is complex and time-consuming. Even if manufacturers are willing to build protection into new products, the slow pace of Android device upgrades means that new protections may take a long time to reach a significant portion of the 1 billion Android devices worldwide.

On the other hand, new RIG attacks continue to emerge, making effective mitigation an urgent need. Pushing the problem to app developers is not a viable solution, as it is unclear what an app can do by itself to control the information exposed by the OS. For example, an app cannot disable the recording activity of another app, and adding noise to an app’s CPU, memory, and data statistics may not eliminate side-channel leaks and can increase performance overhead.

### 1.4. App Guardian
In our research, we developed a novel application-level defense against RIG threats, called **App Guardian**. This is an ordinary app that can be installed on any Android device to provide immediate protection for security-critical apps. App Guardian pauses all background apps capable of causing damage to the protected app (called the principal) when it is running in the foreground, and resumes them after the principal finishes its tasks and its data has been sanitized. Without access to the principal’s runtime information, a RIG attempt cannot succeed.

On an unrooted phone, the pause/resume operations are performed by closing and later restarting suspicious apps using relevant dangerous-level permissions. Due to the unique feature of the Android OS, which allows third-party apps running in the background to be terminated when memory is low, this approach has a limited impact on legitimate operations. The impact is further minimized by strategically selecting a small set of suspicious apps based on their observable features. App Guardian is designed to determine the right moments to start and end the protection procedure and effectively protect itself against malicious apps.

A key feature of App Guardian is its strategy for identifying suspicious apps. This is done by inspecting individual apps’ permissions and behaviors. Since non-system apps like App Guardian cannot see the system-call level activities of other apps, we developed a new technique that leverages side-channel information, such as the name of a service thread, a thread’s scheduling status, and the amount of kernel time it consumes. For example, an untrusted app can be caught attempting to record a phone conversation if App Guardian observes that the Audio service process spawns a new thread called AudioIn_X (indicating a recording activity) and the suspicious app (with the RECORD_AUDIO permission) utilizes CPU. A third-party background process unrelated to the principal could also look risky if it frequently uses CPU, as the cycles could be spent on RIG. Using such side-channel information, App Guardian carefully chooses the targets to close, minimizing the utility and performance impacts without compromising security.

We implemented App Guardian and evaluated its effectiveness over 475 popular apps in 27 categories on Google Play. Our study shows that only 1.68% of the popular apps with perceptible impacts on user experience needed to be closed when running in the background, and all of them could be swiftly restored without losing their runtime states. Our evaluation demonstrates that App Guardian defeated all known RIG attacks, including audio recording, Bluetooth misbonding, side-channel attacks on high-profile apps, and the new IoT attacks we discovered, with a performance cost as low as 5% of CPU time and 40 MB of memory.

### 1.5. Contributions
The key contributions of our paper are:
- **New Understanding of RIG Threats:** We investigated RIG threats to Android-controlled IoT systems, revealing serious side-channel leaks from popular IoT systems.
- **Novel Application-Level Defense:** We developed a new application-level defense, App Guardian, which can be easily distributed to a large number of Android devices to provide immediate protection.
- **Side-Channel Based Detection and Lightweight Response:** We are the first to leverage side channels to detect and respond to side-channel attacks and other malicious activities on mobile devices. This approach minimizes the cost of false alarms and can inspire future research on app-level intrusion detection.
- **Implementation and Evaluation:** We implemented and tested App Guardian on 475 popular apps, demonstrating its efficacy.

### 1.6. Roadmap
The rest of the paper is organized as follows:
- **Section 2:** Introduces the RIG threat to mobile devices and elaborates on our new study on its implications to Android IoT.
- **Section 3:** Describes the design and implementation of App Guardian.
- **Section 4:** Reports our evaluation study of the new technique.
- **Section 5:** Discusses the limitations of our current approach and potential future research.
- **Section 6:** Reviews related prior work.
- **Section 7:** Concludes the paper.

## 2. Menace of Runtime Information Gathering
Runtime information gathering poses a serious threat to Android users' privacy. In this section, we introduce background information about Android security and prior studies on this problem. We then report our preliminary investigation on two popular Android home security systems, whose sensitive information (e.g., whether a house is empty) can be recovered by RIG attacks.

### 2.1. Background and Prior Findings
The Android security model is characterized by its unique application sandbox, built on top of Linux’s kernel-level protection (e.g., process separation, file system access control). Each app is assigned a unique Linux user ID (UID), which separates it from other apps. As a result, except for a set of shared resources and runtime statistics made public by the OS (e.g., virtual files under the process file system (proc)), an app is isolated from others. Despite these protections, RIG attacks can still exploit shared communication channels and side channels to gather sensitive information.