title:Leave Me Alone: App-Level Protection against Runtime Information Gathering
on Android
author:Nan Zhang and
Kan Yuan and
Muhammad Naveed and
Xiao-yong Zhou and
XiaoFeng Wang
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Leave Me Alone: App-level Protection Against
Runtime Information Gathering on Android
Nan Zhang∗, Kan Yuan∗, Muhammad Naveed†, Xiaoyong Zhou∗ and XiaoFeng Wang∗
∗Indiana University, Bloomington
Email: {nz3, kanyuan, zhou, xw7}@indiana.edu
†University of Illinois at Urbana-Champaign
Email: PI:EMAIL
Abstract—Stealing of sensitive information from apps is al-
ways considered to be one of the most critical threats to Android
security. Recent studies show that this can happen even to the
apps without explicit implementation ﬂaws, through exploiting
some design weaknesses of the operating system, e.g., shared
communication channels such as Bluetooth, and side channels
such as memory and network-data usages. In all these attacks,
a malicious app needs to run side-by-side with the target app
(the victim) to collect its runtime information. Examples include
recording phone conversations from the phone app, gathering
WebMD’s data usages to infer the disease condition the user
looks at, etc. This runtime-information-gathering (RIG) threat is
realistic and serious, as demonstrated by prior research and our
new ﬁndings, which reveal that the malware monitoring popular
Android-based home security systems can ﬁgure out when the
house is empty and the user is not looking at surveillance cameras,
and even turn off the alarm delivered to her phone.
To defend against this new category of attacks, we propose
a novel technique that changes neither the operating system nor
the target apps, and provides immediate protection as soon as
an ordinary app (with only normal and dangerous permissions)
is installed. This new approach, called App Guardian, thwarts
a malicious app’s runtime monitoring attempt by pausing all
suspicious background processes when the target app (called
principal) is running in the foreground, and resuming them after
the app stops and its runtime environment is cleaned up. Our
technique leverages a unique feature of Android, on which third-
party apps running in the background are often considered to
be disposable and can be stopped anytime with only a minor
performance and utility implication. We further limit such an
impact by only focusing on a small set of suspicious background
apps, which are identiﬁed by their behaviors inferred from their
side channels (e.g., thread names, CPU scheduling and kernel
time). App Guardian is also carefully designed to choose the
right moments to start and end the protection procedure, and
effectively protect itself against malicious apps. Our experimental
studies show that this new technique defeated all known RIG
attacks, with small impacts on the utility of legitimate apps and
the performance of the OS. Most importantly, the idea underlying
our approach, including app-level protection, side-channel based
defense and lightweight response, not only signiﬁcantly raises the
bar for the RIG attacks and the research on this subject but
can also inspire the follow-up effort on new detection systems
practically deployable in the fragmented Android ecosystem.
I.
INTRODUCTION
The popularity of Android devices comes with a vibrant
application (app in short) market. New apps continue to
emerge, providing services ranging from news, weather, and
entertainment to such serious businesses as banking, medical,
ﬁnance, and even home security. Apps for these businesses
carry sensitive personal information (e.g., bank account details,
diseases and medicines, investment secret, etc.) that needs to
be protected from unauthorized programs running on the same
device. Serving this purpose is the Android security model that
conﬁnes each app within its application sandbox using a unique
Linux user ID to prevent it from accessing other apps’ data. In
spite of the protection in place, through shared communication
channels (e.g., audio, Bluetooth) or public resources (e.g.,
memory, CPU usage), sensitive user data could still be disclosed
to the malicious app that continuously monitors the victim
app’s activities and collects its runtime information from those
sources. Such runtime information gathering is known to be
one of the most serious threats to Android users’ privacy, as
extensively reported by prior studies [1]–[7].
Runtime information gathering. More speciﬁcally, “runtime
information gathering” (RIG) here refers to any malicious
activities that involve collecting the data produced or received
by an app during its execution, in an attempt to directly
steal or indirectly infer sensitive user information. Such an
attack can happen by abusing the permission the malicious
app acquired from the user, e.g., unauthorized recording of the
user’s phone conversation, or through analyzing a set of side-
channel information disclosed by the app, e.g., its CPU, memory
and mobile-data usages [1], [5]. For example, prior research
shows that apps with the RECORD_AUDIO permission are
capable of selectively extracting conﬁdential data (e.g., credit
card number) and stealthily delivering it to the adversary [3].
Also, the ofﬁcial app of an external medical device, such as a
blood glucose meter, can be monitored for collecting patient
data from the device through the Bluetooth channel, before
the ofﬁcial app is able to establish its connection with the
device [6]. Particularly concerning here is that even the app
not asking for any permission can still obtain highly-sensitive
user information from a variety of side channels, demonstrating
the fundamental weakness of mobile devices in separating an
app’s operations from its data. Examples include web content
detected through analyzing the browser’s memory footprints [5],
key strokes logged using the phone’s accelerometer [4] and
the mobile user’s identity, disease and ﬁnancial information
inferred from different apps’ mobile-data usages [1].
In addition to those known instances of the RIG threat, we
further looked into its implication to Android controlled Internet
of Things (IoT), which are emerging systems increasingly used
for smart home [8], [9], automobile control [10], [11], home
security [12], etc. The ﬁrst step we took includes an analysis of
© 2015, Nan Zhang. Under license to IEEE.
© 2015, Nan Zhang. Under license to IEEE.
DOI 10.1109/SP.2015.61
DOI 10.1109/SP.2015.61
914
915
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
two highly popular home-security IoT systems, Belkin NetCam
Wi-Fi Camera with Night Vision [13] and Nest Protect [9],
both of which have been extensively used [14]. Our preliminary
study shows that they are all vulnerable to the RIG threat. For
example, we found that through the ofﬁcial app of NetCam, a
malicious app without permission can ﬁnd out when no one is
at home and the phone user is not looking at the surveillance
video (through the ofﬁcial app on her phone); also it knows
when the camera’s motion sensor captures the presence of
a stranger at home and is sending an alarm message to the
user’s phone, which enables the malware to turn off the phone’s
speaker, making the alarm go unnoticed. This actually helps a
robber break into one’s home without being discovered, even
when the home is protected by such a security system. A demo
of the attack is posted online [15]. These ﬁndings, together
with what are reported in the prior research, point to the urgent
need to mitigate the RIG threat to mobile devices.
Challenges. Conventional solutions to the problem rely on
modifying either the Android OS or the apps under the
threat. Speciﬁcally, one can enhance Android’s access control
mechanism to prevent information leaks during security-critical
operations such as phone calls, and remove the public resources
that could be used for a side-channel analysis. This, however,
inevitably makes the system less usable and causes compatibility
issues for the apps that already utilize the public resources
for legitimate purposes (mobile-data monitor [16]). Most
importantly, due to the fragmentation of the Android ecosystem,
deployment of any OS-level solution is often complicated and
painful: whenever Google comes up with a patch, individual
device manufacturers need to customize it for all their devices
before passing its variations to the carriers, who will ultimately
decide whether to release them and when to do that. Even
in the case that the manufacturers are willing to build the
protection into their new products, given the slow pace with
which Android devices are upgraded, it is almost certain that
the new protection will take a long time before it can reach any
signiﬁcant portion of the 1 billion Android devices worldwide.
On the other hand, new RIG attacks continue to be brought to
the spotlight [2], [4], [5], [7], [17]–[19], effective mitigation
is therefore in an urgent need for safeguarding Android users’
private information. Furthermore, pushing the problem to the
app developers is by no means a good idea, as it is less clear
what an app can do by itself to control its information exposed
by the OS: for example, it cannot disable the recording activity
of another app; also adding noise to an app’s CPU, memory
and data statistics may not eliminate the side-channel leaks and
certainly increases its performance overhead.
App Guardian. In our research, we found that the RIG attacks
can be defeated on the application level, without touching the
OS or the apps under protection at all. What we come up with is
just an ordinary app, called App Guardian or simply Guardian,
that can be posted on the Google Play store and installed by
any Android user on her device to acquire immediate protection
of her security-critical apps. This is achieved, in a nutshell, by
pausing all background apps capable of causing damage to the
information assets of the protected app (called principal in our
research) when it is running in the foreground, and resuming
those apps (as they might not be actually malicious) after the
principal ﬁnishes its tasks and its data (e.g., process ﬁles and
caches) has been sanitized. Without access to the principal’s
runtime information, a RIG attempt (no matter what channel it
is aimed at) can no longer be successful.
More speciﬁcally, on an unrooted phone, the pause/resume
operations are performed through closing suspicious apps
and later restarting them, using the relevant dangerous level
permission. Due to the unique feature of the Android OS, which
allows most third-party apps running in the background to be
terminated when the memory runs low and also provides the
mechanism to preserve their states, this approach has only
a limited impact on those apps’ legitimate operations. The
impact becomes even less signiﬁcant with a strategic selection
of only a small set of suspicious apps to stop, based upon
their observable features. Our Guardian app has been carefully
designed to determine when to put the protection in place and
when to lift it, after properly cleansing the principal’s public
resources of sensitive data. Most importantly, it has been built
to protect itself against the attacks from malicious apps and
defeat different tricks (such as collusion) they play.
A unique feature of Guardian is its strategy to identify
suspicious apps. This is done by inspecting individual apps’
permissions and behaviors. Note that ﬁnding such behaviors is
nontrivial for a non-system app like Guardian, since it cannot
see the system-call level activities of other apps. In our research,
we developed a new technique that leverages an app’s side-
channel information to infer its activities. Such information
includes a set of public data, such as the name of a service
thread, a thread’s scheduling status and the amount of kernel
time it consumes. For example, an untrusted app can get caught
when it is trying to record a phone conversation, once Guardian
observes that the Audio service process spawns a new thread
called AudioIn_X (indicating a recording activity) and the
suspicious app (with the RECORD_AUDIO permission) utilizes
CPU. Also, a third-party background process, unrelated to the
principal, could look risky to the principal if it is frequently
scheduled to use CPU, as the CPU cycles here could be
spent on RIG. Using such side-channel information, Guardian
carefully chooses the targets to close, to minimize the utility
and performance impacts of the operation without undermining
the security protection.
We implemented App Guardian and evaluated its utility
over 475 most popular apps in 27 categories on Google Play.
We found that under the strategy for selecting suspicious
processes, only 1.68% of the popular apps with perceptible
impacts on user experience needed to be closed when they
were running in the background and all of them could be
swiftly restored without losing their runtime states. Our study
further shows that the new technique defeated all known RIG
attacks, including audio recording, Bluetooth misbonding [6],
a series of side-channel attacks on high-proﬁle apps [1], [4],
[5], [20], the recently proposed user-interface inference [2] and
voice eavesdropping [7], together with the new IoT attacks we
discovered, at a performance cost as low as 5% of CPU time
and 40 MB memory.
Contributions. The scientiﬁc contributions of the paper are
outlined as follows:
• New understanding of the RIG threat. We investigated the RIG
threat to Android-controlled IoT systems, which reveals serious
side-channel leaks from popular IoT systems (e.g., disclosing
when one’s home is empty).
• New protection and new bar for the RIG research. We
915916
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
developed a novel application-level defense against the RIG
threat, which has been built into an ordinary app and can
therefore be easily distributed to a large number of Android
devices to provide immediate protection. More importantly,
given its promise of a real-world deployment and the tech-
nique’s effectiveness against the known attacks, not only does
our approach make real-world RIG exploits more difﬁcult to
succeed, but it has also noticeably raised the bar for the scientiﬁc
research in this active area [2], [4], [5], [7], [17]–[19]: now
new attacks discovered will be put to the test of our defense, to
make the case that they indeed pose a realistic threat. This will
certainly move the security research in this domain forward.
• Novel side-channel based detection and lightweight response.
Up to our knowledge, we are the ﬁrst party that leverages side
channels to detect side-channel attacks and other malicious
activities on mobile devices. Our unique observation is that on
these devices, a malicious app needs to aggressively utilize CPU
and other computing resources to gather useful information
from a target app during its runtime. Such behavior can actually
be observed from the attacker’s own side channels, allowing
a third-party detection system to discover the attack without
access to system-level information (e.g., the attacker’s API
calls). This effort is further supported by a lightweight response
to the suspicious activities identiﬁed, which just temporarily
suspends a suspicious app’s operation when important things
are happening, and resumes it later. The cost for a false alarm
is therefore minimized. Such an idea could ﬁnd its way to
apply to other security domains, inspiring follow-up research
on app-level intrusion detection on mobile systems.
• Implementation and evaluation. We implemented our design
and tested it on 475 popular apps. Our evaluation demonstrates
the efﬁcacy of our new technique.
Roadmap. The rest of the paper is organized as follows:
Section II introduces the RIG threat to mobile devices and
elaborates our new study on its implications to Android IoT;
Section III describes our design and implementation of App
Guardian; Section IV reports our evaluation study on the new
technique; Section V discusses the limitations of our current
approach and potential future research; Section VI reviews
related prior work and Section VII concludes the paper.
II. MENACE OF RUNTIME INFORMATION GATHERING
As discussed before, runtime information gathering poses
a serious threat to Android user’s privacy. In this section, we
introduce background information about Android security and
prior studies on this problem. Then, we report our preliminary
investigation on two popular Android home security systems,
whose sensitive information (e.g., whether a house is empty)
can be recovered by RIG attacks.
A. Background and Prior Findings
Following we describe how Android protects its apps, and
why such protection is insufﬁcient to stop RIG attacks.
Android security and RIG. Android security model is char-
acterized by its unique application sandbox, which has been
built on top of Linux’s kernel-level protection (e.g., process
separation, ﬁle system access control). Speciﬁcally, each app
is assigned a unique Linux user ID (UID), which separates
it from other apps. As a result, except for a set of shared
resources the app utilizes and its runtime statistics made public
by the OS, e.g., virtual ﬁles under the process ﬁle system (proc),