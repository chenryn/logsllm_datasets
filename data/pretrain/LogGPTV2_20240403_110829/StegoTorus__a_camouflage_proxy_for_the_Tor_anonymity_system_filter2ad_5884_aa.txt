title:StegoTorus: a camouflage proxy for the Tor anonymity system
author:Zachary Weinberg and
Jeffrey Wang and
Vinod Yegneswaran and
Linda Briesemeister and
Steven Cheung and
Frank Wang and
Dan Boneh
StegoTorus: A Camouﬂage Proxy for the Tor Anonymity
System
Zachary Weinberg1,2, Jeffrey Wang3, Vinod Yegneswaran2, Linda Briesemeister2,
Steven Cheung2, Frank Wang3, and Dan Boneh3
1Carnegie Mellon University
2SRI International
3Stanford University
ABSTRACT
Internet censorship by governments is an increasingly common
practice worldwide. Internet users and censors are locked in an arms
race: as users ﬁnd ways to evade censorship schemes, the censors
develop countermeasures for the evasion tactics. One of the most
popular and eﬀective circumvention tools, Tor, must regularly adjust
its network traﬃc signature to remain usable.
We present StegoTorus, a tool that comprehensively disguises Tor
from protocol analysis. To foil analysis of packet contents, Tor’s
traﬃc is steganographed to resemble an innocuous cover protocol,
such as HTTP. To foil analysis at the transport level, the Tor circuit
is distributed over many shorter-lived connections with per-packet
characteristics that mimic cover-protocol traﬃc. Our evaluation
demonstrates that StegoTorus improves the resilience of Tor to
ﬁngerprinting attacks and delivers usable performance.
Categories and Subject Descriptors: C.2.0 [Computer-Commu-
nication Networks]: Security and protection; K.4.1 [Public Policy
Issues]: Transborder data ﬂow
General Terms: Algorithms, Design, Security
Keywords: Anticensorship, Circumvention Tools, Cryptosystems,
Steganography
1.
INTRODUCTION
Freedom of speech and decentralization are bedrock principles
of the modern Internet. John Gilmore famously said that “the Net
interprets censorship as damage, and routes around it” [31]. It is
more diﬃcult for a central authority to control what is published on
the Internet than on older, broadcast-based media; in 2011, the Inter-
net’s utility to the “Arab Spring” revolutions prompted a spokesman
for the US Department of State to label it “the Che Guevara of the
21st century” [63]. Nonetheless, national governments can easily
inspect, manipulate, and block nearly all network traﬃc that crosses
their borders. Over a third of all nations impose “ﬁlters” on their
citizens’ view of the Internet [16]. As the Internet continues to grow
in scope and importance, we can expect that governments will only
increase their eﬀorts to control it [13].
Tools for evading online censorship are nearly as old as the cen-
sorship itself [33, 56]. At present, one of the most eﬀective circum-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
vention tools is “Tor” [24]. Tor provides anonymity for its users by
interposing three relays between each user and the sites that the user
visits. Each relay can decrypt just enough of each packet to learn
the next hop. No observer at any single point in the network, not
even a malicious relay, can know both the source and the destination
of Tor traﬃc.
Although Tor was not designed as an anticensorship tool, it works
well in that role. Repressive governments respond by blocking Tor
itself. In 2010 and 2011, Iran attempted to block Tor traﬃc by
scanning TLS handshakes for Diﬃe-Hellman parameters and/or
certiﬁcate features that were characteristic of Tor [20, 48]. China
employed a similar technique but enhanced it with active probing
of the suspected Tor relay, mimicking the initial sequence of Tor
protocol messages in detail [70]. The Tor developers defeated these
blocks with small adjustments to their software.
For a few days in early 2012, Iran blocked all outbound HTTPS
connections to many websites [60], including Tor’s primary site.1
To evade this more drastic blockade, Tor deployed a program called
obfsproxy (for “obfuscating proxy”) [21]. Obfsproxy applies an addi-
tional stream cipher to Tor’s traﬃc. This frustrates any ﬁlter looking
for a speciﬁc plaintext pattern (such as a TLS handshake), but does
not signiﬁcantly alter packet sizes and timing. As we will discuss in
Section 5.1, this means that Tor is still easily ﬁngerprintable.
Contributions: In this paper, we present an elaboration on the
obfsproxy concept, StegoTorus. StegoTorus currently consists of:
• A generic architecture for concealing Tor traﬃc within an
innocuous “cover protocol” (Section 2).
• A novel encrypted transport protocol geared speciﬁcally for
the needs of steganography (Section 3).
• Two proof-of-concept steganography modules (Section 4).
We will demonstrate the ease of detecting un-camouﬂaged Tor traﬃc
and StegoTorus’ eﬀectiveness at concealing it, even with the current
proof-of-concept steganography (Sections 5.1 and 5.2). We will
also demonstrate that StegoTorus imposes a reasonable amount of
overhead for what it does (Section 6).
We anticipate that censors will adapt quickly to this advance
on the circumvention side of the arms race; more sophisticated
and varied steganography modules are under active development.
Ultimately, an attacker will need to defeat all of the steganography
modules used by StegoTorus to block Tor traﬃc.
2. ARCHITECTURE
StegoTorus acts as a “pluggable transport” [47] for Tor, replacing
its usual direct connection to a relay server. Pluggable transport is
an extension of SOCKS [43], so StegoTorus could also camouﬂage
traﬃc produced by other applications that can use a SOCKS proxy.
1https://www.torproject.org/
109Censored sites
Existing Tor
network
StegoTorus
server
Censor
StegoTorus
client
Covertext
Database
Policy
Engine
y
h
p
a
r
g
o
n
a
g
e
t
S
s
e
l
u
d
o
m
)
r
e
p
p
o
h
C
Censor
Uncensored sites
(decoy traﬃc)
ct db
pol en
r
e
p
p
o
h
C
Tor
client
StegoTorus
client
StegoTorus
server
Tor
server
(a) Data ﬂow. The user’s browser uses Tor as a SOCKS proxy; Tor uses
StegoTorus as its SOCKS proxy. StegoTorus disguises the Tor link as
innocuous cover-protocol traﬃc, perhaps split over many TCP connec-
tions, that pass through the perimeter ﬁlters and reach the StegoTorus
server. The server decodes the steganography and passes Tor traﬃc to
the relay network.
(b) Internal architecture. The chopper distributes re-encrypted Tor traﬃc to
steganography modules, which conceal it within cover-protocol messages.
Steganography modules can also generate decoy traﬃc directed at unin-
volved hosts. Counterpart modules in the recipient decode the messages and
reassemble the Tor link. Both sides have access to independent covertext
databases. Overall control rests with a conﬁgurable policy engine.
Figure 1: High-level overview of StegoTorus.
Figure 1a shows how the Tor+StegoTorus system transports data
between the user’s browser and censored websites; Figure 1b shows
the internal structure of the StegoTorus client and server. StegoTorus
applies two additional layers of obfuscation to Tor traﬃc:
Chopping converts the ordered sequence of ﬁxed-length “cells”
that Tor produces, into variable-length “blocks” that do not have
to be delivered in order. Each block is re-encrypted using a novel
cryptosystem geared for the needs of steganography: every byte of
its output is computationally indistinguishable from randomness.
Chopping can be used by itself for minimum overhead; since its
output has no predictable content and randomized packet sizes, this
is enough to defeat all known pattern ﬁlters and the attacks described
in Section 5. However, a pattern ﬁlter that only passes protocols
with known, recognizable headers would block it.
Chopping produces “blocks” that do not have to be delivered in
order. However, they must be delivered reliably. At present, all our
cover protocols run over TCP. StegoTorus cannot run directly over
UDP, as Dust does [71], but it could run over DCCP, or a UDP-based
cover protocol that provides reliable delivery.
Steganography disguises each block as a message in an innocu-
ous cover protocol, such as an unencrypted HTTP request or re-
sponse. Since blocks can be delivered out of order, StegoTorus can
distribute a Tor link over many cover connections, improving both
eﬃciency and diﬃculty of detection. A StegoTorus server can listen
on many IP addresses, so that its clients appear to be talking to many
unrelated servers. StegoTorus clients can generate decoy traﬃc to
uninvolved hosts, making detection even more diﬃcult.
2.1 Design Goals
StegoTorus preserves Tor’s basic design goals:
Unlinkability: The censor should not be able to determine which
Internet users communicate with which remote hosts via Tor.
Performance: Unlinkable access to the Internet should not be so
much slower than “unmasked” access that users will reject
the trade-oﬀ.
Robustness: The system should preserve its other design goals in
the face of active attacks.
StegoTorus also seeks to provide:
Undetectability: The censor should not be able to determine which
Internet users are using StegoTorus.
Unblockability: The censor should not be able to block StegoTorus
without also blocking a great deal of unrelated traﬃc.
The terms “unlinkability” and “undetectability” are deﬁned precisely
by Pﬁtzmann and Hansen [59].
2.2 Threat Model
We model a censorious adversary more or less as Infranet [27]
and Telex [72] do. A censor has a network perimeter, which cuts the
global connectivity graph into two disconnected components. One
of these components is “inside” (or “censored”) and the other “out-
side.” The censor controls all the network infrastructure inside the
perimeter, but not the software on end users’ computers. (Attempts
to mandate censorware on end users’ computers, such as China’s
2009 “Green Dam” initiative, have so far been unsuccessful [73].)
The censor wishes to prevent the censored nodes from retrieving
material that meets some deﬁnition of undesirability; we assume
that no such material is hosted inside the perimeter.
2.2.1 Perimeter Filtering
The censor programs the routers for all perimeter-crossing links
to observe all cleartext traﬃc that they forward. This includes any
cleartext portion of a mostly-encrypted protocol, such as IP and TCP
headers and TLS record framing. Using three general techniques,
the routers detect undesirable material and prevent it from crossing
the perimeter.
Address ﬁlters prevent all communication with the IP addresses
of servers that are thought to host undesirable material. China main-
tains a blacklist of Tor entry nodes as part of its “Great Firewall.”
Pattern ﬁlters look for deterministic patterns in cleartext that
may indicate undesirable material. As mentioned in Section 1, Iran
was able to block all use of Tor for a few weeks with a pattern
110ﬁlter looking for a particular Diﬃe-Hellman public modulus in TLS
handshakes.
Statistical ﬁlters look for stochastic patterns, and can take low-
level packet characteristics (size, arrival time, etc.) into account as
well as cleartext headers and payloads. While statistical ﬁlters for
Tor are easy to construct (we describe one in Section 5.1), we are
not aware of any use of them in the ﬁeld, to date.
2.2.2 Limits on the Censor
Perimeter ﬁltering must operate in real time on a tremendous
traﬃc volume. To give some idea of the necessary scale, the CAIDA
project’s “Anonymized Internet Traces 2011” data set [14] con-
sists of the ﬁrst 64 bytes of every packet that traversed a backbone
router in Chicago for one hour on a Wednesday afternoon; there are
1.96 billion packets in the set, for a total of 116 gigabytes of data.
This corresponds to an average traﬃc rate of 540,000 packets per
second; a ﬁltering router that needs an extra two microseconds to
process each packet will halve overall throughput.
The precise capabilities of commercial “deep packet inspection”
hardware are not widely advertised. We assume, in general, that a
nation-state adversary has access to equipment that can perform a
two-stage analysis. The ﬁrst stage sees every packet, runs with a
hard realtime deadline, and must judge the vast majority of packets
to be uninteresting. The second stage can only examine a tiny
fraction of the TCP ﬂows crossing the router, and may be limited
to responding after-the-fact. This is consistent with the observed
behavior of China’s active probes for Tor bridges [70].
We assume all Tor relays are outside the perimeter, and the censor
does not operate malicious Tor relays, nor does it observe traﬃc
among outside nodes. If any of these assumptions are false, the
censor may be able to break Tor’s unlinkability guarantee [50, 53].
StegoTorus obfuscates the traﬃc between the Tor client and the
ﬁrst Tor relay. Since the client is inside the perimeter, and the relay
outside, StegoTorus controls what the perimeter routers observe.
We also assume that the censor does not “turn oﬀ the Internet”
(that is, disconnect from the global network). This was done by
several countries during the Arab Spring, but only for a short time,
in response to imminent existential threat, and with negative conse-
quences for those who tried it. We expect that other governments