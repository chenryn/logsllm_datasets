# VTBPEKE: Verifier-based Two-Basis Password Exponential Key Exchange

**Authors:**  
David Pointcheval<sup>1</sup> and Guilin Wang<sup>2</sup>  
<sup>1</sup> CNRS, INRIA, and ENS/PSL Research University, Paris, France  
<sup>2</sup> Shield Lab, Huawei, #03-31/32, 20 Science Park Road, Singapore 117674  

**Abstract**  
Password-Authenticated Key Exchange (PAKE) protocols allow two parties to establish a shared, cryptographically strong key over an insecure network using a short common secret as the authentication means. Following the seminal work by Bellovin and Merritt, which introduced Encrypted Key Exchange (EKE), various settings and security notions have been defined, and numerous protocols have been proposed.

In this paper, we revisit the promising Simple Password Exponential Key Exchange (SPEKE) protocol proposed by Jablon. The only known security analysis for SPEKE operates in the random oracle model under the Computational Diffie-Hellman (CDH) assumption, but it is limited to multiplicative groups of finite fields (subgroups of \( \mathbb{Z}_p^* \)), leading to large elements and significant communication and computational overheads. Our new instantiation, called Two-Basis Password Exponential Key Exchange (TBPEKE), can be applied to any group, and our security analysis requires a Decisional Linear (DLin)-like assumption. In particular, TBPEKE can use elliptic curves, resulting in better efficiency in both communication and computation.

Additionally, we consider server corruptions, which can immediately leak all passwords to an adversary in symmetric PAKE. Therefore, we study an asymmetric variant, known as Verifier-based Password-Authenticated Key Exchange (VPAKE). We propose a verifier-based variant of TBPEKE, called VTBPEKE, which is efficient and resistant to server compromise.

**Keywords:** Password-Authenticated Key Exchange, Server Compromise, Dictionary Attacks

## 1. Introduction
### 1.1 Dictionary Attacks
Key exchange protocols are cryptographic primitives used to provide secure session keys to users communicating over a public, unreliable channel. This enables the establishment of virtual secure channels (i.e., private and authenticated) in any network, even under the control of adversaries. Bellare and Rogaway [10, 11] laid the foundations of authenticated key exchange, but password-based authentication requires additional considerations. In this setting, where the authentication means is a short secret chosen from a small set of possible values (e.g., a four-digit PIN), a brute-force attack, which tries all possible values, can succeed after a relatively small number of attempts. This attack, known as an on-line dictionary attack, is unavoidable because the adversary simply needs to check whether the authentication with a tentative password succeeds or not. However, its impact can be mitigated by policies that invalidate or block an account after a fixed number of failed attempts. The security goal in PAKE protocols is to ensure that the on-line dictionary attack is the best an adversary can do, meaning no one can guess the correct password without a linear number of interactions.

### 1.2 Previous Constructions
Bellovin and Merritt [12] introduced the first PAKE scheme, Encrypted Key Exchange (EKE), which is essentially a Diffie-Hellman key exchange where the two flows are encrypted with a symmetric encryption scheme using the password as the key. Initial security analyses were provided in the indistinguishability-based (or BPR) framework in the ideal-cipher model [8], followed by several proofs of variants [18, 19, 6] aimed at reducing the reliance on ideal models while maintaining the initial efficiency of EKE. EKE has also been studied in the simulation-based framework in the random-oracle model [17] and in the Universal Composability (UC) framework [3] with security against adaptive corruptions, though still in ideal models.

The "Simple Password-Authenticated Key Exchange" (SPAKE) protocols, proposed by Abdalla et al. [1], aim to simplify the PAKE process. However, these protocols also face the challenge of server compromise, where the server's knowledge of all passwords in clear text can lead to significant security risks. To address this, Bellovin and Merritt [13] proposed Augmented EKE, where the server stores a verifiable means (a verifier) to check if the client used the correct password, rather than the password itself. In practice, the verifier is often a hash of the password with a salt, which temporarily limits the impact of a server breach by forcing the adversary to spend a considerable amount of time to learn many passwords. This should provide enough time for users to change their passwords.

### 1.3 Objectives and Contributions
In this paper, we introduce a new PAKE protocol, TBPEKE, which can be instantiated in any group and is analyzed under a DLin-like assumption. We also propose a verifier-based variant, VTBPEKE, which is resistant to server compromise and more efficient in terms of communication and computation.

## 2. Security Model
[Details of the security model]

## 3. Variants of SPEKE
### 3.1 A Naive Construction
[Details of the naive construction]

### 3.2 A Secure Construction: TBPEKE
[Details of the secure construction TBPEKE]

## 4. Security Analysis of TBPEKE
### 4.1 Assumptions
[Details of the assumptions]

### 4.2 Security Results for TBPEKE
[Details of the security results]

## 5. VTBPEKE: Verifier-based TBPEKE Protocol
### 5.1 Password Hashing Scheme
[Details of the password hashing scheme]

### 5.2 Our Password Hashing Scheme
[Details of the proposed password hashing scheme]

### 5.3 Description of VTBPEKE
[Details of the VTBPEKE protocol]

## 6. Security Analysis of VTBPEKE
### 6.1 Discussions
[Discussions on the security analysis]

### 6.2 Forward-Secrecy & Verifier-Based
[Details on forward-secrecy and verifier-based aspects]

### 6.3 Security Proof
[Details of the security proof]

## 7. Parameters and Efficiency
[Details on parameters and efficiency]

## 8. Conclusion
[Conclusion of the paper]

---

**Note:** The full content of the sections marked with [Details... ] should be filled in with the specific technical details and analyses from the original paper.