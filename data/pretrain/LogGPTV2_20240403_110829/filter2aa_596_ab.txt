ments in order to execute some commands. Interesting binaries available on Windows
(cmd.exe, wmic.exe, and so on) to execute commands have their signature in a catalog
and not as a part of the binary. Consequently they are rejected by WSUS service. To
circumvent this limitation, WSUSpect used PsExec and BGInfo from the Sysinternal suite
and signed by Microsoft. These tools could execute arbitrary commands through their
arguments.
WSUSpect attacks the update process between WSUS server and clients. No method
currently exists to attack the update process between two WSUS servers.
12
WSUSpendu
WSUS internals
WSUS service works with three components:
• an IIS Web server for the exchanges with clients and downstream servers;
• a database (could be local or remote) where the metadata are stored;
• a central service that manages the updates and interacts with the two other
components.
Studying the service is possible for a large part by using the SQL Server Management
Studio (SSMS) tool from Microsoft. Nevertheless, this tool needs to be installed before
the WSUS service. Then the Profiler tool in SSMS is awesomely useful to trace database
calls. Finally, the WSUS service is written in C# language thus it is possible to use a
classical .NET decompiler to understand its functionalities.
2.1
IIS Webservice
An IIS server, split in two parts, is used to deal with the clients. The first part is a
Webservice. It is in charge of delivering metadata to clients. The second part is using the
BITS (Background Intelligent Transfer Service) protocol to transfer the binary’s updates
(like CAB files, PSF or EXE) to the clients.
The Webservice use the SOAP protocol to manage the new clients then to interact with
them to negotiate the new updates to install. Two main request/response groups are
used by the Webservice. The first one allows a new client to register in the WSUS server
by declaring its configuration, negotiate session cookie, etc. (cf. 
request). The following methods are used (cf. figure 2.5):
• ;
• ;
• ;
• .
These requests/responses are not authenticated and no control is performed on which
client is asking for information. Thus all clients could register in a WSUS server. Never-
theless, authentication is possible by using TLS client certificates but this configuration
is not widely present as per our security assessment experience.
Studying data exchanged between clients and the Webservice could be complicated
due to the data compression. But this configuration can be modified with the help of
the IIS MMC.
The second part of the Webservice exchanges allows a client to declare to the WSUS
13
WSUSpendu
Figure 2.5: SOAP protocol between WSUS clients and the server [6]. Client WS, Sim-
pleAuth WS and SelfUpdate Tree are three Webservice components for the different
requests/responses
server the status of its software updates (including the update agent himself). After that,
the client declares the status of its hardware updates (which drivers are installed, for
instance). With these pieces of information, the server could propose to the client the
available updates. Two methods are used for this goal:
• : calls for the software part (multiple calls could be necessary
in case of having a lot of updates to transfer), and calls for the drivers part (but
only one call in this case);
• .
Updates are then downloaded by the clients only when they ask for them. The download
process uses the BITS protocol to avoid network congestion. Binaries are stored in the
IIS WsusContent directory. On the client side, binaries are stored in the 
 directory.
14
WSUSpendu
2.2
Database
When installing the WSUS role, you can choose between two types of databases: either
use an already installed SQL Server or create a local WID (Windows Internal Database),
which is a lightweight SQL Server. In both cases, the default database name is SUSDB,
and there is no difference in its internal architecture. The only difference is the connec-
tion method:
• the access to the full SQL Server is done as usual, through either a TCP socket
or a named pipe, using Windows or mixte authentication, and so on;
• the access to the WID is done only through the use of a named pipe, by
default using the Windows authentication.
The database is composed of relational tables containing the full configuration of the
WSUS server (even the configuration needed to connect to this database), the updates
metadata, the registered clients list and their configuration, and so on. A lot of triggers,
checking for data consistency, govern the insertion into these tables. Therefore, a brutal
insertion into a random table has a great level of chance to be refused by one of these
triggers. Moreover, a lot of relationships between tables are established using foreign
keys, which complexifies again the direct insertion through SQL queries. However,
around three hundred stored procedures can be used to manipulate SQL data in a
usable way. These procedures query the database in the right order, dispatching calls
to respect triggers as well as foreign keys constraints, and modify some metadata to
better fit into some tables. For instance, only one stored procedure is used in order to
approve an update, while it manipulates around ten tables (insert, update and delete
operations).
The database is really the core of the WSUS server. Communications streams with the
WSUS clients are generated from the information stored in it. It also contains URLs
where the binary linked to the updates can be found, indexes of the files contained
in the IIS Webserver folder (known as WsusContent) that can be given to the clients
when asked to. All the data displayed in the WSUS console (in an MMC snap-in) also
come from the database. Every click in this console results in the call of at least one
stored procedure, which selects or updates the database accordingly. This is therefore
a strategic place where to manipulate data, including inserting new data to try and
compromise WSUS clients and selecting existing data to perform a security assessment.
2.3
WSUS service
The WSUS service () manages both the aforementioned components. It
interacts with the administrators through the WSUS console, which is an MMC snap-in.
Its behavior is simple as well as crucial for the WSUS server. It schedules most of the
stored procedures of the database needed to manage updates.
As soon as the service is started, it checks everything is fine on the WSUS server: it
15
WSUSpendu
gets the configuration from inside the database, it tests if the other two components
are installed and configured properly, it puts a mutex on the database not to have two
services to modify the database concurrently. Then it launches what will manage the
service’s life:
• HealthMonitoringThreadManager: it will check the database, clients, Web-
service and certificate states. Its presence is useful to ensure everything is func-
tional. To signal this state, it runs every five seconds the spUpdateServerHealth-
Status database’s stored procedure;
• DispatchManagerDatabasePollingThreadProc: it will allow the service to be
managed. Three stored procedures, spGetNotificationEventNamesToWakeUp-
OnStartup (at launched time) or spGetNotificationEventNamesToWakeUp and
spGetChangeTrackingInformation, are used to follow the database’s changes.
For instance, when configuration changes are detected, this thread will detect it
and reconfigure the WSUS service automatically by updating the appropriate ta-
bles. A raised event is also detected by these procedures, returned to the service,
which then will run the appropriate stored procedure depending on the received
event. This thread checks for changes every second to ensure -kind of- a smooth
experience.
One of the functionality of the service is to deal with MMC’s user interactions. In the
case of a change of the configuration through the MMC, or using any other user in-
terface functionality, a call to one of the functions of the service is performed. Most of
these functions are really simple as they perform one task: call the appropriate stored
procedure which will deal with the input. These stored procedures will also update a
state machine to change it in order to turn it into a new state. This is then the spGetNoti-
ficationEventNamesToWakeUp procedure in the DispatchManagerDatabasePollingTh-
readProc thread, which will be notified of the change, and that will then notify the rest
of the service.
Dealing with an event takes the following steps: an action is performed by an admin-
istrator, which runs one of the services functions dedicated to user inputs, which in
turn runs a stored procedure that deals with the specificities of this particular event and
updates the state machine in the database. During the DispatchManagerDatabase-
PollingThreadProc thread execution, the procedures will detect the new state of the
state machine, thus discover the changes, and eventually run other stored procedures
to perform whatever task that is still needed to be performed.
As seen here, the whole service consists in performing requests to the database, but
as said before, the core of the WSUS server really is the database, which contains all
WSUS important data.
16
WSUSpendu
Injecting a new update
Injecting a new update in the WSUS server takes multiple steps:
• connects to the SQL database, which will allow its data to be modified at will
afterwards;
• prepares the XML files in which the update’s prerequisites are detailed, the
executed binary’s location is given and some options used by the update are
provided;
• upload of the executed binary on the WSUS server;
• runs various SQL stored procedures to effectively add the update’s metadata
into the database (which is basically the way new updates are declared);
• creates a new group dedicated to targeting a WSUS client;
• approves and deploys the update.
3.1
Interaction with the database
If the database used by the WSUS service is a standard version of SQL Server, the
connection remains classic, for authentication notably.
The SQL server’s name is
given in the  value name of the 
 key.
If the database used is a WID (Windows Internal Database), the WSUS server is con-
necting through a named pipe. This pipe is accessible through one of the following
paths, according to the Windows server version:
• For Windows server 2008R2 and below:
• For Windows server 2012 and above:
An attacker controlling a WSUS server can thus establish a connection with implicit au-
thentication (every administrative local account has the requested privileges by default),
without any particular limit, to the WSUS database.
3.2
Update metadata
The stored procedures used to inject metadata (we will describe them later) use full
XML as arguments. These XML describe the update’s metadata that we want to insert.
We can find the update title (e.g. ”windows6.1-kb2862335-x64”), its description (”A
security issue has been identified […]”) in all supported languages by Windows and
17
WSUSpendu
by the update itself, as well as the names of various files to be installed (with at least
their SHA1 hashes). These pieces of information are duplicated if the update has to be
applied on 32- and 64-bits systems.
Prerequisites in the XML (0)1 allow the Windows Update client to know if this particular
update has to be installed, or can be ignored. In the malicious update injection case, a
special care must be taken for the update to be installable by any client, without client-
side limit. For the record, multiple listings of GUID usable in these rules are available
on the Internet [2, 9, 10].
There are two major pieces of information for a single update. The first one describes
the file used by the update (with its SHA1 hash (1) and its download URL (2)), and
the arguments (3) to pass as a parameter of this binary. This first part is not directly
approvable, nor it is shown in the WSUS console. The second part, which is a ”bundle
update”, references the first one (4) and is injected as an approvable update, shown in
the WSUS console. Once this second part is approved, it allows the clients to pull the
first part, download the referenced files and execute them.
(0)
(1)
Listing 3.2: XML example describing an update
1The (X) notation is used as a legend in the following listings.
18
WSUSpendu
(4)
Listing 3.3: XML example describing a bundle of updates
Each part has XML-linked ”fragments”. These fragments will not be used by the server,
but are given as-is to the WSUS clients. They also have update prerequisites listed
and information displayed in the Windows update manager. Each fragment has a type
defining its main function:
• 1: Update type, used to reference the update on the client side. The XML of
this type have prerequisite rules, with restrictions on the processor type, specific
values in the Windows registry, specific version of such program installed, and so
on;
• 2: ExtendedProperties type, used by the client to fetch and execute the binary
linked with the update. The XML of this type also contains the arguments to give
in the binary command-line;
• 4: LocalizedProperties type, contains metadata displayable on the client side,
like the update’s title, its description, URLs to get more information, and so on.
19
WSUSpendu
Listing 3.4: Type 2 (Extended Properties) XML fragment example, which is HTML-
encoded in the database and on the network
Finally, a small XML needs to be created to link each SHA1 hash of previously declared
files in the aforementioned update to a URL from where the files can be downloaded.
Listing 3.5: XML example describing a download URL of a file
3.3
Updateʼs binary upload
The files used by the update need to be downloaded by the WSUS server for it to give
it to the client when asked to. As for WSUSpect, these binary files need to be signed by
a certificate stored in the WSUS server in the Trusted Root Certification Authorities or
Trusted Publishers local machine stores. The binaries’ arguments are arbitrarily chosen
by the attacker.
To be downloadable by the WSUS server, there are various places where you can put
the binaries:
• Put the files on an attacker-controlled webserver, for instance on the attacker
machine. This technique will be avoided as at some point it might let the WSUS
server unable to download the file if the attacker has finished the pentest;
• Put the files in the format  ,
where:
•   is the root directory as used by the WSUS service. Its
value can be retrieved in the  column of the
 table in the WSUS database,
•  is the last byte, in the hexadecimal format, of the SHA1 hash of
the file,
•  is the SHA1 hash, in the hexadecimal format, of the file;
• Use the IIS webserver from the WSUS server to serve the file, and use this kind
of URL:  in the XML (listing 3.5).
As described in the WSUSpect article, the PsExec and BgInfo binaries, from the Sysin-
ternals suite, can be used for this kind of attack. They both are signed by Microsoft and
20
WSUSpendu
can execute arbitrary commands through their command-line arguments. The binary
signature checking is done twice: by the server just after having downloaded the binary
(which is done, by default, once the update has been approved), before using it for any
purpose, and by the client, also just after having downloaded the binary. The choice
to use one binary or the other depends on the scenario played. For instance, PsExec is
more often detected as a malicious hacking tool by antivirus solutions. BgInfo, however
being less subject to antivirus detection, needs a script to execute as argument, and not
directly the executed command. This script thus needs to be available from the client
downloading the update, which can be a hard-to-achieve prerequisite depending on
the network architecture. Note that other binaries, like MSBuild and InstallUtil, might
be able to achieve the same utility, but have their specific requirements.
3.4
Injecting in the database
There are five stored procedures which have to be used to effectively inject an update
in the database, thus in the WSUS service. These four procedures need to be called
twice: once for the fiel to execute (listing 3.2), then for the bundle (listing 3.3).
The first stored procedure is called spImportUpdate. This one takes the first XML (list-
ings 3.2 or 3.3) as an argument, potentially compressed in a cabinet (.cab) file, and a
local upstream server identifier, used when multiple WSUS servers are available on the
network. The procedure returns the insert status (whether it has been injected or not)
and a local identifier, uniquely identifying the inserted update on the server. The latter
parameter will be given to some of the following stored procedures.
The second procedure to call, spSaveXmlFragment, has to be called for each fragment
associated to the XML given the first stored procedure. This spSaveXmlFragment pro-
cedure takes the update GUID (found at the begining of the listings 3.2 or 3.3 as the
UpdateID).
Then, it’s the spSetBatchURL that has to be called. This procedure links, from the
listing 3.5, the download URL to the SHA1 hash of the files in the database. The URL
from this XML is used by the WSUS server to download the files associated by an update
when this update is approved. The WSUS server can also be configured to download
the update files as soon as the update is inserted, but that is not the default. As a side
note, if the WSUS server is not able to download all the files associated with an update,
the update will never be seen as a new update by any client.
Finally, the two stored procedures spDeploymentAutomation and spProcessPrerequi-
sitesForRevision take the local update identifier returned by the spImportUpdate call.
spDeploymentAutomation is needed for triggering automatic approval, if the update
corresponds to the activated criteria as positioned by the WSUS server’s administrator.
spProcessPrerequisitesForRevision is creating automatic deployment links: once the in-
21
WSUSpendu
serted update is deployed, every update on which this one depends will be pulled to