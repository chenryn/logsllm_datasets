the retreating edges (dashed) now point to the new head dispatcher
and set the state variable (values are reported on the edge labels).
The head dispatcher then jumps to the original target node.
𝑡. Finally, the single entry point of the head dispatcher is promoted
to new head of the Region.
Figure 4 shows the result for the normalization of abnormal edges
applied to the CFG originally depicted in Figure 3.
The idea is to enforce the Single Retreating Target property, edit-
ing the control flow without altering the semantics of the original
program, except for the introduction of the state variable 𝑣. This pro-
cess also preserves the Two Successors property. All these properties
are from now on invariant and preserved in the next steps.
Notice that redirecting the abnormal edges to the entry dispatcher
may momentarily break the Two Predecessors property. But this does
not represent a problem since the normalized abnormal edges are
later removed and substituted with continue statements.
Loop Successors Absorption. This is an optional step that starts
moving in the direction of the Single Successor loop property. It is
designed to handle gracefully a scenario observed frequently in
real-world example, depicted on the left in Figure 5. The Region
⟨0,1,2⟩ in the figure has two successors, 3 and 4. Informally it is easy
to see that the Region, along with node 3, is substantially a loop
that executes the code in node 3 on break. Given that one of the
goals is to emit idiomatic C, this would be better represented with
a loop, containing an if statement that executes the code in 3 and
breaks. In order to reach this form, the node 3 must be absorbed
into the Region, as shown in Figure 5.b.
More formally, this step starts with the creation of new empty
dummy frontier nodes on each edge whose source is in the Region
and whose target is not (see the empty dashed node in Figure 5.b).
Then, it computes the dominator tree of the entire CFG (not only the
current Region) and adds to the Region all the nodes that are dom-
inated both by the head of the Region and by at least one dummy
frontier node.
This embodies the idea that given a node, if it is only reachable
passing through the head of Region and from a dummy frontier it is
in fact part of the Region itself, and it must be handled accordingly
by the remaining steps.
This step does not alter the semantic of the program as it only
adds empty dummy frontiers, and it also does not break any of the
previously enforced invariants.
First Iteration Outlining. This step enforces the Single Entry
property on Regions, removing potential multiple entry points that
at this stage are still possible by means of abnormal entries. An
abnormal entry is an edge 𝑒 =⟨𝑠,𝑡⟩ such that 𝑠 is not in the Region,
𝑡 is in the Region, and 𝑡 is not the head.
0
1
2
3
4
0
1
2
3
4
Figure 5: Absorbing Successors. Left – The Region with the nodes
with dashed border has two successors: 3 and 4. Right – Node 3 has
been absorbed in the Region, which now has a single successor.
0
1
2
0
1
1
2
2
before outlining
after outlining
Figure 6: First iteration outlining. Dashed nodes are the outlined.
Abnormal entries are removed based on the observation that
each of them generates a set of paths that: enter the Region, execute
some parts of the loop and at some point reach the proper head of
the loop and proceed with regular iterations.
Thanks to this observation, the nodes and edges that compose
the first iteration can be duplicated and moved out of the Region,
since once they are outlined they have no retreating edges and bear
no signs of being loops.
Note that it would be possible to leave the first iteration inside the
loop, but it requires guarding each statement with conditional con-
structs, an approach adopted by previous works [21, 22]. However,
we deem that choice to be suboptimal since it generates decompiled
code where paths are entangled together and artificially guarded
by conditional constructs. Moving the first iteration outside the
Region makes it easier to reason about, since it can be analyzed in
isolation, while also leading to more idiomatic C code.
Exit Dispatcher Creation. Symmetrically to the creation of entry
dispatchers, this step normalizes the Regions to completely enforce
the Single Successor loop property. The successors absorption step
was an optional step to get the low-hanging fruit in this direction,
while gracefully handling common cases, but not all scenarios.
If the Single Successor loop property does not hold after the suc-
cessors absorption step, this step injects an exit dispatcher, that is
built and acts similarly to the entry dispatcher, changing the control
flow without altering the semantic of the program thanks to a state
variable. Again, each of the edges 𝑒 = ⟨𝑠,𝑡⟩ with 𝑠 in the Region
and 𝑡 outside is substituted with two edges. The first starts from 𝑠,
sets the state variable, and jumps to the exit dispatcher. The second
starts from the exit dispatcher and goes to the 𝑡. In this way, the
first node of the exit dispatcher becomes the single successor of the
Region. Notice that this means that the exit dispatcher itself is not
part of the Region but is part of its parent Region in the Region Tree.
Figure 7 shows a case where the creation of the exit dispatcher
is necessary.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan6422
3
0
1
2
3
𝑣 ==2
𝑣 :=2
exit
𝑣 ==3
𝑣 :=3
0
1
Figure 7: Creating exit dispatcher. Left – The Region composed by
nodes 0 and 1 has two successors (2 and 3). Right – Creation of the
exit dispatcher, making it the target of the outgoing edges. The
edges also carry the values assigned to the state variable, later used
dispatch the execution to the real successors.
continue
1
2
3
1
2
3
before
after
break
Figure 8: Creation of break and continue nodes.
Note that this step does not alter the program semantics and does
not break any of the previously enforced invariants, since the exit
dispatcher is built of conditional statements. The Single Successor
loop property is enforced for all Regions and will be preserved by
all the following transformations.
Again, this does not alter the program semantics and does not
break any of the previously enforced invariants, since the exit dis-
patcher is built of conditional statements. The Single Successor loop
property is enforced for all Regions and will be preserved by all
following transformations.
break and continue Emission. This step transforms each Region
in a DAG that is then ready to be fed into the Combing stage.
After the previous steps, the execution of a program in a given
Region can either take an exit edge and jump to the single successor,
or take a retreating edge and jump to the head to execute another
iteration. At this point, all the properties introduced in Section 4.2
have been enforced, with two exceptions: Diamond Shape, that will
be enforced later by Combing and Two Predecessors, that was en-
forced at the beginning of Section 4.4.1, but that might have been
broken during Retreating Edges Normalization, to enforce the Single
Retreating Target and Single Exit. As a matter of fact, if all the re-
treating edges in a Region point to the head, head might have more
than two predecessors. This step re-enforces the Two Predecessors
while transforming the Region in a DAG.
It starts by removing all the retreating edges, and substituting
them with jumps to a newly created continue node. This naturally
conveys the same semantic, that a retreating edge jumps to the
head to start another iteration of the loop.
Then, all the edges jumping out of the region to the single suc-
cessor are substituted them with jumps to a newly created break
node. This also conveys the same semantic, that an exit edge jumps
straight out of the loop to its single successor.
Figure 8 shows an example of these transformations.
Collapsing Regions. At this point, a Region that has been trans-
formed by all the previous steps of Preprocessing is finally a DAG.
As mentioned at the beginning of Section 4.4.2, only one Region
5
0
6
...
2
1
4
3
continue
break
Figure 9: Collapsing nested DAG Region. The Region with red
nodes on the left (composed of 1,2,3,4,break, and continue) can be
collapsed in a virtual node from the point of view of its parent.
at a time is turned into a DAG, working on the Region Tree from
the leaves to the root. After a Region has been transformed into a
DAG, this step collapses it into a single virtual node in its parent’s
representation.
This is possible since each DAG Region has a Single Entry (part
of the DAG) and a Single Successor (not part of the DAG). Retreat-
ing edges have been removed from the DAG, and substituted by
continue nodes, that represent jumps to the Single Entry. Paths
that exit from the DAG have been substituted with break nodes
jumping to the Single Successor.
Hence in the parent’s representation, a DAG Region is collapsed
into a single virtual node 𝑉 as follows. Given a Region 𝑃 and a nested
DAG Region 𝐶 with Single Entry 𝐸 ∈𝐶 and Single Successor 𝑆 ∈ 𝑃\𝐶.
First, all the nodes in 𝐶 are moved into the virtual node 𝑉𝐶.
Then, each edge 𝑒 =⟨𝑋,𝐸⟩ jumping from 𝑃\𝐶 to 𝐸 is substituted
with an edge 𝑒𝑉𝐶 = ⟨𝑋,𝑉𝐶⟩. These represent all the entry paths
to 𝑉𝐶 (hence to the collapsed Region 𝑅), since the Diamond Shape
property guarantees that there are no edges in the form ⟨𝑋,𝑌⟩ with
𝑋 ∈ 𝑃\𝐶, 𝑌 ∈𝐶 and 𝑌 ≠ 𝐸. From a semantic standpoint, every new
edge 𝑒𝑣 jumps from 𝑋 to the head of the Region 𝐶 collapsed into 𝑉𝐶.
Finally, a new edge 𝑒𝑆 =⟨𝑉𝐶,𝑆⟩ is added to represent the fact that
break nodes inside Region 𝐶 collapsed into 𝑉𝐶 can jump straight
to the successor 𝑆.
This step concludes the collapsing of a single Region. An example
can be seen in Figure 9.
Once all the children of a Region have been collapsed, the Region
can be processed, until all the Regions in the tree become DAGs.
These DAGs contain, among others, virtual nodes that represent
nested collapsed DAG Regions. The Region Tree is now ready to be
processed by the Combing stage.
4.5 Combing
This is the core of the Control Flow Combing algorithm. It enforces
the Diamond Shape property, on all the DAGs in the Region Tree.
Enforcing this property reshapes the DAG so that it is only com-
posed by nested diamond-shaped regions. These regions have only
a single entry and a single exit node. They have no branches that
jump directly in the middle of the region or jumping out from the
middle of the region. All the paths incoming into a diamond-shaped
region pass by the entry, and all the paths outgoing from the region
pass by the exit. A simple example is visible in Figure 10.a. Diamond-
shaped regions are easily convertible to C if-else constructs, with
then and else branches, and with a single common successor that
is the code emitted in C after both then and else.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan643true
false
(a)
1
𝐴
4
𝐵
3
2
𝐴
𝐵
5
(b)
𝐵
3
𝐴
4
𝐴
2
𝐵
1
4
D
5
(c)
Figure 10: (a) A diamond shaped region. (b) A region which is not
diamond-shaped. The arc between 1 and 4 breaks the assumption
of not having edges incoming from outside the region. (c) The same
region after the Combing has two nested diamond-shaped regions.
D is a dummy node, i.e., an empty node useful only to highlight
the diamond-shape.
Informally, the key idea of the Combing step, is to take all the
regions that are not diamond-shaped (as the one in Figure 10.b) and
restructure them to be diamond-shaped (as the one in Figure 10.c).
In order to achieve this goal, it is necessary to duplicate some nodes
in the graph. Node duplication can increase the size of the final
generated C code. However, we deem that this increases clarity
since it disentangles complex overlapping paths in the control flow,
linearizing them and making them easier to reason about for an
analyst, that can consider them one at a time. Moreover, in most
cases the duplicated nodes introduced by the Combing can be dedu-
plicated by the Matching stage, that uses them to emit idiomatic C
code such as short-circuited ifs as explained in Section 4.6.2.
The Combing Algorithm. As all previous steps, Combing is done
on a single Region at a time. Thanks to the previous steps, Regions
at this point are DAGs. These two properties greatly reduce the
complexity, thanks to the shift of the problem from a global to a
local perspective, and since DAGs are acyclic.
For each Region DAG the comb works as follows. First, it collects
all the conditional nodes on the DAG. The Diamond Shape property