  for 
0
  for 
0
(cid:31) rD
(cid:31)
1.0
rD(cid:100)1.0
(2)
(3)
The probability distribution of noise duration can be given 
by (3). The reason why Dr is uniformly distributed between 
0 and 0.1 is that this is the range of rise time on chip as a 
ratio  of  the  cycle  time.  Note  that  the  noise  duration  is 
limited  by  these  rise  times,  since  noise  occurs  due  to 
capacitive and/or inductive coupling of switching line to a 
victim line.  
Once  an  aggressor  signal  settles,  the  noise  pulse  ends. 
Using equation (2) and (3), the probabilities (PE) of logic 
failure  for  a  D  flip-flop  at  different  voltage  swings  have 
been  obtained  by  the  integration  of  the  probabilities  of 
noise  pulse  above  each  curve  of  Figure  6.  Figure  6  plots 
the probabilities of logic failure against the relative voltage 
swings (Vrs). The probability number at full voltage swing 
are consistent with industrial and test data [23].  
)
E
P
(
r
o
r
r
e
f
o
y
t
i
l
i
b
a
b
o
r
p
3.00E-04
2.50E-04
2.00E-04
1.50E-04
1.00E-04
5.00E-05
0.00E+00
0
0.1
0.2
0.4
0.3
0.7
relative voltage swing (Vrs )
0.5
0.6
0.8
0.9
1
Figure 6. Probability of error at different cycle time 
1.00E+00
1.00E-01
1.00E-02
1.00E-03
1.00E-04
1.00E-05
1.00E-06
1.00E-07
)
E
P
(
r
o
r
r
e
f
o
y
t
i
l
i
b
a
b
o
r
p
0
0.2
Dat a
Formula
0.8
1
0.4
0.6
relative cycle time (Cr )
Figure 7. Probability of error at various voltage swings 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
The probability of error versus cycle time in Figure 7 has 
been obtained by the voltage swing variable from the two 
relations:  cycle  time  versus  voltage  swing  (Figure  2)  and 
probability  of  error  versus  voltage  swing  (Figure  6).  The 
relative  cycle  time  Cr  is  always  less  than  1  for  lower 
voltage swings. Similarly we can define relative frequency 
Fr  =  f/ffs  =  1/Cr,  where  f  is  the  frequency  and  ffs  is  the 
frequency  at  full  voltage  swing.  PE  is  a  single  bit 
probability of error and is a function of how fast a circuit is 
driven  by  allowing  the  voltage  swing  to  decrease.  The 
formula below shows the relation between PE and Cr and 
Fr.
EP
(cid:32)
10*2
(cid:16)
*7
1
2*6
rCe
(cid:32)
10*2
(cid:16)
*7
e
2
rF
6
(4)
These  formulae  have  been  found  by  curve  fitting  for  the 
data of the above curves. The curves in Figure 7, showing 
the data and the curve fitted formula, illustrate the accuracy 
of the formula. Note that if the circuit is pushed enough not 
to allow any voltage swing, the error probability will be 1. 
However, the circuit is never pushed to these limits. Note 
that, this particular fault model is applicable for a specific 
circuit  element,  register  file  in  current  work.  The  other 
parts  of  the  circuit  won’t  follow  the  same  fault  model. 
However, using similar procedure, it is possible to come up 
with accurate fault models for other parts of the processor. 
In  our  earlier  studies  we  have  developed  a  fault  model 
which predicts the fault occurrence probability in the data 
cache [11].
The  overclocking  of  the  register  file  can  be  implemented 
either statically or dynamically. For static implementation, 
the  clock  rate  would  be  decided  at  the  design  time.  This 
will  be  performed  by  setting  the  clock  period  higher  than 
the estimated delay. This scheme won’t require a separate 
clock for the register file. Dynamic implementation, on the 
other  hand,  would  adjust  the  clock  of  the  system  to  a 
higher  (lower)  value  as  the  amount  of  error  is  below 
(above)  a  predetermined  threshold  value.  However,  this 
dynamic adjustment has a high hardware overhead. Hence, 
in our work we utilize a static overclocking scheme. 
Error 
Detection & 
Correction
e
t
i
r
w
Register
File
error detected
k
c
e
h
c
Function
Units
Figure 8. System overview of error detection and correction. 
Straddled area and dotted lines indicate the enhancements.
3.  ERROR TYPES AND DETECTION
Since  we  are  going  to  change  the  voltage  swing  (i.e. 
overclock  the  register  file),  errors  can  occur  during  the 
4
writing of a register value or during the reading. In either 
case, the error(s) should be detected. So, all of the schemes 
we  will  discuss  requires  a  detection  mechanism.  Figure  8 
presents  the  register  file  and  function  unit  segment  of  the 
architecture  enhanced  with 
the  error  detection  and 
correction.  The  Error  Detection  &  Correction  (EDC) 
hardware  stores  the  extra  data  bits  and  logic  needed  to 
perform the error detection and correction. During reading, 
the value from the register file is provided to the function 
units  before  it  is  checked.  While  the  function  units  are 
operating,  the  error  detection  is  performed.  If  an  error  is 
detected,  the  output  of  the  function  unit  is  omitted,  the 
instruction  is  marked  as  corrupted  and  it  is  “replayed”. 
Since  the  output  of  this  instruction  will  not  be  written  to 
the  register  file,  all  the  dependent  instructions  will  be 
replayed automatically. The original instruction that caused 
the  error  itself  will  be  checked  at  the  flags  stage  of  the 
pipeline  and  replayed,  because  of  the  “corrupted”  mark. 
Replay  mechanisms  have  become  an  essential  part  of 
deeply-pipelined  processors.  In  this  scheme,  the  re-
execution  is  initiated  by  the  replay  mechanism,  which 
detects  the  instructions  that  do  not  receive  correct  input 
values (incorrect value can be caused by a cache miss) and 
re-executes  them  by  informing  the  issue  queue.  As 
described above, we utilize the same hardware structures to 
re-execute  the  instructions  that  receive  incorrect  input 
values due to read or write errors. This way we can overlap 
the  error  detection  with  function  unit  computation  and 
therefore push the detection circuit out of the critical path 
of the processor. Note that several processor architectures 
employ  error  detection  and  recovery  schemes  in  their 
register  files,  e.g.  IBM  G5  uses  an  ECC-based  scheme 
[20]. Therefore, the error detection required in our scheme 
would not incur an additional penalty.
An  error  detected  during  the  reading  will  initiate  an  error 
check for the register value, because a read error might be 
caused  by  a  write  error  (i.e.  if  the  value  written  is 
incorrectly).  During  writes,  we  have  to  generate  the 
detection  bits  in  the  EDC  circuit.  If  the  same  register  is 
accessed  in  the  next  cycle  after  write,  we  do  not  start  the 
detection  until  the  value  is  placed  into  the  output.  This 
gives us a one-cycle window after the write is completed. 
Therefore,  the  generation  of  the  detection  bits  can  be 
performed on the background in two cycles. However, the 
detection  should  be  done  in  a  single  cycle  (there  can  be 
single-cycle  function  units).  Particularly,  the  detection 
should  be  done  in  the  time  the  slowest  function  unit 
operation  completes.  Although  this  overlapping  allows  us 
to  use  EDC  mechanisms  off  the  critical  path,  we  still 
cannot implement very complicated EDC mechanisms. 
The  errors  during  writes  will  be  detected  during  reads  as 
explained  above.  If  an  error  is  detected  and  can  be 
corrected,  the  instruction  will  be  replayed.  If  the  error 
cannot  be  corrected,  we  use  check-pointing  techniques  to 
restore the state of the processor to a correct one. We must, 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
however,  note  that  in  the  experiments  in  Section  5,  the 
probability of a rollback when the error correction schemes 
were  utilized  was  always  less  than  the  probability  of  a 
rollback with the base architecture that do not utilize error 
recovery but allows full voltage swing. Hence, in practice 
we reduce the probability of system failures and rollbacks 
due to errors even if we increase the frequency.
[6]) 
are 
codes 
or  Hamming 
4.  ERROR CORRECTION SCHEMES
We  propose  different  error  correction  schemes  to  be used 
to increase the reliability of register files in the processors. 
First,  we  discuss  the  applicability  of  existing  error 
correction/detection  techniques  in  Section  4.1.  Then,  we 
propose 
redundancy-based  schemes.  We  present  a 
replication-based scheme (RP) in Section 4.3.  
4.1  ECC-BASED SCHEMES
There is a large space of possible implementations for error 
correction.  Our  framework  can  utilize  any  of  these 
techniques.  However,  these  techniques  (such  as  Reed-
Solomon 
usually 
computationally complex. Hence, they would not be able to 
capture  the  errors  in  the  required  time.  As  we  have 
discussed in the last section, errors should be detected in a 
single  processor  cycle.  For  a  4  GHz  processor,  this 
corresponds to 0.25ns. To our best knowledge, none of the 
existing  ECC  techniques  would  be  able  to  meet  this  time 
constraint.  In  the  cases  where  the  errors  occur  randomly, 
Hamming codes have been shown to be efficient to recover 
from  the  errors.  Therefore,  we  consider  them  as  an 
alternative error correction scheme. In our simulations, we 
use a code for detecting 2-bit errors and correcting single-
bit errors. Since we simulate 64-bit registers, this requires 8 
additional bits for each register. 
Parity and ECC are two common alternatives for protecting 
register  files  against  transient  errors.  Although  a  parity-
based  protection  is  not  expensive  to  accommodate  (from 
both  performance  and  energy  perspectives),  it  is  limited 
since no error correction is provided. ECC schemes, on the 
other  hand,  can  correct  single  or  multiple  bit  errors. 
However, they incur high power consumption and latency 
overheads. Even a simple ECC scheme can take up to three 
times  the  delay  of  a  simple  ALU  operation  [25].  More 
importantly,  the  energy  consumption  of  an  ECC-based 
scheme can be as high as an order of magnitude larger than 
the  energy  consumed  during  a  register  access  [15]. 
Therefore,  a  scheme  that  provides  correction  with  small 
energy and delay overhead is desirable. 
4.2  REDUNDANCY-BASED SCHEMES
High  performance  processors  aim  to  execute  multiple 
instructions  per  cycle.  One  important  obstacle  to  achieve 
this  is  the  dependencies  between  instructions.  Although 
RAW  (reading  a  value  after  it  has  written)  dependencies 
cannot be eliminated, register renaming is used to eliminate 
WAW  (write  after  write)  and  WAR  (write  after  read) 
register 
register, 
renaming  maps 
dependencies.  To  perform  register  renaming,  processors 
implement  more  physical  registers 
than  architectural 
registers. For example, Pentium 4 has 128 integer registers 
for  8  architectural  (i.e.  logical)  registers  [8].  Similarly, 