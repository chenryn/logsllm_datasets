推送映像的动作会添加数字签名，在这种情况下，使用`elton`帐户的证书并为存储库创建新的密钥对。DTR 记录了每个映像标签的签名，在 UI 中我可以看到`v2`映像标签的签名是:
![](img/2dfc1580-d358-4b20-ada7-acac29c0dd88.png)
用户可以推送图片来添加自己的签名。这实现了一个批准管道，授权用户拉一个映像，运行他们需要的任何测试，然后再次推送它以确认他们的批准。
DTR uses Notary to manage access keys and signatures. Like SwarmKit and LinuxKit, Notary is an open source project that Docker integrates into a commercial product, adding features and providing support. To see image signing and content trust in action, check out my Pluralsight course, *Getting Started with Docker Datacenter*.
UCP 与 DTR 联合验证映像签名。在“管理设置”中，您可以配置 UCP，使其运行来自组织中已知团队签名的映像的容器:
![](img/1e574805-ce05-490b-b97e-c170869b6550.png)
我已经配置了 Docker 内容信任，这样 UCP 将只运行由“书呆子晚餐行动”团队成员签名的容器。这明确地捕获了发布批准工作流，并且平台强制执行它。即使是管理员也无法从所需团队的用户尚未签名的映像中运行容器—UCP 将抛出一个错误，指出映像不符合签名策略:
![](img/94659751-ead8-47c1-b879-881b3dbb21c3.png)
构建一个安全的软件供应链就是要建立一个自动化的管道，在这个管道中，您可以保证映像已经由一个已知的用户帐户推送，它们满足特定的质量标准，并且它们已经由一个已知的用户帐户签名。DTR 提供了使用詹金斯或 Azure DevOps 等工具将其集成到配置项管道中的所有功能。您可以使用任何自动化服务器或服务，只要它能够运行 shell 命令并响应 web hooks——这几乎是每个系统都有的。
There's a Docker Reference Architecture that covers the secure supply chain in detail, using GitLab as the example CI server and showing you how to integrate a secure delivery pipeline with Docker Hub or DTR. You can find it at [https://success.docker.com/article/secure-supply-chain](https://success.docker.com/article/secure-supply-chain).
# 金色映像
映像和注册表的最后一个安全考虑因素是用于应用映像的基础映像的来源。在生产中运行 Docker 的公司通常会限制开发人员可以用于某个集合的基本映像，这些映像已经过基础架构或安全利益相关者的批准。这组可供使用的黄金映像可能只是在文档中捕获，但是使用私有注册表更容易实现。
Windows 环境中的黄金映像可能仅限于两个选项:一个版本的 Windows Server Core 和一个版本的 Nano Server。运营团队可能会从微软的基础映像构建定制映像，而不是允许用户使用公共的微软映像。自定义映像可能会添加安全性或性能调整，或者设置一些适用于所有应用的默认值，例如打包公司的证书颁发机构证书。
使用 DTR，您可以为所有基础映像创建一个组织，其中运营团队对存储库具有读写访问权限，而所有其他用户都具有读取访问权限。检查映像是否使用了有效的基本映像只意味着检查 Dockerfile 是否使用了基本映像组织中的映像，这是一个很容易在您的配置项/光盘过程中实现自动化的测试。
黄金映像为您的组织增加了管理开销，但随着越来越多的应用转移到 Docker，这种开销变得有价值。拥有您自己的 ASP.NET 映像，并使用贵公司的默认值进行部署和配置，这使得安全团队可以轻松审核该基础映像。您还拥有自己的发行节奏和注册表的域名，因此您不需要在 Dockerfiles 中使用晦涩难懂的映像名称。
# 理解群体模式下的安全性
Docker 的深度安全方法覆盖了整个软件生命周期，从构建时的映像签名和扫描到运行时的容器隔离和管理。本章最后，我将概述在集群模式下实现的安全特性。
分布式软件提供了许多有吸引力的攻击媒介。组件之间的通信可以被拦截和修改。流氓代理可以加入网络并访问数据或运行工作负载。分布式数据存储可能会受到损害。Docker swarm 模式建立在开源的 SwarmKit 项目之上，它在平台级别处理这些向量，因此默认情况下，您的应用运行在安全的基础上。
# 节点和连接令牌
你可以通过运行`docker swarm init`切换到群体模式。该命令的输出为您提供了一个可以使用的令牌，以便其他节点可以加入群。工人和经理有各自的代币。没有令牌，节点无法加入群，因此您需要像保护任何其他机密一样保护令牌。
The join tokens are comprised of the prefix, the format version, the hash of the root key, and a cryptographically strong random string.
Docker 为令牌使用固定的`SWMTKN`前缀，因此您可以运行自动检查来查看令牌是在源代码中还是在另一个公共位置被意外共享。如果令牌被泄露，流氓节点可以加入群，如果他们可以访问您的网络。群模式可以使用特定的网络进行节点流量，因此您应该使用不可公开访问的网络。
可以使用`join-token rotate`命令轮换加入令牌，该命令可以针对工作令牌或管理令牌:
```
> docker swarm join-token --rotate worker
Successfully rotated worker join token.
To add a worker to this swarm, run the following command:
 docker swarm join --token SWMTKN-1-0ngmvmnpz0twctlya5ifu3ajy3pv8420st...  10.211.55.7:2377
```
令牌轮换是一个完全由群管理的操作。现有节点全部更新，任何错误情况，如节点脱机或加入中间循环，都得到妥善处理。
# 加密和机密
群节点之间的通信使用**传输层安全性** ( **TLS** )进行加密。创建群时，群管理器将自己配置为证书颁发机构，当每个节点加入群时，管理器会为它们生成证书。群中节点之间的通信使用相互 TLS 加密。
相互 TLS 意味着节点可以安全地相互通信和信任，因为每个节点都有一个可信的证书来标识自己。节点被分配一个证书中使用的随机标识，因此群不依赖主机名等属性，主机名可能是伪造的。
节点间的可信通信是集群模式下 Docker Secrets 的基础。机密被存储和加密在管理者的 Raft 日志中，并且只有当工作人员将要运行使用该机密的容器时，机密才被发送给该工作人员。机密总是在传输过程中使用相互 TLS 加密。在工作节点上，机密以纯文本形式存在于临时内存驱动器上，该驱动器作为卷装载呈现给容器。数据从不保存为纯文本。
Windows doesn't have a native RAM drive, so the secrets implementation currently stores the secret data on the disk on the worker nodes, with the recommendation that BitLocker is used for the system drive. Secret files are secured with ACLs on the host.
在容器内部，对机密文件的访问仅限于某些用户帐户。在 Linux 中可以指定可以访问的帐户，但是在 Windows 中，目前有一个固定的列表。我在[第 7 章](07.html)、*用 Docker Swarm* 编排分布式解决方案中使用了 ASP.NET web 应用中的机密，您可以在那里看到我配置了 IIS 应用池来使用具有访问权限的帐户。
当容器被停止、暂停或移除时，容器可用的机密将从主机中移除。在当前将机密保存到磁盘的 Windows 上，如果主机被强制关闭，则在主机重新启动时会删除机密。
# 节点标签和外部访问
一旦节点被添加到群集中，它就是要调度的容器工作负载的候选节点。许多生产部署使用约束来确保应用在正确类型的节点上运行，Docker 将尝试将请求的约束与节点上的标签相匹配。
在受监管的环境中，您可能需要确保应用仅在满足所需审核级别的服务器上运行，例如信用卡处理的 PCI 合规性。您可以使用标签来标识兼容节点，并使用约束来确保应用只在这些节点上运行。群体模式有助于确保这些约束得到正确实现。
在集群模式中有两种类型的标签:引擎标签和节点标签。引擎标签是由机器在 Docker 服务配置中设置的，因此，如果工作人员受到威胁，攻击者可以添加标签，并使他们拥有的机器看起来是兼容的。节点标签由群设置，因此只能由有权访问群管理器的用户创建。节点标签意味着您不必依赖单个节点的声明，因此，如果它们受到损害，影响可能会很有限。
节点标签在隔离对应用的访问时也很有用。您可能拥有只能在您的内部网络上访问的 Docker 主机，以及可以访问公共互联网的其他主机。有了标签，您可以显式地将其记录为一个区别，并基于标签运行带有约束的容器。您可以在一个容器中拥有一个内容管理系统，该系统只能在内部使用，但可以在公共场合使用 web 代理。
# 与容器安全技术的集成
Docker Swarm 是一个安全的容器平台，因为它使用开源组件和开放标准，所以它与第三方工具很好地集成在一起。当应用在容器中运行时，它们都公开相同的应用编程接口——您可以使用 Docker 来检查容器中运行的进程，查看日志条目，导航文件系统，甚至运行新的命令。容器安全生态系统正在发展强大的工具，利用这些工具在运行时增加更多的安全性。
如果您正在寻找 Windows 容器的扩展安全性，有两个主要供应商需要评估:Twistlock 和 Aqua Security。两者都有全面的产品套件，包括映像扫描和机密管理，以及运行时保护，这是为您的应用增加安全性的最具创新性的方式。
当您将运行时安全产品部署到集群时，它会监视容器并构建该应用典型行为的概要文件，包括 CPU 和内存使用情况以及进出的网络流量。然后，它在该应用的实例中寻找异常，其中容器开始表现得不同于预期的模型。这是一种识别应用已被破坏的强大方法，因为攻击者通常会开始运行新的进程或移动异常数量的数据。
以 Aqua Security 为例，它为 Windows 上的 Docker 提供了全套保护，扫描映像并为容器提供运行时安全控制。这包括防止容器运行不符合安全标准的映像—标记为 CVE 严重性或平均分数、黑名单和白名单包、恶意软件、敏感数据和自定义合规性检查。
Aqua 还强制实现容器不变性，将运行的容器与其原始映像进行比较，并防止更改，如安装新的可执行文件。这是防止恶意代码注入或试图绕过映像管道控件的强大方法。如果您从一个包含大量实际上不需要的组件的大型基础映像构建映像，Aqua 可以对攻击面进行分析，并将实际需要的功能和能力列入白名单。
这些功能适用于容器中的旧应用，就像适用于新的云原生应用一样。能够将安全性深入添加到应用部署的每一层，并对可疑的危害进行自动实时监控，这使得安全性成为转移到容器的最重要原因之一。
# 摘要
本章介绍了 Docker 和 Windows 容器的安全注意事项。您了解到 Docker 平台是为了深度安全而构建的，容器的运行时安全性只是故事的一部分。安全扫描、映像签名、内容信任和安全分布式通信可以结合起来，为您提供一个安全的软件供应链。
您研究了在 Docker 中运行应用的实际安全方面，并了解了 Windows 容器中的进程是如何在一个使攻击者难以逃离容器并入侵其他进程的上下文中运行的。容器进程将使用它们需要的所有计算资源，但是我还演示了如何限制 CPU 和内存的使用，这可以防止流氓容器耗尽主机的计算资源。
在一个文档化的应用中，您有更多的空间来深入实现安全性。我解释了为什么最少的映像有助于保持应用的安全，以及如何使用 Docker 安全扫描在应用使用的任何依赖关系中存在漏洞时发出警报。您可以通过对映像进行数字签名来实现良好的做法，并配置 Docker，使其仅运行来自已获批准用户签名的映像的容器。
最后，我看了 Docker Swarm 中的安全实现。Swarm 模式具有所有编排层中最深入的安全性，它为您安全运行应用提供了坚实的基础。使用机密存储敏感的应用数据和节点标签来识别主机合规性使您能够非常轻松地运行安全的解决方案，开放的应用编程接口使您能够轻松集成第三方安全增强功能，如 Aqua。
在下一章中，我们将使用分布式应用，并考虑为 CI/CD 构建一个管道。Docker 引擎可以配置为提供对 API 的远程访问，因此可以轻松地将 Docker 部署与任何构建系统集成。配置项服务器甚至可以在 Docker 容器中运行，您可以将 Docker 用于构建代理，因此您不需要任何复杂的配置项/光盘配置。