    tmp = ((tmp > 0x12)^tmp
    s.add(tmp == 1877735783)
    s.add((tmp&0xff) > 32, (tmp&0xff) > 0x11)&0xffffffff
    tmp = ((b^a)^flag)&0xffffffff
    tmp = ((tmp > 0x11)&0xffffffff
    tmp = (a^b^t)&0xffffffff
    tmp = ((tmp  32, (tmp&0xff)  0, a  0, b >> s = "c232666f1410b3f5010dc51cec341f58"
    >>> s = bytes.fromhex(s)
    >>> s
    b'\xc22fo\x14\x10\xb3\xf5\x01\r\xc5\x1c\xec4\x1fX'
    >>> s = [s[i]+1 for i in range(len(s))]
    >>> s
    [195, 51, 103, 112, 21, 17, 180, 246, 2, 14, 198, 29, 237, 53, 32, 89]
    >>> bytes(s).hex()
    'c33367701511b4f6020ec61ded352059'
    >>>
查一下这个md5，得到：654321
nc连接给的ip和端口后输入密码得到密钥。
最后解密：
    import base64
    s = "TGtUnkaJD0frq61uCQYw3-FxMiRvNOB/EWjgVcpKSzbs8yHZ257X9LldIeh4APom"
    table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    enc = "3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P"
    ans = enc.translate(str.maketrans(s, table))
    print(bytes(list(base64.b64decode(ans))))
    #SangFor{212f4548-03d1-11ec-ab68-00155db3a27e}
## Safe Box
程序用到父子进程反调试，Debug Blocker技术，其它来说流程都很清晰。
利用int3（0x80000003）断点把异常传递给父进程，然后父进程根据断点位置的不同进行不同的操作。
其中断点位置下个机器码是0x8b的地方将ecx改写了。
看到触发这个异常地方的代码：其实就是把随机数种子改成了0x534EB68
另外一个触发断点异常位置的下一个机器码是0x48的地方是进行对程序中的一个函数进行了解密。
再来看到程序的主逻辑：
第一输入：
这里z3约束求解即可。
    from z3 import *
    s = Solver()
    Seed = BitVec('passwd', 64)
    v2 = (Seed % 0x2540BE3FF)&0xff
    v3 = ((Seed % 0x2540BE3FF) >> 8) & 0xF
    v4 = ((Seed % 0x2540BE3FF) >> 20) & 0xFFF
    v5 = v2 + 1;
    v6 = ((Seed % 0x2540BE3FF) >> 12)&0xff
    v7 = v3 + 1;
    v8 = v4 + ~v2
    v9 = v4
    v10 = 21 * v6
    for i in range(16):
        v3 += v3 ^ v8
        v2 += v4 | v2 & v7
        v9 += (v10 + v9) % v5
        v6 += v6 / v7
    s.add(v3 == 0x38006F1)
    s.add(v2 == 0x7291)
    s.add(v9 == 0x8B3)
    s.add(v6 == 0x80)
    s.add(Seed > 0, Seed  
    unsigned int get_delat()
    {
        int i = 0;
        unsigned int ans = 0, delat = 0x12345678;
        for(i = 0; i > 6) ^ (v0 >11) & 3]);  
            sum -= delta;  
            v0 -= (((v1 >> 6) ^ (v1 
    #include  
    unsigned int seed = 0x534EB68;
    unsigned int a[16], b[16];
    int main(void)
    {
        srand(seed);    
        for(int i = 0; i >> a = [0x4147, 0x2f06, 0x5017, 0x7d6c, 0x1583, 0x37ea, 0x6fdc, 0xd03, 0x3f43, 0x4156, 0xed7, 0x1094, 0x5c4f, 0x173f, 0x193a, 0x1357]
    >>>
    >>> b = [0x4118, 0x2F62, 0x00005027, 0x00007D33, 0x000015DA, 0x00003785, 0x00006F89, 0x00000D5C, 0x00003F72, 0x0000413F, 0x00000EBC, 0x000010A7, 0x00005C10, 0x0000174B, 0x0000190A, 0x00001338]
    >>> ans = [a[i]^b[i] for i in range(16)]
    >>> ans
    [95, 100, 48, 95, 89, 111, 85, 95, 49, 105, 107, 51, 95, 116, 48, 111]
    >>> bytes(ans)
    b'_d0_YoU_1ik3_t0o'
最后所有拼接起来就是flag： **GWHT{r3_1S_s0_fuNny_d0_YoU_1ik3_t0o}**