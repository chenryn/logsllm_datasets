title:Radmin: Early Detection of Application-Level Resource Exhaustion and
Starvation Attacks
author:Mohamed Elsabagh and
Daniel Barbar&apos;a and
Dan Fleck and
Angelos Stavrou
Radmin: Early Detection of Application-Level
Resource Exhaustion and Starvation Attacks
Mohamed Elsabagh(B), Daniel Barbar´a, Dan Fleck, and Angelos Stavrou
George Mason University, Fairfax, USA
{melsabag,dbarbara,dfleck,astavrou}@gmu.edu
Abstract. Software systems are often engineered and tested for func-
tionality under normal rather than worst-case conditions. This makes the
systems vulnerable to denial of service attacks, where attackers engineer
conditions that result in overconsumption of resources or starvation and
stalling of execution. While the security community is well familiar with
volumetric resource exhaustion attacks at the network and transport lay-
ers, application-speciﬁc attacks pose a challenging threat. In this paper,
we present Radmin, a novel system for early detection of application-
level resource exhaustion and starvation attacks. Radmin works directly
on compiled binaries. It learns and executes multiple probabilistic ﬁnite
automata from benign runs of target programs. Radmin conﬁnes the
resource usage of target programs to the learned automata, and detects
resource usage anomalies at their early stages. We demonstrate the eﬀec-
tiveness of Radmin by testing it over a variety of resource exhaustion and
starvation weaknesses on commodity oﬀ-the-shelf software.
Keywords: Resource exhaustion · Starvation · Early detection · Prob-
abilistic ﬁnite automata
1 Introduction
Availability of services plays a major – if not the greatest – role in the sur-
vivability and success of businesses. Recent surveys [2,5] have shown that IT
managers and customers alike tend to prefer systems that are more often in
an operable state, than systems that may oﬀer higher levels of security at the
expense of more failures. This means that any disruption to the availability of
a service is directly translated into loss of productivity and proﬁt. Businesses
invest in deploying redundant hardware and replicas to increase the availability
of the services they oﬀer. However, as software designers often overlook Saltzer-
Schroeder’s “conservative design” principle [32], systems are often engineered
and tested for functionality under normal rather than worst-case conditions.
As a result, worst-case scenarios are often engineered by the attackers to over-
consume needed resources (resource exhaustion), or to starve target processes of
resources (resource starvation), eﬀectively resulting in partial or complete denial
of service (DoS) to legitimate users.
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 515–537, 2015.
DOI: 10.1007/978-3-319-26362-5 24
516
M. Elsabagh et al.
A system is exposed to resource exhaustion and starvation if it fails to prop-
erly restrict the amount of resources used or inﬂuenced by an actor [3]. This
includes, but is not limited to, infrastructure resources, such as bandwidth and
connection pools, and computational resources such as memory and cpu time.
The attacks can operate at the network and transport layers [37], or at the appli-
cation layer such as algorithmic and starvation attacks [17,18]. The asymmet-
ric nature of communication protocols, design and coding mistakes, and inher-
ently expensive tasks all contribute to the susceptibility of programs to resource
exhaustion and starvation attacks. Attacks targeting the network and trans-
port layers have attracted considerable research attention [21,23,31]. Meanwhile,
attacks have become more sophisticated and attackers have moved to higher lay-
ers of the protocol stack. Since 2010, resource exhaustion attacks that target the
application layer have become more prevalent [1,17] than attacks at the network
layer and transport layer.
In this paper, we present Radmin, a system for automatic early detection
of application-level resource exhaustion and starvation attacks. By application-
level attacks we refer to the classes of DoS attacks that utilize small, specially
crafted, malicious inputs that cause uncontrolled resource consumption in victim
applications. To this end, Radmin traces the resource consumption of a target
program in both the user and kernel spaces (see Sect. 3), builds and executes
multiple state machines that model the consumption of the target program.
The key observation is that attacks result in abnormal sequences of tran-
sitions between the diﬀerent resource consumption levels of a program, when
compared to normal conditions. By modeling the resource consumption levels
as multiple realizations of a random variable, one can estimate a conditional
distribution of the current consumption level given the history (context) of mea-
surements. Consequently, the statistical properties of the resulting stochastic
process can be used to detect anomalous sequences.1
Radmin operates in two phases: oﬄine and online. In the oﬄine phase, the
monitored programs are executed on benign inputs, and Radmin builds mul-
tiple Probabilistic Finite Automata (PFA) models that capture the temporal
and spatial information in the measurements. The PFA model is a ﬁnite state
machine model with a probabilistic transition function (see Sect. 4). Both the
time of holding a resource, and the amount used of that resource are mapped
to states in the PFA, while changes in the states over the time are mapped to
transitions.
In the online phase, Radmin executes the PFAs as shadow resource consump-
tion state machines, where it uses the transition probabilities from the PFAs to
detect anomalous consumption. Additionally, Radmin uses a heartbeat signal to
time out transitions of the PFAs. Together with the transition probabilities, this
enables Radmin to detect both exhaustion and starvation attacks.
Radmin aims at detecting attacks as early as possible, i.e., before resources are
wasted either due to exhaustion or starvation. Radmin does not use any
1 Unless stated otherwise, we use “measurements” and “sequences” interchangeably
in the rest of this paper.
Radmin: Early Detection of Application-Level Resource Exhaustion
517
static resource consumption thresholds. Instead, the PFAs capture the transitions
between the diﬀerent consumption levels of diﬀerent program states, and statis-
tics of the PFAs are used to detect anomalies. The PFAs allow Radmin to implic-
itly map diﬀerent program states, i.e., program behavior at some execution point
given some input, to dynamic upper and lower resource consumption bounds.
We quantiﬁed the earliness of detection as the ratio of resources that Radmin
can save, to the maximum amounts of resources that were consumed in benign con-
ditions (see Sect. 5). This corresponds to the tightest static threshold that tradi-
tional defenses can set, without causing false alarms. Radmin has an advantage
over all existing defenses that use static thresholds (see Sect. 7), since exhaustion
and starvation attacks can evade those defenses. Exhaustion attacks can consume
the highest amounts of resources possible, just below the static threshold [1,17].
Additionally, starvation attacks, by design, do not aim at directly consuming
resources such as attacks that trigger deadlocks or livelocks [17].
To summarize, this study makes the following contributions:
– Radmin. A novel system that can detect both resource exhaustion and starva-
tion attacks in their early stages. Radmin employs a novel detection algorithm
that uses PFAs and a heartbeat signal to detect both exhaustion and starva-
tion attacks. Radmin takes both temporal and spatial resource consumption
information into account and adds minimal overhead.
– Working Prototype2. We implement a prototype that uses kernel event
tracing and user space instrumentation to eﬃciently and accurately monitor
resource consumption of target processes.
– Evaluation. We demonstrate the eﬀectiveness of Radmin using a wide range
of synthetic attacks against a number of common Linux programs. We show
that Radmin can eﬃciently detect both types of anomalies, in their early
stages, with low overhead and high accuracy.
The rest of the paper is organized as follows. Section 2 discusses the assump-
tions and threat model. Section 3 presents the technical details of Radmin and its
implementation. Section 4 describes the models used in Radmin and the detec-
tion algorithm. Section 5 evaluates Radmin. Section 6 provides a discussion of
diﬀerent aspects of Radmin and possible improvements. We discuss related work
in Sect. 7, and conclude in Sect. 8.
2 Assumptions and Threat Model
Radmin’s main goal is early detection of application-level resource exhaustion
and starvation, which may result in full or partial depletion of available resources
(CPU time, memory, ﬁle descriptors, threads and processes) or in starvation
and stalling. We assume that actors can be local or remote, with no privilege to
overwrite system binaries or modify the kernel.
We consider the following types of exhaustion and starvation attacks. First,
attacks that result in a sudden surprisingly high or low consumption of resources
2 Source code available under GPLv3 at: https://github.com/melsabagh/radmin.
518
M. Elsabagh et al.
(e.g., an attacker controlled value that is passed to a malloc call). Second, attacks
that result in atypical resource consumption sequences such as algorithmic and
protocol-speciﬁc attacks that aim at maximizing (ﬂattening) the amounts of
consumed resources. Third, attacks that result in stalling of execution, including
triggering livelocks or prolonged locking of resources.
Although, in our experiments, we considered only programs running on x86
Linux systems and following the Executable and Linkable Format (ELF), the
proposed approach places no restrictions on the microarchitecture, the binary
format, or the runtime environment.
3 System Architecture
The major components of Radmin are a kernel space tracing module (Ker-
nel Tracer), a user space tracing library (User Tracer), and a daemon process
(Guard) where the bulk of processing takes place. The tracing modules monitor
and control a target program by binding checkpoints to events of interest, in
the execution context of the target. Checkpoints are functions in the tracing
modules that are called when an event of interest is triggered. Each checkpoint
communicates measurements and control information to the Guard. We refer to
a code site at which an event was triggered as a checkpoint site. Figure 1 shows
the system architecture of Radmin.
Radmin takes a target program binary as input, and operates in two phases:
oﬄine and online. In the oﬄine phase, Radmin instruments the target binary by
injecting calls to the User Tracer into the binary, and writes the instrumented
binary to disk. The instrumented program is then executed over benign inputs,
while Radmin monitors its execution in both the user and kernel spaces, using
the User Tracer and the Kernel Tracer modules, respectively. During that stage,
the Guard receives the measurements from the tracers and learns multiple PFAs
Fig. 1. Architecture of Radmin. The User Tracer, and Kernel Tracer, monitor and
collect measurements from a target program by binding checkpoints to events of interest
in both the user and kernel spaces. They send the measurements to the Guard, where
the bulk of processing takes places.
Radmin: Early Detection of Application-Level Resource Exhaustion
519
Table 1. Checkpoint sites monitored by the tracing modules. Checkpoint sites used
by the Kernel Tracer are given in the SystemTap probes notation.
Checkpoint Site
vm.brk, vm.mmap, vm.munmap
kernel.do sys open, syscall.close
Recursive sites
Sites that manipulate the stack pointer
scheduler.ctxswitch, perf.sw.cpu clock
Heartbeat every 500 ms
User/Kernel Resource Type
Kernel
Kernel
User
Kernel
Both
Memory
File descriptors
Stack
CPU
scheduler.wakeup new, kprocess.exec complete Kernel
Child tasks
kprocess.exit
that capture the resource consumption behavior of the target program. Finally,
in the online phase, the Guard executes the PFAs along with the target program,
and raises an alarm if a deviation of the normal behavior is detected (see Sect. 4).
Each measurement is a vector of (cid:2)consumed kernel time, consumed user time,
consumed resource amount(cid:3) associated with a resource type and a task3 ID. Here,
“consumed resource amount” accounts for the total amount of a resource that
would be in consumption if the allocation or deallocation request is granted. We
tracked parent-child task relationships by recording both the parent and current
task IDs, in addition to the process ID. The measurement vectors accurately
capture the resource consumption behavior of a process, as they map out both
the sequences of resource consumption changes and the time for each change,
which eﬀectively captures both the temporal and spacial information in the
resource consumption behavior of the process.
We developed the user space components in C/C++, using the Dyninst [4]
library for static binary rewriting. The kernel tracer was developed using Sys-
temTap [8]. A number of coordination scripts and a command line interface were
also developed in Shell Script.
A summary of the checkpoint sites and the associated resource types is shown
in Table 1, which we discuss in the following sections.
3.1 Kernel Tracer
The Kernel Tracer binds checkpoints to various kernel events by binding probes
to the corresponding kernel tracepoints. Kernel tracepoints provide hooks to var-
ious points in the kernel code by calling functions (probes) that are provided at
runtime by kernel modules [20]. Binding to the centralized, well-deﬁned, kernel
tracepoints associated with resource (de)allocation is more robust than attempt-
ing to enumerate and trace, from user space, all possible ways a program can
3 Unless stated otherwise, we use “task” to indistinguishably refer to child processes
and threads spawned by a monitored program.
520
M. Elsabagh et al.
(de)allocate resources through library calls. Additionally, kernel tracing gives
maximum visibility into the target process, allows for low-penalty monitoring
and control of the target.
The Kernel Tracer keeps track of task creation by binding to the kernel
scheduler wakeup tracepoint (scheduler.wakeup new), which is triggered when
a task is being scheduled for the ﬁrst time. It monitors task destruction by
binding to the task exit tracepoint (kprocess.exit). The tracer also monitors
processes overlaid by the exec call family by binding to the exec completion
tracepoint (kprocess.exec complete).
For memory monitoring, the Kernel Tracer install probes for the tracepoints
that are triggered upon the allocation of contiguous memory (vm.brk), memory
regions (vm.mmap), and the release of memory to the kernel (vm.munmap). For ﬁle
monitoring, probes are installed for tracepoints that are triggered when ﬁle descrip-
tors are allocated (kernel.do sys open) or released (syscall.close). For CPU
monitoring, the Kernel Tracer keeps track of the consumed clock ticks by bind-
ing to the scheduler tracepoints that trigger when monitored tasks context switch
(scheduler.ctxswitch), and when the kernel clock ticks (perf.sw.cpu clock)
inside the context of a monitored task. The reason for monitoring only those two
events is to minimize the overhead of proﬁling the CPU time.
It is important to note that even though memory is monitored from the kernel
module, user space processes can exhaust their stack space without interfacing
with the kernel. Therefore, we decided to include additional checkpoints for
monitoring the stack in user space.
3.2 User Tracer
The User Tracer consists of a user space library, where calls to that library
are injected in the target binary at assembly sites of interest. The User Tracer is
injected as follows. First, Radmin statically parses the input binary and extracts
a Control Flow Graph (CFG) using the Dyninst ParseAPI library. It then ana-
lyzes the CFG to identify assembly sites that dynamically operate on the stack
such as recursive calls (direct and indirect) and variable length arrays. Radmin
injects calls to the tracer library at the marked sites in the binary, and saves the
modiﬁed binary to disk.
To calculate the stack size consumed by recursive call sites, we ﬁrst
experimented with two options: (a) parse the process memory maps from
/proc/pid/smaps, and (b) unwinding the stack. Both options proved unreliable.
The obtained values from smaps were too coarse to reﬂect actual stack consump-
tion. Unwinding the stack was very expensive, and required special arrangements
at compilation time, such as the usage of frame pointers, that were not feasible
to attain since we are directly working with compiled programs. Instead, Rad-
min implements a workaround by tagging (marking) the stack inside the caller
function site, at a point directly before the recursive call, then calculating the
distance from the entry point of the recursive callee function site to the tag. The
tag is injected only in non-recursive caller function sites, which avoids mistakenly
overwriting the tag due to indirect recursion.
Radmin: Early Detection of Application-Level Resource Exhaustion
521
Additionally, the User Tracer spawns a heartbeat thread that periodically
consumes 1 clock tick then switches out. Consequently, the heartbeat tick is
captured by the Kernel Tracer whenever the heartbeat thread is scheduled out.
It delivers a clock signal from the monitored process to the Guard, which we use
to detect starvation attacks by testing if the transitions between the PFA states
have timed out (see Sect. 4).
3.3 Radmin Guard
Figure 2 shows the underlying architecture of the Guard. In the oﬄine phase,
the Guard learns a codebook over a ﬁnite alphabet Σ, and encodes the incoming
measurements over Σ. Encoding the measurements serves two purposes: (1) it
discretizes the continuous measurements, making them useful for estimating the
conditional probabilities using the PFAs; and (2) it reduces the dimensionality