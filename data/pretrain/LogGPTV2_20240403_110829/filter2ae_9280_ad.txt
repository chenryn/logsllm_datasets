--disable-setuid-sandbox --no-sandbox`
2.使用普通用户而非 root 用户启动 chrome headless 进程
**方案 2. 更新 Chromium 内核版本（后续维护成本极高）**
下载  中的最新版本进行更新，并在后续迭代中持续升级到最新版
Chromium 的最新版本会编译最新的 MR 和 Commit，因此也会修复 Chrome 未修复的 0.5Day 漏洞，下载链接包含了所有的操作系统的
Chromium ，
例如 Linux 可访问
[https://download-chromium.appspot.com/?platform=Linux_x64&type=snapshots](https://download-chromium.appspot.com/?platform=Linux_x64&type=snapshots) 下载。
请注意，如果不希望相似的安全风险如之前的 Fastjson 那样需要反复跟进并且高频推动业务修复，强烈建议安全团队推动业务参考方案一开启
Sandbox，方案二可以当成短期方案规避当前风险。
经统计，2010 年至今 Google 共对外公开 Chromium 高危漏洞 1800 多个；Chromium 的漏洞修复十分频繁，若不开启
Sandbox，需持续更新最新版本。
若要启用 Sandbox，需要解决一定的依赖：首先，Chrome 的 Sandbox 技术依赖于 Linux 内核版本，低版本的内核无法使用。各
Sandbox 技术 Linux 内核依赖可参考下图
图片来源 官方文档
Chrome 运行时会寻找 chrome-sandbox 文件，一般下载 Chrome 的 Release 时，Chrome 程序目录下都包含了
Sandbox 程序，若无法寻找到 chrome-sandbox 文件可能会产生下述 Error 信息：
    _[0418/214027.785590:FATAL:__zygote_host_impl_linux.cc__(116)] No usable sandbox! Update your kernel or see_ 
    _https://chromium.googlesource.com/chromium/src/+/master/docs/linux/suid_sandbox_development.md_ _for more information on developing with the SUID sandbox. If you want to live dangerously and need an immediate workaround, you can try using --no-sandbox._  
可参考以下链接进行配置
若服务器的 Chrome 目录下包含了 chrome-sandbox 文件，则可以直接修改配置运行，若不包含，可前往  下载对应版本的 chrome-sandbox 文件使用。
  * 注：Chrome 可执行文件的同一目录内包含 chrome-sandbox 程序，则无需手动设置 CHROME_DEVEL_SANDBOX 环境变量
**方案 3. 客户端选择系统默认浏览器打开外链 URL**
另外一个更加合适合理的设计是尽量避免使用应用内置的浏览器打开开放性 URL 页面。我们应该尽量使用系统的浏览器去打开非公司域名的 URL
链接（同时应该注意公司域名下的 URL 跳转风险）；把打开 URL 的能力和场景交还给系统浏览器或专门的浏览器应用；保障应用内加载的资源都是可控的。
此方案同样适用于：客户端内置的 Chromium Webview 组件短时间内无法随系统快速更新，且由于历史包袱无法 Webview 组件无法开启沙箱。
此时，在客户端引入一个 “降级” 逻辑，将不可信的页面跳转交给系统默认的浏览器打开。由于系统默认的浏览器通常默认是打开沙箱的，因此不失为一种“缓兵之计”。
##### **4.2.2 云原生时代下，针对 Chrome 组件容器化的风险修复指引**
业界云原生实践的发展非常迅速，企业应用容器化、组件容器化的脚步也势不可挡。从当前的 Kubernetes 应用设计的角度出发，Chrome Headless
组件在逻辑上是非常适用于无状态应用的设计的，所以 Chrome 组件在容器化的进程也比较快。也因此，在 HIDS 进程大盘中， 启用 --no-sandbox 的 Chrome headless 进程也一直在持续增多。
如果 Chrome 浏览器组件已经实现了容器化，那么您想使用 Chrome sandbox
肯定会遇到各种麻烦；网络上有很多不完全安全的建议和文档，请尽量不要给容器添加 privileged 权限和 SYS_ADMIN
权限，这将可能引入新的风险，详情可参考 TSRC
之前的文章《[红蓝对抗中的云原生漏洞挖掘及利用实录](http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=2651203843&idx=1&sn=bfea59631468fefcec5559dc3e877483&chksm=bd2ccca58a5b45b3cae31e9839734710681017b5ff86f4dfc47f75ef2bd8ada52812d4ea7565&scene=21#wechat_redirect)》。
我们应该尽量使用例如 --security-opt 的方案对容器权限进行可控范围内的限制，构建一个 Seccomp
白名单用于更安全的支持容器场景，这是一个足够优雅且较为通用的方式。如果企业已经践行了 K8s 容器集群安全管理的规范和能力，在集群内新建带有
privileged 权限或 SYS_ADMIN 权限的应用容器是会被集群管理员明确拒绝的，Seccomp 是一个安全且可管理的方案。
你可以参考下述方式启动一个带有 seccomp 配置的容器：
docker run -it --security-opt seccomp:./chrome.json chrome-sandbox-hub-image-near --headless --dump-dom https://github.com/neargle
实际上 seccomp 配置文件规定了一个可管理的 syscall 白名单，我们的配置文件就是需要把 Sandbox
所需的系统权限用白名单方式赋予给容器，使得容器可以调用多个原本默认禁止的 syscall。可以使用下列命令来检测当前的操作系统是否支持 seccomp:
grep CONFIG_SECCOMP= /boot/config-$(uname -r)
CONFIG_SECCOMP=y
如果你的容器使用 K8s 进行部署，那你可以在 spec.securityContext.seccompProfile 中配置上述 chrome.json
文件。
通过白名单设置 Chrome 所需的 syscall 以最小化容器权限，避免容器逃逸的风险，同时也符合多租户容器集群的安全设计，是一个推荐的方案；设置
Seccomp 后，容器内可正常启用 chrome-sandbox，如下图。
根据在 HIDS 收集到的资产和内部操作系统的特性，可以利用 strace 工具很容易收集到启动 Sandbox 所需的 SysCall，并根据
SysCall 编写所需的 seccomp 配置文件。
当然直接使用开源社区里现成的配置文件也能适用于绝大部分环境，著名前端测试工具 lighthouse 所用的配置文件是一个非常不错的参考：
### **V. 总结**
随着 Chromium 在企业各场景下的广泛应用，需要针对性地设置风险例行检测及应急响应方案，涉及的风险与应用场景、检查及修复方式，可概括如下：
除 Chromium 外，企业开发时也不乏会涉及到 Safari、Firefox 等其他浏览器类组件的场景，在进行风险排查和响应时可借鉴类似的思路。
### **Ⅵ. 参考及引用**
[1] Linux Sandboxing
[2] The Security Architecture of the Chromium Browser
[3] My Take on Chrome Sandbox Escape Exploit Chain
[4] Linux SUID Sandbox
[5] How Blink Works
[6] Chrome 浏览器引擎 Blink & V8
[7] Blink-in-JavaScript
[8] core/script: How a Script Element Works in Blink
[9] [TPSA21-12] 关于 Chrome 存在安全问题可能影响 Windows 版本微信的通告
[10] Hacking Team Android Browser Exploit 代码分析
[11] [物联网安全系列之远程破解 Google
Home](http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=2651199191&idx=1&sn=d8fa6b5293cc7cac5b5f6670208abdfd&chksm=bd2cf3718a5b7a67bb7bdb9868ff38afea817fdecdd6b412214f4ea014d237fe44ef0f39cfbe&scene=21#wechat_redirect)
[12] [Android Webview UXSS
漏洞攻防](http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&mid=200919898&idx=1&sn=f5e68ad28cee0c067515cb50960c5953&chksm=28d32efc1fa4a7eace5302ada45070ee0e5f41a7598b8b3aee83ce63fcc38652a96bf94629c4&scene=21#wechat_redirect)
### **Ⅶ. 团队介绍**
**关于腾讯蓝军**
腾讯蓝军（Tencent Force）由腾讯 TEG 安全平台部于 2006
年组建，十余年专注前沿安全攻防技术研究、实战演练、渗透测试、安全评估、培训赋能等，采用 APT
攻击者视角在真实网络环境开展实战演习，全方位检验安全防护策略、响应机制的充分性与有效性，最大程度发现业务系统的潜在安全风险，并推动优化提升，助力企业领先于攻击者，防患于未然。
腾讯蓝军坚持以攻促防、攻防相长，始终与时俱进，走在网络安全攻防实战研究的最前沿。未来，腾讯蓝军也将继续通过攻防多方视角，探索互联网安全新方向，共建互联网生态安全。
**关于腾讯研发安全团队**
腾讯公司内部与自研业务贴合最紧密的一线安全工程团队之一。团队负责软件生命周期各阶段的安全机制建设，包括：制定安全规范 / 标准 /
流程、实施内部安全培训、设计安全编码方案、构建安全漏洞检测（SAST/DAST/IAST）与 Web 应用防护（WAF）系统等。
在持续为 QQ、微信、云、游戏等重点业务提供服务外，也将积累十余年的安全经验向外部输出。通过为腾讯云的漏洞扫描、WAF
等产品提供底层技术支撑，助力产业互联网客户安全能力升级。
* * *