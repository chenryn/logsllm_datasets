components are responsible for satisfying the elevator's pri-
mary objectives. However, these components are also de-
pendent on the outputs of other system components, such as
the dispatcher, button sensors, and floor sensors. We can
improve system dependability by using alternative func-
tionality to compensate for failure of these components to
preserve operation of the safety, drive control, and door
control components.
The safety monitor component requires all of its sensor
inputs to keep track of the elevator’s state and ensure that
the elevator does not violate its safety conditions. If a vio-
lation is detected, the safety monitor will trigger the emer-
gency brake and cause a complete shutdown of the elevator
system. This ensures that the primary objective of keeping
the passengers safe from injury is always satisfied. Unfor-
tunately there is no alternative functionality in the elevator
system that can satisfy this objective. Since safety is a criti-
cal feature of the system, a redundant component is appro-
priate for the safety monitor, but not for all of its sensor
inputs. A loss of any of the sensor inputs by the safety mon-
itor will by design trigger an emergency shut down.
The drive controller sends commands to the drive motor
to move the elevator to different floors and satisfies the pri-
mary objective of delivering passengers to desired floors.
It is dependent on the dispatcher component to provide the
elevator's next floor destination, and the dispatcher is in
turn dependent on the hall call and car call buttons to deter-
mine passenger requests. We can apply alternative func-
tionality to allow the drive controller to continue to
function in the event of dispatcher or button failures. We
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
designed a default behavior such that it periodically visits
every floor. When the dispatcher is working and providing
its outputs, the drive controller lets the dispatcher command
override its default behavior.
The drive controller also uses floor, drive speed, and car
position sensors to determine what commands to send to
the drive motor to travel in the hoistway. At the drive mo-
tor’s slow speed, the elevator only needs floor sensor data
to reliably stop level with a floor. In order to travel faster in
the hoistway, the drive controller uses the car position sen-
sor to calculate the appropriate stopping distance to deter-
mine when to decelerate from fast
to slow before
approaching a destination floor. We can ensure that the
drive controller will tolerate car position sensor failures by
designing it to only command the drive motor to fast if the
car position sensor’s input is available, and to command the
drive motor to slow if the car position sensor's data is lost.
This sacrifices the auxiliary objective of minimizing pas-
senger travel time to guarantee the primary objective of de-
livering all passengers when the car position sensor fails.
We also redesigned the dispatcher component to imple-
ment alternative functionality when there are hall and car
call button failures. The dispatcher implements an algo-
rithm to process passenger requests efficiently by listening
to button inputs. When a button fails, the dispatcher peri-
odically synthesizes “faked” requests for floors. This guar-
antees that
the primary objective of delivering all
passengers will be satisfied and that the dispatcher does not
“starve” floors on which all buttons have failed. This alter-
native functionality uses a trivial computation to substitute
for missing sensors. However, when failures occur, the
auxiliary objective of elevator performance may suffer be-
cause some floors may be unnecessarily visited when there
are no passengers desiring that floor.
5.2. Experimental setup
broadcast
between
periodic messages
We performed a set of experiments using a discrete
event simulation of software components, sensors, actua-
tors and a real-time network with message delay that deliv-
ers
system
components. Sensor and actuator objects interact with sim-
ulated passenger objects. Each simulation experiment
specifies a passenger profile that indicates how many pas-
sengers attempt to use the system, when they first arrive to
use the elevator, what floor they start at, and their intended
destination. The elevator system configuration is deter-
mined by setting which components are failed at the start of
the simulation.
We tested two hypotheses with these simulation experi-
ments. The first is that the changes we made to the elevator
system architecture would actually improve the system’s
ability to tolerate component failures. We measured this by
running simulations of both the original elevator architec-
ture and our improved architecture with functional alterna-
tives, and observing which system more efficiently
delivered passengers. The second hypothesis is that our
system model would accurately predict the relative utility
of system configurations, so that we could use it as a valida-
tion tool for the impact of functional alternatives on the sys-
tem's ability to tolerate component failures and continue to
satisfy primary objectives.
We selected a subset of the possible valid elevator sys-
tem configurations that represented a wide range of possi-
ble component failures. We tested several configurations in
which different subsets of car call and hall call buttons were
failed so that the elevator could not receive all passenger re-
quests. We also picked configurations in which the dis-
patcher component was failed so that no destination
commands were sent to the drive controller. There was a
total of 70 configurations tested for both the original and
gracefully degrading elevator architectures.
We also generated a set of passenger arrival profiles
with which to test each of the system configurations. Each
profile had 50 passengers, arriving randomly on different
floors. Elevator systems usually deal with three types of
traffic: two-way, down-peak, and up-peak [18]. Two-way
traffic assumes random passenger requests between floors.
Down-peak traffic is characterized by 90% of the requests
from passengers coming from a random start floor and trav-
eling to the first floor. Up-peak traffic is characterized by
90% of the requests from passengers coming from the first
floor and traveling to a random destination floor. The other
10% of passenger requests in both up-peak and down-peak
traffic profiles are random two-way requests. Our experi-
ments included 10 randomly generated passenger profiles
for each type of traffic for a total of 30 passenger tests. The
total number of simulations we ran were 2 elevator archi-
tectures x 70 configurations per elevator x 30 passenger
profiles per configuration = 4200. For all of our tests, the
elevator serviced seven floors.
Although this is a small number of configurations com-
pared to the total number of possible valid system configu-
rations, we can extrapolate these results to the space of
system configurations because the system is largely con-
structed of components that are replicated per floor. The
dispatcher, car call and hall call buttons are mainly respon-
sible for the elevator’s performance. These components are
strongly decoupled and provide equal utility contributions
to the system per floor. Simulating failures of each button
individually, as well as the dispatcher component, gives
enough data to determine how well the system tolerates
combinations of component failures.
5.3. Results
We compared the original and improved elevator sys-
tems by measuring how many passengers each system de-
livered during the simulation runs. A mean of the number
of passengers delivered for all 30 passenger profiles for
each configuration was used. Every configuration of the el-
evator with alternative functionality delivered 100% of its
passengers for each simulation test. The original elevator
system frequently stranded passengers both in the car and
on each floor waiting to be serviced when any of the car call
and hall call buttons were broken.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
i
n
o
i
t
a
l
u
m
S
r
e
p
d
e
r
e
v
i
l
e
D
s
r
e
g
n
e
s
s
a
P
%
e
g
a
r
e
v
A
100
90
80
70
60
50
40
30
20
10
0
Car Lanterns and Car Position Indicator
No Components Failed
are the only failed components
Failed Car Call and Hall Call
Button Combinations
Failed Dispatcher and
Button Combinations
1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70
Configuration ID #
Figure 3. Average % passengers delivered for the
original elevator system.
Figure 3 shows the average percentage of passengers de-
livered per simulation for each configuration of the original
elevator system. Only three configurations successfully
delivered all passengers in every simulation run. These
configurations corresponded to situations in which only the
passenger feedback lights were failed (car position indica-
tor in configuration ID #4, and the car lanterns and car posi-
tion indicator
and the
configuration in which no components were failed (config-
uration ID #69). Only one test out of all of the simulations
run for the other configurations managed, by chance, to de-
liver all 50 of its passengers (one of the two-way test pro-
files for configuration ID #30). Many of the configurations
could not deliver any passengers at all because the dis-
patcher failed.
in configuration ID #5),
These results show that our system augmented with
functional alternatives can tolerate combinations of compo-
nent failures that would prevent the original system from
satisfying its objectives. It is certainly more fault-tolerant
than the original system. However, we would like to evalu-
ate how well our system model accurately predicts the rela-
tive change in system utility due to component failures. We
can analyze the relative performance of each of the config-
urations of the system with functional alternatives to ob-
serve whether the system exhibits a gradual drop in utility
as components fail.
In general, system utility should be a measure of how
well the system fulfills its objectives, and could incorporate
many system properties such as performance, functionality,
and dependability. An elevator system’s performance ob-
jective is to transport people efficiently to their destina-
tions, minimizing how long passengers must wait for and
ride in the elevator. Therefore, in our simulation experi-
ments, we use the elevator’s average performance per pas-
senger as a proxy for measuring system utility. We use total
passenger wait time plus transit time as a relatively simple
but useful performance metric. In the data we examined,
using more complex performance metrics did not signifi-
cantly affect the relative order of the configurations tested.
i
)
s
d
n
o
c
e
s
(
e
m
T
y
r
e
v
i
l
e
D
r
e
g
n
e
s
s
a
P
e
g
a
r
e
v
A
Two-Way Passenger Profiles
Config ID #1
Config ID #69
1000
900
800
700
600
500
400
300
200
100
0
0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90 1.00
Configuration Utility Values
Figure 4. Average elevator performance vs. model
utility for two-way traffic profiles.
We measured the average performance of each system
configuration for each simulation test, and grouped the re-
sults according to the type of passenger profile tested. If
our model accurately predicts system utility, we should see
configurations that have higher utility measures achieve
better average performance. Figures 4 and 5 graph the util-
ity of the tested system configurations versus the average
elevator performance per passenger per simulation for the
two-way and up-peak profile types. In these graphs, better
elevator performance translates to lower average passenger
delivery times, making the vertical axis reversed in direc-
tion from the ideal sketch of Figure 1. The configurations
on the horizontal axis are ordered by utility, so the mea-
sured average passenger delivery time should decrease as
utility increases to indicate better performance for configu-
rations that provide more utility.
For the random two-way traffic profiles (Figure 4), the
data indicates that the model approximates relative system
utility for the configurations tested. The configuration with
the most components failed and the least utility (ID #1) has
the longest average passenger delivery time at about 898
seconds per passenger. The configuration in which no
components have failed (ID #69) has the shortest time with
about 203 seconds per passenger. There is some variance in
the performance measurements for configurations with
similar utility values, but there is clearly a general trend of
better average performance for systems with higher utility
values. The configurations in the middle of the graph differ
by which combinations of car call and hall call buttons have
failed, and this can have a significant effect on elevator per-
formance depending on the particular passenger requests.
For the up-peak traffic profiles (Figure 5), the model
does not seem to be as accurate at predicting relative system
performance. Many configurations that supposedly have