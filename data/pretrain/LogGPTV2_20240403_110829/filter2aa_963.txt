Abusing Firefox Extensions
Defcon17– US, Las Vegas
Roberto Suggi Liverani
Nick Freeman 
WTF Are We?
 Roberto Suggi Liverani
 Senior Security Consultant – Security-Assessment.com
 OWASP NZ Leader
 http://malerisch.net
 Nick Freeman
 Security Consultant – Security-Assessment.com
 http://atta.cked.me
 Contact us
 PI:EMAIL
 PI:EMAIL
Agenda
 Introduction
 Security threats and risks
 Disclosure summary
 Abusing Extensions – a selection of exploits and demos
Introduction
 What are Firefox extensions?
 It‟s just software
 Equivalent of ActiveX
 What extensions do?
 Extend, modify and control browser behaviour
 Provides extended/rich functionality and added features
 Different type of Firefox addons
 Extensions
 Plugins (Search Engine plugins) and Themes
5
XUL:
- provides UI to extensions
- combined with JavaScript, 
CSS, HTML elements
-.xul file
XBL:
- allows creation of new widgets
- combined with CSS, XML and 
XUL
XPConnect:
- middle layer allows JavaScript 
to interface with XPCOM
XPCOM:
- reusable 
components/interfaces
- interact with low layer libraries: 
network, I/O, file system, etc.
Chrome:
– privileged browser zone 
– code fully trusted
Extension Security Model
 Mozilla extension security model is nonexistent
 Extension code is fully trusted by Firefox
 Vulnerability in extension code might result in full system 
compromise
 No security boundaries between extensions
 An extension can silently modify/alter another extension
 XPCom C++ components subject to memory corruption
 Extensions vulnerabilities are platform independent
 Lack of security policies to allow/deny Firefox access to internal API, 
XPCom components, etc
 Any Mozilla application with the extension system is vulnerable to 
same class of issues (e.g. Thunderbird)
The potential
 Statistics – Firefox Browser Market Share
 Beyond 20% globally since November 2008, more than 50% in certain 
regions/countries
Source: Marketshare - marketshare.hitslink.com
Extension downloads boom
 Statistics – AMO (Addons.Mozilla.Org) Download Trend
 1 billion extension downloads from AMO – Nov 2008
Extensions are everywhere
Search engines
Social 
Networks
Services
Software/OS/Web 
Application 
Package
Extensions 
Portals
Google Toolbar
Google Browser 
Sync
Yahoo Toolbar
Ask.com Toolbar
Del.icio.us 
Extension
Facebook 
Toolbar
AOL Toolbar
LinkedIn 
Browser 
Toolbar
Netcraft Anti-
Phishing 
Toolbar
PhishTank 
SiteChecker
Skype
AVG
Ubuntu
LiveLink 
(OpenText)
AMO (addons
mozilla org)
Mozdev
Xulplanet
The weakest part of the chain 
 Human Factors - users:
 Trust 
 AMO Recommended Extensions
 Open Source
 Misconception = users expect extensions to be safe
 'according to Softpedia, it's 100% safe„
 NoScript/AdBlockPlus provides false sense of security
 chrome:// URI whitelisted on NoScript, any XSS injection there 
is not blocked
The weakest part of the chain ctd.
 Human Factors – developers:
 The Mozilla page for building extensions doesn't mention the word 
'security' once
 Many addon developers do it for a hobby – not necessarily aware of 
how dangerous a vulnerable extension can be
 Human Factors – reviewers:
 Don‟t need to have great knowledge about app / webapp security
 Need to follow a few guidelines for what is and isn‟t acceptable
 These guidelines focus on finding malicious extensions
 Vulnerable extensions can quite easily slip through
Concerns on AMO
 Everyone can write an extension and submit it to AMO (even us :)
 AMO review process lacks complete security assessment
 Few extensions are signed in AMO. Extensions are generally not 
“signed”. Users trust unsigned extensions.
 Experimental extensions (not approved yet) are publicly available 
Extension And Malware
 Some people have already exploited this concept:
 FormSpy - 2006
 Downloader-AXM Trojan, poses as the legitimate NumberedLinks 
0.9 extension
 Steal passwords, credit card numbers, and e-banking login details
 Firestarterfox - 2008
 Hijacks all search requests through multiple search engines and 
redirects them through Russian site thebestwebsearch.net
 Vietnamese Language Pack - 2008
 Shipped with adware because the developer was owned
 Might happen in the near future…
 Malware authors bribe/hack famous/recommended extension 
developer/vendor
 Initial benign extension, malware is introduced in an 3rd/4th update
Abusing Firefox Extensions
 Finding bugs in Firefox extensions is fun ;-)
 Multiple ways to find them – it depends on:
 Nature of the extension
 Logic exposed
 Input and output
 XPCOM components
 Third party API/components
 Our research focus:
 Extension logic, security model and functions exposed
 Extension data flow and data injection points
XSS or Cross Browser Context
 XSS on steroids
 Any input rendered in the chrome is a potential XSS injection point
 XSS in chrome is privileged code!
 It can interface with XPConnect and XPCOM = 0wn3d!
 No SOP restrictions!
 Cannot be blocked by NoScript!
NoScript’s Whitelist
XSS disclosing /etc/passwd
Testing for XSS
 Run Firefox with console active
 firefox.exe -console
 To confirm execution of our XSS payload, generate an error into 
console – dump(error);
 Is our XSS in Chrome? Check all window properties - not just window
Useful XSS payloads
 Check if nsIScriptableUnescapeHTML.parseFragment() is used 
 Lack of this might mean use of input black-list filters
Method Description
Payload
iframe with data URI and 
base64 payload
Recursive iframes
Embedded XSS
XSS on DOM events
XUL injection
”]]>
XBL injection
style=“-moz-binding:url(data:text/xml;charset=utf-
8,XBL)”
Tools
 Firebug – provides console, monitor and debugging features
 Chromebug – Firebug for chrome, XUL
 WebDeveloper – allows more control on page elements, cookies
 XPComViewer – shows registered XPCOM components/interfaces
 Venkman - JavaScript Debugger
 Console2 – advanced error console
 ChromeList – File viewer for installed extensions
 Execute JS - enhanced JavaScript-Console
 DOM Inspector – allows inspecting the DOM
 Burp – web proxy
 Mozrepl – js shell via telnet service
 Sysinternals Tools – regmon, filemon, tcpmon, etc.
 Total number of downloads from AMO: 30,000,000+
Abusing extensions…
Extension 
Name
Date Disclosed
Vendor Response 
Date
Fix Date
WizzRSS
2009/02/18
2009/02/18
2009/03/20
CoolPreviews
2009/03/05
No response, silently
fixed
2009/04/20
FireFTP
N/A
N/A
2009/02/19
Undisclosed
2009/02/16
2009/02/16
N/A
Feed Sidebar
2009/03/04
2009/03/05
2009/03/14
Undisclosed
2009/02/27
N/A
N/A
UpdateScanner
2009/06/08
2009/06/11
2009/06/15
Undisclosed
2009/06/22
N/A
N/A
Undisclosed
2009/06/30
2009/06/30
2009/07/06
ScribeFire
2009/07/10
2009/07/15
2009/07/20
Skype
N/A
N/A
2009/06/03
Skype
 Skype ( is ignored
 Exploit:
 XSS via event handler : 
Demo
 Compromising NoScript – whitelisting malicious site
FireFTP
 FireFTP  ( tags of RSS feeds is 
executed in the chrome security zone. 
 JavaScript is encoded in base64 or used as the source of an iframe 
and executed when the user clicks on the malicious feed item.
 Filtering/Protection:
  tags are stripped
 Exploit:
 &lt;iframe 
src=&quot;data:text/html;base64,base64encodedjavascript&quot;&gt;&
lt;/iframe&gt;
Demo
 Password stealing
ScribeFire
 ScribeFire (
Exploit
 Reverse VNC Using XHR – contents of payload
Security Disclosure
 Security disclosure is a new process to extension 
developers/vendors
 Security is underestimated/not understood.
 Few posts regarding security vulnerabilities in Firefox extensions in 
sec mailing-lists as Full Disclosure. 
 Mozilla security team can now be queried for bugs found in extensions
Recommendations
 Developers:
 Follow OWASP developer‟s guide
 Read code of similar extensions for ideas on avoiding common bugs
 Security professionals:
 Adhere to the OWASP testing guide and our presentation
 Watch for publications for new ideas on breaking extensions
 End-users: 
 Don‟t trust extensions!
 Changelogs of security issues / Bugzilla
 Updating addons (after checking the above)
 Consider Safe Mode (disable all extensions)
 Thanks! (buy us a beer!)
PI:EMAIL
PI:EMAIL
References
 Research and publications on the topic
 Extensible Web Browser Security - Mike Ter Louw, Jin Soon Lim, 
and V.N. Venkatakrishnan
 http://www.mike.tl/view/Research/ExtensibleWebBrowserSecur
ity
 Bachelor thesis on Firefox extension security - Julian Verdurmen
 http://jverdurmen.ruhosting.nl/BachelorThesis-Firefox-
extension-security.html
 Attacking Rich Internet Applications (kuza55, Stefano Di Paola) 
 http://www.ruxcon.org.au/files/2008/Attacking_Rich_Internet_A
pplications.pdf
References
 Firebug – Petko. D. Petkov, Thor Larholm, 06 april 2007
 http://larholm.com/2007/04/06/0day-vulnerability-in-firebug/
 http://www.gnucitizen.org/blog/firebug-goes-evil/
 Tamper Data XSS - Roee Hay – 27 jul 2008
 http://blog.watchfire.com/wfblog/2008/07/tamper-data-cro.html
 GreaseMonkey – ISS – 21 Jul 2005
 http://xforce.iss.net/xforce/xfdb/21453
 Sage RSS Reader  (pdp & David Kierznowski)
 http://www.gnucitizen.org/blog/cross-context-scripting-with-
sage/