title:Password-protected secret sharing
author:Ali Bagherzandi and
Stanislaw Jarecki and
Nitesh Saxena and
Yanbin Lu
Password-Protected Secret Sharing
Ali Bagherzandi
Dept. of Computer Science
University of California, Irvine
PI:EMAIL
Stanisław Jarecki
Dept. of Computer Science
University of California, Irvine
PI:EMAIL
Nitesh Saxena
Computer and Information
Sciences
University of Alabama,
Birmingham
PI:EMAIL
Yanbin Lu
Dept. of Computer Science
University of California, Irvine
PI:EMAIL
ABSTRACT
We revisit the problem of protecting user’s private data against ad-
versarial compromise of user’s device(s) which store this data. We
formalize the solution we propose as Password-Protected Secret-
Sharing (PPSS), which allows a user to secret-share her data among
n trustees in such a way that (1) the user can retrieve the shared se-
cret upon entering a correct password into a reconstruction proto-
col, which succeeds as long as at least t+1 uncorrupted trustees are
accessible, and (2) the shared data remains secret even if the adver-
sary which corrupts t trustees, with the level of protection expected
of password-authentication, i.e. the probability that the adversary
learns anything useful about the secret is at most q/|D| where q
is the number of reconstruction protocol the adversary manages to
trigger and |D| is the size of the password dictionary.
We propose an efﬁcient PPSS protocol in the PKI model, secure
under the DDH assumption, using non-interactive zero-knowledge
proofs with efﬁcient instantiations in the Random Oracle Model.
Our protocol is practical, with fewer than 16 exponentiations per
trustee and 8t + 17 exponentiations per user, with O(1) bandwidth
between the user and each trustee, and only three message ﬂows,
implying a single round of interaction in the on-line phase. As a
side beneﬁt our PPSS protocol yields a new Threshold Password
Authenticated Key Exchange (T-PAKE) protocol in the PKI model
with signiﬁcantly lower message, communication, and server com-
putation complexities than existing T-PAKE’s.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Cryptographic Controls; D.4.6
[Security and Protection]: Authentication
General Terms
Security, Algorithms
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
Keywords
Secret Sharing, Intrusion Tolerance, Password Authentication
1.
INTRODUCTION
A user of computing technology, let’s call her Alice, needs to
store her valuable private data, e.g. texts, images, passwords, or
keys, on her computer or any other electronic device. Alice’s de-
vice, however, can fall prey to viruses or any other type of malware
which could expose her data. Moreover, Alice’s device could get
lost or stolen and thus fall under control of someone whom Alice
does not trust. On the other hand, Alice might want to have access
to her private data on more than one device, and she would like her
data protected from loss due to device failures.
Consider the general problem of protecting Alice’s secret data,
let’s call it s, in the event of the compromise or failure of the de-
vice(s) on which s could be stored. Storing an encryption of s
using a key derived from Alice’s password is vulnerable to an of-
ﬂine password dictionary attack once the device is corrupted, and it
is also not robust to device failure. Without specialized hardware,
Alice could instead outsource s to some trusted remote server, and
authenticate to this server whenever she needs to retrieve s. Note
that Alice cannot store any authentication token on her device, or
otherwise the adversary who corrupts the device can still recover
s by using this token to authenticate to the server. If we want a
software-only solution, Alice could only use a human-memorable
password for authentication to the server. Still, she would be plac-
ing all her trust in a single server.
Password-Protected Secret Sharing. To eliminate the bottleneck
of a single trusted server we could secret-share s among a set of
n trustees so that only a compromise of more than some thresh-
old of trustees would disable the system or leak s. However, se-
cret sharing by itself is not enough because Alice still needs some
way to authenticate to these trustees to trigger the secret reconstruc-
tion protocol, and since she can only use human-memorable pass-
words, a black-box combination of password authentication and
secret-sharing leaves us with two bad choices: Alice can use n in-
dependently chosen passwords, one for each trustee, which is im-
practical, or she can use the same password with all trustees, but
this would eliminate all the beneﬁts of secret-sharing, because a
single corrupt trustee could recover this password via an off-line
dictionary attack and use it to recover s by authenticating to the
other trustees. This motivates the question of how to distribute Al-
ice’s data among n trustees so that: (1) Alice can retrieve her data
by triggering a reconstruction protocol using only her password,
433and the reconstruction is guaranteed as long as at least t + 1 hon-
est trustees are available; and (2) Alice’s data remains secret even
when t trustees are corrupted, and the level of this protection is as
expected of password-authenticated protocol, i.e. if Alice chooses
her password uniformly in set D then the probability that adver-
sary learns anything about Alice’s data after triggering q instances
of the reconstruction protocol is at most q/|D| plus some negligi-
ble quantity. We call a protocol that satisﬁes these two properties a
(t, n) Password-Protected Secret Sharing (PPSS).
Two Implementation Settings. There are two basic implementa-
tion settings for a PPSS scheme. In the roaming user setting im-
plicitly assumed above, Alice’s device does not have any private
storage, and the n trustees are implemented by n separate physical
entities. This setting is highly robust, because the adversary can
destroy Alice’s data only by corrupting n−t trustees, and it is easy
to extend to multiple user devices, since a user device needs no pri-
vate information. As for security, the loss of Alice’s device(s) gives
no information to the adversary, and Alice’s data is secure even if
the adversary corrupts t out of n trustees. However, Alice’s data
is vulnerable to on-line dictionary attacks against the trustees, and
the adversary corrupting t+1 trustees recovers both Alice’s data
and her password, possibly after an off-line dictionary attack.
In a private storage setting, Alice can trade robustness for in-
creased security by initializing an (n, 2n−t) PPSS scheme, dis-
tributing n shares among the n trustees, and storing the remaining
n−t shares locally on her device. During reconstruction this de-
vice will use its shares to play the part of n−t virtual trustees. The
resulting system is less robust because Alice’s data is lost after cor-
ruption of either n−t trustees or of Alice’s device. However, the
system is more secure because an adversary learns Alice’s data only
after corrupting both t+1 trustees and Alice’s device. Moreover, a
network attacker can no longer stage an on-line dictionary attack,
because the n−t virtual trustees implemented by Alice’s device do
not need to respond to network requests.
Applications. A PPSS scheme can be implemented by a dedicated
service provider as service to individual users, or it can be admin-
istered by users themselves, exploiting their real-world trust rela-
tionships, e.g. from on-line social networks such as Facebook. For
example, using the PPSS scheme in a private storage setting Alice
can improve the security of her data compared compared to local
storage, at the price of risking data loss if n−t out of n of her
trustees become unavailable. The role of the trustees can also be
played by different devices belonging to Alice herself. For exam-
ple, Alice can use PPSS to off-load sensitive data from her mobile
phone so that the adversary can gain control of this data only by
stealing the phone together with t out of n of her additional devices,
e.g. her home computer, her work computer, or even her Bluetooth-
connected watch. Various types of trustees could be mixed, so the
pool of Alice’s own n devices can extend to computers of Alice’s
Facebook friends and to dedicated service providers. Moreover,
each logical trustee can be assigned a different weight by playing
the role of k>1 virtual trustees. In the PPSS protocol we propose
this would increase trustee’s computational cost only by replacing
one exponentiation with one multi-exponentiation on k bases.
A PPSS scheme can be used to protect any sensitive data, in-
cluding user’s cryptographic keys, e.g. for decryption, signing, au-
thentication, etc. One variant of such application is a password
management, where Alice’s data protected by a PPSS scheme are
her passwords to various on-line services. Apart of convenience
of having to remember only one “master password”, used by the
PPSS to recover all the other passwords, such scheme can improve
security of password authentication because it allows Alice to use
independent random keys instead of all her passwords except the
Scheme
Client Computation
Server Computation
Total Bandwidth
Client/Server Messages
MSJ06 [19] RG06 [7] Ours
O(n)
O(1)
O(n)
O(1)
O(n)
O(n2)
O(1)
O(n2)
O(n3)
≥12
7
3
Figure 1: Previous TPAKE’s versus our PPSS/TPAKE.
master password. Currently several entities offer such password
management service, e.g. LastPass [17] and Mozilla Weave Sync
[20], but these are centralized solutions.
Related Work. The idea of password-authenticated recovery of
secret-shared data was to the best of our knowledge proposed by
Ford and Kaliski [11]. As pointed out by a subsequent paper by
Jablon [14], the Ford-Kaliski protocol implicitly assumes a public
key infrastructure (PKI) model, while the improvement given by
[14] removed the need for trusted public keys, but both protocol
handles only the t = n case of secret-sharing, and neither paper
clearly speciﬁed the security properties of such scheme nor did they
formally argue the security of the protocols they proposed.
The notion of PPSS is closely related to Threshold Password Au-
thenticated Key Exchange (T-PAKE) deﬁned by MacKenzie et al.
[19], who followed up on the work of [11, 14], in particular by
deﬁning a more general primitive than password-authenticated re-
covery of secret-shared data, namely a password-authenticated key
exchange between a client and n servers.
Indeed, any T-PAKE
scheme can be used to implement a PPSS scheme at negligible ex-
tra cost: The client authenticates to the n trustees with a T-PAKE
instance, and the trustees use the keys established by this instance
to encrypt and authenticate their shares of Alice’s secret. As we
show in this paper, in the PKI model the implication works also
in the opposite direction, i.e. a PPSS implies a T-PAKE with little
extra costs: Alice picks a public key encryption key pair and shares
the decryption key using a PPSS scheme. A T-PAKE protocol con-
sists of a PPSS reconstruction followed by each server encrypting
a fresh session key under Alice’s public key. Alice decrypts these
keys using the decryption key recovered in the PPSS instance. For
server-to-client authentication each server signs its encrypted ses-
sion key. In spite of this equivalence between PPSS and T-PAKE
in the PKI model, it is productive to formally introduce PPSS as a
separate notion, ﬁrstly because it is a natural functionality, a pro-
tocol that reconstructs a (long) secret if and only if supplied with
a correct (short) password, but also because it is simpler than T-
PAKE, since only the client has any output, and this output can be
dependent across protocol sessions.
Speciﬁcally, MacKenzie et al. [19] showed a T-PAKE proto-
col in the PKI model secure under the Decisional Difﬁe-Hellman
(DDH) assumption in the Random Oracle Model (ROM), while
Di Raimondo and Gennaro [7] showed a T-PAKE without rely-
ing on ROM and trusted public keys, based on the PAKE of Katz-
Ostrovsky-Yung [16]. The drawback of both T-PAKE’s is several
rounds of server-to-server communication, which is feasible if the
servers communicate over a LAN network, as could be the case
in fault-tolerant distribution of an authentication server which mo-
tivated the T-PAKE’s of [19, 7], but the PPSS applications that
motivate our work are user-centric and can involve highly hetero-
geneous trustees, in which case it would be preferable that each
trustee communicates only with the user device.
In such user-
centric communication model, the T-PAKE of [19] requires ex-
change of 9 messages between the user and each trustee, with O(n)
bandwidth, and the costs of T-PAKE of [7] are even higher (see Ta-
ble 1 below). For the special case of 2 servers these results were
improved upon by Brainard et al. [3] in the PKI model, and by Katz
et al. [15] in the model without trusted public keys, but even these
4342-server T-PAKE’s require, respectively, 7 and 5 messages in the