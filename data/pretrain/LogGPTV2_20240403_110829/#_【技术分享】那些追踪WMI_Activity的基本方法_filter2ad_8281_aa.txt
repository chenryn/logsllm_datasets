# 【技术分享】那些追踪WMI Activity的基本方法
|
##### 译文声明
本文是翻译文章，文章来源：darkoperator.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[blueSky](http://bobao.360.cn/member/contribute?uid=1233662000)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**简介**
WMI（Windows Management Instrumentation）自Windows
2000以来一直是Windows操作系统中的一个功能，该功能对系统管理员来说是非常重要的，它能够获取计算机内部状态的信息，能够对磁盘、进程、和其他
Windows
系统对象进行建模，从而实现“指示”功能。正是由于WMI的这种灵活性，在它早期被引入Windows操作系统时，网络攻击者经常利用WMI来对计算机实施攻击。WMI是微软Windows操作系统中的一个非常重要的技术，但从安全的角度考虑，目前还没有一种行之有效的方法去记录某用户操作WMI功能的行为活动。对于“防守者”而言，他们通常利用第三方工具或自己编写的解决方案来去记录操作WMI的行为活动，但这在一定程度上并不能够阻止“攻击者”操作WMI来执行各种网络攻击的行为。在本文中，我们将看看微软是如何改进记录WMI操作行为功能的。
**WMI Activity Provider**
****
在2012年之前，Windows系统中的WMI
Activity事件日志程序主要用于在WMI启用时记录其跟踪和调试信息，但在Windows新发行版本中扩展了该程序的功能，使用Operational选项可以对WMI的操作行为进行记录。下面我们将使用PowerShell对该新功能进行分析，并使用Get-WinEvent cmdlet来获取信息。
我们首先获得Provider程序的对象：
    PS C:> $WmiProv = Get-WinEvent-ListProvider "Microsoft-Windows-WMI-Activity"
    PS C:> $WmiProv
    Name     : Microsoft-Windows-WMI-Activity
    LogLinks : {Microsoft-Windows-WMI-Activity/Trace, Microsoft-Windows-WMI-Activity/Operational, Microsoft-Windows-WMI-Activity/Debug}
    Opcodes  : {}
    Tasks    : {}
    PowerShell对该对象的输出进行了格式化处理，因此我们需要使用Format-List参数来查看所有属性以及属性的值。
     PS C:> $WmiProv | Format-List -Property *
    ProviderName      : Microsoft-Windows-WMI-Activity
    Name              : Microsoft-Windows-WMI-Activity
    Id                : 1418ef04-b0b4-4623-bf7e-d74ab47bbdaa
    MessageFilePath   : C:WINDOWSsystem32wbemWinMgmtR.dll
    ResourceFilePath  : C:WINDOWSsystem32wbemWinMgmtR.dll
    ParameterFilePath :
    HelpLink          : https://go.microsoft.com/fwlink/events.asp?CoName=Microsoft Corporation&ProdName=Microsoft@Windows@Operating
                        System&ProdVer=10.0.15063.0&FileName=WinMgmtR.dll&FileVer=10.0.15063.0
    DisplayName       : Microsoft-Windows-WMI-Activity
    LogLinks          : {Microsoft-Windows-WMI-Activity/Trace, Microsoft-Windows-WMI-Activity/Operational, Microsoft-Windows-WMI-Activity/Debug}
    Levels            : {win:Error, win:Informational}
    Opcodes           : {}
    Keywords          : {}
    Tasks             : {}
    Events            : {1, 2, 3, 11...}
下面让我们看看LogLinks或者Provider程序将事件日志保存在哪里。
    PS C:> $WmiProv.LogLinks
    LogName                                    IsImported DisplayName
    -------                                    ---------- -----------    Microsoft-Windows-WMI-Activity/Trace            False
    Microsoft-Windows-WMI-Activity/Operational      False
    Microsoft-Windows-WMI-Activity/Debug            False
上述Powershell的输出中，我们比较感兴趣的是Microsoft-Windows-WMI-Activity/Operational。现在我们已经确定了哪个EventLog会保存我们感兴趣事件的日志，下面我们可以看看Provider程序生成的事件日志。通常情况下，Provider可以从几个事件中生成超过100个事件日志。因此，我们使用Measure-Object cmdlet来查看Provider生成的事件数量。
    PS C:> $WmiProv.Events | Measure-Object
    Count    : 22
    Average  :
    Sum      :
    Maximum  :
    Minimum  :
    Property :
通过上述输出我们看到Provider生成了22个事件，下面我们使用 **Get-Member cmdlet** 来看看如何组合每个对象。
    PS C:> $WmiProv.Events | Get-Member
       TypeName: System.Diagnostics.Eventing.Reader.EventMetadata
    Name        MemberType Definition
    ----        ---------- ----------    Equals      Method     bool Equals(System.Object obj)
    GetHashCode Method     int GetHashCode()
    GetType     Method     type GetType()
    ToString    Method     string ToString()
    Description Property   string Description {get;}
    Id          Property   long Id {get;}
    Keywords    Property   System.Collections.Generic.IEnumerable[System.Diagnostics.Eventing.Reader.EventKeyword] Keywords {get;}
    Level       Property   System.Diagnostics.Eventing.Reader.EventLevel Level {get;}
    LogLink     Property   System.Diagnostics.Eventing.Reader.EventLogLink LogLink {get;}
    Opcode      Property   System.Diagnostics.Eventing.Reader.EventOpcode Opcode {get;}
    Task        Property   System.Diagnostics.Eventing.Reader.EventTask Task {get;}
    Template    Property   string Template {get;}
    Version     Property   byte Version {get;}
通过上面的输出我们发现每个事件都有一个LogLink属性，且属性值为System.Diagnostics.Eventing.Reader.EventLogLink
，下面我们来看看这些对象的值是如何形成的。
    PS C:> $WmiProv.Events[0].LogLink
    LogName                              IsImported DisplayName
    -------                              ---------- -----------    Microsoft-Windows-WMI-Activity/Trace      False
    PS C:> $WmiProv.Events[0].LogLink | gm
       TypeName: System.Diagnostics.Eventing.Reader.EventLogLink
    Name        MemberType Definition
    ----        ---------- ----------    Equals      Method     bool Equals(System.Object obj)
    GetHashCode Method     int GetHashCode()
    GetType     Method     type GetType()
    ToString    Method     string ToString()
    DisplayName Property   string DisplayName {get;}
    IsImported  Property   bool IsImported {get;}
    LogName     Property   string LogName {get;}
执行下面这个命令可以筛选出我们想要查看的事件。
    PS C:> $WmiProv.Events | Where-Object {$_.LogLink.LogName -eq "Microsoft-Windows-WMI-Activity/Operational"}
    Id          : 5857
    Version     : 0
    LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
    Level       : System.Diagnostics.Eventing.Reader.EventLevel
    Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
    Task        : System.Diagnostics.Eventing.Reader.EventTask
    Keywords    : {}
    Template    : 
    Description : %1 provider started with result code %2. HostProcess = %3; ProcessID = %4; ProviderPath = %5
    Id          : 5858
    Version     : 0
    LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
    Level       : System.Diagnostics.Eventing.Reader.EventLevel
    Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
    Task        : System.Diagnostics.Eventing.Reader.EventTask
    Keywords    : {}
    Template    : 
    Description : Id = %1; ClientMachine = %2; User = %3; ClientProcessId = %4; Component = %5; Operation = %6; ResultCode = %7; PossibleCause = %8
    Id          : 5859
    Version     : 0
    LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
    Level       : System.Diagnostics.Eventing.Reader.EventLevel
    Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
    Task        : System.Diagnostics.Eventing.Reader.EventTask
    Keywords    : {}
    Template    : 
    Description : Namespace = %1; NotificationQuery = %2; OwnerName = %3; HostProcessID = %4;  Provider= %5, queryID = %6; PossibleCause = %7
    Id          : 5860
    Version     : 0
    LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
    Level       : System.Diagnostics.Eventing.Reader.EventLevel
    Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode