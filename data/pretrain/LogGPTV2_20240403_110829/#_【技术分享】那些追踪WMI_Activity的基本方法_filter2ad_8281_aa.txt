# 【技术分享】追踪WMI活动的基本方法

## 译文声明
本文为翻译文章，原文来源于darkoperator.com。译文仅供参考，具体内容及含义请以原文为准。
- 译者：[blueSky](http://bobao.360.cn/member/contribute?uid=1233662000)
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn，或通过网页版在线投稿

## 简介
自Windows 2000以来，Windows Management Instrumentation (WMI)一直是Windows操作系统中的重要功能之一。对于系统管理员而言，WMI能够获取计算机内部状态信息，并对磁盘、进程及其他Windows系统对象进行建模，从而实现“指示”功能。然而，由于其灵活性，早期的网络攻击者经常利用WMI来对计算机实施攻击。

尽管WMI在微软Windows操作系统中占据重要地位，但从安全角度来看，目前仍缺乏有效的方法来记录用户对WMI功能的操作行为。通常情况下，防御者会使用第三方工具或自行开发解决方案来记录WMI操作行为，但这并不能完全阻止攻击者利用WMI执行各种网络攻击。本文将探讨微软如何改进记录WMI操作行为的功能。

## WMI Activity Provider

在2012年之前，Windows系统中的WMI Activity事件日志主要用于记录WMI启用时的跟踪和调试信息。但在新的Windows发行版本中，该程序的功能得到了扩展，现在可以使用Operational选项来记录WMI的操作行为。接下来，我们将通过PowerShell对该新功能进行分析，并使用Get-WinEvent cmdlet来获取相关信息。

首先，我们获取Provider程序的对象：
```powershell
PS C:> $WmiProv = Get-WinEvent -ListProvider "Microsoft-Windows-WMI-Activity"
PS C:> $WmiProv
Name     : Microsoft-Windows-WMI-Activity
LogLinks : {Microsoft-Windows-WMI-Activity/Trace, Microsoft-Windows-WMI-Activity/Operational, Microsoft-Windows-WMI-Activity/Debug}
Opcodes  : {}
Tasks    : {}
```
PowerShell对该对象的输出进行了格式化处理，因此我们需要使用`Format-List`参数来查看所有属性及其值：
```powershell
PS C:> $WmiProv | Format-List -Property *
ProviderName      : Microsoft-Windows-WMI-Activity
Name              : Microsoft-Windows-WMI-Activity
Id                : 1418ef04-b0b4-4623-bf7e-d74ab47bbdaa
MessageFilePath   : C:\WINDOWS\system32\wbem\WinMgmtR.dll
ResourceFilePath  : C:\WINDOWS\system32\wbem\WinMgmtR.dll
ParameterFilePath :
HelpLink          : https://go.microsoft.com/fwlink/events.asp?CoName=Microsoft Corporation&ProdName=Microsoft@Windows@Operating System&ProdVer=10.0.15063.0&FileName=WinMgmtR.dll&FileVer=10.0.15063.0
DisplayName       : Microsoft-Windows-WMI-Activity
LogLinks          : {Microsoft-Windows-WMI-Activity/Trace, Microsoft-Windows-WMI-Activity/Operational, Microsoft-Windows-WMI-Activity/Debug}
Levels            : {win:Error, win:Informational}
Opcodes           : {}
Keywords          : {}
Tasks             : {}
Events            : {1, 2, 3, 11...}
```

接下来，让我们看看LogLinks或Provider程序将事件日志保存在哪里：
```powershell
PS C:> $WmiProv.LogLinks
LogName                                    IsImported DisplayName
-------                                    ---------- -----------
Microsoft-Windows-WMI-Activity/Trace            False
Microsoft-Windows-WMI-Activity/Operational      False
Microsoft-Windows-WMI-Activity/Debug            False
```
在上述Powershell输出中，我们特别关注的是`Microsoft-Windows-WMI-Activity/Operational`。确定了哪个EventLog会保存感兴趣的事件后，我们可以进一步查看Provider生成的事件日志。通常，Provider可以从几个事件中生成超过100个事件日志。因此，我们使用`Measure-Object` cmdlet来查看Provider生成的事件数量：
```powershell
PS C:> $WmiProv.Events | Measure-Object
Count    : 22
Average  :
Sum      :
Maximum  :
Minimum  :
Property :
```
从输出可以看到，Provider生成了22个事件。接下来，我们使用`Get-Member` cmdlet来查看每个对象的结构：
```powershell
PS C:> $WmiProv.Events | Get-Member
TypeName: System.Diagnostics.Eventing.Reader.EventMetadata
Name        MemberType Definition
----        ---------- ----------
Equals      Method     bool Equals(System.Object obj)
GetHashCode Method     int GetHashCode()
GetType     Method     type GetType()
ToString    Method     string ToString()
Description Property   string Description {get;}
Id          Property   long Id {get;}
Keywords    Property   System.Collections.Generic.IEnumerable[System.Diagnostics.Eventing.Reader.EventKeyword] Keywords {get;}
Level       Property   System.Diagnostics.Eventing.Reader.EventLevel Level {get;}
LogLink     Property   System.Diagnostics.Eventing.Reader.EventLogLink LogLink {get;}
Opcode      Property   System.Diagnostics.Eventing.Reader.EventOpcode Opcode {get;}
Task        Property   System.Diagnostics.Eventing.Reader.EventTask Task {get;}
Template    Property   string Template {get;}
Version     Property   byte Version {get;}
```
通过上面的输出，我们发现每个事件都有一个`LogLink`属性，其类型为`System.Diagnostics.Eventing.Reader.EventLogLink`。下面来看看这些对象的值是如何形成的：
```powershell
PS C:> $WmiProv.Events[0].LogLink
LogName                              IsImported DisplayName
-------                              ---------- -----------
Microsoft-Windows-WMI-Activity/Trace      False

PS C:> $WmiProv.Events[0].LogLink | gm
TypeName: System.Diagnostics.Eventing.Reader.EventLogLink
Name        MemberType Definition
----        ---------- ----------
Equals      Method     bool Equals(System.Object obj)
GetHashCode Method     int GetHashCode()
GetType     Method     type GetType()
ToString    Method     string ToString()
DisplayName Property   string DisplayName {get;}
IsImported  Property   bool IsImported {get;}
LogName     Property   string LogName {get;}
```
最后，执行以下命令筛选出我们想要查看的事件：
```powershell
PS C:> $WmiProv.Events | Where-Object {$_.LogLink.LogName -eq "Microsoft-Windows-WMI-Activity/Operational"}
Id          : 5857
Version     : 0
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
Task        : System.Diagnostics.Eventing.Reader.EventTask
Keywords    : {}
Template    : 
Description : %1 provider started with result code %2. HostProcess = %3; ProcessID = %4; ProviderPath = %5
Id          : 5858
Version     : 0
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
Task        : System.Diagnostics.Eventing.Reader.EventTask
Keywords    : {}
Template    : 
Description : Id = %1; ClientMachine = %2; User = %3; ClientProcessId = %4; Component = %5; Operation = %6; ResultCode = %7; PossibleCause = %8
Id          : 5859
Version     : 0
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
Task        : System.Diagnostics.Eventing.Reader.EventTask
Keywords    : {}
Template    : 
Description : Namespace = %1; NotificationQuery = %2; OwnerName = %3; HostProcessID = %4;  Provider= %5, queryID = %6; PossibleCause = %7
Id          : 5860
Version     : 0
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
```

通过以上步骤，我们可以更好地理解和记录WMI活动，从而提高系统的安全性。