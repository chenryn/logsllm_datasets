使用方法：gpg -c file
在弹出页面输入两遍口令即可加密文件，加密后会生成原文件名加.gpg的加密文件，注意此时未加密文件仍然存在，可删除未加密原文件。
2、查出加密文件
使用方法：gpg -d 加密文件
在弹出如上图界面输入口令即可查看文件，
注：在加密本机或其他主机输入一次密码后将记录秘钥，解密不需要再次输入秘钥。加密后的文件为data文件类型，更改文件名后仍可解密，与后缀无关。
3、把加密的文件解密出来
使用方法：gpg -o newfilename -d file.gpg
例如:创建用户usera 密码:123456 用户userb 密码:123456
两个终端usera创建文件加密.userb解密查看文件
### A加密
\[usera@room9pc01 \~\]\$ vim a.txt
\[usera@room9pc01 \~\]\$ gpg -c a.txt
gpg: 已创建目录'/home/usera/.gnupg'
gpg: 新的配置文件'/home/usera/.gnupg/gpg.conf'已建立
gpg: 警告：在'/home/usera/.gnupg/gpg.conf'里的选项于此次运行期间未被使用
gpg: 钥匙环'/home/usera/.gnupg/pubring.gpg'已建立
gpg: 用户取消
gpg: 生成密码的时候发生错误：操作已取消
gpg: 对称加密'a.txt'失败：操作已取消
\[usera@room9pc01 \~\]\$ gpg -c a.txt
\[usera@room9pc01 \~\]\$ cp a.txt /tmp/
### B解密
\[userb@room9pc01 \~\]\$ ls /tmp/a.txt.gpg
/tmp/a.txt.gpg
\[userb@room9pc01 \~\]\$ cp /tmp/a.txt.gpg \~/
\[userb@room9pc01 \~\]\$ ls
a.txt.gpg
\[userb@room9pc01 \~\]\$ gpg -d a.txt.gpg \>a.txt
gpg: 已创建目录'/home/userb/.gnupg'
gpg: 新的配置文件'/home/userb/.gnupg/gpg.conf'已建立
gpg: 警告：在'/home/userb/.gnupg/gpg.conf'里的选项于此次运行期间未被使用
gpg: 钥匙环'/home/userb/.gnupg/secring.gpg'已建立
gpg: 钥匙环'/home/userb/.gnupg/pubring.gpg'已建立
gpg: CAST5 加密过的数据
gpg: 以 1 个密码加密
gpg: 警告：报文未受到完整的保护
\[userb@room9pc01 \~\]\$ cat a.txt #解密后即可看到内容
hk hk
## 非对称加/解密方式
B用户创建公钥与私钥,将公钥传送给A
A收到公钥,将数据用公钥加密,加密后的文件传送给B
B收到加密的文件,用私钥解开
### B秘钥对生成
\[userb@room9pc01 \~\]\$ gpg \--gen-key
gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
请选择您要使用的密钥种类：
\(1\) RSA and RSA (default)
\(2\) DSA and Elgamal
\(3\) DSA (仅用于签名)
\(4\) RSA (仅用于签名)
您的选择？ #直接回车默认第一种方式
RSA 密钥长度应在 1024 位与 4096 位之间。
您想要用多大的密钥尺寸？(2048)
您所要求的密钥尺寸是 2048 位
请设定这把密钥的有效期限。
0 = 密钥永不过期
\ = 密钥在 n 天后过期
\w = 密钥在 n 周后过期
\m = 密钥在 n 月后过期
\y = 密钥在 n 年后过期
密钥的有效期限是？(0)
密钥永远不会过期
以上正确吗？(y/n)y
You need a user ID to identify your key; the software constructs the
user ID
from the Real Name, Comment and Email Address in this form:
\"Heinrich Heine (Der Dichter) \\"
真实姓名：hksb
姓名至少要有五个字符长
真实姓名：hksbdb #加密需要gpg -e -r hksbdb 文件名
电子邮件地址：PI:EMAIL
注释：userb-password #此处需要记住
您选定了这个用户标识：
"hksbdb (userb-password) \"
更改姓名(N)、注释(C)、电子邮件地址(E)或确定(O)/退出(Q)？O
您需要一个密码来保护您的私钥。
我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。
我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动
鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。
gpg: /home/userb/.gnupg/trustdb.gpg：建立了信任度数据库
gpg: 密钥 B5417601 被标记为绝对信任
> #如果一直卡在这是应为调用RANDOM生成随机数
公钥和私钥已经生成并经签名。
gpg: 正在检查信任度数据库
gpg: 需要 3 份勉强信任和 1 份完全信任，PGP 信任模型
gpg: 深度：0 有效性： 1 已签名： 0 信任度：0-，0q，0n，0m，0f，1u
pub 2048R/B5417601 2019-03-07
密钥指纹 = 8B47 2A93 2FF3 C2C9 97BD 812C EA54 445D B541 7601
uid hksbdb (userb-password) \
sub 2048R/88ADEA9F 2019-03-07
\[userb@room9pc01 \~\]\$ ls
a.txt
\[userb@room9pc01 \~\]\$ ls .gnupg/ #如需重新创建,删除此隐藏文件
gpg.conf private-keys-v1.d pubring.gpg pubring.gpg\~ random_seed
secring.gpg S.gpg-agent trustdb.gpg
pubring.gpg公钥文件
secring.gpg私钥文件
### B导出公钥
gpg -a \--export 用户名(可省略) \> 文件名.pub \## -a 为可读方式
\[userb@room9pc01 \~\]\$ gpg -a \--export \>/tmp/userb.pub
\[userb@room9pc01 \~\]\$ cat /tmp/userb.pub
### A导入公钥
gpg \--import /文件名.pub
\[usera@room9pc01 \~\]\$ gpg \--import /tmp/userb.pub
gpg: 钥匙环'/home/usera/.gnupg/secring.gpg'已建立
gpg: /home/usera/.gnupg/trustdb.gpg：建立了信任度数据库
gpg: 密钥 B5417601：公钥"hksbdb (userb-password) \"已导入
gpg: 合计被处理的数量：1
gpg: 已导入：1 (RSA: 1)
\[usera@room9pc01 \~\]\$ ls .gnupg/
gpg.conf private-keys-v1.d pubring.gpg pubring.gpg\~ random_seed
secring.gpg S.gpg-agent trustdb.gpg
### A公钥加密文件
gpg -e -r hksbdb test.tx
\[usera@room9pc01 \~\]\$ echo hksb \>test.txt
\[usera@room9pc01 \~\]\$ ls
a.txt b.txt b.txt.gpg test.txt
\[usera@room9pc01 \~\]\$ gpg -e -r hksbdb test.txt
gpg: 88ADEA9F：没有证据表明这把密钥真的属于它所声称的持有者
pub 2048R/88ADEA9F 2019-03-07 hksbdb (userb-password) \
主钥指纹： 8B47 2A93 2FF3 C2C9 97BD 812C EA54 445D B541 7601
子钥指纹： 20C5 2F32 1E22 35F1 830B 4B4E A70B E3BF 88AD EA9F
这把密钥并不一定属于用户标识声称的那个人。如果您真的知道自
己在做什么，您可以在下一个问题回答 yes。
无论如何还是使用这把密钥吗？(y/N)y
\[usera@room9pc01 \~\]\$ ls
test.txt test.txt.gpg
\[usera@room9pc01 \~\]\$ cp test.txt.gpg /tmp/
\[usera@room9pc01 \~\]\$
### B用私钥解密
\[userb@room9pc01 \~\]\$ cp /tmp/test.txt.gpg \~/
\[userb@room9pc01 \~\]\$ ls
a.txt test.txt.gpg
\[userb@room9pc01 \~\]\$ gpg -d test.txt.gpg \>b.txt #输入密码
您需要输入密码，才能解开这个用户的私钥："hksbdb (userb-password)
\"
2048 位的 RSA 密钥，钥匙号 88ADEA9F，建立于 2019-03-07 (主钥匙号
B5417601)
gpg: 由 2048 位的 RSA 密钥加密，钥匙号为 88ADEA9F、生成于 2019-03-07
"hksbdb (userb-password) \"
\[userb@room9pc01 \~\]\$ ls
a.txt b.txt test.txt.gpg
\[userb@room9pc01 \~\]\$ cat b.txt
hksb
## GPG数字签名
软件签名与验证过程
软件官方以私钥对软件包执行数字签名
用户下载软件包,软件官方的公钥
以官方公钥验证软件包签名.确保数据来源正确
### B使用私钥做数字签名
\[userb@room9pc01 tmp\]\$ echo FFFFFAAAADDDDD \> a2.txt
\[userb@room9pc01 tmp\]\$ gpg -b a2.txt
您需要输入密码，才能解开这个用户的私钥："hkhkhk (hkhkhk-password)
\"
2048 位的 RSA 密钥，钥匙号 EB3C37CA，建立于 2019-03-07
\[userb@room9pc01 tmp\]\$ ls a2.\*
a2.txt a2.txt.sig #a2.txt.sig:签名文件
B共享签名文件和原文件给A
### A使用公钥验证签名
\[usera@room9pc01 \~\]\$ gpg \--verify a2.txt.sig
gpg: 于 2019年03月07日 星期四 14时26分13秒 CST 创建的签名，使用
RSA，钥匙号 EB3C37CA
gpg: 完好的签名，来自于"hkhkhk (hkhkhk-password) \"
gpg: 警告：这把密钥未经受信任的签名认证！
gpg: 没有证据表明这个签名属于它所声称的持有者。
主钥指纹： A01B D9A0 EC97 FE9E 0F2A D203 3778 6B0C EB3C 37CA
\[usera@room9pc01 \~\]\$ echo CCC \>\> a2.txt
\[usera@room9pc01 \~\]\$ gpg \--verify a2.txt.sig
gpg: 于 2019年03月07日 星期四 14时26分13秒 CST 创建的签名，使用
RSA，钥匙号 EB3C37CA
gpg: 已损坏的签名，来自于"hkhkhk (hkhkhk-password)
[\"](mailto:%PI:EMAIL%3e)
# 4 AIDE入侵检测系统
AIDE(Advanced Intrusion Detection
Environment,高级入侵检测环境)是个入侵检测工具，主要用途是检查文档的完整性。
## 安装
\[root@client-50 \~\]# yum -y install aide
## 配置文件解释:
\[root@client-50 \~\]# vim /etc/aide.conf
3 @@define DBDIR /var/lib/aide #aide数据库目录,存放检测信息
4 @@define LOGDIR /var/log/aide #日志
7 database=file:@@{DBDIR}/aide.db.gz
> #检测时对比文件
12 database_out=file:@@{DBDIR}/aide.db.new.gz
> #当前检测时生成的检测信息存放文件
15 gzip_dbout=yes #是否做压缩
54 FIPSR = p+i+n+u+g+s+m+c+acl+selinux+xattrs+sha256 #调用的检测集
89 CONTENT_EX = sha256+ftype+p+u+g+n+acl+selinux+xattrs
99 /boot/ CONTENT_EX
100 /bin/ CONTENT_EX
101 /sbin/ CONTENT_EX
112 !/usr/src/ #取反不检查/usr/src/
113 !/usr/tmp/
114 \# Otherwise get all of /usr.
115 /usr/ CONTENT_EX #检查这个目录里面的所有
## 配置入侵检测目录调用检测规则
\[root@client-50 \~\]# sed -i \'99,312s/\^/#/\' /etc/aide.conf
#注释掉默认检测项
\[root@client-50 \~\]# vim /etc/aide.conf
/root/ FIPSR #检测/root/目录,,调用FIPSR规则
\[root@client-50 \~\]# aide \--help #查看命令帮助
## 生成入侵数据库文件
\[root@client-50 \~\]# aide \--init
AIDE, version 0.15.1
\### AIDE database at /var/lib/aide/aide.db.new.gz initialized.
#检测完的状态存放在aide.db.new.gz这个文件内
\[root@client-50 aide\]# cp aide.db.new.gz /tmp/ #备份检测信息
\[root@client-50 aide\]# mv aide.db.new.gz aide.db.gz
#将aide.db.new.gz文件修改成aide.db.gz ,用做下次检测对比
#下次检测时重新生成aide.db.new.gz文件,并与之前改名而来的aide.db.gz对比
\[root@client-50 aide\]# ls
aide.db.gz
\[root@client-50 aide\]# cd /root
\[root@client-50 \~\]# rm -rf anaconda-ks.cfg #删除一个文件
\[root@client-50 \~\]# vim test.txt #新建一个文件
## 开始入侵检测
\[root@client-50 \~\]# aide \--check
AIDE 0.15.1 found differences between database and filesystem!!
Start timestamp: 2019-03-07 15:30:17
Summary:
Total number of files: 2101
Added files: 1 #新建一个文件
Removed files: 1 #删除一个文件
Changed files: 1 #改变一个文件