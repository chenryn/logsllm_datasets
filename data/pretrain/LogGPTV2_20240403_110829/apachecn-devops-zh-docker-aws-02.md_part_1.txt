# 二、使用 Docker 构建应用
在前一章中，您已经了解了示例应用，并且能够在本地下载和运行该应用。目前，您的开发环境是为本地开发而设置的；但是，在将应用投入生产之前，您需要能够打包您的应用及其所有依赖项，确保目标生产环境具有正确的支持操作系统库和配置，选择适当的 web 服务器来托管您的应用，并有一种机制能够将所有这些打包在一起，最好是在一个需要最少外部配置的独立工件中。传统上，所有这些都很难可靠且一致地实现，但这正是 Docker 显著改变现状的地方。有了 Docker 和支持工具，您现在有能力以比以往任何时候都更快、更可靠、更一致和更便携的方式实现所有这些和更多。
在本章中，您将学习如何创建一个全面的工作流，允许您使用 Docker 以可移植、可重复和一致的方式测试、构建和发布应用。您将了解到的方法有许多好处，例如，您将能够通过运行一些简单、易于记忆的命令来执行所有任务，并且无需在本地开发或构建环境中安装任何特定于应用或特定于操作系统的依赖项。这使得移动到另一台机器或配置连续交付服务来执行相同的工作流变得非常容易——只要您拥有上一章中设置的基于 Docker 的核心环境，您就能够在任何机器上运行工作流，而不管您的应用或编程语言的具体情况如何。
您将学习如何使用 Dockerfile 为您的应用定义测试和运行时环境，配置对多阶段构建的支持，允许您在具有所有可用开发工具和库的映像中构建应用工件，然后将这些工件复制到 Dockerfile 的其他阶段。您将利用 Docker Compose 作为一种工具来协调具有多个容器的复杂 Docker 环境，这允许您测试集成场景，例如您的应用与数据库的交互，并模拟您将如何在生产环境中运行您的应用。将介绍的一个重要概念是构建发布映像的概念，这是一个可以交付生产的生产就绪映像，假设任何新的应用特性和功能都按预期工作。您将在本地 Docker 环境中构建和运行此发布映像，将应用连接到数据库，然后创建验收测试，从连接到应用的外部客户端的角度验证应用是否按预期工作。
最后，您将使用 GNU Make 将您所学的全部知识整合在一起，以自动化您的工作流程。一旦完成，您将能够通过简单地运行`make test`来运行单元测试和构建应用工件，然后构建您的发布映像，启动一个类似于生产的环境，并通过运行`make release`来运行验收测试。这将使测试和发布新的应用变更变得非常简单，因为它们是使用可移植和一致的工作流开发的，该工作流可以在本地开发环境和支持 Docker 和 Docker Compose 的任何连续交付环境中轻松运行。
将涵盖以下主题:
*   使用 Docker 测试和构建应用
*   创建多阶段构建
*   创建一个测试阶段来构建和测试应用工件
*   创建发布阶段来构建和测试发布映像
*   使用 Docker 编写测试和构建应用
*   创建验收测试
*   自动化工作流程
# 技术要求
下面列出了完成本章的技术要求:
*   按照第 1 章中的说明安装必备软件
*   根据第 1 章中的说明创建的 GitHub 帐户
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/CH2](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3)
查看以下视频，了解《行动守则》:
[http://bit.ly/2PJG2Zm](http://bit.ly/2PJG2Zm)
# 使用 Docker 测试和构建应用
在前一章中，您已经很好地理解了示例应用是什么，以及如何在本地开发环境中测试和运行该应用。现在，您已经准备好开始创建 Docker 工作流，该工作流将测试、构建应用并将应用打包到 Docker 映像中。
重要的是要理解，无论何时将应用打包到 Docker 映像中，最佳实践方法都是减少或消除最终打包的应用的所有开发和测试依赖关系。按照我自己的惯例，我将这个打包的应用——没有测试和开发依赖——称为*发布映像，*支持连续交付的范例，其中每个成功的构建都应该是一个发布候选，如果需要，可以发布到生产中。
为了实现创建发布映像的目标，一种行之有效的方法是将 Docker 构建过程分为两个阶段:
*   **测试阶段**:这个阶段拥有所有可用的测试和开发依赖项，可以将您的应用源编译和构建成应用工件，并运行单元和集成测试。
*   **发布阶段**:该阶段将测试阶段的测试和构建的应用工件复制到一个最小化的运行时环境中，该环境被适当地配置为在生产中运行应用。
Docker 使用一个称为多阶段构建的特性来支持这种方法，这是我们将在本书中采用的方法。现在，我们将把重点放在测试阶段，并在下一节进入发布阶段。
# 创建测试阶段
我们将从在`todobackend`存储库的根处创建`Dockerfile`开始，这意味着您的存储库结构应该如下所示:
```
todobackend> tree -L 2
.
├── Dockerfile
├── README.md
└── src
    ├── coverage.xml
    ├── db.sqlite3
    ├── manage.py
    ├── requirements.txt
    ├── requirements_test.txt
    ├── todo
    ├── todobackend
    └── unittests.xml
3 directories, 8 files
```
现在让我们在新创建的 Dockerfile 中定义几个指令:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
```
`FROM`指令是您在 Dockerfile 中定义的第一个指令，请注意，我们使用的是 Alpine Linux 发行版作为基础映像。Alpine Linux 是一个极简的发行版，它比更传统的 Linux 发行版(如 Ubuntu 和 CentOS)占用空间小得多，自从 Docker 采用 Alpine 作为 Docker 官方映像的首选发行版以来，它在容器领域变得非常受欢迎。
您可能没有遇到的一个关键字是`AS`关键字，它被附加到`FROM`指令中，该指令将 Dockerfile 配置为[多阶段构建](https://docs.docker.com/develop/develop-img/multistage-build/)，并将当前阶段命名为`test`。当您有一个多阶段构建时，您可以包括多个`FROM`指令，每个阶段定义为包括当前的`FROM`指令和后续指令，直到下一个`FROM`指令。
接下来，我们使用`LABEL`指令来附加一个名为`application`的标签，其值为`todobackend`，这对于能够识别支持 todobackend 应用的 Docker 映像非常有用。
# 安装系统和构建依赖项
我们现在需要安装各种系统并构建支持测试和构建应用的操作系统依赖项:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
# Install basic utilities
RUN apk add --no-cache bash git
# Install build dependencies RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev
RUN pip3 install wheel
```
在前面的示例中，我们安装了以下依赖项:
*   **基本实用工具**:在 Alpine Linux 中，包管理器叫做`apk`，Docker 镜像中常用的模式是`apk add --no-cache`，安装引用的包，保证下载的包不被缓存。我们安装了`bash`，这对于故障排除很有用，以及`git`，这是必需的，因为我们稍后将使用 Git 元数据为 Docker 发行版映像生成应用版本标签。
*   **构建依赖关系**:这里我们安装构建应用所需的各种开发库。这包括用于编译任何 Python C 扩展及其支持的标准库的`gcc`、`python3-dev`、`libffi-dev`、`musl-dev`和`linux-headers`，以及在 todobackend 应用中构建 MySQL 客户端所需的`mariadb-dev`包。您还安装了一个名为`wheel`的 Python 包，它允许您构建 Python *轮子*，这是一种预编译和预构建的打包格式，我们将在稍后使用。
# 安装应用依赖项
下一步是安装应用依赖项，正如您在上一章中所学习的，这意味着安装在`src/requirements.txt`和`src/requirements_test.txt`文件中定义的包:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
# Install basic utilities
RUN apk add --no-cache bash git
# Install build dependencies
RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev
RUN pip3 install wheel
# Copy requirements
COPY /src/requirements* /build/
WORKDIR /build
# Build and install requirements
RUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input
RUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir
```
首先使用`COPY`指令将`src/requirements.txt`和`src/requirements_test.txt`文件复制到`/build`容器中的一个文件夹中，然后通过`WORKDIR`指令将其指定为工作目录。请注意，`/src/requirements.txt`不是 Docker 客户端上的物理路径，而是 Docker *构建上下文中的路径，*是 Docker 客户端文件系统上的一个可配置位置，您可以在执行构建时指定该位置。为了确保 Docker 构建过程中所有相关的应用源代码文件都可用，通常的做法是将应用存储库的根设置为构建上下文，因此在上面的示例中`/src/requirements.txt`指的是 Docker 客户端上的`/src/requirements.txt`。
接下来，使用`pip3` wheel 命令将 Python wheels 构建到所有基础应用和测试依赖项的`/build`工作目录中，使用`--no-cache-dir`标志来避免映像膨胀，使用`--no-input`标志来禁用用户确认提示。最后，您使用`pip3 install`命令将先前构建的轮子安装到容器中，使用`--no-index`标志指示 pip 不要尝试从互联网下载任何包，而是按照`-f`标志的指定从`/build`文件夹安装所有包。
这种方法可能看起来有点奇怪，但是，它基于这样一个原则，即您应该只将应用依赖项作为可安装的包构建一次，然后根据需要安装构建的依赖项。稍后，我们将在发布映像中安装相同的依赖项，确保您的发布映像准确地反映应用测试和构建所依据的依赖项的确切集合。
# 复制应用源并运行测试
测试阶段的最后步骤是将应用源复制到容器中，并添加对运行测试的支持:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
# Install basic utilities
RUN apk add --no-cache bash git
# Install build dependencies
RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev
RUN pip3 install wheel
# Copy requirements
COPY /src/requirements* /build/
WORKDIR /build
# Build and install requirements
RUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input
RUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir
# Copy source code COPY /src /app
WORKDIR /app # Test entrypoint CMD ["python3", "manage.py", "test", "--noinput", "--settings=todobackend.settings_test"]
```
在上例中，首先将整个`/src`文件夹复制到名为`/app`的文件夹中，然后将工作目录更改为`/app`。您可能想知道为什么我们在复制需求文件时没有复制所有的应用源。这里的答案是，我们正在实现缓存优化，因为您的需求文件需要构建应用依赖关系，通过在单独的早期层中构建它们，如果需求文件保持不变(它们往往会这样做)，Docker 可以利用最近构建的层的缓存版本，而不必在每次构建映像时都构建和安装应用依赖关系。
最后，我们添加`CMD`指令，该指令定义了在创建和执行基于该映像的容器时将执行的默认命令。请注意，我们指定了与上一章中相同的`python3 manage.py test`命令来本地运行我们的应用测试。
You might wonder why we didn't just run our tests in the image using the `RUN` directive. The answer here is that you may want to collect artifacts as part of the build process, such as test reports, which are much easier to copy from a container that you spawn from a Docker image, than during the actual image-build process.
在这一点上，我们已经定义了 Docker 构建过程的第一阶段，它将创建一个准备测试的独立环境，包括所需的操作系统依赖项、应用依赖项和应用源代码。要构建映像，您可以运行`docker build`命令，用名称`todobackend-test`标记映像:
```
> docker build --target test -t todobackend-test . Sending build context to Docker daemon 311.8kB
Step 1/12 : FROM alpine AS test
 ---> 3fd9065eaf02
Step 2/12 : LABEL application=todobackend
 ---> Using cache
 ---> afdd1dee07d7
Step 3/12 : RUN apk add --no-cache bash git
 ---> Using cache
 ---> d9cd912ffa68
Step 4/12 : RUN apk add --no-cache gcc python3-dev libffi-dev musl-dev linux-headers mariadb-dev
 ---> Using cache
 ---> 89113207b0b8
Step 5/12 : RUN pip3 install wheel
 ---> Using cache
 ---> a866d3b1f3e0
Step 6/12 : COPY /src/requirements* /build/
 ---> Using cache
 ---> efc869447227
Step 7/12 : WORKDIR /build
 ---> Using cache
 ---> 53ced29de259
Step 8/12 : RUN pip3 wheel -r requirements_test.txt --no-cache-dir --no-input
 ---> Using cache
 ---> ba6d114360b9
Step 9/12 : RUN pip3 install -r requirements_test.txt -f /build --no-index --no-cache-dir
 ---> Using cache
 ---> ba0ebdace940
Step 10/12 : COPY /src /app
 ---> Using cache
 ---> 9ae5c85bc7cb
Step 11/12 : WORKDIR /app
 ---> Using cache
 ---> aedd8073c9e6
Step 12/12 : CMD ["python3", "manage.py", "test", "--noinput", "--settings=todobackend.settings_test"]
 ---> Using cache
 ---> 3ed637e47056
Successfully built 3ed637e47056
Successfully tagged todobackend-test:latest
```
在前面的示例中，`--target`标志允许您在多阶段 Dockerfile 中定位特定阶段。虽然我们目前只有一个阶段，但是这个标志允许我们在 Dockerfile 中有多个阶段的情况下只构建测试阶段。按照惯例，`docker build`命令会在运行该命令的目录中查找一个`Dockerfile`文件，命令末尾的句点将当前目录(即本例中的应用存储库根目录)指定为构建映像时应该复制到 Docker Engine 的构建上下文。
在本地 Docker 引擎中构建映像并用映像名称`todobackend`标记后，您现在可以从该映像启动一个容器，默认情况下，该容器将运行`CMD`指令指定的`python3 manage.py test`命令:
```
todobackend>  docker run -it --rm todobackend-test
Creating test database for alias 'default'...
Ensure we can create a new todo item
- item has correct title
- item was created
- received 201 created status code
- received location header hyperlink
Ensure we can delete all todo items
- all items were deleted
- received 204 no content status code
Ensure we can delete a todo item
- received 204 no content status code
- the item was deleted
Ensure we can update an existing todo item using PATCH
- item was updated
- received 200 ok status code
Ensure we can update an existing todo item using PUT