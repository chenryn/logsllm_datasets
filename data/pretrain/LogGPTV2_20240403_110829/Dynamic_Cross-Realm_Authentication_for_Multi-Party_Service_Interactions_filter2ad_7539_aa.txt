# Dynamic Cross-Realm Authentication for Multi-Party Service Interactions

**Authors:**
- Dacheng Zhang
  - School of Computing, University of Leeds, UK
  - School of Computer, Beihang University, China
  - Email: {dcz, jxu}@comp.leeds.ac.uk
- Jie Xu
  - PI:EMAIL
- Xianxian Li
  - PI:EMAIL

## Abstract

Modern distributed applications increasingly incorporate dynamic elements, such as dynamic supply-chain management, enterprise federations, and virtual collaborations. This dynamism introduces new security challenges, particularly in the context of multi-party service interactions across different security realms. Collaborating services may belong to different security domains and need to be dynamically engaged at runtime. If these security realms do not have a direct cross-realm authentication relationship, secure collaboration becomes technically challenging. A common solution is to locate intermediate realms that serve as an authentication path between the two separate realms. However, this process can be complex, involving numerous credential conversion operations and a long chain of invocations to intermediate services.

In this paper, we address this problem by introducing a new cross-realm authentication protocol for dynamic service interactions, based on the concept of multi-party business sessions. Our protocol eliminates the need for credential conversion and the establishment of any authentication path between session members. We analyze the correctness of the protocol and perform a comprehensive empirical study using two production-quality Grid systems, Globus 4 and CROWN. The experimental results indicate that our protocol and its implementation offer a high level of scalability and impose only a limited performance overhead, comparable to the security-related overheads in Globus 4.

**Keywords:** Authentication, Multi-Party Interactions, Secure Service Collaborations, Web Services, Workflow Business Sessions

## 1. Introduction

Dynamism and flexibility are becoming core characteristics of modern large-scale distributed applications, such as business application integration, distributed auction services, and order processing. In many cases, a business process does not follow a strict specification; the execution order of activities can be unpredictable, and the actual execution of a process can even be "one-of-a-kind." The applications and services involved in the process are typically heterogeneous and may be provided and maintained by different organizations. Each organization has its own security mechanisms and policies to protect its local resources, so the application must operate within multiple, heterogeneous security realms. A security realm is a group of principals (people, computers, services, etc.) registered with a specified authentication authority and managed through a consistent set of security processes and policies.

Because organizations and services can join a collaborative process in a highly dynamic and flexible way, it cannot be expected that every pair of collaborating security realms will always have a direct cross-realm authentication relationship. A possible solution is to locate some intermediate realms that serve as an authentication path between the two separate realms. However, the overhead of generating an authentication path for two distributed realms is significant, involving numerous credential conversion operations and a long chain of invocations to intermediate services.

In this paper, we present a new solution for dynamically authenticating services from different realms. The main contributions of our work are: (1) using the multi-party session concept to structure dynamic business processes, (2) a simple but effective way to authenticate the members of a business session, and (3) a set of protocols for session management, supported by empirical evaluation and formal analysis. Section 2 discusses the fundamentals of constructing multi-party service interactions. Section 3 describes our proposed authentication protocols and trust relationships, supported by formal proofs. In Section 4, we present an empirical evaluation of our system using GT4 and CROWN middleware systems. Section 5 discusses related work, and Section 6 concludes the paper.

## 2. Multi-Party Service Interactions

In a distributed application, a session is a lasting collaboration involving several participating principals, called session partners. A session is often characterized by a state that includes variables holding information from messages transferred within the collaboration. A business process can be conveniently regarded as a business session. In terms of a Service-Oriented Architecture (SOA), a business session is a collaboration involving two or more services, with service instances as session partners. In practice, a session may discover and select services at runtime. After receiving an initial request from a business session, a service typically spawns a service instance to handle the request. Once this instance is accepted as a session partner, it is entitled to collaborate with other partners within the same session.

### 2.1 Two-Party Session

A two-party session consists of two session partners: a client and a server. For the security of a two-party session, an authentication process is required when the client sends an initial request to the server. A short-term secret key, also called a session key, is then agreed upon and generated. The session key can be used in further communications to encrypt messages transferred between the session partners. The two-party session technique is widely used in many distributed systems and integrated into most authentication protocols (e.g., SSL and Kerberos). However, if the two-party session technique is directly applied to the construction of a multi-party session, new problems arise. Hada and Maruyama [9] demonstrate that, if a multi-party session is constructed out of multiple two-party sessions, it can be difficult for a session partner to verify whether the service instance it contacts is actually a member of the same session. From the perspective of cross-realm authentication, the two-party session technique does not address the issue with Heterogeneous Cross-Realm Authentication (HCRA), which requires credential conversion and the establishment of authentication paths.

### 2.2 Multi-Party Session

A multi-party session may have two or more session partners for the intended collaboration. A partner can search for and invoke new services at runtime. Before a service (instance) is accepted as a new partner, an HCRA process is needed. However, unlike a two-party session, authentication for the existing partners of a multi-party session can be significantly simplified without requiring credential conversion and the establishment of any authentication path. This is because session partners can use their session memberships to authenticate each other, even if they belong to different security realms. A shared session key or individual secret keys may be used to enforce a secure collaboration among session partners.

Consider the example in Figure 1. When SI attempts to contact CI, it does not need to authenticate itself with the local authentication system of CI because both SI and CI are members of the same session. SI can simply use its session membership to prove its identity to CI. This simplified authentication process is called Simplified Cross-Realm Authentication (SCRA). The HCRA process needs to be repeated (n – 1) times for a multi-party session with n security realms, but up to (n – 1) × (n – 2)/2 authentication processes can be simplified as SCRA based on session memberships, thereby reducing both cost and complexity significantly.

### 2.3 Message Routing

Message routing involves dispatching messages to the intended service instance, which maintains corresponding states. In practice, a service may handle requests from different requestors concurrently. When all requestors invoke operations provided by the same port, the messages are sent to the same address (e.g., the same URL). In this case, additional correlated information is needed to help the underlying middleware determine which interaction a message is related to and to locate the corresponding service implementation object to handle the message.

A simple approach is to use a correlated token, shared by the communicating partners, to identify the collaboration. A shared token is sufficient for identifying session partners in a two-party collaboration. However, session partners (i.e., service instances) in a multi-party session may be generated by the same service with the same address, making it difficult to distinguish them using a single token. In contrast, an ID-based solution assigns a unique identifier to every session partner, distinguishing all partners unambiguously. In practice, a token-based solution is usually used to decide whether an instance is working within a business session, while an ID-based scheme is employed to identify individual session partners when fine-grained identification is needed.

### 2.4 Secret Keys

In a two-party session, authentication typically consists of several rounds of operations and message passing, and the session key used in subsequent communication between the two partners is a by-product of the authentication process. However, in a multi-party session, SCRA is a highly simplified process and does not include the automatic generation of secret keys.

One approach is to generate a single secret key for a given multi-party session and distribute it to all session partners. Once the session key is generated, it can be used to simplify the authentication process among the existing session partners, avoiding HCRA. Hada and Maruyama’s protocols [9] are an example of this type of solution, supported by a Session Authority. However, if a partner loses the secret key, the security of the whole session will be compromised. Moreover, session partners may leave and join a session dynamically. When a partner leaves, the shared secret key must be refreshed to ensure that any previous partner cannot gain further information from the session. Similarly, when a new partner joins the session, the secret key must also be refreshed to ensure that any new partner cannot obtain previous information transferred within the session. The issues related to secret key revocation have been discussed in many papers on secure group communications.

Another possible solution is to generate a shared secret key for every pair of session partners (e.g., using the Diffie-Hellman public key algorithm [18]). This scheme is more costly but avoids the issue of key revocation.

### 2.5 Session Authority

A Session Authority (SA) is a service that provides reliable real-time information (e.g., session memberships) for a given multi-party session. For example, the SA may be employed to notify that a partner has left the session by contacting all the partners that have collaborated with the previous partner. An SA service could be associated with, or implemented as part of, a multi-party management system. This can be implemented using different methods with different features and characteristics, such as fault-tolerance, scalability, and cost-effectiveness. These methods include centralized management, decentralized architecture for better scalability, and fully distributed information provision for improved fault-tolerance.

In our implementation, our authentication protocols are designed to conform to the WS-Coordination specification [3], where an SA is an extension of a coordinator. In WS-Coordination, both centralized and decentralized coordinators are discussed. An SA may act as a centralized service that handles requests from all session partners within a business session, or it may manage session partners within a local domain only, with a group of decentralized SAs collectively managing the whole business session, thereby avoiding the problem of concentrating SA operations in a single place.

## 3. Authentication Protocols

In this section, we provide a multi-party authentication system and use the business scenario in Section 2 to explain the structure of the system. The related protocols are described and analyzed formally.

### 3.1 Example

Consider an SA-based multi-party authentication system. In this system, each business session is associated with a unique session identifier. Every service instance within a session is associated with a unique instance identifier, allowing every session partner to be identified unambiguously. The Diffie-Hellman public key algorithm is used to generate a pair of public/private keys for each service instance. The public key of an instance is identical to its identifier and can be transferred over the network, while its private key is kept securely and can be used to prove the possession of the identifier. The Diffie-Hellman algorithm is also used to generate a shared secret key for every pair of collaborative partners in a session.

Figure 2 illustrates how the authentication system performs multi-party session authentication and management using the example in Figure 1. First, CI contacts an SA to start a new business session, S. The SA service then generates an instance, SA, to manage the new session. CI thus becomes a session partner of S, and its identifier is recorded in SA. CI then contacts Producer. Producer sends back the identifier of the instance PI in Step (2), while PI is introduced by CI to SA in Step (3). Next, CI starts to collaborate with PI after receiving confirmation from SA (Step (4)). In the same way, PI invokes a new shipper instance SI and introduces it to SA (Steps (5) to (7)). After receiving the request from SI, CI first contacts SA to check whether SI is a legal business session partner of S (Steps (8) and (9)). Once this is confirmed by SA, CI and SI can use the Diffie-Hellman algorithm to agree upon a shared secret key for further communications.

### 3.2 Formal Definitions

In this section, we define two core protocols in our multi-party authentication system using the well-known Logic of Authentication (or BAN logic) [2]. Protocol 1 is concerned with the introduction of a new session partner, and Protocol 2 performs authentication between two existing session partners. For the brevity of discussion, we use the following notation for formal definitions and proofs (which is a simplified version of the notation used in [14]):

- \( p \): Large prime number
- \( a \): Exponentiation base
- \( A, B, C \): Session partners
- \( SA \): Session authority
- \( ID_A \): Identifier of A
- \( S \): Multi-party session with identifier \( IDS \)
- \( Pri(A) \): Private key of principal A
- \( Pub(A) \): Public key of principal A, i.e., \( (a^{Pri(A)} \mod p) = ID_A \)
- \( K(A, B) \): Secret key generated with \( Pri(A) \) and \( Pub(B) \); \( K(A, B) = (Pub(B))^{Pri(A)} = a^{Pri(A) + Pri(B)} \mod p \); \( K(A, B) = K(B, A) \)
- \( (M, N) \): Composite message composed of messages M and N
- \( MAC(M)_K \): Message authentication code generated with secret key K
- \( Secure(M) \): Message M is transmitted by a secure channel
- \( Valid(M)_K \): Composite message \( (M, MAC(M)_K) \)
- \( \uparrow Pub(A) \): Freshness of public key A
- \( \#M \): Nonce M
- \( SP(A, S) \): Session partner A in session S

This notation and the formal definitions will be used to describe and analyze the protocols in detail.