title:A Framework for Dynamic Byzantine Storage
author:Jean-Philippe Martin and
Lorenzo Alvisi
A Framework for Dynamic Byzantine Storage
Jean-Philippe Martin, Lorenzo Alvisi
Laboratory for Advanced Systems Research
The University of Texas at Austin
{jpmartin,lorenzo}@cs.utexas.edu
∗
Abstract
We present a framework for
transforming sev-
eral quorum-based protocols so that they can dynamically
adapt their failure threshold and server count, allow-
ing them to be reconﬁgured in anticipation of possible
failures or to replace servers as desired. We demon-
strate this transformation on the dissemination quo-
rum protocol. The resulting system provides conﬁrmable
wait-free atomic semantics while tolerating Byzan-
tine failures from the clients or servers. The system can
grow without bound to tolerate as many failures as de-
sired. Finally, the protocol is optimal and fast: only the
minimal number of servers —3f + 1— is needed to toler-
ate any f failures and, in the common case, reads require
only one message round-trip.
1. Introduction
Quorum systems [5] are a valuable tool for building
highly available distributed data services. These systems
store a shared variable at a set of servers and perform read
and write operations at some subset of these servers (a
quorum). To access the shared variable, protocols deﬁne
some intersection property for the quorums which, com-
bined with the protocol description themselves, ensure that
read and write operations obey precise consistency seman-
tics. In particular, a shared register can provide, in or-
der of increasing strength, safe, regular, or atomic seman-
tics [11].
Malkhi and Reiter [13] have pioneered the study of
Byzantine quorum systems (BQSs), in which servers may
fail arbitrarily. Their masking quorum systems guaran-
tee data integrity and availability despite compromised
servers; they also introduce dissemination quorum systems
that can be used by services that support self-verifying
data, i.e., data that cannot be undetectably altered by a
∗
This work was supported in part by grants from the Texas Advanced
Technology Program and Sandia National Laboratories and by an
Alfred P. Sloan Fellowship.
faulty server, such as data that have been digitally signed
or associated with message authentication codes (MACs).
Traditional BQS protocols set two parameters—N, the
set of servers in the quorum system, and f, the resilience
threshold denoting the maximum number of servers that
can be faulty1—and treat them as constants throughout the
life of the system. The rigidity of these static protocols is
clearly undesirable.
Fixing f forces the administrator to select a conserva-
tive value for the resilience threshold, one that can tolerate
the worst case-failure scenario. Usually, this scenario will
be relatively rare; however, since the value of f determines
the size of the quorums, in the common case quorum op-
erations are forced to access unnecessarily large sets, with
obvious negative effects on performance.
Fixing N not only prevents the system administrator
from retiring faulty or obsolete servers and substituting
them with correct or new ones, but also greatly reduces the
advantages of any technique designed to change f dynam-
ically. For a given Byzantine quorum protocol, N must
be chosen to accommodate the maximum value fmax of
the resilience threshold, independent of the value of f that
the system uses at a given point in time. Hence, in the
common case the degree of replication required to toler-
ate fmax failures is wasted.
Alvisi et al. [2] take a ﬁrst step towards addressing
these limitations. They propose a protocol that, for a
ﬁxed N, can dynamically raise or lower f within a range
[fmin...fmax] at run time without relying on any con-
currency control mechanism (e.g., no locking). Improv-
ing on this result, Kong et al. [10] propose a protocol that
can dynamically adjust f and, once faulty servers are de-
tected, can ignore them to obtain quorums that exhibit
better load2, effectively shrinking N. The protocol how-
ever does not allow to add new servers to N. While other
quorum-based systems such as Rambo [12], Rambo II [8],
and GeoQuorums [6] can adjust dynamically both f and
1
Papers such as [13] consider generalized fault structures, offering a
more general way of characterizing fault tolerance than a threshold.
However, such structures remain static.
2 Given a quorum system S, the load of S is the access probability of
the busiest quorum in S, minimized over all strategies.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:11 UTC from IEEE Xplore.  Restrictions apply. 
N, they cannot tolerate Byzantine failures.
In this paper we propose a methodology for transform-
ing static Byzantine quorum protocols into dynamic ones
where both N and f can change, growing and shrinking
as appropriate3 during the life of the system. We have suc-
cessfully applied our methodology to several Byzantine
quorum protocols [9, 13, 14, 17, 18]. The common charac-
teristic of these protocols is that they are based on the Q-
RPC primitive [13]. A Q-RPC contacts a responsive quo-
rum of servers and collects their answers, making it a nat-
ural building block for implementing quorum-based read
and write operations. Our methodology is simple and non-
intrusive: all that it requires to make a protocol dynamic is
to substitute each call to Q-RPC with a call to a new primi-
tive, called DQ-RPC for dynamic Q-RPC. DQ-RPC main-
tains the properties of Q-RPC that are critical for the cor-
rectness of Byzantine quorum protocols, even when N and
f can change.
Deﬁning DQ-RPC to minimize changes to existing pro-
tocols is challenging. The main difﬁculty comes from
proving that read and write operations performed on the
dynamic version of a protocol maintain the same consis-
tency semantics of the operations performed on the static
version of the same protocol. In the static case, these
proofs rely on the intersection properties of the responsive
quorums contacted by Q-RPCs while performing the read
and write operations. Unfortunately, these proofs do not
carry easily to DQ-RPC. When N changes, it is no longer
possible to guarantee quorum intersection: given any two
distinct times t1 and t2, the set of machines in N at t1
and t2 may be completely disjoint. We address this prob-
lem by taking a fresh look at what makes Q-RPC-based
static protocols work.
Traditionally, the correctness of these protocols relies
on properties of the quorums themselves, such as intersec-
tion. Instead, we focus our attention on the properties of
the data that is retrieved by quorum operations such as Q-
RPC. In particular, we identify two such properties, sound-
ness and timeliness. Informally, soundness states that the
data that clients gather from the servers was previously
written; timeliness requires this data to be as recent as
the last written value. We call these properties transquo-
rum properties, because they do not explicitly depend on
quorum intersection. We prove that transquorum proper-
ties are sufﬁcient to guarantee the consistency semantics
provided by each of the protocols that we consider. Now,
all that is needed to complete our transition from static to
dynamic protocols is to show an instance of a quorum op-
eration that satisﬁes the transquorum properties even when
f and N are allowed to change: we conclude the paper by
showing that DQ-RPC is such an operation.
3 We focus on the mechanisms necessary for supporting dynamic quo-
rums. A discussion of the policies used to determine when to adjust
N and f is outside the scope of this paper. Some examples of such
policies are given in [3, 10].
Unfortunately, space limitation force us to state, rather
than prove, the theorems and lemmas that we claim in this
paper. The proofs are presented in a technical report [15].
The rest of the paper is organized as follows. We cover
related work and system model, respectively, in Section 2
and Section 3. We specify the transquorum properties in
Section 4 and show in Section 5 that our DQ-RPC satisﬁes
the transquorum properties before concluding.
2. Related work
Alvisi et al. [2] are the ﬁrst to propose a dynamic BQS
protocol. They let quorums grow and shrink depending
on the value of f, which is allowed to range dynamically
within an interval [fmin, ..., fmax]. This ﬂexibility, how-
ever, comes at a cost: because their protocol does not al-
low to change N, it requires 2(fmax− fmin) more servers
than an equivalent static protocol to tolerate a maximum
of fmax failures.
The Agile store [10] modiﬁes the above protocol by in-
troducing a special, fault-free node that monitors the set
of servers in the quorum system. The monitor tries to de-
termine which are faulty and to inform the clients, so that
they can ﬁnd a responsive quorums more quickly. In the
Agile store servers can be removed from N, but not added.
Therefore, if the monitor mistakenly identiﬁes a node as
faulty and removes it from N, the system’s resilience is re-
duced: The system tolerates fmax Byzantine faulty servers
only as long as the monitor never makes such mistakes.
The Rosebud project [19] shares several of our goals.
Rosebud envisions a dynamic peer to peer system, where
servers can fail arbitrarily, the set of servers can be modi-
ﬁed at run-time, and clients use quorum operations to read
and write variables. It is hard to compare our protocols
to Rosebud, because the only Rosebud reference we have
identiﬁed [19] does not give speciﬁc details of the proto-
cols they intend to use to achieve their goals. Nonetheless,
Rosebud, by requiring loosely synchronized clocks and as-
suming servers with a cryptographic co-processor, appears
to make stronger assumptions than we do in this paper.
Also, Rosebud’s handling of view changes appears to dif-
fer from ours in at least two ways. First, when an opera-
tion in Rosebud detects that the set of servers is changing,
it simply restarts; second, Rosebud allows N to change
only at pre-set intervals. In contrast, we allow operations
to continue even as N is changing, and we allow N (and
f) to change at any time.
Several quorum-based protocols allow to change N and
f, but only tolerate crash failures. Rambo and Rambo
II [8, 12] provide the same interface as our protocols: read,
write and reconﬁgure. They guarantee atomic semantics in
an unreliable asynchronous network despite crash failures.
4
Partial-atomic semantics guarantees that reads either satisfy atomic
semantics or abort [18].
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:11 UTC from IEEE Xplore.  Restrictions apply. 
name
crash
U-dissemination [17]
hybrid-d [9]
U-masking [18]
hybrid-m [9]
Phalanx [14]
hybrid Phalanx
can tolerate (crash,Byz)
(f, 0), without signatures
(0, b), using signatures
(f, b), using signatures
(0, b), without signatures
(f, b), without signatures
(0, b), without client signatures Byzantine
(f, b), without client signatures Byzantine
client failures
crash
crash
crash
correct
correct
semantics
atomic
atomic
atomic
partial-atomic4
partial-atomic4
partial-atomic4
partial-atomic4
servers required
2f + 1
3b + 1
2f + 3b + 1
4b + 1
2f + 4b + 1
4b + 1
2f + 4b + 1
Figure 1: List of quorum protocols that can be made dynamic using DQ-RPC
In GeoQuorums [6] the world is split into n focal points
and servers are assigned to the nearest (geographically) fo-
cal point. The system provides atomic semantics as long
as no more than f focal points have no servers assigned to
them. Servers can join and leave; however, neither n nor f
can change with time.
Abraham et al. [1] target large systems, such as peer-
to-peer, where it is important for clients to issue reads and
writes without having to know the set of all servers, and it
is important for servers to join and leave without having to
contact all servers. Their probabilistic quorums meet these
n)
goals (for example, clients only need to know O(
servers), provide atomic semantics with high probability,
and can tolerate crash failures of the servers.
√
View-oriented group communication systems provide a
membership service whose task is to maintain a list of the
currently active and connected members of a group [4].
The output of the membership service is called a view. If
we consider the set of servers in the quorum system as a
group, then in our protocol the membership service is triv-
ially implemented by an administrator, who is solely re-
sponsible for steering the system from view to view (see
Section 5.1).
An interesting property of our protocol is that it al-
lows processes who are outside the quorum systems —
i.e. the clients in our protocol—to query servers within the
quorum system to learn the current view. Note that our
clients do not learn about views from the membership ser-
vice, but rather indirectly, through the servers. Nonethe-
less, our protocol guarantees that, despite Byzantine fail-