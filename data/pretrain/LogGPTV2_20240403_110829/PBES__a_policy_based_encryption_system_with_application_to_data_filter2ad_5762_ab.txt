planning, post disturbance/event analysis [16] and for research and
development purposes. Currently two pilot deployments each with
about 75 PMUs exist in Eastern [19] and Western [13] Intercon-
nects. There is need for a framework that provides for secure and
ﬂexible data sharing before a wide area full scale deployment of
PMUs can be realized [17]. While we discussed North Ameri-
can power grid above, similar data sharing problem exists in other
power grids such as that of Australia, Europe and Japan that are ei-
ther in the process of deregulation or are already deregulated. The
use of PMUs for wide area monitoring and control is also being
considered in those grids.
3. REQUIREMENTS
lenges. First, establishing pair-wise trust between all the entities in
a wide area is a O(n2) problem and does not scale. Second, while
the system is inherently transitive, i.e., highly interconnected where
a local disturbance can have impact over a wide area, trust relation-
ships are not always transitive. Third, data is usually shared on a
need to know basis and it is not known in advance who might be
needing the data, e.g., for applications like post event analysis.
In studying the data sharing needs in the power grid we argue that
a natural approach is to enable conditional access to data whereby
utilities make data available to each other based on their ability to
satisfy policies. Any solution requires a viable architecture, a data
protection mechanism and a ﬂexible policy enforcement mecha-
nism. Speciﬁcally a desirable solution should satisfy the following
requirements:
Data sharing with multiple recipients Support data sharing with
multiple recipients all of whom may not be known in advance. In
the power grid for example, when data is to be shared based on
prevailing or past conditions in the grid, e.g., post event analysis
applications like disturbance analysis, it is not possible for the data
owner to know ahead of time with whom or how many entities
the data might need to be shared. For example, consider that the
tripping of a line in Ohio caused a disturbance that eventually lead
to the August 2003 blackout - the largest in the North American
Power Grid’s history [16, 40].
Flexible policy speciﬁcation and enforcement Data owners should
be able to specify and associate ﬂexible policies with data in a se-
cure manner such that only entities that satisfy the policies can ac-
cess the data. These policies may be context-based in that data may
only be shared based on the current state of environment. Further-
more, the context-based policies may be such that the data owner
may or may not be able to verify the satisfaction of such policies on
his own. For example, voltage disturbances in the power grid are
only visible in the vicinity of the event, which may be outside the
data owner’s range of observability, but their effect might propagate
over a wide area eventually.
Data exchange on open and untrusted networks Given that the
data sharing is needed between many entities dispersed over a wide
geographic area requiring a trusted or even a closed network for
data sharing is impractical and very expensive.
Protect data and policy secrecy Given the sensitive nature of the
data and the need for sharing over open and untrusted networks
data secrecy must be protected. Furthermore, in open and untrusted
networks the secrecy of policies associated with the data should
also be protected from general public as they might reveal sensi-
tive information about the data and since the data owning organi-
zations would consider their policies themselves to be conﬁdential.
In some cases the policies need to be kept secret even from an au-
thorized recipient as the policies might reveal who else might have
access to the data thereby revealing business relationships of the
data owner which is undesirable.
Security Any solution should provide adequate security for both
the data and associated policies. Speciﬁcally it should secure them
against active and colluding adversaries.
Efﬁciency and Compatibility Any solution should be efﬁcient in
key management including revocation and should have low com-
munication and computation overheads. Furthermore, the solution
should be compatible with other infrastructure components.
By design these requirements are application-independent in na-
ture to allow the development of a widely applicable technical so-
lution for data sharing.
Given the sensitive nature of the data and the reluctance of utili-
ties to share data, realizing wide area data sharing poses many chal-
4. APPROACH
4.1 Related Approaches
An ideal solution for the data sharing problem in the power grid
would be one that does not require trusted servers to enforce the
policy. However existing techniques that enforce the policy crypto-
graphically and provide policy secrecy like CP-ABE [34] are not
adequate as they cannot support ﬂexible context based policies.
Furthermore, the power grid data sharing application and its prop-
erties discussed above indicate that the presence of a Trusted Third
Party (TTP) that enforces access control is acceptable and perhaps
even needed. The ISOs/RTOs regularly mediate power ﬂow and
markets to keep the system stable and provide a means for estab-
lishing TTPs for access control. With a TTP the problem of de-
veloping an appropriate policy-based data sharing solution appears
within reach at ﬁrst in that it can leverage many existing tools and
technologies already developed in the area. However, it turns out
that none of these leading technologies can satisfy the requirements
for our applications. In particular, they are unable to efﬁciently and
securely provide policy secrecy and ﬂexible context-based policy
enforcement. To show this we evaluate the suitability of Public
Key Infrastructure tools, Role-Based Access Control systems, and
secure publish-subscribe event dissemination systems and and dis-
cuss their shortcomings.
PKI, RBAC and context-based policy enforcement. Public Key
Infrastructure (PKI) tools with identity and attribute certiﬁcates pro-
vide data sharing between parties with the help of trusted certiﬁcate
authorities. One can design policy-based data sharing solutions
where a combination of attributes in attribute certiﬁcates are used
to specify the policy. Unfortunately, such solutions would be vul-
nerable to collusion and would also fail to provide policy secrecy.
RBAC systems take PKI one step forward by providing a level of
indirection between users and permissions. They achieve this by
assigning users to roles via role membership certiﬁcates and roles
to permissions for access control. This indirection has been utilized
by several RBAC solutions such as OASIS [6] to provide context-
based policy enforcement whereby users can “activate” their roles
and execute operations based on the assumed role permissions only
if certain context/environment policies (as veriﬁed by trusted ac-
cess control servers) are satisﬁed. If we attempt to extend such so-
lutions to address the requirements speciﬁed above we would face
two limitations. First, in order to ensure policy secrecy, data gener-
ators would have to specify policies at every access control server
over secure channels for every data distribution action. Second,
specifying multi-domain contexts for policy enforcement may im-
pose impractical constraints on role activation because users may
need special roles dedicated to this multi-domain data sharing ap-
plication.
Secure Publish Subscribe Systems. Pub/sub systems are related
to policy-based data sharing systems discussed in this work in that
publishers and subscribers relate to data generators and consumers,
and brokers in the pub/sub infrastructure relate to servers enforc-
ing access control policies. Research in secure pub/sub systems,
in general, and those that provide content encryption, in particular,
offers potential solutions to the problem at hand. In essence tech-
niques for encrypted content distribution via pub/sub systems use
symmetric keys to encrypt events with selective attributes and then
employ fully or partially trusted key servers to distribute those keys
to subscribers based on their subscriptions. To allow routing for
encrypted content these schemes may share keys with routers [5]
expose certain attributes in clear-text for routing purposes, or use
encryption-matching functions [38]. Solutions such as [5] carry
over limitations of RBAC systems identiﬁed above. If we attempt
to use a secure pub/sub solution like [38] for our application we
again face limitations. First, ensuring policy secrecy for a ﬂexible
Figure 2: Policy-based Message Encryption and Decryption
policy language requires publishers and subscribers to maintain a
large number of keys and requires the system to maintain a signiﬁ-
cant amount of auxiliary data that allows mapping of policies with
keys. Second, the solution uses time epochs for coarse-grained re-
vocation and the system would have to be signiﬁcantly enhanced
to support context-based policies that may need ephemeral keys for
the various transient events.
4.2 Our Approach - PBES
The above analysis is not intended to conclude that these existing
technologies cannot be adapted for the problem at hand. Instead,
we argue with this analysis that even with TTPs solutions to this
problem are not obvious. To address this we have developed the
PBES system with a high-level architecture described in Figure 2.
The approach satisﬁes the requirements of Section 3 as follows.
The system is illustrated in Figure 2 and contains ﬁve main com-
ponents: the data owner/sender, the object repository/relay, the Key
Distribution Center (KDC), the attribute database and the data re-
ceiver. A data owner in our system speciﬁes a policy pol and gener-
ates a data object o (e.g. ﬁle) that is intended for one or more recipi-
ents satisfying the policy. The sender uses an encryption scheme to
encrypt the object and the policy. The object repository/relay rep-
resents any content distribution network, for example, a ﬁle server,
an email relay or a publish-subscribe system. We assume that the
encrypted object contains sufﬁcient meta-data to allow for rout-
ing/searching of the data for intended/interested recipients but that
does not reveal the policy; e.g., keywords. Since the object is en-
crypted the repository/relay need not be trusted to protect the object
or enforce access control on it. Recipients obtain the encrypted ob-
ject from this repository/relay via available pull/push mechanisms.
Once a recipient gets the encrypted object it contacts the KDC to
obtain the object decryption key. The KDC may contact an At-
tribute Database that manages user attributes and privileges and
keeps track of environmental attributes. The Attribute Database
abstracted here is a logical entity and in practice may be composed
of multiple databases/services.
There are key design choices here that affect the efﬁciency, se-
curity, ﬂexibility and compatibility. We require that the object and
the policy be encrypted and stored together but that they be separa-
ble for decryption purposes. This improves efﬁciency because on
the sender side the sender need not specify the policy at multiple
servers (KDCs) that may be trusted with policy enforcement and on
the the receiver side the receiver need not send the encrypted ob-
KDC (SK, PK) If pol satisfied then release k E(o) = {OPKEM, ODEM}  where OPKEM is an encapsulation of policy pol and key k, and  ODEM is an encapsulation of object o with key k IDR, OPKEM Receiver (IDR) Owner/Sender (IDS) Protected transaction Object  Repository/Relay E(o) E(o)       IDR Attributes Attribute Database (cid:12)(cid:12)(cid:12)Pr
h
GE−msg−ind−cca2
E,A
i− 1/2
(cid:12)(cid:12)(cid:12)
E,A
(k) =
AdvE−msg−ind−cca2
where GE−msg−ind−cca2
Setup The environment generates a key-pair (sk, pk) and gives pk
(k) is the game described below:
(k) = b
E,A
to A.
Phase 1 A1 is provided with a decryption oracle for E with above
generated key-pair. It is also allowed to arbitrarily and adap-
tively add/corrupt users. That is it can get access to arbitrary
sets of attributes represented by corrupted users ui.
Challenge A1 outputs two messages, m0, m1 of equal length, a
policy p of his choice and some state information St with the
following restriction:
Restriction 1: None of the corrupted users satisfy the policy
p throughout the game.
The environment then picks a random bit, b $←− {0,1}, and en-
crypts message mb under policy p and returns the challenge
ciphertext C∗ along with St to A2.
Phase 2 A2 is provided with a decryption oracle for E with above
generated key-pair and is allowed to do everything A1 is al-
lowed in Phase 1 with the constraint that Restriction 1 must
be satisﬁed and that it cannot query the decryption oracle on
C∗.
Output A2 outputs his guess b0 ∈ {0,1}. A wins if b0 = b.
That is, an adversary cannot distinguish between encryptions of
two messages under a given policy. Restriction 1 is needed because
otherwise the adversary can trivially win the game by decrypting
the challenge ciphertext as he has access to keying material of a
user who satisﬁes the policy.
Deﬁnition 5.2. Policy Indistinguishability
E has policy indistinguishability against an adaptive chosen ci-
phertext attack if the guessing advantage, of any PPT adversary,
A = (A1,A2), as deﬁned below is negligible.
(cid:12)(cid:12)(cid:12)Pr
h
GE¸ −pol−ind−cca2
E,A
i− 1/2
(cid:12)(cid:12)(cid:12)
E,A
(k) =
AdvE−pol−ind−cca2
where GE−pol−ind−cca2
Setup The environment generates a key-pair (sk, pk) and gives pk
(k) is the game described below:
(k) = b
E,A
to A.
Phase 1 A1 is provided with a decryption oracle for E with above
generated key-pair. It is also allowed to arbitrarily and adap-
tively add/corrupt users. That is it can get access to arbitrary
sets of attributes represented by corrupted users ui.
Challenge A1 outputs state information St, a message, m, and two
policies p0, p1 of equal length satisfying one of the following
restrictions:
Restriction 2a: All of the corrupted users satisfy both poli-
cies p0 and p1 throughout the game. OR
Restriction 2b: None of the corrupted users satisfy either
policy p0 or policy p1 throughout the game.
The environment then picks a random bit, b $←− {0,1}, and en-
crypts message m under policy pb and returns the challenge
ciphertext (C∗) along with St to A2.
Figure 3: Encryption in PKEM-DEM scheme instantiated us-
ing RSA-KEM and DEM1
ject (which could be large) to the KDC for policy enforcement and
decryption. We associate the object and policy with a key rather
than generate the key from the policy. This allows for consider-
able ﬂexibility and compatibility as any policy language may be
used; e.g., one that is already used by the application for other pur-
poses. While there are a range of potential languages and tools
we believe that tools based on XACML are a good candidate for
PBES. The approach for associating data and policies with keys,
however, imposes the need for an encryption scheme that is secure
against active adversaries. In the absence of this adversaries may
be able to manipulate the encrypted objects and policies stored at
the repository in unauthorized ways; e.g., associate a new object
with an existing policy or vice-versa. To that end we develop a
PKEM-DEM hybrid encryption that provides adequate security for
PBES.
5. POLICY BASED ENCRYPTION SYSTEM
We ﬁrst introduce some common notation used throughout the
paper. We then deﬁne formal notions of security for a policy-based
encryption scheme for multiple recipients with policy secrecy fol-
lowed by our scheme and its security analysis.
5.1 Security Notions
Notation Bit strings are denoted using small case letters, x,
and the length of such strings is denoted by |x|. Sets are de-
noted using capital case letters, S, and the size of the such
sets is denoted by |S|.
s $←− S denotes the operation of picking
an element s of S uniformly at random. Adversaries are rep-
resented by probabilistic polynomial-time (PPT) algorithms A.
ν $←− A(α1,α2, . . .αk) denotes the action of running the PPT al-
gorithm A with input (α1,α2, . . .αk) and letting v be the out-
put. AO1,O2,...,Ol (α1,α2, . . .αk) denotes a PPT adversary with input