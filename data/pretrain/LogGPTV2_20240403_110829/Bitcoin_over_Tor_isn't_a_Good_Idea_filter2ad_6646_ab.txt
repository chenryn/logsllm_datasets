the server. If the ﬁrst hop of a circuit is chosen at random then
the probability that a malicious node will be chosen as the ﬁrst
hop (and thus will know the IP address of the user) converges
to one with the number of circuits. Due to this, each user has
a set of three6 Guard nodes. When a user builds a circuit the
ﬁrst hop is chosen from the set of Guard nodes.
The list of all Tor relays is assembled and distributed in the
so called consensus document by nine trusted Tor authorities.
For the purpose of trafﬁc balancing the bandwidth of each relay
is measured and reported. A user chooses relays for his circuits
with probability proportional to the relays’ weights listed in
the consensus7. Each relay in the consensus is identiﬁed by
his ﬁngerprint (or ID) which is the SHA-1 hash of its public
key.
1) Tor stream timeout policy: Tor provides SOCKS in-
terface for applications willing to connect
to the Internet
anonymously. Each connection to the SOCKS port by an
application is called a stream. For each new stream Tor tries to
attach it either to an existing circuit or to a newly built one. It
then sends a BEGIN cell down the circuit to the corresponding
Exit node asking it to establish a connection to the server
requested by the application. In order to improve user’s quality
of service, if Tor does not receive a reply from the Exit node
within 10 or 15 seconds8, it drops the circuit and tries another
one. If none of the circuits worked for the stream during 2
minutes, Tor gives up on it and sends a SOCKS general failure
error message.
2) Tor Exit policy:
In order to access a Web resource
anonymously through a Tor circuit, the Exit relay (the ﬁnal
relay in the circuit) should allow establishing connections
outside the Tor network. This makes Exit relay operators open
to numerous abuses. In order to make their life easier, Tor
allows them to specify an Exit Policy: a list of IP addresses
and ports to which the Exit node is willing to establish
connections and which destination are prohibited. When a
client establishes a circuit, he chooses only those Exit nodes
which allow connections to the corresponding IP addresses9
and port ranges.
6Will be reduced down to one Guard per user in the next Tor update [24].
7This is a simpliﬁcation of the real selection procedure in which additional
weights are assigned to a relay based on its position in the circuit and its ﬂags.
8Tor waits for 10 seconds for the ﬁrst two attempt and 15 seconds for the
9Note that usually at the time the path is selected, only the domain name
subsequent attempts.
is known.
124124
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
3) Tor Hidden Services: Tor is mostly known for its ability
to provide anonymity for clients accessing Internet services.
Tor Hidden Services are another feature of Tor which enables
responder anonymity: a service can be contacted by clients
without revealing its physical location. In order to achieve this
a client and the hidden service choose at random and connect to
a Tor relay (rendezvous point) and forward all the data through
it. In more detail:
1)
2)
3)
4)
The hidden service generates a public key and
chooses at random a small number of Tor relays (typ-
ically three) which become its introduction points.
The service maintains permanent connection to these
relays.
It then generates an HS descriptor which contains the
public key and the list of introduction points, and
Publishes it at 6 different Tor relays having HSDir
ﬂag10. These are called responsible HS directories.
The choice of responsible HS directories is determin-
istic and depends on the hash of the hidden service’s
public key and current day.
Introduction points are instructed by the hidden ser-
vice to forward connection requests from clients. The
base32 encoding of the hash of the hidden service’s
public key (onion address) is then communicated
to clients by conventional means (blog post, e-mail,
etc.).
When a client decides to connect to the hidden service, he:
1)
2)
3)
Determines the list of the responsible HS directories
using the onion address and downloads the HS de-
scriptor.
Chooses a rendezvous point at random.
Communicates the ID of the rendezvous point to
the hidden service’s introduction points which then
forward it to the hidden service.
When the hidden service receives the ID of the rendezvous
point, it establishes a connection to it and the data transfer
between the service and the client can start. All communica-
tions between the client and the rendezvous point, between the
service and the rendezvous point and between the service and
the introduction points are established over three-hop circuits.
This hides the location of the hidden service and its clients
both from each other and from external observer.
The hidden service or a client can determine the ﬁnger-
prints of the responsible directories as follows. They ﬁrst take
all Tor relays which have HSDir ﬂag in the consensus and
sort their ﬁngerprints in lexicographical order. Second, they
compute the descriptor ID’s of the hidden service which is the
SHA-1 hash of a value composed of the following items11:
public key of the hidden service, current day, and replica
(which can be 0 or 1). The exact expression for the ID is
of little importance here, the only important things are a) the
ID changes every 24 hours, b) there are two replicas of the ID.
10HSDir ﬂag is assigned by Tor authorities to relays which wish to be a
part of a distributed database to store descriptors of Tor hidden services. A
relay should be running for at least 25 hours to get this ﬂag.
11A hidden service may also decide to use a secret key (somewhat
misleadingly called descriptor-cookie), but for hidden services which are
meant to be accessed by everybody it is not relevant.
Third they ﬁnd the place in the sorted list of the ﬁngerprints
for the computed ID and take the next three relays’ ﬁngerprints
(thus having 6 ﬁngerprints it total since there are two replicas).
III. GETTING IN THE MIDDLE
By exploiting Bitcoin’s anti-DoS protection a low-resource
attacker can force users which decide to connect to the Bitcoin
network through Tor to connect exclusively through her Tor
Exit nodes or to her Bitcoin peers, totally isolating the client
from the rest of the Bitcoin P2P network. This means that
combining Tor with Bitcoin may have serious security impli-
cations for the users: 1) they are exposed to attacks in which
an attacker controls which Bitcoin blocks and transactions the
users are aware of; 2) they do not get the expected level of
anonymity.
The main building blocks of the attack are: Bitcoin’s
reputation-based anti-Dos protection, Tor’s stream manage-
ment policy, the fact that connections between Bitcoin peers
are not authenticated. Authors in [2] exploited the Bitcoin’s
reputation-based DoS protection to force all Bitcoin servers to
ban all Tor Exit nodes. In this section we exploit the DoS
protection, however we noticed that instead of just baning
Bitcoin clients from using Tor the attacker might achieve much
smarter results. The attack consists of four steps:
•
•
•
Inject a number of Bitcoin peers to the network.
Note that though Bitcoin allows only one peer per
IP address, it does not require high bandwidth. IP
addresses can be obtained relatively cheaply and on
per-hour basis.
Periodically advertise the newly injected peers in the
network so that they are included into the maximum
possible number of buckets at the client side.
Inject some number of medium-bandwidth Tor Exit
relays. Even a small fraction of the Exit bandwidth
would be enough for the attacker as will be shown
later.
• Make non-attacker’s Bitcoin peers ban non-attacker’s
Tor Exit nodes.
We now explain each step of the attack in more detail. See
section VI for attack parameter estimation.
A. Injecting Bitcoin peers
This step is rather straightforward. In order to comply with
Bitcoin’s limitation “one peer per IP address”, the attacker
should obtain a large number of IP addresses. The easiest way
would be to rent IP addresses on per hour basis. The market
value is 1 cents per hour per IP address [21]. The important
note is that the obtained IP addresses will not be involved in
any abusive activity (like sending spam or DoS attacks) which
makes this part of the attack undetectable.
B. Advertising malicious peers
The attacker is interested in that her Bitcoin peers are
chosen by Bitcoin clients as frequently as possible. In order to
increase by factor four the chances for her peers to be included
into “tried” buckets, the attacker should advertise the addresses
125125
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
of her peers as frequently as possible. This mechanism would
allow the attacker to inject less malicious peers. Note also
that address advertisement is not logged by default and thus
requires special monitoring to be noticed.
C. Injecting Tor Exit nodes
During this step the attacker runs a number of Exit Tor
nodes. In order to get Exit ﬂag from the Tor authorities, an
attacker’s Exit node should allow outgoing connections to any
two ports out of ports 80, 443, or 6667. Such an open Exit
policy might not be what a stealthy attacker wants. Fortunately
for the attacker she can provide incorrect information about her
exit policy in her descriptor and thus have Exit ﬂag while in
reality providing access to port 8333 only. The attacker can
do even better, and dynamically change the exit policy of her
relays so that only connections to speciﬁc Bitcoin peers are
allowed. We implemented this part of the attack: while the Tor
consensus indicated that our relays allowed exiting on ports 80,
443, and 8333 for any IP address, the real exit policy of our
relays was accepting port 8333 for a couple of IP addresses12.
D. Banning Tor Exit nodes
In this phase, the attacker exploits the built-in Bitcoin anti-
DoS protection. The attacker chooses a non-attacker’s Bitcoin
peer and a non-attacker’s Tor Exit, builds a circuit through
this Exit node and sends a malformed message to the chosen
Bitcoin peer (e.g. a malformed coinbase transaction which is
60 bytes in size and which causes the immediate ban for 24
hours). As soon as the Bitcoin peer receives such message it
analyses the sender’s IP address which obviously belongs to
the Tor Exit node chosen by the attacker. The Bitcoin peer
then marks this IP address as misbehaving for 24 hours. If a
legitimate client then tries to connect to the same Bitcoin peer
over the banned Exit node, his connection will be rejected.
The attacker repeats this step for all non-attacker’s Bitcoin
peers and each non-attacker’s Tor Exit node. This results
in that a legitimate Bitcoin user is only able to connect to
Bitcoin over Tor if he chooses either one of the attacker’s
peers or establishes a circuit through an attacker’s Exit node.
We validated this part of the attack by forcing about 7500
running Bitcoin peers to ban our Exit node. To do this we
implemented a rudimentary Bitcoin client which is capable of
sending different custom-built Bitcoin messages.
E. Defeating onion peers
Bitcoin peers can be made reachable as Tor hidden services.
Banning Tor Exit nodes will obviously not prevent Bitcoin
clients from connecting to such peers. Nonetheless our obser-
vations show that this case can also be defeated by the attacker.
First the current design of Tor Hidden Services allows a
low-resource attacker to DoS a hidden service of her choice [3]
(this technique is called black-holing of hidden services).
Before a client can contact a hidden service he needs to
download the corresponding descriptor from one of the six
responsible hidden service directories. These directories are
chosen from the whole set of Tor relays in a deterministic way
based on the onion address and current day (see section II-B3).
The attacker needs to inject six malicious relays that would
become responsible directories. In other words she needs to
ﬁnd the right public keys with ﬁngerprints which would be
in-between the descriptor IDs of the hidden service and the
ﬁngerprint of the currently ﬁrst responsible hidden service
directory. Authors in [3] show that computationally it is easy
to do. It can become a problem though for a large number of
hidden services: for each hidden service the attacker needs to
run at least 6 Tor relays for at least 25 hours, 2 relays per IP
address.
Fortunately for the attacker the fraction of Bitcoin peers
available as Tor hidden services is quite small. During Au-
gust 2014 we queried address databases of reachable Bitcoin
peers [6] and among 1,153,586 unique addresses (port numbers
were ignored), only 228 were OnionCat addresses and only 39
of them were actually online; in November 2014 we repeated
the experiment and among 737,314 unique addresses 252 were
OnionCat addresses and 46 were online (see Appendix A for
the two lists of these Bitcoin onion addresses). This results
in (1) a very small probability for a client to choose a peer
available as a hidden service; (2) this makes black-holing of
existing Bitcoin hidden services practical.
Second, the attacker can at almost no cost inject a large
number of Bitcoin peers available as Tor hidden services. It
requires running only one bitcoind instance and binding it
with as many onion addresses as needed. Thus users will more
likely connect to attacker controlled “onion” peers.
Third, as was described in section II-A3, when running
Bitcoin without Tor, onion addresses received from peers are
silently dropped. Thus one can only obtain OnionCat addresses
by either connecting to an IPv4- or IPv6-reachable peers
through a proxy13 or by specifying an onion address in the
command line.
F. Attack vectors
The technique described in this section allows an attacker
to direct all Bitcoin-over-Tor trafﬁc through servers under her
control. This creates several attack vectors which we will
brieﬂy describe in this subsection.
Trafﬁc conﬁrmation attack. First, it becomes much cheaper
to mount a successful trafﬁc conﬁrmation attack. In trafﬁc
conﬁrmation attacks, the attacker controls a fraction of Guard
and Exit nodes. The attacker sees that one of her exit nodes
is requested to access a particular (e.g. censored) web-site and
the attacker is interested in ﬁnding out the user who made
this request. The attacker sends a trafﬁc signature down the
corresponding circuit. If the attacker was lucky and the user
chose one of her Guard nodes, the attacker will see the trafﬁc
signature going through this Guard to the target user. This
reveals the user’s IP address.
The success probability of the attack is computed as the
product of two factors: the probability for the user to choose
an attacker’s Guard and the probability for the user to choose
an attacker’s Exit. Since now all exit Bitcoin-over-Tor trafﬁc
goes through the attacker, the second factor becomes 1.
Revealing Guard nodes. In case the attacker does not control
the user’s Guard node, he may try to ﬁnd this Guard. We
12We also allowed exiting to IP addresses used by Tor bandwidth scanners.
13Not necessarily Tor.
126126
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
assume that the attacker controls a fraction of middle nodes.
As before the attacker would send a trafﬁc signature down
the circuit and if none of the attacker’s middle nodes detects
this signature, the attacker drops the circuit. This will force
the user to build another circuit. After some number of circuit
tries, one of the attacker’s middle nodes will ﬁnally be chosen.
This middle node will know the user’s Guard node. The re-
identiﬁcation of the user between different circuits is possible
e.g. using the ﬁngerprinting technique from section IV.
Revealing the guards does not immediately allow an attacker
to reveal the location of the user but gives her the next point of
attack. Given that guard nodes are valid for more than a month,
this may be sufﬁcient to mount a legal attack to recover trafﬁc
meta data for the guard node, depending on the jurisdiction
the guard node is located in.
Linking different bitcoin addresses. Even without knowing
the user’s IP, the attacker can link together user’s transactions
regardless of pseudonyms used.
Possibility of double spending. Finally, after successfully
mounting the attack described in this section the attacker
controls the connectivity to the Bitcoin network for users
which chose to use Tor. This increases the success rate of
double-spend attacks described in Appendix B.
In addition the attacker can defer transactions and blocks and
send dead forks. In collusion with a powerful mining pool (for
example 10-20% of total Bitcoin mining capacity) the attacker
can create fake blocks. This enables additional possibilities for