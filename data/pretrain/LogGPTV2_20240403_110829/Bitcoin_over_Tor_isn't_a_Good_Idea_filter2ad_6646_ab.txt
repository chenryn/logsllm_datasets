### Server and Circuit Selection in Tor

If the first hop of a circuit is chosen at random, the probability that a malicious node will be selected as the first hop (and thus know the IP address of the user) increases with the number of circuits. To mitigate this, each user has a set of three Guard nodes. When a user builds a circuit, the first hop is chosen from this set of Guard nodes.

The list of all Tor relays is compiled and distributed in the so-called consensus document by nine trusted Tor authorities. For traffic balancing, the bandwidth of each relay is measured and reported. A user selects relays for their circuits with a probability proportional to the relays' weights listed in the consensus. Each relay in the consensus is identified by its fingerprint (or ID), which is the SHA-1 hash of its public key.

### Tor Stream Timeout Policy

Tor provides a SOCKS interface for applications that wish to connect to the Internet anonymously. Each connection to the SOCKS port by an application is called a stream. For each new stream, Tor attempts to attach it to an existing circuit or a newly built one. It then sends a BEGIN cell down the circuit to the corresponding Exit node, requesting it to establish a connection to the server requested by the application. To improve the user's quality of service, if Tor does not receive a reply from the Exit node within 10 or 15 seconds, it drops the circuit and tries another one. If none of the circuits work for the stream within 2 minutes, Tor gives up and sends a SOCKS general failure error message.

### Tor Exit Policy

To access a web resource anonymously through a Tor circuit, the Exit relay (the final relay in the circuit) must allow establishing connections outside the Tor network. This makes Exit relay operators vulnerable to abuse. To mitigate this, Tor allows them to specify an Exit Policy: a list of IP addresses and ports to which the Exit node is willing to establish connections and which destinations are prohibited. When a client establishes a circuit, they choose only those Exit nodes that allow connections to the corresponding IP addresses and port ranges.

### Tor Hidden Services

Tor is known for providing anonymity for clients accessing Internet services. Tor Hidden Services enable responder anonymity, allowing a service to be contacted by clients without revealing its physical location. In more detail:

1. The hidden service generates a public key and randomly selects a small number of Tor relays (typically three) to become its introduction points.
2. The service maintains a permanent connection to these relays.
3. It generates an HS descriptor containing the public key and the list of introduction points and publishes it at six different Tor relays with the HSDir flag. These are called responsible HS directories.
4. The choice of responsible HS directories is deterministic and depends on the hash of the hidden service’s public key and the current day.
5. Introduction points are instructed to forward connection requests from clients. The base32 encoding of the hash of the hidden service’s public key (onion address) is communicated to clients by conventional means (e.g., blog post, email).

When a client decides to connect to the hidden service:

1. The client determines the list of responsible HS directories using the onion address and downloads the HS descriptor.
2. The client chooses a rendezvous point at random.
3. The client communicates the ID of the rendezvous point to the hidden service’s introduction points, which then forward it to the hidden service.

When the hidden service receives the ID of the rendezvous point, it establishes a connection to it, and data transfer between the service and the client can start. All communications between the client and the rendezvous point, between the service and the rendezvous point, and between the service and the introduction points are established over three-hop circuits. This hides the location of the hidden service and its clients from each other and from external observers.

### Determining Responsible Directories

The hidden service or a client can determine the fingerprints of the responsible directories as follows:

1. They take all Tor relays with the HSDir flag in the consensus and sort their fingerprints lexicographically.
2. They compute the descriptor ID of the hidden service, which is the SHA-1 hash of a value composed of the following items: the public key of the hidden service, the current day, and the replica (which can be 0 or 1).
3. They find the place in the sorted list of fingerprints for the computed ID and take the next three relays’ fingerprints, resulting in six fingerprints in total (since there are two replicas).

### Getting in the Middle

By exploiting Bitcoin’s anti-DoS protection, a low-resource attacker can force users who connect to the Bitcoin network through Tor to connect exclusively through the attacker’s Tor Exit nodes or to the attacker’s Bitcoin peers, isolating the client from the rest of the Bitcoin P2P network. This has serious security implications for users, including exposure to attacks where the attacker controls which Bitcoin blocks and transactions the users see and a loss of expected anonymity.

### Main Building Blocks of the Attack

1. **Injecting Bitcoin Peers**: The attacker injects a number of Bitcoin peers into the network. Although Bitcoin allows only one peer per IP address, IP addresses can be obtained relatively cheaply and on a per-hour basis.
2. **Advertising Malicious Peers**: The attacker periodically advertises the newly injected peers to increase the chances of their inclusion in the maximum possible number of buckets at the client side.
3. **Injecting Tor Exit Nodes**: The attacker runs a number of Exit Tor nodes, potentially providing incorrect information about their exit policy to get the Exit flag while in reality providing access to specific Bitcoin peers.
4. **Banning Tor Exit Nodes**: The attacker exploits Bitcoin’s anti-DoS protection to ban non-attacker’s Tor Exit nodes. By sending malformed messages through the attacker’s Exit nodes, the attacker forces Bitcoin peers to mark these IP addresses as misbehaving for 24 hours.

### Defeating Onion Peers

Bitcoin peers can be made reachable as Tor hidden services. Banning Tor Exit nodes will not prevent Bitcoin clients from connecting to such peers. However, the attacker can still defeat this by:

1. **Black-holing Hidden Services**: The attacker injects six malicious relays to become responsible directories, making it computationally easy to DoS a hidden service.
2. **Injecting Bitcoin Peers as Hidden Services**: The attacker can inject a large number of Bitcoin peers available as Tor hidden services, increasing the likelihood that users will connect to attacker-controlled “onion” peers.
3. **Dropping Onion Addresses**: When running Bitcoin without Tor, onion addresses received from peers are silently dropped, limiting the ways to obtain OnionCat addresses.

### Attack Vectors

1. **Traffic Confirmation Attack**: The attacker controls a fraction of Guard and Exit nodes, making it easier to mount a successful traffic confirmation attack.
2. **Revealing Guard Nodes**: If the attacker does not control the user’s Guard node, they can use middle nodes to identify the Guard node.
3. **Linking Different Bitcoin Addresses**: The attacker can link together the user’s transactions regardless of pseudonyms used.
4. **Double Spending**: After successfully mounting the attack, the attacker controls the connectivity to the Bitcoin network for users using Tor, increasing the success rate of double-spend attacks.

In addition, the attacker can defer transactions and blocks and send dead forks, enabling additional possibilities for manipulation.