### Administrative Role Availability and Policy Analysis

We define an administrative role \( r \) as "available" in a state if at least one user in the initial set of users \( U_0 \) is a member of \( r \) in that state. The separate administration restriction simplifies policy analysis by ensuring that the set of available administrative roles remains constant. Here, we identify a condition under which changes to the set of available administrative roles, although possible, are not useful for achieving a goal and can thus be ignored.

This condition ensures that, in the initial state, the users in \( U_0 \) already possess all the administrative permissions of the roles to which they could assign themselves. This is achieved by requiring that the users in \( U_0 \) are either implicit or explicit members of all those administrative roles in the initial state.

### Hierarchical Role Assignment

A miniARBAC policy has hierarchical role assignment with respect to a set \( A \) of administrative roles if, for every triple \( \langle ar, c, r \rangle \) in the `can_assign` relation, where \( ar \) is in \( A \) and \( r \) is an administrative role, it holds that \( ar \preceq r \). This implies that a user who can assign users to \( r \) is an implicit member of \( r \). We call this property "hierarchical role assignment" because it relates the role hierarchy to the `can_assign` relation.

### Theorem 5: Reachability Under Hierarchical Role Assignment

**Theorem 5.** Let \( I = \langle \gamma_0, \psi, U_0, u_t, \text{goal} \rangle \) be a reachability problem instance, and let \( A \) be the set of available administrative roles in \( \gamma_0 \). If the miniARBAC policy \( \psi \) has hierarchical role assignment with respect to \( A \), then the goal is reachable if and only if the goal is reachable via a plan in which all `assign` and `revoke` actions act on the target user \( u_t \).

**Proof:**

1. **Assigning Administrative Roles to Non-Target Users:**
   - It is not useful for a user \( u_1 \) in \( U_0 \) to assign another user \( u_2 \) (other than \( u_t \)) to an administrative role \( ar \), because \( u_1 \) is already an implicit member of \( ar \). Adding another user to \( r \) does not provide any additional administrative permissions to the group \( U_0 \).
   - However, assignments of administrative roles to \( u_t \) can be useful because they may satisfy the precondition of a `can_assign` rule, potentially enabling the addition of \( u_t \) to a regular role in the goal.

2. **Assigning Regular Roles to Non-Target Users:**
   - Assigning a user \( u_2 \) (other than \( u_t \)) to a regular role or revoking \( u_2 \) from any role is not useful. The only potential benefit of such actions would be to satisfy the precondition of a rule allowing \( u_2 \) to be assigned to an administrative role, which, as shown, would be useless.

### Implications for Analysis Algorithms

Our analysis algorithms in Sections 3 and 4 exploit the separate administration to avoid considering administrative actions that act on users other than the target user. Therefore, Theorem 5 implies that these algorithms work correctly for problem instances that satisfy hierarchical role assignment.

### Partially Hierarchical Role Assignment

The same idea can be used to optimize reachability analysis for problem instances \( I \) with "partially hierarchical" role assignment, i.e., when \( I \) satisfies hierarchical role assignment for a subset \( A' \) of the set \( A \) of available administrative roles in the initial state. Administrative actions of roles in \( A \setminus A' \) might be useful in reaching the goal. By starting with those actions and adding additional actions based on the dependencies induced by the `can_assign` relation, we can identify a set of administrative actions on non-target users that might be useful in reaching the goal; other administrative actions on non-target users can be eliminated.

### Other Analysis Problems

This section presents algorithms for some other analysis problems. These algorithms use user-role reachability as a subroutine, so our results from Sections 3â€“5 are applicable here. These algorithms can invoke specialized reachability algorithms when the latter's restrictions are satisfied (e.g., \( |ppre| \leq 1 \)). Fixed-parameter tractability results for these algorithms can be derived based on our complexity results for user-role reachability.

#### Role Containment

Role containment problem instances have the form:
- In every state reachable from a given initial state, is every member of role \( r_1 \) also a member of role \( r_2 \)?

This problem can be reduced to user-role reachability by adding a new role \( r \) and a `can_assign` rule with the precondition \( r_1 \wedge \neg r_2 \) and target \( r \). The containment property holds if, for every user \( u \), there is no reachable state in which \( u \) is a member of \( r \). As an optimization, only users with distinct sets of initial roles need to be considered.

#### Weakest Preconditions

Weakest precondition queries return the minimal sets of initial role memberships of the target user for which a given reachability goal is achievable. For policies satisfying the conditions of the backward algorithm in Section 4, that algorithm can be modified to efficiently answer such queries. For each leaf node \( UA \) in the graph, we compute \( \text{airs(goal)} \) taking \( UA \) as the only initial node, and if \( \text{airs(goal)} \) is non-empty, then \( UA \) is a weakest precondition, unless we find another one that is a subset of \( UA \).

### Case Studies

This section briefly describes the ARBAC policies used as case studies. Details of both policies are available from [31].

#### University ARBAC Policy

Our main case study is an ARBAC policy for selected aspects of a university. The policy includes rules for assigning users to various student and employee roles. Student roles include undergraduate student, graduate student, teaching assistant, research assistant, grader, honors student, graduate student officer, graduate education committee (which has a student member), etc. Employee roles include admissions officer, assistant professor, dean, dean of admissions, department chair, facilities committee, graduate admissions committee, graduate education committee, honors program director, president, professor, provost, etc. The role hierarchy includes relationships such as President \( \preceq \) Provost \( \preceq \) Dean \( \preceq \) DeptChair \( \preceq \) Professor. Sample `can_assign` rules include:
- The honors program director can add undergraduates to the honors student role.
- The president can assign a professor who is not a department chair to the provost role.

#### Limitations and Characteristics

The policy has some limitations:
- Our ARBAC framework does not support parameters (of roles, permissions, etc.), so the policy is for a single department, a single class, etc.
- With a framework that supports parameters, we could easily add parameters (such as department name and class number) to the policy.
- The current policy is only for user-role assignment, but we plan to develop algorithms that handle parameters directly for efficiency.

Despite these limitations, this ARBAC policy is a substantial case study compared to others in the literature. Key characteristics of the policy include:
- Every `can_assign` rule has at most one positive precondition.
- The policy does not satisfy separate administration but has hierarchical role assignment with respect to most sets of administrative roles.
- About 1/3 of the roles are administrative (i.e., have at least one administrative permission). After transforming to eliminate role hierarchy, about 1/4 of the roles are negative, about 1/4 are mixed, and about 2/3 are positive.
- Problem instances with hierarchical role assignment have at most two irrevocable roles.

Formulating and checking properties of the policy helped uncover some flaws, such as using `Student` instead of `Undergrad` and forgetting to take role hierarchy into account.

#### Health Care Institution ARBAC Policy

Our second case study is an ARBAC policy for a health care institution, based on the policy in [7], extended with some aspects of the policy in [3]. This case study is smaller but shares many characteristics with the university policy. Key differences include less hierarchical role assignment and fewer irrevocable roles.

### Experimental Results

This section presents the results of experiments evaluating the performance of the forward and backward reachability algorithms. The forward algorithm always uses the reduced transition relation, while the backward algorithm includes the partial-order reduction only when explicitly stated. The algorithms were applied to the case studies and randomly generated ARBAC policies.

#### Case Studies

Both policies satisfy the restriction \( |ppre| \leq 1 \), making both forward and backward reachability algorithms applicable for queries satisfying hierarchical role assignment. For various reachability queries with \( |\text{goal}| \leq 2 \), the forward algorithm with slicing terminates in at most 0.01 seconds, and the backward algorithm with reduction terminates in at most 0.19 seconds.

#### Evaluation of the Forward Algorithm

Table 1(a) shows the number of explored states, transitions, and running time of the forward algorithm (without slicing) on randomly generated policies with varying numbers of mixed roles. All three cost metrics grow quickly as a function of the number of mixed roles. Table 1(b) shows the performance of the forward algorithm (without slicing) on randomly generated policies with varying numbers of roles, holding the number of mixed roles constant. In this case, the cost grows much more slowly.

Slicing significantly improves the typical performance of the forward algorithm, although it does not change the worst-case performance. For most policies, the algorithm explores just one or two states after slicing, terminating within 0.04 seconds.

#### Evaluation of the Backward Algorithm

We evaluated the backward algorithm on randomly generated policies satisfying \( |ppre| \leq 1 \). Table 2(a) shows that the analysis cost grows quickly as a function of the size of the goal when other parameters are held constant.