进入（ingress）端口
目的地址
术语ingress用于描述帧通过特定端口进入设备，egress用于描述设备通过特定端口离开设备。交换机做出转发决定的时候，是基于进入端口以及消息的目的地址的。
LAN交换机维护一张表，通过这张表决定如何转发数据流。LAN交换机唯一智能部分是利用这张表基于消息的进入端口和目的地址来转发。一个LAN交换机中只有一张定义了地址和端口的主交换表；因此，无论进入端口如何，同一目的地址的消息永远从同一出口离开。
MAC地址表的动态更新
一个交换机要知道使用哪一个端口传送帧，首先必须学习各端口有哪些设备。随着交换机学习到端口与设备的关系，它建立起一张MAC地址表，或内容可寻址寄存表（CAM）。CAM是一种应用于高速查找应用的特定类型的memory。交换机将连接到它的端口的设备的MAC地址记录到MAC表中，然后利用表中信息将帧发送至输出端口设备，该端口已指定给该设备。
记住交换机操作模式的一句简单的话是：交换机学习“源地址”，基于“目的地址”转发。帧进入交换机时，交换机“学习”接收帧的源MAC地址，并将此地址添加到MAC地址表中，或刷新已存在的MAC地址表项的老化寄存器；后续报文如果去往该MAC地址，则可以根据此表项转发。帧转发时，交换机检查目的MAC地址并与MAC地址表中地址进行比较。如果地址在表中，则转发至表中与MAC地址相对应的端口。如果没有在表中找到目的MAC地址，交换机会转发到除了进入端口以外的所有端口泛洪（flooding）。有多个互连交换机的网络中，MAC地址表对于一个连接至其他交换机的端口记录多个MAC地址。
以下步骤描述了更新MAC地址表的方法：
1. 交换机在port 1接收到来自PC 1的帧。
2. 交换机检查源MAC地址并与MAC地址表相比较。
如果地址不在表中，则交换机在MAC地址表中将PC 1的源MAC地址关联到进入端口（port 1）。
如果已经存在该源地址的MAC地址表项，则交换机重置老化计时器。通常一个表项会保持5分钟。
3. 交换机记录源地址信息之后，检查目的地址
如果目的MAC地址不在表项中或如果它是一个广播MAC地址，则交换机把该帧泛洪（flood）至除了进入端口以外的所有端口。
4. 目标设备（PC 3）返回目的地址为PC 1的单播帧。
5. 交换机地址表中输入PC 3的源MAC地址以及进入端口的端口号。在表项中找到该帧的目的地址及关联的输出端口。
6. 交换机现在可以在源和目标设备之间传送帧而无需泛洪，因为地址表中已有指定关联端口的表项。
交换机转发方式：
存储转发交换(Store-and-Forward)
运行在存储转发模式下的交换机在发送信息前要把整帧数据读入内存并检查其正确性。尽管采用这种方式比采用直通方式更花时间，但采用这种方式可以存储转发数据，从而保证其准确性。由于运行在存储转发模式下的交换机不传播错误数据，因而更适合大型局域网。存储转发模式有两大主要特征区别于直通转发模式：
差错控制：
使用存储转发技术的交换机对进入帧进行差错控制。在进入端口接收完整一帧之后，交换机将数据报最后一个字段的帧校验序列（frame check sequence, FCS）与自己的FCS进行比较。FCS校验过程用以帮助确保帧没有物理及数据链路错误，如果该帧校验正确，则交换机转发。否则，丢弃。
自动缓存：
存储转发交换机通过进入端口缓存，支持不同速率以太网的混合连接。例如，接收到一个以1Gb/s速率发出的帧，转发至百兆以太网端口，就需要使用存储转发方式。当进入与输出端口速率不匹配时，交换机将整帧内容放入缓存中，计算FCS校验，转发至输出缓存之后将帧发出。
Cisco的主要交换方式是存储转发交换。
直通交换（Cut-Through）
直通交换的一个优势是比存储转发技术更为快速。采用直通模式的交换机会在接收完整个数据包之前就读取帧头，并决定把数据发往哪个端口。不用缓存数据也不用检查数据的完整性。这种交换方式有两大特点：快速帧转发以及无效帧处理。
快速帧转发：
如下图所示，一旦交换机在MAC地址表中查找到目的MAC地址，就立刻做出转发决定。而无需等待帧的剩余部分进入端口再做出转发决定。
使用直通方式的交换机能够快速决定是否有必要检查帧头的更多部分，以针对额外的过滤目的。例如，交换机可以检查前14个字节（源MAC地址，目的MAC，以太网类型字段），以及对之后的40字节进行检查，以实现IPv4三层和四层相关功能。
无效帧处理：
对于大多数无效帧，直通方式交换机并不将其丢弃。错误帧被转发至其他网段。如果网络中出现高差错率（无效帧），直通交换可能会对带宽造成不利影响，损坏以及无效帧会造成带宽拥塞。在拥塞情况下，这种交换机必须像存储转发交换机那样缓存。
无碎片转发（Fragment Free）
无碎片转发是直通方式的一种改进模式。交换机转发之前检查帧是否大于64字节（小于则丢弃），以保证没有碎片帧。无碎片方式比直通方式拥有更好的差错检测，而实际上没有增加延时。它比较适合于高性能计算应用，即进程到进程延时小于10毫秒的应用场景。
交换机域：
交换机比较容易混淆的两个术语是冲突域和广播域。这一段讲述这两个影响LAN性能的重要概念。
冲突域
设备间共享同一网段称为冲突域。因为该网段内两个以上设备同时尝试通讯时，可能发生冲突。使用工作在数据链路层的交换机可将各个网段的冲突域隔离，并减少竞争带宽的设备数量。交换机的每一个端口就是一个新的网段，因为插入端口的设备之间无需竞争。结果是每一个端口都代表一个新的冲突域。网段上的设备可以使用更多带宽，冲突域内的冲突不会影响到其他网段，这也成为微网段。
如下图所示，每一个交换机端口连接到一台主机，每一个交换机端口代表一个隔离的冲突域。
广播域
尽管交换机按照MAC地址过滤大多数帧，它们并不能过滤广播帧。LAN上的交换机接收到广播包后，必须对所有端口泛洪。互连的交换机集合形成了一个广播域。网络层设备如路由器，可隔离二层广播域。路由器可同时隔离冲突和广播域。
当设备发出二层广播包，帧中的目的MAC地址被设置为全二进制数，广播域中的所有设备都会接收到该帧。二层广播域也称为MAC广播域。MAC广播域包含LAN上所有接收到广播帧的设备。广播通信比较多时，可能会带来广播风暴。特别是在包含不同速率的网段，高速网段产生的广播流量可能导致低速网段严重拥挤，乃至崩溃。
网络基本功（十一）：TCP窗口调整与流控
网络基本功（十一）：TCP窗口调整与流控
转载请在文首保留原文出处：EMC中文支持论坛https://community.emc.com/go/chinese 
介绍
前文已经介绍过了TCP滑动窗口大小的重要性。在客户端与服务器的连接中，客户端告知服务器它一次希望从服务器接收多少字节数据，这是客户端的接收窗口，即服务器的发送窗口。类似地，服务器告知客户端一次希望从客户端接收多少字节数据，也就是服务器的接收窗口和客户端的发送窗口。
要理解为什么窗口大小会产生波动，首先需要理解它的含义。最简单的方式是它代表了设备对于特定连接的接收缓存大小。即，窗口大小代表一个设备一次能够从对端处理多少数据，之后再传递给应用层处理。
更多信息
当服务器从客户端接收数据，它就将数据放在缓存中，服务器必须对数据做以下两步操作：
确认：服务器必须将确认信息发回客户端以表明数据接收。
传输：服务器必须处理数据，将它传递给目标应用程序处理。
区分开这两件事情是非常重要的。关键在于基本的滑动窗口机制中，数据于接收时确认，但并不一定立即从缓存中传输出去。也就意味着当接收数据速度快于接收TCP处理速度时，缓存有可能被填满。当这一情况发生时，接收设备需要调整窗口大小已防止缓存过载。
由于窗口大小能够以这种方式管理连接两端设备数据流的速率，TCP就是以这种方式实现流控这一传输层非常典型的任务。流控对于TCP来说是很重要的，因为它是设备间互通状态的方式。通过增加或缩小窗口大小，服务器和客户端能够确保对端发送数据的速度等同于处理速度。
减小窗口大小以降低发送速率：
首先看一下客户端到服务器的数据传输，如下图所示。
客户端传输140字节数据至服务器。之后，客户端的可用窗口还剩下220字节：发送窗口的360字节减去发送的140字节。
一段时间过后，服务器接收到140字节并将它们放在缓存中。现在，理想的情况下，140字节进入缓存，确认之后立刻从缓存移出。也就是说，缓存有足够的大小来容纳客户端发送的所有数据。缓存的空闲空间维持在360字节，因此告知客户端窗口大小保持不变。
只要服务器处理速度和数据进入速度相同，窗口大小就会保持在360字节。客户端在接收到140字节的确认信息以及窗口大小保持不变的信息之后，将360字节窗口向右移动140字节。由于现在未确认字节数为0，因此客户端又可以发送360字节数据。对应于之前可用窗口的220字节，加上刚刚确认的140字节数据。
然而，现实中服务器可能需要处理数十，数百乃至数千个TCP连接。TCP可能无法立刻处理数据，或应用应用程序本身无法接收140字节数据。任何一种情况下，服务器TCP都无法立刻将140字节从缓存中移出。这时，除了发回确认信息给客户端以外，服务器会想要告知客户端更改窗口大小，以表示缓存已经被部分写入了。
假设我们接收到140字节，但只能发送40字节给应用程序，缓存中剩下100字节。当发送140字节的确认信息，服务器将发送窗口缩小100字节，至260字节。当客户端从服务器接收到这一片段，它将会看到140字节的确认信息并将窗口向右滑动140字节。在滑动过程中，将大小缩减至260字节。可以认为将窗口左端滑动140字节，但右端仅滑动40字节。新的稍小一些的窗口保证服务器从客户端接收最多260字节数据，以适应接收缓存中的剩余空间，如下图的1-3步所示。
缩减发送窗口以停止发送新数据：
如果服务器无法接收任何新数据会怎么样呢？假设客户端下一次传输180字节，但是服务器太忙碌而无法对其进行处理。这种情况下，服务器将这180字节缓存下来，并且在确认信息中，将窗口大小从260字节缩减为80字节。当客户端接收到180字节的确认信息，它也会看到窗口缩减了180字节，它会滑动与缩减同样的大小，告知服务器：我确认接收180字节数据，但不允许你再发送新的数据。也可以看作窗口左端滑动180字节，但右端维持不动。只要右端不移动，客户端就无法发送更多数据。这一过程显示在上图的4-6中。
关闭发送窗口：
窗口调整可以通过双方设备来完成。如果服务器从客户端接收的数据持续快于推送给应用的速率，则服务器将会继续减小接收窗口。假设发送窗口减小至80字节，客户端发送第三个请求，长度为80字节，但服务器仍处于繁忙状态。之后服务器将窗口减小为0，也称为关闭窗口。这一信息告知客户端服务器已经过载，它需要彻底停止发送数据，如上图最后一步所示。之后，当服务器负载减轻时，可以再次增加这一连接的窗口，允许更多数据传输。
网络基本功（十二）：细说Linux网络配置（上）
网络基本功（十二）：细说Linux网络配置（上）
转载请在文首保留原文出处：EMC中文支持论坛https://community.emc.com/go/chinese 
介绍
将一台设备添加到本地网络的基本步骤包括：
指定唯一的IP地址与主机名。
确保启动时正确配置网络接口。
创建默认路由。
指定DNS域名服务器以使设备能够连接到网络其他部分。
更多信息
指定主机名与IP地址:
使用/etc/hosts文件是将设备名映射到IP地址的最简单的方式，每一行以IP地址开始，跟随识别到的各种符号名：
由于/etc/hosts仅包括本地映射而且必须维护在每一台客户端设备，所以最好保存那些需要在启动时映射的信息（即：主机本身，默认网关，以及域名服务器）。
可使用hostname命令为设备指定主机名。该命令通常在启动脚本中运行，脚本中包含从配置文件读取的主机名。
ifconfig：配置网络接口:
ifconfig打开或关闭网络接口，设置IP地址与子网掩码，以及其他选项和参数。通常在启动时通过命令行从配置文件中读取参数来运行，但也可以手动运行以做修改。
ifconfig命令格式如下：
ifconfig interface [family] address options…
例如：
ifconfig eth0 192.168.1.13 netmask 255.255.255.0 up
为eth0设置IPv4地址与子网掩码，并将该接口准备好供使用。大多数系统中， ifconfig –a列出系统的网络接口以及当前设置。
family参数告诉ifconfig配置的是哪一种网络协议。用户可以对一个接口设置多个协议并同时使用，但必须分开配置。IPv4选项为inet，IPv6选项为inet6。缺省为inet。
address参数指定接口的IP地址。也可以使用主机名，但该主机名必须能在启动时解析为IP地址。对于设备的主接口来说，这意味着主机名必须出现在本地hosts文件中，因为其他解析方式依赖于已被初始化的网络。
关键字up将接口打开，down将其关闭。
netmask选项为接口设置子网掩码。
broadcast选项为接口指定IP广播地址。
route：配置静态路由:
route命令指定静态路由，指明该路由表项永远不会更改，即使运行路由进程。当在本地网络中添加新的设备时，通常仅需要指定默认路由。
这里有两种情况：一，当报文目的地址是直连网络上的某台主机时，路由表中的 “next-hop gateway”是本地主机自己的一个接口，报文直接发送到目的地，这时可在配置接口时用ifconfig命令将路由添加到路由表中。 二，可能没有与目的地址相匹配的路由，这时，启用默认路由，否则，返回ICMP“network unreachable” 或 “host unreachable” 信息给发送方。很多本地网络只有一个出口，所以只需配置指向出口的默认路由。
每一条route命令添加或删除一条路由。如下route命令原型几乎适用于每一Linux版本：
# route add -net 192.168.45.128/25 zulu-gw.atrust.net
该命令通过网关路由器zulu-gw.atrust.net添加一条到192.168.45.128/25网络的路由。通常，网关路由器是相邻主机或本地主机的一个接口（Linux要求在网关地址前加上gw选项名）。route命令必须能够将zulu-gw.atrust.net解析成IP地址。
Ubuntu网络配置:
如下图所示，Ubuntu在/etc/hostname以及/etc/network/interfaces，以及/etc/network/options中配置网络信息。
主机名在 /etc/hostname中设置。很多场景都要用到这一文件中配置的名字，某些情况下对命名是有限制要求的。
IP地址，网络掩码，默认网关在 /etc/network/interfaces中设置。以iface关键字开头的一行介绍了各个接口。iface之后的缩进行指明附加参数。例如：
ifup和ifdown命令会读取该文件并通过调用下层命令（诸如ifconfig）并配以合适的参数将接口连通或断开。auto语句指定启动时默认或ifup –a运行时的连通接口。
iface行中的inet关键字是ifconfig中使用的地址。关键字static表示一种“方式”，指eth0的IP地址和网络掩码是直接指定的。地址和网络掩码行要求静态配置，gateway行指明默认网关，用于安装默认路由。
SUSE网络配置：
SUSE用户可以选择NetworkManager或是传统的配置方法，用户可以在YaST中做出选择。也可以使用YaST GUI来配置传统系统。这里，我们介绍传统方式。除了配置网络接口以外，YaST也提供 /etc/hosts文件，静态路由，DNS配置的直接UI。下图显示了底层的配置文件。
除了DNS参数以及系统主机名之外，SUSE将大多数网络选项配置在 /etc/sysconfig/network目录下的ifcfg-interface文件。每一个接口呈现一个文件。
除了指定接口的IP地址，网关，以及广播信息，ifcfg-*文件可以配置很多其他网络选项。ifcfg.template文件对很多参数有清楚的注释。以下图为例：
SUSE系统中全局静态路由信息（包括默认路由）存储在routes文件中。文件中的各行就好象route命令省略了选项名，内容包含目标地址，网关，掩码，接口以及可选参数存储在路由表中，供路由进程查询。对于上述仅有默认路由的主机来说，路由文件包含以下内容：
default 192.168.1.254 - -
针对不同接口的路由保存在ifroute-interface文件中，接口部件的命名方法与ifcfg-*文件一致。其内容格式与routes文件相同。