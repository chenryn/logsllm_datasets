# 八、使用 ECS 系统部署应用
在前一章中，您学习了如何使用 EC2 自动扩展组在 AWS 中配置和部署 ECS 集群，本章的目标是使用云信息将 ECS 应用部署到您新构建的 ECS 集群中。
您将首先开始学习如何定义和部署生产级环境中 ECS 应用通常需要的各种支持资源。这些资源包括创建应用数据库来存储应用的数据，部署应用负载平衡器来服务和平衡对应用的请求，以及配置其他资源，如 IAM 角色和安全组，以控制对应用的访问。
有了这些支持资源，您将继续创建定义容器运行时配置的 ECS 任务定义，然后配置将 ECS 任务定义部署到 ECS 集群的 ECS 服务，并与应用负载平衡器集成以管理功能，如滚动部署。最后，您将学习如何创建云信息定制资源来执行定制配置任务，例如运行数据库迁移，从而为您提供基于 AWS 云信息的完整应用部署框架。
将涵盖以下主题:
*   使用无线电数据系统创建应用数据库
*   配置应用负载平衡器
*   创建 ECS 任务定义
*   部署 ECS 服务
*   ECS 滚动部署
*   创建云信息自定义资源
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   AWS CLI
*   本章从第 7 章继续，因此要求您已成功完成该章中定义的所有配置任务
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch8](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch8)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
查看以下视频，了解《行动守则》:
[http://bit.ly/2Mx8wHX](http://bit.ly/2Mx8wHX)
# 使用无线电数据系统创建应用数据库
todobackend 示例应用包括一个 MySQL 数据库，用于保存通过应用接口创建的待办事项。当您第一次在第 1 章中设置并运行示例应用时，您使用了 Docker 容器来提供应用数据库，但是，在生产级环境中，通常认为最佳做法是在专门为数据库和数据访问操作优化的专用机器上运行数据库和其他提供持久存储的服务。AWS 中的一个这样的服务是关系数据库服务(RDS)，它提供了专用的托管实例，这些实例针对提供流行的关系数据库引擎进行了优化，包括 MySQL、Postgres、SQL Server 和 Oracle。RDS 是一种非常成熟和健壮的服务，非常常用于支持 ECS 和其他在 AWS 中运行的应用的数据库需求。
可以使用云信息配置无线电数据系统实例。首先，让我们在 todobackend CloudFormation 模板中定义一个名为`ApplicationDatabase`的新资源，其资源类型为`AWS::RDS::DBInstance`，如下例所示:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: Todobackend Application
Parameters:
  ApplicationDesiredCount:
    Type: Number
    Description: Desired EC2 instance count
  ApplicationImageId:
    Type: String
    Description: ECS Amazon Machine Image (AMI) ID
  ApplicationSubnets:
    Type: List
    Description: Target subnets for EC2 instances
  DatabasePassword:
 Type: String
 Description: Database password
 NoEcho: "true"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Target VPC
Resources:
  ApplicationDatabase:
 Type: AWS::RDS::DBInstance
 Properties:
 Engine: MySQL
 EngineVersion: 5.7
 DBInstanceClass: db.t2.micro
 AllocatedStorage: 10
 StorageType: gp2
 MasterUsername: todobackend
 MasterUserPassword: !Ref DatabasePassword
 DBName: todobackend
 VPCSecurityGroups:
 - !Ref ApplicationDatabaseSecurityGroup
 DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup
 MultiAZ: "false"
 AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db  ApplicationAutoscalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
...
...
```
Creating RDS resources
前面示例中的配置被视为定义无线电数据系统实例的最低配置，如下所述:
*   `Engine`和`EngineVersion`:数据库引擎，在这里是 MySQL，以及要部署的主版本或次版本。
*   `DBInstanceClass`:运行数据库的 RDS 实例类型。为了确保您有资格进行自由层访问，您可以将其硬编码到`db.t2.micro`，尽管您通常会将此属性参数化，以便为您的生产环境使用更大的实例大小。
*   `AllocatedStorage`和`StorageType`:以 GB 为单位定义存储量和存储类型。在第一个示例中，存储类型设置为基于固态硬盘的 10gb GP2(通用 2)存储。
*   `MasterUsername`和`MasterUserPassword`:指定为无线电数据系统实例配置的主用户名和密码。`MasterUserPassword`属性引用了一个名为`DatabasePassword`的输入参数，其中包括一个名为`NoEcho`的属性，确保 CloudFormation 不会在任何日志中打印该参数的值。
*   `DBName`:指定数据库的名称。
*   `VPCSecurityGroups`:应用于无线电数据系统实例的网络通信入口和出口的安全组列表。
*   `DBSubnetGroupName`:引用`AWS::RDS::DBSubnetGroup`类型的资源，该资源定义了 RDS 实例可以部署到的子网。请注意，即使您只配置了单可用性区域 RDS 实例，您仍然需要引用您创建的数据库子网组资源中的至少两个子网。在前面的例子中，您引用了一个名为`ApplicationDatabaseSubnetGroup`的资源，您将很快创建它。
*   `MultiAZ`:定义是否在高可用性多可用性区域配置中部署 RDS 实例。出于演示应用的目的，此设置可以配置为`false`，但是在现实应用中，您通常会将此设置配置为`true`，至少对于您的生产环境是如此。
*   `AvailabilityZone`:定义 RDS 实例将部署到的可用性区域。此设置仅适用于单可用性区域实例(即`MultiAZ`设置为假的实例)。在前面的示例中，您使用`AWS::Region`伪参数来引用本地区域中的可用性区域`a`。
# 配置支持无线电数据系统的资源
回到前面的例子，很明显，您需要为 RDS 实例配置至少两个额外的支持资源:
*   `ApplicationDatabaseSecurityGroup`:定义应用于 RDS 实例的入口和出口安全规则的安全组资源。
*   `ApplicationDatabaseSubnetGroup`:RDS 实例可以部署到的子网列表。
除了这些资源，下面的示例演示了我们还需要添加一些资源:
```
...
Resources:
  ApplicationDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: MySQL
      EngineVersion: 5.7
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 10
      StorageType: gp2
      MasterUsername: todobackend
      MasterUserPassword:
        Ref: DatabasePassword
      DBName: todobackend
      VPCSecurityGroups:
        - !Ref ApplicationDatabaseSecurityGroup
      DBSubnetGroupName: !Ref ApplicationDatabaseSubnetGroup
      MultiAZ: "false"
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db
 ApplicationDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Application Database Subnet Group
      SubnetIds: !Ref ApplicationSubnets
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-subnet-group
  ApplicationDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Application Database Security Group
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 192.0.2.0/32
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-sg
  ApplicationToApplicationDatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref ApplicationDatabaseSecurityGroup
      SourceSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup
  ApplicationToApplicationDatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref ApplicationAutoscalingSecurityGroup
      DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup
...
...
```
Creating supporting RDS resources
在前面的示例中，您首先创建数据库子网组资源，SubnetIds 属性引用您在第 7 章中创建的相同`ApplicationSubnets`列表参数，这意味着您的数据库实例将安装在与您的应用 ECS 集群和 EC2 自动扩展组实例相同的子网中。在生产应用中，您通常会在单独的专用子网中运行 RDS 实例，出于安全目的，理想情况下没有通往互联网的路由，但是为了保持我们的示例简单，我们将只利用与应用 ECS 集群相同的子网。
接下来，您创建了一个名为`ApplicationDatabaseSecurityGroup`的安全组资源，并注意到这仅包含一个出口规则，有点奇怪的是，该规则允许 ICMP 访问 IP 地址`192.0.2.0/32`。该 IP 地址是“TEST-NET”IP 地址范围中的一个特殊地址，它是互联网上无效的 IP 地址，用于示例代码和文档。将此作为出口规则的原因是，默认情况下，AWS 会自动在出口上应用允许任何规则，除非您显式覆盖这些规则，因此通过添加允许访问不可出口的 IP 地址的单个规则，您实际上阻止了 RDS 实例发起的任何出站通信。
最后，请注意，您创建了两个与安全组相关的资源，`ApplicationToApplicationDatabaseIngress`和`ApplicationToApplicationDatabaseEgress`，它们分别具有`AWS::EC2::SecurityGroupIngress`和`AWS::EC2::SecurityGroupEgress`的资源类型。这些特殊的资源避免了在 CloudFormation 中被称为循环依赖的问题，在这种情况下，您在由于某种原因需要相互引用的两个资源之间创建了循环依赖。在我们的特定场景中，我们希望允许`ApplicationAutoscalingSecurityGroup`的成员访问`ApplicationDatabaseSecurityGroup`的成员，适当的安全规则应用于应用数据库的入口，也应用于应用实例的出口。如果您尝试按照下图所示配置这些规则，CloudFormation 将抛出一个错误并检测到一个循环依赖关系:
![](img/0139e646-f450-4086-99aa-09fc2e454a4a.png)
CloudFormation circular dependencies
为了解决这个问题，下图演示了一种使用您在前面示例中创建的资源的替代方法。
`ApplicationToApplicationDatabaseIngress`资源将在`ApplicationDatabaseSecurityGroup`中动态创建入口规则(由`GroupId`属性指定)，该规则允许从`ApplicationAutoscalingSecurityGroup`访问 MySQL 端口(TCP/3306)(由`SourceSecurityGroupId`属性指定)。类似地，`ApplicationToApplicationDatabaseEgress`资源将在`ApplicationAutoscalingSecurityGroup`(由`GroupId`属性指定)中动态创建出口规则，该规则允许访问与属于`ApplicationDatabaseSecurityGroup`(由`DestinationSecurityGroupId`属性指定)的实例相关联的 MySQL 端口(TCP/3306)。这最终实现了上图所示配置的目的，但不会在 CloudFormation 中导致任何循环依赖错误:
![](img/4abce996-823e-4813-a977-7975e8894666.png)
Solving CloudFormation circular dependencies
# 使用云信息部署无线电数据系统资源
有了前面示例的配置，您现在可以实际更新您的云信息栈，这将添加 RDS 实例和其他支持资源。在此之前，您需要更新您在第 7 章中创建的`dev.cfg`文件，该文件为您需要提供给云信息栈的输入参数提供了环境特定的值。具体来说，您需要为`MasterPassword`参数指定一个值，如下例所示:
```
ApplicationDesiredCount=1
ApplicationImageId=ami-ec957491
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
DatabasePassword=my-super-secret-password
VpcId=vpc-f8233a80
```
Adding a database password to the dev.cfg file
现在，如果您担心您以明文形式提供的密码最终会提交给源代码，那么做得好，您绝对 100%正确地非常关注这种方法。在下一章中，我们将专门讨论安全地管理凭据，但目前我们不会解决这个问题，因此请记住，前面示例中演示的方法不被认为是最佳实践，我们将暂时保留这个方法，以便启动和运行您的应用数据库实例。
有了前面示例的配置，您现在可以使用之前在第 7 章中使用的`aws cloudformation deploy`命令来部署更新的栈:
```
> export AWS_PROFILE=docker-in-aws