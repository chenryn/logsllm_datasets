### References

1. **Accelerator Library**  
   In *Cryptography and Information Security in the Balkans* (E. Pasalic and L. R. Knudsen, eds.), Cham: Springer International Publishing, 2016, pp. 169–186.

2. **Users Page on Official LLVM Website**  
   [http://llvm.org/Users.html](http://llvm.org/Users.html). Accessed June 19, 2020.

3. **ACM Software System Award 2012 (LLVM)**  
   [https://awards.acm.org/award_winners/lattner_5074762](https://awards.acm.org/award_winners/lattner_5074762). Accessed June 19, 2020.

4. **N. Matsumoto, R. Banno, and K. Matsuoka**  
   "Specification for CAHPv3," 2020. [https://github.com/virtualsecureplatform/cahpv3-spec](https://github.com/virtualsecureplatform/cahpv3-spec).

5. **J. Bachrach, H. Vo, B. Richards, Y. Lee, A. Waterman, R. Avižienis, J. Wawrzynek, and K. Asanović**  
   "Chisel: Constructing hardware in a Scala embedded language," in *DAC Design Automation Conference 2012*, pp. 1212–1221, 2012.

6. **Community Page on Official Chisel Website**  
   [https://www.chisel-lang.org/community.html](https://www.chisel-lang.org/community.html).

7. **D. A. Patterson and J. L. Hennessy**  
   *Computer Organization and Design, Fourth Edition: The Hardware/Software Interface* (The Morgan Kaufmann Series in Computer Architecture and Design). San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2008.

8. **Rocket Core (RISC-V)**  
   [https://github.com/chipsalliance/rocket-chip](https://github.com/chipsalliance/rocket-chip). Accessed June 19, 2020.

9. **P. M. Sailer, P. M. Sailer, and D. R. Kaeli**  
   *The DLX Instruction Set Architecture Handbook*. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 1996.

10. **X. Inc.**  
    "Microblaze Processor Reference Guide Embedded Development Kit 11.4." [https://www.xilinx.com/support/documentation/sw_manuals/xilinx11/mb_ref_guide.pdf](https://www.xilinx.com/support/documentation/sw_manuals/xilinx11/mb_ref_guide.pdf). Accessed June 19, 2020.

11. **E. M. Songhori, S. U. Hussain, A. Sadeghi, T. Schneider, and F. Koushanfar**  
    [https://github.com/esonghori/TinyGarble/tree/d40454dd365a943c364c3e7de05039fe94728c7a/circuit_synthesis/mips](https://github.com/esonghori/TinyGarble/tree/d40454dd365a943c364c3e7de05039fe94728c7a/circuit_synthesis/mips). Accessed June 19, 2020.

12. **C. Wolf**  
    "PicoRV32." [https://github.com/cliffordwolf/picorv32/tree/f9b1beb4cfd6b382157b54bc8f38c61d5ae7d785](https://github.com/cliffordwolf/picorv32/tree/f9b1beb4cfd6b382157b54bc8f38c61d5ae7d785). Accessed June 19, 2020.

13. **R. Banno, K. Matsuoka, and N. Matsumoto**  
    "Benchmark scripts for VSP," 2020. [https://github.com/virtualsecureplatform/kvsp-benchmark](https://github.com/virtualsecureplatform/kvsp-benchmark).

14. **P. Paillier**  
    "Public-key cryptosystems based on composite degree residuosity classes," in *Advances in Cryptology — EUROCRYPT '99* (J. Stern, ed.), Berlin, Heidelberg: Springer Berlin Heidelberg, 1999, pp. 223–238.

15. **N. G. Tsoutsos and M. Maniatakos**  
    "HEROIC: Homomorphically Encrypted One Instruction Computer," in *2014 Design, Automation & Test in Europe Conference & Exhibition (DATE)*, pp. 1–6, 2014.

16. **O. Mazonka**  
    "Higher SUBLEQ." [http://mazonka.com/subleq/hsq.html](http://mazonka.com/subleq/hsq.html), March 2011. Accessed June 19, 2020.

17. **P. T. Breuer, J. P. Bowen, E. Palomar, and Z. Liu**  
    "A Practical Encrypted Microprocessor," in *Proceedings of the 13th International Joint Conference on E-Business and Telecommunications (ICETE 2016)*, Setubal, PRT: SCITEPRESS - Science and Technology Publications, Lda, 2016, pp. 239–250.

### Related Work

Although FURISC is the most similar existing study to our proposed method, we will discuss other relevant studies. Some previous works have used the Paillier Cryptosystem [14] to evaluate encrypted binaries. HEROIC [15] is one such example. The Paillier Cryptosystem is a type of Partial Homomorphic Encryption (PHE) that only supports integer addition. To provide sufficient functionality for implementing a processor as an arithmetic circuit, HEROIC uses lookup tables. HEROIC implements an OISC (One Instruction Set Computer) processor that supports the SUBLEQ instruction. Unlike FURISC, there is a C-like language compiler for SUBLEQ, known as HIGHER SUBLEQ, although its last update was in March 2011 [16]. The use of lookup tables makes the ciphertexts deterministic, meaning the public key cannot be made public. This theoretically prevents HEROIC from achieving two-party PF-SFE. Additionally, the security of the table-based method has not been proven. The authors of HEROIC also proposed Cryptoleq in 2016 [24], which uses the Paillier Cryptosystem with lookup tables and OISC. They also introduced an assembly-like Domain Specific Language (DSL). Cryptoleq depends on the random number generation of the server, which is not suitable for SMPC (Secure Multi-Party Computation) due to the need for verification of the random number generator. Cryptoleq also relies on heuristic code-based obfuscation. An Open RISC implementation based on the idea of HEROIC [17] suffers from excessive memory consumption due to large lookup tables, estimated to be between hundreds of gigabytes to terabytes.

### Abstract Protocol Flow in Two-Party PF-SFE

In this section, we explain how the protocol flow of VSP can be theoretically modified to perform two-party PF-SFE.

#### Public/Private Data
In this protocol, Bob provides the function to be evaluated, and Alice provides the input data. The key aspect of understanding how VSP works in this protocol is that TFHE (Fully Homomorphic Encryption over the Torus) supports "trivial" ciphertexts. "Trivial" here means that their generation does not require any secret key or random number generation. For example, a trivial TLWE (Torus Learning With Errors) of 1 is (0, μ). This allows Bob to provide ROM and RAM data without Alice's input. The ROM and RAM data, except for Alice's input, are private to Bob, while Alice's input is private to her.

#### Abstract Protocol Workflow
The visual representation is shown in Figure 14, highlighting the differences from the two-party SCO (Secure Computation Outsourcing) case.

1. **Compilation**: Bob compiles the source code of the desired function into an executable for the processor.
2. **Encryption**: Alice encrypts the input and sends it to Bob. Bob encrypts the executable using trivial ciphertexts and combines it with the encrypted input to generate the encrypted ROM and RAM.

#### Security Analysis in Two-Party PF-SFE

- **Bob's Perspective**: Bob attempts to reveal the plaintexts of the Bootstrapping Key, RAM, registers, and each wire's ciphertexts. However, like in the two-party SCO case, this can be reduced to the hardness of decrypting TFHE ciphertexts.
- **Alice's Perspective**: Alice tries to reveal the ROM, RAM, registers, and each wire's ciphertexts. Although these are not provided to Alice, she knows the result of the function. If Bob always uses the same function and input, Alice can attempt to get results for all possible inputs. Therefore, protecting Bob's private information from Alice requires additional methods, such as indistinguishable obfuscation, which is beyond the scope of our proposed method.

We note that the PF-SFE protocol is still vulnerable to the termination problem mentioned in Section 4.1.

### Additional Evaluations

#### Runtime Performance Evaluation
Table 7 shows additional results in a 1 KiB ROM and RAM setting.

#### Gate Count Evaluation
Table 8 details the gate requirements for each stage of CAHP-Ruby. These values are calculated by synthesizing the components separately, and due to global optimizations in the synthesis software, the numbers do not sum up to the size of the entire processor circuit (the "Total" column).

#### CMUX Memory
Table 9 shows the number of CMUXs in the CMUX Memory components.

#### Memory Consumption Evaluation
On p3.8xlarge, running our implementation consumes approximately 3.7 GB of main memory and about 0.6 GB per GPU. Most of the memory consumption is due to holding the Bootstrapping Key.