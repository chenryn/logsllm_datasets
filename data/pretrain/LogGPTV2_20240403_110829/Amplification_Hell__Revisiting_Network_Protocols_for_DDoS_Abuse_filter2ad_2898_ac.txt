Request client statistics
ANY lookup at author. NS
ANY lookup at open resolv.
Name resolution
SEARCH request
Character generation request
Quote request
File search
Peer list exchange
Server info exchange
Server info exchange
Peer list and cmd exchange
URL list exchange
Peer and proxy exchange
TABLE III: Bandwidth ampliﬁer factors per protocols. all shows the
average BAF of all ampliﬁers, 50% and 10% show the average BAF
when using the worst 50% or 10% of the ampliﬁers, respectively.
For each protocol, we aim to identify the request-response
scenario with the highest bandwidth ampliﬁcation factor. We
then send the corresponding request to all ampliﬁers that we
identify in Section III-B and measure the average response
size. While the BAF mainly depends on the protocol, it also
depends on the speciﬁc ampliﬁer instance and its protocol
implementation. In fact, an attacker can ﬁrst measure the
BAF per ampliﬁer and – in the actual attack – use only the
subset of ampliﬁers with the highest BAFs. We thus also
included two further BAF measures that show the BAF if the
attacker focuses on abusing the most severe 50% or 10% of
the ampliﬁers, respectively. Table III summarizes our results.
The PAF in Table III shows the PAF that we measured when
using all (and not a subset of) ampliﬁers.
In the following, we will describe the maximum ampliﬁ-
cation scenarios and our measurement results per protocol:
1) SNMP v2: We found that SNMP v22 supports the
GetBulk operation, in which a device returns a list of SNMP
identiﬁers that can be monitored. In the legitimate use case, this
request can be used to iterate all monitoring values. An attacker
can abuse this feature to amplify trafﬁc by factor 6.3. The
exact response size is determined by the number and length of
identiﬁers in the returned item list. If an attacker abuses only
the 10% subset of the ampliﬁers that reply with the largest
payload, the BAF increases to 11.3.
2) NTP: We found that NTP servers support the monlist
request, which most NTP server implementations accept in
its short form of only 8 bytes. Upon receiving a monlist
request, an NTP server shares its recent clients in up to 100
UDP datagrams with 440 bytes payload each. One response
datagram speciﬁes statistics for NTP clients (such as the
client’s IP address, its NTP version and the number of requests)
who contacted this NTP server – a useful debugging feature
in the legitimate use case. The total response length depends
on the number client statistics a server shares upon request.
On average, monlist requests amplify the request trafﬁc by
factor 556.9–4670.0, the highest BAF in our measurements.
Next to monlist, NTP servers support further features
2We focus on SNMP in version 2 as it is the most popular version and
supported by the majority of SNMP devices.
that may be abused for attacks with signiﬁcantly lower am-
pliﬁcation rates. Preliminary research results show that these
features do, however, still show severe ampliﬁcation rates and
are supported by a larger set of servers. As of writing this,
we are still investigating the dimensions of and appropriate
countermeasures against these problems with NTP server de-
velopers and CERTs. We leave a complete analysis of these
further NTP features open to future work.
3) DNS: Name lookups (e.g., A or MX records), the tra-
ditional use-case of DNS, have low ampliﬁcation rates. Tra-
ditionally, the size of UDP replies was limited to 512 bytes
and DNS switched to TCP communication for larger replies.
However, many DNS servers adopted the DNS extensions
(EDNS0) that allow for UDP responses of up to 4096 bytes.
Attackers may abuse ANY request with EDNS0, for which a
server returns all known DNS record types for a given domain.
We distinguish between two different attacks abusing DNS
for ampliﬁcation. First, in our setting DNSOR, an attacker
abuses open resolvers as ampliﬁers. Attackers can enforce high
ampliﬁcation rates by resolving ANY requests from domains
that result in large responses. In fact, an attacker could even
conﬁgure a domain he controls such that
its authoritative
name server responds with exactly 4096-byte-wide responses.
As these responses will be cached by the resolvers (i.e., the
ampliﬁers) according to the TTL, the attacker’s domain would
face only little load. Depending on the queried domain name
length and the maximum EDNS0 size a resolver supports, this
ampliﬁes the UDP payload by factor 28.7–64.1.
Network operators have become aware of this kind of abuse
and the number of open DNS resolvers is gradually decreasing.
However, there is an increasing number of authoritative name
servers that include larger resource records in their responses.
One of the reasons is the deployment of DNSSEC [5], in which
each resource record is accompanied with a typically 1024-
bit-wide signature in a special RRSIG record. In a second
attack setting, DNSNS, we thus measure the ampliﬁcation rate
when an attacker sends ANY requests to authoritative name
servers only. We compute the ampliﬁcation factors without
the requirement to conﬁgure a specialized attack domain. In
our experiment, we send ANY requests to the authoritative
name servers found in our crawl and ﬁlter on the 1404 name
servers that deploy DNSSEC for at least one domain. We then
observed a BAF of 54.6, which can be even as high as 98.3
for the top 10% of authoritative name servers.
Intuitively, one would expect that the ampliﬁcation rate for
open resolvers is higher than for authoritative name servers, as
the attacker can (as we did) control and maximize the contents
of the response to an ANY request. However, the reason why
the BAF is lower for DNSOR than in DNSNS is that many
open resolvers did not support EDNS0 and thus chopped the
responses to 512 bytes. We did not observe such a behavior
for most of the authoritative name servers.
4) NetBios: In NetBios, we achieve the highest ampliﬁ-
cation using a name lookup, for which a receiving Windows
system responds with its current network and host name con-
ﬁguration. We observed an average BAF of 3.8. The response
sizes are inﬂuenced by the host names and network setups of
the ampliﬁers. When focusing on the top 10% of ampliﬁers
the BAF is 4.9.
5
5) SSDP: Upon SSDP discovery requests, UPnP-
enabled hosts respond with one reply packet per “service”
they have conﬁgured. On average, we achieved a BAF of 30.8.
The response size depends on the conﬁgured services and the
length of the service name (“USN”). Some of the ampliﬁers
responded with a few reply packets only, as they offer fewer
services. An attacker could thus achieve a higher BAF of 75.9
when using the top-10%-ampliﬁers only.
6) CharGen: According to RFC 864, CharGen servers
reply with random characters to incoming UDP datagrams of
any length. We therefore chose to send requests of a single
byte (a technique we will later also observe to be used by
attackers). On average, we received 358.8 bytes from the
CharGen servers, whereas the statistical mode of the response
sizes was 74 bytes and a few servers replied with up to 1472
bytes. We chose not to calculate BAFs on subsets of the servers
due to lack of statistical signiﬁcance for the relatively small
set of 34 ampliﬁers in our dataset3.
7) QOTD: Similar to CharGen, also Quote of the Day
servers (RFC 865) send replies to UDP datagrams of any
length. The average response size (i.e., quote length) was
140.3. Again, we do not calculate the BAF for ampliﬁer subsets
due to missing statistical signiﬁcance.
8) BitTorrent:
In BitTorrent, we identiﬁed that hash
searches – which are primarily used to ﬁnd peers that serve
a speciﬁc ﬁle – may result in large responses. While nor-
mal peers only return a list of neighboring peers, BitTorrent
trackers also include two 256-byte-wide bloom ﬁlter arrays
with BitTorrent swarm information in their reply4. As not all
peers know and share this information, the BAF varies among
ampliﬁers. In our experiment, we tried to maximize the number
of tracker replies by searching for the most prominent 100 ﬁle
hashes5. While the average BAF is 3.8 only, an attacker can
achieve a BAF of 10.3 by abusing the top 10% of the ampliﬁers
(typically BitTorrent trackers).
9) Kad: We use a peer list exchange message to gain a BAF
between 16.3 and 22.7 in Kad. Upon a 35-byte-wide peer list
request, a Kademlia client shares up to 31 peers, which consist
of an ID (16 byte), IP address (4 byte) and UDP port (2 byte)
plus Kademlia message header and meta data. The number of
peers shared depends on the client implementation and varied
between 15 and 31 peers in our crawl. The ampliﬁcation is
higher compared to BitTorrent due to the smaller requests.
10) Quake 3: For the Quake 3 game servers we found
the highest ampliﬁcation when asking a server for its current
status, a 15-byte-wide request. The reply is signiﬁcantly larger
and includes, e.g., the detailed server conﬁguration and a list
of current players. The average BAF was 63.9, but was as high
as 82.8 for the top-10% servers with many active players and
complex server conﬁgurations.
11) Steam: The Steam game protocol is used by a large
number of games such as Counter-Strike, Half-Life or Team
Fortress. Again, we can leverage the status information request
to ﬂood a potential victim with server status replies, with
3Note that the number of ampliﬁers availablet to us is so low because we
only scanned a subset of all available IPv4 addresses
4See BEP 33: http://www.bittorrent.org/beps/bep 0033.html
5We obtained this list from http://thepiratebay.sx/top/all
similar implications as for Quake 3. The average BAF of 5.5 is
lower than for Quake 3, as the status replies do not contain the
list of active players, the requests are larger (25 bytes) and the
server status replies are dense. When focusing on the top-10%,
we achieved a BAF of 14.7.
12) ZeroAccess: The ZeroAccess P2P botnet in version 2
(ZAv2)6 supports three message types in its P2P commu-
nication, of which the peer list and command exchange is
most effective in terms of ampliﬁcation. For a request of
only 16 bytes, a ZAv2 bot returns 16 neighbors (8 bytes
each) and information about the currently active malicious
modules, including a 128-byte-wide RSA signature by the
botmaster. This results in BAFs of 36.0-41.1. Usually bots are
synchronized regarding the commands, i.e., we observed only
a low ampliﬁcation derivation between all responses.
13) Sality: Similar to ZeroAccess, also the Sality P2P
bot offers three message types as part of its command-and-
control communication. Sality is a malware downloader and
bots can thus exchange URL lists of ﬁles that bots should
install on the infected PC, including a 256-byte-wide RSA
signature. We measured a BAF of 37.3–38.4. Again, most bots
are synchronized regarding the current URL lists, so there is
only little gain in choosing ampliﬁer subsets.
14)Gameover: In the Gameover P2P bot, a banking trojan,
we leverage the peer list and proxy list exchange mechanism
to achieve highest ampliﬁcation. For a 52-byte-wide UDP
payload, Gameover bots ﬁrst reply with a list of up to ten
neighboring peers [2]. In addition, bots send four additional
datagrams with a list of proxies that can be used to upload data,
such as stolen online banking credentials. The average number
of packets is even larger: Gameover peers may issue counter-
requests to ampliﬁcation victims, an artifact that increases
the packet ampliﬁcation above 5. In total, Gameover offers
a relatively constant BAF of 46.
IV. REAL-WORLD OBSERVATIONS
The ampliﬁcation potential identiﬁed in the previous sec-
tion is attractive to attackers who follow our threat model. In
this section, we analyze to what extent such attacks can be
observed in the wild. First, using Netﬂow data from a large
ISP, we search for DRDoS attack victims and for ampliﬁers
that are abused during DRDoS attacks. Second, we search
for UDP port scans in darknet trafﬁc, which may indicate
that attackers try to spy on ampliﬁers. Third, we publish and
monitor ampliﬁcation baits which are attractive to be abused
in ampliﬁcation attacks.
A. Dataset Descriptions
1) Netﬂow data: We obtained Netﬂow data from a large
European ISP comprising about 1 million end users (consumer
and business). The ISP hosts multiple servers that are vul-
nerable to ampliﬁcation attacks. We manually conﬁrmed the
presence of open DNS resolvers, authoritative name servers,
various game servers, NTP servers, SNMP- and SSDP-enabled
hosts, four CharGen servers, dozens of clients infected with
P2P-bots and plenty of P2P ﬁle sharing users. The ISP blocks
6ZeroAccess version 1 has been reported to contain signiﬁcantly fewer
peers [26] and we therefore did not further analyze it
6
IP spooﬁng for egress packets, but we can still use the dataset
to detect incoming DRDoS attacks and abuses of ampliﬁers
within the ISP’s network(s).
The dataset spans from July 14th to July 25th 2013 (12
days). Due to the high load on the routers, the ISP sampled
Netﬂow data and conﬁgured the routers to randomly choose
1/100th of all packets for Netﬂow recording. Luckily, due to
the aggressive nature of DDoS attacks, such a sampling does
not interfere with our goals to detect the attacks. We ﬁlter the
Netﬂow data on the UDP ports of the protocols with a ﬁxed
server port (see Table I on page 3) to ease analysis. We will
thus miss a few protocols in favor of a higher data processing
performance.
2) Darknet trafﬁc: Darknets are unused IP address ranges,
i.e., networks in which no services or users are hosted and that
should thus not be used in legitimate cases. Any trafﬁc directed
to the darknet can be considered as background Internet trafﬁc,
such as backscatter or scans. Darknets are thus a suitable
setting to identify scanning activity [3, 40, 6]. We have access
to two darknets with different granularity. Darknet D1 spans
a /17 network and is monitored using Netﬂow. Darknet D2
spans a disjoint /27 network and we record the full network
traces to allow packet inspection. We use four weeks of trafﬁc
from June/July 2013 in both darknets for further analysis.
3) Ampliﬁer baits: Third, we published bait services on
the Internet that are vulnerable to ampliﬁcation abuse. We
tried to make these baits public and attractive to attackers.
For example, we hosted game servers for Quake 3 and
Steam, registered them at the Master server and added bots
(non-human players) to increase the ampliﬁcation factor for
these servers. We started a public NTP server and listed it
in public NTP pools. In addition, we spawned ﬁle sharing
clients for BitTorrent (uTorrent) and Kad (eMule) and let
them download and seed popular ﬁles. We also have access
to a real authoritative name servers that hosts a DNSSEC-
enabled domain with Google’s PageRank popularity of ﬁve.
We implemented and launched CharGen and QOTD services.
Finally, we infected each a separate Windows VM with one
of the malicious P2P-based bots and limited the network
connectivity to the P2P communication, mitigating all potential
threats by the bot such as spam or clickfraud. We exposed
these services end-June7 and have been operating them for
four consecutive weeks before analyzing the data.
We operate the baits on public IPv4 addresses to prevent
side-effects from ﬁrewalls or NAT gateways. This may raise
ethical concerns, as we publish services that can be abused for
DDoS attacks, i.e., our baits may participate in real attacks.
To mitigate this harm, we strictly monitored these systems
and throttled the maximum uplink bandwidth for each of the
services to 1 MBit/s. In addition, when we saw that an attack
started, we immediately blocked the outgoing trafﬁc on a per-
IP address basis. This way, even if the bait services are abused
for ampliﬁcation attacks,
is limited and
represents less bandwidth than a typical ampliﬁer would have.
Admittedly, though, we could not entirely avoid participating
in actual attacks. We hope, however, that the insights that we
got compensate the potential harm of our experiments.
the attack impact
7The authoritative DNS servers under analysis are already in use since 2008
and the P2P-based bots were launched in April 2013.
B. Real-world Ampliﬁcation Scans
We ﬁrst aim to identify UDP-based scanning activities that
may indicate attackers who search for ampliﬁers. As we have
shown in Section III, ampliﬁers for most protocols can be
found by horizontally scanning the Internet for open services.
With horizontally we mean that attackers choose one service
that they want to abuse and then scan (a subset of) the IP
address space for potential ampliﬁers for this service. Such
Internet-wide scans can be identiﬁed using darknets [6, 40, 3].
We leverage our two darknet datasets, D1 and D2, to in-
spect what services are prominent to be scanned by potential
attackers. We obtain a concise overview by aggregating the
packets received in our darknets per UDP port. Detecting TCP-
based scanning activity is unrelated to bandwidth ampliﬁcation
attacks and is therefore outside the scope of this work.
Darknet D1
Darknet D2
Port
Proto
5060
SIP
53
DNS
19
CharGen