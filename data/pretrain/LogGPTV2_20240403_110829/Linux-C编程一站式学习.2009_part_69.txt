_mode:0100644
000pn!
size:100
inode
load
op
disk
s_blocksize:4096
super_block
sroot
，表示引用计
load
，指向实现
因此可
559
---
## Page 560
如果调用成功，这两个函数都返回新分配或指定的文件描述符，如果出错则返回-1。dup返回的新
两个文件描述符指向同一
dup和dup2都可用来复制一个现存的文件描述符，使两个文件描述符指向同一个file结构体。如果
3.2.dup和dup2函数请点评
有inode和权限位的概念，这是硬凑出来的。
级块这样的概念，
读上来的信息，
各inode结构体可以指向同一
例如所有者、
息。在上图的例子中，
每个dentry结构体都有一个指针指向inode结构体。inode结构体保存着从磁盘inode读上来的信
在cache中没有，就要从磁盘读到内存中。
到akaedu目录，
构体的指针，
个dentry结构体,
的inode。为了减少读盘次数,
每个file结构体都有一个指向dentry结构体的指针，“dentry"是directory entry（目录项）的缩写。
的file_operations结构体，其中的各种文件操作函数由该设备的驱动程序实现。
件不一
和方法应该是一样的,
数减到0才关闭文件。
求，
用1seek>
一个不同的file结构体，
说
一个inode，
，在磁盘存储布局上也有inode和超级块的概念，
一样，不是读写磁盘的数据块而是读写硬件设备，
int dup2(int oldfd,
int dup(int oldfd);
#include 
后者也是-
文件大小、文件类型和权限位等。每个inode结构体都有-
，然后找到文件a。dentry cache只保存最近访问过的目录项，如果要找的目录项
但为了能mount到Linux系统，也只好在驱动程序中硬凑一下，
_表示这个文件系统的根目录被mount到哪里，在上图的例子中这个分区
只要沿着路径各部分的dentry搜索即可，
，对于同一个文件系统上打开的常规文件来说，
，有两个dentry，
调用的函数应该是相同的，
，可以有不同的File Status Flag和读写位置。请注意区分这两种情况。
一个file结构体,
一组函数指针指向一些完成文件目录操作的内核函数。
 例如添加删除文件和目录、跟踪符号链接等等，属于同一文件系统的
内核缓存了目录的树状结构，称为dentry cache，
int newfd);
一个字符设备文件,
File Status Flag和读写位置只保存一份在file结构体中，
例如/home/akaedu/a，需要根据路径找到文件
，所以很容易和VFS中的概念建立对应关系。而
 所以图中的三个打开文件的file结构体指向同一
 所以file结构体应该指向不同 
，从根目录/找到nome目录，
那么它的read、write操作肯定和常规文
，而是减少引用计数,
read、write等文件操作的步骤
，可能没有inode或超
，则每个描述符对应
在Linux下
其中每个节点是
它们都指向同
，然后找
只有引用计
560
---
## Page 561
下面这个例子演示了dup和dup2函数的用法，
定新描述符的数值。如果newfd当前已经打开,
文件描述符-
图29.9.dup/dup2示例程序
例 29.2.dup和dup2示例程序
，则dup2直接返回newfa而不用先关闭newfa再复制。
一定是该进程未使用的最小文件描述符，
S_IRUSR|
int main(void)
#include
#include
#include
#include
#include
return 0;
close(save_fd);
dup2 ( save_
S1
if(fd
 = open("somefile", O_RDWR|O_CREAT,
IWUSR) ;
fd
 = dup(STDOUT_FILENO);
_fd,
FILENO,
，请结合后面的连环画理解程序的执行过程。
，则先将其关闭再做dup2操作，如果oldfd等
msg, strlen(msg));
这-
---
## Page 562
2.ext2文件系统
重点解释两个地方：
·第5幅图，
件tty，就把原来的关闭了，somefile原本只有一个引用计数，所以这次减到o，是真的关闭
它，所以只是将引用计数减1，
就把原来的关闭了
save_fd=4
save_fd=4
fd=3
fd=3
fd=3
，要执行dup2(save_fd，1);，
2
2
0
0
0
山
但是tty这个文件原本有两个引用计数，还有文件描述符save_fd也指向
tty
tty
somefile
sonefile
somefile
，并不真的关闭文件。
文件描述符1原本指向tty，
全国嵌入式人才培训基地
文件描述符1原本指向somefile,
save_fd=4
tty
save_fd=4
save_fd=4
起始页
上一级
fd=3
fd=3
fd=3
2
2
H
山
Ht
现在要指向新的文件somefile,
somefile
somefile
 现在要指向新的文
第 30章进程
3
下一页
---
## Page 563
5.练习：实现简单的Shell
4.进程间通信
3.进程控制
1. 引言
第 30 章 进程 请点评
3. VFS
目
上一页
4.2.其它IPC机制
4.1.管道
3.3.wait和waitpid函数
3.2.exec函数
3.1.fork函数
贝
部分IIl. Linux系统编程
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第30章进程
起始页
上一级
563
1.引言
---
## Page 564
在Shell提示符下输入命令is，首先fork创建子进程，这时子进程仍在执行/bin/bash程序，然后子
运行/bin/bash,
我们知道一个程序可以多次加载到内存，成为同时运行的多个进程，
fork和exec是本章要介绍的两个重要的系统调用。fork的作用是根据一个现有的进程复制出一个新
在PCB中的。
目前读者并不需要理解这些信息的细节，在随后几章中讲到某一项时会再次提醒读者它是保存
进程控制块是task_struct结构体。现在我们全面了解一下其中都有哪些信息。
的Shell进程，
我们知道，每个进程在内核中都有一个进程控制块（PCB）来维护进程相关的信息，Linux内核的
1. 引言造点评
命令可以运行
同时运行着很多进程,
进程，
上一页
·进程可以使用的资源上限（Resource Limit）
·控制终端、Session和进程组。
·用户id和组id。
·和信号相关的信息。
·文件描述符表，包含很多指向file结构体的指针。
·umask掩码。
·描述控制终端的信息。
·描述虚拟地址空间的信息。
·进程切换时需要保存和恢复的一些CPU寄存器。
·进程的状态，有运行、挂起、停止、僵尸等状态。
·进程id。系统中每个进程有唯一的id，在C语言中用pid_t类型表示，其实就是一个非负整
当前工作目录（Current Working Directory）。
原来的进程称为父进程（Parent Process）
数。
，然后新的Shell进程调用exec执行新的程序。
一个程序，
另一方面，
 这些进程都是从最初只有一个进程开始一个一个复制出来的。在Shel下输入
是因为Shell进程在读取用户输入的命令之后会调用fork复制出一个新
一个进程在调用exec前后也可以分别执行两个不同的程序，例如
全国嵌入式人才培训基地
第 30章进程
1.引言 
新进程称为子进程（Child Process）。系统中
，例如可以同时开多个终端窗口
564
下一页
---
## Page 565
第30章进程
程PCB中的进程id和父进程是不同的。
当前目录,
是Shell进程的子进程,
是
一样。同样道理，
Shell进程的当前目录，
页
2
图 30.1. fork/exec
parent
parent
然后用1s命令列出那个目录下的文件，1s进程其实是在列自己的当前目录，
/bin/bash
/bin/bash
 子进程的当前工作目录也和父进程一样,
 子进程的PCB是根据父进程复制而来的，
fork
只不过is进程的当前目录正好和Shell进程相同。有一个例外，子进
+
child
child
/bin/bash
/bin/ls
全国嵌入式人才培训基地
exec
起始页
一级
 所以我们可以用cd命令改变Shell进程的
，所以其中的umask掩码也和父进程
2.环境变量
而不 
然后运行程
565
---
## Page 566
libc中定义的全局变量environ指向环境变量表，environ没有包含在任何头文件中，所以在使用时
和命令行参数argv类似，
2.环境变量 请点评
进程地址空间中的位置如下图所示。
先前讲过，exec系统调用执行新程序时会把命令行参数和环境变量表传递给main函数，它们在整个
上一页
图30.3.环境变量
图 30.2.进程地址空间
低地址
高地址
未初始化的数据
初始化的数据
正文
，环境变量表也是一组字符串，如下图所示。
堆
NHL
▼
←
USER=akaedu\0
SHELL=/bin/bash\0
PATH=/usr/sbin:/usr/bin:/sbin:/bin\0
HOME=/home/akaedu\0
全国嵌入式人才培训基地
由exec赋初值0
命令行参数和环境变量
exec从程序文件中读到
第30章进程
2.环境变量
566
下一页
---
## Page 567
LANG
TERM
SHELL
PATH
按照惯例，
境变量和Shell进程的环境变量是相同的。
由于父进程在调用fork创建子进程时会把自己的环境变量表也复制给子进程，所以a.out打印的环
执行结果为
要用extern声明。例如:
境，
一些比较重要的环境变量的含义如下：
方式，比如图形界面终端可以显示汉字，而字符终端一般不行。
当前终端类型,
当前Shell，它的值通常是/bin/bash。
值可以包含多个目录，用:号隔开。在Shell中用echo命令可以查看这个环境变量的值：
可执行文件的搜索路径。1s命令也是一个程序，执行它不需要提供完整的路径名/bin/ls，
例 30.1.打印环境变量
TERM=xterm
DESKTOP_STARTUP_ID=
SSH_AGENT_PID=5717
，环境变量字符串都是name=value这样的形式,
./a.out
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr games
s
#include 
echo$PATH
int main(void)
，在图形界面终端下它的值通常是xterm，
return 0;
for(i=O; environ[i]!=NULL;, i++)
extern char **environ;
printf("%s\n",
：environ[i]);
，大多数name由大写字母加下划线组成，
，终端类型决定了一些程序的输出显示
然
---
## Page 568
unsetenv删除name的定义。即使name没有定义也不返回错误。
setenv将环境变量name的值设置为value。如果已存在环境变量name，那么
 putenv和setenv函数若成功则返回为0，若出错则返回非0。
修改环境变量可以用以下函数
getenv的返回值是指向value的指针，若未找到则为NULL 。
找它对应的value，
用environ指针可以查看所有环境变量字符串，但是不够方便，如果给出name要在环境变量表中查
HOME 
·若rewrite非O，则覆盖原来的定义;
·若rewrite为O，则不覆盖原来的定义，也不返回错误。
序时都有自己的一套配置。
当前用户主目录的路径，
语言和locale，决定了字符编码以及时间、货币等信息的显示格式。
例 30.2.修改环境变量
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/game
PATH=hello
voidunsetenv(const
#include 
char
#include 
S
 echo $PATH
int main(void)
#include 
#include 
*getenv(const char *name);
........
return 0;
setenv(
printf("PATH=%s\n"!
 很多程序需要在主目录下保存配置文件，
 char
*name);
 const char *value, int rewrite);
"heilo"
,getenV("PATH"));
使得每个用户在运行该程
568
---
## Page 569
出修改后的值，
1.引言
可以看出,
，但此后二者的环境变量互不影响。
Shell进程的环境变量PATH传给了a.out，
但在Shell进程中PATH的值没变。
全国嵌入式人才培训基地
起始页
父进程在创建子进程时会复制-
然后a.out修改了PATH的值,
一份环境变量给子进
在a.out中能打印
3.进程控制
569
---
## Page 570
fork调用失败则返回-1，
3.1.fork函数 请点评
3.进程控制 请点评
建新进程的。
上一页
例30.3. fork
This
pid_t fork(void);
./a.out 
is the child