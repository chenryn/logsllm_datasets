title:LSRP: Local Stabilization in Shortest Path Routing
author:Anish Arora and
Hongwei Zhang
LSRP: Local Stabilization in Shortest Path Routing ∗
Anish Arora
Hongwei Zhang
Department of Computer and Information Science
The Ohio State University, USA
{anish, zhangho}@cis.ohio-state.edu
Abstract
We formulate a notion of local stabilization, by which
a system self-stabilizes in time proportional to the size of
any perturbation that changes the network topology or the
state of nodes. The notion implies that the part of the net-
work involved in the stabilization includes at most the nodes
whose distance from the perturbed nodes is proportional
to the perturbation size. Also, we present LSRP, a proto-
col for local stabilization in shortest path routing. LSRP
achieves local stabilization via two techniques. First, it lay-
ers system computation into three diffusing waves with dif-
ferent propagation speeds, i.e., “stabilization wave” with the
lowest speed, “containment wave” with intermediate speed,
and “super-containment wave” with the highest speed. The
containment wave contains mistakenly initiated stabilization
wave, the super-containment wave contains mistakenly initi-
ated containment wave, and the super-containment wave self-
stabilizes itself locally. Second, LSRP avoids forming loops
during stabilization, and it removes all transient loops within
small constant time. To the best of our knowledge, LSRP is
the ﬁrst protocol that achieves local stabilization in shortest
path routing.
1
Introduction
A well-known ideal in networking is the ability to with-
stand failure or compromise of one or more regions in a net-
work without impacting a large part of the network. Yet, in
many instances, we ﬁnd that even a small fault-perturbed re-
gion impacts a large part of the network, as the effects of the
faults propagate to and contaminate far away nodes. An ex-
ample is inter-domain routing in the Internet by the Border
Gateway Protocol (BGP), where faults at some edge routers
can propagate across the whole Internet [9, 14].
Unbounded fault propagation decreases not only the avail-
ability of a network but also its stability and scalability.
Therefore, in large-scale networks such as the Internet and the
∗
This work was partially sponsored by DARPA contract OSU-RF
#F33615-01-C-1901, NSF grant NSF-CCR-9972368, an Ameritech Faculty
Fellowship, and two grants from Microsoft Research.
emerging wireless sensor networks [11, 14, 15], it is desirable
that faults be contained locally around the regions where they
have occurred, and the time taken for a system to stabilize be
a function F of the size of the fault-perturbed regions instead
of the size of the system. We call this property F-local stabi-
lization.
Local stabilization in routing One problem where F-local
stabilization is critical but remains unsolved is the basic prob-
lem of shortest path routing in networks. Generally speaking,
there are two categories of routing protocols: link-state and
distance-vector. In link-state protocols, each node maintains
the topological information of a whole network, and F-local
stabilization is impossible, since every single change in the
network topology has to be propagated to every node in the
network. In distance-vector protocols, each node only main-
tains the distance of and the next-hop on its shortest path to
each destination in the network. Thus, F-local stabilization is
conceivable in distance-vector protocols.
Distance-vector (and its variant, path-vector) protocols for
the Internet, such as Routing Information Protocol (RIP) and
BGP, have long been studied [6]. Distance-vector protocols
for mobile ad hoc networks, such as Destination-Sequenced
Distance-Vector (DSDV) and Ad hoc On-Demand Distance-
Vector (AODV), have also been proposed [12].
In design-
ing these protocols, researchers have typically concentrated
on how to avoid routing loops and the count-to-inﬁnity prob-
lem. Local stabilization is not guaranteed: small-scale local
perturbations (such as memory overﬂow) can propagate glob-
ally across a whole network, due to the diffusing nature of
these protocols [14], and result in severe instability [8, 14].
Moreover, the fault model has been typically limited to node
and link faults such as crash, repair, and congestion; state cor-
ruption is not considered. However, several kinds of state cor-
ruption do arise as a result of misconﬁguration and faulty soft-
ware, and are known to be major causes for routing instability
[9, 13, 14]. And theoretically speaking, even simple faults
such as node crash and message loss, can drive a network into
arbitrary states [7]. Therefore, F-local stabilization is desir-
able, and not only in the presence of node/link crash, repair,
and congestion but also in the presence of state corruption.
Contributions of the paper In this paper, we formulate the
concepts of perturbation size, F-local stabilization, and range
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
of contamination, in order to characterize the local stabiliza-
tion properties of systems. These concepts are generically ap-
plicable to distributed computing and networking problems.
We also design LSRP (for Local Stabilizing shortest path
Routing Protocol). Upon starting at an arbitrary state where
the perturbation size is p, LSRP stabilizes to yield shortest
path routes within O(p) time, and the nodes affected by the
perturbation are within O(p) distance from the perturbed re-
gions. Given two (or more) perturbed regions, LSRP sta-
bilizes each region independently of and concurrently with
(cid:1)),
the other(s) if the half distance between the regions is ω(p
(cid:1)
is the size of the largest perturbed region. Moreover,
where p
LSRP is scalable in the sense that each node only communi-
cates with and maintains information about its 1-hop neigh-
bors.
We also discuss the impact of network topology on local
stabilization in LSRP. We observe that higher edge density is
beneﬁcial in the sense that it can reduce the perturbation size,
the range of contamination, and the stabilization time.
Organization of the paper In Section 2, we present the sys-
tem, fault, and computation model. In Section 3, we formally
deﬁne local stabilization, and analyze the properties of local-
stabilizing systems. We present our LSRP protocol that solves
the problem of local stabilization in shortest path routing in
Section 4, and analyze its properties in Section 5.
In Sec-
tion 6, we discuss the impact of network topology in LSRP.
Finally, we discuss related work in Section 7 and make con-
cluding remarks in Section 8.
2 Preliminaries
In this section, we present the system model, protocol no-
tation, fault model, and computation model adopted in our
work.
System model A system G is a connected undirected graph
(V, E), where V and E are the set of nodes and the set of
edges in the system respectively. Each node in the system
has a unique ID.
If nodes i and j can communicate with
each other directly, then edge (i, j) is in E. For simplicity of
presentation, the weight of each edge is assumed to be 1.
There is a clock at each node. The ratio of clock rates be-
tween any two neighboring nodes in the system is bounded
from above by α, but no extra constraint on the absolute val-
ues of clocks is enforced.
Two neighboring nodes in the system communicate with
each other through shared memory1. A node can read its own
variables as well as those of its neighbors, and it can write its
own variables but not those of its neighbors. A node can also
read variables of all its neighbors simultaneously.
1We choose a shared memory model only for simplicity of presentation.
Our protocol LSRP is readily adaptable to the message passing model (see
[16]).
Protocol notation and semantics We write protocols us-
ing a variant of the guarded command notation [2]. At each
node, the protocol consists of a ﬁnite set of variables and ac-
tions. Each action consists of three parts: guard, statement,
and range of execution delay. For convenience, we associate
a unique name with each action. Thus, an action has the fol-
lowing form:
(cid:2)name(cid:3) :: (cid:2)guard(cid:3)
[l,u]−−−−→ (cid:2)statement(cid:3)
The guard is a boolean expression over the protocol variables
of the node and possibly those of its neighbors, the statement
updates zero or more protocol variables of the node, l and u
are the lower and upper bound on the execution delay of the
action respectively, and 0 ≤ l ≤ u. If l = u = 0, we write the
action in the following form:
(cid:2)name(cid:3) :: (cid:2)guard(cid:3) −→ (cid:2)statement(cid:3)
For an action named a, the lower and upper bound on its
execution delay are denoted as l.a and u.a respectively. An
action is enabled at time t if its guard evaluates to true at t.
Then, an action a is executed at a node i at time t only if
there exists e ∈ [l.a, u.a] such that a is continuously enabled
from time t − e to t, and either the value of the guard for
a changes from false to true at t − e or node i is executing
another action at t − e. To execute an action, its statement is
executed atomically.
Fault model A node or an edge is up if it functions correctly,
and it is down if it fail-stops. In a system, nodes and edges
that are up can fail-stop, nodes and edges that are down can
become up and join the system, and the state of a node, i.e.,
the values of all the variables of the node, can be corrupted.
The protocol actions of a node cannot be corrupted.
(cid:1)
(cid:1)
(cid:1)
(cid:1)(V
(cid:1)
(cid:1)) of G(V, E) such that V
(cid:1) = {(i, j) : i ∈ V
(cid:1)∧j ∈ V
Computation model The topology of a system G is the
(cid:1) = {i : i ∈
subgraph G
, E
(cid:1)∧(i, j) ∈ E∧
V ∧ i is up} and E
(i, j) is up}. Due to faults, the system topology G
(cid:1))
(cid:1)(V
, E
(cid:1)
or the set
may change in the sense that the set of up nodes V
changes over time. For example, node i is re-
of up edges E
when node i fail-stops. To deal with changes
moved from V
in system topology, we regard the state of G as the union of
the current system topology and the states of all the nodes in
this topology. At a system state q, the system topology and the
state of a node i in this topology are denoted as G.q(V.q, E.q)
and q(i) respectively. Given a system topology G.q(V.q, E.q)
and a problem speciﬁcation, there exist a set of legitimate sys-
tem states, denoted as Ql(G.q).
A system computation β is either a ﬁnite sequence
q0, (a1, t1), q1, (a2, t2), . . . , qn,
or an inﬁnite sequence
q0, (a1, t1), q1, (a2, t2), . . . , qr−1, (ar, tr), qr, . . ., of alternat-
ing system states (i.e. q0, q1, . . .) and protocol actions (i.e.
a1, a2, . . .), where each state transition qk−1, (ak, tk), qk (k ≥
1) means that the execution of action ak at some node at time
tk changes the system state from qk−1 to qk, and the following
condition holds: for any two pairs (ak, tk) and (ak(cid:1) , tk(cid:1)) in β
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
(cid:1)
(k (cid:9)= k
), if ak and ak(cid:1) are executed at the same node, then
tk (cid:9)= tk(cid:1) (i.e., at most one action can be executed at a node at
any time). β is a ﬁnite sequence only if it ends with a state qn,
and there is no enabled action at qn. A subsequence γ of β is
called a computation segment if γ starts and ends with a state.
3 Local stabilization: concepts and properties
In this section, we ﬁrst deﬁne concepts related to local sta-
bilization, which are generic for distributed computing and
networking problems, and then we present some notable prop-
erties of F-local stabilizing systems.
3.1 Concepts related to local stabilization
In a distributed system, the variables that each node needs
to maintain depend both on the problem and the protocol be-
ing used; some are inherent in the problem itself and indepen-
dent of the protocol being used, while others are dependent
on the protocol. For example, in the problem of shortest path
routing, each node has to maintain the next-hop on its cho-
sen shortest path to each destination node in order to be able
to route a message to the destination, and the variable used
to record this next-hop is inherent in the problem of shortest
path routing. We call such variables that are inherent in the
problem problem-speciﬁc variables. At a system state q, the
values of the problem-speciﬁc variables of a node i is denoted
as q(i.p).
A node may be dependent on another node or edge in a
distributed system, because, when faults occur at the latter,
the former may have to change the values of its problem-
speciﬁc variables in order for the system to stabilize to a legit-
imate state, no matter which protocol is used. For example, in
the problem of shortest path routing, every node whose only
shortest path to a destination goes through a node i or an edge
e is dependent on i or e because it would have to change the
next-hop on its shortest path to the destination if i or e fail-
stopped.
(cid:1)
Toward specifying the set of nodes that are dependent on a
at a legitimate system
at state q,
set of nodes V
state q, we deﬁne the dependent set of V
denoted by DSq(V
and a set of edges E
and E
(cid:1)
(cid:1)
(cid:1)
(cid:1)), as:
(cid:1) : q
(cid:1)
, E
{k : k ∈ V.q ∧ (∀q
where G− = (V.q\V
(cid:1) ∈ Ql(G−) ⇒ q
(cid:1) ⊆ V.q and E
if V
(cid:1) ∈ Ql(G+) ⇒ q
(cid:1) ∩ V.q = E
(cid:1)), G+ = (V.q∪V
Then, perturbation size is deﬁned as follows.
{k : k ∈ V.q ∧ (∀q
(cid:1)
V
if V
, E.q\E
(cid:1) : q
(cid:1)(k.p) (cid:9)= q(k.p))}
(cid:1) ⊆ E.q;
(cid:1)(k.p) (cid:9)= q(k.p))}∪
(cid:1) ∩ E.q = ∅.
, E.q∪E
(cid:1)).2
(cid:1)
(cid:1)
2The node set V
and edge set E
G+(V+, E+) are valid graphs.
(cid:2)
(cid:2)
should be such that G−(V−, E−) and
Deﬁnition 1 (Perturbation size) The perturbation size at a
|Aq(cid:1)∪Bq(cid:1)| where