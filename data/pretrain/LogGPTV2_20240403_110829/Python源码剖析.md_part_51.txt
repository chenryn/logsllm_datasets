*old
_PyThreadState_Current':
new
Python源码剖析
13.1
线程环境初始化
一深度探索动态语言核心技术
319
---
## Page 350
13.2.1创建
13.2
320
Python源码剖析
对象之后，就会开始通过_PyBuiltin_Init来设置系统的_builtin
module是_builtin_module
点我们将在接下来的_PyBuiltin_Init中清晰地看到（见代码清单13-2）。
的，PyInterpreterState 对象中维护着所有的 pyThreadstate对象共享的资源。这一
PyDictobject对象，这个对象将维护系统所有的module，这也符合我们在第8章中提到
而这些系统module正是在Py_InitializeEx中设置的。其中第一个被Python创建的
在这个名字空间中，存在着符号“air”。这个名字空间中的符号和值来自于系统module，
Python启动之后，虽然我们没有进行任何操作，但是Pyhon已经创建了某个名字空间，
的对象。不过我们现在仅仅考虑符号“air”的存在性，符号“air”的存在性意味着在
代码清单13-2
寻找到了符号“air"所对应的对象，更进一步，我们甚至知道，这个对象一定是个cal1ab1e
本身，就大有内容可挖。我们已经知道，Pyhon要执行dir（），必定是在某个名字空间中
void Py_InitializeEx(int install sigs)
一个11sE的内容，我们这里不管它是如何运作的，输出的信息又是什么，单说这个调用
[bltinmodule.c]
[pythonrun.c]
yobject*
第13章Python运行环境初始化
在调用_pyBuiltin_Init之前，Python最终会将interp->modules 创建为一个
在Py_InitializeEx中，当Python 创建了pyInterpreterState和PyThreadState
我们都有这样的经历，在交互模式下启动Pyhon程序之后，敲入“ax（）”，会显示
系统module初始化
/I11：创建并设置
Pyobject *mod
bimod=_PyBuiltin_Init():
一深度探索动态语言核心技术
将所有PytHon内建类型加入到
PyBuiltin_IniE(void)
builtin_
PYTHON_API_VERSION):
builtin
*diet,
=PyDict_New（）
builtin
module
doc,
builtin
(PyObject
modlle
builtin
*)NULL,
buiitin_methods,
module中
module了。
---
## Page 351
代码清单13-3
部分工作是通过Py_InitModule4来完成的（见代码清单13-3）。
Pythoner,
PyObject*
[modsupport.c]
fundef
#defIne SETBUILTIN(NAME,
builtin_的设置：
Pyobject *m,
其实在第一步中，Pyhon就已经完成了大部分设置_builtin_module的工作，这
设置module，将Pyhon中所有的类型对象全塞到新创建的_bultin_module中。
创建PyModuleObject对象，在Python中，module正是通过这个对象来实现的。
代码清单13-2的[1]和[2]分别有如下含义：
整个_PyBuiltin_Init函数的功能就是设置好_builtin
//131：设置moaule中的（符号，值）对应关系
PyMethodDef
SETBUILTIN("IiSt"
SETBUILTIN(Mint",
SETBUILTIN("NOne"
(methods
return NuLb:
SETBUILTIN
return NULL:
PyModuleGetDiet (m）
（m=PyImport_AddModule(name)）
对于这个家伙，应该不会陌生吧。
Py_InitModule4 (const char *name, PyMethodDef *methods, char *doc,
创建module对象
=PyCFunetion_NewEx(mi,passthrough,n);
return NULL;
*ml
NULL)
>l
*passthrough,int module_api_verslon）
*，口
METH_CLASS OY METH STATIC）;
OBUECT)
&PyList_Type):
&PyInt_Type);
PyDict_Type);
Py_None);
Python源码剖析
_PyBuiltin_in1t通过两个步骤来完成对
carinot
NULL）
P1(ml->m1_FlagS&METH_STATIC)）
（PyObjeat)OBJECT)miname,v)
PyDiet_
该module中所包含的函数的集合，在这里，是builtin_methods。
NULL
modules =PyImport_GetModuleDiet();
GetItemString(modules,name))1=
NUIL&&
---
## Page 353
PyModuleobject对象的动作也显得非常的清晰，注意在这里设置了module的_name_
Python会通过下面的 PyModule_New创建名为name的新的module对象，并将（name）
中搜索名为name的module对象，如果该module已经存在，则直接将module返回：否则，
存在同名的module。Pyhon通过代码清单13-4的[1]处的pyImport_GetModuleDict获得
[moduleobject.c]
sys.modules.
它确实就是一个PyDictobject对象。对应到Python一级，这个全局的modue集合就是
的13.2.1节中看到的 Py_InitializeEx中出现的interp->modules，从那里可以看到，
放着所有的（module名，module对象）这样的对应关系，这个集合其实就是我们在之前
eyobjectPyModule_New(char *name)
Pyobject*Py Import_Get ModuleDict (void)
[import.c]
#define PyThreadState_GET( (_PyThreadstate_Current)
性，
PyModuleobject;
实际上，PyModuleobject对象就是对PyDictobject 对象的一个简单包装，创建
在PyImport_AddModule的代码清单13-4的[2]处，会在从[1]处获得的module集合
在Python创建一个新的module对象之前，会先到这个module集合中查看是否已经
，却并没有设置其_doc_属性。
return(Pyobject
PyDietsetItematring(m->md_dict)
PyModuleobject*m
Pyoblect
PyObject_HEAD
PyInterpreterstate
Python内部维护了一个存放所有加载到内存中的module的集合，在这个集合中，
1/3.
PyObject_Gc_New(PyMoctuleObject,
通过ryThreadState_GET（）获得当前线程状态对象
*md_dict
PyDict
*）m;
Python源码剖析
doe
&RyModule_Type);
name
13.2系统module初始化
Py_None);
nameobj):
一深度探索动态语言核心技术
323
---
## Page 354
13.2.1.2
324
ython源码剖析
mocules中就匆匆返回了：
module，并没有包含它所应该包含的操作和数据，而PyImport_AdaModule似乎也并不在
结构。
Pythoner的眼中，它们就代表着Python。我们从图13-4可以形象地看到PyMethodDef的
并处理其中的每一项元素。我们来看看这个builtin_methods。
设置。这个属性设置的动作依赖于Py_InitModule4的调用者传递进来的第二个参数
代码清单13-4的[3]处，Py_InitModule4完成了对_bui1tin_module儿乎全部属性的
意，在代码清单13-4的[3]处将这个空空如也的PyModuleObject对象放入到interp->
static PyMethodDef builtinLmethodsll=(
[bltinmodule.c]
typedef sttuct PyMethoaDef PyMethodDef;
struct PyMethodDef 
[methodobject.h]
（methods），在这里为builtin_methodsPy_InitModule4会遍历bufltin_methods，
第13章Python运行环境初始化
看看builtin_methods中的家伙啊，dir、getattr、len.个个出身高贵，在
在PyImport_AddModule结束后，程序流程回到Py_InitModule4手中，在接下来的
我们注意到，PyImport_AdaMoaule虽然创建了一个module，但是这仅仅是一个空的
CNULL
char
PyCPunctlon
设置module对象
一深度探索动态语言核心技术
*ml_namek
*ml_doc;
NULLY,
builtin_len,
builtin_getattr.
builtin_dir,
Tiags:
ml_meth:
/*mhedc
The name of the built-in function/method /
The C functiori that implementsit *
METH_VARARGS,dLr_doc),
METHo, 1en_doc),
METH_VARARGS,getattr_doc)
attribute,
OrNULL*
---
## Page 355
RyIntobjeat.
还将这个函数指针和其他信息联系在了一起：
它创建一个PyCFunctionobjet对象，这个对象是Python中对函数指针的包装，当然，
[methodobject.c]
typedef
[methodobject.h]
PycFunctionobject;
很显然，
对于buiitin_methods中的每一个pyMethoaDeE结构，Py_InitModule4都会基于
-do
elseI
8
PyCFunctlonobiect*oR:
Pyobject
Pyobject
PyMethodDef*muml:
PyObiect_HEAD
mi_flags
m_meth
ml_name
ml_doc
op=Pyobject_ecNew(PycRunctionobject)
>m_module
Pyobjeet_INIT(op,
free,
free_list;
struct
值
→指针
Python对PycFunctionobjet对象采用了缓冲池的策略，不过有了对
PyListObject对象的剖析，我们已经可以将这个策略猜个八九不离十了。
liat
电
m
selE;
smulusel：
"len",
iter",
module;
(PyCFunctionobject
图13-4len函数对应的PyMethodDef结构
METHO
"fen"
/Description of the Cfunction to.call /
\n\
builtin len,
builtin iter,
STRVAR(len_doc,
builtin_len(Byobject self.
Static Pyobject*
return PyInt_EromLong(res))
if（resm_self）;