的子事之上。如果匹配函数不会自动把捕获分组匹配的文本填到一个结构中，这样会
省去一次额外的字符串复制。我们当然也可以先获得捕获分组匹配到的子串，然后再
把内层正则表达式应用于其上。
不管采用哪种方式，在一个循环中使用两个正则表达式总是会比使用一个包含嵌套的
顺序环视分组的正则表达式要快很多。后者要求正则引擎进行大量的回溯。如果用在
大文件之上，那么使用一个正则式的解决方案会明显慢很多，因为它需要为目标字符
串中的每个数字确定片段边界（也就是HTML粗体tag)，这也包括了不在两个tag
之间的数学。使用两个正则表达式的解决方案在找到片段边界之前，甚至不会开始查
找数字，而它只需要线性时间就可以找到所有的片段。
参见
实例3.8、3.10和3.11。
3.14替换所有匹配
问题描述
你想要把正则表达式（before）的所有匹配都替换为替代文本《after》。
解决方案
#
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
使用正则表达式编程
161
www.TopSage.com
---
## Page 178
string resultString = null;
try{
}catch (ArgumentNullException ex)(
// Cannot pass null as the regular expression, subject string
//or replacement text
}catch (ArgumentException ex){
//Syntax error in the regular expression
如果想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Regex
对象：
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
string resultString = null;
try{
Regex regexObj = new Regex("before");
try(
}catch (ArgumentNullException ex)(
）catch (ArgumentException ex）{
// Syntax error in the regular expression
VB.NET
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
Dim ResultString = Regex.Replace(SubjectString,"before","after")
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
Dim ResultString As String = Nothing
x
Catch ex As ArgumentNullException
'Cannot pass null as the regular expression, subject string,
'or replacement text
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
如果想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Regex
对象：
162
第3章
www.TopSage.com
---
## Page 179
Dim Regexobj As New Regex("before")
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
Dim ResultString As String = Nothing
Try
Dim RegexObj As New Regex("before")
Try
Catch ex As ArgumentNullException
'Cannot pass null as the subject string or replacement text
End Try
Catch ex As ArgumentException
'Syntax error in the regular expression
End Try
Java
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
String resultString = subjectString.replaceAll("before","after");
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
try{
String resultString = subjectString.replaceAll("before","after");
}catch (PatternSyntaxException ex){
//Syntax error in the regular expression
}catch (IllegalArgumentException ex){
//Syntax error in the replacement text (unescaped $ signs?)
}catch (IndexOutOfBoundsException ex)(
// Non-existent backreference used the replacement text
如果想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Matcher
对象：
Pattern regex = Pattern.compile("before");
Matcher regexMatcher = regex.matcher(subjectString);
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Matcher
对象：
String resultString = null;
try{
Pattern regex = Pattern.compile("before");
使用正则表达式编程
163
www.TopSage.com
---
## Page 180
Matcher regexMatcher
= regex.matcher(subjectString);
try(
resultString = regexMatcher.replaceAll("after");
}catch (IllegalArgumentException ex) {
// Syntax error in the replacement text (unescaped $ signs?)
)catch （IndexOutofBoundsException ex）{
// Non-existent backreference used the replacement text
}catch (PatternSyntaxException ex)(
//Syntax error in the regular expression
JavaScript
result = subject.replace(/before/g, "after");
PHP
$result=preg_replace('/before/'，'after',$subject);
Perl
假设目标字符串保存在特殊变量S_中，而结果也会保存到S_中：
s/before/after/g;
假设目标字符串保存在特殊变量Ssubject中，而结果也会保存到Ssubject中：
$subject=~s/before/after/g;
假设目标字符事保存在特殊变量$subject中，而结果会保存到Sresult中：
($result ~ Ssubject) =~ s/before/after/g;
Python
如果你只需要处理少量字符串，可以使用全局函数：
result = re.sub("before","after",subject)
如果要反复使用同一个正则表达式，那么就需要使用一个编译好的对象：
reobj =re.compile("before")
result = reobj.sub("after", subject)
Ruby
result = subject.gsub(/before/,'after')
164
第3章
www.TopSage.com
---
## Page 181
讨论
.NET
在.NET中，你总是可以使用Regex.ReplaceO方法来使用正则表达式进行查找和替换。
这个Replace(方法有10个重载形式。其中一半会接受学符事作为替代文本：我们会在
下面讨论这些形式。另外一半则接受一个MatchEvaluator委派（delegate）来作为替代，
这些形式会在实例3.16中讲解。
Replace(期望的第一个参数总是一个字符事，其中包含你要在其上执行查找和替换的原
始目标文本。这个参数不能是null。否则，ReplaceO会产生一个ArgumentNullException
例外。ReplaceO的返回值总是应用了替换之后的字符串。
如果你只需要使用一个正则表达式少数几次，那么你可以使用静态调用。这样的话，
第二个参数是你想要使用的正则表达式。把替代文本作为第三个参数。你还可以使用
可选的第四个参数来传递正则选项。如果你的正则表达式中有语法错误的话，那么就
会产生一个ArgumentException例外。
如果你需要在许多字符串上使用同一个正则表达式的话，那么你可以先通过构造---个
Regex对象，然后用这个对象来调用ReplaceO函数，这样做会更为高效。此时，第一
个参数是目标字符串，第二个参数是替代文本。这两个是唯一必需的参数。
当你在Regex类的实例之上调用ReplaceO的时候，还可以使用一些额外的参数对查找
和替换进行限制。如果省略掉这些参数，那么在目标字符串中的所有正则表达式匹配
都会被替换掉。ReplaceO函数的静态重载形式不会支持这些额外的参数；它们总是会替
换掉所有的匹配。
在目标学符事和替代文本之后的第三个可选参数中，你可以传递想要执行的替换次数。
如果你传了一个大于等于1的数字，那么它就是替换执行的最大次数。例如，
Replace(subject,replacement,3）只会替换前三个正则表达式匹配，并且会忽略随后的所
有匹配。如果你在第三个参数中传了0，那么就根本不会执行任何替换，目标字符事会
照原样返回来。如果你传递的是-1，那么所有的正则匹配都会被替换。如果给的参数小
于-1，就会导致ReplaceO产生-一个ArgumentOutOfRangeException例外。L
如果你使用了第三个参数来指定替换执行的次数，那么你还可以指定一个可选的第四
个参数来指定正则表达式应该开始搜索的字符位置（索引）。实质上，你传递给第四
个参数的数值，也就是你想要正则表达式忽略的目标字符事并始字符的数量。当你已
经处理了这个字符串的一部分，而又想要对字符串中的剩余部分进行查找和替换时，
就会用到这样的方式。如果你指定了一个数量，它必须大于或等于0，而且要小于或
者等于目标字符串的长度。否则，ReplaceO会产生-个ArgumentOutOfRangeException
例外。与MatchO不同的是，ReplaceO并不支持再使用一个参数来指定正则表达式允
使用正则表达式编程165
www.TopSage.com
---
## Page 182
许搜索的子串长度。
Java
如果只想使用同一个正则表达式来查找和替换一个学符事，那么可以用你的字符事来
直接调用方法replaceFirstO或replaceAllO。这两个方法都会接受2个参数：一个是含有
正则表达式的字符事，一个是包含替代文本的字符事。这些函数是一种简便形式，它
们实际上会调用Pattern.compile("before").matcher(subjectString).replaceFirst("after")和
要得到一个正则表达式匹配的字符串中的子串，你就需要创建一个Matcher，可以参考
在实例3.3中的讲解。然后，使用你的匹配器来调用replaceFirstO或replaceAllO，这时
只需要把替代文本作为唯一参数。
如果正则式和替代文本都是由最终用户提供的，那么你就需要考虑3种不同的例外类。
如果正则表达式包含语法错误，那么Pattern.compileO、String.replaceFirstO和
String.replaceAllO会产生PatternSyntaxException例外。如果在替代文本中包含语法错
误，那么replaceFirstO和replaceAllO会产生IllegalArgumentException例外。而如果替代
文本语法上是正确的，但是却引用了一个不存在的捕获分组，那么就会产生-一个
IndexOutOfBoundsException例外。
JavaScript
要使用正则表达式来在字符事中执行查找和替换，可以在该字符串之上调用replaceO
函数。把正则表达式作为第一个参数，而包含替代文本的字符事作为第二个参数。
replaceO函数会返回一个应用了替换之后的新字符串。
标志。这可以参考实例3.4中的讲解。如果你没有使用/g标志，那么就只会替换第一个
匹配。
PHP
使用preg_replaceO函数，可以很容易地在一个字符串中执行查找和替换。把正则表达
式作为第一个参数，把替代文本作为第二个参数，而目标字符事作为第三个参数。函
数返回值是应用了替换之后的一个字符串。
可选的第四个参数允许你对替换执行次数进行限制。如果你没有使用这个参数，或者
是指定了-1，那么所有的正则匹配都会被替换掉。如果使用的是0，那么就不会进行任
何替换。如果使用的是一个正整数，那么preg_replaceO在字符串中执行的替换次数最
多不会超过你指定的参数。如果匹配次数小于该参数，那么所有匹配都会被替换掉，
并不会产生任何错误。
166第3章
www.TopSage.com
---
## Page 183
如果想要知道执行了多少次替换，那么你可以在调用中添加第五个参数。这个参数会
得到一个实际上执行了的替换次数的一个整数。
preg_replaceO的一个特殊功能是你可以在前3个参数中传递数组来取代字符串。如果你
在第三个参数中传递的不是单个字符串，而是一个字符串数组，那么preg_replaceO会
返回在所有字符事之上完成了查找和替换操作之后的一个字符串数组。
如果你在第-一个参数中传递了一个正则表达式字符串数组，那么preg_replaceO会依次
使用每个正则表达式来对目标字符串进行查找和替换。如果你传递的是目标字符串的
一个列表，那么所有的正则表达式都会被应用到所有的目标字符串之上。当使用一个