接下来使用之前创建的端口喷射更多的内存。以后可以释放它以触发垃圾回收。我们已经创建了填充端口，并在前2000个端口上增加了队列限制。这时将前500个端口再次用于喷射。  
#### Step 7:存储指向voucher的指针但释放引用
由voucher_release函数释放引用。实际上EXP创建了两个类似的函数，用于释放引用(voucher_release)和增加引用(voucher_reference)，它们都是对voucher_tweak_references的包装，后者是对task_swap_mach_voucher的包装。漏洞在于task_swap_mach_voucher，该函数的参数是当前任务，新voucher(引用将被释放)和旧voucher(引用将被增加)。因此如果要释放一个voucher的引用，只需将其作为参数传递给新voucher，并且可以将旧voucher设置为MACH_PORT_NULL。反之如果要增加一个voucher的引用，只需将其作为参数传递给旧voucher，并且可以将新voucher设置为MACH_PORT_NULL。  
#### 步骤8：创建将覆盖释放的voucher的OOL端口指针
现在需要创建将覆盖释放的voucher的OOL端口指针。EXP选择kalloc.32768
zone，因为BLOCK_SIZE(ipc_voucher)=0x4000，因此将更容易预测voucher的偏移量。端口指针的数量是根据zone大小除以uint64_t的大小(即端口指针的大小)得到的。然后，调用calloc分配具有端口指针的数组，每个端口指针的大小为mach_port_t，初始为0。iterate_ipc_vouchers_via_mach_ports函数用于遍历端口指针(该函数把它们当成voucher)，并使用回调函数给出voucher的偏移，然后将voucher的iv_refs指向base
port。之所以使用ool_ports[voucher_start+1]，是因为iv_refs位于voucher的起始位置+0x8。还通过calloc将iv_port设置为MACH_PORT_NULL，以便以后调用thread_get_mach_voucher时获得一个新的voucher端口。  
#### 步骤9：释放第一次GC喷射
#### 步骤10：释放先前创建的voucher，从而留下一个悬空的指针
#### 步骤11：用OOL端口占用释放的voucher
第6步在前2000个端口上增加了队列限制并且将前500个端口再次用于喷射。现在对其它端口进行喷射，直到总喷射量达到内存容量的17％。ool_holding_ports指针从索引500(gc_port_count)开始，因为已经使用了500个。同时也使分配的内存大小为32768以便分配在kalloc.32768
zone中，这是通过保留每个消息的端口指针的数量来完成的(ool_port_count=ool_port_spray_kalloc_zone/sizeof(uint64_t)，其中ool_port_spray_kalloc_zone=32768)，顺利的话就能够占用释放的voucher。  
ool_ports_spray_size_with_gc在每2MB(gc_step)喷射之间添加usleep()，以留出时间进行zone垃圾收集。  
这些端口中的每一个都使用带有OOL端口描述符的Mach消息进行喷射。这将分配内核内存，并用端口指针填充它们。ool_ports_spray_port中的以下代码用于分配参数和发送消息。  
#### 步骤12：调用thread_get_mach_voucher以获取已释放voucher的voucher端口
如果base port的地址足够小，内核会认为引用计数仍然有效，调用thread_get_mach_voucher不会导致内核panic。  
现在内存布局如下图所示。  
#### 步骤13：更改iv_refs以指向管道缓冲区
可以使用相同的漏洞(这次是增加引用)修改iv_refs值。iv_refs现在是指向base
port的。因为喷射了大约16MB的管道缓冲区，将其增加4MB(base_port_to_fake_port_offset)之后应该指向管道缓冲区中的某个地方。  
#### 步骤14：找到uaf_voucher_port
接收先前使用OOL端口描述符发送的消息。我们遍历消息中的所有描述符，然后将它们传递到将起始端口地址和端口总数作为参数的处理程序。然后使用iterate_ipc_vouchers_via_mach_ports遍历所有这些端口指针，通过将所有端口指针的大小除以voucher大小来给出所有可能的voucher地址。遍历端口指针时检查ool_ports[voucher_start+7]
(即iv_port，iv_port在voucher结构体中的偏移为56)是否是一个有效的端口。因为只在uaf_voucher_port上调用了thread_get_mach_voucher，所以它的iv_port指向新分配的voucher端口。这样就可以找到uaf_voucher_port。将ool_ports[voucher_start+1]
(即iv_refs，iv_refs在voucher结构体中的偏移为8)指向fake port。  
#### 步骤15：查找与fake port重叠的管道缓冲区
接下来需要查找与fake port重叠的管道缓冲区。使用mach_port_kobject得到fake
port的IKOT_TYPE，这个值应该是管道的索引。  
#### 步骤16：清理未使用的内存
#### 步骤17：设置原语以查找base port的地址
现在的任务是创建这个fake port，以便可以使用pid_for_task()技术读取4个字节的内核内存。本文的第1部分中讨论了这种技术。  
将mach api调用mach_port_request_notification()发送到fake port，以添加一个请求：如果该fake
port变为MACH_PORT_DEAD则将通知base port。这将导致fake port的ip_requests指向包含指向base
port地址的指针的数组。  
#### 步骤18：查找base port的地址
遍历整个缓冲区，查看每个可能的端口的ip_requests，如果不为0，就说明找到了fake port。保存fake
port在管道缓冲区中的偏移。然后将数据写入管道以便稍后可以读取。  
#### 步骤19：查找base port的地址
可以找到base port指针的地址，因为它位于ip_requests固定偏移处。接下来需要从base port指针中读取base port的地址。  
stage0_read是一个非常方便的函数，能够一次读取32位的内核内存。基本上步骤如下。  
1.在管道中创建一个fake port，设置所有必需的属性，将IKOT设置为IKOT_NONE  
2.根据要读取的地址设置伪造的proc的地址(即bsd_info)，在stage0_send_fake_task_message创建fake
task并通过Mach消息将其发送到fake port  
3.读取管道，从fake port的ip_messages.imq_message得到fake task的地址  
4.重写fake port，将IKOT设置为IKOT_TASK，kobject设置为fake task的地址  
5.调用pid_for_task读取内核内存  
(这里参考TyphoonCon上的PPT：)  
#### 步骤20：计算fake port的地址
知道了base port地址和从base port到fake
port的偏移量(在步骤3中已定义为base_port_to_fake_port_offset)，因此可以计算出fake port地址。  
#### 步骤21：计算自己的任务端口的地址
现在创建一个更好的读取原语并将其称为阶段1。下一步是计算自己的任务端口的地址。stage1_find_port_address函数将输入作为任务，并使用阶段1的读取原语获取任务端口的地址。  
#### 步骤22：获取主机端口的地址
为了实现完整的内核读写，需要找到vm_map和ipc_space_kernel。首先获取主机端口地址。  
#### 步骤23：从主机端口的ip_receiver获取ipc_space_kernel
第1部分中讲过ipc_port结构体具有一个指向ipc_space的receiver成员。可以通过读取主机端口ip_receiver(ip_receiver即receiver)成员来读取ipc_space_kernel。  
#### 步骤24：获取内核任务端口的地址
在堆中内核任务端口靠近主机端口，因此可以迭代该块找到内核任务端口。  
以下函数检查端口是否为内核任务端口。首先查看是否为IKOT_TASK类型。然后读取kobject指向的任务，在该任务中查找bsd_info以查找其指向的proc结构体，然后读取pid值。如果为0，则表示它是内核任务端口。  
#### 步骤25：获取vm_map的地址
现在已经找到了内核任务端口，可以读取vm_map，因为它处于固定偏移处。  
#### 步骤26：创建伪造的内核任务端口
现在可以创建一个位于管道缓冲区内的伪造的内核任务端口。  
伪造的内核任务端口的原则是伪造的任务的map应指向vm_map，而receiver应指向ipc_space_kernel。可以通过以下两行代码实现。  
#### 步骤27：创建伪造的内核任务端口
现在有了一个功能齐全的内核任务端口，并且可以调用Mach
API来读写内存，是时候构建一个更稳定的内核任务端口了。这次通过mach_vm_allocate分配内存，甚至在管道缓冲区之外也可以创建内核任务端口。  
#### 步骤28：清理不需要的资源
#### 步骤29：清理更多不必要的资源，得到稳定的tfp0
完成！现在能够进行完整的内核读写。
## 总结
在这篇文章中，我们讨论了[@_bazad](https://twitter.com/\\_bazad)发现的voucher_swap漏洞，并解释了iOS12上获得tfp0的步骤。在接下来的文章中，我们将着眼于Undecimus越狱和所有需要成功越狱iOS设备的步骤。
## 参考文献
1.Project Zero Issue tracker -   
2.iOS 10 - Kernel Heap Revisited -  
3.Mac OS X Internals: A Systems Approach -   
4.MacOS and iOS Internals, Volume III: Security & Insecurity:
5.CanSecWest 2017 - Port(al) to the iOS Core -