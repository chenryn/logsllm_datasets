F
e
v
i
t
l
a
u
m
u
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
1.2
Data-based sender-side estimation
Data-based receiver-side estimation
Ack-based sender-side estimation
Ack-based receiver-side estimation
SYN/ACK estimation
2
2.2
2.4
1.6
1.4
Accurate within a factor of X
1.8
Figure 9: RTT validation against NPD N2 data
recorded for each connection the median of the RTT esti-
mates it produced. We used these medians to compare to
the performance of the RTT estimation of T-RAT.
Even though the NPD data includes both directions of
connections, we tested our RTT estimation using only a
single direction at a time (since the algorithm is designed
to work in such cases.) Hence, we consider separately the
cases in which the tool sees the data packets at the sender,
acknowledgment packets at the sender, data packets at the
receiver and acknowledgment packets at the receiver. For
each RTT estimate computed by T-RAT we measure its ac-
curacy by comparing it to the value produced by tcpanaly.
The results of the RTT validation are shown in Figure 9,
which plots the CDF of the ratio between the two values for
each of the 4 cases. The ﬁgure shows that with access to the
data packets at either the sender or the receiver, for over
90% of the traces the estimated RTT is accurate within a
factor of 1.15, and for over 95% of the traces the estimated
RTT is accurate within a factor of 1.3. Accuracy of RTT
estimates based on the acknowledgment stream, while still
encouraging,
In
particular, with ack-based analysis at the receiver, 90% of
estimates are accurate within a factor of 1.3 and 95% of
traces are accurate within a factor of 1.6. Using the sender-
side acknowledgment stream, estimates are accurate within
a factor of 1.6 about 90% of the time. We suspect that de-
layed acknowledgments may be in part responsible for the
inferior RTT estimation using the acknowledgment stream.
By reducing the number of packets observable per RTT and
perturbing the timing of some packets, they may make the
job of RTT estimation more diﬃcult. Further, we speculate
that the sender side performance with acknowledgments also
suﬀers because the acknowledgments at the sender have tra-
versed an extra queue and are therefore subject to additional
variation in the network delays they experience.
is not as good as data stream analysis.
Previous studies have used the round trip time for the
initial TCP SYN-ACK handshake as an estimate of per-
connection round trip time [6, 11]. We also compared this
value to the median value produce by tcpanaly. As shown in
Figure 9, this estimate is signiﬁcantly worse than the others.
In general, the SYN-ACK handshake tends to underestimate
the actual round trip time.
The overall results produced by our tool are encourag-
ing. They show that RTT estimation works reasonably well
in most cases. The real question, however, is how the rate
analyzer works. Are the errors in RTT estimation small
enough to allow the tool to properly determine a rate lim-
iting factor, or do the errors prevent accurate analysis? We
now turn to the question of the validity of the rate limiting
factors.
5.2 Rate Limit Validation
We validated the rate limit results of T-RAT using both
simulations and experiments in a controlled testbed. In our
simulations, we used the ns simulator [13]. By controlling
the simulated network and endpoint parameters we created
TCP connections that exhibited various rate limiting behav-
iors. For example, congested limited behavior was simulated
using several inﬁnite source FTP connections traversing a
shared bottleneck link, and application limited behavior was
simulated using long-lived Telnet sessions. Our simulations
included approximately 400 connections and 340,000 pack-
ets. T-RAT correctly identiﬁed the proper rate limiting be-
havior for over 99% of the connections.
While these simulations provided positive results about
the performance of T-RAT, they suﬀered from several weak-
nesses. First, we were not able to validate all of the rate
limiting behaviors that T-RAT was designed to identify. In
particular, the TCP implementation in ns does not include
the advertised window in TCP packets, preventing experi-
ments that exhibited receiver window limited behavior. Sec-
ond, the simulations varied some relevant parameters, but
they did not explore the parameter space in a systematic
way. This left us with little knowledge about the limits of
the tool. Finally, simulations abstract away many details of
actual operating system and protocol performance, leaving
questions about how the tool would perform on real systems.
To further validate the performance of T-RAT we con-
ducted experiments in a testbed consisting of PCs running
the FreeBSD 4.3 operating system.
In these experiments,
two PCs acting as routers were connected by a bottleneck
link. Each of these routers was also connected to a high
speed LAN. Hosts on these LANs sent and received traﬃc
across the bottleneck link. We used the dummynet [19] facil-
ity in the FreeBSD kernel to emulate diﬀerent bandwidths,
propagation delays and buﬀer sizes on the bottleneck link.
We devised a series of experiments intended to elicit vari-
ous rate limiting behaviors, captured packet traces from the
TCP connections in these experiments using tcpdump, ana-
lyzed these traces using T-RAT, and validated the results
reported by T-RAT against the expected behavior. Un-
less otherwise noted, the bandwidth, propagation delay, and
buﬀer size on the emulated link were 1.5 Mbps, 25 msec, and
20 KBytes, respectively. We used an MTU of 540 bytes on
all interfaces, allowing us to explore a wider range of win-
dow sizes (in terms of packets) than would be aﬀorded with
a larger MTU.
For some of the rate limiting behaviors, we captured TCP
connections on both unloaded and loaded links. In order to
produce background load, we generated bursts of UDP traf-
ﬁc at exponentially distributed intervals. The burst size was
varied from 1 to 4 packets across experiments, and the aver-
age inter-burst interval was 30 msec, generating 10%, 20%,
30% and 40% load on the link. This was not intended to
model realistic traﬃc. Rather the intention was to perturb
the timing of the TCP packets and assess the eﬀect of this
perturbation on the ability of T-RAT to identify correctly
the rate limiting behavior in question.
Experiments were repeated with and without delayed ac-
317knowledgments. All TCP packets were captured at both
endpoints of the connection. We tested T-RAT using only
a single direction of a connection at a time (either data or
acknowledgment) to emulate the more challenging scenario
of only observing one direction of a connection. Thus, for
each connection we made four independent assessments us-
ing data packets at the source, data packets at the destina-
tion, acknowledgment packets at the source, and acknowl-
edgment packets at the destination.
For each behavior we varied parameters in order to assess
how well T-RAT works under a range of conditions. Our
exploration of the relevant parameter space is by no means
exhaustive, but the extensive experiments we conducted give
us conﬁdence about the operation of the tool.
In the vast majority of cases T-RAT correctly identiﬁed
the dominant rate limiting factor. That is, for a given con-
nection, the majority of periodic determinations made by
T-RAT were correct. Further, for many connections, all of
the periodic determinations were correct. In what follows,
we summarize the experiments and their results, focusing
on those cases that were most interesting or problematic.5
Receiver Window Limited: In these experiments, the
maximum advertised receiver window was varied (by adjust-
ing the receiver’s socket buﬀer) for each connection, while
the sender’s window was larger than the bandwidth delay
product of the link (and hence did not impact the sender’s
window.) The parameters of the bottleneck link were such
that a window size of 18 packets saturated the link. We
tested window sizes between 2 and 20 packets with no back-
ground load. Even when the link was saturated, there was
suﬃcient buﬀering to prevent packet loss. With background
load, we only tested window sizes up to 10 packets to avoid
loss due to congestion. A 5 MByte ﬁle was transferred for
each connection.
T-RAT successfully identiﬁed these connections as receiver
window limited (using the acknowledgement stream) and
host window limited (using the data stream) in most cases.
Using the data stream, it did not correctly identify window
sizes of 2 packets as receiver window limited. It is not pos-
sible to disambiguate this case from a bandwidth limited
connection captured upstream of the bottleneck link when
delayed acknowledgments are present.
In both cases, the
trace shows periodic transmission of a burst of 2 packets
followed by an idle period. We would not expect receiver
window limits to result in ﬂight sizes of 2 packets, so we are
not concerned about this failure mode.
T-RAT was able to identify a wide range of window sizes
as receiver window limited (or host window limited using
data packets.) As the number of packets in ﬂight approaches
the saturation point of the link, and as a consequence the
time between successive ﬂights approaches the inter-packet
time, identifying ﬂight boundaries becomes more diﬃcult.
When the tool had access to the data stream, it correctly
identiﬁed the window limit until the link utilization ap-
proached 80%-90% of the link bandwidth. Beyond that it
identiﬁed the connection as bandwidth limited. With access
to the acknowledgment stream, the tool correctly identiﬁed
the behavior as receiver window limited until the link was
fully saturated.
As we applied background traﬃc to the link, the domi-
nant cause identiﬁed for each connection was still receiver
5More detailed information about the results is available at
http://www.research.att.com/projects/T-RAT/.
window limited for acknowledgement and host window lim-
ited for data packets. However, for each connection T-RAT
sometimes identiﬁed a minority of the periodic determina-
tions as transport limited when it had access to the data
packets. With access to the acknowledgment packets, virtu-
ally all of the periodic determinations were receiver window
limited. Thus, the advertised window information available
in acknowledgments made T-RAT’s job easier.
Sender Window Limited: These experiments were iden-
tical to the previous ones with the exception that in this case
it was the sender’s maximum window that was adjusted
while the receiver window was larger than the bandwidth
delay product of the bottleneck link.
The results were very similar to the those in the receiver
window limited experiments. The tool was again unable to
identify ﬂight sizes of 2 packets as sender window limited
(which in practice should not be a common occurrence.) T-
RAT was able to identify window sizes as large as 80-90%
of the link bandwidth as sender window limited. Beyond
that it had trouble diﬀerentiating the behavior from band-
width limited. Finally, as background load was applied to
the link, the tool still correctly identiﬁed the most common
rate limiting factor for each connection, though it sometimes
confused the behavior with transport limited.
Transport Limited: To test transport limited behavior,
in which the connection does congestion avoidance while not
experiencing loss, we set the bottleneck link bandwidth to
10 Mbps and the one-way propagation delay to 40 msec,
allowing a window size of more than 180 packets (recall
we used a 540 byte MTU). In addition, we set the initial
value of ssthresh to 2000 bytes, so that connections transi-
tioned from slow-start to congestion avoidance very quickly.
With no background traﬃc, each connection transferred a 4
MByte ﬁle. Without delayed acknowledgments, the window
size reached about 140 packets (utilizing 75% of the link)
before the connection terminated. When we tested this be-
havior in the presence of background load, each connection
transferred a 2.5 MByte ﬁle and achieved a maximum win-
dow size of approximately 100 packets (without delayed ac-
knowledgments). The smaller ﬁle size was chosen to prevent
packet loss during the experiments. The experiments were
repeated 10 times for each set of parameters.
T-RAT successfully identiﬁed transport limited as the dom-
inant rate limiting cause for each connection. It made errors
in some of the periodic determinations, with the errors be-
coming more prevalent as the burst size of the background
traﬃc increased. Whenever T-RAT was unable to deter-
mine the correct rate limiting behavior, its estimate of the
RTT was incorrect. However, correct RTT estimation is
not always necessary.
In some cases, the tool was robust
enough to overcome errors in the RTT estimation and still
determine the proper rate limiting behavior.
In assessing
transport limited behavior, T-RAT was more successful us-
ing data packets than acknowledgment packets, particularly
when delayed acknowledgments were used.
In contrast to
the receiver window limited case above, the acknowledgment
packets provide no additional information, and by acknowl-
edging only half of the packets, T-RAT has less information
with which to work.
Bandwidth Limited: In these experiments, a 10 MByte
ﬁle was transferred across the bottleneck link with no com-
peting traﬃc. The router buﬀer was large enough to avoid
packet loss, and the sender and receiver windows were large
318enough to allow connections to saturate the link. We tested
bottleneck link bandwidths of 500 Kbps, 1.5 Mbps, and 10
Mbps, with and without delayed acknowledgments. Each
experiment was repeated 10 times.
In the vast majority of cases, T-RAT properly identiﬁed
the rate limiting behavior. There are two points to make
about these results. First, the RTT estimation produced
by the tool was often incorrect. For a connection that fully
saturates a bottleneck link, and is competing with no other
traﬃc on that link, the resulting packet trace consists of
stream of evenly spaced packets. There is, therefore, lit-
tle or no timing information with which to accurately esti-
mate RTT. Nonetheless, the test for bandwidth limiting be-
havior depends primarily on the distribution of inter-packet
times and not on proper estimation of the ﬂight size, so the
tool still functions properly. The second observation about
these experiments is that the connections were not exclu-
sively bandwidth limited. Rather, they started in congestion
avoidance (ssthresh was again set to 2000 bytes) and opened
the congestion window, eventually saturating the link. The
tool identiﬁed the connections as initially transport limited,
and then as bandwidth limited once the bottleneck link was
saturated. Visual inspection of the traces revealed that the
tool made the transition at the appropriate time. In a few
instances, the tool was unable to make a rate limiting deter-
mination during the single interval in which the connection
transitioned states, and deemed the rate limiting behavior
to be unknown.
Congestion Limited: Congestion limited behavior was
tested by transferring 5 MByte ﬁles across the bottleneck
link with random packet loss induced by dummynet. Tests
were repeated with both 2% and 5% loss on the link in a
single direction and in both directions. As with our other
experiments, we repeated tests with and without delayed
acknowledgments, and we repeated 5 transfers in each con-
ﬁguration.6
In nearly all cases, T-RAT identiﬁed these connections
as congestion limited across all loss rates, acknowledgment
strategies, and directionality of loss. For a very small num-
ber of the periodic assessments, connections were deemed
transport limited. However, a connection that does not ex-
perience any loss over some interval will be in congestion
avoidance mode and will be appropriately deemed transport
limited. Visual inspection of a sample of these instances
showed that this was indeed the case.
Opportunity Limited: In these experiments, we varied
the amount of data transferred by each connection from 1
to 100 packets. The connection sizes and link parameters
were such that the sources never left slow-start. However,
at the larger connection sizes, the congestion window was
large enough to saturate the link. Hence, while the source
remained in slow-start, this was not always obvious when
examining packet traces.
We ﬁrst review the results without delayed acknowledg-
6We also performed the more obvious experiment in which
multiple TCP connections were started simultaneously with
loss induced by the competing TCPs. However, an apparent
bug in the version of TCP we used sometimes prevented a
connection from ever opening its congestion window after
experiencing packet loss. Validating these results was more
diﬃcult since the TCP connections experienced a range of
rate limiting factors (congestion, host window, transport.)
Nonetheless, visual inspection of those results also indicated
that the tool was properly identifying cases of congestion.
ments. Using the trace of data packets at the source, T-RAT
correctly identiﬁed all of the connections as opportunity lim-
ited. In the other 3 traces, T-RAT identiﬁed between 83 and
88 of the connections as opportunity limited. Most of the
failures occurred at connection sizes greater than 80 pack-
ets, with a few occurring between 40 and 60 packets. None
occurred for connection sizes less than 40 packets. When it
failed, T-RAT deemed the connections either transport or
bandwidth limited. These cases are not particularly trou-
bling, as the window sizes are larger than we would expect
to see with regularity in actual traces. With delayed ac-
knowledgments, T-RAT reached the right conclusion in 399
out of 400 cases, failing only for a single connection size with
acknowledgments at the receiver.
Application Limited: Characterizing and identifying
application limited traﬃc is perhaps more challenging than
the other behaviors we study. The test T-RAT uses for ap-
plication limited traﬃc is based on heuristics about packet
sizes and inter-packet gaps. However, there are certainly
scenarios that will cause the tool to fail. For example, an
application that sends constant bit rate traﬃc in MSS-sized
packets will likely be identiﬁed as bandwidth limited. Fur-
ther, since this traﬃc is by deﬁnition limited by the applica-
tion our tool needs to recognize a potentially wider range of
behaviors than with the other limiting factors. Understand-
ing the range of application limited traﬃc in the Internet
remains a subject for future study.
In our eﬀort to validate the current tests for application
limited traﬃc in T-RAT we had the application generate ap-
plication data units (ADUs) at intervals separated by a ran-
dom idle times chosen from an exponential distribution. We
tested connections with average idle times of 1, 2, 3, 10, 20,
30, 50 and 100 msec. Furthermore, rather than generating
MSS-sized ADUs as in our other experiments, we chose the
size of the ADUs from a uniform distribution between 333
and 500 bytes, the latter being the MSS in our experiments.
The resulting application layer data generation rates would
have been between 3.3 Mbps (1 msec average idle time) and
33 kbps (100 msec idle time) without any network limits. In
our case (1.5 Mbps bottleneck bandwidth) the highest rates
would certainly run into network limits. Since we did not
use MSS-sized packets, the resulting network layer traﬃc
depended on whether or not the TCP Nagle algorithm [12],
which coalesces smaller ADUs into MSS-sized packets, is
employed. Hence, in addition to repeating experiments with
and without delayed acknowledgments, we also repeated the
experiments with and without the Nagle algorithm turned
on.
Assessing the results of these experiments was diﬃcult.
Given that we used a stochastic data generation process,
and that one cannot know a priori how this random process
will interact with the transport layer, we could not know
what the resulting network traﬃc would look like. Without
a detailed packet-by-packet examination, the best we can do
is to make qualitative characterizations about the results.
With the Nagle algorithm turned on, T-RAT character-
ized the two fastest data generation rates (3.3 Mbps and
1.65 Mbps) as a combination of congestion and bandwidth
limited. This is what one would expect given the bottleneck
link bandwidth. At the lowest data rates (33 Kbps and 66
Kbps) T-RAT deemed the traﬃc to be application limited.
This is again consistent with intuition. In between, (from
110 Kbps to 1.1 Mbps) the traﬃc was characterized vari-