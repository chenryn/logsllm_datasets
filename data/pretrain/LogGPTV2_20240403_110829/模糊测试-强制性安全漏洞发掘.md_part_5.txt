23.3.3交叉引用
-316
21.2.2Dfuz
...249
23.4对一个代码覆盖工具的分析
.252
21.2.3 SPIKE
-255
23.4.1
PStalker设计概览
..319
21.2.4 Peach
23.4.2
数据源
.320
21.2.5通用模期器
..257
23.4.3
数据探查
21.2.6 Autodafe
.259
23.4.4
321
21.3定制模糊器的实例研究：Shockwave-
23.4.5
局限性
--321
Flash
--260
21.3.1SWF文件的建模
-.261
23.4.6数根存储
322
23.5实例研究
.324
21.3.2生成有效的数据
-.270
23.5.1测试策略
*.325
21.3.3对环境进行模测试
-.71
21.3.4测试方法
-.272
23.5.2测试方法
..327
21.4模糊测试框架Sulley
.272
23.6益处和改进的余地
.330
21.4.1Sulley目录结构
·..272
23.7小结
333
21.4.2数据表示
...274
第24章智能故障检测
.334
21.4.3会话
*..282
24.1基本的错误检测方法
.334
21.4.4事后验证阶段…
.2.86
24.2我们所要搜索的内容
.336
21.4.5一个完整的实例分析
..290
24.3选择模值时的注意事项
...340
21.5小结
..295
24.4自动化的调试器监视
·341
第22章自动化协议解析
...297
24.4.1
一个基本的调试器监视器
22.1模测试存在的问题是什么
-297
24.4.2
一个更加高级的调试器监视器.344
22.2启发式技术
-299
24.5调试器在应用程序前先看到的异常和
22.2.1代理模糊测试
..299
调试器再次看到程序未捕获的异常的
22.2.2改进的代理模糊测试
.-.300
比较
·..347
22.2.3反汇编启发式规则
.302
24.6动志二进制插装
...348
---
## Page 15
XVII
24.7小结
25.4安全问题研究者
356
第四部分展
望
25.5小结
·356
第26章展望
·357
第25章没取的教训
·351
26.1商业工具
25.1软件开发生命周期
357
...351
26.1.1安全性测试工具beSTORM
357
25.1.1分析
.353
26.1.2BreakingPoint系统BPS-1000..
-358
25.1.2设计
26.1.3 Codenomicon
..358
25.1.3编码
26.1.4 GLEG ProtoVer Professional
25.14测试
-354
26.1.5安全性测试工具Mu-4000
.-.361
25.1.5维护
26.1.6 Security Innovation Holodeck
...361
25.16在SDLC中实现模糊测试
26.2发现漏洞的混合方法
.362
25.2开发者
-355
26.3集成的测试平台
++.
362
25.3QA研究者
...355
26.4小结
..363
---
## Page 16
第一部分背景
第1章安全漏洞发掘方法学
“Internet高速公路将会越来越少么？”
—George W. Bush, Concord, N. H., 2004年8月5日
如果询问任何一位有成就的安全领域的研究者如何发现漏洞，很可能会得到一大堆答案。
为什么？因为可用于安全性测试的方法太多，每种方法都有自己的优点和缺点。没有一种方法
是绝对正确的，也没有一种方法能够揭示一个给定目标下所有可能的漏洞。在较高的层次上，
有三种主要的方法用来发现安全漏洞：白盒测试、黑盒测试和灰盒测试。这些方法之间的差别
是由测试者可得到的资源决定的。白盒测试是一个极端，它需要对所有资源进行充分地访问。
这包括访问源代码、设计规约，甚至有可能还要访问程序员本人。黑盒测试是另一个极端，它
几乎不需要知道软件的内部细节，很大程度上带有盲目测试的味道。远程Web应用的Pen测试
是黑盒测试的一个好例子，它不需要访间程序源码，位于两个极端方法之间的是灰金测试，它
的定义因询问的人不同而不同。就我们的应用目的而言，灰盒测试需要访问编译后得到的二进
制代码，或许还要访问一些基本的文档。
本章将考察漏洞发掘的各种不同的高层和低层方法，起点是白盒测试，你以前可能听说过
这种方法也被称为玻璃、透明或半透明测试，之后我们再定义黑盒测试和灰盒测试，模糊测试
可能就属于后两者。我们将阐述每种方法的利弊，这些方法的利整将成为本书后面介绍模糊测
试时所需要的背景知识。模糊测试只是漏洞发掘的一种方法，了解其他可选的实用方法也是相
当重要的。
1.1白盒测试
作为一种测试方法学，模糊测试（fuzzing）主要属于黑盒测试和灰盒测试领域。尽管如此，
我们还是要考察另一种软件开发人员可选的漏洞发掘方法，即白盒测试（whiteboxtesting）。
1.1.1源代码评审
源代码评审既可以人工完成也可以在自动化工具的辅助下完成。计算机程序通常包含数万
到数十万行代码，那么单纯的人工评审一般情况下是不可行的。自动化工具是一个宝贵的资源，
它能够减少长时间对着代码行阅读而带来的繁重任务，但是自动化工具只能识别出可能的漏洞
或可疑的代码片段，检测出的问题是否有效，仍然需要人工分析。
---
## Page 17
2
第一部分背景
让源代码分析工具产生有用的结果，必须要克服许多障碍。对这些复杂问题的剖析已经超
出了本书的范围，让我们考虑如下的一个C程序代码段，这段程序只是简单地将文本“tesr”拷
贝到一个10字节的字符数组。
#include 
int main (int argc, char **argv)
L
char buffer[10]:
strcpy(buffer,“test"):
下面，考虑同样的代码示例，该段代码示例经过了修改，允许用户的输入被拷贝到字符
数组。
#include 
int main (int argc,char *argv)
char buffer[10]:
strcpy(buffer,argv[1]);
上面的两段代码都使用了strcpy（）例程将数据拷贝到一个基于栈的缓冲区。在C/C++编程