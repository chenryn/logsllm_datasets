    #            - item1
    #            - item2
    # Or
    #            myList
    #              - item1
    #              - item2
    indent-sequences: whatever
```
该配置覆盖了`yamllint`，因此在添加列表条目时，它不会强制一种特定的缩进方法。由`indent-sequences: whatever`线配置。创建此文件并对留言簿再次运行摘要将消除之前看到的缩进错误:
```
$ helm template my-guestbook guestbook | yamllint -
```
在本节中，我们讨论了如何使用`helm template`和`helm lint`命令验证 Helm 图表的本地渲染。然而，这实际上并没有测试你的图表的功能或者应用使用你的图表创建的资源的能力。
在下一节中，我们将学习如何在一个实时的 Kubernetes 环境中创建测试来测试你的 Helm 图表。
# 在实时集群中测试
创建图表测试是开发和维护 Helm 图表的重要部分。图表测试有助于验证图表是否按预期运行，并且有助于防止图表添加功能和修复后出现倒退。
测试包括两个不同的步骤。首先，您需要在图表的`templates/`目录下创建包含 helm.sh/hook`: test`注释的`pod`模板。这些`pods`将运行测试图表和应用功能的命令。接下来，您需要运行`helm test`命令，该命令启动一个`test`钩子，并使用前面提到的注释创建资源。
在本节中，我们将学习如何通过向留言簿图表添加测试来在实时集群中进行测试，继续您在上一章中创建的图表的开发。作为参考，您将创建的测试可以在位于[https://github . com/Packt publishing/-Learn-Helm/tree/master/Helm-charts/charts/guest book](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)的 Packt 存储库中的留言簿图表中查看。
首先在留言簿图表的`templates/`目录下添加`test/frontend-connection.yaml`和`test/redis-connection.yaml`文件。请注意，图表测试不必位于`test`子目录下，但是将它们保留在那里是一种很好的方法，可以让您的测试有条不紊，并与主图表模板分开:
```
$ mkdir $GUESTBOOK_CHART_DIR/templates/test
$ touch $GUESTBOOK_CHART_DIR/templates/test/frontend-connection.yaml
$ touch $GUESTBOOK_CHART_DIR/templates/test/backend-connection.yaml
```
在本节中，我们将用逻辑填充这些文件，以验证它们相关的应用组件。
现在让我们开始编写测试，因为 ir 占位符已经被添加。
## 创建图表测试
大家还记得，留言簿图表由一个 Redis 后端和一个 PHP 前端组成。用户在前端的对话框中输入消息，消息被保存到后端。让我们编写几个测试，确保安装后前端和后端资源都可用。我们将从检查 Redis 后端可用性的测试开始。将以下内容添加到图表的模板/测试/后端-connection.yaml 文件中(该文件也可以在 Packt 存储库中查看，网址为 https://github . com/PackPublishing/-Learn-Hem/blob/master/Hem-charts/charts/guest book/templates/test/后端-connection.yaml):
![Figure 6.3 – The HTTP request to the Guestbook service ](img/Figure_6.3.jpg)
图 6.3 -留言簿 Helm 图表的后端连接测试
该模板定义了将在测试生命周期挂钩期间创建的 Pod。该模板中还定义了一个钩子删除策略，该策略指示何时应该删除以前的测试盒。如果我们将要创建的测试需要以任何顺序运行，您也可以添加挂钩权重。
containers 对象下面的 args 字段显示了测试将基于的命令。它将使用 redis-cli 工具连接到 redis 主机，并运行命令 MGET 消息。留言簿前端设计用于将用户输入的消息添加到名为“消息”的数据库键中。这个简单的测试旨在检查是否可以连接到 Redis 数据库，它将返回用户通过查询 messages 键输入的消息。
PHP 前端也应该进行可用性测试，因为它是应用面向用户的组件。将以下内容添加到 templates/test/front-connection . YAML 文件中(这些内容也可以在位于 https://github . com/Packt publishing/-Learn-Helm/blob/master/Helm-charts/charts/guest book/templates/test/front-connection . YAML 的 Packt 存储库中查看)。
![Figure 6.4 - The frontend connection test for the Guestbook Helm chart ](img/Figure_6.4-1.jpg)
图 6.4 -留言簿 Helm 图表的前端连接测试
这是一个非常简单的测试，对留言簿服务运行一个 HTTP 请求。发送到服务的流量将在留言簿前端实例之间进行负载平衡。该测试将检查负载平衡是否成功执行，以及前端是否可用。
现在，我们已经完成了图表测试所需的模板。请注意，这些模板也可以通过 helm template 命令在本地呈现，并使用 helm lint 和 yamllint 进行链接，如本章前面部分所述。开发自己的 Helm 图表时，您可能会发现这对更高级的测试用例很有用。
既然已经编写了测试，我们将继续在 Minikube 环境中运行它们。
## 运行图表测试
为了运行图表的测试，图表必须首先使用`helm install`命令安装在 Kubernetes 环境中。因为所编写的测试设计为在安装完成后运行，所以在安装图表时可以使用`--wait`标志，以便更容易确定 Pod 何时准备就绪。运行以下命令安装留言簿图表:
```
$ helm install my-guestbook $GUESTBOOK_CHART_DIR -n chapter6 --wait
```
图表安装好后，可以使用`helm test`命令执行`test`生命周期挂钩，创建测试资源。`helm test`命令的语法如下所示:
```
helm test [RELEASE] [flags]
```
对`my-guestbook`释放运行`helm test`命令:
```
$ helm test my-guestbook -n chapter6
```
如果您的测试成功，您将在输出中看到以下结果:
```
TEST SUITE:     my-guestbook-test-frontend-connection
Last Started:   Tue Jan 28 18:50:23 2020
Last Completed: Tue Jan 28 18:50:25 2020
Phase:          Succeeded
TEST SUITE:     my-guestbook-test-backend-connection
Last Started:   Tue Jan 28 18:50:25 2020
Last Completed: Tue Jan 28 18:50:26 2020
Phase:          Succeeded
```
当运行您的测试时，您也可以使用`--logs`标志将您的日志从测试的执行打印到命令行。
使用此标志再次运行测试:
```
$ helm test my-guestbook -n chapter6 --logs
```
除了每个测试的相关容器日志之外，您将看到与以前相同的测试摘要。以下是前端连接测试日志输出的第一部分:
```
POD LOGS: my-guestbook-test-frontend-connection
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
    Guestbook
```
以下是后端连接`test`日志输出:
```
POD LOGS: my-guestbook-test-backend-connection
```
此测试的日志将显示为空，因为您尚未在留言簿前端输入任何消息。您可以在从前端添加消息后再次运行测试，以确保消息持久。当您运行安装和`test`套件时，会打印确定留言簿前端网址的说明。
这些说明再次显示在这里:
```
export IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')
export PORT=$(kubectl get svc my-guestbook -n chapter6 -o jsonpath='{.spec.ports[0].nodePort}')
echo http://$IP:$PORT
```
从浏览器访问前端后，从留言簿应用添加消息。
下面的截图显示了一个示例:
![Figure 6.4 – The Guestbook application’s frontend ](img/Figure_6.4.jpg)
图 6.4-1–留言簿应用的前端
添加消息后，再次运行`test`套件，提供`--logs`标志以显示测试日志。您应该能够通过观察后端连接`test`日志输出来验证此消息是否已添加:
```
$ helm test my-guestbook -n chapter6 --logs
```
以下是显示后端连接`test`日志输出的片段。您可以验证消息是否被保存到了 Redis 数据库:
```
POD LOGS: my-guestbook-test-backend-connection
,Writing Helm charts is fun!
```
在这一节中，我们编写了简单的测试，总体来说，对图表的安装进行了冒烟测试。这些测试到位后，我们将对做出更改和向该图表添加功能更有信心，前提是图表测试在每次修改后运行，以确保功能得到保留。
在下一节中，我们将讨论如何通过利用名为`ct`的工具来改进测试过程。
# 用图表测试项目改进图表测试
上一节写的测试已经足够测试留言簿应用是否能够成功安装。然而，有一些关键的限制是标准 Helm 测试过程所固有的，需要指出。
首先要考虑的限制是测试图表值中可能出现的不同排列的难度。由于`helm test`命令不能修改您的版本值，使其超出安装或升级时设置的值，因此针对不同的值设置运行`helm test`时，必须遵循以下工作流程:
1.  用一组初始值安装图表。
2.  违背你的释放运行`helm test`。
3.  删除您的版本。
4.  用一组不同的值安装图表。
5.  重复*步骤 2* 至*步骤 4* ，直到大量的价值可能性被测试。
除了测试不同的值排列，您还应该确保在修改图表时不会出现回归。在测试图表的较新版本时，防止回归的最佳方法是使用以下工作流程:
1.  安装以前的图表版本。
2.  将您的版本升级到较新的图表版本。
3.  删除版本。
4.  安装较新的图表版本。
应对每组值排列重复此工作流程，以确保没有回归或预期的突破性变化。
这些过程听起来很乏味，但想象一下当维护多个不同的 Helm 图表时，图表开发人员会承受额外的压力和维护，在这些图表中应该进行仔细的测试。当维护多个 Helm 图表时，图表开发人员倾向于采用`git`单回购设计。当多个不同的工件或模块包含在同一个存储库中时，存储库被认为是 monorepo。
在 Helm 图表的情况下，单一回购可能具有以下文件结构:
```
helm-charts/
  guestbook/
    Chart.yaml
    templates/
    README.md
    values.yaml
  redis/           # Contains the same file structure as 'guestbook'
  wordpress/       # Contains the same file structure as 'guestbook'
  README.md
```
维护良好的单一回购中的 Helm 图表应在修改时进行测试，以确保不会出现预期的突破性变化。修改图表时，其`Chart.yaml`文件中的`version`字段也应根据正确的`SemVer`版本增加，以表示所做的更改类型。`SemVer`版本遵循`MAJOR.MINOR.PATCH`版本编号格式。
使用以下列表作为如何增加版本的指南:
*   如果要对图表进行重大更改，请增加`MAJOR`版本。突破性变更是指与以前的图表版本不向后兼容的变更。
*   如果您正在添加功能，但没有进行重大更改，则增加`MINOR`版本。如果您正在进行的更改与以前的图表版本向后兼容，则应该增加此版本。
*   如果您正在修补不会导致重大变更的 bug 或安全漏洞，请增加`PATCH`版本。如果更改与以前的图表版本向后兼容，则该版本应该递增。
如果没有写得很好的自动化，要确保图表在修改时得到测试，并且它们的版本是递增的，会变得越来越困难，尤其是在维护一个带有多个 Helm 图表的单一回购时。这一挑战促使 Helm 社区创建了一个名为`ct`的工具，围绕图表测试和维护提供结构和自动化。接下来我们将讨论这个工具。
## 介绍图表测试项目
可以在 https://github.com/helm/chart-testing T4 找到的图表测试项目被设计成在单回购中对照图表使用，以执行自动林挺、验证和测试。自动化测试通过使用`git`来检测针对目标分支更改的图表来实现。更改的图表应该经过测试过程，而未更改的图表不需要测试。
项目的命令行界面`ct`提供了四个主要命令:
*   `lint`:修改并验证已修改的图表
*   `install`:安装并测试已修改的图表
*   `lint-and-install`:修改、安装和测试图表
*   `list-changed`:列出已修改的图表
`list-changed`命令不执行任何验证或测试，而`lint-and-install`命令将`lint`和`install`命令组合到`lint`、`install`和`test`修改图表中。它还会检查您是否在每个图表“`Chart.yaml`文件中增加了修改后的图表“`version`字段，并且未通过版本未增加但内容已修改的图表的测试。这种验证有助于维护人员根据所做的更改类型严格增加他们的图表版本。
除了检查图表版本，图表测试还提供了为测试目的为每个图表指定多个值文件的能力。在调用`lint`、`install`和`lint-and-install`命令期间，图表测试循环通过每个测试`values`文件，以覆盖图表的默认值，并基于提供的不同值排列执行验证和测试。测试`values`文件写在一个名为`ci/`的文件夹下，以将这些值与图表的默认`values.yaml`文件分开，如下例文件结构所示:
```
guestbook/
  Chart.yaml
  ci/
    nodeport-service-values.yaml
    ingress-values.yaml
  templates/
  values.yaml
```
图表测试应用`ci/`文件夹下的每个`values`文件，而不管该文件使用的名称。你可能会发现根据被覆盖的值来命名每个`values`文件是有帮助的，这样维护者和贡献者可以理解文件内容。
您可能使用的最常见的`ct`命令是`lint-and-install`命令。下面列出了该命令用于清理、安装和测试在`git` monorepo 中修改的图表的步骤:
1.  检测已修改的图表。
2.  使用`helm repo update`命令更新本地 Helm 缓存。
3.  使用`helm dependency build`命令下载每个修改后图表的依赖关系。
4.  检查每个修改过的图表版本是否已经增加。
5.  对于在*步骤 4* 中评估为`true`的每个图表，在`ci/`文件夹下清除该图表和每个`values`文件。
6.  For each chart that evaluates to `true` in *step 4*, perform the following additional steps:
    在自动创建的命名空间中安装图表。
    通过执行`helm test`运行测试。
    删除命名空间。
    对`ci/`文件夹下的每个`values`文件重复上述步骤。
如您所见，该命令执行各种不同的步骤，通过在一个单独的名称空间中安装和测试每个修改的图表，为在`ci/`文件夹下定义的每个`values`文件重复该过程，来确保您的图表被正确地链接和测试。但是，默认情况下，`lint-and-install`命令不会通过从旧版本的图表执行升级来检查向后兼容性。可以通过添加`--upgrade`标志来启用该功能:
如果未指示中断变化，`--upgrade`标志通过运行以下步骤修改前一组步骤的*步骤 6* :
1.  在自动创建的命名空间中安装旧版本的图表。
2.  通过执行`helm test`运行测试。