# Hancitor Loader Unpacking Analysis

##### Translation Disclaimer
This article is a translation. The translation is provided for reference only, and the original text should be considered authoritative for specific content and meaning.

## Introduction
During a recent exchange with a foreign expert, I was captivated by the intricacies of malicious code, which inspired me to delve deeper into reverse engineering. Lately, I have frequently encountered the Hancitor loader on platforms like [malware-traffic-analysis](https://www.malware-traffic-analysis.net/) and [MalShare](https://malshare.com/). Despite the availability of unpacking techniques, I lacked the skill to manually unpack it. This analysis is based on my efforts to reproduce and understand a particular article.

## Reproducing the Unpacking of Hancitor.exe

**MD5 (Hancitor – Packed):** c07661bd4f875b6c6908f2d526958532  
**MD5 (Hancitor – Unpacked, Unmapped):** 5fe47865512eb9fa5ef2cccd9c23bcbf

### Entry Point Analysis
At the entry point, several `call` instructions were observed, with `call ebx` being particularly noteworthy. A breakpoint was set at this `call ebx`.

Before entering, we examined the `ebx` address, which contained shellcode generated via `mov` instructions. Attempting to convert it into a function using `p` failed, but most of the data was transformed into code, indicating that this was not a function but rather a jump to shellcode.

### Shellcode Execution
Upon entering the shellcode, numerous `jmp` and `jno` instructions were observed. Stepping through the code, we found that each assembly instruction performed a single `jmp`. Tracing further, we discovered that the shellcode dynamically generated the `VirtualProtect` function, which was called at address `00406126` via `call eax`.

After bypassing this call, we encountered a sequence of `XOR`, increment, and comparison operations. We set a breakpoint at the `jb` instruction, as the loop consistently jumps to `loc_4061BE`. Running until `jno loc_406137` allowed us to continue.

Next, we encountered a `jmp eax`, a classic shellcode jump. After the jump, the following code was generated (the `pusha` instruction may indicate the start of code restoration).

### Function Call and Address Jump
The `call $+5` at this point led to an address `0x40a316`, which contained simple obfuscation code. Continuing execution, we observed the `GetProcAddress` function being loaded, indicating the import process.

We skipped the import functions and set a breakpoint at `0040A63C`, the return address of the current function. Reaching the bottom of the function, we encountered an RC4 decryption routine. Although it was not immediately apparent, the pseudocode revealed it to be an RC4 algorithm. The program returned to address `004015F0`.

### Decryption and Decompression
The `sub_4011F0` function contained XOR-based decryption code, followed by a `DecompressBuffer` function. This is a sophisticated obfuscation technique used in malicious code.

Skipping these steps, we focused on the `sub_401610` function, which included the key functions `GetMessageA`, `TranslateMessage`, and `DispatchMessageA`. We set a breakpoint before the program exited to dump the decrypted code, which took some time.

Although the function did not return directly, it returned to `00401298`, indicating that the malware code had been decompressed. We needed to locate the memory where the decompressed code was stored. Using Process Hacker, we dumped the memory at `0x460000` and verified it against the unpacked memory from the article.

### Unmapping the Dumped Payload
To unmap the dumped payload, we used PE-Bear:
- Open the dumped file in PE-Bear.
- Go to the Section Headers option.
- Change the Raw Addr value to match the Virtual Addr.
- Adjust the Raw size of each section, except for the last `.reloc` section.

The exact reasons for these modifications are not fully understood, but they involve aligning the Raw Address and using 010 Editor to determine the correct Raw Size.

Finally, the import table was restored, and the dumped file was successfully repaired, allowing us to view the complete malicious code.

## Conclusion
This analysis was based on the following linked article. Thank you for reading.