# PDF调试技巧剖析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Acrobat因为缺少符号，导致分析漏洞成因以及利用编写难度增加。该文章主要介绍Plugin机制和Javascript引擎，并且会直接给出相关的一些结论，这些结论主要通过官方文档和源码，再通过类比找到关键点，反复调试验证得到。
## 1\. Acrobat的Plugin机制
Acrobat的SDK文档中详细介绍了Plugin机制，并且Acrobat软件本身的很多功能都是通过Plugin机制实现的（在Acrobat安装目录下的plug_ins目录下的api后缀文件，本质上是dll文件，比如支持Javascript的EScript插件，支持搜索的Search插件等）。
在Acrobat的Plugin机制里，最重要的概念就是HFT（Hot Function Table），一个HFT包含了一组特定的回调函数。
Acrobat主程序维护了一系列的HFT,并且在加载每一个Plugin时,会将core HFT传给Plugin，Plugin通过调用core
HFT里的回调函数可以获取其他HFT（既可以是Acrobat主程序的HFT，也可以是其他Plugin注册的HFT）,并注册自己的HFT以供主程序或者其他Plugin调用，示意图如下所示。
通过Acrobat的Plugin机制，结合Acrobat的SDK中的头文件，我们可以定位很多HFT的回调函数并且根据需要在IDA里重命名，变相识别符号。
接下来详细介绍定位各个HFT的步骤。
### 1.1 获取coreHFT-修改对应的回调函数名称
1) Windbg调试Acrobat的主程序AcroRd32.exe(勾选Debug Child Process
Also)，在调试器中断时通过sxe命令下断点（这里Plugin的名称可以自由选择，下图选择的是EScript.api）。
2) 直接运行直到对应的Plugin加载，将IDA中通过edit->Segments->Rebase
Program将IDA中的基地址和windbg中的基地址保持一致（AcroRd32.dll和其他需要的Plugin也进行同样的操作）。
3) 在IDA中阅读PluginMain函数，找到PISetupSDK回调函数，如下图所示。
4) 在PISetupSDK处下断点，第2个参数是指向PISDKData_V0200的指针，PISDKData_V0200的定义如下。
运行到断点处时，根据结构体定义获取coreHFT。
上图中，中间那段就是coreHFT的一系列回调函数，但是这是动态查看到的结果，不适合用于IDA重命名函数名，所以顺着coreHFT的第一个4字节得到了最后一行的0x299和0x64f3b580，得到0x64f3b580后，直接在AcroRd32.dll模块中跳转到对应地址（前提是AcroRd32.dll在IDA中的基地址已经和windbg中的一致），如下图所示。
注意，0x64f3b580是获取coreHFT的回调函数，所有HFT都有一个对应的回调函数，但是只要求这些函数最终返回HFT，而中间的过程不做任何要求，所以获取不同的HFT的回调函数实现可能不一样，但是都会有明显的标志可以帮助确认。
比如上图中的generateCoreHFT（自己命名的），实现如下图所示。
这里我已经根据Acrobat的SDK中的头文件CorProcs.h修改了对应函数的名称。删除了注释后的CorProcs.h内容如下图所示，可以对比上图，顺序是一一对应的。
到这里已经找到了获取coreHFT的回调函数，再根据CorProcs.h头文件得到了最核心的一些函数，其中最有用的2个函数是ASAtomGetString和ASExtensionMgrGetHFT。
通过ASAtomGetString函数，我们可以得到所有的Atom字符串及对应的Atom（本质上就是索引）。
通过ASExtensionMgrGetHFT函数，我们可以得到所有已经注册的HFT表，再结合Acrobat SDK中的头文件达到重命名函数的目的。
### 1.2 遍历所有的Atom字符串
在IDA中阅读ASAtomGetString函数，得到关键的全局变量地址，如下图所示，关键的全局变量地址为0x66723e78。
将该地址替换下面的windbg脚本中的寄存器@$t0。
    r @$t0 = 0x66723e78 ;
    r @$t0 = poi(@$t0) ;
    r @$t1 = poi(@$t0 + 0x1c) ; 
    r @$t0 = poi(@$t0 + 0x18) + 0x4 ;
    .for(r @$t2 = 0;@$t0 + @$t2 * 8  r @$t5 = 0x66723e78 ;
    0:000> r @$t0 = 0x667241E4;
    0:000> r @$t0 = poi(@$t0);
    0:000> r @$t1 = poi(@$t0) - 0x4;
    0:000> r @$t0 = poi(@$t0 + 0xc);
    0:000> r @$t5 = poi(@$t5) ;
    0:000> r @$t5 = poi(@$t5 + 0x18) + 0x4 ;
    0:000> .for(r @$t2 = 0; @$t2 <= @$t1; r @$t2 = @$t2 + 1) {r @$t3 = poi(@$t0 + @$t2 * 4);dd @$t3 L0x2;r @$t4 = low(poi(@$t3));r @$t6 = @$t5 + @$t4 * 8 ;da poi(@$t6) ;.echo ------------------------------------}
    08836ec8  00000299 64f3b580
    050325f0  "Core"
    ------------------------------------    
    08836ce8  0000029a 64f3b8e0
    05033248  "AcroSupport"
    ------------------------------------    
    08836c20  00001048 65527f40
    08836ae0  "ASExternalWarningHandler"
    ------------------------------------    
    08836b58  00001049 00000000
    05025940  "ASTest"
    ------------------------------------    
    0885e128  0000104b 00000000
    05087310  "ASThread"
    ------------------------------------    
    0885e4e8  0000029b 64f3bb80
    05032670  "Cos"
    ------------------------------------    
    ------------------------------------未显示完
接下来针对部分HFT演示一下通过Acrobat SDK中的头文件修改函数名称，所有的HFT操作都是类似的，不过有些HFT在Acrobat
SDK中不存在，Adobe没有公开。
**1.3.1 Cos HFT**
根据上面的结果，可以知道获取Cos HFT的回调函数为0x64f3bb80,在IDA中查看该函数，如下所示。
    ------------------------------------    
    0885e4e8  0000029b 64f3bb80
    05032670  "Cos"
    ------------------------------------
这个写法和之前的获取Core HFT类似，继续跟进sub_64F3BC6E,如下图所示（太长了不适合图片）。
    int sub_64F3BC6E()
    {
      _DWORD *v0; // esi@1
      int v1; // ST40_4@2
      int v3; // [sp+8h] [bp-10h]@2
      int v4; // [sp+Ch] [bp-Ch]@2
      int v5; // [sp+10h] [bp-8h]@2
      int v6; // [sp+14h] [bp-4h]@2
      v0 = TlsGetValue(dword_665BAF2C);
      if ( !v0[23] )
      {
        v3 = 16;
        v1 = v0[24];
        v4 = 109;
        v5 = 589824;
        v6 = 0;
        v0[23] = sub_64EC7CC0(v1, &v3);
      }
      sub_64F3C33F(1, sub_64F82ED0, 0);
      sub_64F3C33F(2, sub_64F13BA0, 0);
      sub_64F3C33F(3, sub_64F97C60, 0);
      sub_64F3C33F(4, sub_64F81580, 0);
      -----------未 显 示 完
      return sub_64F3C33F(109, sub_6536C480, 0);
    }
可以知道Cos HFT中有109个回调函数（上述没有显示完），此时再到Acrobat
SDK中查看头文件CosProcs.h，去除掉注释后得到如下结果，正好109个函数声明，和上图一一对应（这里懒没有在IDA中一一重命名）。
如果个数对应不上，应该是有重复的函数声明，在头文件中以#if #else #endif的形式存在，删除重复的就好了。
    NPROC(ASBool, CosObjEqual, (CosObj obj1, CosObj obj2))
    NPROC(CosType, CosObjGetType, (CosObj obj))
    NPROC(ASBool, CosObjIsIndirect, (CosObj obj))
    NPROC(ASBool, CosObjEnum, (CosObj obj, CosObjEnumProc proc, void *clientData))
    NPROC(CosDoc, CosObjGetDoc, (CosObj obj))
    NPROC(CosObj, CosNewNull, (void))
    NPROC(CosObj, CosNewInteger, (CosDoc dP, ASBool indirect, ASInt32 value))
    NPROC(CosObj, CosNewFixed, (CosDoc dP, ASBool indirect, ASFixed value))