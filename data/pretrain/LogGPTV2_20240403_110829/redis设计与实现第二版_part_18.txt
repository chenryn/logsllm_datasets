: sec_to_ms (expire_time_in_sec)
，这个整数保存了键所指向的数据库
图9-11设置生存时间和设置过
期时间的命令之间的转换
PEXPIRE
EXPIRE
√转换成
PEXPIREAT
转换成
第9章数据库·101
EXPIREAT
转换成
---
## Page 106
102·第二部分单机数据库的实现
任何重复对象，也不会浪费任何空间。
book 键对象。在实际中，键空间的键和过期字典的键都指向同一个键对象，所以不会出现
注意
中的所有键值对，而过期字典则保存了数据库键的过期时间。
expires
redisDb
dict
为了展示方便，图 9-12的键空间和过期字典中重复出现了两次 alphabet 键对象和
口第二个键值对的键为book键对象，值为1388556000000，这表示数据库键book
口 第一个键值对的键为alphabet 键对象，值为1385877600000，这表示数据库键
图9-12中的过期字典保存了两个键值对：
图9-12展示了一个带有过期字典的数据库例子，在这个例子中，键空间保存了数据库
)redisDb;
的过期时间为1388556000000（2014年1月1日零时）。
alphabet的过期时间为1385877600000（2013年12月1日零时）。
!!...
dict *expires;
Stringobject
Stringobject
Stringobject
Stringobject
Stringobject
"alphabet"
"book"
dict
"book"
dict
图 9-12带有过期字典的数据库例子
1388556000000
1385877600000
"hello world"
 Stringobject
Stringobject
Stringobject
Stringobject
Stringobject
 long long
 long long
"publisher"
 Hashobject
"author"
"name"
"a"
"Josiah L. Carlson"
"Redis in Action"
Stringobject
Stringobject
 Stringobject
 Stringobject
"Manning"
Listobject
u
Stringobject
---
## Page 107
（2014年2月1日零时），如图9-13所示。
过期字典将新增一个键值对，其中键为 message 
时间。
一个数据库键设置过期时间时，服务器会在数据库的过期字典中关联给定的数据库键和过期
expires
新添加-----
redisDb
def PEXPIREAT(key, expire_time_in_ms) :
以下是 PEXPIREAT命令的伪代码定义：
dict
举个例子，如果数据库当前的状态如图9-12所示，那么在服务器执行以下命令之后：
(integer) 1
redis> PEXPIREAT message 1391234400000
return 1
#过期时间设置成功
redisDb.expires [key] = expire_time_in_ms
在过期字典中关联键和过期时间
#如果给定的键不存在于键空间，那么不能设置过期时间
returno
Stringobject
Stringobject
Stringobject
Stringobject
Stringobject
 Stringobject
"alphabet"
"alphabet"
"message"
"message"
"book"
dict
dict
图9-13执行PEXPIREAT命令之后的数据库
1391234400000
1388556000000
1385877600000
"hello world"
Stringobject
Stringobject
Stringobject
Stringobject
 long long
 long long
long long
Hashobject
"author"
Stringobject
"Josiah L. Carlson"
键对象，
 Stringobject
"Redis in Action"
"Manning"
 Stringobject
 StringObject
Listobject
而值则为1391234400000
stringobject
第9章数据
"C"
库·103
---
## Page 108
104·第二部分单机数据库的实现
表数据库键book的过期时间已经被移除。
数据库将更新成图9-14所示的状态。
9.4.3
以下是PERSIST命令的伪代码定义：
可以看到，当 PERSIST命令执行之后，过期字典中原来的 book 键值对消失了，这代
expires
redisDb
def PERSIST(key) :
举个例子，如果数据库当前的状态如图 9-12所示，那么当服务器执行以下命令之后：
并解除键和值（过期时间）在过期字典中的关联。
PERSIST命令就是PEXPIREAT命令的反操作：PERSIST命令在过期字典中查找给定的
PERSIST命令可以移除一个键的过期时间：
dict
(integer) 1
redis> PERSIST book
(integer)
redis> TTL message
(integer) 1
redis> PERSIST message
(integer) 13893281
redis> TTL message
(integer) 1
移除过期时间
-1
Stringobject
Stringobject
Stringobject
 Stringobject
"alphabet"
"alphabet"
"message"
dict
dict
图9-14执行 PERSIST 之后的数据库
1385877600000
"hello world"
 Stringobject
Stringobject
Stringobject
Stringobject
Stringobject
long long
"publisher"
Hashobject
"author"
"name"
stringobject
"Josiah L. Carlson"
Stringobject
"Redis in Action"
Listobject
"Manning"
 Stringobject
Stringobject
"b"
 Stringobject
---
## Page 109
是这两个命令的伪代码实现：
余生存时间：
9.4.4计算并返回剩余生存时间
TTL 和 PTTL两个命令都是通过计算键的过期时间和当前时间之间的差来实现的，以下
TTL 命令以秒为单位返回键的剩余生存时间，而 PTTL 命令则以毫秒为单位返回键的剩
def TTL(key) :
def PTTL(key):
(integer) 8549001011
redis> PTTL alphabet
(integer) 8549007
(integer) 1
redis> PEXPIREAT alphabet 1385877600000
if ttl_in_ms < 0:
#获取以毫秒为单位的剩余生存时间
return (expire_time_in_ms
#过期时间减去当前时间，得出的差就是键的剩余生存时间
now_ms = get_current_unix_timestamp_in_ms()
#获得当前时间
if expire_time_in_ms is None:
#键没有设置过期时间
尝试取得键的过期时间
键不存在于数据库
#键的过期时间移除成功
善移除过期字典中给定键的键值对关联
昔如果键不存在，或者键没有设置过期时间，那么直接返回
return1
redisDb.expires.remove (key)
#处理返回值为-2 和-1的情况
return -1
returno
(su Mou
第9章数据库+105
---
## Page 110
106·第二部分单机数据库的实现
alphabet 来说:
则的话，键未过期。
9.4.5过期键的判定
alphabet 来说：
口另一方面，如果当前时间为1385964000000（2013年12月2日零时），那么调用
口如果当前时间为1383282000000（2013年11月1日零时），那么调用is
举个例子，对于一个过期时间为1385877600000（2013年12月1日零时）的键
可以用伪代码来描述这一过程：
2）检查当前UNIX 时间截是否大于键的过期时间：如果是的话，那么键已经过期；否
1）检查给定键是否存在于过期字典：如果存在，那么取得键的过期时间。
通过过期字典，程序可以用以下步骤检查一个给定键是否过期：
口另一方面，如果当前时间为1383282000000（2013年11月1日零时），那么对键
口如果当前时间为1383282000000（2013年11月1日零时），那么对键alphabet
举个例子，对于一个过期时间为1385877600000（2013年12月1日零时）的键
def is_expired(key) :
expired（alphabet）将返回 False，因为当前时间小于alphabet 键的过期时间。
期时间减去当前时间的差，然后将差值从毫秒转换为秒之后得出的。
alphabet 执行 TTL 命令将返回 2595600，这个值是通过计算 alphabet 键的过
去当前时间计算得出的：1385877600000－ 1383282000000=2595600000。
执行PTTL命令将返回2595600000，这个值是通过用a1phabet键的过期时间减
else:
now_ms = get_current_unix_timestamp_in_ms()
expire_time_in_ms = redisDb.expires.get (key)
#取得键的过期时间
else:
#检查当前时间是否大于键的过期时间
取得当前时间的 UNIX 时间藏
鲁键没有设置过期时间
return False
return True
return False
return ms_to_sec(ttl_in_ms)
#否，键未过期
return ttl_in_ms
：将毫秒转换为秒
键已经过期
in_ms is None:
---
## Page 111
事件。
现方式——无序链表，查找一个事件的时间复杂度为O(M)—并不能高效地处理大量时间
服务器应该优先将CPU时间用在处理客户端的命令请求上面，而不是用在删除过期键上面。
的响应时间和吞吐量造成影响。
间非常紧张的情况下，将CPU时间用在删除和当前任务无关的过期键上，无疑会对服务器
情况下，删除过期键这一行为可能会占用相当一部分CPU 时间，在内存不紧张但是CPU 时
可能快地被删除，并释放过期键所占用的内存。
9.5.1定时删除 
么时候会被删除呢？
何根据过期时间去判断一个键是否过期，现在剩下的问题是：如果一个键过期了，那么它什
9.5过期键删除策略
个命令稍微快一些。
查键是否过期的方法和 is_expired 函数所描述的方法一致，因为直接访问字典比执行一
注意
执行TTL命令，并且命令返回的值大于等于O，那么说明该键未过期。在实际中，Redis检
除此之外，创建一个定时器需要用到 Redis 服务器中的时间事件，而当前时间事件的实
例如，如果正有大量的命令请求在等待服务器处理，并且服务器当前不缺少内存，那么
另一方面，定时删除策略的缺点是，它对CPU时间是最不友好的：在过期键比较多的
定时删除策略对内存是最友好的：通过使用定时器，定时删除策略可以保证过期键会尽
因此，要让服务器创建大量的定时器，从而实现定时删除策略，在现阶段来说并不现实。
这个问题有三种可能的答案，它们分别代表了三种不同的删除策略：
经过上一节的介绍，我们知道了数据库键的过期时间都保存在过期字典中，又知道了如
实现过期键判定的另一种方法是使用TTL 命令或者PTTL命令，比如说，如果对某个键
在这三种策略中，第一种和第三种为主动删除策略，而第二种则为被动删除策略。
口 定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至
口 性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否
口定时删除：在设置键的过期时间的同时，创建一个定时器（timer），让定时器在键的
于要删除多少过期键，以及要检查多少个数据库，则由算法决定。
过期，如果过期的话，就删除该键；如果没有过期，就返回该键。
过期时间来临时，立即执行对键的删除操作。
时间。
is_expired(alphabet）将返回 True，因为当前时间大于 alphabet 键的过期
第9章数据库·107
---
## Page 112
108·第二部分单机数据库的实现
务器实际使用的是惰性删除和定期删除两种策略：通过配合使用这两种删除策略，服务器可
9.6
时长和执行频率。
9.5.3定期删除
放，那么造成的后果肯定是非常严重的。