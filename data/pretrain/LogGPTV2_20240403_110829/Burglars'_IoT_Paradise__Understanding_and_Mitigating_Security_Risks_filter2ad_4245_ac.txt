tId, which turns out to be completely realistic. Speciﬁcally,
our research shows that apparently, both device manufacturers
and IoT clouds are still unaware of the importance of keeping
ClientId safe, allowing us to acquire a victim’s ClientId in at
least two ways, as elaborated below.
• Making a guess. A ClientId is a sequence whose format
and semantics are determined by device manufacturers. It is
used by a client to establish a connection with the broker,
which either does not check its legitimacy at all or just inspects
its basic format (e.g., only letters and numbers are allowed).
When two clients connect with the same ClientId, the ﬁrst
connection will be disrupted from the broker as required by
MQTT. Exploiting this property, we developed a simple attack
to test the existence of a ClientId, by attempting to connect
to the broker using the token: if it is already used by a client
(connected app or device), the connections will fail repeatedly,
since the client is competing with the attacker. Otherwise, the
connection always goes through.
Key to the attack is efﬁcient search for the ClientIds already
assigned. We found that this is feasible since ClientId has
never meant to be a secret. Actually, the MQTT speciﬁcation
only requires that the ClientId is unique [4]. Thus, popular
IoT cloud platforms publicly propose to the customers (device
manufacturers) the ClientId constructions should be easy to
manage. For example, IBM (the creator of MQTT) advocates
the use of a device’s 48-bit MAC address as its ClientId to
ensure its uniqueness [34]. Even the device manufacturers are
unaware of the security implications of ClientId: they tend
to choose such insecure formats as serial number [35], [36],
which is often assigned incrementally [37]. As an example, the
format of an Apple product’s serial number is largely known,
with its main part specifying the attributes like manufacturing
factory, date, product model, etc., and only three digits for
differentiating the devices with the same attributes [38].
In our research, we found that the format information can
help us easily discover assigned sequences. For example,
for MAC address, its ﬁrst 24 bits are related to a speciﬁc
manufacturer, while the remaining 24 bits can be enumerated
to identify the sequences already in use [30]. Also when the
sequence involving a serial number, we can start from a known
ClientId to search its neighborhood, which likely hits other
tokens using by the devices connected to the IoT platform.
• Attacking a shared device. Once a device has been accessed
by a user (e.g., through hotel stay, apartment rent, etc.), its
ClientId is forever exposed to the person (through looking at
its MAC, serial number and snifﬁng network trafﬁc, etc.). If
the user is malicious, he can force the device to go ofﬂine from
time to time (e.g., a revenge from a disgruntled Airbnb tenant)
or even restore the current user’s MQTT session to steal her
sensitive messages (e.g., health condition and statistics, private
habits, etc.). Note that this can be done remotely through the
target device’s cloud platform.
Attack. We implemented PoC attacks on the AWS IoT cloud,
using our iRobot Roomba 690, a vacuuming robot, to show
that a large-scale DoS attack is realistic. Our attack identiﬁes
a set of likely real-world ClientIds for iRobot devices, which
contain serial numbers, through searching for the sequences in
the neighborhood of our device’s token. Our research shows
that the sequences are accurate enough for a large-scale attack.
found that
iRobot actually used its 16-digit
(e.g.,
3147C60043211234) as its ClientId, which allowed us
to continuously increase or decrease our device’s number to
generate potential ClientIds. Evaluating these tokens on the
AWS cloud could be disruptive to legitimate users. So we
resorted to a Web service discovered from our analysis of
the trafﬁc produced by the mobile app. The service is run
on
https://disc-prod.iot.irobotapi.com/robot/discover, which
helps an app ﬁnd out where its device’s broker locates across
different AWS servers around the world, given a ClientId.
By querying the service with the 200K IDs, we were able
to conﬁrm in 6 hours that over 10K of them are the ClientIds
for the devices already deployed. Note that our experiment
utilized only a single thread to the queries and more threads
and a longer time can potentially help us ﬁnd hundreds of
thousands of real ClientIds in a day.
from our own device, we
Speciﬁcally,
serial number
To verify that indeed the attack can happen on a real-
world cloud platform, we built a simple script to connect to
7
iRobot’s broker on AWS IoT ( https://a2uowfjvhio0fa.iot.us
-east-1.amazonaws.com), which authenticated to the broker
using our platform credential (the legitimate iRobot account
we registered), but made the connection with the ClientId
of a target device (another iRobot device of us). The attack
immediately caused the target to go ofﬂine. Further we tested
the scalability of the attack, successfully running our own
client (through a single platform identity) to make 2000
concurrent connections with our own AWS IoT broker. This
indicates that with a little more resources (scripts and platform
identities), a DoS attack affecting tens of thousands or more
devices is completely feasible.
The DoS weakness we discovered turns out to be gen-
eral, which has been conﬁrmed on other leading IoT clouds
including IBM, Tuya Smart, etc. In addition to iRobot, we
launched PoC attacks against our devices of Tuya Smart
and Suning Smart Living. Later in Section III-D, we further
show that leveraging another ﬂaw,
the attacker can easily
obtain the ClientIds of devices from more than a hundred
manufacturers [39] on the Suning IoT cloud.
Discussion. We believe that fundamentally, the security weak-
ness comes from the insecure practice for managing ClientIds.
The MQTT speciﬁcation [4] does not treat ClientId as a secret
in the ﬁrst place and even suggests it could be as short as
a single byte. More seriously, this problem has never been
identiﬁed and addressed when applying the protocol to the
potentially adversarial IoT communication. As evidence, even
though MQTT speciﬁes ClientId as an identity that represents
a client, no IoT cloud has seriously considered the token as
an identity like user ID, which is protected using various
authentication schemes. Further, in MQTT, ClientId also acts
like a web session cookie for restoring sessions. However,
little has been done by both IoT platforms and manufacturers
to make it a secret, as discovered in our research. Most
confusing to the IoT cloud platforms could be the co-existence
of platform identities, which indeed have been involved in
various authentication and authorization processes (e.g., two-
factor authentication, AWS cognito, SSO, etc.). However such
protection just ensures that only authenticated platform users
can establish MQTT connections, not that only authorized
users can claim ClientIds for the connections. As a result,
any authenticated user on the platform can use any ClientId.
Responsible disclosure. We reported our ﬁndings to all af-
fected vendors such as iRobot, Microsoft, IBM, Tuya, Baidu
and Suning, which all acknowledged the problem. Particularly,
Microsoft awarded us through their bug bounty program.
D. Authorization Mystery of MQTT Topics
Due to the lack of guidance and the unique adversar-
ial environment of IoT,
the necessity to protect messages
(Section III-A), sessions (Section III-B) and ClientId (Sec-
tion III-C) are unclear to IoT vendors. However, even for
MQTT entities that are clearly known to protect, such as
MQTT topics, we found their protection is inadequate: IoT
clouds take insecure shortcuts in protection, again due to
the lack of guidance for securely adopting MQTT, especially
in the adversarial environment of IoT; unsound description
of protected MQTT topics may also grant a malicious user
excessive access. In practice, such problems are found to be
highly damaging to both security and privacy.
Insecure shortcut in protecting MQTT topics. As intro-
duced earlier (Section II), IoT clouds add security control
missing in MQTT. In particular, IoT clouds control what
MQTT topics (associated with a speciﬁc device) a user is
permitted to publish or subscribe to. Real-world authoriza-
tion on IoT clouds that has to manage millions of users
and devices from thousands of manufacturers, can be highly
complicated, especially considering the commonplace user
privilege changes. For ease of MQTT adoption, we found IoT
clouds take shortcuts in building authorization. For example,
Suning’s (a Fortune Global 500 company [40]) IoT cloud
serving more than 100 brands [39], [41], permits the user
to subscribe to any MQTT topic he/she knows, based on an
implicit assumption that MQTT topics are conﬁdential.
However, such an assumption does not hold in the adver-
sarial environment of IoT. As introduced in Section II-C, IoT
adversary is oftentimes able to use the target device at least
once (e.g., in hotel rooms and even private homes), and thus
easily knows its topic (e.g., through trafﬁc analysis). Also, we
found device manufacturers tend to use an established unique
identiﬁer of the device as its MQTT topic, such as the device
serial number or MAC address, which are subject to brute-
force enumeration (Section III-C). Consequently, presenting
the topic of the target device, the adversary is able to subscribe
to all its messages without user consents. Such messages can
include highly sensitive or private information depending on
the devices, such as health statistics and conditions, purchasing
preference and history, personable habits, household relations,
etc.
Such privacy risks are introduced in the adversary envi-
ronment of IoT, which may not even exist in the original
usage scenarios of MQTT; for example, industrial proprietary
devices transmit telemetry over the satellite [42]. Again, our
ﬁnding shows that the security gap between the original and
more trusted MQTT environment and the IoT environment is
previously inadequately assessed and largely underestimated.
Further, in the absence of guidance and standard for securely
adopting MQTT in IoT environment, vendor-speciﬁc and un-
sound protection (like the Suning’s above) tends to happen in
the real world, considering the great number of IoT platforms
in the market [43].
Attack. We implemented a PoC attack using our HONYAR
Smart Plug IHC8340AL, with which we reverse-engineered
the trafﬁc between the Suning Smart Living mobile app and the
cloud, and found its MQTT topics. Presenting the topics, we
created a script and successfully subscribed to all subsequent
messages of the device even after the device was reset and
then used with another user account (i.e., representing the next
person to use the device who is the victim).
Expressive syntax of MQTT. A device may have multi-
8
ple associated topics (e.g., /deviceID/cmd for delivering
commands, and /deviceID/status for updating status).
For ease of use, the permitted user of a device can use a
wildcard character # or + to subscribe to multiple topics of
the device or even multiple devices. In our study, we found
that such expressive syntax of MQTT leaves tremendous space
for IoT clouds to unwittingly put user privacy under high
risks. As an example, the popular IoT cloud Suning Smart
Living failed to properly authorize subscriptions of MQTT
topics with wildcards. Speciﬁcally, any user of the platform
is able to subscribe to the universal # topic of the IoT
cloud, which by its deﬁnition in MQTT, means all MQTT
topics on the broker (effectively all devices under the IoT
cloud). Such a ﬂaw can leak various highly critical privacy
information of all IoT users on the cloud platform through
their IoT devices, such as personally identiﬁable information
(PII), health condition, household relation, personal habits, etc.
(see our PoC experiment below).
Surprisingly, such a problem tends to be general because
the ﬂexible MQTT syntax makes it subtle in practice to
soundly describe and interpret the resources to protect. Un-
sound resource description and interpretation in security poli-
cies practically allows the adversary to access unauthorized
resources. In the above Suning example, likely Suning intends
to allow the user only to access permitted topic described
such as deviceId/cmd in its security policy; however,
the requested wildcard-topic # can technically match the
permitted one in the policy, leading to the policy bypassing.
Such a class of problem was also conﬁrmed on AWS IoT.
Speciﬁcally, device manufacturers conﬁgure security policies
for their users and devices, which are then enforced by AWS.
We found that even a policy explicitly denies a user to access
a topic described such as deviceId/cmd, AWS failed to
interpret the protected target soundly and enables unauthorized
access: a malicious user is able to subscribe to deviceId/#
and receive messages from the protected topic. Apparently,
AWS failed to soundly interpret the resource description that
includes a wildcard and correlates it with the topic that should
be protected.
to easily permit
Not only IoT clouds failed to soundly deal with the ﬂexible
resource-description syntax, device manufacturers also made
similar mistakes. In particular,
the user
to access multiple topics of her device, we found iRobot
conﬁgures its security policy on AWS IoT with a (trail-
ing) wildcard like /[deviceModel]/[deviceId]/+.
Such a topic description in the policy is overly inclu-
sive and even allows a malicious iRobot user to create
an arbitrary topic that matches the path preﬁx, such as
/[deviceModel]/[deviceId]/ATTACK (note that the
deviceId and deviceModel are the Id and model of the
malicious user’s own device in the attack). This practically
provides a hidden C&C channel: the malicious user can pub-
lish messages to this hidden topic, and all bots can subscribe to
the topic and receive control commands, bearing the innocuous
MQTT trafﬁc to evade detection. Such a problem was inferred
through our reverse-engineering of the trafﬁc between our
iRobot mobile app and AWS IoT, and was conﬁrmed with
implement end-to-end attack
iRobot, although we did not
experiments for ethical reasons. Also interestingly, all
the
communication through the topic will be charged to iRobot
by AWS, because the broker that hosts the topic was deployed
by iRobot. More importantly, such a practical, hidden, and
money-saving C&C channel potentially has signiﬁcant real-
world impacts considering the recent devastating botnets such
as Mirai [44].
For the ﬁrst time, our ﬁndings show that to soundly describe
and interpret MQTT topics are highly error-prone in practice,
and in the adversarial environment of IoT, the mistakes can
lead to devastating security, privacy and even direct ﬁnancial
breaches. Again, our study shows that to securely build IoT
communication from the less protected MQTT protocol is
much more challenging than previously expected, without the
guidance of a standard that soundly considers IoT risks and
subtle MQTT resources.
PoC experiment. We performed PoC experiment
to vali-
date the above problem on Suning’s IoT cloud. The MQTT
communication was TLS-encrypted on port 1885 of Suning
Smart Living cloud’s endpoint. Through a simple script, we
authenticated our Suning account on the cloud and subscribed
to topic # (the universal topic of the platform). Through the
subscription, we received a vast number of privacy-critical
messages from smart locks, cameras, home-security moni-
tors, etc. Through a 3-week message collection (with IRB
approval), we found the potential adversary was able to in-
fer Suning users’ household/cohabitation relations, behavioral
habits, and even personally identiﬁable information (see details
in Section IV-B).
Also surprisingly, the leaked messages include ClientIds of
all devices under the cloud. Leveraging the ClientId-based
DoS attack introduced in Section III-C, the potential adversary
can easily kick arbitrary devices of arbitrary users ofﬂine;
considering the user and the device type (e.g., a health or
security monitor) can be identiﬁed from the message, the
potential security and even safety risks are signiﬁcant.
Responsible disclosure. We reported our ﬁndings to Suning,
AWS, and iRobot who all acknowledged the problems and
their severe security, privacy and ﬁnancial implications.
IV. MEASUREMENT
To understand the scope and magnitude of the design defects
found in our research, we conducted a measurement study
on eight leading IoT clouds. The study brings to light the
pervasiveness of these problems and their impacts, including
the cost for executing these attacks (such as gathering device
messages). Further we show that misleading guidance pro-
vided by the IoT clouds could contribute to the problematic
security designs and implementations on the IoT manufacturer
side.
A. Scope and Magnitude
Our measurement focused on leading IoT clouds that me-
diate devices of many high-proﬁle manufacturers, e.g., AWS
9
IoT Core [1], IBM Watson IoT [45], Alibaba Cloud IoT
Platform [46], Microsoft Azure IoT Hub [2], etc. (see Table I),
which all rely on MQTT (version 3.1.1, at the time of our
study) for their IoT communication. To assess each IoT cloud
platform, we registered their accounts, leveraged public de-
velopment documentation and SDKs, and built demo devices
and apps for exercising its MQTT-based IoT communication
and verifying its security protection against each problem
we discovered – identity management (ClientId hijacking,
see Section III-C), message authorization (Will Message and
Retained Message, see Section III-A), session management
(Section III-B) and topic authorization (Section III-D). Note
that, two of our studied cloud platforms do not publish their
SDKs (only available to paid device manufacturers), i.e., Tuya
and Suning; hence, we purchased a few IoT devices mediated
under the two to support our testing. Our measurement results
are summarized in Table I and elaborated as follows.
• Identity management. The majority of tested cloud platforms
suffered from the ClientId hijacking attack, including AWS,