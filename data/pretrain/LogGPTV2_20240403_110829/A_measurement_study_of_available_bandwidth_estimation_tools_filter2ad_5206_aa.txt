title:A measurement study of available bandwidth estimation tools
author:Jacob Strauss and
Dina Katabi and
M. Frans Kaashoek
A Measurement Study of Available Bandwidth Estimation
Tools ∗
Jacob Strauss
PI:EMAIL
Dina Katabi
PI:EMAIL
Frans Kaashoek
PI:EMAIL
MIT Computer Science and Artiﬁcial Intelligence Laboratory
ABSTRACT
Available bandwidth estimation is useful for route selection
in overlay networks, QoS veriﬁcation, and traﬃc engineer-
ing. Recent years have seen a surge in interest in available
bandwidth estimation. A few tools have been proposed and
evaluated in simulation and over a limited number of Inter-
net paths, but there is still great uncertainty in the perfor-
mance of these tools over the Internet at large.
This paper introduces Spruce, a simple, light-weight tool
for measuring available bandwidth, and compares it with
two existing tools, IGI and Pathload, over 400 diﬀerent In-
ternet paths. The comparison focuses on accuracy, failure
patterns, probe overhead, and implementation issues. The
paper veriﬁes the measured available bandwidth by com-
paring it to Multi-Router Traﬃc Grapher (MRTG) data and
by measuring how each tool responds to induced changes in
available bandwidth.
The measurements show that Spruce is more accurate
than Pathload and IGI. Pathload tends to overestimate the
available bandwidth whereas IGI becomes insensitive when
the bottleneck utilization is large.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network Monitoring
General Terms
Measurement, Experimentation, Performance
Keywords
Available bandwidth
∗
This research was conducted as part of the IRIS project
(http://project-iris.net/), supported by the National
Science Foundation under Cooperative Agreement No. ANI-
0225660, along with support from the Defense Advanced Re-
search Projects Agency (DARPA) and the Space and Naval
Warfare Systems Center, San Diego, under contract N66001-
00-1-8933.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’03, October 27–29, 2003, Miami Beach, Florida, USA.
Copyright 2003 ACM 1-58113-773-7/03/0010 ...$5.00.
1.
INTRODUCTION
Recent years have seen a strong interest in techniques
for estimating available bandwidth along an Internet path.
The path diversity in overlay networks creates a need for
estimating the available bandwidth over these paths as a
method for choosing the best route. Further, in an over-
lay, one can assume the cooperation of both the sender and
the receiver, which is necessary for most probing techniques.
Many available bandwidth estimation tools have emerged
such as Pathload [12], TOPP [18], PTR/IGI [9], Delphi [21],
and Pathchirp [22].
This paper introduces Spruce, a simple tool for estimat-
ing available bandwidth, and compares it with two existing
tools Pathload, and IGI. In comparison with previous work,
this paper provides the ﬁrst wide-scale Internet experiments
to evaluate current tools for measuring available bandwidth.
Reported experiments with IGI, Pathload, and TOPP have
been limited to a few Internet-wide paths [9, 12, 18]. In con-
trast, our measurements involve 400 diﬀerent Internet-wide
paths. We have collected our measurements using PlanetLab
nodes [2] and the RON testbed [4], targeting paths with a
variety of capacity, hop count, latency, load, and link tech-
nology.
The available bandwidth (ABW) at a link is its unused ca-
pacity. (See Figure 1 for the deﬁnitions used in this paper.)
Since, at any time, a link is either idle or transmitting pack-
ets at the maximum speed, the deﬁnition of the available
bandwidth ought to look at the average unused bandwidth
over some time interval T . Thus,
Ai(t, T ) =
1
T Z
t
T +t
(Ci − λi(t)) dt,
(1)
where Ai(t, T ) is the available bandwidth at link i at time
t, Ci is the link’s capacity, and λi is its traﬃc. The available
bandwidth along a path is the minimum available bandwidth
of all traversed links.
Spruce (Spread PaiR Unused Capacity Estimate) is a tool
for end hosts to measure available bandwidth. It samples the
arrival rate at the bottleneck by sending pairs of packets
spaced so that the second probe packet arrives at a bottle-
neck queue before the ﬁrst packet departs the queue. Spruce
then calculates the number of bytes that arrived at the queue
between the two probes from the inter-probe spacing at the
receiver. Spruce computes the available bandwidth as the
diﬀerence between the path capacity and the arrival rate at
the bottleneck.
Similarly to IGI [9] and Delphi [21], Spruce is designed
around the probe gap model (see §2), which assumes a sin-
Term
Capacity
Narrow link
Available bandwidth A link’s unused capacity
Tight link
Deﬁnition
The maximum rate at which packets can be transmitted by a link
The link with the smallest capacity along a path
The link with minimum available bandwidth along a path
Figure 1: The deﬁnitions for the terms: capacity, available bandwidth, narrow link and tight link. The tight
link may be diﬀerent from the narrow link along the path. For example, consider a two-link path that traverses
a T1 link with 1.5 Mb/s and a 10 Mb/s Ethernet. The narrow link along this path is the T1. But, it is quite
possible that the Ethernet is more congested and has less unused bandwidth than the T1, in which case, the
tight link is the 10 Mb/s Ethernet.
gle bottleneck. However, our experiments show that Spruce
works well in realistic environments and is robust against
deviations from this assumption.
The results of the measurements on the PlanetLab and
RON testsbeds can be summarized as follows:
(cid:127) Almost 70% of Spruce’s measurements had a relative
error smaller than 30%. Pathload and IGI experienced
larger errors.
(cid:127) Pathload consistently over- or under-estimated the avail-
able bandwidth, whereas IGI did not respond properly
to injected cross traﬃc and overestimated available
bandwidth on some paths.
(cid:127) Pathload generated between 2.5 and 10 MB of probe
traﬃc per measurement. In contrast, the average per-
measurement probe traﬃc generated by IGI is 130 KB
and that generated by Spruce is 300 KB.
2. DESIGN SPACE & RELATED WORK
Keshav’s work on packet pair [14] is the earliest attempt to
estimate the available bandwidth using measurements con-
ducted at the end hosts. Packet pair assumes Fair Queuing
in the routers and as a result cannot estimate the available
bandwidth in the current Internet.
Cprobe [6] is a pioneering tool for estimating the available
bandwidth using end-to-end measurements. Cprobe doesn’t
assume fair queueing. Instead of using a pair of packets,
cprobe sends a short train of ICMP packets and computes
the available bandwidth as the probe traﬃc divided by the
interval between the arrival of the last ICMP ECHO and the
ﬁrst ICMP ECHO in the train. A similar approach is used by
pipechar [13]. Dovrolis et al [7] show that these techniques
measure a metric called the Asymptotic Dispersion Rate
(ADR), which is related to the available bandwidth but not
the same.
The recent set of tools can be distinguished according to
the two main approaches underlying the estimation tech-
niques.
(cid:127) The probe gap model (PGM) exploits the infor-
mation in the time gap between the arrivals of two
successive probes at the receiver. A probe pair is sent
with a time gap ∆in, and reaches the receiver with a
time gap ∆out. Assuming a single bottleneck and that
the queue does not become empty between the depar-
ture of the ﬁrst probe in the pair and the arrival of
the second probe, then ∆out is the time taken by the
bottleneck to transmit the second probe in the pair
and the cross traﬃc that arrived during ∆in, as shown
Figure 2: The Probe Gap Model (PGM) for estimat-
ing available bandwidth.
∆in
in Figure 2. Thus, the time to transmit the cross traf-
ﬁc is ∆out − ∆in, and the rate of the cross-traﬃc is
× C, where C is the capacity of the bottle-
∆out−∆in
A = C ×(cid:18)1 − ∆out − ∆in
neck. The available bandwidth is:
(cid:19).
∆in
(2)
Spruce, IGI [9], and Delphi [21] are example tools that
use the gap model.
(cid:127) The probe rate model (PRM) is based on the
concept of self-induced congestion; informally, if one
sends probe traﬃc at a rate lower than the available
bandwidth along the path, then the arrival rate of
probe traﬃc at the receiver will match their rate at
the sender. In contrast, if the probe traﬃc is sent at a
rate higher than the available bandwidth, then queues
will build up inside the network and the probe traﬃc
will be delayed. As a result, the probes’ rate at the
receiver will be less than their sending rate. Thus, one
can measure the available bandwidth by searching for
the turning point at which the probe sending and re-
ceiving rates start matching. Tools such as Pathload
[12], Pathchirp [22], PTR [9], and TOPP [18] use the
probe rate model.
To cope with the burstiness of cross traﬃc, both the PGM
and PRM tools use a train of probe packets to generate a
single measurement.
Both the PGM and PRM approaches assume: 1) FIFO
queuing at all routers along the path; 2) cross traﬃc follows
a ﬂuid model (i.e., non-probe packets have an inﬁnitely small
packet size); 3) average rates of cross traﬃc change slowly
and is constant for the duration of a single measurement.
Further, the probe gap model assumes a single bottleneck
which is both the narrow and tight link for that path. These
assumptions are necessary for the model analysis but the
tools might still work even when some of the assumptions
do not hold [9].
The literature is rich in related work that does not di-
rectly estimate the available bandwidth. Paxson deﬁnes the
relative available bandwidth metric β, which indicates the
degree of congestion along the path but does not directly
provide an estimate of the available bandwidth. Pathchar
[10], bprobe [6], pchar [5], tailgating [15], nettimer [16], clink
[8], pathrate [7] are tools for estimating capacity. Treno [17],
and cap [3] estimate the TCP fair rate along a path.
Finally, Zhang et al. [23] examined stationarity of TCP
throughput measurements over many Internet paths. They
found that in many cases, TCP rates varied by less than
a factor of three over the course of an hour or more. Pax-
son [20] found that routes between Internet hosts are often
stable on scales ranging from hours to days. These two re-
sults are important because they indicate that we can repeat
experiments back to back and expect similar results.
3. SPRUCE
Spruce is based on the probe gap model (PGM) described
in §2. Like other PGM tools [21, 9], Spruce assumes a single
bottleneck that is both the narrow and tight link along the
path (see deﬁnitions in Figure 1). The results from Inter-
net measurements reported in §4 and §5 show that Spruce
is fairly accurate in realistic Internet settings, where this
assumption might not hold.
3.1 Design
Spruce computes the available bandwidth according to
Equation 2 (see §2), which requires 3 parameters: C, ∆in,
and ∆out. Spruce assumes C is known, sets ∆in at the
sender, and measures ∆out at the receiver.
At the sender, Spruce sets the intra-pair time gap, ∆in,
to the transmission time of a 1500B data packet on the bot-
tleneck link. This choice ensures that the queue does not
empty between the departures of the two probe packets in
a pair, which is a requirement for Equation 2.
At the receiver, Spruce measures ∆out, the transmission
time of both cross traﬃc and a 1500B probe. With this infor-
mation and a known capacity for the bottleneck link, Spruce
then calculates the number of bytes that arrived at the queue
between the two probes in a pair from the inter-probe spac-
× C, where C is the capacity of the bottle-
ing as ∆out−∆in
neck. Plugging these numbers into Eq. 2, gives Spruce one
sample measurement of the available bandwidth.
∆in
To improve accuracy of the estimate, Spruce performs a
sequence of probe-pair measurements and reports the av-
erage. Spruce sets the inter-gap time between two probe
pairs to the output of an exponentially distributed func-
tion, whose average τ is much larger than ∆in, resulting
in a Poisson sampling process. This decision is appealing for
two reasons. First, for a simple model which assumes a single
bottleneck and non-ﬂuid cross-traﬃc (i.e., no cross traﬃc or
close to capacity cross traﬃc), a sequence of measurements
according to a Poisson sampling process sees the average
cross traﬃc rate.
Second, Poisson sampling ensures that Spruce is non-intru-
sive. In particular, sending a sequence of packet pairs instead
of a packet train allows us to control the inter-pair gap in-
dependently from the intra-pair gap. We use a large inter-
pair gap τ to make Spruce non-intrusive. Other tools which
send packet trains at high peak rates may disturb concur-
rent TCP ﬂows even though each train is of short duration.
Spruce computes the available bandwidth at time t as the
average of the last K sample measurements. The default
value for K is 100.
3.2 Implementation
Spruce consists of separate user-level sender and receiver
programs. The sender takes as arguments the DNS name of
the receiver, and the known capacity of the path. We have
tested Spruce on Linux 2.4.19 and FreeBSD 4.7 systems.
The Spruce sender sends a series of pairs of 1500B UDP
packets. Spruce sets the intra-pair gap to the transmission
time of a 1500B packet on the path’s narrow link. The sender
adjusts the average inter-pair gap to ensure that the probe
rate is the minimum of 240Kb/s and 5% of the path capacity.
For example, on a 1.5 Mb/s path, the average inter-pair gap
is set to 320 ms, resulting in a probe rate of 75 Kb/s.
Since the gaps between two packets in a pair can be small,
the sender program reads the system clock in a polling loop,
not releasing the processor voluntarily until the pair has
been transmitted. If the operating system reschedules the
sender program between two packets of a pair, the program,
when it receives the processor again, gives up sending the
second packet, and restarts.
The receiving kernel timestamps each received packet us-
ing the SO TIMESTAMP socket option. The spruce receiver
calculates ∆out using the timestamps, and computes an es-
timate of the available bandwidth on that path using Eq. 2.