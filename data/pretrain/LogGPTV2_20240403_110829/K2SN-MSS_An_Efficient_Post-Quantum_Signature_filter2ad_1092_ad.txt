Auth as
y′
l, i2
y′
l, i−1
2
= SWIFFTkl, i2
(Merge(y′
where i = 0 (mod 2),
l +1,i , Auth[h − l]) ⊕ vl, i2 ),
= SWIFFTkl, i−1
2
(Merge(Auth[h − l], y′
l +1,i ) ⊕ vl, i−1
2 ),
where i = 1 (mod 2),
(9) If y′
where Auth[h − l] denotes the (h − l )-th node of the Auth.
0,0 = y0,0 (where y0,0 is the published root of the MSS
Merkle tree as a part of PK ), then Accept, else Reject.
probability ϵ against K2SN-MSS after 2h query in time τ . The upper
bound of ϵ is
InSecMM-SPR (H , 2h, 2h (1 + 2ℓ ))
ϵ ⩽
′ = (1 − 2−2n − 2−m )(1 − 2−2n ) · max
ϵ
where q1, q ≤ 2h, and q2 ≤ 2h+ℓ − 1 respectively.
ϵ′
(cid:40)
, where
2−2h2−2(h+ℓ), (1 − 2−2h )2−2(h+ℓ)
(cid:41)
.
Proof. Our security derivation is game-based derivation. Let
A is a PPT adversary who has the success probability of ϵ after
making q queries in time τ. Let B be another PPT algorithm which
xxx, yyy, zzz
Sabyasachi Karati and Reihaneh Safavi-Naini
tries to find a second preimage from a target list of tuples (xi , yi , ki )
with yi = Hki (xi ). B divides this list in two lists of lengths q1 and
q2 where q1 ⩽ 2h and q2 < 2h+ℓ. B uses A as a subroutine. Let,
(1) the tuples of the list of length q1 be (x
(2) other q2 tuples be (xs
i , ys
i ).
i , ks
p
i , y
p
i , k
i ), and
p
Let T = 2h and t = 2ℓ. The security game has three phases: (i) Setup
Phase, (ii) Query Phase, and (iii) Answer Phase. The description of
the phases are given below.
(1) Setup.
p
i
(b) B sets each k
(a) B chooses q1 distinct values uniformly at random from
{0, 1, . . . ,T − 1} and let this list be Γ = {c0, c1, . . . , cq1−1}.
Each ci of Γ denotes the ci-th instance of KSN-OTS.
as the hash key of the ci-th instance of
KSN-OTS. For the remaining KSN-OTS, it chooses hash
keys uniformly at random.
(c) Let (SK i , PK i ) be the secret and public key pair of i-th
instance of KSN-OTS. Now B chooses the SK i uniformly
at random and computes PK i.
(d) B chooses q1 values uniformly at random from {0, 1, . . . , t−
1} and and let this list be Ψ = {d0, d1, . . . , dq1−1}. Each el-
ement di of Ψ denotes the di-th component of the secret
key and public key of ci-th instance of KSN-OTS.
(e) B then replaces the di-th component secret key and public
respec-
key of ci-th instance of KSN-OTS by x
and y
p
i
tively.
(f) B chooses q2 nodes from authentication Merkle tree de-
noted by their positions as (ai , bi ) where ai denotes the
height in the tree and bi denotes the bi-th node at height ai
from left. ai ∈R {0, 1, . . . , h+ℓ−1} and bi ∈R {0, 1, . . . , 2ai−
1} such that no two (ai , bi ) pairs are the same. Let the list
be ϒ = {(a0, b0), (a1, b1), . . . , (aq2−1, bq2−1)}.
(g) B sorts the (ai , bi ) pairs by the increasing values of ai
and let the sorted list be (a′
i ). Now if there are multiple
nodes with same height, then sort them by bi. Let the
sorted list be ϒ′ = {(a′
0, b′
1, b′
q2−1)}.
(h) B then constructs the authentication Merkle tree in the
i , b′
0), (a′
1), . . . , (a′
q2−1, b′
p
i
i , b′
following fashion:
(i) The leaf nodes of the Merkle tree are the components of
the PK i for 0 ⩽ i ⩽ 2h − 1. All the leaves are at height
h + ℓ where the height of the root node is 0.
(ii) B chooses the hash keys and the random pads uniformly
at random for all the nodes except the node (a′
i )s of
the Merkle tree.
(iii) From the leaf nodes, B starts constructing the tree upto
0−1. Except the nodes (a′
height a′
i , b′
i ) ∈ ϒ′ who has the
same height as a′
0, B computes all the nodes of the layer
0 normally. For the nodes (a′
a′
i ) ∈ ϒ′ with a′
i , b′
= a′
0,
from the target list of
it sets the value of ya′
as ys
j
the second-preimage, hash key as ks
and computes the
j
random pad as
j ⊕ (Merge(ya′
va′
i,b′
because we know that ys
j
+1,2b′
+1,2b′
= SWIFFTk s
0, B continues to compute
the authentication Merkle tree faithfully until the next
(iv) After completing the layer a′
+1)),
i
j ).
(xs
= xs
, ya′
i,b′
i
i
i
i
i
i
j
in the list ϒ′ and repeats the step (iii) for new
height a′
a′
i
.
(i) After completing the construction of the MSS tree, B
i
publishes all the hash-key and the random pads along with
positions of the nodes for which they have been used and
the root of the MSS tree.
(2) Query.
(a) B answers q queries of A.
(b) Let the set of messages be {M0, M1, . . . , Mq−1}, where Mi
is the message of i-th query.
(c) B returns the signature si = (i, σi , PK i , Authi ) corre-
sponding to the message Mi under the i-th instance of
KSN-OTS.
p
i∗ , k
p
i∗ , y
for all 0 ⩽ i ⩽ q − 1.
(3) Answer.
(a) In this phase A returns (M∗, s∗) where (M∗, s∗) (cid:44) (Mi , si )
(b) Let s∗ = (i∗, σ∗, PK ∗, Auth∗).
(c) If K2SN.Verify(M∗, s∗) = 1, then Continue, else failure.
(d) If i∗ ∈ Γ, there are three possibilities:
(i) M∗ = Mi∗, which implies s∗ (cid:44) si∗. This case has also
two different situations.
(A) (PK ∗, Auth∗) = (PK i∗ , Authi∗ ): This implies forgery
of the i∗-th instance of KSN-OTS.
• If di∗ ∈ BM∗, then B computes the second preimage
i∗ ) and returns it.
of (x
p
• elseif di∗ (cid:60) BM∗, then B returns failure.
(B) (PK ∗, Auth∗) (cid:44) (PK i∗ , Authi∗ ): This implies that
B found at least one collision during the verification
of PK ∗ under Auth∗.
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and the B found a new image for the
node which is different from the value used to com-
pute the tree, then B found a second-preimage for
the node yai,bi
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and its image is the same as the value
used to compute the tree, then B returns failure.
(ii) M∗ (cid:44) Mi∗, but s∗ = si∗. This implies forgery of the i∗
instance of KSN-OTS.
(A) If di∗ ∈ BM∗, then B computes the second preimage
(B) As di∗ (cid:60) BM∗, then B returns failure.
(iii) M∗ (cid:44) Mi∗, but s∗ (cid:44) si∗. This case has also two different
situations.
(A) (PK ∗, Auth∗) = (PK i∗ , Authi∗ ): This implies forgery
of the i∗ instance of KSN-OTS.
• If di∗ ∈ BM∗, then B computes the second preimage
i∗ ) and returns it.
of (x
p
• else if di∗ (cid:60) BM∗, then B returns failure.
(B) (PK ∗, Auth∗) (cid:44) (PK i∗ , Authi∗ ): This implies that
B found at least one collision during the verification
of PK ∗ under Auth∗.
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and then B found a new image for
the node which is different from the value used to
i∗ ) and returns it.
p
of (x
p
i∗ , y
p
i∗ , y
p
i∗ , k
p
i∗ , k
.
K2SN-MSS: An Efficient Post-Quantum Signature (Full Version)
xxx, yyy, zzz
.
(e) If i∗ (cid:60) Γ, there are three possibilities:
compute the tree, then B found a second-preimage
for the node yai,bi
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and its image is the same as the value
used to compute the tree, then B returns failure.
(i) M∗ = Mi∗ which implies s∗ (cid:44) si∗. This case has also
two different situations.
(A) (PK ∗, Auth∗) = (PK i∗ , Authi∗ ): This implies forgery
of the i∗ instance of KSN-OTS. Then B returns fail-
ure.
(B) (PK ∗, Auth∗) (cid:44) (PK i∗ , Authi∗ ): This implies that
B found at least one collision during the verification
of PK ∗ under Auth∗.
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and then B found a new image for the
node which is different from the value used to com-
pute the tree, then B found an second-preimage
for the node yai,bi
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and its image is the same as the value
used to compute the tree, then B returns failure.
(ii) M∗ (cid:44) Mi∗, but s∗ = si∗. This implies forgery of the i∗
instance of KSN-OTS. Then B returns failure.
(iii) M∗ (cid:44) Mi∗, but s∗ (cid:44) si∗. This case has also two different
situations.
(A) (PK ∗, Auth∗) = (PK i∗ , Authi∗ ): This implies forgery
of the i∗ instance of KSN-OTS. Then B returns fail-
ure.
(B) (PK ∗, Auth∗) (cid:44) (PK i∗ , Authi∗ ): This implies that
B found at least one collision during the verification
of PK ∗ under Auth∗.
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and then B found a new image for
the node which is different from the value used to
compute the tree, then B found a second-preimage
for the node yai,bi
• If a node for any (ai , bi ) ∈ ϒ got calculated during
verification and its image is the same as the value
used to compute the tree, then B returns failure.
.
.
Now we compute the success probability of B.
• Case 3.d: As the elements of the list Γ is chosen at random,
then the probability of that i∗ ∈ Γ is q1/2h. Now we analyze
the three different cases under this situation.
– Case 3.d.i: There are 2m (m denotes the length of the mes-
sage space in bits) possible combinations of the messages
and messages space is uniformly random. Therefore, the
probability of M∗ = Mi∗ is 2−m. Case A happens with
probability smaller than 2−2n. Because the min-entropy
of the distribution of σ is at least 2−2n [24, 40] and there-
fore, the probability that the A will get another σ∗ is at
most 2−2n. If case A happens, then di∗ ∈ 1CF F (M∗) has
probability 1/2 and then B found a second-preimage of
the (xdi∗ , ydi∗ , kdi∗ ) of the q1 targets. Notice that the case
A and B are complementary to each other and then B hap-
pens with at least probability (1 − 2−2n ) [13]. In case of B,
there must be one call to SWIFFT between the KSN-OTS
public key and the root node where the output for the
forgery by the pigeonhole principle and the correct signa-
ture agree for the first time and let the node be (a∗, b∗) ∈ ϒ.
As the nodes of ϒ are distributed uniformly at random over
the tree, the probability that collision happens exactly at
the node (a∗, b∗) is q2/2h+ℓ −1. As the input data depends
on previously computed outputs of SWIFFT, it must dif-
fer. Hence, for challenge pair (ya∗,b∗ , ka∗,b∗ ), the input to
this call to SWIFFT is a second preimage for xa∗,b∗, that
B returns breaking MM-SPR of SWIFFT. Notice that all
the events under Case 3.d.i are mutually exclusive. Hence
maximum success probability of B under case 3.d.i is