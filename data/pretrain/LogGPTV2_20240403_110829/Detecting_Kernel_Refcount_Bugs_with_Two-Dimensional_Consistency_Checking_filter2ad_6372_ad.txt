by two reasons. First, 41 of them do not meet the requirement
of IPP (inconsistent path pair) while RID only captures the in-
consistent refcount change behaviors on IPP. Second, refcount
primitive APIs are used in the left 9 bugs instead of refcount
wrappers, which are out of the analysis scope of RID.
Bugs Missed by CID. For the 6 bugs that are missed by CID,
we conclude three causes. First, 3 bugs are missed due to the
implicit control ﬂow (e.g., queue work mechanism, indirect
function call) between the INC/DEC functions and their callers.
Second, 1 bug is missed because developers do not use ref-
count primitive APIs (e.g., they directly use refcount ++) to
manipulate refcount ﬁelds. Third, there are 2 bugs whose INC
functions have no return value and have less than three callers.
Therefore, neither INC-DEC nor DEC-DEC consistency check-
ing detects these bugs. Note that the 2 bugs can be detected
by RID because they meet the requirements of IPP.
After comparing CID with RID, we conclude that both RID
and CID incur high FP rate (>70%) due to the imprecise static
analysis, and their different bug detection strategies lead to
discrepant bug detection capabilities. From the design, the
two-dimensional consistency checking helps CID detect bugs
in a wider scope. As a result, CID is able to detect signiﬁcantly
more bugs.
6.6 Evaluating Refcount Field Identiﬁcation
A key contribution of CID is its systematical identiﬁcation of
refcount ﬁelds. We also evaluate the effectiveness of this part.
In all, CID identiﬁes 792 refcount ﬁelds from the Linux kernel.
The detailed results are presented in Table 6. It is interesting
to ﬁnd that not all refcount_t and kref ﬁelds are refcount
ﬁelds. We manually analyze 11 refcount_t ﬁelds and 18
kref ﬁelds that are identiﬁed as non-refcount ﬁelds by our
tool. Our results conﬁrm that 26 of them are indeed non-
refcount ﬁelds, and only 3 of them are false negatives of our
tool. We ﬁnd developers wrongly use these non-refcount ﬁelds
for normal counters (e.g. packet_sock->sk_wmem_alloc),
and for lock/status (e.g., device_link->rpm_active). This
ﬁnding further demonstrates the advantages of our behavior-
Figure 5: A missing decrease refcount bug detected by CID
in ext4_orphan_get(), which results in UAF.
To trigger a failure for the function call at line 10, we
can prepare a specially-crafted ﬁle as the argument for
ext4_orphan_get(). Even worse, the refcount ﬁeld for the
buffer head object is deﬁned with atomic_t type, which is a 32-
bit integer without overﬂow/underﬂow protection. Therefore,
we could repeatedly trigger this bug to free the buffer head
object while there are still valid references to this object. This
bug would ﬁnally lead to an exploitable UAF vulnerability.
6.5 Comparison with Existing Tools
We measure the bug detection capability of CID by compar-
ing it with the state-of-the-art approaches. Since RID [29]
is the state-of-the-art and the most close work to ours which
also employs consistency analysis, we choose it as our base-
line. According to [29], the detection of RID is based on
inconsistent path pair checking. The checking starts from its
pre-deﬁned refcount wrappers and analyzes their caller func-
tions. For a caller function, RID collects the paths which are
indistinguishable outside from its arguments and return values.
If these paths incur inconsistent refcount change behaviors,
RID reports it as a refcount bug.
The experiments are performed on 60 known refcount bugs
that are ﬁxed in the Linux kernel between 2018 and 2020. The
known bug set is collected from the Linux source code repos-
itory by using regular expressions to search the keywords in
the Git commit messages. The keywords include “refcnt”,
“refcount” and “reference count”. We manually examine the
matched 821 commits and ﬁnally locate 60 known bugs (as
listed in Table 9). Note that race-induced refcount bugs are
excluded, because they are essentially race bugs.
Comparison Results. Since RID is not open-sourced, we
check its capability on detecting known bugs by carefully
following its approach with manual efforts. We assume that
the implementation of RID perfectly aligns with its design and
USENIX Association
30th USENIX Security Symposium    2481
1 struct inode *ext4_orphan_get(struct super_block *sb, ...)2 {3    ...4    struct buffer_head *bitmap_bh = NULL;5    // increase refcount if success6    bitmap_bh = ext4_read_inode_bitmap(sb, block_group); 7    if (IS_ERR(bitmap_bh))8        return ERR_CAST(bitmap_bh);9    ...10   inode = ext4_iget(sb, ino, EXT4_IGET_NORMAL);11   if (IS_ERR(inode)) {12       // missing refcount decrease here13       ...14       return inode;15   }16   ...17   brelse(bitmap_bh);  // decrease refcount18   return inode;19 }Table 6: The number of the refcount ﬁelds identiﬁed by CID.
Refcount
Type
atomic_t
atomic_long_t
atomic64_t
refcount_t
kref
Total
# of
Fields
2,010
154
334
297
425
3,220
# of
Refcount Fields Ratio
6.97%
3.25%
0.90%
84.5%
92.5%
24.6%
140
5
3
251
393
792
Table 7: The Effectiveness of Refcount Field Identiﬁcation
on Ground Truth (Hint: R1 requires a refcount ﬁeld has all
three types of primitive operations; R2 requires a refcount
ﬁeld should be set to 1 at each SET operation; and R3 requires
that a refcount ﬁeld at least has one  and ).
Rule
Setting
R1
R2
R3
R1&R2
R1&R3
R2&R3
R1&R2&R3
TP TN FP FN Accuracy Precision Recall
143
137
145
137
143
137
137
104
134
61
145
117
143
146
51
21
94
10
38
12
9
2
8
0
8
2
8
8
82.3%
90.3%
68.7%
94.0%
86.7%
93.3%
94.3%
73.7%
86.7%
60.7%
93.2%
79.0%
91.9%
93.8%
98.6%
94.5%
100.0%
94.5%
98.6%
94.5%
94.5%
based refcount ﬁeld identiﬁcation, which does not rely on the
speciﬁc data types.
Effectiveness on Ground Truth. The effectiveness evalua-
tion requires a ground truth set. Since in §2.2 we have manu-
ally labelled the usage for 300 ﬁelds (the results are presented
in Table 3), we use this set to evaluate CID in refcount ﬁeld
identiﬁcation. In all, our ground truth consists of 145 positive
cases and 155 negative cases.
To identify refcount ﬁelds from all possible ﬁelds (those
are deﬁned in the 5 refcount data types), CID proposes a
behavior-based inference approach. There are three rules in
the inference. Our experiments evaluate the effectiveness of
these rules and their combinations in identifying refcount
ﬁelds. The detailed results are shown in Table 7. From this ta-
ble, we ﬁnd that the combination of all the rules (R1&R2&R3)
achieves the best performance in accuracy, precision and re-
call. This ﬁnding supports our design of combining the three
rules in CID.
Error Case Analysis. Following the rule setting of combin-
ing all the three rules (aka. R1&R2&R3), CID reports 9 false
positives and 8 false negatives in identifying refcount ﬁelds.
We present the causes for them below.
• False Positives. In all false positive cases, CID wrongly
recognizes some plain counters as refcounts. For example,
the rxrpc_net->nr_calls ﬁeld is used for counting the
number of RPC calls registered in the rxrpc_net struct,
while CID identiﬁes it as reference counter. The reason is
that the manipulation APIs operated on this ﬁeld match all
the three rules. Therefore, CID reports a false positive case
here. Actually, CID can be improved to eliminate this kind
of false positives by considering the initialization behav-
ior of the ﬁeld at the allocation site. More speciﬁcally, we
observe that for refcount ﬁelds its initialization is near to
the allocation site of its tracked object, while there is not
such observation for normal counters. Since the current
performance of CID is acceptable, we leave this optimiza-
tion as our future work. Besides, false positives in refcount
ﬁeld identiﬁcation may not lead to false positive cases in
the bug detection. Our breakdown of false positives in
§6.3 also conﬁrms this point. Interestingly, when using
such ﬁelds, CID can still detect inconsistencies in using
the ﬁelds, which still form true bugs although they are not
refcount bugs.
• False Negatives. All false negatives cases are due to
that the SET operations may not initialize the refcount
values to 1. For example, the rxrpc_connection->usage
ﬁeld has two SET operations: one sets the usage
ﬁeld to 1 in rxrpc_alloc_client_connection(),
and
in
to
rxrpc_prealloc_service_connection().
the
latter case, developers explicitly claim in the code
comments that they need to initialize the refcount ﬁeld
to 2 because this object will be used in two places after
allocation. This behavior violates the Rule 2 of CID. As a
result, CID misses this case in refcount ﬁeld identiﬁcation.
However, it is worth noting that such a behavior is not
encouraged in the kernel documentation [3]. Therefore, we
do not expect this is a normal and common behavior that
should be handled by CID.
2
In
ﬁeld
the
other
sets
the
7 Discussion
The Impact of Reference Escape on the Analysis Scope.
As described in §4, CID performs escape analysis to ex-
clude the reference-escaped paths in callers from the analysis
scope. Such design may limit the code that can be analyzed by
CID. Therefore, we measure its impact on the analysis scope.
First, in DEC-DEC checking, we will extend our analysis to
its callers if we observe that a referenced object escapes the
current function with refcount increased. In particular, we will
treat this functions as a new INC function, and then analyze
its callers to locate the paired DEC operations. For the 792
refcount ﬁelds, CID locates 11,910 caller functions (including
extended ones) for DEC-DEC checking, while 3,751 functions
(31.5%) still can not be analyzed due to two reasons: 1) we
limits the extension in 3 layers; 2) they do not have enough
callers for DEC-DEC consistency checking after extension. Sec-
ond, in INC-DEC checking, the current implementation of CID
does not extend the scope to the caller function if reference
escapes. The reason is that the extended analysis requires
2482    30th USENIX Security Symposium
USENIX Association
accurate inter-procedural data ﬂow to capture the conditional
INC/DEC operations. For the 5,146 caller functions identiﬁed
by INC-DEC checking, 639 ones cannot be analyzed (12.4%)
due to reference escaping. In the future, we plan to leverage
inter-procedural data ﬂow analysis to cover these cases.
Coordinating Two-dimensional Consistency Checking.
The unique advantage of DEC-DEC consistency checking is
that it does not require to understand the semantics in the INC
function. However, its statistical analysis requires adequate
callers for the inference. One the other hand, the INC-DEC
consistency checking is not limited by the number of callers,
but it needs accurate analysis about the INC function.
CID decides which consistency checking strategy to use
according to the speciﬁc situation of the INC function and
its callers. If the situation meets the requirements of both
checking strategies, the refcount operations will be checked
from both dimensions. As a result, CID takes the advantage of
both DEC-DEC consistency checking and INC-DEC consistency
checking to effectively uncover refcount bugs and cover more
codes.
Mitigating False Positives. To mitigate false positives, more
advanced static analysis techniques can be adopted. First,
we could use inter-procedural data-ﬂow analysis to improve
the accuracy of escape analysis and alias analysis. Second,
the multi-layer type analysis [25] can be leveraged to pre-
cisely identify the targets of indirect calls in the kernel. Such
information can help CID reduce the false positives due to
missing paired DEC operations. Last but not least, symbolic
execution [33, 34] would also help CID identify and eliminate
the bug reports which can not actually be triggered.
Bug Exploitability. As a static analysis-based detection tool,
CID excludes the generation of PoC or an exploit from the
scope. Two general exploitation strategies are (1) to increase
the refcounts, so as to maliciously consume resources, which
ﬁnally leads to DoS and (2) to force the refcount to reach zero,
through either over decrease or overﬂow, so as to trigger the
release of refcount object, which often leads to use-after-free.
As such, in general the exploitation of refcount bugs requires
one extra primitive—repeatedly triggering the bug. Once that,
the exploitation is already successful or can further reuse ex-
isting use-after-free exploitation techniques [14,21,40]. Actu-
ally, exploring whether a bug can be triggered is an orthogonal
and extremely challenging problem. Therefore, we leave it
as our future work. Speciﬁcally, we plan to combine directed
fuzzing [11, 13] and concolic execution [42] to evaluate the
triggerability of detected bugs.
Portability. The only prior knowledge CID requires is a list
of primitive refcount types such as the ones shown in Table 3.
Once the list is provided, CID can automatically identify ref-
count ﬁelds and perform the bug detection. We ﬁnd that other
OS kernels and user-space programs also widely use primitive
refcount types and APIs to implement refcount mechanisms.
Take FreeBSD as an example, data types like reference_t,
zfs_refcount_t are used to deﬁne refcount ﬁelds; the op-
erations on these ﬁelds are also encapsulated into primi-
tive APIs (e.g., refcount_init(), refcount_acquire(),
refcount_release()). Similarly, in Mozilla Firefox (writ-
ten in C++), its refcounted data structures should inherit cer-
tain base classes such as RefCounted or RefCountType, and
two primitive APIs (addref() and release()) are provided
to perform INC and DEC operations. Therefore, CID can be
applied in these platforms for refcount ﬁeld identiﬁcation and
refcount bug detection.
Implementation Improvements. The implementation of
CID can be improved from two perspectives: parallelized
analysis and targeted analysis. First, though its ﬁrst three
passes (call graph analysis, data ﬂow analysis and alias anal-
ysis) are hard to parallelize due to their algorithmic nature,
the ﬁnal pass for bug detection can be parallelized with multi-
threading. Speciﬁcally, either the modeling of INC/DEC oper-
ations or the two consistency checkers can be performed in
parallel. Second, CID can be enhanced to support the targeted
analysis. In this scenario, the developers can provide their
interested refcount ﬁelds or interested functions that have ref-
count behaviors. With this information, CID can be conﬁgured
to only check the refcount operations on the interested ﬁelds
or refcount operations in the interested functions.
8 Related Work
Reference Counting. Due to the lack of automatic garbage
collection, Use-after-free (UAF) and double-free vulnerabili-
ties are quite common in C/C++ programs. Since reference
counting is quite effective in managing dynamically-allocated
objects/resources, many attempts [10, 19] have been made to
provide C/C++ developers with reference counting mecha-
nism. For legacy C/C++ applications, Shin et al. proposes CR-
Count [37] which leverages pointer footprinting to accurately
compute the reference counts with a small runtime overhead.