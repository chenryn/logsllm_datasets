### Measurement Scripts and Experiment Results

Measurement scripts are positioned in close proximity to the analyzed exporters. The experimental results for the three expiration mechanisms are illustrated in Figures 1a, 1b, and 1c. For each value of \( d \) (in seconds, on the x-axis), we present the fraction of experiment runs (on the y-axis) that result in the generation of two flow records by the flow exporter.

#### Active Timeout (Figure 1a)

- **Exporter 1–3**: These exporters exhibit similar behavior. The number of experiments with two flow records increases linearly for \( d \in [0, 8] \). Although this 8-second timespan aligns with Cisco's documentation, the center of the timespan is incorrect; our experiments indicate it should be at \( d = 4 \) rather than \( d = 0 \).
- **Exporter 4**: This exporter behaves similarly to Exporters 1–3, but the linear increase occurs for \( d \in [-2, 6] \).
- **Exporter 5**: This exporter shows unexpected behavior. Even at \( d = 16 \), only 20% of the experiments generate two flow records. Additional experiments confirm that the expiration does not stabilize. Furthermore, incorrect start times are reported for flow records expired by the active timeout, which corroborates the findings in [3].
- **Exporter 6**: This exporter performs as expected, consistently generating two flow records for \( d \geq 0 \).

#### Idle Timeout (Figure 1b)

- **Exporter 1–4**: These exporters show identical behavior. The linear increase of the curve for \( d \in [0, 4] \) confirms that the flow record expiration works according to its specification [1].
- **Exporter 5**: This exporter performs better in idle timeout experiments compared to active timeout experiments. For \( d \geq 11 \), two flow records are always generated, which aligns with the findings in [3].
- **Exporter 6**: Flow records from this exporter are expired up to 15 seconds after the idle timeout, with a roughly linear increase for \( d \in [0, 15] \). The behavior of this exporter also depends on the absolute value of the inactive timeout. Figure 1d illustrates the value of \( d \) (on the y-axis) where 50% of the experiments yield two flow records, comparing the behavior of Exporter 1 and Exporter 6. For Exporter 1, these values are consistently around 2 seconds, while for Exporter 6, they increase with the timeout.

#### TCP Flags (Figure 1c)

- **Exporter 3**: The expiration behavior of this exporter differs from other Cisco devices due to a different implementation of NetFlow (see Section 3). Overall, the number of correctly exported flow records increases linearly with \( d \).
- **Exporter 5**: The deviation \( d \) for which Exporter 5 incorrectly exports only one flow record is small. Three seconds after the FIN/RST flag is sent, two records are always exported.
- **Exporter 6**: This exporter does not expire flow records based on TCP flags by specification.

### Analysis of Flow Record Expiration Behavior

The flow record expiration behavior of Exporters 1-4, as shown in Figures 1a–1c, suggests the presence of a cyclic process to expire and export the (hardware) flow tables. While flow records are not always expired exactly at the defined timeouts, this may not be problematic if flows are aggregated afterward, especially for those expired by the active timeout. However, when the idle timeout or TCP flags are used to signal the end of a flow, this artifact can result in non-repairable data damage. For example, some applications (e.g., peer-to-peer clients) often reuse sockets shortly after a TCP connection attempt failure. If timeouts and TCP flags are not strictly observed, packets from different connections may be merged into a single flow record, as demonstrated in [12].

### Artifact Analysis Results

**Table 2: Artifact Analysis Results**

| Exporter | TCP Flows Without Flag Information | Invalid Byte Counters |
|----------|-------------------------------------|-----------------------|
| 1 + 2    | No flags exported for hardware-switched flows | Flags exported | No flags exported for hardware-switched flows |
| 3        | Flags exported | Byte counters OK |
| 4        | No flags exported for hardware-switched flows | Flags exported | No flags exported for hardware-switched flows |
| 5 + 6    | Flags exported | Invalid byte counters for hardware-switched flows |

**TCP Flows Without Flag Information**

- **Exporters 1, 2, and 4**: These older devices do not export flags for hardware-switched TCP flows. Approximately 99.6% of all TCP flow records exported by Exporters 1 and 2 have no flag information set during a one-week measurement period. However, flags are still respected for flow record expiration, even for hardware-switched TCP flows.
- **Exporters 3, 5, and 6**: These devices export TCP flags.

The lack of TCP flag information in flow records can be problematic for various types of data analysis. From a network operation perspective, TCP connection summaries help identify connectivity or health problems of services and devices. From a research perspective, many studies rely on TCP connection state information, such as [5, 6, 8] for inferring statistics from sampled flow data and [10] for optimizing sampling strategies. None of these approaches work on flow data without TCP flags.

**Invalid Byte Counters**

- **Cisco Devices (except Exporters 5 and 6)**: These devices do not strip padding bytes from Ethernet frames of hardware-switched flows.
- **Exporters 5 and 6**: These devices properly strip padding bytes.

The impact of this artifact depends on the fraction of Ethernet frames carrying less than 46 bytes of payload. To understand the distribution of packet sizes in current networks, we analyzed packet traces from the University of Twente (UT) campus (one day in 2011) and the CAIDA 'equinix-sanjose' backbone link (one day in 2012). In both traces, approximately 20% of the frames contain less than 46 bytes of payload, which would be reported incorrectly.