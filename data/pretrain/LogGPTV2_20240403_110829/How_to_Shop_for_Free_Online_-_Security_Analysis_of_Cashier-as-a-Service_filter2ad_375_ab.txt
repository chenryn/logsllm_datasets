B.  Challenges in securing checkout processes 
To understand the nature of security threats that CaaS-
based  checkout  systems  are  facing,  the  first  step  is  to 
identify the security goal of these systems and the technical 
challenges in achieving it, which are described below. 
Security  invariant.  The  main  security  goal  of  a 
checkout  system  is  to  maintain  the  following  payment-
completion invariant: Merchant M changes the status of an 
item I to “paid” with regard to a purchase being made by 
Shopper  S  if  and  only  if  (1)  M  owns  I;  (2)  a  payment  is 
guaranteed to be transferred from an account of S to that of 
M in the CaaS; (3) the payment is for the purchase of I, and 
it  is  valid  for  only  one  piece  of  I;  (4)  the  amount  of  this 
payment  is  equal  to  the  price  of  I.  This  invariant,  though 
intuitive, implies a set of intertwined binding relations that 
should be respected in every step of the transaction. These 
bindings unequivocally  link the  merchant to a piece of the 
item  being  sold,  the  price  of  the  item  to  the  payment  the 
merchant  receives,  and  the  payment  for  this  specific 
purchase to the shopper. 
Complexity  in  preserving  the  invariant.    To  achieve 
this security goal, a checkout system is expected to preserve 
the aforementioned invariant throughout a transaction.  This 
turns out to be nontrivial, particularly in the presence of two 
web services.  Specifically, the challenges in  keeping both 
servers  in  consistent  states  include,  but  are  not  limited  to, 
the following: 
•  Confusion in coordination. Given their incomplete 
views of a transaction, the  merchant and the CaaS need to 
work  together  to  preserve  the  invariant.   This,  however,  is 
often  hindered  by  the  partial  knowledge  each  party  has 
about the other: the code of their systems is often off-limits 
to each other; the CaaS typically provides nothing but vague 
descriptions of its operations. As a result, misunderstanding 
often arises on the security assurance either party offers. For 
example, a merchant may assume that every notification of 
a payment completion from the CaaS must be about one of 
his transactions, but the CaaS may  not have this guarantee 
and may expect a merchant to verify it by itself, as we show 
in Section III.A.2. 
Diversity  in  the  adversary’s  roles.  The  merchant 
and the CaaS expose their APIs to the public, which enables 
the  adversary  to  play  more  diverse  roles  than  just  the 
shopper,  and  thus  to  gain  a  deeper  involvement  in  the 
checkout process than he could in a more traditional client-
server  interaction.  The  shopper  can  directly  invoke  a 
merchant’s APIs such as RT4 in Figure 3, which mimics the 
behavior  of  the  CaaS;  the  shopper  can  also  mimic  a 
merchant  to  register  with  the  CaaS  a  callback  API,  which 
will later be called, as illustrated by RT5. 
Parallel  and  concurrent  services.  Both 
the 
merchant  website  and  the  CaaS  need  to  serve  many 
customers, and a shopper can concurrently invoke multiple 
purchase transactions. This further complicates the trilateral 
interactions, opening avenues for cross-transaction attacks.  
Authentication  and  data  integrity.  Compared  with 
the  two-party  web  applications,  authentication  in  a  CaaS-
based  checkout  system  involves  three  parties  and  is  thus 
• 
• 
• 
467
more difficult in avoiding authentication and data integrity 
breaches. For example, we found that the integrity of each 
message  field  is  not  a  big  issue,  but  how  to  protect  the 
bindings of the fields in different messages deserves careful 
thought processes and is the real pitfall. 
In  the  next  section,  we  show  how  real-world  systems 
fail to answer to these challenges, indicating the urgent need 
to study the systematic solution to this problem. 
III.  SECURITY ANALYSIS OF REAL-WORLD MERCHANT 
APPLICATIONS AND CAAS SERVICES 
In  this  section,  we  report  our  analysis  of  two  popular 
merchant  applications:  NopCommerce  [29]  and  Interspire 
[20],  and  their  interactions  with  leading  CaaS  providers: 
PayPal, Amazon Payments and Google Checkout. Based on 
the  insights  from  the  study,  we  further  probed  for  logic 
flaws in stores that run closed-source proprietary software. 
Methodology.  Our  analysis 
follows  an  API-oriented 
methodology  that  dissects  a  checkout  workflow  by  closely 
examining how individual parties can affect the arguments 
of  the  web  API  calls  exchanged  between  them,  and  how 
these  arguments  affect  the  internal  states  of  these  parties. 
Some arguments of a web API carry the data flows between 
two parties, e.g. gross, merchantID, while others touch 
on  their  control  flows,  e.g.,  returnURL,  cancelURL, 
and callback URLs that play a similar role to that of a return 
address  or  a  function  pointer  in  C/C++  programs.    These 
arguments may not originate from the party that initiates the 
call. For example, the CaaS may use some data supplied by 
the  shopper  to  communicate  with  the  merchant  through 
calling its APIs. 
In our research, we studied whether the merchant/CaaS 
interactions  in  a  checkout  system  present  the  malicious 
shopper  opportunities  to  exert  improper  influence  on  the 
API arguments exchanged between these two services.  To 
this end, we use a simple approach to keep track of the data 
that the adversary generates or can tamper with.  
Table I lists the rules for labeling and tracing such data.  
Particularly, Rule (iii) makes the adversary the owner of any 
unsigned value that he sends, even though the value actually 
originates  from  other  parties.  All  figures  that  we  show  in 
this section follow these labeling rules, which help describe 
the checkout workflows clearly.   
TABLE I.  
LABELING RULES FOR API ARGUMENTS 
(i) A newly generated value is labeled by its message origin – T 
for the target merchant under attack, C for the CaaS that the 
merchant uses, and A for the attacker/shopper; 
(ii) A signed argument arg is labeled as argS*, where S is the 
signing  party  (T,  C  or  A).  Signed  arguments  are  passed  on 
across different parties without changing their origins; 
(iii) Any unsigned value sent by the attacker is relabeled as A, 
regardless of the origin of the value.   
To  make  succinct  figures  in  the  paper,  we  represent 
every URL in the following format: 
 [https://]host/apiName?arg1[=value]&…&argN[=value] 
We often omit the “https://” prefix because all messages 
are HTTPS traffic. The string after “?” is the argument list. 
Usually  we omit the concrete values of the arguments, but 
when  a  particular  concrete  value  needs  to  be  explicit,  we 
provide the name/value pair as argN=value.  
Limitation:  CaaS  as  blackbox.  Currently  we  do  not 
have the source code for the CaaS side, but only the source 
code on the merchant side, including the merchant software 
and 
the  CaaS’  SDKs  (Software  Development  Kits) 
compiled  with  the  merchant  software.  For  a  CaaS  service, 
we  could  only  observe  its  concrete  inbound  and  outbound 
messages,  without  knowing  its  internal  logic,  which  might 
have  subtle  flaws  as  well.  Therefore,  what  we  have  found 
only constitute a subset of the problem space.     
A.  Open-source software – NopCommerce  
NopCommerce  is  the  most  popular  .NET-based  open 
source merchant software [29]. It was recently nominated as 
one of the best open-source e-commerce applications [34]. 
1)  Integration  of  PayPal  Standard  –  paying  an  arbitrary 
amount in PayPal to check out from the victim 
PayPal Standard is the simplest method that a merchant 
website can integrate as its payment service. It is supported 
by NopCommerce. Figure 4 shows the workflow.      
RT1.a: TStore.com/placeOrder 
RT1.b: redir to CaaS.com/stdPay?orderIDT& grossT& …
RT3.a: TStore.com/finishOrder?txA& … 
TStore.com
 (T) 
RT3.b:  purchase done 
RT3.a.a: CaaS.com/PDTDetails?txA&identityT
RT3.a.b:   orderIDA&grossA& …
RT2.a: CaaS.com/stdPay?orderIDA& grossA& … 
Shopper/
Attacker
 (A) 
RT2.b: redir to TStore.com/finishOrder?txC& … 
CaaS.com (C)
i.e., PayPal
TStore.com/placeOrder:  orderID=InsertPendingOrder () 
TStore.com/finishOrder:     
     tnDetails=wCall_PDTDetails(tx,identity); /*resulting in  
                                                                            RT3.a.a and RT3.a.b*/
     orderID=GetOrderIDField(tnDetails); 
     order=LoadOrderByID(orderID); 
     if (order≠null) and (order.status==PENDING)   
                         order.status = PAID;      
Figure 4: NopCommerce’s integration of PayPal Standard 
(Note: RT3.a.a/RT3.a.b happen after RT3.a and before RT3.b) 
First, the shopper clicks on the checkout button to send 
RT1.a to invoke the merchant’s API placeOrder, which 
inserts the order information into a database, including the 
gross amount and the order ID. Since the order is unpaid, its 
status  is  set  to  PENDING.  Then  the  merchant’s  response 
RT1.b  passes  the  order  information  (e.g.,  orderID  and 
gross) back to the shopper and redirects his browser to the 
CaaS  (i.e.,  CaaS.com/stdPay),  where  the  shopper  pays 
according to the order information that his browser passes to 
the CaaS. The CaaS records the payment details and returns 
468
tx as the transaction ID for the payment in RT2.b.1  After 
the  payment  is  done,  the  shopper’s  browser  calls  the 
merchant  API  finishOrder  to  finalize  the  invoice 
(RT3.a). Here we present the pseudo code of the function 
to  highlight  the  part  of  its  functionality  of  interest  to  us. 
More specifically, it makes a call to CaaS.com/PDTDetails 
(i.e.,  RT3.a.a),  using  tx  and  an  authentication  field 
identity, to get the payment details through RT3.a.b. 
Based on OrderID in the payment details, it looks up the 
order  from  its  database.  Once  the  order  is  located  and  its 
status  is  found  to  be  PENDING,  the  status  is  set  to  PAID 
and a confirmation is sent to the shopper in RT3.b. In this 
entire workflow, no message field is signed (i.e., no “*” in 
any  label  in  the  figure).  Security  is  expected  through 
RT3.a.a and RT3.a.b, which are between the two servers. 
Flaw and exploit. From Figure 4, a logic flaw is easy to see: 
the gross of the payment to CaaS is labeled as A using our 
analysis method, but the logic of finishOrder does not 
check  the  gross,  which  can  be  freely  modified  by  the 
attacker. Therefore, setting the payment gross to an arbitrary 
value in RT2.a would not cause any trouble for the order to 
get through all the checkout steps.  
Paid invoice of Jeff’s store 
Mark’s PayPal record
$17.76 
PayPal 
Standard 
$17.76 
$17.76 
Pay to Jeff
$1.76
$1.76 
Complete
Figure 5: Jeff's paid invoice and Mark's PayPal record 
To  evaluate  the  practical  feasibility  of  this  attack,  we 
installed  NopCommerce  on  a  server  in  our  lab  to  set  up  a 
store  for  Jeff,  and  then  registered  a  shopper  Mark  with 
PayPal. Figure 5 shows Jeff’s finalized invoice and Mark’s 
PayPal  record.  The  price  of  the  merchandise  is  $17.76. 
Exploiting  the  above  flaw,  Mark  was  able  to  pay  $1.76  to 
complete the checkout. Interestingly, Jeff’s invoice actually 
showed a payment of $17.76. There was no indication that 
the real payment was $1.76. In Section IV.A, we report our 
test of this exploit on a real store. 
2) 
Integration  of  Amazon  Simple  Pay  –  paying  to  the 
attacker himself to check out from the victim 
NopCommerce  also  supports  Amazon  Simple  Pay,  in 
which  all  messages  after  RT1.a  are  signed  (*-labeled  in 
Figure 6), so the shopper cannot tamper with the messages 
as  in  the  prior  example.  Figure  6  shows  the  steps  of  this 
1 For  the  simplicity  of  presentation,  we  omit  a  few  round-trips  between 
RT2.a and RT2.b, which correspond to a few user clicks. 
checkout method. RT1.b is used to redirect the shopper’s 
browser to the payment API of the CaaS, passing orderID, 
gross and returnURL as the arguments. This message is 
signed by the merchant (labeled T*), so the shopper cannot 
tamper with the arguments when sending RT2.a. After the 
CaaS  (i.e.,  Amazon)  verifies  the  merchant’s  signature,  the 
shopper makes the payment, which the CaaS records to its 
database  (again,  we  omit  a  few  RTs  in  the  figure).  The 
payee is the merchant who signs RT2.a, which, in Figure 6, 
is  TStore.com.  Then,  by  RT2.b,  the  CaaS  redirects  the 
shopper  back  to  the  merchant  using  returnURL  that  the 
merchant supplies in RT1.b. In NopCommerce, the URL is 
set  to  TStore.com/finishOrder  for  invoking  the  merchant 
API  finishOrder.  The  entire  message  of  RT2.b  is 
signed by the CaaS, which is verified by the merchant. This 
checkout procedure seems secure: in Figure 6, no data can 
be contaminated by the attacker, i.e., nothing is A-labeled. 
RT1.a: TStore.com/placeOrder 
RT1.b: redir to 
(CaaS.com/pay?orderID&gross&returnURL …)T*
RT3.a: (returnURLT?payeeEmail C& 
statusC=PAID&orderIDT&grossT…)C* 
TStore.com
 (T) 
RT3.b:  Purchase done 
RT2.a: (CaaS.com/pay?orderID&gross&returnURL …)T*
RT2.b: redir to (returnURLT?payeeEmail C& 
statusC=PAID&orderIDT&grossT …)C* 
CaaS.com (C)
i.e., Amazon
TStore.com/placeOrder:  orderID=InsertPendingOrder () 
TStore.com/finishOrder  (handler of RT3.a):     
      if (verifySignature(RT3.a) ≠ CaaS) exit; 
      if (GetMsgField(“status”) ≠ PAID) exit;   /*payment status*/ 
      order= GetOrderByID(orderID); 
      if (order==NULL or order.status ≠ PENDING) exit; 
      order.status=PAID;   
Figure 6: NopCommerce's integration of Amazon Simple Pay 
Flaw and exploit.  Interestingly, this integration turns out to 
be  vulnerable  when  the  malicious  shopper  also  plays  the 
role of a different merchant. Specifically, anyone can open a 
seller  account  on  Amazon,  so  can  the  attacker  (in  Section 
IV.B,  we  show  that  all  the  attacker  needs  is  $25  cash  for 
buying  a  MasterCard  gift  card  from  a  supermarket;  other 
personal  information  like  name,  email  and  phone  number 
can  all  be  faked).  Suppose  that  the  seller  account  is 
registered under the name “Mark”. What the attacker wants 
to  do  is  to  pay  Mark  (actually,  himself)  but  check  out  an 
order from a store belonging to Jeff (https://jeff.com).  
The attack proceeds as follows.  Acting as “Mark”, the 
attacker  drops  RT1.b,  but  makes  the  message  RT2.a  by 
signing it using Mark’s signature (labeled as A*): 
 (CaaS.com/pay?orderID&gross&returnURL=https://jeff.com/finishOrder…)
The  trick  here  is  that  the  message  signed  by  A  actually 
carries  a  returnURL  to  Jeff  (jeff.com/finishOrder).  As  a 
A* 
469