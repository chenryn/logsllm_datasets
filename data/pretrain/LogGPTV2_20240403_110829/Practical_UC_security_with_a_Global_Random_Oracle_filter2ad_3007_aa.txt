title:Practical UC security with a Global Random Oracle
author:Ran Canetti and
Abhishek Jain and
Alessandra Scafuro
Practical UC security with a Global Random Oracle
Ran Canetti∗
Abhishek Jain†
Alessandra Scafuro‡
Abstract
We show that there exist commitment, zero-knowledge and general function evaluation pro-
tocols with universally composable security, in a model where all parties and all protocols have
access to a single, global, random oracle and no other trusted setup. This model provides sig-
niﬁcantly stronger composable security guarantees than the traditional random oracle model of
Bellare and Rogaway [CCS’93] or even the common reference string model. Indeed, these latter
models provide no security guarantees in the presence of arbitrary protocols that use the same
random oracle (or reference string or hash function).
Furthermore, our protocols are highly eﬃcient. Speciﬁcally, in the interactive setting, our
commitment and general computation protocols are much more eﬃcient than the best known
ones due to Lindell [Crypto’11,’13] which are secure in the common reference string model. In
the non-interactive setting, our protocols are slightly less eﬃcient than the best known ones
presented by Afshar et al.
[Eurocrypt ’14] but do away with the need to rely on a non-global
(programmable) reference string.
1
Introduction
The random oracle model (ROM) [BR93] has been extremely successful as a tool for justifying the
design of highly eﬃcient cryptographic schemes that lack more direct proofs of security. Indeed,
while security in the ROM does not in general imply security when the random oracle is replaced
by a concrete, publically computable hash function [CGH98, GK03, Nie02], it is generally accepted
that security analysis in the ROM does provide strong corroboration to the resilience of the protocol
in question to practical attacks.
However, when attempting to use the ROM for analyzing security of general protocols, and in
particular when attempting to assert simulation-based security deﬁnitions, the following question
comes up: Does security analysis in the ROM provide any composable security guarantees? In
particular, what does security analysis in the stand-alone ROM say about the security of the protocol
within a larger system that involves also other protocols, where these protocols may have themselves
been analyzed in the ROM?
To provide a positive answer to this question, we would like to come up with a model for
analyzing security of protocols in a stand-alone fashion, while taking advantage of the ROM, and
still be able to provide security guarantees in a composite system where multiple such protocols
co-exist and interact.
∗Boston University and Tel-Aviv University, USA and Israel
†Johns Hopkins University, USA. Part of this work was done while the author was a postdoc at MIT and Boston
University.
‡UCLA, USA
1
A natural approach to devising such a model is to start from an existing framework with com-
posability guarantees, and try to add the ROM to that framework. Speciﬁcally, start from the
universally composable (UC) security framework [Can01] that provides strong composability, and
formulate the ROM as a “trusted functionality” that is available to the parties (i.e., this “random
oracle functionality” simply returns an independent random value RO(x) to each query x, while
maintaining consistency among diﬀerent queries with the same x).
However, it turns out that if one wants to use the full power of the ROM, and in particular to
allow the simulator, in the security analysis, to have free access to the adversary’s RO queries and
furthermore to set the responses of the random oracle to values of its choice, the resulting modeling
loses all composability guarantees. More precisely, secure composition holds only if each instance of
each protocol uses a completely diﬀerent and independent random oracle than all other instances.
This of course does not correspond to the practice of replacing the random oracle in all executions
with a single hash function.
Furthermore, this is not just a modeling issue: Using the same instance of the RO across
multiple protocols inevitably gives rise to some unavoidable attacks. For instance, consider a UC
non-interactive zero knowledge (NIZK) protocol in the RO model. If RO is available outside the
individual instance of the protocol then the transcript of the protocol (i.e., the proof) becomes
transferable - it is veriﬁable not only by the intended veriﬁer, but rather by anyone who has access
to RO. This stands in contrast to the ideal zero knowledge functionality, which allows only the
intended veriﬁer to verify the verity of the statement. (It should be remarked that the same issue
happens even in interactive Zero Knowledge protocols in the ROM, but is perhaps most evident for
non-interactive ones.)
Indeed, this discrepancy between the abstract model and its intended use was already noticed in
the context of the common reference string setup [CDPW07]. To handle this discrepancy, [CDPW07]
suggests to explicitly consider only trusted setup constructs that are global, namely only a single
instance of this setup exists in the system. In particular, this construct exists even in the “ideal
model”, where the protocol is replaced by a “trusted party”, or an ideal functionality representing
the task at hand. They then proceed to propose such a global trusted setup construct. However
their construct is not just a public hash function (or a random oracle). Rather, it consists of a
global public key for which each party has its own identity-based secret key. Furthermore, they
argue that no “public setup construct”, namely no construct that provides only public information
that is available to all, can suﬃce for realizing tasks such as commitment or zero knowledge in the
UC framework. Given that the random oracle does provide only public information, the avenue of
coming up with a useful, global ROM that provides composable security guarantees seemed to have
reached a dead end.
1.1 Our Contributions
1.1.1 The global random oracle model
We formulate a natural, global variant of the “random oracle functionality”. As per the formalism
of [CDPW07], this functionality, which we denote by gRO – standing for global Random Oracle –
is accessible to all parties (both honest and corrupted), both in the ideal model and in the model
for protocol execution. This functionality answers consistently to all queries made by all parties.
Furthermore, only a single instance of this functionality exists. As shown in [CDPW07], the universal
composition theorem holds in this model - even though multiple protocols and instances thereof use
2
the same instance of gRO.
In addition, we incorporate in gRO a mechanism that captures the fact, sketched above, that
the global random oracle, being a single global construct that provides the same information to all,
allows third parties to double up as adversarial protocol participants and mount a transferability
attack.
In a nutshell, this analytical mechanism provide each protocol session with a unique domain of
queries: queries that pertain to a session that the querying party does not belong to are considered
“illegitimate” and are disclosed to the adversary. This mechanism allows capturing security proper-
ties such as “transferable non-interactive zero knowledge”, namely protocols that are zero-knowledge
except for the fact that proofs may be transferable. As we explain in more details later, transfer-
ability attacks are the only ones allowed in this model. Intuitively the reason is that, whatever a
malicious third party can do by accessing the RO in some concurrent adversarial protocol execution,
can be done by the adversary itself in her protocol execution.
We then observe that simple variants of known protocols, such as the two-message zero-knowledge
protocol of Pass [Pas03], is in fact UC zero knowledge in our global random oracle model (gRO
model).
The gRO model, the CRS/RO model and the JUC model. The advantage of the gRO model
is that it guarantees secure composition even with arbitrary protocols that use the same instance
of the RO (or the same hash function). In practice it means that the RO can be reused by any
protocol in the system, without jeopardizing security. Neither the standard (programmable) RO
model nor the standard (programmable) CRS model give any security guarantees when the same
setup is reused. One might object that there exist protocols that are UC-secure in the Joint State
model (JUC) [CR03] where the same CRS is reused. However, the form of reusability guaranteed
by the JUC model is very limited as that protocols must be pre-designed to work well together with
same CRS instance. Instead, in the gRO model protocols do not need to synchronize their access
to the RO.
Discussion on the random oracle model. One might wonder about the utility in rigorously
arguing secure composition of protocols in the gRO model, given that this model anyway does not
provide rigorous security guarantees once the random oracle is replaced by a publicly computable
hash function. We provide several answers to this valid question. First, we note that attacks
that take advantage of insecure composition might come up even when no other attacks are found
against a protocol instantiated with some hash function. (In fact, the transferability attack is a
quintessential example for such a situation.)
Second, we observe that protocols in the gRO model give us a level of security that was not
known to exist in any other general computation (or even zero knowledge or commitment) protocol
that was proven secure in the UC framework: Indeed, protocols in that framework cannot exist
without some “trusted setup” construct. All known such constructs require trust in some third
party or an external entity that is outside the control of the players. Furthermore, these protocols
invariably provide the trusted external entity with the ability, if played maliciously, to completely
compromise the security of the players.
The gRO model is diﬀerent, in that it “only” reduces the security guarantees to the level of
the stand-alone security guarantees provided by the random oracle methodology to begin with.
That is, the level of reassurance provided by analysis in the gRO model with respect to universally
composable security is no lower than the level of assurance provided by analysis in the ROM for
traditional, stand-alone security.
3
Certainly, in some respects, a protocol that was analyzed in the gRO model and instantiated
with a concrete hash function may well provide better security than a protocol analyzed in the
(non-global) CRS model and instantiated with a globally available reference string.
Still, it should be stressed that (similar to standard ROM) as soon as the gRO is replaced by a
concrete hash function, the security guarantees provided by this model are inevitably only heuristic.
1.1.2 Highly-Eﬃcient Protocols
We design eﬃcient protocols for a variety of tasks in the gRO model.
Starting from the work of Lindell and Pinkas [LP07], who constructed eﬃcient two-party com-
putation protocols based on Yao’s garbled circuit [Yao86] via a novel cut-and-choose technique, a
proliﬁc sequence of works [MF06, LP11, IKO+11, SS11, MR13, Lin13, HKE13, SS13, AMPR14] have
shown increasingly more eﬃcient protocols for secure computation, which are either only stand-alone
secure, or UC-secure in the CRS model [LP11, Lin11, Lin13, AMPR14]. We show how to construct
very eﬃcient protocols in the gRO model, which in most cases improve on the highly eﬃcient known
existing solutions in the CRS model. In particular, we ﬁrst show a highly eﬃcient UC-commitment
scheme, which compares very favorably to the most eﬃcient known UC-commitment scheme of
Lindell in [Lin11] (in the CRS model). When plugged in [Lin13], this construction directly yields
very eﬃcient UC-secure protocol for two-party computation. Finally we show that non-interactive
secure two-party computation (NISC) is also achievable in the gRO model, building on the work of
Afshar et al. [AMPR14]. More speciﬁcally we provide the following protocols.
UC commitments in the gRO model. We show a general construction that combines the use
of any straight-line extractable commitment in the gRO model and any trapdoor commitment, to
construct a UC-secure commitment scheme in the gRO model. By instantiating the extractable
commitment with the protocol provided by Pass in [Pas03] and the trapdoor commitment with
Pedersen’s scheme [Ped91], we obtain an extremely eﬃcient UC-secure commitment scheme that is
signiﬁcantly more eﬃcient than the best known UC-secure commitment scheme in the CRS model
of [Lin11]. Concretely our protocol requires only 5 exponentiations per party and 5 rounds of
communication in total (including the commitment and decommitment phases).
UC two-party computation in the gRO model. We observe that the highly eﬃcient UC-secure
two-party computation protocol (2PC for short) of Lindell [Lin13], that works in the CRS model,
requires the use of UC-secure zero knowledge proofs, which in turns is based on UC-Commitments
only. By instantiating Lindell’s construction with our UC-commitments, we obtain a more eﬃcient
UC-2PC protocol in the gRO model.
UC NISC in the gRO model. NISC – non-interactive secure computation– is a two-message pro-
tocol run between parties P1 and P2, where P1 speaks ﬁrst. Very recently, Afshar et al. in [AMPR14]
presented the most eﬃcient NISC protocol, which is UC-secure in the CRS model. We show how
to instantiate this construction without using the CRS, in the gRO model, while preserving the
non-interactive nature of the protocol. Our construction is slightly less eﬃcient than the protocol
of [AMPR14] but do away with the need to rely on a non-global (programmable) reference string.
Related Work. Dodis Shoup and Walﬁsh [DSW08] also make use of a global (non-programmable)
random oracle within the GUC framework. Speciﬁcally, they start with a 6-round GUC Zero
Knowledge protocol that uses the augmented CRS (ACRS) global set-up of
[CDPW07], and then
ingeniously collapse the number of rounds to 2 using an additional random oracle - while making
4
sure that the random oracle need not be programmed and can thus remain global. We note however
that using a global RO along with ACRS is quite diﬀerent from our goal of using the RO as the
only trusted set-up towards global composability. In particular, their use of the ACRS allows their
protocols to be fully deniable.
1.2 Our Techniques
Here we provide an overview of the main technical ideas underlying our constructions.
1.2.1 Eﬃcient UC Commitment in gRO Model
Recall that a UC secure commitment scheme requires two main properties: (a) Equivocation: When
the receiver is corrupted, the simulator should be able to commit (on behalf of the honest sender)
in such a way that it is able to decommit to any desired value. (b) Extractability: When the sender
is corrupted, the simulator should be able to extract the committed value during the commitment
phase.
Note that the observability property of the gRO naturally yields the desired extraction property