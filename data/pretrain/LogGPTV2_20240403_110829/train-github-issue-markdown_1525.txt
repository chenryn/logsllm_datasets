As it stands `code_typed` returns its output, but `code_llvm` and
`code_native` return `nothing` and instead print their output to an io stream.
I would like to propose that all three have no side effects and return some
kind of Julia object which displays nicely.
I ran into this when trying to use these functions in a Pluto.jl notebook.
`code_typed` works just fine but the other two don’t display their output in
the notebook, which is rather annoying. You can get around this by redirecting
stdout or by using sprint and returning a String, but it doesn’t look nice
that way.
Would the way to fix this be to have equivalents of the `Core.CodeInfo` type
like a `LLVMInfo` and `NativeInfo` types, that just contain a string and get
displayed nicely if `show`ed?
    julia> code_typed(abs, (Int,)) |> typeof
    Vector{Any} (alias for Array{Any, 1})
    julia> code_llvm(abs, (Int,)) |> typeof
    ;  @ int.jl:170 within `abs'
    define i64 @julia_abs_1497(i64 signext %0) {
    top:
    ; ┌ @ int.jl:130 within `flipsign'
       %1 = icmp slt i64 %0, 0
       %2 = sub i64 0, %0
       %3 = select i1 %1, i64 %2, i64 %0
    ; └
      ret i64 %3
    }
    Nothing
    julia> code_native(abs, (Int,)) |> typeof
            .section        __TEXT,__text,regular,pure_instructions
    ; ┌ @ int.jl:170 within `abs'
    ; │┌ @ int.jl:130 within `flipsign'
            movq    %rdi, %rax
            negq    %rax
            cmovlq  %rdi, %rax
    ; │└
            retq
            nopl    (%rax,%rax)
    ; └
    Nothing