informs all nodes q (including q = s) of the fact that Vs[t“] 
has occured.  By  allowing an arbitrary behavior of  the al- 
gorithm’s local execution, including false triggering at any 
time,  we can always assume that  Vs[ts] itself occurs cor- 
rectly5 (i.e., with correct value V s  and correct event gener- 
ation time t s )  even when node s is faulty. 
A few particular examples of virtual events6 are 
( I )   Vs[t“] 1 “node s should start round IC”, 
’Note  that  the  term  “correctly” makes  sense here  due to the  fact  that 
event  generation  times at different  nodes  may be externally  related,  CLS  in 
the local detection  of a global  predicate,  for example. 
‘Of  course, many distributed algorithms will  involve several  different 
virtual  events, which must be modeled separately. 
59 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:22 UTC from IEEE Xplore.  Restrictions apply. 
(2) Vs[ts] b “node s should detect crash of node x”, 
( 3 )  V“[t”] 
“node s should propose attack”. 
The respective event values are Vs  = IC  in (I),  V“ = z in 
(2), and V” = attack in (3); the event generation times are 
of vital  importance (and close to each other) in clock syn- 
chronization ( I )  and other time-dependent applications (2), 
but (almost) irrelevant in classic agreement ( 3 ) .  
For our general framework, there is obviously no need to 
fully specify the particular distributed algorithm employed. 
We only assume that it disseminates all nodes’ virtual events 
V“[t“] throughout the  system by  means of  messages,  in  a 
way that any correctly received message conveying V s  can 
be taken as representative. Note that this property is trivially 
fulfilled if only a single message is sent to any receiver. 
Any  non-faulty receiving node q can  hence build a per- 
ception vector 
of perceptions  17[ti], 1 5 s  5 n, collected by  real-time t. 
A  perception’s value  V:  is  the result  of reception and  op- 
tional  preprocessing of  the message from  node s that con- 
veyed  V s  to q  (including s  = q), and its occurrence  time 
ti  5  t  is  the  time  when  V,“  is  made available at node q. 
Note carefully that,  unlike  V,“,  the explicit value of ti is 
usually  not available. If  no message from s arrived by time 
t or if preprocessing has not yet completed, V,“  = 0 for the 
unique empty value 0 and ti := ca. 
Most distributed algorithms, including the clock synchro- 
nization  algorithm of Section 4 and classic agreement algo- 
rithms, do not  need  advanced preprocessing.  In  this case, 
V:  = Vs and t; = t” + Si with Si denoting the end-to-end 
computational  + tratisniission delay between sender s and 
receiver q, provided there was  no fault.  Advanced prepro- 
cessing  is  used  in  convergence-function based  clock  syn- 
chronization to “simulate” ti = t“, by  moving the depen- 
dency upon  transmission delays etc. to  Vi, see [13].  Our 
framework thus makes explicit the relation between ti and 
t s  (resp. V: 
and  V” in  the latter  case) via  the end-to-end 
delay,  which  is  particularly beneficial  for  clock  synchro- 
nization  applications.  Note  that  this  feature distinguishes 
our approach  from the otherwise very similar one of  [ 101, 
which stipulates a (somewhat magic) allowed range for ti 
ins tead. 
Our assumptions on the distributed algorithm ensure that 
a non-faulty node’s perception vector is monotonic in time 
during any  single execution, in  the sense that the number 
IV,(t)l  of  non-empty  perceptions V i   #  0 in  V, can  only 
increase; we denote this by 
Even more, since only one message from node s is accepted 
for V i ,  a perception vector is also “static” in the sense that 
all non-empty perceptions present in V,(t) are also present 
in Vq(t’), denoted by 
Let us now consider the perception vectors belonging to 
the same execution of any two non-faulty nodesp and q # p 
at some arbitrary real-time t, that is, 
V p ( t )   =  (v;[t;],vp2[t;],. 
V,(t)  =  (v;[t;],VqJ[t;],. 
. . , VJt,”]), 
. . ,v,.[t;]). 
In order to characterize the effect of faults upon p’s and q’s 
execution up to  time t, it  is  -at 
least  for the  algorithms 
sufficient  to  know  the  number  f(t) of 
considered  here- 
faulty pairs of perceptions { V i ,  vi} E  {Vp(t), U,@)}. Re- 
in V,(t) 
call that a link fault between s and p  affects V:[ti] 
only, whereas a  sender node fault at  node s affects V;[t:] 
in  all Vr(t), 1 5 T  5 n, in a correlated -though  probably 
inconsistent- 
fashion. 
Consequently, our perception-bnsedfault model just con- 
strains f(t) for any p ,  q in any admissible execution.  Still, 
for finite t, the perception  vectors may  involve  “phantom 
faults”  (t;    t  for some  node  s) caused  by 
the fact that  V:[ti]  may  not  yet  be available at node q  by 
time t. A phantom fault may  vanishkhange  type later on, 
at time ti, when  the result of an eventually received mes- 
sage is made available.  Given  the static nature of  percep- 
tion vectors, however, we can get rid of this problem by just 
considering f ( t )  for t  = CO;  we will  denote this  value by 
f := f(..). 
Apart from being perception-based, our fault model will 
also  be  a  hybrid  one,  for  both  node  and  link  faults. 
In 
a  hybrid  fault model  [9, 22,  25, 2,  241,  different classes 
of faults (manifest/crasNsymmetric/asymmetric) are distin- 
guished  to  account for  the fact  that  less  severe faults can 
be  handled  with  fewer nodes than  more severe ones.  For 
example, masking f symmetric faults usually requires only 
n 2 2f+ 1 nodes, whereas n 2 3f + 1 is needed if all faults 
are asymmetric ones.  Since a large number of asymmetric 
faults is quite unlikely in practice, this effectively leads to a 
smaller n for tolerating  a given  number of  faults.  This, in 
turn,  has a positive effect  upon dependability by  reducing 
the number of components that could be faulty, cf. [IO]. 
We start our classification  with the faults of a single per- 
ception V i ,  which is more subtle than  it meets the eye.  It 
is straightforward for classic agreement algorithms, where 
value faults are the only source of problems:  Vg  is  faulty 
iff Vp”  # Vs. In clock synchronization and related applica- 
tions, however, both the value V,” and, in particular, the oc- 
currence time ti is essential. This means that \y[t3 could 
be value and/or time faulty  in  this case.  In  addition, since 
the  actual end-to-end  computational + transmission delay 
6;  that determines t;  = t S  + 8;  is unknown, a whole range 
of values must be considered correct here. 
For any  two non-faulty nodes s,  q  connected by  a non- 
faulty link, let -rS, be a set of admissible values of the end-to- 
end computational + transmission delay that ensures 6;  E 
60 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:59:22 UTC from IEEE Xplore.  Restrictions apply. 
-ri. Usually, -ri = [T,",-,  T;,*]  will just be an interval de- 
fined by  some lower and upper bound on  di.  In  any case, 
ti E  tS + ri, where the operation + is defined as 
z + S  = {VI  w = 2 + ~7  forall ~7  E  S } .  
Therefore,  Vi[ti] will  be  considered time  faulty  iff ti  @ 
t" + r;: 
Definition 1 (Single Faults: Time)  Given a  set  of  admis- 
sible  delays r;, a node p's perception  Vi[t;]  of the event 
V"[t"] disseminated by node s can sufferfrom the following 
nuitually  exclusive faults: 
Omission fault:  tz = CO  [and V i  := 01, 
Time fault:  ti +,t;- TP ">-I  if-ri = 
is just an  interval.  The following  Definition 3 
[ T ; ~ - ,  T;,'] 
specifies all possible classes of time faults. 
Definition 3 (Painvise Faults: Time) A pair ofperceptions 
{Vi[tg], V,"[ti]} of the event V"[t"] disseminated by node s 
can suffer from the following mutually exclusive time faults: 
Symmetric omission fault (SO): t:  = ti = CO. 
0  Symmetric commission fault (SCJ:  ti  E  in this case. 
3.  The “classic” symmetric fault [24] is caused by faulty 
information that is perceived similarly at p and q. This 
type of fault is usually caused by a sender (clock) that 
runs too slow or too fast, but  may  also occur if  one 
node experiences a slightly excessive delay in an oth- 
erwise correct broadcast. 
4.  An  asymmetric omission is  visible both  in  the time 
and in the value domain, since it  is charactercterized 
by  t;  =  03  and  Vp”  = 0 simultaneously.  Conse- 
quently, we defined only one class AO (and SO) for 
both Definition 3 and 4. 
5.  A  symmetric omission  fault  is  caused  by  a  sender 
node crash or a receive omission at bothp and q. Note 
carefully, though, that it is impossible for either node 
to  decide locally  -without 
further information e.g. 
from on-line diagnosis  [23]-  whether its  omission 
belongs to the class SO, AO or even ACtIACV. 