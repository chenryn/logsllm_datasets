### Optimized Text

#### BARM and Attack Detection
When using the `sudo` or `ssh` commands, BARM (Bus Activity Runtime Monitor) was initiated concurrently. BARM ceased operation once the password was entered. Specifically, BARM halted unnecessary bus masters and immediately restarted them after the password prompt had been passed. We employed our DMA-based keystroke logger, DAGGER, which runs on Intel’s Management Engine (ME), to attack the password prompt. DAGGER scans the main memory via DMA to locate the physical address of the keyboard buffer, which is also monitored via DMA.

**Figure 9(a)** illustrates the measurements taken by BARM when the platform is under attack, meaning that DAGGER is already loaded when the user is prompted for a password. **Figure 9(b)** shows the results of BARM when the platform is attacked at an arbitrary point during runtime. For comparison, both **Figure 9(a)** and **Figure 9(b)** also depict BARM’s measurements when the platform is not under attack. **Figure 9(c)** provides a segment of the kernel log, confirming how quickly BARM stopped DAGGER. BARM detected the DMA attack at timestamp 350.401,045 seconds and identified the attacking DMA-based peripheral at timestamp 350.465,042 seconds. This test confirms that BARM can detect attacks before the attacker can cause any damage, as BARM halted the attack while the keystroke logger was still in the search phase, preventing it from locating the keyboard buffer and thus capturing any keystrokes.

We configured BARM with a Performance Monitoring Unit (PMU) value sampling interval of 32 milliseconds. Our evaluation revealed that the attacker generated over 1000 memory transactions within this time period, indicating that we could have chosen a significantly higher tolerance value than T = 50.

#### Related Work
We focus on previous research related to attacks originating from peripherals. The Trusted Computing Group proposed attesting the peripheral's firmware at load time [30]. However, this does not prevent runtime attacks, and it is not guaranteed that the host CPU can access all ROM components of a peripheral. Other attestation approaches, such as those presented in [11, 31], are based on latency-based attestation, where a peripheral must compute a correct checksum value within a limited time. A compromised peripheral is detected if the checksum is incorrect or if the computation takes too long. Latency-based attestation requires modifying the peripheral’s firmware and the host needs to know the exact hardware configuration of the peripheral. The authors of [11] noted that their approach does not work correctly when peripherals generate heavy bus traffic, and they only considered one peripheral in their evaluation. Additionally, [32] highlighted serious issues with attestation approaches like those in [11], and it is unclear how well latency-based attestation can prevent transient attacks. BARM’s monitoring strategy, however, considers transient attacks.

BARM can be implemented with less effort and without detailed knowledge of the peripheral’s firmware and hardware, compared to latency-based attestation. However, BARM cannot detect man-in-the-middle attacks implemented in network cards, for example. Such attacks are excluded from our trust and adversary model (see Section 2). These attacks can be mitigated by employing end-to-end security measures, such as trusted channels [33].

Another approach, presented in [3], uses NIC adapter-specific debug features to monitor firmware execution. However, these features are not available for other peripherals, and there are significant performance issues, such as 100% utilization of one CPU core.

Several methods have been proposed to protect sensitive data, such as cryptographic keys, from memory attacks. These methods store sensitive data in processor registers or cache rather than in main memory [34–37]. However, [38] demonstrated how a DMA-based attack can force the host to leak sensitive data into main memory.

Sensitive data stored in main memory can also be protected using an I/O Memory Management Unit (I/OMMU) as proposed in [9, 39]. However, we do not rely on I/OMMUs due to the need for flawless configuration and the potential for successful attacks against them [12–15]. Furthermore, I/OMMUs are not supported by every chipset and operating system, and they can lead to memory access policy conflicts [4]. [40] further highlights the deficiencies of I/OMMUs.

Other related works use performance counters to detect malware, such as [41–43]. These works focus on malware executed on the host CPU rather than hidden in peripherals that attack the host via DMA.

#### Conclusions and Future Work
In this work, we demonstrate that the host CPU can detect additional, stealthy, and malicious main memory accesses originating from compromised peripherals. The basic idea is that the memory bus, a shared resource, is the attacker’s Achilles’ heel. We compare the expected bus activity, known by the system software, with the actual bus activity, which can be monitored because the bus is a shared resource. We developed a Proof-of-Concept (PoC) implementation, BARM, and evaluated our method with up to five bus masters, considering the most important bus systems (PCIe, FSB, memory bus) of a modern computer platform. BARM can identify and disable the specific attacking peripheral before it causes any damage.

Since the host CPU can detect DMA attacks, we conclude that it can successfully defend itself without any firmware or hardware modifications. Users do not need to rely on preventive mechanisms such as I/OMMUs. Our runtime monitoring strategy permanently monitors bus activity, prevents transient attacks, and has a negligible performance overhead. Therefore, we conclude that our method can be deployed in practice. Future work will include integrating more bus masters into BARM and evaluating their performance. We also plan to further examine and improve timing-based methods for our general detection model to detect malicious bus activity.

#### Acknowledgements
We would like to thank Dirk Kuhlmann and Chris Dalton from HP Labs Bristol for motivating discussions that initiated this work in the context of the Trust Domains project. We extend our thanks to SecT, especially to Dmitry Nedospasov and Jean-Pierre Seifert. We also thank Collin Mulliner for his advice and the anonymous reviewers for their valuable suggestions and comments.

#### References
[References remain unchanged]

---

This optimized text improves clarity, coherence, and professionalism, making it easier to understand and follow.