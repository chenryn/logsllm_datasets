master) when using the sudo or ssh command. BARM was started together with
the sudo or ssh command and stopped when the password had been entered.
BARM stopped unneeded bus masters and restarted them immediately after
the password prompt had been passed. We attacked the password promt with
our DMA-based keystroke logger DAGGER, which is executed on Intel’s ME,
see [4]. DAGGER scans the main memory via DMA for the physical address of
the keyboard buﬀer, which is also monitored via DMA.
Figure 9 (a) visualizes the measurements taken by BARM when the platform
is under attack. Under attack means that DAGGER is already loaded when the
user is asked for the password. Figure 9 (b) depicts the results of BARM when
the platform is attacked at an arbitrary point during runtime. For comparison
Figure 9 (a) and (b) also visualize BARM’s measurements when the platform
is not attacked. Figure 9 (c) is a fraction of the kernel log, which conﬁrms how
fast BARM stopped DAGGER. BARM detected the DMA attack at time stamp
350.401,045 s. At time stamp 350.465,042 s BARM identiﬁed the attacking DMA-
based peripheral. This test conﬁrms that BARM can even detect attacks before
the attacker does damage. BARM stopped the attack when the keystroke logger
was still in the search phase. That means, the keystroke logger did not ﬁnd the
keyboard buﬀer. Hence, the attacker was unable to capture any keystrokes.
We conﬁgured BARM with a PMU value sampling interval of 32 ms. Our
evaluation revealed that the attacker already generated more than 1000 memory
transactions in that time period. That means, that we could have chosen even a
signiﬁcantly higher tolerance value than T = 50.
6 Related Work
We focus on previous work that is related to attacks originating from peripherals.
The Trusted Computing Group proposed to attest the peripheral’s ﬁrmware
at load time [30]. This does not prevent runtime attacks and it is not ensured
that the host CPU is able to access all ROM components of a peripheral. Other
attestation approaches were presented in [11, 31], for example. They are based on
latency-based attestation, i. e., a peripheral needs not only to compute a correct
checksum value. It also has to compute the value in a limited amount of time.
A compromised peripheral is revealed if either the checksum value is wrong
or if the checksum computation took too much time. Latency-based attestation
approaches require modifying the peripheral’s ﬁrmware and the host needs to
know the exact hardware conﬁguration of the peripheral to be able to attest it.
The authors of [11] also state that their approach does not work correctly when
peripherals cause heavy bus traﬃc. They considered only one peripheral in their
evaluation. Furthermore, [32] revealed serious issues in attestation approaches
Revealing Stealthy Peripheral-Based Attacks on Main Memory
17
as presented in [11]. It is also unclear to what extent latency-based attestation
can prevent transient attacks. BARM’s monitoring strategy considers transient
attacks.
On the one hand, BARM can be implemented with less eﬀort and without de-
tailed knowledge of the inner workings of the peripheral’s ﬁrmware and hardware
compared to latency-based attestation approaches. On the other hand, BARM is
unable to detect a man-in-the-middle attack implemented in the network card,
for example. We excluded such attacks in our trust and adversary model (see
Section 2). Such attacks can be prevented by applying end-to-end security in the
form of a trusted channel [33], for instance.
Another interesting approach is presented in [3]. NIC adapter-speciﬁc debug
features are used to monitor the ﬁrmware execution. Such features are not avail-
able for other peripherals. Another deﬁciency is the signiﬁcant performance issue
for the host (100 % utilization of one CPU core).
To protect sensitive data such as cryptographic keys from memory attacks
several approaches were presented where sensitive data is only stored in processor
registers or in the cache and not in the main memory [34–37]. Unfortunately,
the authors of [38] demonstrated how to use a DMA-based attack to enforce the
host to leak the sensitive data into the main memory.
Sensitive data, which is stored in the main memory, could also be protected by
using an I/OMMU as proposed in [9, 39]. As already considered in our trust and
adversary model we do not count on I/OMMUs (see Section 2). An I/OMMU
must be conﬁgured ﬂawlessly [11, p.2]. Additionally, it was demonstrated how
I/OMMUs can be succesfully attacked [12–15]. Furthermore, I/OMMUs are not
applicable due to memory access policy conﬂicts [4] and they are not supported
by every chipset and OS. The authors of [40] further highlight the deﬁciencies
of I/OMMUs.
Further related works that use performance counters to detect malware exist,
see [41–43] for example. The focus of these works is malware that is executed on
the host CPU and not hidden in a peripheral that attacks the host via DMA.
7 Conclusions and Future Work
In this work we demonstrate that the host CPU is able to detect additional, i. e.,
stealthy and malicious main memory accesses that originate from compromised
peripherals. The basic idea is that the memory bus is a shared resource that
the attacker cannot circumvent to attack the platform’s main memory. This is
the attacker’s Achilles’ heel that we exploit for our novel detection method. We
compare the expected bus activity, which is known by the system software, with
the actual bus activity. The actual bus activity can be monitored due to the
fact that the bus is a shared resource. We developed the PoC implementation
BARM and evaluated our method with up to ﬁve bus masters considering the
most important bus systems (PCIe, FSB, memory bus) of a modern computer
platform. BARM can also identify the speciﬁc attacking peripheral and disable
it before the device causes any damage.
18
P. Stewin
Since the host CPU can detect DMA attacks, we conclude that the host
CPU can successfully defend itself without any ﬁrmware and hardware mod-
iﬁcations. The platform user does not have to rely on preventive mechanisms
such as I/OMMUs. We chose to implement a runtime monitoring strategy that
permanently monitors bus activity. Our monitoring strategy prevents transient
attacks and our evaluation demonstrates that the performance overhead is negli-
gible. Hence, we further conclude, that our method can be deployed in practice.
The integration of further bus masters into BARM as well as the evaluation of
the integrated masters are left to future work. We also plan to further examine
and improve timing-based methods for our general detection model to detect
malicious bus activity.
Acknowledgements. We would like to thank Dirk Kuhlmann and Chris Dal-
ton from HP Labs Bristol for motivating discussions that initiated this work
in the context of the Trust Domains project. We extend our thanks to SecT,
especially to Dmitry Nedospasov and Jean-Pierre Seifert. Speciﬁcally, we thank
Collin Mulliner for his advice about all areas as well as the anonymous reviewers
for their helpful suggestions and valuable comments.
References
1. Delugr´e, G.: Closer to metal: Reverse engineering the Broadcom NetExtreme’s
ﬁrmware. Sogeti ESEC Lab (2010), http://esec-lab.sogeti.com/dotclear/
public/publications/10-hack.lu-nicreverse slides.pdf
2. Delugr´e, G.: How to develop a rootkit for Broadcom NetExtreme network cards.
Sogeti ESEC Lab (2011), http://esec-lab.sogeti.com/dotclear/public/
publications/11-recon-nicreverse slides.pdf
3. Duﬂot, L., Perez, Y.-A., Morin, B.: What if you can’t trust your network card?
In: Sommer, R., Balzarotti, D., Maier, G. (eds.) RAID 2011. LNCS, vol. 6961, pp.
378–397. Springer, Heidelberg (2011)
4. Stewin, P., Bystrov, I.: Understanding DMA malware. In: Flegel, U., Markatos,
E., Robertson, W. (eds.) DIMVA 2012. LNCS, vol. 7591, pp. 21–41. Springer,
Heidelberg (2013)
5. Triulzi, A.:
Project Maux Mk.II.
The Alchemist Owl
(2008),
http://www.alchemistowl.org/arrigo/Papers/Arrigo-Triulzi-PACSEC08-
Project-Maux-II.pdf
6. Triulzi, A.: The Jedi Packet Trick takes over the Deathstar. The Alchemist Owl
(2010), http://www.alchemistowl.org/arrigo/Papers/Arrigo-Triulzi-
CANSEC10-Project-Maux-III.pdf
7. Breuk, R., Spruyt, A.: Integrating DMA attacks in Metasploit. Sebug (2012),
http://sebug.net/paper/Meeting-Documents/hitbsecconf2012ams/
D2%20SIGINT%20-%20Rory%20Breuk%20and%20Albert%20Spruyt%20-
%20Integrating%20DMA%20Attacks%20in%20Metasploit.pdf
8. Breuk, R.,
frameworks.
http://staff.science.uva.nl/~delaat/rp/2011-2012/p14/report.pdf
Spruyt, A.:
Faculty
Integrating DMA attacks
exploitation
of Amsterdam (2012),
in
of
Science. University
Revealing Stealthy Peripheral-Based Attacks on Main Memory
19
9. Duﬂot, L., Perez, Y., Valadon, G., Levillain, O.: Can you still trust your network
card (2010), http://www.ssi.gouv.fr/IMG/pdf/csw-trustnetworkcard.pdf
10. Abramson, D., Jackson, J., Muthrasanallur, S., Neiger, G., Regnier, G., Sankaran,
R., Schoinas, I., Uhlig, R., Vembu, B., Wiegert, J.: Intel Virtualization Technology
for Directed I/O. Intel Technology Journal 10(3), 179–192 (2006)
11. Li, Y., McCune, J., Perrig, A.: VIPER: Verifying the integrity of peripherals’
ﬁrmware. In: Proceedings of the ACM Conference on Computer and Communi-
cations Security (2011)
12. Sang, F.L., Lacombe, E., Nicomette, V., Deswarte, Y.: Exploiting an I/OMMU
vulnerability. In: Malicious and Unwanted Software, pp. 7–14 (2010)
13. Wojtczuk, R., Rutkowska, J., Tereshkin, A.: Another Way to Circumvent Intel
Trusted Execution Technology. ITL (2009), http://invisiblethingslab.com/
resources/misc09/Another%20TXT%20Attack.pdf
14. Wojtczuk, R., Rutkowska, J.: Following the White Rabbit: Software attacks against
Intel VT-d technology. ITL (2011), http://www.invisiblethingslab.com/
resources/2011/Software%20Attacks%20on%20Intel%20VT-d.pdf
15. Wojtczuk, R., Rutkowska, J.: Attacking Intel TXT via SINIT code execution hi-
jacking. ITL (2011), http://www.invisiblethingslab.com/resources/
2011/Attacking Intel TXT via SINIT hijacking.pdf
16. Duﬂot, L., Perez, Y., Morin, B.: Run-time ﬁrmware integrity veriﬁcation: what if
you can’t trust your network card? FNISA (2011),
http://www.ssi.gouv.fr/IMG/pdf/Duflot-Perez runtime-firmware-integrity-
verification.pdf
17. Stewin, P., Seifert, J.-P., Mulliner, C.: Poster: Towards Detecting DMA Malware.
In: Proceedings of the 18th ACM Conference on Computer and Communications
Security, pp. 857–860. ACM, New York (2011)
18. Buchanan, B.: Computer Busses. Electronics & Electrical. Taylor & Francis (2010)
19. Budruk, R., Anderson, D., Shanley, T.: Pci Express System Architecture. PC Sys-
tem Architecture Series. Addison-Wesley (2004)
20. Hennessy, J.L., Patterson, D.A.: Computer Architecture: A Quantitative Ap-
proach, 3rd edn. Morgan Kaufmann (2005)
21. Intel Corporation. Intel 3 Series Express Chipset Family. Intel Corporation (2007),
http://www.intel.com/Assets/PDF/datasheet/316966.pdf
22. Intel Corporation. Intel I/O Controller Hub (ICH9) Family. Intel Corporation
(2008), http://www.intel.com/content/dam/doc/datasheet/io-controller-
hub-9-datasheet.pdf
23. Abbott, D.: PCI Bus Demystiﬁed. Demystifying technology series. Elsevier (2004)
24. Anderson, D., Shanley, T.: Pci System Architecture. PC System Architecture Se-
ries. Addison-Wesley (1999)
25. Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s Man-
ual — Volume 3 (3A, 3B & 3C): System Programming Guide. Intel Corporation
(March 2012),
http://download.intel.com/products/processor/manual/325384.pdf
26. Reinders, J.: VTune Performance Analyzer Essentials: Measurement and Tuning
Techniques for Software Developers. Engineer to Engineer Series. Intel Press (2005)
Intel Corporation (2013),
Intel VTune Ampliﬁer 2013.
27. Intel Corporation.
http://software.intel.com/sites/products/documentation/doclib/stdxe/
2013/amplifierxe/lin/ug docs/index.htm
20
P. Stewin
28. Intel Corporation. Universal Host Controller Interface (UHCI) Design Guide.
The Slackware Linux Project (1996), ftp://ftp.slackware.com/pub/netwinder/
pub/misc/docs/29765002-usb-uhci%20design%20guide.pdf Revision 1.1
29. Russinovich, M.E., Solomon, D.A., Ionescu, A.: Windows Internals 6th Edition,
Part 2. Microsoft Press (2012)
30. Trusted Computing Group. TCG PC Client Speciﬁc Impementation Speciﬁcation
For Conventional BIOS. TCG: http://www.trustedcomputinggroup.org/files/
temp/64505409-1D09-3519-AD5C611FAD3F799B/
PCClientImplementationforBIOS.pdf, (2005)
31. Li, Y., McCune, J.M., Perrig, A.: SBAP: Software-based attestation for peripherals.
In: Acquisti, A., Smith, S.W., Sadeghi, A.-R. (eds.) TRUST 2010. LNCS, vol. 6101,
pp. 16–29. Springer, Heidelberg (2010)
32. Nguyen, Q.:
Issues
in Software-based Attestation. Kaspersky Lab (2012),
http://www.kaspersky.com/images/Quan%20Nguyen.pdf
33. Gasmi, Y., Sadeghi, A.-R., Stewin, P., Unger, M., Asokan, N.: Beyond secure chan-
nels. In: Proceedings of the 2007 ACM Workshop on Scalable Trusted Computing,
pp. 30–40. ACM, New York (2007)
34. M¨uller, T., Dewald, A., Freiling, F.C.: Aesse: a cold-boot resistant implementation
of aes. In: Proceedings of the Third European Workshop on System Security, pp.
42–47. ACM, New York (2010)
35. M¨uller, T., Freiling, F.C., Dewald, A.: Tresor runs encryption securely outside
ram. In: Proceedings of the 20th USENIX Conference on Security, p. 17. USENIX
Association, Berkeley (2011)
36. Simmons, P.: Security through amnesia: a software-based solution to the cold boot
attack on disk encryption. In: Proceedings of the 27th Annual Computer Security
Applications Conference, pp. 73–82. ACM, New York (2011)
37. Vasudevan, A., McCune, J., Newsome, J., Perrig, A., van Doorn, L.: Carma: a
hardware tamper-resistant isolated execution environment on commodity x86 plat-
forms. In: Proceedings of the 7th ACM Symposium on Information, Computer and
Communications Security, pp. 48–49. ACM, New York (2012)
38. Blass, E., Robertson, W.: Tresor-hunt: attacking cpu-bound encryption. In:
Proceedings of the 28th Annual Computer Security Applications Conference,
pp. 71–78. ACM, New York (2012)
39. M¨uller, T., Taubmann, B., Freiling, F.C.: Trevisor: Os-independent software-based
full disk encryption secure against main memory attacks. In: Bao, F., Samarati,
P., Zhou, J. (eds.) ACNS 2012. LNCS, vol. 7341, pp. 66–83. Springer, Heidelberg
(2012)
40. Sang, F.L., Nicomette, V., Deswarte, Y.: I/O Attacks in Intel-PC Architectures
and Countermeasures. SysSec (2011), http://www.syssec-project.eu/media/
page-media/23/syssec2011-s1.4-sang.pdf
41. Wicherski, G.: Taming ROP on Sandy Bridge. SyScan (2013),
http://www.syscan.org/index.php/download
42. Xia, Y., Liu, Y., Chen, H., Zang, B.: Cﬁmon: Detecting violation of control
ﬂow integrity using performance counters. In: Proceedings of the, 42nd An-
nual IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN), DSN 2012, pp. 1–12. IEEE Computer Society, Washington, DC (2012)
43. Malone, C., Zahran, M., Karri, R.: Are hardware performance counters a cost
eﬀective way for integrity checking of programs. In: Proceedings of the sixth ACM
Workshop on Scalable Trusted Computing, STC 2011, pp. 71–76. ACM, New York
(2011)