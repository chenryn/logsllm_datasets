Mechanism. Mechanisms are deﬁned by formulae ψ of type
Φ± (abbreviated by ψ : Φ±). ψ references the triggering
(desired) action ua (possibly nil, i.e., no trigger is provided)
together with its Mode m. The latter indicates whether
or not the triggering action refers to a ﬁrst usage or to all
usages, i.e., ﬁrst and ongoing usages (Mode ::= fst | all ).
We do not require ua to be maximally reﬁned as we often
want to specify an entire class of triggering actions. For
instance, we may wish to specify that playing a movie is
prohibited, without enumerating all possible devices. ψ also
references the condition ϕ : Φ− under which the mechanism
performs its task, and the eﬀects α : Φ+. The deﬁnition does
not relate mechanisms to sets of traces of a usage-controlled
system yet; this will be done below. maxRefs computes the
set of maximally reﬁned events for any event; this is needed
because traces consist of maximally reﬁned events only.
If the triggering action of a mechanism is executed—as
indicated by a respective TRY event and syntactically cap-
tured by predicates Tfst and Tall (in the schema, we use
variable m : Mode as index)—then we require the following.
Under the assumption that adding the actual usage satisﬁes
ϕ, the eﬀect α of the mechanism is “executed.” This means
that, in principle, a mechanism can itself invalidate its con-
dition (and this can also be done by other mechanisms).
When applying a mechanism, then the respective TRY (·)
events are kept because more than one mechanism may be
applicable. The remaining desired actions that are not con-
trolled by any mechanism—either because they are not trig-
gering events of any mechanism or because no condition was
true—are transformed into actual usages in the end. We re-
quire ϕ not to depend on any TRY events. This is what the
auxiliary function rmTry : Trace → Trace is needed for.
Mechanisms are parameterized. The respective variables
are used in both the triggering actions (ua p) and the con-
ditions (ϕp). By providing substitutions σ, variables are
241
instantiated. The process of instantiating variables models
the conﬁguration of mechanisms.
Four Classes of Mechanisms. There are four classes of
control mechanisms [2]: inhibition, ﬁnite delay, modiﬁcation
of usage, and execution of actions. Inhibition reduces the set
of possible executions. Delays postpone usages. Modiﬁca-
tions change usages, for instance, by converting an editing
usage into a reading usage only or by lowering the quality
of an output signal. The execution of actions adds events
to the execution, e.g., logging events, or sending signals to
the provider. In principle, all usage control policies could
be enforced by inhibitors and executors only; modiﬁers and
delayers merely increase user convenience. For instance, a
mechanism may not categorically forbid watching unpaid
movies, but rather reduce the quality considerably.
Because we diﬀerentiate between desired and actual us-
ages, the eﬀect of a mechanism may add events to a trace,
but never remove any.
Inhibition is then modeled as not
adding the actual usage corresponding to a desired usage.
The eﬀect of applying a set of mechanisms to a trace is
the trace that satisﬁes all formulae of the mechanisms and
that, in addition, exhibits, at each time step, a minimum set
of events—mechanisms may add events that relate to their
“task” but not arbitrary events. This is handled below.
Executors add events to a trace. If event ua is desired at
time t and ϕ also holds at t, then the sequences of events in
exacts are executed. The composition of mechanisms (given
below) ensures that the desired usage ua is also converted
into an actual usage, provided that this would not aﬀect
any other mechanism. Function subst substitutes variables
w.r.t. the substitution provided as σ by schema Mechanism.
Executor
Mechanism;
exacts = map
(cid:94)
(cid:161)
#es(cid:94)
exactsp : P seq VarEv ;
λ t : seq VarEv • maps(λ x : VarEv •
subst(x , σ), t), exactsp
exacts : P seq Ev
(cid:162)
α =
es∈exacts
i=1
after (i − 1, Tall (es(i)))
The Eraser deletes an object (variable V (1)) V (2) days
after it was stored. Note the absence of a triggering action.
Eraser
Executor [before−(V (2), Efst ((store, {(obj , V (1))})))∧−
¬−within−(V (2), Efst ((delete, {(obj , V (1))})))/ϕp ,
(nil, ∅)/uap , fst/m, {(cid:104)(delete, {(obj , V (1))})(cid:105)}/exactsp ]
Modiﬁers replace an event ua by a set of events modifyBy
under certain conditions. Constraint 2 of schema Modiﬁer
states that, in contrast to executors, modiﬁers are always
triggered by a desired usage and, furthermore, that events
are replaced by diﬀerent events. The speciﬁed eﬀect, α, is
similar to that of Executors, except that the events that are
added are drawn from the set modifyBy rather than exacts
and that ua is not added if the mechanism is applicable. An
example of a modiﬁer is given by the schema NoPayNoGood :
songs not paid for will only be played in reduced quality.
Modiﬁer
Mechanism; modifyByp : P VarEv ; modifyBy : P Ev
modifyBy = maps(λ x : VarEv • subst(x , σ), modifyByp )
ua (cid:54)= (nil, ∅) ∧ ua (cid:54)∈ modifyBy
α = ¬Em (ua) ∧
(cid:94)
Tall (e)
e∈modifyBy
NoPayNoGood
Modiﬁer [always−(¬−Efst ((pay, {(obj , V (1))})))/ϕp ,
(play, {(obj , V (1), (qual, full))})/uap , all/m,
{(play, {(obj , V (1)), (qual, red)})}/modifyByp ]
Inhibitors prevent speciﬁed events from happening when
given conditions are met. Hence, they are modiﬁers with an
empty modifyBy set. An example for an inhibiting control
mechanism is given by the schema Subscription. It ensures
that each play is preceded by a pay that dates back at most
V (2) days.
Inhibitor
Modiﬁer [∅/modifyByp ]
Subscription
Inhibitor [¬−within−(V (2), Efst ((pay, {(obj , V (1))})))/ϕp ,
(play, {(obj , V (1))})/uap , all/m]
Delayers. Delaying mechanisms perform a sequence of
events, seqe, if ua is desired and condition ϕ is true. Once
this sequence of events has occurred, the request to execute
ua is expressed again. Delayers always delay an attempted
usage, which motivates the second constraint of schema De-
layer. We omit an example for brevity’s sake [2].
Delayer
Mechanism;
ua (cid:54)= (nil, ∅) ∧ seqe = map(λ x : VarEv • subst(x , σ), seqep )
seqep : seq1 VarEv ;
seqe : seq1 Ev
α = ¬Em (ua) ∧ #seqe(cid:94)
after (i − 1, Tall (seqe(i))) ∧
i=1
after (#seqe, Tm (ua))
Composition and Semantics.
In this paper, we use
trace transformers to express properties of usage-controlled
systems, as opposed to simply using sets of traces. If the se-
mantics of a set of mechanisms and the system speciﬁcation
were both given by sets of traces, then we could simply deﬁne
the composition of the two as the intersection of the sets of
traces. However, this imposes constraints on the system: it
must be liberal enough, i.e., under-speciﬁed, to allow for the
eﬀects of applying mechanisms (because we do not conﬁne
ourselves to inhibitors, applying mechanisms is not simply
a trace reﬁnement). In contrast, specifying mechanisms as
trace transformers allows us to apply them to arbitrary sys-
tems that, when speciﬁed, must not take into account the
possibility of future mechanisms being applied.
Simultaneously applied mechanisms may interfere with
each other: two mechanisms may be triggered by the same
event; the eﬀect of one mechanism may trigger another (and
this may lead to loops); and the eﬀect of one mechanism may
invalidate the condition of a mechanism that was applied be-
fore. We simply forbid such cases here [2].
The schema CombinedMechanism above deﬁnes the com-
∗
position of mechanisms in terms of functions µ and µ
.
The trace transformer µ applies all mechanisms and pos-
sibly adds usages that are allowed by the mechanisms (e.g.,
action ua of executors). The function µ
afterwards trans-
forms TRY events that are not controlled by any mech-
anism into the respective actual usage, and then removes
all remaining TRY events. We use an auxiliary function,
addEv : Trace × N × Ev × Mode → Trace, that adds an ev-
ent with a given mode to a trace at a speciﬁed time.
∗
Constraint 2 of this schema speciﬁes three conditions,
242
CombinedMechanism
∧
(cid:180)
¬−u.ϕ
(cid:180)
¬−u.ϕ
⇒ (o, t) |=f Emd (e)
I : P Inhibitor ; D : P Delayer ; E : P Executor
M : P Modiﬁer ;
µ : Trace → Trace; µ∗ : Trace → Trace; ucmechs : P(Modiﬁer ∪ Inhibitor ∪ Delayer ∪ Executor )
ucmechs = M ∪ I ∪ D ∪ E
∀ i : Trace; t : N; e : Ev ; md : Mode • i(t) ⊆ (µ(i))(t) ∧ (µ(i), t) |=f ±
(cid:94)
(cid:179)
(addEv (µ(i), t, e, md), t) |=f − Tmd (e) ∧−
(cid:179)
(addEv (o, t, e, md), t) |=f − Tmd (e) ∧−
∀ i : Trace; t : N; e : Ev ; md : Mode • ¬ ∃ o : Trace • (o, t) |=f ±
∧
∧ i(t) ⊆ o(t) ∧ o(t) ⊆ (µ(i))(t) ∧ ∃ t(cid:48) : N • i(t(cid:48)) ⊂ o(t(cid:48)) ∧ o(t(cid:48)) ⊂ (µ(i))(t(cid:48))
∀ i : Trace; t : N • (µ∗(i))(t) = ((µ(i))(t) \ DesIndEv ) ∪ {e : Ev ; j : Index |
u∈{v :ucmechs|(e reﬁnesEv v .ua∨v .ua=(nil,∅))∧v .m=md}
u.ψ
(cid:94)
u∈ucmechs
⇒ (µ(i), t) |=f Emd (e)
(cid:94)
(cid:94)
u.ψ
u∈ucmechs