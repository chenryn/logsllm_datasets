图28: 扩展SharedSecret
分析发现该函数使用HKDF函数，所以看到了函数`pyhkdf`，还被用于扩展key：
    shared_expended = self.conn_data[“shared_secret_ex”] = HKDF(self.conn_data[“shared_secret”], 80)
然后，hmac验证函数会将扩展的数据看作参数`e`，然后分成三部分：
  * i – shared_expended的前32字节
  * r – 32字节的32字节
  * o –64字节的16字节
还有一个参数`s`，用来将参数`n`和`a`连接在一起。
图29: HmacSha256
然后用参数`r`调用`HmacSha256`函数，函数会用参数`s`对数据进行签名，之后就收到`hmac`验证，并于`r`进行比较。
`r`是`t`的32字节到64字节，`t`是数组格式的加密数据。
图30: 检查消息的有效性
Python代码如下：
    check_hmac = HmacSha256(shared_expended[32:64], self.conn_data[“secret”][:32] + self.conn_data[“secret”][64:]) if check_hmac != self.conn_data[“secret”][32:64]:
    raise ValueError(“Error hmac mismatch”)
最后与加密相关的函数是`aesCbcDecrypt`，它用参数`s`将64字节之后的扩展数据、扩展数据的前32字节（参数`i`）和secret
64字节之后的数据连接在一起。
图31: 获取AES key和MAC key
解密密钥随后会使用，然后对代码进行翻译：
    keysDecrypted = AESDecrypt(shared_expended[:32], shared_expended[64:] + self.conn_data[“secret”][64:])
解密后，就得到t即前32字节数据，也就是加密密钥，之后的32字节数据就是mac密钥：
    self.conn_data[“key”][“aes_key”] = keysDecrypted[:32]
    self.conn_data[“key”][“mac_key”] = keysDecrypted[32:64]
整体代码如下：
    self.conn_data[“private_key”] = curve25519.Private(“”.join([chr(x) for x in priv_key_list]))
    self.conn_data[“public_key”]  = self.conn_data[“private_key”].get_public()
    assert (self.conn_data[“public_key”].serialize() == “”.join([chr(x) for x in pub_key_list]))
    self.conn_data[“secret”] = base64.b64decode(ref_dict[“secret”])
    self.conn_data[“shared_secret”] = self.conn_data[“private_key”].get_shared_key(curve25519.Public(self.conn_data[“secret”][:32]), lambda key: key)
    shared_expended = self.conn_data[“shared_secret_ex”] = HKDF(self.conn_data[“shared_secret”], 80)
    check_hmac = HmacSha256(shared_expended[32:64], self.conn_data[“secret”][:32] + self.conn_data[“secret”][64:])
    if check_hmac != self.conn_data[“secret”][32:64]:
    raise ValueError(“Error hmac mismatch”)
    keysDecrypted = AESDecrypt(shared_expended[:32], shared_expended[64:] + self.conn_data[“secret”][64:])
    self.conn_data[“key”][“aes_key”] = keysDecrypted[:32]
    self.conn_data[“key”][“mac_key”] = keysDecrypted[32:64]
有了生成QR码的所有加密参数，就可以加入解密过程了。
首先，拦截（获取）消息：
图32: 收到的加密后的消息
可以看到，消息是分成两部分的：tag和数据。可以用下面的函数解密消息：
    def decrypt_incoming_message(self, message):
    message = base64.b64decode(message)
    message_parts = message.split(“,”, 1)
    self.message_tag = message_parts[0]
    content = message_parts[1]
    check_hmac = hmac_sha256(self.conn_data[“mac_key”], content[32:])
    if check_hmac != content[:32]:
    raise ValueError(“Error hmac mismatch”)
    self.decrypted_content = AESDecrypt(self.conn_data[“aes_key”], content[32:])
    self.decrypted_seralized_content = whastsapp_read(self.decrypted_content, True)
    return self.decrypted_seralized_content
从中可以看出，为了方便复制Unicode数据，接收的数据是base64编码的。在burp中，可以用ctrl+b对数据进行base64编码，然后传递给函数`decrypt_incomping_message`。函数会把tag与内容分割开，然后通过比较`hmac_sha256(self.conn_data[“mac_key“],
content[32:])`和`content[:32]`来检查密钥是否可以解密数据。
如果都匹配的话，那么继续进入AES解密步骤，需要使用AES Key和32字节的内容。  
内容中含有`IV`，也就是aes区块的大小，然后是真实数据：
    self.decrypted_content = AESDecrypt(self.conn_data[“aes_key”], content[32:])
函数的输出是`protobuf`（是google 的一种数据交换的格式,它独立于语言,独立于平台）：
图33: Protobuf格式的加密数据
然后用`whatsapp_read`函数将其翻译为`json`格式。
## 解密收到的消息
为了解密收到的消息，首先要了解WhatsApp协议的工作原理，所以要调试函数`e.decrypt`：
图34: ReadNode函数
`ReadNode`函数会触发`readNode`：
图35: ReadNode函数
把所有代码翻译为python来表示相同的功能：
代码首先从数据流中读取一字节的内容，然后将其移动到`char_data`，然后用函数`read_list_size`读取入数据流的列表大小。
然后调用`token_byte`获取另一个字节，`token_byte`会被传递给`read_string`：
图36: ReadString函数
代码使用了`getToken`，并把参数传递到token数组的一个位置上：
图37: getToken函数
这是通信中WhatsApp发送的第一项，然后翻译`readString`函数中的所有函数，并继续调试：
然后就可以看到`readNode`函数中的`readAttributes`函数：
图38: readAttribues函数
`readAttributes`函数会继续从数据流中读取字节，并通过相同的token列表进行语法分析：
WhatsApp发送的第二个参数是消息的真实动作，WhatsApp发送`{add:”replay”}`表示新消息到达。  
继续查看`readNode`函数代码，看到发送的消息的三个部分：
  * 相同的token
  * 相同的token属性
  * protobuf编码的消息
图39: 解密的数组
接下来要处理的是第三个参数`protobuf`，然后解密。
为了了解Whatsapp使用的`protobuf`方案，将其复制到空的`.proto`文件中：
图40: protobuf
索引也可以从Whatsapp protobuf方案中复制，并编译为python protobuf文件：
然后用python函数将protobuf翻译为json。
图41: 解密的数据
在扩展中应用之后就可以解密通信了：
图42: 使用扩展来解密数据
## WhatsApp加密（加密收到的消息）
加密的过程与解密过程相似，就是顺序不同，这里要逆向的是writeNode函数：
图43: writeNode 函数
图44: writeNode函数
有了token和token属性之后，那么需要做的与`readNode`中一样：
首先，检查节点长度是不是3；然后给token属性数乘2，并传递给`writeListStart`，`writeListStart`会写类别字符的开始和列表大小，与`readNode`一样：
然后进入`writeString`，可以看到翻译为`X`的action和`token index`中action的位置：
图45: writeToken函数
翻译代码和所有函数：
`writeAttributes`会翻译属性，之后由`writeChildren`翻译真实数据。
图46: writeChildren函数
翻译函数：
解密和解密消息如下：
为了简化加密的过程，研究人员修改了真实的`writeChildren`函数，然后添加了另一个实例来让加密过程更简单：
结果就是加密和解密的收到的消息。
解密发送的数据请查看github代码：  