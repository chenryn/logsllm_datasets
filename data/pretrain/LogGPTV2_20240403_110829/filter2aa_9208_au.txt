\&           } map { [$_, /=(\ed+)/, uc($_)] } @old;
.Ve
.Sp
.Vb 4
\&    # using a prototype allows you to use any comparison subroutine
\&    # as a sort subroutine (including other package's subroutines)
\&    package other;
\&    sub backwards ($$) { $_[1] cmp $_[0]; }     # $a and $b are not set here
.Ve
.Sp
.Vb 2
\&    package main;
\&    @new = sort other::backwards @old;
.Ve
.Sp
.Vb 3
\&    # guarantee stability, regardless of algorithm
\&    use sort 'stable';
\&    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;
.Ve
.Sp
.Vb 3
\&    # force use of mergesort (not portable outside Perl 5.8)
\&    use sort '_mergesort';  # note discouraging _
\&    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;
.Ve
.Sp
If you're using strict, you \fImust not\fR declare \f(CW$a\fR
and \f(CW$b\fR as lexicals.  They are package globals.  That means
if you're in the \f(CW\*(C`main\*(C'\fR package and type
.Sp
.Vb 1
\&    @articles = sort {$b  $a} @files;
.Ve
.Sp
then \f(CW$a\fR and \f(CW$b\fR are \f(CW$main::a\fR and \f(CW$main::b\fR (or \f(CW$::a\fR and \f(CW$::b\fR),
but if you're in the \f(CW\*(C`FooPack\*(C'\fR package, it's the same as typing
.Sp
.Vb 1
\&    @articles = sort {$FooPack::b  $FooPack::a} @files;
.Ve
.Sp
The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying \f(CW$x[1]\fR is less than \f(CW$x[2]\fR and
sometimes saying the opposite, for example) the results are not
well\-defined.
.Sp
Because \f(CW\*(C`\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR when either operand is \f(CW\*(C`NaN\*(C'\fR
(not\-a\-number), and because \f(CW\*(C`sort\*(C'\fR will trigger a fatal error unless the
result of a comparison is defined, when sorting with a comparison function
like \f(CW\*(C`$a  $b\*(C'\fR, be careful about lists that might contain a \f(CW\*(C`NaN\*(C'\fR.
The following example takes advantage of the fact that \f(CW\*(C`NaN != NaN\*(C'\fR to
eliminate any \f(CW\*(C`NaN\*(C'\fRs from the input.
.Sp
.Vb 1
\&    @result = sort { $a  $b } grep { $_ == $_ } @input;
.Ve
.IP "splice \s-1ARRAY\s0,OFFSET,LENGTH,LIST" 8
.IX Item "splice ARRAY,OFFSET,LENGTH,LIST"
.PD 0
.IP "splice \s-1ARRAY\s0,OFFSET,LENGTH" 8
.IX Item "splice ARRAY,OFFSET,LENGTH"
.IP "splice \s-1ARRAY\s0,OFFSET" 8
.IX Item "splice ARRAY,OFFSET"
.IP "splice \s-1ARRAY\s0" 8
.IX Item "splice ARRAY"
.PD
Removes the elements designated by \s-1OFFSET\s0 and \s-1LENGTH\s0 from an array, and
replaces them with the elements of \s-1LIST\s0, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or \f(CW\*(C`undef\*(C'\fR if no elements are
removed.  The array grows or shrinks as necessary.
If \s-1OFFSET\s0 is negative then it starts that far from the end of the array.
If \s-1LENGTH\s0 is omitted, removes everything from \s-1OFFSET\s0 onward.
If \s-1LENGTH\s0 is negative, removes the elements from \s-1OFFSET\s0 onward
except for \-LENGTH elements at the end of the array.
If both \s-1OFFSET\s0 and \s-1LENGTH\s0 are omitted, removes everything. If \s-1OFFSET\s0 is
past the end of the array, perl issues a warning, and splices at the
end of the array.
.Sp
The following equivalences hold (assuming \f(CW\*(C`$[ == 0 and $#a >= $i\*(C'\fR )
.Sp
.Vb 5
\&    push(@a,$x,$y)      splice(@a,@a,0,$x,$y)
\&    pop(@a)             splice(@a,-1)
\&    shift(@a)           splice(@a,0,1)
\&    unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)
\&    $a[$i] = $y         splice(@a,$i,1,$y)
.Ve
.Sp
Example, assuming array lengths are passed before arrays:
.Sp
.Vb 10
\&    sub aeq {   # compare two list values
\&        my(@a) = splice(@_,0,shift);
\&        my(@b) = splice(@_,0,shift);
\&        return 0 unless @a == @b;       # same len?
\&        while (@a) {
\&            return 0 if pop(@a) ne pop(@b);
\&        }
\&        return 1;
\&    }
\&    if (&aeq($len,@foo[1..$len],0+@bar,@bar)) { ... }
.Ve
.IP "split /PATTERN/,EXPR,LIMIT" 8
.IX Item "split /PATTERN/,EXPR,LIMIT"
.PD 0
.IP "split /PATTERN/,EXPR" 8
.IX Item "split /PATTERN/,EXPR"
.IP "split /PATTERN/" 8
.IX Item "split /PATTERN/"
.IP "split" 8
.IX Item "split"
.PD
Splits a string into a list of strings and returns that list.  By default,
empty leading fields are preserved, and empty trailing ones are deleted.
.Sp
In scalar context, returns the number of fields found and splits into
the \f(CW@_\fR array.  Use of split in scalar context is deprecated, however,
because it clobbers your subroutine arguments.
.Sp
If \s-1EXPR\s0 is omitted, splits the \f(CW$_\fR string.  If \s-1PATTERN\s0 is also omitted,
splits on whitespace (after skipping any leading whitespace).  Anything
matching \s-1PATTERN\s0 is taken to be a delimiter separating the fields.  (Note
that the delimiter may be longer than one character.)
.Sp
If \s-1LIMIT\s0 is specified and positive, it represents the maximum number
of fields the \s-1EXPR\s0 will be split into, though the actual number of
fields returned depends on the number of times \s-1PATTERN\s0 matches within
\&\s-1EXPR\s0.  If \s-1LIMIT\s0 is unspecified or zero, trailing null fields are
stripped (which potential users of \f(CW\*(C`pop\*(C'\fR would do well to remember).
If \s-1LIMIT\s0 is negative, it is treated as if an arbitrarily large \s-1LIMIT\s0
had been specified.  Note that splitting an \s-1EXPR\s0 that evaluates to the
empty string always returns the empty list, regardless of the \s-1LIMIT\s0
specified.
.Sp
A pattern matching the null string (not to be confused with
a null pattern \f(CW\*(C`//\*(C'\fR, which is just one member of the set of patterns
matching a null string) will split the value of \s-1EXPR\s0 into separate
characters at each point it matches that way.  For example:
.Sp
.Vb 1
\&    print join(':', split(/ */, 'hi there'));
.Ve
.Sp
produces the output 'h:i:t:h:e:r:e'.
.Sp
Using the empty pattern \f(CW\*(C`//\*(C'\fR specifically matches the null string, and is
not be confused with the use of \f(CW\*(C`//\*(C'\fR to mean \*(L"the last successful pattern
match\*(R".
.Sp
Empty leading (or trailing) fields are produced when there are positive width
matches at the beginning (or end) of the string; a zero-width match at the
beginning (or end) of the string does not produce an empty field.  For
example:
.Sp
.Vb 1
\&   print join(':', split(/(?=\ew)/, 'hi there!'));
.Ve
.Sp
produces the output 'h:i :t:h:e:r:e!'.
.Sp
The \s-1LIMIT\s0 parameter can be used to split a line partially
.Sp
.Vb 1
\&    ($login, $passwd, $remainder) = split(/:/, $_, 3);
.Ve
.Sp
When assigning to a list, if \s-1LIMIT\s0 is omitted, or zero, Perl supplies
a \s-1LIMIT\s0 one larger than the number of variables in the list, to avoid
unnecessary work.  For the list above \s-1LIMIT\s0 would have been 4 by
default.  In time critical applications it behooves you not to split
into more fields than you really need.
.Sp
If the \s-1PATTERN\s0 contains parentheses, additional list elements are
created from each matching substring in the delimiter.
.Sp
.Vb 1
\&    split(/([,-])/, "1-10,20", 3);
.Ve
.Sp
produces the list value
.Sp
.Vb 1
\&    (1, '-', 10, ',', 20)
.Ve
.Sp
If you had the entire header of a normal Unix email message in \f(CW$header\fR,
you could split it up into fields and their values this way:
.Sp
.Vb 2
\&    $header =~ s/\en\es+/ /g;  # fix continuation lines
\&    %hdrs   =  (UNIX_FROM => split /^(\eS*?):\es*/m, $header);
.Ve
.Sp
The pattern \f(CW\*(C`/PATTERN/\*(C'\fR may be replaced with an expression to specify
patterns that vary at runtime.  (To do runtime compilation only once,
use \f(CW\*(C`/$variable/o\*(C'\fR.)
.Sp
As a special case, specifying a \s-1PATTERN\s0 of space (\f(CW'\ '\fR) will split on
white space just as \f(CW\*(C`split\*(C'\fR with no arguments does.  Thus, \f(CW\*(C`split('\ ')\*(C'\fR can
be used to emulate \fBawk\fR's default behavior, whereas \f(CW\*(C`split(/\ /)\*(C'\fR
will give you as many null initial fields as there are leading spaces.
A \f(CW\*(C`split\*(C'\fR on \f(CW\*(C`/\es+/\*(C'\fR is like a \f(CW\*(C`split('\ ')\*(C'\fR except that any leading
whitespace produces a null first field.  A \f(CW\*(C`split\*(C'\fR with no arguments
really does a \f(CW\*(C`split('\ ',\ $_)\*(C'\fR internally.
.Sp
A \s-1PATTERN\s0 of \f(CW\*(C`/^/\*(C'\fR is treated as if it were \f(CW\*(C`/^/m\*(C'\fR, since it isn't
much use otherwise.
.Sp
Example:
.Sp
.Vb 7
\&    open(PASSWD, '/etc/passwd');
\&    while () {
\&        chomp;
\&        ($login, $passwd, $uid, $gid,
\&         $gcos, $home, $shell) = split(/:/);
\&        #...
\&    }
.Ve
.Sp
As with regular pattern matching, any capturing parentheses that are not
matched in a \f(CW\*(C`split()\*(C'\fR will be set to \f(CW\*(C`undef\*(C'\fR when returned:
.Sp
.Vb 2
\&    @fields = split /(A)|B/, "1A2B3";
\&    # @fields is (1, 'A', 2, undef, 3)
.Ve
.IP "sprintf \s-1FORMAT\s0, \s-1LIST\s0" 8
.IX Item "sprintf FORMAT, LIST"
Returns a string formatted by the usual \f(CW\*(C`printf\*(C'\fR conventions of the C
library function \f(CW\*(C`sprintf\*(C'\fR.  See below for more details
and see \fIsprintf\fR\|(3) or \fIprintf\fR\|(3) on your system for an explanation of
the general principles.
.Sp
For example:
.Sp
.Vb 2
\&        # Format number with up to 8 leading zeroes
\&        $result = sprintf("%08d", $number);
.Ve
.Sp
.Vb 2
\&        # Round number to 3 digits after decimal point
\&        $rounded = sprintf("%.3f", $number);
.Ve
.Sp
Perl does its own \f(CW\*(C`sprintf\*(C'\fR formatting\*(--it emulates the C
function \f(CW\*(C`sprintf\*(C'\fR, but it doesn't use it (except for floating-point
numbers, and even then only the standard modifiers are allowed).  As a
result, any non-standard extensions in your local \f(CW\*(C`sprintf\*(C'\fR are not
available from Perl.
.Sp
Unlike \f(CW\*(C`printf\*(C'\fR, \f(CW\*(C`sprintf\*(C'\fR does not do what you probably mean when you
pass it an array as your first argument. The array is given scalar context,
and instead of using the 0th element of the array as the format, Perl will
use the count of elements in the array as the format, which is almost never
useful.
.Sp
Perl's \f(CW\*(C`sprintf\*(C'\fR permits the following universally-known conversions:
.Sp
.Vb 10
\&   %%   a percent sign
\&   %c   a character with the given number
\&   %s   a string