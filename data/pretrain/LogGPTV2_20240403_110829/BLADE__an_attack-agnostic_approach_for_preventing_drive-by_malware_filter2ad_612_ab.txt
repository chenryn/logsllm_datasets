**BLADE System: Ensuring Secure and User-Consented Downloads**

BLADE is designed to enforce a strict policy on the execution of on-disk data content received through the browser process tree, unless such content can be directly linked to a user consent dialog event. This enforcement is achieved without disrupting normal browser operations. Specifically, BLADE supports automated software updates, a common practice among browsers and their plugins, through source domain whitelisting. Browser-native code execution mechanisms, like Native Client, are not affected by BLADE as they rely on the preinstalled client rather than the operating system (OS) to load and execute the code.

### Key Technical Challenges and Design Goals

1. **Real-time User Authorization Capture and Interpretation:**
   - BLADE must monitor user-to-browser interaction events to capture explicit user authorizations for upcoming downloads.
   - From each captured authorization, BLADE must extract identity information (remote URL, file name, and local path) to uniquely identify the resulting file.

2. **Robust Correlation Between Authorization and Download Content:**
   - BLADE must programmatically distinguish user-initiated browser downloads from unauthorized ones and reliably correlate every authorization event with the corresponding binary stream downloaded from the network.

3. **Stringent Enforcement of Execution Prevention:**
   - Files containing unauthorized download content must be prevented from execution, while other types of access from supervised processes are allowed. This enforcement should not impede normal browser and program operations.

4. **Browser-Agnostic Enforcement:**
   - BLADE must not depend on the integrity of browsers or their internal handling of tasks. It must remain effective even in the face of new browser attack strategies and potential compromises due to software vulnerabilities.

5. **Exploit and Evasion Independence:**
   - BLADE’s enforcement mechanism must be agnostic to exploits used to subvert the browser into performing drive-by downloads, making it immune to sophisticated evasion techniques, including code obfuscations and zero-day vulnerabilities.

6. **Efficient and Usable System Performance:**
   - BLADE’s performance impact on browser content handling must be negligible. It should not impose perceptible delays to normal browser operations and have no impact on non-browser host operations.

### System Architecture

#### 1. Front-End Components
- **Screen Parser:**
  - Monitors kernel windowing events to detect changes in on-screen UI elements in real time.
  - Signals the Supervisor upon the appearance of a download consent dialog and reports necessary information.
  - Uses UI signatures to identify download consent dialogs and extract download identity information (e.g., URL, file name).

- **Hardware-Event Tracer:**
  - Intercepts subsequent mouse and keyboard input events that would trigger the download confirmation.
  - Captures hardware events to ensure unforgeability in our threat model.

- **Supervisor:**
  - Coordinates all tasks of BLADE, assigning tasks to other components and managing internal communications.
  - Maintains a list of supervised processes to ensure correct functioning of BLADE routines.
  - Registers callback routines for process creation and termination events.

#### 2. Back-End Components
- **Correlator:**
  - Ensures resistance to spoofing attacks by validating the authenticity of the downloaded file corresponding to a user download consent.
  - Matches a file with a tuple (URL, Path) to uniquely delegate a user download authorization.

- **I/O Redirector:**
  - Intercepts disk write operations initiated from the browser process tree and redirects them to a secure zone where execution is explicitly prohibited.
  - Moves files that pass the download correlation process back to their original destination in the file system.

### Detailed Workflow

1. **Screen Parser:**
   - Detects the appearance of a download consent dialog and signals the Supervisor.
   - Extracts and reports necessary information from the dialog.

2. **Supervisor:**
   - Initiates the Hardware-Event Tracer to capture user interactions.
   - Manages the list of supervised processes and coordinates with other components.

3. **Hardware-Event Tracer:**
   - Tracks user interactions (mouse clicks, keystrokes) with the download consent dialog.
   - Captures the user's response and terminates tracing after a few seconds.

4. **Correlator:**
   - Validates the authenticity of the downloaded file.
   - Matches the file with the user-authorized remote URL and local path.

5. **I/O Redirector:**
   - Redirects disk write operations to a secure zone.
   - Moves correlated files back to their original destination.

### Implementation Considerations

- **Performance Optimization:**
  - The Screen Parser uses an agent in user space to prefilter irrelevant windowing events, optimizing performance and minimizing UI delays.
  - The agent pipes its output to the Screen Parser, which cross-validates the input using kernel memory objects.

- **Security:**
  - BLADE relies on hardware events as the only dependable source of user consent, ensuring unforgeability.
  - The I/O Redirector ensures that uncorrelated downloads cannot execute, providing a robust defense against drive-by download attacks.

By addressing these technical challenges and design goals, BLADE provides a comprehensive and efficient solution for securing browser downloads and preventing unauthorized content execution.