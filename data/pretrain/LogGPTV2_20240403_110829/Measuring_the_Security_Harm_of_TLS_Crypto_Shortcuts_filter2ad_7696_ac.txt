mail.ru showed 63 days of reuse. 63 days indicates that it
was seen on both the ﬁrst and last day of our study and was
likely in use both before and after our study.
Figure 4 depicts how STEK lifetimes varied with Alexa
rank tiers according to the average rank of each domain over
the 9-week period. We observed 56 domains which issued
session tickets in the Alexa Top 100, 494 in the Top 1K,
4,154 in the Top 10K, 37,224 in the Top 100K, and 224,702 in
the Alexa Top Million. Again, these are only domains which
remained within the Alexa Top Million for the entire span of
our study.
The longevity of STEK lifetimes can be largely explained
by the the popular implementations. Apache 2.4.0 and Ng-
inx 1.5.7 and later allow an administrator to conﬁgure the
server to read 48 bytes of randomness from a ﬁle path on
disk. This ﬁle contains the STEK identiﬁer, encryption key,
and MAC key in order to synchronize STEKs across servers.
This conﬁguration can only be changed via direct interaction
from the administrator and restarting the server process. If
this option is not available, or if a key ﬁle is not conﬁgured,
the server randomly generates a STEK on startup and uses it
for the lifetime of the process.
While there is a worrying set of websites that appeared to
never rotate STEKs, we note that many have more reasonable
Figure 5: Ephemeral Exchange Value Reuse—We mea-
sured how long Alexa Top Million websites served identical
DHE and ECDHE values (note vertical scale is cropped).
conﬁgurations. Google, Twitter, YouTube, Baidu, and many
others never reused an issuing STEK across days. However,
as we will discuss in Section 7, that is not always the sole
indicator of a secure conﬁguration.
4.4 EC(DHE) Value Lifetime
As described in Section 2, TLS servers can cache and
reuse ephemeral handshake values (a, ga in a ﬁnite-ﬁeld
Difﬁe-Hellman exchange or dA, dAG in elliptic curve Difﬁe-
Hellman) to reduce the computational cost of public key
cryptography. Table 1 shows that 7.2% of domains in a single
Alexa Top Million list reuse a DHE value for some amount of
time and 15.5% reuse an ECDHE value for amount of time.
To determine how long these ephemeral values persist, we
analyzed two sets of daily scans for the Top Million Domains.
One set, obtained from the Censys project [16], offered only
DHE ciphers and the other offered ECDHE and RSA ciphers,
with ECDHE as the ﬁrst priority.
DHE Of the 291,643 domains consistently in the Alexa
Top Million and who support HTTPS with a valid certiﬁcate,
only 166,608 (57%) ever connected successfully when the
client offered only DHE ciphers. 12,824 domains (4.4%)
reused a DHE value for some amount of time in the 10 con-
nection scans referenced in Table 1. The Censys project scans
show that 3,849 (1.3%) reused a DHE value for at least one
day, 3,347 (1.2%) for at least 7 days, and 1,527 (0.52%) for
30 or more days. Figure 5 shows this visually.
Table 3 shows the top ten domains which reused a DHE
value for more than 7 days as determined by their average
Alexa rank. We also ﬁnd commsec.com.au (an Australian
brokerage ﬁrm) with 36 days of reuse and 32 kayak.[tld]
domains with between 6 and 18 days of reuse.
ECDHE 234,302 domains 80% of those consistently in
the Alexa Top Million who support HTTPS with a valid cer-
tiﬁcate, completed an ECDHE handshake. 42,029 domains
(14.4%) reused an ECDHE value for some amount of time in
our 10 connection scans referenced in Table 1. In our daily
6
 0.96 0.965 0.97 0.975 0.98 0.985 0.99 0.995 1 0 10 20 30 40 50 60CDF of HTTPS sitesMax span of a server KEX(in days)Alexa 1M DHE (DHE ciphers)Alexa 1M ECDHE (Golang ciphers)38scans, we saw 9,886 domains (3.4%) that reused an ECDHE
value for at least one day, 8,710 (3.0%) reused for at least
7 days, and 4,071 (1.4%) reused for 30 or more days. This is
shown visually in Figure 5.
Table 4 shows the top ten domains that reused an ECDHE
value for more than 7 days. Notable domains beyond the top
ten include betterment.com (an online investing service)
with 62 days of reuse, mint.com (a budgeting website that
connects to banks and investment services) with 62 days
of reuse, and symantec.com, symanteccloud.com, and
norton.com with 41, 16, and 19 days of reuse respectively.
As seen in Figure 5, the ephemeral value longevity metrics
are fairly consistent with one another, but are substantially
different from the STEK longevity rates seen in Figure 3.
5. TLS SECRET STATE SHARING
When measuring the increased attack surface resulting
from stored TLS secrets, it is also important to consider cases
where secrets are shared across domains, servers, or data
centers. If a shared TLS secret is extracted from a single site,
it can be used to compromise connections to all the other
sites regardless of whether they use different long-term SSL
certiﬁcates.
We found many “service groups” in which multiple do-
mains shared a session cache, STEK, or Difﬁe-Hellman value,
making these secrets particularly valuable targets for attack.
While it would be logical for a single domain to use this tech-
nique to allow sessions to be resumed across multiple servers,
the magnitude of sharing across domains was surprising. The
root cause of this behavior is likely that domains share an SSL
terminator, whether it is a separate device such as a Cavium
card [8] or multiple domains running on the same web server.
5.1 Shared Session ID Caches
To establish a lower bound on how many websites share
session ID caches, we conducted a cross-domain probing
experiment where we attempted to resume a TLS connection
to domain b with a session that originated from domain a.
If performed exhaustively, this would require hundreds of
thousands of connections to each domain. However, we made
the experiment tractable by limiting groups to a small number
of domains from each AS and by transitively growing the
graph. That is, if we observed that ida was valid on domain b
and idb was valid on domain c, we conclude that ida would
have also been valid on domain c and group domains a, b,
and c together.
For each site, we randomly selected up to ﬁve other sites
in its AS and up to ﬁve sites that shared its IP address and
tested whether its session ID allowed connection to these
other sites. We note that because servers can expire session
IDs at any time, there is no harm to the server to provide an
invalid session ID; the server will simply complete a typical
TLS handshake as if no session ID had been presented.
Of the 357,536 domains that supported session ID resump-
tion in Section 4.1, we found 212,491 service groups, of
which 183,261 (86%) contained only a single domain. The
largest service group we found belonged to CloudFlare and
Operator
CloudFlare #1
CloudFlare #2
Automattic #1
Automattic #2
Blogspot #1
# domains
30,163
15,241
2,247
1,552
849
Operator
Blogspot #2
Blogspot #3
Blogspot #4
Shopify
Blogspot #5
# domains
743
732
648
593
561
Table 5: Largest Session Cache Service Groups
Operator
CloudFlare
Google
Automattic
TMall
Shopify
# domains
62,176
8,973
4,182
3,305
3,247
Operator
GoDaddy
Amazon
Tumblr #1
Tumblr #2
Tumblr #3
# domains
1,875
1,495
975
959
956
Table 6: Largest STEK Service Groups
Operator
SquareSpace
LiveJournal
Jimdo #1
Jimdo #2
Distil Networks
# domains
1,627
1,330
179
178
174
Operator
Atypon
Afﬁnity Internet
Line Corp.
Digital Insight
EdgeCast CDN
# domains
167
146
114
98
75
Table 7: Largest Difﬁe-Hellman Service Groups
contained 30,163 domains (66% of the 45,520 Alexa Top
Million domains in their AS). We show the ten largest session
cache service groups in Table 5.
As shown in the table, we observed cases where a single
logical provider (such as a CDN or cloud services company)
had multiple service groups even within the same /24 CIDR
block. We manually conﬁrmed that this was not an artifact of
our grouping methodology and in fact reﬂected the remote
conﬁguration. While we believe that this measurement tech-
nique is effective, it provides only a lower bound on the true
number of domains that share session caches. Our ability
to provide a tighter estimate is limited, since TLS does not
provide the client any information about the session cache or
saved session state other than the random session ID.
5.2 Shared STEKs
To track how STEKs are shared across servers, we con-
nected to each April 17, 2016 Alexa Top Million domain ten
times over a six hour window and grouped sites together that
shared at least one STEK identiﬁer during the scans. Since
some providers rotate session tickets at smaller intervals than
six hours, we repeated the experiment with one connection
over a 30 minute window, similarly grouped domains, and
then joined the two groups.
Of the 354,697 sites that supported session tickets, we
found 170,634 STEK service groups, of which 140,715 (83%)
contained only a single domain. As with session IDs, the
largest group belonged to CloudFlare; it contained 62,176
domains. The next largest belonged to Alphabet (Google’s
7
39parent company) and contained 8,973 hosts sharing a STEK.
We show the top ten largest STEK service groups in Table 6.
5.3 Shared (EC)DHE Values
Lastly, we looked for Alexa Top Million domains that
shared DHE or ECDHE key-exchange values. To do this, we
completed 10 TLS handshakes with each Alexa Top Million
domain over a ﬁve-hour window. As with the shared STEK
experiment, we also performed a scan that made a single
connection to every domain during a 30 minute window. Both
scans were conducted twice, once with only DHE ciphers
and once with only ECDHE ciphers, for a total of four scans.
We found that Difﬁe-Hellman values were shared in fewer
instances and by somewhat smaller groups than either session
caches or STEKs. The most widely shared DHE value was
one we saw 1,368 times across 137 domains and 119 IP
addresses, all within AS 20401 (Hostway Corporation). We
also found a single ECDHE value shared 1,790 times across
179 domains on a single IP, which appeared to be a Jimdo
hosting server [31] on Amazon EC2.
We labeled servers that ever presented the same DHE or
ECDHE key-exchange value to be part of the same service
group. We found 421,492 Difﬁe-Hellman service groups,
of which 417,397 (99%) contained only a single domain.
The largest group belonged to SquareSpace and contained
1,627 domains. We identify the largest ephemeral value ser-
vice groups in Table 7.
6. CRYPTO SHORTCUT DANGERS
As of May 2016, we ﬁnd that 90.2% of Top Million do-
mains with trusted HTTPS use forward secret key exchanges
for connections from modern browsers. Prior to our study,
we—the authors—would have assumed from this that con-
nections would be forward secret shortly after the connection
has ended. However, when we consider the interaction of
crypto shortcuts and cross-domain secret sharing, we see that
this is not the case and that many popular domains remain
susceptible to retrospective decryption.
As opposed to the naive understanding, forward secrecy
is not a binary concept being either forward secret or not
forward secret. Forward secrecy is a gradient where the con-
ﬁdentiality of the data is forward secret after some passage of
time dependent on many different factors. At one extreme, an
arbitrarily complex key-ratcheting mechanism could protect
data conﬁdentiality even if an endpoint is compromised while
the connection is in progress. The attacker would be able to
decrypt the connection’s content after the compromise, but
not before. At the other extreme, a TLS connection that uses
RSA key exchange is effectively never forward secure. Due
to the long-term nature of most SSL certiﬁcates as well as
the likelihood that they are stored on disk, recovery is likely
possible even long after the certiﬁcate has expired.
To quantify the amount of forward secrecy, we can attempt
to establish lower bounds for each site’s vulnerability win-
dow. This is the span of time during which an attacker could
recover the session keys for an observed TLS connection by
compromising secret values stored by the server. Our mea-
8
surements from the previous sections allow us to estimate
lower bounds for this window, but the true exposure may be
much greater. While we can detect that a server refuses to
resume older sessions, we cannot tell whether it has securely
erased the corresponding secrets or whether the secrets may
be vulnerable to forensic recovery.
In addition to quantifying the amount of forward secrecy,
we also wish to account for the concentration of the secrets
themselves. In a secure world, a compromise of one server
would affect as few connections on as few domains as pos-
sible. But as shown in Section 5, this is far from the case
and that the compromise of a small number of SSL endpoints
could endanger an out-sized number of domains’ content.
The interaction of these two factors presents an enticing
target for an attacker who wishes to decrypt large numbers of
connections for a comparatively small amount of work.
6.1 Exposure from Session Tickets
The long-term usage of session ticket encryption keys
(STEKs) is the most worrisome practice we observed. Since
the session ticket contains the session keys encrypted with
the STEK, and since it is sent as part of each TLS connection
outside of the TLS tunnel (initially by the server and subse-
quently by the client), an attacker who obtains the associated
STEK can decrypt the ticket, recover the session keys, and
decrypt the connection contents.