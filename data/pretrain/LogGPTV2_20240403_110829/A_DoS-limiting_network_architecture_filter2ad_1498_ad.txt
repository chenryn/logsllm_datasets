Figure 8: Legacy trafﬁc ﬂooding does not increase the ﬁle transfer
time or decrease the fraction of completed transfers with TVA. With
SIFF, ﬁle transfer time increases and the fraction of completed trans-
fer drops when the intensity of attack increases; With pushback, as the
number of attackers increases, pushback poorly isolates attack and le-
gitimate trafﬁc, and the transfer time increases and the fraction of com-
pleted transfer drops sharply; with today’s Internet, the transfer time
increases sharply, and the fraction of completion quickly approaches
zero.
to suffer losses. We see this in Figure 8 when the number of attack-
ers is greater than 10 and the fraction of completions drops and the
completion time increases. When the aggregate attack bandwidth
Ba is greater than the bottleneck bandwidth Bl, the packet loss
rate p is approximately (Ba − Bl)/Ba. Once a request packet gets
through, a sender’s subsequent packets are authorized packets and
are treated with higher priority. So the probability that a ﬁle trans-
fer completes with SIFF is equal to the probability a request gets
through within nine tries, i.e., (1−p9). When the number of attack-
ers is 100, p is 90%, giving a completion rate of (1 − 0.99) = 0.61.
This is consistent with our results. Similarly, the average time for a
transfer to complete with up to 9 tries is:
Tavg = (
9
X
i=1
·i · pi−1
· (1 − p))/(1 − p9)
When there are 100 attackers, this time is 4.05 seconds, which is
again consistent with our results.
Pushback performs well until the number of attackers is large,
at which stage it provides poor isolation between attack trafﬁc and
legitimate trafﬁc. This is because attack trafﬁc becomes harder to
identify as the number of attackers increases since each incoming
link contributes a small fraction of the overall attack. As can be
n
o
i
t
l
e
p
m
o
c
f
o
n
o
i
t
c
a
r
F
)
s
(
e
m
i
t
r
e
f
s
n
a
r
T
 1
 0.8
 0.6
 0.4
 0.2
 0
 6
 5
 4
 3
 2
 1
 0
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers
n
o
i
t
l
e
p
m
o
c
f
o
n
o
i
t
c
a
r
F
)
s
(
e
m
i
t
r
e
f
s
n
a
r
T
 1
 0.8
 0.6
 0.4
 0.2
 0
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers
 6
 5
 4
 3
 2
 1
 0
Internet
SIFF
pushback
TVA
 1
 10
 100
Number of attackers
Figure 9: Request packet ﬂooding does not increase the transfer time
or decrease the fraction of completed transfers with TVA.
seen in Figure 8, when the number of attackers is less than 40,
pushback is able to cut off a signiﬁcant portion of the attack traf-
ﬁc: the ﬁle transfer time increases by less than 2 seconds, and the
faction of completed transfers remains at 100%. However, push-
back becomes markedly less effective as the number of attackers
increases further. The ﬁle transfer time increases signiﬁcantly, and
the fraction of completed transfers drops sharply. TVA could be
viewed as an alternative pushback scheme that is always activated
and uses capabilities as a robust signature to separate attack trafﬁc
and legitimate trafﬁc.
With the Internet, legitimate trafﬁc and attack trafﬁc are treated
alike. Therefore, every packet from a legitimate user encounters
a loss rate of p. The probability for a ﬁle transfer of n packets
to get through, each within a ﬁxed number of retransmissions k is
(1 −pk)n. This probability decreases polynomially as the drop rate
p increases and exponentially as the number of packets n (or the
ﬁle size) increases. This explains the results we see in Figure 8: the
fraction of completed transfers quickly approaches to zero as the
number of attackers increases. The few completed transfers have
a completion time hundreds of seconds, and are out of the y-axis
scope in Figure 8.
5.2 Request Packet Floods
The next scenario we consider is that of each attacker ﬂooding
the destination with request packets at 1Mb/s. In this attack, we
assume the destination was able to distinguish requests from legit-
imate users and those from attackers. With TVA, request packets
are rate limited and will not reduce the available capacity for au-
thorized packets. Requests from attackers and legitimate users are
Figure 10: With TVA, per-destination queue ensures that the desti-
nation and the colluder equally share the access link bandwidth. The
transfer time slightly increases (not noticeable from the ﬁgure) as a
result of reduced bandwidth, and the fraction of completion remains
100%.
queued separately, so that excessive requests from attackers will
be dropped without causing requests from legitimate users to be
dropped. We see this in Figure 9: the fraction of completions does
not drop and the transfer time does not increase. In contrast, the re-
sults for SIFF are similar to those for legacy packets ﬂoods, as SIFF
treats both requests and legacy trafﬁc as low priority trafﬁc. Both
pushback and the legacy Internet treat RTS trafﬁc as regular data
trafﬁc. The results for them are the same as those for the legacy
trafﬁc attack.
5.3 Authorized Packet Floods
Strategic attackers will realize that it is more effective to collude
when paths can be found that share the bottleneck link with the des-
tination. The colluders grant capabilities to requests from attackers,
allowing the attackers to send authorized trafﬁc at their maximum
rate. Figure 10 shows the results under this attack. Because TVA al-
locates bandwidth approximately fairly among all destinations and
allows destinations to use ﬁne-grained capabilities to control how
much bandwidth to allocate to a sender, this attack causes band-
width to be fairly allocated between the colluder and the destina-
tion. The transfer time slightly increases (from 0.31 second to 0.33
second, not noticeable from the ﬁgure) as a result of reduced band-
width, and all transfers complete. If the number of colluders that
share a bottleneck link with the destination increases, the destina-
tion gets a decreased share of the bandwidth. Each legitimate user
will get a lesser share of the bandwidth, but no user will be starved.
)
s
(
e
m
i
t
r
e
f
s
n
a
r
T
)
s
(
e
m
i
t
r
e
f
s
n
a
r
T
 6
 5
 4
 3
 2
 1
 0
 6
 5
 4
 3
 2
 1
 0
TVA
all at once
10 at a time
 0
 10  20  30  40  50  60
Time (s)
SIFF
all at once
10 at a time
 0
 10  20  30  40  50  60
Time (s)
Figure 11: Attackers can only cause temporary damage if a destina-
tion stops renewing their capabilities. TVA uses a ﬁne-grained capabil-
ity to limit the impact of authorizing an attacker to a smaller amount
of attack trafﬁc compared to SIFF, even assuming SIFF has a rapid-
changing router secret that expires every 3 seconds.
Under the same attack with SIFF, legitimate users are completely
starved when the intensity of the attack exceeds the bottleneck band-
width. Again, this is because the request packets are treated with
low priority and are dropped in favor of the authorized attack trafﬁc.
We see in Figure 10 that the request completion rate drops sharply
to zero when the attacking bandwidth reaches the bottleneck band-
width of 10Mb/s. The very few transfers that complete do so only
because of trafﬁc ﬂuctuations, and suffer a sharp increase in the
average transfer time.
Both pushback and the legacy Internet treat request trafﬁc and
authorized trafﬁc as regular trafﬁc. Thus, the results for each scheme
under an authorized trafﬁc attack is similar to each scheme under
a legacy trafﬁc attack. Pushback will identify the ﬂow aggregate
destined to the colluder as the offending aggregate that causes most
packet drops, but it fails to rate limit the aggregate to its fair share
of bandwidth.
5.4 Imprecise Authorization Policies
Finally, we consider the impact of imprecise policies, when a
destination sometimes authorizes attackers because it cannot reli-
ably distinguish between legitimate users and attackers at the time
that it receives a request. In the extreme that the destination cannot
differentiate attackers from users at all, it must grant them equally.
However, if the destination is able to differentiate likely attack
requests, even imprecisely, TVA is still able to limit the damage
of DoS ﬂoods. To see this, we simulate the simple authorization
Packet type
Request
Regular with a cached entry
Regular without a cached entry
Renewal with a cached entry
Renewal without a cached entry
Processing time
460 ns
33 ns