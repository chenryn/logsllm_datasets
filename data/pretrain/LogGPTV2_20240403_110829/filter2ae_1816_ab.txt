        printf("0x%lx\n", kcov_ring[i + 1]);
    }
使用像addr2line这样的工具可以将％rip解析为对应的源代码中的那一行。我们不需要它，原始的％rip值对我们来说已经足够了。
## 将KCOV发送到AFL
下一步是欺骗AFL。请记住，AFL需要一个特制的可执行文件，但我们想要提供内核代码覆盖率。首先让我们了解一下AFL的工作原理。  
AFL设置一个64K
8位的数组。该内存区域称为shared_mem或trace_bits，并与跟踪的程序共享。数组中的每个字节都可以被认为是检测代码中特定(branch_src，branch_dst)对的命中计数器。  
重要的是要注意AFL更喜欢随机分支标签而不是重用％rip值来识别基本块。这是为了增加熵——我们希望数组中的命中计数器均匀分布。AFL使用的算法如下：
    cur_location = ;
    shared_mem[cur_location ^ prev_location]++; 
    prev_location = cur_location >> 1;
在使用KCOV的情况下没有每个分支的编译时随机值。我们将使用哈希函数从KCOV记录的％rip生成统一的16位数。这就是如何将KCOV报告提供给AFL
shared_mem数组的代码：
    n = __atomic_load_n(&kcov_ring[0], __ATOMIC_RELAXED);
    uint16_t prev_location = 0;
    for (i = 0; i > 1;
    }
## 从AFL读取测试数据
最后，我们需要实际编写调用netlink接口的测试代码！首先，我们需要从AFL读取输入数据。默认情况下，AFL将测试用例发送到stdin：
    /* read AFL test data */
    char buf[512*1024];
    int buf_len = read(0, buf, sizeof(buf));
## Fuzzing netlink
然后我们需要将此缓冲区发送到netlink套接字。但我们对netlink的工作原理一无所知！好吧，让我们使用前5个字节的输入作为netlink协议和组ID字段。AFL将找出并猜测这些字段的正确值。简化的代码如下：
    netlink_fd = socket(AF_NETLINK, SOCK_RAW | SOCK_NONBLOCK, buf[0]);
    struct sockaddr_nl sa = {
            .nl_family = AF_NETLINK,
            .nl_groups = (buf[1] "
我们忘记了为我们的fuzzer准备输入语料库！
## 构建输入语料库
每个fuzzer都需要精心设计的测试用例作为输入，以引导第一个变异。测试用例应该简短，并尽可能覆盖大部分代码。可悲的是我对netlink一无所知，那我们就不准备输入语料库吧……  
我们可以要求AFL“弄清楚”哪些输入有意义。这就是[Michał在2014年对JPEG所做的](https://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html "Michał在2014年对JPEG所做的")，并且很有效。这是我们的输入语料库：
    mkdir inp
    echo "hello world" > inp/01.txt
有关如何编译和运行的所有说明都在我们的github上的[README.md](https://github.com/cloudflare/cloudflare-blog/tree/master/2019-07-kernel-fuzzing "README.md")中。归根到底就是：
    virtme-run \
        --kimg bzImage \
        --rw --pwd --memory 512M \
        --script-sh "./afl-fuzz -i inp -o out -- fuzznetlink"
运行之后将在屏幕上看到熟悉的AFL打印的信息：  
## 进一步说明
现在你在KVM中有一个自定义的内核并运行了一个基本的基于代码覆盖率的fuzzer。  
这么做值得吗？即使只有这个基本的fuzzer，也没有输入语料库，一两天后，fuzzer仍然发现了一个有趣的代码路径：NEIGH: BUG, double
timer add, state is
8(lore.kernel.org/netdev/CAJPywTJWQ9ACrp0naDn0gikU4P5-xGcGrZ6ZOKUeeC3S-k9+PI:EMAIL/T/#u)。使用更专业的fuzzer，一些改进稳定性的指标和一个像样的输入语料库，我们可以期待得到更好的结果。  
如果你想了解更多关于netlink套接字的功能，请参阅我的同事Jakub Sitnicki的博客：[Multipath Routing in Linux -part 1](http://codecave.cc/multipath-routing-in-linux-part-1.html "Multipath
Routing in Linux - part 1")。在[Rami
Rosen的Linux内核网络的书](https://books.google.pl/books?redir_esc=y&hl=pl&id=96V4AgAAQBAJ&q=netlink#v=snippet&q=netlink&f=false
"Rami Rosen的Linux内核网络的书")中也有一章关于它的内容。  
在这篇博客中我们没有提到：
  * AFL shared_memory设置的详细信息
  * 执行AFL持久模式
  * 如何创建一个网络命名空间来隔离怪异的netlink命令的效果，并提高AFL的稳定性
  * 关于如何读取dmesg(/dev/kmsg)以查找内核崩溃的技巧
  * 在KVM之外运行AFL，以获得速度和稳定(目前在发现crash后的测试不稳定)
但是我们实现了我们的目标——我们针对内核建立了一个基本但仍然有用的fuzzer。最重要的是可以重复使用相同的机制来fuzz从文件系统到BPF
verifier的Linux子系统的其它部分。  
我还学到了一个惨痛的教训：调整fuzzer是一项全职工作。正确的fuzz绝对不是启动它并无所事事地等待crash那么简单。总有一些东西需要改进，调整和重新实现。Mateusz
Jurczyk在上述提到的演讲开头的一句话引起了我的共鸣：“fuzz很容易学，但很难掌握。”  
挖洞愉快！