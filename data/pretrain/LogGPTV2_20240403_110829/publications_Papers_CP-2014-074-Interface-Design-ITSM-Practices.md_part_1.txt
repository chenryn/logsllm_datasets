### Interface Design for IT Service Management Practice

**Authors:**
- João Nabais, Alexandre Miguel Pinto António Cruz
  - CISUC – University of Coimbra
  - SAPO – Portugal Telecom
  - 3030-290 Coimbra, Portugal
  - 1069-300 Lisboa, Portugal
  - Email: [PI:EMAIL], [PI:EMAIL]
- Jorge Cardoso
  - Karlsruhe Institute of Technology
  - 76131 Karlsruhe, Germany
  - Email: [PI:EMAIL]

**Abstract:**
As the global economy becomes increasingly service-oriented, companies are adopting IT Service Management (ITSM) best practices, tools, and methodologies. The Information Technology Infrastructure Library (ITIL) is a widely adopted set of best practices in ITSM. However, implementing ITIL can be complex and costly. To address this, we propose a methodology to standardize and partially automate the construction of reusable software components that conform to ITIL. This approach aims to reduce costs and promote software reuse in the ITSM/ITIL solutions market by developing ITIL-conformant interfaces for processes and functions.

**Keywords:**
- ITSM
- ITIL
- Service
- Interface design

**I. Introduction**

IT Service Management (ITSM) has evolved over the past few decades, initially focusing on delivering applications as part of service offerings. Over time, it became clear that businesses needed a more comprehensive and value-creating approach. The concept of an "IT help desk" emerged to handle frequent user issues. In the last three decades, a set of best practices, processes, and functions was compiled into what is now known as the IT Infrastructure Library (ITIL). ITIL provides a framework for efficient IT service management based on the expertise of leading organizations. When properly implemented, ITIL allows organizations to provide services with greater efficiency, effectiveness, quality, and cost reduction.

Despite its benefits, ITIL adoption can be complex and expensive. Companies often end up with different analysis methods and designs for similar ITSM solutions. To address this, we propose a methodology to build ITIL-conformant interfaces for ITSM processes and functions. This methodology aims to standardize and partially automate the construction of reusable software components, promoting software reuse and reducing implementation costs.

**A. Motivation**

The primary challenge in ITIL adoption is the high cost and complexity involved. Organizations face significant hiring and certification costs, as well as the time, effort, and structural costs associated with ITSM implementations. Our proposed solution aims to reduce these costs by providing a standardized and automated approach to building ITIL-conformant interfaces. This will enable companies to develop and implement ITSM solutions more efficiently and cost-effectively.

**B. Contribution**

Our work contributes to the development of an interface design methodology for ITSM practices. This methodology can help ease the workload of companies by providing a structured approach to analyzing ITIL best practices, identifying ITSM process elements, and defining logical operations within these practices. Ultimately, this work will contribute to the development of decoupled ITSM practices oriented web-services that can serve a variety of IT consumers.

**C. Business Impact**

By adopting our approach, ITSM consumers can reduce the time, resources, and financial costs associated with ITIL implementation. Our methodology provides a set of normalized interfaces, enabling easier and more flexible ITSM implementations. This will also facilitate the comparison of ITIL adoption levels between organizations, as they will be using similar fundamental practices.

**II. Methodology**

Our methodology consists of a sequence of steps to develop artifacts for specifying a set of interface logical operations. These steps include:

1. **Process Development**: Analyze ITSM practices and their elements to develop a process flow diagram.
2. **Specification**: Use a notation like BPMN or UML to specify the process.
3. **Operational Analysis**: Identify granular logic activities within the ITSM process.
4. **Behavior Definition**: Determine the behavior, inputs, and outputs of the identified operations.
5. **Data Types Definition**: Define the data types needed to feed and store ITSM information.
6. **Team Revisions**: Conduct team reviews and fulfill identified improvement needs.

**III. Paper Structure**

The rest of the paper is organized as follows:
- **Section II**: Background Notions, including relevant concepts and previous work.
- **Section III**: Detailed description of the ITSM Practices Interface Design.
- **Section IV**: Evaluation of the developed methodology.
- **Section V**: Conclusions and future work.

**II. Background Notions**

**A. Components and Interfaces**

**Component-Based Software Engineering (CBSE)**: CBSE involves defining, implementing, and integrating loosely coupled, independent components into systems. A key principle is the separation of the component interface from its implementation, allowing one implementation to be replaced without affecting other parts of the system.

**Definition 1**: A software element that conforms to a component model and can be independently deployed and composed without modification according to a composition standard.

**Definition 2**: A software component is a unit of composition with contractually specified interfaces and explicit context dependencies only. It can be deployed independently and is subject to composition by third parties.

**Component as a Service**: Components can be viewed as services, easing the integration of processes and reducing concerns about connecting different technologies.

**ITIL Component**: An ITIL component fulfills and materializes all functionalities related to an ITIL process or function.

**ITSM Component**: An ITSM component implements ITSM practices, not necessarily ITIL-specific, and reflects a practice adopted by a company to manage specific IT services.

**Interface**: An interface is an abstraction of the behavior of a component, consisting of a subset of its interactions and a set of constraints describing when those interactions occur.

**Conclusion**

This paper presents a methodology for designing ITIL-conformant interfaces for ITSM processes and functions. By standardizing and partially automating the construction of reusable software components, our approach aims to reduce costs and promote software reuse in the ITSM/ITIL solutions market. This will ultimately make ITIL adoption more accessible and cost-effective for organizations.