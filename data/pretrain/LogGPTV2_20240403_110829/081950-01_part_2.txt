python3.6的软连接。
sudo ln -s /home/aaron/local/python3.6.5/bin/pip3.6 /usr/bin/pip3.6#建立pip3.6
的软连接。
12
第1章 自动化运维与Python
创建虚拟环境：在terminal中顺序执行以下语句。
which pip3.6#查看pip3.6的位置
pip3.6 install virtualenv
如果这一步报/home/aaron/xxx/python3.6找不到错误，请编辑上一步路径中的pip3.6文件，
将第一行改为安装路径中的python3.6，本例中为#!/home/aaron/local/python3.6.5/bin/
python3.6。
如果报subprocess.CalledProcessError: Command 'lsb_release -a' returned non-zero exit status
1的错误，则执行：
ln -s /usr/share/pyshared/lsb_release.py
/home/aaron/local/python3.6.5/lib/python3.6/site-packages/lsb_release.py
这一步把原有的lsb_release.py链接到我们安装的路径下，然后执行：
pip3.6 install virtualenv
virtualenv -p python3.6 projectA_env
source projectA_env/bin/activate
这里的-p 参数表示指定 Python 编译器的版本，Python3.6 是指向我们安装的
/home/aaron/local/python3.6.5/bin/python3.6，输入
deactivate
退出projectA的虚拟环境，完整过程如图1.13所示。
图1.13 为编译安装的Python创建虚拟环境
1.4
开发工具介绍
工欲善其事必先利其器，虽然我们可以通过简单的编辑器来编写python代码，但是如果有开
发工具的帮助，那么编码效率就会事半功倍。本节介绍两款主流的开发工具PyCharm和Vim。
13
Python自动化运维快速入门
1.4.1 PyCharm
PyCharm是由JetBrains公司专门为Python打造的一款开发工具，具备调试、语法高亮、
项目管理、代码跳转、智能提示、自动完成、单元测试、版本控制等功能，而且跨平台，在
Linux、Windows、Mac OS下面都可以使用，强烈建议初学者选择PyCharm作为Python开发
工具，可以极大地提高编码效率，减少错误出现。
另外，PyCharm还提供了一些很好的功能用于Django开发，同时支持Google App Engine，
更酷的是，PyCharm支持IronPython。
PyCharm 有两个版本：专业版（收费）和社区版（免费）。官方下载地址：
http://www.jetbrains.com/PyCharm/download/，社区版足以满足日常开发需要。本节以社区版
PyCharm2017.2.3版本为例，介绍PyCharm的基本使用方法。
（1）安装。从官方网站下载，按照提示一步步安装即可，非常简单。
（2）新建项目。启动PyCharm，如图1.14所示，单击Create New Project，输入项目路径
和编译器的路径，编译器我们选择上一节创建的虚拟环境projectA_env，如图1.15所示，以免
安装第三方包影响其他应用程序。在项目特别多时，使用虚拟环境是个绝佳的选择。
图1.14 创建新项目
图1.15 选择虚拟环境projectA_env
14
第1章 自动化运维与Python
（3）添加Python文件、编译运行：鼠标右键单击项目名称，选择New->Python file， 输
入名称hellopython.py，添加内容后，编译并运行，如图1.16~图1.18所示。
图1.16 添加Python文件
图1.17 运行
15
Python自动化运维快速入门
图1.18 查看运行结果
（4）方便的命令窗口：单击界面下方的Terminal，出现一个类似于cmd命令的窗口，在
这里可以快速调用系统命令、pip等；单击界面下方的Python Console，出现Python解释器的
界面，这里可以对一些Python语句进行测试等，如图1.19和图1.20所示。
图1.19 Terminal窗口
16
第1章 自动化运维与Python
图1.20 Python Console窗口
（5）设置：单击菜单 File->Settins，弹出如图 1.21 所示的窗口，从上到下依次是显示设
置、键盘映射、编辑器设置（字体、颜色、配色方案）、插件、版本控制工具设置、项目设置
（含项目所用编译器，项目结构设置）、编译执行设置、语言&框架、工具设置。
图1.21 PyCharm的设置窗口
PyCharm 使用起来十分简单、方便，学习成本也非常低，适合初学者快速入门，但缺点
是启动时有些慢，进程运行久了也会变得卡顿。
17
Python自动化运维快速入门
1.4.2 Vim
Vim 是一款轻量级强大的文本编辑器，本身附带详细的英文帮助文档，初次使用 Vim 的
读者可以多查看 Vim 的帮助文档，对我们理解 vim 的快捷命令非常有帮助。vim 的官方网站
是https://www.vim.org/ ，这里以Ubuntu16.04为例介绍如何Vim打造为Python的编程工具，
Windows系统请参照操作，并没有太大的区别。
（1）安装Vim：许多UNIX衍生系统已经预装了Vim，我们首先要确认编辑器是否成功
安装。按 Ctrl+Alt+T 组合键启动 Terminal，输入 vim –version，如果看到如图 1.22 所示的
“+python3”就不需要再手动安装了。如果没有，则运行以下命令手动安装：
sudo apt-get remove vim-tiny
apt-get update
apt-get install vim
如果是其他版本的Linux系统，则可查阅相应的版本管理器文档；如果是Windows系统，
则下载gvim80.exe进行安装，下载链接为ftp://ftp.vim.org/pub/vim/pc/gvim80-586.exe。
图1.22 Vim安装验证
（2）Vim模式：有两种模式，按下Esc键进入命令模式；按下i或insert键进入编辑模式
（插入模式）。Vim的基本操作，如移动、删除、复制、粘贴、查找、替换等可参考帮助文档，
18
第1章 自动化运维与Python
命令模式下输入:help可查看帮助文档学习基本操作。我们按下Esc键进入命令模式，输入：
:python3 import sys;print(sys.version)
如图1.23所示。
图1.23 命令模式查看Python版本
按下Enter键后得到的结果如图1.24所示。
图1.24 查看Vim使用的Python版本
这行命令会输出编辑器当前的Python版本。如果报错，编辑器就不支持Python语言，需
要重装或重新编译。Ubuntu操作系统可以使用“sudo update-alternatives --config vim”来切换
vim对Python2和Python3的支持。
（3）Vim扩展：Vim本身能够满足开发人员的很多需求，其可扩展性也很强，并且已经
有一些高级扩展，可以让Vim拥有“现代”集成开发环境的特性。虽然Vim有多个扩展管理
器，但是笔者强烈推荐 Vundle，可以把它想象成 Vim 的 pip。有了 Vundle，安装和更新包就
变得容易多了。现在我们来安装Vundle：
git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
该命令将下载Vundle插件管理器，并将其放置在Vim编辑器bundles文件夹中。现在，
可以通过.vimrc配置文件来管理所有扩展了。将配置文件添加到home文件夹中：
touch ~/.vimrc
接下来，将下面的Vundle配置代码添加到配置文件~/.vimrc的顶部。
set nocompatible " required
filetype off " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Add all your plugins here (note older versions of Vundle used Bundle instead of
Plugin)
" All of your Plugins must be added before the following line
call vundle#end() " required
filetype plugin indent on " required
19
Python自动化运维快速入门
在vim配置文件中以"开头的行为注释行。上面的代码完成了使用Vundle前的设置，之后
就可以在call vundle#end()之前添加希望安装的插件，打开Vim编辑器，运行下面的命令。
:PluginInstall
这个命令告诉Vundle自动下载所有插件，表1-1列举了vim打造Python IDE的常用插件，
可凭个人爱好选择安装某几个或全部。
表1-1 各种插件
插件 功能
vim-scripts/indentpython.vim 自动缩进
Valloric/YouCompleteMe 自动补全
scrooloose/syntastic 语法检查/高亮
scrooloose/nerdtree 文件浏览
kien/ctrlp.vim 超级搜索
Lokaltog/powerline Powerline状态栏
举个例子：假如要安装自动补全插件Valloric/YouCompleteMe，可以在配置文件中Vundle
的内部加入 Plugin 'Valloric/YouCompleteMe' ，然后重新启动 vim，并在命令模式下输
入:luginInstall（注意是英文冒号）回车，即可自动安装Valloric/YouCompleteMe。同样地，如
果要安装多个，就在配置文件中配置多个，然后执行vim命令:luginInstall，vim会自动安装配
置文件中的插件，已安装的不会再次安装，重新启动vim即可体验插件的效果。
下面附一段比较详细的vimrc配置文件，供读者参考，可修改为自己喜欢的风格。
1 "vundle开始 vundle代码请放置在最前面
2 set nocompatible
3 filetype off
4 set rtp+=~/.vim/bundle/Vundle.vim
5 call vundle#begin()
6 "请将需要的插件放置在此行之后"
7 Plugin 'VundleVim/Vundle.vim'
8 "git插件
9 Plugin 'tpope/vim-fugitive'
10 "filesystem
11 Plugin 'scrooloose/nerdtree'
12 Plugin 'jistr/vim-nerdtree-tabs'
13 Plugin 'kien/ctrlp.vim'
14 "html插件
15 "isnowfy 只兼容python2
16 Plugin 'isnowfy/python-vim-instant-markdown'
17 Plugin 'jtratner/vim-flavored-markdown'
18 Plugin 'suan/vim-instant-markdown'
19 Plugin 'nelstrom/vim-markdown-preview'
20 "python 语法检查插件
21 Plugin 'nvie/vim-flake8'
22 Plugin 'vim-scripts/Pydiction'
23 Plugin 'vim-scripts/indentpython.vim'
20
第1章 自动化运维与Python
24 Plugin 'scrooloose/syntastic'
25 "python 自动补全插件
26 "Plugin 'klen/python-mode'
27 ""Plugin 'Valloric/YouCompleteMe'
28 Plugin 'klen/rope-vim'
29 "Plugin 'davidhalter/jedi-vim'
30 Plugin 'ervandew/supertab'
31 "代码折叠
32 Plugin 'tmhedberg/SimpylFold'
33 "颜色插件
34 Plugin 'altercation/vim-colors-solarized'
35 Plugin 'jnurmine/Zenburn'
36 "请将需要的插件放置在此行之前"
37 call vundle#end()
38 "vundle结束 vundle代码请放置在最前面
39 filetype plugin indent on "开启文件类型检测
40 let g:SimpylFold_docstring_preview = 1
41 "自动补全插件设置
42 let g:ycm_autoclose_preview_window_after_completion=1
43 "颜色方案"
44 colorscheme zenburn
45 set guifont=Monaco:h14
46 let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
47 "不要生产swap文件
48 set noswapfile
49 "设置行号
50 set nu
51 "支持python 虚拟环境
52 py  za
95 "------------Python PEP 8 风格设置结束----------------
96 "F5编译和运行C程序，F6编译和运行C++程序
97 "请注意，下述代码在Windows下使用会报错
98 "需要去掉./这两个字符
99 "C的编译和运行
100 map  :call CompileRun()
101 func! CompileRun()
102 exec "w"
103 if &filetype == 'c'
104 exec "!gcc % -o %<"
105 exec "! ./%<"
106 elseif &filetype == 'cpp'
107 exec "!g++ % -o %<"
108 exec "! ./%<"
109 elseif &filetype == 'java'
110 exec "!javac %"
111 exec "!java %<"
112 elseif &filetype == 'python'
113 exec "!python %"
114 endif