### Python 3.6 软链接设置

为了在系统中使用Python 3.6及其相关的pip工具，可以通过创建软链接来简化路径管理。首先，在终端中执行以下命令以建立`pip3.6`的软链接：

```bash
sudo ln -s /home/aaron/local/python3.6.5/bin/pip3.6 /usr/bin/pip3.6
```

接下来，验证`pip3.6`是否正确指向了新安装的Python 3.6版本：

```bash
which pip3.6
```

这一步应该显示`/usr/bin/pip3.6`作为输出。

#### 创建虚拟环境

继续在终端中按照以下步骤操作，以便为项目创建一个隔离的开发环境（即虚拟环境）：

1. 安装`virtualenv`包：
   ```bash
   pip3.6 install virtualenv
   ```
   
2. 如果遇到错误提示“找不到/home/aaron/xxx/python3.6”，请编辑`/usr/bin/pip3.6`文件，并将其首行修改为你本地安装的Python 3.6解释器路径，例如：
   ```bash
   #!/home/aaron/local/python3.6.5/bin/python3.6
   ```

3. 对于可能出现的其他错误如`subprocess.CalledProcessError: Command 'lsb_release -a' returned non-zero exit status 1`，解决方法是创建一个新的软链接到正确的`lsb_release.py`位置：
   ```bash
   ln -s /usr/share/pyshared/lsb_release.py /home/aaron/local/python3.6.5/lib/python3.6/site-packages/lsb_release.py
   ```

4. 重新尝试安装`virtualenv`并创建新的虚拟环境：
   ```bash
   pip3.6 install virtualenv
   virtualenv -p /home/aaron/local/python3.6.5/bin/python3.6 projectA_env
   source projectA_env/bin/activate
   ```

现在你已经成功激活了一个基于Python 3.6的新虚拟环境`projectA_env`。要退出此环境，请运行`deactivate`命令。

### 开发工具简介

选择合适的开发工具对于提高编程效率至关重要。本章节将介绍两款流行的Python开发工具：PyCharm和Vim。

#### PyCharm

- **功能特点**：提供代码高亮、调试支持、智能代码补全等。
- **跨平台性**：适用于Windows, macOS, Linux。
- **版本选择**：社区版免费且足够日常使用；专业版提供更多高级特性但需付费。
- **获取地址**：[JetBrains官网](http://www.jetbrains.com/PyCharm/download/)
- **基本操作**：包括项目创建、文件添加及运行等。

#### Vim

- **轻量级文本编辑器**：非常适合习惯于键盘快捷键操作的用户。
- **扩展能力**：通过插件可以极大地增强其功能。
- **安装与配置**：确保你的系统已安装支持Python 3的Vim版本，并考虑使用Vundle作为插件管理器来安装额外的功能插件。

以上内容概述了如何设置Python 3.6环境以及推荐使用的两种开发工具的基本信息。希望这些指导能够帮助你更高效地进行Python项目的开发工作。