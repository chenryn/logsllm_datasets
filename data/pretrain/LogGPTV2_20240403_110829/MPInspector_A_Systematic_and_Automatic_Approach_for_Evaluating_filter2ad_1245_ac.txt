mas can be proved automatically due to the complex state
machine, which is a common limitation of Tamarin Prover
[17][22]. This limitation is related to the ranking of unproved
goals extracted from the lemma. To overcome this, Tamarin
Prover allows a user to supply heuristics called helping oracle
to rank the unproved goals and guide the prove procedure.
Therefore, we design and implement a new ranking strategy
on the helping oracle, which is detailed as follows.
The unproved goals extracted from the lemma include val-
idating the source of a state, the existence of an action fact
that the attacker knows some parameters (e.g., secret keys,
passwords, encrypted parameters), and other goals. First, we
solve the unproved goals to validate the source of a state.
Among these goals, the ones that contain a state of a longer
trace in the state machine should be solved ﬁrst, as they can
be transformed into the goals that contain a state of a shorter
trace. Second, we solve the unproved goals that validate the
existence of an action fact indicating the attacker knows se-
cret key or password. Third, we solve the unproved goals
that validate the existence of an action indicating the attacker
knows an encrypted parameter. This order can avoid the case
of ﬁnding no proof path when solving the existence of an
action that the attacker knows an encrypted parameter. Last,
we apply the default ranking from Tamarin Prover for the
remaining unproved goals. Our strategy helps Tamarin Prover
automatically and efﬁciently validate the security properties.
For instance, we apply our strategy to prove the authentica-
tion lemma of the CONNECT message on the server-side on
AWS IoT Core. While the automatic mode will never be ter-
minated, our helping oracle proves that this lemma is false,
whose generated proof only costs 13 steps. As a result, our
formal veriﬁcation module is fully automatic thanks to the
proposed helping oracle.
4.8 Extension for New Types of MPs
MPInspector has built-in support for security analysis on
any customized implementation of MQTT, CoAP and AMQP.
As for new customized MP implementations, the amount of
work to be done is to offer three inputs including MP trafﬁc,
IoT platform documents and communication conﬁgurations,
which is simple and requires minimum effort. We only need
expert involvement when we need to analyze a new MP pro-
tocol. First, the message decoder in the message semantics
extraction module and the adapter in the interaction logic ex-
traction module need to be re-implemented according to the
types and formats of the messages in the new MP. Second, the
meta properties for the new MP need to be concluded, which
include the necessary messages and parameters that should be
authenticated and conﬁdential. Third, the pre-extracted mod-
eling knowledge from the standard MP speciﬁcation, e.g., the
initial states of the clients and the broker, need to be provided
for the formal code translation module. All the knowledge re-
quired is not tied to a speciﬁc MP implementation and can be
obtained from the public standard speciﬁcation of the new MP.
Note that the above operations are a one-shot effort for each
new MP type. Actually, in real world, the number of popular
MPs is limited and usually stable. Therefore, MPInspector
is directly usable in most scenarios.
5 Evaluations
In this section, we utilize MPInspector to explore ten imple-
mentations of MQTT, CoAP and AMQP on nine leading IoT
platforms. We aim to answer the following research questions:
• RQ1: How well do MP implementations on different plat-
forms follow the security properties?
• RQ2: What are the reasons for property violations?
4212    30th USENIX Security Symposium
USENIX Association
• RQ3: What kind of attacks can be triggered based on prop-
erty violations?
• RQ4: How efﬁcient and accurate is MPInspector?
5.1 Experiment Settings
We perform our experiments on a laptop with a 2.6 GHz 2-
core Intel i5 processor and 8GB RAM, using Oracle Java
Runtime version 1.8 (64 bit) in its default settings.
Evaluation subjects. To examine the effectiveness of
MPInspector, we evaluate ten MP implementations from
nine leading commercial IoT platforms [8], which are shown
in Table 1. These implementations cover three main types of
MPs, MQTT (including the widely adopted version V3.1.1
and the latest version V5.0), CoAP and AMQP V1.0. We
perform our analysis by buying SaaS applications for MP
from the IoT platforms so that the analysis can cover more
devices in the real world that use these SaaS applications (see
Section 2.1).
Among the ten evaluated MP implementations, ﬁve of them
adopt SSL/TLS mechanism, including MQTT on Google
IoT Core [11], Azure IoT Hub[6], AWS IoT Core[5], Bosch
IoT Hub[7], and Aliyun Cloud [3]. We also analyze the se-
crecy and authenticity properties of MP implementations
without SSL/TLS, including MQTT on Tuya Smart [18] and
Mosquitto [15], CoAP on Aliyun Cloud [3] and EMQ X
[10], and AMQP on ActiveMQ [2]. Because they are widely
adopted by the device manufactures [8] and their security
ﬂaws may have a large practical impact.
Validation settings. We use the client SDK provided by the
SaaS application to build potential victims for vulnerabilities
and attack validation. As for Tuya Smart, who has acknowl-
edged our ﬁndings, we further validate our ﬁndings on the
real devices under their permission. We also build up scripts
based on JavaScript to exploit the vulnerabilities and perform
the validation attacks. Performed as an attacker, we manually
check those lemmas guided by the attack paths generated by
Tamarin Prover. Speciﬁcally, we use our scripts to see if we
can acknowledge the secret or impersonate the agents in the
communication between a server and a client.
Ethical consideration. Our study conducts active measure-
ment on the real world MP implementations. As a result, we
take several steps to ensure that our experiments are ethically
sound and do not result in the disruption of other users and
IoT platforms. First, we test the SaaS appliactions for MP on
our own services bought from the IoT platforms, which does
not disrupt other users. Second, when interacting with the
broker on the IoT platforms, our messages are based on the
normal trafﬁc produced by us in our own SaaS applications,
which does not disrupt the IoT platforms. Lastly, we validate
our attacks on Tuya Smart with our own devices, which does
not inﬂuence other devices or the platform.
Table 1: An overview of violated properties (noted as Pr.)
in the ten MP implementations. For the checked properties,
please refer to Table 6 and Table 7 in Appendix A.
Secrecy Pr.
Neighbor
Scenario
MS{1,3-6}
Tenant
Scenario
MS{1-6}
Platform
MPs
Google IoT
Core
AWS IoT
Core
Azure IoT
Hub
Bosch IoT
Hub
Aliyun
Cloud
Tuya
Smart
Mosquitto
EMQ X
Aliyun
Cloud
ActiveMQ
MQTT
V3.1.1
MQTT
V3.1.1
MQTT
V3.1.1
MQTT
V3.1.1
MQTT
V3.1.1
MQTT
V3.1.1
MQTT
V5.0
CoAP
CoAP
AMQP
V1.0
MS{1, 3-6} MS{1, 3-6}
MS{1, 3-6}
MS{1-6}
MS{1, 3-6} MS{1, 3-6}
MS{1, 3-6}
MS{1-6}
MS{1, 3-5}
MS{1-6}
MS{1,
3-9}
CS{1-6}
CS{1-4,
7, 9-10}
AS{1-5}
MS{1, 3-9}
CS{1-6}
CS{1-4,
7-10}
AS{1-5}
Neighbor
Scenario
MA{1-9}
MA{1-10}
MA{1-9}
MA{1-9}
MA{1-9}
MA{1-6,
Authentication Pr.
Tenant
Scenario
MA{1,3,
5,7,9}
MA{1,3,
5,7,9-10}
MA{1,3,
5,7,9}
MA{1,3,
5,7,9}
MA{1,3,
5,7,9}
MA{1,3,
5,7,9}
MA{1,3,
5,7,9-11}
CA{1,3}
CA{5,7}
AA{1,3,5,
7, 9,11,13}
8-9}
MA{1-11}
CA{1-4}
CA{5-6, 8}
AA{1-13}
5.2 Property Validation
This section answers the questions RQ1 and RQ2. We show
the identiﬁed property violations in Table 1, where we ﬁnd
that all MP implementations encounter various authentication
and secrecy property violations, and each MP implementation
violates at least 18 properties.
5.2.1 Neighbor Scenario
In the neighbor scenario, MPInspector identiﬁes that three
out of the ten MP implementations (Mosquitto, EMQ X, and
ActiveMQ) violate all the security properties. The rest of
these implementations violate at least ten secrecy properties
and ﬁve authentication properties.
Secrecy properties. We identify that ﬁve MP implementa-
tions (MQTT on Tuya Smart and Mosquitto, CoAP on Aliyun
Cloud and EMQ X, AMQP on ActiveMQ) support transmit-
ting messages in plain text. The other ﬁve MP implementa-
tions (MQTT on Google IoT Core, AWS IoT Core, Azure IoT
Hub, Bosch IoT Hub, and Aliyun Cloud) adopt SSL/TLS but
are still facing SSL/TLS interception risks because of wrong
conﬁgurations. In addition, their messages can still be de-
crypted by man-in-the-middle attacks. As a result, for all the
ten implementations, MPInspector identiﬁes that the secrecy
properties for the parameters without additional encryption
are all failed. Below we discuss the secrecy properties on
the parameters with additional encryption. Five MP imple-
mentations (Google IoT Core, Azure IoT Hub, Bosch IoT
Hub, Aliyun Cloud, and Tuya Smart) deploy additional en-
cryption on some of their parameters. Among them, Google
IoT Core and Azure IoT Hub use a secret key to generate
JWT and SAS tokens, which are valid before the expired
time. In the neighbor scenario, the unexpired token can be
reused by an attacker. Aliyun Cloud encrypts a client’s secrets
USENIX Association
30th USENIX Security Symposium    4213
with timestamps by a secret key. The CoAP implementa-
tion in Aliyun Cloud additionally encrypts the payload in
the POST_PUBLISH message with a timestamp by a secret
key. However, MPInspector validates that the timestamp is
not checked by the server, which suggests that the password
and payload in Aliyun Cloud can be reused as well. Tuya
Smart uses a secret key to encrypt a client’s password in the
CONNECT message and encrypt the payload with a timestamp
in the PUBLISH message. MPInspector identiﬁes that Tuya
Smart satisﬁes the secrecy property for PUBLISH Payload
but fails the secrecy for the password.
Authentication properties. MPInspector validates authen-
tication properties on both the client side and the server side.
Table 1 shows the overview of the authentication property
violations detected by MPInspector.
From the results, three MP implementations without any au-
thentication mechanism (Mosquitto, EMQ X, and ActiveMQ)
fail the aliveness goals of all authentication lemmas. Five
MP implementations including Google IoT Core, AWS IoT
Core, Azure IoT Hub, Bosch IoT Hub, and Aliyun Cloud
that adopt SSL/TLS satisfy the non-injective goals on the
CONNECT message of the server side. However, they still fail
the non-injective goals on the CONNECT message because of
SSL/TLS interception. Their other messages (SUBSCRIBE,
UNSUBSCRIBE, PUBLISH, DISCONNECT messages) without au-
thentication fail the aliveness goals. The rest two implemen-
tations (MQTT on Tuya Smart and CoAP on Aliyun Cloud)
do not adopt SSL/TLS but adopt an encryption mechanism
on their messages. For Tuya Smart, the CONNECT message on
the server side satisﬁes the aliveness goal but fails the weak
agreement goal. Therefore, even though the password is en-
crypted by a secret key, the attacker can still sniff and reuse
on the CONNECT message. For Aliyun Cloud’s CoAP imple-
mentation, it has encryption but does not check the timestamp
in CON_POSTAUTH and CON_POSTPUBLISH messages. There-
fore, an attacker can connect with the server by replaying
the messages he collected from the client previously. As a
result, in Aliyun Cloud, authentications on CON_POSTAUTH
and CON_POSTPUBLISH messages satisfy the weak agreement
goal but fail the non-injective goal.
5.2.2 Tenant Scenario
Table 2: Attacks and relevant property (noted as Related Pr.)
violations ( =validated, =partially validated).
Affected
Protocol
Affected
Platforms
All protocols
All platforms
MQTT V3.1.1
MQTT V5.0
AWS IoT Core
Tuya Smart
Mosquirro
CoAP
EMQ X
Neighbor
Scenario
Man-in-
the-middle
Replay
Attack
Transfer Sync.
Failure
Tenant
Scenario
Client
Identity
Hijacking
Reﬂection
Attack
Malicious
Topic
Subscription
Malicious
Topic
Publish
Malicious
Response
Topic Publish
Unauthorized
Will
Message
Unauthorized
Retained
Message
Illegal
Occupation
Veriﬁed
Related Pr.
MA{1-9},
AA{1-13},
CA{1-8}
MA{1-9}
MA{1-9},
MA{10-11}
CA{1-4}
AMQP V1.0
ActiveMQ
AA{1-13}
AMQP V1.0
Affected
Protocol
MQTT V3.1.1
MQTT V5.0
ActiveMQ
Affected
Platforms
Google IoT Core
Azure IoT Hub
AWS IoT Core
Aliyun Cloud
Mosquitto
AMQP V1.0
ActiveMQ
CoAP
CoAP
MQTT V3.1.1
EMQ X
Aliyun Cloud
EMQ X
Aliyun Cloud
AWS IoT Core
AMQP V1.0
ActiveMQ
MQTT V3.1.1
AWS IoT Core
AA{1-9}