的概念用括号括起来，再拿它与新的概念对比。这种学习方法并不新鲜，
是长期以来一直被人们普遍使用的正面攻击法。但是，正面攻击法往往是
最困难的。这是因为，在舍弃已经习惯了的风格时，需要的不只是理智，
还有勇气。
参考→1-4节、1-9节、1-10节
4.将表看成集合
前面说过，表的抽象度比文件更高。文件紧密地依赖于它的存储方法，
但是SQL在处理表或视图时，丝毫无需在意它们是如何存储的（不考虑
性能的情况下）虽然我们很容易把表看成与文件一样的东西，但是实际上，
一张表并非对应一个文件，读取表时也并不是像读取文件一样一行一行地
进行的。
理解表的抽象性的最好的方法是使用自连接。原因很显然，自连接本
身就是基于集合这一高度抽象（也可以说成自由）的概念的技术。在SQL
语句中，我们给同一张表赋予不同的名称后，就可以把这两张表当成不同
的表来处理。也就是说，通过自连接，我们可以添加任意数量的集合来处
理。这种高度自由正是SQL的魅力及力量所在。
参考→1-2节
5.理解EXISTS谓词和“量化”的概念
支撑SQL的基础理论，除了集合论，还有谓词逻辑，具体地说，是
一阶谓词逻辑。谓词逻辑有100多年的历史，是现代逻辑学的标准逻辑体
系（因此，在逻辑学领域不加解释地提到“逻辑”时，一般都指一阶谓词
逻辑）。
在SQL中，谓词逻辑的主要应用场景是“将多行数据作为整体”处
理的时候。谓词逻辑中具有能将多个对象作为一个整体来处理的工具“量
化符”.对于SQL来说，量化符就是EXISTS谓词。
EXISTS的用法和IN很像，比较好理解。不过，我们更应该灵活掌握
的其实是其否定形式——NOTEXISTS的用法。可能是因为SQL在实现量
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 261
248—第2章关系数据库的世界
化符时偷懒了（？），两个量化符只实现了一个。因此，对于SQL中不具备
的全称量化符，我们只能通过在程序中使用NOTEXISTS来表达
说实话，使用NOT EXISTS的查询语句，可读性都不太好。而且，因
为同样的功能也可以用HAVING子句或者ALL谓词来实现，所以很多程序
员都不太愿意使用它。但是，NOTBXISTS有一个很大的优点，即性能比
HAVING 子句和 ALL 谓词要好得多。
在优先考虑代码的可读性时，我们没必要强行使用NOTEXISTS来表
达全称量化。但是也有需要优先考虑性能的时候，为此我们有必要理解通
过德·摩根定律和NOTEXISTS来表达全称量化的方法。
参考→1-8节、1-9节
6.学习HAVING子句的真正价值
HAVING子句可能是SQL诸多功能中最容易被轻视的一个。不知道它
的真正价值是一个很大的损失。可以说，HAVING子句是集中体现了SQL
之面向集合理念的功能。多年以来，笔者一直认为掌握SQL的思维方式
的最有效的捷径就是学习HAVING子句的用法。
这样说的原因是，与WHERE子句不同，HAVING子句正是设置针对集
合的条件的地方，因此为了灵活运用它，我们必须学会从集合的角度来理
解数据。通过练习HAVING子句的用法，我们会在不经意间加深对面向集
合这个本质的理解，真是一举两得。此外，在使用HAVING子句处理数据时，
常用的方法是下面即将介绍的方法一—画圆。
参考→1-4节、1-10节
7.不要画长方形，去画圆
面向过程语言在不断发展的过程中积累了许多用于辅助编程的视觉工
具。特别是产生于1970 年并发展至今的结构图（structure diagram）和数
据流图（data flow diagram），它们已经成为业内的标准，并有着很好的效果。
这些图一般都用长方形表示处理过程，用箭头表示数据的流转方向。
但是，这些传统工具并不能用于辅助SQL的编程。SQL只是用来描
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 262
26从面向过程思维向声明式思堆、面向集合思堆转变的7个关健点一
249
述所需数据的查询条件的，并不能描述动态的处理过程。表也只是用来描
述静态的数据而已。举个例子，写SQL的过程就像是打出招聘广告，加
上“35岁以下”或“不限经验”等条件。而实际查找符合条件的人才的
工作是由数据库来做的。
目前，能够准确描述静态数据模型的标准工具是维思图，即“圆”
通过在维恩图中画嵌套子集，可以很大程度地加深对SQL的理解。这是
因为，嵌套子集的用法是SQL中非常重要的技巧之一。例如，GROUP BY
注0
X星 GSOCP BV A HRPTION 3Y
的基础，关于类的概念，请参考
曼型递归集合、用来处理树结构的嵌套子集模型，都是子集的代表性应用。
2-5 节。
能否深刻理解并灵活使用嵌套子集（=递归集合），可以说是衡量SQL编
程能力是否达到中级水平的关键。
面向过程的思维方式
面向集合的思维方式
处理1
S0
S1
S2
处理2
处理3
处理4
注9
动作电影领域的大神李小龙曾说过一句名言：不要思考，去感受。
30 Don't thtnk, feel,
编者注
同样，数据库领域的大神Joe Celko也说过类似的名言：不要画长方形和
注
箭头，去画圆·。这句话非常精辟。
携白 (50L 编程风格) 9.7 节*不
亚以方框和管头的方式思考。以
及 9.8节“函图雁和集合图”。
参考→1-4节、1-7节
---
## Page 263
250—
—第2章关系数据库的世界
S
2
SQL和递归集合
SQL和集合论之间
从集合论的角度思考是提升SQL编程能力的关键。特别是理解嵌套子集，即递归集合的使用方法，
这具有非常重要的意义。本节将介绍递归集合在SQL中的重要性。
实际工作中的递归集合
1-2节介绍了使用非等值自连接代替RANK函数来求位次的SQL语句，
大家还记得吗？如果不记得，试着回想一下使用关联子查询求累计值的查
询语句也可以（参考1-6节）。这两节都简单介绍过SQL查询的基本思维
方式，即由冯·诺依曼提出的基于递归集合的自然数定义。
第一次接触到这种思维方式的读者可能会觉得非常惊讶。虽然它很好
地说明了SQL和集合论之间有着非常紧密的联系，但是对于没有深入了
解“内情”的人来说，集合和数之间的这种关系还是比较新鲜的。冯·诺
家有这样的疑问也不算奇怪。本节将介绍一下相关的历史背景，解答一下
这个疑间。关于冯·诺依曼提出递归集合这一概念的背景，要从更早以前
说起。
冯·诺依曼的前辈们
冯·诺依曼提出用递归集合定义自然数，是在1923年发表的论文《关
于超限序数的引入》中。这是他发表的第二篇论文。不过，令人嫉妒的是
当时他还只是个高中生。从论文标题中的“序数”可以看出，实际上冯·诺
依曼提出的与其说是“自然数的定义”，还不如说是“序数的定义”，序数
可以理解成自然数的别称，即在强调0的下一个是1，1的下一个是2，2
的下一个是3.……这种顺序时的名称（相反，在不强调顺序时，自然数
---
## Page 264
2-7SOL和建归集合—251
有“基数”这样一个别称）。
其实，从冯·诺依曼的定义中可以看出，先定义0，然后用0定义1，
再用1定义2…整个过程都是有顺序的。关于这个定义，我们在学习自
连接的时候已经了解过了，现在再来看一下。
冯·诺依曼提出的自然数的递归定义
自然牌
关注白然数的顺序时
还原成集合时
②
{0}
(0
{0, 11
(0, (0)
{0, 1, 2}
(0, (0), (2, (0)
·
·
定义的过程是有顺序的，对吧？或者反过来说，我们可以从大数追溯
到0，这样理解起来可能更容易一些。定义3时需要2，定义2时需要1，
数。这种阶段性的定义方法叫作"递归定义”.在SQL中，就是通过计算"定
义了各自然数的集合中的元素个数”来计算位次的。
接下来是本节的核心内容。其实，就采用递归的方法定义自然数来说，
冯·诺依曼并不是最早的。在他之前，至少有两个人曾经提出过这种方法。
其中一位是伟大的哲学家弗雷格（Friedrich Ludwig Gottlob Frege），他几
乎以一已之力创建了关系模型基础之一的谓词逻辑。另一位是因完善了现
代集合论体系并提出良序定理和选择公理而闻名的数学家策梅洛（Ernst
FriedrichFerdinand Zermelo）。两人都是留名数学史的伟大人物。
这两个人的做法都是先任意指定一个集合表示0，然后按照某种规则
逐步生成表示1,2,3,的集合。我们来比较一下他们两人的做法和冯·诺
依曼的做法的区别。
---
## Page 265
252—第2章关系数据库的世界
各种自然数的递归定义
自然数
马·诺侬曼方法
萧梅洛方法
需格方法
②
②
(2}
(2)
(2)
(0, (0)
[(0., (0))
(2)
(0) 0) (0) 0)
0., 0), 0, (0
(0, (0), (0, (0),(0, (0), (0, (0))
+
这么多括号看起来有点眼晕吧？其实三人的做法既有相似的地方，又
有各自的特点。我们会首先注意到策梅洛的做法，它很简洁。以空集代表
0这一点与冯·诺依曼的做法类似，想要生成后续的自然数时只需在外面
增加括号就可以了。例如，30这个数可以像下面这样表示。
这样深层嵌套的集合，即使是Lisp程序员，看到了也会吓一跳吧？不
过不用担心，上面这个集合是否真的表示30，非常容易验证。因为左边（或
者右边）的括号有30个，刚好等于我们想要定义的数。这里说一下，按
照冯·诺依曼方法，集合中的元素个数等于想要定义的数。SQL可以通
过COUNT函数计算出元素个数，与冯·诺依曼方法的定义方式兼容性很好。
相反，策梅洛方法不太适合在SQL中使用（SQL本来就不使用括号表示
集合）。
弗雷格方法和冯·诺依曼方法很像，区别在于不用空集表示0，而用
包含空集的集合来表示0。从时间上看，弗雷格方法提出于1884年，是三
者之中最早的。但是后来策梅洛和冯·诺依曼分别改良了它。冯·诺依曼
的一个可贵的才能是善于借鉴别人的观点，并快速地加以改进，从而提出
自己的新观点，这个才能在这里得到了充分的展现。
通过前文，我们理解了冯·诺依曼提出的方法在历史上有看非凡的价
值。但是，当前仍然有下面两个尚未解决的问题。
1.为什么自然数有这么多种定义？定义一般不都是只有一种？
2.为什么要使用集合来定义自然数？
---
## Page 266
2-7SOL和建归集合—253
这两个疑间提得很有道理。稍后我们将从第一个开始讨论。
在思考这些问题的过程中，我们会在不经意间窥得二十世纪初期“现
代数学黎明期”的情景。
数是什么
一般来说，我们在学习0或者1这种“数”的概念时，需要结合具体
物品的个数来理解。笔者现在还记得小学数学课本里画着的苹果或者橘子。
但是显然，如果要考虑数的一般定义，那么像这样与具体物品联系起来的
做法是不可行的。假如我们使用苹果来定义1这个数，那么没有见过苹果
的人就无法理解这个定义（使用橘子也是一样），不过事实上，无论是见
过苹果的人还是没见过苹果的人，他们对于1这个数的理解都是一致的。
因此，我们必须把数作为不依赖于任何具体物品的更加抽象的对象来定义。
最早提出自然数的一般定义的勇者是意大利数学家皮亚诺（Giuseppe
Peano）。他在1891年提出，只要满足一定的条件，无论什么样的东西都
可以作为自然数，并且列出了自然数必须满足的5个条件。这就是现在通
注0
顺更说下,皮亚读的 5 条公理
如下所示。
1. 存在第—个白然数。
2. 对于任童的白然数a，都存在
3.第一个白然数不是任何自然数
它的后继白然数。
在外企工作、年收入1000万日元以上”这样必须满足的条件。只要
4. 不同的自然数，拥有不同的局
的罚能向然数
满足这些条件，无论是谁都可以作为“结婚对象”—这就是皮亚诺的态
继向然数
度，某种意义上还是有点现代人的洒脱的。
5. 如果当第一个向然数满足某个
性质，而且自际数a满是这个
皮亚诺列出的自然数必须满足的条件有“存在起到0的作用的东
足这个性质，则所有的自然数
性质时，它的后继自然数也满
西”“没有在0前面的自然数”等，大多数都是理所当然的。这些相当于
都满足这个性质。
中有一个重要的条件与我们当前的话题相关，那就是“每一个自然数a，
都具有后继自然数（successor）”。5的后面必须有6，1988的后面必须有
1989，这也是相当理所当然的条件。如果“17的后面有缺失，直接到了
19”，那么这样的自然数就没什么实用价值了。
像这样得出某个自然数的后继自然数的函数叫作后继函数，写作
suc（x)。于是有 suc(5）=6、suc(17）=18。因此，使用后继函数生成
---
## Page 267
254—第2章关系数据库的世界
自然数时，可以像下面这样嵌套使用。
1 = Buc (0)
0 = 0
1( (0)one)ons|ong = E
2 =
Bue loue(0))
这里需要看重理释的是，我们并没有指定该后继函数的内部实现。无
论什么样的内部实现，只要能够生成下一个自然数就可以，这是一个比较
宽松的条件。如果还用结婚对象的要求来比喻，这个条件就相当于“不论
是什么样的职业，只要年收入1000万日元以上就行”。也就是说，不关心
过程，只重视结果。
当然，冯·诺依曼等三人思考的自然数中也都存在后继函数。
冯·诺依曼方法和弗雷格方法的后继函数：suc(a)=aU {a}
策梅洛方法的后继函数：suc(a)={a}
可以者出，在后继函数的实现方式上，冯·诺依曼方法和弗雷格方法
相同，但是策梅洛方法与它们不同，不过哪一种方法都没有间题。不管从
山梨县开始爬还是从静冈县开始爬，都能到达富士山的峰顶。同样，无论
采用哪种方法，只要能够找到后继自然数就可以了。
好了，到这里，我们终于给出了第一个间题的答案。其实冯·诺依曼
等人的主要贡献并不是正确地定义自然数。自然数的定义是由皮亚诺列举
的5个条件给出的，冯·诺依曼等人只是根据皮亚诺公理生成了自然数
而已。这样看来，冯·诺依曼等人的工作可以称为“构建”。
接下来我们来解释第二个问题。构建自然数并不一定要使用集合。在
计算机科学相关领域还有一种使用入演算函数来构建自然数的方法。使
用入演算构建的自然数被阿隆佐·邱奇（Alonzo Church）以自己的姓氏
命名为了“邱奇数”。不过，虽然取名叫“数”，其本质却是输入输出均为
函数的高阶函数。我们仍然可以像下面这样递归地生成自然数。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 268
2-7SOL和建归集合—255
0 :=  fx.x