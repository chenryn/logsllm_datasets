us to build a framework for reasoning about the asym-
metry of converting from bytes to bits versus from bits
to bytes, as well as the behavior of repeatedly applied
wrapped functions.
Bridging vectors and lists. We bridge (2) by changing
all Bvector n to list bool, then proving that all functions
preserve the length of the list when needed. This main-
tains the Bvector n invariant that its length is always n.
In general, the use of lists (of bytes, or Z values) is mo-
tivated by the desire to reuse Appel [5]’s prior work on
SHA literally, whereas the use of Bvector enables a more
elegant proof of the proof of cryptographic properties.
Indeed,
Injectivity of splitAndPad. The security proof relies
on the fact that splitAndPad is injective, in the sense
that b1 = b2 should hold whenever splitAndPad(b1)
= splitAndPad(b2).
this property is vio-
lated if we naively instantiate splitAndPad with the
bitlists-to-bytelists roundtrip conversion of SHA-256’s
padding+length function, due to the non-injectivity of
bitlists-to-bytelists conversion. On the other hand, as
the C programs interpret all length informations as re-
ferring to lengths in bytes, attackers that attempt to send
messages whose length is not divisible by 8 are ef-
fectively ruled out. To verify this property formally,
we make the abstract speciﬁcation (and the proof of
Theorem HMAC-PRF) parametric in the type of mes-
sages. Instantiating the development to the case where
messages are bitlists of length 8n allows us to establish
the desired injectivity condition along the the lines of the
following informal argument.
Given a message m, SHA’s splitAndPad appends a 1
bit, then k zero bits, then a 64-bit integer representing
the length of the message |m|; k is the smallest number
so that |splitAndPad(m1)| is a multiple of the block size.
Injective means that if m1 (cid:27)= m2 then splitAndPad(m1) (cid:27)=
splitAndPad(m2). The proof has ﬁve cases:
• m1 = m2, then by contradiction.
• |m1| = |m2|, then splitAndPad(m1) must differ from
splitAndPad(m2) in their ﬁrst |m1| bits.
• |m1| (cid:27)= |m2|, |m1| ≤2 64, |m2| ≤2 64, then the last 64
bits (representation of length) will differ.
• (|m1|−|m2|) mod 264 (cid:27)= 0, then the last 64 bits (rep-
resentation of length) will differ.
• |m1|(cid:27)=|m2|, and (|m1|−|m2|) mod 264 = 0; then the
lengths |m1|,|m2| must differ by at least 264, so the
variation in k1 and k2 (which must each be less than
twice the block size) cannot make up the difference,
so the padded messages will have different lengths.
Our machine-checked proof of injectivity is somewhat
more comprehensive than Bellare et al.’s [15], which
reads in its entirety, “Notice that a way to pad messages
to an exact multiple of b bits needs to be deﬁned, in par-
ticular, MD5 and SHA pad inputs to always include an
encoding of their length.”
216  24th USENIX Security Symposium 
USENIX Association
Preservation of cryptographic security. Once the
equivalence between the two functional programs has
been established, and injectivity of the padding function
is proved, it is straightforward to prove the applicability
of Theorem HMAC-PRF (Listing 6) to the API spec.
6 Specifying and verifying the C program
(Items 11, 13 of the architecture.) We use Veriﬁable C
to prove that each function’s body satisﬁes its speciﬁca-
tion. As in a classic Hoare logic, each kind of C-language
statement has one or more proof rules. Appel [6, Ch.
24-26] presents these proof rules, and explains how tac-
tics—programmed in the Ltac language of Coq—apply
the proof rules to the abstract syntax trees of C programs.
The ASTs are obtained by applying the front-end phase
of the CompCert compiler to the C program. The HMAC
proof (item 13 in §1) is 2832 lines of Coq (including
blanks and comments), none of which is in the trusted
base because it is all machine-checked.
Just like OpenSSL’s implementation of SHA-256, the
C code implementing HMAC is incremental:
the one-
shot HMAC function is obtained by composing auxil-
iary functions hmacInit, hmacUpdate, hmacFinish, and
hmacCleanup that are all exposed in the header ﬁle.
They allow a client to reuse a key for the authenti-
cation of multiple messages, and also to provide each
individual message in chunks, by repeatedly invoking
hmacUpdate. To this end, the auxiliary functions em-
ploy the hash function’s incremental interface and are
formulated over a client-visible struct, HMAC-CTX.
Specializing OpenSSL’s original header ﬁle to the hash
function SHA-256 yields the following:2
typedef struct hmac-ctx-st {
SHA256-CTX md-ctx; // workspace
SHA256-CTX i-ctx; // inner SHA structure
SHA256-CTX o-ctx; // outer SHA structure
unsigned int key-length;
unsigned char key[64];
} HMAC-CTX;
void HMAC-Init(HMAC-CTX ∗ctx,
unsigned char ∗key, int len);
void HMAC-Update(HMAC-CTX ∗ctx,
const void ∗data, size-t len);
void HMAC-Final(HMAC-CTX ∗ctx,
unsigned char ∗md);
2During the veriﬁcation, we observed that the ﬁelds key-length and
key can be eliminated from hmac-ctx-st, for the price of minor alter-
ations to the code, API speciﬁcation, and proof. A similar modiﬁcation
has recently (and independently) been implemented in boringssl.
void HMAC-cleanup(HMAC-CTX ∗ctx);
unsigned char ∗HMAC(unsigned char ∗key,
int key-len,
unsigned char ∗d, int n,
unsigned char ∗md);
Fields i-ctx and o-ctx store partially constructed SHA
data structures that are initialized during HMAC-Init to
hold the ⊕ of the normalized key and ipad/opad, respec-
tively, and are copied to the workspace md-ctx where the
inner and outer hashing applications are performed.
Omitting the implementations of the other functions,
the one-shot HMAC invokes the incremental functions
on a freshly stack-allocated HMAC-CTX, where 32 is
the digest length of SHA-256:
unsigned char ∗HMAC(unsigned char ∗key,
int key-len, unsigned char ∗d,
int n, unsigned char ∗md) {
HMAC-CTX c; static unsigned char m[32];
if (md == NULL) md=m;
HMAC-Init(&c, key, key-len);
HMAC-Update(&c,d,n);
HMAC-Final(&c,md);
HMAC-cleanup(&c);
return(md);
}
In order to verify that this code satisﬁes the speciﬁcation
HMAC256-spec from Section 2, each incremental func-
tion is equipped with its individual Veriﬁable C speciﬁca-
tion. Each speciﬁcation is formulated with reference to a
suitable Coq function (or alternatively a propositional re-
lation, as extractability is not required) that expresses the
function’s effect on the HMAC-CTX structure abstractly,
without reference to the concrete memory layout.
More precisely,
the logical counterpart of an
HMAC-CTX structure is given by the Coq type
Inductive hmacabs :=
HMACabs: ∀ (ctx iSha oSha: s256abs)
(keylen: Z) (key: list Z), hmacabs.
That is, an HMAC abstract state has ﬁve components:
ctx, iSha, and oSha are SHA abstract states, keylen is an
integer, and key is a list of (integer) byte values. Appel
[5] deﬁnes SHA abstract states; if you initialize a SHA
module and dump the ﬁrst n bytes of a message into it,
you get a value of type s256abs representing the abstract
state of the incremental-mode SHA-256 program.
Appel also deﬁnes a relation, update-abs a c1 c2, say-
ing that adding another (incremental mode) message
fragment s to abstract state c1 yields state c2.
We deﬁne abstract
for HMAC, and the
incremental-mode HMAC update relation, in terms of
the SHA s256abs type and update-abs relation.
states
USENIX Association  
24th USENIX Security Symposium  217
Deﬁnition hmacUpdate (data: list Z)
(h1 h2: hmacabs) : Prop :=
match h1 with HMACabs ctx1 iS oS klen k
⇒ ∃ ctx2, update-abs data ctx1 ctx2
end.
∧ h2 = HMACabs ctx2 iS oS klen k
To connect these deﬁnitions to the upper parts of our
veriﬁcation architecture, we prove that the composi-
tion of these counterparts of the incremental functions
(i.e. the counterpart of the one-shot HMAC) coincides
with HMAC256 the FIPS functional speciﬁcation from
Section 3.
Deﬁnition hmacIncremental (k data dig:list Z) :=
∃ hInit hUpd, hmacInit k hInit ∧
hmacUpdate data hInit hUpd ∧
hmacFinal hUpd dig.
Lemma hmacIncremental-sound k data dig:
hmacIncremental k data dig →
dig = HMAC256 data k.
Proof. ... Qed.
Downward, we connect hmacabs and HMAC-CTX by a
separation logic representation predicate:
Deﬁnition hmacstate- (h:hmacabs) (c:val): mpred:=
EX r:hmacstate,
!! hmac-relate h r
&& data-at Tsh t-struct-hmac-ctx-st r c.
where hmac-relate is a pure proposition specifying that
each component of a concrete struct r has precisely the
content prescribed by h.
Using these constructions, we obtain API spec-
such as
incremental
functions
the
iﬁcations of
HMAC-Update.
Deﬁnition HMAC-Update-spec :=
DECLARE -HMAC-Update
WITH h1: hmacabs, c : val, d:val, len:Z,
data:list Z, KV:val
PRE [ -ctx OF tptr t-struct-hmac-ctx-st,
-data OF tptr tvoid, -len OF tuint]
PROP(has-lengthD (s256a-len (absCtxt h1))
len data)
LOCAL(temp -ctx c; temp -data d;
PROP(hmacUpdate data h1 h2)
LOCAL()
SEP(`(K-vector KV); `(hmacstate- h2 c);
`(data-block Tsh data d)).
temp -len (Vint (Int.repr len));
gvar -K256 KV)
SEP(`(K-vector KV); `(hmacstate- h1 c);
`(data-block Tsh data d))
POST [ tvoid ]
EX h2: hmacabs,
7 Proof effort
It is difﬁcult to estimate the proof effort, as we used this
case study to learn where to make improvements to the
usability and automation of our toolset. However, we can
give some numbers: size, in commented lines of code, of
the speciﬁcations and proofs. Where relevant, we give
the size of the corresponding C API or function.
Functional correctness proof of the C program:
C lines Coq lines SHA-256 component
71
10
81
10
38
31
7
248
25
25
74
7
27
5
21
134
FIPS-180 functional spec of SHA
169
247 API spec of SHA-256
1022 Lemmas about the functional spec
229
1640
43
1682
1484
58
6574
Proof of addlength function
sha256 block data order()
SHA256 Init()
SHA256 Update()
SHA256 Final()
SHA256()
Total SHA-256
FIPS-198 functional spec of HMAC
159
374 API spec
533
Total HMAC spec
Supporting lemmas
875
1530 HMAC Init proof
101 HMAC Update proof
196 HMAC Final proof
31 HMAC Cleanup proof
99 HMAC proof
2832
Total HMAC proof
FCF proof that HMAC is a PRF:
Coq lines component
70 Bellare-style functional spec of HMAC
25
377
472
Statement, HMAC is a PRF
Proof, HMAC is a PRF
Total
Connecting Veriﬁable C proof to FCF proof:
Coq lines component
3017 General equivalence proof of the two func-
tional specs for any compression function
Specialization to SHA-256
Total
993
4010
8 Related work
We have presented a foundational, end-to-end veriﬁca-
tion. All the relevant aspects of cryptographic proofs or
of the C programming language are deﬁned and checked
218  24th USENIX Security Symposium 
USENIX Association
with respect to the foundations of logic. We say a rea-
soning engine for crypto is foundational if it is imple-
mented in, or its implementation is proved correct in, a
trustworthy general-purpose mechanized logic. We say a
connection to a language implementation is foundational
if the synthesizer or veriﬁer is connected (with proofs in
a trustworthy general-purpose mechanized logic) to the
operational semantics compiled by a veriﬁed compiler.
Crypto veriﬁcation. Smith and Dill [40] verify sev-
eral block-cipher implementations written in Java with
respect to a functional spec written either in Java or in
ACL2. They compile to bytecode, then use a subset
model of the JVM to generate straight-line code. This
work is not end-to-end, as the JVM is unveriﬁed—and it
wouldn’t sufﬁce to simply plug in a “veriﬁed” JVM, if
one existed, without also knowing that the same speciﬁ-
cation of the JVM was used in both proofs. Their method
applies only where the number of input bits is ﬁxed and
the loops can be completely unrolled. Their veriﬁer
would likely be applicable to the SHA-256 block shuf-
ﬂe function, but certainly not to the management code
(padding, adding the length, key management, HMAC).
Cryptol [25] generates C or VHDL directly from a
functional speciﬁcation, where the number of input bits
is ﬁxed and the loops can be completely unrolled, i.e.