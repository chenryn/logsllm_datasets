            ExitProcess(0);
        }
        return ExceptionContinueSearch;
    }
    void main()
    {
        __asm
        {
            push offset Hhandler
            push dword ptr fs:[0]
            mov dword ptr fs:[0],esp
        }
        RaiseException(EXCEPTION_BREAKPOINT,0,1,0);
        __asm
        {
            pop dword ptr fs:[0]
            pop eax
        }
        MessageBox(0,"OllyDbg Detected","waliedassar",0);
    }
几年前，有一个著名的调试器叫做 SoftICE，它是一个系统调试器（它可以跟踪用户模式的应用程序和系统驱动程序）。现在它已经被 WinDbg
取代了，虽然已经坚持了很多年的开发和升级。系统调试器（或者说内核模式调试器）可以在应用程序使用系统驱动时调用。比如一个
Rootkit，它主要的目的就是把负载埋进操作系统中（通常以用户模式开始），以此来隐蔽恶意软件的进程、对文件系统结构的破坏、隐藏网络通信。
**迭代更新**
你可以使用非常多的方法来检测恶意软件，无论是校验和、文件片段、特征字符串、函数调用顺序、使用非常用函数、行为分析、高级签名等。这些特性会引导反病毒软件将其分为恶意还是正常。
这样是建立在假设恶意软件每次都表现出相同的特征的基础上的，修改这些特征中的某一部分就可以逃避检测，在不修改恶意软件源代码的情况下，怎么可以达到这种效果呢？
更换编译器
对编译选项的更改（比如打开或者关闭优化或者更改默认调用约定）会立即更改输出文件的结构
频繁更新和编译选项的更改相结合，将会导致在二进制级别上完全不同的生成文件，但他们可以表现出相同的功能
**函数替换**
俗话说：“条条大路通罗马”。在编写恶意软件时，有很多方法可以达到相同的效果。例如，为了获取对文件的访问，可以有很多 Windows
系统函数和附加库函数使用。
还有其他几十个库也提供类似的功能，可以用作替代品。
**清单9-几种读文件的方式**
    #include 
    #include 
    // mode used to open a file
    #define FILE_MODE 3
    int main()
    {
        #if FILE_MODE == 1
        HANDLE hFile = CreateFileA("notepad.exe", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
        #elif FILE_MODE == 2
        HANDLE hFile = CreateFileW(L"notepad.exe", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
        #elif FILE_MODE == 3
        FILE *hFile = fopen("notepad.exe", "rb+");
        #else
        //...
        #endif
        // close file handle
        #if FILE_MODE < 3
        CloseHandle(hFile);
        #else
        fclose(hFile);
        #endif
        return 0;
    }
在特定函数被使用的时候，也许会被标记为“危险”，但是这种方式仍然创造了全新的代码结构，可以帮助恶意软件逃避检测。
**脚本代替程序**
某些任务可以由脚本语言，像 VBScript 或者 JScript，来执行，避开调用系统函数。恶意软件有时候也会包含脚本语言的解释器，比如 Flame 中的
Lua、[IronPython](http://ironpython.net/) 中的 Python、甚至是
PHP。一旦源代码被隔离，分析脚本总好过分析编译好的程序，但是恶意软件作者可选择的大量不同的语言为病毒分析师和反病毒公司造成了巨大困扰。
**模块化设计**
恶意软件并不总是立即安装在感染主机上，通常来说感染模块的规模相当小，感染后会连接到控制服务器来下载附加模块。此设计还帮助恶意软件作者可以轻松地添加新功能或修复
Bug。对于分析师来说，当恶意软件都在一个程序中时，事情反而变得容易了。当恶意软件分裂成不同的模块时，分析会变慢，特别是用不用的语言编写的不同模块，并且每个模块都是用不同的措施来进行保护。
**  
**
**小众语言**
恶意软件往往会使用流行的语言来编写，在我看来这是因为：一、这种软件可以在许多版本的 Windows
上不需要其他系统组件就运行；二、有大量的教程和与其语言相关的源码实例，即使是新手也可以很容易的创建恶意程序。
某些恶意软件作者更加高明，意识到使用流行的语言将会使他们开发的程序易于分析，这些语言都有现成的工具可以使用。病毒分析师每天都要处理这些流行的语言，他们配备并熟练使用相关工具，把这些程序分解成基本模块易如反掌。  
另一方面，用小众语言编写的程序例如函数式语言或者面向业务型语言，对分析师来说是个巨大的挑战。比如：
Haskell
Lisp
VisualFox Pro
Fortran
COBOL
非标准的 Visual Basic 编译器(像
[DarkBasic](http://www.thegamecreators.com/?m=view_product&id=2030)、[PureBasic](http://www.purebasic.com/))
这样的程序通常有着相当复杂的结构，在许多情况下，他们的整个代码以一种字节码的形式存在，或者是需要分析许多额外的库、都不用提有多耗时。也有一些为这些小众的语言编写的反编译工具，比如
VisualFox Pro 应用程序反编译可以使用 ReFox，但是这样的工具在这个领域内是极其罕见的，因为需求太少了。  
著名的 Stuxnet 病毒是利用 C 语言和一个不起眼的面向对象框架写成的，分析师花了很长时间才搞清楚，它是用什么写成的，为什么有如此不寻常的结构。
在这篇文章的末尾，你可以找到一个 Crackme，是用 Haskell
语言写成的，尽管这只是一个简单用来检查许可证密钥有效性的算法，但是分析起来仍然特别困难。
**自动化软件**
市场上有一些软件包允许使用者只需要少量的技术能力就可以创建一个能够完全访问系统文件、从网络上加载组件、访问 Windows 注册表的程序。例如：
[AutoIt](https://www.autoitscript.com/site/autoit/)
Winbatch
[Macro Express](http://www.macros.com/)
使用这些工具创建的应用程序不太可能被检测到，因为他们的代码通常采用中间语言的形式，而且需要特定的反编译器来分析它的行为。
**源码修改**
源码修改是创建输出文件最高级的方法之一，那么怎样修改源码才能产生不同的输出文件呢？
使得源码突变，比如通过使用模版
在源文件中重新排序函数
改变各个功能的优化选项
将伪参数引入函数并伪造他们的用法（编译器可以优化删除未使用的参数）
在代码行之间引入垃圾（比如执行不必要的任务的垃圾指令、彼此跳转的指令、函数参数的不必要检验、对本地变量不必要的引用）
非线性执行代码（比如 switch）
结构定义的改变，即数据结构成员的随机排列或引入虚拟字段
所有这些更改都能在出书文件中引发重大变化。
**清单10-在 Delphi 代码中增加垃圾指令**
    procedure TForm1.FormCreate(Sender: TObject);
    begin
        // junk instructions (these instructions
        // do not have any impact on the behaviour
        // of the application)
        asm
            db 0EBh,02h,0Fh,078h
            db 0EBh,02h,0CDh,20h
            db 0EBh,02h,0Bh,059h
            db 0EBh,02h,038h,045h
            db 0E8h,01h,00h,00h,00h,0BAh,8Dh,64h,24h,004h
            db 07Eh,03h,07Fh,01h,0EEh
            db 0E8h,01h,00h,00h,00h,03Ah,8Dh,64h,24h,004h
            db 0EBh,02h,03Eh,0B8h
        end;
        // This line will be unreadable by
        // a disassembler, thanks to
        // the junk instructions
        Form1.Caption := 'Hello world';
        asm
            db 070h,03h,071h,01h,0Ch
            db 0EBh,02h,0Fh,037h
            db 072h,03h,073h,01h,080h
            db 0EBh,02h,0CDh,20h
            db 0EBh,02h,0Fh,0BBh
            db 078h,03h,079h,01h,0B7h
            db 0EBh,02h,094h,05Ch
            db 0C1h,0F0h,00h
        end;
    end;
我见过修改源码最先进的工具是由 Syncrosoft 开发的 MCFACT 系统，用于保护知名音响制造公司 Steinberg 的 Cubase
套件。该系统会首先分析源码，然后将其转换为受保护的形式。
**清单11-经过 MCFACT 系统后的 C++ 代码**
    //MCFACT_PROTECTED
    unsigned int findInverse(unsigned int n)
    {
        unsigned int test = 1;
        unsigned int result = 0;
        unsigned int mask = 1;
        while (test != 0)
        {
            if (mask & test)
            {
                result |= mask;