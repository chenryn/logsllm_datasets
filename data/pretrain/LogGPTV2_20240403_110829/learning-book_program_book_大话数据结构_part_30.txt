右侧三棵树的森林，前序遍历序列的结果就是ABCDEFGHI。
2.后序遍历：是先访问森林中第一棵树，后根遍历的方式遍历每棵子树，然后再
访问根结点，再依次同样方式遍历除去第一棵树的剩余树构成的森林。比如图
199
---
## Page 224
大话数据结构
6-11-5右侧三棵树的森林，后序遍历序列的结果就是BCDAFEJHIG。
可如果我们对图6-11-4的左侧二叉树进行分析就会发现，森林的前序遍历和二叉
树的前序遍历结果相同，森林的后序遍历和二叉树的中序遍历结果相同。
这也就告诉我们，当以二叉链表作树的存储结构时，树的先根遍历和后根遍历完
全可以借用二叉树的前序遍历和中序遍历的算法来实现。这其实也就证实，我们找到
了对树和森林这种复杂问题的简单解决办法。
6.12赫夫曼树及其应用
6.12.1赫夫曼树
“喂，兄弟，最近无聊透顶了，有没有什么书可看？”
“我这有《三国演义》的电子书，你要不要？
““既生瑜，何生亮。《三国演义》好呀，你邮件发给我！”
“0K！文件1M多大小，好像大了点。我打个包，稍等哈哈，少了一半，压缩
效果不错呀。
“太棒了，快点传给我吧。”
三国演义.bxt
文本文档
1,208 KB
三国演义.zip
WinRARZIP压缩文件
682 KB
图6-12-1
这是我们生活中常见的对白。现在我们都是讲究效率的社会，什么都要求速度，
在不能出错的情况下，微任何事情都讲究越快越好。在计算机和互联网技术中，文本
压缩就是一个非常重要的技术。玩电脑的人几乎都会应用压缩和解压缩软件来处理文
档。因为它除了可以减少文档在磁盘上的空间外，还有重要的一点，就是我们可以在
网络上以压缩的形式传输大量数据，使得保存和传递都更加高效。
那么压缩而不出错是如何做到的呢？简单说，就是把我们要压缩的文本进行重新
编码，以减少不必要的空间。尽管现在最新技术在编码上已经很好很强大，但这一切
都来自于曾经的技术积累，我们今天就来介绍一下最基本的压缩编码方法一—赫夫曼
编码。
200
---
## Page 225
第6章树
在介绍赫夫曼编码前，我们必须得介绍赫夫曼树，而介绍赫夫曼树，我们不得不
提这样一个人，美国数学家赫夫曼（DavidHuffman），也有的翻译为哈夫曼。他在
1952年发明了赫夫曼编码，为了纪念他的成就，于是就把他在编码中用到的特殊的二
叉树称之为赫夫曼树，他的编码方法称为赫夫曼编码。也就是说，我们现在介绍的知
识全都来自于近60年前这位伟大科学家的研究成果，而我们平时所用的压缩和解压
缩技术也都是基于赫夫曼的研究之上发展而来，我们应该要记住他。
什么叫做赫夫曼树呢？我们先来看一个例子。
过去我们小学、中学一般考试都是用百分制来表示学科成绩的。这带来了一个弊
端，就是很容易让学生、家长，甚至老师自己都以分取人，让分数代表了一切。有时
想想也对，90分和95分也许就只是一道题目对错的差距，但却让两个孩子可能受到
完全不同的待遇，这并不公平。于是在如今提倡素质教育的背景下，我们很多的学
科，特别是小学的学科成绩都改作了优秀、良好、中等、及格和不及格这样模糊的词
语，不再通报具体的分数。
不过对于老师来讲，他在对试卷评分的时候，显然不能凭感觉给优良或及格不及
格等成绩，因此一般都还是按照百分制算出每个学生的成绩后，再根据统一的标准换
算得出五级分制的成绩。比如下面的代码就实现了这样的转换。
if（a=70，两次比较才能得到y或n的结果），所
以总体性能上，反面不如图6-12-3的二叉树性能高。当然这并不是我们要讨论的重点
了。
通过刚才的步骤，我们可以得出构造赫夫曼树的赫夫曼算法描述。
1.根据给定的n个权值{WW2Wn}构成n棵二叉树的集合F={TT2,T=}，
其中每棵二叉树T中只有一个带权为W根结点，其左右子树均为空。
2.在F中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且
置新的二叉树的根结点的权值为其左右子树上根结点的权值之和。
3.在F中删除这两棵树，同时将薪得到的二叉树加入F中。
4.重复2和3步骤，直到F只含一棵树为止。这棵树便是赫夫曼树。
6.12.3赫夫曼编码
当然，赫夫曼研究这种最优树的目的不是为了我们可以转化一下成绩。他的更大
目的是为了解决当年远距离通信（主要是电报）的数据传输的最优化问题。
的数字（0和1）来表示是很自然的想法。我们现在这段文字只有六个字母ABCDEF，
205
---
## Page 230
大语数据结构
那么我们可以用相应的二进制数据表示，如表6-12-2所示。
表6-12-2
字母
ALBLC
D
二进制字符000001010011100101
E
TF
方接收时可以按照3位一分来译码。如果一篇文章很长，这样的二进制串也将非常的
可怕。而且事实上，不管是英文、中文或是其他语言，字母或汉字的出现频率是不相
同的，比如英语中的几个元音字母“aeiou”，中文中的“的了有在”等汉字都是频
率极高。
假设六个字母的频率为A27，B8，C15，D15，E30，F5，合起来正好是
100%。那就意味着，我们完全可以重新按照赫夫曼树来规划它们。
图6-12-9左图为构造赫夫曼树的过程的权值显示。右图为将权值左分支改为0，
右分支改为1后的赫夫曼树。
B
图6-12-9
此时，我们对这六个字母用其从树根到叶子所经过路径的0或1来编码，可以得
到如表6-12-3所示这样的定义。
表6-12-3
字母
ABC
D
EF
二进制字符01100110100111000
■原编码二进制串：001000011010000011101100100011（共30个字符）
■新编码二进制串：100101001010100100011100
（共25个字符）
也就是说，我们的数据被压缩了，节约了大约17%的存储或传输成本。随着字符
206
---
## Page 231
第6章树
的增加和多字符权重的不同，这种压缩会更加显出其优势。
当我们接收到1001010010101001000111100这样压缩过的新编码时，我们应该
如何把它解码出来呢？
编码中非0即1，长短不等的话其实是很容易混淆的，所以若要设计长短不等的
编码，则必须是任一字符的编码都不是另一个字符的编码的前缀，这种编码称做前缓