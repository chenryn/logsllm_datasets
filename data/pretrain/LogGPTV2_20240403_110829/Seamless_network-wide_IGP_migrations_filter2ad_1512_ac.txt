if all the next-hops of the node in the initial and in the ﬁnal
conﬁgurations are already in Sd (lines 27-28). After this
step, the Routing Trees Heuristic builds the directed acyclic
1 containing only the actual paths followed by
graph Gd
packets to reach d in the ﬁnal conﬁguration (line 6). Then, it
generates a constraint for each pair of routers (u, v) such that
(u . . . v . . . d) ∈ πf inal(u, d), and both u and v do not belong
1Gd is an acyclic since the ﬁnal conﬁguration is loop-free
319d
nhinit
nhf inal
nhinit
nhf inal
u
nhinit
z
v
nhf inal
Figure 8: In some migration scenarios, the Routing
Trees Heuristic generates unnecessary constraints.
to Sd and change at least one next-hop between the initial
and the ﬁnal conﬁguration (lines 7-15). In particular, among
the routers that change one or more next-hops during the
migration (set ¯Vd at line 5), each router is forced to migrate
after all its successors in the actual path towards d (line 11).
In the ﬁnal step, the heuristic tries to compute an ordering
compliant with the union of the constraints generated for all
the destinations (lines 17-18).
It is easy to check that the algorithm is polynomial with
respect to the size of the input. We now prove that the
algorithm is correct. First, we show that the routers in Sd
can be migrated in any order without creating loops towards
d, hence it is possible not to consider them in the genera-
tion of the ordering constraints. Then, we prove that the
constraints are suﬃcient to guarantee that the ordering is
loop-free.
Lemma 2.
If the greedy procedure adds a router u to Sd,
then u cannot be part of any migration loop towards desti-
nation d ∈ D.
Proof. Suppose, by contradiction, that there exists a
router u added to Sd by the greedy procedure at a given it-
eration i, such that (u v0 . . . vk u) ∈ π(u, d, t), with k ≥ 0,
at a given time t and for a given migration ordering. By
deﬁnition of the algorithm, one router is added to Sd if and
only if all its next-hops w0, . . . , wn (in both the initial and
ﬁnal IGP conﬁgurations) are already in Sd, since each node
in {w0, . . . , wn} is added to Sd at a given iteration before i.
Hence, vk 6∈ Sd at iteration i, because u is one of the next-
hops of vk and it is added to Sd at iteration i by hypothesis.
Iterating the same argument, all routers vh 6∈ Sd at iteration
i, ∀h = 0, . . . , k. As a consequence, Greedy does not add
u to Sd at iteration i, which is a contradiction.
Theorem 2. Let S = x1, . . . , xn be the sequence com-
puted by the Routing Tree Heuristic. If the routers are mi-
grated according to S, then no migration loop arises.
Proof. Suppose by contradiction that migration is per-
formed according to S but migrating a router u creates a
loop for at least one destination d.
In that case, there
exists a set of routers ˜V = {v1, . . . , vk}, such that C =
(u v0 . . . vk u) ∈ π(u, d, t), at a certain time t. By Lemma 2,
all vi 6∈ Sd. By deﬁnition of the heuristic, all routers vi are
such that nh(vi, d, t) = nhf inal(vi, d), with i = 0, . . . , k, be-
cause either they do not change their next-hop between the
initial and the ﬁnal conﬁguration or they precede u in S.
Hence, at time t, both u and all the routers vi ∈ ˜V are
in the ﬁnal conﬁguration. This is a contradiction, since we
assumed that the ﬁnal IGP conﬁguration is loop-free.
Note that the heuristic is not complete; while the con-
straints it generates are suﬃcient to guarantee no forwarding
loops, they are not necessary. Indeed, for each destination
d, it imposes speciﬁc orderings between all the routers (not
belonging to Sd) that change one of their next-hops towards
d, even if it is not needed. For instance, in the scenario of
Fig. 8, the heuristic mandates v to be migrated before u and
u before z. However, no loop arises also if v is migrated be-
fore z and z before u. Generating unnecessary constraints
prevents the heuristic from identifying a loop-free migration
ordering every time it exists. Nonetheless, if state of the art
best practices for PoP design are followed [27], such cases
are rare. In Section 7, we show that the heuristic found an
ordering in most of our experiments on realistic topologies.
5.2 Dealing with Congestion and Failures
Even if there is no congestion in both the initial and the ﬁ-
nal IGP conﬁgurations, congestion could transiently appear
during the migration because of forwarding paths in tem-
porary states in which only some routers are migrated. To
deal with congestion, we can add constraints (e.g., routers u
and v must not be migrated both before z) that the al-
gorithms must take into account in looking for a proper
router migration ordering. Assuming that the traﬃc ma-
trix does not consistently change during the migration, such
constraints can be statically computed, given the traﬃc ma-
trix, the capacity of the links, and the nh function. Note
that the assumption on the stability of the traﬃc matrix is
reasonable since traﬃc shifts are rare for the most popular
destinations [17] and our approach requires a short time to
complete the migration process (see Section 7).
On the other hand, link or node failures modify the topol-
ogy, hence they may modify the nh function and the loop-
free migration ordering to be followed. Thanks to the high
time eﬃciency of our heuristic (see Section 7), we can pre-
compute loop-free router orderings and the corresponding
ordering constraints that are needed for seamless migrations
in the most important failure scenarios (e.g., all possible
single link failures). When a failure happens, we can use
such constraints to minimize the duration of the loops gen-
erated by the failure, and to dynamically adapt the order in
which migration steps are performed. Because of the high
eﬃciency of the heuristic on small and medium-sized topolo-
gies, we can even directly recompute the ordering just after
the failure, taking into account the fact that some routers
could have already been migrated.
6. THE PROVISIONING SYSTEM
We implemented a software system which is able to com-
pute and automate all the required steps for a seamless mi-
gration. The main architectural components of our system
are represented in Fig. 9. In the following, we describe how
data ﬂow through the system (dashed lines in the ﬁgure),
by stressing the role of each component.
In order to assess the properties of the initial and the ﬁnal
IGPs, we rely on a monitoring system which collects the IGP
Link-State Advertisements (LSAs) circulating in the net-
work. The IGP LSA Listener component parses the LSAs,
continuously ﬁlling a database (DB) with data on the IGP
adjacencies, on the weight of the links, and on the announced
IP preﬁxes. We implemented the IGP LSA Listener by using
packet-cloning features available on routers [28]. The IGP
State Asserter component is responsible for querying the DB
and assessing properties of the monitored IGPs state. The
current implementation of the IGP State Asserter is able to
320y
c
n
e
u
q
e
r
f
d
e
t
l
a
u
m
u
c
0
1
.
8
0
.
6
0
.
4
.
0
2
.
0
0
.
0
flat2hier
introducing summarization
adding 1 link to the backbone
adding 2 links to the backbone
adding 4 links to the backbone
0
20
40
60
80
# of possible loops
Figure 10: CDF of the number of loops that can
arise on Rocketfuel topologies.
uses a ﬂat IGP conﬁguration. The other two ISPs are one
order of magnitude smaller but use a hierarchical IGP.
On this data set, we performed several experiments. We
considered the introduction of summarization, as well as
ﬂat2hier and hier2hier scenarios. Since most of the topolo-
gies in our data set are ﬂat, we artiﬁcially built a hierarchy
(i.e., the separation in zones) in order to consider scenarios in
which hierarchical conﬁgurations are needed. In particular,
we grouped routers according to geographical information
present in the name of the routers. Doing so, we built two
hierarchical topologies out of each ﬂat topology. In the ﬁrst
one, zones are deﬁned per city.
In the second one, zones
are deﬁned per-continent. In both topologies, we built the
backbone by considering routers connected to more than one
zone as ZBRs and routers connected only to ZBRs as pure
backbone routers. To simulate a hier2hier scenario, we arti-
ﬁcially enlarged the backbone by adding to it a ﬁxed number
(from 1 up to 32) of links. Such links were randomly cho-
sen among the links between a ZBR and a router that does
not participate in the backbone. For the summarization
scenario, we aggregated all the destinations inside the same
zone into a single preﬁx. This was done for all the zones
but the backbone. Our hierarchy construction methodology
and the way preﬁxes are summarized follow the guidelines
proposed in [31]. All the tests were run on a Sun Fire X2250
(quad-core 3GHz CPUs with 32GB of RAM). We omit the
results of some experiments due to space limitations.
7.2 Ordering Algorithms
We ﬁrst evaluate usefulness and eﬃciency of the Loop
Enumeration Algorithm and of the Routing Tree Heuris-
tic. Fig. 10 shows the cumulative distribution function of
the number of loops that can arise in Rocketfuel topologies.
Diﬀerent migration scenarios are considered. Each point in
the plot corresponds to a speciﬁc topology and a speciﬁc sce-
nario. In ﬂat2hier, up to 80 diﬀerent loops can arise in the
worst case and at least 30 loops can arise for 4 topologies
out of 11. Other scenarios follow similar trends. Observe
that, in the hier2hier scenario (curves “adding x links to
the backbone”), the number of possible loops signiﬁcantly
increases with the number of links which change zone. In all
the scenarios, almost all the loops involve two routers, with a
few exceptions of three routers loops. Also, the vast major-
Figure 9: System architecture.
check an IGP for convergence completion by evaluating the
stability over time of the IGP adjacencies and of the pre-
ﬁxes announced by each router. A custom time threshold
can be set to assess the stability of the IGP. Moreover, the
IGP State Asserter is able to verify the announcement of a
given set of preﬁxes in an IGP, and the equivalence of two
IGPs, i.e., the equivalence of the logical graph, and of the
forwarding paths towards a given set of destinations.
The IGP State Asserter is triggered at speciﬁc moments
in time by the Migration Controller, which is the central
component of the system, responsible for tasks’ coordina-
tion. Before the actual migration process starts, it delegates
the computation of a loop-free router migration ordering to
the Ordering Component. This component implements the
ordering algorithms described in Section 5.1. Then, the Mi-
gration Controller runs the IGP LSA Listener. When needed
(see Section 4), the Migration Controller asks the IGP State
Asserter to assess whether it is possible to safely modify the
conﬁguration of the devices in the network without incurring
transient states. This boils down to checking the stability of
the current IGP. At each step of the migration process the
controller also requires the Conﬁguration Manager to prop-
erly update the conﬁguration on the routers as described
in Section 4. Based on a network-wide model, the Conﬁg-
uration Manager generates the necessary commands to be
sent to routers for each migration step. The Conﬁguration
Manager is based on an extended version of NCGuard [29].
7. EVALUATION
In this section, we evaluate the ordering algorithms and
the provisioning system. The system is evaluated on the
basis of a case study in which a network is migrated from a
ﬂat to a hierarchical IGP.
7.1 Data Set and Methodology
Our data set contains both publicly available and conﬁ-
dential data relative to commercial ISP topologies. Con-
cerning publicly available topologies, we used the inferred
topologies provided by the Rocketfuel project [30]. Rocket-
fuel topologies represent ISPs of diﬀerent sizes, the smallest
one having 79 nodes and 294 edges while the biggest one
contains 315 nodes and 1944 edges. In addition, some net-
work operators provided us with real-world IGP topologies.
In this section, we discuss the result of our analyses on all
the Rocketfuel data and on the anonymized topologies of
three ISPs, namely tier1.A, tier1.B and tier2.
tier1.A is
the largest Tier1, and its IGP logical graph has more than
1000 nodes and more than 4000 edges.
tier1.A currently
321s
t
i
n
a
r
t
s
n
o
c
g
n
i
r
e
d
r
o
n
i
d
e
v
o
v
n
l
i
s
r
e
t
u
o
r
f
o
%
40
30
20
10
0
loop enumeration algorithm
routing trees heuristic
routing trees without greedy_run
loop enumeration algorithm
routing trees heuristic
routing trees without greedy_run
100
s
d
n
o
c
e
s
n
i
e
m
T
i
10
1
0.1
y
t
i
c
,
1
2