sacrificing the capability to emit high-quality code.
The remainder of this section is structured as follows. Section 4.1
provides an overview the high-level design goals. Section 4.2 intro-
duces the CFG properties that are later enforced by the Preprocess-
ing and Combing stages. Section 4.3 provides a general overview
before digging into the details of the three stages: Preprocessing
(Section 4.4), Combing (Section 4.5), and Matching (Section 4.6).
4.1 Design Goals
The fundamental goal of the algorithm presented here is to increase
the quality of the produced decompiled code. As mentioned in Sec-
tion 1, this means reducing the informative load on the shoulders
of analysts. To achieve this, the algorithm is designed with some
fundamental goals.
Generality. It must be able to work on any CFG, independently
of its complexity. This is important since, in decompilation, input
CFGs might be originate from hand-written or compiler-optimized
machine code. To build a decompiler that consistently generates
high-quality output very few assumptions can be made on the
input CFGs.
Structured. It needs to transform any CFG so that it can be ex-
pressed in terms of C constructs, excluding gotos. gotos, and
unstructured programming in general, can considerably increase
the complexity of the control flow[10].
Expressive. Starting from such structured CFGs, it must be able
to emit a wide range of idiomatic C constructs, such as while and
do-while loops, switch statements, and if statements with or
without else and short-circuited conditions.
4.2 CFG Properties
The Preprocessing and the Combing stages of the algorithm enforce
some properties on the input CFGs. Such properties are inspired to
fundamental characteristics of structured C programs and designed
to mimic them. The fundamental idea of the algorithm is to enforce
each of these properties one at a time. Once a property has been
enforced it becomes an invariant, so that it is preserved from all
the subsequent steps. In this way, the final result of applying the
transformations on the original CFG will feature all the properties.
Being these properties tailored to describe structured C programs,
the resulting CFG at the end of the algorithm is straightforward to
translate in C without gotos.
In the following we list the properties we aim to enforce.
Two Successors. The first important property of structured C pro-
grams is that each basic block has at most two successors. The
only case that does not respect this condition is the switch state-
ment, but every switch can always be transformed in a sequence
of if-else statements and vice versa. The Preprocessing phase will
always enforce this property on CFGs, deferring to the Matching
stage the decision of whether to emit ifs or switches.
Two Predecessors. This property holds whenever a basic block in
CFG has at most two predecessors.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan6391
3
2
4
Figure 1: A CFG without Diamond Shape property. Node 3 is
reachable from 2 but does not dominate it. To emit this code in C,
a goto statement would be required (either ⟨1,3⟩ or ⟨2,3⟩).
Loop Properties. In a well-structured C program each loop has
the following three characteristics.
Single Entry. In C, the only way to enter a loop, without passing
from the entry node, is using the goto statement.
Single Successor. In C, the only way to abandon a loop without
gotos is using the break statement, and all the break statements
in a loop jump to the same point in the program: the single suc-
cessor of the loop. The case of a natural exit from the loop is just
an implicit break
Single Retreating Target. In C, all the retreating edges in a struc-
tured loop jump to the same target since, given that we have no
gotos, they must be continue statements. Just like breaks, all
continues in a loop jump to the same point: the single retreating
target, which is also the entry node.
The fact that break and continue statements always target a single
node is only true under two assumptions. The first is that there are
no switch statements. The second assumption is that there are no
nested loops since, e.g., break statements of a nested loop do not
jump at the same target as breaks of its parent loop. These two
assumptions might sound strong, but the Preprocessing phase is
designed to ensure that these properties are enforced in strict order,
so that when the Loop Properties are enforced all their prerequisite
are guaranteed to hold. All the loop properties described above will
be enforced on the input CFG from the Preprocessing stage.
Diamond Shape Property. The Diamond Shape property holds
for a DAG whenever each node with two successors dominates all
the nodes between itself and its immediate post-dominator. This
property is enforced by the Combing stage, on the DAGs generated
by the Preprocessing stage.
This mimics the fact that in well structured C programs all the
scopes are either nested or non-overlapping. In other words, enforc-
ing this property means forcing a DAG in the form of a diamond
where each node with more than a single successor induces a region
of nodes with a single entry and a single exit.
To grasp the implications of this property, it might be useful to
think about a scenario where this property does not hold. An ex-
ample is portrayed in Figure 1. In this setting, it exists a conditional
node, node 2 in Figure 1, and another node, node 3, reachable from
the conditional node, which is not dominated by the conditional
node. There exist another node, node 1, from which it is possible
to reach node 3 without passing from node 2. But node 2 is a con-
ditional node (an if statement in C), and since node 3 is reachable
from node 2, if the program is well-structured node 3 should be
either in the then or in the else, or after the if-else altogether.
At the same time, there is a path from node 1 to node 3 that does not
pass from node 2. The main problem with this scenario, is that such
a graph cannot be emitted in well-structured C programs without
using gotos. Hence the Combing stage enforces this property.
4.3 Overview of the Algorithm
As previously anticipated, the Control Flow Combing algorithm is
designed in three incremental stages: Preprocessing, Combing, and
Matching.
Preprocessing. The goal of this stage is to massage the input CFG
in a shape that can be digested by the Combing. To do this, the
Preprocessing incrementally enforces all the properties described
in Section 4.2, except for the Diamond Shape property. It does so
by working on a tree-like hierarchy of nested Regions of the CFG,
called Region Tree. At the end of Preprocessing all the Regions in the
tree are transformed into DAGs.
Combing. This stage works on the Region Tree generated by Pre-
processing, which is now constituted only by DAGs. The Combing
enforces the Diamond Shape property on all the DAGs in the tree.
After this transformation the tree is ready to be transformed into
an C Abstract Syntax Tree.
Matching. This stage uses the combed Region Tree to generate a C
AST representation. The AST is subsequently manipulated with a
set of rules to match idiomatic C constructs. The rules presented in
this paper cover short-circuited ifs, switch statements, and loops
in the form do {...} while(...) and while(...) {...}, but others
can be added. After matching idiomatic C constructs, the final C
code is emitted in textual form.
4.4 Preprocessing
This section describes the Preprocessing stage in detail.
The first part of the Preprocessing, described in Section 4.4.1, is
designed to divide the CFG on a hierarchy of nested Regions, each
roughly representing a loop. The goal is to superimpose on the CFG
a Region Tree, that represents the hierarchy of loops in the CFG
itself. Each Region in the tree is then handled independently of the
others by the next steps of Preprocessing and Combing, reducing
the complexity of algorithm.
The second part of the Preprocessing, described in Section 4.4.2,
works on the Region Tree, transforming each Region into a DAG, so
that it can subsequently be handled by the Combing stage.
4.4.1 Building the Region Tree. This process is composed by three
steps. The first adds a sink node as a successor of all the exit nodes,
which is necessary to compute post-dominance. The second starts
to enforce some of the properties discusses in Section 4.2. The third
identifies nested Regions and builds the Region Tree.
Adding the sink Node. In general, CFGs obtained from binary
programs do not have a single exit, which is a requirement to com-
pute the post-dominator tree, which in turn is a requirement to
reason about the Diamond Shape property that is enforced later.
Hence, every CFG needs to be brought into a shape with a single
exit. This is done by adding an artificial sink node, and attaching
an artificial edge from each original exit basic block to the sink.
This makes the sink the single exit node, allowing to compute the
post-dominator tree.
This operation does not alter the semantic of the program, and
is preserved by all the following steps.
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan6401
2
3
4
Figure 2: Merging partially-overlapping SCS. There are two SCS
(⟨1,2,3⟩ and ⟨2,3,4⟩) induced by the retreating edges 3 → 1 and 4 → 2
(dashed). They overlap but they have no inclusion relationship,
therefore they are merged into a new SCS ⟨1,2,3,4⟩.
Enforcing Two Predecessors and Two Successors. First, the
Two Successors property is enforced by transforming all the switch
statements into cascaded conditional branches, with two targets
each. Similarly, the Two Predecessors property is enforced by taking
each basic block with more than one predecessor and transforming
it into a tree of empty basic blocks (dummies) that only jump to
their single successor.
These operations do not alter in any way the semantic of the
program. Moreover, the Two Predecessors and Two Successors are
preserved in all the following steps.
Identifying Nested Regions. The core idea of this step is to merge
sets of the partially overlapping loops in the CFG into an individual
Region that we can then reason about as a single loop.
To define these Regions, the algorithm starts from all the Strongly
Connected Subgraphs (SCS), i.e., subgraphs of the original CFG
whose nodes are all reachable from each other. There might be
several overlapping and non-overlapping SCS in a graph. Note that
a SCS is a difference concept from a Strongly Connected Component
(SCC), typically used in loop analysis. In fact, SCCs are always non-
overlapping by definition, and their union represent the entire CFG.
In particular, we are interested in SCSs induced by retreating edges.
Given a retreating edge 𝑒 =⟨𝑠,𝑡⟩ the SCS induced by 𝑒 is constituted
by all the nodes that are on at least one path starting from 𝑡 and
ending in 𝑠 that does not crosses 𝑡 nor 𝑠.
First, the algorithm identifies all the SCS induced by all the
retreating edges in the CFG, simply applying the definition above.
Note that at this stage the resulting SCSs can still overlap, whereas
to build a hierarchy between SCS it is necessary for the set of SCSs to
form a partially ordered set with the strict subset relation (⊂). Hence,
for each pair of SCS 𝐴 and 𝐵, if 𝐴∩𝐵 ≠∅, 𝐴 ⊄𝐵, and 𝐵 ⊄𝐴, then 𝐴∪𝐵
is added to the set of SCS, removing 𝐴 and 𝐵 from the set of SCSs.
When this happens, the algorithm restarts from the beginning, until
a fixed point is reached. Notice that the union of two SCS is always
an SCS, hence the process can proceed. An example of partially
overlapping SCS that trigger this condition is shown in Figure 2.
This process converges since the ∪ operator is monotonic and
the CFG has a finite number of nodes. At the end only a set of SCS
that is partially ordered with the ⊂ relationship is left. Each of this
remaining SCS is a Region roughly representing a loop, or a set of
loops tightly entangled together. Considering the whole CFG as a
Region itself, the ⊂ relationship naturally induces a tree on all the
regions. The whole CFG is the root of the tree, and moving towards
leaves we encounter more and more deeply nested loops. This tree
structure is called the Region Tree.
Notice that the grouping of nodes in Regions does not alter the
CFG, hence it does not alter the program semantic. The same holds
if a node is moved inside or outside of an existing Region. From this
0
1
2
Figure 3: Electing a Region’s head. The retreating edges are dashed.
Node 1 has one incoming retreating edge, while node 0 has 2. For
this reason, node 0 is elected head of the Region.
point, all the steps of the algorithm only work on Regions and the
Region Tree.
4.4.2 Turning Regions into DAGs. The goal of this phase is to turn
each Region into a DAG that can be then be reasoned about in
simpler terms. This process is composed of various incremental
steps. The combination of all these steps enforces on the Regions
all the remaining properties introduced in Section 4.2 except for
the Diamond Shape property, i.e., the Two Successors property, and
the Loop Properties. Where noted, some of steps are optional and
dedicated to gracefully handle common cases.
The following steps work on a single Region at a time, moving
from the leaves to the root of the Region Tree. At the beginning of
this process all Regions but the root are still SCS. At the end of this
process the Regions are transformed in DAGs, so that they can be
treated by the next phase, Combing.
Electing Regions’ Heads. The Loop Properties require every Re-
gion to have a Single Entry and a Single Retreating Target. However,
at this stage, each of them may contain multiple retreating edges,
possibly targeting different nodes. This step elects the entry node:
the node that is target of the highest number of retreating edges.
This node, the head node, represents the beginning of the loop body,
and will be the target of all the retreating edges in the loop.
Retreating Edges Normalization. After the election of the head,
all the retreating edges that do not point to it are considered abnor-
mal, since they do not respect the Single Retreating Target property
and, therefore, need to be handled.
Consider the graph in Figure 3: the head is node 0 and there is
a single abnormal edge from node 2 to 1. In C parlance, this edge is
not a continue, since it jumps to the middle of a loop. Informally,
to handle this situation, we can introduce a state variable in the pro-
gram so that the abnormal edge can be represented with a continue.
In practice, this edge will target a virtual head node that will check
the value of the state variable and dispatch execution at the correct
location (Node 1). To discriminate between retreating edges, the
state variable is set before every retreating edge and checked at the
beginning of the loop with a dedicated construct.
This is exactly what the normalization step does for abnormal
edges. For each Region, a state variable 𝑣 is created. Then, a distinct
identifier is assigned to each node with incoming abnormal edges,
as well as to the head elected at the previous step. Then, a new set
of nodes is created before the head, containing only conditional
jumps that check the state variable to dispatch the execution at the
correct target (either a target of an abnormal edge or the head). This
set of nodes is called the head dispatcher, and its first node is called
ℎ. Finally, each abnormal edge 𝑒 =⟨𝑠,𝑡⟩ is replaced with a new pair
of edges. The former edge of this pair is 𝑒ℎ =⟨𝑠,ℎ⟩. This edge points
to the entry point of the head dispatcher, and sets the state variable
to the value associated to 𝑡, say 𝑣𝑡. The latter edge is added from the
node in the head dispatcher that checks for the condition 𝑣 ==𝑣𝑡 to
Session 12: Software Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan641𝑣 :=1
𝑣 :=0
head dispatcher
𝑣 ==0
0
𝑣 :=0
𝑣 ==1
1
2
Figure 4: Normalizing retreating edges on the CFG from Figure 3. All