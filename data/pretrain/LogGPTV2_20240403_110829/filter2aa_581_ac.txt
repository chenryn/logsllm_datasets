fourth anniversary of Data.gov. First is a comprehensive listing of APIs that were released 
from across the federal government as part of the Digital Government Strategy. These 
APIs accelerated the development of new applications on everything from health, public 
safety, education, consumer protection, and many more topics of interest to Americans. 
This initiative also helped developers, where they can find all the government’s APIs in 
one place (http://api.data.gov), with links to API documentation and other resources.
 IBM Watson
APIs have become the key ingredients in building a successful enterprise. APIs open up 
the road to new business ecosystems. Opportunities that never existed before can be 
realized with a public API. In November 2013, for the first time, IBM Watson technology 
was made available as a development platform in the cloud, to enable a worldwide 
community of software developers to build a new generation of applications infused 
with Watson's cognitive computing intelligence.14 With the API, IBM also expected to 
create multiple ecosystems that will open up new market places. It connected Elsevier 
(world-leading provider of scientific, technical, and medical information products and 
services) and its expansive archive of studies on oncology care to both the medical 
expertise of Sloan Kettering (a cancer treatment and research institution founded 
in 1884) and Watson’s cognitive computing prowess. Through these links, IBM now 
provides physicians and nurse practitioners with information on symptoms, diagnosis, 
and treatment approaches.
14 IBM Watson’s Next Venture, www-03.ibm.com/press/us/en/pressrelease/42451.wss
Chapter 1  apIs rule!
10
 Open Banking
API adaptation has gone viral across verticals: retail, healthcare, financial, government, 
education, and in many more verticals. In the financial sector, the Open Bank15 project 
provides an open source API and app store for banks that empower financial institutions 
to securely and rapidly enhance their digital offerings using an ecosystem of third-party 
applications and services. As per Gartner,16 by 2016, 75% of the top 50 global banks have 
launched an API platform, and 25% have launched a customer-facing app store. The aim 
of Open Bank project is to provide a uniform interface, abstracting out all the differences 
in each banking API. That will help application developers to build applications on top 
of the Open Bank API, but still would work against any of the banks that are part of the 
Open Bank initiative. At the moment, only four German banks are onboarded, and it is 
expected to grow in the future.17 The business model behind the project is to charge an 
annual licensing fee from the banks which participate.
 Healthcare
The healthcare industry is also benefiting from the APIs. By November 2015, there were 
more than 200 medical APIs registered in ProgrammableWeb.18 One of the interesting 
projects among them, the Human API19 project, provides a platform that allows users 
to securely share their health data with developers of health applications and systems. 
This data network includes activity data recorded by pedometers, blood pressure 
measurements captured by digital cuffs, medical records from hospitals, and more. 
According to a report20 by GlobalData, the mobile health market was worth $1.2 billion 
in 2011, but expected to jump in value to reach $11.8 billion by 2018, climbing at an 
impressive compound annual growth rate (CAGR) of 39%. The research2guidance21 
15 Open Bank Project, www.openbankproject.com/
16 Gartner: Hype Cycle for Open Banking, www.gartner.com/doc/2556416/
hype-cycle-open-banking
17 Open Bank Project connector status, https://api.openbankproject.com/connectors-status/
18 Medical APIs, www.programmableweb.com/category/medical/apis?&category=19994
19 Human API, http://hub.humanapi.co/docs/overview
20 Healthcare Goes Mobile, http://healthcare.globaldata.com/media-center/
press-releases/medical-devices/mhealth-healthcare-goes-mobile
21 Research2guidance, http://research2guidance.com/the-market-for-mobile-health- 
sensors-will-grow-to-5-6-billion-by-2017/
Chapter 1  apIs rule!
11
estimated the market for mobile health sensors to grow to $5.6 billion by 2017. 
Aggregating all these estimated figures, it’s more than obvious that the demand for 
medical APIs is only to grow in the near future.
 Wearables
Wearable industry is another sector, which exists today due to the large proliferation 
of APIs. The ABI Research22 estimates that the world will have 780 million wearables 
by 2019—everything from fitness trackers and smart watches to smart glasses and 
even heart monitors, in circulation. Most of the wearables come with low processing 
power and storages and talk to the APIs hosted in the cloud for processing and storage. 
For example, Microsoft Band, a wrist-worn wearable, which keeps track of your heart 
rate, steps taken, calories burned, and sleep quality, comes with the Microsoft Health 
mobile application. The wearable itself keeps tracks of the steps, distances, calories 
burned, and heart rate in its limited storage for a short period. Once it’s connected to 
the mobile application, via Bluetooth, all the data are uploaded to the cloud through the 
application. The Microsoft Health Cloud API23 allows you to enhance the experiences 
of your apps and services with real-time user data. These RESTful APIs provide 
comprehensive user fitness and health data in an easy-to-consume JSON format. This 
will enhance the ecosystem around Microsoft Band, as more and more developers 
can now develop useful applications around Microsoft Health API, hence will increase 
Microsoft Band adaptation. This will also let third-party application developers to 
develop a more useful application by mashing up their own data streams with the data 
that come from Microsoft Health API. RunKeeper, MyFitnessPal, MyRoundPro, and 
many more fitness applications have partnered with Microsoft Band in that effort, for 
mutual benefits.
22 The Wearable Future Is Hackable, https://blogs.mcafee.com/consumer/
hacking-wearable-devices/
23 Microsoft Cloud Health API, https://developer.microsoftband.com/cloudAPI
Chapter 1  apIs rule!
12
 Business Models
Having a proper business model is the key to the success in API economy. The IBM 
Redbook, The Power of the API Economy,24 identifies four API business models, as 
explained here:
• 
Free model: This model focuses on the business adoption and the 
brand loyalty. Facebook, Twitter, and Google Maps APIs are few 
examples that fall under this model.
• 
Developer pays model: With this model, the API consumer or the 
developer has to pay for the usage. For example, PayPal charges a 
transaction fee, and Amazon lets developers pay only for what they 
use. This model is similar to the “Direct Revenue” model described 
by Wendy Bohner from Intel.25
• 
Developer is paid directly: This is sort of a revenue sharing model. The 
best example is the Google AdSense. It pays 20% to developers from 
revenue generated from the posted ads. Shopping.com is another 
example for revenue sharing business model. With Shopping.
com API developers can integrate relevant product content with 
the deepest product catalogue available online and add millions 
of unique products and merchant offers to your site. It pays by the 
clicks.
• 
Indirect: With this model, enterprises build a larger ecosystem 
around it, like Salesforce, Twitter, Facebook, and many more. For 
example, Twitter lets developers build applications on top of its 
APIs. This benefits Twitter, by displaying sponsored tweets on end 
user’s Twitter timeline, on those applications. The same applies to 
Salesforce. Salesforce encourages third-party developers to extend its 
platform by developing applications on top of its APIs.
24 The Power of the API Economy, www.redbooks.ibm.com/redpapers/pdfs/redp5096.pdf
25 Wendy Bohner’s blog on API Economy: https://blogs.intel.com/api-management/ 
2013/09/20/the-api-economy/
Chapter 1  apIs rule!
13
 The API Evolution
The concept behind APIs has its roots from the beginning of computing. An API of 
a component defines how others would interact with it. API stands for application 
programming interface, and it’s a technical specification for developers and architects. If 
you are familiar with the Unix or Linux operating system, the man command shouldn’t be 
something new. It generates the technical specification for each command in the system, 
which defines how a user can interact with it. The output from the man command can be 
considered as the API definition of the corresponding command. It defines everything 
you need to know to execute it, including the synopsis, description with all the valid 
input parameters, examples, and many more. The following command on a Unix/Linux 
or even on a Mac OS X environment will generate the technical definition of the ls 
command.
$ man ls
NAME
     ls -- list directory contents
SYNOPSIS
     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]
Going little further from there, if you are a computer science graduate or have read 
about operating systems, you surely have heard of system calls. System calls provide an 
interface to the operating system’s kernel, or a system call is how a program requests a 
service from the underlying operating system. Kernel is the core of the operating system, 
which wraps the hardware layer from the top-level applications (see Figure 1-4). If you 
want to print something from the browser, then the print command, which initiated from 
the browser, first has to pass through the kernel to reach the actual printer connected 
to the local machine itself, or remotely via the network. Where kernel executes its 
operations and provides services is known as the kernel space, while the top-level 
applications execute their operations and provide services in the user space. The kernel 
space is accessible for applications running in the user space only through system calls. 
In other words, system calls are the kernel API for the user space.
Chapter 1  apIs rule!
14
The Linux kernel has two types of APIs: one for the applications running in the user 
space and the other one is for its internal use. The API between the kernel space and user 
space can also be called the public API of the kernel, while the other as its private API.
Even at the top-level application, if you’ve worked with Java, .NET, or any other 
programming language, you’ve probably written code against an API. Java provides Java 
Database Connectivity (JDBC) as an API to talk to different heterogeneous database 
management systems (DBMSs), as shown in Figure 1-5. The JDBC API encapsulates the 
logic for how your application connects to a database; thus, the application logic doesn’t 
need to change whenever it connects to different databases. The database’s connectivity 
logic is wrapped in a JDBC driver and exposed as an API. To change the database, you 
need to pick the right JDBC driver.
Figure 1-4. Operating system’s kernel
Figure 1-5. JDBC API
An API itself is an interface. It’s the interface for clients that interact with the system 
or the particular component. Clients should only know about the interface and nothing 
about its implementation. A given interface can have more than one implementation, 
and a client written against the interface can switch between implementations 
Chapter 1  apIs rule!
15
seamlessly and painlessly. The client application and the API implementation can run 
in the same process or in different processes. If they’re running in the same process, 
then the call between the client and the API is a local one—if not, it’s a remote call. In 
the case of the JDBC API, it’s a local call. The Java client application directly invokes the 
JDBC API, implemented by a JDBC driver running in the same process. The following 
Java code snippet shows the usage of the JDBC API. This code has no dependency 
to the underneath database—it only talks to the JDBC API. In an ideal scenario, the 
program reads the name of the Oracle driver and the connection to the Oracle database 
from a configuration file, making the code completely clean from any database 
implementations.
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
public class JDBCSample {
public void updataEmpoyee() throws ClassNotFoundException, SQLException {
 Connection con = null;
 PreparedStatement prSt = null;
     try {
      Class.forName("oracle.jdbc.driver.OracleDriver");
       con = DriverManager.getConnection("jdbc:oracle:thin:@::", "user", "password");
      String query = "insert into emp(name,salary) values(?,?)";
      prSt = con.prepareStatement(query);
      prSt.setString(1, "John Doe");
      prSt.setInt(2, 1000);
      prSt.executeUpdate();
      } finally {
           try {
              if (prSt != null) prSt.close();
              if (con != null)  con.close();
            } catch (Exception ex) {
Chapter 1  apIs rule!
16
              // log
           }
       }
}
}
We can also access APIs remotely. To invoke an API remotely, you need to 
have a protocol defined for interprocess communication. Java RMI, CORBA, .NET 
Remoting, SOAP, and REST (over HTTP) are some protocols that facilitate interprocess 
communication. Java RMI provides the infrastructure-level support to invoke a Java 
API remotely from a nonlocal Java virtual machine (JVM, which runs in a different 
process than the one that runs the Java API). The RMI infrastructure at the client side 
serializes all the requests from the client into the wire (also known as marshalling) and 
deserializes into Java objects at the server side by its RMI infrastructure (also known as 
unmarshalling); see Figure 1-6. This marshalling/unmarshalling technique is specific to 
Java. It must be a Java client to invoke an API exposed over Java RMI—and it’s language 
dependent.
Figure 1-6. Java RMI
The following code snippet shows how a Java client talks to a remotely running Java 
service over RMI. The Hello stub in the following code represents the service. The rmic 
tool, which comes with Java SDK, generates the stub against the Java service interface. 
We write the RMI client against the API of the RMI service.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
public class RMIClient {
Chapter 1  apIs rule!
17
public static void main(String[] args) {
  String host = (args.length < 1) ? null : args[0];
  try {
     Registry registry = LocateRegistry.getRegistry(host);
     Hello stub = (Hello) registry.lookup("Hello");
     String response = stub.sayHello();
     System.out.println("response: " + response);
   } catch (Exception e) {
     e.printStackTrace();
   }
}
}
SOAP-based web services provide a way to build and invoke a hosted API in a 
language- and platform-neutral manner. It passes a message from one end to the other 
as an XML payload. SOAP has a structure, and there are a large number of specifications 
to define its structure. The SOAP specification defines the request/response protocol 
between the client and the server. Web Services Description Language (WSDL) 
specification defines the way you describe a SOAP service. The WS-Security, WS-Trust, 
and WS-Federation specifications describe how to secure a SOAP-based service.  
WS- Policy provides a framework to build quality-of-service expressions around SOAP 
services. WS-SecurityPolicy defines the security requirements of a SOAP service in a 
standard way, built on top of the WS-Policy framework. The list goes on and on. 
SOAP- based services provide a highly decoupled, standardized architecture with 
policy- based governance. They do have all necessary ingredients to build a 
service-oriented architecture (SOA).
At least, that was the story a decade ago. The popularity of SOAP-based APIs has 
declined, mostly due to the inherent complexity of the WS-∗ standards. SOAP promised 
interoperability, but many ambiguities arose among different implementation stacks. To 
overcome this issue and promote interoperability between implementation stacks, the 
Web Services Interoperability (WS-I)26 organization came up with the Basic Profile for 
web services. The Basic Profile helps in removing ambiguities in web service standards. 
An API design built on top of SOAP should follow the guidelines Basic Profile defines.
26 The OASIS Web Services Interoperability Organization, www.ws-i.org/
Chapter 1  apIs rule!
18
Note sOap was initially an acronym that stood for simple Object access 
protocol. From sOap 1.2 onward, it is no longer an acronym.
In contrast to SOAP, REST is a design paradigm, rather than a rule set. Even though 
Roy Fielding, who first described REST in his PhD thesis,27 did not couple REST to HTTP, 
99% of RESTful services or APIs today are based on HTTP. For the same reason, we could 
easily argue, REST is based on the rule set defined in the HTTP specification.
The Web 2.0 trend emerged in 2006–2007 and set a course to a simpler, less complex 
architectural style for building APIs. Web 2.0 is a set of economic, social, and technology 
trends that collectively formed the basis for the next generation of Internet computing. 
It was built by tens of millions of participants. The platform built around Web 2.0 was 
based on the simple, lightweight, yet powerful AJAX-based programming languages and 
REST—and it started to move away from SOAP-based services.
Modern APIs have their roots in both SOAP and REST. Salesforce launched its public 
API in 2000, and it still has support for both SOAP and REST. Amazon launched its web 
services API in 2002 with support for both REST and SOAP, but the early adoption rate 
of SOAP was very low. By 2003, it was revealed that 85% of Amazon API usage was on 
REST.28 ProgrammableWeb, a registry of web APIs, has tracked APIs since 2005. In 2005, 
ProgrammableWeb tracked 105 APIs, including Google, Salesforce, eBay, and Amazon. 
The number increased by 2008 to 1000 APIs, with growing interest from social and 
traditional media companies to expose data to external parties. There were 2500 APIs by 
the end of 2010. The online clothing and shoe shop Zappos published a REST API, and 
many government agencies and traditional brick-and-mortar retailers joined the party. 
The British multinational grocery and merchandise retailer Tesco allowed ordering via 
APIs. The photo-sharing application Instagram became the Twitter for pictures. The Face 
introduced facial recognition as a service. Twilio allowed anyone to create telephony 
applications in no time. The number of public APIs rose to 5000 by 2011; and in 2014 
ProgrammableWeb listed out more than 14,000 APIs. In June 2019, ProgrammableWeb 
27 Architectural Styles and the Design of Network-based Software Architectures,  
www.ics.uci.edu/~fielding/pubs/dissertation/top.htm
28 REST vs. SOAP In Amazon Web Services, https://developers.slashdot.org/
story/03/04/03/1942235/rest-vs-soap-in-amazon-web-services
Chapter 1  apIs rule!
19
announced that the number of APIs it tracks eclipsed 22,000 (see Figure 1-7). At the same 