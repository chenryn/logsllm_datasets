### 优化后的文本

#### 网站数量随时间变化的排除分析
图5展示了从2011年8月至2016年7月期间，被排除在分析之外的网站数量的变化。我们的部分快照分析表明，这种变化主要是由于网站实施了针对爬虫的反滥用策略。一些域名会在检测到Wayback Machine的爬虫时显示错误页面。对于正确归档的网站，我们验证了Wayback Machine为普通用户（使用常规浏览器）和我们的爬虫提供的快照是一致的。为此，我们手动分析了随机选择的20个URL样本，并未发现提供给普通用户和爬虫的内容有任何差异。我们的分析结果与Lerner等人[53]的研究一致，即Wayback Machine能够可靠地归档大多数网站。需要注意的是，由于依赖于Wayback Machine的归档内容，我们可能会错过特定位置的内容，这些归档内容是基于Wayback Machine服务器的位置。

#### Wayback Machine上的反广告拦截检测
在爬取Alexa前5000个域名的历史数据后，我们使用Anti-Adblock Killer List和Combined EasyList检查反广告拦截器的存在情况。我们使用这些过滤列表的历史版本，以便反映它们在当时的回顾性效果。对于HTTP请求过滤规则的检测，我们从HAR文件中提取HTTP请求，并查看它们是否触发过滤列表中的HTTP规则。对于HTML元素过滤规则的检测，我们在启用广告拦截器的浏览器中打开存储的HTML页面，并查看是否触发了过滤列表中的HTML规则。

为了通过HTTP请求过滤规则检测反广告拦截器的存在，我们从Wayback Machine爬取的HAR文件中提取HTTP请求URL。Wayback Machine在归档网站时会将所有活动URL替换为其自己的引用，即在URL前添加http://web.archive.org。为了运行HTTP请求过滤规则，我们截断了Wayback Machine的引用。注意，我们不会截断Wayback逃逸[52, 53] URL，因为它们没有用Wayback Machine引用进行归档。我们使用adblockparser [7]来匹配网站的所有URL与HTTP请求过滤规则。如果任何URL与任何一个HTTP请求过滤规则匹配，则我们将该网站标记为反广告拦截。图6(a)显示了在Alexa前5000个网站中，由Anti-Adblock Killer List和Combined EasyList检测到的触发HTTP规则的反广告拦截网站数量。

对于Anti-Adblock Killer List，匹配的网站数量从2014年4月的0增加到2016年7月的331。对于Combined EasyList，匹配的网站数量从2011年8月的0增加到2016年7月的16。与我们在§3中对这些过滤列表的比较分析相比，值得注意的是，Anti-Adblock Killer List匹配的网站数量远高于Combined EasyList。我们对匹配URL的分析还揭示，绝大多数网站使用第三方脚本来进行反广告拦截。具体来说，超过98%的Anti-Adblock Killer List匹配的网站使用来自Optimizely、Histats、PageFair和Blockadblock等第三方反广告拦截供应商的脚本。

为了通过HTML元素过滤规则检测反广告拦截器的存在，我们在完全功能的Web浏览器中打开从Wayback Machine爬取的HTML网页，并分析其是否触发过滤列表中的HTML元素过滤规则。我们配置了一个启用了Adblock Plus并订阅了Anti-Adblock Killer List和Combined EasyList的Mozilla Firefox浏览器配置文件。对于每个爬取的HTML网页，我们在浏览器中打开网页并等待180秒以使其完全加载并触发HTML元素过滤规则。之后，我们分析Adblock Plus的日志并提取触发的HTML元素过滤规则。图6(b)显示了在Alexa前5000个网站中，由Anti-Adblock Killer List和Combined EasyList检测到的触发HTML元素过滤规则的反广告拦截网站数量。我们注意到，与HTTP请求过滤规则相比，匹配的HTML元素规则数量要少得多。对于Anti-Adblock Killer List，匹配的网站数量从2014年4月到2016年7月保持在0到5之间。对于Combined EasyList，匹配的网站数量从2011年8月到2016年7月保持在0到4之间。

接下来，我们比较了Anti-Adblock Killer List和Combined EasyList在添加新的反广告拦截过滤规则的速度。图7绘制了反广告拦截器添加到网站的时间与过滤规则添加到检测它的时间之间的天数差分布。结果显示，Combined EasyList在添加新的反广告拦截过滤规则方面比Anti-Adblock Killer List更迅速。在Combined EasyList中，82%的反广告拦截器在添加到网站后的90天内定义了过滤规则。而在Anti-Adblock Killer List中，只有32%的反广告拦截器在添加到网站后的90天内定义了过滤规则。值得注意的是，有一小部分反广告拦截器在添加到网站之前就已经在Combined EasyList和Anti-Adblock Killer List上存在过滤规则。这可能是因为过滤列表使用了通用规则来阻止第三方反广告拦截器。在Combined EasyList中，42%的反广告拦截器在添加到网站之前就已经存在过滤规则。在Anti-Adblock Killer List中，23%的反广告拦截器在添加到网站之前就已经存在过滤规则。

#### 实时网络上的反广告拦截检测
在使用Wayback Machine回顾性分析反广告拦截过滤列表的覆盖范围后，我们在2017年4月进一步研究了它们在实时网络上的覆盖范围。我们爬取了Alexa前10万个网站，并使用Anti-Adblock Killer List和Combined EasyList检查反广告拦截器的存在情况。对于实时网络的检测，我们使用了最新的过滤列表版本。总体而言，我们在实时网络上的结果与使用Wayback Machine进行的回顾性分析结果一致。例如，我们观察到Anti-Adblock Killer List的覆盖率远高于Combined EasyList。对于Anti-Adblock Killer List，触发HTTP请求过滤规则的网站数量为4,931个，占99,396个网站的4.96%。对于Combined EasyList，触发HTTP请求过滤规则的网站数量为182个，占99,396个网站的0.18%。此外，我们发现触发HTML元素过滤规则的网站数量要少得多。具体来说，触发HTML元素过滤规则的网站数量为11个（Anti-Adblock Killer List）和15个（Combined EasyList）。我们再次注意到，绝大多数网站使用第三方反广告拦截脚本。对于Anti-Adblock Killer List，97%的匹配网站使用了来自第三方供应商的反广告拦截脚本。

### 检测反广告拦截脚本
由于反广告拦截过滤列表目前是手动维护的，因此对于其作者来说保持更新是一项挑战。两个流行的反广告拦截过滤列表有不同的实现方式、覆盖范围和更新频率。例如，覆盖范围更好的反广告拦截过滤列表往往更新频率较低。我们注意到，反广告拦截过滤列表难以跟上快速演变的反广告拦截器[59]。因此，为了帮助反广告拦截过滤列表的作者，我们接下来探讨一种基于机器学习的自动化方法来检测反广告拦截脚本。

在线发布者使用JavaScript来实现客户端的反广告拦截逻辑。我们计划通过对JavaScript代码进行静态代码分析来指纹识别反广告拦截行为。基本思路是从反广告拦截JavaScript代码中提取语法特征，并构建一个轻量级的机器学习分类器。我们的方法受到先前基于机器学习的JavaScript分析方法的启发，用于检测恶意软件[43]和跟踪器[50]。

图8展示了我们提出的方法的工作流程。我们首先使用Chrome V8引擎解包JavaScript文件。我们构建解析脚本的抽象语法树（AST），然后从中提取不同的语法特征。我们使用监督机器学习训练一个分类器（AdaBoost + SVM），以区分反广告拦截脚本和非反广告拦截脚本。下面讨论我们静态JavaScript代码分析方法的不同步骤，以检测反广告拦截器。

**动态JavaScript的解包**：JavaScript的动态特性使得静态分析具有挑战性。例如，JavaScript代码经常使用eval()函数进行打包。这样的代码在执行前会自行解包。为了处理动态生成的代码，我们使用Chrome V8引擎通过拦截script.parsed函数调用来解包eval()函数。每当eval()被评估或新代码通过<script>或<template>标签添加时，都会调用script.parsed函数。

**收集标记数据**：为了训练机器学习分类器，我们需要反广告拦截和非反广告拦截脚本的标记示例。我们利用了在使用Wayback Machine对Alexa前5000个网站进行回顾性测量研究时收集的超过一百万个JavaScript片段。我们的反广告拦截数据集包含与众包反广告拦截过滤列表的HTTP请求过滤规则匹配的JavaScript片段。我们使用其中的372个反广告拦截脚本作为正例。为了收集负例，我们使用剩余的未被过滤列表识别为反广告拦截器的脚本。我们旨在使标记数据的类别不平衡大约为10:1（负例:正例）。我们手动验证了正例地面实况的10%随机样本。我们发现绝大多数脚本是由已知的反广告拦截供应商如Optimizely和Blockadblock提供的。

**特征提取**：为了提取特征，我们将解析的脚本映射到抽象语法树（AST），这是JavaScript代码的树形结构表示。在构建AST之后，我们根据层次树结构提取特征。我们将特征定义为上下文和文本的组合。上下文是指特征出现的地方，如循环、try语句、catch语句、if条件、switch条件等。文本是在上下文中出现的代码。我们基于不同的文本选择标准提取三种类型的特征集。第一种类型（all）考虑所有文本元素，包括JavaScript关键字、JavaScript Web API关键字、标识符和字面量。第二种类型（literal）仅考虑字面量中的文本元素，即移除JavaScript关键字、JavaScript Web API关键字和标识符。这些特征非常通用，因为它们不包含JavaScript代码中的标识符和关键字特定的文本。第三种类型（keyword）仅考虑来自本地JavaScript关键字和JavaScript Web API关键字的文本元素，即移除标识符和字面量。由于不考虑标识符和字面量中的文本元素，关键字特征不受标识符和字面量随机化的影响。然而，这些特征容易受到多态性的影响。这三种特征集为我们提供了不同程度的泛化。我们期望更通用的特征对实现细节的小改动更具鲁棒性，但它们可能会因泛化而失去一些有用的信息。

表2显示了Code 5的一些提取特征及其类型。字面量特征捕捉JavaScript代码的文本属性，例如：

| 特征 | 类型 |
| --- | --- |
| MemberExpression:BlockAdBlock | all |
| MemberExpression:_creatBait | all |
| MemberExpression:_checkBait | all |
| Literal:abp | literal |
| Literal:0 | literal |
| Literal:hidden | literal |
| Identifier:clientHeight | all |
| Identifier:clientWidth | all |
| Identifier:offsetHeight | all |
| Identifier:offsetWidth | all |

通过这种方式，我们可以有效地检测和分类反广告拦截脚本，从而帮助维护过滤列表的作者更好地应对不断变化的反广告拦截技术。