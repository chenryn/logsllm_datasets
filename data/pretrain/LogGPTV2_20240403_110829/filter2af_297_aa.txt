原文：
## 摘要
在这篇文章中，我们将为读者介绍如何使用JA3和JA3来提取和识别客户端和服务器之间的TLS协商的指纹。这种组合型的指纹识别技术，能够为特定客户端与其服务器之间的加密通信提供具有更高的识别度。例如：
标准Tor客户端：  
JA3 = e7d705a3286e19ea42f587b344ee6865（Tor客户端）  
JA3S = a95ca7eab4d47d051a5cd4fb7b6005dc（Tor服务器的响应）
由于Tor服务器总是以完全相同的方式来响应Tor客户端，所以，这一特征能够为确认相关流量来自于Tor提供更高的置信度。更多例子——
Trickbot恶意软件：  
JA3 = 6734f37431670b3ab4292b8f60f29984 （trickbot）
JA3S = 623de93db17d313345d7ea481e7443cf（C2服务器的响应）
Emotet恶意软件：  
JA3 = 4d7a28d6f2263ed61de88ca66eb011e3 ( Emotet )  
JA3S = 80b3a14bccc8598a1f3bbe83e71f735f (C2服务器的响应 )
在这些恶意软件样本中，C2服务器始终以完全相同的方式来响应恶意软件客户端，应该说是分毫不差。因此，即使流量被加密，并且，即使不知道C2服务器的IP地址或域名，因为它们会不断变化，我们仍然可以通过指纹来识别客户端和服务器之间的TLS协商，以提高恶意通信识别结果的置信度。
实际上，JA3和JA3S工具现在已经开源，读者可以从下面的地址进行下载：
https：//github.com/salesforce/ja3
## JA3背景知识
我们在2017年的一篇文章中，公布了JA3软件的源码；简单来说，JA3就是一种在线识别TLS客户端指纹的方法：
[Open Sourcing JA3SSL/TLS Client Fingerprinting for Malware
Detectionengineering.salesforce.com](https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41 "Open Sourcing JA3SSL/TLS Client Fingerprinting for
Malware Detectionengineering.salesforce.com")
实际上，对TLS客户端进行指纹识别的思想，最初来自于[Lee Brotherston](https://twitter.com/synackpse "Lee
Brotherston")于2015年的一项研究成果，对这项研究感兴趣的读者可以参阅[这里](https://blog.squarelemon.com/tls-fingerprinting/
"这里")；与该思想相关的DerbyCon演讲可以参阅[这里](https://www.youtube.com/watch?v=XX0FRAy2Mec
"这里")。如果没有Lee的研究论文和开放源码，我们也就不会开始研究JA3了。所以，在此要感谢Lee以及所有相关文章和开放源代码的作者们！
我们知道，不仅"良性的"应用程序会使用TLS及其前身SSL对其流量进行加密，而且恶意软件也常常这样做；前者这样做的目的是确保数据安全，而后者这样做的目的则是将其流量隐藏在噪声中。为了启动TLS会话，客户端将在TCP
3次握手后发送TLS客户端的Hello数据包。这个数据包及其生成方式取决于构建客户端应用程序时所使用的软件包和方法。如果接受TLS连接，服务器将使用基于服务器端库和配置以及Client
Hello消息中的详细信息创建的TLS Server Hello数据包进行响应。由于TLS协商是以明文的方式传输的，所以，我们可以使用TLS Client
Hello数据包中的详细信息对客户端应用程序进行指纹识别。
这张精心绘制的网络图为我们展示了SSL/TLS连接刚开始的通信模式。
JA3方法用于收集Client
Hello数据包中以下字段的十进制字节值：版本、可接受的密码、扩展列表、椭圆曲线密码和椭圆曲线密码格式。然后，它将这些值串联在一起，使用“,”来分隔各个字段，同时，使用“-”来分隔各个字段中的各个值。
使用Wireshark展示的Client Hello数据包示例
这些字段的顺序如下所示：
TLSVersion，Ciphers，Extensions，EllipticCurves，EllipticCurvePointFormats
例如：
769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0
如果Client Hello数据包中没有TLS扩展（TLS Extensions），则这些字段的值为空。
例如：  
769,4–5–10–9–100–98–3–6–19–18–99,,,
然后，会计算这些字符串的MD5哈希值，以生成易于使用和共享的长度为32字符的指纹。它们就是JA3 TLS客户端的指纹。
769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0 →
ada70206e40642a3e4461f35503241d5  
769,4–5–10–9–100–98–3–6–19–18–99,,, → de350869b8c85de67a350c8d186f11e6
我们还需要引入一些代码来解释Google的GREASE（Generate Random Extensions And Sustain
Extensibility），如这里所述。实际上，Google会使用这个机制来防止TLS生态系统中的可扩展性出现故障。不过，JA3会完全忽略这些值，以确保使用GREASE的程序仍然可以用单个JA3哈希值来完成指纹识别。
那么，JA3可以在TLS1.3上工作吗？当然了。
下面给出了两个不同浏览器的TLS1.3Client
Hello数据包，我们可以看到，不仅每个Hello数据包对其加密算法和扩展的排序各不相同，而且，它们也包含（或排除）了不同的加密算法和扩展。因此，JA3对于每个客户端来说仍然是唯一的。
## JA3S
创建JA3之后，我们可以利用同样的方法对TLS握手的服务器端进行指纹识别，即对TLS Server
Hello消息进行指纹识别。JA3S方法会收集Server
Hello数据包中以下各个字段的十进制字节值：版本、可接受的加密算法和扩展列表。然后，它将这些值串联在一起，使用“,”来分隔各个字段，并通过“-”来分隔每个字段中的各个值。
这些字段的顺序如下所示：
TLSVersion，Cipher，Extensions
例如：  