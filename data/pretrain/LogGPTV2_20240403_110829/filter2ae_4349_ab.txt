and take the corresponding array of vftable functions from the linked list.
![
](https://images.seebug.org/content/images/2019/09/de5be446-bf47-4c39-b6fa-496a298bdb5e.png-w331s)
First traverse takes out the first array of functions.
![
](https://images.seebug.org/content/images/2019/09/23900530-fba5-4302-b509-7877abb13ea6.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/6b6be4bd-c053-404f-872e-10328d4149f1.png-w331s)
After passing in the data, we call `rdpdr!DrSession::RecognizePacket` to read
it through the function array.
![
](https://images.seebug.org/content/images/2019/09/6f5e5ff7-614f-4eb4-90c2-c70b4db7af61.png-w331s)
Determine if the header is (RDPDR_CTYP_CORE) 0x7244.
![
](https://images.seebug.org/content/images/2019/09/181261d4-46e3-4297-acbd-c94914406e8c.png-w331s)
Then the second address of the function vftable will be read and forwarded.
![
](https://images.seebug.org/content/images/2019/09/c7603d2b-45f7-4f2f-aeb4-fbef6dd7e897.png-w331s)
You can see the packet processing logic of RDPDR as below.
![
](https://images.seebug.org/content/images/2019/09/7e33ca52-2bc8-4e9d-8128-8086442b99b8.png-w331s)
After a series of data packet processing, RDPDR finally enters the place we
care about, and will pass the `channelstruct` to handle the flag bit by
calling `termdd! _IcaQueueReadChannelRequest`.
![
](https://images.seebug.org/content/images/2019/09/a0bf25fe-5fda-456c-9c0f-47511855f53f.png-w331s)
The initial RDPDR channelstruct flag is as follows
![
](https://images.seebug.org/content/images/2019/09/b6235f61-e054-4480-b38e-fcf46568495f.png-w331s)
After being processed by function `termdd! _IcaQueueReadChannelRequest`, the
flag becomes as the following, and the next data will still enter
`termdd!_IcaCopyDataToUserBuffer`, causing pool injection failure.
![
](https://images.seebug.org/content/images/2019/09/0fa6fa69-256e-4d0d-b1f1-95feec938229.png-w331s)
Going back to the RDPDR header handler `rdpdr!DrSession::RecognizePacket`, we
find that after the linked list traversal fails, we will jump, and finally we
will enter the read failure handler ``rdpdr!DrSession::ChannelIoFailed`, and
then directly return
![
](https://images.seebug.org/content/images/2019/09/83bc202f-7751-4e61-bb03-17f10a07e884.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/8778d2de-c15d-4345-852f-2fba56509e0a.png-w331s)
We send a packet with a wrong header. We set its header flag to be 0x7240,
which will cause false in `rdpdr!DrSession::RecognizePacket` . After that, we
will continue to traverse the linked list and then take out two function
arrays. ![
](https://images.seebug.org/content/images/2019/09/66d3c183-76d0-4ac1-b363-7c71a6240008.png-w331s)
The last two function arrays call `rdpdr!DrExchangeManager::RecognizePacket`
and `rdpdr!DrDeviceManager::RecognizePacket` in turn, which will determine the
wrong header flag 0x7240, and it will result in the wrong jumping after
traversing the linked list. This will bypass the `termdd!
_IcaQueueReadChannelRequest` 's modificatoin towards the flag and break the
loop.
![
](https://images.seebug.org/content/images/2019/09/b9df7ddf-76d9-442d-8c1f-49f3a98506fa.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/e3f58def-e74e-43bc-9c71-ce123cbb46c0.png-w331s)
Finally, we will construct multiple error packets and then enter
ExAllocatePoolWithTag and assign it to the non-paged memory we need!
 ![
](https://images.seebug.org/content/images/2019/09/3d61f243-08c0-4057-a5e4-1c40ef462bd5.png-w331s)
# 0x02 Win7 EXP Brief Analysis of Pool Injection
The size of the frst released MS_T120 pool is 0x170, and the flag of the pool
is TSic.
![
](https://images.seebug.org/content/images/2019/09/c1956b9b-ff90-469d-a174-4a724f6f81fc.png-w331s)
By analyzing Win7 exp, we can know the data occupancy is the RDPSND channel,
the author does not use the RDPDR channel, it should also be related to the
stability of the injection, RDPSND injection is completed after the
initialization of RDPDR is established, before the free MS_T120 structure,
send 1044 packets to apply for 0x170 size pool memory, this can be said to
prevent the memory that was later freed from being used by other programs,
improve the survival chance of memory occupied by us after free.
![
](https://images.seebug.org/content/images/2019/09/8a2e70ca-8ac4-40bf-b549-28b9101ef206.png-w331s)
The actual data size of the placeholder being freed is 0x128, and the transit
address used is 0xfffffa80ec000948.
![
](https://images.seebug.org/content/images/2019/09/b1cdaa40-460f-4ccc-b00c-48b97257b0fd.png-w331s)
After starting the pool injection, the payload is injected to the place where
you can call [rax] == 0xfffffa80ec000948. The size of the injected payload is
basically 0x400, and the total data size of the injection is 200mb. Let us
first look at the total amount of memory occupied by the TSic before the
injection. Its size is around 58kib.
![
](https://images.seebug.org/content/images/2019/09/bdbffa6a-6b0e-49a5-9cfd-444e4728ebff.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/7c52de99-c79d-445d-be20-45fab5e57ede.png-w331s)
After the injection, the memory size of the TSic logo pool is about 201mb. The
pool memory injection is successful. My win7 is sp1. The total memory size is
1GB. There is no other interference during the injection process.
![
](https://images.seebug.org/content/images/2019/09/96856048-421f-4c67-9737-0a504d62b0d1.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/d16d25b1-12e6-438f-87f7-0b576bac3875.png-w331s)
In this picture, we can find the payload of the pool injection has become
quite stable. the higher the address of the memory is, the more stable it is.
![
](https://images.seebug.org/content/images/2019/09/8cc4c922-8d96-49ac-910b-4a37a865d0b6.png-w331s)
At the end of the disconnection, the free memory has been occupied by the
0x128 size data we injected.
After executing the call instruction, it jumps to our payload successfully!
![
](https://images.seebug.org/content/images/2019/09/1baf39cf-8334-4bdb-9942-d773a393c780.png-w331s)
References:
[0]   
[1]   
[2]
* * *