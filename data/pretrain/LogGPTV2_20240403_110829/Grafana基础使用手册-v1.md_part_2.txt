## Environment variables can be used as tags, and throughout the config file
# user = "$USER"
[agent]
## Default data collection interval for all inputs
interval = "10s"
## Rounds collection interval to 'interval'
## ie, if interval="10s" then always collect on :00, :10, :20, etc.
round_interval = true
## Telegraf will send metrics to outputs in batches of at most
## metric_batch_size metrics.
## This controls the size of writes that Telegraf sends to output plugins.
metric_batch_size = 1000
## For failed writes, telegraf will cache metric_buffer_limit metrics for each
## output, and will flush this buffer on a successful write. Oldest metrics
## are dropped first when this buffer fills.
## This buffer only fills when writes fail to output plugin(s).
metric_buffer_limit = 10000
## Collection jitter is used to jitter the collection by a random amount.
## Each plugin will sleep for a random time within jitter before collecting.
## This can be used to avoid many plugins querying things like sysfs at the
## same time, which can have a measurable effect on the system.
collection_jitter = "0s"
## Default flushing interval for all outputs. You shouldn't set this below
## interval. Maximum flush_interval will be flush_interval + flush_jitter
flush_interval = "10s"
## Jitter the flush interval by a random amount. This is primarily to avoid
## large write spikes for users running a large number of telegraf instances.
## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
flush_jitter = "0s"
## By default, precision will be set to the same timestamp order as the
## collection interval, with the maximum being 1s.
## Precision will NOT be used for service inputs, such as logparser and statsd.
## Valid values are "ns", "us" (or "µs"), "ms", "s".
precision = ""
## Logging configuration:
## Run telegraf with debug log messages.
debug = false
## Run telegraf in quiet mode (error log messages only).
quiet = false
## Specify the log file name. The empty string means to log to stderr.
logfile = ""
## Override default hostname, if empty use os.Hostname()
hostname = "ecs-ci-139.129.213.65" #agent主机名可以采用salt来部署
## If set to true, do no set the "host" tag in the telegraf agent.
omit_hostname = false
[[outputs.influxdb]]
## The full HTTP or UDP endpoint URL for your InfluxDB instance.
## Multiple urls can be specified as part of the same cluster,
## this means that only ONE of the urls will be written to each interval.
# urls = ["udp://localhost:8089"] # UDP endpoint example
urls = ["http://x.x.x.x:8086"] # influxdb地址必填
## The target database for metrics (telegraf will create it if not exists).
database = "grafana" # required #influxdb数据库
## Retention policy to write to. Empty string writes to the default rp.
retention_policy = ""
## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
write_consistency = "any"
## Write timeout (for the InfluxDB client), formatted as a string.
## If not provided, will default to 5s. 0s means no timeout (not recommended).
timeout = "5s"
username = "grafana"
password = "xxxxxxxxx"
## Set the user agent for HTTP POSTs (can be useful for log differentiation)
# user_agent = "telegraf"
## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
# udp_payload = 512
## Optional SSL Config
# ssl_ca = "/etc/telegraf/ca.pem"
# ssl_cert = "/etc/telegraf/cert.pem"
# ssl_key = "/etc/telegraf/key.pem"
## Use SSL but skip chain & host verification
# insecure_skip_verify = false
#[[]]以下为插件配置，如需要配置请取消#号即可
[[inputs.cpu]]
## Whether to report per-cpu stats or not
percpu = true
## Whether to report total system cpu stats or not
totalcpu = true
## If true, collect raw CPU time metrics.
collect_cpu_time = false
[[inputs.disk]]
## By default, telegraf gather stats for all mountpoints.
## Setting mountpoints will restrict the stats to the specified mountpoints.
# mount_points = ["/"]
## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
## present on /run, /var/run, /dev/shm or /dev).
ignore_fs = ["tmpfs", "devtmpfs"]
[[inputs.diskio]]
## By default, telegraf will gather stats for all devices including
## disk partitions.
## Setting devices will restrict the stats to the specified devices.
# devices = ["sda", "sdb"]
## Uncomment the following line if you need disk serial numbers.
# skip_serial_number = false
[[inputs.kernel]]
# no configuration
[[inputs.mem]]
# no configuration
[[inputs.processes]]
# no configuration
[[inputs.swap]]
# no configuration
[[inputs.system]]
# no configuration
[[inputs.net]]
[[inputs.netstat]]
7.面板绘图
User and Org
用户：
默认登录系统是以admin用户进行登录，在帐号下是你所在的组织。
选择可以编辑当前用户的基本信息，同时也可以修改用户密码
组织：
可以修改组织名，地址等基本信息
管理组织当中的用户，可配置相关角色权限。默认权限有：Admin、Viewer、Editor、Read Only Editor。Grafana有两个级别的管
理，分别是组织管理员和Grafana管理员。后面后有相关介绍
在此可以设置grafana的相关API key
创建一个组织
Home DashBoard
是grafana的全局视图，可以认为是一组一个或多个面板的组成。可以通过右上角的仪表时间选择器进行控制。
上面是安装完grafana后需要做的操作流程
1.安装grafana
2.创建您的数据来源
3.创建一个dashborad
4.添加用户
5.安装apps或插件
Dashboard还包含如下信息
1.共享的Dashboard列表
2.最近查看的Dashboards列表
3.已安装的Apps
4.已安装的面板
如上图可以看出我们安装了两个面板：时间面板和饼图面板
5.已安装的数据源
playlist（播放列表）
它是一种特殊类型的信息中心，可通过信息显示板列表进行滚动
点击play即可在两个Dashboards中进行依次展示，默认间隔时间为5分钟
可以对播放列表进行控制
导入模板
下载模板
https://grafana.net/dashboards/928
导入
在Dashboards中选择Import-->选择.json的模板文件
导入模板
结果
插件panels和apps
下载插件需要去官网下载您需要的具体panels和apps，官方支持plugins很多支持以下panel
如果需要下载就选中后按配置方法安装即可。以下以安装 worldmap panel为例。点击install plugin
执行安装步骤
下载插件目录位于/var/lib/grafana/plugins
[root@localhost ~]# grafana-cli plugins install grafana-worldmap-panel
installing grafana-worldmap-panel @ 0.0.16
from url: https://grafana.net/api/plugins/grafana-worldmap-panel/versions/0.0.16/download
into: /var/lib/grafana/plugins
✔ Installed grafana-worldmap-panel successfully
Restart grafana after installing plugins . 
[root@localhost ~]#systemctl restart grafana-server #重启grafana
使用：选择最后panel
8.自定义绘图
下面我们在一个新的DashBoard中创建以下面板信息,那建立以下信息需要安装一个clock plugin用来建立时间面板。
在创建这边面板之前，我们来看到一个Dashboard是如何组成的。Dashboard由多个Row组成，在Row中创建面板，一行Row分为12
列，面板默认Span为12。可以自定每个面板的Span宽度。也可以自定义高度等。
添加Row时需要添加指定类型的面板，那Uptime 我们数据是要从数据源中获取。就需要选择Singlestat，如果需要绘线性图表就需要选
择Graph。
创建结果
点击Panel Title----Edit新编辑一个面板的配置信息，点击还可以共享面板和查看面板具体信息
默认进入Metrics中进行配置，其中默认就有一条默认配置，该查询语句是根据您所选择的默认数据源类型来生成的默认语句。“A”表示
一条语句，一个面板可以由多个查询组成，如果需要可点击Add query
点击A查询展开查询
选择数据源和表，数据源为influxdb ，表为telegraf默认创建的表system，选择具体的字段数据
查询结果为5597940，默认为秒，那如何把数据转换成我们可以正常识别的值呢，点击Options
选择Unit单位
默认支持的单位格式有很多，我们选择secons(s)即可
保存面板：Ctrl+s后点击x关闭后查看Dashboard
刚已经提到，一条Row默认有12行，我们此时需要调整span和title信息，ctrl+s保存
再次编辑面板选择Options--设置coloring--勾选backgroud--点击中间的colors选择背景颜色,也可以设置Thresholds的一个区间值，下
面的colors就与此对应：比如50，80那第一个color为0-50的颜色标记，第二个color 为50-80，第三个为80-100的色值。
我们调整Row的高度，让它保存一个合理的高度--点击Row Options进行调整
调整高度值为100后保存ctrl+s,重新刷新浏览器后查看结果
那此时我们就建立好了一个面板
那后面以此建立即可
添加clock面板
点击Panel Title
配置Title信息和span宽度
勾选Date Options显示格式，还可以自定义背景页面，调整字体大小为40px
配置/分区使用展示
自定义绘图结果
我们现在来定义一个CPU信息
8.模板信息
可以把一个自定好的Dashboard制作成模板，那后面就可以直接使用该模板即可。如果一个模板中需要查看不同主机或者不同CPU，磁盘
有情的监控信息。那此时就可以在模板中创建变量。
配置变量名为Host,数据来源为influxdb ,Query语句语法来源influxdb中，
调整面板中的metrics，加上where语句
9.报警
grafana支持以下报警方式
1.email
2.slack
3.webhook
4.pagerduty
5.victorops
6.opsgenie
注意：在alert所配置的查询语句中不能带有模板变量，否则无法配置！
配置邮件报警
1.需要添加报警 notifications
2.修改smtp配置
[smtp]
enabled = true
host = smtp.sina.com:25 #必须加端口
user = PI:EMAIL
password = xxxxxxxx
;cert_file =
;key_file =
skip_verify = true
from_address = PI:EMAIL
[alerting]
# Makes it possible to turn off alert rule execution.
execute_alerts = true
3.测试
5.配置报警
可以看到此监控的状态改变情况
配置slack报警
https://slack.com
创建一个新的团队
输入您的邮件中的6位数确认码
输入您的名字
设置您的密码
配置团队类型
输入公司名
配置团队域名
点击同意
跳过给好友发信息
进入slack
点击skip the tutorial进入slack管理界面
点击Channel后面+号创建一个团队，添加人员
配置webhooks
https://api.slack.com/incoming-webhooks
1.需要添加一个webhook的入站集成
选择Post到哪个Channel中
复制webhook URL
点击保存
添加一个slack类型的alert，点击send Test
在网页中查看是否收到测试报警信息
在手机中下载一个Slack
输入邮箱登录
输入密码
点击Logo切换到monitor通道
配置报警即可：