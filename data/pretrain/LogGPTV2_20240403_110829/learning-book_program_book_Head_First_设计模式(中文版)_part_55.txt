多变体，而这些变体几乎都和“控制访问”的做法有关。稍后
控制的对象。
我们会对此讨论得更详细，目前我们还是先看看几种代理控制
访问的方式：
R
■就像我们已经知道的，远程代理控制访问远程对象。
■虚拟代理控制访问创建开销大的资源。
■保护代理基于权限控制对资源的访问。
现在你已经有基本的概念了，来看看类图
460第11章
---
## Page 497
代理模式
ProxyfoRealSubject
都实现了Subject接口，这元
(
lcon
getlconWidehg
geticonHeight0
painticon(
Imagelcon
ImageProxy
getlconWidth()
getlconWidh0
geiconHeight0
0uayuoge6
Oucogued
paintlcon()
这是javax,swing
Jmase1con，一个显
这是我们的代理，首光器示消
示图像的类
息.当图像加载究成后，毒托
mageJcon婴示图像。
ImageProxy如何工作：
①ImageProxy首先创建一个lmagelcon，然后开始从网络URL上
加载图像。
在加载的过程中，1mageProxy显示“CD封面加载中，请稍
候.....”
③
当图像加载完毕，ImageProxy把所有方法调用委托给真正
的lmagelcon，这些方法包括了paintlcon（）、getWidth（）和
getHeight()。
4
如果用户请求新的图像，我们就创建新的代理，重复这样的过
程。
464
第11章
---
## Page 501
代理模式
JmaseProxy实现
ccinteraoes>
Jcon摄口。
Icon
getlonWidth0
class ImageProxy implements
getlconHeight0
ImageIcon imageIcon;
paintioon)
URL imageURL;
Thread retrievalThread;
boolean retrieving = false;
此image3con是我们希望在加载后显
示出来的真正的图像。
public ImageProxy(URL url) ( imageURL =
url;
我们将图像的URL传入构遥器中。这是
public int getIconWidth()(
if (imageIcon != null) (
我们最望显示的图像所在的位置。
return imageIcon.getIconWidth () ;
}else{
return 800;
在图像加载究毕前，返回默认的宽和高。
public int getIconHeight ()
图像加载完毕后，转给imageJcon处理。
if (imageIcon != null){
return imageIcon.getIconHeight();
}else{
return 600;
public void paintIcon (final Component c, Graphics
g，int x，
int y）{
if (imageIcon != null) {
imageIcon.paintIcon(c,g， x, y) ;
}else{
g.drawString("Loading CD cover, please wait...", x+300, y+190);
if (!retrieving)(
retrieving = true;
retrievalThread = new Thread(new Runnable()
public void run(){
try{
imageIcon = new ImageIcon(imageURL,
"CD Cover");
c.repaint () ;
）catch (Exception e)(
e.printStackTrace();
有趣的地方在这里。这里的代码全
在屏每上函出一个icon图像（通过善
托给imaselcon）。然而，如果我们
({
retrievalThread.start () ;
没有被完整创建的3mage3con，那就
自己创建一个。下一页这一点你会
看得更清楚..
你现在的位置
465
---
## Page 502
再靠近图像代理
再靠近一
当需要在层等上经制图依时，就调用此方法。
public void paintIcon(final Component c, Graphics
g，int x,
int y）{
if (imageIcon != null)(
如果你已经有icon，就告诉它函出自
imageIcon.paintIcon（c,g，x,y);
己。
}else（
g.drawString("Loading CD cover，please wait..."，x+300,y+190);
if (!retrieving）(
否则.就墨示那
个“加数中”
retrieving = true;
的
retrievalThread = new Thread(new Runnable() (
消息。
public void run() {
}Kx4
imageIcon = new ImageIcon（imageURL，“CD Cover");
c.repaint() ;
}catch （Exception e)(
e.printStackTrace();
1
）;
ievalThread.start();
我们在这里加载真正的icon图像。请注象，加数图像和
Jmaselcon是同步的（synchronous），也就是说.只有在
加载完之后，3mage3con构造器才会返回。这样，我们的
程序会藉在这里，动弹不得，也没办法显示消息，所以
要托加载变成异步的（asynchtonous）。下一页会详细说
9!...
466
第11章
---
## Page 503
代理模式
更靠近一点
如果我们还没有试着取出图像
那么就开始取出图像。（不要担心，只有一个线
程金调用paint，所以这里的做法是线程安全的。）
if （!retrieving）(
retrieving = true;
我们不希望挂起整个用户界面，所
以用另一个线程取出图像。
retrievalThread = new Thread(new Runnable()
public void run()(
try（
imageIcon = new ImageIcon(imageURL,
"CDCover"）;
c.repaint();
←
在线程中，我们实例化
}catch （Exception e)(
e.printStackTrace();
此Jcon对象，其构造器
当图像准备好时，我们告
会在图像加载完成后才
诉Swins.需要重绘。
返回。
retrievalThread.start() ;
所以，下一次会在实例化5maselcon之后，paintJcon方法才在屏等上绘制真正的图像，而不是那
个“加载中”的消息。
你现在的位置
467
---
## Page 504
设计谜题
设计迷题
ImageProxy类似乎有两个，由条件语句控制的状态。你能否用另一个
设计模式清理这样的代码？你要如何重新设计ImageProxy？
class ImageProxy implements Icon (
//实例变量构造器在这里
public int getIconWidth(）(
if (imageIcon != null){
return imageIcon.getIconWidth() ;
}else(
两个状态
return 800;
public int getIconHeight()
1
if (imageIcon != null)
return imageIcon.getIconHeight();
}else{
两个状态
return 600;
public void paintIcon(final Component c, Graphics g, int x，
int y)
if (imageIcon != null){
两个状态
imageIcon.paintIcon(c， g, x,y);
}else{
g.drawString("Loading CD cover,please wait...",x+300,y+190);
//这里有更多的代码
468
第11章
---
## Page 505
代理模式
测试CD封面浏览器
现在我们就来试试这个可爱的虚拟代理。我们已经烘烤好了一个新
待烘烤
的ImageProxyTestDrive，用来设置窗口、创建框架、安装菜单和创
代码
建我们的代理。我们不在这里研究这些代码的细节，虚拟代理的代
码列在本章最后，你可以随时去研究。
部分测试代码在下面：
public class ImageProxyTestDrive {
ImageComponent imageComponent;
public static void main (String[] args) throws Exception (
ImageProxyTestDrive testDrive = new ImageProxyTestDrive ();
在这里我们创建一个图像代理，并指
public ImageProxyTestDrive () throws Exception{
定初始URL。每次你从CD莱单中做出
一个选择，就金得到一个新的图像代
//建立框架和菜单
V
Icon icon = new ImageProxy (initialURL) ;
理。
imageComponent = new ImageComponent (icon) ;
frame . getContentPane () .add (imageComponent) ;
接着，我们将代理包装进组件
人
中，这样它就可以被放进框架。
组件金处理代理的宽度、高度等
最后我们把代理加进框架中，这样它
细节。
可以被显示。
现在执行测试程序：
8java ImageProxyTestDrive
执行时，应该金看到这
样的富口。
要测试的事情..·