In the context of PRIME+ABORT, it is evident that some countermeasures are effective against a wide range of attacks, including PRIME+ABORT, while others are impractical or ineffective. This observation leads us to advocate for the prioritization and further development of certain approaches over others.

We first examine classes of side-channel countermeasures that are impractical or ineffective against PRIME+ABORT, and then move on to those that are more effective and practical.

### Timer-Based Countermeasures
A broad class of countermeasures that are ineffective against PRIME+ABORT includes approaches that aim to limit the availability of precise timers. These methods either inject noise into timers to make them less precise or restrict access to timers in general. Examples include [15], [27], [31], [39], and various approaches classified by Ge et al. as “Virtual Time” or “Black-Box Mitigation.” PRIME+ABORT should be completely immune to all timing-related countermeasures.

### Partitioning Time
Another class of countermeasures that seems impractical against PRIME+ABORT is the one referred to as "Partitioning Time" by Ge et al. These countermeasures propose some form of "time-sliced exclusive access" to shared hardware resources. While this would technically be effective against PRIME+ABORT—since the attack depends on running simultaneously with its victim process—implementing this countermeasure would require providing each user process time-sliced exclusive access to the Last Level Cache (LLC). This would mean that processes from different users could never run simultaneously, even on different cores, which is impractical.

### Disabling TSX
Disabling Transactional Synchronization Extensions (TSX) entirely, similar to how hyperthreading has been disabled in cloud environments such as Microsoft Azure [30], is a countermeasure that would target PRIME+ABORT's workings. While technically feasible, due to a hardware bug, Intel already disabled TSX in many Haswell CPUs through a microcode update [17]. However, TSX's growing prevalence and adoption by applications such as glibc (pthreads) and the JVM [24] indicate its importance and usefulness. System administrators are unlikely to take such a drastic step.

### Auditing
More practical but still not ideal is the class of countermeasures referred to as Auditing, which is based on behavioral analysis of running processes. Hardware performance counters can be used to monitor LLC cache misses or miss rates, detecting when a PRIME+PROBE- or FLUSH+RELOAD-style attack is being conducted [1, 7, 46]. As a PRIME+PROBE-style attack, PRIME+ABORT would be vulnerable to these countermeasures. However, any behavioral auditing scheme is subject to misclassification errors. Additionally, monitoring TSX-related events, such as transactions opened or aborted, is less likely to be effective, as many benign programs generate a large number of both transactions and aborts, making it difficult to distinguish PRIME+ABORT from benign TSX programs.

### Constant-Time Techniques
The class of countermeasures known as "Constant-Time Techniques" includes various approaches, some of which are likely to be effective against PRIME+ABORT. These techniques ensure that important invariants are preserved in program execution regardless of secret input data, mitigating various types of side channels. Some "Constant-Time Techniques" ensure that critical functions execute in constant time, which is insufficient against PRIME+ABORT. However, more powerful techniques ensure that no data access or control-flow decision depends on secret data, making PRIME+ABORT ineffective, as monitoring cache accesses would not reveal anything about the secret data being processed.

### Randomizing Hardware Operations
Another class of defenses proposes to insert noise into hardware operations to make side-channel measurements more difficult. Although PRIME+ABORT is immune to timer-related efforts, other proposals aim to inject noise into cache accesses. For example, RPcache [40] randomizes the mapping between memory addresses and cache sets, making PRIME+ABORT and other cache attacks more difficult. Other proposals randomize the cache replacement policy. These schemes generally make side-channel attacks more difficult or less efficient, but higher levels of mitigation come with higher performance costs. Despite this, they provide relatively lightweight countermeasures against a general class of side-channel attacks.

### Cache Set Partitioning
Finally, a promising class of countermeasures proposes to partition cache sets between processes or disallow a single process from using all ways in any given LLC cache set. This would be a powerful defense against PRIME+ABORT or any other PRIME+PROBE variant. Progress has been made towards implementing these defenses, such as CATalyst [28], which uses Intel’s “Cache Allocation Technology” [18], or “cache coloring” schemes like STEALTHMEM [26] or that proposed by [5]. One undesirable side effect is that it reduces the maximum size of TSX transactions, hindering legitimate users of the hardware transactional memory functionality. However, the technique remains promising as an effective defense against a wide variety of cache attacks.

For more examples and details of these and other classes of side-channel countermeasures, we refer the reader to Ge et al. [4].

Our work with PRIME+ABORT leads us to recommend the further pursuit of countermeasures effective against all kinds of cache attacks, specifically "Constant-Time Techniques" (in their strict form), randomizing cache operations, or providing mechanisms for partitioning cache sets between processes.

### Disclosure
We disclosed this vulnerability to Intel on January 30, 2017, explaining the basic substance of the vulnerability and offering more details. We also indicated our intent to submit our research on the vulnerability to USENIX Security 2017 to ensure Intel was alerted before it became public. We did not receive a response.

### Conclusion
PRIME+ABORT leverages Intel TSX primitives to yield a high-precision, cross-core cache attack that does not rely on timers, negating several important classes of defenses. We have shown that leveraging TSX improves the efficiency of algorithms for dynamically generating eviction sets; that PRIME+ABORT has higher accuracy and speed on Intel’s Skylake architecture than previous L3 PRIME+PROBE attacks while producing fewer false positives; and that PRIME+ABORT can be successfully employed to recover secret keys from a T-table implementation of AES. Additionally, we presented new evidence useful for all cache attacks regarding Intel’s Skylake architecture: that it may differ from previous architectures in the number of cache slices and that it may use different cache replacement policies for lines involved in TSX transactions.

### Acknowledgments
We thank our anonymous reviewers for their helpful advice and comments. We also especially thank Yuval Yarom for his assistance in improving the quality of this work. This material is based in part upon work supported by the National Science Foundation. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.

### References
[1] CHIAPPETTA, M., SAVAS, E., AND YILMAZ, C. Real-time detection of cache-based side-channel attacks using hardware performance counters. Applied Soft Computing 49 (2016), 1162–1174.
...
[46] ZHANG, T., ZHANG, Y., AND LEE, R. B. Cloudradar: a real-time side-channel attack detection system in clouds. In Research in Attacks, Intrusions, and Defenses (RAID), Proceedings of the 19th Symposium on (2016).

---

This version of the text is more structured, clear, and professional, with improved coherence and flow.