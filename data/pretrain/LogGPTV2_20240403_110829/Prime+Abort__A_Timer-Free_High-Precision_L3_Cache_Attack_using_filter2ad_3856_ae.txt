in the context of PRIME+ABORT reveals that some are
effective against a wide variety of attacks including
PRIME+ABORT, whereas others are impractical or in-
effective against PRIME+ABORT. This leads us to ad-
vocate for the prioritization and further development of
certain approaches over others.
We ﬁrst examine classes of side-channel counter-
measures that are impractical or ineffective against
PRIME+ABORT and then move toward countermeasures
which are more effective and practical.
Timer-Based Countermeasures: A broad class of
countermeasures ineffective against PRIME+ABORT are
approaches that seek to limit the availability of precise
timers, either by injecting noise into timers to make them
less precise, or by restricting access to timers in general.
There are a wide variety of proposals in this vein, includ-
ing [15], [27], [31], [39], and various approaches which
Ge et al. classify as “Virtual Time” or “Black-Box Miti-
gation”. PRIME+ABORT should be completely immune
to all timing-related countermeasures.
Partitioning Time: Another class of countermeasures
that seems impractical against PRIME+ABORT is the
class Ge et al. refer to as Partitioning Time. These coun-
termeasures propose some form of “time-sliced exclu-
sive access” to shared hardware resources. This would
technically be effective against PRIME+ABORT, because
the attack is entirely dependent on running simultane-
ously with its victim process; any context switch causes a
transactional abort, so the PRIME+ABORT process must
be active in order to glean any information. However,
since PRIME+ABORT targets the LLC and can monitor
across cores, implementing this countermeasure against
PRIME+ABORT would require providing each user pro-
cess time-sliced exclusive access to the LLC. This would
mean that processes from different users could never run
simultaneously, even on different cores, which seems im-
practical.
Disabling TSX: A countermeasure which would os-
tensibly target PRIME+ABORT’s workings in particular
would be to disable TSX entirely, similarly to how hy-
perthreading has been disabled entirely in cloud environ-
ments such as Microsoft Azure [30]. While this is tech-
nically feasible—in fact, due to a hardware bug, Intel al-
ready disabled TSX in many Haswell CPUs through a
microcode update [17]—TSX’s growing prevalence (Ta-
ble 2), as well as its adoption by applications such as
glibc (pthreads) and the JVM [24], indicates its im-
portance and usefulness to the community. System ad-
ministrators are probably unlikely to take such a drastic
step.
Auditing: More practical but still not ideal is the class of
countermeasures Ge et al. refer to as Auditing, which is
based on behavioral analysis of running processes. Hard-
ware performance counters in the target systems can be
used to monitor LLC cache misses or miss rates, and thus
detect when a PRIME+PROBE- or FLUSH+RELOAD-
style attack is being conducted [1, 7, 46] (as any at-
tack from those families will introduce a large number
of cache misses—at least in the victim process). As
a PRIME+PROBE-style attack, PRIME+ABORT would
be just as vulnerable to these countermeasures as other
cache attacks are. However, any behavioral auditing
scheme is necessarily imperfect and subject to misclas-
64    26th USENIX Security Symposium
USENIX Association
siﬁcation errors in both directions. Furthermore, any au-
diting proposal targeting PRIME+ABORT which speciﬁ-
cally monitors TSX-related events, such as transactions
opened or transactions aborted, seems less likely to be
effective, as many benign programs which utilize TSX
generate a large number of both transactions and aborts,
just as PRIME+ABORT does. This makes it difﬁcult to
distinguish PRIME+ABORT from benign TSX programs
based on these statistics.
Constant-Time Techniques: The class of countermea-
sures referred to as “Constant-Time Techniques” in-
cludes a variety of approaches, some of which are likely
to be effective against PRIME+ABORT. These coun-
termeasures are generally software techniques to en-
sure important invariants are preserved in program ex-
ecution regardless of (secret) input data, with the aim
of mitigating side channels of various types. Some
“Constant-Time Techniques” merely ensure that critical
functions in a program always execute in constant time
regardless of secret data. This is insufﬁcient to defend
against PRIME+ABORT, as PRIME+ABORT can track
cache accesses without relying on any kind of timing
side-channel. However, other so-called “Constant-Time
Techniques” are actually more powerful than their name
suggests, and ensure that no data access or control-ﬂow
decision made by the program ever depends on any secret
data. This approach is effective against PRIME+ABORT,
as monitoring cache accesses (either for instructions or
data) would not reveal anything about the secret data be-
ing processed by the program.
Randomizing Hardware Operations: Another inter-
esting class of defenses proposes to insert noise into
hardware operations so that side-channel measurements
are more difﬁcult. Although PRIME+ABORT is immune
to such efforts related to timers, other proposals aim
to inject noise into other side-channel vectors, such as
cache accesses. For instance, RPcache [40] proposes
to randomize the mapping between memory address and
cache set, which would render PRIME+ABORT and other
cache attacks much more difﬁcult. Other proposals aim
to, for instance, randomize the cache replacement pol-
icy.
Important limitations of this kind of noise injec-
tion (noted by Ge et al.) include that it generally can
only make side-channel attacks more difﬁcult or less efﬁ-
cient (not completely impossible), and that higher levels
of mitigation generally come with higher performance
costs. However, these kinds of schemes seem to be
promising, providing relatively lightweight countermea-
sures against a quite general class of side-channel at-
tacks.
Cache Set Partitioning: Finally, a very promising class
of countermeasures proposes to partition cache sets be-
tween processes, or disallow a single process to use all
of the ways in any given LLC cache set. This would
be a powerful defense against PRIME+ABORT or any
other PRIME+PROBE variant. Some progress has been
made towards implementing these defenses, such as
CATalyst [28], which utilizes Intel’s “Cache Allocation
Technology” [18]; or “cache coloring” schemes such as
STEALTHMEM [26] or that proposed by [5]. One unde-
sirable side effect of this approach is that it would reduce
the maximum size of TSX transactions, hindering legit-
imate users of the hardware transactional memory func-
tionality. However, the technique is still promising as an
effective defense against a wide variety of cache attacks.
For more examples and details of this and other classes of
side-channel countermeasures, we again refer the reader
to Ge et al. [4].
Our work with PRIME+ABORT leads us to recom-
mend the further pursuit of those classes of countermea-
sures which are effective against all kinds of cache at-
tacks including PRIME+ABORT, speciﬁcally so-called
“Constant-Time Techniques” (in their strict form), ran-
domizing cache operations, or providing mechanisms for
partitioning cache sets between processes.
6 Disclosure
We disclosed this vulnerability to Intel on January 30,
2017, explaining the basic substance of the vulnerability
and offering more details. We also indicated our intent
to submit our research on the vulnerability to USENIX
Security 2017 in order to ensure Intel was alerted before
it became public. We did not receive a response.
7 Conclusion
PRIME+ABORT leverages Intel TSX primitives to yield
a high-precision, cross-core cache attack which does not
rely on timers, negating several important classes of de-
fenses. We have shown that leveraging TSX improves
the efﬁciency of algorithms for dynamically generating
eviction sets; that PRIME+ABORT has higher accuracy
and speed on Intel’s Skylake architecture than previous
L3 PRIME+PROBE attacks while producing fewer false
positives; and that PRIME+ABORT can be successfully
employed to recover secret keys from a T-table imple-
mentation of AES. Additionally, we presented new evi-
dence useful for all cache attacks regarding Intel’s Sky-
lake architecture: that it may differ from previous archi-
tectures in number of cache slices, and that it may use
different cache replacement policies for lines involved in
TSX transactions.
8 Acknowledgments
We thank our anonymous reviewers for their helpful ad-
vice and comments. We also especially thank Yuval
USENIX Association
26th USENIX Security Symposium    65
Yarom for his assistance in improving the quality of this
work.
This material is based in part upon work supported by
the National Science Foundation. Any opinions, ﬁnd-
ings, and conclusions or recommendations expressed in
this material are those of the author(s) and do not neces-
sarily reﬂect the views of the National Science Founda-
tion.
References
[1] CHIAPPETTA, M., SAVAS, E., AND YILMAZ, C. Real time de-
tection of cache-based side-channel attacks using hardware per-
formance counters. Applied Soft Computing 49 (2016), 1162–
1174.
[2] DENNING, P. J. Virtual memory. ACM Computing Surveys
(CSUR) 2, 3 (1970), 153–189.
[3] DICE, D., HARRIS, T., KOGAN, A., AND LEV, Y. The inﬂu-
ence of malloc placement on TSX hardware transactional mem-
ory, 2015. https://arxiv.org/pdf/1504.04640.pdf.
[4] GE, Q., YAROM, Y., COCK, D., AND HEISER, G. A sur-
vey of microarchitectural timing attacks and countermeasures on
contemporary hardware. Journal of Cryptographic Engineering
(2016).
[5] GODFREY, M. On the prevention of cache-based side-channel
attacks in a cloud environment. Master’s thesis, Queen’s Univer-
sity, 2013.
[6] GOOGLE. Google Chrome Native Client SDK release notes.
https://developer.chrome.com/native-client/sdk/release-notes.
[7] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S.
In Detection of
Flush+Flush: a fast and stealthy cache attack.
Intrusions and Malware & Vulnerability Assessment (DIMVA),
Proceedings of the 13th Conference on (2016).
[8] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache tem-
plate attacks: automating attacks on inclusive last-level caches.
In Proceedings of the 24th USENIX Security Symposium (2015).
[9] GUAN, L., LIN, J., LUO, B., JING, J., AND WANG, J. Protect-
ing private keys against memory disclosure attacks using hard-
ware transactional memory. In Security and Privacy (SP), 2015
IEEE Symposium on (2015).
[10] GUANCIALE, R., NEMATI, H., BAUMANN, C., AND DAM, M.
Cache storage channels: alias-driven attacks and veriﬁed counter-
measures. In Security and Privacy (SP), 2016 IEEE Symposium
on (2016).
[11] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache
games - bringing access-based cache attacks on AES to practice.
In Security and Privacy (SP), 2011 IEEE Symposium on (2011).
[12] HAMMARLUND, P., MARTINEZ, A. J., BAJWA, A. A., HILL,
D. L., HALLNOR, E., JIANG, H., DIXON, M., DERR, M.,
HUNSAKER, M., KUMAR, R., ET AL. Haswell: The fourth-
generation intel core processor. IEEE Micro 34, 2 (2014), 6–20.
[13] HAMMOND, L., WONG, V., CHEN, M., CARLSTROM, B. D.,
DAVIS, J. D., HERTZBERG, B., PRABHU, M. K., WIJAYA, H.,
KOZYRAKIS, C., AND OLUKOTUN, K. Transactional memory
coherence and consistency. In ACM SIGARCH Computer Archi-
tecture News (2004), vol. 32, IEEE Computer Society, p. 102.
[14] HERLIHY, M., AND MOSS, J. E. B. Transactional memory:
Architectural support for lock-free data structures, vol. 21. ACM,
1993.
[15] HU, W.-M. Reducing timing channels with fuzzy time. Journal
of Computer Security 1, 3-4 (1992), 233–254.
[16] ˙INCI, M. S., GULMEZOGLU, B., IRAZOQUI, G., EISENBARTH,
T., AND SUNAR, B. Cache attacks enable bulk key recovery
In Cryptographic Hardware and Embedded Sys-
on the cloud.
tems (CHES), Proceedings of the 18th International Conference
on (2016).
[17] INTEL. Desktop 4th generation Intel Core processor family, desk-
top Intel Pentium processor family, and desktop Intel Celeron
processor family: speciﬁcation update. Revision 036US, page
67.
[18] INTEL. Improving real-time performance by utilizing Cache Al-
location Technology. Tech. rep., Intel Corporation, 2015.
[19] INTEL.
Intel 64 and IA-32 architectures software developer’s
manual. September 2016.
[20] INTEL. ARK — your source for Intel product speciﬁcations, Jan
2017. https://ark.intel.com.
[21] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: a
shared cache attack that works across cores and deﬁes VM sand-
boxing - and its application to AES. In Security and Privacy (SP),
2015 IEEE Symposium on (2015).
[22] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. Systematic
reverse engineering of cache slice selection in Intel processors.
In Digital System Design (DSD), 2015 Euromicro Conference on
(2015).
[23] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Lucky 13 strikes back. In Information, Computer, and Commu-
nications Security, Proceedings of the 10th ACM Symposium on
(2015).
[24] JANG, Y., LEE, S., AND KIM, T. Breaking kernel address space
In Computer and Com-
layout randomization with Intel TSX.
muncications Security, Proceedings of the 23rd ACM Conference
on (2016).
[25] KAYAALP, M., ABU-GHAZALEH, N., PONOMAREV, D., AND
JALEEL, A. A high-resolution side-channel attack on last-level
cache. In Design Automation Conference (DAC), Proceedings of
the 53rd (2016).
[26] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTH-
MEM: system-level protection against cache-based side channel
attacks in the cloud. In Proceedings of the 21st USENIX Security
Symposium (2012).
[27] KOHLBRENNER, D., AND SHACHAM, H. Trusted browsers for
In Proceedings of the 25th USENIX Security
uncertain times.
Symposium (2016).
[28] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C.,
HEISER, G., AND LEE, R. B. CATalyst: Defeating last-
In High-
level cache side channel attacks in cloud computing.
Performance Computer Architecture (HPCA), IEEE Symposium
on (2016).
[29] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
In Security
Last-level cache side-channel attacks are practical.
and Privacy (SP), 2015 IEEE Symposium on (2015).
[30] MARSHALL, A., HOWARD, M., BUGHER, G., AND HARDEN,
B. Security best practices for developing Windows Azure appli-
cations. Tech. rep., Microsoft Corp., 2010.
[31] MARTIN, R., DEMME, J., AND SETHUMADHAVAN, S. Time-
rethinking timekeeping and performance monitoring
Warp:
In International
mechanisms to mitigate side-channel attacks.
Symposium on Computer Architecture (ISCA), Proceedings of the
39th Annual (2012).
[32] MAURICE, C., LE SCOUARNEC, N., NEUMANN, C., HEEN,
O., AND FRANCILLON, A. Reverse engineering Intel last-level
In Re-
cache complex addressing using performance counters.
search in Attacks, Intrusions, and Defenses (RAID), Proceedings
of the 18th Symposium on (2015).
66    26th USENIX Security Symposium
USENIX Association
[33] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND
KEROMYTIS, A. D. The spy in the sandbox: practical cache
attacks in javascript and their implications. In Proceedings of the
22nd ACM SIGSAC Conference on Computer and Communica-
tions Security (2015).
[34] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache attacks
In Proceedings of the
and countermeasures: the case of AES.
2006 Cryptographers’ Track at the RSA Conference on Topics in
Cryptology (2006).
[35] PERCIVAL, C. Cache missing for fun and proﬁt.
2005 (2005).
In BSDCan
[36] RAJWAR, R., AND GOODMAN, J. R. Transactional lock-free
In Proceedings of the 10th
execution of lock-based programs.
International Conference on Architectural Support for Program-
ming Languages and Operating Systems (2002).
[37] SHAVIT, N., AND TOUITOU, D. Software transactional memory.
Distributed Computing 10, 2 (1997), 99–116.
[38] TULLSEN, D. M., EGGERS, S. J., AND LEVY, H. M. Simulta-
neous multithreading: Maximizing on-chip parallelism. In ACM
SIGARCH Computer Architecture News (1995), vol. 23, ACM,
pp. 392–403.
[39] VATTIKONDA, B. C., DAS, S., AND SHACHAM, H. Eliminating
ﬁne-grained timers in Xen. In Cloud Computing Security Work-
shop (CCSW), Proceedings of the 3rd ACM (2011).
[40] WANG, Z., AND LEE, R. B. New cache designs for thwart-
ing software cache-based side channel attacks. In International
Symposium on Computer Architecture (ISCA), Proceedings of the
34th (2007).
[41] WANG, Z., QIAN, H., LI, J., AND CHEN, H. Using restricted
transactional memory to build a scalable in-memory database. In
European Conference on Computer Systems (EuroSys), Proceed-
ings of the Ninth (2014).
[42] YAROM, Y. Mastik: a micro-architectural side-channel toolkit.
http://cs.adelaide.edu.au/˜yval/Mastik. Ver-
sion 0.02.
[43] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: a high-
resolution, low-noise, L3 cache side-channel attack. In Proceed-
ings of the 23rd USENIX Security Symposium (2014).
[44] YAROM, Y., GE, Q., LIU, F., LEE, R. B., AND HEISER, G.
Mapping the Intel last-level cache, 2015. http://eprint.iacr.org.
[45] YEN, L., BOBBA, J., MARTY, M. R., MOORE, K. E., VOLOS,
H., HILL, M. D., SWIFT, M. M., AND WOOD, D. A. Logtm-se:
Decoupling hardware transactional memory from caches. In High
Performance Computer Architecture, 2007. HPCA 2007. IEEE
13th International Symposium on (2007), IEEE, pp. 261–272.
[46] ZHANG, T., ZHANG, Y., AND LEE, R. B. Cloudradar: a real-
time side-channel attack detection system in clouds. In Research
in Attacks, Intrusions, and Defenses (RAID), Proceedings of the
19th Symposium on (2016).
USENIX Association
26th USENIX Security Symposium    67