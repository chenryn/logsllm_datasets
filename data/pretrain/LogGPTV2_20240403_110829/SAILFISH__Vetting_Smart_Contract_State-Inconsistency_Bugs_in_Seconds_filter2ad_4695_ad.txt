or s2, or both are write operations. While deriving the data-flow
dependency predicate sdg(s,v,(cid:48)D(cid:48)), we consider both direct and
indirect dependencies of the variable v. We say that a statement
s operates on a variable v if either s is an assignment of variable
v or s contains an expression that is dependent on variable s.
SAILFISH identifies hazardous access statically by querying
the contract’s SDG, which is a path-condition agnostic data
structure. A non-empty query result indicates the existence of a
hazardous access. However, these accesses might not be feasible
in reality due to conflicting path conditions. The REFINER
module (Section VI) uses symbolic evaluation to prune such
infeasible accesses.
C. State inconsistency bug detection
As discussed in Section IV, a smart contract contains an
SI bug if there exists two schedules that result in a different
contract state, i.e., the values of the storage variables. Instead
of enumerating all possible schedules (per definition) statically
which is computationally infeasible, we use hazardous access
as a proxy to detect the root cause of SI. Two schedules can
result in different contract states if: (a) there exist two operations,
where at least one is a write access, on a common storage
variable, and (b) the relative order of such operations differ in two
schedules. The hazardous access captures the first (a) condition.
Now, in addition to hazardous access, SI bugs require to hold
certain conditions that can alter (b) the relative order of the
operations in the hazardous access pair. For reentrancy, SAILFISH
checks if a hazardous access pair is reachable in a reentrant
execution, as it can alter the execution order of the statements in a
hazardous access pair. To detect TOD, SAILFISH checks whether
an Ether transfer call is reachable from one of the statements in
a hazardous access pair. In this case, the relative execution order
of those statements determines the amount of Ether transfer.
Reentrancy detection. A malicious reentrancy query (Figure 8)
looks for a hazardous access pair (cid:104)s1,s2(cid:105) such that both s1 and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
167
deposits[id] = 0depositssplitsa.call.value (depo * splits[id] / 100)b.call.value (depo * (100 - splits[id]) / 100)WODDODD213splits[id] = splitrequire (split  0,reach(s1,e),
hazard(s1,s2,_),¬owner(s∗),
s(cid:63)∈{s1,s2}
:− entry(s0,_),succ(s0,s1),f(s1,s2),
extcall(s(cid:48),_),reach(s1,s(cid:63)),
s(cid:63)∈{s1,s2,s(cid:48)},f ∈{tod,reentry}
:− cex(_,s1),succ(s1,s2),f(s3,s4),
extcall(s(cid:48),_),reach(s2,s(cid:63)),
s(cid:63)∈{s3,s4,s(cid:48)},f ∈{tod,reentry}
Fig. 8: Rules for hazardous access and counter-examples.
s2 are reachable from an external call in the SDG, and executable
by an attacker.
To detect delegate-based reentrancy attacks, where the
delegatecall destination is tainted, we treat delegatecall in the
same way as the extcall in Figure 8. For untainted delegatecall
destinations, if the source code of the delegated contract is
available, SAILFISH constructs an SDG that combines both the
contracts. If neither the source, nor the address of the delegated
contract is available, SAILFISH treats delegatecall in the same
way as an unsafe external call. For create-based attacks, since the
source code of the child contract is a part of the parent contract,
SAILFISH builds the SDG by combining both the creator (parent)
and the created (child) contracts. Subsequently, SAILFISH
leverages the existing queries in Figure 8 on the combined SDG.
For untainted extcall, and delegatecall destinations, SAILFISH
performs inter-contract (Appendix V-A) analysis to build an
SDG combining both contracts.
Example 4 When run on the SDG in Figure 7 (Example 1), the
query returns the tuple (cid:104)3,5(cid:105), because they both operate on the
state variable splits, and belong to distinct public methods,
viz., splitFunds and updateSplit respectively.
TOD detection. As explained in Section II, TOD happens when
Ether transfer is affected by re-ordering transactions. Hence, a
hazardous pair (cid:104)s1,s2(cid:105) forms a TOD if the following conditions
hold: 1) an external call is reachable from either s1 or s2, and 2)
the amount of Ether sent by the external call is greater than zero.
SAILFISH supports all three TOD patterns supported by
SECURIFY [54]—(i) TOD Transfer specifies that the pre-
condition of an Ether transfer, e.g., a condition c guarding the
transfer, is influenced by transaction ordering, (ii) TOD Amount
indicates that the amount a of Ether transfer is dependent on trans-
action ordering, and (iii) TOD Receiver defines that the exter-
nal call destination e is influenced by the transaction ordering. To
detect these attacks, SAILFISH reasons if c, or a, or e is data-flow
dependent on some storage(v), and the statements corresponding
to those three are involved in forming a hazardous pair.
Counter-example generation. If a query over the SDG returns
⊥ (empty), then the contract is safe, because the SDG models the
state inconsistency in the contract. On the other hand, if the query
returns a list of pairs (cid:104)s1,s2(cid:105), SAILFISH performs a reﬁnement
step to determine if those pairs are indeed feasible. Since the
original output pairs (i.e., (cid:104)s1,s2(cid:105)) can not be directly consumed
by the symbolic execution engine, SAILFISH leverages the
cex-rule in Figure 8 to compute the minimum ICFG G that
contains statements s1, s2, and the relevant external call s(cid:48). In
the base case, cex-rule includes edges between entry points and
their successors that can transitively reach s1, s2, or s(cid:48). In the
inductive case, for every node s1 that is already in the graph, we
recursively include its successors that can also reach s1, s2, or s(cid:48).
Example 5 SAILFISH extracts the graph slice starting from
the root (not shown in Figure 7) of the SDG to node 5 . The
algorithm extracts the sub-graph (cid:104)root(cid:105) ∗−→ 2 → 4 → 5 →
3 , maps all the SDG nodes to the corresponding ICFG nodes,
and computes the final path slice which the REFINER runs on.
VI.
REFINER: SYMBOLIC EVALUATION WITH VALUE SUMMARY
As explained in Section V, if the EXPLORER module reports
an alarm, then there are two possibilities: either the contract
is indeed vulnerable, or the current counter-example (i.e.,
subgraph generated by the rules in Figure 8) is infeasible.
Thus, SAILFISH proceeds to refine the subgraph by leveraging
symbolic evaluation (Section VI-B). However, as we show later
in the evaluation, a naive symbolic evaluation whose storage
variables are completely unconstrained will raise several false
positives. To address this challenge, the REFINER module in
SAILFISH leverages a light-weight value summary analysis
(Section VI-A) that output the potential symbolic values of each
storage variable under different constraints, which will be used
as the pre-condition of the symbolic evaluation (Section VI-B).
A. Value summary analysis (VSA)
For each storage variable, the goal of value summary analysis
(VSA) is to compute its invariant that holds through the life-cycle
of a smart contract. While summary-based analysis has been
applied in many different applications before, there is no
off-the-shelf VSA for smart contracts that we could leverage for
the following reasons: (a) Precision. A value summary based
on abstract interpretation [49] that soundly computes the interval
for each storage variable scales well, but since it ignores the
path conditions under which the interval holds, it may lead to
weaker preconditions that are not sufficient to prune infeasible
paths. For the example in Figure 3, a naive and scalable
analysis will ignore the control flows, and conclude that the
summary of mutex is (cid:62) (either true or false), which will
be useless to the following symbolic evaluation, since mutex is
unconstrained. (b) Scalability. A path-by-path summary [34],
[20] that relies on symbolic execution first computes the pre-
condition prew, post-condition postw, and per-path summary
φw = prew∧postw for every path w. The overall summary φf
of the function f is the disjunction of individual path summaries,
i.e., φf =∨wφw. We identify the following barriers in adopting
this approach out of the box: (i) Generation: The approach is
computationally intensive due to well-known path explosion
problem. (ii) Application: The summary being the unification
of the constraints collected along all the paths, such a summary
is complex, which poses a significant challenge to the solver. In
fact, when we evaluated (Appendix I) our technique by plugging
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
168
Program P ::= (δ,π, (cid:126)F)
::= V →Expr
ValueEnv δ
PathEnv π ::= loc→ C
::= x | c | op((cid:126)e) | S((cid:126)e)
::= havoc(s) | l := e | s;s | r = f ((cid:126)e)
|
Expr e
Statement s
Function F ::= function f((cid:126)x) s returns y
c∈Constant S∈StructName
(if e s s) | (while e s)
x,y∈Variable
Fig. 9: Syntax of our simpliﬁed language.
in a similar path-by-path summary, the analysis timed out for
21.50% of the contracts due to the increased cost of the REFINE
phase. (iii) Usability: Lastly, such a summary is precise, yet
expensive. Computing a precise summary is beneficial only
when it is used sufficient times. Our aim is to build a usable
system that scales well in two dimensions—both to large
contracts, and a large number of contracts. As the dataset is
deduplicated, the scope of reusability is narrow. Therefore, an
expensive summary does not pay off well given our use case.
What we need in SAILFISH is a summarization technique that
has a small resource footprint, yet offers reasonable precision
for the specific problem domain, i.e., smart contracts.
Therefore, we design a domain-specific VSA (Figure 10)
to tackle both the challenges: (a) Precision: Unlike previous
scalable summary techniques that map each variable to an interval
whose path conditions are merged, we compensate for such pre-
cision loss at the merge points of the control flows using an idea
inspired by symbolic union [53]—our analysis stitches the branch
conditions to their corresponding symbolic variables at the merge
points. (b) Scalability: (i) Generation: This design choice, while
being more precise, could still suffer from path explosion. To mit-
igate this issue, our analysis first starts with a precise abstract do-
main that captures concrete values and their corresponding path
conditions, and then gradually sacriﬁces the precision in the con-
text of statements that are difficult, or expensive to reason about,
e.g., loops, return values of external calls, updates over nested
data structures, etc. (ii) Application: Lastly, we carefully design
the evaluation rules (If-rule in Figure 10) that selectively drop
path conditions at the confluence points—which leads to simpler
constraints at the cost of potential precision loss. However, our
evaluation of SAILFISH suggests that, indeed, our design of VSA
strikes a reasonable trade-off in the precision-scalability spectrum
in terms of both bug detection and analysis time.
To formalize our rules for VSA, we introduce a simplified
language in Figure 9. In particular, a contract P consists of (a)
a list of public functions (cid:126)F (private functions are inline), (b) a
value environment δ that maps variables or program identifiers
to concrete or symbolic values, and (c) a path environment π
that maps a location loc to its path constraint C. It is a boolean
value encoding the branch decisions taken to reach the current
state. Moreover, each function F consists of arguments, return
values, and a list of statements containing loops, branches, and
sequential statements, etc. Our expressions e include common
features in SOLIDITY such as storage access, struct initialization,
and arithmetic expressions (function invocation is handled within
a statement), etc. Furthermore, since all private functions are
inline, we assume that the syntax for calling an external function
with return variable r is r = f ((cid:126)e). Finally, we introduce a havoc
operator to make those variables in hard-to-analyze statements
unconstrained, e.g., havoc(s) changes each variable in s to (cid:62)
(completely unconstrained).
Figure 10 shows a representative subset of the inference
rules for computing the summary. A program state consists
of the value environment δ and the path condition π. A rule
(cid:104)e,δ,π(cid:105)(cid:32)(cid:104)v,δ(cid:48),π(cid:48)(cid:105) says that a successful execution of e in the
program state (cid:104)δ,π(cid:105) results in value v and the state (cid:104)δ(cid:48),π(cid:48)(cid:105).
Bootstrapping. The value summary procedure starts with the
“contract” rule that sequentially generates the value summary for
each public function Fi (all non-public methods are inline). The
output value environment δ(cid:48) contains the value summary for all
storage variables. More precisely, for each storage variable s, δ(cid:48)
maps it to a set of pairs (cid:104)π,v(cid:105) where v is the value of s under the
constraint π. Similarly, to generate the value summary for each
function Fi, SAILFISH applies the “Func” rule to visit every
statement si inside method Fi.
Expression. There are several rules to compute the rules for
different expressions e. In particular, if e is a constant c, the
value summary for e is c itself. If e is an argument of a public
function Fi whose values are completely under the control of
an attacker, the “Argument” rule will havoc e and assume that
its value can be any value of a particular type.
Helper functions. The dom(δ) returns all the keys of an
environment δ. The lhs(e) returns variables written by e.
Collections. For a variable of type Array or Map, our value
summary rules do not differentiate elements under different
indices or keys. In particular, for a variable a of type array,
the “store” rule performs a weak update by unioning all the
previous values stored in a with the new value e0. We omit the
rule for the map since it is similar to an array. Though the rule
is imprecise as it loses track of the values under different indices,
it summarizes possible values that are stored in a.
Assignment. The “assign” rule essentially keeps the value
summaries for all variables from the old value environment δ
except for mapping e0 to its new value e1.
External calls. Since all private and internal functions are
assumed to be inline, we assume all function invocations are
external. As we do not know how the attacker is going to interact
with the contract via external calls, we assume that it can return
arbitrary values. Here is the key intuition of the “ext" rule: for any
invocation to an external function, we havoc its return variable r.
Loop. Finally, since computing value summaries for variables
inside loop bodies are very expensive and hard to scale to
complex contracts, our “loop” rule simply havocs all variables
that are written in the loop bodies.
Conditional. Rule “if” employs a meta-function µ to merge
states from alternative execution paths.
{(cid:104)(cid:62),v1(cid:105)}
µ(b,v1,v2) =
{(cid:104)(cid:62),v2(cid:105)}
{(cid:104)b,v1(cid:105),(cid:104)¬b,v2(cid:105)} Otherwise
if b == true
if b == false
In particular, the rule first computes the symbolic expression v0
for the branch condition e0. If v0 is evaluated to true, then the
rule continues with the then branch e1 and computes its value
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
169
P = (δ,π, (cid:126)F ), (cid:104)F0,δ,π(cid:105)(cid:32)(cid:104)void,δ1,π1(cid:105)
...
(cid:104)Fn,δn,πn(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:48)(cid:105)
(cid:104)P,δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:48)(cid:105)
(cid:104)s,δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:48)(cid:105)
(cid:104)(function f ((cid:126)x) s returns y),δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:48)(cid:105)
(Func)
(Contract)
that ignores all path conditions, a valid path in SDG does not
always map to a feasible execution path in the original ICFG.
As a result, we have to symbolically evaluate G and confirm
whether π is indeed feasible.
(cid:104)c,δ,π(cid:105)(cid:32)(cid:104)c,δ,π(cid:105)
(Const)
isArgument(a) v = havoc(a)
(cid:104)a,δ,π(cid:105)(cid:32)(cid:104)v,δ(cid:48),π(cid:105)
(Argument)
(cid:104)e1,δ,π(cid:105)(cid:32)(cid:104)v1,δ,π(cid:105) ⊕∈{+,−,∗,/}
(cid:104)e2,δ,π(cid:105)(cid:32)(cid:104)v2,δ,π(cid:105) v = v1⊕v2
(cid:104)(e1⊕e2),δ,π(cid:105)(cid:32)(cid:104)v,δ,π(cid:105)
(cid:104)e0,δ,π(cid:105)(cid:32)(cid:104)v0,δ,π(cid:105)
(cid:104)(a[i] = e0),δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:105)
(Store)
(Binop)
δ(cid:48) ={y(cid:55)→ δ(y) | y∈ dom(δ)∧y(cid:54)= a} ∪ {a[0](cid:55)→ (δ(a[0])∪(cid:104)π,v0(cid:105))}
(cid:104)_,v(cid:105) = δ(a[0])
(cid:104)a[i],δ,π(cid:105)(cid:32)(cid:104)v,δ,π(cid:105)
(Load)
δ(cid:48) ={y(cid:55)→ δ(y) | y∈ dom(δ)∧y(cid:54)= e0} ∪ {e0 (cid:55)→(cid:104)π,e1(cid:105)∪δ(e0)}
(cid:104)(e0 = e1),δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:105)
(Assign)
δ(cid:48) ={y(cid:55)→ δ(y) | y∈ dom(δ)∧y(cid:54)= r} ∪ {r(cid:55)→(cid:104)π,havoc(r)(cid:105)}
(cid:104)r = f((cid:126)e),δ,π(cid:105)(cid:32)(cid:104)void,δ(cid:48),π(cid:105)
(Ext)
δ(cid:48) ={y(cid:55)→ δ(y) | y(cid:54)∈ lhs(e1)} ∪ {y(cid:55)→(cid:104)π(cid:48),havoc(y)(cid:105) | y∈ lhs(e1)}
(cid:104)e0,δ,π(cid:105)(cid:32)(cid:104)v0,δ,π(cid:105) π(cid:48) = π∧v0
(cid:104)(while e0 e1),δ,π(cid:105)(cid:32)(cid:104)v0,δ(cid:48),π∧¬v0(cid:105)
(cid:104)e0,δ,π(cid:105)(cid:32)(cid:104)v0,δ,π(cid:105)
b = isT rue(v0)