mapping and Salvaging 
starting 
from address 
into 28 chunks. A contiguous 
of PCM arrays from all banks, and thus, 
scheme (LLS) is shown in Figure 6. The whole PCM device 
space M is divided 
subset of 
these chunks, 
0, are used as the main 
PCM. The rest of memory space is the backup PCM. Each 
chunk consists 
allocating 
PCM accesses 
to the OS, but backup PCM is not. Initially 
address 
backup PCM at this stage, a small number of cell failures 
can be corrected 
line replacement 
banks. Only main PCM is visible 
the whole visible 
by line-level 
hardware. 
space is  in main PCM. Even though no chunk is  in 
of chunks to backup PCM does not bias 
(64B) ECP, or built-in 
to certain 
a  subset 
spare­
Eventually, 
with enough write cycles, 
there are more cell 
to healthy 
to failed lines will be automatically 
fail that cannot be rescued 
LLS which moves the last 
failures 
and a line will evenutally 
by ECP. The system then activates 
chunk from the main space to backup space such that failed 
lines are marked and re-mapped 
PCM. Future accesses 
redirected 
by hardware 
details 
(e.g., 
failed lines) are hidden from the OS and user applications. 
LLS implicitly 
at the device address 
does not restrict 
Instead, 
it supports 
binds backup PCM to higher address 
as we show next, LLS 
PA-DA address mapping. 
at runtime. 
any particular 
randomized 
the total number and the exact locations 
to the mapped lines. The failure 
PA-DA mappings 
lines in backup 
However, 
level. 
space 
of 
As more lines fail, the backup PCM space will eventually 
LLS then dynamically 
become insufficient. 
main 
resizes 
PCM and moves up to half of all chunks to backup PCM. 
In this way, main PCM is resized 
to 
accommodate 
and user applications 
physical 
space whose size is equal to main PCM's. 
At any given time, the OS 
more failed lines. 
in a step-down 
fashion 
address 
can only see and access a contiguous 
B. Mapping Failed Lines to the Backup PCM 
Figure  7 
illustrates 
mapping to smoothly resize PCM 
memory. LLS first constructs 
a global bitmap using one 
current 
line status: 
"0" represents 
a failed line. If a broken 
line and "1" represents 
bit per line to  indicate 
a healthy 
line is  in main PCM space, then it needs to be remapped. 
If a broken line is  in backup PCM, then it cannot be used 
to rescue other failed lines. The bitmap is organized 
as  a 
two dimensional 
7) in the bitmap 
records 
as follows. 
array. One row (Figure 
the status of a salvaging group that is constructed 
Suppose the PCM space is divided 
into 28 chunks. We 
2t lines from each chunk such that the bit 
group. In total, 
we have 8GB/64B/(l28x4)=256K 
Given a bit vector for a salvaging 
group has 2(8+t) bits. As an example, 
choose consecutive 
vector for a salvaging 
if we divide a 8GB PCM into 128 chunks, and choose 4 
lines from each chunk, then there are 128x4=512 lines in a 
salvaging 
groups. 
belong to main PCM when the system was first built. 
PCM is resized, 
moves 2t bits to backup PCM. The offset is recorded 
in 
initially 
a space split register  Rloe. 
Rloe 
is 512. After moving one chunk to backup PCM, Rloe is 
508(=512-4). 
the bit vector is split. 
In this example, 
group, all the bits 
As the 
Each PCM resizing 
LLS adopts in-group sequential 
mapping to map failed 
backup line, the second 
lines to backup PCM. That is, the first broken main PCM 
line is mapped to the first healthy 
broken main PCM line is mapped to the second healthy 
backup line; and so on. In main PCM space, we count from 
low to high address. 
direction, 
reverse 
during PCM resizing. 
PCM than in backup PCM, and there might be failed lines 
in backup PCM, the address 
Given a broken line x, LLS will: 
In backup space, we count in the 
i.e., from higher to lower addresses. 
in backup PCM to avoid data movement 
Since there are more lines in main 
mapping involves 
direction 
We use the 
reverse 
two subtasks. 
(I) Determine the broken line rank y in X's salvaging 
group. The broken line rank y is I plus the number 
broken lines in X's salvaging 
of preceding 
means that the broken line should be mapped to the Y­
th healthy 
line in backup PCM of the salvaging 
(2) Determine the mapped address W for X in backup PCM. 
group. Y 
group. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:31:13 UTC from IEEE Xplore.  Restrictions apply. 
225 
Figure 6. Splitting 
R,  > R 
,--j 
,-- I 
data in one chunk is 
a broken line PCM  , - - I 
I  { R } interleaved 
> main  \ 
backup PCM  backup 1 PCM 
In main PCM is  i 
in bank7 
in bankO 
in bank! 
}_ 
mappedtoa 
healthy line in 
in bankO 
in bank! 
in bank7 
in all banks 
PCM 
PCM 
PCM 
backup 
Initially, 
PCM 
total space into backup 
is used as main PCM  allocate 
With more failed lines, allocate up to half of 
,--
I 
the complete space  After the first line failure, 
one chunk into backup PCM 
the peM memory to main and backup space (To achieve graceful 
main R  main  
VA- TLB-+PA- 1  I" DA-"'------ + -{ r I 
'_jl-''CCCCii 11i 
bitmap:  -
mm  (i) one bit per line  i 
1: broken line : 
line : {  Main 5 
""" PCM """"  . 
.. A  global 
(ii) Bit value 0: healthy 
PCM 2 Chunks 
M.;" PCM """" ;" 
this direction 
_ 2t 
R - 2(s+t) 
lac  -
wear 
eve mg 
Grey blocks belong to one group. 
each chunk contains 
data from all banks). 
degradation, 
in this direction 
PCM 
Figure 7. A salvaging 
group contains 
28+t lines (i.e., 
2t line from each of 28 chunks). 
Dark blocks are broken lines. 
With the computed rank Y, if there is no broken line 
in backup PCM, then the Y -th healthy 
line is the w-th 
line in backup PCM. If there are broken lines between 
o and Y, then the mapped line might be different. 
Figure 7, the 2nd broken line is mapped to the 3rd line 
(i.e., 
count in reverse 
line) in backup PCM. Note we 
order in backup PCM. 
the 2nd healthy 
In 
In LLS, each line stores a status bit in the PCM array. 
removes 
bitmap. 
introduces 
in both the line cell 
is distributed 
no performance 
gets a device address (DA), it is sent directly 
This redundancy 
path. When the memory 
penalty for 
to healthy lines. If the line is broken, then the 
The line status information 
array and the centralized 
bitmap access from the critical 
controller 
to the PCM bank if it is the next access to be scheduled. 
This speculation 
accesses 
bank access fails based on the line status bit in the PCM 
array, which enables the bitmap access to compute the 
mapped address. 
The second PCM access is then sent to 
access the (healthy) 
LLS enables  speculation 
are healthy 
of chunks have  been  moved 
speculation 
bank accesses. 
when more than 30% 
to the backup PCM. When 
and disables  speculation 
mapped line. Due to speculation 
at early stages when most lines 
the bitmap is accessed 
is disabled, 
penalty, 
before all 
C. Dynamic PCM Resizing 
In this section, 
we describe 
when and how to perform 
is triggered 
by a write operation, 
moving chunks to backup PCM). In 
PCM resizing, 
(i.e., 
LLS, PCM resizing 
to main PCM or to backup PCM. When a write operation 
fails to save data in a line and the failure 
by ECP, then the line status bit (in the above bitmap) is 
set. When there are more broken lines in main PCM than 
healthy 
lines in backup PCM, PCM resizing 
cannot be rescued 
is triggered. 
either 
In most cases, PCM resizing 
is triggered 
by write opera­
group already 
tions to the main PCM. Assume one salvaging 
has 9 broken lines in main PCM and a new write operation 
fails in another main PCM line. If the newly broken line 
takes the rank 6, then broken lines with old ranks 6, 7, and 
8 need to change their ranks to 7, 8 and 9, respectively. 
The 
change requires 
the new broken line can take the 7th healthy 
space. As there are now 10 broken lines, 
enough healthy 
in this situation 
lines in backup PCM. An exception 
to pause the system to resize the PCM. 
in the backup space such that 
line in backup 
line shifting 
there may not be 
is raised 
In the other cases, writes to backup PCM may also fail. 
If there are still healthy 
the affected lines are shifted. 
lines left in backup PCM, then only 
Otherwise, 
the failed writes 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:31:13 UTC from IEEE Xplore.  Restrictions apply. 
226 
PCM resizing. 
will trigger 
to a broken line in main PCM. This write is redirected 
backup PCM. (2) Writes generated 
as line shifting 
from maintenance 
These writes include 
in backup PCM. 
(1) writes 
such 
to 
To perform PCM resizing, 
we need to consider 
its impact 
Rloe, 
address 
(DA) levels. 
cannot access any physical 
any data allocated 
(PA) and device address 
in the affected (moved) chunk 
by the space split register 
beyond the main PCM boundary after resizing. 
at the physical 
At the PA level, enforced 
the OS and user applications 
address 
this reason, 
needs to be re-allocated 
the OS needs to move a full chunk with data. For example, 
given a 8GB PCM divided into 128 chunks, the worst 
case data movement is 64MB (the chunk size). While it 
is relatively 
to device lifetime. 
capacity 
the chip lifetime. 
fail, then LLS only does 64 resize operations 
If a PCM chip is discarded 
to other locations. 
In the worst case, 
PCM resizing 
expensive, 
is done rarely relative 
during 
after 50% 
For 
[25], [23]. The authors 
of [16] later proposed 
paradox attacks 
enhancements 
To integrate 
to defend against 
with RBSG, LLS slightly 
in RBSG's first step. The PCM space is 
such attacks 
[17]. 
modifies address 
into two halves, 
the first half of PA  is randomized 
address level, a chunk is failure-free 
without any modification. 
randomization 
divided 
to the second half of RPA, and vice versa (Figure 
8(a».  A 
chunk in LLS is equal to or larger than a region in RBSG. 
At the physical 
such 
that RBSG can be performed 
the chunk is smaller than 64MB, 
a 32MB  chunk 
size after  dividing 
Performing 
overhead: 
control 
in [16]. 
RBSG on each 32MB region slightly 
we may  get 
4GB into 128 chunks. 
is very low as shown 
this overhead 
for example, 
However, 
increases 
logic. 
If 
When there is a need to resize PCM, LLS pauses execu­
it doubles the number of start/gap  registers 
and 
At the DA level, the space split register 
Rloe identifies 
OS pages 
However, 
what bits can be used to salvage failed main PCM lines. 
Thus, the corresponding 
device space should not contain 
any useful data. If a direct map is used between PA and 
DA, then it is straightforward 
- reallocating 
moves useful data out of the affected chunk at the DA 
level automatically. 
domized address 
is randomized 
useful data that cannot be expunged 
allocation. 
because the mapping is invisible 
to to ensure correctness 
correct 
of how LLS ensures 
integration 
of techniques 
address 
OS pages cannot clean up this chunk 
to the OS. Therefore, 
is necessary. 
operation 
such that the affected chunk may contain 
mapping is adopted, 
when wear leveling 
the PA-DA mapping 
Reallocating 
when we present 
the 
We describe 
by physical 
in Section 
with ran­
a way 
the details 
5. 
re­
with an interrupt. 
level, 
the OS needs 
the OS about the resizing 
tion and notifies 
After moving one chunk to the backup PCM, the system 
cleans up the data in the affected 
and device levels. 
At the physical 
to reallocate 
as discussed 
pages in the affected chunk to other locations 
in Section 
At the device level, 
chunk at both the physical 
address 
4. 
since we map the first half of PA to 
the second half of RPA, every line in the affected 
chunk is 
from the first half of PA. As shown in Figure 8(b), given a 
DA-7800, we first use RBSG-1 to find its RPA 
DA address 
address 
RPA-7200. 
randomization 
RPA-1100. 
Since PA-7200 is invisible 
DA-1500 must be an unused line. Therefore, 
relocate 
We then pick up PA-7200 and use the 
ofRPA-1100 is DA-1500. 
to the OS after PCM resizing, 
RIB to find PA-7200's 
The actual DA address 
we can safely 
function 
RPA address, 
DA-7800 to DA-1500. 
Given a PA after resizing, 
if its randomized 
If RPA is bigger than PCM size, then we perform an­
address 
RPA 
is within the  PCM size, then we follow the original 
RBSG 
mapping to access the DA address in the corresponding 
region. 
other round of randomization, 
1100, to find the mapped RPA address. 
rounds of randomization 
Our approach 
We need at most  two 
mapping. 
LLS and Start-Gap. 
due to our half-to-half 
integrates 
RIB(RIB(PA-1 
seamlessly 
OO»=RPA-
i.e., 
We also have developed 
a scheme for Security 
Re­
fresh [23] to overcome the non-contiguous 
problem in LLS. The main idea is to add a small map­
ping table to guide chip-level 
swapping 
to limited 
operations 
space, we do not expand on this topic. 
in a non-2n size memory space. Due 
Security 
memory space 
Refresh to perform 
VI. INTEGRATION OF W EAR LEV E L ING AND SALVAGING 
By providing 
a contiguous 
PCM space, LLS hides lower­
from the OS and user applications. 
with  wear 
(LLS) is integrated 
When 
based on 
the only support that LLS 
level line failures 
salvaging 
randomized  address  mappings, 
needs to provide 
contiguous 
before and after a PCM resizing. 
LLS supports 
space. The mapping should maintain 
We next elaborate 
on how 
is a one-to-one 
PA-DA mapping over the 
leveling 
Start-Gap. 
consistency 
A. Integrating LLS 
and Start-Gap 
to enhance security. 
RBSG divides 
A. Experimental 
Methodology 
VII. EVALUATION 
To defend against  repeated 
address attacks, 
called Region-Based 
a VarIatlOn 
Start-Gap 
Start-Gap, 
of the baseline 
(RBSG), was proposed 
the whole PCM into 64MB or smaller 
step of baseline 
algorithm 
ization 
still vulnerable 
is performed 
to specially 
Start-Gap, 
designed 
in each region independently. 
and performs 
the wear-leveling 
Address random­
in the first step of RBSG. RBSG is 
regions 
in the second 
In this paper, we evaluate 
our design with a two-fold 
attacks 