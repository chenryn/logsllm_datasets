```  
显然膨胀了100%，验证如下（1条记录有效，占用了15GB空间）：  
```  
postgres=# select pg_size_pretty(pg_relation_size('tbl_pos_1_prt_p1'));  
 pg_size_pretty   
----------------  
 15 GB  
(1 row)  
postgres=# select count(*) from tbl_pos_1_prt_p1;  
 count   
-------  
     1  
(1 row)  
```  
vacuum可以直接收缩（因为膨胀率大于gp_appendonly_compaction_threshold参数）：  
```  
postgres=# vacuum tbl_pos_1_prt_p1;  
VACUUM  
postgres=# select count(*) from tbl_pos_1_prt_p1;  
 count   
-------  
     1  
(1 row)  
postgres=# select pg_size_pretty(pg_relation_size('tbl_pos_1_prt_p1'));  
 pg_size_pretty   
----------------  
 40 bytes  
(1 row)  
```  
VACUUM后，只占用40字节。  
## 收缩已膨胀的AO表  
方法有三：  
1、执行VACUUM。（当膨胀率大于gp_appendonly_compaction_threshold参数时），为共享锁。  
2、执行VACUUM FULL。（不管gp_appendonly_compaction_threshold参数的设置，都会回收垃圾空间。），为DDL锁。  
3、执行重分布。（不管gp_appendonly_compaction_threshold参数，都会回收垃圾空间。），为DDL锁。  
```    
alter table  set with (reorganize=true) distributed randomly;    
或    
alter table  set with (reorganize=true) distributed by (,....)    
```    
set distribute可以回收索引的膨胀空间。set distribute 加载的锁与DDL锁类似，是排它锁。建议在没有业务的时候执行，不要堵塞业务。    
同时set distribute只要分布条件不变，就是在节点内完成的，不会涉及数据的重分布。    
建议的操作流程：    
```    
1 记录下表的分布列    
2 执行set distribute (REORGANIZE=true)    
如果是随机分布，则设置为随机分布    
```    
## 跑linux任务定时清理膨胀
结合本文提到的方法，取出膨胀的表实施vacuum或vacuum freeze或vacuum full.   
```
export PGHOST=$1
export PGPORT=$2
export PGDATABASE=$3
export PGUSER=$4
export PGPASSWORD=$5
for tbl in `psql -q -t -A -c "select quote_ident(schemaname)||'.'||quote_ident(tablename) from pg_tables"`
do 
psql <<EOF
set vacuum_freeze_min_age=0 ;
-- vacuum freeze $tbl ;
vacuum $tbl ;
EOF
done
```
## 参考  
http://greenplum.org/docs/510/admin_guide/managing/maintain.html  
```  
If the ratio of hidden rows to total rows in a segment file is less than a threshold value (10, by default),   
the segment file is not compacted.   
The threshold value can be configured with the gp_appendonly_compaction_threshold server configuration parameter.   
VACUUM FULL ignores the value of gp_appendonly_compaction_threshold and rewrites the segment file regardless of the ratio.  
You can use the __gp_aovisimap_compaction_info() function in the the gp_toolkit schema to investigate   
the effectiveness of a VACUUM operation on append-optimized tables.  
```  
[《如何检测、清理Greenplum膨胀、垃圾 - 阿里云HybridDB for PG最佳实践》](../201708/20170817_01.md)    
[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md) 
https://wiki.postgresql.org/wiki/Show_database_bloat  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")