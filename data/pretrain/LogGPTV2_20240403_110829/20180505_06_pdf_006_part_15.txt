not implemented
in PostgreSQL
Read Committed Not permitted Permitted Permitted
Repeatable Read Not permitted Not permitted Permitted but not
implemented in
PostgreSQL
Serializable Not permitted Not permitted Not permitted
PostgreSQL technically supports the use of any of the above four transaction isolation levels, but only three
can practically be used. The Read-Uncommitted isolation level serves as Read-Committed.
The way the Repeatable-Read isolation-level is implemented does not allow for phantom reads, which is
similar to the Serializable isolation-level. The primary difference between Repeatable-Read and Serializable is
that Serializable guarantees that the result of concurrent transactions will be precisely the same as if they
were executed serially, which is not always true for Repeatable-Reads.
Isolation Levels Supported by PostgreSQL
PostgreSQL supports the Read-Committed, Repeatable-Reads, and Serializable isolation levels. Read-
Committed is the default isolation level (similar to the default isolation level in the Oracle database).
• Read-Committed
The default PostgreSQL transaction isolation level. Preventing sessions from “seeing” data from
concurrent transactions until it is committed. Dirty reads are not permitted.
• Repeatable-Read
Queries can only see rows committed before the first query or DML statement was executed in the
transaction.
179
• Serializable
Provides the strictest transaction isolation level. The Serializable isolation level assures that the result
of the concurrent transactions will be the same as if they were executed serially. This is not always the
case for the Repeatable-Read isolation level.
Multiversion Concurrency Control (MVCC)
PostgreSQL implements a similar MVCC mechanism when compared to Oracle. In PostgreSQL, the MVCC
mechanism allows transactions to work with a consistent snapshot of data ignoring changes made by other
transactions which have not yet committed or rolled back. Each transaction “sees” a snapshot of accessed
data accurate to its execution start time, regardless of what other transactions are doing concurrently.
Setting Isolation Levels in Aurora PostgreSQL
Isolation levels can be configured at several levels:
• Session level.
• Transaction level.
• Instance level using Aurora “Parameter Groups”.
Example
Configure the isolation level for a specific transaction:
Demo=> SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
Demo=> SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
Demo=> SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
Configure the isolation level for a specific session:
Demo=> SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ COMMITTED;
Demo=> SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ;
Demo=> SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL REPEATABLE READ;
View the current isolation level:
Demo=> SELECT CURRENT_SETTING('TRANSACTION_ISOLATION'); -- Session
Demo=> SHOW DEFAULT_TRANSACTION_ISOLATION; -- Instance
Modifying instance-level parameters for Aurora PostgreSQL is done using “Parameter Groups”. For example
altering the parameter using the AWS Console or the AWS CLI.
default_transaction_isolation
For additional details:
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html#USER_WorkingWithParamGroups.Modifying
PostgreSQL Transaction Synopsis
SET TRANSACTION transaction_mode [...]
SET TRANSACTION SNAPSHOT snapshot_id
SET SESSION CHARACTERISTICS AS TRANSACTION transaction_mode [...]
where transaction_mode is one of:
ISOLATION LEVEL {
SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED
Co}m paring Transaction Isolation Levels Between Oracle and PostgreSQL:
READ WRITE | READ ONLY [ NOT ] DEFERRABLE
180
Database Feature Oracle PostgreSQL Comments
AutoCommit Off On Can be set to
OFF
MVCC Yes Yes
Default Isolation Level Read Committed Read Committed
Supported Isolation Levels Serializable Repeatable Reads
Read-only Serializable
Read-only
Configure Session Isolation Levels Yes Yes
Configure Transaction Isolation Levels Yes Yes
Nested Transaction Support Yes No Consider using
SAVEPOINT
instead
Support for Transaction SAVEPOINTs Yes Yes
181
Example
Read-Committed Isolation Level
TX1 TX2 Comment
select employee_id, salary select employee_id, salary Same results returned from
from EMPLOYEES from EMPLOYEES both sessions
where employee_id=100; where employee_id=100;
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 24000.00 100 | 24000.00
begin; begin; TX1 starts a transaction;
update employees set set transaction isolation performs an update.
salary=27000 where level read committed; TX2 starts a transaction
employee_id=100; with read-committed
isolation level
select employee_id, salary select employee_id, salary TX1 will “see” the modified
from EMPLOYEES from EMPLOYEES results (27000.00) while
where employee_id=100; where employee_id=100; TX2 “sees” the original data
(24000.00)
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 27000.00 100 | 24000.00
update employees set Waits as TX2 is blocked by
salary=29000 where TX1
employee_id=100;
Commit; TX1 issues a commit, and
the lock is released
Commit; TX2 issues a commit
select employee_id, salary select employee_id, salary Both queries return the
from EMPLOYEES from EMPLOYEES value - 29000.00
where employee_id=100; where employee_id=100;
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 29000.00 100 | 29000.00
182
Example
Serializable Isolation Level
TX1 TX2 Comment
select employee_id, salary select employee_id, salary Same results returned from
from EMPLOYEES from EMPLOYEES both sessions
where employee_id=100; where employee_id=100;
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 24000.00 100 | 24000.00
begin; begin; TX1 starts a transaction;
update employees set set transaction isolation performs an update.
salary=27000 where level serializable; TX2 starts a transaction
employee_id=100; with isolation level of read
committed
select employee_id, salary select employee_id, salary TX1 will “see” the modified
from EMPLOYEES from EMPLOYEES results (27000.00) while
where employee_id=100; where employee_id=100; TX2 “sees” the original data
(24000.00)
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 27000.00 100 | 24000.00
update employees set Waits as TX2 is blocked by
salary=29000 where TX1
employee_id=100;
Commit; TX1 issues a commit, and
the lock is released
ERROR: could not serialize TX2 received an error
access due to concurrent message
update
Commit; TX2 trying to issue a
but receives a
commit
ROLLBACK rollback message, the
transaction failed due to
the serializable isolation
level
select employee_id, salary select employee_id, salary Both queries will return the
from EMPLOYEES from EMPLOYEES data updated according to
where employee_id=100; where employee_id=100; TX1
employee_id | salary employee_id | salary
------------+---------- ------------+----------
100 | 27000.00 100 | 27000.00
For additional details:
https://www.postgresql.org/docs/9.6/static/tutorial-transactions.html
https://www.postgresql.org/docs/9.6/static/transaction-iso.html
https://www.postgresql.org/docs/9.6/static/sql-set-transaction.htm
183
Migrating from: Oracle Materialized Views
[Back to TOC]
Overview
Oracle Materialized Views (also known as MViews) are table segments where the contents are periodically
refreshed based on the results of a stored query. Oracle Materialized Views are defined with a specific user-
supplied query and can be manually or automatically refreshed based on user-supplied configuration. A
Materialized View will run its associated query and store the results as a table segment.
Oracle Materialized Views are especially useful for:
• Replication of data across multiple databases.
• Data warehouse use-cases.
• Performance enhancements by persistently storing the results of complex queries, as database tables.
Like ordinary views, Materialized Views are created with a query. The clause of the MView
SELECT FROM
query can reference other tables, views, and other Materialized Views. The source objects the Mview uses as
data sources are also called “master tables” (replication terminology) or “detail tables” (data warehouse
terminology).
Examples
1. Create a simple Materialized View named which executes a simple statement on the
mv1 SELECT
table:
employees
CREATE MATERIALIZED VIEW mv1 AS SELECT * FROM hr.employees;
2. Create a more complex Materialized View using a Database Link ( ) to obtain data from a table
remote
located in a remote database. This Materialized View also contains a subquery. The clause
FOR UPDATE
enables the Materialized View to be updated.
CREATE MATERIALIZED VIEW foreign_customers FOR UPDATE
AS SELECT * FROM sh.customers@remote cu
WHERE EXISTS (SELECT * FROM sh.countries@remote co
WHERE co.country_id = cu.country_id);
Immediate vs. Deferred Refresh
When creating Materialized Views, the option can be specified to instruct Oracle to
BUILD IMMEDIATE
immediately update the contents of the Materialized View by running the underlying query. This is different
from the update where the Materialized View is populated only on the first requested refresh.
deferred
184
Fast and Complete Refresh
1. – incremental data refresh. Only updates rows that have changed since the last refresh
REFRESH FAST
of the Materialized View instead of performing a complete refresh. This type of refresh fails if Materialized
View Logs have not been created.
2. - the table segment used by the Materialized View is truncated (data is cleared) and
COMPLETE
repopulated entirely by running the associated query.
Materialized View Logs
When creating Materialized Views, a Materialized View Log can be used to instruct Oracle to store any
changes performed by DML commands on the “master tables” that are used to refresh the Materialized View
thus providing faster Materialized View refreshes. Without Materialized View Logs, Oracle must re-execute
the query associated with the Materialized View each time (also known as a “complete refresh”). This process
is slower compared with using Materialized View Logs.
Materialized View Refresh Strategy
1. – refreshes the Materialized View upon any commit made on the underlying associated
ON COMMIT
tables.
2. – the refresh is initiated via a scheduled task or manually by the user.
ON DEMAND
Example
1. Create a Materialized View on two source tables – times and products. This approach enables
FAST
refresh of the Materialized View instead of the slower refresh.
COMPLETE
2. Create a new Materialized View named which will be refreshed inclemently (
sales_mv REFRESH
) each time changes in data are detected ( ) on one, or more, of the tables associated
FAST ON COMMIT
with the Materialized View query.
CREATE MATERIALIZED VIEW LOG ON times
WITH ROWID, SEQUENCE (time_id, calendar_year)
INCLUDING NEW VALUES;
CREATE MATERIALIZED VIEW LOG ON products
WITH ROWID, SEQUENCE (prod_id)
INCLUDING NEW VALUES;
CREATE MATERIALIZED VIEW sales_mv
BUILD IMMEDIATE
REFRESH FAST ON COMMIT
AS SELECT t.calendar_year, p.prod_id,
SUM(s.amount_sold) AS sum_sales
FROM times t, products p, sales s
WHERE t.time_id = s.time_id AND p.prod_id = s.prod_id
GROUP BY t.calendar_year, p.prod_id;
For additional details:
https://docs.oracle.com/database/121/DWHSG/basicmv.htm
https://docs.oracle.com/database/121/REPLN/repmview.htm#REPLN003
185
Migration to: PostgreSQL Materialized Views
[Back to TOC]
Overview
PostgreSQL supports Materialized Views with associated queries similar to the Oracle implementation. The
query associated with the Materialized View is executed and used to populate the Materialized View at the
time the command is issued. The PostgreSQL implementation of Materialized Views has three
REFRESH
primary limitations when compared to Oracle Materialized Views:
1. PostgreSQL Materialized Views may be refreshed either manually or using a job running the
REFRESH
command. Automatic refresh of Materialized Views require the creation of a
MATERIALIZED VIEW
trigger.
2. PostgreSQL Materialized Views only support complete (full) refresh.
3. DML on Materialized Views is not supported.
Examples
1. Create a materialized view named using the sales table as the source for the
sales_summary
Materialized View:
CREATE MATERIALIZED VIEW sales_summary AS
SELECT
seller_no,
sale_date,
sum(sale_amt)::numeric(10,2) as sales_amt
FROM sales
WHERE sale_date  CREATE OR REPLACE TRIGGER PROJECTS_SET_NULL
AFTER DELETE OR UPDATE OF PROJECTNO ON PROJECTS
FOR EACH ROW
BEGIN
IF UPDATING AND :OLD.PROJECTNO != :NEW.PROJECTNO OR DELETING THEN
UPDATE EMP SET EMP.PROJECTNO = NULL
WHERE EMP.PROJECTNO = :OLD.PROJECTNO;
END IF;
END;
/
Trigger created.
SQL> DELETE FROM PROJECTS WHERE PROJECTNO=123;
SQL> SELECT PROJECTNO FROM EMP WHERE PROJECTNO=123;
PROJECTNO
----------
NULL
188
2. Create a SYSTEM/Schema trigger on a table. The trigger fires if a DDL command is executed for an object in the
DROP
schema and prevents dropping of the object while raising an application error.
HR
SQL> CREATE OR REPLACE TRIGGER PREVENT_DROP_TRIGGER
BEFORE DROP ON HR.SCHEMA
BEGIN
RAISE_APPLICATION_ERROR (
num => -20000,
msg => 'Cannot drop object');
END;
/
Trigger created.
SQL> DROP TABLE HR.EMP
ERROR at line 1:
ORA-00604: error occurred at recursive SQL level 1
ORA-20000: Cannot drop object
ORA-06512: at line 2
For additional details:
https://docs.oracle.com/database/121/LNPLS/create_trigger.htm#LNPLS01374
189
Migration to: PostgreSQL Trigger Procedure
[Back to TOC]
Overview
PostgreSQL triggers can be associated with a specific table, view, or foreign table and will invoke execution of
a function when a certain events occur. DML triggers in PostgreSQL share much of the functionality that exists
in Oracle triggers.
1. DML triggers (triggers that fire based on table related events such as DML).
2. Event triggers (triggers that fire after certain database events such as running DDL commands).
Unlike Oracle triggers, PostgreSQL triggers must call a function and do not support anonymous blocks of