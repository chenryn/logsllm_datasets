4: e = a
5: b = 2
6: f = c
Sa
{a, b}
{a, b, c}
{a, b, c}
{a, b, c, e}
{a, c, e}
{a, c, e, f}
Sb
{a, b}
{a, b, c}
{a, b, c}
{a, b, c, e}
case to lower case or vice versa. Semantically, a converted
string is equivalent to the original string. Therefore, we have to
extend the basic algorithm to maintain the equivalence relation
between the converted and original strings. We hook the string
handling functions in Windows and directly call DoAssign
to make the duplicate value association between the input and
the output.
Discussion. This algorithm captures how normal program exe-
cution operates on duplicate values, through direct assignments
and restricted string conversions. Thus, it is able to correctly
identify duplicate values in regular programs. However, a
program may be obfuscated to evade our analysis. As an
example, a direct assignment can be replaced by a sequence
of arithmetic or logic operations. As we apply this algorithm
to benign kernel code analysis, this limitation does not apply.
Moreover, as a dynamic analysis technique, the identiﬁed
duplicates depend on the program execution. In our setting, we
trace the kernel execution from the start of the test program
to a designated test point, so the creation and propagation of
the semantic values associated with the test program should
be completely captured and analyzed.
D. Testing Procedure
Testing Cycle. As depicted in Figure 2, a testing cycle
proceeds as follows:
1)
2)
3)
4)
5)
In the virtualization mode, start the virtual machine
and boot up the guest system.
Switch to emulation mode, run the test program and
start to trace kernel execution for duplicate value
analysis.
At a predetermined test point, pause the virtual ma-
chine and save the current VM state; in the meantime
consult the semantics extractor to locate important se-
mantic values and query the duplicate value analyzer
to compute duplicate value sets; and switch to the
virtualization mode.
Choose to mutate a single value or a set of duplicate
values, and resume the virtual machine;
The test program ﬁnishes normally or prematurely or
system crashes; revert to the saved VM state and go
the step 4 to fuzz another semantic value or another
duplicate value set.
The testing cycle shown above is done for one test point.
In reality, we deﬁne multiple test points to mutate different
sets of semantic values. Therefore, this testing cycle will be
conducted multiple times, one for each test point.
Sc
Sd
Se
Sf
{a, b, c}
{a, b, c}
{a, b, c, e}
{a, c, e}
{a, c, e, f}
{a, b, c, e}
{b, d, e}
{a, c, e, f}
{a, c, e, f}
TABLE II.
TEST CASES AND TEST POINTS
No Test Case
1
2
3
4
5
6
Start test program
Test Point 1: mutate process&thread related values
Run other test cases
Load a user DLL
Test Point 2: mutate DLL related values
Call a function in the DLL repeatedly
Unload the DLL
Load a kernel module
Test Point 3: mutate kernel module values
Send IO requests to the kernel module
Unload the kernel module
Open two ﬁles for read and write
Test Point 4: mutate ﬁle values
Read and write these two ﬁles repeatedly
close these ﬁles
Open a TCP connection
Test Point 5: mutate values related to this connection
Send and receive data through this connection
Close this connection
Open a registry key (Windows only)
Test Point 6: Mutate registry key related values
Read and write this registry key repeatedly
Close this key
Test Program. We design our test program to exercise basic
and common operations that are commonly performed by
programs and that are typically exhibited by malware. More
speciﬁcally, our test program includes the following test cases
and identify appropriate test points, as shown in Table II.
We can see that
this test program exercises process and
thread management, DLL load and unload, kernel module
management, ﬁle operations, network operations, and registry
key accesses (for Windows only). Totally six test points are
deﬁned at precise moments, when the virtual machine will be
paused and selected semantic values will be mutated. These
test points capture the moment when certain kind of values
have been created and will be used for later operations. For
example, for ﬁle related semantic values, the test point is
deﬁned after the ﬁles are open and before read and write
operations are performed on these ﬁles.
As a preliminary step to conducting the network related
tests, we launch a light weight HTTP server on the guest OS.
This is important because our fuzz testing repeatedly reverts
back to a previous VM state. If the server program is on a
different host, the connection states for the client and the server
will become out-of-sync once the VM is reverted back to an
earlier state.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2. Fuzz Testing Cycle. A gray node indicates the virtual machine at that moment is running in the emulation mode, whereas a white node stands for the
virtualization mode.
TABLE III.
VALUE MUTATION RULES
Type
ID
Size/Offset
String
increment or
Mutation Rules
0, copy from another ID,
decrement by a small constant
0, increment or decrement by a small con-
stant
“”, copy from another string, mutate one
character
The identiﬁed test points are tested individually. For in-
stance, when we conduct fuzzing on the ﬁrst test point, the
other test points are simply skipped. Here, though the test
points are skipped the test program continues to perform all
the operations listed in Table II during all the tests. This
is important since a change in a test point could have an
implication in multiple functionalities. For instance, a change
to a thread related semantic values might result in dropping
of the connection that thread has made. Also, the order of the
test cases listed in Table II does not reﬂect the actual order
of our fuzz testing. Suppose that we are conducting test case
5 for the network connection. We actually move this test case
earlier, immediately after the test program starts, such that we
can observe if the mutation of network-related semantic values
will affect the execution of the other test cases.
Mutation Rules. To avoid system instability due to mutation,
the changes have to satisfy the type constraint of the original
value. In other words, the mutation rules depend on the type of
the semantic value to be mutated. In contrast, other fuzz testing
projects (such as in [3], [18]) aim to randomly fuzz certain
data values to identify their value constraints or to explore the
program space.
We list the mutation rules in Table III. For example, for
an ID (e.g., pid, tid), we consider 0 as an input, because 0 is
often reserved for system process and thread. Similarly, for a
string, we use an empty string as an input since the OS may
have special handling for empty strings, such as ignoring and
skipping an object if its name is empty. Attacker may exploit
this feature to hide certain objects.
IV. EMPIRICAL STUDY
We perform our empirical study on two popular operating
systems, which are Windows XP with service pack 3 (XPSP3)
and Ubuntu 10.04 with Linux kernel version 2.6.32-25 (Linux).
We conducted our experiments on a Pentium Core i7 with
3GHz and 4GB RAM. The host operating system is 32-bit
Ubuntu 10.04 with kernel version 2.6.32-38. We analyzed both
operating systems individually as a virtual machine running
inside QEMU. 512MB RAM was allocated for the virtual
machine.
We compiled two lists of semantic ﬁelds, one for Windows
XP (Table IV) and the other for Linux (Table V). Forensic tools
(such as Volatility [15], a comprehensive memory forensic
framework) query these semantic ﬁelds to extract semantic
information from a memory dump. Although these lists are
not nearly complete, we believe that they provide a fairly good
coverage on important semantic ﬁelds.
Using the value mutation rules listed in Table III, we
designed 3 mutation tests (including 1 whole-set mutation)
for each ﬁeld in Table IV and Table V resulting in a total
of 258 test cases. The test cases were distributed across 12
test points (6 test points in each of the 2 OSs), with average
trace gathering time of approximately 15 minutes per test
point. Depending on the test point in question and the size
of trace, redundancy identiﬁcation and semantic value location
took between 7 min (best case) to 32 min (worst case) with 92
percent of the time consumed during redundancy identiﬁcation.
Each test case execution involving VM restoration and fuzzing
25 to 60 seconds. After fuzzing, the execution continued for
3 minutes as a part of behavior assessment. Additionally, we
wrote a rootkit to examine the effects of semantic mutations
on the OS information retrieval tools. In one shot, we mutated
the primitives listed in Table VIII and observed the impact on
the system.
Furthermore, within the guest OS, we run administration
tools (such as netstat for both Windows and Linux, Task
Manager and process explorer [19] for Windows, and ps,
pmap, top, etc. for Linux, and so on), to observe the effects
of these mutation tests within the guest OS.
The key component of MOSS is Duplicate Semantic Value
Analysis, which in theory is independent of the OS. Therefore,
with the kernel data structure information for the key kernel
data structures, careful
identiﬁcation of test points and a
corresponding test program one can perform single-ﬁeld and
duplicate-ﬁeld mutations on any guest OS to identify the
semantic ﬁelds susceptible to mutation. In this paper, as a
proof-of-concept, we consider Windows XP SP3 and Linux
2.6.32-25 to perform the empirical study. However, it is often
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:29 UTC from IEEE Xplore.  Restrictions apply. 
Start VM •Start test program •Trace kernel execution •Pause VM •Save VM state •Compute duplicate values •Locate semantic values •Mutate a value or a value set •Resume VM •Observe VM execution •Revert to the saved state  TABLE IV.
SEMANTIC FIELDS SELECTED FOR WINDOWS XP SP3 AND
TABLE V.
SEMANTIC FIELDS SELECTED FOR LINUX AND THEIR
THEIR MUTABILITY
Category Semantic Field
Process
EPROCESS.UniqueProcessId
EPROCESS.InheritedFromUniqueProcessId
EPROCESS.ImageFileName
EPROCESS.CreateTime
EPROCESS.ExitStatus
EPROCESS.ActiveThreads
EPROCESS.GrantedAccess
EPROCESS.Token
EPROCESS.ObjectTable.HandleCount
EPROCESS.Flags
EPROCESS.ObjectHeader.ObjectType
EPROCESS.PoolHeader.PoolTag
EPROCESS.PoolHeader.BlockSize
ETHREAD.PoolHeader.PoolTag
ETHREAD.PoolHeader.BlockSize
ETHREAD.ObjectHeader.ObjectType
ETHREAD.Cid.UniqueProcess
ETHREAD.Cid.UniqueThread
ETHREAD.StartAddress
LDR DATA TABLE ENTRY.DllBase
LDR DATA TABLE ENTRY.EntryPoint
LDR DATA TABLE ENTRY.FullDllName
LDR DATA TABLE ENTRY.BaseDllName
LDR DATA TABLE ENTRY.Flags
LDR DATA TABLE ENTRY.LoadCount
LDR DATA TABLE ENTRY.PatchInfo
CM KEY NODE.Name
CM KEY NODE.NameLength
CM KEY NODE.LastWriteTime
CM KEY NODE.SubkeyCounts
CM KEY NODE.Flags
CM KEY NODE.Signature
CM KEY NODE.Parent
CM KEY NODE.Security
TCPT OBJECT.RemoteIpAddress
TCPT OBJECT.RemotePort
TCPT OBJECT.LocalIpAddress
TCPT OBJECT.LocalPort
TCPT OBJECT.Pid
TCP LISTENER.AddressFamily
TCP LISTENER.Owner
TCP LISTENER.CreateTime
TCP ENDPOINT.State
POOL HEADER.PoolTag
POOL HEADER.BlockSize
Mutability
X
X
X
X
X
p
X
7
X
p
X
X
X
X
X
X
7
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
7
7
7
7
7
7
X
X
X
X
X
X
Category
Task
File
Module
Network
MUTABILITY
Semantic Field
task struct.state
task struct.ﬂags
task struct.pid
task struct.fds
task struct.comm
task struct.start time
task struct.stime
task struct.exit code
task struct.ﬁles.fd[i].f owner
task struct.ﬁles.fd[i].f mode
task struct.ﬁles.fd[i].f pos
dentry.d name
dentry.d iname
dentry.d ﬂags
dentry.d time
inode.i uid
inode.i gid
inode.i size
inode.i atime
inode.i ctime
inode.i mtime
module.name
module.num syms
module.state
module.core size
module.core text size
module.num kp
vm area start.vm start
vm area start.vm end
vm area start.vm ﬂags
inet sock.saddr
inet sock.daddr
inet sock.sport
inet sock.dport
sock common.skc family
sock common.skc refcount
sock common.skc state
sock.sk protocol
sock.sk ﬂags
sock.sk type
sock.sk err
Mutability
X
X
p
7
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
7
7
X
7
7
7
7
X
X
X
X
X
X
X
Thread
DLL &
Kernel
Module
Registry
Key
Network
Memory
Pool
the case that a new version of an OS retains a signiﬁcant
part of the previous version. Therefore, it is possible that
the mutability results tabulated in Table IV and Table V are
applicable to other versions of Windows and Linux OSes,
respectively.
A. Single Field Mutation