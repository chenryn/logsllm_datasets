After observing the difference between a normal instance of notepad.exe 
and one that has been ghosted, we’ve identified a few indicators:
• 
There will be a mismatch between the paths in the ImagePathName inside 
the ProcessParameters member of the process’s PEB and the ImageFileName 
in its EPROCESS structure.
• 
The process structure’s image file pointer will be null and its Minimal 
and PicoCreated fields will be false.
• 
The filename may be atypical (this isn’t a requirement, however, and 
the user can control this value).
When the EDR driver receives the new process-creation structure 
from its process-creation callback, it will have access to the key informa-
tion needed to build a detection. Namely, in the case of process ghost-
ing, it can use ImageFileName, FileObject, and IsSubsystemProcess to identify 
potentially ghosted processes. Listing 3-25 shows what this driver logic 
could look like.
void ProcessCreationNotificationCallback(
PEPROCESS pProcess,
HANDLE hPid,
PPS_CREATE_NOTIFY_INFO psNotifyInfo)
{
if (pNotifyInfo)
{
1 if (!pNotifyInfo->FileObject && !pNotifyInfo->IsSubsystemProcess)
{
PUNICODE_STRING pPebImage = NULL;
PUNICODE_STRING pPebImageNtPath = NULL;
PUNICODE_STRING pProcessImageNtPath = NULL;
2 GetPebImagePath(pProcess, pPebImage);
CovertPathToNt(pPebImage, pPebImageNtPath);
3 CovertPathToNt(psNotifyInfo->ImageFileName, pProcessImageNtPath);
if (RtlCompareUnicodeString(pPebImageNtPath, pProcessImageNtPath, TRUE))
{
 --snip--
}
  }
}
--snip--
}
Listing 3-25: Detecting ghosted processes with the driver
We first check whether the file pointer is null even though the process 
being created isn’t a subsystem process 1, meaning it was likely created 
with the legacy process-creation API. Next, we use two mock helper func-
tions 2 to return the process image path from the PEB and convert it to 
Evading EDR (Early Access) © 2023 by Matt Hand
58   Chapter 3
the NT path. We then repeat this process using the image filename from 
the process structure for the newly created process 3. After that, we com-
pare the image paths in the PEB and process structure. If they’re not equal, 
we’ve likely found a suspicious process, and it’s time for the EDR to take 
some action.
A Process Injection Case Study: Fork&run
Over time, shifts in attacker tradecraft have affected the importance, to 
EDR vendors, of detecting suspicious process-creation events. After gaining 
access to a target system, attackers may leverage any number of command-
and-control agents to perform their post-exploitation activities. Each mal-
ware agent’s developers must decide how to handle communications with 
the agent so that they can execute commands on the infected system. While 
there are numerous approaches to tackling this problem, the most common 
architecture is referred to as fork&run.
Fork&run works by spawning a sacrificial process into which the pri-
mary agent process injects its post-exploitation tasking, allowing the task to 
execute independently of the agent. This comes with the advantage of sta-
bility; if a post-exploitation task running inside the primary agent process 
has an unhandled exception or fault, it could cause the agent to exit. As a 
result, the attacker could lose access to the environment.
The architecture also streamlines the agent’s design. By providing a 
host process and a means of injecting its post-exploitation capabilities, 
the developer makes it easier to integrate new features into the agent. 
Additionally, by keeping post-exploitation tasking contained in another 
process, the agent doesn’t need to worry too much about cleanup and can 
instead terminate the sacrificial process altogether.
Leveraging fork&run in an agent is so simple that many operators 
might not even realize they’re using it. One of the most popular agents that 
makes heavy use of fork&run is Cobalt Strike’s Beacon. Using Beacon, the 
attacker can specify a sacrificial process, either through their Malleable 
profile or through Beacon’s integrated commands, into which they can 
inject their post-exploitation capabilities. Once the target is set, Beacon will 
spawn this sacrificial process and inject its code whenever a post-exploita-
tion job that requires fork&run is queued. The sacrificial process is respon-
sible for running the job and returning output before exiting.
However, this architecture poses a large risk to operational security. 
Attackers now have to evade so many detections that leveraging the built-
in features of an agent like Beacon often isn’t viable. Instead, many teams 
now use their agent only as a method for injecting their post-exploitation 
tooling code and maintaining access to the environment. An example of 
this trend is the rise of offensive tooling written in C# and primarily lever-
aged through Beacon’s execute-assembly, a way to execute .NET assemblies in 
memory that makes use of fork&run under the hood.
Because of this shift in tradecraft, EDRs highly scrutinize process 
creation from numerous angles, ranging from the relative frequency of 
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   59
the parent–child relationship in the environment to whether the process’s 
image is a .NET assembly. Yet, as EDR vendors became better at detecting 
the “create a process and inject into it” pattern, attackers have begun to 
consider spawning a new process to be highly risky and have looked for ways 
to avoid doing it.
One of the biggest challenges for EDR vendors came in version 4.1 
of Cobalt Strike, which introduced Beacon Object Files (BOFs). BOFs are 
small programs written in C that are meant to be run in the agent process, 
avoiding fork&run entirely. Capability developers could continue to use 
their existing development process but leverage this new architecture to 
achieve the same results in a safer manner.
If attackers remove the artifacts from fork&run, EDR vendors must rely 
on other pieces of telemetry for their detections. Fortunately for vendors, 
BOFs only remove the process-creation and injection telemetry related to 
the sacrificial process creation. They don’t do anything to hide the post-
exploitation tooling’s artifacts, such as network traffic, filesystem interac-
tions, or API calls. This means that, while BOFs do make detection more 
difficult, they are not a silver bullet.
Conclusion
Monitoring the creation of new processes and threads is an immensely 
important capability for any EDR. It facilitates the mapping of parent–child 
relationships, the investigation of suspect processes prior to their execution, 
and the identification of remote thread creation. Although Windows pro-
vides other ways to obtain this information, process- and thread-creation 
callback routines inside the EDR’s driver are by far the most common. In 
addition to having a great deal of visibility into activity on the system, these 
callbacks are challenging to evade, relying on gaps in coverage and blind 
spots rather than fundamental flaws in the underlying technology.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
Process and thread events are only the tip 
of the iceberg when it comes to monitoring 
system activity with callback routines. On 
Windows, developers can also capture requests 
for handles to objects, which provide valuable telem-
etry related to adversary activity.
Objects are a way to abstract resources such as files, processes, tokens, 
and registry keys. A centralized broker, aptly named the object manager, han-
dles tasks like overseeing the creation and destruction of objects, keeping 
track of resource assignments, and managing an object’s lifetime. In addi-
tion, the object manager notifies registered callbacks when code requests 
handles to processes, threads, and desktop objects. EDRs find these notifi-
cations useful because many attacker techniques, from credential dumping 
to remote process injection, involve opening such handles.
In this chapter, we explore one function of the object manager: its abil-
ity to notify drivers when certain types of object-related actions occur on 
the system. Then, of course, we discuss how attackers can evade these detec-
tion activities.
4
OBJEC T NOT IF IC AT ION S
Evading EDR (Early Access) © 2023 by Matt Hand
62   Chapter 4
How Object Notifications Work
As for all the other notification types, EDRs can register an object-callback 
routine using a single function, in this case, nt!ObRegisterCallbacks(). Let’s 
take a look at this function to see how it works and then practice imple-
menting an object-callback routine.
Registering a New Callback
At first glance, the registration function seems simple, requiring only two 
pointers as parameters: the CallbackRegistration parameter, which speci-
fies the callback routine itself and other registration information, and the 
RegistrationHandle, which receives a value passed when the driver wishes to 
unregister the callback routine.
Despite the function’s simple definition, the structure passed in via 
the CallbackRegistration parameter is anything but. Listing 4-1 shows its 
definition.
typedef struct _OB_CALLBACK_REGISTRATION {
  USHORT  
Version;
  USHORT  
OperationRegistrationCount;
  UNICODE_STRING  
Altitude;
  PVOID  
RegistrationContext;
  OB_OPERATION_REGISTRATION *OperationRegistration;
} OB_CALLBACK_REGISTRATION, *POB_CALLBACK_REGISTRATION;
Listing 4-1: The OB_CALLBACK_REGISTRATION structure definition
You’ll find some of these values to be fairly straightforward. The version 
of the object-callback registration will always be OB_FLT_REGISTRATION_VERSION 
(0x0100). The OperationRegistrationCount member is the number of callback 
registration structures passed in the OperationRegistration member, and the 
RegistrationContext is some value passed as is to the callback routines when-
ever they are invoked and is set to null more often than not.
The Altitude member is a string indicating the order in which the call-
back routines should be invoked. A pre-operation routine with a higher alti-
tude will run earlier and a post-operation routine with a higher altitude will 
execute later. You can set this value to anything so long as the value isn’t 
in use by another driver’s routines. Thankfully, Microsoft allows the use of 
decimal numbers, rather than merely whole numbers, reducing the overall 
chances of altitude collisions.
This registration function centers on its OperationRegistration parameter 
and the array of registration structures it points to. This structure’s defini-
tion is shown in Listing 4-2. Each structure in this array specifies whether the 
function is registering a pre-operation or post-operation callback routine.
typedef struct _OB_OPERATION_REGISTRATION {
  POBJECT_TYPE 
*ObjectType;
  OB_OPERATION 
Operations;
  POB_PRE_OPERATION_CALLBACK PreOperation;
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   63
  POB_POST_OPERATION_CALLBACK PostOperation;
} OB_OPERATION_REGISTRATION, *POB_OPERATION_REGISTRATION;
Listing 4-2: The OB_OPERATION_REGISTRATION structure definition
Table 4-1 describes each member and its purpose. If you’re curious 
about what exactly a driver is monitoring, these structures hold the bulk of 
the information in which you’ll be interested.
Table 4-1: Members of the OB_OPERATION_REGISTRATION Structure
Member
Purpose
ObjectType
A pointer to the type of object the driver developer wishes to monitor. 
At the time of this writing, there are three supported values: 
PsProcessType (processes)PsThreadType (threads)ExDesktopObjectT
ype (desktops)
Operations
A flag indicating the type of handle operation to be monitored. This 
can be either OB_OPERATION_HANDLE_CREATE, to monitor requests for 
new handles, or OB_OPERATION_HANDLE_DUPLICATE, to monitor handle-
duplication requests.
åPreOperation
A pointer to a pre-operation callback routine. This routine will be 
invoked before the handle operation completes.
PostOperation
A pointer to a post-operation callback routine. This routine will be 
invoked after the handle operation completes.
We’ll discuss these members further in “Detecting a Driver’s Actions 
Once Triggered” on page XX.
Monitoring New and Duplicate Process-Handle Requests
EDRs commonly implement pre-operation callbacks to monitor new 
and duplicate process-handle requests. While monitoring thread- and 
desktop-handle requests can also be useful, attackers request process 
handles more frequently, so they generally provide more relevant informa-
tion. Listing 4-3 shows how an EDR might implement such a callback in a 
driver.
PVOID g_pObCallbackRegHandle;
NTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING pRegPath)
{
NTSTATUS status = STATUS_SUCCESS;
OB_CALLBACK_REGISTRATION CallbackReg;
OB_OPERATION_REGISTRATION OperationReg;
RtlZeroMemory(&CallbackReg, sizeof(OB_CALLBACK_REGISTRATION));
RtlZeroMemory(&OperationReg, sizeof(OB_OPERATION_REGISTRATION));
--snip--
CallbackReg.Version = OB_FLT_REGISTRATION_VERSION;
1 CallbackReg.OperationRegistrationCount = 1;
Evading EDR (Early Access) © 2023 by Matt Hand
64   Chapter 4
RtlInitUnicodeString(&CallbackReg.Altitude, 2 L"28133.08004");
CallbackReg.RegistrationContext = NULL;
OperationReg.ObjectType = 3 PsProcessType;
OperationReg.Operations = 4 OB_OPERATION_HANDLE_CREATE | OB_OPERATION_HANDLE_DUPLICATE;
 5 OperationReg.PreOperation = ObjectNotificationCallback;
CallbackReg.OperationRegistration = 6 &OperationReg;
status = 7 ObRegisterCallbacks(&CallbackReg, &g_pObCallbackRegHandle);
if (!NT_SUCCESS(status))
{
    return status;
}
--snip--
}
OB_PREOP_CALLBACK_STATUS ObjectNotificationCallback(
PVOID RegistrationContext,
POB_PRE_OPERATION_INFORMATION Info)
{
 --snip--
}
Listing 4-3: Registering a pre-operation callback notification routine
In this example driver, we begin by populating the callback registration 
structure. The two most important members are OperationRegistrationCount, 
which we set to 1, indicating that we’re registering only one callback  
routine 1, and the altitude, which we set to an arbitrary value 2 to avoid 
collisions with other drivers’ routines.
Next, we set up the operation-registration structure. We set ObjectType 
to PsProcessType 3 and Operations to values that indicate we’re interested in 
monitoring new or duplicate process-handle operations 4. Lastly, we set 
our PreOperation member to point to our internal callback function 5.
Finally, we tie our operation-registration structure into the callback reg-
istration structure by passing a pointer to it in the OperationRegistration mem-
ber 6. At this point, we’re ready to call the registration function 7. When 
this function completes, our callback routine will start receiving events, and 
we’ll receive a value that we can pass to the registration function to unregis-
ter the routine.
Detecting Objects an EDR Is Monitoring
How can we detect which objects an EDR is monitoring? As with the other 
types of notifications, when a registration function is called, the system will 
add the callback routine to an array of routines. In the case of object call-
backs, however, the array isn’t quite as straightforward as others.
Remember those pointers we passed into the operation-registration 
structure to say what type of object we were interested in monitoring? So 
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   65
far in this book, we’ve mostly encountered pointers to structures, but these 
pointers instead reference values in an enumeration. Let’s take a look at 
nt!PsProcessType to see what’s going on. Object types like nt!PsProcessType are 
really OBJECT_TYPE structures. Listing 4-4 shows what these look like on a live 
system using the WinDbg debugger.
2: kd> dt   nt!_OBJECT_TYPE poi(nt!PsProcessType)
+0x000 TypeList  
 : _LIST_ENTRY [ 0xffffad8b`9ec8e220 - 0xffffad8b`9ec8e220 ]
+0x010 Name  
 : _UNICODE_STRING "Process"
+0x020 DefaultObject  : (null)
+0x028 Index  
 : 0x7 ' '
+0x02c TotalNumberOfObjects : 0x7c
+0x030 TotalNumberOfHandles : 0x4ce
+0x034 HighWaterNumberOfObjects  : 0x7d
+0x038 HighWaterNumberOfHandles  : 0x4f1
+0x040 TypeInfo  
 : _OBJECT_TYPE_INITIALIZER
+0x0b8 TypeLock  
 : _EX_PUSH_LOCK
+0x0c0 Key  
 : 0x636f7250
+0x0c8 CallbackList  
 : _LIST_ENTRY [ 0xffff9708`64093680 - 0xffff9708`64093680 ]
Listing 4-4: The nt!_OBJECT_TYPE pointed to by nt!PsProcessType
The CallbackList entry at offset 0x0c8 is particularly interesting to us, 
as it points to a LIST_ENTRY structure, which is the entry point, or header, of 
a doubly linked list of callback routines associated with the process object 
type. Each entry in the list points to an undocumented CALLBACK_ENTRY_ITEM 
structure. This structure’s definition is included in Listing 4-5.
Typedef struct _CALLBACK_ENTRY_ITEM {
LIST_ENTRY EntryItemList;
OB_OPERATION Operations;
DWORD Active;
PCALLBACK_ENTRY CallbackEntry;
POBJECT_TYPE ObjectType;
POB_PRE_OPERATION_CALLBACK PreOperation;
POB_POST_OPERATION_CALLBACK PostOperation;
__int64 unk;
} CALLBACK_ENTRY_ITEM, * PCALLBACK_ENTRY_ITEM;
Listing 4-5: The CALLBACK_ENTRY_ITEM structure definition
The PreOperation member of this structure resides at offset 0x028. If we 
can traverse the linked list of callbacks and get the symbol at the address 
pointed to by this member in each structure, we can enumerate the driv-
ers that are monitoring process-handle operations. WinDbg comes to the 
rescue once again, as it supports scripting to do exactly what we want, as 
demonstrated in Listing 4-6.
2: kd> !list -x ".if (poi(@$extret+0x28) != 0) { lmDva (poi(@$extret+0x28)); }"
(poi(nt!PsProcessType)+0xc8)
Browse full module list
start  
 end  
 module name
Evading EDR (Early Access) © 2023 by Matt Hand
66   Chapter 4
fffff802`73b80000 fffff802`73bf2000 WdFilter (no symbols)
Loaded symbol image file: WdFilter.sys
  1 Image path: \SystemRoot\system32\drivers\wd\WdFilter.sys