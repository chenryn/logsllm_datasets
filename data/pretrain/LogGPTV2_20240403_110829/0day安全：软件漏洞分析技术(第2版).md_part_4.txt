缓冲区溢出内核漏洞
*614
24.4
任意地址写任意数据内核漏洞·
619..
24.5
任意地址写固定数据内核漏洞
622
第5篇
漏洞分析案例
第25章漏洞分析技术概述
628
25.1漏洞分析的方法
25.2运动中寻求突破：调试技术….
25.2.1断点技巧
.630
25.2.2回溯思路
644
25.3用“白眉”在PE中浸步
647
25.3.1指令追踪技术与Paimei
647
25.3.2
Paimei的安装..
648
25.3.3
使用PEStalker
649
25.3.4迅速定位特定功能对应的代码
652
25.4补丁比较
654
第26章RPC入侵：MS06-040与MS08-067.
658
26.1RPC漏洞.
658
26.1.1RPC漏洞简介
26.1.2RPC编程简介“
658
26.2MS06-040.
.*659
26.2.1MS06-040简介
659
26.2.2动态调试
660
·IIXX·
---
## Page 24
26.2.3静态分析
*667
26.2.4实现远程exploit...
6.70
26.3WindowsXP环境下的MS06-040exploit
677
26.3.1静态分析.
.677
26.3.2蠕虫样本的exploit方法..
682
26.3.3实践跨平台exploit
.684
26.4MS08-067...
069.*
26.4.1MS08-067简介
069..
26.4.2认识LegacyFolder
.693
26.4.3“移经”测试…
694
26.4.4“移经”风险
694
26.4.5POC的构造
969.
26.5魔波、Conficker与端虫病毒
.703
第27章MS06-055分析：实战HeapSpray
705
27.1MS06-055简介
.705
27.1.1天量标记语言（VML）简介
.705
27.1.20day安全响应纪实·
..706
27.2漏洞分析·
..707
27.3
漏洞利用·
.710
第28章
MS09-032分析：一个“&”引1发的血案
713
28.1
MS09-032简介
.713
28.2
漏洞原理及利用分析·
.713
第29章
Yahoo!Messenger栈溢出漏洞
.719
29.1
漏洞介绍
.719
29.2
漏洞分析·
.719
29.3
漏洞利用·
.724
第30章
CVE-2009-0927：PDF中的JS
.726
30.1
CVE-2009-0927简介
.726
30.2
PDF文档格式简介
726
30.3
漏洞原理及利用分析
.728
第31章
坝之蚊穴：超长URL溢出漏洞
.732
31.1
漏洞简介
.732
31.3
漏洞原理及利用分析·
.732
·XXIIl·
---
## Page 25
第32章暴风影音M3U文件解析漏洞
738
32.1漏洞简介
738
32.2
2M3U文件简介
 738
32.3漏洞原理及利用分析.
.739
第33章LNK快捷方式文件漏洞·
·745
33.1
漏洞简介
745
33.2漏洞原理及利用分析
 745
附录A已公布的内核程序漏洞列表
.750
参考文献
753
·XXIV.
---
## Page 26
第1篇
漏洞利用原理（初级）
精勤求学，敦笃励志
—《西安交通大学校训》
把二进制代码安置在输入参数里，精确地计算栈中返回地址的偏移量，通过一个合法的调
用执行非法的代码，这听起来似乎有点天方夜谭。如果在20年之前这确实是一件impossible
mission，但在软件调试技术高度发展的今天，对于有一定计算机基础的人来说，这已经不是什
么难事了。
对于初学者，未经许可渗透进主机获得控制权的道理并不像编写求解“水仙花数”的C语
言程序那样浅显易懂，如果用大量的篇幅来维护技术的完整性可能会让本身就很深奥的技术变
后配合精心设计的小实验让您深刻体会漏洞利用的精髓。
也许这种叙述方式未能涵盖所有漏洞利用技术的边边角角，但是您在做完全部的调试实验
之后一定能够越过技术门槛，进入这片领域，获得真正的提高。
在开始我们的二进制历险之前，您需要进一步坚定自己的意志。要知道扎实的基本功和精
湛的调试技术绝不是从书籍上读到的，那需要在实践中不断磨炼。也许若干年之前您已经听说
过缓冲区溢出，但唯有跟进内存，盯着寄存器，被莫名其妙的问题反复郁闷，最终让shellcode
得以成功执行时，才算得上真正懂得了其中奥妙。
所有漂亮的exploits背后都隐藏着无数个对着寄存器发呆的不眠之夜，如果您没被吓倒，
那么我们并始吧！
---
## Page 27
第1章基础知识
要想扬帆于二进制海洋，除了水手般坚定的意志外，还需要有能够乘风破浪的坚船利器，
定位精准的陀螺码表。没有工具的hacker如同没有枪的战士，子日：工欲善其事，必先利其器。
掌握ollydbg等动态调试工具可以让您在分析内存时体会到胞丁解牛的快感，而IDA这类
静态反汇编工具就像迷宫的地图一样保证您在二进制文件中分析漏洞时不至于迷失方向。
有一点需要提醒您，本书对这些工具的介绍只能让您简单上手，不要指望能够立刻把它们
挥洒自如，那需要您在实践中不断地体会和学习。
1.1漏洞概述
1.1.1bug与漏洞
随着现代软件工业的发展，软件规模不断扩大，软件内部的逻辑也变得异常复杂。为了保
型软件公司中，测试环节（QA）所耗费的资源甚至已经超过了并发。即便如此，不论从理论
在形形色色的软件逻辑缺陷中，有一部分能够引起非常严重的后果。例如，网站系统中，
Script，跨站脚本）攻击的目标：服务器软件在解析协议时，如果遇到出乎预料的数据格式而
没有进行恰当的异常处理，那么就很可能会给攻击者提供远程控制服务器的机会。
(vulnerability)
（1）功能性逻辑缺陷（bug）：影响软件的正常功能，例如，执行结果错误、图标显示错误等。
(2）安全性逻辑缺陷（漏洞）：通常情况下不影响软件的正常功能，但被攻击者成功利用
后，有可能引起软件去执行额外的恶意代码。常见的漏洞包括软件中的缓冲区溢出漏洞、网站
中的跨站脚本漏润（XSS）、SQL注入漏洞等。
1.1.2几个令人困惑的安全问题
也许您有一定的计算机知识，但仍然经常费解于下面这些安全问题。
（1）我从不运行任何来历不明的软件，为什么还会中病毒？
如果病毒利用重量级的系统漏洞进行传播，您将在劫难逃。因为系统漏洞可以引起计算机
被远程控制，更何况传播病毒。横扫世界的冲击波端虫、slammer螨虫等就是这种类型的病毒。
---
## Page 28
如果服务器软件存在安全漏洞，或者系统中可以被RPC远程调用的函数中存在缓冲区
溢出漏洞，攻击者也可以发起“主动”进攻。在这种情况下，您的计算机会轻易沦为所谓
的“肉鸡”。
（2）我只是点击了一个URL链接，并没有执行任何其他操作，为什么会中木马？
如果您的浏览器在解析HTML文件时存在缓冲区溢出漏洞，那么攻击者就可以精心构造
一个承载着恶意代码的HTML文件，并把其链接发给您。当您点击这种链接时，漏洞被触发，
从而导致HTML中所承载的恶意代码（shellcode）被执行。这段代码通常是在没有任何提示的
情况下去指定的地方下载木马客户端并运行。
此外，第三方软件所加载的ActiveX控件中的漏洞也是被“网马”所经常利用的对象。所
以千万不要忽视URL链接。
（3）Word文档、PowerPoint文档、Excel表格文档并非可执行文件，它们会导致恶意代码
的执行吗？
和html文件一样，这类文档本身虽然是数据文件，但是如果Office软件在解析这些数据
文件的特定数据结构时存在缓冲区溢出漏洞的话，攻击者就可以通过一个精心构造的Word文
档来触发并利用漏洞。当您在用Office软件打开这个Word文档的时候，一段恶意代码可能已
经悄无声息地被执行过了。
（4）上网时，我总是使用高强度的密码注册账户，我的账户安全吗？
高强度的密码只能抵抗密码暴力猜解的攻击，具体安全与否还取决于很多其他因素：
密码存在哪里，例如，存本地计算机还是远程服务器。
密码怎样存，例如，明文存放还是加密存放，什么强度的加密算法等。
密码怎样传递，例如，密钥交换的过程是否安全，网络通讯是否使用SSL等。
这些过程中如果有任何一处失误，都有可能引起密码泄漏。例如，一个网站存在SQL注
入漏洞，而您的账号密码文以明文形式存在Web服务器的数据库中，那么无论您的密码多长，
包含多少奇怪的字符，最终仍将为脚本注入攻击者获取。
此外，如果密码存在本地，即使使用高强度的Hash算法进行加密，如果没有考虑到CRACK
攻击，验证机制也很可能被轻易突破。
您也许阅读过很多本网络安全书籍，所以经常看到端口扫描、网络监听、密码猜解、
DOS等名词。虽然这些话题在网络安全技术中永远都不会过时，但阅读完本书之后，您将
发现漏洞利用技术才是实施有效攻击的最核心技术，才是突破安全边界、实施深度入侵的
关键所在。
1.1.3漏洞挖掘、漏洞分析、漏洞利用
利用漏洞进行攻击可以大致分为漏洞挖掘、漏洞分析、漏洞利用三个步骤。这三部分所用
的技术有相同之处，比如都需要精通系统底层知识、逆向工程等：同时也有一定的差异。
1.漏洞挖掘
安全性漏洞往往不会对软件本身功能造成很大影响，因此很难被QA工程师的功能性测试
---
## Page 29
0
day
发现，对于进行“正常操作”的普通用户来说，更难体会到软件中的这类逻辑瑕了。
安
由于安全性漏洞往往有极高的利用价值，例如，导致计算机被非法远程控制，数据库数据
全
泄漏等，所以总是有无数技术精湛、精力旺盛的家伙在夜以继日地寻找软件中的这类逻辑瑕疵。
：
他们精通二进制、汇编语言、操作系统底层的知识：他们往往也是杰出的程序员，因此能够敏
软
件
锐地捕捉到程序员所犯的细小错误。
漏
寻找漏洞的人并非全是攻击者。大型的软件企业也会雇用一些安全专家来测试自已产品中
洞
的漏洞，这种测试工作被称做Penetrationtest（攻击测试），这些测试团队则被称做Tigerteam
分
或者Ethichacker。
析
技
从技术角度讲，漏洞挖掘实际上是一种高级的测试（QA）。学术界一直热衷于使用静态分
术
析的方法寻找源代码中的漏洞：而在工程界，不管是安全专家还是攻击者，普追采用的漏洞挖
掘方法是Fuzz，这实际是一种“灰”盒测试。
第
我们会在第3篇的相关章节中进一步介绍漏洞挖掘与产品安全性测试方面的知识。
2
版
2.漏洞分析
当fuzz捕捉到软件中一个严重的异常时，当您想透过厂商公布的简单描述了解漏洞细节的
时候，您就需要具备一定的漏洞分析能力。一般情况下，我们需要调试二进制级别的程序。
在分析漏洞时，如果能够搜索到POC（proofofconcept）代码，就能重现漏洞被触发的现
场。这时可以使用调试器观察漏洞的细节，或者利用一些工具（如Paimei）更方便地找到漏洞
的触发点。
当无法获得POC时，就只有厂商提供的对漏洞的简单描述了。一个比较通用的办法是使
用补丁比较器，首先比较patch前后可执行文件都有哪些地方被修改，之后可以利用反汇编工
具（如IDAPro）重点逆向分析这些地方。
漏洞分析需要扎实的逆向基础和调试技术，除此以外还要精通各种场景下的漏洞利用方
法。这种技术更多依靠的是经验，很难总结出通用的条款。本书将在第5篇中用若干个实际的
分析案例来帮助您体会漏洞分析的过程，希望能够起到抛砖引玉的效果。
3.漏润利用
漏洞利用技术可以一直追溯到20世纪80年代的缓冲区溢出漏洞的利用。然而直到Aleph
One于1996年在Phrack第49期上发表了著名的文章《SmashingTheStackForFunAndProfit》，
这种技术才真正流行起来。
随着时间的推移，经过无数安全专家和黑客们针锋相对的研究，这项技术已经在多种流行
的操作系统和编译环境下得到了实践，并日趋完善。这包括内存漏洞（堆栈溢出）和Web应用
漏洞（脚本注入）等。
安全及Web应用中的脚本注入攻击所使用的技术与Windows平台下缓冲区溢出相差较大，且
自成体系，本书只做原理性简单介绍，如有机会将单独著书以述之。本书将在第1篇与第2篇
中由浅入深地集中介绍这部分内容。
---
## Page 30
1.1.4漏洞的公布与0day响应
1
喜
漏洞公布的流程取决于漏洞是被谁发现的。
如果是安全专家、PenTester、EthicHacker在测试中发现了漏洞，一般会立刻通知厂商的
基
产品安全中心。软件厂商在经过漏洞确认、补丁测试之后，会正式发布漏洞公告和官方补丁。
础
然而事情总是没有那么简单，如果漏洞被攻击者找到，肯定不会立刻通知软件厂商。这时
知
识
漏洞的信息只有攻击者自已知道，他可以写出exploit利用漏洞来做任何事情。这种未被公布、
未被修复的漏洞往往被称做0day。
0day毕竞只是被少数攻击者掌握，并且大多数情况下也不会有人浮躁到写出端虫来攻击整
个Intermet。但有时0day漏洞会被曝光，那意味着全世界的黑客都知道这个漏洞，也懂得怎么
去利用它，在广商的官方补丁发布前，整个Intermet的网络将处于高危预警状态。
0day曝光属于严重的安全事件，一般情况下，软件厂商都会进入应急响应处理流程，以
最快的速度修复漏洞，保护用户的合法权利。
公布漏洞的权威机构有两个。
（1）CVE（CommonVulnerabilities andExposures)http://cve.mitre.org/截至目前，这里收录
了两万多个漏洞。CVE会对每个公布的漏洞进行编号、审查。CVE编号通常也是引用漏洞的
标准方式。
(2）CERT(ComputerEmergencyResponseTeam)http://www.cert.org/计算机应急响应组往往
会在第一时间跟进当前的严重漏洞，包括描述信息、POC的发布链接、厂商的安全响应进度、
用户应该采取的临时性防范措施等。
此外，微软的安全中心所公布的漏洞也是所有安全工作者和黑客们最感兴趣的地方。微软
通宵达旦地去研究这些补丁patch了哪些漏洞，并写出exploit。因为在补丁刚刚发布的一段时
间内，并非所有用户都能及时修复，故这种新公布的漏洞也有一定利用价值。有时把攻击这种
刚刚被patch过的漏洞称为1day攻击。（patch发布后1天，叫做1day，5天叫做5day，未
发patch统称0day）
1.2二进制文件概述
1.2.1PE文件格式
PE（PortableExecutable）是Win32平台下可执行文件遵守的数据格式。常见的可执行文
件（如“*.exe”文件和“*.dl1”文件）都是典型的PE文件。
一个可执行文件不光包含了二进制的机器代码，还会自带许多其他信息，如字符串、菜单、
图标、位图、字体等。PE文件格式规定了所有的这些信息在可执行文件中如何组织。在程序
被执行时，操作系统会按照PE文件格式的约定去相应的地方准确地定位各种类型的资源，并
分别装入内存的不同区域。如果没有这种通用的文件格式约定，试想可执行文件装入内存将会
---
## Page 31
day安全：
0