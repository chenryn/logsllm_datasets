expressing relationships for particular protocols or services
to be emulated. The ﬁgure illustrates these when used for
routing protocols, but the same abstraction is suitable, for
instance, for expressing the RPKI relationships described in
§ 3.3. The overlay graphs provide a ﬂexible and extensible
method for implementing a large array of conﬁgurations, de-
scribed in more detail in the following section.
4.2.1 An Algebraic Approach: Attribute Graphs
The ﬁrst input into our conﬁguration model is the input
topology, represented as an undirected graph Gin = (N ,Ein)
with nodes n ∈ N and edges e ∈ Ein. Nodes represent net-
work devices, and edges the physical connectivity, or other
relationships, such as parent-child links in the RPKI exam-
ple.
In order to represent conﬁguration attributes, we label the
nodes and edges. Assuming a node attribute of type X, each
node n ∈ N is associated with a unique label xn given by a
function fX : N → X , where X denotes the set of possible
values for attributes of type X. Edge attributes are assigned
in the same manner. Depending on the network services
to be conﬁgured on the network, there may be more than
multiple attributes for each node (or edge). For example, an
Autonomous System Number can be assigned to each node
using an attribute of type ASN with the attribute set Xasn
being the set of positive integers and deﬁning the labelling
function fasn(n) that returns the ASN value for each node
n ∈ N .
The above is nothing particularly new. What is novel
is the way we process it into separate overlays, which can
then be compiled and mapped separately through layer de-
pendent templates. We create separate graphs to represent
the network-wide routing and services (such as OSPF, iBGP
and eBGP) by algebraically deﬁning graphs that overlay the
initial attribute graph. For each routing protocol or service
a rule is deﬁned to automatically generate the routing pro-
tocol topologies from the attribute graph. For example, to
create the OSPF routing topology from an attribute graph
with a particular ASN, we deﬁne a graph with edges con-
structed by matching the ASN attribute of their incident
nodes with a simple rule such as
Eospf = {(i, j) ∈ Ein | fasn(i) = fasn(j)}.
(1)
(c) iBGP Topology
(d) eBGP Topology
Figure 5: Example network topologies. The OSPF, iBGP
and eBGP topologies can be constructed mathematically
from the input topology.
Similarly, for an iBGP mesh, and the eBGP topology the
following rules are used
Eibgp = {(i, j) ∈ (N × N ) | fasn(i) = fasn(j)},
Eebgp = {(i, j) ∈ Ein | fasn(i) (cid:54)= fasn(j)}.
(2)
(3)
Consider the example in Figure 5.
The rules are expressed in the compiler step, making ad-
dition of a new type of protocol or service as simple as spec-
ifying a single additional rule.
In this example, we
deﬁne the input topology as a graph, Gin = (N ,Ein) with
nodes and edges N = {r1, r2, r3, r4, r5},
Ein = {(r1, r2), (r1, r3), (r2, r4), (r3, r4), (r3, r5), (r4, r5)}
and the ASN allocations X = {1, 1, 1, 1, 2} as shown in Fig-
ure 5a.
Applying the rules in (1), (2), and (3) we can create three
graphs Gospf , Gibgp and Gebgp to represent OSPF, iBGP
and eBGP routing topologies. Gospf retains the edges of
the physical graph, where an edge connects two nodes in
the same AS, Gebgp retains the edges of the physical graph
where an edge connects two nodes in diﬀerent ASes, and
Gibgp constructs new edges, between each pair of nodes in
the same AS. Applying these rules yields the following sets
of edges:
Eospf = {(r1, r2), (r1, r3), (r2, r4), (r3, r4)},
Eibgp = {(r1, r2), (r1, r3), (r1, r4), (r2, r3), (r2, r4)},
Eebgp = {(r3, r5), (r4, r5)}.
Finally, to complete conﬁguration information for each
device, we condense the overlay graphs to a per-device state
graph by applying a set of rules, where the nodes, edges, and
associated attributes of each overlay graph are combined into
single attribute vectors for each node. Again the rules can
be expressed per layer, simplifying the addition of additional
protocols or services. The ﬁnal state graph Gstate has the
same structure as the input graph Gin but each node of this
graph is now labelled by an attribute vector to represent the
per-device state. These vectors can be pushed into the low-
level syntax templates. This state graph Gstate can form the
Resource Database component of the Device-Conﬁguration
Generator.
It’s important to note that in separating layers, we do not
assert that these are truly independent protocols. When
Abstract Network ModelG_inG_phyG_ospfG_ibgpLoaderGraphMLG_ebgpResource DatabaseCompiler1r1r2r3r4r52r1r2r3r4r510202010r1r2r3r4r5r1r2r3r4r5240implemented they can still interact, and they still need con-
sistent conﬁguration for details such as IP addresses. Such
consistency is achieved by cross-topology access in the com-
pilation stage, such as mapping the appropriate IP address
from an IPv4 topology onto the conﬁguration for the eBGP
routing protocol.
5. SYSTEM IMPLEMENTATION
The system is implemented in Python, using existing toolk-
its where possible and extending if needed. This section de-
scribes our implementation of the modules in Figure 2 with
focus on components in Figure 4 where the system converts
high-level user input data into low-level per-device conﬁgu-
ration information. While Python is a scripting language, as
opposed to strongly-typed languages, we provide direct ac-
cess to the underlying attribute graphs for users to perform
formal validation on.
5.1 Input Topology
The input graph is provided to the Loader module, where
it is converted into a NetworkX [22] representation. Net-
workX provides eﬃcient data structures for graph represen-
tation and analysis, and can import and export from a num-
ber of graph interchange formats (GML, GraphML, ...), and
we provide an extension to read Rocketfuel [37] data.
Custom pre-processing such as applying default attributes
can also be applied in the Loader. This ﬂexibility is impor-
tant because conﬁgurations are often derived from a number
of heterogeneous information sources [14].
5.2 Abstract Network Model
NetworkX provides a solid foundation to represent graphs,
but was not designed to work with multi-layer overlay topolo-
gies. To present an easy-to-use abstraction, we have devel-
oped a high-level API to meet the requirements for graph-
based network design. Our Abstract Network Model (ANM)
is a Python object containing a set of NetworkX graphs, and
provides a high-level API access to these graphs by wrapping
each of the graphs, nodes, and edges with a lightweight ac-
cessor object. The individual elements can then be treated
as objects, presenting a clean network design syntax.
5.2.1 Adding Overlays
By default the ANM includes two overlay graphs: an input
graph and a physical connectivity graph, which can be ac-
cessed as follows: G_in = anm[’in’] and G_phy = anm[’phy’].
New overlay graphs can be added, such as for OSPF: G_ospf
= anm.add_overlay("ospf").
Attributes can also be set at the overlay graph level, and
is used to record data relating to node groups, such as the
IP address allocations per AS on the IP graph. By stor-
ing the allocations on the overlay graph, we avoid duplicat-
ing this information on each node, and allow easy query-
ing by the ASN attribute value: G_ip.data.infra_blocks =
infra_blocks.
We allow the user to copy across node and edge attributes
as they are added to an overlay graph. The attributes to
be copied can be speciﬁed by the retain parameter to the
add_nodes_from and add_edges_from functions. An example
is shown in Listing 6.1, and the attributes and their val-
ues are copied across to the nodes or edges in the destina-
tion graph. Attributes can also be copied to a diﬀerent at-
tribute name: copy_attr_from(G_in, G_ospf, "ospf_area",
dst_attr = "area").
5.2.2 Working With Nodes and Edges
Nodes and edges can be accessed from an overlay graph:
G_in.nodes() and G_in.edges(). Attributes can be used as se-
lectors, e.g., G_in.edges(type = "physical"), Such attributes
can be easily added in graph editors such as yEd, and enable
edges to be selected programatically, such as those leaving
a particular AS.
The Python set operators, such as union and intersection
can be used on such sequences.
The device_type attribute marks a node as a router, switch,
server, or user-deﬁnable device type allowing extensibility to
non-router network devices. Shortcuts such as G_in.routers()
to access G_in.nodes(device_type = router) allow succint node
access.
By using the device_type selector, our system allows con-
ﬁguration of arbitrary devices, with only the appropriate
nodes being selected. For instance, in constructing the rout-
ing overlays, we only select routers; if a user wishes to add
servers or a new device type, they will not be selected in the
query to construct the routing overlay.
To reduce the syntax to access node and edge properties
and simplify cross-layer access, nodes and edges are accessed
as objects. These refer back to the underlying NetworkX
data structure, but provide a simple API access to the end
user. The node and edge wrappers allow simple program-
matic access to and assignment of user-deﬁned attributes
using node.attr and edge.attr.
Python’s list comprehensions are well-suited to ﬁltering
edges based on node properties. A common design pattern
is to select nodes to operate on by some attribute using these
wrappers, e.g., [n for n in G_in if n.asn == 200]
Once an overlay graph has been created, and nodes and
edges added as appropriate, then attributes can e modiﬁed,
or edges added. These added edges can represent OSPF
adjacencies, BGP sessions, or service tasks such as client-
server relationships.
Finally, we can nest iteration, ﬁrst looking at a node, and
then at the edges originating from it. For example, to mark
a node as being a backbone router if it has an edge in area
zero:
1 for node in G_ospf:
2
if any(e.area == 0 for e in node.edges()):
3
node.backbone = True
This could then be used to conﬁgure diﬀerent parameters,
or assign routing policies in the templates. With the API,
such network-level reasoning becomes not only simple to
construct and read, but also easy to extend, to support more
advanced topology design.
5.2.3 Using the API for Network Design
The API features allow overlay graphs to be constructed
by selectively adding or removing nodes or edges. For in-
stance, an IGP graph can be constructed by copying the
input graph, and then removing the links that cross ASN
boundaries.
1 G_ospf.remove_edges_from(e for e in G_ospf.edges()
if e.src.asn != e.dst.asn)
Another use is selecting a corresponding node in another
overlay graph. The add_nodes_from function copies node_id
241values automatically, providing an easy method to reference
nodes across these graphs. Additional attributes can be
speciﬁed to be copied across graphs for use when properties
in one graph, such as physical connectivity, may be used to
set attributes in another graph, for instance to mark a node
as a route reﬂector or a server. This cross-layer selection
is used extensively in the compiler, where multiple overlay
graphs are condensed into a single device-level representa-
tion for conﬁguration generation. For instance, when con-
ﬁguring iBGP, we require the loopback attribute assigned
to the node in an IP addressing graph. We access the IP
addressing graph, and subsequently the loopback attribute
from the iBGP node as follows:
1 for ibgp_node in G_ibgp:
2
loopback = G_ip.node(ibgp_node).loopback
5.2.4 Attribute-Based Functions
Functions also exist to represent common network design
tasks. These include split(), which splits an edge by cre-
ating a new intermediate node; aggregate() which collapses
the selected nodes into a single node; and explode() which
removes a node, forming a clique of its neighbors. These
functions are useful to create the IP addressing overlay,
which allocates the appropriate subnet block to collision
domains. Point-to-point links are split to add a collision
domain, whilst switches are aggregated to form a single col-
lision domain. The explode() function can be used to deter-
mine adjacency of nodes connected via a switch.
The groupby() function takes a set of nodes and a grouping
attribute and returns a series of (attribute, node) tuples.
This can be used to perform operations on a per-ASN basis,
and applied to multiple attributes, such as iBGP cluster.
5.3 Resource Allocation and IP Addressing
An important, but time consuming and tedious task in
creating a network is allocating resources. The canonical
example is IP addresses. The allocation must follow certain
rules (primarily uniqueness and consistency), but in most
emulated networks the actual values allocated are inconse-
quential. Such resource allocations are similar to allocating
memory in traditional programming—we want to leave that
to the compiler and operating system where possible.
Therefore, IP addresses are automatically allocated. The
allocation is implemented as a plugin, allowing users to ex-
tend the module and use a custom scheme or methods from
literature, e.g. [13]. The Python netaddr library, which sim-
pliﬁes handling of IP addresses, is used to construct an IP
overlay graph with the router and server nodes from the in-
put graph. We allocate IP addresses in two distinct blocks:
one for loopback addresses on routers, and another block for
infrastructure links. These allocations are stored for use in
other protocols such as eBGP or DNS.
5.4 Compiling Overlay Graphs
The compiler combines both the inbuilt and user-deﬁned
overlay topology graphs into a single device-level topology,
to push into the text-based templates. This is performed by
ﬁrst creating the Resource Database (also Network Informa-
tion DB or NIDB), which is a device-level graph, based on
the nodes and edges in the physical graph, G_phy.
The next step of the compiler is implemented as two base
objects: platform conﬁguration, such as Netkit or Dynagen;
and device syntax conﬁguration, such as Quagga or Cisco
IOS. This allows a combination of device types using diﬀer-
ent emulation platforms.
The platform compiler module constructs information needed
by a particular emulation platform, allocates platform spec-
iﬁed information, such as interface names (interface name
formats are dependent on the platform), and management
IP addresses, and performs platform based formatting, such