influence by untrusted inputs. If we could precisely identify the
release events, this would allow us to specify robust declassification
as a 2-safety property on those release events. If every pair of
untrusted inputs results in the same trace of confidentiality release
events, the program satisfies robust declassification. However, to
identify confidentiality release events requires comparing traces
with different secret inputs. A trace consists of a set of observable
states, not a set of release events. Release events are identified by
varying secrets; the robustness of releases is identified by varying
untrusted input. Thus we need 4 traces to properly characterize
robust declassification.
Both prior work [11] and our definition in Section 6.4 state robust
declassification in terms of four traces, making it easy to convert to
a 4-hyperproperty. That formulation cannot, however, be directly
translated to 4-safety. It instead requires a statement about trace
prefixes, which cannot be invalidated by extending traces.
Instead of simply reformulating Definition 6.5 with trace pre-
fixes, we modify it using insights gained from the definition of
NMIF. In particular, instead of a strict requirement that if a relevant
attack results in public-equivalent trace prefixes then other attacks
must as well, we relax this requirement to apply only when the
trace prefixes are trusted-equivalent. As noted in Section 6.6, if we
syntactically prohibit endorse—the only case in which we could
enforce the previous definition—this trivially reduces to that defini-
tion. Without the syntactic restriction, however, the new condition
is still enforceable.
For a given attacker A we can define a 4-safety property with
respect to A (let U, S, T , P, and W be as in Definition 6.9).
(cid:41)
RDA ≜
(cid:26)
(cid:40)
1 (cid:44) • ∧ t i j
T ⊆ T | T =
∧ t i j
=⇒(cid:18)∀{ni j } ⊆ N :
(cid:16)
t 11, t 12, t 21, t 22
2 (cid:44) • ∧ t i1
1 ∧ t 1j
1 = t i2
(cid:48)W • ∧ t i1
(cid:19)(cid:27)
. .n21 ∧ t 12
t i j
ni j
∧ t 11
. .n11 ≈⋆P t 21
. .n12 ≈W t 22
. .n22
. .n12
2 = t 2j
2
(cid:17)
. .ni1−1 ≈⋆T t i2
(cid:48)⋆P t 22
. .n22
. .ni2−1
=⇒ t 12
over all attackers: RD =(cid:84)A RDA.
We then define robustness against all attackers as the intersection
The above definition structurally combines Definition 6.4 with
the first clause of Definition 6.9 to capture both the equivalence
and the relevant-input statements of the original theorem. In the
(cid:48)W • and
nested implication, if the first two clauses hold (t
4While NMIFC produces finite traces and hyperproperties are defined for infinite
traces, we can easily extend NMIFC traces by stuttering • infinitely after termination.
ij
ni j
Figure 12: Relating 4-safety hyperproperties and noninterference.
..ni1−1 ≈⋆T ti2
ti1
..ni2−1), then one of three things must happen when
fixing the attack and varying the secret: both trace pairs are equiv-
alent, both trace pairs are non-equivalent, or the postcondition of
the implication holds (t12
..n22). The first two satisfy the
equivalency implication in Definition 6.9 while the third is exactly
a demonstration that the first input is irrelevant.
..n12 ≈W t22
Next we note that, while this does not strictly conform to the def-
inition of robust declassification in Definition 6.5 which cannot be
stated as a hypersafety property, RD is equivalent to Definition 6.5
for programs that do not perform endorsement. This endorse-free
condition means that the equivalence clause ti1
..ni2−1
will be true whenever the trace prefixes refer to the same point
in execution. In particular, they can refer to the end of execution,
which gives exactly the condition specified in the theorem.
..ni1−1 ≈⋆T ti2
As with every other result so far, the dual construction results
in a 4-safety property TE representing transparent endorsement.
Since RD captures the first clause of Definition 6.9, TE thus captures
the second. This allows us to represent nonmalleable information
flow as a 4-safety property very simply: NMIF = RD ∩ TE.
Figure 12 illustrates the relation between these hyperproperty
definitions. Observe that the 2-safety hyperproperty NI for nonin-
terference is contained in all three 4-safety hyperproperties. The
insecure example programs of Section 2 are found in the left cres-
cent, satisfying RD but not NMIF.
8 IMPLEMENTING NMIF
We have implemented the rules for nonmalleable information flow
in context of Flame, a Haskell library and GHC [41] plugin. Flame
provides data structures and compile-time checking of type-level
acts-for constraints that are checked using a custom type-checker
plugin. These constraints are used as the basis for encoding NMIFC
as a shallowly-embedded domain-specific language (DSL). We have
demonstrated that programs enforcing nonmalleable information
flow can be built using this new DSL.
8.1 Information-flow monads in Flame
The DSL works by wrapping sensitive information in an abstract
data type—a monad—that includes a principal type parameter rep-
resenting the confidentiality and integrity of the information.
The Flame library tracks computation on protected information
as a monadic effect and provides operations that constrain such
computations to enforce information security. This effect is mod-
eled using the IFC type class defined in Figure 13. The type class
IFC is parameterized by two additional types, n in the Labeled
type class and e in Monad. Instances of the Labeled type class
enforce noninterference on pure computation—no downgrading or
effects. The e parameter represents an effect we want to control.
NMIFRDTENIclass (Monad e, Labeled n) => IFC m e n where
protect :: (pc ⊑ l) => a -> m e n pc l a
use :: (l ⊑ l', pc ⊑ pc', l ⊑ pc', pc ⊑ pc'') =>
m e n pc l a -> (a -> m e n pc' l' b)
authCheck :: Lbl MemoClient BasicAuthData
-> NM IO (I MemoServer) (I MemoServer)
(BasicAuthResult Prin)
authCheck lauth =
let lauth' = endorse $ lift lauth
-> m e n pc'' l' b
res = use lauth' $ \(BasicAuthData user guess) ->
runIFC :: m e n pc l a -> e (n l a)
Figure 13: Core information flow control operations in Flame.
class IFC m e n => NMIF m e n where
declassify :: ( (C pc) ⊑ (C l)
, (C l') ⊑ (C l) ⊔ ∆(I (l' ⊔ pc))
, (I l') === (I l)) =>
m e n pc l' a -> m e n pc l a
endorse :: ( (I pc) ⊑ (I l)
, (I l') ⊑ (I l) ⊔ ∇(C (l' ⊔ pc))
, (C l') === (C l)) =>
m e n pc l' a -> m e n pc l a
Figure 14: Nonmalleable information flow control in Flame.
recv :: (NMIF m e n, (I p) ⊑ ∇(C p)) =>
n p a
-> m e n (I (p ∧ q)) (p ∧ (I q)) a
recv v = endorse $ lift v
badrecv :: (NMIF m e n, (I p) ⊑ ∇(C p)) =>
n (p ∧ C q) a
-> m e n (I (p ∧ q)) (p ∧ q) a
badrecv v = endorse $ lift v {-REJECTED-}
Figure 15: Receive operations in NMIF. The secure recv is accepted,
but the insecure badrecv is rejected.
For instance, many Flame libraries control effects in the IO monad,
which is used for input, output, and mutable references.
The type m e n pc l a in Figure 13 associates a label l with
the result of a computation of type a, as well as a program counter
label pc that bounds the confidentiality and integrity of side ef-
fects for some effect e. Confidentiality and integrity projections
are represented by type constructors C and I. The protect opera-
tor corresponds to monadic unit η (rule UnitM). Given any term,
protect labels the term and lifts it into an IFC type where pc ⊑ l.
The use operation corresponds to a bind term in NMIFC. Its
constraints implement the BindM typing rule. Given a protected
value of type m e n pc l a and a function on a value of type a
with return type m e n pc’ l’ b, use returns the result of ap-
plying the function, provided that l ⊑ l’ and (pc ⊔ l) ⊑ pc’.
Finally, runIFC executes a protected computation, which results
in a labeled value of type (n l a) in the desired effect e.
We provide NMIF, which extends the IFC type class with endorse
and declassify operations. The constraints on these operations
implement the typing rules Endorse and Decl respectively.
We implemented the secure and insecure sealed-bid auction ex-
amples from Section 2.2 using NMIF operations, shown in Figure 15.
As expected, the insecure badrecv is rejected by the compiler while
the secure recv type checks.
ebind user_db $ \db ->
case Map.lookup user db of
Nothing
Just pwd ->
-> protect Unauthorized
if guess == pwd then
protect $ Authorized (Name user)
else
protect Unauthorized
in declassify res
Figure 16: A nonmalleable password checker in Servant.
8.2 Nonmalleable HTTP Basic Authentication
To show the utility of NMIFC, we adapt a simple existing Haskell
web application [21] based on the Servant [37] framework to run
in Flame. The application allows users to create, fetch, and delete
shared memos. Our version uses HTTP Basic Authentication and
Flame’s security mechanisms to restrict access to authorized users.
We have deployed this application online at http://memo.flow.limited.
Figure 16 contains the function authCheck, which checks pass-
words in this application using the NM data type, which is an instance
of the NMIF type class. The function takes a value containing the
username and password guess of the authentication attempt, labeled
with the confidentiality and integrity of an unauthenticated client,
MemoClient. This value is endorsed to have the integrity of the
server, MemoServer. This operation is safe since it only endorses
information visible to the client. Next, the username is used to look
up the correct password and compare it to the client’s guess. If they
match, then the user is authorized. The result of this comparison is
secret, so before returning the result, it must be declassified.
Enforcing any form of information flow control on authenti-
cation mechanisms like authCheck provides more information
security guarantees than traditional approaches. Unlike other ap-
proaches, nonmalleable information flow offers strong guarantees
even when a computation endorses untrusted information. This
example shows it is possible to construct applications that offer
these guarantees.
9 RELATED WORK
Our efforts belong both within a significant body of work attempt-
ing to develop semantic security conditions that are more nuanced
than noninterference, and within an overlapping body of work
aiming to create expressive practical enforcement mechanisms for
information flow control. Most prior work focuses on relaxing con-
fidentiality restrictions; work permitting downgrading of integrity
imposes relatively simple controls and lacks semantic security con-
ditions that capture the concerns exemplified in Section 2.
Intransitive noninterference [29, 32, 34, 42] is an information flow
condition that permits information to flow only between security
levels (or domains) according to some (possibly intransitive) rela-
tion. It does not address the concerns of nonmalleability.
Decentralized information flow control (DIFC) [26] introduces
the idea of mediating downgrading using access control [30]. How-
ever, the lack of robustness and transparency means downgrading
can still be exploited in these systems (e.g., [16, 22, 25, 48]).
Robust declassification and qualified robustness have been ex-
plored in DIFC systems as a way to constrain the adversary’s in-
fluence on declassification [4–6, 12, 27, 46, 47]. While transparent
endorsement can be viewed as an integrity counterpart to robust
declassification, this idea is not present in prior work.
Sabelfeld and Sands provide a clarifying taxonomy for much prior
work on declassification [36], introducing various dimensions along
which declassification mechanisms operate. They categorize robust
declassification as lying on the “who” dimension. However, they do
not explicitly consider endorsement mechanisms. Regardless of the
taxonomic category, transparent endorsement and nonmalleable
information flow also seem to lie on the same dimension as robust
declassification, since they take into account influences on the
information that is downgraded.
Label algebras [24] provide an abstract characterization of several
DIFC systems. However, they do not address the restrictions on
downgrading imposed by nonmalleable information flow.
The Aura language [20] uses information flow policies to con-
strain authorization and endorsement. However, it does not address
the malleability of endorsement. Rx [40] represents information
flow control policies in terms of dynamic roles [18]. Adding new
principals to these roles corresponds to declassification and en-
dorsement since new flows may occur. Rx constrains updates to
roles similarly to previous type systems that enforce robust declas-
sification and qualified robustness but does not prevent opaque
endorsements.
Relational Hoare Type Theory [28] (RHTT) offers a powerful and
precise way to specify security conditions that are 2-hyperproperties,
such as noninterference. Cartesian Hoare logic [38] (CHL) extends
standard Hoare logic to reason about k-safety properties of rela-
tional traces (the input/output pairs of a program). Since nonmal-
leable information flow, robust declassification, and transparent en-
dorsement are all 4-safety properties that cannot be fully expressed
with relational traces, neither RHTT nor CHL can characterize
them properly.
Haskell’s type system has been attractive target for embedding
information flow checking [9, 23, 39]. Much prior work has focused
on dynamic information flow control. LIO [39] requires computa-
tion on protected information to occur in the LIO monad, which
tracks the confidentiality and integrity of information accessed
(“unlabeled”) by the computation. HLIO [9] explores hybrid static
and dynamic enforcement. Flame enforces information flow con-
trol statically, and the NMIF type class enforces nonmalleable IFC
statically as well. The static component of HLIO enforces solely via
the Haskell type system (and existing general-purpose extensions),
but Flame—and by extension, NMIF—uses custom constraints based
on the FLAM algebra which are processed by a GHC type checker
plugin. Extending the type checker to reason about FLAM con-
straints significantly improves programmability over pure-Haskell
approaches like HLIO.
10 CONCLUSION
Downgrading mechanisms like declassification and endorsement
make information flow mechanisms sufficiently flexible and ex-
pressive for real programs. However, we have shown that previous
notions of information-flow security missed the dangers endors-
ing confidential information. We therefore introduced transparent
endorsement as a security property that rules out such influences
and showed that it is dual to robust declassification. Robust declas-
sification and transparent endorsement are both consequences of
a stronger property, nonmalleable information flow, and we have
formulated all three as 4-safety properties. We have shown how to
provably enforce these security properties in an efficient, compo-
sitional way using a security type system. Based on our Haskell
implementation, these security conditions and enforcement mecha-
nism appear to be practical, supporting the secure construction of
programs with complex security requirements.
While security-typed languages are not yet mainstream, infor-
mation flow control, sometimes in the guise of taint tracking, has
become popular as a way to detect and control real-world vulnera-
bilities (e.g., [17]). Just as the program analyses used are approxima-
tions of previous security type systems targeting noninterference,
it is reasonable to expect the NMIFC type system to be a useful
guide for other analyses and enforcement mechanisms.
ACKNOWLEDGMENTS
Many people helped us with this work. Martín Abadi posed a
provocative question about dualities. Pablo Buiras helped develop
the memo example. David Naumann pointed out work on k-safety.
Tom Magrino, Yizhou Zhang, and the anonymous reviewers gave
us useful feedback on the paper.
Funding for this work was provided by NSF grants 1513797
and 1524052, and by a gift from Google. Any opinions, findings,
conclusions, or recommendations expressed here are those of the
author(s) and do not necessarily reflect those of these sponsors.