# Can't Touch This: Consistent Network Updates for Multiple Policies

**Authors:**
- Szymon Dudycz, University of Wroclaw, Poland
- Arne Ludwig, Technical University Berlin, Germany
- Stefan Schmid, Technical University Berlin, Germany and Aalborg University, Denmark

**Conference:**
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Computer networks, such as the Internet and data center networks, are critical infrastructures for many essential services. It is crucial that these networks maintain correctness criteria even during transitions from one valid configuration to another. This paper explores how to simultaneously update multiple routes in a Software-Defined Network (SDN) in a transiently consistent and efficient manner. Specifically, we focus on minimizing the number of switch interactions, referred to as "touches." Our main finding is that jointly optimizing multiple route updates in a consistent and efficient way is NP-hard, even for just two routing policies. However, we also present an efficient, polynomial-time algorithm that, given correct update schedules for individual policies, computes an optimal global schedule with minimal touches.

## 1. Introduction
The availability and protection of computer networks, including the Internet and data center (cloud) networks, have become high-priority concerns at both national and global levels. Many individuals and organizations heavily rely on the services provided by these networks. Despite the success of the Internet, its core has experienced ossification, with little evolution over the past decades. This raises questions about whether current network protocols will meet future dependability requirements [3].

Software-Defined Networking (SDN) is a promising paradigm that aims to overcome the ossification of the Internet. SDN centralizes control over multiple data-plane elements, enabling rapid innovation and supporting formal verifiability through a simple match-action paradigm. The traffic engineering flexibility and scalable network virtualization introduced by SDN [1], [14], [6], [16] have garnered significant attention in recent years.

However, while the concept of logically centralized network control is appealing, operating an SDN in a consistent and efficient manner remains challenging. An SDN must still be treated as a distributed system, presenting various challenges [5], [8], [17], [23], [25], [31], [37], [38]. One of these challenges is the asynchronous communication channel between switches and the controller, which can introduce non-negligible and varying delays [37], [43].

A fundamental issue receiving much attention is the consistent update of network routes [8], [22], [25], [37], [42]. A particularly interesting approach to address this problem is to proceed in rounds [22], [25]: in each round, a "safe subset" of switches is updated, ensuring that the network remains consistent regardless of the order and timing of the updates. This method involves updating a subset of switches, confirming their successful update (e.g., using acknowledgments [17]), and then scheduling the next subset for the subsequent round. This round-based approach avoids the need for packet tagging (which introduces overhead and challenges with middleboxes or multiple controllers [44], [5]) or additional TCAM entries (which are problematic due to fast table growth in both the Internet and highly virtualized data centers [4]). Additionally, it allows parts of the paths to become available sooner [25].

However, previous research has primarily focused on single-policy network update schemes, where either a single route [22], [37] or all destination-based routes to a single destination [25] are updated. In large and dynamic networks, it is likely that multiple routes need to be updated simultaneously [35]. For example, in a wireless network where users arrive in groups (e.g., at a train station) or in a Content Distribution Network where traffic is reassigned to servers in batches [10], updating multiple routes concurrently is common. Updating a switch and its data structures incurs a cost [43], [27], and batching updates is beneficial [18].

### Our Contributions
This paper initiates the study of how to jointly optimize the update of multiple routing policies (i.e., multiple complete source-destination paths) in a transiently consistent (loop-free) and efficient manner. We focus on loop-freedom, a fundamental consistency requirement, as loops can harm network dependability through packet drops and TCP reordering. There are several RFCs and standards [39] on loop-free layer-2 spanning tree constructions [36], avoiding microloops in MPLS [32], and loop-free IGP migration [7].

We show that the network update problem has interesting connections to Directed Feedback Vertex Set, Shortest Common Supersequence (SCS), and Supersequence Run problems [28]. Our main result is a negative one: we prove that the problem is computationally hard, even for two policies that can be updated in two rounds, by a rigorous reduction from Max-2SAT [19]. We complement this negative result by presenting an optimal polynomial-time algorithm to combine consistent update schedules computed for individual policies (e.g., using any existing algorithm [22], [25]) into a global schedule with a minimal number of touches.

### Organization
The remainder of this paper is organized as follows:
- **Section II** introduces preliminaries and presents our formal model.
- **Section III** provides proofs for the computational hardness.
- **Section IV** describes optimal polynomial-time algorithms under the assumption that only one switch is updated per round.
- **Section V** reviews related work.
- **Section VI** concludes the paper.

## 2. Model
We consider a network controlled by a logically centralized software (the controller) that communicates forwarding rule updates to the switches (nodes) over an asynchronous but reliable channel. Due to asynchrony, the controller must send simultaneous updates only to a "safe" subset of nodes, ensuring that the network configuration remains correct regardless of the order in which the updates take effect. Only after these updates are confirmed (acked), the next subset is updated.

The controller needs to simultaneously update \( k \) routing policies, defined over a set \( U \) of \( n = |U| \) to-be-updated nodes. Each policy update is a pair \( (\pi(i)_1, \pi(i)_2) \), where \( \pi(i)_1 \) is the old route and \( \pi(i)_2 \) is the new route of the \( i \)-th policy, \( i \in [1, k] \). Both \( \pi(i)_1 \) and \( \pi(i)_2 \) are simple directed paths. Packets of policy \( i \) are initially forwarded using the old rules (old edges) along \( \pi(i)_1 \) and eventually should be forwarded according to the new rules of \( \pi(i)_2 \) (new edges). Without loss of generality [22], we assume that both the old and new paths of the \( i \)-th update have the same source \( s_i \) and the same destination \( d_i \).

We assume that the \( k \) routing policies are defined over independent parts of the header space [33], meaning packets of different flows are forwarded according to different (non-aggregated) rules. However, multiple routes may include the same nodes. Therefore, when reasoning about consistency, we can focus on the correct update of different policies individually, but for efficiency, we coordinate the updates to shared nodes to minimize node interactions.

Packets should never be delayed or dropped at a node: whenever a packet arrives at a node, a matching forwarding rule should be present. Let, for each node \( v \in V \), \( \text{out}(i)_1(v) \) (resp. \( \text{in}(i)_1(v) \)) denote the outgoing (resp. incoming) edge according to policy \( \pi(i)_1 \). Similarly, let \( \text{out}(i)_2(v) \) (resp. \( \text{in}(i)_2(v) \)) denote the outgoing (resp. incoming) edge according to policy \( \pi(i)_2 \). We extend these definitions for entire node sets \( S \), i.e., \( \text{out}(i)_j(S) = \bigcup_{v \in S} \text{out}(i)_j(v) \) and analogously for \( \text{in}(i)_j(S) \).

Let \( U(i) \) be the set of to-be-updated nodes for the \( i \)-th policy. We want to assign each update in \( U(i) \) to a round, such that the resulting schedule fulfills certain consistency properties. Specifically, we aim to find an update schedule \( U(i)_1, U(i)_2, \ldots, U(i)_{r_i} \) where the subsets form a partition of \( U(i) \) (i.e., \( U(i) = U(i)_1 \uplus U(i)_2 \uplus \ldots \uplus U(i)_{r_i} \)), with the property that for any round \( t \), given that the updates \( U(i)_t \) for \( t' \leq t \) etc. are defined analogously. Since updates during round \( t \) occur asynchronously, an arbitrary subset of nodes \( X \subseteq U(i)_t \) still use the old rules, resulting in a temporary forwarding graph \( G_t(U(i), X, E_t) \) over nodes \( U(i) \) for this policy, where \( E_t = \text{out}(i)_1(U(i)_t \setminus X) \cup \text{out}(i)_2(X) \).

Figure 1 illustrates an example with two concurrent policy updates, showing the old and new policies and the need for two rounds of interactions (touches) to avoid loops.

![Example with two concurrent policy updates](fig1.png)

At least one node cannot install both updates simultaneously without creating a loop, and hence, needs two rounds of interactions (touches).