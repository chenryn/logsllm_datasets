Iauto_increment
|last_name
1varchar(30)
IYES
NULL
|first_name
1varchar(20)
1
1NULL
Iphone
varchar（10)
1NULL
email
varchar（50)
！
INULL
gender
char(1)
|YES
/
NULL
|birthday
Idate
NULL
profession
varchar（50)
YES
NULL
1city
varchar（50)
NULL
Istate
varchar(2)
NULL
status
varchar（20)
1NULL
interests
varchar（100)
IYES
INULL
seeking
|varchar（100)1YES
INULL
13rowsinset（0.01sec）>
294
第7章
---
## Page 327
多张表的数据库设计
小丑追踪数据库中的多张表
还记得第3章中追踪小丑的表吗？Dataville的小丑越来越多，
所以我们把原本的一张表扩大成更有效果的一组相关的表。
③的clown_tracking 表
clown _tracking
clown_info
name
last_seen
Cherry Hil Senior Center
F, red hoir, green dress. huge feet
ballecrs. little cor
aCTivities
Pickles
Elsie
Jock Green's party
BoB-Mart
shirt, boggy blue ponts
gir, blue suit, huge feet
mime
info_activities
activities
id
activity_id
activity_id
activity
原本的主要表已被别
减如下
我们很快就金说明这
个箭头的意义
clown_info
id
name
gender
info_location
location
description
id
location_id
location_id
location
接下来，我们会说明表为什么以这种
when
方式拆开，以及每个箭头和钥匙图案
的意义。讲解完后，我们就可以把原
则套用在gregs_list上。
你认为箭头代表什么？钥匙图案的意义呢？
当前位置
295
---
## Page 328
建立数据库模式
clown_tracking数据库模式
旧表。
模式（schema）用于表达数据库内的结构，
包括表和列，还有各种他们之间相互连接
low
trackin
clown_infe
last_seen
的方式。
Elsie
Cherry Hill Senio
or Cepter
, red h
dress, huge feet
balloons, Iittle car
Pickles
Jock Green's party
Sruggles
Bll-Mcrt
umbrella
Me.Habo
创建数据库的视觉解析图，在设计查询
时有助于理解数据相连的方式，但模式
（schema）也能以文字形式表达。
info_activities
activities
id一
activity_idO
activity_id
activity
从旧表保留下来的
部分。
clown_info
其他存储在clown_ttacking表
中的列已经被拆解进不同
ido
的表中。
name
gender
info_location
location
description
id
location_idO
location_id
location
when
对数据库内的数据描述
（列和表），以及
任何相关对象和各种连接方式的描述就称为
SCHEMA，模式。
296
第7章
---
## Page 329
多张表的数据库设计
表变图表的简单方式
我们已经看到小丑追踪表的转换结果，接着示范如何以相同方式
修改my_contacts表。
到目前为止，每次查看表时，我们都是以最上面的列名和下面的
数据来描述，或者在终端窗口中使用DESCRIBE语句。在只有一
张表的情况下，这两种方式就足够了，但在想要创建多张表的图
示时，它们就不太实用了。
以下是my_contacts表的速记方式：
表名。
my_contacts
钢起图素表示这一
列是主键。
contact_ido-
last_name
first_name
phone
email
gender
表中的所有列，还依它
birthday
一们在表中的顺序排列。
profession
city
为表创建图表可以协助
state
我们分别看待表的设计
status
interests
与其中的数据。
seeking
当前位置》
297
---
## Page 330
把一张表变为两张表
如何从一张表变成两张
以兴趣列的现有状态而言，真的很难查询。同一列中包含多个值，
my_contacts
contact_id
如果试着把兴趣分开存储在多个列中，则会使查询非常难写。
last_name
当前的my_contacts。
first_name
看看当前的my_contacts表，它的兴趣列并不具有原子性。只有
尚未具有原子性。
phone
email
一个好办法能解决原子性的问题：我们需要另外一张用来存储兴趣
gender
的表。
birthday
profession
city
state
status
interests
seeking
移出兴趣列并把它存储至专属表。
第一步是把interests列移至新表中。
我们将增加一个id
interests
interests
字段来确保没有重
int_id
复的列。
interest
my.contacts
lost_nome
contact_id
intetest列为VARCHAR类型，用来
first_name
存储实际的兴趣。它的内容为
phone
email
"hiking'
‘cookins’等。
birthday
profession
city
status
state
新设立的兴趣表将存储my_contacts表中的所有兴
趣数据，每项兴趣为一行。
298
第7章
---
## Page 331
多张表的数据库设计
添加足以识别my_contacts表中每个人的兴趣的列。
我们已经把兴趣从my_contacts表中移出，但无法识别各项兴趣
分别属于谁。我们需要把my_contacts表中的某些列加人新表来
建立连接。
其中一种方式是把first_name与last_name列加入兴趣表。
my_contacts
contact_id
last_name
first_name
interests
phone
int_id
email
interest
gender
first_nome
这两列会让我们知递每项
birthday
last_name
兴趣属于谁。
profession
city
state
status
seeking
当某项兴趣属于某位联络人时就符
合比对的条件。interests表能找出
多个属于同一位联络人的兴趣。这
样就可以让多项兴趣与同一个人产
生美联。
我们的想法没错，但first_name与last_name列并非是连接这
两张表的最佳选择。
为什么呢？
当前位置
299
---
## Page 332
在图表中加入链接
在图表中加入链接
让我们l一起仔细地看一下my_contacts表。
这部分是设计草稿：
这部分是新的模式（schema）：
my_contacts
interests 表：
contact_idO
每一行包招
last_name
first_name
first_name
interests
last_name
phone
int_idO
my_contacts装
interest
email
last_name
(interests别已
gender
first_nome
（氮
birthday
interest
无论如何.通过kizst_name与
profession
这些线条表示相符的数据。各
last_mame产生哥张表间的连
city
state
位的手福不见得像我们的图一
接，记录每个人的各项兴趣。
status
样棱角分明，不过这样比较
seeking
易于观察。
请注意，连接表中相符列的线段都采取先向右弯的格
式。因为使用了标准的模式（schema）图示符号，任
何SQL开发者均可理解我们的草图。
下例是使用图中两张表中的数据的SELECT语句示例。
2
SELECT first
_name,
last
name
SELEcT interest FRoM interests
FROM my_contacts
WHERE first_name='Somename'
WHERE (a bunch of conditions);
AND last_name='Lastname';
别担心叠询看起来好像没效率的样子。本例只是呈现
如何以一张表的内容来提取另一张表的内容。（我们
很快就金讨论到更好的方法。）
300
第7章
---
## Page 333
多张表的数据库设计
磨笔
请用本页的空白设计更多可以添加进greg_list数据库的新表，
以协助我们追踪更多兴趣。
别把心思放在把图画得整洁清楚上，现在的重点是要想出新主
意。我们已经画出了示范，但它还有缺陷。
interests 张：
每一行包报
first_name
my_contacts&
last_name
interest
(interests列已银
（疯
无论如何.通过sirst_name与
last_name产生两张表间的连
接，记录每个人的各项兴趣。
当前位置
301
---
## Page 334
磨笔上阵解答
磨笔上阵
解答
请用本页的空白设计更多可以添加进greg_list数据库的新表、
以协助我们追踪更多兴趣。
别把心思放在把图画得整洁清楚上，现在的重点是要想出新主
意。我们已经画出了示范，但它还有缺陷。
使用lirst_name与last_name连接兴趣表其实并不
interests张：
等一行包招
好。my_contacts表中很可能有许多人同名同姓，结
first_name
果找到错误的人与错误的兴趣。我们最好使用主键
last_name
来连接表。
interest
(interests列已
（疯
无论如何，通过fitst_name
与last_name产生两张表间的
连接，记录每个人的各项兴
趣。
与其使用可能重复的kitst_name与last_name，
不如使用contact_id来连接表：
interests表
每一行包括
int_id
interest
contact_id
my_contacts表
（intevests列已被移
除）
通过使用contact_id.才能用到真
正独一无二的值。我们知道兴趣搭
配某个contact_id后会绝对只属于
my_contacts中的某一行。
302
第7章
---
## Page 335
多张表的数据库设计
连接你的表
第一张草图的连接问题出在我们试着以first_name与last_name
字段连接（connect）两张表。如果my_contacts表中有相同的
first_name与last_name该怎么办？
interests张：
等一行包指
first_name
如果有些人的sitst_name 与
my_contacts张
last_name
interest
last_name相同.他们的兴趣
(interests别已银
金被搞混！
（润
我们需要独一无二的列来连接一切。幸好，我们已经开始规范化
了，在my_contacts表中确实有独一无二的列：主键（primary
key) contact_id。
可以把my_contacts表中的主键值作为interests表的一列。利
用主键还有一项优点，就是我们可以能过主键列知道某个兴趣属于
my_contacts表中的某个人。这种方式称为外键（foreignkey）。
外键是表中的某一
my_contacts
通过为每条记录提供主键
contact_idow
来确定这个新表正处于第
列，它引用到另一个
last_name
一范式。
first_name
表的主键。
phone
interests
email
int_id O
gender
birthday
interest
profession
contact_id
city
FORECNKEY可告知兴
state
status
越属于my_contacts表中
seeking
的哪个人。
当前位置
303
---
## Page 336
外键入门
外键二三事
外键可能与它引用的主键
名称不同。
外键使用的主键也被称为父键（parentkey）
主键所在的表又被称为父表（parenttable）。
外键能用于确认一张表中的行与另一张表中
的行相对应。
外键的值可以是NULL，即使主键值不可为
NULL。
外键值不需唯一-事实上，外键通常都没
有唯一性。
我知运外键可以让我连接两
张表。但是如累外键是NULL，它有什么作用
吗？有办法确认外键连接至父键了吗？
外键为NULL，表示在父表中没有相符的主
键。
但我们可以确认外键包含有意义、已存储在父表中的
值，请通过约束（constrant）来实现。
304
第7章
---
## Page 337
多张表的数据库设计
外键约束
创建一张表并加上可作为外键的列虽然很简单，但除非你利
用CREATE或ALTER语句来指定外键，否则都不算是真的外键。
创建在结构内的键被称为约束（constraint）
创建外键作为表的
约束提供了明确的
请托CONSTRAJNT想象成表
优势。
必须遵守的规则。
如果违反了规则，
插入外键列的值必须已经存在于父表
的来源列中，这是引用完整性
约束会阻止我们意
（referentialintegrity）。
外破坏表。