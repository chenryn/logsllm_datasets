title:An Evaluation of the Google Chrome Extension Security Architecture
author:Nicholas Carlini and
Adrienne Porter Felt and
David A. Wagner
An Evaluation of the Google Chrome Extension Security Architecture
Nicholas Carlini, Adrienne Porter Felt, and David Wagner
University of California, Berkeley
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
Vulnerabilities in browser extensions put users at risk by
providing a way for website and network attackers to
gain access to users’ private data and credentials. Exten-
sions can also introduce vulnerabilities into the websites
that they modify. In 2009, Google Chrome introduced
a new extension platform with several features intended
to prevent and mitigate extension vulnerabilities: strong
isolation between websites and extensions, privilege sep-
aration within an extension, and an extension permission
system. We performed a security review of 100 Chrome
extensions and found 70 vulnerabilities across 40 exten-
sions. Given these vulnerabilities, we evaluate how well
each of the security mechanisms defends against exten-
sion vulnerabilities. We ﬁnd that the mechanisms mostly
succeed at preventing direct web attacks on extensions,
but new security mechanisms are needed to protect users
from network attacks on extensions, website metadata at-
tacks on extensions, and vulnerabilities that extensions
add to websites. We propose and evaluate additional de-
fenses, and we conclude that banning HTTP scripts and
inline scripts would prevent 47 of the 50 most severe vul-
nerabilities with only modest impact on developers.
1
Introduction
Browser extensions can introduce serious security vul-
nerabilities into users’ browsers or the websites that ex-
tensions interact with [20, 32]. In 2009, Google Chrome
introduced a new extension platform with several secu-
rity mechanisms intended to prevent and mitigate ex-
tension vulnerabilities. Safari and Mozilla Firefox have
since adopted some of these mechanisms for their own
extension platforms. In this paper, we evaluate the se-
curity of the widely-deployed Google Chrome extension
platform with the goal of understanding the practical suc-
cesses and failures of its security mechanisms.
Most extensions are written by well-meaning devel-
opers who are not security experts. These non-expert
developers need to build extensions that are robust to at-
tacks originating from malicious websites and the net-
work. Extensions can read and manipulate content from
websites, make unfettered network requests, and access
browser userdata like bookmarks and geolocation. In the
hands of a web or network attacker, these privileges can
be abused to collect users’ private information and au-
thentication credentials.
Google Chrome employs three mechanisms to prevent
and mitigate extension vulnerabilities:
• Privilege separation. Chrome extensions adhere to
a privilege-separated architecture [23]. Extensions
are built from two types of components, which are
isolated from each other: content scripts and core
extensions. Content scripts interact with websites
and execute with no privileges. Core extensions do
not directly interact with websites and execute with
the extension’s full privileges.
• Isolated worlds. Content scripts can read and mod-
ify website content, but content scripts and websites
have separate program heaps so that websites can-
not access content scripts’ functions or variables.
• Permissions. Each extension comes packaged with
a list of permissions, which govern access to the
browser APIs and web domains. If an extension has
a core extension vulnerability, the attacker will only
gain access to the permissions that the vulnerable
extension already has.
In this work, we provide an empirical analysis of
these security mechanisms, which together comprise a
state-of-the-art least privilege system. We analyze 100
Chrome extensions, including the 50 most popular ex-
tensions, to determine whether Chrome’s security mech-
anisms successfully prevent or mitigate extension vulner-
abilities. We ﬁnd that 40 extensions contain at least one
type of vulnerability. Twenty-seven extensions contain
core extension vulnerabilities, which give an attacker full
control over the extension.
Based on this set of vulnerabilities, we evaluate the
effectiveness of each of the three security mechanisms.
Our primary ﬁndings are:
at preventing content script vulnerabilities.
• The isolated worlds mechanism is highly successful
• The success of the isolated worlds mechanism ren-
ders privilege separation unnecessary. However,
privilege separation would protect 62% of exten-
sions if isolated worlds were to fail. In the remain-
ing 38% of extensions, developers either intention-
ally or accidentally negate the beneﬁts of privilege
separation. This highlights that forcing developers
to divide their software into components does not
automatically achieve security on its own.
• Permissions signiﬁcantly reduce the severity of half
of the core extension vulnerabilities, which demon-
strates that permissions are effective at mitigating
vulnerabilities in practice. Additionally, dangerous
permissions do not correlate with vulnerabilities:
developers who write vulnerable extensions use per-
missions the same way as other developers.
Although these mechanisms reduce the rate and scope
of several classes of attacks, a large number of high-
privilege vulnerabilities remain.
We propose and evaluate four additional defenses. Our
extension review demonstrates that many developers do
not follow security best practices if they are optional, so
we propose four mandatory bans on unsafe coding prac-
tices. We quantify the security beneﬁts and functional-
ity costs of these restrictions on extension behavior. Our
evaluation shows that banning inline scripts and HTTP
scripts would prevent 67% of the overall vulnerabilities
and 94% of the most dangerous vulnerabilities at a rela-
tively low cost for most extensions. In concurrent work,
Google Chrome implemented Content Security Policy
(CSP) for extensions to optionally restrict their own be-
havior. Motivated in part by our study [5], future versions
of Chrome will use CSP to enforce some of the manda-
tory bans that we proposed and evaluated.
Contributions. We contribute the following:
• We establish the rate at which extensions contain
different types of vulnerabilities, which should di-
rect future extension security research efforts.
• We perform the ﬁrst large-scale study of the ef-
fectiveness of privilege separation when developers
who are not security experts are required to use it.
• Although it has been assumed that permissions mit-
igate vulnerabilities [12, 14, 10], we are the ﬁrst to
evaluate the extent to which this is true in practice.
• We propose and evaluate new defenses. This study
partially motivated Chrome’s adoption of a new
mandatory security mechanism.
2 Extension Security Background
2.1 Threat Model
In this paper, we focus on non-malicious extensions that
are vulnerable to external attacks. Most extensions are
written by well-meaning developers who are not secu-
rity experts. We do not consider malicious extensions;
preventing malicious extensions requires completely dif-
ferent tactics, such as warnings, user education, security
scans of the market, and feedback and rating systems.
Benign-but-buggy extensions face two types of attacks:
• Network attackers. People who use insecure net-
works (e.g., public WiFi hotspots) may encounter
network attackers [26, 21]. A network attacker’s
goal is to obtain personal information or credentials
from a target user. To achieve this goal, a network
attacker will read and alter HTTP trafﬁc to mount
man-in-the-middle attacks.
(Assuming that TLS
works as intended, a network attacker cannot com-
promise HTTPS trafﬁc.) Consequently, data and
scripts loaded over HTTP may be compromised.
If an extension adds an HTTP script – a JavaScript
ﬁle loaded over HTTP – to itself, a network attacker
can run arbitrary JavaScript within the extension’s
context.
If an extension adds an HTTP script to
an HTTPS website, then the website will no longer
beneﬁt from the conﬁdentiality, integrity, and au-
thentication guarantees of HTTPS. Similarly, insert-
ing HTTP data into an HTTPS website or extension
can lead to vulnerabilities if the untrusted data is al-
lowed to execute as code.
• Web attackers. Users may visit websites that host
malicious content (e.g., advertisements or user com-
ments). A website can launch a cross-site script-
ing attack on an extension if the extension treats the
website’s data or functions as trusted. The goal of
a web attacker is to gain access to browser userdata
(e.g., history) or violate website isolation (e.g., read
another site’s password).
Extensions are primarily written in JavaScript and
HTML, and JavaScript provides several methods for con-
verting strings to code, such as eval and setTimeout.
If used improperly, these methods can introduce code
injection vulnerabilities that compromise the extension.
Data can also execute if it is written to a page as
HTML instead of as text, e.g.,
through the use of
document.write or document.body.innerHTML. Ex-
tension developers need to be careful to avoid passing
unsanitized, untrusted data to these execution sinks.
Figure 1: The architecture of a Google Chrome extension.
2.2 Chrome Extension Security Model
Many Firefox extensions have publicly suffered from
vulnerabilities [20, 32]. To prevent this, the Google
Chrome extension platform was designed to protect users
from vulnerabilities in benign-but-buggy extensions [4].
It features three primary security mechanisms:
• Privilege separation. Every Chrome extension is
composed of two types of components: zero or
more content scripts and zero or one core extension.
Content scripts read and modify websites as needed.
The core extension implements features that do not
directly involve websites, including browser UI el-
ements, long-running background jobs, an options
page, etc. Content scripts and core extensions run in
separate processes, and they communicate by send-
ing structured clones over an authenticated channel.
Each website receives its own separate, isolated in-
stance of a given content script. Core extensions can
access Chrome’s extension API, but content scripts
cannot. Figure 1 illustrates the relationship between
components in a Chrome extension.
The purpose of this architecture is to shield the priv-
ileged part of an extension (i.e., the core extension)
from attackers. Content scripts are at the highest
risk of attack because they directly interact with
websites, so they are low-privilege. The sheltered
core extension is higher-privilege. As such, an at-
tack that only compromises a content script does
not pose a signiﬁcant threat to the user unless the
attack can be extended across the message-passing
channel to the higher-privilege core extension.
1.4% of extensions also include binary plugins in
addition to content scripts and core extensions [12].
Binary plugins are native executables and are not
protected by any of these security mechanisms. We
do not discuss the security of binary plugins in this
paper because they are infrequently used and must
undergo a manual security review before they can
be posted in the Chrome Web Store.
• Isolated worlds. The isolated worlds mechanism is
intended to protect content scripts from web attack-
ers. A content script can read or modify a website’s
DOM, but the content script and website have sepa-
rate JavaScript heaps with their own DOM objects.
Consequently, content scripts and websites never
exchange pointers. This should make it more dif-
ﬁcult for websites to tamper with content scripts.1
• Permissions. By default, extensions cannot use
parts of the browser API that impact users’ privacy
or security. In order to gain access to these APIs, a
developer must specify the desired permissions in a
ﬁle that is packaged with the extension. For exam-
ple, an extension must request the bookmarks per-
mission to read or alter the user’s bookmarks. Per-
missions also restrict extensions’ use of cross-origin
XMLHttpRequests; an extension needs to specify
the domains that it wants to interact with. Only the
core extension can use permissions. Content scripts
cannot invoke browser APIs or make cross-origin
XHRs.2 A content script has only two privileges:
it can access the website it is running on, and send
messages to its core extension.
Permissions are intended to mitigate core extension
vulnerabilities.3 An extension is limited to the per-
missions that its developer requested, so an attacker
cannot request new permissions for a compromised
extension. Consequently, the severity of a vulnera-
bility in an extension is limited to the API calls and
domains that the permissions allow.
1Although isolated worlds separates websites from content scripts,
it not a form of privilege separation; privilege separation refers to tech-
niques that isolate parts of the same application from each other.
2In newer versions of Chrome, content scripts can make cross-
origin XHRs. However, this was not permitted at the time of our study.
3Extension permissions are shown to users during installation, so
they may also have a role in helping users avoid malicious extensions;
however, we focus on benign-but-buggy extensions in this work.
ExtensionContent ScriptCore ExtensionBrowser APIServersWebsite[attacker]Network attacker(if website is HTTP)Network attacker(if connection is HTTP)Google Chrome was the ﬁrst browser to implement
privilege separation, isolated worlds, and permissions for
an extension system. These security mechanisms were
intended to make Google Chrome extensions safer than
Mozilla Firefox extensions or Internet Explorer browser
helper objects [4]. Subsequently, Safari adopted an iden-
tical extension platform, and Mozilla Firefox’s new Add-
on SDK (Jetpack) privilege-separates extension mod-
ules. All of our study ﬁndings are directly applicable to
Safari’s extension platform, and the privilege separation
evaluation likely translates to Firefox’s Add-on SDK.
Contemporaneously with our extension review, the
Google Chrome extension team began to implement
a fourth security mechanism: Content Security Policy
(CSP) for extensions. CSP is a client-side HTML pol-
icy system that allows website developers to restrict what
types of scripts can run on a page [29]. It is intended to
prevent cross-site scripting attacks by blocking the exe-
cution of scripts that have been inserted into pages. By
default, CSP disables inline scripts: JavaScript will not
run if it is in a link, between  tags, or in an
event handler. The page’s policy can specify a set of
trusted servers, and only scripts from these servers will
execute. Consequently, any attacker that were to gain
control of a page would only be able to add code from
the trusted servers (which should not lead to harm). CSP
can also restrict the use of eval, XHR, and iframes. In
Chrome, CSP applies to extensions’ HTML pages [28].
3 Extension Security Review
We reviewed 100 Google Chrome extensions from the
ofﬁcial directory. This set is comprised of the 50 most
popular extensions and 50 randomly-selected extensions
from June 2011.4 Section 3.1 presents our extension re-
view methodology. Our security review found that 40%
of the extensions contain vulnerabilities, and Section 3.2
describes the vulnerabilities. Section 3.3 presents our ob-
servation that 31% of developers do not follow even the
simplest security best practices. We notiﬁed most of the
authors of vulnerable extensions (Section 3.4).
3.1 Methodology
We manually reviewed the 100 selected extensions, using
a three-step security review process:
1. Black-box testing. We exercised each extension’s
user interface and monitored its network trafﬁc to
observe inputs and behavior. We looked for in-
stances of network data being inserted into the
4We excluded four extensions because they included binary plugins;
they were replaced with the next popular or random extensions. The
directory’s popularity metric is primarily based on the number of users.
DOM of a page. After observing an extension, we
inserted malicious data into its network trafﬁc (in-
cluding the websites it interacts with) to test poten-
tial vulnerabilities.
2. Source code analysis. We examined extensions’
source code to determine whether data from an
untrusted source could ﬂow to an execution sink.
After manually reviewing the source code, we
used grep to search for any additional sources or
sinks that we might have missed. For sources,
we looked for static and dynamic script
inser-
tion, XMLHttpRequests, cookies, bookmarks, and
reading websites’ DOMs. For sinks, we looked
for uses of eval, setTimeout, document.write,
innerHTML, etc. We then manually traced the call
graph to ﬁnd additional vulnerabilities.
3. Holistic testing. We matched extensions’ source
code to behaviors we identiﬁed during black-box
testing. With our combined knowledge of an ex-
tension’s source code, network trafﬁc, and user in-
terface, we attempted to identify any additional be-
havior that we had previously missed.
We then veriﬁed that all of the vulnerabilities could occur
in practice by building attacks. Our goal was to ﬁnd all
vulnerabilities in every extension.
During our review, we looked for three types of vul-
nerabilities: vulnerabilities that extensions add to web-
sites (e.g., HTTP scripts on HTTPS websites), vulnera-
bilities in content scripts, and vulnerabilities in core ex-
tensions. Some content script vulnerabilities may also
be core extension vulnerabilities, depending on the ex-
tensions’ architectures. Core extension vulnerabilities
are the most severe because the core is the most privi-
leged extension component. We do not report vulnera-
bilities if the potential attacker is a trusted website (e.g.,
https://mail.google.com) and the potentially mali-
cious data is not user-generated; we do not believe that
well-known websites are likely to launch web attacks.
After our manual review, we applied a well-known
commercial static analysis tool to six extensions, with
custom rules. However, our manual review identiﬁed
signiﬁcantly more vulnerabilities, and the static analysis
tool did not ﬁnd any additional vulnerabilities because of
limitations in its ability to track strings. Prior research
has similarly found that a manual review by experts un-
covers more bugs than static analysis tools [30]. Our
other alternative, VEX [3], was not built to handle several
of the types of attacks that we reviewed. Consequently,
we did not pursue static analysis further.
Web
Network
Attacker
Attacker
Vulnerable Component
Core extension
Content script
Website
Table 1: 70 vulnerabilities, by location and threat model.
50
1