# An Evaluation of the Google Chrome Extension Security Architecture

**Authors:**
- Nicholas Carlini
- Adrienne Porter Felt
- David A. Wagner

**Affiliation:**
University of California, Berkeley

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

## Abstract

Vulnerabilities in browser extensions can expose users to risks by providing a pathway for website and network attackers to access private data and credentials. Extensions can also introduce vulnerabilities into the websites they modify. In 2009, Google Chrome introduced a new extension platform with several features designed to prevent and mitigate extension vulnerabilities, including strong isolation between websites and extensions, privilege separation within an extension, and an extension permission system. We conducted a security review of 100 Chrome extensions and identified 70 vulnerabilities across 40 extensions. Our evaluation assesses the effectiveness of these security mechanisms in defending against extension vulnerabilities. While the mechanisms are generally successful in preventing direct web attacks on extensions, additional defenses are needed to protect against network attacks, metadata attacks, and vulnerabilities that extensions introduce to websites. We propose and evaluate additional defenses, concluding that banning HTTP scripts and inline scripts would prevent 47 of the 50 most severe vulnerabilities with minimal impact on developers.

## 1. Introduction

Browser extensions can introduce serious security vulnerabilities to users' browsers or the websites they interact with [20, 32]. In 2009, Google Chrome introduced a new extension platform with several security mechanisms aimed at preventing and mitigating extension vulnerabilities. Safari and Mozilla Firefox have since adopted some of these mechanisms for their own extension platforms. This paper evaluates the security of the widely-deployed Google Chrome extension platform, focusing on the practical successes and failures of its security mechanisms.

Most extensions are developed by well-meaning but non-expert developers who need to build robust extensions that can withstand attacks from malicious websites and networks. These extensions can read and manipulate website content, make unrestricted network requests, and access browser user data such as bookmarks and geolocation. In the hands of a web or network attacker, these privileges can be abused to collect users' private information and authentication credentials.

Google Chrome employs three primary mechanisms to prevent and mitigate extension vulnerabilities:

- **Privilege Separation:** Chrome extensions follow a privilege-separated architecture [23], consisting of content scripts and core extensions. Content scripts interact with websites and execute without privileges, while core extensions do not directly interact with websites and execute with full privileges.
- **Isolated Worlds:** Content scripts and websites have separate JavaScript heaps, preventing websites from accessing content scripts' functions or variables.
- **Permissions:** Each extension is packaged with a list of permissions that govern access to browser APIs and web domains. If a core extension is vulnerable, the attacker gains only the permissions the extension already has.

In this work, we provide an empirical analysis of these security mechanisms, which together form a state-of-the-art least privilege system. We analyzed 100 Chrome extensions, including the 50 most popular ones, to determine the effectiveness of Chrome's security mechanisms in preventing or mitigating extension vulnerabilities. We found that 40 out of 100 extensions contain at least one type of vulnerability, with 27 having core extension vulnerabilities that give an attacker full control over the extension.

Based on our findings, we evaluate the effectiveness of each security mechanism and propose additional defenses. Our primary findings are:

- The isolated worlds mechanism is highly effective at preventing content script vulnerabilities.
- Privilege separation, while unnecessary due to the success of isolated worlds, would protect 62% of extensions if isolated worlds were to fail. However, in 38% of extensions, developers either intentionally or accidentally negate the benefits of privilege separation.
- Permissions significantly reduce the severity of half of the core extension vulnerabilities, demonstrating their effectiveness in practice. Additionally, there is no correlation between dangerous permissions and vulnerabilities; developers who write vulnerable extensions use permissions similarly to other developers.

Although these mechanisms reduce the rate and scope of several types of attacks, many high-privilege vulnerabilities remain. We propose and evaluate four additional defenses, including mandatory bans on unsafe coding practices. Our evaluation shows that banning inline scripts and HTTP scripts would prevent 67% of overall vulnerabilities and 94% of the most dangerous vulnerabilities with minimal impact on most extensions. Google Chrome has implemented Content Security Policy (CSP) for extensions, partly motivated by our study, to enforce some of the proposed mandatory bans.

### Contributions

- We establish the rate at which different types of vulnerabilities occur in extensions, guiding future extension security research.
- We conduct the first large-scale study of the effectiveness of privilege separation when used by non-expert developers.
- We are the first to evaluate the extent to which permissions mitigate vulnerabilities in practice.
- We propose and evaluate new defenses, partially motivating Chrome's adoption of a new mandatory security mechanism.

## 2. Extension Security Background

### 2.1 Threat Model

This paper focuses on non-malicious extensions that are vulnerable to external attacks. Most extensions are written by well-meaning but non-expert developers. Malicious extensions, which require different prevention tactics such as warnings, user education, security scans, and feedback systems, are not considered here.

Benign-but-buggy extensions face two types of attacks:

- **Network Attackers:** Users on insecure networks (e.g., public WiFi) may encounter network attackers [26, 21] who aim to obtain personal information or credentials. Network attackers can read and alter HTTP traffic, compromising data and scripts loaded over HTTP. If an extension adds an HTTP script, a network attacker can run arbitrary JavaScript within the extension's context. Similarly, inserting HTTP data into an HTTPS website or extension can lead to vulnerabilities if the untrusted data is allowed to execute as code.
- **Web Attackers:** Users may visit websites hosting malicious content (e.g., advertisements or user comments). A website can launch cross-site scripting (XSS) attacks on an extension if the extension treats the website's data or functions as trusted. The goal of a web attacker is to gain access to browser user data (e.g., history) or violate website isolation (e.g., read another site's password).

Extensions are primarily written in JavaScript and HTML, and improper use of methods like `eval` and `setTimeout` can introduce code injection vulnerabilities. Data can also execute if it is written to a page as HTML instead of text, e.g., using `document.write` or `document.body.innerHTML`. Developers must avoid passing unsanitized, untrusted data to these execution sinks.

### 2.2 Chrome Extension Security Model

Many Firefox extensions have suffered from vulnerabilities [20, 32]. To prevent this, the Google Chrome extension platform was designed to protect users from vulnerabilities in benign-but-buggy extensions [4]. It features three primary security mechanisms:

- **Privilege Separation:** Every Chrome extension consists of content scripts and a core extension. Content scripts interact with websites, while the core extension implements features that do not directly involve websites, such as browser UI elements, background jobs, and options pages. Content scripts and core extensions run in separate processes and communicate via authenticated channels. The purpose of this architecture is to shield the privileged part of the extension (the core extension) from attackers. Content scripts, being low-privilege, are at the highest risk of attack.
- **Isolated Worlds:** This mechanism protects content scripts from web attackers by ensuring that content scripts and websites have separate JavaScript heaps. This prevents websites from tampering with content scripts.
- **Permissions:** By default, extensions cannot use parts of the browser API that impact user privacy or security. Developers must specify desired permissions in a file packaged with the extension. Permissions also restrict cross-origin XMLHttpRequests, limiting the domains an extension can interact with. Only the core extension can use permissions, and content scripts have limited privileges, such as accessing the website they are running on and sending messages to the core extension.

Google Chrome was the first browser to implement privilege separation, isolated worlds, and permissions for an extension system. These mechanisms were intended to make Chrome extensions safer than Firefox extensions or Internet Explorer browser helper objects [4]. Safari later adopted an identical extension platform, and Firefox's new Add-on SDK (Jetpack) uses privilege separation. Our findings are directly applicable to Safari's extension platform and likely translate to Firefox's Add-on SDK.

Contemporaneously with our extension review, the Google Chrome extension team began implementing a fourth security mechanism: Content Security Policy (CSP) for extensions. CSP allows website developers to restrict what types of scripts can run on a page, preventing XSS attacks by blocking the execution of injected scripts. By default, CSP disables inline scripts, and the page's policy can specify trusted servers. CSP can also restrict the use of `eval`, XHR, and iframes. In Chrome, CSP applies to extensions' HTML pages [28].

## 3. Extension Security Review

We reviewed 100 Google Chrome extensions from the official directory, comprising the 50 most popular extensions and 50 randomly selected extensions from June 2011. Section 3.1 presents our methodology, Section 3.2 describes the identified vulnerabilities, and Section 3.3 discusses our observation that 31% of developers do not follow even the simplest security best practices. We notified most authors of vulnerable extensions (Section 3.4).

### 3.1 Methodology

We manually reviewed the 100 selected extensions using a three-step security review process:

1. **Black-box Testing:** We exercised each extension's user interface and monitored its network traffic to observe inputs and behavior. We looked for instances of network data being inserted into the DOM of a page. After observing an extension, we inserted malicious data into its network traffic to test potential vulnerabilities.
2. **Source Code Analysis:** We examined the source code to determine whether data from an untrusted source could flow to an execution sink. We searched for static and dynamic script insertion, XMLHttpRequests, cookies, bookmarks, and reading websites' DOMs. For sinks, we looked for uses of `eval`, `setTimeout`, `document.write`, `innerHTML`, etc. We then manually traced the call graph to find additional vulnerabilities.
3. **Holistic Testing:** We matched the source code to behaviors identified during black-box testing. With combined knowledge of the source code, network traffic, and user interface, we attempted to identify any additional behavior that we had previously missed.

We verified that all identified vulnerabilities could occur in practice by building attacks. Our goal was to find all vulnerabilities in every extension.

During our review, we looked for three types of vulnerabilities: those that extensions add to websites (e.g., HTTP scripts on HTTPS websites), vulnerabilities in content scripts, and vulnerabilities in core extensions. Core extension vulnerabilities are the most severe because the core is the most privileged component. We did not report vulnerabilities if the potential attacker was a trusted website and the potentially malicious data was not user-generated.

After our manual review, we applied a well-known commercial static analysis tool to six extensions with custom rules. However, our manual review identified significantly more vulnerabilities, and the static analysis tool did not find any additional vulnerabilities due to limitations in tracking strings. Prior research has similarly found that a manual review by experts uncovers more bugs than static analysis tools [30]. VEX [3], another alternative, was not built to handle several types of attacks we reviewed, so we did not pursue static analysis further.

| Vulnerable Component | Web Attacker | Network Attacker |
|----------------------|---------------|------------------|
| Core Extension       | 50            | 1                |

Table 1: 70 vulnerabilities, by location and threat model.