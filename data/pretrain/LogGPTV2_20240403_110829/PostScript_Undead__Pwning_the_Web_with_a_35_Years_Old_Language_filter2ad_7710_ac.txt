### Exploitation of Printer Vulnerabilities via PostScript

In June 2017, Baines [7] identified specially crafted PJL commands to exploit a known vulnerability. We discovered an alternative method to exploit the same weakness using PostScript code. An example exploit that gains a permanent reverse shell on printer startup is shown in Listing 7. This exploit was tested on an HP OfficeJet Pro 8210.

```postscript
%!PS

/outfile (../var/etc/profile.d/telnetd.sh) (w+) file def
outfile (nc attacker.com 31337 -e /bin/sh) writestring
outfile closefile
```

**Listing 7.** Exploiting CVE-2017-2741 to gain a reverse shell on HP printers.

This exploit can be embedded in a malicious PostScript or PDF file and triggered during direct PDF printing, which is becoming increasingly common, or from a USB stick on a printer model vulnerable to CVE-2017-2741. The printer interprets and executes the PostScript code within the PDF file, leading to code execution. The worm can propagate to other vulnerable printers in the network by printing the same PostScript/PDF file (e.g., by sending it to port 9100/tcp of all reachable network printers). If a local print server like CUPS is involved in the print job deployment, it can also be infected because CUPS relies on Ghostscript for PostScript/PDF processing.

For ethical reasons, we did not test the worm in a live environment. However, we are confident that such a hybrid exploit, viable on cloud servers, Linux clients, and printers, is a relevant concept from an attacker's perspective.

### Related Work

We provide an overview of significant prior research on PostScript, PDF, and related security issues.

#### PostScript

The potential dangers of PostScript have been highlighted by Goldberg et al. [14] and Sibert [22], but systematic exploitation of PostScript language functions has not been widely documented. Backes et al. [6] demonstrated that PostScript documents can be crafted to display different content in different viewers, allowing them to manipulate sales agreements. Costin [9, 10, 12] provided a comprehensive discussion of printer security, including a survey of malicious PostScript commands. They also showed how to abuse proprietary PostScript extensions to execute commands and access memory on Xerox devices. Additionally, they demonstrated that a malicious PostScript payload can be executed conditionally based on the environment. M¨uller et al. [18] further explored the exploitation of PostScript and other languages supported by network printers, discussing the risks of executing PostScript code in Google Cloud Print. A study by Hong and Zheng [15] used PostScript payloads to attack web applications.

#### PDF

Several studies [8, 20, 21] focused on abusing legitimate features of PDF to create malware and execute arbitrary code on the victim's system. Baccas [5] described the detection of potentially dangerous code within PDF files by scanning for known malicious structures. However, PostScript was not within the scope of their research. Magazinius et al. [16] used polyglot-based attacks, writing code valid in multiple programming languages, and embedding it in PDF files to invoke arbitrary URLs and bypass browser restrictions. Markwood et al. [17] showed that specially crafted fonts embedded in PDF files can display different text depending on the processing context, fooling PDF indexers, plagiarism detection software, and automatic reviewer assignment systems.

### Countermeasures

There are two primary approaches to mitigate the presented attacks: (1) validating user input to globally reject PostScript code, or (2) sandboxing the PostScript interpreter.

#### Input File Validation

As shown in Section 6, many image conversion websites support PostScript files without realizing it. If there is no requirement to accept PostScript, EPS, or PDF files, this functionality should be disabled. However, this is not always practical because the PostScript interpreter can be deeply integrated into web applications. For instance, web application frameworks may call ImageMagick or another background library for image conversion, with no option to limit input file types. In such cases, developers must manually whitelist uploaded files based on their 'magic' header bytes before processing them. This approach can provide sufficient protection if implemented correctly. However, allowing PDF files implies allowing arbitrary PostScript code, as shown in Section 5.

A common technique to verify if a file is an image is to check if it is resizable [13]. This does not protect against malicious PostScript code because EPS files are resizable, and once an EPS file is resized, the contained malicious PostScript code has already been executed. Scanning for potentially dangerous PostScript code usually involves executing the code, making it impossible to prevent processing through this countermeasure.

#### Interpreter Sandboxing

If the web application must process EPS, PostScript, or PDF files, executing PostScript code is inevitable. Differentiating between benign and malicious PostScript code is challenging due to the language's obfuscation techniques. Therefore, PostScript file uploads should be treated as executing a Turing-complete programming language with client input on the server side, requiring an additional layer of security.

Ghostscript provides a `-dSAFER` flag, but there have been various bypasses in the past (see Section 4). Even in 'safer' mode, DoS attacks and information disclosure attacks are possible. Thus, the conversion process should be completely isolated from the rest of the operating system using sandboxing techniques (e.g., Firejail, chroot) or operating-system-level virtualization (e.g., Docker). These techniques come at the cost of implementation efforts and, in some cases, higher CPU usage. However, they are the only safe methods we know of to execute PostScript code. The sandbox should also apply resource limitations in terms of computing time, memory usage, process runtime, and the number of parallel image conversion processes to prevent DoS attacks. For example, Google Drive and Dropbox use sandboxing techniques when generating thumbnails for uploaded EPS files.

### Future Work and Discussion

Based on our findings, we consider further targets and similar technologies for applying our attacks. Such targets include printers, printing services, and desktop environments. We also believe that more advanced obfuscation techniques should be analyzed further.

#### Further Targets

Besides web applications, other services and devices capable of processing PostScript include:

- **Direct PDF Printers:** Most laser printers support PostScript. M¨uller et al. [18] demonstrated the dangers of executing PostScript on printers. Many vendors have restricted dangerous PostScript features, but modern printers can interpret PDF and other file formats directly. This raises the question of whether hidden PostScript code in other file formats is processed and whether it is done by the hardened PostScript interpreter.
  
- **Printing Services:** Services like Google Cloud Print or HP ePrint provide an interface between the user and one or more printers. Users send files to a server that interprets and forwards them to the printer. Similarly, services for textile or digital printing allow the upload of EPS files or other formats to create customized products. These services may be valuable targets for attacks if malicious documents are processed.
  
- **Desktop/Mobile Clients:** There is no large-scale evaluation of the security of desktop or mobile clients capable of processing PostScript. The risks of opening unsuspicious files like PDFs or PNGs are not well studied. An evaluation should consider popular software products like PDF readers, image viewers, and browsers on all major platforms, as well as commercial software like Adobe Illustrator, PDF Studio, and AutoCAD.
  
- **PostScript in LaTeX:** Services offering the compilation of LaTeX files and the generation of PDFs, such as arXiv.org and ShareLaTeX.com, are popular in the research community. An attacker may include malicious code within LaTeX source files, which will be executed during compilation. The resulting PDF may also contain the malicious code.

#### Obfuscation

We introduced several obfuscation techniques to bypass security measures and limitations implemented by web applications. Further obfuscation techniques are conceivable and should be considered in future research.

- **Masking PDF Files as Images:** The PDF format allows attackers to create polyglots—ambiguous files with multiple interpretations. For example, an attacker may create a valid PDF document that is also a valid image (e.g., a JPEG file) when opened in an image viewer. This technique may bypass some web application protections. If an attacker creates a valid image file (including 'magic' header bytes) that is identified as PDF by ImageMagick and forwarded to Ghostscript, they can inject malicious PostScript code. As a proof-of-concept, we created a polyglot file recognized as a JPEG image by the `file(1)` tool but handled as a PDF by ImageMagick’s `convert` tool. Further research is required to develop attack and defense techniques.

### Conclusion

Web application and framework developers need to be aware of PostScript injection attacks and put more effort into addressing them. This should be done by the security community clarifying the need for preventing such attacks and by developers and administrators disabling PostScript execution by default or using it exclusively in an isolated environment with activated security restrictions.

### References

1. Adobe Systems: Adobe Type 1 Font Format (1990)
2. Adobe Systems: PostScript Language Reference Manual (1999)
3. Adobe Systems: Pdfmark Reference Manual (2005)
4. Albertini, A.: This PDF is a JPEG; or, this Proof of Concept is a Picture of Cats. PoC 11 GTFO 0x03 (2014)
5. Baccas, P.: Finding rules for heuristic detection of malicious PDFs: with analysis of embedded exploit code. In: Virus Bulletin Conference (2010)
6. Backes, M., D¨urmuth, M., Unruh, D.: Vorget¨auscht/B¨ose Textdokumente - Postscript Gone Wild (2007). (in German)
7. Baines, J.: Rooting a Printer: From Security Bulletin to Remote Code Execution (2017). https://www.tenable.com/blog/rooting-a-printer-from-security-bulletin-to-remote-code-execution
8. Blonce, A., Filiol, E., Frayssignes, L.: Portable Document Format (PDF) Security Analysis and Malware Threats. BlackHat Europe (2008)
9. Costin, A.: Hacking printers for fun and profit. Hack.lu (2010)
10. Costin, A.: Hacking printers - 10 years down the road. Hash Days (2011)
11. Costin, A.: Postscript(um): You’ve Been Hacked. 28C3 (2011)
12. Costin, A.: Postscript: Danger ahead?! Hack in Paris (2012)
13. Dominique, R.: Protect File Upload Against Malicious File (2017). https://www.owasp.org/index.php/Protect FileUpload Against Malicious File
14. Goldberg, I., Wagner, D., Thomas, R., Brewer, E., et al.: A Secure Environment for untrusted helper applications: confining the wily hacker. In: Proceedings of the 6th Conference on USENIX Security Symposium, Focusing on Applications of Cryptography, vol. 6, p. 1 (1996)
15. Hong, Y., Zheng, M.: A Ghost from Postscript. Ruxcon (2017)
16. Magazinius, J., Rios, B.K., Sabelfeld, A.: Polyglots: crossing origins by crossing formats. In: Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, pp. 753–764. ACM (2013)
17. Markwood, I., Shen, D., Liu, Y., Lu, Z.: PDF mirage: content masking attack against information-based online services. In: 26th USENIX Security Symposium (USENIX Security 17), (Vancouver, BC), pp. 833–847 (2017)
18. M¨uller, J., Mladenov, V., Somorovsky, J., Schwenk, J.: SoK: exploiting network printers. In: 2017 IEEE Symposium on Security and Privacy (SP), pp. 213–230. IEEE (2017)
19. Popescu, D.S.: Hiding malicious content in PDF documents. arXiv preprint arXiv:1201.0397 (2012)
20. Raynal, F., Delugr´e, G., Aumaitre, D.: Malicious origami in PDF. J. Comput. Virol. 6(4), 289–315 (2010)
21. Selvaraj, K., Gutierrez, N.: The rise of PDF malware. Symantec Security Response (2010)
22. Sibert, W.: Malicious data and computer security. In: Proceedings of the 19th National Information Systems Security Conference (1996)
23. Sp¨ath, C., Mainka, C., Mladenov, V., Schwenk, J.: Sok: xml parser vulnerabilities. In: 10th USENIX Workshop on Offensive Technologies (WOOT 2016), Austin, TX (2016)