In June 2017, Baines [7] identiﬁed specially crafted PJL commands to exploit
the issue. We found another method to exploit the weakness based on PostScript
code. An example exploit to gain a permanent reverse shell on printer startup
is shown in Listing 7. We tested the exploit on a HP OﬃceJet Pro 8210.
1 %!PS
2
3
4
/outfile (../var/etc/profile.d/telnetd.sh) (w+) file def
outfile (nc attacker.com 31337 -e /bin/sh) writestring
outfile closefile
Listing 7. Exploiting CVE-2017-2741 to gain a reverse shell on HP printers.
This exploit can be combined into the malicious PostScript/PDF ﬁle and is
triggered when using direct PDF printing – which is becoming more and more
popular – or from USB stick on a printer model vulnerable to CVE-2017-2741.
The printer interprets and executes the PostScript code contained in PDF ﬁles
leading to code execution. The worm can spread further to other vulnerable
printers in the network by printing the same PostScript/PDF ﬁle (e.g. by itself
sending to port 9100/tcp of all reachable network printers). In case a local print
server like CUPS is in the print job deployment chain, it can also be infected
because CUPS is dependent on Ghostscript for PostScript/PDF processing.
For ethical reasons, we did not evaluate the worm in the wild. But we are
conﬁdent that such a hybrid exploit, viable on cloud servers as well as Linux
clients and even printers is a relevant concept from an attacker’s perspective.
8 Related Work
In the following, we give an introduction to signiﬁcant prior research on
PostScript, PDF and related security problems.
PostScript. The potential dangers of PostScript has been pointed out by Gold-
berg et al. [14] and Sibert [22], however we are not aware of any eﬀorts to sys-
tematically exploit PostScript language functions. Backes et al. [6] show that
PostScript documents can be crafted to force diﬀerent content when opened
in diﬀerent viewers which allows them to manipulate sales agreements. A
7 GNU Project, GNU less, https://www.gnu.org/software/less/, Mar. 2017.
616
J. M¨uller et al.
comprehensive discussion of printer security – including a survey of malicious
PostScript commands has been given by Costin [9,10,12]. Costin [12] further
demonstrate how to abuse proprietary PostScript extensions to get command
execution and access the memory of Xerox devices. They also demonstrate that
a malicious PostScript payload can be made to execute only on a certain printer
using conditional statements to check the environment the PostScript inter-
preter is running. [18] further demonstrate how to exploit PostScript and other
languages supported by network printers and discuss the dangers of executing
PostScript code in Google Cloud Print. A study conducted in parallel to our
research which comes closest to our work has been conducted by [15] who use
PostScript payloads to attack web applications.
PDF. In [8,20,21] the authors concentrated mainly on abusing legitimate fea-
tures of PDF to create malware and to execute arbitrary code on the victim’s
system. The detection of potentially dangerous code within PDF ﬁles by scanning
for known malicious structures is described in [5]. The authors mainly focused
on detecting the execution of legitimate PDF features leading to command exe-
cution. PostScript was however not in the scope of the research. In [16] the
authors use polyglot-based attacks by writing a code valid in multiple program-
ming languages. The authors used PDF ﬁles as a carriage of the malicious code
to invoke arbitrary URLs and bypass browser restrictions like the Same-Origin-
Policy. None of the previous work considered the risks of hidden PostScript code
within PDF ﬁles, which is executed in a web application context. Markwood et
al. [17] show that extracted specially crafted fonts can be embedded into PDF
ﬁles, which display a diﬀerent text depending on whether the document is pro-
cessed by a web application or a screen reader. This allows them to fool PDF
indexers like search engines, plagiarism detection software and even automatic
reviewer assignment systems in use by academic conferences.
9 Countermeasures
Basically, there are two approaches to mitigate the presented attacks: (1) By
validating user input to globally reject PostScript code or (2) by sandboxing the
PostScript interpreter. In the following, both approaches are discussed.
Input File Validation. As shown in Sect. 6 various image conversion websites
support PostScript ﬁles – often without knowing it. If there is no requirement
to accept PostScript, EPS or PDF ﬁles this functionality should be turned oﬀ
completely. However, this is not always practical because PostScript interpreter
can be deeply anchored in web applications. For example, web application frame-
works simply call ImageMagick or another background library for image conver-
sion and may not have an option to limit input ﬁles to certain types. In such
cases, the web application developer has to manually whitelist uploaded ﬁles
based on their ‘magic’ header bytes before processing them. This approach to
PostScript Undead: Pwning the Web with a Years Old Language
617
accept only certain ﬁle types like JPEG, PNG or GIF can provide suﬃcient pro-
tection if implemented correctly. However, it must be noted that allowing PDF
ﬁles also implies allowing arbitrary PostScript code as shown in Sect. 5.
Note that a common technique to verify if a ﬁle is actually an image and
therefore protect web applications against malicious uploads is to check if the
image is resizable [13]. This will not protect against malicious PostScript code:
First, because EPS ﬁles are resizable and secondly because once an EPS ﬁle is
resized, it is already interpreted meaning the contained malicious PostScript code
has already been executed. Generally spoken, scanning for potentially dangerous
PostScript code is usually based on executing the PostScript code. As a result,
preventing the processing of PostScript is not possible by this countermeasure.
Interpreter Sandboxing. In case that the web application must process EPS,
PostScript or PDF ﬁles the execution of PostScript code is inevitable. Dif-
ferentiating between benign and malicious PostScript code can be considered
hard, because the PostScript language provides dozens of obfuscation techniques.
Therefore, PostScript ﬁle uploads should be treated as what they are: execut-
ing a Turing complete programming language with client input on the server
side. Hence, an additional layer of security is required to mitigate the risks.
Ghostscript provides a -dSAFER ﬂag, however there have been various bypasses
in the past (see Sect. 4) and even in ‘safer’ mode it is possible to start DoS
attacks and perform information disclosure attacks like obtaining information on
local ﬁles. Therefore, the conversion process should be completely isolated from
the rest of the operating system. This can be provided using sandboxing tech-
niques (Firejail, chroot, etc.) or operating-system-level virtualization (Docker,
etc.). Such techniques come at the cost of implementation eﬀorts and in some
cases higher CPU usage. But they are the only safe way we know of to warp
and execute PostScript code. Furthermore, the sandbox should apply resource
limitation in terms of computing time, memory usage, process runtime and the
number of parallel image conversion processes to be started from a single user to
prevent DoS attacks. In the disclosure process we learned that sandboxing tech-
niques are applied, for example, by Google Drive and Dropbox when thumbnails
for uploaded EPS ﬁles are generated.
10 Future Work and Discussion
Based on our ﬁndings, we consider further targets and similar technologies to
apply our attacks. Such targets are printers, printing services and desktop envi-
ronments. In addition, we are convinced of the relevance of more advanced obfus-
cating techniques which should be analyzed further.
10.1 Further Targets
Besides web applications, other services and devices are capable of processing
PostScript such as printers, online printing services, desktop and mobile appli-
cations, and web robots.
618
J. M¨uller et al.
Direct PDF Printers. Almost all laser printers support PostScript. In 2017,
M¨uller et al. [18] showed how dangerous the execution of PostScript on printers
can be. As a reaction, many vendors restrict the dangerous features of PostScript
and thus prevent or limit the impact of the attacks. However, modern printers
can interpret PDF and other ﬁle formats directly. This raises the question on
whether PostScript code hidden in other ﬁle formats is processed nevertheless –
and whether this is done by the hardened PostScript interpreter or not.
Printing Services. Printing services such as Google Cloud Print or HP ePrint
provide an interface between the user and one or multiple printers. Users do
not need to install any software or printer driver. They just send the ﬁle to
a server that interprets it and forwards it to the printer. Similarly, printing
services like textile or digital printing oﬀer the possibility to upload EPS ﬁles
or other ﬁle types that are used to create customized products like T-Shirts,
cups, calendars, or ﬂyers. Such services may be a valuable target for attacks if
malicious documents are processed.
Desktop/Mobile Clients. There is no large-scale evaluation on the security
of desktop or mobile clients capable to process PostScript. Thus, the risks by
opening of an unsuspicious ﬁle like PDF or PNG are barely studied. Such an
evaluation should consider all popular software products like PDF readers, image
viewers, and browsers on all major platforms. Commercial software products like
Adobe Illustrator, PDF Studio, and even AutoCAD should be considered too.
PostScript in LATEX. There are various services oﬀering the compilation of
LATEXﬁles and the generation of PDF ﬁles from them. Such systems like arXiv.org
and ShareLaTeX.com are popular in the research community. An attacker may
include malicious code within LATEXsource ﬁles that will eventually be executed
during the compilation. In addition, it may be possible that after compilation
the malicious code is included in the resulting PDF ﬁle.
10.2 Obfuscation
We introduced several obfuscating techniques to bypass security measures and
limitations implemented by web applications as a protection mechanism. How-
ever, further obfuscating techniques are conceivable and should be considered in
future research.
Masking PDF Files as Images. The PDF format allows attackers to create
polyglots – ambiguous ﬁles that allow multiple interpretations of its content.
For example, an attacker may create a valid PDF document that is also a valid
image such as a JPEG ﬁle when opened in an image viewer. This has been
demonstrated by previous research [4,16,20].
This technique may be capable of bypassing the protection mechanisms
of some web applications as discussed in Sect. 9. If one manages to create a
PostScript Undead: Pwning the Web with a Years Old Language
619
valid image ﬁle (including ‘magic’ header bytes) that is identiﬁed as PDF by
ImageMagick and therefore forwarded to Ghostscript, one may again inject mali-
cious PostScript code. As a proof-of-concept, we created a polyglot ﬁle that
is recognized as JPEG image by the ﬁle(1)8 tool, but identiﬁed and handled
as PDF by ImageMagick’s convert tool. Thus, further research is required to
develop attack and defense techniques.
Discussion. In this work, we presented a methodology to systematically analyze
PostScript processing web applications for security vulnerabilities. We found 56
of 100 tested online image conversion websites to be vulnerable to at least one
attack. We were further able to attack high-value targets such as Wikipedia or
Microsoft OneDrive on which we could include arbitrary ﬁles. Our work was
acknowledged according to the vendor’s bug bounty program.
Causes. We identiﬁed three possible reasons leading to the security gaps:
1. The dangers of PostScript are poorly documented and widespread in many
blogs and CVEs. Despite the fact that many of the attacks are already known,
there is no document describing the best current practices and clarifying the
risks by using PostScript interpreter. As a result, many administrators, secu-
rity experts, and developers may not be aware of the existing treats. With
our paper, we address the security community and reveal the need to recap
our knowledge regarding the risks of PostScript.
2. The support of PostScript is hidden deep inside the frameworks used by
web applications. Thus, even if a developer or administrator is aware of the
risks involved in processing PostScript code, he may not be aware of it being
enabled. For instance, if the Laraval PHP framework is used to resize an
image, this is done by calling the $img->resize(); function. This function
calls ImageMagick, which in turn may invoke Ghostscript. As a result, the
application may be vulnerable even if its developer never intended to support
PostScript.
3. PostScript supports features, which can harm the host. To reduce risks, widely
deployed interpreters like Ghostscript implemented restrictions with respect
to security, e. g. the -dSAFER ﬂag. However, even with in safer mode, attacks
such as DoS are possible.
11 Conclusion
Web application and framework developers need to be aware of PostScript injec-
tion attacks and have to put more eﬀort into addressing them. This should be
done on the one side by the security community clarifying the need for pre-
venting such attacks and on the other side by developers and administrators
disabling PostScript execution by default or using it exclusively in an isolated
environment with activated security restrictions.
8 Christos Zoulas, The ﬁle(1) Command, https://github.com/ﬁle/ﬁle, Mar. 2017.
620
J. M¨uller et al.
A Comprehensive Attack Catalog
Fig. 4. Resulting preview image of a malicious proof-of-concept PostScript ﬁle, our
comprehensive attack catalog, uploaded to a web application running Ghostscript 9.19.
PostScript Undead: Pwning the Web with a Years Old Language
621
B Evaluation of Image Conversion Websites
Table 2. Evaluation of PostScript based attacks against web applications.
622
J. M¨uller et al.
References
1. Adobe Systems: Adobe Type 1 Font Format (1990)
2. Adobe Systems: PostScript Language Reference Manual (1999)
3. Adobe Systems: Pdfmark Reference Manual (2005)
4. Albertini, A.: This PDF is a JPEG; or, this Proof of Concept is a Picture of Cats.
PoC 11 GTFO 0x03 (2014)
5. Baccas, P.: Finding rules for heuristic detection of malicious PDFs: with analysis
of embedded exploit code. In: Virus Bulletin Conference (2010)
6. Backes, M., D¨urmuth, M., Unruh, D.: Vorget¨auscht/B¨ose Textdokumente -
Postscript Gone Wild (2007). (in German)
7. Baines, J.: Rooting a Printer: From Security Bulletin to Remote Code Execution
(2017). https://www.tenable.com/blog/rooting-a-printer-from-security-bulletin-
to-remote-code-execution
8. Blonce, A., Filiol, E., Frayssignes, L.: Portable Document Format (PDF) Security
Analysis and Malware Threats. BlackHat Europe (2008)
9. Costin, A.: Hacking printers for fun and proﬁt. Hack.lu (2010)
10. Costin, A.: Hacking printers - 10 years down the road. Hash Days (2011)
11. Costin, A.: Postscript(um): You’ve Been Hacked. 28C3 (2011)
12. Costin, A.: Postscript: Danger ahead?! Hack in Paris (2012)
13. Dominique, R.: Protect File Upload Against Malicious File (2017). https://www.
owasp.org/index.php/Protect FileUpload Against Malicious File
14. Goldberg, I., Wagner, D., Thomas, R., Brewer, E., et al.: A Secure Environment
for untrusted helper applications: conﬁning the wily hacker. In: Proceedings of
the 6th Conference on USENIX Security Symposium, Focusing on Applications of
Cryptography, vol. 6, p. 1 (1996)
15. Hong, Y., Zheng, M.: A Ghost from Postscript. Ruxcon (2017)
16. Magazinius, J., Rios, B.K., Sabelfeld, A.: Polyglots: crossing origins by crossing
formats. In: Proceedings of the 2013 ACM SIGSAC Conference on Computer &
Communications Security, pp. 753–764. ACM (2013)
17. Markwood, I., Shen, D., Liu, Y., Lu, Z.: PDF mirage: content masking attack
against information-based online services. In: 26th USENIX Security Symposium
(USENIX Security 17), (Vancouver, BC), pp. 833–847 (2017)
18. M¨uller, J., Mladenov, V., Somorovsky, J., Schwenk, J.: SoK: exploiting network
printers. In: 2017 IEEE Symposium on Security and Privacy (SP), pp. 213–230.
IEEE (2017)
19. Popescu, D.S.: Hiding malicious content in PDF documents. arXiv preprint
arXiv:1201.0397 (2012)
20. Raynal, F., Delugr´e, G., Aumaitre, D.: Malicious origami in PDF. J. Comput.
Virol. 6(4), 289–315 (2010)
21. Selvaraj, K., Gutierrez, N.: The rise of PDF malware. Symantec Security Response
(2010)
22. Sibert, W.: Malicious data and computer security. In: Proceedings of the 19th
National Information Systems Security Conference (1996)
23. Sp¨ath, C., Mainka, C., Mladenov, V., Schwenk, J.: Sok: xml parser vulnerabilities.
In: 10th USENIX Workshop on Oﬀensive Technologies (WOOT 2016), Austin, TX
(2016)