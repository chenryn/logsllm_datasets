title:The Reliability of Diverse Systems: A Contribution Using Modelling
of the Fault Creation Process
author:Peter T. Popov and
Lorenzo Strigini
The Reliability of Diverse Systems: a Contribution 
using Modelling of the Fault Creation Process 
Peter Popov and Lorenzo Strigini 
Centre for Software Reliability, City University 
Northampton Square, London, EClV OHB, UK 
E-mail: { ptp,strigini} @csr.city.ac.uk 
Abstract 
Design  diversity  is  a  defence  against  design  faults 
causing  common-mode failure  in  redundant systems,  but 
we  badly  lack  knowledge  about  how  much  reliability  it 
will buy in practice,  und thus about its  cost-effectiveness, 
the situations  in  which  it  is  an  appropriate  solution  crnd 
how  it  should  be  taken  into  account  by  assessors  crnd 
safety  regulators.  Both  current practice  and  the  scientific 
debate about  design  diversity  depend  largely  on  intuition. 
More  formal  probabilistic  reasoning  would 
facilitate 
critical  discussion  and  empirical  validation  of 
any 
predictions:  to  this  aim,  we  propose  a  model  of 
the 
generation  of 
in  two  separately- 
developed  program  versions.  We show  results  about:  i) 
what  degree  of  reliability  improvement  an  assessor  can 
reliably expect from  diversity; and ii) how this  reliability 
improvement  may 
higher-quality 
development processes.  We discuss the practical relevance 
of  these  results  und  the  degree  to  which  they  can  be 
trusted. 
faults  und  failures 
change 
with 
1. Introduction 
Design diversity  is an intuitively  attractive method for 
increasing  the  reliability  of  critical  systems,  including 
critical software, subject to  design  error.  However,  its  use 
is  controversial  because  we  do  not  know  how 
to 
quantitatively  evaluate 
its  advantages.  So,  a  system 
designer  does  not  know  precisely  how  cost-effective 
diversity  will  be,  compared 
for 
improving  system  dependability, 
and  generally  safety 
assessors and regulators  do not  know  how  effective  it  has 
been, in a system that they are called to evaluate. 
to  other  methods 
requires 
Design  diversity 
redundant 
computation channel  run a separate  version  (or  "variant") 
of  the  software,  developed  by  a  separate  team,  without 
communication  between 
the 
teams.  Other 
propagation  of  any  errors  between 
teams, 
avoid 
the 
that 
each 
the 
to 
precautions  may  be  added  ("forced"  diversity) 
for 
minimising  the  chance  of  common-cause  errors  in  the 
design  process: 
instance,  different  principles  of 
operation  for  the  two  channels, different  design  methods, 
notations, and computer-aided  design tools. 
for 
Experimental  evaluation  of 
the  advantages  from 
design  diversity  is  severely  limited.  Real-world  diverse 
systems usually  suffer too few failures of  their component 
versions  to  give  any  precise  indication  of 
the  gain 
produced by  diversity; controlled  experiments  are  limited 
by  cost  to  being  inadequate  replicas  of  an  industrial 
development process. 
is  practically  mandatory 
Practical  decisions  about  whether  to  use  diversity, 
how  to  apply  it  in  a project,  and how  to  assess its  effect 
on  the  dependability  of  the  resulting  system,  are  thus 
based on  industry-specific  traditions, on  intuition  and  on 
speculation.  So,  design  diversity  remains  controversial, 
although  its  use 
in  some 
industries.  Opponents  claim  that  its  benefits  are  limited 
and similar benefits could be achieved, with fewer  negative 
effects  on  cost  and  project  complexity,  by  better 
engineering  of  a  single  software  version.  Supporters 
object that  these  claims are unproven  and  diversity  is  an 
obviously  advantageous,  feasible method. Such  arguments 
cannot  be  resolved  rationally  without  an  agreement  on 
how to estimate how much  benefit  diversity  will  bring  in 
a given  situation. 
Discussion  of  design  diversity  has  often  relied  on 
extending  the  little  available  experimental  knowledge  on 
the  basis  of  assumptions  and claims  that the  participants 
consider intuitively  plausible. Most  recently, to  speculate 
about 
the  reliability  gain  to  be  achieved  by  multiple- 
version  software,  Hatton  [I]  offers  a  tentative  argument 
based on:  1) 
the  reliability  advantage  given  by  diversity 
in the Knight-Leveson  experiment [2], and 2) the fact  that, 
if  versions failed independently,  increasing  the  reliability 
of  the  versions  would  also  increase  the  reliability  gain 
given  by  diversity.  Extrapolating  from  these  facts  he 
concludes that the  balance  of  evidence points  to  diversity 
as  better  than  alternative  methods  for  achieving  high 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
5 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:33 UTC from IEEE Xplore.  Restrictions apply. 
~~ 
Protection system 
__  
Channel  1 
+ Channel 2 
Sensed 
plant state 
variables 
f 
- 
Plant 
\ 
Parallel 
(OR, 
1 -out-of-2) 
actuators 
for shut-down 
Fig.  1.  Dual-channel,  1-out-of-2  protection  system:  stylised  view. 
the  two  channels 
usually  sense  different  state  variables  and  may  use  different  actuators.  We  study  the  worst  c a s e  
in  which  this  functional  diversity  does  not  apply.  We  argued  in  [8]  why  functional  diversity  should 
be  studied  as  part  of  a  continuum  of  diversity  arrangement,  rather  than  a  radically  different  form. 
In  reality, 
specific  measures 
reliability.  Though  useful  as  a  "what  if'  projection  to 
stimulate debate, this  way  of  reasoning  implicitly  treats 
the 
for  mathematical 
convenience as physical  invariants, without proposing  any 
plausible,  empirically  verifiable  (or,  rather,  falsifiable) 
causal model that would  give them this status. 
chosen 
[3]  and  Littlewood  and  Miller 
We set out  to  improve  on  these  previous discussions 
by  modelling  the  effect  of  diversity  in  terms  of  a  more 
concrete  model  of  the  mechanisms  that  are  believed  to 
produce them. In this, we follow the  approach  of  Eckhardt 
and  Lee 
[4]  (both 
summarised  in  [5].  In  the  rest  of  the paper, we will  refer 
to  their  models  as  the  "EL"  and  "LM"  models,  for 
brevity),  which  produced  convincing  arguments  against 
beliefs  in  failure  indepndence  between  diverse  versions, 
and intuition  about  the  factors  that  make  diversity  more 
effective. However, the entities in  our model  are closer to 
observable entities in software development, and  we  try  to 
predict  measures  of  more practical  interest than  the  mean 
probability  of  failure  (for  versions  produced  under  the 
same known conditions) studied in these earlier papers. 
We  limit  our  discussion  to  a  very  simple  scenario, 
which yet has important practical  applications: 
-  we  consider  "non-forced''  diversity,  pursued  by  only 
enforcing  strict  separation  between  the  developments 
of  the  two  versions.  This  is  the  situation  in  some 
actual software projects,  but  in  addition  it  can  be  seen 
as  a  worst-case  analysis  for the  many  real  systems  in 
which  "forced"  and  "functional"  diversity  are  used. 
These  are  expected  to  be  superior  to  non-forced 
diversity,  but  the  degree  of  superiority  is  unknown: 
hence the utility of studying a limiting case; 
-  we  consider  the  simplest  possible  diverse-redundant 
configuration:  two  versions,  with  perfect  adjudication 
(simple "OR" combination of binary  outputs,  giving  a 
- 
its 
applications,  e.g. 
implications,  asking 
" I-out-of-2",  diverse  system).  This  configuration  has 
important  practical 
in  plant 
protection  systems (Fig.  1). 
In  Section  2,  we  describe  the  model  we  use.  In 
two 
Section  3,  we  study 
questions: 
-  what  amount  of  gain  does  the  model  predict  from 
using diversity? This question is  relevant  for assessors 
(e.g. in  regulatory  agencies  for safety-critical  systems) 
who  have to  decide whether  a  specific  diverse  system 
is  dependable  enough  for  operation;  and  to  project 
managers in the choice of development methods; 
should  we  then  expect  the  advantages  procured  by 
diversity  to  increase  or  to  decrease  with 
increasing 
quality  of  the  development  process  (interpreted  as 
average  reliability  of  the  versions)?  This  question 
concerns  the  evolution  of  development  processes,  and 
in  the  short  term  it  concerns  the  many  software 
development  organisations which  need  to evolve  their 
processes  to  face  increasingly  stringent  dependability 
requirements.  Deciding this  question  may  involve,  in 
extreme cases, abandoning  diversity  as  a  consequence 
of  adopting  other  dependability-enhancing  strategies, 
or, vice-versa, adopting diversity rather  than  alternative 
improvement strategies.  Many  believe  that  the  better 
the  versions, the  higher the gain  from fault tolerance, 
on the basis  of  analogies with  the case  of  independent 
failures [ I ]   or of results in an experiment  [2]. We have 
argued elsewhere  [6,  71  that  neither  the  experimental 
evidence nor modelling results are conclusive. 
In  Section 3, we study the  implications  of  this  model 
in general. We observe  that  useful  qualitative  conclusions 
can  be  drawn  if  we  separate  two  extreme  cases:  that  of 
very  high-quality  software  with  a  high  chance  of  having 
no faults (discussed  in  Section 4),  and that  of  software  in 
6 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:06:33 UTC from IEEE Xplore.  Restrictions apply. 
which  very  many,  but  low-probability  faults are possible 
(discussed  in  Section  5). Section 6  discusses  the  realism 
of our models, and Section 7 contains our conclusions. 
2. Our model 
2.1. Failure points and failures 
that 
requires 
Consider the demand space, i.e., the set of all  possible 
demands on  the  2-channel  system. 
(This  was  called  the 
input  space 
in  previous  literature.  We  use  the  term 
"demand space" because we have found "input space"  to  be 
often  misunderstood:  "inputs"  commonly  designates  both 
the  names  and  the  values  of  the 
individual  external 
variables  sampled by the software.  A  "demand", as defined 
here,  may  be  a  sequence  of  multiple  samples  of  many 
input  variables.  Our  analysis  refers  to  systems  whose 
operation  can  be  seen  as  a  series  of  demands,  possibly 
separated  by  idle  periods).  A  demand  occurs  when  the 
controlled  system  enters  a  state 
the 
intervention  of  the  protection  system.  Demands  differ  in 
the  details of  the  state of  the  controlled  system,  and thus 
possibly  in  the  input  sequences  that  they  cause  to  the 
protection  system. A design  fault  in  a  version  consists  in 
the  fact  that,  for  one  or  more  possible  demands,  that 
version  will  not  respond  as  required  (it  will  fail).  Any 
such demand is a failure point in the demand space for that 
version. Any set of  demands on  which  a  version  will  fail 
is  called  a failure  region 
for  that  version.  If  a  failure 
region  of one version overlaps with a  failure  region  of  the 
second version, their intersection is a failure region  for the 
system:  demands  from  this  region  will  cause  the  two- 
version  system to fail. 
Each  demand  in 
the  demand  space  has  a  certain 
(possibly  unknown) probability  of  happening  during  the 
operation  of  the  controlled  system.  If  we  add  up  the 
probabilities  of  all  those  demands  that  are  failure  points 
for both  versions,  we  obtain  the  probability  of  failure  on 
demand (PFD) of the  two-version  protection  system. This 
is essentially  the basis of the models used in  [3] and  [4]. 
2.2. Faults and their introduction 
We know  that  a  mistake  in  design  will  not  usually 
affect a single point in the demand space, but  a  whole  set. 
If the mistake is made, the whole  set of  points  becomes  a 
failure region; if  not, the failure region  will not be there. 
So, our simple  model  considers  that  there  is  a  fixed 
set of possible  faults,  each  one  with  its  associated  failure 
region; each corresponds  to  one  of  the  mistakes  that  rnay 
be  made.  A  mistake,  here,  is  a  mistake  of  the  whole 
process  which  leaves  a  fault  in  the  delivered  product:  i t  