将每个单词添加到inputchars中（不需要其他存储分配），并通过scanf提供的null字符
终止。
在读取输入之后，我们对word数组进行排序，将所有指向同一个k单词序列的指
针收集起来。该函数进行下列比较：
int wordncmp(char p, char q)
n = k
for （;p = q;p++，q++)
if （+p= 0&-n = 0)
return 0
return p - *q
当字符相同时，它就扫描两个字符串。每次遇到null字母，它就将计数器n减1，并在
查找到k个相同的单词后返回相同。当它找到不同的字母时，返回不同。
读取输入之后，就增加k个null字符（这样，比较函数就不会结束运行），输出文
档的前k个单词（开始随机输出），并调用排序：
for i = [0. k)
word[nword][1]=0
for 1 =[0, k)
print word[i]
qsort（word,nmord，sizeof（word[o])，sortcmp)
通常，sortcmp函数为它的指针添加了一个间接层。
我们的空间效率结构现在包含了人量关于文本中的k链字母。如果k为1并且输入
文本为“ofthe people,by the people,for the people”，word数组如下所示：
word[o]:by the
word[1]:for the
word[2]:of the
word[3]:people
word[4]:people，for
word[5]:people,by
word[6]:the people,
word[7]:the people
word[8]:the people,
为了清晰起见，上面仅仅显示了数组word中的每个元素所指向的前k+1个单词，
bbs.theithome.com
---
## Page 175
第15章珍珠字符串
161
虽然后面还有更多单词。如果查找“the”后跟的单词，就在后缀数组中查找它，有三个
选择：“people”、“twice”和“people”。
现在，可以通过下面的方法生成没用的文本：
phrase = first phrase n input array
1oop
perform a binary search for phrase in word[o..nword-1]
for al1 phrases equal in the first k words
select one at random, pofnted to by p
phrase = word following p
if k-th word of phrase is length 0
break
print k-th word of phrase
通过将phrase设置成输入的第一个字符初始化循环（记住，这些单词早就在输出文
件中）。二分查找使用第9.3节中的代码定位phrase的第一次出现（找到第一次出现非常
关键；第9.3节的二分查找就实现这个功能）.下一个循环扫描所有相同的词组，并使用
答案12.10随机选择其中的一个。因为该词组的第k个单词长度为0，所以当前词组在
文档的最后，终止循环。
下列完整的伪码实现了这些观点，并给它将要生成的单词数定一个上界：
phrase = inputchars
for (words1eft=10000;words1eft>0;words1eft--)
1 = -1
U = meord
while 1+1 ↓= u
m = (1 +u) / 2
if wordncmp(word[m]，phrase）<0
1 = m
else
u = m
for （1=0；wordncmp(phrase， word[u+i]）==0;i++)
ifrand(%（i+1）=0
[+]puom =d
phrase =skip(p，1)
if strlen(skip(phrase,k-1）)m= 0
break
print skip(phrase,k-1)
Kernighan和Pike的《PracticeofProgramming》的第3章（第5.9节中介绍的）主
要涉及到“设计和实现”这个主题。由于“这是一个经典的程序：输入一些数据，输出
一些数据，并根据一些技巧进行处理。”，所以他们围绕着单词级别的马尔科夫文本的生
成组织该章内容。他们说明了有关这个问题的一些有趣的历史，并使用C、Java、C++、
Awk和Perl语言实现了该程序。
将本节中完成该任务的程序和它们的C程序进行比较，该代码大概是它们的一半：
bbs.theithome.com
---
## Page 176
162
第3部分产品
通过指向k个连续的单词的指针来表示词组能够节省空间并且实现起来比较方便。当输
入大小接近1MB时，两个程序的速度大致相同，由于Kermighan和Pike使用了较大的
数据结构，并大量使用了效率很低的malloc，所以在我的系统上，本章中的程序使用的
内存数量级较小。如果结合答案14的加速，并使用散列表替换二分查找和排序，本章中
的程序将成为两个加速因素中的一个（并且内存使用大约增加了50%）。
15.4原则
字符串问题。编译器如何在符号表中查找变量名？在你输入查找字符串的每个单词
决这些实际的问题的过程中都使用到了本章概要介绍的小型问题中的一些技巧。
字符串的数据结构。我们已经看到了表示字符串的一些最为重要的数据结构。
散列。总体来说，这个结构比较快并且较容易实现。
平衡树。这些结构保证了即便是在输入很少的时候也有较好的性能，并且已经将它
们打包在C++标准模板库的set和map中。
后缀数组。初始化文本中指向每个字符的指针数组，将它们排序，这样就得到了·-个
后缴数组。然后，你就能够扫描它，找到最近的字符串或使用二分查找查找单词或词组。
在第13.8节中，使用了其他几种结构表示字典中的单词。
库还是定制的组件？C++的set、map和string使用起来都比较方便，但是它们的通
用而强大的接口意味着它们没有专用的散列函数效率高。其他库组件的效率很高：散列
使用strcmp，后缓数组使用qsort。我查看了bscarch和strcmp的库实现，并建立了二分
查找和马尔科夫程序中的wordncmp函数。
15.5问题
1.本章我们使用了单词的简单定义，那就是，单词是以空格为分隔符的。而在很多
实际的文档中，如HTML或RTF中，却还包含格式化命令。如何处理这类命令？你是
否还需要进行其他处理？
2.在具有大量主存的机器上，如何通过C++STL的set或map解决第13.8节中的
查找问题？跟Mcllroy的结构进行比较，它需要多少内存？
3.如果将答案9.2中的专用malloc包含到第15.1节中的散列程序中，能够提速多
少？
4.当散列表很大，散列函数均匀分布数据时，表中的每一列的元素都很少。如果这
bbs.theithome.com
---
## Page 177
第15章珍珠字符率
163
些条件都不冲突，那么查找所需的时间就比较固定。当第15.1节中的散列表中没有找到
新的字符串时，就将它放置在列表前端。为了模拟散列存在的问题，将NHASH设置为
1，并将其和别的列表策略进行试验，如添加到列表最后，将最新找到的元素放置到列表
前端。
5.在查看第15.1节中输出的单词频率时，最好将单词按照递减顺序输出。如何修
改C和C++程序以实现该任务？如何仅仅输出M个最常用的单词（其中M是10或1000
这类常量）？
6.给定一个新的输入字符串，如何在后缀数组中找到所存储文本中的最长匹配？如
何通过建立一个GUI接口来完成该任务？
7.对于“典型”的输入来说，我们的程序能够快速找到重复的字符串，但是在某些
输入条件下，其速度很慢。计算这类输入所需的时间。在实际应用中会不会出现的这类
输入？
8.如何修改查找重复字符串的程序，以找出出现次数超过M次的最长的字符串？
9.在给定的两个输入文本中，找出在两段文本中都出现的最长的字符串。
10.说说如何通过仅指向从单词边界开始的后来减少重复程序中的指针的数目。
这对程序产生的输出有何影响？
11.编写一个程序，生成字母级别的马尔科夫文本。
12.如何使用第15.1节中的工具和技巧生成（order-0或非马尔科夫）随机文本？
13.本书的Web站点上提供了单词级别的马尔科夫文本生成程序。在你的一些文档
上测试该程序。
14.如何使用散列提速马尔科夫程序？
15.第15.3节中对Shannon的引i用描述了他用来构建马尔科夫文本的算法。编写程
序实现该算法。它给出了马尔科夫频率的近似值，但不是精确的形式。解释为什么不是
精确的形式。编写程序从头开始扫描整个字符串以生成每个单词（因此使用真实的频率）。
16.如何使用本章介绍的技巧组合成词典的单词列表（这是第13.8节中Doug
Mcllroy面临的问题）？如何不使用词典就建立一个拼写检查器？如何不使用语法规则就
建立一个语法检查器？
17.调查一下在速度识别和数据比较这类应用程序中，k链字母分析技巧的使用情
况。
15.6进阶阅读
bbs.theithome.com
---
## Page 178
第一版本的尾声
当时看来，对作者的一次采访是本书第一版本的最好总结。它仍然介绍了这本书，
所以，这里再次使用了它。
Q：谢谢你同意我进行这次采访。
A：不客气一一现在我的这段时间归你安排。
Q：我看到在《CommuxicationsoftheACM》中早就有这些章节的内容了，为什么你
还要将它们收集到这本书中？
A：主要出于几个小原因：我修改了其中几个小错误，并做出了几百个小的改进，
添加了一些新的章节。书中有50%的问题、答案和图片都是新的。而且，我认为将很多
章节收集在一本书中要比出现在几十本杂志中更方便。然而，最主要的原因是，将它们
收集在一本书中之后，可以很容易地读书中的理论，整体大于局部之和。
Q：本书中都有哪些理论？
A：最重要的就是认真考虑编程问题既实用又有趣。这项工作不仅仅涉及到从正式
的需求文档到系统的程序开发。如果这本书导致哪怕仅仅是一个程序员橘然醒悟、重新
爱上他/她的工作，那么这本书就达到了它的目的了。
Q：这个回答比较空润。本书是不是通过一些技术线索连接起来的？
A：第2部分主要讨论了性能，这是所有章节的主题。在好多章中都用程序进行了
验证。附录1总结了本书的算法。
Q：很多章节都强调了设计过程。你能不能总结一下该主题？
A：我很乐意回答这个问题。在这次采访之前我正在准备出一个列表。该列表的内
容是对程序员的10条建议。
处理正确的问题：
展示解决方法的设计空间：
查看数据：
使用封底：
bbs.theithome.com
---
## Page 179
第一版的尾声
165
利用对称性；
使用组件进行设计：
建立原型；
必要时进行权衡：
尽量简单：
让程序尽量优美。
最初是在编程中讨论这些问题，但最终它们却应用在工程上。
Q：这让我想起了一个问题，这个问题一直困扰着我：在本书中，很容易就能简化
一些小程序，那么在实际的软件中，这项技巧同样有用么？
A：我有三个答案：是的、不是和可能。“是的”，它们同样起作用；例如，第3.4节
[在第一版本中]中介绍了一个大型软件项目，这个项目最终简化成仅需要80个员工每年。
一个同样迁腐的答案就是“不是”：如果你简化得适当，你就能避免建立庞大的系统，并
且不需要按比例使用这些技巧。虽然两种观点都有好处，但实际情况往往存在于两者之
间，这就是“可能”的来源。有些软件必然很大，本书的一些理论比较适合用于这些系
统上。Unix系统是一个很好的例子，它的强大就来自于简单而优美的各个组成部分。
Q：你在书中讨论了另一个BellLab系统。这些章节是不是有些偏？
A：可能是有一点。我主要使用了我实际应用中的一些材料，这就使得这本书有些
偏向于我的实际情况。积极些说，这些章节的很多材料都是我的同事提供的，他们应该
受到表扬（或批评）。我在BellLab中从研究人员和开发人员那里学到了很多东西。那
里具有很好的合作氛围，研究和开发之间的交互非常好。所以，很多你觉得比较偏的东
西，实际上是我对我的使用者的一种真诚表现。
Q：让我们回到现实中来。本书少了哪些内容？
A：我本来希望书中能够有一个大型系统，它由很多程序构成，但是我不能在一章
中通过十页左右就描述出任何有意义的系统。更实际些说，我希望还有以后的章节讨论
及“计算工程技术”（类似于第7章的封底计算）。
而是故事情节？
A：请注意一一自己再回过头去看的人应该可以不注重写作风格。
bbs.theithome.com
---
## Page 180
第二版的尾声
一些传统由于自身的内涵而流传。另外一些则是因为其他原因。
Q：谢谢你能够再次接受我的采访，已经过了很多年了。