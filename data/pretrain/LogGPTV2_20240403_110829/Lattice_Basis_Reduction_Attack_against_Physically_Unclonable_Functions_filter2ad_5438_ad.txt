Platform
Spartan 6
Spartan 6
Zynq-7000
Spartan 6
PUF Logic [Slices]
80
127
9,825
45
Fig. 8: POK uses an FE to ensure stability of the secret seed.
for the raw (uninitialized) SRAM cells, was synthesized, con-
ﬁgured, and tested on a Xilinx Spartan-6 FPGA (XC6SLX45),
a low-end FPGA in 45nm technology.
Regarding the FE design, we adopt the homogeneous error
assumption, i.e., all cells have the same BER [8]. Prior work
shows that intrinsic BERs of the various POKs range from
0.1% [23] to 15% [33]. We study the POK and FE designs
under four levels of raw BER: 1%, 5%, 10%, and 15% to
explore design costs, and choose 5% as the raw SRAM BER
to benchmark our ﬁnal implementation. Here the goal of FE
design is to ensure a key reconstruction of 1280 bits with
targeted failure rate at 10−6. As mentioned in Section IV,
with such nearly-perfect secret key reconstruction, the overall
output BER of the lattice PUF can reach the decryption error
rate analyzed above. We use concatenated error-correcting
codes, with a repetition code as the inner code, and a shortened
BCH code as the outer code. Concatenated codes are typically
more efﬁcient than single codes in terms of code length and
hardware cost [8]. Block diagram of the FE design is shown in
Figure 8. Table II and V list the conﬁguration and hardware
costs of error-correcting codes used at different BER levels
respectively. At the raw BER of 5%, 6.5K cells are needed to
construct the secret s of length 1280 bits at the target failure
TABLE V: Hardware utilization in FE design on Spartan 6 FPGA.
Raw BER
Outer Code
Inner Code
Total
LUT
893
689
743
920
Slice
276
233
245
329
Reg
905
730
785
973
0
1
2
3
(%)
1
5
10
15
LUT
Slice
Reg
905
730
785
973
LUT
893
688
740
913
Slice
276
232
243
326
Reg
0
0
0
0
0
1
3
7
rate 10−6. The FE design of the lattice PUF requires 233
slices. This portion of cost applies to all other strong PUF
candidates (AES PUF or other controlled PUF). This is also
cheaper than linear solver block used in the CFE-based strong
PUF [19], [21] for key reconstruction, which requires 65, 700
LUTs and 16, 425 slices.
Regarding the PUF logic, the total size of the lattice PUF
(without FE) for the Spartan-6 platform is 45 slices, most
of which is taken up by the LFSR and the controller. Table
IIIa shows the breakdown of resources needed to realize
the various modules. The core block implementing the LWE
decryption function (LWEDec) includes an 8-bit MAC and a
quantization block, as shown in Figure 2. The 256-bit LFSR
is implemented using RAM-based shift registers. The total
latency (at 33.3MHz clock) to generate a 1-bit PUF response is
47µs, and the total time to generate a 100-bit PUF response is,
approximately, 8µs + 100× 44µs ≈ 4.4ms since seed loading
is only executed once. Table IIIb lists the latency of each step
of response generation.
We compare the implementation cost of the lattice PUF
logic against established strong PUF designs [7], [17], [21]
in Table IV. The original strong PUF based on AES [7] is
implemented as an ASIC. Here, we adopt [13] as an FPGA
alternative to estimate the implementation cost of AES. Notice
that [7] uses no error correction since it guarantees reliability
via dark bit masking. Similarly, the FPGA implementation
of SHA-3 [22] is adopted to estimate the cost of a hash
function for the controlled PUF [17]. The FPGA utilization
result of the strong PUF based on the computational FE (CFE)
is presented via the number of LUTs in [21]. We estimate
the corresponding slice count using [48]. Compared to PUFs
based on AES [13] and SHA [22], our advantages in area
are minor. However, compared to [19], [21], which is another
PUF based on LWE, and which therefore provides similar
theoretical guarantees, our savings in area are signiﬁcant.
VI. CONCLUSION
In this paper, we described a new strong physical unclon-
able function (PUF) that is provably secure against machine
learning (ML) attacks with both classical and quantum com-
puters. The security is derived from cryptographic hardness of
learning decryption functions of semantically secure public-
key cryptosystems within the probably approximately correct
framework. The proposed PUF compactly realizes the de-
cryption function of the learning-with-errors (LWE) public-
key cryptosystem as the core block. We implemented a lattice
PUF on a Spartan 6 FPGA. The design realizes a challenge-
response pair space of size 2136, requires 1280 physically
obfuscated key bits, and guarantees 128-bit ML resistance. The
PUF shows excellent uniformity, uniqueness, and reliability.
ACKNOWLEDGMENTS
We thank Dr. Aydin Aysu for his insightful advice on
idea presentation, assistance with FPGA implementation of
repetition code, and comments that greatly improved the
manuscript.
REFERENCES
[1] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin,
S. Ghemawat, G. Irving, M. Isard, et al. Tensorﬂow: A system for large-
scale machine learning. In 12th {USENIX} Symposium on Operating
Systems Design and Implementation ({OSDI} 16), pages 265–283, 2016.
Simultaneous
hardcore bits and cryptography against memory attacks. In Theory of
Cryptography Conference, pages 474–495. Springer, 2009.
[2] A. Akavia, S. Goldwasser, and V. Vaikuntanathan.
[3] M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of
learning with errors. Journal of Mathematical Cryptology, 9(3):169–203,
2015.
[4] D. Apon, C. Cho, K. Eldefrawy, and J. Katz. Efﬁcient, reusable fuzzy
In International Conference on Cyber Security
extractors from lwe.
Cryptography and Machine Learning, pages 1–18. Springer, 2017.
[5] G. T. Becker. The gap between promise and reality: On the insecurity of
xor arbiter pufs. In International Workshop on Cryptographic Hardware
and Embedded Systems, pages 535–555. Springer, 2015.
[6] D. J. Bernstein.
Introduction to post-quantum cryptography.
In Post-
quantum cryptography, pages 1–14. Springer, 2009.
[7] M. Bhargava and K. Mai. An efﬁcient reliable puf-based cryptographic
In Proceedings of the conference on
key generator in 65nm cmos.
Design, Automation & Test in Europe, page 70. European Design and
Automation Association, 2014.
[8] C. B¨osch, J. Guajardo, A.-R. Sadeghi, J. Shokrollahi, and P. Tuyls.
Efﬁcient helper data key extractor on fpgas. In International Workshop
on Cryptographic Hardware and Embedded Systems, pages 181–197.
Springer, 2008.
[9] Z. Brakerski, A. Langlois, C. Peikert, O. Regev, and D. Stehl´e. Classical
hardness of learning with errors. In Proceedings of the forty-ﬁfth annual
ACM symposium on Theory of computing, pages 575–584. ACM, 2013.
[10] Q. Chen, G. Csaba, P. Lugli, U. Schlichtmann, and U. R¨uhrmair. The
bistable ring puf: A new architecture for strong physical unclonable
In 2011 IEEE International Symposium on Hardware-
functions.
Oriented Security and Trust, pages 134–141. IEEE, 2011.
[11] Y. Chen and P. Q. Nguyen. Bkz 2.0: Better lattice security estimates. In
International Conference on the Theory and Application of Cryptology
and Information Security, pages 1–20. Springer, 2011.
[12] F. Chollet et al. Keras, 2015.
[13] J. Chu and M. Benaissa. Low area memory-free fpga implementation
In Field Programmable Logic and Applications
of the aes algorithm.
(FPL), 2012 22nd International Conference on, pages 623–626. IEEE,
2012.
[14] B. Fuller, X. Meng, and L. Reyzin. Computational fuzzy extractors. In
International Conference on the Theory and Application of Cryptology
and Information Security, pages 174–193. Springer, 2013.
[15] S. D. Galbraith.
on learning with errors.
sgal018/compact-LWE. pdf, 2013.
Space-efﬁcient variants of cryptosystems based
url: https://www. math. auckland. ac. nz/˜
[16] F. Ganji, S. Tajik, F. F¨aßler, and J.-P. Seifert. Strong machine learning
In International
attack against pufs with no mathematical model.
Conference on Cryptographic Hardware and Embedded Systems, pages
391–411. Springer, 2016.
[17] B. Gassend, M. V. Dijk, D. Clarke, E. Torlak, S. Devadas, and P. Tuyls.
Controlled physical random functions and applications. ACM Transac-
tions on Information and System Security (TISSEC), 10(4):3, 2008.
[18] I. Goodfellow, Y. Bengio, A. Courville, and Y. Bengio. Deep learning,
volume 1. MIT press Cambridge, 2016.
[19] C. Herder, L. Ren, M. van Dijk, M.-D. Yu, and S. Devadas. Trapdoor
computational fuzzy extractors and stateless cryptographically-secure
physical unclonable functions. IEEE Transactions on Dependable and
Secure Computing, 14(1):65–82, 2017.
[20] N. Howgrave-Graham. A hybrid lattice-reduction and meet-in-the-
In Annual International Cryptology Con-
middle attack against ntru.
ference, pages 150–169. Springer, 2007.
[21] C. Jin, C. Herder, L. Ren, P. H. Nguyen, B. Fuller, S. Devadas, and
M. van Dijk. Fpga implementation of a cryptographically-secure puf
based on learning parity with noise. Cryptography, 1(3):23, 2017.
[22] J.-P. Kaps, P. Yalla, K. K. Surapathi, B. Habib, S. Vadlamudi, S. Gurung,
and J. Pham. Lightweight implementations of sha-3 candidates on fpgas.
In International Conference on Cryptology in India, pages 270–289.
Springer, 2011.
[23] B. Karpinskyy, Y. Lee, Y. Choi, Y. Kim, M. Noh, and S. Lee. 8.7
physically unclonable function for secure key generation with a key
In Solid-State Circuits
error rate of 2e-38 in 45nm smart-card chips.
Conference (ISSCC), 2016 IEEE International, pages 158–160. IEEE,
2016.
[24] J. Katz and Y. Lindell.
Introduction to modern cryptography. CRC
press, 2014.
[25] M. Kearns and L. Valiant. Cryptographic limitations on learning boolean
formulae and ﬁnite automata. Journal of the ACM (JACM), 41(1):67–95,
1994.
[26] M. Kharitonov. Cryptographic hardness of distribution-speciﬁc learning.
In Proceedings of the twenty-ﬁfth annual ACM symposium on Theory of
computing, pages 372–381. ACM, 1993.
[27] D. P. Kingma and J. Ba. Adam: A method for stochastic optimization.
arXiv preprint arXiv:1412.6980, 2014.
[28] A. R. Klivans and A. A. Sherstov. Cryptographic hardness for learning
intersections of halfspaces. In Foundations of Computer Science, 2006.
FOCS’06. 47th Annual IEEE Symposium on, pages 553–562. IEEE,
2006.
[29] R. Kumar and W. Burleson. On design of a highly secure puf based
on non-linear current mirrors. In Hardware-Oriented Security and Trust
(HOST), 2014 IEEE International Symposium on, pages 38–43. IEEE,
2014.
[30] D. Lim, J. W. Lee, B. Gassend, G. E. Suh, M. Van Dijk, and S. Devadas.
Extracting secret keys from integrated circuits. IEEE Transactions on
Very Large Scale Integration (VLSI) Systems, 13(10):1200–1205, 2005.
[31] R. Lindner and C. Peikert. Better key sizes (and attacks) for lwe-based
In Cryptographers’ Track at the RSA Conference, pages
encryption.
319–339. Springer, 2011.
[32] R. Maes. An accurate probabilistic reliability model for silicon pufs.
In International Workshop on Cryptographic Hardware and Embedded
Systems, pages 73–89. Springer, 2013.
[33] R. Maes, P. Tuyls, and I. Verbauwhede. A soft decision helper data
In 2009 IEEE international symposium on
algorithm for sram pufs.
information theory, pages 2101–2105. IEEE, 2009.
[34] R. Maes, A. Van Herrewege, and I. Verbauwhede. Pufky: A fully
In International
functional puf-based cryptographic key generator.
Workshop on Cryptographic Hardware and Embedded Systems, pages
302–319. Springer, 2012.
[35] A. Maiti, V. Gunreddy, and P. Schaumont. A systematic method to
evaluate and compare the performance of physical unclonable functions.
In Embedded systems design with FPGAs, pages 245–267. Springer,
2013.
[36] M. Majzoobi, F. Koushanfar, and M. Potkonjak. Lightweight secure
pufs. In Proceedings of the 2008 IEEE/ACM International Conference
on Computer-Aided Design, pages 670–673. IEEE Press, 2008.
[37] D. Micciancio and O. Regev. Lattice-based cryptography.
quantum cryptography, pages 147–191. Springer, 2009.
In Post-
[38] M. Mohri, A. Rostamizadeh, and A. Talwalkar. Foundations of machine
learning. MIT press, 2012.
[39] P. H. Nguyen, D. P. Sahoo, C. Jin, K. Mahmood, U. R¨uhrmair, and
M. van Dijk. The interpose puf: Secure puf design against state-of-
the-art machine learning attacks. IACR Transactions on Cryptographic
Hardware and Embedded Systems, pages 243–290, 2019.
[40] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion,
O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vander-
plas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duch-
esnay. Scikit-learn: Machine learning in Python. Journal of Machine
Learning Research, 12:2825–2830, 2011.
[41] O. Regev. On lattices, learning with errors, random linear codes, and
cryptography. Journal of the ACM (JACM), 56(6):34, 2009.
[42] U. R¨uhrmair, F. Sehnke, J. S¨olter, G. Dror, S. Devadas, and J. Schmidhu-
ber. Modeling attacks on physical unclonable functions. In Proceedings
of the 17th ACM conference on Computer and communications security,
pages 237–249. ACM, 2010.
[43] P. Santikellur, A. Bhattacharyay, and R. S. Chakraborty. Deep learning
IACR
based model building attacks on arbiter PUF compositions.
Cryptology ePrint Archive, 2019:566, 2019.
[44] D. Schuster and R. Hesselbarth. Evaluation of bistable ring pufs using
single layer neural networks. In International Conference on Trust and
Trustworthy Computing, pages 101–109. Springer, 2014.
[45] G. E. Suh and S. Devadas. Physical unclonable functions for device
In Proceedings of the 44th
authentication and secret key generation.
annual Design Automation Conference, pages 9–14. ACM, 2007.
[46] A. Vijayakumar, V. C. Patil, C. B. Prado, and S. Kundu. Machine
learning resistant strong puf: Possible or a pipe dream? In Hardware
Oriented Security and Trust (HOST), 2016 IEEE International Sympo-
sium on, pages 19–24. IEEE, 2016.
[47] X. Xi, H. Zhuang, N. Sun, and M. Orshansky. Strong subthreshold
current array puf with 2 65 challenge-response pairs resilient to machine
learning attacks in 130nm cmos. In VLSI Circuits, 2017 Symposium on,
pages C268–C269. IEEE, 2017.
[48] Xilinx. Zynq-7000 SoC Data Sheet: Overview, 7 2018. v1.11.1.
[49] M.-D. Yu, M. Hiller, J. Delvaux, R. Sowell, S. Devadas, and I. Ver-
bauwhede. A lockdown technique to prevent machine learning on
pufs for lightweight authentication. IEEE Transactions on Multi-Scale
Computing Systems, 2(3):146–159, 2016.