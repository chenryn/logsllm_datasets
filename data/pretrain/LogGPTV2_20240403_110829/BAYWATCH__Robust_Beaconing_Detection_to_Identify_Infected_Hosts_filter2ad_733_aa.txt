title:BAYWATCH: Robust Beaconing Detection to Identify Infected Hosts
in Large-Scale Enterprise Networks
author:Xin Hu and
Jiyong Jang and
Marc Ph. Stoecklin and
Ting Wang and
Douglas Lee Schales and
Dhilung Kirat and
Josyula R. Rao
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
BAYWATCH: Robust Beaconing Detection to Identify
Infected Hosts in Large-Scale Enterprise Networks
Xin Hu*§, Jiyong Jang
†
†§, Marc Ph. Stoecklin
‡
, Ting Wang
†
, Douglas L. Schales
†
, Dhilung Kirat
†
, and Josyula R. Rao
†
IBM Research, {jjang, mpstoeck, schales, dkirat, jrrao}@us.ibm.com
*Pinterest, PI:EMAIL
Lehigh University, PI:EMAIL
‡
Abstract—Sophisticated cyber security threats, such as ad-
vanced persistent threats, rely on infecting end points within
a targeted security domain and embedding malware. Typically,
such malware periodically reaches out to the command and
control infrastructures controlled by adversaries. Such callback
behavior, called beaconing, is challenging to detect as (a) detection
requires long-term temporal analysis of communication patterns
at several
levels of granularity, (b) malware authors employ
various strategies to hide beaconing behavior, and (c) it is also
employed by legitimate applications (such as updates checks). In
this paper, we develop a comprehensive methodology to identify
stealthy beaconing behavior from network trafﬁc observations.
We use an 8-step ﬁltering approach to iteratively reﬁne and
eliminate legitimate beaconing trafﬁc and pinpoint malicious
beaconing cases for in-depth investigation and takedown. We
provide a systematic evaluation of our core beaconing detection
algorithm and conduct a large-scale evaluation of web proxy data
(more than 30 billion events) collected over a 5-month period at a
corporate network comprising over 130,000 end-user devices. Our
ﬁndings indicate that our approach reliably exposes malicious
beaconing behavior, which may be overlooked by traditional
security mechanisms.
I.
INTRODUCTION
Sophisticated cyber security attacks and threats, such as
Advanced Persistent Threats (APTs) and targeted attacks, are
amongst the most advanced cyber security threats to date.
The anatomy of such attacks can be described by three main
phases (cf. Fig. 1): (a) the initial compromise of one or
more devices within a target infrastructure, (b) the establish-
ment of a communication channel enabling the threat actor
to remotely control devices within the target infrastructure,
and (c) the execution of the mission of the attack, such as
access to and exﬁltration of sensitive data or disturbance
of processes. From a defender’s perspective, many recent
threat reports about high-proﬁle attacks, campaigns, and data
breaches (e.g., BlackPOS [17], Regin [23], Epic Turla [15, 16],
Sony Pictures [27], APT1 [18], Duqu [4], or RSA SecurID
compromise [21]) indicate that in most of these operations
the initial compromise was extremely difﬁcult to detect or
prevent. For example, the threat actors leveraged sophisticated
social engineering methods (to the level of dedicated language
specialists [18]) or exploited zero-day vulnerabilities (e.g., via
drive-by downloads, waterholing attacks) in order to place
malware.
A common pattern in all these operations is that after the
initial infection, the adversary controls the infected machines
by establishing a stealthy communication channel between
§ Both authors contributed equally to this work.
* X. Hu & T. Wang were with IBM Research while carrying out this work.
1 – Initial Compromise
Malware
Drive-by
Processes
Internet
Information
Beaconing
User identities
2 – Communication Channel
3 – Attack Execution
Fig. 1. Anatomy of advanced cyber security attack
the malware process within the target infrastructure and the
adversary’s command and control (C&C) infrastructure that is
outside the perimeter. However, to the defender’s advantage,
the need for such interaction requires the exchange of net-
work communication, and thus provides an opportunity to the
defender to detect its presence. Due to security mechanisms
(e.g., ﬁrewalls, IDS/IPS, NAT), which prevent an outsider from
initiating a connection to a machine inside a security perimeter,
such channels have to be initiated from inside. Typically, the
attacker designs the malware to reach out to the C&C infras-
tructure on a regular basis to announce and conﬁrm its presence
and get further instructions. This behavior is referred to as
“beaconing”. Depending on the sophistication of the attack,
not every infected device within an organization beacons to
the C&C infrastructure; only the systems used as stepping
stones [18], or a dedicated “proxy” machine communicate
with the outside [23]. Another well-known form of beaconing
behavior is observed in botnet C&C usage [6, 22], where up to
hundreds of thousands of infected hosts announce themselves
regularly and establish stealthy channels in order to receive
instructions from their bot master.
Beaconing behavior can be characterized as a regular
(sometimes highly periodic and sometimes not) sequence of
requests or beacons. A beacon is almost
like a heartbeat
and consists of a short communication between the infected
machine and one or more destinations on the outside. The
frequency of such beacons depends on the attacker’s strategy,
which can be slow and stealthy or fast and aggressive. For
example, in the wild, we observed beaconing attempts every
2–3 seconds as well as every 2 hours or even longer. In general,
attackers use regular beacons to maintain visibility and control
over the infected machines. HTTP(S) is commonly used as an
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.50
479
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply. 
Ideal
3 hrs
Reality
7-8 s
Fig. 2. Challenges: Expected patterns vs. real-world activity (left), multiple
periodicities (right).
application protocol due to its nearly universal ability to cross
security controls at network perimeter boundaries.
Detection of beaconing behavior is, however, not a trivial
task but requires that the following four challenges are properly
addressed:
Challenge 1: Beaconing is not an isolated event, but a se-
quence of temporally related events that have to be culled
and analyzed in context. As a consequence, detection of
beaconing is a “big data problem” as the trafﬁc behavior of
all communication pairs1 over the network perimeter needs to
be analyzed over an extended period of time for indications of
beaconing behavior. In a large corporate enterprise network
consisting of dozens of sites, it is easy to observe an average
of 53 million distinct communication pairs every day using
the HTTP(S) protocols only.
Challenge 2: While beaconing is characterized as a periodic
communication in a regular interval, the ground reality is
vastly different. There can be random gaps in the collected
observations either because of devices going off-line or
beyond the purview of observation, network down times,
unanticipated issues in the data collection process as well
as noise in the communication channel (left side of Figure 2)
for a real-world activity trace collected at the network level
from a device infected by the TDSS botnet [20]). The same
device may reconnect from different IP addresses and the
destination entity can have multiple IP addresses, making it
difﬁcult to track the context of the communication pair for
constructing beaconing sequences.
Challenge 3: The nature of the beaconing behavior is com-
pletely at the discretion of the attacker, e.g., in terms of the
choice of frequency and strategy employed. For example,
the malware may omit a beacon or inject additional random
beacons to reduce the predictability of the behavior. The right
side of Figure 2 depicts the real-world activity network trace
of a Conﬁcker [6] bot beaconing to its C&C infrastructure.
The malware sends beacons every 7–8 seconds for about two
minutes, before it is dormant for about three hours, and then
it repeats the same high frequency beaconing.
Challenge 4: Regular beaconing behavior does not necessar-
ily indicate malicious activity: many legitimate applications
exhibit network behaviors that resemble beaconing, such as
regular update checks verifying software versions or anti-
virus signatures, license checks, and e-mail or news polling.
Traditional security mechanisms such as ﬁrewalls, IDS, and
1cf. Section II for the deﬁnition of a communication pair
web proxies attempting to match signatures are not able to cope
with these challenges and keep the long-term history needed,
and thus suffer from a high false negative rate.
In this paper, we address the problem of detecting large-
scale beaconing behavior indicating malicious activities based
on network monitoring. We introduce BAYWATCH, a compre-
hensive ﬁltering methodology to analyze network interactions
for identifying beaconing behaviors and pinpointing assumed
infected devices and malicious communication channels. At
the heart of BAYWATCH, we have devised a periodicity de-
tection algorithm based on signal processing that is robust to
noise, interrupts, and outages; the algorithm does not rely on
strict periodicity but is able to capture regularity at different
time scales. As an output, BAYWATCH provides a prioritized
list of beaconing cases. We systematically evaluate BAYWATCH
both on synthetic data and real-world data sets: two HTTP(S)
traces (one of which is 5 months long, 30 B events) collected
at the perimeter gateways of a major corporate network. In
our evaluation and experience, about 26 suspicious beaconing
cases were reported every day out of which over 96% of the
top-ranked cases could be conﬁrmed as truly malicious.
The key contributions of this paper are as follows:
• An 8-step ﬁltering methodology (called BAYWATCH) to
reliably identify beaconing behavior and separate legitimate
from malicious beaconing—one of the ﬁrst indicators of
malware infection—consisting of a novel periodicity detec-
tion algorithm which is robust to real-world perturbations
as well as pre- and post-ﬁlter operations.
• A highly scalable implementation of the methodology on
top of the parallel and distributed Map/Reduce programming
model [7] allowing iterative analysis of long time windows
(up to months) for beaconing behavior.
• A systematic evaluation of the properties of the core bea-
coning detection algorithm using synthetic data sets as well
as a comprehensive evaluation of the entire methodology
by means of real-world data sets, which indicates that the
output of BAYWATCH provides a manageable number of
cases every day, in which 96% could be conﬁrmed as truly
malicious.
II. OVERVIEW AND ARCHITECTURE
In order to address the four challenges introduced in the
previous section, we have devised a methodology based on
eight ﬁltering steps. The procedure departs with the assumption
that every event in a given time span (up to weeks or months)
may be relevant and needs to be taken into account and tested
against the ﬁlters. Initially, the network events are grouped
together by means of communication pair conﬁgurations.
A communication pair is deﬁned as a pair of source and
destination endpoints, where each endpoint is represented by
one or more of its features as listed in Table I.
The overall architecture of the ﬁltering approach in BAY-
WATCH is depicted in Fig. 3. It consists of four main phases: (a)
whitelist analysis, (b) time series analysis, (c) suspicious indi-
cation analysis, and (d) manual veriﬁcation and investigation.
At each phase, one or more ﬁlters are applied to the events.
Figure 3 shows the data ﬂow and the alignment of the ﬁlters.
480
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply. 
481
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply. 
482
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:40:31 UTC from IEEE Xplore.  Restrictions apply. 
Original Signal
Random 
Permutation
m Random Signals
DFT
Time [s]
DFT
max = 182
max =190
max = 120
Frequency [Hz]
Time [s]
(m-1)th maximum power
Frequency [Hz]
Timestamps
(a)
Interval List
(b)
2013-01-11 00:42:32
2013-01-11 00:49:12
2013-01-11 00:55:14
2013-01-11 01:27:27
2013-01-11 01:34:52
2013-01-11 01:41:39
2013 01 11 01 48 42
2013-01-11 01:48:42
2013-01-11 01:54:54
… 
interval 
extraction
t
1 DFT
step 1 DFT 
analysis
[404, 663, 400, 362, 1933, 445, 
407, 423, 372, 395, 362, 400, 369, 
822, 5512, 196, 1023, 635, 817, 
919, 492, 423, 391, 442, 759, …]
Candidates
Period
30.5473
2 36615