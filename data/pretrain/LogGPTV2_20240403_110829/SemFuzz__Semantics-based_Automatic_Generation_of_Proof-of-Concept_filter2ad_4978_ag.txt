Foundations of So(cid:135)ware Engineering, (FSE 2015). 450–461.
[30] Eugene Charniak. 1996. Tree-Bank Grammars. In Proceedings of the 10th National
Conference on Arti(cid:128)cial Intelligence (AAAI 1996). 1031–1036.
[31] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang,
Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following Devil’s
Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android
and iOS. In Proceedings of the 37th IEEE Symposium on Security & Privacy (S&P
2016). 357–376.
[32] Kai Chen, Yingjun Zhang, and Peng Liu. 2016. Dynamically Discovering Likely
Memory Layout to Perform Accurate Fuzzing. IEEE Trans. Reliability 65, 3 (2016),
1180–1194.
[33] Alessandra Gorla, Ilaria Tavecchia, Florian Gross, and Andreas Zeller. 2014.
Checking App Behavior Against App Descriptions. In Proceedings of the 36th
International Conference on So(cid:135)ware Engineering (ICSE 2014). ACM, 1025–1035.
[34] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai
Liang. 2015. Automatic Generation of Data-Oriented Exploits. In Proceedings of
the 24th USENIX Security Symposium (Security 2015). 177–192.
[35] Shih-Kun Huang, Han-Lin Lu, Wai-Meng Leong, and Huan Liu. 2013. Craxweb:
Automatic Web Application Testing and A(cid:138)ack Generation. In Proceedings of
the 7th IEEE International Conference on So(cid:135)ware Security and Reliability (SERE
2013). IEEE, 208–217.
James C King. 1976. Symbolic Execution and Program Testing. Commun. ACM
19, 7 (1976), 385–394.
[37] Zhenmin Li and Yuanyuan Zhou. 2005. PR-Miner: automatically extracting
implicit programming rules and detecting violations in large so(cid:137)ware code. In
Proceedings of the 13th ACM SIGSOFT International Symposium on Foundations of
So(cid:135)ware Engineering (FSE 2005). 306–315.
[38] Bin Liang, Pan Bian, Yan Zhang, Wenchang Shi, Wei You, and Yan Cai. 2016.
AntMiner: mining more bugs by reducing noise interference. In Proceedings of
the 38th International Conference on So(cid:135)ware Engineering (ICSE 2016). 333–344.
[39] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao, Min
Yang, Xinyu Xing, and Peng Liu. 2017. System Service Call-oriented Symbolic
Execution of Android Framework with Applications to Vulnerability Discovery
and Exploit Generation. In Proceedings of the 15th Annual International Conference
on Mobile Systems, Applications, and Services (MobiSys 2017). 225–238.
[40] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. 1993. Build-
ing a Large Annotated Corpus of English: (cid:140)e Penn Treebank. Computational
Linguistics 19, 2 (1993), 313–330.
[41] Andrew Meneely, Harshavardhan Srinivasan, Ayemi Musa, Alberto Rodriguez
Tejeda, Ma(cid:138)hew Mokary, and Brian Spates. 2013. When a Patch Goes Bad:
Exploring the Properties of Vulnerability-Contributing Commits. In Proceedings
of the 7th ACM/IEEE International Symposium on Empirical So(cid:135)ware Engineering
and Measurement, (ESEM 2013). IEEE, 65–74.
[42] Andrew Meneely, Alberto C Rodriguez Tejeda, Brian Spates, Shannon Trudeau,
Danielle Neuberger, Katherine Whitlock, Christopher Ketant, and Kayla Davis.
2014. An Empirical Investigation of Socio-Technical Code Review Metrics and
Security Vulnerabilities. In Proceedings of the 6th International Workshop on Social
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2152So(cid:135)ware Engineering (SSE 2014). ACM, 37–44.
[43] Andrew Meneely and Oluyinka Williams. 2012. Interactive Churn Metrics: Socio-
Technical Variants of Code Churn. ACM SIGSOFT So(cid:135)ware Engineering Notes 37,
6 (2012), 1–6.
[44] Barton P Miller, Louis Fredriksen, and Bryan So. 1990. An Empirical Study of
the Reliability of UNIX Utilities. Commun. ACM 33, 12 (1990), 32–44.
[45] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Dumi-
tras. 2015. (cid:140)e A(cid:138)ack of the Clones: a Study of the Impact of Shared Code on
Vulnerability Patching. In Proceedings of the 36th IEEE Symposium on Security &
Privacy (S&P 2015). IEEE, 692–708.
[46] Stephan Neuhaus, (cid:140)omas Zimmermann, Christian Holler, and Andreas Zeller.
2007. Predicting vulnerable so(cid:137)ware components. In Proceedings of the 14th
ACM conference on Computer and Communications Security (CCS 2007). ACM,
529–540.
[47] Rahul Pandita, Xusheng Xiao, Wei Yang, William Enck, and Tao Xie. 2013. WHY-
PER: Towards Automating Risk Assessment of Mobile Applications. In Proceed-
ings of the 22nd USENIX Security Symposium (Security 2013). 527–542.
[48] Henning Perl, Sergej Dechand, Ma(cid:138)hew Smith, Daniel Arp, Fabian Yamaguchi,
Konrad Rieck, Sascha Fahl, and Yasemin Acar. 2015. Vcc(cid:128)nder: Finding Potential
Vulnerabilities in Open-Source Projects to Assist Code Audits. In Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communications Security
(CCS 2015). ACM, 426–437.
[49] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giu(cid:130)rida,
and Herbert Bos. 2017. VUzzer: Application-Aware Evolutionary Fuzzing. In Pro-
ceedings of the 24th Annual Network and Distributed System Security Symposium
(NDSS 2017). ISOC.
[50] Edward J Schwartz, (cid:140)anassis Avgerinos, and David Brumley. 2010. All You
Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic
Execution (but Might Have Been Afraid to Ask). In Proceedings of the 31st IEEE
Symposium on Security & Privacy (S&P 2010). IEEE, 317–331.
Jacek ´Sliwerski, (cid:140)omas Zimmermann, and Andreas Zeller. 2005. When Do
Changes Induce Fixes?. In ACM SIGSOFT So(cid:135)ware Engineering Notes, Vol. 30.
[51]
ACM, 1–5.
[56]
[52] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbe(cid:138)a, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
2016. Driller: Augmenting Fuzzing (cid:140)rough Selective Symbolic Execution. In Pro-
ceedings of the 23nd Annual Network and Distributed System Security Symposium
(NDSS 2016).
[53] Michael Su(cid:138)on, Adam Greene, and Pedram Amini. 2007. Fuzzing: Brute Force
Vulnerability Discovery. Pearson Education.
[54] Lin Tan, Ding Yuan, Gopal Krishna, and Yuanyuan Zhou. 2007. iComment: Bugs
or Bad Comments?. In Proceedings of the 21st ACM Symposium on Operating
Systems Principles (SOSP 2007). ACM, 145–158.
[55] Lin Tan, Yuanyuan Zhou, and Yoann Padioleau. 2011. aComment: mining
annotations from comments and code to detect interrupt related concurrency
bugs. In Proceedings of the 33rd International Conference on So(cid:135)ware Engineering
(ICSE 2011). IEEE, 11–20.
Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2017. Sky(cid:128)re: Data-Driven
Seed Generation for Fuzzing. In Proceedings of the 38th IEEE Symposium on
Security & Privacy (S&P 2017). IEEE.
[57] Xusheng Xiao, Amit Paradkar, Suresh (cid:140)ummalapenta, and Tao Xie. 2012. Auto-
mated Extraction of Security Policies from Natural-Language So(cid:137)ware Docu-
ments. In Proceedings of the 20th ACM SIGSOFT International Symposium on the
Foundations of So(cid:135)ware Engineering (FSE 2012). ACM, 12.
Junfeng Yang, Ang Cui, Salvatore J Stolfo, and Simha Sethumadhavan. 2012.
Concurrency A(cid:138)acks. HotPar 12 (2012), 15.
Juan Zhai, Jianjun Huang, Shiqing Ma, Xiangyu Zhang, Lin Tan, Jianhua Zhao,
and Feng Qin. 2016. Automatic Model Generation from Documentation for Java
API Functions. In Proceedings of the 38th International Conference on So(cid:135)ware
Engineering (ICSE 2016). ACM, 380–391.
[60] Hao Zhong, Lu Zhang, Tao Xie, and Hong Mei. 2009. Inferring Resource Speci(cid:128)-
cations from Natural Language API Documentation. In Proceedings of the 24th
IEEE/ACM International Conference on Automated So(cid:135)ware Engineering (ASE
2009). IEEE, 307–318.
[58]
[59]
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2153Table 4: Details of the 18 proof-of-concept exploits.
CVE
Version Vulnerability Type
CVE-2015-0275 4.0.9
CVE-2015-1333 4.1.3
CVE-2015-5706 4.0.3
CVE-2015-6937 4.2.3
CVE-2015-7872 4.2.6
CVE-2015-7990 4.3.2
CVE-2016-0728 4.4
CVE-2016-10147 4.8.14
Denial of service
Uncontrolled resource consumption
Use a(cid:137)er free
Null pointer dereference
Denial of service
Race conditions
Use a(cid:137)er free
Null pointer dereference
CVE-2016-3134 4.5.2
Memory corruption
CVE-2016-3841 4.3.2
Use a(cid:137)er free
CVE-2016-4482 4.6
CVE-2016-4794 4.6
Information leak / disclosure
Use a(cid:137)er free
CVE-2016-6213 4.8.17
Uncontrolled resource consumption
CVE-2016-8646 4.3.5
CVE-2016-9555 4.8.7
CVE-2016-9793 4.8.13 Memory corruption
Null pointer dereference
Bu(cid:130)er over-read
Vulnerable Function
ext4 zero range
key link end
path openat
rds conn create
key gc unused keys
rds sendmsg
join session keyring
mcryptd check internal
mcryptd create hash
unconditional
get chainname rulenum
mark source chains
check under(cid:131)ow
check entry size and hooks
dccp v6 send response
dccp v6 request recv sock
dccp v6 connect
inet6 destroy sock
inet6 sk rebuild header
ip6 datagram connect
inet6 csk route req
inet6 csk route socket
inet6 csk xmit
do ipv6 setsockopt
do ipv6 getsockopt
raw6 sendmsg
cookie v6 check
tcp v6 connect
tcp v6 send synack
tcp v6 syn recv sock
udpv6 sendmsg
l2tp ip6 sendmsg
proc connectinfo
pcpu need to extend
pcpu alloc
commit tree
umount tree
a(cid:138)ach recursive mnt
alloc mnt ns
copy mnt ns
create mnt ns
propagate one
hash accept
sctp sf ootb
sock setsockopt
CVE-2017-6074 4.9.11
Double free
dccp rcv state process
CVE-2017-6347 4.10
Bu(cid:130)er over-read
ip cmsg recv checksum
Critical Variables
inode.i size
edit
trans
keyring.type data.link
trans
algt
System Calls
fallocate( FALLOC FL ZERO RANGE)
add key()
open(O TMPFILE)
socket()
bind()
keyctl()
socket()
bind()
keyctl( KEYCTL JOIN SESSION KEYRING)
socket(AF ALG)
ipt entry.next o(cid:130)set
socket(AF INET)
setsockopt(IPT SO SET REPLACE)
np.opt
socket(AF INET6)
sendmsg()
ci
chunk.map extend work
pcpu lock
ioctl(USBDEVFS CONNECTINFO)
mmap()
bpf()
mount(MS BIND)
sk sndbuf
sk rcvbuf
ireq.pktopts
skb
skb.len
socket()
socket(IPPROTO SCTP)
socket()
setsockopt(SO SNDBUFFORCE)
socket(AF INET6)
setsockopt(IPV6 RECVPKTINFO)
socket(AF INET, SOCK DGRAM, 0)
sendto(MSG MORE, INADDR LOOPBACK)
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2154