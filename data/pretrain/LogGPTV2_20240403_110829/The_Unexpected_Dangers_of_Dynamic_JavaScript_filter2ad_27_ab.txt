### Example: Overriding the Global Function `JSON.stringify`

To conduct an attack, an attacker first overrides the global function `JSON.stringify` and then includes a dynamic script that passes sensitive data to this function. When a user visits the attacker's website, their browser retrieves and executes the dynamic script. Instead of invoking the native `JSON.stringify` function, the code invokes the attacker-controlled function. In this case, instead of serializing the object, the function sends the user’s data back to the attacker’s server.

**Listing 3: Passing a Variable to a Global Function**

```javascript
// Attacker’s script overwriting a global function
JSON.stringify = function(data) {
    sendToAttackerBackend(data);
};

// Within the dynamic script
function myFunction() {
    var myVar = { secret: "secret value" };
    // Calling a predefined global function
    return JSON.stringify(myVar);
}
```

### 3.3.3 Prototype Tampering

As outlined in the previous section, variables are available in the scope in which they were defined unless the `var` keyword is omitted. Listing 4 shows an example where the function allocates an array with three secret values using the `var` keyword, seemingly protecting the array from access by outside code. However, JavaScript is a prototype-based language, so when requesting a property of an object, the interpreter walks up the prototype chain until it finds a matching property.

In the example shown in Listing 4, the `slice` method is called on the array named `arr`. By default, an array object does not provide the `slice` method itself, so the call is made to the method in the array’s prototype, which points to `Array.prototype`.

If the script is included without any malicious intent, the programmer may assume that the call will eventually trigger the `slice` method for arrays. However, an attacker can change this behavior by overwriting the `slice` method in the array’s prototype. Since all arrays in JavaScript share the same prototype, the call to `slice` in Listing 4 is passed to the attacker-provided function. The attacker can use the `this` keyword to gain a reference to the array, allowing them to send the otherwise protected information back to the attacker.

**Listing 4: Variable Protected in a Closure**

```javascript
(function(){
    var arr = ["secret1", "secret2", "secret3"];
    // Intends to slice out the first entry
    var x = arr.slice(1);
    ...
})();
```

**Listing 5: Leaking Data via the `this` Keyword**

```javascript
Array.prototype.slice = function() {
    // Leaks ["secret1", "secret2", "secret3"]
    sendToAttackerBackend(this);
};
```

This attack works for any object that has a globally accessible prototype, such as built-in objects like `String` or `Function`.

### 3.4 Distinction from CSRF

At first glance, the described attack method may seem related to Cross-site Request Forgery (CSRF), as it follows a similar attack pattern. However, the goal and consequences of the attack differ significantly:

- **CSRF**: An attacker generates requests to cause state-changing actions in the name of the user. The attacker cannot read content from a response to a CSRF request. To prevent CSRF, developers are advised to conduct state-changing actions only via HTTP POST requests and to protect these requests with CSRF tokens.
- **Dynamic Scripts**: These scripts are neither designed to conduct state-changing actions on the server-side nor are they fetched via POST requests. They are stateless and fetched via GET requests through script tags, and thus are not classified as a critical endpoint in the context of CSRF.

### 4 Empirical Study

In this section, we report on the results of an empirical study designed to gain insights into the prevalence and exploitability of data leakages due to the use of dynamic script generation on the server side. We first discuss the methodology of our study and report on the general prevalence of dynamically generated JavaScript files in the wild. Based on the gathered data, we analyze the underlying purposes of these scripts, discuss the types of security-sensitive data contained in the scripts, and highlight how these can be leaked, allowing specific exploits against a number of sites. We end the section with a discussion of situations in which we could not exploit a dynamic script due to the use of adequate protection measures.

#### 4.1 Methodology

We cover our research questions, explain our detection methodology, and describe our dataset.

##### 4.1.1 Research Questions

This study provides an in-depth analysis of dynamic script includes. Before diving into the security aspects, we aim to collect data on this technique in general. Specifically, we are interested in the general prevalence of dynamically generated scripts and how often these dynamic scripts are dependent on a user’s session state. The study sheds light on the purpose of these scripts and the contained data. Finally, we investigate the exploitability and discuss potential countermeasures.

##### 4.1.2 Detecting State-dependent Scripts

For our empirical study, we needed a means to easily detect state-dependent dynamic scripts. We implemented a Chrome browser extension that fulfills two separate tasks:

1. **Collecting Scripts**: The first step is to collect all external script resources included by the web page. We created a browser extension that uses a Mutation Observer to collect all included scripts. As soon as a new script node is found, it is immediately passed to our analysis module.
2. **Detecting Dynamic Code Generation Based on Authentication Credentials**: Our extension requests the script file twice: once with authentication credentials attached to the request, and once without. After receiving the responses, the extension compares both and, if they differ, stores them in a central database for later analysis.

To allow valid credentials to be sent with the request, valid session cookies are required. The user needs to manually log in to the application under investigation beforehand. The final step is the manual analysis of the gathered data to determine which scripts have a dynamic nature depending on the user’s session state rather than randomness.

##### 4.1.3 Data Set

Unlike general vulnerabilities, detecting potential data leakages through dynamic JavaScript generation requires an active user account at the tested site. This limits the size and nature of our data set. We chose the 150 highest-ranking (according to Alexa) web pages matching the following criteria:

1. **Account Registration and Login**: Freely available for anyone, excluding services with paid subscription models or country-dependent prerequisites.
2. **Language Availability**: Available in German, English, or a website that can be translated using Google Translate.
3. **No Duplicates**: Not a duplicate or localized variant of an already investigated site.

After manually registering accounts on these sites, we investigated the site using the methodology and techniques previously explained, thoroughly interacting with the complete functionality of the sites by adding, processing, and viewing plausible data within the different web applications.

#### 4.2 Prevalence of Dynamic Scripts

Our first goal was to count the number of websites that make use of dynamic script generation. Using our methodology, we gathered a total of 9,059 script files spread across 334 domains and their subdomains. Although our data set only consists of 150 different domains, we gathered scripts from a large number of domains due to third-party frames pointing to, e.g., advertisement providers. We filtered out scripts from all sites not directly related to the domains under investigation.

Out of these, we found that over half of the sites—81 out of the 150 analyzed domains—utilized some form of dynamic script generation. In a subsequent manual examination, we removed dynamic scripts that only exposed changes in apparently random token values, resulting in 209 unique scripts on 49 domains that were dependent on a user’s session state. This shows that the usage of state-dependent dynamic scripts is widespread, affecting one-third of the investigated domains.

#### 4.3 Purposes of Dynamic Scripts

We analyzed the applications to ascertain the underlying purpose motivating the utilization of the dynamic scripts. We found three categories of use cases, as well as a few purposes that could not be categorized. These single-use cases specific to one application are put in the "Others" category. The results of our categorization are depicted in Table 1, showing the total amount of domains per category and the highest Alexa rank.

- **Retrieval of User-specific Data**: The most common use case was retrieving user-specific data, such as the name, email address, or preferences for the logged-in user. This information was used to greet users on the start page and to retrieve user-provided settings and profile data on the corresponding edit pages.
- **Service Bootstrapping**: The second category was setting up variables necessary for a rich client-side application to work. For example, in a popular free-mail service’s file storage system, the UI was implemented completely in JavaScript. The dynamic script provided a secret token used by the application to interact with the server using XMLHttpRequests.
- **Cross-service Data Sharing**: The third widely witnessed use case was cross-service data sharing, often applied to allow for single sign-on solutions across multiple services of the same provider or for tracking users on different domains through a single tracking service.

| Category                  | # Domains | Highest Rank |
|---------------------------|-----------|--------------|
| Retrieval of User-specific Data | 7         | 1            |
| Service Bootstrapping      | 5         | 15           |
| Cross-service Data Sharing | 8         | 5            |
| Others                    | 1         | 13           |

#### 4.4 Types of Security Sensitive Data

We conducted a manual analysis of the scripts’ data that changed its value depending on the authentication state of the script request. We identified four categories of potentially security-critical data:

- **Login State**: The first type of data that could be extracted from dynamic scripts was a user’s login state to a certain application. This happened either explicitly or implicitly.
- **Unique Identifiers**: The second category was the leakage of data that uniquely identified the user, such as customer or user IDs and email addresses.
- **Personal Data**: This category included pieces of data that do not necessarily uniquely identify a user but provide additional information, such as real name, location, or date of birth.
- **Tokens & Session IDs**: The last category was tokens and session identifiers for an authenticated user, which could potentially provide an attacker with the necessary information to interact with the application in the name of the user.

| Data Type              | # Domains | Exploitable | Highest Rank |
|------------------------|-----------|-------------|--------------|
| Login State            | 49        | 40          | 1            |
| Unique Identifiers     | 34        | 28          | 5            |
| Personal Data          | 15        | 11          | 11           |
| Tokens & Session IDs   | 7         | 4           | 107          |

#### 4.5 Exploitation

We discuss several attacks that leverage the leakage of sensitive user information. After outlining potential attack scenarios, we discuss concrete examples of attacks we successfully conducted against our own test accounts.

##### 4.5.1 Utilizing Login Oracles

In the previous section, we discussed that 49 domains had scripts that returned different content if the cookies for the logged-in user were removed. We call these scripts "login oracles" since they provide an attacker with either explicit or implicit information on whether a user is currently logged into an account.