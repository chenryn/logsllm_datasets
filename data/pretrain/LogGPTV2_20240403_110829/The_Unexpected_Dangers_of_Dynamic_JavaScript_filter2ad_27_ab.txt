for example, change the behavior of the global function
JSON.stringify. In order to conduct an attack, the at-
tacker overrides the function ﬁrst and then includes a dy-
namic script which passes a sensitive data value to the
function. When the user visits the attacker’s Web site,
his browser retrieves and executes the dynamic script.
Rather than invoking the native JSON.stringify func-
tion, the contained code invokes the attacker-controlled
function. In this case, instead of serializing the object,
the function sends the user’s data back to the attacker’s
server.
Listing 3 Passing a variable to a global function
// Attacker’s script overwriting a global function
JSON.stringify = function(data){
sendToAttackerBackend(data);
}
---------------------------------------------------
//Within the dynamic script
function myFunction() {
var myVar = { secret: "secret value"};
// Calling a predefined global function
return JSON.stringify(myVar);
}
3.3.3 Prototype Tampering
As outlined in the previous section, variables are avail-
able in the scope in which they were deﬁned unless the
var keyword is omitted. Listing 4 shows an example of
code making use of this paradigm. The function allocates
an array with three secret values using the var keyword
and therefore, as it seems, protects the array from access
by outside code. As discussed in Section 2.2, JavaScript
is a prototype-based language. Hence, when requesting
a property of an object, the JavaScript interpreter walks
up the prototype chain until it ﬁnds a matching property.
In our example shown in Listing 4, the function slice
is called on the array named arr. By default, an array
object does not provide the slice function itself. There-
fore, the call is made to the function in the array’s proto-
type, which points to the object Array.prototype. In
a scenario where the script is included without any ma-
licious intent, the programmer may assume that the call
will eventually trigger invocation of the slice method
for arrays.
This behavior may, however, be changed by an at-
tacker. Listing 5 depicts a small snippet of code that is
provided by the attacker. Similar to what we discussed
earlier with respect to overwriting global functions, the
snippet overwrites the slice method in the array’s pro-
726  24th USENIX Security Symposium 
USENIX Association
Listing 4 Variable protected in a closure
(function(){
var arr = ["secret1","secret2","secret3"];
// intents to slice out first entry
var x = arr.slice(1);
...
})();
totype. Since by default all arrays in JavaScript share the
same prototype, the call to slice in Listing 4 is passed
to the attacker-provided function. Since the function is
called on the arr object, the attacker can use the this
keyword to gain a reference to the object. Therefore,
rather than exhibiting the intended behavior of slicing
out a part of the array, the attacker’s code now sends the
otherwise properly protected information back to the at-
tacker. This attack works for any object that has a glob-
ally accessible prototype, i.e., it is feasible on any built-in
objects such as Strings or Functions.
Listing 5 Leaking data via the this keyword
Array.prototype.slice = function(){
//leaks ["secret1","secret2","secret3"]
sendToAttackerBackend(this);
};
3.4 Distinction towards CSRF
On ﬁrst view, the described attack method is related to
Cross-site Request Forgery (CSRF) [1], as it follows a
similar attack pattern.
In fact, leaking sensitive information via cross-domain
script includes belongs to a larger class of Web attacks
which function via creating authenticated requests in the
context of an authenticated Web user (including CSRF,
ClickJacking [12] and reﬂected Cross-site Scripting [2]).
However, the goal and consequences of the attack dif-
fer signiﬁcantly from other attack variants: CSRF is an
attack in which an attacker generates requests to cause
state-changing actions in the name of the user. Thereby
the attacker is by no means able to read content from a
response to a CSRF request. To prevent CSRF devel-
opers are advised to conduct state-changing actions only
via HTTP POST requests and to protect all these post
requests with CSRF tokens.
As opposed to this, dynamic scripts are neither de-
signed to conduct state-changing actions on the server-
side nor are these scripts ever fetched via POST requests.
Those scripts are stateless and are fetched via GET re-
quests through script tags and, hence, are not classiﬁed
as a critical endpoint in the context of CSRF, i.e., not
contained in the application’s CSRF protection surface.
4 Empirical Study
In this section we report on the results of an empirical
study designed to gain insights into the prevalence and
exploitability of data leakages due to the use of dynamic
script generation on the server side. We ﬁrst discuss
the methodology of our study and report on the general
prevalence of dynamically generated JavaScript ﬁles in
the wild. Based on the gathered data, we analyze the un-
derlying purposes of these scripts, discuss the types of
security-sensitive data contained in the scripts and high-
light who these can be leaked, allowing us speciﬁc ex-
ploits against a number of sites. We end the section with
a discussion of situations in which we could not exploit
a dynamic script due to the use of adequate protection
measures.
4.1 Methodology
In the following, we cover our research questions, ex-
plain our detection methodology and describe our data
set.
4.1.1 Research Questions
This study provides an in-depth analysis of dynamic
script includes. Before diving into the security aspects of
these scripts, we aim at collecting data on this technique
in general. Hence, we are ﬁrst interested in the gen-
eral prevalence of dynamically generate scripts. More
speciﬁcally, the goal is to ﬁnd out how common dynamic
script generation is in today’s Web and how often these
dynamic scripts are dependent on a user’s session state.
The study sheds light on the purpose of these scripts and
the contained data. Finally, we investigate the security
aspects by investigating the exploitability and discussing
potential countermeasures.
4.1.2 Detecting State-dependent Scripts
As a basis for our empirical study, we needed a means to
easily detect state-dependent dynamic scripts. Therefore,
we implemented a Chrome browser extension that fulﬁlls
two separate tasks:
1. Collecting scripts: The ﬁrst step towards analyz-
ing Web pages for dynamic scripts is the collection
of all external script resources included by the Web
page. For this purpose, we created a browser ex-
tension that collects all included scripts of a page
by using a so-called Mutation Observer [22]. As
soon as a new script node is found, it is immediately
passed on to our analysis module.
2. Detecting dynamic code generation based on au-
thentication credentials: Whenever the analysis is
USENIX Association  
24th USENIX Security Symposium  727
invoked, our extension requests the script ﬁle twice:
once with authentication credentials attached to the
request, and once without authentication creden-
tials. After the responses have been received, the
extension compares both and if they differ, stores
them in a central database for later analysis.
In order to allow for valid credentials to be sent
along with the request, a necessary prerequisite are
valid session cookies. To obtain these, the user
needs to manually log in to the application under
investigation beforehand.
The ﬁnal step in this phase is the manual analysis
of the gathered data to precisely determine which
scripts have a dynamic nature depending on the
user’s session state rather than randomness (such as
banner rotation scripts).
4.1.3 Data Set
Unlike general vulnerabilities, the detection of potential
data leakages through dynamic JavaScript generation re-
quires an active user account (or a similar stateful rela-
tionship) at the tested site, so that the scripts are gener-
ated in the context of an authenticated Web session.
Since this requires initial manual registration and ac-
count set up on sites we want to test, the size and the na-
ture of our data set is limited. We therefore chose the 150
highest ranking (according to Alexa) Web pages match-
ing the following criteria:
1. Account registration and login is freely available for
anyone. This excludes, services that have only paid
subscription models or require country-dependent
prerequisites (such as a mobile phone number).
2. Available in either German, English or a Web site
which can be translated using Google Translate. If
this is not given, the set up of meaningful user ac-
counts was not feasible.
3. Not a duplicate or localized variant of an already
investigated site (e.g. google.com vs. google.co.in)
After manually registering accounts on these sites,
we investigated the site employing the methodology and
techniques previously explained, thoroughly interacting
with the complete functionality of the sites by adding,
processing and viewing plausible data within the differ-
ent Web applications.
4.2 Prevalence of Dynamic Scripts
The ﬁrst goal of our study was to count the number of
Web sites that make use of dynamic script generation.
In the course of this study, using our aforementioned
methodology, we gathered a total of 9,059 script ﬁles
spread across 334 domains and their subdomains. Al-
though our data set only consists of 150 different do-
mains, we gathered scripts from such a large number of
domains due to the fact that the investigated Web sites in-
clude third-party frames pointing to, e.g., advertisement
providers. In a ﬁrst step, we therefore ﬁltered out scripts
from all sites not directly related to the domains under
investigation.
Out of these, we found that over half of the sites—81
out of the 150 analyzed domains—utilized some form of
dynamic script generation. In a subsequent manual ex-
amination step we removed dynamic scripts which only
exposed changes in apparently random token values (see
below for details), resulting in 209 unique scripts on 49
domains, that were dependent on a user’s session state.
In relation to our initial data set of 150 domains, this
shows that the usage of state-dependent dynamic scripts
is widespread, namely one third of the investigated do-
mains.
4.3 Purposes of Dynamic Scripts
We analyzed the applications to ascertain the underlying
purpose motivating the utilization of the dynamic scripts.
In doing so, we found three categories of use cases as
well as a few purposes which could not be categorized.
Since these were only single use cases speciﬁc to one
application, we do not outline these any further but in-
stead put them in the Others category. The results of our
categorization are depicted in Table 1, showing the total
amount of domains per category as well as the highest
Alexa rank.
The most commonly applied use case was retrieval
of user-speciﬁc data, such as the name, email address
or preferences for the logged-in user. This information
was used both to greet users on the start page as well as
to retrieve user-provided settings and proﬁle data on the
corresponding edit pages. We observed that a number
of Web applications utilized modal dialogs to present the
proﬁle data forms to the user, whereas the HTML code of
said form was embedded into the document already and
all currently stored values were retrieved by including a
dynamic script.
The second category of scripts we found was service
bootstrapping, i.e., setting up variables necessary for a
rich client-side application to work. One example of such
a bootstrapping process was observed in a popular free-
mail service’s ﬁle storage system in which the UI was
implemented completely in JavaScript. When initially
loading the page, the dynamic script we found provided
a secret token which was later used by the application to
interact with the server using XMLHttpRequests.
728  24th USENIX Security Symposium 
USENIX Association
Category
Retrieval of user-speciﬁc data
Service bootstrapping
Cross-service data sharing
Others
# domains Highest rank
7
5
8
1
16
15
5
13
Table 1: Amounts and highest Alexa rank of domains
with respect to their use case
Data
domains
exploitable
highest rank
Login state
Unique Identiﬁers
Personal data
Tokens & Session IDs
49
34
15
7
40
28
11
4
1
5
11
107
Table 2: Sensitive data contained in dynamic scripts
The third widely witnessed use case was cross-service
data sharing, which was often applied to allow for sin-
gle sign-on solutions across multiple services of the same
provider or for tracking of users on different domains
through a single tracking service. The latter was evi-
denced by the same script being included across a multi-
tude of domains from different service providers.
4.4 Types of Security Sensitive Data
In a next step, we conducted a manual analysis of the
scripts’ data that changed its value, depending on the
authentication state of the script request. Within our
data, we identiﬁed four categories of potentially security-
critical data:
• Login state: The ﬁrst type of data that could be
extracted from dynamic scripts was a user’s login
state to a certain application. We found that this
happened either explicitly, i.e., assign a variable dif-
ferently if a user is logged in – or implicitly, e.g. in
cases where a script did not contain any code if a
user was not logged in.
• Unique identiﬁers: The second category we dis-
covered was the leakage of data that uniquely iden-
tiﬁed the user. Among these values are customer or
user IDs as well as email addresses with which a
user was registered to a speciﬁc application.
• Personal data: In this category we classiﬁed all
those pieces of data which do not necessarily
uniquely identify a user, but provide additional in-
formation on him, such as his real name, his loca-
tion or his date of birth.
• Tokens & Session IDs: The last category we en-
countered were tokens and session identiﬁers for an
authenticated user. These tokens potentially provide
an attacker with the necessary information to inter-
act with the application in the name of the user.
Table 2 depicts our study’s results with respect to the
occurrences of each category. Please note, that a given
domain may carry more than one script containing secu-
rity sensitive information and that a given script may ﬁt
into more than one of the four categories.
The following sections give a more detailed insight
into these numbers. The ﬁnal column shows the high-
est rank of any domain on which we could successfully
extract the corresponding data, i.e., on which we could
bypass encountered protection mechanisms.
4.5 Exploitation
In the following, we discuss several attacks which lever-
age the leakage of sensitive user information. After
outlining potential attack scenarios, we discuss several
concrete examples of attacks we successfully conducted
against our own test accounts.
4.5.1 Utilizing Login Oracles
In the previous section, we discussed that 49 domains
had scripts which returned somewhat different content
if the cookies for the logged in user were removed. In
our notion, we call these scripts login oracles since they
provide an attacker with either explicit or implicit infor-
mation on whether a user is currently logged into an ac-