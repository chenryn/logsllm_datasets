u
(1)
u
(2)
u
(1)
5
(1)
u
(1)
r
1
∨
∧
(1)
(cid:8)
(1)
(cid:8)
(2)
(cid:8)
(2)
(cid:8)
)
π2 = NIPK
∧
−e(cid:8) ^e(g2, y)r
′
3 ∧
C(cid:8) = gs
2 g(cid:8)
1 gx
(cid:8)
r
A(1)
g
(cid:8) = g
2
(1)
δ
δ
(A(1)
(cid:8) )e(cid:8) = g
g
(cid:8)
2
1
(2)
^e(A
(cid:8) ,pk)
^e(g0,h) = ^e(A(2)
(cid:8) , h)
(cid:8) ^e(g1, h)s(cid:8) ^e(g2, h)x^e(g3, h)(cid:8)∧
^e(g2, h)δ
[(
κ(cid:8) = zs(cid:8)∧
tu = Tcur − τu∧
(
)
tu  T1 ∧ ~ϕu = ρ(T1 − T0)
~(cid:8) = (cid:8) + ~ϕu − ϕu∧
′
~Cu = g ~s
2 gBu
3 gτu
1 gx
4 g
u
′
3 ∧
2 g ~(cid:8)
~C(cid:8) = g ~s
1 gx
(cid:8)
u ∥ ~C(cid:8)∥ ~Cu∥π2 to D.
u ∥A(2)
and sends κ(cid:8)∥A(1)
∥A(1)
∥A(2)
R←− Z
∗
′′
′′
p, and
D veriﬁes π2 and κ(cid:8), picks ~e(cid:8), ~s
(cid:8), ~eu, ~s
u
′′
′′
computes ~A(cid:8) = (g0g~s
~e(cid:8)+sk , ~Au = (g0g~s
~C(cid:8))
~Cu)
~eu+sk .
(cid:8)
u
(cid:8))∥( ~Au, ~eu, ~s
′′
′′
1
1
Then D sends ( ~A(cid:8), ~e(cid:8), ~s
u) to U.
′′
′
′′
′
(cid:8), ~su = ~s
U computes ~s(cid:8) = ~s
u, sets ~σ(cid:8) =
(cid:8) + ~s
u + ~s
( ~A(cid:8), ~e(cid:8), ~s(cid:8)), ~σu = ( ~Au, ~eu, ~su), and updates his credential
′
′
(cid:8), ~σ(cid:8), ~ϕu, ~Cu, ~s
with ~(cid:8), ~C(cid:8), ~s
u, and ~σu.
)]
~ϕu
5
∨
∧
∧
(cid:8)
(cid:8)
1
1
B.3.1 Getting a New Bridge
Suppose U wants to replace a blocked bridge Bb with a new
bridge. U sends Bb to D through an established Tor tunnel,
and D veriﬁes Bb is indeed blocked and then replies with the
blocking time βb of Bb.
, r(1)
gr(2)
, r(2)
(cid:8) , r(2)
b
b
b = Abgr(1)
, A(2)
gr(2)
R←− Z
b = r(1)
, δ(1)
(cid:8) = A(cid:8)gr(1)
, δ(1)
U needs to prove possession of the signatures σb and σ(cid:8).
∗
For this, U picks r(1)
p, and computes
b = gr(1)
A(1)
b =
1
r(2)
u eb, A(1)
(cid:8) e(cid:8),
δ(2)
(cid:8) = r(2)
U can earn ~ϕb = Credit(βb − τb) credits in total from
Bb, and the resulting credit balance after paying for the new
R←− Z
bridge is ~(cid:8) = (cid:8) + ~ϕb − ϕb − ϕ
∗
p,
(cid:8) = gr(1)
(cid:8) e(cid:8).
b eb, δ(2)
(cid:8) = r(1)
−. U picks ~s
′
(cid:8)
, A(2)
(cid:8)
2
1
2
2
2
(cid:8)
(cid:8)
(cid:8)
b
b
b
′
computes ~C(cid:8) = g~s
1 gx
(cid:8)
2 g ~(cid:8)
3 , constructs the following proof:
π3 = NIPK
b
b
b
b
b
5
(1)
r
1
∧
(1)
(cid:8)
(1)
b
(2)
b
(1)
b
(2)
b
, h)
2 gBb
(cid:8) , δ(1)
, δ(2)
−eb ^e(g2, y)r
(cid:8) , δ(2)
(cid:8) , τb,
′
, ~(cid:8), ~s
(cid:8)) :
′
(cid:8) , r(2)
(cid:8), r(1)
(x, (cid:8), C(cid:8), e(cid:8), s(cid:8), s
′
, δ(1)
, r(2)
b, r(1)
ϕb, Cb, eb, sb, s
′
∧
Cb = gs
3 gτb
4 gϕb
1 gx
b
∧
r
A(1)
b = g
g
2
(1)
δ
δ
(A(1)
b )eb = g
g
b
1
2
(2)
^e(A
b ,pk)
^e(g0,h) = ^e(A(2)
^e(g2, h)δ
b ^e(g1, h)sb ^e(g2, h)x
^e(g3, h)Bb ^e(g4, h)τb ^e(g5, h)ϕb∧
κb = zsb∧
′
3 ∧
C(cid:8) = gs
2 g(cid:8)
1 gx
(cid:8)
r
A(1)
(cid:8) = g
g
2
(1)
δ
δ
(A(1)
(cid:8) )e(cid:8) = g
g
(cid:8)
2
1
(2)
^e(A
(cid:8) ,pk)
^e(g0,h) = ^e(A(2)
(cid:8) , h)
(cid:8) ^e(g1, h)s(cid:8) ^e(g2, h)x^e(g3, h)(cid:8)∧
^e(g2, h)δ
[(
κ(cid:8) = zs(cid:8)∧
tb = βb − τb∧
(
)
tb  T1 ∧ ~ϕb = ρ(T1 − T0)
~(cid:8) = (cid:8) + ~ϕb − ϕb − ϕ
~(cid:8) > 0
′
~C(cid:8) = g ~s
1 gx
(cid:8)
∧
−e(cid:8) ^e(g2, y)r
3 ∧
2 g ~(cid:8)
−∧
)
(2)
(cid:8)
(2)
(cid:8)
(1)
(cid:8)
∧
∨
∧
r
1
(1)
∨
and sends κ(cid:8)∥κb∥A(1)
(cid:8)
∥A(2)
(cid:8)
∥A(1)
b
∥A(2)
b
∥ ~C(cid:8)∥π3 to D.
D veriﬁes π3, κb, and κ(cid:8). Similar to the OT in the reg-
istration, U sends D a list of nonces, and D chooses a pair of
one-time keys to sign each available bridge using the cor-
responding nonce. Running OT, U obtains ~Bb∥~σo
b , where
b = ( ~Ao
~σo
b).
b, ~so
b, ~eo
R←− Z
To update the credential with the new bridge ~Bb, U sets
∗
p, and computes
b , U picks