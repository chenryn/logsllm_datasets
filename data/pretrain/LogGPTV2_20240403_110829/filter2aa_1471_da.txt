FILENA
ME
FileName (e.g., FileName 
create/delete/rundown)
None
FLT_FAS
TIO
Minifilter fastio callback 
completion
None
FLT_IO
Minifilter callback completion
None
FLT_IO_
FAILUR
E
Minifilter callback completion 
with failure
None
FLT_IO_
INIT
Minifilter callback initiation
None
FOOTPR
INT
Support footprint analysis
ReferenceSet
HARD_F
AULTS
Hard page faults
All except SysProf 
and Network
HIBERR
UNDOW
N
Rundown(s) during hibernate
None
IDLE_ST
ATES
CPU idle states
None
INTERR
UPT
Interrupt events
Diag, DiagEasy, and 
Latency
INTERR
UPT_ST
EER
Interrupt steering events
Diag, DiagEasy, and 
Latency
IPI
Inter-processor interrupt events
None
KE_CLO
CK
Clock configuration events
None
KQUEUE
Kernel queue enqueue/dequeue
None
LOADER
Kernel and user mode image 
load/unload events
Base
MEMINF
O
Memory list info
Base, ResidentSet, 
and ReferenceSet
MEMINF
O_WS
Working set info
Base and 
ReferenceSet
MEMOR
Memory tracing
ResidentSet and 
Y
ReferenceSet
NETWO
RKTRAC
E
Network events (e.g., tcp/udp 
send/receive)
Network
OPTICA
L_IO
Optical I/O
None
OPTICA
L_IO_INI
T
Optical I/O initiation
None
PERF_C
OUNTER
Process perf counters
Diag and DiagEasy
PMC_PR
OFILE
PMC sampling events
None
POOL
Pool tracing
None
POWER
Power management events
ResumeTrace
PRIORIT
Y
Priority change events
None
PROC_T
HREAD
Process and thread create/delete
Base
PROFILE
CPU sample profile
SysProf
REFSET
Support footprint analysis
ReferenceSet
REG_HI
Registry hive tracing
None
VE
REGIST
RY
Registry tracing
None
SESSION
Session rundown/create/delete 
events
ResidentSet and 
ReferenceSet
SHOULD
YIELD
Tracing for the cooperative DPC 
mechanism
None
SPINLO
CK
Spinlock collisions
None
SPLIT_I
O
Split I/O
None
SYSCAL
L
System calls
None
TIMER
Timer settings and its expiration
None
VAMAP
MapFile info
ResidentSet and 
ReferenceSet
VIRT_A
LLOC
Virtual allocation reserve and 
release
ResidentSet and 
ReferenceSet
WDF_DP
C
WDF DPC events
None
WDF_IN
TERRUP
T
WDF Interrupt events
None
When the system session starts, events are immediately logged. There is
no provider that needs to be enabled. This implies that a consumer
application has no way to generically decode the event. System logger events
use a precise event encoding format (called NTPERF), which depends on the
event type. However, most of the data structures representing different NT
kernel logger events are usually documented in the Windows platform SDK.
EXPERIMENT: Tracing TCP/IP activity with the
kernel logger
In this experiment, you listen to the network activity events
generated by the System Logger using the Windows Performance
Monitor. As already introduced in the “Enumerating ETW
sessions” experiment, the graphical tool is not just able to obtain
data from the system performance counters but is also able to start,
stop, and manage ETW sessions (system session included). To
enable the kernel logger and have it generate a log file of TCP/IP
activity, follow these steps:
1. 
Run the Performance Monitor (by typing perfmon in the
Cortana search box) and click Data Collector Sets, User
Defined.
2. 
Right-click User Defined, choose New, and select Data
Collector Set.
3. 
When prompted, enter a name for the data collector set (for
example, experiment), and choose Create Manually
(Advanced) before clicking Next.
4. 
In the dialog box that opens, select Create Data Logs,
check Event Trace Data, and then click Next. In the
Providers area, click Add, and locate Windows Kernel
Trace. Click OK. In the Properties list, select Keywords
(Any), and then click Edit.
5. 
From the list shown in the Property window, select
Automatic and check only net for Network TCP/IP, and
then click OK.
6. 
Click Next to select a location where the files are saved. By
default, this location is
%SystemDrive%\PerfLogs\Admin\experiment\, if this is
how you named the data collector set. Click Next, and in
the Run As edit box, enter the Administrator account name
and set the password to match it. Click Finish. You should
now see a window similar to the one shown here:
7. 
Right-click the name you gave your data collector set
(experiment in our example), and then click Start. Now
generate some network activity by opening a browser and
visiting a website.
8. 
Right-click the data collector set node again and then click
Stop.
If you follow the steps listed in the “Decoding an ETL file”
experiment to decode the acquired ETL trace file, you will find that
the best way to read the results is by using a CSV file type. This is
because the System session does not include any decoding
information for the events, so the netsh.exe has no regular way to
encode the customized data structures representing events in the
EVTX file.
Finally, you can repeat the experiment using XPERF with the
following command (optionally replacing the C:\network.etl file
with your preferred name):
Click here to view code image
xperf -on NETWORKTRACE -f c:\network.etl
After you stop the system trace session and you convert the
obtained trace file, you will get similar events as the ones obtained
with the Performance Monitor.
The Global logger and Autologgers
Certain logger sessions start automatically when the system boots. The
Global logger session records events that occur early in the operating system
boot process, including events generated by the NT kernel logger. (The
Global logger is actually a system logger, as shown in Table 10-16.)
Applications and device drivers can use the Global logger session to capture
traces before the user logs in (some device drivers, such as disk device
drivers, are not loaded at the time the Global logger session begins.) While
the Global logger is mostly used to capture traces produced by the NT kernel
provider (see Table 10-17), Autologgers are designed to capture traces from
classic ETW providers (and not from the NT kernel logger).
You can configure the Global logger by setting the proper registry values
in the GlobalLogger key, which is located in the
HKLM\SYSTEM\CurrentControlSet\Control\WMI root key. In the same
way, Autologgers can be configured by creating a registry subkey, named as
the logging session, in the Autologgers key (located in the WMI root key).
The procedure for configuring and starting Autologgers is documented at
https://docs.microsoft.com/en-us/windows/win32/etw/configuring-and-
starting-an-Autologger-session.
As introduced in the “ETW initialization” section previously in this
chapter, ETW starts the Global logger and Autologgers almost at the same
time, during the early phase 1 of the NT kernel initialization. The
EtwStartAutoLogger internal function queries all the logger configuration
data from the registry, validates it, and creates the logger session using the
EtwpStartLogger routine, which has already been extensively discussed in
the “ETW sessions” section. The Global logger is a system logger, so after
the session is created, no further providers are enabled. Unlike the Global
logger, Autologgers require providers to be enabled. They are started by
enumerating each session’s name from the Autologger registry key. After a
session is created, ETW enumerates the providers that should be enabled in
the session, which are listed as subkeys of the Autologger key (a provider is
identified by a GUID). Figure 10-36 shows the multiple providers enabled in
the EventLog-System session. This session is one of the main Windows Logs
displayed by the Windows Event Viewer (captured by the Event Logger
service).
Figure 10-36 The EventLog-System Autologger’s enabled providers.
After the configuration data of a provider is validated, the provider is
enabled in the session through the internal EtwpEnableTrace function, as for
classic ETW sessions.
ETW security
Starting and stopping an ETW session is considered a high-privilege
operation because events can include system data that can be used to exploit
the system integrity (this is especially true for system loggers). The Windows
Security model has been extended to support ETW security. As already
introduced in previous sections, each operation performed by ETW requires a
well-defined access right that must be granted by a security descriptor
protecting the session, provider, or provider’s group (depending on the
operation). Table 10-18 lists all the new access rights introduced for ETW
and their usage.
Table 10-18 ETW security access rights and their usage
Value
Description
A
p
pl
ie
d 
to
WMIGUID
_QUERY
Allows the user to query information about the trace 
session
Se
ss
io
n
WMIGUID
_NOTIFIC
ATION
Allows the user to send a notification to the 
session’s notification provider
Se
ss
io
n
TRACELO
G_CREAT
E_REALTI
ME
Allows the user to start or update a real-time session
Se
ss
io
n
TRACELO
G_CREAT
E_ONDISK
Allows the user to start or update a session that 
writes events to a log file
Se
ss
io
n
TRACELO
G_GUID_E
NABLE
Allows the user to enable the provider
Pr
ov
id
er
TRACELO
G_LOG_E
VENT
Allows the user to log events to a trace session if the 
session is running in SECURE mode
Se
ss
io
n
TRACELO
G_ACCES
S_REALTI
ME
Allows a consumer application to consume events in 
real time
Se
ss