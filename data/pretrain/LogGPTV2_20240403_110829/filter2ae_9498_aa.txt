> 翻译文章，原文链接： detection-system-with-Machine-Learning>
在这篇文章中，我们将讨论我喜欢的两个主题，这些主题是过去7年中我（私人）研究的核心要素：机器学习和恶意软件检测。
我受过相当经验性和绝对非学术性的教育，我知道一个热情的开发人员想要接近机器学习并努力理解正式定义，线性代数和诸如此类的东西。因此，我将尽可能保持这种实用性，以便即使是
_受过较少教育_ 的读者也能理解并可能开始使用神经网络。
此外，大部分资源都集中在众所周知的问题上，例如[MNIST数据集](https://en.wikipedia.org/wiki/MNIST_database)上的手写数字识别（机器学习的“hello
world”），同时让读者想象更复杂的工程系统应该如何工作。通常是指如何处理非图像的输入。
TL; DR： _我不擅长数学，MNIST很无聊，检测恶意软件更有趣：D_
我还将这个用作[ergo](https://github.com/evilsocket/ergo)的一些新功能的示例用例，一个我和[chiconara](https://twitter.com/chiconara)不久前开始的项目，用于自动化机器学习模型创建，数据编码，GPU培训，基准测试和大规模部署。
与这篇文章相关的源代码可以在[这里](https://github.com/evilsocket/ergo-pe-av)找到。
**重要说明：仅此项目不构成商业防病毒的有效替代品。**
# 问题定义和数据集
传统的恶意软件检测引擎依赖于签名的使用 ——恶意软件研究人员手动选择的唯一值用以识别恶意代码的存在，同时确保非恶意样本组中没有冲突（称为 _“误报”_ ）。
这种方法有一些问题，通常很容易绕过（根据签名的类型，恶意代码中的一位或几个字节的变化可能会使恶意软件无法检测到）并且当研究人员的数量比他们需要手动逆向工程、识别和写入签名所需的独特恶意软件系列的数量少几个数量级时，这种方法就不能很好地扩展。
我们的目标是教授计算机，更具体地说是人工神经网络，在不依赖于我们需要创建的任何显式签名数据库的情况下检测Windows恶意软件，但通过简单地摄取恶意文件的数据集，我们希望能够检测并从中学习以区分恶意代码，无论是否在数据集本身内部，最重要的是，在处理新的、看不见的样本时，我们唯一知道的是哪些文件是恶意的而哪些不是，但不知道是什么使它们如此，我们将让ANN（人工神经网络）完成其余的工作。
为了做到这一点，我收集了大约200,000个[Windows
PE](https://en.wikipedia.org/wiki/Portable_Executable)样本，均匀地分为恶意（
_在VirusTotal上检测到10多个_ ）和干净（ _已知并且在VirusTotal上有0个检测_
）。由于在相同的数据集上训练和测试模型没有多大意义（因为它可以在训练集上表现得非常好，但是根本无法对新样本进行概括），这个数据集将通过遍历自动划分为3个子集：
  * _训练集_ ，70％的样本，用于训练。
  * _验证集_ ，15％的样本，在每个训练阶段对模型进行基准测试。
  * _测试集_ ，15％的样本，在训练后对模型进行基准测试。
毋庸置疑，数据集中（正确标记的）样本的数量是模型准确性的关键，它能够正确地分离这两个类并将其推广到看不见的样本
——在训练过程中使用的越多越好。此外，理想情况下，应使用较新的样本定期更新数据集，并对模型进行重新训练，以便即使在野外出现新的独特样本时（即：wget +
crontab + ergo），也能保持较高的精度。
由于我在这篇文章中使用的特定数据集的大小，我无法在不占用带宽的情况下共享它:
但是，[我在Google云端硬盘上传了dataset.csv文件](https://drive.google.com/file/d/1HIJShr0GvQCUp_0R_kQe_WLG5PippurN/view?usp=sharing)，提取了大约340MB，你可以用它来重现这篇文章的结果。
# 可移植的可执行格式
Windows PE格式有丰富的[文档记录](https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format)和许多理解其内部的好资源，例如[Ange
Albertini](https://twitter.com/angealbertini)的 _“[Exploring the Portable
Executable format](https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format) ”_ 44CON
2013演示文稿（从我拍摄下图）可以在线免费获取，因此我不会花太多时间研究细节。
我们必须牢记的关键事实是：
  * PE有几个标头描述其属性和各种寻址细节，例如PE将在内存中加载的基地址以及入口点的位置。
  * PE有几个部分，每个部分包含数据（常量，全局变量等），代码（在这种情况下，该部分被标记为可执行）或有时两者都包含。
  * PE包含导入API和从哪些系统库导入的声明。
[致Ange Angeini的作品](https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format)
例如，这是Firefox PE部分的样子：
[致“Machines Can Think”的博客](https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/)
虽然在某些情况下，如果PE已经使用[诸如UPX之类的打包](https://upx.github.io/)程序进行处理，那这部分可能看起来有点不同，因为主要代码和数据部分已经过压缩，并且在运行时解压缩的代码存根已添加：
[致“Machines Can Think”的博客](https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/)
我们现在要做的是看看如何将这些本质上非常不同的值(它们是所有类型的区间数和可变长度的字符串)编码成标量数的向量，每个向量在区间[0.0，1.0]中归一化，并且长度不变。这是我们的机器学习模型能够理解的输入类型。
确定要考虑的PE的哪些特征的过程可能是设计任何机器学习系统的最重要部分，这被称为 _特征工程_ ，而读取这些值并对其进行编码的行为称为 _特征提取_ 。
# 特征工程
创建项目后：
    ergo create ergo-pe-av
我开始在[encode.py文件中](https://github.com/evilsocket/ergo-pe-av/blob/master/encoder.py#L122)实现特征提取算法，这是一个非常简单的起点(包括注释和多行字符串在内150行)，它为我们提供了足够的信息来达到令人感兴趣的精度水平，并且在将来可以通过附加功能轻松扩展。
    cd ergo-pe-av
    vim encode.py
我们向量的前11个标量编码了一组布尔属性，[LIEF](http://lief.quarkslab.com/)，我正在使用的[QuarksLab](http://lief.quarkslab.com/)中的令人惊奇的库，从PE解析
——每个属性如果为真，编码为`1.0`，如果为假，编码为`0.0`：
属性 | 描述  
---|---  
`pe.has_configuration` | 如果PE具有[负载配置，](https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-load-configuration-structure-image-only)则为True。  
`pe.has_debug` | 如果PE具有Debug部分，则为True。  
`pe.has_exceptions` | 如果PE正在使用异常，则为True。  
`pe.has_exports` | 如果PE有任何导出符号，则为True。  
`pe.has_imports` | 如果PE正在导入任何符号，则为True。  
`pe.has_nx` | 如果PE 设置了[NX位，](https://en.wikipedia.org/wiki/NX_bit)则为True。  
`pe.has_relocations` | 如果PE具有重定位条目，则为True。  
`pe.has_resources` | 如果PE有任何资源，则为True。  
`pe.has_rich_header` | 如果存在富标题，则为True。  
`pe.has_signature` | 如果PE经过数字签名，则为Ture。  
`pe.has_tls` | 如果PE使用[TLS，](https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-tls-section)则为True。  
然后是64个元素，代表PE入口点函数的前64个字节，每个字节通过将其除以`255`标准化为`[0.0,1.0]`——
这将有助于模型检测那些具有非常独特的入口点的可执行文件，这些入口点在同一个系列的不同样本之间仅略有不同(您可以将其视为一个非常基本的签名):
    ep_bytes  =  [0]  *  64
    try:
        ep_offset = pe.entrypoint - pe.optional_header.imagebase
        ep_bytes = [int(b) for b in raw[ep_offset:ep_offset+64]]
    except Exception as e:
        log.warning("can't get entrypoint bytes from %s: %s", filepath, e)
    # ...
    # ...
    def encode_entrypoint(ep):