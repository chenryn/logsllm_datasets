**作者：Orange Tsai  
来源： 相关阅读：[Hacking Jenkins Part 2 - Abusing Meta Programming for
Unauthenticated RCE!](https://paper.seebug.org/818/ "Hacking Jenkins Part 2 -Abusing Meta Programming for Unauthenticated RCE!")**
在软体工程中, [Continuous
Integration](https://en.wikipedia.org/wiki/Continuous_integration) 及
[Continuous Delivery](https://en.wikipedia.org/wiki/Continuous_delivery)
一直都被誉为是软体开发上的必备流程, 有多少优点就不多谈, 光是帮助开发者减少许多杂事就是很大的优势了! 而在 CI/CD 的领域中, Jenkins
是最为老牌且广为人知的一套工具, 由于它的易用性, 强大的 Pipeline 系统以及对于容器完美的整合使得 Jenkins 也成为目前最多人使用的
CI/CD 应用, 根据 Snyk 在 2018 年所做出的 [JVM 生态报告](https://snyk.io/blog/jvm-ecosystem-report-2018-tools) 中, Jenkins 在 CI/CD 应用中约占六成的市占率!
对于 [红队演练(Red Team)](https://devco.re/services/red-team) 来说, Jenkins 更是兵家必争之地,
只要能掌握企业暴露在外的 Jenkins 即可掌握大量的原始码, 登入凭证甚至控制大量的 Jenkins 节点! 在过去 DEVCORE
所经手过的渗透案子中也出现过数次由 Jenkins 当成进入点, 一步一步从一个小裂缝将目标撕开到完整渗透整间公司的经典案例!
这篇文章主要是分享去年中针对 Jenkins 所做的一次简单 Security Review, 过程中共发现了五个 CVE:
  * [CVE-2018-1999002 - Arbitrary file read vulnerability](https://jenkins.io/security/advisory/2018-07-18/#SECURITY-914)
  * [CVE-2018-1000600 - CSRF and missing permission checks in GitHub Plugin](https://jenkins.io/security/advisory/2018-06-25/#SECURITY-915)
  * [CVE-2018-1999046 - Unauthorized users could access agent logs](https://jenkins.io/security/advisory/2018-08-15/#SECURITY-1071)
  * [CVE-2018-1000861 - Code execution through crafted URLs](https://jenkins.io/security/advisory/2018-12-05/#SECURITY-595)
  * [CVE-2019-1003000 - Sandbox Bypass in Script Security and Pipeline Plugins](https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08)
  * [CVE-2019-1003001 - Sandbox Bypass in Script Security and Pipeline Plugins](https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08)
  * [CVE-2019-1003002 - Sandbox Bypass in Script Security and Pipeline Plugins](https://jenkins.io/security/advisory/2019-01-08/#jenkins-security-advisory-2019-01-08)
其中比较被大家所讨论的应该是 CVE-2018-1999002, 这是一个在 Windows 下的任意档案读取, 由于攻击方式稍微有趣所以讨论声量较高一点,
这个弱点在外边也有人做了详细的分析, 详情可以参考由腾讯云鼎实验室所做的分析([Jenkins
任意文件读取漏洞分析](https://cloud.tencent.com/developer/article/1165414)), 他们也成功的展示从
[Shodan](https://www.shodan.io/search?query=jenkins) 找到一台未修补的 Jenkins
实现任意读档到远端代码执行取得权限的过程!
但这篇文章要提的并不是这个, 而是当时为了尝试绕过 CVE-2018-1999002 所需的最小权限 Overall/Read 时跟进 Jenkins
所使用的核心框架 Stapler 挖掘所发现的另外一个问题 - CVE-2018-1000861! 如果光从官方的漏洞叙述应该会觉得很神奇,
真的可以光从随便一个网址去达成代码执行吗?
针对这个漏洞, 我的观点是它就是一个存取控制清单(ACL)上的绕过, 但由于这是 Jenkins 架构上的问题并不是单一的程式编写失误,
进而导致了这个漏洞利用上的多样性! 而为了这个技术债, Jenkins 官方也花费了一番心力([Jenkins
Patch](https://github.com/jenkinsci/jenkins/commit/47f38d714c99e1841fb737ad1005618eb26ed852)
及 [Stapler
Patch](https://github.com/stapler/stapler/commit/28e8eba822a0df9dcd64d20eb63d8ab5f6ee2980))去修复这个漏洞,
不但在原有的架构上介绍了新的路由黑名单及白名单, 也扩展了原有架构的 [Service Provider Interface
(SPI)](https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix)
去保护 Jenkins 路由, 下面就来解释为何 Jenkins 要花了那么多心力去修复这个漏洞!
### 代码审查范围
首先要声明的是, 这并不是一次完整的代码审查(毕竟要做一次太花时间了…), 因此只针对高风险漏洞进行挖掘, 著眼的范围包括:
  * Jenkins 核心
  * Stapler 网页框架
  * 建议安装插件
Jenkins 在安装过程中会询问是否安装建议的套件(像是 Git, GitHub, SVN 与 Pipeline… 等等),
基本上大多数人都会同意不然就只会得到一个半残的 Jenkins 很不方便XD
### Jenkins 中的权限机制
因为这是一个基于 ACL 上的绕过, 所以在解释漏洞之前, 先来介绍一下 Jenkins 中的权限机制! 在 Jenkins 中有数种不同的角色权限,
甚至有专门的 [Matrix Authorization Strategy
Plugin](https://plugins.jenkins.io/matrix-auth) (同为建议安装套件)可针对各专案进行细部的权限设定,
从攻击者的角度我们粗略分成三种:
#### 1\. Full Access
对于 Jenkins 有完整的控制权, 可对 Jenkins 做任何事! 基本上有这个权限即可透过 [Script
Console](http://jenkins.local/script) 介面使用 Groovy 执行任意代码!
    print "uname -a".execute().text
这个权限对于骇客来说也是最渴望得到的权限, 但基本上由于安全意识的提升及网路上各种僵尸网路对全网进行扫描, 这种配置已经很少见(或只见于内网)
#### 2\. Read-only Mode
可从 [Configure Global Security](http://jenkins.local/configureSecurity)
介面中勾选下面选项来开启这个模式
> Allow anonymous read access
在这个模式下, 所有的内容皆是可读的, 例如可看到工作日志或是一些 job/node 等敏感资讯,
对于攻击者来说在这个模式下最大的好处就是可以获得大量的原始码! 但与 Full Access 模式最大的差异则是无法进行更进一步的操作或是执行 Groovy
代码以取得控制权!
虽然这不是 Jenkins 的预设设定, 但对于一些习惯自动化的 DevOps 来说还是有可能开启这个选项, 根据实际在
[Shodan](https://www.shodan.io/search?query=jenkins) 上的调查约 12% 的机器还是开启这个选项!
以下使用 `ANONYMOUS_READ=True` 来代称这个模式
#### 3\. Authenticated Mode
这是 Jenkins 预设安装好的设定, 在没有一组有效的帐号密码状况下无法看到任何资讯及进行任何操作! 以下使用
`ANONYMOUS_READ=False` 来代称此模式
### 漏洞分析
整个漏洞要从 Jenkins 的 [动态路由](https://jenkins.io/doc/developer/handling-requests/routing/) 讲起, 为了给开发者更大的弹性, Jenkins(严格来讲是 Stapler)使用了一套 Naming
Convention 去匹配路由及动态的执行! 首先 Jenkins 以 `/` 为分隔将 URL 符号化, 接著由
[jenkins.model.Jenkins](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java)
为入口点开始往下搜寻, 如果符号符合 (1) Public 属性的成员或是 (2) Public 属性的方法符合下列命名规则, 则调用并继续往下呼叫:
    1. get()
    2. get(String)
    3. get(Int)
    4. get(Long)
    5. get(StaplerRequest)
    6. getDynamic(String, …)
    7. doDynamic(…)
    8. do(…)
    9. js(…)
    10. Class method with @WebMethod annotation
    11. Class method with @JavaScriptMethod annotation
看起来 Jenkins 给予开发者很大程度的自由去访问各个物件, 但过于自由总是不好的，根据这种调用方式这里就出现了两个问题!
#### 1\. 万物皆继承 java.lang.Object
在 Java 中, 所有的物件皆继承
[java.lang.Object](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)
这个类别, 因此所有在 Java 中的物件皆存在著 `getClass()` 这个方法! 而恰巧这个方法又符合命名规则 `#1`, 因此
`getClass()` 可在 Jenkins 调用链中被动态呼叫!
#### 2\. 跨物件操作导致白名单绕过
前面所提到的 `ANONYMOUS_READ`, 其中 `True` 与 `False` 间最大的不同在于当在禁止的状况下, 最初的入口点会透过
[jenkins.model.Jenkins#getTarget()](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/jenkins/model/Jenkins.java#L4682)
多做一个基于白名单的 URL 前缀检查, 这个白名单如下:
    private static final ImmutableSet ALWAYS_READABLE_PATHS = ImmutableSet.of(
        "/login",
        "/logout",