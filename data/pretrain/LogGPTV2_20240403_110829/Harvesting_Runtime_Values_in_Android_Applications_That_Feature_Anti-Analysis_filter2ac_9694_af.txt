the problem of only ﬁnding values in code that is actually
executed, thus requiring a test driver with full code coverage.
HARVESTER circumvents this problem by directly executing
the code of interest regardless of its position in the original
application. Dynamic determinacy analysis [58] is an approach
for identifying values that always have the same value in all
executions of a program, regardless of the input values. This
model, however, does not allow for sets of values that are
constant for a given environment only.
Hybrid Analysis:
TamiFlex [28] monitors reﬂective method
calls in Java applications at runtime and injects the found
call targets into the application as call edges to aid static
analysis tools. It does not support Android, however, and
employs no slicing. Instead, it always executes a full, single
run, leaving open how full coverage of callees is to be achieved.
AppDoctor [59] slices Android applications to ﬁnd user
interactions that lead to application crashes. AppDoctor’s hybrid
slice-and-run principle is similar to HARVESTER. However,
AppDoctor executes the complete derived UI actions, while
HARVESTER’s slices only contain code contributing to the value
of a concrete value of interest. AppSealer [60] performs static
taint tracking on an Android application and then instruments
the app along the respective propagation paths to monitor for
actual leaks at runtime, effectively ruling out false positives
introduced by the static analysis. It then ﬁxes component-
hijacking vulnerabilities at runtime if sensitive data reaches a
sink. This approach can, however, not ﬁnd leaks missed by the
static analysis and thus inherits the problem of reﬂective method
calls. SMV-Hunter [61] scans for custom implementations
of the SSL certiﬁcate validation in Android applications. It
ﬁrst statically checks whether custom validation routines are
present. If so, the dynamic part attempts to trigger this code
and conﬁrm a man-in-the-middle vulnerability. The tool only
supports simple UI interactions that neither span multiple pages
nor require complex inputs. Rozzle [62], a tool for de-cloaking
internet malware has a similar goal as HARVESTER, but has
its limitation in triggering the malicious behavior. For instance,
it can not handle timing or logic bombs. Zhou et. al. [63]
present an approach that is, just like HARVESTER, based on
slicing and execution. They, however, execute the app inside a
custom interpreter which is also responsible for steering the
execution into speciﬁc branches. As this approach completely
replaces the Android OS, it requires a very precise model of
the OS and its libraries. Roundy et al. [64] combine static and
dynamic code analysis in order to make the CFG more precise
in cases where malware is packed, obfuscated or dynamically
loads additional code. Zhao et al. [65] provide an approach
for extracting runtime values for native binaries. They also
combine static backward slicing with dynamic code execution,
but their extracted slice contains an unmodiﬁed code, including
conditions. This results in a lack of extracting values of interest
since only one path will be executed during runtime.
13
UI-Automation:
SwiftHand [36] uses machine-learning to
infer a model of the application which is then used to generate
concrete input sequences that visit previously unexplored states
of the app. On complex user interfaces, however, SwiftHand’s
code coverage can fall under 40% according to the numbers
stated in the paper. Code that is only executed in speciﬁc
environments (e.g., depending on data loaded from the Internet)
might not be reached at all. Dynodroid [34] instruments the
Android framework for capturing events from unmodiﬁed
applications, generated both by automatic techniques such as
MonkeyRunner [33] and by human analysts. On average, it
achieves a code coverage of 55%. Brahmastra [66] is another
UI-testing tool that combines static analysis with bytecode
rewriting in order to directly execute certain code statements.
Since the tool relies on a complete static callgraph, it has its
limitation in applications that are obfuscated with reﬂective
method calls such as the one used in the Obad malware family.
AppsPlayground [67] uses an enhanced version of TaintDroid
[14] for dynamic data ﬂow tracking. The authors changed the
Android framework to additionally monitor speciﬁc API and
kernel level methods. For exercising the application at runtime,
they use random testing guided by heuristics leading to a code
coverage of about 33%. As HARVESTER directly executes the
code fragments of interest, it does not need a method for UI
automation, avoiding the problem of poor coverage and recall.
XI. CONCLUSIONS
In this paper, we presented HARVESTER, a novel hybrid
approach for extracting runtime values from Android appli-
cations even in the case of obfuscation and powerful anti-
analysis techniques (e.g., emulator detection, time bombs or
logic bombs). We have shown that HARVESTER can be used as a
deobfuscator and ﬁnds, among other things, plain-text telephone
numbers of SMS trojans, command and control messages of
bots, and reﬂective call targets of various types of malware.
Opposed to current state-of-the art UI automation approaches
HARVESTER yields an almost perfect coverage of logging
points. We have evaluated HARVESTER both as a standalone
tool and as an aid for existing static and dynamic analyses by
enhancing applications with the deobfuscated runtime values.
Our results show that HARVESTER signiﬁcantly improves the
recall of current static and dynamic data-ﬂow analysis tools. On
average, HARVESTER analyzes an application in less than three
minutes, yielding many dynamically computed runtime values
that no previous automated approach was able to retrieve.
Acknowledgements:
This work was supported by the
BMBF within EC SPRIDE and ZertApps, by the Hessian
LOEWE excellence initiative within CASED, and by the DFG
through the projects TESTIFY and RUNSECURE, the Collab-
orative Research Center CROSSING and the Priority Program
1496 Reliably Secure Software Systems. We would like to
thank our shepherd Christopher Kruegel and all anonymous
reviewers throughout the project for improving the paper and
HARVESTER.
REFERENCES
[1] E. Tinaztepe, D. Kurt, and A. G¨ulec¸, “Android obad,” COMODO, Tech.
Rep., Jul. 2013.
[3] F-Secure Labs, “Trojan:android/pincer.a,” Blog, Apr. 2013, https://www.f-
secure.com/weblog/archives/00002538.html.
[4] C. Fritz, S. Arzt, S. Rasthofer, E. Bodden, A. Bartel, J. Klein,
Y.
le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise
context, ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis
for android apps,” in PLDI ’14, Jun. 2014. [Online]. Available:
http://www.bodden.de/pubs/far+14ﬂowdroid.pdf
[5] L. Li, A. Bartel, T. F. Bissyande, J. Klein, Y. L. Traon, S. Arzt,
S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel, “IccTA: Detecting
inter-component privacy leaks in android apps,” in ICSE ’15, 2015.
[6] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and
Y. Le Traon, “Effective inter-component communication mapping in
android with epicc: An essential step towards holistic security analysis,”
in USENIX Security ’13. Berkeley, CA, USA: USENIX Association,
2013, pp. 543–558.
[7] D. Octeau, D. Luchaup, M. Dering, S. Jha, and P. McDaniel, “Composite
constant propagation: Application to android inter-component communi-
cation analysis,” in Proceedings of the 37th International Conference
on Software Engineering (ICSE), 2015.
[8] K. Coogan, S. Debray, T. Kaochar, and G. Townsend, “Automatic static
unpacking of malware binaries,” in WCRE ’09. Washington, DC, USA:
IEEE Computer Society, 2009, pp. 167–176.
[9] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis, and
S. Ioannidis, “Rage against the virtual machine: Hindering dynamic
analysis of android malware,” in EuroSec ’14. New York, NY, USA:
ACM, 2014, pp. 5:1–5:6.
[10] T. Vidas and N. Christin, “Evading Android runtime analysis via sandbox
detection,” in ASIACCS ’14, Kyoto, Japan, Jun. 2014.
[11] L. Kelion, “Android adware ’infects millions’ of phones and tablets,”
BBC, Feb. 2015, http://www.bbc.com/news/technology-31129797.
[12] C. S. Jensen, M. R. Prasad, and A. Møller, “Automated testing with
targeted event sequence generation,” in ISSTA ’13. New York, NY,
USA: ACM, 2013, pp. 67–77.
[13] Google Play, “Whatsapp messenger,” Google PlayStore Website, Mai
2014, https://play.google.com/store/apps/details?id=com.whatsapp.
[14] W. Enck, P. Gilbert, B. gon Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. Sheth, “Taintdroid: An information-ﬂow tracking system for realtime
privacy monitoring on smartphones,” in OSDI ’10, 2010, pp. 393–407.
2014,
[15] F-Secure,
2014,” Apr.
q1
“Mobile
threat
report
http://www.f-secure.com/static/doc/labs global/Research/Mobile
Threat Report Q1 2014 print.pdf.
[17]
[16] S. A. C. Technology, “Dexguard,” Saikoa Website, Feb 2014, http:
//www.saikoa.com/dexguard.
J. Hoffmann, M. Ussath, T. Holz, and M. Spreitzenbarth, “Slicing
droids: Program slicing for
smali code,” in SAC ’13. New
York, NY, USA: ACM, 2013, pp. 1844–1851. [Online]. Available:
http://doi.acm.org/10.1145/2480362.2480706
[18] T. Raffetseder, C. Kruegel, and E. Kirda, “Detecting system emulators,”
in ISC ’07. Berlin, Heidelberg: Springer-Verlag, 2007, pp. 1–18.
[19] S. Rasthofer, S. Arzt, and E. Bodden, “A machine-learning approach
for classifying and categorizing android sources and sinks,” NDSS ’14,
February 2014.
[20] Z. Xu, J. Zhang, G. Gu, and Z. Lin, “Goldeneye: Efﬁciently and
effectively unveiling malwares targeted environment,” in Research in
Attacks, Intrusions and Defenses, ser. Lecture Notes in Computer Science,
A. Stavrou, H. Bos, and G. Portokalidis, Eds. Springer International
Publishing, 2014, vol. 8688, pp. 22–45.
[21] A. Moser, C. Kruegel, and E. Kirda, “Exploring multiple execution paths
for malware analysis,” in Proceedings of the 2007 IEEE Symposium
on Security and Privacy, ser. SP ’07. Washington, DC, USA: IEEE
Computer Society, 2007, pp. 231–245.
[22] M. Weiser, “Program slicing,” in ICSE ’81.
IEEE Press, 1981, pp. 439–449.
Piscataway, NJ, USA:
[23] F. Tip, “A survey of program slicing techniques.” Amsterdam, The
Netherlands, The Netherlands, Tech. Rep., 1994.
[2] F. Ruiz, “Fakeinstaller leads the attack on android phones,” McAfee Labs
Website, Oct 2012, https://blogs.mcafee.com/mcafee-labs/fakeinstaller-
leads-the-attack-on-android-phones.
[24] T. Vidas and N. Christin, “Evading android runtime analysis via sandbox
detection,” in ASIA CCS ’14. New York, NY, USA: ACM, 2014, pp.
447–458.
14
[25] D. Maier, T. Muller, and M. Protsenko, “Divide-and-conquer: Why
android malware cannot be stopped,” in ARES ’14, Sept 2014, pp.
30–39.
[26] S. Rasthofer, I. Asrar, S. Huber, and E. Bodden, “How current android
malware seeks to evade automated code analysis,” in 9th International
Conference on Information Security Theory and Practice (WISTP’2015).
[27] M. Bravenboer and Y. Smaragdakis, “Strictly declarative speciﬁcation of
sophisticated points-to analyses,” in OOPSLA ’09, 2009, pp. 243–262.
[28] E. Bodden, A. Sewe, J. Sinschek, M. Mezini, and H. Oueslati, “Taming
reﬂection: Aiding static analysis in the presence of reﬂection and custom
class loaders,” in ICSE ’11. New York, NY, USA: ACM, 2011, pp.
241–250.
[29] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting
android apps for component hijacking vulnerabilities,” in CCS ’12, 2012,
pp. 229–240.
[30] P. Adam, A. Chaudhuri, and J. Foster, “Scandroid: Automated security
certiﬁcation of android applications,” in SP ’09, 2009.
[31] Secure Software Engineering Group Darmstadt, “Codeinspect binary
android analysis,” Blog, http://sseblog.ec-spride.de/tools/codeinspect/.
[32] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann,
“Mobile-sandbox: Having a deeper look into android applications,” in
SAC ’13. New York, NY, USA: ACM, 2013, pp. 1808–1815.
[33] Google Developers, “monkeyrunner,” Google Developer Website, Mai
2014, http://developer.android.com/tools/help/monkeyrunner concepts.
html.
[34] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation
system for android apps,” in ESEC/FSE ’13. New York, NY, USA:
ACM, 2013, pp. 224–234.
[35] S. Hao, B. Liu, S. Nath, W. G. Halfond, and R. Govindan, “Puma:
Programmable ui-automation for large-scale dynamic analysis of mobile
apps,” in Proceedings of the 12th Annual International Conference on
Mobile Systems, Applications, and Services, ser. MobiSys ’14. New
York, NY, USA: ACM, 2014, pp. 204–217.
[36] W. Choi, G. Necula, and K. Sen, “Guided gui testing of android apps
with minimal restart and approximate learning,” in OOPSLA ’13. New
York, NY, USA: ACM, 2013, pp. 623–640.
[37] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated concolic
testing of smartphone apps,” in Proceedings of the ACM SIGSOFT 20th
International Symposium on the Foundations of Software Engineering,
ser. FSE ’12. New York, NY, USA: ACM, 2012, pp. 59:1–59:11.
[38] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization
and evolution,” in SP ’12. Washington, DC, USA: IEEE Computer
Society, 2012, pp. 95–109.
[39] G. Bossert and D. Kirchner, “How to play hooker: Une solution d’analyse
automatis´ee de markets android.”
[40] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio,
V. van der Veen, and C. Platzer, “Andrubis - 1,000,000 Apps Later:
A View on Current Android Malware Behaviors,” in Proceedings of
the the 3rd International Workshop on Building Analysis Datasets and
Gathering Experience Returns for Security (BADGERS), 2014.
[41] A. Stats, “Number of android applications,” Android Statistics Page
of AppBrain, March 2014, http://www.appbrain.com/stats/number-of-
android-apps.
[42] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, “Harvesting
runtime data in android applications for identifying malware and
enhancing code analysis,” EC SPRIDE, Tech. Rep. TUD-CS-2015-0031,
Feb. 2015.
I. S. S. Lab, “Anubis - malware analysis for unknown binaries,” Anubis
Website, mai 2014, http://anubis.iseclab.org.
[43]
[44] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang, “Appintent:
analyzing sensitive data transmission in android for privacy leakage
detection,” in CCS ’13. New York, NY, USA: ACM, 2013, pp. 1043–
1054.
[45] D. Octeau, D. Luchaup, M. Dering, S. Jha, and P. McDaniel, “Com-
posite Constant Propagation: Application to Android Inter-Component
Communication Analysis,” in Proceedings of the 37th International
Conference on Software Engineering (ICSE), May 2015.
[46] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck, “Mast: Triage for
15
market-scale mobile malware analysis,” in WiSec ’13. New York, NY,
USA: ACM, 2013, pp. 13–24.
[47] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller, “Checking app behavior
against app descriptions,” in ICSE ’14, May 2014.
[48] D. Arp, M. Spreitzenbarth, M. H¨ubner, H. Gascon, K. Rieck, and
C. Siemens, “Drebin: Effective and explainable detection of android
malware in your pocket,” in NDSS’14, San Diego, CA, February 2014.
[49] V. Avdiienko, K. Kuznetsov, A. Gorla, A. Zeller, S. Arzt, S. Rasthofer,
and E. Bodden, “Mining apps for abnormal usage of sensitive data,” in
Software Engineering (ICSE), 2015 IEEE/ACM 37th IEEE International
Conference on, vol. 1, May 2015, pp. 426–436.
[50] P. Godefroid, M. Y. Levin, and D. Molnar, “Sage: Whitebox fuzzing
for security testing,” Queue, vol. 10, no. 1, pp. 20:20–20:27, Jan. 2012.
J. Drake, “Stagefright: Scary code in the heart of android,” BlackHat
USA 2015, Aug. 2015.
[51]
[52] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A study of android
application security,” in USENIX Security ’11. Berkeley, CA, USA:
USENIX Association, 2011, pp. 21–21.
[53] D. Octeau, S. Jha, and P. McDaniel, “Retargeting android applications
to java bytecode,” in FSE ’12. New York, NY, USA: ACM, 2012, pp.
6:1–6:11.
[54] M. I. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard,
“Information-ﬂow analysis of Android applications in DroidSafe,” in
Proceedings of the 22nd Annual Network and Distributed System Security
Symposium (NDSS’15), 2015.
[55] F. Wei, S. Roy, X. Ou, and Robby, “Amandroid: A precise and general
inter-component data ﬂow analysis framework for security vetting of
android apps,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’14. New York,
NY, USA: ACM, 2014, pp. 1329–1341.
J. Oberheide and C. Miller, “Dissecting the android bouncer,” Summer-
Con2012, New York, 2012.
[56]
[57] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: practical policy enforce-
ment for android applications,” in USENIX Security ’12, 2012.
[58] M. Sch¨afer, M. Sridharan, J. Dolby, and F. Tip, “Dynamic determinacy
analysis,” in PLDI ’13. New York, NY, USA: ACM, 2013, pp. 165–174.
[59] G. Hu, X. Yuan, Y. Tang, and J. Yang, “Efﬁciently, effectively detecting
mobile app bugs with appdoctor,” EuroSys, 2014.
[60] M. Zhang and H. Yin, “Appsealer: Automatic generation of vulnerability-
speciﬁc patches for preventing component hijacking attacks in android
applications,” in NDSS’14, San Diego, CA, Feb. 2014.
[61] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “Smv-
hunter: Large scale, automated detection of ssl/tls man-in-the-middle
vulnerabilities in android apps,” in NDSS’14, San Diego, CA, February
2014.
[62] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert, “Rozzle: De-cloaking
internet malware,” in Proceedings of the 2012 IEEE Symposium on
Security and Privacy, ser. SP ’12. Washington, DC, USA: IEEE
Computer Society, 2012, pp. 443–457.
[63] Y. Zhou, L. Wu, Z. Wang, and X. Jiang, “Harvesting developer credentials
in android apps,” in Proceedings of the 8th ACM Conference on Security
and Privacy in Wireless and Mobile Networks, ser. WiSec ’15, 2015.
[64] K. A. Roundy and B. P. Miller, “Hybrid analysis and control of malware,”
in Proceedings of the 13th International Conference on Recent Advances
in Intrusion Detection, ser. RAID’10. Berlin, Heidelberg: Springer-
Verlag, 2010, pp. 317–338.
[65] Z. Zhao, G.-J. Ahn, and H. Hu, “Automatic Extraction of Secrets from
Malware,” in Proceedings of the 18th Working Conference on Reverse
Engineering, M. Pinzger, D. Poshyvanyk, and J. Buckley, Eds.
IEEE
Computer Society, 2011, pp. 159–168.
[66] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath,
R. Wang, and D. Wetherall, “Brahmastra: Driving apps to test the
security of third-party components,” in Proceedings of 23rd USENIX.
Berkeley, CA, USA: USENIX Association, 2014, pp. 1021–1036.
[67] V. Rastogi, Y. Chen, and W. Enck, “Appsplayground: Automatic security
analysis of smartphone applications,” in CODASPY ’13. New York,
NY, USA: ACM, 2013, pp. 209–220.