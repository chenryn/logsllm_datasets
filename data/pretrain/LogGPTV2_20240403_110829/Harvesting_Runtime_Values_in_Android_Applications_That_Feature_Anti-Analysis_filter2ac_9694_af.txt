### Problem of Finding Values in Executed Code

One significant challenge in software analysis is identifying values only within the code that is actually executed, which necessitates a test driver with full code coverage. HARVESTER overcomes this issue by directly executing the code of interest, regardless of its position in the original application. Dynamic determinacy analysis [58] is a technique for identifying values that remain constant across all program executions, irrespective of input. However, this approach does not account for sets of values that are constant only within a specific environment.

### Hybrid Analysis Approaches

**TamiFlex [28]:**
- Monitors reflective method calls in Java applications at runtime.
- Injects the discovered call targets into the application as call edges to assist static analysis tools.
- Does not support Android and does not use slicing.
- Executes a full, single run, leaving the question of how to achieve full callee coverage open.

**AppDoctor [59]:**
- Slices Android applications to identify user interactions leading to crashes.
- Similar to HARVESTER's hybrid slice-and-run principle.
- Executes complete derived UI actions, whereas HARVESTER's slices contain only code contributing to the value of interest.

**AppSealer [60]:**
- Performs static taint tracking on Android applications.
- Instruments the app along propagation paths to monitor for actual leaks at runtime, reducing false positives from static analysis.
- Fixes component-hijacking vulnerabilities if sensitive data reaches a sink.
- Cannot find leaks missed by static analysis, inheriting the problem of reflective method calls.

**SMV-Hunter [61]:**
- Scans for custom SSL certificate validation implementations in Android applications.
- Statically checks for custom validation routines and dynamically attempts to trigger and confirm man-in-the-middle vulnerabilities.
- Limited to simple UI interactions that do not span multiple pages or require complex inputs.

**Rozzle [62]:**
- A tool for de-cloaking internet malware, similar in goal to HARVESTER.
- Has limitations in triggering malicious behavior, such as handling timing or logic bombs.

**Zhou et al. [63]:**
- Presents an approach based on slicing and execution, similar to HARVESTER.
- Executes the app inside a custom interpreter responsible for steering execution into specific branches.
- Requires a precise model of the Android OS and its libraries, as it completely replaces the Android OS.

**Roundy et al. [64]:**
- Combine static and dynamic code analysis to improve the precision of the Control Flow Graph (CFG) in cases of packed, obfuscated, or dynamically loaded code.

**Zhao et al. [65]:**
- Provide an approach for extracting runtime values for native binaries.
- Combine static backward slicing with dynamic code execution, but their extracted slice includes unmodified code, including conditions, resulting in the execution of only one path during runtime.

### UI-Automation Tools

**SwiftHand [36]:**
- Uses machine learning to infer a model of the application and generate input sequences to explore unvisited states.
- Achieves low code coverage (less than 40%) on complex user interfaces.
- May not reach code executed in specific environments, such as those dependent on internet data.

**Dynodroid [34]:**
- Instruments the Android framework to capture events from unmodified applications.
- Uses automatic techniques like MonkeyRunner [33] and human analysts.
- Achieves an average code coverage of 55%.

**Brahmastra [66]:**
- Combines static analysis with bytecode rewriting to directly execute certain code statements.
- Relies on a complete static call graph, limiting its effectiveness in obfuscated applications with reflective method calls.

**AppsPlayground [67]:**
- Uses an enhanced version of TaintDroid [14] for dynamic data flow tracking.
- Modifies the Android framework to monitor specific API and kernel-level methods.
- Uses random testing guided by heuristics, achieving a code coverage of about 33%.

HARVESTER directly executes the code fragments of interest, eliminating the need for UI automation and avoiding the issues of poor coverage and recall.

### Conclusions

In this paper, we introduced HARVESTER, a novel hybrid approach for extracting runtime values from Android applications, even in the presence of obfuscation and advanced anti-analysis techniques. HARVESTER can be used as a deobfuscator and has been shown to find plain-text telephone numbers of SMS trojans, command and control messages of bots, and reflective call targets of various malware. Unlike current state-of-the-art UI automation approaches, HARVESTER achieves near-perfect coverage of logging points. We evaluated HARVESTER both as a standalone tool and as an aid for existing static and dynamic analyses by enhancing applications with deobfuscated runtime values. Our results show that HARVESTER significantly improves the recall of current static and dynamic data-flow analysis tools. On average, HARVESTER analyzes an application in less than three minutes, yielding many dynamically computed runtime values that no previous automated approach could retrieve.

### Acknowledgements

This work was supported by the BMBF within EC SPRIDE and ZertApps, by the Hessian LOEWE excellence initiative within CASED, and by the DFG through the projects TESTIFY and RUNSECURE, the Collaborative Research Center CROSSING, and the Priority Program 1496 Reliably Secure Software Systems. We thank our shepherd Christopher Kruegel and all anonymous reviewers for their contributions to improving the paper and HARVESTER.

### References

[References listed here as provided in the original text]

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the technical accuracy and depth of the original content.