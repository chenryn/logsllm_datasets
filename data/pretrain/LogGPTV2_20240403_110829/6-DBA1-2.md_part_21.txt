\[root@sql51 \~\]# innobackupex \--apply-log \--redo-only /fullbak
\[root@sql51 \~\]# cat /fullbak/xtrabackup_checkpoints
backup_type = log-applied #注意此处:变成了增量恢复状态
from_lsn = 0
to_lsn = 3041903 #范围0-3041903
last_lsn = 3041912
compact = 0
recover_binlog_info = 0
整合第1次增量备份的文件
\[root@sql51 \~\]# innobackupex \--apply-log \--redo-only /fullbak
\--incremental-dir=/new1dir
\[root@sql51 \~\]# cat /fullbak/xtrabackup_checkpoints
backup_type = log-applied
from_lsn = 0
to_lsn = 3042229 #序号范围变成了0-3042229(new1的结束)
last_lsn = 3042238
compact = 0
recover_binlog_info = 0
整合第2次增量备份的文件
\[root@sql51 \~\]# innobackupex \--apply-log \--redo-only /fullbak
\--incremental-dir=/new2dir
\[root@sql51 \~\]# cat /fullbak/xtrabackup_checkpoints
backup_type = log-applied
from_lsn = 0
to_lsn = 3042571 #序号范围变成了0-3042571(new2的结束)
last_lsn = 3042580 )
compact = 0
recover_binlog_info = 0
开始增量备份
\[root@sql51 \~\]# rm -rf /var/lib/mysql
\[root@sql51 \~\]# mkdi
mkdict mkdir
\[root@sql51 \~\]# mkdir /var/lib/mysql
\[root@sql51 \~\]# innobackupex \--copy-back /fullbak/
\[root@sql51 \~\]# ls -l /var/lib/mysql
\[root@sql51 \~\]# chown -R mysql:mysql /var/lib/mysql
\[root@sql51 \~\]# systemctl restart mysqld
\[root@sql51 \~\]# mysql -uroot -p654321
#### 差异备份(需要整理)
352 innobackupex \--user root \--password 654321 /cybak \--no-timestamp
353 history
354 324 innobackupex \--user root \--password 654321 \--incremental
/new1dir \--incremental-basedir=/fullbak \--no-timestamp
355 innobackupex \--user root \--password 654321 \--incremental /new1dir
\--incremental-basedir=/fullbak \--no-timestamp
356 innobackupex \--user root \--password 654321 \--incremental /cy1dir
\--incremental-basedir=/cybak \--no-timestamp
357 mysql -uroot -p654321
358 rm -rf /cy1dir
359 innobackupex \--user root \--password 654321 \--incremental /cy1dir
\--incremental-basedir=/cybak \--no-timestamp
360 mysql -uroot -p654321
361 innobackupex \--user root \--password 654321 \--incremental /cy2dir
\--incremental-basedir=/cybak \--no-timestamp
\[root@sql51 \~\]# cat /cybak/xtrabackup_checkpoints
backup_type = full-backuped
from_lsn = 0
to_lsn = 3042856
last_lsn = 3042865
compact = 0
recover_binlog_info = 0
\[root@sql51 \~\]# cat /cy1dir/xtrabackup_checkpoints
backup_type = incremental
from_lsn = 3042856
to_lsn = 3043211
last_lsn = 3043220
compact = 0
recover_binlog_info = 0
\[root@sql51 \~\]# cat /cy2dir/xtrabackup_checkpoints
backup_type = incremental
from_lsn = 3042856
to_lsn = 3043553
last_lsn = 3043562
compact = 0
recover_binlog_info = 0
Cy2dir备份的文件包含了 Cy1dir的备份文件,,,
Cy2dir 的序号包含了 Cy1dir
### 3.4.3 从完全备份文件里恢复单个表的数据
#### 准备实验数据,新建表b并插入数据
mysql\> create table db5.b(name char(10));
mysql\> insert into db5.b values(\"hk\");
mysql\> insert into db5.b values(\"hk\");
mysql\> insert into db5.b values(\"tom\");
mysql\> insert into db5.b values(\"tom\");
#### 表b插入数据后备份数据库
\[root@sql51 \~\]# innobackupex \--user root -p654321
\--databases=\"db5\" /db5bak \--no-timestamp
#### 备份好数据后删除表b
Database changed
mysql\> show tables;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables_in_db5 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| a \|
\| b \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)
mysql\> drop table b;
Query OK, 0 rows affected (0.13 sec)
mysql\> system ls /var/lib/mysql/db5
a.frm a.ibd db.opt
#### 恢复步骤1:创建相同结构的表
在需要恢复b表的数据库服务器内创建相同结构的表
mysql\> create table db5.b(name char(10));
Query OK, 0 rows affected (0.23 sec)
mysql\> system ls /var/lib/mysql/db5/b.\* #查看创建b表后产生的文件
/var/lib/mysql/db5/b.frm /var/lib/mysql/db5/b.ibd
b.ibd为表空间文件
b.frm 为表结构文件
#### 恢复步骤2:创建相同结构的表的表空间
mysql\> alter table db5.b discard tablespace;
Query OK, 0 rows affected (0.10 sec)
mysql\> system ls /var/lib/mysql/db5/b.\*
/var/lib/mysql/db5/b.frm #只剩frm表结构文件
#### 恢复步骤3:在备份数据里面导出表信息
\[root@sql51 \~\]# innobackupex \--user root \--password 654321
\--apply-log \--export /db5bak
\[root@sql51 \~\]# ls /db5bak/db5/
a.cfg a.exp a.frm a.ibd b.cfg b.exp b.frm b.ibd db.opt
所有的库多了: .cfg .exp 两种文件
#### 恢复步骤4:把导出的信息文件拷贝到数据库目录下
mysql\> system cp /db5bak/db5/b.{exp,cfg,ibd} /var/lib/mysql/db5/
#### 恢复步骤5:修改所有者和组用户为mysql
mysql\> system chown mysql:mysql /var/lib/mysql/db5/b.\*
#### 恢复步骤6:导入表信息
mysql\> alter table db5.b import tablespace;
Query OK, 0 rows affected, 1 warning (0.33 sec)
#### 恢复步骤7查看数据
mysql\> select \* from db5.b;
mysql\> system rm -rf /var/lib/mysql/db5/b.exp
mysql\> system rm -rf /var/lib/mysql/db5/b.cfg
b.exp文件:导出库文件, #可有可无的文件,建议删除
B.cfg #可有可无的文件,建议删除
## 案例
1 数据备份与恢复
1.1 问题
本案例要求熟悉MySQL的备份与恢复，完成以下任务操作：
逻辑备份工具 mysqldump
使用mysql 恢复数据库
1.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：使用mysqldump进行逻辑备份
1）备份MySQL服务器上的所有库
将所有的库备份为mysql-all.sql文件：
\[root@dbsvr1 \~\]# mysqldump -u root -p \--all-databases \>
/root/alldb.sql
Enter password: //验证口令
\[root@dbsvr1 mysql\]# file /root/alldb.sql //确认备份文件类型
/root/alldb.sql: UTF-8 Unicode English text, with very long lines
查看备份文件alldb.sql的部分内容：
\[root@dbsvr1 \~\]# grep -vE \'\^/\|\^-\|\^\$\' /root/alldb.sql \| head
-15
CREATE DATABASE /\*!32312 IF NOT EXISTS\*/ \`home\` /\*!40100 DEFAULT
CHARACTER SET latin1 \*/;
USE \`home\`;
DROP TABLE IF EXISTS \`biao01\`;
CREATE TABLE \`biao01\` (
\`id\` int(2) NOT NULL,
\`name\` varchar(8) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
LOCK TABLES \`biao01\` WRITE;
UNLOCK TABLES;
DROP TABLE IF EXISTS \`biao02\`;
CREATE TABLE \`biao02\` (
\`id\` int(4) NOT NULL,
\`name\` varchar(8) DEFAULT NULL,
PRIMARY KEY (\`id\`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
.. ..
注意：若数据库都使用MyISAM存储引擎，可以采用冷备份的方式，直接复制对应的数据库目录即可；恢复时重新复制回来就行。
2）只备份指定的某一个库
将userdb库备份为userdb.sql文件：
\[root@dbsvr1 \~\]# mysqldump -u root -p userdb \> userdb.sql
Enter password: //验证口令
查看备份文件userdb.sql的部分内容：
\[root@dbsvr1 \~\]# grep -vE \'\^/\|\^-\|\^\$\' /root/userdb.sql
DROP TABLE IF EXISTS \`stu_info\`;
CREATE TABLE \`stu_info\` (
\`name\` varchar(12) NOT NULL,
\`gender\` enum(\'boy\',\'girl\') DEFAULT \'boy\',
\`age\` int(3) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
LOCK TABLES \`stu_info\` WRITE;
.. ..
3）同时备份指定的多个库
同时备份mysql、userdb库，保存为mysql+userdb.sql文件：
\[root@dbsvr1 \~\]# mysqldump -u root -p -B mysql userdb \>
mysql+test+userdb.sql
Enter password: //验证口令
查看备份文件userdb.sql的部分内容：
\[root@dbsvr1 \~\]# grep \'\^CREATE DATA\' /root/mysql+userdb.sql
CREATE DATABASE /\*!32312 IF NOT EXISTS\*/ \`mysql\` /\*!40100 DEFAULT
CHARACTER SET latin1 \*/;
CREATE DATABASE /\*!32312 IF NOT EXISTS\*/ \`userdb\` /\*!40100 DEFAULT
CHARACTER SET latin1 \*/;
步骤二：使用mysql命令从备份中恢复数据库、表
以恢复userdb库为例，可参考下列操作。通常不建议直接覆盖旧库，而是采用建立新库并导入逻辑备份的方式执行恢复，待新库正常后即可废弃或删除旧库。
1）创建名为userdb2的新库
mysql\> CREATE DATABASE userdb2;
Query OK, 1 row affected (0.00 sec)
2）导入备份文件，在新库中重建表及数据
\[root@dbsvr1 \~\]# mysql -u root -p userdb2 \ USE userdb2; //切换到新库
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
mysql\> SELECT sn,username,uid,gid,homedir //查询数据，确认可用
-\> FROM userlist LIMIT 10;
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| sn \| username \| uid \| gid \| homedir \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 1 \| root \| 0 \| 0 \| /root \|
\| 2 \| bin \| 1 \| 1 \| /bin \|
\| 3 \| daemon \| 2 \| 2 \| /sbin \|
\| 4 \| adm \| 3 \| 4 \| /var/adm \|
\| 5 \| lp \| 4 \| 7 \| /var/spool/lpd \|
\| 6 \| sync \| 5 \| 0 \| /sbin \|
\| 7 \| shutdown \| 6 \| 0 \| /sbin \|
\| 8 \| halt \| 7 \| 0 \| /sbin \|
\| 9 \| mail \| 8 \| 12 \| /var/spool/mail \|
\| 10 \| operator \| 11 \| 0 \| /root \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
10 rows in set (0.00 sec)
4）废弃或删除旧库
mysql\> DROP DATABASE userdb;
Query OK, 2 rows affected (0.09 sec)
2 使用binlog日志
2.1 问题
利用binlog恢复库表，要求如下：
启用binlog日志
创建db1库tb1表，插入3条记录
删除tb1表中刚插入的3条记录
使用mysqlbinlog恢复删除的3条记录
2.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：启用binlog日志
1）调整/etc/my.cnf配置，并重启服务
\[root@dbsvr1 \~\]# vim /etc/my.cnf
\[mysqld\]
.. ..
log-bin-index=mysql-bin //启用二进制日志，并指定前缀
server_id=1
binlog_format=STATEMENT
//在Mysql5.7中，binlog日志格式默认为ROW，但它不记录sql语句上下文相关信息。需要将binlog日志格式修改为STATEMENT
.. ..
\[root@dbsvr1 \~\]# systemctl restart mysqld.service
2）确认binlog日志文件
新启用binlog后，每次启动MySQl服务都会新生成一份日志文件：
\[root@dbsvr1 \~\]# ls /var/lib/mysql/mysql-bin.\*
/var/lib/mysql/mysql-bin.000001 /var/lib/mysql/mysql-bin.index
其中mysql-bin.index文件记录了当前保持的二进制文件列表：
\[root@dbsvr1 \~\]# cat /var/lib/mysql/mysql-bin.index