        ClearPageCgroupCache(pc);  
        SetPageCgroupUsed(pc);  
        break;  
    default:  
        break;  
    }  
    //  更新统计值  
    mem_cgroup_charge_statistics(mem, pc, page_size);  
int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,  
                gfp_t gfp_mask)  
{  
...  
    if (page_is_file_cache(page))  
        return mem_cgroup_charge_common(page, mm, gfp_mask,  
                MEM_CGROUP_CHARGE_TYPE_CACHE, NULL); ///file cache  
    /* shmem */  
    if (PageSwapCache(page)) {  
        ret = mem_cgroup_try_charge_swapin(mm, page, gfp_mask, &mem);  
        if (!ret)  
            __mem_cgroup_commit_charge_swapin(page, mem,  
                    MEM_CGROUP_CHARGE_TYPE_SHMEM);  
    } else  
        ret = mem_cgroup_charge_common(page, mm, gfp_mask, ///shm memory  
                    MEM_CGROUP_CHARGE_TYPE_SHMEM, mem);  
```  
可以看到，cache包含共享内存和file cache   
mapped_file   
```  
mapped_file - # of bytes of mapped file (includes tmpfs/shmem)  
void mem_cgroup_update_file_mapped(struct page *page, int val)  
{  
...    __mem_cgroup_stat_add_safe(cpustat, MEM_CGROUP_STAT_FILE_MAPPED, val);  
__do_fault –> page_add_file_rmap –> mem_cgroup_update_file_mapped。  
inactive_anon  
inactive_anon    - # of bytes of anonymous and swap cache memory on inactive LRU list.  
static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,  
    struct page **pagep, enum sgp_type sgp, gfp_t gfp, int *fault_type)  
{  
...  
        lru_cache_add_anon(page);  
/**  
 * lru_cache_add: add a page to the page lists  
 * @page: the page to add  
 */  
static inline void lru_cache_add_anon(struct page *page)  
{  
    __lru_cache_add(page, LRU_INACTIVE_ANON);  
}  
```  
从这里可以看到，共享内存会增加到INACTIVE_ANON。   
inactive_file   
```  
inactive_file - # of bytes of file-backed memory on inactive LRU list.文件使用的page cache（不包含共享内存）  
static inline void lru_cache_add_file(struct page *page)  
{  
    __lru_cache_add(page, LRU_INACTIVE_FILE);  
}  
add_to_page_cache_lru –> lru_cache_add_file.  
```  
示例程序  
```  
#include   
#include   
#include   
#include   
#include   
#include   
#include   
#include   
#include   
#define BUF_SIZE 4000000000     
#define MYKEY 26   
int main(int argc,char **argv){  
    int shmid;  
    char *shmptr;  
    if((shmid = shmget(MYKEY,BUF_SIZE,IPC_CREAT)) ==-1){  
        fprintf(stderr,"Create Share Memory Error0m~Z%s\n\a",strerror(errno));  
        exit(1);  
    }  
    if((shmptr =shmat(shmid,0,0))==(void *)-1){  
        printf("shmat error!\n");  
        exit(1);  
    }  
    memset(shmptr,'\0',1000000000);  
    printf("sleep...\n");  
    while(1)  
        sleep(1);  
    exit(0);  
}  
```  
执行程序前后，cgroup memory.stat的值：   
```  
执行前：*  
# cat memory.stat   
cache 1121185792  
rss 23678976  
rss_huge 0  
mapped_file 14118912  
inactive_anon 1002643456  
active_anon 23687168  
inactive_file 46252032  
active_file 72282112  
执行后：*  
# cat memory.stat   
cache 2121187328  
rss 23760896  
rss_huge 0  
mapped_file 1014124544  
inactive_anon 2002608128  
active_anon 23736320  
inactive_file 46247936  
active_file 72286208  
#ipcs -m  
0x0000001a 229380     root       0          4000000000 1  
```  
可以看到cgroup中，共享内存计算在cache、mapped_file、inactive_anon中。  
## 小结  
（1）进程rss与cgroup rss的区别   
进程的RSS为进程使用的所有物理内存（file_rss＋anon_rss），即Anonymous pages＋Mapped apges（包含共享内存）。  
cgroup RSS为（anonymous and swap cache memory），不包含共享内存。  
两者都不包含file cache。   
（2）cgroup cache包含file cache和共享内存。  
## 参考  
http://man7.org/linux/man-pages/man5/proc.5.html   
https://www.kernel.org/doc/Documentation/cgroups/memory.txt  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")