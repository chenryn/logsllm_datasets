### Recovery Patterns

#### Step 1: Increase Auto Scaling Group’s Desired Capacity
- **Action**: Increase the desired capacity of the auto scaling group by 12.
- **Next Step**: Wait for the auto scaling group to start the additional 12 instances.

#### Step 2: Wait for Additional Instances
- **Action**: Wait for the auto scaling group to launch and start the 12 new instances.
- **Next Step**: Register these 12 instances with the load balancer.

#### Step 3: Register Instances with Load Balancer
- **Action**: Register the 12 newly launched instances with the load balancer.

### Recovery Points
- **Recovery Point 1**
- **Recovery Point 2**

### Selected Recovery Actions (Pareto Set)
- **Action**: Attach ASG with the correct Launch Configuration (LC).
- **Action**: Terminate the 6 incorrect instances.
- **Action**: Wait for ASG to launch 6 new instances.
- **Monetary Cost**: $0.0186

### Selected Recovery Actions (User Constraints)
- **Action**: Attach ASG with the correct LC.
- **Action**: Terminate the 6 incorrect instances.
- **Action**: Wait for ASG to launch 6 new instances.
- **Monetary Cost**: $0.0186

### Error Scenarios
- **6 instances with wrong AMI**: RP1, RP2, RP3, RP4, RP5
- **6 instances not in ELB**: RP1, RP3, RP5, RP6, RP8

### Reparation Actions
- **Action**: Register the 6 instances with the load balancer.
- **Cost**: $0
- **Action**: Register the 12 instances with the load balancer again.
- **Cost**: $0

### Satisfying Recovery Requirement R4
- **Description**: The selected recovery action has an optimal or acceptable monetary cost, ensuring that the cost is minimized compared to other possible actions.
- **Benefit**: This selection and optimization mechanism ensures that the recovery cost aligns with stakeholder objectives, thus reducing overall monetary costs.

### Recovery from Errors without Known Causes

#### 1. Experimental Procedure
- **Description**: POD-Recovery dynamically generates a recovery plan from the current erroneous state to a desired state, without needing a known cause.
- **Procedure**: We performed experiments by running scale-up operations, injecting various faults, and triggering recovery without providing error causes. Each type of fault was tested 30 times.

#### 2. Experimental Results
- **Summary**: Table 33 shows the number of successful recoveries for each injected fault. All injected faults were successfully recovered.
- **Table 33: Recovery without Known Causes**
  - **Recovery Point 1**: 6 instances with wrong AMI
  - **Recovery Point 2**: 6 instances not in ELB
  - **Number of Successful Recoveries**: 30 for each fault

#### 3. Satisfying Recovery Requirement R5
- **Description**: Our method can recover from errors without known causes as long as the error cause is within the resource space and can be addressed through API calls.
- **Limitation**: If the cause is not included or the API is unreachable, recovery cannot be achieved.

### Dealing with False Positives of Error Detection

#### 1. Experimental Procedure
- **Description**: To test POD-Recovery's response to false positives, we triggered the recovery service without injecting any errors and observed if any recovery actions were taken.
- **Procedure**: For each recovery point, this was done 50 times. Transient errors that disappear before recovery starts are considered false positives.

#### 2. Experimental Results
- **Summary**: Table 34 shows that all false positives were correctly identified, and no unnecessary recovery actions were taken.
- **Table 34: Handling False Positives of Error Detection**
  - **Recovery Point 1**: 50 false positives, 50 no recovery actions
  - **Recovery Point 2**: 50 false positives, 50 no recovery actions

#### 3. Satisfying Recovery Requirement R6
- **Description**: Due to the dynamic plan generation, false positives do not trigger unnecessary recovery actions.

### Recovery for Recovery Itself

#### 1. Experimental Procedure
- **Description**: To test POD-Recovery's behavior when errors occur during the execution of the recovery plan, we performed the scale-up operation, injected faults, and then manually injected additional faults to trigger "recovery for recovery."
- **Procedure**: This test was performed 30 times for each recovery point of the scale-up operation.

#### 2. Experimental Results
- **Summary**: Table 35 shows the recovery time for "recovery for recovery" on the scale-up operation.
- **Table 35: Recovery Time of “Recovery for Recovery”**
  - **Recovery Point 1**: 
    - **Step 1**: Increase auto scaling group’s desired capacity by 12
    - **Step 2**: Wait for the auto scaling group to start additional 12 instances
    - **Error**: 6 instances with wrong AMI
    - **Time of Recovery for Recovery (Pareto Set)**: 55.78 s
    - **Selected Recovery Action (Pareto Set)**: Attach ASG with the correct LC; Terminate the 6 wrong instances; Wait for ASG to launch 6 new instances
    - **Selected Recovery Action (User Constraints)**: Same as Pareto Set
    - **Time of Recovery for Recovery (User Constraints)**: 60.55 s
  - **Recovery Point 2**:
    - **Step 3**: Register these 12 instances with the load balancer
    - **Error**: 6 instances not in ELB
    - **Time of Recovery for Recovery (Pareto Set)**: 55.78 s
    - **Selected Recovery Action (Pareto Set)**: Register the 6 instances with the load balancer; 7.14 s
    - **Selected Recovery Action (User Constraints)**: Register the 12 instances with the load balancer again; 7.09 s

#### 3. Satisfying Recovery Requirement R7
- **Description**: The maximum recovery time for "recovery for recovery" is 60.55 seconds, which is well within the specified time gap between two adjacent recovery points.
- **Benefit**: This ensures that the requirement for "recovery for recovery" is met.

### Case Study 4: Recovery for Scale-down Operation on Cloud

#### 1. Purpose
- **Objective**: Evaluate POD-Recovery using the scale-down operation on cloud.
- **Goals**:
  1. Show the result of recovery points determination for scale-down.
  2. Present the workload of resource state management for scale-down.
  3. Demonstrate POD-Recovery’s capability of satisfying recovery requirements using scale-down.

#### 2. Recovery Points Determination
- **Scale-down Steps**:
  1. Deregister 12 instances from the elastic load balancer.
  2. Decrease auto scaling group’s desired capacity by 12.
  3. Wait for the auto scaling group to terminate 12 instances.
- **Recovery Points**: Determined after step 1 and step 3 based on the recovery point determination criterion and failure rate consideration.

#### 3. Workload of Resource Space Determination
- **Resource Types**:
  - Instance (i.e., VM)
  - Launch Configuration (LC)
  - Auto Scaling Group (ASG)
  - Elastic Load Balancer (ELB)

This structured and detailed approach ensures clarity and coherence in the description of the recovery process and its evaluation.