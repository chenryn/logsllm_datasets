varying degrees, code reuse. Another reason, which continues to remain valid, is that drivers typically
execute in the kernel environment, which is inherently more complex and fragile than user space. The Mac
OS X driver architecture is especially helpful in this regard, since it supports versatile mechanisms to access
devices from user space. In particular, the architecture supports user-space drivers. For example, devices
such as keyboards, mice, printers, scanners, digital still cameras, and digital videocameras can be driven by
user-space programs on Mac OS X.
10.1.2. Good Inheritance
The Mac OS X driver architecture is implemented by the I/O Kit, which is a descendent of NEXTSTEP's
Driver Kit. The latter was a package of object-oriented software and tools that helped the programmer write
device drivers in a modular fashion. The Driver Kit's goal was to make writing and debugging drivers
almost as easy as writing and debugging regular NEXTSTEP applications. It aimed to generalize the
software involved in drivers, so that writing them would require less time and effort. The underlying
observation was that although drivers may drive vastly different devices, they still have several common
aspects and requirements. The Driver Kit treated drivers as essential components of the I/O subsystem, since
peripherals required for various types of I/O in a computer system were also driven by drivers. Moreover,
drivers for loosely related devices might be very close to each other in implementation. The commonalities
could be offered as libraries for use by driver developers. The Driver Kit used Objective-C as its
programming language.
10.1.3. Everything Is a File
Typical Unix systems provide a file-system-based user interface to devicesa user-space process addresses a
device through device special files (or simply device files) that conventionally reside in the /dev/ directory.
Older systems had a static /dev/, wherein the constituent device files were explicitly created or deleted, and
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 2 of 79
device major numbers were statically assigned. Newer systems, including Mac OS X, manage devices more
dynamically. For example, the Mac OS X device file system allows device files to be dynamically created or
deleted and major numbers to be automatically assigned on device file creation.
The device files in the earliest versions of UNIX were hardcoded into the kernel. For example, /dev/rk0
and /dev/rrk0 were the block and character devices, respectively, representing the first moving-head RK
disk drive attached to the system. /dev/mem mapped the core memory of the computer into a file. It was
possible to patch the running system using a debugger on /dev/mem. When such a file was read from or
written to, the underlying device was activatedthat is, the corresponding kernel-resident functions were
invoked. Besides data I/O, control operations could also be performed on device files.
The basic concepts of device files have remained largely the same as UNIX and its derivatives have evolved.
Mac OS X provides device files for storage devices,[1] serial devices, pseudo-terminals, and several pseudo-
devices.
[1] As we will see in Section 11.3, storage-related Unix-style devices on Mac OS X are
implemented by the I/O Kit.
10.1.4. There Is More to Extending the Kernel Than Driving Devices
Besides device drivers, several other types of code can extend the kernel. Loadable kernel components on
Mac OS X include file systems, file system authorization modules (see Section 11.10), storage device filters,
BSD-style sysctl variables, and network extensions. Beginning with version 10.4, Mac OS X provides stable
kernel programming interfaces (KPIs) for these various types of kernel components.
10.2. The I/O Kit
The I/O Kit is a collection of several pieces of kernel-level and user-level software that together constitute a
simplified driver development mechanism for many types of devices. It provides a layered runtime
architecture in which various pieces of software and hardware have dynamic relationships. Besides being a
foundation for device drivers, the I/O Kit also coordinates the use of device drivers. Features of the I/O Kit
include the following.
It presents an abstract view of the system's hardware to higher layers of Mac OS X. In this sense, one
of the I/O Kit's jobs is to act as a hardware abstraction layer (HAL). In particular, it provides an
approximation of the hardware hierarchy by representing it in software: Each type of device or service
is abstracted by an I/O Kit C++ class, and each real-life instance of that device or service is
represented by an instance of the corresponding C++ class.
It incorporates an in-memory database called the I/O Registry for tracking live (instantiated) objects
and another database called the I/O Catalog for tracking all I/O Kit classes available on a system,
including uninstantiated ones.
It facilitates code reuse and promotes stability by encapsulating common functionality and behavior
shared among various driver types (or driver families) and specific drivers. In particular, the I/O Kit
exports a unified object-oriented programming interface. Certain types of devices can be driven by
user-space drivers. Examples of such devices include cameras, printers, and scanners. Specifically, the
connection protocols of these devicessuch as USB and FireWireare handled by kernel-resident I/O Kit
families, but device-specific higher-level aspects are handled in user space.
In general, the I/O Kit provides a variety of services for accessing and manipulating devices from user
space. These services are available to user programs through the I/O Kit framework
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 3 of 79
(IOKit.framework).
Besides helping to avoid duplicating common functionality across drivers, the I/O Kit shields the
programmerto some extentfrom having to know details of kernel internals. For example, the I/O Kit
abstracts Mach-level details of virtual memory and threadingit provides simpler wrappers as part of its
programming interface.
It supports automatic configuration, or Plug-and-Play. Device drivers can be automatically loaded and
unloaded as appropriate.
It provides interfaces for driver stacking, wherein new services can be instantiated based on existing
services.
Code reuse is not always possible as the I/O Kit may have limited or no support for some types of devices.
Hardware quirks and subtleties may mean that apparently similar cases must be handled separately.
Figure 101 shows an overview of the important components and features of the I/O Kit.
Figure 101. An overview of the I/O Kit
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 4 of 79
Note that whereas a user-space program using the I/O Kit links against IOKit.framework, a kernel-space
program, such as a device driver, uses the Kernel framework (Kernel.framework) during its build stage.
Kernel.framework does not contain any libraries; it provides only kernel header files. In other words, a
driver does not link against Kernel.frameworkit links against the kernel itself.
10.2.1. Embedded C++
Unlike its predecessor, the Driver Kit, which used Objective-C, the I/O Kit uses a restricted subset of C++ as
its programming languageit is implemented in and is programmed by using embedded C++ (EC++).[2] The
EC++ specification includes a minimum language specification, which is a proper subset of C++, a library
specification, and a style guide. The library is more than a typical embedded C library but less than a full-
fledged C++ library. Important C++ features omitted from EC++ are the following:
[2] The EC++ Technical Committee was formed in Japan in late 1995, with the goal of
providing an open standard for the language and encouraging commercial products that support
the standard.
Exceptions
Templates
Multiple inheritance and virtual base classes
Namespaces
Runtime type identification (RTTI)
Note that the I/O Kit does implement its own minimal runtime typing system.
10.2.2. I/O Kit Class Hierarchy
The various parts of the I/O Kit are implemented using building blocks from the kernel-resident libkern C++
library. Figure 102 shows the high-level class hierarchy of the I/O Kit.
Figure 102. The I/O Kit class hierarchy
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 5 of 79
The General OS Classes category includes OSObject, which is the kernel's root base class. Besides device
drivers, these OS classes are available to all kernel code.
The General I/O Kit Classes category includes IORegistryEntry and its subclass, IOService. The former
is the root class of the I/O Kit hierarchy. It allows I/O Kit objects to appear in the I/O Registry and manages
their "personalities." In particular, an I/O Kit driver's attach() and detach() methods are used for
connecting to the I/O Registry.
The Family Superclasses category includes I/O Kit families for several device types. IOService is the direct
or indirect superclass of most I/O Kit Family Superclassestypically, at least one important class in each
family inherits from IOService. In turn, most drivers are instances of a subclass of a class in an I/O Kit
family. A driver's lifecycle within the I/O Kit's dynamic runtime environment is captured by
IOServicespecifically, by its virtual functions. Examples of interfaces defined by IOService include
functions for the following purposes:
Initializing and terminating driver objects
Attaching and detaching driver objects to the I/O Registry
Probing hardware to match drivers to devices
Instantiating drivers based on the existence of their providers
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 6 of 79
Managing power
Mapping and accessing device memory
Notifying interested parties of changes in the states of services
Registering, unregistering, enabling, and triggering device interrupts
The I/O Kit's main architectural abstractions are families, drivers, and nubs.
10.2.3. I/O Kit Families
An I/O Kit family is a set of classes and associated code that implement abstractions common to devices of a
particular category. From a packaging standpoint, a family may include kernel extensions, libraries, header
files, documentation, example code, test modules, test harnesses, and so on. Typically, the kernel
components of a family can be dynamically loaded into the kernel as needed. The purpose of a family is to
allow the driver programmer to focus on device-specific issues, rather than reimplementing frequently used
abstractions, which the family implements and provides as a library. In other words, given the specific needs
of a particular device, its driver can be constructed by extending the appropriate family.
In some cases, the services a driver requires may be directly provided by the IOService classthat is, the
driver may not have a specific family.
Families exist for storage devices, human-interface devices, network devices and services, bus protocols,
and others. Examples of Apple-provided I/O Kit families include the following:
Apple Desktop Bus (ADB)
ATA and ATAPI
Audio
FireWire
Graphics
Human Interface Device (HID)
Network
PC Card
PCI and AGP
Serial Bus Protocol 2 (SBP-2)
SCSI Parallel and SCSI Architecture Model
Serial
Storage
USB
Device/service types for which no families exist include tape drives, telephony services, and digital imaging
devices.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 7 of 79
10.2.4. I/O Kit Drivers
A driver is an I/O Kit object that manages a specific piece of hardware. It is usually an abstraction around a
particular device or a bus. I/O Kit drivers have dependencies on one or more families and perhaps on other
types of kernel extensions. These dependencies are enumerated by the driver in an XML-formatted property
list file (Info.plist), which is part of the driver's packaging as a Mac OS X bundle. A driver is
dynamically loaded into the kernel, and so are the driver's non-kernel-resident dependencies,[3] which must
be loaded before the driver.
[3] A driver can also depend on built-in kernel components.
The default locations for drivers are the Library/Extensions/ directories in Mac OS X file system
domains. Apple-provided drivers reside in /System/Library/Extensions/.
When a driver belongs to a family, the driver's class typically inherits from some class in the family. This
way, all drivers that inherit from a given family acquire the family's instance variables and common
behaviors. A family may need to call methods in a driver that inherits from it, in which case the driver
implements the methods.
When the system starts to boot, a logical chain of devices and services involved in I/O connections is
initialized, starting with the main logic board (hardware) and the corresponding driver (software). This chain
grows incrementally, as busses are scanned, devices attached to them are discovered, matching drivers are
found, and stacks of providers and clients are constructed. In such a layered stack, each layer is a client of
the layer below it and a provider of services to the layer above it. From an implementation standpoint, a
typical driver conceptually sits between two families in a stack of C++ objects that represent family
instances. The driver inherits from a class in the top family and uses the services provided by the bottom
family.
10.2.5. Nubs
A nub is an I/O Kit object representing a controllable entityspecifically, a device or a logical service. It is a
logical connection point and communication channel that bridges two drivers and, in turn, the drivers'
families. Besides providing access to the entity it represents, a nub provides functionality such as arbitration,
matching of drivers to devices, and power management. In contrast to a nub, an actual driver manages
specific hardware, with which it communicates through the nub.
Examples of entities represented by nubs include disks, disk partitions, emulated SCSI peripheral devices,
keyboards, and graphics adapters.
A driver may publish a nub for each individual device or service it controls or may even act as its own
nubthat is, a nub can also be a driver.
A nub's most important function is driver matching: On discovering a new device, the nub attempts to find
one or more drivers that match that specific hardware device. We will discuss driver matching in Section
10.2.11.
Although we differentiate between nubs and drivers, they are both classified as driver objects, with the
IOService class being the eventual superclass of all driver classes. Moreover, a family usually makes
available a class that describes a nub and another class that member drivers use in their implementations. A
nub is always registered in the I/O Registrythe registration initiates driver matching. In contrast, it is
possible for a driver to be attached but not registered in the I/O Registry. An attached-but-unregistered
object is not directly found through I/O Kit lookup functions but must be indirectly looked up by first
finding a registered parent or child, after which a parent/child traversal function is used to reach the
unregistered object.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 8 of 79
10.2.6. General I/O Kit Classes
As shown in Figure 102, General I/O Kit Classes include IORegistryEntry, IOService, and a variety of
helper classes. IORegistryEntry is the base class for all I/O Registry objects, whereas IOService is the
base class for most I/O Kit families and drivers. Other fundamental I/O Kit classes include
IORegistryIterator and IOCatalogue. The former implements an iterator object for traversing
(recursively, if desired) the I/O Registry. IOCatalogue implements the in-kernel database containing all I/O
Kit driver personalities.
The helper class category primarily includes two types of classes: those that provide memory-related
operations, including management of memory involved in I/O transfers, and those that are useful for
synchronization and serialization of access.
10.2.6.1. Classes for Memory-Related Operations
The following classes provide memory-related operations.
 IOMemoryDescriptor is an abstract base class used for representing a buffer or range of memory,
where the memory could be physical or virtual.
 IOBufferMemoryDescriptor is a type of memory descriptor that also allocates its memory when it is
created.
 IOMultiMemoryDescriptor is a type of memory descriptor that encapsulates an ordered list of
multiple IOMemoryDescriptor instances, which together represent a single contiguous memory
buffer.
 IODeviceMemory is a subclass of IOMemoryDescriptor that describes a single range of device
physical memory.
 IOMemoryMap is an abstract base class that provides methods for memory-mapping a range of memory
described by an IOMemoryDescriptor.
 IOMemoryCursor implements the mechanism for generating a scatter/gather list of physical segments
from a memory descriptor. The generation is based on the nature of the target hardware. During the
initialization of an instance of IOMemoryCursor, a pointer to a segment function is provided by the
caller. Each invocation of the segment function outputs a single physical segment.
 IOBigMemoryCursor is a subclass of IOMemoryCursor that generates physical segments in the big-
endian byte order.
 IOLittleMemoryCursor is a subclass of IOMemoryCursor that generates physical segments in the
little-endian byte order.
 IONaturalMemoryCursor is a subclass of IOMemoryCursor that generates physical segments in the
processor's natural byte order.
 IODBDMAMemoryCursor is a subclass of IOMemoryCursor that generates a vector of descriptor-based
DMA (DBDMA) descriptors.
 IORangeAllocator implements a range-based memory allocator. A new instance of the class is
created with either an empty free list or a free list that contains a single initial fragment.
10.2.6.2. Classes for Synchronization and Serialization of Access
The following classes assist with synchronization and serialization of access.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 9 of 79
 IOWorkLoop is a thread of control that helps drivers protect resources from concurrent or reentrant
access. For example, a work loop can be used to serialize invocations of functions that access critical
resources. A single work loop can have multiple registered event sources, each of which has an
associated action.
 IOEventSource is an abstract superclass representing a work-loop event source.
 IOTimerEventSource is a work-loop event source that implements a simple timer.
 IOInterruptEventSource is a work-loop event source for delivering interrupts to a driver in a
single-threaded manner. In contrast to conventional primary interrupts, IOInterruptEventSource
delivers secondary or deferred interrupts.
 IOFilterInterruptEventSource is a version of IOInterruptEventSource that first calls the
driverin primary interrupt contextto determine whether the interrupt should be scheduled on the
driver's work loop.
 IOCommandGate inherits from IOEventSource and provides a lightweight mechanism for executing
an action in a single-threaded manner (with respect to all other work-loop event sources).
 IOCommand is an abstract base class that represents an I/O command passed from a device driver to a
controller. Controller command classes such as IOATACommand, IOFWCommand, and IOUSBCommand
inherit from IOCommand.
 IOCommandPool implements a pool of commands that inherit from IOCommand. It supports extracting