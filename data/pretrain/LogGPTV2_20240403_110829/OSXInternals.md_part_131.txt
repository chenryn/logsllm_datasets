### 10.1.2. Good Inheritance

The Mac OS X driver architecture is implemented by the I/O Kit, which is a descendant of NEXTSTEP's Driver Kit. The Driver Kit was a package of object-oriented software and tools designed to help programmers write device drivers in a modular fashion. Its primary goal was to make writing and debugging drivers as straightforward as writing and debugging regular NEXTSTEP applications. The Driver Kit aimed to generalize the software involved in drivers, thereby reducing the time and effort required for their development.

The underlying observation was that, although drivers may control vastly different devices, they share several common aspects and requirements. The Driver Kit treated drivers as essential components of the I/O subsystem, as peripherals required for various types of I/O in a computer system were also driven by drivers. Additionally, drivers for loosely related devices might have very similar implementations. These commonalities could be offered as libraries for use by driver developers. The Driver Kit used Objective-C as its programming language.

### 10.1.3. Everything Is a File

In typical Unix systems, a file-system-based user interface is provided for devices. A user-space process addresses a device through device special files (or simply device files) that conventionally reside in the `/dev/` directory. Older systems had a static `/dev/` directory, where device files were explicitly created or deleted, and device major numbers were statically assigned. Newer systems, including Mac OS X, manage devices more dynamically. For example, the Mac OS X device file system allows device files to be dynamically created or deleted, and major numbers to be automatically assigned when device files are created.

In the earliest versions of UNIX, device files were hardcoded into the kernel. For instance, `/dev/rk0` and `/dev/rrk0` represented the block and character devices, respectively, for the first moving-head RK disk drive attached to the system. `/dev/mem` mapped the core memory of the computer into a file, allowing the running system to be patched using a debugger on `/dev/mem`. When such a file was read from or written to, the underlying device was activated, invoking the corresponding kernel-resident functions. Besides data I/O, control operations could also be performed on device files.

The basic concepts of device files have remained largely the same as UNIX and its derivatives have evolved. Mac OS X provides device files for storage devices, serial devices, pseudo-terminals, and several pseudo-devices.

### 10.1.4. There Is More to Extending the Kernel Than Driving Devices

Besides device drivers, several other types of code can extend the kernel. Loadable kernel components on Mac OS X include file systems, file system authorization modules, storage device filters, BSD-style `sysctl` variables, and network extensions. Beginning with version 10.4, Mac OS X provides stable kernel programming interfaces (KPIs) for these various types of kernel components.

### 10.2. The I/O Kit

The I/O Kit is a collection of kernel-level and user-level software that together constitute a simplified driver development mechanism for many types of devices. It provides a layered runtime architecture in which various pieces of software and hardware have dynamic relationships. Besides being a foundation for device drivers, the I/O Kit also coordinates the use of device drivers. Key features of the I/O Kit include:

- **Hardware Abstraction Layer (HAL):** It presents an abstract view of the system's hardware to higher layers of Mac OS X. Each type of device or service is abstracted by an I/O Kit C++ class, and each real-life instance of that device or service is represented by an instance of the corresponding C++ class.
- **I/O Registry and Catalog:** It incorporates an in-memory database called the I/O Registry for tracking live (instantiated) objects and another database called the I/O Catalog for tracking all I/O Kit classes available on a system, including uninstantiated ones.
- **Code Reuse and Stability:** It facilitates code reuse and promotes stability by encapsulating common functionality and behavior shared among various driver types (or driver families) and specific drivers. The I/O Kit exports a unified object-oriented programming interface.
- **User-Space Drivers:** Certain types of devices, such as cameras, printers, and scanners, can be driven by user-space drivers. The connection protocols of these devices, such as USB and FireWire, are handled by kernel-resident I/O Kit families, but device-specific higher-level aspects are handled in user space.
- **Services for User-Space Access:** The I/O Kit provides a variety of services for accessing and manipulating devices from user space. These services are available to user programs through the I/O Kit framework (`IOKit.framework`).
- **Abstraction of Kernel Internals:** The I/O Kit shields the programmer from having to know details of kernel internals, providing simpler wrappers as part of its programming interface.
- **Automatic Configuration (Plug-and-Play):** Device drivers can be automatically loaded and unloaded as appropriate.
- **Driver Stacking:** It provides interfaces for driver stacking, wherein new services can be instantiated based on existing services.

### 10.2.1. Embedded C++

Unlike its predecessor, the Driver Kit, which used Objective-C, the I/O Kit uses a restricted subset of C++ as its programming language. It is implemented in and programmed using embedded C++ (EC++). The EC++ specification includes a minimum language specification, which is a proper subset of C++, a library specification, and a style guide. Important C++ features omitted from EC++ include exceptions, templates, multiple inheritance and virtual base classes, namespaces, and runtime type identification (RTTI). Note that the I/O Kit does implement its own minimal runtime typing system.

### 10.2.2. I/O Kit Class Hierarchy

The various parts of the I/O Kit are implemented using building blocks from the kernel-resident `libkern` C++ library. The high-level class hierarchy of the I/O Kit includes:

- **General OS Classes:** This category includes `OSObject`, which is the kernel's root base class. These OS classes are available to all kernel code.
- **General I/O Kit Classes:** This category includes `IORegistryEntry` and its subclass, `IOService`. `IORegistryEntry` is the root class of the I/O Kit hierarchy, allowing I/O Kit objects to appear in the I/O Registry and managing their "personalities." `IOService` is the direct or indirect superclass of most I/O Kit family superclasses.
- **Family Superclasses:** This category includes I/O Kit families for several device types. Most drivers are instances of a subclass of a class in an I/O Kit family. `IOService` captures a driver's lifecycle within the I/O Kit's dynamic runtime environment, providing interfaces for initializing and terminating driver objects, attaching and detaching driver objects to the I/O Registry, probing hardware to match drivers to devices, and managing power.

### 10.2.3. I/O Kit Families

An I/O Kit family is a set of classes and associated code that implement abstractions common to devices of a particular category. From a packaging standpoint, a family may include kernel extensions, libraries, header files, documentation, example code, test modules, and test harnesses. The kernel components of a family can be dynamically loaded into the kernel as needed. The purpose of a family is to allow the driver programmer to focus on device-specific issues rather than reimplementing frequently used abstractions, which the family implements and provides as a library.

Families exist for storage devices, human-interface devices, network devices and services, bus protocols, and others. Examples of Apple-provided I/O Kit families include:

- Apple Desktop Bus (ADB)
- ATA and ATAPI
- Audio
- FireWire
- Graphics
- Human Interface Device (HID)
- Network
- PC Card
- PCI and AGP
- Serial Bus Protocol 2 (SBP-2)
- SCSI Parallel and SCSI Architecture Model
- Serial
- Storage
- USB

Device/service types for which no families exist include tape drives, telephony services, and digital imaging devices.

### 10.2.4. I/O Kit Drivers

A driver is an I/O Kit object that manages a specific piece of hardware. It is usually an abstraction around a particular device or a bus. I/O Kit drivers have dependencies on one or more families and perhaps on other types of kernel extensions. These dependencies are enumerated by the driver in an XML-formatted property list file (`Info.plist`), which is part of the driver's packaging as a Mac OS X bundle. A driver is dynamically loaded into the kernel, and so are the driver's non-kernel-resident dependencies, which must be loaded before the driver.

The default locations for drivers are the `Library/Extensions/` directories in Mac OS X file system domains. Apple-provided drivers reside in `/System/Library/Extensions/`.

When a driver belongs to a family, the driver's class typically inherits from some class in the family, acquiring the family's instance variables and common behaviors. A family may need to call methods in a driver that inherits from it, in which case the driver implements the methods.

During system boot, a logical chain of devices and services involved in I/O connections is initialized, starting with the main logic board (hardware) and the corresponding driver (software). This chain grows incrementally as busses are scanned, devices attached to them are discovered, matching drivers are found, and stacks of providers and clients are constructed. In such a layered stack, each layer is a client of the layer below it and a provider of services to the layer above it. From an implementation standpoint, a typical driver conceptually sits between two families in a stack of C++ objects that represent family instances. The driver inherits from a class in the top family and uses the services provided by the bottom family.

### 10.2.5. Nubs

A nub is an I/O Kit object representing a controllable entity, such as a device or a logical service. It is a logical connection point and communication channel that bridges two drivers and, in turn, the drivers' families. Besides providing access to the entity it represents, a nub provides functionality such as arbitration, matching of drivers to devices, and power management. In contrast to a nub, an actual driver manages specific hardware, with which it communicates through the nub.

Examples of entities represented by nubs include disks, disk partitions, emulated SCSI peripheral devices, keyboards, and graphics adapters. A driver may publish a nub for each individual device or service it controls or may even act as its own nub. A nub's most important function is driver matching: On discovering a new device, the nub attempts to find one or more drivers that match that specific hardware device.

Although we differentiate between nubs and drivers, they are both classified as driver objects, with the `IOService` class being the eventual superclass of all driver classes. Moreover, a family usually makes available a class that describes a nub and another class that member drivers use in their implementations. A nub is always registered in the I/O Registry, initiating driver matching. In contrast, it is possible for a driver to be attached but not registered in the I/O Registry. An attached-but-unregistered object is not directly found through I/O Kit lookup functions but must be indirectly looked up by first finding a registered parent or child, after which a parent/child traversal function is used to reach the unregistered object.

### 10.2.6. General I/O Kit Classes

As shown in Figure 102, General I/O Kit Classes include `IORegistryEntry`, `IOService`, and a variety of helper classes. `IORegistryEntry` is the base class for all I/O Registry objects, whereas `IOService` is the base class for most I/O Kit families and drivers. Other fundamental I/O Kit classes include `IORegistryIterator` and `IOCatalogue`. The former implements an iterator object for traversing (recursively, if desired) the I/O Registry. `IOCatalogue` implements the in-kernel database containing all I/O Kit driver personalities.

#### 10.2.6.1. Classes for Memory-Related Operations

The following classes provide memory-related operations:

- **IOMemoryDescriptor:** An abstract base class used for representing a buffer or range of memory, where the memory could be physical or virtual.
- **IOBufferMemoryDescriptor:** A type of memory descriptor that also allocates its memory when it is created.
- **IOMultiMemoryDescriptor:** A type of memory descriptor that encapsulates an ordered list of multiple `IOMemoryDescriptor` instances, which together represent a single contiguous memory buffer.
- **IODeviceMemory:** A subclass of `IOMemoryDescriptor` that describes a single range of device physical memory.
- **IOMemoryMap:** An abstract base class that provides methods for memory-mapping a range of memory described by an `IOMemoryDescriptor`.
- **IOMemoryCursor:** Implements the mechanism for generating a scatter/gather list of physical segments from a memory descriptor. The generation is based on the nature of the target hardware. During the initialization of an instance of `IOMemoryCursor`, a pointer to a segment function is provided by the caller. Each invocation of the segment function outputs a single physical segment.
- **IOBigMemoryCursor:** A subclass of `IOMemoryCursor` that generates physical segments in the big-endian byte order.
- **IOLittleMemoryCursor:** A subclass of `IOMemoryCursor` that generates physical segments in the little-endian byte order.
- **IONaturalMemoryCursor:** A subclass of `IOMemoryCursor` that generates physical segments in the processor's natural byte order.
- **IODBDMAMemoryCursor:** A subclass of `IOMemoryCursor` that generates a vector of descriptor-based DMA (DBDMA) descriptors.
- **IORangeAllocator:** Implements a range-based memory allocator. A new instance of the class is created with either an empty free list or a free list that contains a single initial fragment.

#### 10.2.6.2. Classes for Synchronization and Serialization of Access

The following classes assist with synchronization and serialization of access:

- **IOWorkLoop:** A thread of control that helps drivers protect resources from concurrent or reentrant access. For example, a work loop can be used to serialize invocations of functions that access critical resources. A single work loop can have multiple registered event sources, each of which has an associated action.
- **IOEventSource:** An abstract superclass representing a work-loop event source.
- **IOTimerEventSource:** A work-loop event source that implements a simple timer.
- **IOInterruptEventSource:** A work-loop event source for delivering interrupts to a driver in a single-threaded manner. In contrast to conventional primary interrupts, `IOInterruptEventSource` delivers secondary or deferred interrupts.
- **IOFilterInterruptEventSource:** A version of `IOInterruptEventSource` that first calls the driver in primary interrupt context to determine whether the interrupt should be scheduled on the driver's work loop.
- **IOCommandGate:** Inherits from `IOEventSource` and provides a lightweight mechanism for executing an action in a single-threaded manner (with respect to all other work-loop event sources).
- **IOCommand:** An abstract base class that represents an I/O command passed from a device driver to a controller. Controller command classes such as `IOATACommand`, `IOFWCommand`, and `IOUSBCommand` inherit from `IOCommand`.
- **IOCommandPool:** Implements a pool of commands that inherit from `IOCommand`. It supports extracting and recycling commands efficiently.