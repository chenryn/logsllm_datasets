### 7.2 Evaluation Setup

#### Network and Controller Configuration
The system under evaluation has measured link capacities of 75 Mbps. The controller, which is located in the eastern United States outside of Amazon EC2, communicates with EC2 via the public Internet.

#### Methodology and Traffic
To demonstrate the benefits of hybrid control, we compare VDN to two other designs: Fully Distributed, which relies entirely on the distributed control algorithm described in §4, and Fully Centralized, which uses only the centralized controller described in §5. For each experiment, we generate 200 video requests, each from a client to a random edge cluster. Each video channel offers multiple bitrates: 200 Kbps, 600 Kbps, and 1.4 Mbps. A new channel is added to the system every second. With 10 nodes and 75 Mbps links, 100 videos can place a significant load on the system. Specifically, 100 videos at 1.4 Mbps consume approximately 150 Mbps, filling two of the four source/reflector links. 200 videos would overload the system by utilizing all four links. The video client is a simple HTTP chunk requester that fetches a new chunk every 2 seconds (the duration of each chunk).

### 7.2.1 Quality of Experience

**Average Client Bitrate**
Figure 17a shows the average client bitrate as more requests are added. In a system with medium load, VDN provides up to a 2x performance gain over Fully Distributed. As the system becomes more loaded, the performance of Fully Distributed sharply drops, while VDN and Fully Centralized degrade more gradually. Even under medium load, VDN remains close to the optimal decision made by the controller. When the system reaches heavy load (approximately 150 videos), other issues such as connection establishment overhead and request incast cause performance to decline.

**Join Time**
In Figure 17b, VDN demonstrates high responsiveness. Although Fully Centralized provides good average bitrates during load, its join time (time from request to the first byte of video) is significantly higher, around 7 seconds, compared to VDN's 200 milliseconds. Fully Distributed also provides sub-second join times, but as the system becomes more loaded, it experiences massive spikes in latency due to the lack of coordination among interior clusters.

**Buffering Ratio**
Figure 17c shows the buffering ratio. Despite having good overall quality, Fully Centralized has a much worse buffering ratio due to its lack of responsiveness.

### 7.2.2 Coping with Network Events

**Link Fluctuations**
Figure 18a illustrates the effects of link fluctuations. We randomly select 25% of the links and degrade their capacity by increasing amounts using `tc`. We then measure the performance 10 seconds after adding 10 channels. All three systems perform similarly under these conditions.

**Loss of Updates**
Figure 18b shows the impact of losing updates from the controller. We drop updates and measure the performance 10 seconds after adding 10 channels. As expected, Fully Centralized performs much worse when updates are dropped. VDN, however, continues to perform well even when it loses all update messages by falling back to distributed control.

### 8. Discussion

**Complexity versus Improvement**
Despite the inherent complexity of hybrid control, VDN provides a significant monetary benefit (2x) to CDN operators and increased flexibility (see Figures 16a and 16b). Additionally, VDN offers a centralized point for managing link costs and video priorities. Simple tweaks to current CDNs, such as shorter TTLs, do not provide these benefits.

**Alternate Topologies**
We assume an n-tiered topology, which is representative of modern CDNs [2, 29, 35, 40]. Additional work would be needed to adapt our scheme to arbitrary topologies.

**Client-Side Bitrate Adaptation**
Although not explicitly included in our system, we assume clients independently perform bitrate adaptation through some black-box assessment of delivery quality. Distributed control allows VDN to quickly respond to bitrate switching, but we assume the rate of switching is relatively low [9].

### 9. Related Work

**Content Delivery Networks**
Large- and medium-scale CDN systems have explored various design choices, including peer-to-peer, hybrid, centralized, or hierarchical architectures [29, 35, 18, 42, 22, 43, 24, 45]. None of these papers provide the key combination of global coordination, video-specific optimization, cost-minimization, attention to live-video specific issues, and practical end-to-end system design.

**Overlay Multicast**
Prior work on providing sustained high-throughput connections for live video [12, 14, 26, 30] focuses on organizing individual streams but does not perform extensive coordination across video streams. P2P-based approaches [30] can potentially benefit VDN but may introduce additional issues with hybrid control, such as loops, as they complicate the topology.

**Traffic Engineering**
Recent work [13, 15, 23, 25] highlights the benefits of centralized traffic engineering in ensuring high utilization and fairness in both intra- and inter-datacenter settings. Unlike VDN, these approaches operate on flow aggregates at coarse timescales, making it difficult to provide the fine-grained dynamic control required for live video.

**Video Optimization**
There is extensive prior work on understanding and improving video delivery, including client-side bitrate adaptation [27], metrics [9, 10], cross-CDN optimization [32], and CDN-selection strategies [19]. Our work focuses on end-to-end delivery and provides a practical system design.

### 10. Conclusion

VDN is a platform for live video delivery that balances the concerns of both users and CDN operators by providing real-time control over individual streams from the CDN side. VDN employs centralized quality optimization and hybrid control for responsiveness. We show that centralized optimization can greatly improve video quality while minimizing cost. Our hybrid control plane mitigates WAN challenges, providing quick join times and responsiveness to failures. Using a live video trace, we demonstrate that VDN provides a 1.7× improvement in average bitrate and a 2× reduction in delivery cost in different scenarios. Using Amazon EC2, we show that our design is responsive at a timescale of 200 ms.

### Acknowledgments

The authors would like to thank Nicolas Feltman for help with the ILP, Eric Anderson and Raja Sambasivan for help with distributed control, JungAh Hong for help with the initial evaluation, Dave Oran for shepherding this paper, and the anonymous reviewers for their feedback. This work is supported in part by the NSF under award #CNS-1345305, NDSEG Fellowship 32 CFR 168a, the National Research Foundation of Korea (NRF-2013R1A1A1076024), and the IITP under grant No. B0126-15-1078 funded by the Korean Government (MSIP).

### 11. References

[References listed as provided, with proper formatting and URLs]

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is more structured and easier to follow.