 5. words[i] and prefix, suffix queries consist of lowercase letters only.
4. prefix, suffix have lengths in range [0, 10].
3. words[i] has length in range [1, 10] .
2. For each test case, up to words.length queries wordfilter.f may be made.
1. words has length in range [1, 15000]
wordfilter.f("b", 
WordFilter.f("a", "e") // returns 0 
Wordfilter(["apple"])
func nextGreatestLetter(letters []byte, target byte) byte {
Input:
return find
if find  target {
mid := low + (high-low)>>1
 low = mid + 1
 high = mid - 1 
"") // returns -1
---
## Page 729
代码
解题思路
func (this *wordFilter) F(prefix string, suffix string) int {
func Constructor745(words []string) wordfilter {
type wordfilter struct {
//解法一 查找时间复杂度 0(1)
import "strings"
package leetcode
 words map[string]int
if index, ok := this.words[ps]; ok {
符串下标，如果找得到，返回下标，如果找不到，则返回-1。
return -1
return wordFilter{words: wordsMap?
for k := O; k = O; i-- {
 return wordFilter_{input: words}
 input []string
 obj := Constructor(words); 
 s p  su  im aa t  
return -1
 if strings.HasPrefix(this.input[i], prefix) &&
return i
---
## Page 731
代码
解题思路
需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为0或1的元素作为初始阶梯。
当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。
数组的每个索引做为一个阶梯，第i个阶梯对应着一个非负数的体力花费值 cost[i] (索引从O 开始)。
题目大意
Note:
·dp[i] 代表上到第 n 层的最小花费，状态转移方程是 dp[i]= cost[i] +min(dp[i-2]，
·这一题算是第 70 题的加强版。依旧是爬楼梯的问题，解题思路也是 DP。在爬楼梯的基础上增加
 2. Every cost[i] will be an integer in the range [0, 999] .
1. cost will have a length in the range [2, 1000].
func mincostclimbingstairsl(cost []int) int {
//解法二 DP 优化辅助空间
func mincostclimbingstairs(cost []int) int {
//解法— DP
package leetcode
·由于每层的花费只和前两层有关系，所以每次 DP 迭代的时候只需要2个临时变量即可。可以用这
cost[3].
Explanation: Cheapest is start on cost[o], and only step on ls, skipping
Output: 6
Input: c0st = [1,100,1,1,1,100,1,1,100,1]
var cur, last int 
return min(dp[len(cost)-2], dp[len(cost)-1]) 
dp[O], dp[1] = cost[o], cost[1]
dp := make([]int, len(cost)) 
种方式来优化辅助空间。
dp[i-1]]，最终第 n 层的最小花费是 min(dp[n-2]，dp[n-1]〕。
for i := 2; i  cur+cost[i-2]
 dp[i] = cost[i] + min(dp[i-2]，dp[i-1]]
cur, last = last, cur+cost[i-2]
---
## Page 732
Note:
Example 2: 
The license plate might have the same letter occurring multiple times. For example, given a 
the word.
string licensePlate. Such a word is said to complete the given string licensePlate
 Find the minimum length word from a given dictionary words, which has all the leters from the 
Example 1: 
"supper" does.
licensePlate of "pp", the word "pair" does not complete the licensePlate, but the word 
the array.
It is guaranteed an answer exists. If there are multiple answers, return the one that occurs first in
题目
748. Shortest Completing Word
 2. licensePlate will contain digits, spaces, or letters (uppercase or lowercase).
1. licensePlate will be a string with length in range [1, 7] .
we return the one that occurred first.
Output: "pest"
Input: licensePlate = "1s3 456", words = ["looks", "pest", "stew", "show"]
exists in the word.
and "T".
Output: "steps"
Input: licensePlate = "1s3 Pst", words = ["step", "steps", "stripe",
vord twice.
"stepple"]
return last
} else{ 
cur,last = last,last+cost[i-1]
---
## Page 733
代码
解题思路
注意：
可以匹配。
个。牌照中可能包含多个相同的字符，比如说：对于牌照"PP"，单词"pair"无法匹配，但是"supper"
证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一
单词在匹配牌照中的字母时不区分大小写，比如牌照中的"P"依然可以匹配单词中的"p"字母。我们保
词。在所有完整词中，最短的单词我们称之为最短完整词。
如果单词列表（words）中的一个单词包含牌照（licensePlate）中所有的字母，那么我们称之为完整
题目大意
·给出一个数组，要求找出能包含 licensePlate 字符串中所有字符的最短长度的字符串。如果最
·牌照（licensePlate）的长度在区域[1,7]中。
 4. Every words[i] will consist of lowercase letters, and have length in range [1, 15].
 3. words will have a length in the range [10, 1000].
func shortestCompletingword(licensePlate string, words []string) string {
import "unicode"
package leetcode
return ret
1p := gencnter(licensePlate)
var ret string 
题意模拟即可。
来，第二点是题目中保证了一定存在一个最短的单词能满足题意，并且忽略大小写。具体做法按照
点，第一点，licensePlate 中可能包含 Unicode 任意的字符，所以要先把字母的字符筛选出
短长度的字符串有多个，输出 word下标小的那个。这一题也是简单题，不过有 2个需要注意的
每一个单词 words[i] 都是小写，并且长度在区间[1,15] 中。
单词列表（words）长度在区间[10,1000]中。
牌照（licensePlate）将会包含数字、空格、或者字母（大写和小写）。
if match(lp,w) {
if len(w)  1010 （2
Explanation:
Output:5 
Input: L = 10,R = 15 
10->1010 (2 set bits ,2 is prime)
9 -> 1001 (2 set bits ,2 is prime)
切
6 -> 110 (2
2
Explanation:
Output: 4 
Input: L = 6, R = 10
口
就是19。那么素数可以有限枚举出来。最后按照题目的意思累积结果就可以了。
5 -> 1111 (4 set bits, 4 is not prime)
第 191题。题目中限定了区间最大不超过10^6，所以1的位数最大是19 位，也就是说素数最大
终结果就加一，问最终结果是多少？这一题是一个组合题，判断一个数的二进制位有多少位1，是
-> ll10 (3 set bits,3 is prime)
-> 1101 (3 s
->1100（2
-> 1011