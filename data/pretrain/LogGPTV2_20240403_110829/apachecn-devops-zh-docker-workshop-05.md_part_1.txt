# 五、使用 Docker 组合组织环境
概观
本章介绍了使用 Docker Compose 创建和管理多容器应用。您将学习如何创建 Docker Compose 文件来定义复杂的容器化应用，以及如何运行 Docker Compose CLI 来管理多容器应用的生命周期。本章将使您能够使用不同的方法配置 Docker Compose 应用，并设计依赖于其他应用的应用。
# 简介
在前几章中，我们讨论了如何使用 Docker 容器和`Dockerfiles`来创建容器化的应用。随着应用变得越来越复杂，容器及其配置的管理变得更加复杂。
例如，假设您正在开发一个具有前端、后端、支付和订购微服务的在线商店。在构建、打包和配置之前，每个微服务都用最合适的编程语言实现。因此，复杂的应用被设计成在 Docker 生态系统中的独立容器中运行。不同的容器需要多个`Dockerfiles`来定义 Docker 映像。
他们还需要复杂的命令来配置、运行和排除应用故障。所有这些都可以通过使用 **Docker Compose** 来实现，这是一个在多个容器中定义和管理应用的工具。复杂的应用(如 YAML 文件)可以通过 Docker Compose 中的一个命令进行配置和运行。适用于各种环境，包括开发、测试、**持续集成** ( **CI** )管道、生产。
Docker Compose 的基本功能可以分为三类:
*   **隔离** : Docker Compose 允许您完全隔离地运行复杂应用的多个实例。虽然这看起来是一个微不足道的功能，但它使在开发人员机器、配置项服务器或共享主机上运行同一应用栈的多个副本成为可能。因此，共享资源可以提高利用率，同时降低运营复杂性。
*   **状态数据管理** : Docker Compose 管理容器的卷，这样它们就不会丢失之前运行的数据。此功能使创建和操作将其状态存储在磁盘(如数据库)上的应用变得更加容易。
*   **迭代设计** : Docker Compose 使用由多个容器组成的显式定义的配置。配置中的容器可以用新容器扩展。例如，假设您的应用中有两个容器。如果添加第三个容器并运行 Docker Compose 命令，前两个容器将不会重新启动或重新创建。Docker Compose 将只创建和加入新添加的第三个容器。
这些特性使得 Compose 成为在各种平台上作为多个容器创建和管理应用的基本工具。在本章中，您将看到 Docker Compose 如何帮助您管理复杂应用的完整生命周期。
您将从深入编写命令行界面和文件解剖开始。接下来，您将学习如何使用多种技术配置应用，以及如何定义服务依赖关系。由于 Docker Compose 是 Docker 环境的一个基本工具，所以技术和实践经验对于工具箱来说都是至关重要的。
# Docker 组成 CLI
Docker Compose 与 **Docker 引擎**一起创建和管理多容器应用。为了与 Docker 引擎交互，Compose 使用了一个名为`docker-compose`的命令行界面工具。在 Mac 和 Windows 系统上，`docker-compose`已经是 Docker Desktop 的一部分。但是在 Linux 系统上，安装 Docker Engine 后需要安装`docker-compose` CLI 工具。它被打包成一个可执行文件，您可以使用以下命令在 Linux 系统上安装它。
## 在 Linux 上安装 Docker 复合 CLI
1.  用终端中的以下命令将二进制文件下载到`/usr/local/bin`:
    ```
    sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    ```
2.  使用以下命令使下载的二进制文件可执行:
    ```
    sudo chmod +x /usr/local/bin/docker-compose
    ```
3.  Test the CLI and installation with the following command in the Terminal on all operating systems:
    ```
    docker-compose version
    ```
    如果安装正确，您将看到命令行界面的版本及其依赖关系如下。例如，在下面的输出中，`docker-compose` CLI 有版本`1.25.1-rc1`，其依赖项`docker-py`、`CPython`和`OpenSSL`也列出了它们的版本:
    ![Figure 5.1: docker-compose version output ](img/B15021_05_01.jpg)
图 5.1:Docker-合成输出版本
到目前为止，我们已经学习了如何在 Linux 中安装 Docker Compose CLI。现在我们将研究管理多容器应用整个生命周期的命令和子命令。
## Docker 构成 CLI 命令
`docker-compose`命令能够管理多容器应用的整个生命周期。使用子命令，可以启动、停止和重新创建服务。此外，还可以检查正在运行的栈的状态并获取日志。在本章中，您将获得基本命令的实际操作经验。同样，可以使用以下命令列出所有功能的预览:
```
docker-compose --help
```
命令的输出应该如下所示:
![Figure 5.2: docker-compose commands ](img/B15021_05_02.jpg)
图 5.2:Docker-合成命令
有三个基本的`docker-compose`命令用于管理应用的生命周期。生命周期和命令可以说明如下:
![Figure 5.3: docker-compose life cycle ](img/B15021_05_03.jpg)
图 5.3:Docker-合成生命周期
*   `docker-compose up`:该命令创建并启动配置中定义的容器。可以从注册表中构建容器映像或使用预构建的映像。此外，还可以在后台运行带有`-d`或`--detach`标志的`detached`模式的容器。对于长期运行的容器，如网络服务器，使用`detached`模式很方便，我们预计短期内不会停止。可以使用`docker-compose up --help`命令检查附加选项和标志。
*   `docker-compose ps`:该命令列出容器及其状态信息。这对故障排除和容器运行状况检查很有帮助。例如，如果您创建一个具有后端和前端的双容器应用，您可以使用`docker-compose ps`命令检查每个容器的状态。它有助于发现您的后端或前端是否关闭，没有对它们的运行状况检查做出响应，或者由于配置错误而无法启动。
*   `docker-compose down`:此命令停止并删除所有资源，包括容器、网络、映像和卷。
## Docker 构成文件
使用`docker-compose`命令行界面运行和定义多容器应用。按照惯例，这些文件的默认名称是`docker-compose.yaml`。Docker Compose 是一个强大的工具；但是，它的功率取决于配置。因此，知道如何创建`docker-compose.yaml`文件是必不可少的，需要非常注意。
注意
默认情况下，Docker Compose 使用`docker-compose.yaml`和`docker-compose.yml`文件扩展名。
`docker-compose.yaml`文件由四个主要部分组成，如图*图 5.4* 所示:
![Figure 5.4: The docker-compose file structure ](img/B15021_05_04.jpg)
图 5.4:文件结构
*   `version`:本节定义了`docker-compose`文件的语法版本，目前最新的语法版本是`3`。
*   `services`:本节描述了将在需要时构建的 Docker 容器，并将由`docker-compose`启动。
*   `networks`:本节描述服务将使用的网络。
*   `volumes`:本节描述了将在服务中装载到容器的数据卷。
对于`services`部分，创建容器有两个基本选项。第一个选项是构建容器，第二个选项是使用注册表中的 Docker 映像。当您在本地创建和测试容器时，建议构建映像。另一方面，在生产和 CI/CD 系统中使用来自注册表的 Docker 映像更快、更容易。
假设您想要使用名为`Dockerfile-server`的`Dockerfile`来构建您的服务器容器。然后，需要将文件放入`server`文件夹，文件夹结构如下:
![Figure 5.5: Folder structure ](img/B15021_05_05.jpg)
图 5.5:文件夹结构
`tree`命令的输出显示有一个包含`Dockerfile-server`的`server`文件夹。
当在根目录的`docker-compose.yaml`文件中定义了以下内容时，将在运行服务之前构建`server`容器:
```
version: "3"
services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile-server
```
同样，如果您想使用 Docker 注册表中的映像，您可以定义一个只有`image`字段的服务:
```
version: "3"
services:
  server:
    image: nginx
```
默认情况下，Docker Compose 创建一个网络，每个容器都连接到这个网络。此外，容器可以使用主机名连接到其他容器。例如，假设您在`webapp`文件夹中有以下`docker-compose.yaml`文件:
```
version: "3"
services:
  server:
    image: nginx
  db:
    image: postgres
    ports:
      - "8032:5432"
```
当您以此配置启动`docker-compose`时，它首先创建名为`webapp_default`的网络。随后，`docker-compose`创建`server`和`db`容器，并分别以名称`server`和`db`加入`webapp_default`网络。
此外，`server`容器可以使用其`container`端口和主机名连接到数据库，如下所示:`postgres://db:5432`。同样，通过主机端口`8032`可以从主机访问数据库，如下所示:`postgres://localhost:8032`。网络结构如下图所示:
![Figure 5.6: Networking structure ](img/B15021_05_06.jpg)
图 5.6:网络结构
在`docker-compose.yaml`文件中，您可以定义自定义网络，而不是使用默认网络。`network`配置使您能够基于自定义网络驱动程序创建复杂的网络技术。Docker 容器联网在*第 6 章*、*Docker 联网介绍*中有全面介绍。用自定义网络驱动程序扩展 Docker 引擎将在以下章节中介绍。
Docker Compose 还创建和管理卷作为`docker-compose.yaml`文件的一部分。卷在容器之间提供持久性，并由 Docker 引擎管理。所有服务容器都可以重用卷。换句话说，数据可以在容器之间共享，用于同步、数据准备和备份操作。在*第 7 章*、*Docker 仓库*中，将详细介绍 Docker 卷。
使用下面的`docker-compose.yaml`文件，`docker-compose`将使用 Docker 引擎中的默认卷插件创建一个名为`data`的卷。该卷将安装到`database`容器的`/database`路径和`backup`容器的`/backup`路径。这个 YAML 文件及其内容创建了一个服务栈，该服务栈运行一个数据库并不间断地备份:
```
version: "3"
services:
  database:
    image: my-db-service
    volumes:
      - data:/database
  backup:
    image: my-backup-service
    volumes:
      - data:/backup
volumes:
  data:
```
注意
Docker Compose 文件的官方参考文件可在[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)获得。
在下面的练习中，将使用 Docker Compose 创建一个具有网络和卷使用的多容器应用。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 5.01:Docker 写作入门
容器中的 Web 服务器在启动前需要操作任务，例如配置、文件下载或依赖项安装。借助`docker-compose`，可以将这些操作定义为多容器应用，并使用单个命令运行它们。在本练习中，您将创建一个准备容器来生成静态文件，如`index.html`文件。然后，服务器容器将提供静态文件，并且通过网络配置可以从主机到达。您还将使用各种`docker-compose`命令管理应用的生命周期。
要完成练习，请执行以下步骤:
1.  创建一个名为`server-with-compose`的文件夹，并使用`cd`命令导航到该文件夹:
    ```
    mkdir server-with-compose
    cd server-with-compose
    ```
2.  创建一个名为`init`的文件夹，并使用`cd`命令导航至该文件夹: