# Jitterbug: A New Framework for Jitter-Based Congestion Inference

**Authors:**
- Esteban Carisimo<sup>1</sup>
- Ricky K. P. Mok<sup>2</sup>
- David D. Clark<sup>3</sup>
- Kimberly C. Claffy<sup>2</sup>

**Affiliations:**
1. Northwestern University, Evanston, USA
   - Email: [PI:EMAIL]
2. CAIDA, UC San Diego, San Diego, USA
   - Email: {cskpmok, kc}@caida.org
3. MIT, Cambridge, USA
   - Email: [PI:EMAIL]

## Abstract
We introduce a novel approach to infer network congestion using jitter data collected by probes in access networks. We identified a set of features in jitter and jitter dispersion (a time series derived from jitter) that are characteristic of congestion periods. Leveraging these features, we developed a jitter-based congestion inference framework called Jitterbug. Our framework can accurately identify both recurrent and one-off congestion events. We validated Jitterbug's inferences against state-of-the-art autocorrelation-based methods, finding strong congruity in their results. However, Jitterbug shows promise in detecting one-off congestion events, which is a challenge for autocorrelation methods. Future research directions include the use of ML/AI techniques to enhance the performance and accuracy of this approach in operational settings.

## 1. Introduction
Network congestion, where demand exceeds capacity for network resources, is a widespread issue on the Internet. Traditional TCP dynamics induce congestion to infer the appropriate sending rate, increasing the rate until packet loss occurs, indicating congestion. Recent improvements in TCP's congestion control algorithms rely on increased latency as a signal of congestion.

Latency and packet loss are fundamental metrics for detecting network congestion or path anomalies. While researchers have developed autocorrelation techniques to infer persistent recurrent patterns of congestion, detecting one-off congestion episodes remains an open problem. These one-off episodes can be caused by various factors, including traffic management transitions, router overheads, configuration errors, flash crowds, and DDoS attacks.

We propose Jitterbug, a new framework that uses jitter and other round-trip-time (RTT) metrics to infer congestion. RTT measurements alone are often insufficient, but jitter-related metrics can distinguish congestion from other path anomalies. Specifically, we found a correlation between elevated latency (minimum RTT) and changes in jitter dispersion during congestion. This allows us to extend interdomain congestion inferences from recurrent patterns to one-off events. Using data from 2017 to 2020, Jitterbug achieves similar results to state-of-the-art autocorrelation methods but can also detect one-off congestion events. Our contributions include:
1. Identifying features in jitter and jitter dispersion that characterize congestion.
2. Developing and implementing Jitterbug, a jitter-based congestion inference method.
3. Applying Jitterbug to a wide range of traffic scenarios.
4. Comparing Jitterbug's inferences with state-of-the-art autocorrelation methods.
5. Releasing the source code of Jitterbug.

The rest of the paper is structured as follows. Section 2 provides background on RTT and jitter signatures. Section 3 details Jitterbug and its components. Section 4 describes the dataset used. Sections 5 and 6 present our findings and cross-validation results. Section 7 summarizes key lessons. Section 8 reviews related work, and Section 9 discusses open challenges. Finally, Section 10 offers concluding thoughts.

## 2. Background on RTT and Jitter Signatures
### 2.1 Latency Model
Round-trip time (RTT) in end-to-end measurements comprises deterministic and random components. The RTT between a source (u) and destination (v) for a packet traversing H hops is given by:

\[ \text{RTT}(u, v) = d_{\text{icmp}} + \sum_{i=0}^{H} (d_s(i) + d_{\text{prop}}(i) + d_q(i) + d_{\text{proc}}(i)) \]

where \( d_{\text{icmp}} \) is the processing delay of ICMP messages, \( d_s \), \( d_{\text{prop}} \), and \( d_{\text{proc}} \) represent serialization, propagation, and packet processing delays, respectively. These are deterministic and do not depend on traffic volume. In contrast, \( d_{\text{icmp}} \) and \( d_q \) are random variables contributing to RTT variance due to router CPU utilization and queue size. Prior work has shown that RTT correlates with bottleneck link utilization, indicating that queuing delay is the dominant factor in delay variation. Jitter, or IP packet delay variation, is the absolute difference between the current RTT value and the previous reference value.

### 2.2 Analyzing RTT and Jitter Signatures in Congested Links
We use four real-world examples to illustrate the challenges and opportunities of using RTT and jitter to detect path anomalies. We focus on three properties: periodicity, amplitude, and variability.

- **Periodicity** captures recurring events at fixed frequencies, such as diurnal variations.
- **Amplitude** measures the degree of changes in RTTs from the baseline.
- **Variability** refers to the stability of RTTs during elevated periods, helping to discern congestion from other anomalies like route changes.

Figure 1 shows two-week RTT and jitter time series measured from four vantage points in the U.S. to four router interfaces on the far-side of interdomain links. Examples (a) and (b) show periodic RTT inflation, indicating recurring congestion events, with different jitter amplitudes. Examples (c) and (d) show one-off events, with Fig. 1d showing increased jitter, likely due to congestion, while Fig. 1c shows stable jitter, suggesting a route change. Evaluating changes in jitter helps differentiate these scenarios, making jitter a valuable metric for characterizing path anomalies.

## 3. Jitterbug: Jitter-Based Congestion Inference
### 3.1 Signal Filtering
Jitterbug uses three signals: minimum RTT time series, jitter, and jitter dispersion. Raw RTTs can be too noisy, so we first aggregate the raw RTT data by selecting the minimum value in each 15-minute interval (min time series). The signal filtering module then computes jitter using both the raw RTT and min time series to produce jitter and j-min time series, respectively.

We apply a Moving IQR filter to the j-min time series, computing the inter-quartile range (IQR) of a sliding window of 150 minutes (10 jitter samples). The moving IQR is defined as jitter dispersion. We then compute the 5-sample moving average of the resultant time series to mitigate short-term latency spikes. Figure 3 shows the correlation between the min RTT time series and the jitter dispersion, with low correlation in Fig. 3c, suggesting a route change rather than congestion.

### 3.2 Interval Detection
Jitterbug uses change point detection algorithms to split the RTT time series into candidate intervals that may suffer from congestion. The next step is to analyze the jitter in each interval to classify it as a congestion event or another path anomaly. We infer congestion based on changes in baseline RTT, increase in jitter amplitude, and increase in jitter dispersion during phase transitions. We developed two statistical methods for this analysis: (i) KS-test method, and (ii) jitter dispersion method (JD).

- **KS-test method**: Combines detection of changes in RTT latency baseline with the Kolmogorov-Smirnov (KS) test to detect changes in the jitter time series.
- **Jitter dispersion method (JD)**: Detects an increase in jitter dispersion that correlates with an increase in baseline RTT as a signal of congestion.

Both methods aim to capture the signatures in the jitter signals. Jitterbug is designed to support different RTT data sources and has been applied to measurements collected by Ark CAIDA and RIPE Atlas, using 5-minute and 15-minute granularities for RTT measurements and aggregated minimum RTT time series, respectively.

## 4. Dataset
We describe the dataset used to investigate Jitterbug's congestion inferences in different scenarios and to cross-validate Jitterbug's inferences against other methods.

## 5. Results
We present the results of applying Jitterbug to a wide range of traffic scenarios and compare its inferences with state-of-the-art autocorrelation methods.

## 6. Cross-Validation
We cross-validate Jitterbug's inferences against other methods to ensure the robustness and accuracy of our approach.

## 7. Lessons Learned
We summarize the key lessons learned during our study, highlighting the strengths and limitations of Jitterbug.

## 8. Related Work
We provide an extensive list of related work, placing Jitterbug in the context of existing research on congestion inference.

## 9. Open Challenges
We discuss open challenges in congestion inference and suggest future research directions, including the use of ML/AI techniques to improve performance and accuracy.

## 10. Conclusion
We offer concluding thoughts and reiterate the potential of Jitterbug in detecting both recurrent and one-off congestion events, contributing to the broader field of network congestion inference.

---

**Note:** The repository for Jitterbug is available at: https://github.com/estcarisimo/jitterbug.