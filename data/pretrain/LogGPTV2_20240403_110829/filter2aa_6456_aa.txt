# ForceCoin
Category: Reversing, 150 points
## Description
> Our agent from the field has obtained a few files related to a program that is used by a terrorist organization!
> 
> This zip contains the program and a db file.
> 
> We need your help parsing the db!
> 
> Give it your best, we heard that they use it and that it might contain some intresting information for you!
> 
> Good Luck !!
## Solution:
Let's see what we got:
```console
root@kali:/media/sf_CTFs/shabak/ForceCoin/ForceCoin# ls
db.txt.enc  ForceCoin.exe  ForceCoinTransactionSigner.dll.enc
root@kali:/media/sf_CTFs/shabak/ForceCoin/ForceCoin# file ForceCoin.exe
ForceCoin.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows
```
We have a `.NET` application and two encrypted files. Let's run the application:
![](images/forcecoin1.png)
So, before anything else, we just tried to brute force it with a simple `*.vbs` script that interacts with the GUI:
```vbs
Set objShell = WScript.CreateObject("WScript.Shell")
Function SendKeysTo (keys, wait)
    objShell.AppActivate "PinCode"
    objShell.SendKeys keys
    WScript.Sleep wait
End Function
Function LPad(s, l, c)
  Dim n : n = 0
  If l > Len(s) Then n = l - Len(s)
  LPad = String(n, c) & s
End Function
WScript.Sleep 500
Dim x
x=0
Do 
SendKeysTo LPad(x, 4, "0"), 50
SendKeysTo "{Tab}{Enter}{Tab}", 50
x=x+1
Loop While x<10000
```
This script tries to enter all possible 4-digit combinations to the GUI. Unfortunately, That didn't work and we were forced to open the application with dotPeek:
```csharp
private void buttonCheckPin_Click(object sender, EventArgs e)
{
    string text = this.richTextBoxPinCode.Text;
    if (text.Length != 4)
    {
        this.richTextBoxPinCode.Text = "";
    }
    else
    {
        try
        {
            string input = text;
            string str = text;
            for (int index = 0; index < 10; ++index)
            {
                input = this.DoMD5(input);
                str = this.DoMD5(str);
            }
            for (int index = 0; index < 10; ++index)
                input = this.DoMD5(input);
            if ("2D3114BCC2E5C58BBAC77F04237723D9" == input)
            {
                byte[] byteArray = PinForm.StringToByteArray(str);
                this.DecryptFile(byteArray, "ForceCoinTransactionSigner.dll.enc", "ForceCoinTransactionSigner.dll");
                this.DecryptFile(byteArray, "db.txt.enc", "db.txt");
                AppForm appForm = new AppForm();
                this.Hide();
                int num = (int) appForm.ShowDialog();
                this.Close();
            }
        }
        catch (Exception ex)
        {
        }
        this.richTextBoxPinCode.Text = "";
    }
}
```
So we have the authentication logic, we just need to find the correct input.
```python
import hashlib
import itertools
import string
KEY_LEN = 4
def DoMD5(s):
    # C# hash returns an uppercase digest
    return hashlib.md5(s.encode('ascii')).hexdigest().upper()
def CheckPinLogic(text):
   _input = text
   _str = text
   for i in range(10):