**作者：天融信阿尔法实验室  
公众号：**
### 前言
在drupal框架中，比较经典又离我们最近的莫过于18年的CVE-2018-7600这个漏洞了。但是通过本人阅读和学习过此漏洞分析文章的过程中，发现都是针对于此漏洞点的详细分析。相对于此框架运行流程不是很熟悉的人可能在阅读完后很难理解。
作为阿尔法实验室的一员，本人通过阅读框架相关文档与漏洞分析的相关文章和自己对框架源码的调试，对框架运行的流程有了进一步的了解。
在此把这些分享给大家，本文主要分为两大部分：
第一部分是对drupal框架流程的简介（这里主要针对8.x系列），让我们知道在symfony开源框架基础上的drupal框架是如何利用监听者模式支撑起整个繁杂的处理流程，并让我们对框架如何处理一个请求有基本的了解。
第二部分，结合框架对漏洞CVE-2018-7600的运行流程进行详细解读，在漏洞触发的起始点首先通过动态调试正常数据包来了解drupal框架对其的处理流程，借此利用正常包中的可控变量来构造POC包。让我们不仅能对开头和结果得以了解，更能让中间的过程透明化。得以触类旁通。
### 一、背景介绍
Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和PHP开发框架（Framework）共同构成。连续多年荣获全球最佳CMS大奖，是基于PHP语言最著名的WEB应用程序。
Drupal架构由三大部分组成：内核、模块、主题。三者通过HOOK机制紧密的联系起来。其中，内核部分由世界上多位著名的WEB开发专家组成的团队负责开发和维护。
Drupal综合了强大并可自由配置的功能，能支持从个人博客（PersonalWeblog）到大型社区驱动（Community-Driven）的网站等各种不同应用的网站项目。Drupal最初是由DriesBuytaert所开发的一套社群讨论软件。之后，由于它的灵活的架构，方便的扩展等特性，使得世界上成千上万个程序员加入了Drupal的开发与应用中。今天，它已经发展成为一套强大的系统，很多大型机构都采用基于Drupal的框架建站，包括The
Onion，Ain’t ItCool
News，SpreadFirefox，Ourmedia，KernelTrap，NewsBusters等等。它特别常见于社区主导的网站。
### 二、准备工作
#### 2.1 源码下载
首先可以直接通过官网下载页面
直接下载最新版本或者通过
xxx代表你想下载的版本号，来下载对应版本的源码文件。
你也可以用PHP包管理工具composer进行下载。
#### 2.2 drupal安装
安装环境：WIN7 32位  
集成环境：PHPSTUDY  
调试环境：PHPSTORM
安装中可能出现的问题和解决办法：
1.php版本问题：最好为PHP7.0以上  
2.datetime问题
解决方法：
php.ini 中设置
3.安装警告
这两个问题（warning）可以不解决。
针对问题1解决方法：升级php版本为7.1及以上。
针对问题2解决办法：在php.ini中，找到[opcache]，在这个地下添加如下内容。
    zend_extension=”C:\xxx\xxx\php\php-7.0.12-nts\ext\php_opcache.dll”
    opcache.memory_consumption=128
    opcache.interned_strings_buffer=8
    opcache.max_accelerated_files=4000
    opcache.revalidate_freq=60
    opcache.fast_shutdown=1
    opcache.enable_cli=1
4.因为drupal处理有些请求过慢，有可能会导致超时出现异常，在Php.ini中max_execution_time选项设置大点即可。
### 三、框架浅析
#### 3.1目录结构
下面是drupal 8.5.7 源码解压后的目录:
/core drupal的内核文件夹，详见后文说明
/modules 里存放 自定义或者下载的模块
/profiles 里存放 下载和安装的自定义配置文件
/sites 文件夹，在drupal 7 或者更早的版本中，主要存放站点使用的主题和模块活其他站点文件。
/themses 里存放 自定义或者下载的主题
/vendor 里存放 代码的依赖库
接下来我们来看核心文件夹core下的目录结构
/core/assets – drupal 所使用的各种扩展库，如jquery，ckeditor,backbone,normalizeCSS等
/core/config - drupal 中的核心配置文件
/core/includes – 模块化的底层功能函数，如模块化系统本身
/core/lib – drupal提供的原始核心类
/core/misc – 核心所需要的前端杂项文件，如JS,CSS,图片等。
/core/modules – 核心模块，大约80项左右
/core/profiles – 内置安装配置文件
/core/scripts – 开发人员使用的各种命里脚本
/tests – 测试相关用的文件
/core/themes – 内核主题
#### 3.2 框架运行逻辑
Drupal是建立在symfony开源框架之上的，在symfony的官网上可知sysmfony就是一个可复用的php组件集，可以将任何一个组件独立的运用到自己的应用程序中来，在symfony官网里每一个组件都有独立的文档，这些组件有些被drupal直接使用，有些根据drupal自己的特性进行了修改。
我们首先来看一下symfony的执行流程
Drupal 与 symfony 在设计上也使用了相同的理念，它们都认为任何一个网站系统其实就是一个把请求转换为响应的系统。
在drupal的路由系统中，我们可以看到各个组件之间的关系：
在此基础上，drupal对symfony的处理流程进行了细化，构成了现在这个庞大的drupal处理响应流程。
图片链接地址为 如需要可自行下载高清版。
#### 3.3 从入口文件来看
入口文件非常简洁，只有6行代码量，却贯穿了整个drupal，由于drupal的核心系统过于庞大，分析不可能面面俱到，我们将从入口文件一行行来看，分析下它的运行流程。首先是`$autoloader
= require_once ‘autoload.php’;`
表面上看单单的是包含了一个autoload.php的文件，实际上drupal会利用PHP自动加载机制创建一个自动加载器，并获取了一个自动加载的对象。下面从代码方面简略看下其流程：其根本是调用vendor/autoload.php
中的getLoader函数。
接着我们进入函数看看它做了什么：
ClassLoader对象就是利用里面定义的基本对应关系去查找函数和类定义文件。
函数最后返回实例化加载器，至此第一步完成，drupal以后就不需要手动的 include一大堆文件了，省去了大量工作。接着是 `$kernel = new
DrupalKernel(‘prod’, $autoloader);` drupal创建了一个新的drupal内核对象，为处理即将到来的请求对象做准备。
紧接着是入口文件中的`$request =
Request::createFromGlobals()`这一行代码。对于一个面向对象的系统来说，我们不应该直接使用`$_POST`,`$_GET`,`$_COOKIE`等这些全局变量。Drupal把它们全部封装进了`$request`对象。这样不仅简单方便，而且使用请求的对象可直接加入一些额外的功能和自定义的属性。
最终，会把相应的全局变量加到request对象中，并返回封装好的request对象。
如果说上面的操作只是预备阶段，那么接下来`$response =
$kernel->handle($request);`这行代码将开始步入正题，由drupal内核对象kernel来处理request请求。
Drupal的处理核心是利用了设计模式里面的监听者模式。其中包括一个事件源，里面包含了不同的事件以及事件等级。另一部分就是需要执行事件的程序或者函数，我们叫它监听者。在请求处理的这个流程中，每到一个节点，会派发出相应的事件，监听者会根据获取的事件对象和等级来进行相应的操作。
其中系统核心事件还是继续沿用symfony框架中的事件，位于kernelevents.php中，其中包含八大核心：
  * Const REQUEST = ‘kernel.request’ 执行框架代码中的任何代码之前，请求分派的开始触发的。
  * Const EXCEPTION = ‘kernel.exception’ 出现未捕获的异常时触发的事件。
  * Const VIEW = ‘kernel.view’ 当控制器返回值不是response 实例时触发。此时控制器返回的是渲染数组，来进一步进行渲染工作。
  * Const CONTOLLER = ‘kernel.controller’ 解析request请求找到相对应的控制器时触发，并可以对此控制器进行修改。
  * Const CONTROLLER_ARGUMENTS = ‘kernel.controller_arguments’ 解析控制器的参数时触发，并可对参数进行更改。
  * Const RESPONSE = ‘kernel.response’ 创建响应回复请求时触发，并可修改或替换要回复的相应。
  * Const TERMINATE = ‘kernel.terminate’ 一旦发送响应，就会触发。这个事件会允许处理繁重的post-response任务。
  * Const FINISH_REQUEST = ‘kernel.finish_request’ 完成Request请求时触发，可在请求期间更改应用程序时重置应用程序的全局和环境状态。