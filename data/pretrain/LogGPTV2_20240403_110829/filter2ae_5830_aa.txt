**作者：天融信阿尔法实验室  
公众号：**

### 前言
在Drupal框架中，近年来最为人熟知的漏洞莫过于2018年的CVE-2018-7600。尽管已有大量针对该漏洞的详细分析文章，但对于不熟悉Drupal框架运行机制的人来说，这些文章可能难以理解。作为阿尔法实验室的一员，通过深入研究相关文档、漏洞分析以及源码调试，我对Drupal框架的运行流程有了更全面的认识。本文旨在分享这些知识，并分为两个主要部分：

1. **Drupal框架流程简介**（主要针对8.x系列）：介绍基于Symfony开源框架的Drupal如何利用监听者模式处理请求。
2. **CVE-2018-7600漏洞详解**：结合框架运行流程，对漏洞进行详细解读，并通过动态调试正常数据包来构造POC，使整个过程更加透明。

### 一、背景介绍
Drupal是一款使用PHP编写的开源内容管理框架（CMF），它集成了内容管理系统（CMS）和PHP开发框架。多年来，Drupal因其强大的功能和灵活性，多次获得全球最佳CMS奖项，是基于PHP语言最著名的Web应用程序之一。

Drupal架构由三大部分组成：
- **内核**：由多位知名Web开发专家团队负责开发和维护。
- **模块**：提供可扩展的功能。
- **主题**：定制网站外观。

这三部分通过HOOK机制紧密连接。Drupal支持从个人博客到大型社区驱动网站的各种应用，其灵活的架构吸引了成千上万的开发者参与贡献。许多知名机构如The Onion、Ain’t It Cool News等都采用Drupal建站。

### 二、准备工作

#### 2.1 源码下载
您可以直接从Drupal官网下载最新版本或特定版本的源码文件。例如，使用以下命令下载指定版本：
```sh
composer create-project drupal/recommended-project my_drupal_project --version=^8.9
```

#### 2.2 Drupal安装
**安装环境**：
- 操作系统：Windows 7 32位
- 集成环境：PHPStudy
- 调试工具：PHPStorm

**常见问题及解决方法**：
1. **PHP版本问题**：建议使用PHP 7.0及以上版本。如果遇到问题，可以升级到PHP 7.1及以上。
2. **DateTime问题**：在`php.ini`中设置`date.timezone = 'Asia/Shanghai'`。
3. **安装警告**：某些警告可以忽略。
4. **请求超时**：在`php.ini`中增加`max_execution_time`值以避免超时异常。

### 三、框架浅析

#### 3.1 目录结构
以下是Drupal 8.5.7源码解压后的目录结构：
- `/core`：Drupal内核文件夹
- `/modules`：自定义或下载的模块
- `/profiles`：下载和安装的自定义配置文件
- `/sites`：存放站点使用的主题、模块和其他文件
- `/themes`：自定义或下载的主题
- `/vendor`：代码依赖库

核心文件夹`/core`下的子目录包括：
- `/assets`：各种扩展库
- `/config`：核心配置文件
- `/includes`：模块化的底层功能函数
- `/lib`：原始核心类
- `/misc`：前端杂项文件
- `/modules`：核心模块
- `/profiles`：内置安装配置文件
- `/scripts`：开发人员使用的脚本
- `/tests`：测试相关文件
- `/themes`：内核主题

#### 3.2 框架运行逻辑
Drupal基于Symfony开源框架构建。Symfony是一个可复用的PHP组件集合，每个组件都可以独立应用于项目中。Drupal直接使用了一些Symfony组件，并根据自身需求进行了修改。

**Drupal与Symfony的设计理念**：
- 两者都认为网站系统是一个将请求转换为响应的过程。

**Drupal路由系统**：
- 各个组件之间的关系清晰可见，Drupal对Symfony的处理流程进行了细化，形成了复杂的响应处理机制。

#### 3.3 入口文件分析
Drupal的入口文件非常简洁，但贯穿了整个框架的运行。以下是关键步骤：
1. **自动加载器**：
   ```php
   $autoloader = require_once 'autoload.php';
   ```
   这行代码包含了`autoload.php`文件，创建了一个自动加载器对象，简化了后续的文件包含操作。

2. **创建内核对象**：
   ```php
   $kernel = new DrupalKernel('prod', $autoloader);
   ```
   创建一个新的Drupal内核对象，准备处理即将到来的请求。

3. **封装请求对象**：
   ```php
   $request = Request::createFromGlobals();
   ```
   封装全局变量（如`$_POST`、`$_GET`、`$_COOKIE`）到`$request`对象中，便于管理和扩展。

4. **处理请求**：
   ```php
   $response = $kernel->handle($request);
   ```
   由Drupal内核对象处理请求，利用监听者模式进行事件派发和处理。

**Drupal的核心事件**：
- `REQUEST`：请求分派开始触发。
- `EXCEPTION`：未捕获的异常触发。
- `VIEW`：控制器返回非响应实例时触发。
- `CONTROLLER`：解析请求找到控制器时触发。
- `CONTROLLER_ARGUMENTS`：解析控制器参数时触发。
- `RESPONSE`：创建响应时触发。
- `TERMINATE`：发送响应后触发。
- `FINISH_REQUEST`：完成请求时触发。

通过以上步骤，Drupal能够高效地处理请求并生成响应。希望本文能帮助您更好地理解和使用Drupal框架。