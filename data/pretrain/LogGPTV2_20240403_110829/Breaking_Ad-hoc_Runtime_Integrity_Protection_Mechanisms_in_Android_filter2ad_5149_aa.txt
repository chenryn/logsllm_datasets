title:Breaking Ad-hoc Runtime Integrity Protection Mechanisms in Android
Financial Apps
author:Taehun Kim and
Hyeonmin Ha and
Seoyoon Choi and
Jaeyeon Jung and
Byung-Gon Chun
Breaking Ad-hoc Runtime Integrity Protection Mechanisms
in Android Financial Apps
Taehun Kim
Seoul National University
PI:EMAIL
Hyeonmin Ha
Seoul National University
PI:EMAIL
Jaeyeon Jung
Samsung Electronics
PI:EMAIL
ABSTRACT
To protect customers’ sensitive information, many mobile ﬁnancial
applications include steps to probe the runtime environment and
abort their execution if the environment is deemed to have been
tampered with. This paper investigates the security of such self-
defense mechanisms used in 76 popular ﬁnancial Android apps
in the Republic of Korea. Our investigation found that existing
tools fail to analyze these Android apps effectively because of their
highly obfuscated code and complex, non-traditional control ﬂows.
We overcome this challenge by extracting a call graph with a self-
defense mechanism, from a detailed runtime trace record of a target
app’s execution. To generate the call graph, we identify the causal-
ity between the system APIs (Android APIs and system calls) used
to check device rooting and app integrity, and those used to stop an
app’s execution. Our analysis of 76 apps shows that we can pin-
point methods to bypass a self-defense mechanism using a causal-
ity graph in most cases. We successfully bypassed self-defense
mechanisms in 67 out of 73 apps that check device rooting and
39 out of 44 apps that check app integrity. While analyzing the
self-defense mechanisms, we found that many apps rely on third-
party security libraries for their self-defense mechanisms. Thus we
present in-depth studies of the top ﬁve security libraries. Our results
demonstrate the necessity of a platform-level solution for integrity
checks.
CCS Concepts
•Security and privacy → Software and application security;
Mobile and wireless security; Software reverse engineering;
Keywords
Application Security; Android; Reverse Engineering
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053018
Seoyoon Choi
SAP Labs, Korea
PI:EMAIL
∗
Byung-Gon Chun
Seoul National University
PI:EMAIL
1.
INTRODUCTION
Mobile ﬁnancial applications (hereafter referred to as apps) are
gaining popularity, such as banking apps, retailer apps (e.g., Cur-
rentC [22]), credit card apps, and payment modules embedded
in messaging apps.
In the United States, smartphone users who
use mobile banking and mobile payments has increased annually,
reaching 53% and 28% in 2015, respectively [8].
To protect users of ﬁnancial services, mobile ﬁnancial apps use
an extra layer of security, such as two-factor authentication [40],
or one-time passwords [10]. Although these security measures are
beneﬁcial to a certain degree, if an app’s platform is compromised,
any application-level measure can be bypassed, thereby becoming
ineffective against various known attacks, including root-exploit at-
tacks [41], app-repackaging attacks [52], and memory-dumping at-
tacks [49]. Therefore, apps must check the integrity of the platform
to make other security measures effective.
In principle, there is no bullet-proof solution that assists Android
apps to determine whether the device on which they are running
has been rooted or whether the binary of the app itself has been
modiﬁed. Nonetheless, we observe that many Android ﬁnancial
apps appear to employ some mechanisms that check for evidence
of tampering and then abort an execution with a warning message if
it detects something suspicious. Throughout the paper, we refer to
these mechanisms as self-defense mechanisms. Despite their wide
use, little is known about how these mechanisms are designed and
whether they are effective in practice.
This paper examines the effectiveness of the self-defense mecha-
nisms used in Android ﬁnancial apps. We speciﬁcally focus on the
following research questions:
• What information do apps obtain (and how do they collect
it) to determine whether a device has been rooted or if the
app’s binary has been tampered with? How can we identify
self-defense mechanisms precisely?
• Once self-defense mechanisms are identiﬁed, what are the
steps needed to bypass them in order to continue executing
the app as if the self-defense mechanism had passed?
Analyzing Android ﬁnancial apps is challenging for several rea-
sons. First, we observed that these apps often heavily use code ob-
fuscation, making it difﬁcult to gain an understanding of actual con-
trol ﬂows through static analysis. For example, obfuscation tools
change the names of an app’s methods and classes to meaningless
ones to conceal their roles [15]. Second, the control ﬂows of An-
droid apps tend to be complex, involving native code, and some
are not connected directly. In Android, an app’s components (e.g.,
179Activity, Service, BroadcastReceiver, ContentProvider) or threads
can communicate with each other using a message object. An An-
droid app’s control ﬂow cannot be captured entirely without those
indirect relationships. However, they are not connected with a tra-
ditional caller–callee relationship, leading many existing dynamic
analysis tools to fail to detect them.
To overcome these difﬁculties, we implemented MEthod
Recorder with Connecting Indirect relations (MERCIDroid), an en-
hanced Android platform that tracks an app’s control ﬂow. To get
the call graph, the tool ﬁrst records a detailed runtime trace of a
target app’s execution, including the indirect relationships between
threads and components. From the recorded data, the tool ﬁnds
the causality between the environment investigation, which checks
device rooting and app tampering, and the execution termination,
which blocks an app’s execution, by identifying the Android APIs
and the system calls that each part uses. By ﬁnding the causal con-
nection, MERCIDroid can pinpoint the self-defense mechanisms
among the thousands of methods in a target app. The tool identi-
ﬁed 92.9% of the self-defense mechanisms in the studied apps and
narrowed the scope of the methods we investigated in the execution
path to 3.7% on average.
Using MERCIDroid, we analyzed Android ﬁnancial apps to in-
vestigate the effectiveness of self-defense mechanisms adopted in
the apps. For the analysis, we selected 200 apps randomly from
top 400 apps in the Finance category of Google Play available in
the Republic of Korea, as of January 2016. Of the 200 apps, we
found that 73 apps perform a device rooting check, and 44 apps
perform an app integrity check. Based on the understanding of var-
ious self-defense mechanisms used in these apps, we constructed
strategies for bypass attacks: we listed techniques to bypass self-
defense mechanisms, and ﬁrst tried to apply the easiest one per
each self-defense mechanism. If the technique did not work, we
tried more difﬁcult techniques. Following these strategies, we suc-
cessfully bypassed the device rooting checks in 67 out of the 73
apps and the app integrity checks in 39 out of the 44 apps.
Our analysis shows that the apps look at only a limited set of
characteristics of rooted platforms and tampered apps, such as the
existence of ﬁles related to device rooting or the hash value of app
package ﬁles. In addition, once self-defense mechanisms are iden-
tiﬁed, bypassing them only requires modifying a few lines of byte-
code or native code. In the analysis, we found that many apps use
several third-party security libraries for their self-defense mecha-
nisms, so the apps share same self-defense mechanism codes. To
shed insights on the effectiveness of these security libraries, we
conducted in-depth case studies of ﬁve popular security libraries
used in our studied apps. We found that most libraries share the
same weaknesses. Some libraries use techniques that other self-
defense mechanisms do not use, such as checking a system pro-
cess’s user ID and investigating a system property to check device
rooting. Nevertheless, the libraries cannot prevent themselves from
being bypassed through app rewriting.
Our contributions are threefold:
• We present an empirical study of the self-defense mecha-
nisms employed in 76 popular Android ﬁnancial apps. This
was possible using MERCIDroid, an enhanced Android plat-
form that traces method calls, including indirect method rela-
tionships such as inter-thread and inter-component commu-
nications, and constructs runtime call graphs. MERCIDroid
enables us to locate self-defense mechanisms precisely.
• Based on the analysis of the self-defense mechanisms, we
show that the apps and third-party libraries try to detect mali-
cious system manipulation attempts using various techniques
and system functions. However, they mostly leverage only a
few characteristics of rooted systems and tampered apps.
• We demonstrate that our bypass attacks are effective in de-
touring most of the self-defense mechanisms observed above
with simple code modiﬁcations, which proves that self-
defense mechanisms are not effective as it is. We detoured 67
out of 73 device rooting checks and 39 out of 44 app binary
integrity checks.
The rest of the paper is structured as follows. Section 2 presents
an overview of self-defense mechanisms. Section 3 describes the
design and the implementation of MERCIDroid. Section 4 presents
an empirical study of apps using MERCIDroid. Section 5 evaluates
MERCIDroid’s effectiveness and limitations. Section 6 discusses
ways to improve self-defense mechanisms and the implications of
our ﬁndings. Finally, Section 7 discusses related work, followed by
our conclusions in Section 8.
2. DESIGN
CHARACTERISTICS
SELF-DEFENSE MECHANISMS
OF
To explain the typical structure of self-defense mechanisms, we
begin by discussing an example of those used in a real app, AppC.
The anonymized code in Listing 1 illustrates two distinct steps: the
ﬁrst checks whether the device is rooted, and the second displays
an alert dialog if detected. We next describe each step in detail.
Step 1: Checking device rooting.
AppCActivity .on-
Resume() calls the native method Lib0.check() to check
whether the device is rooted (Line 4). onResume() then logs
the result (Line 5).
If check() returns a positive integer, im-
plying that the device is rooted, the method calls PopupDia-
log.showAlert() (Lines 6–7) to show a dialog as described
in Step 2. If check() does not detect that the device is rooted,
onResume() calls another method to check device rooting (Line
8).
Step 2:
PopupDia-
and
log.showAlert() calls PopupDialog.show(),
it calls PopupDialog.alertDialogSetter().
(Lines 7,
29, and 34, respectively). alertDialogSetter() ﬁnally sets
the AlertDialog that warns the user before aborting the app (Lines
40–42).
Displaying an alert dialog.
Figure 1 shows high-level structure of self-defense mechanisms
observed from analyzing a large number of Android ﬁnancial apps.
Listing 1 ﬁts the structure. First, a method, which we label a com-
mon ancestor, calls an environment investigation investigate the
app binary and the platform on which the app is installed (Fig-
ure 1(1)). This environment investigation then calls environment
information providers, which provide the system environment
variables necessary for the check. Based on the values returned,
the environment investigation decides the app’s integrity and/or de-
vice rooting and returns the result to the common ancestor method
(Figure 1(2)). If the execution environment is deemed unsafe, the
common ancestor method calls the code to terminate the app (Fig-
ure 1(3)). Typically, this execution termination calls an execution
terminator that aborts the app by displaying an alert dialog that
terminates the app process, or by ﬁnishing the app process di-
rectly.
In the case of AppC, AppCActivity.onResume(),
Lib0.check(), PopupDialog.showAlert() correspond
to the common ancestor, the environment investigation, and the ex-
ecution termination, respectively.
1801
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
//Common ancestor
public class AppCActivity extends Activity {
public void onResume() {
int i = Lib0.check(this);
AppCLogger.e("AppCActivity", i);
if (i > 0)
PopupDialog.showAlert(this);
else if(SecureManager.checkRooting())
PopupDialog.showAlert(this);
}
}
//Environment investigation
public class Lib0 {
private static int check(Context paramContext) {
return Lib0Native();
}
private static native int Lib0Native() ;
}
//Execution termination
public class PopupDialog {
Dialog dialog;
public static PopupDialog showAlert(Activity
paramActivity) {
PopupDialog alertDialog = new
PopupDialog(paramActivity);
alertDialog.setType(100);
return alertDialog.show();
}
public void PopupDialog show() {
if (getType() == 100) {
this .dialog = alertDialogSetter();
this .dialog.show();
}
}
private AlertDialog alertDialogSetter() {
AlertDialog.Builder localBuilder = new
AlertDialog.Builder();
localBuilder.setTitle(getTitle());
localBuilder.setMessage(getMessage());
return localBuilder.create();
}
}
Listing 1: AppC’s device rooting check methods
(decompiled with jd-gui [12]): We simpliﬁed the code for