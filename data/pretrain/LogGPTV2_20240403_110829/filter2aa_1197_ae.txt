:
enhancing
the
capabilities
of
Rakshasa
is
really
a
matter
of
adding
a
few
lines
of
text
to
its
iPXE
conguration
le,
and
in
the
w
orst
case
scenario
to
sligh
tly
patc
h
the
existing
net
w
ork
stac
ks
to
attempt
new
exotic
proto
cols
8
.
Ev
en
if
access
to
the
in
ternet
often
fails,
it
isn't
really
a
problem
:
sp
oradic
access
to
an
op
en
wi
net
w
ork
in
a
airp
ort
or
from
a
domestic
net
w
ork
w
ould
b
e
enough
to
upgrade
Rakshasa
from
time
to
time.
Once
full
access
to
the
in
ternet
is
ac
hiev
ed
(ev
en
ev
ery
so
often),
Rakshasa
will
normally
do
wnload
a
b
o
otkit
from
a
giv
en
lo
cation
on
the
in
ternet,
suc
h
as
a
le
called
"fo
obar.p
df"
on
a
giv
en
blog
o
v
er
h
ttps,
"data.dat"
from
a
ftp
one
etc.
It
is
w
orth
men
tioning
that
there
again,
m
ultiple
tries
are
allo
w
ed,
whic
h
oer
greater
resilience
against
a
sh
utdo
wn
of
the
main
command
and
con
trol
(a
simple
blog
?)
from
la
w
enforcemen
t.
Ha
ving
a
n
um
b
er
of
hostnames
or
IP
adresses
and
p
ossibly
services
(ev
en
though
h
ttps
is
really
probably
the
safest
option,
and
it
will
b
e
the
only
one
considered
in
the
remaining
of
8
This
is
again
not
recommended
:
k
eeping
iPXE
as
close
to
the
original
co
de
as
p
ossible
is
desirable
to
prev
en
t
an
tivirii
from
nding
an
y
signature
and
stic
k
to
the
golden
rule
of
plausible
deniabilit
y
:
"this
co
de
is
absolutly
legit,
it
is
simply
iPXE".
9
this
pap
er)
to
try
to
do
wnload
from
also
increases
resiliance.
Last
but
not
least
:
iPXE
can
c
hain
conguration
les
b
y
do
wnloading
them
from
the
in
ternet.
Meaning
that
no
direct
reference
to
the
nal
hostile
b
o
otkit
needs
to
b
e
made
from
Rakshasa
itself
(the
co
de
placed
on
the
computer
therefore
con
tains
0
hostile
co
de
p
er
si
:
there
is
absolutly
no
reason
for
an
an
tivirus
to
ag
it
as
suc
h
9
.).
It
is
w
orth
noticing
that
if
the
remote
b
o
otkit
is
ev
er
replaced
b
y
a
BIOS
asher,
Rakshasa
can
b
e
up
dated
remotely
!
Flashing
PCI
rm
w
ares
is
a
bit
tougher
:
rst
of,
PCI
ashing
to
ols
are
(v
ery)
v
endor
sp
ecic.
In
order
to
ash
the
correct
PCI
rm
w
are
on
a
giv
en
net
w
ork
card,
the
remote
w
eb
site
acting
as
a
command
and
con
trol
w
ould
need
to
kno
w
who
is
the
man
ufacturer
of
the
card.
F
ortunatly
,
iPXE
allo
ws
through
a
set
of
functions
sending
the
MA
C
address
of
the
ethernet
card
as
a
parameter
in
a
url
10
.
F
rom
the
MA
C
address,
a
simple
php
script
placed
on
the
command
and
con
trol
serv
er
can
extract
the
OUI
n
um
b
er
(rst
1024
bits)
and
therefore
deduce
the
man
ufacturer.
F
rom
there,
the
command
and
con
trol
w
ebsite
can
return
the
ashing
to
ol
and
rm
w
are
suitable
for
the
sp
ecic
device
to
b
e
ashed
under
the
form
of
a
b
o
otable
GNU/Lin
ux
en
vironmen
t
that
will
em
ulate
an
in
terruption
0x19
and
b
o
ot
the
main
OS
when
done.
The
second
problem
comes
from
the
fact
that
some
PCI
de-
vices
feature
a
ph
ysical
switc
h
that
m
ust
b
e
man
ually
mo
v
ed
b
efore
upgrading
the
rm
w
are.
This
is
in
fact
not
an
issue
since
a
PCI
exp
ension
R
OM
can
b
e
placed
directly
inside
Coreb
o
ot
and
will
ha
v
e
precedence
o
v
er
the
one
ph
ysically
presen
t
on
the
device.
Finally
,
the
same
up
date
mec
hanism
can
b
e
used
to
desinfect
the
BIOS
remotely
b
y
restoring
the
original
BIOS
R
OM
instead
of
p
erforming
a
regular
Ralshasa
upgrade.
7
Em
b
edded
features
of
Rakshasa
Because
of
the
design
of
Rakshasa,
an
y
b
o
otkit
can
b
e
used
along
with
our
bac
kdo
or
without
an
y
mo
dication,
b
y
simply
c
hanging
the
malicious
pa
yload
do
wnloaded
from
the
command
and
con
trol
blog
(without
requiring
an
y
adjustemen
t
on
the
bac
kdo
ored
computer).
The
activ
e
pa
yload
of
Rakshasa
b
eing
rst
executed
as
a
main
op
erating
system
(from
16b
real
mo
de),
it
can
do
an
ything
an
op
erating
system
can
do.
In
particular,
it
can
p
erform
an
y
op
eration
state
of
the
art
b
o
otkits
can
do,
suc
h
as
patc
hing
the
authen
tication
routine
of
Windo
ws
to
allo
w
login
lo
cally
with
an
y
passw
ord.
The
same
routine
b
eing
used
when
authen
ticating
via
Remote
Desktop
on
Windo
ws,
this
could
b
e
enough
to
ev
en
tak
e
con
trol
of
the
computer
remotely
.
Other
tec
hniques
suc
h
as
injecting
an
unsigned
k
ernel
driv
er
that
will
in
turn
execute
an
arbitrary
pro
cess
(injected
b
y
the
b
o
otkit
itself
)
with
SYSTEM
privileges
in
userland
without
touc
hing
the
le
system
has
also
b
een
pro
v
ed
practical
(this
is
indeed
more
than
enough
to
tak
e
full
con
trol
of
the
computer
remotely
:
a
rev
erse
meterpreter
o
v
er
HTTPS
-
p
ossibly
after
injecting
a
dll
in
to
a
w
eb
bro
wser
to
b
ypass
rew
alling
restrictions
at
OS
lev
el,
and
pulling
the
ev
en
tual
pro
xy
creden
tials
from
the
registry
or
using
in
ternal
Windo
ws
API
is
also
practical
and
public
co
de
exists
to
p
erform
all
those
actions).
F
or
our
pro
of
of
concept,
w
e
got
a
bit
of
help
from
Piotr
Bania,
who
kindly
customized
a
v
ersion
of
his
great
commercial
K
on-b
o
ot
b
o
otkit
to
b
o
ot
silen
tly
(that
is
to
sa
y
without
the
fancy
16b
demo-lo
oking
graphics,
whic
h
are
indeed
impressiv
e
but
quite
detrimen
tal
to
a
bac
kdo
or's
stealthness...).
K
on-b
o
ot
is
a
v
ery
adv
anced
b
o
otkit
capable
of
generically
patc
hing
the
authen
tication
routine
of
an
y
windo
ws
from
Windo
ws
XP
to
Windo
ws
7
and
2008,
b
oth
in
32b
and
64b.
If
the
OS
is
a
Windo
ws
a
v
or,
w
e
can
disable
ASLR
b
y
patc
hing
the
seed
used
for
randomization
with
a
c
hosen
v
alue
11
.
W
e
can
also
remo
v
e
the
NX
bit
from
the
P
age
T
able
En
try
directly
in
RAM
12
.
The
com-
bined
eect
of
those
t
w
o
alterations
is
to
lea
v
e
the
address
space
of
an
y
application
with
executable
data
9
If
an
an
tivirus
ev
er
did
it,
it
w
ould
actually
b
e...
a
false
p
ositiv
e
!!
10
This
is
ev
en
do
cumen
ted
on
their
w
ebsite
at:
h
ttp://ip
xe.org/cfg/mac.
11
This
exact
lo
cation
has
b
een
do
cumen
ted
b
y
Kumar
and
Kumar
at
HITB
Mala
ysia
in
2010.
12
As
demonstrated
b
y
Dan
Rosen
b
erg
in
his
remote
k
ernel
exploit
presen
ted
at
Defcon
2011.
10
(that
is:
data/bss/heap/stac
k)
and
100
p
er
cen
t
predictable
mappings.
In
other
w
ords,
an
y
future
vul-
nerabilit
y
aecting
this
op
erating
system
is
going
to
b
e
trivial
to
exploit
(w
eap
onized
b
y
default
!).
This
is
equiv
alen
t
to
remo
ving
most
of
the
securit
y
enhancemen
ts
ac
hiev
ed
b
y
Microsoft
in
the
past
10
y
ears.
But
this
is
not
quite
enough
:
w
e'd
lik
e
to
b
e
able
to
attac
k
other
(p
ossibly
unkno
wn
at
the
time
of
bac
kdo
oring)
op
erating
systems
generically
.
Since
w
e
in
fact
con
trol
more
than
just
the
malicious
pa
y-
load
but
the
en
tire
b
o
oting
pro
cess
since
the
rst
bit
of
BIOS
R
OM
is
executed,
w
e
can
do
a
lot
more.
In
particular,
w
e
can
remo
v
e
cpu
micro
co
de
up
dates
from
Coreb
o
ot.
The
BIOS
is
the
place
of
c
hoice
to
push
cpu
upgrades
:
if
w
e
remo
v
e
those
micro
co
des,
then
the
cpu
bugs
and
p
oten
tial
vulnerabilities
normally
xed
at
this
lev
el
will
remain
exploitable.
W
e
can
also
remo
v
e
an
ti
SSM
protections,
whic
h
will
ha
v
e
the
net
eect
of
letting
the
Op
erating
System
vulnerable
to
a
generic
public
lo
cal
exploit[20
â„„.
A
t
this
stage
of
the
demonstration,
it
should
b
e
clear
that
once
Rakshasa
has
b
een
installed
on
a
giv
en
hardw
are,
the
securit
y
of
the
Op
erating
System
cannot
b
e
ensured
an
ymore.
8
Ho
w
to
prop
erly
build
a
b
otnet
from
the
BIOS
:
BIOSBonets
.
Some
ma
y
argue
that
the
w
eak
est
p
oin
t
in
the
arc
hitecture
presen
ted
so
far
lies
in
the
blog
used
as
a
command
and
con
trol.
It
is
ab
out
time
w
e
dem
ystify
some
b
elief
in
the
insecurit
y
of
b
otnets
:
if
v
endors
can
p
erform
secure
up
dates,
and
Microsoft
seems
to
ha
v
e
mostly
done
so
for
the
past
10
y
ears
13
,
then
there
is
absolutly
no
reason
wh
y
malw
are
writters
could
not
do
the
same.
The
w
eak
est
p
oin
t
of
b
otnets
arc
hitectures
to
da
y
is
certainly
the
a
v
ailabilit
y
of
their
command