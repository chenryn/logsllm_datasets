(
c
i
f
...
)
y
,
x
(
2
−
cm
f
)
y
,
x
(
1
−
cm
f
f r
m−
,(1
yx
)
f r
m−
,(2
yx
)
...
f r
,(2
yx
)
5
f r
,(1
yx
)
f r
,(0
yx
)
2
1
)
y
,
x
(
c
0
f
6
3
4
7
8
9
)
y
,
x
(
c
1
)
y
,
x
(
c
2
f
f
...
)
y
,
x
(
2
−
cm
f
)
y
,
x
(
1
−
cm
f
(a) The grid
(b) An example order of node assignment
Figure 4: Grid-based key predistribution
The grid-based key predistribution scheme can be extended from
the 2-dimension case to an n-dimension one, or a 2-dimension one
with different number of polynomials in each dimension. How-
ever, in this paper, we focus on the study of the special 2-dimension
scheme, considering the extended schemes as possible future work.
The details of the grid-based key predistribution scheme are pre-
sented below.
Subset assignment: The setup server randomly generates 2m t-
degree bivariate polynomials F = {f c
i (x, y)}i=0,...,m−1
over a ﬁnite ﬁeld Fq. For each sensor, the setup server picks an un-
occupied intersection (i, j) in the grid and assigns it to the node.
Thus, the ID of this sensor is ID = (cid:13)i, j(cid:14). The setup server then
distributes {ID, f c
j (i, x)} to this sensor node. To facil-
itate path discovery, we require that the intersections allocated to
sensors are densely selected within a rectangle area in the grid. Fig-
ure 4(b) shows a possible order to allocate intersections to the sen-
sors. It is easy to see that if there exist nodes at (cid:13)i, j(cid:14) and (cid:13)i(cid:1), j(cid:1)(cid:14),
then there must be a node at either (cid:13)i, j(cid:1)(cid:14) or (cid:13)i(cid:1), j(cid:14), or both.
i (x, y), f r
i (j, x), f r
Polynomial share discovery: To establish a pairwise key with
node j, node i checks whether ci = cj or ri = rj. If ci = cj,
both nodes i and j have polynomial shares of f c
ci (x, y), and they
can use the polynomial-based key predistribution scheme to estab-
lish a pairwise key directly. Similarly, if ri = rj, they both have
polynomial shares of f r
ri (x, y), and can establish a pairwise key
accordingly. If neither of these conditions is true, nodes i and j go
through path discovery to establish a pairwise key.
Path Discovery: Nodes i and j need to use path discovery if
ci (cid:15)= cj and ri (cid:15)= rj. However, we note that either node (cid:13)ci, rj(cid:14)
or (cid:13)cj, ri(cid:14) can establish a pairwise key with both nodes i and j.
Indeed, if there is no compromised node, it is guaranteed that there
exists at least one node that can be used as an intermediate node
between any two sensors due to the node assignment algorithm. For
example, in Figure 4(a), both node (cid:13)i(cid:1), j(cid:14) and (cid:13)i, j(cid:1)(cid:14) can help node
(cid:13)i, j(cid:14) establish a pairwise key with node (cid:13)i(cid:1), j(cid:1)(cid:14). Note that nodes
i and j can predetermine the possible intermediate nodes without
communicating with others.
In some situations, both of the above intermediate nodes may
have been compromised, or are out of communication range. How-
ever, there are still alternative key paths. For example, in Figure
4(a), besides node (cid:13)i(cid:1), j(cid:14) and (cid:13)i, j(cid:1)(cid:14), node (cid:13)i, m−2(cid:14) and (cid:13)i(cid:1), m−2(cid:14)
can work together to help node (cid:13)i, j(cid:14) setup a common key with
node (cid:13)i(cid:1), j(cid:1)(cid:14). Indeed, there are up to 2(m − 2) pairs of such nodes
in the grid.
In general, we can map the set of non-compromised nodes into
a graph, where each vertex in the graph is one of the sensors, and
there is an edge between two nodes if these two sensors have poly-
nomial shares of a common polynomial. Discovering a key path
between two nodes is equivalent to ﬁnding a path in this graph.
Nevertheless, in a large sensor network, it is usually not feasible
for a sensor to store such a graph and run a path discovery algo-
rithm. Thus, in our scheme, we focus on the key paths that involve
two intermediate nodes. Speciﬁcally, a sensor node S may use the
following algorithm to discover key paths to sensor D that have
two intermediate nodes.
1. The source node S determines a set N of non-compromised
nodes that can establish pairwise keys with S directly with a
non-compromised polynomial. S randomly picks a set Nd of
d sensor nodes from N . S also generates a random number
r, and maintains a counter c with initial value 0.
2. For each node u ∈ Nd, S increments the counter c and com-
putes Kc = F (r, c), where F is a pseudo random function
[6]. Then S sends to u the IDs of S and D, c, and Kc in a
message encrypted and authenticated with the pairwise key
KS,u between S and u.
3. If a sensor node u ∈ Nd receives and authenticates such a
message, it knows that node S wants to establish a pairwise
key with D. Node u then checks whether the two sensor
nodes (cid:13)cu, rD(cid:14) and (cid:13)cD, ru(cid:14) are compromised or not. If u
ﬁnds a non-compromised node v, u can establish a pairwise
key with D through v. Then u sends the IDs of S and D, c,
and Kc to v in a message encrypted and authenticated with
the pairwise key Ku,v between u and v.
4. If v receives the above message and ﬁnds that it can establish
a pairwise key with D, it further sends the IDs of S and D, c,
and Kc to D in a message encrypted and authenticated with
the pairwise key Kv,D between v and D.
5. Once the destination node D receives a message from such
a node v, it knows that the source node S wants to establish
a pairwise key KS,D with it. Then it sets KS,D = Kc, and
informs S the counter value c. Finally, S and D can use
KS,D to secure their communication.
5.1 Analysis
Since each sensor node has two polynomial shares and each bi-
variate polynomial is shared by about m different sensor nodes,
each sensor node can establish a pairwise key with 2(m − 1) other
sensor nodes directly. Thus, among all the other sensors, the per-
centage of nodes that a node can establish a pairwise key directly is
2(m−1)
m+1 . Moreover, according to the path dis-
N−1
covery method, if there is no compromised node, it is guaranteed
that any two sensors can establish a pairwise key.
m2−1 = 2
≈ 2(m−1)
This scheme has reasonable overheads. In terms of storage re-
quirements, each sensor only needs to store 2 t-degree polyno-
mials over Fq.
In addition, a sensor need store the IDs of the
compromised nodes with which it can establish a pairwise key di-
rectly. Thus, the total storage overhead in each sensor is at most
2(t + 1) log q + 2(t + 1)l bits1. In terms of communication over-
head, there is none for direct key establishment. When there is
an available key path with one intermediate node, there is minor
communication overhead, since the sensors know which interme-
diate node to contact. However, when sensors must discover key
paths with two intermediate nodes, there will be a number of uni-
cast messages, depending on how many nodes have been compro-
mised. The computational overhead is essentially the evaluation of
one or multiple t-degree polynomials. We will discuss an improve-
ment technique in Section 6.
Now let us turn our attention to the performance of the grid-
based key predistribution scheme under attacks. For simplicity, we
assume there are N = m × m sensors in the network.
An adversary may launch two types of attacks against our scheme.
First, the attacker may target the pairwise key between two particu-
lar sensors. The attacker may either try to compromise the pairwise
key, or prevent the two sensor node from establishing a pairwise
key. Second, the attacker may target the entire network to lower
the probability that two sensors may establish a pairwise key, or to
increase the cost to establish pairwise keys.
Attacks against A Pair of Sensors
We ﬁrst look at the attacks against a particular pair of nodes.
Certainly, for a particular pairwise key, the attacker can compro-
mise the key if he/she compromises one of the two related sensors.
To understand the security of our scheme, we are more interested
in how difﬁcult it is to compromise a pairwise key without com-
promising the related nodes, and how difﬁcult it is to prevent two
nodes from establishing a pairwise key.
If nodes u and v can establish a pairwise key directly, the only
way to compromise the pairwise key without compromising the re-
lated nodes is to compromise the shared polynomial between these
two nodes. This requires the attacker to compromise at least t + 1
sensor nodes. Even if the attacker successfully compromises the
polynomial (as well as the pairwise key), the related sensors can
still re-establish another pairwise key through path discovery. From
the path discovery process, we know that there are still m−1 pair of
nodes that can help u and v re-establish a pairwise key. To prevent
u from establishing a common key with v, the attacker must com-
promise at least one node in each pair; otherwise, it is still possible
to establish a pairwise key between node u and v through multiple
rounds of path discovery process. Thus, in this case, the attacker
1If t+1 shares of one bivariate polynomial are compromised, there
is no need to remember more compromised sensor IDs, because the
polynomial is already compromised. In addition, a sensor node i
only needs to remember a half of each ID, because the sensors of
concern share either ci or ri with node i.
has to compromise t + 1 nodes to learn the pre-established pairwise
key, and at least t + m sensors to prevent u and v from establishing
another pairwise key.
Now consider the case in which nodes u and v establish a pair-
wise key through path key establishment. The attacker may com-
promise one of the sensors involved in the key path used to estab-
lish the pairwise key. If the attacker has the message used to deliver
the key, he/she can recover the pairwise key. However, the related
sensors can establish a new key with a new round of path key estab-
lishment once the compromise is detected. To prevent the sensors
from establishing another pairwise key, the attacker has to block all
possible key paths between u and v. There are 2m−2 key paths be-
tween u and v that involve one or two intermediate nodes. Besides
the key paths with the compromised node, there are at least 2m− 3
paths. To prevent pairwise key establishment, the attacker has to
compromise at least one sensor in each path. Thus, in summary,
the attacker has to compromise one sensor involved in the path key
establishment to compromise the pairwise key, and at least 2m − 3
sensors to prevent u and v from establishing a pairwise key.
Attacks against the Network
Because the adversary knows the subset assignment mechanism,
he/she may compromise the bivariate polynomials in F one after
another by compromising selected sensor nodes in order to ﬁnally
compromise the whole network. Suppose the adversary just com-
promised l bivariate polynomials in F. There are about ml sensor
nodes where at least one of their polynomial shares has been dis-
closed. Now consider any pair of sensor nodes u = (cid:13)cu, ru(cid:14) and
v = (cid:13)cv, rv(cid:14) among the remaining (m − l)m sensor nodes. None
of the polynomial shares of these nodes have been compromised.
According to the assumption that the adversary just compromised
l polynomials, we know that nodes (cid:13)cu, rv(cid:14) and (cid:13)cv, ru(cid:14) have not
been compromised, and either of them can help u and v establish a
common key. (Indeed, based on our earlier analysis of the attacks
against a pair of nodes, even if both nodes have been compromised,
there are many other key paths that can help establish a pairwise key
between u and v.) Thus, the attacker compromises about (t + 1)l
sensor nodes (t + 1 nodes for each bivariate polynomial), but only
affects the pairwise key establishment among ml sensor nodes, in-
cludes the compromised ones.
As an alternative of the systematic attack, the adversary may ran-
domly compromise sensor nodes to attack the path discovery pro-
cess, in order to make it more expensive to establish pairwise keys.
Assume a fraction of pc sensor nodes in the network are compro-
mised. Then the probability that exactly k shares on a particular
bivariate polynomial have been disclosed is
P (k) =
m!
k!(m − k)!
c (1 − pc)
pk
m−k.
promised is Pc = 1 − Pt
The probability of one particular bivariate polynomial being com-
i=0 P (i). Thus, on average, there are
2m × Pc bivariate polynomials being compromised, and about
2m2 × Pc sensor nodes have one compromised polynomial share.
Consider any pair of non-compromised sensor nodes in the re-
maining part of the sensor network that have no compromised poly-
nomial share. The probability that the pairwise key between them
is compromised is (1 − 2(m−1)
N−1 ) × pc ≈ pc. These two sensor
nodes cannot establish a pairwise key directly, and the sensor node
that can help them establish a pairwise key is compromised.
Figure 5(a) shows the relationship between the fraction of com-
promised links for non-compromised sensors and the number of
compromised sensors. We assume each sensor has available stor-
age equivalent to 200 keys. From the ﬁgure, we can see that this
scheme has a high security guarantee even when a large fraction of
the sensors are compromised. For example, in the case of a sensor
network with 20,000 nodes, even if the attacker compromises 50%
of the nodes (i.e., 10,000 nodes), only about 0.00131% of the links
for non-compromised sensors are compromised. Thus, the majority
of the non-compromised nodes are not affected.
Now let us analyze how difﬁcult it is to re-establish a pairwise
key between non-compromised sensors when the network is under
attack. Assume the attacker randomly compromises a fraction pc
of the sensor nodes. Let us estimate the probability that two non-
compromised sensor nodes u and v cannot establish a pairwise key.
First, from earlier analysis, we know that the probability that u and
v cannot directly establish a pairwise key is Pf 1 = 1 − 2
m+1 .
Second, the probability that both (cid:13)uc, vr(cid:14) and (cid:13)vc, ur(cid:14), which are
the two sensors that can help u and v establish a common key, are
compromised is Pf 2 = p2
c.
Consider the protocol used to discover a key path with two inter-
mediate nodes. Because none of the two polynomials of which u
(or v) has shares is compromised, there must be at least 2(m−t−1)
non-compromised sensors that u (or v) shares a polynomial with.
In addition, d is generally a small number, because a sensor usually
cannot communicate with too many intermediate sensors due to its
limited energy. Thus, it is easy to conﬁgure 2(m−t−1) ≥ d. Each
non-compromised sensor can then pick at least d sensors to contact
during the path discovery. From the path discovery process, the
next node that one of the d sensors contacts has probability pc to be
a compromised node. Thus, the probability that this path discovery
process fails is Pf 3 = pd
c.
By combining the above three cases, the probability that u cannot
establish a pairwise key with v in a single round of path discovery
can be estimated by Pf = Pf 1 × Pf 2 × Pf 3 = (1− 2
c =
(m−1)pd+2
. Thus, the probability that two remaining sensor nodes
≈ 1 − pd+2
can establish a pairwise key is Ps = 1 − (m−1)pd+2
.
Figure 5(b) shows the relationship between Ps and the fraction of
compromised sensor nodes.
m+1 )pd+2
c
m+1
c
m+1
c
5.2 Comparison with Previous Schemes
Let us compare the grid-based key predistribution scheme with
the basic probabilistic scheme [5], the q-composite scheme [4], the
random pairwise keys scheme [4], and the random subset assign-
ment scheme presented in Section 4.
Assume the network size is N = 20, 000, and each sensor has
the same available storage equivalent to 200 keys).
In the grid-
based scheme, we have m = 142 and p = 0.014. The four
curves in the right part of Figure 5(a) show the fraction of com-
promised links as a function of the number of compromised sen-
sors given p = 0.014. We can see the basic probabilistic scheme
has almost the same performance as the q-composite scheme with
q = 1. Similar to the comparison in Section 4, the random sub-
set assignment scheme and the grid-based scheme performs much
better for less than 14,000 compromised nodes, while none of the
schemes can provide sufﬁcient security for more than 14,000 com-
promised nodes because of the large fraction of compromised links
(over 60%).
Though p = 0.014 is acceptable for the grid-based scheme,
for the basic probabilistic, the q-composite, and the random sub-
set assignment schemes, p should be large enough to make sure
the whole network is fully connected. Assume p = 0.33. This
requires about 42 neighbor nodes for each sensor to make sure the
whole network with 20,000 nodes is connected with a high prob-
ability. The three curves in the left part of Figure 5(a) show the
fraction of compromised links as a function of the number of com-
promised sensors for the above three schemes. We can see a small
number of compromised nodes reveals a large fraction of secrets in
the network for these schemes; however, the fraction of compro-
mised links is much lower in the grid-based scheme for the same
number of compromised nodes.
To compare with the random pairwise keys scheme [4], we let
m = t + 1, so that the grid-based scheme can provide the same
degree of perfect security guarantee as the random pairwise keys
scheme. Given the same storage overhead of 2(t + 1) = 2m, we
can support a network with m2 nodes, and the probability that two
sensors share a common key directly is p = 2
m+1 . With the same
number sensors and storage overhead, the random pairwise keys
scheme [4] has p = 2m
m , which is approximately the same as
our scheme.
m2 = 2
In addition to the above comparisons, the grid-based scheme has
some unique properties that the other schemes do not provide. First,
when there is no compromised sensors in the network, it is guaran-
teed that any pair of sensors can establish a pairwise key either
directly without communication, or through the help of an interme-