title:A Toolkit for Detecting and Analyzing Malicious Software
author:Michael Weber and
Matthew Schmid and
Michael Schatz and
David Geyer
A Toolkit for Detecting and Analyzing Malicious Software
Michael Weber, Matthew Schmid & Michael Schatz
Cigital, Inc.
Dulles, VA 20166
fmweber, mschmid, PI:EMAIL
David Geyer
PI:EMAIL
Abstract
In this paper we present PEAT: The Portable Executable
Analysis Toolkit. It is a software prototype designed to pro-
vide a selection of tools that an analyst may use in order
to examine structural aspects of a Windows Portable Ex-
ecutable (PE) ﬁle, with the goal of determining whether
malicious code has been inserted into an application af-
ter compilation. These tools rely on structural features of
executables that are likely to indicate the presence of in-
serted malicious code. The underlying premise is that typi-
cal application programs are compiled into one binary, ho-
mogeneous from beginning to end with respect to certain
structural features; any disruption of this homogeneity is
a strong indicator that the binary has been tampered with.
For example, it could now harbor a virus or a Trojan horse
program. We present our investigation into structural fea-
ture analysis, the development of these ideas into the PEAT
prototype, and results that illustrate PEAT’s practical ef-
fectiveness.
1. Introduction
Malicious software remains a major threat to today’s
information systems. Detecting and analyzing dangerous
programs is a costly and often inaccurate endeavor. The
difﬁculty of this task is underscored by a recent contest
challenging participants to ﬁgure out the nefarious behavior
of a particular program that has already been determined to
be malicious in nature [10]. Often identifying a program
(or portion thereof) as malicious is half the battle. In this
paper we introduce a prototype tool to aid in the analysis of
potentially malicious software.
At the current stage of our work we are focusing on the
detection of malicious software (malware) that has been
attached to an otherwise benign host application. This is
the modus operandi for many of the most common forms
of malware including executable viruses and many Trojan
horse programs. The host program provides cover while
the virus or Trojan horse performs malicious actions unbe-
knownst to the user. These programs often propagate while
attached to games or other enticing executables.
Malicious programmers have demonstrated their cre-
ativity by developing a great number of techniques through
which malware can be attached to a benign host. Several
insertion methods are common, including appending new
sections to an executable, appending the malicious code
to the last section of the host, or ﬁnding an unused region
of bytes within the host and writing the malicious content
there. A less elegant but effective insertion method is to
simply overwrite parts of the host application.
Given the myriad ways malicious software can attach to
a benign host it is often a time-consuming process to even
locate the point of infection. Traditional tools including
disassemblers and debuggers may be useful for examining
malware once it has been located, but provide little help in
guiding an analyst to the points of interest. Malicious soft-
ware hiding in a data section or other unexpected location
may be particularly difﬁcult to identify. To make matters
worse, the total code size of a malicious program is fre-
quently orders of magnitude smaller than the host that it
infects.
To help a malicious software analyst quickly and ef-
ﬁciently locate malware within a host application we de-
veloped the Portable Executable Analysis Toolkit (PEAT).
PEAT’s goal is to provide methods of examining Microsoft
Windows Portable Executable (PE) ﬁles [9] for signs of
malicious code. We accomplish this task by developing
analysis techniques that identify regions of the program
that were unlikely to have been part of the host application
when it was originally compiled and built. The presence of
such regions is a strong indicator that malicious software
has infected the host application.
This paper is organized as follows. First we summarize
present technologies that address the more general prob-
lem of undesirable code (viruses, backdoor programs, etc.)
in order to deﬁne the gap within that problem space that
PEAT ﬁlls. Next we describe in detail the capabilities that
PEAT provides, along with the ideas behind those capabil-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
ities and their intended uses. Following that is a brief case
study which illustrates our practical experience with using
PEAT to detect the dangerous Trojan horse program Back
Oriﬁce 2000 [8, 5] hidden within a seemingly harmless pro-
gram. A section summarizing some of PEAT’s weaknesses
is included. We conclude with a section describing our in-
tentions for further improving PEAT in order to increase its
effectiveness in analyzing malicious software.
2. Background
In the general case, malicious software detection is the-
oretically infeasible. In the speciﬁc case of searching for
a particular malicious code instance, it is not only possi-
ble, but performed daily by anti-virus software. Thus, we
have good commercial solutions to detecting known mali-
cious code instances. However, the problem of determining
whether software has malicious functionality is undecid-
able in the general case [11]. That is, we cannot look at
a given application and, in general, decide whether it con-
tains code that will result in malicious behavior. This is
equivalent to the halting problem in computer science the-
ory, which states that there is no general-purpose algorithm
that can determine the behavior of an arbitrary program [7].
Aside from the halting problem, there is the deﬁnition of
maliciousness to consider. What is malicious depends to a
large extent on the beholder and the context. For example,
a disk formatting program might be exactly what the user
wants (and therefore is not considered malicious), though
when embedded in a screensaver unbeknownst to the user,
it can be considered malicious. Thus, we cannot develop
an algorithm to decide maliciousness.
Other seminal work in this area has proved the unde-
cidability properties of detecting malicious software in the
general case in different contexts [3, 4, 13]. So, while the
prior art has demonstrated that detecting malicious code in
the general case is undecidable, what options are we left
with in addressing the unknown malicious code problem?
One approach to detecting malicious code in executable
programs is being investigated by the LSFM Research
Group [2] in which both static and dynamic methods are
applied in order to perform model checking to ensure that
the program under analysis will not violate any stated se-
curity policies. This is an example of an approach to ma-
licious software detection that requires an analyst to deﬁne
malicious behavior in the form of a policy.
Our present research differs from traditional approaches
to the malicious code problem in that it does not attempt
to deﬁne or identify malicious behavior. Instead, the re-
search focuses on structural characteristics of malicious
executable code. This approach allows for methods of ex-
amining any application, whether previously known or un-
known, in order to determine if it has been tampered with
since its original development. Such tampering usually
takes the form of an embedded virus or Trojan horse that
is activated during subsequent executions of the executable
program.
We chose Microsoft Windows as the initial platform for
PEAT because of its market dominance and the prolifera-
tion of malicious code targeted at that operating system and
its applications. As other platforms increase in popularity,
malicious attacks on those platforms are sure to follow. We
designed PEAT with this in mind so that it may be eas-
ily extended to accommodate other executable ﬁle formats,
such as ELF.
3. PEAT: Portable Executable Analysis Toolkit
The Portable Executable Analysis Toolkit (PEAT) pro-
vides an analyst with an array of tools for examining Win-
dows Portable Executable (PE) ﬁles for signs of malicious
code. Future work will extend PEAT to include features
to help understand the capabilities of that software. These
tools are designed to locate structural features of executa-
bles that do not ﬁt in with surrounding regions; i.e., regions
of bytes that appear to have been inserted into an other-
wise homogeneous binary ﬁle. The underlying premise is
that programs are typically compiled into one consistent bi-
nary. Any deviation from this self-consistency is a strong
indicator of tampering. The program may be infected with
a virus, it could contain a Trojan horse program, or it could
have been modiﬁed in some other manner resulting in a
program whose behavior is different from the intended be-
havior of the original program.
3.1. Overview
PEAT’s tools fall into three general categories: simple
static checks, visualization, and automated statistical anal-
ysis. Simple static checks consist of a list of features whose
presence or absence PEAT attempts to verify in order to
quickly gain information that might suggest something sus-
picious. For example, PEAT immediately issues a warning
if the program’s entry point is in an unusual location. Visu-
alization tools include graphical depictions of several fea-
tures of the PE ﬁle. Examples of these include
(cid:15) probabilities that regions of bytes in the PE ﬁle contain
code, padding, ASCII data, or random byte values
(cid:15) address offsets for instructions that perform opera-
tions such as jumps, calls, or register accesses
(cid:15) patterns of instructions that are known to indicate cer-
tain behavior (e.g., pushing arguments onto the stack
and making a call)
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
The visualization toolkit also uses PEAT’s disassembler,
based on work by Watanabe [14] , to parse and decode in-
structions. The user may then view the disassembly list-
ing.
In addition, in order to identify ASCII strings, the
user may view the ASCII representation of all byte values
within a given region. Together, these visualization tools
are intended to allow an expert analyst to explore an exe-
cutable ﬁle in an attempt to identify regions that appear to
be inconsistent with the entire program. To complement
these manual analysis capabilities, PEAT also provides au-
tomated analysis tools to guide the analyst to suspicious
regions of the PE ﬁle.
PEAT’s automated analysis tools perform statistical
tests in order to detect anomalous regions. The analysis
operates on many of the same PE ﬁle characteristics as
the visualization tools. The user chooses which features
to consider, and the analysis engine will then divide the
PE ﬁle sections into several regions and determine whether
there are any statistically signiﬁcant differences between
those regions. Each anomaly that is found is reported and
stored as a suspect region, along with automatically gener-
ated comments describing why it stands out.
The remainder of this section describes these tools in
detail.
3.2. Static checks
PEAT performs several static checks of the PE ﬁle un-
der analysis to quickly gain information that might suggest
that it contains something suspicious. The ﬁrst of these is a
check on the program’s entry point address, obtained from
the PE ﬁle header. This address should fall within some
section that is marked as executable (typically this will be
the ﬁrst section, and named .text or CODE). If this is not
the case, for example, if the entry point lies in the .reloc
section, which should not contain executable code, a warn-
ing will be displayed in PEAT’s main window once the PE
ﬁle is loaded into PEAT.
Another static check attempts to identify “bogus calls”,
which we deﬁne to be instructions that call to the immedi-
ately following instruction. Such a sequence of instructions
is a common method viruses use to determine their address
in memory. This is because the value of the instruction
pointer register EIP gets pushed onto the stack as a side ef-
fect of a CALL instruction [1]. The virus exploits this by
immediately popping this value. Because of the suspicious
nature of such instruction sequences, PEAT will alert the
user to their presence after the PE ﬁle has been disassem-
bled.
Finally, PEAT determines which DLL libraries are listed
in the PE ﬁle’s import table and reports the name and con-
tents of each.
In addition, it ﬁnds all instructions in the
program that call a function in a DLL library and reports