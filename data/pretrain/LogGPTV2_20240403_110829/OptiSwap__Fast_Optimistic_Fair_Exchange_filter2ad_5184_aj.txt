icfe sends the money to ˜B in the Payout-phase. This way,
the Payout-phase simulates the exact same behavior as the protocol execution in the hybrid
world.
To conclude, any environment Z that only corrupts Seller cannot distinguish the hybrid
and the ideal world execution except with negligible probability as long as the underlying
commitment scheme is binding.
Lastly, it is worth mentioning that the simulator SimS runs in polynomial time. This is
not trivial, since the simulation of the dispute resolution sub-protocol consists of repetitive
actions. Nevertheless, the number of challenged circuit gates is limited by the parameter aφ
which is set in step 1. Hence, the total number of challenge queries is upper bounded by
this parameter. Since an honest Buyer tries to create a valid proof of misbehavior as soon
as possible, the whole simulation terminates after at most aφ challenge queries.
Since the witness provided as input to FL
Simulation with Corrupted Buyer
Next, the case of a corrupted Buyer is considered. It is symmetric to the setup in case of a
corrupted Seller. In detail, the internal state and the program code of corrupted Buyer B∗
is under full control of the environment Z. Thus, B∗ may deviate from the protocol at any
icfe, the dummy parties ˜S
point in time. The ideal world comprises the ideal functionality FL
and ˜B∗, and the simulator SimB. SimB needs to generate a transcript of the execution of
Π as well as he needs to dene all inputs and outputs of corrupted Buyer. This includes
the generation of all outputs from ˜B∗ towards the environment and towards FL
icfe. Hence, on
messages from Z through ˜B∗, SimB needs to generate inputs to the ideal functionality FL
icfe.
Again, the proof of the following Claim focuses on the dierences between the simulation
with an honest Buyer and with a corrupted Buyer.
Claim. There exists an ecient algorithm SimB such that for all ppt environments Z that
only corrupt Buyer it holds that the execution of Π in the (GL,H
,L,H)-hybrid world in
presence of adversary A is indistinguishable from the ideal world execution of FL
icfe with the
ideal adversary SimB.
jc
Proof. The diculty of the simulation with a corrupted Buyer is to create an encrypted
witness z in the rst round and to present an encryption key k in the third round such that
the decryption of z using k equals the correct witness x, which is known to the simulator only
after round 3. The values zi, for i ∈ [n], are also contained in the vector e of intermediate
42
values of the computation of φ(x). Since the witness x is not known in round one, the
simulator must ensure that as soon as x is revealed, the decryption of each ei equals the
output of the circuit gate φi on evaluating φ(x).
Moreover, a commitment c to the encryption key k must be created in the rst round. When
revealing the key k in the third round, an opening value d has to be provided such that d
opens the commitment c to k.
We use again a sequence of games in order to show indistinguishability between the
hybrid world and the ideal world execution. The same approach is taken in [14], but the
following proof is shortened to two games. In Game1, simulator SimB
1 has the additional
power to control all inputs and outputs of honest parties, i.e., of honest Seller. Hence, he
learns the correct witness x at the start of the execution which he would not have known
otherwise. Using x, SimB
1 samples a key k and creates an encrypted witness z and the
intermediate values e using the Presetup-algorithm.
resolution sub-protocol. SimB
Simulator SimB
In contrast to the proof in [14], the presented simulator needs to simulate the dispute
1 for hybrid simulation with corrupted Buyer.
1 is given as follows.
jc
1. The simulation starts when ˜S sends (sell, id, x, φ, p, fS , fB) to FL
icfe, where φ(x) =
1 learns the witness x during this step. He samples a key k ← Gen(1κ),
1. SimB
computes (c, d) ← Commit(k) and (z, rz, re, rφ) ← Presetup(φ, x, k). Then, he
simulates the execution of Π by running (active, id, c, rz, re, rφ, aφ, p, fS , fB) ←
GL,H
(initialize, id, c, rz, re, rφ, aφ, p, fS , fB). In addition, he sends the message
(sell, id, z, φ) to ˜B∗.
2. Upon receiving (abort, id, ˜S) from FL
abort by running (aborted, id) ← GL,H
Upon receiving (accept, id) from ˜B∗ in the second round, SimB
to FL
GL,H
icfe in the second round, SimB
1 simulates the
(abort, id) and terminating the simulation.
1 sends (buy, id, φ)
icfe and simulates the acceptance of ˜B∗ by running (initialized, id) ←
(accept, id).
1 receives (abort, id) from ˜B∗ in the third round, he sends (abort, id) to
3. If SimB
jc
jc
1
4. If SimB
jc
jc
(reveal, id, k, d). Moreover, FL
(abort, id), and terminates the simulation.
the
encryption key revealing by running
icfe sends (revealed, id, x)
1 receives (f inalize, id) from ˜B∗ in the fourth round, he simulates the
(f inalize, id) and
icfe, runs (aborted, id) ← GL,H
FL
jc
Otherwise, SimB
simulates
(revealed, id, k, d) ← GL,H
to ˜B∗ in the third round if ˜B∗ did not abort.
nalization of the protocol Π by running (sold, id) ← GL,H
terminating.
If ˜B∗ sends a (challenge, id, Q message, SimB
resolution sub-protocol. Therefore, he executes the following steps alternately:
(a) Upon receiving (challenge, id, Q) from ˜B∗ when |Q| ≤ aφ, SimB
1 runs
(challenge, id, Q), sets aφ = aφ − |Q|, sends
jc
icfe, waits one round, and proceeds with step (b).
(challenged, id, Q) ← GL,H
(f reeze, id, ˜B∗,|Q|) to FL
Upon receiving (prove, id, π) from ˜B∗, SimB
proof of misbehavior. Therefore, he sends no message to FL
ger the Payout-phase of it and runs GL,H
the simulation.
Upon receiving (complain, id) from ˜B∗, SimB
1 needs to simulate an invalid
complain-message. To this end, he sends no message to FL
icfe in order to trigger
the Payout-phase, runs GL,H
(complain, id), and terminates the simulation.
If no message is received from ˜B∗ during the challenge-response-phase, SimB
1 needs to simulate an invalid
icfe in order to trig-
(prove, id, π). Then, he terminates
1 needs to simulate the dispute
jc
jc
1
43
jc
(b) After Buyer challenged Seller, SimB
icfe in the name of ˜B∗ and waits one round. Then,
(challenge timeout, id), to simulate the timeout-
sends (abort, id, 1) to FL
he runs (sold, id) ← GL,H
message sent by honest Seller, and outputs (bought, id, x) to ˜B∗.
1 needs to simulate a valid response.
To this end, he computes Rq ← GenerateResponse(φ, x, k, Q) and sends
(f reeze, id, ˜S,|Rq|) to FL
icfe. He simulates Π by running (responded, id, Rq) ←
GL,H
(respond, id, Rq). Then, he waits one round, and proceeds with step (a).
If no message is received from ˜B∗ in round 4, SimB
1 sends (abort, id, 1) to
FL
icfe in the name of ˜B∗ and waits one round. Then, he runs (sold, id) ←
GL,H
(f inalize, id), to simulate the nalization executed by honest Seller, and
outputs (bought, id, x) to ˜B∗.
jc
jc
Based on the extra power of the simulator SimB
1 , he learns the witness x in the rst
round before it is sent to the ideal functionality FL
icfe. Since Seller is honest, the witness
x is correct in the sense that φ(x) = 1, otherwise the ideal functionality won't accept the
sell -message.
SimB
1 can execute the initialization steps in the same way as honest Seller can, because he
knows the witness. Hence, after the initialization, it is guaranteed that the encrypted witness
z can be decrypted to x using the key k which is sampled by SimB
1 .
Also the computation φ(x) can be executed before the commitment re has to be generated
and thus the decryption of any value ei, which is veriable with a Merkle proof and the
commitment re, equals the correct output of circuit gate φi, for each i ∈ [m].
The simulation of round 2 and 3 is straightforward and similar to the honest case with the
icfe from ˜B∗. In round 4, corrupted
addition that the simulator must generate the input to FL
Buyer can either send a nalize-message, abort the execution, or start the dispute resolution
sub-protocol. Again, the simulation of the dispute resolution sub-protocol is a main dierence
in comparison to the proof of the FairSwap protocol presented in [14].
1 simulates the nalization of Π
and terminates the simulation. Since no message is sent to FL
icfe in this round, the ideal
functionality executes the Payout-phase and transfers the money to honest Seller. If ˜B∗
1 sends a (abort, id, 1)-message to FL
aborts the execution, SimB
icfe. The delay-parameter is
set to 1 in order to delay the unlocking of the coins by one round. This results in the unlocking
of the coins in favor of ˜S in the next round, which corresponds to the nalize-message sent
by honest Seller in the protocol Π. This message is simulated by the internal execution of
GL,H
In case of a nalize-message received from ˜B∗, SimB
after SimB
1 waited one round.
jc
1 simulates the execution of GL,H
Even if an honest Seller always provides a correct witness x, a corrupted Buyer may en-
gage in the dispute resolution sub-protocol. Therefore, when receiving a challenge-message
from ˜B∗, SimB
internally. The simulator keeps track of
the upper bound of possible challenged gates using the parameter aφ. This guarantees that
corrupted Buyer may not pose more challenges than allowed which is controlled by GL,H
in
the hybrid world execution. In addition, SimB
icfe in order to
lock the right amount of fees.
After ˜B∗ sent a challenge-message, an honest Seller is always able to create valid responses.
This is simulated by SimB
1 in step (4b) by using the generateResponse-algorithm and inter-
nally running GL,H
icfe to lock the same
money from ˜S as in the hybrid world execution.
Corrupted Buyer may also send a complain-message or a prove-message after ˜S answered
a challenge-query. However, these messages are invalid, since honest Seller provided the
correct witness and answers always with correct responses. Thus, SimB
1 internally runs
GL,H
icfe. The absence of a message results in the execution of
. Again, the simulator sends a freeze-message to FL
1 sends a freeze-message to FL
and sends no message to FL
jc
jc
jc
jc
44
the Payout-phase of FL
honest Seller, which corresponds to the same behavior as in the protocol execution.
icfe. Since the provided witness is correct, the money is transferred to
SimB
Finally, corrupted Buyer may also abort at any point in time during the challenge-
response-phase. In this case, SimB
icfe and waits one round.
The wait is necessary, since the challenge timeout-message from ˜S appears in the next
round after ˜B∗ aborted. The abort-message with delay-parameter 1 instructs FL
icfe to send
the money to ˜S in the next round. Hence, the money is sent in the identical round as in the
protocol execution.
1 sends an abort-message to FL
e to it.
1 is used in the hybrid simulation in Game1. Game1 is indistinguishable from the
hybrid world execution but the simulator has extra power. Game2 removes this extra power
from the simulator to give a full UC simulation. In order to achieve indistinguishability of
Game1 and Game2, the programming feature of the global random oracle H is used. The
following argumentation about the indistinguishability is similar to the once given in [14].
Instead of learning the witness x in the rst round, SimB only gets to know the witness
after the ideal functionality FL
icfe reveals it in round three. Since, the encrypted witness z∗
must be given to ˜B∗ in the rst round, z∗ is sampled randomly. In addition, the whole vector
of intermediate values e∗ is sampled randomly to create a commitment r∗
In contrast to the simulation in [14], the commitment c to the encryption key k is not
sampled randomly. Instead, SimB samples a key and creates the commitment c using the
Commit-algorithm. The simulation in [14] has to use the programming feature of H since
the commitment c is dened by the environment Z and hence cannot be chosen by the
simulator. However, the absence of the commitment c in the messages from Z to Seller does
not aect the security of the protocol but it simplies the simulation.
Based on the IND-CPA-security of the underlying encryption scheme, the environment Z
cannot distinguish between z computed as the encryption of the correct witness x and a
randomly selected z∗. When the correct witness x is revealed in round 3, the simulator
has to ensure that the decryption of z∗ equals x and the decryption of each ei equals
the output of φi of the evaluation on x for each i ∈ [m]. To this end, the programming
feature of the global random oracle H is used. To give an example, for i ∈ [n] the message
i ) is sent to H, where oi = xi. This results in the situation, that
(program, id, (k||i), oi ⊕ z∗
the global random oracle H returns ri = oi ⊕ z∗
i on input H(k||i) such that the encryption
i ⊕ H(k||i) = oi will decrypt z∗
algorithm Enc(k, z∗
i ) = z∗
Since SimB programs the output of several queries, it might seem possible for Z to detect
the programming and distinguish the two execution this way. However, the isProgrammed-
queries are executed either through corrupted Buyer ˜B∗ or through the ideal adversary. In
both cases, SimB controls the responses and is able to lie by answering each query with
(isProgrammed, 0). Hence, the programming can only be detected by Z if it sends the exact
same queries that are programmed by SimB in round 3 beforehand.
Since the query values are randomly and Z can only execute polynomial many queries, the
probability to detect a programming this way is negligible.
The full simulator SimB is given below. By achieving indistinguishability between Game1
and Game2, it is shown that the hybrid world execution is indistinguishable from the ideal
world execution.
i to oi = xi.
Simulator SimB for simulation with corrupted Buyer.
1. Upon receiving (sell, id, φ, p, fS , fB, ˜S) from FL
randomly samples z∗
{n + 1, . . . , m}, and k∗ ← Gen(1κ). He sets z∗ = (z∗