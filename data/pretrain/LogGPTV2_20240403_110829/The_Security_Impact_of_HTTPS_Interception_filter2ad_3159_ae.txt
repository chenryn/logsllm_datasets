HPKP, OneCRL/CRLSets, certiﬁcate transparency validation,
and OCSP must-staple. None of the products we tested
supported these features. Therefore, products that receive an A
grade for their TLS security likely still reduce overall security
when compared to recent versions of Chrome or Firefox.
B. Testing Security Products
To measure the security of the connections initiated by
interception products, we installed the trial versions of the
corporate proxies, popular client security software, and malware
listed in Section III.6 We then ran the latest version of Chrome,
Internet Explorer, Firefox, and Safari through each product,
visiting a website that executed the following tests:
6Product demos could have different security proﬁles than their production
counterparts. However, during our disclosure process, none of the manufacturers
we contacted indicated this.
9
1) TLS Version. We check the highest version of TLS that
the product supports. We grade any client that supports at
best TLS 1.1 as B, SSLv3 as C, and SSLv2 as F.
2) Cipher Suites. We investigate the cipher suites present in
the Client Hello. We rate any product that does not support
Chrome’s Strong TLS ciphers [11] as B, handshakes that
offer RC4 as C, and any product that advertises broken
ciphers (e.g., export-grade or DES) as F.
3) Certiﬁcate Validation. We present a series of untrusted
certiﬁcates, including expired, self-signed, and invalidly-
signed certiﬁcates. We further test with certiﬁcates signed
by CAs with a publicly-known private key (i.e., Super-
ﬁsh [58], eDell, and Dell provider roots [13]). We rate
any product that accepts one of these certiﬁcates as F.
4) Known TLS Attacks. We check whether clients are
vulnerable to the BEAST, FREAK, Heartbleed, and
Logjam attacks, or accept weak Difﬁe-Hellman keys. We
rate any vulnerable client as C.7
Corporate Middleboxes
The default conﬁgurations for eleven
of the twelve middleboxes we tested weaken connection
security, and ﬁve of the twelve products introduce severe
vulnerabilities that would enable future interception by a
man-in-the-middle attacker. Ten support RC4-based ciphers,
two advertise export-grade ciphers, and three have broken
certiﬁcate validation (Figure 3). We note that the installation
process for many of these proxies is convoluted, crash-
prone, and at times, non-deterministic. Conﬁguration is equally
confusing, oftentimes with little to no documentation. For
example, Cisco devices allow administrators to customize
permitted cipher suites, but do not provide a list of ciphers to
choose from. Instead, the device provides an undocumented
text box that appears to accept OpenSSL cipher rules (e.g.,
ALL:!ADH:@STRENGTH). We suspect that this poor usability
contributes to the abysmal conﬁgurations we see in the wild.
We were not able to acquire a demo or trial of the ZScaler
Proxy, a prominently advertised cloud-based middlebox. Instead,
we investigated the trafﬁc that originated from one of the
seven ZScaler ASes in the Cloudﬂare dataset.8 We found one
predominant handshake ﬁngerprint that accounts for more than
four times more trafﬁc than the second most popular, and does
not match any popular browsers indicated in the associated
User-Agent strings. We would have rated this handshake at
best B due to the lack of any perfect-forward-secret ciphers.
However, we exclude it from any other analysis, because we
were not able to check for further vulnerabilities.
Client-side Security Software
In line with de Carné de
Carnavalet and Mannan [12], we ﬁnd that nearly all of the client-
side security products we tested reduce connection security
and ten introduce severe vulnerabilities (Figure 4). We note
that these security grades are a lower bound that assume TLS
stacks have no additional vulnerabilities. However, in practice,
researchers discover bugs in antivirus software regularly. For
Avast alone, ten vulnerabilities have been publicly disclosed
within the last eight months, one of which allowed remote code
execution through carefully crafted certiﬁcates [48].
7We tested these products in January–March, 2016, which was approximately
eight months after the Logjam disclosure and eleven months after FREAK.
8We investigated ASes 62907, 55242, 53813, 53444, 40384, 32921, and 22616.
Malware and Unwanted Software
Researchers have previ-
ously found that Komodia does not validate certiﬁcates [58]
and we ﬁnd that the NetFilter SDK similarly does not properly
validate certiﬁcate chains. We grade both as F: severely broken.
C. Impact on TLS Trafﬁc
While many security products have insecure defaults,
intercepted connections could have a different security pro-
ﬁle. Security might be improved if administrators conﬁgure
middleboxes to perform responsible handshakes, or, even with
their poor security, proxies might protect further out-of-date
clients. We investigated the security of intercepted handshakes
based on the parameters advertised in the handshake (e.g.,
TLS version and cipher suites), and in the cases where we
can identify the interception product, its security rating. To
determine the change in security rather than just the security of
the new connection, we calculated the security of the browser
version speciﬁed in the HTTP User-Agent and compare that to
the security of the handshake we observe.
Similar to how each of our three networks has a different
interception rate, each vantage point presents a different security
impact. For Firefox, 65% of intercepted connections have
reduced security and an astounding 37% have negligent security
vulnerabilities. 27% of the e-commerce and 45% of the
Cloudﬂare connections have reduced security, and 18% and
16% are vulnerable to interception, respectively.
Interception products increased the security for 4% of
the e-commerce and 14% of the Cloudﬂare connections. The
discrepancy in increased security is largely due to temporal
differences in data collection and the deprecation of RC4
cipher suites during this period. When the e-commerce sites
collected data in August 2015, browsers considered RC4 to
be safe. However, between August 2015 and April 2016,
standards bodies began advising against RC4 [50] and both
Chrome and Firebox deprecated the cipher [59]. When grading
Cloudﬂare connections in May 2016, we labeled connections
that advertised RC4 as C. This results in connections from
older versions of Internet Explorer and Safari being marked
insecure, and proxies improving the security for an increased
number of connections.
Corporate Middleboxes During our earlier analysis of cor-
porate proxies, we found that many network middleboxes
inject HTTP headers, such as X-Forwarded-For and Via,
to assist managing simultaneous proxied connections. We
analyzed the connections in the e-commerce dataset with proxy-
related headers to better understand the security of corporate
middleboxes compared to client-side software. We ﬁnd that
connection security is signiﬁcantly worse for middleboxes
than the general case. As can be seen in Figures 14 and 15,
security is degraded for 62.3% of connections that traverse
a middlebox and an astounding 58.1% of connections have
severe vulnerabilities.
We note a similar phenomenon in the Firefox data where
we manually investigated the top 25 ASes with more than
100K connections, the highest interception rates, and a single
predominant interception ﬁngerprint. We primarily ﬁnd ﬁnancial
ﬁrms, government agencies, and educational institutions. With
the exception of one bank, 24 of the top 25 ASes have
worsened security due to interception. For 12 of the 25 ASes,
10
Network
E-commerce (All Trafﬁc)
E-commerce (Middleboxes)
Cloudﬂare
Firefox Updates
Increased
Security
4.1%
0.9%
14.0%
0.0%
Decreased
Security
26.5%
62.3%
45.3%
65.7%
Severely
Broken
17.7%
58.1%
16.0%
36.8%
Fig. 14: Impact of Interception—We summarize the secu-
rity impact of HTTPS interception, comparing client–proxy
connection security with proxy–server connection security.
Original
Security
Dataset
Firefox
E-commerce Sites:
All Trafﬁc
E-commerce Sites:
Middleboxes
Cloudﬂare
→A
New Security
→B
→C
A→ 34.3% 16.8% 12.2%
A→ 57.1%
2.9%
B→ 2.7% 10.2%
C→ 0.6%
0.4%
F→ 0.0%
0.2%
A→ 13.5%
3.0%
B→ 0.7% 23.3%
C→ 0.1%
0.1%
F→ 0.0%
0.0%
A→ 17.3%
B→ 0.0%
C→ 9.4%
F→ 0.8%
1.1% 29.7%
0.0%
0.0%
3.3% 22.0%
0.1%
0.4%
5.6%
1.2%
1.0%
0.1%
0.8%
0.6%
0.0%
0.0%
→F
36.8%
8.1%
8.3%
0.3%
1.0%
18.0%
37.8%
2.2%
0.0%
10.0%
0.0%
4.5%
1.5%
Fig. 15: Change in Security—We calculate the change in
connection security based on the parameters advertised in the
Client Hello message and the security of the browser in the
HTTP User-Agent header.
the predominant TLS handshake includes export-grade cipher
suites, making them vulnerable to future interception by an
active man-in-the-middle attacker.
V I I . D I S C U S S I O N
While the security community has long known that security
products intercept TLS connections, we have largely ignored the
issue. We ﬁnd that interception is occurring more pervasively
than previously estimated and in many cases,
introduces
signiﬁcant vulnerabilities. In this section, we discuss the
implications of our measurements and make recommendations
for both vendors and the security community.
We need community consensus.
There is little consensus
within the security community on whether HTTPS interception
is acceptable. On the one hand, Chrome and Firefox have
provided tacit approval by allowing locally installed roots to
bypass key pinning restrictions [34]. However, at the same
time, discussions over protocol features that facilitate safer
interception have been met with great hostility within standards
groups [35], [37]. These communities need to reach consensus
11
on whether interception is appropriate in order to develop
sustainable, long-term solutions.
We should reconsider where validation occurs. Many HTTPS
security features expect connections to be end-to-end by
mixing the HTTP and TLS layers, and by implementing
HTTPS features in browser code rather than in TLS libraries.
For example, to overcome weaknesses in existing revocation
protocols, Firefox ships with OneCRL [43] and Chrome,
CRLSets [24]. Both of these solutions increase browser security
in the typical end-to-end case. However, these solutions provide
no protection in the presence of a TLS proxy and because the
solution is not part of the TLS protocol itself, TLS libraries
do not implement these safe revocation checks. In a second
example, HPKP directives are passed over HTTP rather than
during the TLS handshake. Browsers cannot perform HPKP
validation for proxied connections because they do not have
access to the destination certiﬁcate and proxies do not perform
this validation in practice.
While it is possible for proxies to perform this additional
veriﬁcation, they are not doing so, and in many cases vendors
are struggling to correctly deploy existing TLS libraries,
let alone implement additional security features. Given this
evidence, our community needs to decide what roles should
be carried out by the browser versus TLS implementation.
If we expect browsers to perform this additional veriﬁcation,
proxies need a mechanism to pass connection details (i.e.,
server certiﬁcate and cryptographic parameters) to the browser.
If we expect proxies to perform this validation, we need to
standardize these validation steps in TLS and implement them in
popular libraries. Unfortunately the current situation, in which
we ignore proxy behavior, results in the worst case scenario
where neither party is performing strict validation.
Cryptographic libraries need secure defaults.
Several proxies
deployed TLS libraries with minimal customization. Unfortu-
nately the default settings for these libraries were vulnerable
rendering the middlebox vulnerable. Client libraries and web
servers need to prioritize making their products safe by default.
We applaud OpenSSL’s recent decision to remove known-
broken cipher suites [2]. However, this change should have
occurred more than a decade earlier and libraries continue to
accept other weak options. Our community should continue
restricting default options to known safe conﬁgurations.
Antivirus vendors should reconsider intercepting HTTPS. An-
tivirus software operates locally and already has access to the
local ﬁlesystem, browser memory, and any content loaded over
HTTPS. Given their history of both TLS misconﬁgurations [12]
and RCE vulnerabilities [48], we strongly encourage antivirus
providers to reconsider whether intercepting HTTPS is respon-
sible.
Security companies are acting negligently. Many of the
vulnerabilities we ﬁnd in antivirus products and corporate
middleboxes—such as failing to validate certiﬁcates and
advertising broken ciphers—are negligent and another data
point in a worrying trend of security products worsening
security rather than improving it [12], [17]. We hope that
by disclosing vulnerabilities in existing products, we can
encourage manufacturers to patch problems. We urge companies
to prioritize the security of their TLS implementations and to
consider the pace at which the HTTPS ecosystem evolves and
whether they can keep up with the necessary updates.
Do not rely on client conﬁguration.
Because cryptographic
parameters must be supported by both the client and server,
the security community has largely ignored HTTPS servers’
lenient cipher support with the implied understanding that
browser vendors will only advertise secure parameters. In
2015, Durumeric et al. found that nearly 37% of browser-
trusted HTTPS servers on the IPv4 address space supported
RSA export ciphers [16] despite their known weaknesses and
discontinued use. It was only after the discovery of the FREAK
attack—a bug in OpenSSL that allowed an active attacker to
downgrade connections to export-grade cryptography—that
operators began to actively disable export cipher suites.
While modern browsers are not vulnerable to active down-
grade attacks, nearly two thirds of connections that traverse
a network middlebox advertise export ciphers and nearly 3%
of all HTTPS connections to the e-commerce sites included
at least one export-grade cipher suite. While these products
would optimally not be vulnerable, their risk can be reduced by
encouraging websites to disable weak ciphers. Similarly, some
interception products support secure ciphers, but do not order
them correctly. In this situation, servers that explicitly choose
strong ciphers will negotiate a more secure connection than
those that honor client preference. We need to practice defense-
in-depth and encourage both clients and servers to select secure
parameters instead of relying on one side to always act sanely.
Administrators need to test middleboxes. Many of the
products we tested support more secure connections with