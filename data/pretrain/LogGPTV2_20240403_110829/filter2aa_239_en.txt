        new XComment("A great company"),
        new XElement("CompanyAddress",
          new XElement("Address", "One Microsoft Way"),
          new XElement("City", "Redmond"),
          new XElement("Zip", "WA 98052-6399"),
          new XElement("State", "WA"),
          new XElement("Country", "USA")));
      WriteLine(company);
    }
特性与Company元素一起显示：
      Microsoft Corporation
        One Microsoft Way
        Redmond
        WA 98052-6399
        WA
        USA
现在可以把XML文档转换为XDocument对象，处理这个文档的各个部分，还可以使
用LINQ to XML查询XML文档，处理结果。
27.6.6 使用LINQ查询XML文档
使用LINQ to XML查询静态的XML文档几乎不需要做任何工作。下面的例子就使用
hamlet.xml文件和查询获得戏剧中的所有演员。每位演员都在XML文档中用
元素定义。XDocument类的Descendants方法返回一个IEnumerable ，其中包
含树上的所有PERSONA元素。对于这棵树的每个PERSONA元素，用LINQ查询访问Value
属性，并写入所得的集合（代码文件LinqToXmlSample / Program.cs）：
    public static void QueryHamlet()
    {
      XDocument doc = XDocument.Load(HamletFileName);
      IEnumerable persons = (from people in doc.Descendants("PERSONA")
                                select people.Value).ToList();
      WriteLine($"{persons.Count()} Players Found");
      WriteLine();
      foreach (var item in persons)
      {
        WriteLine(item);
      }
    }
运行应用程序时，可以在戏剧哈姆雷特中看到以下结果。在C#编程书中也可以学习
文学：
    26 Players Found
    CLAUDIUS, king of Denmark.
    HAMLET, son to the late king, and nephew to the present king.
    POLONIUS, lord chamberlain.
    HORATIO, friend to Hamlet.
    LAERTES, son to Polonius.
    LUCIANUS, nephew to the king.
    VOLTIMAND
    CORNELIUS
    ROSENCRANTZ
    GUILDENSTERN
    OSRIC
    A Gentleman
    A Priest.
    MARCELLUS
    BERNARDO
    FRANCISCO, a soldier.
    REYNALDO, servant to Polonius.
    Players.
    Two Clowns, grave-diggers.
    FORTINBRAS, prince of Norway.
    A Captain.
    English Ambassadors.
    GERTRUDE, queen of Denmark, and mother to Hamlet.
    OPHELIA, daughter to Polonius.
    Lords, Ladies, Officers, Soldiers, Sailors, Messengers, and other Attendants.
    Ghost of Hamlet's Father.
27.6.7 查询动态的XML文档
目前，Internet上有许多动态的XML文档。给指定的URL端点发送一个请求，就会找
到博客种子、播客种子等许多提供XML文档的内容。这些种子可以在浏览器上查看，或
者通过RSS聚合器查看，或用作纯粹的XML。下面的示例说明了如何直接从代码中使用
Atom种子。
在这段代码中，XDocument对象的Load（）方法指向一个URL，从该URL中检索
XML文档。对于Atom种子，根元素是一个feed元素，包含带有种子信息的直接子元素，
和每一篇文章的entry元素列表。访问元素时，不要错过Atom名称空间
http://www.w3.org/2005/Atom，否则结果将是空的。
在示例代码中，首先访问title和subtitle元素的值，它们定义为根元素的子元素。Atom
种子可以包含多个link元素。使用一个LINQ查询时，只检索包含rel特性值alternate的第一
个link元素。把完整的种子信息写到控制台后，检索所有entry元素，创建一个带有Title、
Published、Summary、Url和Comments属性的匿名类型（代码文件LinqToXmlSample 
/
Program.cs）：
    public static void QueryFeed()
    {
      XNamespace ns = "http://www.w3.org/2005/Atom";
      XDocument doc = XDocument.Load(@"http://blog.cninnovation.com/feed/atom/");
      WriteLine($"Title: {doc.Root.Element(ns + "title").Value}");
      WriteLine($"Subtitle: {doc.Root.Element(ns + "subtitle").Value}");
      string url = doc.Root.Elements(ns + "link")
        .Where(e => e.Attribute("rel").Value == "alternate")
        .FirstOrDefault()
        ?.Attribute("href")? .Value;
      WriteLine($"Link: {url}");
      WriteLine();
      var queryPosts = from myPosts in doc.Descendants(ns + "entry")
                    select new
                    {
                      Title = myPosts.Element(ns + "title")? .Value,
                      Published = DateTime.Parse(
                        myPosts.Element(ns + "published")? .Value),
                      Summary = myPosts.Element(ns + "summary")? .Value,
                      Url = myPosts.Element(ns + "link")? .Value,
                      Comments = myPosts.Element(ns + "comments")? .Value
                    };
      foreach (var item in queryPosts)
      {
        string shortTitle = item.Title.Length > 50 ?
          item.Title.Substring(0, 50) + "..." : item.Title;
        WriteLine(shortTitle);
      }
    }
运行应用程序，查看种子的全部信息：
    Title: Christian Nagel's CN innovation
    Subtitle: Infos für Windows- und Web-Entwickler
    Link: http://blog.cninnovation.com
查询的结果显示所有的标题：
    A New Hello, World!
    Ein heisser Sommer: Visual Studio 2015, .NET Core ...
    Ein Operator Namens Elvis &#8211; oder A Lap Aroun...
    .NET 2015, C# 6 und Visual Studio 2015 Update Trai...
    Building Bridges &#8211; Build 2015
    Slides und Samples vom Global Azure Boot Camp
    Code Samples von der BASTA! 2015 Spring
    .NET User Group Austria &#8211; Fünf Gründe für Me...
    .NET User Group Austria &#8211; Welche Storage Tec...
    Universal Apps für Windows 10
27.6.8 转换为对象
使用LINQ to SQL很容易把XML文档转换为对象树。Hamlet文件包含戏剧里的所有角
色。属于组的一些角色就分组到PGROUP元素内。一个组在GRPDESC元素中包含组的名
称，组内的角色包含在PERSONA元素中。下面的示例为每个组创建对象，并给对象添加
组名称和角色。代码示例使用LINQ方法语法，而不是LINQ查询，利用Select（）方法的
一个重载版本，来提供索引参数。该索引也会进入新创建的对象。XDocument的
Descendants（）方法过滤所有的PGROUP元素。每个组用Select（）方法选择，创建一个
匿名对象，填充Number、Description和Characters属性。Characters属性本身就是组中
PERSONA元素的所有值的列表（代码文件LinqToXmlSample / Program.cs）：
    public static void TransformingToObjects()
    {
      XDocument doc = XDocument.Load(HamletFileName);
      var groups =
        doc.Descendants("PGROUP")
          .Select((g, i) =>
          new
          {
            Number = i + 1,
            Description = g.Element("GRPDESCR").Value,
            Characters = g.Elements("PERSONA").Select(p => p.Value)
          });
      foreach (var group in groups)
      {
        WriteLine(group.Number);
        WriteLine(group.Description);
        foreach (var name in group.Characters)
        {
          WriteLine(name);
        }
        WriteLine();
      }
    }
运行应用程序，调用TransformingToObjects方法，查看两个组及其角色：
    1
    courtiers.
    VOLTIMAND
    CORNELIUS
    ROSENCRANTZ
    GUILDENSTERN
    OSRIC
    2
    officers.
    MARCELLUS
    BERNARDO
27.6.9 转换为XML
因为使用XElement类及其灵活的构造函数，传递任意数量的子元素，就很容易创建
出XML，所以前面的示例可以改为创建XML，而不是对象列表。查询与前面的代码示例
相同。不同的是，传递名称hamlet，创建一个新的XElement。hamlet是这个生成的XML的
根元素。子元素用Select（）方法的结果创建，之后使用Descendants（）方法来选择所有
PGROUP元素。对于每一个组，都创建一个新组XElement。每一组包含一个带有组号的
number特性、一个包含描述的description特性，和包含name元素列表的characters元素（代
码文件LinqToXmlSample / Program.cs）：
    public static void TransformingToXml()
    {
      XDocument doc = XDocument.Load(HamletFileName);
      var hamlet =
        new XElement("hamlet",
        doc.Descendants("PGROUP")
          .Select((g, i) =>
            new XElement("group",
            new XAttribute("number", i + 1),
            new XAttribute("description", g.Element("GRPDESCR").Value),
            new XElement("characters",
              g.Elements("PERSONA").Select(p => new XElement("name", p.Value))
        ))));
      WriteLine(hamlet);
    }
运行应用程序时，可以看到如下生成的XML片段：
        VOLTIMAND
        CORNELIUS
        ROSENCRANTZ
        GUILDENSTERN
        OSRIC
        MARCELLUS
        BERNARDO
27.7 JSON
花了很长时间学习.NET 
Framework的许多XML特性后，下面学习JSON数据格式。
Json.NET提供了一个巨大的API，在其中可以使用JSON完成本章使用XML完成的许多工
作，这里介绍其中的一些。
示例代码使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    Newtonsoft.Json
    System.Xml.XDocument
名称空间：
    Newtonsoft.Json
    Newtonsoft.Json.Linq
    System
    System.IO
    System.Xml.Linq
    static System.Console
27.7.1 创建JSON
为了使用JSON.NET手动创建JSON对象，Newtonsoft.Json.Linq名称空间提供了几个类
型。JObject代表JSON对象。JObject是一个字典，其键是字符串（.NET对象的属性名），
其值是JToken。这样，JObject提供了索引访问。JSON对象的数组由JArray类型定义。
JObject和JArray派生于抽象基类JContainer，其中包含了JToken对象的列表。
下面的代码片段创建JObject对象book1和book2，使用字典索引访问填充了title和
publisher。两个book对象添加到JArray中（代码文件JsonSample / Program.cs）：
    public static void CreateJson()
    {
      var book1 = new JObject();
      book1["title"] = "Professional C# 6 and .NET 5 Core";
      book1["publisher"] = "Wrox Press";
      var book2 = new JObject();
      book2["title"] = "Professional C# 5 and .NET 4.5.1";
      book2["publisher"] = "Wrox Press";
      var books = new JArray();
      books.Add(book1);
      books.Add(book2);
      var json = new JObject();
      json["books"] = books;
      WriteLine(json);
    }
运行应用程序，看看生成的JSON代码：
    {
      "books": [
        {
        "title": "Professional C# 6 and .NET 5 Core",
        "publisher": "Wrox Press"
        },
        {
        "title": "Professional C# 5 and .NET 4.5.1",
        "publisher": "Wrox Press"
        }
      ]
    }
27.7.2 转换对象
除了使用JsonObject和JsonArray创建JSON内容之外，还可以使用JsonConvert类。
JsonConvert允许从对象树中创建JSON，把JSON字符串转换回对象树。
在本节的示例代码中，从辅助方法GetInventoryObject中创建一个Inventory对象（代码
文件JsonSample / Program.cs）：
    public static Inventory GetInventoryObject() =>
      new Inventory
      {
        InventoryItems = new Product[]
        {
        new Product
        {
          ProductID = 100,
          ProductName = "Product Thing",
          SupplierID = 10
        },
        new BookProduct
        {
          ProductID = 101,
          ProductName = "How To Use Your New Product Thing",
          SupplierID = 10,