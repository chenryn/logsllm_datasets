title:WebJail: least-privilege integration of third-party components in
web mashups
author:Steven Van Acker and
Philippe De Ryck and
Lieven Desmet and
Frank Piessens and
Wouter Joosen
WebJail: Least-privilege Integration of Third-party
Components in Web Mashups
Steven Van Acker, Philippe De Ryck, Lieven Desmet, Frank Piessens, Wouter Joosen
IBBT-Distrinet, Katholieke Universiteit Leuven, 3001 Leuven, Belgium
PI:EMAIL
ABSTRACT
In the last decade, the Internet landscape has transformed
from a mostly static world into Web 2.0, where the use of
web applications and mashups has become a daily routine
for many Internet users. Web mashups are web applications
that combine data and functionality from several sources
or components.
Ideally, these components contain benign
code from trusted sources. Unfortunately, the reality is very
diﬀerent. Web mashup components can misbehave and per-
form unwanted actions on behalf of the web mashup’s user.
Current mashup integration techniques either impose no
restrictions on the execution of a third-party component, or
simply rely on the Same-Origin Policy. A least-privilege
approach,
in which a mashup integrator can restrict the
functionality available to each component, can not be im-
plemented using the current integration techniques, without
ownership over the component’s code.
We propose WebJail, a novel client-side security architec-
ture to enable least-privilege integration of components into
a web mashup, based on high-level policies that restrict the
available functionality in each individual component. The
policy language was synthesized from a study and catego-
rization of sensitive operations in the upcoming HTML 5
JavaScript APIs, and full mediation is achieved via the use
of deep aspects in the browser.
We have implemented a prototype of WebJail in Mozilla
Firefox 4.0, and applied it successfully to mainstream plat-
forms such as iGoogle and Facebook.
In addition, micro-
benchmarks registered a negligible performance penalty for
page load-time (7ms), and the execution overhead in case of
sensitive operations (0.1ms).
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection; H.3.5 [Information
Storage and Retrieval]: Web-based services
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
Keywords
Web Application Security, Web Mashups, Sandbox, Least-
privilege integration
1.
INTRODUCTION
The Internet has seen an explosion of dynamic websites
in the last decade, not in the least because of the power
of JavaScript. With JavaScript, web developers gain the
ability to execute code on the client-side, providing for a
richer and more interactive web experience. The popularity
of JavaScript has increased even more since the advent of
Web 2.0.
Web mashups are a prime example of Web 2.0. In a web
mashup, data and functionality from multiple stakeholders
are combined into a new ﬂexible and lightweight client-side
application. By doing so, a mashup generates added value,
which is one of the most important incentives behind build-
ing mashups. Web mashups depend on collaboration and
interaction between the diﬀerent mashup components, but
the trustworthiness of the service providers delivering com-
ponents may strongly vary.
The two most wide-spread techniques to integrate third-
party components into a mashup are via script inclusion
and via (sandboxed) iframe integration, as will be discussed
in more detail in Section 2. The script inclusion technique
implies that the third-party component executes with the
same rights as the integrator, whereas the latter technique
restricts the execution of the third-party component accord-
ing to the Same-Origin Policy. More ﬁne-grained techniques
(such as Caja [23] or FBJS [31]) require (some form of) own-
ership over the code to transform or restrict the component
to a known safe subset before delivery to the browser. This
makes these techniques less applicable to integrate third-
party components directly from their service providers.
To enable the necessary collaboration and interaction while
restricting the capabilities of untrusted third-party compo-
nents, web mashups should integrate components according
to the least-privilege principle. This means that each of the
components is only granted access to data or functionality
necessary to perform its core function. Unfortunately, least-
privilege integration of third-party mashup components can
not be achieved with the current script-inclusion and frame-
integration techniques. Moreover, the need for least-privilege
integration becomes highly relevant, especially because of
the augmented capabilities of the upcoming HTML5 Java-
Script APIs [32] (such as access to local storage, geolocation,
media capture and cross-domain communication).
In this paper, we propose WebJail, a novel client-side se-
curity architecture to enable the least-privilege integration
of third-party components in web mashups. The security
restrictions in place are conﬁgurable via a high-level com-
position policy under control of the mashup integrator, and
allow the use of legacy mashup components, directly served
by multiple service providers.
In summary, the contributions of this paper are:
1. a novel client-side security architecture, WebJail, that
supports least-privilege composition of legacy third-
party mashup-components
2. the design of a policy language for WebJail that is
tuned to support the eﬀective use of WebJail to limit
access to the powerful upcoming HTML5 APIs
3. the implementation of WebJail and its policy language
in Firefox, and evaluation and discussion of perfor-
mance and usability
The rest of this paper is structured as follows. Section 2
sketches the necessary background, and Section 3 further
elaborates the problem statement. In Section 4, the Web-
Jail least-privilege integration architecture is presented and
its three layers are discussed in more detail. Next, the pro-
totype implementation in Firefox is described in Section 5,
followed by an experimental evaluation in Section 6 and dis-
cussion in Section 7. Finally, Section 8 discusses related
work, and Section 9 summarizes the contributions.
2. BACKGROUND
This section brieﬂy summarizes the Same-Origin Policy.
Next, Section 2.2 discusses how mashups are constructed
and gives some insights in the state-of-practice on how third-
party mashup components get integrated.
2.1 Same-Origin Policy
Currently, mashup security is based on the de facto secu-
rity policy of the web: the Same-Origin Policy (SOP) [34].
An origin is a domain name-protocol-port triple, and the
SOP states that scripts from one origin should not be able
to access content from other origins. This prevents scripts
from stealing data, cookies or login credentials from other
sites. In addition to the SOP, browsers also apply a frame
navigation policy, which restricts the navigation of frames
to its descendants [1].
Among others, the Same-Origin Policy allows a per-origin
separation of JavaScript execution contexts. Contexts are
separated based on the origin of the window’s document,
possibly relaxed via the document.domain property to a right-
hand, fully-qualiﬁed fragment of its current hostname. Within
an execution context, the SOP does not impose any addi-
tional security restriction.
2.2
Integration of mashup components
The idea behind a web mashup is to integrate several web
applications (components) and mash up their code, data and
results. The result is a new web application that is more
useful than the sum of its parts. Several publicly available
web applications [25] provide APIs that allow them to be
used as third-party components for web mashups.
To build a client-side mashup, an integrator selects the
relevant in-house and third-party components, and provides
the necessary glue code on an integrating web page to re-
trieve the third-party components from their respective ser-
vice providers and let them interact and collaborate with
each other.
As stated before, the two most-widespread techniques to
integrate third-party components into a web mashup are
through script inclusion or via (sandboxed) iframe-integration
[4, 18].
Script inclusion. HTML script tags are used to execute
JavaScript while a webpage is loading. This JavaScript code
can be located on a diﬀerent server than the webpage it is
executing in. When executing, the browser will treat the
code as if it originated from the same origin as the webpage
itself, without any restrictions of the Same-Origin Policy.
The included code executes in the same JavaScript con-
text, has access to the code of the integrating webpage and
all of its datastructures. All sensitive JavaScript operations
available to the integrating webpage are also available to the
integrated component.
(Sandboxed) iframe integration. HTML iframe tags
allow a web developer to include one document inside an-
other. The integrated document is loaded in its own envi-
ronment almost as if it were loaded in a separate browser
window. The advantage of using an iframe in a mashup
is that the integrated component from another origin is iso-
lated from the integrating webpage via the Same-Origin Pol-
icy. However, the code running inside of the iframe still has
access to all of the same sensitive JavaScript operations as
the integrating webpage, albeit limited to its own execution
context (i.e. origin). For instance, a third-party component
can use local storage APIs, but only has access to the local
storage of its own origin.
HTML 5 adds the “sandbox” attribute to the iframe ele-
ment, allowing an integrator to disable all security-sensitive
features through its “allow-scripts” keyword. Obviously, this
very coarse-grained control has only a very limited applica-
bility in a web mashup context.
3. PROBLEM STATEMENT
In this section, the attacker model is speciﬁed, as well as
two typical attack vectors. Next, the increasing impact of in-
secure mashup composition is discussed in the context of the
upcoming set of HTML5 speciﬁcations. Finally, the security
assessment is concluded by identifying the requirements for
secure mashup composition, namely the least-privilege inte-
gration of third-party mashup components.
3.1 Attacker model
Our attacker model is inspired by the deﬁnition of a gad-
get attacker in Barth et al. [1]. The term gadget in their
deﬁnition should, in the context of this paper, be read as
“third-party mashup component”.
We describe the attacker in scope as follows:
Malicious third-party component provider The attacker
is a malicious principal owning one or more machines
on the network. The attacker is able to trick the in-
tegrator in embedding a third-party component under
control of the attacker.
We assume a mashup that consists of multiple third-party
components from several service providers, and an honest
mashup consumer (i.e. end-user). A malicious third-party
component provider attempts to steal sensitive data out-
side its trust boundary (e.g.
reading from origin-speciﬁc
client-side storage), impersonate other third-party compo-
nents or the integrator (e.g.
requesting access to geolo-
cation data on behalf of the integrator) or falsely operate
on behalf of the end-user towards the integrator or other
service providers (e.g. requesting cross-application content
with XMLHttpRequest).
We have identiﬁed two possible ways in which an attacker
could present himself as a malicious third-party component
provider: he could oﬀer a malicious third-party component
towards mashup integrators (e.g. via a malicious advertise-
ment, or via a malicious clone of a popular component), or
he could hack into an existing third-party component of a
service provider and abuse the prior existing trust relation-
ship between the integrator and the service provider.
In this paper, we consider the mashup integrator as trusted
by the mashup consumer (i.e. end-user), and an attacker
has no control over the integrator, except for the attacker’s
ability to embed a third-party components of his choice. In
addition, we assume that the attacker has no special network
abilities (such as sniﬃng the network traﬃc between client
and servers), browser abilities (e.g. extension under control
of the attacker or client-side malware) and is constrained in
the browser by the Same-Origin Policy.
3.2 Security-sensitive JavaScript operations
The impact of running arbitrary JavaScript code in an in-
secure mashup composition is equivalent to acquiring XSS
capabilities, either in the context of the component’s origin,
or in the context of the integrator. For instance, a ma-
licious third-party component provider can invoke typical
security-sensitive operations such as the retrieval of cookies,
navigation of the browser to another page, launch of exter-
nal requests or access and updates to the Document Object
Model (DOM).
However, with the emerging HTML5 speciﬁcation and
APIs, the impact of injecting and executing arbitrary Java-
Script has massively increased. Recently, JavaScript APIs
have been proposed to access geolocation information and
system information (such as CPU load and ambient sensors),
to capture audio and video, to store and retrieve data from
a client-side datastore, to communicate between windows as
well as with remote servers.
As a result, executing arbitrary JavaScript becomes much
more attractive to attackers, even if the JavaScript execution
is restricted to the origin of the component, or a unique
origin in case of a sandbox.
3.3 Least-privilege integration
Taking into account the attack vectors present in current
mashup composition, and the increasing impact of such at-
tacks due to newly-added browser features, there is clearly a
need to limit the power of third-party mashup components
under control of the attacker.
Optimally, mashup components should be integrated ac-
cording to the least-privilege principle. This means that
each of the components is only granted access to data or
functionality necessary to perform its core function. This
would enable the necessary collaboration and interaction
while restricting the capabilities of untrusted third-party
components.
Unfortunately, a least-privilege integration of third-party
mashup components can not be achieved with the current
script-inclusion and iframe-integration techniques. These
techniques are too coarse-grained: either no restrictions (or
only the Same-Origin Policy) are imposed on the execution
of a third-party component,
implicitly inviting abuse, or
JavaScript is fully disabled, preventing any potential abuse
but also fully killing desired functionality.
To make sure that attackers described in Section 3.1 do
not exploit the insecure composition attack vectors and mul-
tiply their impact by using the security sensitive HTML5
APIs described in Section 3.2, the web platform needs a se-
curity architecture that supports least-privilege integration
of web components. Since client-side mashups are composed