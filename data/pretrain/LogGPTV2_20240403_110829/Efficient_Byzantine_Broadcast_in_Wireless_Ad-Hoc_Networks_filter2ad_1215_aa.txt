title:Efficient Byzantine Broadcast in Wireless Ad-Hoc Networks
author:Vadim Drabkin and
Roy Friedman and
Marc Segal
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
Efﬁcient Byzantine Broadcast in Wireless Ad-Hoc Networks∗
Vadim Drabkin Roy Friedman Marc Segal
Computer Science Department
Technion - Israel Institute of Technology
Haifa, 32000
Israel
Email:{dvadim,roy,marcs}@cs.technion.ac.il
Abstract
This paper presents an overlay based Byzantine tolerant broadcast protocol for wireless ad-hoc net-
works. The use of an overlay results in a signiﬁcant reduction in the number of messages. The protocol
overcomes Byzantine failures by combining digital signatures, gossiping of message signatures, and fail-
ure detectors. These ensure that messages dropped or modiﬁed by Byzantine nodes will be detected and
retransmitted and that the overlay will eventually consist of enough correct processes to enable message
dissemination. An appealing property of the protocol is that it only requires the existence of one cor-
rect node in each one-hop neighborhood. The paper also includes a detailed performance evaluation by
simulation.
Keywords: Byzantine failures, broadcast, ad-hoc networks, unreliable failure detectors.
∗This research was supported by the Israeli Science Foundation and by an academic grant from Intel Inc.
0
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
1 Introduction
Context of this Study: Wireless ad-hoc networks are formed when an ad-hoc collection of devices equipped
with wireless communication capabilities happen to be in proximity to each other [46]. Clearly, each pair of
such devices whose distance is less than their transmission range can communicate directly with each other.
Moreover, if some devices occasionally volunteer to act as forwarders, it is possible to form a multiple hop
ad-hoc network. An important distinguishing element of these networks from “standard” networks is that
they do not rely on any pre-existing infrastructure or management authority. Also, due to their ad-hoc nature
and device mobility, there is no sub-netting to assist routing and data dissemination decisions. Moreover,
due to mobility, the physical structure of the network is constantly evolving.
Semi-reliable broadcast is a basic service for many collaborative applications as it provides nearly re-
It ensures that most messages will be
liable dissemination of the same information to many recipients.
received by most of their intended recipients. Yet, implementing semi-reliable broadcast in an efﬁcient
manner, and in particular over a wireless ad-hoc network, is far from trivial. It involves ensuring that a
message is forwarded to all nodes as well as overcoming possible message losses.
Unlike infrastructure based networks in which routers are usually considered to be trusted entities, in
ad-hoc networks routing is performed by the devices themselves. Thus, there is a high risk that some
of the nodes of an ad-hoc network will act in a Byzantine manner, or in other words, would not respect the
networking protocols. This can be due to maliciousness, or simply selﬁshness (trying to save battery power).
Thus, the possibility of having Byzantine nodes in the system motivates the development of Byzantine
tolerant broadcast protocols for ad-hoc networks.
The simplest way to obtain broadcast in a multiple hop network is by employing ﬂooding [45]. That is,
the sender sends the message to everyone in its transmission range. Each device that receives a message for
the ﬁrst time delivers it to the application and also forwards it to all other devices in its range. While this
form of dissemination is very robust, it is also very wasteful and may cause a large number of collisions.
Hence, many multicast/broadcast protocols maintain an overlay, which can be thought of as a logical
topology superimposed over the physical one, e.g., [25, 40, 47, 48]. The overlay typically covers all nodes,
yet each node has a limited number of neighbors. Given an overlay, broadcast messages are ﬂooded only
along the arcs of the overlay, thereby reducing the number of messages sent as well as the number of
collisions. The overlay composition and structure may be determined by either deterministic or probabilistic
methods, and they can change dynamically over time.
On the other hand, having an efﬁcient overlay reduces the robustness of the broadcast protocol against
failures, and in particular against Byzantine behavior of overlay nodes. One way around this is to maintain
f + 1 node independent overlays, where f is the assumed maximal number of Byzantine devices, and ﬂood
each message along each of these overlays, guaranteeing that each message will eventually arrive despite
possible Byzantine nodes [15, 34, 36].
Of course, the price paid by this approach is that every message has to be sent f + 1 times even if in
practice none of the devices suffered from a Byzantine fault. In this paper we propose an approach that
reduces this overhead to a single overlay when there are no Byzantine failures.
Contribution of this Work: This paper presents an efﬁcient Byzantine tolerant broadcast protocol for
wireless ad-hoc networks. The protocol is based on the following principles: The protocol employs an
overlay on which messages are disseminated. In parallel, signatures about these messages are being gossiped
by all nodes in the system in an unstructured manner. This allows all nodes to learn about the existence of
a message even if some of the overlay nodes fail to forward them, e.g., if they are Byzantine or due to
1
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
collisions. When a node learns about a message it is missing, it requests the missing message from another
node that has it. The beneﬁt of this approach comes from the fact that message signatures are typically much
smaller than the messages themselves. Moreover, as gossips are sent periodically, multiple gossip messages
are aggregated into one packet, thereby greatly reducing the number of messages generated by the protocol.
Additionally, the protocol employs several failure detectors in order to eliminate from the overlay nodes
that act a noticeable Byzantine manner. Speciﬁcally, we rely on a mute failure detector, a verbose failure
detector, and a trust failure detector. The mute failure detector detects when a process has failed to send a
message with an expected header [17, 18]. The verbose failure detector detects when a node sends messages
too often. Finally, the trust failure detector reports suspicions of a faulty behavior of nodes based on the
other two failure detectors and the history of nodes.1
An interesting property of the failure detectors we use is that they only detect benign failures, such
as a failure to send a message with an expected header, sending too many messages, or trying to forge a
signed message. They do not detect, for example, sending messages with inconsistent data, or sending mes-
sages with different data to different processes. Thus, their properties can be detected locally and they can
be implemented in an eventually synchronous environment, such as the timed-asynchronous model [16],
regardless of the ratio between the number of Byzantine processes and the entire set of processes. Interest-
ingly, combining this with signatures on messages is enough to overcome Byzantine failures.
An important aspect of our failure detector based approach is its modularity, as they encapsulate timing
requirements behind a timeless functional speciﬁcation. The use of failure detectors greatly simpliﬁes the
protocol’s structure and enables us to present it with an asynchronous design. This is often considered more
elegant and robust than synchronous alternatives, in which timing assumptions are explicit.
The result is a protocol that sends a small number of messages when all nodes behave correctly most of
the time. The paper also includes a detailed performance evaluation carried by simulation.
Paper’s road-map: The model and basic deﬁnitions and assumptions are described in Section 2. Section 3
describes the protocol and its proof of correctness, while Section 4 elaborate on the overlay construction.
The results of the performance evaluation are given in Section 5. Section 6 compares our work with related
work. We conclude with a discussion in Section 7.
2 System Model and Deﬁnitions
In this work we focus on wireless mobile systems. Speciﬁcally, we assume a collection of nodes placed in
a given ﬁnite size area. A node in the system is a device owning an omni-directional antenna that enables
wireless communication. A transmission of a node p can be received by all nodes within a disk centered
on p whose radius depends on the transmission power, referred to in the following as the transmission disk;
the radius of the transmission disk is called the transmission range. The combination of the nodes and the
transitive closure of their transmission disks forms a wireless ad-hoc network.2
We denote the transmission range of device p by rp. This means that a node q can only receive messages
sent by p if the distance between p and q is smaller than rp. A node q is a direct neighbor of another node p
1Notice that standard deﬁnitions of failure detectors require some properties to hold forever. However, this can be bounded
along the lines of [23].
2In practice, the transmission range does not behave exactly as a disk due to various physical phenomena. However, for the
description of the protocol it does not matter, and on the other hand, a disk assumption greatly simpliﬁes the formal model. At
any event, our simulation results are carried on a simulator that simulates a real transmission range behavior including distortions,
background noise, etc.
2
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
if q is located within the transmission disk of p. In the following, N (1, p) refers to the set of direct neighbors
of a node p and N (k, p) refers to the transitive closure with length k of N (1, p). By considering N (1, p) as
a relation (deﬁning the set N (1, p)), we say that a node p has a path to a node q if q appears in the transitive
closure of the N (1, p) relation.
As nodes can physically move, there is no guarantee that a neighbor q of p at time t will remain in the
transmission disk of p at a later time t′ > t. Additionally, messages can be lost. For example, if two nodes
p and q transmit a message at the same time, then if there exists a node r that is a direct neighbor of both,
then r will not receive either message, in which case we say that there was a collision. Yet, we assume that
a message is delivered with positive probability.
Each device p holds a private key kp, known only to itself, with which p can digitally sign every message
it sends [44]. It is also assumed that each device can obtain the public key of every other device, and can
thus authenticate the sender of any signed message.
Finally, we assume an abstract entity called an overlay, which is simply a collection of nodes. Nodes
that belong to the overlay are called overlay nodes. Nodes that do not belong to the overlay are called
non-overlay nodes. In the following OV ERLAY refers to the set of nodes that belong to the overlay and
OL(1, p) ≡ N (1, p) T OV ERLAY (the neighbors of p that belong to the overlay). Later in this paper we
give examples of a couple of known overlay maintenance protocols that we adapted to our environment.
2.1 Byzantine Failures
Up to f out of the total of n nodes in the system may be Byzantine, meaning that they can arbitrarily deviate
from their protocol. In particular, Byzantine processes may fail to send messages, send too many messages,
send messages with false information, or send messages with different data to different nodes. We also
assume that correct and Byzantine processes are spread such that the transitive closure of the transmission
disks of correct nodes form a connected graph (clearly, without this assumption, it is impossible to ensure
dissemination of messages to all correct nodes).
Yet, a node cannot impersonate to another node, which is achieved using digital signatures [44].3 Nodes
that follow their protocol are called correct. If a node is correct, then it is presumed to be correct throughout
the execution of the protocol. A node p that sends a message m is called the originator of m. We denote
sig(m) to be the cryptographic signature of a message m.
2.2 Failure Detectors and Nodes’ Architecture
As already mentioned in the Introduction, we assume that each node is equipped with three types of failure
detectors, MUTE, VERBOSE, and TRUST (see also illustration in Figure 1). In this work we assume that
each message has a header part and a data part. The header part can be anticipated based on local infor-
mation only while the data part cannot. For example, the type of message (application data, gossip, request
for retransmission, etc.), the id of the originator, and a sequence number of the message are part of the
header. On the other hand, the information that the application level intended to send, or the actual gossiped
information, is part of the data.
Based on this, we deﬁne a mute failure as failure to send a message with an expected header. Similarly, a
verbose failure is sending messages too often. Note that both types of failures can be detected accurately in
a synchronous system based on local knowledge only. This is because in synchronous systems each message
3In the implementation of our protocol we use the DSA protocol [44]. Due to space limitations, we do not repeat a discussion
about the infrastructure required for this, as this is can be found in many papers and text-books on the use of cryptography.
3
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
appl
VERBOSE
MUTE
TRUST
overlay
network
multicast
FD interceptor
Figure 1: Node Architecture
B
y
z
a
n
t
i
n
e
B
r
o
a
d
c
a
s
t
M
e
c
h
a
n
i
s
m
has a known bounded deadline, so it is possible to tell that a message is missing. Similarly, it is possible to
accurately measure the rate of messages received and verify that it is below an agreed upon threshold.
Obtaining synchronous communication in ad-hoc networks with standard hardware and operating sys-
tems is extremely difﬁcult. On the other hand, observations of communication networks indicate that they
tend to behave in a timely manner for large fractions of the time. This is captured by the notion of the class
♦P mute of failure detectors [5, 17, 18, 24]. Such failure detectors are assumed to eventually (i.e., during
periods of timely network behavior) detect mute failures accurately. In this eventuality, all nodes that suffer
a mute failure are suspected (known as completeness) and only such nodes are suspected (known as accu-
racy). This approach has the beneﬁt that all synchrony assumptions are encapsulated behind the functional
speciﬁcation of the failure detector (i.e., its ability to eventually detect mute failures in an accurate manner).
This also frees protocols that are based on such failure detectors from the implementation details related to
timers and timeouts, thus making them both more general and more robust.
In a similar manner to ♦P mute, we can deﬁned ♦P verbose as a class of failure detectors that eventually
reliably detect verbose failure. We assume that the failure detector MUTE is in the class ♦P mute while
VERBOSE is in the class ♦P verbose.
The failure detector TRUST collects the reports of MUTE and VERBOSE, as well as detections of mes-
sages with bad signatures and other locally observable deviations from the protocol.
In return, TRUST
maintains a trust level for each neighboring node. This information is being fed into the overlay, as illus-
trated in Figure 1. As we describe later in the paper, the information obtained from TRUST is used to ensure
that there are enough correct nodes in the overlay so that the correct nodes of the overlay form a connected
graph and that each correct node is within the transmission disk of an overlay node that does not exhibit
detectable Byzantine behavior.
2.3 The Broadcast Problem
Intuitively, the broadcast problem states that a message sent by a correct node should usually be delivered
to all correct nodes. We capture this by the eventual dissemination and the validity properties. The eventual
dissemination property speciﬁes the ability of a protocol to disseminate the message to all the nodes in the
system. The validity property speciﬁes that when a correct node accepts a message, then this message was
indeed generated by the claimed originator.
Formally, we assume a primitive broadcast(p, m) that can be invoked by a node p in order to dis-
4
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t