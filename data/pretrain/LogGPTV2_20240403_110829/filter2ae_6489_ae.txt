                [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
    key1 = []
    key2 = []
    key3 = []
    key4 = []
    key5 = []
    key6 = []
    key7 = []
    key8 = []
    def cryptanalysis(key_poss1, key_poss2, key_poss3):
        for j in range(4):
            for k in range(4):
                if key_poss1[0][0] == key_poss2[0][j] == key_poss3[0][k] or key_poss1[0][1] == key_poss2[0][j] == \
                        key_poss3[0][k] or \
                        key_poss1[0][2] == key_poss2[0][j] == key_poss3[0][k] or key_poss1[0][3] == key_poss2[0][j] == \
                        key_poss3[0][k]:
                    key1.append(key_poss2[0][j])
                    # if len(key1) == 1:
                    #print("key1:", key1)
                if key_poss1[1][0] == key_poss2[1][j] == key_poss3[1][k] or key_poss1[1][1] == key_poss2[1][j] == \
                        key_poss3[1][k] or \
                        key_poss1[1][2] == key_poss2[1][j] == key_poss3[1][k] or key_poss1[1][3] == key_poss2[1][j] == \
                        key_poss3[1][k]:
                    key2.append(key_poss2[1][j])
                    # if len(key2) == 1:
                    #print("key2:", key2)
                if key_poss1[2][0] == key_poss2[2][j] == key_poss3[2][k] or key_poss1[2][1] == key_poss2[2][j] == \
                        key_poss3[2][k] or key_poss1[2][2] == key_poss2[2][j] == key_poss3[2][k] or key_poss1[2][3] == \
                        key_poss2[2][j] == key_poss3[2][k]:
                    key3.append(key_poss2[2][j])
                    # if len(key3) == 1:
                    #print("key3:", key3)
                if key_poss1[3][0] == key_poss2[3][j] == key_poss3[3][k] or key_poss1[3][1] == \
                        key_poss2[3][j] == key_poss3[3][k] or key_poss1[3][2] == key_poss2[3][j] == \
                        key_poss3[3][k] or key_poss1[3][3] == key_poss2[3][j] == key_poss3[3][k]:
                    key4.append(key_poss2[3][j])
                    # if len(key4) == 1:
                    #print("key4:", key4)
                if key_poss1[4][0] == key_poss2[4][j] == key_poss3[4][k] or key_poss1[4][1] == \
                        key_poss2[4][j] == key_poss3[4][k] or key_poss1[4][2] == key_poss2[4][j] == key_poss3[4][k] \
                        or key_poss1[4][3] == key_poss2[4][j] == key_poss3[4][k]:
                    key5.append(key_poss2[4][j])
                    # if len(key5)==1:
                    #print("key5:", key5)
                if key_poss1[5][0] == key_poss2[5][j] == key_poss3[5][k] or key_poss1[5][1] == \
                        key_poss2[5][j] == key_poss3[5][k] or key_poss1[5][2] == \
                        key_poss2[5][j] == key_poss3[5][k] or key_poss1[5][3] == \
                        key_poss2[5][j] == key_poss3[5][k]:
                    key6.append(key_poss2[5][j])
                    # if len(key6)==1:
                    #print("key6:", key6)
                if key_poss1[6][0] == key_poss2[6][j] == key_poss3[6][k] or \
                        key_poss1[6][1] == key_poss2[6][j] == key_poss3[6][k] or \
                        key_poss1[6][2] == key_poss2[6][j] == key_poss3[6][k] or \
                        key_poss1[6][3] == key_poss2[6][j] == key_poss3[6][k]:
                    key7.append(key_poss2[6][j])
                    # if len(key7) == 1:
                    #print("key7:", key7)
                if key_poss1[7][0] == key_poss2[7][j] == key_poss3[7][k] or \
                        key_poss1[7][1] == key_poss2[7][j] == key_poss3[7][k] or \
                        key_poss1[7][2] == key_poss2[7][j] == key_poss3[7][k] or \
                        key_poss1[7][3] == key_poss2[7][j] == key_poss3[7][k]:
                    key8.append(key_poss2[7][j])
                    #print("key8:", key8)
                    #print("key zhaodaol")
        key_real[0] = key1[0]
        key_real[1] = key2[0]
        key_real[2] = key3[0]
        key_real[3] = key4[0]
        key_real[4] = key5[0]
        key_real[5] = key6[0]
        key_real[6] = key7[0]
        key_real[7] = key8[0]
    if __name__ == '__main__':
        plaintext1 = "4845AB454511C0F0"
        miwen1 = "2EA85F08AA80C2D2"
        plaintext2 = "0123456789ABCDEF"
        miwen2 = "0293A8B9E45FCE5D"
        plaintext3 = "81120015A001FDF1"
        miwen3 = "E88382207800FE7A"
        plaintext1 = input("请输入第一组明文：")
        miwen1 = input("请输入第一组密文：")
        plaintext2 = input("请输入第二组明文：")
        miwen2 = input("请输入第一组密文：")
        plaintext3 = input("请输入第三组明文：")
        miwen3 = input("请输入第一组密文：")
        key_poss1 = key_poss(plaintext1, miwen1, 1)
        key_poss2 = key_poss(plaintext2, miwen2, 2)
        key_poss3 = key_poss(plaintext3, miwen3, 3)
        #print(key_poss1[0],key_poss2[0],key_poss3[0],sep='\n')
        cryptanalysis(key_poss1, key_poss2, key_poss3)
        # miyao = twoto16(key_real)
        print("经过差分密码分析得知，密钥为：\n", key_real)
        # #print("miyao:",miyao)
### 24 素数
难度：入门  
该题主要考察大素数检测的知识，根据费马小定理设计的rabin_Miller算法是效率最高的算法之一，虽然并不能100%保证通过检测的数一定是素数（比如561，伪质数），但是再添加足够多的底数后，是可以保证通过检测的数绝大概率可用的（伪质数出现概率大概为2的100次方分之一），该素性检测算法现如今应用于各类加密算法。顺道一提，另一种可以确定性检测素性（不会出现误测）的AKS素性检测的基本理念也是费马小定理，只是在多项式的时间复杂度内排除掉了被检测数是所有种类的伪质数的情况。  
脚本如下：
    import random
    def rabin_miller(num):
        s = num - 1
        t = 0
        while s % 2 == 0:
            s = s // 2
            t += 1
        for trials in range(5):
            a = random.randrange(2, num - 1)
            v = pow(a, s, num)
            if v != 1:
                i = 0
                while v != (num - 1):
                    if i == t - 1:
                        return False
                    else:
                        i = i + 1
                        v = (v ** 2) % num
        return True
    def is_prime(num):
        # 排除0,1和负数
        if num  0:
            print(is_prime(a))
### 25 键盘侠
根据给出的文字  
对应键盘上的按键画图案  
对应字符分别为  
C L C K O U T H K  
根据要求得到flag  
flag{CLCKOUTHK}
### 26 silent_peeper
sage已经封装好了这个攻击，得到a,b后算出key进行AES解密即可
    p = 174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843
    g = 41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977
    A = 142989488568573584455487421652639325256968267580899511353325709765313839485530879575182195391847106611058986646758739505820350416810754259522949402428485456431884223161690132385605038767582431070875138678612435983425500273038807582069763455994486365993366499478412783220052753597397455113133312907456163112016L
    B = 16631700400183329608792112442038543911563829699195024819408410612490671355739728510944167852170853457830111233224257622677296345757516691802411264928943809622556723315310581871447325139349242754287009766402650270061476954875266747743058962546605854650101122523183742112737784691464177427011570888040416109544L
    k = GF(p)
    a = discrete_log_lambda(k(A),k(g),(2**39,2**40))
    b = discrete_log_lambda(k(B),k(g),(2**39,2**40))
    print(a)
    print(b)
### 27 Neo-reGeorg
Neo-reGeorg 使用的一种简单的base64换表加密 这种方法在已知明文的时候十分脆弱  
使用提供的日志很容易拼出第一个http请求的部分开头明文(注意流量换行使用的是\n\r)
    GET / HTTP/1.1
    Host: 192.168.234.176
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0
使用base64编码后与密文对比 可以还原出大部分映射表  
剩余的少量映射关系可以通过爆破得出  
拿到表后即可完整解密通信流量得到flag