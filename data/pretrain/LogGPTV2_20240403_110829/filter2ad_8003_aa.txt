在Web中，session是认证用户身份的凭证，它具备如下几个特点：
  1. 用户不可以任意篡改
  2. A用户的session无法被B用户获取
也就是说，session的设计目的是为了做用户身份认证。但是，很多情况下，session被用作了别的用途，将产生一些安全问题，我们今天就来谈谈“客户端session”（client
session）导致的安全问题。
## 0x01 什么是客户端session
在传统PHP开发中，`$_SESSION`变量的内容默认会被保存在服务端的一个文件中，通过一个叫“PHPSESSID”的Cookie来区分用户。这类session是“服务端session”，用户看到的只是session的名称（一个随机字符串），其内容保存在服务端。
然而，并不是所有语言都有默认的session存储机制，也不是任何情况下我们都可以向服务器写入文件。所以，很多Web框架都会另辟蹊径，比如Django默认将session存储在数据库中，而对于flask这里并不包含数据库操作的框架，就只能将session存储在cookie中。
因为cookie实际上是存储在客户端（浏览器）中的，所以称之为“客户端session”。
## 0x02 保护客户端session
将session存储在客户端cookie中，最重要的就是解决session不能被篡改的问题。
我们看看flask是如何处理的：
    class SecureCookieSessionInterface(SessionInterface):
        """The default session interface that stores sessions in signed cookies
        through the :mod:`itsdangerous` module.
        """
        #: the salt that should be applied on top of the secret key for the
        #: signing of cookie based sessions.
        salt = 'cookie-session'
        #: the hash function to use for the signature. The default is sha1
        digest_method = staticmethod(hashlib.sha1)
        #: the name of the itsdangerous supported key derivation. The default
        #: is hmac.
        key_derivation = 'hmac'
        #: A python serializer for the payload. The default is a compact
        #: JSON derived serializer with support for some extra Python types
        #: such as datetime objects or tuples.
        serializer = session_json_serializer
        session_class = SecureCookieSession
        def get_signing_serializer(self, app):
            if not app.secret_key:
                return None
            signer_kwargs = dict(
                key_derivation=self.key_derivation,
                digest_method=self.digest_method
            )
            return URLSafeTimedSerializer(app.secret_key, salt=self.salt,
                                          serializer=self.serializer,
                                          signer_kwargs=signer_kwargs)
        def open_session(self, app, request):
            s = self.get_signing_serializer(app)
            if s is None:
                return None
            val = request.cookies.get(app.session_cookie_name)
            if not val:
                return self.session_class()
            max_age = total_seconds(app.permanent_session_lifetime)
            try:
                data = s.loads(val, max_age=max_age)
                return self.session_class(data)
            except BadSignature:
                return self.session_class()
        def save_session(self, app, session, response):
            domain = self.get_cookie_domain(app)
            path = self.get_cookie_path(app)
            # Delete case. If there is no session we bail early.
            # If the session was modified to be empty we remove the
            # whole cookie.
            if not session:
                if session.modified:
                    response.delete_cookie(app.session_cookie_name,
                                           domain=domain, path=path)
                return
            # Modification case. There are upsides and downsides to
            # emitting a set-cookie header each request. The behavior
            # is controlled by the :meth:`should_set_cookie` method
            # which performs a quick check to figure out if the cookie
            # should be set or not. This is controlled by the
            # SESSION_REFRESH_EACH_REQUEST config flag as well as
            # the permanent flag on the session itself.
            if not self.should_set_cookie(app, session):
                return
            httponly = self.get_cookie_httponly(app)
            secure = self.get_cookie_secure(app)
            expires = self.get_expiration_time(app, session)
            val = self.get_signing_serializer(app).dumps(dict(session))
            response.set_cookie(app.session_cookie_name, val,
                                expires=expires, httponly=httponly,
                                domain=domain, path=path, secure=secure)
主要看最后两行代码，新建了`URLSafeTimedSerializer`类
，用它的`dumps`方法将类型为字典的session对象序列化成字符串，然后用`response.set_cookie`将最后的内容保存在cookie中。
那么我们可以看一下`URLSafeTimedSerializer`是做什么的：
    class Signer(object):
        # ...
        def sign(self, value):
            """Signs the given string."""
            return value + want_bytes(self.sep) + self.get_signature(value)
        def get_signature(self, value):
            """Returns the signature for the given value"""
            value = want_bytes(value)
            key = self.derive_key()
            sig = self.algorithm.get_signature(key, value)
            return base64_encode(sig)
    class Serializer(object):
        default_serializer = json
        default_signer = Signer
        # ....
        def dumps(self, obj, salt=None):
            """Returns a signed string serialized with the internal serializer.
            The return value can be either a byte or unicode string depending
            on the format of the internal serializer.
            """
            payload = want_bytes(self.dump_payload(obj))
            rv = self.make_signer(salt).sign(payload)
            if self.is_text_serializer:
                rv = rv.decode('utf-8')
            return rv
        def dump_payload(self, obj):
            """Dumps the encoded object. The return value is always a
            bytestring. If the internal serializer is text based the value
            will automatically be encoded to utf-8.
            """
            return want_bytes(self.serializer.dumps(obj))
    class URLSafeSerializerMixin(object):
        """Mixed in with a regular serializer it will attempt to zlib compress
        the string to make it shorter if necessary. It will also base64 encode
        the string so that it can safely be placed in a URL.
        """
        def load_payload(self, payload):
            decompress = False
            if payload.startswith(b'.'):
                payload = payload[1:]
                decompress = True
            try:
                json = base64_decode(payload)
            except Exception as e:
                raise BadPayload('Could not base64 decode the payload because of '
                    'an exception', original_error=e)
            if decompress:
                try:
                    json = zlib.decompress(json)
                except Exception as e:
                    raise BadPayload('Could not zlib decompress the payload before '
                        'decoding the payload', original_error=e)
            return super(URLSafeSerializerMixin, self).load_payload(json)
        def dump_payload(self, obj):
            json = super(URLSafeSerializerMixin, self).dump_payload(obj)
            is_compressed = False
            compressed = zlib.compress(json)
            if len(compressed) < (len(json) - 1):
                json = compressed
                is_compressed = True
            base64d = base64_encode(json)
            if is_compressed: