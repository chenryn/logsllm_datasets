or send traffic over a network.
4.2 Online points-to analysis
The analyzer module executes in a process distinct from
the process in which the monitored process executes. Be-
fore monitoring a run of the program, the analyzer is given
the monitored program’s LLVM IR and meta information
about mapping between IR and binary code. At runtime,
the analyzer receives the next control-transfer target taken
by the protected program from the monitor module, and
either chooses to raise an alarm signaling that the con-
trol transfer taken would violate path-sensitive CFI, or
updates its state and allows the original program to take
its next step of execution.
The updated states contain two components: (1) the
callstack of instructions being executed (i.e., the pc’s) and
(2) points-to relations over models of memory cells that
are control relevant only. The online points-to analysis
addresses the limitations of conventional points-to anal-
yses. In particular, it reasons precisely about the calling
context of the monitored program by maintaining a stack
of register frames. It avoids maintaining constraints over
pairs of pointer variables by eagerly evaluating the sets of
cells and instruction addresses that may be stored in each
register and cell. It updates this information efficiently in
response to program actions by performing updates on a
single register frame and removing register frames when
variables leave scope on return from a function call.
In general, a program may store function pointers in
arbitrarily, dynamically allocated data structures before
eventually loading the pointer and using it as the target
of an indirect control transfer. If the analyzer were to
maintain precise information about the points-to relation
of all heap cells, then it would maintain a large amount
of information never used and incur a significant cost to
performance. We have significantly optimized PITTYPAT
by performing aggressive analyses of a given program P
offline, before monitoring the execution of P on a given
input. PITTYPAT runs an analyzer developed in previous
work on code-pointer integrity (CPI) [17] to collect a
sound over-approximation of the instructions in a program
that may affect a code pointer used as the target of a
control transfer. At runtime, the analyzer only analyzes
instructions that are control relevant as determined by its
offline phase.
A program may contain many functions that perform
no operations on data structures that indirectly contain
code pointers, and do not call any functions that perform
such operations. We optimized PITTYPAT by applying
an offline analysis based on a sound approximation of
the program’s call graph to identify all such functions.
At runtime, PITTYPAT only analyzes functions that may
indirectly perform relevant operations.
To illustrate the analyzer’s workflow, consider the exe-
cution path [L10, L12, L16, 19, L22] in Figure 1 as an exam-
ple. Initially, the analyzer knows that the current instruc-
tion being executed is L10, and the points-to table is empty.
The analyzer then receives a taken TNT packet, and so it
updates the pc to L12, which calls a non-sensitive function
parse_request. However instead of tracing instructions
in parse_request, the analyzer waits until receiving a
TIP packet signaling the return from parse_request be-
fore continue its analysis. Next, it updates the pc to L16
after receiving a non-taken TNT packet, which indicates
that the else branch is taken. Here, the analyzer updates
the points-to table to allow handler to point to unpriv
when it handles L16. Because the program also calls a
non-sensitive function at L19, the analyzer waits again
and updates the pc to L22 only after receiving another
TIP packet. Finally, at L22, the analyzer waits for a TIP
packet at the indirect call, and checks whether the target
address collected by the monitor module is consistent
with the value pointed by handler in the points-to table.
In this case, if the address in the received TIP packet is
not unpriv, the analyzer throws an alarm.
We have described the analyzer as validating taken con-
trol branches and eagerly throwing alarms when it detects
an incorrect branch in order to simplify its description.
USENIX Association
26th USENIX Security Symposium    137
The actual implementation of the analyzer only provides
such an alarm in response to a request from PITTYPAT’s
kernel module when a monitored process attempts to in-
voke a system call, as described in §5.1.
5
Implementation
5.1 Monitor module
PITTYPAT controls the Intel PT extension and collects an
execution trace from a monitored program by adapting
the Linux v4.4 perf infrastructure. Because perf was
originally designed to aid debugging, the original version
provided with Linux 4.4 only supports decoding and pro-
cessing traces offline. In the original implementation, the
perf kernel module continuously outputs packets of PT
trace information to the file system in user space as a log
file to be consumed later by a userspace program. Such
a mechanism obviously cannot be used directly within
PITTYPAT, which must share branch information at a
speed that allows it to be run as an online monitor.
We modified the kernel module of perf, which be-
gins and ends collection of control targets taken after
setting a target process to trace, allocates a ring buffer
in which it shares control branches taken with the ana-
lyzer, and monitors the amount of space remaining in
the shared buffer. The module also notifies the analyzer
when taken branches are available in its buffer, along with
how many chosen control targets are available. The no-
tification mechanism reuses the pseudo-file interface of
the perf kernel module. The analyzer creates one thread
to wait (i.e., poll) on this file handler for new trace data.
Once woken up by the kernel, it fetches branches from
the shared ring buffer with minimal latency.
System calls are intercepted by a modified version of
the system-call mechanism provided by the Linux ker-
nel. When the monitored process is created, it—along
with each of its sub-processes and threads created later—
is flagged with a true value in a PT_CPV field of its
task_struct in kernel space. When the kernel receives a
request for a system call, the kernel checks if the request-
ing process is flagged. If so, the kernel inspects the value
in register rax to determine if it belongs to the configured
list of marked system calls as described in §4.1. The
interception mechanism is implemented as a semaphore,
which blocks the system call from executing further code
in kernel space until the analyzer validates all branches
taken by the monitored process and signals the kernel.
The driver module and modifications to the kernel con-
sist of approximately 400 lines of C code.
5.2 Analyzer module
PITTYPAT’s analyzer module is implemented as two core
components. The first component consists of a LLVM
compiler pass, implemented in 500 lines, that inserts an
instruction at the beginning of each basic block before the
IR is translated to binary instructions. Such instructions
are used to generate a map from binary basic blocks to
LLVM IR basic blocks. Thus when PITTYPAT receives
a TNT packet for certain conditional branch, it knows the
corresponding IR basic block that is the target of the
control transfer. The inserted instructions are removed
when generating binary instructions; therefore no extra
overhead is introduced to the running program.
The second component, implemented in 5,800 lines
C++ code, performs a path-sensitive points-to analysis
over the control path taken by the monitored process, and
raises an error if the monitored process ever attempts to
transfer control to a branch not allowed by path-sensitive
CFI. Although the analysis inspects only low-level code,
it directly addresses several challenges in analyzing code
compiled from high-level languages. First, to analyze
exception-handling by a C++ program, which unwinds
stack frames without explicit calls to return instructions,
the analyzer simply consumes the received TNT packets
generated when the program compares the exception type
and updates the pc to the relevant exception handler.
To analyze a dynamic dispatch performed by a C++
program, the analyzer uses its points-to analysis to deter-
mine the set of possible objects that contain the vtable at
each dynamic-dispatch callsite. The analyzer validates
the dispatch if the requested control target stored in a
given TIP packet is one of the members of the object from
which the call target is loaded. At each call to setjmp, the
analyzer stores all possible setjmp buffer cells that may
be used as arguments to setjmp, along with the instruction
pointer at which setjmp is called, in the top stack frame.
At each call to longjmp, the analyzer inspects the target
T of the indirect call and unwinds its stack until it finds a
frame in which setjmp was called at T, with the argument
buffer of longjmp may have been the buffer passed as an
argument to setjmp.
6 Evaluation
We performed an empirical evaluation to answer the fol-
lowing experimental questions. (1) Are benign applica-
tions transformed to satisfy path-sensitive CFI less sus-
ceptible to an attack that subverts their control security?
(2) Do applications that are explicitly written to perform
malicious actions that satisfy weaker versions of CFI fail
to satisfy path-sensitive CFI? (3) Can PITTYPAT enforce
path-sensitive CFI efficiently?
To answer these questions, we used PITTYPAT to en-
138    26th USENIX Security Symposium
USENIX Association
force path-sensitive CFI on a set of benchmark programs
and workloads, including both standard benign applica-
tions and applications written explicitly to conceal ma-
licious behavior from conventional CFI frameworks. In
summary, our results indicate that path-sensitive CFI pro-
vides a stronger security guarantee than state-of-the-art
CFI mechanisms, and that PITTYPAT can enforce path-
sensitive CFI while incurring overhead that is acceptable
in security-critical contexts.
6.1 Methodology
We collected a set of benchmarks, each described in detail
in §6.2. We compiled each benchmark with LLVM 3.6.0,
and ran them on a set of standard workloads. During
each run of the benchmark, we measured the time used by
the program to process the workload. If a program con-
tained a known vulnerability that subverted conventional
CFI, then we ran the program on inputs that triggered
such a vulnerability as well, and observed if PITTYPAT
determined that control-flow was subverted along the exe-
cution. Over a separate run, at each control branch taken
by the program, we measured the size of the points-to set
of the register that stored the target of the control transfer.
We then built each benchmark to run under a state-of-
the-art CFI framework implemented in previous work,
π-CFI [26]. While π-CFI validates control targets per
control location, it instruments a subject program so that
control edges of the program are disabled by default, and
are only enabled as the program executes particular trig-
gering actions (e.g., a function can only be called after its
address is taken). It thus allows sets of transfer targets that
are no larger than those allowed by conventional imple-
mentations of CFI, and are often significantly smaller [26].
For each benchmark program and workload, we observed
whether π-CFI determined that the control-flow integrity
of the program was subverted while executing the work-
load and measured the runtime of the program while ex-
ecuted under π-CFI. We compared PITTYPAT to π-CFI
because it is the framework most similar to PITTYPAT
in concept: it validates control-transfer targets based not
only on the results of a static points-to analysis, but col-
lecting information about the program’s dynamic trace.
6.2 Benchmarks
To evaluate the ability of PITTYPAT to protect long-
running, benign applications, and to evaluate the over-
head that it incurs at runtime, we evaluated it on the
SPEC CPU2006 benchmark suite, which consists of 162
C/C++ benchmarks. We ran each benchmark three times
2We
include
447.dealII,
don’t
and
483.xalancbmk because their LLVM IR cannot be completely
mapped to the binary code.
471.omnetpp,
over its provided reference workload. For each run, we
measured the runtime overhead imposed by PITTYPAT
and the number of control targets allowed at each indirect
control transfer, including both indirect calls and returns.
We also evaluated PITTYPAT on the NGINX server—a
common performance macro benchmark, configured to
run with multiple processes.
To evaluate PITTYPAT’s ability to enforce end-to-end
control security, we evaluated it on a set of programs ex-
plicitly crafted to contain control vulnerabilities, both as
analysis benchmarks and in order to mount attacks on crit-
ical applications. In particular, we evaluated PITTYPAT
on programs in the RIPE benchmark suite [39], each
of which contains various vulnerabilities that can be
exploited to subvert correct control flow (e.g. Return-
Oriented Programming (ROP) or Jump-oriented Program-
ming (JOP)). We compiled 264 of its benchmarks in our
x64 Linux test environment and evaluated PITTYPAT on
each. We also evaluated PITTYPAT on a program that im-
plements a proof-of-concept COOP attack [32], a novel
class of attacks on the control-flow of programs written in
object-oriented languages that has been used to success-
fully mount attacks on the Internet Explorer and Firefox
browsers. We determined if PITTYPAT could block the
attack that the program attempted to perform.
6.3 Results
6.3.1 Protecting benign applications
Figure 3 contains plots of the control-transfer targets al-
lowed by π-CFI and PITTYPAT over runs of example
benchmarks selected from §6.2. In the plots, each point
on the x-axis corresponds to an indirect control transfer in
the run. The corresponding value on the y-axis contains
the number of control targets allowed for the transfer.
Previous work on CFI typically reports the average
indirect-target reduction (AIR) of a CFI implementation;
we computed the AIR of PITTYPAT. However, the re-
sulting data does not clearly illustrate the difference be-
tween PITTYPAT and alternative approaches, because all
achieve a reduction in branch targets greater than 99%
out of all branch targets in the program. This is consistent
with issues with AIR as a metric established in previous
work [4]. Figure 3, instead, provides the absolute mag-
nitudes of points-to sets at each indirect control transfer
over an execution.
Figure 3a contains a Cumulative Distribution Graph
(CDF) of all points-to sets at forward (i.e., jumps and
calls) indirect control transfers of size no greater than
40 when running 403.gcc under π-CFI and PITTYPAT.
We used a CDF over a portion of the points-to sets in or-
der to display the difference between the two approaches
in the presence of a small number of large points-to sets,
USENIX Association
26th USENIX Security Symposium    139
(a) Partial CDF of allowed targets on forward edges taken by 403.gcc.
(b) π-CFI points-to set of backward edges taken by 403.gcc.
(c) π-CFI and PITTYPAT points-to sets for forward edges taken by
444.namd.
(d) π-CFI points-to sets for backward edges taken by 444.namd.
Figure 3: Control-transfer targets allowed by π-CFI and PITTYPAT over 403.gcc and 444.namd.
explained below. Figure 3a shows that PITTYPAT can con-
sistently maintain significantly smaller points-to sets for
forward edges than that of π-CFI, leading to a stronger
security guarantee. Figure 3a indicates that when pro-
tecting practical programs, an approach such as π-CFI
that validates per location allows a significant number of
transfer targets at each indirect callsite, even using dy-
namic information. In comparison, PITTYPAT uses the
entire history of branches taken to determine that at the
vast majority of callsites, only a single address is a valid
target. The difference in the number of allowed targets
can be explained by the different heuristics adopted in π-
CFI, which monotonically accumulates allowed points-to
targets without any disabling schemes once targets are
taken, and the precise, context-sensitive points-to analysis
implemented in PITTYPAT. Similar difference between
π-CFI and PITTYPAT can also be found in all other C
benchmarks from SPEC CPU2006.
For the remaining 4% of transfers not included in Fig-
ure 3a, both π-CFI and PITTYPAT allowed up to 218
transfer targets; for each callsite, PITTYPAT allowed no
more targets than π-CFI. The targets at such callsites
are loaded from vectors and arrays of function pointers,
which PITTYPAT’s current points-to analysis does not
reason about precisely. It is possible that future work on
a points-to analysis specifically designed for reasoning
precisely about such data structures over a single path
of execution—a context not introduced by any previous
work on program analysis for security—could produce
significantly smaller points-to sets.
A similar difference between π-CFI and PITTYPAT is
demonstrated by the number of transfer targets allowed
for other benchmarks. In particular, Figure 3c contains
similar data for the 444.namd benchmark. 444.namd, a
C++ program, contains many calls to functions loaded
from vtables, a source of imprecision for implementations
of CFI that can be exploited by attackers [32]. PITTYPAT
allows a single transfer target for all forward edges as
140    26th USENIX Security Symposium
USENIX Association
00.10.20.30.40.50.60.70.80.910510152025303540Percentage (%)Points-to Set SizepicfiPittyPat02004006008001000120014001600Points-to Set SizeReturn Steppicfi05101520Points-to Set SizeIndirect Branch SteppicfiPittyPat05101520253035404550Points-to Set SizeReturn Steppicfia result of its online points-to analysis. The difference
between π-CFI and PITTYPAT are also found for other
C++ benchmarks, such as 450.soplex, 453.povray and
473.astar.
π-CFI and PITTYPAT consistently allow dramatically
different numbers of transfer targets for return instruc-