to find differences, determine contributing factors, and ultimately repair systems to
restore appropriate behavior.
As an alternative to the overhead of asking a senior SRE to carefully plan a specific
type of breakage that the new SRE(s) must repair, you can also work in the opposite
direction with an exercise that may also increase participation from the entire team:
work from a known good configuration and slowly impair the stack at selected bottle‐
necks, observing upstream and downstream efforts through your monitoring. This
exercise is valued by the Google Search SRE team, whose version of this exercise is
called “Let’s burn a search cluster to the ground!” The exercise proceeds as follows:
1. As a group, we discuss what observable performance characteristics might
change as we cripple the stack.
2. Before inflicting the planned damage, we poll the participants for their guesses
and reasoning about their predictions about how the system will react.
3. We validate assumptions and justify the reasoning behind the behaviors we see.
This exercise, which we perform on a quarterly basis, shakes out new bugs that we
eagerly fix, because our systems do not always degrade as gracefully as we would
expect.
Documentation as Apprenticeship
Many SRE teams maintain an “on-call learning checklist,” which is an organized read‐
ing and comprehension list of the technologies and concepts relevant to the system(s)
Five Practices for Aspiring On-Callers | 403
they maintain. This list must be internalized by a student before they’re eligible to
serve as a shadow on-caller. Take a moment to revisit the example on-call learning
checklist in Table 28-1. The learning checklist serves different purposes for different
people:
• To the student:
—This doc helps establish the boundaries of the system their team supports.
—By studying this list, the student gains a sense of what systems are most
important and why. When they understand the information therein, they can
move on to other topics they need to learn, rather than dwelling on learning
esoteric details that can be learned over time.
• To mentors and managers: Student progress through the learning checklist can
be observed. The checklist answers questions such as:
—What sections are you working on today?
—What sections are the most confusing?
• To all team members: The doc becomes a social contract by which (upon mas‐
tery) the student joins the ranks of on-call. The learning checklist sets the stan‐
dard that all team members should aspire to and uphold.
In a rapidly changing environment, documentation can fall out of date quickly. Out‐
dated documentation is less of a problem for senior SREs who are already up to
speed, because they keep state on the world and its changes in their own heads. New‐
bie SREs are much more in need of up-to-date documentation, but may not feel
empowered or knowledgeable enough to make changes. When designed with just the
right amount of structure, on-call documentation can become an adaptable body of
work that harnesses newbie enthusiasm and senior knowledge to keep everyone
fresh.
In Search SRE, we anticipate the arrival of new team member(s) by reviewing our on-
call learning checklist, and sorting its sections by how up-to-date they are. As the new
team member arrives, we point them to the overall learning checklist, but also task
them with overhauling one or two of the most outdated sections. As you can see in
Table 28-1, we label the senior SRE and developer contacts for each technology. We
encourage the student to make an early connection with those subject matter experts,
so that they might learn the inner workings of the selected technology directly. Later,
as they become more familiar with the scope and tone of the learning checklist, they
are expected to contribute a revised learning checklist section, which must be peer-
reviewed by one or more senior SREs that are listed as experts.
404 | Chapter 28: Accelerating SREs to On-Call and Beyond
Shadow On-Call Early and Often
Ultimately, no amount of hypothetical disaster exercises or other training mecha‐
nisms will fully prepare an SRE for going on-call. At the end of the day, tackling real
outages will always be more beneficial from a learning standpoint than engaging with
hypotheticals. Yet it’s unfair to make newbies wait until their first real page to have a
chance to learn and retain knowledge.
After the student has made their way through all system fundamentals (by complet‐
ing, for example, an on-call learning checklist), consider configuring your alerting
system to copy incoming pages to your newbie, at first only during business hours.
Rely on their curiosity to lead the way. These “shadow” on-call shifts are a great way
for a mentor to gain visibility into a student’s progress, and for a student to gain visi‐
bility into the responsibilities of being on-call. By arranging for the newbie to shadow
multiple members of their team, the team will become increasingly comfortable with
the thought of this person entering the on-call rotation. Instilling confidence in this
manner is an effective method of building trust, allowing more senior members to
detach when they aren’t on-call, thus helping to avoid team burnout.
When a page comes in, the new SRE is not the appointed on-caller, a condition which
removes any time pressure for the student. They now have a front-row seat to the
outage while it unfolds, rather than after the issue is resolved. It may be that the stu‐
dent and the primary on-caller share a terminal session, or sit near each other to
readily compare notes. At a time of mutual convenience after the outage is complete,
the on-caller can review the reasoning and processes followed for the student’s bene‐
fit. This exercise will increase the shadow on-caller’s retention of what actually
occurred.
Should an outage occur for which writing a postmortem is benefi‐
cial, the on-caller should include the newbie as a coauthor. Do not
dump the writeup solely on the student, because it could be mis‐
learned that postmortems are somehow grunt work to be passed off
on those most junior. It would be a mistake to create such an impres‐
sion.
Some teams will also include a final step: having the experienced on-caller “reverse
shadow” the student. The newbie will become primary on-call and own all incoming
escalations, but the experienced on-caller will lurk in the shadows, independently
diagnosing the situation without modifying any state. The experienced SRE will be
available to provide active support, help, validation, and hints as necessary.
Five Practices for Aspiring On-Callers | 405
On-Call and Beyond: Rites of Passage, and Practicing
Continuing Education
As comprehension increases, the student will reach a point in their career at which
they are capable of reasoning through most of the stack comfortably, and can impro‐
vise their way through the rest. At this point, they should go on-call for their service.
Some teams create a final exam of sorts that tests their students one last time before
bestowing them with on-call powers and responsibilities. Other new SREs will submit
their completion of the on-call learning checklist as evidence that they are ready.
Regardless of how you gate this milestone, going on-call is a rite of passage and it
should be celebrated as a team.
Does learning stop when a student joins the ranks of on-call? Of course not! To
remain vigilant as SREs, your team will always need to be active and aware of changes
to come. While your attention is elsewhere, portions of your stack may be rearchitec‐
ted and extended, leaving your team’s operational knowledge as historic at best.
Set up a regular learning series for your whole team, where overviews of new and
upcoming changes to your stack are given as presentations by the SREs who are shep‐
herding the changes, who can co-present with developers as needed. If you can,
record the presentations so that you can build a training library for future students.
With some practice, you’ll gain much timely involvement from both SREs within
your team and developers who work closely with your team, all while keeping every‐
one’s minds fresh about the future. There are other venues for educational engage‐
ment, too: consider having SREs give talks to your developer counterparts. The better
your development peers understand your work and the challenges your team faces,
the easier it will be to reach fully informed decisions on later projects.
Closing Thoughts
An upfront investment in SRE training is absolutely worthwhile, both for the students
eager to grasp their production environment and for the teams grateful to welcome
students into the ranks of on-call. Through the use of applicable practices outlined in
this chapter, you will create well-rounded SREs faster, while sharpening team skills in
perpetuity. How you apply these practices is up to you, but the charge is clear: as SRE,
you have to scale your humans faster than you scale your machines. Good luck to you
and your teams in creating a culture of learning and teaching!
406 | Chapter 28: Accelerating SREs to On-Call and Beyond
CHAPTER 29
Dealing with Interrupts
Written by Dave O’Connor
Edited by Diane Bates
“Operational load,” when applied to complex systems, is the work that must be done
to maintain the system in a functional state. For example, if you own a car, you (or
someone you pay) always end up servicing it, putting gas in it, or doing other regular
maintenance to keep it performing its function.
Any complex system is as imperfect as its creators. In managing the operational load
created by these systems, remember that its creators are also imperfect machines.
Operational load, when applied to managing complex systems, takes many forms,
some more obvious than others. The terminology may change, but operational load
falls into three general categories: pages, tickets, and ongoing operational activities.
Pages concern production alerts and their fallout, and are triggered in response to
production emergencies. They can sometimes be monotonous and recurring, requir‐
ing little thought. They can also be engaging and involve tactical in-depth thought.
Pages always have an expected response time (SLO), which is sometimes measured in
minutes.
Tickets concern customer requests that require you to take an action. Like pages, tick‐
ets can be either simple and boring, or require real thought. A simple ticket might
request a code review for a config the team owns. A more complex ticket might entail
a special or unusual request for help with a design or capacity plan. Tickets may also
have an SLO, but response time is more likely measured in hours, days, or weeks.
Ongoing operational responsibilities (also known as “Kicking the can down the road”
and “toil”; see Chapter 5) include activities like team-owned code or flag rollouts, or
responses to ad hoc, time-sensitive questions from customers. While they may not
have a defined SLO, these tasks can interrupt you.
407
Some types of operational load are easily anticipated or planned for, but much of the
load is unplanned, or can interrupt someone at a nonspecific time, requiring that per‐
son to determine if the issue can wait.
Managing Operational Load
Google has several methods of managing each type of operational load at the team
level.
Pages are most commonly managed by a dedicated primary on-call engineer. This is a
single person who responds to pages and manages the resulting incidents or outages.
The primary on-call engineer might also manage user support communications, esca‐
lation to product developers, and so on. In order to both minimize the interruption a
page causes to a team and avoid the bystander effect, Google on-call shifts are man‐
ned by a single engineer. The on-call engineer might escalate pages to another team
member if a problem isn’t well understood.
Typically, a secondary on-call engineer acts as a backup for the primary. The secon‐
dary engineer’s duties vary. In some rotations, the secondary’s only duty is to contact
the primary if pages fall through. In this case, the secondary might be on another
team. The secondary engineer may or may not consider themselves on interrupts,
depending on duties.
Tickets are managed in a few different ways, depending on the SRE team: a primary
on-call engineer might work on tickets while on-call, a secondary engineer might
work on tickets while on-call, or a team can have a dedicated ticket person who is not
on-call. Tickets might be randomly autodistributed among team members, or team
members might be expected to service tickets ad hoc.
Ongoing operational responsibilities are also managed in varying ways. Sometimes, the
on-call engineer does the work (pushes, flag flips, etc.). Alternately, each responsibil‐
ity can be assigned to team members ad hoc, or an on-call engineer might pick up a
lasting responsibility (i.e., a multiweek rollout or ticket) that lasts beyond their shift
week.
Factors in Determining How Interrupts Are Handled
To take a step back from the mechanics of how operational load is managed, there are
a number of metrics that factor into how each of these interrupts are handled. Some
SRE teams at Google have found the following metrics to be useful in deciding how to
manage interrupts:
• Interrupt SLO or expected response time
• The number of interrupts that are usually backlogged
408 | Chapter 29: Dealing with Interrupts
• The severity of the interrupts
• The frequency of the interrupts
• The number of people available to handle a certain kind of interrupt (e.g., some
teams require a certain amount of ticket work before going on-call)
You might notice that all of these metrics are suited to meeting the lowest possible
response time, without factoring in more human costs. Trying to take stock of the
human and productivity cost is difficult.
Imperfect Machines
Humans are imperfect machines. They get bored, they have processors (and some‐
times UIs) that aren’t very well understood, and they aren’t very efficient. Recognizing
the human element as “Working as Intended” and trying to work around or amelio‐
rate how humans work could fill a much larger space than provided here; for the
moment, some basic ideas might be useful in determining how interrupts should
work.
Cognitive Flow State
The concept of flow state1 is widely accepted and can be empirically acknowledged by
pretty much everyone who works in Software Engineering, Sysadmin, SRE, or most
other disciplines that require focused periods of concentration. Being in “the zone”
can increase productivity, but can also increase artistic and scientific creativity. Ach‐
ieving this state encourages people to actually master and improve the task or project
they’re working on. Being interrupted can kick you right out of this state, if the inter‐
rupt is disruptive enough. You want to maximize the amount of time spent in this
state.
Cognitive flow can also apply to less creative pursuits where the skill level required is
lower, and the essential elements of flow are still fulfilled (clear goals, immediate feed‐
back, a sense of control, and the associated time distortion); examples include house‐
work or driving.
You can get in the zone by working on low-skill, low-difficulty problems, such as
playing a repetitive video game. You can just as easily get there by doing high-skill,
high-difficulty problems, such as those an engineer might face. The methods of arriv‐
ing at a cognitive flow state differ, but the outcome is essentially the same.
1 See Wikipedia: Flow (psychology), http://en.wikipedia.org/wiki/Flow_(psychology).
Imperfect Machines | 409
Cognitive flow state: Creative and engaged
This is the zone: someone works on a problem for a while, is aware of and comforta‐
ble with the parameters of the problem, and feels like they can fix it or solve it. The
person works intently on the problem, losing track of time and ignoring interrupts as
much as possible. Maximizing the amount of time a person can spend in this state is
very desirable—they’re going to produce creative results and do good work by vol‐
ume. They’ll be happier at the job they’re doing.
Unfortunately, many people in SRE-type roles spend much of their time either trying
and failing to get into this mode and getting frustrated when they cannot, or never
even attempting to reach this mode, instead languishing in the interrupted state.
Cognitive flow state: Angry Birds
People enjoy performing tasks they know how to do. In fact, executing such tasks is
one of the clearest paths to cognitive flow. Some SREs are on-call when they reach a
state of cognitive flow. It can be very fulfilling to chase down the causes of problems,
work with others, and improve the overall health of the system in such a tangible way.
Conversely, for most stressed-out on-call engineers, stress is caused either by pager
volume, or because they’re treating on-call as an interrupt. They’re trying to code or
work on projects while simultaneously being on-call or on full-time interrupts. These
engineers exist in a state of constant interruption, or interruptability. This working
environment is extremely stressful.
On the other hand, when a person is concentrating full-time on interrupts, interrupts
stop being interrupts. At a very visceral level, making incremental improvements to
the system, whacking tickets, and fixing problems and outages becomes a clear set of
goals, boundaries, and clear feedback: you close X bugs, or you stop getting paged. All
that’s left is distractions. When you’re doing interrupts, your projects are a distraction.
Even though interrupts may be a satisfying use of time in the short term, in a mixed
project/on-call environment, people are ultimately happier with a balance between
these two types of work. The ideal balance varies from engineer to engineer. It’s
important to be aware that some engineers may not actually know what balance best
motivates them (or might think they know, but you may disagree).
Do One Thing Well
You might be wondering about the practical implications of what you’ve read thus far.
The following suggestions, based on what’s worked for various SRE teams that I’ve
managed at Google, are mainly for the benefit of team managers or influencers. This
document is agnostic to personal habits—people are free to manage their own time as
they see fit. The concentration here is on directing the structure of how the team itself
manages interrupts, so that people aren’t set up for failure because of team function
or structure.
410 | Chapter 29: Dealing with Interrupts
Distractibility
The ways in which an engineer may be distracted and therefore prevented from ach‐
ieving a state of cognitive flow are numerous. For example: consider a random SRE
named Fred. Fred comes into work on Monday morning. Fred isn’t on-call or on
interrupts today, so Fred would clearly like to work on his projects. He grabs a coffee,
sticks on his “do not disturb” headphones, and sits at his desk. Zone time, right?
Except, at any time, any of the following things might happen:
• Fred’s team uses an automated ticket system to randomly assign tickets to the
team. A ticket gets assigned to him, due today.
• Fred’s colleague is on-call and receives a page about a component that Fred is
expert in, and interrupts him to ask about it.