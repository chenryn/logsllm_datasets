the buffer contains a pointer to some valid memory region with bytes in it to process. 
Listing 7-28 shows an example of what this type of calling function might look like. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
363 
Listing 7-28. Ignoring Return Values 
int process_request(int sockfd) 
{ 
    char *request; 
    int len, reqtype; 
    read_data(sockfd, &request, &len); 
    reqtype = get_token(request, len); 
    ... 
} 
The code is written with the assumption that read_data() returned successfully and 
passes what should be a character buffer and the number of bytes in it to the function 
get_token(), presumably to get a keyword out of the request buffer to determine 
what type of request is being issued. Because read_data() isn't checked for success, 
it turns out that two uninitialized stack variables could be supplied to get_token(): 
request, which is expected to point to some allocated memory, and len, which is 
expected to indicate the number of bytes read off the network into request. Although 
the exact consequences of this error depend on how get_token() operates, you know 
from the discussion earlier in this chapter that processing uninitialized variables can 
have severe consequences, so ignoring the return value of read_data() probably has 
serious implications. These implications range from a best-case scenario of just 
crashing the application to a worse-case scenario of corrupting memory in an 
exploitable fashion. Pay close attention to how small differences in the caller could 
affect the significance of these errors. As an example, take a look at this slightly 
modified calling function: 
int process_request(int sockfd) 
{ 
    char *request = NULL; 
    int len = 0, reqtype; 
    read_data(sockfd, &request, &len); 
    reqtype = get_token(request, len); 
    ... 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
364 
Here, you have the same function with one key difference: The stack variables passed 
to read_data() are initialized to zero. This small change in the code drastically affects 
the seriousness of ignoring the return value of read_data(). Now the worst thing that 
can happen is that the program can be made to crash unexpectedly, which although 
undesirable, isn't nearly as serious as the memory corruption that was possible in the 
function's original version. That being said, err on the side of caution when estimating 
the impact of return values, as crashing the application might not be the end of the 
story. The application might have signal handlers or exception handlers that perform 
some program maintenance before terminating the process, and they could provide 
some opportunity for exploitation (although probably not in this example). 
Misinterpreting Return Values 
Another situation that could cause problems happens when a return value of a 
function call is tested or utilized, but the calling function misinterprets it. A return 
value could be misinterpreted in two ways: A programmer might simply 
misunderstand the meaning of the return value, or the return value might be involved 
in a type conversion that causes its intended meaning to change. You learned about 
type conversion problems in Chapter 6(? [????.]), so this section focuses mainly on 
errors related to the programmer misinterpreting a return value. 
This type of programmer error might seem unlikely or uncommon, but it tends to 
occur quite often in production code, especially when a team of programmers is 
developing an application and using third-party code and libraries. Often developers 
might not fully understand the external code's correct use, the external code might 
change during the development process, or specifications and documentation for the 
external code could be incorrect. Programmers can also misuse well-known APIs, 
such as the language's runtime library, because of a lack of familiarity or simple 
carelessness. To understand this point, consider the following code: 
#define SIZE(x, y) (sizeof(x)  ((y)  (x))) 
char buf[1024], *ptr; 
ptr = buf; 
ptr += snprintf(ptr, SIZE(buf, ptr), "user: %s\n", username); 
ptr += snprintf(ptr, SIZE(buf, ptr), "pass: %s\n", password); 
... 
This code contains a simple mistake. On UNIX machines, the snprintf() function 
typically returns how many bytes it would have written to the destination, had there 
been enough room. Therefore, the first call to snprintf() might return a value larger 
than sizeof(buf) if the username variable is very long. The result is that the ptr 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
365 
variable is incremented outside the buffer's bounds, and the second call to snprintf() 
could corrupt memory due to and integer overflow in the SIZE macro. Hence, the 
password written into the buffer could be arbitrarily large. 
Vulnerabilities that arise from misinterpreting return values are often quite subtle and 
difficult to spot. The best way to go about finding these vulnerabilities is by taking this 
systematic approach when examining a function: 
1. Determine the intended meaning of the return value for the function. When 
the code is well commented or documented, the auditor might have a good 
idea of its meaning even before looking at the code; however, verifying that 
the function returns what the documenter says it does is still important. 
2. Look at each location in the application where the function is called and see 
what it does with the return value. Is it consistent with that return value's 
intended meaning? 
The first step raises an interesting point: Occasionally, the fault of a misinterpreted 
return value isn't with the calling function, but with the called function. That is, 
sometimes the function returns a value that's outside the documented or specified 
range of expected return values, or it's within the range of valid values but is incorrect 
for the circumstance. This error is usually caused by a minor oversight on the 
application developer's part, but the consequences can be quite drastic. For example, 
take a look at Listing 7-29. 
Listing 7-29. Unexpected Return Values 
int authenticate(int sock, int auth_type, char *login) 
{ 
    struct key *k; 
    char *pass; 
    switch(auth_type){ 
        case AUTH_USER: 
           if(!(pass = read_string(sock))) 
               return -1; 
           return verify_password(login, pass); 
       case AUTH_KEY: 
           if(!(key = read_key(sock))) 
               return 0; 
           return verify_key(login, k); 
       default: 
           return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
366 
int check_credentials(int sock) 
{ 
    int auth_type, authenticated = 0; 
    auth_type = read_int(sock); 
    authenticated = authenticate(sock, auth_type, login); 
    if(!authenticated) 
        die("couldn't authenticate %s\n", login); 
    return 0; 
} 
Assume that the authenticate() function in Listing 7-29 is supposed to return 1 to 
indicate success or 0 to indicate failure. You can see, however, that a mistake was 
made because failure can cause the function to return -1 rather than 0. Because of 
the way the return value was checkedby testing the return value for zero or 
non-zerothis small logic flaw could allow users to log in even though their credentials 
are totally invalid! However, this program wouldn't be vulnerable if the return value 
check specifically tested for the value of 1, as in this example: 
if(authenticated != 1) 
    .. error .. 
Non-zero values represent true in a boolean comparison; so it's easy to see how such 
a misunderstanding could happen. To spot these errors, auditors can use a process 
similar to the one for identifying the implications of ignored return values: 
1. Determine all the points in a function where it might return Again, usually 
there are multiple points where it might return because of errors and one point 
at which it returns because of successful completion. 
2. Examine the value being returned Is it within the range of expected return 
values? Is it appropriate for indicating the condition that caused the function 
to return? 
If you find a spot where an incorrect value is returned from a function, you should 
take note of its location and then evaluate its significance based on how the return 
value is interpreted in every place where the function is called. Because this process 
is so similar to determining the implications of ignoring the current function's return 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
367 
value, both tasks can and should be integrated into one process to save time. For 
example, say you're auditing the following function: 
int read_data(int sockfd, char **buffer, int *length) 
{ 
    char *data; 
    int n, size = MAX_SIZE; 
    if(!(data = (char *)calloc(MAX_SIZE, sizeof(char)))) 
        return 0; 
    if((n = read(sockfd, data, size)) size  buffer->used data = 
             realloc(buffer->data, buffer->size+n))) 
            return -1; 
        buffer->size = buffer->size+n; 
    } 
    memcpy(buffer->data + buffer->used, n); 
    buffer->used += n; 
    return 0; 
} 
int read_line(int sockfd, struct data_buffer *buffer) 
{ 
    char data[1024], *ptr; 
    int n, nl = 0; 
    for(;;){ 
        n = read(sockfd, data, sizeof(data)-1); 
        if(n data, ':'); 
        if(!tokstart) 
            goto err; 
        for(;;){ 
            tokend = strchr(tokstart+1, ':'); 
            if(tokend) 
                break; 
            if(read_line(sockfd, buffer) < 0) 
                goto err; 
        } 
        *tokend = '\0'; 
        process_token(tokstart+1); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
371 
        buffer_clear(buffer); 
    } 
    return 0; 
err: 
    if(buffer) 
        buffer_free(buffer); 
    return 1; 
} 
The process_token_string() function reads five tokens that are delimited by a colon 
character and can expand to multiple lines. During token processing, the read_line() 
function is called to retrieve another line of data from the network. This function then 
calls buffer_append(), which reallocates the buffer when there's not enough room to 
store the newly read line. The problem is that when a reallocation occurs, the 
process_token_string() function might end up with two outdated pointers that 
referenced the original buffer: tokstart and tokend. Both of these outdated pointers 
are then manipulated (as shown in bold), resulting in memory corruption. 
As you can see, these outdated pointer bugs are generally spread out between 
several functions, making them much harder to find. So it helps to have a little more 
practice in identifying code paths vulnerable to these issues. Listing 7-31 shows 
another example of an outdated pointer use do to buffer reallocation, this time from 
example from ProFTPD 1.2.7 through 1.2.9rc2. 
Listing 7-31. Outdated Pointer Use in ProFTPD 
static void _xlate_ascii_write(char **buf, unsigned int *buflen, 
    unsigned int bufsize, unsigned int *expand) { 
  char *tmpbuf = *buf; 
  unsigned int tmplen = *buflen; 
  unsigned int lfcount = 0; 
  int res = 0; 
  register unsigned int i = 0; 
  /* Make sure this is zero (could be a holdover from a 
     previous call). */ 