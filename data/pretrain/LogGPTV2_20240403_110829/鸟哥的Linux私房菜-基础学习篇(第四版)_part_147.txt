LVM 拥有快照功能，快照可以记录 LV 的数据内容，并与原有的 LV 共享未更动的数据，备份与还原就变的很简单；
XFS 通过 xfs_growfs 指令，可以弹性的调整文件系统的大小
（ 要看答案请将鼠标移动到“答：”下面的空白处，按下左键圈选空白处即可察看 ）
情境仿真题一：由于 LVM 可以弹性调整 filesystem 的大小，但是缺点是可能没有加速与硬件备份（与快照不同）的功能。 而磁盘阵列则
具有性能与备份的功能，但是无法提供类似 LVM 的优点。在此情境中，我们想利用“在 RAID 上面创建 LVM”的功能，以达到两者兼顾的
能力。
目标：测试在 RAID 磁盘上面架构 LVM 系统；
需求：需要具有磁盘管理的能力，包括 RAID 与 LVM；
前提：会用到本章创建出来的 /dev/vda5, /dev/vda6, /dev/vda7 三个分区！
那要如何处理呢？如下的流程一个步骤一个步骤的实施看看吧：
1. 重新处理系统，我们在这个练习当中，需要 /dev/vda5, /dev/vda6, /dev/vda7 创建成一个 RAID5 的 /dev/md0 磁盘！详细的作法这里
就不谈了！ 你得要使用 gdisk 来处理成为如下的模样：
[root@study ~]# gdisk -l /dev/vda
Number Start （sector） End （sector） Size Code Name
1 2048 6143 2.0 MiB EF02
2 6144 2103295 1024.0 MiB 0700
3 2103296 65026047 30.0 GiB 8E00
4 65026048 67123199 1024.0 MiB 8300 Linux filesystem
5 67123200 69220351 1024.0 MiB FD00 Linux RAID
6 69220352 71317503 1024.0 MiB FD00 Linux RAID
7 71317504 73414655 1024.0 MiB FD00 Linux RAID
2. 开始使用 mdadm 来创建一个简单的 RAID5 阵列！简易的流程如下：
[root@study ~]# mdadm --create /dev/md0 --auto=yes --level=5 \
> --raid-devices=3 /dev/vda{5,6,7}
[root@study ~]# mdadm --detail /dev/md0 | grep -i uuid
UUID : efc7add0:d12ee9ca:e5cb0baa:fbdae4e6
[root@study ~]# vim /etc/mdadm.conf
ARRAY /dev/md0 UUID=efc7add0:d12ee9ca:e5cb0baa:fbdae4e6
若无出现任何错误讯息，此时你已经具有 /dev/md0 这个磁盘阵列设备了！接下来让我们处理 LVM 吧！
3. 开始处理 LVM ，现在我们假设所有的参数都使用默认值，包括 PE ，然后 VG 名为 raidvg ，LV 名为 raidlv ，下面为基本的流程：
[root@study ~]# pvcreate /dev/md0 <==创建 PV
[root@study ~]# vgcreate raidvg /dev/md0 <==创建 VG
[root@study ~]# lvcreate -L 1.5G -n raidlv raidvg <==创建 LM
[root@study ~]# lvscan
ACTIVE '/dev/raidvg/raidlv' [1.50 GiB] inherit
这样就搞定了 LVM 了！而且这个 LVM 是架构在 /dev/md0 上面的喔！然后就是文件系统的创建与挂载了！
4. 尝试创建成为 XFS 文件系统，且挂载到 /srv/raidlvm 目录下：
[root@study ~]# mkfs.xfs /dev/raidvg/raidlv
[root@study ~]# blkid /dev/raidvg/raidlv
/dev/raidvg/raidlv: UUID="4f6a587d-3257-4049-afca-7da1d405117d" TYPE="xfs"
[root@study ~]# vim /etc/fstab
UUID="4f6a587d-3257-4049-afca-7da1d405117d" /srv/raidlvm xfs defaults 0 0
[root@study ~]# mkdir /srv/raidlvm
[root@study ~]# mount -a
[root@study ~]# df -Th /srv/raidlvm
Filesystem Type Size Used Avail Use% Mounted on
/dev/mapper/raidvg-raidlv xfs 1.5G 33M 1.5G 3% /srv/raidlvm
5. 上述就是 LVM 架构在 RAID 上面的技巧，之后的动作都能够使用本章的其他管理方式来管理， 包括 RAID 热拔插机制、LVM 放大
缩小机制等等。
简答题部分：
在前一章的第一个大量新增帐号范例中， 如果我想要让每个用户均具有 soft/hard 各为 40MB/50MB 的容量时，应该如何修改这个 script
？
你得先要依据本章的作法，先将 /home 制作好 quota 的环境然后， 你可以在 do...done 内的最后一行，新增一行内容为：
xfs_quota -x -c "limit -u bsoft=40M bhard=50M ${username}" /home
这样就可以在制作用户时，指定更新密码且给予 quota 的限制！
如果我想要让 RAID 具有保护数据的功能，防止因为硬件损毁而导致数据的遗失，那我应该要选择的 RAID 等级可能有哪些？ （请以本
章谈到的等级来思考即可）
具有备份数据的有： RAID-1, RAID-5, RAID-6
在默认的 LVM 设置中，请问 LVM 能否具有“备份”的功能？
是有的，就是那个快照 （snopshot） 的功能，此功能即可进行数据的备份！
如果你的计算机主机有提供 RAID 0 的功能，你将你的三颗硬盘全部在 BIOS 阶段使用 RAID 芯片整合成为一颗大磁盘， 则此磁盘在
Linux 系统当中的文件名为何？
由于硬件磁盘阵列是在 BIOS 阶段完成的，因此 Linux 系统会捉到一个完整的大的 RAID 磁盘，此磁盘的文件名就会是“ /dev/sda ”！ 但如果是 Intel
的芯片组，则还是可能会成为 /dev/md127 等相关的文件名！
[1]相关的 XFS 文件系统的 quota 说明，可以参考下面的文件：
XFS 官网说明：http://xfs.org/docs/xfsdocs-xml-dev/XFS_User_Guide/tmp/en-US/html/xfs-quotas.html
[2]若想对 RAID 有更深入的认识，可以参考下面的链接与书目：
http://www.tldp.org/HOWTO/Software-RAID-HOWTO.html
杨振和、“操作系统导论：第十一章”、学贯出版社，2006
[3]详细的 mdstat 说明也可以参考如下网页：
https://raid.wiki.kernel.org/index.php/Mdstat
[4]徐秉义老师在网管人杂志的文章，文章篇名分别是：
磁盘管理：SoftRAID 与 LVM 综合实做应用 （上）
磁盘管理：SoftRAID 与 LVM 综合实做应用 （下）
目前文章已经找不到了～可能需要 google 一下旧文章的备份才能看到了！
2002/07/14：第一次完成
2003/02/10：重新编排与加入 FAQ
2003/09/02：加入 quotacheck 发生错误时的解决方法。
2005/09/06：将旧的文章移动到 此处 。
2005/09/06：进行版面风格的转换，并且进行数据的查询，加入 repquota 的简单说明而已！
2009/03/04：将原本旧的基于 FC4 的文件移动到 此处 。
2009/03/06：加入 warnquota 这玩意儿！挺有趣的哩！
2009/03/12：加入了 software RAID 与 LVM 的加强说明，尤其是 LVM 的快照 （snapshot） 的说明！
2009/09/10：修改一些字样之外，增加情境仿真，以及后续的简答题部分题目。
2012/06/14：在解释 PE 的部分有错误！是 Physical Extent 而不是 Physical Extend ！真抱歉！
第第第第十十十十五五五五章章章章、、、、例例例例行行行行性性性性工工工工作作作作调调调调度度度度（（（（ccrroonnttaabb））））
最近更新日期：2015/07/31
嬊丄个垞矤筫七 闙嫴个，伄亡卵獔凔ã 乤û 粟纃巜巜亡ä 剌瘨轿蟰 丿亟剅？载丿亟剅凔帹旓讥苏譢缒嶉伀瘨？ 夦杀伄悗褥譍膎嶕譢𰶎瘨墫亡禯帐厓争膎剌瘨
苏粟纃® 霆戋蟰，羰² 𬯎褥懯剌有叓剌乺，卬讉夦仹墨缒？ 载丿伯蟰瘨嶉伀厓股卬幂ã “勹 ”嶉伀³ “弯獓”嶉伀，苏粟纃儩卬旓咎丿昵剅苏赁资？ 轼暭轼暭，夦杀
伄悗褥歳帘苏羟侄瘨瓃斉凯 壍寕卵冞 宥侅亚捴郐膎嶕² 褥彼撰，厓争剂瘨凔去？ 嗣嗣！载丿祱祱褥夦仹墨玪，寕皯皯载 窄僬！
每个人或多或少都有一些约会或者是工作，有的工作是例行性的， 例如每年一次的加薪、每个月一次的工作报告、每周一次的午餐会
报、每天需要的打卡等等； 有的工作则是临时发生的，例如刚好总公司有高官来访，需要你准备演讲器材等等！ 用在生活上面，例如每年的
爱人的生日、每天的起床时间等等、还有突发性的 3C 用品大降价 （啊！真希望天天都有！） 等等啰。
像上面这些例行性工作，通常你得要记录在行事历上面才能避免忘记！不过，由于我们常常在计算机前面的缘故， 如果计算机系统能够
主动的通知我们的话，那么不就轻松多了！嘿嘿！这个时候 Linux 的例行性工作调度就可以派上场了！ 在不考虑硬件与我们服务器的链接状态
下，我们的 Linux 可以帮你提醒很多任务，例如：每一天早上 8:00 钟要服务器连接上音响，并启动音乐来唤你起床；而中午 12:00 希望 Linux
可以发一封信到你的邮件信箱，提醒你可以去吃午餐了； 另外，在每年的你爱人生日的前一天，先发封信提醒你，以免忘记这么重要的一天。
那么 Linux 的例行性工作是如何进行调度的呢？所谓的调度就是将这些工作安排执行的流程之意！ 咱们的 Linux 调度就是通过 crontab
与 at 这两个东西！这两个玩意儿有啥异同？就让我们来瞧瞧先！
从上面的说明当中，我们可以很清楚的发现两种工作调度的方式：
一种是例行性的，就是每隔一定的周期要来办的事项；
一种是突发性的，就是这次做完以后就没有的那一种 （ 3C 大降价...）
那么在 Linux 下面如何达到这两个功能呢？那就得使用 at 与 crontab 这两个好东西啰！
at ：at 是个可以处理仅执行一次就结束调度的指令，不过要执行 at 时， 必须要有 atd 这个服务 （第十七章） 的支持才行。在某些新版
的 distributions 中，atd 可能默认并没有启动，那么 at 这个指令就会失效呢！不过我们的 CentOS 默认是启动的！
crontab ：crontab 这个指令所设置的工作将会循环的一直进行下去！ 可循环的时间为分钟、小时、每周、每月或每年等。crontab 除了
可以使用指令执行外，亦可编辑 /etc/crontab 来支持。 至于让 crontab 可以生效的服务则是 crond 这个服务喔！
下面我们先来谈一谈 Linux 的系统到底在做什么事情，怎么有若干多的工作调度在进行呢？然后再回来谈一谈 at 与 crontab 这两个好东
西！
如果你曾经使用过 Linux 一阵子了，那么你大概会发现到 Linux 会主动的帮我们进行一些工作呢！ 比方说自动的进行线上更新 （on-line
update）、自动的进行 updatedb （第六章谈到的 locate 指令） 更新文件名数据库、自动的作登录文件分析 （所以 root 常常会收到标题为
logwatch 的信件） 等等。这是由于系统要正常运行的话， 某些在背景下面的工作必须要定时进行的缘故。基本上 Linux 系统常见的例行性任务
有：
进行登录文件的轮替 （log rotate）：
Linux 会主动的将系统所发生的各种信息都记录下来，这就是登录文件 （第十八章）。 由于系统会一直记录登录信息，所以登录文件将会
越来越大！我们知道大型文件不但占容量还会造成读写性能的困扰， 因此适时的将登录文件数据挪一挪，让旧的数据与新的数据分别存
放，则比较可以有效的记录登录信息。这就是 log rotate 的任务！这也是系统必要的例行任务；
登录文件分析 logwatch 的任务：
如果系统发生了软件问题、硬件错误、资安问题等，绝大部分的错误信息都会被记录到登录文件中， 因此系统管理员的重要任务之一就是
分析登录文件。但你不可能手动通过 vim 等软件去检视登录文件，因为数据太复杂了！ 我们的 CentOS 提供了一只程序“ logwatch ”来主动
分析登录信息，所以你会发现，你的 root 老是会收到标题为 logwatch 的信件，那是正常的！你最好也能够看看该信件的内容喔！
创建 locate 的数据库：
在第六章我们谈到的 locate 指令时， 我们知道该指令是通过已经存在的文件名数据库来进行系统上文件名的查询。我们的文件名数据库是
放置到 /var/lib/mlocate/ 中。 问题是，这个数据库怎么会自动更新啊？嘿嘿！这就是系统的例行性工作所产生的效果啦！系统会主动的进行
updatedb 喔！
man page 查询数据库的创建：
与 locate 数据库类似的，可提供快速查询的 man page db 也是个数据库，但如果要使用 man page 数据库时，就得要执行 mandb 才能够创
建好啊！ 而这个 man page 数据库也是通过系统的例行性工作调度来自动执行的哩！