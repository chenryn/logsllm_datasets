1234*>*567
false
false
3
\d+\b1 [>'
true
false
4
\d+\b| [>*567
567
false
false
5
\d+\b1 [>='
false
false
6
\d+\b1[>=*567
567
false
false
7
\d+\bl [>=？（它作为大的正则表达式的一部分）会诱发这个
错误，因为“=’是可选的单个字符。在不区分大小写的情况下使用'alanlthe）（仍然是包
含在大的正则表达式中）也会诱发这个错误，因为单个字符'a是众多多选分支之一，因此
是可选的。
另两个例子是values？i和r？\n\r？\n]。
解决办法解决的办法是破坏诱发条件，或者禁用不区分大小写的匹配（至少是对诱发的子
表达式禁用），或者是把单个字符替换为其他元素，例如字符组。
第一种办法会把>=？替换为（？-i：>=？），使用模式修饰范围（110）保证不区分大小写
的匹配不会应用于这个子表达式（这里不存在大小写的区别，所以这种办法完全没问题）。
如果使用第二种办法，alanlthei就变成了[aA]lanlthe)，代表了使用Pattern.CASE_
INSENSITIVE进行不区分大小写匹配的情况。
Matcher的其他方法
OtherMatcherMethods
这些Matcher方法尚未介绍过：
Matcher reset()
这个方法会重新初始化Matcher的大多数信息，弃用前一次成功匹配的所有信息，将
匹配位置指向文本的开头，把检索范围（384）恢复为默认的“全部文本”。只有
anchoringbounds和transparentbounds（388）不会变化。
Matcher有三个方法会在内部调用reset，因此也会重新设定检索范围：replaceA11、
replaceFirst，以及只使用一个参数的find。
这个方法返回Matcher本身，所以它可以用在方法键中（389）。
注7：本书写作过程中，Sun告诉我在“5.0u9”，也就是Java5.0Update9中修正了此bug（你可
能还记得，365贡的脚注提到过本书针对的Java1.5update7)。在Java1.6beta中、这个
bug也不存在。
1
---
## Page 419
Matcher对象
393
Matcher reset(CharSequence text)
这个方法与reset（）差不多，但还会把目标文本改为新的String（或者任何实现
CharSequence的对象）。
如果你希望对多个文本应用同样的正则表达式（例如，对所读入的文件的每一行），使
用reset方法比多次创建新的Matcher更有效率。
这个方法返回Matcher本身，所以可以用在方法链中（389）。
Faten pattern()
Matcher的pattern方法返回与此Matcher关联的Pattern对象。如果希望观察所使
用的正则表达式，请使用m.pattern（）.pattern（），它会调用Pattern对象（名字
相同，但对象不同）的pattern方法（394）。
Matc?er usePattern(Pattern p)
从Java1.5开始添加，这个方法会用给定的Pattern对象替换当前与Matcher关联的
不同的patterm。第399页有此方法实际应用的例子和讨论。
这个方法返回Matcher本身，所以可以用在方法链中（389）。
String toString()
从Java1.5中添加，这个方法返回包含Matcher基本信息的字符串，调试时这很有用。
字符串的内容可能会变化，在Java1.6beta中是这样：
Matcher m=Pattern.compile(*(\\w+)*).matcher(*ABC 123");
System.out .println(m.toString()) ;
m.find() ;
System.out.println(m.toString());
结果是：
java.util.regex.Matcher[pattern=(\w+) region=0,7 1astmatch=]
java.util.regex.Matcher[pattern=(\w+)region=0,7 lastmatch=ABC]
Java1.4.2的Matcher类只有继承自java.lang.Object的toString方法，它返回没
什么信息含量的字符串：‘java.util.regex.Matcher@480457”。
---
## Page 420
394
第8章：Java
查询Matcher的目标字符串
Matcher类没有提供查询当前目标字符串的方法，但有些办法绕过了这种限制：
//此Dattern在下面的函数中使用，此处编译并保存，是为了提高效率
static final Pattern pNeverFail = Pattern.compile("^");
//返回与matcher对象关联的目标字将串
public static String text(Matcher m)
//记住这些位置，以备之后恢复
Integer regionStart=m.regionStart();
Integer regionEnd = m.regionEnd();
Pattern pattern = m.pattern();
//只有这祥才能返回字将事
String text = m.usePattern(pNeverFail).replaceFirst(""):
//恢复之前记录的位置
m.usePattern(pattern).region(regionStart, regionEnd);
//返回文本
return text;
这里使用replaceFirst方法，以及虚构的pattern和replacement字符串，来取得目标字符
串的未经修改的副本。其中它重置了Matcher，但也恢复了之前的检索范围。它不是特别好
的解决方案（效率也不是很高，而且即便Matcher的目标字符串可能是其他类型也会返回
String），但是在Sun给出更好的办法之前，它还凑合。
Pattern的其他方法
Other Pattern Methods
除了主要的compilefactories，Pattern类还提供了一些辅助方法：
split
下一页会详细讲解两种形式的split方法。
Sri:ig pattern()
这个方法返回用于创建本pattern的正则表达式字符串。
Stri:g tostring()
这个方法从Java1.5之后可用，等价于pattern方法。
ii.flags()
这个方法返回pattern创建时传递给compilefactory的flag参数（作为整数）。
---
## Page 421
Pattern的其他方法
395
statcSrin:quote(String text）
从Java1.5开始提供的static方法，返回text 对应的正则文字字符串，能够作为
Pattern.compile的参数。例如，Pattern.quote（"main（）"）返回字符串‘\Qmain
（）\E，作为正则表达式它解释为\Qmain（）\E)，完全能够匹配原始的参数“main（）。
telct/xjear:matches(String regex,CharSequence text)
这个static方法返回的Boolean值表示正则表达式能否匹配文本（与matcher方法的参
数一样，可以是一个String或者任何实现charSequence的对象373)。其实，它等
价于：
Pattern.compile(regex).matcher(text).matches();
如果需要传递编译参数，或者所要的信息不只是简单的匹配是否成功，则应该使用之
前介绍的办法。
如果这个方法需要多次调用（例如，在循环中，或者其他经常调用的代码中），预先把
正则表达式编译为一个Pattern对象，然后每次应用的效率会高很多。
Pattern的split方法，单个参数
Pattern‘s split Method, witlt One Argument
St:ng(split(CharSequence text)
patterm的这个方法接收文本（一个charSequence对象），然后返回一个数组，包含由
这个patterm对应的正则表达式在其中的匹配分隔的文本。String类的split方法也
提供了同样的功能。
String[] result = Pattern.compile(*\\.*).split(*209.204.146.22*);
返回4个字符串构成的数组（209’、‘204'、‘146’和“22'），由文本中的三个.分隔。
这个简单例子只用单个字符分隔，但其实我们可以使用任何正则表达式。例如，你可以用
String[]result =Pattern.compile(*\\w+").split(Text);
如果给出的字符串是“what气uRDoc”，则返回4个字符串（‘what'、‘s'、‘up'、‘Doc'），
由这个表达式的3次匹配（如果包含非ASCII文本，你可能需要使用P（L)+1或
[^\p（L）\p(N）_]而不是W+}367）分隔。
---
## Page 422
396
第8章：Java
相邻匹配之间的空元素
如果正则表达式能够在文本的最开头匹配，返回数组的第一个元素应该是空字符串（这是
一个合法的字符串，但是不包括任何字符）。同样，如果正则表达式能够在某个位置匹配两
次以上，应该返回空字符事，因为邻近的匹配“分割”了零长度的文本。例如：
String[]result= Pattern.compile(*\\s*,\\s*").split(°,one, two，,,3");
按照两边可能出现空白字符的逗号来分割，返回一个5个元素的数组：空字符串、‘one'、
‘two'、两个空字符串和‘3”。
序列末尾出现的所有空字符串都会被忽略：
String[] result = Pattern.compile(":").split(*:xx:");
这样会得到两个字符串：一个空字符串和‘xx'。如果希望保留这些元素，请使用下面介绍
的双参数版本的split。
Pattern的split方法，两个参数
Pattern‘s split Method,withTwo Arguments
StrinigIi split(CharSeyience text, int limit)
这个版本的split方法能够控制pattern应用的次数，以及结尾部分可能出现的空元素
的处理策略。String类的split方法也可以获得同样效果。
limit参数等于0，大于0，还是小于0，各有意义。
limit小于0
如果limit小于0，就会保留数组结尾的空元素。
String{] result= Pattern.compile(*:*).split(*:xx:",-1);
返回包含3个字符串的数组（一个空字符串，‘xx'，然后是另一个空字符串）。
limit等于0
把limitr设置为0，等于不设置limir，所以不会保留结尾的空元素。
limit大于0
如果limit大于0，则split返回的数组最多包括limit个元素。也就是说，正则表达式至多
会应用limir-1次。（如果limit=3，则需要2次匹配来分割3个字符串）。