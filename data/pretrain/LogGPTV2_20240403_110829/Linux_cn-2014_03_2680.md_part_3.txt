```
或者
```
# kill 进程ID
```
输出样例：
```
[7]+  Terminated              yum -y update &>/root/patch.log &
```
在 Linux/FreeBSD/OS X Unix 下你也可以[使用 killall 命令通过名字杀死进程或是 jobID 而不是通过 PID](http://www.cyberciti.biz/faq/unix-linux-killall-command-examples-usage-syntax/) 
### #7 为什么当我登出后 shell 会清除我的所有后台作业
在这个例子中,我将会启动 pdfwriter.py 来批量生成[这个站点](http://www.cyberciti.biz/faq/)的 pdf 文件:
```
~/scripts/www/pdfwriter.py --profile=faq --type=clean --header=logo\
--footer-left "nixCraft is GIT UL++++ W+++ C++++ M+ e+++ d-" \
--footer-right "Page [of] of [total]" &
```
一旦当我登出shell时，pdfwriter.py 作业就会被我的 shell 杀死。为了克服这个问题需要使用[shell的内置命令 disown 来告诉 shell 不要发送 HUP 信号](http://www.cyberciti.biz/faq/unix-linux-disown-command-examples-usage-syntax/),键入：
```
$ ~/scripts/www/pdfwriter.py --profile=faq .... &
$ disown
$ exit
```
### #8 使用一个名为 nohup 的外部命令阻止在登出时杀死作业
你也可以使用[nohup 命令在你退出 shell 后执行作业](http://www.cyberciti.biz/tips/nohup-execute-commands-after-you-exit-from-a-shell-prompt.html):
```
$ nohup ~/scripts/www/pdfwriter.py --profile=faq .... &
$ exit
```
### #9: 查找最后的作业的 PID
为了查找最近在后台执行的(异步)命令的进程ID，可使用 bash shell 的特殊参数 $!
```
$ gedit foo.txt &
$ echo "最近在后台执行的job 的PID - $!" 
```
输出样例：
```
最近在后台执行的job 的PID - 9421
```
### #10: 等候作业完成
wait 命令会等候给予的进程ID 或 作业ID指定的进程，然后报告它的终止状态。语法如下：
```
/path/to/large-job/command/foo &
wait $!
/path/to/next/job/that-is-dependents/on-foo-command/bar
```
这是我的一个工作脚本：
```
#!/bin/bash
# A shell script wrapper to create pdf files for our blog/faq section
########################################################################
# init() - Must be run first 
# Purpose - Create index file in $_tmp for all our wordpress databases 
########################################################################
init(){
 _php="/usr/bin/php"
 _phpargs="-d apc.enabled=0"
 _base="~/scripts"
 _tmp="$_base/tmp"
 _what="$1"
 for i in $_what
 do
        [[ ! -d "$_tmp/$i" ]] && /bin/mkdir "$_tmp/$i"
        $_php $_phpargs -f "$_base/php/rawsqlmaster${i}.php" >  "$_tmp/$i/output.txt"
 done
}
#####################################################
# Without index file, we can out generate pdf files
#####################################################
init blog
###########################################################
# Do not run the rest of the script until init() finished
###########################################################
wait $!
## Alright, create pdf files 
~/scripts/www/pdfwriter.py --profile=blog --type=clean --header=logo\
--footer-left "nixCraft is GIT UL++++ W+++ C++++ M+ e+++ d-" \
--footer-right "Page [of] of [total]"
```
#### Linux 和 Unix 作业控制命令总结列表
| 命令 | 描述 | 示例 |
| --- | --- | --- |
| `**&**` | 将作业置入后台 | `命令 &` |
| `**%n**` | 设置作业号为 n (数字)的作业 | `命令 %1` |
| `**%Word**` | 引用命令行开端包含 Word 的作业 | `命令 %yum` |
| `**%?Word**` | 引用命令行包含 Word 的作业 | `命令 %?ping` |
| `**%%**``**%+**` | 引用当前作业 | `kill %%kill %+` |
| `**%-**` | 引用先前作业 | `bg %-` |
| `**CTRL-Z**`**kill -s stop jobID**`` | 挂起或停止作业 | `kill -s stop %ping` |
| `**jobs**`**jobs -l**`` | 列出活动的作业 | `jobs -l` |
| `**bg**` | 将 作业置入后台 | `bg %1bg %ping` |
| `**fg**` | 将作业置入前台 | `fg %2fg %apt-get` |
### 关于 shell 内置命令和外部命令的小注
运行下面的 type 命令找出给予命令是否属于内部或外部的。
```
type -a fg bg jobs disown
```
输出样式：
```
fg is a shell builtin
fg is /usr/bin/fg
bg is a shell builtin
bg is /usr/bin/bg
jobs is a shell builtin
jobs is /usr/bin/jobs
disown is a shell builtin
```
在几乎所有情况下，你都需要使用 shell 的内置命令。所有外部命令例如 /usr/bin/fg 或 /usr/bin/jobs 工作在一个不同的 shell 环境下，而不能用在父 shell 的环境下。
### 总结
我希望你能喜欢这篇博文系列([rss 订阅](http://www.cyberciti.biz/tutorials/practical-unixlinux-series/feed/)),我建议你阅读下面的更多信息：
* 在我们的 faq 章节查阅有关进程管理的文章[disoen 命令示例](http://www.cyberciti.biz/faq/unix-linux-disown-command-examples-usage-syntax/)，[jobs 命令示例](http://www.cyberciti.biz/faq/unix-linux-jobs-command-examples-usage-syntax/)，[bg 命令示例](http://www.cyberciti.biz/faq/unix-linux-bg-command-examples-usage-syntax/)，和[fg 命令示例](http://www.cyberciti.biz/faq/unix-linux-fg-command-examples-usage-syntax/)。
* Man pages [bash(1)](http://www.manpager.com/linux/man1/bash.1.html), [ksh(1)](http://www.manpager.com/linux/man1/ksh.1.html), [ps(1)](http://www.manpager.com/linux/man1/ps.1.html), [kill(1)](http://www.manpager.com/linux/man1/kill.1.html)
* [Korn shell (ksh93) 文档](http://www2.research.att.com/sw/download/man/man1/ksh.html).
* [NU bash shell 文档](https://www.gnu.org/software/bash/manual/bashref.html).
我会计划在这个系列添加更多深入的教程。若果你需要看到具体的主题，请在下方评论让我知道。
---
via: 
译者：[Luoxcat](https://github.com/Luoxcat) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出