### 一、什么是序列化

**序列化 (Serialization)** 是指将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入临时或持久性存储区。之后，可以通过从存储区中读取并反序列化对象的状态来重新创建该对象。

简单来说：
- **序列化**：将数据结构或对象转换成二进制串的过程。
- **反序列化**：将在序列化过程中生成的二进制串转换回数据结构或对象的过程。

下面是一个将字符串对象进行序列化并存储到本地文件，然后再通过反序列化恢复的示例代码：

```java
public static void main(String[] args) throws Exception {
    String obj = "hello world!";
    
    // 将序列化对象写入文件 object.db 中
    try (FileOutputStream fos = new FileOutputStream("object.db");
         ObjectOutputStream os = new ObjectOutputStream(fos)) {
        os.writeObject(obj);
    }
    
    // 从文件 object.db 中读取数据
    try (FileInputStream fis = new FileInputStream("object.db");
         ObjectInputStream ois = new ObjectInputStream(fis)) {
        // 通过反序列化恢复对象 obj
        String obj2 = (String) ois.readObject();
        System.out.println(obj2);  // 输出: hello world!
    }
}
```

### 二、反序列化漏洞原理

反序列化漏洞的本质在于反序列化机制打破了数据和对象的边界，导致攻击者注入的恶意序列化数据在反序列化过程中被还原成对象，从而控制了对象并在目标系统上执行攻击代码。Java 序列化广泛应用于 RMI、JMX 和 JMS 技术中。

### 三、漏洞危害

#### 案例一：Apache ActiveMQ 5.12.0 远程代码执行漏洞 (JMS)

Apache ActiveMQ 在 5.13.0 之前的 5.x 版本中存在安全漏洞，该漏洞源于程序未能限制可在代理中序列化的类。远程攻击者可借助特制的序列化的 Java Message Service (JMS) `ObjectMessage` 对象利用该漏洞执行任意代码。

受影响的消息系统包括：
- Apache ActiveMQ 5.12.0 及更早版本
- HornetQ 2.4.0 及更早版本
- Oracle OpenMQ 5.1 及更早版本
- IBM Websphere MQ 8.0.0.4 及更早版本
- Oracle Weblogic 12c 及更早版本
- Pivotal RabbitMQ JMS client 1.4.6 及更早版本
- IBM MessageSight MessageSight V1.2 JMSClient 及更早版本
- SwiftMQ JMS client 9.7.3 及更早版本
- Apache ActiveMQ Artemis client 1.2.0 及更早版本
- Apache Qpid JMS client 0.9.0 及更早版本
- Amazon SQS Java Messaging Library 1.0.0 及更早版本

#### 案例二：JBoss 反序列化漏洞 (JMX)

JBoss 使用 HTTP 协议，可以在任何端口上运行，默认安装在 8080 端口。JMX 是一个 Java 的管理协议，在 JBoss 中的 `JMXInvokerServlet` 可以使用 HTTP 协议与其进行通信。这一通信功能依赖于 Java 的序列化类。

本地构造恶意的序列化对象并发送给目标主机，可以执行系统命令。RedHat 发布了 JBoss 相关产品的解决方案，受影响的 JBoss 产品有：
- Red Hat JBoss A-MQ 6.x
- Red Hat JBoss BPM Suite (BPMS) 6.x
- Red Hat JBoss BRMS 6.x
- Red Hat JBoss BRMS 5.x
- Red Hat JBoss Data Grid (JDG) 6.x
- Red Hat JBoss Data Virtualization (JDV) 6.x
- Red Hat JBoss Data Virtualization (JDV) 5.x
- Red Hat JBoss Enterprise Application Platform 6.x
- Red Hat JBoss Enterprise Application Platform 5.x
- Red Hat JBoss Enterprise Application Platform 4.3.x
- Red Hat JBoss Fuse 6.x
- Red Hat JBoss Fuse Service Works (FSW) 6.x
- Red Hat JBoss Operations Network (JBoss ON) 3.x
- Red Hat JBoss Portal 6.x
- Red Hat JBoss SOA Platform (SOA-P) 5.x
- Red Hat JBoss Web Server (JWS) 3.x

#### 案例三：Jenkins Remoting 漏洞

Jenkins Remoting 的相关 API 用于实现分布式环境中 master 和 slave 节点或者 master 和 CLI 的访问。API 没有身份认证并且支持序列化对象。CVE-2016-0788 通过 Jenkins Remoting 巧妙地开启 JRMP，JRMP 触发反序列化操作，从而进行漏洞的利用。作者已经提供了完整的利用 POC。

受影响的版本：
- 所有 Jenkins 主线版本至 1.649（包括 1.649）
- 所有 Jenkins LTS 版本至 1.642.1（包括 1.642.1）

### 四、漏洞防御

1. **反序列化对象白名单控制**：在 `resolveClass` 方法中校验对象名字。

    ```java
    public class LookAheadObjectInputStream extends ObjectInputStream {
        public LookAheadObjectInputStream(InputStream inputStream) throws IOException {
            super(inputStream);
        }

        @Override
        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            if (!desc.getName().equals(Bicycle.class.getName())) {
                throw new InvalidClassException("Unauthorized deserialization attempt", desc.getName());
            }
            return super.resolveClass(desc);
        }
    }
    ```

2. **序列化数据采用对称加密进行传输**，接口调用增加身份认证。（这种方法仅能提升攻击成本）

3. **关闭敏感数据的序列化**：如果类中存在敏感数据且需要序列化，可以在特定对象的一个域上关闭序列化，在这个域前加上关键字 `transient`。

【作者简介】迟长峰，携程技术中心信息安全部应用安全工程师。