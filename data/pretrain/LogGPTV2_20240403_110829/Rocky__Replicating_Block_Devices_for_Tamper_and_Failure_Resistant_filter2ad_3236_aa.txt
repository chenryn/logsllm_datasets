title:Rocky: Replicating Block Devices for Tamper and Failure Resistant
Edge-based Virtualized Desktop Infrastructure
author:Beom Heyn Kim and
Hyoungshick Kim
Rocky: Replicating Block Devices for Tamper
and Failure Resistant Edge-based Virtualized
Desktop Infrastructure
Beom Heyn Kim
University of Toronto
Toronto, Ontario, Canada
PI:EMAIL
ABSTRACT
Recently, edge-based virtual desktop infrastructure (EdgeVDI), which
brings the power of virtualized desktop infrastructure to cloudlets
closer to users, has been considered as an attractive solution for
WAN mobility. However, ransomware and wiper malware are be-
coming more and more prevalent, which can impose serious cyber-
security threats to EdgeVDI users. Existing tamper-resistant solu-
tions cannot deal with cloudlet failures. In this paper, we propose
Rocky, the first distributed replicated block device for EdgeVDI that
can recover from tampering attacks and failures. The key enabler
is replicating to store a consistent write sequence across cloudlets
as an append-only immutable mutation history. In addition, Rocky
uses a replication broker to allow heterogenous cloudlets to con-
trol replication rates at their pace and reduces both disk space and
network bandwidth consumption by coalescing writes for both
uplink and downlink. To show the feasibility of Rocky, we imple-
mented Rocky in Java. The experimental results show that Rocky’s
write and read throughputs are similar to those of a baseline device
with 8.4% and 11.9% additional overheads, respectively. In addition,
we could reduce repeated writes by 88.5% and 100% for editing
presentation slides and a photo, respectively.
CCS CONCEPTS
• Security and privacy → Distributed systems security.
KEYWORDS
Edge Computing, VDI, Replication, Block Device, Data Recovery
ACM Reference Format:
Beom Heyn Kim and Hyoungshick Kim. 2021. Rocky: Replicating Block
Devices for Tamper and Failure Resistant Edge-based Virtualized Desktop
Infrastructure. In Annual Computer Security Applications Conference (ACSAC
’21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA,
12 pages. https://doi.org/10.1145/3485832.3485886
1 INTRODUCTION
Having access to the same desktop environment from any device
and any location has long been an ideal goal of personal computing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485886
Hyoungshick Kim
Sungkyunkwan University
Suwon, Republic of Korea
PI:EMAIL
users. Thus, virtualized desktop infrastructure (VDI) was proposed
as an appealing solution that allows users to accomplish that dream.
With VDI, a desktop environment is encapsulated by a virtual
machine (VM) which runs on a remote server within a local area
network (LAN), and its user connects to the VM via remote desktop
protocol (RDP) from his or her personal computing device as a thin
client. Indeed, there already exist many commercial VDI solutions
such as VMWare Horizon, Citrix Virtual Apps and Desktops and
Microsoft Azure Virtual Desktop. According to the report from Fior
Markets, the VDI market size is expected to reach 38.41 billion US
Dollars by 2027 [29]. However, existing VDI solutions are limited
for users who need to access their VDI services over the wide-area
network (WAN) because of long network latency.
Meanwhile, two newly emerging technologies, 5G and edge com-
puting can shed some light on this problem. It is widely known and
expected that, along with 5G network connection, cloudlets [26],
defined as server-class computers (Tier-2) sitting between user
devices (Tier-3) and the cloud (Tier-1), will significantly reduce
the network latency for user devices to use cloud services. Thus,
EdgeVDI has been proposed to provide VDI for users who need
legacy applications and WAN-mobility by running and migrating
VMs across cloudlets near users [33].
Nevertheless, EdgeVDI can be an attractive target for adversaries
attempting to compromise the desktop environment with malware.
These days, ransomware is one of the most frequently mentioned
high-profile malware because it can be directly converted into a sig-
nificant financial gain via ransoms. EdgeVDI remains as vulnerable
as personal computers as vulnerabilities in RDP, legacy applications,
or OS can be exploited in the same way. DarkSide, a criminal hacker
group behind the Colonial Pipeline attack, compromised contrac-
tor’s accounts and gain unauthorized access to the VDI [12, 37]
to gain a foothold. In addition, ransomware may be embedded in
a virtual machine image file by attackers to bypass endpoint de-
tection mechanisms [40]. Although logging off the session may
rollback the system image and remove the malware automatically,
attackers may have plenty of time to encrypt or delete user data
before logging off once they break into the desktop environment.
Many real-world incidents occurred where the victims of ran-
somware attacks were obliged to pay ransom to the attackers. Re-
cently, Ukrainian police arrested six people behind the Clop ran-
somware attacks, and their attacks cost universities about 500 mil-
lion US dollars for the past two years [16]. Last year, the cost due
to ransomware incidents between the second half of 2019 and the
first half of 2020 was estimated to be over 1 billion US dollars at the
minimum [35]. Therefore, it becomes a challenging issue to prevent
ransomware attacks.
285ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Beom Heyn Kim and Hyoungshick Kim
Several researchers have built various tamper-resistant storage
systems to protect user data against ransomware [3, 19, 45]. How-
ever, those solutions all require modification on hardware architec-
ture or need a special hardware device. Many previous studies have
attempted to design ransomware detection methods [2, 22]. This
line of works has mainly focused on quickly detecting ransomware
activity, trying to reduce the damage done by the attacker but not
on recovering data being tampered with or lost. More crucially,
existing solutions do not work when a cloudlet on which the VM
runs fails. For instance, if a natural disaster like fire destroys a
cloudlet infrastructure, those systems protecting user data against
ransomware become ineffective to prevent data loss. There can be
human errors or component failures leading to catastrophic and
cascading failures in a data center [1].
In this paper, we present Rocky, the first distributed replicated
block device for tamper and failure-resistant EdgeVDI. It provides
security and reliability guarantees related to data availability with-
out requiring any special hardware. First, it can restore the block
device back to the state before data is tampered with by performing
ransomware or wiper malware attacks. Second, it can recover the
coherent block device even if failures lead to the unavailability
of one or more cloudlet infrastructures. The key enabler of those
guarantees is carefully managing the replication of block devices
on distributed cloudlets.
Our key observation is that replicating a consistent totally-ordered
sequence of writes on distributed cloudlets ensures the tamper and
failure-resistant distributed block devices. We designed Rocky’s repli-
cation protocol based on this observation. Each Rocky runs on a
cloudlet, and only one among the ensemble of replicas becomes
active for its user to run the VM on it. As writes occur and mutate
the state of the block device, Rocky replicates those writes in the
same order to other cloudlets. Also, Rocky keeps the write sequence
as the append-only immutable mutation history. Therefore, replay-
ing the write sequence up to the point before a tampering attack
begins can restore the version of block devices that have not yet
been tampered with. In addition, failures of one or more cloudlets
can be recovered by using replicas to rebuild the block device on a
new cloudlet replacing the unavailable one.
Rocky leverages a special cloudlet called connector-cloudlet as a
loosely coupled and asynchronous replication broker. The consis-
tent totally-ordered write sequence is replicated across cloudlets via
the connector-cloudlet. The connector-cloudlet is a logical compo-
nent and can be backed by any cloudlet or by a cloud. The connector-
cloudlet gives each regular cloudlet the freedom of determining
the replication rate for better resource management as cloudlets
may be heterogeneous because different service providers may
operate them. Consequently, cloudlets may have different capabil-
ities. Moreover, replicating through the broker is more efficient
than broadcasting directly between cloudlets because it conserves
network bandwidth consumption for uploading.
Rocky employs two novel replication-related techniques: (1) pe-
riodic mutation snapshot update and (2) periodic prefetch with snap-
shot merging. For periodic mutation snapshot updates, a Rocky
cloudlet batches a sequence of writes performed for a period and
asynchronously flushes the snapshot of blocks mutated with the
batched writes (“dirty blocks”). Because repeated writes to the same
block are reduced to the latest write to that block for a period,
Rocky can efficiently be used in terms of performance and space.
The periodic mutation snapshot update replicates dirty block
snapshots to the connector-cloudlet from which other cloudlets
can asynchronously fetch them in advance before they become
active (“periodic prefetch”). Because both periodic mutation snap-
shot and periodic prefetch allow configuring their period, it allows
Rocky nodes to determine the replication rate at their own pace
considering their resource utilization status. Periodic prefetch uses
snapshot merging. Rocky nodes fetch the meta-data about dirty
blocks uploaded over the last few periods, reduce multiple muta-
tion snapshots into a single merged mutation snapshot (“snapshot
merging”), and fetch the merged snapshot. Thus, repeated writes
are even further reduced, which consequently saves the cost of
replicating dirty blocks. Rocky keeps multiple versions of blocks so
that it can guarantee tamper and failure resistance against malware
and failures.
Rocky is implemented in 3K lines of code in Java. We evaluated
our prototype by running block I/O workload directly to the block
device. The experimental results show that there were 8.4% and
11.9% additional throughput overheads for writes and reads com-
pared to the raw network block device. We also measured how many
repeated writes can be reduced through periodic mutation snapshot
updates and mutation merging for our simulated workflow editing
presentation slides and photos. Consequently, we found repeated
writes were reduced 88.5% and 100%, respectively. In addition, we
provide the proof that Rocky can restore coherent block device in
attack scenarios and that it can recover from failures with minimal
data loss.
We make the following novel contributions in this work:
(1) We develop the first tamper-resistant and failure-resistant
block device for EdgeVDI.
(2) We devise a novel replication protocol involving a replication
broker and employing periodic mutation snapshot update
and periodic prefetch with snapshot merging.
(3) We design and implement a prototype distributed replicated
block devices implementing the proposed techniques (https:
//github.com/Kaelus/Rocky).
(4) We evaluate the prototype to show that it is efficient in terms
of performance and storage space.
In Section 2, we describe details of the target environment, threat
model, failure model, and coherence problem. Then, Section 3 dis-
cusses the architecture of Rocky. Subsequently, recovery procedures
are presented in Section 4, and Section 5 shows the evaluation re-
sults of our empirical study with our prototype system. Section 6
compares our work with related works and we conclude in Sec-
tion 7.
2 PROBLEM STATEMENT
2.1 Target Environment
This section describes the target environment for which we de-
signed Rocky. Figure 1 illustrates the high-level view of the target
environment. Each Rocky block device is installed on a cloudlet,
and a VM uses a Rocky block device as a passthrough device. A
Rocky block device receives and processes VM’s block I/O. For
writes, the Rocky block device replicates the VM’s disk writes to
286Rocky: Replicating Block Devices for Tamper and Failure Resistant Edge-based Virtualized Desktop Infrastructure
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 1: Target Environment. A user accesses the desktop
environment contained in a VM via RDP. As the user travels
(the green dashed line), the virtual machine follows the user
via live migration (the blue dashed line).
other cloudlets’ Rocky block devices via a connector-cloudlet. A
set of Rocky block devices forms an ensemble and collectively pro-
vides the coherent block device for the VM running on top of it.
There is only one active Rocky block device at any given time for
an ensemble. As the VM migrates following its user, the Rocky
block device of the cloudlet which the VM runs on becomes active,
and the previously active device becomes inactive. Thus, only the
active Rocky block device can handle VM’s block I/O requests and
therefore can serialize writes. Unlike conventional VDI solutions,
Rocky intends to support a user who requires WAN mobility. The
user may bring or use any personal computing device (e.g., desktop,
laptop, etc.) to access their desktop environment anywhere beyond
a single LAN.
Threat Model. We assume a powerful active adversary. An adver-
sary is assumed to be capable of compromising a victim’s thin client
device or the desktop environment contained in a VM on a cloudlet.