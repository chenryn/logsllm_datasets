# 【技术分享】你所知道的PHP中的公钥加密可能是错误的

#### 译文声明
本文为翻译文章，原文来自 paragonie.com。
原文地址：[https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong?utm_source=tuicool&utm_medium=referral](https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong?utm_source=tuicool&utm_medium=referral)
译文仅供参考，具体内容及含义以原文为准。

**翻译：pwn_361**
**预估稿费：200 RMB（欢迎投稿！）**
**投稿方式：发送邮件至 [linwei#360.cn](mailto:linwei#360.cn) 或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿**

## 概述
去年，我们的安全团队确认了 CVE-2015-7503 漏洞，即 ZF2015-10。这是一个在使用 RSA 加密过程中出现的功能性漏洞，存在于 Zend 框架的密码库中。该漏洞最初由 Daniel Bleichenbacher 在 1998 年发现，被称为“填充预言”攻击。这种攻击允许攻击者通过多次发送修改过的密文并根据返回的错误标识来恢复原始信息。

尽管这一漏洞已被发现超过十六年，但在我们审查 PHP 软件（包括开源和专有项目）时，仍发现在 2016 年编写的应用层加密协议中存在此漏洞。我们认为主要原因有两个：
1. 大多数开发人员对如何在各种语言中安全地实现公钥加密了解不足。
2. PHP 的 OpenSSL 扩展默认配置不安全，但实际操作中很少有人会修改默认配置。

## 快速解决方案：使用安全的 PHP 公钥加密库
如果你对这些“为什么不安全”的细节不感兴趣，可以直接参考这篇文章：“[为你的 PHP 项目选择正确的加密库](https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide)”。

## RSA 的问题
当涉及应用层加密时，使用 RSA 可能是一个错误。这并不意味着你的应用程序完全失败，但必须避免许多 RSA 实现缺陷。以下是一些 PHP 开发人员可能遇到的问题：

### 1. 默认安全配置会让每个人都上当
在 PHP 中，大多数 RSA 加密实现都使用 `openssl_public_encrypt()` 和 `openssl_private_decrypt()` 函数。这两个函数的默认配置使用 PKCS1 填充方法，而 PKCS1v1.5 填充方法存在“填充预言”攻击的风险。解决方案是始终使用 `OPENSSL_PKCS1_OAEP_PADDING` 常量，以强制使用更安全的 OAEP 填充方法。

然而，在实践中，很少有人这样做。例如：
- ZendCrypt 没有使用 OAEP。
- Sikker (PHP 安全库) 没有使用 OAEP。
- Pikirasa (PHP 加密库) 没有使用 OAEP。
- Minds (一个声称由 Anonymous 支持的社交网络) 没有使用 OAEP。

因此，如果你需要使用公钥算法，请务必检查填充方法。否则，攻击者可能只需要几千条消息就能恢复出明文，从而破坏应用程序的安全性。

### 2. 直接使用 RSA 加密的危险性
即使你已经记住了使用 OAEP，也不应直接使用 RSA 加密长消息。大多数开发者会将消息分割成 214 字节的块进行加密，但这会导致性能问题，并且容易受到 DDOS 攻击。

## 使用混合密码体制
最佳实践是建立混合加密体制，结合对称和非对称密码。这样做的好处包括：
- **效率高**：对称密码加密速度远快于非对称密码。
- **适用性**：对消息长度没有实际限制。
- **安全性**：请看下文。

### 1. 混合 RSA + AES
结合 RSA 和 AES 通常很有必要：
1. 使用对称密钥加密消息。
2. 使用公钥加密对称密钥，以便只有私钥持有者才能解密对称密钥并使用它。

ZendCrypt 自 3.1.0 版本以来已支持混合 RSA-AES 加密体制，并采用了 EasyRSA 库。由于 AES 密钥大小固定，你需要加密的数据只有 16、24 或 32 字节，远小于 2048 位 RSA 最大允许的 214 字节。实际数据加密采用的是 CBC 模式或 CTR 模式的 AES，对于大多数应用程序，这种加密对消息长度没有实际限制。

### 2. 混合 ECDH + Xsalsa20-Poly1305
Libsodium 加密库使用基于椭圆曲线的 DH 密钥交换算法代替 RSA 来协商共享密钥，该共享密钥用于 xsalsa20-poly1305 消息加密和密文认证。相关功能为 `crypto_box()`。另一个功能 `crypto_box_seal()` 用于用接收者的公钥加密数据，使得发送者无法解密。

## 针对 RSA 的模数攻击是一个长期威胁
RSA 的安全性基于大数分解的困难性，但未来面临两个主要威胁：
1. 改进的攻击算法可能比通用数域筛法更快地从公钥中恢复私钥。
2. 量子计算机可以破解椭圆曲线密码体制。

目前认为，一个老练的攻击者可能在几个月内破解 1024 位 RSA，但 2048 位 RSA 仍然安全。然而，如果有一种方法能突破 2048 位 RSA，那么这种方法对 4096 位 RSA 也可能有效。

## 总结
如果你需要在 PHP 应用中添加公钥加密算法：
1. 不要使用 RSA。数字签名也面临许多复杂问题。
2. 如果必须使用 RSA，不要直接使用。最好使用混合加密体制，结合 RSA 和以下之一：
   - AES-256-GCM
   - AES-256-CTR + HMAC-SHA256 (Encrypt then MAC 构造)
3. 确保使用 OAEP 而不是 PKCS1 V1.5 填充。否则，这肯定是一个漏洞。

如果你对漏洞的详细内容感兴趣，可以参阅以下文章：
- “填充预言”攻击：[Bleichenbacher’s CRYPTO 98 paper revealed a chosen ciphertext attack](ftp://ftp.rsa.com/pub/pdfs/bulletn7.pdf)
- 为什么不要使用 PKCS1 v1.5 填充方法
- CVE-2016-1494 (Python – RSA) 数字签名漏洞详解