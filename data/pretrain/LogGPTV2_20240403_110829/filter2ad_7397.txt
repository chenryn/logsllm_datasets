# Seamless Interworking of SDN and IP

**Authors:**
- Pingping Lin†
- Jonathan Hart‡
- Umesh Krishnaswamy‡
- Tetsuya Murakami#
- Masayoshi Kobayashi*
- Ali Al-Shabibi‡
- Kuang-Ching Wang§
- Jun Bi†

**Affiliations:**
- † Institute for Network Sciences and Cyberspace, Tsinghua University; Tsinghua National Laboratory for Information Science and Technology
- ‡ Open Networking Laboratory, Menlo Park, CA, USA
- * NEC Corporation of America
- # IP Infusion
- § Clemson University

## Categories and Subject Descriptors
C.2 [Computer-communication networks]: Architecture and Design.

## Keywords
Software Defined Networking (SDN), SDN-IP Network Peering, BGP, RIB Synchronization, Proactive Flow Installer

## 1. Introduction
Software-Defined Networking (SDN) is a new networking paradigm characterized by the separation of data and control planes, a vendor-agnostic interface such as OpenFlow [3], and a set of abstractions provided by the control plane to simplify network programming and management. Transitioning the existing Internet infrastructure to SDN presents significant challenges and requires innovative solutions for incremental deployment. During this transition, SDN networks must coexist with traditional IP networks, exchanging reachability information, forwarding traffic, and expressing routing policies. This paper proposes a solution for the incremental deployment of SDN networks and their seamless peering with IP networks. The proposed solution has been implemented and evaluated for feasibility and performance.

## 2. SDN-IP Network Peering
### 2.1 Overview
Peering between Autonomous Systems (ASes) on the Internet is typically achieved using Border Gateway Protocol version 4 (BGPv4) [6]. To enable an SDN AS to communicate with IP ASes via BGP, we propose an architecture where the centralized SDN control plane integrates a BGP process. This BGP process handles routing updates with BGP peers on external IP networks, making the entire SDN AS appear as a single router to its peers.

### 2.2 RIB Synchronization
The SDN-IP peering application, which includes a BGP Route module and a Proactive Flow Installer, runs on top of the SDN Network Operating System (NOS). The BGP process sends RIB updates to this application. We designed a RIB synchronization protocol based on a REST API with GET, POST, and DELETE methods to sync the RIB. Additional APIs coordinate behavior after process restarts. The API supports batching of RIB updates to send multiple updates in a single POST request. Future improvements will include re-implementing the protocol using a connection-based mechanism to enhance speed, reliability, and scalability.

#### Table 1: REST API for RIB Synchronization
| Function | REST API |
|----------|----------|
| Initialization / Restart | `/wm/bgp//` |
| Single update | `/wm/bgp///` |
| Batched updates | `/wm/bgp//rib/json` |

### 2.3 Proactive Flow Installer
The Proactive Flow Installer converts each route in the RIB to flow entries in the FIB (Forwarding Information Base) and proactively calculates and installs these entries onto OpenFlow switches in the SDN AS. This action is triggered by BGP updates. To reduce churn on the OpenFlow switches when BGP routes change, we use a concept of SDN edge and core. Prefix-based lookup is performed at the first-hop switch, while MAC-based forwarding is used in the SDN core. A full-mesh of flow paths is proactively installed between all pairs of gateway OpenFlow switches based on their MAC addresses. These flow paths are updated only when the internal SDN topology changes. At the first-hop switch, flow entries match external IP prefixes and forward packets to the next-hop router learned from BGP. When the next-hop for an IP prefix changes, only the flow entry in the first-hop switch needs to be updated, which occurs at the frequency of BGP route updates.

### 2.4 Discussion on BGP Speaker
We chose a logically centralized BGP process for simplicity and correctness. Since all external paths are selected by BGP, we ensure that BGP semantics are not broken and routing loops are avoided. Additional benefits include centralized monitoring and software upgrades. The BGP process must scale with the number of peers and the size of the RIB. In public IP peering use cases, a single BGP process can handle the full Internet routing table and the number of BGP peers. For service provider Virtual Private Networks (VPNs), multiple BGP processes may be needed to handle higher peer scaling. Our demo implementation uses a single BGP process.

There are two methods to get BGP packets from the gateway OpenFlow switches to the BGP process:
1. Provision BGP flows from all gateway switches to a server or VM running the BGP process.
2. Intercept BGP packets at the gateway switch and shunt them to the BGP process through the control channel.

The first approach is easier to provision but can stress the slow control path of OpenFlow switches. Our demo uses the first approach, while the deployment in Section 5 uses the second approach.

## 3. Demo Implementation
The BGP process is ZebOS BGPd [5], modified to send RIB updates to the SDN-IP peering application. The SDN AS is controlled by ONOS (an experimental distributed SDN Operating System) [2]. The SDN-IP network peering is implemented as an application on ONOS. The demo network is emulated using Mininet [1]. Figure 3 shows the demo topology with SDN AS1 peering with three IP ASes.

### Functional Test
We created an inter-AS flow from a host in SDN AS1 to AS2 and a transit flow from AS3 to AS2. We demonstrated successful re-convergence when SDN internal links or SDN-IP external links fail.

### Performance Test
The SDN-IP peering application can scale to 10,000 RIB entries. The BGP process consumes 580 Mbytes of physical memory, while the SDN-IP peering application (together with ONOS) consumes about 460 Mbytes (see Figure 4). It can process 100 RIB updates per second.

## 4. Related Work
RouteFlow [4] is one of the first implementations of IP routing on OpenFlow switches. RouteFlow instantiates a VM for each OpenFlow switch with as many virtual network interfaces as there are active ports in the corresponding device, and runs a stack of open-source routing protocols on the virtual topology. All control messages are exchanged between VMs as if they are running a distributed control plane. This solution incurs the overhead of distribution without the benefits of scale. The SDN-IP Peering Application is a simpler design, better integrated with SDN, and easier to implement advanced features such as traffic engineering and policy-based routing through the SDN domain.

## 5. Future Work
In collaboration with Google and REANNZ, we will deploy the SDN-IP network peering system to a small active SDN network in Wellington, New Zealand. Following this deployment, we plan to improve the scalability and fault tolerance of the system.

## 6. References
[1] Mininet: http://mininet.org.
[2] ONOS: http://onlab.us/tools.html.
[3] OpenFlow Specification: http://www.openflow.org/wp/documents/.
[4] RouteFlow: http://cpqd.github.io/RouteFlow/.
[5] ZebOS: http://www.ipinfusion.com/products/zebos-network-platform.
[6] BGP [RFC 4271]: http://www.ietf.org/rfc/rfc4271.txt.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism. It also ensures that the content is well-structured and easy to follow.