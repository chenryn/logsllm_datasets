### 日志解析

#### 1. 日志的解析
日志解析的主要目的是从日志中提取用户认为重要的字段。这需要用户熟悉解析规则的配置。例如，对于以下日志条目：
```
192.168.1.103 - - [01/Aug/2014:12:07:39 +0800] "GET / HTTP/1.1" 200 3228 "-" "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322; .NET4.0C)"
```
可以抽取出以下字段：
- `ua`: `"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322; .NET4.0C)"`
- `os`: `"Windows XP"`
- `os_v`: `"Windows XP"`
- `browser`: `"IE"`
- `browser_v`: `"IE 8.0"`
- `device`: `"Other"`
- `clientip`: `"192.168.1.103"`
- `status`: `200`
- `resp_len`: `3228`
- `method`: `"GET"`
- `version`: `"1.1"`

#### 2. 正则解析
正则表达式是处理文本解析的强大工具。例如，对于以下日志条目：
```
2014-05-14 23:24:47 15752 [Note] InnoDB: 128 rollback segment(s) are active
```
可以使用以下正则表达式来提取以下字段：
- `timestamp`: `2014-05-14 23:24:47`
- `pid`: `15752`
- `loglevel`: `Note`
- `message`: `InnoDB: 128 rollback segment(s) are active`

正则表达式如下：
```
(?<timestamp>\S+ \S+) (?<pid>\S+) \[(?<loglevel>\S+)\] (?<message>.*)
```
其中：
- `\S` 表示匹配非空格字符。
- `\S+` 表示匹配连续的非空格字符。
- `(?<key>value)` 表示提取名为 `key` 的字段，其值为 `value`。

除了标准的正则表达式，我们还提供了一些常用的正则表达式，可以通过 `%{XXX}` 的方式引用。例如：
- `%{NOTSPACE}` 可以代替 `\S+`。
- 修改后的正则表达式为：
  ```
  (?<timestamp>%{NOTSPACE} %{NOTSPACE}) %{NOTSPACE:pid} \[%{NOTSPACE:loglevel}\] %{GREEDYDATA:message}
  ```

默认情况下，提取的字段值是字符串类型。如果用户希望将其转换为数值类型（如 `int` 或 `float`），可以在引用中加入类型信息，例如：
- `%{XXX:int}`
- `%{XXX:float}`

#### 3. 常用的正则表达式
- **基本**:
  - `%{NUMBER}`: `(?:%{BASE10NUM})`
  - `%{POSINT}`: `\b(?:[1-9][0-9]*)\b`
  - `%{NONNEGINT}`: `\b(?:[0-9]+)\b`
  - `%{WORD}`: `\b\w+\b`
  - `%{NOTSPACE}`: `\S+`
  - `%{SPACE}`: `\s*`
  - `%{MORESPACE}`: `\s+`
  - `%{DATA}`: `.*?`
  - `%{GREEDYDATA}`: `.*`
  - `%{IP}`: 略
  - `%{PORT}`: 略

- **Apache/Nginx**:
  - `%{ApcClientIP}`
  - `%{ApcIdent}`
  - `%{ApcUser}`
  - `%{ApcTimestamp}`
  - `%{ApcStatus}`
  - `%{ApcRespLen}`
  - `%{ApcReferer}`
  - `%{ApcUa}`
  - `%{ApcXForward}`
  - `%{ApcRequest}`

例如，对于以下原始日志：
```
192.168.1.139 - - [24/Jan/2015:17:03:49 +0800] "GET /api/v0/search/fields/?field=tag&filters=&order=desc&page=1&query=*size=50&sourcegroup=all&sourcegroupCn=%E6%89%80%E6%9C%89%E6%97%A5%E5%BF%97&time_range=-2d,now&type=fields HTTP/1.1" 200 363 "http://alltest.rizhiyi.com/search/?query=*time_range=-2d%2Cnow&order=desc&size=20&page=1&sourcegroup=all&type=timeline&_t=1422088066859&title=%E9%BB%98%E8%AE%A4&index=0" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:35.0) Gecko/20100101 Firefox/35.0"
```
可以使用以下配置进行解析：
```
%{ApcClientIP} %{ApcIdent} %{ApcUser} %{ApcTimestamp} %{ApcRequest} %{ApcStatus} %{ApcRespLen} %{ApcReferer} %{ApcUa}
```

#### 4. KeyValue分解
KeyValue分解主要用于解析明显的键值对字符串。例如，上例中的 `request_query` 字段为：
```
field=tag&filters=&order=desc&page=1&query=*size=50&sourcegroup=all&sourcegroupCn=%E6%89%80%E6%9C%89%E6%97%A5%E5%BF%97&time_range=-2d,now&type=fields
```
这是一个按照 `&` 和 `=` 分割的键值对字段。添加解析规则：KeyValue分解，源字段选择 `request_query`，定义字段间分隔符为 `&`，定义键值分隔符为 `=`。

#### 5. 数值型字段转换
默认提取出来的字段都是字符串类型。如果用户希望将这些值转换为数值类型（如 `int` 或 `float`）以便后续统计，可以通过此功能进行转换。例如：
- `k1: "123"` 转换为 `k1: 123`
- `k2: "123.0"` 转换为 `k2: 123.0`

#### 6. URL解码
将编码过的URL进行解码，这个操作只能针对已经解析出来的字段。

#### 7. User Agent解析
分析HTTP日志中的User Agent字段，提取用户操作系统和浏览器信息。

#### 8. 时间戳识别
通常用户关心日志发生的时间。例如，检索最近几天的日志，需要转换日志中的 `timestamp` 字段内容。例如：
- `timestamp: "150120 16:00:30"`

#### 9. JSON解析
JSON解析用于解析JSON格式的日志。例如，原始日志为：
```json
{
  "Name": "John Smith",
  "Age": 23,
  "Employed": true,
  "Address": {
    "Street": "324 Chrome St",
    "City": "Portland, New York, Los Angeles",
    "Country": "United States"
  }
}
```

#### 10. 字段值拆分
将字符串切分为多个值。例如：
- `key: "1.2.3.4, 2.4.5.6"`
可以根据 `,` 将其拆分为两个值：
- `key: ["1.2.3.4", "2.4.5.6"]`

### 搜索

#### 1. 搜索方法
- **范围查询**：快速发现满足一定条件参数的事件，例如检索Apache Web服务器响应时间大于200ms的事件。
- **正则表达式**：定义查询模板简化搜索输入。例如，搜索名为 `app01-app99` 的机器，可以输入 `/app[0-2][0-9]/` 来简化搜索。
- **布尔值**：利用 `AND`、`OR`、`NOT` 和括号组合，构造复杂查询语句。
- **字段过滤**：快速显示所有结构化/半结构化字段的统计聚合，点击字段值进行过滤操作。
- **高级搜索**：使用 `transaction`、`eval` 等命令进行关联分析等高级搜索。

#### 2. 搜索组件
在进行搜索之前，请了解以下几个重要概念：
- **日志分组**：日志数据的逻辑分组，通过主机名、应用程序、标签进行定义。
- **查询语句**：搜索框中的查询语句。
- **时间范围**：使用下拉菜单选择预设或自定义时间范围。
- **字段过滤**：快速增加搜索条件。

#### 3. 搜索策略比较
- **结构化 vs. 非结构化日志搜索**：支持结构化（如JSON）和非结构化（如Apache日志）日志的自动解析。
- **搜索查询 vs. 字段过滤**：直接在搜索框中输入查询语句或使用字段过滤。
- **统计视图**：可视化展示搜索结果，便于统计分析。
- **多TAB页工作区域**：每个TAB标签页代表一次搜索的内容。
- **日志分组**：每次搜索只能在一个日志分组中进行。
- **搜索语法帮助**：点击搜索框右侧的标记查看搜索语法帮助。
- **时间范围选择**：使用下拉菜单选择预设或自定义时间范围。
- **字段列表**：选择过滤字段，缩小检索范围。
- **直方图**：显示随时间统计的日志事件数量，可选择时间段查看详细事件。
- **字段列表**：显示字段值及其统计计数，支持单选或组合过滤。
- **搜索结果展现方式**：事件视图（原始日志及抽取的字段）、表格模式（特定字段及其对应值）、统计视图（图表展示）。

### 统计视图

每次搜索都会生成简单直观的时间序列趋势图。以下是统计视图的功能要求：

#### 1. 事件计数统计
- 选择“展现方式”和“添加字段”，绘制事件随时间推进的计数和数值统计。
- 依次选取多个字段，便于比较查看。
- 勾选“独立数统计”进行去重统计。

#### 2. 时间分段统计
- 选择“时间分段统计”，选取字段并设定时间分段。
- 时间分段必须包含在搜索的时间范围内且不重叠。
- 按时间统计事件计数，并进行环比统计。

#### 3. 数值分段统计
- 选择“数值分段统计”，选择字段并设定数值分段范围。
- 添加新的数值分段后，生成柱状图。

#### 4. 时间直方图
- 选择时间直方图，设定“时间间隔”并选择合适的时间单位。
- 生成相应的直方图。

#### 5. 数值直方图
- 选择数值直方图，设定“数值间隔”并生成图表。
- 注意数值间隔设定值过小可能导致图表不可用。

#### 6. 字段值分类统计
- 选择“字段值分类统计”，显示该字段的所有值的比例。
- 生成相应的统计表格，显示出现次数最多的前几个字段值名称及统计次数。

#### 7. 字段数值统计
- 对字段的数值属性进行统计分析，支持总计、平均值、最大值、最小值四种选项。

#### 8. 累计百分比统计
- 对数值字段的数值大小分布进行统计。
- 默认百分比分段设置为1%、5%、25%、50%、75%、95%、99%，用户可调整或增加新的分段。

#### 9. 反向查询
- 通过反向查询功能，查找与当前搜索结果相关的其他日志事件。