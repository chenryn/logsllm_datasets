 Loading the BPF program in the kernel
Attaching BPF programs to events
Reads/writes with BPF maps
Language front-end APIs for composing BPF tools: Python, C++, and lua
This is pictured in Figure 4-5.
BCC
User
Kernel
C++
Python
Events
0
sints pe
BPF
sltach
Rewriter
Clang
BPF
LLVM
BPFC
Bytecode
Table
tpf_prog_load)
srin_eg2_NiR0
perf buffer
USDT
Figure 4-5 BCC intemals
The BPF, Table, and USDT Python objects pictured in Figure 4-5 are wrappers to their
implementation in libbcc and libbcc_bpf.
---
## Page 158
4.12 BCC Debugging  121
The Table object interacts with BPF maps. These tables have become BPF items of the BPF object
(using Python *magic methods,” like getitem_), such that the following lines are equivalent:
counts = lb,get_table (*counts*)
[squnoo1g = squmog
USDT is a separate object in Python, as its behavior is dlifferent from kprobes, uprobes, and
tracepoints. It must be attached to a process ID or path during initialization because, unlike other
event types, some USDT probes require semaphores to be set in the process image to activate
them. These semaphores can be used by the application to determine whether the USDT probe is
currently in use and whether to prepare its arguments, or if that can be skipped as a performance
optimization.
The C++ components are compiled as libbcc_bpf and libbcc, which are used by other software
(e.g-, bpftrace) libbcc_bpf is from the Linux kernel source under tools/lib/bpf (and it originated
from BCC)
The steps that BCC takes to load a BPF program and instrument events are:
1. The Python BPF object is created, and a BPF C program is passed to it.
2. The BCC rewriter pre-processes the BPF C program, replacing dereferences with bpf_probe,
read() calls.
3. Clang compiles the BPF C program into LLVM IR.
4. BCC codegen adds adkditional LLVM IR, as needed.
5. LLVM compiles the IR into BPF bytecode.
6. Maps, if used, are created.
7. The bytecode is sent to the kernel and checked by the BPF verifiet.
S. Events are enabled, and BPF programs are attached to the events.
9. The BCC program reads instrumented data either via maps or the perf_event buffer
The next section sheds more light on these internals.
4.12BCCDebugging
There are various ways to debug and troubleshoot BCC tools other than inserting printf()
statements This section summarizes print statements, BCC debug modes, bpfist, and resetting
events. If you are reading this section because you are troubleshooting an issue, also check
Chapter 18, which covers common issues such as missing events, missing stacks, and missing
symbols.
Figure 4-6 shows the flow of program compilation and the various debugging tools that can be
used for inspection along the way.
---
## Page 159
122
Chapter 4 BCC
Program Debug Tools
State Debug Tools
BPF bcc C
cat fite.py
bcc Process
bpflist
/f1te.py..ebof
BPFC
BPF(debug=DEBUG_PREPROCESSOR)
Maps
bpflist
bpftool nap show
LLVM IR
8PF (debug=DEBUG_LLVM_IR)
Programs
Attached
bpftool prog shov
bpflist
BPF Bytecode
8PF (debug=DEBUG_BPF)
bpftool prog dunp xlated
kprobes
sagoudn
bpflist -w
Machine Code
bpftool prog dutpjitted
Kernel Errors: dnesg
Figure 4-6
BCC debugging
These tools are explained in the following sections
4.12.1
printf() Debugging
Debugging with printf( can feel like a hack compared to using more sophisticated debugging
tools, but it can be effective and fast. printf( statements can be added not only to the Python
code for debugging but also to the BPF code. There is a special helper function for this: bpf_trace,
printk(). It emits output to a special Ftrace buffer, which can be read via cat(1) of the /sys/kernel/
debug/tracing/trace_pipe files.
As an example, imagine that you have an issue with the biolatency(8) tool where it's compiling
and running, but the output seems amiss. You could insert a printf() statement to confirm that
probes are firing and that the variables used have the values they should have. Here is an example
of an addition to biolatency.py, highlighted in bold:
[. .-]
// tine block I/0
1
u64 ts = bpf_ktine_get_ns () 
stazt.update [&req, st.s) :
bpf_trace_printk (*sDG req=411x ts=411d\\n", req, ts) :
uxn9
[ . - - ]
The “BDG* here is just my initials, added to clearly identify the output as being from my own
debug session.
---
## Page 160
4.12 BCC Debugging
123
The tool can now be run:
1/biolatency-PY
Tracing block device I/0... Hit CtrlC to end.
and in another terminal session, the Ftrace trace_pipe file can be read with cat(1):
 cat /sys/kernel/debug/tracing/trace_pipe
[..-]
kxorker/4 :1B409
[004] *.2542952,834645: 0x00000001: BDG
req=ffcf8934c90a1a00 ts=2543018287130107
dmcrypt_vrite-354
[004] -. 2542952.836083: 0x00000001: BDG
req=ffcf8934c7dr3600 ts=2543018288564980
dmcrypt_vrite354
[004] -. 2542952.836093: 0x00000001: BDG
req=ffrf8934c7df3800 ts=2543018288578569
kxorker/4:1B-409
[004]. 2542952,836260: 0x0000001: BDG
req=ffcf8934c90ala00 ts=254301828874416
kxorker/4:18-409[004] .... 2542952.837447: 0x00000001: BDG
req=ffrf8 934c7dr3800 ts=2543018289932052
dscrypt_xrite-354[004]..-, 2542953. 611762: 0x000001: BDG
req=ffff8934c7df3800 ts=2543019064251153
kxorker/u16:45415[005] d... 2542954.163671: 0x00000001: BDG
req=ffcf8931622fa000 ta=2543019616168T85
The output has various default fields that Ftrace adds, followed by our custom bpf_trace_printk()
message at the end (which has line-wrapped).
If you cat(1) the trace file instead of trace_pipe, headers will be printed:
 cat /sys/kezne1/debug/tracing/trace
 traceri nop
=> irqs-off
/ _-*--=> need=xesched
+
1 /
-=> hardirq/softirq
#
11/ _--=> preenpt-depth
 111/
delay
TASK-PIDCKO#1111
TIMESTANPFUNCTION
—1111
kxorkez/u16:131496 [000] d... 2543476.300415: 0x00000001: BDC
reg=ffff89345af53c00 ts=2543541760130509
reg=fff89345af54c00 ts=2543543776117611
kxorker/u16:4-5415 [000] d... 2543478.316378: 0×00000001: BDG
[ . - - ]
---
## Page 161
124
Chapter 4 BCC
The differences between these files are:
=trace: Prints header; doesn't block.
•trace_pipe: Blocks for more messages and clears messages as it reads them.
This Ftrace buffer (viewed via trace and trace_pipe) is used by other Ftrace tools, so your debug
messages may get mixed up with other messages. It works well enough for debugging and, if
needed, you can filter the messages to see only those of interest (e.g., for this example, you could
use: grep BDG /sys/ . . . / trace).
With bpftool(8), covered in Chapter 2, you can print the Ftrace buffer by using: bptoo1 prog
tracelog-
4.12.2 BCC Debug Output
oou ndpno Snqap Suuad sog suogdo apraod Apeape 'α (s)punoooung se qons *sjoo auos
the tool USAGE message (with h or be1p) to see if a tool has this option. Many tools have an
undocumented obpf option, which prints the final BPF program that the tool has generated.
For example:
opensnoop --ebpf
#include 
include 
#Include 
struct va1_t {
u64 id;
chaz conn [TASK_coe_LEN]
const char *fnaner
struct data_t [
u64 id;
u64 t.s,
u32 uid,;
int ret;
char conn [TASK_CoMe_LEN] 
chaz [nane [NAME_AX]:
J
BPF_HAsH(infotrp, u64, struct val_t)
7 The ebpf option was added to support a BCC PCP PMDA (see Chapter 17), and since it was not realy intended for
end-user use, it is not documented in the ussge message to avoid clutter
---
## Page 162
4.12 BCC Debugging125
BPF_PERF_OUTPUT (events) ;
int trace_entrylstruct pt_regs *ctx, int dfd, const char user *filenane, int flags)
struct val_t va] = (
u64 1d = bpf_get_cuzrent_pld_tgid1);
u32 pid = id >> 32; // PID is higher part
u32 tid = 1d;
// Cast and get the lovez part
u32 uid = bpf_get_eurrent_uid_gid1);
[.--]
This may be useful in cases where the BPF program is rejected by the kernel: You can print it out
and check for issues.
4.12.3
BCC Debug Flag
BCC provides a debugging capability that is available for all tools: adding the debug flag to the
BPF object initializer in the program. For example, in opensnoop.py, there is the line:
[4xagdq=1xa4) a  q]
This can be changed to include a debug setting:
b = BPF (text=bpf_text., debug=0x2)
This prints BPF instructions when the program is run:
doousuado 1
(0t+ [3) (+ 9n) ▪ = Lx (6c] 10
1: (b7) r] = 0
[x = (8- 0x] [+ 9n] • (q] z
[ = [9π 0z] [ 9n]  (q) 1
[a = [z- 0x] [+ 9n]  (q] 
[3 = [2c- 0↑x) [< 9n]  (q] 1§
5:(85) ca11 bpf_get_cuzrent_pld_tgia#14
7: (bf) r6 = c0
93 = [0- 0tx] [+ 9n]  (q] 8
9: (85) call bpf_get_ouerent_uid_gid15
10: (bf) r1 = r10
11: (07) r1 += -24
12 : (b7) r2 = 16
13: (85) cal1 bpf_get_current_commf16
14: (67) r0 <<= 32
[...]
---
## Page 163
126
Chapter 4 BCC
The BPF debugging options are single-bit flags that can be combined. They are listed in src/cc/
bpf_module.h and shown here:
Bit
Name
Debug
0x1
DEBUG_LLVM_IR
Prints a compiled LVM intermediate representation
0x2
DEBUG_BPF
Prints BPF bytecode and registers state on branches
0x4
DEBUG_PREPROCESSOR
Prints a pre-processor result (similar to --ebpt)
8x0
DEBUG_SOURCE
Prints ASM instructions embedded with source
0x10
DEBUG_BPF_REGISTER_STATE
Prints the register state on all instructions
0x20
DEBUG_BTF
Prints BTF debugging (BTF errors are otherwise ignored)
debug=Ox1f prints everything, which can be dozens of pages of output.
4.12.4
bpflist
The bpflist(8) tool in BCC lists tools that have running BPF programs along with some details. For
example:
+bpflist
PID
CONX
TYPE
cOUNT
dooosudo1700
prog
2
30231
opensnoop
nap
2
This shows that the opensnoop(8) tool is running with PID 30231 and is using two BPF programs
and two maps. This makes sense: opensnoop(8) instruments two events with a BPF program for
each, and has a map for information between probes and a map for emitting data to user space.
A v (verbose) mode counts kprobes and uprobes, and vv (very verbose) counts and lists kprobes
and uprobes. For example:
 bpflist -vv
open kprobes:
p: kpzobes/p_do_sys_open_bcc_31364 do_sya_open
r1kprobes/t_do_sys_open_bcc_31364 do_sys_open
open uprobes:
PI0
coMet
38X1
COUNT
1
systend
prog
6
puaqs.fs
map
31364
opensnoop
nap
31364
dooosusdo
kprobe
2
31364
opensnoop
prog
---
## Page 164
4.12 BCC Debugging 127
A atL (#9EIE CIId) doousuado pue (I Cd) puaqsis :Buqurun suesSord ddg om smoqs sLL
mode also lists open kprobes and uprobes. Note that the PID consumer, 31364, is encoded in the
kprobe names.
4.12.5 bpftool
bpftool is from the Linux source tree, and can show running programs, list BPF instructions
interact with maps, and more. It is covered in Chapter 2.
4.12.6 dmesg
Sometimes a kernel error from BPF or its event sources appears in the system log and can be
viewed using dmesg(1). For example:
1@nesg
[..]
[8470s06,869945] trace_kprobe: Could not Insext probe at vfs_read+0: -2
This is an error about attempting to create a kprobe for the vfs_rread() kernel function; it is a typo
as vfs_read() does not exist.
4.12.7 Resetting Events
Developing software typically involves a cycle of writing new code and then fixing bugs. When
introxducing bugs in BCC tools or libraries, you may cause BCC to crash after tracing has been
enabled. This can leave kernel event sources in an enabled state with no process to consume their
events, costing some needlless overhead.
This was an issue with the older Ftrace-based interfaces in /sys, which BCC originally used for
instrumenting all event sources with the exception of perf_events (PMCs). perf_events used perf_
event_open(), which is file-descriptor based. A benefit with perf_event_open() is that a crashing
process triggers kernel cleanup of its file descriptors, which then triggers cleanup of its enabled
event sources. In Linux 4.17 and later, BCC has switched to the perf_event_open() interface for all
event sources, so leftover kernel enablings should become a thing of the past.
If you are on an older kernel, you can use a tool in BCC called reset-trace.sh, which cleans up
the Ptrace kernel state, removing all enabled tracing events. Only use this tool if you know there
are no tracing consumers still running on the system (not just BCC, but any tracer), as it will
prematurely terminate their event sources.
Here is some output from my BCC development server:
 reset-trace.sh -v
Reseting tracing state...
Checking /sya/kernel/debug/ tracing/kprobe_event.s
Needed to reset/sys/kernel/debug/ tzacing/kprobe_event.
---
## Page 165
128
Chapter 4 BCC
kprobe_events, before (line enumerated) :
1r:kprobes/r_d_1ookup_1_bcc_22344 α_lookup
2 p:kprobes/p_d_1ookup_1_bce_22344 d_lookup
3 p:kprobes/p_lookup_fast_1_bcc_22344 lcokup_fast
4 p:kprobes/p_sys_execve_1_bcc_12659 ays_execve
..-]
kprobe_events, after (line enuneratedl :
Checking /sys/kernel/debug/tracing/uprobe_erents
Needed to reset /ays/kezne1l/Gebug/ tzacing/uprobe_event.a
uprobe_events, before (line enumerated) :
1 p:uprobes/pproc_elf_ex_17447s_1_bcc_22344 /proc/self/exe:0xoo0ooooooo174476
2 p:uprobes/p__bin_bash_ad610_1_bcc_12827 /bin/bash:0x00000000000ad610
3 r:uprobes/r__bin_bash_ad610_1_bcc_12833 /bin/bash:0x00000000000ad610
4 p:uprobes/p__bin_bash_8b860_1_bcc_23181 /bin/bash:0x000000000008b860
[ . - - ]
uprobe_events, after (line enunerated) 1
Checki.ng /sys/kernel/debug/tracing/trace
Checking /ays/kernel/debug/tracing/curzent_tracer
Checking/sys/kernel/debug/tracing/set_ftrace_filter
Checking /ays/kernel/debug/tracing/set_graph_function
Checking /sys/kernel/debug/tracing/set_ftrace_pid
Checking /sys/kerne1/debug/tracing/events/enable
Checking /sys/kernel/debug/ tracing/tracing_thresh
Checking /ays/kernel/debug/tracing/cxacing_on
Done .
In this verbose mode of operation (v), all the steps reset-trace.sh is performing are printed. The
blank lines in the output, after resetting kprobe_events and uprobe_events, show that the reset
was successful.
4.13Summary