函数的参数是否有经过安全处理 
防范方法： 
对于数据进行精确匹配 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
7.  HTTP 响应拆分 
PHP 中可导致 HTTP 响应拆分的情况为：使用 header 函数和使用$_SERVER 变量。注意 PHP
的高版本会禁止 HTTP 表头中出现换行字符，这类可以直接跳过本测试。 
防范方法： 
1. 精确匹配输入数据 
2. 检测输入输入中如果有\r 或\n，直接拒绝 
8.  文件管理 
PHP 的用于文件管理的函数，如果输入变量可由用户提交，程序中也没有做数据验证，可
能成为高危漏洞。我们应该在程序中搜索如下函数：copy、rmdir、unlink、delete、fwrite、
chmod、fgetc、fgetcsv、fgets、fgetss、file、file_get_contents、fread、readfile、ftruncate、
file_put_contents、fputcsv、fputs，但通常 PHP 中每一个文件操作函数都可能是危险的。 
http://ir.php.net/manual/en/re 
f.filesystem.php 
防范方法： 
1. 对提交数据进行严格匹配 
2. 限定文件可操作的目录 
9.  文件上传 
PHP 文件上传通常会使用 move_uploaded_file，也可以找到文件上传的程序进行具体分析 
防范方式： 
1. 使用白名单方式检测文件后缀 
2. 上传之后按时间能算法生成文件名称 
3. 上传目录脚本文件不可执行 
4. 注意%00 截断 
10. 
 变量覆盖 
PHP 变量覆盖会出现在下面几种情况： 
1. 遍历初始化变量 
例： 
foreach($_GET as $key => $value) 
$$key = $value; 
2. 函数覆盖变量：parse_str、mb_parse_str、import_request_variables 
3. Register_globals=ON 时，GET 方式提交变量会直接覆盖 
防范方法： 
1. 设置 Register_globals=OFF 
2. 不要使用这些函数来获取变量 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
11. 
 动态函数 
当使用动态函数时，如果用户对变量可控，则可导致攻击者执行任意函数。 
例： 
]; 
$myfunc(); 
?> 
防御方法： 
不要这样使用函数 
3. 
 会话安全 
1.  HTTPOnly 设置 
session.cookie_httponly = ON 时，客户端脚本(JavaScript 等)无法访问该 cookie，打
开该指令可以有效预防通过 XSS 攻击劫持会话 ID 
2.  domain 设置 
检查 session.cookie_domain 是否只包含本域，如果是父域，则其他子域能够获取本域的
cookies 
3.  path 设置 
检查 session.cookie_path，如果网站本身应用在/app，则 path 必须设置为/app/，才能
保证安全 
4.  cookies 持续时间 
检查 session.cookie_lifetime，如果时间设置过程过长，即使用户关闭浏览器，攻击者
也会危害到帐户安全 
5.  secure 设置 
如果使用 HTTPS，那么应该设置 session.cookie_secure=ON，确保使用 HTTPS 来传输
cookies 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
6.  session 固定 
如果当权限级别改变时（例如核实用户名和密码后，普通用户提升到管理员），我们就应
该修改即将重新生成的会话 ID，否则程序会面临会话固定攻击的风险。 
7.  CSRF 
跨站请求伪造攻击，是攻击者伪造一个恶意请求链接，通过各种方式让正常用户访问后，
会以用户的身份执行这些恶意的请求。我们应该对比较重要的程序模块，比如修改用户密码，添
加用户的功能进行审查，检查有无使用一次性令牌防御 csrf 攻击。 
4. 
 加密 
1.  明文存储密码 
采用明文的形式存储密码会严重威胁到用户、应用程序、系统安全。 
2.  密码弱加密 
使用容易破解的加密算法，MD5 加密已经部分可以利用 md5 破解网站来破解 
3.  密码存储在攻击者能访问到的文件 
例如：保存密码在 txt、ini、conf、inc、xml 等文件中，或者直接写在 HTML 注释中 
5. 
 认证和授权 
1.  用户认证 
检查代码进行用户认证的位置，是否能够绕过认证，例如：登录代码可能存在表单注入。 
检查登录代码有无使用验证码等，防止暴力破解的手段 
1.  函数或文件的未认证调用 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
一些管理页面是禁止普通用户访问的，有时开发者会忘记对这些文件进行权限验证，导致漏洞发
生 
某些页面使用参数调用功能，没有经过权限验证，比如 index.php?action=upload 
3.  密码硬编码 
有的程序会把数据库链接账号和密码，直接写到数据库链接函数中。 
6. 
 随机函数 
1.  rand() 
rand()最大随机数是 32767，当使用 rand 处理 session 时，攻击者很容易破解出 session，
建议使用 mt_rand() 
2.  mt_srand()和mt_rand() 
e="text-indent: 0.85cm; margin-bottom: 0cm; line-height: 125%">PHP4 和 PHP5、
PHP 4.3.7、PHP 4.3.6、PHP 4.3.3、PHP 4.3.2、PHP 4.3.1、PHP 4.3.0、PHP 4.2.3、PHP 
4.2.2、PHP 4.2.1、PHP 4.2.0、PHP 4.2-dev、PHP 4.1.2、PHP 4.1.1、PHP 4.1.0、PHP 4.1、
PHP 4.0.7、PHP 4.0.6、PHP 4.0.5、PHP 4.0.4、PHP 4.0.3pl1、PHP 4.0.3、PHP 4.0.2、
PHP 4.0.1pl2、PHP 4.0.1pl1、PHP 4.0.1 
2.  session_destroy()删除文件漏洞 
影响版本：不祥，需要具体测试 
测试代码如下： 
当我们提交 cookie:PHPSESSIONID=/../1.php，相当于删除了此文件 
3.  unset()-zend_hash_del_key_or_index 漏洞 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
zend_hash_del_key_or_index PHP4 小于 4.4.3 和 PHP5 小于 5.1.3，可能会导致
zend_hash_del 删除了错误的元素。当 PHP 的 unset()函数被调用时，它会阻止变量被 unset。 
9. 
 信息泄露 
1.  phpinfo 
如果攻击者可以浏览到程序中调用 phpinfo 显示的环境信息，会为进一步攻击提供便利 
10.  PHP 环境 
1.  open_basedir 设置 
open_basedir 能限制应用程序能访问的目录，检查有没有对 open_basedir 进行设置，当
然有的通过 web 服务器来设置，例如：apache 的 php_admin_value，nginx+fcgi 通过 conf 来控
制 php 设置 
2.  allow_url_fopen 设置 
如果 allow_url_fopen=ON，那么 php 可以读取远程文件进行操作，这个容易被攻击者利用 
3. > allow_url_include 设置 
如果 allow_url_include=ON，那么 php 可以包含远程文件，会导致严重漏洞 
4.  safe_mode_exec_dir 设置 
这个选项能控制 php 可调用的外部命令的目录，如果 PHP 程序中有调用外部命令，那么指
定外部命令的目录，能控制程序的风险 
5.  magic_quote_gpc 设置 
这个选项能转义提交给参数中的特殊字符，建议设置 magic_quote_gpc=ON 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
6.  register_globals 设置 
开启这个选项，将导致 php 对所有外部提交的变量注册为全局变量，后果相当严重 
7.  safe_mode 设置 
safe_mode 是 PHP 的重要安全特性，建议开启 
8.  session_use_trans_sid 设置 
如果启用 session.use_trans_sid，会导致 PHP 通过 URL 传递会话 ID，这样一来，
攻击者就更容易劫持当前会话，或者欺骗用户使用已被攻击者控制的现有会话。 
9.  display_errors 设置 
如果启用此选项，PHP 将输出所有的错误或警告信息，攻击者能利用这些信息获取 web 根
路径等敏感信息 
10. 
expose_php 设置 
如果启用 expose_php 选项，那么由 PHP 解释器生成的每个响应都会包含主机系统上
所安装的 PHP 版本。了解到远程服务器上运行的 
PHP 版本后，攻击者就能针对系统枚举已
知的盗取手段，从而大大增加成功发动攻击的机会。 
参考文档 
https://www.fortify.com/vulncat/zh_CN/vulncat/index.html 
http://secinn.appspot.com/pstzine/read?issue=3&articleid=6 
http://riusksk.blogbus.com/logs/51538334.html 
http://www.owasp.org/index.php/Category:OWASP_Code_Review_Project