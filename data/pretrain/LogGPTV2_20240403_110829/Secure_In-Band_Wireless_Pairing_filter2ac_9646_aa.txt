title:Secure In-Band Wireless Pairing
author:Shyamnath Gollakota and
Nabeel Ahmed and
Nickolai Zeldovich and
Dina Katabi
Secure In-Band Wireless Pairing
Shyamnath Gollakota, Nabeel Ahmed, Nickolai Zeldovich, and Dina Katabi
Massachusetts Institute of Technology
ABSTRACT
This paper presents the ﬁrst wireless pairing protocol
that works in-band, with no pre-shared keys, and protects
against MITM attacks. The main innovation is a new key
exchange message constructed in a manner that ensures
an adversary can neither hide the fact that a message was
transmitted, nor alter its payload without being detected.
Thus, any attempt by an adversary to interfere with the
key exchange translates into the pairing devices detect-
ing either invalid pairing messages or an unacceptable
increase in the number of such messages. We analytically
prove that our design is secure against MITM attacks,
and show that our protocol is practical by implementing a
prototype using off-the-shelf 802.11 cards. An evaluation
of our protocol on two busy wireless networks (MIT’s
campus network and a reproduction of the SIGCOMM
2010 network using traces) shows that it can effectively
implement key exchange in a real-world environment.
1
INTRODUCTION
Recent trends in the security of home WiFi networks are
driven by two phenomena: ordinary users often strug-
gle with the security setup of their home networks [14],
and, as a result, some of them end up skipping security
activation [19, 26]. Simultaneously, there is a prolifera-
tion of WiFi gadgets and sensors that do not support an
interface for entering a key. These include WiFi sound
systems, medical sensors, USB keys, light and tempera-
ture sensors, motion detectors and surveillance sensors,
home appliances, and game consoles. Even new models
of these devices are unlikely to support a keypad because
of limitations on their form factor, style, cost, or func-
tionality. Responding to these two requirements—easing
security setup for home users, and securing devices that
do not have an interface for entering a key—the WiFi
Alliance has introduced the Push Button Conﬁguration
(PBC) mechanism [26]. To establish a secure connec-
tion between two WiFi devices, the user pushes a button
on each device, and the devices broadcast their Difﬁe-
Hellman public keys [7], which they then use to protect
all future communication. PBC is a mandatory part of
the new WiFi Protected Setup certiﬁcation program [27].
It is already adopted by the major WiFi manufacturers
(e.g., Cisco, NetGear, HP, Microsoft, Sony) and imple-
mented in about 2,000 new products from 117 different
companies [25].
Unfortunately, the PBC approach taken by the WiFi
Alliance does not fully address WiFi security. Difﬁe-
Hellman’s key-exchange protocol [7] protects against only
passive adversaries that snoop on the wireless medium to
obtain key exchange messages. Since the key exchange
messages are not authenticated in any way, the protocol is
vulnerable to an active man-in-the-middle (MITM) attack.
That is, an adversary can impersonate each device to
the other, convincing both devices to establish a secure
connection via the adversary. With WiFi increasingly
used in medical sensors that transmit a patient’s vital
signals [11] and surveillance sensors that protect one’s
home [16, 21], there is a concern that, being vulnerable
to MITM attacks, PBC may give users a false sense of
security [15, 26].
One may wonder why the WiFi Alliance did not
adopt a user-friendly solution that also protects against
MITM attacks. We believe the reason is that exist-
ing user-friendly solutions to MITM attacks require de-
vices to support an out-of-band communication chan-
nel [6, 10, 17, 18, 20, 22]. For example, devices can
exchange keys over a visual channel between an LCD and
a camera [18], an audio channel [10], an infrared chan-
nel [2], a dedicated wireless channel allocated exclusively
for key exchange [6], etc. Given the cost, size, and capa-
bility constraints imposed on many WiFi products, it is
difﬁcult for the industry to adopt a solution that requires
an out-of-band communication channel.
This paper presents tamper-evident pairing (TEP), a
novel protocol that provides simple, secure WiFi pairing
and protects against MITM attacks without an out-of-band
channel. TEP can also be incorporated into PBC devices
and existing WiFi chipsets without hardware changes.
TEP’s main challenge in avoiding MITM attacks comes
from operating on a shared wireless network, where an
adversary can mask an attack behind cross trafﬁc, making
it difﬁcult to distinguish an adversary’s actions from legit-
imate trafﬁc patterns. To understand this, consider a key
exchange between Alice and Bob, where Bob sends his
Difﬁe-Hellman public key to Alice. Lucifer, the adversary,
could tamper with this key exchange as follows:
• Collision: Lucifer can jam Bob’s message, causing a
collision, which would not look out-of-the-ordinary on
a busy wireless network. The collision prevents Alice
from decoding Bob’s message. Lucifer can now send
his own message to Alice, in lieu of Bob’s message,
perhaps with the help of a directional antenna so that
Bob does not notice the attack.
1
Payload
packet
CTS_to_SELF
ON-OFF slots
Synchronization pkt
……
110101 …… 01
Time
Figure 1: The format of a tamper-evident announcement (TEA).
• Capture effect: Lucifer can transmit simultaneously
with Bob, but at a signiﬁcantly higher power, to produce
a capture effect at Alice [24]. In this case, Alice will
decode Lucifer’s message, in which he impersonates
Bob, despite Bob’s concurrent transmission. Bob will
not know about Lucifer’s transmission.
• Timing control: Lucifer can try to impersonate Alice
by continuously occupying the wireless medium after
Bob sends out his key, so that Lucifer can send out a
message pretending to be Alice, but Alice does not get
a chance to send her legitimate key.
To address these attacks in TEP, we introduce a tamper-
evident announcement (TEA) primitive. The key charac-
teristics of a TEA message is that an attacker can neither
hide a TEA transmission from other nodes within radio
range, nor can it modify the content of the TEA without
being detected. Thus, a TEA provides stronger guarantees
than payload integrity because it also protects the fact that
a message was transmitted in the ﬁrst place.
Fig. 1 shows the structure of a TEA. First, to ensure that
Lucifer cannot mask Bob’s TEA message by introducing
a collision, the TEA starts with an exceptionally long
packet. Since standard WiFi collisions are signiﬁcantly
shorter, Alice needs to detect only exceptionally long
collisions (i.e., exceptionally long bursts of energy) as
potential attacks on the key exchange process.
Second, to ensure that Lucifer cannot alter the pay-
load of Bob’s TEA by transmitting his own message at
a high power to create a capture effect, we force any
TEA message to include silence periods. As shown in
Fig. 1, the payload of the TEA message is followed by a
sequence of short equal-size packets, called slots, where
the transmission of a packet is interpreted as a “1” bit,
and an idle medium is interpreted as a “0” bit. The bit
sequence produced by the slots must match a hash of the
TEA payload. If Lucifer overwrites Bob’s message with
his own, he must transmit slots corresponding to a hash
of his message, including staying silent during any zero
hash bits. However, since the hash of Lucifer’s message
differs from that of Bob’s message, Bob’s message will
show up on the medium during Lucifer’s “0” slots. Alice
will detect a mismatch between the slots and the message
hash and reject Lucifer’s message.
Third, to ensure that legitimate nodes do not mess up
the timing of Alice and Bob’s key exchange, the TEA
message includes a CTS-to-SELF, as shown in Fig. 1.
CTS-to-SELF is an 802.11 message that requires honest
nodes to refrain from transmitting for a time period spec-
iﬁed in the packet. TEP leverages this message for two
goals. First, it uses it to reserve the medium for the dura-
tion of the TEA slots to ensure that legacy 802.11 nodes,
unaware of the structure of a TEA message, do not sense
the medium as idle and transmit during a TEA’s silent
slots. Second, TEP also uses CTS-to-SELF to reserve the
medium for a short period after the TEA slots, to enable
Alice to send her key to Bob within the interval allowed
by PBC. Once Alice starts her transmission, the medium
will be occupied, and honest 802.11 nodes will abstain
from transmitting concurrently. If Lucifer transmits dur-
ing the reserved time frame, Alice will still transmit her
TEA message, and cause a collision, and hence an invalid
TEA message that Bob can detect.
We build on TEA to develop the TEP pairing protocol.
TEP exploits the fact that any attempts to alter or hide
a TEA can be detected. Thus, given a pairing window,
any attempt by an adversary to interfere with the pairing
exchange translates into either an increase in the number
of TEA messages or some invalid TEA messages. This
allows the pairing devices to detect the attack and indicate
to the user that pairing has failed and that she should
retry. The cost of such a mechanism is that the user has to
wait for a pre-determined duration of the pairing window.
In §5.4, we describe how one may eliminate this wait by
having a user push the button on a device a second time.
This paper formalizes the above ideas to address possi-
ble interactions between the pairing devices, adversaries,
and other users of the medium, and formally proves that
the resulting protocol is secure against MITM attacks.
Further, we build a prototype of TEP as an extension to
the Ath5k driver [1], and evaluate it using off-the-shelf
802.11 Atheros chipsets. Our ﬁndings are as follows:
• TEP can be accurately realized using existing OS and
802.11 hardware. Speciﬁcally, our prototype sender
can schedule silent and occupied slots at a resolution
of 40µs, and its 95th percentile scheduling error is as
low as 1.65µs. Our prototype receiver can sense the
medium’s occupancy over periods as small as 20µs and
can distinguish occupied slots (“1” bits) from silent
slots (“0” bits) with a zero error rate.
• Results from running the protocol on our campus net-
work and applying the traces from the network during
the SIGCOMM 2010 conference, show that TEP never
confuses honest 802.11 trafﬁc for an attack. Further-
more, though our implementation is for 802.11, it can
coexist with nearby Bluetooth devices which do not
respect TEP silent slots. In this case, TEP can still
perform a key exchange using 1.4 attempts, on average.
Contributions: This paper presents, to our knowledge,
the ﬁrst wireless pairing protocol that defeats MITM at-
tacks without any key distribution or out-of-band channels.
2
It does so by introducing TEA, a new key exchange mes-
sage constructed in a manner that ensures an adversary
can neither hide the fact that a message was transmitted,
nor alter its payload without being detected. Our proto-
col is prototyped using off-the-shelf 802.11 devices and
evaluated in production WiFi networks.
2 RELATED WORK
There has been a lot of interest in user-friendly secure
wireless pairing, which has led to a number of innovative
solutions [2, 6, 10, 17, 18, 20, 22]. TEP builds on this
foundational work. However, TEP is the ﬁrst to provide a
secure pairing scheme that defeats MITM attacks without
out-of-band channels, or key distribution or veriﬁcation.
Closest to TEP is the work on integrity codes [5], which
protects the integrity of a message’s payload by inserting
a particular pattern of ON-OFF slots. Integrity codes,
however, assume a dedicated out-of-band wireless chan-
nel. In contrast, on shared channels, honest nodes may
disturb the ON-OFF pattern by acquiring the medium
during the OFF slots. Further, the attacker can hide the
fact that a message was transmitted altogether, by using
collisions or a capture effect. We build on integrity codes,
but introduce TEA, a new communication primitive that
not only protects payload integrity but also ensures that an
attacker cannot hide that a message was transmitted. We
further construct TEP by integrating TEA with the 802.11
standard, the PBC protocol, and the existing OS network
stack. Finally, we implement TEP on off-the-shelf WiFi
devices and evaluate it in operational networks.
TEP is also related to work on secure pairing, which
traditionally required the user to either enter passwords
or PINs [3, 4, 12], or distribute public keys (e.g., STS [8],
Radius in 802.11i [13], or any other public key infras-
tructure). These solutions are appropriate for enterprise
networks and for a certain class of home users who are
comfortable with security setup. However, the need to
ease security setup for non-technical home users has moti-
vated multiple researchers to propose alternative solutions
for secure pairing. Most previous solutions use a trusted
out-of-band communication channel for key exchange.
The simplest channel is a physical wired connection be-
tween the two devices. Other variants of out-of-band
channels include the use of a display and a camera [18],
an audio-based channel [10], an infra-red channel [2],
a tactile channel [22], or an accelerometer-based chan-
nel [17]. While these proposals protect against MITM
attacks, many devices cannot incorporate such channels
due to size, power, or cost limitations. In contrast, TEP
eases the security setup for home users and defeats MITM
attacks, without any out-of-band channel.
Finally, multiple user studies [14, 19, 26] have empha-
sized the difﬁculty in pairing devices for ordinary users.
Our work is motivated by these studies. TEP requires the
Push Button
Scan all 802.11 channels 
Enrollee
for PBC responses
Enrollee
broadcasts
Within walk time         
(120 seconds)
Registrar
reply
Registrar
Registration 
Protocol
Time
Push Button
Figure 2: A timeline depicting the operation of Push Button Con-
ﬁguration (PBC) between an enrollee and a registrar.
user to just push a button on each device—exactly as in
PBC—and does not require any additional user involve-
ment in key generation or veriﬁcation.
3 PBC AND 802.11 BACKGROUND
3.1 Push Button Conﬁguration
The WiFi-Alliance introduced the Push Button Conﬁgura-
tion (PBC) mechanism to ease the security setup process
for ordinary users, and to deal with devices that do not
have an interface to enter passwords or PINs. In this
section, we provide an overview of how PBC works.
Consider a home user who wants to associate an en-
rollee (PBC’s term for the new device, e.g., a gaming
console) with a registrar (PBC’s term for, effectively,
the access point). The user ﬁrst pushes a button on the
enrollee and then, within 120 seconds (called the walk
time), pushes the button on the registrar. Once the but-
tons are pushed on the two devices, the devices perform a
Difﬁe-Hellman key exchange to establish a secret key.
As shown in Fig. 2, once the button is pushed on the en-
rollee, it periodically sends probes [26] requesting replies
from registrars whose PBC button has been pressed. Once
the enrollee receives a reply, it makes a note of the reply
and continues to scan all the 802.11 channels for addi-
tional replies. If the enrollee receives replies from more