  * 1 个 dwmcore.dll ( [CVE-2021-28310](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310) )
  * 1 个 ntfs.sys ( [CVE-2021-31956](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31956) )
不同的目标组件的数量与过去几年相比有所不同。例如，2019 年 75% 的 Windows 0day 以 Win32k 为目标，而在 2021 年
Win32k 仅占 Windows 0day 的 20%。之所以能预料到这一点，是因为 2019 年针对 Win32k 的 8 个 0day 中有 6
个没有针对当时最新版本的 Windows 10，而是旧版本。随着 Windows 10 开始投入越来越多的资源来减少 Win32k
的攻击面，因此随着那些旧版本的生命周期结束，Win32k 越来越没有吸引力。
与多年来看到的许多 Win32k 漏洞类似，两个 2021 年的 Win32k 在野 0day
是由于用户自定义回调造成的。用户调用在回调期间更改对象状态的函数，而 Win32k
无法正确处理这些更改。[CVE-2021-1732](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html)
是一个类型混淆漏洞，由于`xxxClientAllocWindowClassExtraBytes`
中的用户回调导致越界读写。如果在回调期间调用了`NtUserConsoleControl`，则会在窗口结构中设置一个标志，表明字段是内核堆中的偏移量。`xxxClientAllocWindowClassExtraBytes`不检查这个，并在不清除标志的情况下将该字段作为用户模式指针写入。在2022年检测和披露的第一个在野
0day，[CVE-2022-21882](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-21882.html)，是由于
[CVE-2021-1732](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html)
实际上没有完全修复。攻击者找到了绕过原始补丁触发漏洞的方法。[CVE-2021-40449](https://securelist.com/mysterysnail-attacks-with-windows-zero-day/104509/)
是NtGdiResetDC中的一个释放后重用漏洞，因为在用户回调期间对象被释放。
#### iOS/macOS
正如上面“更多披露”部分所讨论的，2021 年是 Apple 第一次在其漏洞公告中完整注释其漏洞状态。今年检测并披露了 5 个 iOS 在野
0day。还发现了第一个公开的 macOS 在野 0day([CVE-2021-30869](https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/))。在本节中，我们将把 iOS 和 macOS一同讨论，因为这两个操作系统包含相似的组件，以及 macOS 的样本量非常小。
[](https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708
"!\[\]\(https://images.seebug.org/content/images/2022/04/5906d7ef-92d9-4d16-8d97-d6067a21bfaf.png-w331s\)")
对于总共 5 个 iOS 和 macOS 在野 0day ，他们针对 3 个不同的攻击面：
  * IOMobileFrameBuffer ( [CVE-2021-30807](https://support.apple.com/en-us/HT212623)、[CVE-2021-30883](https://support.apple.com/en-us/HT212846) ) 
  * XNU 内核 ( [CVE-2021-1782](https://support.apple.com/en-us/HT212146) & [CVE-2021-30869](https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/) )
  * CoreGraphics ( [CVE-2021-30860](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html) )
  * CommCenter（[FORCEDENTRY 沙箱逃逸](https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html) \- 已申请 CVE，尚未分配）
这 4 个攻击面并不新颖。IOMobileFrameBuffer 多年来一直是安全研究的目标。例如，2016 年盘古越狱使用了
[CVE-2016-4654](https://www.blackhat.com/docs/us-16/materials/us-16-Wang-Pangu-9-Internals.pdf)，这是 IOMobileFrameBuffer 中的堆缓冲区溢出漏洞。IOMobileFrameBuffer
管理屏幕的帧缓冲区，对于 iPhone 11 (A13) 及更低版本，IOMobileFrameBuffer 是内核驱动程序。从 A14 开始，它在协处理器
DCP 上运行。这是一个受欢迎的攻击面，因为从历史上看，它可以从沙盒应用访问。2021 年，IOMobileFrameBuffer 中有两个在野
0day。[CVE-2021-30807](https://support.apple.com/en-us/HT212623)
是越界读取漏洞，[CVE-2021-30883](https://support.apple.com/en-us/HT212846)
是整数溢出漏洞，都是常见的内存损坏漏洞。2022 年，我们检测到 IOMobileFrameBuffer 中另一个在野
0day，[CVE-2022-22587](https://support.apple.com/en-us/HT213053)。
一个 iOS 0day 和 macOS 0day 都利用了 XNU 内核中的漏洞，并且这两个漏洞都在与 XNU 的进程间通信 (IPC)
功能相关的代码中。[CVE-2021-1782](https://support.apple.com/en-us/HT212146) 利用了 mach
凭证中的漏洞，而 [CVE-2021-30869](https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/) 利用了 mach 消息中的漏洞。这不是我们第一次看到 iOS
在野 0day，更不用说针对 mach 凭证和 mach
消息的安全研究了。[CVE-2019-6625](https://support.apple.com/en-us/HT209443) 作为[针对 iOS
11.4.1-12.1.2 的利用链](https://googleprojectzero.blogspot.com/2019/08/in-wild-ios-exploit-chain-5.html)的一部分被利用 ，也是mach
凭证中的一个[漏洞](https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html)。
Mach 消息也一直是安全研究的热门目标。在 2020 年，mach 消息中也有两个在野
0day：[CVE-2020-27932](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html)
和[CVE-2020-27950](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27950.html)。今年的
[CVE-2021-30869](https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/) 与 2020 年的
[CVE-2020-27932](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html) 非常接近。 Tielei Wang 和 Xinru Chi 实际上在 2021 年 4 月的
Zer0con 2021
上介绍了这个[漏洞](https://github.com/wangtielei/Slides/blob/main/zer0con21.pdf)。他们说在对
[CVE-2020-27932](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html) 进行变体分析时发现了这个漏洞。Tielei Wang
在推特[解释](https://twitter.com/WangTielei/status/1486266258152726530)他们在 2020 年
12 月发现了该漏洞，并注意到它已在 iOS 14.4 和 macOS 11.2 的 beta 版本中得到修复，这就是他们在 Zer0Con
上展示它的原因。在野利用仅针对 macOS 10，但使用了与所介绍相同的利用技术。
两个
FORCEDENTRY（[CVE-2021-30860](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)
和[沙盒逃逸](https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html)）漏洞是今年我们都眼前一亮的漏洞
。因为[CVE-2021-30860](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)，CoreGraphics 中的整数溢出漏洞：
  1. 多年来我们都听说过攻击者如何使用 0-click iMessage 漏洞，终于我们有了一个公开的例子；
  2. 该漏洞利用十分令人印象深刻。
而沙箱逃逸（CVE 已申请，尚未分配）令人印象深刻，是因为这是我们见过的为数不多的只使用逻辑错误而不是标准内存损坏漏洞的沙箱逃逸之一。
对于[CVE-2021-30860](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)，漏洞本身并不是特别引人注目：CoreGraphics PDF 解码器的 JBIG2
解析器中的经典整数溢出。然而，Samuel Gro? 和 Ian Beer
将该漏洞描述为“他们见过的技术最复杂的漏洞之一”。他们的[博文](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)分享了漏洞细节，但重点是该漏洞利用 JBIG2
中可用的逻辑运算符来构建用于构建自己的计算机架构的 NAND 门。然后，该漏洞利用该新的自定义架构编写其剩余的漏洞利用。他们的博文中说道：
_他们使用超过 70,000 个定义逻辑位操作的段命令，定义了一个小型计算机体系结构，具有寄存器和完整的 64
位加法器和比较器等功能，用于搜索内存和执行算术运算。它不如 Javascript 快，但在计算上基本上是等效的。_
_沙盒逃逸漏洞的引导操作被编写为在这个逻辑电路上运行，整个程序运行在这个怪异的模拟环境中，这个模拟环境是通过一个JBIG2流进行一次解压缩而创建的。这很不可思议，同时也很可怕。_
这是使 0day 漏洞利用变得困难的一个例子 ： 攻击者必须开发一种新颖的方法来利用漏洞，而这种方法需要大量的专业知识或者时间来开发。 今年，两个
FORCEDENTRY 漏洞是 58 个 0day 中唯一给我们留下深刻印象的。希望在未来，任何成功的漏洞利用都需要像这样。
#### Android
今年检测并披露了 7 个 Android 在野 0day。在 2021 年之前只有 1 个，而且是在 2019
年：[CVE-2019-2215](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-2215.html)。与 WebKit
一样，这种缺乏数据的情况让我们很难评估其趋势和变化。所以，我们将其与公共安全研究进行比较。
对于 7 个 Android 0day，他们针对以下组件：
  * Qualcomm Adreno GPU 驱动程序（[CVE-2020-11261](https://source.android.com/security/bulletin/2021-01-01)、[CVE-2021-1905](https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-1905.html)、[CVE-2021-1906](https://source.android.com/security/bulletin/2021-05-01)）
  * ARM Mali GPU 驱动程序（[CVE-2021-28663](https://source.android.com/security/bulletin/2021-05-01)、[CVE-2021-28664](https://source.android.com/security/bulletin/2021-05-01)）
  * Upstream Linux 内核 ( [CVE-2021-1048](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html) , [CVE-2021-0920](https://source.android.com/security/bulletin/2021-11-01#kernel-components) )
2021 年的 7 个 0day 中有 5 个针对 GPU 驱动程序。 考虑到 Android 生态系统的演变以及最近对 Android
的公共安全研究，这实际上并不令人惊讶。Android 生态系统相当分散：许多不同的内核版本、不同的制造商定制等等。如果攻击者想要针对“Android
设备”，他们通常需要维护许多不同的漏洞，才能覆盖相当大比例的 Android 生态系统。但是，如果攻击者选择针对 GPU
内核驱动程序，他们将只需要两个漏洞，因为大多数 Android 设备使用 2 个 GPU 中的一个：Qualcomm Adreno GPU 或 ARM
Mali GPU。
公共安全研究在过去几年也反映了这一选择，在针对 Android 设备开发完整的漏洞利用链（用于防御目的）时， [Guang