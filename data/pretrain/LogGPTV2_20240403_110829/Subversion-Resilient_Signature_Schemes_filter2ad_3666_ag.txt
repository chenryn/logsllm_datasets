sume that each experiment Hk,l computes both sequences of signatures (σ1,k, . . . , σq,k) and
SD (Hk,l−1, Hk,l) ≤ SD (Hk,l−1|¬El,k; Hk,l|¬El,k) + P [El,k]
(4)
≤ νv.
(5)
Eq. (4) follows by Lemma 1, since PHk,l−1[El,k] = PHk,l[El,k] = P [El,k]. Eq. (5) follows by the
fact that Hk,l−1 and Hk,l are identically distributed conditioned on El,k not happening, and
SS we have that σl,k is valid for ml,k under vk . By the assumption that (cid:101)Ak ∈ Aνv
moreover P [El,k] ≤ νv. The latter can also be seen as follows. By the correctness condition of
r ver we have
19Recall that each algorithm(cid:101)Ak is stateful, but for simplicity we omit to write the state information explicitly.
26
that(cid:101)σl,k is also valid for ml,k under vk except with probability at most νv (this is because ml,k
that σl,k and(cid:101)σl,k must be equal. It follows that P [El,k] ≤ νv, as desired.
is chosen at random, and moreover the veriﬁability condition holds for every possible value of
the implicit state information τk ∈ {0, 1}∗). Finally, by the uniqueness property of SS we have
The claim now follows by the above argument and by the triangle inequality, as
SD (G, H) ≤ n(cid:88)
SD (Hk−1, Hk) ≤ n(cid:88)
q(cid:88)
SD (Hk,l−1, Hk,l) ≤ qn · νv.
k=1
k=1
l=1
Claim 4.2. P [B wins in H] ≤ ε.
Proof. Towards a contradiction, assume B wins in game H with probability larger than ε. The
claim follows directly by observing that in game H the answers to B’s queries have exactly the
same distribution as the answer to signature queries in game EUF-RMA, and that moreover B
asks a total of q + qn queries (i.e., q queries to the original signing algorithm plus q queries for
each of the n subversions).
The proof follows by combining the above two claims.
5.4 Subversion-Resilient Identiﬁcation Schemes
We show how to apply EUF-RMA against SAs to the setting of subversion-resilient identiﬁcation
(ID) schemes. Similar applications already appeared in the literature for leakage and tamper
resistance [ADW09, FHN+12, DFMV13, NVZ14, FNV15].
In a public-key ID scheme, a prover with secret key sk attempts to prove its identity
to a veriﬁer holding the corresponding veriﬁcation key vk . More formally, an ID scheme
ID = (Setup, KGen, P, V) consists of four polynomial-time algorithms described as follows:
(1) The parameters generation algorithm takes as input the security parameter and outputs
public parameters params ←$ Setup(1κ), shared by all users.20
(2) The key generation algo-
rithm takes as input the security parameter and outputs a veriﬁcation key/secret key pair
(vk , sk ) ←$ KGen(1κ). (3) P and V are probabilistic Turing machines interacting in a protocol;
at the end of the execution V outputs a decision bit d ∈ {0, 1}, where d = 1 means that the
identiﬁcation was successful. We write (cid:104)P(sk ), V(vk )(cid:105) for the random variable corresponding to
the veriﬁer’s verdict, and P(sk ) (cid:29) V(vk ) for the random variable corresponding to transcripts
of honest protocol executions.
SAs, where each (cid:101)A ∈ A is an algorithm replacing the prover algorithm P within the ID scheme
We now deﬁne a variant of passive security, where in a ﬁrst phase the adversary is allowed to
subvert the prover algorithm; in a second phase, the adversary has to impersonate the prover.
Similarly to the case of signature schemes, subversion is modelled by considering a class A of
ID.
Deﬁnition 16 (Subversion-resilient identiﬁcation). Let ID = (Setup, KGen, Sign, Vrfy) be an
ID scheme, and A be some class of SAs for ID. We say that ID is (t, n, q, ε)-secure w.r.t.
continuous A-SAs if for all adversaries B running in time t, we have P [B wins] ≤ ε(κ) in the
following game:
1. The challenger runs params ←$ Setup(1κ), (vk , sk ) ←$ KGen(1κ), and forwards (params, vk )
to B.
20In what follows, all algorithms take as input params, but we omit it here for ease of notation.
27
2. The adversary B can observe up to q ∈ N transcripts P(sk ) (cid:29) V(vk ) corresponding to
honest protocol executions between the prover and the veriﬁer.
Each such query implicitly deﬁnes an oracle that can be queried up to q ∈ N times.
3. The adversary B can specify an algorithm (cid:101)Aj ∈ A, for a total of at most n ∈ N queries.
 Upon an empty input, the j-th oracle outputs a transcript (cid:101)Aj(sk ) (cid:29) V(vk ) corre-
case (cid:101)Aj is undeﬁned, the oracle returns ⊥.
sponding to a protocol execution between the subverted prover and the veriﬁer. In
 Note that B does not need to ask all q queries before choosing the next algorithm,
i.e. the queries in step 2 and step 3 can be interleaved in an arbitrary manner.
4. The adversary B loses access to all oracles and plays the role of the prover in an execution
with an honest veriﬁer, obtaining d ←$ (cid:104)B(vk ), V(vk )(cid:105); we say that B wins if and only if
d = 1.
Consider the following standard construction (see, e.g., [BFGM01]) of an identiﬁcation
scheme ID from a signature scheme SS = (KGen, Sign, Vrfy).
 Parameters generation. Algorithm Setup samples the public parameters params for the
signature schemes (if any).
 Key Generation. Algorithm KGen runs the key generation algorithm of the signature
scheme, obtaining (vk , sk ) ←$ KGen(1κ).
 Identiﬁcation protocol. The interaction P(sk ) (cid:29) V(vk ) is depicted in Figure 3.
Prover P(sk )
σ∗ ←$ Sign(sk , m∗)
Veriﬁer V(vk )
m∗←− m∗ ←$ M
σ∗−→
Output d = Vrfy(vk , (m∗, σ∗))
Figure 3: Two-round identiﬁcation using a signature scheme SS with message space M
The theorem below states that the above protocol achieve subversion resilience w.r.t. a given
class A of SAs, provided that the underlying signature scheme is EUF-RMA w.r.t. the same
class A.
Theorem 5. Let SS be a signature scheme with message space M, and let A be a class of SAs
for SS. Assume that SS is (t, n, q, ε)-EUF-RMA w.r.t. continuous A-SAs. Then the ID scheme
ID from Figure 3 is (t(cid:48), n, q, ε(cid:48))-secure w.r.t. continuous A-SAs where t(cid:48) ≈ t and ε(cid:48) ≤ ε+ (n+1)q
.
|M|
Proof. For the sake of contradiction, assume that there exists an adversary B breaking security
of the identiﬁcation scheme with probability larger than ε + (n+1)q
. We construct an adversary
|M|
B(cid:48) breaking EUF-RMA of SS with probability larger than ε (a contradiction). Adversary B(cid:48)
runs the game of Deﬁnition 15 and is described below. The main observation is that the prover’s
algorithm P is completely speciﬁed by algorithm Sign, and thus subverting the ID scheme is
equivalent to subverting the signature scheme.
Adversary B(cid:48):
28
1. Receive the public parameters params and the veriﬁcation key vk for SS, and
forward (params, vk ) to B.
2. Whenever B wants to observe an honest transcript P(sk ) (cid:29) V(vk ), query the
signing oracle obtaining a pair (mi, σi) such that σi ←$ Sign(sk , mi) and mi ←$
M. Forward (mi, σi) to B.
3. Whenever B speciﬁes an algorithm (cid:101)Aj ∈ A, forward (cid:101)Aj to the challenger. For
ing a pair (mi,j,(cid:101)σi,j) such that (cid:101)σi,j ←$(cid:101)Aj(sk , mi,j) and mi,j ←$ M. Forward
(mi,j,(cid:101)σi,j) to B.
each query of B to its own j-th oracle, query the target j-th oracle obtain-
4. Finally, when B is ready to start the impersonation phase, sample a random
message m∗ ←$ M and send it to B. Upon receiving a value σ∗ from B, output
(m∗, σ∗) as forgery.
It is easy to see that B(cid:48)’s simulation of B’s queries is perfect; moreover, since the message m∗
in the impersonation stage is chosen at random from M, also the simulation of this phase has
the right distribution, and in particular, the forgery (m∗, σ∗) will be valid with probability ε.
It remains to compute the probability that B(cid:48) is successful. Observe that B(cid:48) is successful
whenever (m∗, σ∗) is valid and m∗ (cid:54)∈ Q ∪ (cid:101)Q. Also, note that m∗ is independent from (cid:101)Q, so in
particular
P(cid:104)
m∗ ∈ Q ∪ (cid:101)Q(cid:105) ≤ |Q| + |(cid:101)Q|
|M| =
(n + 1)q
|M|
.
Let E be the event that m∗ (cid:54)∈ Q ∪ (cid:101)Q. We have,
P(cid:2)B(cid:48) wins(cid:3) ≥ P [B wins ∧ E] ≥ P [B wins] − P [¬E]
≥ P [B wins] − (n + 1)q
|M|
> ε,
where the last inequality follows by our initial assumption on B’s advantage. This concludes
the proof.
6 Reverse Firewalls for Signatures
In Section 5, we have shown that unique signatures are secure against a restricted class of
SAs, namely all SAs that meet the so-called veriﬁability condition. As discussed in Section 3,
by removing the latter requirement (i.e., allowing for arbitrary classes of SAs in Deﬁnition 6
and 7) would require that a signature scheme SS remains unforgeable even against an adversary
allowed arbitrary tampering with the computation performed by the signing algorithm. This is
impossible without making further assumptions.
In this section, we explore to what extent one can model signature schemes secure against
arbitrary tampering with the computation by making the extra assumption of an un-tamperable
cryptographic reverse ﬁrewall (RF). RFs were introduced by Mironov and Stephens-Davidowitz
[MS15] as a means of sanitizing the transcript of arbitrary two-party protocols that are run
on possibly corrupted machines; below, we specialize their deﬁnition to the case of signature
schemes. Roughly, a RF for a signature scheme is a (possibly stateful) algorithm that takes
as input a message/signature pair, and outputs an updated signature; importantly, the ﬁrewall
has to do so using only public information (in particular, without knowing the signing key). A
formal deﬁnition follows.
29
Deﬁnition 17 (RF for signatures). Let SS be a signature scheme with veriﬁcation-key space
VK. A RF for SS is a pair of algorithms FW = (Setup, Patch) speciﬁed as follows: (i) Setup
takes as input the security parameter and a veriﬁcation key vk ∈ VK, and outputs some initial
(public) state δ ∈ {0, 1}∗; (ii) Patch takes as input the current (public) state δ, and a mes-
sage/signature pair (m, σ) ∈ ({0, 1}∗)2, and outputs a possibly modiﬁed signature or a special
symbol ⊥ and an updated (public) state δ(cid:48). We write this as (δ(cid:48), σ(cid:48)) ←$ Patch(δ, (m, σ)).
We will typically assume that the current state δcur of the RF can be computed eﬃciently
given just the veriﬁcation key vk , the initial state δ, and the entire history of all inputs/outputs
ever processed by the RF.
6.1 Properties
Below, we discuss the correctness and security requirements of a cryptographic RF FW for a
signature scheme SS.
Maintaining functionality. The ﬁrst basic property of a RF is that it should preserve
the functionality of the underlying signature scheme, i.e., if a signature σ on a message m is
computed using signing key sk , and the ﬁrewall is initialized with the corresponding veriﬁcation
key vk , the patched signature σ(cid:48) should (almost always) be a valid signature for m under
vk . More precisely, we say that FW is functionality maintaining for SS if there exists a
negligible function ν : N → [0, 1] such that, for any polynomial p(κ) and any vector of inputs
(m1, . . . , mp) ∈ M,
∃i ∈ [p] s.t. Vrfy(vk , (mi, σ(cid:48)
i)) = 0 :
(vk , sk ) ← KGen(1κ), δ0 ←$ Setup(vk , 1κ)
σ1 ← Sign(sk , m1), . . . , σp ← Sign(sk , mp)
∀i ∈ [p], (δi, σ(cid:48)
i) ←$ Patch(δi−1, (mi, σi))
(cid:34)
P
(cid:35)
≤ ν(κ),
where the probability is taken over the coin tosses of all involved algorithms.
Preserving Unforgeability. The second property of a RF is a security requirement. Note
that a ﬁrewall can never “create” security (as it does not know the signing key). Below, we
deﬁne what it means for a RF to preserve unforgeability of a signature scheme against arbitrary
tampering attacks.
Deﬁnition 18 (Unforgeability preserving RF). Let SS = (KGen, Sign, Vrfy) be a signature
scheme with RF FW = (Setup, Patch). We say that FW (t, n, q, ε)-preserves EUF-CMA for SS
against continuous SAs if for all adversaries B running in time t we have that P [B wins] ≤ ε in
the following game:
1. The challenger runs (vk , sk ) ←$ KGen(1κ), δ ←$ Setup(vk , 1κ), and gives (vk , δ) to B.
2. The adversary B is given oracle access to Sign(sk ,·). Upon input the i-th query mi, this
oracle returns σi ←$ Sign(sk , mi) for a total of at most q ∈ N queries.
3. The adversary B can specify an algorithm (cid:101)Aj ∈ A, for a total of at most n ∈ N queries.
Each such algorithm implicitly deﬁnes an oracle that can be queried adaptively up to
q ∈ N times.
 Upon input a query of the form (j, mi,j), where j ∈ [n] and i ∈ [q], the j-th oracle
outputs (δ(cid:48),(cid:101)σi,j) ←$ Patch(δcur, (mi,j,(cid:101)Aj(sk , mi,j))), where δcur is the current state of
the ﬁrewall, and updates the public state to δcur := δ(cid:48). In case (cid:101)Aj is undeﬁned, the
oracle returns ⊥.
30
manner.
 Note that B does not need to ask all q queries before choosing the next algorithm,
4. Let Q = {m1, . . . , mq} be the set of messages queried to oracle Sign(sk ,·); similarly, for
i.e. the queries to each oracle(cid:101)Aj and to oracle Sign can be interleaved in an arbitrary