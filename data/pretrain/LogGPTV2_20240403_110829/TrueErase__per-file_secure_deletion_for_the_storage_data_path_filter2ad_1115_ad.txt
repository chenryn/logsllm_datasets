remaining in-use pages in the same  flash block can continue the 
migration, and the block can then be erased.    
Consolidation  of  requests:    When  consolidation  is  not 
permitted (e.g., consolidations of overwrites on storage), we need 
to disable storage-built-in write caches or use barriers and device-
specific  flush calls to ensure that persistent updates are achieved 
[22].  When consolidation is permitted (such as in the page cache 
or  journal),  we  interpret  an  update’s  sensitive  status  during 
consolidation conservatively.  As long as one of the updates to a 
given location is sensitive, the resulting update will be sensitive.   
Dynamic  sensitive-mode  changes  for  in-transit  blocks:    To 
simplify  tracking  the  handling  of  a  block’s  sensitive  status,  we 
allow  a  non-sensitive  in-transit  file  or  directory  to  be  marked 
sensitive, but a sensitive object is not allowed to be marked non-
sensitive.   
Shared  block  security  status:  A  metadata  block  often  stores 
metadata  for  many  files,  probably  with  mixed  sensitive  status.  
Thus,  updating  non-sensitive  metadata  may  also  cause  the 
sensitive metadata stored on the same block to appear in the data 
path.  We simplify the handling of this case by treating a shared 
metadata block sensitively as long as one of its metadata entries is 
sensitive. 
Partial  secure  deletion  of  a  metadata  sector:   Securely 
deleting a file’s metadata only at the storage level is insufficient, 
since a metadata block shared by many files may still linger in the 
memory containing the sensitive metadata.  If the block is written 
again,  the  metadata  we  thought  securely  deleted  will  return  to 
storage.  In these cases, we zero out the sensitive metadata within 
the block in memory, and then update the metadata as a sensitive 
write. 
5.  TRUEERASE IMPLEMENTATION 
to 
file-system-consistency  properties 
We  prototyped  TrueErase  under  Linux  2.6.25.6  and  applied 
our framework to the popular ext3 and jbd journaling layer due to 
their  adherence 
[34].  
Because  raw  flash  devices  and  their  development  environments 
were not widely available when we began our research, we used 
SanDisk’s  DiskOnChip  flash  and  the  associated  Inverse  NAND 
File  Translation  Layer  (INFTL)  kernel  module  as  our  FTL.  
Although  DiskOnChip  is  dated,  our  design  is  applicable  to 
modern flash and development environments.  As future work, we 
will explore newer environments, such as OpenSSD [39]. 
Overall,  our  user  model  required  198  lines  of  C  code;  TAP, 
939;  secure-deletion  commands  for  flash,  592;  a  user-level 
development  environment  for  kernel  code,  1,831;  and  a 
verification framework, 8,578.   
5.1  Secure-deletion Attributes 
A user can use the legacy  (cid:70)(cid:75)(cid:68)(cid:87)(cid:87)(cid:85)(cid:3) (cid:14)(cid:86) command to mark a 
file or directory as sensitive.  However, by the time a user can set 
attributes  on  a  file,  its  name  may  already  be  stored  non-
sensitively.    Without  modifying  the  OS,  one  remedy  is  to  cause 
files  or  directories  under  a  sensitive  directory  to  inherit  the 
attribute  when  they  are  created.    We  also  provide  (cid:86)(cid:80)(cid:78)(cid:71)(cid:76)(cid:85)  and 
(cid:86)(cid:70)(cid:85)(cid:72)(cid:68)(cid:87)  wrapper  scripts  that  create  a  file  or  directory  with  a 
temporary name, mark it sensitive, and rename it to the sensitive 
name.   
443
5.2  TAP Module 
TAP is implemented as a kernel module.  We will give a brief 
background on ext3 and jbd to clarify their interactions with TAP. 
5.2.1  Background on Ext3, Journaling, and Jbd 
File  truncation/deletion  under  ext3:    Ext3  deletes  the  data 
content of a file via its truncate function, which involves updating 
(t1) the i-node to set the file size to zero, (t2) metadata blocks to 
remove  pointers  to  data  blocks,  and  (t3)  the  bitmap  allocation 
blocks to free up blocks  for reuse.  Multiple rounds of truncates 
may be required to delete the content of a large file.    
Deleting  a  file  involves:  removing  the  name  and  i-node 
reference  from  the  directory,  adding  the  removed  i-node  to  an 
orphan list; truncating the entire file via (t1) to (t3); removing the 
i-node from the orphan list; and updating the i-node map to free 
the i-node. 
Journaling:    Typical  journaling  employs  the  notion  of  a 
transaction, so the effect of an entire group of updates is either all 
or nothing.  With group-commit semantics, the exact ordering of 
updates  within  a  transaction  (an  update  to  an  i-node  allocation 
bitmap block) may be relaxed while preserving correctness, even 
in the face of crashes.  To achieve this effect, all writes within a 
transaction are (j1) journaled or committed to storage persistently; 
then (j2) propagated to their final storage destinations, after which  
(j3) they can be discarded from the journal.   
A committed transaction is considered permanent even before 
its propagation.  Thus, once a block is committed to be free (j1), it 
can  be  used  by  another  file.    At  recovery  time,  committed 
transactions in the journal are replayed to re-propagate or continue 
propagating the changes to their final destinations.  Uncommitted 
transactions are aborted. 
Jbd:    Jbd  differentiates  data  and  metadata.    We  chose  the 
popular ordered mode, which journals only metadata but requires 
(j0) data blocks to be propagated to their final destination before 
the corresponding metadata blocks are committed to the journal.   
5.2.2  Deployment Model 
All truncation, file deletion, and journaling operations can be 
expressed  and  performed  as  secure  writes  and  deletions  to  data 
and  metadata  blocks.    The  resulting  deployment  model  and  its 
applicability  are  similar  to  those  of  a  journaling  layer.    We 
inserted around 60 TAP-reporting calls in ext3 and jbd, with most 
collocated  with  block-layer  interface  write  submission  functions 
and various dirty functions (e.g., ext3_journal_dirty_data).   
Applicable  block  types:    Secure  writes  and  deletions  are 
performed  for  sensitive  data,  i-node,  extended-attribute,  indirect, 
and directory blocks, and corresponding structures written to the 
journal.  Remaining  metadata  blocks  (e.g.,  superblocks)  are 
frequently updated and shared among files (e.g., bitmaps) and do 
not  contain  significant  information  about  files.    By  not  treating 
these blocks sensitively, we reduce the number of secure-deletion 
operations.  
(Figure  2): 
Secure  data  updates 
calls 
TE_report_write()  on  sensitive  data  block  updates,  and  TAP 
creates per-sector  write  entries.   Updates to the same TAP  write 
entries are consolidated via GUIDs; this behavior reflects that of 
the page cache.   
  Ext3/jbd 
The  data  update  eventually  reaches  the  block-layer  interface 
(via  commit),  which 
status  via 
TE_check_info().    The  layer  can  then  perform  the  secure-write 
operation  and 
the 
corresponding write entries.   
invoke  TE_cleanup_write() 
sensitive 
retrieves 
remove 
the 
to 
Secure metadata updates:  A metadata block must be securely 
written  to  and  deleted  from  the  journal.    Ext3  reports  pending 
journal writes to TAP via TE_report_copy().  
longer 
identify 
locations  no 
Jbd manages its in-use persistent journal locations through its 
own superblock allocation pointers and a clean-up function, which 
can 
  Through 
TE_report_delete(), we can put those locations on the deletion list 
and associate them with the journal superblock update.  After the 
journal  superblock  is  securely  updated,  the  locations  on  the 
deletion  list  can  be  securely  wiped.    In  the  case  of  a  crash,  we 
securely  delete  all  journal  locations  through  TE_report_delete() 
once all committed updates have been securely applied. 
in  use. 
Secure data deletions (Figure 3):  When deleting sensitive file 
content, ext3’s truncate function informs TAP of the deletion list 
and  associated  file  i-node  via  TE_report_delete().    Given  the 
transactional semantics of a journal (§5.2.1), we can associate the 
content-deletion event with the file’s i-node update event instead 
of the free-block bitmap update event.  Thus, we securely delete 
data before step (t1). 
ext3/VFS
jbd
TAP
block/storage-
mgmt layer
journal
final
(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(a)
(cid:70)(cid:82)(cid:80)(cid:80)(cid:76)(cid:87)(cid:11)(cid:39)(cid:12)
(cid:70)(cid:82)(cid:80)(cid:80)(cid:76)(cid:87)(cid:11)(cid:39)(cid:12)
(cid:70)(cid:82)(cid:80)(cid:80)(cid:76)(cid:87)(cid:11)(cid:39)(cid:12)
(cid:70)(cid:82)(cid:80)(cid:80)(cid:76)(cid:87)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)
(cid:55)(cid:40)(cid:66)(cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)(cid:11)(cid:39)(cid:12)(cid:11)(cid:39)(cid:12)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)
(cid:55)(cid:40)(cid:66)(cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55)(cid:40)(cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
Figure 2.  Secure data updates.  D is the data block in various 
stages of being securely written. 
ext3/VFS
jbd
TAP
block/storage-
mgmt layer
journal
final
(cid:87) (cid:85) (cid:88)(cid:81)(cid:70)(cid:68)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48) (cid:12)
(cid:87) (cid:85) (cid:88)(cid:81)(cid:70)(cid:68)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48) (cid:12)
(cid:87) (cid:85) (cid:88)(cid:81)(cid:70)(cid:68)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48) (cid:12)
(cid:87) (cid:85) (cid:88)(cid:81)(cid:70)(cid:68)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48) (cid:12)
(cid:55) (cid:40) (cid:66) (cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:85)(cid:72)(cid:83)(cid:82)(cid:85)(cid:87)(cid:66)(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:11)(cid:48)(cid:45)(cid:12)
(a)