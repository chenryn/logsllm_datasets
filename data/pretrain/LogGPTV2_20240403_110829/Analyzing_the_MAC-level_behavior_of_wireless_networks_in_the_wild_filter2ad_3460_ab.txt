ensures that there is always a transition for packets in the current
conversation. Fourth, a timeout interval has passed since the last
seen activity for the conversation.
3. Take FSM Step
If a marker was generated, ﬁrst take a
step in the FSM based on the marker. By construction, this causes
sation is a DATAretry, there is no legal transition out of the start
state. Our solution is to augment the FSM with additional edges.
Abstractly, for each pair of states (Si,Sj) (cid:3)= (Start, Accept), we
add an edge from Si to Sj for each distinct trail (or, a path with
no repeated edges) from Si to Sj, labeling it with the ﬁnal symbol
of the trail. We annotate each augmented edge with the traversed
trail’s preﬁx, i.e., the path without the ﬁnal symbol. The annotation
represents packets that must be missing if the edge is traversed to
reach the accept state. Example augmented edges can be seen on
the right side of Figure 3. For instance, the edge between Start
and S4 can be taken upon observing a DATAretry and its annota-
tion indicates a missing DATA packet (which was lost).
We move non-deterministically in the augmented FSM until the
accept state is reached. At this point, there may be multiple paths
from Start to Accept, all of them consistent with the captured
packets. To select, we assign weights to paths and select the lowest
weight one.3 The weight of a path reﬂects the number of packets
that it indicates as missing and the rarity of those packets types.
Speciﬁcally, it is the sum of the weights of its edges. Unaugmented
edges, which correspond to captured packets, have zero weight.
The weight of an augmented edge is the sum of the weights of the
symbols in the annotation. Symbol weights are inversely propor-
tional to their frequencies in the trace. (We ﬁnd that our inferences
are similar even when we use the logs of these values, which trans-
lates the decision to the minimum product of the inverse frequen-
cies, rather than their sum.) This weighting method prefers the
shorter of two paths when the symbols of one are a subset of the
other, thus producing conservative estimates of missing packets.
When the path weight function is a linear operator, as in our
case, a straightforward optimization simpliﬁes FSM construction,
without impacting results. If there are multiple trails from Si to Sj
ending with the same symbol, only the lowest weight one needs to
be considered.4 The right side of Figure 3 shows the FSM for our
example after the Start state (only) has been augmented using this
optimization.
As a ﬁnal step when the accept state is reached, we synthesize
any missing packets along the selected path. We cannot always in-
fer the exact properties of a missing packet but can often do so.
Properties that are relevant for MAC-level analysis include packet
size and transmission time and rate, and which of these we can infer
depends on the details of the 802.11 protocol. The size of certain
packet types, such as ACK, RTS and CTS, is ﬁxed. For others, such
as DATA packets, the size can be inferred if a retransmission of the
packet is observed. The transmission time of a missing packet can
be inferred if there exists a captured packet relative to which it has a
ﬁxed spacing; for instance, the transmission time of a DATA packet
can be inferred from that of the corresponding ACK. The trans-
mission rate of certain packet types, such as PROBE REQUEST,
is usually ﬁxed for a client, and for certain other types, such as
ACK, it depends on the rate of the previous, incoming packet (i.e.,
DATA). However, the rate of missing DATA packets cannot be in-
ferred unless the rate adaptation behavior of the sender is known.
3While we pick a single ﬁnal path, our framework allows us to
enumerate others, along with measures of their plausibility. Also,
as a practical matter, our weighting method makes ties virtually
impossible for 802.11 exchanges; we have never encountered one.
4The interested reader should note that the seemingly plausible
“optimization” of moving only along the lowest weight path at each
FSM step is incorrect, because subsequent symbols can change
which paths are even possible. For instance, with an ACK in the
start state, the most likely missing packet is a DATA packet. But if
the next packet is a DISASSOCIATION REQUEST with the retry
bit on, the missing packet was a DISASSOCIATION REQUEST.
Figure 3: Left: An FSM for our simpliﬁed example. A ‘+’ in-
dicates that the packet was received by its destination, and a ‘−’
indicates that the packet was lost. Right: The same FSM after
augmentation of the Start state (only). The dashed edges are the
augmented ones and the symbols in braces are their annotations.
a transition to the accept state, closing the current conversation and
placing the FSM in the start state. The path taken from the start
to the accept state reveals information missing from the trace, as
explained shortly. Now take a step in the FSM based on the symbol
for the current packet.
While the ﬁrst two steps involve some 802.11-speciﬁc decisions,
the third step is entirely independent of the protocol being analyzed.
Key to this process is the construction of the FSM, which re-
quires elaboration. We cannot simply use an FSM corresponding
to the protocol because packets (i.e., sentence symbols) are miss-
ing from the trace and because we want to use the FSM to estimate
which packets were received by their destination. We extend tradi-
tional FSM matching to address these issues.
We explain our method in the context of a simpliﬁed version
of 802.11 data exchange conversations in which there are no frag-
ments, and instead of quitting after a conﬁgured number of at-
tempts, nodes retransmit the data packet until they receive an ACK.
An FSM for this simpliﬁed version is shown on the left in Fig-
ure 3. (In contrast to Figure 3, our production FSM for the complete
802.11 protocol has 339 states.)
Inferring Packet Reception
We ﬁrst explain how we in-
fer packet reception, assuming for now that all transmitted pack-
ets are present in the trace. To infer packet reception, we non-
deterministically walk both the packet received and packet lost edges
and encode the current state as the distinct set of paths traversed so
far. When the accept state is reached, the edges traversed on the
paths from the start state can be examined to determine whether
each packet was received.
(We describe shortly how we handle
multiple paths to the accept state.)
For instance, as shown on the left in Figure 3, if the ﬁrst packet
seen is a DATA packet, we transition along both the +DATA and
−DATA edges, producing the state {Start→S1, Start→S3}. If
an ACK is seen next, the FSM state after the transition becomes
{Start→S1→S2, Start→S1→S3}. In this case, the original
ambiguity about the reception of the DATA packet has been re-
solved: it was received since both live paths traverse the +DATA
edge. In contrast, if the second seen packet is a DATAretry, the
FSM state will be {Start→S3→S4}, and we can infer that the
DATA packet was lost.
Inferring Missing Packets We now explain how we infer
packets that are missing from the trace. With missing packets, there
may be no legal transition for the current symbol. For instance, in
our simpliﬁed example, if the ﬁrst packet encountered for a conver-
2.2.3 Limitations
While the FSM analysis extracts a great deal of missing infor-
mation, what can be known with certainty is inherently limited.
First, we cannot infer any conversation for which we do not log any
packet. Second, for any speciﬁc partial conversation, we cannot be
certain as to which complete conversation actually transpired. (Se-
lecting the most plausible path leads to our predictions being cor-
rect most of the time.) Finally, we cannot always infer all the prop-
erties of a missing packet. As a result, the reconstructed trace is
most appropriate for deriving measures that are aggregated across
many conversations. We show later that the impact of these uncer-
tainties is small, especially given the ability of merging to provide
good initial coverage.
We can use several methods to reduce the uncertainty of infer-
ences in the future. For instance, we can better leverage timestamp
and sequence number information: missing sequence numbers pro-
vide insight into missing conversations, and the transmission times
of inferred packets may be estimated if we observe the idle times
in the trace and mimic the 802.11 channel acquisition policy. This
may lead to more precise inferences, but at the expense of increased
complexity (e.g., while most clients increment sequence numbers
by one, some have more erratic behaviors). Our current focus is on
simpler techniques that bring the most gain.
2.3 Deriving Measures
The enhanced trace generated by merging and inference can be
mined in many ways to understand the detailed MAC-level behav-
ior. Many measures, such as packet reception probability, can now
be trivially obtained. The trace also facilitates derivations of more
sophisticated measures that were not possible before. One such
novel analysis that we present below is the estimation of the num-
ber of stations that are actively contending for the medium at any
given time. This is key to understanding the behavior of the MAC
as a function of offered load.
We consider a station to be contending for the medium from the
time the MAC-layer gets a packet to send to the time of successful
transmission. For packets that require MAC-level responses, trans-
mission is considered successful when the response is successfully
received. While the station is contending, there can be multiple re-
transmissions of the packet and there can be many responses if the
initial responses are not correctly received.
The primary difﬁculty in computing the number of contenders
is that judging whether a station is contending requires access to
state, such as randomly selected backoff values and carrier sense
decisions, that is not present in the trace. We overcome this by
making a simple observation: much of the relevant state can be
approximated by viewing the station’s transmissions through the
lens of the medium access rules that it implements. For instance,
for 802.11, if we see DATA and DATAretry packets from a station,
we know that it was contending for the medium in the time between
the two transmissions and at least for some time before the ﬁrst one.
Our technique is shown in Figure 4. Its description assumes that
the reader is familiar with the medium access rules of 802.11. We
scan the trace in reverse chronological order and maintain a set
of current contenders along with their idle-wait-time, which is the
amount of idle time they must have waited to acquire the channel
before their last observed transmission. Stations are inserted into
the set when we observe a packet for them and ejected when that
much idle time elapses in the trace. If the transmission is original,
i.e., the retry bit is off, the idle-wait-time is set to initial-backoff to
mimic the procedure used by the station itself. If it is a retrans-
mission, we set the idle-wait-time to TIMEOUT so that the station
is eventually ejected from the contenders set even if we do not see
1: Scan the trace in reverse chronological order and do the follow-
ing for each packet.
2: Compute the time for which the medium was idle between the
current and previous transmissions.
3: Subtract this idle time from the idle-wait-time of stations in the
4: Remove from the contenders set stations with idle-wait-time of
contenders set
zero or less.
5: Add the source of the packet (or the destination for response
packets such as ACKs) to the contenders set.
6: If the packet is an original transmission, set the station’s idle-
wait-time to initial-backoff. Otherwise, set it to TIMEOUT.
Figure 4: Our technique to estimate the number of contenders.
another packet from this station (in particular, the corresponding
original transmission). Our implementation uses a TIMEOUT of
50 ms. The initial-backoff is the sum of the 802.11 DIFS interval
and a randomly selected number of slots between 0 and the initial
congestion window.
Our computation of the number of contenders is approximate.
First, the exact initial idle-wait-time cannot be known, as stations
make random choices. Second, by not decrementing idle-wait-time
when any packet is in the air, we are mimicking that the station
senses all transmissions, which of course is not true in practice.
Third, we ignore interference effects such as transmissions on other
channels. We ﬁnd that the inaccuracy due to these simpliﬁcations is
not signiﬁcant because the initial backoff period they affect is rel-
atively small (Section 4.4); we do not need to approximate the full
backoff procedure because that is encoded in stations’ subsequent
transmission times. Missing packets may cause larger inaccura-
cies, but their impact is limited by our use of multiple monitors and
inference to obtain a reasonably complete trace.
3.
IMPLEMENTATION OF Wit
Wit is implemented as three components, halfWit,5 nitWit and
dimWit, corresponding to the three pipeline phases. As a starting
point, Wit inserts the traces collected by individual monitors into a
database, and then uses the database to pass results between stages.
At each stage the trace becomes more complete and gets annotated
with additional information. Without the external utilities that they
use, halfWit, nitWit and dimWit are roughly 1200, 3200 and 1200
lines of Perl code.
3.1 halfWit: The Merging Component
The vagaries of real data, and its sheer volume, make it chal-
lenging to build a robust and fast implementation of the conceptu-
ally simple merging process. As one example, we did not expect
the 64-bit beacon counters that we use to identify references to roll
over. But they do for some APs, perhaps because the APs were re-
set; we detect such APs and stop using their beacons as references.
For speed, halfWit uses a merge-sort like methodology. It treats
the two input traces as time-sorted queues and at each step out-
puts the queue head with the lower timestamp (after translation).
When the precision of timestamp translation is better than half the
minimum time to transmit a packet, duplicate packets will appear
together as queue heads. Thus, to identify duplicates we only need
to compare the queue heads. This is much faster than searching
deeper inside the queues for potential duplicates. But it has a subtle
interaction with waterfall merging. Consider merging traces from
three monitors such that the ﬁrst and third hear a packet p1 and
5So-called because it represents about one third of Wit.
the second hears p2. If p2 is heard at almost the same time as p1,
the two packets can appear in the merge of the ﬁrst two traces in
any order. Suppose p2 comes ﬁrst. Now suppose that when mer-
ging the third trace, its copy of p1 is slightly ahead of p2 in the
merged timeline because of minor imprecision in timestamp trans-
lation. The merge-sort based method will fail to merge the two
copies of p1 because now they do not appear as queue heads to-
gether. To address this, we maintain separate logical queues for
individual traces in the partially merged trace and then identify du-
plicates among all the logical heads.
The accuracy of timestamp translation in merging may be af-
fected by monitor processing: monitors must have low variability
in the delay between packet reception and timestamp generation.
For this reason we use the timestamp applied closest to the hard-
ware from among the several available for the packets. But these
timestamps roll over roughly once per hour; we use another, persis-
tent (but more variable) timestamp to detect and correct rollovers.
The precision of the ﬁnal merge depends on the order in which
the monitors are added because order determines the density of
common references at each waterfall step. Currently, it has been
sufﬁcient to manually order the monitors based on their locations:
starting with two close monitors, we successively add monitors
close to those already merged.
In the future, we will automati-
cally determine the order based on the number of references that
monitors have in common with each other.
3.2 nitWit: The Inference Component
nitWit takes the output of halfWit as its input and produces an-
notated copies of the captured and inferred packets. The critical
annotation for each packet is whether it was received. We also pig-
gyback sundry annotations on this processing phase, for instance,
we convert the retry-bit ﬁeld of the 802.11 packet into a counter.
We use a customized regular expression grammar to simplify
speciﬁcation of the FSM. The grammar that corresponds to the sim-
[DATA ACK,$,-][DATAretry ACK,$,-]*.
pliﬁed FSM in Figure 3 is:
The fundamental units, enclosed in square brackets, consist of three
ﬁelds: a sequence of symbols, an indication of the next step if all
the packets represented by the symbols are received, and an indica-
tion of the next step if any is dropped. For instance, the ﬁrst unit
above speciﬁes that if both DATA and ACK are received, transition
to the accept state (the ‘$’ speciﬁer). This corresponds to the path
Start→S1→S2→Accept in the FSM. If a packet is not received,
transition to the next unit of the regular expression (the ‘-’ spec-
iﬁer). The second unit speciﬁes that what follows is any number
of DATAretry and ACK pairs (the ‘*’ speciﬁer). Because it is the
ﬁnal unit, the conversation ends if both packets in any such pair
are received. We use lex- and yacc-like tools to parse this language
and generate the FSM. The regular expression for the entire 802.11
protocol is 660 characters long. It produces an FSM with 339 states
and 1061 edges. Augmentation adds 15,193 edges.
For speed, we perform two optimizations. Both are guaranteed
to not impact the outcome of FSM processing. First, we statically
prune some edges in the FSM. If, from a state Si, a symbol leads to
Sj with weight cij and to Sk with weight cik, we remove the edge
to Sk if there is a path from Sj to Sk with weight cjk such that
cij +cjk <= cik. This eliminates 2,431 augmented edges. Second,
we dynamically detect when multiple paths lead to the same state
after a transition, and record only the least weight one.
3.3 dimWit: The Derived Measures Component
dimWit operates over the annotated version of captured packets
produced by nitWit. Our current implementation does not “merge”
captured and inferred packets because the exact timing for the latter
is uncertain in some cases.
Along with other measures, dimWit computes the number of con-
tenders in the network. It inserts summary information into a num-
ber of auxiliary database tables so that it may compute per con-
tention level measures without reading a number of records propor-
tional to the number of packets. This lets it analyze tens of millions
of packets in a few minutes.
4. EVALUATION
We evaluate Wit empirically to understand how well each of its
components work. We investigate the following key questions:
(a) What is the quality of time synchronization with merging?
(b) How accurate are inferences of packet reception status?
(c) What fraction of missing packets are inferred?
(d) How accurate is the estimate of the number of contenders?
(e) And ﬁnally, to complete the view of network activity, how
should we decide between adding monitors and using inference?
Ideally, we would like to answer these questions by comparing
our inferences against “ground truth” obtained from the monitored
network. But obtaining such authoritative data for deployed net-
works is intractable. Additionally, instrumentation necessary to ob-
tain the authoritative data is problematic; no commodity hardware
to our knowledge reports information on many low-level events re-
quired for validation, such as the timing of different retries of a
packet. This hinders validation in a testbed as well.
We therefore use simulation as the primary validation method.
Because our techniques depend heavily on the MAC layer, we be-
lieve that the possibly inaccurate PHY layer models in simula-
tors [12] do not signiﬁcantly impact our results. But as a sanity
check, we test that Wit’s results over real traces are self-consistent.
4.1 Simulation Environment
Our simulations involve two APs and forty clients that are ran-
domly distributed on a grid and run 802.11b. We use the QualNet
simulator [19] which mimics an 802.11b-like PHY layer; packet re-
ception probability depends on the received signal strength, trans-
mission rate, other packets in ﬂight, and random bit errors. The
simulator estimates the maximum radio range in our setup as 480
meters at 1 Mbps and 280 meters at 11 Mbps. To study diverse
monitoring environments, we consider three grid sizes: 100x100,
600x600, and 900x900 square meters. The clients generate a mix
of web- and DNS-like trafﬁc.
Ten randomly distributed monitors passively sniff the medium
and log every packet that they can correctly decode. The timestamp
resolution is 1 µsec. Because of the ﬁnite precision of timestamps
and different propagation delays from the source to different moni-
tors, the timestamps of a packet can differ across monitors. We also
generate an authoritative simulation log containing each packet sent
and received and when each packet arrived at the MAC layer from
higher layers. This log is used to validate the outputs of our tool.
We use the same code base for analyzing simulator and real
traces. This lets us check our implementation as well as validate