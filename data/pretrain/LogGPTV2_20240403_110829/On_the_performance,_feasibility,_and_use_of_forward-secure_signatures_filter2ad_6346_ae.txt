RSA as potential base schemes, seen in Fig. 7. As might be pre-
dicted from Fig. 2, when R1 and R∗
2 are small, the ECDSA based
conﬁgurations are dominant in Fig. 7, while as either ratio grows
larger the RSA based conﬁgurations take over. The area over which
ECDSA based Iterated Sum is most efﬁcient covers all of the RSA
Bellare-Miner Tree region of Fig. 5 and portions of the RSA Prod-
uct and RSA Iterated Sum regions. When R1 is less than two,
ECDSA Iterated Sum is always the most efﬁcient, which can be
seen on the right in Fig. 7(b). As was also the case when exam-
ining the base schemes alone, the intersection between RSA based
schemes and ECDSA based schemes occurs at a much greater slope
than the intersections among different RSA based schemes. It is at
this point where performance is worst, with RSA Product 2.6 times
as expensive as RSA.
2 are small.
We are now able to determine the optimal FSS conﬁgurations
for several applications described in Section 1. For the electronic
checkbook, each check will only be veriﬁed a limited number of
times, possibly as few as once by the user’s bank. In order to limit
her exposure to forged checks, it is also in the user’s best interest
to update her private key after writing a check. This describes a
scenario where both R1 and R∗
Iterated Sum using
ECDSA would be the optimal choice in this environment.
For the case of a Certiﬁcate Authority, as with traditional signa-
tures R1 will be very large. R∗
2, because the ratio is per update and
not per key, may no longer be as large as was the case with R2 in
the traditional case. The optimal FSS conﬁguration in this situa-
tion is most likely Iterated Sum with RSA keys, which has almost
identical veriﬁcation time to RSA. It is possible that, if both R1
and R∗
2 are low (e.g. 100 and 5 respectively), the optimal scheme
will be Product using RSA instead. However, as we noted above in
our analysis of RSA based schemes alone, in this region all three
of MMM, Product, and Iterated Sum have nearly identical perfor-
mance, so Iterated Sum is the wiser choice in case predictions of
R1 and R∗
2 are wrong.
The ﬁnal example use of FSS presented is the signing of receipts
by an on-line merchant, with updates performed at the close of busi-
(b) Lowest-cost FSS scheme for M∗
3.
Figure 7: Performance of short-term FSS schemes with 255 pe-
riods.
ness. Here, the number of veriﬁcations is very low, as in most cases
when there is nothing wrong with the order, the receipt will never
need verifying. R1 is very low because of this. The number of
signatures, however, may be quite large if the store is busy. As with
the electronic checkbook, Iterated Sum using ECDSA is the best
choice for this situation.
Unknown Maximum Period
Up until this point, we have assumed that the maximum number
of periods needed for a forward-secure key is known exactly ahead
of time, and examined the performance of different schemes based
on this assumption. In many situations, however, the exact upper
limit on the number of periods required may not be known. If more
periods are required than provided by the private key, a new key
must be generated and certiﬁed, reducing some of the beneﬁts of
FSS schemes over traditional signature schemes.
Max
Periods
256
512
4096
RSA
1024
4.47ms
5.00ms
6.35ms
RSA
1536
8.60ms
9.53ms
12.4ms
ECDSA ECDSA
t233k1
t163k1
123.4ms
66.7ms
137.1ms
74.0ms
94.7ms
176.1ms
Table 3: Average Cv for Bellare-Miner Tree FSS keys.
ECDSA-t163k1BMTree 256 ECDSAISum 256 ECDSAProd 256(16*16) ECDSAMMM 255 ECDSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signature 1 10 100Cost (ms)RSA-1024ECDSA-t163k1BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSABMTree 256 ECDSAISum 256 ECDSAProd 256(16*16) ECDSAMMM 255 ECDSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signature 0.1 1 10 100 1000 10000Cost (ms)BMTree 256 RSAISum 256 RSAProd 256(16*16) RSAMMM 255 RSABMTree 256 ECDSAISum 256 ECDSAProd 256(16*16) ECDSAMMM 255 ECDSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per SignatureThe most straightforward solution to this problem is to be conser-
vative when generating forward-secure keys, and specify a maxi-
mum period much larger than what is actually expected to be needed.
Depending on the forward-secure scheme used, however, this may
impact the performance for the expected range of periods signiﬁ-
cantly, and may even impact the decision of what FSS conﬁguration
to use. In order to evaluate this penalty we look at how the average
values of Cu, Cs, and Cv change as the number of periods used in-
creases for keys of various maximum periods, and re-examine M∗
3
with these new costs.
The results for Cs are not very interesting, as the cost of signing
is completely dominated in all four FSS schemes by the single base
signature performed. Regardless of how many periods used or what
the maximum period of the key is, the cost of signing is the same
as the cost for the base algorithm signature.
For Iterated Sum, Product, and MMM, the same holds true for
the cost of veriﬁcation. Similar to signing, all three of these schemes
require a ﬁxed number of veriﬁcations regardless of the current pe-
riod or the maximum period. Bellare-Miner Tree, however, is de-
pendent on the maximum period (but not the current period) for
the number of base veriﬁcations it must perform, and therefore Cv
is dependent as well. Table 3 shows the average veriﬁcation cost
for the ten Bellare-Miner Tree conﬁgurations tested. As expected,
from doubling the maximum period while keeping the base scheme
ﬁxed is almost exactly the cost of a single base veriﬁcation.
The impact of maximum period on Cu also depends on the scheme.
For MMM beyond the ﬁrst thirty periods and for Bellare-Miner
Tree for all periods there is no real difference in performance be-
tween keys of different maximum periods. Iterated Sum and to a
lesser degree Product (because it contains Iterated Sum keys) are
logarithmically related to the period for the performance of Cu.
For a situation requiring 255 periods of a key to be used, the cost of
using a 4096 period Iterated Sum key is 4 times greater than using a
256 period key. Product in comparison experiences only a 30-35%
slowdown in this situation.
Fig. 8 shows the results of computing M∗
3 assuming 255 pe-
riods are used, but with keys having a maximum period of 4096
(or 65535 in the case of MMM). In the ﬁgure, the higher Cu for
Iterated Sum can be seen by the much greater upward deﬂection
toward the origin for the two Iterated Sum surfaces compared to
Fig. 7. This increase in initial cost causes MMM and Product
(which have nearly identical initial costs) to become more efﬁcient
than ECDSA Iterated Sum when R1 and R∗
2 are less than 10, and
the point where RSA Iterated Sum becomes most efﬁcient to move
out signiﬁcantly compared to Fig. 7. The point where RSA Product
intersects ECDSA Iterated Sum also moves further away from the
origin due to the greater increase in Cu for RSA based schemes
than ECDSA based schemes. As before, over much of the area
where Product is least expensive the remaining RSA schemes (ex-
cept Bellare-Miner Tree) are also nearly equal. This is the cause
of the noisy region in Fig. 8(b) where the most efﬁcient scheme
changes between several different schemes in a small area.
The impact of these changes in the behavior of FSS keys on their
use is minimal. For a CA, the position again lies either in the RSA
Iterated Sum region, or in the transitional region where all of the
RSA schemes except Bellare-Miner Tree are nearly equivalent. If
R∗
2 is less than 5, MMM or Product will likely be slightly faster
than Iterated Sum. For the merchant signing receipts, the number
of signatures per day (update) remains large enough that ECDSA
Iterated Sum is the best choice. The one example situation looked
at where the decision on which algorithm to use does change is in
the electronic checkbook application, assuming that the maximum
number of checks (periods) is not set in advance. In this situation,
(a) M∗
3.
(b) Lowest-cost FSS scheme for M∗
3.
Figure 8: Performance of short-term FSS schemes with 4096
periods after 255 periods.
ECDSA MMM or Product are both able to produce keys with very
large maximum periods but with little initial cost or increase to
update cost compared to ECDSA Iterated Sum.
In all, even without knowledge of the exact number of peri-
ods required the performance of the optimal FSS schemes remains
good when compared to the optimal traditional signature schemes.
The difference is greatest at the transition between ECDSA-based
schemes and RSA-based schemes once again, where FSS is 3.3
times more expensive than RSA alone. As the signatures per up-
date or veriﬁcations per signature grow, the FSS cost converges on
the traditional scheme’s cost as before and there is negligible over-
head to FSS.
4. FSS REFERENCE IMPLEMENTATION
This section considers server several interesting issues were en-
countered during the implementation of our forward-secure signa-
ture library. We consider several issues of practical importance
when implementing and subsequently using these constructs.
4.1 Design and Architecture
The libfss library is a C library providing a generic inter-
face to forward-secure signature operations as well as implementa-
tions of a number of FSS signature schemes. The library uses the
OpenSSL [36] cryptographic library to provide RSA, DSA, and
ECDSA implementations as well as other cryptographic support
functions such as hashing and random number generation. OpenSSL
RSA-1024ECDSA-t163k1BMTree 4096 RSAISum 4096 RSAProd 4096(64*64) RSAMMM 65535 RSABMTree 4096 ECDSAISum 4096 ECDSAProd 4096(64*64) ECDSAMMM 65535 ECDSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signature 0.1 1 10 100 1000 10000Cost (ms)BMTree 4096 RSAISum 4096 RSAProd 4096(64*64) RSAMMM 65535 RSABMTree 4096 ECDSAISum 4096 ECDSAProd 4096(64*64) ECDSAMMM 65535 ECDSA 1 10 100 1000 10000Signatures per Update 1 10 100 1000 10000Verifications per Signatureis one of the most widely used open-source cryptographic imple-
mentations; it runs on almost all varieties of Unix-like operating
systems as well as Windows, MacOS, and many embedded devices.
By using OpenSSL for the core cryptographic operations, libfss
is able to take advantage of over a decade of development and tun-
ing for these elements (as Section 3 showed, performance is largely
determined by the performance of the base algorithm). For many
platforms, OpenSSL provides highly optimized assembly code im-
plementations of these critical functions. Another advantage to
OpenSSL is that it has recently added the ability to transparently
use cryptographic acceleration hardware when available, a feature
which libfss will be able to leverage when possible.
The API of libfss is modeled after EVP API used in OpenSSL
for encryption and signature operations. It is a generic API where
“key” and “signature” objects contain type information which is
used to select the correct implementation to use for operations such
as sign, verify, and update. This allows the application using the
library to place all code dealing with different signature algorithms
in a single place, when a key is initially generated, and the remain-
ing calls to functions are scheme-independent. By using an API
similar to OpenSSL’s, libfss can be used in existing programs
with little modiﬁcation to the existing code.
The library currently contains implementations of ﬁve forward-
secure signature schemes as well as wrappers for the three built
in signature schemes that treat them as one-period forward-secure
schemes. The schemes implemented are the Tree scheme from [4]
and the Sum, Iterated Sum, Product, and MMM schemes from [27],
as well as RSA, DSA, and ECDSA.
4.2 Implementation Challenges
4.2.1 Deterministic Key and Signature Generation
For traditional signature schemes, being able to generate the same
key twice in practice is seen as a major security ﬂaw. OpenSSL, as
well as many other cryptographic libraries, take steps to prevent a
user from accidentally doing this through misconﬁguration on the
the pseudo-random number generator (PRNG) or similar mistakes.
For generic forward-secure constructions, those based off of the
Sum construction in particular, the ability to deterministicly gener-
ate a key multiple times given the same random seed is, however,
a necessity. This requirement for reproducibility also extends to
signature generation for schemes like DSA, where random num-
bers are used in signing as well. If signatures are not deterministic
then private keys for the Product and MMM schemes, for example,
cannot be made deterministic.
In OpenSSL key generation, the primality tests and other opera-
tions requiring random numbers draw directly from OpenSSL’s in-
ternal global entropy pool, which itself is typically ﬁlled from sys-
tem level sources of randomness [37]. Once initialized, OpenSSL’s
entropy pool cannot be reset to a known value, only updated with
additional entropy. For these reasons, there is no way to determin-
isticly generate a key in this architecture without completely re-
placing OpenSSL’s random number generator with one that can be
reset to a speciﬁc state. Because this global PRNG is used not just
by libfss but also potentially by the application itself through the
use of other OpenSSL functions, replacing the PRNG altogether is
not an acceptable design.
The solution taken by libfss is to incorporate the code from
OpenSSL for generating RSA, DSA, and ECDSA keys (as well as
DSA and ECDSA signatures) into libfss, and replacing any calls
to OpenSSL’s PRNG with calls to our own PRNG in the copies.
This internal PRNG is implemented using AES-128 in Counter
mode [30]. A seed provided to the function is used as the key for
AES, and random numbers are provided by the encrypted counter
output.
Although this deterministic key generation is required within
certain FSS schemes for correct operation, it would still be unwise
to expose it to users who could accidentally generate keys with in-
secure random seeds. For this reason the top level API does not
provide a way to specify the seed to be used, and instead gener-
ates a random seed from OpenSSL’s PRNG. Internally, when a key
or signature needs to be generated, the callback is used and it is
possible to specify a seed.
This need for repeatability also raises potential problems for the
use of hardware cryptographic accelerators with forward-secure sig-
nature schemes. Accelerators that perform entire large-scale oper-
ations (such as an entire key generation or signature) on-chip using
an internal random number generator would cause similar prob-
lems, and likely be unusable for these FSS constructions. On the
other hand, accelerators that only provide hardware assistance for
cryptographic building blocks such as modular exponentiation or
large number arithmetic, would cause no problems.
4.2.2
Secure Deletion of Sensitive Key Material
As previous works have shown, it is exceptionally difﬁcult to se-
curely remove all traces of sensitive information from the numerous