(b) One thread: MFSK128 (16-FSK 480 wpm).
(c) Concurrent processes: THOR22 (18-IFK+ 78 wpm),
RTTY45 (BFSK 60 wpm), PSK125R (BPSK 110 wpm).
Fig. 8. Non-exhaustive examples of advanced communications with Fldigi-Noise-
SDR at 5 cm from the device E in an office, at 400 MHz. All modes but RTTY45
use FEC and interleaving and are preceded by an RSID.
of other legitimate amateur radio transmissions could conceal the
attack, too. Figure 8 shows several modes preceded by their RSID.
The red lines show that Fldigi was able to perfectly identify and track
the carrier frequency and start decoding, without any manual effort.
The advantages of analog protocols: Digital protocols offer
many advantages, but also analog protocols are useful in some
applications. Transmitting audio with AM and Narrow-Band
Frequency Modulation (NBFM) is particularly useful during the
analysis of a device and the implementation or tuning of new
techniques. The audio signals offer a quick human-understandable
feedback and tolerate huge distortion and noise. The SSTV protocol
transmits color images with NBFM. In a practical security scenario,
analog protocols could be useful to exfiltrate audio and images.
Results are shown in Table IV (IV.22-IV.24).
Summary: We tested many analog and digital protocols with
different properties (Table II) on many devices (Table III) with
different architectures. This shows how attackers can use Noise-SDR
to establish advanced communication channels, covering a large
design space without any effort. Reading Table IV by row shows
the improvements made possible by Noise-SDR for all devices,
whereas reading it by column highlights the differences among
devices. Figure 8 shows some example spectrograms.
VI. SECURITY IMPACT
Noise-SDR uses electromagnetic leakage to achieve advanced ra-
dio transmission, using arbitrary modulation and state-of-the-art pro-
tocols. This requires executing code without any privilege, permis-
sion, or access to output peripherals, which would normally be un-
able to transmit radio signals. Despite some limitations on the power,
bandwidth, and frequency of the leakage, Noise-SDR has many secu-
Fig. 10. Anonymized and simplified scheme of the home environment. The target
is placed on a desk as in a typical workstation. Letters denote different areas. The
presence of walls, appliances, and other objects results in a realistic scenario.
rity applications. In the following, we describe several case studies
for exfiltration, tracking, and injection, summarized in Figure 9.
A. Exfiltration
Threat model: An attacker compromises a victim device, and
then runs Noise-SDR’s code to exfiltrate sensitive data to a receiver
nearby. The receiver is also controlled by the attacker. In the worst
case for the attacker, the victim is air-gapped, that is, disconnected
from the network. Although compromising air-gapped networks
is possible (e.g., Stuxnet [91]), one might assume that the absence
of available transceivers prevents exfiltration of data even when an
attacker can execute code. However, using a physical leakage for
transmission breaks this assumption [3]–[28].
Impact of Noise-SDR: Compared to previous work, Noise-SDR
offers several advantages for exfiltration. For example, (i) use of
previously-unavailable advanced techniques, modulations, and
protocols, that offer great performance gains, (ii) ability to choose
a convenient trade-off in a huge design space according to the
attackers needs and goals, (iii) flexible software-defined physical
layer that can be dynamically adapted to the conditions, (iv)
software-defined approach that enables the reuse of optimized tools
for existing protocols at transmission and reception, (v) little/no
previous knowledge in radio communications required.
Example, practical exfiltration: We show two practical setups
that can be used on the field, shown in Figure 11 (left). The
Tytera MD UV 380 [92] is used to receive Very High Frequency
(VHF) or Ultra High Frequency (UHF) radio signals. After
down-conversion, the resulting audio signal is sent to Fldigi for
Android [57] running on a smartphone. Fldigi can then decode
any of the protocols supported by Fldigi-Noise-SDR. A similar
approach could be replicated with other reception tools and radio
peripherals. For example, the Tytera handheld radio can be replaced
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1202
VictimAttackerTXRXExfiltrationVictim's dataTrackingTXRXInjectionMalicious dataTXRXTracking dataTXAED2.3m1.9m1.3m1.5m3mBC2.8m2.8m2.2m2.2m1.5m1.5m1.1m1.5m1.8m1.8mFig. 12. SNR and percentage of received FT4 beacons at different distances and
from different directions from device C at 1.2 GHz in an office.
Fig. 11. Two portable receivers: (left) based on an handheld radio, (right) based
on an SDR dongle. Fldigi is used for decoding: (left) DominoEx16 at 1.5 m from
device E, (right) THOR16 at 3 m from device B.
by a ∼ 25$ RTL-SDR dongle [93] controlled by the RFAnalyzer
application [94], as shown in Figure 11 (right). In these examples,
the excellent properties of DominoEX16 and THOR16 make
it possible to correctly receive from device E (1.5 m, 115 wpm)
and device B (3 m, 58 wpm) using extremely simple and popular
equipment, and without any engineering effort. Also note that
this is a case in which using a relatively small bandwidth is very
convenient both to work at low power and to use simple receivers
(e.g., compared to large-bandwidth SDRs like the USRP210). At
shorter distances we can use faster protocols, as shown in Table IV.
Example, flexible exfiltration: To show the flexibility of Noise-
SDR, we demonstrate the following practical scenario and speed/dis-
tance trade-off. We consider device E on a desk in the home environ-
ment of Figure 10. We use Fldigi-Noise-SDR to exfiltrate a private
DSA key (771 bytes) at 400 MHz. This application does not tolerate
errors at reception. An attacker that can get close to the device (e.g.,
1 cm to 50 cm on the same desk), but only for a short period of time,
can use 3X PSK250R. At 660 wpm the exfiltration takes only a few
seconds. However, an attacker might be limited to covertly listen in
another separate room, but with more time available. In this case,
THOR22 shows excellent performance thanks to its IFK+ that is
resistant to multi-path reception. We were able to correctly receive
the key (sent line by line) in some minutes from area C (i.e., at more
than 5 m, enclosed by a 15 cm-think wall). We noticed that, while
other protocols like MFSK and PSKR work in these conditions too,
THOR22 is superior in ease of use (e.g., tuning) and reliability.
B. Tracking Beacons
Threat model: In a setting similar to exfiltration, the attacker
runs Noise-SDR’s code to transmit a fixed beacon signal that can be
used to identify and track the victim. Also in this case the attacker
controls the receiver. This scenario is particularly relevant for
mobile and IoT devices. For example, let us consider an Android
application without any special privilege or permission. Users would
install this application believing that their privacy will be preserved,
because there are no permissions which would allow, for example,
to transmit tracking signals (and airplane mode is additionally
available). With Noise-SDR, transmitting tracking signals becomes
possible and effective without requiring any privilege or permission
to access peripherals, breaking this assumption.
Impact of Noise-SDR: Since tracking requires only a fixed
message, attackers can use an offline implementation of Noise-SDR
Fig. 13. Injection from device E to a receiver on channel 400.02 MHz (UHF band) at
1 m. Noise-SDR remotely controls a TYT MD-UV 380, using DTMF signaling [95]
to enable and disable the receiver, and NBFM audio to transmit a voice message.
where the RF-PWM stage transmits a precomputed wave. This
way, a complex protocol (e.g., very resilient using symbol shaping,
FEC and interleaving) can be implemented with a very tiny piece of
code, easy to conceal and with excellent transmission performance.
In addition, DSSS could be used to achieve secrecy (secret or
even cryptographic codes, transmission below the noise floor) and
multiple access (with orthogonal codes like GPS).
Example, RSID-based beaconing: RSIDs have excellent recep-
tion properties even below the noise floor. In addition, they occupy a
small bandwidth and there exist many codes that can be assigned to
different devices for concurrent tracking. For example, we place de-
vices C and E side by side on a desk in the home environment of Fig-
ure 10. We assign them the RSID of PSK250R at fIF =8kHz and
THOR22 at fIF =9kHz, respectively. Both devices transmit their
RSID continuously, with Fldigi-Noise-SDR running in background.
At 2.5 m at the 1.4 GHz harmonic with a USRP B210 we can clearly
distinguish both codes. Device E has a much stronger leakage than
device C (also see Table IV), and tracking is possible all over areas
A, B, C, D, and E (i.e., more than 5 m in many directions and in
another closed room behind a 15 cm wall). The same is possible
with the MD-UV 380 portable setup using the 400 MHz harmonic.
Example, FT4-based beaconing: To improve tracking for
device C despite the lower transmission power, we use FT4 [72].
With its small bandwidth, high coding rate, and transmission
synchronized with Universal Coordinated Time (UTC) time,
FT4 is a perfect protocol to achieve large distance at very low
power. With a USRP B210 and the WSJT-X [70] SDR receiver,
reception is possible up to 5 m, as shown in Figure 12 for multiple
directions (note that the experiment was carried in a realistic indoor
environment and free-space loss is not the only factor that affects
reception). Table IV reports more results for other devices.
C. Injection
Threat model: The attacker uses Noise-SDR on one victim
(compromised beforehand or remotely) to inject malicious signals
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1203
MD UV 380 UHF/VHFhandheld radio tuned at@400MhzAudiocableFldigi for Android(AndFlmsg) running on anAndroid phone, decodingDominoEx16 messagesRTL-SDR tunedat @799.7MhzRFAnalyzerAndFlmsg,decoding aTHOR16 messageDTMF *44**(Disable)DTMF *45**(Enable)NBFM VoiceFrequencyTimeMHzinto another victim receiver (on the same platform or nearby). This
is useful when placing a real transmitter close to the victim receiver
is impractical. Leveraging a victim device for transmission can also
be less expensive and more stealthy than using radio equipment.
Impact of Noise-SDR: Previous work transmits using simple
custom protocols. In some cases [3], [6], [9] reception is possible
with standard devices, provided that the attacker controls them and
has access to low-level processing (e.g., raw WiFi data [9]). Instead,
thanks to arbitrary modulation and its software-defined approach,
Noise-SDR can generate valid signals of existing real-world proto-
cols. For this reason, we believe it could start a novel line of research
on signal injection and spoofing from unprivileged software.
Example, controlling a handheld UHF radio: The TYT MD-
UV 380 [92] is a very popular handheld two-way radio operating
in the UHF and VHF bands, supporting both digital and analog
transmissions. Like many types of radio equipment, it supports
remote control functions (e.g., enable/disable) through DTMF
signaling [95]. We assume that it has been programmed to listen on
Channel 1 at 400.020 MHz NBFM, and that it can be enabled and
disabled using the DTMF codes *45** and *44** respectively. Note
that once disabled the radio can be enabled only when it receives the
*45** code, or by reprogramming it (which requires physical access).
We use Noise-SDR running on a Carambola2 (device E) to transmit
the DTMF codes and a voice message at the correct frequency
(fc = Fleak + FIF = 400MHz + 19.2kHz). We can successfully
enable the radio, transmit a voice message, and disable the radio, as
shown in Figure 13. In the home environment of Figure 10, the voice
transmitted by device E on the desk can be heard clearly all over
most of areas A, B, D (i.e., more than 4 m). DTMF is less robust,
but we successfully disabled the radio at 4 m in area B by repeatedly
sending the off sequence for around 1 min. Among our devices,
only the device E can transmit in the frequency range of the UHF
radio, but this range is reasonable for other IoT devices with similar
hardware. The choice of the intermediate frequency (and thus of
the channel frequency) is limited by the bandwidth of device E (see
Table III). More complex radio equipment (e.g., repeaters, sirens)
could offer even more functions through DTMF. Compromising
some digital equipment nearby could be then used to control the
radios. Also, a repeater could further broadcast a message at higher
power reaching more devices at larger distance. Noise-SDR is not
limited to a specific protocol, and the same principle could be
applied to other types of control and data signals. Some directions
for future research on GNSS are mentioned in Section IX.
VII. COUNTERMEASURES
Low-accuracy timers: The lower the time resolution, the stricter
the constraints on the generated signal, to the point where RF-PWM
is not practical. Countermeasures that mitigate timing side channels
by preventing accurate timing measurements (e.g., [51], [96], [97])
could be applied to Noise-SDR, too. However, the arms race with
attackers (e.g., [51]–[55]) shows that this solution is not definitive,
because other timing sources are available (e.g., calibrated counters).
Countermeasures against Rowhammer: Those countermea-
sures against Rowhammer that focus on detecting or preventing
fast DRAM accesses could also be applied to Noise-SDR, but
they are not a definitive solution. The detection of electromagnetic
leakages [65] is not practical on mobile devices. Some of the
approaches proposed for ARMv8-A [67] are not likely to be detected
by observing cache misses (e.g., [98]) and cannot be easily forbidden
in unprivileged code. Moreover, gadgets in system calls could be
exploited from unprivileged code [67] (though not fast enough for
flipping bits, they could be sufficient for Noise-SDR modulation). Fi-
nally, offensive research on Rowhammer is active and keeps finding
several ways to access DRAM quickly (e.g, [55], [67], [99], [100]).
Careful design: A careful RF design reduces leakages and
coupling between components, possibly at a higher cost. Shielding
reduces the emissions from a device, but it can be at least partially
bypassed [8], [11]. SSC reduces the peak power of the DRAM
emissions, but software can still modulate the sub-harmonics [8].
VIII. RELATED WORK
Fully-digital radios: Several fully-digital radios have been
proposed in literature, based on one-bit coding as explained in Sec-
tion II. Alternatively, a Direct-to-RF Converter (DRFC) synthesizes
a radio signal directly with a high-speed multi-bit digital-to-analog
converter (DAC). We refer the reader to specialized literature [29],
[30], [101]. These techniques work with real hardware [30]–[33],
whereas Noise-SDR uses software-induced leakages only.
Rowhammer: Code running Rowhammer attacks on x86-64 ma-
chines can be detected through its electromagnetic leakages [65], and
it can be used for covert channels [7]. Rowhammer attacks against
smartphones with ARM architecture have been shown in [66] using
DMA. Other approaches include exploiting the GPU [55] or ArmV8
cache maintenance instructions [67] for fast DRAM access. How-
ever, Rowhammer attacks aim at flipping bits in DRAM, and [7]
uses a custom FSK protocol on x86-64, not generic signals on ARM.
Soft-TEMPEST: We have covered Soft-TEMPEST [1], [2] and
covert channels [3]–[28] in Section I. Noise-SDR goes beyond pre-
vious modulation schemes, introducing arbitrary signal modulation.
Simple radios: Makers have built radio transmitters with very
few and simple components, described in numerous blog posts and
repositories. For example: [44], [45] use Soft-TEMPEST leakages to
send simple tunes; [102], [103] implement RTTY transmission with
the Local Oscillator (LO) leakage of a SDR receiver; [104]–[110]
use a cable connected to a microcontroller output pin to implement
OOK, FM, AFSK, NTSC, PAL, AM; examples of clock signal FSK
and delay line FKS simple radios are shown in [111]; [112] switches
Ethernet speed to transmit CW signals; [113] uses VGA to transmit
DVB-T, PAL, and NTSC; [114] uses VGA for FM; [115] uses the
VGA DACs to feed an RF modulator; [116] uses the DAC of a
reverse-engineered USB-to-VGA converter as DRFC SDR able to
transmit generic signals including GSM and GPS; [117] is a direct
sampling receiver using the analog-to-digital converter (ADC) of a
microcontroller; [118] is a fully-digital FPGA-based BLE receiver.
These works use signal processing tricks (e.g., undersampling) to
deal with limited resources, and they were a source of inspiration,
even if theoretical explanations are often informal or lacking.
Naturally, those that use output pins or multi-bit VGA DACs are
those that achieve the best results, but these outputs are not available
to unprivileged software on smartphones and computers. Note
that [105], [106] are fundamentally different from Noise-SDR. They
first convert baseband audio into a ∆Σ signal, and then they transmit
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1204
it with a simple fixed BFSK using an output pin. While this method
achieves analog FM audio transmission, it cannot generate amplitude
and phase modulated radio signals (only BFSK). Instead, Noise-SDR
uses RF-PWM to generate arbitrarily modulated radio signals (start-
ing from an OOK square wave generated with memory accesses). To
the best our knowledge, none of these works achieves arbitrary mod-
ulation on smartphones or laptops using purely software leakages.
Nexmon SDR: Some Broadcom WiFi chips can transmit a
short arbitrary signal in the WiFi band. Using a firmware patch,
Nexmon [119], [120] turns them into an SDR, to build WiFi covert
channels [121], or to jam WiFi networks [122].
IX. DISCUSSION AND FUTURE WORK
Limitations: Noise-SDR achieves arbitrary modulation, but it
also has some limitations. First, the achievable power, frequency,
and bandwidth are inherently limited by the leakage and the ability
of the attacker to control it. Nevertheless, leakage often appears
at several harmonics covering a large spectrum from a few MHz
to several GHz. Moreover, Noise-SDR controls the intermediate
frequency of the RF-PWM carrier, letting the attacker chose an
offset (of up to hundreds of kHz on ARMv8-A) from the carrier
frequency. For example, this is enough to align the carrier frequency
to that of a GLONASS satellite in the band around an harmonic of
the DRAM clock at 1.6 GHz. The second limitation is the bandwidth,
constrained by the execution time of the instructions that produce
the leakage. In our implementation we can reach tens of kHz on
ARMv7-A, x86-64 and MIPS32, and a few MHz on ARMv8-A. In our
experiments on x86-64 the limit is actually set by the harmonics of
the SSC clock. However, this bandwidth is sufficient for a large num-
ber of useful protocols. Moreover, a large bandwidth is not always
desirable. Using a very small bandwidth is a strategy used by many
protocols to achieve large distance at low power [81] (e.g., FT4 [72]
uses only 90 Hz). Finally, another limitation is the resolution and sta-
bility of time measurements. Software timers are not as accurate as
dedicated radio hardware, but their performance (e.g., ns resolution
of clock gettime) is sufficient for many protocols. Moreover, state-
of-the-art receivers have excellent algorithms to track clock drifts.
Open directions: Noise-SDR opens novel opportunities beyond
data exfiltration. First, Noise-SDR could facilitate the security
evaluation of complex systems regarding unintended emissions. The
analyst could define a number of protocols, each representative of a
given threat model, and then transmit beacons using Noise-SDR. A
frequency scan would reveal whether the beacons can be retrieved
from a given distance and direction, and at which frequency. This
would also be useful to evaluate countermeasures like shielding.
Second, Noise-SDR could leverage noise from high-speed digital
components to inject malicious radio packets into victim receivers
on the same platform. Indeed, their clock frequency often overlaps
and interferes with radio protocols [123]–[126]. In particular,
DRAM frequency or its harmonics sometimes overlap with
GLONASS at 1.6 GHz (Table III). Future research could try to
inject fake satellites, to produce erroneous location results, or to
exploit software vulnerabilities (similar to [127]). As a preliminary
result, Figure 14 shows the reception of a GLONASS C/A code
transmitted by an Innos D6000 at 800.875 MHz (the same is
possible with a Galaxy A30S using the harmonic at 1794 MHz). To