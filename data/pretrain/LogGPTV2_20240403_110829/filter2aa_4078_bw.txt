式(ECB、 CBC、 CFB 和 OFB)中工作。
警告 :
所有与 密钥 长度、 分组大小和加密轮数有关的内 容可能看起来特别枯燥。 但是， 这些 内 容是非
常重妥的 ， 因 此一定要确信在参加考试之前复 习 这些内容。
IDEA 算法的专利权属于它们的瑞士开发人员 。 但是， 开发人员 向期望使用 IDEA 作为非商业
用途的人授予了无限制许可。 在 Phil Zimmerman 的流行的可靠隐私(Pretty Good Privacy， PGP)安全
电子邮件包中 ， 发现了 IDEA 的一种流行实现。 第 7 章将对 PGP 进行更详细的介绍 。
6.4.4 Blowfish
Bruce Schneier 的 Blowfish 分组密码是 DES 和 IDEA 的另一种选择。 与它的这些前辈们一样，
Blowfish 对 64 位文本分组进行操作。 然而， Blowfish 扩展了 IDEA 的密钥强度， 甚至准许使用变长
密钥， 范围从相对不安全的 32 位到相当难破解的 448 位 。 很显然， 较长的密钥将导致加密/解密时
第6章 密码学与对称加密算法
间 的相应增加。 不过， 计时试验已经表明， Blowfish 是比 IDEA 和 DES 更快的算法。 Schneier 先生
没有对 Blow丑sh 进行许可限制 ， 人们可以自由使用 该密码。 Blowfish 加密被内嵌到许多商业软件产
品 和操作系统中 ， 此外还存在许多可 以被软件开发人员使用 的 Blowfish 库 。
6 .4.5 Ski同ack
Sk:i时ack 算 法 由美国 政府在联邦信息 处 理标准σederal Information Processing Standard ，
FIPS)1 85 ， 即托管加密标准证书(Escrowed Encryption St扭曲时， EES)中批准使用 。 与许多分组密码
一样， Sk:ipjack 对 64 位的文本分组进行操作。 这种算法使用一个 80 位的密钥， 并且支持 DES 支持
的相同 4 种操作模式。 美 国政府很快接受了 Skipjack， 并且提供支持 Clipper 和 Capstone 高速加密芯
片 的密码学程序 ， 这些芯片是为重要商业应用而 设计的。
然而， Sk:ipjack 有一个额外的麻烦， 即支持加密密钥的托管。 美国国家标准和技术协会(NIST)
和财政部这两个政府机构都持有重建 Skipjack 密钥所需的一部分信息。 当法律执行机构获得合法授
权后， 他们将联系这两个机构获得密钥的部分信息， 并且可以对参与成员之间的通信进行解密。
Skipjack和Clipper芯片还没有被密码学团体普通接受， 这是因为它的托管程序由美国政府控制。
Rìvest 密码 5(Rivest Cipher 5， RC5)
Rivest 密码 5或RC5 是 RSA 数据安全公司 拥有专利的对称算法。 RC5 是一种分组大小可交的
(32 位 、 64 位或 1 28 位)分组密码 ， 使用 的 密钥 长度在 0 位到 2048 位之间 。
6.4.6 高级加密标准(AES)
2000 年 1 0 月 ， 美国国家标准和技术协会例1ST)宣布 阳n也el(发音为 "r恤le-doll" )分组密码己
经被选中成为 DES 的 替代标准。 在同年的 12 月 ， 美国商务部长批准了 FIPS 1 97 ， 它要求使用
AESlRijndael 对所有敏感但未被美国 政府分类的数据进行加密 。
AES 密码准许使用三种密钥强度: 128 位、 192 位和 256 位。 AES 最初的规范支持 1 28 位分组
的处理， 但是 Rijndael 超出 了 这个规范， 它准许密码学家使用与密钥长度相等的分组大小。 如下所
示 ， 加密的轮数依赖于所边的密钥长度:
• 1 28 位密钥需要 1 0 轮加密。
• 1 92 位密钥需要 1 2 轮加密。
• 256 位密钥需要 14 轮加密。
Twofish 算法
由 Bru臼 Schn巳ier(也是Blowfish的创建者)开发的Twofish算法是AES的 另 一种选择。 与Rijndael一
样， Twofish也是一种分组密码。 这种算法处理 128 位的数据分组， 并且能够使用 长度最大为 256 位
的 密钥 。
Twofish 利 用 了 其他算法所没有 的两种技术:
• 预白噪声 化(prewhitening)涉及在第一轮加密前将明文与 一个单独的 子密钥进行异或 。
• 后白噪声 化(postwhit巳ning)在第 1 6 轮加 密后 进行相似的操作 。
AES 只是你需要熟悉的众多对称加密算法之一。 表 6.3 列 出 了 某些常见且著名 的对称加密算法
1 51
1 52
CISSP 官方学 习指南(第 7 版)
及其分组大小和密钥大小 。
表 6.3 对称加密算法记忆表
算法名 分组大小 (单位为位) 密钥大小(单位为位)
数据加密标准(DES) 64 56
三重 DES(3DES) 64 1 1 2 或 1 68
高级加密标准(AES) 1 28 1 28 、 1 92 、 256
Rijndael 可变 128、 1 92、 256
Twofish 128 1 -256
Blowfish(通常在 SSH 中使用) 64 32-448
IDEA(在 PGP 中使用) 64 1 28
基于 RSA 的 Rivest 密码 5(RC5) 32、 64、 1 28 。-2040
基于 RSA 的 Rivest 密码 4(RC4) 流式 1 28
基予 RSA 的 Rivest 密码 2(RC2) 64 1 28
Skipjack 64 80
6.4.7 对称密钥管理
由于加密密钥中包含的信息对于密码系统而言是至关重要的， 因此密码系统的管理员和用户必
须采取特殊的措施以保护密钥材料的安全。 这些安全措施被统称为密钥管理实践。 它们包含密钥的
生成、 分发、 存储、 销毁、 恢复和托管 。
1 创建和分发对称密码
正如前面提到的 ， 对称加密算法内在的一个主要问题是操作算法所需密钥的安全分发。 在下面
的内容中， 将对下列 三个主要的用于安全交换密钥 的方法进行分析 : 离线分发、 公钥加密和
Di旺血E血1巳-H巳ell阳I口m曰nan 密钥交换算法。
离线分发 在技术方面最简单的方法涉及密钥材料的物理交换。 一方向另一方提供包含密钥的
一张纸或一份存储介质。 在很多硬件加密设备中 ， 密钥材料以 电子设备的形式存在， 这类似于插入
到加密设备中 的真实的钥匙。 然而， 这些方法都具有各自 固有的缺陷。 如果通过电子邮件发送密钥
材料， 那么密钥材料就可能被截获。 电话可能会被窃听 。 包含密钥的纸张则可能被无意丢进废纸篓
或丢失。
公钥加密 许多通信人员希望在没有密钥分发之争的情况下获得密钥加密的速度优势。 因此，
许多人使用公钥加密来建立初始的通信链接。 一旦链接成功建立， 并且双方对相互的身份都感到满
意， 那么他们就会在安全的公钥链接上交换密钥。 随后 ， 通信双方从基于公钥算法的通信进入基于
秘密密钥算法的通信， 并且能够享受快速的处理过程。 一般而言 ， 与公钥加密相比， 私有密钥加密
的速度快数千倍。
Diffie-Hellman 算法 某些情况下， 无论是公钥加密还是离线分发， 都是不充分的 。 双方可能需
要相互通信， 但是他们没有物理手段交换密钥材料， 并且没有适当 的公钥基础设施来促进秘密密钥
的交换。 在这样的情况下， 像 Diffie-Hellman 这样的密钥交换算法被证明 是极为有用 的机制 。
第6章 密码学与对称加密算法
提示 :
安全 RPC(S-RPC)利用 Di固守Hellman 算法进行密钥 交换 。
关于 Diffie自Hellman 算法
当 Di:ff -Hellman 算法与 1976 年发布时 ， 对于 当 时的 密码学科学是一次大的进步。 当 然， 它目前
仍 在使用 ， 该算法的 工作过程如下:
(1) 通信双方(我们 称他们 为 Rich缸d和Sue)约 定 两 个 大数p(一个质 数)和国一个整数)， 其 中
1 <g<p。
(2) Richard 选择一个随机的 大整数 r， 并且执行下 面 的计算: R= gr mod p
(3) Sue 选择一个随机的 大整数 S， 并且执行下 面 的计算: S = gS mod p
(4) Richard 将 R 发给 Sue， 并且 Sue 将 S 发给 Richardo
(5) Richard 随后执行下面 的计算: K= Sr mod p
(6) Sue 随后执行下 面 的计算: K= RS mod p
此时 ， 阳ch缸d 和 Sue 都得到相 同 的值 K， 并且可以在双方的通信中将之用 于私有密钥通信。
2. 存储和销毁对称密钥
在对称密钥加密中， 另一个主要的挑战是在密码系统中使用 的密钥必须进行安全保管。 以下给
出了存储加密密钥的 最佳实践:
• 永远不要将加密密钥存储在存放加密数据的 同一个系统中， 这将使攻击者更容易进行攻击 !
• 对于敏感的密钥， 可 以考虑两个不同 的人分别持有密钥的一半。 他们必须合在一起才能构
成完整的密钥 。 这是众所周知 的知识分割原则(己在本章前面提到)。
当知道密钥的用户 离开组织或不再被允许访问通过密钥包含的材料时， 密钥必须更改， 同时使
用 该密钥进行加密的所有材料必须用新的密钥进行重新加密。 销毁一个密钥并将一个用户).}3.才称密
码系统中移除是困难的， 这也是组织转而使用非对称算法的一个重要原因。 这部分内容将在第 7 章
中进行讲述。
3. 密钥托管
密码学是一种强大的工具。 与大多数工具一样， 密码学可以被用于实现许多有益的 目 的， 但是
也可能被恶意使用 。 为了应对密码学技术的爆炸性增长， 各国政府纷纷考虑实现密钥托管系统。 这
样的系统允许政府在有限的情况下(例如， 法院判决)从中央存储设备获得特定通信所使用 的密钥。
在过去 1 0 年中， 人们提议通过下列两种主要途径进行密钥托管 :
公平密码系统 在这种托管方法中 ， 通信中使用 的私有密钥被分为两个或多个部分， 这些部分
都被交给独立的第三方。 每个部分本身都是无用 的 ， 但是通过重新组合可以获得私有密钥。 政府获
得法律授权访问特定的密钥时， 需要向所有第三方提供法院的证据， 随后才能重新组装这个私有
密钥。
托管加密标准 这种托管方法向政府提供解密密文的技术手段。 这个标准是本章前面讨论的
Skipjack 算法的基础 。
政府管理者几乎不可能克服不可避免的法律和隐私障碍来广泛实现密钥托管。 虽然技术上没有
问题， 但是一般民众不可能接受政府对个人生活的潜在介入。
1 53
1 54
CISSP 官方学 习指南(第 7 版)
6.4.8 密码生命周期
除 了一次一密， 所有的密码系统都有一个有限的生命周期。 摩尔定律经常被用来描述计算能力
的进步趋势， 它指出微处理器的性能将每两年翻一番。 这意味着， 最终处理器将达到简单猜测用于
通信加密密钥所需的 处理能力 。