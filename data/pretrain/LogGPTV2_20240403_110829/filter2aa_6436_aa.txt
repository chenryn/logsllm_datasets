# Maven
---
## 简介
Maven 翻译为"专家"、"内行"，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。
Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。
Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。
一个 Java 项目需要确定引入哪些依赖包。例如，如果我们需要用到 commons logging，我们就必须把 commons logging 的 jar 包放入 classpath。如果我们还需要 log4j，就需要把 log4j 相关的 jar 包都放到 classpath 中。这些就是依赖包的管理。
其次，我们要确定项目的目录结构。例如，src 目录存放 Java 源码，resources 目录存放配置文件，bin 目录存放编译生成的. class 文件。
此外，我们还需要配置环境，例如 JDK 的版本，编译打包的流程，当前代码的版本号。
最后，除了使用 Eclipse 这样的 IDE 进行编译外，我们还必须能通过命令行工具进行编译，才能够让项目在一个独立的服务器上编译、测试、部署。
这些工作难度不大，但是非常琐碎且耗时。如果每一个项目都自己搞一套配置，肯定会一团糟。我们需要的是一个标准化的 Java 项目管理和构建工具。
Maven 就是是专门为 Java 项目打造的管理和构建工具，它的主要功能有：
* 提供了一套标准化的项目结构；
* 提供了一套标准化的构建流程（编译，测试，打包，发布……）；
* 提供了一套依赖管理机制。
---
## Maven 特点
* 项目设置遵循统一的规则。
* 任意工程中共享。
* 依赖管理包括自动更新。
* 一个庞大且不断增长的库。
* 可扩展，能够轻松编写 Java 或脚本语言的插件。
* 只需很少或不需要额外配置即可即时访问新功能。
* `基于模型的构建` − Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，而不需要在大多数情况下执行任何脚本。
* `项目信息的一致性站点` − 使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，并添加到关于项目开发状态的标准报告中。
* `发布管理和发布单独的输出` − Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或 Git）集成，并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如 JAR，包含其他依赖和文档的归档，或者作为源代码发布。
* `向后兼容性` − 您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。
* 子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，
* `并行构建` − 编译的速度能普遍提高20 - 50 %。
* `更好的错误报告` − Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。
---
## 约定配置
Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：
| 目录	| 目的 |
| - | - |
| ${basedir}	                        | 存放 pom.xml 和所有的子目录 |
| ${basedir}/src/main/java	            | 项目的 java 源代码 |
| ${basedir}/src/main/resources	        | 项目的资源，比如说 property 文件，springmvc.xml |
| ${basedir}/src/test/java	            | 项目的测试类，比如说 Junit 代码 |
| ${basedir}/src/test/resources	        | 测试用的资源 |
| ${basedir}/src/main/webapp/WEB-INF	| web 应用文件目录，web 项目的信息，比如存放 web.xml、本地图片、jsp 视图页面 |
| ${basedir}/target	                    | 打包输出目录 |
| ${basedir}/target/classes	            | 编译输出目录 |
| ${basedir}/target/test-classes	    | 测试编译输出目录 |
| Test.java	                            | Maven 只会自动运行符合该命名规则的测试类 |
| ~/.m2/repository	                    | Maven 默认的本地仓库目录位置 |
---
## Maven 环境配置
Maven 下载地址：http://maven.apache.org/download.cgi
下载包后解压
添加系统变量 MAVEN_HOME
编辑系统变量 Path，添加变量值：%MAVEN_HOME%\bin
输入 mvn -version，查看 Maven 的版本信息
---
## Maven 项目结构
一个使用 Maven 管理的普通的 Java 项目，它的目录结构默认如下：
```
a-maven-project
├── pom.xml
├── src
│   ├── main
│   │   ├── java
│   │   └── resources
│   └── test
│       ├── java
│       └── resources
└── target
```
项目的根目录 a-maven-project 是项目名，它有一个项目描述文件 pom.xml，存放 Java 源码的目录是 src/main/java，存放资源文件的目录是 src/main/resources，存放测试源码的目录是 src/test/java，存放测试资源的目录是 src/test/resources，最后，所有编译、打包生成的文件都放在 target 目录里。这些就是一个 Maven 项目的标准目录结构。
所有的目录结构都是约定好的标准结构，我们千万不要随意修改目录结构。使用标准结构不需要做任何配置，Maven 就可以正常使用。
最关键是项目描述文件 pom.xml
---
## Maven POM
POM(Project Object Model，项目对象模型) 是 Maven 工程的基本工作单元，是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。
执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。
POM 中可以指定以下配置：
* 项目依赖
* 插件
* 执行目标
* 项目构建 profile
* 项目版本
* 项目开发者列表
* 相关邮件列表信息
所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。
* project	    工程的根标签。
* modelVersion	模型版本需要设置为 4.0。
* groupId	    这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.bank.project 拥有和银行相关的项目。
* artifactId	这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。
* version       这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。
```xml
    4.0.0
    com.bank.project
    project
    1.0
```
groupId 类似于 Java 的包名，通常是公司或组织名称，artifactId 类似于 Java 的类名，通常是项目名称，再加上 version，一个 Maven 工程就是由 groupId，artifactId 和 version 作为唯一标识。我们在引用其他第三方库的时候，也是通过这 3 个变量确定。例如，依赖 commons-logging：
```xml
    commons-logging
    commons-logging
    1.2
```
使用 `` 声明一个依赖后，Maven 就会自动下载这个依赖包并把它放到 classpath 中。
### Super POM
Super POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的默认仓库 http://repo1.maven.org/maven2 去下载。
Maven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被重写。
创建目录 MVN/project，在该目录下创建 pom.xml，内容如下：
在命令控制台，进入 MVN/project 目录，执行以下命令：
```
mvn help:effective-pom
```
Maven 将会开始处理并显示 effective-pom。
Maven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。
---
## 依赖管理
如果我们的项目依赖第三方的 jar 包，例如 commons logging，那么问题来了：commons logging 发布的 jar 包在哪下载？
如果我们还希望依赖 log4j，那么使用 log4j 需要哪些 jar 包？
类似的依赖还包括：JUnit，JavaMail，MySQL 驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载 zip 包，解压，放入 classpath。但是，这个过程非常繁琐。
Maven 解决了依赖管理问题。例如，我们的项目依赖 abc 这个 jar 包，而 abc 又依赖 xyz 这个 jar 包：
```
Sample Project -->  abc  -->  xyz
```
当我们声明了 abc 的依赖时，Maven 自动把 abc 和 xyz 都加入了我们的项目依赖，不需要我们自己去研究 abc 是否需要依赖 xyz。
因此，Maven 的第一个作用就是解决依赖管理。我们声明了自己的项目需要 abc，Maven 会自动导入 abc 的 jar 包，再判断出 abc 需要 xyz，又会自动导入 xyz 的 jar 包，这样，最终我们的项目会依赖 abc 和 xyz 两个 jar 包。
我们来看一个复杂依赖示例：
```xml
    org.springframework.boot
    spring-boot-starter-web
    1.4.2.RELEASE
```
当我们声明一个 spring-boot-starter-web 依赖时，Maven 会自动解析并判断最终需要大概二三十个其他依赖：
```
spring-boot-starter-web
  spring-boot-starter
    spring-boot
    sprint-boot-autoconfigure
    spring-boot-starter-logging
      logback-classic
        logback-core
        slf4j-api
      jcl-over-slf4j
        slf4j-api
      jul-to-slf4j
        slf4j-api
      log4j-over-slf4j
        slf4j-api
    spring-core
    snakeyaml
  spring-boot-starter-tomcat
    tomcat-embed-core
    tomcat-embed-el
    tomcat-embed-websocket
      tomcat-embed-core
  jackson-databind
  ...
```
如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。
### 依赖关系
Maven 定义了几种依赖关系，分别是 compile、test、runtime 和 provided：
| scope	        | 说明	                            | 示例 |
| - | - | - |
| compile	    | 编译时需要用到该 jar 包（默认）	        | commons-logging |
| test	        | 编译 Test 时需要用到该 jar 包	            | junit |
| runtime	    | 编译时不需要，但运行时需要用到      	    | mysql |
| provided	    | 编译时需要用到，但运行时由 JDK 或某个服务器提供	| servlet-api |
其中，默认的 compile 是最常用的，Maven 会把这种类型的依赖直接放入 classpath。
test 依赖表示仅在测试时使用，正常运行时并不需要。最常用的 test 依赖就是 JUnit：
```xml
    org.junit.jupiter
    junit-jupiter-api
    5.3.2
    test
```
runtime 依赖表示编译时不需要，但运行时需要。最典型的 runtime 依赖是 JDBC 驱动，例如 MySQL 驱动：
```xml
    mysql
    mysql-connector-java
    5.1.48