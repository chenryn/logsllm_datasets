# From Needs to Actions to Secure Apps? The Effect of Requirements and Developer Practices on App Security

**Authors:**
- Charles Weir, Lancaster University
- Ben Hermann, Paderborn University
- Sascha Fahl, Leibniz University Hannover

**Link:**
[https://www.usenix.org/conference/usenixsecurity20/presentation/weir](https://www.usenix.org/conference/usenixsecurity20/presentation/weir)

**Publication:**
This paper is included in the Proceedings of the 29th USENIX Security Symposium, August 12–14, 2020. ISBN: 978-1-939133-17-5. Open access to the Proceedings is sponsored by USENIX.

## Abstract
Mobile device users are increasingly facing security and privacy issues with the apps they use. While cost-effective security assurance techniques are well-established, their adoption by app developers remains uncertain. In a survey of 335 professional app developers, we found that fewer than a quarter have regular access to security experts, less than a third use assurance techniques regularly, and only a small fraction have made significant changes due to GDPR. Reassuringly, developers who perceive a greater need for security and have security expert involvement tend to use more assurance techniques and perform more frequent security updates. 

In a second phase, we analyzed the corresponding apps for SSL issues, cryptographic API misuse, and privacy leaks. Only one-fifth of the apps were defect-free according to our tools. Surprisingly, the involvement of security experts or champions was associated with more cryptographic API issues, likely due to increased cryptography usage. However, there was no correlation between the perceived need for security, the use of assurance techniques, and the defect count of the resulting apps.

These findings highlight two key research opportunities: improving the detection of security issues in app binaries and increasing the use of assurance techniques among app developers.

## 1. Introduction
Software security and privacy are becoming major societal concerns, with new attacks and privacy breaches reported almost daily. Software developers play a crucial role in creating secure applications. The industry has developed various inexpensive security assurance techniques, but their adoption varies. Barriers include lack of motivation, other work pressures, limited access to learning and support, and ignorance of the need for security. Some teams may have security experts, while others may lack practical knowledge of software security.

In this study, we investigate the extent to which the perceived need for security and privacy leads to security-enhancing activities and interactions within development teams. We focused on Android application developers, given the research team's experience and the accessibility of both developers and their apps. Our key findings from 330 completed surveys include:

- No more than 22% of Android app developers have regular access to security professionals.
- Less than 53% have used any basic assurance techniques; less than 30% use them regularly.
- Security updates for apps generally occur less than once a year.
- Less than 15% have made more than cosmetic changes due to GDPR.
- The use of assurance techniques and the frequency of security updates are positively correlated with the perceived need for security, the involvement of security experts, and the security expertise of the developers.

In the second phase, we analyzed the corresponding Android applications for objective security outcomes. Our findings indicate:

- There was no correlation between the perceived need for app security, the use of assurance techniques, and the defect count of the resulting apps.
- The involvement of security professionals and 'security champions' was correlated with higher cryptographic API defect counts, possibly due to increased cryptography usage.

The paper is structured as follows: Section 2 discusses related work, including assurance techniques; Section 3 details the survey methodology; Section 4 describes the app binary analysis; Section 5 presents the results; Section 6 explores the implications; and Section 7 summarizes the main conclusions.

## 2. Related Work
### 2.1. Security and Privacy in Mobile Apps
The introduction of app stores has led to the development of methods for detecting rogue applications and developers. Research into analyzing application binaries to detect hostile behavior has been extensive. For example, Enck et al. [18] used a decompiler to find privacy issues in popular applications, while Glanz et al. [22] inspected obfuscated apps to detect repackaged apps. Reyes et al. [39] explored children’s app binaries, finding many violations of US privacy law.

Recent studies have also investigated benign apps with security or privacy flaws. Li et al. [28] provide a literature survey on static program analysis for Android, highlighting tools like FlowDroid [4], IccTA [27], and MalloDroid [20]. Other works, such as Bai et al. [7] and Wei et al. [50], focus on information leak tracking across language boundaries. Zuo et al. [58] found that many cloud services used by Google Play apps are vulnerable.

### 2.2. Developer Security Behavior
Several studies have explored the underlying causes of software security problems. Oliveira et al. [32] found that developers often focus on 'normal cases' and prioritize functionality over security. Assal and Chiasson [5] surveyed North American developers, finding that while they are motivated to produce secure code, they often lack organizational and process support. Senarath and Arachchilage [42] highlighted the difficulty in understanding and implementing user privacy requirements.

Other researchers have investigated the adoption of security-focused code analysis tools. Xie et al. [57] found that even when creating secure code is relatively easy, developers still need motivation to make the necessary changes. Witschey et al. [56] found that peer influence is a significant factor in tool adoption.

### 2.3. Developer Assurance Techniques
Improving software quality through changes to development processes, such as the Secure Software Development Lifecycle (SSDLC), is a common approach. This involves adding security activities to the development process and empowering developers to make security decisions [53]. Aligning security goals with business needs is crucial [10, 51], but there has been little attention to developer interactions with other stakeholders on security.

There are over twenty identifiable assurance techniques in regular use, varying in cost-effectiveness. Bell et al. [9] provide guidance on agile application security, including tools and detailed assurance techniques.

### 2.4. Summary of Related Work
While there is substantial work on identifying practical assurance techniques and motivating developers, little research has investigated whether the need for security correlates with better practices and improved security. This paper aims to address this gap.

## 3. Survey Methodology
We conducted an online survey of Google Play Android developers in May 2019, receiving 345 complete responses. This section provides a detailed overview of our methodology to ensure transparency and reproducibility.

### 3.1. Survey Questionnaire Structure
The questionnaire, implemented in Qualtrics [37], was developed iteratively. Respondents were asked about their Android application development behavior, context, and demographic information. Key questions included:

- Team structure and role.
- Development environments.
- Recent releases and update types.
- Importance of security and privacy.
- Support from security professionals or internal champions.
- Events leading to recent security changes.
- Secure development practices used.
- Programming experience and app development history.
- Demographic information.

**Figure 1: Study Procedure**
- **Developer Questionnaire Pilots:**
  - Expert reviews: 1
  - Face-to-face pilots: 4
  - Google Play pilots: 30
- **App Analysis:**
  - Apps to download: 605
  - Download failed: 151
  - Download succeeded: 454
- **Full Survey:**
  - Invited: 55,000
  - Started: 605
  - Dropped out: 260
  - Completed: 342
  - Valid: 330
- **APK Analysis:**
  - Started: 454
  - Cognicrypt failed: 0
  - FlowDroid failed: 18
  - MalloDroid failed: 82
  - Full results: 358

This structured approach ensures a comprehensive and reliable dataset for analysis.