title:From Needs to Actions to Secure Apps? The Effect of Requirements and
Developer Practices on App Security
author:Charles Weir and
Ben Hermann and
Sascha Fahl
From Needs to Actions to Secure Apps? 
The Effect of Requirements and Developer 
Practices on App Security
Charles Weir, Lancaster University; Ben Hermann, Paderborn University; 
Sascha Fahl, Leibniz University Hannover
https://www.usenix.org/conference/usenixsecurity20/presentation/weir
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.From Needs to Actions to Secure Apps? 
 The Effect of Requirements and Developer Practices 
 on App Security 
Ben Hermann, Paderborn University     Sascha Fahl,  Leibniz University Hannover 
Charles Weir, Lancaster University 
 Abstract 
Increasingly mobile device users are being hurt by security or 
privacy issues with the apps they use. App developers can 
help prevent this; inexpensive security assurance techniques 
to  do  so  are  now  well  established,  but  do  developers  use 
them? And if they do so, is that reflected in more secure apps? 
From a survey of 335 successful app developers, we conclude 
that less than a quarter of such professionals have access to 
security  experts;  that  less  than  a  third  use  assurance  tech-
niques regularly; and that few have made more than cosmetic 
changes as a result of the European GDPR legislation. Reas-
suringly, we found that app developers tend to use more as-
surance techniques and make more frequent security updates 
when (1) they see more need for security, and (2) there is se-
curity expert or champion involvement. 
In a second phase we downloaded the apps corresponding to 
each  completed  survey  and  analyzed  them for  SSL  issues, 
cryptographic API misuse and privacy leaks, finding only one 
fifth defect-free as far as our tools could detect. We found 
that  having  security  experts  or  champions  involved  led  to 
more cryptographic API issues, probably because of greater 
cryptography usage; but that measured defect counts did not 
relate to the need for security, nor to the use of assurance 
techniques. 
This offers two major opportunities for research: to further 
improve the detection of security issues in app binaries; and 
to support increasing the use of assurance techniques in the 
app developer community. 
1. Introduction 
Increasingly software security and privacy are becoming ma-
jor problems for society. Almost every day we hear of new 
attacks and privacy problems, and increasingly they are af-
fecting not just large companies, but everyone [46]. While 
there are many ways to address these issues, clearly software 
developers have a vital role to play in creating services and 
applications that enforce security effectively1.  
1 Throughout this paper we refer to ’developers’ meaning all those involved 
with software development: programmers, testers, project managers, and prod-
uct owners. 
The software industry has developed a range of inexpensive 
security  assurance  techniques  for  software  developers 
[9,45,51] and some teams even use formal secure develop-
ment lifecycles to pull them together [55]. However, though 
many developers are using those assurance techniques, others 
are not. Factors such as lack of motivation, pressures to do 
other work, lack of access to learning and support, or sheer 
ignorance of the need, all act as barriers to adoption [5,32]. 
Some development teams may have access to security experts 
to help them; others may have little or no practical knowledge 
of software security. In some cases, this may not matter—if 
the code has no security or privacy implications—but in oth-
ers it may harm a range of stakeholders, from software users 
to organization senior management. 
In this work we investigate how big a problem this may be in 
practice. Our first research question was: 
RQ1: To what extent, and how, does a perceived need for 
security and privacy lead to security-enhancing activities and 
interactions in the development team? 
To begin to address this question2, we chose a specific set of 
software developers to investigate: Android application de-
velopers. Our reasons for choosing these were twofold: 
1.  The research team has considerable experience in An-
droid development security research [2,33] 
2.  The Android ecosystem provides access to both devel-
opers and the software developed, along with an indica-
tion of application usage. 
Accordingly, we carried out an online survey of professional 
Android developers, asking for details of their security prac-
tices and interactions. Our key findings from statistical anal-
ysis of the 330 completed and accepted surveys3 are as fol-
lows: 
•  No more than 22% of Android app developers have regu-
lar access to security professionals; 
2 RQ1 was modified to include ‘how’ and ‘perceived’ following feedback on 
the paper. 
3Assuming the sample is representative of Android app developers. See Sec-
tion 5.1. 
USENIX Association
29th USENIX Security Symposium    289
•  Less than 53% of them have used any of the basic assur-
ance techniques; less than 30% use any regularly; and se-
curity updates for apps generally happen less than once a 
year. 
•  Less than 15% of them have made more than cosmetic 
changes as a result of the new GDPR legislation. 
•  Android app developers’ use of assurance techniques is 
positively correlated with the perceived need for security, 
the involvement of security experts or champions, and the 
security expertise of the developers;  
•  The reported frequency of app security updates is posi-
tively correlated with the perceived need for security, the 
security expertise of the developers, and the developers’ 
use of assurance techniques. 
In a second phase, we investigated how these aspects of the 
development process were reflected in objective app security 
outcomes. Our research question for this phase was: 
RQ2: To what extent do the need for security, the involve-
ment of specialist roles, and the use of assurance techniques 
in a development team lead to fewer security defects? 
We analyzed the corresponding Android applications created 
by each developer and matched the findings to the question-
naire results, concluding that: 
•  There  was  no  correlation  found  between  the  perceived 
need for app security, nor the use of assurance techniques, 
and the defect count of the resulting app; and 
•  Surprisingly,  the  involvement  of  security  professionals 
and ‘security champions’ is correlated with higher cryp-
tographic API defect counts. 
This paper is structured as follows. Section 2 explores related 
work, including a discussion of assurance techniques; Section 
3  describes  the  survey  design,  participant  recruitment  ap-
proach, analysis plan, survey trials and limitations; Section 4 
describes the same for the app binary analysis; Section 5 ex-
plores both the survey and app analysis results; Section 6 ex-
plores the implications of these results; and Section 7 sum-
marizes the main learning points and conclusions. 
2. Related Work 
In this section, we discuss related work in three key areas: 
ways of finding security and privacy flaws in otherwise be-
nign mobile apps; research work into developers’ secure de-
velopment behavior; and findings on the important developer 
assurance techniques. 
2.1. Security and Privacy in Mobile Apps 
The introduction of App Stores, that act as an intermediary 
between  developers  and  consumers,  has  required  each  app 
store provider to find ways to detect rogue applications and 
rogue application developers. This has led to research into 
ways of analyzing application binaries to detect hostile be-
havior. Enck et al. [18], for example, used a decompiler to 
analyze a range of popular applications, finding many privacy 
issues though no security misbehavior. Glanz et al. [22] in-
spected obfuscated apps to detect repackaged apps—benign 
apps that have been modified and re-uploaded to app stores. 
Reyes  et  al.  [39]  explored  children’s  app  binaries,  finding 
many violations of US privacy law.  
However, only more recently has there been much investiga-
tion into the problems of benign apps that may have security 
or privacy flaws. This may be due partly the difficulty of tak-
ing action: Google Play does not have the remit of enforcing 
better security [29] and the app developers may not wish to 
do so. But with the increase of interest in security issues [46], 
researchers are now taking a variety of approaches to inves-
tigate. 
Li et al. [28] provide a literature survey over the vast amount 
of research in the field of static program analysis for Android 
including an overview of used tooling and methodology. The 
most prominent works in the area are FlowDroid by Arzt et 
al. [4], which is able to find privacy leaks by inspecting illicit 
information  flow;  IccTA  by  Li  et  al. [27],  which  extends 
FlowDroid to account for inter-component privacy leaks; and 
MalloDroid by Fahl et al. [20], which detects improper use of 
transport layer security in apps. 
As Android apps become increasingly polyglot with the use 
of hybrid app frameworks and native libraries, in recent work, 
analyses over these language boundaries have been increas-
ingly in focus. Bai et al. [7] inspected apps which use the Ja-
vaScript bridge communication scheme to construct leaks un-
detectable  by  previous  approaches.  Wei  et  al. [50]  provide 
support for information leak tracking through the Java and 
the native part of an app helping to find information leakage 
with could not be detected with Java-only-based approaches. 
Another important area of investigation is the security of the 
interaction of apps with cloud environments. Zuo et al. [58], 
for example, found by inspecting apps from Google Play that 
many of the used cloud services are vulnerable and may leak 
user data—an observation previously made by Rasthofer et 
al. [38]. 
2.2. Developer Security Behavior 
A few teams have investigated the underlying causes behind 
software security problems. Oliveira et al. [32] used psycho-
logical manipulation to explore what caused developer vol-
unteers  to  include  vulnerabilities  in  software,  finding  two 
main causes: developers’ focus on ‘normal cases’ and a lack 
of priority for security. Assal and Chiasson [5] surveyed 123 
North American developers, finding their respondents moti-
vated  to  produce  secure  code—once  the  implications  and 
possible damage to stakeholders are understood—but often 
prevented  by  lack  of  organizational  and  process  support. 
290    29th USENIX Security Symposium
USENIX Association
Senarath and Arachchilage [42] used a task given to program-
mers to explore issues related to user privacy; their findings 
were that it was difficult to understand such requirements and 
to translate them into engineering techniques. 
Others have investigated the use and adoption of security–
focused code analysis tools. Xie et al. [57] explored the im-
pact of one such tool, finding that even when creating secure 
code  is  relatively  easy  developers  still  need  motivation  to 
make the needed changes. Witschey et al. [56] surveyed de-
velopers about their adoption of such tools, finding that the 
most important factor was seeing peers using them. 
Several researchers have investigated the process of updating 
software when security faults are detected. Derr et al. [15] in-
vestigated how Android app developers keep library versions 
up to date, surveying app developers and analyzing of app 
binaries. They found that it was often possible to solve vul-
nerabilities by library updating without changes in code, but 
that frequent backward incompatible changes and incorrect 
Semantic Versioning in libraries currently make such updates 
difficult. Others investigated to what extent the fixes were 
necessary:  Nayak  et  al. [30]  found  that  less  than  15%  of 
known vulnerabilities were actually used in attacks, suggest-
ing an opportunity for a more nuanced approach than just fix-
ing everything. Vaniea and Rashidi [49] used a survey of 307 
users to analyze the effectiveness of the update procedure. 
They derived advice for developers, including making it easy 
to find documentation, and planning a ‘recovery path’. 
Other  researchers  have  investigated  security  requirements, 
especially related to privacy. Türpe [47] found a range of re-
search  related  to  security  requirements,  especially  Threat 
Modeling  techniques,  but  no  agreement  on  terminology  or 
approach. 
2.3. Developer Assurance Techniques 
An  important  approach  to  improving  software  quality  has 
been changes to development processes. This may be through 
a Secure Software Development Lifecycle, a prescriptive set 
of instructions to managers, developers and stakeholders on 
how  to  add  security  activities  to  the  development  pro-
cess [55];  or  by  empowering  the  developers  to  make  their 
own decisions about how to achieve security [53]. 
Particularly important is the need to align security goals with 
business needs [10,51]. Though much work has been done to 
support evaluating security problems in terms of risk and im-
pact [47], identifying the need for security experts to be busi-
ness negotiators and evangelists [23], there has been little at-
tention to developer interactions with other stakeholders on 
security. 
The specific techniques and approaches used by developers 
depend,  of  course,  on  their  environment  and  constraints. 
There are more than twenty identifiable assurance techniques 
Developer Questionnaire
Pilots
App Analysis
APK Downloads
Expert reviews=1
Face-to-face pilots=4
Google Play pilots=30
Apps to download=605
Download failed=151
Download succeeded=454
Full Survey
Invited=55000
Started=605
Dropped out=260
Completed=342
Valid=330
APK Analysis
Started=454
Cognicrypt failed=0
FlowDroid failed=18
MalloDroid failed=82
Full results=358
Figure 1: Study Procedure 
in regular use today, differing significantly in cost effective-
ness, though there are combinations that are typically used 
together [45]. In particular one can identify a set of about five 
‘entry level’ assurance techniques that are widely used and 
can be introduced at relatively low cost [51]. In terms of prac-
tical support for developers, a recent book ‘Agile Application 
Security’ by Bell et al. [9] provides guidance, a discussion of 
tools and detail on a range of assurance techniques. 
2.4. Related Work Summary 
Though there has been considerable work done on identifying 
practical  assurance  techniques  and  tools  for  security,  and 
some work on motivating developers to use them and inves-
tigating reasons for vulnerabilities, there has been little or no 
work investigating whether the need for security does in prac-
tice correlate with better practices, and result in better secu-
rity. 
In this paper we make a start at that investigation. 
3. Survey Methodology 
We conducted an online survey of Google Play Android de-
velopers  in  May  2019,  receiving  345  complete  responses. 
This section provides a detailed overview of our methodol-
ogy, with the goal of making our research plan both transpar-
ent and reproducible, to allow readers and future researchers 
to  better  assess  our  contribution.  Figure  1  summarizes  the 
study procedure. 
3.1. Survey Questionnaire Structure 
We asked our respondents to answer questions about their 
Android application development behavior and context rele-
vant for application security and privacy, and a set of demo-
graphic questions. Although this might have led to self-re-
porting and social desirability bias, we considered this ap-
proach the best practical approach to address the research. 
We implemented the questionnaire in Qualtrics [37], and de-
veloped it using an iterative process.  
USENIX Association
29th USENIX Security Symposium    291
Appendix B contains the full list of questions. In summary, 
we asked respondents: 
•  Whether they worked in a team, and if so their role and 
the team size; 
•  The Android development environments they used; 
•  The number of recent releases for their most frequently 
updated app, and the proportions of updates addressing 
each of new features, library updates, security and privacy 
issues; 
•  Their evaluations of the importance of security and of pri-
vacy, both implicitly and for sales; 
•  Whether they receive support from security professionals 
or internal security champions, and if so, the nature of that 
support; 
•  What events had led to recent changes in security;  
•  Which  secure  development  practices  they  used,  and  to 
what extent; 
•  How  long  they  had  been  programming,  both  generally 
and with Android;  
•  How many apps they had developed, and whether it was 
their primary job; and 
•  Demographic  information  about  gender,  language,  and 