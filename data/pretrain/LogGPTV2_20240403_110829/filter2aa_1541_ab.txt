### Installed on a Target for Record Keeping and Multiple Operator Attacks

The KiSu module is installed on target machines for record-keeping and to handle multiple operators attacking a single network. Through the generation of several target machines, we observed that the KiSu module's root location varies between hosts, with the "OemMgmt" section differing. Below is an example of a variant module root displayed using DoubleFeature.

**F-Secure | Killsuit Research**

### Determining the Variable for Masquerading Registry Values

We experimented with various factors, including OS version, IP address, MAC address, time of OS initialization, and system identification values, but were unable to determine the variable used to select the masquerading registry value where the modules are stored. Even when two separate OS instances were created with seemingly identical criteria, the location varied, suggesting it is not a standard configurable value.

However, after numerous attempts, we noticed repetition in the generated path, leading us to speculate that the location is formed by concatenating two separate words (e.g., "Oem & Mgmt" or "Driv & Mgmt"). Analysis of the deployed PC operation confirmed this, as two string values are concatenated and appended to the default registry directory during installation. We then focused on tracking down when the hive location was selected and from where the two names were chosen, believing that two lists must exist within the framework.

**Figure 16: Observation of Concatenation Function for Killsuit Module Root Location Variable String Components**

### Hunting for the List and Into the Rabbit Hole

To determine if the registry location was decided by the DdSz operator, configured as part of the PC agent payload, or generated by the PC agent once installed, we reused the same PC payload on multiple hosts. This quickly ruled out the value being hardcoded into the payload, as the registry addresses varied.

Next, we examined the Alias and Commands of the framework for all functions related to installation. We found scripts directly called to facilitate KiSu operations, such as "Mcl_Cmd_DiBa_Tasking.py" for module installation/maintenance and "Mcl_Cmd_KisuComms_Tasking.pyo" for dynamically loading and unloading modules/drivers and initiating connections. These scripts translate command line input through the Alias and Command filters to appropriate Dsz script files, which interact with a _dsz object type managing PC agents in the field.

**Figure 17: Mcl_Cmd_KisuComms_Tasking.pyo Extracted Function Utilising Library Functions with _dsz Component**
**Figure 18: Radare2 Output for Search and Cross-Reference of Data Location Relative to _dsz Function Output**

### Tracing the Installation Process

By following the script commands back through their associated libraries, we found that the command was issued to the agent through the Dsz resource folder "mcl_platform/tasking" library. The use of a "_dsz" import was pivotal, but no corresponding library file was found. Analyzing the "ddsz_core.exe" binary, we found calls to the function "dsz_task_perform_rpc," which led to data locations for related objects.

The relevant data was loaded as an external C module at runtime, making static analysis impossible. Dynamic analysis was challenging due to the binary's awareness of debugger hooks. By hiding the debugger, we monitored the binary but encountered dummy functions and encrypted PC payloads. PcPrep.exe provided additional information but did not include the root location.

**Figure 19: PcPrep.exe Output for Configured PeddleCheap Payload and Associated Configuration File**

### Refocus and Results

Re-examining the installation process, we identified a consistent registry query for a default cryptography provider type, "HKLM\Software\Microsoft\Cryptography\Defaults\Provider Types\Type 023," which does not exist in typical systems. This query was present in every experimental installation of a KiSu instance.

Cryptography provider types typically define cryptographic functions, and it is extremely unlikely for a custom provider type to be stored in the Microsoft defaults. Research into a legitimate instance of "Type 023" yielded no results.

**Figure 20: Observation of Uniform Killsuit Installation Activity, Registry Query for "Type 023" Cryptography Default Provider Type**

### How to Detect and Remediate a Killsuit Compromise

#### Detection Methods

1. **Unusual Kernel Call and Registry Operations**: Unusual use of the "systemfunction007" kernel call followed by registry write operations from an executable not meant to perform such actions.
2. **Driver Installation**: Installation of any specified drivers related to KiSu, such as "mpdkg32."
3. **Registry Monitoring**: Monitoring for registry keys under HKLM matching permutations of the provided lists, especially the "Type 023" registry query.

**Figure 21: Detection Methods for KillSuit Stages**

#### Removal Methods

Removal of the encrypted DB location for the module root terminates all KiSu capabilities, including persistence mechanisms. However, this only affects KiSu instances and not other persistent methods used by DdSz or other frameworks.

### Conclusion

Our research into Killsuit's indicators of compromise at installation provided several detection methods, including the abnormal cryptographic provider type and semi-conclusive legacy installation detection using registry locations. The complexity of the tool prevented easy retrieval of hard-coded registry installation values, but the analysis should provide a solid starting point for further investigation.

This report focuses on the 2013 version of the tooling, useful for detecting legacy Equation Group breaches or more recent breaches by groups reusing legacy tooling. Continuous research, hunting, and response are essential for defensive teams to stay ahead of attackers.

**F-Secure | Killsuit Research**

### Appendix

#### Killsuit Instance ID List
- PC (PeddleCheap)
- UR (UnitedRake)
- STLA (StrangeLand)
- SNUN (SnuffleUnicorn)
- WRWA (WraithWrath)
- SLSH (SleepySheriff)
- WORA (WoozyRamble)
- TTSU (TiltTsunami)
- SOKN (SoberKnave)
- MAGR (MagicGrain)
- DODA (DoubleDare)
- SAAN (SavageAngel)
- MOAN (MorbidAngel)
- DEWH (DementiaWheel)
- CHMU (ChinMusic)
- MAMO (MagicMonkey)
- MABE (MagicBean)

#### Full Danderspritz Driver List
- "1394ohci", "*** SENTRYTRIBE MENTAL ***"
- "ac98intc", "*** DARKSKYLINE MENTAL ***"
- "adpkprp", "*** KILLSUIT LOADER DRIVER - REMOVE ME ***"

**F-Secure | Killsuit Research**