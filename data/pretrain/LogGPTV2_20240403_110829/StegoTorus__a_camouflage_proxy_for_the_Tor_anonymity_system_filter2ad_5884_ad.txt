### Figure 3: Payload Lengths for the First 20 Non-Empty Packets

**Description:**
Figure 3 illustrates the payload lengths for the first 20 non-empty packets of 63,585 unidirectional flows on TCP port 443, using data from the CAIDA 2011-Chicago dataset. Port 443 is officially assigned to HTTP over TLS, but Tor relays can be configured to accept connections on this port. By scanning for 586-byte TCP payloads, 67 of the flows were identified as probable Tor traffic.

**Legend:**
- **Port 443 (HTTP over TLS):** Officially assigned to HTTP over TLS.
- **Tor Traffic:** Identified by 586-byte TCP payloads.

---

### Figure 4: Empirical CDFs of Connection Length, Total Data Transferred, and Per-Packet Payload

**Description:**
Figure 4 presents empirical cumulative distribution functions (CDFs) for connection length, total data transferred, and per-packet payload for 20 visits to each of the Alexa top ten websites, using Tor directly (dashed line), obfsproxy (dot-dash line), and StegoTorus-HTTP (dotted line). For reference, CAIDA Chicago-2011 port 80 traffic (solid line) is also shown.

**Legend:**
- **Connection Length (seconds):** Duration of the TCP connection.
- **Total Data Transferred (decimal kB):** Amount of data transferred in kilobytes.
- **Per-Packet Payload (bytes):** Size of the payload in each packet.

---

## 5.1 Detecting Tor

**Overview:**
The Tor protocol primarily sends messages in the form of "cells" with a fixed length of 512 bytes. These cells are encapsulated in TLS 1.0 application-data records, which have an overhead of 74 bytes per record due to a cryptographic weakness in TLS 1.0. This results in many TCP packets containing exactly one cell, with a characteristic payload length of 586 bytes. A filtering router can identify Tor streams by counting the frequency of these 586-byte packets.

**Algorithm:**
1. Initialize the probability estimate \( \tau \) to zero.
2. Ignore packets containing only an ACK and no payload.
3. Update \( \tau \) using the formula: 
   \[
   \tau \leftarrow \alpha \tau + (1 - \alpha) \mathbb{1}_{l=586}
   \]
   where \( \alpha \in (0, 1) \) is a tuning parameter and \( \mathbb{1}_{l=586} \) is 1 if the TCP payload length \( l \) equals 586 bytes, and 0 otherwise.
4. If \( \tau \) exceeds a threshold \( T \), classify the TCP flow as Tor traffic.

**Empirical Results:**
- Using \( \alpha = 0.1 \) and \( T = 0.4 \), Tor traffic can be identified within a few dozen packets.
- Figure 3 shows probable Tor flows picked out of all the port-443 traffic in the CAIDA 2011-Chicago dataset.
- Figure 4 confirms the effectiveness of this method, showing that Tor generates 586-byte packets and other detectable characteristics such as consistent connection durations.

**Comparison:**
- **Obfsproxy:** Does little to alter these features.
- **StegoTorus:** Generates CDFs closer to the CAIDA port 80 reference, eliminating the 586-byte characteristic payload size, but still may be detected by a determined adversary.

---

## 5.2 Identifying Visits to Facebook

**Overview:**
Once the censor identifies TCP streams as Tor traffic, they may want to determine which sites are being accessed. We present a method to detect visits to Facebook, a site often blocked by government censors.

**Method:**
1. Maintain two sequences, \( u_i \) and \( d_i \), representing the cumulative sum of payload lengths for the last \( n \) non-empty packets sent "upward" (client to relay) and "downward" (relay to client).
2. Use a pre-trained model of the probability distributions \( \Pr[U_i] \) and \( \Pr[D_i] \) for typical Facebook traffic.
3. Compute the log-probability:
   \[
   \log \Pr[\{u_i\}, \{d_i\} \text{ is Facebook}] = \sum_{i=1}^{n} \log \Pr[U_i = u_i] + \sum_{i=1}^{n} \log \Pr[D_i = d_i]
   \]
4. Classify the traffic as a visit to Facebook if the overall log-probability exceeds a threshold.

**Training and Testing:**
- Trained on the first 250 packets transmitted in each direction over ten visits to the Facebook home page.
- Tested on 20 more visits to Facebook and 40 visits to other popular sites.
- Achieved high accuracy, with only one Facebook visit not detected and no false positives.

**Augmented Attack:**
- Extended to detect visits to nine of the top ten Alexa sites.
- Used binary classifiers for each site, adjusting the training window size to avoid learning the front-page data volume.
- Evaluated using AUC scores, with higher scores indicating better classification accuracy.

**Results:**
- Over Tor, AUC scores often exceed 0.95.
- Over StegoTorus, scores drop to 0.75 or less, making real-time classification challenging.

**Conclusion:**
StegoTorus reduces the detectability of Tor traffic, but a determined adversary may still be able to identify statistical differences. Improving HTTP emulation and implementing more sophisticated statistical models can further reduce these differences.