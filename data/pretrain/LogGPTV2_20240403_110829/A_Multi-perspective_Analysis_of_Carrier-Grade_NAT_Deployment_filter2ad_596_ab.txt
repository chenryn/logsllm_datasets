We refer to this node as an internal peer. When our crawler identifies a node leaking internal peers, we issue ten additional `find_nodes` queries in the hope of discovering more internal peers. We continue to send these `find_nodes` queries in batches of ten as long as we continue to find new internal peers.

In the BitTorrent protocol, the `nodeid` serves as the unique identifier for a peer. However, since a peer can have multiple endpoints (internal and external) and multiple IP addresses/ports due to dynamic IP address assignment or changes made by BitTorrent clients, we uniquely identify a peer using the full tuple `(IPaddress:port, nodeid)`. This method also helps mitigate potential biases from DHT poisoning, where peers may announce themselves with a foreign `nodeid`.

The dataset used in this paper is derived from a one-week crawl starting on March 3, 2016. Table 2 summarizes the dataset. We probed over 21 million peers across nearly 19,000 Autonomous Systems (ASes). These DHT nodes revealed contact information for approximately 192 million peers across more than 26,000 ASes. Of these, 107.7 million peers and 36.7 million unique IP addresses responded to `bt_ping` probes. Table 3 provides an overview of the leaked contact information, breaking down private peers based on their internal address space range. Our crawl identified more than 700,000 peers leaking contact information for over 3.7 million internal peers (i.e., peers with IP addresses in reserved ranges) across more than 5,000 ASes.

### Identifying CGNs

Our dataset clearly shows the presence of NATs via leaked internal peers. To determine the extent to which these NATs are network-level Carrier-Grade NATs (CGNs) rather than simple home NATs, we need to observe multiple BitTorrent clients communicating directly within an internal network. For a large network-level CGN, we require NAT pooling behavior, meaning that within a single AS, there must be (i) multiple peers with different external IP addresses leaking internal peers and (ii) intersections in the internal peers leaked across multiple external IP addresses. Additionally, the internal peers within a cluster should reside within the same internal address range (e.g., 10/8).

To detect this behavior, we construct a graph for each AS, where each peer is a vertex, and an edge between a public peer A and an internal peer B indicates that A leaks contact information for B. We only consider internal peers leaked exclusively by peers within a single AS to exclude relationships caused by VPN tunnels. Figure 3 illustrates a small subset of these graphs for two ASes. Figure 3(a) shows isolated leaking within AS 7922 (Comcast), with more than 1,000 peers leaking internal addresses, but each internal peer is leaked by exactly one external peer. In contrast, Figure 3(b) shows strong clusters within AS 12874 (FastWEB), with multiple peers behind different external IP addresses leaking a large number of internal peers, forming significant intersections. This demonstrates that our clustering methodology effectively distinguishes home NAT deployments from network-level CGNs.

We then construct a graph for each AS in our dataset and determine the largest connected cluster for each AS. Figure 4 shows our clustering results, plotting a point for each AS based on the size of the largest cluster found. The x-axis represents the number of unique public IP addresses, and the y-axis represents the number of unique internal IP addresses in the largest cluster. We find a small number of ASes with large clusters in the 192X space, suggesting that 192X address space is primarily used in small home NAT environments. We classify an AS as having a CGN if the largest connected cluster contains at least five public IP addresses and five private IP addresses, to avoid misclassifications from dynamic addressing. Our methodology shows CGN usage in roughly 10% of the probed ASes where our crawler queried at least 200 peers.

### DHT Data Calibration

Our BitTorrent-based CGN detection relies on three key properties of DHT peers: (i) BitTorrent peers behind the same NAT can learn internal endpoints of other peers, (ii) peers export internal endpoints via the DHT, and (iii) peers only propagate contact information for peers validated via direct interaction. We verified (i) and (ii) by running unmodified BitTorrent clients (uTorrent on Windows and Transmission on Linux) and measuring the control traffic they exchange. We confirmed that these peers learned their internal endpoints when located behind NATs allowing multicast communication or with Hairpinning enabled. Further, these peers forward packets with internal source IP addresses. We also validated this within an ISP deploying CGN, concluding that BitTorrent clients can learn and propagate their internal endpoints via the DHT under suitable conditions.

Finally, we assume hosts follow the BitTorrent DHT specification and only propagate reachability information for peers after direct validation. To validate this, we set up a common BitTorrent client (uTorrent on Windows) with a specific `nodeid` and let it interact with the DHT. Simultaneously, on a different host, we crawled the DHT requesting the `nodeid`. Out of 1,387 peers providing contact information, only 18 (1.3%) did not validate reachability before propagating the information, confirming our assumption.

### Detecting CGNs via Netalyzr

To complement our BitTorrent DHT observations, we use ICSIâ€™s Netalyzr network troubleshooting service. While the BitTorrent DHT provides specific information from end hosts, Netalyzr allows us to define explicit tests and gather richer data. Users run Netalyzr via a Java applet, a command-line client, or an Android client. In the context of understanding CGNs, Netalyzr offers two advantages: (i) the Android version extends our view into mobile networks, and (ii) it directly obtains IP addresses used by the host, including the local device IP (`IPdev`), the CPE router's external IP (`IPcpe`), and the public IP as seen by the Netalyzr server (`IPpub`).

#### Cellular Networks

Detecting CGNs in cellular networks is straightforward because there are no intermediate devices between the mobile device and the ISP. The classification of the ISP-assigned `IPdev` directly indicates the presence of a CGN. We require at least five observations from an AS to ensure sound conclusions. Table 4 shows the breakdown of `IPdev` for all cellular Netalyzr sessions, with 94% showing a translated address. On a per-AS basis, 63.8% of ASes assign internal IP addresses to mobile devices, 6.0% assign public IP addresses, and 30.3% assign a mixture of internal and public IP addresses. An additional 5.0% of ASes assign internal addresses from public blocks that are routed but still perform address translation.

#### Non-Cellular Networks

For non-cellular networks, `IPdev` is often assigned by a device in the local network, making detection challenging due to multiple address translations (NAT444). We analyze ASes with at least ten Netalyzr sessions. Table 4 shows that `IPdev` is categorized into four types: (i) private address from reserved blocks, (ii) unrouted public addresses, (iii) routable and matching `IPpub`, and (iv) routable but mismatching `IPpub`.

### Coverage and Detection Rates

Table 5 summarizes the coverage and detection rates of our methods for all routed ASes and Eyeball ASes, primarily connecting end users, as derived from PBL and APNIC. Figures 4 and 5 provide visual representations of the clustering results and the number of sessions with `IPcpe` not matching `IPpub` for different address ranges.

This comprehensive approach, combining BitTorrent DHT crawling and Netalyzr testing, provides a robust method for detecting and analyzing CGNs in various network environments.