we refer to this node as an internal peer. When our crawler
ﬁnds a node leaking internal peers we issue an additional ten
ﬁnd_nodes queries in the hopes of ﬁnding additional internal
peers. We continue issuing ﬁnd_nodes queries in batches of
ten for as long as we continue to harvest internal peers.
Note that within BitTorrent the nodeid is the sole identity
notion for a given peer. However, as peers can have multi-
ple endpoints (internal, external), as well as multiple IP ad-
dresses/ports due to dynamic IP address assignment or due
to BitTorrent clients modifying the local port number, we
identify a unique peer by the full tuple of (IPaddress:port,
nodeid). As a positive side effect, this also eliminates possi-
ble biases due to DHT poisoning [44], where peers announce
themselves with a foreign nodeid.
The dataset we use in the remainder of this paper comes
from a one-week crawl starting on March 3, 2016.4 Table 2
summarizes the dataset. We probed more than 21M peers
across nearly 19K ASes. These probed DHT nodes in turn
revealed contact information for 192M peers across more
than 26K ASes. Of these 192M peers, 107.7M peers and
36.7M unique IP addresses responded to bt_ping probes. Ta-
ble 3 shows an overview of the leaked contact information,
where we break private peers down based to the internal ad-
dress space range. Among the peers crawled, we ﬁnd more
than 700K peers leaking contact information for more than
3.7M internal peers (i.e., peers with IP addresses in a re-
served range) across more than 5K ASes.
Identifying CGNs: Our dataset clearly shows the presence
4We have additional crawls from late 2015 and early 2016
that show consistent results to those we present in this paper.
0
0
0
5
0
0
5
0
5
5
1
]
s
P
i
I
e
u
q
n
u
[
s
r
e
e
p
l
a
n
r
e
t
n
i
]
s
P
i
I
e
u
q
n
u
[
s
r
e
e
p
l
a
n
r
e
t
n
i
0
0
0
0
1
0
0
1
0
1
1
(a) Isolated leaking relation-
ships (AS7922, Comcast,
192X internal space).
(b) Clustered leaking rela-
tionships (AS12874, Fast-
WEB, 100X internal space).
Figure 3: Peer leakage in non-CGN vs. CGN ASes.
Large blue vertices are BitTorrent peers leaking peers
with internal IP addresses (small red vertices).
192X
172X
]
s
P
i
I
e
u
q
n
u
[
s
r
e
e
p
l
a
n
r
e
t
n
i
0
0
0
0
1
0
0
1
0
1
1
]
s
P
i
I
e
u
q
n
u
[
s
r
e
e
p
l
a
n
r
e
t
n
i
0
0
0
0
1
0
0
1
0
1
1
AS
5
20
1
500
leaking peers [unique IPs]
100
10X
AS
10
100 1000
1
leaking peers [unique IPs]
AS
5
50
1
leaking peers [unique IPs]
500
100X
AS
10
100
1
10000
leaking peers [unique IPs]
of NATs via leaked internal peers. Next we seek to establish
the degree to which these NATs are network-level CGNs as
opposed to simple home NAT deployments. First, to detect
any type of NAT using the BitTorrent dataset there must be
multiple BitTorrent clients that directly communicate within
some internal network. Next, to determine the presence of
a large network-level CGN we require NAT pooling behav-
ior (§ 3). In other words, within a single AS we require (i)
multiple peers with different external IP addresses to leak in-
ternal peers and (ii) intersections in the internal peers leaked
across multiple external IP addresses. Moreover, we require
the internal peers within a cluster to reside within the same
internal address range (e.g., 10/8).
To detect this behavior on a per-AS level we next form
a graph for each AS where each peer is a vertex and each
edge between a public peer A and an internal peer B indi-
cates that A leaks contact information for B. Note, when
constructing graphs we only consider internal peers which
were leaked exclusively by peers residing in a single AS.
This excludes leaking relationships caused by VPN tunnels.
Figure 3 shows a small subset of the graphs for two ASes
as an illustration. Figure 3(a) shows there is only isolated
leaking within AS 7922 (Comcast). We ﬁnd more than 1K
peers leaking internal addresses within AS 7922. However,
we also ﬁnd that each leaked internal peer is leaked by ex-
actly one external peer. In contrast, Figure 3(b) shows strong
clusters within AS 12874 (FastWEB) consisting of multi-
ple peers behind different external IP addresses that leak a
large number of internal peers, which form large intersec-
tions.5 This shows that our clustering methodology is ef-
fective in separating home NAT deployments from network-
level CGNs.
We next construct a graph for each AS in our dataset and
determine the largest connected cluster for each AS. Figure 4
5We manually conﬁrmed CGN presence in AS 12874 and
also veriﬁed the discovery of internal peers (via NAT Hair-
pinning, § 3) and leakage of internal peers in this AS by
running a regular BitTorrent client on a host behind CGN in
this AS.
Figure 4: Size of the largest connected cluster of leaking
and internal BitTorrent peers per AS. The x-axis shows
the number of public IP addresses, the y-axis the number
of internal IP addresses contained in the largest cluster.
shows our clustering results. Here, we plot a point for each
AS and position it according to the size of the largest cluster
we found in this AS (if any). In particular, the x-axis shows
the number of unique public IP addresses contained in the
largest cluster and the y-axis shows the number of unique
internal IP addresses contained in the largest cluster. We
only ﬁnd a small number of ASes that contain large clus-
ters in the 192X space (top left ﬁgure). We ﬁnd ASes with
large clusters to be more prevalent in the other, larger, inter-
nal address ranges. This supports our hypothesis that 192X
address space is primarily used in small home NAT environ-
ments. While in principle a cluster with at least two differ-
ent external IP addresses is indicative of NAT pooling, we
only determine CGN presence for an AS when the largest
connected cluster contains at least ﬁve public IP addresses
and ﬁve private IP addresses. This is to address possible
misclassiﬁcations arising from dynamic addressing, e.g., a
home network with internal NAT deployment that changes
its public IP address. We annotated Figure 4 with our detec-
tion boundary. While we show network-wide results in § 5,
we note that this methodology shows CGN usage in roughly
10% of the probed ASes for which our crawler queries at
least 200 peers.
DHT Data Calibration: Our BitTorrent-based CGN detec-
tion relies on three key properties of the DHT peers: (i) Bit-
Torrent peers behind the same NAT can learn internal end-
points of other peers, (ii) peers export internal endpoints via
the DHT, and (iii) peers only propagate contact information
for peers that have been validated via direct interaction. We
veriﬁed (i) and (ii) by running two popular and unmodiﬁed
BitTorrent clients (uTorrent on Windows and Transmission
Address Space
192X
172X
10X
100X
unrouted
routed match
routed mismatch
Cellular
IPdev
Non-cellular
IPdev
IPcpe
N=8.6K N=567.5K N=229.8K
8.9%
0.8%
4.8%
1.9%
0.0%
83.0%
0.5%
0.2%
2.5%
58.7%
17.3%
12.5%
5.7%
3.0%
92.4%
1.1%
6.2%
0.0%
0.0%
0.0%
0.3%
Table 4: Address ranges seen for the device IP address
and for the router’s external IP address.
on Linux) and measuring the control trafﬁc they exchange
as part of their regular operation. We conﬁrmed that these
peers learned their internal endpoints when located behind
NATs that allow multicast communication as well as behind
NATs that have Hairpinning enabled. Further, these peers
forward packets with internal source IP addresses (see § 3).
We also validated the latter within an ISP that deploys CGN.
Therefore, we conclude that BitTorrent clients can—if the
circumstances allow it—learn their internal endpoints and
propagate that information via the DHT when requested.
Finally, we assume hosts follow the BitTorrent DHT spec-
iﬁcation [8] and only propagate reachability information for
peers they learn after reachability has been directly validated
by the host itself. Otherwise, hosts would propagate poten-
tially dubious reachability information and likely we would
detect CGN presence in practically any AS that hosts enough
peers. To validate our assumption, we setup a common Bit-
Torrent client (uTorrent on Windows) with a nodeid of IDus
and let it interact with the DHT. At the same time on a differ-
ent host we crawled the DHT requesting IDus. We queried
100K peers and were given contact information for IDus
by 1, 387 peers. We found that only 18 of these DHT peers
(1.3%) did not validate the reachability of IDus before prop-
agating the information. This shows that our assumption
that DHT peers follow the speciﬁcation and properly vali-
date reachability before propagating contact information is
sound.
4.2 Detecting CGNs via Netalyzr
To complement our observations from crawling the Bit-
Torrent DHT, we leverage ICSI’s Netalyzr network trou-
bleshooting service [24]. While the BitTorrent DHT pro-
vides a useful set of speciﬁc information from end hosts,
Netalyzr allows us to deﬁne explicit tests we wish to run
from end hosts. These tests interact with a suite of custom-
built test and measurement servers and return the results to
our data collection server. We developed a set of tests aimed
at illuminating NAT behavior and deployed these in 2014.
While Netalyzr provides the potential to gather much richer
information than we ﬁnd in the BitTorrent DHT, we are at
the mercy of individual users to access Netalyzr and run the
tests. Users run Netalyzr via one of three supported clients:
a Java applet for Web browsers, a command-line client, or
an Android client available in the Google Play store [1].
In the context of understanding CGNs, Netalyzr offers
two advantages over our BitTorrent crawl. First, since Bit-
Torrent is not heavily used on mobile devices the Android
version of Netalyzr extends our view into this important net-
work type.6 Second, Netalyzr allows us to directly obtain
the IP addresses used by the host, including (i) the local IP
address of the device that executes Netalyzr, IPdev, (ii) the
external IP address of the CPE router device as learned via
UPnP (where available), IPcpe, and (iii) the public IP ad-
dress as seen by our Netalyzr server, IPpub. We categorize
IPdev and IPcpe in four categories: (i) private address from
one of the reserved blocks for this purpose, (ii) unrouted for
addresses that are nominally public, but do not appear in the
routing table, (iii) routed match for case where the address
is routable, appears in the routing table and matches IPpub
(i.e., the non-NAT case) and (iv) routed mismatch for the
case where the address is routable, appears in the routing
table but does not match IPpub.
Cellular Networks: Detecting the use of CGNs in cellular
networks is straightforward in Netalyzr because there are no
devices between the mobile device and the ISP and there-
fore the classiﬁcation of the ISP-assigned IPdev directly in-
dicates the presence of a CGN.7 While straightforward, we
require ﬁve observations from an AS before we include it in
our study to ensure our conclusions are sound and are not
the result of some unexpected behavior. The second column
of Table 4 shows the breakdown of IPdev for all our cellu-
lar Netalyzr sessions. We ﬁnd 94% of the sessions—i.e., all
cases except the routed match case—show a translated ad-
dress. A ﬁrst view of CGN deployment in cellular networks
on a per-AS basis shows 63.8% exclusively assign internal
IP addresses to mobile devices. Similarly, we ﬁnd 6.0% of
ASes exclusively assign public IP addresses to devices and
show no signs of address translation. Meanwhile, 30.3% as-
sign a mixture of internal IP address and public IP addresses
to devices. We note that another 5.0% of ASes assign inter-
nal addresses from public blocks that are actually routed, but
still perform address translation!
Non-Cellular Networks: We next shift to Netalyzr’s detec-
tion of CGNs in non-cellular networks. In these networks,
IPdev is often assigned by a device in the device’s network
and therefore when CGNs are present there are multiple ad-
dress translations happening in the path (NAT444). This in
turn makes detection difﬁcult. First, we winnow our anal-
ysis to ASes that have at least ten Netalyzr sessions in our
dataset.8 The third column of Table 4 shows that IPdev is
6Note, while mobile devices can join wiﬁ networks we scope
our measurements to those on cellular data networks.
7Exceptions could be caused by users manipulating their
network access with VPN tunnels or by users who run their
own cellular access point (e.g., femtocells). Netalyzr’s An-
droid client collects enough data to allow us to prune such
cases from our analysis.
8Note, we require more observations in the non-cellular case
(ten) compared to the cellular case (ﬁve) because the situa-
tion is not as straightforward due to the presence of in-path
network equipment in the edge network. This makes the
breadth of behavior we observe larger and in turn we need
more observations to draw sound conclusions.
BitTorrent
Netalyzr non-cellular
BitTorrent [ Netalyzr
Netalyzr cellular
routed ASes (N=52K)
covered CGN-positive
254 (9.40%)
195 (14.3%)
421 (13.3%)
205 (94.0%)
2,724 (5.2%)
1,367 (2.6%)
3,166 (6.0%)
218 (0.4%)
eyeball ASes, PBL (N=2.9K)
covered CGN-positive
180 (10.8%)
151 (17.4%)
306 (17.1%)
162 (92.6%)
1,673 (57.7%)
866 (29.8%)
1,791 (61.7%)
175 (6.0%)
eyeball ASes, APNIC (N=3.1K)
CGN-positive
204 (11.2%)
174 (18.7%)
350 (18.0%)
161 (94.2%)
covered
1,824 (59.6%)
929 (30.4%)
1,946 (63.6%)
171 (5.6%)
Table 5: Coverage and detection rates of our methods as fraction of all routed ASes, as well as Eyeball ASes, primarily
connecting end users, as derived from PBL and APNIC.
0
0
2
0
5
0
2
5
2
1
E
P
C
P
I
f
o
s
4
2
/
e
u
q
n
u
i
E
P
C
P
I
f
o
s
4
2
/
e
u
q
n
u
i
0
0
1
0
2
5
1
192X
AS
5
1 2
sessions with IPCPE ≠ IPpub
20 50
200
10X
AS
5
20
1
500
sessions with IPCPE ≠ IPpub
100
172X
AS
5
200
1 2
sessions with IPCPE ≠ IPpub
20 50
100X
AS
E
P
C
P
I
f
o
s
4
2
/
e
u
q
n
u
i
0
5
0
1
5
2
1
E
P
C
P
I
f
o
s
4
2
/
e
u
q
n