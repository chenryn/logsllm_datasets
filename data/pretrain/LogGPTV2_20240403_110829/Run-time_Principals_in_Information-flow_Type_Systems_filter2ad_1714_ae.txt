γδ(Λα (cid:22) p. e0) = Λα (cid:22) δ(p). γδ(e0)
γ0δ(Λα (cid:22) p. e0) = Λα (cid:22) δ(p). γ0δ(e0)
δ((∀α (cid:22) p. t0)l) = (∀α (cid:22) p. δ(t0))δ(l)
By (1)-(3), R-All and R-Term, it remains to show that ∀A ‘ X (cid:22) δ(p),
A ‘ ((Λα (cid:22) δ(p). γδ(e0)) [X]) ≈ζ ((Λα (cid:22) δ(p). γ0δ(e0)) [X]) : δ(t0 t l)
By the evaluation under a context with E-All,
A, (Λα (cid:22) δ(p). γδ(e0)) [X] −→∗ A, γδ(e0){X/α}
A, (Λα (cid:22) δ(p). γ0δ(e0)) [X] −→∗ A, γ0δ(e0){X/α}
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
(1)
(2)
(3)
(4)
(5)
Run-time Principals in Information-ﬂow Type Systems
·
19
Let δ0 = δ, α 7→ X such that
(6)
(7)
(8)
By the induction hypothesis with (8), we have A ‘ γδ(e0) ≈ζ γ0δ(e0) : δ(t0 t l).
Then, the result follows by (4)-(7) and R-Term.
γδ(e0){X/α} = γδ0(e0)
γ0δ(e0){X/α} = γ0δ0(e0)
δ0 |= ∆, α (cid:22) p
∆; Γ ‘ e0 : (∀α (cid:22) p. t0)l
∆; Γ ‘ e0 [p] : t0 t l
—T-Inst:
By the induction hypothesis on e0, we have A ‘ γδ(e0) ≈ζ γ0δ(e0) : δ((∀α (cid:22) p. t0)l)
with A, γδ(e0) −→∗ A, v and A, γ0δ(e0) −→∗ A, v0. The result then follows by
R-All and R-Term.
∆; Γ ‘ e0 : t{q/α} ∆ ‘ p (cid:22) q ∆ ‘ l
∆; Γ ‘ pack (p (cid:22) q, e0) : (∃α (cid:22) q. t)l
—T-Pack:
By the deﬁnition of substitution,
γδ(pack (p (cid:22) q, e0)) = pack (δ(p) (cid:22) δ(q), γδ(e1))
γ0δ(pack (p (cid:22) q, e0)) = pack (δ0(p) (cid:22) δ0(q), γ0δ(e1))
(1)
(2)
(3)
By the induction hypothesis on e0, we have A ‘ γδ(e0) ≈ζ γ0δ(e0) : δ(t{q/α})
with A, γδ(e0) −→∗ A, v and A, γ0δ(e0) −→∗ A, v0. By the evaluation under a
context,
δ((∃α (cid:22) q. t)l) = (∃α (cid:22) δ(q). δ(t))δ(l)
pack (δ(p) (cid:22) δ(q), γδ(e1)) −→∗ pack (δ(p) (cid:22) δ(q), v)
pack (δ0(p) (cid:22) δ0(q), γ0δ(e1)) −→∗ pack (δ0(p) (cid:22) δ0(q), v0)
The result follows by (1)-(3), R-Some and R-Term.
∆; Γ ‘ e1 : (∃α (cid:22) p. t1)l ∆, α (cid:22) p; Γ, x : t1 ‘ e2 : t2 α 6∈ ftv(Γ) ∪ ftv(t2)
—T-Open:
∆; Γ ‘ open (α, x) = e1 in e2 : t2 t l
By the induction hypothesis on e1, A ‘ γδ(e1) ≈ζ γ0δ(e1) : δ((∃α (cid:22) p. t1)l) with
A, γδ(e1) −→∗ A, v1 and A, γ0δ(e1) −→∗ A, v0
1.
By the deﬁnition of substitution and the evaluation under a context,
γδ(open (α, x) = e1 in e2) = open (α, x) = γδ(e1) in γδ(e2)
γ0δ(open (α, x) = e1 in e2) = open (α, x) = γ0δ(e1) in γ0δ(e2)
A, open (α, x) = γδ(e1) in γδ(e2) −→∗ A, open (α, x) = v1 in γδ(e2)
A, open (α, x) = γ0δ(e1) in γ0δ(e2) −→∗ A, open (α, x) = v0
1 in γ0δ(e2)
By the inversion of A ‘ v1 ∼ζ v0
(1) R-Label with A ‘ l 6v ζ: by R-Label and R-Term.
1 : δ((∃α (cid:22) p. t1)l),
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
20
Stephen Tse and Steve Zdancewic
(2) R-Some with v1 = pack (X (cid:22) p, v) and v0
v0 : δ(t{X/α}): by the evaluation under a context,
1 = pack (X (cid:22) p, v0) with A ‘ v ∼ζ
A, open (α, x) = v1 in γδ(e2) −→∗ A, γδ(e2){X/α, v/x}
A, open (α, x) = v0
1 in γ0δ(e2) −→∗ A, γ0δ(e2){X/α, v0/x}
We can then ﬁnish in a similar way as T-Fun and T-All by extending γ0 =
γ, x 7→ v and γ0
0 = γ0, x 7→ v0 and δ0 = δ, α 7→ X.
∆; Γ ‘ e0 : t1 ∆ ‘ t1 ≤ t2
∆; Γ ‘ e0 : t2
—T-Sub:
By the induction hypothesis on e0, we have A ‘ γδ(e0) ≈ζ γ0δ(e0) : δ(t1) with
A, γδ(e0) −→∗ A, v and A, γ0δ(e0) −→∗ A, v0. The result is then a consequence
of the following lemma and R-Term.
Lemma 5 (Subtyping for logical relations).
A ‘ t ≤ t0, then A ‘ v ∼ζ v0 : t0.
If A ‘ v ∼ζ v0 : t and
4. DECLASSIFICATION AND AUTHORITY
Although noninterference is useful as an idealized security policy, in practice most
programs do intentionally release some conﬁdential information. This section con-
siders the interaction between run-time principals and declassiﬁcation and suggests
run-time authority as a practical approach to delimiting the eﬀects of downgrading.
The basic idea of declassiﬁcation is to add an explicit method for the program-
mer to allow information ﬂows downward in the security lattice. The expression
declassify e t indicates that e should be considered to have type t, which may re-
lax some of the labels constraining e. Declassiﬁcation is like a type-cast operation;
operationally it has no run-time eﬀect:
A, declassify v t −→ A, v
(E-Dcls)
One key issue is how to constrain its use so that the declassiﬁcation correctly
implements a desired security policy. Ideally, each declassiﬁcation would be accom-
panied by formal justiﬁcation of why its use does not permit unwanted downward
information ﬂows. However, such a general approach reduces to proving that a
program satisﬁes an arbitrary policy, which is undecidable for realistic programs.
An alternative is to give up on general-purpose declassiﬁcation and instead build
it into appropriate operations, such as encryption. Doing so essentially limits the
security policies that can be expressed, which may be acceptable in some situations,
but is not desirable for general-purpose information-ﬂow type systems.
To resolve these tensions, the original decentralized label model proposed the use
of authority to scope the use of declassiﬁcation. Intuitively, if Alice is an owner
of the data, then her authority is needed to relax the restrictions on its use. For
example, to declassify data labeled {Alice:!} to permit Bob as a reader (i.e. relax
the label to {Alice:Bob!}) requires Alice’s permission.
In the original DLM, a
principal’s authority is statically granted to a piece of code.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
21
Zdancewic and Myers proposed a reﬁnement of the DLM authority model called
robust declassiﬁcation [Zdancewic and Myers 2001; Zdancewic 2003; Myers et al.
2004]. Intuitively, robust declassiﬁcation requires that the decision to release the
conﬁdential data be trusted by the principals whose policies are relaxed.
In a
programming language setting, robustness entails an integrity constraint on the
program-counter (pc) label—the pc label is a security label associated with each
program point; it approximates the information that may be learned by observing
that the program execution has reached the program point.
For example, suppose that the variable x has type booll. Then the pc label
at the program points at the start of the branches v0 and v1 of the conditional
expression case x v0 v1 satisﬁes l v pc because the branch taken depends on x—
observing that the program counter has reached v0 reveals that x is true. If x has
low integrity and is untrusted by Alice, then the condition l v pc implies that the
integrity of the pc labels in the branches are also untrusted by Alice. Robustness
requires that Alice trusts the pc at the point of her declassiﬁcation; even if she has
granted her authority to this program, no declassiﬁcation aﬀecting her policies will
be permitted to take place in v0 or v1.
In the presence of run-time principals, however, the story is not so straightfor-
ward. To adopt the authority model, we must ﬁnd a way to represent a run-time
principal’s authority. Similarly, to enforce robust declassiﬁcation, we must ensure
that at runtime the integrity of the program counter is trusted by any run-time
principals whose data is declassiﬁed. At the same time, we would like to ensure
backward compatibility with the static notions of authority and robustness in pre-
vious work [Zdancewic and Myers 2001; Myers et al. 2006].
4.1 Run-time authority and capabilities
To address downgrading with run-time principals, we use capabilities (unforgeable
tokens) to represent the run-time authority of a principal. The meta-variable i
ranges over a set of privilege identiﬁers I. We are interested in controlling the use
of declassiﬁcation, so we assume that I contains at least the identiﬁer declassify,
but the framework is general enough to control arbitrary privileges. In Section 4.2,
we consider using capabilities to regulate other privileged operations, such as en-
dorsement and delegation.
Figure 6 to Figure 9 summarize the changes to the language needed to support
run-time authority. Just as we separate the static principal names from their run-
time representation, we separate the static authority granted by a principal from its
representation. The former, static authority, is written p.i to indicate that principal
p grants permission for the program to use privilege i. For example, a program
needs to have the authority Alice . declassify to declassify on Alice’s behalf. The
latter, run-time authority, is written X{i} and represents an unforgeable capability
created by principal X and authorizing privilege i. T-Cap in Figure 8 says that
capabilities have static type C.
A program can test a capability at run time to determine whether a principal has
granted it privilege i using the expression if (e1 ⇒ e2 . i) e3 e4. Here, e1 evaluates
to a capability and e2 evaluates to a run-time principal; if the capability implies
that the principal permits i the ﬁrst branch e3 is taken, otherwise e4 is taken.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
22
Stephen Tse and Steve Zdancewic
u ::= . . .
[π] t → t
C
π ::= · | π, p . i
i ::=
declassify
endorse
delegatep(cid:22)p
e ::= . . .
if (e ⇒ e . i) e e
declassify e t
endorse e p
let (e (cid:22) e) in e
acquire e . i
v ::= . . .
let (X1 (cid:22) X2) in λx: t. e
let (X1 (cid:22) X2) in Λα (cid:22) p. e
let (X1 (cid:22) X2) in pack (p (cid:22) p, v)
X{i}
E ::= . . .
| let (E (cid:22) e) e
| let (v (cid:22) E) e
| if (E ⇒ e . i) e e
| if (v ⇒ E . i) e e
| declassify E t
| endorse E p
| acquire E . i
Plain types
function
capability
Authority
Privileges
declassiﬁcation
endorsement
delegation
Terms
if certify
declassify
endorse
let delegate
acquire
Values
delegated function
delegated polymorphism
delegated package
capability
Evaluation contexts
Fig. 6. λRP with run-time authority
Other expressions (endorse e p and acquire e . i) and other privileges (endorse
and delegatep(cid:22)p) will be explained in the next subsections.
To retain the beneﬁts of robust declassiﬁcation, we generalize the pc label to be
a set of static permissions, π. The function type constructor must also be extended
to indicate a bound on the calling context’s pc. In our setting, the bound is the
minimum authority needed to invoke the function. We write such types as [π] t1 →
t2. For example, if f has type [Alice . declassify] bool{Alice:!} → bool{!>} then
the caller of f must have Alice’s authority to declassify—f may internally do some
declassiﬁcation of data owned by Alice. Therefore f, which takes data owned by
Alice and returns public data, may reveal information about its argument. On
the other hand, a function of type [Alice . declassify] bool{Bob:!} → bool{!>}
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
23
x : t ∈ Γ
∆; Γ; π ‘ x : t
∆ ‘ l
∆; Γ; π ‘ * : 1l
∆; Γ; π ‘ e : t1 ∆ ‘ l
∆; Γ; π ‘ inl e : (t1 + t2)l
∆; Γ; π ‘ e : t2 ∆ ‘ l