title:Controller-Oblivious Dynamic Access Control in Software-Defined Networks
author:Steven R. Gomez and
Samuel Jero and
Richard Skowyra and
Jason Martin and
Patrick Sullivan and
David Bigelow and
Zachary Ellenbogen and
Bryan C. Ward and
Hamed Okhravi and
James W. Landry
Controller-Oblivious Dynamic Access Control in
Software-Deﬁned Networks
Steven R. Gomez∗, Samuel Jero∗, Richard Skowyra∗, Jason Martin†, Patrick Sullivan∗, David Bigelow†,
Zachary Ellenbogen∗, Bryan C. Ward∗, Hamed Okhravi∗ and James W. Landry†
email: ∗{ﬁrst.last}@ll.mit.edu, †{jnmartin, dbigelow, jwlandry}@ll.mit.edu
MIT Lincoln Laboratory, Lexington, MA USA
troduces complexity with respect to credential management,
especially when considering edge cases. For example, Active
Directory (AD) credentials are cached locally on endpoints
so a user on a machine disconnected from the network can
still
log on locally. Unfortunately, attackers with system-
level privileges can dump these credentials and use them to
authenticate remotely as the victim, even if that victim is not
legitimately logged onto any devices.
Abstract—Conventional network access control approaches are
static (e.g., user roles in Active Directory), coarse-grained (e.g.,
802.1x), or both (e.g., VLANs). Such systems are unable to
meaningfully stop or hinder motivated attackers seeking to
spread throughout an enterprise network. To address this threat,
we present Dynamic Flow Isolation (DFI), a novel architecture
for supporting dynamic, ﬁne-grained access control policies
enforced in a Software-Deﬁned Network (SDN). These policies
can emit and revoke speciﬁc access control rules automatically
in response to network events like users logging off, letting the
network adaptively reduce unnecessary reachability that could be
potentially leveraged by attackers. DFI is oblivious to the SDN
controller implementation and processes new packets prior to the
controller, making DFI’s access control resilient to a malicious
or faulty controller or its applications. We implemented DFI
for OpenFlow networks and demonstrated it on an enterprise
SDN testbed with around 100 end hosts and servers. Finally,
we evaluated the performance of DFI and how it enables a
novel policy, which is otherwise difﬁcult to enforce, that protects
against a surrogate of the recent NotPetya malware in an infection
scenario. We found that the threat was most limited in its
ability to spread using our policy, which automatically restricted
network ﬂows over the course of the attack, compared to no
access control or a static role-based policy.
I. INTRODUCTION
Access control in traditional enterprise networks is chal-
lenging to implement in a ﬁne-grained manner because the
Ethernet and IP protocols are architected to enable connectivity
rather than restrict it. Static, coarse-grained access control can
be implemented at Layer 2 via VLANs or 802.11x [1], but
more ﬁne-grained or dynamic approaches must generally be
implemented at the application layer (e.g., Kerberos). This
has two consequences that can be taken advantage of by
malicious parties. First, enterprise networks have a high degree
of reachability between machines in Layers 2 and 3, even
if application-layer trafﬁc is unauthorized (discussed further
in Section II). This reachability, which may be unnecessary
for the mission of the network, enables adversaries to exploit
many software vulnerabilities (e.g., in the network stack or
authentication logic) regardless of their ability to authenticate.
Second, handling access control at the application layer in-
DISTRIBUTION STATEMENT A. Approved for public release: distribu-
tion unlimited. This material is based upon work supported by the Depart-
ment of Defense under Air Force Contract No. FA8721-05-C-0002 and/or
FA8702-15-D-0001. Any opinions, ﬁndings, conclusions or recommendations
expressed in this material are those of the author(s) and do not necessarily
reﬂect the views of the Department of Defense.
involve lateral movement,
Both techniques are common steps in attacks against en-
terprise networks that
in which
the attacker spreads from an initial foothold deeper into the
network in order to compromise a high-value machine, such
as a database containing personally-identiﬁable information.
Recently, the NotPetya family of ransomware used both of
the above techniques to infect over one million computers
in Ukraine in 2017, spanning two thousand companies and
causing over $10 billion in total damages [2], [3]. It gained
a foothold inside an enterprise via a compromised update
server,
then spread to other systems using a combination
of vulnerability exploitation and credential theft [4]. Similar
patterns were used recently in high-proﬁle attacks against
Equifax [5], Bangladesh Bank [6], Anthem [7], Chase [8],
Target [9], and RSA Security [10]. Increased threats from
ransomware and the resurgence of self-propagating worms
in 2018 [11] further highlight the importance of the lateral-
movement threat.
It is clear that static, coarse-grained Layer 2 access control
systems do not effectively inhibit an attacker’s ability to
reach target machines, and ﬁne-grained application-layer ap-
proaches can be bypassed through exploitation. Furthermore,
neither is sufﬁciently aware of the larger context of user
activities to distinguish between legitimate user log-on events
and malicious credential theft. In order to secure enterprise
networks, we propose three requirements for an access control
system. First, it must enforce permissions that are at least
as ﬁne-grained as existing application-layer approaches (e.g.,
user- and machine-speciﬁc roles). Second, it must enforce
permissions in the network infrastructure to prevent endpoint
software exploitation. Third, it must support policies that grant
or revoke ﬁne-grained permissions in response to security-
relevant events happening in-network or on network endpoints.
A number of challenges must be overcome to support such
a ﬁne-grained, dynamic network access control system. First,
deﬁning event-driven policies on high-level identiﬁers (e.g.,
usernames and hostnames) but enforcing them in-network
requires the ability to dynamically map these identiﬁers to
potentially changing packet-header information (e.g., IP and
MAC address). Second, the complete access control policy
cannot be fully cached in switches because of switch memory
limitations and policy fragments that cannot always be mapped
to concrete ﬂow-rule match ﬁelds. For example, policy about
a user cannot be speciﬁed in terms of IP addresses when the
user is logged off all devices. Third, in order to achieve policy-
switch consistency, as events arrive and cause policy changes,
any new policy must be instantiated in network switches and
now-stale policies must be evicted. This consistency must be
achieved without disrupting ongoing network ﬂows that remain
allowed, or enabling ﬂows that are newly denied by policy.
Fourth, the system must not be easily bypassable by an attacker
who has compromised network endpoints, even if they can
send arbitrary trafﬁc into the network. Finally, this system
must be able to operate on large networks without imposing
prohibitive delay on allowed network ﬂows.
To address these challenges, we present an OpenFlow-
based architecture called Dynamic Flow Isolation (DFI) for
controller-oblivious, dynamic network access control. This
paper makes the following contributions:
• The design of a novel architecture that enables dynamic
network access control policies independently of the
OpenFlow controller, enabling a variety of control-plane
conﬁgurations and providing protection from malicious
SDN controller applications.
• An implementation of the architecture that demonstrates
its feasibility and overcomes the above-mentioned design
challenges.
• A quantitative evaluation of the system’s overhead show-
ing that DFI increases the time-to-ﬁrst-byte latency for
data transiting an SDN by 17.8ms under no load. This
additional latency increases to 86.7ms at 700 ﬂows/sec,
when saturation begins. The maximum throughput DFI
can achieve is approximately 1350 ﬂows/sec.
• A demonstration of an attack scenario in which DFI
enforces a novel, dynamic role-based access control pol-
icy that is uniquely enabled by the system. We evaluate
DFI using a surrogate of the NotPetya self-propagating
malware, and show that the DFI policy slows and limits
the surrogate’s spread.
II. DYNAMIC ACCESS CONTROL USING SDNS
Intranetwork access control in traditional Ethernet IP en-
terprise networks has historically been both static and coarse-
grained. For example, 802.1x [1] is a port-based access-control
standard that conducts a single authentication check when a
device connects to the network. Based on this check, all trafﬁc
to that device is either allowed or denied. 802.1x is static:
events occurring in the network post-authentication (e.g., users
logging off) cannot inﬂuence the policy implemented earlier. It
is also coarse-grained, since network ﬂows cannot be allowed
or denied individually. This is a limitation of the architecture
of Ethernet IP networks. All devices in the same collision
domain are accessible to one another at Layer 2, and thus can
mutually send and receive network ﬂows regardless of higher-
layer policies. VLANs allow ﬁner-grained control of Layer 2
endpoint reachability, but the set of reachable hosts remains
static after conﬁguration. Switches are conﬁgured to add or
remove speciﬁc VLAN tags on speciﬁc ports regardless of the
actual network usage by the device on that port. At Layer
3, routing tables are relatively static and cannot be changed
at machine timescales to tailor network reachability across
subnets for particular devices.
A growing recognition of the need for more dynamic, ﬁne-
grained control, combined with the limitations above, has
prompted attempts to retroﬁt this capability at the application
layer. Google’s BeyondCorp [12] system, for example, places
every network service behind an authentication proxy that
authenticates the user and device based on a variety of security
sensors. Unfortunately,
is not clear how this approach
interacts with pre-authentication vulnerabilities, such as those
in a TCP/IP stack triggered upon packet receipt [13], that can
lead to kernel compromise. This approach also requires the
addition of network middleware whose performance impacts
have not been reported.
it
A more foundational approach to network access control
has been taken by the academic community. This approach
leverages Software-Deﬁned Networking (SDN), speciﬁcally
the OpenFlow architecture. OpenFlow divides the network into
physically separate control and data planes. The data plane
forwards trafﬁc from endpoints based on ﬂow rules installed
in OpenFlow switches. These ﬂow rules consist of two parts:
a pattern to match against packet header ﬁelds, and an action
to take in the event of a match, such as forwarding over an
egress port. The control plane contains a logically-centralized
controller that reprograms the ﬂow tables in each switch in
response to packets forwarded from data plane switches, for
which there are no matching ﬂow rules. These are referred to
as Packet-in events, and consist of an OpenFlow message
containing the packet header and associated metadata, such as
the switch and port on which the packet was received. By in-
specting Packet-in events (and other OpenFlow messages
sent from the switches), the controller can reactively add and
remove ﬂow rules that together determine the logical network
topology. This allows the network to adapt over time, based
on endpoint trafﬁc and the controller’s network-management
logic.
The majority of modern SDN controllers today, including
Floodlight [14], ONOS [15], and OpenDaylight [16], provide a
ﬁrewall application that can be used to implement ﬁne-grained
access control within the network, rather than being limited to
the perimeter like a traditional ﬁrewall. Unfortunately, ﬁrewall
rules deﬁned using such applications are static: the policy
they enforce does not change in response to events or other
changing security context in the network (e.g., user logs on).
Several academic prototypes have sought to implement ﬁne-
grained access control that modiﬁes the network based on a
sensed security context. Amman and Sommer [17] provide an
API by which the Bro IDS can actuate network access control
policies in response to detection events, for example. Unfor-
tunately, this approach is purely reactive. Access control rules
are installed only after a malicious action has been detected by
Bro, making false positives and negatives a concern. Kinetic
[18] takes a different approach by providing a custom SDN
controller that supports interaction through a ﬂexible policy
language. Arbitrary event sources can drive policy decisions,
enabling access control that is both dynamic and ﬁne-grained.
However, Kinetic’s architecture has not been shown to scale
to large enterprise systems. It is also unclear how network
devices with changing identiﬁers can be reliably speciﬁed
in Kinetic policies, as these policies are not updated when
network identiﬁer-state changes.
Dynamic, ﬁne-grained access control is a key defensive
capability when considering modern threats to enterprise net-
works such as insider attacks and advanced persistent threats
(APTs). Existing attempts to implement it leveraging SDNs
have had partial success, but no one system has been both
scalable for enterprises and able to provide a framework for
the development of event-driven access control policies. Next
we consider the challenges for developing a system like this
and how they can be addressed.
III. DESIGN OF DYNAMIC FLOW ISOLATION
In this section, we present the design of a novel architecture
for enforcing event-driven access control policies in software
deﬁned networks, which we call Dynamic Flow Isolation
(DFI). We ﬁrst discuss design challenges related to managing
dynamic identiﬁers and policies efﬁciently, then describe the
system architecture and how it addresses these challenges.
Finally, we present an end-to-end example illustrating the
operation of DFI.
A. Design Challenges
that
High-Level Identiﬁers in Event-Driven Policies. A net-
work access-control policy rule should be speciﬁed at a
high enough level
it can be understood by network
administrators and easily expressed by policy authors. This
is particularly important in a dynamic access control system,
since an administrator must be able to understand the current
policy, characterize policies, and debug policy conﬂicts. Thus,
we want to enable writing policy over high-level identiﬁers like
hostnames and usernames that are often more human-readable
and memorable compared to identiﬁers like MAC addresses
and IP addresses. However, network devices fundamentally
only ﬁlter packets based on the identiﬁers present in the actual
network trafﬁc. In particular, OpenFlow-based SDNs support