title:Establishing Software Root of Trust Unconditionally
author:Virgil D. Gligor and
Shan Leung Maverick Woo
Establishing Software Root of Trust Unconditionally
Virgil D. Gligor
Carnegie Mellon University
PI:EMAIL
Maverick S. L. Woo
Carnegie Mellon University
PI:EMAIL
Abstract—Root-of-Trust (RoT) establishment ensures either
that the state of an untrusted system contains all and only content
chosen by a trusted local veriﬁer and the system code begins
execution in that state, or that the veriﬁer discovers the existence
of unaccounted for content. This ensures program booting into
system states that are free of persistent malware. An adversary
can no longer retain undetected control of one’s local system.
We establish RoT unconditionally; i.e., without secrets, trusted
hardware modules and instructions, or bounds on the adversary’s
computational power. The speciﬁcation of a system’s chipset
and device controllers, and an external source of true random
numbers, such as a commercially available quantum RNG, is all
that is needed. Our system speciﬁcations are those of a concrete
Word Random Access Machine (cWRAM) model – the closest
computation model to a real system with a large instruction set.
We deﬁne the requirements for RoT establishment and
explain their differences from past attestation protocols. Then
we introduce a RoT establishment protocol based on a new
computation primitive with concrete (non-asymptotic) optimal
space-time bounds in adversarial evaluation on the cWRAM.
The new primitive is a randomized polynomial, which has k-
independent uniform coefﬁcients in a prime order ﬁeld. Its
collision properties are stronger than those of a k-independent
(almost) universal hash function in cWRAM evaluations, and are
sufﬁcient to prove existence of malware-free states before RoT is
established. Preliminary measurements show that randomized-
polynomial performance is practical on commodity hardware
even for very large k.
To prove the concrete optimality of randomized polynomials,
we present a result of independent complexity interest: a Horner-
rule program is uniquely optimal whenever the cWRAM execution
space and time are simultaneously minimized.
I.
INTRODUCTION
Suppose a user has a trustworthy program, such as a
formally veriﬁed micro-kernel [37] or a micro-hypervisor [73],
and attempts to boot it into a speciﬁc system state. The system
state comprises the contents of all processor and I/O registers
and random access memories of a chipset and peripheral
device controllers at a particular time; e.g., before boot. If
any malicious software (malware) can execute instructions
anywhere in the system state, the user wants to discover the
presence of such malware with high probability.
This goal has not been achieved to date. System compo-
nents that are not directly addressable by CPU instructions
or by trusted hardware modules enable malware to survive in
non-volatile memories despite repeated power cycles, secure-
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23170
www.ndss-symposium.org
and trusted-boot operations [56]; i.e., malware becomes per-
sistent. For example, persistent malware has been found in
the ﬁrmware of peripheral controllers [15], [43], [67], network
interface cards [16], [17], disk controllers [5], [48], [60], [77],
USB controllers [2], as well as routers and ﬁrewalls [5]. Natu-
rally, persistent malware can infect the rest of the system state,
and thus a remote adversary can retain long-term undetected
control of a user’s local system.
Now suppose that the user attempts to initialize the local
system state to content
that s/he chooses; e.g., malware-
free code, or I/O register values indicating that the system
is disconnected from the Internet. Then, the user wants to
verify that the system state, which may have been infected
by malware and hence is untrusted, has been initialized to the
chosen content.
Root of trust (RoT) establishment on an untrusted system
ensures that a system state comprises all and only content
chosen by the user, and the user’s code begins execution in
that state. All implies that no content is missing, and only
that no extra content exists. If a system state is initialized to
content that satisﬁes security invariants and RoT establishment
succeeds, a user’s code begins execution in a secure initial
state. Then trustworthy OS programs booted in a secure initial
state can extend this state to include secondary storage and
temporarily attached (e.g., USB) controllers. If RoT estab-
lishment fails, unaccounted for content, such as malware,
exists. Hence, RoT establishment is sufﬁcient for (stronger
than) ensuring malware freedom and necessary for all software
that needs secure initial states, such as access control and
cryptographic software. However, as with secure and trusted
boot, the trustworthiness of the software booted in secure initial
states is not a RoT establishment concern.
Unconditional Security. In this work we establish RoT
unconditionally; i.e., without secrets, trusted hardware modules
and special instructions (e.g., TPMs [71], ROMs [18], [31],
SGX [14]), or polynomial bounds on an adversary’s computing
power. By deﬁnition, a solution to a security or cryptography
problem is unconditional if it depends only on the existence
of physical randomness [10] and the ability to harvest it [30],
[59]. Unconditional security solutions have several fundamen-
tal advantages over conditional ones. For example:
• they are independent of any security mechanism, protocol,
or external party whose trustworthiness is uncertain; e.g.,
a mechanism that uses a secret key installed in hardware
by a third party depends on the unknowable ability and
interest of that party to protect key secrecy.
• they limit any adversary’s chance of success to provably
low probabilities determined by the defender; i.e., they
give a defender undeniable advantage over the adversary.
• they are independent of the adversary’s computing power
and technology used; e.g., they are useful in post-quantum
computing.
In unconditional RoT establishment all the user needs is an
external source of non-secret physical randomness, such as one
of the many commercially available quantum random number
generators, and correct system speciﬁcations. That correct
system speciﬁcations are indispensable for solving any security
and cryptography problem has been recognized for a long time.
As security folklore paraphrases a well-known quote [76]: “a
system without speciﬁcations cannot be (in)secure: it can only
be surprising.” For RoT establishment, speciﬁcations are nec-
essarily low-level: we need a concrete Word Random Access
Machine (cWRAM) model of computation (viz., Appendix A),
which is the closest model to a real computer system. It has
a constant word length, up to two operands per instruction,
and a general instruction-set architecture (ISA) that includes
I/O operations and multiple addressing modes. It also supports
multiprocessors, caches, and virtual memory.
Contributions and Roadmap. We know of no other
protocols that establish RoT provably and unconditionally. Nor
do we know any other software security problem that has been
solved unconditionally in any realistic computational model.
This paper is organized as follows.
Requirements Deﬁnition (Section II). We deﬁne the require-
ments for RoT establishment, and provide the intuition for how
to jointly satisfy them to establish malware-free states and then
RoT. In Section VIII we show that these requirements differ
from those of past attestation protocols; i.e., some are stronger
and others weaker than in past software-based [7], [39], [63],
[64], [66], cryptographic-based [8], [18], [21], [31], [38], [53],
and hybrid [43], [78] attestation protocols.
New Primitive for establishing malware-free states (Sec-
tion IV). To support establishment of malware-free system
states, we introduce a new computation primitive with op-
timal space (m)-time (t) bounds in adversarial evaluation
on cWRAM, where the bounds can scale to larger values.
The new primitive is a randomized polynomial, which has
k-independent uniform coefﬁcients in a prime order ﬁeld. It
also has stronger collision properties than a k-independent
(almost) universal hash function when evaluated on cWRAM.
We use randomized polynomials in a new veriﬁer protocol
that assures deterministic time measurement in practice (Sec-
tion VI). Preliminary measurements (Section VII) show that
their performance is practical on commodity hardware even
for very large k; i.e., k = 64.
RoT establishment (Section V). Given malware-free states,
we provably establish RoT and provide secure initial states
for all software. This requirement has not been satisﬁed since
its identiﬁcation nearly three decades ago; e.g., see the NSA’s
Trusted Recovery Guideline [51], p. 19, of the TCSEC [50].
Optimal evaluation of polynomials (Section III). We use
Horner’s rule to prove concrete optimal bounds of random-
ized polynomials in the cWRAM. To do this, we prove
that a Horner-rule program is uniquely optimal whenever the
cWRAM execution space and time are simultaneously mini-
mized. This result is of independent complexity interest since
Horner’s rule is uniquely optimal only in inﬁnite ﬁelds [9] but
is not optimal in ﬁnite ﬁelds [35].
II. REQUIREMENTS DEFINITION
To deﬁne the requirements for RoT establishment we use
a simple untrusted system connected to a trusted local veriﬁer.
Suppose that the system has a processor with register set R
and a random access memory M. The veriﬁer asks the system
to initialize M and R to chosen content. Then the veriﬁer
sends a random nonce, which selects Cnonce from a family
of computations Cm,t(M, R) with space and time bounds
m and t, and challenges the system to execute computation
Cnonce on input (M, R) in m words and time t. Suppose that
Cm,t is space-time (i.e., m-t) optimal, result Cnonce(M, R) is
unpredictable by an adversary, and Cnonce is non-interruptible.
If Cm,t is also second pre-image free and the system outputs
result Cnonce(M, R) in time t, then after accounting for the
local communication delay,
the
system state (M, R) contains all and only the chosen content.
Intuitively, second pre-image freedom and m-t optimality can
jointly prevent an adversary from using fewer than m words or
less time than t, or both, and hence from leaving unaccounted
for content (e.g., malware) or executing arbitrary code in the
system.
the veriﬁer concludes that
When applied to multiple device controllers, the veriﬁer’s
protocol must ensure that a controller cannot help another
undetectably circumvent its bounds by executing some part of
the latter’s computation; e.g., act as an on-board proxy [43].
A. Adversary
Our adversary can exercise all known attacks that insert
persistent malware into a computer system, including having
brief access to that system to corrupt software and ﬁrmware;
e.g., an extensible ﬁrmware interface (EFI) attack [52] by an
“evil maid.” Also, it can control malware remotely and extract
all software secrets stored in the system via a network channel.
Malware can read and write the veriﬁer’s local I/O channel,
but does not have access to the veriﬁer’s device and external
source of true random numbers.
For unconditional security, we assume that the adversary
can break all complexity-based cryptography but cannot pre-
dict the true random numbers received from the veriﬁer. Also,
the adversary’s malware can optimize Cm,t’s code on-the-ﬂy
and at no cost; e.g., without being detected by the veriﬁer.
Furthermore, the adversary can output the result of a different
computation that lowers t or m, or both, while attempting to
return a correct Cnonce(M, R) result.
B. Code Optimality in Adversary Execution
Concrete-Optimality Background. Recall that a computa-
tion’s upper time and space bounds are given by an algorithm
for that computation whereas the lower bounds are given by a
proof that holds for all possible algorithms for it. An algorithm
is space-time optimal if its bounds match the space and time
lower bounds of its computation.
Note that a veriﬁer can use neither Cm,t computations
that have asymptotic lower bounds nor ones that have only
theoretical ones; i.e., bounds that cannot be matched by any
program, as illustrated below. If Cm,t’s lower bounds are
asymptotic, a veriﬁer can never prove that an adversary is
unable to ﬁnd an algorithm with better concrete bounds, by
improving the constants hidden in the asymptotic characteri-
zations. If the veriﬁer measures the computation time against
a theoretical lower bound, it returns 100% false positives and
renders veriﬁcation useless. If it measures time against a value
that exceeds the theoretical lower bound, it can never prove that
an adversary’s code couldn’t execute faster than the measured
time, which renders veriﬁcation meaningless. If the memory
2
lower bound is theoretical and the adversary can exercise
space-time (m-t) trade-offs, a time measurement dilemma may
arise again: if m is scaled up to a practical value, t may drop
to a theoretical one.
A veriﬁer needs Cm,t algorithms with concrete (i.e., non-
asymptotic) space-time optimal bounds in realistic models of
computers; e.g., models of general ISAs, caches and virtual
memory, and instruction execution that accounts for I/O and
interrupts, multiprocessors, pipelining. If such algorithms are
available,
the only veriﬁer challenge is to achieve precise
space-time measurements, which is an engineering, rather than
a basic computation complexity, problem; viz., Section VI.
In practice, ﬁnding such Cm,t algorithms is far from a
simple matter. For example, in Word Random Access Machine
(WRAM) models, which are closest to real computers (e.g.,
Appendix A), the lower bounds of even simple computations
such as static dictionaries are asymptotic even if tight [1], [49].
For more complex problems, such as polynomial evaluation,
lower bounds in WRAM have been purely theoretical. That is,
they have been proved in Yao’s cell (bit) probe model [75],
where only references to memory cells are counted, but not in-
struction execution time. Hence, a WRAM program can never
match these lower bounds1; see Related Work, Section VIII.
Concretely optimal algorithms exist for some classic prob-
lems in computation models that are limited to very few oper-
ations; e.g., Horner’s rule for polynomial evaluation. However,
lower bounds in such models do not hold in a WRAM model
with a general ISA or a real processor. For instance, lower
bounds for integer gcd programs obtained using integer divi-
sion (or exact division and mod [47]) can be lowered in modern
processors where an integer division by a known constant can
be performed much faster by integer multiplication [27], [32];
also a right shift can replace division by a power of two.
Furthermore, a Cm,t program must retain its optimality when
composed with system code; e.g., initialization and I/O code.