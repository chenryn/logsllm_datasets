Figure 7: Channel trace and the corresponding Verus
delay proﬁle curve evolution
5.2 Timeouts and Retransmissions
Although Verus is a congestion avoidance protocol
designed to handle the ﬂuctuating capacities of a cellu-
lar channel, packet losses are sometimes inevitable as an
intrinsic property of the cellular medium. Our current
implementation of Verus is built on top of UDP. Verus
uses sequence numbers to keep track of received packets
and their RTTs. These sequence numbers are used to
identify packet losses at the sender. To deal with packet
reordering, our implementation does the following: for
every missing sequence number Verus creates a timeout
timer of 3*delay.
If the missing packet arrives before
the timer expires, no packet loss is identiﬁed; other-
wise, the sending window is multiplicatively decreased
and the missing packet is retransmitted.
5.3 Verus Parameter Settings
Verus makes use of a variety of parameters and the
selection of these parameters inﬂuences the performance
of the protocol or substantially changes the overall pro-
tocol behavior. The eﬀects of parameter changes are
mainly reﬂected in throughput, delay, and fairness among
ﬂows. In our sensitivity analysis we wanted to identify
the speciﬁc eﬀects of parameter settings and to under-
stand their relation to common scenarios.
Our sensitivity analysis of Verus parameters were per-
formed using the OPNET network simulator. In order
to emulate real cellular network behavior in OPNET, we
collected channel traces in uplink and downlink direc-
tion from a commercial cellular network provider (Eti-
salat) and replayed these channel conditions in OPNET
to schedule ﬂows under contention.
The setup for collecting the traces consists of four
Android smartphones (3x Samsung Galaxy S4 and 1x
Sony Xperia Z1) and one server. As the server is con-
nected via a ﬁber link directly to Etisalat’s backbone
network so that additional delays and unwanted back-
ground traﬃc are minimized. All smartphones are run-
ning a native sender and receiver application to commu-
nicate with a server located in our premises. The server
runs the same sender and receiver application. Both
endpoints, server and smartphones, send UDP packets
with an MTU size of 1400 bytes simultaneously with a
constant data rate to the other endpoint. The corre-
sponding endpoint acts as a sink and records the times-
tamp of each packet arrival. We use this bi-directional
setup to measure downlink and uplink of the channel.
As the measurement is executed on the 3G HSPA+
cellular network, the data rate for each device is set to
5 Mbps and 2.5 Mbps for downlink and uplink, respec-
tively. These data rates are close to the upper limits
of the network, but do not necessarily reﬂect the max-
imum capacity of the cellular network. The maximum
capacity of the channel is diﬃcult to determine and de-
pends on many factors, e.g. cross-competing traﬃc, mo-
bility, and interference. We expect that by using these
data rates the channel is not over-saturated and packet
buﬀering is minimized under ideal channel conditions.
050100150200Time(s)05101520253035Throughput(Mbps)050100150200SendingWindowW(t)(#packets)050100150200250300350400DelayD(t)(ms)515In total, we ran the measurements for seven diﬀerent
scenarios to capture a variety of conditions with diﬀer-
ent mobility properties. Each measurement was con-
ducted over ﬁve minutes and all devices were started at
the same time and in the same location. The seven sce-
narios are the following: Campus stationary, Campus
pedestrian, City stationary, City driving, Highway driv-
ing, Shopping Mall and City waterfront. The channel
traces were generated from the packet arrival timetamps
at the receiver and contain inter-arrival times between
consecutive packet arrivals. Using these channel traces,
our parameter sensitivity analysis in OPNET focused
mainly on the following parameters: epoch time (ε), the
delay proﬁle update interval, and the delta decrement
(δ1) and delta increment (δ2).
Epoch ε
In general, cellular channels have three diﬀerent eﬀects
governing the changes, some are short-term (e.g., fast-
fading) and others are more long-term (path-loss and
slow-fading). The epoch ε determines in which inter-
vals Verus calculates the amount of packets to send
Si+1. The smaller the epoch, the faster Verus reacts to
fast-fading or other sudden channel changes. Through
extensive simulation we found that an epoch of 5 ms is
a good value. This value causes Verus to quickly ad-
just the operating point on the delay proﬁle and adapt
to sudden short-term ﬂuctuations. Larger values of ε
cause Verus to adjust the sending window too slowly to
respond to such ﬂuctuations. Within a 5 ms epoch, the
cellular channel does not experience larger long-term
channel changes caused by path-loss or slow-fading ef-
fects.
Instead, these eﬀects are handled by the delay
proﬁle update rate as described below.
Delay Proﬁle Updates
Path-loss and slow-fading dramatically change channel
conditions, and Verus must adapt the delay proﬁle to
match these new conditions. Feedback about channel
conditions continuously update the data in the delay
proﬁle. Verus re-interpolates the delay proﬁle at ﬁxed
time intervals. Our sensitivity analysis indicates that
an update interval of 1 s shows reasonable results and
is being used in this work. Re-interpolation intervals
at higher than 1 s values start causing Verus to miss
channel changes and react slowly to slow-fading channel
changes. A much smaller update interval than 1 s is too
aggressive since path-loss and slow-fading do not occur
at such high frequency.
Delta δ1 and δ2
The deltas determine how restrictive (δ1) or aggressive
(δ2) the protocol reacts to delay changes during each
epoch. The larger the values, the stronger the eﬀects.
We ﬁnd through simulation that their range should be-
tween 1 ms ≤ δ ≤ 2 ms with the condition that δ1 ≤ δ2.
Beyond these guidelines for good Verus performance,
these parameters allow Verus behavior to be tuned to
the level of desired fairness when competing with other
protocols. For the evaluations in this paper we use val-
ues of 1 ms for δ1 and 2 ms for δ2.
6. VERUS MACRO-EVALUATION
In this section, we evaluate the two main macro-level
properties of the performance of the Verus protocol,
namely throughput and delay characteristics. We com-
pare Verus against Sprout [33], TCP Cubic, TCP New
Reno, and TCP Vegas. We take a two-pronged ap-
proach to evaluate Verus against these ﬂavors of TCP
and Sprout: real-world and trace-driven evaluation.
In the real-world evaluation, we use mobile devices
(Samsung Galaxy S4 and Sony Experia Z1 phones) to
run the protocols on 3G and LTE networks.
In this
evaluation, we are constrained by the number of devices
that we are able to simultaneously use; we also restrict
the number of ﬂows per device.
In the trace-driven evaluation, we use multiple mo-
bile devices simultaneously connecting to 3G or LTE
networks where each device is coupled with traﬃc gen-
erators to generate realistic network traces of the chan-
nel under diﬀerent conditions. Using the procedure de-
scribed in 5.3, we speciﬁcally generate an additional set
of traces that capture network contention and mobility
scenarios. Then we use the OPNET network simulator
to compare Verus with other TCP variants [24].3
6.1 Real-world 3G and LTE Networks
We performed this evaluation on the Etisalat net-
work, the largest cellular network operator in the UAE,
which provides both 3G and LTE cellular network ser-
vice. While Verus was running natively on the mobile
devices, TCP Verus, TCP Cubic, and Sprout were ex-
ecuted on tethered laptops. We switched the mode of
each phone to connect to the appropriate network to
test both 3G and LTE. We consider multiple ﬂows be-
tween the devices and a server with a public IP address
at our university campus with high bandwidth and low
network delays. To emulate contention, we simultane-
ously trigger competing ﬂows between the diﬀerent de-
vices and the server. To avoid device contention issues,
we limit the number of ﬂows per device to three. Specif-
ically, we consider the following scenarios:
1. Three phones each running three Verus ﬂows
2. Three phones each running three Sprout ﬂows
3. Three phones each running three Cubic ﬂows (se-
cure copy (scp) download)
4. Three phones each running three Vegas ﬂows (scp
download)
All experiments were performed on Etisalat’s 3G and
LTE network at ﬁxed locations without mobility and
at the same time (late evening in a residential area).
The duration of each run was two minutes and each
experiment was repeated ﬁve times. All tests were done
3The Sprout codebase is not compatible with the OP-
NET simulator, thus we compare against Sprout only
in the real-world evaluations. Furthermore, we use the
“sendonly” implementation of Sprout to get a fair com-
parison to Verus and other protocols.
516(a) 3G throughput vs. delay
(a) 3G throughput vs. delay
(b) LTE throughput vs. delay
(b) LTE throughput vs. delay
Figure 8: Averaged throughput and delay of Sprout,
TCP Cubic, TCP Vegas, and Verus on 3G and LTE
Figure 9: Diﬀerent values of R in Verus trade-oﬀ higher
throughput and lower delay
on the downlink and the results from each ﬂow were
averaged for each experiment.
Figure 8 shows the average throughput and average
delay for each of the ﬂows across all runs on 3G and
LTE. We make the following observations: The average
delay observed by Verus ﬂows is an order of magnitude
lower than the average delay of TCP Cubic and TCP
Vegas ﬂows. Comparing 3G and LTE, Verus marginally
outperforms TCP Cubic in terms of throughput in 3G
network conditions and compares even more favorably
in LTE networks. Also, in these scenarios Verus gen-
erally performs similar to Sprout with slightly higher
throughput and higher delay.
For Verus we repeated the experiments for diﬀer-
ent values of the ratio R (the maximum tolerable ra-
tio between Dmax and Dmin) to show how the value
of R tunes Verus to diﬀerent trade-oﬀs between higher
throughput and lower delay. Setting the Verus R pa-
rameter to six leads to throughputs higher than Sprout,
but with slightly increased delays. Figure 9 shows the
impact of the Verus R parameter on the protocol behav-
ior. Depending on the value of R, the Verus protocol
can be tuned to achieve a trade-oﬀ between a higher
throughput or lower delay. By setting R to two, Verus
achieves lower delay compared to Sprout with slightly
lower throughput.
6.2 Trace-driven Evaluation
Traﬃc ﬂows over cellular channels are not perfectly
isolated and exhibit contention for radio resources. To
evaluate Verus in a contention scenario with several
competing ﬂows, we rely on the OPNET simulator and
use channel traces to emulate real cellular network be-
havior. Following the procedure in Section 5.3, we col-
lected additional cellular channel traces to perform the
evaluations in this section. The channel traces are fed
into a traﬃc shaper and replayed upon packet arrival.
In general, the traﬃc shaper is a modiﬁed version of
a regular network router (as natively available in OP-
NET) and also implements a shared queue with Ran-
dom Early Detection (RED) [11] queue management
using the following parameters: minimum queue size
3 MBit, maximum queue size 9 MBit, and drop proba-
bility 10%.
We evaluate Verus under high contention within the
OPNET network simulator for each of these channel
traces to understand how Verus performs under diﬀer-
ent competing traﬃc scenarios in terms of throughput
and delay. Additionally, our simulations show fairness
properties among the ﬂows for the diﬀerent protocols.
We show the results primarily for the downlink direc-
tion but the observations are similar for the uplink. Our
simulations are conﬁgured to run with 2, 5, 10 and 20
10−1100Delay(s)012345678Throughput(Mbps)TCPCubicTCPVegasVerus(R=6)Sprout10−1100Delay(s)012345678Throughput(Mbps)TCPCubicTCPVegasVerus(R=6)Sprout10−1100Delay(s)012345678Throughput(Mbps)Verus(R=6)Verus(R=4)Verus(R=2)10−1100Delay(s)012345678Throughput(Mbps)Verus(R=6)Verus(R=4)Verus(R=2)517ing delays. Increasing R to six, increases throughput,
but also increases delay due to additional buﬀering.
Mobility
Figures 10b and 10c show the same scatter plot of Verus,
TCP Cubic, and TCP New Reno ﬂows under two other
mobility patterns. We observe that while the average
throughput remains roughly the same, mobility has an
impact on the variance of the throughput across com-
peting TCP ﬂows. However, even with high mobility,
the variation in throughput across Verus ﬂows is small,
which is indicative of Verus being able to quickly adapt
and achieves high levels of fairness despite mobility.
Fairness
To better quantify the fairness argument, we consider
Jain’s fairness index [17] measured as:
((cid:80)n
n ·(cid:80)n
i=1 xi)2
2
i=1 xi
f (x1, x2, ..., xn) =
(7)
where xi is the normalized throughput of the i-th user
and n is the number of clients. The fairness index al-
ways ranges from zero to one, where 1
n represents the
worst case and 1 is perfect fairness. We compute Jain’s
fairness index over windows of one second and average
these one second fairness values for the overall fairness
for each protocol for comparison. Here, we vary the
number of competing ﬂows for each experiment between
2 to 20 ﬂows. Here and in the following experiments,
we set Verus’ parameter R = 2 unless otherwise stated.
Scenario TCP Cubic TCP NewReno Verus
94.6%
2 Users
87.6%
5 Users
10 Users
90.7%
86.8%
15 Users
20 Users
78.6%
98.1%
93.5%
76.2%
75.2%
70.1%
89.7%
86.3%
83.8%
83.3%
82.0%
(a) Campus pedestrian
(b) Slow driving within the city with signals
(c) Fast driving on highway
Figure 10: Delay-throughput comparison with 10 ﬂows
for diﬀerent mobility patterns
Table 1: Jain’s fairness index comparison
simultaneous clients for TCP Cubic, TCP NewReno,
and Verus. Both TCP scenarios are conﬁgured with
full buﬀer FTP traﬃc and default parameters accord-
ing to Linux 3.16 (TCP Cubic) and Windows 7 (TCP
NewReno) conﬁgurations. Verus is conﬁgured with the
parameters obtained in Section 5.3.
Figure 10a shows a scatter plot of the throughput of
all the individual ﬂows of the average delay and average
throughput observed by each of the ﬂows in a campus
pedestrian environment. Overall, we observe that Verus
with lower R ratio experiences an order of magnitude
lower delay than TCP Cubic or TCP New Reno while
the throughput of Verus is comparable to the through-
put of TCP Cubic and TCP New Reno.
In all these