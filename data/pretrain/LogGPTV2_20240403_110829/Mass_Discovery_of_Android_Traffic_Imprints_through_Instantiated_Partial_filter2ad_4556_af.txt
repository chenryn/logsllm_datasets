More speci(cid:128)cally, we now just look at the combination of invariable
tokens (e.g., key-value pairs) on the same (cid:131)ow, and remove dupli-
cated tokens across apps. (cid:140)e imprint generated in this way does
not capture some packets or even apps. For example, a repackaged
app may not have any (cid:131)ow-based imprint, as its tra(cid:129)c invariants
either belong to the app it clones or the advertising library injected
into its code, though it can still be (cid:128)ngerprinted by the combination
of these invariants. Imprint generation over multiple (cid:131)ows is chal-
lenging, due to the di(cid:129)culty in linking these (cid:131)ows together (e.g.,
a TCP connection for retrieving data from the server and another
connection for downloading ads). Prior research utilizes observed
temporal relations to correlate two (cid:131)ows [28], which may not work
in the case of a repackage app, when its identi(cid:128)able (cid:131)ows are pro-
duced at di(cid:130)erent times. How to address this problem is le(cid:137) for the
future research.
7 RELATED WORK
Imprint generation. Given the emerging demands for managing
network behaviors of mobile apps, techniques for app tra(cid:129)c (cid:128)nger-
printing have been intensively investigated in recent years, both by
the industry (such as Palo Alto networks) and the academia [6, 7, 12,
14, 24, 26, 28–30, 37, 42]. All existing techniques are based upon di-
rect analysis of app tra(cid:129)c for imprint generation, mainly relying on
supervised learning to build a classi(cid:128)cation model from a training
set of network traces [30]. Most of these approaches assume that
the app network traces are already given, sometimes from ISPs and
mobile carriers [28]. In the other cases, automatic UI exploration
techniques (e.g., monkeyrunner [1]) are directly used or enhanced
to generate app tra(cid:129)c. For example, NetworkPro(cid:128)ler [14] improves
monkeyrunner by leveraging recorded user events and other heuris-
tics to discover new UI paths of the app under the test. Still li(cid:138)le is
known how comprehensive the traces produced in that way could
be, in comparison with the app’s real-world tra(cid:129)c, even a(cid:137)er a sub-
stantial amount of time is spent on the testing (at least 5 minutes).
In general, an app’s realistic, comprehensive network traces are
hard to come by, not to mention the challenge in generating such
traces at a large scale, for millions of apps. Tiger is designed to
address this challenge, which uses code-analysis to guide the tra(cid:129)c
triggering and imprint generation. (cid:140)e only prior approach not
relying on the training set or seed signatures has been proposed in
a study on in-app advertisement [39]. (cid:140)e approach uses app names
(i.e., package names) and AD-IDs collected from an app’s meta data
to (cid:128)ngerprint its tra(cid:129)c. Also, the e(cid:130)ectiveness of package names
has been mentioned in other work [24]. As demonstrated in our
experiment, the invariants Tiger recovers from an app’s code vastly
outperforms these tokens in terms of their coverage on the app’s
tra(cid:129)c. Our (cid:128)ndings show that indeed e(cid:129)cient code-analysis is a
way to go for the large-scale app imprint generation.
Program slicing. Program slicing is a technique for simplifying a
program by focusing only on a subset of its code relevant to some
points of interest (aka sinks) [38]. It has been widely utilized in
debugging/testing [22, 41], program behavior analysis [23, 27] and
bug detection [25]. Due to the complexity of modern applications,
scalability is always an issue for the real-world use of the tech-
niques [34]. As a result, pruning is used to serve di(cid:130)erent purposes:
for example, “thin slicing” [36] has been proposed to identify state-
ments that produce incorrect values [44]. (cid:140)e slicing technique
has also been applied to analyze Android apps. As an example,
SAAF [20] utilizes slicing to backtrack the parameters of a given
method. Harvester [32] combines slicing with dynamic execution
for extracting runtime values of plain-text telephone numbers in
SMS trojans, command and control messages of bots in malware.
However, never before has the slicing technique been tuned towards
the analysis of tra(cid:129)c invariants, using instantiation of unrelated
variables to prunes the slice tree. Our research shows that this new
technique achieves 12.42× speedup over the conventional slicing
and execution, and may have the potential to be applied to other
domains.
8 CONCLUSIONS
In this paper, we present Tiger, a novel technique that makes mas-
sive scale, comprehensive app imprint generation possible. At the
center of Tiger is a unique instantiated partial execution technique
that slices the code related to an app’s network sinks in a way that
the variables unessential to the app’s network tokens are quickly
identi(cid:128)ed and instantiated, and related paths are quickly pruned.
As a result, only a very compact set of statements need to be run to
recover the content of the invariable tokens, which enables at least
one order of magnitude faster than a more conventional slicing
and execution approach. In the end, Tiger is shown to achieve the
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA826performance of processing each app in 18 seconds on average and
the e(cid:130)ectiveness of covering over 98% of identi(cid:128)able app tra(cid:129)c.
Running Tiger over 200,000 real-world apps, a scale never done
before in tra(cid:129)c signature generation, we were able to gain an
in-depth understanding about the identi(cid:128)able tra(cid:129)c produced by
modern apps. We found that unexpected information from apps’
communication, including fake device information, hardcoded time,
credentials and session IDs, could all be used to uniquely (cid:128)ngerprint
individual apps. Also discovered in our work is the presence of
complicated triggering conditions, requiring human intervention,
Intent trigger and remote instructions, which demonstrates the
limitations of automatic UI exploration and the importance for code-
analysis based solutions. Finally we show the potential directions to
move forward, particularly possible enhancement of our techniques
to generate more complicated cross-(cid:131)ows imprints, and further
improvement on the coverage of the packets that can be identi(cid:128)ed.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their con-
structive comments. And we also thank VirusTotal for the help in
validating suspicious apps in our study. IIE authors were supported
in part by NSFC U1536106 and 61728209, National Key Research
and Development Program of China (Grant No.2016QY04W0805,
No.2016YFB0801603), Youth Innovation Promotion Association
CAS, strategic priority research program of CAS (XDA06010701).
IU authors were supported by NSF CNS-1223477, 1223495, 1527141,
1618493, ARO W911NF1610127 and Samsung Gi(cid:137) fund.
REFERENCES
[1] 2017. monkeyRunner. h(cid:138)ps://developer.android.com/studio/test/monkeyrunner
/index.html. (2017).
[2] 2017. Trail: (cid:140)e Re(cid:131)ection API. h(cid:138)ps://docs.oracle.com/javase/tutorial/re(cid:131)ect/.
[6] AddictiveTips. 2017. Easily Monitor All Incoming & Outgoing Network Connec-
tions On Android. h(cid:138)p://www.addictivetips.com/android/monitor-all-incoming-
outgoing-network-connections-on-android/. (2017).
[7] Hasan Faik Alan and Jasleen Kaur. [n. d.]. Can Android Applications Be Identi(cid:128)ed
Using Only TCP/IP Headers of (cid:140)eir Launch Time Tra(cid:129)c. In Proceedings of the
9th ACM Conference on Security and Privacy in Wireless and Mobile Networks
(WiSec’ 16), r (Ed.).
[8] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
FlowDroid: precise context, (cid:131)ow, (cid:128)eld, object-sensitive and lifecycle-aware taint
analysis for Android apps. In Proceedings of the ACM SIGPLAN Conference on
Programming Language Design and Implementation, PLDI 2014. 29.
[9] Kai Chen, Peng Liu, and Yingjun Zhang. 2014. Achieving accuracy and scal-
ability simultaneously in detecting application clones on android markets.
In Proceedings of the 36th International Conference on So(cid:137)ware Engineering.
ACM, 175–186.
[10] Kai Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Nan Zhang, Heqing
Huang, Wei Zou, and Peng Liu. 2015. Finding Unknown Malice in 10 Seconds:
Mass Ve(cid:138)ing for New (cid:140)reats at the Google-Play Scale.. In USENIX Security
Symposium. 659–674.
[11] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang,
Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following devil’s
footprints: Cross-platform analysis of potentially harmful libraries on android
and ios. In Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 357–376.
[12] Mauro Conti, Luigi V. Mancini, Riccardo Spolaor, and Nino Vincenzo Verde. 2015.
Can’t You Hear Me Knocking: Identi(cid:128)cation of User Actions on Android Apps
via Tra(cid:129)c Analysis. In Proceedings of the 5th ACM Conference on Data and
Application Security and Privacy (CODASPY’ 15). 297–304.
[3] 2017. UI/Application Exerciser Monkey. h(cid:138)p://developer.android.com/tools/help/
[4] 2017. VirusTotal. h(cid:138)ps://www.virustotal.com. (2017).
[5] 2017. VirusTotal (cid:128)le statistics during last 7 days. h(cid:138)ps://www.virustotal.com/en
(2017).
monkey.html. (2017).
/statistics/. (2017).
[13] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puc-
ce(cid:138)i, Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscation-
resilient privacy leak detection for mobile apps through di(cid:130)erential analysis. In
Proceedings of the ISOC Network and Distributed System Security Symposium
(NDSS). 1–16.
[14] Shuaifu Dai, Alok Tongaonkar, Xiaoyin Wang, Antonio Nucci, and Dawn
Song. 2013. NetworkPro(cid:128)ler: Towards automatic (cid:128)ngerprinting of Android
apps. In Proceedings of the 32nd IEEE International Conference on Computer
Communications (INFOCOM’ 13). 809–817.
[15] Marianne De Michiel, Armelle Bonenfant, Hugues Cass´e, and Pascal Sainrat. 2008.
Static Loop Bound Analysis of C Programs Based on Flow Analysis and Abstract
Interpretation. In Proceedings of the 14th IEEE International Conference on
Embedded and Real-Time Computing Systems and Applications. IEEE, 161–166.
[16] Gartner. 2017. Managed Security Service Provider (MSSP).
h(cid:138)p://www.gartner.com/it-glossary/mssp-managed-security-service-provider/.
(2017).
[17] Arnab Ghosh, Prashant Kumar Gajar, and Shashikant Rai. 2013. Bring your
own device (BYOD): Security risks and mitigating strategies. Journal of Global
Research in Computer Science 4, 4 (2013), 62–70.
[18] Google. 2017. (cid:140)e Google Android Security Team’s Classi(cid:128)cations for Potentially
Harmful Applications. h(cid:138)ps://static.googleusercontent.com/media/source.andro
id.com/en//security/reports/Google Android Security PHA classi(cid:128)cations.pdf.
(2017).
[19] Michael I Gordon, Deokhwan Kim, Je(cid:130) Perkins, Limei Gilham, Nguyen Nguyen,
and Martin Rinard. 2015. Information-(cid:131)ow analysis of Android applications in
DroidSafe. In Proc. of the Network and Distributed System Security Symposium
(NDSS). (cid:140)e Internet Society.
Johannes Ho(cid:130)mann, Martin Ussath, (cid:140)orsten Holz, and Michael Spreitzenbarth.
[n. d.]. Slicing droids: program slicing for smali code. In Proceedings of the 28th
Annual ACM Symposium on Applied Computing (SAC’ 13). 1844–1851.
[21] Anurag Kumar Jain and Devendra Shanbhag. 2012. Addressing Security and
[20]
Privacy Risks in Mobile Applications. IT Professional 14, 5 (2012), 28–33.
[22] Mariam Kamkar, Peter Fritzson, and Nahid Shahmehri. 1993. Interprocedural
Dynamic Slicing Applied to Interprocedural Data How Testing. In Proceedings
of the Conference on So(cid:137)ware Maintenance (ICSM’ 93). 386–395.
[23] Bogdan Korel and Juergen Rilling. 1998. Program Slicing in Understanding of
Large Programs. In Proceedings of the 6th International Workshop on Program
Comprehension (IWPC’ 89). 145–152.
[24] Anh Le, Janus Varmarken, Simon Langho(cid:130), Anastasia Shuba, Minas Gjoka,
and Athina Markopoulou. 2015. AntMonitor: A System for Monitoring from
Mobile Devices. In Proceedings of the 2015 ACM SIGCOMM Workshop on
Crowdsourcing and Crowdsharing of Big (Internet) Data,. 15–20.
[25] Bin Liang, Pan Bian, Yan Zhang, Wenchang Shi, Wei You, and Yan Cai. 2016.
AntMiner: mining more bugs by reducing noise interference. In Proceedings
of the 38th International Conference on So(cid:137)ware Engineering (ICSE 2016). 333–
344.
[26] Envato Pty
Ltd.
2017.
Analyzing Android Network Tra(cid:129)c.
h(cid:138)p://code.tutsplus.com
/tutorials/analyzing-android-network-tra(cid:129)c–mobile-10663. (2017).
[27] Andrea De Lucia, Anna Rita Fasolino, and Malcolm Munro. 1996. Understand-
ing Function Behaviors through Program Slicing. In Proceedings of the 4th
International Workshop on Program Comprehension (WPC’ 96). 9–10.
[28] Stanislav Miskovic, Gene Moo Lee, Yong Liao, and Mario Baldi. 2015. App-
Print: Automatic Fingerprinting of Mobile Applications in Network Tra(cid:129)c.
In Proceedings of the 16th International Conference on Passive and Active
Measurement (PAM’ 15). 57–69.
[29] Sophon Mongkolluksamee, Vasaka Visoo(cid:138)iviseth, and Kensuke Fukuda. 2015.
Enhancing the Performance of Mobile Tra(cid:129)c Identi(cid:128)cation with Communica-
tion Pa(cid:138)erns. In Proceedings of the 39th IEEE Annual Computer So(cid:137)ware and
Applications Conference (COMPSAC’ 2015). 336–345.
[30] Fairuz Amalina Narudin, Ali Feizollah, Nor Badrul Anuar, and Abdullah Gani.
2016. Evaluation of machine learning classi(cid:128)ers for mobile malware detection.
So(cid:137) Comput. 20, 1 (2016), 343–357.
[31] Palo Alto Networks. 2017. WildFire Analysis Categories. h(cid:138)ps://www.paloalto-
networks.com/documentation/autofocus/autofocus/autofocus admin guide/
assess-autofocus-artifacts/wild(cid:128)re-analysis-categories.html. (2017).
[32] Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016.
Harvesting Runtime Values in Android Applications (cid:140)at Feature Anti-Analysis
Techniques. In Proceedings of the Network and Distributed System Security
Symposium (NDSS’ 16).
[33] RFC. 2000. HTTP Over TLS. h(cid:138)ps://tools.ietf.org/html/rfc2818. (2000).
[34]
Juergen Rilling and Tuomas Klemola. 2003. Identifying comprehension bo(cid:138)le-
necks using program slicing and cognitive complexity metrics. In Proceedings
of the 11th IEEE International Workshop on Program Comprehension. IEEE,
115–124.
[35] Smali. 2013.
An assembler/disassembler for Android’s dex format.
h(cid:138)p://code.google
.com/p/smali/. (2013).
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA827[36] Manu Sridharan, Stephen J. Fink, and Rastislav Bod´ık. 2007. (cid:140)in slicing. In
Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language
Design and Implementation (PLDI’ 07). 112–122.
Jianhua Sun, Lingjun She andHao Chen, Wenyong Zhong, Cheng Chang, Zhiwen
Chen, Wentao Li, and Shuna Yao. 2015. Automatically identifying apps in mobile
tra(cid:129)c. Concurrency and Computation: Practice and Experience (2015).
[38] Frank Tip. 1995. A survey of program slicing techniques. Journal of Program
[37]
Language 3, 3 (1995).
[39] Alok Tongaonkar, Shuaifu Dai, Antonio Nucci, and Dawn Song. 2013. Un-
derstanding Mobile App Usage Pa(cid:138)erns Using In-App Advertisements. In
Proceedings of the 14th International Conference on Passive and Active
Measurement (PAM’ 13). 63–72.
[40] Aliaksei Tsitovich, Natasha Sharygina, Christoph M Wintersteiger, and Daniel
Kroening. 2011. Loop summarization and termination analysis. In International
Conference on Tools and Algorithms for the Construction and Analysis of
Systems. Springer, 81–95.
25, 7 (1982), 446–452.
[41] Mark Weiser. 1982. Programmers Use Slices When Debugging. Commun. ACM
[42] Qiang Xu, (cid:140)omas Andrews, Yong Liao, Stanislav Miskovic, Zhuoqing Mor-
FLOWR: a self-learning
ley Mao, Mario Baldi, and Antonio Nucci. 2014.
system for classifying mobileapplication tra(cid:129)c.
In Proceedings of
the
International Conference on Measurement and Modeling of Computer Systems
(SIGMETRICS’14). 569–570.
[43] Mu Zhang and Heng Yin. 2014. E(cid:129)cient, Context-aware Privacy Leakage Con-
(cid:128)nement for Android Applications Without Firmware Modding. In Proceedings
of the 9th ACM Symposium on Information, Computer and Communications
Security (CCS’ 14). ACM, 259–270.
[44] Xiangyu Zhang, Neelam Gupta, and Rajiv Gupta. 2006. Pruning dynamic slices
with con(cid:128)dence. In Proceedings of the ACM SIGPLAN 2006 Conference on
Programming Language Design and Implementation (PLDI’ 06). 169–180.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA828