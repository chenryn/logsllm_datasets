separate channels: a read-only *CryptoData channel named in that you’ll use 
as a work queue and a channel named done that you’ll use for sending and 
receiving explicit cancellation signals. Lastly, it also accepts a *sync .WaitGroup 
named wg that you’ll use for managing your consumer workers, much like 
your producer implementation. You tell your WaitGroup that you’re starting a 
worker by calling wg.Add(1) v. This way, you’ll be able to track and manage 
all the consumers that are running. 
Next, inside your goroutine, you call defer wg.Done() w so that when 
the goroutine function ends, you’ll update the WaitGroup state, reducing the 
number of running workers by one. This WaitGroup business is necessary for 
you to synchronize the execution of your program across an arbitrary num-
ber of workers. You’ll use the WaitGroup in your main() function later to wait 
for your goroutines to complete.
前沿信安资讯阵地  公众号：i nf osrc
258   Chapter 11
The consumer uses a for loop x to repeatedly read CryptoData work 
structs from the in channel. The loop stops when the channel is closed. 
Recall that the producer populates this channel. As you’ll see shortly, this 
channel closes after the producers have iterated their entire key space 
subsections and pushed the relative crypto data onto the work channel. 
Therefore, your consumer loops until the producers are done producing.
As you did in the producer code, you use a select statement within the 
for loop to check whether the done channel has been closed y, and if it has, 
you explicitly signal the consumer to stop additional work efforts. A worker 
will close the channel when a valid credit card number has been identified, 
as we’ll discuss in a moment. Your default case z performs the crypto heavy 
lifting. First, it decrypts the first block (8 bytes) of ciphertext {, checking 
whether the resulting plaintext is an 8-byte, numeric value |. If it is, you 
have a potential card number and proceed to decrypt the second block of 
ciphertext }. You call these decryption functions by accessing the cipher 
.Block field within your CryptoData work object that you read in from the 
channel. Recall that the producer instantiated the struct by using a unique 
key value taken from the key space. 
Lastly, you validate the entirety of the plaintext against the Luhn algo-
rithm and validate that the second block of plaintext is an 8-byte, numeric 
value ~. If these checks succeed, you can be reasonably sure that you found 
a valid credit card number. You display the card number and the key to 
stdout and call close(done) to signal the other goroutines that you’ve found 
what you’re after.
Writing the Main Function
By this point, you have your producer and consumer functions, both 
equipped to execute with concurrency. Now, let’s tie it all together in your 
main() function (Listing 11-11), which will appear in the same source file as 
the previous listings.
func main() {
    var (
        err        error
        ciphertext []byte
    )
    if ciphertext, err = hex.DecodeString("0986f2cc1ebdc5c2e25d04a136fa1a6b"); err != nil { u
        log.Fatalln(err)
    }
    var prodWg, consWg sync.WaitGroup v
    var min, max, prods = uint64(0x0000000000), uint64(0xffffffffff), uint64(75)
    var step = (max - min) / prods
    done := make(chan struct{})
    work := make(chan *CryptoData, 100)
    if (step * prods)  max {
            end = max
        }
        generate(start, end, work, done, &prodWg) y
        end += step
        start += step
    }
    log.Println("Producers started!")
    log.Println("Starting consumers...")
    for i := 0; i < 30; i++ { z
        decrypt(ciphertext, work, done, &consWg) {
    }
    log.Println("Consumers started!")
    log.Println("Now we wait...")
    prodWg.Wait()|
    close(work)
    consWg.Wait()}
    log.Println("Brute-force complete")
}
Listing 11-11: The RC2 main() function (/ch-11/rc2-brute/main.go)
Your main() function decodes your ciphertext, represented as a hexa-
decimal string u. Next, you create several variables v. First you create 
WaitGroup variables used for tracking both producer and consumer gorou-
tines. You also define several uint64 values for tracking the minimum value 
in a 40-bit key space (0x0000000000), the maximum value in the key space 
(0xffffffffff), and the number of producers you intend to start, in this 
case 75. You use these values to calculate a step or range, which represents 
the number of keys each producer will iterate, since your intent is to dis-
tribute these efforts uniformly across all your producers. You also create 
a *CryptoData work channel and a done signaling channel. You’ll pass these 
around to your producer and consumer functions.
Since you’re doing basic integer math to calculate your step value for 
the producers, there’s a chance that you’ll lose some data if the key space 
size isn’t a multiple of the number of producers you’ll spin up. To account 
for this—and to avoid losing precision while converting to a floating-point 
number for use in a call to math.Ceil()—you check whether the maximum 
key (step * prods) is less than your maximum value for the entire key 
space (0xffffffffff) w. If it is, a handful of values in the key space won’t be 
accounted for. You simply increase your step value to account for this short-
age. You initialize two variables, start and end, to maintain the beginning 
and ending offsets you can use to break apart the key space. 
The math to arrive at your offsets and step size isn’t precise by any 
means, and it could cause your code to search beyond the end of the maxi-
mum allowable key space. However, you fix that within a for loop x used to 
start each of the producers. In the loop, you adjust your ending step value, 
end, should that value fall beyond the maximum allowed key space value. 
前沿信安资讯阵地  公众号：i nf osrc
260   Chapter 11
Each iteration of the loop calls generate() y, your producer function, and 
passes to it the start (start) and end (end) key space offsets for which the 
producer will iterate. You also pass it your work and done channels, as well as 
your producer WaitGroup. After calling the function, you shift your start and 
end variables to account for the next range of key space that will be passed 
to a new producer. This is how you break up your key space into smaller, 
more digestible portions that the program can process concurrently, with-
out overlapping efforts between goroutines.
After your producers are spun up, you use a for loop to create your work-
ers z. In this case, you’re creating 30 of them. For each iteration, you call 
your decrypt() function {, passing to it the ciphertext, the work channel, the 
done channel, and the consumer WaitGroup. This spins up your concurrent 
consumers, which begin to pull and process work as the producers create it.
Iterating through the entire key space takes time. If you don’t handle 
things correctly, the main() function will assuredly exit before you discover 
a key or exhaust key space. So, you need to make sure the producers and 
consumers have adequate time to either iterate the entire key space or 
discover the correct key. This is where your WaitGroups come in. You call 
prodWg.Wait() | to block main() until the producers have completed their 
tasks. Recall that the producers have completed their tasks if they either 
exhaust the key space or explicitly cancel the process via the done channel. 
After this completes, you explicitly close the work channel so the consumers 
won’t deadlock continually while trying to read from it. Finally, you block 
main() again by calling consWg.Wait() } to give adequate time for the consum-
ers in your WaitGroup to complete any remaining work in the work channel.
Running the Program
You’ve completed your program! If you run it, you should see the following 
output: 
$ go run main.go 
2020/07/12 14:27:47 Starting producers...
2020/07/12 14:27:47 Producers started!
2020/07/12 14:27:47 Starting consumers...
2020/07/12 14:27:47 Consumers started!
2020/07/12 14:27:47 Now we wait...
2020/07/12 14:27:48 Card [4532651325506680] found using key [e612d0bbb6]
2020/07/12 14:27:48 Brute-force complete
The program starts the producers and consumers and then waits for 
them to execute. When a card is found, the program displays the cleartext 
card and the key used to decrypt that card. Since we assume this key is the 
magical key for all cards, we interrupt execution prematurely and celebrate 
our success by painting a self-portrait (not shown).
Of course, depending on the key value, brute-forcing on a home com-
puter can take a significant amount of time—think days or even weeks. For 
the preceding sample run, we narrowed the key space to find the key more 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   261
quickly. However, completely exhausting the key space on a 2016 MacBook 
Pro takes approximately seven days. Not too bad for a quick-and-dirty solu-
tion running on a laptop.
Summary
Crypto is an important topic for security practitioners, even though the 
learning curve can be steep. This chapter covered symmetric and asym-
metric crypto, hashing, password handling with bcrypt, message authenti-
cation, mutual authentication, and brute-forcing RC2. In the next chapter, 
we’ll get into the nitty-gritty of attacking Microsoft Windows.
前沿信安资讯阵地  公众号：i nf osrc
前沿信安资讯阵地  公众号：i nf osrc
12
W IN DOW S  S Y S T E M IN T E R AC T ION 
A N D  A N A LY SI S
There are countless ways of developing 
Microsoft Windows attacks—too many to 
cover in this chapter. Instead of discussing 
them all, we’ll introduce and investigate a few 
techniques that can help you attack Windows, whether 
initially or during your post-exploitation adventures. 
After discussing the Microsoft API documentation and some safety 
concerns, we’ll cover three topics. First, we’ll use Go’s core syscall package 
to interact with various system-level Windows APIs by performing a process 
injection. Second, we’ll explore Go’s core package for the Windows Portable 
Executable (PE) format and write a PE file format parser. Third, we’ll dis-
cuss techniques for using C code with native Go code. You’ll need to know 
these applied techniques in order to build a novel Windows attack. 
The Windows API’s OpenProcess() Function
In order to attack Windows, you need to understand the Windows API. Let’s 
explore the Windows API documentation by examining the OpenProcess() 
前沿信安资讯阵地  公众号：i nf osrc
264   Chapter 12
function, used to obtain a handle on a remote process. You can find the 
OpenProcess() documentation at https://docs.microsoft.com/en-us/windows  
/desktop/api/processthreadsapi/nf-processthreadsapi-openprocess/. Figure 12-1 
shows the function’s object property details.
Figure 12-1: The Windows API object structure for OpenProcess()
In this particular instance, we can see that the object looks very similar 
to a struct type in Go. However, the C++ struct field types don’t necessarily 
reconcile with Go types, and Microsoft data types don’t always match Go 
data types. 
The Windows data type definition reference, located at https://docs.microsoft 
.com/en-us/windows/desktop/WinProg/windows-data-types/, can be helpful when 
reconciling a Windows data type with Go’s respective data type. Table 12-1 
covers the type conversion we’ll use in the process injection examples later 
in this chapter. 
Table 12-1: Mapping Windows Data Types to Go Data Types
Windows data Type
Go data type
BOOLEAN
byte 
BOOL
int32
BYTE
byte
DWORD
uint32
DWORD32
uint32
DWORD64
uint64
WORD
uint16
HANDLE
uintptr (unsigned integer pointer)
LPVOID
uintptr
SIZE_T
uintptr
LPCVOID
uintptr
HMODULE
uintptr
LPCSTR
uintptr
LPDWORD
uintptr
前沿信安资讯阵地  公众号：i nf osrc
Windows System Interaction and Analysis   265
The Go documentation defines the uintptr data type as “an integer type 
that is large enough to hold the bit pattern of any pointer.” This is a special 
data type, as you’ll see when we discuss Go’s unsafe package and type con-
versions later in “The unsafe.Pointer and uintptr Types” on page 266. For 
now, let’s finish walking through the Windows API documentation.
Next, you should look at an object’s parameters; the Parameters section 
of the documentation provides details. For example, the first parameter, 
dwDesiredAccess, provides specifics regarding the level of access the process 
handle should possess. After that, the Return Value section defines expected 
values for both a successful and failed system call (Figure 12-2).
Figure 12-2: The definition for the expected return value 
We’ll take advantage of a GetLastError error message when using the syscall 
package in our upcoming example code, although this will deviate from the 
standard error handling (such as if err != nil syntax) ever so slightly. 
Our last section of the Windows API document, Requirements, pro-
vides important details, as shown in Figure 12-3. The last line defines the 
dynamic link library (DLL), which contains exportable functions (such as 
OpenProcess()) and will be necessary when we build out our Windows DLL 
module’s variable declarations. Said another way, we cannot call the rel-
evant Windows API function from Go without knowing the appropriate 
Windows DLL module. This will become clearer as we progress into our 
upcoming process injection example. 
Figure 12-3: The Requirements section defines the library required to call the API.
前沿信安资讯阵地  公众号：i nf osrc
266   Chapter 12
The unsafe.Pointer and uintptr Types
In dealing with the Go syscall package, we’ll most certainly need to step 
around Go’s type-safety protections. The reason is that we’ll need, for 
example, to establish shared memory structures and perform type conver-
sions between Go and C. This section provides the groundwork you need 
in order to manipulate memory, but you should also explore Go’s official 
documentation further.
We’ll bypass Go’s safety precautions by using Go’s unsafe package (men-
tioned in Chapter 9), which contains operations that step around the type 
safety of Go programs. Go has laid out four fundamental guidelines to 
help us out:
•
A pointer value of any type can be converted to an unsafe.Pointer.
•
An unsafe.Pointer can be converted to a pointer value of any type.
•
A uintptr can be converted to an unsafe.Pointer.
•
An unsafe.Pointer can be converted to a uintptr.
W A R N I N G 
Keep in mind that packages that import the unsafe package may not be portable, and 
that although Go typically ensures Go version 1 compatibility, using the unsafe pack-
age breaks all guarantees of this.
The uintptr type allows you to perform type conversion or arithmetic 
between native safe types, among other uses. Although uintptr is an integer 
type, it’s used extensively to represent a memory address. When used with 
type-safe pointers, Go’s native garbage collector will maintain relevant ref-
erences at runtime.
However, the situation changes when unsafe.Pointer is introduced. Recall 
that uintptr is essentially just an unsigned integer. If a pointer value is created 
using unsafe.Pointer and then assigned to uintptr, there’s no guarantee that 
Go’s garbage collector will maintain the integrity of the referenced memory 
location’s value. Figure 12-4 helps to further describe the issue.
Go safe pointer
Go unsafe pointer
Memory
0x945000
Memory
reclaimed
0x945000
unintptr
unintptr
0x945000
Figure 12-4: A potentially dangerous pointer 
when using uintptr and unsafe.Pointer
前沿信安资讯阵地  公众号：i nf osrc
Windows System Interaction and Analysis   267
The top half of the image depicts uintptr with a reference value to a Go 
type-safe pointer. As such, it will maintain its reference at runtime, along 
with austere garbage collection. The lower half of the image demonstrates 
that uintptr, although it references an unsafe.Pointer type, can be garbage 
collected, considering Go doesn’t preserve nor manage pointers to arbitrary 
data types. Listing 12-1 represents the issue. 
func state() {
var onload = createEvents("onload") u
    var receive = createEvents("receive") v
    var success = createEvents("success") w
    mapEvents := make(map[string]interface{})
    mapEvents["messageOnload"] = unsafe.Pointer(onload)
    mapEvents["messageReceive"] = unsafe.Pointer(receive) x
    mapEvents["messageSuccess"] = uintptr(unsafe.Pointer(success)) y
    //This line is safe – retains orginal value
    fmt.Println(*(*string)(mapEvents["messageReceive"].(unsafe.Pointer))) z