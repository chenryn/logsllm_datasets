}tcache_perthread_struct;
初始化的管理指针：
static_thread tcache_perthread_struct *tcache=NULL;
其中TCACHE_MAX_BINS默认值为64，堆空间起始部分都会有
一块先于用户申请分配的堆空间，大小为0x250。
2.tcache的管理函数
tcache的两个重要的管理函数为tcache_get(）和tcache_put()，分
别用于获取tcache和释放tcache，代码具体如下。
获取tcache的代码如下：
staticvoid*
tcache_get(size_ttc_idx)
tcache_entry*e=tcache->entries[tc_idx];
assert（tc_idxentries[tc_idx]>0);
tcache->entries[tc_idx]=e->next;
--(tcache->counts[tc_idx]);
return（void*)e;
}
释放tcache的代码如下：
---
## Page 463
CTF特训营：技术详解、解题方法与
13.1.5 tcache
463/1144
staticvoid
tcache_put(mchunkptr chunk,size_t tc_idx)
tcache_entry*e=（tcache_entry*)chunk2mem（chunk)
assert(tc_idxnext=tcache->entries[tc_idx];
tcache->entries[tc_idx]=e;
++(tcache->counts[tc_idx]);
tcache的主要作用是提高堆的使用效率，上述两个函数会在堆函
数_int_free和_libc_malloc的开头被调用，对于tcache，需要了解如
下几个关键点。
1）tcache的管理是单链表，采用LIFO原则。
2）tcache的管理结构存在于堆中，默认有64个entry，每个entry
最多存放7个chunk。
3）tcache的next指针指向chunk的数据区（与fastbin不同，fast
bin指向chunk头）。
4）tcache的某个entry被占满以后，符合该entry大小的chunk被
free后的规则和原有机制相同（未使用tcache时）。
对于tcache的利用，大多较为简单，因为没有太多的安全检查机
---
## Page 464
CTF特训营：技术详解、解题方法与
13.1.5 tcache
464/1144
制。需要注意的是，在libc2.29之后，加入了对tcache的doublefree的
检测，管理结构代码如下：
typedef struct tcache_entry
struct tcache_entry*next;
/*Thisfieldexists todetect double frees.*
structtcache_perthread_struct*key;
}tcache_entry;
每次释放时都会检查该chunk是否已经存放在tcache中，代码如
下：
if(_glibc_unlikely (e->key == tcache)
tcache_entry*tmp;
LIBC_PROBE(memory_tcache_double_free,2,e,tc_idx);
for(tmp = tcache->entries[tc_idx];
:dun
tmp = tmp->next)
（==du）！
malloc_printerr(free():double free detected in tcache 2");
I*If wegethere,it wasa coincidence.Wevewasteda
few cycles,but don't abort.*/
一般来说，可以参考原有的堆利用方式利用tcache，由于大部分
都是通过变异而来的，因此具体利用方式在此不再赘述。往年经典例
题如下：
---
## Page 465
CTF特训营：技术详解、解题方法与
13.1.5 tcache
465/1144
1)2018-hitcon-babytache。
2)2018-hitcon-chridrentache。
3)2018-bctf-houseofatum。
---
## Page 466
CTF特训营：技术详解、解题方法与.
13.2漏洞类型
466/1144
13.2漏洞类型
关于堆的漏洞及其利用方法有很多，随着对glibc的修补，很多以
前的方法很难继续使用，如PhantasmalPhantasmagoria发表的文章
"TheMallocMaleficarum-GlibcMallocExploitationTechniques"中的
TheHouseofPrime、TheHouseofMind、TheHouseofLore等，在
这里仅是介绍目前能用的一些方法，其他可以作为扩展自行了解。
1.最基本的堆漏洞
最基本的堆漏洞主要是指由于对堆内容的类型判断不明而形成的
错误引用。现在的比赛中很少（几儿乎不会）直接出现这类向题，大部
分需要将复杂的堆问题转化成这种情况。基本堆漏洞对于理解堆的使
用很有帮助。
通常情况下，可以使用堆块来存储复杂的结构体，其中可能会包
括函数指针、变量、数组等成员。如果一个结构体的数据按照其他结
构体格式来解析，那么只要在特定的域布置好数据，就会导致漏洞的
发生。示意如图13-4所示。
结合图13-4可知，如果struct_A类型的对象解析成了struct_B，那
---
## Page 467
CTF特训营：技术详解、解题方法与
13.2漏洞类型
467/1144
么存储在content中的数据就会被解析成info、func_ptr、data_ptr、
address。而func_ptr是函数指针，如果发生调用，那么控制流就会被
输入的数据劫持，转向所构造的content里面的地址中。而data_ptr是
数据指针，如果发生对该数据指针的访问，若能够读取，就能发送信
息泄露，如果能够写入，就能实现数据的改写。
struct_A
struct_B
sign
func_ptr
→func(..)
name
count
info
func_ptr
→func(...)
data_ptr
content
buff
Jppe
图13-4结构体混淆示意图
2.堆缓冲区溢出
（1）常规堆溢出
堆缓冲区溢出与栈缓冲区溢出类似，是指在堆上的缓冲区被填入
---
## Page 468
CTF特训营：技术详解、解题方法与，
13.2漏洞类型
468/1144
了过多的数据，超出了边界，导致堆中原有的数据被覆盖。通常可分
为两种情况，具体如下。
1）覆盖本堆块内部数据，通常是发生在结构体中，如果结构体
中的数组溢出，则覆盖后续变量。
2）覆盖后续堆块数据，这不仅影响了后续堆块中的数据，也破
坏了堆块的结构。
这两种情况都有相应的利用方式。这两种情况的示意分别如图
13-5和图13-6所示。
---
## Page 469
CTF特训营：技术详解、解题方法与
13.2漏洞类型
469/1144
heapchunkinfo
heapchunkinfo
buff
val_1
val_2
val_3
图13-5堆块内部溢出覆盖情况
---
## Page 470
CTF特训营：技术详解、解题方法与
13.2漏洞类型
470/1144
Chunk1
heapchunkinfo
Chunk1
heapchunkinfo
buffA
BUffA
valA_1
valA_2
valA_3
Chunk2-
heap chunk info
Chunk2—
infoB
infoB
valB_1
valB
valB2
ralBl2
vaB_3
图13-6堆块间溢出覆盖情况
对于第一种情况，可类比最基本的堆漏洞来看，或者对照栈缓冲
区溢出的利用方式，没有太多技巧性的知识，可能需要根据程序逻辑
来进行构造。
对于第二种情况，如果是根据覆盖后续堆块中的数据部分来利用
的，那么与第一种情况类似；如果是根据破坏了后续堆块的堆结构信
息来利用的，那么可根据13.3节中介绍的方法来进行利用
(2)OffBy One
---
## Page 471
CTF特训营：技术详解、解题方法与
13.2漏洞类型
471/1144
在堆缓冲区溢出中，有一种比较特殊的情况，只能溢出1学节
称为OffByOne。在CTF赛题中，这种情况通常多位于堆块末尾，溢
比较难利用，但其相关的构造技巧已经成为一种固定的套路，具体请
参见13.3.2节中unlink的利用方式。
3.UseAfterFree
UseAfterFree（UAF）即释放后使用漏洞。若堆指针在释放后
未被置空，形成悬挂指针（也称野指针），当下次访问该指针时，依
然能够访问到原指针所指向的堆内容，就会形成漏洞。通常，UAF漏
洞的利用需要根据真体情况来进行分析，以判断其是否真有信息泄露
和信息修改的功能
4.DoubleFree
DoubleFree漏洞主要是指对指针存在多次释放的情况，是UAF
中较为特殊的一种，针对的是用于释放的函数。多次释放能够使堆块
发生重叠，前后申请的块可能会指向同一块内存，这种情况下，可
将其转换为最基本的堆问题。另外，还可以构造特殊的堆结构，从而
运用针对堆结构的利用方法
---
## Page 472
CTF特训营：技术详解、解题方法与
13.3.1最基本的堆利用
472/1144
13.3利用方法
13.3.1
最基本的堆利用
最基本的堆利用，主要是针对堆的最基本的漏洞及部分缓冲区覆
盖的情况进行利用，不涉及堆结构的利用方法。对于堆缓冲区覆盖变
量的情况，与栈类似，只需要逻辑判断就能识别出来，在此不再赘述
这里主要针对类型转换来进行说明。
示例代码如下：
#include
void target_func()
{
printf("Hacked\n");
void show info A（char *info）
printf("%s\n", info);
struct struct_A
int type;
int size;
char A_info[0x20];
void(*show_info_ptr)(char *);
struct struct_B
int type;
---
## Page 473
CTF特训营：技术详解、解题方法与
13.3.1最基本的堆利用
473/1144
int size;
char B_info[0x40];
void show_info(void *data,int type)
printf(in show_info:%d\n", type);
if (type == 0)
printf(*in 0n");
structstructA*structA_ptr=（structstruct A*)data;
struct_A_ptr->show_info_ptr(struct_A_ptr->A_info);
else if (type == 1)
print(in 1\n");
structstruct B*struct B_ptr=（struct structB*)data;
printf（"%s\n"，struct B_ptr->B_info);
intmain()
struct struct_A*var_a;
struct struct B*varb;
var_a =malloc(sizeof(struct struct_A));
var_a->type=0;
strcpy(var_a->A_info,"A_info");
var_a->show_info_ptr=show_info_A;
var_a->size=strlen(var_a->A_info);
varb=malloc(sizeof（struct struct B)）)）:
scanf("%d",&var_b->type);
getchar();
gets(var_b->B_info);
var_b->size=strlen(var_b->B_info);
show_info(var_a,var_a->type);
show_info(var_b,var_b->type);
在上述示例中，打印函数voidshow_info（void*datainttype），
可根据类型来打印不同的结构体，而结构体structstructB所定义的
---
## Page 474
CTF特训营：技术详解、解题方法与
13.3.1最基本的堆利用
474/1144
对象是输入的，所以可以将其类型输入成1，这样就可以在show_info
函数中产生错误的类型识别。对比structstruct_A和structstruct_B
可以发现structstructA中的show_info_ptr函数指针正好落在struct
struct_B的B_info成员数组里面。如果在B_info数组成员中布置好数据
就可以按照所布置的函数执行相应的功能，通过反汇编，进而发现
targetfunc的地址为0x400716，如图13-7所示。
0000000000400716:
400716:55
push
rbp
400717:4889e5
mov
%rsp,rbp
40071a:bf24094000
mov
$0x400924,%edi
40071f:e8 6cfe ff ff
400590
400724:5d
pop
9rbp
400725:c3
retq
图13-7函数地址
所以只需要在Binfo中填入'a*0x20+x16lx07\x40x00x00V
x00x00x00'即可。
程序编译命令：
gcc -o type_trans type_trans.c
输入命令：
---
## Page 475
CTF特训营：技术详解、解题方法与
13.3.1最基本的堆利用
475/1144
python-c"print0in+a*0x20+1x16ix07x40x00lx00lx00x00x00"|/type_trans
结果如图13-8所示。可见已经执行了target_func函数。更多内容
可参考相关真题解析。
in
show info:0
in
A_info
in
show info:0
in
Hacked
图13-8
劫持控制流成功截图
---
## Page 476
CTF特训营：技术详解、解题方法与
13.3.2 unlink
476/1144
13.3.2
unlink
目前新式的unlink（也是现有系统所采用的方式）中加入了很多
限制，其源码如下：
#define unlink(P,BK,FD){
FD =P->fd;
BK=P->bk;
if(builtin_expect（FD->bkI=PBK->fdI=P,O）)
malloc_printerr（check_action,“corrupted double-linked list",P);
else{
FD->bk=BK;
BK->fd=FD;
if (lin_smallbin_range(P->size)
&&_builtin_expect（P->fd_nextsize=NULL,O））{
assert(P->fd_nextsize->bk_nextsize ==P);
assert(P->bk_nextsize->fd_nextsize==P);
if(FD->fd_nextsize==NULL){
if（P->fd_nextsize==P）
FD->fd_nextsize=FD->bk_nextsize=FD;
else{
FD->fd nextsize=P->fd_nextsize;
FD->bk_nextsize =P->bk_nextsize;
P->fd_nextsize->bk_nextsize=FD;
P->bk_nextsize->fd_nextsize=FD;
，
}else{