title:MarkUs: Drop-in use-after-free prevention for low-level languages
author:Sam Ainsworth and
Timothy M. Jones
2020 IEEE Symposium on Security and Privacy
MarkUs: Drop-in use-after-free prevention for
low-level languages
Sam Ainsworth, Timothy M. Jones
University of Cambridge, UK
{sam.ainsworth, timothy.jones}@cl.cam.ac.uk
Abstract—Use-after-free vulnerabilities have plagued software
written in low-level languages, such as C and C++, becoming
one of the most frequent classes of exploited software bugs.
Attackers identify code paths where data is manually freed by
the programmer, but later incorrectly reused, and take advantage
by reallocating the data to themselves. They then alter the data
behind the program’s back, using the erroneous reuse to gain
control of the application and, potentially, the system. While a
variety of techniques have been developed to deal with these
vulnerabilities, they often have unacceptably high performance
or memory overheads, especially in the worst case.
We have designed MarkUs, a memory allocator that prevents
this form of attack at low overhead, sufﬁcient for deployment
in real software, even under allocation- and memory-intensive
scenarios. We prevent use-after-free attacks by quarantining data
freed by the programmer and forbidding its reallocation until
we are sure that there are no dangling pointers targeting it. To
identify these we traverse live-objects accessible from registers
and memory, marking those we encounter, to check whether
quarantined data is accessible from any currently allocated
location. Unlike garbage collection, which is unsafe in C and
C++, MarkUs ensures safety by only freeing data that is both
quarantined by the programmer and has no identiﬁable dan-
gling pointers. The information provided by the programmer’s
allocations and frees further allows us to optimise the process
by freeing physical addresses early for large objects, specialising
analysis for small objects, and only performing marking when
sufﬁcient data is in quarantine. Using MarkUs, we reduce the
overheads of temporal safety in low-level languages to 1.1× on
average for SPEC CPU2006, with a maximum slowdown of only
2×, vastly improving upon the state-of-the-art.
I. INTRODUCTION
The lack of temporal safety in low-level languages, such as
C and C++, has become a critical cause of insecurity in
modern systems. Large, security-critical applications, such as
web browsers [1], [2] and operating system kernels [3], are
increasingly plagued with use-after-free vulnerabilities. Here,
data is mistakenly freed by a process, reallocated, and altered
by an attacker with control of data input, then incorrectly
reused by the process. These allow the attacker to alter control
ﬂow, and potentially gain kernel-level access.
A variety of techniques have been proposed to mitigate
use-after-free vulnerabilities in C and C++. For example,
all pointer locations can be logged and then nulliﬁed when
their data is freed [1], [4], [5], objects allocated with their
own page-table entries [6], [7], or probabilistic reuse delays
employed [8]–[10]. However, these tend to exhibit both high
average- and worst-case overheads in terms of performance
and memory utilisation, or have limited coverage.
We take a different approach with MarkUs, by storing
programmer-freed object locations in quarantine until we can
demonstrate that no dangling pointers exist to them. We do
this by performing a live-object traversal of accessible memory
regions, similar to but much more efﬁcient than the behaviour
of a garbage collector [11], to mark accessible heap objects.
Since only objects freed by the programmer can be reallocated,
language safety is maintained, and since objects with dangling
pointers cannot be reallocated, programmer frees do not need
to be relied on for security. This allows use-after-free attack
prevention at
low overhead even in complex cases, while
maintaining compatibility with real-world applications.
We can use the information provided by the programmer’s
untrusted manual frees to reduce the cost of the live-object
traversal. We can reallocate the physical pages used by large
objects as soon as they are freed, using the unmapped virtual
addresses as protection, to reduce the frequency of marking
procedures without increasing memory utilisation. In addition,
because we know the amount of memory we can potentially
reclaim from a marking process, we can eliminate needless
memory traversals, reduce marking frequency by only attempt-
ing to reclaim objects when enough can be freed, and, further,
trade off memory usage for performance.
MarkUs gives performance overhead and memory usage that
is low enough for real-world use, for all applications written
in low-level languages. For example, for SPEC CPU2006, we
achieve an average slowdown of just 1.1× (2× worst case),
with average memory overhead of 1.15× (2× worse case),
both of which are lower than any other competing technique.
Our main contributions are as follows:
• The realisation that free() can be treated as a hint for
reallocating memory but the actual reallocation can be
decoupled for security.
• Use of a marking procedure to verify programmer deal-
locations and permit reallocation.
• Use of a quarantine list to store programmer-freed data
until it has been veriﬁed as safe to reallocate.
• Page-table optimisations to immediately free physical
address space for large deallocations, while still ensuring
high performance for small deallocations.
• Optimisations using knowledge of the volume of data
freed, to vastly reduce marking-procedure overheads, and
trade off memory and performance overhead.
• Evaluation on a variety of real-world and allocation-
intensive workloads, including multithreaded setups and
comparison against state-of-the-art techniques.
© 2020, Sam Ainsworth. Under license to IEEE.
DOI 10.1109/SP40000.2020.00058
578
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:23 UTC from IEEE Xplore.  Restrictions apply. 
1 Object x = new Object();
2 delete(x);
3 ...
4 // x’s vtable replaced by the attacker, who is
5 // reallocated x’s address space with y.
6 Object y = new Object(user_input);
7 ...
8 // Control diverted to attacker’s pointer, in
9 // the place of the original delete function.
10 delete(x);
Fig. 1: An example use-after-free attack, in C++. The attacker
is allocated data that is still pointed to by x, and can manipulate
the data to redirect the old pointer to a chosen function rather
than the original object’s delete call.
(a) In an object’s ﬁrst deletion, the call to delete is correctly looked
up in the vtable of the object.
(b) Once the programmer has deleted the object, the space it contains
is free to be reallocated. However, in this case the pointer still points
to the deleted object, and so can still be derefenced and used.
(c) As the memory object has been freed, this allows the attacker to
reallocate it and store their own data in the same location, overwriting
the vtable with their own data. A subsequent, incorrect, call to delete,
which often exists due to programmer bugs, via the now-dangling
pointer will then be redirected to the attacker’s choice of code,
allowing them to hijack the application.
Fig. 2: The example use-after-free attack shown in ﬁgure 1,
in terms of allocated data.
II. BACKGROUND
Here we describe use-after-free attacks, and solutions in
higher-level languages, before presenting our threat model.
A. Use-After-Free Attacks
In a use-after-free attack [12], an object is freed prematurely
before being incorrectly reused via a dangling pointer. By
this point an attacker may have changed its contents to
point to their own data, by forcing the allocator to reallocate
to the attacker the region targeted by the dangling pointer.
Example code is given in ﬁgure 1, and the associated memory
behavior is shown in ﬁgure 2. This is a particularly damaging
vulnerability due to its common occurrence in large codebases,
and high level of exploitability. For example, as of 2013 it was
the most widespread memory vulnerability in Chromium [1].
Operating-system kernels and browsers are particularly af-
fected by use-after-free attacks [2], [3], as high-value targets
written in manually memory-managed languages.
This is a memory-safety violation: in C/C++, the use of
freed memory, or memory accessed outside the bounds of data
structures, is considered undeﬁned behavior. Speciﬁcally, use-
after-free attacks come under the category of temporal-safety
violations, where something is accessed after a point where
it is no longer allowed. This contrasts with spatial violations,
such as buffer overﬂows [13].
An attacker can utilise control over the data stored in
a still-accessible object in various ways. Particularly useful
methods include double-delete attacks, where a C++-style
delete virtual function pointer is overwritten by an attacker
before an incorrect second free, or, more generally, a function
pointer is overwritten in an object before it is incorrectly called
after a free. This allows attackers to divert the program to their
own choice of code within a process’s address space.
B. Garbage Collection
Garbage collection [14] solves the problem for high-level
languages (at least excluding their own runtimes, typically
written in lower-level languages), in that data is only freed
when no pointers to it are available. This means dangling
pointers do not exist, and so use-after-free attacks cannot
occur. Still, often a performance hit is observed, and as such
safe techniques for manual deallocation have been added even
in languages where garbage collection is safe [15].
In C and C++ the picture is somewhat more complex. In
most runtimes on most architectures we cannot distinguish
pointers from other data, and indeed the two can be converted
between each other. This means we are limited to conservative
garbage collection [11], where we must assume all data may
be a pointer, creating the chance of accidental references.
This is reasonable for small objects, as the chance of a given
object being coincidentally pointed to is vanishingly small,
and the cost of each failed free is very low. However, larger
objects cause issues, as the probability of a false mark and the
memory-usage cost of this both increase. Some conservative
garbage collectors [16] offer the ability to manually free
objects to prevent such leaks, in addition to automatically
attempting to clear objects by garbage collection, but this
opens up the potential for use-after-free attacks.
Another problem for garbage collection in C and C++ is that
it is not typically safe. Pointers can be hidden with arbitrary
arithmetic, such as in XOR lists, meaning that data that should
be live is incorrectly deleted [17]. Compiler optimisations
can also hide pointers [18], which means that many high-
performance applications do not run correctly in the presence
of a garbage collector.
MarkUs is not a garbage collector, and does not use garbage
collection. Still, the marking procedure of a typical garbage
collector performs the same live-object traversal necessary to
detect dangling pointers to quarantined objects, allowing us
to implement similar code to verify whether the manual frees
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:23 UTC from IEEE Xplore.  Restrictions apply. 
579
to add the memory object
Within MarkUs, calls to deallocate or free data are replaced
with a call
to an intermediate
structure, the quarantine list, shown in ﬁgure 3. Objects are
kept here until known to be safe to reallocate, at which point
they are moved to the allocator’s free lists. To identify this,
we traverse all live objects, marking those we ﬁnd; those
on the quarantine list that are unmarked at the end do not
have dangling pointers pointing to them. This means that only
programmer-freed data audited by this marking procedure is
actually freed, achieving safety with respect to the original
implementation at the same time as security from use-after-
free attacks. Large allocations can be reused before a marking
procedure, by unmapping virtual pages and allowing the
operating system to reallocate the physical. We can also reduce
overheads by using the information from the programmer’s
manual free calls to control frequency of marking procedures,
and to trade off performance overhead for memory utilisation.
A. Quarantine List
To prevent use-after-free attacks, we must ensure that there are
no pointers to a given freed object before we can allow it to
be reallocated. By manually freeing an object, a programmer
claims it is safe to free and reallocate. MarkUs decouples these
two, allowing the programmer to free the object and claim
it is safe, but delaying reallocation until this is validated. To
achieve this, rather than immediately placing a manually freed
object on a free list, we quarantine it until we can verify the
programmer is correct, placing it instead on a quarantine list.
Only objects on this quarantine list are allowed to be
deleted. This is necessary to conserve safety within C and
C++, and prevent accidental deletion of data pointed to by
hidden pointers as a result of, for example, XOR pointers or
compiler optimisations [17], [18]. This means that, despite our
mark-based technique, MarkUs deliberately does not attempt
to prevent memory-leaks by the programmer. It is purely a
technique to improve the security aspect of an application.
The quarantine list itself is not inherently trusted. Instead,
it is used as a guide to what the programmer believes should
be freeable, for safety rather than security. It is then up to
MarkUs to audit the list to see if it agrees, before an object is
truly freed and made available for new allocations.
B. Identifying Live Objects
Periodically, we search for objects on the quarantine list that
can or cannot be freed, by traversing all live objects and
marking those we encounter, starting with those visible from
registers, the BSS and data segments, and the stack, then
transitively any heap objects pointed to by this set. Such
objects, and their pointers, are recursively walked using a
graph traversal, with any word treated as a pointer if it
appears to point within the heap’s bounds. An example is
shown in ﬁgure 3. This is similar to a mark procedure from a
garbage collector, and we use the Boehm-Demers-Weiser [16]
implementation.
Marking an object on the quarantine list is not necessarily
indicative of a bug. This is because of both conservatism, in
Fig. 3: Memory objects freed by the programmer are placed
on a quarantine list. This is periodically checked by a marking
procedure, where the stack, data, bss, and registers are walked
to ﬁnd accessible heap pointers, and any data transitively ac-
cessible from those pointers. MarkUs can deallocate unmarked
objects that are already on the quarantine list whereas other,
marked, objects must remain on the quarantine list for security.
In this example, D remains on the quarantine list because
it is accessible transitively through a pointer starting on the
stack. Solid lines show application pointers, dotted lines show
MarkUs pointers to objects on the quarantine list.
of the programmer are yet inaccessible. This means that we
can ﬁnd dangling pointers while still ensuring that only data
the programmer has actually freed can be deleted, resulting
in correct program behavior even in the presence of hidden
pointers. Further, information from the programmer’s frees
can be used to optimise the process, by unmapping physical
pages early, and only performing a marking procedure when
sufﬁcient manual frees are ready to be vetted.
C. Threat Model
We assume that programs execute in the presence of an at-
tacker able to allocate memory, for example through carefully
constructed inputs, and who can force the program to read
freed data. This attacker wishes to gain further control over
the program, for example by redirecting control-ﬂow.
Like other papers on use-after-free mitigation [1], [7], we
only look at heap use-after-free, rather than stack, as the heap
attack is both the most difﬁcult to protect against and by far
the most commonly exploited [19]. This is because attacks
based on data freed on the stack can be handled with static
checks, such as escape analysis [7].
III. MARKUS
MarkUs is a memory allocator designed to prevent security
violations from use-after-free attacks, intended for production
scenarios where preventing their use is more important than
detecting their existence. It delays the reuse of programmer-
freed memory objects until certain that there are no dangling
pointers that target the freed range. It is designed primarily for
C and C++, but is suitable for any languages that allocate using
malloc and free, or new and delete, which it replaces with
its own implementation. The MarkUs library can be used in
applications either by directly calling the replacment functions
and linking against the library, or by dynamically replacing
these functions at runtime.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:23 UTC from IEEE Xplore.  Restrictions apply. 
580
that data values may coincidentally point to objects on the
heap, and the existence of a pointer not necessarily indicating
its future use. This is one reason why MarkUs, and, more
generally, any other runtime technique, cannot detect all use-
after-free occurrences within programs, though it does prevent
their use for security violations. Conversely, an object that is
not on the quarantine list and isn’t marked cannot be freed, to
preserve safety under pointer-hiding [17], [18].
This marking procedure can be performed in parallel [16],
and there is no need to stop execution of the program during
it (see section III-H). Indeed, the constraints here are looser
than a traditional garbage collector, as safety is ensured by
the quarantine list preventing deallocation of any data not
speciﬁed by the programmer. This means the guarantees of
the marker need only prevent any race condition in the marker
from causing exploitable security vulnerabilities.
Further, this step need not be performed by a traditional
marker, which transitively follows pointers to ﬁnd those which
are accessible. While that is necessary in a true garbage collec-
tor to avoid circular references in deallocatable objects, with
manual freeing this could be avoided by zeroing out objects
when they are added to the quarantine list. This means that,
potentially, a sweep of the entire stack, heap, registers, and
BSS segment is sufﬁcient, and more cache-friendly. Though
the performance overheads are potentially higher, we use a
traditional mark in our implementation, to reuse more of the
Boehm-Demers-Weiser garbage collector [16].
C. Quarantine-List Walk
Following a marking procedure, a garbage collector would
sweep the heap looking for free objects. However, for MarkUs
this is not a safe underapproximation of what is truly freeable,
due to hidden pointers, and is unnecessary, as we already have
a list of candidates in the quarantine list. Instead of a sweep,
we walk the quarantine list, and free anything that wasn’t
marked in the previous marking procedure. Anything that is
marked is left on the list, as we cannot guarantee it will not be
reused by the current holder of the pointer. Anything that is
not marked is moved to the relevant free list in the allocator,
based on its size, to be reallocated by malloc or new.
D. Mark Frequency Optimisation
Marking is typically the most expensive part of a garbage
collector, and this is also true of MarkUs. This means, to
reduce overheads, we need to mark as infrequently as possible.
One thing that MarkUs can exploit to do this, that a real
garbage collector cannot, is that it knows how much data it
can possibly free, because it knows the size of its manually-
freed quarantine list. We can therefore trade off expected
memory usage for performance, by only allowing garbage
collection when the size of data on the quarantine list exceeds
a proportion of the total current heap size.
More speciﬁcally, we allow marking procedures when
(qlsize −failed frees −usize)∗N > (heap size −unmapped )
where N is a chosen growth bound, which can be controlled
to trade off heap growth compared to an unprotected program
with performance overhead, qlsize (quarantine list size) is the
amount of data currently waiting to be audited (either added
after a previous marking procedure, or from a failed attempt in
a previous round), failed frees is the amount of data that failed
to be deallocated in the previous round, and so is likely to fail
again in the near-term future, and usize (unmapped size) is the
proportion of the quarantine list that is not taking up physical
memory space, as it has been unmapped. Further, heap size is
the total size of the heap allocated to a process, and unmapped
is the proportion of the heap that has been unmapped, and so
does not represent physical memory utilisation.
This does not result in a strict limit on heap growth com-
pared with an unprotected program, and there is no maximum
quarantine size. This is because we may not be able to
free some data due to the presence of dangling pointers or
conservative overestimation of data as pointers. In addition,