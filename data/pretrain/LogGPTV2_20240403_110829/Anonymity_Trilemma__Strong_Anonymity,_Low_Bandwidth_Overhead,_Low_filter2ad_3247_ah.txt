7Since we are mainly interested in the anonymity property, we don’t need
to model the part of the protocol where the protocol parties reconstructs the
keys in case of a failure. But it is easy to extend MDC to include that step
by adding one more round to the current model.
122
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
instead assumes that
function TPi. As part of protocol each party Pi publishes its
public key yi. Additionally, each party Pj receives from Pi
a share of private key xi,j and a share of public key yi,j,
where the keys are shared in a (k, N) threshold manner for a
parameter k ≤ N.
• post: Each player Pi generates a vector of random pads
Wi = {Wi(1), Wi(2), . . . , Wi(N )}8 using xi. ΠDC does not
handle collisions,
the players decide
their positions by a consensus protocol. Similarly our model
assumes that each party Pi knows its position, and assume
the position is qi (but not known to the adversary). Then each
player Pi computes the vector Vi such that Vi(w) = Wi(w)
for all w (cid:11)= i and Vi(w) = Wi(w) ⊕ mi for w = qi, where
mi
is the message of Pi. Also, each player Pi computes
σi = {σi(1), σi(2), . . . , σi(N)}, where σi includes the identity
of player Pi and a proof of valid formatting of Vi. Then Pi
publishes both the vectors Vi and σi. Our model assumes the
pair (Vi(w), σi(w)) for each position w as a single message,
where Vi(w) is a message content and σi(w) becomes a part
of meta ﬁeld. For each position w player Pi generates one
such message, and publishes the message to all other players.
• verify and extract are local computations after a party Pi
receives messages from all other parties.
Although the protocol model assumes that the adversary can
not read the contents of any message, here we shall model
ΠDC along with its cryptographic primitives to demonstrate
the expressiveness of our model. Alternatively, to get rid of
all the cryptographic primitives, the parties can send a dummy
message (= 0) whenever Vi(w) = Wi(w), and the actual
message mi whenever Vi(w) (cid:11)= Wi(w).
As per our anonymity deﬁnition in Section III, we assume
that up to (N−2) users can be compromised, which necessarily
makes up to (N − 2) protocol parties compromised. The
adversary chooses two challenge users, and one of them sends
the challenge message depending on the challenge bit b. All
other (N − 1) users send dummy messages.
In MDC we model ΠDC as a two round protocol. The
challenger sets the initial conﬁguration of the petri-net with the
messages to be sent by each party. In the ﬁrst round, each party
Pi sends two kinds messages: (1) publishes the public key
message yi and (2) sends share of the public-private keypair
(xi,j, yi,j) to Pj for all j (cid:11)= i. Here, one party can publish a
message to (N − 1) other parties by sending (N − 1) separate
messages. In the second round, each party Pi publishes N
messages: one message for each position, only one of them
contains his own message. After second round, every party
receives messages from every other party, and then does local
computations to verify and extract the original messages.
For ΠDC, we do not actually need a separate recipient R
in ΠDC, if we make R = P. But, to be consistent with M,
in MDC we keep a separate recipient. In the second round
whenever a party Pi publishes a message, Pi also sends a
copy to R. This easily models the fact that the adversary knows
8The anonymity game does not include multiple sessions. Also, in our
model all the N players participate in a protocol run.
whenever a message is published, but avoids the complication
of modeling a subset of compromised recipients.
The meta ﬁelds of the tokens contains the following sub-
ﬁelds: (1) stage, (2) position, (3) sigma. stage can have three
possible values identifying three possible cases: (1) public
key distribution, (2) share of the public-private keypair, (3)
message. Using stage subﬁeld, any party in the protocol
recognizes if the message is part of keydist messages, or part
of post messages. When the value of stage is message, the
user posts Vi(w), and position takes the value of w. sigma
includes the identity of the sender and a proof of computation
whenever necessary. sigma ﬁelds helps in the verify stage, we
avoid the details here.
If we want to analyze the user distribution for ΠDC, we do
not count the ﬁrst round since it is used only for key exchange.
Note that, if we get rid of the cryptographic primitives, we do
not require the ﬁrst round.
Modeling Tor. Since Tor does not operate in rounds, em-
bedding it into our model is not straight forward. Suppose, a
Tor node takes at least x milliseconds to process a message
when it receives a message, and it takes at least y milliseconds
for a message to travel from one node to the next node over a
network link. Then we deﬁne one round as x+y milliseconds.
We assume a perfect condition where each node takes exactly
equal computation time for one message, and each link has
exactly same delay. In the real world, delays and computation
times are less stable, but can be estimated by an adversary.
Instead of analyzing this, we instead allow the messages to
remain within the node for the respective time.
Tor nodes and recipients are separate entities and hence, S,
P and R are mutually exclusive. Whenever a Tor node receives
a message, the node immediately processes and forwards that
message to the next node or recipient. We can either model
the latency overhead (cid:4) of Tor by estimating the time messages
spend within the network that exceeds the (minimal) round
length x+y from above, or we set it to the number of hops, i.e.,
(cid:4) = 3. In either case, we assume that (cid:4) does not increase with
η and thus get a latency overhead (cid:4) ∈ O(1). For analyzing Tor
with a variable number h of hops, we can instead set (cid:4) = h.
When a party Pi receives a message, TPi can retrieve the next
hop from the meta ﬁeld of the message. Since Tor does not
add any noise messages, the bandwidth overhead is β = 0.
APPENDIX B
DELAYED PROOFS
Proof of Claim 1. If the set T is empty, then S1−b is empty as
well. However, by construction of our protocol mode, the set
Sb is always non-empty. Consequently, the adversary Apaths
will output b and thus win with probability 1. If T is not
empty, the following cases can occur:
1) The challenge message never passes through an honest
node: In this case, the ﬁeld IDt of the message never changes
for the tokens. Thus, Sb will have exactly one element, and
S1−b will be an empty set, and consequently Apaths wins.
2) The challenge message passes through one or more
honest nodes at times t(cid:2), such that t(cid:2) 
min(T ). Hence,
least one message (noise or
original message) from u1−i which visits the same honest
party together with the challenge message (Πideal ensures that
all messages are always kept together until they are delivered).
there is at
That ensures that in addition to Sb (cid:11)= ∅, we also have S1−b (cid:11)= ∅
and thus Apaths outputs a random bit (and has an advantage
of zero).
Proof of Theorem 2. For
require:
δ(η) = neg(η), and we know that for Πideal we have:
− β(cid:4).
δ(η) ≥ 1− fβ((cid:4)) =
We assume for contradiction that there is a protocol limited
by (cid:4) and β such that 2(cid:4)β  δ(η).
strong anonymity, we
≥ 1− (cid:3)
N−(cid:3)−βN(cid:3)
N−(cid:3)−βN(cid:3)
N−1
(cid:2)
(cid:3)
(cid:2)
(cid:3)
≥
N
N
(η) > δ(η) =⇒ (η) > 1 − (cid:4)
N
(1 − (η))
Nβ≥1
=⇒ 2(cid:4)β > 1 − (η)
− 1
=⇒ (η) > 1 − (cid:4)
N
2
⇐⇒ 2(cid:4) > N (1 − (η))
− β(cid:4)
(cid:14)
The above contradicts the assumption that 2(cid:4)β  (cid:4): δ ≥ 1 −
]
and fβ((cid:4)) to become overwhelming. From Theorem 2 and
2(cid:4)β > 1 − neg(η) is a necessary
Theorem 1, we know that
(cid:6)
condition for fβ((cid:4)) to become overwhelming. Now, we are left
]. This can become overwhelming
] becomes negligible. We know that K > c ≥ (cid:4)
(cid:15)
For δ to become neg(η), we need both [1 − (cid:5)
with the factor [1−(cid:5)
(cid:5)
1 − (c
(cid:2))
(K
(cid:2))
fβ((cid:4)).
(cid:6)
(cid:5)
(cid:6)
(cid:6)
(cid:5)
(cid:6)
K
(cid:3)
K
(cid:3)
/
/
/
c
(cid:3)
c
(cid:3)
c
(cid:3)
K
(cid:3)
(cid:14)
iff [
and K ∈ poly(η). Hence, for some constant x,
(cid:14)
(cid:15)(cid:2)
c − (cid:3)
K − (cid:3)
(cid:14)
c − (cid:3)
⇐⇒
K − (cid:3)
=⇒ c(c − 1) . . . (c − (cid:3))
K(K − 1) . . . (K − (cid:3))
(cid:6)
(cid:7)
(cid:6)
(cid:7) >
⇐⇒
>
c − (cid:3)
K − (cid:3)
(cid:15)(cid:2)
(cid:15)(cid:2)
1
ηx
(cid:14)
>
>
.
1
ηx
>
(cid:15)(cid:2)
(cid:14)
(cid:15)(cid:2)
1
ηx
c
(cid:2)
K
(cid:2)
1
ηx
K
c
K
c
K
c
K
c
(cid:6)
(cid:5)
(cid:5)
(cid:16)
1 − 1/
(cid:3) is non-negligible.
(cid:6)
fβ(c) − fβ((cid:4) − c).