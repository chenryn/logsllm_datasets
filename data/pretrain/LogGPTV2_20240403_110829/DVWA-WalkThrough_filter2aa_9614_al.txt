    $message = htmlspecialchars( $message );
    // Sanitize name input
    $name = str_replace( '', '', $name );
    $name = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $name ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
    // Update database
    $query  = "INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
    //mysql_close();
}
?>
```
**相关函数介绍**
strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签,但允许使用 `` 标签.
addslashes() 函数返回在预定义字符(单引号、双引号、反斜杠、NULL)之前添加反斜杠的字符串.
可以看到,由于对 message 参数使用了 htmlspecialchars 函数进行编码,因此无法再通过 message 参数注入 XSS 代码,但是对于 name 参数,只是简单过滤了 `` 字符串,仍然存在存储型的XSS.
**漏洞利用**
1. 双写绕过
	直接修改前端代码改 name 参数为 `' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
    //mysql_close();
}
?>
```
可以看到,这里使用正则表达式过滤了 `` 标签,但是却忽略了 img、iframe 等其它危险的标签,因此 name 参数依旧存在存储型 XSS.
**漏洞利用**
直接修改前端代码改 name 参数为 `` ,成功弹框
#### Impossible
**服务器端核心代码**
```php
prepare( 'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );' );
    $data->bindParam( ':message', $message, PDO::PARAM_STR );
    $data->bindParam( ':name', $name, PDO::PARAM_STR );
    $data->execute();
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
可以看到,通过使用 htmlspecialchars 函数,解决了 XSS,但是要注意的是,如果 htmlspecialchars 函数使用不当,攻击者就可以通过编码的方式绕过函数进行 XSS 注入,尤其是 DOM 型的 XSS.
---
## CSP_Bypass
CSP 就是浏览器的安全策略,如果标签,或者是服务器中返回 HTTP 头中有 Content-Security-Policy 标签 ,浏览器会根据标签里面的内容,判断哪些资源可以加载或执行.
CSP 相关教程:https://www.ruanyifeng.com/blog/2016/09/csp.html
DVWA 中需求也是很简单的,输入被信任的资源,就能加载或执行资源了.
### Low
**服务器端核心代码**
```php
    You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:
';
```
如果不看源码的话.看检查器(F12),也可以知道一些被信任的网站.
当中的 pastebin 是什么网站呢？一个快速分享文本内容的网站,假如文本的内容是一段 js 代码呢？
源码中提示我们的, 输入 https://pastebin.com/raw/VqHmJKjr
其内容是 `alert(document.cookie)`
那么能如何进行攻击呢? 可以用 CSRF
```html
	/dvwa/vulnerabilities/csp/" id="csp" method="post">
```
### Medium
**服务器端核心代码**
```php
    Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.
';
```
中级的问题在于使用了 'unsafe-inline' 'nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=' 这个标签,
也就是说如果你输入
`` 是能注入成功的.
### High
**服务器端核心代码**
```php
    The page makes a call to ' . DVWA_WEB_PAGE_TO_ROOT . '/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.
    1+2+3+4+5=
';
```
高级就改变了形式了,点击按钮会得到答案,而这个答案是用 JSONP 的方式获得的.(常用于跨越请求)而且 cps 也设置为只信任自己的域名了 `Content-Security-Policy: script-src 'self';`
点击后发请求的逻辑在 vulnerabilities/csp/source/high.js 中
```js
function clickButton() {
    var s = document.createElement("script");
    s.src = "source/jsonp.php?callback=solveSum";
    document.body.appendChild(s);
}
function solveSum(obj) {
    if ("answer" in obj) {
        document.getElementById("answer").innerHTML = obj['answer'];
    }
}
var solve_button = document.getElementById ("solve");
if (solve_button) {
    solve_button.addEventListener("click", function() {
        clickButton();
    });
}
```
先说下这里的逻辑是什么吧.
1. 客户端点击按钮后,会在 html 中创建 `` 这样的标签
2. 因为 script 不同于 ajax,所以可以跨域发送的
3. 服务器就根据 callback 请求,返回 solveSum({"answer":"15"}) , 就可以调用 high.js 中的 solveSum .
但如果有人将 callback 参数改成 `callback=alert(document.cookie)` 呢？
返回的会是 `alert(document.cookie)//({"answer":"15"}) `...
所以这是一个注入点
### Impossible
**服务器端核心代码**
```php
    Unlike the high level, this does a JSONP call but does not use a callback, instead it hardcodes the function to call.The CSP settings only allow external JavaScript on the local server and no inline code.
    1+2+3+4+5=
';
```