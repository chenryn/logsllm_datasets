                out = pageContext.getOut();
                out.write("\n\n\n\n");
                String fileName = WebUtils.getProperty(request, "fileName");
                try {
                    JSONObject resultObject = WorkspaceUtils.readFile(fileName);
                    out.print(resultObject.toString());
                } catch (IOException var19) {
                    throw var19;
                }
            } catch (Throwable var20) {
                if (!(var20 instanceof SkipPageException)) {
                    out = (JspWriter)_jspx_out;
                    if (_jspx_out != null && ((JspWriter)_jspx_out).getBufferSize() != 0) {
                        try {
                            if (response.isCommitted()) {
                                out.flush();
                            } else {
                                out.clearBuffer();
                            }
                        } catch (IOException var18) {
                        }
                    }
                    if (_jspx_page_context == null) {
                        throw new ServletException(var20);
                    }
                    _jspx_page_context.handlePageException(var20);
                }
            } finally {
                _jspxFactory.releasePageContext(_jspx_page_context);
            }
之后我们可以从导入包中看到WorkspaceUtils来自：com.f5.tmui.locallb.handler.workspace.WorkspaceUtils  
所以我们依旧使用JD-GUI来查找，之后找到WorkspaceUtils.readFile()代码如下所示，非常简单，直接读取文件内容并返回，在整个流程中未对读取的fileName的path路径做校验与限制(例如：使用白名单+start.with()来限制目录等方法)，同时为对当前用户进行二次鉴权操作，鉴权只停留在请求处理中，在Servlet处理过程中未做权限检查(这一点在开发中应该值得深思，做权限校验可以加强权限机制，同时在一定程度上规避由于中间件配置不当或解析特性造成的安全问题)  
所以，整个文件读取中，我们无需再次进行权限校验，filename可以任意指定，由于权限校验在之前的请求处理流程中已经被绕过，也就是说我们只要访问到该文件并向其发送一个请求即可实现任意文件读取了，So
Easy~
#### 列目录项
这个漏洞准确的来说应该是"列目录"，只是为了对其规范一下，所以加了一个字，看的顺眼一些，算是"强迫症"吧~  
漏洞文件：tmui1\WEB-INF\classes\org\apache\jsp\tmui\locallb\workspace\directoryList_jsp.class  
文件分析：directoryList_jsp的核心代码如下所示：
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
            HttpSession session = null;
            JspWriter out = null;
            JspWriter _jspx_out = null;
            PageContext _jspx_page_context = null;
            try {
                response.setContentType("text/html");
                PageContext pageContext = _jspxFactory.getPageContext(this, request, response, (String)null, true, 8192, true);
                _jspx_page_context = pageContext;
                ServletContext application = pageContext.getServletContext();
                ServletConfig config = pageContext.getServletConfig();
                session = pageContext.getSession();
                out = pageContext.getOut();
                out.write("\n\n\n\n");
                String directoryPath = WebUtils.getProperty(request, "directoryPath");
                try {
                    JSONObject resultObject = WorkspaceUtils.listDirectory(directoryPath);
                    out.print(resultObject);
                } catch (IOException var19) {
                    throw var19;
                }
            } catch (Throwable var20) {
                if (!(var20 instanceof SkipPageException)) {
                    out = (JspWriter)_jspx_out;
                    if (_jspx_out != null && ((JspWriter)_jspx_out).getBufferSize() != 0) {
                        try {
                            if (response.isCommitted()) {
                                out.flush();
                            } else {
                                out.clearBuffer();
                            }
                        } catch (IOException var18) {
                        }
                    }
                    if (_jspx_page_context == null) {
                        throw new ServletException(var20);
                    }
                    _jspx_page_context.handlePageException(var20);
                }
            } finally {
                _jspxFactory.releasePageContext(_jspx_page_context);
            }
在这里依旧未做二次权限校验，直接获取directoryPath的值，之后将其作为参数传递给WorkspaceUtils.listDirectory进行逻辑处理，并将结果打印显示，我们继续跟进到WorkspaceUtils.listDirectory函数看看：  
可以看到，此处会调用listDirectoryRecursive并以directory以及children作为参数传递，我们跟进去看看，此处通过一个递归来读取显示所有的文件名称，具体逻辑如下所示，点很简单，不再赘述：  
#### 命令执行
文件路径：tmui1\WEB-INF\classes\org\apache\jsp\tmui\locallb\workspace\tmshCmd_jsp.class  
文件内容：tmshCmd_jsp核心操作代码如下所示
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
            HttpSession session = null;
            JspWriter out = null;
            JspWriter _jspx_out = null;
            PageContext _jspx_page_context = null;
            try {
                response.setContentType("text/html");
                PageContext pageContext = _jspxFactory.getPageContext(this, request, response, (String)null, true, 8192, true);
                _jspx_page_context = pageContext;
                ServletContext application = pageContext.getServletContext();
                ServletConfig config = pageContext.getServletConfig();
                session = pageContext.getSession();
                out = pageContext.getOut();
                out.write("\n\n\n\n\n\n");
                F5Logger logger = (F5Logger)F5Logger.getLogger(this.getClass());
                String tmshResult = "";
                String cmd = WebUtils.getProperty(request, "command");
                if (cmd != null && cmd.length() != 0) {
                    JSONObject resultObject = WorkspaceUtils.runTmshCommand(cmd);
                    tmshResult = resultObject.toString();
                } else {
                    logger.error(NLSEngine.getString("ilx.workspace.error.TmshCommandFailed"));
                }
                out.write(10);
                out.write(10);
                out.print(tmshResult);
                out.write(10);
            } catch (Throwable var20) {
                if (!(var20 instanceof SkipPageException)) {
                    out = (JspWriter)_jspx_out;
                    if (_jspx_out != null && ((JspWriter)_jspx_out).getBufferSize() != 0) {
                        try {
                            if (response.isCommitted()) {
                                out.flush();
                            } else {
                                out.clearBuffer();
                            }
                        } catch (IOException var19) {
                        }
                    }
                    if (_jspx_page_context == null) {
                        throw new ServletException(var20);
                    }
                    _jspx_page_context.handlePageException(var20);
                }
            } finally {
                _jspxFactory.releasePageContext(_jspx_page_context);
            }
从上述代码中我们可以看到此处依旧未做二次校验认证，从请求中获取参数command之后赋值给cmd，之后再将cmd作为参数传递给WorkspaceUtils.runTmshCommand：  
下面我们继续跟踪一下WorkspaceUtils.runTmshCommand的处理流程，我们可以看到此处对command的合法性进行了校验，同时对操作类型进行了匹配看是否是create、delete、list、modify，这设计到tmsh命令集，有兴趣了解的可以百度一下，你想要的有很多，同时这里也说明了我们当初在漏洞利用阶段为什么要将bash设置别名为list，而不是直接使用bash来执行命令，回忆一下看看！！！之后我们可以看到我们的command直接通过该调用Syscall.CallExec去执行命令，此时参数为Syscall.callEvelated  
下面我们继续跟踪到callElevated中看看：  
在这里调用当前类的call方法，注意此时传入的第三个参数哦，之后继续跟踪进入call，从下图可以看到，此时首先对要执行的命令的合法性做一个检查()，之后对命令进行匹配以及权限校验，此时的elevated为刚才传进去的"true"，之后创建DataObject对象实例，并通过通过om.queryStats(query)来执行并返回最后的结果，之后返回：  
关于tmsh的更多命令请自行百度~
#### 文件上传
文件路径：tmui1\WEB-INF\classes\org\apache\jsp\tmui\locallb\workspace\fileSave_jsp.class  
文件分析：文件核心代码如下所示
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
            HttpSession session = null;
            JspWriter out = null;
            JspWriter _jspx_out = null;
            PageContext _jspx_page_context = null;
            try {
                response.setContentType("text/html");
                PageContext pageContext = _jspxFactory.getPageContext(this, request, response, (String)null, true, 8192, true);
                _jspx_page_context = pageContext;
                ServletContext application = pageContext.getServletContext();
                ServletConfig config = pageContext.getServletConfig();
                session = pageContext.getSession();
                out = pageContext.getOut();
                out.write(10);
                out.write(10);
                out.write(10);
                String fileName = WebUtils.getProperty(request, "fileName");
                String content = WebUtils.getProperty(request, "content");
                try {
                    WorkspaceUtils.saveFile(fileName, content);
                } catch (IOException var20) {
                    throw var20;
                }
                out.write(10);
            } catch (Throwable var21) {
                if (!(var21 instanceof SkipPageException)) {
                    out = (JspWriter)_jspx_out;