192.168.4.57:/root
\[root@sql57 \~\]# rpm -ivh maxscale-2.1.2-1.rhel.7.x86_64.rpm
#### 1.安装提供服务的软件
maxscale-2.1.2-1.rhel.7.x86_64.rpm
\[root@sql57 \~\]# ls /etc/maxscale.
maxscale.cnf maxscale.cnf.template maxscale.modules.d/
\[root@sql57 \~\]# max #两下tab显示全部命令
maxadmin maxbinlogcheck maxpasswd
maxavrocheck maxkeys maxscale
#### 修改主配置文件
\[root@sql57 \~\]# cp /etc/maxscale.cnf /root/
\[root@sql57 \~\]# vim /etc/maxscale.cnf
9 \[maxscale\]
10 threads=auto #服务运行后开启的线程数量默认为1,auto为根据cpu自动分配
18 \[server1\] #数据库服务器1主库
19 type=server
20 address=192.168.4.51
21 port=3306
22 protocol=MySQLBackend
24 \[server2\] #数据库服务器2从库 复制server1修改
25 type=server
26 address=192.168.4.52
27 port=3306
28 protocol=MySQLBackend
36 \[MySQL Monitor\] #定义监视的数据库
37 type=monitor
38 module=mysqlmon #监视调用的程序
39 servers=server1,server2 #监控的服务器名(本配置文件上方的配置)
40 user=maxmon #server1与server2授权的用户用来监视两个服务
41 passwd=123456 #maxmon密码
42 monitor_interval=10000
53 #\[Read-Only Service\] #定义只读服务器,先不定义全部注释掉
54 #type=service
55 #router=readconnroute
56 #servers=server1
57 #user=myuser
58 #passwd=mypwd
59 #router_options=slave
64 \[Read-Write Service\] #定义读写分离服务器
65 type=service
66 router=readwritesplit
67 servers=server1,server2
68 user=scaluser #路由用户用来检查数据库服务有没有客户机访问的授权用户
69 passwd=123456 #此用户要在两个数据库服务上授权相应权限
70 max_slave_connections=100%
**#路由用户:**客户端使用-uroot
-p123456用户访问数据库,代理用路由用户登录数据库服务器,检查授权表,验证root用户的密码和权限是否符合访问
76 \[MaxAdmin Service\] #定义管理服务不修改
77 type=service
78 router=cli
86 #\[Read-Only Listener\] #定义只读服务的端口,不需要先全注释掉
87 #type=listener
88 #service=Read-Only Service
89 #protocol=MySQLClient
90 #port=4008
92 \[Read-Write Listener\] #定义读写监听的端口号
93 type=listener
94 service=Read-Write Service
#执行读写服务的配置项(本配置上面有此项64行)
95 protocol=MySQLClient
96 port=4006 #监听端口
98 \[MaxAdmin Listener\] #管理端口
99 type=listener
100 service=MaxAdmin Service
101 protocol=maxscaled
102 socket=default
103 port=4016 #手动添加管理端口为:4016默认为端口要启动后才
#### 根据配置文件的定义,创建对应的用户(51/52上)
创建监控用户 :maxmon 密码:123456赋予权限:replication slave, replication
client
mysql\> grant replication slave,replication client on \*.\* to
maxmon@\"%\" identified by \"123456\";
Query OK, 0 rows affected, 1 warning (0.04 sec)
路由用户:scaluser 密码:123456 赋予查询权限select
mysql\> grant select on \*.\* to scaluser@\"%\" identified by
\"123456\";
主服务器51 , 52上查看创建的用户权限,:
mysql\> show grants for maxmon;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Grants for maxmon@% \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| GRANT REPLICATION SLAVE, REPLICATION CLIENT ON \*.\* TO
\'maxmon\'@\'%\' \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> show grants for scaluser;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Grants for scaluser@% \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| GRANT SELECT ON \*.\* TO \'scaluser\'@\'%\' \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
查看用户
mysql\> select host,user from mysql.user where user in
(\"maxmon\",\"scaluser\");
+\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| host \| user \|
+\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| % \| maxmon \|
\| % \| scaluser \|
+\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)
用maxmon 与 scaluser 用户在57上登录
#### 启动服务
\[root@sql57 \~\]# maxscale -f /etc/maxscale.cnf
\[root@sql57 \~\]# ps -C maxscale
PID TTY TIME CMD
3020 ? 00:00:00 maxscale
\[root@sql57 \~\]# netstat -utnlp \| grep maxscale
tcp6 0 0 :::4016 :::\* LISTEN 3020/maxscale
tcp6 0 0 :::4006 :::\* LISTEN 3020/maxscale
#### 5停止服务(kill杀死进程)
\[root@sql57 \~\]# killall -9 maxscale
\[root@sql57 \~\]# ps -C maxscale
PID TTY TIME CMD
\[root@sql57 \~\]# netstat -utnlp \| grep maxscale
#### 6.在本机访问管理服务,查看监控信息
\[root@sql57 \~\]# maxadmin -P4016 -uadmin -pmariadb
MaxScale\> list servers
Servers.
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
Server \| Address \| Port \| Connections \| Status
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
server1 \| 192.168.4.51 \| 3306 \| 0 \| Master, Running
server2 \| 192.168.4.52 \| 3306 \| 0 \| Slave, Running
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#### 7.在主服务器51上创建拥有查询与插入权限的用户
mysql\> grant select,insert on \*.\* to jim@\"%\" identified by
\"123456\";
Query OK, 0 rows affected, 1 warning (0.02 sec)
#### 访问测试
50为客户端 57为代理 51为主服务器 52为从服务器
**主库51**上建立db09库,t1表,插入两条数据,如下
mysql\> select \* from db09.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
+\-\-\-\-\--+
2 rows in set (0.00 sec)
**从库52**上查询有与51上相同库db09库t1b表相同的两条数据
另外.在52上新插入两条数据,主库51不会同步这两条数据,52数据如下
mysql\> select \* from db09.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
+\-\-\-\-\--+
**在客户端50** 上登录访问查看和插入
\[root@client-50 \~\]# mysql -h192.168.4.57 -P4006 -ujim -p123456
mysql\> select \* from db09.t1; #查询出来的是从服务器数据
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
+\-\-\-\-\--+
mysql\> insert into db09.t1 values(55);
Query OK, 1 row affected (0.07 sec)
**客户端50**查询出来的数据如下
mysql\> select \* from db09.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
\| 55 \|
+\-\-\-\-\--+
5 rows in set (0.00 sec)
**主库51**此时查出来的数据可看到,客户端插入的数据
mysql\> select \* from db09.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 55 \|
+\-\-\-\-\--+
**从库52**查出来的数据可看到,从主库同步过来的第5条数据
mysql\> select \* from db09.t1;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 11 \|
\| 22 \|
\| 33 \|
\| 44 \|
\| 55 \|
+\-\-\-\-\--+
# 二MySQL多实例
## 2.1 Mysql多实例介绍
在一台物理机上运行多个数据库服务 作用节约成本 提高硬件利用率
## 2.2配置mysql多实例
### 2.2.1安装包(源码包)
mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
\[root@client-50 \~\]# systemctl stop mysqld.service
\[root@client-50 \~\]# systemctl disable mysqld.service
\[root@client-50 \~\]# tar -xf
mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
\[root@client-50 \~\]# mv mysql-5.7.20-linux-glibc2.12-x86_64
/usr/local/mysql
\[root@client-50 \~\]# ls /usr/local/mysql
bin COPYING docs include lib man README share support-files
复习下源码包的使用和命令
### 2.2.2创建配置文件定义多实例服务
\[root@client-50 \~\]# mv /etc/my.cnf /root/
\[root@client-50 \~\]# vim /etc/my.cnf
\[mysqld_multi\] #定义启动多实例程序
mysqld=/usr/local/mysql/bin/mysqld_safe #定义进程文件路径
mysqladmin=/usr/local/mysql/bin/mysqladmin #指定管理命令路径
user=root #指定进程用户
\[mysqld1\] #第一个实例
datadir=/dir1 #自定义数据库文件目录,需要手动创建
port=3307 #自定义端口号
log-error=/dir1/mysql3307.err #自定义日志文件
pid-file=/dir1/mysql3307.pid #自定义pid号文件
socket=/dir1/mysql3307.sock #自定义socket套接字文件
\[mysqld2\] #第二个实例
datadir=/dir2 #自定义数据库文件目录,需要手动创建
port=3308 #自定义端口号
log-error=/dir2/mysql3308.err #自定义日志文件
pid-file=/dir2/mysql3308.pid #自定义pid号文件
socket=/dir2/mysql3308.sock #自定义socket文件
Socket:文件:套接字文件,自己访问自己的
\[root@sql52 \~\]# ls -l /var/lib/mysql/mysql.sock
srwxrwxrwx. 1 mysql mysql 0 2月 21 08:11 /var/lib/mysql/mysql.sock
运行数据库时会有 /var/lib/mysql/mysql.sock文件,
\[root@client-50 \~\]# mkdir /dir1
\[root@client-50 \~\]# mkdir /dir2
## 2.3使用mysql多实例
如果没有用命令初始化授权库,那么在启动时候将会自动初始化授权库,创建数据
教课案例上有添加变量 , 给数据库目录/dri1 /dir2授属组mysql属主mysql ,
初始化授权库等操作都不用做直接启动数据库.
### 2.3.1启动服务
首次启动,会创建数据库相关文件,并且生成初始密码
\[root@client-50 \~\]# /usr/local/mysql/bin/mysqld_multi start 1
:2019-02-21T06:38:26.943809Z 1 \[Note\] A temporary password is
generated for root@localhost: +lak&lTbh2sc #初始密码
\[root@client-50 \~\]# ls /dir1 #查看数据库目录.确保有sock文件
auto.cnf ibdata1 ib_logfile1 mysql mysql3307.pid mysql3307.sock.lock sys
ib_buffer_pool ib_logfile0 ibtmp1 mysql3307.err mysql3307.sock
performance_schema
\[root@client-50 \~\]# /usr/local/mysql/bin/mysqld_multi start 2
2019-02-21T07:08:03.076294Z 1 \[Note\] A temporary password is generated
for root@localhost: pqMSsswNL8\<l
\[root@client-50 \~\]# ls /dir2