### Certificate and Revocation

The certificate includes a timestamp indicating the point after which the revocation is guaranteed to be present in the log's certificate tree.

### 6.3 Certificate Validation

Before a Multi-Signature Certificate (MSC) can be validated, a client must first read the parameters in the domain’s SCP (Subject Certificate Policy) PA (Policy Authority), which contains the list of trusted CAs (Certificate Authorities) and logs required for the validation process. Recall that policy fields can be inheritable (§5.2) and that a proof for a domain’s policy includes all policies of parent domains from which fields can be inherited (§5.3). Therefore, we can extract from this proof a list `Plist` of the parent domains' SCPs. However, since most fields in an SCP are optional, it is possible that some policy fields will not be specified by any applicable policy. In such cases, the browser will determine a default value for any unspecified parameters, as browsers do today. We call this "default policy" `Pbrowser`.

Once we have the above information, we can determine the appropriate parameters for each TLS connection using Algorithm 1, which returns the set of parameters as a dictionary. The algorithm treats each policy as a dictionary where values corresponding to a key can be accessed as `P[key]`. The dictionary that will eventually be returned starts as `Pbrowser`, which usually contains the least conservative parameter values. These default values are then overwritten by the fields specified in `PA`. Next, for each policy in `Plist`, the client checks whether the fields are inheritable (i.e., the corresponding bit in the SCP’s inheritance mask is set to 1). If so, the inherited value overwrites the current one, but only if the new value is more conservative. For example, if a domain’s policy specifies a high security level for TLS connections, and a parent domain’s policy specifies a medium level that is inheritable, then the parent domain’s security level is not inherited because it could result in a lower security level in the domain’s TLS connections.

**Algorithm 1: Determine appropriate SCP parameters from the SCP hierarchy.**

- **Input:**
  - `PA`: Policy of the domain contacted by the browser.
  - `Plist`: List of policies of parent domains (with respect to `PA`) sorted by level (from the most specific domain name to TLD).
  - `Pbrowser`: Default browser policy.

- **Output:**
  - `d`: Dictionary containing the final set of parameters.

```python
def policyInheritance(PA, Plist):
    d = Pbrowser
    for attr in PA:
        d[attr] = PA[attr]
    for P in Plist:
        for attr in {LOG_LIST, CA_LIST}:
            if P[attr].isInherited:
                d[attr] = d[attr] ∩ P[attr]
        for attr in {CERT_TH, CERT_SEC, TLS_SEC, FAIL_CERT_TH, FAIL_TLS, FAIL_EXP, FAIL_POL, FAIL_*, UP_CA_MIN, UP_CA_TH, UP_COP_UNTRUSTED, UP_COP_UNLINKED}:
            if P[attr].isInherited and d[attr] < P[attr]:
                d[attr] = P[attr]
        for attr in {EV_ONLY, WILDCARD_FORBIDDEN}:
            if P[attr].isInherited and P[attr]:
                d[attr] = P[attr]
    return d
```

Once the policy parameters have been determined, the domain’s MSC must be "pre-validated." The client checks whether the X.509 certificates within the MSC are issued for the correct domain and whether the certificates all authenticate the same public key. The client browser also checks that the version number of the policy obtained from Algorithm 1 matches the version number in the MSC’s policy binding, and that the hash of each certificate appears in the `CERTS` field of the policy binding. The client browser then verifies the signature on the policy binding, which is signed by the domain’s policy private key.

With the pre-validated MSC and SCP parameters, the client browser can then validate the MSC by following Algorithm 2. The most important parameter for this validation is `CERT_TH`, which describes how many standard certificates must be valid in a multi-signature certificate for the MSC to be valid. A certificate is classified as valid and counts toward `CERT_TH` if:
1. Its signature is successfully verified.
2. The private key used to sign the certificate has not already signed another certificate counting towards `CERT_TH`.
3. The certificate meets the constraints set by the SCP parameters.

If `CERT_TH` is met, then the client browser proceeds to validate the log proofs for the MSC.

### 6.4 Log Proof Validation

After a successful SCP or MSC registration, the log returns a registration receipt promising that the certificate or policy will be added to its database within a certain amount of time. This registration receipt can be used as a short-term confirmation that an SCP or MSC is in the log, but log proofs are more commonly used for this purpose. To successfully establish a connection to the domain, the client requires proofs that the policy is registered, as well as proofs that the MSC is registered and not yet revoked.

**Algorithm 2: MSC validation.**

- **Input:**
  - `d`: Dictionary generated by `policyInheritance()` execution.
  - `isLegacyValid()`: Standard validation for a single certificate.
  - `MSCA`: Set of certificates {CertCA1, CertCA2, ..., CertCAN, CertPA}.

- **Output:**
  - Boolean indicating whether the MSC is valid.

```python
def isMSCValid(d, MSCA):
    S = set()
    for CertCAx in MSCA:
        if (CAx in d[CA_LIST] and isLegacyValid(A, CertCAx)) and \
           (not (getPathLen(CertCAx) > d[MAX_PATH_LEN]) or \
            not (getLifetime(CertCAx) > d[MAX_LIFETIME]) or \
            not (CertCAx.isEV and d[EV_ONLY]) or \
            not (CertCAx.isWildcard and d[WILDCARD_FORBIDDEN])):
            continue
        S.add(CAx)
    return len(S) >= d[CERT_TH]
```

While anyone can request such proofs from a log, proofs are often periodically retrieved from the log by the domain and stapled to the MSC and SCP during connection setup. To request a log proof, the domain sends a proof request to the log containing a hash of its MSC. The log uses this hash to locate the appropriate leaf node in its certificate tree and generates a proof of presence or absence (as in Equation 2) for this node. The log also produces a proof of presence for the domain’s policy (following Equation 9), as well as a proof that the policy and certificate trees’ root hashes are the most recent ones recorded in the consistency tree. The log then sends these three proofs along with a signed root hash of the consistency tree to the domain. The domain can pass these proofs and hashes on to the client.

There is also a possibility that the log does not have a proof for an SCP or MSC. It may be the case that the MSC, SCP, or both do not have a corresponding log proof because the log has not yet updated its database to reflect a registration. In this case, a registration receipt from the log suffices as a proof of presence, allowing domains who newly register a certificate and policy to begin serving customers as soon as possible. It may also be the case that the domain has not yet adopted PoliCert. In this case, the client can request a proof of absence for the domain’s SCP from one or more of the log servers. This prevents an adversary from obtaining a bogus certificate for a domain and suppressing the log proofs to make it seem as though the domain has not yet deployed PoliCert. When requesting a proof of absence, the client may want to proxy the request through another log [1] or request several decoy proofs to preserve the privacy of its queries.

### 6.5 Connection Establishment

The client initiates a TLS connection with a domain using Algorithm 3. In the first `ClientHello` message, the client browser sends the latest seen version numbers of the domain’s policy and all parent domain policies it has from previous connections. The domain then sends its multi-signature certificate, subject certificate policy (if the browser does not have the latest version), and the appropriate log proofs or registration receipts showing that the MSC is valid and compliant with appropriate policies. The browser validates the proofs, determines the policy parameters, and validates the domain’s MSC. The browser negotiates the TLS connection with the appropriate security level and, if all other operations are successful, accepts the connection.

**Algorithm 3: TLS connection establishment.**

- **Inputs:**
  - `ClientHello`: Indicates stored policies.
  - `Log`: Proof requests.
  - `A’s Server`: MSC, PA, Plist, proofs.
  - `preValidation(...)`: Pre-validates MSC, policies, and proofs (§6.3).
  - `policyInheritance(...)`: Determines the policy parameters.
  - `isMSCValid(...)`: Validates the MSC.
  - `getSec(...)`: Evaluates the security level of TLS parameters.
  - `f ail(...)`: Fails with the maximum failure scenario (0 - soft fail, 1 - hard fail) and shows all occurred errors to the client.

- **Process:**
  - The client sends a `ClientHello` message indicating stored policies.
  - The server sends the MSC, PA, Plist, and proofs.
  - The client pre-validates the MSC, policies, and proofs.
  - The client determines the policy parameters using `policyInheritance(...)`.
  - The client validates the MSC using `isMSCValid(...)`.
  - The client evaluates the security level of the TLS parameters using `getSec(...)`.
  - The client fails with the appropriate failure scenario using `f ail(...)`.

### 7. Implementation and Evaluation

To evaluate the deployment feasibility and performance of PoliCert, we implemented each of the parties in the architecture. The client-side code, which includes Algorithms 1 and 2 as well as part of Algorithm 3, was implemented by extending the Chromium web browser. We deployed our domain on both Apache and Nginx HTTP servers, which were equipped with special scripts to send proof requests and periodically process responses from the log. The domain sends these proofs to clients during the TLS handshake protocol. Because CAs have a similar role in PoliCert as they currently do, we used standard tools such as OpenSSL to handle CA certificate operations and created multi-signature certificates and policies with several trusted CAs of our making. We used elliptic curve cryptography for our keypairs, with ECDSA [18] as our signature scheme. We selected the elliptic curve secp521r [5, 7] from OpenSSL 1.0.1f, and also used this version for all cryptographic operations. We implemented our log servers in C++ (gcc 4.8.2) using SHA-512 as the hash function for the Merkle-hash trees. Auditors compare the signed root hash value from the logs with those they have stored to detect potential misbehavior.

For our evaluation, we deployed three machines running Linux 3.13.0-24-generic x86_64, representing a log (Intel i5-3210M, 2.50 GHz, 4GB of RAM), a domain/server (Intel i5-3210M, 2.50 GHz, 4GB of RAM), and a client browser (Intel i5-3470, 3.20 GHz, 8GB of RAM). Since the log serves many types of requests, we sent 500 of each type of request (policy registration, policy update, certificate registration, certificate revocation, and proof request) to the log. We show the average, median, minimum, and maximum processing times for each request type in Table 1.

**Table 1: Log’s processing time (in ms) for different requests.**

| Action                  | Avg.  | Median | Min.  | Max.  |
|-------------------------|-------|--------|-------|-------|
| Policy Registration     | 16.33 | 10.02  | 10.75 | 14.52 |
| Policy Update           | 12.58 | 7.35   | 9.37  | 4.90  |
| Certificate Registration| 8.99  | 18.00  | 9.79  | 10.27 |
| Certificate Revocation  | 6.73  | 4.57   | 8.58  | 6.50  |
| Proof Request           | 7.70  | 5.84   | 2.69  | 5.64  |

The synchronization protocol, required for global logs’ coordination in the case of policy registration and update, was realized with a two-phase commit protocol [3], where all messages are signed by participants.

To evaluate the computational effort required by the browser, we executed the browser’s side of verification 500 times. In this scenario, the browser was connecting to `localhost.net` serving an MSC, its own policy, and a policy of `.net`. Each multi-signature certificate consisted of three standard certificates. The total time taken by the browser was divided into several categories as shown in Table 2: pre-validation of MSCs, SCP parameter processing, MSC validation, and log proof validation.

**Table 2: Browser’s processing time (in ms) in details.**

| Action                  | Avg.  | Median | Min.  | Max.  |
|-------------------------|-------|--------|-------|-------|
| MSC Pre-validation      | 1.40  | 0.79   | 0.50  | 1.05  |
| SCP Processing (Alg. 1) | 1.22  | 0.60   | 1.78  | 1.45  |
| MSC Validation (Alg. 2) | 3.34  | 0.78   | 0.49  | 0.59  |
| Proof Validation        | 4.84  | 0.75   | 0.45  | 0.55  |
| Complete Validation     | 3.32  | 0.75   | 0.45  | 1.39  |

The MSC with policies was sent in the `Server Certificate` message of the TLS Handshake, allowing us to deliver the multi-signature certificate and policies without any changes to the browser. The log proofs were sent to the browser via the OCSP Stapling extension [6], saving the client the need to fetch the proofs separately. Since the applicable policies were already sent for SCP processing (Algorithm 1), the SCPs of the domain and its parent domains do not have to be included with the proof. Rather, for better efficiency, the domain can omit this information and instead have the client browser fill in the gaps with the policies, significantly decreasing message overhead.

However, the highest message overhead is due to the structure of MSCs, which contain multiple X.509 certificates for the same key.