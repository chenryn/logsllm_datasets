(d = dm + dh), which follow the protocol truthfully.
During each epoch, there are multiple rounds where users
communicate over the mix network. Both users and mixes
report any misbehavior they encounter to the directory au-
thorities. The directory authorities process these reports,
and, before the beginning of a new epoch, they select a set
of cascades available in that epoch. The newly generated
cascades will reﬂect all reported misbehaviors. Namely, cas-
cades exclude links that were reported, or mixes involved
in too many reports, or detected via Miranda’s community-
based attacker detection mechanisms, described in Section 6.
We denote the number of reports which marks a mix as
dishonest and causes its exclusion from the network as thresh
and emphasize that thresh is cumulative over rounds and
even epochs. In this paper, we simply use thresh = nm + 1,
which sufﬁces to ensure that malicious mixes cannot cause
Miranda to exclude honest mixes. However, we ﬁnd it use-
ful to maintain thresh as a separate value, to allow the use of
larger value for thresh to account for a number of failures of
honest mixes or links between honest mixes, when the Mi-
randa design is adopted by a practical system.
Signiﬁcant, although not prohibitive, processing and com-
munication is involved in the inter-epoch process; this mo-
tivates the use of longer epochs. On the other hand, during
an entire epoch, we use a ﬁxed set of cascades, which may
reduce due to failures; and clients may not be fully aware of
links and mixes detected as faulty. This motivates the use
of shorter epochs. These considerations would be balanced
by the designers of an anonymous communication system,
as they incorporate the Miranda design.
4
Intra-Epoch Process
In this section, we present the mechanisms that operate dur-
ing an epoch to deter active attacks, including dropping at-
tacks. We start by describing how active attacks are detected
and how this deters malicious behavior. Next, we discuss
nodes who refuse to cooperate.
Note that in this section, as in the entire Miranda design,
we assume reliable communication between any pair of hon-
est participants. As we explain in Subsection 2.2, a practical
system deploying Miranda should use a lower-layer protocol
to deal with (even severe) packet losses, and we developed
such efﬁcient protocol - see [5].
4.1 Message Sending
At the beginning of each epoch, clients acquire the list of all
currently available cascades from the directory authorities.
When Alice wants to send a message, her client ﬁlters out
all cascades containing mixes through which she does not
wish to relay messages. We denote the set of cascades se-
lected by Alice as CA. Next, Alice picks a random cascade
from CA, which she uses throughout the whole epoch, and
encapsulates the message into the packet format. For each
mix in the cascade, we include in the routing information
the exact round number during which the mix should receive
the packet and during which it should forward it. Next, the
client sends the encoded packet to the ﬁrst mix on the cas-
cade. In return, the mix sends back a receipt, acknowledging
the received packet.
4.2 Processing of Received Packets
After receiving a packet, the mix decodes a successive layer
of encoding and veriﬁes the validity of the expected round r
and well-formedness of the packet. At the end of the round,
the mix forwards all valid packets to their next hops. Mi-
randa requires mixes to acknowledge received packets by
sending back receipts. A receipt is a digitally signed [31]
1844    28th USENIX Security Symposium
USENIX Association
Client
M1
M2
M3
Client
M1
M2
M3
Directory
Client
M1
M2
M3
Directory
pK
R1
i
i + 1
i + 2
i + 3
pK
R2
pK
pK
R3
i
i + 1
i + 2
i + 3
i + 4
i + 5
pK
R1
pK?
×××
pK
R2
pK?
pK?
A1 : R2
⊥ or A2 :not received
A3 :not received
Report: see A1,A2/A3
pK
R1
pK
Report: M1 disconnecting M2
σ : proof of report
i
i + 1
i + 2
i + 3
i + 4
pK?
pK?
pK?
i + 5
A1 : σ
A2 :not received
A3 :not received
(a) Successful loop packet pk sent during round
i and received during round i + 3. Each mix Mi
sends back receipt Ri.
(b) Example of naive dropping of loop message pk by M2,
which drops pk yet sends back a receipt. Since pk did not
come back the client queries all mixes during round i + 5 for
the proof of forwarding. M2 either claims that it did not
receive pk (A2), thus providing the client a proof that
conﬂicts with the receipt R2, or M2 does not cooperate (⊥).
In both cases the directory authority veriﬁes received Ai’s
and excludes malicious M2.
(c) Loop packet fails to complete the loop due to
non-responding mix. M1 did not receive receipt from M2 on
round i + 2 and issues a disconnection in round i + 3. The
client performs the query phase on round i + 5 and receives the
proof of disconnection. The result: M2 failed to send a receipt
to M1, and thus lost the link to it.
Figure 2: A diagram illustrating loop packets and isolation process. We denote receipt from mix Mi as Ri, and the response as
Ai. Note that both in (b) and (c) the entire query and report phases occur during round i + 5, but it could also be spanned across
several rounds, as long as it has a bounded time-frame. For example, if desired, answering the query for pk could be done in
round i + 6 instead of limiting it to the same round.
statement conﬁrming that a packet p was received by mix
Mi. Receipts must be sent and received by the preceding mix
within the same round in which packet p was sent.
Generating receipts. For simplicity, we denote a receipt for
a single packet p as receipt ← Sign(p || receivedFlag = 1),
where Sign(·) is a secure digital signature algorithm, and
Verify(·) is its matching veriﬁcation function3. However,
generating receipts for each packet individually incurs a high
computational overhead due to costly public key signature
and veriﬁcation operations.
To reduce this overhead, mixes gather all the packets they
received during round r in Merkle trees [37] and sign the
root of the tree once. Clients’ packets are grouped in a single
Merkle tree TC and packets from mix Mi are grouped in a
Merkle tree TMi. Mixes then generate two types of receipts:
(1) receipts for clients and (2) aggregated receipts for mixes.
Each client receives a receipt for each message she sends.
Client receipts are of the form: receipt = (σC,Γp, r), where:
σC is the signed root of TC, Γp is the appropriate informa-
tion needed to verify that packet p appears in TC, and r is
the round number. Similarly, each mix, except the last one,
receives a receipt in response to all the packets it forwarded
in the last round. However, unlike client receipts, mixes ex-
pect back a single aggregated receipt for all the packets they
sent to a speciﬁc mix. An aggregated receipt is in the form
of: receipt = (σi, r), where: σi denotes the signed root of
TMi and r is the round number. Since mixes know which
packets they forwarded to a particular mix, they can recreate
the Merkle tree and verify the correctness of the signed tree
root using a single receipt. Once a mix sent an aggregated
receipt, it expects back a signed conﬁrmation on that aggre-
gated receipt, attesting that it was delivered correctly. Mixes
record the receipts and conﬁrmations to prove later that they
behaved honestly in the mixing operation.
Lack of a receipt. If a mix does not receive an aggregated
receipt or does not receive a signed conﬁrmation on an ag-
gregated receipt it sent within the expected time slot4, the
mix disconnects from the misbehaving mix. The honest mix
detaches from the faulty mix by informing the directory au-
thorities about the disconnection through a signed link dis-
connection receipt. Note, that the directories cannot identify
which of the disconnecting mixes is the faulty one merely
based on this message, because the mix who sent the com-
plaint might be the faulty one trying to discredit the hon-
3Although Sign and Verify use the relevant cryptographic keys, we
abuse notations and for simplicity write them without the keys.
4Recall that we operate in a synchronous setting, where we can bound
the delay of an acknowledgement.
USENIX Association
28th USENIX Security Symposium    1845
est one. Therefore, the directory authorities only disconnect
the link between the two mixes. The idea of disconnecting
links was earlier investigated in various Byzantine agreement
works [23], however, to our knowledge this approach was not
yet applied to the problem of mix network reliability.
Anonymity loves company. Note, however, that this design
may fail even against an attacker who does not control any
mix, if a cascade receives less than the minimal anonymity
set size ω. We could ignore this as a very unlikely event,
however, Miranda ensures anonymity also in this case - when
the ﬁrst mix is honest. Namely, if the ﬁrst mix receives less
than ω messages in a round, it would not forward any of
them and respond with a special ‘under-ω receipt’ explaining
this failure. To prevent potential abuse of this mechanism
by a corrupt ﬁrst mix, which receives over ω messages yet
responds with under-ω receipt, these receipts are shared with
the directories, allowing them to detect such attacks.
4.3 Loop Messages: Detect Stealthy Attacks
In a stealthy active attack, a mix drops a message - yet sends
a receipt as if it forwarded the message. To deter such at-
tacks, clients periodically, yet randomly, send loop messages
to themselves.
In order to construct a loop message, the
sender S, chooses a unique random bit-string KS. Loop mes-
sages are encoded in the same manner as regular messages
and sent through the same cascade C selected for the epoch,
making them indistinguishable from other messages at any
stage of their routing. The loop message is encapsulated into
the packet format as follows:
pK ← Pack(path = C, routingInfo = routing, rnd = H(KS)
recipient = S, message = “loop”)
The tuple (S, KS, C, routing) acts as the opening value, which
allows recomputing pK as well as all its intermediate states
K that mix Mi should receive and emit. Therefore, reveal-
pi
ing the opening value convinces everyone that a particular
packet was indeed a loop message and that its integrity was
preserved throughout its processing by all mixes. Moreover,
the construction of the opening value ensures that only the
creator of the loop packet can provide a valid opening value,
and no third party can forge one. Similarly, nobody can re-
produce an opening value that is valid for a non-loop packet
created by an honest sender.
If a loop message fails to complete the loop back, this
means that one of the cascade’s mixes misbehaved. The
sender S queries all the mixes in the cascade for evidence
whether they have received, processed and forwarded the
loop packet. This allows S to isolate the cascade’s problem-
atic link or misbehaving mix which caused the packet to be
dropped. S then reports the isolated link or mix to the di-
rectory authorities and receives a signed conﬁrmation on her
report. This conﬁrmation states that the link will no longer
be used to construct future cascades. We detail the querying
and isolation process in Section 4.3.2.
4.3.1 When to send loop messages?
The sending of loop messages is determined according to α,
which is the required expected probability of detection - a
parameter to be decided by the system designers. Namely,
for every message, there is a fraction α chance of it being a
loop message. To achieve that, if Alice sends β messages in
round r, then (cid:100) α·β
1−α (cid:101) additional loop messages are sent along-
side the genuine messages.
This may seem to only ensure α in the context of the mes-
sages that Alice sends but not against an attack on messages
sent to Alice. However, notice that if a corrupt mix Mi drops
messages sent to Alice by an honest sender Bob, then Mi
faces the same risk of detection - by Bob.
If Alice can sample and estimate an upper bound γ on
the number of messages that she will receive in a particu-
lar round, then she can apply additional defense. Let x be the
number of rounds that it takes for a loop message to come
back, and let r denote the current round. Let’s assume that
Alice knows bound γ on the maximal number of messages
from honest senders, that she will receive in round r + x.
Then, to detect a mix dropping messages sent to her with
probability α, it sufﬁces for Alice to send (cid:100) α·γ
1−α (cid:101) loop mes-
sages in round r. More precisely, given that Alice sends β
messages in round r, in order for the loop messages to pro-
tect both messages sent in that round and messages received
in round r + x she should send (cid:100) α·max(β ,γ)
(cid:101) loop messages in
round r.
Within-round timing. If the Miranda senders would send
each message immediately after receiving the message from
the application, this may allow a corrupt ﬁrst mix to dis-
tinguish between a loop message and a ‘regular’ message.
Namely, this would occur if the attacker knows the exact time
at which the application calls the ‘send’ function of Miranda
to send the message. To foil this threat, in Miranda, mes-
sages are always sent only during the round following their
receipt from the application, and after being shufﬂed with all
the other messages to be sent during this round.
1−α
4.3.2
Isolating corrupt mixes with loop messages
Since clients are both the generators and recipients of the
attack-detecting loop messages, they know exactly during
which round r the loop should arrive back. Therefore, if a
loop message fails to complete the loop back to the sender
as expected, the client initiates an isolation process, during
which it detects and isolates the speciﬁc problematic node
or link in the cascade. The isolation process starts with the
client querying each of the mixes on the cascade to estab-
lish whether they received and correctly forwarded the loop
packet. During the querying phase, the client ﬁrst reveals
to the respective mixes the packet’s opening value, in order
1846    28th USENIX Security Symposium
USENIX Association
to prove that it was indeed a loop packet. Next, the client
queries the mixes for the receipts they received after they de-
livered that packet. When clients detect a problematic link or
the misbehaving mix, they report it to the directory author-
ities, along with the necessary proofs that support its claim.
This is in fact a broadcasting task in the context of the well-
known reliable broadcast problem and can be solved accord-
ingly [36]. Each directory authority that receives the report
veriﬁes its validity, and if it is correct, stores the informa-
tion to be used in future cascade generation processes. Then,