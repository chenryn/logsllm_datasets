# Title: Discovering Semantic Data of Interest from Un-mappable Memory with Confidence

## Authors:
- Zhiqiang Lin, University of Texas at Dallas
- Junghwan Rhee, NEC Laboratories America
- Chao Wu, Purdue University
- Xiangyu Zhang, Purdue University
- Dongyan Xu, Purdue University

## Abstract
DIMSUM (Discovering InforMation with Semantics from Un-mappable Memory) is a novel approach for identifying instances of specific data structures in memory, even in the absence of memory mapping information. This paper outlines the problem, existing state-of-the-art methods, and the innovative probabilistic inference model used by DIMSUM to achieve more accurate results.

## 1. Introduction
### The Problem: Memory Forensics
Given a set of memory pages and a data structure of interest (e.g., contact, cookie, chat history), the goal is to identify instances of that data structure in the memory. The challenge is compounded by the lack of memory mapping information, such as page tables.

### Observation
Memory forensics often encounters "dead pages" left by terminated processes, which can contain valuable data.

## 2. State of the Art
Current approaches include:
- **Value Invariant-Based Approaches:**
  - Klist [Rutkowska, 2003]
  - GREPEXEC [bugcheck, 2006]
  - Volatility [Walters, 2006; Schuster, 2006]
  - Robust signatures [Dolan-Gavitt et al., CCS’09]

- **Pointer Navigation-Based Approaches:**
  - KOP [Carbone et al., CCS’09]
  - CRASH [USENIX’05]
  - SigGraph [Lin et al., NDSS’11]

## 3. Use of Memory Mapping Information
Memory mapping information, such as page tables, is typically used to translate virtual addresses to physical addresses. For example, given a virtual address `0x08048008`, the page table translates it to a physical address.

## 4. DIMSUM Overview
DIMSUM uses a probabilistic inference model to discover semantic data from un-mappable memory. The process involves:
1. **Primitive Pointer Analysis**
2. **Probabilistic Inference**
3. **Structural Constraints**
4. **Semantic Constraints**
5. **Same-Page (SP) Constraints**

### Structural Constraint
For a data structure like `struct passwd`:
```c
struct passwd {
    char *pw_name;     // Offset 00
    char *pw_passwd;   // Offset 04
    __uid_t pw_uid;    // Offset 08
    __gid_t pw_gid;    // Offset 12
    char *pw_gecos;    // Offset 16
    char *pw_dir;      // Offset 20
    char *pw_shell;    // Offset 24
}
```
The structural constraint ensures that the pointers and integer values are correctly positioned and valid.

### Semantic Constraint
In addition to structural constraints, semantic constraints ensure that the values make sense. For example, `pw_uid` and `pw_gid` should be non-negative.

### Same-Page (SP) Constraint
This constraint ensures that all pointers within the same structure point to the same memory page. For example, in `struct passwd`, all string pointers should point to the same page.

## 5. Probabilistic Inference Model
The probabilistic inference model combines the above constraints to determine the likelihood that a given memory region contains an instance of the data structure of interest.

## 6. Evaluation Results
### Linux-based Applications
| Data Structure | % of Memory Pages | True Instances | SigGraph+ FP% | SigGraph+ FN% | DIMSUM FP% | DIMSUM FN% |
|----------------|-------------------|----------------|---------------|---------------|------------|------------|
| Login record (last) | 100.0 | 8 | 0.0 | 0.0 | 0.0 | 0.0 |
| Browser cookies (chromium) | 66.7 | 6 | 69.5 | 48.5 | 0.0 | 0.0 |
| Address book (pine-4.64) | 33.3 | 124 | 66.1 | 38.8 | 0.0 | 0.0 |
| Contact list (pidgin) | 100.0 | 300 | 79.1 | 22.8 | 0.0 | 0.0 |

### Android 2.1 Applications
| Data Structure | % of Memory Pages | True Instances | SigGraph+ FP% | SigGraph+ FN% | DIMSUM FP% | DIMSUM FN% |
|----------------|-------------------|----------------|---------------|---------------|------------|------------|
| Cookie (Browser) | 100.0 | 31 | 77.0 | 16.7 | 0.0 | 0.0 |
| Phone Contact (Messaging) | 66.7 | 25 | 75.5 | 4.3 | 0.0 | 0.0 |
| Message Conversation (Messaging) | 33.3 | 6 | 85.8 | 3.8 | 0.0 | 0.0 |

## 7. Case Study: Login Record `utmp` in `last`
The `utmp` structure is used to store login records. DIMSUM successfully identifies these records even in the absence of memory mapping information.

## 8. Related Work
- **ColdBoot** [Halderman et al., USENIX Security’08]
- **Laika** [Cozzie et al., OSDI’08]
- **DEC0DE** [Walls et al., USENIX Security’11]

## 9. Conclusion
DIMSUM effectively recognizes data structure instances from memory pages without relying on memory mapping information. By using a probabilistic inference model and solving constraints related to type, structural, and semantic properties, DIMSUM achieves higher accuracy compared to non-probabilistic approaches.

Thank you.