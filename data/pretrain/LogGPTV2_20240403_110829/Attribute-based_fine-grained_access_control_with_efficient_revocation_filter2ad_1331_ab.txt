that, we describe our attribute revocation method for CP-ABE.
3.1 Overview of Challenges and Our Solutions
To achieve ﬁne-grained access control, the owner ﬁrst divides the
data into several components according to the logic granularities
and encrypts each data component with different content keys by
using symmetric encryption techniques. Then, the owner applies
our proposed CP-ABE method to encrypt each content key, such
that only the user whose attributes satisfy the access structure in
the ciphertext can decrypt the content keys. Users with different
attributes can decrypt different number of content keys and thus
obtain different granularities of information from the same data.
To solve the attribute revocation problem, we assign a version
number for each attribute. When an attribute revocation happens,
only those components associated with the revoked attribute in se-
cret keys and ciphertexts need to be updated, instead of all the com-
ponents in the secret keys and ciphertexts. When an attribute is re-
voked from a user, the authority generates a new version key for
this revoked attribute and generate an update key for it. With the
update key, all the users, except the revoked user, who hold the re-
voked attributes can update its secret key (Backward Security). By
using the update key, the components associated with the revoked
attribute in the ciphertext can also be updated to the current version.
To improve the efﬁciency, we delegate the workload of ciphertext
update to the server by using the proxy re-encryption method, such
that the newly joined user is also able to decrypt the previous pub-
lished data, which are encrypted with the previous public keys (For-
ward Security). Moreover, all the users need to hold only the latest
secret key, rather than keep records on all the previous secret keys.
3.2 Construction of Our Scheme
Let G and GT be the multiplicative groups with the same prime
order p and e : G × G → GT be the bilinear map. Let g be the
generator of G. Let H : {0,1}∗ → G be a hash function such that
the security will be modeled in the random oracle.
The construction of our access control scheme consists of four
phases: System Initialization, Key Generation by Authority, Data
Encryption by Owners and Data Decryption by Users.
Phase 1: System Initialization
The authority initializes the system by running the Setup al-
It randomly chooses α,β ,γ,a ∈ Zp as the master key
gorithm.
MK = (α,β ,γ,a). Then, it generates the public parameters PP as
PP = ( g, ga, g1/β , gβ , e(g,g)α )
For each attribute x, the authority generates a random number
vx ∈ Zp as the initial attribute version number V Kx = vx and then
Figure 2: Data Format on Cloud Server
applies it to generate a public attribute key PKx as
PKx = ( PK1,x = H(x)vx , PK2,x = H(x)vxγ ).
All the public parameters PP and the public attribute keys {PKx}
are published on the public bulletin board of the authority, such that
all the owners in the system can freely get them.
Phase 2: Secret Key Generation for Users
When a user joins the system, the authority ﬁrst assigns a set
of attributes S to this user according to its role or identity in the
system. Then, the authority generates the secret key SK for this
user by running the key generation algorithm SKeyGen. It takes
as inputs the master key MK, a set of attributes S that describes
the secret key, and the corresponding set of attribute version keys
{V Kx}x∈S. It then chooses a random number t ∈ Zp and generates
the user’s secret key as
β · g
at
β ,L = gt ,∀x ∈ S : Kx = gtβ 2 · H(x)vxtβ ).
The authority then sends SK to the user via a secure channel.
Phase 3: Data Encryption by Owners
SK = ( K = g
α
Before hosting the data M to the cloud servers, the owner pro-
cesses the data as follows. 1) It ﬁrst divides the data into several
data components as M = {m1,··· ,mn} according to the logic gran-
ularities. For example, the person record data may be divided into
{name, address, security number, employer, salary}; 2) It encrypts
each data component mi with different content keys ki(i = 1,··· ,n)
by using the symmetric encryption techniques; 3) For each content
key ki(i = 1,··· ,n), the owner deﬁnes the access structure M over
the universe of attributes S and then encrypts ki under this access
structure by running the encryption algorithm Encrypt.
The encryption algorithm Encrypt(PP,{PKx},k, (M,ρ)) → CT
can be constructed as follows. It takes as inputs the public param-
eters PP, a set of public attribute key {PKx}, a content key k and
a LSSS access structure (M,ρ). Let M be a l × n matrix, where
l denotes the total number of all the attributes. The function ρ
associates rows of M to attributes. It ﬁrst chooses a random en-
cryption exponent s ∈ Zp and a random vector (cid:126)v = (s,y2,··· ,yn) ∈
p, where y2,··· ,yn are used to share the encryption exponent s.
Zn
For i = 1 to l, it computes λi = (cid:126)v · Mi, where Mi is the vector
corresponding to the i-th row of M. Then, it randomly chooses
r1,r2,··· ,rl ∈ Zp and computes the ciphertext as
CT = ( C = ke(g,g)αs, C(cid:48) = gβ s, Ci = gaλi (gβ )−riH(ρ(i))−rivρ(i) ,
β (i = 1,··· ,l) ).
The owner then uploads the encrypted data to the server in the
D1,i = H(ρ(i))vρ(i)riγ , D2,i = g
ri
format as described in Figure 2.
Phase 4: Data Decryption by Users
Upon receiving the data from the server, the user runs the de-
cryption algorithm Decrypt to obtain the corresponding content
keys and use them to further decrypt data components. Only the
attributes that the user possesses satisfy the access structure deﬁned
in the ciphertext CT , the user can decrypt the content key and then
use it to decrypt the data component. Because different users may
have different attributes, they are able to decrypt different number
of data components, such that they can get different granularities of
information from the same data.
(cid:1829)(cid:1846)(cid:2869) (cid:1831)(cid:3012)(cid:3117)(cid:4666)(cid:1865)(cid:2869)(cid:4667) (cid:1710) (cid:1710) (cid:1829)(cid:1846)(cid:3041) (cid:1831)(cid:3012)(cid:3289)(cid:4666)(cid:1865)(cid:3041)(cid:4667) 525The decryption algorithm Decrypt(CT,SK) → m is constructed
as follows. It takes as inputs a ciphertext CT attached with the ac-
cess structure (M,ρ) and the secret key for a set of attributes S.
Suppose that the user’s attribute set S satisﬁes the access structure
and let I ⊂ {1,2,··· ,l} be deﬁned as I = {i : ρ(i) ∈ S}. Then, it
chooses a set of constants {wi ∈ Zp}i∈I and reconstructs the en-
cryption exponent as s = ∑i∈I wiλi if {λi} are valid shares of the
secret s according to M. The decryption algorithm ﬁrst computes
e(C(cid:48),K)
∏i∈I(e(Ci,L)e(D2,i,Kρ(i)))wi
= e(g,g)αs.
(1)
It can then decrypt the content key as k = C/e(g,g)αs. The user
then uses the content keys to further decrypt the data.
3.3 Efﬁcient Attribute Revocation for CP-ABE
When a user is leaving the system, the user should not be able
to decrypt any data stored on the server. Thus, the access right of
this user should be revoked, which is called the User Revocation.
Another scenario is that a user is degraded in the system, some
attributes should be removed from the previous set of attributes it
possesses, which is called the Attribute Revocation.
In order to satisfy the requirements of attribute revocation, our
revocation method includes three phases: Update Key Generation
by Authority, Secret Key Update for non-revoked Users and Cipher-
text Update by Cloud Server. Suppose an attribute x(cid:48) is revoked
from a user µ. The attribute x(cid:48) is denoted as the Revoked Attribute
and the user µ is denoted as the Revoked User. We also use the
term of Non-revoked Users to denote the set of users who possess
the revoked attribute x(cid:48) but has not been revoked.
Phase 1: Update Key Generation by Authority
When there is an attribute revocation, the authority runs the up-
date key generation algorithm UKeyGen(MK,V Kx(cid:48) )→ ((cid:102)V Kx(cid:48) ,UKx(cid:48) ).
It takes the master key MK and the current version key V Kx(cid:48) of
sion key (cid:102)V Kx(cid:48) by randomly choosing a number ˜vx(cid:48) ∈ Zp( ˜vx(cid:48)
the revoked attribute x(cid:48) as inputs. It generates a new attribute ver-
(cid:54)= vx(cid:48) ).
Then, the authority computes the update key as
vx(cid:48) − ˜vx(cid:48)
vx(cid:48)γ
).
˜vx(cid:48)
vx(cid:48)
, UK2,x(cid:48) =
UKx(cid:48) = ( UK1,x(cid:48) =
It outputs a new version key (cid:102)V Kx(cid:48) of the attribute x(cid:48) and an up-
date key UKx(cid:48) that can be used for updating the secret keys of non-
revoked users and the ciphertexts that are associated with the re-
voked attribute x(cid:48). Then, the authority sends the update key UKx(cid:48)
to all the non-revoked users (for secret key updating) and the cloud
server (for ciphertext updating) via secure channels.
attribute x(cid:48) as (cid:102)PKx(cid:48) = ( (cid:102)PK1,x(cid:48) = H(x(cid:48)) ˜vx(cid:48) , (cid:102)PK2,x(cid:48) = H(x(cid:48)) ˜vx(cid:48) γ ).
The authority also updates the public attribute key of the revoked
After that, the authority broadcasts a message to all the owners that
the public attribute key of the revoked attribute x(cid:48) is updated. Then,
all the owners can obtain the new public attribute key of the revoked
attribute from the public bulletin board of the authority.
Phase 2: Secret Key Update for Non-revoked Users
Each non-revoked user submits two components L = gt and Kx(cid:48)
of the secret key SK to the authority. Upon receiving these compo-
nents, the authority runs the SKUpdate to compute a new compo-
nent ˜Kx(cid:48) associated with the revoked attribute x(cid:48) as
˜Kx(cid:48) = (Kx(cid:48) /Lβ 2
)UK1,x(cid:48) · Lβ 2
= gtβ 2 · H(x(cid:48)) ˜vx(cid:48)tβ .
Then, it returns the new component ˜Kx(cid:48) to the non-revoked user.
The user’s secret key is updated by replacing the component Kx(cid:48)
associated with the revoked attribute x(cid:48) with the new one ˜Kx(cid:48):
(cid:102)SK = ( K, L, ˜Kx(cid:48) , ∀x ∈ S\{x(cid:48)} : Kx ).
Note that only the component associated with the revoked at-
tribute x(cid:48) in the secret key needs to be updated, while all the other
components are kept unchanged.
Phase 3: Ciphertext Update by Cloud Server
To ensure that the newly joined user who has sufﬁcient attributes
can still decrypt those previous data which are published before it
joined the system, all the ciphertexts associated with the revoked
attribute are required to be updated to the latest version. Intuitively,
the ciphertext update should be done by data owners, which will in-
cur a heavy overhead on the data owner. To improve the efﬁciency,
we move the workload of ciphertext update from data owners to
the cloud server, such that it can eliminate the huge communica-
tion overhead between data owners and cloud server, and the heavy
computation cost on data owners. The ciphertext update is con-
ducted by using proxy re-encryption method, which means that the
server does not need to decrypt the ciphertext before updating.
Upon receiving the update key UKx from the authority. The
UKx(cid:48) ) → (cid:102)CT to update the ciphertext associated with the revoked
cloud server runs the ciphertext update algorithm CTUpdate(CT,
attribute x(cid:48). It takes as inputs the ciphertext CT and the update key
UKx(cid:48). It updates the ciphertext associated with x(cid:48) as
(cid:102)CT = ( ˜C = C, ˜C(cid:48) = C(cid:48), ∀i = 1 to l :
˜D2,i = D2,i,
i f ρ(i) (cid:54)= x(cid:48) :
i f ρ(i) = x(cid:48) :
˜Ci = Ci, ˜D1,i = D1,i,
˜Ci = Ci · (D1,i)UK2,x(cid:48) , ˜D1,i = (D1,i)UK1,x(cid:48) )
It is obvious that our scheme only requires to update those compo-
nents associated with the revoked attribute in the ciphertext, while
the other components are not changed. In this way, our scheme can
greatly improve the efﬁciency of attribute revocation.
The ciphertext update can not only guarantee the forward secu-
rity of the attribute revocation, but also can reduce the storage over-
head on the users (i.e., all the users need to hold only the latest se-
cret key, rather than to keep records on all the previous secret keys).
The cloud server in our system is required to be semi-trusted. Even
when the cloud server is not semi-trusted in some circumstance,
which means that the server will not update the ciphertexts cor-
rectly. The forward security cannot be guaranteed, but our system
can still achieve the backward security (i.e., the revoked user can-
not decrypt the new published ciphertexts encrypted with the new
public attribute keys).
4. ANALYSIS OF OUR PROPOSED ACCESS
CONTROL SCHEME
4.1 Security Analysis
We conclude the security analysis as the following Theorems:
THEOREM 1. When the decisional q-parallel BDHE assump-
tion holds, no polynomial time adversary can selectively break our
system with a challenge matrix of size l∗ × n∗, where n∗ ≤ q.
PROOF. Suppose we have an adversary A with non-negligible
advantage ε = AdvA in the selective security game against our con-
struction and suppose it chooses a challenge matrix M∗ with the
dimension at most q columns. Under the constraint that none of the
updated secret keys (cid:102)SK (generated by both the queried secret keys
SKs and update keys UKs) can decrypt the challenge ciphertext, we
can build a simulator B that plays the decisional q-parallel BDHE
problem with non-negligible advantage. The detailed proof will be
shown in the full version of our work.
THEOREM 2. Our proposed access control scheme is secure
against the unauthorized access.