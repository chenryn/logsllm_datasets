### 4.42
### 5.40
### 13.65
### 17.63
### (b)
**Table 1:**
- **(a)** Running time of the forward algorithm versus the number of mixed roles with \( |R| = 32 \).
- **(b)** Running time of the forward algorithm versus the number of roles with 5 mixed roles.

| Goal Size | Nodes | Transitions | Time (sec) |
|-----------|-------|-------------|------------|
| 1         | 30    | 125         | 0.01       |
| 2         | 377   | 3022        | 0.14       |
| 3         | 2128  | 23744       | 2.59       |
| 4         | 14395 | 215396      | 97.95      |

| Number of Roles | Nodes | Transitions | Time (sec) |
|-----------------|-------|-------------|------------|
| 100             | 78    | 360         | 0.02       |
| 200             | 124   | 539         | 0.03       |
| 300             | 242   | 1095        | 0.10       |
| 400             | 329   | 1459        | 0.13       |
| 500             | 401   | 1789        | 0.25       |

### Table 2: Performance of the backward algorithm
- **(a)** Varying goal size.
- **(b)** Varying number of roles with \( \frac{|Irrev|}{|R|} = 0.05 \) and \( |goal| = 1 \).

The analysis cost grows very slowly as a function of the number of roles (and rules), when the percentage of irrevocable roles and the goal size are held constant at 5% and 1, respectively.

The reduction technique for the backward algorithm reduces the state space and the running time of policies used in Table 2(a) by 24% and 19%, on average, respectively. It does not affect the state space and running time of policies used in Table 2(b).

### Forward Algorithm with Slicing vs. Backward Algorithm
We applied the forward algorithm with slicing to the same policies used for the experiments reported in Table 2(a). The average execution times were:
- 0.04 sec when \( |goal| = 1 \)
- 0.38 sec when \( |goal| = 2 \)
- 0.87 sec when \( |goal| = 3 \)
- 1.08 sec when \( |goal| = 4 \)

Observe that the average execution time for the forward algorithm increases slightly with \( |goal| \), while the corresponding increase in the execution time for the backward algorithm is much more significant.

Note that slicing does not change the worst-case complexity of the forward algorithm. When \( |goal| = 1 \) and \( |Irrev| \leq 1 \), the backward algorithm has better time complexity than the forward algorithm, except when \( |NR| = 0 \) and both algorithms have similar (polynomial) complexity.

For a set of randomly-generated policies with \( |goal| = 1 \), \( |Irrev| = 2 \), \( |R| = 50 \), and \( |NR| \) varying between 0.6\( |R| \) and 0.9\( |R| \), the backward algorithm is 11 to 30 times faster than the forward algorithm. We observe that when \( |goal| \) and \( |Irrev| \) are small and fixed, the backward algorithm is superior to the forward algorithm in terms of analysis time and the size of the explored state space.

### 9. Related Work

#### Policy Analysis
We classify related work on security policy analysis into three categories:

1. **Analysis (including enforcement) of a fixed security policy:**
   - Some representative papers include [15, 2, 11, 16, 10, 13].
   - This category is less closely related to our work, so we do not discuss it further.

2. **Analysis of a single change to a fixed policy or, similarly, analysis of the differences between two fixed policies:**
   - Jha and Reps present algorithms to analyze the effects of a specified change to an SPKI/SDSI policy [16].
   - Fisler et al. [8] give algorithms to compute the semantic difference of two XACML policies and check properties of the difference.
   - Work in this category differs significantly from our work by not considering the effect of sequences of changes to the policy.

3. **Analysis that considers sequences of changes to a policy; the allowed changes are determined by parts of the policy called "administrative policy":**
   - Harrison, Ruzzo, and Ullman [12] present an access control model based on access matrices, which can express administrative policy, and show that the safety analysis problem is undecidable for that model.
   - Following this, several access control models were designed in which safety analysis is more tractable, e.g., [22, 24].
   - While those models were designed mainly with tractability in mind, we aim to provide more practical results by starting with a more realistic model based on ARBAC97 [25] and identifying properties of typical policies that can be exploited for efficient analysis. Our framework allows features not considered in those papers, such as negative preconditions.

**ARBAC Policies:**
- Schaad and Moffett [29] use the Alloy analyzer [14] to check separation of duty properties for ARBAC97. They do not consider preconditions for any operations, which simplifies the analysis problem. Since they leave the analysis to the Alloy analyzer, they do not present analysis algorithms or complexity results.
- Li and Tripunitara [20] give algorithms and complexity results for various analysis problems—primarily safety, availability, and containment—for two restricted versions of ARBAC97, called AATU and AAR. Their results are based on Li, Mitchell, and Winsborough’s results for analysis of trust management policies [19]. Our work goes significantly beyond their analyses for both AATU and AAR by allowing negative preconditions and thereby SMER (static mutually exclusive roles) constraints. This forces us to consider other (more realistic) restrictions, such as bounds on the size of preconditions, and to use fixed-parameter tractability to characterize the complexity of our algorithms. In addition, our work in Section 5 goes significantly beyond their analysis for AAR by dropping the separate administration restriction.
- Sistla and Zhou [30], like [19], consider trust management policies changing in accordance with role restrictions that indicate, for each role, whether arbitrary rules defining that role may be added, and whether they may be removed. The administrative policies we consider are finer-grained than such role restrictions.
- Sasturkar et al. [27] present algorithms and complexity results for analysis of ARBAC policies subject to a variety of restrictions. Our work goes beyond theirs by providing efficient algorithms for larger and more realistic classes of policies, providing fixed-parameter tractability results to more accurately characterize the complexity of those algorithms, and giving analysis algorithms that do not rely on the separate administration restriction, which is implicitly adopted throughout their paper. Also, they do not consider containment analysis.

**Case Studies:**
- Our ARBAC policy for a university contains significantly more can_assign rules than the ARBAC policies presented in [25, 28, 23, 29, 17, 5, 27, 20, 18], which typically contain about 4 administrative roles and the equivalent of 4 to 7 can_assign rules. Some papers, such as [28, 17], sketch the general structure of RBAC and ARBAC policies of very large organizations, but only a few specific administrative roles and rules are presented in the paper (or otherwise made publicly available), and no analysis algorithms were applied to those policies. We analyzed our ARBAC policy for a university. The policy contains 11 administrative roles, 21 other roles, 28 can_assign rules (106 rules after the transformation to eliminate role hierarchy), etc.

### 10. References
[1] American National Standards Institute (ANSI), International Committee for Information Technology Standards (INCITS). Role-based access control. ANSI INCITS Standard 359-2004, Feb. 2004.
[2] A. K. Bandara, E. C. Lupu, and A. Russo. Using event calculus to formalize policy specification and analysis. In Proc. 4th IEEE Workshop on Policies for Distributed Systems and Networks (Policy 2003), 2003.
[3] M. Y. Becker. Cassandra: Flexible Trust Management and its Application to Electronic Health Records. PhD thesis, University of Cambridge, Oct. 2005.
[4] E. M. Clarke, Jr., O. Grumberg, and D. A. Peled. Model Checking. MIT Press, 1999.
[5] J. Crampton. Understanding and developing role-based administrative models. In Proc. 12th ACM Conference on Computer and Communications Security (CCS), pages 158–167. ACM Press, 2005.
[6] R. G. Downey and M. R. Fellows. Fixed-parameter tractability and completeness I: Basic results. SIAM Journal on Computing, 24(4):873–921, 1995.
[7] M. Evered and S. Bögeholz. A case study in access control requirements for a health information system. In Proc. Australasian Information Security Workshop 2004 (AISW), volume 32 of Conferences in Research and Practice in Information Technology, 2004.
[8] K. Fisler, S. Krishnamurthi, L. A. Meyerovich, and M. C. Tschantz. Verification and change-impact analysis of access-control policies. In International Conference on Software Engineering (ICSE), pages 196–205, 2005.
[9] P. Godefroid. Partial-Order Methods for the Verification of Concurrent Systems, volume 1032 of Lecture Notes in Computer Science. Springer-Verlag, 1996.
[10] J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and C. W. Skorupka. Verifying information flow goals in Security-Enhanced Linux. Journal of Computer Security, 13(1):115–134, 2005.
[11] J. Y. Halpern and V. Weissman. Using first-order logic to reason about policies. In Proc. 16th IEEE Computer Security Foundations Workshop (CSFW), pages 187–201. IEEE Computer Society Press, 2003.
[12] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. Protection in operating systems. Communications of the ACM, 19(8):461–471, 1976.
[13] K. Irwin, T. Yu, and W. H. Winsborough. On the modeling and analysis of obligations. In In Proc. 13th ACM Conference on Computer and Communications Security (CCS), pages 134–143, Nov. 2006.
[14] D. Jackson, I. Schechter, and I. Shlyakhter. Alcoa: the alloy constraint analyzer. In Proc. 22nd International Conference on Software Engineering (ICSE), pages 730–733, June 2000.
[15] S. Jajodia, P. Samarati, and V. S. Subrahmanian. A logical language for expressing authorizations. In Proc. 1997 IEEE Symposium on Security and Privacy, pages 31–42, 1997.