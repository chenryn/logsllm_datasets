mentally Ô¨Ånd that 30 minutes of data provides enough samples
for larger hyper-periods to map accurately. While this stage
has static run-time, the variation in time requirements will
be dependent on the number of observed messages IDs. The
more message IDs that exist in the network, the longer the
mapping time takes; vehicles with more message IDs take
longer to complete mapping due to an increase in message-
pairs. However, to further reduce mapping time, mapping
messages with small periods requires much less trafÔ¨Åc data.
To save additional time if necessary, it is recommended to
reduce the trafÔ¨Åc log length for high-frequency messages.
Also, if there are few large periodic messages or if those mes-
sages are not relevant for whatever reason, the length of the
initial trafÔ¨Åc log can be reduced as necessary instead of the
recommended 30 minutes.
Figure 9: Observing ACK bit with single ECU in
network.
ID Destination Mapping
6
The goal of the destination mapping module is to accurately
associate each ID with its set of receiving ECUs. The key con-
sideration here is to maximize the accuracy of our mappings
within our deÔ¨Åned time constraint. In this section, we describe
an approach to map each CAN message to one or more desti-
nation ECUs as deÔ¨Åned in ¬ß4 and then present a systematic
procedure that reliably determines which messages an ECU
correctly receives.
6.1 Problem formulation
Intuition: As deÔ¨Åned in ¬ß4, the destination(s) of a particular
CAN message are those ECUs who correctly receive a given
message. Despite the broadcast nature of CAN, if an ECU
does not correctly receive a message, it will not set the ACK
bit; however, if other ECUs receive this message, they will
set the dominant ACK bit. Unfortunately, an ACK observed
by the transmitting ECU only means that some active ECU
correctly received the message. Therefore, with multiple ac-
tive ECUs in the network, we cannot identify which ECUs
were the destination for a given message.
Consider the scenario in Figure 9 where there was only
one active destination ECU, Edst, in the network other than
the transmitting source ECU, Esrc. For each message sent by
Esrc, a set ACK bit (performed only by Edst) would indicate
that only one ECU received the message: Edst. Thus, in this
scenario, Esrc could simply inject all possible Ii and detect
which messages have a set ACK bit. The major challenge here
is identifying a method of isolating an Edst and ‚Äúremoving‚Äù all
other ECUs from the network. We deÔ¨Åne the bare minimum
of ‚Äúremoval‚Äù as preventing an ECU from participating in the
acknowledgement process.
Observation 4: Our idea for performing this removal is to
transition an ECU into an error-state that prevents it from
setting the ACK bit for any message.
USENIX Association
28th USENIX Security Symposium    397
ùë¨ùë¨ùíîùíìùíÑSOFArbitration IDRTRIDEr0DLCDATACRCACKEOFIFSSingle transmittingsource ECU ùë¨ùë¨ùíÖùíîùíïIfsinglereceivingdestination ECU exists, it will ACKIf no destination ECU, no ACK is sent andùíîùíìùíÑwill retransmit Figure 10: CAN transitions between three error states:
error-active, error-passive and bus-off.
We now introduce the error-handling mechanism for CAN
[2, 10], which follows the state diagram in Figure 10. Each
ECU has two error counters: one for errors detected as a
receiver (the Receive Error Counter, or REC), and another for
errors detected as a transmitter (the Transmit Error Counter, or
TEC). The TEC increments much faster than the REC as the
transmitter is more likely to be at fault; the TEC increments
by 8 while the REC increments by 1. If a message is received
correctly, the error counter will decrease by 1. We describe
the three CAN error-states and, under what conditions, the
ECU will transition:
‚Ä¢ Error-active: When an error is detected by an ECU in
error-active, it will transmit an active error Ô¨Çag, or 6 domi-
nant bits, that destroy the bus trafÔ¨Åc. When either the TEC
or REC increments past 127, the ECU transitions to error-
passive.
‚Ä¢ Error-passive: When an error is detected in error-passive,
the ECU transmits a passive error Ô¨Çag, or 6 recessive bits,
that do not destroy the bus trafÔ¨Åc. Once the TEC or REC
increases above 255, the ECU goes to bus-off.
‚Ä¢ Bus-off: In this state, the ECU effectively removes itself
from the network; it will not transmit anything onto the
bus, including setting the ACK bit.
Thus, it is evident that we can isolate an ECU by transitioning
all other ECUs to the bus-off state.
6.2 Limitations of prior work
Imposing bus-off state: The challenge in transitioning an
ECU to bus-off is to determine what kind of error to produce
and how to produce it. We look to previous work [10] that
aims to shutdown an ECU for the purpose of an attack. The
authors aim to shutdown an ECU by causing an error in
the target ECU. By exploiting the error-handling protocol in
CAN, where bus-off effectively removes an ECU from the
network, they choose to increment the error counter of a target
by causing a bit error. This error occurs when a transmitting
Figure 11: Injecting a fabricated message to impose a
bus-off [10].
ECU reads back each bit it writes; when the actual bit is
different, the ECU invokes an error.
Since only one ECU is expected to win the bus arbitration
as detailed in ¬ß2, the authors point out that two winners would
potentially cause a bit error. For example, suppose that the
victim ECU transmits a message with ID 0x262. If the attacker
ECU also transmits ID 0x262 at the exact same time as the
victim, both ECUs will win arbitration. However, to ensure
that the victim has a bit error, the attacker‚Äôs message will set
its DLC, or data length count, to 0 (most practical messages
contain at least some data). After a sufÔ¨Åcient number of these
attack messages, the victim ECU will transition into the bus-
off state.
The main challenge here is synchronizing the attack mes-
sage with the victim message so they both enter arbitration
simultaneously. Their insight as depicted in Figure 11 is to
inject a message of higher priority around the time when the
victim should transmit. The higher priority message will block
the victim until the bus is idle, where it will then transmit. The
attacker will load its attack message immediately after the
higher priority message is transmitted, thus allowing both the
victim and attack message to arbitrate simultaneously. Since
there is noise in the true transmission time of the victim‚Äôs
Ô¨Årst attempt at transmitting, there is a chance that the attacker
will need to make multiple attempts to cause an error. The
number of injection attempts needed to cause a single bit error,
Œ∫, is deÔ¨Åned as the following where I is a conÔ¨Ådence attack
parameter (high parameter value means higher conÔ¨Ådence in
attack), œÉpv is the jitter deviation of the victim‚Äôs period, and
Sbus is the speed of the bus in Kbps:
(cid:38)
Œ∫ =
(cid:39)
‚àö
2IœÉpvSbus
2
124
(6)
The authors state that only one of these injections is needed to
cause a bit error if setting I = 3 and at most 2 if setting I = 4,
given that the period deviation is 0.025ms.
Straw-man limitations: Suppose we used the above ap-
398    28th USENIX Security Symposium
USENIX Association
Error ActiveError PassiveBus-OffTEC > 127 orREC > 127TEC  255Reset (automaticormanual)a microcontroller that operates at the same voltage of the
CAN controller, we do not operate at the true CAN voltage.
Instead, we tap directly between the interface of the Arduino‚Äôs
CAN controller and the CAN transceiver, where we can safely
access the bus data. At this junction, we observe that the data
on the line is within the Arduino‚Äôs voltage and contains the
full data frame, including SOF, ACK and EOF bits. With this
access to the full data frame rather than just the components
of the CAN message, we can directly induce an error on the
bus and thus achieve the bus-off attack as seen in Figure 12.
Observation 6: By reading the ID of the message in
real-time, we can choose to attack any ID by simply driving
a dominant bit to the CAN transceiver.
Note that the bus-off method requires attacking a message
ID every time it occurs until the ECU enters the bus-off state.
However, in the event that a message has a very long period,
the time to perform the bus-off will not satisfy our speed
requirement. As such, we can employ the result of CANvas‚Äô
source mapping component by identifying the ID with the
smallest period per ECU and attacking just that ID. In practice,
we have found that every real ECU we have encountered has
at least one ID that operates under 100ms. Thus, this approach
makes the destination mapping component of CANvas fast.
Determining message receive Ô¨Ålter: Now that we can iso-
late a single ECU in the network, we can simply inject all
messages in the observed ID space and determine which mes-
sages are correctly received by the ECU. However, to view
the ACK bit at the network level, which is not visible to the
user, the obvious option is to use a logic analyzer. As this
does not satisfy our requirement for low-cost mapping, we
seek an alternative. We observed that if a message is sent to
a single ECU and it does not correctly receive the message,
the transmitter will re-attempt to send the message until it is
received correctly. As such, if we transmit a message and see
a continuous stream of the same ID from our transmitter, then
we may conclude that the message ID is not received by the
isolated ECU.
Practical challenges of mapping a real vehicle: Since
our approach to destination mapping involves shutting off
multiple ECUs at a time, we encounter a couple of challenges
in a real vehicle setting: (1) ECUs that auto-recover and (2)
ECUs that are persistently active. We now deÔ¨Åne these sce-
narios and provide a detailed approach to addressing these
practical challenges:
1. ECUs that auto-recover: In our earlier experiments, we
performed a simple experiment to verify the potential of
an isolation method. We attempted to transition all ECUs
in the network to the bus-off state by shorting the CAN bus
pins, which would effectively cause a transmit error for all
ECUs and force them into bus-off. However, after remov-
ing the short, we saw that some CAN messages were still
transmitted onto the network, clearly indicating that some
Figure 12: CANvas identiÔ¨Åes target message by end of
ID Ô¨Åeld and injects dominant bits during the DATA Ô¨Åeld.
proach to cause a bus-off in a real vehicle. Unfortunately,
in sample trafÔ¨Åc dumps from two real vehicles, the smallest
deviation that we observed was approximately 0.15ms. Using
the equation given by Cho et al. [10], the number of preceded
message injections per error is 8 when the period deviates by
at least 0.205ms; if 8 injections are required, any successful bit
error would be undone by successful message transmissions.
We look at available trafÔ¨Åc logs used in the works by Miller et
al. [24]. For this trafÔ¨Åc log, the majority of the messages have
a period deviation over 0.205ms. In other words, assuming
the best case scenario of 0.15ms, we would need to inject at
least 6 higher-priority messages, or preceded messages, for
a bus speed of 500Kbps. Considering that each successful
transmission by the victim ECU decrements the TEC by 1,
we would effectively only increase the TEC by 2 with each
successful attack (instead of the expected 8). Since the major-
ity of messages have a period deviation greater than 0.205ms,
it is highly unlikely to use this method for isolating an ECU.
Observation 5: We need a method of transitioning an ECU
into the bus-off state that is reliable and robust even when
the period deviates by more than 0.025ms.
6.3 Forced ECU isolation
High-level idea: To map each unique ID to its set of destina-
tion ECUs, we break the module into two steps. We repeat
these two steps for all n ECUs in the network. The Ô¨Årst step is
to isolate the target ECU and shut off all others by transition-
ing the non-target ECUs to the bus-off state. As there are n
ECUs in the network, we will need to ‚Äúbus-off‚Äù n‚àí 1 ECUs
for each ECU, i.e. we will need to perform the bus-off at least
n(n‚àí 1) times. Once we isolate an ECU, we then inject the
set of all Ii and observe which messages have a set ACK bit,
thus identifying the set of Ii where the target ECU is an Edst.
Inducing a direct bit-error: Isolating an ECU via the bus-
off method requires a quick and effective approach. Since
we are not limited to operating through the interface of a
CAN controller, we can directly view the CAN frames in
real-time via digital I/O pins. However, since we are using
USENIX Association
28th USENIX Security Symposium    399
‚Ä¶SOFArbitration IDRTRIDEr0DLCDATAError FlagReadphysicalsignaland search for target IDIf target ID matches, injectsome dominate bitsRemainder of message breaks and error flag is transmitted‚Ä¶ECUs left the bus-off state. We Ô¨Ånd that these ECUs would
wait a predeÔ¨Åned amount of time before re-transmitting
again as these ECUs were critical to the vehicle‚Äôs power-
train (engine, hybrid, etc.) [14]. In this situation, we would
transmit a portion of the injected messages onto the bus
and then re-isolate our target ECU when a non-target starts
to transmit again. This approach is only reasonable for
recovery times on the scale of seconds.
2. ECUs that are persistently active: Out of the set of ECUs
that did auto-recover, we also noticed that one ECU seemed
to be persistently active. In other words, there appeared
to be no delay between a transition into the bus-off state
and the next transmission from the ECU. Upon closer
inspection, we found that this ECU would auto-recover
only after 128 occurrences of 11 recessive bits [27]. In
this situation, we must ‚Äúhold‚Äù the bus open by constantly
transmitting false messages from our device to trick the
recovering ECU into thinking that the bus is still active.
Factors for mapping time: For destination mapping, the
run-time is dependent on the number of ECUs and increases
with more ECUs. We acknowledge the potential of long run-
times for vehicles with 70+ ECUs if all were CAN-enabled.
To combat this, we suggest performing the bus-off on the ID
with the smallest period per ECU to reduce the time attributed
to achieving ECU isolation. Also, for our two vehicles, all
observed IDs were active when the vehicle was simply in
ACC rather than ON so there may be no need to crank the
engine per ECU.
7 Evaluation
In this section, we show that CANvas:
1. identiÔ¨Åes an unexpected ECU in a ‚Äô09 Toyota Prius,
2. identiÔ¨Åes lenient message-receive Ô¨Ålters in a ‚Äô17 Ford Fo-
cus,
3. produces a sound source mapping of two real vehicles and
accurately identiÔ¨Åes the source of approximately 95% of
all Ii in the network and a complete destination mapping
with an isolation technique that is 100% reliable,
4. successfully demonstrate our forced ECU isolation on three
extracted ECUs,
5. and produces source mapping of three additional vehicles.
Setup and methodology: Our experimental setup includes
Ô¨Åve real vehicles and several synthetic networks to demon-
strate the above beneÔ¨Åts. Below is a brief description of the
CANvas hardware implementation, Ô¨Åve real vehicles and our
synthetic network of real ECUs: