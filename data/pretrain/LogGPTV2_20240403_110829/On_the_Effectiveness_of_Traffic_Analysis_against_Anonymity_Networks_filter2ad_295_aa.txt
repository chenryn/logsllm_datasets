title:On the Effectiveness of Traffic Analysis against Anonymity Networks
Using Flow Records
author:Sambuddho Chakravarty and
Marco Valerio Barbera and
Georgios Portokalidis and
Michalis Polychronakis and
Angelos D. Keromytis
On the Effectiveness of Trafﬁc Analysis
against Anonymity Networks Using Flow Records
Sambuddho Chakravarty1, Marco V. Barbera2, Georgios Portokalidis3,
Michalis Polychronakis1, and Angelos D. Keromytis1
1 Columbia University, NY, USA
{sc2516,mikepo,angelos}@cs.columbia.edu
2 Sapienza Universita Di Roma, Rome, Italy
PI:EMAIL
3 Stevens Institute of Technology, NJ, USA
PI:EMAIL
Abstract. We investigate the feasibility of mounting a de-anonymization attack
against Tor and similar low-latency anonymous communication systems by using
NetFlow records. Previous research has shown that adversaries with the ability to
eavesdrop in real time at a few internet exchange points can effectively monitor a
signiﬁcant part of the network paths from Tor nodes to destination servers. How-
ever, the capacity of current networks makes packet-level monitoring at such a
scale quite challenging. We hypothesize that adversaries could use less accurate
but readily available monitoring facilities, such as Cisco’s NetFlow, to mount
large-scale trafﬁc analysis attacks. In this paper, we assess the feasibility and ef-
fectiveness of trafﬁc analysis attacks against Tor using NetFlow data. We present
an active trafﬁc analysis technique based on perturbing the characteristics of user
trafﬁc at the server side, and observing a similar perturbation at the client side
through statistical correlation. We evaluate the accuracy of our method using both
in-lab testing and data gathered from a public Tor relay serving hundreds of users.
Our method revealed the actual sources of anonymous trafﬁc with 100% accuracy
for the in-lab tests, and achieved an overall accuracy of 81.6% for the real-world
experiments with a false positive rate of 5.5%.
1 Introduction
Anonymous communication networks hide the actual source (or destination) address
of internet trafﬁc, preventing the server (or client) and other entities along the network
from determining the actual identities of the communicating parties. Among others [2,
3], Tor [8] is probably the most widely used low-latency anonymity network. To offer
acceptable quality of service, Tor and similar systems try to preserve packet interarrival
times. Unfortunately, this makes them vulnerable to trafﬁc analysis attacks [5, 11, 13,
17, 20, 21], whereby an adversary with access to trafﬁc from/to entry and exit nodes,
can correlate seemingly unrelated trafﬁc ﬂows and reveal the actual endpoints.
As Tor nodes are scattered around the globe and the nodes of circuits are selected
at random, mounting a trafﬁc analysis attack, in practice, would require a powerful ad-
versary with the ability to monitor trafﬁc at a multitude of autonomous systems (AS).
M. Faloutsos and A. Kuzmanovic (Eds.): PAM 2014, LNCS 8362, pp. 247–257, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
248
S. Chakravarty et al.
Murdoch and Zieli´nski, however, showed that monitoring trafﬁc at a few major internet
exchange (IX) points could enable trafﬁc analysis attacks against a signiﬁcant part of the
Tor network [18]. Furthermore, Feamster et al. [12], and later Edman et al. [10], showed
that even a single AS may observe a large fraction of entry and exit-node trafﬁc—a sin-
gle AS could monitor over 22% of randomly generated Tor circuits. Recently, Johnson
et al. [15], extended this study and observed, through simulation, that compromised
high bandwidth Tor relays and IX operators, observing both entry and exit trafﬁc, could
de-anonymize 80% of random Tor circuits.
Packet-level trafﬁc monitoring at this scale requires the installation of passive mon-
itoring sensors capable of processing tens or hundreds of Gbit/s trafﬁc. Although not
impossible, setting up a passive monitoring infrastructure at such a scale is challenging
in terms of cost, logistics, and effort. An attractive alternative for adversaries would be
to use the readily available, albeit less accurate, trafﬁc monitoring functionality built
into the routers of major IXs and ASs, such as Cisco’s NetFlow. Murdoch and Zieli´nski
showed through simulation that trafﬁc analysis using sampled NetFlow data is possible,
provided there are adequate samples. Still, there have been no prior efforts to explore
the various practical aspects of mounting trafﬁc analysis attacks using NetFlow data.
As a step towards ﬁlling this gap, in this paper we study the feasibility and effective-
ness of trafﬁc analysis attacks using NetFlow data, and present a practical active trafﬁc
analysis attack against Tor. Our approach is based on identifying pattern similarities in
the trafﬁc ﬂows entering and leaving the Tor network, using statistical correlation. To
alleviate the uncertainty due to the coarse-grained nature of NetFlow data, our attack
relies on a server under the control of the adversary that introduces deterministic pertur-
bations to the trafﬁc of anonymous visitors. Among all client-to-entry-node ﬂows, the
actual victim ﬂow can be distinguished due to its high correlation with the respective
exit-node-to-server ﬂow, as both carry the induced trafﬁc perturbation pattern.
We evaluated the effectiveness of our trafﬁc analysis attack in a controlled lab en-
vironment, as well as using public Tor relays. In the in-lab environment, our method
revealed the actual sources of anonymous trafﬁc with 100% accuracy. When evaluating
our attack with trafﬁc going through public Tor relays, our method detected the actual
source in 81.6% of the cases, with a a false positive rate of 5.5% and false negative rate
of 12.7%. Due to the sensitivity of the correlation process, especially for ﬂows with
sparse samples, we couple correlation with heuristics to ﬁlter out ﬂows that are unlikely
to correspond to a victim, thus reducing false positives.
2 Related Work
Tor [8] safeguards the anonymity of internet users by relaying TCP streams through
a network of overlay nodes, run by volunteers. It typically hides the identity (IP ad-
dress) of the initiator of a connection, although the opposite is also possible through the
use of hidden services. Murdoch and Danezis [17] developed the ﬁrst practical trafﬁc
analysis attack against Tor. Their technique involved a corrupt server and a client that
buildt one-hop circuits via candidate relays to determine relays participating in a cir-
cuit. Hopper et al. [13] used this method, along with one-way circuit latency and the Vi-
valdi network coordinate system, to determine the possible source of anonymous trafﬁc.
On the Effectiveness of Trafﬁc Analysis against Anonymity Networks
249
In 2009, however, Evans et al. [11] demonstrated that Murdoch and Danezis’ method
was not accurate, due to an increase in the number of relays and the large volume of Tor
trafﬁc. They proposed a modiﬁcation to amplify the trafﬁc by loops in circuits.
Previously, we proposed a method for performing trafﬁc analysis using remote net-
work bandwidth estimation tools to identify the Tor relays and network routers involved
in Tor circuits [7]. Our method assumed that the adversaries were in a position to per-
turb the victim trafﬁc by colluding with the server, and are in control of various network
vantage points, from where they can remotely observe variations in network bandwidth.
Mittal et al. [16] demonstrated a modiﬁed version of the Murdoch and Danezis’ attack
that relies on path bandwidth variation.
In 2007, Murdoch et al. [18] proposed the use of NetFlow data from routers in IXes
to perform trafﬁc analysis attacks against trafﬁc entering and leaving the Tor network.
They discovered that there is a small number of IXes that can potentially observe a
large part of Tor trafﬁc, and allow the use of existing facilities, such as Cisco NetFlow,
to mount trafﬁc analysis attacks. They proposed a trafﬁc and attack model that receives
as input NetFlow trafﬁc gathered from monitoring a Tor relay. They described, through
simulations, how varying the number of ﬂows, bandwidth, and end-to-end delay, af-
fects the accuracy of determining the source of anonymous trafﬁc. In a follow-up work,
Johnson et al. [15] recently showed that a small number of compromised Tor relays
that advertise high bandwidth and IXes observing both entry end exit trafﬁc, can de-
anonymize 80% of various types of Tor circuits within six months.
Previous efforts did not explore the feasibility and effectiveness of using a facility
such as NetFlow to determine the source of anonymous trafﬁc from a practical per-
spective. Our work attempts to assess the possibilities of accurately de-anonymizing
Tor users using NetFlow data by implementing and experimentally evaluating a trafﬁc
analysis attack in realistic settings.
3 Approach
Threat Model and Attack Methodology: The goal of the attacker is to determine the
network identity (i.e., public IP address) of a client using Tor to access a server. We as-
sume the attacker can observe NetFlow trafﬁc records on routers at or near Tor relays.
In our model, the attacker deliberately injects a trafﬁc variation pattern on one side of
a victim Tor connection, which travels via the relays to the peer. The easiest way for
the attacker to achieve this is by controlling the server; the attacker would then serve
sufﬁcient content volume (e.g., a large volume of “invisible” HTML content) and in-
ject trafﬁc perturbation patterns in the connection between the Tor exit node and the
server. We also assume that attackers can select speciﬁc anonymous connections they
are interested in (e.g., those that correspond to a particular user identity in the server).
Alternatively, attackers could de-anonymize all clients accessing the server; our cur-
rent work demonstrates de-anonymization of a single client at a time. Simultaneous
anonymization of multiple clients (with or without correlation between client identities
and anonymous sessions) is left for future work. A powerful adversary could moni-
tor a large part of the relays participating in the Tor network, one of which with high
probability would correspond to the entry node of the targeted user. Alternatively, an
250
S. Chakravarty et al.
Non-Victim 
Client 
Tor Network 
Injected  
Traffic  
Pattern 
2 
Entry 
Injected  
Traffic Pattern Travels 
Through the Victim Circuit 
2 
Middleman 
1 
Injected  
Traffic  
Pattern 
2 
Victim 
Client 
1 
Non-Victim 
Client 
a
t
a
D
w
o
l
f
t
e
N
3 
Exit 
1 
1 
Colluding 
Server 
a
t
a
D
w
o
l
f
t
e
N
3 
4 
Computing 
Correlation  
Coefficient (r)   
Fig. 1. NetFlow-based trafﬁc analysis against Tor: The client is forced to download a ﬁle from
the server 1(cid:2), while the server induces a characteristic trafﬁc pattern 2(cid:2). After the connection is
terminated, the adversary obtains ﬂow data corresponding to the server-to-exit and entry-to-client
trafﬁc 3(cid:2), and computes their correlation coefﬁcient 4(cid:2).
attacker could follow a more focused approach by employing existing techniques [7, 16]
to identify the actual relays used by the victim’s circuit, and only monitor those.
In a second, related scenario, the attacker is a malicious Tor client seeking to iden-
tify a Tor hidden server. In this case, the attacker injects a trafﬁc perturbation pattern
and observes it between the hidden server and its entry node, against using the Net-
Flow records to perform the correlation. Note that the attacker need not actually control
one end of a Tor circuit. For example, the attacker could inject a pattern in a chosen
anonymous connection between the server and an exit node, without the server know-
ing about it. This scenario introduces additional complexity in terms of victim selection,
especially when the connections between the Tor exit node and the server are encrypted.
We defer further study of this scenario to future work.
As shown in Figure 1, after the transfer ends, the adversary obtains the ﬂow records
of all the client-to-entry-node connections that were monitored (from one or more entry
nodes), and computes their correlation with the given exit-node-to-server ﬂow. Various
factors, such as ﬂow cache eviction timeout values and the inherently bursty nature
of trafﬁc (especially web trafﬁc), commonly result in an inadequate number of ﬂow
samples than what is ideally required for computing the correlation coefﬁcient. The
longer the duration of the ﬁngerprinted transfer, the higher the chances that enough ﬂow
samples will be gathered. In our experiments, we assume that the victim downloads a
large ﬁle (in the order of tens of megabytes), generating sustained trafﬁc for a duration
of about 5–7 minutes. Depending on the capabilities of the involved routers, the same
accuracy could be achieved using shorter data transfers.
Implementation: In our prototype, the server ﬂuctuates a client’s trafﬁc using Linux
Trafﬁc Controller [14]. We explored two different kinds of trafﬁc perturbation patterns.
The ﬁrst was a simple “square wave” pattern, achieved by repeatedly ﬂuctuating the
On the Effectiveness of Trafﬁc Analysis against Anonymity Networks
251
victim’s transfer rate between two values. The second a was more complex “step” pat-
tern, achieved by repeatedly switching between several predetermined bandwidth val-
ues. These different perturbations help evaluate our attack accuracy through both simple
and complex injected trafﬁc patterns.
For our initial in-lab experiments, ﬂow records were generated and captured using
the open source tools ipt netflow [4] and flow-tools [1], respectively. In such
a controlled environment, free of congestion and external interference, our approach
achieved 100% success in determining the source of anonymous connections (more
details for this experiment are included in our technical report [6]).
In the experiments presented in this paper, we obtained data from a public Tor relay
serving hundreds of Tor clients. The ﬂow records for the server-to-exit trafﬁc were
generated and captured using the aforementioned ﬂow tools. The ﬂow records for the
entry-to-client trafﬁc were generated ﬁrst using the ﬂow tools, running on the same
host as the entry node, and later by our institutional edge router. For the latter, the ﬂow
data from the router was often sparse due to aggressive sampling. Multiple intervals
were typically aggregated into a single ﬂow record. This generally happens due to the
combination of ﬂow expiration timeout values and the router’s network load. As such
aggregation is not deterministic, it is difﬁcult to divide a large interval into smaller
ones without knowing the ordinate values of the aggregated intervals. Since correlation
analysis requires the two time series to have the throughput values taken at the same
points, we devised the following strategy to align the time points.
Flow records are arranged as time intervals with the bytes transferred in each of
them [6]. To correctly align the time points, we ﬁrst take the intervals of all server-to-
exit records and divide them into steps of one second. We then consider the starting
and ending times of every entry-to-client ﬂow record and attempt to align them with the
one-second steps of the server-to-exit ﬂow. For every successfully aligned time point,
we assume the corresponding entry-to-client (and respective server-to-exit) throughput