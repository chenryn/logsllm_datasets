return fixup
#
# try it out!
patterns = [
r"\d+",
r"abc\d{2,4}",
r"p\w+"
]
p = combined_pattern(patterns)
print p("129391")
print p("abc800")
print p("abc1600")
print p("python")
print p("perl")
print p("tcl")
0
1
1
2
2
None
1.9. math 模块
math 模块实现了许多对浮点数的数学运算函数. 这些函数一般是对平台 C 库
中同名函数的简单封装, 所以一般情况下, 不同平台下计算的结果可能稍微地
有所不同, 有时候甚至有很大出入. Example 1-60 展示了如何使用 math 模块.
1.9.0.1. Example 1-60. 使用 math 模块
File: math-example-1.py
import math
print "e", "=>", math.e
print "pi", "=>", math.pi
print "hypot", "=>", math.hypot(3.0, 4.0)
# and many others...
e => 2.71828182846
pi => 3.14159265359
hypot => 5.0
完整函数列表请参阅 Python Library Reference .
1.10. cmath 模块
Example 1-61 所展示的 cmath 模块包含了一些用于复数运算的函数.
1.10.0.1. Example 1-61. 使用 cmath 模块
File: cmath-example-1.py
import cmath
print "pi", "=>", cmath.pi
print "sqrt(-1)", "=>", cmath.sqrt(-1)
pi => 3.14159265359
sqrt(-1) => 1j
完整函数列表请参阅 Python Library Reference .
1.11. operator 模块
operator 模块为 Python 提供了一个 "功能性" 的标准操作符接口. 当使用
map 以及 filter 一类的函数的时候, operator 模块中的函数可以替换一些
lambda 函式. 而且这些函数在一些喜欢写晦涩代码的程序员中很流行.
Example 1-62 展示了 operator 模块的一般用法.
1.11.0.1. Example 1-62. 使用 operator 模块
File: operator-example-1.py
import operator
sequence = 1, 2, 4
print "add", "=>", reduce(operator.add, sequence)
print "sub", "=>", reduce(operator.sub, sequence)
print "mul", "=>", reduce(operator.mul, sequence)
print "concat", "=>", operator.concat("spam", "egg")
print "repeat", "=>", operator.repeat("spam", 5)
print "getitem", "=>", operator.getitem(sequence, 2)
print "indexOf", "=>", operator.indexOf(sequence, 2)
print "sequenceIncludes", "=>", operator.sequenceIncludes(sequence, 3)
add => 7
sub => -5
mul => 8
concat => spamegg
repeat => spamspamspamspamspam
getitem => 4
indexOf => 1
sequenceIncludes => 0
Example 1-63 展示了一些可以用于检查对象类型的 operator 函数.
1.11.0.2. Example 1-63. 使用 operator 模块检查类型
File: operator-example-2.py
import operator
import UserList
def dump(data):
print type(data), "=>",
if operator.isCallable(data):
print "CALLABLE",
if operator.isMappingType(data):
print "MAPPING",
if operator.isNumberType(data):
print "NUMBER",
if operator.isSequenceType(data):
print "SEQUENCE",
print
dump(0)
dump("string")
dump("string"[0])
dump([1, 2, 3])
dump((1, 2, 3))
dump({"a": 1})
dump(len) # function 函数
dump(UserList) # module 模块
dump(UserList.UserList) # class 类
dump(UserList.UserList()) # instance 实例
 => NUMBER
 => SEQUENCE
 => SEQUENCE
 => SEQUENCE
 => SEQUENCE
 => MAPPING
 => CALLABLE
 =>
 => CALLABLE
 => MAPPING NUMBER SEQUENCE
这里需要注意 operator 模块使用非常规的方法处理对象实例. 所以使用
isNumberType , isMappingType , 以及 isSequenceType 函数的时候要小心,
这很容易降低代码的扩展性.
同样需要注意的是一个字符串序列成员 (单个字符) 也是序列. 所以当在递归
函数使用 isSequenceType 来截断对象树的时候, 别把普通字符串作为参数(或
者是任何包含字符串的序列对象).
1.12. copy 模块
copy 模块包含两个函数, 用来拷贝对象, 如 Example 1-64 所示.
copy(object) => object 创建给定对象的 "浅/浅层(shallow)" 拷贝(copy).
这里 "浅/浅层(shallow)" 的意思是复制对象本身, 但当对象是一个容器
(container) 时, 它的成员仍然指向原来的成员对象.
1.12.0.1. Example 1-64. 使用 copy 模块复制对象
File: copy-example-1.py
import copy
a = [[1],[2],[3]]
b = copy.copy(a)
print "before", "=>"
print a
print b
# modify original
a[0][0] = 0
a[1] = None
print "after", "=>"
print a
print b
before =>
[[1], [2], [3]]
[[1], [2], [3]]
after =>
[[0], None, [3]]
[[0], [2], [3]]
你也可以使用[:]语句 (完整切片) 来对列表进行浅层复制, 也可以使用 copy
方法复制字典.
相反地, deepcopy(object) => object 创建一个对象的深层拷贝(deepcopy),
如 Example 1-65 所示, 当对象为一个容器时, 所有的成员都被递归地复制了。
1.12.0.2. Example 1-65. 使用 copy 模块复制集合(Collections)
File: copy-example-2.py
import copy
a = [[1],[2],[3]]
b = copy.deepcopy(a)
print "before", "=>"
print a
print b
# modify original
a[0][0] = 0
a[1] = None
print "after", "=>"
print a
print b
before =>
[[1], [2], [3]]
[[1], [2], [3]]
after =>
[[0], None, [3]]
[[1], [2], [3]]
1.13. sys 模块
sys 模块提供了许多函数和变量来处理 Python 运行时环境的不同部分.
1.13.1. 处理命令行参数
在解释器启动后, argv 列表包含了传递给脚本的所有参数, 如 Example 1-66
所示. 列表的第一个元素为脚本自身的名称.
1.13.1.1. Example 1-66. 使用 sys 模块获得脚本的参数
File: sys-argv-example-1.py
import sys
print "script name is", sys.argv[0]
if len(sys.argv) > 1:
print "there are", len(sys.argv)-1, "arguments:"
for arg in sys.argv[1:]:
print arg
else:
print "there are no arguments!"
script name is sys-argv-example-1.py
there are no arguments!
如果是从标准输入读入脚本 (比如 "python ",
if module in sys.builtin_module_names:
print ""
else:
module = _ _import_ _(module)
print module._ _file_ _
dump("os")
dump("sys")
dump("string")
dump("strop")
dump("zlib")
os => C:\python\lib\os.pyc
sys => 
string => C:\python\lib\string.pyc
strop => 
zlib => C:\python\zlib.pyd
modules 字典包含所有加载的模块. import 语句在从磁盘导入内容之前会先检
查这个字典.
正如你在 Example 1-69 中所见到的, Python 在处理你的脚本之前就已经导入
了很多模块.
1.13.2.3. Example 1-69. 使用 sys 模块查找已导入的模块
File: sys-modules-example-1.py
import sys
print sys.modules.keys()
['os.path', 'os', 'exceptions', '_ _main_ _', 'ntpath', 'strop', 'nt',
'sys', '_ _builtin_ _', 'site', 'signal', 'UserDict', 'string', 'stat']
1.13.3. 处理引用记数
getrefcount 函数 (如 Example 1-70 所示) 返回给定对象的引用记数 - 也就
是这个对象使用次数. Python 会跟踪这个值, 当它减少为0的时候, 就销毁这
个对象.
1.13.3.1. Example 1-70. 使用 sys 模块获得引用记数
File: sys-getrefcount-example-1.py
import sys
variable = 1234
print sys.getrefcount(0)
print sys.getrefcount(variable)
print sys.getrefcount(None)
50
3
192
注意这个值总是比实际的数量大, 因为该函数本身在确定这个值的时候依赖这
个对象.
== 检查主机平台===
Example 1-71 展示了 platform 变量, 它包含主机平台的名称.
1.13.3.2. Example 1-71. 使用 sys 模块获得当前平台
File: sys-platform-example-1.py
import sys
#
# emulate "import os.path" (sort of)...
if sys.platform == "win32":
import ntpath
pathmodule = ntpath
elif sys.platform == "mac":
import macpath
pathmodule = macpath
else:
# assume it's a posix platform
import posixpath
pathmodule = posixpath
print pathmodule
典型的平台有Windows 9X/NT(显示为 win32 ), 以及 Macintosh(显示为 mac ) .
对于 Unix 系统而言, platform 通常来自 "uname -r " 命令的输出, 例如
irix6 , linux2 , 或者 sunos5 (Solaris).
1.13.4. 跟踪程序
setprofiler 函数允许你配置一个分析函数(profiling function). 这个函数
会在每次调用某个函数或方法时被调用(明确或隐含的), 或是遇到异常的时候
被调用. 让我们看看 Example 1-72 的代码.
1.13.4.1. Example 1-72. 使用 sys 模块配置分析函数
File: sys-setprofiler-example-1.py
import sys
def test(n):
j = 0
for i in range(n):
j = j + i
return n
def profiler(frame, event, arg):
print event, frame.f_code.co_name, frame.f_lineno, "->", arg
# profiler is activated on the next call, return, or exception
# 分析函数将在下次函数调用, 返回, 或异常时激活
sys.setprofile(profiler)
# profile this function call
# 分析这次函数调用
test(1)
# disable profiler
# 禁用分析函数
sys.setprofile(None)
# don't profile this call
# 不会分析这次函数调用
test(2)
call test 3 -> None
return test 7 -> 1
基于该函数, profile 模块提供了一个完整的分析器框架.
Example 1-73 中的 settrace 函数与此类似, 但是 trace 函数会在解释器每
执行到新的一行时被调用.
1.13.4.2. Example 1-73. 使用 sys 模块配置单步跟踪函数
File: sys-settrace-example-1.py
import sys
def test(n):
j = 0
for i in range(n):
j = j + i
return n
def tracer(frame, event, arg):
print event, frame.f_code.co_name, frame.f_lineno, "->", arg
return tracer
# tracer is activated on the next call, return, or exception
# 跟踪器将在下次函数调用, 返回, 或异常时激活
sys.settrace(tracer)
# trace this function call
# 跟踪这次函数调用
test(1)
# disable tracing
# 禁用跟踪器
sys.settrace(None)
# don't trace this call
# 不会跟踪这次函数调用
test(2)
call test 3 -> None
line test 3 -> None
line test 4 -> None
line test 5 -> None
line test 5 -> None
line test 6 -> None
line test 5 -> None
line test 7 -> None
return test 7 -> 1
基于该函数提供的跟踪功能, pdb 模块提供了完整的调试( debug )框架.
1.13.5. 处理标准输出/输入
stdin , stdout , 以及 stderr 变量包含与标准 I/O 流对应的流对象. 如果需
要更好地控制输出,而 print 不能满足你的要求, 它们就是你所需要的. 你也
可以 替换 它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或
者以非标准的方式处理它们. 如 Example 1-74 所示.
1.13.5.1. Example 1-74. 使用 sys 重定向输出
File: sys-stdout-example-1.py
import sys
import string
class Redirect:
def _ _init_ _(self, stdout):