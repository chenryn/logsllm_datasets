# Module 3: Understanding and Countering Malware Evasion and Self-Defense

## Fingerprinting for Evasion

### Overview
Fingerprinting is the process of gathering information about the environment where an executable is deployed. Malware often uses this technique to determine if it is running in a controlled environment, such as a sandbox or an analysis machine.

### Open Source Projects
Several open-source projects provide rich sets of techniques for fingerprinting:
- [PaFish](https://github.com/a0rtega/pafish)
- [Al-Khaser](https://github.com/LordNoteworthy/al-khaser)
- [ScoopyNG](https://www.aldeid.com/wiki/ScoopyNG)

### Demos
Demos of these tools can be found at:
- [Anti-Analysis Demos](https://github.com/hasherezade/antianalysis_demos)

### Examples in Action
- **PaFish**: [GitHub Repository](https://github.com/a0rtega/pafish)
- **Al-Khaser**: [GitHub Repository](https://github.com/LordNoteworthy/al-khaser)

### Common Reactions
When malware detects that it is being analyzed, it often stops its execution to protect its mission. Common reactions include:
- `ExitProcess`
- Entering an infinite sleep loop
- Deploying a decoy (e.g., an old variant of Andromeda)
- Corrupting its execution (e.g., Kronos) to crash at a later point

## Classic Debugger Detection Techniques

### Overview
Debugger detection involves identifying artifacts left by the debugger in the execution environment. Malware uses these artifacts to terminate or alter its execution.

### Approaches
- **Using Flags in Internal Process Structures**: EPROCESS, PEB
- **Breakpoint Detection**
- **Reaction on Exceptions**
- **Time Checks**
- **Searching for the Physical Presence of the Debugger**: Checking running processes, window names/classes, installation artifacts of a debugger

### Basic API Methods
- **IsDebuggerPresent** and **CheckRemoteDebuggerPresent**

```cpp
bool is_debugger_api() {
    if (IsDebuggerPresent()) return true;
    BOOL has_remote = FALSE;
    CheckRemoteDebuggerPresent(GetCurrentProcess(), &has_remote);
    return has_remote ? true : false;
}
```

### PEB-Based Detection
- **PEB (Process Environment Block)**: Contains information about the process's execution environment and is useful for detecting a debugger.
- **BeingDebugged Flag**: A flag in the PEB that indicates whether the process is being debugged.
- **NtGlobalFlag and NtGlobalFlag2**: Additional flags related to debugging.

```cpp
bool is_debugger_peb() {
    PPEB peb = (PPEB)__readgsqword(0x60);
    return peb->BeingDebugged != 0;
}
```

### Time Checks
- **RDTSC (Read Time-Stamp Counter)**: Used to measure the time and detect if the application is being analyzed.

```cpp
bool antidbg_timer_check() {
    static ULONGLONG time = 0;
    if (time == 0) {
        time = __rdtsc();
        return false;
    }
    ULONGLONG second_time = __rdtsc();
    ULONGLONG diff = (second_time - time) >> 20;
    if (diff > 0x100) {
        time = second_time;
        return true;
    }
    return false;
}
```

### Defense Against Anti-Debugging
- **Debugger Plugins**: 
  - ScyllaHide (user-mode hooking)
  - TitanHide (kernel-mode hooking)
  - SharpOD
  - OllyDbg plugins (OllyAdvanced, Phantom, StrongOD)

## Classic Anti-VM Techniques

### Overview
Virtual machines (VMs) emulate real hardware but leave artifacts that can be detected. Malware often looks for these artifacts to identify if it is running in a VM.

### Approaches
- **Presence/Absence of Instructions**
- **CPUID Identifiers**
- **Memory-Specific Checks** (e.g., "The Red Pill" â€“ IDT, GDT, LDT checks)
- **Time Checks**
- **Weaker Hardware Parameters**
- **Physical Presence of VM-Related Artifacts**: Checking running processes, window names/classes, registry keys, etc.

### CPUID Checks
- **Low-Level Anti-VM Techniques**: Using the CPUID instruction to check for specific features and hypervisor brands.

```cpp
void check_vm_cpu_id() {
    mov eax, 1
    cpuid
    bt ecx, 0x1f
    jnc finish
    mov is_bit_set, 1
finish:
}
```

### Defense Against CPUID Checks
- **Overwriting CPUID Values**: Modifying the values returned by CPUID to avoid detection.

```ini
cpuid.1.ecx="0---:----:----:----:----:----:----:----"
cpuid.40000000.ecx="0000:0000:0000:0000:0000:0000:0000:0000"
cpuid.40000000.edx="0000:0000:0000:0000:0000:0000:0000:0000"
```

### VMware I/O Port
- **Special I/O Port**: Reading a special I/O port used by VMware to communicate with the host. On a physical machine, this will cause an exception.

```asm
mov eax, 'VMXh'
mov ebx, 0
mov ecx, 10
mov edx, 'VX'
in eax, dx
cmp ebx, 'VMXh'
```

### Conclusion
Understanding and countering malware evasion and self-defense techniques is crucial for effective malware analysis. This module provides an overview of common techniques and practical examples to help you better understand and mitigate these threats.