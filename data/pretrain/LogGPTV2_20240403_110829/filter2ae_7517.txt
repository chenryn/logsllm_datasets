**Author: 0x7F@Knownsec 404 Team**

### 0x00 Preface
ES File Explorer is a popular file management application for Android, supporting various functions such as browsing and managing files. With over 100 million installations, it is one of the most widely used file managers on the platform. In January 2019, a security researcher disclosed a vulnerability in ES File Explorer (CVE-2019-6447). In February, I read several articles related to this vulnerability and decided to learn about reverse engineering for Android applications. After conducting a detailed analysis, I found that the underlying principle of the vulnerability was relatively straightforward.

### 0x01 Vulnerability Overview
The ES File Explorer creates an HTTP service bound to port 59777 at runtime, which provides over 10 commands for accessing data on the user's device and executing applications. However, the service does not validate incoming requests, leading to a security breach.

**Affected Version:**
- ES File Explorer v4.1.9.7.4

**Remediation:**
- Update to the latest version available on the app store. The fixed version is v4.1.9.7.4.

**Vulnerability Recurrence Environment:**
- Windows 7
- OPPO R7
- ES File Explorer v4.1.9.4
- ADB (Android Debug Bridge)

### 0x02 Vulnerability Recurrence
1. Connect your mobile device to your computer and enable USB debugging.
   ![](https://images.seebug.org/content/images/2019/02/f470e9aa-8efb-4bff-b831-82a4bb6f0884.png-w331s)
2. Verify the device connection using ADB and install ES File Explorer v4.1.9.4 on the device.
3. On the mobile device, confirm that ES File Explorer has been successfully installed. Start the application and use ADB to check the current network port status, verifying that port 59777 is open.
   ![](https://images.seebug.org/content/images/2019/02/241f1268-1509-432d-81a9-658806d65b5a.png-w331s)
4. Ensure both the phone and the computer are connected to the same Wi-Fi network for testing.
   ![](https://images.seebug.org/content/images/2019/02/0894174e-5c9c-4114-875e-dd56cce6bfce.png-w331s)
5. Construct an HTTP packet, encapsulate the command in JSON format, and send a request to port 59777. For example, using the `getDeviceInfo` command, you can retrieve and display the device information.
   ![](https://images.seebug.org/content/images/2019/02/1ffbd975-5be1-48f9-a557-e3cbc8408469.png-w331s)

### 0x03 Vulnerability Analysis
**Decompile DEX Files**
To analyze ES File Explorer v4.1.9.4, first extract the APK, which contains three `*.dex` files. Use the `dex2jar` tool to decompile these files into `*.jar` files.
   ![](https://images.seebug.org/content/images/2019/02/db8a14f6-2bea-4aa4-bc47-599bffa340d2.png-w331s)
Load the three `jar` files using the `jd-gui` tool and search for keywords like `59777`, `command`, and `getDeviceInfo` to locate the vulnerable code, which is found in `classes2-dex2jar.jar` under the path `com.estrongs.android.f.a`.
   ![](https://images.seebug.org/content/images/2019/02/5a592252-aad1-4be6-a9f5-23ffb37a940d.png-w331s)

**Commands Supported by ES HTTP Service**
In addition to the `getDeviceInfo` command, the HTTP service supports several other commands:
| Command | Description |
| --- | --- |
| listFiles | List all files |
| listPics | List all pictures |
| listVideos | List all videos |
| listAudios | List all audio files |
| listApps | List installed applications |
| listAppsSystem | List system applications |
| listAppsPhone | List communication-related applications |
| listAppsSdcard | List applications installed on the SD card |
| listAppsAll | List all applications |
| getAppThumbnail | Get the icon for a specified application |
| appLaunch | Launch a specific application |
| appPull | Download an application from the device |
| getDeviceInfo | Get system information |

You can also directly access file data by appending the system file path to the URL:
```sh
curl --header "Content-Type: application/json" http://192.168.0.105:59777/etc/wifi_mos.sh
```
   ![](https://images.seebug.org/content/images/2019/02/ad11f157-78be-4c5b-bcc9-c53e2a277f67.png-w331s)

Example of executing a command (listing all files):
```sh
curl --header "Content-Type: application/json" --request POST --data "{\"command\":\"listFiles\"}" http://192.168.0.105:59777
```
   ![](https://images.seebug.org/content/images/2019/02/dca2f182-fd5b-4a4b-ac2c-fbac4ce7eef7.png-w331s)

**Command Processing**
The command processing involves performing the corresponding logic, encapsulating the results in JSON format, and returning them via HTTP. The following is the logic for the `getDeviceInfo` command:
   ![](https://images.seebug.org/content/images/2019/02/374a02a4-35ad-4608-b7e1-6850cb4d4c5d.png-w331s)

The HTTP service is a built-in feature of ES File Explorer, likely intended for sharing between devices. However, the lack of request validation leads to the security issue.

### 0x04 Patch Analysis
Download the patched version v4.1.9.9.3, extract the APK, and decompile it into `*.jar` files using `dex2jar`. Analyze the decompiled files.

**POST Request Verification**
The v4.1.9.9.3 version may be obfuscated, with a different decompiled structure compared to v4.1.9.4. Use keyword searches to locate the previous logic vulnerability, which is found under the `es.qg` path in `classes3-dex2jar.jar`.
   ![](https://images.seebug.org/content/images/2019/02/731e1e16-1c7f-42ce-866c-e1d042ded0a5.png-w331s)

As shown in the figure, the new version includes a patch that checks the request before processing. If the check fails, a 400 error is returned.

Examining the `ap.d()` function reveals two key checks:
1. **Function 1:**
   ![](https://images.seebug.org/content/images/2019/02/82f7627c-889e-4f36-8191-4e7086c08946.png-w331s)
   This function retrieves the `UIModeManager` object. If the type of the object is `4` (corresponding to `UI_MODE_TYPE_TELEVISION`), it returns `true`. This indicates that the feature is limited to Android TV devices.

2. **Function 2:**
   ![](https://images.seebug.org/content/images/2019/02/55329551-28d0-41b8-8b04-3df210311644.png-w331s)
   This function further checks if the device is an Android TV. It gets the screen size and converts it to a value, which must be greater than 20 to return `true`.

#### Is Android TV Threatened?
Despite the patch, Android TV is not threatened by this vulnerability. The process flow for Android TV differs from the mobile version, and the vulnerability does not affect it. Installing the vulnerable version (v4.1.9.4) on Android TV results in a `500` error when initiating a request.
   ![](https://images.seebug.org/content/images/2019/02/529f237c-45f7-4b1e-9034-da3d75c18235.png-w331s)

Testing revealed that the array value is `NULL`, causing the function to return `false` and resulting in a `500` error.
   ![](https://images.seebug.org/content/images/2019/02/dddade32-25da-4ff8-9fa3-cef462bee3e1.png-w331s)

**GET Request Directory Listing Fix**
The new version also fixes the issue of listing directories via `GET` requests.
   ![](https://images.seebug.org/content/images/2019/02/df9aaec2-2834-4511-bc14-6a9a594a871e.png-w331s)

When a `GET` request is initiated, it enters the `ai.bK()` function. This function only returns the file list if the request starts with `http://127.0.0.1`. Since HTTP requests do not start with this, the directory listing issue is mitigated, even though the check seems unusual.

### 0x05 Summary
Through this analysis, we have a comprehensive understanding of the ES File Explorer security vulnerability and its patches. The primary cause was the developer's oversight in validating incoming requests, leading to a significant security risk.

### References
- [Github](#)
- [Twitter](#)
- [TechCrunch](#)
- [Freebuf](#)
- [smwenku](#)

# About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. is founded by a group of high-profile international security experts. With over a hundred top-tier security professionals, Knownsec provides advanced cybersecurity solutions to governments and enterprises. Specializing in integrated network attack and defense technologies, Knownsec offers visualization solutions that meet world-class security standards, enhancing the monitoring, alerting, and defense capabilities of customer networks through industry-leading cloud computing and big data processing.

The 404 Team, the core security team of Knownsec, focuses on researching security vulnerabilities and offensive and defensive technologies in areas such as Web, IoT, industrial control, and blockchain. The team has submitted vulnerability research to many well-known vendors, including Microsoft, Apple, Adobe, Tencent, Alibaba, and Baidu, earning a high reputation in the industry.

Some of the most well-known contributions of Knownsec 404 Team include:
- [KCon Hacking Conference](http://kcon.knownsec.com/#/)
- [Seebug Vulnerability Database](https://www.seebug.org/)
- [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/)