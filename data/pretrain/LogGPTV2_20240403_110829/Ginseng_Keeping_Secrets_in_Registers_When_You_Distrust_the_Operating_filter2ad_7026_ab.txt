### Secure World Supported by TrustZone Technology

In the context of TrustZone technology, both user and kernel modes operate within the Normal world. The highlighted gray boxes represent our contributions.

#### A. Design Overview

Ginseng's fundamental unit of protection is a function. Ginseng introduces a `sensitive` keyword for developers to declare local variables, parameters, or return values as sensitive, as illustrated in Figure 2. Once declared, these variables and their corresponding functions are considered sensitive. To ensure the confidentiality and integrity of sensitive data, Ginseng must protect the code integrity of sensitive functions through a combination of static and runtime protections. Additionally, this collaboration provides control-flow integrity (CFI) when sensitive data are in registers.

**Static Protection:**
- **Register Allocation:** Ginsengâ€™s compiler ensures that sensitive variables are stored only in designated registers, never spilling them into memory. However, during execution context changes (e.g., function calls or context switching), registers can be saved to the stack. The Ginseng compiler generates code to save and restore these registers with sensitive data to and from a secure stack.
- **Compiler Enhancements:** The compiler performs static taint analysis to identify all variables that may carry sensitivity. This analysis is conservative due to the lack of semantic information about all sensitivity propagations. For example, the return value of a function with a sensitive parameter is considered sensitive. Developers can mark specific variables as insensitive to stop unnecessary sensitivity propagation.

**Runtime Protection:**
- **GService:** Ginseng employs a small, passive piece of software called GService, which runs in the Secure world on ARM. GService handles requests from sensitive functions. When sensitive data in registers must be saved or restored due to execution context changes, GService encrypts/decrypts them before saving to or restoring from memory, providing a secure stack abstraction.
- **Code Integrity and CFI:** GService prevents the OS from mapping the code pages of sensitive functions to the kernel address space, ensuring code integrity. It also enforces CFI by treating function pointers as sensitive variables.
- **APIs:** Ginseng provides a set of APIs for apps and GService to communicate, bypassing the untrusted OS.

**Architectural Requirements:**
- **Privilege Mode:** Ginseng requires a higher privilege mode than the untrusted OS to run GService.
- **Direct Communication:** A direct call mechanism from an app to the higher privilege mode to bypass the OS.
- **Memory Control Trapping:** A way to trap writes to virtual memory control registers into the higher privilege mode.

Both x86 and ARM architectures meet these requirements. On ARM, the hypervisor mode (EL3) is suitable for running GService, and a user process can use the hypervisor call instruction to communicate with GService. Modifications to virtual memory control registers can be trapped using VMCS (or VMCB in AMD).

For clarity, we will use ARM 64-bit (AArch64) terminology. The Normal world refers to the rich OS and software running on top of it, subdivided into EL0 (user mode), EL1 (kernel mode), and EL2 (hypervisor mode). The Secure world refers to the higher privilege mode, EL3. We will follow the AArch64 ISA and its calling convention, using "exception" to refer to both asynchronous (interrupts) and synchronous exceptions (e.g., permission faults).

#### B. Programming Model

Ginseng's unit of protection is a function, safeguarding local variables, parameters, and return values marked as sensitive by developers. This design choice influences the programming model as follows:

- **Marking Sensitive Variables:** Developers mark variables as sensitive, and the smaller and fewer sensitive variables, the more efficiently the program runs. The compiler indicates if the marked variables exceed the available registers.
- **Sensitivity Propagation:** Sensitivity is contagious within and between functions. Static taint analysis identifies all potentially sensitive variables, but developers can mark specific variables as insensitive to stop unnecessary propagation.
- **Local vs. Global Variables:** Ginseng limits protection to local variables because protecting global variables is expensive and often unnecessary. Global variables can be loaded from a secure source on demand.

**Example:**
Figure 2 shows a snippet of a two-factor authenticator. Only local variables with sensitive data are protected. In `genCode()`, the current time, challenge, and one-time password are not protected, while the two parameters are marked as sensitive. Functions like `truncate()` and `printf()` are not protected because they do not contain sensitive variables or parameters.

#### C. Static Protection

Ginseng extends the compiler to provide static protection for sensitive variables. This extension includes:

- **Dynamic Register Sensitivity:** The sensitivity of a register is dynamic, depending on whether it holds a live sensitive variable. At the variable's last use, the register loses its sensitivity and can be reused. Figure 3 illustrates this concept.
- **Two-Phase Register Allocation:** The compiler prioritizes allocating sensitive registers first to avoid unnecessary spills. In the first pass, it allocates registers for sensitive variables and builds a sensitivity table. The second pass uses this table to allocate registers for insensitive variables without overlapping.

**Example:**
Figure 4 shows a disassembled call site protection example. To protect sensitive data in registers x15 and x14, the Ginseng compiler assigns a call site identifier, encodes sensitive data hide/move decisions, and sends a request to GService through `s_writeMoveV()` before calling `hmac_sha1()`.

This comprehensive approach ensures the security and performance of sensitive data in Ginseng.