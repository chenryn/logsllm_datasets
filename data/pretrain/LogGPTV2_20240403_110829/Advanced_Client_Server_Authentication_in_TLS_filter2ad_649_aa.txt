# Advanced Client/Server Authentication in TLS

**Authors:**
- Adam Hess
- Jared Jacobson
- Hyrum Mills
- Ryan Wamsley
- Kent E. Seamons
- Bryan Smith

**Affiliation:**
- Computer Science Department, Brigham Young University, Provo, Utah, USA 84602

**Contact:**
- PI: EMAIL

## Abstract
This paper introduces the Trust Negotiation in TLS (TNT) protocol, an extension to the TLS handshake that incorporates recent advancements in trust negotiation to provide advanced client/server authentication. We discuss the current limitations of TLS in establishing trust between strangers and demonstrate how the TNT protocol overcomes these limitations. Our implementation, built using PureTLS, a freely available Java TLS package, is the first to offer confidential trust negotiation, verification of private keys during trust negotiation, and a single trust negotiation protocol supporting interoperable trust negotiation strategies.

## 1. Introduction
Many online interactions occur between entities with no prior relationship or common security domain. Traditional security approaches based on identity or capabilities are insufficient for establishing trust in such scenarios. New methods are needed that are secure, scalable, and portable.

When a server conducts a secure online transaction with a stranger, two primary security concerns must be addressed: confidentiality of the transaction details and client authentication according to a pre-existing policy. In our model, client authentication is based on attribute values encoded in digital credentials rather than identity. 

Transport Layer Security (TLS), an IETF adaptation of Netscapeâ€™s SSL V3.0, provides confidentiality and client/server authentication. However, TLS does not support the form of authentication required for many business transactions. For example, a business may want to provide services only to residents of a specific state, requiring proof of residency rather than the client's identity.

Clients also have their own criteria for trusting servers. For instance, a client might require a server to present a credential stating it will handle sensitive information properly before disclosing a credit card number. This mutual authentication is necessary when both parties need to establish trust before proceeding.

Our approach to mutual trust establishment is called trust negotiation, which involves the bilateral exchange of digital credentials to gradually build trust. Digital credentials contain digitally signed assertions about the owner and can be used to verify attributes. An example of trust negotiation is an online bookstore offering discounts to students at accredited universities. The student must provide a student ID and a credit card number, but only if the bookstore is a member of the Better Business Bureau (BBB).

This paper describes the TNT protocol, which extends the TLS handshake to incorporate trust negotiation. It addresses the issues of confidential trust negotiations and verifying credential ownership, which have not been fully addressed in previous proposals. We also describe our implementation of TNT, which extends PureTLS, a freely available Java TLS package.

## 2. Trust Negotiation
In our approach to automated trust establishment, trust is incrementally built by exchanging credentials and requests for credentials, a process known as trust negotiation. While a trust negotiation protocol defines the message ordering and content, a trust negotiation strategy controls the exact content of the messages, such as which credentials to disclose and when to terminate the negotiation.

Figure 1 illustrates the TrustBuilder architecture for trust negotiation. A security agent mediates access to local protected resources, including services, access control policies, and credentials. Disclosure of these resources is governed by access control policies.

The TrustBuilder architecture supports a single protocol for establishing trust and is designed to accommodate customized negotiation strategies. All trust negotiation strategies aim to build trust through the exchange of digital credentials to gain access to a protected resource. Once the access control policy for a credential is satisfied, the local negotiation strategy determines whether the credential is relevant and should be disclosed.

From the various trust negotiation strategies proposed in the literature, it is clear that there are many ways to negotiate trust. The TrustBuilder architecture is designed to support a family of negotiation strategies and ensure interoperability.

## 3. Transport Layer Security (TLS)
TLS is a connection-oriented protocol that provides a secure channel between a client and a server, supporting confidentiality, data integrity, and client/server authentication. The TLS handshake protocol handles authentication and the negotiation of security parameters, while the TLS record protocol specifies how application data is transmitted securely.

The focus of this paper is on client/server authentication in TLS, which is managed in the handshake protocol. Figure 2 illustrates the general TLS handshake protocol, with optional messages shaded. The exact sequence of messages varies depending on the key exchange method selected during the handshake. The TLS handshake has four phases: initial hello messages, key exchange, certificate exchange, and finished messages.

## 4. The TNT Protocol
The TNT protocol extends the TLS handshake to incorporate trust negotiation, addressing the limitations of traditional TLS in establishing trust between strangers. The protocol provides a solution for confidential trust negotiations and verifying credential ownership. The details of these issues have not been fully addressed in previous trust negotiation protocols.

## 5. Implementation
We describe our implementation of the TNT protocol, which extends PureTLS, a freely available Java TLS package. This implementation is the first to offer confidential trust negotiation, verification of private keys during trust negotiation, and a single trust negotiation protocol supporting interoperable trust negotiation strategies.

## 6. Related Work
We discuss related work in the field of trust negotiation and TLS, highlighting the contributions and limitations of existing approaches.

## 7. Conclusions and Future Work
We conclude with a summary of our findings and outline future work plans, including potential improvements and extensions to the TNT protocol.

---

**Figure 1.** The TrustBuilder architecture for automated trust negotiation. Each negotiation participant is represented by a security agent who manages local protected resources and their associated access control policies. TrustBuilder provides middleware support for security agents to enable negotiation strategy interoperability.

**Figure 2.** General TLS handshake protocol, with optional messages shaded. The exact sequence of messages in a given handshake depends on the key exchange method selected by the client and server.