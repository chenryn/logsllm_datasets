title:Advanced Client/Server Authentication in TLS
author:Adam Hess and
Jared Jacobson and
Hyrum Mills and
Ryan Wamsley and
Kent E. Seamons and
Bryan Smith
Advanced Client/Server Authentication in TLS 
Adam Hess, Jared Jacobson, Hyrum Mills, Ryan Wamsley, Kent E. Seamons, Bryan Smith 
Computer Science Department 
Brigham Young University 
Provo, Utah, USA 84602 
PI:EMAIL 
ABSTRACT 
  This  paper  describes 
Many  business  transactions  on  the  Internet  occur 
between  strangers,  that  is,  between  entities  with  no  prior 
relationship and no common security domain.  Traditional 
security  approaches  based  on  identity  or  capabilities  do 
not  solve  the  problem  of  establishing  trust  between 
strangers.    New  approaches  to  trust  establishment  are 
required that are secure, scalable, and portable.  One new 
approach to mutual trust establishment is trust negotiation, 
the  bilateral  exchange  of  digital  credentials  to  establish 
trust  gradually. 
the  Trust 
Negotiation  in  TLS  (TNT)  protocol,  an  extension  to  the 
TLS handshake protocol that incorporates recent advances 
in 
to  provide  advanced 
client/server  authentication  in  TLS.    In  this  paper  we 
describe  the  current  limitations  in  TLS  client/server 
authentication  with  respect  to  trust  establishment,  and 
show  how  the  TNT  protocol  overcomes  them.    We  also 
describe our implementation of TNT, built using PureTLS, 
a  Java  TLS  package  that  is  freely  available.    This 
implementation  is  the  first  to  provide  confidential  trust 
negotiation,  verification  of  private  keys  during  trust 
negotiation,  and  a  single  trust  negotiation  protocol 
supporting interoperable trust negotiation strategies. 
trust  negotiation 
into  TLS 
1.  Introduction 
that 
Many  interactions  on  the  Internet  occur  between 
strangers, 
is,  between  entities  with  no  prior 
relationship and no common security domain.  Traditional 
security approaches based on identity or capabilities do not 
solve  the  problem  of  authentication  between  strangers, 
because strangers do not share a common security domain.  
New approaches are required that are secure, scalable, and 
portable. 
When  a  server  conducts  a  secure  on-line  transaction 
with  a  stranger,  two  common  security  problems  must  be 
addressed: first, the details of the transaction must remain 
confidential; second, the server must authenticate the client 
according to a pre-existing policy that specifies who is to 
be considered trustworthy for the given transaction.  In our 
model, authentication of the client is not based on identity 
but 
in  digital 
credentials—the  online  analogues  of 
today’s  paper 
credentials. 
rather  on  attribute  values  encoded 
[4], 
the 
(TLS) 
for  strangers 
Transport  Layer  Security 
IETF 
adaptation  of  Netscape’s  SSL  V3.0  [5]  protocol,  can 
provide  confidentiality.    TLS  also  provides  client  and 
server authentication.  However, TLS authentication is not 
suitable 
to  conduct  business 
transactions.  For example, a business may be interested in 
providing  a  service  to  residents  of  a  given  state.    The 
identity of the client accessing the  service is irrelevant to 
this  decision;  the  client  only  needs  to  establish  proof  of 
residency.      As  discussed  further  in  section  3,  TLS  does 
not provide this form of authentication. 
trying 
Clients may have their own criteria for trusting servers.  
For example, before the client discloses a credential he or 
she considers to be sensitive, such as a credit card number 
and expiration date, the client may first require a credential 
from  the  server  stating  that  the  server  will  handle  the 
client’s  private 
this 
assurance,  customers  who  do  not  want  their  sensitive 
information disclosed to others will go elsewhere. 
information  properly.  Without 
An interesting case to consider occurs when the server 
must authenticate the client  in order to provide a service, 
but  the  client  considers  those  credentials  sensitive.  The 
client  therefore  wants  to  authenticate  the  server  before 
disclosing them.  In such a case, a strictly one-way model 
of authentication will not suffice; mutual authentication is 
necessary. 
Our  approach  to  mutual  trust  establishment  is  called 
trust  negotiation, 
the  bilateral  exchange  of  digital 
credentials  to  establish  trust  gradually  [10][13][14][15].  
Digital credentials contain digitally signed assertions by a 
credential  issuer  about  a  credential  owner.    A  credential 
uses name/value pairs to describe one or more attributes of 
the owner.  Each credential also contains the public key of 
the credential owner and is signed using the issuer's private 
key.    The  owner  can  answer  challenges  and  otherwise 
demonstrate ownership of the credentials.  Credentials are 
a  more  general  name  for  certificates,  such  as  X.509v3 
certificates [8]. 
As an example of trust negotiation, an on-line bookstore 
may offer discounts to students at accredited universities.  
When a first-time customer requests a student discount, he 
or  she  will  not  have  prior  knowledge  of  the  bookstore’s 
requirements for proof of student status.  One approach is 
for  the  server  to  transmit  a  policy  to  the  client.  Such  a 
policy  could  specify  that  the  customer  must  submit  a 
student  ID  and  a  credit  card number  in  order  to  make  an 
on-line  purchase  and  receive  a  student  discount.  The 
customer (for example, a female student) is only willing to 
disclose  her  credit  card  number  to  a  business  that  is  a 
member  of  the  Better  Business  Bureau  (BBB).    In 
accordance  with  her  policy,  her  trust  negotiation  agent 
discloses her student ID and requests that the server return 
a  BBB  member  credential  to  the  client.    The  server  then 
sends  the  client  a  BBB  member  credential.    Finally,  the 
client  submits  a  valid  digital  credit  card  number  and 
receives the student discount. 
Since  digital  credentials  can  often  contain  sensitive 
information, associating an access control policy with each 
credential  controls  credential  disclosure.    As  in  the 
example  above,  a  credential  is  disclosed  only  when  its 
access control policy has been met.  For a trust negotiation 
to be successful, some credentials must be freely available 
on at least one side of the negotiation. 
This  paper  describes  the  Trust  Negotiation  in  TLS 
(TNT)  protocol,  an  extension  to  the  TLS  handshake 
protocol  that  incorporates  trust  negotiation  to  provide 
advanced  client/server  authentication  in  TLS.    The  TNT 
protocol  is  based  on  recent  advances  in  trust  negotiation 
and  provides  a  solution  for  confidential  trust  negotiations 
and  for  verifying  credential  ownership.    The  details  of 
these  issues  have  so  far  not  been  addressed  in  past  trust 
negotiation protocol proposals.  This paper also describes 
our  implementation  of  TNT,  which  extends  PureTLS,  a 
freely  available  Java  implementation  of  SSL/TLS  (See 
http://www.rtfm.com/puretls/ for more details).  Section 2 
discusses recent advances in  the area of trust negotiation.  
Section  3  describes  the  TLS  handshake  protocol  and 
in  TLS  client/server 
identifies  current 
authentication  with  regard 
to  mutual  authentication 
between  strangers.    Section  4  contains  the  description  of 
the  TNT  protocol  that  extends  the  TLS  handshake 
limitations 
protocol.  Section 5 describes an implementation of TNT, 
and Section 6 discusses related work.  Section 7 contains 
conclusions and future work plans.   
2.  Trust negotiation 
In our approach to automated trust establishment, trust is 
established  incrementally  by  exchanging  credentials  and 
requests for credentials, an iterative process known as trust 
negotiation  [10][13][14][15].    While  a  trust  negotiation 
protocol defines the ordering of messages and the type of 
information  messages  will  contain,  a  trust  negotiation 
strategy  controls  the  exact  content  of  the  messages,  i.e., 
which credentials to disclose,  when to disclose them, and 
when to terminate a negotiation.   
Figure  1  introduces  our  TrustBuilder  architecture  for 
trust negotiation.  A security agent mediates access to local 
protected  resources: services, access control policies, and 
credentials.  We say a credential or access control policy is 
disclosed  if  it  has  been  sent  to  the  other  party  in  the 
negotiation,  and  that  a  service  is  disclosed  if  the  other 
party  is  given  access  to  it.    Disclosure  of  protected 
resources is governed by access control policies.   
The  architecture  in  figure  1  supports  a  single  protocol 
for  establishing  trust.    The  architecture  is  designed  to 
support  customized  negotiation  strategies. 
  All  trust 
negotiation  strategies  share  the  goal  of  building  trust 
through an exchange of digital credentials.  The purpose of 
this  exchange  is  obtaining  access  to  a  protected resource.  
Once  the  access  control  policy  for  a  particular  credential 
has  been  satisfied,  a  local  negotiation  strategy  must 
determine whether the credential is relevant to the current 
stage  of  the  negotiation.    If  so,  it  will  be  disclosed.  
Different  negotiation 
strategies  will  use  different 
definitions  of  relevance,  involving  tradeoffs  between 
computational costs, the length of the negotiation, and the 
number of disclosures.   
From 
the  handful  of 
trust  negotiation  strategies 
proposed so far in the literature [10][13][14][15], it is clear 
that there are endless variations in how to negotiate trust.  
It is unlikely that a single strategy will meet the needs of 
all  users.    The  TrustBuilder  architecture  is  designed  to 
policy-language-
support 
a 
independent 
that  ensures 
interoperability  within  a  family  of  negotiation  strategies 
[15]. 
trust  negotiation  protocol 
strategy-independent, 
Access  control  policies  for  local  resources  specify 
credentials  that  the  other  negotiation  participant  must 
disclose  in  order  to  obtain  access  to  those  resources.  
During  a  negotiation,  the  security  agent  invokes  a  local 
compliance checker in two ways.  First, the security agent 
receives credentials from the other participant and checks 
to  see  if  the  relevant  local  access  control  policies  are 
satisfied by the remote credentials before disclosing a local 
protected  resource.    Second,  the  agent  may  also  receive 
Local Site Security Agent 
Remote Site Security Agent 
Negotiation 
Manager 
Negotiation 
Protocol 
Strategy Engine API 
Strategy 
Engine 
Access 
control 
policies 
Protected 
Resources 
services, 
credentials, 
policies 
Disclosures 
Access 
control 
policies 
Protected 
Resources 
services, 
credentials, 
policies 
Negotiation 
Manager 
Negotiation 
Protocol 
Strategy Engine API 
Strategy 
Engine 
Figure 1.  The TrustBuilder architecture for automated trust negotiation.  A security agent who 
manages local protected resources and their associated access control policies represents each 
negotiation participant.  TrustBuilder provides the necessary middleware support for security 
agents to enable negotiation strategy interoperability. 
remote  access  control  policies  that  serve  as  requests  for 
local  credentials.    The  agent  checks  to  see  whether  any 
local  credentials  satisfy  the  remote  access  control  policy.  
If so, the agent uses the negotiation strategy to determine if 
and when those local credentials should be disclosed to the 
other  party  to  advance  negotiation  toward  the  goal  of 
granting access to the protected resource.   
When  an  access  control  policy  P  contains  sensitive 
information, then P itself requires protection in the form of 
an access control policy for access to P.  Earlier  work  in 
trust  negotiation  introduced  support  for  sensitive  policies 
using  policy  graphs  [10].    The  presence  of  sensitive 
policies  requires  that  trust  be  established  gradually.    For 
example,  suppose  a  client  begins  an  interaction  with  an 
unfamiliar web server.  Before sending a sensitive request 
for credentials to the server that would reveal information 
regarding the nature of the client’s business, the client may 
request  credentials  attesting  to  how  the  server  handles 
private information and whether or not the server conforms 
to  certified  security  practices.    Once  the  client  has 
established this initial level of trust, the client can continue 
by  sending  the  sensitive  request  for  further  credentials 
from the server. 
interoperability  of 
the  definition  and 
The  previous  work  in  trust  negotiation  has  focused  on 
support  for  sensitive  credentials  and  access  control 
policies, 
trust 
negotiation strategies, and a trust negotiation protocol.  In 
[15], a trust negotiation protocol was presented, along with 
the Disclosure Tree Strategy (DTS) family.  It was proved 
that  if  two  participants  each  choose  a  strategy  from  the 
DTS family, they will be able to negotiate trust just as well 
as if they had both adopted the same strategy.  The issues 
of  confidentiality  and  verifying  ownership  of  submitted 
trust  negotiation  have  not  been 
credentials  during 
addressed  previously.  To  date,  no  implementation  of  the 
negotiation protocol or negotiation strategies exists.   
3.  Transport Layer Security (TLS) 
TLS  is  a  connection-oriented  protocol  that  provides  a 
secure  channel  between  a  client  and  a  server.    TLS 
supports  confidentiality,  data  integrity,  and  client/server 
authentication.    The  TLS  handshake  protocol  provides  a 
means  for  authentication  and  the  negotiation  of  security 
parameters, such as the encryption algorithms, encryption 
keys,  MAC  keys,  etc.,  that  are  used  to  transmit  data 
securely. 
  The  TLS  record  protocol  specifies  how 
application  data  is  actually  transmitted  between  two 
communicating  hosts  so  that  confidentiality  and  data 
integrity are provided.   
The  focus  of  the  research  described  in  this  paper  is 
authentication.    Client/server  authentication  in  TLS  is 
handled  in  the  handshake  protocol.    In  this  section,  we 
describe  the  TLS  handshake  protocol  for  client/server 
authentication  and  identify  the  limitations  in  the  protocol 
for authenticating strangers on the Internet.  
The  general  TLS  handshake  protocol  is  illustrated  in 
Figure  2,  with  optional  messages  shaded.    The  exact 
sequence  of  messages  in  a  given  handshake  between  a 
client and server will vary depending on the key exchange 
method  selected  by  the  client  and  server  during  the 
handshake.    The  TLS  handshake  has  four  phases.    In  the 
first phase, the client and server exchange hello messages 
that  are  used  to  establish  security  parameters  used  in  the 
TLS session and settings used during the handshake, such 
as the key exchange algorithm.  During the second phase, 
Client 
Server 
Client 
Server 
ClientHello 
ServerHello 
Certificate 
ServerKeyExchange 
CertificateRequest 
ServerHelloDone 
Certificate 
ClientKeyExchange 
CertificateVerify 
ChangeCipherSpec 
Finished 
ChangeCipherSpec 
Finished 
ClientHello 