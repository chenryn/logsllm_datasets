res :=[][]int{}
for i：=1en(tmp） -1;i >= 0;i--{
res = append(res, tmp[i])
return res
108.ConvertSortedArraytoBinarySearchTree
题目
Given an array where elements are sorted in ascending order, convert it to a height balanced
BST.
For this problem, a height-balanced binary tree is dlefined as a binary tree in which the depth of
the two subtrees of every node never differ by more than 1.
Example:
Given the sorted array: [-10,-3,0,5,9],
One possible answer 1s: [0, -3,9,-10,nu11,5], which represents the fo1lowing
height balanced BST:
0
/
-3
6
/
/
-105
题目大意
将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指
一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。
解题思路
·把一个有序数组转换成高度平衡的二叉搜索数，按照定义即可
代码
package leetcode
---
## Page 233
Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func sortedArrayToBST(nums []int) *TreeNode {
if 1en(nums)== 0{
return ni1
return &TreeNode{val: nums[1en(nums)/2], Left:
sortedArrayToBST(nums[:1en(nums)/2]), Right:
sortedArrayToBST(nums[1en(nums) /2+1:])}
109.ConvertSortedListtoBinarySearchTree
题目
Given a singly linked list where elements are sorted in ascending order, convert it to a height
balanced BST.
For this problem, a height-balanced binary tree is dlefined as a binary tree in which the depth of
the two subtrees of every nodle never dliffer by more than 1.
Example:
Given the sorted 1inked 1ist: [-10,-3,0,5,9],
One possible answer is: [0,-3,9,-10,nu11,5], which represents the fo1lowing
height balanced BST:
0
/
- 3
9
/
10
5
题目大意
将链表转化为高度平衡的二叉搜索树。高度平衡的定义：每个结点的2个子结点的深度不能相差超过1
---
## Page 234
解题思路
思路比较简单，依次把链表的中间点作为根结点，类似二分的思想，递归排列所有结点即可。
代码
package leetcode
☆
* Definition for singly-linked list.
type ListNode struct {
valint
Next *ListNode
六*
* Definition for a binary tree node.
type TreeNode struct {
val int
Left *TreeNode
Right *TreeNode
// TreeNode define
type TreeNode struct {
Va1
int
Left
*TreeNode
Right *TreeNode
func sortedListToBST(head *ListNode) *TreeNode {
if head == nil {
return ni1
if head != nil && head.Next == nil {
return &TreeNode{val: head.val, Left: nil, Right: ni1}
middleNode, preNode := middleNodeAndPreNode (head)
if middleNode == nil {
return ni1
if preNode != nil {
preNode.Next = ni1
if middleNode == head {
head = ni1
---
## Page 235
return &TreeNode{val: middleNode.Val, Left: sortedListToBST(head) , Right:
sortedListToBST(middleNode.Next))
func middleNodeAndPreNode(head *ListNode) (middle *ListNode, pre *ListNode) {
if head == nil l1 head.Next == nil {
return nil, head
3
p1 := head
p2 := head
for p2.Next != nil && p2.Next.Next != nil {
pre = p1
pl = pl.Next
p2 = p2.Next.Next
return pl, pre
110.BalancedBinaryTree
题目
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is dlefined as:
a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Example 1:
Given the following tree [3,9,20,null,null, 15,7]:
3
/
920
/
15
Return true.
Example 2:
Given the following tree [1,2,2,3,3,null,null,4,4]:
---
## Page 236
Return false.
题目大意
判断一棵树是不是平衡二叉树。平衡二叉树的定义是：树中每个节点都满足左右两个子树的高度差4>11=>2 which sum is 22.
题目大意
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值
相加等于目标和。说明：叶子节点是指没有子节点的节点。
解题思路
·递归求解即可
---
## Page 239
代码
package leetcode
☆
Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func hasPathSum(root *TreeNode,sum int) bool {
if root == nil {
return false
if root.Left == nil && root.Right == nil {
return sum == root.Val
return hasPathSum(root.Left, sum-root.Val) 11 hasPathSum(root.Right, sum-
root.Va1)
113.PathSumll
题目
Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given
sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,
5
/
8
/
11
13
4
/
---
## Page 240
Return:
[5, 4,11,2],
[5,8,4,5]
一
题目大意
给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。说明：
叶子节点是指没有子节点的节点。
解题思路
·这一题是第257题和第112题的组合增强版
代码
package leetcode
/☆
* Definition for a binary tree node.
 type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
//解法一
func pathSum(root *TreeNode,sum int) [][]int {
var slice [][]int
slice = findPath(root,
sum，slice,[]int(ni1）)
return slice
func findPath(n *TreeNode, sum int, slice [][]int, stack []int) [][]int {
if n == nil {
return slice
Sum == n.Va1
stack = append(stack, n.val)
if sum == 0 && n.Left == nil && n.Right == ni1 {
slice = append(slice, append([]int{}, stack...))
stack = stack[:len(stack)-1]
---
## Page 241
slice = findPath(n.Left, sum, slice, stack)
slice = findpath(n.Right, sum, slice, stack)
return slice
//解法二
func pathSuml(root *TreeNode, sum int) [][]int {
if root == nil {
return [][]int{}
if root.Left == nil && root.Right == nil {
if sum == root.val {
return [][]int{[]int{root.val}}
path, res := []int{}, [][]int{}
tmpLeft = pathsum(root.Left, sum-root.val)
path = append(path, root.val)
if len(tmpLeft) > 0 {
for i := 0;i  0{
for i:= 0;i< len(tmpRight);i++{
tmpRight[i] = append(path, tmpRight[i]...)
res = append(res, tmpRight...)
return res
114.FlattenBinaryTreetoLinkedList
题目
Given a binary tree, flatten it to a linked list in-place.
For example, given the following tree:
---
## Page 242
2
/
4
The flattened tree should look like:
题目大意
给定一个二叉树，原地将它展开为链表。
解题思路
·要求把二叉树“打平”，按照先根遍历的顺序，把树的结点都放在右结点中。
·按照递归和非递归思路实现即可。
递归的思路可以这么想：倒序遍历一树，即是先遍历右孩子，然后遍历左孩子，最后再遍历根节
点。
/\
2 5
/1
34
6
pre = 5
cur = 4
---
## Page 243
/\
34
5
6
pre = 4
cur = 3
6
cur = 2
pre = 3
cur = 1
pre = 2
---
## Page 244
2
3
4
1
·可以先仿造先根遍历的代码，写出这个倒序遍历的逻辑
public void flatten(TreeNode root) {
if (root == nu11)
return;
flatten(root.right) ;
flatten(root.1eft) ;
·实现了倒序遍历的逻辑以后，再进行结点之间的拼接：