enableMemoryAllocationChecking=true
• Restart the agent
Note: The memory allocation checking functionality uses the maximum amount of memory that a
managed transfer requires, which might be more than the actual amount of memory used (particularly
for message-to-file and file-to-message transfers). This means that turning it on can result in fewer
managed transfers being processed by an agent.
If the agent continues to experience java.lang.OutOfMemoryErrors due to Java heap exhaustion,
then run the fteRas command to collect the ABEND files, Javacores, heap dump files and snap dump
files (along with other useful information about the MFT topology), and make the output available to IBM
Support for analysis.
Related concepts
“What to do if your MFT agent ABENDS with a java.lang.OutOfMemoryError due to native memory
exhaustion ” on page 156
While processing a number of managed transfer requests, such as file-to-file, message-to-file or file-to-
message transfers, the agent abnormally ends (ABENDS) reporting a java.lang.OutOfMemoryError,
and at the time your total RAM memory was not fully utilized. This exception has been caused by native
memory exhaustion.
What to do if your MFT agent ABENDS with a java.lang.OutOfMemoryError due to
native memory exhaustion
While processing a number of managed transfer requests, such as file-to-file, message-to-file or file-to-
message transfers, the agent abnormally ends (ABENDS) reporting a java.lang.OutOfMemoryError,
and at the time your total RAM memory was not fully utilized. This exception has been caused by native
memory exhaustion.
Diagnosing the problem
When this issue occurs, the affected agent ABENDs and generates two files that provide details on the
root cause:
• An ABEND file. The name of this file conforms to the naming convention
ABEND.FTE.date_timestamp.identifier.log.
156 Troubleshooting and Support for IBM MQ
On Multiplatforms, the file is written to the MQ_DATA_PATH/mqft/logs/
coordination_qmgr_name/agents/agent_name/logs/ffdc directory.
On z/OS, the file is written to the z/OS UNIX System Services (z/OS UNIX) location
$BFG_CONFIG/mqft/logs/coordination_qmgr_name/agents/agent_name/logs/ffdc
• A Javacore file. The name of this file has the following format:
javacore.datestamp.timestamp.pid.identifier.txt
On Multiplatforms, the file is written to the MQ_DATA_PATH/mqft/logs/
coordination_qmgr_name/agents/agent_name directory.
On z/OS, the file is written to the z/OS UNIX location $BFG_CONFIG/mqft/logs/
coordination_qmgr_name/agents/agent_name directory.
The ABEND and Javacore pair contain information similar to the examples shown below:
Example: Pair one
Abend file
Filename:
C:\ProgramData\IBM\MQ\mqft\logs\COORDQM\agents\AGENT1\logs\ffdc\ABEND.FTE.20200109113518046.1764802189777
906538.log
Level: p900-005-180821
Time: 09/01/2020 11:35:18:046 GMT
Thread: 96 (TransferSender[414d51204d44424b525030372020202045fbd6532ebfaa02])
Class: com.ibm.wmqfte.thread.FTEThread
Instance: 55b455b4
Method: uncaughtException
Probe: ABEND_001
Cause: java.lang.OutOfMemoryError: native memory exhausted
java.lang.OutOfMemoryError: native memory exhausted
at com.ibm.mq.jmqi.local.internal.base.Native.MQPUT(Native Method)
at com.ibm.mq.jmqi.local.LocalMQ.MQPUT(LocalMQ.java)
at com.ibm.wmqfte.wmqiface.WMQQueueImpl.put(WMQQueueImpl.java)
at com.ibm.wmqfte.wmqiface.WMQQueueImpl.put(WMQQueueImpl.java)
at com.ibm.wmqfte.transfer.impl.TransferSenderRunnable.doTransfer(TransferSenderRunnable.java)
at com.ibm.wmqfte.transfer.impl.TransferSenderRunnable.run(TransferSenderRunnable.java)
at java.lang.Thread.run(Thread.java)
at com.ibm.wmqfte.thread.FTEThread.run(FTEThread.java)
Javacore file
NULL ------------------------------------------------------------------------
0SECTION TITLE subcomponent dump routine
NULL ===============================
1TISIGINFO Dump Event "systhrow" (00040000) Detail "java/lang/OutOfMemoryError" "native memory
exhausted" received
1TIDATETIME Date: 2020/01/09 at 11:35:18
1TIFILENAME Javacore filename:
C:\ProgramData\IBM\MQ\mqft\logs\COORDQM\agents\AGENT1\javacore.20200109.113518.14148.0002.txt
Example: Pair two
ABEND file
Filename:
C:\ProgramData\IBM\MQ\mqft\logs\COORDQM\agents\AGENT1\logs\ffdc\ABEND.FTE.20200109143700286.3177895731698
464509.log
Level: p900-005-180821
Time: 09/01/2020 14:37:00:286 GMT
Thread: 918 (AgentStatusPublisher)
Class: com.ibm.wmqfte.thread.FTEThread
Instance: bc10bc1
Method: uncaughtException
Probe: ABEND_001
Cause: java.lang.OutOfMemoryError: Failed to create a thread: retVal -1073741830, errno 12
IBM MQ troubleshooting and support 157
java.lang.OutOfMemoryError: Failed to create a thread: retVal -1073741830, errno 12
at java.lang.Thread.startImpl(Native Method)
at java.lang.Thread.start(Thread.java)
Javacore file
NULL ------------------------------------------------------------------------
0SECTION TITLE subcomponent dump routine
NULL ===============================
1TISIGINFO Dump Event "systhrow" (00040000) Detail "java/lang/OutOfMemoryError" "Failed to create a
thread: retVal -1073741830, errno 12" received
1TIDATETIME Date: 2020/01/09 at 14:37:00
1TIFILENAME Javacore filename: C
C:\ProgramData\IBM\MQ\mqft\logs\COORDQM\agents\AGENT1\javacore.20200109.143700.2652.0003.txt
Why this problem occurs
This issue occurs due to exhaustion of the native heap memory on the system where the agent is running.
See How MFT agents use Java heap and native heap memory for more information on the distinctions
between Java heap memory and native heap memory.
Avoiding the problem
There are a number of actions that you can take to help reduce the likelihood of an MFT agent stopping
due to a java.lang.OutOfMemoryError, caused by exhaustion of native memory:
1.Reduce the size of the Java heap for the JVM running the MFT agent.
The greater the size of the allocated Java heap, the less memory is available to the native heap.
Reducing the size of the Java heap used by an agent can free up more memory for the native heap.
By default, the Java heap of an agent is set to 512 MB. If you have changed this to make it a larger
value, consider reducing it, and testing with your production-like workload.
• To lower or change the Java heap when running the agent as a normal process:
Set the BFG_JVM_PROPERTIES environment variable to pass options directory to the JVM. For
example, on Windows, to set the maximum heap size to 1024 MB run the following command before
using the fteStartAgent command:
set BFG_JVM_PROPERTIES="-Xmx1024M"
For more information about how to set Java system properties using the BFG_JVM_PROPERTIES
environment variable, see Java system properties for MFT.
• To lower or change the Java heap when running the agent as a Windows service:
Use the fteModifyAgent command and specify the -sj parameter to set the -Xmx property on the
Windows service.
The following example uses the fteModifyAgent command with the -sj parameter, to set the
maximum size of the Java heap for a JVM running a Windows service configured agent:
fteModifyAgent.cmd -agentName AGENT1 -s -su user1 -sp passw0rd -sj -Xmx1024M
You can check this has been successfully set, by reviewing the output0.log file of the agent, after
the agent has been restarted. In the Start Display Current Environment section, a value of 1024 MB
will be reported, as follows:
The maximum amount of memory that the Java virtual machine will attempt to use is: '1024'MB
2.Restrict native memory use
Often, java.lang.OutOfMemoryErrors caused by native heap exhaustion are seen if an agent
connects to its agent queue manager using the BINDINGS transport. When the agent has been
158 Troubleshooting and Support for IBM MQ
configured to use the BINDINGS transport, the agent calls native methods whenever it needs to
communicate with the queue manager.
This means that native memory usage grows as the workload of the agent increases, due to more
connections to the queue manager and increased message communication. In this situation, reducing
the workload can help. To do this, set the following agent properties to a lower value than the default
25:
• maxSourceTransfers
• maxDestinationTransfers
This reduces the number of concurrent transfers that can occur, and therefore decreases the
maximum concurrent workload for the agent.
3.Configure the agent to use the CLIENT transport when connecting to its agent queue manager. You can
do this by setting the following agent properties:
• agentQMgrHost
• agentQMgrPort
• agentQMgrChannel
You can find information about these properties in The MFT agent.properties file topic.
This ensures that all communication between the agent and the queue manager takes place over
TCP/IP, rather than native code, which reduces the amount of native memory used by the agent.
Important: Taking this action also decreases performance. By using a TCP/IP connection to the local
host, rather than native code, the configuration is not as efficient when the agent requires interactions
with the queue manager.
Related concepts
“What to do if your MFT agent ABENDS with a java.lang.OutOfMemoryError due to Java heap exhaustion ”
on page 153
While processing a number of managed transfer requests, such as file-to-file, message-to-file or file-to-
message transfers, the agent abnormally ends (ABENDS) reporting a java.lang.OutOfMemoryError,
and at the time your total RAM memory was not fully utilized. This exception has been caused by Java
heap exhaustion.
Troubleshooting logger problems
Use the following reference information to help you to resolve issues with loggers:
Related reference
“Common problems” on page 166
Common problems that might occur in your Managed File Transfer network.
“Return codes for MFT” on page 124
Managed File Transfer commands, Ant tasks, and log messages provide return codes to indicate whether
functions have successfully completed.
What to do if you receive an error when updating your MFT database schema on an
Oracle database
You might receive the following error message when updating your database schema to the latest level by
using the ftelog_tables_oracle_702_703.sql file: ERROR at line 1: ORA-02289: sequence
does not exist. This error occurs because the sequences and triggers used by the tables are not in the
same schema as the tables.
About this task
To fix this problem, you must edit the contents of the ftelog_tables_oracle_702_703.sql before
running it.
IBM MQ troubleshooting and support 159
Procedure
1.Find out which schema the sequences and triggers used by the Managed File Transfer database logger
tables are located in.
• On Db2, you can use the Control Center to view the tables and schema.
• On Oracle, you can use the Enterprise Manager to view the tables and schema.
2.Open the ftelog_tables_oracle_702_703.sql file in a text editor.
3.In each occurrence of the text SELECT FTELOG.sequence_name.nextval replace the text FTELOG
with the name of the schema where your existing sequences are located.
4.Before each occurrence of the text CREATE OR REPLACE TRIGGER FTELOG.trigger_name, insert
the text DROP TRIGGER schema_name.trigger_name, where schema_name is the name of the
schema where your existing triggers are located.
5.Use the edited ftelog_tables_oracle_702_703.sql file to update the database tables.
MFT logger error handling and rejection
The Managed File Transfer logger identifies two types of error: per-message errors and general errors.
Per-message errors are likely to be caused by a problem with one or a few individual messages. Some
examples of situations, which are identified as per-message errors are as follows:
• The result code, which is a required item of data, is missing from a message
• A transfer specifies a job name that is 3000 characters long and too large for the associated database
column
• A progress message is received for a transfer, but there is no record of the transfer having been started
(perhaps because of a misrouted or delayed transfer start message)
• A message is received, which is not a Managed File Transfer log message
General errors are all those errors that are not per-message errors. These are likely to be because of
configuration problems or program errors.
When a per-message error is encountered, the logger rejects the message by placing the message on
the reject queue. Nothing is written to the output log, so periodically inspect or continuously monitor the
reject queue to detect rejected messages.
If too many messages are rejected consecutively, without any messages being successfully written to the
database, this is treated as a general error. For example, consider a site that always uses 10 character
codes as job names, but which has inadvertently reconfigured the job name column to be two characters
wide. Although data that is too wide is usually a per-message error, in this case the configuration problem
is general and is detected as a general error. You can tune the number of consecutive per-message errors
needed to cause a general error using the wmqfte.max.consecutive.reject property.
If a general error is detected the logger rolls back any messages not yet committed to the queue manager,
and then retries periodically. A message identifying the problem is written to the output log and to the
console if the logger was started in foreground mode with the -F parameter.
The location of the output logs for the logger is dependent on whether it is a stand-alone or JEE database
logger. For a stand-alone database logger it is located in the directory MQ_DATA_PATH/mqft/logs/
coordination_qmgr_name/loggers/logger_name. For a JEE database logger it is located in the
standard output log of the application server.
The reject queue
Messages that result in per-message errors are moved to the reject queue. On each rejected message,
a message property is set to indicate why the message was rejected. The full name of the property is
usr.WMQFTE_ReasonForRejection, although usr. is omitted in some contexts (including JMS and the
IBM MQ Explorer).
If you are using IBM MQ Explorer, you can view the contents of the reject queue by right-clicking the
queue and clicking Browse Messages. To see why a message was rejected, double-click the message
160 Troubleshooting and Support for IBM MQ
to open its properties dialog, then select the Named Properties page. You will see a property called
WMQFTE_ReasonForRejection. Alternatively, you could write or configure a monitoring tool to obtain
this information automatically.
Sometimes, you might want to reprocess messages from the reject queue. In the example described
previously in this topic, with a two-character job name column in the database, the messages could
be successfully processed after the width of the database column had been increased. As another
example, when a transfer-complete message is rejected because its associated transfer-start was
missing, the transfer-start message might be received later. Reprocessing the transfer-complete will then
be successful.
To reprocess messages, move them from the reject queue to the input queue. In a normal
installation, where the logger created its own managed subscription, the input queue is defined by
the queue manager and has a name like SYSTEM.MANAGED.DURABLE.49998CFF20006204. You can
identify the input queue by looking at the Destination name in the properties for the subscription
SYSTEM.FTE.DATABASELogger.AUTO, or using the following MQSC command:
DISPLAY SUB(SYSTEM.FTE.DATABASELogger.AUTO) DEST
One way of moving messages between queues is to use the MA01 SupportPac, for example:
q -IFTE.REJECT -oSYSTEM.MANAGED.DURABLE.49998CFF20006204
The reject queue might contain messages rejected for various reasons, only some of which have been
resolved. In this case you can still reprocess all the messages; those messages that can now be accepted
are consumed, and those messages that cannot are again moved to the reject queue.
Malformed log messages in the transfer log are not logged by the logger. These messages are not viewed
as being significant and so these messages are sent to the reject queue. For more information about
transfer log messages, see File transfer log message formats.
What to do if the MFT logger is started, but no transfer information is being logged to
the database
The database tables used by the Managed File Transfer logger require the database to have a page size of
8 KB or larger. If the page size of the database is not large enough, the tables are not created properly and
you see the error SQLSTATE=42704.
If you are using the Java Platform, Enterprise Edition database logger, you might see the following
message in the WebSphere Application Server system out log; if you are using the stand-alone database
logger, you might see the following error in the output0.log file:
DB2 SQL Error: SQLCODE=-204, SQLSTATE=42704
SQLERRMC=FTELOG.TRANSFER_EVENT, DRIVER=3.40.152
The SQLSTATE value of 42704 indicates that a table that the logger expected to exist, in this case
FTELOG.TRANSFER_EVENT, does not exist.
To fix this problem perform the following steps:
1.Check that the table exists and is complete. For information about the tables that the logger uses and
their columns, see MFT database logger tables.
2.If the table does not exist or is incomplete, check the page size of the database.
3.If the database size is less than 8 KB, increase the page size of your database.
• If your database is on a test system or has no data in it, you can drop the tables and re-create the
database with a page size greater than 8 KB.
• For information about how to increase the page size, see Migrating MFT: Increasing the log db page
size for Db2 on AIX, Linux, and Windows or Migrating the database tables on Db2 on
z/OS to MQ V8.0 or later.
IBM MQ troubleshooting and support 161
Troubleshooting the Connect:Direct bridge
Use the following reference information and examples to help you diagnose errors returned from the
Connect:Direct bridge:
Tracing the Connect:Direct bridge
You can capture trace from the Connect:Direct node that is part of the Connect:Direct bridge to help with
problem determination.
About this task
To enable trace, complete the following steps:
Procedure
1.Stop the Connect:Direct bridge agent.
2.Edit the Connect:Direct bridge agent properties file to include the line:
cdTrace=true
3.Start the Connect:Direct bridge agent.
Results
The trace information is written to the output0.log file in the Connect:Direct bridge agent configuration
directory.
Related reference
The MFT agent.properties file
Log information for the Connect:Direct bridge
You can use a Connect:Direct bridge agent to transfer files between MFT agents and Connect:Direct
nodes. Log information about the Connect:Direct nodes and processes involved in these transfers is