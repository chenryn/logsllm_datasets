### 2.4 Definitions and Variants

The definitions provided by Lowe only cover the perspective of the initiator, leaving out the possibility that properties such as Aliveness might also be guaranteed to the responder. To address this, we introduce three additional variants to our model, which mirror the properties for the responder:

- **Aliveness_R**: A protocol guarantees to a responder B the aliveness of another agent A if, whenever B (acting as responder) completes a run of the protocol, apparently with initiator A, then A has previously been running the protocol.
  
- **Weak Agreement_R**: A protocol guarantees to a responder B weak agreement with another agent A if, whenever B (acting as responder) completes a run of the protocol, apparently with initiator A, then A has previously been running the protocol, apparently with B.
  
- **Agreement_R (on a list of data items S)**: A protocol guarantees to a responder B agreement with an initiator A on a set of data items S if, whenever B (acting as responder) completes a run of the protocol, apparently with initiator A, then A has previously been running the protocol, apparently with B, and was acting as the initiator in their run, and the two agents agreed on the data values corresponding to all the variables in S.

In the remainder of the paper, we will refer to the previously defined Aliveness, Agreement, and Weak Agreement as “Aliveness_I,” “Agreement_I,” and “Weak Agreement_I” when the properties are analyzed from the initiator’s perspective. We will use the non-indexed terms like “Aliveness” when the perspective does not matter.

Lowe defines “full agreement” (which means “agreement on all the atomic data items used in the protocol run”) as “the most useful definition of authentication.” In our model, we consider the session key and a session identifier to be the only items on the list S; thus, we define authentication as Agreement on the session key and session identifier.

To achieve full agreement in a given session, the set of values S that A and B agree on must define a unique run of the protocol between the two parties. This avoids an attack where one of the agents is tricked into believing they have two (identical) sessions with their peer while, in reality, their peer is only running one corresponding instance. To comply with this understanding of authentication, our model includes the property of session uniqueness:

- **Session Uniqueness**: Different sessions [with the same communication partners] will always have different, unique session keys.

A concept closely related to Session Uniqueness is Consistency:

- **Consistency**: If two honest parties establish a common session key, then both need to have a consistent view of who the peers to the session are. Specifically, if party A establishes a key K and believes the peer to the exchange to be B, then if B establishes the session key K, it needs to believe that the peer to the exchange is A; and vice versa.

### 3. Security Properties

The primary goal of IKEv2 is to keep the session key (used to protect future communication between peers) safe from an attacker. To formalize this, we follow [8] and define Secrecy in general:

- **Secrecy (of a term t)**: The term t, such as a computed session key, will not become known to the adversary.

Key secrecy is achieved if, and only if, Secrecy of the session key is guaranteed. The last property, Identity Protection, differs from the other requirements as it is only an additional security guarantee. As noted in [26], the security of the IKEv2 protocol does not directly depend on identity hiding. The protocol was designed to provide Identity Protection for the responder against an active attacker by only including the identity value in a reply to an authenticated initiator.

- **Identity Protection**: The goal is to protect both identities from passive attacks and to protect the identity of one of the peers from disclosure against an active attacker.

This coincides with the definition of “identity concealment” in [4]. Both sources note that it is impossible to provide identity protection against an active attacker for the first-authenticating agent (i.e., the initiator in IKEv2). Disclosure of one’s identity is inevitable for authentication, and an active attacker in the role of the responder can legitimately request the initiator’s identity without authenticating themselves. For the responder, “Identity Protection” amounts to “secrecy of its identity.”

### 4. Automated Proof of IKEv2

The authenticated key exchange, which is the core feature of IKEv2, is a clearly defined state machine (see Fig. 1). It naturally allows automated proofs in a multiset rewriting system, often used in security protocol analyses (e.g., see [5, 16]). Tamarin is a formal verification tool that supports automated proving of protocols using its own modeling language based on (labeled) multiset rewriting rules [34]. By default, the adversary is modeled as a Dolev-Yao attacker, against which we defined IKEv2’s security model.

#### 4.1 The Tamarin Prover

Tamarin’s rule set and built-in cryptographic functions allow straightforward modeling of security protocols. The tool contains pre-defined components that model the Diffie-Hellman key exchange, hash functions, symmetric and asymmetric encryption, and public key signatures. The automatic solver uses constraint solving and multiset rewriting techniques to perform a comprehensive symbolic search for execution paths that satisfy the provided constraints and rules. Found traces and proofs can be visualized in auto-generated graphs via Tamarin’s web interface.

##### 4.1.1 Protocol Modeling

A protocol is modeled in the form of an equational theory, the corresponding multiset rewriting system, and guarded formulas that can be checked for validity or satisfiability for the traces in the system. For a meaningful analysis, it is important that the model be as close to the actual protocol definition as possible and correctly models all security-relevant information and events. However, the resource requirements of the Tamarin verification increase with the complexity of the model, so a trade-off must be found between the preciseness of the model and abstraction for the sake of successful analysis.

For this reason, we keep the complexity at a minimum by settling on a basic subset of the IKEv2 protocol as presented in Section 3.

##### 4.1.2 State Machine

Tamarin rules define allowed state transitions in the protocol, as depicted in Fig. 1. The state at any point in time is defined as the combination of the internal state of the initiator I and responder R, the last message sent over the public channel, and any persistent public knowledge such as public keys. Which state transitions are allowed in the model is defined by so-called “rules.” The following paragraph illustrates Tamarin’s description language based on a simple example:

```tamarin
rule Example :
[ Fr (~ sk ) , ! Message (m)] // Premise
-- >
[ Out ( senc (m , ~ sk ))] // Conclusion
```

The rule “Example” models the encryption of a message m with the symmetric secret key sk. Each rule consists of a premise and conclusion, marked with [ .. ], that are separated by an arrow -->. The global state – a multiset – is modeled with so-called facts; in the example, these are Fr(~sk) and !Message(m). The example shows two special facts: Fr() denotes a fresh fact, created for the rule and consumed only within the rule (sk, ~sk denotes a new name for the fact). Persistent facts (denoted with !) can be consumed arbitrarily often.

Transmitted is the result of senc(m, ~sk), where senc(·,·) is the built-in symmetric encryption function. Hence, senc(m, ~sk) models the result of symmetrically encrypting the variable m with the newly generated secret key ~sk. (The corresponding decryption function is sdec(·,·).)

Transmission of the resulting ciphertext is modeled by the built-in fact Out(), denoting that the message is observable by the Dolev-Yao attacker and the recipient.

##### 4.1.3 Attacker Model

The Tamarin prover by design supports the Dolev-Yao attacker model [34]. The attacker is allowed to receive any messages denoted by the built-in fact Out used in the rules to model the communication. For proving the security properties under certain assumptions, the knowledge gained by the attacker is presented as the built-in fact K(m). We use the latter to model Identity Protection and Key secrecy. In that regard, our implementation follows previous usages of Tamarin for other protocols, described in [13] and [9].

##### 4.1.4 Lemmata

Statements about the protocol that shall be proven, like the security properties of IKEv2, are defined with the keyword lemma in the form of trace properties. They can be automatically proven or disproven by Tamarin’s automatic solver. For this purpose, the properties have to be defined as action facts in the corresponding rules.

An example of such a lemma could be:

```tamarin
lemma plain_secrecy :
not (
Ex plain #i #j .
Received ( plain ) @ #i
& K( plain ) @ #j
)
```

The special fact K(plain) denotes that plain is known to the attacker, and # marks temporal names. The lemma reads as:

"There does not exist a value plain, and points in time #i and #j with plain being received by the peer in #i and the adversary knowing the plain text in #j."

#### 4.2 Execution Environment

We implement IKEv2’s state machine as Tamarin rules and the security properties described in Section 3 as Tamarin lemmata. The analysis of the IKEv2 model was enabled by the use of the high-performance compute cloud hosted at the Leibniz Supercomputing Centre (LRZ) in Garching near Munich, Germany. The analysis ran on a virtual Ubuntu Linux machine leveraging 40 CPU cores and 180 GB of RAM. Even though automated analysis has become more efficient in recent years, this setup proved to be invaluable for some of the computationally harder lemmata. In the following, we describe our findings and results of the formal verification in the classical setting using the Tamarin prover.

#### 4.3 Verifying the Correctness of Our Model

To show the correctness of the IKEv2 model, two lemmata are defined which prove that it is possible to successfully complete IKEv2 handshakes between two peers. This property is necessary for the analysis because if it was not fulfilled, all further proofs would falsely succeed simply because their conditions could never be reached by the automated solver.

- **exists_session**: This lemma verifies that the two peers can complete a session that results in an identical shared session key for both peers.

- **exists_two_sessions**: This lemma shows that two peers can perform at least two successive handshakes with each other. This property is crucial as some vulnerabilities might require leaking information in one session and reusing it in a second.

The IKEv2 model succeeds at fulfilling both lemmata.

#### 4.4 Verifying IKEv2’s Security Properties

We verify the security properties established in Section 3 in consecutive steps. First, we show which ones IKEv2 achieves in the standard model of the Dolev-Yao attacker. Next, we allow the different cryptographic keys established between the Initiator I and the Responder R during the key exchange to be leaked. This allows a fine-grained analysis of the security properties achieved by IKEv2. Additionally, we can validate our findings – and thereby our Tamarin model – by comparing it to the work of Cremers [8], which uses the same approach but another automatic prover, and to [37], which compares the results from several automated provers (including Tamarin).

Table 1 summarizes our findings, which correspond with the ones in [8]. The first column shows that if no keys are compromised, IKEv2 fulfills all presented security properties for the initiator but cannot guarantee Weak Agreement or Agreement to the responder.

Next, we let the attacker compromise the initiator’s ephemeral key, i.e., her private share for the DH-exchange. We model this as a Tamarin rule `reveal_dh` leading to the fact `RevDH`, which is then used in the corresponding lemmata of the security properties:

```tamarin
rule reveal_dh :
[ ! DHtoReveal ($I ,k) ]
-- [ RevDH ( $I )]->
[ Out (k) ]
```

In that case, the proof shows violation of the property Weak Agreement for the initiator, too. This implies that Agreement is also not achievable. Additionally, the knowledge of the Initiator’s private ephemeral key allows the attacker to obtain the shared secret and, hence, violates Key secrecy. This allows the attacker to silently impersonate [1] the initiator; the responder’s identity becomes unprotected, and Identity Protection is violated. The same argumentation and violations apply when the responder’s ephemeral keys are leaked.

In a third and last step, we let the attacker compromise the peer’s static keys – which are the keys used for authentication. We modeled this with another Tamarin rule `reveal_static`, leading to the fact `RevSk`, and use it in the corresponding lemmata:

```tamarin
rule reveal_static :
[ ! PrivKey ($I , sk ) ]
-- [ RevSk ( $I )]->
[ Out ( sk ) ]
```

In the case of the Initiator’s static keys being leaked, all previously achieved security properties except Identity Protection stay intact. Identity Protection is not achieved because this leakage allows an attacker to perform an impersonation attack [1].

Leakage of the responder’s static key shows the opposite findings, as none of the security properties except Identity Protection are achievable in that case. As in the previous case, such leakage allows an impersonation attack, but this time it is reversed. The attacker can take over the role of the Responder, undetectable by the Initiator. Hence, Aliveness is not achievable, which implies that Weak Agreement and Agreement are violated as well. The impersonation allows the attacker to act as a man-in-the-middle. Thus, the peers will use different session keys, which violates Consistency and Key secrecy.

Notably, IKEv2’s Aliveness and Consistency are violated if, and only if, the responder’s static key is leaked. Even with the combined leakage of both ephemeral and the initiator’s static key, these two properties are achieved.

#### 4.5 Results

Our analysis confirms the results of former formal verification and aided analysis of IKEv2, such as [8], [37], and [31]. For each of the security properties, the Tamarin verification comes to the same results as previous publications. Hence, we show that the IKEv2 protocol satisfies all desired security properties unless one or more of the secret keys have been compromised. These identical results simultaneously confirm the validity of the presented IKEv2 model. The properties of Aliveness and Consistency are only violated in a single attacker setting and, thus, are especially robust.

#### 4.6 Ambiguity in Authentication Properties

In Appendix A.8, we provide a variation of the model that takes into account that “running the protocol” may be understood as “completing it” (i.e., sending the last own message of the protocol) rather than merely participating in it.