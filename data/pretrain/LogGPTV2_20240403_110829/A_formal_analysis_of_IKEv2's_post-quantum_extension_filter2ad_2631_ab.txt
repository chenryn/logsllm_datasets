S [..][27, Chapter 2.4]
Those definitions only cover the initiator’s perspective, however,
and leave out the possibility that Aliveness, for example, might
be guaranteed to a responder as well. We therefore deviate from
Lowe’s approach and add the following three variants to our model
(which mirror the properties for the responder):
Aliveness_R We say that a protocol guarantees to a responder B
aliveness of another agent A if, whenever B (acting as respon-
der) completes a run of the protocol, apparently with initiator
A, then A has previously been running the protocol.
Weak Agreement_R We say that a protocol guarantees to a re-
sponder B weak agreement with another agent A if, whenever
B (acting as responder) completes a run of the protocol, appar-
ently with initiator A, then A has previously been running
the protocol, apparently with B.
Agreement_R (on a list of data items S) We say that a protocol
guarantees to a responder B agreement with a initiator A on
a set of data items S if, whenever B (acting as responder) com-
pletes a run of the protocol, apparently with initiator A, then
A has previously been running the protocol, apparently with
B, and was acting as initiator in his run, and the two agents
agreed on the data values corresponding to all the variables in
S.
In the remainder of the paper, we refer to the previously de-
fined Aliveness, Agreement, and Weak Agreement as “Aliveness_I”,
“Agreement_I”, and “Weak Agreement_I” when the properties are
analyzed from the initiator’s perspective, and only use the non-
indexed terms like “Aliveness” when the perspective does not mat-
ter.
Lowe names “full agreement” (which means “agreement on all
the atomic data items used in the protocol run” [27]) as “the most
useful definition of authentication”[ibid.]. In our model, we consider
the session key and a session identifier to be the only items on the
list S; we thus define authentication as Agreement on the session
key and session identifier.
To achieve full agreement in a given session, the set of values S
that A and B agree on must define a unique run of the protocol
between the two parties, as it states in Lowe’s definition of Agree-
ment: "[..] and each such run of A corresponds to a unique run of
B" [27]. This avoids an attack where one of the agents is tricked
into believing that they have two (identical) sessions with their
peer while in reality their peer is only running one corresponding
instance. To comply with this understanding of authentication our
model includes the property session uniqueness:
Session Uniqueness Different sessions [with the same communica-
tion partners] will always have different, unique session keys
[..].[13, Section 3.3]
An idea closely related to Session Uniqueness is Consistency:
Consistency If two honest parties establish a common session key
then both need to have a consistent view of who the peers to the
session are. Namely,if a party A establishes a key K and be-
lieves the peer to the exchange to be B, then if B establishes the
session key K, it needs to believe that the peer to the exchange
is A; and vice-versa.[26, Section 2.1]
The most obvious goal of IKEv2 is keeping the session key (with
which the peers’ future communication shall be protected) safe
from an attacker. To formalize this we follow [8] and define Secrecy
in general:
Secrecy (of a term t) The term t, e.g., a computed session key, will
not become known to the adversary.[8, Chapter 3]
Key secrecy is therefore achieved if, and only if, Secrecy of the session
key is guaranteed. The last property, Identity Protection, differs from
the other requirements as it is only an additional security guarantee.
As noted in [26], the security of the IKEv2 protocol does not directly
depend on identity hiding. The protocol was designed to provide
Identity Protection for the responder against an active attacker by
only including the identity value in a reply to an authenticated
initiator.
Identity Protection [The goal is to] protect both identities from
passive attacks and [..] protect the identity of one of the peers
from disclosure against an active attacker.[26, Section 2.2]
This coincides with the definition of “identity concealment”
in [4]. Both sources note that it is impossible to provide
identity protection against an active attacker for the first-
authenticating agent (i.e., the initiator in IKEv2): Disclosure
of one’s identity is inevitable for authentication and an active
attacker in the role of the responder can legitimately request
the initiator’s identity without authenticating themself. For
the responder, “Identity Protection” amounts to “secrecy of
its identity”.
4 AUTOMATED PROOF OF IKEV2
The authenticated key exchange as the core feature of IKEv2 is
a clearly defined state machine (see Fig. 1). It therefore naturally
allows automated proofs in a multiset rewriting system, which is
often used in security protocol analyses (e.g., see [5, 16]). Thereby,
the protocol’s state is a multiset of facts and the protocol itself is
modeled as a set of rewriting rules. Tamarin is a formal verification
tool which supports automated proving of protocols by using its
IKE_SA_INITInitiatiorstartIKE_SA_INITResponderIKE_AUTHInitiatiorIKE_AUTHResponderIKE_AUTHDone94A formal analysis of IKEv2’s post-quantum extension
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
own modeling language. The language is based on (labeled) multiset
rewriting rules [34] and therefore naively allows to express IKEv2’s
state transitions as such rules. By default, the adversary is modeled
as a Dolev-Yao attacker, against which we defined IKEv2’s security
model.
4.1 The Tamarin Prover
Tamarin’s rule set and built-in cryptographic functions allow straight-
forward modeling of security protocols. The tool contains pre-
defined components which model the Diffie-Hellman key exchange,
hash functions, symmetric and asymmetric encryption, and public
key signatures. The automatic solver uses constraints solving and
multiset rewriting techniques to perform a comprehensive symbolic
search for execution paths that satisfy the provided constraints and
rules. Found traces and proofs can be visualized in auto-generated
graphs via Tamarin’s web interface.
4.1.1 Protocol Modeling. A protocol is modeled in the form of an
equational theory, the corresponding multiset rewriting system,
and guarded formulas which can be checked for validity or sat-
isfiability for the traces in the system. For a meaningful analysis,
it is important that the model be as close to the actual protocol
definition as possible and models all security-relevant information
and events correctly. However, the resource requirements of the
Tamarin verification increase with the complexity of the model,
thus a trade-off has to be found between the preciseness of the
model and abstraction for the sake of successful analysis.
For this reason we keep the complexity at a minimum by settling
on a basic subset of the IKEv2 protocol as presented in Section 3.
State Machine. Tamarin rules define allowed state transitions
4.1.2
in the protocols, as depicted in Fig. 1. The state at any point in time
is defined as the combination of internal state of initiator I and
responder R, the last message sent over the public channel, and
any persistent public knowledge such as public keys. Which state
transitions are allowed in the model is defined by so-called “rules”.
The following paragraph illustrates Tamarin’s description lan-
guage based on a simple example:
1 rule Example :
2
3
4
[ Fr (~ sk ) , ! Message (m)] // Premise
-- >
[ Out ( senc (m , ~ sk ))] // Conclusion
The rule “Example” models the encryption of a message m with
the symmetric secret key sk. Each rule consists of a premise and
conclusion, marked with [ .. ], that are separated by an arrow
-->. The global state – a multiset – is modeled with so-called facts;
in the example these are Fr(~sk) and !Message(m). The example
shows two special facts, Fr() denotes a fresh fact, that is created
for the rule and can be consumed only within the rule as sk (~sk
denotes a new name for the fact). Persistent facts (denoted with !)
can be consumed arbitrarily often.
Transmitted is the result of senc(m, ~sk), where senc(·,·) is
the built-in symmetric encryption functions; hence senc(m, ~sk)
models the result of symmetrically encrypting the variable m with
the newly generated secret key ~sk. (The corresponding decryption
function is sdec(·,·).)
Transmission of the resulting ciphertext is modeled by the built-
in fact Out(), denoting that the message is observable by the Dolev-
Yao attacker and the recipient.
4.1.3 Attacker Model. The Tamarin prover by design supports the
Dolev-Yao attacker model [34]. The attacker is allowed to receive
any messages denoted by the built-in fact Out used in the rules
to model the communication. For proving the security properties
under certain assumptions, the knowledge gained by the attacker is
presented as the built-in fact K(m). We use the latter to model Iden-
tity Protection and Key secrecy. In that regard, our implementation
follows previous usages of Tamarin for other protocols, described
in [13] and [9].
Lemmata. Statements about the protocol that shall be proven,
4.1.4
like the security properties of IKEv2, are defined with the keyword
lemma in the form of trace properties. They can be automatically
proven or disproven by Tamarin’s automatic solver. For this pur-
pose, the properties have to be defined as action facts in the corre-
sponding rules.
An example of such lemma could be:
1 lemma plain_secrecy :
2 not (
3 Ex plain #i #j .
4 Received ( plain ) @ #i
5 & K( plain ) @ #j
6 )
The special fact K(plain) denotes plain is known to the attacker,
# marks temporal names. The lemma reads as:
There does not exist a value plain, and points in time
#i and #j with plain being received by the peer in #i
and the adversary knowing the plain text in #j.
4.2 Execution Environment
We implement IKEv2’s state machine as Tamarin rules and the
security properties described in Section 3 as Tamarin lemmata.
The analysis of the IKEv2 model was enabled by the use of
the high performance compute cloud hosted at the Leibniz Super-
Computing Centre (LRZ) in Garching near Munich, Germany. The
analysis ran on a virtual Ubuntu Linux machine leveraging 40 CPU
cores and 180 GB of RAM. Even though automated analysis has
become more efficient in recent years, this set-up proved to be
invaluable for some of the computationally harder lemmata. In
the following we describe our findings and results of the formal
verification in the classical setting using the Tamarin prover.
4.3 Verifying the Correctness of our Model
To show the correctness of the IKEv2 model, two lemmata are
defined which prove that it is possible to successfully complete
IKEv2 handshakes between two peers. This property is necessary
for the analysis because if it was not fulfilled, all further proofs
would falsely succeed simply because their conditions could never
be reached by the automated solver.
exists_session This lemma verifies that the two peers can complete
a session that results in an identical shared session key for both
peers.
95ACSAC ’21, December 6–10, 2021, Virtual Event, USA
S. Gazdag et al.
Table 1: Implications of key compromise: Each entry indi-
cates whether the security property of the corresponding
row is achieved (") or not (%) if the key of the correspond-
ing column is compromised.
none
Aliveness_I "
Aliveness_R "
Weak
Agreement_I "
Weak
Agreement_R %
Agreement_I "
Agreement_R %
Consistency "
Key secrecy "
Identity
Protection
"
I eph. R eph.
I static R static
"
"
%
%
%
%
"
%
%
"
"
%
%
%
%
"
%
%
"
"
"
%
"
%
"
"
%
%
%
%
%
%
%
%
%
"
exists_two_sessions This lemma shows that two peers can perform
at least two successive handshakes with each other. This prop-
erty is crucial as some vulnerabilities might require to leak
information in one session and reuse it in a second.
The IKEv2 model succeeds at fulfilling both lemmata.
4.4 Verifying IKEv2’s Security Properties
We verify the security properties established in Section 3 in consecu-
tive steps. First, we show which ones IKEv2 achieves in the standard
model of the Delov-Yao attacker. Next, we allow the different cryp-
tographic keys established between Initiator I and responder R
during the key exchange to be leaked. This allows a fine-grained
analysis of the security properties achieved by IKEv2. Additionally,
we can validate our findings – and thereby our Tamarin model – by
comparing it to the work of Cremers [8], which uses the same ap-
proach but another automatic prover, and to [37], which compares
the results from several automated provers (including Tamarin).
Table 1 summarizes our findings which correspond with the ones
in [8]. The first column shows that if no keys are compromised,
IKEv2 fulfills all presented security properties for the initiator, but
cannot guarantee Weak Agreement or Agreement to the responder.
Next, we let the attacker compromise the initiator’s ephemeral key,
i.e., her private share for the DH-exchange. We model this as a
Tamarin rule reveal_dh leading to the fact RevDH, which is then
used in the corresponding lemmata of the security properties:
1 rule reveal_dh :
2
3
4
[ ! DHtoReveal ($I ,k) ]
-- [ RevDH ( $I )]->
[ Out (k) ]
In that case, the proof shows violation of the property Weak
Agreement for the initiator, too. This implies that Agreement is also
not achievable. Additionally, the knowledge of the Initiator’s pri-
vate ephemeral key allows the attacker to obtain the shared secret
and, hence, violates Key secrecy. This allows the attacker to silently
impersonate [1] the initiator; the responder’s identity becomes
unprotected and Identity Protection is violated. The same argumen-
tation and violations apply when the responder’s ephemeral keys
are leaked.
In a third and last step, we let the attacker compromise the
peer’s static keys – which are the keys used for authentication. We
modeled this with another Tamarin rule reveal_static, leading
to the fact RevSk, and use it in the corresponding lemmata:
1 rule reveal_static :
2
3
4
[ ! PrivKey ($I , sk ) ]
-- [ RevSk ( $I )]->
[ Out ( sk ) ]
In the case of the Initiator’s static keys being leaked, all previously
achieved security properties except Identity Protection stay intact.
Identity Protection is not achieved because this leakage allows an
attacker to perform an impersonation attack [1].
Leakage of the responder’s static key shows the opposite find-
ings, as none of the security properties except Identity Protection
are achievable in that case. As in the previous case, such leakage
allows an impersonation attack, but this time it is reversed. The
attacker can take over the role of the Responder, undetectable by
the Initiator. Hence, Aliveness is not achievable, which implies that
Weak Agreement and Agreement are violated as well. The imper-
sonation allows the attacker to act as a man-in-the-middle. Thus,
the peers will use different session keys, which violates Consistency
and Key secrecy.
Notably, IKEv2’s Aliveness and Consistency are violated if, and
only if, the responder’s static key is leaked. Even with the combined
leakage of both ephemeral and the initiator’s static key, these two
properties are achieved.
4.5 Results
Our analysis confirms the results of former formal verification and
aided analysis of IKEv2, such as [8], [37], and [31]. For each of the
security properties, the Tamarin verification comes to the same
results as previous publications. Hence, we show that the IKEv2
protocol satisfies all desired security properties unless one or more
of the secret keys have been compromised. These identical results
at the same time confirm the validity of the presented IKEv2 model.
The properties of Aliveness and Consistency are only violated in a
single attacker setting and, thus, are especially robust.
4.6 Ambiguity in Authentication properties
In A.8, we provide a variation of the model which takes into account
that “running the protocol” may be understood as “completing it”
(i.e., sending the last own message of the protocol) rather than