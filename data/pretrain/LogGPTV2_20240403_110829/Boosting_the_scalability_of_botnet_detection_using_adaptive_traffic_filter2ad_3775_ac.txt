i } and gi = c1
We get a set (G) of C-ﬂows over multiple epochs, and
each C-ﬂow has an epoch-tag. After clustering C-ﬂows,
we get a set of clusters {g1, g2, . . . , gn} where each clus-
ter gi represents a set of similar communication patterns
(G = g1 ∪ g2 ∪ · · · ∪ gn). For C-ﬂows in one cluster gi,
we further aggregate them into diﬀerent groups (denoted as
{c1
i ) according to their
epoch-tags. For example, cj
i represents the C-ﬂows that are
similar in jth epoch (spatial-similarity). For each cluster
gi, if a pair of SrcIPs share at least M common groups, it
indicates that they share persistently similar communica-
tion patterns over at least M epochs. Therefore, we label
this pair of SrcIPs as suspicious. We denote the percent-
age of all the detected suspicious IPs over all the SrcIPs
as P er. Figure 3 presents an example of cross-epoch cor-
relation. A/B/C/D is the C-ﬂow associated with the host
hA/hB/hC /hD, and the remote host and port of A/B/C/D
are not necessarily to be the same over multiple epochs (e.g.,
A represents ). Some similar C-
ﬂows associated with hA/hB /hC /hD are clustered together
Trace
Mar25
Mar26
Mar27
Mar28
Mar31
# of Pkts
205,079,914
280,853,924
318,796,703
444,260,179
102,487,409
Dur
12h
24h
24h
24h
1.5h
Info
header
header
header
header
full
Table 1: Background Traces
Trace
Bot-IRC-A
Bot-IRC-B
Bot-HTTP-A
Bot-HTTP-B
Bot-HTTP-C
Bot-P2P-Storm
Bot-P2P-Waledac
Dur
4days
4days
4days
4days
4days
4days
4days
Bots
3
4
3
4
4
2
3
Table 2: Botnet traces
in a cluster gi. By investigating the epoch-tag related to
each C-ﬂow, we aggregate these C-ﬂows to three groups
(c1/c2/c3), as described in the left part of Figure 3. The
right part of Figure 3 presents that hA and hB share 3 com-
mon groups, which indicates that they share similar com-
munication patterns for 3 epochs. If we set M ≤ 3, hA and
hB are labeled as suspicious.
To get clusters of C-ﬂows that represent similar communi-
cation patterns, we use clustering algorithm. BotMiner uses
two-level clustering scheme (X-Means and Hierarchical) that
cannot scale well for large number of C-ﬂows as shown in
Figure 7. To process C-ﬂows in an eﬃcient manner, we use
a scalable clustering algorithm Birch [24]. Given a certain
value of “diameter”, Birch can ﬁrst eﬃciently discover clus-
ters of C-ﬂows within such distance. Second, cross-epoch
correlation can detect suspicious IPs based on the clustering
results. We repeat these two steps by increasing the value
of “diameter”. This process terminates when the percentage
of suspicious IPs P er for the next step reaches at the ex-
pected percentage P erExp or the number of rounds reaches
at a pre-deﬁned M axRound (currently 50).
6. EVALUATION
We implemented a prototype system and evaluated it us-
ing traces of real-world network traﬃc and diﬀerent bot-
nets. The results show that Flow-Capture can achieve a
signiﬁcantly higher sampling rate for botnet-related packets
compared to the pre-deﬁned sampling rate. We compared
B-Sampling to FlexSample, and the experimental results in-
dicate that B-Sampling outperforms FlexSample regarding
sampling rate for botnet packets and detection rate of Flow-
Correlation. The cross-epoch correlation can eﬀectively and
eﬃciently identify bots given a small percentage of suspi-
cious hosts. The ﬁne-grained detector can achieve high de-
tection rate and low false positive rate by only inspecting
packets related to a small percentage of suspicious hosts.
6.1 Experiment Setup and Data Collection
We mounted our monitors on a span port mirroring a
backbone router at the college network (200Mbps-300Mbps
at daytime) to collect data. The traﬃc covers various ap-
plications and we believe such kind of traﬃc provides good
traces to evaluate our system. The dataset contains TCP
and UDP headers for continuous 3.5 days and full pack-
ets for 1.5 hours in Table 1. We eliminated a B/16 subnet
for dynamic IPs allocated for wireless connections, which
are frequently changed and can not accurately represent the
same hosts for multiple epochs. We observed a total of 1460
diﬀerent IP addresses in 3.5 days. We also collected 1.5 hour
traces with full payload.
We collected the traces of 7 diﬀerent botnets including
IRC-, HTTP- and P2P-based botnets, as described in Ta-
ble 2. Bot-IRC-A and Bot-HTTP-A were collected by running
bot instances (“TR/Agent.1199508.A” and “Swizzor.gen.c”)
in multiple hosts in the honeypot. Bot-IRC-B and Bot-HTTP-
B/C were generated using Rubot [13], a botnet emulation
framework. In Bot-HTTP-B, bots periodically contacted the
C&C server every 10 minutes. And in Bot-HTTP-C, the bots
contacted the C&C server in a more stealthy way by adding
a random time interval between 0 to 10 minutes on each
time of visiting. Both of them conducted scanning attack
on receiving the “scan” command. Bots in Bot-IRC-A send
packets much more frequently to C&C server in the IRC
session, resulting in much larger C&C ﬂows compared to
Bot-IRC-B. We collected traces of two P2P-based botnets,
Storm [7] and Waledac [10], by running binaries in the con-
trolled environment.
After aligning the timestamp of each packet in botnet
traces according to the time of the ﬁrst packet in background
traces, we mixed 3.5 consecutive days of botnet traces into
the college traces by overlaying them to randomly picked
client IPs in college network. We took one epoch E as 12hr
so there are 7 epochs in total. The ﬁlter covers major lo-
cal DNS, email servers in the college, the IP ranges of the
popular service networks (e.g., MICROSOFT, GOOGLE,
YAHOO, SUN, etc.), popular content distribution networks
(e.g., AKAMAI) , whose IP ranges are unlikely to be used
for Botnet C&Cs, and IPs of top 10000 alexa domains (cor-
responding to 12230 IPs).
6.2 Evaluation of Sampling Algorithm
We evaluated B-Sampling algorithm using the mixed traces
with diﬀerent target sampling rates (0.01, 0.025, 0.05, 0.075
and 0.1). We compared B-Sampling to FlexSample [2], a
state-of-the-art sampling algorithm that can be conﬁgured
with diﬀerent “conditions” for diﬀerent purposes. FlexSam-
ple used a speciﬁc condition (Figure 10 in FlexSample [2])
to capture botnet packets by allocating the majority of bud-
gets to packets related to “servers with high indegree of
small ﬂows”. However, since the number of infected ma-
chines could be small in real-world, the “high fan-in” fea-
ture may not hold and thus will probably miss the botnet
packets. As illustrated in Table 8 in Appendix A, this con-
dition causes very low sampling rates on botnet packets in
our traces. Therefore, we modify the condition and only use
the condition related to ﬂow size for FlexSample. We conﬁg-
ured FlexSample using a condition presented in Table 7 with
(size ≤ 20, budget = 0.95), which means that FlexSample
uses 95% resource to capture the packets in ﬂows with sizes
smaller than 20.
Table 3 presents the overall sampling rates and sampling
rates for botnet-related packets on the mixed dataset, us-
ing both B-Sampling and FlexSample. The ﬁrst column
(SRT ) reports the pre-deﬁned target sampling rates we ex-
perimented with. The second column (SRActual,B) and the
third column (SRActual,F lex) report the actual overall sam-
pling rates achieved by B-Sampling and FlexSample. The
results show that both B-Sampling and FlexSample keep the
actual sampling rate close to the target sampling rate. The
remaining columns report the sampling rates related to dif-
ferent types of botnet-related packets, where we “zoom” in
the sampled packets and evaluate the actual sampling rates
for packets of each botnet. For example, the 4th column
(SRIRC−A/B,B) reports the actual sampling rate for pack-
ets in Bot-IRC-A and Bot-IRC-B using B-Sampling, whereas
the 5th column (SRIRC−A/B,F lex) presents the sampling
rate using FlexSample. We can ﬁnd that B-Sampling cap-
tures a higher percentage of botnet packets, compared to
FlexSample. For example, considering the second row (tar-
get sampling rate is 0.025), B-Sampling achieves a sam-
pling rate of 0.93 (SRIRC−A/B, B column) while FlexSam-
ple achieves that of 0.002 (SRIRC−A/B, F lex column) for
packets in Botnet-IRC-A, where the C&C ﬂows are large
ﬂows. The remaining columns report a comparison of B-
Sampling and FlexSampling on the sampling rates for other
botnets. As we can see, B-Sampling achieves higher sam-
pling rate for botnet-related packets, compared to FlexSam-
ple. It is possible to increase the ﬂow size in the FlexSam-
ple condition or reduce the budget for small ﬂows to make
FlexSample capture more packets in Botnet-IRC-A. How-
ever, it will cause FlexSample to decrease the sampling rates
for packets related to botnets whose C&Cs are small ﬂows
such as Bot-HTTP- and Bot-P2P-. The reason is that the
feature of ﬂow size and server indegree are not intrinsic for
botnets and diﬀerent botnets can diverse greatly regarding
these features. B-Sampling gave higher sampling rate for
packets in Bot-IRC- and Bot-HTTP- than those in Bot-P2P-
, because that the number of packets related to syn-server is
much smaller than that related to syn-clients, and thus syn-
servers have higher priority as illustrated in Section 4.1.3.
We evaluated the parameters, C and stepup, in the B-
Sampling algorithm in Section 4.1. Given SRT = 0.05, we
report the experimental results in Table 9 in Appendix A.
The results demonstrate that the results of B-Sampling are
stable over these values.
6.3 Evaluation of Flow Correlation
N
2
We evaluated the cross-epoch correlation with B-Sampling
using the mixed traces for two properties, detection accuracy
and scalability. We set M = x
y (N = 7, M = 3), which
means that two hosts sharing similar communication pat-
terns for any 3 out of 7 epochs will be labeled as suspicious.
Given SRT and P erExp, each cell in Table 4 shows the
detection rate of bots(/23) and percentage of noises(/1460)
identiﬁed by Flow-Correlation using B-Sampling. The re-
sults show that Flow-Correlation can achieve high detection
rate with low P erExp. For example, with P erExp ≥ 5%,
for all the SRT evaluated, Flow-Correlation can success-
fully identify all the bots. While for the very low P erExp
(e.g., 2% and 3%), more than half of the bots were still
captured. We also compared the detection rate of Flow-
Correlation using B-Sampling to that of Flow-Correlation
using FlexSample (in Table 10). Figure 4 illustrates the av-
erage detection rates over diﬀerent P erExp for each target
sampling rate, and Figure 5 and Figure 6 present the detec-
tion rates using B-Sampling and FlexSample with P erExp
of 0.01 and 0.05. The comparison results show that by using
B-Sampling, Flow-Correlation can achieve higher detection
rate.
Figure 7 presents the time consumption (in a 4G memory
and 2-core CPU computer) for cross-epoch correlation and
the C-Plane clustering of BotMiner as the number of C-ﬂows
SRT
SRActual
0.01
0.025
0.05
0.075
0.1
B-
0.012
0.027
0.052
0.076
0.1
Flex
0.01
0.025
0.05
0.075
0.1
SRIRC−A/B
Flex
0.001/0.07
0.002/0.16
0.004/0.32
0.006/0.48
0.008/0.6
B-
0.65/0.68
0.93/0.92
0.96/0.96
0.97/0.97
0.98/0.98
SRHT T P −A/B/C
SRStorm
B-
0.55/0.69/0.68
0.72/0.93/0.93
0.74/0.96/0.96
0.75/0.97/0.97
0.76/0.98/0.98
Flex
0.06/0.07/0.06
0.16/0.17/0.16
0.32/0.35/0.33
0.50/0.50/0.48
0.6/0.64/0.61
B-
0.02
0.16
0.48
0.72
0.83
Flex
0.05
0.11
0.23
0.33
0.41
SRW aledac
Flex
B-
0.07
0.02
0.18
0.16
0.33
0.48
0.48
0.7
0.81
0.61
Table 3: Sampling Rate
1.0
0.92
0.93
0.95
0.95
0.91
0.86
0.72
0.73
0.80
B-Sampling
FlexSample
r
o
C
h
c
o
p
E
-
s
s
o
r
C
f
o
s
e
t
a
R
n
o
i
t
c
e
t
e
D
g
v
A
0.8
0.6
0.4