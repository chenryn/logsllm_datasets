172.27.59.5  9c097d80c08b
```
现在，我可以将容器添加到信任列表中。该命令需要在主机上运行，而不是在容器中运行。您正在将容器的主机名添加到本地计算机的受信任服务器列表中。我在我的 Windows Server 2019 主机上运行此程序:
```
Set-Item wsman:\localhost\Client\TrustedHosts 9c097d80c08b -Concatenate -Force
```
I'm running Windows Server 2019, but you can use the server manager on Windows 10 too. Install the **Remote Server Administration Tools** (**RSAT**), and you can use the server manager on Windows 10 in the same way.
在服务器管理器中，导航到所有服务器|添加服务器，并打开 DNS 选项卡。在这里，您可以输入容器的主机名，服务器管理器将解析 IP 地址:
![](img/281c2292-4fc3-4a73-a045-1267e090f3a5.png)
选择服务器详细信息，然后单击确定—现在服务器管理器将尝试连接到容器。您将在“所有服务器”选项卡中看到更新后的状态，显示服务器在线，但访问被拒绝。现在，您可以右键单击服务器列表中的容器，然后单击管理身份，为本地管理员帐户提供凭据。您需要将主机名指定为用户名的域部分。脚本中创建的本地用户叫`serveradmin`，但我需要用`9c097d80c08b\serveradmin`认证:
![](img/35b53a20-2065-4844-b52e-ec397a9106d4.png)
现在连接成功了，您将在服务器管理器中看到容器中的数据，包括事件日志条目、Windows 服务以及所有已安装的角色和功能:
![](img/73b37959-9d87-40bc-a0b8-dce0d6f392e9.png)
您甚至可以从远程服务器管理器用户界面向容器添加功能，但这不是一个好的做法。像其他 UI 管理工具一样，最好使用它们进行探索和调查，但不要在 Dockerfile 中进行任何更改。
# 使用 Docker 工具管理容器
您已经看到，您可以使用现有的 Windows 工具来管理容器，但是您可以使用这些工具做的事情并不总是适用于 Docker 世界。一个容器将运行一个 web 应用，所以 IIS 管理器的层次导航并没有真正的帮助。在服务器管理器中检查事件日志可能很有用，但是将条目中继到控制台要有用得多，这样它们就可以从 Docker API 中浮出水面。
还需要显式设置应用映像，以便能够访问远程管理工具、公开端口、添加用户和运行其他 Windows 服务。所有这些都增加了运行容器的攻击面。您应该认为这些现有工具在开发和测试环境的调试中很有用，但是它们并不真正适合生产。
Docker 平台为在容器中运行的任何类型的应用提供了一致的 API，这是一种新型管理界面的机会。在本章的剩余部分，我将研究了解 Docker 并为 Docker 命令行提供替代管理界面的管理工具。我将从一些开源工具开始，然后进入 Docker Enterprise 中的商业**容器即服务** ( **CaaS** )平台。
# Docker 可视化工具
**可视化工具**是一个非常简单的网络用户界面，显示关于 Docker 群中节点和容器的基本信息。这是`dockersamples/docker-swarm-visualizer`资源库中 GitHub 上的一个开源项目。它是一个 Node.js 应用，打包在 Linux 和 Windows 的 Docker 映像中。
本章我已经在 Azure 中部署了一个混合 Docker Swarm，它有一个 Linux 管理器节点、两个 Linux 工作器节点和两个 Windows 工作器节点。通过部署绑定到 Docker Engine API 的服务，我可以在管理器节点上将可视化工具作为 Linux 容器运行:
```
docker service create `
  --name=viz `
  --publish=8000:8080/tcp `
  --constraint=node.role==manager `
  --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock `
  dockersamples/visualizer
```
该约束确保容器仅在管理器节点上运行，并且由于我的管理器在 Linux 上运行，我可以使用`mount`选项让容器与 Docker API 对话。在 Linux 中，您可以将套接字视为文件系统挂载，因此容器可以使用 API 套接字，而不必通过**传输控制协议** ( **TCP** )公开公开它。
You can also run the visualizer in an all-Windows swarm. Docker currently supports Windows named pipes as volumes on a single server, but not in Docker Swarm; however, you can mount the API using TCP, as I did with Traefik in [Chapter 7](07.html), *Orchestrating Distributed Solutions with Docker Swarm*.
可视化工具为您提供群中容器的只读视图。用户界面显示了主机和容器的状态，并为您提供了一种快速检查集群上工作负载分布的方法。这是我在 Azure 中的 Docker 企业集群在部署 NerdDinner 栈时的样子:
![](img/732dc814-28a2-4751-83f3-b518681e96ba.png)
我可以一眼看出我的节点和容器是否健康，并且我可以看到 Docker 已经尽可能均匀地在集群中分布容器。可视化工具使用 Docker 服务中的 API，它通过 RESTful 接口公开所有 Docker 资源。
Docker API 还提供写访问，因此您可以创建和更新资源。一个名为 **Portainer** 的开源项目使用这些 API 提供管理。
# 搬运工人
Portainer 是 Docker 的轻量级管理 UI。它作为一个容器运行，可以管理以集群模式运行的单个 Docker 主机和集群。这是一个开源项目，托管在`portainer/portainer`存储库中的 GitHub 上。Portainer 是用 Go 编写的，所以是跨平台的，可以作为 Linux 或者 Windows 容器运行。
Portainer 有两个部分:您需要在每个节点上运行一个代理，然后运行管理 UI。所有这些都在容器中运行，因此您可以使用 Docker Compose 文件，如本章源代码中`ch08-portainer`下的文件。组合文件定义了一个全局服务，即 Portainer 代理，它运行在群中每个节点的容器中。然后是 Portainer 用户界面:
```
portainer:
  image: portainer/portainer
  command: -H tcp://tasks.agent:9001 --tlsskipverify
  ports:
    - "8000:9000"
  volumes:
    - portainer_data:/data
  networks:
    - agent_network
  deploy: 
    mode: replicated
    replicas: 1
    placement:
      constraints: [node.role == manager]
```
The `portainer/portainer` image on Docker Hub is a multi-arch image, which means you can use the same image tag on Linux and Windows, and Docker will use the matching image for the host OS. You can't mount the Docker socket on Windows, but the Portainer documentation shows you how to access the Docker API on Windows.
当您第一次浏览到 Portainer 时，您需要指定管理员密码。然后，服务连接到 Docker API 并显示所有资源的详细信息。在集群模式下，我可以看到集群中的节点数、栈数、运行的服务和容器数，以及集群中的映像、卷和网络数:
![](img/179bc3ae-5b55-4487-b2c8-dad341998b9d.png)
集群可视化工具链接显示的用户界面非常类似于 Docker Swarm 可视化工具，容器在每个节点上运行:
![](img/8b3a9fe6-5690-4bbc-af88-1fb2d3191700.png)
“服务”视图显示了所有正在运行的服务，从这里，我可以深入查看服务详细信息，并且有一个更新服务规模的快速链接:
![](img/3f0d001c-3a79-4cf4-8f68-f0028ca0fe9e.png)
Portainer 一直在根据新的 Docker 功能进行发展，您可以从 Portainer 部署栈和服务并进行管理。您可以深入到服务日志中，将控制台会话连接到容器，并从内置于用户界面中的 Docker Compose 模板中部署通用应用。
您可以在 Portainer 中创建多个用户和团队，并对资源应用访问控制。您可以创建仅限于特定团队访问的服务。认证由 Portainer 使用本地用户数据库进行管理，或者通过连接到现有的**轻量级目录访问协议** ( **LDAP** )提供商进行管理。
Portainer 是一个很棒的工具，也是一个活跃的开源项目，但是在你采用它作为你的管理工具之前，你应该评估一下最新的版本。Portainer 最初是一个 Linux 工具，仍然有一些领域不完全支持 Windows 功能。在撰写本文时，代理容器需要在 Windows 节点上进行特殊配置，这意味着您无法将其作为全局服务部署在您的群中，没有它也无法在 Portainer 中看到 Windows 容器。
在生产环境中，您可能需要运行有支持的软件。Portainer 是开源的，但是有一个商业支持选项。对于具有严格安全流程的企业部署或环境，Docker Enterprise 提供了完整的功能集。
# Docker 企业的 CaaS
Docker Enterprise 是 Docker，Inc .的商业版。它是一个完整的 CaaS 平台，充分利用 Docker 提供的单一窗格来管理运行在任意数量主机上的任意数量的容器。
Docker Enterprise 是一款生产级产品，您可以在数据中心或云中的机器集群上运行。集群功能支持多个编排器、Kubernetes 以及 Docker Swarm。在生产环境中，您可以拥有一个 100 节点的集群，该集群使用与作为单节点集群运行的开发笔记本电脑完全相同的应用平台。
Docker Enterprise 有两个部分。还有 **Docker 可信注册中心** ( **DTR** )，这就像运行自己的 Docker Hub 私有实例，完成映像签名和安全扫描。我将在[第 9 章](09.html)、*中介绍 DTR 了解 Docker* 的安全风险和好处，当我在 Docker 中查看安全时。管理组件叫做**通用控制平面** ( **UCP** )，是一种新型的管理界面。
# 理解通用控制平面
UCP 是一个基于网络的界面，用于管理节点、映像、服务、容器、机密和所有其他 Docker 资源。UCP 本身是一个分布式应用，运行在集群中连接服务的容器中。UCP 为您提供了一个以相同方式管理所有 Docker 应用的单一位置。它提供了基于角色的资源访问控制，因此您可以对谁能做什么进行细粒度控制。