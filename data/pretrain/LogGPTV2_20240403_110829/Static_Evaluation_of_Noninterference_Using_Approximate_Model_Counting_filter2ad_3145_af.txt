(r = 1)
Fig. 9: Leakage from Gzip and Smaz (see Sec. VI-B)
at r = 2 and surpassing it at r = 3 (in terms of ηmin).
This occurs because in each execution of Gzip, the attacker
has the latitude to select a different value for C(‘input’) and
then observe that selection’s impact on the length of the
compressed string (which in general will change). In contrast,
the leakage of Smaz is independent of the adversary’s choice
for C(‘input’), and so additional executions do not leak any
additional information.
As discussed at the end of Sec. IV-A, a side effect of our
methodology is identifying some example (cid:4)C, O(cid:5) pairs that
lie in YS \ YS (cid:2) or YS (cid:2) \ YS for samples S, S(cid:2)
of secrets,
which can help in diagnosing a leak. For example in Fig. 9(c),
for Gzip in the r = 1 case, our tool identiﬁed the (cid:4)C, O(cid:5)
pair with C(‘input’) = ‘c’ and O(‘length’) = 66 as being in
YS \ YS (cid:2) for a sampled S, S(cid:2)
where S (cid:13) ‘c’ = S(‘secret’) and
I(‘sufﬁx’) = ‘oo’.6 As such, the developer now knows that this
(cid:4)C, O(cid:5) pair is consistent with no secret in S(cid:2)
. Similarly, for
Smaz our tool identiﬁed the pair (cid:4)C, O(cid:5) with C(‘input’) = ‘r’
and O(‘length’) = 36 as being in YS \ YS (cid:2) for a sampled S,
S(cid:2)
where S (cid:13) ‘f’ = S(‘secret’) and I(‘sufﬁx’) = ‘or’.
C. Linux TCP sequence number leakage
Known side channels in some TCP implementations leak
TCP sequence and acknowledgment numbers [7], [8]. In some
cases, these side channels can be used by off-path attackers
to terminate or inject malicious payload into connections [8],
[52]. The origin of these attacks is shared network counters
(e.g., linux_mib and tcp_mib) that are used to record
connection statistics across different connections in the same
network namespace.
since version 2.0 of
the code snippet
These counters have been implicated in numerous side
channels
[53].
For example,
the patch in
Lines 6–12)
in Fig. 10 leaks the secret tp->rcv_nxt
in Linux-3.18 TCP. Here,
the
skb input and so the value TCP_SKB_CB(skb)->seq
is compared to tp->rcv_nxt on Line 5. Based
that
on this comparison,
the NET_INC_STATS_BH procedure
the Linux kernel
(without
controls
attacker
the
6The output length of 66 exceeds the length of the input string because
Gzip adds a header to the output. Smaz attaches no such header.
524
tp->snd_una - tp->max_window)
const struct sk_buff *skb) {
|| after(TCP_SKB_CB(skb)->ack_seq,
if (before(TCP_SKB_CB(skb)->ack_seq,
&& before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {
1 void tcp_send_dupack(struct sock *sk,
2
3 struct tcp_sock *tp = tcp_sk(sk);
4 if (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq
5
6 +
7 +
8 +
9 +
10 +
11 +
12 +
13
14
15
16 }
17 tcp_send_ack(sk);
18 }
}
NET_INC_STATS_BH(sock_net(sk),
tcp_send_ack(sk);
return;
LINUX_MIB_DELAYEDACKLOST);
tp->snd_nxt)) {
...
Fig. 10: A code snippet vulnerable to leaking the TCP se-
quence number in linux 3.18; lines marked ‘+’ indicate a hy-
pothetical patch with which we experimented (see Sec. VI-C)
increments an attacker-observable counter
indicated by
LINUX_MIB_DELAYEDACKLOST (Lines 13–14). If the at-
tacker can repeatedly cause the procedure in Fig. 10 to be
invoked with inputs skb of its choice, it can use binary search
to infer tp->rcv_nxt within 32 executions [8].
The most straightforward mitigation for this leakage is
to disable the public counters. This will stop the leakage,
but will disable some mechanisms such as audit logging.
Another potential mitigation is to increase the difﬁculty of
increasing the public counter, by adding additional checking
related to more secret variables. For example, before increas-
ing the LINUX_MIB_DELAYEDACKLOST counter, the pro-
cedure could also check for correct acknowledgment numbers
(TCP_SKB_CB(skb)->ack_seq and tp->snd_nxt), as
shown in the patch in Lines 6–12. As far as we know, our
study is the ﬁrst to compare these potential mitigations for
TCP sequence and acknowledgment number leakage.
To analyze the information leakage in this example, we
compiled a user-mode Linux kernel [54] as a library. Our target
procedure for analysis was tcp_rcv_established, which
is of the form
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
void tcp_rcv_established(struct sock *sk,
struct sk_buff *skb,
const struct tcphdr *th,
unsigned int len) {
struct tcp_sock* tp = (struct tcp_sock*) sk;
...
}
The inputs for tcp_rcv_established have many con-
straints among them when passed in, for instance
TCP_SKB_CB(skb)->seq end_seq
tp->rcv_wnd ≤ MAX_TCP_WINDOW
tp->snd_wnd ≤ MAX_TCP_WINDOW
for
the
inputs
generate
constraints
To
to
tcp_rcv_established, we applied symbolic execution
to the procedures fill_packet and tcp_init_sock.
Symbolic buffers to represent these inputs and their associated
constraints were then assembled within a testing program
that called tcp_rcv_established. We also stubbed out
several procedure calls7 within tcp_rcv_established,
causing each to simply return a symbolic buffer so as to
avoid symbolically executing it, since doing so introduced
problems for KLEE (e.g., dereferencing symbolic pointers).
After generating the postcondition for
deﬁned
tcp_rcv_established, we
controlled inputs to be
the procedure
the
attacker-
VarsC = {TCP_SKB_CB(skb)->seq,
TCP_SKB_CB(skb)->end_seq,
TCP_SKB_CB(skb)->ack_seq,
tcp_flag_word(th)}
structures
(each four bytes) and the attacker-observable variables to
be VarsO = {linux_mib, tcp_mib}. All ﬁelds of
constrained input
(e.g., tp->snd_una and
tp->max_window) not covered by VarsC and VarsO
were added to VarsI , with the secret variables8 being
tp->rcv_nxt and tp->snd_nxt (each four bytes).
We conducted single-execution (r = 1, denoted ‘v3.18-
two-execution (r = 2, denoted ‘v3.18-2run’) and
1run’),
three-execution (r = 3, denoted ‘v3.18-3run’)
leakage
analysis.
In the multi-execution analysis, we assumed
*sk to be the same in multiple executions (I1(‘*sk’)
= I2(‘*sk’) = . . . = Ir(‘*sk’)) since its ﬁelds used in
tcp_rcv_established would be unchanged or,
if
changed, would be changed predictably.
The results from this analysis are shown in Fig. 11. The
inset graph in Fig. 11(a) is a magniﬁcation of the portion of the
curve in the interval [0, 8] on the horizontal axis. Speciﬁcally,
the highest leakage resulted from ‘v3.18-3run’, followed by
‘v3.18-2run’ and ‘v3.18-1run’, as indicated by the ˆJn curves in
Fig. 11(a) and the ˆηmin and ˆηmax measures in Fig. 11(b). This
7Speciﬁcally,
we
get_seconds,
current_thread_info,
tcp_sendmsg,
prandom_bytes, current_thread_info, tcp_parse_options,
and tcp_checksum_complete_user.
tcp_options_write,
stubbed
out
8Though we have described our framework so far using one secret variable,
it extends trivially to more.
525
0.8
0.6
n
ˆJ
0.4
0.2
0
0
v3.18-1run
v3.18-patched
v3.18-2run
v3.18-3run
v3.18-rmCounter
0.6
0.4
0.2
0
0
1
2
3
4
5
6
7
8
8
16
24
32
log2 n
40
48
56
64
(a) ˆJn per n and version of tcp_rcv_established
Version
log2 ˆηmin
−1.6
v3.18-1run
−2.1
v3.18-patched
v3.18-rmCounter −4.0
−1.0
v3.18-2run
−0.7
v3.18-3run
log2 ˆηmax
−63.0
−64.1
−65.6
−62.1
−61.6
(b) ˆηmin and ˆηmax for versions of tcp_rcv_established
Fig. 11: TCP sequence-number leakage (see Sec. VI-C)
shows the potential for the attacker to extract more information
about the secrets tp->rcv_nxt and tp->snd_nxt using
multiple executions. This is consistent with the observation
that a smart attacker could utilize this side channel to infer
one bit per execution [8].
the
this
counter
leak, we
incrementing
To alleviate
applied a hypothetical
patch shown in Fig. 10 that checks another secret value
tp->snd_nxt before
for
LINUX_MIB_DELAYEDACKLOST. Our analysis results (for
r = 1 execution, denoted ‘v3.18-patched’) in Fig. 11 shows
that
the patch alleviated the leakage somewhat. We also
tried just deleting Line 5-14 from the original (unpatched)
code in Fig. 10. As shown in Fig. 11, this version (denoted
‘v3.18-rmCounter’) evidently has lower leakage than ‘v3.18-
patched’. In considering these mitigations, we stress that our
patch addressed only the leakage arising from Line 5, and not
all sources that leak information about tp->rcv_nxt or
tp->snd_nxt (which are numerous, see Chen et al. [12]).
Our results suggest, however, that our methodology could
guide developers in mitigating leaks in their code.
D. Performance
Performance of our tool involves two major components,
namely the time to compute the postcondition Πproc via
symbolic execution, and the time to calculate Jn or ˆJn for
different n starting from Πproc. Postcondition generation is
not a topic in which we innovate, and so we defer discussion
of its costs in our case studies to Appendix A. Here we focus
on the costs of calculating Jn or ˆJn for different n starting
from Πproc.
Starting from Πproc, the computation of Jn or ˆJn can be
parallelized almost arbitrarily. Not only can Jn or ˆJn for each
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:23 UTC from IEEE Xplore.  Restrictions apply. 
Sec. Procedure
J(S, S(cid:2)
) ˆJ(S, S(cid:2)
) Jn
ˆJn
34ms
48ms
43ms
VI-A Auto-complete (nopadding)
VI-A Auto-complete (ﬁx.64)
VI-A Auto-complete (ﬁx.256)
VI-A Auto-complete (rand.64)
VI-B Gzip
VI-B Smaz
VI-C v3.18-1run
VI-C v3.18-patched
VI-C v3.18-rmCounter
56ms
65ms
57ms
1.2s
26s
40s
73s
67s
50s
5m 7m
6m 8m
6m 7m
15m
4h
10h
20h
20h
19h
Fig. 12: Average time per estimate (J(S, S(cid:2)) or ˆJ(S, S(cid:2))) and
most expensive overall time (Jn or ˆJn) for case studies
n be computed independently, but even for a single value of
n, the estimation of J(S, S(cid:2)) or ˆJ(S, S(cid:2)) can be computed for
each pair of sampled sets S, S(cid:2)
and each estimation iteration
independently. In Fig. 12, we report the average estimation
time per sample pair, which indicates that all case studies could
ﬁnish one estimation in (11) for one sample pair within about
one minute. As such, the speed of calculating ﬁnal pair ηmin
and ηmax is limited primarily by the number of processors
available for the computation.
In our experiments, performed on a DELL PowerEdge
R815 server with 2.3GHz AMD Opteron 6376 processors and
128GB memory, we computed Jn or ˆJn per value of n on its
own core. As reported in the last two columns of Fig. 12, the
time to do so for the most expensive value of n ranged from
roughly 15m for the auto-complete procedure of Sec. VI-A to
about 20h for the Linux TCP implementations of Sec. VI-C.
For several of our case studies (see Fig. 12), we experimented
with calculating ˆJn even when Jn was sufﬁcient, and found
its estimation to cost ≤ 2× that of estimating Jn, due to the
duplication of Πproc in ˆXp.
To place the above numbers in some context, the ≈ 20h (for
the worst n, without parallelization) dedicated to computing
a value of Jn in the Linux TCP case study of Sec. VI-C
involved a procedure proc of which 165 bytes of its inputs
were somehow used in the procedure. A naive alternative to
our design in which all possible inputs are enumerated and run
through the procedure to compute its outputs (and interference