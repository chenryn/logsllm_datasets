公司介绍：
• 宜信——创立于2006年，从事普惠金融和财富管理事业的金融科技企业。在支付、
网贷、众筹、机器人投顾、智能保险、区块链等前沿领域积极布局，通过业务孵化和
产业投资参与全球金融科技创新。
• 成立十二年以来，始终坚持以理念创新、模式创新和技术创新服务中国高成长性人群、
大众富裕阶层和高净值人士，真正的让金融更美好。
宜人宜己，美好生活
部门介绍：
• 宜信安全部直属于宜信总公司，承接总部及所有子公司的安全需求，为公司的业务安全保驾护航。
※安全部成4年以来，弥补了公司安全基础建设的缺失，发展至今组建了覆盖网络、应用、主机、终端、
数据逐层渗透的前沿安全架构，每一步都凝聚着肩负亿万用户信息和财产安全的责任。
※ 2018年我们在传统安全架构上引入了当前热点科技，将人工智能与大数据技术融合到当前的安全架构
中，将资产、漏洞、风控和管理有机结合到一起，构建用户画像，为实现安全态势感知与威胁情报预警
奠定了基础。
※ 自研的【洞察】漏洞管理平台在GitHub上进行了开源，借此帮助更多金融科技的行业伙伴，完成自动
化风险全生命周期的管理并实现风险的可量化，共建互联网金融行业的安全生态。
•
产品、工具种类繁多，学习和切换成本较高
•
人工使用工具获取资产数据和进行结果处理耗时耗力
•
安全工具功能单一，且无法协同使用
安全产品学习和运维成本高
安全检测网络环境多样化
•
IDC（多IDC ）,办公网，公网……单一扫描节点无法满足复杂的需求
问题和痛点
疲于工具的学习和使用
乐于技能提高，专注风险本身
解决思路
0x01  谈谈分布式
基于任务队列的分布式扫描
1. 难以将扫描功能解耦合
2. 分发后聚合实现比较繁琐
3. 扫描模块调用接口不统一
基于MapReduce模型分布式扫描
1. 易于任务数据分片和结果聚合
2. 调用链使用简单
3. P2P方式进行数据传输，效率高
举个栗子
• 举例说明任务数据分片和任务链过程: 子域名扫描->端口扫描->
弱口令扫描
域名1
域名2
域名n
域名
列表
子域名扫描
IP1
IP2
IPm
端口扫描
端口1
端口2
端口o
弱口令扫描
聚合
结果
…
…
…
异步执行
举个栗子
• 举例说明任务数据分片和任务链过程: 子域名扫描->端口扫描->
弱口令扫描
域名1
域名2
域名n
域名
列表
子域名扫描
IP1
IP2
IPm
端口扫描
端口1
端口2
端口o
弱口令扫描
聚合
结果
…
…
…
异步执行
0x02  功能可扩展（易于开发）
插件开发
• 开发过程简化
• 将重复的工作抽象出来封装起来，例如安全通信，任务监控，数据传输等
等
• 提供协程，线程，进程任务执行粒度支持
• Python依赖自动检测并安装
• 结果保存为JSON方便后续使用
HelloWorld示例
任务状态
CRON表达式，任务参数，执行次
数，执行花销时间，优先级等信息
Blade扫描器与分布式平台
Agent
Agent
…
Agent
Blade
Agent
Scheduler
调
度
器
集
群
单
机
便于单机开发和测试
Blade扫描器-命令行模式
Blade扫描器-Web模式
插件易于分发
• 复用，一键打成Zip包和Zip包导入
• vs PoC 偏向于功能级别的插件
多种响应方式
• 平台响应
• 邮件响应
• 第三方即时通讯接口响应
平台响应
漏洞名称，描述以及扫描和更新时
间
邮箱响应
任务运行时的异常
第三方即时通信响应
0x03  架构可扩展
分布式架构
Ngnix
Flask APP
Web
MSG Consumer
DB
Flask APP
Flask APP
Flask APP
Scheduler
MQ - Redis
Agent
Agent
…
Agent
负载均衡
授权通信
超时重传
压缩与序列化
JSON/TCP
ZMQ+IOLOOP 异步高并发
通
信
层
调
度
层
Web
层
Gunicorn
前后端分离
JWT认证和鉴权
Python原生实现定时任务
SQLite
集
群
架构扩展
Ngnix
Scheduler
Redis Cluster
Broker
Scheduler
Scheduler
Agent
Agent
Agent
Agent
Agent
Agent
Gunicorn
Load Balancing
Web
Flask 
APP
Flask APP
DB 
Proxy
Consumer
Gunicorn
Web
Flask 
APP
Flask APP
Consumer
Gunicorn
Web
Flask 
APP
Flask APP
Consumer
DB Write
DB Read
DB Read
0x04  节点可扩展
节点简单部署
• 1. 一键安装 pip install blade.whl
• 2. 配置Scheduler Server地址并启动，如 192.168.1.2:5559
支持配置文件，方便使用自动化运维分发部署
如有环境依赖：提供Docker file生成
节点授权与通信
• TCP+JSON通信，自定义协议
• Scheduler授权，Token认证
节点授权与通信
节点位置，CPU使用率，负载，内
存使用率，CPU核数位置等
节点超时重传机制
• 支持节点与调度器之间进行单向通信
• 如果网络故障可保存数据尝试重连
• 超时时间可配置
0x05  展望
展望
• 1. 失效转移
• 2. 阻塞方式的数据转发（分布式同步请求服务）
Get more information ↓