# To Intercept or Not to Intercept: Analyzing TLS Interception in Network Appliances

**Authors:** Louis Waked, Mohammad Mannan, and Amr M. Youssef  
**Affiliation:** Concordia Institute for Information Systems Engineering, Concordia University, Montreal, Canada  
**Emails:** {l_waked, mmannan, youssef}@ciise.concordia.ca

## Abstract
Many enterprise-grade network appliances use a TLS proxy to intercept TLS-protected traffic for various purposes, such as malware scanning, phishing detection, and preventing data exfiltration. When deployed, the TLS proxy acts as a security-validating client for external TLS web servers on behalf of the original requesting client, and as a web server to the client. Consequently, TLS proxies must maintain a reliable level of security, at least equivalent to that of modern web browsers and properly configured TLS servers. Failure to do so increases the attack surface for all proxied clients served by the network appliance.

We develop a framework for testing TLS-inspecting appliances, combining and extending tests from existing work on client-end and network-based interception. Using this framework, we analyze six representative network appliances and uncover several security issues related to TLS version and certificate parameters, CA trusted stores, private keys, and certificate validation tests. For example, two appliances perform no certificate validation at all, exposing their end-clients to trivial Man-in-the-Middle (MITM) attacks. The remaining appliances, while performing some form of certificate validation, still do not follow current best practices, making them vulnerable to certain attacks.

We also found that all tested appliances deceive the requesting clients by offering TLS parameters different from those used in the proxy-to-server connection, such as TLS versions, hashing algorithms, and RSA key sizes. This work highlights the risks and vulnerabilities associated with using TLS proxies, which are widely deployed in many enterprise and government environments, potentially affecting all their users and systems.

## CCS Concepts
- **Networks:** Middleboxes / network appliances
- **Security and Privacy:** Network security, Browser security

## Keywords
TLS, Proxy, Interception, Network Appliances, Certificates, Validation, MITM

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Conference Details
ASIA CCS '18, June 4–8, 2018, Incheon, Republic of Korea  
© 2018 Association for Computing Machinery.  
ACM ISBN 978-1-4503-5576-6/18/06...$15.00  
https://doi.org/10.1145/3196494.3196528

## ACM Reference Format
Louis Waked, Mohammad Mannan, and Amr Youssef. 2018. To Intercept or Not to Intercept: Analyzing TLS Interception in Network Appliances. In ASIA CCS '18: 2018 ACM Asia Conference on Computer and Communications Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3196494.3196528

## 1 Introduction
Most network appliances currently include an SSL/TLS interception feature, which is performed by a TLS web proxy server. The proxy intercepts the user’s request to visit a TLS server and creates two separate TLS connections: one between the user's browser and the proxy, and another between the proxy and the actual HTTPS web server. By having the appropriate private key for the signing certificate (inserted into the client’s root CA store), the proxy can access the raw plaintext traffic and perform actions such as content parsing, malware scanning, or traffic monitoring.

Common reasons for adopting TLS interception include protection against malware and phishing attacks, law enforcement and surveillance, access control and web filtering, national security, and privacy and identity theft [44]. While interception violates the implicit end-to-end guarantee of TLS, we focus on the potential vulnerabilities introduced by such features to end-users behind the network appliances, following several existing studies on TLS interception, e.g., [6, 17, 32, 35, 41].

Even if implemented correctly, TLS interception increases the attack surface due to the introduction of an additional TLS client and server at the proxy. However, the lack of adherence to current best practices in TLS security, as implemented in modern browsers and TLS servers, can result in severe potential vulnerabilities, leading to a significantly weaker TLS connection.

For example, the proxy may not mirror the TLS version and certificate parameters or might accept outdated, insecure ones. It could also allow TLS compression, enabling the CRIME attack [34], or insecure renegotiation [43]. The proxy may downgrade Extended Validation (EV) domains to Domain Validated (DV) ones. Additionally, the proxy may not mirror the cipher suites offered by the requesting client, using a hard-coded list with weak and insecure ciphers, reviving old attacks such as FREAK [27], Logjam [26], and BEAST [33]. If the proxy does not implement proper certificate validation, invalid and tampered certificates could be accepted, allowing MITM attacks. Accepting its own root certificate as the signing authority of externally delivered content could also enable MITM attacks on the network appliance itself. The use of a pre-generated key pair by a proxy could enable a generic trivial MITM attack [32]. Furthermore, the proxy may rely on an outdated root CA store for certificate validation, containing insecure key length, expired, or banned certificates.

## 2 Background
### 2.1 Proxies and TLS Interception
For TLS interception, network appliances use TLS proxies, which can be either transparent or explicit. An explicit proxy requires the client machine or browser to be configured with the proxy’s IP address and listening port, making the client aware of the interception process. A transparent proxy, however, operates without the client’s explicit awareness, intercepting outgoing requests meant for web servers. For TLS interception, a proxy’s certificate must be added to the client’s trusted root CA store, either explicitly by the end-user or pre-configured by an administrator.

By design, the TLS protocol should prevent MITM interception attempts by enforcing a certificate validation process, which mandates that the incoming server certificate must be signed by a trusted issuer. Certificate authorities only provide server certificates to validated domains, not to forwarding proxies. To bypass this restriction, the proxy can use a self-signed certificate added to the trusted root CA store of the TLS client, allowing the proxy to sign certificates for any domain on-the-fly and avoid triggering browser warnings. Thereafter, all HTTPS pages at the client will be protected by the proxy’s certificate instead of the intended external web server’s certificate. Users are typically unaware of the interception process unless they manually check the server certificate’s issuer chain and notice that the issuer is a local CA [42].

### 2.2 Tested Appliances
We selected six products, including free appliances, appliances typically deployed by small companies, appliances with affordable licensing for small to medium-sized businesses, and high-end products for large enterprises; see Table 1. For Microsoft Threat Management Gateway, we performed several rounds of updates and patches on a Windows Server 2008 R2 operating system, as recommended by Microsoft’s documentation [13]. These include the service pack 1 (SP1), the service pack 1 update, the service pack 2, and five rollup updates (1 to 5) [12].

For all analyzed appliances, we kept the default configuration for their respective TLS proxies. An administrator could manually modify this default configuration, which may improve or damage the proxy’s TLS security. We thus chose to apply our test framework on the unmodified configuration, assuming the vendors will use secure defaults.

### 2.3 Expected Behavior of a TLS Proxy
The TLS version, key length, and signature algorithms should be mirrored between the client-proxy and proxy-web connections to avoid misleading clients regarding the TLS security parameters. The list of cipher suites offered by the client should ideally be mirrored to the server’s TLS connection, or at least maintained to have no weak/insecure ciphers. Domains with EV certificates should not be downgraded to DV certificates, by exempting them from the interception process (e.g., through whitelisting or based on the certificate type). The TLS proxies and any associated libraries (e.g., OpenSSL, GnuTLS) must be up-to-date and patched against known TLS attacks and vulnerabilities, such as BEAST [33], CRIME [34], FREAK [27], Logjam [26], and TLS insecure renegotiation [43].

The client software (e.g., a web browser) is typically the last line of defense against faulty external certificates, as it is responsible for validating the received certificate’s chain of trust. When deployed, the TLS proxy takes on the responsibility of protecting the clients by performing proper certificate validation on their behalf, as the browser will only be exposed to the proxy-issued certificates. A less-stringent or incomplete certificate validation process can result in severe consequences, such as enabling MITM and downgrading attacks on client-based TLS proxies [32]. The impact is even higher when a network appliance’s TLS proxy lacks strict TLS validation, affecting many enterprise machines behind the appliance. Thus, all aspects of the TLS chain of trust should be properly validated, checking for flaws such as untrusted issuers, mismatched signatures, wrong common names, constrained issuers, revoked and expired certificates, certificate usage, short key certificates, and deprecated signature algorithms.

TLS proxies should also recognize their own root certificate if provided by an external web server (which should never happen) and block such connections. The proxy’s trusted CA store must not include short key, expired, or untrusted issuer certificates. Vendors should adequately protect proxies’ private keys, e.g., by encrypting them and limiting access permissions to the root account. The keys must not be pre-generated to limit the aftermath of a leaked private key from a single product, avoiding cases such as Lenovo’s SuperFish [11].

### 2.4 Threat Model
We consider three types of attackers:

- **External Attacker:** Can impersonate any web server by performing a MITM attack on a network appliance that does not perform proper certificate validation. Even if the validation process is perfect, the attacker could still impersonate any web server if the appliance uses a pre-generated root certificate and accepts external site-certificates signed by its own root key. The attacker could also take advantage of known TLS attacks/vulnerabilities to potentially acquire authentication cookies (BEAST, CRIME) or impersonate web servers (FREAK, Logjam).
- **Local Attacker:** With a network sniffer in promiscuous mode, a local attacker (e.g., a malicious employee) can access the raw traffic from the connections between the network appliance and clients. If the appliance uses a pre-generated certificate, the malicious user can install their own instance of the appliance, acquire its private key, and use it to decrypt the sniffed local traffic when the TLS connections are not protected by forward-secure ciphers. Such an adversary can also impersonate the proxy itself to other client machines, although this may be easily discovered by network administrators.
- **Compromised Appliance Attacker:** An attacker who compromises the network appliance with non-root privileges can acquire the private key if the key is not properly protected.