title:To Intercept or Not to Intercept: Analyzing TLS Interception in
Network Appliances
author:Louis Waked and
Mohammad Mannan and
Amr M. Youssef
To Intercept or Not to Intercept:
Analyzing TLS Interception in Network Appliances
Louis Waked, Mohammad Mannan, and Amr Youssef
Concordia Institute for Information Systems Engineering
{l_waked,mmannan,youssef}@ciise.concordia.ca
Concordia University
Montreal, Canada
ABSTRACT
Many enterprise-grade network appliances host a TLS proxy to
facilitate interception of TLS-protected traffic for various purposes,
including malware scanning, phishing detection, and preventing
data exfiltration. When deployed, the TLS proxy acts as the secu-
rity validating client for external TLS web servers, on behalf of
the original requesting client; on the other hand, the proxy acts
as the web server to the client. Consequently, TLS proxies must
maintain a reliable level of security, at least, at the same level as
modern web browsers and properly configured TLS servers. Failure
to do so increases the attack surface of all the proxied clients served
the network appliance. We develop a framework for testing TLS
inspecting appliances, combining and extending tests from exist-
ing work on client-end and network-based interception. Utilizing
this framework, we analyze six representative network appliances,
and uncover several security issues regarding TLS version and
certificate parameters mapping, CA trusted stores, private keys,
and certificate validation tests. For instance, we found that two
appliances perform no certificate validation at all, exposing their
end-clients to trivial Man-in-the-Middle attacks. The remaining
appliances that perform certificate validation, still do not follow
current best practices, and thus making them vulnerable against
certain attacks. We also found that all the tested appliances deceive
the requesting clients, by offering TLS parameters that are different
from the proxy-to-server TLS parameters, such as the TLS versions,
hashing algorithms, and RSA key sizes. We hope that this work
bring focus on the risks and vulnerabilities of using TLS proxies
that are being widely deployed in many enterprise and government
environments, potentially affecting all their users and systems.
CCS CONCEPTS
• Networks → Middle boxes / network appliances; • Security
and privacy → Network security; Browser security;
KEYWORDS
TLS, Proxy, Interception, Network Appliances, Certificates, Valida-
tion, MITM
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196528
ACM Reference Format:
Louis Waked, Mohammad Mannan, and Amr Youssef. 2018. To Intercept
or Not to Intercept: Analyzing TLS Interception in Network Appliances. In
ASIA CCS ’18: 2018 ACM Asia Conference on Computer and Communications
Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3196494.3196528
1 INTRODUCTION
Most network appliances currently include an SSL/TLS interception
feature in their products. The interception process is performed by
making use of a TLS web proxy server. Being either transparent
or explicit to the end-user, the proxy intercepts the user’s request
to visit a TLS server, and creates two separate TLS connections.
It acts as the HTTPS endpoint for the user’s browser, and as the
client for the actual HTTPS web server. Having the appropriate
private key for the signing certificate (inserted to the client’s root
CA store), the proxy has access to the raw plaintext traffic, and can
perform any desired action, such as restricting the access to the web
page by parsing its content, or passing it to an anti-virus/malware
analysis module or a customized traffic monitoring tool. Common
reasons for adopting TLS interception include the protection of
organization and individuals against malware and phishing attacks,
law enforcement and surveillance, access control and web filtering,
national security, hacking and spying, and privacy and identity
theft [44].
While interception violates the implicit end-to-end guarantee
of TLS, we focus on the potential vulnerabilities that such fea-
ture introduces to end-users located behind the network appli-
ances, following several other existing studies on TLS interception,
e.g., [6, 17, 32, 35, 41]. In general, TLS interception, even if im-
plemented correctly, still increases the attack surface on TLS due
to the introduction of an additional TLS client and server at the
proxy. However, the lack of consideration for following the current
best practices on TLS security as implemented in modern browsers
and TLS servers, may result in severe potential vulnerabilities, and
overall, a significantly weak TLS connection.
For example, the proxy may not mirror the TLS version and cer-
tificate parameters or might accept outdated, insecure ones. Also,
the proxy could allow TLS compression, enabling the CRIME at-
tack [34], or insecure renegotiation [43]. The proxy may downgrade
the Extended Validation (EV) domains to Domain Validated (DV)
ones. The proxy also may not mirror the cipher suites offered by the
requesting client, and use a hard-coded list with weak and insecure
ciphers, reviving old attacks such as FREAK [27], Logjam [26], and
BEAST [33]. If the proxy does not implement a proper certificate
validation mechanism, invalid and tampered certificates could be
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Louis Waked, Mohammad Mannan, and Amr Youssef
accepted by the proxy, and the clients (as they see only proxy-issued,
valid certificates). Accepting its own root certificate as the signing
authority of externally delivered content could allow MITM attacks
on the network appliance itself. The use of a pre-generated key
pair by a proxy could enable a generic trivial MITM attack [32]. In
addition, the proxy may rely on an outdated root CA store for cer-
tificate validation, containing certificates with insecure key length,
expired certificates, or banned certificates that are no longer trusted
by major browsers/OS vendors.
Concerns about security weaknesses introduced by TLS inter-
ception proxies are not new. In 2012, Jarmoc [41] proposed a basic
framework for testing network appliances consisting of seven cer-
tificate validation tests, and applied it on four network appliances.
Dormann [6, 17] relied on badssl.com’s tests to analyze the certifi-
cate validation process of two network appliances, revealing flaws
in the appliances’ certificate validation mechanisms. Carnavalet
and Mannan [32] designed a framework for analyzing client-based
TLS proxies (as included in several leading anti-virus and parental
control applications), and revealed several flaws in the TLS ver-
sion and certificate mapping, certificate validation, private key
generation and protection, CA trusted store content, in addition to
vulnerabilities to known TLS attacks. In 2017, Durumeric et al. [35]
applied tests from earlier frameworks on 12 network appliances and
13 client-side TLS proxies, uncovering several flaws in certificate
validation, cipher suites, TLS versions and known TLS attacks.
We argue that most past studies on network appliances analyzed
only preliminary aspects of TLS interception, while the extensive
work of Carnavalet and Mannan [32] targeted only client-end TLS
proxies. However, TLS vulnerabilities in network appliances could
result in more serious security issues, as arguably, enterprise com-
puters handle more important business/government data in bulk,
compared to personal information on a home user machine. Also, a
single, flawed enterprise TLS proxy can affect hundreds of business
users, as opposed to one or few users using a home computer with
a client-side TLS proxy.
In this work, we present an extensive framework dedicated for
analyzing TLS intercepting appliances, borrowing/adapting sev-
eral aspects of existing work on network appliances and client-end
proxies, in addition to applying a set of comprehensive certificate
validation tests. We analyze the TLS-related behaviors of appliance-
based proxies, and their potential vulnerabilities from several per-
spectives: TLS version and certificate parameter mapping, cipher
suites, private key generation/protection, content of root CA store,
known TLS attacks, and 32 certificate validation tests. We use this
framework to evaluate six representative TLS network appliances
between July and October 2017 (see Table 1), including open source,
free, low-end, and high-end network appliances, and present the
vulnerabilities and flaws found. All our findings have been disclosed
to the respective companies.
We found that two network appliances do not perform any certifi-
cate validation, enabling simple MITM attacks against their clients.
One appliance performs TLS certificate caching, also leading to
trivial MITM attacks. Four appliances accept their own certificates
for externally delivered content. Four appliances offer weak and
insecure ciphers, while one appliance only accepts TLS 1.0 and
SSL 3.0. We also found that the root CA stores of all appliances in-
clude certificates deemed untrusted by major browser/OS vendors,
Table 1: List of the tested appliances
Company Version
Appliance
Untangle NG Firewall Untangle
pfSense
NetGate
WebTitan Gateway
TitanHQ
Microsoft TMG
Microsoft
UserGate Web Filter
Cisco Ironport WSA
Entensys
Cisco
13.0
2.3.4
5.15 build 794
2010 (SP1, SP1 Update,
SP2 rollup updates 1 to 5)
4.4.3320601
Async OS version 10.5.1
build 270
and one appliance includes an RSA-512 certificate, which can be
trivially compromised. Five appliances also do not encrypt their pri-
vate keys; three such keys are accessible by unprivileged processes
running on the same appliance.
Analyzing network appliances raises several new challenges
compared to testing browsers and client-end TLS proxies. Several
network appliances do not include an interface for importing cus-
tom certificates (essential for testing), and many appliances do not
provide access to the file system or a terminal, overburdening the
tasks of injecting custom certificates and locating the signing keys
(for details, see Appendix B). Many appliances do not support more
than one or two network interfaces, and thus, require the use of a
router to connect to multiple interfaces. In addition, appliances that
perform SSL certificate caching require the generation of a new
root key pair for their TLS proxies for each test.
Our contributions can be summarized as follows: (1) We de-
velop a comprehensive framework to analyze TLS interception in
enterprise-grade network appliances, combining our own certificate
validation tests with existing tests for TLS proxies (both client-end
services and network appliances), which we reuse or adapt as nec-
essary for our purpose. Our certificate validation tests can be found
at: https://madiba.encs.concordia.ca/software/tls-netapp/. (2) We
use this framework to evaluate six well-known appliances from
all tiers: open source, free, low-end, and high-end products, indi-
cating that the proposed framework can be applied to different
types of network appliances. (3) We uncover several vulnerabilities
and bad practices in the analyzed appliances, including: either an
incomplete or completely absent certificate validation process (re-
sulting trivial MITM attacks), improper use of TLS parameters that
mislead clients, inadequate private key protection, and the use of
weak/insecure cipher suites.
2 BACKGROUND
In this section, we describe the TLS interception process, list the
tested products, state the expected behavior of a TLS proxy, and
explain the threat model.
Terminology. Throughout the paper, we refer to the TLS intercept-
ing network appliances as proxies, HTTPS proxies, TLS proxies,
middleboxes, or simply appliances. For the TLS requesting client,
we use: browser, end-user, user, or client. The term mirroring is
used to describe a situation where the proxy sends the same TLS
parameters received from the web server to the client side, and vice
versa; otherwise, mapping is used to indicate that the proxy has
Analyzing TLS Interception in Network Appliances
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
modified some parameters (for better or worse). Finally, we refer to
virtual machines as virtual appliances, VMs, or simply machines.
framework on the unmodified configuration (assuming the vendors
will use secure-defaults).
2.1 Proxies and TLS Interception
For TLS interception, network appliances make use of TLS prox-
ies, deployed as either transparent proxies or explicit proxies. The
explicit proxy requires the client machine or browser to have the
proxy’s IP address and listening port specifically configured to op-
erate. Thus, the client is aware of the interception process, as the
requests are sent to the proxy’s socket. On the other hand, trans-
parent proxies may operate without the explicit awareness of the
clients, as they intercept outgoing requests that are meant for the
web servers, without the use of an explicit proxy configuration on
the client side; however, for TLS interception, a proxy’s certificate
must be added to the client’s trusted root CA store (explicitly by
the end-user, or pre-configured by an administrator). Such proxies
could filter all ports, or a specific set of ports, typically including
HTTP port 80 and HTTPS port 443. Secure email protocols could
also be intercepted, by filtering port 465 for secure SMTP, port 993
for secure IMAP, and port 995 for secure POP3. The proxy handles
the client’s outgoing request by acting as the TLS connection’s
endpoint, and simultaneously initiates a new TLS connection to
the actual web server by acting as the client, while relaying the two
connections’ requests and responses.
By design, the TLS protocol should prevent any MITM intercep-
tion attempt, by enforcing a certificate validation process, which
mandates that the incoming server certificate must be signed by a
trusted issuer. Certificate authorities only provide server certificates
to validated domains, and not to forwarding proxies, precluding
the proxy from becoming a trusted issuer (i.e., a valid local CA). To
bypass this restriction, the proxy can use a self-signed certificate
that is added to the trusted root CA store of the TLS client, and
thereby allowing the proxy to sign certificates for any domain on-
the-fly, and avoid triggering browser warnings that may expose the
untrusted status of the proxy’s certificate. Thereafter, all HTTPS
pages at the client will be protected by the proxy’s certificate, in-
stead of the intended external web server’s certificate. Users are
not usually aware of the interception process, unless they manually
check the server certificate’s issuer chain, and notice that the issuer
is a local CA [42].
2.2 Tested Appliances
Most current network appliance vendors offer products for TLS
interception. We select six products, including: free appliances, ap-
pliances typically deployed by small companies, appliances with
affordable licensing for small to medium sized businesses, and high-
end products for large enterprises; see Table 1. On a side note, we
performed several rounds of updates and patches for Microsoft
Threat Management Gateway, on a Windows Server 2008 R2 oper-
ating system, as recommended by Microsoft’s documentation [13].
These include the service pack 1 (SP1), the service pack 1 update,
the service pack 2, and five rollup updates (1 to 5) [12].
For all the analyzed appliances, we keep the default configuration
for their respective TLS proxies. An administrator could of course
manually modify this default configuration, which may improve or
damage the proxy’s TLS security. We thus choose to apply our test
2.3 Expected Behavior of a TLS Proxy
We summarize TLS proxy behaviors as expected from a prudent in-
terception proxy (following [32]). Deviations from these behaviors
help design and refine our framework and validation tests.
The TLS version, key length, and signature algorithms should
be mirrored (between client-proxy and proxy-web) to avoid mis-
leading clients regarding the TLS security parameters used in the
proxy to external web server connection. The list of cipher suites
offered by the client should ideally be mirrored to the server’s TLS
connection, or at least maintained to have no weak/insecure ci-
phers. Domains with EV certificates should not be downgraded
to DV certificates, by exempting them from the interception pro-
cess (e.g., through white-listing, or simply based on the certificate
type). The TLS proxies and any associated libraries (e.g., OpenSSL,
GnuTLS) must be up-to-date, and patched against known TLS at-
tacks and vulnerabilities (following major browser vendors), such
as BEAST [33], CRIME [34], FREAK [27], Logjam [26], and TLS
insecure renegotiation [43].
Typically, the client software (e.g., a web browser) is the last
line of defense against faulty external certificates, as it is the sole
entity responsible for the received certificate’s chain of trust vali-
dation. When deployed, the TLS proxy takes on the responsibility
of protecting the clients by performing a proper certificate vali-
dation on behalf of them, as the browser will be only exposed to
the proxy-issued certificates. A less-stringent or incomplete certifi-
cate validation process could result in severe consequences, e.g.,
enabling MITM and downgrading attacks on client-based TLS prox-
ies [32]. The impact is even higher when a network appliance’s
TLS proxy lacks strict TLS validation, affecting many enterprise
machines behind the appliance. Thus, all aspects of TLS chain of
trust should be properly validated, checking for flaws such as un-
trusted issuers, mismatched signatures, wrong common-names,
constrained issuers, revoked and expired certificates, certificate
usage, short key certificates and deprecated signature algorithms.
TLS proxies should also recognize their own root certificate if pro-
vided by an external web server (which should never happen), and
block such connections. Also, the proxy’s trusted CA store must
not include short key, expired or untrusted issuer certificates.
Vendors should adequately protect proxies’ private keys, e.g.,
by encrypting them, and limiting access permissions to the root
account. The keys must not be pre-generated, to limit the aftermath
of a leaked private key from a single product, avoiding cases such
as Lenovo’s SuperFish [11].
2.4 Threat Model
We mainly consider three types of attackers.
An external attacker can impersonate any web server by perform-
ing a MITM attack on a network appliance that does not perform a
proper certificate validation. The attacker could be anywhere on
the network between the appliance and the target website. Even
if the validation process is perfect, the attacker could still imper-
sonate any web server, if the appliance uses a pre-generated root
certificate and accepts external site-certificates signed by its own
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Louis Waked, Mohammad Mannan, and Amr Youssef
root key. The attacker could also take advantage of known TLS
attacks/vulnerabilities to potentially acquire authentication cookies
(BEAST, CRIME), or impersonate web servers (FREAK, Logjam).
A local attacker (e.g., a malicious employee) with a network
sniffer in promiscuous mode can get access to the raw traffic from
the connections between the network appliance and clients. If the
appliance uses a pre-generated certificate, the malicious user can
install his own instance of the appliance, acquire its private key, and
use it to decrypt the sniffed local traffic when the TLS connections
are not protected by forward-secure ciphers. Such an adversary can
also impersonate the proxy itself to other client machines, although
this may be easily discovered by network administrators.
An attacker who compromises the network appliance itself with
non-root privileges can acquire the private key if the key is not prop-