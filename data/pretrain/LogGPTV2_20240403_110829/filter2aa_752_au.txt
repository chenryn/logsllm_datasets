位于www.codesourcery.com主机的网页服务器。魔数 80 指明了连接的目标进程是运行于
www.codesourcery.com的网页服务器而不是其它什么进程。成功建立连接后，试着输入
GET /。这会通过套接字发送一条消息给网页服务器，而相应的回答则是服务器将主页的
HTML代码传回然后关闭连接——例如： 
% telnet www.codesourcery.com 80 
Trying 206.168.99.1... 
www.AdvancedLinuxProgramming.com 
98
Connected to merlin.codesourcery.com (206.168.99.1). 
３ 注意只有 Windows NT 可以建立命名管道；Windows 9x 程序只能建立客户连接。 
４ 通常 telnet 程序用于连接到 Telnet 服务器执行远程登陆。但你也可以使用 telnet 程序连接到
其它类型的服务器然后直接向它发送命令。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
Escape character is '^]'. 
GET / 
... 
5.5.1 套接字概念 
当你创建一个套接字的时候你需要指定三个参数：通信类型，命名空间和协议。 
通信类型决定了套接字如何对待被传输的数据，同时指定了参与传输过程的进程数量。
当数据通过套接字发送的时候会被分割成段落，这些段落分别被称为一个包（packet）。通
信类型决定了处理这些包的方式，以及为这些包定位目标地址的方式。 
· 连接式（Connection style）通信保证所有包都以发出时的顺序被送达。如果由于网
络的关系出现包丢失或顺序错乱，接收端会自动要求发送端重新传输。 
连接类型的套接字可想象成电话：发送和接收端的地址在开始时连接被建立的时候
都被确定下来。 
· 数据报式（Datagram style）的通信不确保信息被送到，也不保证送到的顺序。数
据可能由于网络问题或其它情况在传输过程中丢失或重新排序。每个数据包都必须
标记它的目标地址，而且不会被保证送到。系统仅保证“尽力”做到，因此数据包
可能消失，或以与发出时不同的顺序被送达。 
数据报类型的通信更类似邮政信件。发送者为每个单独信息标记收信人地址。 
套接字的命名空间指明了套接字地址的书写方式。套接字地址用于标识一个套接字连接
的一个端点。例如，在“本地命名空间”中的套接字地址是一个普通文件。而在“Internet
命名空间”中套接字地址由网络上的一台主机的 Internet 地址（也被称为 Internet 协议地址
或 IP 地址）和端口号组成。端口号用于区分同一台主机上的不同套接字。 
协议指明了数据传输的方式。常见的协议有如下几种：TCP/IP，Internet 上使用的最主
要的通信协议；AppleTalk 网络协议；UNIX 本地通信协议等。通信类型、命名空间和协议
三者的各种组合中，只有部分是有效的。 
5.5.2 系统调用 
套接字比之前介绍的任何一种进程间通信方法都更具弹性。这里列举了与套接字相关的
系统调用： 
socket——创建一个套接字 
close——销毁一个套接字 
connect——在两个套接字之间创建连接 
bind——将一个服务器套接字绑定一个地址 
listen——设置一个套接字为接受连接状态 
accept——接受一个连接请求并为新建立的连接创建一个新的套接字 
套接字通常被表示为文件描述符。 
www.AdvancedLinuxProgramming.com 
99
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
创建和销毁套接字 
Socket 和 close 函数分别用于创建和销毁套接字。当你创建一个套接字的时候，需指
明三种选项：命名空间，通信类型和协议。利用 PF_开头（标识协议族，protocol families）
的常量指明命名空间类型。例如，PF_LOCAL 或 PF_UNIX 用于标识本地命名空间，而
PF_INET 表示 Internet 命名空间。用以 SOCK_开头的常量指明通信类型。SOCK_STREAM
表示连接类型的套接字，而 SOCK_DGRAM 表示数据报类型的套接字。 
第三个参数，协议，指明了发送和接收数据的底层机制。每个协议仅对一种命名空间和
通信类型的组合有效。因为通常来说，对于某种组合都有一个最合适的协议，为这个参数指
定 0 通常是最合适的选择。如果 socket 调用成功则会返回一个表示这个套接字的文件描述
符。与操作普通文件描述符一样，你可以通过 read 和 write 对这个套接字进行读写。当
你不再需要它的时候，应调用 close 删除这个套接字。 
调用 connect 
要在两个套接字之间建立一个连接，客户端需指定要连接到的服务器套接字地址，然后
调用 connect。客户端指的是初始化连接的进程，而服务端指的是等待连接的进程。客户
端调用 connect 以在本地套接字和第二个参数指明的服务端套接字之间初始化一个连接。
第三个参数是第二个参数中传递的标识地址的结构的长度，以字节计。套接字地址格式随套
接字命名空间的不同而不同。 
发送信息 
所有用于读写文件描述符的技巧均可用于读写套接字。关于 Linux 底层 I/O 函数及一些
相关使用问题的讨论请参考附录 B。而专门用于操作套接字的 send 函数提供了 write 之外
的另一种选择，它提供了 write 所不具有的一些特殊选项；参考 send 的手册页以获取更
多信息。 
5.5.3 服务器 
服务器的生命周期可以这样描述：创建一个连接类型的套接字，绑定一个地址，调用
listen 将套接字置为监听状态，调用 accept 接受连接，最后关闭套接字。数据不是直接
经由服务套接字被读写的；每次当程序接受一个连接的时候，Linux 会单独创建一个套接字
用于在这个连接中传输数据。在本节中，我们将介绍 bind、listen 和 accept。 
要想让客户端找到，必须用 bind 将一个地址绑定到服务端套接字。Bind 函数的第一
个参数是套接字文件描述符。第二个参数是一个指针，它指向表示套接字地址的结构。它的
格式取决于地址族。第三个参数是地址结构的长度，以字节计。将一个地址绑定到一个连接
类型的套接字之后，必须通过调用 listen 将这个套接字标识为服务端。Listen 的第一个
参数是套接字文件描述符。第二个参数指明最多可以有多少个套接字处于排队状态。当等待
连接的套接字超过这个限度的时候，新的连接将被拒绝。它不是限制一个服务器可以接受的
连接总数；它限制的是被接受之前允许尝试连接服务器的客户端总数。 
服务端通过调用 accept 接受一个客户端连接。第一个参数是套接字文件描述符。第二
个参数是一个指向套接字地址结构的指针；接受连接后，客户端地址将被写入这个指针指向
的结构中。第三个参数是套接字地址结构体的长度，以字节计。服务端可以通过客户端地址
确定是否希望与客户端通信。调用 accept 会创建一个用于与客户端通信的新套接字，并返
回对应的文件描述符。原先的服务端套接字继续保持监听连接的状态。用 recv 函数可以从
套接字中读取信息而不将这些信息从输入序列中删除。它在接受与 read 相同的一组参数的
www.AdvancedLinuxProgramming.com 
100
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
基础上增添了一个 FLAGS 参数。指定 FLAGS 为 MSG_PEEK 可以使被读取的数据仍保留
在输入序列中。 
5.5.4 本地套接字 
要通过套接字连接同一台主机上的进程，可以使用符号常量 PF_LOCAL 和 PF_UNIX
所代表的本地命名空间。它们被称为本地套接字（local sockets）或者 UNIX 域套接字
（UNIX-domain sockets）。它们的套接字地址用文件名表示，且只在建立连接的时候使用。 
套接字的名字在 struct sockaddr_un 结构中指定。你必须将 sun_family 字段设置
为 AF_LOCAL 以表明它使用本地命名空间。该结构中的 sun_path 字段指定了套接字使用
的路径，该路径长度必须不超过 108 字节。而 struct sockaddr_un 的实际长度应由
SUN_LENG 宏计算得到。可以使用任何文件名作为套接字路径，但是进程必须对所指定的
目录具有写权限，以便向目录中添加文件。如果一个进程要连接到一个本地套接字，则必须
具有该套接字的读权限。尽管多台主机可能共享一个文件系统，只有同一台主机上运行的程
序之间可以通过本地套接字通信。 
本地命名空间的唯一可选协议是 0。 
因为它存在于文件系统中，本地套接字可以作为一个文件被列举。如下面的例子，注意
开头的 s： 
% ls -l /tmp/socket 
srwxrwx--x    1 user    group    0 Nov 13 19:18 /tmp/socket 
当结束使用的时候，调用 unlink 删除本地套接字。 
5.5.5 使用本地套接字的示例程序 
我们用两个程序展示套接字的使用。列表 5.10 中的服务器程序建立一个本地命名空间
套接字并通过它监听连接。当它连接之后，服务器程序不断从中读取文本信息并输出这些信
息直到连接关闭。如果其中一条信息是“quit”，服务器程序将删除套接字，然后退出。服
务器程序 socket-server 接受一个标识套接字路径的命令行参数。 
代码列表 5.10 （socket-server.c）本地命名空间套接字服务器 
#include  
#include  
#include  
#include  
#include  
#include  
/* 不断从套接字读取并输出文本信息直到套接字关闭。当客户端发送“quit”消息的
时候返回非 0 值，否则返回 0。*/ 
int server (int client_socket) 
{ 
  while (1) { 
www.AdvancedLinuxProgramming.com 
101
    int length; 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
    char* text; 
    /* 首先，从套接字中获取消息的长度。如果 read 返回 0 则说明客户端关闭了连
接。*/ 
    if (read (client_socket, &length, sizeof (length)) == 0) 
      return 0; 
    /* 分配用于保存信息的缓冲区。*/ 
    text = (char*) malloc (length); 
    /* 读取并输出信息。*/ 
    read (client_socket, text, length); 
    printf (“%s\n”, text); 
    /* 如果客户消息是“quit”，我们的任务就此结束。*/ 
    if (!strcmp (text, “quit”)) { 
      /* 释放缓冲区。*/ 
      free (text); 
      return 1; 
    } 
    /* 释放缓冲区。*/ 
    free (text); 
    /* 译者注：合并了勘误中的提示，并增加此返回语句。*/ 
    return 0; 
  } 
} 
int main (int argc, char* const argv[]) 
{ 
  const char* const socket_name = argv[1]; 
  int socket_fd; 
  struct sockaddr_un name; 
  int client_sent_quit_message; 
  /* 创建套接字。*/ 
  socket_fd = socket (PF_LOCAL, SOCK_STREAM, 0); 
  /* 指明这是服务器。*/ 
  name.sun_family = AF_LOCAL; 
  strcpy (name.sun_path, socket_name); 
  bind (socket_fd, &name, SUN_LEN (&name)); 
  /* 监听连接。*/ 
  listen (socket_fd, 5); 
  /* 不断接受连接，每次都调用 server() 处理客户连接。直到客户发送“quit”消
息的时候退出。*/ 
  do { 
www.AdvancedLinuxProgramming.com 
102
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
    struct sockaddr_un client_name; 
    socklen_t client_name_len; 
    int client_socket_fd; 
    /* 接受连接。*/ 
    client_socket_fd 
= 
accept 
(socket_fd, 
&client_name, 
&client_name_len); 