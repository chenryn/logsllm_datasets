follows a very simple construction and uses a tight instruction cycle. The whole
worm code ﬁts in one UDP packet. The payload used was an exploit against
the MS SQL server. Again, both versions of our approach were able to detect
the worm code and generated the signature: B8 01 01 01 01 .* 50 E2 FD,
which corresponds to the following portion of the worm code [4]. This is the ﬁrst
executable segment which satisﬁes the process of elimination and our algorithm
exits after raising an alert.
xor ecx,ecx
mov cl,0x18
push eax
loop 0x16
0000000D B801010101 mov eax,0x1010101
00000012 31C9
00000014 B118
00000016 50
00000017 E2FD
In our experience, both variations of our exploit code detection algorithm
were equally eﬀective in detecting the above exploit code versions. This was
mainly because the payload consisted of continuous instruction streams. How-
ever, carefully placed data bytes can defeat the fast disassembly scheme, making
the accurate scheme more relevant.
6.2 Performance Overheads
We compared our approach against a signature-based detection system - Snort.
Several factors contribute to the runtime overheads in both approaches. For
Snort, the overheads can be due to network packet reassembly, signature table
lookups, network ﬂow scanning and writing to log ﬁles. On the other hand, for
our approach, overheads are be caused by network packet reassembly, binary dis-
assembly and static analysis. We are mainly interested in understanding running-
time behavior, and therefore, implemented and compared only the core detection
algorithms. Moreover, since we conducted our experiments in an oﬄine setting,
all aspects of a complete implementation cannot be meaningfully measured.
The single most important factor is the network ﬂow size. In order to cor-
rectly measure running time for this parameter only, we either eliminated or
normalized other free parameters. For example, Snort’s pattern matching algo-
rithm also depends on the size of the signature repository while in our approach
signatures are a non-factor. We normalized it by maintaining a constant Snort
signature database of 100 signatures throughout the experiment. The bulk of
these signatures were obtained from http://www.snort.org and the rest were
synthesized. All experiments were performed on 2.6 GHz Pentium 4 with 1 GB
RAM running Linux (Fedora Core 3).
Figure 6 shows the results obtained by running both variations of our approach
against Snort’s pattern matching. We considered four kinds of network ﬂows
based on ﬂow content. As is evident from the plots, pattern matching is extremely
fast and network ﬂow size does not appear to be a signiﬁcant factor. In contrast,
the running time of our approach shows a non-negligible dependence on the size
of network ﬂows. Both variations of our approach display a linear relationship,
Fast Disassembly
Fast Disassembly
Accurate Disassembly
Accurate Disassembly
Snort
Snort
 0
 0
 5
 5
 10
 10
 15
 15
 20
 20
 30
 30
 35
 25
 25
 35
Flow size (KB)
Flow size (KB)
 40
 40
 45
 45
 50
 50
 55
 55
 60
 60
(a) HTTP (port 80)
Fast Disassembly
Fast Disassembly
Accurate Disassembly
Accurate Disassembly
Snort
Snort
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
 60
 60
 55
 55
 50
 50
 45
 45
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
A Fast Static Analysis Approach
305
Fast Disassembly
Fast Disassembly
Accurate Disassembly
Accurate Disassembly
Snort
Snort
 0
 0
 5
 5
 10
 10
 15
 15
 20
 20
 30
 30
 35
 25
 25
 35
Flow size (KB)
Flow size (KB)
 40
 40
 45
 45
 50
 50
 55
 55
 60
 60
(b) SSH (port 22)
Fast Disassembly
Fast Disassembly
Accurate Disassembly
Accurate Disassembly
Snort
Snort
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
)
)
s
s
c
c
e
e
s
s
(
(
e
e
m
m
T
T
i
i
 60
 60
 55
 55
 50
 50
 45
 45
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
 50
 50
 45
 45
 40
 40
 35
 35
 30
 30
 25
 25
 20
 20
 15
 15
 10
 10
 5
 5
 0
 0
 0
 0
 5
 5
 10
 10
 15