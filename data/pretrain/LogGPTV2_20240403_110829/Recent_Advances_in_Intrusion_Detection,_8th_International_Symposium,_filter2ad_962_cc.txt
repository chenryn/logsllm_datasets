The worm follows a simple construction and employs a tight instruction cycle, with the entire code fitting into a single UDP packet. The payload used was an exploit targeting the MS SQL server. Both versions of our detection approach were able to identify the worm code and generated the signature: `B8 01 01 01 01 .* 50 E2 FD`. This signature corresponds to the following segment of the worm code [4]:

```assembly
xor ecx,ecx
mov cl,0x18
push eax
loop 0x16
0000000D B801010101 mov eax,0x1010101
00000012 31C9
00000014 B118
00000016 50
00000017 E2FD
```

This is the first executable segment that satisfies the process of elimination, and our algorithm raises an alert upon detection.

In our experience, both variations of our exploit code detection algorithm were equally effective in detecting the above exploit code. This was primarily due to the payload consisting of continuous instruction streams. However, carefully placed data bytes can defeat the fast disassembly scheme, making the accurate disassembly method more relevant.

### 6.2 Performance Overheads

We compared our approach against Snort, a signature-based detection system. Several factors contribute to the runtime overheads in both approaches. For Snort, these overheads can be attributed to network packet reassembly, signature table lookups, network flow scanning, and writing to log files. In contrast, for our approach, the overheads are caused by network packet reassembly, binary disassembly, and static analysis. Our primary interest was in understanding the running-time behavior, so we implemented and compared only the core detection algorithms. Since our experiments were conducted in an offline setting, not all aspects of a complete implementation could be meaningfully measured.

The most significant factor affecting performance is the size of the network flow. To accurately measure the running time for this parameter, we either eliminated or normalized other free parameters. For example, Snort's pattern matching algorithm depends on the size of the signature repository, which we normalized by maintaining a constant Snort signature database of 100 signatures throughout the experiment. These signatures were obtained from http://www.snort.org and some were synthesized. All experiments were performed on a 2.6 GHz Pentium 4 with 1 GB RAM running Linux (Fedora Core 3).

Figure 6 shows the results of running both variations of our approach against Snortâ€™s pattern matching. We considered four types of network flows based on their content. As evident from the plots, pattern matching is extremely fast, and the size of the network flow does not significantly affect it. In contrast, the running time of our approach shows a non-negligible dependence on the size of the network flows. Both variations of our approach display a linear relationship with the flow size.

**Figure 6: Running Time vs. Network Flow Size**

- **(a) HTTP (port 80)**
- **(b) SSH (port 22)**

The plots clearly show that as the flow size increases, the running time of our approach increases linearly, while Snort's pattern matching remains relatively constant. This highlights the trade-off between the speed of pattern matching and the accuracy provided by our disassembly methods.