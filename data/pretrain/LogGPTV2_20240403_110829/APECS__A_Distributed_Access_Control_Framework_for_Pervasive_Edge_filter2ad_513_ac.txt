Thus, to delegate access control enforcement to PEC servers, the
service provider (p ∈ P) must register with the Cloud (C) as the
hosting environment for running its AIA and bootstrapping the
PEC servers at the edge. Initially, as illustrated in Protocol 1, the
providers and base stations run the system setup for the MABE
protocol as defined in Definition 4.2 (Line 1). Provider registration
begins with p forming and sending a request (RAC) to C, containing
p’s certificate (Certp), followed by a challenge-response commu-
nication to prove the ownership of Certp (Line 2). We note that
Certx contains the verification key of entity x (V Kx ), which will
be used for signature verification. Upon receipt of RAC from p, C
registers p by generating a profile and a provider identifier IDp
(Line 3), using either the unique subject identifier value stored in
Certp or its digest, and returns it to p (Line 4). This allows p to use
IDp when generating future access tokens and aids in confirming
the validity of the tokens at the PEC servers.
5.1.2 Edge Server Registration (Protocol 2). As shown in Protocol 2,
a PEC server (e ∈ E) initiates its registration process by securely
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1409Protocol 1 System Setup and Provider Registration
{At AIAs (Provider & Base station)}
Mpk = (sysparam, apk1, . . . , apkn), ask1, . . . , askn
(cid:16)
1:
ABE.Setup(1λ, n)
(cid:17) ←
Protocol 3 User Registration
1: send {user_data, Certu} to p
{At User}
{At Provider}
{At Provider}
{At Cloud}
2: send RAC = {Certp} to C
3: IDp ← registerProvider(Certp);
4: return IDp to p;
sending it’s certificate, (Certe), and the list of identifiers, ([IDs]),
of services it would like to provide to two AIAs–both p’s AIA,
hosted on the Cloud, and the base station that e is connected to
(Line 1). Each AIA executes the MABE key generation algorithm
(following Definition 4.2) to generate a list of secret keys [Ae] for
e, corresponding to the services [IDs] offered by e (Line 3). The
AIA stores the generated keys in a serverTable and securely sends
them to e (Lines 4-5), allowing it to decrypt any requests that it may
receive from users, so long as e’s attributes match the attributes in
the user’s request.
5.1.3 User Registration (Protocol 3). A new service consumer (u ∈
U), interested in p’s service(s), has to register with p to obtain a cus-
tomized token for future service utilization. As shown in Protocol 3,
user registration begins with u sending a request to p containing
her certificate (Certu) and general user data (user_data) that are
often used for creating user accounts, such as credentials, e-mail,
and birth-date (Line 1). The user_data also contains any number
of values necessary for the provider to complete registration of the
user. Additionally, this metadata contains information related to the
requested service, such as service tiers (e.g., bronze, silver, and gold)
or service types (e.g., image annotation, gaming, or streaming).
Provider p verifies u’s request and if the registration request is
valid (Line 2), it retrieves a list of service identifiers ([IDs]) cor-
responding to the user_data. It should be noted that the [IDs]
corresponds to services offered by p. With the user’s information,
p generates a customized access token (Tpu) for u containing p’s
identifier (IDp), list of permitted service identifiers ([IDs]), the
user’s certificate (Certu), u’s authorization levels for the permitted
services ([Lu]), and an expiry time Texp (Line 3). To protect the
token’s integrity and for provenance, p signs the token (Line 4).
The provider further obtains Mpk, the MABE’s master public key
(Line 5), which is needed in the MABE encryption process. Upon
storing u’s information and her token in the userTable, p securely
sends a tuple, including Tpu, its signature (σTpu ), and Mpk to u
(Lines 6-7). However, if p doesn’t accept u’s registration request, it
returns a negative acknowledgement to u (Lines 8-9). The presence
Protocol 2 Edge Server Registration
1: send {[IDs], Certe} to AIAs (provider hosted on C and the
{At Edge Server}
corresponding base station)
{At Provider & Base station}
2: [Ae] ← ABE.KeyGen(Mpk , aske , ide ,[IDs])
3: store {e,[Ae]} in serverT able
4: return {e,[Ae]} to e
(Tpu)
2: if p accepts u’s registration request then
Set Tpu = (IDp ,[IDs], Certu ,[Lu],Texp)
3:
σTpu ← SignSKP
4:
5: Mpk ← retrieveABECredentials()
store {u, Tpu} in userT able
6:
return {Tpu , σTpu , Mpk} to u
7:
8: else
return ⊥
9:
10: end if
of IDp and the σTpu helps to ensure authenticity and integrity of
u’s token and prevents tampering with the token. Also, Certu in
the token indicates u’s ownership of the token. Additionally, the
set of permitted service identifiers, [IDs], is included to enable easy
vetting of requests by PEC servers. Using tokens in APECS, the
PEC server is not required to contact p to verify u’s authorization.
Finally, Texp proves token’s freshness and enables a lazy revocation
process through token expiration.
5.2 Service Request Protocol
Protocol 4 details u’s service request procedure. We note that re-
questing a content is an instance of requesting a static service which
does not require user specific input data. In contrast, offloading a
computation is an instance of a user requesting a dynamic service,
which may require some input data (from the user to perform com-
putation on). These two types of services are different in the sense
that the requesting user’s data should be protected when the user
is requesting a dynamic service, hence the need for data encryption
with MABE. Initially, u has to specify if the desired service (IDs) is
dynamic (e.g., image annotation) or static (e.g., video streaming). For
a static service, u creates two of the request’s components by spec-
ifying the content_name as C1 and a null C2 (Lines 1-2). We note
that the content_name is not required to be encrypted. However,
MABE encryption can be used for encrypting the content_name
to preserve u’s privacy at the cost of additional latency. For a dy-
namic service, u first encrypts symmetric key K using the MABE
scheme with the master public key Mpk and the requisite service
attributes represented by IDs to generate C1 (Line 4). She then uses
a symmetric key cryptosystem such as AES and k to encrypt the
required service data (D) for generating C2 (Line 5). The publicly
visible attributes in the MABE policy for C1 identify the specific
service requested by the user to all PEC servers who receive the
request. Subsequently, u creates her request (Req) as a four-element
Protocol 4 User’s Service Request
1: if IDs is Static Service Request then
2:
3: else if IDs is Dynamic Service Request then
4:
5:
6: end if
7: set Req = {Tpu , IDs , C1, C2}, σReq ← SignSKu
8: send {Req, σReq}
C1 ← content_name, C2 ← ⊥
C1 ← ABE.Encrypt(Mpk , IDs , K)
C2 = EncK(D)
(Req)
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1410tuple, including the token Tpu, the requested service with identifier
IDs, C1, and C2.
The user then signs the crafted request using SKu that corre-
sponds to her certificate (Certu), embedded in Tpu (Line 7), and
sends the request and its signature as a payload to the base station
to be forwarded to the edge network (Line 8).
5.3 Service Response Protocol
As detailed in Protocol 5, edge server e receives the request from
the base station (the base station just serves as a relay) and ver-
ifies the signature on the request using V Ku extracted from Tpu
(Lines 1-2). If signature verification fails, e returns error and drops
the connection (Lines 33-35). Successful verification indicates that
the request is generated by Tpu’s owner. If successful, e confirms
the freshness of Tpu by comparing its expiry time (Texp) with the
current time (Tc) (Lines 4-5). Subsequently, e searches for Tpu in its
revocation table (revocTable) to ensure that u has not been added
to access-denied list (Lines 6-8). If any checks fail, e returns an
error and drops the connection. In the event that a valid user has
encountered any of these failures, the user may request a new token
and obtain a valid Tpu using her new certificate and established
user credentials (refer to Protocol 1). Upon token validation, e uses
IDp that is contained within Tpu to lookup Certp in its local cache.
If e does not have the Certp corresponding to IDp, it can obtain
(from the user or the service provider) Certp using IDp (Line 9).
On receiving Certp, e extracts the V Kp from Certp and verifies the
signature on Tpu, dropping the connection if invalid (Lines 10-11).
Successful verification validates Tpu’s integrity and provenance.
Finally, e compares u’s authorization tier (Lu) with the service tier
of the requested data (LD), contained in the data (Lines 13-15). If
authorization fails, e drops the connection; otherwise, it moves to
the next step.
Once e has successfully authenticated and authorized u and can
process the request. Request fulfillment begins with the PEC server
identifying the requested service type based on IDs (Line-17). For a
dynamic service request, e verifies whether it offers the requested
service or not (Line 18). If e is capable, it decrypts C1 using its
decryption keys [Ae] and retrieves the symmetric key K, using
it to decrypt the data (D) needed for service execution (Lines 19-
21). In the event that the server does not possess the capability
to execute the service, it forwards the service request to another
server (Lines 22-23). For a static service request, e looks up the
content_name (in C1) in its cache and returns the data to the user
(Line 26-27). If the data is not available in e’s cache, it forwards the
request to another server or p as defined by the application logic
(Lines 28-29). Using MABE in APECS helps with asynchronous au-
thentication/authorization of the PEC server–a PEC server without
sufficient attributes cannot access user’s data. Moreover, MABE en-
ables efficient PEC server revocation without global system re-key;
discussed in the following.
5.4 User and PEC server Revocation Protocols
Access right revocation is a commonplace functionality of any
access control system. In APECS, we consider both user access revo-
cation as well as PEC server revocation. Of particular importance
is PEC server revocation, necessary to prevent revoked server’s
access to users’ data. We start with revocation of user u and then
(Req, σReq) then
return error
return error
(σTpu , Tpu) then
drop connection and return error
else if IDs is Static Service Request then
end if
if true ← contentCacheLookup(C1) then
Protocol 5 Edge Server’s Service Response
1: receive {Req, σReq}
2: extract {Tpu , IDs , C1, C2} ← Req, (IDp , [IDs], Certu , Lu ,
Texp) ← Tpu, V Ku ← Certu
3: if true ← VerifyV Ku
if Texp < Tc then
else if Tpu ∈ revocT able then
end if
Certp ← lookupProvider(IDp), V KP ← Certp
if f alse ← VerifyV Kp
drop connection
end if
retrieve LD for content_name
if Lu ≤ LD then
end if
if IDs is Dynamic Service Request then
if true ← checkServerCapability(IDs) then
K ← ABE.Decrypt(Mpk ,[Ae], C1)
D ← DecK(C2)
return fulfillService(D)
else
requestService(Req, σReq)
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32: else
33:
34: end if
PEC server e. As shown in Protocol 6, for revoking u, p removes
Tpu from its userTable and forwards the token to its AIA that is
hosted on the Cloud (Line 1). On receiving the revocation notifi-
cation, C retrieves the list of all PEC servers who could serve u,
and notifies them of the revocation (Lines 2-6). Revocation commu-
nication could be done scalably using distributed ledger [15, 29].
On revocation notification, each e will add Tpu to its revocT able
(Lines 7-8). If a token is expired, the entry can be removed.
In APECS, revocation of e is handled by the AIAs (Provider and
Base stations) who execute the MABE algorithms via a local system
′
re-key for the non-revoked PEC servers (updating Mpk to M
pk).
While ABE revocation is generally costly, due to system re-keying,
APECS uses the MABE scheme in a way that optimizes PEC server
revocation. When p decides to revoke e, it instructs e’s base station
(the second AIA managing far less number of PEC servers that