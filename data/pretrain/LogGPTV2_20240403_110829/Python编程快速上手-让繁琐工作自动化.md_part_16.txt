对接下来的3个问题，假定spam包含列表['a', 'b', 'c', 'd']。
3．spam[int('3' * 2) / 11]求值为多少？
4．spam[-1]求值为多少？
5．spam[:2]求值为多少？
对接下来的3个问题。假定bacon包含列表[3.14, 'cat', 11, 'cat', True]。
6．bacon.index('cat')求值为多少？
7．bacon.append(99)让bacon中的列表值变成什么样？
8．bacon.remove('cat')让bacon中的列表时变成什么样？
9．列表连接和复制的操作符是什么？
10．append()和insert()列表方法之间的区别是什么？
11．从列表中删除值有哪两种方法？
12．请说出列表值和字符串的几点相似之处。
13．列表和元组之间的区别是什么？
14．如果元组中只有一个整数值42，如何输入该元组？
15．如何从列表值得到元组形式？如何从元组值得到列表形式？
16．“包含”列表的变量，实际上并未真地直接包含列表。它们包含的是什么？
Python编程快速上手——让繁琐工作自动化
17．copy.copy()和copy.deepcopy()之间的区别是什么？
4.10 实践项目
作为实践，编程完成下列任务。
4.10.1 逗号代码
假定有下面这样的列表：
spam = ['apples', 'bananas', 'tofu', 'cats']
编写一个函数，它以一个列表值作为参数，返回一个字符串。该字符串包含所
有表项，表项之间以逗号和空格分隔，并在最后一个表项之前插入 and。例如，将
前面的spam列表传递给函数，将返回'apples, bananas, tofu, and cats'。但你的函数应
该能够处理传递给它的任何列表。
4.10.2 字符图网格
假定有一个列表的列表，内层列表的每个值都是包含一个字符的字符串，像这样：
grid = [['.', '.', '.', '.', '.', '.'],
['.', 'O', 'O', '.', '.', '.'],
['O', 'O', 'O', 'O', '.', '.'],
['O', 'O', 'O', 'O', 'O', '.'],
['.', 'O', 'O', 'O', 'O', 'O'],
['O', 'O', 'O', 'O', 'O', '.'],
['O', 'O', 'O', 'O', '.', '.'],
['.', 'O', 'O', '.', '.', '.'],
['.', '.', '.', '.', '.', '.']]
你可以认为 grid[x][y]是一幅“图”在 x、y 坐标处的字符，该图由文本字符组
成。原点(0, 0)在左上角，向右x坐标增加，向下y坐标增加。
复制前面的网格值，编写代码用它打印出图像。
..OO.OO..
.OOOOOOO.
.OOOOOOO.
..OOOOO..
...OOO...
....O....
提示 你需要使用循环嵌套循环，打印出grid[0][0]，然后grid[1][0]，然后grid[2][0]，以此
类推，直到 grid[8][0]。这就完成第一行，所以接下来打印换行。然后程序将打印出
grid[0][1]，然后grid[1][1]，然后grid[2][1]，以此类推。程序最后将打印出grid[8][5]。
而且，如果你不希望在每次 print()调用后都自动打印换行，记得向 print()传递
end关键字参数。
第4章 列表
5
第 章
字典和结构化数据
在本章中，我将介绍字典数据类型，它提供了一种灵活
的访问和组织数据的方式。然后，结合字典与前一章中关于
列表的知识，你将学习如何创建一个数据结构，对井字棋盘
建模。
5.1 字典数据类型
像列表一样，“字典”是许多值的集合。但不像列表的下标，字典的索引可以
使用许多不同数据类型，不只是整数。字典的索引被称为“键”，键及其关联的值
称为“键-值”对。
在代码中，字典输入时带花括号{}。在交互式环境中输入以下代码：
>>> myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}
这将一个字典赋给myCat变量。这个字典的键是'size'、'color'和'disposition'。这
些键相应的值是'fat'、'gray'和'loud'。可以通过它们的键访问这些值：
>>> myCat['size']
'fat'
>>> 'My cat has ' + myCat['color'] + ' fur.'
'My cat has gray fur.'
字典仍然可以用整数值作为键，就像列表使用整数值作为下标一样，但它们不
必从0开始，可以是任何数字。
>>> spam = {12345: 'Luggage Combination', 42: 'The Answer'}
5.1.1 字典与列表
不像列表，字典中的表项是不排序的。名为spam的列表中，第一个表项是spam[0]。
但字典中没有“第一个”表项。虽然确定两个列表是否相同时，表项的顺序很重要，
但在字典中，键-值对输入的顺序并不重要。在交互式环境中输入以下代码：
>>> spam = ['cats', 'dogs', 'moose']
>>> bacon = ['dogs', 'moose', 'cats']
>>> spam == bacon
False
>>> eggs = {'name': 'Zophie', 'species': 'cat', 'age': '8'}
>>> ham = {'species': 'cat', 'age': '8', 'name': 'Zophie'}
>>> eggs == ham
True
因为字典是不排序的，所以不能像列表那样切片。
尝试访问字典中不存在的键，将导致KeyError出错信息。这很像列表的“越界”
IndexError 出错信息。在交互式环境中输入以下代码，并注意显示的出错信息，因
为没有'color'键：
>>> spam = {'name': 'Zophie', 'age': 7}
>>> spam['color']
Traceback (most recent call last):
File "", line 1, in 
spam['color']
KeyError: 'color'
尽管字典是不排序的，但可以用任意值作为键，这一点让你能够用强大的方式来
组织数据。假定你希望程序保存朋友生日的数据，就可以使用一个字典，用名字作为
键，用生日作为值。打开一个新的文件编辑窗口，输入以下代码，并保存为birthdays.py：
 birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}
while True:
print('Enter a name: (blank to quit)')
name = input()
if name == '':
break
 if name in birthdays:
 print(birthdays[name] + ' is the birthday of ' + name)
else:
print('I do not have birthday information for ' + name)
print('What is their birthday?')
82 Python编程快速上手——让繁琐工作自动化
bday = input()
 birthdays[name] = bday
print('Birthday database updated.')
你创建了一个初始的字典，将它保存在birthdays中。用in关键字，可以看看输入
的名字是否作为键存在于字典中，就像查看列表一样。如果该名字在字典中，你可以用
方括号访问关联的值。如果不在，你可以用同样的方括号语法和赋值操作符添加它。
运行这个程序，结果看起来如下所示：
Enter a name: (blank to quit)
Alice
Apr 1 is the birthday of Alice
Enter a name: (blank to quit)
Eve
I do not have birthday information for Eve
What is their birthday?
Dec 5
Birthday database updated.
Enter a name: (blank to quit)
Eve
Dec 5 is the birthday of Eve
Enter a name: (blank to quit)
当然，在程序终止时，你在这个程序中输入的所有数据都丢失了。在第 8章中，
你将学习如何将数据保存在硬盘的文件中。
5.1.2 keys()、values()和items()方法
有3个字典方法，它们将返回类似列表的值，分别对应于字典的键、值和键-值对：
keys()、values()和items()。这些方法返回的值不是真正的列表，它们不能被修改，没有
append()方法。但这些数据类型（分别是dict_keys、dict_values和dict_items）可以用于
for循环。为了看看这些方法的工作原理，请在交互式环境中输入以下代码：
>>> spam = {'color': 'red', 'age': 42}
>>> for v in spam.values():
print(v)
red
42
这里，for 循环迭代了 spam 字典中的每个值。for 循环也可以迭代每个键，或
者键-值对：
>>> for k in spam.keys():
print(k)
color
age
>>> for i in spam.items():
print(i)
('color', 'red')
('age', 42)
第5章 字典和结构化数据 83
利用keys()、values()和items()方法，循环分别可以迭代键、值或键-值对。请注
意，items()方法返回的dict_items值中，包含的是键和值的元组。
如果希望通过这些方法得到一个真正的列表，就把类似列表的返回值传递给 list
函数。在交互式环境中输入以下代码：
>>> spam = {'color': 'red', 'age': 42}
>>> spam.keys()
dict_keys(['color', 'age'])
>>> list(spam.keys())
['color', 'age']
list(spam.keys())代码行接受keys()函数返回的dict_keys值，并传递给list()。然
后返回一个列表，即['color', 'age']。
也可以利用多重赋值的技巧，在 for 循环中将键和值赋给不同的变量。在交互
式环境中输入以下代码：
>>> spam = {'color': 'red', 'age': 42}
>>> for k, v in spam.items():
print('Key: ' + k + ' Value: ' + str(v))
Key: age Value: 42
Key: color Value: red
5.1.3 检查字典中是否存在键或值
回忆一下，前一章提到，in和not in操作符可以检查值是否存在于列表中。也
可以利用这些操作符，检查某个键或值是否存在于字典中。在交互式环境中输入以
下代码：
>>> spam = {'name': 'Zophie', 'age': 7}
>>> 'name' in spam.keys()
True
>>> 'Zophie' in spam.values()
True
>>> 'color' in spam.keys()
False
>>> 'color' not in spam.keys()
True
>>> 'color' in spam
False
请注意，在前面的例子中，'color' in spam本质上是一个简写版本。相当于'color'
in spam.keys()。这种情况总是对的：如果想要检查一个值是否为字典中的键，就可
以用关键字in（或not in），作用于该字典本身。
5.1.4 get()方法
在访问一个键的值之前，检查该键是否存在于字典中，这很麻烦。好在，字典有一
个get()方法，它有两个参数：要取得其值的键，以及如果该键不存在时，返回的备用值。
84 Python编程快速上手——让繁琐工作自动化
在交互式环境中输入以下代码：
>>> picnicItems = {'apples': 5, 'cups': 2}
>>> 'I am bringing ' + str(picnicItems.get('cups', 0)) + ' cups.'
'I am bringing 2 cups.'
>>> 'I am bringing ' + str(picnicItems.get('eggs', 0)) + ' eggs.'
'I am bringing 0 eggs.'
因为picnicItems字典中没有'egg'键，get()方法返回的默认值是0。不使用get()，
代码就会产生一个错误消息，就像下面的例子：
>>> picnicItems = {'apples': 5, 'cups': 2}
>>> 'I am bringing ' + str(picnicItems['eggs']) + ' eggs.'
Traceback (most recent call last):
File "", line 1, in 
'I am bringing ' + str(picnicItems['eggs']) + ' eggs.'
KeyError: 'eggs'
5.1.5 setdefault()方法
你常常需要为字典中某个键设置一个默认值，当该键没有任何值时使用它。代