older than the legitimate segments. This attack will not suc-
ceed with duplicating ACK segments, since the sender will
ignore outdated duplicate ACKs, i.e., if a new ACK has al-
ready arrived the sender ignores the old ACK that arrives.
4. Determining Anti-Replay Window Size
Attacks presented in Section 3 motivate the necessity for
anti-replay mechanism. Anti-replay mechanism would dis-
card duplicate packets, thus preventing ampliﬁcation DoS
attack. IPsec standard [27], recommends using anti-replay
mechanism as a protection against denial of service (DoS)
attacks by a MITM adversary and to prevent replay of pack-
ets, however current speciﬁcations do not provide recom-
mendation on how to calculate proper window size. If anti-
replay window is incorrectly adjusted, i.e., too small, re-
ordered packets can result in packets’ loss, due to discarded
legitimate packets by IPsec implementation.
Packet reordering occurs when packets are received in
a different order from the one in which they were sent.
Packet reordering can signiﬁcantly degrade TCP perfor-
mance. Upon duplicate ACKs the sender triggers fast re-
transmit and fast recovery. As a result the congestion win-
dow remains small relatively to the available bandwidth. As
speciﬁed in [2], out of order data segments should be ac-
knowledged immediately in order to accelerate loss recov-
ery. To trigger the fast retransmit algorithm the receiver
should send an immediate duplicate ACK when it receives
a data segment above a gap in the sequence space. If mes-
sages are reordered on transit, e.g., due to benign network
reordering or by malicious attacker, there will be a gap in
sequence numbers of the arrived packets, which may result
in anti-replay mechanism discarding valid messages if the
anti-replay window is incorrectly adjusted, i.e., too small.
Existing works propose more efﬁcient implementations
of anti-replay window.
In [17] the authors analyse cor-
rectness of anti-replay window in malicious setting, where
they assume a MITM adversary that is located on the In-
ternet and can inject duplicate segments. Authors conclude
that anti-replay window is designed to prevent such attacks.
Subsequent works, [24, 43], show that severe reordering of
messages, possibly maliciously by a MITM (e.g., control-
ling a router), can result in discarded legitimate packets by
IPsec implementation (due to reordering) and suggest alter-
native mechanisms that should reduce the number of dis-
carded packets, w.r.t. to IPsec anti-replay mechanisms.
In this section we show that if anti-replay window is not
correctly adjusted, a more severe performance degradation
could be induced to TCP ﬂows, than not using anti-replay
window at all. We then show how to calculate correct win-
dow size in Section 4.3, given the relevant network param-
eters.
4.1. Packets’ Reordering Attack: Stealth DoS on
Channel with Small Anti-Replay Window
An adversary can cause an IPsec implementation to dis-
card valid packets by injecting replayed packets with higher
sequence number into the message stream thus advancing
the anti-replay window, and as a result legitimate packets
with low sequence numbers, i.e., to the left of the anti-
replay window, will be discarded by the IPsec. Discarded
packets result in three duplicate ACKs at the sender, which
then reduces the TCP congestion window. The throughput
of TCP connections under attack is signiﬁcantly degraded.
The damage is a function of the frequency at which the ad-
versary can launch the attack. The attacker model we con-
sider in this section is presented in Figure 3.
Since we analyse worst case scenario, we assume
throughout the attack a single TCP ﬂow which the attacker
attempts to attack, with no other communication (this is
equivalent to using a distinct SA per connection).
The
course of the attack is presented in Figure 8. Assume that
IPsec anti-replay window consists of W = n packets and
TCP window is comprised of cwnd = k +1 segments, such
that n  cwnd(t
0 ) segments will be sent.
2 cwnd(t−
2 cwnd(t−
At time t0 + RT T the sender should receive an ACK
for the retransmitted segment. Once the sender receives
an ACK for new data7 congestion window is deﬂated, i.e.,
−
0 )
set to cwnd(t
, and the sender enters congestion avoidance
2
(CA) phase, during which the congestion window is incre-
mented linearly, i.e., roughly by one segment in every RTT.
2
4.2. Packet Reordering Attack: Analysis
The throughput of the connection is kept low, since the
adversary can resume the attack (if the attack frequency
parameter allows it) every time the congestion window is
larger than the anti-replay window. The ratio between TCP
window cwnd and IPsec anti-replay window W before the
7We stress, that for a larger ratio of TCP congestion window and IPsec
anti-replay window, a more devastating attack is possible. More speciﬁ-
cally, the attacker will again speed-up the retransmitted segment i, which
will again be discarded, and thus the sender will continue receiving dupli-
cate ACKs till it encounters a timeout event. After a timeout the sender
again retransmits the ‘lost segment i’ and enters a slow start. However,
then it receives duplicate ACKs for ith segment from previous transmis-
sion round, and enters congestion avoidance. If the cwnd vs. W (IPsec
anti-replay) is sufﬁciently large, and enough duplicate ACKs return, the
connection will eventually be reset.
2
ﬁrst attack epoch, as well as the frequency at which the at-
tacks can be launched, dictates the performance degradation
inﬂicted by the attack, and the impact can range between
degradation of service and complete denial of service. If
TCP congestion window is larger than IPSec anti-replay by
1 segment, then attack achieves a result similar to reduction
of quality (RoQ) attacks, in [18, 19]. In this case, it will
2 RTTs to restore the congestion window from k−1
take k+3
back to its original value, before the ﬁrst attack, i.e., k + 1,
since in every RTT the congestion window grows by one
segment. But attacker cannot keep the congestion window
at steady state (like in Section 3.2), since next attack can
be launched when TCP window grows larger than IPsec
anti-replay window. Congestion window growth between
each attack epoch (which is launched when TCP window is
larger than IPsec window is presented in Figure 9.
Alternately, if cwnd ≥ 2 ∗ W + 4 attacker can dis-
rupt the connection by causing the retransmission timeout
(RTO) to expire, thus performance degradation induced by
the attack is similar in its result to the low rate attacks pre-
sented in [29]. In order to cause connection to timeout, at-
tacker will ‘speed-up’ (reorder) segment which will result
IPsec anti-replay window to move forward a window num-
ber of segments, thus discarding segment(s) to the left of
the window. When sender re-transmits this segment in next
transmission round, attacker reorders segments again, such
that the retransmitted segment is again discarded. At this
time the sender is in fast recovery, and will only change
state when it receives an ACK for a re-transmitted segment.
However the sender keeps receiving duplicate ACKs, there-
fore connection will eventually timeout, and move to slow
start phase, and retransmit the segment again. But in re-
sponse it will receive all the duplicate ACKs that were pre-
viously transmitted by receiver. If the IPsec and TCP win-
dows ratio is sufﬁciently large, attacker can cause timeout
again, which will reset connection. The minimal cwnd and
W ratio which would result in timeout of the retransmitted
(due to receipt of three duplicate ACKs) segment i, should
be computed as follows: let cwnd be the amount of trans-
mitted segments in the window prior to ﬁrst attack epoch.
Denote by P the number of segments in transit (for which
the sender has not yet received acknowledgments), and de-
note by W the anti-replay window size.
In order for the
attack to result in a timeout the following inequality has to
(cid:5)+(cwnd−1)− P > W . Since the number of
hold:(cid:4) cwnd
segments, i.e., P = cwnd, holds:(cid:4) cwnd
pending segments P is equal to the number of transmitted
(cid:5) − 1 > W .
2
2
4.3. Adjusting IPsec Anti-Replay Window
In order to prevent denial/degradation of service (DoS)
attacks we presented, a larger anti-replay window should be
used, and the question is how much larger. The largest pos-
Figure 8: Packets’ reordering attack (Section 4.1) on TCP exploiting an insufﬁcient size of IPsec anti-replay window (single attack epoch).
In this attack we assume ﬁrst attack epoch is launched when congestion window is of size W + 1 (where W is IPsec anti-replay window).
We differentiate between the size of the data structure N
required to store and maintain an anti-replay window of size
W , i.e., number of packets that anti-replay window of size
N can reﬂect (or represent).
There are works that attempt to achieve a more efﬁcient
anti-replay window implementation requiring less storage
size, e.g., [24, 43, 17]. However, there are no works that
analyse anti-replay window size W in an adversarial setting,
where attacker can maliciously adjust its strategy. More
speciﬁcally, there are two issues that should be addressed
w.r.t. anti-replay mechanism: the number of packets that
anti-replay window should reﬂect, in order to prevent pack-
ets’ loss due to reordering, and the data structure to store
and manage this information efﬁciently.
In this work we
focus on window size (and not the size of its representa-
tion), and compute an upper bound on the number of pack-
ets W that the anti-replay window should reﬂect, based on
the rates of the given network, in order to avoid discarding
segments by IPsec implementation (when small anti-replay
window is used) due to reordering, based on the rates of the
given network.
Claim 4 Let R be transmission rate and LM IN be min-
imal packet size.
Let delayM IN be the minimal de-
lay and let delayM AX be the maximal delay. Attacker
can set delays to all packets to any value in the interval
[delayM IN , delayM AX] as long as legitimate packets ar-
rive in FIFO (ﬁrst in ﬁrst out). Then IPsec anti-replay will
not discard reordered legitimate packets (due to packets’
Figure 9: TCP congestion window cwnd analysis, when connec-
tion is under packets’ reordering attack, as in Figure 8, and TCP
congestion window is by one segment larger than IPsec anti-replay
window.
sible IPsec anti-replay window is one that can contain all the
packets within a speciﬁc SA, i.e., window containing 232
packets. Such anti-replay window of maximal size prevents
the attacks presented in Section 4.1, which were made pos-
sible due to insufﬁcient anti-replay window size. Namely,
even severe (whether malicious or benign) reordering will
not result in dropped packets when anti-replay window size
is increased to maximal size. However, a naive implementa-
tion of anti-replay window containing 232 packets requires
232 bits (an average of 536 Mega-Bytes) is inefﬁcient and is
rendered impractical due to high memory cost and mainte-
nance.
iACK: i+1 iin+1 segments sentii. . .ACK: in-1 ACKs  return for each segmenti+k-1ACK: i i+k-n. . .i+k-ni+k-nii. . .ACK: iTCP window cwnd(t0—)=k+1i+kACK: i+k n-1 ACKs  return for each segmentfast recovery:for each dup ACKcwnd(t0—)++After cwnd(t0—)/2 dup ACKs start sending new segmentsi+ki+k-1ACK: i Segment (i+k) is duplicate, and thus discarded3 dup ACKs;1. fast retransmit (i+1)t0t0+RTTi+k-ni+k. . .. . .. . .i+k-ni+kGW2ServerClientGW1AttackerSegment (i+k) advances the anti-replay window, segments to the left of the anti-replay window are discardedi+k-n3 dup ACKs:fast retransmit iTCP window cwnd(t0—)=k+1cwndtimet0t0+RTTt0+2RTTt0+3RTT...t1=t0+TcwndSSmin=cwndSSmax2cwndSSmaxcwndSSmin2cwnSSmax=cwndSSminTRTT−1cwndSSmax=2TRTT−2cwndSSavg=3T2RTT−32reordering attack) that are not duplicates of a previously
received packets, if IPsec anti-replay window size W is:
W ≥ R × (delayM AX − delayM IN )
LM IN
LM IN
Proof Assume attacker’s delay delayM IN is 0, then anti-
replay window is W ≥ R×delayM AX
, i.e., at least the size
of maximal number of packets in transit. In this case even
maximal reordering of packets, i.e., last packet arriving
before ﬁrst in a window of transmitted packets, will not
result in discarded packets by IPsec, since anti-replay is at
least the size of packets in transit. Alternately, if attacker’s
delay delayM IN > 0, then anti-replay window can be less
than maximal number of packets in transit, since attacker’s
packets are also experiencing delay, and as a result it will
be limited in its ability to reorder packets. Thus the upper
bound on IPsec anti-replay window size is a function of
(cid:3)
maximal packets in transit and delay of the attacker.
Since attacker’s delay is typically not known,
in order
to compute upper bound on anti-replay window size, we
assume worst case, i.e., attacker with zero delay. Note that
this is a rather conservative computation, since typically,
the attacker’s speed will also be a function of the delay.
Therefore, IPsec’s anti-replay window W should be at least
the size of the maximal number of packets in transit at any
given time, to prevent the attacker from discarding out of
order packets, by advancing IPsec anti-replay window.
For network with propagation delay delayM AX of one
second, transmission rate R of 10 Mega-Bytes per second,
and maximal packet size L = 1000 Byte, the maximal num-
ber of packets in transit is 10, 000.