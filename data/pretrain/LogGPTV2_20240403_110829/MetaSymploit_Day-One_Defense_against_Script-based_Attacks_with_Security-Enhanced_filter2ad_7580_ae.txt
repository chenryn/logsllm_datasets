on average).
Obfuscation & Encryption. There are 13 cases with
complicated obfuscation and encryption on the payload,
where payload content processing is not feasible. Since
the output of these operations is completely random,
there is no constant pattern that can be extracted from
the obfuscated or encrypted payload. Defending against
obfuscation and encryption is an open question, which is
beyond the scope of signature-based defense.
Multi-threading. Handling multi-threading is an ad-
vanced topic in symbolic execution. Existing research
[37] explored the possibility by extending symbolic ex-
ecution to handle multi-threaded programs. Currently,
due to only 3 cases related to this situation, we plan to
address this issue in future work.
Bug in Scripts.
Interestingly, during the testing, we
also discover 2 scripts with bugs that hang the execu-
tion when the script is generating a speciﬁc assembly
code that jumps to the shellcode. From this result, we
see that our approach is also useful for the purpose of
ﬁnding bugs in attack scripts.
In summary, the percentage of scripts that are auto-
matically handled is 92.88%. If the manually modiﬁed
scripts are included, the percentage reaches 96.90%.
5.2 Effectiveness Validation using Real-
world Attacks
To evaluate whether the automatically generated Snort
rules can effectively detect real attacks, we use Metas-
ploit attack scripts to attack 45 real-world vulnera-
ble applications. These applications are acquired from
exploit-db.com, a popular hacking website collect-
ing attack scripts and free vulnerable applications. In all,
there are 45 free vulnerable applications available in the
website, with 45 corresponding Metasploit scripts. They
include Java 7, Adobe Flash Player 10, Apache servers
2.0, Firefox 3.6, RealPlayer 11, multiple FTP servers
such as Dream FTP, ProFTPD, VLC player 1.1, IRC
servers and some less popular web-based programs.
We ﬁrst use MetaSymploit to analyze the 45 attack
scripts and automatically generate Snort rules. Then we
set up two virtual machines, with one running Metasploit
to simulate the attacker and the other running the vulner-
able application as the vulnerable target. For each script,
we choose two different shellcodes to launch two real
attacks. To expose the entire attack ﬂow, we allow the
attack to compromise the target, and use Snort IDS 2.9.2
with our generated rules to detect attack payloads. Note
USENIX Association  
22nd USENIX Security Symposium  75
76  22nd USENIX Security Symposium 
USENIX Association
thatduetothelimitedavailableversionsoftheapplica-tions,wefocusontherulesoftheattackpayloadsthattargettheapplicationversionsthatweareabletoobtain.TheinitialresultsshowthatexcepttheHTTP-basedones,allattackpayloadpacketswithbothtwotypesofshellcodesarecorrectlydetected.Recallthatourrulesarebasedontheconstantpatternsofthepayload,vari-antpartssuchasshellcodesdonotaffectthedetection.ButforApacheserverattacksandFirefoxattacks,ourrulesfailtocatchtheattackpacketsbecausetheorderofeachHTTPheaderﬁeldisdifferentfromtheoneinourrules.SincetheorderoftheHTTPheaderﬁeldsisnotenforcedbyRFCdeﬁnition,theextractedpatternsfromtheHTTPheadercannotbesimplyputintothesignatureinsequence.Therefore,wefurtherimproveourHTTPparsertohandleeachheaderﬁeldseparately,toenableorder-insensitivepatternmatching.Inthesecondroundoftesting,theHTTP-basedattacksarealsocorrectlyde-tected.AnotherinterestingcaseistheJava7attack.InlateAug2012,twodaysafterazero-dayvulnerabilityinJava7wasdisclosed(CVE2012-4681),aMetasploitattackscriptwasdistributedtargetingthisvulnerability[32].Atthattime,weimmediatelyusedMetaSymploittoana-lyzethisattackscriptandautomaticallygenerateaSnortrulebasedonthemaliciousjarpayloadcomposedbythisscript,andtesteditinourenvironment.Ourrulesuccess-fullydetectedthejarpayload.Admittedly,theremightbeotherwaysdifferentfromthedistributedMetasploitscripttoexploitthevulnerability.Nevertheless,ourruleprovidestheﬁrstaidtothevulnerabilitywithoutavail-ablesecuritypatch,todefendagainstattackerswhodi-rectlyusethiswidely-distributedscripttolaunchattacks.Apartfromtheeffectivenessevaluation,wealsouseourrulesgeneratedfromthe45attackscriptstomonitornormalnetworktrafﬁc,toinvestigatewhetherourruleswouldraisefalsepositivesonbenignpackets.WeruntheSnortwithourrulesinpromiscuousmodetomonitorthetrafﬁcoftwoWindowsmachines(Vista&7)andaUbuntu12.04machine.Thesemachinesareeveryday-usemachinesintheCSdepartment(nopersonaldataisrecorded).Themonitoringisonlinefortwomonths.Nofalsepositiveisraisedonbenignpackets.Suchresultisexpectedsinceourrulescontainmultiplespeciﬁcpat-ternsthatmatchesonlytheMetasploitattackpayloads.AppendixAshowsaruleexampleforoneofthe45scripts.5.3ComparisonwithOfﬁcialSnortRulesTofurtherassessthequalityofthegeneratedrules,wecomparetheMetaSymploitrules(MRs)ofthe45at-tackscriptswiththerecentOfﬁcialSnortrules(ORs),6 4 35 5 3 6 4 11 26 3 0510152025303540Same content(byte pattern)Same pcre(regex pattern)OR pcrematching MRcontentNo sharedpatternInconsistentdetectionresultsMetaSymploit Rules (MRs)Official Rules (ORs)Figure2:Patterncomparisonbetween53MetaSymploitgeneratedrulesand50ofﬁcialSnortrulesfor22Metasploitattackscripts.releasedinNov20125.WeuseCVEnumbercarriedinbothattackscriptsandORstomatcheachother.Theresultissurprisingthatonly22attackscriptshavecor-respondingORs.Therest23arenotevencoveredbyORs.Thisrevealsaseriousissuethatexistingdefenseisstillquiteinsufﬁcientcomparedtothefastspreadingofpublicattackresources.Forthe22ofﬁciallycoveredscripts,thereare53MRsand50ORs.InMetaSymploit,onescriptmayhavemul-tiplerulesdetectingdifferentpayloadsfordifferenttar-getversions.Whereasintheofﬁcialruleset,onevulner-abilitymayalsohavemultiplerulesdetectingdifferentwaysthatexploitit.Bycomparingthepatternsinbothrulesets,wesummarizetheresultinFigure2.Weﬁndthat44MRssharepatternswith21ORs.Speciﬁcally,6MRsand6ORssharethesamecontentbytepat-terns.4MRsand4ORssharethesamepcreregexpat-terns.Notably,35MRshavespeciﬁccontentthatarematchedwith11ORs’generalpcre.Thisisbecausethepcreregexesaregeneralizedbysecurityanalystsbasedonlargevolumesofsamples,whilethecontentbytes(usuallyincludingvulnerablereturnaddresses)aregen-eratedbasedoneveryattackpayloadofthescripts.AnexampleisshowninAppendixA.Althoughinthiscase,theMRsetisasubsetoftheORone,wearguethatasourgoalistodefendagainstspeciﬁcattackscripts,MRsgivemoreinsightoftheattackpayloadswithmorepre-cisematching.Meanwhile,thereare5MRsand26ORswithnopatternshared.Thisisbecausesomevulnera-bilitiescanbeexploitedindifferentways,andtheORshavemorepatternsdeﬁnedbyanalysts,whileMetasploitscriptsusuallychooseonewaytoexploitonevulnerabil-ity.Nevertheless,westillﬁndthat2scriptshave5MRswhosepatternsarenotseeninORs,whichcomplementtheORset.Besides,wealsoloadthe50ORsintoSnorttotestwhethertheycandetectattackslaunchedbythe22at-tackscripts.Interestingly,theresultshowsthatonly17scripts’attackpayloadsaredetected,whilenoalert5snortrules-snapshot-2922.tar.gzonwww.snort.org/snort-rules/is raised for the other 5 scripts. 2 scripts6 are missed
due to the lack of OR patterns as we mentioned above.
The other 3 scripts, which have 3 MRs, are supposed to
be detected by 3 corresponding ORs. After comparing
these rules, we ﬁnd the 3 ORs have some deﬁciencies
that cause this inconsistent detection results. We list the
detailed information of the 3 scripts and the deﬁciencies
of the 3 ORs in Table 2. Note that some deﬁciencies
are actually caused by inaccurate use of Snort rule ﬂags
such as the http uri, flow. We ﬁnd them by compar-
ing these ﬂags with the pattern context (e.g., Behaviors)
in our rules. We have reported these discoveries to the
ofﬁcial Snort team.
In sum, these results show that even the ofﬁcial Snort
rules written by security analysts are incomplete and tend
to be error-prone. MetaSymploit serves as a useful tool
to complement and augment the existing IDS signatures
by improving the completeness and the accuracy.
6 Discussion
Scenarios of using MetaSymploit signatures. As
shown in the comparison (35 MRs vs 11 ORs), due to
different pattern extracting mechanisms, ORs have less
rules with more general patterns, while MRs have more
rules with more speciﬁc patterns. It is possible that as
the number of attack scripts is increasing, more and more
signatures will be generated. If all signatures are loaded
into the IDS, this may slow down the matching speed.
However, we argue that unlike ORs are used for gen-
eral detection, MetaSymploit signatures should be used
in two typical scenarios, which do not require loading
all MRs in an IDS. First, as the goal of MetaSymploit
is to provide quick defense against newly distributed at-
tack scripts, the typical way of using our signatures is to
give ﬁrst aid to the vulnerable application without avail-
able patches to prevent attackers especially script kid-
dies using the new scripts to launch attacks (e.g., the
Java 7 case). When the vulnerability is patched or the
application is upgraded, our signatures can be removed
from the IDS. Second, as the pattern contexts are embed-
ded with the signatures, security analysts only need to
deploy the signatures whose contexts are related to the
protected environment or the protected target version, to
avoid loading irrelevant signatures which may slow down
the matching speed of the IDS.
Limitations. MetaSymploit inherits the limitations of
classical symbolic execution. As we mentioned in Sec-
tion 5.1, our current prototype requires manual analysis
on handling complex symbolic loops. Recent approaches
propose to use bounded iteration [21], search-guiding
heuristics [40] and loop summary [22, 35] to address the
6adobe flash sps.rb, mozilla mchannel.rb
loop issue. In MetaSymploit, different loop cases of at-
tack scripts may require different techniques. For exam-
ple, bounded iteration can be applied to handle loops of
bruteforce attacks. Loop summaries can summarize the
post-loop effect on symbolic payload contents. Search-
guiding heuristics can help target payload-related loops
to avoid getting stuck in irrelevant loops.
Apart from loops, path explosion is a more general
issue related to performance and scalability. Too many
paths in an attack script may prolong the analysis and
delay the defense. In addition, it is possible that differ-
ent paths in a script ﬁnally lead to the same attack pay-
load output. Exploring these paths incurs extra efforts of
pruning redundant payloads. Several techniques such as
equivalent state tracking [9], state merging [26] and path
partitioning [31] have been proposed to mitigate the path
explosion issue. We plan to incorporate these techniques
into MetaSymploit to avoid exploring paths that would
compose redundant payload contents.
The limitations of constraint solvers may also affect
the effectiveness of path exploration. Currently, we use
Gecode/R [1] for solving integer/boolean constraints and
HAMPI [23] for solving string constraints. In case when
encountering complicated constraints (e.g., a non-linear
constraint), the solvers cannot decide which branch to
take. For the sake of completeness, we conservatively ex-
plore both branches, while marking the path constraints
as uncertain in the log, which require more investigation
by security analysts. Due to this fact, we regard our pro-
totype as an assistant tool to reduce the workload of ana-
lysts, so that they only need to focus on complicated ones
when facing large numbers of new attack scripts.
We envision possible attacks directly against Meta-
Symploit’s defense mechanism. As MetaSymploit rules
stick to the patterns in the distributed attack scripts, it
is possible that experienced attackers may modify the
distributed one to create new script variants without re-
leasing them, which may evade the detection of Meta-
Symploit rules. Besides, experienced attackers may
also try to exploit the limitation of symbolic execution
when developing new scripts, such as introducing com-
plex loops, non-linear constraints or even obfuscating the
script code. However, both cases are non-trivial. They
require advanced attack developing techniques, which
are usually time-consuming and slow down the speed of
developing and launching new attacks. In other words,
with MetaSymploit, we raise the bar of the skill level and
the time cost for developing and launching new attacks.
7 Related Work
Signature Generation. There has been a lot of work
on automatic signature generation for malware defense.
From the perspective of attacks, Autograph [24], Poly-
USENIX Association  
22nd USENIX Security Symposium  77
Metasploit Script Name
badblue ext overﬂow.rb
CVE
2005-0595
sascam get.rb
2008-6898
mozilla reduceright.rb
2011-2371
Failure Reason of Ofﬁcial Snort Rules Missing Metasploit Payloads
The http uri ﬂag restricts the pattern searching in one header ﬁeld,
thus missing the Metasploit payload located in the following ﬁelds.
The flow pattern is set to check packets sent to the client while our
pattern context shows the Metasploit payload is sent to the server.
The content byte pattern is wrong since it includes two variant bytes,
which are randomly generated in the Metasploit payload.
Ofﬁcial Rule SID
3816
16715
19713
Table 2: The list of three Metasploit attack scripts which evade the detection from 3 Ofﬁcial Snort Rules
graph [29] and Hamsa [27] automatically generate worm
signatures by extracting invariant contents from the net-
work trafﬁc of worms. Particularly, these approaches are
based on the observation that even polymorphic worms
have invariant contents that can be used as signature pat-
terns. In MetaSymploit, we have the same observation
when analyzing constant and variant payload contents
composed by attack scripts. On the other hand, these ap-
proaches require collecting large amounts of malicious
network trafﬁc to identify invariant contents. However,
this process is usually time-consuming and cannot pro-
vide quick defense against new attacks.
In contrast,
MetaSymploit does not need to collect any network traf-
ﬁc but only attack scripts, thus largely reducing the time
of performing analysis and providing defense.
From the perspective of vulnerabilities, Vigilante [18],
ShieldGen [19] and Bouncer [17] analyze vulnerable ap-
plications and their execution traces to generate signa-
tures to block exploit inputs that can trigger the vul-
nerability. Brumley et al. [10, 11] also provide the
formal deﬁnition of vulnerability-based signatures and
propose constraint-solving-based techniques to gener-
ate such signatures. Elcano [13] and MACE [16] fur-
ther use protocol-level concolic exploration to generate
vulnerability-based signatures. Notably, program anal-
ysis techniques such as symbolic execution play an im-
portant role in these approaches as well as in MetaSym-
ploit. But unlike these approaches, MetaSymploit only
analyzes attack scripts without requiring the presence of
vulnerable applications, thus avoiding the cost of obtain-
ing various vulnerable applications or preparing various
testing environments.
Symbolic Execution. Symbolic execution has been ac-
tively applied for security purposes [36]. BitBlaze [38]
is a binary analysis platform based on symbolic execu-
tion. SAGE [21] uses dynamic symbolic execution to de-
tect vulnerabilities in x86 binaries. EXE [14] and AEG
[8] generate malicious inputs and exploits by symboli-
cally executing vulnerable applications. Moser et al. [28]
explore multiple execution paths for malware analysis.
Since our analysis target, attack script is quite differ-
ent from host-based binary level malware, the techniques
proposed in these approaches such as memory inspec-
tion, system call analysis are not adaptable in our case.
Symbolic execution for scripting languages is still
at early stage, due to the diversity of different kinds
of scripting languages and various purposes of applica-
tions. Most work focuses on the web-based scripting
languages, such as JavaScript [34], PHP [7, 41], and
Ruby on Rails [15] web frameworks. Since these ap-
proaches are speciﬁcally designed for testing web appli-
cations (e.g., ﬁnding XSS and SQL Injection vulnerabil-
ity), they are not applicable for analyzing general attack
scripts and attack frameworks that target various vulner-
able applications on different OS environments.
In particular, little work has been done for the sym-
bolic execution of general-purpose scripting languages,
such as Ruby and Python. PyStick [30] is an automated
testing tool with input generation and invariant detec-
tion for Python. It is different from our purpose of us-
ing symbolic execution for security analysis. Bruni et al.
[12] propose a library-based approach to develop sym-
bolic execution. However, it uses only the dynamic dis-
patching feature, which limits symbolic execution only
in primitive types. This limited functionality is insufﬁ-
cient for practical use.
8 Conclusion
Script-based attack frameworks have become an increas-
ing threat to computer security. In this paper, we have
presented MetaSymploit, the ﬁrst system of automatic at-
tack script analysis and IDS signature generation. Meta-
Symploit leverages security-enhanced symbolic execu-
tion to analyze attack scripts. We have implemented a
prototype targeting the popular attack framework Metas-
ploit. The results have shown the effectiveness of Meta-
Symploit in real-world attacks, and also the practical use
in improving current IDS signatures.
9 Acknowledgements
We would like to thank the conference reviewers and
shepherds for their feedback in ﬁnalizing this paper.
This work is supported by the U.S. Army Research Of-
ﬁce (ARO) under a MURI grant W911NF-09-1-0525,
and also supported in part by an NSA Science of Se-
curity Lablet grant at North Carolina State Univer-
78  22nd USENIX Security Symposium 
USENIX Association
sity, NSF grants CCF-0845272, CCF-0915400, CNS-
0958235, CNS-1160603.
References
[1] Constraint programming in ruby. http://gecoder.rubyforge.org/.
[2] The exploit database. http://www.exploit-db.com.