t
n←r
t
t
t
t
t
t
t
f
f
t
t
324
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
Per-packet operations
packet p
forward p
hash (e.g., SHA1)
store hash
per-neighbor cache
cache entries 
  for epoch j
fingerprinting 
     key
Kj
f
oldest live 
  epoch j
sampling key
Kj
s
 epoch 
sampling
selected
fingerprinting
not selected
clear cache entries 
       for epoch j
traffic summaries
   sent to the AC
Per-epoch operations
Figure 9. FL-related packet processing inside a DynaFL router.
of L (seconds). Then, the number of packets η in a sampled
epoch is η = L · 107. Using the classical Sketch due to Alon
et al. [6] for example, the storage requirement for the sketch
is given by:
In Section VIII-A we derive numeric values for the size of
the sketch vector based on the epoch length L.
Dealing with TTL attacks. Certain ﬁelds in the IP header,
such as the TTL, checksum, and some IP option ﬁelds, will
change at each hop. Both sampling and ﬁngerprinting in
DynaFL need to properly deal with these variant ﬁelds. Take
the TTL ﬁeld for instance hereinafter (though the arguments
apply similarly to other variant ﬁelds). On the one hand, if
F is computed over the entire packet including the TTL
ﬁeld, even in the benign case the same packet stream will
leave different trafﬁc summaries (or precisely, the sketch
vectors) at ingress and egress nodes. On the other hand, if
F is computed over the entire packets excluding the TTL
ﬁeld, a malicious node can modify the TTL ﬁeld at liberty
without affecting the trafﬁc summaries. Figure 7 depicts an
example TTL attack, where the malicious node s lowers the
TTL value to 2 in the packets and causes the packets to be
dropped at the 2-hop-away downstream node a, thus framing
neighborhood N(a).
M × log2!2η ln(
where M >
and  =
12
2
β − α
β + α
.
1
ln
3 − 2
200N
δ
)
1
δ
(12)
(13)
r
Rr=Tr|| MAC(Tr)
Rj=Ti|| MAC(Ti||Rj||Rs||Rr)
AC
Rk=Tk|| MAC(Tk)
k
j
i
Rj=Tj || MAC(Tj ||Rk)
Rs=Ts|| MAC(Ts)
s
Figure 10.
Example of secure transmission of trafﬁc summary reports.
For brevity, we denote the trafﬁc summaries of a node i as Ti and omit
the secret key for the MAC notation.
To address the TTL attacks, when computing F, each
node r performs either of the following:
• For a packet received from a neighbor, node r computes
F over the entire packet including the TTL ﬁeld.
• For a packet sent to a neighbor, node r computes and
F over the packet, but with the TTL ﬁeld additionally
decreased by 2 (equal to the TTL value at the 2-hop-
away egress node in N(r)).
In this way, node r in Figure 7 simply uses the TTL value as
contained in the packets received from s when computing
F, since the ingress nodes in N(s) (nodes i and j) must
have computed F with an adjusted TTL value equal to that
at node r.
The TTL value in a packet is also decremented by one
for every second the packet is buffered at a router. Holding
a packet longer than one second at a router is treated as a
packet delaying attack and will be detected due to the use
of the above construction.
V. REPORTING TRAFFIC SUMMARIES
t
t
If an epoch is selected, after the ﬁngerprinting procedure,
and T←r
a node t generates two trafﬁc summaries T→r
for each neighbor r, and sends them to the AC in a
trafﬁc summary report denoted by Rt. The challenge in the
recording phase is to protect the trafﬁc summary reports
from being corrupted.
In DynaFL, nodes form a static spanning tree rooted at
the AC for sending the trafﬁc summaries. Given the spanning
tree, the goal is to protect the trafﬁc summary reports Rts
from different nodes destined to the AC. Although Rts are
also subject to data-plane attacks, they are transmitted over
static and pre-generated paths in the spanning tree. Hence,
dynamic trafﬁc is no longer a concern, thus substantially
simplifying the problem. Speciﬁcally, DynaFL utilizes an
Onion Authentication approach [34], [36] to protect
the
transmission of dAC along each path in the spanning tree.
In a nutshell, within a short timer at the end of each epoch,
each node t needs to send its trafﬁc summary report Rt
to the AC, and Rt is authenticated with a MAC computed
using a pairwise secret key shared between node t and the
325
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
AC. The trafﬁc summary reports from different nodes are
sent in an onion fashion. For example in Figure 10, Rj
includes the report Rk of node k. In this way, DynaFL
efﬁciently protects the key disclosure message dAC without
the use of expensive asymmetric cryptography. Section VII
gives a more detailed security analysis of such an Onion
Authentication approach.
VI. DETECTION
The AC performs consistency checks for each neigh-
borhood N(r) based on the received trafﬁc summaries.
However, since an epoch may only have a small number
of packets, detecting a suspicious neighborhood based on
the consistency checks for individual epochs can introduce
a large error rate. Take an extreme case for example: if in a
certain epoch a neighborhood N(r) only transmits a single
packet and the packet was spontaneously lost, concluding
that the packet loss rate is 100% and N(r) is suspicious
would be inaccurate.
To deal with this problem, the AC still performs the
consistency checks and estimates the discrepancy for in-
dividual epochs; but it makes the detection based on the
aggregated discrepancies over a set of E epochs (called
accumulated epochs), so that the total number of packets
over the E epochs is more than a certain threshold N to give
a high enough accuracy (e.g., > 99.9%) on the detection
results. Section VIII studies the value of N. Therefore, the
AC stores the trafﬁc summaries for each neighborhood and
makes detection when the total number of packets N is
x (e) denote
reached. More speciﬁcally, let n←y
x ) in
and n→y
the packets received from / sent to x (n←y
the trafﬁc summary for epoch e, respectively; for a certain
neighborhood N(r), whenever
x (e) and n→y
x
i
n→r
n←r
i
(e)} > N
(14)
max{"e "i
(e),"e "i
indicating N is reached,
(where i ∈ N(r) and e iterates over all the accumulated
epochs),
the AC performs the
following checks to inspect if N(r) is suspicious:
1. Flow conservation. The AC ﬁrst extracts n→r
(e) and
(e) for each node i in N(r) for each epoch e, and
n←r
calculates the difference between the number of packets sent
to r and the number of packets received from r over all the
E accumulated epochs. If the ratio of the difference to the
total number of packets in all the E accumulated epochs is
larger than a threshold β, i.e.:
i
i
i
i
i
>β
(e)|
(e)}
|#e#i n→r
max{#e#i n→r
(e) −#e#i n←r
(e),#e#i n←r
(15)
then the AC detects N(r) as suspicious. The threshold β is
set based on the administrator’s expectation of the natural
packet loss rate; e.g., in the simulations in Section VIII we
set β to be four times of the natural packet loss rate in a
neighborhood.
i
2. Content conservation. The AC then extracts the sketches
in the trafﬁc summaries in N(r), and estimates the discrep-
ancy δf between the sketches for packets sent to r and the
sketches for packets received from r. The AC detects N(r)
as malicious if δf is larger than a certain threshold, i.e.,:
× max{"e "i
n→r
i
(e),"e "i
n←r
i
(e)}
2αβ
α + β
δf >
where
δf = ||∪ i∈N(r) FKj
(C←r
i
) − ∪i∈N(r)FKj
(C→r
i
)||2
2
f
f
(16)
It has been proven [19] that the above threshold can satisfy
the (α, β,δ )-accuracy deﬁned in Section II-D.
3. Timing consistency. Finally, the AC extracts the differ-
ence between the average packet departure time and arrival
time, and concludes that N(r) is suspicious if the difference
is larger than the expected upper bound on the 2-hop link
latency.
VII. SECURITY ANALYSIS
We show that DynaFL is secure against all attacks that
are possible in the misbehavior space given our adversary
model. By our deﬁnition, a malicious router can drop,
modify, fabricate, and delay packets. In addition, a malicious
router can attack data packets, key disclosure messages dAC,
and reporting messages. We ﬁrst show DynaFL’s security
against a single malicious node and then sketch DynaFL’s
security against colluding nodes.
Security against corrupting the data packets. Dropping,
modifying, and fabricating data packets in a neighbor-
hood N(m) will cause inconsistencies between sketches
in N(m) as mentioned earlier. Delaying data packets in
N(m) will cause abnormal deviation between average packet
arrival/departure timestamps in N(m). If a malicious router
changes the timestamps in data packets embedded by the
source nodes,
to modifying packets and
packets may be mapped to different epochs, in which case
such an attack will manifest itself by causing inconsistencies
in the sketches of a neighborhood containing the malicious
router.
Security against corrupting dAC. As we mentioned earlier,
if a malicious node m drops the dAC, some nodes adjacent
to m will fail
trafﬁc summaries to
the AC, thus causing a neighborhood containing m to be
detected. We note that the authentication of dAC is needed
(through the one-way hash chain). Otherwise, a malicious
node can replace the sampling and ﬁngerprinting keys with
its own fake keys, by which the malicious node can predict
the output of other nodes’s sketches and perform packet
modiﬁcation attacks. In addition, if the epoch IDs in dAC
were not authenticated, a malicious node can replace the
oldest live epoch ID in dAC for which the trafﬁc summaries
to send the correct
is equivalent
it
326
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:18 UTC from IEEE Xplore.  Restrictions apply. 
100
100
100
drops 50
50
a
b
c
d
e
Figure 11.
number denotes the packet count each node sends.
Example of DynaFL’s security against colluding nodes. A
are requested with the current epoch ID. In this way,
inconsistencies of trafﬁc summaries can be detected for some
benign neighborhood due to the packet transmission delay
as Section IV-A describes. With the (delayed) authentication
of dAC, any attempt to modify dAC will be detected (after
L ( epochs).
’ D
It is noteworthy that the dAC sent at the end of epoch e
cannot simply disclose the MAC secret key Ke−1 for the
previous epoch e − 1. This is because at the time Ke−1
is disclosed, the dAC sent at the end of epoch e − 1 may
not have yet reached all nodes. Hence, a malicious node
which has already received Ke−1 might send Ke−1 to a
downstream colluding node via an out-of-band channel, so
that the colluding node can break the authenticity of the
dAC sent in epoch e − 1. Hence, at the end of an epoch e,
L ( to ensure the
we disclose the MAC key for epoch e − ’ D
dAC sent in epoch e − ’ D
L ( has reached all the nodes in the
network.
Security against corrupting reporting messages. First, due
to the use of the Onion Authentication, a malicious node m
cannot selectively drop the reporting messages of a remote
(non-adjacent) node r, to frame a neighborhood containing
node r. Since all the accumulated reporting messages are
“combined” at each hop, m can only drop the reporting
messages from its immediate neighbors, which will manifest
a neighborhood containing m as suspicious.
Security against colluding attacks. We illustrate DynaFL’s
security against colluding attacks via a toy example shown
in Figure 11. We show that for a malicious node m which
actually corrupts packets, as long as one benign node exists
in N(m), a neighborhood containing either m or one of its
colluding nodes will be detected. The key observation is that
since the trafﬁc summaries are sent to the AC and the AC
performs the detection, each node can only claim one trafﬁc
summary per selected epoch. To simplify the analysis while
still unveiling the intuition, we only consider the number (but
not the payload) of packets sent by each node, as shown
in Figure 11. Suppose nodes c and d are colluding, and
node d drops 50 packets. As long as node e is benign in
N(d), to cover the misbehavior of d, the colluding node c
has to send a trafﬁc summary to the AC falsely claiming it
sent “50” packets to d (and thus received “50” packets from
node b). However, this claim will make the neighborhood
N(b) suspicious since the benign node a will claim it sent
100 packets to b.
)
B
M
(
e
z
S
i
 500
 480
 460
 440
 420
 400
 380
 360
 340
 0  20  40  60  80  100  120  140  160  180  200
Epoch Length (ms)
Figure 12.
of 300 bytes and δ = 0.001.
Sketch size for an OC-192 link with the average packet size
VIII. PERFORMANCE EVALUATION
In this section, we analyze the protocol overhead and
study the detection efﬁciency of DynaFL via measurements
and simulations, with our implementation of the classic
Sketch [6] in C++.
A. Storage Overhead
DynaFL incurs only per-neighbor state while existing
secure path-based FL protocols require per-source and per-
path state. In this section, we quantify the per-neighbor
storage overhead of a DynaFL router, which primarily
includes the packet cache and the sketch for each neighbor.
Sketch size. We derive numeric values of the sketch size
based on Equations 12 and 13, using an example setting
where the average packet size is 300 bytes and the link’s
capacity is 10 Gbps (an OC-192 link). Furthermore, we
consider δ = 0.001, α = 0.002, and β = 2α for the
(α, β,δ )-accuracy,
the false positive rate and false