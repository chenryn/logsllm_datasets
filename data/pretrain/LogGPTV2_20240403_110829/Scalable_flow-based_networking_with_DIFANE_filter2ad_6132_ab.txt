with addresses. However, precomputation is not an eﬀective
solution for policies (like traﬃc engineering) that depend on
dynamically changing network state.
Use partitioning to subdivide the space of all rules:
Hashing is an appealing way to subdivide the rules and di-
rect packets to the appropriate authority switch. While use-
ful for ﬂat keys like an IP or MAC address [13, 14], hashing
is not eﬀective when the keys can have wildcards in arbitrary
bit positions. In particular, packets matching the same wild-
card rule would have diﬀerent hash values, leading them to
diﬀerent authority switches; as a result, multiple authority
switches would need to store the same wildcard rule. Instead
of relying on hashing, DIFANE partitions the rule space, and
assigns each portion of rule space to one or more authority
353F2
F1
R1
R2
A
B
R3
R6
R4
C D
R5
R7
Type
Cache
rules
Authority
rules
Partition
rules
Priority
210
209
...
110
109
15
14
13
5
...
F1
00**
1110
...
00**
0001
0***
0***
11**
0***
...
F2
111*
11**
...
001*
0***
000*
1***
****
000*
...
Action
Timeout Note
Encap, forward to B
Encap, forward to D,
trigger ctrl. plane func.
Drop
... ...
Drop,
trigger ctrl. plane func.
Encap, redirect to B
Encap, redirect to C
Encap, redirect to D
Encap, redirect to B(cid:2)
... ...
10 sec
10 sec
...
∞
∞
∞
∞
∞
∞
...
R3
R7
...
R1
R2
Primary
Backup
...
(a) Low-level rules and the partition
(b) Wildcard rules in the TCAM of Switch A
Figure 3: Wildcard rules in DIFANE (A-D are authority switches).
switches. Each authority switch stores the rules falling in
its part of the partition.
Run the partitioning algorithm on the controller:
Running the partitioning algorithm on the switches them-
selves would introduce a large overhead, because they would
need to learn the rules from the controller, run the partition-
ing algorithm, and distribute the results. In contrast, the
controller is a more natural place to run the partitioning
algorithm. The controller is already responsible for trans-
lating policies into rules and can easily run the partitioning
algorithm periodically, as the distribution of low-level rules
changes. We expect the controller would recompute the par-
tition relatively infrequently, as most rule changes would not
require rebalancing the division of rule space. Section 4 dis-
cusses how DIFANE handles changes to rules with minimal
interruption to the data traﬃc.
Represent the partition as a small collection of par-
tition rules:
Low-level rules are deﬁned as actions on
a ﬂow space. The ﬂow space usually has seven dimensions
(source/destination IP addresses, MAC addresses, ports, the
protocol) or more. Figure 3(a) shows a two-dimensional ﬂow
space (F1, F2) and the rules on it. The bit range of each
ﬁeld is from 0 to 15 (i.e., F1 = F2 = [0..15]). For example,
F1, F2 can be viewed as the source/destination ﬁelds of a
packet respectively. Rule R2 denotes that all packets which
are from source 1 (F1 = 1) and forwarded to a destination in
[0..7] (F2 = [0..7]) should be dropped.
The controller partitions the ﬂow space into M ranges,
and assigns each range to an authority switch. The result-
ing partition can be expressed concisely as a small number
of coarse-grain partition rules, where M is proportional to
the number of authority switches rather than the number of
low-level rules. For example, in Figure 3(a), the ﬂow space
is partitioned into four parts by the straight lines, which
are represented by the partition rules in Figure 3(b). Sec-
tion 5 discusses how the controller computes a partition of
overlapping wildcard rules that reduces TCAM usage.
Duplicate authority rules to reduce stretch and failure-
recovery time: The ﬁrst packet covered by an authority
rule traverses a longer path through an authority switch.
To reduce the extra distance the traﬃc must travel (i.e.,
“stretch”), the controller can assign each of the M ranges to
multiple authority switches. For example, if each range is
handled by two authority switches, the controller can gen-
erate two partition rules for each range, and assign each
switch the rule that would minimize stretch. That way, on
a cache miss,3 a switch directs packets to the closest author-
ity switch responsible for that range of rules. The placement
of multiple authority switches is discussed in Section 5.
Assigning multiple authority switches to the same range
can also reduce failure-recovery time. By pushing backup
partition rules to every switch, a switch can quickly fail over
to the backup authority switch when the primary one fails
(see Section 4). This requires each switch to store more par-
tition rules (e.g., 2M instead of M ), in exchange for faster
failure recovery. For example, in Figure 3(b), switch A has
a primary partition rule that directs packets to B and a
backup one that directs packets to B(cid:2)
3.2 Packet Redirection and Rule Caching
.
The authority switch stores the authority rules. The ingress
switch encapsulates the ﬁrst packet covered by an authority
switch and redirects it to the authority switch.4 The author-
ity switch processes the packet and also caches rules in the
ingress switch so that the following packets can be processed
at the ingress switch.
Packet redirection:
In the ingress switch, the ﬁrst packet
of a wildcard ﬂow matches a partition rule. The partition
rule indicates which authority switch maintains the author-
ity rules that are related to the packet. For example, in Fig-
ure 3 a packet with (F1 = 9, F2 = 7) hits the primary partition
rule for authority switch B and should be redirected to B.
The ingress switch encapsulates the packet and forwards it
to the authority switch. The authority switch decapsulates
the packet, processes it, re-encapsulates it, and forwards it
to the egress switch.
Rule Caching: To avoid redirecting all the data traﬃc to
the authority switch, the authority switch caches the rules
in the ingress switch.5 Packets that match the cache rules
are encapsulated and forwarded directly to the egress switch
(e.g., packets matching R3 in Figure 3(b) are encapsulated
and forwarded to D). In DIFANE “miss” packets do not wait
for rule caching, because they are sent through the authority
switch rather than buﬀered at the ingress switch. Therefore,
3In DIFANE, every packet matches some rule in the switch.
“Cache miss” in DIFANE means a packet does not match
any cache rules, but matches a partition rule instead.
4With encapsulation, the authority switch knows the ad-
dress of the ingress switch from the packet header and sends
the cache rules to the ingress switch.
5Here we assume that we cache ﬂow rules only at the ingress
switch. We discuss the design choices of where to cache ﬂow
rules in our technical report [16].
354we can run a simple caching function in the control plane of
the authority switch to generate and install cache rules in the
ingress switch. The caching function is triggered whenever a
packet matches the authority rules in the authority switch.
The cache rule has an idle timeout so that it can be removed
by the switch automatically due to inactivity.
3.3 Implement DIFANE with Wildcard Rules
All the data plane functions required in DIFANE can be
expressed with three sets of wildcard rules of various gran-
ularity with simple actions, as shown in Figure 3(b).
Cache rules: The ingress switches cache rules so that
most of the data traﬃc hits in the cache and is processed
by the ingress switch. The cache rules are installed by the
authority switches in the network.
Authority rules: Authority rules are only stored in au-
thority switches. The controller installs and updates the au-
thority rules for all the authority switches. When a packet
matches an authority rule, it triggers a control-plane func-
tion to install rules in the ingress switch.
Partition rules: The controller installs partition rules in
each switch. The partition rules are a set of coarse-grained
rules. With these partition rules, we ensure a packet will
always match at least one rule in the switch and thus always
stay in the data plane.
The three sets of rules can be easily expressed as a single
list of wildcard rules with diﬀerent priorities. Priorities are
naturally supported by TCAM. If a packet matches multi-
ple rules, the packet is processed based on the rule that has
the highest priority. The cached rules have highest priority
because packets matching cache rules do not need to be di-
rected to authority switches. In authority switches, author-
ity rules have higher priority than partition rules, because
packets matching authority rules should be processed based
on these rules. The primary partition rules have higher pri-
ority than backup partition rules.
Since all functionalities in DIFANE are expressed with
wildcard rules, DIFANE does not require any data-plane
modiﬁcations to the switches and only needs minor software
extensions in the control plane of the authority switches.
4. HANDLING NETWORK DYNAMICS
In this section, we describe how DIFANE handles dynam-
ics in diﬀerent parts of the network: To handle rule changes
at the controller, we need to update the authority rules in
the authority switches and occasionally repartition the rules.
To handle topology changes at the switches, we leverage
link-state routing and focus on reducing the interruptions of
authority switch failure and recovery. To handle host mo-
bility, we dynamically update the rules for the host, and use
redirection to handle changes in the routing rules.
4.1 Changes to the Rules
The rules change when administrators modify the poli-
cies, or network events (e.g., topology changes) aﬀect the
mapping between policies and rules. The related authority
rules, cache rules, and partition rules in the switches should
be modiﬁed correspondingly.
Authority rules are modiﬁed by the controller di-
rectly: The controller changes the authority rules in the
related authority switches. The controller can easily iden-
tify the related authority switches based on the partition it
generates.
Cache rules expire automatically: Cached copies of
the old rules may still exist in some ingress switches. These
cache rules will expire after the timeout time. For criti-
cal changes (e.g., preventing DoS attacks), the authority
switches can get the list of all the ingress switches from the
link-state routing and send them a message to evict the re-
lated TCAM entries.
Partition rules are recomputed occasionally: When
the rules change, the number of authority rules in the au-
thority switches may become unbalanced. If the diﬀerence
in the number of rules among the authority switches exceeds
a threshold, the controller recomputes the partition of the
ﬂow space. Once the new partition rules are generated, the
controller notiﬁes the switches of the new partition rules,
and updates the authority rules in the authority switches.
The controller cannot update all the switches at exactly
the same time, so the switches may not have a consistent
view of the partition during the update, which may cause
transient loops and packet loss in the network. To avoid
packet loss, the controller simply updates the switches in a
speciﬁc order. Assume the controller decides to move some
authority rules from authority switch A to B. The con-
troller ﬁrst sends the authority rules to authority switch B,
before sending the new partition rules for A and B to all the
switches in the network. Meanwhile, switches can redirect
the packets to either A or B for the authority rules. Finally,
the controller deletes the authority rules in switch A.
In
this way, we can prevent packet loss during the change. The
same staged update mechanism also applies to the partition
change among multiple authority switches.
4.2 Topology Dynamics
Link-state routing enables the switches to learn about
topology changes and adapt routing quickly. When author-
ity switches fail or recover, DIFANE adapts the rules to
reduce traﬃc interruption.
Authority switch failure: When an authority switch
fails, packets directed through it are dropped. To mini-
mize packet loss, we must react quickly to authority switch
failures. We design a distributed authority switch takeover
mechanism. As discussed in Section 3.1, the controller as-
signs the same group of authority rules to multiple authority
switches to reduce stretch and failure-recovery time. Each
ingress switch has primary partition rules directing traﬃc
to their closest authority switch and backup partition rules
with lower priority that directing traﬃc to another authority
switch when the primary one fails.
The link-state routing protocol propagates a message about
the switch failure throughout the network. Upon receiving
this message, the switches invalidate their partition rules
that direct traﬃc to the failed authority switch. As a result,
the backup partition rule takes eﬀect and automatically di-
rects packets through the backup authority switch. For the
switches that have not yet received the failure information,
the packets may get sent towards the failed authority switch,
but will ﬁnally get dropped by a switch who has updated its
switch forwarding table.6
6If the switch can decapsulate the packet and encapsulate it
with the backup authority switch as the destination, we can
avoid such packet loss.
355Authority switch addition/recovery: We use the con-
troller to handle switches joining in the network, because it
does not require fast reaction compared to authority switch
failures. To minimize the change of the partition rules and
authority rules, the controller randomly picks an authority
switch, divides its ﬂow range evenly into two parts. The
controller then moves one part of the ﬂow range to the new
switch, and installs the authority rules in the new switch. Fi-
nally the controller updates the partition rules correspond-
ingly in all the switches.
4.3 Host Mobility
In DIFANE, when a host moves, its MAC and perhaps
IP address stays the same. The rules in the controller are
deﬁned based on these identiﬁers, and thus do not change as
hosts move. As a result, the partition rules and the authority
rules also stay the same.7 Therefore we only need to consider
the changes of cache rules.
Installing rules at the new ingress switch on demand:
When a host connects to a new ingress switch, the switch
may not have the cache rules for the packets sent by the
hosts. So the packets are redirected to the responsible au-
thority switch. The authority switch then caches rules at
the new ingress switch.
Removing rules from old ingress switch by timeout:
Today’s ﬂow-based switches usually have a timeout for re-
moving the inactive rules. Since the host’s old ingress switch
no longer receives packets from the moved host, the cache
rules at the switch are automatically removed once the time-
out time expires.
Redirecting traﬃc from old ingress switch to the
new one: The rules for routing packets to the host change
when the host moves. When a host connects to a new switch,
the controller gets notiﬁed through the link-state routing
and constructs new routing rules that map the address of the
host to the corresponding egress switch. The new routing
rules are then installed in the authority switches.
The cached routing rules in some switches may be out-
dated. Suppose a host H moves from ingress switch Sold