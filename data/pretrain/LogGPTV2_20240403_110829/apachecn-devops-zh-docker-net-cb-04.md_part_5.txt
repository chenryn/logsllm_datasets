# OVS 和多克在一起
在此之前的配方已经展示了手动配置 Docker 网络时可能出现的几种可能性。虽然这些都是可能的解决方案，但它们都需要相当多的手动干预和配置，并且在当前形式下不容易消耗。如果我们以前面的配方为例，有几个明显的缺点:
*   您负责跟踪容器上的 IP 分配，这增加了您将冲突的 IP 地址分配给不同容器的风险
*   没有动态端口映射或固有的出站伪装来促进容器和网络其余部分之间的通信
*   虽然我们使用管道工程来减轻配置负担，但仍有相当多的手动配置需要完成，以将容器连接到 OVS 大桥
*   默认情况下，大多数配置不会在主机重新启动时保持不变
也就是说，利用我们到目前为止所学的知识，有一种不同的方法可以利用 OVS 的 GRE 能力，同时仍然使用 Docker 来管理容器网络。在本食谱中，我们将回顾该解决方案，并描述如何使其成为一个更持久的解决方案，在主机重新启动后仍然存在。
### 注
同样，这个食谱只是为了举例。Docker 的用户定义覆盖网络类型已经支持这种行为。如果出于某种原因，您需要使用 GRE 而不是 VXLAN，这可能是一个合适的替代方案。一如既往，在开始定制自己的网络结构之前，请确保使用任何 Docker 本机网络结构。它会为你省下一段时间的头痛！
## 做好准备
在这个配方中，我们将在两台 Docker 主机上演示配置。主机需要能够通过网络相互通信。假设主机安装了 Docker，并且 Docker 处于默认配置。为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2 
```
为了对主机进行网络更改，您还需要根级访问。
## 怎么做…
使用之前的灵感配方，我们的新拓扑看起来相似，但有一个显著的不同:
![How to do it…](img/B05453_04_09.jpg)
你会注意到每个主机现在都有一个名为`newbridge`的 Linux 桥。我们将告诉 Docker 使用这个桥而不是`docker0`桥来实现默认的容器连接。这意味着我们只是利用 OVS 的 GRE 能力，把它变成了 T2 的奴隶。将 Linux 桥用于容器连接意味着 Docker 能够为我们做 IPAM 以及处理入站和出站网络过滤规则。使用除`docker0`之外的桥更多的是与配置有关，而不是可用性，我们很快就会看到。
我们将再次从头开始配置，假设每台主机的默认配置中只安装了 Docker。我们要做的第一件事是配置我们将在每台主机上使用的两个网桥。我们先从主机`docker1`开始:
```
user@docker1:~$ sudo apt-get install openvswitch-switch
……
Setting up openvswitch-switch (2.0.2-0ubuntu0.14.04.3) ...
openvswitch-switch start/running
user@docker1:~$
user@docker1:~$ sudo ovs-vsctl add-br ovs_bridge
user@docker1:~$ sudo ip link set dev ovs_bridge up
user@docker1:~$
user@docker1:~$ sudo ip link add newbridge type bridge
user@docker1:~$ sudo ip link set newbridge up
user@docker1:~$ sudo ip address add 10.11.12.1/24 dev newbridge
user@docker1:~$ sudo ip link set newbridge up
```
此时，我们在主机上配置了一个 OVS 桥和一个标准 Linux 桥。为了完成网桥配置，我们需要在 OVS 网桥上创建 GRE 接口，然后将 OVS 网桥绑定到 Linux 网桥:
```
user@docker1:~$ sudo ovs-vsctl add-port ovs_bridge ovs_gre \
-- set interface ovs_gre type=gre options:remote_ip=192.168.50.101
user@docker1:~$
user@docker1:~$ sudo ip link set ovs_bridge master newbridge
```
现在桥配置完成，我们可以告诉 Docker 使用`newbridge`作为其默认桥。我们通过编辑 systemd 插件文件并添加以下选项来做到这一点:
```
ExecStart=/usr/bin/dockerd --bridge=newbridge --fixed-cidr=10.11.12.128/26
```
注意除了告诉 Docker 使用不同的桥，我还告诉 Docker 只从`10.11.12.128/26`分配容器 IP 寻址。当我们配置第二个 Docker 主机(`docker3`)时，我们将告诉 Docker 只分配来自`10.11.12.192/26`的容器 IP 地址。这是一种黑客攻击，但它可以防止两台 Docker 主机发出重叠的 IP 地址，而不必知道另一台主机已经分配了什么。
### 注
[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义网络*演示了本地覆盖网络通过跟踪参与覆盖网络的所有主机之间的 IP 分配来解决这个问题。
为了让 Docker 使用新选项，我们需要重新加载系统配置并重新启动 Docker 服务:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl restart docker
```
最后，在不指定网络模式的情况下启动容器:
```
user@docker1:~$ docker run --name web1 -d -P jonlangemak/web_server_1
82c75625f8e5436164e40cf4c453ed787eab102d3d12cf23c86d46be48673f66
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr
……
8: eth0@if9:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:0a:0b:0c:80 brd ff:ff:ff:ff:ff:ff
    inet 10.11.12.128/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe0b:c80/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
不出所料，我们运行的第一个容器获得了`10.11.12.128/26`网络中第一个可用的 IP 地址。现在，让我们继续配置第二台主机`docker3`:
```
user@docker3:~$ sudo apt-get install openvswitch-switch
……
Setting up openvswitch-switch (2.0.2-0ubuntu0.14.04.3) ...
openvswitch-switch start/running
user@docker3:~$
user@docker3:~$ sudo ovs-vsctl add-br ovs_bridge
user@docker3:~$ sudo ip link set dev ovs_bridge up
user@docker3:~$
user@docker3:~$ sudo ip link add newbridge type bridge
user@docker3:~$ sudo ip link set newbridge up
user@docker3:~$ sudo ip address add 10.11.12.2/24 dev newbridge
user@docker3:~$ sudo ip link set newbridge up
user@docker3:~$
user@docker3:~$ sudo ip link set ovs_bridge master newbridge
user@docker3:~$ sudo ovs-vsctl add-port ovs_bridge ovs_gre \
-- set interface ovs_gre type=gre options:remote_ip=10.10.10.101
user@docker3:~$
```
在这个主机上，告诉 Docker 通过编辑 systemd 插件文件来使用以下选项:
```
ExecStart=/usr/bin/dockerd --bridge=newbridge --fixed-cidr=10.11.12.192/26
```
重新加载系统配置，重启 Docker 服务:
```
user@docker3:~$ sudo systemctl daemon-reload
user@docker3:~$ sudo systemctl restart docker
```
现在在此主机上旋转一个容器:
```
user@docker3:~$ docker run --name web2 -d -P jonlangemak/web_server_2
eb2b26ee95580a42568051505d4706556f6c230240a9c6108ddb29b6faed9949
user@docker3:~$
user@docker3:~$ docker exec web2 ip addr
……
9: eth0@if10:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:0a:0b:0c:c0 brd ff:ff:ff:ff:ff:ff
    inet 10.11.12.192/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:aff:fe0b:cc0/64 scope link
       valid_lft forever preferred_lft forever
user@docker3:~$
```
在这一点上，每个容器应该能够通过 GRE 隧道与其他容器进行对话:
```
user@docker3:~$ docker exec -it web2 curl http://10.11.12.128
    Web Server #1 - Running on port 80
user@docker3:~$
```
此外，每个主机仍然拥有 Docker 通过 IPAM、发布端口和容器伪装出站访问提供的所有优势。
我们可以验证端口发布:
```
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker1:~$ curl http://localhost:32768
    Web Server #1 - Running on port 80
user@docker1:~$
```
我们可以通过默认的 Docker 伪装规则验证出站访问:
```
user@docker1:~$ docker exec -it web1 ping 4.2.2.2 -c 2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=30.797 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=31.399 ms
--- 4.2.2.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 30.797/31.098/31.399/0.301 ms
user@docker1:~$
```
这种设置的最后一个优点是，我们可以很容易地使它在主机重新启动时保持不变。唯一需要重新创建的配置是 Linux 桥`newbridge`的配置以及`newbridge`和 OVS 桥之间的连接。为了使持久化，我们可以在每个主机的网络配置文件(`/etc/network/interfaces`)中添加以下配置。
### 注
Ubuntu 不会在接口文件中处理与网桥相关的配置，除非您在主机上安装了网桥实用程序包。
```
sudo apt-get install bridge-utils
```
*   主机`docker1` :
    ```
    auto newbridge
    iface newbridge inet static
      address 10.11.12.1
      netmask 255.255.255.0
      bridge_ports ovs_bridge
    ```
*   主机`docker3` :
    ```
    auto newbridge
    iface newbridge inet static
      address 10.11.12.2
      netmask 255.255.255.0
      bridge_ports ovs_bridge
    ```
通过将`newbridge`配置信息放入网络启动脚本中，我们完成了两个任务。首先，我们创建 Docker 期望在实际 Docker 服务启动之前使用的桥。如果没有这个，Docker 服务将无法启动，因为它找不到桥。其次，这种配置允许我们将 OVS 绑定到`newbridge`，同时通过指定桥梁的`bridge_ports`来创建桥梁。因为这种配置以前是通过`ip link`命令手动完成的，所以绑定不会在系统重新启动时保持不变。