### Integrity Measurement and Reporting in SRTM

**Integrity Reporting** involves transmitting collected measurements in a signed aggregate to an external verifier. The external verifier can then use these measurements to make trust decisions.

#### SRTM Protocol Overview

The SRTM (Static Root of Trust for Measurement) protocol consists of two main components: integrity measurement and integrity reporting. The security skeleton of the protocol, as shown in Figure 3, retains only the relevant actions for integrity measurement and reporting.

1. **Integrity Measurement**:
   - **SRTM(m)**: This program is the first to run when a machine reboots. It reads the boot loader's code `b` from a fixed location `m.bl_loc`, extends it into a static PCR `m.pcr.s`, and branches to the boot loader.
   - **BL(m)**: The boot loader performs similar actions with the operating system's code `o`. It reads the OS code from `m.os_loc`, extends it into `m.pcr.s`, and branches to the OS.
   - **OS(m)**: The operating system may perform further actions, such as loading applications. The application (APP(m)) can perform any actions.

2. **Integrity Reporting**:
   - **TPMSRTM(m)**: This component reads the value of `m.pcr.s`, signs it with the AIK (Attestation Identity Key), and sends the signed report to the verifier.
   - **Verifier(m)**: The verifier receives the signed report, verifies the signature using the AIK, and matches the verified values with the expected sequence of measurements.

#### Security Property

The integrity measurement security property can be summarized as follows: if `m.pcr.s` is protected during the boot process and its contents are `seq(sinit, BL(m), OS(m), APP(m))`, then the initial software loaded on the machine since the last reboot was `BL(m)` followed by `OS(m)`.

- **ProtectedSRTM(m)**: Ensures that any thread created to boot the machine after a reset obtains an exclusive-write lock on `m.pcr.s`.
- **MeasuredBootSRTM(m, t)**: Identifies software events such as the boot loader and operating system being branched to before time `t`.

**Theorem 2 (Security of Integrity Measurement)**: Under the assumptions that `m.pcr.s` is protected during booting and contains `seq(sinit, BL(m), OS(m), APP(m))` at time `t`, it is guaranteed that the boot loader and operating system used to boot the machine are `BL(m)` and `OS(m)` respectively.

**Proof Steps**:
1. **Sub-sequences in m.pcr.s**: Using the axioms and succession properties, show that sub-sequences of `seq(sinit, BL(m), OS(m), APP(m))` appeared in `m.pcr.s` at times earlier than `t`.
2. **Invariant of SRTM(m)**: Prove an invariant of `SRTM(m)` to handle unknown code `b` read from `m.bl_loc`.
3. **Branching to Boot Loader**: Instantiate the invariant for `b = BL(m)` and `o = OS(m)`, and show that `J` must have branched to `BL(m)` and `OS(m)`.
4. **Jump Rule Application**: Use the (Jump) rule to handle branching to unknown code in `BL(m)`.
5. **Final Properties**: Combine the facts to establish `MeasuredBootSRTM(m, t)`.

#### Insights from Analysis

- **Property Excludes Last Jump**: The integrity measurement protocol does not provide sufficient evidence to deduce that the last program in a chain of measurements is actually executed.
- **TCB Assumptions**: The value of `m.pcr.s` does not guarantee that the measured software was also executed unless no other process had write access to `m.pcr.s`.
- **Program Invariants**: To establish Theorem 2, program invariants for `SRTM(m)` and `BL(m)` are proven. These invariants specify the properties that an SRTM and a boot loader must satisfy to be secure in an integrity measurement protocol.

#### Integrity Reporting

After the integrity measurement protocol loads the PCRs with measurements, the TPM can use these measurements to attest to the identity of the software loaded on the local platform. This involves two participants: the remote verifier and the TPM of the machine. The TPM signs the PCR values and sends them to the verifier, which verifies the signature and matches the values with the expected sequence.

This structured approach ensures that the integrity of the system is maintained and can be verified by an external party.