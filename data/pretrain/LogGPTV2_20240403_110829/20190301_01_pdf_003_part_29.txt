Built-in Package Guide
3.24.4 COMMAND
The COMMAND procedure provides the capability to execute an SMTP command. If you
are expecting multiple reply lines, use COMMAND_REPLIES.
reply REPLY COMMAND(c IN OUT CONNECTION, cmd VARCHAR2
[, arg VARCHAR2 ])
COMMAND(c IN OUT CONNECTION, cmd VARCHAR2 [, arg VARCHAR2
])
Parameters
c
The SMTP connection to which the command is to be sent.
cmd
The SMTP command to be processed.
arg
An argument to the SMTP command. The default is null.
reply
SMTP reply to the command. If SMTP returns multiple replies, only the last one
is returned in reply.
See Section 3.24.2 for a description of REPLY and REPLIES.
3.24.5 COMMAND_REPLIES
The COMMAND_REPLIES function processes an SMTP command that returns multiple
reply lines. Use COMMAND if only a single reply line is expected.
replies REPLIES COMMAND(c IN OUT CONNECTION, cmd VARCHAR2
[, arg VARCHAR2 ])
Parameters
c
The SMTP connection to which the command is to be sent.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 321
Database Compatibility for Oracle® Developers
Built-in Package Guide
cmd
The SMTP command to be processed.
arg
An argument to the SMTP command. The default is null.
replies
SMTP reply lines to the command. See Section 3.24.2 for a description of REPLY
and REPLIES.
3.24.6 DATA
The DATA procedure provides the capability to specify the body of the e-mail message.
The message is terminated with a . sequence.
DATA(c IN OUT CONNECTION, body VARCHAR2)
Parameters
c
The SMTP connection to which the command is to be sent.
body
Body of the e-mail message to be sent.
3.24.7 EHLO
The EHLO procedure performs initial handshaking with the SMTP server after
establishing the connection. The EHLO procedure allows the client to identify itself to the
SMTP server according to RFC 821. RFC 1869 specifies the format of the information
returned in the server’s reply. The HELO procedure performs the equivalent
functionality, but returns less information about the server.
EHLO(c IN OUT CONNECTION, domain VARCHAR2)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 322
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
c
The connection to the SMTP server over which to perform handshaking.
domain
Domain name of the sending host.
3.24.8 HELO
The HELO procedure performs initial handshaking with the SMTP server after
establishing the connection. The HELO procedure allows the client to identify itself to the
SMTP server according to RFC 821. The EHLO procedure performs the equivalent
functionality, but returns more information about the server.
HELO(c IN OUT, domain VARCHAR2)
Parameters
c
The connection to the SMTP server over which to perform handshaking.
domain
Domain name of the sending host.
3.24.9 HELP
The HELP function provides the capability to send the HELP command to the SMTP
server.
replies REPLIES HELP(c IN OUT CONNECTION [, command
VARCHAR2 ])
Parameters
c
The SMTP connection to which the command is to be sent.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 323
Database Compatibility for Oracle® Developers
Built-in Package Guide
command
Command on which help is requested.
replies
SMTP reply lines to the command. See Section 3.24.2 for a description of REPLY
and REPLIES.
3.24.10 MAIL
The MAIL procedure initiates a mail transaction.
MAIL(c IN OUT CONNECTION, sender VARCHAR2
[, parameters VARCHAR2 ])
Parameters
c
Connection to SMTP server on which to start a mail transaction.
sender
The sender’s e-mail address.
parameters
Mail command parameters in the format, key=value as defined in RFC 1869.
3.24.11 NOOP
The NOOP function/procedure sends the null command to the SMTP server. The NOOP has
no effect upon the server except to obtain a successful response.
reply REPLY NOOP(c IN OUT CONNECTION)
NOOP(c IN OUT CONNECTION)
Parameters
c
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 324
Database Compatibility for Oracle® Developers
Built-in Package Guide
The SMTP connection on which to send the command.
reply
SMTP reply to the command. If SMTP returns multiple replies, only the last one
is returned in reply. See Section 3.24.2 for a description of REPLY and
REPLIES.
3.24.12 OPEN_CONNECTION
The OPEN_CONNECTION functions open a connection to an SMTP server.
c CONNECTION OPEN_CONNECTION(host VARCHAR2 [, port
PLS_INTEGER [, tx_timeout PLS_INTEGER DEFAULT NULL]])
Parameters
host
Name of the SMTP server.
port
Port number on which the SMTP server is listening. The default is 25.
tx_timeout
Time out value in seconds. Do not wait is indicated by specifying 0. Wait
indefinitely is indicated by setting timeout to null. The default is null.
c
Connection handle returned by the SMTP server.
3.24.13 OPEN_DATA
The OPEN_DATA procedure sends the DATA command to the SMTP server.
OPEN_DATA(c IN OUT CONNECTION)
Parameters
c
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 325
Database Compatibility for Oracle® Developers
Built-in Package Guide
SMTP connection on which to send the command.
3.24.14 QUIT
The QUIT procedure closes the session with an SMTP server.
QUIT(c IN OUT CONNECTION)
Parameters
c
SMTP connection to be terminated.
3.24.15 RCPT
The RCPT procedure provides the e-mail address of the recipient. To schedule multiple
recipients, invoke RCPT multiple times.
RCPT(c IN OUT CONNECTION, recipient VARCHAR2
[, parameters VARCHAR2 ])
Parameters
c
Connection to SMTP server on which to add a recipient.
recipient
The recipient’s e-mail address.
parameters
Mail command parameters in the format, key=value as defined in RFC 1869.
3.24.16 RSET
The RSET procedure provides the capability to terminate the current mail transaction.
RSET(c IN OUT CONNECTION)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 326
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
c
SMTP connection on which to cancel the mail transaction.
3.24.17 VRFY
The VRFY function provides the capability to validate and verify the recipient’s e-mail
address. If valid, the recipient’s full name and fully qualified mailbox is returned.
reply REPLY VRFY(c IN OUT CONNECTION, recipient VARCHAR2)
Parameters
c
The SMTP connection on which to verify the e-mail address.
recipient
The recipient’s e-mail address to be verified.
reply
SMTP reply to the command. If SMTP returns multiple replies, only the last one
is returned in reply. See Section 3.24.2 for a description of REPLY and
REPLIES.
3.24.18 WRITE_DATA
The WRITE_DATA procedure provides the capability to add VARCHAR2 data to an e-mail
message. The WRITE_DATA procedure may be repetitively called to add data.
WRITE_DATA(c IN OUT CONNECTION, data VARCHAR2)
Parameters
c
The SMTP connection on which to add data.
data
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 327
Database Compatibility for Oracle® Developers
Built-in Package Guide
Data to be added to the e-mail message. The data must conform to the RFC 822
specification.
3.24.19 Comprehensive Example
The following procedure constructs and sends a text e-mail message using the UTL_SMTP
package.
CREATE OR REPLACE PROCEDURE send_mail (
p_sender VARCHAR2,
p_recipient VARCHAR2,
p_subj VARCHAR2,
p_msg VARCHAR2,
p_mailhost VARCHAR2
)
IS
v_conn UTL_SMTP.CONNECTION;
v_crlf CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
v_port CONSTANT PLS_INTEGER := 25;
BEGIN
v_conn := UTL_SMTP.OPEN_CONNECTION(p_mailhost,v_port);
UTL_SMTP.HELO(v_conn,p_mailhost);
UTL_SMTP.MAIL(v_conn,p_sender);
UTL_SMTP.RCPT(v_conn,p_recipient);
UTL_SMTP.DATA(v_conn, SUBSTR(
'Date: ' || TO_CHAR(SYSDATE,
'Dy, DD Mon YYYY HH24:MI:SS') || v_crlf
|| 'From: ' || p_sender || v_crlf
|| 'To: ' || p_recipient || v_crlf
|| 'Subject: ' || p_subj || v_crlf
|| p_msg
, 1, 32767));
UTL_SMTP.QUIT(v_conn);
END;
EXEC send_mail('PI:EMAIL','PI:EMAIL','Holiday
Party','Are you planning to attend?','smtp.enterprisedb.com');
The following example uses the OPEN_DATA, WRITE_DATA, and CLOSE_DATA
procedures instead of the DATA procedure.
CREATE OR REPLACE PROCEDURE send_mail_2 (
p_sender VARCHAR2,
p_recipient VARCHAR2,
p_subj VARCHAR2,
p_msg VARCHAR2,
p_mailhost VARCHAR2
)
IS
v_conn UTL_SMTP.CONNECTION;
v_crlf CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
v_port CONSTANT PLS_INTEGER := 25;
BEGIN
v_conn := UTL_SMTP.OPEN_CONNECTION(p_mailhost,v_port);
UTL_SMTP.HELO(v_conn,p_mailhost);
UTL_SMTP.MAIL(v_conn,p_sender);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 328
Database Compatibility for Oracle® Developers
Built-in Package Guide
UTL_SMTP.RCPT(v_conn,p_recipient);
UTL_SMTP.OPEN_DATA(v_conn);
UTL_SMTP.WRITE_DATA(v_conn,'From: ' || p_sender || v_crlf);
UTL_SMTP.WRITE_DATA(v_conn,'To: ' || p_recipient || v_crlf);
UTL_SMTP.WRITE_DATA(v_conn,'Subject: ' || p_subj || v_crlf);
UTL_SMTP.WRITE_DATA(v_conn,v_crlf || p_msg);
UTL_SMTP.CLOSE_DATA(v_conn);
UTL_SMTP.QUIT(v_conn);
END;
EXEC send_mail_2('PI:EMAIL','PI:EMAIL','Holiday
Party','Are you planning to attend?','smtp.enterprisedb.com');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 329
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.25 UTL_URL
The UTL_URL package provides a way to escape illegal and reserved characters within an
URL.
Function/Procedure Return Type Description
ESCAPE(url, VARCHAR2 Use the ESCAPE function to escape any
escape_reserved_chars, illegal and reserved characters in a URL.
url_charset)
UNESCAPE(url, url_charset) VARCHAR2 The UNESCAPE function to convert an URL
to it's original form.
The UTL_URL package will return the BAD_URL exception if the call to a function
includes an incorrectly-formed URL.
3.25.1 ESCAPE
Use the ESCAPE function to escape illegal and reserved characters within an URL. The
signature is:
ESCAPE(url VARCHAR2, escape_reserved_chars BOOLEAN,
url_charset VARCHAR2)
Reserved characters are replaced with a percent sign, followed by the two-digit hex code
of the ascii value for the escaped character.
Parameters
url
url specifies the Uniform Resource Locator that UTL_URL will escape.
escape_reserved_chars
escape_reserved_chars is a BOOLEAN value that instructs the ESCAPE
function to escape reserved characters as well as illegal characters:
 If escaped_reserved_chars is FALSE, ESCAPE will escape only the
illegal characters in the specified URL.
 If escape_reserved_chars is TRUE, ESCAPE will escape both the
illegal characters and the reserved characters in the specified URL.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 330
Database Compatibility for Oracle® Developers
Built-in Package Guide
By default, escape_reserved_chars is FALSE.
Within an URL, legal characters are:
Uppercase A through Z Lowercase a through z 0 through 9
asterisk (*) exclamation point (!) hyphen (-)
left parenthesis (() period (.) right parenthesis ())
single-quote (') tilde (~) underscore (_)
Some characters are legal in some parts of an URL, while illegal in others; to
review comprehensive rules about illegal characters, please refer to RFC 2396.
Some examples of characters that are considered illegal in any part of an URL are:
Illegal Character Escape Sequence
a blank space ( ) %20
curly braces ({ or }) %7b and %7d
hash mark (#) %23
The ESCAPE function considers the following characters to be reserved, and will
escape them if escape_reserved_chars is set to TRUE:
Reserved Character Escape Sequence
ampersand (&) %5C
at sign (@) %25
colon (:) %3a
comma (,) %2c
dollar sign ($) %24
equal sign (=) %3d
plus sign (+) %2b
question mark (?) %3f
semi-colon (;) %3b
slash (/) %2f
url_charset
url_charset specifies a character set to which a given character will be
converted before it is escaped. If url_charset is NULL, the character will not
be converted. The default value of url_charset is ISO-8859-1.
Examples
The following anonymous block uses the ESCAPE function to escape the blank spaces in
the URL:
DECLARE
result varchar2(400);
BEGIN
result := UTL_URL.ESCAPE('http://www.example.com/Using the ESCAPE
function.html');
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 331
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_OUTPUT.PUT_LINE(result);
END;
The resulting (escaped) URL is:
http://www.example.com/Using%20the%20ESCAPE%20function.html
If you include a value of TRUE for the escape_reserved_chars parameter when
invoking the function:
DECLARE
result varchar2(400);
BEGIN
result := UTL_URL.ESCAPE('http://www.example.com/Using the ESCAPE
function.html', TRUE);
DBMS_OUTPUT.PUT_LINE(result);
END;
The ESCAPE function escapes the reserved characters as well as the illegal characters in
the URL:
http%3A%2F%2Fwww.example.com%2FUsing%20the%20ESCAPE%20function.html
3.25.2 UNESCAPE
The UNESCAPE function removes escape characters added to an URL by the ESCAPE
function, converting the URL to it's original form.
The signature is:
UNESCAPE(url VARCHAR2, url_charset VARCHAR2)
Parameters
url
url specifies the Uniform Resource Locator that UTL_URL will unescape.
url_charset
After unescaping a character, the character is assumed to be in url_charset
encoding, and will be converted from that encoding to database encoding before
being returned. If url_charset is NULL, the character will not be converted.
The default value of url_charset is ISO-8859-1.
Examples
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 332
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following anonymous block uses the ESCAPE function to escape the blank spaces in
the URL:
DECLARE
result varchar2(400);
BEGIN
result :=
UTL_URL.UNESCAPE('http://www.example.com/Using%20the%20UNESCAPE%20function.ht
ml');
DBMS_OUTPUT.PUT_LINE(result);
END;
The resulting (unescaped) URL is:
http://www.example.com/Using the UNESCAPE function.html
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 333
Database Compatibility for Oracle® Developers
Built-in Package Guide
4 Acknowledgements
The PostgreSQL 8.3, 8.4, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 10, and 11 Documentation
provided the baseline for the portions of this guide that are common to PostgreSQL, and
is hereby acknowledged:
Portions of this EnterpriseDB Software and Documentation may utilize the following
copyrighted material, the use of which is hereby acknowledged.
PostgreSQL Documentation, Database Management System
PostgreSQL is Copyright © 1996-2018 by the PostgreSQL Global Development Group
and is distributed under the terms of the license of the University of California below.
Postgres95 is Copyright © 1994-5 by the Regents of the University of California.
Permission to use, copy, modify, and distribute this software and its documentation for
any purpose, without fee, and without a written agreement is hereby granted, provided
that the above copyright notice and this paragraph and the following two paragraphs
appear in all copies.
IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS-IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 334