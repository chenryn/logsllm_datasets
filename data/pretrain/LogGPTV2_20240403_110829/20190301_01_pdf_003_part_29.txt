# Built-in Package Guide

## 3.24.4 COMMAND
The `COMMAND` procedure allows the execution of an SMTP command. If you expect multiple reply lines, use `COMMAND_REPLIES`.

### Syntax
```sql
reply REPLY := COMMAND(c IN OUT CONNECTION, cmd VARCHAR2 [, arg VARCHAR2 ])
```

### Parameters
- **c**: The SMTP connection to which the command is to be sent.
- **cmd**: The SMTP command to be processed.
- **arg**: An argument to the SMTP command. The default is `NULL`.
- **reply**: The SMTP reply to the command. If the SMTP server returns multiple replies, only the last one is returned in `reply`.

### See Also
Refer to Section 3.24.2 for a description of `REPLY` and `REPLIES`.

## 3.24.5 COMMAND_REPLIES
The `COMMAND_REPLIES` function processes an SMTP command that returns multiple reply lines. Use `COMMAND` if only a single reply line is expected.

### Syntax
```sql
replies REPLIES := COMMAND_REPLIES(c IN OUT CONNECTION, cmd VARCHAR2 [, arg VARCHAR2 ])
```

### Parameters
- **c**: The SMTP connection to which the command is to be sent.
- **cmd**: The SMTP command to be processed.
- **arg**: An argument to the SMTP command. The default is `NULL`.
- **replies**: The SMTP reply lines to the command. Refer to Section 3.24.2 for a description of `REPLY` and `REPLIES`.

## 3.24.6 DATA
The `DATA` procedure specifies the body of the e-mail message. The message is terminated with a `.` sequence.

### Syntax
```sql
DATA(c IN OUT CONNECTION, body VARCHAR2)
```

### Parameters
- **c**: The SMTP connection to which the command is to be sent.
- **body**: The body of the e-mail message to be sent.

## 3.24.7 EHLO
The `EHLO` procedure performs initial handshaking with the SMTP server after establishing the connection. It allows the client to identify itself to the SMTP server according to RFC 821. RFC 1869 specifies the format of the information returned in the server’s reply. The `HELO` procedure performs the equivalent functionality but returns less information about the server.

### Syntax
```sql
EHLO(c IN OUT CONNECTION, domain VARCHAR2)
```

### Parameters
- **c**: The connection to the SMTP server over which to perform handshaking.
- **domain**: The domain name of the sending host.

## 3.24.8 HELO
The `HELO` procedure performs initial handshaking with the SMTP server after establishing the connection. It allows the client to identify itself to the SMTP server according to RFC 821. The `EHLO` procedure performs the equivalent functionality but returns more information about the server.

### Syntax
```sql
HELO(c IN OUT CONNECTION, domain VARCHAR2)
```

### Parameters
- **c**: The connection to the SMTP server over which to perform handshaking.
- **domain**: The domain name of the sending host.

## 3.24.9 HELP
The `HELP` function sends the `HELP` command to the SMTP server.

### Syntax
```sql
replies REPLIES := HELP(c IN OUT CONNECTION [, command VARCHAR2 ])
```

### Parameters
- **c**: The SMTP connection to which the command is to be sent.
- **command**: The command on which help is requested.
- **replies**: The SMTP reply lines to the command. Refer to Section 3.24.2 for a description of `REPLY` and `REPLIES`.

## 3.24.10 MAIL
The `MAIL` procedure initiates a mail transaction.

### Syntax
```sql
MAIL(c IN OUT CONNECTION, sender VARCHAR2 [, parameters VARCHAR2 ])
```

### Parameters
- **c**: The connection to the SMTP server on which to start a mail transaction.
- **sender**: The sender’s e-mail address.
- **parameters**: Mail command parameters in the format `key=value` as defined in RFC 1869.

## 3.24.11 NOOP
The `NOOP` function/procedure sends the null command to the SMTP server. The `NOOP` has no effect on the server except to obtain a successful response.

### Syntax
```sql
reply REPLY := NOOP(c IN OUT CONNECTION)
```

### Parameters
- **c**: The SMTP connection on which to send the command.
- **reply**: The SMTP reply to the command. If the SMTP server returns multiple replies, only the last one is returned in `reply`. Refer to Section 3.24.2 for a description of `REPLY` and `REPLIES`.

## 3.24.12 OPEN_CONNECTION
The `OPEN_CONNECTION` function opens a connection to an SMTP server.

### Syntax
```sql
c CONNECTION := OPEN_CONNECTION(host VARCHAR2 [, port PLS_INTEGER [, tx_timeout PLS_INTEGER DEFAULT NULL]])
```

### Parameters
- **host**: The name of the SMTP server.
- **port**: The port number on which the SMTP server is listening. The default is 25.
- **tx_timeout**: The timeout value in seconds. Do not wait is indicated by specifying 0. Wait indefinitely is indicated by setting the timeout to `NULL`. The default is `NULL`.
- **c**: The connection handle returned by the SMTP server.

## 3.24.13 OPEN_DATA
The `OPEN_DATA` procedure sends the `DATA` command to the SMTP server.

### Syntax
```sql
OPEN_DATA(c IN OUT CONNECTION)
```

### Parameters
- **c**: The SMTP connection on which to send the command.

## 3.24.14 QUIT
The `QUIT` procedure closes the session with an SMTP server.

### Syntax
```sql
QUIT(c IN OUT CONNECTION)
```

### Parameters
- **c**: The SMTP connection to be terminated.

## 3.24.15 RCPT
The `RCPT` procedure provides the e-mail address of the recipient. To schedule multiple recipients, invoke `RCPT` multiple times.

### Syntax
```sql
RCPT(c IN OUT CONNECTION, recipient VARCHAR2 [, parameters VARCHAR2 ])
```

### Parameters
- **c**: The connection to the SMTP server on which to add a recipient.
- **recipient**: The recipient’s e-mail address.
- **parameters**: Mail command parameters in the format `key=value` as defined in RFC 1869.

## 3.24.16 RSET
The `RSET` procedure terminates the current mail transaction.

### Syntax
```sql
RSET(c IN OUT CONNECTION)
```

### Parameters
- **c**: The SMTP connection on which to cancel the mail transaction.

## 3.24.17 VRFY
The `VRFY` function validates and verifies the recipient’s e-mail address. If valid, the recipient’s full name and fully qualified mailbox are returned.

### Syntax
```sql
reply REPLY := VRFY(c IN OUT CONNECTION, recipient VARCHAR2)
```

### Parameters
- **c**: The SMTP connection on which to verify the e-mail address.
- **recipient**: The recipient’s e-mail address to be verified.
- **reply**: The SMTP reply to the command. If the SMTP server returns multiple replies, only the last one is returned in `reply`. Refer to Section 3.24.2 for a description of `REPLY` and `REPLIES`.

## 3.24.18 WRITE_DATA
The `WRITE_DATA` procedure adds `VARCHAR2` data to an e-mail message. The `WRITE_DATA` procedure may be called repeatedly to add data.

### Syntax
```sql
WRITE_DATA(c IN OUT CONNECTION, data VARCHAR2)
```

### Parameters
- **c**: The SMTP connection on which to add data.
- **data**: The data to be added to the e-mail message. The data must conform to the RFC 822 specification.

## 3.24.19 Comprehensive Example
The following procedure constructs and sends a text e-mail message using the `UTL_SMTP` package.

### Example 1
```sql
CREATE OR REPLACE PROCEDURE send_mail (
    p_sender VARCHAR2,
    p_recipient VARCHAR2,
    p_subj VARCHAR2,
    p_msg VARCHAR2,
    p_mailhost VARCHAR2
) IS
    v_conn UTL_SMTP.CONNECTION;
    v_crlf CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
    v_port CONSTANT PLS_INTEGER := 25;
BEGIN
    v_conn := UTL_SMTP.OPEN_CONNECTION(p_mailhost, v_port);
    UTL_SMTP.HELO(v_conn, p_mailhost);
    UTL_SMTP.MAIL(v_conn, p_sender);
    UTL_SMTP.RCPT(v_conn, p_recipient);
    UTL_SMTP.DATA(v_conn, SUBSTR(
        'Date: ' || TO_CHAR(SYSDATE, 'Dy, DD Mon YYYY HH24:MI:SS') || v_crlf
        || 'From: ' || p_sender || v_crlf
        || 'To: ' || p_recipient || v_crlf
        || 'Subject: ' || p_subj || v_crlf
        || p_msg
    , 1, 32767));
    UTL_SMTP.QUIT(v_conn);
END;

EXEC send_mail('PI:EMAIL', 'PI:EMAIL', 'Holiday Party', 'Are you planning to attend?', 'smtp.enterprisedb.com');
```

### Example 2
The following example uses the `OPEN_DATA`, `WRITE_DATA`, and `CLOSE_DATA` procedures instead of the `DATA` procedure.

```sql
CREATE OR REPLACE PROCEDURE send_mail_2 (
    p_sender VARCHAR2,
    p_recipient VARCHAR2,
    p_subj VARCHAR2,
    p_msg VARCHAR2,
    p_mailhost VARCHAR2
) IS
    v_conn UTL_SMTP.CONNECTION;
    v_crlf CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
    v_port CONSTANT PLS_INTEGER := 25;
BEGIN
    v_conn := UTL_SMTP.OPEN_CONNECTION(p_mailhost, v_port);
    UTL_SMTP.HELO(v_conn, p_mailhost);
    UTL_SMTP.MAIL(v_conn, p_sender);
    UTL_SMTP.RCPT(v_conn, p_recipient);
    UTL_SMTP.OPEN_DATA(v_conn);
    UTL_SMTP.WRITE_DATA(v_conn, 'From: ' || p_sender || v_crlf);
    UTL_SMTP.WRITE_DATA(v_conn, 'To: ' || p_recipient || v_crlf);
    UTL_SMTP.WRITE_DATA(v_conn, 'Subject: ' || p_subj || v_crlf);
    UTL_SMTP.WRITE_DATA(v_conn, v_crlf || p_msg);
    UTL_SMTP.CLOSE_DATA(v_conn);
    UTL_SMTP.QUIT(v_conn);
END;

EXEC send_mail_2('PI:EMAIL', 'PI:EMAIL', 'Holiday Party', 'Are you planning to attend?', 'smtp.enterprisedb.com');
```

## 3.25 UTL_URL
The `UTL_URL` package provides a way to escape illegal and reserved characters within a URL.

### Functions/Procedures
- **ESCAPE(url, escape_reserved_chars, url_charset)**: Escapes any illegal and reserved characters in a URL.
- **UNESCAPE(url, url_charset)**: Converts an escaped URL back to its original form.

The `UTL_URL` package will raise the `BAD_URL` exception if the call to a function includes an incorrectly-formed URL.

### 3.25.1 ESCAPE
The `ESCAPE` function escapes illegal and reserved characters within a URL. The signature is:

```sql
ESCAPE(url VARCHAR2, escape_reserved_chars BOOLEAN, url_charset VARCHAR2)
```

#### Reserved Characters
Reserved characters are replaced with a percent sign, followed by the two-digit hex code of the ASCII value for the escaped character.

#### Parameters
- **url**: The Uniform Resource Locator that `UTL_URL` will escape.
- **escape_reserved_chars**: A `BOOLEAN` value that instructs the `ESCAPE` function to escape reserved characters as well as illegal characters. By default, it is `FALSE`.
- **url_charset**: Specifies a character set to which a given character will be converted before it is escaped. If `url_charset` is `NULL`, the character will not be converted. The default value is `ISO-8859-1`.

#### Examples
```sql
DECLARE
    result VARCHAR2(400);
BEGIN
    result := UTL_URL.ESCAPE('http://www.example.com/Using the ESCAPE function.html');
    DBMS_OUTPUT.PUT_LINE(result);
END;
```
The resulting (escaped) URL is:
```
http://www.example.com/Using%20the%20ESCAPE%20function.html
```

If you include a value of `TRUE` for the `escape_reserved_chars` parameter:
```sql
DECLARE
    result VARCHAR2(400);
BEGIN
    result := UTL_URL.ESCAPE('http://www.example.com/Using the ESCAPE function.html', TRUE);
    DBMS_OUTPUT.PUT_LINE(result);
END;
```
The `ESCAPE` function escapes the reserved characters as well as the illegal characters in the URL:
```
http%3A%2F%2Fwww.example.com%2FUsing%20the%20ESCAPE%20function.html
```

### 3.25.2 UNESCAPE
The `UNESCAPE` function removes escape characters added to a URL by the `ESCAPE` function, converting the URL back to its original form. The signature is:

```sql
UNESCAPE(url VARCHAR2, url_charset VARCHAR2)
```

#### Parameters
- **url**: The Uniform Resource Locator that `UTL_URL` will unescape.
- **url_charset**: After unescaping a character, the character is assumed to be in `url_charset` encoding and will be converted from that encoding to the database encoding before being returned. If `url_charset` is `NULL`, the character will not be converted. The default value is `ISO-8859-1`.

#### Examples
```sql
DECLARE
    result VARCHAR2(400);
BEGIN
    result := UTL_URL.UNESCAPE('http://www.example.com/Using%20the%20UNESCAPE%20function.html');
    DBMS_OUTPUT.PUT_LINE(result);
END;
```
The resulting (unescaped) URL is:
```
http://www.example.com/Using the UNESCAPE function.html
```

## 4 Acknowledgements
The PostgreSQL 8.3, 8.4, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 10, and 11 Documentation provided the baseline for the portions of this guide that are common to PostgreSQL, and is hereby acknowledged:

Portions of this EnterpriseDB Software and Documentation may utilize the following copyrighted material, the use of which is hereby acknowledged.

**PostgreSQL Documentation, Database Management System**
- PostgreSQL is Copyright © 1996-2018 by the PostgreSQL Global Development Group and is distributed under the terms of the license of the University of California below.
- Postgres95 is Copyright © 1994-5 by the Regents of the University of California.

Permission to use, copy, modify, and distribute this software and its documentation for any purpose, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and this paragraph and the following two paragraphs appear in all copies.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS-IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.