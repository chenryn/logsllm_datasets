      3 | 11-01-2021 17:30:45 | insert into pgbench_branches(bid,bbalance) values($1,$2)                                                      |   100    
      5 | 11-01-2021 17:31:15 | vacuum analyze pgbench_branches                                                                               |     1    
      5 | 11-01-2021 17:31:15 | copy pgbench_accounts from stdin                                                                              |     1    
      5 | 11-01-2021 17:31:15 | vacuum analyze pgbench_tellers                                                                                |     1    
      5 | 11-01-2021 17:31:15 | commit                                                                                                        |     1    
      6 | 11-01-2021 17:31:30 | alter table pgbench_branches add primary key (bid)                                                            |     1    
      6 | 11-01-2021 17:31:30 | vacuum analyze pgbench_accounts                                                                               |     1    
```    
#### Query Information    
**`userid`**: An ID of the user to whom that query belongs. pg_stat_monitor collects queries from all the users and uses the `userid` to segregate the queries based on different users.    
**`dbid`**: The database ID of the query. pg_stat_monitor accumulates queries from all the databases; therefore, this column is used to identify the database.    
**`queryid`**:  pg_stat_monitor generates a unique ID for each query (queryid).     
**`query`**: The query column contains the actual text of the query. This parameter depends on the **`pg_stat_monitor.pgsm_normalized_query`** configuration parameters, in which format to show the query.    
**`calls`**: Number of calls of that particular query.    
##### Example 1: Shows the usename, database name, unique queryid hash, query, and the total number of calls of that query.    
```sql    
postgres=# SELECT userid,  datname, queryid, substr(query,0, 50) AS query, calls FROM pg_stat_monitor;    
 userid  | datname  |     queryid      |                       query                       | calls     
---------+----------+------------------+---------------------------------------------------+-------    
 vagrant | postgres | 939C2F56E1F6A174 | END                                               |   561    
 vagrant | postgres | 2A4437C4905E0E23 | SELECT abalance FROM pgbench_accounts WHERE aid = |   561    
 vagrant | postgres | 4EE9ED0CDF143477 | SELECT userid,  datname, queryid, substr(query,$1 |     1    
 vagrant | postgres | 8867FEEB8A5388AC | vacuum pgbench_branches                           |     1    
 vagrant | postgres | 41D1168FB0733CAB | select count(*) from pgbench_branches             |     1    
 vagrant | postgres | E5A889A8FF37C2B1 | UPDATE pgbench_accounts SET abalance = abalance + |   561    
 vagrant | postgres | 4876BBA9A8FCFCF9 | truncate pgbench_history                          |     1    
 vagrant | postgres | 22B76AE84689E4DC | INSERT INTO pgbench_history (tid, bid, aid, delta |   561    
 vagrant | postgres | F6DA9838660825CA | vacuum pgbench_tellers                            |     1    
 vagrant | postgres | 214646CE6F9B1A85 | BEGIN                                             |   561    
 vagrant | postgres | 27462943E814C5B5 | UPDATE pgbench_tellers SET tbalance = tbalance +  |   561    
 vagrant | postgres | 4F66D46F3D4151E  | SELECT userid,  dbid, queryid, substr(query,0, 50 |     1    
 vagrant | postgres | 6A02C123488B95DB | UPDATE pgbench_branches SET bbalance = bbalance + |   561    
(13 rows)    
```    
##### Example 4: Shows the connected application_name.    
```sql    
SELECT application_name, query FROM pg_stat_monitor;    
 application_name |                                                query                                                     
------------------+------------------------------------------------------------------------------------------------------    
 pgbench          | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2    
 pgbench          | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2    
 pgbench          | vacuum pgbench_tellers    
 pgbench          | SELECT abalance FROM pgbench_accounts WHERE aid = $1    
 pgbench          | END    
 pgbench          | select count(*) from pgbench_branches    
 pgbench          | BEGIN    
 pgbench          | INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)    
 psql             | select application_name, query from pg_stat_monitor    
 pgbench          | vacuum pgbench_branches    
 psql             | select application_name query from pg_stat_monitor    
 pgbench          | truncate pgbench_history    
 pgbench          | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2    
(13 rows)    
```    
#### Error Messages / Error Codes and Error Level    
**`elevel`**, **`sqlcode`**,**`message`**,: error level / sql code and  log/warning/ error message    
```sql    
SELECT substr(query,0,50) AS query, decode_error_level(elevel) AS elevel,sqlcode, calls, substr(message,0,50) message     
FROM pg_stat_monitor;    
                       query                       | elevel | sqlcode | calls |                      message                          
---------------------------------------------------+--------+---------+-------+---------------------------------------------------    
 select substr(query,$1,$2) as query, decode_error |        |       0 |     1 |     
 select bucket,substr(query,$1,$2),decode_error_le |        |       0 |     3 |     
                                                   | LOG    |       0 |     1 | database system is ready to accept connections    
 select 1/0;                                       | ERROR  |     130 |     1 | division by zero    
                                                   | LOG    |       0 |     1 | database system was shut down at 2020-11-11 11:37    
 select $1/$2                                      |        |       0 |     1 |     
(6 rows)    
```    
#### Query Timing Information    
**`total_time`**,  **`min_time`**, **`max_time`**, **`mean_time`**: The total / minimum / maximum and mean time spent for the same query.    
```    
SELECT  userid,  total_time, min_time, max_time, mean_time, query FROM pg_stat_monitor;    
 userid |     total_time     |      min_time      |      max_time      |     mean_time      |                              query                                   
--------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------    
     10 |               0.14 |               0.14 |               0.14 |               0.14 | select * from pg_stat_monitor_reset()    
     10 |               0.19 |               0.19 |               0.19 |               0.19 | select userid,  dbid, queryid, query from pg_stat_monitor    
     10 |               0.30 |               0.13 |               0.16 |               0.15 | select bucket, bucket_start_time, query from pg_stat_monitor    
     10 |               0.29 |               0.29 |               0.29 |               0.29 | select userid,  dbid, queryid, query, calls from pg_stat_monitor    
     10 |           11277.79 |           11277.79 |           11277.79 |           11277.79 | SELECT * FROM foo    
```    
#### Client IP address     
**`client_ip`**: The IP address of the client that originated the query.    
```sql    
SELECT userid::regrole, datname, substr(query,0, 50) AS query, calls, client_ip     
FROM pg_stat_monitor, pg_database     
WHERE dbid = oid;    
userid  | datname  |                       query                       | calls | client_ip     
---------+----------+---------------------------------------------------+-------+-----------    
 vagrant | postgres | UPDATE pgbench_branches SET bbalance = bbalance + |  1599 | 10.0.2.15    
 vagrant | postgres | select userid::regrole, datname, substr(query,$1, |     5 | 10.0.2.15    
 vagrant | postgres | UPDATE pgbench_accounts SET abalance = abalance + |  1599 | 10.0.2.15    
 vagrant | postgres | select userid::regrole, datname, substr(query,$1, |     1 | 127.0.0.1    
 vagrant | postgres | vacuum pgbench_tellers                            |     1 | 10.0.2.15    
 vagrant | postgres | SELECT abalance FROM pgbench_accounts WHERE aid = |  1599 | 10.0.2.15    
 vagrant | postgres | END                                               |  1599 | 10.0.2.15    
 vagrant | postgres | select count(*) from pgbench_branches             |     1 | 10.0.2.15    
 vagrant | postgres | BEGIN                                             |  1599 | 10.0.2.15    
 vagrant | postgres | INSERT INTO pgbench_history (tid, bid, aid, delta |  1599 | 10.0.2.15    
 vagrant | postgres | vacuum pgbench_branches                           |     1 | 10.0.2.15    
 vagrant | postgres | truncate pgbench_history                          |     1 | 10.0.2.15    
 vagrant | postgres | UPDATE pgbench_tellers SET tbalance = tbalance +  |  1599 | 10.0.2.15    
```    
#### Call Timings Histogram    
**`resp_calls`**: Call histogram    
```sql    
SELECT resp_calls, query FROM pg_stat_monitor;    
                    resp_calls                    |                 query                                             
--------------------------------------------------+----------------------------------------------     
{1," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 0"} | select client_ip, query from pg_stat_monitor    
{3," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 1"} | select * from pg_stat_monitor_reset()    
{3," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 0"," 1"} | SELECT * FROM foo    
postgres=# SELECT * FROM histogram(0, 'F44CD1B4B33A47AF') AS a(range TEXT, freq INT, bar TEXT);    
       range        | freq |              bar    
--------------------+------+--------------------------------    
  (0 - 3)}          |    2 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    
  (3 - 10)}         |    0 |    
  (10 - 31)}        |    1 | ■■■■■■■■■■■■■■■    
  (31 - 100)}       |    0 |    
  (100 - 316)}      |    0 |    
  (316 - 1000)}     |    0 |    
  (1000 - 3162)}    |    0 |    
  (3162 - 10000)}   |    0 |    
  (10000 - 31622)}  |    0 |    
  (31622 - 100000)} |    0 |    
(10 rows)    
```    
There are 10 timebase buckets of the time **`pg_stat_monitor.pgsm_respose_time_step`** in the field ``resp_calls``. The value in the field shows how many queries run in that period of time.    
#### Object Information.    
**`relations`**: The list of tables involved in the query    
##### Example 1: List all the table names involved in the query.    
```sql    
postgres=# SELECT relations,query FROM pg_stat_monitor;    
           relations           |                                                query                                                     
-------------------------------+------------------------------------------------------------------------------------------------------    
                               | END    
 {pgbench_accounts}            | SELECT abalance FROM pgbench_accounts WHERE aid = $1    
                               | vacuum pgbench_branches    
 {pgbench_branches}            | select count(*) from pgbench_branches    
 {pgbench_accounts}            | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2    
                               | truncate pgbench_history    
 {pgbench_history}             | INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)    
 {pg_stat_monitor,pg_database} | SELECT relations query FROM pg_stat_monitor    
                               | vacuum pgbench_tellers    
                               | BEGIN    
 {pgbench_tellers}             | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2    
 {pgbench_branches}            | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2    
(12 rows)    
```    
##### Example 2: List all the views and the name of the table in the view. Here we have a view "test_view"    
```sql    
\d+ test_view    
                          View "public.test_view"    
 Column |  Type   | Collation | Nullable | Default | Storage | Description     
--------+---------+-----------+----------+---------+---------+-------------    
 foo_a  | integer |           |          |         | plain   |     
 bar_a  | integer |           |          |         | plain   |     
View definition:    
 SELECT f.a AS foo_a,    
    b.a AS bar_a    
   FROM foo f,    
    bar b;    
```    
Now when we query the pg_stat_monitor, it will show the view name and also all the table names in the view.    
```sql    
SELECT relations, query FROM pg_stat_monitor;    
      relations      |                                                query                                                     
---------------------+------------------------------------------------------------------------------------------------------    
 {test_view,foo,bar} | select * from test_view    
 {foo,bar}           | select * from foo,bar    