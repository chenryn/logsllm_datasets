### Accuracy of Active Probing Prediction

**Figure 1: The accuracy of various prediction mechanisms for a sample of the trials. The x = y line is included for reference.**

- **Active probing prediction (r=0.629)**
  - Predicted Bandwidth (B/s): 1M, 100k, 10k, 1k
  - Actively probed vs. actual bandwidth (r = 0.63)

### Trade-off Between Performance and Anonymity

As discussed in Section 2.3, there is a trade-off between selecting routers for optimal performance and providing maximum anonymity protection. Even if the bandwidth measurements are accurate, using high-bandwidth nodes more frequently increases a user’s exposure. Some users may prefer to uniformly select from all routers, while others may be willing to sacrifice some anonymity for increased performance. We propose giving users control over this trade-off by allowing them to select a point on the anonymity–performance scale, either globally (i.e., in the Tor configuration file) or based on the specific task.

Providing such flexibility not only enhances the experience for existing Tor users but also attracts new users, thereby improving overall anonymity by increasing the size of the anonymity set [7]. However, it is crucial to avoid partitioning attacks. If it is easy to identify a user's privacy preferences, the anonymity set may be reduced. For example, if only privacy-sensitive users use poorly performing routers, attackers may focus their efforts on them. Our proposed selection function blends traffic from both privacy-sensitive and privacy-insensitive users by having both groups select from a pool of routers, but with different weightings.

### Router Selection Function

A family of functions \( f_s : [0, 1] \to [0, 1] \) with parameter \( s \) is defined as:
\[ f_s(x) = \frac{1 - 2sx}{1 - 2s} \]

- This family of functions is well-defined for all \( s \neq 0 \). For \( s = 0 \), we define \( f_0(x) = x \).
- Several examples of this family of functions for varying values of \( s \) are shown in Figure 2.
- Note that \( f_s(0) = 0 \), \( f_s(1) = 1 \), and \( f_s \) is continuous and monotone increasing for all values of \( s \), making it a valid cumulative distribution function for any \( s \).

To choose a router given a selection function \( f_s \):
1. Obtain a list of routers and their rankings. This ranking can be based on any metric, but we propose the opportunistically probed available bandwidth metric described in Section 3.1.
2. Index the list from 0 to \( n-1 \).
3. Select the router with the index \( \lfloor n \times f_s(x) \rfloor \), where \( x \) is selected uniformly at random from [0, 1).
4. Repeat the procedure for any other routers to be selected, ensuring no duplicate selections.

### Features of the Algorithm

1. **Selection Based on Ranking**: The chance of a router being selected is based on its ranking rather than the metric itself. This prevents an attacker from adding a single high-bandwidth router to attract a large fraction of circuits.
2. **Flexibility with \( s \)**: The function \( f_s \) is well-defined for all real \( s \). A negative \( s \) can be used if low-bandwidth routers are preferred. While there are no theoretical bounds on the strength of a preference for high bandwidth, too high a value can result in nearly always choosing the most highly ranked router. In this paper, values of \( s \) from 0 to 15 are examined. A practical upper bound for \( s \) is 10, which results in the most highly ranked router being chosen 6% of the time in a typical scenario with \( n = 1000 \) routers.

### Handling New Routers

In practice, due to routers frequently joining and leaving the network, data on the bandwidth of many routers is often lacking. To address this, we divide the population into known and new routers. A population-weighted coin toss is used to choose between these groups. If the new routers are chosen, a router is selected uniformly at random. If known routers are chosen, the algorithm described above is used. This modified algorithm is used for the evaluations in Section 4.

### Evaluation of Router Selection Algorithm

One concern is that tuning the router selection algorithm according to the privacy needs of the user might leak these needs, allowing attackers to focus on those demanding the most privacy. To evaluate this, we chose a large number of paths (n = 100,000) according to the proposed router selection algorithm with equally probable selection levels and trained a naïve Bayesian classifier. The classifier then attempted to determine the most likely selection level of a single tunnel for another dataset (n = 100,000). The results are shown in Figure 3, indicating that extreme levels (0 and 15) are most likely to be identified correctly, but even in these cases, the probability of correct identification is no more than 0.21. Intermediate levels are correctly identified much less frequently.

Figure 4 shows the mean guess for each selection level along with the standard deviation. For comparison, it also shows the same statistics for a dataset where the selection level for both the training set and the test set were chosen from a skewed distribution. Over all trials, the average absolute error in the predicted selection level was 3.98 for the uniform distribution and 4.74 for the skewed distribution.

### Whole-System Evaluation

To evaluate the degree to which the proposed changes meet the dual goals of increasing user experience and resistance to subversion, we evaluated them according to two categories of metrics: performance and anonymity.

#### 4.1. Performance

To evaluate the performance of the proposed modifications to the Tor protocol, a large number of tests were performed over the Tor network. Each trial involved downloading a 1 MB file over HTTP using an exit router connected via a high-bandwidth connection to the hosting server. The web server, the exit router, and the client were kept fixed, while the intermediate routers were ranked and chosen according to the algorithms described in Sections 3.1 and 3.2. The results for Tunable Tor are based on approximately 20,000 trials from July 17, 2007, to September 26, 2007, and for vanilla Tor on approximately 40,000 trials from January 22, 2007, to March 26, 2007. The router selection levels were chosen uniformly at random from the integers between 0 and 15.

Figure 5 shows the CDFs of the file transfer times for vanilla Tor and Tunable Tor at several selection levels. As expected, vanilla Tor outperforms Tunable Tor, but the trade-off between performance and anonymity is evident. Figure 6 shows the 90th percentile of transfer times by selection level for known and all routers, with vanilla Tor included for comparison.