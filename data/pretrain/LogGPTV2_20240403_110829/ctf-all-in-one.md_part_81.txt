>>> set_param(rational_to_decimal=True) # 以十进制形式表示有理数
>>> solve(3*x == 1)
[x = 0.3333333333?]
在混合使用实数和整数变量时，Z3Py 会自动添加强制类型转换将整数表达式转换
成实数表达式。
>>> x = Real('x')
>>> y = Int('y')
>>> a, b, c = Reals('a b c') # 返回一个实数常量元组
>>> s, r = Ints('s r') # 返回一个整数常量元组
>>> x + y + 1 + a + s
x + ToReal(y) + 1 + a + ToReal(s) # ToReal() 将整数表达式转换成实
数表达式
>>> ToReal(y) + c
ToReal(y) + c
现代的CPU使用固定大小的位向量进行算术运算，在 Z3 中，使用函数
BitVec() 创建位向量常量， BitVecVal() 返回给定位数的位向量值。
849
5.8.1 Z3
>>> x = BitVec('x', 16) # 16 位，命名为 x
>>> y = BitVec('x', 16)
>>> x + 2
x + 2
>>> (x + 2).sexpr() # .sexpr() 返回内部表现形式
'(bvadd x #x0002)'
>>> simplify(x + y - 1) # 16 位整数的 -1 等于 65535
65535 + 2*x
>>> a = BitVecVal(-1, 16) # 16 位，值为 -1
>>> a
65535
>>> b = BitVecVal(65535, 16)
>>> b
65535
>>> simplify(a == b)
True
Z3 在 CTF 中的运用
re PicoCTF2013 Harder_Serial
题目如下，是一段 Python 代码，要求输入一段 20 个数字构成的序列号，然后程序
会对序列号的每一位进行验证，以满足各种要求。题目难度不大，但完全手工验证
是一件麻烦的事，而使用 Z3 的话，只要定义好这些条件，就可以得出满足条件的
值。
import sys
print ("Please enter a valid serial number from your RoboCorpInt
ergalactic purchase")
if len(sys.argv) " + sys.argv[1] + "= 0, serial[i] 42893724579039578812 buffer_size，则会发生溢出
1. 定位程序中的循环写内存操作的位置
2. 通过回溯程序，做三方面的判断，即判断循环控制变量是否可控和程序对
循环变量的验证是否完备、判断目的缓冲区是否位于关键的内存区域、判
断源缓冲区的数据来源是否可控
3. 根据回溯程序的结果，给出检测结果、即循环控制变量可控且验证不完备
且目的缓冲区位于关键内存区域，即存在缓冲区溢出漏洞
整数溢出类漏洞模式：
整型运算以及赋值操作的抽象表示。
Operation(addr) = {(opcode, result, loperand, roperand)}
Operation(addr) 表示地址为 addr 的算术运算；result 表示运算结果
的类型，opcode 表示运算名称，loperand 和 roperand 分别表示运算
的左右操作数
Assignment(addr) = {(destination, source-value)}
Assignment(addr) 表示地址为 addr 的赋值操作，destination 表示目
的操作数类型，source-value 表示源操作数的数值
整数溢出漏洞建模。可对整型运算和赋值操作进行约束限制，以检测其是否构
858