---
## Page 81
存到了rdi、rsi、rdx、rcx和 r8中。
在该状态下确认寄存器的内容。可以看出，开头 5 个参数 a、b、C、d和e分别保
赶快确认一下参数吧。
数名，就无法用于参数确认。
下的栈操作。由于参数也可能保存到栈上，如果在 break 命令中不加*直接使用函
而是设置到地址偏后一点的源代码级别的开头。大多数情况下，函数开头会进行以
*（星号)。为什么呢？如果不加*，断点就不会设置到汇编语言层次的函数开头;
此外，刚才那个例子设置断点时使用了函数名func，但以后应当在函数名之前加上
可获得参数内容。
存到栈上。因此，利用 GDB 在希望确认的函数开头中断之后，查看寄存器或栈即
r8、r9中，浮点型参数会保存到 xmmo、xmm...中。多于这些寄存器的参数会被保
在 x86_64 中，整型和指针型的参数会从左至右依次保存到 rdi、rsi、rdx、rcx、
x86_64下的调用
(gdb) ir
Breakp0int 2, 0x0000000000400478 in func ()
(gdb)  run
Breakpoint 1 at 0x400478
(gdb) b *func 
0x000000000040047c :
0x0000000000400479 :
x0000000000400478:
Dump of assembler code for function func:
(gdb) disas func 
θx7fff93d322f8
θx7fff93d32330
0x64100
0x88b8 35000
8
0x41
θx37d8019bc@
θx7fff93d32328
HACK#10 函数调用时的参数传递方法(x86_64 篇) 1 63 
push&rbp
θx7fff93d322f8
0x7fff93d32330
239847185344
140735673475880
sub
mov
一
www.TopSage.com
$0x50,%rsp
&rsp,&rbp
数
q
---
## Page 82
67
个参数也是指针，参数少的情况下会被保存到寄存器中，但在本 hack 的例子中,
指针类型的第 8 个参数h的处理方法与整型相同，保存到r9中。由于第 9、第 10 
这是因为，xmm0 和 xmm1的实际长度为 128 比特，
下面的联合：
给 xmmθ/xmml加上后缀（v4_fLoat、v2_double）的原因是，GDB将这些寄存器看做
以这样获得。
此外，浮点型的第6、第 7 个参数 f、g分别保存到了 xmml、xmml中。这两个值可
64 1
union {
$5 = 299792458
(gdb) p $xmm1.v2_double[0]
$4 = 3,1400001
(gdb) p $xmmo.v4_float[0]
$
S
float
3
QEEX
intl28_t
int64_t
int32_t
int16_t
int8_t
double
1第2章调试前的必知必会
unit128;
v2_int64[8];
v4_int32[8];
v8_int16[8];
v16_int8[16];
v2_double[2]
v4_float[4];
8
8
8
0x33
θx206
0x400478 0x400478
ox7fff93d32410
0x0
0x37d821d7b0
9x0
ex7fff93d3232c
0x75bcd15
【PF IF ］
www.TopSage.com
4
?
140735673476112
239849297840
140735673475884
123456789 
但也能同时保存更小的变量。
参数h
参数
---
## Page 83
们指向的值或字符串。操作方法如下。
值分别是第 9、第10 个参数i、j。此外，由于i和j是指针，有时会希望确认它
栈开头（地址Bx7fff4c78fd78）的值为返回地址，忽略掉，可以看出接下来的两个
图2-15栈的内容
如图 2-15 所示。
因是，在x86_64 架构中，整数和指针等的大小就是 giant word。
为栈的开头保存了函数的返回地址。此外，用g（giant word，双字）格式显示的原
查看栈的方法如下所示。虽然现在我们只关心两个参数，但却要显示3个，这是因
寄存器不够用，因此这两个参数被保存到栈中进行传递。
$28 = 0x4006a3 "string"
(gdb) p (char*)ex000466a3
0.01
(gdb) printf "%.2f\n", *(float*)ex0800000000600994
0x7fff4c79fd88: 0x00000000004006a3
ex7fff4c79fd78: 0x0000000000400558
(gdb) x/3g $rsp
0.01
(gdb) pritnf "%.2f\n", *(float*)(*(unsigned Llong*)($rsp+ox8))
复制，十分简单）。用下面的方法也能获得同样的结果，尽管输入的字符数变化不大：
有人可能会认为这里用十六进制数输入地址并不明智（当然，也有人认为只需用鼠标
ex7fff4c79fd88
@x7fff4c79fd80
ox7fff4c79fd78
地址
HACK#10  函数调用时的参数传递方法 (x86_64 篇)  I 65 
(main中的 func()的下一条命令的地址）
www.TopSage.com
（字符串“string”的指针）
0x0000000000600994
剩余的参数j
(vl的指针)
剩余的参数
返回地址
栈内容
68
---
## Page 84
8
MACK
了返回地址，并且整数或指针类型的大小为4字节。
式即可取得参数。取得第一个参数时使用esp+4 是因为，i386 架构中栈的开头保存
在 i386上，原则上参数全部堆放到栈中。因此，在函数开头中断后，用下面的方
然，只有指针的值h、i、j与[HACK#10]的结果不同。
这里使用[HACK#10]讲过的示例程序。笔者的环境中构建执行的结果如下所示。显
i386下的函数调用
够时才把参数放到栈中。
本hack 说明了函数传递参数的确认方式。x86_64下基本上使用寄存器，寄存器不
总结
参考文献
66 [
(gdb) p *(char*)($esp+16)
(8+dsas)(+buol)* d (qpb)
$4 =100
(b+dsa$)(*4ut)* d (qp6)
h: 0x80496d0, i: 0x80496d4, j: 0x80485bb
f: 3.140e+00, g: 2.998e+08
a: 100, b: 35000,c: 5,d:A, e: 123456789
7=5
(gdb) p *(short*)($esp+12)
6=35000
http://www.x86-64.org/documentation/abi.pdf
AMD64 Application Binary Interface
】第2章调试前的必知必会
讲述在i386架构上参数是如何传递给被调用的函数的。
函数调用时的参数传递方法（i386篇）
$29 = 0x4006a3 "string"
(gdb) p (char*)(*(unsigned long*)($rsp+0x1e))
www.TopSage.com
一大和一洋
---
## Page 85
以下的说明中，对[HACK#10]的程序中的func()做了如下改变。
可使用eax、edx和ecx传递开头3个参数。
GCC在函数声明中添加__attribute_（（regparm(3)))，即可进行这种调用。这样即
方式称为fastcall（快速调用）。具体使用哪个寄存器则依赖于具体实现。
i386也像x86_64那样可以将部分参数放在寄存器中进行函数调用。一般这种调用
i386中的寄存器调用
显示下一个参数时，要注意上一个值为double类型，它用掉了栈上的8个字节。
字节。
储地址大8个字节，这是因为i386架构中longlong类型和double类型的长度为8
下一个参数f也可以用同样的方法查看，但该参数的存储地址要比上一个参数的存
*i, char*j）
void func（inta,longb,shortc,chard,long longe,floatf,doubleg,int*h，float
__attribute__(regparm(3)))
$17=0x80485bb
（gdb)p/x*（int*)($esp+48）
16=0x80496d4
（gdb)p/x*（int*)($esp+44）
$15=0x80496d0
(+dss)(*u）*x/d(qp6)
2.998e+08
(gdb)printf“%.3e\n",*(double*)($esp+32)
3.14e+00
（gdb）printf“%.2e\n", *（float*)($esp+28)
$9=123456789
$8=65'A'
：
在Linux内核中可以使用FASTCALL或asmregpam等宏来实现该功能。
HACK#11函数调用时的参数传递方法（i386篇）1
www.TopSage.com
TopSage.com
网
70
---
## Page 86
(regparm())，也可以实现部分参数的寄存器传递。
基本上，i386 将所有参数保存到栈上。但是，通过GCC 的扩展功能__attribute__
第4个之后的参数与一般情况相同，保存到栈中。
总结
分别存储在 eax、edx和 ecx中。
下面在 func()函数开头中断，确认一下寄存器的值。可以看出，第1、2、3个参数
68
++*
$2 = 123456789
(gdb) p *(long long*)($esp+8)
$1=65'A'
(++dsas) (*ey2)+ d (qp5)
6
fs
S§
eflags
%.
(gdb) i r
Breakpoint 1 at 0x8048374
(gdb) b *func
：
(gdb) run
第2章调试前的必知必会
类型，那么只有在第1个参数为32比特时才能进行寄存器传递。
会组合使用 eax、edx 等寄存器来传递参数。但是，如果第 2 个参数为 long Long
如果第1个参数或第 2个参数为 long long类型（64 比特类型）的变量，那么就
0x33
0x7b
0x7b
0x7b
0x73
0x200286
0x8048374
oxbfdddf80
Oxbfdddff4 -1075978252
Oxbfdddf580xbfdddf58
0xbfdddf2c 0xbfdddf2c
0x8c5ff4
0x88b8
8
0x64
www.TopSage.com
-1075978368
2097798
0x8048374
9199604
S
13
1313
6
35000
100
---
## Page 87
式与C 语言函数相同。不过，在执行 f1.func(5，1)时，尽管没有在 func()中明确
需一个就足够了。实际上，在构建之后的 ELF 文件中，foo:func()函数的处理方
是有多少个实例，就要有多少个存储这些成员的空间。相反，方法 func 的实体只
每个 class foo 的实例中（本例中为 f1、f2)，其成员变量a和b的值都不同，通常
考虑下述C++源代码的执行情况。
C++语言的函数调用
#12
int main(void)
void foo:func(int x, int y)
public:
class foo {
#include 
b=y+ 2;
void func(int x, int y);
a = x; 
int b;
return 0;
int a;
f2.func(-4, 2);
fl.func(5, 1);
printf("fl: %p, f2: %p\n", &fl, &f2);
foo fl, f2;
介绍用C++写成的程序中参数是如何传递给被调用的函数的。
函数调用时的参数传递方法（C++篇）
HACK#12 函数调用时的参数传递方法（C++篇) | 69
www.TopSage.com
①②
---
## Page 88
?
现在程序暂停在源代码中的①调用的foo::func()的开头。
源代码中的记法来设置断点，而必须像下面这样使用 mangle 之后的符号。
中的①就是显示地址的。此外，如果没有添加调试选项，就不能用foo:：:func 这种
的实例地址会被当做第一个参数传递。因此，首先要知道f1和 f2的地址。源代码
在x86_64中查看参数
数。因此，调用方法时，传递的参数要比原型声明的参数多一个。
int y)收到了要访问的实例的信息。也就是说，func()的行为相当于下述C 语言函
70 1  第 2 章 调试前的必知必会
要查看参数的值，应该先编译上述源代码，再用GDB 运行。但是如前所述，对象
f1: Ox7fa34c3abo， f2: Ox7fffa34c3aa0 —— f1和 f2 的实例地址
gdb)run
Breakpoint 1 at 0x400558
(gdb) b *_ZN3foo4funcEii
void func(class foo *this, int x, int y)
this->b = y + 2;
this->a = X;
000000000400508 T foo:func(int, int)
# nm -C foo | grep foo 
0000000000400508 T fo0::func(int, int)
# nm foo | grep foo | c++filt