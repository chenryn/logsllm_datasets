tocol in today’s BGP.
Let F (Θ) (cid:3) (Fv(Θ))v∈V and the m-th iterate of F as
Θv ∈ P(P(v, v0))
| {z }
F [m](Θ) (cid:3) F (...F
Proof. (Sketch) The proof is technical and involved. But
the basic idea is to suppose that we cannot ﬁnd such an as-
, then we try to deduce that R[S] is not anti-
signment Θ
reﬂexive, by ﬁnding a directed cycle v1v2v3 ··· vnv1 such that
(cid:3)(cid:3)
R1 (cid:6)
(cid:2)
Pn (cid:5)
(cid:2)
··· (cid:6)
(cid:2)
P3 (cid:5)
(cid:2)
R3 (cid:6)
(cid:2)
P2 (cid:5)
(cid:2)
R2 (cid:6)
(cid:2)
P1 (cid:5)
(cid:2)
R1,
where Pi = TjRj , Tj ∈ P(vi, vj ) and j = (i mod n) + 1.
Hence, there always exists such an assignment Θ
(cid:3)(cid:3)
.
Theorem 1. Given a policy structure S, if the policy
relation R[S] is anti-reﬂexive, the iterates of F (Θ) converge
ﬁnitely to a ﬁxed-point, for all Θ ∈ Θ. Hence, S has a multi-
path solution.
Proof. Let ˆΘ[0] be an assignment deﬁned as:
j {v0} v = v0
v (cid:5)= v0.
∅
(Θ)).
ˆΘv[0] (cid:3)
m times
The iterates of F is a sequence (Θ, F [1](Θ), F [2](Θ), ...),
which describes the evolution of a greedy routing protocol
in the synchronous manner.
Not every Θv is feasible; Θv may not be a most preferred
set of paths as required. Let Θv be the feasible set that
contains Θv such that Θv0 (cid:3) {v0} and for v (cid:5)= v0,
Q
Θv (cid:3) {Θv ⊆ P(v, v0) | Θv = min(cid:3) Θv}.
Let the Cartesian product of feasible sets be Θ (cid:3)
v∈V Θv.
We deﬁne a natural partial order, ⊆, on Θ: for every pair
(cid:3)
Θ, Θ
(cid:3) ∈ Θ we write
• Θ ⊆ Θ
• Θ (cid:2) Θ
, if Θv ⊆ Θ
, if Θ ⊆ Θ
(cid:3)
We call an assignment Θ
(cid:3)
Θ ⊇ Θ
(cid:3)
v for all v ∈ V,
(cid:3)
v for some v ∈ V.
(cid:3)
and Θv (cid:2) Θ
(cid:3) ∈ Θ stabilised if for all Θ ∈ Θ,
implies F (Θ) ⊇ Θ
(cid:3).
(cid:3)
(cid:3)
, an iteration of F does not remove paths in Θ
A stabilised assignment Θ
can be interpreted as follows.
For any feasible assignment Θ which includes the paths in
, despite
Θ
any extra paths added in Θ. Vertices can add new paths
that are not superior to any path in Θ
4.3 Existence of Multi-path Solution
.
(cid:3)
(cid:3)
To establish the existence of multi-path solution, we show
that with an anti-reﬂexive policy relation the sequence of
feasible sets, to each iterate of Bellman-Ford mapping F is
constrained, is strictly decreasing in size, no matter what
the initial assignment of F is. The basic technique is by
showing that the iterates of the Bellman-Ford mapping must
contain a sequence of stabilised assignments which is strictly
growing until hitting the ﬁxed-point of F . Otherwise, it is
encircled by a dispute wheel.
Lemma 1. Given a policy structure S and a stabilised
, if the policy relation R[S] is anti-reﬂexive
is not a ﬁxed-point for F , then there always exists
(cid:3)
(cid:3)
assignment Θ
and Θ
an assignment Θ
(cid:3)(cid:3) ∈ Θ such that
(1) Θ
(cid:3)
,
(cid:3)(cid:3) (cid:3) Θ
(cid:3)(cid:3)
is also stabilised,
(2) Θ
(3) for all Θ ∈ Θ, if Θ ⊇ Θ
(cid:3)
, then F (Θ) ⊇ Θ
(cid:3)(cid:3)
.
Clearly, ˆΘ[0] is stabilised, and Θ ⊇ ˆΘ[0] for all Θ ∈ Θ.
Next, by applying Lemma 1 inductively, if ˆΘ[m] is not
a ﬁxed-point, then there exists a sequence of assignments
( ˆΘ[m] ∈ Θ)m≥0 such that
(1) ˆΘ[m + 1] (cid:3) ˆΘ[m],
(2) ˆΘ[m + 1] is stabilised,
(3) for all Θ ∈ Θ, if Θ ⊇ ˆΘ[m], then F (Θ) ⊇ ˆΘ[m + 1].
For each ˆΘ[m], deﬁne Θ[m] (cid:3) {Θ ∈ Θ | Θ ⊇ ˆΘ[m]}.
Hence, F [m](Θ) ∈ Θ[m+1] for all Θ ∈ Θ and m ≥ 0. Since
|P(v0)| is upper bounded (by the assumption in Section 4.1),
Θ is a ﬁnite set. And by
ˆΘ[m + 1] (cid:3) ˆΘ[m],
we have
Θ = Θ[0] (cid:3) Θ[1] (cid:3) Θ[2] (cid:3) ··· ,
((cid:3))
which is a strictly decreasing sequence of ﬁnite domain sets
for the iterates F [1], F [2], ....
The sequence ( ˆΘv[m])m≥0 is strictly growing in size when
( ˆΘv[m])v∈V is not a ﬁxed-point. Again, | ˆΘv[m]| < |P(v0)|
and |P(v0)| is upper bounded. Thus, ((cid:3)) must stop at some
ﬁxed-point for ﬁnite m. Hence, the iterates F (...F (Θ))
converge ﬁnitely to a ﬁxed-point, for all Θ ∈ Θ. Therefore,
S has a multi-path solution.
4.4 Existence of Uni-path Solution
For anti-reﬂexive policy relations, there is a connection
between uni-path solution and multi-path solution; the ex-
istence of multi-path solution implies the existence of uni-
path solution. Hence, the simple notion of no dispute wheels
is applicable to both multi-path solution and uni-path solu-
tion.
Given a policy structure, S = (cid:2)P(v0), (cid:5), (cid:6)(cid:3), let T (S)
to be the set of policy structures that must specify tie-
breaking on top of S, such that all paths from v to v0 can
be ordered by a total order. Formally,
o
= (cid:2)P(v0), (cid:5)(cid:3), (cid:6)(cid:3)
T (S) (cid:3)
is subject to the constraint that for all P, Q ∈
n
S(cid:3)
where each S(cid:3)
P(v, v0) for some v ∈ V,
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:3) P .
Q then P (cid:5)
(cid:3) Q,
(cid:3) Q or Q (cid:5)
(1) if P (cid:5)
(2) either P (cid:5)
Lemma 2. Given a policy structure S, if the policy rela-
tion R[S] is anti-reﬂexive, then there exists a tie-breaking
policy structure S(cid:3) ∈ T (S) such that R[S(cid:3)
] is anti-reﬂexive.
Proof. (Sketch) The the details can be found in the
Appendix of the extended paper. But the basic idea is
to suppose that any S(cid:3) ∈ T (S) such that R[S(cid:3)
] is not
anti-reﬂexive. We can always construct a new policy struc-
ture S(cid:3)(cid:3) ∈ T (S) such that R[S(cid:3)(cid:3)
] is anti-reﬂexive. Hence,
there always exists such a policy structure S(cid:3)(cid:3)
, satisfying
Lemma 2.
Theorem 2. Given a policy structure S, if the policy re-
lation R[S] is anti-reﬂexive, then S has a uni-path solution.
Proof. By Lemma 2, there exists a tie-breaking S(cid:3) ∈
T (S) such that R[S(cid:3)
] is anti-reﬂexive. Theorem 1 states
that S(cid:3)
has a multi-path solution. Since S(cid:3) ∈ T (S), for all
v ∈ V, (cid:5)(cid:3)
is a total order over P(v, v0). Hence, uni-path
solution and multi-path solution of S(cid:3)
are the same. Thus,
S(cid:3)
also has a uni-path solution, say, θ. Let
Pθ(v) = {eP ∈ P(v, v0) | e = (v, u) ∈ E , P = θu}.
P (by the deﬁnition of (cid:5)
), we have
(cid:3)
(cid:2)
Since Q (cid:5)(cid:5)
(cid:2)
(cid:3) P ⇒ Q (cid:5)(cid:5)
min(cid:3)(cid:2) Pθ(v)
(cid:2)
such that Q (cid:5)
= {P ∈ Pθ(v) | there exists no Q ∈ Pθ(v)
⊆ {P ∈ Pθ(v) | there exists no Q ∈ Pθ(v)
= min(cid:3) Pθ(v).
such that Q (cid:5)
(cid:3) P}
P}
(cid:2)
(cid:2)
, θv ∈ min(cid:3)(cid:2) Pθ(v).
Since θv is a uni-path solution for S(cid:3)
Therefore, we have θv ∈ min(cid:3)(cid:2) Pθ(v) ⊆ min(cid:3) Pθ(v); θ is
also a uni-path solution for S.
Note that Theorem 2 does not give an eﬃcient way to de-
termine suitable tie-breaking for a uni-path solution. And
trying out all possible ways of tie-breaking is clearly unde-
sirable. An interesting open problem is to ﬁnd an eﬃcient
algorithm.
4.5 Existence of k-best-path Solution
Theorem 3. Given a policy structure S, if the policy
relation R[S] is anti-reﬂexive, then S has a k-best-path so-
lution, for k ≥ 1.
Proof. Similar to the proof of Theorem 2, by Lemma 2,
there exists a tie-breaking S(cid:3) ∈ T (S) such that R[S(cid:3)
] is anti-
reﬂexive, and hence, S(cid:3)
has a multi-path solution. To gen-
v | ≤ k
erate a k-best-path solution, say Θ(k), such that |Θ
for all v ∈ V, we relax the tie-breaking in S(cid:3)
, by disabling
some suitable strict preferences. This is always possible be-
cause the anti-reﬂexivity of R[S(cid:3)
] will not be destroyed by
the relaxations. Then, let
(k)
PΘ(v) = {eP ∈ P(v, v0) | e = (v, u) ∈ E , P ∈ Θ
(k)
u }.
Following the proof of Theorem 2, we can show
v ⊆ min(cid:3)(cid:2) PΘ(v) ⊆ min(cid:3) PΘ(v).
Θ
(k)
Hence, Θ(k) is a k-best-path solution for S.
4.6 Resilience
In response to Section 2.5, we give a simple suﬃcient
condition for resilient policy-based protocols. A network
is called resilient to failures if there always exist uni-path,
multi-path and k-best-path solutions for every sub-network
in which some vertices or edges are removed from G, as mod-
elling failures and breakdowns of partial networks.
Theorem 4. Given a policy structure S, if the policy
relation R[S] is anti-reﬂexive, then the network is resilient
to failures.
Proof. If the policy relation R[S] is anti-reﬂexive, then
the induced policy relation for every sub-graph of G is also
anti-reﬂexive. Thus, the theorem follows from Theorems 1,
2, 3.
4.7 Asynchronous Convergence
Assuming that the policy-based routing system is running
the Bellman-Ford mapping F as the routing protocol. We
deﬁne asynchronous convergence as the property of a policy-
based routing system that it is able to converge despite of
asynchronous iterates of F in the presence of:
• variable delays of communication messages,
• bounded number of losses of communication messages,
• out-of-order communication messages.
We formalise the asynchronous convergence for the Bellman-
”
Ford mapping F as follows.
iterates of F , vertex v perceives:
Ideally, by the synchronous
“
Θv[t + 1] = Fv
(Θu[t])u∈V
.
But there may be asynchrony in communications, such that
there is a distortion — for 0 ≤ τv,u(t) ≤ t, v actually per-
ceives:
“
”
Θv[t + 1] = Fv
(Θu[τv,u(t)])u∈V
.
To be more precise, if there is a delay in communication
message, at time t, v may perceive that u has assignment
Θu[t(cid:3)
] for some 0 < t(cid:3) < t. If there is a communication mes-
sage loss, at any time from t1 to t2, v may always perceive
Θu[t1]. If there are out-of-order communication messages, v
may perceive Θu[t(cid:3)
1] at time t2, for
1 < t(cid:3)
t(cid:3)
2 < t1 < t2.
Now the evolution of the routing system is distorted by t−
τv,u(t). The convergence to ﬁxed-point is no longer assured,
even though F converges synchronously.
2] at time t1 while Θu[t(cid:3)
Nonetheless, applying the General Asynchronous Conver-
gence Theorem [1, 10], we can prove the asynchronous con-
vergence of F by satisfying certain suﬃcient conditions. We
show that the anti-reﬂexivity of the policy relation implies
the suﬃcient conditions of General Asynchronous Conver-
gence Theorem, and hence prove the asynchronous conver-
gence.
First, we impose a relatively mild assumption on the asyn-
chronous updates. Assuming the updates are carried out
inﬁnitely often, such that by allowing suﬃcient time any old
information can be overwritten. Formally, we assume:
(inﬁnitely often updates) for any ﬁnite t, there
exists ﬁnite t(cid:3) ≥ t such that
τv,u(t(cid:3)
) ≥ t, for all v, u ∈ V.
Hence, the gap t−τv,u(t) is zero for some ﬁnite t. Under this
assumption, F converges asynchronously by the following
General Asynchronous Convergence Theorem.
Intuitively, General Asynchronous Convergence Theorem
requires two conditions: 1) Synchronous Convergence Con-
dition that the iterates of F must converge synchronously,
2) Box Condition that the iterates proceed in certain inde-
pendent manner such that the asynchrony in every v ∈ V
does not obstruct the iterates of Fu for other u (cid:5)= v.
Let Θ[t] (cid:3) (Θv[t])v∈V as the assignment at moment t.
Theorem 5
Θ[0] ∈ Θ and there is a sequence of nonempty sets {Θ[m]}:
(Proposition 2.1 in [1]). If the initial value
··· (cid:2) Θ[m + 1] (cid:2) Θ[m] (cid:2) Θ[m − 1] (cid:2) ··· (cid:2) Θ
satisfying the following two conditions:
(1) (Synchronous Convergence Condition) We require that
F (Θ) ∈ Θ[m + 1], for all m ≥ 0 and Θ ∈ Θ[m].
Also, if {Θ[m]}m≥0 is a sequence such that Θ[m] ∈
Θ[m] for every m, then every limit point of {Θ[m]} is
a ﬁxed-point of F .
(2) (Box Condition) For every m, there exists a set Θv[m] (cid:2)
Θv such that Θ[m] is a Cartesian product of Θv[m]:
Y
v∈V
Θ[m] =
Θv[m].
Then, every limit point of {Θ[t]} is a ﬁxed-point of F for
any asynchronous iterates.
Theorem 6. Given a policy structure S, if the policy re-
lation R[S] is anti-reﬂexive, then the iterates of F converge
asynchronously to a multi-path solution.
Proof. By the proof of Theorem 1, Synchronous Conver-
gence Condition is shown to be satisﬁed. And we will use
the sequence ( ˆΘ[m] ∈ Θ)m≥0 in the proof of Theorem 1.
Next, we show the Box Condition. Let
Θv[m] = {Θv ∈ Θv | Θv ⊇ ˆΘv[m]}.
Q
v∈V Θv[m] for all m ≥ 0. Hence,
One can see that Θ[m] =
it completes the proof by General Asynchronous Conver-
gence Theorem (Theorem 5).
5. OPTIMALITY AND ISOTONICITY
Optimal (uni-path, multi-path, k-best-path) solutions are
not only locally optimal w.r.t. neighbours, but also globally
optimal for every vertex. Therefore, for all v (cid:5)= v0, the
following are satisﬁed:
θv ∈ min(cid:3) P(v, v0),
v ⊆ min(cid:3) P(v, v0).
Θv, Θ
(k)
In minimum-weight routing, isotonicity is deﬁned as for all
u, v ∈ V, T ∈ P(v, u) and R1, R2 ∈ P(u, v0),
w(R1) ≤ w(R2) implies w(T R1) ≤ w(T R2).
where w(P ) is the path weight of a path P .
Isotonicity is automatically satisﬁed in minimum-weight
routing because of a homogeneous preference on weights.
Hence, the most preferred set of paths of one vertex has no
conﬂict with its neighbours, and the (global) optimality of
routing solutions is assured when a local optimum is reached
at every vertex (see also [9]).
However, when we consider policy-based routing with non-
strict preferences, there are subtleties in deﬁning isotonicity.
Recall that R1 ≈ R2, if R1 (cid:5)(cid:5)
R1. For all
u, v ∈ V, T ∈ P(v, u) and R1, R2 ∈ P(u, v0), we can de-
ﬁne the following diﬀerent notions of isotonicity for a policy
structure:
R2 and R2 (cid:5)(cid:5)
(cid:2)
(cid:2)
(
• type-1 isotonicity, if
R2 implies T R1 (cid:5) T R2,
R1 (cid:5)
R1 ≈ R2 implies T R1 ≈ T R2.
(cid:2)
• type-2 isotonicity, if
R1 (cid:5)
(cid:2)
R2, implies T R1 (cid:5)
(cid:2)
T R2.
• strong isotonicity, if
(
R2, implies T R1 (cid:5)
R1 (cid:5)
T R2,
R1 ≈ R2, implies T R1 ≈ T R2.
(cid:2)
(cid:2)
Note that strong isotonicity implies both type-1 isotonic-
ity and type-2 isotonicity. Strong isotonicity is satisﬁed by
minimum-weight routing. In policy-based routing with non-
strict preferences, diﬀerent notions of isotonicity lend diﬀer-
ent implications to optimality, illustrated as follows.
T
v
2
v
1
R
1
R
2
v
0
Figure 9: Simple examples to illustrate diﬀerent no-
tions of isotonicity.
Example 4. For Figure 9, consider
R1 (cid:5)
(cid:2)
R2 but T R1 ≈ T R2.
This satisﬁes type-1 isotonicity, but not type-2 isotonicity.