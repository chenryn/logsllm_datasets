passwords are sampled from Myspace leak. If the value of
N is increased to 104, an attacker needs less than 24% of
the computational work required in the case of PBE to break
a Kamouﬂage vault. The ofﬂine work therefore goes down
with increasing N, which stems from the fact that more
decoys means more chances of learning the master-password
template early in the attack. The online work does increase
with increasing N, for N = 104 requiring an expected
108 queries for Myspace or 219 for Yahoo challenges.
Nevertheless, all the numbers for Kamouﬂage are an order of
magnitude smaller than the goal that an attacker must make
expected number of queries N/2 = 5, 000 (for N = 104).
For RY-ts the ofﬂine speedup is less but the attacker requires
only 2 online queries on an average for N = 103 and 18
for N = 104 to break RY-ts challenge. The PBE numbers
are also quite low for RY-ts: the attacker does better when
trained on a master password distribution close to that used
by the target user.
A perhaps more reﬁned measure of attack success is
the α-guesswork factor introduced by Bonneau [5]. This
factor measures the work required to break any αt-sized
4Since our attack does not exploit the vault contents, we dispense with
simulating generation of site passwords.
subset of a corpus of t total passwords. So at α = 0.5,
we give the α-guesswork in terms of the number of ofﬂine
computations to break any half of the passwords in each
leak and the number of online queries to break any half of
the passwords. Figure 3 shows the results for the range of
α we considered. The graphs end at α = 0.82 for Yahoo
and α = 0.76 for Myspace, reﬂecting the 18% and 24% of
challenge passwords we either did not crack in the ﬁrst 50
million guesses or which were not parsable by Kamouﬂage.
For RY-ts the ﬁrst 50 million were able to crack all but a
handful of the passwords. While we display both online and
ofﬂine queries on the same charts, they do not necessarily
correspond to the same subsets of master passwords.
the top left chart
The charts give a more expansive view of Kamouﬂage’s
resistance to attacks as compared to conventional PBE.
Looking at
in Figure 3, we see that
for conventional PBE (the highest solid black line), up to
α = 0.5 of Myspace passwords can be cracked in 221 ofﬂine
decryptions, while for Kamouﬂage the same can be achieved
with only 219 ofﬂine queries (second highest red dashed
line). Half of the master passwords can be broken in two
online queries for N = 103 (lowest densely dashed red line).
Increasing Kamouﬂage’s security parameter to N = 104
(bottom left chart) slightly increases the online work for
some α (bottom blue curve), but at the cost of yielding even
more efﬁcient ofﬂine decryption costs. Breaking Kamouﬂage
for a set of α = 0.5 of Myspace passwords is achievable
with 215 ofﬂine computations. The Yahoo charts (middle
two) show a similar picture. Half the master passwords can
be cracked in just two online queries for N = 103. The
attack performs best in the case of RY-ts. Here the attacker
can break more than 95% of master passwords with only one
online query (top right chart). This is because the attacker
has a very good estimate of the distribution of the user’s
true password.
The largest number of online queries needed at α = 0.5
across all six settings is just 11 for Myspace with N = 104.
Kamouﬂage+. Our attack against Kamouﬂage required few
online queries, which is due to the fact that decoys were
mostly ranked lower by our cracker than the true master
password. This vulnerability arises because Kamouﬂage’s
uniform selection of tokens produces relatively unlikely
decoy master passwords. We therefore experimented with
a modiﬁed version of Kamouﬂage, called Kamouﬂage+,
that instead chooses tokens according to their frequency in
the RY-tr dataset. We repeated simulations of our attack,
exactly as above but now with decoy master passwords
generated by Kamouﬂage+. The expected work for our
various experimental conﬁgurations is given in Figure 2. The
results in terms of α-guesswork are shown in Figure 3 (the
dotted blue line, third from top being ofﬂine work and the
dotted blue line second from bottom being online work).
This modiﬁcation to Kamouﬂage actually backﬁres in the
486486
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
Approach
PBE
Kamouﬂage
Kamouﬂage+
N
–
103
104
103
104
Myspace
Yahoo
RY-ts
Ofﬂine
(×103)
5,740
2,550
1,381
165
150
Online
0
11
108
344
3,118
Ofﬂine
(×103)
2,467
1,261
751
76
70
Online
0
22
219
302
2,168
Ofﬂine
(×103)
114
84
64
9
7
Online
0
2
18
190
777
Figure 2. The expected amount of ofﬂine work (rounded to nearest thousand decryption attempts for integer) and online work (rounded to nearest number
of login attempts to a website) required to break a conventional vault (PBE), Kamouﬂage, and Kamouﬂage+ for N ∈ {103, 104}. Here expectations are
taken over the distribution of Myspace, Yahoo, or RY-ts passwords, normalized after removing those that cannot be parsed using the Kamouﬂage grammar
and that cannot be cracked using the ﬁrst 50 million guesses of our cracker.
)
e
l
a
c
s
2
g
o
l
(
k
r
o
w
r
e
k
c
a
t
t
A
)
e
l
a
c
s
2
g
o
l
(
k
r
o
w
r
e
k
c
a
t
t
A
25
20
15
10
5
0
0
25
20
15
10
5
0
0
Myspace N = 103
0.2
0.4
0.6
0.8
Myspace N = 104
0.2
0.4
α
0.6
0.8
25
20
15
10
5
0
0
25
20
15
10
5
0
0
Yahoo N = 103
0.2
0.4
0.6
0.8
Yahoo N = 104
0.2
0.4
α
0.6
0.8
25
20
15
10
5
0
0
25
20
15
10
5
0
0
RY-ts N = 103
0.2
0.4
0.6
0.8
1
RY-ts N = 104
0.2
0.4
α
0.6
0.8
1
PBE Ofﬂine
Kamouﬂage Ofﬂine
Kamouﬂage Online
Figure 3. Experimental results for attacking conventional PBE (the baseline) and for Kamouﬂage and Kamouﬂage+ vaults for N ∈ {103, 104}. Shown
is the α-guesswork measured in number of ofﬂine attacker decryptions and number of online attacker queries (both log2 scale).
Kamouﬂage+ Ofﬂine
Kamouﬂage+ Online
case of ofﬂine work. This is because decoys are now more
likely to be probable passwords, speeding up even further
the attacker’s discovery of the master password template. On
the other hand, Kamouﬂage+ does increase the online work
for our attack, but this is still noticeably below the intended
goal of N/2 in all cases. Even with N = 104, the expected
number of online queries is never more than 65% of the goal
of 5,000 queries.
Summary. This relatively simple attack shows how existing
approaches to cracking-resistant vaults actually degrade se-
curity relative to conventional PBE. Speciﬁcally, the general
Kamouﬂage approach of storing an explicit list of cipher-
texts, with one true vault embedded among many decoys
generated as a function of the true master password, provides
brute-force attackers with an ofﬂine speedup that increases
with the number of decoys. Attackers may even be able
to do better in the online portion should they analyze the
vault contents more carefully (our attack above orders online
queries solely by master password likelihood).
The lesson here is a warning against building decoys
as a function of the true master password. One might
consider modifying Kamouﬂage to use decoy master pass-
words independently sampled from a model of the password
distribution, in order to eliminate the speedups obtained by
our attack. But this approach gives rise to other limitations,
such as a cap of N/2 expected online queries irrespective
of the entropy of the true master password. We therefore go
a different route.
487487
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
IV. OVERVIEW OF OUR APPROACH
The approach of hiding a true vault in a list of encrypted
vaults appears to have fundamental limitations. Most ob-
viously it only allows a number of decoys linear in the
storage size, and the construction of effective decoy master
passwords, as shown for Kamouﬂage in the last section, is
challenging.
We take a signiﬁcantly different approach. Instead of
explicitly storing decoy vaults, we construct single ciphertext
which, when decrypted with any wrong master password,
yields a decoy vault that appears to have been sampled
from the distribution of plaintext vaults (across the entire
user population). This approach is inspired by the theory of
honey encryption [23]. As we will see, though, successfully
building a honey vault using honey encryption raises a num-
ber of challenges, chief among them accurately modeling the
distribution of human-generated password sets in vaults.
Honey encryption. Juels and Ristenpart [23] introduced
honey encryption (HE) as a mechanism for encryption of
secrets under low-entropy passwords. We describe their
general approach, with terminology tailored to our setting.