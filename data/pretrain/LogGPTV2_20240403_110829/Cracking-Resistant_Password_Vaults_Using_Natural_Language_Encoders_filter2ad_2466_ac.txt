### Password Security Analysis and Attack Vectors

#### Introduction
The passwords analyzed in this study were sampled from the Myspace data leak. When the value of \( N \) is increased to 104, an attacker requires less than 24% of the computational effort needed for a conventional Password-Based Encryption (PBE) system to break a Kamouflage vault. This reduction in offline work is due to the fact that more decoys provide more opportunities for the attacker to learn the master password template early in the attack. Conversely, the online work increases with \( N \), requiring an expected 108 queries for Myspace or 219 for Yahoo challenges when \( N = 104 \). However, these numbers are still significantly lower than the goal of \( N/2 = 5,000 \) queries.

For RY-ts, the offline speedup is less pronounced, but the attacker needs only 2 online queries on average for \( N = 103 \) and 18 for \( N = 104 \) to break the challenge. The PBE numbers for RY-ts are also low, indicating that the attacker performs better when trained on a master password distribution similar to that used by the target user.

#### α-Guesswork Factor
A more refined measure of attack success is the α-guesswork factor introduced by Bonneau [5]. This factor quantifies the work required to break any αt-sized subset of a corpus of \( t \) total passwords. For example, at \( \alpha = 0.5 \), we measure the number of offline computations and online queries needed to break half of the passwords. Figure 3 illustrates the results for various values of \( \alpha \). The graphs end at \( \alpha = 0.82 \) for Yahoo and \( \alpha = 0.76 \) for Myspace, reflecting the 18% and 24% of challenge passwords that were either not cracked within the first 50 million guesses or were not parsable by Kamouflage. For RY-ts, almost all passwords were cracked within the first 50 million guesses.

#### Comparative Analysis
The charts in Figure 3 provide a comprehensive view of Kamouflage's resistance to attacks compared to conventional PBE. For instance, up to \( \alpha = 0.5 \) of Myspace passwords can be cracked with 221 offline decryptions using PBE, while Kamouflage achieves the same with only 219 offline queries. Half of the master passwords can be broken with just two online queries for \( N = 103 \). Increasing \( N \) to 104 slightly increases the online work for some \( \alpha \) but reduces the offline decryption costs. Breaking Kamouflage for a set of \( \alpha = 0.5 \) of Myspace passwords requires 215 offline computations. The Yahoo charts show a similar trend, with half the master passwords being cracked in just two online queries for \( N = 103 \).

In the case of RY-ts, the attacker can break more than 95% of master passwords with just one online query, as the attacker has a very good estimate of the user's true password distribution. The maximum number of online queries needed at \( \alpha = 0.5 \) across all settings is 11 for Myspace with \( N = 104 \).

#### Kamouflage+
Our attack against Kamouflage required few online queries because the decoys were generally ranked lower by our cracker than the true master password. This vulnerability arises from Kamouflage's uniform selection of tokens, which produces unlikely decoy master passwords. We experimented with a modified version, Kamouflage+, which selects tokens based on their frequency in the RY-tr dataset. The results, shown in Figure 2, indicate that this modification actually backfires in terms of offline work, as decoys are now more likely to be probable passwords, further speeding up the discovery of the master password template. However, Kamouflage+ does increase the online work, but it remains below the intended goal of \( N/2 \) in all cases. Even with \( N = 104 \), the expected number of online queries is never more than 65% of the goal of 5,000 queries.

#### Summary
This simple attack demonstrates how existing approaches to cracking-resistant vaults, such as Kamouflage, can degrade security relative to conventional PBE. Specifically, storing an explicit list of ciphertexts with one true vault embedded among many decoys generated as a function of the true master password provides brute-force attackers with an offline speedup that increases with the number of decoys. Attackers may even perform better in the online portion if they analyze the vault contents more carefully.

The lesson here is a warning against building decoys as a function of the true master password. One alternative could be to use decoy master passwords independently sampled from a model of the password distribution, but this approach has its own limitations, such as a cap of \( N/2 \) expected online queries. Therefore, we explore a different approach.

#### Overview of Our Approach
The method of hiding a true vault in a list of encrypted vaults has fundamental limitations, including a linear number of decoys and the challenge of constructing effective decoy master passwords. Instead, we propose a significantly different approach: constructing a single ciphertext that, when decrypted with any wrong master password, yields a decoy vault that appears to have been sampled from the distribution of plaintext vaults. This approach is inspired by the theory of honey encryption [23], which raises several challenges, particularly in accurately modeling the distribution of human-generated password sets in vaults.

Honey encryption, introduced by Juels and Ristenpart [23], is a mechanism for encrypting secrets under low-entropy passwords. We will describe their general approach, tailored to our setting, in the following sections.