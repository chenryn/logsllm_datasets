### 4. Read Array
### 5. Get Member on User Object
### 6. Set Member on User Object
### 7. Invoke Member on User Object
### 8. String Splitting
### 9. String Replacing
### 10. DOM Operation: getElementById
### 11. DOM Operation: createElement
### 12. With Statement
### 13. Eval Statement with Simple String

#### Web Sandbox vs. Virtual Browser Performance Comparison (in ms)
| Operation | Web Sandbox | Virtual Browser |
| --- | --- | --- |
| Read Array | 492ms | 515ms |
| Get Member on User Object | 1019ms | 1610ms |
| Set Member on User Object | 589ms | 566ms |
| Invoke Member on User Object | 605ms | 466ms |
| String Splitting | 475ms | 707ms |
| String Replacing | 673ms | N/A |
| DOM Operation: getElementById | N/A | N/A |
| DOM Operation: createElement | 480ms | 525ms |
| With Statement | 621ms | 1217ms |
| Eval Statement with Simple String | 416ms | 500ms |

**Table 2: Speed Comparison of 10K Atomic Operations in Web Sandbox and Virtual Browser**

### Figure 8: Memory Usage
- **With Virtual Browser**: 
  - Connect 4: ~2% higher
  - Poker: ~2% higher
  - Bounce: ~20% higher
- **Without Virtual Browser**:
  - Connect 4: Baseline
  - Poker: Baseline
  - Bounce: Baseline

### 6.1.1 Memory Usage
Figure 8 compares the memory usage of third-party JavaScript applications running in the Virtual Browser to that of a native browser. We selected third-party JavaScript games from a popular website [5]. Connect 4 and Poker are games with user interaction, requiring mouse movements and clicks. The memory usage for these two games in the Virtual Browser is about 2% higher than in a native browser. Bounce, a game with substantial animation and user interaction, consumes approximately 20% more memory in the Virtual Browser due to the resource demands of high animation programs.

### 6.1.2 Parsing Latency
We measured the parsing latency of the virtual HTML and JavaScript parsers in Figures 9 and 10 by parsing a game website [5] and a JavaScript game, Connect 4, from it. Both parsers are written in JavaScript. As shown in Figure 9, JavaScript parsing rates decrease slightly as the number of lines increases, which aligns with the polynomial time complexity of top-down parsing [9]. In Figure 10, HTML parsing is faster than JavaScript parsing because JavaScript, with its more complex AST nodes, is more intricate than HTML.

The JavaScript parser written in JavaScript is not very fast. An alternative would be to pre-parse first-order JavaScript and HTML code at the server side, generate a JavaScript object (parsing results), and transmit JSON format to the client. JSON parsing speed is fast enough at about 600K/s. However, this approach may be vulnerable if the JSON generator at the server side and the JSON parser at the client side interpret JSON differently. Due to the simplicity and well-formatted nature of the JSON protocol, the chance of different interpretations is low, making this approach a viable alternative. Even with this alternative, we still execute third-party JavaScript on the virtual JavaScript engine, ensuring greater security compared to other runtime approaches.

Unlike first-order JavaScript, higher-order JavaScript and dynamically generated HTML, such as scripts introduced by `innerHTML` and `document.write`, must be parsed by the JavaScript parser. These types of codes are relatively small in amount, so using our parser will not introduce significant delay, and the JSON approach remains feasible.

### 6.2 Browser Quirks Compatibility
Since we parse scripts only once at the virtual JavaScript engine and do not rely on native parsers, we are not vulnerable to browser quirks. Additionally, scripts cannot leak from our system to the native JavaScript engine. We evaluated our system with 113 browser quirks examples listed in the XSS Cheat Sheet [11], which contains mostly XSS attack examples caused by browser quirks. The results show that none of the 113 browser quirks allow third-party JavaScript codes to bypass the virtual JavaScript engine, regardless of whether the language features are supported by the Virtual Browser.

### 6.3 Robustness to Unknown Native JavaScript Engine Bugs
We evaluated the robustness of the Virtual Browser to unknown native JavaScript engine bugs. In this experiment, we used an old version (before 2009) of Firefox. All 14 bugs recorded in CVE [2] related to the SpiderMonkey JavaScript engine in 2010 and 2009 were evaluated. The results show that running example exploits in the database did not trigger any vulnerabilities in the Virtual Browser. Furthermore, our implementation does not satisfy the preconditions for triggering any of these vulnerabilities. For example:

- **CVE-2010-0165**: Requires native `eval` to trigger. The Virtual Browser source code does not use the native `eval` statement.
- **CVE-2009-2466**: Triggered by the `with(document.all){}` statement. The Virtual Browser source code does not use the `with` statement.
- **CVE-2009-1833**: Triggered by setting an object's prototype to `null` inside a prototype function. The Virtual Browser source code does not use prototypes in this way.

### 6.3.1 Discussion
How does the Virtual Browser handle bugs in the virtual JavaScript engine? This section's experiment demonstrates the difficulty of circumventing the virtual JavaScript engine to exploit the native JavaScript engine. The security of the virtual engine is fully analyzed in Section 4. Additionally, the virtual JavaScript engine is written in JavaScript, a type-safe language that does not have vulnerabilities like buffer overflows in the native JavaScript engine.

Where does the robustness come from? The Virtual Browser is implemented in a type-safe language, which gradually reduces the number of possible vulnerabilities. However, enhanced security also comes from the virtualization technique, which adds another layer of security. Attackers need to break the Virtual Browser and then the native browser to steal information. Similar to a virtual machine, the Virtual Browser with an additional virtualization layer offers enhanced security.

### 6.4 Completeness of Virtual Browser Implementation
We evaluated the completeness of our Virtual Browser prototype to ensure the reliability of our experimental results. Using test cases from ECMA-262 Edition 1 from Mozilla [7], we passed 96% of the test cases. For categories such as JavaScript Statements, Strings, Expressions, and Types, we passed 100% of the test cases. The worst performance was in the Object Objects category, where we passed only 72% of the test cases. The incomplete implementation affects functionality but not security, as we introduce data flows after isolation. Security is the primary concern in the Virtual Browser.

When we attempted to run the same tests in Web Sandbox [27], the sandbox could not even run the tests because it lacks full support for `eval`. This proves the importance of `eval` for testing. Our manual check shows that Web Sandbox also lacks a complete implementation.

### 7. Conclusions
In this paper, we propose the concept of browser virtualization and present a prototype of the Virtual Browser implemented in JavaScript. The Virtual Browser allows unmodified, full-featured third-party JavaScripts to run with enforced secure constraints on their privileges and communication. We first build an isolated virtual browser layer without any communication channels with native browser resources or the JavaScript from the website. Then, we explicitly introduce necessary data flows. Compared to existing efforts like Web Sandbox, our scheme supports full-featured JavaScript execution rather than limiting a subset of functionalities. Performance evaluation shows that our prototype has similar performance to Web Sandbox.

### 8. Acknowledgements
This work was supported by US NSF CNS-0831508. Opinions, findings, and conclusions are those of the authors and do not necessarily reflect the views of the funding sources.

### 9. References
[1] AD Safe. http://www.adsafe.org/.
[2] Common Vulnerabilities and Exposures. http://cve.mitre.org/.
[3] Doxygen. http://www.stack.nl/~dimitri/doxygen/.
[4] FBJS. http://wiki.developers.facebook.com/index.php/FBJS.
[5] JavaScript Game Site. http://javascript.internet.com/games/.
[6] JavaScript Reference. https://developer.mozilla.org/en/Core_Javascript_1.5_Reference.
[7] JavaScript Test Cases. http://mxr.mozilla.org/mozilla/source/js/tests/ecma/.
[8] Mozilla Rejects Native Code Approach of Chromeâ€™s NaCl. http://css.dzone.com/articles/mozilla-rejects-native-code.
[9] Parsing Time Complexity. http://en.wikipedia.org/wiki/Top-down_parsing.
[10] WebKit Source Codes. http://webkit.org/building/checkout.html.
[11] XSS Cheat Sheet. http://ha.ckers.org/xss.html.
[12] Acker, S. V., Ryck, P. D., Desmet, L., Piessens, F., and Joosen, W. WebJail: Least-privilege integration of third-party components in web mashups. In Annual Computer Security Applications Conference (ACSAC) (2011).
[13] Barth, A., Jackson, C., and Li, W. Attacks on JavaScript mashup communication. In W2SP: Web 2.0 Security and Privacy (2009).
[14] Barth, A., Jackson, C., and Mitchell, J. C. Securing frame communication in browsers. In 17th USENIX Security Symposium (2008).
[15] Barth, A., Weinberger, J., and Song, D. Cross-origin JavaScript capability leaks: Detection, exploitation, and defense. In 18th USENIX Security Symposium (2009).
[16] Crites, S., Hsu, F., and Chen, H. OMash: Enabling secure web mashups via object abstractions. In CCS: Conference on Computer and Communication Security (2008).
[17] De Keukelaere, F., Bhola, S., Steiner, M., Chari, S., and Yoshihama, S. SMash: Secure component model for cross-domain mashups on unmodified browsers. In WWW: Conference on World Wide Web (2008).
[18] Dong, X., Tran, M., Liang, Z., and Jiang, X. AdSentry: Comprehensive and flexible confinement of JavaScript-based advertisements. In Annual Computer Security Applications Conference (ACSAC) (2011).
[19] Finifter, M., Weinberger, J., and Barth, A. Preventing capability leaks in secure JavaScript subsets. In NDSS: Network and Distributed System Security Symposium (2010).
[20] Google. Google Caja. http://code.google.com/p/google-caja/.
[21] Guarnieri, S., and Livshits, B. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In 18th USENIX Security Symposium (2009).
[22] Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H., Lee, D.-T., and Kuo, S.-Y. Securing web application code by static analysis and runtime protection. In WWW: Conference on World Wide Web (2004).
[23] Kikuchi, H., Yu, D., Chander, A., Inamura, H., and Serikov, I. JavaScript instrumentation in practice. In APLAS: Asian Symposium on Programming Languages and Systems (2008).
[24] Maffeis, S., Mitchell, J., and Taly, A. Run-time enforcement of secure JavaScript subsets. In W2SP: Web 2.0 Security and Privacy (2009).
[25] Meyerovich, L., Felt, A. P., and Miller, M. Object views: Fine-grained sharing in browsers. In WWW: Conference on World Wide Web (2010).
[26] Meyerovich, L., and Livshits, B. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE Symposium on Security and Privacy (2010).
[27] Microsoft Live Labs. WebSandbox. http://websandbox.livelabs.com/.
[28] Mozilla. Narcissus JavaScript Engine. http://mxr.mozilla.org/mozilla/source/js/narcissus/.
[29] Nadji, Y., Saxena, P., and Song, D. Document structure integrity: A robust basis for cross-site scripting defense. In NDSS: Network and Distributed System Security Symposium (2009).
[30] Politz, J. G., Eliopoulos, S. A., Guha, A., and Krishnamurthi, S. ADsafety: Type-based verification of JavaScript sandboxing. In Proceedings of the 20th USENIX conference on Security (Berkeley, CA, USA, 2011), SECâ€™11, USENIX Association, pp. 12â€“12.
[31] Reis, C., Dunagan, J., Wang, H. J., Dubrovsky, O., and Esmeir, S. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In OSDI (2006).
[32] Resig, J. HTML Parser written in JavaScript. http://ejohn.org/blog/pure-javascript-html-parser/.
[33] Senocular. CSSParser. http://www.senocular.com/index.php?id=1.289.
[34] Sotirov, A. Blackbox reversing of XSS filters. RECON (2008).
[35] Ter Louw, M., Ganesh, K. T., and Venkatakrishnan, V. AdJail: Practical enforcement of confidentiality and integrity policies on web advertisements. In 19th USENIX Security Symposium (2010).
[36] Ter Louw, M., and Venkatakrishnan, V. Blueprint: Precise browser-neutral prevention of cross-site scripting attacks. In SP: 30th IEEE Symposium on Security and Privacy (2009).
[37] Wang, H. J., Fan, X., Jackson, C., and Howell, J. Protection and communication abstractions for web browsers in MashupOS. In SOSP: ACM Symposium on Operating Systems Principles (2007).
[38] Yee, B., Sehr, D., Dardyk, G., Chen, J. B., Muth, R., Ormandy, T., Okasaka, S., Narula, N., and Fullagar, N. Native Client: A sandbox for portable, untrusted x86 native code. In SP: IEEE Symposium on Security and Privacy (2009).
[39] Yu, D., Chander, A., Islam, N., and Serikov, I. JavaScript instrumentation for browser security. In POPL (2007).
[40] Yue, C., and Wang, H. Characterizing insecure JavaScript practices on the web. In WWW: Conference on the World wide web (2009).